
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000166a  00800100  0001c9b2  0001ca46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001c9b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a60  0080176a  0080176a  0001e0b0  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001e0b0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001e0c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000016e0  00000000  00000000  0001e104  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002874a  00000000  00000000  0001f7e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006121  00000000  00000000  00047f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00012136  00000000  00000000  0004e04f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00005088  00000000  00000000  00060188  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000485c  00000000  00000000  00065210  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00023a3f  00000000  00000000  00069a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000016e0  00000000  00000000  0008d4ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2d 23 	jmp	0x465a	; 0x465a <__ctors_end>
       4:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
       8:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
       c:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      10:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      14:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      18:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      1c:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      20:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      24:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      28:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      2c:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      30:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      34:	0c 94 da 30 	jmp	0x61b4	; 0x61b4 <__vector_13>
      38:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      3c:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      40:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      44:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      48:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      4c:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      50:	0c 94 fb 26 	jmp	0x4df6	; 0x4df6 <__vector_20>
      54:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      58:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      5c:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      60:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      64:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      68:	0c 94 fd 2a 	jmp	0x55fa	; 0x55fa <__vector_26>
      6c:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      70:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      74:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      78:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      7c:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      80:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      84:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      88:	0c 94 4c 23 	jmp	0x4698	; 0x4698 <__bad_interrupt>
      8c:	0a 41       	sbci	r16, 0x1A	; 26
      8e:	5a 42       	sbci	r21, 0x2A	; 42
      90:	42 41       	sbci	r20, 0x12	; 18
      92:	2d 42       	sbci	r18, 0x2D	; 45
      94:	2d 42       	sbci	r18, 0x2D	; 45
      96:	5a 42       	sbci	r21, 0x2A	; 42
      98:	5a 42       	sbci	r21, 0x2A	; 42
      9a:	5a 42       	sbci	r21, 0x2A	; 42
      9c:	5a 42       	sbci	r21, 0x2A	; 42
      9e:	5a 42       	sbci	r21, 0x2A	; 42
      a0:	5a 42       	sbci	r21, 0x2A	; 42
      a2:	5a 42       	sbci	r21, 0x2A	; 42
      a4:	5a 42       	sbci	r21, 0x2A	; 42
      a6:	0a 41       	sbci	r16, 0x1A	; 26
      a8:	07 41       	sbci	r16, 0x17	; 23
      aa:	5a 42       	sbci	r21, 0x2A	; 42
      ac:	5a 42       	sbci	r21, 0x2A	; 42
      ae:	50 42       	sbci	r21, 0x20	; 32
      b0:	5a 42       	sbci	r21, 0x2A	; 42
      b2:	3c 41       	sbci	r19, 0x1C	; 28
      b4:	5a 42       	sbci	r21, 0x2A	; 42
      b6:	5a 42       	sbci	r21, 0x2A	; 42
      b8:	0a 41       	sbci	r16, 0x1A	; 26
      ba:	5a 42       	sbci	r21, 0x2A	; 42
      bc:	5a 42       	sbci	r21, 0x2A	; 42
      be:	5a 42       	sbci	r21, 0x2A	; 42
      c0:	5a 42       	sbci	r21, 0x2A	; 42
      c2:	5a 42       	sbci	r21, 0x2A	; 42
      c4:	5a 42       	sbci	r21, 0x2A	; 42
      c6:	5a 42       	sbci	r21, 0x2A	; 42
      c8:	5a 42       	sbci	r21, 0x2A	; 42
      ca:	5a 42       	sbci	r21, 0x2A	; 42
      cc:	0a 41       	sbci	r16, 0x1A	; 26
      ce:	55 42       	sbci	r21, 0x25	; 37
      d0:	42 41       	sbci	r20, 0x12	; 18
      d2:	2d 42       	sbci	r18, 0x2D	; 45
      d4:	2d 42       	sbci	r18, 0x2D	; 45
      d6:	5a 42       	sbci	r21, 0x2A	; 42
      d8:	5a 42       	sbci	r21, 0x2A	; 42
      da:	5a 42       	sbci	r21, 0x2A	; 42
      dc:	5a 42       	sbci	r21, 0x2A	; 42
      de:	5a 42       	sbci	r21, 0x2A	; 42
      e0:	5a 42       	sbci	r21, 0x2A	; 42
      e2:	5a 42       	sbci	r21, 0x2A	; 42
      e4:	5a 42       	sbci	r21, 0x2A	; 42
      e6:	0a 41       	sbci	r16, 0x1A	; 26
      e8:	07 41       	sbci	r16, 0x17	; 23
      ea:	5a 42       	sbci	r21, 0x2A	; 42
      ec:	5a 42       	sbci	r21, 0x2A	; 42
      ee:	4b 42       	sbci	r20, 0x2B	; 43
      f0:	5a 42       	sbci	r21, 0x2A	; 42
      f2:	3c 41       	sbci	r19, 0x1C	; 28
      f4:	5a 42       	sbci	r21, 0x2A	; 42
      f6:	5a 42       	sbci	r21, 0x2A	; 42
      f8:	0a 41       	sbci	r16, 0x1A	; 26
      fa:	7f 42       	sbci	r23, 0x2F	; 47
      fc:	c0 43       	sbci	r28, 0x30	; 48
      fe:	72 42       	sbci	r23, 0x22	; 34
     100:	da 42       	sbci	r29, 0x2A	; 42
     102:	be 42       	sbci	r27, 0x2E	; 46
     104:	c0 43       	sbci	r28, 0x30	; 48
     106:	c0 43       	sbci	r28, 0x30	; 48
     108:	c0 43       	sbci	r28, 0x30	; 48
     10a:	c0 43       	sbci	r28, 0x30	; 48
     10c:	c0 43       	sbci	r28, 0x30	; 48
     10e:	c0 43       	sbci	r28, 0x30	; 48
     110:	c0 43       	sbci	r28, 0x30	; 48
     112:	c0 43       	sbci	r28, 0x30	; 48
     114:	8c 42       	sbci	r24, 0x2C	; 44
     116:	a0 42       	sbci	r26, 0x20	; 32
     118:	c0 43       	sbci	r28, 0x30	; 48
     11a:	c0 43       	sbci	r28, 0x30	; 48
     11c:	66 43       	sbci	r22, 0x36	; 54
     11e:	c0 43       	sbci	r28, 0x30	; 48
     120:	6e 42       	sbci	r22, 0x2E	; 46
     122:	c0 43       	sbci	r28, 0x30	; 48
     124:	c0 43       	sbci	r28, 0x30	; 48
     126:	a0 42       	sbci	r26, 0x20	; 32
     128:	c0 43       	sbci	r28, 0x30	; 48
     12a:	c0 43       	sbci	r28, 0x30	; 48
     12c:	c0 43       	sbci	r28, 0x30	; 48
     12e:	c0 43       	sbci	r28, 0x30	; 48
     130:	c0 43       	sbci	r28, 0x30	; 48
     132:	c0 43       	sbci	r28, 0x30	; 48
     134:	c0 43       	sbci	r28, 0x30	; 48
     136:	c0 43       	sbci	r28, 0x30	; 48
     138:	c0 43       	sbci	r28, 0x30	; 48
     13a:	7f 42       	sbci	r23, 0x2F	; 47
     13c:	0e 43       	sbci	r16, 0x3E	; 62
     13e:	72 42       	sbci	r23, 0x22	; 34
     140:	da 42       	sbci	r29, 0x2A	; 42
     142:	be 42       	sbci	r27, 0x2E	; 46
     144:	c0 43       	sbci	r28, 0x30	; 48
     146:	c0 43       	sbci	r28, 0x30	; 48
     148:	c0 43       	sbci	r28, 0x30	; 48
     14a:	c0 43       	sbci	r28, 0x30	; 48
     14c:	c0 43       	sbci	r28, 0x30	; 48
     14e:	c0 43       	sbci	r28, 0x30	; 48
     150:	c0 43       	sbci	r28, 0x30	; 48
     152:	c0 43       	sbci	r28, 0x30	; 48
     154:	8c 42       	sbci	r24, 0x2C	; 44
     156:	a0 42       	sbci	r26, 0x20	; 32
     158:	c0 43       	sbci	r28, 0x30	; 48
     15a:	c0 43       	sbci	r28, 0x30	; 48
     15c:	0e 43       	sbci	r16, 0x3E	; 62
     15e:	c0 43       	sbci	r28, 0x30	; 48
     160:	6e 42       	sbci	r22, 0x2E	; 46
     162:	c0 43       	sbci	r28, 0x30	; 48
     164:	c0 43       	sbci	r28, 0x30	; 48
     166:	a0 42       	sbci	r26, 0x20	; 32
     168:	cf 67       	ori	r28, 0x7F	; 127
     16a:	d9 67       	ori	r29, 0x79	; 121
     16c:	e1 67       	ori	r30, 0x71	; 113
     16e:	e4 67       	ori	r30, 0x74	; 116
     170:	e7 67       	ori	r30, 0x77	; 119
     172:	ea 67       	ori	r30, 0x7A	; 122
     174:	ed 67       	ori	r30, 0x7D	; 125
     176:	f0 67       	ori	r31, 0x70	; 112
     178:	f3 67       	ori	r31, 0x73	; 115
     17a:	b5 85       	ldd	r27, Z+13	; 0x0d
     17c:	da 85       	ldd	r29, Y+10	; 0x0a
     17e:	01 86       	std	Z+9, r0	; 0x09
     180:	1b 86       	std	Y+11, r1	; 0x0b
     182:	24 86       	std	Z+12, r2	; 0x0c
     184:	46 86       	std	Z+14, r4	; 0x0e
     186:	61 86       	std	Z+9, r6	; 0x09
     188:	71 86       	std	Z+9, r7	; 0x09
     18a:	b9 86       	std	Y+9, r11	; 0x09
     18c:	8d 86       	std	Y+13, r8	; 0x0d
     18e:	c3 88       	ldd	r12, Z+19	; 0x13
     190:	cb 88       	ldd	r12, Y+19	; 0x13
     192:	cf 88       	ldd	r12, Y+23	; 0x17
     194:	f3 88       	ldd	r15, Z+19	; 0x13
     196:	fc 88       	ldd	r15, Y+20	; 0x14
     198:	41 89       	ldd	r20, Z+17	; 0x11
     19a:	0e 89       	ldd	r16, Y+22	; 0x16
     19c:	0e 89       	ldd	r16, Y+22	; 0x16
     19e:	06 89       	ldd	r16, Z+22	; 0x16
     1a0:	5a 9a       	sbi	0x0b, 2	; 11
     1a2:	2c 9b       	sbis	0x05, 4	; 5
     1a4:	68 9b       	sbis	0x0d, 0	; 13
     1a6:	97 9b       	sbis	0x12, 7	; 18
     1a8:	a7 9b       	sbis	0x14, 7	; 20
     1aa:	c4 9b       	sbis	0x18, 4	; 24
     1ac:	24 9c       	mul	r2, r4
     1ae:	33 9d       	mul	r19, r3
     1b0:	33 9d       	mul	r19, r3
     1b2:	33 9d       	mul	r19, r3
     1b4:	58 9c       	mul	r5, r8
     1b6:	84 9c       	mul	r8, r4
     1b8:	d2 9c       	mul	r13, r2
     1ba:	ee 9c       	mul	r14, r14
     1bc:	f7 9a       	sbi	0x1e, 7	; 30
     1be:	0a 9b       	sbis	0x01, 2	; 1
     1c0:	2b b9       	out	0x0b, r18	; 11
     1c2:	ea b8       	out	0x0a, r14	; 10
     1c4:	ea b8       	out	0x0a, r14	; 10
     1c6:	ea b8       	out	0x0a, r14	; 10
     1c8:	ea b8       	out	0x0a, r14	; 10
     1ca:	ae b8       	out	0x0e, r10	; 14
     1cc:	b5 b8       	out	0x05, r11	; 5
     1ce:	bc b8       	out	0x0c, r11	; 12
     1d0:	cc b8       	out	0x0c, r12	; 12
     1d2:	da b8       	out	0x0a, r13	; 10
     1d4:	d3 b8       	out	0x03, r13	; 3

000001d6 <__trampolines_end>:
     1d6:	63 73       	andi	r22, 0x33	; 51
     1d8:	5f 64       	ori	r21, 0x4F	; 79
     1da:	69 73       	andi	r22, 0x39	; 57
     1dc:	61 62       	ori	r22, 0x21	; 33
     1de:	6c 65       	ori	r22, 0x5C	; 92
     1e0:	20 77       	andi	r18, 0x70	; 112
     1e2:	61 73       	andi	r22, 0x31	; 49
     1e4:	3a 20       	and	r3, r10
     1e6:	25 64       	ori	r18, 0x45	; 69
     1e8:	2c 20       	and	r2, r12
     1ea:	77 61       	ori	r23, 0x17	; 23
     1ec:	6e 74       	andi	r22, 0x4E	; 78
     1ee:	3a 20       	and	r3, r10
     1f0:	25 64       	ori	r18, 0x45	; 69
     1f2:	0a 00       	.word	0x000a	; ????

000001f4 <__c.3617>:
     1f4:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     204:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

00000211 <__c.3648>:
     211:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     221:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     231:	25 75 29 0a 00                                      %u)..

00000236 <__c.3639>:
     236:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     246:	61 69 6c 65 64 21 0a 00                             ailed!..

0000024e <__c.3633>:
     24e:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     25e:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

00000269 <__c.3618>:
     269:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     279:	35 75 0a 00                                         5u..

0000027d <__c.3616>:
     27d:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     28d:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

0000029b <__c.3614>:
     29b:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     2ab:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002b9 <__c.3612>:
     2b9:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     2c9:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002d7 <__c.3610>:
     2d7:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     2e7:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000002f5 <__c.3608>:
     2f5:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     305:	75 0a 00                                            u..

00000308 <__c.3606>:
     308:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     318:	75 0a 00                                            u..

0000031b <__c.3604>:
     31b:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

00000328 <__c.3602>:
     328:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     338:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000345 <__c.3721>:
     345:	0a 00                                               ..

00000347 <__c.3719>:
     347:	74 61 73 6b 3a 20 25 64 0a 00                       task: %d..

00000351 <__c.3717>:
     351:	69 32 63 5f 74 61 73 6b 2e 65 72 72 6f 72 3a 20     i2c_task.error: 
     361:	25 64 0a 00                                         %d..

00000365 <__c.3715>:
     365:	69 32 63 5f 74 61 73 6b 2e 64 6f 6e 65 3a 20 25     i2c_task.done: %
     375:	64 0a 00                                            d..

00000378 <__c.3710>:
     378:	0a 00                                               ..

0000037a <__c.3708>:
     37a:	20 20 54 57 5f 4d 54 5f 44 41 54 41 5f 4e 41 43       TW_MT_DATA_NAC
     38a:	4b 0a 00                                            K..

0000038d <__c.3706>:
     38d:	20 20 54 57 5f 4d 54 5f 53 4c 41 5f 4e 41 43 4b       TW_MT_SLA_NACK
     39d:	0a 00                                               ..

0000039f <__c.3704>:
     39f:	20 20 54 57 5f 4d 52 5f 53 4c 41 5f 4e 41 43 4b       TW_MR_SLA_NACK
     3af:	0a 00                                               ..

000003b1 <__c.3702>:
     3b1:	20 20 4f 50 5f 45 52 52 4f 52 0a 00                   OP_ERROR..

000003bd <__c.3700>:
     3bd:	20 20 4f 50 5f 4c 45 4e 0a 00                         OP_LEN..

000003c7 <__c.3698>:
     3c7:	20 20 4f 50 5f 54 49 4d 45 4f 55 54 0a 00             OP_TIMEOUT..

000003d5 <__c.3696>:
     3d5:	20 20 25 73 0a 00                                     %s..

000003db <__c.3646>:
     3db:	69 32 63 5f 74 69 6d 65 72 20 69 6e 69 74 20 66     i2c_timer init f
     3eb:	61 69 6c 65 64 0a 00                                ailed..

000003f2 <__c.3640>:
     3f2:	69 32 63 5f 69 6e 69 74 20 70 72 65 73 63 61 6c     i2c_init prescal
     402:	65 20 6f 76 65 72 66 6c 6f 77 0a 00                 e overflow..

0000040e <__c.3597>:
     40e:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 6c 65 6e 20     I2C op[%d]->len 
     41e:	3d 3d 20 30 0a 00                                   == 0..

00000424 <__c.3595>:
     424:	49 32 43 20 6f 70 5b 25 64 5d 2d 3e 62 75 66 20     I2C op[%d]->buf 
     434:	3d 3d 20 4e 55 4c 4c 0a 00                          == NULL..

0000043d <__c.3593>:
     43d:	49 32 43 20 6f 70 5b 49 4e 44 45 58 20 25 64 20     I2C op[INDEX %d 
     44d:	3e 3d 20 25 64 5d 0a 00                             >= %d]..

00000455 <__c.3643>:
     455:	72 74 63 5f 69 6e 69 74 20 20 77 72 69 74 65 20     rtc_init  write 
     465:	65 70 6f 63 68 20 66 61 69 6c 65 64 0a 00           epoch failed..

00000473 <__c.3633>:
     473:	72 74 63 5f 72 75 6e 20 77 72 69 74 65 20 65 72     rtc_run write er
     483:	72 6f 72 0a 00                                      ror..

00000488 <__c.3631>:
     488:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     498:	6f 72 0a 00                                         or..

0000049c <__c.3625>:
     49c:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

000004ac <__c.3619>:
     4ac:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

000004bd <__c.3611>:
     4bd:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 64 61 74     i2c_rtc_read dat
     4cd:	61 20 65 72 72 6f 72 0a 00                          a error..

000004d6 <__c.3609>:
     4d6:	69 32 63 5f 72 74 63 5f 72 65 61 64 20 61 64 64     i2c_rtc_read add
     4e6:	72 65 73 73 20 65 72 72 6f 72 0a 00                 ress error..

000004f2 <__c.3601>:
     4f2:	69 32 63 5f 72 74 63 5f 77 72 69 74 65 20 64 61     i2c_rtc_write da
     502:	74 61 20 65 72 72 6f 72 0a 00                       ta error..

0000050c <__c.3629>:
     50c:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     51c:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     52c:	74 20 25 64 0a 00                                   t %d..

00000532 <__c.3586>:
     532:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     542:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000552 <__c.3665>:
     552:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

00000562 <__c.3663>:
     562:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

00000573 <__c.3661>:
     573:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     583:	66 61 69 6c 65 64 0a 00                             failed..

0000058b <__c.3659>:
     58b:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000597 <__c.3657>:
     597:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     5a7:	64 0a 00                                            d..

000005aa <__c.3655>:
     5aa:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     5ba:	65 64 0a 00                                         ed..

000005be <__c.3635>:
     5be:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

000005c9 <__c.3633>:
     5c9:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005d7 <__c.3619>:
     5d7:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005e1 <__c.3599>:
     5e1:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5f1:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005fe <__c.3874>:
     5fe:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

0000060f <__c.3872>:
     60f:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     61f:	0a 00                                               ..

00000621 <__c.3870>:
     621:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

00000632 <__c.3868>:
     632:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

00000643 <__c.3866>:
     643:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     653:	0a 00                                               ..

00000655 <__c.3859>:
     655:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     665:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     675:	6d 65 0a 00                                         me..

00000679 <__c.3857>:
     679:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     689:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

00000693 <__c.3855>:
     693:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     6a3:	61 69 6c 65 64 0a 00                                ailed..

000006aa <__c.3853>:
     6aa:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     6ba:	6e 69 74 0a 00                                      nit..

000006bf <__c.3851>:
     6bf:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6cf:	0a 00                                               ..

000006d1 <__c.3805>:
     6d1:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     6e1:	61 69 6c 65 64 0a 00                                ailed..

000006e8 <__c.3803>:
     6e8:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

000006f9 <__c.3801>:
     6f9:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     709:	0a 00                                               ..

0000070b <__c.3799>:
     70b:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

0000071c <__c.3797>:
     71c:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

0000072d <__c.3795>:
     72d:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     73d:	0a 00                                               ..

0000073f <__c.3774>:
     73f:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     74f:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

00000760 <__c.3649>:
     760:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     770:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

0000077d <__c.3617>:
     77d:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

0000078d <__c.3650>:
     78d:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

0000079b <__c.3648>:
     79b:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     7ab:	25 6c 64 0a 00                                      %ld..

000007b0 <__c.3646>:
     7b0:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7c0:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

000007ce <__c.3643>:
     7ce:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

000007df <__c.3641>:
     7df:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

000007eb <__c.3639>:
     7eb:	4d 4d 43 20 43 61 72 64 20 49 6e 73 65 72 74 65     MMC Card Inserte
     7fb:	64 0a 00                                            d..

000007fe <__c.3637>:
     7fe:	2a 2a 2a 20 4d 4d 43 20 43 61 72 64 20 4e 4f 54     *** MMC Card NOT
     80e:	20 49 6e 73 65 72 74 65 64 21 20 2a 2a 2a 0a 00      Inserted! ***..

0000081e <__c.3635>:
     81e:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000082e <__c.3622>:
     82e:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

0000083b <__c.3594>:
     83b:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     84b:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000857 <__c.3666>:
     857:	0a 00                                               ..

00000859 <__c.3664>:
     859:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     869:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     879:	73 00                                               s.

0000087b <__c.3662>:
     87b:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     88b:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

00000896 <__c.3656>:
     896:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     8a6:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8b6:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8c6:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8d6:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008e3 <__c.3654>:
     8e3:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     8f3:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     903:	30 34 58 0a 00                                      04X..

00000908 <__c.3652>:
     908:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     918:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000926 <__c.3650>:
     926:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     936:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000945 <__c.3648>:
     945:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     955:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000964 <__c.3646>:
     964:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     974:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000983 <__c.3644>:
     983:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     993:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

000009a2 <__c.3642>:
     9a2:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     9b2:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009c1 <__c.3640>:
     9c1:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     9d1:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

000009df <__c.3638>:
     9df:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     9ef:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

000009fd <__c.3636>:
     9fd:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     a0d:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a1c <__c.3634>:
     a1c:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a2c:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a3a <__c.3632>:
     a3a:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a4b <__c.3596>:
     a4b:	72 63 3d 25 75 0a 00                                rc=%u..

00000a52 <__c.3634>:
     a52:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     a62:	72 65 65 0a 00                                      ree..

00000a67 <__c.3632>:
     a67:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     a77:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     a87:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000a90 <__c.3628>:
     a90:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000a9e <__c.3615>:
     a9e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     aae:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000abe <__c.3613>:
     abe:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000acc <__c.3611>:
     acc:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     adc:	73 74 0a 00                                         st..

00000ae0 <__c.3609>:
     ae0:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000af0 <__c.3607>:
     af0:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     b00:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000b10 <__c.3599>:
     b10:	69 6e 64 3a 25 64 2c 61 72 67 63 3a 25 64 0a 00     ind:%d,argc:%d..

00000b20 <__c.3589>:
     b20:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b30:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b40:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b50:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b60:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b70:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b80:	20 6c 73 20 64 69 72 0a 66 61 74 66 73 20 73 74      ls dir.fatfs st
     b90:	61 74 75 73 20 66 69 6c 65 0a 0a 00                 atus file...

00000b9c <__c.3587>:
     b9c:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000ba8 <__c.3919>:
     ba8:	25 73 0a 00                                         %s..

00000bac <__c.3917>:
     bac:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000bb4 <__c.3672>:
     bb4:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000bc0 <__c.3601>:
     bc0:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     bd0:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000bd8 <__c.3594>:
     bd8:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     be8:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000bf0 <__c.3758>:
     bf0:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000bfb <__c.3754>:
     bfb:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     c0b:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     c1b:	68 0a 00                                            h..

00000c1e <__c.3751>:
     c1e:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000c2e <__c.3746>:
     c2e:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     c3e:	5b 25 73 5d 0a 00                                   [%s]..

00000c44 <__c.3744>:
     c44:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000c52 <__c.3742>:
     c52:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     c62:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000c73 <__c.3729>:
     c73:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     c83:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000c8d <__c.3724>:
     c8d:	25 73 0a 00                                         %s..

00000c91 <__c.3722>:
     c91:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     ca1:	0a 00                                               ..

00000ca3 <__c.3710>:
     ca3:	0d 00                                               ..

00000ca5 <__c.3708>:
     ca5:	4d 6f 72 65 2e 2e 00                                More...

00000cac <__c.3698>:
     cac:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     cbc:	2e 0a 00                                            ...

00000cbf <__c.3694>:
     cbf:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000cce <__c.3691>:
     cce:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000cdb <__c.3689>:
     cdb:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000ce8 <__c.3687>:
     ce8:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cf8 <__c.3685>:
     cf8:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000d05 <__c.3683>:
     d05:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d15 <__c.3681>:
     d15:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000d21 <__c.3670>:
     d21:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000d2c <__c.3668>:
     d2c:	0a 00                                               ..

00000d2e <__c.3663>:
     d2e:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000d3e <__c.3653>:
     d3e:	72 6d 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     rmdir %s failed.
	...

00000d4f <__c.3651>:
     d4f:	72 6d 20 25 73 20 66 61 69 6c 65 64 0a 00           rm %s failed..

00000d5d <__c.3649>:
     d5d:	72 65 6e 61 6d 65 20 25 73 20 74 6f 20 25 73 0a     rename %s to %s.
	...

00000d6e <__c.3647>:
     d6e:	25 73 0a 00                                         %s..

00000d72 <__c.3644>:
     d72:	6d 6b 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     mkdir %s failed.
	...

00000d83 <__c.3636>:
     d83:	63 68 64 69 72 20 25 73 20 66 61 69 6c 65 64 0a     chdir %s failed.
	...

00000d94 <__c.3620>:
     d94:	4e 6f 74 65 3a 20 70 6f 73 69 78 20 70 72 65 66     Note: posix pref
     da4:	69 78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 70     ix is optional.p
     db4:	6f 73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d     osix cat file [-
     dc4:	70 5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a     p].posix cd dir.
     dd4:	70 6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31     posix copy file1
     de4:	20 66 69 6c 65 32 0a 70 6f 73 69 78 20 6c 73 20      file2.posix ls 
     df4:	64 69 72 20 5b 2d 6c 5d 0a 70 6f 73 69 78 20 6d     dir [-l].posix m
     e04:	6b 64 69 72 20 64 69 72 0a 70 6f 73 69 78 20 70     kdir dir.posix p
     e14:	61 67 65 20 4e 4e 0a 70 6f 73 69 78 20 70 77 64     age NN.posix pwd
     e24:	0a 70 6f 73 69 78 20 72 6d 20 66 69 6c 65 0a 70     .posix rm file.p
     e34:	6f 73 69 78 20 72 6d 64 69 72 20 64 69 72 0a 70     osix rmdir dir.p
     e44:	6f 73 69 78 20 72 65 6e 61 6d 65 20 6f 6c 64 20     osix rename old 
     e54:	6e 65 77 0a 0a 00                                   new...

00000e5a <__c.3618>:
     e5a:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000e66 <__c.3810>:
     e66:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000e74 <__c.3804>:
     e74:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000e81 <__c.3797>:
     e81:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000e8f <__c.3788>:
     e8f:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000e9c <__c.3779>:
     e9c:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000ead <__c.3765>:
     ead:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     ebd:	5d 0a 00                                            ]..

00000ec0 <__c.3747>:
     ec0:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
     ed0:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00000edd <__c.4406>:
     edd:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
     eed:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
     efd:	64 28 25 64 29 5d 0a 00                             d(%d)]..

00000f05 <__c.4401>:
     f05:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
     f15:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00000f1f <__c.4391>:
     f1f:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
     f2f:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
     f3f:	28 25 64 29 5d 0a 00                                (%d)]..

00000f46 <__c.4387>:
     f46:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
     f56:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
     f66:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

00000f73 <__c.4384>:
     f73:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
     f83:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

00000f8c <__c.4368>:
     f8c:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

00000f97 <__c.4366>:
     f97:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

00000fa2 <__c.4364>:
     fa2:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

00000fad <__c.4360>:
     fad:	20 20 20 20 20 00                                        .

00000fb3 <__c.4358>:
     fb3:	25 30 32 58 20 25 63 20 00                          %02X %c .

00000fbc <__c.4329>:
     fbc:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
     fcc:	49 46 43 20 73 74 61 74 65 3d 25 64 0a 00           IFC state=%d..

00000fda <__c.4326>:
     fda:	67 70 69 62 5f 72 65 61 64 5f 62 79 74 65 3a 20     gpib_read_byte: 
     fea:	73 74 61 74 65 3d 25 64 0a 00                       state=%d..

00000ff4 <__c.4310>:
     ff4:	3c 4e 52 46 44 3d 25 64 2c 4e 44 41 56 3d 25 64     <NRFD=%d,NDAV=%d
    1004:	3e 0a 00                                            >..

00001007 <__c.4306>:
    1007:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1017:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00001021 <__c.4302>:
    1021:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1031:	20 4e 44 41 43 3d 3d 31 3e 0a 00                     NDAC==1>..

0000103c <__c.4299>:
    103c:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    104c:	20 4e 52 46 44 3d 3d 30 3e 0a 00                     NRFD==0>..

00001057 <__c.4294>:
    1057:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1067:	20 4e 52 46 44 3d 3d 31 20 26 26 20 4e 44 41 43      NRFD==1 && NDAC
    1077:	20 3d 3d 20 30 3e 0a 00                              == 0>..

0000107f <__c.4290>:
    107f:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    108f:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00001099 <__c.4287>:
    1099:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    10a9:	20 49 46 43 20 73 74 61 74 65 3d 25 64 0a 00         IFC state=%d..

000010b8 <__c.4284>:
    10b8:	67 70 69 62 5f 77 72 69 74 65 5f 62 79 74 65 3a     gpib_write_byte:
    10c8:	20 4b 45 59 20 73 74 61 74 65 3d 25 64 0a 00         KEY state=%d..

000010d7 <__c.4269>:
    10d7:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    10e7:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    10f7:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

00001105 <__c.4257>:
    1105:	5b 49 46 43 20 53 45 4e 54 5d 0a 00                 [IFC SENT]..

00001111 <__c.4239>:
    1111:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    1121:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

0000112c <__c.4237>:
    112c:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    113c:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    114c:	72 61 6e 67 65 0a 00                                range..

00001153 <__c.4232>:
    1153:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    1163:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

0000116e <__c.4230>:
    116e:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    117e:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    118e:	61 6e 67 65 0a 00                                   ange..

00001194 <__c.4225>:
    1194:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    11a4:	5d 0a 00                                            ]..

000011a7 <__c.4220>:
    11a7:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

000011b8 <__c.4396>:
    11b8:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

000011c9 <__c.4391>:
    11c9:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    11d9:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    11e9:	32 58 48 5d 0a 00                                   2XH]..

000011ef <__c.4389>:
    11ef:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    11ff:	0a 00                                               ..

00001201 <__c.4387>:
    1201:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

00001212 <__c.4382>:
    1212:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

0000121e <__c.4380>:
    121e:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

0000122e <__c.4378>:
    122e:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    123e:	52 5d 0a 00                                         R]..

00001242 <__c.4376>:
    1242:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    1252:	0a 00                                               ..

00001254 <__c.4374>:
    1254:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

00001265 <__c.4372>:
    1265:	5b 55 4e 54 5d 0a 00                                [UNT]..

0000126c <__c.4367>:
    126c:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

00001278 <__c.4365>:
    1278:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    1288:	52 5d 0a 00                                         R]..

0000128c <__c.4363>:
    128c:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

0000129d <__c.4361>:
    129d:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    12ad:	0a 00                                               ..

000012af <__c.4359>:
    12af:	0a 00                                               ..

000012b1 <__c.4357>:
    12b1:	5b 55 4e 4c 5d 0a 00                                [UNL]..

000012b8 <__c.4352>:
    12b8:	5b 47 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [GPIB (%02XH) no
    12c8:	74 20 64 65 66 69 6e 65 64 20 54 4f 44 4f 5d 0a     t defined TODO].
	...

000012d9 <__c.4350>:
    12d9:	5b 44 43 4c 5d 0a 00                                [DCL]..

000012e0 <__c.4348>:
    12e0:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

000012ed <__c.4346>:
    12ed:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

000012f9 <__c.4344>:
    12f9:	5b 53 44 43 5d 0a 00                                [SDC]..

00001300 <__c.4342>:
    1300:	5b 53 50 44 5d 0a 00                                [SPD]..

00001307 <__c.4340>:
    1307:	5b 53 50 45 5d 0a 00                                [SPE]..

0000130e <__c.4338>:
    130e:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    131e:	20 54 4f 44 4f 5d 0a 00                              TODO]..

00001326 <__c.4336>:
    1326:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    1336:	20 54 4f 44 4f 5d 0a 00                              TODO]..

0000133e <__c.4331>:
    133e:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    134e:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

00001358 <__c.4329>:
    1358:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    1368:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

00001379 <__c.4302>:
    1379:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

0000138a <__c.4300>:
    138a:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

00001397 <__c.4298>:
    1397:	3c 42 55 53 3e 0a 00                                <BUS>..

0000139e <__c.4296>:
    139e:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

000013a9 <__c.4294>:
    13a9:	3c 49 46 43 3e 0a 00                                <IFC>..

000013b0 <__c.4289>:
    13b0:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    13c0:	0a 00                                               ..

000013c2 <__c.4287>:
    13c2:	44 6f 6e 65 0a 00                                   Done..

000013c8 <__c.4283>:
    13c8:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

000013d4 <__c.4281>:
    13d4:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    13e4:	20 65 78 69 74 0a 00                                 exit..

000013eb <__c.4279>:
    13eb:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    13fb:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    140b:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

00001416 <__c.4277>:
    1416:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    1426:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

00001430 <__c.4231>:
    1430:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    1440:	6f 74 65 63 74 65 64 0a 00                          otected..

00001449 <__c.4229>:
    1449:	25 73 20 6f 70 65 6e 20 66 61 69 6c 75 72 65 0a     %s open failure.
	...

0000145a <__c.4227>:
    145a:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    146a:	0a 00                                               ..

0000146c <__c.4422>:
    146c:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

00001479 <__c.4414>:
    1479:	4e 6f 74 65 3a 20 67 70 69 62 20 70 72 65 66 69     Note: gpib prefi
    1489:	78 20 69 73 20 6f 70 74 69 6f 6e 61 6c 0a 67 70     x is optional.gp
    1499:	69 62 20 61 64 64 72 65 73 73 65 73 0a 20 20 20     ib addresses.   
    14a9:	44 69 73 70 6c 61 79 20 61 6c 6c 20 64 65 76 69     Display all devi
    14b9:	63 65 20 47 50 49 42 20 62 75 73 20 61 64 64 72     ce GPIB bus addr
    14c9:	65 73 73 65 73 20 61 6e 64 20 50 50 52 20 76 61     esses and PPR va
    14d9:	6c 75 65 73 0a 67 70 69 62 20 63 6f 6e 66 69 67     lues.gpib config
    14e9:	20 5b 2d 76 5d 0a 20 20 20 44 69 73 70 6c 61 79      [-v].   Display
    14f9:	20 63 75 72 72 65 6e 74 20 64 72 69 76 65 73 20      current drives 
    1509:	63 6f 6e 66 69 67 75 72 61 74 69 6f 6e 0a 20 20     configuration.  
    1519:	20 2d 76 20 56 65 72 62 6f 73 65 20 2d 20 73 68      -v Verbose - sh
    1529:	6f 77 20 66 75 6c 6c 20 64 65 74 61 69 6c 0a 67     ow full detail.g
    1539:	70 69 62 20 64 65 62 75 67 20 4e 0a 20 20 20 64     pib debug N.   d
    1549:	65 62 75 67 20 6d 65 73 73 61 67 65 20 72 65 70     ebug message rep
    1559:	6f 72 74 69 6e 67 20 73 65 65 20 68 70 64 69 73     orting see hpdis
    1569:	6b 2e 63 66 67 20 66 6f 72 20 64 65 74 61 69 6c     k.cfg for detail
    1579:	73 0a 67 70 69 62 20 65 6c 61 70 73 65 64 0a 67     s.gpib elapsed.g
    1589:	70 69 62 20 65 6c 61 70 73 65 64 5f 72 65 73 65     pib elapsed_rese
    1599:	74 0a 67 70 69 62 20 69 66 63 0a 67 70 69 62 20     t.gpib ifc.gpib 
    15a9:	70 6c 6f 74 20 66 69 6c 65 6e 61 6d 65 2e 74 78     plot filename.tx
    15b9:	74 0a 67 70 69 62 20 70 6c 6f 74 5f 65 63 68 6f     t.gpib plot_echo
    15c9:	0a 67 70 69 62 20 74 61 73 6b 0a 67 70 69 62 20     .gpib task.gpib 
    15d9:	74 72 61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74     trace filename.t
    15e9:	78 74 20 5b 42 55 53 5d 0a 20 20 20 44 69 73 70     xt [BUS].   Disp
    15f9:	6c 61 79 20 61 63 74 69 76 69 74 79 20 6f 66 20     lay activity of 
    1609:	47 50 49 42 20 62 75 73 20 61 6e 64 20 6c 6f 67     GPIB bus and log
    1619:	20 69 74 0a 20 20 20 42 55 53 20 2d 20 69 6e 63      it.   BUS - inc
    1629:	6c 75 64 65 20 68 61 6e 64 73 68 61 6b 65 20 73     lude handshake s
    1639:	74 61 74 65 73 0a 0a 0a 00                          tates....

00001642 <__c.4412>:
    1642:	67 70 69 62 20 68 65 6c 70 0a 00                    gpib help..

0000164d <__c.4802>:
    164d:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

00001655 <__c.4800>:
    1655:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    1665:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

0000166f <__c.4798>:
    166f:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    167f:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    168f:	0a 00                                               ..

00001691 <__c.4796>:
    1691:	53 53 38 30 2d 25 64 00                             SS80-%d.

00001699 <__c.4794>:
    1699:	66 6f 72 6d 61 74 69 6e 67 20 25 73 20 25 6c 64     formating %s %ld
    16a9:	20 73 65 63 74 6f 72 73 0a 00                        sectors..

000016b3 <__c.4792>:
    16b3:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    16c3:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    16d3:	0a 00                                               ..

000016d5 <__c.4775>:
    16d5:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    16e5:	53 5f 50 45 52 5f 53 45 43 54 4f 52 20 21 3d 20     S_PER_SECTOR != 
    16f5:	32 35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74     256, Adjusting t
    1705:	6f 20 32 35 36 0a 00                                o 256..

0000170c <__c.4773>:
    170c:	57 61 72 6e 69 6e 67 3a 20 25 73 20 42 59 54 45     Warning: %s BYTE
    171c:	53 5f 50 45 52 5f 42 4c 4f 43 4b 20 21 3d 20 32     S_PER_BLOCK != 2
    172c:	35 36 2c 20 41 64 6a 75 73 74 69 6e 67 20 74 6f     56, Adjusting to
    173c:	20 32 35 36 0a 00                                    256..

00001742 <__c.4760>:
    1742:	68 70 64 69 72 5f 70 61 72 61 6d 65 74 65 72 73     hpdir_parameters
    1752:	20 69 6e 76 61 6c 69 64 20 54 59 50 45 0a 00         invalid TYPE..

00001761 <__c.4724>:
    1761:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    1771:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    1781:	0a 00                                               ..

00001783 <__c.4716>:
    1783:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    1793:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    17a3:	6c 6c 0a 00                                         ll..

000017a7 <__c.4703>:
    17a7:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    17b7:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    17c7:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

000017d2 <__c.4701>:
    17d2:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    17e2:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    17f2:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    1802:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

0000180a <__c.4699>:
    180a:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    181a:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    182a:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    183a:	3a 25 73 0a 00                                      :%s..

0000183f <__c.4697>:
    183f:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    184f:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    185f:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    186f:	55 4c 4c 0a 00                                      ULL..

00001874 <__c.4695>:
    1874:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    1884:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    1894:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    18a4:	66 20 72 61 6e 67 65 0a 00                          f range..

000018ad <__c.4693>:
    18ad:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    18bd:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    18cd:	6e 67 65 0a 00                                      nge..

000018d2 <__c.4654>:
    18d2:	0a 00                                               ..

000018d4 <__c.4649>:
    18d4:	0a 00                                               ..

000018d6 <__c.4647>:
    18d6:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    18e6:	6c 64 0a 00                                         ld..

000018ea <__c.4645>:
    18ea:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    18fa:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001909 <__c.4643>:
    1909:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001913 <__c.4641>:
    1913:	20 20 20 20 23 20 42 4c 4f 43 4b 53 20 3d 20 25         # BLOCKS = %
    1923:	6c 64 0a 00                                         ld..

00001927 <__c.4639>:
    1927:	20 20 23 20 48 50 38 35 20 42 41 53 49 43 20 41       # HP85 BASIC A
    1937:	44 44 52 45 53 53 20 3a 44 37 25 64 30 0a 00        DDRESS :D7%d0..

00001946 <__c.4637>:
    1946:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

0000194f <__c.4634>:
    194f:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    195f:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

0000196f <__c.4625>:
    196f:	0a 00                                               ..

00001971 <__c.4620>:
    1971:	0a 00                                               ..

00001973 <__c.4618>:
    1973:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

0000197c <__c.4616>:
    197c:	41 4d 49 47 4f 20 25 73 0a 00                       AMIGO %s..

00001986 <__c.4614>:
    1986:	53 53 38 30 20 25 73 0a 00                          SS80 %s..

0000198f <__c.4611>:
    198f:	44 65 76 69 63 65 20 41 64 64 72 65 73 73 65 73     Device Addresses
    199f:	0a 00                                               ..

000019a1 <__c.4605>:
    19a1:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    19b1:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    19c1:	2a 2a 2a 2a 2a 0a 00                                *****..

000019c8 <__c.4603>:
    19c8:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    19d8:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

000019e5 <__c.4601>:
    19e5:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    19f5:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    1a05:	0a 00                                               ..

00001a07 <__c.4597>:
    1a07:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    1a17:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1a27:	0a 00                                               ..

00001a29 <__c.4594>:
    1a29:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1a39:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    1a49:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001a59 <__c.4585>:
    1a59:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1a69:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    1a79:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00001a88 <__c.4582>:
    1a88:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    1a98:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    1aa8:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00001ab8 <__c.4573>:
    1ab8:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    1ac8:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    1ad8:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001ae6 <__c.4565>:
    1ae6:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1af6:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    1b06:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001b14 <__c.4555>:
    1b14:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b24:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    1b34:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00001b40 <__c.4538>:
    1b40:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b50:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    1b60:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1b70:	0a 00                                               ..

00001b72 <__c.4530>:
    1b72:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1b82:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1b92:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001ba0 <__c.4527>:
    1ba0:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bb0:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    1bc0:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00001bce <__c.4519>:
    1bce:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    1bde:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    1bee:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00001bfb <__c.4509>:
    1bfb:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1c0b:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    1c1b:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00001c2c <__c.4506>:
    1c2c:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    1c3c:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    1c4c:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00001c56 <__c.4502>:
    1c56:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1c66:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1c76:	0a 00                                               ..

00001c78 <__c.4491>:
    1c78:	55 6e 65 78 70 65 63 74 65 64 20 74 6f 6b 65 6e     Unexpected token
    1c88:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    1c98:	0a 00                                               ..

00001c9a <__c.4488>:
    1c9a:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    1caa:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00001cb8 <__c.4486>:
    1cb8:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00001cc5 <__c.4467>:
    1cc5:	25 73 0a 00                                         %s..

00001cc9 <__c.4457>:
    1cc9:	25 2d 32 35 73 20 3d 20 25 73 0a 00                 %-25s = %s..

00001cd5 <__c.4446>:
    1cd5:	25 2d 32 35 73 20 3d 20 25 38 6c 78 48 20 28 25     %-25s = %8lxH (%
    1ce5:	6c 64 29 0a 00                                      ld)..

00001cea <__c.3643>:
    1cea:	46 6f 75 6e 64 20 4d 6f 64 65 6c 3a 20 25 73 0a     Found Model: %s.
	...

00001cfb <__c.3641>:
    1cfb:	25 73 20 25 73 0a 00                                %s %s..

00001d02 <__c.3637>:
    1d02:	45 72 72 6f 72 3a 20 68 70 64 69 72 2e 69 6e 69     Error: hpdir.ini
    1d12:	20 6e 6f 74 20 66 6f 75 6e 64 21 0a 00               not found!..

00001d1f <__c.4539>:
    1d1f:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    1d2f:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1d3f:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1d4f:	48 5d 0a 00                                         H]..

00001d53 <__c.4537>:
    1d53:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    1d63:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    1d73:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    1d83:	48 5d 0a 00                                         H]..

00001d87 <__c.4535>:
    1d87:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1d97:	74 5d 0a 00                                         t]..

00001d9b <__c.4533>:
    1d9b:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001daa <__c.4531>:
    1daa:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    1dba:	74 65 5d 0a 00                                      te]..

00001dbf <__c.4529>:
    1dbf:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    1dcf:	61 74 65 5d 0a 00                                   ate]..

00001dd5 <__c.4527>:
    1dd5:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    1de5:	61 74 65 5d 0a 00                                   ate]..

00001deb <__c.4522>:
    1deb:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    1dfb:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    1e0b:	5d 0a 00                                            ]..

00001e0e <__c.4508>:
    1e0e:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001e1d <__c.4506>:
    1e1d:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    1e2d:	5d 0a 00                                            ]..

00001e30 <__c.4499>:
    1e30:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

00001e3c <__c.4485>:
    1e3c:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    1e4c:	5d 0a 00                                            ]..

00001e4f <__c.4483>:
    1e4f:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    1e5f:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

00001e69 <__c.4476>:
    1e69:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    1e79:	48 5d 0a 00                                         H]..

00001e7d <__c.4474>:
    1e7d:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    1e8d:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

00001e9d <__c.4469>:
    1e9d:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1ead:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    1ebd:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    1ecd:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

00001ed9 <__c.4466>:
    1ed9:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1ee9:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00001ef9 <__c.4464>:
    1ef9:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    1f09:	29 5d 0a 00                                         )]..

00001f0d <__c.4462>:
    1f0d:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    1f1d:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    1f2d:	28 25 64 29 5d 0a 00                                (%d)]..

00001f34 <__c.4460>:
    1f34:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    1f44:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

00001f52 <__c.4458>:
    1f52:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    1f62:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00001f6f <__c.4455>:
    1f6f:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    1f7f:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    1f8f:	44 4f 5d 0a 00                                      DO]..

00001f94 <__c.4452>:
    1f94:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    1fa4:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00001fad <__c.4450>:
    1fad:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    1fbd:	5d 0a 00                                            ]..

00001fc0 <__c.4441>:
    1fc0:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    1fd0:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    1fe0:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    1ff0:	43 6f 64 65 73 5d 0a 00                             Codes]..

00001ff8 <__c.4438>:
    1ff8:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    2008:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00002018 <__c.4436>:
    2018:	5b 53 53 38 30 20 49 6e 69 74 69 61 74 65 20 44     [SS80 Initiate D
    2028:	69 61 67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f     iagnostic - TODO
    2038:	5d 0a 00                                            ]..

0000203b <__c.4434>:
    203b:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    204b:	61 74 75 73 5d 0a 00                                atus]..

00002052 <__c.4432>:
    2052:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    2062:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

0000206b <__c.4430>:
    206b:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    207b:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

00002086 <__c.4428>:
    2086:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    2096:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

000020a5 <__c.4426>:
    20a5:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    20b5:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

000020c3 <__c.4424>:
    20c3:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

000020d4 <__c.4422>:
    20d4:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    20e4:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

000020f0 <__c.4420>:
    20f0:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    2100:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

0000210d <__c.4418>:
    210d:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    211d:	2d 4f 50 5d 0a 00                                   -OP]..

00002123 <__c.4416>:
    2123:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2133:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

00002144 <__c.4414>:
    2144:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    2154:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    2164:	44 4f 5d 0a 00                                      DO]..

00002169 <__c.4412>:
    2169:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    2179:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

00002183 <__c.4410>:
    2183:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    2193:	2d 4f 50 5d 0a 00                                   -OP]..

00002199 <__c.4408>:
    2199:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

000021a7 <__c.4406>:
    21a7:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    21b7:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

000021c3 <__c.4404>:
    21c3:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    21d3:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

000021e0 <__c.4402>:
    21e0:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    21f0:	20 57 72 69 74 65 5d 0a 00                           Write]..

000021f9 <__c.4399>:
    21f9:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2209:	20 52 65 61 64 5d 0a 00                              Read]..

00002211 <__c.4397>:
    2211:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    2221:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

0000222a <__c.4394>:
    222a:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    223a:	25 64 29 5d 0a 00                                   %d)]..

00002240 <__c.4392>:
    2240:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    2250:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00002259 <__c.4390>:
    2259:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    2269:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    2279:	52 4f 52 5d 0a 00                                   ROR]..

0000227f <__c.4381>:
    227f:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    228f:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

00002299 <__c.4376>:
    2299:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    22a9:	76 61 6c 69 64 5d 0a 00                             valid]..

000022b1 <__c.4371>:
    22b1:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    22c1:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

000022d0 <__c.4369>:
    22d0:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    22e0:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

000022ed <__c.4367>:
    22ed:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    22fd:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    230d:	5d 0a 00                                            ]..

00002310 <__c.4365>:
    2310:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00002321 <__c.4357>:
    2321:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    2331:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

0000233c <__c.4355>:
    233c:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    234c:	73 5d 0a 00                                         s]..

00002350 <__c.4345>:
    2350:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

0000235b <__c.4343>:
    235b:	25 73 3a 0a 00                                      %s:..

00002360 <__c.4318>:
    2360:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2370:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    2380:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

0000238b <__c.4316>:
    238b:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    239b:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    23ab:	49 4e 49 53 48 5d 0a 00                             INISH]..

000023b3 <__c.4312>:
    23b3:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    23c3:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    23d3:	58 48 29 5d 0a 00                                   XH)]..

000023d9 <__c.4310>:
    23d9:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    23e9:	72 5d 0a 00                                         r]..

000023ed <__c.4306>:
    23ed:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    23fd:	5d 0a 00                                            ]..

00002400 <__c.4304>:
    2400:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    2410:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    2420:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

00002429 <__c.4292>:
    2429:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    2439:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    2449:	62 79 74 65 73 5d 0a 00                             bytes]..

00002451 <__c.4290>:
    2451:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    2461:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    2471:	53 48 5d 0a 00                                      SH]..

00002476 <__c.4285>:
    2476:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    2486:	20 45 72 72 6f 72 5d 0a 00                           Error]..

0000248f <__c.4283>:
    248f:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    249f:	45 72 72 6f 72 5d 0a 00                             Error]..

000024a7 <__c.4281>:
    24a7:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    24b7:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

000024c5 <__c.4279>:
    24c5:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    24d5:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    24e5:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

000024ed <__c.4262>:
    24ed:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    24fd:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

00002509 <__c.4246>:
    2509:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    2519:	5d 0a 00                                            ]..

0000251c <__c.4360>:
    251c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    252c:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    253c:	64 64 72 65 73 73 5d 0a 00                          ddress]..

00002545 <__c.4357>:
    2545:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    2555:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    2565:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

00002570 <__c.4354>:
    2570:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2580:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    2590:	66 66 65 72 65 64 5d 0a 00                          ffered]..

00002599 <__c.4349>:
    2599:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    25a9:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

000025b9 <__c.4346>:
    25b9:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    25c9:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

000025d5 <__c.4343>:
    25d5:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    25e5:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    25f5:	0a 00                                               ..

000025f7 <__c.4340>:
    25f7:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2607:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

00002616 <__c.4337>:
    2616:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2626:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

00002637 <__c.4334>:
    2637:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    2647:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

00002657 <__c.4330>:
    2657:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    2667:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    2677:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2687:	0a 00                                               ..

00002689 <__c.4325>:
    2689:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

00002699 <__c.4322>:
    2699:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    26a9:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

000026b8 <__c.4320>:
    26b8:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    26c8:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    26d8:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

000026e3 <__c.4318>:
    26e3:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    26f3:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

00002703 <__c.4316>:
    2703:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    2713:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    2723:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

0000272c <__c.4314>:
    272c:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    273c:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

00002748 <__c.4312>:
    2748:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    2758:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    2768:	0a 00                                               ..

0000276a <__c.4310>:
    276a:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

0000277a <__c.4307>:
    277a:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    278a:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

0000279b <__c.4305>:
    279b:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    27ab:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    27bb:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

000027c4 <__c.4303>:
    27c4:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    27d4:	36 5d 0a 00                                         6]..

000027d8 <__c.4300>:
    27d8:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    27e8:	35 5d 0a 00                                         5]..

000027ec <__c.4297>:
    27ec:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    27fc:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

0000280c <__c.4294>:
    280c:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    281c:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    282c:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

0000283b <__c.4292>:
    283b:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    284b:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

0000285c <__c.4290>:
    285c:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    286c:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

0000287d <__c.4288>:
    287d:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    288d:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    289d:	0a 00                                               ..

0000289f <__c.4286>:
    289f:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    28af:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    28bf:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    28cf:	0a 00                                               ..

000028d1 <__c.4274>:
    28d1:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    28e1:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    28f1:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2901:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2911:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002922 <__c.4272>:
    2922:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2932:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2942:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2952:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2962:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002972 <__c.4270>:
    2972:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2982:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2992:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    29a2:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    29b2:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

000029c2 <__c.4268>:
    29c2:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    29d2:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    29e2:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    29f2:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2a02:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002a12 <__c.4263>:
    2a12:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2a22:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2a32:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2a42:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2a52:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2a62:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    2a72:	58 48 5d 0a 00                                      XH]..

00002a77 <__c.4261>:
    2a77:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2a87:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2a97:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2aa7:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2ab7:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2ac7:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2ad7:	30 32 58 48 5d 0a 00                                02XH]..

00002ade <__c.4259>:
    2ade:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2aee:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2afe:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2b0e:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2b1e:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2b2e:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2b3e:	30 32 58 48 5d 0a 00                                02XH]..

00002b45 <__c.4257>:
    2b45:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2b55:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2b65:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2b75:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2b85:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2b95:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2ba5:	30 32 58 48 5d 0a 00                                02XH]..

00002bac <__c.4250>:
    2bac:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

00002bbb <__c.4237>:
    2bbb:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002bc8 <__c.4235>:
    2bc8:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2bd8:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002be2 <__c.4228>:
    2be2:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2bf2:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002c01 <__c.4226>:
    2c01:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2c11:	0a 00                                               ..

00002c13 <__c.4219>:
    2c13:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2c23:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002c2d <__c.4213>:
    2c2d:	41 4d 49 47 4f 73 2d 3e 73 74 61 74 65 3a 25 64     AMIGOs->state:%d
    2c3d:	0a 00                                               ..

00002c3f <__c.4207>:
    2c3f:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    2c4f:	6e 65 5d 0a 00                                      ne]..

00002c54 <__c.4203>:
    2c54:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

00002c64 <__c.4162>:
    2c64:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    2c74:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    2c84:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

00002c8f <__c.4192>:
    2c8f:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    2c9f:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    2caf:	25 30 34 58 48 5d 0a 00                             %04XH]..

00002cb7 <__c.4169>:
    2cb7:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    2cc7:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

00002cd0 <__c.4155>:
    2cd0:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2ce0:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002cea <__c.4153>:
    2cea:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    2cfa:	75 73 5d 0a 00                                      us]..

00002cff <__c.4147>:
    2cff:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2d0f:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002d19 <__c.4145>:
    2d19:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    2d29:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00002d37 <__c.4139>:
    2d37:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    2d47:	74 61 74 75 73 5d 0a 00                             tatus]..

00002d4f <__c.4139>:
    2d4f:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    2d5f:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

00002d69 <__c.4137>:
    2d69:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    2d79:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

00002d85 <__c.4132>:
    2d85:	25 30 38 6c 64 0d 00                                %08ld..

00002d8c <__c.4126>:
    2d8c:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    2d9c:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00002dad <__c.4120>:
    2dad:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00002dbb <__c.4118>:
    2dbb:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    2dcb:	69 74 65 0a 00                                      ite..

00002dd0 <__c.4112>:
    2dd0:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00002ddc <__c.4110>:
    2ddc:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    2dec:	6f 3a 25 73 0a 00                                   o:%s..

00002df2 <__c.4108>:
    2df2:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    2e02:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    2e12:	74 00                                               t.

00002e14 <__c.4553>:
    2e14:	09 46 6f 72 6d 61 74 74 69 6e 67 3a 20 77 72 6f     .Formatting: wro
    2e24:	74 65 20 25 6c 64 20 73 65 63 74 6f 72 73 0a 00     te %ld sectors..

00002e34 <__c.4551>:
    2e34:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2e44:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

00002e54 <__c.4549>:
    2e54:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2e64:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    2e74:	30 0a 00                                            0..

00002e77 <__c.4547>:
    2e77:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2e87:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    2e97:	70 74 79 0a 00                                      pty..

00002e9c <__c.4545>:
    2e9c:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    2eac:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    2ebc:	73 20 65 6d 70 74 79 0a 00                          s empty..

00002ec5 <__c.4532>:
    2ec5:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    2ed5:	20 25 31 30 73 0a 00                                 %10s..

00002edc <__c.4530>:
    2edc:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    2eec:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    2efc:	74 20 66 6f 75 6e 64 0a 00                          t found..

00002f05 <__c.4528>:
    2f05:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    2f15:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    2f25:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    2f35:	74 65 72 73 0a 00                                   ters..

00002f3b <__c.4526>:
    2f3b:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    2f4b:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    2f5b:	65 6d 70 74 79 0a 00                                empty..

00002f62 <__c.4524>:
    2f62:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    2f72:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    2f82:	65 6d 70 74 79 0a 00                                empty..

00002f89 <__c.4522>:
    2f89:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    2f99:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    2fa9:	20 65 6d 70 74 79 0a 00                              empty..

00002fb1 <__c.4513>:
    2fb1:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

00002fc0 <__c.4511>:
    2fc0:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    2fd0:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    2fe0:	20 66 6f 75 6e 64 0a 00                              found..

00002fe8 <__c.4509>:
    2fe8:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    2ff8:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

00003007 <__c.4507>:
    3007:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    3017:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

00003027 <__c.4505>:
    3027:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    3037:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    3047:	70 74 79 0a 00                                      pty..

0000304c <__c.4497>:
    304c:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000305a <__c.4492>:
    305a:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

00003068 <__c.4490>:
    3068:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3078:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3088:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003098 <__c.4488>:
    3098:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    30a8:	73 0a 00                                            s..

000030ab <__c.4486>:
    30ab:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    30bb:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    30cb:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000030da <__c.4484>:
    30da:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    30ea:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

000030f6 <__c.4482>:
    30f6:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    3106:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

00003111 <__c.4480>:
    3111:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    3121:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

00003131 <__c.4463>:
    3131:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

0000313f <__c.4458>:
    313f:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

0000314d <__c.4456>:
    314d:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    315d:	73 0a 00                                            s..

00003160 <__c.4454>:
    3160:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3170:	75 6e 64 3a 25 73 0a 00                             und:%s..

00003178 <__c.4437>:
    3178:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

00003186 <__c.4434>:
    3186:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3196:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    31a6:	20 65 72 72 6f 72 0a 00                              error..

000031ae <__c.4426>:
    31ae:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000031bc <__c.4424>:
    31bc:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    31cc:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    31dc:	20 65 72 72 6f 72 0a 00                              error..

000031e4 <__c.4421>:
    31e4:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    31f4:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    3204:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    3214:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    3224:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    3234:	30 32 58 48 0a 00                                   02XH..

0000323a <__c.4419>:
    323a:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    324a:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    325a:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    326a:	20 25 64 0a 00                                       %d..

0000326f <__c.4415>:
    326f:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

0000327f <__c.4413>:
    327f:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    328f:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    329f:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    32af:	30 78 45 30 31 33 0a 00                             0xE013..

000032b7 <__c.4411>:
    32b7:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    32c7:	6e 64 3a 25 73 0a 00                                nd:%s..

000032ce <__c.4409>:
    32ce:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    32de:	75 6e 64 3a 25 73 0a 00                             und:%s..

000032e6 <__c.4385>:
    32e6:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0a 00           .Wrote: %8ld..

000032f4 <__c.4383>:
    32f4:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    3304:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

0000330d <__c.4381>:
    330d:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    331d:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

00003326 <__c.4379>:
    3326:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    3336:	20 20 25 34 64 0a 00                                  %4d..

0000333d <__c.4377>:
    333d:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    334d:	20 20 20 25 73 0a 00                                   %s..

00003354 <__c.4375>:
    3354:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    3364:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    3374:	77 72 69 74 65 0a 00                                write..

0000337b <__c.4373>:
    337b:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    338b:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    339b:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000033ab <__c.4371>:
    33ab:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    33bb:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    33cb:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000033da <__c.4369>:
    33da:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    33ea:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    33fa:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

0000340a <__c.4367>:
    340a:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    341a:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    342a:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

00003439 <__c.4365>:
    3439:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3449:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    3459:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

00003467 <__c.4363>:
    3467:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3477:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    3487:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    3497:	79 0a 00                                            y..

0000349a <__c.4349>:
    349a:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000034a8 <__c.4347>:
    34a8:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000034b6 <__c.4342>:
    34b6:	09 57 72 6f 74 65 3a 20 25 38 6c 64 0d 00           .Wrote: %8ld..

000034c4 <__c.4325>:
    34c4:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    34d4:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    34e4:	25 64 0a 00                                         %d..

000034e8 <__c.4308>:
    34e8:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    34f8:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    3508:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    3518:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

00003521 <__c.4294>:
    3521:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3531:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    3541:	62 69 67 0a 00                                      big..

00003546 <__c.4292>:
    3546:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3556:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    3566:	63 74 65 72 73 0a 00                                cters..

0000356d <__c.4285>:
    356d:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    357d:	73 0a 00                                            s..

00003580 <__c.4283>:
    3580:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    3590:	73 0a 00                                            s..

00003593 <__c.4281>:
    3593:	25 38 6c 64 20 44 69 72 20 20 73 65 63 74 6f 72     %8ld Dir  sector
    35a3:	73 0a 00                                            s..

000035a6 <__c.4279>:
    35a6:	25 38 6c 64 20 44 69 72 20 20 73 74 61 72 74 0a     %8ld Dir  start.
	...

000035b7 <__c.4277>:
    35b7:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

000035c4 <__c.4275>:
    35c4:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

000035d0 <__c.4273>:
    35d0:	0a 00                                               ..

000035d2 <__c.4270>:
    35d2:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    35e2:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    35f2:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

00003602 <__c.4268>:
    3602:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3612:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3622:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3632:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    3642:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

0000364e <__c.4265>:
    364e:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    365e:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    366e:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    367e:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

0000368e <__c.4263>:
    368e:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    369e:	3a 5b 25 73 5d 0a 00                                :[%s]..

000036a5 <__c.4253>:
    36a5:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    36b5:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    36c5:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    36d5:	64 0a 00                                            d..

000036d8 <__c.4251>:
    36d8:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    36e8:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    36f8:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    3708:	64 0a 00                                            d..

0000370b <__c.4249>:
    370b:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    371b:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    372b:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    373b:	69 6c 65 64 0a 00                                   iled..

00003741 <__c.4247>:
    3741:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3751:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3761:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3771:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003780 <__c.4234>:
    3780:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3790:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    37a0:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    37b0:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    37c0:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

000037d1 <__c.4231>:
    37d1:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    37e1:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    37f1:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

000037fa <__c.4229>:
    37fa:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    380a:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    381a:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    382a:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003832 <__c.4217>:
    3832:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3842:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3852:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3862:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3872:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

0000387f <__c.4192>:
    387f:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    388f:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

0000389f <__c.4183>:
    389f:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    38af:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    38bf:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    38cf:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

000038d9 <__c.4164>:
    38d9:	09 57 72 6f 74 65 3a 20 25 6c 64 0a 00              .Wrote: %ld..

000038e6 <__c.4159>:
    38e6:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

000038f3 <__c.4154>:
    38f3:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

00003900 <__c.4146>:
    3900:	09 57 72 6f 74 65 3a 20 25 6c 64 0d 00              .Wrote: %ld..

0000390d <__c.4144>:
    390d:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    391d:	65 6c 3a 5b 25 73 5d 2c 20 44 69 72 65 63 74 6f     el:[%s], Directo
    392d:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    393d:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    394d:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    395d:	25 6c 64 0a 00                                      %ld..

00003962 <__c.4128>:
    3962:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3972:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3982:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

0000398e <__c.4126>:
    398e:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    399e:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    39ae:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

000039b9 <__c.4124>:
    39b9:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    39c9:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    39d9:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    39e9:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    39f9:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003a04 <__c.4122>:
    3a04:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a14:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3a24:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3a34:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3a44:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003a4f <__c.4120>:
    3a4f:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a5f:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3a6f:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003a7d <__c.4118>:
    3a7d:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a8d:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3a9d:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3aad:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003abe <__c.4116>:
    3abe:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ace:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3ade:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3aee:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3afe:	58 68 0a 00                                         Xh..

00003b02 <__c.4114>:
    3b02:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3b12:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003b23 <__c.4108>:
    3b23:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3b33:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3b43:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003b4f <__c.4106>:
    3b4f:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3b5f:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3b6f:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003b7e <__c.4104>:
    3b7e:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3b8e:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3b9e:	25 6c 64 0a 00                                      %ld..

00003ba3 <__c.4102>:
    3ba3:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3bb3:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3bc3:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3bd3:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003bdc <__c.4100>:
    3bdc:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3bec:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3bfc:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    3c0c:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003c15 <__c.4098>:
    3c15:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    3c25:	58 48 20 3e 20 31 0a 00                             XH > 1..

00003c2d <__c.4096>:
    3c2d:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c3d:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    3c4d:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    3c5d:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00003c66 <__c.4094>:
    3c66:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3c76:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00003c85 <__c.4087>:
    3c85:	0a 00                                               ..

00003c87 <__c.4085>:
    3c87:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    3c97:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003ca1 <__c.4083>:
    3ca1:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    3cb1:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

00003cbd <__c.4081>:
    3cbd:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    3ccd:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003cda <__c.4079>:
    3cda:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    3cea:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003cf7 <__c.4077>:
    3cf7:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    3d07:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003d14 <__c.4075>:
    3d14:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    3d24:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

00003d30 <__c.4073>:
    3d30:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    3d40:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003d4c <__c.4071>:
    3d4c:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    3d5c:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003d66 <__c.4069>:
    3d66:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    3d76:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003d80 <__c.4067>:
    3d80:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    3d90:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003d9c <__c.4065>:
    3d9c:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    3dac:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003db8 <__c.4063>:
    3db8:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    3dc8:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003dd5 <__c.4061>:
    3dd5:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    3de5:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003df2 <__c.4059>:
    3df2:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    3e02:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00003e0e <__c.4057>:
    3e0e:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    3e1e:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003e28 <__c.4055>:
    3e28:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    3e38:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003e45 <__c.4053>:
    3e45:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    3e55:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003e62 <__c.4051>:
    3e62:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    3e72:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003e7f <__c.4049>:
    3e7f:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    3e8f:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003e9c <__c.4047>:
    3e9c:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    3eac:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00003eb9 <__c.4045>:
    3eb9:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    3ec9:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003ed6 <__c.4043>:
    3ed6:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    3ee6:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003ef3 <__c.4041>:
    3ef3:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    3f03:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00003f10 <__c.4039>:
    3f10:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    3f20:	20 20 20 20 20 20 25 73 0a 00                             %s..

00003f2a <__c.4037>:
    3f2a:	0a 25 73 0a 00                                      .%s..

00003f2f <__c.3914>:
    3f2f:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    3f3f:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    3f4f:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    3f5f:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

00003f6c <__c.3905>:
    3f6c:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    3f7c:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    3f8c:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    3f9c:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

00003fa8 <__c.3896>:
    3fa8:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    3fb8:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

00003fc9 <__c.3889>:
    3fc9:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    3fd9:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

00003fe2 <__c.3883>:
    3fe2:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    3ff2:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    4002:	25 73 5d 0a 00                                      %s]..

00004007 <__c.3871>:
    4007:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    4017:	6f 69 6e 74 65 72 0a 00                             ointer..

0000401f <__c.3866>:
    401f:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    402f:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    403f:	20 6d 65 6d 6f 72 79 0a 00                           memory..

00004048 <__c.3860>:
    4048:	44 69 73 6b 3a 20 25 73 20 6e 6f 74 20 66 6f 75     Disk: %s not fou
    4058:	6e 64 20 69 6e 20 68 70 64 69 72 2e 69 6e 69 0a     nd in hpdir.ini.
	...

00004069 <__c.3847>:
    4069:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    4079:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    4089:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    4099:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    40a9:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    40b9:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    40c9:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    40d9:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    40e9:	65 63 74 6f 72 73 0a 6c 69 66 20 63 72 65 61 74     ectors.lif creat
    40f9:	65 64 69 73 6b 20 6c 69 66 69 6d 61 67 65 20 6c     edisk lifimage l
    4109:	61 62 65 6c 20 6d 6f 64 65 6c 0a 6c 69 66 20 64     abel model.lif d
    4119:	65 6c 20 6c 69 66 69 6d 61 67 65 20 6e 61 6d 65     el lifimage name
    4129:	0a 6c 69 66 20 64 69 72 20 6c 69 66 69 6d 61 67     .lif dir lifimag
    4139:	65 0a 6c 69 66 20 65 78 74 72 61 63 74 20 6c 69     e.lif extract li
    4149:	66 69 6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74     fimage lifname t
    4159:	6f 5f 61 73 63 69 69 5f 66 69 6c 65 0a 6c 69 66     o_ascii_file.lif
    4169:	20 65 78 74 72 61 63 74 62 69 6e 20 6c 69 66 69      extractbin lifi
    4179:	6d 61 67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f     mage lifname to_
    4189:	6c 69 66 5f 66 69 6c 65 0a 20 20 20 20 65 78 74     lif_file.    ext
    4199:	72 61 63 74 73 20 61 20 66 69 6c 65 20 69 6e 74     racts a file int
    41a9:	6f 20 61 20 73 69 67 6c 65 20 66 69 6c 65 20 4c     o a sigle file L
    41b9:	49 46 20 69 6d 61 67 65 0a 6c 69 66 20 72 65 6e     IF image.lif ren
    41c9:	61 6d 65 20 6c 69 66 69 6d 61 67 65 20 6f 6c 64     ame lifimage old
    41d9:	6c 69 66 6e 61 6d 65 20 6e 65 77 6c 69 66 6e 61     lifname newlifna
    41e9:	6d 65 0a 55 73 65 20 2d 64 20 61 66 74 65 72 20     me.Use -d after 
    41f9:	66 69 72 73 74 20 6b 65 79 77 6f 72 64 20 27 6c     first keyword 'l
    4209:	69 66 27 20 61 62 6f 76 65 20 66 6f 72 20 4c 49     if' above for LI
    4219:	46 20 66 69 6c 65 73 79 73 74 65 6d 20 64 65 62     F filesystem deb
    4229:	75 67 67 69 6e 67 0a 0a 00                          ugging...

00004232 <__c.3845>:
    4232:	6c 69 66 20 68 65 6c 70 0a 00                       lif help..

0000423c <__c.4587>:
    423c:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    424c:	53 4b 0a 00                                         SK..

00004250 <__c.4585>:
    4250:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4260:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

0000426a <__c.4583>:
    426a:	25 2d 31 36 73 00                                   %-16s.

00004270 <__c.4581>:
    4270:	25 2d 31 36 73 00                                   %-16s.

00004276 <__c.4579>:
    4276:	53 53 38 30 3d 25 64 20 41 4d 49 47 4f 3d 25 64     SS80=%d AMIGO=%d
	...

00004287 <__c.4577>:
    4287:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    4297:	30 34 78 48 0a 00                                   04xH..

0000429d <__c.4575>:
    429d:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    42ad:	64 6f 6e 65 0a 00                                   done..

000042b3 <__c.4573>:
    42b3:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    42c3:	6f 6e 65 0a 00                                      one..

000042c8 <__c.4571>:
    42c8:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    42d8:	61 6c 69 7a 65 64 0a 00                             alized..

000042e0 <__c.4569>:
    42e0:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    42f0:	0a 00                                               ..

000042f2 <__c.4567>:
    42f2:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    4302:	7a 65 64 0a 00                                      zed..

00004307 <__c.4565>:
    4307:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    4317:	69 7a 65 64 0a 00                                   ized..

0000431d <__c.4563>:
    431d:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

0000432e <__c.4561>:
    432e:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    433e:	20 73 74 61 72 74 0a 00                              start..

00004346 <__c.4559>:
    4346:	53 79 73 74 65 6d 20 54 61 73 6b 20 49 6e 74 65     System Task Inte
    4356:	72 72 75 70 74 20 52 61 74 65 3a 20 25 6c 64 20     rrupt Rate: %ld 
    4366:	4e 61 6e 6f 20 53 65 63 6f 6e 64 73 0a 00           Nano Seconds..

00004374 <__c.4557>:
    4374:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

00004383 <__c.4555>:
    4383:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     Initializing RTC
    4393:	0a 00                                               ..

00004395 <__c.4553>:
    4395:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     Initializing I2C
    43a5:	20 62 75 73 0a 00                                    bus..

000043ab <__c.4551>:
    43ab:	49 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     Initializing SPI
    43bb:	20 62 75 73 0a 00                                    bus..

000043c1 <__c.4549>:
    43c1:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    43d1:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000043db <__c.4547>:
    43db:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    43eb:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000043f5 <__c.4545>:
    43f5:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4405:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4415:	35 64 69 73 6b 0a 00                                5disk..

0000441c <__c.4543>:
    441c:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

0000442c <__c.4541>:
    442c:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    443c:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004449 <__c.4539>:
    4449:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4459:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004468 <__c.4537>:
    4468:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    4478:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    4488:	3a 20 25 6c 64 0a 00                                : %ld..

0000448f <__c.4535>:
    448f:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

000044a0 <__c.4533>:
    44a0:	53 74 61 72 74 0a 00                                Start..

000044a7 <__c.4524>:
    44a7:	45 72 72 6f 72 3a 5b 25 73 5d 0a 00                 Error:[%s]..

000044b3 <__c.4522>:
    44b3:	4f 4b 0a 00                                         OK..

000044b7 <__c.4519>:
    44b7:	0a 3e 00                                            .>.

000044ba <__c.4508>:
    44ba:	62 61 63 6b 6c 69 67 68 74 20 30 78 52 52 47 47     backlight 0xRRGG
    44ca:	42 42 0a 68 65 6c 70 0a 6d 65 6d 0a 72 65 73 65     BB.help.mem.rese
    44da:	74 0a 73 65 74 64 61 74 65 0a 74 69 6d 65 0a 0a     t.setdate.time..
	...

000044eb <__c.4501>:
    44eb:	25 2d 31 36 73 00                                   %-16s.

000044f1 <__c.4499>:
    44f1:	25 2d 31 36 73 00                                   %-16s.

000044f7 <__c.4492>:
    44f7:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4507:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

00004511 <__c.4490>:
    4511:	25 2d 31 36 73 00                                   %-16s.

00004517 <__c.4488>:
    4517:	25 2d 31 36 73 00                                   %-16s.

0000451d <__c.4486>:
    451d:	6c 63 64 5f 74 61 73 6b 20 69 6e 69 74 20 66 61     lcd_task init fa
    452d:	69 6c 65 64 0a 00                                   iled..

00004533 <__c.4484>:
    4533:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    4543:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

00004551 <__c.4478>:
    4551:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    4561:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

0000456b <__c.4472>:
    456b:	25 73 20 25 32 64 20 25 30 32 64 3a 25 30 32 64     %s %2d %02d:%02d
    457b:	3a 25 30 32 64 00                                   :%02d.

00004581 <__c.4458>:
    4581:	0a 00                                               ..

00004583 <__c.4456>:
    4583:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4593:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

0000459d <__c.4454>:
    459d:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    45ad:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000045b7 <__c.4452>:
    45b7:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    45c7:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    45d7:	35 64 69 73 6b 0a 00                                5disk..

000045de <__c.4450>:
    45de:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

000045ee <__c.4448>:
    45ee:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    45fe:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

0000460b <__c.4446>:
    460b:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    461b:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

0000462a <__c.4444>:
    462a:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    463a:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    464a:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..

0000465a <__ctors_end>:
    465a:	11 24       	eor	r1, r1
    465c:	1f be       	out	0x3f, r1	; 63
    465e:	cf ef       	ldi	r28, 0xFF	; 255
    4660:	d0 e4       	ldi	r29, 0x40	; 64
    4662:	de bf       	out	0x3e, r29	; 62
    4664:	cd bf       	out	0x3d, r28	; 61

00004666 <__do_copy_data>:
    4666:	17 e1       	ldi	r17, 0x17	; 23
    4668:	a0 e0       	ldi	r26, 0x00	; 0
    466a:	b1 e0       	ldi	r27, 0x01	; 1
    466c:	e2 eb       	ldi	r30, 0xB2	; 178
    466e:	f9 ec       	ldi	r31, 0xC9	; 201
    4670:	01 e0       	ldi	r16, 0x01	; 1
    4672:	0b bf       	out	0x3b, r16	; 59
    4674:	02 c0       	rjmp	.+4      	; 0x467a <__do_copy_data+0x14>
    4676:	07 90       	elpm	r0, Z+
    4678:	0d 92       	st	X+, r0
    467a:	aa 36       	cpi	r26, 0x6A	; 106
    467c:	b1 07       	cpc	r27, r17
    467e:	d9 f7       	brne	.-10     	; 0x4676 <__do_copy_data+0x10>

00004680 <__do_clear_bss>:
    4680:	21 e2       	ldi	r18, 0x21	; 33
    4682:	aa e6       	ldi	r26, 0x6A	; 106
    4684:	b7 e1       	ldi	r27, 0x17	; 23
    4686:	01 c0       	rjmp	.+2      	; 0x468a <.do_clear_bss_start>

00004688 <.do_clear_bss_loop>:
    4688:	1d 92       	st	X+, r1

0000468a <.do_clear_bss_start>:
    468a:	aa 3c       	cpi	r26, 0xCA	; 202
    468c:	b2 07       	cpc	r27, r18
    468e:	e1 f7       	brne	.-8      	; 0x4688 <.do_clear_bss_loop>
    4690:	0e 94 4e de 	call	0x1bc9c	; 0x1bc9c <main>
    4694:	0c 94 d7 e4 	jmp	0x1c9ae	; 0x1c9ae <_exit>

00004698 <__bad_interrupt>:
    4698:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000469c <chip_select>:
#endif
#ifdef AVR
    SPI0_RX(&data,1);
#endif
    return(data);
}
    469c:	e8 2f       	mov	r30, r24
    469e:	e6 95       	lsr	r30
    46a0:	e6 95       	lsr	r30
    46a2:	e6 95       	lsr	r30
    46a4:	93 e0       	ldi	r25, 0x03	; 3
    46a6:	e9 9f       	mul	r30, r25
    46a8:	f0 01       	movw	r30, r0
    46aa:	11 24       	eor	r1, r1
    46ac:	32 a1       	ldd	r19, Z+34	; 0x22
    46ae:	28 2f       	mov	r18, r24
    46b0:	27 70       	andi	r18, 0x07	; 7
    46b2:	81 e0       	ldi	r24, 0x01	; 1
    46b4:	90 e0       	ldi	r25, 0x00	; 0
    46b6:	01 c0       	rjmp	.+2      	; 0x46ba <chip_select+0x1e>
    46b8:	88 0f       	add	r24, r24
    46ba:	2a 95       	dec	r18
    46bc:	ea f7       	brpl	.-6      	; 0x46b8 <chip_select+0x1c>
    46be:	98 2f       	mov	r25, r24
    46c0:	90 95       	com	r25
    46c2:	93 23       	and	r25, r19
    46c4:	92 a3       	std	Z+34, r25	; 0x22
    46c6:	91 a1       	ldd	r25, Z+33	; 0x21
    46c8:	89 2b       	or	r24, r25
    46ca:	81 a3       	std	Z+33, r24	; 0x21
    46cc:	08 95       	ret

000046ce <chip_deselect>:
    46ce:	e8 2f       	mov	r30, r24
    46d0:	e6 95       	lsr	r30
    46d2:	e6 95       	lsr	r30
    46d4:	e6 95       	lsr	r30
    46d6:	93 e0       	ldi	r25, 0x03	; 3
    46d8:	e9 9f       	mul	r30, r25
    46da:	f0 01       	movw	r30, r0
    46dc:	11 24       	eor	r1, r1
    46de:	32 a1       	ldd	r19, Z+34	; 0x22
    46e0:	28 2f       	mov	r18, r24
    46e2:	27 70       	andi	r18, 0x07	; 7
    46e4:	81 e0       	ldi	r24, 0x01	; 1
    46e6:	90 e0       	ldi	r25, 0x00	; 0
    46e8:	01 c0       	rjmp	.+2      	; 0x46ec <chip_deselect+0x1e>
    46ea:	88 0f       	add	r24, r24
    46ec:	2a 95       	dec	r18
    46ee:	ea f7       	brpl	.-6      	; 0x46ea <chip_deselect+0x1c>
    46f0:	93 2f       	mov	r25, r19
    46f2:	98 2b       	or	r25, r24
    46f4:	92 a3       	std	Z+34, r25	; 0x22
    46f6:	91 a1       	ldd	r25, Z+33	; 0x21
    46f8:	89 2b       	or	r24, r25
    46fa:	81 a3       	std	Z+33, r24	; 0x21
    46fc:	08 95       	ret

000046fe <chip_select_init>:
    46fe:	e7 cf       	rjmp	.-50     	; 0x46ce <chip_deselect>
    4700:	08 95       	ret

00004702 <spi_end>:
    4702:	cf 93       	push	r28
    4704:	ad b7       	in	r26, 0x3d	; 61
    4706:	be b7       	in	r27, 0x3e	; 62
    4708:	17 97       	sbiw	r26, 0x07	; 7
    470a:	0f b6       	in	r0, 0x3f	; 63
    470c:	f8 94       	cli
    470e:	be bf       	out	0x3e, r27	; 62
    4710:	0f be       	out	0x3f, r0	; 63
    4712:	ad bf       	out	0x3d, r26	; 61
    4714:	c8 2f       	mov	r28, r24
    4716:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    471a:	8c 17       	cp	r24, r28
    471c:	99 f0       	breq	.+38     	; 0x4744 <spi_end+0x42>
    471e:	8f 3f       	cpi	r24, 0xFF	; 255
    4720:	89 f0       	breq	.+34     	; 0x4744 <spi_end+0x42>
    4722:	2c 2f       	mov	r18, r28
    4724:	30 e0       	ldi	r19, 0x00	; 0
    4726:	ed b7       	in	r30, 0x3d	; 61
    4728:	fe b7       	in	r31, 0x3e	; 62
    472a:	37 83       	std	Z+7, r19	; 0x07
    472c:	26 83       	std	Z+6, r18	; 0x06
    472e:	90 e0       	ldi	r25, 0x00	; 0
    4730:	95 83       	std	Z+5, r25	; 0x05
    4732:	84 83       	std	Z+4, r24	; 0x04
    4734:	86 ed       	ldi	r24, 0xD6	; 214
    4736:	91 e0       	ldi	r25, 0x01	; 1
    4738:	a0 e0       	ldi	r26, 0x00	; 0
    473a:	81 83       	std	Z+1, r24	; 0x01
    473c:	92 83       	std	Z+2, r25	; 0x02
    473e:	a3 83       	std	Z+3, r26	; 0x03
    4740:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    4744:	8c 2f       	mov	r24, r28
    4746:	c3 df       	rcall	.-122    	; 0x46ce <chip_deselect>
    4748:	8f ef       	ldi	r24, 0xFF	; 255
    474a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>
    474e:	ad b7       	in	r26, 0x3d	; 61
    4750:	be b7       	in	r27, 0x3e	; 62
    4752:	17 96       	adiw	r26, 0x07	; 7
    4754:	0f b6       	in	r0, 0x3f	; 63
    4756:	f8 94       	cli
    4758:	be bf       	out	0x3e, r27	; 62
    475a:	0f be       	out	0x3f, r0	; 63
    475c:	ad bf       	out	0x3d, r26	; 61
    475e:	cf 91       	pop	r28
    4760:	08 95       	ret

00004762 <spi_TX_buffer>:
    4762:	cc c4       	rjmp	.+2456   	; 0x50fc <SPI0_TX>
    4764:	08 95       	ret

00004766 <spi_RX_buffer>:
    4766:	f4 c4       	rjmp	.+2536   	; 0x5150 <SPI0_RX>
    4768:	08 95       	ret

0000476a <spi_TX>:

/// @brief SPI write 1 byte
/// @param[in] data: value to transmit
/// @return  void
void spi_TX(uint8_t data)
{
    476a:	a1 e0       	ldi	r26, 0x01	; 1
    476c:	b0 e0       	ldi	r27, 0x00	; 0
    476e:	eb eb       	ldi	r30, 0xBB	; 187
    4770:	f3 e2       	ldi	r31, 0x23	; 35
    4772:	0c 94 e8 e0 	jmp	0x1c1d0	; 0x1c1d0 <__prologue_saves__+0x20>
    4776:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TX(&data,1);
#endif
#ifdef AVR
    SPI0_TX(&data,1);
    4778:	61 e0       	ldi	r22, 0x01	; 1
    477a:	70 e0       	ldi	r23, 0x00	; 0
    477c:	ce 01       	movw	r24, r28
    477e:	01 96       	adiw	r24, 0x01	; 1
    4780:	bd d4       	rcall	.+2426   	; 0x50fc <SPI0_TX>
#endif
}
    4782:	21 96       	adiw	r28, 0x01	; 1
    4784:	e2 e0       	ldi	r30, 0x02	; 2
    4786:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

0000478a <spi_init>:
 @return void
*/
uint8_t _cs_pin = 0xff;
uint32_t _spi_clock = -1L;
void spi_init(uint32_t clock, int pin)
{
    478a:	cf 92       	push	r12
    478c:	df 92       	push	r13
    478e:	ef 92       	push	r14
    4790:	ff 92       	push	r15
    4792:	6b 01       	movw	r12, r22
    4794:	7c 01       	movw	r14, r24
    4796:	84 2f       	mov	r24, r20
    spi_waitReady();
    chip_deselect(pin);
    4798:	9a df       	rcall	.-204    	; 0x46ce <chip_deselect>
    _cs_pin = 0xff;
    479a:	8f ef       	ldi	r24, 0xFF	; 255
    479c:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <_cs_pin>

#ifdef AVR
    SPI0_Init(clock);                             // Initialize the SPI bus - does nothing if clock unchanged
    47a0:	c7 01       	movw	r24, r14
    47a2:	b6 01       	movw	r22, r12
    47a4:	7e d4       	rcall	.+2300   	; 0x50a2 <SPI0_Init>
    SPI0_Mode(0);                                 // Set the clocking mode, etc
    47a6:	80 e0       	ldi	r24, 0x00	; 0
    47a8:	90 e0       	ldi	r25, 0x00	; 0
#endif
#ifdef ESP8266
    hspi_init(clock,0);                           // Initialize the SPI bus - does nothing if clock unchanged
#endif
    spi_TX(0xff);
    47aa:	3b d4       	rcall	.+2166   	; 0x5022 <SPI0_Mode>
    47ac:	8f ef       	ldi	r24, 0xFF	; 255
    47ae:	dd df       	rcall	.-70     	; 0x476a <spi_TX>
    _spi_clock = clock;
    47b0:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <_spi_clock>
    47b4:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <_spi_clock+0x1>
    47b8:	e0 92 08 01 	sts	0x0108, r14	; 0x800108 <_spi_clock+0x2>
    47bc:	f0 92 09 01 	sts	0x0109, r15	; 0x800109 <_spi_clock+0x3>
// waits for any prior transactions to complete before updating
    spi_waitReady();
}
    47c0:	ff 90       	pop	r15
    47c2:	ef 90       	pop	r14
    47c4:	df 90       	pop	r13
    47c6:	cf 90       	pop	r12
    47c8:	08 95       	ret

000047ca <spi_begin>:
 @param[in] clock: SPI clock rate
 @param[in] pin: GPIO CS pin
 @return void
*/
void spi_begin(uint32_t clock, int pin)
{
    47ca:	cf 92       	push	r12
    47cc:	df 92       	push	r13
    47ce:	ef 92       	push	r14
    47d0:	ff 92       	push	r15
    47d2:	cf 93       	push	r28
    47d4:	df 93       	push	r29
    47d6:	ad b7       	in	r26, 0x3d	; 61
    47d8:	be b7       	in	r27, 0x3e	; 62
    47da:	17 97       	sbiw	r26, 0x07	; 7
    47dc:	0f b6       	in	r0, 0x3f	; 63
    47de:	f8 94       	cli
    47e0:	be bf       	out	0x3e, r27	; 62
    47e2:	0f be       	out	0x3f, r0	; 63
    47e4:	ad bf       	out	0x3d, r26	; 61
    47e6:	6b 01       	movw	r12, r22
    47e8:	7c 01       	movw	r14, r24
    47ea:	ea 01       	movw	r28, r20
// FIXME allow nesting by using an array of clock values for each pin

//@brief if there is a prior chip select in progress flag an error
    if(_cs_pin != 0xff)
    47ec:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <_cs_pin>
    47f0:	8f 3f       	cpi	r24, 0xFF	; 255
    47f2:	79 f0       	breq	.+30     	; 0x4812 <spi_begin+0x48>
    {
// This implies a bug!
        printf("cs_enable was: %d, want: %d\n", 0xff & _cs_pin, pin);
    47f4:	ed b7       	in	r30, 0x3d	; 61
    47f6:	fe b7       	in	r31, 0x3e	; 62
    47f8:	46 83       	std	Z+6, r20	; 0x06
    47fa:	d7 83       	std	Z+7, r29	; 0x07
    47fc:	90 e0       	ldi	r25, 0x00	; 0
    47fe:	95 83       	std	Z+5, r25	; 0x05
    4800:	84 83       	std	Z+4, r24	; 0x04
    4802:	84 ef       	ldi	r24, 0xF4	; 244
    4804:	91 e0       	ldi	r25, 0x01	; 1
    4806:	a0 e0       	ldi	r26, 0x00	; 0
    4808:	81 83       	std	Z+1, r24	; 0x01
    480a:	92 83       	std	Z+2, r25	; 0x02
    480c:	a3 83       	std	Z+3, r26	; 0x03
    480e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
// waits for any prior transactions to complete before updating
    spi_waitReady();

///@brief initialize pin in case it has not been done yet
///@ we cache the clock frequency seeting for multiple device support
    if(_spi_clock != clock)
    4812:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_spi_clock>
    4816:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_spi_clock+0x1>
    481a:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <_spi_clock+0x2>
    481e:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <_spi_clock+0x3>
    4822:	8c 15       	cp	r24, r12
    4824:	9d 05       	cpc	r25, r13
    4826:	ae 05       	cpc	r26, r14
    4828:	bf 05       	cpc	r27, r15
    482a:	21 f0       	breq	.+8      	; 0x4834 <spi_begin+0x6a>
    {
        spi_init(clock,pin);
    482c:	ae 01       	movw	r20, r28
    482e:	c7 01       	movw	r24, r14
    4830:	b6 01       	movw	r22, r12
    4832:	ab df       	rcall	.-170    	; 0x478a <spi_init>
    }

    chip_select(pin);
    4834:	8c 2f       	mov	r24, r28
    4836:	32 df       	rcall	.-412    	; 0x469c <chip_select>
    _cs_pin = pin;
    4838:	c0 93 0a 01 	sts	0x010A, r28	; 0x80010a <_cs_pin>
}
    483c:	ad b7       	in	r26, 0x3d	; 61
    483e:	be b7       	in	r27, 0x3e	; 62
    4840:	17 96       	adiw	r26, 0x07	; 7
    4842:	0f b6       	in	r0, 0x3f	; 63
    4844:	f8 94       	cli
    4846:	be bf       	out	0x3e, r27	; 62
    4848:	0f be       	out	0x3f, r0	; 63
    484a:	ad bf       	out	0x3d, r26	; 61
    484c:	df 91       	pop	r29
    484e:	cf 91       	pop	r28
    4850:	ff 90       	pop	r15
    4852:	ef 90       	pop	r14
    4854:	df 90       	pop	r13
    4856:	cf 90       	pop	r12
    4858:	08 95       	ret

0000485a <spi_TXRX>:

/// @brief SPI read and write 1 byte
/// @param[in] data: value to transmit
/// @return  uint8_t value read
uint8_t spi_TXRX(uint8_t data)
{
    485a:	a1 e0       	ldi	r26, 0x01	; 1
    485c:	b0 e0       	ldi	r27, 0x00	; 0
    485e:	e3 e3       	ldi	r30, 0x33	; 51
    4860:	f4 e2       	ldi	r31, 0x24	; 36
    4862:	0c 94 e8 e0 	jmp	0x1c1d0	; 0x1c1d0 <__prologue_saves__+0x20>
    4866:	89 83       	std	Y+1, r24	; 0x01
#ifdef ESP8266
    hspi_TXRX(&data,1);
#endif
#ifdef AVR
    SPI0_TXRX(&data,1);
    4868:	61 e0       	ldi	r22, 0x01	; 1
    486a:	70 e0       	ldi	r23, 0x00	; 0
    486c:	ce 01       	movw	r24, r28
    486e:	01 96       	adiw	r24, 0x01	; 1
    4870:	59 d4       	rcall	.+2226   	; 0x5124 <SPI0_TXRX>
#endif
    return(data);
}
    4872:	89 81       	ldd	r24, Y+1	; 0x01
    4874:	21 96       	adiw	r28, 0x01	; 1
    4876:	e2 e0       	ldi	r30, 0x02	; 2
    4878:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

0000487c <set_error>:
static uint8_t error_flag = 0;
/// @brief Set error condition
/// @return  void
void set_error(uint8_t error)
{
	error_flag = error;
    487c:	80 93 6a 17 	sts	0x176A, r24	; 0x80176a <__data_end>
    GPIO_PIN_HI(LED2);
    4880:	2c 9a       	sbi	0x05, 4	; 5
    4882:	24 9a       	sbi	0x04, 4	; 4
    4884:	08 95       	ret

00004886 <clear_error>:

/// @brief Set error condition
/// @return  void
void clear_error()
{
	error_flag = 0;
    4886:	10 92 6a 17 	sts	0x176A, r1	; 0x80176a <__data_end>
    GPIO_PIN_LOW(LED2);
    488a:	2c 98       	cbi	0x05, 4	; 5
    488c:	24 9a       	sbi	0x04, 4	; 4
    488e:	08 95       	ret

00004890 <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    4890:	a2 e0       	ldi	r26, 0x02	; 2
    4892:	b0 e0       	ldi	r27, 0x00	; 0
    4894:	ee e4       	ldi	r30, 0x4E	; 78
    4896:	f4 e2       	ldi	r31, 0x24	; 36
    4898:	0c 94 e8 e0 	jmp	0x1c1d0	; 0x1c1d0 <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    489c:	20 91 c6 21 	lds	r18, 0x21C6	; 0x8021c6 <__brkval>
    48a0:	30 91 c7 21 	lds	r19, 0x21C7	; 0x8021c7 <__brkval+0x1>
    48a4:	21 15       	cp	r18, r1
    48a6:	31 05       	cpc	r19, r1
    48a8:	11 f4       	brne	.+4      	; 0x48ae <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    48aa:	2a ec       	ldi	r18, 0xCA	; 202
    48ac:	31 e2       	ldi	r19, 0x21	; 33

    ret = (uint16_t) &v - top;
    return ( ret );
}
    48ae:	ce 01       	movw	r24, r28
    48b0:	01 96       	adiw	r24, 0x01	; 1
    48b2:	82 1b       	sub	r24, r18
    48b4:	93 0b       	sbc	r25, r19
    48b6:	22 96       	adiw	r28, 0x02	; 2
    48b8:	e2 e0       	ldi	r30, 0x02	; 2
    48ba:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

000048be <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    48be:	a9 e0       	ldi	r26, 0x09	; 9
    48c0:	b0 e0       	ldi	r27, 0x00	; 0
    48c2:	e5 e6       	ldi	r30, 0x65	; 101
    48c4:	f4 e2       	ldi	r31, 0x24	; 36
    48c6:	0c 94 e8 e0 	jmp	0x1c1d0	; 0x1c1d0 <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    48ca:	e2 df       	rcall	.-60     	; 0x4890 <freeRam>
    48cc:	99 87       	std	Y+9, r25	; 0x09
    48ce:	88 87       	std	Y+8, r24	; 0x08

    printf("Free Ram:%u\n", ram);
    48d0:	ed b7       	in	r30, 0x3d	; 61
    48d2:	fe b7       	in	r31, 0x3e	; 62
    48d4:	95 83       	std	Z+5, r25	; 0x05
    48d6:	84 83       	std	Z+4, r24	; 0x04
    48d8:	8b e1       	ldi	r24, 0x1B	; 27
    48da:	93 e0       	ldi	r25, 0x03	; 3
    48dc:	a0 e0       	ldi	r26, 0x00	; 0
    48de:	81 83       	std	Z+1, r24	; 0x01
    48e0:	92 83       	std	Z+2, r25	; 0x02
    48e2:	a3 83       	std	Z+3, r26	; 0x03
    48e4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    48e8:	8f ef       	ldi	r24, 0xFF	; 255
    48ea:	90 e4       	ldi	r25, 0x40	; 64
    48ec:	ed b7       	in	r30, 0x3d	; 61
    48ee:	fe b7       	in	r31, 0x3e	; 62
    48f0:	95 83       	std	Z+5, r25	; 0x05
    48f2:	84 83       	std	Z+4, r24	; 0x04
    48f4:	88 e0       	ldi	r24, 0x08	; 8
    48f6:	93 e0       	ldi	r25, 0x03	; 3
    48f8:	a0 e0       	ldi	r26, 0x00	; 0
    48fa:	81 83       	std	Z+1, r24	; 0x01
    48fc:	92 83       	std	Z+2, r25	; 0x02
    48fe:	a3 83       	std	Z+3, r26	; 0x03
    4900:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    4904:	ce 01       	movw	r24, r28
    4906:	08 96       	adiw	r24, 0x08	; 8
    4908:	ed b7       	in	r30, 0x3d	; 61
    490a:	fe b7       	in	r31, 0x3e	; 62
    490c:	95 83       	std	Z+5, r25	; 0x05
    490e:	84 83       	std	Z+4, r24	; 0x04
    4910:	85 ef       	ldi	r24, 0xF5	; 245
    4912:	92 e0       	ldi	r25, 0x02	; 2
    4914:	a0 e0       	ldi	r26, 0x00	; 0
    4916:	81 83       	std	Z+1, r24	; 0x01
    4918:	92 83       	std	Z+2, r25	; 0x02
    491a:	a3 83       	std	Z+3, r26	; 0x03
    491c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    4920:	8a ec       	ldi	r24, 0xCA	; 202
    4922:	91 e2       	ldi	r25, 0x21	; 33
    4924:	ed b7       	in	r30, 0x3d	; 61
    4926:	fe b7       	in	r31, 0x3e	; 62
    4928:	97 83       	std	Z+7, r25	; 0x07
    492a:	86 83       	std	Z+6, r24	; 0x06
    492c:	8a e6       	ldi	r24, 0x6A	; 106
    492e:	97 e1       	ldi	r25, 0x17	; 23
    4930:	95 83       	std	Z+5, r25	; 0x05
    4932:	84 83       	std	Z+4, r24	; 0x04
    4934:	87 ed       	ldi	r24, 0xD7	; 215
    4936:	92 e0       	ldi	r25, 0x02	; 2
    4938:	a0 e0       	ldi	r26, 0x00	; 0
    493a:	81 83       	std	Z+1, r24	; 0x01
    493c:	92 83       	std	Z+2, r25	; 0x02
    493e:	a3 83       	std	Z+3, r26	; 0x03
    4940:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    4944:	8a e6       	ldi	r24, 0x6A	; 106
    4946:	97 e1       	ldi	r25, 0x17	; 23
    4948:	ed b7       	in	r30, 0x3d	; 61
    494a:	fe b7       	in	r31, 0x3e	; 62
    494c:	97 83       	std	Z+7, r25	; 0x07
    494e:	86 83       	std	Z+6, r24	; 0x06
    4950:	80 e0       	ldi	r24, 0x00	; 0
    4952:	91 e0       	ldi	r25, 0x01	; 1
    4954:	95 83       	std	Z+5, r25	; 0x05
    4956:	84 83       	std	Z+4, r24	; 0x04
    4958:	89 eb       	ldi	r24, 0xB9	; 185
    495a:	92 e0       	ldi	r25, 0x02	; 2
    495c:	a0 e0       	ldi	r26, 0x00	; 0
    495e:	81 83       	std	Z+1, r24	; 0x01
    4960:	92 83       	std	Z+2, r25	; 0x02
    4962:	a3 83       	std	Z+3, r26	; 0x03
    4964:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    4968:	80 e0       	ldi	r24, 0x00	; 0
    496a:	90 e0       	ldi	r25, 0x00	; 0
    496c:	ed b7       	in	r30, 0x3d	; 61
    496e:	fe b7       	in	r31, 0x3e	; 62
    4970:	97 83       	std	Z+7, r25	; 0x07
    4972:	86 83       	std	Z+6, r24	; 0x06
    4974:	8a ec       	ldi	r24, 0xCA	; 202
    4976:	91 e2       	ldi	r25, 0x21	; 33
    4978:	95 83       	std	Z+5, r25	; 0x05
    497a:	84 83       	std	Z+4, r24	; 0x04
    497c:	8b e9       	ldi	r24, 0x9B	; 155
    497e:	92 e0       	ldi	r25, 0x02	; 2
    4980:	a0 e0       	ldi	r26, 0x00	; 0
    4982:	81 83       	std	Z+1, r24	; 0x01
    4984:	92 83       	std	Z+2, r25	; 0x02
    4986:	a3 83       	std	Z+3, r26	; 0x03
    4988:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    498c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    4990:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    4994:	ed b7       	in	r30, 0x3d	; 61
    4996:	fe b7       	in	r31, 0x3e	; 62
    4998:	97 83       	std	Z+7, r25	; 0x07
    499a:	86 83       	std	Z+6, r24	; 0x06
    499c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__malloc_heap_start>
    49a0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    49a4:	95 83       	std	Z+5, r25	; 0x05
    49a6:	84 83       	std	Z+4, r24	; 0x04
    49a8:	8d e7       	ldi	r24, 0x7D	; 125
    49aa:	92 e0       	ldi	r25, 0x02	; 2
    49ac:	a0 e0       	ldi	r26, 0x00	; 0
    49ae:	81 83       	std	Z+1, r24	; 0x01
    49b0:	92 83       	std	Z+2, r25	; 0x02
    49b2:	a3 83       	std	Z+3, r26	; 0x03
    49b4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    49b8:	80 91 c6 21 	lds	r24, 0x21C6	; 0x8021c6 <__brkval>
    49bc:	90 91 c7 21 	lds	r25, 0x21C7	; 0x8021c7 <__brkval+0x1>
    49c0:	ed b7       	in	r30, 0x3d	; 61
    49c2:	fe b7       	in	r31, 0x3e	; 62
    49c4:	95 83       	std	Z+5, r25	; 0x05
    49c6:	84 83       	std	Z+4, r24	; 0x04
    49c8:	89 e6       	ldi	r24, 0x69	; 105
    49ca:	92 e0       	ldi	r25, 0x02	; 2
    49cc:	a0 e0       	ldi	r26, 0x00	; 0
    49ce:	81 83       	std	Z+1, r24	; 0x01
    49d0:	92 83       	std	Z+2, r25	; 0x02
    49d2:	a3 83       	std	Z+3, r26	; 0x03
    49d4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

}
    49d8:	29 96       	adiw	r28, 0x09	; 9
    49da:	e2 e0       	ldi	r30, 0x02	; 2
    49dc:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

000049e0 <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    49e0:	ef 92       	push	r14
    49e2:	ff 92       	push	r15
    49e4:	0f 93       	push	r16
    49e6:	1f 93       	push	r17
    49e8:	cf 93       	push	r28
    49ea:	df 93       	push	r29
    49ec:	ad b7       	in	r26, 0x3d	; 61
    49ee:	be b7       	in	r27, 0x3e	; 62
    49f0:	17 97       	sbiw	r26, 0x07	; 7
    49f2:	0f b6       	in	r0, 0x3f	; 63
    49f4:	f8 94       	cli
    49f6:	be bf       	out	0x3e, r27	; 62
    49f8:	0f be       	out	0x3f, r0	; 63
    49fa:	ad bf       	out	0x3d, r26	; 61
    49fc:	8c 01       	movw	r16, r24
    49fe:	7b 01       	movw	r14, r22
    void *p = calloc(size, elements);
    4a00:	0e 94 95 e3 	call	0x1c72a	; 0x1c72a <calloc>
    4a04:	ec 01       	movw	r28, r24
    if(!p)
    4a06:	89 2b       	or	r24, r25
    4a08:	71 f4       	brne	.+28     	; 0x4a26 <safecalloc+0x46>
    {
        printf("safecalloc(%d,%d) failed!\n", size, elements);
    4a0a:	ed b7       	in	r30, 0x3d	; 61
    4a0c:	fe b7       	in	r31, 0x3e	; 62
    4a0e:	f7 82       	std	Z+7, r15	; 0x07
    4a10:	e6 82       	std	Z+6, r14	; 0x06
    4a12:	15 83       	std	Z+5, r17	; 0x05
    4a14:	04 83       	std	Z+4, r16	; 0x04
    4a16:	8e e4       	ldi	r24, 0x4E	; 78
    4a18:	92 e0       	ldi	r25, 0x02	; 2
    4a1a:	a0 e0       	ldi	r26, 0x00	; 0
    4a1c:	81 83       	std	Z+1, r24	; 0x01
    4a1e:	92 83       	std	Z+2, r25	; 0x02
    4a20:	a3 83       	std	Z+3, r26	; 0x03
    4a22:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    }
    return(p);
}
    4a26:	ce 01       	movw	r24, r28
    4a28:	cd b7       	in	r28, 0x3d	; 61
    4a2a:	de b7       	in	r29, 0x3e	; 62
    4a2c:	27 96       	adiw	r28, 0x07	; 7
    4a2e:	e6 e0       	ldi	r30, 0x06	; 6
    4a30:	0c 94 00 e1 	jmp	0x1c200	; 0x1c200 <__epilogue_restores__+0x18>

00004a34 <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    4a34:	0f 93       	push	r16
    4a36:	1f 93       	push	r17
    4a38:	cf 93       	push	r28
    4a3a:	df 93       	push	r29
    4a3c:	00 d0       	rcall	.+0      	; 0x4a3e <safemalloc+0xa>
    4a3e:	00 d0       	rcall	.+0      	; 0x4a40 <safemalloc+0xc>
    4a40:	1f 92       	push	r1
    4a42:	8c 01       	movw	r16, r24
    void *p = calloc(size, 1);
    4a44:	61 e0       	ldi	r22, 0x01	; 1
    4a46:	70 e0       	ldi	r23, 0x00	; 0
    4a48:	0e 94 95 e3 	call	0x1c72a	; 0x1c72a <calloc>
    4a4c:	ec 01       	movw	r28, r24
    if(!p)
    4a4e:	89 2b       	or	r24, r25
    4a50:	61 f4       	brne	.+24     	; 0x4a6a <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    4a52:	ed b7       	in	r30, 0x3d	; 61
    4a54:	fe b7       	in	r31, 0x3e	; 62
    4a56:	15 83       	std	Z+5, r17	; 0x05
    4a58:	04 83       	std	Z+4, r16	; 0x04
    4a5a:	86 e3       	ldi	r24, 0x36	; 54
    4a5c:	92 e0       	ldi	r25, 0x02	; 2
    4a5e:	a0 e0       	ldi	r26, 0x00	; 0
    4a60:	81 83       	std	Z+1, r24	; 0x01
    4a62:	92 83       	std	Z+2, r25	; 0x02
    4a64:	a3 83       	std	Z+3, r26	; 0x03
    4a66:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    }
    return(p);
}
    4a6a:	ce 01       	movw	r24, r28
    4a6c:	cd b7       	in	r28, 0x3d	; 61
    4a6e:	de b7       	in	r29, 0x3e	; 62
    4a70:	25 96       	adiw	r28, 0x05	; 5
    4a72:	e4 e0       	ldi	r30, 0x04	; 4
    4a74:	0c 94 02 e1 	jmp	0x1c204	; 0x1c204 <__epilogue_restores__+0x1c>

00004a78 <safefree>:
///
/// @param[in] p: pointer to free.
///
/// @return  void.
void safefree(void *p)
{
    4a78:	ad b7       	in	r26, 0x3d	; 61
    4a7a:	be b7       	in	r27, 0x3e	; 62
    4a7c:	17 97       	sbiw	r26, 0x07	; 7
    4a7e:	0f b6       	in	r0, 0x3f	; 63
    4a80:	f8 94       	cli
    4a82:	be bf       	out	0x3e, r27	; 62
    4a84:	0f be       	out	0x3f, r0	; 63
    4a86:	ad bf       	out	0x3d, r26	; 61
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    4a88:	00 97       	sbiw	r24, 0x00	; 0
    4a8a:	11 f1       	breq	.+68     	; 0x4ad0 <safefree+0x58>
        return;

    if(__brkval)
    4a8c:	20 91 c6 21 	lds	r18, 0x21C6	; 0x8021c6 <__brkval>
    4a90:	30 91 c7 21 	lds	r19, 0x21C7	; 0x8021c7 <__brkval+0x1>
    4a94:	21 15       	cp	r18, r1
    4a96:	31 05       	cpc	r19, r1
    4a98:	11 f4       	brne	.+4      	; 0x4a9e <safefree+0x26>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    4a9a:	2a ec       	ldi	r18, 0xCA	; 202
    4a9c:	31 e2       	ldi	r19, 0x21	; 33

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    4a9e:	41 e2       	ldi	r20, 0x21	; 33
    4aa0:	8a 3c       	cpi	r24, 0xCA	; 202
    4aa2:	94 07       	cpc	r25, r20
    4aa4:	30 f0       	brcs	.+12     	; 0x4ab2 <safefree+0x3a>
    4aa6:	28 17       	cp	r18, r24
    4aa8:	39 07       	cpc	r19, r25
    4aaa:	18 f0       	brcs	.+6      	; 0x4ab2 <safefree+0x3a>
        ((uint16_t) p <= top) )
    {
        free(p);
    4aac:	0e 94 47 e4 	call	0x1c88e	; 0x1c88e <free>
        return;
    4ab0:	0f c0       	rjmp	.+30     	; 0x4ad0 <safefree+0x58>
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    4ab2:	ed b7       	in	r30, 0x3d	; 61
    4ab4:	fe b7       	in	r31, 0x3e	; 62
    4ab6:	37 83       	std	Z+7, r19	; 0x07
    4ab8:	26 83       	std	Z+6, r18	; 0x06
    4aba:	95 83       	std	Z+5, r25	; 0x05
    4abc:	84 83       	std	Z+4, r24	; 0x04
    4abe:	81 e1       	ldi	r24, 0x11	; 17
    4ac0:	92 e0       	ldi	r25, 0x02	; 2
    4ac2:	a0 e0       	ldi	r26, 0x00	; 0
    4ac4:	81 83       	std	Z+1, r24	; 0x01
    4ac6:	92 83       	std	Z+2, r25	; 0x02
    4ac8:	a3 83       	std	Z+3, r26	; 0x03
    4aca:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    PrintFree();
    4ace:	f7 de       	rcall	.-530    	; 0x48be <PrintFree>
}
    4ad0:	ad b7       	in	r26, 0x3d	; 61
    4ad2:	be b7       	in	r27, 0x3e	; 62
    4ad4:	17 96       	adiw	r26, 0x07	; 7
    4ad6:	0f b6       	in	r0, 0x3f	; 63
    4ad8:	f8 94       	cli
    4ada:	be bf       	out	0x3e, r27	; 62
    4adc:	0f be       	out	0x3f, r0	; 63
    4ade:	ad bf       	out	0x3d, r26	; 61
    4ae0:	08 95       	ret

00004ae2 <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    4ae2:	64 36       	cpi	r22, 0x64	; 100
    4ae4:	71 05       	cpc	r23, r1
    4ae6:	81 05       	cpc	r24, r1
    4ae8:	91 05       	cpc	r25, r1
    4aea:	58 f0       	brcs	.+22     	; 0x4b02 <delayus+0x20>
    {
        us -= 100U;
    4aec:	64 56       	subi	r22, 0x64	; 100
    4aee:	71 09       	sbc	r23, r1
    4af0:	81 09       	sbc	r24, r1
    4af2:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    4af4:	e3 ef       	ldi	r30, 0xF3	; 243
    4af6:	f1 e0       	ldi	r31, 0x01	; 1
    4af8:	31 97       	sbiw	r30, 0x01	; 1
    4afa:	f1 f7       	brne	.-4      	; 0x4af8 <delayus+0x16>
    4afc:	00 c0       	rjmp	.+0      	; 0x4afe <delayus+0x1c>
    4afe:	00 00       	nop
    4b00:	f0 cf       	rjmp	.-32     	; 0x4ae2 <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    4b02:	6a 30       	cpi	r22, 0x0A	; 10
    4b04:	71 05       	cpc	r23, r1
    4b06:	81 05       	cpc	r24, r1
    4b08:	91 05       	cpc	r25, r1
    4b0a:	48 f0       	brcs	.+18     	; 0x4b1e <delayus+0x3c>
    {
        us -= 10U;
    4b0c:	6a 50       	subi	r22, 0x0A	; 10
    4b0e:	71 09       	sbc	r23, r1
    4b10:	81 09       	sbc	r24, r1
    4b12:	91 09       	sbc	r25, r1
    4b14:	f2 e4       	ldi	r31, 0x42	; 66
    4b16:	fa 95       	dec	r31
    4b18:	f1 f7       	brne	.-4      	; 0x4b16 <delayus+0x34>
    4b1a:	00 c0       	rjmp	.+0      	; 0x4b1c <delayus+0x3a>
    4b1c:	f2 cf       	rjmp	.-28     	; 0x4b02 <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    4b1e:	61 15       	cp	r22, r1
    4b20:	71 05       	cpc	r23, r1
    4b22:	81 05       	cpc	r24, r1
    4b24:	91 05       	cpc	r25, r1
    4b26:	49 f0       	breq	.+18     	; 0x4b3a <delayus+0x58>
    {
        --us;
    4b28:	61 50       	subi	r22, 0x01	; 1
    4b2a:	71 09       	sbc	r23, r1
    4b2c:	81 09       	sbc	r24, r1
    4b2e:	91 09       	sbc	r25, r1
    4b30:	26 e0       	ldi	r18, 0x06	; 6
    4b32:	2a 95       	dec	r18
    4b34:	f1 f7       	brne	.-4      	; 0x4b32 <delayus+0x50>
    4b36:	00 c0       	rjmp	.+0      	; 0x4b38 <delayus+0x56>
    4b38:	f2 cf       	rjmp	.-28     	; 0x4b1e <delayus+0x3c>
        _delay_us(1);
    }
}
    4b3a:	08 95       	ret

00004b3c <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    4b3c:	61 15       	cp	r22, r1
    4b3e:	71 05       	cpc	r23, r1
    4b40:	81 05       	cpc	r24, r1
    4b42:	91 05       	cpc	r25, r1
    4b44:	09 f4       	brne	.+2      	; 0x4b48 <delayms+0xc>
    4b46:	41 c0       	rjmp	.+130    	; 0x4bca <delayms+0x8e>
    4b48:	e3 ef       	ldi	r30, 0xF3	; 243
    4b4a:	f1 e0       	ldi	r31, 0x01	; 1
    4b4c:	31 97       	sbiw	r30, 0x01	; 1
    4b4e:	f1 f7       	brne	.-4      	; 0x4b4c <delayms+0x10>
    4b50:	00 c0       	rjmp	.+0      	; 0x4b52 <delayms+0x16>
    4b52:	00 00       	nop
    4b54:	e3 ef       	ldi	r30, 0xF3	; 243
    4b56:	f1 e0       	ldi	r31, 0x01	; 1
    4b58:	31 97       	sbiw	r30, 0x01	; 1
    4b5a:	f1 f7       	brne	.-4      	; 0x4b58 <delayms+0x1c>
    4b5c:	00 c0       	rjmp	.+0      	; 0x4b5e <delayms+0x22>
    4b5e:	00 00       	nop
    4b60:	e3 ef       	ldi	r30, 0xF3	; 243
    4b62:	f1 e0       	ldi	r31, 0x01	; 1
    4b64:	31 97       	sbiw	r30, 0x01	; 1
    4b66:	f1 f7       	brne	.-4      	; 0x4b64 <delayms+0x28>
    4b68:	00 c0       	rjmp	.+0      	; 0x4b6a <delayms+0x2e>
    4b6a:	00 00       	nop
    4b6c:	e3 ef       	ldi	r30, 0xF3	; 243
    4b6e:	f1 e0       	ldi	r31, 0x01	; 1
    4b70:	31 97       	sbiw	r30, 0x01	; 1
    4b72:	f1 f7       	brne	.-4      	; 0x4b70 <delayms+0x34>
    4b74:	00 c0       	rjmp	.+0      	; 0x4b76 <delayms+0x3a>
    4b76:	00 00       	nop
    4b78:	e3 ef       	ldi	r30, 0xF3	; 243
    4b7a:	f1 e0       	ldi	r31, 0x01	; 1
    4b7c:	31 97       	sbiw	r30, 0x01	; 1
    4b7e:	f1 f7       	brne	.-4      	; 0x4b7c <delayms+0x40>
    4b80:	00 c0       	rjmp	.+0      	; 0x4b82 <delayms+0x46>
    4b82:	00 00       	nop
    4b84:	e3 ef       	ldi	r30, 0xF3	; 243
    4b86:	f1 e0       	ldi	r31, 0x01	; 1
    4b88:	31 97       	sbiw	r30, 0x01	; 1
    4b8a:	f1 f7       	brne	.-4      	; 0x4b88 <delayms+0x4c>
    4b8c:	00 c0       	rjmp	.+0      	; 0x4b8e <delayms+0x52>
    4b8e:	00 00       	nop
    4b90:	e3 ef       	ldi	r30, 0xF3	; 243
    4b92:	f1 e0       	ldi	r31, 0x01	; 1
    4b94:	31 97       	sbiw	r30, 0x01	; 1
    4b96:	f1 f7       	brne	.-4      	; 0x4b94 <delayms+0x58>
    4b98:	00 c0       	rjmp	.+0      	; 0x4b9a <delayms+0x5e>
    4b9a:	00 00       	nop
    4b9c:	e3 ef       	ldi	r30, 0xF3	; 243
    4b9e:	f1 e0       	ldi	r31, 0x01	; 1
    4ba0:	31 97       	sbiw	r30, 0x01	; 1
    4ba2:	f1 f7       	brne	.-4      	; 0x4ba0 <delayms+0x64>
    4ba4:	00 c0       	rjmp	.+0      	; 0x4ba6 <delayms+0x6a>
    4ba6:	00 00       	nop
    4ba8:	e3 ef       	ldi	r30, 0xF3	; 243
    4baa:	f1 e0       	ldi	r31, 0x01	; 1
    4bac:	31 97       	sbiw	r30, 0x01	; 1
    4bae:	f1 f7       	brne	.-4      	; 0x4bac <delayms+0x70>
    4bb0:	00 c0       	rjmp	.+0      	; 0x4bb2 <delayms+0x76>
    4bb2:	00 00       	nop
    4bb4:	e3 ef       	ldi	r30, 0xF3	; 243
    4bb6:	f1 e0       	ldi	r31, 0x01	; 1
    4bb8:	31 97       	sbiw	r30, 0x01	; 1
    4bba:	f1 f7       	brne	.-4      	; 0x4bb8 <delayms+0x7c>
    4bbc:	00 c0       	rjmp	.+0      	; 0x4bbe <delayms+0x82>
    4bbe:	00 00       	nop
    4bc0:	61 50       	subi	r22, 0x01	; 1
    4bc2:	71 09       	sbc	r23, r1
    4bc4:	81 09       	sbc	r24, r1
    4bc6:	91 09       	sbc	r25, r1
    4bc8:	b9 cf       	rjmp	.-142    	; 0x4b3c <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    4bca:	08 95       	ret

00004bcc <uart_rx_flush>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    4bcc:	81 11       	cpse	r24, r1
    4bce:	0e c0       	rjmp	.+28     	; 0x4bec <uart_rx_flush+0x20>
    4bd0:	f8 94       	cli
    4bd2:	10 92 0d 1a 	sts	0x1A0D, r1	; 0x801a0d <uarts+0x4>
    4bd6:	10 92 0c 1a 	sts	0x1A0C, r1	; 0x801a0c <uarts+0x3>
    4bda:	10 92 09 1a 	sts	0x1A09, r1	; 0x801a09 <uarts>
    4bde:	10 92 0a 1a 	sts	0x1A0A, r1	; 0x801a0a <uarts+0x1>
    4be2:	10 92 0b 1a 	sts	0x1A0B, r1	; 0x801a0b <uarts+0x2>
    4be6:	10 92 0e 1a 	sts	0x1A0E, r1	; 0x801a0e <uarts+0x5>
    4bea:	78 94       	sei
    4bec:	08 95       	ret

00004bee <uart_ubr>:
    4bee:	4f 92       	push	r4
    4bf0:	5f 92       	push	r5
    4bf2:	6f 92       	push	r6
    4bf4:	7f 92       	push	r7
    4bf6:	8f 92       	push	r8
    4bf8:	9f 92       	push	r9
    4bfa:	af 92       	push	r10
    4bfc:	bf 92       	push	r11
    4bfe:	cf 92       	push	r12
    4c00:	df 92       	push	r13
    4c02:	ef 92       	push	r14
    4c04:	ff 92       	push	r15
    4c06:	cf 93       	push	r28
    4c08:	df 93       	push	r29
    4c0a:	5a 01       	movw	r10, r20
    4c0c:	e9 01       	movw	r28, r18
    4c0e:	0e 94 33 e2 	call	0x1c466	; 0x1c466 <__floatunsisf>
    4c12:	2b 01       	movw	r4, r22
    4c14:	3c 01       	movw	r6, r24
    4c16:	20 e0       	ldi	r18, 0x00	; 0
    4c18:	30 e0       	ldi	r19, 0x00	; 0
    4c1a:	40 e0       	ldi	r20, 0x00	; 0
    4c1c:	51 e4       	ldi	r21, 0x41	; 65
    4c1e:	0e 94 e9 e2 	call	0x1c5d2	; 0x1c5d2 <__mulsf3>
    4c22:	9b 01       	movw	r18, r22
    4c24:	ac 01       	movw	r20, r24
    4c26:	60 e8       	ldi	r22, 0x80	; 128
    4c28:	76 e9       	ldi	r23, 0x96	; 150
    4c2a:	88 e9       	ldi	r24, 0x98	; 152
    4c2c:	9b e4       	ldi	r25, 0x4B	; 75
    4c2e:	0e 94 9a e1 	call	0x1c334	; 0x1c334 <__divsf3>
    4c32:	20 e0       	ldi	r18, 0x00	; 0
    4c34:	30 e0       	ldi	r19, 0x00	; 0
    4c36:	40 e8       	ldi	r20, 0x80	; 128
    4c38:	5f e3       	ldi	r21, 0x3F	; 63
    4c3a:	0e 94 31 e1 	call	0x1c262	; 0x1c262 <__subsf3>
    4c3e:	0e 94 4c e3 	call	0x1c698	; 0x1c698 <round>
    4c42:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <__fixunssfsi>
    4c46:	6b 01       	movw	r12, r22
    4c48:	7c 01       	movw	r14, r24
    4c4a:	c1 14       	cp	r12, r1
    4c4c:	80 e1       	ldi	r24, 0x10	; 16
    4c4e:	d8 06       	cpc	r13, r24
    4c50:	e1 04       	cpc	r14, r1
    4c52:	f1 04       	cpc	r15, r1
    4c54:	58 f4       	brcc	.+22     	; 0x4c6c <uart_ubr+0x7e>
    4c56:	81 e0       	ldi	r24, 0x01	; 1
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	f5 01       	movw	r30, r10
    4c5c:	91 83       	std	Z+1, r25	; 0x01
    4c5e:	80 83       	st	Z, r24
    4c60:	81 2c       	mov	r8, r1
    4c62:	91 2c       	mov	r9, r1
    4c64:	a1 2c       	mov	r10, r1
    4c66:	21 e4       	ldi	r18, 0x41	; 65
    4c68:	b2 2e       	mov	r11, r18
    4c6a:	31 c0       	rjmp	.+98     	; 0x4cce <uart_ubr+0xe0>
    4c6c:	f5 01       	movw	r30, r10
    4c6e:	11 82       	std	Z+1, r1	; 0x01
    4c70:	10 82       	st	Z, r1
    4c72:	20 e0       	ldi	r18, 0x00	; 0
    4c74:	30 e0       	ldi	r19, 0x00	; 0
    4c76:	40 e8       	ldi	r20, 0x80	; 128
    4c78:	51 e4       	ldi	r21, 0x41	; 65
    4c7a:	c3 01       	movw	r24, r6
    4c7c:	b2 01       	movw	r22, r4
    4c7e:	0e 94 e9 e2 	call	0x1c5d2	; 0x1c5d2 <__mulsf3>
    4c82:	9b 01       	movw	r18, r22
    4c84:	ac 01       	movw	r20, r24
    4c86:	60 e8       	ldi	r22, 0x80	; 128
    4c88:	76 e9       	ldi	r23, 0x96	; 150
    4c8a:	88 e9       	ldi	r24, 0x98	; 152
    4c8c:	9b e4       	ldi	r25, 0x4B	; 75
    4c8e:	0e 94 9a e1 	call	0x1c334	; 0x1c334 <__divsf3>
    4c92:	20 e0       	ldi	r18, 0x00	; 0
    4c94:	30 e0       	ldi	r19, 0x00	; 0
    4c96:	40 e8       	ldi	r20, 0x80	; 128
    4c98:	5f e3       	ldi	r21, 0x3F	; 63
    4c9a:	0e 94 31 e1 	call	0x1c262	; 0x1c262 <__subsf3>
    4c9e:	0e 94 4c e3 	call	0x1c698	; 0x1c698 <round>
    4ca2:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <__fixunssfsi>
    4ca6:	6b 01       	movw	r12, r22
    4ca8:	7c 01       	movw	r14, r24
    4caa:	81 2c       	mov	r8, r1
    4cac:	91 2c       	mov	r9, r1
    4cae:	90 e8       	ldi	r25, 0x80	; 128
    4cb0:	a9 2e       	mov	r10, r25
    4cb2:	91 e4       	ldi	r25, 0x41	; 65
    4cb4:	b9 2e       	mov	r11, r25
    4cb6:	c1 14       	cp	r12, r1
    4cb8:	f0 e1       	ldi	r31, 0x10	; 16
    4cba:	df 06       	cpc	r13, r31
    4cbc:	e1 04       	cpc	r14, r1
    4cbe:	f1 04       	cpc	r15, r1
    4cc0:	30 f0       	brcs	.+12     	; 0x4cce <uart_ubr+0xe0>
    4cc2:	cc 24       	eor	r12, r12
    4cc4:	ca 94       	dec	r12
    4cc6:	8f e0       	ldi	r24, 0x0F	; 15
    4cc8:	d8 2e       	mov	r13, r24
    4cca:	e1 2c       	mov	r14, r1
    4ccc:	f1 2c       	mov	r15, r1
    4cce:	c7 01       	movw	r24, r14
    4cd0:	b6 01       	movw	r22, r12
    4cd2:	6f 5f       	subi	r22, 0xFF	; 255
    4cd4:	7f 4f       	sbci	r23, 0xFF	; 255
    4cd6:	8f 4f       	sbci	r24, 0xFF	; 255
    4cd8:	9f 4f       	sbci	r25, 0xFF	; 255
    4cda:	0e 94 33 e2 	call	0x1c466	; 0x1c466 <__floatunsisf>
    4cde:	a5 01       	movw	r20, r10
    4ce0:	94 01       	movw	r18, r8
    4ce2:	0e 94 e9 e2 	call	0x1c5d2	; 0x1c5d2 <__mulsf3>
    4ce6:	9b 01       	movw	r18, r22
    4ce8:	ac 01       	movw	r20, r24
    4cea:	60 e8       	ldi	r22, 0x80	; 128
    4cec:	76 e9       	ldi	r23, 0x96	; 150
    4cee:	88 e9       	ldi	r24, 0x98	; 152
    4cf0:	9b e4       	ldi	r25, 0x4B	; 75
    4cf2:	0e 94 9a e1 	call	0x1c334	; 0x1c334 <__divsf3>
    4cf6:	0e 94 07 e2 	call	0x1c40e	; 0x1c40e <__fixunssfsi>
    4cfa:	68 83       	st	Y, r22
    4cfc:	79 83       	std	Y+1, r23	; 0x01
    4cfe:	8a 83       	std	Y+2, r24	; 0x02
    4d00:	9b 83       	std	Y+3, r25	; 0x03
    4d02:	c6 01       	movw	r24, r12
    4d04:	df 91       	pop	r29
    4d06:	cf 91       	pop	r28
    4d08:	ff 90       	pop	r15
    4d0a:	ef 90       	pop	r14
    4d0c:	df 90       	pop	r13
    4d0e:	cf 90       	pop	r12
    4d10:	bf 90       	pop	r11
    4d12:	af 90       	pop	r10
    4d14:	9f 90       	pop	r9
    4d16:	8f 90       	pop	r8
    4d18:	7f 90       	pop	r7
    4d1a:	6f 90       	pop	r6
    4d1c:	5f 90       	pop	r5
    4d1e:	4f 90       	pop	r4
    4d20:	08 95       	ret

00004d22 <uart_init>:
    4d22:	a6 e0       	ldi	r26, 0x06	; 6
    4d24:	b0 e0       	ldi	r27, 0x00	; 0
    4d26:	e7 e9       	ldi	r30, 0x97	; 151
    4d28:	f6 e2       	ldi	r31, 0x26	; 38
    4d2a:	0c 94 e8 e0 	jmp	0x1c1d0	; 0x1c1d0 <__prologue_saves__+0x20>
    4d2e:	1e 82       	std	Y+6, r1	; 0x06
    4d30:	1d 82       	std	Y+5, r1	; 0x05
    4d32:	81 11       	cpse	r24, r1
    4d34:	36 c0       	rjmp	.+108    	; 0x4da2 <uart_init+0x80>
    4d36:	cb 01       	movw	r24, r22
    4d38:	ba 01       	movw	r22, r20
    4d3a:	9e 01       	movw	r18, r28
    4d3c:	2f 5f       	subi	r18, 0xFF	; 255
    4d3e:	3f 4f       	sbci	r19, 0xFF	; 255
    4d40:	ae 01       	movw	r20, r28
    4d42:	4b 5f       	subi	r20, 0xFB	; 251
    4d44:	5f 4f       	sbci	r21, 0xFF	; 255
    4d46:	53 df       	rcall	.-346    	; 0x4bee <uart_ubr>
    4d48:	f8 94       	cli
    4d4a:	10 92 0d 1a 	sts	0x1A0D, r1	; 0x801a0d <uarts+0x4>
    4d4e:	10 92 0c 1a 	sts	0x1A0C, r1	; 0x801a0c <uarts+0x3>
    4d52:	10 92 09 1a 	sts	0x1A09, r1	; 0x801a09 <uarts>
    4d56:	10 92 0a 1a 	sts	0x1A0A, r1	; 0x801a0a <uarts+0x1>
    4d5a:	10 92 0b 1a 	sts	0x1A0B, r1	; 0x801a0b <uarts+0x2>
    4d5e:	10 92 0e 1a 	sts	0x1A0E, r1	; 0x801a0e <uarts+0x5>
    4d62:	78 94       	sei
    4d64:	f8 94       	cli
    4d66:	58 9a       	sbi	0x0b, 0	; 11
    4d68:	59 9a       	sbi	0x0b, 1	; 11
    4d6a:	50 98       	cbi	0x0a, 0	; 10
    4d6c:	51 9a       	sbi	0x0a, 1	; 10
    4d6e:	28 e9       	ldi	r18, 0x98	; 152
    4d70:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    4d74:	2d 81       	ldd	r18, Y+5	; 0x05
    4d76:	3e 81       	ldd	r19, Y+6	; 0x06
    4d78:	23 2b       	or	r18, r19
    4d7a:	19 f0       	breq	.+6      	; 0x4d82 <uart_init+0x60>
    4d7c:	22 e0       	ldi	r18, 0x02	; 2
    4d7e:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    4d82:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    4d86:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    4d8a:	78 94       	sei
    4d8c:	69 e8       	ldi	r22, 0x89	; 137
    4d8e:	77 e2       	ldi	r23, 0x27	; 39
    4d90:	8e e9       	ldi	r24, 0x9E	; 158
    4d92:	97 e2       	ldi	r25, 0x27	; 39
    4d94:	0e 94 fd 76 	call	0xedfa	; 0xedfa <fdevopen>
    4d98:	69 81       	ldd	r22, Y+1	; 0x01
    4d9a:	7a 81       	ldd	r23, Y+2	; 0x02
    4d9c:	8b 81       	ldd	r24, Y+3	; 0x03
    4d9e:	9c 81       	ldd	r25, Y+4	; 0x04
    4da0:	03 c0       	rjmp	.+6      	; 0x4da8 <uart_init+0x86>
    4da2:	60 e0       	ldi	r22, 0x00	; 0
    4da4:	70 e0       	ldi	r23, 0x00	; 0
    4da6:	cb 01       	movw	r24, r22
    4da8:	26 96       	adiw	r28, 0x06	; 6
    4daa:	e2 e0       	ldi	r30, 0x02	; 2
    4dac:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

00004db0 <uart_rx_interrupt>:
    4db0:	cf 93       	push	r28
    4db2:	df 93       	push	r29
    4db4:	27 e5       	ldi	r18, 0x57	; 87
    4db6:	82 9f       	mul	r24, r18
    4db8:	c0 01       	movw	r24, r0
    4dba:	11 24       	eor	r1, r1
    4dbc:	fc 01       	movw	r30, r24
    4dbe:	e7 5f       	subi	r30, 0xF7	; 247
    4dc0:	f5 4e       	sbci	r31, 0xE5	; 229
    4dc2:	83 81       	ldd	r24, Z+3	; 0x03
    4dc4:	94 81       	ldd	r25, Z+4	; 0x04
    4dc6:	80 35       	cpi	r24, 0x50	; 80
    4dc8:	91 05       	cpc	r25, r1
    4dca:	7c f4       	brge	.+30     	; 0x4dea <uart_rx_interrupt+0x3a>
    4dcc:	30 81       	ld	r19, Z
    4dce:	21 e0       	ldi	r18, 0x01	; 1
    4dd0:	23 0f       	add	r18, r19
    4dd2:	20 83       	st	Z, r18
    4dd4:	ef 01       	movw	r28, r30
    4dd6:	c3 0f       	add	r28, r19
    4dd8:	d1 1d       	adc	r29, r1
    4dda:	6e 83       	std	Y+6, r22	; 0x06
    4ddc:	01 96       	adiw	r24, 0x01	; 1
    4dde:	94 83       	std	Z+4, r25	; 0x04
    4de0:	83 83       	std	Z+3, r24	; 0x03
    4de2:	20 35       	cpi	r18, 0x50	; 80
    4de4:	28 f0       	brcs	.+10     	; 0x4df0 <uart_rx_interrupt+0x40>
    4de6:	10 82       	st	Z, r1
    4de8:	03 c0       	rjmp	.+6      	; 0x4df0 <uart_rx_interrupt+0x40>
    4dea:	85 81       	ldd	r24, Z+5	; 0x05
    4dec:	81 60       	ori	r24, 0x01	; 1
    4dee:	85 83       	std	Z+5, r24	; 0x05
    4df0:	df 91       	pop	r29
    4df2:	cf 91       	pop	r28
    4df4:	08 95       	ret

00004df6 <__vector_20>:
    4df6:	1f 92       	push	r1
    4df8:	0f 92       	push	r0
    4dfa:	0f b6       	in	r0, 0x3f	; 63
    4dfc:	0f 92       	push	r0
    4dfe:	11 24       	eor	r1, r1
    4e00:	0b b6       	in	r0, 0x3b	; 59
    4e02:	0f 92       	push	r0
    4e04:	2f 93       	push	r18
    4e06:	3f 93       	push	r19
    4e08:	4f 93       	push	r20
    4e0a:	5f 93       	push	r21
    4e0c:	6f 93       	push	r22
    4e0e:	7f 93       	push	r23
    4e10:	8f 93       	push	r24
    4e12:	9f 93       	push	r25
    4e14:	af 93       	push	r26
    4e16:	bf 93       	push	r27
    4e18:	ef 93       	push	r30
    4e1a:	ff 93       	push	r31
    4e1c:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    4e20:	80 e0       	ldi	r24, 0x00	; 0
    4e22:	c6 df       	rcall	.-116    	; 0x4db0 <uart_rx_interrupt>
    4e24:	ff 91       	pop	r31
    4e26:	ef 91       	pop	r30
    4e28:	bf 91       	pop	r27
    4e2a:	af 91       	pop	r26
    4e2c:	9f 91       	pop	r25
    4e2e:	8f 91       	pop	r24
    4e30:	7f 91       	pop	r23
    4e32:	6f 91       	pop	r22
    4e34:	5f 91       	pop	r21
    4e36:	4f 91       	pop	r20
    4e38:	3f 91       	pop	r19
    4e3a:	2f 91       	pop	r18
    4e3c:	0f 90       	pop	r0
    4e3e:	0b be       	out	0x3b, r0	; 59
    4e40:	0f 90       	pop	r0
    4e42:	0f be       	out	0x3f, r0	; 63
    4e44:	0f 90       	pop	r0
    4e46:	1f 90       	pop	r1
    4e48:	18 95       	reti

00004e4a <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    4e4a:	81 11       	cpse	r24, r1
    4e4c:	07 c0       	rjmp	.+14     	; 0x4e5c <uart_rx_count+0x12>
        return(EOF);

    cli();
    4e4e:	f8 94       	cli

    count = uarts[uart].rx_count;
    4e50:	80 91 0c 1a 	lds	r24, 0x1A0C	; 0x801a0c <uarts+0x3>
    4e54:	90 91 0d 1a 	lds	r25, 0x1A0D	; 0x801a0d <uarts+0x4>

    sei();
    4e58:	78 94       	sei

    return (count );
    4e5a:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    4e5c:	8f ef       	ldi	r24, 0xFF	; 255
    4e5e:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    4e60:	08 95       	ret

00004e62 <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    4e62:	81 11       	cpse	r24, r1
    4e64:	21 c0       	rjmp	.+66     	; 0x4ea8 <uart_get_tail+0x46>
    {
        return(EOF);
    }

    while(uart_rx_count(uart) < 1)
    4e66:	80 e0       	ldi	r24, 0x00	; 0
    4e68:	f0 df       	rcall	.-32     	; 0x4e4a <uart_rx_count>
    4e6a:	18 16       	cp	r1, r24
    4e6c:	19 06       	cpc	r1, r25
    4e6e:	dc f7       	brge	.-10     	; 0x4e66 <uart_get_tail+0x4>
        ;

    cli();
    4e70:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    4e72:	e0 91 0a 1a 	lds	r30, 0x1A0A	; 0x801a0a <uarts+0x1>
    4e76:	91 e0       	ldi	r25, 0x01	; 1
    4e78:	9e 0f       	add	r25, r30
    4e7a:	90 93 0a 1a 	sts	0x1A0A, r25	; 0x801a0a <uarts+0x1>
    4e7e:	f0 e0       	ldi	r31, 0x00	; 0
    4e80:	e7 5f       	subi	r30, 0xF7	; 247
    4e82:	f5 4e       	sbci	r31, 0xE5	; 229
    4e84:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    4e86:	90 35       	cpi	r25, 0x50	; 80
    4e88:	10 f0       	brcs	.+4      	; 0x4e8e <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    4e8a:	10 92 0a 1a 	sts	0x1A0A, r1	; 0x801a0a <uarts+0x1>
    uarts[uart].rx_count--;
    4e8e:	20 91 0c 1a 	lds	r18, 0x1A0C	; 0x801a0c <uarts+0x3>
    4e92:	30 91 0d 1a 	lds	r19, 0x1A0D	; 0x801a0d <uarts+0x4>
    4e96:	21 50       	subi	r18, 0x01	; 1
    4e98:	31 09       	sbc	r19, r1
    4e9a:	30 93 0d 1a 	sts	0x1A0D, r19	; 0x801a0d <uarts+0x4>
    4e9e:	20 93 0c 1a 	sts	0x1A0C, r18	; 0x801a0c <uarts+0x3>
    sei();
    4ea2:	78 94       	sei

    return (c & 0xff);
    4ea4:	90 e0       	ldi	r25, 0x00	; 0
    4ea6:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
    {
        return(EOF);
    4ea8:	8f ef       	ldi	r24, 0xFF	; 255
    4eaa:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    4eac:	08 95       	ret

00004eae <uart_rx_byte>:
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    return( uart_get_tail(uart) & 0xff);
    4eae:	d9 df       	rcall	.-78     	; 0x4e62 <uart_get_tail>
}
    4eb0:	99 27       	eor	r25, r25
    4eb2:	08 95       	ret

00004eb4 <uart_tx_byte>:
/// @param[in] uart: uart number.
///
/// @return void.
int uart_tx_byte(int c, uint8_t uart)
{
    if(uart == 0)
    4eb4:	61 11       	cpse	r22, r1
    4eb6:	09 c0       	rjmp	.+18     	; 0x4eca <uart_tx_byte+0x16>
    {
        while (!BIT_TST(UCSR0A, UDRE0))
    4eb8:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    4ebc:	25 ff       	sbrs	r18, 5
    4ebe:	fc cf       	rjmp	.-8      	; 0x4eb8 <uart_tx_byte+0x4>
            ;
        UDR0 = c & 0x7f;
    4ec0:	28 2f       	mov	r18, r24
    4ec2:	2f 77       	andi	r18, 0x7F	; 127
    4ec4:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
        return(c);
    4ec8:	08 95       	ret
    }
#ifdef UARTS > 1
    if(uart == 1)
    4eca:	61 30       	cpi	r22, 0x01	; 1
    4ecc:	49 f4       	brne	.+18     	; 0x4ee0 <uart_tx_byte+0x2c>
    {
        while (!BIT_TST(UCSR1A, UDRE1))
    4ece:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    4ed2:	25 ff       	sbrs	r18, 5
    4ed4:	fc cf       	rjmp	.-8      	; 0x4ece <uart_tx_byte+0x1a>
            ;
        UDR1 = c & 0x7f;
    4ed6:	28 2f       	mov	r18, r24
    4ed8:	2f 77       	andi	r18, 0x7F	; 127
    4eda:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    4ede:	08 95       	ret
        return(c);
    }
#endif
    return(EOF);
    4ee0:	8f ef       	ldi	r24, 0xFF	; 255
    4ee2:	9f ef       	ldi	r25, 0xFF	; 255
}
    4ee4:	08 95       	ret

00004ee6 <uart_getchar>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_getchar(uint8_t uart)
{
    4ee6:	cf 93       	push	r28
    uint8_t c;

    if(uart >= UARTS)
    4ee8:	81 11       	cpse	r24, r1
    4eea:	0f c0       	rjmp	.+30     	; 0x4f0a <uart_getchar+0x24>
        break;
    }
    if(c == '\r')
        c = '\n';
#endif
    c = uart_rx_byte(uart);
    4eec:	e0 df       	rcall	.-64     	; 0x4eae <uart_rx_byte>
    4eee:	c8 2f       	mov	r28, r24
    uart_tx_byte(c, uart);
    4ef0:	60 e0       	ldi	r22, 0x00	; 0
    4ef2:	90 e0       	ldi	r25, 0x00	; 0
    4ef4:	df df       	rcall	.-66     	; 0x4eb4 <uart_tx_byte>
    if(c == '\r')
    4ef6:	cd 30       	cpi	r28, 0x0D	; 13
    4ef8:	29 f4       	brne	.+10     	; 0x4f04 <uart_getchar+0x1e>
    {
        c = '\n';
        uart_tx_byte(c, uart);
    4efa:	60 e0       	ldi	r22, 0x00	; 0
    4efc:	8a e0       	ldi	r24, 0x0A	; 10
    4efe:	90 e0       	ldi	r25, 0x00	; 0
    4f00:	d9 df       	rcall	.-78     	; 0x4eb4 <uart_tx_byte>
#endif
    c = uart_rx_byte(uart);
    uart_tx_byte(c, uart);
    if(c == '\r')
    {
        c = '\n';
    4f02:	ca e0       	ldi	r28, 0x0A	; 10
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
    4f04:	8c 2f       	mov	r24, r28
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	02 c0       	rjmp	.+4      	; 0x4f0e <uart_getchar+0x28>
int uart_getchar(uint8_t uart)
{
    uint8_t c;

    if(uart >= UARTS)
        return(EOF);
    4f0a:	8f ef       	ldi	r24, 0xFF	; 255
    4f0c:	9f ef       	ldi	r25, 0xFF	; 255
        c = '\n';
        uart_tx_byte(c, uart);
    }
//FIXME ECHO
    return (c);
}
    4f0e:	cf 91       	pop	r28
    4f10:	08 95       	ret

00004f12 <uart0_getchar>:
///
/// @return  uart_getchar(0);.
/// @see fdevopen() from avr-libc.
int uart0_getchar( void *f  __attribute__((unused)))
{
    return( uart_getchar(0) );
    4f12:	80 e0       	ldi	r24, 0x00	; 0
    4f14:	e8 cf       	rjmp	.-48     	; 0x4ee6 <uart_getchar>
}
    4f16:	08 95       	ret

00004f18 <uart_putchar>:
/// @param[in] c: transmit character.
/// @param[in] uart: uart number.
///
/// @return void.
int uart_putchar(int c, int uart)
{
    4f18:	1f 93       	push	r17
    4f1a:	cf 93       	push	r28
    4f1c:	df 93       	push	r29
    4f1e:	ec 01       	movw	r28, r24
    4f20:	16 2f       	mov	r17, r22
    uart_tx_byte(c, uart);
    4f22:	c8 df       	rcall	.-112    	; 0x4eb4 <uart_tx_byte>

    if( c == '\n' )
    4f24:	ca 30       	cpi	r28, 0x0A	; 10
    4f26:	d1 05       	cpc	r29, r1
    4f28:	21 f4       	brne	.+8      	; 0x4f32 <uart_putchar+0x1a>
        uart_tx_byte('\r', uart);
    4f2a:	61 2f       	mov	r22, r17
    4f2c:	8d e0       	ldi	r24, 0x0D	; 13
    4f2e:	90 e0       	ldi	r25, 0x00	; 0
    4f30:	c1 df       	rcall	.-126    	; 0x4eb4 <uart_tx_byte>

    return(c);
}
    4f32:	ce 01       	movw	r24, r28
    4f34:	df 91       	pop	r29
    4f36:	cf 91       	pop	r28
    4f38:	1f 91       	pop	r17
    4f3a:	08 95       	ret

00004f3c <uart0_putchar>:
/// @param[in] f: unused FILE *stream pointer.
///
/// @return  uart_putchar(c, 0);.
/// @see fdevopen() from avr-libc.
int uart0_putchar(int c, void *f  __attribute__((unused)))
{
    4f3c:	cf 93       	push	r28
    4f3e:	df 93       	push	r29
    4f40:	ec 01       	movw	r28, r24
    uart_putchar(c, 0);
    4f42:	60 e0       	ldi	r22, 0x00	; 0
    4f44:	70 e0       	ldi	r23, 0x00	; 0
    4f46:	e8 df       	rcall	.-48     	; 0x4f18 <uart_putchar>
    return(c);
}
    4f48:	ce 01       	movw	r24, r28
    4f4a:	df 91       	pop	r29
    4f4c:	cf 91       	pop	r28
    4f4e:	08 95       	ret

00004f50 <uart_keyhit>:
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
    return ( uart_rx_count( uart ) );
    4f50:	7c cf       	rjmp	.-264    	; 0x4e4a <uart_rx_count>
}
    4f52:	08 95       	ret

00004f54 <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    4f54:	cf 92       	push	r12
    4f56:	df 92       	push	r13
    4f58:	ef 92       	push	r14
    4f5a:	ff 92       	push	r15
    4f5c:	6b 01       	movw	r12, r22
    4f5e:	7c 01       	movw	r14, r24
    4f60:	80 91 6d 17 	lds	r24, 0x176D	; 0x80176d <SPI0_Speed_value>
    4f64:	90 91 6e 17 	lds	r25, 0x176E	; 0x80176e <SPI0_Speed_value+0x1>
    4f68:	a0 91 6f 17 	lds	r26, 0x176F	; 0x80176f <SPI0_Speed_value+0x2>
    4f6c:	b0 91 70 17 	lds	r27, 0x1770	; 0x801770 <SPI0_Speed_value+0x3>
    4f70:	8c 15       	cp	r24, r12
    4f72:	9d 05       	cpc	r25, r13
    4f74:	ae 05       	cpc	r26, r14
    4f76:	bf 05       	cpc	r27, r15
    4f78:	09 f4       	brne	.+2      	; 0x4f7c <SPI0_Speed+0x28>
    4f7a:	4e c0       	rjmp	.+156    	; 0x5018 <SPI0_Speed+0xc4>
    4f7c:	60 e0       	ldi	r22, 0x00	; 0
    4f7e:	7d e2       	ldi	r23, 0x2D	; 45
    4f80:	81 e3       	ldi	r24, 0x31	; 49
    4f82:	91 e0       	ldi	r25, 0x01	; 1
    4f84:	a7 01       	movw	r20, r14
    4f86:	96 01       	movw	r18, r12
    4f88:	0e 94 6b e0 	call	0x1c0d6	; 0x1c0d6 <__udivmodsi4>
    4f8c:	20 38       	cpi	r18, 0x80	; 128
    4f8e:	31 05       	cpc	r19, r1
    4f90:	41 05       	cpc	r20, r1
    4f92:	51 05       	cpc	r21, r1
    4f94:	28 f4       	brcc	.+10     	; 0x4fa0 <SPI0_Speed+0x4c>
    4f96:	20 34       	cpi	r18, 0x40	; 64
    4f98:	31 05       	cpc	r19, r1
    4f9a:	41 05       	cpc	r20, r1
    4f9c:	51 05       	cpc	r21, r1
    4f9e:	30 f0       	brcs	.+12     	; 0x4fac <SPI0_Speed+0x58>
    4fa0:	8d b5       	in	r24, 0x2d	; 45
    4fa2:	8e 7f       	andi	r24, 0xFE	; 254
    4fa4:	8d bd       	out	0x2d, r24	; 45
    4fa6:	8c b5       	in	r24, 0x2c	; 44
    4fa8:	82 60       	ori	r24, 0x02	; 2
    4faa:	1b c0       	rjmp	.+54     	; 0x4fe2 <SPI0_Speed+0x8e>
    4fac:	8d b5       	in	r24, 0x2d	; 45
    4fae:	20 32       	cpi	r18, 0x20	; 32
    4fb0:	31 05       	cpc	r19, r1
    4fb2:	41 05       	cpc	r20, r1
    4fb4:	51 05       	cpc	r21, r1
    4fb6:	28 f0       	brcs	.+10     	; 0x4fc2 <SPI0_Speed+0x6e>
    4fb8:	81 60       	ori	r24, 0x01	; 1
    4fba:	8d bd       	out	0x2d, r24	; 45
    4fbc:	8c b5       	in	r24, 0x2c	; 44
    4fbe:	82 60       	ori	r24, 0x02	; 2
    4fc0:	1f c0       	rjmp	.+62     	; 0x5000 <SPI0_Speed+0xac>
    4fc2:	20 31       	cpi	r18, 0x10	; 16
    4fc4:	31 05       	cpc	r19, r1
    4fc6:	41 05       	cpc	r20, r1
    4fc8:	51 05       	cpc	r21, r1
    4fca:	10 f0       	brcs	.+4      	; 0x4fd0 <SPI0_Speed+0x7c>
    4fcc:	8e 7f       	andi	r24, 0xFE	; 254
    4fce:	06 c0       	rjmp	.+12     	; 0x4fdc <SPI0_Speed+0x88>
    4fd0:	28 30       	cpi	r18, 0x08	; 8
    4fd2:	31 05       	cpc	r19, r1
    4fd4:	41 05       	cpc	r20, r1
    4fd6:	51 05       	cpc	r21, r1
    4fd8:	40 f0       	brcs	.+16     	; 0x4fea <SPI0_Speed+0x96>
    4fda:	81 60       	ori	r24, 0x01	; 1
    4fdc:	8d bd       	out	0x2d, r24	; 45
    4fde:	8c b5       	in	r24, 0x2c	; 44
    4fe0:	8d 7f       	andi	r24, 0xFD	; 253
    4fe2:	8c bd       	out	0x2c, r24	; 44
    4fe4:	8c b5       	in	r24, 0x2c	; 44
    4fe6:	81 60       	ori	r24, 0x01	; 1
    4fe8:	0e c0       	rjmp	.+28     	; 0x5006 <SPI0_Speed+0xb2>
    4fea:	24 30       	cpi	r18, 0x04	; 4
    4fec:	31 05       	cpc	r19, r1
    4fee:	41 05       	cpc	r20, r1
    4ff0:	51 05       	cpc	r21, r1
    4ff2:	10 f0       	brcs	.+4      	; 0x4ff8 <SPI0_Speed+0xa4>
    4ff4:	8e 7f       	andi	r24, 0xFE	; 254
    4ff6:	01 c0       	rjmp	.+2      	; 0x4ffa <SPI0_Speed+0xa6>
    4ff8:	81 60       	ori	r24, 0x01	; 1
    4ffa:	8d bd       	out	0x2d, r24	; 45
    4ffc:	8c b5       	in	r24, 0x2c	; 44
    4ffe:	8d 7f       	andi	r24, 0xFD	; 253
    5000:	8c bd       	out	0x2c, r24	; 44
    5002:	8c b5       	in	r24, 0x2c	; 44
    5004:	8e 7f       	andi	r24, 0xFE	; 254
    5006:	8c bd       	out	0x2c, r24	; 44
    5008:	c0 92 6d 17 	sts	0x176D, r12	; 0x80176d <SPI0_Speed_value>
    500c:	d0 92 6e 17 	sts	0x176E, r13	; 0x80176e <SPI0_Speed_value+0x1>
    5010:	e0 92 6f 17 	sts	0x176F, r14	; 0x80176f <SPI0_Speed_value+0x2>
    5014:	f0 92 70 17 	sts	0x1770, r15	; 0x801770 <SPI0_Speed_value+0x3>
    5018:	ff 90       	pop	r15
    501a:	ef 90       	pop	r14
    501c:	df 90       	pop	r13
    501e:	cf 90       	pop	r12
    5020:	08 95       	ret

00005022 <SPI0_Mode>:
    5022:	cf 93       	push	r28
    5024:	df 93       	push	r29
    5026:	00 d0       	rcall	.+0      	; 0x5028 <SPI0_Mode+0x6>
    5028:	00 d0       	rcall	.+0      	; 0x502a <SPI0_Mode+0x8>
    502a:	1f 92       	push	r1
    502c:	ec 01       	movw	r28, r24
    502e:	81 30       	cpi	r24, 0x01	; 1
    5030:	91 05       	cpc	r25, r1
    5032:	71 f0       	breq	.+28     	; 0x5050 <SPI0_Mode+0x2e>
    5034:	2c f4       	brge	.+10     	; 0x5040 <SPI0_Mode+0x1e>
    5036:	89 2b       	or	r24, r25
    5038:	c1 f4       	brne	.+48     	; 0x506a <SPI0_Mode+0x48>
    503a:	8c b5       	in	r24, 0x2c	; 44
    503c:	87 7f       	andi	r24, 0xF7	; 247
    503e:	11 c0       	rjmp	.+34     	; 0x5062 <SPI0_Mode+0x40>
    5040:	82 30       	cpi	r24, 0x02	; 2
    5042:	91 05       	cpc	r25, r1
    5044:	61 f0       	breq	.+24     	; 0x505e <SPI0_Mode+0x3c>
    5046:	03 97       	sbiw	r24, 0x03	; 3
    5048:	81 f4       	brne	.+32     	; 0x506a <SPI0_Mode+0x48>
    504a:	8c b5       	in	r24, 0x2c	; 44
    504c:	88 60       	ori	r24, 0x08	; 8
    504e:	02 c0       	rjmp	.+4      	; 0x5054 <SPI0_Mode+0x32>
    5050:	8c b5       	in	r24, 0x2c	; 44
    5052:	87 7f       	andi	r24, 0xF7	; 247
    5054:	8c bd       	out	0x2c, r24	; 44
    5056:	8c b5       	in	r24, 0x2c	; 44
    5058:	84 60       	ori	r24, 0x04	; 4
    505a:	8c bd       	out	0x2c, r24	; 44
    505c:	12 c0       	rjmp	.+36     	; 0x5082 <SPI0_Mode+0x60>
    505e:	8c b5       	in	r24, 0x2c	; 44
    5060:	88 60       	ori	r24, 0x08	; 8
    5062:	8c bd       	out	0x2c, r24	; 44
    5064:	8c b5       	in	r24, 0x2c	; 44
    5066:	8b 7f       	andi	r24, 0xFB	; 251
    5068:	f8 cf       	rjmp	.-16     	; 0x505a <SPI0_Mode+0x38>
    506a:	ed b7       	in	r30, 0x3d	; 61
    506c:	fe b7       	in	r31, 0x3e	; 62
    506e:	d5 83       	std	Z+5, r29	; 0x05
    5070:	c4 83       	std	Z+4, r28	; 0x04
    5072:	88 e2       	ldi	r24, 0x28	; 40
    5074:	93 e0       	ldi	r25, 0x03	; 3
    5076:	a0 e0       	ldi	r26, 0x00	; 0
    5078:	81 83       	std	Z+1, r24	; 0x01
    507a:	92 83       	std	Z+2, r25	; 0x02
    507c:	a3 83       	std	Z+3, r26	; 0x03
    507e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    5082:	d0 93 6c 17 	sts	0x176C, r29	; 0x80176c <SPI0_Mode_value+0x1>
    5086:	c0 93 6b 17 	sts	0x176B, r28	; 0x80176b <SPI0_Mode_value>
    508a:	cd b7       	in	r28, 0x3d	; 61
    508c:	de b7       	in	r29, 0x3e	; 62
    508e:	25 96       	adiw	r28, 0x05	; 5
    5090:	e2 e0       	ldi	r30, 0x02	; 2
    5092:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

00005096 <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    5096:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    5098:	0d b4       	in	r0, 0x2d	; 45
    509a:	07 fe       	sbrs	r0, 7
    509c:	fd cf       	rjmp	.-6      	; 0x5098 <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    509e:	8e b5       	in	r24, 0x2e	; 46
}
    50a0:	08 95       	ret

000050a2 <SPI0_Init>:

///@brief Initialize SPI0 device.
/// See Atmel App Note AVR151
/// Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    50a2:	cf 92       	push	r12
    50a4:	df 92       	push	r13
    50a6:	ef 92       	push	r14
    50a8:	ff 92       	push	r15
    50aa:	cf 93       	push	r28
    50ac:	df 93       	push	r29
    50ae:	1f 92       	push	r1
    50b0:	cd b7       	in	r28, 0x3d	; 61
    50b2:	de b7       	in	r29, 0x3e	; 62
    50b4:	6b 01       	movw	r12, r22
    50b6:	7c 01       	movw	r14, r24
    printf("Port B DDR:   0x%02x\n", (int) GPIO_PORT_DDR_RD(GPIO_B));
    printf("Port B LATCH: 0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
    printf("Port B PINS:  0x%02x\n", (int) GPIO_PORT_LATCH_RD(GPIO_B));
#endif

    SPCR = 0;                                     // Clear SPCR in case we are not called after RESET
    50b8:	1c bc       	out	0x2c, r1	; 44

    GPIO_PIN_HI(SCK);                             // SCK Output
    50ba:	2f 9a       	sbi	0x05, 7	; 5
    50bc:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                            // MOSI Output
    50be:	2d 9a       	sbi	0x05, 5	; 5
    50c0:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                         // MISO Input, no pull-up
    50c2:	26 98       	cbi	0x04, 6	; 4

// Warning *** MSTR MUST be set BEFORE SPE!!!! *** otherwise SS will NOT behave as an output
    GPIO_PIN_LOW(SS);                             // SS Output must be HI prevent slave mode from getting set while initializing
    50c4:	2c 98       	cbi	0x05, 4	; 5
    50c6:	24 9a       	sbi	0x04, 4	; 4
    BIT_SET(SPCR, MSTR);                          // Master Mode
    50c8:	8c b5       	in	r24, 0x2c	; 44
    50ca:	80 61       	ori	r24, 0x10	; 16
    50cc:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, SPE);                           // Enable SPI
    50ce:	8c b5       	in	r24, 0x2c	; 44
    50d0:	80 64       	ori	r24, 0x40	; 64
    50d2:	8c bd       	out	0x2c, r24	; 44

// SPI Clear any pending interrupt flags
    D = SPSR;
    50d4:	8d b5       	in	r24, 0x2d	; 45
    50d6:	89 83       	std	Y+1, r24	; 0x01
    D = SPDR;
    50d8:	8e b5       	in	r24, 0x2e	; 46
    50da:	89 83       	std	Y+1, r24	; 0x01

/// Set SPI clock mode 0
///  SPI Mode     CPOL    CPHA            Sample
///  0    0       0       Leading (Rising)   Edge
    SPI0_Mode(0);
    50dc:	80 e0       	ldi	r24, 0x00	; 0
    50de:	90 e0       	ldi	r25, 0x00	; 0
    50e0:	a0 df       	rcall	.-192    	; 0x5022 <SPI0_Mode>

// Set SPI clock speed
    SPI0_Speed(speed);
    50e2:	c7 01       	movw	r24, r14
    50e4:	b6 01       	movw	r22, r12
    50e6:	36 df       	rcall	.-404    	; 0x4f54 <SPI0_Speed>

    SPI0_TXRX_Byte(0xff);                         // Send dummy 0xFF
    50e8:	8f ef       	ldi	r24, 0xFF	; 255
    50ea:	d5 df       	rcall	.-86     	; 0x5096 <SPI0_TXRX_Byte>
    50ec:	0f 90       	pop	r0
    SPI0_Init_state = 1;

}
    50ee:	df 91       	pop	r29
    50f0:	cf 91       	pop	r28
    50f2:	ff 90       	pop	r15
    50f4:	ef 90       	pop	r14
    50f6:	df 90       	pop	r13
    50f8:	cf 90       	pop	r12
    50fa:	08 95       	ret

000050fc <SPI0_TX>:
    50fc:	0f 93       	push	r16
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    50fe:	1f 93       	push	r17
    5100:	cf 93       	push	r28
    5102:	df 93       	push	r29
    5104:	8c 01       	movw	r16, r24
    5106:	eb 01       	movw	r28, r22

    while(count > 0)
    5108:	1c 16       	cp	r1, r28
    510a:	1d 06       	cpc	r1, r29
    510c:	34 f4       	brge	.+12     	; 0x511a <SPI0_TX+0x1e>
    {
        SPI0_TXRX_Byte(*data);
    510e:	f8 01       	movw	r30, r16
    5110:	81 91       	ld	r24, Z+
    5112:	8f 01       	movw	r16, r30
    5114:	c0 df       	rcall	.-128    	; 0x5096 <SPI0_TXRX_Byte>
        ++data;
        --count;
    5116:	21 97       	sbiw	r28, 0x01	; 1
    5118:	f7 cf       	rjmp	.-18     	; 0x5108 <SPI0_TX+0xc>
    }
}
    511a:	df 91       	pop	r29
    511c:	cf 91       	pop	r28
    511e:	1f 91       	pop	r17
    5120:	0f 91       	pop	r16
    5122:	08 95       	ret

00005124 <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    5124:	0f 93       	push	r16
    5126:	1f 93       	push	r17
    5128:	cf 93       	push	r28
    512a:	df 93       	push	r29
    512c:	8c 01       	movw	r16, r24
    512e:	eb 01       	movw	r28, r22

    while(count > 0)
    5130:	1c 16       	cp	r1, r28
    5132:	1d 06       	cpc	r1, r29
    5134:	44 f4       	brge	.+16     	; 0x5146 <SPI0_TXRX+0x22>
    {
        *data = SPI0_TXRX_Byte(*data);
    5136:	f8 01       	movw	r30, r16
    5138:	80 81       	ld	r24, Z
    513a:	ad df       	rcall	.-166    	; 0x5096 <SPI0_TXRX_Byte>
    513c:	f8 01       	movw	r30, r16
    513e:	81 93       	st	Z+, r24
    5140:	8f 01       	movw	r16, r30
        ++data;
        --count;
    5142:	21 97       	sbiw	r28, 0x01	; 1
    5144:	f5 cf       	rjmp	.-22     	; 0x5130 <SPI0_TXRX+0xc>
    }
}
    5146:	df 91       	pop	r29
    5148:	cf 91       	pop	r28
    514a:	1f 91       	pop	r17
    514c:	0f 91       	pop	r16
    514e:	08 95       	ret

00005150 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    5150:	0f 93       	push	r16
    5152:	1f 93       	push	r17
    5154:	cf 93       	push	r28
    5156:	df 93       	push	r29
    5158:	8c 01       	movw	r16, r24
    515a:	eb 01       	movw	r28, r22

    while(count > 0)
    515c:	1c 16       	cp	r1, r28
    515e:	1d 06       	cpc	r1, r29
    5160:	3c f4       	brge	.+14     	; 0x5170 <SPI0_RX+0x20>
    {
        *data = SPI0_TXRX_Byte(0xff);
    5162:	8f ef       	ldi	r24, 0xFF	; 255
    5164:	98 df       	rcall	.-208    	; 0x5096 <SPI0_TXRX_Byte>
    5166:	f8 01       	movw	r30, r16
    5168:	81 93       	st	Z+, r24
    516a:	8f 01       	movw	r16, r30
        ++data;
        --count;
    516c:	21 97       	sbiw	r28, 0x01	; 1
    516e:	f6 cf       	rjmp	.-20     	; 0x515c <SPI0_RX+0xc>
    }
}
    5170:	df 91       	pop	r29
    5172:	cf 91       	pop	r28
    5174:	1f 91       	pop	r17
    5176:	0f 91       	pop	r16
    5178:	08 95       	ret

0000517a <i2c_timer>:
int8_t i2c_ok()
{
	if (i2c.flags) 
		return(0);
	return(1);
}
    517a:	2f b7       	in	r18, 0x3f	; 63
    517c:	80 91 61 1a 	lds	r24, 0x1A61	; 0x801a61 <i2c+0x1>
    5180:	81 11       	cpse	r24, r1
    5182:	04 c0       	rjmp	.+8      	; 0x518c <i2c_timer+0x12>
    5184:	80 91 62 1a 	lds	r24, 0x1A62	; 0x801a62 <i2c+0x2>
    5188:	81 11       	cpse	r24, r1
    518a:	0b c0       	rjmp	.+22     	; 0x51a2 <i2c_timer+0x28>
    518c:	80 91 64 1a 	lds	r24, 0x1A64	; 0x801a64 <i2c+0x4>
    5190:	90 91 65 1a 	lds	r25, 0x1A65	; 0x801a65 <i2c+0x5>
    5194:	00 97       	sbiw	r24, 0x00	; 0
    5196:	29 f0       	breq	.+10     	; 0x51a2 <i2c_timer+0x28>
    5198:	01 97       	sbiw	r24, 0x01	; 1
    519a:	90 93 65 1a 	sts	0x1A65, r25	; 0x801a65 <i2c+0x5>
    519e:	80 93 64 1a 	sts	0x1A64, r24	; 0x801a64 <i2c+0x4>
    51a2:	2f bf       	out	0x3f, r18	; 63
    51a4:	08 95       	ret

000051a6 <i2c_check_op>:
    51a6:	ad b7       	in	r26, 0x3d	; 61
    51a8:	be b7       	in	r27, 0x3e	; 62
    51aa:	17 97       	sbiw	r26, 0x07	; 7
    51ac:	0f b6       	in	r0, 0x3f	; 63
    51ae:	f8 94       	cli
    51b0:	be bf       	out	0x3e, r27	; 62
    51b2:	0f be       	out	0x3f, r0	; 63
    51b4:	ad bf       	out	0x3d, r26	; 61
    51b6:	28 2f       	mov	r18, r24
    51b8:	08 2e       	mov	r0, r24
    51ba:	00 0c       	add	r0, r0
    51bc:	33 0b       	sbc	r19, r19
    51be:	80 31       	cpi	r24, 0x10	; 16
    51c0:	88 f0       	brcs	.+34     	; 0x51e4 <i2c_check_op+0x3e>
    51c2:	80 e1       	ldi	r24, 0x10	; 16
    51c4:	90 e0       	ldi	r25, 0x00	; 0
    51c6:	ed b7       	in	r30, 0x3d	; 61
    51c8:	fe b7       	in	r31, 0x3e	; 62
    51ca:	97 83       	std	Z+7, r25	; 0x07
    51cc:	86 83       	std	Z+6, r24	; 0x06
    51ce:	35 83       	std	Z+5, r19	; 0x05
    51d0:	24 83       	std	Z+4, r18	; 0x04
    51d2:	8d e3       	ldi	r24, 0x3D	; 61
    51d4:	94 e0       	ldi	r25, 0x04	; 4
    51d6:	a0 e0       	ldi	r26, 0x00	; 0
    51d8:	81 83       	std	Z+1, r24	; 0x01
    51da:	92 83       	std	Z+2, r25	; 0x02
    51dc:	a3 83       	std	Z+3, r26	; 0x03
    51de:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    51e2:	24 c0       	rjmp	.+72     	; 0x522c <i2c_check_op+0x86>
    51e4:	f9 01       	movw	r30, r18
    51e6:	ee 0f       	add	r30, r30
    51e8:	ff 1f       	adc	r31, r31
    51ea:	ee 58       	subi	r30, 0x8E	; 142
    51ec:	f8 4e       	sbci	r31, 0xE8	; 232
    51ee:	01 90       	ld	r0, Z+
    51f0:	f0 81       	ld	r31, Z
    51f2:	e0 2d       	mov	r30, r0
    51f4:	30 97       	sbiw	r30, 0x00	; 0
    51f6:	d1 f0       	breq	.+52     	; 0x522c <i2c_check_op+0x86>
    51f8:	80 85       	ldd	r24, Z+8	; 0x08
    51fa:	91 85       	ldd	r25, Z+9	; 0x09
    51fc:	89 2b       	or	r24, r25
    51fe:	39 f4       	brne	.+14     	; 0x520e <i2c_check_op+0x68>
    5200:	ed b7       	in	r30, 0x3d	; 61
    5202:	fe b7       	in	r31, 0x3e	; 62
    5204:	35 83       	std	Z+5, r19	; 0x05
    5206:	24 83       	std	Z+4, r18	; 0x04
    5208:	84 e2       	ldi	r24, 0x24	; 36
    520a:	94 e0       	ldi	r25, 0x04	; 4
    520c:	09 c0       	rjmp	.+18     	; 0x5220 <i2c_check_op+0x7a>
    520e:	86 81       	ldd	r24, Z+6	; 0x06
    5210:	81 11       	cpse	r24, r1
    5212:	0e c0       	rjmp	.+28     	; 0x5230 <i2c_check_op+0x8a>
    5214:	ed b7       	in	r30, 0x3d	; 61
    5216:	fe b7       	in	r31, 0x3e	; 62
    5218:	35 83       	std	Z+5, r19	; 0x05
    521a:	24 83       	std	Z+4, r18	; 0x04
    521c:	8e e0       	ldi	r24, 0x0E	; 14
    521e:	94 e0       	ldi	r25, 0x04	; 4
    5220:	a0 e0       	ldi	r26, 0x00	; 0
    5222:	81 83       	std	Z+1, r24	; 0x01
    5224:	92 83       	std	Z+2, r25	; 0x02
    5226:	a3 83       	std	Z+3, r26	; 0x03
    5228:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    522c:	80 e0       	ldi	r24, 0x00	; 0
    522e:	01 c0       	rjmp	.+2      	; 0x5232 <i2c_check_op+0x8c>
    5230:	81 e0       	ldi	r24, 0x01	; 1
    5232:	ad b7       	in	r26, 0x3d	; 61
    5234:	be b7       	in	r27, 0x3e	; 62
    5236:	17 96       	adiw	r26, 0x07	; 7
    5238:	0f b6       	in	r0, 0x3f	; 63
    523a:	f8 94       	cli
    523c:	be bf       	out	0x3e, r27	; 62
    523e:	0f be       	out	0x3f, r0	; 63
    5240:	ad bf       	out	0x3d, r26	; 61
    5242:	08 95       	ret

00005244 <i2c_task_init>:
    5244:	8f b7       	in	r24, 0x3f	; 63
    5246:	f8 94       	cli
    5248:	e2 e7       	ldi	r30, 0x72	; 114
    524a:	f7 e1       	ldi	r31, 0x17	; 23
    524c:	11 92       	st	Z+, r1
    524e:	11 92       	st	Z+, r1
    5250:	97 e1       	ldi	r25, 0x17	; 23
    5252:	e2 39       	cpi	r30, 0x92	; 146
    5254:	f9 07       	cpc	r31, r25
    5256:	d1 f7       	brne	.-12     	; 0x524c <i2c_task_init+0x8>
    5258:	10 92 92 17 	sts	0x1792, r1	; 0x801792 <i2c_task>
    525c:	91 e0       	ldi	r25, 0x01	; 1
    525e:	90 93 94 17 	sts	0x1794, r25	; 0x801794 <i2c_task+0x2>
    5262:	10 92 93 17 	sts	0x1793, r1	; 0x801793 <i2c_task+0x1>
    5266:	10 92 95 17 	sts	0x1795, r1	; 0x801795 <i2c_task+0x3>
    526a:	8f bf       	out	0x3f, r24	; 63
    526c:	08 95       	ret

0000526e <i2c_task_op_add>:
    526e:	ef 92       	push	r14
    5270:	ff 92       	push	r15
    5272:	0f 93       	push	r16
    5274:	1f 93       	push	r17
    5276:	cf 93       	push	r28
    5278:	df 93       	push	r29
    527a:	d8 2f       	mov	r29, r24
    527c:	c6 2f       	mov	r28, r22
    527e:	7a 01       	movw	r14, r20
    5280:	02 2f       	mov	r16, r18
    5282:	1f b7       	in	r17, 0x3f	; 63
    5284:	6a e0       	ldi	r22, 0x0A	; 10
    5286:	70 e0       	ldi	r23, 0x00	; 0
    5288:	81 e0       	ldi	r24, 0x01	; 1
    528a:	90 e0       	ldi	r25, 0x00	; 0
    528c:	a9 db       	rcall	.-2222   	; 0x49e0 <safecalloc>
    528e:	fc 01       	movw	r30, r24
    5290:	89 2b       	or	r24, r25
    5292:	89 f0       	breq	.+34     	; 0x52b6 <i2c_task_op_add+0x48>
    5294:	f8 94       	cli
    5296:	11 82       	std	Z+1, r1	; 0x01
    5298:	12 82       	std	Z+2, r1	; 0x02
    529a:	dd 0f       	add	r29, r29
    529c:	c1 70       	andi	r28, 0x01	; 1
    529e:	cd 2b       	or	r28, r29
    52a0:	c0 83       	st	Z, r28
    52a2:	84 e1       	ldi	r24, 0x14	; 20
    52a4:	90 e0       	ldi	r25, 0x00	; 0
    52a6:	95 83       	std	Z+5, r25	; 0x05
    52a8:	84 83       	std	Z+4, r24	; 0x04
    52aa:	13 82       	std	Z+3, r1	; 0x03
    52ac:	06 83       	std	Z+6, r16	; 0x06
    52ae:	17 82       	std	Z+7, r1	; 0x07
    52b0:	f1 86       	std	Z+9, r15	; 0x09
    52b2:	e0 86       	std	Z+8, r14	; 0x08
    52b4:	1f bf       	out	0x3f, r17	; 63
    52b6:	cf 01       	movw	r24, r30
    52b8:	cd b7       	in	r28, 0x3d	; 61
    52ba:	de b7       	in	r29, 0x3e	; 62
    52bc:	e6 e0       	ldi	r30, 0x06	; 6
    52be:	0c 94 00 e1 	jmp	0x1c200	; 0x1c200 <__epilogue_restores__+0x18>

000052c2 <i2c_init>:
    52c2:	cf 93       	push	r28
    52c4:	00 d0       	rcall	.+0      	; 0x52c6 <i2c_init+0x4>
    52c6:	1f 92       	push	r1
    52c8:	9b 01       	movw	r18, r22
    52ca:	ac 01       	movw	r20, r24
    52cc:	cf b7       	in	r28, 0x3f	; 63
    52ce:	60 e0       	ldi	r22, 0x00	; 0
    52d0:	7d e2       	ldi	r23, 0x2D	; 45
    52d2:	81 e3       	ldi	r24, 0x31	; 49
    52d4:	91 e0       	ldi	r25, 0x01	; 1
    52d6:	0e 94 6b e0 	call	0x1c0d6	; 0x1c0d6 <__udivmodsi4>
    52da:	da 01       	movw	r26, r20
    52dc:	c9 01       	movw	r24, r18
    52de:	40 97       	sbiw	r24, 0x10	; 16
    52e0:	a1 09       	sbc	r26, r1
    52e2:	b1 09       	sbc	r27, r1
    52e4:	ac 01       	movw	r20, r24
    52e6:	bd 01       	movw	r22, r26
    52e8:	76 95       	lsr	r23
    52ea:	67 95       	ror	r22
    52ec:	57 95       	ror	r21
    52ee:	47 95       	ror	r20
    52f0:	ca 01       	movw	r24, r20
    52f2:	88 27       	eor	r24, r24
    52f4:	89 2b       	or	r24, r25
    52f6:	59 f0       	breq	.+22     	; 0x530e <i2c_init+0x4c>
    52f8:	82 ef       	ldi	r24, 0xF2	; 242
    52fa:	93 e0       	ldi	r25, 0x03	; 3
    52fc:	a0 e0       	ldi	r26, 0x00	; 0
    52fe:	ed b7       	in	r30, 0x3d	; 61
    5300:	fe b7       	in	r31, 0x3e	; 62
    5302:	81 83       	std	Z+1, r24	; 0x01
    5304:	92 83       	std	Z+2, r25	; 0x02
    5306:	a3 83       	std	Z+3, r26	; 0x03
    5308:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    530c:	3a c0       	rjmp	.+116    	; 0x5382 <i2c_init+0xc0>
    530e:	f8 94       	cli
    5310:	40 93 b8 00 	sts	0x00B8, r20	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5314:	10 92 61 1a 	sts	0x1A61, r1	; 0x801a61 <i2c+0x1>
    5318:	81 e0       	ldi	r24, 0x01	; 1
    531a:	80 93 62 1a 	sts	0x1A62, r24	; 0x801a62 <i2c+0x2>
    531e:	10 92 92 17 	sts	0x1792, r1	; 0x801792 <i2c_task>
    5322:	80 93 94 17 	sts	0x1794, r24	; 0x801794 <i2c_task+0x2>
    5326:	40 9a       	sbi	0x08, 0	; 8
    5328:	41 9a       	sbi	0x08, 1	; 8
    532a:	84 e8       	ldi	r24, 0x84	; 132
    532c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5330:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    5334:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5338:	8c 7f       	andi	r24, 0xFC	; 252
    533a:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    533e:	80 91 71 17 	lds	r24, 0x1771	; 0x801771 <i2c_init_status>
    5342:	81 11       	cpse	r24, r1
    5344:	1d c0       	rjmp	.+58     	; 0x5380 <i2c_init+0xbe>
    5346:	e2 e7       	ldi	r30, 0x72	; 114
    5348:	f7 e1       	ldi	r31, 0x17	; 23
    534a:	11 92       	st	Z+, r1
    534c:	11 92       	st	Z+, r1
    534e:	27 e1       	ldi	r18, 0x17	; 23
    5350:	e2 39       	cpi	r30, 0x92	; 146
    5352:	f2 07       	cpc	r31, r18
    5354:	d1 f7       	brne	.-12     	; 0x534a <i2c_init+0x88>
    5356:	61 e0       	ldi	r22, 0x01	; 1
    5358:	70 e0       	ldi	r23, 0x00	; 0
    535a:	8d eb       	ldi	r24, 0xBD	; 189
    535c:	98 e2       	ldi	r25, 0x28	; 40
    535e:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <set_timers>
    5362:	01 96       	adiw	r24, 0x01	; 1
    5364:	51 f4       	brne	.+20     	; 0x537a <i2c_init+0xb8>
    5366:	8b ed       	ldi	r24, 0xDB	; 219
    5368:	93 e0       	ldi	r25, 0x03	; 3
    536a:	a0 e0       	ldi	r26, 0x00	; 0
    536c:	ed b7       	in	r30, 0x3d	; 61
    536e:	fe b7       	in	r31, 0x3e	; 62
    5370:	81 83       	std	Z+1, r24	; 0x01
    5372:	92 83       	std	Z+2, r25	; 0x02
    5374:	a3 83       	std	Z+3, r26	; 0x03
    5376:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    537a:	81 e0       	ldi	r24, 0x01	; 1
    537c:	80 93 71 17 	sts	0x1771, r24	; 0x801771 <i2c_init_status>
    5380:	cf bf       	out	0x3f, r28	; 63
    5382:	0f 90       	pop	r0
    5384:	0f 90       	pop	r0
    5386:	0f 90       	pop	r0
    5388:	cf 91       	pop	r28
    538a:	08 95       	ret

0000538c <i2c_done>:
///@brief Is i2c structure done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_done()
{
	delayus(1);
    538c:	61 e0       	ldi	r22, 0x01	; 1
    538e:	70 e0       	ldi	r23, 0x00	; 0
    5390:	80 e0       	ldi	r24, 0x00	; 0
    5392:	90 e0       	ldi	r25, 0x00	; 0
    5394:	a6 db       	rcall	.-2228   	; 0x4ae2 <delayus>
	if(!i2c.enable || i2c.done )
    5396:	80 91 61 1a 	lds	r24, 0x1A61	; 0x801a61 <i2c+0x1>
    539a:	88 23       	and	r24, r24
    539c:	39 f0       	breq	.+14     	; 0x53ac <i2c_done+0x20>
		return(1);
    539e:	81 e0       	ldi	r24, 0x01	; 1
    53a0:	90 91 62 1a 	lds	r25, 0x1A62	; 0x801a62 <i2c+0x2>
    53a4:	91 11       	cpse	r25, r1
    53a6:	03 c0       	rjmp	.+6      	; 0x53ae <i2c_done+0x22>
    53a8:	80 e0       	ldi	r24, 0x00	; 0
    53aa:	08 95       	ret
    53ac:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    53ae:	08 95       	ret

000053b0 <i2c_task_done>:
///@brief Are all i2c_task_op[] pointers done sending/receiving ?
///
/// @return  1 DONE, 0 NOT DONE
int8_t i2c_task_done()
{
	delayus(1);
    53b0:	61 e0       	ldi	r22, 0x01	; 1
    53b2:	70 e0       	ldi	r23, 0x00	; 0
    53b4:	80 e0       	ldi	r24, 0x00	; 0
    53b6:	90 e0       	ldi	r25, 0x00	; 0
    53b8:	94 db       	rcall	.-2264   	; 0x4ae2 <delayus>
	if(!i2c_task.enable || i2c_task.done )
    53ba:	80 91 92 17 	lds	r24, 0x1792	; 0x801792 <i2c_task>
    53be:	88 23       	and	r24, r24
    53c0:	39 f0       	breq	.+14     	; 0x53d0 <i2c_task_done+0x20>
		return(1);
    53c2:	81 e0       	ldi	r24, 0x01	; 1
    53c4:	90 91 94 17 	lds	r25, 0x1794	; 0x801794 <i2c_task+0x2>
    53c8:	91 11       	cpse	r25, r1
    53ca:	03 c0       	rjmp	.+6      	; 0x53d2 <i2c_task_done+0x22>
    53cc:	80 e0       	ldi	r24, 0x00	; 0
    53ce:	08 95       	ret
    53d0:	81 e0       	ldi	r24, 0x01	; 1
	return(0);
}
    53d2:	08 95       	ret

000053d4 <i2c_send_start>:
///@brief Send I2C START and enable interrupts
///
/// @return  void
void i2c_send_start()
{
	i2c.done = 0;
    53d4:	e0 e6       	ldi	r30, 0x60	; 96
    53d6:	fa e1       	ldi	r31, 0x1A	; 26
    53d8:	12 82       	std	Z+2, r1	; 0x02
	i2c.enable = 1;
    53da:	81 e0       	ldi	r24, 0x01	; 1
    53dc:	81 83       	std	Z+1, r24	; 0x01
	i2c.timeout = I2C_TIMEOUT;		// Start timeout timer
    53de:	84 e1       	ldi	r24, 0x14	; 20
    53e0:	90 e0       	ldi	r25, 0x00	; 0
    53e2:	95 83       	std	Z+5, r25	; 0x05
    53e4:	84 83       	std	Z+4, r24	; 0x04
	// Start a transactions
	// TWI Enable
	// TWI Interrupt Enable
	// TWI Interrupt Clear
	// TWI SEND RESTART
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    53e6:	85 ea       	ldi	r24, 0xA5	; 165
    53e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    53ec:	08 95       	ret

000053ee <i2c_task_run>:

/// @brief Run all valid i2c_task_op[] tasks
///
/// @return  void
void i2c_task_run()
{
    53ee:	ef 92       	push	r14
    53f0:	ff 92       	push	r15
    53f2:	0f 93       	push	r16
    53f4:	1f 93       	push	r17
    53f6:	cf 93       	push	r28
    53f8:	df 93       	push	r29
	uint8_t sreg = SREG;
    53fa:	ff b6       	in	r15, 0x3f	; 63
	i2c_op_t *o;
    uint8_t run = 0;
	int8_t i;


	cli();
    53fc:	f8 94       	cli
	i2c_task.done = 0;
    53fe:	10 92 94 17 	sts	0x1794, r1	; 0x801794 <i2c_task+0x2>
	i2c_task.error = 0;
    5402:	10 92 95 17 	sts	0x1795, r1	; 0x801795 <i2c_task+0x3>
	i2c_task.ind = 0;
    5406:	10 92 93 17 	sts	0x1793, r1	; 0x801793 <i2c_task+0x1>

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    540a:	c0 e0       	ldi	r28, 0x00	; 0
/// @return  void
void i2c_task_run()
{
	uint8_t sreg = SREG;
	i2c_op_t *o;
    uint8_t run = 0;
    540c:	d0 e0       	ldi	r29, 0x00	; 0

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
	{
		o = i2c_task_op[i];
		o->enable = 1;
    540e:	ee 24       	eor	r14, r14
    5410:	e3 94       	inc	r14
		o->done = 0;
		o->flags = 0;
		o->ind = 0;
		o->timeout = I2C_TIMEOUT;
    5412:	04 e1       	ldi	r16, 0x14	; 20
    5414:	10 e0       	ldi	r17, 0x00	; 0
	i2c_task.done = 0;
	i2c_task.error = 0;
	i2c_task.ind = 0;

	// re-enable tasks
	for(i=0;i2c_check_op(i);++i)
    5416:	8c 2f       	mov	r24, r28
    5418:	c6 de       	rcall	.-628    	; 0x51a6 <i2c_check_op>
    541a:	88 23       	and	r24, r24
    541c:	d1 f0       	breq	.+52     	; 0x5452 <i2c_task_run+0x64>
	{
		o = i2c_task_op[i];
    541e:	ec 2f       	mov	r30, r28
    5420:	ee 0f       	add	r30, r30
    5422:	ff 0b       	sbc	r31, r31
    5424:	ee 58       	subi	r30, 0x8E	; 142
    5426:	f8 4e       	sbci	r31, 0xE8	; 232
    5428:	01 90       	ld	r0, Z+
    542a:	f0 81       	ld	r31, Z
    542c:	e0 2d       	mov	r30, r0
		o->enable = 1;
    542e:	e1 82       	std	Z+1, r14	; 0x01
		o->done = 0;
    5430:	12 82       	std	Z+2, r1	; 0x02
		o->flags = 0;
    5432:	13 82       	std	Z+3, r1	; 0x03
		o->ind = 0;
    5434:	17 82       	std	Z+7, r1	; 0x07
		o->timeout = I2C_TIMEOUT;
    5436:	15 83       	std	Z+5, r17	; 0x05
    5438:	04 83       	std	Z+4, r16	; 0x04
		if(!run)
    543a:	d1 11       	cpse	r29, r1
    543c:	07 c0       	rjmp	.+14     	; 0x544c <i2c_task_run+0x5e>
		{
			run = 1;
			i2c = *o;
    543e:	8a e0       	ldi	r24, 0x0A	; 10
    5440:	a0 e6       	ldi	r26, 0x60	; 96
    5442:	ba e1       	ldi	r27, 0x1A	; 26
    5444:	01 90       	ld	r0, Z+
    5446:	0d 92       	st	X+, r0
    5448:	8a 95       	dec	r24
    544a:	e1 f7       	brne	.-8      	; 0x5444 <i2c_task_run+0x56>
    544c:	cf 5f       	subi	r28, 0xFF	; 255
    544e:	d1 e0       	ldi	r29, 0x01	; 1
    5450:	e2 cf       	rjmp	.-60     	; 0x5416 <i2c_task_run+0x28>
		}
	}

	if(run)
    5452:	dd 23       	and	r29, r29
    5454:	91 f0       	breq	.+36     	; 0x547a <i2c_task_run+0x8c>
	{
		// TASK callback
		i2c_callback = i2c_task_next_op;
    5456:	84 e9       	ldi	r24, 0x94	; 148
    5458:	9a e2       	ldi	r25, 0x2A	; 42
    545a:	90 93 97 17 	sts	0x1797, r25	; 0x801797 <i2c_callback+0x1>
    545e:	80 93 96 17 	sts	0x1796, r24	; 0x801796 <i2c_callback>

		i2c_task.enable = 1;
    5462:	81 e0       	ldi	r24, 0x01	; 1
    5464:	80 93 92 17 	sts	0x1792, r24	; 0x801792 <i2c_task>
		i2c_task.done = 0;
    5468:	10 92 94 17 	sts	0x1794, r1	; 0x801794 <i2c_task+0x2>

        // Reset Status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    546c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5470:	8c 7f       	andi	r24, 0xFC	; 252
    5472:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // TWI Interrupt Clear
        // TWI SEND RESTART
        // TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
        // Disable Slave Mode

		i2c_send_start();
    5476:	ae df       	rcall	.-164    	; 0x53d4 <i2c_send_start>
    5478:	15 c0       	rjmp	.+42     	; 0x54a4 <i2c_task_run+0xb6>
        // FIXME we should notify the user ?
		// Nothing to DO
		// User Error

		// TASK callback
		i2c_callback = NULL;
    547a:	10 92 97 17 	sts	0x1797, r1	; 0x801797 <i2c_callback+0x1>
    547e:	10 92 96 17 	sts	0x1796, r1	; 0x801796 <i2c_callback>

		// TASK Nothing to DO
		i2c_task.enable = 0;
    5482:	10 92 92 17 	sts	0x1792, r1	; 0x801792 <i2c_task>
		i2c_task.done = 1;
    5486:	81 e0       	ldi	r24, 0x01	; 1
    5488:	80 93 94 17 	sts	0x1794, r24	; 0x801794 <i2c_task+0x2>

		// I2C Nothing to do
        i2c.done = 1;
    548c:	80 93 62 1a 	sts	0x1A62, r24	; 0x801a62 <i2c+0x2>
        i2c.enable = 0;
    5490:	10 92 61 1a 	sts	0x1A61, r1	; 0x801a61 <i2c+0x1>

        // TWI Enable
        // TWI Disable Enable
        // TWI Interrupt Clear
        TWCR = _BV(TWEN) | _BV(TWINT);
    5494:	84 e8       	ldi	r24, 0x84	; 132
    5496:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
        // Reset status
        TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    549a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    549e:	8c 7f       	andi	r24, 0xFC	; 252
    54a0:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
        // Disable Slave Mode
        TWAR = 0;
    54a4:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	}
	// Disable Slave Mode

	SREG = sreg;
    54a8:	ff be       	out	0x3f, r15	; 63

}
    54aa:	cd b7       	in	r28, 0x3d	; 61
    54ac:	de b7       	in	r29, 0x3e	; 62
    54ae:	e6 e0       	ldi	r30, 0x06	; 6
    54b0:	0c 94 00 e1 	jmp	0x1c200	; 0x1c200 <__epilogue_restores__+0x18>

000054b4 <i2c_fn>:
/// @param[in] *buf: pointer to buffer for send or receive
/// @param[in] len: size of buffer to read or write
/// @return  1 = OK, 0 = ERROR
uint8_t i2c_fn(uint8_t address, uint8_t mode, uint8_t *buf, uint8_t len)
{
	uint8_t sreg = SREG;
    54b4:	9f b7       	in	r25, 0x3f	; 63
	
    cli();
    54b6:	f8 94       	cli

	// sign task only
	i2c_callback = NULL;
    54b8:	10 92 97 17 	sts	0x1797, r1	; 0x801797 <i2c_callback+0x1>
    54bc:	10 92 96 17 	sts	0x1796, r1	; 0x801796 <i2c_callback>

	i2c.enable = 1; // Enabled
    54c0:	31 e0       	ldi	r19, 0x01	; 1
    54c2:	30 93 61 1a 	sts	0x1A61, r19	; 0x801a61 <i2c+0x1>
	i2c.done = 0;
    54c6:	10 92 62 1a 	sts	0x1A62, r1	; 0x801a62 <i2c+0x2>
    i2c.address = (address << 1) | (mode & 1);
    54ca:	88 0f       	add	r24, r24
    54cc:	61 70       	andi	r22, 0x01	; 1
    54ce:	68 2b       	or	r22, r24
    54d0:	60 93 60 1a 	sts	0x1A60, r22	; 0x801a60 <i2c>
	i2c.flags = 0;
    54d4:	10 92 63 1a 	sts	0x1A63, r1	; 0x801a63 <i2c+0x3>
    i2c.len = len;
    54d8:	20 93 66 1a 	sts	0x1A66, r18	; 0x801a66 <i2c+0x6>
    i2c.ind = 0;
    54dc:	10 92 67 1a 	sts	0x1A67, r1	; 0x801a67 <i2c+0x7>
    i2c.buf = buf;
    54e0:	50 93 69 1a 	sts	0x1A69, r21	; 0x801a69 <i2c+0x9>
    54e4:	40 93 68 1a 	sts	0x1A68, r20	; 0x801a68 <i2c+0x8>

	// Reset Status
	TWSR &= ~(_BV(TWPS0) | _BV(TWPS1));
    54e8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    54ec:	8c 7f       	andi	r24, 0xFC	; 252
    54ee:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Disable Slave Mode
	TWAR = 0;
    54f2:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>

	SREG = sreg;
    54f6:	9f bf       	out	0x3f, r25	; 63

	i2c_send_start();
    54f8:	6d df       	rcall	.-294    	; 0x53d4 <i2c_send_start>
	{
		printf("timeout: %d\r",(int)i2c.timeout);
	}
	printf("\n");
#else
	while(! i2c_done() )
    54fa:	48 df       	rcall	.-368    	; 0x538c <i2c_done>
    54fc:	88 23       	and	r24, r24
    54fe:	e9 f3       	breq	.-6      	; 0x54fa <i2c_fn+0x46>
    5500:	81 e0       	ldi	r24, 0x01	; 1
		;
#endif
	return( i2c.flags ? 0 : 1);
    5502:	90 91 63 1a 	lds	r25, 0x1A63	; 0x801a63 <i2c+0x3>
    5506:	91 11       	cpse	r25, r1
    5508:	80 e0       	ldi	r24, 0x00	; 0
    550a:	08 95       	ret

0000550c <i2c_send_stop>:
}
    550c:	e0 e6       	ldi	r30, 0x60	; 96
///
/// @return  void
void i2c_send_stop()
{
    // All transactions are done
    i2c.done = 1;
    550e:	fa e1       	ldi	r31, 0x1A	; 26
    5510:	81 e0       	ldi	r24, 0x01	; 1
    5512:	82 83       	std	Z+2, r24	; 0x02
    i2c.enable = 0;
    5514:	11 82       	std	Z+1, r1	; 0x01
    // We are DONE
    // TWI Enable
    // TWI Interrupt Disable
    // TWI Interrupt Clear
    // TWI SEND STOP
    TWCR = _BV(TWEN) | _BV(TWINT) | _BV(TWSTO);
    5516:	84 e9       	ldi	r24, 0x94	; 148
    5518:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	delayus(10);
    551c:	6a e0       	ldi	r22, 0x0A	; 10
    551e:	70 e0       	ldi	r23, 0x00	; 0
    5520:	80 e0       	ldi	r24, 0x00	; 0
    5522:	90 e0       	ldi	r25, 0x00	; 0
    5524:	de ca       	rjmp	.-2628   	; 0x4ae2 <delayus>
    5526:	08 95       	ret

00005528 <i2c_task_next_op>:

///@brief I2C task ISR callback function
///
/// @return  void
int8_t i2c_task_next_op()
{
    5528:	cf 93       	push	r28
    552a:	df 93       	push	r29
	i2c_op_t *o;

	// NOTE: we are in an ISR do not disable other interrupts

	if(i2c_task.enable)
    552c:	80 91 92 17 	lds	r24, 0x1792	; 0x801792 <i2c_task>
    5530:	88 23       	and	r24, r24
    5532:	09 f4       	brne	.+2      	; 0x5536 <i2c_task_next_op+0xe>
    5534:	46 c0       	rjmp	.+140    	; 0x55c2 <i2c_task_next_op+0x9a>
	{
		// Save state of LAST operation
		if(i2c_check_op(i2c_task.ind) )
    5536:	80 91 93 17 	lds	r24, 0x1793	; 0x801793 <i2c_task+0x1>
    553a:	35 de       	rcall	.-918    	; 0x51a6 <i2c_check_op>
    553c:	88 23       	and	r24, r24
    553e:	b1 f0       	breq	.+44     	; 0x556c <i2c_task_next_op+0x44>
		{
			o = i2c_task_op[i2c_task.ind];
    5540:	e0 91 93 17 	lds	r30, 0x1793	; 0x801793 <i2c_task+0x1>
    5544:	ee 0f       	add	r30, r30
    5546:	ff 0b       	sbc	r31, r31
    5548:	ee 58       	subi	r30, 0x8E	; 142
    554a:	f8 4e       	sbci	r31, 0xE8	; 232
    554c:	c0 81       	ld	r28, Z
    554e:	d1 81       	ldd	r29, Z+1	; 0x01
			// Save state in last opperation
			*o = i2c;
    5550:	8a e0       	ldi	r24, 0x0A	; 10
    5552:	e0 e6       	ldi	r30, 0x60	; 96
    5554:	fa e1       	ldi	r31, 0x1A	; 26
    5556:	de 01       	movw	r26, r28
    5558:	01 90       	ld	r0, Z+
    555a:	0d 92       	st	X+, r0
    555c:	8a 95       	dec	r24
    555e:	e1 f7       	brne	.-8      	; 0x5558 <i2c_task_next_op+0x30>
			if(o->flags)
    5560:	8b 81       	ldd	r24, Y+3	; 0x03
    5562:	88 23       	and	r24, r24
    5564:	19 f0       	breq	.+6      	; 0x556c <i2c_task_next_op+0x44>
				i2c_task.error = 1;
    5566:	81 e0       	ldi	r24, 0x01	; 1
    5568:	80 93 95 17 	sts	0x1795, r24	; 0x801795 <i2c_task+0x3>
		}

		if(i2c_check_op(i2c_task.ind+1) )
    556c:	80 91 93 17 	lds	r24, 0x1793	; 0x801793 <i2c_task+0x1>
    5570:	8f 5f       	subi	r24, 0xFF	; 255
    5572:	19 de       	rcall	.-974    	; 0x51a6 <i2c_check_op>
    5574:	88 23       	and	r24, r24
    5576:	29 f1       	breq	.+74     	; 0x55c2 <i2c_task_next_op+0x9a>
		{
			i2c_task.ind++;
    5578:	e0 91 93 17 	lds	r30, 0x1793	; 0x801793 <i2c_task+0x1>
    557c:	ef 5f       	subi	r30, 0xFF	; 255
    557e:	e0 93 93 17 	sts	0x1793, r30	; 0x801793 <i2c_task+0x1>

			o = i2c_task_op[i2c_task.ind];
    5582:	ee 0f       	add	r30, r30
    5584:	ff 0b       	sbc	r31, r31
    5586:	ee 58       	subi	r30, 0x8E	; 142
    5588:	f8 4e       	sbci	r31, 0xE8	; 232
    558a:	01 90       	ld	r0, Z+
    558c:	f0 81       	ld	r31, Z
    558e:	e0 2d       	mov	r30, r0

			if( o->enable == 1 || o->done == 0)
    5590:	81 81       	ldd	r24, Z+1	; 0x01
    5592:	81 30       	cpi	r24, 0x01	; 1
    5594:	19 f0       	breq	.+6      	; 0x559c <i2c_task_next_op+0x74>
    5596:	82 81       	ldd	r24, Z+2	; 0x02
    5598:	81 11       	cpse	r24, r1
    559a:	13 c0       	rjmp	.+38     	; 0x55c2 <i2c_task_next_op+0x9a>
			{
				o->timeout = I2C_TIMEOUT;
    559c:	84 e1       	ldi	r24, 0x14	; 20
    559e:	90 e0       	ldi	r25, 0x00	; 0
    55a0:	95 83       	std	Z+5, r25	; 0x05
    55a2:	84 83       	std	Z+4, r24	; 0x04
				o->flags = 0;
    55a4:	13 82       	std	Z+3, r1	; 0x03
				o->ind = 0;
    55a6:	17 82       	std	Z+7, r1	; 0x07
				o->enable = 1;
    55a8:	81 e0       	ldi	r24, 0x01	; 1
    55aa:	81 83       	std	Z+1, r24	; 0x01
				o->done = 0;
    55ac:	12 82       	std	Z+2, r1	; 0x02

				i2c = *o;
    55ae:	8a e0       	ldi	r24, 0x0A	; 10
    55b0:	a0 e6       	ldi	r26, 0x60	; 96
    55b2:	ba e1       	ldi	r27, 0x1A	; 26
    55b4:	01 90       	ld	r0, Z+
    55b6:	0d 92       	st	X+, r0
    55b8:	8a 95       	dec	r24

				i2c_send_start();
    55ba:	e1 f7       	brne	.-8      	; 0x55b4 <i2c_task_next_op+0x8c>
    55bc:	0b df       	rcall	.-490    	; 0x53d4 <i2c_send_start>

				return(1);
    55be:	81 e0       	ldi	r24, 0x01	; 1
    55c0:	0f c0       	rjmp	.+30     	; 0x55e0 <i2c_task_next_op+0xb8>
			}
		}
	}
	// program error
	// Disable TASK
	i2c_task.enable = 0;
    55c2:	10 92 92 17 	sts	0x1792, r1	; 0x801792 <i2c_task>
	i2c_task.done = 1;
    55c6:	81 e0       	ldi	r24, 0x01	; 1
    55c8:	80 93 94 17 	sts	0x1794, r24	; 0x801794 <i2c_task+0x2>

	// I2C disable
	i2c.done = 1;
    55cc:	80 93 62 1a 	sts	0x1A62, r24	; 0x801a62 <i2c+0x2>
	i2c.enable = 0;
    55d0:	10 92 61 1a 	sts	0x1A61, r1	; 0x801a61 <i2c+0x1>
	i2c.flags = 0;
    55d4:	10 92 63 1a 	sts	0x1A63, r1	; 0x801a63 <i2c+0x3>
	i2c.ind = 0;
    55d8:	10 92 67 1a 	sts	0x1A67, r1	; 0x801a67 <i2c+0x7>

	i2c_send_stop();
    55dc:	97 df       	rcall	.-210    	; 0x550c <i2c_send_stop>

	return(0);
    55de:	80 e0       	ldi	r24, 0x00	; 0
}
    55e0:	df 91       	pop	r29
    55e2:	cf 91       	pop	r28
    55e4:	08 95       	ret

000055e6 <i2c_next>:
{

	// IF we have an i2c_callback() function then
	// it must save status and reset i2c structure for next operation

	if(i2c_callback)
    55e6:	e0 91 96 17 	lds	r30, 0x1796	; 0x801796 <i2c_callback>
    55ea:	f0 91 97 17 	lds	r31, 0x1797	; 0x801797 <i2c_callback+0x1>
    55ee:	30 97       	sbiw	r30, 0x00	; 0
    55f0:	11 f0       	breq	.+4      	; 0x55f6 <i2c_next+0x10>
	    i2c_callback();
    55f2:	09 95       	icall
    55f4:	08 95       	ret
	else
		i2c_send_stop();
    55f6:	8a cf       	rjmp	.-236    	; 0x550c <i2c_send_stop>
    55f8:	08 95       	ret

000055fa <__vector_26>:

///@brief I2C ISR for send/receive
///
/// @return  void
ISR(TWI_vect)
{
    55fa:	1f 92       	push	r1
    55fc:	0f 92       	push	r0
    55fe:	0f b6       	in	r0, 0x3f	; 63
    5600:	0f 92       	push	r0
    5602:	11 24       	eor	r1, r1
    5604:	0b b6       	in	r0, 0x3b	; 59
    5606:	0f 92       	push	r0
    5608:	2f 93       	push	r18
    560a:	3f 93       	push	r19
    560c:	4f 93       	push	r20
    560e:	5f 93       	push	r21
    5610:	6f 93       	push	r22
    5612:	7f 93       	push	r23
    5614:	8f 93       	push	r24
    5616:	9f 93       	push	r25
    5618:	af 93       	push	r26
    561a:	bf 93       	push	r27
    561c:	ef 93       	push	r30
    561e:	ff 93       	push	r31
	// FYI: reading TWSR clears the status
	// twi.h defines TW_STATUS
    // #define TW_STATUS (TWSR & TW_STATUS_MASK)
    uint8_t status = TW_STATUS;	
    5620:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>

	// Are we Enabled to Receive/Send ?
	// Are we Done ?
	// Program errors - these should not happen
	if(!i2c.enable || i2c.done || !i2c.buf || !i2c.len )
    5624:	90 91 61 1a 	lds	r25, 0x1A61	; 0x801a61 <i2c+0x1>
    5628:	99 23       	and	r25, r25
    562a:	09 f1       	breq	.+66     	; 0x566e <__vector_26+0x74>
    562c:	90 91 62 1a 	lds	r25, 0x1A62	; 0x801a62 <i2c+0x2>
    5630:	91 11       	cpse	r25, r1
    5632:	1d c0       	rjmp	.+58     	; 0x566e <__vector_26+0x74>
    5634:	20 91 68 1a 	lds	r18, 0x1A68	; 0x801a68 <i2c+0x8>
    5638:	30 91 69 1a 	lds	r19, 0x1A69	; 0x801a69 <i2c+0x9>
    563c:	21 15       	cp	r18, r1
    563e:	31 05       	cpc	r19, r1
    5640:	b1 f0       	breq	.+44     	; 0x566e <__vector_26+0x74>
    5642:	90 91 66 1a 	lds	r25, 0x1A66	; 0x801a66 <i2c+0x6>
    5646:	99 23       	and	r25, r25
    5648:	91 f0       	breq	.+36     	; 0x566e <__vector_26+0x74>
		i2c_send_stop();
		return;
	}

	// TUMEOUT ? STOP everything
	if(i2c.timeout == 0)
    564a:	40 91 64 1a 	lds	r20, 0x1A64	; 0x801a64 <i2c+0x4>
    564e:	50 91 65 1a 	lds	r21, 0x1A65	; 0x801a65 <i2c+0x5>
    5652:	45 2b       	or	r20, r21
    5654:	71 f4       	brne	.+28     	; 0x5672 <__vector_26+0x78>
	{
		i2c.flags |= (I2C_OP_TIMEOUT);
    5656:	80 91 63 1a 	lds	r24, 0x1A63	; 0x801a63 <i2c+0x3>
    565a:	81 60       	ori	r24, 0x01	; 1
    565c:	80 93 63 1a 	sts	0x1A63, r24	; 0x801a63 <i2c+0x3>
		i2c_task.enable = 0;
    5660:	10 92 92 17 	sts	0x1792, r1	; 0x801792 <i2c_task>
		i2c_task.done = 1;
    5664:	81 e0       	ldi	r24, 0x01	; 1
    5666:	80 93 94 17 	sts	0x1794, r24	; 0x801794 <i2c_task+0x2>
		i2c_task.error = 1;
    566a:	80 93 95 17 	sts	0x1795, r24	; 0x801795 <i2c_task+0x3>
		i2c_send_stop();
    566e:	4e df       	rcall	.-356    	; 0x550c <i2c_send_stop>
		return;
    5670:	9b c0       	rjmp	.+310    	; 0x57a8 <__vector_26+0x1ae>
	}

	// Master Receiver mode
	switch (status)
    5672:	88 7f       	andi	r24, 0xF8	; 248
    5674:	80 33       	cpi	r24, 0x30	; 48
    5676:	09 f4       	brne	.+2      	; 0x567a <__vector_26+0x80>
    5678:	83 c0       	rjmp	.+262    	; 0x5780 <__vector_26+0x186>
    567a:	70 f4       	brcc	.+28     	; 0x5698 <__vector_26+0x9e>
    567c:	88 31       	cpi	r24, 0x18	; 24
    567e:	09 f1       	breq	.+66     	; 0x56c2 <__vector_26+0xc8>
    5680:	28 f4       	brcc	.+10     	; 0x568c <__vector_26+0x92>
    5682:	88 30       	cpi	r24, 0x08	; 8
    5684:	c9 f0       	breq	.+50     	; 0x56b8 <__vector_26+0xbe>
    5686:	80 31       	cpi	r24, 0x10	; 16
    5688:	b9 f0       	breq	.+46     	; 0x56b8 <__vector_26+0xbe>
    568a:	83 c0       	rjmp	.+262    	; 0x5792 <__vector_26+0x198>
    568c:	80 32       	cpi	r24, 0x20	; 32
    568e:	09 f4       	brne	.+2      	; 0x5692 <__vector_26+0x98>
    5690:	65 c0       	rjmp	.+202    	; 0x575c <__vector_26+0x162>
    5692:	88 32       	cpi	r24, 0x28	; 40
    5694:	b1 f0       	breq	.+44     	; 0x56c2 <__vector_26+0xc8>
    5696:	7d c0       	rjmp	.+250    	; 0x5792 <__vector_26+0x198>
    5698:	88 34       	cpi	r24, 0x48	; 72
    569a:	09 f4       	brne	.+2      	; 0x569e <__vector_26+0xa4>
    569c:	68 c0       	rjmp	.+208    	; 0x576e <__vector_26+0x174>
    569e:	38 f4       	brcc	.+14     	; 0x56ae <__vector_26+0xb4>
    56a0:	88 33       	cpi	r24, 0x38	; 56
    56a2:	09 f4       	brne	.+2      	; 0x56a6 <__vector_26+0xac>
    56a4:	57 c0       	rjmp	.+174    	; 0x5754 <__vector_26+0x15a>
    56a6:	80 34       	cpi	r24, 0x40	; 64
    56a8:	09 f4       	brne	.+2      	; 0x56ac <__vector_26+0xb2>
    56aa:	42 c0       	rjmp	.+132    	; 0x5730 <__vector_26+0x136>
    56ac:	72 c0       	rjmp	.+228    	; 0x5792 <__vector_26+0x198>
    56ae:	80 35       	cpi	r24, 0x50	; 80
    56b0:	79 f1       	breq	.+94     	; 0x5710 <__vector_26+0x116>
    56b2:	88 35       	cpi	r24, 0x58	; 88
    56b4:	b9 f0       	breq	.+46     	; 0x56e4 <__vector_26+0xea>
    56b6:	6d c0       	rjmp	.+218    	; 0x5792 <__vector_26+0x198>
	{
		case TW_START:		// START has been transmitted
		case TW_REP_START:  // RE-START has been transmitted
			i2c.ind = 0;
    56b8:	10 92 67 1a 	sts	0x1A67, r1	; 0x801a67 <i2c+0x7>
			TWDR = i2c.address;
    56bc:	80 91 60 1a 	lds	r24, 0x1A60	; 0x801a60 <i2c>
    56c0:	0e c0       	rjmp	.+28     	; 0x56de <__vector_26+0xe4>
			break;


		case TW_MT_SLA_ACK:	// SLA+W trasnmitted and ACK received
		case TW_MT_DATA_ACK:// Data trasnmitted and ACK received
			if (i2c.ind < i2c.len)
    56c2:	80 91 67 1a 	lds	r24, 0x1A67	; 0x801a67 <i2c+0x7>
    56c6:	89 17       	cp	r24, r25
    56c8:	ec f4       	brge	.+58     	; 0x5704 <__vector_26+0x10a>
			{
				TWDR = i2c.buf[i2c.ind++];
    56ca:	91 e0       	ldi	r25, 0x01	; 1
    56cc:	98 0f       	add	r25, r24
    56ce:	90 93 67 1a 	sts	0x1A67, r25	; 0x801a67 <i2c+0x7>
    56d2:	f9 01       	movw	r30, r18
    56d4:	e8 0f       	add	r30, r24
    56d6:	f1 1d       	adc	r31, r1
    56d8:	87 fd       	sbrc	r24, 7
    56da:	fa 95       	dec	r31
    56dc:	80 81       	ld	r24, Z
    56de:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    56e2:	36 c0       	rjmp	.+108    	; 0x5750 <__vector_26+0x156>
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			break;

		case TW_MR_DATA_NACK:	// Data received NACK transmitted
			if(i2c.ind < i2c.len)
    56e4:	80 91 67 1a 	lds	r24, 0x1A67	; 0x801a67 <i2c+0x7>
    56e8:	89 17       	cp	r24, r25
    56ea:	64 f4       	brge	.+24     	; 0x5704 <__vector_26+0x10a>
				i2c.buf[i2c.ind++] = TWDR;
    56ec:	91 e0       	ldi	r25, 0x01	; 1
    56ee:	98 0f       	add	r25, r24
    56f0:	90 93 67 1a 	sts	0x1A67, r25	; 0x801a67 <i2c+0x7>
    56f4:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    56f8:	f9 01       	movw	r30, r18
    56fa:	e8 0f       	add	r30, r24
    56fc:	f1 1d       	adc	r31, r1
    56fe:	87 fd       	sbrc	r24, 7
    5700:	fa 95       	dec	r31
    5702:	90 83       	st	Z, r25
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
			}
			else
			{
				// Done
				i2c.done = 1;
    5704:	81 e0       	ldi	r24, 0x01	; 1
    5706:	80 93 62 1a 	sts	0x1A62, r24	; 0x801a62 <i2c+0x2>
				i2c.enable = 0;
    570a:	10 92 61 1a 	sts	0x1A61, r1	; 0x801a61 <i2c+0x1>
    570e:	4b c0       	rjmp	.+150    	; 0x57a6 <__vector_26+0x1ac>
				i2c_next();
			}
			break;

		case TW_MR_DATA_ACK:	// Data received ACK transmitted
			if(i2c.ind < i2c.len)
    5710:	80 91 67 1a 	lds	r24, 0x1A67	; 0x801a67 <i2c+0x7>
    5714:	89 17       	cp	r24, r25
    5716:	64 f4       	brge	.+24     	; 0x5730 <__vector_26+0x136>
				i2c.buf[i2c.ind++] = TWDR;
    5718:	91 e0       	ldi	r25, 0x01	; 1
    571a:	98 0f       	add	r25, r24
    571c:	90 93 67 1a 	sts	0x1A67, r25	; 0x801a67 <i2c+0x7>
    5720:	90 91 bb 00 	lds	r25, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5724:	f9 01       	movw	r30, r18
    5726:	e8 0f       	add	r30, r24
    5728:	f1 1d       	adc	r31, r1
    572a:	87 fd       	sbrc	r24, 7
    572c:	fa 95       	dec	r31
    572e:	90 83       	st	Z, r25
		case TW_MR_SLA_ACK:		// SLA+R transmitted ACK received
			if ((i2c.ind+1) < i2c.len)
    5730:	80 91 67 1a 	lds	r24, 0x1A67	; 0x801a67 <i2c+0x7>
    5734:	08 2e       	mov	r0, r24
    5736:	00 0c       	add	r0, r0
    5738:	99 0b       	sbc	r25, r25
    573a:	01 96       	adiw	r24, 0x01	; 1
    573c:	20 91 66 1a 	lds	r18, 0x1A66	; 0x801a66 <i2c+0x6>
    5740:	02 2e       	mov	r0, r18
    5742:	00 0c       	add	r0, r0
    5744:	33 0b       	sbc	r19, r19
    5746:	82 17       	cp	r24, r18
    5748:	93 07       	cpc	r25, r19
    574a:	14 f4       	brge	.+4      	; 0x5750 <__vector_26+0x156>
			{
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND ACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    574c:	85 ec       	ldi	r24, 0xC5	; 197
    574e:	03 c0       	rjmp	.+6      	; 0x5756 <__vector_26+0x15c>
				// LAST BYTE
				// TWI Enable
				// TWI Interrupt Enable
				// TWI Interrupt Clear
				// SEND NACK after receive
				TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5750:	85 e8       	ldi	r24, 0x85	; 133
    5752:	01 c0       	rjmp	.+2      	; 0x5756 <__vector_26+0x15c>
		case TW_ARB_LOST:
			// TWI Enable
			// TWI Interrupt Enable
			// TWI Interrupt Clear
			// TWI SEND RESTART
			TWCR = _BV(TWEN) |  _BV(TWIE) | _BV(TWINT) | _BV(TWSTA);
    5754:	85 ea       	ldi	r24, 0xA5	; 165
    5756:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;
    575a:	26 c0       	rjmp	.+76     	; 0x57a8 <__vector_26+0x1ae>

// Error cases
		case TW_MT_SLA_NACK:	// SLA+W transmitted NACK received
			i2c.done = 1;
    575c:	81 e0       	ldi	r24, 0x01	; 1
    575e:	80 93 62 1a 	sts	0x1A62, r24	; 0x801a62 <i2c+0x2>
			i2c.enable = 0;
    5762:	10 92 61 1a 	sts	0x1A61, r1	; 0x801a61 <i2c+0x1>
			i2c.flags |= I2C_TW_MT_SLA_NACK;
    5766:	80 91 63 1a 	lds	r24, 0x1A63	; 0x801a63 <i2c+0x3>
    576a:	88 60       	ori	r24, 0x08	; 8
    576c:	1a c0       	rjmp	.+52     	; 0x57a2 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MR_SLA_NACK:	// SLA+R transmitted NACK received
			i2c.done = 1;
    576e:	81 e0       	ldi	r24, 0x01	; 1
    5770:	80 93 62 1a 	sts	0x1A62, r24	; 0x801a62 <i2c+0x2>
			i2c.enable = 0;
    5774:	10 92 61 1a 	sts	0x1A61, r1	; 0x801a61 <i2c+0x1>
			i2c.flags |= I2C_TW_MR_SLA_NACK;
    5778:	80 91 63 1a 	lds	r24, 0x1A63	; 0x801a63 <i2c+0x3>
    577c:	80 61       	ori	r24, 0x10	; 16
    577e:	11 c0       	rjmp	.+34     	; 0x57a2 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		case TW_MT_DATA_NACK:	// Data Transmitted NACK received
			i2c.done = 1;
    5780:	81 e0       	ldi	r24, 0x01	; 1
    5782:	80 93 62 1a 	sts	0x1A62, r24	; 0x801a62 <i2c+0x2>
			i2c.enable = 0;
    5786:	10 92 61 1a 	sts	0x1A61, r1	; 0x801a61 <i2c+0x1>
			i2c.flags |= I2C_TW_MT_DATA_NACK;
    578a:	80 91 63 1a 	lds	r24, 0x1A63	; 0x801a63 <i2c+0x3>
    578e:	80 62       	ori	r24, 0x20	; 32
    5790:	08 c0       	rjmp	.+16     	; 0x57a2 <__vector_26+0x1a8>
			// ERROR
			i2c_next();
			break;

		default:				// Error
			i2c.done = 1;
    5792:	81 e0       	ldi	r24, 0x01	; 1
    5794:	80 93 62 1a 	sts	0x1A62, r24	; 0x801a62 <i2c+0x2>
			i2c.enable = 0;
    5798:	10 92 61 1a 	sts	0x1A61, r1	; 0x801a61 <i2c+0x1>
			// ERROR
			i2c.flags |= I2C_BUS_ERROR;
    579c:	80 91 63 1a 	lds	r24, 0x1A63	; 0x801a63 <i2c+0x3>
    57a0:	80 64       	ori	r24, 0x40	; 64
    57a2:	80 93 63 1a 	sts	0x1A63, r24	; 0x801a63 <i2c+0x3>
			i2c_next();
    57a6:	1f df       	rcall	.-450    	; 0x55e6 <i2c_next>
			break;
	}
}
    57a8:	ff 91       	pop	r31
    57aa:	ef 91       	pop	r30
    57ac:	bf 91       	pop	r27
    57ae:	af 91       	pop	r26
    57b0:	9f 91       	pop	r25
    57b2:	8f 91       	pop	r24
    57b4:	7f 91       	pop	r23
    57b6:	6f 91       	pop	r22
    57b8:	5f 91       	pop	r21
    57ba:	4f 91       	pop	r20
    57bc:	3f 91       	pop	r19
    57be:	2f 91       	pop	r18
    57c0:	0f 90       	pop	r0
    57c2:	0b be       	out	0x3b, r0	; 59
    57c4:	0f 90       	pop	r0
    57c6:	0f be       	out	0x3f, r0	; 63
    57c8:	0f 90       	pop	r0
    57ca:	1f 90       	pop	r1
    57cc:	18 95       	reti

000057ce <i2c_print_error>:
/// @brief Display Errors for i2c_task_op[index]
///
/// @param[in] index: index of i2c_task_op[] array
/// @return  void
void i2c_print_error(i2c_op_t *o)
{
    57ce:	cf 93       	push	r28
    57d0:	00 d0       	rcall	.+0      	; 0x57d2 <i2c_print_error+0x4>
    57d2:	00 d0       	rcall	.+0      	; 0x57d4 <i2c_print_error+0x6>
    57d4:	1f 92       	push	r1
    int flags = o->flags;
    57d6:	fc 01       	movw	r30, r24
    57d8:	c3 81       	ldd	r28, Z+3	; 0x03

	if(flags)
    57da:	cc 23       	and	r28, r28
    57dc:	09 f4       	brne	.+2      	; 0x57e0 <i2c_print_error+0x12>
    57de:	67 c0       	rjmp	.+206    	; 0x58ae <i2c_print_error+0xe0>
	{
		printf("  %s\n", (i2c.done ? "DONE" : "ACTIVE") );
    57e0:	80 91 62 1a 	lds	r24, 0x1A62	; 0x801a62 <i2c+0x2>
    57e4:	81 11       	cpse	r24, r1
    57e6:	03 c0       	rjmp	.+6      	; 0x57ee <i2c_print_error+0x20>
    57e8:	88 e2       	ldi	r24, 0x28	; 40
    57ea:	93 e0       	ldi	r25, 0x03	; 3
    57ec:	02 c0       	rjmp	.+4      	; 0x57f2 <i2c_print_error+0x24>
    57ee:	83 e2       	ldi	r24, 0x23	; 35
    57f0:	93 e0       	ldi	r25, 0x03	; 3
    57f2:	ed b7       	in	r30, 0x3d	; 61
    57f4:	fe b7       	in	r31, 0x3e	; 62
    57f6:	95 83       	std	Z+5, r25	; 0x05
    57f8:	84 83       	std	Z+4, r24	; 0x04
    57fa:	85 ed       	ldi	r24, 0xD5	; 213
    57fc:	93 e0       	ldi	r25, 0x03	; 3
    57fe:	a0 e0       	ldi	r26, 0x00	; 0
    5800:	81 83       	std	Z+1, r24	; 0x01
    5802:	92 83       	std	Z+2, r25	; 0x02
    5804:	a3 83       	std	Z+3, r26	; 0x03
    5806:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
		if(flags & I2C_OP_TIMEOUT)
    580a:	c0 ff       	sbrs	r28, 0
    580c:	0a c0       	rjmp	.+20     	; 0x5822 <i2c_print_error+0x54>
			printf("  OP_TIMEOUT\n");
    580e:	87 ec       	ldi	r24, 0xC7	; 199
    5810:	93 e0       	ldi	r25, 0x03	; 3
    5812:	a0 e0       	ldi	r26, 0x00	; 0
    5814:	ed b7       	in	r30, 0x3d	; 61
    5816:	fe b7       	in	r31, 0x3e	; 62
    5818:	81 83       	std	Z+1, r24	; 0x01
    581a:	92 83       	std	Z+2, r25	; 0x02
    581c:	a3 83       	std	Z+3, r26	; 0x03
    581e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
		if(flags & I2C_OP_LEN)
    5822:	c1 ff       	sbrs	r28, 1
    5824:	0a c0       	rjmp	.+20     	; 0x583a <i2c_print_error+0x6c>
			printf("  OP_LEN\n");
    5826:	8d eb       	ldi	r24, 0xBD	; 189
    5828:	93 e0       	ldi	r25, 0x03	; 3
    582a:	a0 e0       	ldi	r26, 0x00	; 0
    582c:	ed b7       	in	r30, 0x3d	; 61
    582e:	fe b7       	in	r31, 0x3e	; 62
    5830:	81 83       	std	Z+1, r24	; 0x01
    5832:	92 83       	std	Z+2, r25	; 0x02
    5834:	a3 83       	std	Z+3, r26	; 0x03
    5836:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
		if(flags & I2C_OP_ERROR)
    583a:	c2 ff       	sbrs	r28, 2
    583c:	0a c0       	rjmp	.+20     	; 0x5852 <i2c_print_error+0x84>
			printf("  OP_ERROR\n");
    583e:	81 eb       	ldi	r24, 0xB1	; 177
    5840:	93 e0       	ldi	r25, 0x03	; 3
    5842:	a0 e0       	ldi	r26, 0x00	; 0
    5844:	ed b7       	in	r30, 0x3d	; 61
    5846:	fe b7       	in	r31, 0x3e	; 62
    5848:	81 83       	std	Z+1, r24	; 0x01
    584a:	92 83       	std	Z+2, r25	; 0x02
    584c:	a3 83       	std	Z+3, r26	; 0x03
    584e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
		if(flags & I2C_TW_MR_SLA_NACK)
    5852:	c4 ff       	sbrs	r28, 4
    5854:	0a c0       	rjmp	.+20     	; 0x586a <i2c_print_error+0x9c>
			printf("  TW_MR_SLA_NACK\n");
    5856:	8f e9       	ldi	r24, 0x9F	; 159
    5858:	93 e0       	ldi	r25, 0x03	; 3
    585a:	a0 e0       	ldi	r26, 0x00	; 0
    585c:	ed b7       	in	r30, 0x3d	; 61
    585e:	fe b7       	in	r31, 0x3e	; 62
    5860:	81 83       	std	Z+1, r24	; 0x01
    5862:	92 83       	std	Z+2, r25	; 0x02
    5864:	a3 83       	std	Z+3, r26	; 0x03
    5866:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
		if(flags & I2C_TW_MT_SLA_NACK)
    586a:	c3 ff       	sbrs	r28, 3
    586c:	0a c0       	rjmp	.+20     	; 0x5882 <i2c_print_error+0xb4>
			printf("  TW_MT_SLA_NACK\n");
    586e:	8d e8       	ldi	r24, 0x8D	; 141
    5870:	93 e0       	ldi	r25, 0x03	; 3
    5872:	a0 e0       	ldi	r26, 0x00	; 0
    5874:	ed b7       	in	r30, 0x3d	; 61
    5876:	fe b7       	in	r31, 0x3e	; 62
    5878:	81 83       	std	Z+1, r24	; 0x01
    587a:	92 83       	std	Z+2, r25	; 0x02
    587c:	a3 83       	std	Z+3, r26	; 0x03
    587e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
		if(flags & I2C_TW_MT_DATA_NACK)
    5882:	c5 ff       	sbrs	r28, 5
    5884:	0a c0       	rjmp	.+20     	; 0x589a <i2c_print_error+0xcc>
			printf("  TW_MT_DATA_NACK\n");
    5886:	8a e7       	ldi	r24, 0x7A	; 122
    5888:	93 e0       	ldi	r25, 0x03	; 3
    588a:	a0 e0       	ldi	r26, 0x00	; 0
    588c:	ed b7       	in	r30, 0x3d	; 61
    588e:	fe b7       	in	r31, 0x3e	; 62
    5890:	81 83       	std	Z+1, r24	; 0x01
    5892:	92 83       	std	Z+2, r25	; 0x02
    5894:	a3 83       	std	Z+3, r26	; 0x03
    5896:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
		printf("\n");
    589a:	88 e7       	ldi	r24, 0x78	; 120
    589c:	93 e0       	ldi	r25, 0x03	; 3
    589e:	a0 e0       	ldi	r26, 0x00	; 0
    58a0:	ed b7       	in	r30, 0x3d	; 61
    58a2:	fe b7       	in	r31, 0x3e	; 62
    58a4:	81 83       	std	Z+1, r24	; 0x01
    58a6:	92 83       	std	Z+2, r25	; 0x02
    58a8:	a3 83       	std	Z+3, r26	; 0x03
    58aa:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
	}
}
    58ae:	0f 90       	pop	r0
    58b0:	0f 90       	pop	r0
    58b2:	0f 90       	pop	r0
    58b4:	0f 90       	pop	r0
    58b6:	0f 90       	pop	r0
    58b8:	cf 91       	pop	r28
    58ba:	08 95       	ret

000058bc <i2c_display_task_errors>:

///@brief Display any task errors
void i2c_display_task_errors()
{
    58bc:	6f 92       	push	r6
    58be:	7f 92       	push	r7
    58c0:	8f 92       	push	r8
    58c2:	af 92       	push	r10
    58c4:	bf 92       	push	r11
    58c6:	cf 92       	push	r12
    58c8:	df 92       	push	r13
    58ca:	ef 92       	push	r14
    58cc:	0f 93       	push	r16
    58ce:	1f 93       	push	r17
    58d0:	cf 93       	push	r28
    58d2:	df 93       	push	r29
    58d4:	00 d0       	rcall	.+0      	; 0x58d6 <i2c_display_task_errors+0x1a>
    58d6:	00 d0       	rcall	.+0      	; 0x58d8 <i2c_display_task_errors+0x1c>
    58d8:	1f 92       	push	r1
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
    58da:	80 91 94 17 	lds	r24, 0x1794	; 0x801794 <i2c_task+0x2>
    58de:	90 e0       	ldi	r25, 0x00	; 0
    58e0:	ed b7       	in	r30, 0x3d	; 61
    58e2:	fe b7       	in	r31, 0x3e	; 62
    58e4:	95 83       	std	Z+5, r25	; 0x05
    58e6:	84 83       	std	Z+4, r24	; 0x04
    58e8:	85 e6       	ldi	r24, 0x65	; 101
    58ea:	93 e0       	ldi	r25, 0x03	; 3
    58ec:	a0 e0       	ldi	r26, 0x00	; 0
    58ee:	81 83       	std	Z+1, r24	; 0x01
    58f0:	92 83       	std	Z+2, r25	; 0x02
    58f2:	a3 83       	std	Z+3, r26	; 0x03
    58f4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
    58f8:	80 91 95 17 	lds	r24, 0x1795	; 0x801795 <i2c_task+0x3>
    58fc:	90 e0       	ldi	r25, 0x00	; 0
    58fe:	ed b7       	in	r30, 0x3d	; 61
    5900:	fe b7       	in	r31, 0x3e	; 62
    5902:	95 83       	std	Z+5, r25	; 0x05
    5904:	84 83       	std	Z+4, r24	; 0x04
    5906:	81 e5       	ldi	r24, 0x51	; 81
    5908:	93 e0       	ldi	r25, 0x03	; 3
    590a:	a0 e0       	ldi	r26, 0x00	; 0
    590c:	81 83       	std	Z+1, r24	; 0x01
    590e:	92 83       	std	Z+2, r25	; 0x02
    5910:	a3 83       	std	Z+3, r26	; 0x03
    5912:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    5916:	c2 e7       	ldi	r28, 0x72	; 114
    5918:	d7 e1       	ldi	r29, 0x17	; 23
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    591a:	00 e0       	ldi	r16, 0x00	; 0
    591c:	10 e0       	ldi	r17, 0x00	; 0
	{
		printf("task: %d\n", (int) i);
    591e:	87 e4       	ldi	r24, 0x47	; 71
    5920:	93 e0       	ldi	r25, 0x03	; 3
    5922:	6c 01       	movw	r12, r24
    5924:	e1 2c       	mov	r14, r1
		i2c_print_error(i2c_task_op[i]);
		printf("\n");
    5926:	85 e4       	ldi	r24, 0x45	; 69
    5928:	93 e0       	ldi	r25, 0x03	; 3
    592a:	3c 01       	movw	r6, r24
    592c:	81 2c       	mov	r8, r1
void i2c_display_task_errors()
{
	int8_t i;
	printf("i2c_task.done: %d\n", (int) i2c_task.done);
	printf("i2c_task.error: %d\n", (int) i2c_task.error);
	for(i=0;i2c_task_op[i] && i < I2C_OPS;++i)
    592e:	30 2f       	mov	r19, r16
    5930:	21 2f       	mov	r18, r17
    5932:	5e 01       	movw	r10, r28
    5934:	0f 5f       	subi	r16, 0xFF	; 255
    5936:	1f 4f       	sbci	r17, 0xFF	; 255
    5938:	88 81       	ld	r24, Y
    593a:	99 81       	ldd	r25, Y+1	; 0x01
    593c:	89 2b       	or	r24, r25
    593e:	b1 f0       	breq	.+44     	; 0x596c <i2c_display_task_errors+0xb0>
	{
		printf("task: %d\n", (int) i);
    5940:	ed b7       	in	r30, 0x3d	; 61
    5942:	fe b7       	in	r31, 0x3e	; 62
    5944:	34 83       	std	Z+4, r19	; 0x04
    5946:	25 83       	std	Z+5, r18	; 0x05
    5948:	c1 82       	std	Z+1, r12	; 0x01
    594a:	d2 82       	std	Z+2, r13	; 0x02
    594c:	e3 82       	std	Z+3, r14	; 0x03
    594e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    5952:	22 96       	adiw	r28, 0x02	; 2
		i2c_print_error(i2c_task_op[i]);
    5954:	f5 01       	movw	r30, r10
    5956:	80 81       	ld	r24, Z
    5958:	91 81       	ldd	r25, Z+1	; 0x01
    595a:	39 df       	rcall	.-398    	; 0x57ce <i2c_print_error>
		printf("\n");
    595c:	ed b7       	in	r30, 0x3d	; 61
    595e:	fe b7       	in	r31, 0x3e	; 62
    5960:	61 82       	std	Z+1, r6	; 0x01
    5962:	72 82       	std	Z+2, r7	; 0x02
    5964:	83 82       	std	Z+3, r8	; 0x03
    5966:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    596a:	e1 cf       	rjmp	.-62     	; 0x592e <i2c_display_task_errors+0x72>
	}
}
    596c:	0f 90       	pop	r0
    596e:	0f 90       	pop	r0
    5970:	0f 90       	pop	r0
    5972:	0f 90       	pop	r0
    5974:	0f 90       	pop	r0
    5976:	df 91       	pop	r29
    5978:	cf 91       	pop	r28
    597a:	1f 91       	pop	r17
    597c:	0f 91       	pop	r16
    597e:	ef 90       	pop	r14
    5980:	df 90       	pop	r13
    5982:	cf 90       	pop	r12
    5984:	bf 90       	pop	r11
    5986:	af 90       	pop	r10
    5988:	8f 90       	pop	r8
    598a:	7f 90       	pop	r7
    598c:	6f 90       	pop	r6
    598e:	08 95       	ret

00005990 <BINtoBCD>:
/// @return 0 if not running.
/// @return -1 ERROR
int8_t rtc_run_test()
{
	return ( rtc_run(-1) );
}
    5990:	6a e0       	ldi	r22, 0x0A	; 10
    5992:	0e 94 38 e0 	call	0x1c070	; 0x1c070 <__udivmodqi4>
    5996:	82 95       	swap	r24
    5998:	80 7f       	andi	r24, 0xF0	; 240
    599a:	89 2b       	or	r24, r25
    599c:	08 95       	ret

0000599e <BCDtoBIN>:
    599e:	98 2f       	mov	r25, r24
    59a0:	92 95       	swap	r25
    59a2:	9f 70       	andi	r25, 0x0F	; 15
    59a4:	8f 70       	andi	r24, 0x0F	; 15
    59a6:	2a e0       	ldi	r18, 0x0A	; 10
    59a8:	92 9f       	mul	r25, r18
    59aa:	80 0d       	add	r24, r0
    59ac:	11 24       	eor	r1, r1
    59ae:	08 95       	ret

000059b0 <i2c_rtc_write>:
    59b0:	ac e0       	ldi	r26, 0x0C	; 12
    59b2:	b0 e0       	ldi	r27, 0x00	; 0
    59b4:	ee ed       	ldi	r30, 0xDE	; 222
    59b6:	fc e2       	ldi	r31, 0x2C	; 44
    59b8:	0c 94 e6 e0 	jmp	0x1c1cc	; 0x1c1cc <__prologue_saves__+0x1c>
    59bc:	9f ef       	ldi	r25, 0xFF	; 255
    59be:	92 0f       	add	r25, r18
    59c0:	98 30       	cpi	r25, 0x08	; 8
    59c2:	50 f5       	brcc	.+84     	; 0x5a18 <i2c_rtc_write+0x68>
    59c4:	6c 83       	std	Y+4, r22	; 0x04
    59c6:	90 e0       	ldi	r25, 0x00	; 0
    59c8:	02 2f       	mov	r16, r18
    59ca:	10 e0       	ldi	r17, 0x00	; 0
    59cc:	69 2f       	mov	r22, r25
    59ce:	09 2e       	mov	r0, r25
    59d0:	00 0c       	add	r0, r0
    59d2:	77 0b       	sbc	r23, r23
    59d4:	60 17       	cp	r22, r16
    59d6:	71 07       	cpc	r23, r17
    59d8:	6c f4       	brge	.+26     	; 0x59f4 <i2c_rtc_write+0x44>
    59da:	a5 e0       	ldi	r26, 0x05	; 5
    59dc:	b0 e0       	ldi	r27, 0x00	; 0
    59de:	ac 0f       	add	r26, r28
    59e0:	bd 1f       	adc	r27, r29
    59e2:	a6 0f       	add	r26, r22
    59e4:	b7 1f       	adc	r27, r23
    59e6:	64 0f       	add	r22, r20
    59e8:	75 1f       	adc	r23, r21
    59ea:	fb 01       	movw	r30, r22
    59ec:	30 81       	ld	r19, Z
    59ee:	3c 93       	st	X, r19
    59f0:	9f 5f       	subi	r25, 0xFF	; 255
    59f2:	ec cf       	rjmp	.-40     	; 0x59cc <i2c_rtc_write+0x1c>
    59f4:	2f 5f       	subi	r18, 0xFF	; 255
    59f6:	ae 01       	movw	r20, r28
    59f8:	4c 5f       	subi	r20, 0xFC	; 252
    59fa:	5f 4f       	sbci	r21, 0xFF	; 255
    59fc:	60 e0       	ldi	r22, 0x00	; 0
    59fe:	5a dd       	rcall	.-1356   	; 0x54b4 <i2c_fn>
    5a00:	81 11       	cpse	r24, r1
    5a02:	0c c0       	rjmp	.+24     	; 0x5a1c <i2c_rtc_write+0x6c>
    5a04:	82 ef       	ldi	r24, 0xF2	; 242
    5a06:	94 e0       	ldi	r25, 0x04	; 4
    5a08:	a0 e0       	ldi	r26, 0x00	; 0
    5a0a:	ed b7       	in	r30, 0x3d	; 61
    5a0c:	fe b7       	in	r31, 0x3e	; 62
    5a0e:	81 83       	std	Z+1, r24	; 0x01
    5a10:	92 83       	std	Z+2, r25	; 0x02
    5a12:	a3 83       	std	Z+3, r26	; 0x03
    5a14:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    5a18:	80 e0       	ldi	r24, 0x00	; 0
    5a1a:	01 c0       	rjmp	.+2      	; 0x5a1e <i2c_rtc_write+0x6e>
    5a1c:	81 e0       	ldi	r24, 0x01	; 1
    5a1e:	2c 96       	adiw	r28, 0x0c	; 12
    5a20:	e4 e0       	ldi	r30, 0x04	; 4
    5a22:	0c 94 02 e1 	jmp	0x1c204	; 0x1c204 <__epilogue_restores__+0x1c>

00005a26 <i2c_rtc_read>:
    5a26:	a4 e0       	ldi	r26, 0x04	; 4
    5a28:	b0 e0       	ldi	r27, 0x00	; 0
    5a2a:	e9 e1       	ldi	r30, 0x19	; 25
    5a2c:	fd e2       	ldi	r31, 0x2D	; 45
    5a2e:	0c 94 e4 e0 	jmp	0x1c1c8	; 0x1c1c8 <__prologue_saves__+0x18>
    5a32:	6c 83       	std	Y+4, r22	; 0x04
    5a34:	9f ef       	ldi	r25, 0xFF	; 255
    5a36:	92 0f       	add	r25, r18
    5a38:	98 30       	cpi	r25, 0x08	; 8
    5a3a:	f8 f4       	brcc	.+62     	; 0x5a7a <i2c_rtc_read+0x54>
    5a3c:	02 2f       	mov	r16, r18
    5a3e:	7a 01       	movw	r14, r20
    5a40:	18 2f       	mov	r17, r24
    5a42:	21 e0       	ldi	r18, 0x01	; 1
    5a44:	ae 01       	movw	r20, r28
    5a46:	4c 5f       	subi	r20, 0xFC	; 252
    5a48:	5f 4f       	sbci	r21, 0xFF	; 255
    5a4a:	60 e0       	ldi	r22, 0x00	; 0
    5a4c:	33 dd       	rcall	.-1434   	; 0x54b4 <i2c_fn>
    5a4e:	81 11       	cpse	r24, r1
    5a50:	03 c0       	rjmp	.+6      	; 0x5a58 <i2c_rtc_read+0x32>
    5a52:	86 ed       	ldi	r24, 0xD6	; 214
    5a54:	94 e0       	ldi	r25, 0x04	; 4
    5a56:	09 c0       	rjmp	.+18     	; 0x5a6a <i2c_rtc_read+0x44>
    5a58:	20 2f       	mov	r18, r16
    5a5a:	a7 01       	movw	r20, r14
    5a5c:	61 e0       	ldi	r22, 0x01	; 1
    5a5e:	81 2f       	mov	r24, r17
    5a60:	29 dd       	rcall	.-1454   	; 0x54b4 <i2c_fn>
    5a62:	81 11       	cpse	r24, r1
    5a64:	0c c0       	rjmp	.+24     	; 0x5a7e <i2c_rtc_read+0x58>
    5a66:	8d eb       	ldi	r24, 0xBD	; 189
    5a68:	94 e0       	ldi	r25, 0x04	; 4
    5a6a:	a0 e0       	ldi	r26, 0x00	; 0
    5a6c:	ed b7       	in	r30, 0x3d	; 61
    5a6e:	fe b7       	in	r31, 0x3e	; 62
    5a70:	81 83       	std	Z+1, r24	; 0x01
    5a72:	92 83       	std	Z+2, r25	; 0x02
    5a74:	a3 83       	std	Z+3, r26	; 0x03
    5a76:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    5a7a:	80 e0       	ldi	r24, 0x00	; 0
    5a7c:	01 c0       	rjmp	.+2      	; 0x5a80 <i2c_rtc_read+0x5a>
    5a7e:	81 e0       	ldi	r24, 0x01	; 1
    5a80:	24 96       	adiw	r28, 0x04	; 4
    5a82:	e6 e0       	ldi	r30, 0x06	; 6
    5a84:	0c 94 00 e1 	jmp	0x1c200	; 0x1c200 <__epilogue_restores__+0x18>

00005a88 <i2c_rtc_init>:
    5a88:	60 ea       	ldi	r22, 0xA0	; 160
    5a8a:	76 e8       	ldi	r23, 0x86	; 134
    5a8c:	81 e0       	ldi	r24, 0x01	; 1
    5a8e:	90 e0       	ldi	r25, 0x00	; 0
    5a90:	18 cc       	rjmp	.-2000   	; 0x52c2 <i2c_init>
    5a92:	08 95       	ret

00005a94 <rtc_write>:
    5a94:	ab e0       	ldi	r26, 0x0B	; 11
    5a96:	b0 e0       	ldi	r27, 0x00	; 0
    5a98:	e0 e5       	ldi	r30, 0x50	; 80
    5a9a:	fd e2       	ldi	r31, 0x2D	; 45
    5a9c:	0c 94 e6 e0 	jmp	0x1c1cc	; 0x1c1cc <__prologue_saves__+0x1c>
    5aa0:	8c 01       	movw	r16, r24
    5aa2:	fc 01       	movw	r30, r24
    5aa4:	80 81       	ld	r24, Z
    5aa6:	74 df       	rcall	.-280    	; 0x5990 <BINtoBCD>
    5aa8:	8f 77       	andi	r24, 0x7F	; 127
    5aaa:	8c 83       	std	Y+4, r24	; 0x04
    5aac:	f8 01       	movw	r30, r16
    5aae:	82 81       	ldd	r24, Z+2	; 0x02
    5ab0:	6f df       	rcall	.-290    	; 0x5990 <BINtoBCD>
    5ab2:	8f 77       	andi	r24, 0x7F	; 127
    5ab4:	8d 83       	std	Y+5, r24	; 0x05
    5ab6:	f8 01       	movw	r30, r16
    5ab8:	84 81       	ldd	r24, Z+4	; 0x04
    5aba:	6a df       	rcall	.-300    	; 0x5990 <BINtoBCD>
    5abc:	8f 73       	andi	r24, 0x3F	; 63
    5abe:	8e 83       	std	Y+6, r24	; 0x06
    5ac0:	f8 01       	movw	r30, r16
    5ac2:	84 85       	ldd	r24, Z+12	; 0x0c
    5ac4:	87 70       	andi	r24, 0x07	; 7
    5ac6:	8f 5f       	subi	r24, 0xFF	; 255
    5ac8:	8f 83       	std	Y+7, r24	; 0x07
    5aca:	86 81       	ldd	r24, Z+6	; 0x06
    5acc:	61 df       	rcall	.-318    	; 0x5990 <BINtoBCD>
    5ace:	8f 73       	andi	r24, 0x3F	; 63
    5ad0:	88 87       	std	Y+8, r24	; 0x08
    5ad2:	f8 01       	movw	r30, r16
    5ad4:	80 85       	ldd	r24, Z+8	; 0x08
    5ad6:	8f 5f       	subi	r24, 0xFF	; 255
    5ad8:	5b df       	rcall	.-330    	; 0x5990 <BINtoBCD>
    5ada:	8f 71       	andi	r24, 0x1F	; 31
    5adc:	89 87       	std	Y+9, r24	; 0x09
    5ade:	f8 01       	movw	r30, r16
    5ae0:	82 85       	ldd	r24, Z+10	; 0x0a
    5ae2:	84 56       	subi	r24, 0x64	; 100
    5ae4:	55 df       	rcall	.-342    	; 0x5990 <BINtoBCD>
    5ae6:	8a 87       	std	Y+10, r24	; 0x0a
    5ae8:	83 e9       	ldi	r24, 0x93	; 147
    5aea:	8b 87       	std	Y+11, r24	; 0x0b
    5aec:	28 e0       	ldi	r18, 0x08	; 8
    5aee:	ae 01       	movw	r20, r28
    5af0:	4c 5f       	subi	r20, 0xFC	; 252
    5af2:	5f 4f       	sbci	r21, 0xFF	; 255
    5af4:	60 e0       	ldi	r22, 0x00	; 0
    5af6:	88 e6       	ldi	r24, 0x68	; 104
    5af8:	5b df       	rcall	.-330    	; 0x59b0 <i2c_rtc_write>
    5afa:	81 11       	cpse	r24, r1
    5afc:	0c c0       	rjmp	.+24     	; 0x5b16 <rtc_write+0x82>
    5afe:	8c ea       	ldi	r24, 0xAC	; 172
    5b00:	94 e0       	ldi	r25, 0x04	; 4
    5b02:	a0 e0       	ldi	r26, 0x00	; 0
    5b04:	ed b7       	in	r30, 0x3d	; 61
    5b06:	fe b7       	in	r31, 0x3e	; 62
    5b08:	81 83       	std	Z+1, r24	; 0x01
    5b0a:	92 83       	std	Z+2, r25	; 0x02
    5b0c:	a3 83       	std	Z+3, r26	; 0x03
    5b0e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    5b12:	80 e0       	ldi	r24, 0x00	; 0
    5b14:	01 c0       	rjmp	.+2      	; 0x5b18 <rtc_write+0x84>
    5b16:	81 e0       	ldi	r24, 0x01	; 1
    5b18:	2b 96       	adiw	r28, 0x0b	; 11
    5b1a:	e4 e0       	ldi	r30, 0x04	; 4
    5b1c:	0c 94 02 e1 	jmp	0x1c204	; 0x1c204 <__epilogue_restores__+0x1c>

00005b20 <rtc_read>:
    5b20:	ab e0       	ldi	r26, 0x0B	; 11
    5b22:	b0 e0       	ldi	r27, 0x00	; 0
    5b24:	e6 e9       	ldi	r30, 0x96	; 150
    5b26:	fd e2       	ldi	r31, 0x2D	; 45
    5b28:	0c 94 e6 e0 	jmp	0x1c1cc	; 0x1c1cc <__prologue_saves__+0x1c>
    5b2c:	8c 01       	movw	r16, r24
    5b2e:	28 e0       	ldi	r18, 0x08	; 8
    5b30:	ae 01       	movw	r20, r28
    5b32:	4c 5f       	subi	r20, 0xFC	; 252
    5b34:	5f 4f       	sbci	r21, 0xFF	; 255
    5b36:	60 e0       	ldi	r22, 0x00	; 0
    5b38:	88 e6       	ldi	r24, 0x68	; 104
    5b3a:	75 df       	rcall	.-278    	; 0x5a26 <i2c_rtc_read>
    5b3c:	81 11       	cpse	r24, r1
    5b3e:	0c c0       	rjmp	.+24     	; 0x5b58 <rtc_read+0x38>
    5b40:	8c e9       	ldi	r24, 0x9C	; 156
    5b42:	94 e0       	ldi	r25, 0x04	; 4
    5b44:	a0 e0       	ldi	r26, 0x00	; 0
    5b46:	ed b7       	in	r30, 0x3d	; 61
    5b48:	fe b7       	in	r31, 0x3e	; 62
    5b4a:	81 83       	std	Z+1, r24	; 0x01
    5b4c:	92 83       	std	Z+2, r25	; 0x02
    5b4e:	a3 83       	std	Z+3, r26	; 0x03
    5b50:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    5b54:	80 e0       	ldi	r24, 0x00	; 0
    5b56:	33 c0       	rjmp	.+102    	; 0x5bbe <rtc_read+0x9e>
    5b58:	8c 81       	ldd	r24, Y+4	; 0x04
    5b5a:	8f 77       	andi	r24, 0x7F	; 127
    5b5c:	20 df       	rcall	.-448    	; 0x599e <BCDtoBIN>
    5b5e:	90 e0       	ldi	r25, 0x00	; 0
    5b60:	f8 01       	movw	r30, r16
    5b62:	91 83       	std	Z+1, r25	; 0x01
    5b64:	80 83       	st	Z, r24
    5b66:	8d 81       	ldd	r24, Y+5	; 0x05
    5b68:	8f 77       	andi	r24, 0x7F	; 127
    5b6a:	19 df       	rcall	.-462    	; 0x599e <BCDtoBIN>
    5b6c:	90 e0       	ldi	r25, 0x00	; 0
    5b6e:	f8 01       	movw	r30, r16
    5b70:	93 83       	std	Z+3, r25	; 0x03
    5b72:	82 83       	std	Z+2, r24	; 0x02
    5b74:	8e 81       	ldd	r24, Y+6	; 0x06
    5b76:	8f 73       	andi	r24, 0x3F	; 63
    5b78:	12 df       	rcall	.-476    	; 0x599e <BCDtoBIN>
    5b7a:	90 e0       	ldi	r25, 0x00	; 0
    5b7c:	f8 01       	movw	r30, r16
    5b7e:	95 83       	std	Z+5, r25	; 0x05
    5b80:	84 83       	std	Z+4, r24	; 0x04
    5b82:	8f 81       	ldd	r24, Y+7	; 0x07
    5b84:	87 70       	andi	r24, 0x07	; 7
    5b86:	90 e0       	ldi	r25, 0x00	; 0
    5b88:	01 97       	sbiw	r24, 0x01	; 1
    5b8a:	95 87       	std	Z+13, r25	; 0x0d
    5b8c:	84 87       	std	Z+12, r24	; 0x0c
    5b8e:	88 85       	ldd	r24, Y+8	; 0x08
    5b90:	8f 73       	andi	r24, 0x3F	; 63
    5b92:	05 df       	rcall	.-502    	; 0x599e <BCDtoBIN>
    5b94:	90 e0       	ldi	r25, 0x00	; 0
    5b96:	f8 01       	movw	r30, r16
    5b98:	97 83       	std	Z+7, r25	; 0x07
    5b9a:	86 83       	std	Z+6, r24	; 0x06
    5b9c:	89 85       	ldd	r24, Y+9	; 0x09
    5b9e:	8f 71       	andi	r24, 0x1F	; 31
    5ba0:	fe de       	rcall	.-516    	; 0x599e <BCDtoBIN>
    5ba2:	90 e0       	ldi	r25, 0x00	; 0
    5ba4:	01 97       	sbiw	r24, 0x01	; 1
    5ba6:	f8 01       	movw	r30, r16
    5ba8:	91 87       	std	Z+9, r25	; 0x09
    5baa:	80 87       	std	Z+8, r24	; 0x08
    5bac:	8a 85       	ldd	r24, Y+10	; 0x0a
    5bae:	f7 de       	rcall	.-530    	; 0x599e <BCDtoBIN>
    5bb0:	90 e0       	ldi	r25, 0x00	; 0
    5bb2:	8c 59       	subi	r24, 0x9C	; 156
    5bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    5bb6:	f8 01       	movw	r30, r16
    5bb8:	93 87       	std	Z+11, r25	; 0x0b
    5bba:	82 87       	std	Z+10, r24	; 0x0a
    5bbc:	81 e0       	ldi	r24, 0x01	; 1
    5bbe:	2b 96       	adiw	r28, 0x0b	; 11
    5bc0:	e4 e0       	ldi	r30, 0x04	; 4
    5bc2:	0c 94 02 e1 	jmp	0x1c204	; 0x1c204 <__epilogue_restores__+0x1c>

00005bc6 <rtc_run>:
    5bc6:	a4 e0       	ldi	r26, 0x04	; 4
    5bc8:	b0 e0       	ldi	r27, 0x00	; 0
    5bca:	e9 ee       	ldi	r30, 0xE9	; 233
    5bcc:	fd e2       	ldi	r31, 0x2D	; 45
    5bce:	0c 94 e6 e0 	jmp	0x1c1cc	; 0x1c1cc <__prologue_saves__+0x1c>
    5bd2:	8c 01       	movw	r16, r24
    5bd4:	21 e0       	ldi	r18, 0x01	; 1
    5bd6:	ae 01       	movw	r20, r28
    5bd8:	4c 5f       	subi	r20, 0xFC	; 252
    5bda:	5f 4f       	sbci	r21, 0xFF	; 255
    5bdc:	60 e0       	ldi	r22, 0x00	; 0
    5bde:	88 e6       	ldi	r24, 0x68	; 104
    5be0:	22 df       	rcall	.-444    	; 0x5a26 <i2c_rtc_read>
    5be2:	81 11       	cpse	r24, r1
    5be4:	03 c0       	rjmp	.+6      	; 0x5bec <rtc_run+0x26>
    5be6:	88 e8       	ldi	r24, 0x88	; 136
    5be8:	94 e0       	ldi	r25, 0x04	; 4
    5bea:	24 c0       	rjmp	.+72     	; 0x5c34 <rtc_run+0x6e>
    5bec:	8c 81       	ldd	r24, Y+4	; 0x04
    5bee:	0f 3f       	cpi	r16, 0xFF	; 255
    5bf0:	ff ef       	ldi	r31, 0xFF	; 255
    5bf2:	1f 07       	cpc	r17, r31
    5bf4:	59 f4       	brne	.+22     	; 0x5c0c <rtc_run+0x46>
    5bf6:	08 2e       	mov	r0, r24
    5bf8:	00 0c       	add	r0, r0
    5bfa:	99 0b       	sbc	r25, r25
    5bfc:	80 95       	com	r24
    5bfe:	90 95       	com	r25
    5c00:	89 2f       	mov	r24, r25
    5c02:	88 1f       	adc	r24, r24
    5c04:	88 27       	eor	r24, r24
    5c06:	88 1f       	adc	r24, r24
    5c08:	90 e0       	ldi	r25, 0x00	; 0
    5c0a:	20 c0       	rjmp	.+64     	; 0x5c4c <rtc_run+0x86>
    5c0c:	8f 77       	andi	r24, 0x7F	; 127
    5c0e:	01 15       	cp	r16, r1
    5c10:	11 05       	cpc	r17, r1
    5c12:	11 f4       	brne	.+4      	; 0x5c18 <rtc_run+0x52>
    5c14:	90 e8       	ldi	r25, 0x80	; 128
    5c16:	01 c0       	rjmp	.+2      	; 0x5c1a <rtc_run+0x54>
    5c18:	90 e0       	ldi	r25, 0x00	; 0
    5c1a:	89 2b       	or	r24, r25
    5c1c:	8c 83       	std	Y+4, r24	; 0x04
    5c1e:	21 e0       	ldi	r18, 0x01	; 1
    5c20:	ae 01       	movw	r20, r28
    5c22:	4c 5f       	subi	r20, 0xFC	; 252
    5c24:	5f 4f       	sbci	r21, 0xFF	; 255
    5c26:	60 e0       	ldi	r22, 0x00	; 0
    5c28:	88 e6       	ldi	r24, 0x68	; 104
    5c2a:	c2 de       	rcall	.-636    	; 0x59b0 <i2c_rtc_write>
    5c2c:	81 11       	cpse	r24, r1
    5c2e:	0d c0       	rjmp	.+26     	; 0x5c4a <rtc_run+0x84>
    5c30:	83 e7       	ldi	r24, 0x73	; 115
    5c32:	94 e0       	ldi	r25, 0x04	; 4
    5c34:	a0 e0       	ldi	r26, 0x00	; 0
    5c36:	ed b7       	in	r30, 0x3d	; 61
    5c38:	fe b7       	in	r31, 0x3e	; 62
    5c3a:	81 83       	std	Z+1, r24	; 0x01
    5c3c:	92 83       	std	Z+2, r25	; 0x02
    5c3e:	a3 83       	std	Z+3, r26	; 0x03
    5c40:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    5c44:	8f ef       	ldi	r24, 0xFF	; 255
    5c46:	9f ef       	ldi	r25, 0xFF	; 255
    5c48:	01 c0       	rjmp	.+2      	; 0x5c4c <rtc_run+0x86>
    5c4a:	c8 01       	movw	r24, r16
    5c4c:	24 96       	adiw	r28, 0x04	; 4
    5c4e:	e4 e0       	ldi	r30, 0x04	; 4
    5c50:	0c 94 02 e1 	jmp	0x1c204	; 0x1c204 <__epilogue_restores__+0x1c>

00005c54 <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  run state 0 = STOP, 1 = RUN
/// @return -1 = ERROR
uint8_t rtc_init (int force, time_t seconds)
{
    5c54:	a7 e0       	ldi	r26, 0x07	; 7
    5c56:	b0 e0       	ldi	r27, 0x00	; 0
    5c58:	e0 e3       	ldi	r30, 0x30	; 48
    5c5a:	fe e2       	ldi	r31, 0x2E	; 46
    5c5c:	0c 94 e6 e0 	jmp	0x1c1cc	; 0x1c1cc <__prologue_saves__+0x1c>
    5c60:	8c 01       	movw	r16, r24
    5c62:	4c 83       	std	Y+4, r20	; 0x04
    5c64:	5d 83       	std	Y+5, r21	; 0x05
    5c66:	6e 83       	std	Y+6, r22	; 0x06
    5c68:	7f 83       	std	Y+7, r23	; 0x07
    int8_t    state;

    tm_t *tmp;

    i2c_rtc_init();
    5c6a:	0e df       	rcall	.-484    	; 0x5a88 <i2c_rtc_init>

    if(!force)
    5c6c:	01 15       	cp	r16, r1
    5c6e:	11 05       	cpc	r17, r1
    5c70:	39 f4       	brne	.+14     	; 0x5c80 <rtc_init+0x2c>
    {
        state = rtc_run(-1);
    5c72:	8f ef       	ldi	r24, 0xFF	; 255
    5c74:	9f ef       	ldi	r25, 0xFF	; 255
    5c76:	a7 df       	rcall	.-178    	; 0x5bc6 <rtc_run>
        if(state < 0)
    5c78:	87 fd       	sbrc	r24, 7
    5c7a:	16 c0       	rjmp	.+44     	; 0x5ca8 <rtc_init+0x54>
        {
            rtc_ok = 0;
            return 0;
        }
        if(state == 0)                            // stopped
    5c7c:	81 11       	cpse	r24, r1
    5c7e:	22 c0       	rjmp	.+68     	; 0x5cc4 <rtc_init+0x70>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    5c80:	80 e0       	ldi	r24, 0x00	; 0
    5c82:	90 e0       	ldi	r25, 0x00	; 0
    5c84:	a0 df       	rcall	.-192    	; 0x5bc6 <rtc_run>
    5c86:	97 fd       	sbrc	r25, 7
    5c88:	0f c0       	rjmp	.+30     	; 0x5ca8 <rtc_init+0x54>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }

        tmp = gmtime(&seconds);
    5c8a:	ce 01       	movw	r24, r28
    5c8c:	04 96       	adiw	r24, 0x04	; 4
    5c8e:	a3 d6       	rcall	.+3398   	; 0x69d6 <gmtime>
    5c90:	00 97       	sbiw	r24, 0x00	; 0

        if(tmp == NULL || !rtc_write(tmp))
    5c92:	81 f4       	brne	.+32     	; 0x5cb4 <rtc_init+0x60>
    5c94:	85 e5       	ldi	r24, 0x55	; 85
        {
            printf("rtc_init  write epoch failed\n");
    5c96:	94 e0       	ldi	r25, 0x04	; 4
    5c98:	a0 e0       	ldi	r26, 0x00	; 0
    5c9a:	ed b7       	in	r30, 0x3d	; 61
    5c9c:	fe b7       	in	r31, 0x3e	; 62
    5c9e:	81 83       	std	Z+1, r24	; 0x01
    5ca0:	92 83       	std	Z+2, r25	; 0x02
    5ca2:	a3 83       	std	Z+3, r26	; 0x03
    5ca4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    5ca8:	10 92 08 1a 	sts	0x1A08, r1	; 0x801a08 <rtc_ok+0x1>
            rtc_ok = 0;
    5cac:	10 92 07 1a 	sts	0x1A07, r1	; 0x801a07 <rtc_ok>
            return 0;
    5cb0:	80 e0       	ldi	r24, 0x00	; 0
    5cb2:	0e c0       	rjmp	.+28     	; 0x5cd0 <rtc_init+0x7c>
            return 0;
        }

        tmp = gmtime(&seconds);

        if(tmp == NULL || !rtc_write(tmp))
    5cb4:	ef de       	rcall	.-546    	; 0x5a94 <rtc_write>
    5cb6:	88 23       	and	r24, r24
    5cb8:	69 f3       	breq	.-38     	; 0x5c94 <rtc_init+0x40>
            printf("rtc_init  write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        if(rtc_run(1) < 0)                        // START RTC
    5cba:	81 e0       	ldi	r24, 0x01	; 1
    5cbc:	90 e0       	ldi	r25, 0x00	; 0
    5cbe:	83 df       	rcall	.-250    	; 0x5bc6 <rtc_run>
    5cc0:	97 fd       	sbrc	r25, 7
    5cc2:	f2 cf       	rjmp	.-28     	; 0x5ca8 <rtc_init+0x54>
    5cc4:	81 e0       	ldi	r24, 0x01	; 1
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    5cc6:	90 e0       	ldi	r25, 0x00	; 0
    5cc8:	90 93 08 1a 	sts	0x1A08, r25	; 0x801a08 <rtc_ok+0x1>
    5ccc:	80 93 07 1a 	sts	0x1A07, r24	; 0x801a07 <rtc_ok>
    5cd0:	27 96       	adiw	r28, 0x07	; 7
    return 1;
}
    5cd2:	e4 e0       	ldi	r30, 0x04	; 4
    5cd4:	0c 94 02 e1 	jmp	0x1c204	; 0x1c204 <__epilogue_restores__+0x1c>

00005cd8 <islower>:
    5cd8:	9c 01       	movw	r18, r24
    if(!ptr)
        return(ptr);
    strncpy(ptr,str,len);
    return(ptr);

}
    5cda:	21 56       	subi	r18, 0x61	; 97
    5cdc:	31 09       	sbc	r19, r1
    5cde:	81 e0       	ldi	r24, 0x01	; 1
    5ce0:	90 e0       	ldi	r25, 0x00	; 0
    5ce2:	2a 31       	cpi	r18, 0x1A	; 26
    5ce4:	31 05       	cpc	r19, r1
    5ce6:	10 f0       	brcs	.+4      	; 0x5cec <islower+0x14>
    5ce8:	80 e0       	ldi	r24, 0x00	; 0
    5cea:	90 e0       	ldi	r25, 0x00	; 0
    5cec:	08 95       	ret

00005cee <toupper>:
    5cee:	cf 93       	push	r28
    5cf0:	df 93       	push	r29
    5cf2:	ec 01       	movw	r28, r24
    5cf4:	f1 df       	rcall	.-30     	; 0x5cd8 <islower>
    5cf6:	89 2b       	or	r24, r25
    5cf8:	19 f0       	breq	.+6      	; 0x5d00 <toupper+0x12>
    5cfa:	ce 01       	movw	r24, r28
    5cfc:	80 97       	sbiw	r24, 0x20	; 32
    5cfe:	01 c0       	rjmp	.+2      	; 0x5d02 <toupper+0x14>
    5d00:	ce 01       	movw	r24, r28
    5d02:	df 91       	pop	r29
    5d04:	cf 91       	pop	r28
    5d06:	08 95       	ret

00005d08 <strcpy>:
    5d08:	fc 01       	movw	r30, r24
    5d0a:	db 01       	movw	r26, r22
    5d0c:	2d 91       	ld	r18, X+
    5d0e:	bd 01       	movw	r22, r26
    5d10:	01 96       	adiw	r24, 0x01	; 1
    5d12:	22 23       	and	r18, r18
    5d14:	11 f0       	breq	.+4      	; 0x5d1a <strcpy+0x12>
    5d16:	20 83       	st	Z, r18
    5d18:	f7 cf       	rjmp	.-18     	; 0x5d08 <strcpy>
    5d1a:	10 82       	st	Z, r1
    5d1c:	08 95       	ret

00005d1e <strncpy>:
    5d1e:	db 01       	movw	r26, r22
    5d20:	fc 01       	movw	r30, r24
    5d22:	2d 91       	ld	r18, X+
    5d24:	21 11       	cpse	r18, r1
    5d26:	03 c0       	rjmp	.+6      	; 0x5d2e <strncpy+0x10>
    5d28:	4e 0f       	add	r20, r30
    5d2a:	5f 1f       	adc	r21, r31
    5d2c:	08 c0       	rjmp	.+16     	; 0x5d3e <strncpy+0x20>
    5d2e:	41 15       	cp	r20, r1
    5d30:	51 05       	cpc	r21, r1
    5d32:	21 f0       	breq	.+8      	; 0x5d3c <strncpy+0x1e>
    5d34:	21 93       	st	Z+, r18
    5d36:	41 50       	subi	r20, 0x01	; 1
    5d38:	51 09       	sbc	r21, r1
    5d3a:	f3 cf       	rjmp	.-26     	; 0x5d22 <strncpy+0x4>
    5d3c:	08 95       	ret
    5d3e:	4e 17       	cp	r20, r30
    5d40:	5f 07       	cpc	r21, r31
    5d42:	11 f0       	breq	.+4      	; 0x5d48 <strncpy+0x2a>
    5d44:	11 92       	st	Z+, r1
    5d46:	fb cf       	rjmp	.-10     	; 0x5d3e <strncpy+0x20>
    5d48:	08 95       	ret

00005d4a <strcat>:
    5d4a:	cf 93       	push	r28
    5d4c:	df 93       	push	r29
    5d4e:	d8 2f       	mov	r29, r24
    5d50:	c9 2f       	mov	r28, r25
    5d52:	28 2f       	mov	r18, r24
    5d54:	39 2f       	mov	r19, r25
    5d56:	c9 01       	movw	r24, r18
    5d58:	2f 5f       	subi	r18, 0xFF	; 255
    5d5a:	3f 4f       	sbci	r19, 0xFF	; 255
    5d5c:	fc 01       	movw	r30, r24
    5d5e:	40 81       	ld	r20, Z
    5d60:	41 11       	cpse	r20, r1
    5d62:	f9 cf       	rjmp	.-14     	; 0x5d56 <strcat+0xc>
    5d64:	d1 df       	rcall	.-94     	; 0x5d08 <strcpy>
    5d66:	8d 2f       	mov	r24, r29
    5d68:	9c 2f       	mov	r25, r28
    5d6a:	df 91       	pop	r29
    5d6c:	cf 91       	pop	r28
    5d6e:	08 95       	ret

00005d70 <reverse>:
    5d70:	fc 01       	movw	r30, r24
    5d72:	01 90       	ld	r0, Z+
    5d74:	00 20       	and	r0, r0
    5d76:	e9 f7       	brne	.-6      	; 0x5d72 <reverse+0x2>
    5d78:	31 97       	sbiw	r30, 0x01	; 1
    5d7a:	e8 1b       	sub	r30, r24
    5d7c:	f9 0b       	sbc	r31, r25
    5d7e:	af 01       	movw	r20, r30
    5d80:	55 95       	asr	r21
    5d82:	47 95       	ror	r20
    5d84:	e8 0f       	add	r30, r24
    5d86:	f9 1f       	adc	r31, r25
    5d88:	dc 01       	movw	r26, r24
    5d8a:	9d 01       	movw	r18, r26
    5d8c:	28 1b       	sub	r18, r24
    5d8e:	39 0b       	sbc	r19, r25
    5d90:	24 17       	cp	r18, r20
    5d92:	35 07       	cpc	r19, r21
    5d94:	2c f4       	brge	.+10     	; 0x5da0 <reverse+0x30>
    5d96:	22 91       	ld	r18, -Z
    5d98:	3c 91       	ld	r19, X
    5d9a:	30 83       	st	Z, r19
    5d9c:	2d 93       	st	X+, r18
    5d9e:	f5 cf       	rjmp	.-22     	; 0x5d8a <reverse+0x1a>
    5da0:	08 95       	ret

00005da2 <strupper>:
    5da2:	cf 93       	push	r28
    5da4:	df 93       	push	r29
    5da6:	ec 01       	movw	r28, r24
    5da8:	88 81       	ld	r24, Y
    5daa:	88 23       	and	r24, r24
    5dac:	21 f0       	breq	.+8      	; 0x5db6 <strupper+0x14>
    5dae:	90 e0       	ldi	r25, 0x00	; 0
    5db0:	9e df       	rcall	.-196    	; 0x5cee <toupper>
    5db2:	89 93       	st	Y+, r24
    5db4:	f9 cf       	rjmp	.-14     	; 0x5da8 <strupper+0x6>
    5db6:	df 91       	pop	r29
    5db8:	cf 91       	pop	r28
    5dba:	08 95       	ret

00005dbc <strcmp>:
    5dbc:	dc 01       	movw	r26, r24
    5dbe:	fb 01       	movw	r30, r22
    5dc0:	2d 91       	ld	r18, X+
    5dc2:	41 91       	ld	r20, Z+
    5dc4:	50 e0       	ldi	r21, 0x00	; 0
    5dc6:	30 e0       	ldi	r19, 0x00	; 0
    5dc8:	c9 01       	movw	r24, r18
    5dca:	84 1b       	sub	r24, r20
    5dcc:	95 0b       	sbc	r25, r21
    5dce:	11 f4       	brne	.+4      	; 0x5dd4 <strcmp+0x18>
    5dd0:	45 2b       	or	r20, r21
    5dd2:	b1 f7       	brne	.-20     	; 0x5dc0 <strcmp+0x4>
    5dd4:	08 95       	ret

00005dd6 <strcasecmp>:
    5dd6:	ef 92       	push	r14
    5dd8:	ff 92       	push	r15
    5dda:	0f 93       	push	r16
    5ddc:	1f 93       	push	r17
    5dde:	cf 93       	push	r28
    5de0:	df 93       	push	r29
    5de2:	7c 01       	movw	r14, r24
    5de4:	8b 01       	movw	r16, r22
    5de6:	f7 01       	movw	r30, r14
    5de8:	81 91       	ld	r24, Z+
    5dea:	7f 01       	movw	r14, r30
    5dec:	90 e0       	ldi	r25, 0x00	; 0
    5dee:	7f df       	rcall	.-258    	; 0x5cee <toupper>
    5df0:	ec 01       	movw	r28, r24
    5df2:	f8 01       	movw	r30, r16
    5df4:	81 91       	ld	r24, Z+
    5df6:	8f 01       	movw	r16, r30
    5df8:	90 e0       	ldi	r25, 0x00	; 0
    5dfa:	79 df       	rcall	.-270    	; 0x5cee <toupper>
    5dfc:	9c 01       	movw	r18, r24
    5dfe:	ce 01       	movw	r24, r28
    5e00:	82 1b       	sub	r24, r18
    5e02:	93 0b       	sbc	r25, r19
    5e04:	11 f4       	brne	.+4      	; 0x5e0a <strcasecmp+0x34>
    5e06:	23 2b       	or	r18, r19
    5e08:	71 f7       	brne	.-36     	; 0x5de6 <strcasecmp+0x10>
    5e0a:	cd b7       	in	r28, 0x3d	; 61
    5e0c:	de b7       	in	r29, 0x3e	; 62
    5e0e:	e6 e0       	ldi	r30, 0x06	; 6
    5e10:	0c 94 00 e1 	jmp	0x1c200	; 0x1c200 <__epilogue_restores__+0x18>

00005e14 <strncasecmp>:
    5e14:	a0 e0       	ldi	r26, 0x00	; 0
    5e16:	b0 e0       	ldi	r27, 0x00	; 0
    5e18:	e0 e1       	ldi	r30, 0x10	; 16
    5e1a:	ff e2       	ldi	r31, 0x2F	; 47
    5e1c:	0c 94 e2 e0 	jmp	0x1c1c4	; 0x1c1c4 <__prologue_saves__+0x14>
    5e20:	8c 01       	movw	r16, r24
    5e22:	7b 01       	movw	r14, r22
    5e24:	6c 01       	movw	r12, r24
    5e26:	c4 0e       	add	r12, r20
    5e28:	d5 1e       	adc	r13, r21
    5e2a:	0c 15       	cp	r16, r12
    5e2c:	1d 05       	cpc	r17, r13
    5e2e:	99 f0       	breq	.+38     	; 0x5e56 <strncasecmp+0x42>
    5e30:	f8 01       	movw	r30, r16
    5e32:	81 91       	ld	r24, Z+
    5e34:	8f 01       	movw	r16, r30
    5e36:	90 e0       	ldi	r25, 0x00	; 0
    5e38:	5a df       	rcall	.-332    	; 0x5cee <toupper>
    5e3a:	ec 01       	movw	r28, r24
    5e3c:	f7 01       	movw	r30, r14
    5e3e:	81 91       	ld	r24, Z+
    5e40:	7f 01       	movw	r14, r30
    5e42:	90 e0       	ldi	r25, 0x00	; 0
    5e44:	54 df       	rcall	.-344    	; 0x5cee <toupper>
    5e46:	9c 01       	movw	r18, r24
    5e48:	ce 01       	movw	r24, r28
    5e4a:	82 1b       	sub	r24, r18
    5e4c:	93 0b       	sbc	r25, r19
    5e4e:	29 f4       	brne	.+10     	; 0x5e5a <strncasecmp+0x46>
    5e50:	23 2b       	or	r18, r19
    5e52:	59 f7       	brne	.-42     	; 0x5e2a <strncasecmp+0x16>
    5e54:	02 c0       	rjmp	.+4      	; 0x5e5a <strncasecmp+0x46>
    5e56:	80 e0       	ldi	r24, 0x00	; 0
    5e58:	90 e0       	ldi	r25, 0x00	; 0
    5e5a:	cd b7       	in	r28, 0x3d	; 61
    5e5c:	de b7       	in	r29, 0x3e	; 62
    5e5e:	e8 e0       	ldi	r30, 0x08	; 8
    5e60:	0c 94 fe e0 	jmp	0x1c1fc	; 0x1c1fc <__epilogue_restores__+0x14>

00005e64 <stralloc>:
///
///@return pointer to alocated string.
///@return NULL on out of memory.
MEMSPACE
char *stralloc(char *str)
{
    5e64:	0f 93       	push	r16
    5e66:	1f 93       	push	r17
    5e68:	cf 93       	push	r28
    5e6a:	df 93       	push	r29
    char *ptr;
    int len;

    if(!str)
    5e6c:	00 97       	sbiw	r24, 0x00	; 0
    5e6e:	99 f0       	breq	.+38     	; 0x5e96 <stralloc+0x32>
    5e70:	ec 01       	movw	r28, r24
        return(str);;
    len  = strlen(str);
    5e72:	fc 01       	movw	r30, r24
    5e74:	01 90       	ld	r0, Z+
    5e76:	00 20       	and	r0, r0
    5e78:	e9 f7       	brne	.-6      	; 0x5e74 <stralloc+0x10>
    5e7a:	cf 01       	movw	r24, r30
    ptr = safecalloc(len+1,1);
    5e7c:	61 e0       	ldi	r22, 0x01	; 1
    5e7e:	70 e0       	ldi	r23, 0x00	; 0
    5e80:	8c 1b       	sub	r24, r28
    5e82:	9d 0b       	sbc	r25, r29
    5e84:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <safecalloc>
    5e88:	8c 01       	movw	r16, r24
    if(!ptr)
    5e8a:	00 97       	sbiw	r24, 0x00	; 0
    5e8c:	21 f0       	breq	.+8      	; 0x5e96 <stralloc+0x32>
        return(ptr);
    strcpy(ptr,str);
    5e8e:	be 01       	movw	r22, r28
    5e90:	3b df       	rcall	.-394    	; 0x5d08 <strcpy>
    return(ptr);
    5e92:	c8 01       	movw	r24, r16
    5e94:	02 c0       	rjmp	.+4      	; 0x5e9a <stralloc+0x36>
    5e96:	80 e0       	ldi	r24, 0x00	; 0
    5e98:	90 e0       	ldi	r25, 0x00	; 0
}
    5e9a:	df 91       	pop	r29
    5e9c:	cf 91       	pop	r28
    5e9e:	1f 91       	pop	r17
    5ea0:	0f 91       	pop	r16
    5ea2:	08 95       	ret

00005ea4 <sep>:
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    5ea4:	00 d0       	rcall	.+0      	; 0x5ea6 <sep+0x2>
    5ea6:	1f 92       	push	r1
    5ea8:	82 e3       	ldi	r24, 0x32	; 50
    5eaa:	95 e0       	ldi	r25, 0x05	; 5
    5eac:	a0 e0       	ldi	r26, 0x00	; 0
    5eae:	ed b7       	in	r30, 0x3d	; 61
    5eb0:	fe b7       	in	r31, 0x3e	; 62
    5eb2:	81 83       	std	Z+1, r24	; 0x01
    5eb4:	92 83       	std	Z+2, r25	; 0x02
    5eb6:	a3 83       	std	Z+3, r26	; 0x03
    5eb8:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    5ebc:	0f 90       	pop	r0
    5ebe:	0f 90       	pop	r0
    5ec0:	0f 90       	pop	r0
    5ec2:	08 95       	ret

00005ec4 <trim_tail>:
    5ec4:	00 97       	sbiw	r24, 0x00	; 0
    5ec6:	69 f0       	breq	.+26     	; 0x5ee2 <trim_tail+0x1e>
    5ec8:	fc 01       	movw	r30, r24
    5eca:	01 90       	ld	r0, Z+
    5ecc:	00 20       	and	r0, r0
    5ece:	e9 f7       	brne	.-6      	; 0x5eca <trim_tail+0x6>
    5ed0:	31 97       	sbiw	r30, 0x01	; 1
    5ed2:	e8 17       	cp	r30, r24
    5ed4:	f9 07       	cpc	r31, r25
    5ed6:	29 f0       	breq	.+10     	; 0x5ee2 <trim_tail+0x1e>
    5ed8:	22 91       	ld	r18, -Z
    5eda:	21 32       	cpi	r18, 0x21	; 33
    5edc:	10 f4       	brcc	.+4      	; 0x5ee2 <trim_tail+0x1e>
    5ede:	10 82       	st	Z, r1
    5ee0:	f8 cf       	rjmp	.-16     	; 0x5ed2 <trim_tail+0xe>
    5ee2:	08 95       	ret

00005ee4 <skipspaces>:
    5ee4:	00 97       	sbiw	r24, 0x00	; 0
    5ee6:	39 f0       	breq	.+14     	; 0x5ef6 <skipspaces+0x12>
    5ee8:	fc 01       	movw	r30, r24
    5eea:	cf 01       	movw	r24, r30
    5eec:	21 91       	ld	r18, Z+
    5eee:	20 32       	cpi	r18, 0x20	; 32
    5ef0:	e1 f3       	breq	.-8      	; 0x5eea <skipspaces+0x6>
    5ef2:	29 30       	cpi	r18, 0x09	; 9
    5ef4:	d1 f3       	breq	.-12     	; 0x5eea <skipspaces+0x6>
    5ef6:	08 95       	ret

00005ef8 <MATCH>:
    5ef8:	cf 93       	push	r28
    5efa:	df 93       	push	r29
    5efc:	fb 01       	movw	r30, r22
    5efe:	01 90       	ld	r0, Z+
    5f00:	00 20       	and	r0, r0
    5f02:	e9 f7       	brne	.-6      	; 0x5efe <MATCH+0x6>
    5f04:	31 97       	sbiw	r30, 0x01	; 1
    5f06:	ef 01       	movw	r28, r30
    5f08:	c6 1b       	sub	r28, r22
    5f0a:	d7 0b       	sbc	r29, r23
    5f0c:	57 df       	rcall	.-338    	; 0x5dbc <strcmp>
    5f0e:	89 2b       	or	r24, r25
    5f10:	11 f4       	brne	.+4      	; 0x5f16 <MATCH+0x1e>
    5f12:	ce 01       	movw	r24, r28
    5f14:	02 c0       	rjmp	.+4      	; 0x5f1a <MATCH+0x22>
    5f16:	80 e0       	ldi	r24, 0x00	; 0
    5f18:	90 e0       	ldi	r25, 0x00	; 0
    5f1a:	df 91       	pop	r29
    5f1c:	cf 91       	pop	r28
    5f1e:	08 95       	ret

00005f20 <MATCHI>:
    5f20:	cf 93       	push	r28
    5f22:	df 93       	push	r29
    5f24:	fb 01       	movw	r30, r22
    5f26:	01 90       	ld	r0, Z+
    5f28:	00 20       	and	r0, r0
    5f2a:	e9 f7       	brne	.-6      	; 0x5f26 <MATCHI+0x6>
    5f2c:	31 97       	sbiw	r30, 0x01	; 1
    5f2e:	ef 01       	movw	r28, r30
    5f30:	c6 1b       	sub	r28, r22
    5f32:	d7 0b       	sbc	r29, r23
    5f34:	50 df       	rcall	.-352    	; 0x5dd6 <strcasecmp>
    5f36:	89 2b       	or	r24, r25
    5f38:	11 f4       	brne	.+4      	; 0x5f3e <MATCHI+0x1e>
    5f3a:	ce 01       	movw	r24, r28
    5f3c:	02 c0       	rjmp	.+4      	; 0x5f42 <MATCHI+0x22>
    5f3e:	80 e0       	ldi	r24, 0x00	; 0
    5f40:	90 e0       	ldi	r25, 0x00	; 0
    5f42:	df 91       	pop	r29
    5f44:	cf 91       	pop	r28
    5f46:	08 95       	ret

00005f48 <MATCHARGS>:
    5f48:	a9 e0       	ldi	r26, 0x09	; 9
    5f4a:	b0 e0       	ldi	r27, 0x00	; 0
    5f4c:	ea ea       	ldi	r30, 0xAA	; 170
    5f4e:	ff e2       	ldi	r31, 0x2F	; 47
    5f50:	0c 94 e4 e0 	jmp	0x1c1c8	; 0x1c1c8 <__prologue_saves__+0x18>
    5f54:	eb 01       	movw	r28, r22
    5f56:	8a 01       	movw	r16, r20
    5f58:	79 01       	movw	r14, r18
    5f5a:	e2 df       	rcall	.-60     	; 0x5f20 <MATCHI>
    5f5c:	00 97       	sbiw	r24, 0x00	; 0
    5f5e:	c1 f0       	breq	.+48     	; 0x5f90 <MATCHARGS+0x48>
    5f60:	e0 16       	cp	r14, r16
    5f62:	f1 06       	cpc	r15, r17
    5f64:	9c f4       	brge	.+38     	; 0x5f8c <MATCHARGS+0x44>
    5f66:	ed b7       	in	r30, 0x3d	; 61
    5f68:	fe b7       	in	r31, 0x3e	; 62
    5f6a:	f1 86       	std	Z+9, r15	; 0x09
    5f6c:	e0 86       	std	Z+8, r14	; 0x08
    5f6e:	17 83       	std	Z+7, r17	; 0x07
    5f70:	06 83       	std	Z+6, r16	; 0x06
    5f72:	d5 83       	std	Z+5, r29	; 0x05
    5f74:	c4 83       	std	Z+4, r28	; 0x04
    5f76:	8c e0       	ldi	r24, 0x0C	; 12
    5f78:	95 e0       	ldi	r25, 0x05	; 5
    5f7a:	a0 e0       	ldi	r26, 0x00	; 0
    5f7c:	81 83       	std	Z+1, r24	; 0x01
    5f7e:	92 83       	std	Z+2, r25	; 0x02
    5f80:	a3 83       	std	Z+3, r26	; 0x03
    5f82:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    5f86:	80 e0       	ldi	r24, 0x00	; 0
    5f88:	90 e0       	ldi	r25, 0x00	; 0
    5f8a:	02 c0       	rjmp	.+4      	; 0x5f90 <MATCHARGS+0x48>
    5f8c:	81 e0       	ldi	r24, 0x01	; 1
    5f8e:	90 e0       	ldi	r25, 0x00	; 0
    5f90:	cd b7       	in	r28, 0x3d	; 61
    5f92:	de b7       	in	r29, 0x3e	; 62
    5f94:	29 96       	adiw	r28, 0x09	; 9
    5f96:	e6 e0       	ldi	r30, 0x06	; 6
    5f98:	0c 94 00 e1 	jmp	0x1c200	; 0x1c200 <__epilogue_restores__+0x18>

00005f9c <MATCHI_LEN>:
    5f9c:	cf 93       	push	r28
    5f9e:	df 93       	push	r29
    5fa0:	00 97       	sbiw	r24, 0x00	; 0
    5fa2:	89 f0       	breq	.+34     	; 0x5fc6 <MATCHI_LEN+0x2a>
    5fa4:	61 15       	cp	r22, r1
    5fa6:	71 05       	cpc	r23, r1
    5fa8:	71 f0       	breq	.+28     	; 0x5fc6 <MATCHI_LEN+0x2a>
    5faa:	eb 01       	movw	r28, r22
    5fac:	09 90       	ld	r0, Y+
    5fae:	00 20       	and	r0, r0
    5fb0:	e9 f7       	brne	.-6      	; 0x5fac <MATCHI_LEN+0x10>
    5fb2:	21 97       	sbiw	r28, 0x01	; 1
    5fb4:	c6 1b       	sub	r28, r22
    5fb6:	d7 0b       	sbc	r29, r23
    5fb8:	31 f0       	breq	.+12     	; 0x5fc6 <MATCHI_LEN+0x2a>
    5fba:	ae 01       	movw	r20, r28
    5fbc:	2b df       	rcall	.-426    	; 0x5e14 <strncasecmp>
    5fbe:	89 2b       	or	r24, r25
    5fc0:	11 f4       	brne	.+4      	; 0x5fc6 <MATCHI_LEN+0x2a>
    5fc2:	ce 01       	movw	r24, r28
    5fc4:	02 c0       	rjmp	.+4      	; 0x5fca <MATCHI_LEN+0x2e>
    5fc6:	80 e0       	ldi	r24, 0x00	; 0
    5fc8:	90 e0       	ldi	r25, 0x00	; 0
    5fca:	df 91       	pop	r29
    5fcc:	cf 91       	pop	r28
    5fce:	08 95       	ret

00005fd0 <split_args>:
    5fd0:	a0 e0       	ldi	r26, 0x00	; 0
    5fd2:	b0 e0       	ldi	r27, 0x00	; 0
    5fd4:	ee ee       	ldi	r30, 0xEE	; 238
    5fd6:	ff e2       	ldi	r31, 0x2F	; 47
    5fd8:	0c 94 e2 e0 	jmp	0x1c1c4	; 0x1c1c4 <__prologue_saves__+0x14>
    5fdc:	dc 01       	movw	r26, r24
    5fde:	6a 01       	movw	r12, r20
    5fe0:	8b 01       	movw	r16, r22
    5fe2:	fb 01       	movw	r30, r22
    5fe4:	80 e0       	ldi	r24, 0x00	; 0
    5fe6:	90 e0       	ldi	r25, 0x00	; 0
    5fe8:	8c 15       	cp	r24, r12
    5fea:	9d 05       	cpc	r25, r13
    5fec:	24 f4       	brge	.+8      	; 0x5ff6 <split_args+0x26>
    5fee:	11 92       	st	Z+, r1
    5ff0:	11 92       	st	Z+, r1
    5ff2:	01 96       	adiw	r24, 0x01	; 1
    5ff4:	f9 cf       	rjmp	.-14     	; 0x5fe8 <split_args+0x18>
    5ff6:	c1 14       	cp	r12, r1
    5ff8:	d1 04       	cpc	r13, r1
    5ffa:	d9 f1       	breq	.+118    	; 0x6072 <split_args+0xa2>
    5ffc:	10 97       	sbiw	r26, 0x00	; 0
    5ffe:	c9 f1       	breq	.+114    	; 0x6072 <split_args+0xa2>
    6000:	ee 24       	eor	r14, r14
    6002:	e3 94       	inc	r14
    6004:	f1 2c       	mov	r15, r1
    6006:	c0 e0       	ldi	r28, 0x00	; 0
    6008:	d0 e0       	ldi	r29, 0x00	; 0
    600a:	8c 91       	ld	r24, X
    600c:	88 23       	and	r24, r24
    600e:	b1 f1       	breq	.+108    	; 0x607c <split_args+0xac>
    6010:	cc 15       	cp	r28, r12
    6012:	dd 05       	cpc	r29, r13
    6014:	9c f5       	brge	.+102    	; 0x607c <split_args+0xac>
    6016:	cd 01       	movw	r24, r26
    6018:	65 df       	rcall	.-310    	; 0x5ee4 <skipspaces>
    601a:	dc 01       	movw	r26, r24
    601c:	2c 91       	ld	r18, X
    601e:	22 23       	and	r18, r18
    6020:	69 f1       	breq	.+90     	; 0x607c <split_args+0xac>
    6022:	22 32       	cpi	r18, 0x22	; 34
    6024:	79 f4       	brne	.+30     	; 0x6044 <split_args+0x74>
    6026:	fc 01       	movw	r30, r24
    6028:	31 96       	adiw	r30, 0x01	; 1
    602a:	d8 01       	movw	r26, r16
    602c:	ed 93       	st	X+, r30
    602e:	fc 93       	st	X, r31
    6030:	df 01       	movw	r26, r30
    6032:	80 81       	ld	r24, Z
    6034:	31 96       	adiw	r30, 0x01	; 1
    6036:	88 23       	and	r24, r24
    6038:	a9 f0       	breq	.+42     	; 0x6064 <split_args+0x94>
    603a:	82 32       	cpi	r24, 0x22	; 34
    603c:	c9 f7       	brne	.-14     	; 0x6030 <split_args+0x60>
    603e:	1c 92       	st	X, r1
    6040:	df 01       	movw	r26, r30
    6042:	10 c0       	rjmp	.+32     	; 0x6064 <split_args+0x94>
    6044:	f8 01       	movw	r30, r16
    6046:	91 83       	std	Z+1, r25	; 0x01
    6048:	80 83       	st	Z, r24
    604a:	fc 01       	movw	r30, r24
    604c:	2e 2f       	mov	r18, r30
    604e:	9f 2f       	mov	r25, r31
    6050:	81 91       	ld	r24, Z+
    6052:	3f ed       	ldi	r19, 0xDF	; 223
    6054:	38 0f       	add	r19, r24
    6056:	3e 35       	cpi	r19, 0x5E	; 94
    6058:	c8 f3       	brcs	.-14     	; 0x604c <split_args+0x7c>
    605a:	88 23       	and	r24, r24
    605c:	69 f0       	breq	.+26     	; 0x6078 <split_args+0xa8>
    605e:	a2 2f       	mov	r26, r18
    6060:	b9 2f       	mov	r27, r25
    6062:	1d 92       	st	X+, r1
    6064:	21 96       	adiw	r28, 0x01	; 1
    6066:	ff ef       	ldi	r31, 0xFF	; 255
    6068:	ef 1a       	sub	r14, r31
    606a:	ff 0a       	sbc	r15, r31
    606c:	0e 5f       	subi	r16, 0xFE	; 254
    606e:	1f 4f       	sbci	r17, 0xFF	; 255
    6070:	cc cf       	rjmp	.-104    	; 0x600a <split_args+0x3a>
    6072:	80 e0       	ldi	r24, 0x00	; 0
    6074:	90 e0       	ldi	r25, 0x00	; 0
    6076:	03 c0       	rjmp	.+6      	; 0x607e <split_args+0xae>
    6078:	c7 01       	movw	r24, r14
    607a:	01 c0       	rjmp	.+2      	; 0x607e <split_args+0xae>
    607c:	ce 01       	movw	r24, r28
    607e:	cd b7       	in	r28, 0x3d	; 61
    6080:	de b7       	in	r29, 0x3e	; 62
    6082:	e8 e0       	ldi	r30, 0x08	; 8
    6084:	0c 94 fe e0 	jmp	0x1c1fc	; 0x1c1fc <__epilogue_restores__+0x14>

00006088 <get_token>:
    6088:	ef 92       	push	r14
    608a:	ff 92       	push	r15
    608c:	0f 93       	push	r16
    608e:	1f 93       	push	r17
    6090:	cf 93       	push	r28
    6092:	df 93       	push	r29
    6094:	eb 01       	movw	r28, r22
    6096:	8a 01       	movw	r16, r20
    6098:	18 82       	st	Y, r1
    609a:	00 97       	sbiw	r24, 0x00	; 0
    609c:	89 f1       	breq	.+98     	; 0x6100 <get_token+0x78>
    609e:	fc 01       	movw	r30, r24
    60a0:	20 81       	ld	r18, Z
    60a2:	22 23       	and	r18, r18
    60a4:	79 f1       	breq	.+94     	; 0x6104 <get_token+0x7c>
    60a6:	1e df       	rcall	.-452    	; 0x5ee4 <skipspaces>
    60a8:	7c 01       	movw	r14, r24
    60aa:	0c df       	rcall	.-488    	; 0x5ec4 <trim_tail>
    60ac:	f7 01       	movw	r30, r14
    60ae:	cf 01       	movw	r24, r30
    60b0:	21 91       	ld	r18, Z+
    60b2:	21 32       	cpi	r18, 0x21	; 33
    60b4:	e0 f0       	brcs	.+56     	; 0x60ee <get_token+0x66>
    60b6:	10 16       	cp	r1, r16
    60b8:	11 06       	cpc	r1, r17
    60ba:	cc f4       	brge	.+50     	; 0x60ee <get_token+0x66>
    60bc:	22 32       	cpi	r18, 0x22	; 34
    60be:	79 f4       	brne	.+30     	; 0x60de <get_token+0x56>
    60c0:	fc 01       	movw	r30, r24
    60c2:	31 96       	adiw	r30, 0x01	; 1
    60c4:	0c 0f       	add	r16, r28
    60c6:	1d 1f       	adc	r17, r29
    60c8:	cf 01       	movw	r24, r30
    60ca:	21 91       	ld	r18, Z+
    60cc:	22 23       	and	r18, r18
    60ce:	79 f0       	breq	.+30     	; 0x60ee <get_token+0x66>
    60d0:	22 32       	cpi	r18, 0x22	; 34
    60d2:	59 f0       	breq	.+22     	; 0x60ea <get_token+0x62>
    60d4:	c0 17       	cp	r28, r16
    60d6:	d1 07       	cpc	r29, r17
    60d8:	51 f0       	breq	.+20     	; 0x60ee <get_token+0x66>
    60da:	29 93       	st	Y+, r18
    60dc:	f5 cf       	rjmp	.-22     	; 0x60c8 <get_token+0x40>
    60de:	2c 32       	cpi	r18, 0x2C	; 44
    60e0:	31 f0       	breq	.+12     	; 0x60ee <get_token+0x66>
    60e2:	29 93       	st	Y+, r18
    60e4:	01 50       	subi	r16, 0x01	; 1
    60e6:	11 09       	sbc	r17, r1
    60e8:	e2 cf       	rjmp	.-60     	; 0x60ae <get_token+0x26>
    60ea:	cf 01       	movw	r24, r30
    60ec:	18 82       	st	Y, r1
    60ee:	fa de       	rcall	.-524    	; 0x5ee4 <skipspaces>
    60f0:	fc 01       	movw	r30, r24
    60f2:	80 81       	ld	r24, Z
    60f4:	8c 32       	cpi	r24, 0x2C	; 44
    60f6:	09 f4       	brne	.+2      	; 0x60fa <get_token+0x72>
    60f8:	31 96       	adiw	r30, 0x01	; 1
    60fa:	18 82       	st	Y, r1
    60fc:	cf 01       	movw	r24, r30
    60fe:	02 c0       	rjmp	.+4      	; 0x6104 <get_token+0x7c>
    6100:	80 e0       	ldi	r24, 0x00	; 0
    6102:	90 e0       	ldi	r25, 0x00	; 0
    6104:	cd b7       	in	r28, 0x3d	; 61
    6106:	de b7       	in	r29, 0x3e	; 62
    6108:	e6 e0       	ldi	r30, 0x06	; 6
    610a:	0c 94 00 e1 	jmp	0x1c200	; 0x1c200 <__epilogue_restores__+0x18>

0000610e <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{
    610e:	a2 e0       	ldi	r26, 0x02	; 2
    6110:	b0 e0       	ldi	r27, 0x00	; 0
    6112:	ed e8       	ldi	r30, 0x8D	; 141
    6114:	f0 e3       	ldi	r31, 0x30	; 48
    6116:	0c 94 e6 e0 	jmp	0x1c1cc	; 0x1c1cc <__prologue_saves__+0x1c>
    int base;
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
    611a:	00 97       	sbiw	r24, 0x00	; 0
    611c:	79 f1       	breq	.+94     	; 0x617c <get_value+0x6e>
    611e:	fc 01       	movw	r30, r24
    6120:	20 81       	ld	r18, Z
    6122:	22 23       	and	r18, r18
    6124:	59 f1       	breq	.+86     	; 0x617c <get_value+0x6e>
        return(0);

    ptr = skipspaces(str);
    6126:	de de       	rcall	.-580    	; 0x5ee4 <skipspaces>
    6128:	8c 01       	movw	r16, r24
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    612a:	6f e2       	ldi	r22, 0x2F	; 47
    612c:	73 e0       	ldi	r23, 0x03	; 3
    612e:	36 df       	rcall	.-404    	; 0x5f9c <MATCHI_LEN>
    6130:	00 97       	sbiw	r24, 0x00	; 0
    6132:	29 f0       	breq	.+10     	; 0x613e <get_value+0x30>
    {
        base = 16;
        ptr += ret;
    6134:	08 0f       	add	r16, r24
    6136:	19 1f       	adc	r17, r25
    base = 10;

// convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    6138:	40 e1       	ldi	r20, 0x10	; 16
    613a:	50 e0       	ldi	r21, 0x00	; 0
    613c:	18 c0       	rjmp	.+48     	; 0x616e <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    613e:	62 e3       	ldi	r22, 0x32	; 50
    6140:	73 e0       	ldi	r23, 0x03	; 3
    6142:	c8 01       	movw	r24, r16
    6144:	2b df       	rcall	.-426    	; 0x5f9c <MATCHI_LEN>
    6146:	00 97       	sbiw	r24, 0x00	; 0
    6148:	29 f0       	breq	.+10     	; 0x6154 <get_value+0x46>
    {
        base = 8;
        ptr += ret;
    614a:	08 0f       	add	r16, r24
    614c:	19 1f       	adc	r17, r25
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    614e:	48 e0       	ldi	r20, 0x08	; 8
    6150:	50 e0       	ldi	r21, 0x00	; 0
    6152:	0d c0       	rjmp	.+26     	; 0x616e <get_value+0x60>
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    6154:	65 e3       	ldi	r22, 0x35	; 53
    6156:	73 e0       	ldi	r23, 0x03	; 3
    6158:	c8 01       	movw	r24, r16
    615a:	20 df       	rcall	.-448    	; 0x5f9c <MATCHI_LEN>
    615c:	00 97       	sbiw	r24, 0x00	; 0
    615e:	29 f0       	breq	.+10     	; 0x616a <get_value+0x5c>
    {
        base = 2;
        ptr += ret;
    6160:	08 0f       	add	r16, r24
    6162:	19 1f       	adc	r17, r25
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    6164:	42 e0       	ldi	r20, 0x02	; 2
    6166:	50 e0       	ldi	r21, 0x00	; 0
    6168:	02 c0       	rjmp	.+4      	; 0x616e <get_value+0x60>

    if(!str || *str == 0)
        return(0);

    ptr = skipspaces(str);
    base = 10;
    616a:	4a e0       	ldi	r20, 0x0A	; 10
    616c:	50 e0       	ldi	r21, 0x00	; 0
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    616e:	be 01       	movw	r22, r28
    6170:	6f 5f       	subi	r22, 0xFF	; 255
    6172:	7f 4f       	sbci	r23, 0xFF	; 255
    6174:	c8 01       	movw	r24, r16
    6176:	0e 94 7e 44 	call	0x88fc	; 0x88fc <strtol>
    617a:	03 c0       	rjmp	.+6      	; 0x6182 <get_value+0x74>
    int ret;
    char *ptr;
    char *endptr;

    if(!str || *str == 0)
        return(0);
    617c:	60 e0       	ldi	r22, 0x00	; 0
    617e:	70 e0       	ldi	r23, 0x00	; 0
    6180:	cb 01       	movw	r24, r22
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
}
    6182:	22 96       	adiw	r28, 0x02	; 2
    6184:	e4 e0       	ldi	r30, 0x04	; 4
    6186:	0c 94 02 e1 	jmp	0x1c204	; 0x1c204 <__epilogue_restores__+0x1c>

0000618a <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    618a:	78 94       	sei
    618c:	08 95       	ret

0000618e <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    618e:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;             // No Prescale
    6190:	89 e0       	ldi	r24, 0x09	; 9
    6192:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    6196:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);              // 0 .. count
    619a:	8f e1       	ldi	r24, 0x1F	; 31
    619c:	9e e4       	ldi	r25, 0x4E	; 78
    619e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    61a2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);                        //Enable the Output Compare A interrupt
    61a6:	ef e6       	ldi	r30, 0x6F	; 111
    61a8:	f0 e0       	ldi	r31, 0x00	; 0
    61aa:	80 81       	ld	r24, Z
    61ac:	82 60       	ori	r24, 0x02	; 2
    61ae:	80 83       	st	Z, r24
    sei();
    61b0:	78 94       	sei
    61b2:	08 95       	ret

000061b4 <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    61b4:	1f 92       	push	r1
    61b6:	0f 92       	push	r0
    61b8:	0f b6       	in	r0, 0x3f	; 63
    61ba:	0f 92       	push	r0
    61bc:	11 24       	eor	r1, r1
    61be:	0b b6       	in	r0, 0x3b	; 59
    61c0:	0f 92       	push	r0
    61c2:	2f 93       	push	r18
    61c4:	3f 93       	push	r19
    61c6:	4f 93       	push	r20
    61c8:	5f 93       	push	r21
    61ca:	6f 93       	push	r22
    61cc:	7f 93       	push	r23
    61ce:	8f 93       	push	r24
    61d0:	9f 93       	push	r25
    61d2:	af 93       	push	r26
    61d4:	bf 93       	push	r27
    61d6:	ef 93       	push	r30
    61d8:	ff 93       	push	r31
    execute_timers();
    61da:	36 d2       	rcall	.+1132   	; 0x6648 <execute_timers>
}
    61dc:	ff 91       	pop	r31
    61de:	ef 91       	pop	r30
    61e0:	bf 91       	pop	r27
    61e2:	af 91       	pop	r26
    61e4:	9f 91       	pop	r25
    61e6:	8f 91       	pop	r24
    61e8:	7f 91       	pop	r23
    61ea:	6f 91       	pop	r22
    61ec:	5f 91       	pop	r21
    61ee:	4f 91       	pop	r20
    61f0:	3f 91       	pop	r19
    61f2:	2f 91       	pop	r18
    61f4:	0f 90       	pop	r0
    61f6:	0b be       	out	0x3b, r0	; 59
    61f8:	0f 90       	pop	r0
    61fa:	0f be       	out	0x3f, r0	; 63
    61fc:	0f 90       	pop	r0
    61fe:	1f 90       	pop	r1
    6200:	18 95       	reti

00006202 <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    6202:	0f 93       	push	r16
    6204:	1f 93       	push	r17
    6206:	cf 93       	push	r28
    6208:	df 93       	push	r29
    620a:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

// disable interrupts
    cli();
    620c:	f8 94       	cli

    count1 = TCNT1;
    620e:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6212:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    6216:	80 91 6a 1a 	lds	r24, 0x1A6A	; 0x801a6a <__clock>
    621a:	90 91 6b 1a 	lds	r25, 0x1A6B	; 0x801a6b <__clock+0x1>
    621e:	a0 91 6c 1a 	lds	r26, 0x1A6C	; 0x801a6c <__clock+0x2>
    6222:	b0 91 6d 1a 	lds	r27, 0x1A6D	; 0x801a6d <__clock+0x3>
    6226:	80 83       	st	Z, r24
    6228:	91 83       	std	Z+1, r25	; 0x01
    622a:	a2 83       	std	Z+2, r26	; 0x02
    622c:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    622e:	80 91 6e 1a 	lds	r24, 0x1A6E	; 0x801a6e <__clock+0x4>
    6232:	90 91 6f 1a 	lds	r25, 0x1A6F	; 0x801a6f <__clock+0x5>
    6236:	a0 91 70 1a 	lds	r26, 0x1A70	; 0x801a70 <__clock+0x6>
    623a:	b0 91 71 1a 	lds	r27, 0x1A71	; 0x801a71 <__clock+0x7>
    623e:	84 83       	std	Z+4, r24	; 0x04
    6240:	95 83       	std	Z+5, r25	; 0x05
    6242:	a6 83       	std	Z+6, r26	; 0x06
    6244:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    6246:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    624a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    624e:	b1 9b       	sbis	0x16, 1	; 22
    6250:	03 c0       	rjmp	.+6      	; 0x6258 <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6252:	c0 e0       	ldi	r28, 0x00	; 0
    6254:	d0 e0       	ldi	r29, 0x00	; 0
    6256:	3f c0       	rjmp	.+126    	; 0x62d6 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    6258:	82 17       	cp	r24, r18
    625a:	93 07       	cpc	r25, r19
    625c:	d0 f1       	brcs	.+116    	; 0x62d2 <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    625e:	c0 e0       	ldi	r28, 0x00	; 0
    6260:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id  __attribute__((unused)), struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    6262:	40 e0       	ldi	r20, 0x00	; 0
    6264:	50 e0       	ldi	r21, 0x00	; 0
    6266:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    6268:	9a 01       	movw	r18, r20
    626a:	ab 01       	movw	r20, r22
    626c:	28 0f       	add	r18, r24
    626e:	39 1f       	adc	r19, r25
    6270:	41 1d       	adc	r20, r1
    6272:	51 1d       	adc	r21, r1

// enable interrupts
    sei();
    6274:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6276:	a2 e3       	ldi	r26, 0x32	; 50
    6278:	b0 e0       	ldi	r27, 0x00	; 0
    627a:	0e 94 b8 e0 	call	0x1c170	; 0x1c170 <__muluhisi3>
    627e:	04 81       	ldd	r16, Z+4	; 0x04
    6280:	15 81       	ldd	r17, Z+5	; 0x05
    6282:	26 81       	ldd	r18, Z+6	; 0x06
    6284:	37 81       	ldd	r19, Z+7	; 0x07
    6286:	dc 01       	movw	r26, r24
    6288:	cb 01       	movw	r24, r22
    628a:	80 0f       	add	r24, r16
    628c:	91 1f       	adc	r25, r17
    628e:	a2 1f       	adc	r26, r18
    6290:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    6292:	81 15       	cp	r24, r1
    6294:	2a ec       	ldi	r18, 0xCA	; 202
    6296:	92 07       	cpc	r25, r18
    6298:	2a e9       	ldi	r18, 0x9A	; 154
    629a:	a2 07       	cpc	r26, r18
    629c:	2b e3       	ldi	r18, 0x3B	; 59
    629e:	b2 07       	cpc	r27, r18
    62a0:	2c f4       	brge	.+10     	; 0x62ac <clock_gettime+0xaa>
// enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    62a2:	84 83       	std	Z+4, r24	; 0x04
    62a4:	95 83       	std	Z+5, r25	; 0x05
    62a6:	a6 83       	std	Z+6, r26	; 0x06
    62a8:	b7 83       	std	Z+7, r27	; 0x07
    62aa:	1a c0       	rjmp	.+52     	; 0x62e0 <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    62ac:	9a 5c       	subi	r25, 0xCA	; 202
    62ae:	aa 49       	sbci	r26, 0x9A	; 154
    62b0:	bb 43       	sbci	r27, 0x3B	; 59
    62b2:	84 83       	std	Z+4, r24	; 0x04
    62b4:	95 83       	std	Z+5, r25	; 0x05
    62b6:	a6 83       	std	Z+6, r26	; 0x06
    62b8:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    62ba:	80 81       	ld	r24, Z
    62bc:	91 81       	ldd	r25, Z+1	; 0x01
    62be:	a2 81       	ldd	r26, Z+2	; 0x02
    62c0:	b3 81       	ldd	r27, Z+3	; 0x03
    62c2:	01 96       	adiw	r24, 0x01	; 1
    62c4:	a1 1d       	adc	r26, r1
    62c6:	b1 1d       	adc	r27, r1
    62c8:	80 83       	st	Z, r24
    62ca:	91 83       	std	Z+1, r25	; 0x01
    62cc:	a2 83       	std	Z+2, r26	; 0x02
    62ce:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    62d0:	07 c0       	rjmp	.+14     	; 0x62e0 <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;                          // counter overflow and NO pending is an error!
    62d2:	cf ef       	ldi	r28, 0xFF	; 255
    62d4:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    62d6:	40 e2       	ldi	r20, 0x20	; 32
    62d8:	5e e4       	ldi	r21, 0x4E	; 78
    62da:	60 e0       	ldi	r22, 0x00	; 0
    62dc:	70 e0       	ldi	r23, 0x00	; 0
    62de:	c4 cf       	rjmp	.-120    	; 0x6268 <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    62e0:	ce 01       	movw	r24, r28
    62e2:	df 91       	pop	r29
    62e4:	cf 91       	pop	r28
    62e6:	1f 91       	pop	r17
    62e8:	0f 91       	pop	r16
    62ea:	08 95       	ret

000062ec <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    62ec:	80 91 6e 1a 	lds	r24, 0x1A6E	; 0x801a6e <__clock+0x4>
    62f0:	90 91 6f 1a 	lds	r25, 0x1A6F	; 0x801a6f <__clock+0x5>
    62f4:	a0 91 70 1a 	lds	r26, 0x1A70	; 0x801a70 <__clock+0x6>
    62f8:	b0 91 71 1a 	lds	r27, 0x1A71	; 0x801a71 <__clock+0x7>
    62fc:	80 5c       	subi	r24, 0xC0	; 192
    62fe:	9d 4b       	sbci	r25, 0xBD	; 189
    6300:	a0 4f       	sbci	r26, 0xF0	; 240
    6302:	bf 4f       	sbci	r27, 0xFF	; 255
    6304:	80 93 6e 1a 	sts	0x1A6E, r24	; 0x801a6e <__clock+0x4>
    6308:	90 93 6f 1a 	sts	0x1A6F, r25	; 0x801a6f <__clock+0x5>
    630c:	a0 93 70 1a 	sts	0x1A70, r26	; 0x801a70 <__clock+0x6>
    6310:	b0 93 71 1a 	sts	0x1A71, r27	; 0x801a71 <__clock+0x7>
    6314:	80 91 6e 1a 	lds	r24, 0x1A6E	; 0x801a6e <__clock+0x4>
    6318:	90 91 6f 1a 	lds	r25, 0x1A6F	; 0x801a6f <__clock+0x5>
    631c:	a0 91 70 1a 	lds	r26, 0x1A70	; 0x801a70 <__clock+0x6>
    6320:	b0 91 71 1a 	lds	r27, 0x1A71	; 0x801a71 <__clock+0x7>
    6324:	81 15       	cp	r24, r1
    6326:	9a 4c       	sbci	r25, 0xCA	; 202
    6328:	aa 49       	sbci	r26, 0x9A	; 154
    632a:	bb 43       	sbci	r27, 0x3B	; 59
    632c:	dc f0       	brlt	.+54     	; 0x6364 <clock_task+0x78>
    632e:	80 91 6a 1a 	lds	r24, 0x1A6A	; 0x801a6a <__clock>
    6332:	90 91 6b 1a 	lds	r25, 0x1A6B	; 0x801a6b <__clock+0x1>
    6336:	a0 91 6c 1a 	lds	r26, 0x1A6C	; 0x801a6c <__clock+0x2>
    633a:	b0 91 6d 1a 	lds	r27, 0x1A6D	; 0x801a6d <__clock+0x3>
    633e:	01 96       	adiw	r24, 0x01	; 1
    6340:	a1 1d       	adc	r26, r1
    6342:	b1 1d       	adc	r27, r1
    6344:	80 93 6a 1a 	sts	0x1A6A, r24	; 0x801a6a <__clock>
    6348:	90 93 6b 1a 	sts	0x1A6B, r25	; 0x801a6b <__clock+0x1>
    634c:	a0 93 6c 1a 	sts	0x1A6C, r26	; 0x801a6c <__clock+0x2>
    6350:	b0 93 6d 1a 	sts	0x1A6D, r27	; 0x801a6d <__clock+0x3>
    6354:	10 92 6e 1a 	sts	0x1A6E, r1	; 0x801a6e <__clock+0x4>
    6358:	10 92 6f 1a 	sts	0x1A6F, r1	; 0x801a6f <__clock+0x5>
    635c:	10 92 70 1a 	sts	0x1A70, r1	; 0x801a70 <__clock+0x6>
    6360:	10 92 71 1a 	sts	0x1A71, r1	; 0x801a71 <__clock+0x7>
    6364:	08 95       	ret

00006366 <clock_settime.part.2>:
    6366:	fc 01       	movw	r30, r24
    6368:	84 81       	ldd	r24, Z+4	; 0x04
    636a:	95 81       	ldd	r25, Z+5	; 0x05
    636c:	a6 81       	ldd	r26, Z+6	; 0x06
    636e:	b7 81       	ldd	r27, Z+7	; 0x07
    6370:	80 93 6e 1a 	sts	0x1A6E, r24	; 0x801a6e <__clock+0x4>
    6374:	90 93 6f 1a 	sts	0x1A6F, r25	; 0x801a6f <__clock+0x5>
    6378:	a0 93 70 1a 	sts	0x1A70, r26	; 0x801a70 <__clock+0x6>
    637c:	b0 93 71 1a 	sts	0x1A71, r27	; 0x801a71 <__clock+0x7>
    6380:	80 81       	ld	r24, Z
    6382:	91 81       	ldd	r25, Z+1	; 0x01
    6384:	a2 81       	ldd	r26, Z+2	; 0x02
    6386:	b3 81       	ldd	r27, Z+3	; 0x03
    6388:	80 93 6a 1a 	sts	0x1A6A, r24	; 0x801a6a <__clock>
    638c:	90 93 6b 1a 	sts	0x1A6B, r25	; 0x801a6b <__clock+0x1>
    6390:	a0 93 6c 1a 	sts	0x1A6C, r26	; 0x801a6c <__clock+0x2>
    6394:	b0 93 6d 1a 	sts	0x1A6D, r27	; 0x801a6d <__clock+0x3>
    6398:	80 91 6e 1a 	lds	r24, 0x1A6E	; 0x801a6e <__clock+0x4>
    639c:	90 91 6f 1a 	lds	r25, 0x1A6F	; 0x801a6f <__clock+0x5>
    63a0:	a0 91 70 1a 	lds	r26, 0x1A70	; 0x801a70 <__clock+0x6>
    63a4:	b0 91 71 1a 	lds	r27, 0x1A71	; 0x801a71 <__clock+0x7>
    63a8:	44 81       	ldd	r20, Z+4	; 0x04
    63aa:	55 81       	ldd	r21, Z+5	; 0x05
    63ac:	66 81       	ldd	r22, Z+6	; 0x06
    63ae:	77 81       	ldd	r23, Z+7	; 0x07
    63b0:	48 17       	cp	r20, r24
    63b2:	59 07       	cpc	r21, r25
    63b4:	6a 07       	cpc	r22, r26
    63b6:	7b 07       	cpc	r23, r27
    63b8:	b9 f6       	brne	.-82     	; 0x6368 <clock_settime.part.2+0x2>
    63ba:	80 91 6a 1a 	lds	r24, 0x1A6A	; 0x801a6a <__clock>
    63be:	90 91 6b 1a 	lds	r25, 0x1A6B	; 0x801a6b <__clock+0x1>
    63c2:	a0 91 6c 1a 	lds	r26, 0x1A6C	; 0x801a6c <__clock+0x2>
    63c6:	b0 91 6d 1a 	lds	r27, 0x1A6D	; 0x801a6d <__clock+0x3>
    63ca:	40 81       	ld	r20, Z
    63cc:	51 81       	ldd	r21, Z+1	; 0x01
    63ce:	62 81       	ldd	r22, Z+2	; 0x02
    63d0:	73 81       	ldd	r23, Z+3	; 0x03
    63d2:	48 17       	cp	r20, r24
    63d4:	59 07       	cpc	r21, r25
    63d6:	6a 07       	cpc	r22, r26
    63d8:	7b 07       	cpc	r23, r27
    63da:	31 f6       	brne	.-116    	; 0x6368 <clock_settime.part.2+0x2>
    63dc:	80 e0       	ldi	r24, 0x00	; 0
    63de:	90 e0       	ldi	r25, 0x00	; 0
    63e0:	08 95       	ret

000063e2 <set_timers>:
    63e2:	00 d0       	rcall	.+0      	; 0x63e4 <set_timers+0x2>
    63e4:	1f 92       	push	r1
    63e6:	00 97       	sbiw	r24, 0x00	; 0
    63e8:	79 f1       	breq	.+94     	; 0x6448 <set_timers+0x66>
    63ea:	e2 e7       	ldi	r30, 0x72	; 114
    63ec:	fa e1       	ldi	r31, 0x1A	; 26
    63ee:	4f ef       	ldi	r20, 0xFF	; 255
    63f0:	5f ef       	ldi	r21, 0xFF	; 255
    63f2:	20 e0       	ldi	r18, 0x00	; 0
    63f4:	30 e0       	ldi	r19, 0x00	; 0
    63f6:	60 81       	ld	r22, Z
    63f8:	71 81       	ldd	r23, Z+1	; 0x01
    63fa:	86 17       	cp	r24, r22
    63fc:	97 07       	cpc	r25, r23
    63fe:	79 f0       	breq	.+30     	; 0x641e <set_timers+0x3c>
    6400:	67 2b       	or	r22, r23
    6402:	71 f4       	brne	.+28     	; 0x6420 <set_timers+0x3e>
    6404:	f9 01       	movw	r30, r18
    6406:	ee 0f       	add	r30, r30
    6408:	ff 1f       	adc	r31, r31
    640a:	e2 0f       	add	r30, r18
    640c:	f3 1f       	adc	r31, r19
    640e:	ee 58       	subi	r30, 0x8E	; 142
    6410:	f5 4e       	sbci	r31, 0xE5	; 229
    6412:	91 83       	std	Z+1, r25	; 0x01
    6414:	80 83       	st	Z, r24
    6416:	81 e0       	ldi	r24, 0x01	; 1
    6418:	82 83       	std	Z+2, r24	; 0x02
    641a:	c9 01       	movw	r24, r18
    641c:	19 c0       	rjmp	.+50     	; 0x6450 <set_timers+0x6e>
    641e:	a9 01       	movw	r20, r18
    6420:	2f 5f       	subi	r18, 0xFF	; 255
    6422:	3f 4f       	sbci	r19, 0xFF	; 255
    6424:	33 96       	adiw	r30, 0x03	; 3
    6426:	28 30       	cpi	r18, 0x08	; 8
    6428:	31 05       	cpc	r19, r1
    642a:	29 f7       	brne	.-54     	; 0x63f6 <set_timers+0x14>
    642c:	4f 3f       	cpi	r20, 0xFF	; 255
    642e:	8f ef       	ldi	r24, 0xFF	; 255
    6430:	58 07       	cpc	r21, r24
    6432:	69 f4       	brne	.+26     	; 0x644e <set_timers+0x6c>
    6434:	81 ee       	ldi	r24, 0xE1	; 225
    6436:	95 e0       	ldi	r25, 0x05	; 5
    6438:	a0 e0       	ldi	r26, 0x00	; 0
    643a:	ed b7       	in	r30, 0x3d	; 61
    643c:	fe b7       	in	r31, 0x3e	; 62
    643e:	81 83       	std	Z+1, r24	; 0x01
    6440:	92 83       	std	Z+2, r25	; 0x02
    6442:	a3 83       	std	Z+3, r26	; 0x03
    6444:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    6448:	8f ef       	ldi	r24, 0xFF	; 255
    644a:	9f ef       	ldi	r25, 0xFF	; 255
    644c:	01 c0       	rjmp	.+2      	; 0x6450 <set_timers+0x6e>
    644e:	ca 01       	movw	r24, r20
    6450:	0f 90       	pop	r0
    6452:	0f 90       	pop	r0
    6454:	0f 90       	pop	r0
    6456:	08 95       	ret

00006458 <delete_all_timers>:
    6458:	e2 e7       	ldi	r30, 0x72	; 114
    645a:	fa e1       	ldi	r31, 0x1A	; 26
    645c:	12 82       	std	Z+2, r1	; 0x02
    645e:	11 82       	std	Z+1, r1	; 0x01
    6460:	10 82       	st	Z, r1
    6462:	33 96       	adiw	r30, 0x03	; 3
    6464:	8a e1       	ldi	r24, 0x1A	; 26
    6466:	ea 38       	cpi	r30, 0x8A	; 138
    6468:	f8 07       	cpc	r31, r24
    646a:	c1 f7       	brne	.-16     	; 0x645c <delete_all_timers+0x4>
    646c:	08 95       	ret

0000646e <subtract_timespec>:
    646e:	0f 93       	push	r16
    6470:	1f 93       	push	r17
    6472:	cf 93       	push	r28
    6474:	df 93       	push	r29
    6476:	fc 01       	movw	r30, r24
    6478:	84 81       	ldd	r24, Z+4	; 0x04
    647a:	95 81       	ldd	r25, Z+5	; 0x05
    647c:	a6 81       	ldd	r26, Z+6	; 0x06
    647e:	b7 81       	ldd	r27, Z+7	; 0x07
    6480:	eb 01       	movw	r28, r22
    6482:	0c 81       	ldd	r16, Y+4	; 0x04
    6484:	1d 81       	ldd	r17, Y+5	; 0x05
    6486:	2e 81       	ldd	r18, Y+6	; 0x06
    6488:	3f 81       	ldd	r19, Y+7	; 0x07
    648a:	80 1b       	sub	r24, r16
    648c:	91 0b       	sbc	r25, r17
    648e:	a2 0b       	sbc	r26, r18
    6490:	b3 0b       	sbc	r27, r19
    6492:	b7 fd       	sbrc	r27, 7
    6494:	05 c0       	rjmp	.+10     	; 0x64a0 <subtract_timespec+0x32>
    6496:	84 83       	std	Z+4, r24	; 0x04
    6498:	95 83       	std	Z+5, r25	; 0x05
    649a:	a6 83       	std	Z+6, r26	; 0x06
    649c:	b7 83       	std	Z+7, r27	; 0x07
    649e:	12 c0       	rjmp	.+36     	; 0x64c4 <subtract_timespec+0x56>
    64a0:	96 53       	subi	r25, 0x36	; 54
    64a2:	a5 46       	sbci	r26, 0x65	; 101
    64a4:	b4 4c       	sbci	r27, 0xC4	; 196
    64a6:	84 83       	std	Z+4, r24	; 0x04
    64a8:	95 83       	std	Z+5, r25	; 0x05
    64aa:	a6 83       	std	Z+6, r26	; 0x06
    64ac:	b7 83       	std	Z+7, r27	; 0x07
    64ae:	80 81       	ld	r24, Z
    64b0:	91 81       	ldd	r25, Z+1	; 0x01
    64b2:	a2 81       	ldd	r26, Z+2	; 0x02
    64b4:	b3 81       	ldd	r27, Z+3	; 0x03
    64b6:	01 97       	sbiw	r24, 0x01	; 1
    64b8:	a1 09       	sbc	r26, r1
    64ba:	b1 09       	sbc	r27, r1
    64bc:	80 83       	st	Z, r24
    64be:	91 83       	std	Z+1, r25	; 0x01
    64c0:	a2 83       	std	Z+2, r26	; 0x02
    64c2:	b3 83       	std	Z+3, r27	; 0x03
    64c4:	80 81       	ld	r24, Z
    64c6:	91 81       	ldd	r25, Z+1	; 0x01
    64c8:	a2 81       	ldd	r26, Z+2	; 0x02
    64ca:	b3 81       	ldd	r27, Z+3	; 0x03
    64cc:	eb 01       	movw	r28, r22
    64ce:	48 81       	ld	r20, Y
    64d0:	59 81       	ldd	r21, Y+1	; 0x01
    64d2:	6a 81       	ldd	r22, Y+2	; 0x02
    64d4:	7b 81       	ldd	r23, Y+3	; 0x03
    64d6:	84 1b       	sub	r24, r20
    64d8:	95 0b       	sbc	r25, r21
    64da:	a6 0b       	sbc	r26, r22
    64dc:	b7 0b       	sbc	r27, r23
    64de:	80 83       	st	Z, r24
    64e0:	91 83       	std	Z+1, r25	; 0x01
    64e2:	a2 83       	std	Z+2, r26	; 0x02
    64e4:	b3 83       	std	Z+3, r27	; 0x03
    64e6:	df 91       	pop	r29
    64e8:	cf 91       	pop	r28
    64ea:	1f 91       	pop	r17
    64ec:	0f 91       	pop	r16
    64ee:	08 95       	ret

000064f0 <ts_to_str>:
    64f0:	ad b7       	in	r26, 0x3d	; 61
    64f2:	be b7       	in	r27, 0x3e	; 62
    64f4:	1f 97       	sbiw	r26, 0x0f	; 15
    64f6:	0f b6       	in	r0, 0x3f	; 63
    64f8:	f8 94       	cli
    64fa:	be bf       	out	0x3e, r27	; 62
    64fc:	0f be       	out	0x3f, r0	; 63
    64fe:	ad bf       	out	0x3d, r26	; 61
    6500:	fc 01       	movw	r30, r24
    6502:	44 81       	ldd	r20, Z+4	; 0x04
    6504:	55 81       	ldd	r21, Z+5	; 0x05
    6506:	66 81       	ldd	r22, Z+6	; 0x06
    6508:	77 81       	ldd	r23, Z+7	; 0x07
    650a:	ed b7       	in	r30, 0x3d	; 61
    650c:	fe b7       	in	r31, 0x3e	; 62
    650e:	44 87       	std	Z+12, r20	; 0x0c
    6510:	55 87       	std	Z+13, r21	; 0x0d
    6512:	66 87       	std	Z+14, r22	; 0x0e
    6514:	77 87       	std	Z+15, r23	; 0x0f
    6516:	fc 01       	movw	r30, r24
    6518:	80 81       	ld	r24, Z
    651a:	91 81       	ldd	r25, Z+1	; 0x01
    651c:	a2 81       	ldd	r26, Z+2	; 0x02
    651e:	b3 81       	ldd	r27, Z+3	; 0x03
    6520:	ed b7       	in	r30, 0x3d	; 61
    6522:	fe b7       	in	r31, 0x3e	; 62
    6524:	80 87       	std	Z+8, r24	; 0x08
    6526:	91 87       	std	Z+9, r25	; 0x09
    6528:	a2 87       	std	Z+10, r26	; 0x0a
    652a:	b3 87       	std	Z+11, r27	; 0x0b
    652c:	87 ed       	ldi	r24, 0xD7	; 215
    652e:	95 e0       	ldi	r25, 0x05	; 5
    6530:	a0 e0       	ldi	r26, 0x00	; 0
    6532:	85 83       	std	Z+5, r24	; 0x05
    6534:	96 83       	std	Z+6, r25	; 0x06
    6536:	a7 83       	std	Z+7, r26	; 0x07
    6538:	8f e1       	ldi	r24, 0x1F	; 31
    653a:	90 e0       	ldi	r25, 0x00	; 0
    653c:	94 83       	std	Z+4, r25	; 0x04
    653e:	83 83       	std	Z+3, r24	; 0x03
    6540:	80 ea       	ldi	r24, 0xA0	; 160
    6542:	97 e1       	ldi	r25, 0x17	; 23
    6544:	92 83       	std	Z+2, r25	; 0x02
    6546:	81 83       	std	Z+1, r24	; 0x01
    6548:	0e 94 1b 44 	call	0x8836	; 0x8836 <snprintf_P>
    654c:	80 ea       	ldi	r24, 0xA0	; 160
    654e:	97 e1       	ldi	r25, 0x17	; 23
    6550:	ad b7       	in	r26, 0x3d	; 61
    6552:	be b7       	in	r27, 0x3e	; 62
    6554:	1f 96       	adiw	r26, 0x0f	; 15
    6556:	0f b6       	in	r0, 0x3f	; 63
    6558:	f8 94       	cli
    655a:	be bf       	out	0x3e, r27	; 62
    655c:	0f be       	out	0x3f, r0	; 63
    655e:	ad bf       	out	0x3d, r26	; 61
    6560:	08 95       	ret

00006562 <clock_elapsed_begin>:
    6562:	68 e9       	ldi	r22, 0x98	; 152
    6564:	77 e1       	ldi	r23, 0x17	; 23
    6566:	80 e0       	ldi	r24, 0x00	; 0
    6568:	90 e0       	ldi	r25, 0x00	; 0
    656a:	4b ce       	rjmp	.-874    	; 0x6202 <clock_gettime>
    656c:	08 95       	ret

0000656e <clock_elapsed_end>:
    656e:	af e0       	ldi	r26, 0x0F	; 15
    6570:	b0 e0       	ldi	r27, 0x00	; 0
    6572:	ed eb       	ldi	r30, 0xBD	; 189
    6574:	f2 e3       	ldi	r31, 0x32	; 50
    6576:	0c 94 e6 e0 	jmp	0x1c1cc	; 0x1c1cc <__prologue_saves__+0x1c>
    657a:	8c 01       	movw	r16, r24
    657c:	be 01       	movw	r22, r28
    657e:	68 5f       	subi	r22, 0xF8	; 248
    6580:	7f 4f       	sbci	r23, 0xFF	; 255
    6582:	80 e0       	ldi	r24, 0x00	; 0
    6584:	90 e0       	ldi	r25, 0x00	; 0
    6586:	3d de       	rcall	.-902    	; 0x6202 <clock_gettime>
    6588:	68 e9       	ldi	r22, 0x98	; 152
    658a:	77 e1       	ldi	r23, 0x17	; 23
    658c:	ce 01       	movw	r24, r28
    658e:	08 96       	adiw	r24, 0x08	; 8
    6590:	6e df       	rcall	.-292    	; 0x646e <subtract_timespec>
    6592:	01 15       	cp	r16, r1
    6594:	11 05       	cpc	r17, r1
    6596:	b1 f0       	breq	.+44     	; 0x65c4 <clock_elapsed_end+0x56>
    6598:	f8 01       	movw	r30, r16
    659a:	80 81       	ld	r24, Z
    659c:	88 23       	and	r24, r24
    659e:	91 f0       	breq	.+36     	; 0x65c4 <clock_elapsed_end+0x56>
    65a0:	ce 01       	movw	r24, r28
    65a2:	08 96       	adiw	r24, 0x08	; 8
    65a4:	a5 df       	rcall	.-182    	; 0x64f0 <ts_to_str>
    65a6:	ed b7       	in	r30, 0x3d	; 61
    65a8:	fe b7       	in	r31, 0x3e	; 62
    65aa:	97 83       	std	Z+7, r25	; 0x07
    65ac:	86 83       	std	Z+6, r24	; 0x06
    65ae:	15 83       	std	Z+5, r17	; 0x05
    65b0:	04 83       	std	Z+4, r16	; 0x04
    65b2:	89 ec       	ldi	r24, 0xC9	; 201
    65b4:	95 e0       	ldi	r25, 0x05	; 5
    65b6:	a0 e0       	ldi	r26, 0x00	; 0
    65b8:	81 83       	std	Z+1, r24	; 0x01
    65ba:	92 83       	std	Z+2, r25	; 0x02
    65bc:	a3 83       	std	Z+3, r26	; 0x03
    65be:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    65c2:	0f c0       	rjmp	.+30     	; 0x65e2 <clock_elapsed_end+0x74>
    65c4:	ce 01       	movw	r24, r28
    65c6:	08 96       	adiw	r24, 0x08	; 8
    65c8:	93 df       	rcall	.-218    	; 0x64f0 <ts_to_str>
    65ca:	ed b7       	in	r30, 0x3d	; 61
    65cc:	fe b7       	in	r31, 0x3e	; 62
    65ce:	95 83       	std	Z+5, r25	; 0x05
    65d0:	84 83       	std	Z+4, r24	; 0x04
    65d2:	8e eb       	ldi	r24, 0xBE	; 190
    65d4:	95 e0       	ldi	r25, 0x05	; 5
    65d6:	a0 e0       	ldi	r26, 0x00	; 0
    65d8:	81 83       	std	Z+1, r24	; 0x01
    65da:	92 83       	std	Z+2, r25	; 0x02
    65dc:	a3 83       	std	Z+3, r26	; 0x03
    65de:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    65e2:	2f 96       	adiw	r28, 0x0f	; 15
    65e4:	e4 e0       	ldi	r30, 0x04	; 4
    65e6:	0c 94 02 e1 	jmp	0x1c204	; 0x1c204 <__epilogue_restores__+0x1c>

000065ea <clock_clear>:
    65ea:	a8 e0       	ldi	r26, 0x08	; 8
    65ec:	b0 e0       	ldi	r27, 0x00	; 0
    65ee:	eb ef       	ldi	r30, 0xFB	; 251
    65f0:	f2 e3       	ldi	r31, 0x32	; 50
    65f2:	0c 94 e8 e0 	jmp	0x1c1d0	; 0x1c1d0 <__prologue_saves__+0x20>
    65f6:	1d 82       	std	Y+5, r1	; 0x05
    65f8:	1e 82       	std	Y+6, r1	; 0x06
    65fa:	1f 82       	std	Y+7, r1	; 0x07
    65fc:	18 86       	std	Y+8, r1	; 0x08
    65fe:	19 82       	std	Y+1, r1	; 0x01
    6600:	1a 82       	std	Y+2, r1	; 0x02
    6602:	1b 82       	std	Y+3, r1	; 0x03
    6604:	1c 82       	std	Y+4, r1	; 0x04
    6606:	ce 01       	movw	r24, r28
    6608:	01 96       	adiw	r24, 0x01	; 1
    660a:	ad de       	rcall	.-678    	; 0x6366 <clock_settime.part.2>
    660c:	ea e8       	ldi	r30, 0x8A	; 138
    660e:	fa e1       	ldi	r31, 0x1A	; 26
    6610:	11 82       	std	Z+1, r1	; 0x01
    6612:	10 82       	st	Z, r1
    6614:	13 82       	std	Z+3, r1	; 0x03
    6616:	12 82       	std	Z+2, r1	; 0x02
    6618:	28 96       	adiw	r28, 0x08	; 8
    661a:	e2 e0       	ldi	r30, 0x02	; 2
    661c:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

00006620 <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6620:	80 91 c0 17 	lds	r24, 0x17C0	; 0x8017c0 <timers_configured>
    6624:	90 91 c1 17 	lds	r25, 0x17C1	; 0x8017c1 <timers_configured+0x1>
    6628:	89 2b       	or	r24, r25
    662a:	69 f0       	breq	.+26     	; 0x6646 <enable_timers+0x26>
    662c:	80 91 c2 17 	lds	r24, 0x17C2	; 0x8017c2 <timers_enabled>
    6630:	90 91 c3 17 	lds	r25, 0x17C3	; 0x8017c3 <timers_enabled+0x1>
    6634:	89 2b       	or	r24, r25
    6636:	39 f4       	brne	.+14     	; 0x6646 <enable_timers+0x26>
    {
        enable_system_task();
    6638:	a8 dd       	rcall	.-1200   	; 0x618a <enable_system_task>
        timers_enabled = 1;
    663a:	81 e0       	ldi	r24, 0x01	; 1
    663c:	90 e0       	ldi	r25, 0x00	; 0
    663e:	90 93 c3 17 	sts	0x17C3, r25	; 0x8017c3 <timers_enabled+0x1>
    6642:	80 93 c2 17 	sts	0x17C2, r24	; 0x8017c2 <timers_enabled>
    6646:	08 95       	ret

00006648 <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6648:	cf 93       	push	r28
    664a:	df 93       	push	r29
    664c:	c2 e7       	ldi	r28, 0x72	; 114
    664e:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6650:	8a 81       	ldd	r24, Y+2	; 0x02
    6652:	88 23       	and	r24, r24
    6654:	29 f0       	breq	.+10     	; 0x6660 <execute_timers+0x18>
    6656:	e8 81       	ld	r30, Y
    6658:	f9 81       	ldd	r31, Y+1	; 0x01
    665a:	30 97       	sbiw	r30, 0x00	; 0
    665c:	09 f0       	breq	.+2      	; 0x6660 <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    665e:	09 95       	icall
    6660:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6662:	8a e1       	ldi	r24, 0x1A	; 26
    6664:	ca 38       	cpi	r28, 0x8A	; 138
    6666:	d8 07       	cpc	r29, r24
    6668:	99 f7       	brne	.-26     	; 0x6650 <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    666a:	df 91       	pop	r29
    666c:	cf 91       	pop	r28
    666e:	08 95       	ret

00006670 <init_timers>:
/// @see: timer_hal.c for hardware dependent interface
//
/// @return  void
MEMSPACE
void init_timers()
{
    6670:	00 d0       	rcall	.+0      	; 0x6672 <init_timers+0x2>
    6672:	1f 92       	push	r1
    printf("Timers init called\n");
    6674:	8a ea       	ldi	r24, 0xAA	; 170
    6676:	95 e0       	ldi	r25, 0x05	; 5
    6678:	a0 e0       	ldi	r26, 0x00	; 0
    667a:	ed b7       	in	r30, 0x3d	; 61
    667c:	fe b7       	in	r31, 0x3e	; 62
    667e:	81 83       	std	Z+1, r24	; 0x01
    6680:	92 83       	std	Z+2, r25	; 0x02
    6682:	a3 83       	std	Z+3, r26	; 0x03
    6684:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

    if(!timers_configured)
    6688:	80 91 c0 17 	lds	r24, 0x17C0	; 0x8017c0 <timers_configured>
    668c:	90 91 c1 17 	lds	r25, 0x17C1	; 0x8017c1 <timers_configured+0x1>
    6690:	89 2b       	or	r24, r25
    6692:	a9 f4       	brne	.+42     	; 0x66be <init_timers+0x4e>
    {
        install_timers_isr();
    6694:	7c dd       	rcall	.-1288   	; 0x618e <install_timers_isr>
        timers_configured = 1;
    6696:	81 e0       	ldi	r24, 0x01	; 1
    6698:	90 e0       	ldi	r25, 0x00	; 0
    669a:	90 93 c1 17 	sts	0x17C1, r25	; 0x8017c1 <timers_configured+0x1>
    669e:	80 93 c0 17 	sts	0x17C0, r24	; 0x8017c0 <timers_configured>
        timers_enabled = 0;
    66a2:	10 92 c3 17 	sts	0x17C3, r1	; 0x8017c3 <timers_enabled+0x1>
    66a6:	10 92 c2 17 	sts	0x17C2, r1	; 0x8017c2 <timers_enabled>
        printf("Timers configured\n");
    66aa:	87 e9       	ldi	r24, 0x97	; 151
    66ac:	95 e0       	ldi	r25, 0x05	; 5
    66ae:	a0 e0       	ldi	r26, 0x00	; 0
    66b0:	ed b7       	in	r30, 0x3d	; 61
    66b2:	fe b7       	in	r31, 0x3e	; 62
    66b4:	81 83       	std	Z+1, r24	; 0x01
    66b6:	92 83       	std	Z+2, r25	; 0x02
    66b8:	a3 83       	std	Z+3, r26	; 0x03
    66ba:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    }

    delete_all_timers();

    clock_clear();
    66be:	cc de       	rcall	.-616    	; 0x6458 <delete_all_timers>
    66c0:	94 df       	rcall	.-216    	; 0x65ea <clock_clear>
    printf("Clock Init\n");
    66c2:	8b e8       	ldi	r24, 0x8B	; 139
    66c4:	95 e0       	ldi	r25, 0x05	; 5
    66c6:	a0 e0       	ldi	r26, 0x00	; 0
    66c8:	ed b7       	in	r30, 0x3d	; 61
    66ca:	fe b7       	in	r31, 0x3e	; 62
    66cc:	81 83       	std	Z+1, r24	; 0x01
    66ce:	92 83       	std	Z+2, r25	; 0x02
    66d0:	a3 83       	std	Z+3, r26	; 0x03
    66d2:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

///  See time.c
    if(set_timers(clock_task,1) == -1)
    66d6:	61 e0       	ldi	r22, 0x01	; 1
    66d8:	70 e0       	ldi	r23, 0x00	; 0
    66da:	86 e7       	ldi	r24, 0x76	; 118
    66dc:	91 e3       	ldi	r25, 0x31	; 49
    66de:	81 de       	rcall	.-766    	; 0x63e2 <set_timers>
    66e0:	01 96       	adiw	r24, 0x01	; 1
    66e2:	51 f4       	brne	.+20     	; 0x66f8 <init_timers+0x88>
        printf("Clock task init failed\n");
    66e4:	83 e7       	ldi	r24, 0x73	; 115
    66e6:	95 e0       	ldi	r25, 0x05	; 5
    66e8:	a0 e0       	ldi	r26, 0x00	; 0
    66ea:	ed b7       	in	r30, 0x3d	; 61
    66ec:	fe b7       	in	r31, 0x3e	; 62
    66ee:	81 83       	std	Z+1, r24	; 0x01
    66f0:	92 83       	std	Z+2, r25	; 0x02
    66f2:	a3 83       	std	Z+3, r26	; 0x03
    66f4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("Clock Installed\n");
    66f8:	82 e6       	ldi	r24, 0x62	; 98
    66fa:	95 e0       	ldi	r25, 0x05	; 5
    66fc:	a0 e0       	ldi	r26, 0x00	; 0
    66fe:	ed b7       	in	r30, 0x3d	; 61
    6700:	fe b7       	in	r31, 0x3e	; 62
    6702:	81 83       	std	Z+1, r24	; 0x01
    6704:	92 83       	std	Z+2, r25	; 0x02
    6706:	a3 83       	std	Z+3, r26	; 0x03
    6708:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

    enable_timers();
    670c:	89 df       	rcall	.-238    	; 0x6620 <enable_timers>

    printf("Timers enabled\n");
    670e:	82 e5       	ldi	r24, 0x52	; 82
    6710:	95 e0       	ldi	r25, 0x05	; 5
    6712:	a0 e0       	ldi	r26, 0x00	; 0
    6714:	ed b7       	in	r30, 0x3d	; 61
    6716:	fe b7       	in	r31, 0x3e	; 62
    6718:	81 83       	std	Z+1, r24	; 0x01
    671a:	92 83       	std	Z+2, r25	; 0x02
    671c:	a3 83       	std	Z+3, r26	; 0x03
    671e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
}
    6722:	0f 90       	pop	r0
    6724:	0f 90       	pop	r0
    6726:	0f 90       	pop	r0
    6728:	08 95       	ret

0000672a <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
    672a:	89 2b       	or	r24, r25
    672c:	81 f4       	brne	.+32     	; 0x674e <clock_getres+0x24>
        return(-1);
    res->tv_sec = 0;
    672e:	fb 01       	movw	r30, r22
    6730:	10 82       	st	Z, r1
    6732:	11 82       	std	Z+1, r1	; 0x01
    6734:	12 82       	std	Z+2, r1	; 0x02
    6736:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6738:	80 e4       	ldi	r24, 0x40	; 64
    673a:	92 e4       	ldi	r25, 0x42	; 66
    673c:	af e0       	ldi	r26, 0x0F	; 15
    673e:	b0 e0       	ldi	r27, 0x00	; 0
    6740:	84 83       	std	Z+4, r24	; 0x04
    6742:	95 83       	std	Z+5, r25	; 0x05
    6744:	a6 83       	std	Z+6, r26	; 0x06
    6746:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
    6748:	80 e0       	ldi	r24, 0x00	; 0
    674a:	90 e0       	ldi	r25, 0x00	; 0
    674c:	08 95       	ret
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id  __attribute__((unused)), struct timespec *res)
{
    if(clk_id)
        return(-1);
    674e:	8f ef       	ldi	r24, 0xFF	; 255
    6750:	9f ef       	ldi	r25, 0xFF	; 255
    res->tv_sec = 0;
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    return(0);
}
    6752:	08 95       	ret

00006754 <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id  __attribute__((unused)), const struct timespec *ts)
{
    if(clk_id)
    6754:	89 2b       	or	r24, r25
    6756:	19 f4       	brne	.+6      	; 0x675e <clock_settime+0xa>
    6758:	cb 01       	movw	r24, r22
    675a:	05 ce       	rjmp	.-1014   	; 0x6366 <clock_settime.part.2>
    675c:	08 95       	ret
        return(-1);
    675e:	8f ef       	ldi	r24, 0xFF	; 255
    6760:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6762:	08 95       	ret

00006764 <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6764:	9c 01       	movw	r18, r24
    6766:	83 70       	andi	r24, 0x03	; 3
    6768:	99 27       	eor	r25, r25
    676a:	00 97       	sbiw	r24, 0x00	; 0
    676c:	69 f4       	brne	.+26     	; 0x6788 <IS_Leap+0x24>
    676e:	2c 36       	cpi	r18, 0x6C	; 108
    6770:	47 e0       	ldi	r20, 0x07	; 7
    6772:	34 07       	cpc	r19, r20
    6774:	59 f0       	breq	.+22     	; 0x678c <IS_Leap+0x28>
    6776:	51 e0       	ldi	r21, 0x01	; 1
    6778:	40 e0       	ldi	r20, 0x00	; 0
    677a:	24 33       	cpi	r18, 0x34	; 52
    677c:	38 40       	sbci	r19, 0x08	; 8
    677e:	09 f4       	brne	.+2      	; 0x6782 <IS_Leap+0x1e>
    6780:	50 e0       	ldi	r21, 0x00	; 0
    6782:	85 2f       	mov	r24, r21
    6784:	94 2f       	mov	r25, r20
    6786:	08 95       	ret
    6788:	80 e0       	ldi	r24, 0x00	; 0
    678a:	90 e0       	ldi	r25, 0x00	; 0
    678c:	08 95       	ret

0000678e <tm_mon_to_ascii>:
    678e:	8c 30       	cpi	r24, 0x0C	; 12
    6790:	91 05       	cpc	r25, r1
    6792:	40 f4       	brcc	.+16     	; 0x67a4 <tm_mon_to_ascii+0x16>
    6794:	88 0f       	add	r24, r24
    6796:	99 1f       	adc	r25, r25
    6798:	fc 01       	movw	r30, r24
    679a:	e5 5f       	subi	r30, 0xF5	; 245
    679c:	fe 4f       	sbci	r31, 0xFE	; 254
    679e:	80 81       	ld	r24, Z
    67a0:	91 81       	ldd	r25, Z+1	; 0x01
    67a2:	08 95       	ret
    67a4:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <__Month+0x18>
    67a8:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <__Month+0x19>
    67ac:	08 95       	ret

000067ae <Days_Per_Month>:
    67ae:	cf 93       	push	r28
    67b0:	df 93       	push	r29
    67b2:	8c 30       	cpi	r24, 0x0C	; 12
    67b4:	91 05       	cpc	r25, r1
    67b6:	24 f0       	brlt	.+8      	; 0x67c0 <Days_Per_Month+0x12>
    67b8:	6f 5f       	subi	r22, 0xFF	; 255
    67ba:	7f 4f       	sbci	r23, 0xFF	; 255
    67bc:	0c 97       	sbiw	r24, 0x0c	; 12
    67be:	f9 cf       	rjmp	.-14     	; 0x67b2 <Days_Per_Month+0x4>
    67c0:	97 ff       	sbrs	r25, 7
    67c2:	04 c0       	rjmp	.+8      	; 0x67cc <Days_Per_Month+0x1e>
    67c4:	61 50       	subi	r22, 0x01	; 1
    67c6:	71 09       	sbc	r23, r1
    67c8:	0c 96       	adiw	r24, 0x0c	; 12
    67ca:	fa cf       	rjmp	.-12     	; 0x67c0 <Days_Per_Month+0x12>
    67cc:	fc 01       	movw	r30, r24
    67ce:	ee 0f       	add	r30, r30
    67d0:	ff 1f       	adc	r31, r31
    67d2:	e8 57       	subi	r30, 0x78	; 120
    67d4:	fc 4f       	sbci	r31, 0xFC	; 252
    67d6:	c0 81       	ld	r28, Z
    67d8:	d1 81       	ldd	r29, Z+1	; 0x01
    67da:	01 97       	sbiw	r24, 0x01	; 1
    67dc:	29 f4       	brne	.+10     	; 0x67e8 <Days_Per_Month+0x3a>
    67de:	cb 01       	movw	r24, r22
    67e0:	c1 df       	rcall	.-126    	; 0x6764 <IS_Leap>
    67e2:	89 2b       	or	r24, r25
    67e4:	09 f0       	breq	.+2      	; 0x67e8 <Days_Per_Month+0x3a>
    67e6:	21 96       	adiw	r28, 0x01	; 1
    67e8:	ce 01       	movw	r24, r28
    67ea:	df 91       	pop	r29
    67ec:	cf 91       	pop	r28
    67ee:	08 95       	ret

000067f0 <time_to_tm>:
    67f0:	a0 e0       	ldi	r26, 0x00	; 0
    67f2:	b0 e0       	ldi	r27, 0x00	; 0
    67f4:	ee ef       	ldi	r30, 0xFE	; 254
    67f6:	f3 e3       	ldi	r31, 0x33	; 51
    67f8:	0c 94 da e0 	jmp	0x1c1b4	; 0x1c1b4 <__prologue_saves__+0x4>
    67fc:	e8 01       	movw	r28, r16
    67fe:	e6 e1       	ldi	r30, 0x16	; 22
    6800:	d8 01       	movw	r26, r16
    6802:	1d 92       	st	X+, r1
    6804:	ea 95       	dec	r30
    6806:	e9 f7       	brne	.-6      	; 0x6802 <time_to_tm+0x12>
    6808:	61 15       	cp	r22, r1
    680a:	bd e5       	ldi	r27, 0x5D	; 93
    680c:	7b 07       	cpc	r23, r27
    680e:	bd ef       	ldi	r27, 0xFD	; 253
    6810:	8b 07       	cpc	r24, r27
    6812:	bf ef       	ldi	r27, 0xFF	; 255
    6814:	9b 07       	cpc	r25, r27
    6816:	08 f0       	brcs	.+2      	; 0x681a <time_to_tm+0x2a>
    6818:	c0 c0       	rjmp	.+384    	; 0x699a <time_to_tm+0x1aa>
    681a:	6b 01       	movw	r12, r22
    681c:	7c 01       	movw	r14, r24
    681e:	c2 1a       	sub	r12, r18
    6820:	d3 0a       	sbc	r13, r19
    6822:	e4 0a       	sbc	r14, r20
    6824:	f5 0a       	sbc	r15, r21
    6826:	46 01       	movw	r8, r12
    6828:	57 01       	movw	r10, r14
    682a:	e0 e8       	ldi	r30, 0x80	; 128
    682c:	ce 16       	cp	r12, r30
    682e:	ee ea       	ldi	r30, 0xAE	; 174
    6830:	de 06       	cpc	r13, r30
    6832:	ee ef       	ldi	r30, 0xFE	; 254
    6834:	ee 06       	cpc	r14, r30
    6836:	ef ef       	ldi	r30, 0xFF	; 255
    6838:	fe 06       	cpc	r15, r30
    683a:	50 f0       	brcs	.+20     	; 0x6850 <time_to_tm+0x60>
    683c:	80 e8       	ldi	r24, 0x80	; 128
    683e:	88 0e       	add	r8, r24
    6840:	81 e5       	ldi	r24, 0x51	; 81
    6842:	98 1e       	adc	r9, r24
    6844:	81 e0       	ldi	r24, 0x01	; 1
    6846:	a8 1e       	adc	r10, r24
    6848:	b1 1c       	adc	r11, r1
    684a:	01 e0       	ldi	r16, 0x01	; 1
    684c:	10 e0       	ldi	r17, 0x00	; 0
    684e:	02 c0       	rjmp	.+4      	; 0x6854 <time_to_tm+0x64>
    6850:	00 e0       	ldi	r16, 0x00	; 0
    6852:	10 e0       	ldi	r17, 0x00	; 0
    6854:	8c e3       	ldi	r24, 0x3C	; 60
    6856:	48 2e       	mov	r4, r24
    6858:	51 2c       	mov	r5, r1
    685a:	61 2c       	mov	r6, r1
    685c:	71 2c       	mov	r7, r1
    685e:	c5 01       	movw	r24, r10
    6860:	b4 01       	movw	r22, r8
    6862:	a3 01       	movw	r20, r6
    6864:	92 01       	movw	r18, r4
    6866:	0e 94 6b e0 	call	0x1c0d6	; 0x1c0d6 <__udivmodsi4>
    686a:	79 83       	std	Y+1, r23	; 0x01
    686c:	68 83       	st	Y, r22
    686e:	ca 01       	movw	r24, r20
    6870:	b9 01       	movw	r22, r18
    6872:	a3 01       	movw	r20, r6
    6874:	92 01       	movw	r18, r4
    6876:	0e 94 6b e0 	call	0x1c0d6	; 0x1c0d6 <__udivmodsi4>
    687a:	7b 83       	std	Y+3, r23	; 0x03
    687c:	6a 83       	std	Y+2, r22	; 0x02
    687e:	c5 01       	movw	r24, r10
    6880:	b4 01       	movw	r22, r8
    6882:	20 e1       	ldi	r18, 0x10	; 16
    6884:	3e e0       	ldi	r19, 0x0E	; 14
    6886:	40 e0       	ldi	r20, 0x00	; 0
    6888:	50 e0       	ldi	r21, 0x00	; 0
    688a:	0e 94 6b e0 	call	0x1c0d6	; 0x1c0d6 <__udivmodsi4>
    688e:	ca 01       	movw	r24, r20
    6890:	b9 01       	movw	r22, r18
    6892:	28 e1       	ldi	r18, 0x18	; 24
    6894:	30 e0       	ldi	r19, 0x00	; 0
    6896:	40 e0       	ldi	r20, 0x00	; 0
    6898:	50 e0       	ldi	r21, 0x00	; 0
    689a:	0e 94 6b e0 	call	0x1c0d6	; 0x1c0d6 <__udivmodsi4>
    689e:	7d 83       	std	Y+5, r23	; 0x05
    68a0:	6c 83       	std	Y+4, r22	; 0x04
    68a2:	01 15       	cp	r16, r1
    68a4:	11 05       	cpc	r17, r1
    68a6:	89 f0       	breq	.+34     	; 0x68ca <time_to_tm+0xda>
    68a8:	85 e4       	ldi	r24, 0x45	; 69
    68aa:	90 e0       	ldi	r25, 0x00	; 0
    68ac:	9b 87       	std	Y+11, r25	; 0x0b
    68ae:	8a 87       	std	Y+10, r24	; 0x0a
    68b0:	8b e0       	ldi	r24, 0x0B	; 11
    68b2:	90 e0       	ldi	r25, 0x00	; 0
    68b4:	99 87       	std	Y+9, r25	; 0x09
    68b6:	88 87       	std	Y+8, r24	; 0x08
    68b8:	8f e1       	ldi	r24, 0x1F	; 31
    68ba:	90 e0       	ldi	r25, 0x00	; 0
    68bc:	9f 83       	std	Y+7, r25	; 0x07
    68be:	8e 83       	std	Y+6, r24	; 0x06
    68c0:	83 e0       	ldi	r24, 0x03	; 3
    68c2:	90 e0       	ldi	r25, 0x00	; 0
    68c4:	9d 87       	std	Y+13, r25	; 0x0d
    68c6:	8c 87       	std	Y+12, r24	; 0x0c
    68c8:	65 c0       	rjmp	.+202    	; 0x6994 <time_to_tm+0x1a4>
    68ca:	c5 01       	movw	r24, r10
    68cc:	b4 01       	movw	r22, r8
    68ce:	20 e8       	ldi	r18, 0x80	; 128
    68d0:	31 e5       	ldi	r19, 0x51	; 81
    68d2:	41 e0       	ldi	r20, 0x01	; 1
    68d4:	50 e0       	ldi	r21, 0x00	; 0
    68d6:	0e 94 6b e0 	call	0x1c0d6	; 0x1c0d6 <__udivmodsi4>
    68da:	49 01       	movw	r8, r18
    68dc:	5a 01       	movw	r10, r20
    68de:	ca 01       	movw	r24, r20
    68e0:	b9 01       	movw	r22, r18
    68e2:	6c 5f       	subi	r22, 0xFC	; 252
    68e4:	7f 4f       	sbci	r23, 0xFF	; 255
    68e6:	8f 4f       	sbci	r24, 0xFF	; 255
    68e8:	9f 4f       	sbci	r25, 0xFF	; 255
    68ea:	27 e0       	ldi	r18, 0x07	; 7
    68ec:	30 e0       	ldi	r19, 0x00	; 0
    68ee:	40 e0       	ldi	r20, 0x00	; 0
    68f0:	50 e0       	ldi	r21, 0x00	; 0
    68f2:	0e 94 8d e0 	call	0x1c11a	; 0x1c11a <__divmodsi4>
    68f6:	7d 87       	std	Y+13, r23	; 0x0d
    68f8:	6c 87       	std	Y+12, r22	; 0x0c
    68fa:	02 eb       	ldi	r16, 0xB2	; 178
    68fc:	17 e0       	ldi	r17, 0x07	; 7
    68fe:	c8 01       	movw	r24, r16
    6900:	31 df       	rcall	.-414    	; 0x6764 <IS_Leap>
    6902:	00 97       	sbiw	r24, 0x00	; 0
    6904:	19 f4       	brne	.+6      	; 0x690c <time_to_tm+0x11c>
    6906:	4d e6       	ldi	r20, 0x6D	; 109
    6908:	51 e0       	ldi	r21, 0x01	; 1
    690a:	02 c0       	rjmp	.+4      	; 0x6910 <time_to_tm+0x120>
    690c:	4e e6       	ldi	r20, 0x6E	; 110
    690e:	51 e0       	ldi	r21, 0x01	; 1
    6910:	05 2e       	mov	r0, r21
    6912:	00 0c       	add	r0, r0
    6914:	66 0b       	sbc	r22, r22
    6916:	77 0b       	sbc	r23, r23
    6918:	84 16       	cp	r8, r20
    691a:	95 06       	cpc	r9, r21
    691c:	a6 06       	cpc	r10, r22
    691e:	b7 06       	cpc	r11, r23
    6920:	3c f0       	brlt	.+14     	; 0x6930 <time_to_tm+0x140>
    6922:	0f 5f       	subi	r16, 0xFF	; 255
    6924:	1f 4f       	sbci	r17, 0xFF	; 255
    6926:	84 1a       	sub	r8, r20
    6928:	95 0a       	sbc	r9, r21
    692a:	a6 0a       	sbc	r10, r22
    692c:	b7 0a       	sbc	r11, r23
    692e:	e7 cf       	rjmp	.-50     	; 0x68fe <time_to_tm+0x10e>
    6930:	0c 56       	subi	r16, 0x6C	; 108
    6932:	17 40       	sbci	r17, 0x07	; 7
    6934:	1b 87       	std	Y+11, r17	; 0x0b
    6936:	0a 87       	std	Y+10, r16	; 0x0a
    6938:	9f 86       	std	Y+15, r9	; 0x0f
    693a:	8e 86       	std	Y+14, r8	; 0x0e
    693c:	e8 e8       	ldi	r30, 0x88	; 136
    693e:	f3 e0       	ldi	r31, 0x03	; 3
    6940:	20 e0       	ldi	r18, 0x00	; 0
    6942:	30 e0       	ldi	r19, 0x00	; 0
    6944:	18 14       	cp	r1, r8
    6946:	19 04       	cpc	r1, r9
    6948:	1a 04       	cpc	r1, r10
    694a:	1b 04       	cpc	r1, r11
    694c:	e4 f4       	brge	.+56     	; 0x6986 <time_to_tm+0x196>
    694e:	2c 30       	cpi	r18, 0x0C	; 12
    6950:	31 05       	cpc	r19, r1
    6952:	c9 f0       	breq	.+50     	; 0x6986 <time_to_tm+0x196>
    6954:	41 91       	ld	r20, Z+
    6956:	51 91       	ld	r21, Z+
    6958:	21 30       	cpi	r18, 0x01	; 1
    695a:	31 05       	cpc	r19, r1
    695c:	21 f4       	brne	.+8      	; 0x6966 <time_to_tm+0x176>
    695e:	00 97       	sbiw	r24, 0x00	; 0
    6960:	11 f0       	breq	.+4      	; 0x6966 <time_to_tm+0x176>
    6962:	4f 5f       	subi	r20, 0xFF	; 255
    6964:	5f 4f       	sbci	r21, 0xFF	; 255
    6966:	05 2e       	mov	r0, r21
    6968:	00 0c       	add	r0, r0
    696a:	66 0b       	sbc	r22, r22
    696c:	77 0b       	sbc	r23, r23
    696e:	84 16       	cp	r8, r20
    6970:	95 06       	cpc	r9, r21
    6972:	a6 06       	cpc	r10, r22
    6974:	b7 06       	cpc	r11, r23
    6976:	3c f0       	brlt	.+14     	; 0x6986 <time_to_tm+0x196>
    6978:	84 1a       	sub	r8, r20
    697a:	95 0a       	sbc	r9, r21
    697c:	a6 0a       	sbc	r10, r22
    697e:	b7 0a       	sbc	r11, r23
    6980:	2f 5f       	subi	r18, 0xFF	; 255
    6982:	3f 4f       	sbci	r19, 0xFF	; 255
    6984:	df cf       	rjmp	.-66     	; 0x6944 <time_to_tm+0x154>
    6986:	39 87       	std	Y+9, r19	; 0x09
    6988:	28 87       	std	Y+8, r18	; 0x08
    698a:	af ef       	ldi	r26, 0xFF	; 255
    698c:	8a 1a       	sub	r8, r26
    698e:	9a 0a       	sbc	r9, r26
    6990:	9f 82       	std	Y+7, r9	; 0x07
    6992:	8e 82       	std	Y+6, r8	; 0x06
    6994:	b6 01       	movw	r22, r12
    6996:	c7 01       	movw	r24, r14
    6998:	04 c0       	rjmp	.+8      	; 0x69a2 <time_to_tm+0x1b2>
    699a:	6f ef       	ldi	r22, 0xFF	; 255
    699c:	7f ef       	ldi	r23, 0xFF	; 255
    699e:	8f ef       	ldi	r24, 0xFF	; 255
    69a0:	9f ef       	ldi	r25, 0xFF	; 255
    69a2:	cd b7       	in	r28, 0x3d	; 61
    69a4:	de b7       	in	r29, 0x3e	; 62
    69a6:	e0 e1       	ldi	r30, 0x10	; 16
    69a8:	0c 94 f6 e0 	jmp	0x1c1ec	; 0x1c1ec <__epilogue_restores__+0x4>

000069ac <gmtime_r>:
    69ac:	0f 93       	push	r16
    69ae:	1f 93       	push	r17
    69b0:	cf 93       	push	r28
    69b2:	df 93       	push	r29
    69b4:	eb 01       	movw	r28, r22
    69b6:	fc 01       	movw	r30, r24
    69b8:	60 81       	ld	r22, Z
    69ba:	71 81       	ldd	r23, Z+1	; 0x01
    69bc:	82 81       	ldd	r24, Z+2	; 0x02
    69be:	93 81       	ldd	r25, Z+3	; 0x03
    69c0:	8e 01       	movw	r16, r28
    69c2:	20 e0       	ldi	r18, 0x00	; 0
    69c4:	30 e0       	ldi	r19, 0x00	; 0
    69c6:	a9 01       	movw	r20, r18
    69c8:	13 df       	rcall	.-474    	; 0x67f0 <time_to_tm>
    69ca:	ce 01       	movw	r24, r28
    69cc:	df 91       	pop	r29
    69ce:	cf 91       	pop	r28
    69d0:	1f 91       	pop	r17
    69d2:	0f 91       	pop	r16
    69d4:	08 95       	ret

000069d6 <gmtime>:
    69d6:	22 ee       	ldi	r18, 0xE2	; 226
    69d8:	37 e1       	ldi	r19, 0x17	; 23
    69da:	30 93 f9 17 	sts	0x17F9, r19	; 0x8017f9 <p.3677+0x1>
    69de:	20 93 f8 17 	sts	0x17F8, r18	; 0x8017f8 <p.3677>
    69e2:	b9 01       	movw	r22, r18
    69e4:	e3 df       	rcall	.-58     	; 0x69ac <gmtime_r>
    69e6:	82 ee       	ldi	r24, 0xE2	; 226
    69e8:	97 e1       	ldi	r25, 0x17	; 23
    69ea:	08 95       	ret

000069ec <gettimezone>:
    69ec:	ea e8       	ldi	r30, 0x8A	; 138
    69ee:	fa e1       	ldi	r31, 0x1A	; 26
    69f0:	20 81       	ld	r18, Z
    69f2:	31 81       	ldd	r19, Z+1	; 0x01
    69f4:	dc 01       	movw	r26, r24
    69f6:	2d 93       	st	X+, r18
    69f8:	3c 93       	st	X, r19
    69fa:	22 81       	ldd	r18, Z+2	; 0x02
    69fc:	33 81       	ldd	r19, Z+3	; 0x03
    69fe:	fc 01       	movw	r30, r24
    6a00:	33 83       	std	Z+3, r19	; 0x03
    6a02:	22 83       	std	Z+2, r18	; 0x02
    6a04:	80 e0       	ldi	r24, 0x00	; 0
    6a06:	90 e0       	ldi	r25, 0x00	; 0
    6a08:	08 95       	ret

00006a0a <settimezone>:
    6a0a:	cf 93       	push	r28
    6a0c:	df 93       	push	r29
    6a0e:	ec 01       	movw	r28, r24
    6a10:	28 81       	ld	r18, Y
    6a12:	39 81       	ldd	r19, Y+1	; 0x01
    6a14:	ea e8       	ldi	r30, 0x8A	; 138
    6a16:	fa e1       	ldi	r31, 0x1A	; 26
    6a18:	31 83       	std	Z+1, r19	; 0x01
    6a1a:	20 83       	st	Z, r18
    6a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    6a1e:	9b 81       	ldd	r25, Y+3	; 0x03
    6a20:	93 83       	std	Z+3, r25	; 0x03
    6a22:	82 83       	std	Z+2, r24	; 0x02
    6a24:	80 e0       	ldi	r24, 0x00	; 0
    6a26:	90 e0       	ldi	r25, 0x00	; 0
    6a28:	df 91       	pop	r29
    6a2a:	cf 91       	pop	r28
    6a2c:	08 95       	ret

00006a2e <gettimeofday>:
    6a2e:	a8 e0       	ldi	r26, 0x08	; 8
    6a30:	b0 e0       	ldi	r27, 0x00	; 0
    6a32:	ed e1       	ldi	r30, 0x1D	; 29
    6a34:	f5 e3       	ldi	r31, 0x35	; 53
    6a36:	0c 94 e4 e0 	jmp	0x1c1c8	; 0x1c1c8 <__prologue_saves__+0x18>
    6a3a:	8c 01       	movw	r16, r24
    6a3c:	7b 01       	movw	r14, r22
    6a3e:	be 01       	movw	r22, r28
    6a40:	6f 5f       	subi	r22, 0xFF	; 255
    6a42:	7f 4f       	sbci	r23, 0xFF	; 255
    6a44:	80 e0       	ldi	r24, 0x00	; 0
    6a46:	90 e0       	ldi	r25, 0x00	; 0
    6a48:	dc db       	rcall	.-2120   	; 0x6202 <clock_gettime>
    6a4a:	89 81       	ldd	r24, Y+1	; 0x01
    6a4c:	9a 81       	ldd	r25, Y+2	; 0x02
    6a4e:	ab 81       	ldd	r26, Y+3	; 0x03
    6a50:	bc 81       	ldd	r27, Y+4	; 0x04
    6a52:	f8 01       	movw	r30, r16
    6a54:	80 83       	st	Z, r24
    6a56:	91 83       	std	Z+1, r25	; 0x01
    6a58:	a2 83       	std	Z+2, r26	; 0x02
    6a5a:	b3 83       	std	Z+3, r27	; 0x03
    6a5c:	6d 81       	ldd	r22, Y+5	; 0x05
    6a5e:	7e 81       	ldd	r23, Y+6	; 0x06
    6a60:	8f 81       	ldd	r24, Y+7	; 0x07
    6a62:	98 85       	ldd	r25, Y+8	; 0x08
    6a64:	28 ee       	ldi	r18, 0xE8	; 232
    6a66:	33 e0       	ldi	r19, 0x03	; 3
    6a68:	40 e0       	ldi	r20, 0x00	; 0
    6a6a:	50 e0       	ldi	r21, 0x00	; 0
    6a6c:	0e 94 8d e0 	call	0x1c11a	; 0x1c11a <__divmodsi4>
    6a70:	f8 01       	movw	r30, r16
    6a72:	24 83       	std	Z+4, r18	; 0x04
    6a74:	35 83       	std	Z+5, r19	; 0x05
    6a76:	46 83       	std	Z+6, r20	; 0x06
    6a78:	57 83       	std	Z+7, r21	; 0x07
    6a7a:	c7 01       	movw	r24, r14
    6a7c:	b7 df       	rcall	.-146    	; 0x69ec <gettimezone>
    6a7e:	80 e0       	ldi	r24, 0x00	; 0
    6a80:	90 e0       	ldi	r25, 0x00	; 0
    6a82:	28 96       	adiw	r28, 0x08	; 8
    6a84:	e6 e0       	ldi	r30, 0x06	; 6
    6a86:	0c 94 00 e1 	jmp	0x1c200	; 0x1c200 <__epilogue_restores__+0x18>

00006a8a <time>:
    6a8a:	cf 93       	push	r28
    6a8c:	df 93       	push	r29
    6a8e:	ec 01       	movw	r28, r24
    6a90:	64 ec       	ldi	r22, 0xC4	; 196
    6a92:	77 e1       	ldi	r23, 0x17	; 23
    6a94:	80 e0       	ldi	r24, 0x00	; 0
    6a96:	90 e0       	ldi	r25, 0x00	; 0
    6a98:	b4 db       	rcall	.-2200   	; 0x6202 <clock_gettime>
    6a9a:	20 97       	sbiw	r28, 0x00	; 0
    6a9c:	61 f0       	breq	.+24     	; 0x6ab6 <time+0x2c>
    6a9e:	80 91 c4 17 	lds	r24, 0x17C4	; 0x8017c4 <ts.3755>
    6aa2:	90 91 c5 17 	lds	r25, 0x17C5	; 0x8017c5 <ts.3755+0x1>
    6aa6:	a0 91 c6 17 	lds	r26, 0x17C6	; 0x8017c6 <ts.3755+0x2>
    6aaa:	b0 91 c7 17 	lds	r27, 0x17C7	; 0x8017c7 <ts.3755+0x3>
    6aae:	88 83       	st	Y, r24
    6ab0:	99 83       	std	Y+1, r25	; 0x01
    6ab2:	aa 83       	std	Y+2, r26	; 0x02
    6ab4:	bb 83       	std	Y+3, r27	; 0x03
    6ab6:	60 91 c4 17 	lds	r22, 0x17C4	; 0x8017c4 <ts.3755>
    6aba:	70 91 c5 17 	lds	r23, 0x17C5	; 0x8017c5 <ts.3755+0x1>
    6abe:	80 91 c6 17 	lds	r24, 0x17C6	; 0x8017c6 <ts.3755+0x2>
    6ac2:	90 91 c7 17 	lds	r25, 0x17C7	; 0x8017c7 <ts.3755+0x3>
    6ac6:	df 91       	pop	r29
    6ac8:	cf 91       	pop	r28
    6aca:	08 95       	ret

00006acc <is_dst>:
    6acc:	cf 92       	push	r12
    6ace:	df 92       	push	r13
    6ad0:	ef 92       	push	r14
    6ad2:	ff 92       	push	r15
    6ad4:	6b 01       	movw	r12, r22
    6ad6:	7c 01       	movw	r14, r24
    6ad8:	05 d4       	rcall	.+2058   	; 0x72e4 <set_dst>
    6ada:	80 91 8e 1a 	lds	r24, 0x1A8E	; 0x801a8e <dst>
    6ade:	90 91 8f 1a 	lds	r25, 0x1A8F	; 0x801a8f <dst+0x1>
    6ae2:	a0 91 90 1a 	lds	r26, 0x1A90	; 0x801a90 <dst+0x2>
    6ae6:	b0 91 91 1a 	lds	r27, 0x1A91	; 0x801a91 <dst+0x3>
    6aea:	c8 16       	cp	r12, r24
    6aec:	d9 06       	cpc	r13, r25
    6aee:	ea 06       	cpc	r14, r26
    6af0:	fb 06       	cpc	r15, r27
    6af2:	88 f0       	brcs	.+34     	; 0x6b16 <is_dst+0x4a>
    6af4:	81 e0       	ldi	r24, 0x01	; 1
    6af6:	90 e0       	ldi	r25, 0x00	; 0
    6af8:	40 91 92 1a 	lds	r20, 0x1A92	; 0x801a92 <dst+0x4>
    6afc:	50 91 93 1a 	lds	r21, 0x1A93	; 0x801a93 <dst+0x5>
    6b00:	60 91 94 1a 	lds	r22, 0x1A94	; 0x801a94 <dst+0x6>
    6b04:	70 91 95 1a 	lds	r23, 0x1A95	; 0x801a95 <dst+0x7>
    6b08:	4c 15       	cp	r20, r12
    6b0a:	5d 05       	cpc	r21, r13
    6b0c:	6e 05       	cpc	r22, r14
    6b0e:	7f 05       	cpc	r23, r15
    6b10:	20 f4       	brcc	.+8      	; 0x6b1a <is_dst+0x4e>
    6b12:	80 e0       	ldi	r24, 0x00	; 0
    6b14:	02 c0       	rjmp	.+4      	; 0x6b1a <is_dst+0x4e>
    6b16:	80 e0       	ldi	r24, 0x00	; 0
    6b18:	90 e0       	ldi	r25, 0x00	; 0
    6b1a:	ff 90       	pop	r15
    6b1c:	ef 90       	pop	r14
    6b1e:	df 90       	pop	r13
    6b20:	cf 90       	pop	r12
    6b22:	08 95       	ret

00006b24 <localtime_r>:
    6b24:	4f 92       	push	r4
    6b26:	5f 92       	push	r5
    6b28:	6f 92       	push	r6
    6b2a:	7f 92       	push	r7
    6b2c:	af 92       	push	r10
    6b2e:	bf 92       	push	r11
    6b30:	cf 92       	push	r12
    6b32:	df 92       	push	r13
    6b34:	ef 92       	push	r14
    6b36:	ff 92       	push	r15
    6b38:	0f 93       	push	r16
    6b3a:	1f 93       	push	r17
    6b3c:	cf 93       	push	r28
    6b3e:	df 93       	push	r29
    6b40:	00 d0       	rcall	.+0      	; 0x6b42 <localtime_r+0x1e>
    6b42:	00 d0       	rcall	.+0      	; 0x6b44 <localtime_r+0x20>
    6b44:	cd b7       	in	r28, 0x3d	; 61
    6b46:	de b7       	in	r29, 0x3e	; 62
    6b48:	5b 01       	movw	r10, r22
    6b4a:	fc 01       	movw	r30, r24
    6b4c:	40 80       	ld	r4, Z
    6b4e:	51 80       	ldd	r5, Z+1	; 0x01
    6b50:	62 80       	ldd	r6, Z+2	; 0x02
    6b52:	73 80       	ldd	r7, Z+3	; 0x03
    6b54:	ce 01       	movw	r24, r28
    6b56:	01 96       	adiw	r24, 0x01	; 1
    6b58:	49 df       	rcall	.-366    	; 0x69ec <gettimezone>
    6b5a:	a9 81       	ldd	r26, Y+1	; 0x01
    6b5c:	ba 81       	ldd	r27, Y+2	; 0x02
    6b5e:	2c e3       	ldi	r18, 0x3C	; 60
    6b60:	30 e0       	ldi	r19, 0x00	; 0
    6b62:	0e 94 b2 e0 	call	0x1c164	; 0x1c164 <__usmulhisi3>
    6b66:	6b 01       	movw	r12, r22
    6b68:	7c 01       	movw	r14, r24
    6b6a:	c3 01       	movw	r24, r6
    6b6c:	b2 01       	movw	r22, r4
    6b6e:	6c 19       	sub	r22, r12
    6b70:	7d 09       	sbc	r23, r13
    6b72:	8e 09       	sbc	r24, r14
    6b74:	9f 09       	sbc	r25, r15
    6b76:	aa df       	rcall	.-172    	; 0x6acc <is_dst>
    6b78:	89 2b       	or	r24, r25
    6b7a:	31 f0       	breq	.+12     	; 0x6b88 <localtime_r+0x64>
    6b7c:	f0 e1       	ldi	r31, 0x10	; 16
    6b7e:	cf 1a       	sub	r12, r31
    6b80:	fe e0       	ldi	r31, 0x0E	; 14
    6b82:	df 0a       	sbc	r13, r31
    6b84:	e1 08       	sbc	r14, r1
    6b86:	f1 08       	sbc	r15, r1
    6b88:	85 01       	movw	r16, r10
    6b8a:	a7 01       	movw	r20, r14
    6b8c:	96 01       	movw	r18, r12
    6b8e:	c3 01       	movw	r24, r6
    6b90:	b2 01       	movw	r22, r4
    6b92:	2e de       	rcall	.-932    	; 0x67f0 <time_to_tm>
    6b94:	c5 01       	movw	r24, r10
    6b96:	0f 90       	pop	r0
    6b98:	0f 90       	pop	r0
    6b9a:	0f 90       	pop	r0
    6b9c:	0f 90       	pop	r0
    6b9e:	df 91       	pop	r29
    6ba0:	cf 91       	pop	r28
    6ba2:	1f 91       	pop	r17
    6ba4:	0f 91       	pop	r16
    6ba6:	ff 90       	pop	r15
    6ba8:	ef 90       	pop	r14
    6baa:	df 90       	pop	r13
    6bac:	cf 90       	pop	r12
    6bae:	bf 90       	pop	r11
    6bb0:	af 90       	pop	r10
    6bb2:	7f 90       	pop	r7
    6bb4:	6f 90       	pop	r6
    6bb6:	5f 90       	pop	r5
    6bb8:	4f 90       	pop	r4
    6bba:	08 95       	ret

00006bbc <localtime>:
    6bbc:	6c ec       	ldi	r22, 0xCC	; 204
    6bbe:	77 e1       	ldi	r23, 0x17	; 23
    6bc0:	b1 cf       	rjmp	.-158    	; 0x6b24 <localtime_r>
    6bc2:	08 95       	ret

00006bc4 <normalize>:
    6bc4:	aa e0       	ldi	r26, 0x0A	; 10
    6bc6:	b0 e0       	ldi	r27, 0x00	; 0
    6bc8:	e8 ee       	ldi	r30, 0xE8	; 232
    6bca:	f5 e3       	ldi	r31, 0x35	; 53
    6bcc:	0c 94 d8 e0 	jmp	0x1c1b0	; 0x1c1b0 <__prologue_saves__>
    6bd0:	7c 01       	movw	r14, r24
    6bd2:	7a 87       	std	Y+10, r23	; 0x0a
    6bd4:	69 87       	std	Y+9, r22	; 0x09
    6bd6:	f7 01       	movw	r30, r14
    6bd8:	80 81       	ld	r24, Z
    6bda:	91 81       	ldd	r25, Z+1	; 0x01
    6bdc:	8c 33       	cpi	r24, 0x3C	; 60
    6bde:	91 05       	cpc	r25, r1
    6be0:	5c f0       	brlt	.+22     	; 0x6bf8 <normalize+0x34>
    6be2:	f7 01       	movw	r30, r14
    6be4:	22 81       	ldd	r18, Z+2	; 0x02
    6be6:	33 81       	ldd	r19, Z+3	; 0x03
    6be8:	2f 5f       	subi	r18, 0xFF	; 255
    6bea:	3f 4f       	sbci	r19, 0xFF	; 255
    6bec:	33 83       	std	Z+3, r19	; 0x03
    6bee:	22 83       	std	Z+2, r18	; 0x02
    6bf0:	cc 97       	sbiw	r24, 0x3c	; 60
    6bf2:	91 83       	std	Z+1, r25	; 0x01
    6bf4:	80 83       	st	Z, r24
    6bf6:	ef cf       	rjmp	.-34     	; 0x6bd6 <normalize+0x12>
    6bf8:	f7 01       	movw	r30, r14
    6bfa:	01 90       	ld	r0, Z+
    6bfc:	f0 81       	ld	r31, Z
    6bfe:	e0 2d       	mov	r30, r0
    6c00:	fe 83       	std	Y+6, r31	; 0x06
    6c02:	ed 83       	std	Y+5, r30	; 0x05
    6c04:	f7 ff       	sbrs	r31, 7
    6c06:	0d c0       	rjmp	.+26     	; 0x6c22 <normalize+0x5e>
    6c08:	f7 01       	movw	r30, r14
    6c0a:	82 81       	ldd	r24, Z+2	; 0x02
    6c0c:	93 81       	ldd	r25, Z+3	; 0x03
    6c0e:	01 97       	sbiw	r24, 0x01	; 1
    6c10:	93 83       	std	Z+3, r25	; 0x03
    6c12:	82 83       	std	Z+2, r24	; 0x02
    6c14:	6d 81       	ldd	r22, Y+5	; 0x05
    6c16:	7e 81       	ldd	r23, Y+6	; 0x06
    6c18:	64 5c       	subi	r22, 0xC4	; 196
    6c1a:	7f 4f       	sbci	r23, 0xFF	; 255
    6c1c:	71 83       	std	Z+1, r23	; 0x01
    6c1e:	60 83       	st	Z, r22
    6c20:	eb cf       	rjmp	.-42     	; 0x6bf8 <normalize+0x34>
    6c22:	f7 01       	movw	r30, r14
    6c24:	82 81       	ldd	r24, Z+2	; 0x02
    6c26:	93 81       	ldd	r25, Z+3	; 0x03
    6c28:	8c 33       	cpi	r24, 0x3C	; 60
    6c2a:	91 05       	cpc	r25, r1
    6c2c:	5c f0       	brlt	.+22     	; 0x6c44 <normalize+0x80>
    6c2e:	f7 01       	movw	r30, r14
    6c30:	24 81       	ldd	r18, Z+4	; 0x04
    6c32:	35 81       	ldd	r19, Z+5	; 0x05
    6c34:	2f 5f       	subi	r18, 0xFF	; 255
    6c36:	3f 4f       	sbci	r19, 0xFF	; 255
    6c38:	35 83       	std	Z+5, r19	; 0x05
    6c3a:	24 83       	std	Z+4, r18	; 0x04
    6c3c:	cc 97       	sbiw	r24, 0x3c	; 60
    6c3e:	93 83       	std	Z+3, r25	; 0x03
    6c40:	82 83       	std	Z+2, r24	; 0x02
    6c42:	ef cf       	rjmp	.-34     	; 0x6c22 <normalize+0x5e>
    6c44:	f7 01       	movw	r30, r14
    6c46:	22 80       	ldd	r2, Z+2	; 0x02
    6c48:	33 80       	ldd	r3, Z+3	; 0x03
    6c4a:	37 fe       	sbrs	r3, 7
    6c4c:	0d c0       	rjmp	.+26     	; 0x6c68 <normalize+0xa4>
    6c4e:	f7 01       	movw	r30, r14
    6c50:	84 81       	ldd	r24, Z+4	; 0x04
    6c52:	95 81       	ldd	r25, Z+5	; 0x05
    6c54:	01 97       	sbiw	r24, 0x01	; 1
    6c56:	95 83       	std	Z+5, r25	; 0x05
    6c58:	84 83       	std	Z+4, r24	; 0x04
    6c5a:	fc e3       	ldi	r31, 0x3C	; 60
    6c5c:	2f 0e       	add	r2, r31
    6c5e:	31 1c       	adc	r3, r1
    6c60:	f7 01       	movw	r30, r14
    6c62:	33 82       	std	Z+3, r3	; 0x03
    6c64:	22 82       	std	Z+2, r2	; 0x02
    6c66:	ee cf       	rjmp	.-36     	; 0x6c44 <normalize+0x80>
    6c68:	f7 01       	movw	r30, r14
    6c6a:	84 81       	ldd	r24, Z+4	; 0x04
    6c6c:	95 81       	ldd	r25, Z+5	; 0x05
    6c6e:	88 31       	cpi	r24, 0x18	; 24
    6c70:	91 05       	cpc	r25, r1
    6c72:	5c f0       	brlt	.+22     	; 0x6c8a <normalize+0xc6>
    6c74:	f7 01       	movw	r30, r14
    6c76:	26 81       	ldd	r18, Z+6	; 0x06
    6c78:	37 81       	ldd	r19, Z+7	; 0x07
    6c7a:	2f 5f       	subi	r18, 0xFF	; 255
    6c7c:	3f 4f       	sbci	r19, 0xFF	; 255
    6c7e:	37 83       	std	Z+7, r19	; 0x07
    6c80:	26 83       	std	Z+6, r18	; 0x06
    6c82:	48 97       	sbiw	r24, 0x18	; 24
    6c84:	95 83       	std	Z+5, r25	; 0x05
    6c86:	84 83       	std	Z+4, r24	; 0x04
    6c88:	ef cf       	rjmp	.-34     	; 0x6c68 <normalize+0xa4>
    6c8a:	f7 01       	movw	r30, r14
    6c8c:	04 81       	ldd	r16, Z+4	; 0x04
    6c8e:	15 81       	ldd	r17, Z+5	; 0x05
    6c90:	17 ff       	sbrs	r17, 7
    6c92:	0b c0       	rjmp	.+22     	; 0x6caa <normalize+0xe6>
    6c94:	f7 01       	movw	r30, r14
    6c96:	86 81       	ldd	r24, Z+6	; 0x06
    6c98:	97 81       	ldd	r25, Z+7	; 0x07
    6c9a:	01 97       	sbiw	r24, 0x01	; 1
    6c9c:	97 83       	std	Z+7, r25	; 0x07
    6c9e:	86 83       	std	Z+6, r24	; 0x06
    6ca0:	08 5e       	subi	r16, 0xE8	; 232
    6ca2:	1f 4f       	sbci	r17, 0xFF	; 255
    6ca4:	15 83       	std	Z+5, r17	; 0x05
    6ca6:	04 83       	std	Z+4, r16	; 0x04
    6ca8:	f0 cf       	rjmp	.-32     	; 0x6c8a <normalize+0xc6>
    6caa:	f7 01       	movw	r30, r14
    6cac:	80 85       	ldd	r24, Z+8	; 0x08
    6cae:	91 85       	ldd	r25, Z+9	; 0x09
    6cb0:	8c 30       	cpi	r24, 0x0C	; 12
    6cb2:	91 05       	cpc	r25, r1
    6cb4:	5c f0       	brlt	.+22     	; 0x6ccc <normalize+0x108>
    6cb6:	f7 01       	movw	r30, r14
    6cb8:	22 85       	ldd	r18, Z+10	; 0x0a
    6cba:	33 85       	ldd	r19, Z+11	; 0x0b
    6cbc:	2f 5f       	subi	r18, 0xFF	; 255
    6cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    6cc0:	33 87       	std	Z+11, r19	; 0x0b
    6cc2:	22 87       	std	Z+10, r18	; 0x0a
    6cc4:	0c 97       	sbiw	r24, 0x0c	; 12
    6cc6:	91 87       	std	Z+9, r25	; 0x09
    6cc8:	80 87       	std	Z+8, r24	; 0x08
    6cca:	ef cf       	rjmp	.-34     	; 0x6caa <normalize+0xe6>
    6ccc:	f7 01       	movw	r30, r14
    6cce:	80 85       	ldd	r24, Z+8	; 0x08
    6cd0:	91 85       	ldd	r25, Z+9	; 0x09
    6cd2:	97 ff       	sbrs	r25, 7
    6cd4:	2d c0       	rjmp	.+90     	; 0x6d30 <normalize+0x16c>
    6cd6:	f7 01       	movw	r30, r14
    6cd8:	22 85       	ldd	r18, Z+10	; 0x0a
    6cda:	33 85       	ldd	r19, Z+11	; 0x0b
    6cdc:	21 50       	subi	r18, 0x01	; 1
    6cde:	31 09       	sbc	r19, r1
    6ce0:	33 87       	std	Z+11, r19	; 0x0b
    6ce2:	22 87       	std	Z+10, r18	; 0x0a
    6ce4:	0c 96       	adiw	r24, 0x0c	; 12
    6ce6:	91 87       	std	Z+9, r25	; 0x09
    6ce8:	80 87       	std	Z+8, r24	; 0x08
    6cea:	f0 cf       	rjmp	.-32     	; 0x6ccc <normalize+0x108>
    6cec:	f7 01       	movw	r30, r14
    6cee:	c6 80       	ldd	r12, Z+6	; 0x06
    6cf0:	d7 80       	ldd	r13, Z+7	; 0x07
    6cf2:	a0 84       	ldd	r10, Z+8	; 0x08
    6cf4:	b1 84       	ldd	r11, Z+9	; 0x09
    6cf6:	b4 01       	movw	r22, r8
    6cf8:	c5 01       	movw	r24, r10
    6cfa:	59 dd       	rcall	.-1358   	; 0x67ae <Days_Per_Month>
    6cfc:	8c 15       	cp	r24, r12
    6cfe:	9d 05       	cpc	r25, r13
    6d00:	84 f5       	brge	.+96     	; 0x6d62 <normalize+0x19e>
    6d02:	c8 1a       	sub	r12, r24
    6d04:	d9 0a       	sbc	r13, r25
    6d06:	f7 01       	movw	r30, r14
    6d08:	d7 82       	std	Z+7, r13	; 0x07
    6d0a:	c6 82       	std	Z+6, r12	; 0x06
    6d0c:	c5 01       	movw	r24, r10
    6d0e:	01 96       	adiw	r24, 0x01	; 1
    6d10:	91 87       	std	Z+9, r25	; 0x09
    6d12:	80 87       	std	Z+8, r24	; 0x08
    6d14:	0c 97       	sbiw	r24, 0x0c	; 12
    6d16:	54 f3       	brlt	.-44     	; 0x6cec <normalize+0x128>
    6d18:	fb e0       	ldi	r31, 0x0B	; 11
    6d1a:	af 1a       	sub	r10, r31
    6d1c:	b1 08       	sbc	r11, r1
    6d1e:	f7 01       	movw	r30, r14
    6d20:	b1 86       	std	Z+9, r11	; 0x09
    6d22:	a0 86       	std	Z+8, r10	; 0x08
    6d24:	ff ef       	ldi	r31, 0xFF	; 255
    6d26:	8f 1a       	sub	r8, r31
    6d28:	9f 0a       	sbc	r9, r31
    6d2a:	f7 01       	movw	r30, r14
    6d2c:	93 86       	std	Z+11, r9	; 0x0b
    6d2e:	82 86       	std	Z+10, r8	; 0x0a
    6d30:	f7 01       	movw	r30, r14
    6d32:	82 84       	ldd	r8, Z+10	; 0x0a
    6d34:	93 84       	ldd	r9, Z+11	; 0x0b
    6d36:	da cf       	rjmp	.-76     	; 0x6cec <normalize+0x128>
    6d38:	f7 01       	movw	r30, r14
    6d3a:	80 85       	ldd	r24, Z+8	; 0x08
    6d3c:	91 85       	ldd	r25, Z+9	; 0x09
    6d3e:	9c 01       	movw	r18, r24
    6d40:	21 50       	subi	r18, 0x01	; 1
    6d42:	31 09       	sbc	r19, r1
    6d44:	37 fd       	sbrc	r19, 7
    6d46:	16 c0       	rjmp	.+44     	; 0x6d74 <normalize+0x1b0>
    6d48:	31 87       	std	Z+9, r19	; 0x09
    6d4a:	20 87       	std	Z+8, r18	; 0x08
    6d4c:	f7 01       	movw	r30, r14
    6d4e:	62 85       	ldd	r22, Z+10	; 0x0a
    6d50:	73 85       	ldd	r23, Z+11	; 0x0b
    6d52:	80 85       	ldd	r24, Z+8	; 0x08
    6d54:	91 85       	ldd	r25, Z+9	; 0x09
    6d56:	2b dd       	rcall	.-1450   	; 0x67ae <Days_Per_Month>
    6d58:	88 0d       	add	r24, r8
    6d5a:	99 1d       	adc	r25, r9
    6d5c:	f7 01       	movw	r30, r14
    6d5e:	97 83       	std	Z+7, r25	; 0x07
    6d60:	86 83       	std	Z+6, r24	; 0x06
    6d62:	f7 01       	movw	r30, r14
    6d64:	86 80       	ldd	r8, Z+6	; 0x06
    6d66:	97 80       	ldd	r9, Z+7	; 0x07
    6d68:	a2 84       	ldd	r10, Z+10	; 0x0a
    6d6a:	b3 84       	ldd	r11, Z+11	; 0x0b
    6d6c:	18 14       	cp	r1, r8
    6d6e:	19 04       	cpc	r1, r9
    6d70:	1c f7       	brge	.-58     	; 0x6d38 <normalize+0x174>
    6d72:	0b c0       	rjmp	.+22     	; 0x6d8a <normalize+0x1c6>
    6d74:	0b 96       	adiw	r24, 0x0b	; 11
    6d76:	f7 01       	movw	r30, r14
    6d78:	91 87       	std	Z+9, r25	; 0x09
    6d7a:	80 87       	std	Z+8, r24	; 0x08
    6d7c:	f1 e0       	ldi	r31, 0x01	; 1
    6d7e:	af 1a       	sub	r10, r31
    6d80:	b1 08       	sbc	r11, r1
    6d82:	f7 01       	movw	r30, r14
    6d84:	b3 86       	std	Z+11, r11	; 0x0b
    6d86:	a2 86       	std	Z+10, r10	; 0x0a
    6d88:	e1 cf       	rjmp	.-62     	; 0x6d4c <normalize+0x188>
    6d8a:	a5 01       	movw	r20, r10
    6d8c:	44 59       	subi	r20, 0x94	; 148
    6d8e:	58 4f       	sbci	r21, 0xF8	; 248
    6d90:	58 87       	std	Y+8, r21	; 0x08
    6d92:	4f 83       	std	Y+7, r20	; 0x07
    6d94:	35 01       	movw	r6, r10
    6d96:	56 e4       	ldi	r21, 0x46	; 70
    6d98:	65 1a       	sub	r6, r21
    6d9a:	71 08       	sbc	r7, r1
    6d9c:	89 e8       	ldi	r24, 0x89	; 137
    6d9e:	68 16       	cp	r6, r24
    6da0:	71 04       	cpc	r7, r1
    6da2:	08 f0       	brcs	.+2      	; 0x6da6 <normalize+0x1e2>
    6da4:	9b c0       	rjmp	.+310    	; 0x6edc <normalize+0x318>
    6da6:	c0 84       	ldd	r12, Z+8	; 0x08
    6da8:	d1 84       	ldd	r13, Z+9	; 0x09
    6daa:	9c e0       	ldi	r25, 0x0C	; 12
    6dac:	c9 16       	cp	r12, r25
    6dae:	d1 04       	cpc	r13, r1
    6db0:	08 f0       	brcs	.+2      	; 0x6db4 <normalize+0x1f0>
    6db2:	94 c0       	rjmp	.+296    	; 0x6edc <normalize+0x318>
    6db4:	24 01       	movw	r4, r8
    6db6:	e1 e0       	ldi	r30, 0x01	; 1
    6db8:	4e 1a       	sub	r4, r30
    6dba:	51 08       	sbc	r5, r1
    6dbc:	6f 81       	ldd	r22, Y+7	; 0x07
    6dbe:	78 85       	ldd	r23, Y+8	; 0x08
    6dc0:	c6 01       	movw	r24, r12
    6dc2:	f5 dc       	rcall	.-1558   	; 0x67ae <Days_Per_Month>
    6dc4:	48 16       	cp	r4, r24
    6dc6:	59 06       	cpc	r5, r25
    6dc8:	0c f0       	brlt	.+2      	; 0x6dcc <normalize+0x208>
    6dca:	88 c0       	rjmp	.+272    	; 0x6edc <normalize+0x318>
    6dcc:	08 31       	cpi	r16, 0x18	; 24
    6dce:	11 05       	cpc	r17, r1
    6dd0:	0c f0       	brlt	.+2      	; 0x6dd4 <normalize+0x210>
    6dd2:	84 c0       	rjmp	.+264    	; 0x6edc <normalize+0x318>
    6dd4:	fc e3       	ldi	r31, 0x3C	; 60
    6dd6:	2f 16       	cp	r2, r31
    6dd8:	31 04       	cpc	r3, r1
    6dda:	0c f0       	brlt	.+2      	; 0x6dde <normalize+0x21a>
    6ddc:	7f c0       	rjmp	.+254    	; 0x6edc <normalize+0x318>
    6dde:	4d 81       	ldd	r20, Y+5	; 0x05
    6de0:	5e 81       	ldd	r21, Y+6	; 0x06
    6de2:	4c 33       	cpi	r20, 0x3C	; 60
    6de4:	51 05       	cpc	r21, r1
    6de6:	0c f0       	brlt	.+2      	; 0x6dea <normalize+0x226>
    6de8:	79 c0       	rjmp	.+242    	; 0x6edc <normalize+0x318>
    6dea:	2d e6       	ldi	r18, 0x6D	; 109
    6dec:	31 e0       	ldi	r19, 0x01	; 1
    6dee:	d3 01       	movw	r26, r6
    6df0:	0e 94 b2 e0 	call	0x1c164	; 0x1c164 <__usmulhisi3>
    6df4:	f6 01       	movw	r30, r12
    6df6:	ee 0f       	add	r30, r30
    6df8:	ff 1f       	adc	r31, r31
    6dfa:	e0 56       	subi	r30, 0x60	; 96
    6dfc:	fc 4f       	sbci	r31, 0xFC	; 252
    6dfe:	20 81       	ld	r18, Z
    6e00:	31 81       	ldd	r19, Z+1	; 0x01
    6e02:	dc 01       	movw	r26, r24
    6e04:	cb 01       	movw	r24, r22
    6e06:	82 0f       	add	r24, r18
    6e08:	93 1f       	adc	r25, r19
    6e0a:	a1 1d       	adc	r26, r1
    6e0c:	b1 1d       	adc	r27, r1
    6e0e:	05 2c       	mov	r0, r5
    6e10:	00 0c       	add	r0, r0
    6e12:	66 08       	sbc	r6, r6
    6e14:	77 08       	sbc	r7, r7
    6e16:	48 0e       	add	r4, r24
    6e18:	59 1e       	adc	r5, r25
    6e1a:	6a 1e       	adc	r6, r26
    6e1c:	7b 1e       	adc	r7, r27
    6e1e:	1a 14       	cp	r1, r10
    6e20:	1b 04       	cpc	r1, r11
    6e22:	1c f4       	brge	.+6      	; 0x6e2a <normalize+0x266>
    6e24:	51 e0       	ldi	r21, 0x01	; 1
    6e26:	a5 1a       	sub	r10, r21
    6e28:	b1 08       	sbc	r11, r1
    6e2a:	45 01       	movw	r8, r10
    6e2c:	95 94       	asr	r9
    6e2e:	87 94       	ror	r8
    6e30:	95 94       	asr	r9
    6e32:	87 94       	ror	r8
    6e34:	88 ec       	ldi	r24, 0xC8	; 200
    6e36:	a8 16       	cp	r10, r24
    6e38:	b1 04       	cpc	r11, r1
    6e3a:	1c f0       	brlt	.+6      	; 0x6e42 <normalize+0x27e>
    6e3c:	91 e0       	ldi	r25, 0x01	; 1
    6e3e:	89 1a       	sub	r8, r25
    6e40:	91 08       	sbc	r9, r1
    6e42:	09 2c       	mov	r0, r9
    6e44:	00 0c       	add	r0, r0
    6e46:	aa 08       	sbc	r10, r10
    6e48:	bb 08       	sbc	r11, r11
    6e4a:	84 0c       	add	r8, r4
    6e4c:	95 1c       	adc	r9, r5
    6e4e:	a6 1c       	adc	r10, r6
    6e50:	b7 1c       	adc	r11, r7
    6e52:	24 01       	movw	r4, r8
    6e54:	35 01       	movw	r6, r10
    6e56:	e1 e1       	ldi	r30, 0x11	; 17
    6e58:	4e 1a       	sub	r4, r30
    6e5a:	51 08       	sbc	r5, r1
    6e5c:	61 08       	sbc	r6, r1
    6e5e:	71 08       	sbc	r7, r1
    6e60:	f2 e0       	ldi	r31, 0x02	; 2
    6e62:	cf 16       	cp	r12, r31
    6e64:	d1 04       	cpc	r13, r1
    6e66:	64 f0       	brlt	.+24     	; 0x6e80 <normalize+0x2bc>
    6e68:	8f 81       	ldd	r24, Y+7	; 0x07
    6e6a:	98 85       	ldd	r25, Y+8	; 0x08
    6e6c:	7b dc       	rcall	.-1802   	; 0x6764 <IS_Leap>
    6e6e:	89 2b       	or	r24, r25
    6e70:	39 f0       	breq	.+14     	; 0x6e80 <normalize+0x2bc>
    6e72:	24 01       	movw	r4, r8
    6e74:	35 01       	movw	r6, r10
    6e76:	40 e1       	ldi	r20, 0x10	; 16
    6e78:	44 1a       	sub	r4, r20
    6e7a:	51 08       	sbc	r5, r1
    6e7c:	61 08       	sbc	r6, r1
    6e7e:	71 08       	sbc	r7, r1
    6e80:	a8 e1       	ldi	r26, 0x18	; 24
    6e82:	b0 e0       	ldi	r27, 0x00	; 0
    6e84:	a3 01       	movw	r20, r6
    6e86:	92 01       	movw	r18, r4
    6e88:	0e 94 b8 e0 	call	0x1c170	; 0x1c170 <__muluhisi3>
    6e8c:	01 2e       	mov	r0, r17
    6e8e:	00 0c       	add	r0, r0
    6e90:	22 0b       	sbc	r18, r18
    6e92:	33 0b       	sbc	r19, r19
    6e94:	a9 01       	movw	r20, r18
    6e96:	98 01       	movw	r18, r16
    6e98:	26 0f       	add	r18, r22
    6e9a:	37 1f       	adc	r19, r23
    6e9c:	48 1f       	adc	r20, r24
    6e9e:	59 1f       	adc	r21, r25
    6ea0:	ac e3       	ldi	r26, 0x3C	; 60
    6ea2:	b0 e0       	ldi	r27, 0x00	; 0
    6ea4:	0e 94 b8 e0 	call	0x1c170	; 0x1c170 <__muluhisi3>
    6ea8:	81 01       	movw	r16, r2
    6eaa:	03 2c       	mov	r0, r3
    6eac:	00 0c       	add	r0, r0
    6eae:	22 0b       	sbc	r18, r18
    6eb0:	33 0b       	sbc	r19, r19
    6eb2:	a9 01       	movw	r20, r18
    6eb4:	98 01       	movw	r18, r16
    6eb6:	26 0f       	add	r18, r22
    6eb8:	37 1f       	adc	r19, r23
    6eba:	48 1f       	adc	r20, r24
    6ebc:	59 1f       	adc	r21, r25
    6ebe:	0e 94 b8 e0 	call	0x1c170	; 0x1c170 <__muluhisi3>
    6ec2:	ed 81       	ldd	r30, Y+5	; 0x05
    6ec4:	fe 81       	ldd	r31, Y+6	; 0x06
    6ec6:	8f 01       	movw	r16, r30
    6ec8:	ff 0f       	add	r31, r31
    6eca:	22 0b       	sbc	r18, r18
    6ecc:	33 0b       	sbc	r19, r19
    6ece:	48 01       	movw	r8, r16
    6ed0:	59 01       	movw	r10, r18
    6ed2:	86 0e       	add	r8, r22
    6ed4:	97 1e       	adc	r9, r23
    6ed6:	a8 1e       	adc	r10, r24
    6ed8:	b9 1e       	adc	r11, r25
    6eda:	04 c0       	rjmp	.+8      	; 0x6ee4 <normalize+0x320>
    6edc:	88 24       	eor	r8, r8
    6ede:	8a 94       	dec	r8
    6ee0:	98 2c       	mov	r9, r8
    6ee2:	54 01       	movw	r10, r8
    6ee4:	49 85       	ldd	r20, Y+9	; 0x09
    6ee6:	5a 85       	ldd	r21, Y+10	; 0x0a
    6ee8:	45 2b       	or	r20, r21
    6eea:	e9 f0       	breq	.+58     	; 0x6f26 <normalize+0x362>
    6eec:	ce 01       	movw	r24, r28
    6eee:	01 96       	adiw	r24, 0x01	; 1
    6ef0:	7d dd       	rcall	.-1286   	; 0x69ec <gettimezone>
    6ef2:	a9 81       	ldd	r26, Y+1	; 0x01
    6ef4:	ba 81       	ldd	r27, Y+2	; 0x02
    6ef6:	2c e3       	ldi	r18, 0x3C	; 60
    6ef8:	30 e0       	ldi	r19, 0x00	; 0
    6efa:	0e 94 b2 e0 	call	0x1c164	; 0x1c164 <__usmulhisi3>
    6efe:	2b 01       	movw	r4, r22
    6f00:	3c 01       	movw	r6, r24
    6f02:	c5 01       	movw	r24, r10
    6f04:	b4 01       	movw	r22, r8
    6f06:	e2 dd       	rcall	.-1084   	; 0x6acc <is_dst>
    6f08:	89 2b       	or	r24, r25
    6f0a:	51 f0       	breq	.+20     	; 0x6f20 <normalize+0x35c>
    6f0c:	50 e1       	ldi	r21, 0x10	; 16
    6f0e:	45 1a       	sub	r4, r21
    6f10:	5e e0       	ldi	r21, 0x0E	; 14
    6f12:	55 0a       	sbc	r5, r21
    6f14:	61 08       	sbc	r6, r1
    6f16:	71 08       	sbc	r7, r1
    6f18:	cc 24       	eor	r12, r12
    6f1a:	c3 94       	inc	r12
    6f1c:	d1 2c       	mov	r13, r1
    6f1e:	08 c0       	rjmp	.+16     	; 0x6f30 <normalize+0x36c>
    6f20:	c1 2c       	mov	r12, r1
    6f22:	d1 2c       	mov	r13, r1
    6f24:	05 c0       	rjmp	.+10     	; 0x6f30 <normalize+0x36c>
    6f26:	c1 2c       	mov	r12, r1
    6f28:	d1 2c       	mov	r13, r1
    6f2a:	41 2c       	mov	r4, r1
    6f2c:	51 2c       	mov	r5, r1
    6f2e:	32 01       	movw	r6, r4
    6f30:	87 01       	movw	r16, r14
    6f32:	a3 01       	movw	r20, r6
    6f34:	92 01       	movw	r18, r4
    6f36:	c5 01       	movw	r24, r10
    6f38:	b4 01       	movw	r22, r8
    6f3a:	5a dc       	rcall	.-1868   	; 0x67f0 <time_to_tm>
    6f3c:	c1 14       	cp	r12, r1
    6f3e:	d1 04       	cpc	r13, r1
    6f40:	29 f0       	breq	.+10     	; 0x6f4c <normalize+0x388>
    6f42:	21 e0       	ldi	r18, 0x01	; 1
    6f44:	30 e0       	ldi	r19, 0x00	; 0
    6f46:	f7 01       	movw	r30, r14
    6f48:	31 8b       	std	Z+17, r19	; 0x11
    6f4a:	20 8b       	std	Z+16, r18	; 0x10
    6f4c:	2a 96       	adiw	r28, 0x0a	; 10
    6f4e:	e2 e1       	ldi	r30, 0x12	; 18
    6f50:	0c 94 f4 e0 	jmp	0x1c1e8	; 0x1c1e8 <__epilogue_restores__>

00006f54 <timegm>:
    6f54:	60 e0       	ldi	r22, 0x00	; 0
    6f56:	70 e0       	ldi	r23, 0x00	; 0
    6f58:	35 ce       	rjmp	.-918    	; 0x6bc4 <normalize>
    6f5a:	08 95       	ret

00006f5c <setdate_r>:
    6f5c:	cf 92       	push	r12
    6f5e:	df 92       	push	r13
    6f60:	ef 92       	push	r14
    6f62:	ff 92       	push	r15
    6f64:	cf 93       	push	r28
    6f66:	df 93       	push	r29
    6f68:	cd b7       	in	r28, 0x3d	; 61
    6f6a:	de b7       	in	r29, 0x3e	; 62
    6f6c:	a5 97       	sbiw	r28, 0x25	; 37
    6f6e:	0f b6       	in	r0, 0x3f	; 63
    6f70:	f8 94       	cli
    6f72:	de bf       	out	0x3e, r29	; 62
    6f74:	0f be       	out	0x3f, r0	; 63
    6f76:	cd bf       	out	0x3d, r28	; 61
    6f78:	9d a3       	std	Y+37, r25	; 0x25
    6f7a:	8c a3       	std	Y+36, r24	; 0x24
    6f7c:	1f 82       	std	Y+7, r1	; 0x07
    6f7e:	1e 82       	std	Y+6, r1	; 0x06
    6f80:	19 86       	std	Y+9, r1	; 0x09
    6f82:	18 86       	std	Y+8, r1	; 0x08
    6f84:	1b 86       	std	Y+11, r1	; 0x0b
    6f86:	1a 86       	std	Y+10, r1	; 0x0a
    6f88:	1d 86       	std	Y+13, r1	; 0x0d
    6f8a:	1c 86       	std	Y+12, r1	; 0x0c
    6f8c:	1f 86       	std	Y+15, r1	; 0x0f
    6f8e:	1e 86       	std	Y+14, r1	; 0x0e
    6f90:	19 8a       	std	Y+17, r1	; 0x11
    6f92:	18 8a       	std	Y+16, r1	; 0x10
    6f94:	8c a1       	ldd	r24, Y+36	; 0x24
    6f96:	9d a1       	ldd	r25, Y+37	; 0x25
    6f98:	fc 01       	movw	r30, r24
    6f9a:	20 81       	ld	r18, Z
    6f9c:	20 32       	cpi	r18, 0x20	; 32
    6f9e:	21 f4       	brne	.+8      	; 0x6fa8 <setdate_r+0x4c>
    6fa0:	01 96       	adiw	r24, 0x01	; 1
    6fa2:	9d a3       	std	Y+37, r25	; 0x25
    6fa4:	8c a3       	std	Y+36, r24	; 0x24
    6fa6:	f6 cf       	rjmp	.-20     	; 0x6f94 <setdate_r+0x38>
    6fa8:	4a e0       	ldi	r20, 0x0A	; 10
    6faa:	50 e0       	ldi	r21, 0x00	; 0
    6fac:	be 01       	movw	r22, r28
    6fae:	6c 5d       	subi	r22, 0xDC	; 220
    6fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    6fb2:	0e 94 7e 44 	call	0x88fc	; 0x88fc <strtol>
    6fb6:	79 8b       	std	Y+17, r23	; 0x11
    6fb8:	68 8b       	std	Y+16, r22	; 0x10
    6fba:	8c a1       	ldd	r24, Y+36	; 0x24
    6fbc:	9d a1       	ldd	r25, Y+37	; 0x25
    6fbe:	fc 01       	movw	r30, r24
    6fc0:	20 81       	ld	r18, Z
    6fc2:	20 32       	cpi	r18, 0x20	; 32
    6fc4:	21 f4       	brne	.+8      	; 0x6fce <setdate_r+0x72>
    6fc6:	01 96       	adiw	r24, 0x01	; 1
    6fc8:	9d a3       	std	Y+37, r25	; 0x25
    6fca:	8c a3       	std	Y+36, r24	; 0x24
    6fcc:	f6 cf       	rjmp	.-20     	; 0x6fba <setdate_r+0x5e>
    6fce:	4a e0       	ldi	r20, 0x0A	; 10
    6fd0:	50 e0       	ldi	r21, 0x00	; 0
    6fd2:	be 01       	movw	r22, r28
    6fd4:	6c 5d       	subi	r22, 0xDC	; 220
    6fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    6fd8:	0e 94 7e 44 	call	0x88fc	; 0x88fc <strtol>
    6fdc:	7f 87       	std	Y+15, r23	; 0x0f
    6fde:	6e 87       	std	Y+14, r22	; 0x0e
    6fe0:	8c a1       	ldd	r24, Y+36	; 0x24
    6fe2:	9d a1       	ldd	r25, Y+37	; 0x25
    6fe4:	fc 01       	movw	r30, r24
    6fe6:	20 81       	ld	r18, Z
    6fe8:	20 32       	cpi	r18, 0x20	; 32
    6fea:	21 f4       	brne	.+8      	; 0x6ff4 <setdate_r+0x98>
    6fec:	01 96       	adiw	r24, 0x01	; 1
    6fee:	9d a3       	std	Y+37, r25	; 0x25
    6ff0:	8c a3       	std	Y+36, r24	; 0x24
    6ff2:	f6 cf       	rjmp	.-20     	; 0x6fe0 <setdate_r+0x84>
    6ff4:	4a e0       	ldi	r20, 0x0A	; 10
    6ff6:	50 e0       	ldi	r21, 0x00	; 0
    6ff8:	be 01       	movw	r22, r28
    6ffa:	6c 5d       	subi	r22, 0xDC	; 220
    6ffc:	7f 4f       	sbci	r23, 0xFF	; 255
    6ffe:	0e 94 7e 44 	call	0x88fc	; 0x88fc <strtol>
    7002:	7d 87       	std	Y+13, r23	; 0x0d
    7004:	6c 87       	std	Y+12, r22	; 0x0c
    7006:	8c a1       	ldd	r24, Y+36	; 0x24
    7008:	9d a1       	ldd	r25, Y+37	; 0x25
    700a:	fc 01       	movw	r30, r24
    700c:	20 81       	ld	r18, Z
    700e:	20 32       	cpi	r18, 0x20	; 32
    7010:	21 f4       	brne	.+8      	; 0x701a <setdate_r+0xbe>
    7012:	01 96       	adiw	r24, 0x01	; 1
    7014:	9d a3       	std	Y+37, r25	; 0x25
    7016:	8c a3       	std	Y+36, r24	; 0x24
    7018:	f6 cf       	rjmp	.-20     	; 0x7006 <setdate_r+0xaa>
    701a:	4a e0       	ldi	r20, 0x0A	; 10
    701c:	50 e0       	ldi	r21, 0x00	; 0
    701e:	be 01       	movw	r22, r28
    7020:	6c 5d       	subi	r22, 0xDC	; 220
    7022:	7f 4f       	sbci	r23, 0xFF	; 255
    7024:	0e 94 7e 44 	call	0x88fc	; 0x88fc <strtol>
    7028:	7b 87       	std	Y+11, r23	; 0x0b
    702a:	6a 87       	std	Y+10, r22	; 0x0a
    702c:	ec a1       	ldd	r30, Y+36	; 0x24
    702e:	fd a1       	ldd	r31, Y+37	; 0x25
    7030:	80 81       	ld	r24, Z
    7032:	88 23       	and	r24, r24
    7034:	39 f0       	breq	.+14     	; 0x7044 <setdate_r+0xe8>
    7036:	80 32       	cpi	r24, 0x20	; 32
    7038:	11 f0       	breq	.+4      	; 0x703e <setdate_r+0xe2>
    703a:	8a 33       	cpi	r24, 0x3A	; 58
    703c:	19 f4       	brne	.+6      	; 0x7044 <setdate_r+0xe8>
    703e:	31 96       	adiw	r30, 0x01	; 1
    7040:	fd a3       	std	Y+37, r31	; 0x25
    7042:	ec a3       	std	Y+36, r30	; 0x24
    7044:	4a e0       	ldi	r20, 0x0A	; 10
    7046:	50 e0       	ldi	r21, 0x00	; 0
    7048:	be 01       	movw	r22, r28
    704a:	6c 5d       	subi	r22, 0xDC	; 220
    704c:	7f 4f       	sbci	r23, 0xFF	; 255
    704e:	8c a1       	ldd	r24, Y+36	; 0x24
    7050:	9d a1       	ldd	r25, Y+37	; 0x25
    7052:	0e 94 7e 44 	call	0x88fc	; 0x88fc <strtol>
    7056:	79 87       	std	Y+9, r23	; 0x09
    7058:	68 87       	std	Y+8, r22	; 0x08
    705a:	ec a1       	ldd	r30, Y+36	; 0x24
    705c:	fd a1       	ldd	r31, Y+37	; 0x25
    705e:	80 81       	ld	r24, Z
    7060:	88 23       	and	r24, r24
    7062:	39 f0       	breq	.+14     	; 0x7072 <setdate_r+0x116>
    7064:	80 32       	cpi	r24, 0x20	; 32
    7066:	11 f0       	breq	.+4      	; 0x706c <setdate_r+0x110>
    7068:	8a 33       	cpi	r24, 0x3A	; 58
    706a:	19 f4       	brne	.+6      	; 0x7072 <setdate_r+0x116>
    706c:	31 96       	adiw	r30, 0x01	; 1
    706e:	fd a3       	std	Y+37, r31	; 0x25
    7070:	ec a3       	std	Y+36, r30	; 0x24
    7072:	4a e0       	ldi	r20, 0x0A	; 10
    7074:	50 e0       	ldi	r21, 0x00	; 0
    7076:	be 01       	movw	r22, r28
    7078:	6c 5d       	subi	r22, 0xDC	; 220
    707a:	7f 4f       	sbci	r23, 0xFF	; 255
    707c:	8c a1       	ldd	r24, Y+36	; 0x24
    707e:	9d a1       	ldd	r25, Y+37	; 0x25
    7080:	0e 94 7e 44 	call	0x88fc	; 0x88fc <strtol>
    7084:	7f 83       	std	Y+7, r23	; 0x07
    7086:	6e 83       	std	Y+6, r22	; 0x06
    7088:	2e 85       	ldd	r18, Y+14	; 0x0e
    708a:	3f 85       	ldd	r19, Y+15	; 0x0f
    708c:	21 50       	subi	r18, 0x01	; 1
    708e:	31 09       	sbc	r19, r1
    7090:	3f 87       	std	Y+15, r19	; 0x0f
    7092:	2e 87       	std	Y+14, r18	; 0x0e
    7094:	88 89       	ldd	r24, Y+16	; 0x10
    7096:	99 89       	ldd	r25, Y+17	; 0x11
    7098:	ac 01       	movw	r20, r24
    709a:	42 5b       	subi	r20, 0xB2	; 178
    709c:	57 40       	sbci	r21, 0x07	; 7
    709e:	45 34       	cpi	r20, 0x45	; 69
    70a0:	51 05       	cpc	r21, r1
    70a2:	38 f0       	brcs	.+14     	; 0x70b2 <setdate_r+0x156>
    70a4:	ed b7       	in	r30, 0x3d	; 61
    70a6:	fe b7       	in	r31, 0x3e	; 62
    70a8:	95 83       	std	Z+5, r25	; 0x05
    70aa:	84 83       	std	Z+4, r24	; 0x04
    70ac:	8d e2       	ldi	r24, 0x2D	; 45
    70ae:	97 e0       	ldi	r25, 0x07	; 7
    70b0:	34 c0       	rjmp	.+104    	; 0x711a <setdate_r+0x1be>
    70b2:	8c 56       	subi	r24, 0x6C	; 108
    70b4:	97 40       	sbci	r25, 0x07	; 7
    70b6:	99 8b       	std	Y+17, r25	; 0x11
    70b8:	88 8b       	std	Y+16, r24	; 0x10
    70ba:	2c 30       	cpi	r18, 0x0C	; 12
    70bc:	31 05       	cpc	r19, r1
    70be:	38 f0       	brcs	.+14     	; 0x70ce <setdate_r+0x172>
    70c0:	ed b7       	in	r30, 0x3d	; 61
    70c2:	fe b7       	in	r31, 0x3e	; 62
    70c4:	95 83       	std	Z+5, r25	; 0x05
    70c6:	84 83       	std	Z+4, r24	; 0x04
    70c8:	8c e1       	ldi	r24, 0x1C	; 28
    70ca:	97 e0       	ldi	r25, 0x07	; 7
    70cc:	26 c0       	rjmp	.+76     	; 0x711a <setdate_r+0x1be>
    70ce:	8c 85       	ldd	r24, Y+12	; 0x0c
    70d0:	9d 85       	ldd	r25, Y+13	; 0x0d
    70d2:	9c 01       	movw	r18, r24
    70d4:	21 50       	subi	r18, 0x01	; 1
    70d6:	31 09       	sbc	r19, r1
    70d8:	2f 31       	cpi	r18, 0x1F	; 31
    70da:	31 05       	cpc	r19, r1
    70dc:	38 f0       	brcs	.+14     	; 0x70ec <setdate_r+0x190>
    70de:	ed b7       	in	r30, 0x3d	; 61
    70e0:	fe b7       	in	r31, 0x3e	; 62
    70e2:	95 83       	std	Z+5, r25	; 0x05
    70e4:	84 83       	std	Z+4, r24	; 0x04
    70e6:	8b e0       	ldi	r24, 0x0B	; 11
    70e8:	97 e0       	ldi	r25, 0x07	; 7
    70ea:	17 c0       	rjmp	.+46     	; 0x711a <setdate_r+0x1be>
    70ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    70ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    70f0:	88 31       	cpi	r24, 0x18	; 24
    70f2:	91 05       	cpc	r25, r1
    70f4:	38 f0       	brcs	.+14     	; 0x7104 <setdate_r+0x1a8>
    70f6:	ed b7       	in	r30, 0x3d	; 61
    70f8:	fe b7       	in	r31, 0x3e	; 62
    70fa:	95 83       	std	Z+5, r25	; 0x05
    70fc:	84 83       	std	Z+4, r24	; 0x04
    70fe:	89 ef       	ldi	r24, 0xF9	; 249
    7100:	96 e0       	ldi	r25, 0x06	; 6
    7102:	0b c0       	rjmp	.+22     	; 0x711a <setdate_r+0x1be>
    7104:	88 85       	ldd	r24, Y+8	; 0x08
    7106:	99 85       	ldd	r25, Y+9	; 0x09
    7108:	8c 33       	cpi	r24, 0x3C	; 60
    710a:	91 05       	cpc	r25, r1
    710c:	68 f0       	brcs	.+26     	; 0x7128 <setdate_r+0x1cc>
    710e:	ed b7       	in	r30, 0x3d	; 61
    7110:	fe b7       	in	r31, 0x3e	; 62
    7112:	95 83       	std	Z+5, r25	; 0x05
    7114:	84 83       	std	Z+4, r24	; 0x04
    7116:	88 ee       	ldi	r24, 0xE8	; 232
    7118:	96 e0       	ldi	r25, 0x06	; 6
    711a:	a0 e0       	ldi	r26, 0x00	; 0
    711c:	81 83       	std	Z+1, r24	; 0x01
    711e:	92 83       	std	Z+2, r25	; 0x02
    7120:	a3 83       	std	Z+3, r26	; 0x03
    7122:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    7126:	25 c0       	rjmp	.+74     	; 0x7172 <setdate_r+0x216>
    7128:	ce 01       	movw	r24, r28
    712a:	06 96       	adiw	r24, 0x06	; 6
    712c:	13 df       	rcall	.-474    	; 0x6f54 <timegm>
    712e:	6b 01       	movw	r12, r22
    7130:	7c 01       	movw	r14, r24
    7132:	6c 8f       	std	Y+28, r22	; 0x1c
    7134:	7d 8f       	std	Y+29, r23	; 0x1d
    7136:	8e 8f       	std	Y+30, r24	; 0x1e
    7138:	9f 8f       	std	Y+31, r25	; 0x1f
    713a:	18 a2       	std	Y+32, r1	; 0x20
    713c:	19 a2       	std	Y+33, r1	; 0x21
    713e:	1a a2       	std	Y+34, r1	; 0x22
    7140:	1b a2       	std	Y+35, r1	; 0x23
    7142:	be 01       	movw	r22, r28
    7144:	64 5e       	subi	r22, 0xE4	; 228
    7146:	7f 4f       	sbci	r23, 0xFF	; 255
    7148:	80 e0       	ldi	r24, 0x00	; 0
    714a:	90 e0       	ldi	r25, 0x00	; 0
    714c:	03 db       	rcall	.-2554   	; 0x6754 <clock_settime>
    714e:	b7 01       	movw	r22, r14
    7150:	a6 01       	movw	r20, r12
    7152:	81 e0       	ldi	r24, 0x01	; 1
    7154:	90 e0       	ldi	r25, 0x00	; 0
    7156:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <rtc_init>
    715a:	81 11       	cpse	r24, r1
    715c:	0d c0       	rjmp	.+26     	; 0x7178 <setdate_r+0x21c>
    715e:	81 ed       	ldi	r24, 0xD1	; 209
    7160:	96 e0       	ldi	r25, 0x06	; 6
    7162:	a0 e0       	ldi	r26, 0x00	; 0
    7164:	ed b7       	in	r30, 0x3d	; 61
    7166:	fe b7       	in	r31, 0x3e	; 62
    7168:	81 83       	std	Z+1, r24	; 0x01
    716a:	92 83       	std	Z+2, r25	; 0x02
    716c:	a3 83       	std	Z+3, r26	; 0x03
    716e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    7172:	8f ef       	ldi	r24, 0xFF	; 255
    7174:	9f ef       	ldi	r25, 0xFF	; 255
    7176:	02 c0       	rjmp	.+4      	; 0x717c <setdate_r+0x220>
    7178:	80 e0       	ldi	r24, 0x00	; 0
    717a:	90 e0       	ldi	r25, 0x00	; 0
    717c:	a5 96       	adiw	r28, 0x25	; 37
    717e:	0f b6       	in	r0, 0x3f	; 63
    7180:	f8 94       	cli
    7182:	de bf       	out	0x3e, r29	; 62
    7184:	0f be       	out	0x3f, r0	; 63
    7186:	cd bf       	out	0x3d, r28	; 61
    7188:	df 91       	pop	r29
    718a:	cf 91       	pop	r28
    718c:	ff 90       	pop	r15
    718e:	ef 90       	pop	r14
    7190:	df 90       	pop	r13
    7192:	cf 90       	pop	r12
    7194:	08 95       	ret

00007196 <setdate>:
    7196:	ab e2       	ldi	r26, 0x2B	; 43
    7198:	b0 e0       	ldi	r27, 0x00	; 0
    719a:	e1 ed       	ldi	r30, 0xD1	; 209
    719c:	f8 e3       	ldi	r31, 0x38	; 56
    719e:	0c 94 e8 e0 	jmp	0x1c1d0	; 0x1c1d0 <__prologue_saves__+0x20>
    71a2:	8f e3       	ldi	r24, 0x3F	; 63
    71a4:	97 e0       	ldi	r25, 0x07	; 7
    71a6:	a0 e0       	ldi	r26, 0x00	; 0
    71a8:	ed b7       	in	r30, 0x3d	; 61
    71aa:	fe b7       	in	r31, 0x3e	; 62
    71ac:	81 83       	std	Z+1, r24	; 0x01
    71ae:	92 83       	std	Z+2, r25	; 0x02
    71b0:	a3 83       	std	Z+3, r26	; 0x03
    71b2:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    71b6:	40 91 d9 1c 	lds	r20, 0x1CD9	; 0x801cd9 <__iob>
    71ba:	50 91 da 1c 	lds	r21, 0x1CDA	; 0x801cda <__iob+0x1>
    71be:	66 e2       	ldi	r22, 0x26	; 38
    71c0:	70 e0       	ldi	r23, 0x00	; 0
    71c2:	ce 01       	movw	r24, r28
    71c4:	04 96       	adiw	r24, 0x04	; 4
    71c6:	0e 94 9f 74 	call	0xe93e	; 0xe93e <fgets>
    71ca:	ce 01       	movw	r24, r28
    71cc:	04 96       	adiw	r24, 0x04	; 4
    71ce:	c6 de       	rcall	.-628    	; 0x6f5c <setdate_r>
    71d0:	ab 96       	adiw	r28, 0x2b	; 43
    71d2:	e2 e0       	ldi	r30, 0x02	; 2
    71d4:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

000071d8 <find_dst>:
    71d8:	a8 e2       	ldi	r26, 0x28	; 40
    71da:	b0 e0       	ldi	r27, 0x00	; 0
    71dc:	e2 ef       	ldi	r30, 0xF2	; 242
    71de:	f8 e3       	ldi	r31, 0x38	; 56
    71e0:	0c 94 d8 e0 	jmp	0x1c1b0	; 0x1c1b0 <__prologue_saves__>
    71e4:	3c 01       	movw	r6, r24
    71e6:	1a 01       	movw	r2, r20
    71e8:	2b 01       	movw	r4, r22
    71ea:	49 01       	movw	r8, r18
    71ec:	1c a3       	std	Y+36, r17	; 0x24
    71ee:	0b a3       	std	Y+35, r16	; 0x23
    71f0:	de a2       	std	Y+38, r13	; 0x26
    71f2:	cd a2       	std	Y+37, r12	; 0x25
    71f4:	b8 a6       	std	Y+40, r11	; 0x28
    71f6:	af a2       	std	Y+39, r10	; 0x27
    71f8:	be 01       	movw	r22, r28
    71fa:	61 5e       	subi	r22, 0xE1	; 225
    71fc:	7f 4f       	sbci	r23, 0xFF	; 255
    71fe:	ce 01       	movw	r24, r28
    7200:	47 96       	adiw	r24, 0x17	; 23
    7202:	15 dc       	rcall	.-2006   	; 0x6a2e <gettimeofday>
    7204:	af 8d       	ldd	r26, Y+31	; 0x1f
    7206:	b8 a1       	ldd	r27, Y+32	; 0x20
    7208:	2c e3       	ldi	r18, 0x3C	; 60
    720a:	30 e0       	ldi	r19, 0x00	; 0
    720c:	0e 94 b2 e0 	call	0x1c164	; 0x1c164 <__usmulhisi3>
    7210:	5b 01       	movw	r10, r22
    7212:	6c 01       	movw	r12, r24
    7214:	61 14       	cp	r6, r1
    7216:	71 04       	cpc	r7, r1
    7218:	31 f0       	breq	.+12     	; 0x7226 <find_dst+0x4e>
    721a:	20 e1       	ldi	r18, 0x10	; 16
    721c:	a2 1a       	sub	r10, r18
    721e:	2e e0       	ldi	r18, 0x0E	; 14
    7220:	b2 0a       	sbc	r11, r18
    7222:	c1 08       	sbc	r12, r1
    7224:	d1 08       	sbc	r13, r1
    7226:	81 14       	cp	r8, r1
    7228:	91 04       	cpc	r9, r1
    722a:	39 f0       	breq	.+14     	; 0x723a <find_dst+0x62>
    722c:	4c e6       	ldi	r20, 0x6C	; 108
    722e:	84 1a       	sub	r8, r20
    7230:	47 e0       	ldi	r20, 0x07	; 7
    7232:	94 0a       	sbc	r9, r20
    7234:	9c 86       	std	Y+12, r9	; 0x0c
    7236:	8b 86       	std	Y+11, r8	; 0x0b
    7238:	11 c0       	rjmp	.+34     	; 0x725c <find_dst+0x84>
    723a:	21 14       	cp	r2, r1
    723c:	31 04       	cpc	r3, r1
    723e:	41 04       	cpc	r4, r1
    7240:	51 04       	cpc	r5, r1
    7242:	21 f4       	brne	.+8      	; 0x724c <find_dst+0x74>
    7244:	2f 88       	ldd	r2, Y+23	; 0x17
    7246:	38 8c       	ldd	r3, Y+24	; 0x18
    7248:	49 8c       	ldd	r4, Y+25	; 0x19
    724a:	5a 8c       	ldd	r5, Y+26	; 0x1a
    724c:	8e 01       	movw	r16, r28
    724e:	0f 5f       	subi	r16, 0xFF	; 255
    7250:	1f 4f       	sbci	r17, 0xFF	; 255
    7252:	a6 01       	movw	r20, r12
    7254:	95 01       	movw	r18, r10
    7256:	c2 01       	movw	r24, r4
    7258:	b1 01       	movw	r22, r2
    725a:	ca da       	rcall	.-2668   	; 0x67f0 <time_to_tm>
    725c:	8b a1       	ldd	r24, Y+35	; 0x23
    725e:	9c a1       	ldd	r25, Y+36	; 0x24
    7260:	01 97       	sbiw	r24, 0x01	; 1
    7262:	9a 87       	std	Y+10, r25	; 0x0a
    7264:	89 87       	std	Y+9, r24	; 0x09
    7266:	81 e0       	ldi	r24, 0x01	; 1
    7268:	90 e0       	ldi	r25, 0x00	; 0
    726a:	98 87       	std	Y+8, r25	; 0x08
    726c:	8f 83       	std	Y+7, r24	; 0x07
    726e:	8f a1       	ldd	r24, Y+39	; 0x27
    7270:	98 a5       	ldd	r25, Y+40	; 0x28
    7272:	9e 83       	std	Y+6, r25	; 0x06
    7274:	8d 83       	std	Y+5, r24	; 0x05
    7276:	1c 82       	std	Y+4, r1	; 0x04
    7278:	1b 82       	std	Y+3, r1	; 0x03
    727a:	1a 82       	std	Y+2, r1	; 0x02
    727c:	19 82       	std	Y+1, r1	; 0x01
    727e:	ce 01       	movw	r24, r28
    7280:	01 96       	adiw	r24, 0x01	; 1
    7282:	68 de       	rcall	.-816    	; 0x6f54 <timegm>
    7284:	45 01       	movw	r8, r10
    7286:	56 01       	movw	r10, r12
    7288:	86 0e       	add	r8, r22
    728a:	97 1e       	adc	r9, r23
    728c:	a8 1e       	adc	r10, r24
    728e:	b9 1e       	adc	r11, r25
    7290:	8e 01       	movw	r16, r28
    7292:	0f 5f       	subi	r16, 0xFF	; 255
    7294:	1f 4f       	sbci	r17, 0xFF	; 255
    7296:	20 e0       	ldi	r18, 0x00	; 0
    7298:	30 e0       	ldi	r19, 0x00	; 0
    729a:	a9 01       	movw	r20, r18
    729c:	c5 01       	movw	r24, r10
    729e:	b4 01       	movw	r22, r8
    72a0:	a7 da       	rcall	.-2738   	; 0x67f0 <time_to_tm>
    72a2:	2d 85       	ldd	r18, Y+13	; 0x0d
    72a4:	3e 85       	ldd	r19, Y+14	; 0x0e
    72a6:	e7 e0       	ldi	r30, 0x07	; 7
    72a8:	f0 e0       	ldi	r31, 0x00	; 0
    72aa:	c9 01       	movw	r24, r18
    72ac:	bf 01       	movw	r22, r30
    72ae:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <__divmodhi4>
    72b2:	4d a1       	ldd	r20, Y+37	; 0x25
    72b4:	5e a1       	ldd	r21, Y+38	; 0x26
    72b6:	48 17       	cp	r20, r24
    72b8:	59 07       	cpc	r21, r25
    72ba:	21 f4       	brne	.+8      	; 0x72c4 <find_dst+0xec>
    72bc:	51 e0       	ldi	r21, 0x01	; 1
    72be:	e5 1a       	sub	r14, r21
    72c0:	f1 08       	sbc	r15, r1
    72c2:	51 f0       	breq	.+20     	; 0x72d8 <find_dst+0x100>
    72c4:	80 e8       	ldi	r24, 0x80	; 128
    72c6:	88 0e       	add	r8, r24
    72c8:	81 e5       	ldi	r24, 0x51	; 81
    72ca:	98 1e       	adc	r9, r24
    72cc:	81 e0       	ldi	r24, 0x01	; 1
    72ce:	a8 1e       	adc	r10, r24
    72d0:	b1 1c       	adc	r11, r1
    72d2:	2f 5f       	subi	r18, 0xFF	; 255
    72d4:	3f 4f       	sbci	r19, 0xFF	; 255
    72d6:	e9 cf       	rjmp	.-46     	; 0x72aa <find_dst+0xd2>
    72d8:	c5 01       	movw	r24, r10
    72da:	b4 01       	movw	r22, r8
    72dc:	a8 96       	adiw	r28, 0x28	; 40
    72de:	e2 e1       	ldi	r30, 0x12	; 18
    72e0:	0c 94 f4 e0 	jmp	0x1c1e8	; 0x1c1e8 <__epilogue_restores__>

000072e4 <set_dst>:
    72e4:	4f 92       	push	r4
    72e6:	5f 92       	push	r5
    72e8:	6f 92       	push	r6
    72ea:	7f 92       	push	r7
    72ec:	af 92       	push	r10
    72ee:	bf 92       	push	r11
    72f0:	cf 92       	push	r12
    72f2:	df 92       	push	r13
    72f4:	ef 92       	push	r14
    72f6:	ff 92       	push	r15
    72f8:	0f 93       	push	r16
    72fa:	1f 93       	push	r17
    72fc:	cf 93       	push	r28
    72fe:	df 93       	push	r29
    7300:	cd b7       	in	r28, 0x3d	; 61
    7302:	de b7       	in	r29, 0x3e	; 62
    7304:	2c 97       	sbiw	r28, 0x0c	; 12
    7306:	0f b6       	in	r0, 0x3f	; 63
    7308:	f8 94       	cli
    730a:	de bf       	out	0x3e, r29	; 62
    730c:	0f be       	out	0x3f, r0	; 63
    730e:	cd bf       	out	0x3d, r28	; 61
    7310:	2b 01       	movw	r4, r22
    7312:	3c 01       	movw	r6, r24
    7314:	67 2b       	or	r22, r23
    7316:	68 2b       	or	r22, r24
    7318:	69 2b       	or	r22, r25
    731a:	51 f4       	brne	.+20     	; 0x7330 <set_dst+0x4c>
    731c:	be 01       	movw	r22, r28
    731e:	67 5f       	subi	r22, 0xF7	; 247
    7320:	7f 4f       	sbci	r23, 0xFF	; 255
    7322:	ce 01       	movw	r24, r28
    7324:	01 96       	adiw	r24, 0x01	; 1
    7326:	83 db       	rcall	.-2298   	; 0x6a2e <gettimeofday>
    7328:	49 80       	ldd	r4, Y+1	; 0x01
    732a:	5a 80       	ldd	r5, Y+2	; 0x02
    732c:	6b 80       	ldd	r6, Y+3	; 0x03
    732e:	7c 80       	ldd	r7, Y+4	; 0x04
    7330:	80 91 96 1a 	lds	r24, 0x1A96	; 0x801a96 <dst+0x8>
    7334:	90 91 97 1a 	lds	r25, 0x1A97	; 0x801a97 <dst+0x9>
    7338:	a0 91 98 1a 	lds	r26, 0x1A98	; 0x801a98 <dst+0xa>
    733c:	b0 91 99 1a 	lds	r27, 0x1A99	; 0x801a99 <dst+0xb>
    7340:	84 15       	cp	r24, r4
    7342:	95 05       	cpc	r25, r5
    7344:	a6 05       	cpc	r26, r6
    7346:	b7 05       	cpc	r27, r7
    7348:	50 f0       	brcs	.+20     	; 0x735e <set_dst+0x7a>
    734a:	84 19       	sub	r24, r4
    734c:	95 09       	sbc	r25, r5
    734e:	a6 09       	sbc	r26, r6
    7350:	b7 09       	sbc	r27, r7
    7352:	80 38       	cpi	r24, 0x80	; 128
    7354:	91 45       	sbci	r25, 0x51	; 81
    7356:	a1 40       	sbci	r26, 0x01	; 1
    7358:	b1 05       	cpc	r27, r1
    735a:	70 f4       	brcc	.+28     	; 0x7378 <set_dst+0x94>
    735c:	42 c0       	rjmp	.+132    	; 0x73e2 <set_dst+0xfe>
    735e:	a3 01       	movw	r20, r6
    7360:	92 01       	movw	r18, r4
    7362:	28 1b       	sub	r18, r24
    7364:	39 0b       	sbc	r19, r25
    7366:	4a 0b       	sbc	r20, r26
    7368:	5b 0b       	sbc	r21, r27
    736a:	da 01       	movw	r26, r20
    736c:	c9 01       	movw	r24, r18
    736e:	80 38       	cpi	r24, 0x80	; 128
    7370:	91 45       	sbci	r25, 0x51	; 81
    7372:	a1 40       	sbci	r26, 0x01	; 1
    7374:	b1 05       	cpc	r27, r1
    7376:	a8 f1       	brcs	.+106    	; 0x73e2 <set_dst+0xfe>
    7378:	40 92 96 1a 	sts	0x1A96, r4	; 0x801a96 <dst+0x8>
    737c:	50 92 97 1a 	sts	0x1A97, r5	; 0x801a97 <dst+0x9>
    7380:	60 92 98 1a 	sts	0x1A98, r6	; 0x801a98 <dst+0xa>
    7384:	70 92 99 1a 	sts	0x1A99, r7	; 0x801a99 <dst+0xb>
    7388:	82 e0       	ldi	r24, 0x02	; 2
    738a:	a8 2e       	mov	r10, r24
    738c:	b1 2c       	mov	r11, r1
    738e:	c1 2c       	mov	r12, r1
    7390:	d1 2c       	mov	r13, r1
    7392:	92 e0       	ldi	r25, 0x02	; 2
    7394:	e9 2e       	mov	r14, r25
    7396:	f1 2c       	mov	r15, r1
    7398:	03 e0       	ldi	r16, 0x03	; 3
    739a:	10 e0       	ldi	r17, 0x00	; 0
    739c:	20 e0       	ldi	r18, 0x00	; 0
    739e:	30 e0       	ldi	r19, 0x00	; 0
    73a0:	b3 01       	movw	r22, r6
    73a2:	a2 01       	movw	r20, r4
    73a4:	80 e0       	ldi	r24, 0x00	; 0
    73a6:	90 e0       	ldi	r25, 0x00	; 0
    73a8:	17 df       	rcall	.-466    	; 0x71d8 <find_dst>
    73aa:	60 93 8e 1a 	sts	0x1A8E, r22	; 0x801a8e <dst>
    73ae:	70 93 8f 1a 	sts	0x1A8F, r23	; 0x801a8f <dst+0x1>
    73b2:	80 93 90 1a 	sts	0x1A90, r24	; 0x801a90 <dst+0x2>
    73b6:	90 93 91 1a 	sts	0x1A91, r25	; 0x801a91 <dst+0x3>
    73ba:	ee 24       	eor	r14, r14
    73bc:	e3 94       	inc	r14
    73be:	f1 2c       	mov	r15, r1
    73c0:	0b e0       	ldi	r16, 0x0B	; 11
    73c2:	10 e0       	ldi	r17, 0x00	; 0
    73c4:	20 e0       	ldi	r18, 0x00	; 0
    73c6:	30 e0       	ldi	r19, 0x00	; 0
    73c8:	b3 01       	movw	r22, r6
    73ca:	a2 01       	movw	r20, r4
    73cc:	81 e0       	ldi	r24, 0x01	; 1
    73ce:	90 e0       	ldi	r25, 0x00	; 0
    73d0:	03 df       	rcall	.-506    	; 0x71d8 <find_dst>
    73d2:	60 93 92 1a 	sts	0x1A92, r22	; 0x801a92 <dst+0x4>
    73d6:	70 93 93 1a 	sts	0x1A93, r23	; 0x801a93 <dst+0x5>
    73da:	80 93 94 1a 	sts	0x1A94, r24	; 0x801a94 <dst+0x6>
    73de:	90 93 95 1a 	sts	0x1A95, r25	; 0x801a95 <dst+0x7>
    73e2:	2c 96       	adiw	r28, 0x0c	; 12
    73e4:	0f b6       	in	r0, 0x3f	; 63
    73e6:	f8 94       	cli
    73e8:	de bf       	out	0x3e, r29	; 62
    73ea:	0f be       	out	0x3f, r0	; 63
    73ec:	cd bf       	out	0x3d, r28	; 61
    73ee:	df 91       	pop	r29
    73f0:	cf 91       	pop	r28
    73f2:	1f 91       	pop	r17
    73f4:	0f 91       	pop	r16
    73f6:	ff 90       	pop	r15
    73f8:	ef 90       	pop	r14
    73fa:	df 90       	pop	r13
    73fc:	cf 90       	pop	r12
    73fe:	bf 90       	pop	r11
    7400:	af 90       	pop	r10
    7402:	7f 90       	pop	r7
    7404:	6f 90       	pop	r6
    7406:	5f 90       	pop	r5
    7408:	4f 90       	pop	r4
    740a:	08 95       	ret

0000740c <asctime_r>:
    740c:	a5 e1       	ldi	r26, 0x15	; 21
    740e:	b0 e0       	ldi	r27, 0x00	; 0
    7410:	ec e0       	ldi	r30, 0x0C	; 12
    7412:	fa e3       	ldi	r31, 0x3A	; 58
    7414:	0c 94 e6 e0 	jmp	0x1c1cc	; 0x1c1cc <__prologue_saves__+0x1c>
    7418:	ec 01       	movw	r28, r24
    741a:	8b 01       	movw	r16, r22
    741c:	60 e0       	ldi	r22, 0x00	; 0
    741e:	70 e0       	ldi	r23, 0x00	; 0
    7420:	d1 db       	rcall	.-2142   	; 0x6bc4 <normalize>
    7422:	80 e2       	ldi	r24, 0x20	; 32
    7424:	f8 01       	movw	r30, r16
    7426:	11 92       	st	Z+, r1
    7428:	8a 95       	dec	r24
    742a:	e9 f7       	brne	.-6      	; 0x7426 <asctime_r+0x1a>
    742c:	8a 85       	ldd	r24, Y+10	; 0x0a
    742e:	9b 85       	ldd	r25, Y+11	; 0x0b
    7430:	84 59       	subi	r24, 0x94	; 148
    7432:	98 4f       	sbci	r25, 0xF8	; 248
    7434:	ed b7       	in	r30, 0x3d	; 61
    7436:	fe b7       	in	r31, 0x3e	; 62
    7438:	95 8b       	std	Z+21, r25	; 0x15
    743a:	84 8b       	std	Z+20, r24	; 0x14
    743c:	88 81       	ld	r24, Y
    743e:	99 81       	ldd	r25, Y+1	; 0x01
    7440:	93 8b       	std	Z+19, r25	; 0x13
    7442:	82 8b       	std	Z+18, r24	; 0x12
    7444:	8a 81       	ldd	r24, Y+2	; 0x02
    7446:	9b 81       	ldd	r25, Y+3	; 0x03
    7448:	91 8b       	std	Z+17, r25	; 0x11
    744a:	80 8b       	std	Z+16, r24	; 0x10
    744c:	8c 81       	ldd	r24, Y+4	; 0x04
    744e:	9d 81       	ldd	r25, Y+5	; 0x05
    7450:	97 87       	std	Z+15, r25	; 0x0f
    7452:	86 87       	std	Z+14, r24	; 0x0e
    7454:	8e 81       	ldd	r24, Y+6	; 0x06
    7456:	9f 81       	ldd	r25, Y+7	; 0x07
    7458:	95 87       	std	Z+13, r25	; 0x0d
    745a:	84 87       	std	Z+12, r24	; 0x0c
    745c:	e8 85       	ldd	r30, Y+8	; 0x08
    745e:	f9 85       	ldd	r31, Y+9	; 0x09
    7460:	ee 0f       	add	r30, r30
    7462:	ff 1f       	adc	r31, r31
    7464:	e5 5f       	subi	r30, 0xF5	; 245
    7466:	fe 4f       	sbci	r31, 0xFE	; 254
    7468:	80 81       	ld	r24, Z
    746a:	91 81       	ldd	r25, Z+1	; 0x01
    746c:	ed b7       	in	r30, 0x3d	; 61
    746e:	fe b7       	in	r31, 0x3e	; 62
    7470:	93 87       	std	Z+11, r25	; 0x0b
    7472:	82 87       	std	Z+10, r24	; 0x0a
    7474:	ec 85       	ldd	r30, Y+12	; 0x0c
    7476:	fd 85       	ldd	r31, Y+13	; 0x0d
    7478:	ee 0f       	add	r30, r30
    747a:	ff 1f       	adc	r31, r31
    747c:	eb 5d       	subi	r30, 0xDB	; 219
    747e:	fe 4f       	sbci	r31, 0xFE	; 254
    7480:	80 81       	ld	r24, Z
    7482:	91 81       	ldd	r25, Z+1	; 0x01
    7484:	ed b7       	in	r30, 0x3d	; 61
    7486:	fe b7       	in	r31, 0x3e	; 62
    7488:	91 87       	std	Z+9, r25	; 0x09
    748a:	80 87       	std	Z+8, r24	; 0x08
    748c:	80 e6       	ldi	r24, 0x60	; 96
    748e:	97 e0       	ldi	r25, 0x07	; 7
    7490:	a0 e0       	ldi	r26, 0x00	; 0
    7492:	85 83       	std	Z+5, r24	; 0x05
    7494:	96 83       	std	Z+6, r25	; 0x06
    7496:	a7 83       	std	Z+7, r26	; 0x07
    7498:	80 e2       	ldi	r24, 0x20	; 32
    749a:	90 e0       	ldi	r25, 0x00	; 0
    749c:	94 83       	std	Z+4, r25	; 0x04
    749e:	83 83       	std	Z+3, r24	; 0x03
    74a0:	12 83       	std	Z+2, r17	; 0x02
    74a2:	01 83       	std	Z+1, r16	; 0x01
    74a4:	0e 94 1b 44 	call	0x8836	; 0x8836 <snprintf_P>
    74a8:	c8 01       	movw	r24, r16
    74aa:	cd b7       	in	r28, 0x3d	; 61
    74ac:	de b7       	in	r29, 0x3e	; 62
    74ae:	65 96       	adiw	r28, 0x15	; 21
    74b0:	e4 e0       	ldi	r30, 0x04	; 4
    74b2:	0c 94 02 e1 	jmp	0x1c204	; 0x1c204 <__epilogue_restores__+0x1c>

000074b6 <asctime>:
    74b6:	6a e1       	ldi	r22, 0x1A	; 26
    74b8:	78 e1       	ldi	r23, 0x18	; 24
    74ba:	a8 cf       	rjmp	.-176    	; 0x740c <asctime_r>
    74bc:	08 95       	ret

000074be <ctime_gm>:
    74be:	a6 e1       	ldi	r26, 0x16	; 22
    74c0:	b0 e0       	ldi	r27, 0x00	; 0
    74c2:	e5 e6       	ldi	r30, 0x65	; 101
    74c4:	fa e3       	ldi	r31, 0x3A	; 58
    74c6:	0c 94 e8 e0 	jmp	0x1c1d0	; 0x1c1d0 <__prologue_saves__+0x20>
    74ca:	be 01       	movw	r22, r28
    74cc:	6f 5f       	subi	r22, 0xFF	; 255
    74ce:	7f 4f       	sbci	r23, 0xFF	; 255
    74d0:	6d da       	rcall	.-2854   	; 0x69ac <gmtime_r>
    74d2:	6a ef       	ldi	r22, 0xFA	; 250
    74d4:	77 e1       	ldi	r23, 0x17	; 23
    74d6:	9a df       	rcall	.-204    	; 0x740c <asctime_r>
    74d8:	66 96       	adiw	r28, 0x16	; 22
    74da:	e2 e0       	ldi	r30, 0x02	; 2
    74dc:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

000074e0 <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    74e0:	a5 e2       	ldi	r26, 0x25	; 37
    74e2:	b0 e0       	ldi	r27, 0x00	; 0
    74e4:	e6 e7       	ldi	r30, 0x76	; 118
    74e6:	fa e3       	ldi	r31, 0x3A	; 58
    74e8:	0c 94 e2 e0 	jmp	0x1c1c4	; 0x1c1c4 <__prologue_saves__+0x14>
    74ec:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    74ee:	40 e0       	ldi	r20, 0x00	; 0
    74f0:	50 e0       	ldi	r21, 0x00	; 0
    74f2:	ba 01       	movw	r22, r20
    74f4:	80 e0       	ldi	r24, 0x00	; 0
    74f6:	90 e0       	ldi	r25, 0x00	; 0
    74f8:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <rtc_init>
    74fc:	81 11       	cpse	r24, r1
    74fe:	27 c0       	rjmp	.+78     	; 0x754e <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7500:	8f eb       	ldi	r24, 0xBF	; 191
    7502:	96 e0       	ldi	r25, 0x06	; 6
    7504:	a0 e0       	ldi	r26, 0x00	; 0
    7506:	ed b7       	in	r30, 0x3d	; 61
    7508:	fe b7       	in	r31, 0x3e	; 62
    750a:	81 83       	std	Z+1, r24	; 0x01
    750c:	92 83       	std	Z+2, r25	; 0x02
    750e:	a3 83       	std	Z+3, r26	; 0x03
    7510:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        printf("attempting rtc init\n");
    7514:	8a ea       	ldi	r24, 0xAA	; 170
    7516:	96 e0       	ldi	r25, 0x06	; 6
    7518:	a0 e0       	ldi	r26, 0x00	; 0
    751a:	ed b7       	in	r30, 0x3d	; 61
    751c:	fe b7       	in	r31, 0x3e	; 62
    751e:	81 83       	std	Z+1, r24	; 0x01
    7520:	92 83       	std	Z+2, r25	; 0x02
    7522:	a3 83       	std	Z+3, r26	; 0x03
    7524:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    7528:	40 e0       	ldi	r20, 0x00	; 0
    752a:	50 e0       	ldi	r21, 0x00	; 0
    752c:	ba 01       	movw	r22, r20
    752e:	81 e0       	ldi	r24, 0x01	; 1
    7530:	90 e0       	ldi	r25, 0x00	; 0
    7532:	0e 94 2a 2e 	call	0x5c54	; 0x5c54 <rtc_init>
    7536:	81 11       	cpse	r24, r1
    7538:	0a c0       	rjmp	.+20     	; 0x754e <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    753a:	83 e9       	ldi	r24, 0x93	; 147
    753c:	96 e0       	ldi	r25, 0x06	; 6
    753e:	a0 e0       	ldi	r26, 0x00	; 0
    7540:	ed b7       	in	r30, 0x3d	; 61
    7542:	fe b7       	in	r31, 0x3e	; 62
    7544:	81 83       	std	Z+1, r24	; 0x01
    7546:	92 83       	std	Z+2, r25	; 0x02
    7548:	a3 83       	std	Z+3, r26	; 0x03
    754a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        }
    }

    if(rtc_read(&tc))
    754e:	ce 01       	movw	r24, r28
    7550:	04 96       	adiw	r24, 0x04	; 4
    7552:	0e 94 90 2d 	call	0x5b20	; 0x5b20 <rtc_read>
    7556:	88 23       	and	r24, r24
    7558:	51 f0       	breq	.+20     	; 0x756e <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    755a:	ce 01       	movw	r24, r28
    755c:	04 96       	adiw	r24, 0x04	; 4
    755e:	fa dc       	rcall	.-1548   	; 0x6f54 <timegm>
    7560:	6b 01       	movw	r12, r22
    7562:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
    7564:	67 2b       	or	r22, r23
    7566:	68 2b       	or	r22, r24
    7568:	69 2b       	or	r22, r25
    756a:	c1 f4       	brne	.+48     	; 0x759c <initialize_clock+0xbc>
    756c:	0a c0       	rjmp	.+20     	; 0x7582 <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    756e:	89 e7       	ldi	r24, 0x79	; 121
    7570:	96 e0       	ldi	r25, 0x06	; 6
    7572:	a0 e0       	ldi	r26, 0x00	; 0
    7574:	ed b7       	in	r30, 0x3d	; 61
    7576:	fe b7       	in	r31, 0x3e	; 62
    7578:	81 83       	std	Z+1, r24	; 0x01
    757a:	92 83       	std	Z+2, r25	; 0x02
    757c:	a3 83       	std	Z+3, r26	; 0x03
    757e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#else
    printf("NO RTC\n");
    seconds = 0;
#endif                                        // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7582:	85 e5       	ldi	r24, 0x55	; 85
    7584:	96 e0       	ldi	r25, 0x06	; 6
    7586:	a0 e0       	ldi	r26, 0x00	; 0
    7588:	ed b7       	in	r30, 0x3d	; 61
    758a:	fe b7       	in	r31, 0x3e	; 62
    758c:	81 83       	std	Z+1, r24	; 0x01
    758e:	92 83       	std	Z+2, r25	; 0x02
    7590:	a3 83       	std	Z+3, r26	; 0x03
    7592:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    7596:	c1 2c       	mov	r12, r1
    7598:	d1 2c       	mov	r13, r1
    759a:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    759c:	1b a3       	std	Y+35, r17	; 0x23
    759e:	0a a3       	std	Y+34, r16	; 0x22
    tz.tz_dsttime = 0;
    75a0:	1d a2       	std	Y+37, r1	; 0x25
    75a2:	1c a2       	std	Y+36, r1	; 0x24
    settimezone( &tz );
    75a4:	ce 01       	movw	r24, r28
    75a6:	82 96       	adiw	r24, 0x22	; 34
    75a8:	30 da       	rcall	.-2976   	; 0x6a0a <settimezone>

    ts.tv_sec = seconds;
    75aa:	ca 8e       	std	Y+26, r12	; 0x1a
    75ac:	db 8e       	std	Y+27, r13	; 0x1b
    75ae:	ec 8e       	std	Y+28, r14	; 0x1c
    75b0:	fd 8e       	std	Y+29, r15	; 0x1d
    ts.tv_nsec = 0L;
    75b2:	1e 8e       	std	Y+30, r1	; 0x1e
    75b4:	1f 8e       	std	Y+31, r1	; 0x1f
    75b6:	18 a2       	std	Y+32, r1	; 0x20
    75b8:	19 a2       	std	Y+33, r1	; 0x21
    clock_settime(0, (ts_t *) &ts);
    75ba:	be 01       	movw	r22, r28
    75bc:	66 5e       	subi	r22, 0xE6	; 230
    75be:	7f 4f       	sbci	r23, 0xFF	; 255
    75c0:	80 e0       	ldi	r24, 0x00	; 0
    75c2:	90 e0       	ldi	r25, 0x00	; 0
    75c4:	c7 d8       	rcall	.-3698   	; 0x6754 <clock_settime>
}
    75c6:	a5 96       	adiw	r28, 0x25	; 37
    75c8:	e8 e0       	ldi	r30, 0x08	; 8
    75ca:	0c 94 fe e0 	jmp	0x1c1fc	; 0x1c1fc <__epilogue_restores__+0x14>

000075ce <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    75ce:	a9 e2       	ldi	r26, 0x29	; 41
    75d0:	b0 e0       	ldi	r27, 0x00	; 0
    75d2:	ed ee       	ldi	r30, 0xED	; 237
    75d4:	fa e3       	ldi	r31, 0x3A	; 58
    75d6:	0c 94 e8 e0 	jmp	0x1c1d0	; 0x1c1d0 <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    75da:	ce 01       	movw	r24, r28
    75dc:	08 96       	adiw	r24, 0x08	; 8
    75de:	0e 94 90 2d 	call	0x5b20	; 0x5b20 <rtc_read>
    75e2:	88 23       	and	r24, r24
    75e4:	29 f1       	breq	.+74     	; 0x7630 <display_clock+0x62>
    {
        seconds = timegm(&tc);
    75e6:	ce 01       	movw	r24, r28
    75e8:	08 96       	adiw	r24, 0x08	; 8
    75ea:	b4 dc       	rcall	.-1688   	; 0x6f54 <timegm>
    75ec:	6e a3       	std	Y+38, r22	; 0x26
    75ee:	7f a3       	std	Y+39, r23	; 0x27
    75f0:	88 a7       	std	Y+40, r24	; 0x28
    75f2:	99 a7       	std	Y+41, r25	; 0x29
        printf("rtc seconds: %lu\n",seconds);
    75f4:	ed b7       	in	r30, 0x3d	; 61
    75f6:	fe b7       	in	r31, 0x3e	; 62
    75f8:	64 83       	std	Z+4, r22	; 0x04
    75fa:	75 83       	std	Z+5, r23	; 0x05
    75fc:	86 83       	std	Z+6, r24	; 0x06
    75fe:	97 83       	std	Z+7, r25	; 0x07
    7600:	83 e4       	ldi	r24, 0x43	; 67
    7602:	96 e0       	ldi	r25, 0x06	; 6
    7604:	a0 e0       	ldi	r26, 0x00	; 0
    7606:	81 83       	std	Z+1, r24	; 0x01
    7608:	92 83       	std	Z+2, r25	; 0x02
    760a:	a3 83       	std	Z+3, r26	; 0x03
    760c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7610:	ce 01       	movw	r24, r28
    7612:	08 96       	adiw	r24, 0x08	; 8
    7614:	50 df       	rcall	.-352    	; 0x74b6 <asctime>
    7616:	ed b7       	in	r30, 0x3d	; 61
    7618:	fe b7       	in	r31, 0x3e	; 62
    761a:	95 83       	std	Z+5, r25	; 0x05
    761c:	84 83       	std	Z+4, r24	; 0x04
    761e:	82 e3       	ldi	r24, 0x32	; 50
    7620:	96 e0       	ldi	r25, 0x06	; 6
    7622:	a0 e0       	ldi	r26, 0x00	; 0
    7624:	81 83       	std	Z+1, r24	; 0x01
    7626:	92 83       	std	Z+2, r25	; 0x02
    7628:	a3 83       	std	Z+3, r26	; 0x03
    762a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    762e:	0a c0       	rjmp	.+20     	; 0x7644 <display_clock+0x76>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7630:	81 e2       	ldi	r24, 0x21	; 33
    7632:	96 e0       	ldi	r25, 0x06	; 6
    7634:	a0 e0       	ldi	r26, 0x00	; 0
    7636:	ed b7       	in	r30, 0x3d	; 61
    7638:	fe b7       	in	r31, 0x3e	; 62
    763a:	81 83       	std	Z+1, r24	; 0x01
    763c:	92 83       	std	Z+2, r25	; 0x02
    763e:	a3 83       	std	Z+3, r26	; 0x03
    7640:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    }
#endif                                        // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7644:	be 01       	movw	r22, r28
    7646:	62 5e       	subi	r22, 0xE2	; 226
    7648:	7f 4f       	sbci	r23, 0xFF	; 255
    764a:	80 e0       	ldi	r24, 0x00	; 0
    764c:	90 e0       	ldi	r25, 0x00	; 0
    764e:	0e 94 01 31 	call	0x6202	; 0x6202 <clock_gettime>
    seconds = ts.tv_sec;
    7652:	8e 8d       	ldd	r24, Y+30	; 0x1e
    7654:	9f 8d       	ldd	r25, Y+31	; 0x1f
    7656:	a8 a1       	ldd	r26, Y+32	; 0x20
    7658:	b9 a1       	ldd	r27, Y+33	; 0x21
    765a:	8e a3       	std	Y+38, r24	; 0x26
    765c:	9f a3       	std	Y+39, r25	; 0x27
    765e:	a8 a7       	std	Y+40, r26	; 0x28
    7660:	b9 a7       	std	Y+41, r27	; 0x29
    printf("clk seconds: %lu\n",seconds);
    7662:	ed b7       	in	r30, 0x3d	; 61
    7664:	fe b7       	in	r31, 0x3e	; 62
    7666:	84 83       	std	Z+4, r24	; 0x04
    7668:	95 83       	std	Z+5, r25	; 0x05
    766a:	a6 83       	std	Z+6, r26	; 0x06
    766c:	b7 83       	std	Z+7, r27	; 0x07
    766e:	8f e0       	ldi	r24, 0x0F	; 15
    7670:	96 e0       	ldi	r25, 0x06	; 6
    7672:	a0 e0       	ldi	r26, 0x00	; 0
    7674:	81 83       	std	Z+1, r24	; 0x01
    7676:	92 83       	std	Z+2, r25	; 0x02
    7678:	a3 83       	std	Z+3, r26	; 0x03
    767a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    767e:	ce 01       	movw	r24, r28
    7680:	86 96       	adiw	r24, 0x26	; 38
    7682:	a9 d9       	rcall	.-3246   	; 0x69d6 <gmtime>
    7684:	18 df       	rcall	.-464    	; 0x74b6 <asctime>
    7686:	ed b7       	in	r30, 0x3d	; 61
    7688:	fe b7       	in	r31, 0x3e	; 62
    768a:	95 83       	std	Z+5, r25	; 0x05
    768c:	84 83       	std	Z+4, r24	; 0x04
    768e:	8e ef       	ldi	r24, 0xFE	; 254
    7690:	95 e0       	ldi	r25, 0x05	; 5
    7692:	a0 e0       	ldi	r26, 0x00	; 0
    7694:	81 83       	std	Z+1, r24	; 0x01
    7696:	92 83       	std	Z+2, r25	; 0x02
    7698:	a3 83       	std	Z+3, r26	; 0x03
    769a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
}
    769e:	a9 96       	adiw	r28, 0x29	; 41
    76a0:	e2 e0       	ldi	r30, 0x02	; 2
    76a2:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

000076a6 <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    76a6:	fc 01       	movw	r30, r24
    76a8:	84 81       	ldd	r24, Z+4	; 0x04
    76aa:	95 81       	ldd	r25, Z+5	; 0x05
    76ac:	00 97       	sbiw	r24, 0x00	; 0
    76ae:	79 f0       	breq	.+30     	; 0x76ce <_putc_buffer_fn+0x28>
    76b0:	66 23       	and	r22, r22
    76b2:	69 f0       	breq	.+26     	; 0x76ce <_putc_buffer_fn+0x28>
    76b4:	01 97       	sbiw	r24, 0x01	; 1
    76b6:	95 83       	std	Z+5, r25	; 0x05
    76b8:	84 83       	std	Z+4, r24	; 0x04
    76ba:	86 81       	ldd	r24, Z+6	; 0x06
    76bc:	97 81       	ldd	r25, Z+7	; 0x07
    76be:	01 96       	adiw	r24, 0x01	; 1
    76c0:	97 83       	std	Z+7, r25	; 0x07
    76c2:	86 83       	std	Z+6, r24	; 0x06
    76c4:	a2 81       	ldd	r26, Z+2	; 0x02
    76c6:	b3 81       	ldd	r27, Z+3	; 0x03
    76c8:	6d 93       	st	X+, r22
    76ca:	b3 83       	std	Z+3, r27	; 0x03
    76cc:	a2 83       	std	Z+2, r26	; 0x02
    76ce:	02 80       	ldd	r0, Z+2	; 0x02
    76d0:	f3 81       	ldd	r31, Z+3	; 0x03
    76d2:	e0 2d       	mov	r30, r0
    76d4:	10 82       	st	Z, r1
    76d6:	08 95       	ret

000076d8 <_putc_fn>:
    76d8:	fc 01       	movw	r30, r24
    76da:	26 81       	ldd	r18, Z+6	; 0x06
    76dc:	37 81       	ldd	r19, Z+7	; 0x07
    76de:	2f 5f       	subi	r18, 0xFF	; 255
    76e0:	3f 4f       	sbci	r19, 0xFF	; 255
    76e2:	37 83       	std	Z+7, r19	; 0x07
    76e4:	26 83       	std	Z+6, r18	; 0x06
    76e6:	86 2f       	mov	r24, r22
    76e8:	90 e0       	ldi	r25, 0x00	; 0
    76ea:	0c 94 99 74 	jmp	0xe932	; 0xe932 <putchar>
    76ee:	08 95       	ret

000076f0 <bin2num>:
    76f0:	a0 e0       	ldi	r26, 0x00	; 0
    76f2:	b0 e0       	ldi	r27, 0x00	; 0
    76f4:	ee e7       	ldi	r30, 0x7E	; 126
    76f6:	fb e3       	ldi	r31, 0x3B	; 59
    76f8:	0c 94 df e0 	jmp	0x1c1be	; 0x1c1be <__prologue_saves__+0xe>
    76fc:	ea 01       	movw	r28, r20
    76fe:	53 e0       	ldi	r21, 0x03	; 3
    7700:	ee 0c       	add	r14, r14
    7702:	ff 1c       	adc	r15, r15
    7704:	5a 95       	dec	r21
    7706:	e1 f7       	brne	.-8      	; 0x7700 <bin2num+0x10>
    7708:	fc 01       	movw	r30, r24
    770a:	af 01       	movw	r20, r30
    770c:	48 1b       	sub	r20, r24
    770e:	59 0b       	sbc	r21, r25
    7710:	c4 17       	cp	r28, r20
    7712:	d5 07       	cpc	r29, r21
    7714:	14 f0       	brlt	.+4      	; 0x771a <bin2num+0x2a>
    7716:	11 92       	st	Z+, r1
    7718:	f8 cf       	rjmp	.-16     	; 0x770a <bin2num+0x1a>
    771a:	41 e0       	ldi	r20, 0x01	; 1
    771c:	e4 1a       	sub	r14, r20
    771e:	f1 08       	sbc	r15, r1
    7720:	5b 01       	movw	r10, r22
    7722:	42 e0       	ldi	r20, 0x02	; 2
    7724:	a4 1a       	sub	r10, r20
    7726:	b1 08       	sbc	r11, r1
    7728:	f7 fc       	sbrc	r15, 7
    772a:	3b c0       	rjmp	.+118    	; 0x77a2 <bin2num+0xb2>
    772c:	f7 01       	movw	r30, r14
    772e:	43 e0       	ldi	r20, 0x03	; 3
    7730:	f5 95       	asr	r31
    7732:	e7 95       	ror	r30
    7734:	4a 95       	dec	r20
    7736:	e1 f7       	brne	.-8      	; 0x7730 <bin2num+0x40>
    7738:	e0 0f       	add	r30, r16
    773a:	f1 1f       	adc	r31, r17
    773c:	40 81       	ld	r20, Z
    773e:	50 e0       	ldi	r21, 0x00	; 0
    7740:	f7 01       	movw	r30, r14
    7742:	e7 70       	andi	r30, 0x07	; 7
    7744:	ff 27       	eor	r31, r31
    7746:	02 c0       	rjmp	.+4      	; 0x774c <bin2num+0x5c>
    7748:	55 95       	asr	r21
    774a:	47 95       	ror	r20
    774c:	ea 95       	dec	r30
    774e:	e2 f7       	brpl	.-8      	; 0x7748 <bin2num+0x58>
    7750:	41 70       	andi	r20, 0x01	; 1
    7752:	55 27       	eor	r21, r21
    7754:	dc 01       	movw	r26, r24
    7756:	e0 e0       	ldi	r30, 0x00	; 0
    7758:	f0 e0       	ldi	r31, 0x00	; 0
    775a:	ec 17       	cp	r30, r28
    775c:	fd 07       	cpc	r31, r29
    775e:	ec f4       	brge	.+58     	; 0x779a <bin2num+0xaa>
    7760:	ea 15       	cp	r30, r10
    7762:	fb 05       	cpc	r31, r11
    7764:	4c f0       	brlt	.+18     	; 0x7778 <bin2num+0x88>
    7766:	dc 01       	movw	r26, r24
    7768:	ae 0f       	add	r26, r30
    776a:	bf 1f       	adc	r27, r31
    776c:	1c 92       	st	X, r1
    776e:	41 e0       	ldi	r20, 0x01	; 1
    7770:	e4 1a       	sub	r14, r20
    7772:	f1 08       	sbc	r15, r1
    7774:	ef 01       	movw	r28, r30
    7776:	d8 cf       	rjmp	.-80     	; 0x7728 <bin2num+0x38>
    7778:	9c 90       	ld	r9, X
    777a:	99 0c       	add	r9, r9
    777c:	94 2a       	or	r9, r20
    777e:	49 2d       	mov	r20, r9
    7780:	50 e0       	ldi	r21, 0x00	; 0
    7782:	42 17       	cp	r20, r18
    7784:	53 07       	cpc	r21, r19
    7786:	24 f0       	brlt	.+8      	; 0x7790 <bin2num+0xa0>
    7788:	92 1a       	sub	r9, r18
    778a:	41 e0       	ldi	r20, 0x01	; 1
    778c:	50 e0       	ldi	r21, 0x00	; 0
    778e:	02 c0       	rjmp	.+4      	; 0x7794 <bin2num+0xa4>
    7790:	40 e0       	ldi	r20, 0x00	; 0
    7792:	50 e0       	ldi	r21, 0x00	; 0
    7794:	9d 92       	st	X+, r9
    7796:	31 96       	adiw	r30, 0x01	; 1
    7798:	e0 cf       	rjmp	.-64     	; 0x775a <bin2num+0x6a>
    779a:	41 15       	cp	r20, r1
    779c:	51 05       	cpc	r21, r1
    779e:	01 f7       	brne	.-64     	; 0x7760 <bin2num+0x70>
    77a0:	e2 cf       	rjmp	.-60     	; 0x7766 <bin2num+0x76>
    77a2:	fc 01       	movw	r30, r24
    77a4:	9f 01       	movw	r18, r30
    77a6:	28 1b       	sub	r18, r24
    77a8:	39 0b       	sbc	r19, r25
    77aa:	2c 17       	cp	r18, r28
    77ac:	3d 07       	cpc	r19, r29
    77ae:	4c f4       	brge	.+18     	; 0x77c2 <bin2num+0xd2>
    77b0:	20 81       	ld	r18, Z
    77b2:	2a 30       	cpi	r18, 0x0A	; 10
    77b4:	10 f4       	brcc	.+4      	; 0x77ba <bin2num+0xca>
    77b6:	20 5d       	subi	r18, 0xD0	; 208
    77b8:	01 c0       	rjmp	.+2      	; 0x77bc <bin2num+0xcc>
    77ba:	29 5a       	subi	r18, 0xA9	; 169
    77bc:	20 83       	st	Z, r18
    77be:	31 96       	adiw	r30, 0x01	; 1
    77c0:	f1 cf       	rjmp	.-30     	; 0x77a4 <bin2num+0xb4>
    77c2:	9e 01       	movw	r18, r28
    77c4:	d7 ff       	sbrs	r29, 7
    77c6:	02 c0       	rjmp	.+4      	; 0x77cc <bin2num+0xdc>
    77c8:	20 e0       	ldi	r18, 0x00	; 0
    77ca:	30 e0       	ldi	r19, 0x00	; 0
    77cc:	c1 14       	cp	r12, r1
    77ce:	d1 04       	cpc	r13, r1
    77d0:	61 f0       	breq	.+24     	; 0x77ea <bin2num+0xfa>
    77d2:	61 50       	subi	r22, 0x01	; 1
    77d4:	71 09       	sbc	r23, r1
    77d6:	26 17       	cp	r18, r22
    77d8:	37 07       	cpc	r19, r23
    77da:	3c f4       	brge	.+14     	; 0x77ea <bin2num+0xfa>
    77dc:	fc 01       	movw	r30, r24
    77de:	e2 0f       	add	r30, r18
    77e0:	f3 1f       	adc	r31, r19
    77e2:	c0 82       	st	Z, r12
    77e4:	21 96       	adiw	r28, 0x01	; 1
    77e6:	2f 5f       	subi	r18, 0xFF	; 255
    77e8:	3f 4f       	sbci	r19, 0xFF	; 255
    77ea:	fc 01       	movw	r30, r24
    77ec:	e2 0f       	add	r30, r18
    77ee:	f3 1f       	adc	r31, r19
    77f0:	10 82       	st	Z, r1
    77f2:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <reverse>
    77f6:	ce 01       	movw	r24, r28
    77f8:	cd b7       	in	r28, 0x3d	; 61
    77fa:	de b7       	in	r29, 0x3e	; 62
    77fc:	eb e0       	ldi	r30, 0x0B	; 11
    77fe:	0c 94 fb e0 	jmp	0x1c1f6	; 0x1c1f6 <__epilogue_restores__+0xe>

00007802 <pch>:
    7802:	fc 01       	movw	r30, r24
    7804:	22 81       	ldd	r18, Z+2	; 0x02
    7806:	33 81       	ldd	r19, Z+3	; 0x03
    7808:	44 81       	ldd	r20, Z+4	; 0x04
    780a:	55 81       	ldd	r21, Z+5	; 0x05
    780c:	80 81       	ld	r24, Z
    780e:	91 81       	ldd	r25, Z+1	; 0x01
    7810:	24 17       	cp	r18, r20
    7812:	35 07       	cpc	r19, r21
    7814:	54 f4       	brge	.+20     	; 0x782a <pch+0x28>
    7816:	a9 01       	movw	r20, r18
    7818:	4f 5f       	subi	r20, 0xFF	; 255
    781a:	5f 4f       	sbci	r21, 0xFF	; 255
    781c:	53 83       	std	Z+3, r21	; 0x03
    781e:	42 83       	std	Z+2, r20	; 0x02
    7820:	dc 01       	movw	r26, r24
    7822:	a2 0f       	add	r26, r18
    7824:	b3 1f       	adc	r27, r19
    7826:	6c 93       	st	X, r22
    7828:	04 c0       	rjmp	.+8      	; 0x7832 <pch+0x30>
    782a:	dc 01       	movw	r26, r24
    782c:	a2 0f       	add	r26, r18
    782e:	b3 1f       	adc	r27, r19
    7830:	1c 92       	st	X, r1
    7832:	82 81       	ldd	r24, Z+2	; 0x02
    7834:	93 81       	ldd	r25, Z+3	; 0x03
    7836:	08 95       	ret

00007838 <p_ntoa>:
    7838:	af 92       	push	r10
    783a:	cf 92       	push	r12
    783c:	df 92       	push	r13
    783e:	ef 92       	push	r14
    7840:	ff 92       	push	r15
    7842:	0f 93       	push	r16
    7844:	1f 93       	push	r17
    7846:	cf 93       	push	r28
    7848:	df 93       	push	r29
    784a:	dc 01       	movw	r26, r24
    784c:	eb 01       	movw	r28, r22
    784e:	fa 01       	movw	r30, r20
    7850:	b9 01       	movw	r22, r18
    7852:	98 01       	movw	r18, r16
    7854:	a6 01       	movw	r20, r12
    7856:	9a 2d       	mov	r25, r10
    7858:	a5 fa       	bst	r10, 5
    785a:	cc 24       	eor	r12, r12
    785c:	c0 f8       	bld	r12, 0
    785e:	a6 fc       	sbrc	r10, 6
    7860:	07 c0       	rjmp	.+14     	; 0x7870 <p_ntoa+0x38>
    7862:	a2 fc       	sbrc	r10, 2
    7864:	08 c0       	rjmp	.+16     	; 0x7876 <p_ntoa+0x3e>
    7866:	a4 fe       	sbrs	r10, 4
    7868:	09 c0       	rjmp	.+18     	; 0x787c <p_ntoa+0x44>
    786a:	00 e2       	ldi	r16, 0x20	; 32
    786c:	10 e0       	ldi	r17, 0x00	; 0
    786e:	08 c0       	rjmp	.+16     	; 0x7880 <p_ntoa+0x48>
    7870:	0d e2       	ldi	r16, 0x2D	; 45
    7872:	10 e0       	ldi	r17, 0x00	; 0
    7874:	05 c0       	rjmp	.+10     	; 0x7880 <p_ntoa+0x48>
    7876:	0b e2       	ldi	r16, 0x2B	; 43
    7878:	10 e0       	ldi	r17, 0x00	; 0
    787a:	02 c0       	rjmp	.+4      	; 0x7880 <p_ntoa+0x48>
    787c:	00 e0       	ldi	r16, 0x00	; 0
    787e:	10 e0       	ldi	r17, 0x00	; 0
    7880:	95 ff       	sbrs	r25, 5
    7882:	04 c0       	rjmp	.+8      	; 0x788c <p_ntoa+0x54>
    7884:	89 2f       	mov	r24, r25
    7886:	8a 70       	andi	r24, 0x0A	; 10
    7888:	09 f0       	breq	.+2      	; 0x788c <p_ntoa+0x54>
    788a:	c1 2c       	mov	r12, r1
    788c:	c0 fa       	bst	r12, 0
    788e:	95 f9       	bld	r25, 5
    7890:	89 2f       	mov	r24, r25
    7892:	82 70       	andi	r24, 0x02	; 2
    7894:	c8 2e       	mov	r12, r24
    7896:	91 fd       	sbrc	r25, 1
    7898:	02 c0       	rjmp	.+4      	; 0x789e <p_ntoa+0x66>
    789a:	40 e0       	ldi	r20, 0x00	; 0
    789c:	50 e0       	ldi	r21, 0x00	; 0
    789e:	89 2f       	mov	r24, r25
    78a0:	83 70       	andi	r24, 0x03	; 3
    78a2:	11 f4       	brne	.+4      	; 0x78a8 <p_ntoa+0x70>
    78a4:	41 e0       	ldi	r20, 0x01	; 1
    78a6:	50 e0       	ldi	r21, 0x00	; 0
    78a8:	90 ff       	sbrs	r25, 0
    78aa:	0c c0       	rjmp	.+24     	; 0x78c4 <p_ntoa+0x8c>
    78ac:	95 fd       	sbrc	r25, 5
    78ae:	05 c0       	rjmp	.+10     	; 0x78ba <p_ntoa+0x82>
    78b0:	c1 10       	cpse	r12, r1
    78b2:	08 c0       	rjmp	.+16     	; 0x78c4 <p_ntoa+0x8c>
    78b4:	41 e0       	ldi	r20, 0x01	; 1
    78b6:	50 e0       	ldi	r21, 0x00	; 0
    78b8:	05 c0       	rjmp	.+10     	; 0x78c4 <p_ntoa+0x8c>
    78ba:	94 75       	andi	r25, 0x54	; 84
    78bc:	a7 01       	movw	r20, r14
    78be:	11 f0       	breq	.+4      	; 0x78c4 <p_ntoa+0x8c>
    78c0:	41 50       	subi	r20, 0x01	; 1
    78c2:	51 09       	sbc	r21, r1
    78c4:	68 01       	movw	r12, r16
    78c6:	7e 01       	movw	r14, r28
    78c8:	8d 01       	movw	r16, r26
    78ca:	cf 01       	movw	r24, r30
    78cc:	11 df       	rcall	.-478    	; 0x76f0 <bin2num>
    78ce:	df 91       	pop	r29
    78d0:	cf 91       	pop	r28
    78d2:	1f 91       	pop	r17
    78d4:	0f 91       	pop	r16
    78d6:	ff 90       	pop	r15
    78d8:	ef 90       	pop	r14
    78da:	df 90       	pop	r13
    78dc:	cf 90       	pop	r12
    78de:	af 90       	pop	r10
    78e0:	08 95       	ret

000078e2 <p_ftoa>:
    78e2:	aa e0       	ldi	r26, 0x0A	; 10
    78e4:	b0 e0       	ldi	r27, 0x00	; 0
    78e6:	e7 e7       	ldi	r30, 0x77	; 119
    78e8:	fc e3       	ldi	r31, 0x3C	; 60
    78ea:	0c 94 d8 e0 	jmp	0x1c1b0	; 0x1c1b0 <__prologue_saves__>
    78ee:	4b 01       	movw	r8, r22
    78f0:	5c 01       	movw	r10, r24
    78f2:	1a 01       	movw	r2, r20
    78f4:	28 01       	movw	r4, r16
    78f6:	c6 fa       	bst	r12, 6
    78f8:	11 27       	eor	r17, r17
    78fa:	10 f9       	bld	r17, 0
    78fc:	5a 83       	std	Y+2, r21	; 0x02
    78fe:	49 83       	std	Y+1, r20	; 0x01
    7900:	1c 82       	std	Y+4, r1	; 0x04
    7902:	1b 82       	std	Y+3, r1	; 0x03
    7904:	21 50       	subi	r18, 0x01	; 1
    7906:	31 09       	sbc	r19, r1
    7908:	3e 83       	std	Y+6, r19	; 0x06
    790a:	2d 83       	std	Y+5, r18	; 0x05
    790c:	fa 01       	movw	r30, r20
    790e:	10 82       	st	Z, r1
    7910:	20 e0       	ldi	r18, 0x00	; 0
    7912:	30 e0       	ldi	r19, 0x00	; 0
    7914:	a9 01       	movw	r20, r18
    7916:	0e 94 96 e1 	call	0x1c32c	; 0x1c32c <__cmpsf2>
    791a:	87 ff       	sbrs	r24, 7
    791c:	05 c0       	rjmp	.+10     	; 0x7928 <p_ftoa+0x46>
    791e:	b7 fa       	bst	r11, 7
    7920:	b0 94       	com	r11
    7922:	b7 f8       	bld	r11, 7
    7924:	b0 94       	com	r11
    7926:	11 e0       	ldi	r17, 0x01	; 1
    7928:	10 fb       	bst	r17, 0
    792a:	c6 f8       	bld	r12, 6
    792c:	c6 fe       	sbrs	r12, 6
    792e:	02 c0       	rjmp	.+4      	; 0x7934 <p_ftoa+0x52>
    7930:	6d e2       	ldi	r22, 0x2D	; 45
    7932:	07 c0       	rjmp	.+14     	; 0x7942 <p_ftoa+0x60>
    7934:	c2 fe       	sbrs	r12, 2
    7936:	02 c0       	rjmp	.+4      	; 0x793c <p_ftoa+0x5a>
    7938:	6b e2       	ldi	r22, 0x2B	; 43
    793a:	03 c0       	rjmp	.+6      	; 0x7942 <p_ftoa+0x60>
    793c:	c4 fe       	sbrs	r12, 4
    793e:	04 c0       	rjmp	.+8      	; 0x7948 <p_ftoa+0x66>
    7940:	60 e2       	ldi	r22, 0x20	; 32
    7942:	ce 01       	movw	r24, r28
    7944:	01 96       	adiw	r24, 0x01	; 1
    7946:	5d df       	rcall	.-326    	; 0x7802 <pch>
    7948:	37 01       	movw	r6, r14
    794a:	f7 fe       	sbrs	r15, 7
    794c:	02 c0       	rjmp	.+4      	; 0x7952 <p_ftoa+0x70>
    794e:	61 2c       	mov	r6, r1
    7950:	71 2c       	mov	r7, r1
    7952:	20 e0       	ldi	r18, 0x00	; 0
    7954:	30 e0       	ldi	r19, 0x00	; 0
    7956:	a9 01       	movw	r20, r18
    7958:	c5 01       	movw	r24, r10
    795a:	b4 01       	movw	r22, r8
    795c:	0e 94 96 e1 	call	0x1c32c	; 0x1c32c <__cmpsf2>
    7960:	88 23       	and	r24, r24
    7962:	d1 f1       	breq	.+116    	; 0x79d8 <p_ftoa+0xf6>
    7964:	c1 fe       	sbrs	r12, 1
    7966:	11 c0       	rjmp	.+34     	; 0x798a <p_ftoa+0xa8>
    7968:	83 01       	movw	r16, r6
    796a:	60 e0       	ldi	r22, 0x00	; 0
    796c:	70 e0       	ldi	r23, 0x00	; 0
    796e:	80 e0       	ldi	r24, 0x00	; 0
    7970:	9f e3       	ldi	r25, 0x3F	; 63
    7972:	01 15       	cp	r16, r1
    7974:	11 05       	cpc	r17, r1
    7976:	69 f0       	breq	.+26     	; 0x7992 <p_ftoa+0xb0>
    7978:	20 e0       	ldi	r18, 0x00	; 0
    797a:	30 e0       	ldi	r19, 0x00	; 0
    797c:	40 e2       	ldi	r20, 0x20	; 32
    797e:	51 e4       	ldi	r21, 0x41	; 65
    7980:	0e 94 9a e1 	call	0x1c334	; 0x1c334 <__divsf3>
    7984:	01 50       	subi	r16, 0x01	; 1
    7986:	11 09       	sbc	r17, r1
    7988:	f4 cf       	rjmp	.-24     	; 0x7972 <p_ftoa+0x90>
    798a:	60 e0       	ldi	r22, 0x00	; 0
    798c:	70 e0       	ldi	r23, 0x00	; 0
    798e:	80 e0       	ldi	r24, 0x00	; 0
    7990:	9f e3       	ldi	r25, 0x3F	; 63
    7992:	9b 01       	movw	r18, r22
    7994:	ac 01       	movw	r20, r24
    7996:	c5 01       	movw	r24, r10
    7998:	b4 01       	movw	r22, r8
    799a:	0e 94 32 e1 	call	0x1c264	; 0x1c264 <__addsf3>
    799e:	4b 01       	movw	r8, r22
    79a0:	5c 01       	movw	r10, r24
    79a2:	ee 24       	eor	r14, r14
    79a4:	e3 94       	inc	r14
    79a6:	f1 2c       	mov	r15, r1
    79a8:	20 e0       	ldi	r18, 0x00	; 0
    79aa:	30 e0       	ldi	r19, 0x00	; 0
    79ac:	40 e2       	ldi	r20, 0x20	; 32
    79ae:	51 e4       	ldi	r21, 0x41	; 65
    79b0:	c5 01       	movw	r24, r10
    79b2:	b4 01       	movw	r22, r8
    79b4:	0e 94 e5 e2 	call	0x1c5ca	; 0x1c5ca <__gesf2>
    79b8:	87 fd       	sbrc	r24, 7
    79ba:	11 c0       	rjmp	.+34     	; 0x79de <p_ftoa+0xfc>
    79bc:	ff ef       	ldi	r31, 0xFF	; 255
    79be:	ef 1a       	sub	r14, r31
    79c0:	ff 0a       	sbc	r15, r31
    79c2:	20 e0       	ldi	r18, 0x00	; 0
    79c4:	30 e0       	ldi	r19, 0x00	; 0
    79c6:	40 e2       	ldi	r20, 0x20	; 32
    79c8:	51 e4       	ldi	r21, 0x41	; 65
    79ca:	c5 01       	movw	r24, r10
    79cc:	b4 01       	movw	r22, r8
    79ce:	0e 94 9a e1 	call	0x1c334	; 0x1c334 <__divsf3>
    79d2:	4b 01       	movw	r8, r22
    79d4:	5c 01       	movw	r10, r24
    79d6:	e8 cf       	rjmp	.-48     	; 0x79a8 <p_ftoa+0xc6>
    79d8:	ee 24       	eor	r14, r14
    79da:	e3 94       	inc	r14
    79dc:	f1 2c       	mov	r15, r1
    79de:	8c 2d       	mov	r24, r12
    79e0:	88 72       	andi	r24, 0x28	; 40
    79e2:	80 32       	cpi	r24, 0x20	; 32
    79e4:	c1 f4       	brne	.+48     	; 0x7a16 <p_ftoa+0x134>
    79e6:	82 01       	movw	r16, r4
    79e8:	0e 19       	sub	r16, r14
    79ea:	1f 09       	sbc	r17, r15
    79ec:	8b 81       	ldd	r24, Y+3	; 0x03
    79ee:	9c 81       	ldd	r25, Y+4	; 0x04
    79f0:	08 1b       	sub	r16, r24
    79f2:	19 0b       	sbc	r17, r25
    79f4:	c1 fe       	sbrs	r12, 1
    79f6:	07 c0       	rjmp	.+14     	; 0x7a06 <p_ftoa+0x124>
    79f8:	61 14       	cp	r6, r1
    79fa:	71 04       	cpc	r7, r1
    79fc:	21 f0       	breq	.+8      	; 0x7a06 <p_ftoa+0x124>
    79fe:	06 19       	sub	r16, r6
    7a00:	17 09       	sbc	r17, r7
    7a02:	01 50       	subi	r16, 0x01	; 1
    7a04:	11 09       	sbc	r17, r1
    7a06:	10 16       	cp	r1, r16
    7a08:	11 06       	cpc	r1, r17
    7a0a:	2c f4       	brge	.+10     	; 0x7a16 <p_ftoa+0x134>
    7a0c:	60 e3       	ldi	r22, 0x30	; 48
    7a0e:	ce 01       	movw	r24, r28
    7a10:	01 96       	adiw	r24, 0x01	; 1
    7a12:	f7 de       	rcall	.-530    	; 0x7802 <pch>
    7a14:	f6 cf       	rjmp	.-20     	; 0x7a02 <p_ftoa+0x120>
    7a16:	c5 01       	movw	r24, r10
    7a18:	b4 01       	movw	r22, r8
    7a1a:	0e 94 02 e2 	call	0x1c404	; 0x1c404 <__fixsfsi>
    7a1e:	6f 83       	std	Y+7, r22	; 0x07
    7a20:	78 87       	std	Y+8, r23	; 0x08
    7a22:	89 87       	std	Y+9, r24	; 0x09
    7a24:	9a 87       	std	Y+10, r25	; 0x0a
    7a26:	6f 81       	ldd	r22, Y+7	; 0x07
    7a28:	60 5d       	subi	r22, 0xD0	; 208
    7a2a:	ce 01       	movw	r24, r28
    7a2c:	01 96       	adiw	r24, 0x01	; 1
    7a2e:	e9 de       	rcall	.-558    	; 0x7802 <pch>
    7a30:	2f 81       	ldd	r18, Y+7	; 0x07
    7a32:	38 85       	ldd	r19, Y+8	; 0x08
    7a34:	b9 01       	movw	r22, r18
    7a36:	33 0f       	add	r19, r19
    7a38:	88 0b       	sbc	r24, r24
    7a3a:	99 0b       	sbc	r25, r25
    7a3c:	0e 94 35 e2 	call	0x1c46a	; 0x1c46a <__floatsisf>
    7a40:	9b 01       	movw	r18, r22
    7a42:	ac 01       	movw	r20, r24
    7a44:	c5 01       	movw	r24, r10
    7a46:	b4 01       	movw	r22, r8
    7a48:	0e 94 31 e1 	call	0x1c262	; 0x1c262 <__subsf3>
    7a4c:	31 e0       	ldi	r19, 0x01	; 1
    7a4e:	e3 1a       	sub	r14, r19
    7a50:	f1 08       	sbc	r15, r1
    7a52:	20 e0       	ldi	r18, 0x00	; 0
    7a54:	30 e0       	ldi	r19, 0x00	; 0
    7a56:	40 e2       	ldi	r20, 0x20	; 32
    7a58:	51 e4       	ldi	r21, 0x41	; 65
    7a5a:	0e 94 e9 e2 	call	0x1c5d2	; 0x1c5d2 <__mulsf3>
    7a5e:	4b 01       	movw	r8, r22
    7a60:	5c 01       	movw	r10, r24
    7a62:	e1 14       	cp	r14, r1
    7a64:	f1 04       	cpc	r15, r1
    7a66:	b9 f6       	brne	.-82     	; 0x7a16 <p_ftoa+0x134>
    7a68:	c1 fc       	sbrc	r12, 1
    7a6a:	10 c0       	rjmp	.+32     	; 0x7a8c <p_ftoa+0x1aa>
    7a6c:	60 e0       	ldi	r22, 0x00	; 0
    7a6e:	ce 01       	movw	r24, r28
    7a70:	01 96       	adiw	r24, 0x01	; 1
    7a72:	c7 de       	rcall	.-626    	; 0x7802 <pch>
    7a74:	f1 01       	movw	r30, r2
    7a76:	01 90       	ld	r0, Z+
    7a78:	00 20       	and	r0, r0
    7a7a:	e9 f7       	brne	.-6      	; 0x7a76 <p_ftoa+0x194>
    7a7c:	31 97       	sbiw	r30, 0x01	; 1
    7a7e:	cf 01       	movw	r24, r30
    7a80:	82 19       	sub	r24, r2
    7a82:	93 09       	sbc	r25, r3
    7a84:	2a 96       	adiw	r28, 0x0a	; 10
    7a86:	e2 e1       	ldi	r30, 0x12	; 18
    7a88:	0c 94 f4 e0 	jmp	0x1c1e8	; 0x1c1e8 <__epilogue_restores__>
    7a8c:	61 14       	cp	r6, r1
    7a8e:	71 04       	cpc	r7, r1
    7a90:	69 f3       	breq	.-38     	; 0x7a6c <p_ftoa+0x18a>
    7a92:	6e e2       	ldi	r22, 0x2E	; 46
    7a94:	ce 01       	movw	r24, r28
    7a96:	01 96       	adiw	r24, 0x01	; 1
    7a98:	b4 de       	rcall	.-664    	; 0x7802 <pch>
    7a9a:	c5 01       	movw	r24, r10
    7a9c:	b4 01       	movw	r22, r8
    7a9e:	0e 94 02 e2 	call	0x1c404	; 0x1c404 <__fixsfsi>
    7aa2:	6b 01       	movw	r12, r22
    7aa4:	7c 01       	movw	r14, r24
    7aa6:	07 2e       	mov	r0, r23
    7aa8:	00 0c       	add	r0, r0
    7aaa:	88 0b       	sbc	r24, r24
    7aac:	99 0b       	sbc	r25, r25
    7aae:	0e 94 35 e2 	call	0x1c46a	; 0x1c46a <__floatsisf>
    7ab2:	9b 01       	movw	r18, r22
    7ab4:	ac 01       	movw	r20, r24
    7ab6:	c5 01       	movw	r24, r10
    7ab8:	b4 01       	movw	r22, r8
    7aba:	0e 94 31 e1 	call	0x1c262	; 0x1c262 <__subsf3>
    7abe:	4b 01       	movw	r8, r22
    7ac0:	5c 01       	movw	r10, r24
    7ac2:	b6 01       	movw	r22, r12
    7ac4:	60 5d       	subi	r22, 0xD0	; 208
    7ac6:	7f 4f       	sbci	r23, 0xFF	; 255
    7ac8:	ce 01       	movw	r24, r28
    7aca:	01 96       	adiw	r24, 0x01	; 1
    7acc:	9a de       	rcall	.-716    	; 0x7802 <pch>
    7ace:	81 e0       	ldi	r24, 0x01	; 1
    7ad0:	68 1a       	sub	r6, r24
    7ad2:	71 08       	sbc	r7, r1
    7ad4:	20 e0       	ldi	r18, 0x00	; 0
    7ad6:	30 e0       	ldi	r19, 0x00	; 0
    7ad8:	40 e2       	ldi	r20, 0x20	; 32
    7ada:	51 e4       	ldi	r21, 0x41	; 65
    7adc:	c5 01       	movw	r24, r10
    7ade:	b4 01       	movw	r22, r8
    7ae0:	0e 94 e9 e2 	call	0x1c5d2	; 0x1c5d2 <__mulsf3>
    7ae4:	4b 01       	movw	r8, r22
    7ae6:	5c 01       	movw	r10, r24
    7ae8:	61 14       	cp	r6, r1
    7aea:	71 04       	cpc	r7, r1
    7aec:	b1 f6       	brne	.-84     	; 0x7a9a <p_ftoa+0x1b8>
    7aee:	be cf       	rjmp	.-132    	; 0x7a6c <p_ftoa+0x18a>

00007af0 <p_etoa>:
    7af0:	a3 e1       	ldi	r26, 0x13	; 19
    7af2:	b0 e0       	ldi	r27, 0x00	; 0
    7af4:	ee e7       	ldi	r30, 0x7E	; 126
    7af6:	fd e3       	ldi	r31, 0x3D	; 61
    7af8:	0c 94 d8 e0 	jmp	0x1c1b0	; 0x1c1b0 <__prologue_saves__>
    7afc:	4b 01       	movw	r8, r22
    7afe:	5c 01       	movw	r10, r24
    7b00:	59 8b       	std	Y+17, r21	; 0x11
    7b02:	48 8b       	std	Y+16, r20	; 0x10
    7b04:	1b 8b       	std	Y+19, r17	; 0x13
    7b06:	0a 8b       	std	Y+18, r16	; 0x12
    7b08:	3c 2c       	mov	r3, r12
    7b0a:	c6 fa       	bst	r12, 6
    7b0c:	11 27       	eor	r17, r17
    7b0e:	10 f9       	bld	r17, 0
    7b10:	59 87       	std	Y+9, r21	; 0x09
    7b12:	48 87       	std	Y+8, r20	; 0x08
    7b14:	1b 86       	std	Y+11, r1	; 0x0b
    7b16:	1a 86       	std	Y+10, r1	; 0x0a
    7b18:	21 50       	subi	r18, 0x01	; 1
    7b1a:	31 09       	sbc	r19, r1
    7b1c:	3d 87       	std	Y+13, r19	; 0x0d
    7b1e:	2c 87       	std	Y+12, r18	; 0x0c
    7b20:	fa 01       	movw	r30, r20
    7b22:	10 82       	st	Z, r1
    7b24:	20 e0       	ldi	r18, 0x00	; 0
    7b26:	30 e0       	ldi	r19, 0x00	; 0
    7b28:	a9 01       	movw	r20, r18
    7b2a:	0e 94 96 e1 	call	0x1c32c	; 0x1c32c <__cmpsf2>
    7b2e:	87 ff       	sbrs	r24, 7
    7b30:	05 c0       	rjmp	.+10     	; 0x7b3c <p_etoa+0x4c>
    7b32:	b7 fa       	bst	r11, 7
    7b34:	b0 94       	com	r11
    7b36:	b7 f8       	bld	r11, 7
    7b38:	b0 94       	com	r11
    7b3a:	11 e0       	ldi	r17, 0x01	; 1
    7b3c:	10 fb       	bst	r17, 0
    7b3e:	36 f8       	bld	r3, 6
    7b40:	36 fe       	sbrs	r3, 6
    7b42:	02 c0       	rjmp	.+4      	; 0x7b48 <p_etoa+0x58>
    7b44:	6d e2       	ldi	r22, 0x2D	; 45
    7b46:	07 c0       	rjmp	.+14     	; 0x7b56 <p_etoa+0x66>
    7b48:	32 fe       	sbrs	r3, 2
    7b4a:	02 c0       	rjmp	.+4      	; 0x7b50 <p_etoa+0x60>
    7b4c:	6b e2       	ldi	r22, 0x2B	; 43
    7b4e:	03 c0       	rjmp	.+6      	; 0x7b56 <p_etoa+0x66>
    7b50:	34 fe       	sbrs	r3, 4
    7b52:	04 c0       	rjmp	.+8      	; 0x7b5c <p_etoa+0x6c>
    7b54:	60 e2       	ldi	r22, 0x20	; 32
    7b56:	ce 01       	movw	r24, r28
    7b58:	08 96       	adiw	r24, 0x08	; 8
    7b5a:	53 de       	rcall	.-858    	; 0x7802 <pch>
    7b5c:	37 01       	movw	r6, r14
    7b5e:	f7 fe       	sbrs	r15, 7
    7b60:	02 c0       	rjmp	.+4      	; 0x7b66 <p_etoa+0x76>
    7b62:	61 2c       	mov	r6, r1
    7b64:	71 2c       	mov	r7, r1
    7b66:	1f 86       	std	Y+15, r1	; 0x0f
    7b68:	1e 86       	std	Y+14, r1	; 0x0e
    7b6a:	20 e0       	ldi	r18, 0x00	; 0
    7b6c:	30 e0       	ldi	r19, 0x00	; 0
    7b6e:	a9 01       	movw	r20, r18
    7b70:	c5 01       	movw	r24, r10
    7b72:	b4 01       	movw	r22, r8
    7b74:	0e 94 96 e1 	call	0x1c32c	; 0x1c32c <__cmpsf2>
    7b78:	f3 2d       	mov	r31, r3
    7b7a:	f2 70       	andi	r31, 0x02	; 2
    7b7c:	2f 2e       	mov	r2, r31
    7b7e:	88 23       	and	r24, r24
    7b80:	09 f4       	brne	.+2      	; 0x7b84 <p_etoa+0x94>
    7b82:	70 c0       	rjmp	.+224    	; 0x7c64 <p_etoa+0x174>
    7b84:	ff 23       	and	r31, r31
    7b86:	b1 f0       	breq	.+44     	; 0x7bb4 <p_etoa+0xc4>
    7b88:	83 01       	movw	r16, r6
    7b8a:	c1 2c       	mov	r12, r1
    7b8c:	d1 2c       	mov	r13, r1
    7b8e:	e1 2c       	mov	r14, r1
    7b90:	2f e3       	ldi	r18, 0x3F	; 63
    7b92:	f2 2e       	mov	r15, r18
    7b94:	01 15       	cp	r16, r1
    7b96:	11 05       	cpc	r17, r1
    7b98:	91 f0       	breq	.+36     	; 0x7bbe <p_etoa+0xce>
    7b9a:	20 e0       	ldi	r18, 0x00	; 0
    7b9c:	30 e0       	ldi	r19, 0x00	; 0
    7b9e:	40 e2       	ldi	r20, 0x20	; 32
    7ba0:	51 e4       	ldi	r21, 0x41	; 65
    7ba2:	c7 01       	movw	r24, r14
    7ba4:	b6 01       	movw	r22, r12
    7ba6:	0e 94 9a e1 	call	0x1c334	; 0x1c334 <__divsf3>
    7baa:	6b 01       	movw	r12, r22
    7bac:	7c 01       	movw	r14, r24
    7bae:	01 50       	subi	r16, 0x01	; 1
    7bb0:	11 09       	sbc	r17, r1
    7bb2:	f0 cf       	rjmp	.-32     	; 0x7b94 <p_etoa+0xa4>
    7bb4:	c1 2c       	mov	r12, r1
    7bb6:	d1 2c       	mov	r13, r1
    7bb8:	e1 2c       	mov	r14, r1
    7bba:	9f e3       	ldi	r25, 0x3F	; 63
    7bbc:	f9 2e       	mov	r15, r25
    7bbe:	41 2c       	mov	r4, r1
    7bc0:	51 2c       	mov	r5, r1
    7bc2:	82 01       	movw	r16, r4
    7bc4:	01 50       	subi	r16, 0x01	; 1
    7bc6:	11 09       	sbc	r17, r1
    7bc8:	20 e0       	ldi	r18, 0x00	; 0
    7bca:	30 e0       	ldi	r19, 0x00	; 0
    7bcc:	40 e8       	ldi	r20, 0x80	; 128
    7bce:	5f e3       	ldi	r21, 0x3F	; 63
    7bd0:	c5 01       	movw	r24, r10
    7bd2:	b4 01       	movw	r22, r8
    7bd4:	0e 94 96 e1 	call	0x1c32c	; 0x1c32c <__cmpsf2>
    7bd8:	87 ff       	sbrs	r24, 7
    7bda:	0c c0       	rjmp	.+24     	; 0x7bf4 <p_etoa+0x104>
    7bdc:	20 e0       	ldi	r18, 0x00	; 0
    7bde:	30 e0       	ldi	r19, 0x00	; 0
    7be0:	40 e2       	ldi	r20, 0x20	; 32
    7be2:	51 e4       	ldi	r21, 0x41	; 65
    7be4:	c5 01       	movw	r24, r10
    7be6:	b4 01       	movw	r22, r8
    7be8:	0e 94 e9 e2 	call	0x1c5d2	; 0x1c5d2 <__mulsf3>
    7bec:	4b 01       	movw	r8, r22
    7bee:	5c 01       	movw	r10, r24
    7bf0:	28 01       	movw	r4, r16
    7bf2:	e7 cf       	rjmp	.-50     	; 0x7bc2 <p_etoa+0xd2>
    7bf4:	82 01       	movw	r16, r4
    7bf6:	0f 5f       	subi	r16, 0xFF	; 255
    7bf8:	1f 4f       	sbci	r17, 0xFF	; 255
    7bfa:	20 e0       	ldi	r18, 0x00	; 0
    7bfc:	30 e0       	ldi	r19, 0x00	; 0
    7bfe:	40 e2       	ldi	r20, 0x20	; 32
    7c00:	51 e4       	ldi	r21, 0x41	; 65
    7c02:	c5 01       	movw	r24, r10
    7c04:	b4 01       	movw	r22, r8
    7c06:	0e 94 e5 e2 	call	0x1c5ca	; 0x1c5ca <__gesf2>
    7c0a:	87 fd       	sbrc	r24, 7
    7c0c:	0c c0       	rjmp	.+24     	; 0x7c26 <p_etoa+0x136>
    7c0e:	20 e0       	ldi	r18, 0x00	; 0
    7c10:	30 e0       	ldi	r19, 0x00	; 0
    7c12:	40 e2       	ldi	r20, 0x20	; 32
    7c14:	51 e4       	ldi	r21, 0x41	; 65
    7c16:	c5 01       	movw	r24, r10
    7c18:	b4 01       	movw	r22, r8
    7c1a:	0e 94 9a e1 	call	0x1c334	; 0x1c334 <__divsf3>
    7c1e:	4b 01       	movw	r8, r22
    7c20:	5c 01       	movw	r10, r24
    7c22:	28 01       	movw	r4, r16
    7c24:	e7 cf       	rjmp	.-50     	; 0x7bf4 <p_etoa+0x104>
    7c26:	a7 01       	movw	r20, r14
    7c28:	96 01       	movw	r18, r12
    7c2a:	c5 01       	movw	r24, r10
    7c2c:	b4 01       	movw	r22, r8
    7c2e:	0e 94 32 e1 	call	0x1c264	; 0x1c264 <__addsf3>
    7c32:	4b 01       	movw	r8, r22
    7c34:	5c 01       	movw	r10, r24
    7c36:	82 01       	movw	r16, r4
    7c38:	2f ef       	ldi	r18, 0xFF	; 255
    7c3a:	42 1a       	sub	r4, r18
    7c3c:	52 0a       	sbc	r5, r18
    7c3e:	20 e0       	ldi	r18, 0x00	; 0
    7c40:	30 e0       	ldi	r19, 0x00	; 0
    7c42:	40 e2       	ldi	r20, 0x20	; 32
    7c44:	51 e4       	ldi	r21, 0x41	; 65
    7c46:	0e 94 e5 e2 	call	0x1c5ca	; 0x1c5ca <__gesf2>
    7c4a:	87 fd       	sbrc	r24, 7
    7c4c:	09 c0       	rjmp	.+18     	; 0x7c60 <p_etoa+0x170>
    7c4e:	20 e0       	ldi	r18, 0x00	; 0
    7c50:	30 e0       	ldi	r19, 0x00	; 0
    7c52:	40 e2       	ldi	r20, 0x20	; 32
    7c54:	51 e4       	ldi	r21, 0x41	; 65
    7c56:	c5 01       	movw	r24, r10
    7c58:	b4 01       	movw	r22, r8
    7c5a:	0e 94 9a e1 	call	0x1c334	; 0x1c334 <__divsf3>
    7c5e:	e9 cf       	rjmp	.-46     	; 0x7c32 <p_etoa+0x142>
    7c60:	0e 87       	std	Y+14, r16	; 0x0e
    7c62:	1f 87       	std	Y+15, r17	; 0x0f
    7c64:	85 e6       	ldi	r24, 0x65	; 101
    7c66:	89 83       	std	Y+1, r24	; 0x01
    7c68:	8e 85       	ldd	r24, Y+14	; 0x0e
    7c6a:	9f 85       	ldd	r25, Y+15	; 0x0f
    7c6c:	97 ff       	sbrs	r25, 7
    7c6e:	08 c0       	rjmp	.+16     	; 0x7c80 <p_etoa+0x190>
    7c70:	91 95       	neg	r25
    7c72:	81 95       	neg	r24
    7c74:	91 09       	sbc	r25, r1
    7c76:	9f 87       	std	Y+15, r25	; 0x0f
    7c78:	8e 87       	std	Y+14, r24	; 0x0e
    7c7a:	8d e2       	ldi	r24, 0x2D	; 45
    7c7c:	90 e0       	ldi	r25, 0x00	; 0
    7c7e:	02 c0       	rjmp	.+4      	; 0x7c84 <p_etoa+0x194>
    7c80:	8b e2       	ldi	r24, 0x2B	; 43
    7c82:	90 e0       	ldi	r25, 0x00	; 0
    7c84:	6c 01       	movw	r12, r24
    7c86:	82 e0       	ldi	r24, 0x02	; 2
    7c88:	e8 2e       	mov	r14, r24
    7c8a:	f1 2c       	mov	r15, r1
    7c8c:	8e 01       	movw	r16, r28
    7c8e:	02 5f       	subi	r16, 0xF2	; 242
    7c90:	1f 4f       	sbci	r17, 0xFF	; 255
    7c92:	2a e0       	ldi	r18, 0x0A	; 10
    7c94:	30 e0       	ldi	r19, 0x00	; 0
    7c96:	42 e0       	ldi	r20, 0x02	; 2
    7c98:	50 e0       	ldi	r21, 0x00	; 0
    7c9a:	65 e0       	ldi	r22, 0x05	; 5
    7c9c:	70 e0       	ldi	r23, 0x00	; 0
    7c9e:	ce 01       	movw	r24, r28
    7ca0:	02 96       	adiw	r24, 0x02	; 2
    7ca2:	26 dd       	rcall	.-1460   	; 0x76f0 <bin2num>
    7ca4:	9c 01       	movw	r18, r24
    7ca6:	93 2d       	mov	r25, r3
    7ca8:	98 72       	andi	r25, 0x28	; 40
    7caa:	90 32       	cpi	r25, 0x20	; 32
    7cac:	71 f0       	breq	.+28     	; 0x7cca <p_etoa+0x1da>
    7cae:	c5 01       	movw	r24, r10
    7cb0:	b4 01       	movw	r22, r8
    7cb2:	0e 94 02 e2 	call	0x1c404	; 0x1c404 <__fixsfsi>
    7cb6:	6b 01       	movw	r12, r22
    7cb8:	7c 01       	movw	r14, r24
    7cba:	60 e3       	ldi	r22, 0x30	; 48
    7cbc:	6c 0d       	add	r22, r12
    7cbe:	ce 01       	movw	r24, r28
    7cc0:	08 96       	adiw	r24, 0x08	; 8
    7cc2:	9f dd       	rcall	.-1218   	; 0x7802 <pch>
    7cc4:	21 10       	cpse	r2, r1
    7cc6:	20 c0       	rjmp	.+64     	; 0x7d08 <p_etoa+0x218>
    7cc8:	63 c0       	rjmp	.+198    	; 0x7d90 <p_etoa+0x2a0>
    7cca:	8a 85       	ldd	r24, Y+10	; 0x0a
    7ccc:	9b 85       	ldd	r25, Y+11	; 0x0b
    7cce:	0a 89       	ldd	r16, Y+18	; 0x12
    7cd0:	1b 89       	ldd	r17, Y+19	; 0x13
    7cd2:	08 1b       	sub	r16, r24
    7cd4:	19 0b       	sbc	r17, r25
    7cd6:	22 20       	and	r2, r2
    7cd8:	41 f0       	breq	.+16     	; 0x7cea <p_etoa+0x1fa>
    7cda:	61 14       	cp	r6, r1
    7cdc:	71 04       	cpc	r7, r1
    7cde:	29 f0       	breq	.+10     	; 0x7cea <p_etoa+0x1fa>
    7ce0:	06 19       	sub	r16, r6
    7ce2:	17 09       	sbc	r17, r7
    7ce4:	06 50       	subi	r16, 0x06	; 6
    7ce6:	11 09       	sbc	r17, r1
    7ce8:	02 c0       	rjmp	.+4      	; 0x7cee <p_etoa+0x1fe>
    7cea:	05 50       	subi	r16, 0x05	; 5
    7cec:	11 09       	sbc	r17, r1
    7cee:	24 30       	cpi	r18, 0x04	; 4
    7cf0:	31 05       	cpc	r19, r1
    7cf2:	14 f0       	brlt	.+4      	; 0x7cf8 <p_etoa+0x208>
    7cf4:	01 50       	subi	r16, 0x01	; 1
    7cf6:	11 09       	sbc	r17, r1
    7cf8:	10 16       	cp	r1, r16
    7cfa:	11 06       	cpc	r1, r17
    7cfc:	c4 f6       	brge	.-80     	; 0x7cae <p_etoa+0x1be>
    7cfe:	60 e3       	ldi	r22, 0x30	; 48
    7d00:	ce 01       	movw	r24, r28
    7d02:	08 96       	adiw	r24, 0x08	; 8
    7d04:	7e dd       	rcall	.-1284   	; 0x7802 <pch>
    7d06:	f6 cf       	rjmp	.-20     	; 0x7cf4 <p_etoa+0x204>
    7d08:	61 14       	cp	r6, r1
    7d0a:	71 04       	cpc	r7, r1
    7d0c:	09 f4       	brne	.+2      	; 0x7d10 <p_etoa+0x220>
    7d0e:	40 c0       	rjmp	.+128    	; 0x7d90 <p_etoa+0x2a0>
    7d10:	b6 01       	movw	r22, r12
    7d12:	dd 0c       	add	r13, r13
    7d14:	88 0b       	sbc	r24, r24
    7d16:	99 0b       	sbc	r25, r25
    7d18:	0e 94 35 e2 	call	0x1c46a	; 0x1c46a <__floatsisf>
    7d1c:	9b 01       	movw	r18, r22
    7d1e:	ac 01       	movw	r20, r24
    7d20:	c5 01       	movw	r24, r10
    7d22:	b4 01       	movw	r22, r8
    7d24:	0e 94 31 e1 	call	0x1c262	; 0x1c262 <__subsf3>
    7d28:	20 e0       	ldi	r18, 0x00	; 0
    7d2a:	30 e0       	ldi	r19, 0x00	; 0
    7d2c:	40 e2       	ldi	r20, 0x20	; 32
    7d2e:	51 e4       	ldi	r21, 0x41	; 65
    7d30:	0e 94 e9 e2 	call	0x1c5d2	; 0x1c5d2 <__mulsf3>
    7d34:	4b 01       	movw	r8, r22
    7d36:	5c 01       	movw	r10, r24
    7d38:	6e e2       	ldi	r22, 0x2E	; 46
    7d3a:	ce 01       	movw	r24, r28
    7d3c:	08 96       	adiw	r24, 0x08	; 8
    7d3e:	61 dd       	rcall	.-1342   	; 0x7802 <pch>
    7d40:	c5 01       	movw	r24, r10
    7d42:	b4 01       	movw	r22, r8
    7d44:	0e 94 02 e2 	call	0x1c404	; 0x1c404 <__fixsfsi>
    7d48:	6b 01       	movw	r12, r22
    7d4a:	7c 01       	movw	r14, r24
    7d4c:	07 2e       	mov	r0, r23
    7d4e:	00 0c       	add	r0, r0
    7d50:	88 0b       	sbc	r24, r24
    7d52:	99 0b       	sbc	r25, r25
    7d54:	0e 94 35 e2 	call	0x1c46a	; 0x1c46a <__floatsisf>
    7d58:	9b 01       	movw	r18, r22
    7d5a:	ac 01       	movw	r20, r24
    7d5c:	c5 01       	movw	r24, r10
    7d5e:	b4 01       	movw	r22, r8
    7d60:	0e 94 31 e1 	call	0x1c262	; 0x1c262 <__subsf3>
    7d64:	4b 01       	movw	r8, r22
    7d66:	5c 01       	movw	r10, r24
    7d68:	b6 01       	movw	r22, r12
    7d6a:	60 5d       	subi	r22, 0xD0	; 208
    7d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    7d6e:	ce 01       	movw	r24, r28
    7d70:	08 96       	adiw	r24, 0x08	; 8
    7d72:	47 dd       	rcall	.-1394   	; 0x7802 <pch>
    7d74:	20 e0       	ldi	r18, 0x00	; 0
    7d76:	30 e0       	ldi	r19, 0x00	; 0
    7d78:	40 e2       	ldi	r20, 0x20	; 32
    7d7a:	51 e4       	ldi	r21, 0x41	; 65
    7d7c:	c5 01       	movw	r24, r10
    7d7e:	b4 01       	movw	r22, r8
    7d80:	0e 94 e9 e2 	call	0x1c5d2	; 0x1c5d2 <__mulsf3>
    7d84:	4b 01       	movw	r8, r22
    7d86:	5c 01       	movw	r10, r24
    7d88:	31 e0       	ldi	r19, 0x01	; 1
    7d8a:	63 1a       	sub	r6, r19
    7d8c:	71 08       	sbc	r7, r1
    7d8e:	c1 f6       	brne	.-80     	; 0x7d40 <p_etoa+0x250>
    7d90:	8e 01       	movw	r16, r28
    7d92:	0f 5f       	subi	r16, 0xFF	; 255
    7d94:	1f 4f       	sbci	r17, 0xFF	; 255
    7d96:	f8 01       	movw	r30, r16
    7d98:	61 91       	ld	r22, Z+
    7d9a:	8f 01       	movw	r16, r30
    7d9c:	ce 01       	movw	r24, r28
    7d9e:	08 96       	adiw	r24, 0x08	; 8
    7da0:	66 23       	and	r22, r22
    7da2:	11 f0       	breq	.+4      	; 0x7da8 <p_etoa+0x2b8>
    7da4:	2e dd       	rcall	.-1444   	; 0x7802 <pch>
    7da6:	f7 cf       	rjmp	.-18     	; 0x7d96 <p_etoa+0x2a6>
    7da8:	2c dd       	rcall	.-1448   	; 0x7802 <pch>
    7daa:	e8 89       	ldd	r30, Y+16	; 0x10
    7dac:	f9 89       	ldd	r31, Y+17	; 0x11
    7dae:	01 90       	ld	r0, Z+
    7db0:	00 20       	and	r0, r0
    7db2:	e9 f7       	brne	.-6      	; 0x7dae <p_etoa+0x2be>
    7db4:	cf 01       	movw	r24, r30
    7db6:	01 97       	sbiw	r24, 0x01	; 1
    7db8:	28 89       	ldd	r18, Y+16	; 0x10
    7dba:	39 89       	ldd	r19, Y+17	; 0x11
    7dbc:	82 1b       	sub	r24, r18
    7dbe:	93 0b       	sbc	r25, r19
    7dc0:	63 96       	adiw	r28, 0x13	; 19
    7dc2:	e2 e1       	ldi	r30, 0x12	; 18
    7dc4:	0c 94 f4 e0 	jmp	0x1c1e8	; 0x1c1e8 <__epilogue_restores__>

00007dc8 <_puts_pad>:
    7dc8:	a0 e0       	ldi	r26, 0x00	; 0
    7dca:	b0 e0       	ldi	r27, 0x00	; 0
    7dcc:	ea ee       	ldi	r30, 0xEA	; 234
    7dce:	fe e3       	ldi	r31, 0x3E	; 62
    7dd0:	0c 94 de e0 	jmp	0x1c1bc	; 0x1c1bc <__prologue_saves__+0xc>
    7dd4:	6c 01       	movw	r12, r24
    7dd6:	4b 01       	movw	r8, r22
    7dd8:	79 01       	movw	r14, r18
    7dda:	24 17       	cp	r18, r20
    7ddc:	35 07       	cpc	r19, r21
    7dde:	24 f4       	brge	.+8      	; 0x7de8 <_puts_pad+0x20>
    7de0:	ea 01       	movw	r28, r20
    7de2:	c2 1b       	sub	r28, r18
    7de4:	d3 0b       	sbc	r29, r19
    7de6:	02 c0       	rjmp	.+4      	; 0x7dec <_puts_pad+0x24>
    7de8:	c0 e0       	ldi	r28, 0x00	; 0
    7dea:	d0 e0       	ldi	r29, 0x00	; 0
    7dec:	01 15       	cp	r16, r1
    7dee:	11 05       	cpc	r17, r1
    7df0:	49 f4       	brne	.+18     	; 0x7e04 <_puts_pad+0x3c>
    7df2:	21 97       	sbiw	r28, 0x01	; 1
    7df4:	38 f0       	brcs	.+14     	; 0x7e04 <_puts_pad+0x3c>
    7df6:	d6 01       	movw	r26, r12
    7df8:	ed 91       	ld	r30, X+
    7dfa:	fc 91       	ld	r31, X
    7dfc:	60 e2       	ldi	r22, 0x20	; 32
    7dfe:	c6 01       	movw	r24, r12
    7e00:	09 95       	icall
    7e02:	f7 cf       	rjmp	.-18     	; 0x7df2 <_puts_pad+0x2a>
    7e04:	54 01       	movw	r10, r8
    7e06:	f5 01       	movw	r30, r10
    7e08:	61 91       	ld	r22, Z+
    7e0a:	5f 01       	movw	r10, r30
    7e0c:	66 23       	and	r22, r22
    7e0e:	61 f0       	breq	.+24     	; 0x7e28 <_puts_pad+0x60>
    7e10:	e1 14       	cp	r14, r1
    7e12:	f1 04       	cpc	r15, r1
    7e14:	49 f0       	breq	.+18     	; 0x7e28 <_puts_pad+0x60>
    7e16:	d6 01       	movw	r26, r12
    7e18:	ed 91       	ld	r30, X+
    7e1a:	fc 91       	ld	r31, X
    7e1c:	c6 01       	movw	r24, r12
    7e1e:	09 95       	icall
    7e20:	b1 e0       	ldi	r27, 0x01	; 1
    7e22:	eb 1a       	sub	r14, r27
    7e24:	f1 08       	sbc	r15, r1
    7e26:	ef cf       	rjmp	.-34     	; 0x7e06 <_puts_pad+0x3e>
    7e28:	01 15       	cp	r16, r1
    7e2a:	11 05       	cpc	r17, r1
    7e2c:	51 f0       	breq	.+20     	; 0x7e42 <_puts_pad+0x7a>
    7e2e:	20 97       	sbiw	r28, 0x00	; 0
    7e30:	41 f0       	breq	.+16     	; 0x7e42 <_puts_pad+0x7a>
    7e32:	d6 01       	movw	r26, r12
    7e34:	ed 91       	ld	r30, X+
    7e36:	fc 91       	ld	r31, X
    7e38:	60 e2       	ldi	r22, 0x20	; 32
    7e3a:	c6 01       	movw	r24, r12
    7e3c:	09 95       	icall
    7e3e:	21 97       	sbiw	r28, 0x01	; 1
    7e40:	f6 cf       	rjmp	.-20     	; 0x7e2e <_puts_pad+0x66>
    7e42:	cd b7       	in	r28, 0x3d	; 61
    7e44:	de b7       	in	r29, 0x3e	; 62
    7e46:	ec e0       	ldi	r30, 0x0C	; 12
    7e48:	0c 94 fa e0 	jmp	0x1c1f4	; 0x1c1f4 <__epilogue_restores__+0xc>

00007e4c <_puts_pad_X>:
    7e4c:	2f 92       	push	r2
    7e4e:	3f 92       	push	r3
    7e50:	4f 92       	push	r4
    7e52:	6f 92       	push	r6
    7e54:	7f 92       	push	r7
    7e56:	8f 92       	push	r8
    7e58:	cf 92       	push	r12
    7e5a:	df 92       	push	r13
    7e5c:	ef 92       	push	r14
    7e5e:	ff 92       	push	r15
    7e60:	0f 93       	push	r16
    7e62:	1f 93       	push	r17
    7e64:	cf 93       	push	r28
    7e66:	df 93       	push	r29
    7e68:	6c 01       	movw	r12, r24
    7e6a:	3a 01       	movw	r6, r20
    7e6c:	86 2e       	mov	r8, r22
    7e6e:	02 17       	cp	r16, r18
    7e70:	13 07       	cpc	r17, r19
    7e72:	24 f4       	brge	.+8      	; 0x7e7c <_puts_pad_X+0x30>
    7e74:	e9 01       	movw	r28, r18
    7e76:	c0 1b       	sub	r28, r16
    7e78:	d1 0b       	sbc	r29, r17
    7e7a:	02 c0       	rjmp	.+4      	; 0x7e80 <_puts_pad_X+0x34>
    7e7c:	c0 e0       	ldi	r28, 0x00	; 0
    7e7e:	d0 e0       	ldi	r29, 0x00	; 0
    7e80:	e1 14       	cp	r14, r1
    7e82:	f1 04       	cpc	r15, r1
    7e84:	49 f4       	brne	.+18     	; 0x7e98 <_puts_pad_X+0x4c>
    7e86:	21 97       	sbiw	r28, 0x01	; 1
    7e88:	38 f0       	brcs	.+14     	; 0x7e98 <_puts_pad_X+0x4c>
    7e8a:	d6 01       	movw	r26, r12
    7e8c:	ed 91       	ld	r30, X+
    7e8e:	fc 91       	ld	r31, X
    7e90:	60 e2       	ldi	r22, 0x20	; 32
    7e92:	c6 01       	movw	r24, r12
    7e94:	09 95       	icall
    7e96:	f7 cf       	rjmp	.-18     	; 0x7e86 <_puts_pad_X+0x3a>
    7e98:	13 01       	movw	r2, r6
    7e9a:	48 2c       	mov	r4, r8
    7e9c:	20 0e       	add	r2, r16
    7e9e:	31 1e       	adc	r3, r17
    7ea0:	41 1c       	adc	r4, r1
    7ea2:	17 fd       	sbrc	r17, 7
    7ea4:	4a 94       	dec	r4
    7ea6:	f3 01       	movw	r30, r6
    7ea8:	58 2d       	mov	r21, r8
    7eaa:	0e 94 0f e1 	call	0x1c21e	; 0x1c21e <__xload_1>
    7eae:	66 23       	and	r22, r22
    7eb0:	71 f0       	breq	.+28     	; 0x7ece <_puts_pad_X+0x82>
    7eb2:	62 14       	cp	r6, r2
    7eb4:	73 04       	cpc	r7, r3
    7eb6:	84 04       	cpc	r8, r4
    7eb8:	51 f0       	breq	.+20     	; 0x7ece <_puts_pad_X+0x82>
    7eba:	d6 01       	movw	r26, r12
    7ebc:	ed 91       	ld	r30, X+
    7ebe:	fc 91       	ld	r31, X
    7ec0:	c6 01       	movw	r24, r12
    7ec2:	09 95       	icall
    7ec4:	bf ef       	ldi	r27, 0xFF	; 255
    7ec6:	6b 1a       	sub	r6, r27
    7ec8:	7b 0a       	sbc	r7, r27
    7eca:	8b 0a       	sbc	r8, r27
    7ecc:	ec cf       	rjmp	.-40     	; 0x7ea6 <_puts_pad_X+0x5a>
    7ece:	ef 28       	or	r14, r15
    7ed0:	51 f0       	breq	.+20     	; 0x7ee6 <_puts_pad_X+0x9a>
    7ed2:	20 97       	sbiw	r28, 0x00	; 0
    7ed4:	41 f0       	breq	.+16     	; 0x7ee6 <_puts_pad_X+0x9a>
    7ed6:	d6 01       	movw	r26, r12
    7ed8:	ed 91       	ld	r30, X+
    7eda:	fc 91       	ld	r31, X
    7edc:	60 e2       	ldi	r22, 0x20	; 32
    7ede:	c6 01       	movw	r24, r12
    7ee0:	09 95       	icall
    7ee2:	21 97       	sbiw	r28, 0x01	; 1
    7ee4:	f6 cf       	rjmp	.-20     	; 0x7ed2 <_puts_pad_X+0x86>
    7ee6:	df 91       	pop	r29
    7ee8:	cf 91       	pop	r28
    7eea:	1f 91       	pop	r17
    7eec:	0f 91       	pop	r16
    7eee:	ff 90       	pop	r15
    7ef0:	ef 90       	pop	r14
    7ef2:	df 90       	pop	r13
    7ef4:	cf 90       	pop	r12
    7ef6:	8f 90       	pop	r8
    7ef8:	7f 90       	pop	r7
    7efa:	6f 90       	pop	r6
    7efc:	4f 90       	pop	r4
    7efe:	3f 90       	pop	r3
    7f00:	2f 90       	pop	r2
    7f02:	08 95       	ret

00007f04 <strlen_X>:
    7f04:	cf 92       	push	r12
    7f06:	df 92       	push	r13
    7f08:	ef 92       	push	r14
    7f0a:	9b 01       	movw	r18, r22
    7f0c:	48 2f       	mov	r20, r24
    7f0e:	80 e0       	ldi	r24, 0x00	; 0
    7f10:	90 e0       	ldi	r25, 0x00	; 0
    7f12:	2f 5f       	subi	r18, 0xFF	; 255
    7f14:	3f 4f       	sbci	r19, 0xFF	; 255
    7f16:	4f 4f       	sbci	r20, 0xFF	; 255
    7f18:	69 01       	movw	r12, r18
    7f1a:	e4 2e       	mov	r14, r20
    7f1c:	51 e0       	ldi	r21, 0x01	; 1
    7f1e:	c5 1a       	sub	r12, r21
    7f20:	d1 08       	sbc	r13, r1
    7f22:	e1 08       	sbc	r14, r1
    7f24:	f6 01       	movw	r30, r12
    7f26:	5e 2d       	mov	r21, r14
    7f28:	0e 94 0f e1 	call	0x1c21e	; 0x1c21e <__xload_1>
    7f2c:	66 23       	and	r22, r22
    7f2e:	11 f0       	breq	.+4      	; 0x7f34 <strlen_X+0x30>
    7f30:	01 96       	adiw	r24, 0x01	; 1
    7f32:	ef cf       	rjmp	.-34     	; 0x7f12 <strlen_X+0xe>
    7f34:	ef 90       	pop	r14
    7f36:	df 90       	pop	r13
    7f38:	cf 90       	pop	r12
    7f3a:	08 95       	ret

00007f3c <_printf_fn>:
    7f3c:	ae e6       	ldi	r26, 0x6E	; 110
    7f3e:	b0 e0       	ldi	r27, 0x00	; 0
    7f40:	e4 ea       	ldi	r30, 0xA4	; 164
    7f42:	ff e3       	ldi	r31, 0x3F	; 63
    7f44:	0c 94 d8 e0 	jmp	0x1c1b0	; 0x1c1b0 <__prologue_saves__>
    7f48:	a5 96       	adiw	r28, 0x25	; 37
    7f4a:	9f af       	std	Y+63, r25	; 0x3f
    7f4c:	8e af       	std	Y+62, r24	; 0x3e
    7f4e:	a5 97       	sbiw	r28, 0x25	; 37
    7f50:	6a 01       	movw	r12, r20
    7f52:	e6 2e       	mov	r14, r22
    7f54:	19 01       	movw	r2, r18
    7f56:	a9 96       	adiw	r28, 0x29	; 41
    7f58:	1c ae       	std	Y+60, r1	; 0x3c
    7f5a:	1d ae       	std	Y+61, r1	; 0x3d
    7f5c:	1e ae       	std	Y+62, r1	; 0x3e
    7f5e:	1f ae       	std	Y+63, r1	; 0x3f
    7f60:	a9 97       	sbiw	r28, 0x29	; 41
    7f62:	8a e1       	ldi	r24, 0x1A	; 26
    7f64:	94 e0       	ldi	r25, 0x04	; 4
    7f66:	9c 01       	movw	r18, r24
    7f68:	40 e8       	ldi	r20, 0x80	; 128
    7f6a:	ae 96       	adiw	r28, 0x2e	; 46
    7f6c:	2d af       	std	Y+61, r18	; 0x3d
    7f6e:	3e af       	std	Y+62, r19	; 0x3e
    7f70:	4f af       	std	Y+63, r20	; 0x3f
    7f72:	ae 97       	sbiw	r28, 0x2e	; 46
    7f74:	ae 01       	movw	r20, r28
    7f76:	4f 5a       	subi	r20, 0xAF	; 175
    7f78:	5f 4f       	sbci	r21, 0xFF	; 255
    7f7a:	67 96       	adiw	r28, 0x17	; 23
    7f7c:	5f af       	std	Y+63, r21	; 0x3f
    7f7e:	4e af       	std	Y+62, r20	; 0x3e
    7f80:	67 97       	sbiw	r28, 0x17	; 23
    7f82:	ce 01       	movw	r24, r28
    7f84:	8d 5b       	subi	r24, 0xBD	; 189
    7f86:	9f 4f       	sbci	r25, 0xFF	; 255
    7f88:	69 96       	adiw	r28, 0x19	; 25
    7f8a:	9f af       	std	Y+63, r25	; 0x3f
    7f8c:	8e af       	std	Y+62, r24	; 0x3e
    7f8e:	69 97       	sbiw	r28, 0x19	; 25
    7f90:	de 01       	movw	r26, r28
    7f92:	a5 5b       	subi	r26, 0xB5	; 181
    7f94:	bf 4f       	sbci	r27, 0xFF	; 255
    7f96:	6b 96       	adiw	r28, 0x1b	; 27
    7f98:	bf af       	std	Y+63, r27	; 0x3f
    7f9a:	ae af       	std	Y+62, r26	; 0x3e
    7f9c:	6b 97       	sbiw	r28, 0x1b	; 27
    7f9e:	fe 01       	movw	r30, r28
    7fa0:	ed 5a       	subi	r30, 0xAD	; 173
    7fa2:	ff 4f       	sbci	r31, 0xFF	; 255
    7fa4:	6d 96       	adiw	r28, 0x1d	; 29
    7fa6:	ff af       	std	Y+63, r31	; 0x3f
    7fa8:	ee af       	std	Y+62, r30	; 0x3e
    7faa:	6d 97       	sbiw	r28, 0x1d	; 29
    7fac:	f6 01       	movw	r30, r12
    7fae:	5e 2d       	mov	r21, r14
    7fb0:	0e 94 0f e1 	call	0x1c21e	; 0x1c21e <__xload_1>
    7fb4:	66 23       	and	r22, r22
    7fb6:	09 f4       	brne	.+2      	; 0x7fba <_printf_fn+0x7e>
    7fb8:	13 c4       	rjmp	.+2086   	; 0x87e0 <_printf_fn+0x8a4>
    7fba:	ae 2d       	mov	r26, r14
    7fbc:	c6 01       	movw	r24, r12
    7fbe:	01 96       	adiw	r24, 0x01	; 1
    7fc0:	a1 1d       	adc	r26, r1
    7fc2:	3c 01       	movw	r6, r24
    7fc4:	8a 2e       	mov	r8, r26
    7fc6:	65 32       	cpi	r22, 0x25	; 37
    7fc8:	51 f0       	breq	.+20     	; 0x7fde <_printf_fn+0xa2>
    7fca:	a5 96       	adiw	r28, 0x25	; 37
    7fcc:	ae ad       	ldd	r26, Y+62	; 0x3e
    7fce:	bf ad       	ldd	r27, Y+63	; 0x3f
    7fd0:	a5 97       	sbiw	r28, 0x25	; 37
    7fd2:	ed 91       	ld	r30, X+
    7fd4:	fc 91       	ld	r31, X
    7fd6:	11 97       	sbiw	r26, 0x01	; 1
    7fd8:	cd 01       	movw	r24, r26
    7fda:	09 95       	icall
    7fdc:	d5 c3       	rjmp	.+1962   	; 0x8788 <_printf_fn+0x84c>
    7fde:	91 2c       	mov	r9, r1
    7fe0:	f3 01       	movw	r30, r6
    7fe2:	58 2d       	mov	r21, r8
    7fe4:	0e 94 0f e1 	call	0x1c21e	; 0x1c21e <__xload_1>
    7fe8:	63 32       	cpi	r22, 0x23	; 35
    7fea:	19 f4       	brne	.+6      	; 0x7ff2 <_printf_fn+0xb6>
    7fec:	68 94       	set
    7fee:	97 f8       	bld	r9, 7
    7ff0:	04 c0       	rjmp	.+8      	; 0x7ffa <_printf_fn+0xbe>
    7ff2:	6b 32       	cpi	r22, 0x2B	; 43
    7ff4:	39 f4       	brne	.+14     	; 0x8004 <_printf_fn+0xc8>
    7ff6:	68 94       	set
    7ff8:	92 f8       	bld	r9, 2
    7ffa:	bf ef       	ldi	r27, 0xFF	; 255
    7ffc:	6b 1a       	sub	r6, r27
    7ffe:	7b 0a       	sbc	r7, r27
    8000:	8b 0a       	sbc	r8, r27
    8002:	ee cf       	rjmp	.-36     	; 0x7fe0 <_printf_fn+0xa4>
    8004:	6d 32       	cpi	r22, 0x2D	; 45
    8006:	a9 f4       	brne	.+42     	; 0x8032 <_printf_fn+0xf6>
    8008:	93 fc       	sbrc	r9, 3
    800a:	05 c0       	rjmp	.+10     	; 0x8016 <_printf_fn+0xda>
    800c:	6d 32       	cpi	r22, 0x2D	; 45
    800e:	19 f4       	brne	.+6      	; 0x8016 <_printf_fn+0xda>
    8010:	68 94       	set
    8012:	93 f8       	bld	r9, 3
    8014:	f2 cf       	rjmp	.-28     	; 0x7ffa <_printf_fn+0xbe>
    8016:	94 fc       	sbrc	r9, 4
    8018:	05 c0       	rjmp	.+10     	; 0x8024 <_printf_fn+0xe8>
    801a:	60 32       	cpi	r22, 0x20	; 32
    801c:	19 f4       	brne	.+6      	; 0x8024 <_printf_fn+0xe8>
    801e:	68 94       	set
    8020:	94 f8       	bld	r9, 4
    8022:	eb cf       	rjmp	.-42     	; 0x7ffa <_printf_fn+0xbe>
    8024:	95 fc       	sbrc	r9, 5
    8026:	e9 cf       	rjmp	.-46     	; 0x7ffa <_printf_fn+0xbe>
    8028:	60 33       	cpi	r22, 0x30	; 48
    802a:	39 f7       	brne	.-50     	; 0x7ffa <_printf_fn+0xbe>
    802c:	68 94       	set
    802e:	95 f8       	bld	r9, 5
    8030:	e4 cf       	rjmp	.-56     	; 0x7ffa <_printf_fn+0xbe>
    8032:	86 2f       	mov	r24, r22
    8034:	8f 7e       	andi	r24, 0xEF	; 239
    8036:	80 32       	cpi	r24, 0x20	; 32
    8038:	39 f3       	breq	.-50     	; 0x8008 <_printf_fn+0xcc>
    803a:	70 e0       	ldi	r23, 0x00	; 0
    803c:	60 53       	subi	r22, 0x30	; 48
    803e:	71 09       	sbc	r23, r1
    8040:	6f 96       	adiw	r28, 0x1f	; 31
    8042:	1f ae       	std	Y+63, r1	; 0x3f
    8044:	1e ae       	std	Y+62, r1	; 0x3e
    8046:	6f 97       	sbiw	r28, 0x1f	; 31
    8048:	6a 30       	cpi	r22, 0x0A	; 10
    804a:	71 05       	cpc	r23, r1
    804c:	10 f5       	brcc	.+68     	; 0x8092 <_printf_fn+0x156>
    804e:	2a e0       	ldi	r18, 0x0A	; 10
    8050:	f3 01       	movw	r30, r6
    8052:	58 2d       	mov	r21, r8
    8054:	0e 94 0f e1 	call	0x1c21e	; 0x1c21e <__xload_1>
    8058:	70 e0       	ldi	r23, 0x00	; 0
    805a:	cb 01       	movw	r24, r22
    805c:	c0 97       	sbiw	r24, 0x30	; 48
    805e:	0a 97       	sbiw	r24, 0x0a	; 10
    8060:	b0 f4       	brcc	.+44     	; 0x808e <_printf_fn+0x152>
    8062:	ef ef       	ldi	r30, 0xFF	; 255
    8064:	6e 1a       	sub	r6, r30
    8066:	7e 0a       	sbc	r7, r30
    8068:	8e 0a       	sbc	r8, r30
    806a:	6f 96       	adiw	r28, 0x1f	; 31
    806c:	4e ad       	ldd	r20, Y+62	; 0x3e
    806e:	5f ad       	ldd	r21, Y+63	; 0x3f
    8070:	6f 97       	sbiw	r28, 0x1f	; 31
    8072:	24 9f       	mul	r18, r20
    8074:	c0 01       	movw	r24, r0
    8076:	25 9f       	mul	r18, r21
    8078:	90 0d       	add	r25, r0
    807a:	11 24       	eor	r1, r1
    807c:	68 0f       	add	r22, r24
    807e:	79 1f       	adc	r23, r25
    8080:	cb 01       	movw	r24, r22
    8082:	c0 97       	sbiw	r24, 0x30	; 48
    8084:	6f 96       	adiw	r28, 0x1f	; 31
    8086:	9f af       	std	Y+63, r25	; 0x3f
    8088:	8e af       	std	Y+62, r24	; 0x3e
    808a:	6f 97       	sbiw	r28, 0x1f	; 31
    808c:	e1 cf       	rjmp	.-62     	; 0x8050 <_printf_fn+0x114>
    808e:	68 94       	set
    8090:	90 f8       	bld	r9, 0
    8092:	f3 01       	movw	r30, r6
    8094:	58 2d       	mov	r21, r8
    8096:	0e 94 0f e1 	call	0x1c21e	; 0x1c21e <__xload_1>
    809a:	6e 32       	cpi	r22, 0x2E	; 46
    809c:	61 f5       	brne	.+88     	; 0x80f6 <_printf_fn+0x1ba>
    809e:	9f ef       	ldi	r25, 0xFF	; 255
    80a0:	69 1a       	sub	r6, r25
    80a2:	79 0a       	sbc	r7, r25
    80a4:	89 0a       	sbc	r8, r25
    80a6:	a1 96       	adiw	r28, 0x21	; 33
    80a8:	1f ae       	std	Y+63, r1	; 0x3f
    80aa:	1e ae       	std	Y+62, r1	; 0x3e
    80ac:	a1 97       	sbiw	r28, 0x21	; 33
    80ae:	2a e0       	ldi	r18, 0x0A	; 10
    80b0:	f3 01       	movw	r30, r6
    80b2:	58 2d       	mov	r21, r8
    80b4:	0e 94 0f e1 	call	0x1c21e	; 0x1c21e <__xload_1>
    80b8:	70 e0       	ldi	r23, 0x00	; 0
    80ba:	cb 01       	movw	r24, r22
    80bc:	c0 97       	sbiw	r24, 0x30	; 48
    80be:	0a 97       	sbiw	r24, 0x0a	; 10
    80c0:	b8 f4       	brcc	.+46     	; 0x80f0 <_printf_fn+0x1b4>
    80c2:	af ef       	ldi	r26, 0xFF	; 255
    80c4:	6a 1a       	sub	r6, r26
    80c6:	7a 0a       	sbc	r7, r26
    80c8:	8a 0a       	sbc	r8, r26
    80ca:	a1 96       	adiw	r28, 0x21	; 33
    80cc:	ee ad       	ldd	r30, Y+62	; 0x3e
    80ce:	ff ad       	ldd	r31, Y+63	; 0x3f
    80d0:	a1 97       	sbiw	r28, 0x21	; 33
    80d2:	2e 9f       	mul	r18, r30
    80d4:	c0 01       	movw	r24, r0
    80d6:	2f 9f       	mul	r18, r31
    80d8:	90 0d       	add	r25, r0
    80da:	11 24       	eor	r1, r1
    80dc:	68 0f       	add	r22, r24
    80de:	79 1f       	adc	r23, r25
    80e0:	ab 01       	movw	r20, r22
    80e2:	40 53       	subi	r20, 0x30	; 48
    80e4:	51 09       	sbc	r21, r1
    80e6:	a1 96       	adiw	r28, 0x21	; 33
    80e8:	5f af       	std	Y+63, r21	; 0x3f
    80ea:	4e af       	std	Y+62, r20	; 0x3e
    80ec:	a1 97       	sbiw	r28, 0x21	; 33
    80ee:	e0 cf       	rjmp	.-64     	; 0x80b0 <_printf_fn+0x174>
    80f0:	68 94       	set
    80f2:	91 f8       	bld	r9, 1
    80f4:	04 c0       	rjmp	.+8      	; 0x80fe <_printf_fn+0x1c2>
    80f6:	a1 96       	adiw	r28, 0x21	; 33
    80f8:	1f ae       	std	Y+63, r1	; 0x3f
    80fa:	1e ae       	std	Y+62, r1	; 0x3e
    80fc:	a1 97       	sbiw	r28, 0x21	; 33
    80fe:	f3 01       	movw	r30, r6
    8100:	58 2d       	mov	r21, r8
    8102:	0e 94 0f e1 	call	0x1c21e	; 0x1c21e <__xload_1>
    8106:	69 34       	cpi	r22, 0x49	; 73
    8108:	91 f5       	brne	.+100    	; 0x816e <_printf_fn+0x232>
    810a:	5f ef       	ldi	r21, 0xFF	; 255
    810c:	65 1a       	sub	r6, r21
    810e:	75 0a       	sbc	r7, r21
    8110:	85 0a       	sbc	r8, r21
    8112:	41 2c       	mov	r4, r1
    8114:	51 2c       	mov	r5, r1
    8116:	2a e0       	ldi	r18, 0x0A	; 10
    8118:	f3 01       	movw	r30, r6
    811a:	58 2d       	mov	r21, r8
    811c:	0e 94 0f e1 	call	0x1c21e	; 0x1c21e <__xload_1>
    8120:	70 e0       	ldi	r23, 0x00	; 0
    8122:	cb 01       	movw	r24, r22
    8124:	c0 97       	sbiw	r24, 0x30	; 48
    8126:	0a 97       	sbiw	r24, 0x0a	; 10
    8128:	80 f4       	brcc	.+32     	; 0x814a <_printf_fn+0x20e>
    812a:	8f ef       	ldi	r24, 0xFF	; 255
    812c:	68 1a       	sub	r6, r24
    812e:	78 0a       	sbc	r7, r24
    8130:	88 0a       	sbc	r8, r24
    8132:	24 9d       	mul	r18, r4
    8134:	c0 01       	movw	r24, r0
    8136:	25 9d       	mul	r18, r5
    8138:	90 0d       	add	r25, r0
    813a:	11 24       	eor	r1, r1
    813c:	68 0f       	add	r22, r24
    813e:	79 1f       	adc	r23, r25
    8140:	2b 01       	movw	r4, r22
    8142:	90 e3       	ldi	r25, 0x30	; 48
    8144:	49 1a       	sub	r4, r25
    8146:	51 08       	sbc	r5, r1
    8148:	e7 cf       	rjmp	.-50     	; 0x8118 <_printf_fn+0x1dc>
    814a:	41 14       	cp	r4, r1
    814c:	51 04       	cpc	r5, r1
    814e:	09 f4       	brne	.+2      	; 0x8152 <_printf_fn+0x216>
    8150:	40 c0       	rjmp	.+128    	; 0x81d2 <_printf_fn+0x296>
    8152:	c2 01       	movw	r24, r4
    8154:	87 70       	andi	r24, 0x07	; 7
    8156:	99 27       	eor	r25, r25
    8158:	89 2b       	or	r24, r25
    815a:	c9 f5       	brne	.+114    	; 0x81ce <_printf_fn+0x292>
    815c:	63 e0       	ldi	r22, 0x03	; 3
    815e:	55 94       	asr	r5
    8160:	47 94       	ror	r4
    8162:	6a 95       	dec	r22
    8164:	e1 f7       	brne	.-8      	; 0x815e <_printf_fn+0x222>
    8166:	41 14       	cp	r4, r1
    8168:	51 04       	cpc	r5, r1
    816a:	99 f1       	breq	.+102    	; 0x81d2 <_printf_fn+0x296>
    816c:	21 c0       	rjmp	.+66     	; 0x81b0 <_printf_fn+0x274>
    816e:	68 36       	cpi	r22, 0x68	; 104
    8170:	29 f4       	brne	.+10     	; 0x817c <_printf_fn+0x240>
    8172:	af ef       	ldi	r26, 0xFF	; 255
    8174:	6a 1a       	sub	r6, r26
    8176:	7a 0a       	sbc	r7, r26
    8178:	8a 0a       	sbc	r8, r26
    817a:	09 c3       	rjmp	.+1554   	; 0x878e <_printf_fn+0x852>
    817c:	6c 36       	cpi	r22, 0x6C	; 108
    817e:	09 f0       	breq	.+2      	; 0x8182 <_printf_fn+0x246>
    8180:	06 c3       	rjmp	.+1548   	; 0x878e <_printf_fn+0x852>
    8182:	a8 2d       	mov	r26, r8
    8184:	c3 01       	movw	r24, r6
    8186:	01 96       	adiw	r24, 0x01	; 1
    8188:	a1 1d       	adc	r26, r1
    818a:	fc 01       	movw	r30, r24
    818c:	5a 2f       	mov	r21, r26
    818e:	0e 94 0f e1 	call	0x1c21e	; 0x1c21e <__xload_1>
    8192:	6c 36       	cpi	r22, 0x6C	; 108
    8194:	31 f0       	breq	.+12     	; 0x81a2 <_printf_fn+0x266>
    8196:	3c 01       	movw	r6, r24
    8198:	8a 2e       	mov	r8, r26
    819a:	54 e0       	ldi	r21, 0x04	; 4
    819c:	45 2e       	mov	r4, r21
    819e:	51 2c       	mov	r5, r1
    81a0:	07 c0       	rjmp	.+14     	; 0x81b0 <_printf_fn+0x274>
    81a2:	b2 e0       	ldi	r27, 0x02	; 2
    81a4:	6b 0e       	add	r6, r27
    81a6:	71 1c       	adc	r7, r1
    81a8:	81 1c       	adc	r8, r1
    81aa:	48 e0       	ldi	r20, 0x08	; 8
    81ac:	44 2e       	mov	r4, r20
    81ae:	51 2c       	mov	r5, r1
    81b0:	f3 01       	movw	r30, r6
    81b2:	58 2d       	mov	r21, r8
    81b4:	0e 94 0f e1 	call	0x1c21e	; 0x1c21e <__xload_1>
    81b8:	e6 2f       	mov	r30, r22
    81ba:	f0 e0       	ldi	r31, 0x00	; 0
    81bc:	a3 96       	adiw	r28, 0x23	; 35
    81be:	ff af       	std	Y+63, r31	; 0x3f
    81c0:	ee af       	std	Y+62, r30	; 0x3e
    81c2:	a3 97       	sbiw	r28, 0x23	; 35
    81c4:	e4 36       	cpi	r30, 0x64	; 100
    81c6:	f1 05       	cpc	r31, r1
    81c8:	09 f4       	brne	.+2      	; 0x81cc <_printf_fn+0x290>
    81ca:	e5 c2       	rjmp	.+1482   	; 0x8796 <_printf_fn+0x85a>
    81cc:	06 c0       	rjmp	.+12     	; 0x81da <_printf_fn+0x29e>
    81ce:	41 2c       	mov	r4, r1
    81d0:	51 2c       	mov	r5, r1
    81d2:	a3 96       	adiw	r28, 0x23	; 35
    81d4:	1f ae       	std	Y+63, r1	; 0x3f
    81d6:	1e ae       	std	Y+62, r1	; 0x3e
    81d8:	a3 97       	sbiw	r28, 0x23	; 35
    81da:	31 e0       	ldi	r19, 0x01	; 1
    81dc:	20 e0       	ldi	r18, 0x00	; 0
    81de:	a3 96       	adiw	r28, 0x23	; 35
    81e0:	4e ad       	ldd	r20, Y+62	; 0x3e
    81e2:	5f ad       	ldd	r21, Y+63	; 0x3f
    81e4:	a3 97       	sbiw	r28, 0x23	; 35
    81e6:	44 34       	cpi	r20, 0x44	; 68
    81e8:	51 05       	cpc	r21, r1
    81ea:	09 f0       	breq	.+2      	; 0x81ee <_printf_fn+0x2b2>
    81ec:	30 e0       	ldi	r19, 0x00	; 0
    81ee:	83 2f       	mov	r24, r19
    81f0:	92 2f       	mov	r25, r18
    81f2:	a3 96       	adiw	r28, 0x23	; 35
    81f4:	ee ad       	ldd	r30, Y+62	; 0x3e
    81f6:	ff ad       	ldd	r31, Y+63	; 0x3f
    81f8:	a3 97       	sbiw	r28, 0x23	; 35
    81fa:	e2 54       	subi	r30, 0x42	; 66
    81fc:	f1 09       	sbc	r31, r1
    81fe:	e7 33       	cpi	r30, 0x37	; 55
    8200:	f1 05       	cpc	r31, r1
    8202:	08 f0       	brcs	.+2      	; 0x8206 <_printf_fn+0x2ca>
    8204:	57 c1       	rjmp	.+686    	; 0x84b4 <_printf_fn+0x578>
    8206:	ea 5b       	subi	r30, 0xBA	; 186
    8208:	ff 4f       	sbci	r31, 0xFF	; 255
    820a:	0c 94 a9 e0 	jmp	0x1c152	; 0x1c152 <__tablejump2__>
    820e:	32 e0       	ldi	r19, 0x02	; 2
    8210:	43 2e       	mov	r4, r19
    8212:	51 2c       	mov	r5, r1
    8214:	29 2d       	mov	r18, r9
    8216:	28 72       	andi	r18, 0x28	; 40
    8218:	28 32       	cpi	r18, 0x28	; 40
    821a:	11 f4       	brne	.+4      	; 0x8220 <_printf_fn+0x2e4>
    821c:	e8 94       	clt
    821e:	95 f8       	bld	r9, 5
    8220:	29 2d       	mov	r18, r9
    8222:	22 72       	andi	r18, 0x22	; 34
    8224:	22 32       	cpi	r18, 0x22	; 34
    8226:	11 f4       	brne	.+4      	; 0x822c <_printf_fn+0x2f0>
    8228:	e8 94       	clt
    822a:	95 f8       	bld	r9, 5
    822c:	29 2d       	mov	r18, r9
    822e:	21 72       	andi	r18, 0x21	; 33
    8230:	21 32       	cpi	r18, 0x21	; 33
    8232:	79 f4       	brne	.+30     	; 0x8252 <_printf_fn+0x316>
    8234:	a1 96       	adiw	r28, 0x21	; 33
    8236:	ae ad       	ldd	r26, Y+62	; 0x3e
    8238:	bf ad       	ldd	r27, Y+63	; 0x3f
    823a:	a1 97       	sbiw	r28, 0x21	; 33
    823c:	6f 96       	adiw	r28, 0x1f	; 31
    823e:	ee ad       	ldd	r30, Y+62	; 0x3e
    8240:	ff ad       	ldd	r31, Y+63	; 0x3f
    8242:	6f 97       	sbiw	r28, 0x1f	; 31
    8244:	ae 17       	cp	r26, r30
    8246:	bf 07       	cpc	r27, r31
    8248:	24 f4       	brge	.+8      	; 0x8252 <_printf_fn+0x316>
    824a:	a1 96       	adiw	r28, 0x21	; 33
    824c:	ff af       	std	Y+63, r31	; 0x3f
    824e:	ee af       	std	Y+62, r30	; 0x3e
    8250:	a1 97       	sbiw	r28, 0x21	; 33
    8252:	29 2d       	mov	r18, r9
    8254:	23 72       	andi	r18, 0x23	; 35
    8256:	23 32       	cpi	r18, 0x23	; 35
    8258:	79 f4       	brne	.+30     	; 0x8278 <_printf_fn+0x33c>
    825a:	a1 96       	adiw	r28, 0x21	; 33
    825c:	2e ad       	ldd	r18, Y+62	; 0x3e
    825e:	3f ad       	ldd	r19, Y+63	; 0x3f
    8260:	a1 97       	sbiw	r28, 0x21	; 33
    8262:	6f 96       	adiw	r28, 0x1f	; 31
    8264:	4e ad       	ldd	r20, Y+62	; 0x3e
    8266:	5f ad       	ldd	r21, Y+63	; 0x3f
    8268:	6f 97       	sbiw	r28, 0x1f	; 31
    826a:	24 17       	cp	r18, r20
    826c:	35 07       	cpc	r19, r21
    826e:	24 f4       	brge	.+8      	; 0x8278 <_printf_fn+0x33c>
    8270:	a1 96       	adiw	r28, 0x21	; 33
    8272:	5f af       	std	Y+63, r21	; 0x3f
    8274:	4e af       	std	Y+62, r20	; 0x3e
    8276:	a1 97       	sbiw	r28, 0x21	; 33
    8278:	e8 94       	clt
    827a:	94 f8       	bld	r9, 4
    827c:	e8 94       	clt
    827e:	92 f8       	bld	r9, 2
    8280:	e8 94       	clt
    8282:	96 f8       	bld	r9, 6
    8284:	52 e0       	ldi	r21, 0x02	; 2
    8286:	45 16       	cp	r4, r21
    8288:	51 04       	cpc	r5, r1
    828a:	f9 f4       	brne	.+62     	; 0x82ca <_printf_fn+0x38e>
    828c:	51 01       	movw	r10, r2
    828e:	82 e0       	ldi	r24, 0x02	; 2
    8290:	a8 0e       	add	r10, r24
    8292:	b1 1c       	adc	r11, r1
    8294:	d1 01       	movw	r26, r2
    8296:	8d 91       	ld	r24, X+
    8298:	9c 91       	ld	r25, X
    829a:	65 96       	adiw	r28, 0x15	; 21
    829c:	9f af       	std	Y+63, r25	; 0x3f
    829e:	8e af       	std	Y+62, r24	; 0x3e
    82a0:	65 97       	sbiw	r28, 0x15	; 21
    82a2:	a3 96       	adiw	r28, 0x23	; 35
    82a4:	ee ad       	ldd	r30, Y+62	; 0x3e
    82a6:	ff ad       	ldd	r31, Y+63	; 0x3f
    82a8:	a3 97       	sbiw	r28, 0x23	; 35
    82aa:	e4 34       	cpi	r30, 0x44	; 68
    82ac:	f1 05       	cpc	r31, r1
    82ae:	09 f0       	breq	.+2      	; 0x82b2 <_printf_fn+0x376>
    82b0:	ac c0       	rjmp	.+344    	; 0x840a <_printf_fn+0x4ce>
    82b2:	97 ff       	sbrs	r25, 7
    82b4:	a7 c0       	rjmp	.+334    	; 0x8404 <_printf_fn+0x4c8>
    82b6:	68 94       	set
    82b8:	96 f8       	bld	r9, 6
    82ba:	91 95       	neg	r25
    82bc:	81 95       	neg	r24
    82be:	91 09       	sbc	r25, r1
    82c0:	65 96       	adiw	r28, 0x15	; 21
    82c2:	9f af       	std	Y+63, r25	; 0x3f
    82c4:	8e af       	std	Y+62, r24	; 0x3e
    82c6:	65 97       	sbiw	r28, 0x15	; 21
    82c8:	9d c0       	rjmp	.+314    	; 0x8404 <_printf_fn+0x4c8>
    82ca:	f4 e0       	ldi	r31, 0x04	; 4
    82cc:	4f 16       	cp	r4, r31
    82ce:	51 04       	cpc	r5, r1
    82d0:	59 f5       	brne	.+86     	; 0x8328 <_printf_fn+0x3ec>
    82d2:	51 01       	movw	r10, r2
    82d4:	24 e0       	ldi	r18, 0x04	; 4
    82d6:	a2 0e       	add	r10, r18
    82d8:	b1 1c       	adc	r11, r1
    82da:	f1 01       	movw	r30, r2
    82dc:	80 81       	ld	r24, Z
    82de:	91 81       	ldd	r25, Z+1	; 0x01
    82e0:	a2 81       	ldd	r26, Z+2	; 0x02
    82e2:	b3 81       	ldd	r27, Z+3	; 0x03
    82e4:	2f 96       	adiw	r28, 0x0f	; 15
    82e6:	8c af       	std	Y+60, r24	; 0x3c
    82e8:	9d af       	std	Y+61, r25	; 0x3d
    82ea:	ae af       	std	Y+62, r26	; 0x3e
    82ec:	bf af       	std	Y+63, r27	; 0x3f
    82ee:	2f 97       	sbiw	r28, 0x0f	; 15
    82f0:	a3 96       	adiw	r28, 0x23	; 35
    82f2:	2e ad       	ldd	r18, Y+62	; 0x3e
    82f4:	3f ad       	ldd	r19, Y+63	; 0x3f
    82f6:	a3 97       	sbiw	r28, 0x23	; 35
    82f8:	24 34       	cpi	r18, 0x44	; 68
    82fa:	31 05       	cpc	r19, r1
    82fc:	09 f0       	breq	.+2      	; 0x8300 <_printf_fn+0x3c4>
    82fe:	8f c0       	rjmp	.+286    	; 0x841e <_printf_fn+0x4e2>
    8300:	b7 ff       	sbrs	r27, 7
    8302:	8a c0       	rjmp	.+276    	; 0x8418 <_printf_fn+0x4dc>
    8304:	68 94       	set
    8306:	96 f8       	bld	r9, 6
    8308:	b0 95       	com	r27
    830a:	a0 95       	com	r26
    830c:	90 95       	com	r25
    830e:	81 95       	neg	r24
    8310:	9f 4f       	sbci	r25, 0xFF	; 255
    8312:	af 4f       	sbci	r26, 0xFF	; 255
    8314:	bf 4f       	sbci	r27, 0xFF	; 255
    8316:	2f 96       	adiw	r28, 0x0f	; 15
    8318:	8c af       	std	Y+60, r24	; 0x3c
    831a:	9d af       	std	Y+61, r25	; 0x3d
    831c:	ae af       	std	Y+62, r26	; 0x3e
    831e:	bf af       	std	Y+63, r27	; 0x3f
    8320:	2f 97       	sbiw	r28, 0x0f	; 15
    8322:	7a c0       	rjmp	.+244    	; 0x8418 <_printf_fn+0x4dc>
    8324:	81 e0       	ldi	r24, 0x01	; 1
    8326:	90 e0       	ldi	r25, 0x00	; 0
    8328:	51 01       	movw	r10, r2
    832a:	38 e0       	ldi	r19, 0x08	; 8
    832c:	43 16       	cp	r4, r19
    832e:	51 04       	cpc	r5, r1
    8330:	09 f0       	breq	.+2      	; 0x8334 <_printf_fn+0x3f8>
    8332:	7c c0       	rjmp	.+248    	; 0x842c <_printf_fn+0x4f0>
    8334:	48 e0       	ldi	r20, 0x08	; 8
    8336:	a4 0e       	add	r10, r20
    8338:	b1 1c       	adc	r11, r1
    833a:	d1 01       	movw	r26, r2
    833c:	fc 90       	ld	r15, X
    833e:	f1 01       	movw	r30, r2
    8340:	01 81       	ldd	r16, Z+1	; 0x01
    8342:	12 81       	ldd	r17, Z+2	; 0x02
    8344:	f3 81       	ldd	r31, Z+3	; 0x03
    8346:	aa 96       	adiw	r28, 0x2a	; 42
    8348:	ff af       	std	Y+63, r31	; 0x3f
    834a:	aa 97       	sbiw	r28, 0x2a	; 42
    834c:	f1 01       	movw	r30, r2
    834e:	f4 81       	ldd	r31, Z+4	; 0x04
    8350:	ab 96       	adiw	r28, 0x2b	; 43
    8352:	ff af       	std	Y+63, r31	; 0x3f
    8354:	ab 97       	sbiw	r28, 0x2b	; 43
    8356:	f1 01       	movw	r30, r2
    8358:	b5 81       	ldd	r27, Z+5	; 0x05
    835a:	f6 81       	ldd	r31, Z+6	; 0x06
    835c:	af 96       	adiw	r28, 0x2f	; 47
    835e:	ff af       	std	Y+63, r31	; 0x3f
    8360:	af 97       	sbiw	r28, 0x2f	; 47
    8362:	f1 01       	movw	r30, r2
    8364:	37 80       	ldd	r3, Z+7	; 0x07
    8366:	24 96       	adiw	r28, 0x04	; 4
    8368:	ff ae       	std	Y+63, r15	; 0x3f
    836a:	24 97       	sbiw	r28, 0x04	; 4
    836c:	25 96       	adiw	r28, 0x05	; 5
    836e:	0f af       	std	Y+63, r16	; 0x3f
    8370:	25 97       	sbiw	r28, 0x05	; 5
    8372:	26 96       	adiw	r28, 0x06	; 6
    8374:	1f af       	std	Y+63, r17	; 0x3f
    8376:	26 97       	sbiw	r28, 0x06	; 6
    8378:	aa 96       	adiw	r28, 0x2a	; 42
    837a:	ff ad       	ldd	r31, Y+63	; 0x3f
    837c:	aa 97       	sbiw	r28, 0x2a	; 42
    837e:	27 96       	adiw	r28, 0x07	; 7
    8380:	ff af       	std	Y+63, r31	; 0x3f
    8382:	27 97       	sbiw	r28, 0x07	; 7
    8384:	ab 96       	adiw	r28, 0x2b	; 43
    8386:	ef ad       	ldd	r30, Y+63	; 0x3f
    8388:	ab 97       	sbiw	r28, 0x2b	; 43
    838a:	28 96       	adiw	r28, 0x08	; 8
    838c:	ef af       	std	Y+63, r30	; 0x3f
    838e:	28 97       	sbiw	r28, 0x08	; 8
    8390:	29 96       	adiw	r28, 0x09	; 9
    8392:	bf af       	std	Y+63, r27	; 0x3f
    8394:	29 97       	sbiw	r28, 0x09	; 9
    8396:	af 96       	adiw	r28, 0x2f	; 47
    8398:	ff ad       	ldd	r31, Y+63	; 0x3f
    839a:	af 97       	sbiw	r28, 0x2f	; 47
    839c:	2a 96       	adiw	r28, 0x0a	; 10
    839e:	ff af       	std	Y+63, r31	; 0x3f
    83a0:	2a 97       	sbiw	r28, 0x0a	; 10
    83a2:	2b 96       	adiw	r28, 0x0b	; 11
    83a4:	3f ae       	std	Y+63, r3	; 0x3f
    83a6:	2b 97       	sbiw	r28, 0x0b	; 11
    83a8:	89 2b       	or	r24, r25
    83aa:	09 f4       	brne	.+2      	; 0x83ae <_printf_fn+0x472>
    83ac:	4a c0       	rjmp	.+148    	; 0x8442 <_printf_fn+0x506>
    83ae:	2f 2d       	mov	r18, r15
    83b0:	30 2f       	mov	r19, r16
    83b2:	41 2f       	mov	r20, r17
    83b4:	aa 96       	adiw	r28, 0x2a	; 42
    83b6:	5f ad       	ldd	r21, Y+63	; 0x3f
    83b8:	aa 97       	sbiw	r28, 0x2a	; 42
    83ba:	6e 2f       	mov	r22, r30
    83bc:	7b 2f       	mov	r23, r27
    83be:	8f 2f       	mov	r24, r31
    83c0:	93 2d       	mov	r25, r3
    83c2:	a0 e0       	ldi	r26, 0x00	; 0
    83c4:	0e 94 16 e1 	call	0x1c22c	; 0x1c22c <__cmpdi2_s8>
    83c8:	e4 f5       	brge	.+120    	; 0x8442 <_printf_fn+0x506>
    83ca:	68 94       	set
    83cc:	96 f8       	bld	r9, 6
    83ce:	0e 94 c8 e0 	call	0x1c190	; 0x1c190 <__negdi2>
    83d2:	24 96       	adiw	r28, 0x04	; 4
    83d4:	2f af       	std	Y+63, r18	; 0x3f
    83d6:	24 97       	sbiw	r28, 0x04	; 4
    83d8:	25 96       	adiw	r28, 0x05	; 5
    83da:	3f af       	std	Y+63, r19	; 0x3f
    83dc:	25 97       	sbiw	r28, 0x05	; 5
    83de:	26 96       	adiw	r28, 0x06	; 6
    83e0:	4f af       	std	Y+63, r20	; 0x3f
    83e2:	26 97       	sbiw	r28, 0x06	; 6
    83e4:	27 96       	adiw	r28, 0x07	; 7
    83e6:	5f af       	std	Y+63, r21	; 0x3f
    83e8:	27 97       	sbiw	r28, 0x07	; 7
    83ea:	28 96       	adiw	r28, 0x08	; 8
    83ec:	6f af       	std	Y+63, r22	; 0x3f
    83ee:	28 97       	sbiw	r28, 0x08	; 8
    83f0:	29 96       	adiw	r28, 0x09	; 9
    83f2:	7f af       	std	Y+63, r23	; 0x3f
    83f4:	29 97       	sbiw	r28, 0x09	; 9
    83f6:	2a 96       	adiw	r28, 0x0a	; 10
    83f8:	8f af       	std	Y+63, r24	; 0x3f
    83fa:	2a 97       	sbiw	r28, 0x0a	; 10
    83fc:	2b 96       	adiw	r28, 0x0b	; 11
    83fe:	9f af       	std	Y+63, r25	; 0x3f
    8400:	2b 97       	sbiw	r28, 0x0b	; 11
    8402:	1f c0       	rjmp	.+62     	; 0x8442 <_printf_fn+0x506>
    8404:	22 e0       	ldi	r18, 0x02	; 2
    8406:	42 2e       	mov	r4, r18
    8408:	51 2c       	mov	r5, r1
    840a:	6c 96       	adiw	r28, 0x1c	; 28
    840c:	8f ad       	ldd	r24, Y+63	; 0x3f
    840e:	6c 97       	sbiw	r28, 0x1c	; 28
    8410:	6d 96       	adiw	r28, 0x1d	; 29
    8412:	9f ad       	ldd	r25, Y+63	; 0x3f
    8414:	6d 97       	sbiw	r28, 0x1d	; 29
    8416:	1b c0       	rjmp	.+54     	; 0x844e <_printf_fn+0x512>
    8418:	94 e0       	ldi	r25, 0x04	; 4
    841a:	49 2e       	mov	r4, r25
    841c:	51 2c       	mov	r5, r1
    841e:	6a 96       	adiw	r28, 0x1a	; 26
    8420:	8f ad       	ldd	r24, Y+63	; 0x3f
    8422:	6a 97       	sbiw	r28, 0x1a	; 26
    8424:	6b 96       	adiw	r28, 0x1b	; 27
    8426:	9f ad       	ldd	r25, Y+63	; 0x3f
    8428:	6b 97       	sbiw	r28, 0x1b	; 27
    842a:	11 c0       	rjmp	.+34     	; 0x844e <_printf_fn+0x512>
    842c:	66 96       	adiw	r28, 0x16	; 22
    842e:	8f ad       	ldd	r24, Y+63	; 0x3f
    8430:	66 97       	sbiw	r28, 0x16	; 22
    8432:	67 96       	adiw	r28, 0x17	; 23
    8434:	9f ad       	ldd	r25, Y+63	; 0x3f
    8436:	67 97       	sbiw	r28, 0x17	; 23
    8438:	a3 96       	adiw	r28, 0x23	; 35
    843a:	1f ae       	std	Y+63, r1	; 0x3f
    843c:	1e ae       	std	Y+62, r1	; 0x3e
    843e:	a3 97       	sbiw	r28, 0x23	; 35
    8440:	06 c0       	rjmp	.+12     	; 0x844e <_printf_fn+0x512>
    8442:	68 96       	adiw	r28, 0x18	; 24
    8444:	8f ad       	ldd	r24, Y+63	; 0x3f
    8446:	68 97       	sbiw	r28, 0x18	; 24
    8448:	69 96       	adiw	r28, 0x19	; 25
    844a:	9f ad       	ldd	r25, Y+63	; 0x3f
    844c:	69 97       	sbiw	r28, 0x19	; 25
    844e:	2f ef       	ldi	r18, 0xFF	; 255
    8450:	62 1a       	sub	r6, r18
    8452:	72 0a       	sbc	r7, r18
    8454:	82 0a       	sbc	r8, r18
    8456:	15 01       	movw	r2, r10
    8458:	33 c0       	rjmp	.+102    	; 0x84c0 <_printf_fn+0x584>
    845a:	91 fc       	sbrc	r9, 1
    845c:	08 c0       	rjmp	.+16     	; 0x846e <_printf_fn+0x532>
    845e:	68 94       	set
    8460:	91 f8       	bld	r9, 1
    8462:	46 e0       	ldi	r20, 0x06	; 6
    8464:	50 e0       	ldi	r21, 0x00	; 0
    8466:	a1 96       	adiw	r28, 0x21	; 33
    8468:	5f af       	std	Y+63, r21	; 0x3f
    846a:	4e af       	std	Y+62, r20	; 0x3e
    846c:	a1 97       	sbiw	r28, 0x21	; 33
    846e:	d1 01       	movw	r26, r2
    8470:	8d 91       	ld	r24, X+
    8472:	9d 91       	ld	r25, X+
    8474:	0d 90       	ld	r0, X+
    8476:	bc 91       	ld	r27, X
    8478:	a0 2d       	mov	r26, r0
    847a:	a9 96       	adiw	r28, 0x29	; 41
    847c:	8c af       	std	Y+60, r24	; 0x3c
    847e:	9d af       	std	Y+61, r25	; 0x3d
    8480:	ae af       	std	Y+62, r26	; 0x3e
    8482:	bf af       	std	Y+63, r27	; 0x3f
    8484:	a9 97       	sbiw	r28, 0x29	; 41
    8486:	bf ef       	ldi	r27, 0xFF	; 255
    8488:	6b 1a       	sub	r6, r27
    848a:	7b 0a       	sbc	r7, r27
    848c:	8b 0a       	sbc	r8, r27
    848e:	f1 01       	movw	r30, r2
    8490:	34 96       	adiw	r30, 0x04	; 4
    8492:	1f 01       	movw	r2, r30
    8494:	0f c0       	rjmp	.+30     	; 0x84b4 <_printf_fn+0x578>
    8496:	ff ef       	ldi	r31, 0xFF	; 255
    8498:	6f 1a       	sub	r6, r31
    849a:	7f 0a       	sbc	r7, r31
    849c:	8f 0a       	sbc	r8, r31
    849e:	c5 c0       	rjmp	.+394    	; 0x862a <_printf_fn+0x6ee>
    84a0:	2f ef       	ldi	r18, 0xFF	; 255
    84a2:	62 1a       	sub	r6, r18
    84a4:	72 0a       	sbc	r7, r18
    84a6:	82 0a       	sbc	r8, r18
    84a8:	11 c1       	rjmp	.+546    	; 0x86cc <_printf_fn+0x790>
    84aa:	3f ef       	ldi	r19, 0xFF	; 255
    84ac:	63 1a       	sub	r6, r19
    84ae:	73 0a       	sbc	r7, r19
    84b0:	83 0a       	sbc	r8, r19
    84b2:	c8 c0       	rjmp	.+400    	; 0x8644 <_printf_fn+0x708>
    84b4:	66 96       	adiw	r28, 0x16	; 22
    84b6:	8f ad       	ldd	r24, Y+63	; 0x3f
    84b8:	66 97       	sbiw	r28, 0x16	; 22
    84ba:	67 96       	adiw	r28, 0x17	; 23
    84bc:	9f ad       	ldd	r25, Y+63	; 0x3f
    84be:	67 97       	sbiw	r28, 0x17	; 23
    84c0:	a3 96       	adiw	r28, 0x23	; 35
    84c2:	ee ad       	ldd	r30, Y+62	; 0x3e
    84c4:	ff ad       	ldd	r31, Y+63	; 0x3f
    84c6:	a3 97       	sbiw	r28, 0x23	; 35
    84c8:	e2 54       	subi	r30, 0x42	; 66
    84ca:	f1 09       	sbc	r31, r1
    84cc:	e7 33       	cpi	r30, 0x37	; 55
    84ce:	f1 05       	cpc	r31, r1
    84d0:	08 f0       	brcs	.+2      	; 0x84d4 <_printf_fn+0x598>
    84d2:	56 c1       	rjmp	.+684    	; 0x8780 <_printf_fn+0x844>
    84d4:	e3 58       	subi	r30, 0x83	; 131
    84d6:	ff 4f       	sbci	r31, 0xFF	; 255
    84d8:	0c 94 a9 e0 	jmp	0x1c152	; 0x1c152 <__tablejump2__>
    84dc:	e8 94       	clt
    84de:	94 f8       	bld	r9, 4
    84e0:	e8 94       	clt
    84e2:	92 f8       	bld	r9, 2
    84e4:	a9 2c       	mov	r10, r9
    84e6:	b1 2c       	mov	r11, r1
    84e8:	a1 96       	adiw	r28, 0x21	; 33
    84ea:	ce ac       	ldd	r12, Y+62	; 0x3e
    84ec:	df ac       	ldd	r13, Y+63	; 0x3f
    84ee:	a1 97       	sbiw	r28, 0x21	; 33
    84f0:	6f 96       	adiw	r28, 0x1f	; 31
    84f2:	ee ac       	ldd	r14, Y+62	; 0x3e
    84f4:	ff ac       	ldd	r15, Y+63	; 0x3f
    84f6:	6f 97       	sbiw	r28, 0x1f	; 31
    84f8:	0a e0       	ldi	r16, 0x0A	; 10
    84fa:	10 e0       	ldi	r17, 0x00	; 0
    84fc:	19 c0       	rjmp	.+50     	; 0x8530 <_printf_fn+0x5f4>
    84fe:	a9 2c       	mov	r10, r9
    8500:	b1 2c       	mov	r11, r1
    8502:	a1 96       	adiw	r28, 0x21	; 33
    8504:	ce ac       	ldd	r12, Y+62	; 0x3e
    8506:	df ac       	ldd	r13, Y+63	; 0x3f
    8508:	a1 97       	sbiw	r28, 0x21	; 33
    850a:	6f 96       	adiw	r28, 0x1f	; 31
    850c:	ee ac       	ldd	r14, Y+62	; 0x3e
    850e:	ff ac       	ldd	r15, Y+63	; 0x3f
    8510:	6f 97       	sbiw	r28, 0x1f	; 31
    8512:	02 e0       	ldi	r16, 0x02	; 2
    8514:	10 e0       	ldi	r17, 0x00	; 0
    8516:	0c c0       	rjmp	.+24     	; 0x8530 <_printf_fn+0x5f4>
    8518:	a9 2c       	mov	r10, r9
    851a:	b1 2c       	mov	r11, r1
    851c:	a1 96       	adiw	r28, 0x21	; 33
    851e:	ce ac       	ldd	r12, Y+62	; 0x3e
    8520:	df ac       	ldd	r13, Y+63	; 0x3f
    8522:	a1 97       	sbiw	r28, 0x21	; 33
    8524:	6f 96       	adiw	r28, 0x1f	; 31
    8526:	ee ac       	ldd	r14, Y+62	; 0x3e
    8528:	ff ac       	ldd	r15, Y+63	; 0x3f
    852a:	6f 97       	sbiw	r28, 0x1f	; 31
    852c:	08 e0       	ldi	r16, 0x08	; 8
    852e:	10 e0       	ldi	r17, 0x00	; 0
    8530:	22 e4       	ldi	r18, 0x42	; 66
    8532:	30 e0       	ldi	r19, 0x00	; 0
    8534:	ae 01       	movw	r20, r28
    8536:	4f 5f       	subi	r20, 0xFF	; 255
    8538:	5f 4f       	sbci	r21, 0xFF	; 255
    853a:	b2 01       	movw	r22, r4
    853c:	7d d9       	rcall	.-3334   	; 0x7838 <p_ntoa>
    853e:	34 c0       	rjmp	.+104    	; 0x85a8 <_printf_fn+0x66c>
    8540:	a9 2c       	mov	r10, r9
    8542:	b1 2c       	mov	r11, r1
    8544:	a1 96       	adiw	r28, 0x21	; 33
    8546:	ce ac       	ldd	r12, Y+62	; 0x3e
    8548:	df ac       	ldd	r13, Y+63	; 0x3f
    854a:	a1 97       	sbiw	r28, 0x21	; 33
    854c:	6f 96       	adiw	r28, 0x1f	; 31
    854e:	ee ac       	ldd	r14, Y+62	; 0x3e
    8550:	ff ac       	ldd	r15, Y+63	; 0x3f
    8552:	6f 97       	sbiw	r28, 0x1f	; 31
    8554:	00 e1       	ldi	r16, 0x10	; 16
    8556:	10 e0       	ldi	r17, 0x00	; 0
    8558:	22 e4       	ldi	r18, 0x42	; 66
    855a:	30 e0       	ldi	r19, 0x00	; 0
    855c:	ae 01       	movw	r20, r28
    855e:	4f 5f       	subi	r20, 0xFF	; 255
    8560:	5f 4f       	sbci	r21, 0xFF	; 255
    8562:	b2 01       	movw	r22, r4
    8564:	69 d9       	rcall	.-3374   	; 0x7838 <p_ntoa>
    8566:	6c 01       	movw	r12, r24
    8568:	a3 96       	adiw	r28, 0x23	; 35
    856a:	6e ad       	ldd	r22, Y+62	; 0x3e
    856c:	7f ad       	ldd	r23, Y+63	; 0x3f
    856e:	a3 97       	sbiw	r28, 0x23	; 35
    8570:	67 7f       	andi	r22, 0xF7	; 247
    8572:	60 35       	cpi	r22, 0x50	; 80
    8574:	71 05       	cpc	r23, r1
    8576:	09 f0       	breq	.+2      	; 0x857a <_printf_fn+0x63e>
    8578:	3f c0       	rjmp	.+126    	; 0x85f8 <_printf_fn+0x6bc>
    857a:	3a c0       	rjmp	.+116    	; 0x85f0 <_printf_fn+0x6b4>
    857c:	c9 2c       	mov	r12, r9
    857e:	d1 2c       	mov	r13, r1
    8580:	a1 96       	adiw	r28, 0x21	; 33
    8582:	ee ac       	ldd	r14, Y+62	; 0x3e
    8584:	ff ac       	ldd	r15, Y+63	; 0x3f
    8586:	a1 97       	sbiw	r28, 0x21	; 33
    8588:	6f 96       	adiw	r28, 0x1f	; 31
    858a:	0e ad       	ldd	r16, Y+62	; 0x3e
    858c:	1f ad       	ldd	r17, Y+63	; 0x3f
    858e:	6f 97       	sbiw	r28, 0x1f	; 31
    8590:	22 e4       	ldi	r18, 0x42	; 66
    8592:	30 e0       	ldi	r19, 0x00	; 0
    8594:	ae 01       	movw	r20, r28
    8596:	4f 5f       	subi	r20, 0xFF	; 255
    8598:	5f 4f       	sbci	r21, 0xFF	; 255
    859a:	a9 96       	adiw	r28, 0x29	; 41
    859c:	6c ad       	ldd	r22, Y+60	; 0x3c
    859e:	7d ad       	ldd	r23, Y+61	; 0x3d
    85a0:	8e ad       	ldd	r24, Y+62	; 0x3e
    85a2:	9f ad       	ldd	r25, Y+63	; 0x3f
    85a4:	a9 97       	sbiw	r28, 0x29	; 41
    85a6:	9d d9       	rcall	.-3270   	; 0x78e2 <p_ftoa>
    85a8:	93 fa       	bst	r9, 3
    85aa:	00 27       	eor	r16, r16
    85ac:	00 f9       	bld	r16, 0
    85ae:	10 e0       	ldi	r17, 0x00	; 0
    85b0:	9c 01       	movw	r18, r24
    85b2:	27 c0       	rjmp	.+78     	; 0x8602 <_printf_fn+0x6c6>
    85b4:	c9 2c       	mov	r12, r9
    85b6:	d1 2c       	mov	r13, r1
    85b8:	a1 96       	adiw	r28, 0x21	; 33
    85ba:	ee ac       	ldd	r14, Y+62	; 0x3e
    85bc:	ff ac       	ldd	r15, Y+63	; 0x3f
    85be:	a1 97       	sbiw	r28, 0x21	; 33
    85c0:	6f 96       	adiw	r28, 0x1f	; 31
    85c2:	0e ad       	ldd	r16, Y+62	; 0x3e
    85c4:	1f ad       	ldd	r17, Y+63	; 0x3f
    85c6:	6f 97       	sbiw	r28, 0x1f	; 31
    85c8:	22 e4       	ldi	r18, 0x42	; 66
    85ca:	30 e0       	ldi	r19, 0x00	; 0
    85cc:	ae 01       	movw	r20, r28
    85ce:	4f 5f       	subi	r20, 0xFF	; 255
    85d0:	5f 4f       	sbci	r21, 0xFF	; 255
    85d2:	a9 96       	adiw	r28, 0x29	; 41
    85d4:	6c ad       	ldd	r22, Y+60	; 0x3c
    85d6:	7d ad       	ldd	r23, Y+61	; 0x3d
    85d8:	8e ad       	ldd	r24, Y+62	; 0x3e
    85da:	9f ad       	ldd	r25, Y+63	; 0x3f
    85dc:	a9 97       	sbiw	r28, 0x29	; 41
    85de:	88 da       	rcall	.-2800   	; 0x7af0 <p_etoa>
    85e0:	6c 01       	movw	r12, r24
    85e2:	a3 96       	adiw	r28, 0x23	; 35
    85e4:	4e ad       	ldd	r20, Y+62	; 0x3e
    85e6:	5f ad       	ldd	r21, Y+63	; 0x3f
    85e8:	a3 97       	sbiw	r28, 0x23	; 35
    85ea:	45 34       	cpi	r20, 0x45	; 69
    85ec:	51 05       	cpc	r21, r1
    85ee:	21 f4       	brne	.+8      	; 0x85f8 <_printf_fn+0x6bc>
    85f0:	ce 01       	movw	r24, r28
    85f2:	01 96       	adiw	r24, 0x01	; 1
    85f4:	0e 94 d1 2e 	call	0x5da2	; 0x5da2 <strupper>
    85f8:	93 fa       	bst	r9, 3
    85fa:	00 27       	eor	r16, r16
    85fc:	00 f9       	bld	r16, 0
    85fe:	10 e0       	ldi	r17, 0x00	; 0
    8600:	96 01       	movw	r18, r12
    8602:	6f 96       	adiw	r28, 0x1f	; 31
    8604:	4e ad       	ldd	r20, Y+62	; 0x3e
    8606:	5f ad       	ldd	r21, Y+63	; 0x3f
    8608:	6f 97       	sbiw	r28, 0x1f	; 31
    860a:	be 01       	movw	r22, r28
    860c:	6f 5f       	subi	r22, 0xFF	; 255
    860e:	7f 4f       	sbci	r23, 0xFF	; 255
    8610:	a5 96       	adiw	r28, 0x25	; 37
    8612:	8e ad       	ldd	r24, Y+62	; 0x3e
    8614:	9f ad       	ldd	r25, Y+63	; 0x3f
    8616:	a5 97       	sbiw	r28, 0x25	; 37
    8618:	d7 db       	rcall	.-2130   	; 0x7dc8 <_puts_pad>
    861a:	b6 c0       	rjmp	.+364    	; 0x8788 <_printf_fn+0x84c>
    861c:	a3 96       	adiw	r28, 0x23	; 35
    861e:	8e ad       	ldd	r24, Y+62	; 0x3e
    8620:	9f ad       	ldd	r25, Y+63	; 0x3f
    8622:	a3 97       	sbiw	r28, 0x23	; 35
    8624:	83 37       	cpi	r24, 0x73	; 115
    8626:	91 05       	cpc	r25, r1
    8628:	69 f4       	brne	.+26     	; 0x8644 <_printf_fn+0x708>
    862a:	61 01       	movw	r12, r2
    862c:	92 e0       	ldi	r25, 0x02	; 2
    862e:	c9 0e       	add	r12, r25
    8630:	d1 1c       	adc	r13, r1
    8632:	d1 01       	movw	r26, r2
    8634:	6d 91       	ld	r22, X+
    8636:	7c 91       	ld	r23, X
    8638:	61 15       	cp	r22, r1
    863a:	71 05       	cpc	r23, r1
    863c:	91 f4       	brne	.+36     	; 0x8662 <_printf_fn+0x726>
    863e:	6a e1       	ldi	r22, 0x1A	; 26
    8640:	74 e0       	ldi	r23, 0x04	; 4
    8642:	0f c0       	rjmp	.+30     	; 0x8662 <_printf_fn+0x726>
    8644:	61 01       	movw	r12, r2
    8646:	b2 e0       	ldi	r27, 0x02	; 2
    8648:	cb 0e       	add	r12, r27
    864a:	d1 1c       	adc	r13, r1
    864c:	f1 01       	movw	r30, r2
    864e:	80 81       	ld	r24, Z
    8650:	60 96       	adiw	r28, 0x10	; 16
    8652:	8f af       	std	Y+63, r24	; 0x3f
    8654:	60 97       	sbiw	r28, 0x10	; 16
    8656:	61 96       	adiw	r28, 0x11	; 17
    8658:	1f ae       	std	Y+63, r1	; 0x3f
    865a:	61 97       	sbiw	r28, 0x11	; 17
    865c:	be 01       	movw	r22, r28
    865e:	61 5b       	subi	r22, 0xB1	; 177
    8660:	7f 4f       	sbci	r23, 0xFF	; 255
    8662:	fb 01       	movw	r30, r22
    8664:	01 90       	ld	r0, Z+
    8666:	00 20       	and	r0, r0
    8668:	e9 f7       	brne	.-6      	; 0x8664 <_printf_fn+0x728>
    866a:	31 97       	sbiw	r30, 0x01	; 1
    866c:	e6 1b       	sub	r30, r22
    866e:	f7 0b       	sbc	r31, r23
    8670:	a1 96       	adiw	r28, 0x21	; 33
    8672:	2e ad       	ldd	r18, Y+62	; 0x3e
    8674:	3f ad       	ldd	r19, Y+63	; 0x3f
    8676:	a1 97       	sbiw	r28, 0x21	; 33
    8678:	23 2b       	or	r18, r19
    867a:	21 f4       	brne	.+8      	; 0x8684 <_printf_fn+0x748>
    867c:	a1 96       	adiw	r28, 0x21	; 33
    867e:	ff af       	std	Y+63, r31	; 0x3f
    8680:	ee af       	std	Y+62, r30	; 0x3e
    8682:	a1 97       	sbiw	r28, 0x21	; 33
    8684:	6f 96       	adiw	r28, 0x1f	; 31
    8686:	4e ad       	ldd	r20, Y+62	; 0x3e
    8688:	5f ad       	ldd	r21, Y+63	; 0x3f
    868a:	6f 97       	sbiw	r28, 0x1f	; 31
    868c:	a1 96       	adiw	r28, 0x21	; 33
    868e:	8e ad       	ldd	r24, Y+62	; 0x3e
    8690:	9f ad       	ldd	r25, Y+63	; 0x3f
    8692:	a1 97       	sbiw	r28, 0x21	; 33
    8694:	48 17       	cp	r20, r24
    8696:	59 07       	cpc	r21, r25
    8698:	3c f4       	brge	.+14     	; 0x86a8 <_printf_fn+0x76c>
    869a:	41 15       	cp	r20, r1
    869c:	51 05       	cpc	r21, r1
    869e:	21 f0       	breq	.+8      	; 0x86a8 <_printf_fn+0x76c>
    86a0:	a1 96       	adiw	r28, 0x21	; 33
    86a2:	5f af       	std	Y+63, r21	; 0x3f
    86a4:	4e af       	std	Y+62, r20	; 0x3e
    86a6:	a1 97       	sbiw	r28, 0x21	; 33
    86a8:	93 fa       	bst	r9, 3
    86aa:	00 27       	eor	r16, r16
    86ac:	00 f9       	bld	r16, 0
    86ae:	10 e0       	ldi	r17, 0x00	; 0
    86b0:	a1 96       	adiw	r28, 0x21	; 33
    86b2:	2e ad       	ldd	r18, Y+62	; 0x3e
    86b4:	3f ad       	ldd	r19, Y+63	; 0x3f
    86b6:	a1 97       	sbiw	r28, 0x21	; 33
    86b8:	6f 96       	adiw	r28, 0x1f	; 31
    86ba:	4e ad       	ldd	r20, Y+62	; 0x3e
    86bc:	5f ad       	ldd	r21, Y+63	; 0x3f
    86be:	6f 97       	sbiw	r28, 0x1f	; 31
    86c0:	a5 96       	adiw	r28, 0x25	; 37
    86c2:	8e ad       	ldd	r24, Y+62	; 0x3e
    86c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    86c6:	a5 97       	sbiw	r28, 0x25	; 37
    86c8:	7f db       	rcall	.-2306   	; 0x7dc8 <_puts_pad>
    86ca:	45 c0       	rjmp	.+138    	; 0x8756 <_printf_fn+0x81a>
    86cc:	61 01       	movw	r12, r2
    86ce:	92 e0       	ldi	r25, 0x02	; 2
    86d0:	c9 0e       	add	r12, r25
    86d2:	d1 1c       	adc	r13, r1
    86d4:	d1 01       	movw	r26, r2
    86d6:	2d 90       	ld	r2, X+
    86d8:	3c 90       	ld	r3, X
    86da:	41 2c       	mov	r4, r1
    86dc:	21 14       	cp	r2, r1
    86de:	31 04       	cpc	r3, r1
    86e0:	41 04       	cpc	r4, r1
    86e2:	29 f4       	brne	.+10     	; 0x86ee <_printf_fn+0x7b2>
    86e4:	ae 96       	adiw	r28, 0x2e	; 46
    86e6:	2d ac       	ldd	r2, Y+61	; 0x3d
    86e8:	3e ac       	ldd	r3, Y+62	; 0x3e
    86ea:	4f ac       	ldd	r4, Y+63	; 0x3f
    86ec:	ae 97       	sbiw	r28, 0x2e	; 46
    86ee:	84 2d       	mov	r24, r4
    86f0:	b1 01       	movw	r22, r2
    86f2:	08 dc       	rcall	.-2032   	; 0x7f04 <strlen_X>
    86f4:	a1 96       	adiw	r28, 0x21	; 33
    86f6:	ee ad       	ldd	r30, Y+62	; 0x3e
    86f8:	ff ad       	ldd	r31, Y+63	; 0x3f
    86fa:	a1 97       	sbiw	r28, 0x21	; 33
    86fc:	ef 2b       	or	r30, r31
    86fe:	31 f4       	brne	.+12     	; 0x870c <_printf_fn+0x7d0>
    8700:	a0 96       	adiw	r28, 0x20	; 32
    8702:	8f af       	std	Y+63, r24	; 0x3f
    8704:	a0 97       	sbiw	r28, 0x20	; 32
    8706:	a1 96       	adiw	r28, 0x21	; 33
    8708:	9f af       	std	Y+63, r25	; 0x3f
    870a:	a1 97       	sbiw	r28, 0x21	; 33
    870c:	6f 96       	adiw	r28, 0x1f	; 31
    870e:	2e ad       	ldd	r18, Y+62	; 0x3e
    8710:	3f ad       	ldd	r19, Y+63	; 0x3f
    8712:	6f 97       	sbiw	r28, 0x1f	; 31
    8714:	a1 96       	adiw	r28, 0x21	; 33
    8716:	4e ad       	ldd	r20, Y+62	; 0x3e
    8718:	5f ad       	ldd	r21, Y+63	; 0x3f
    871a:	a1 97       	sbiw	r28, 0x21	; 33
    871c:	24 17       	cp	r18, r20
    871e:	35 07       	cpc	r19, r21
    8720:	3c f4       	brge	.+14     	; 0x8730 <_printf_fn+0x7f4>
    8722:	21 15       	cp	r18, r1
    8724:	31 05       	cpc	r19, r1
    8726:	21 f0       	breq	.+8      	; 0x8730 <_printf_fn+0x7f4>
    8728:	a1 96       	adiw	r28, 0x21	; 33
    872a:	3f af       	std	Y+63, r19	; 0x3f
    872c:	2e af       	std	Y+62, r18	; 0x3e
    872e:	a1 97       	sbiw	r28, 0x21	; 33
    8730:	93 fa       	bst	r9, 3
    8732:	ee 24       	eor	r14, r14
    8734:	e0 f8       	bld	r14, 0
    8736:	f1 2c       	mov	r15, r1
    8738:	a1 96       	adiw	r28, 0x21	; 33
    873a:	0e ad       	ldd	r16, Y+62	; 0x3e
    873c:	1f ad       	ldd	r17, Y+63	; 0x3f
    873e:	a1 97       	sbiw	r28, 0x21	; 33
    8740:	6f 96       	adiw	r28, 0x1f	; 31
    8742:	2e ad       	ldd	r18, Y+62	; 0x3e
    8744:	3f ad       	ldd	r19, Y+63	; 0x3f
    8746:	6f 97       	sbiw	r28, 0x1f	; 31
    8748:	64 2d       	mov	r22, r4
    874a:	a1 01       	movw	r20, r2
    874c:	a5 96       	adiw	r28, 0x25	; 37
    874e:	8e ad       	ldd	r24, Y+62	; 0x3e
    8750:	9f ad       	ldd	r25, Y+63	; 0x3f
    8752:	a5 97       	sbiw	r28, 0x25	; 37
    8754:	7b db       	rcall	.-2314   	; 0x7e4c <_puts_pad_X>
    8756:	16 01       	movw	r2, r12
    8758:	17 c0       	rjmp	.+46     	; 0x8788 <_printf_fn+0x84c>
    875a:	f6 01       	movw	r30, r12
    875c:	5e 2d       	mov	r21, r14
    875e:	0e 94 0f e1 	call	0x1c21e	; 0x1c21e <__xload_1>
    8762:	66 23       	and	r22, r22
    8764:	89 f0       	breq	.+34     	; 0x8788 <_printf_fn+0x84c>
    8766:	5f ef       	ldi	r21, 0xFF	; 255
    8768:	c5 1a       	sub	r12, r21
    876a:	d5 0a       	sbc	r13, r21
    876c:	e5 0a       	sbc	r14, r21
    876e:	a5 96       	adiw	r28, 0x25	; 37
    8770:	ae ad       	ldd	r26, Y+62	; 0x3e
    8772:	bf ad       	ldd	r27, Y+63	; 0x3f
    8774:	a5 97       	sbiw	r28, 0x25	; 37
    8776:	ed 91       	ld	r30, X+
    8778:	fc 91       	ld	r31, X
    877a:	11 97       	sbiw	r26, 0x01	; 1
    877c:	cd 01       	movw	r24, r26
    877e:	09 95       	icall
    8780:	6c 14       	cp	r6, r12
    8782:	7d 04       	cpc	r7, r13
    8784:	8e 04       	cpc	r8, r14
    8786:	48 f7       	brcc	.-46     	; 0x875a <_printf_fn+0x81e>
    8788:	e8 2c       	mov	r14, r8
    878a:	63 01       	movw	r12, r6
    878c:	0f cc       	rjmp	.-2018   	; 0x7fac <_printf_fn+0x70>
    878e:	82 e0       	ldi	r24, 0x02	; 2
    8790:	48 2e       	mov	r4, r24
    8792:	51 2c       	mov	r5, r1
    8794:	0d cd       	rjmp	.-1510   	; 0x81b0 <_printf_fn+0x274>
    8796:	f2 e0       	ldi	r31, 0x02	; 2
    8798:	4f 16       	cp	r4, r31
    879a:	51 04       	cpc	r5, r1
    879c:	61 f4       	brne	.+24     	; 0x87b6 <_printf_fn+0x87a>
    879e:	51 01       	movw	r10, r2
    87a0:	b2 e0       	ldi	r27, 0x02	; 2
    87a2:	ab 0e       	add	r10, r27
    87a4:	b1 1c       	adc	r11, r1
    87a6:	f1 01       	movw	r30, r2
    87a8:	80 81       	ld	r24, Z
    87aa:	91 81       	ldd	r25, Z+1	; 0x01
    87ac:	65 96       	adiw	r28, 0x15	; 21
    87ae:	9f af       	std	Y+63, r25	; 0x3f
    87b0:	8e af       	std	Y+62, r24	; 0x3e
    87b2:	65 97       	sbiw	r28, 0x15	; 21
    87b4:	7e cd       	rjmp	.-1284   	; 0x82b2 <_printf_fn+0x376>
    87b6:	f4 e0       	ldi	r31, 0x04	; 4
    87b8:	4f 16       	cp	r4, r31
    87ba:	51 04       	cpc	r5, r1
    87bc:	09 f0       	breq	.+2      	; 0x87c0 <_printf_fn+0x884>
    87be:	b2 cd       	rjmp	.-1180   	; 0x8324 <_printf_fn+0x3e8>
    87c0:	51 01       	movw	r10, r2
    87c2:	24 e0       	ldi	r18, 0x04	; 4
    87c4:	a2 0e       	add	r10, r18
    87c6:	b1 1c       	adc	r11, r1
    87c8:	f1 01       	movw	r30, r2
    87ca:	80 81       	ld	r24, Z
    87cc:	91 81       	ldd	r25, Z+1	; 0x01
    87ce:	a2 81       	ldd	r26, Z+2	; 0x02
    87d0:	b3 81       	ldd	r27, Z+3	; 0x03
    87d2:	2f 96       	adiw	r28, 0x0f	; 15
    87d4:	8c af       	std	Y+60, r24	; 0x3c
    87d6:	9d af       	std	Y+61, r25	; 0x3d
    87d8:	ae af       	std	Y+62, r26	; 0x3e
    87da:	bf af       	std	Y+63, r27	; 0x3f
    87dc:	2f 97       	sbiw	r28, 0x0f	; 15
    87de:	90 cd       	rjmp	.-1248   	; 0x8300 <_printf_fn+0x3c4>
    87e0:	c2 59       	subi	r28, 0x92	; 146
    87e2:	df 4f       	sbci	r29, 0xFF	; 255
    87e4:	e2 e1       	ldi	r30, 0x12	; 18
    87e6:	0c 94 f4 e0 	jmp	0x1c1e8	; 0x1c1e8 <__epilogue_restores__>

000087ea <vsnprintf_P>:
    87ea:	a8 e0       	ldi	r26, 0x08	; 8
    87ec:	b0 e0       	ldi	r27, 0x00	; 0
    87ee:	eb ef       	ldi	r30, 0xFB	; 251
    87f0:	f3 e4       	ldi	r31, 0x43	; 67
    87f2:	0c 94 e4 e0 	jmp	0x1c1c8	; 0x1c1c8 <__prologue_saves__+0x18>
    87f6:	7c 01       	movw	r14, r24
    87f8:	cb 01       	movw	r24, r22
    87fa:	64 2f       	mov	r22, r20
    87fc:	a9 01       	movw	r20, r18
    87fe:	98 01       	movw	r18, r16
    8800:	f7 01       	movw	r30, r14
    8802:	10 82       	st	Z, r1
    8804:	e3 e5       	ldi	r30, 0x53	; 83
    8806:	fb e3       	ldi	r31, 0x3B	; 59
    8808:	fa 83       	std	Y+2, r31	; 0x02
    880a:	e9 83       	std	Y+1, r30	; 0x01
    880c:	9e 83       	std	Y+6, r25	; 0x06
    880e:	8d 83       	std	Y+5, r24	; 0x05
    8810:	18 86       	std	Y+8, r1	; 0x08
    8812:	1f 82       	std	Y+7, r1	; 0x07
    8814:	fc 82       	std	Y+4, r15	; 0x04
    8816:	eb 82       	std	Y+3, r14	; 0x03
    8818:	ce 01       	movw	r24, r28
    881a:	01 96       	adiw	r24, 0x01	; 1
    881c:	8f db       	rcall	.-2274   	; 0x7f3c <_printf_fn>
    881e:	f7 01       	movw	r30, r14
    8820:	01 90       	ld	r0, Z+
    8822:	00 20       	and	r0, r0
    8824:	e9 f7       	brne	.-6      	; 0x8820 <vsnprintf_P+0x36>
    8826:	cf 01       	movw	r24, r30
    8828:	01 97       	sbiw	r24, 0x01	; 1
    882a:	8e 19       	sub	r24, r14
    882c:	9f 09       	sbc	r25, r15
    882e:	28 96       	adiw	r28, 0x08	; 8
    8830:	e6 e0       	ldi	r30, 0x06	; 6
    8832:	0c 94 00 e1 	jmp	0x1c200	; 0x1c200 <__epilogue_restores__+0x18>

00008836 <snprintf_P>:
    8836:	a0 e0       	ldi	r26, 0x00	; 0
    8838:	b0 e0       	ldi	r27, 0x00	; 0
    883a:	e1 e2       	ldi	r30, 0x21	; 33
    883c:	f4 e4       	ldi	r31, 0x44	; 68
    883e:	0c 94 e6 e0 	jmp	0x1c1cc	; 0x1c1cc <__prologue_saves__+0x1c>
    8842:	8e 01       	movw	r16, r28
    8844:	02 5f       	subi	r16, 0xF2	; 242
    8846:	1f 4f       	sbci	r17, 0xFF	; 255
    8848:	2b 85       	ldd	r18, Y+11	; 0x0b
    884a:	3c 85       	ldd	r19, Y+12	; 0x0c
    884c:	4d 85       	ldd	r20, Y+13	; 0x0d
    884e:	69 85       	ldd	r22, Y+9	; 0x09
    8850:	7a 85       	ldd	r23, Y+10	; 0x0a
    8852:	8f 81       	ldd	r24, Y+7	; 0x07
    8854:	98 85       	ldd	r25, Y+8	; 0x08
    8856:	c9 df       	rcall	.-110    	; 0x87ea <vsnprintf_P>
    8858:	e4 e0       	ldi	r30, 0x04	; 4
    885a:	0c 94 02 e1 	jmp	0x1c204	; 0x1c204 <__epilogue_restores__+0x1c>

0000885e <sprintf_P>:
    885e:	a0 e0       	ldi	r26, 0x00	; 0
    8860:	b0 e0       	ldi	r27, 0x00	; 0
    8862:	e5 e3       	ldi	r30, 0x35	; 53
    8864:	f4 e4       	ldi	r31, 0x44	; 68
    8866:	0c 94 e6 e0 	jmp	0x1c1cc	; 0x1c1cc <__prologue_saves__+0x1c>
    886a:	8e 01       	movw	r16, r28
    886c:	04 5f       	subi	r16, 0xF4	; 244
    886e:	1f 4f       	sbci	r17, 0xFF	; 255
    8870:	29 85       	ldd	r18, Y+9	; 0x09
    8872:	3a 85       	ldd	r19, Y+10	; 0x0a
    8874:	4b 85       	ldd	r20, Y+11	; 0x0b
    8876:	60 e0       	ldi	r22, 0x00	; 0
    8878:	74 e0       	ldi	r23, 0x04	; 4
    887a:	8f 81       	ldd	r24, Y+7	; 0x07
    887c:	98 85       	ldd	r25, Y+8	; 0x08
    887e:	b5 df       	rcall	.-150    	; 0x87ea <vsnprintf_P>
    8880:	e4 e0       	ldi	r30, 0x04	; 4
    8882:	0c 94 02 e1 	jmp	0x1c204	; 0x1c204 <__epilogue_restores__+0x1c>

00008886 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE
int
printf_P(__memx const char *format, ...)
{
    8886:	a8 e0       	ldi	r26, 0x08	; 8
    8888:	b0 e0       	ldi	r27, 0x00	; 0
    888a:	e9 e4       	ldi	r30, 0x49	; 73
    888c:	f4 e4       	ldi	r31, 0x44	; 68
    888e:	0c 94 e8 e0 	jmp	0x1c1d0	; 0x1c1d0 <__prologue_saves__+0x20>
    8892:	9e 01       	movw	r18, r28
    8894:	23 5f       	subi	r18, 0xF3	; 243
    8896:	3f 4f       	sbci	r19, 0xFF	; 255
    8898:	f9 01       	movw	r30, r18
    889a:	41 91       	ld	r20, Z+
    889c:	51 91       	ld	r21, Z+
    889e:	61 91       	ld	r22, Z+
    88a0:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    88a2:	8c e6       	ldi	r24, 0x6C	; 108
    88a4:	9b e3       	ldi	r25, 0x3B	; 59
    88a6:	9a 83       	std	Y+2, r25	; 0x02
    88a8:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    88aa:	18 86       	std	Y+8, r1	; 0x08
    88ac:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    88ae:	ce 01       	movw	r24, r28
    88b0:	01 96       	adiw	r24, 0x01	; 1
    88b2:	44 db       	rcall	.-2424   	; 0x7f3c <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    88b4:	8f 81       	ldd	r24, Y+7	; 0x07
    88b6:	98 85       	ldd	r25, Y+8	; 0x08
    88b8:	28 96       	adiw	r28, 0x08	; 8
    88ba:	e2 e0       	ldi	r30, 0x02	; 2
    88bc:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

000088c0 <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    88c0:	9c 01       	movw	r18, r24
    88c2:	20 53       	subi	r18, 0x30	; 48
    88c4:	31 09       	sbc	r19, r1
    88c6:	2a 30       	cpi	r18, 0x0A	; 10
    88c8:	31 05       	cpc	r19, r1
    88ca:	10 f4       	brcc	.+4      	; 0x88d0 <atodigit+0x10>
    88cc:	c9 01       	movw	r24, r18
    88ce:	10 c0       	rjmp	.+32     	; 0x88f0 <atodigit+0x30>
    88d0:	9c 01       	movw	r18, r24
    88d2:	21 54       	subi	r18, 0x41	; 65
    88d4:	31 09       	sbc	r19, r1
    88d6:	26 30       	cpi	r18, 0x06	; 6
    88d8:	31 05       	cpc	r19, r1
    88da:	10 f4       	brcc	.+4      	; 0x88e0 <atodigit+0x20>
    88dc:	c7 97       	sbiw	r24, 0x37	; 55
    88de:	08 c0       	rjmp	.+16     	; 0x88f0 <atodigit+0x30>
    88e0:	9c 01       	movw	r18, r24
    88e2:	21 56       	subi	r18, 0x61	; 97
    88e4:	31 09       	sbc	r19, r1
    88e6:	26 30       	cpi	r18, 0x06	; 6
    88e8:	31 05       	cpc	r19, r1
    88ea:	28 f4       	brcc	.+10     	; 0x88f6 <atodigit+0x36>
    88ec:	87 55       	subi	r24, 0x57	; 87
    88ee:	91 09       	sbc	r25, r1
    88f0:	86 17       	cp	r24, r22
    88f2:	97 07       	cpc	r25, r23
    88f4:	14 f0       	brlt	.+4      	; 0x88fa <atodigit+0x3a>
    88f6:	8f ef       	ldi	r24, 0xFF	; 255
    88f8:	9f ef       	ldi	r25, 0xFF	; 255
    88fa:	08 95       	ret

000088fc <strtol>:
    88fc:	a0 e0       	ldi	r26, 0x00	; 0
    88fe:	b0 e0       	ldi	r27, 0x00	; 0
    8900:	e4 e8       	ldi	r30, 0x84	; 132
    8902:	f4 e4       	ldi	r31, 0x44	; 68
    8904:	0c 94 d8 e0 	jmp	0x1c1b0	; 0x1c1b0 <__prologue_saves__>
    8908:	2b 01       	movw	r4, r22
    890a:	8a 01       	movw	r16, r20
    890c:	ec 01       	movw	r28, r24
    890e:	28 81       	ld	r18, Y
    8910:	01 96       	adiw	r24, 0x01	; 1
    8912:	20 32       	cpi	r18, 0x20	; 32
    8914:	d9 f3       	breq	.-10     	; 0x890c <strtol+0x10>
    8916:	29 30       	cpi	r18, 0x09	; 9
    8918:	c9 f3       	breq	.-14     	; 0x890c <strtol+0x10>
    891a:	2d 32       	cpi	r18, 0x2D	; 45
    891c:	29 f4       	brne	.+10     	; 0x8928 <strtol+0x2c>
    891e:	ec 01       	movw	r28, r24
    8920:	66 24       	eor	r6, r6
    8922:	63 94       	inc	r6
    8924:	71 2c       	mov	r7, r1
    8926:	05 c0       	rjmp	.+10     	; 0x8932 <strtol+0x36>
    8928:	2b 32       	cpi	r18, 0x2B	; 43
    892a:	09 f4       	brne	.+2      	; 0x892e <strtol+0x32>
    892c:	ec 01       	movw	r28, r24
    892e:	61 2c       	mov	r6, r1
    8930:	71 2c       	mov	r7, r1
    8932:	9e 01       	movw	r18, r28
    8934:	2f 5f       	subi	r18, 0xFF	; 255
    8936:	3f 4f       	sbci	r19, 0xFF	; 255
    8938:	88 81       	ld	r24, Y
    893a:	80 33       	cpi	r24, 0x30	; 48
    893c:	11 f4       	brne	.+4      	; 0x8942 <strtol+0x46>
    893e:	e9 01       	movw	r28, r18
    8940:	f8 cf       	rjmp	.-16     	; 0x8932 <strtol+0x36>
    8942:	c1 2c       	mov	r12, r1
    8944:	d1 2c       	mov	r13, r1
    8946:	76 01       	movw	r14, r12
    8948:	48 01       	movw	r8, r16
    894a:	01 2e       	mov	r0, r17
    894c:	00 0c       	add	r0, r0
    894e:	aa 08       	sbc	r10, r10
    8950:	bb 08       	sbc	r11, r11
    8952:	3c 2e       	mov	r3, r28
    8954:	2d 2e       	mov	r2, r29
    8956:	89 91       	ld	r24, Y+
    8958:	88 23       	and	r24, r24
    895a:	31 f0       	breq	.+12     	; 0x8968 <strtol+0x6c>
    895c:	b8 01       	movw	r22, r16
    895e:	90 e0       	ldi	r25, 0x00	; 0
    8960:	af df       	rcall	.-162    	; 0x88c0 <atodigit>
    8962:	fc 01       	movw	r30, r24
    8964:	97 ff       	sbrs	r25, 7
    8966:	0c c0       	rjmp	.+24     	; 0x8980 <strtol+0x84>
    8968:	61 14       	cp	r6, r1
    896a:	71 04       	cpc	r7, r1
    896c:	c1 f0       	breq	.+48     	; 0x899e <strtol+0xa2>
    896e:	f0 94       	com	r15
    8970:	e0 94       	com	r14
    8972:	d0 94       	com	r13
    8974:	c0 94       	com	r12
    8976:	c1 1c       	adc	r12, r1
    8978:	d1 1c       	adc	r13, r1
    897a:	e1 1c       	adc	r14, r1
    897c:	f1 1c       	adc	r15, r1
    897e:	0f c0       	rjmp	.+30     	; 0x899e <strtol+0xa2>
    8980:	a5 01       	movw	r20, r10
    8982:	94 01       	movw	r18, r8
    8984:	c7 01       	movw	r24, r14
    8986:	b6 01       	movw	r22, r12
    8988:	0e 94 29 e0 	call	0x1c052	; 0x1c052 <__mulsi3>
    898c:	6f 01       	movw	r12, r30
    898e:	ff 0f       	add	r31, r31
    8990:	ee 08       	sbc	r14, r14
    8992:	ff 08       	sbc	r15, r15
    8994:	c6 0e       	add	r12, r22
    8996:	d7 1e       	adc	r13, r23
    8998:	e8 1e       	adc	r14, r24
    899a:	f9 1e       	adc	r15, r25
    899c:	da cf       	rjmp	.-76     	; 0x8952 <strtol+0x56>
    899e:	41 14       	cp	r4, r1
    89a0:	51 04       	cpc	r5, r1
    89a2:	19 f0       	breq	.+6      	; 0x89aa <strtol+0xae>
    89a4:	f2 01       	movw	r30, r4
    89a6:	30 82       	st	Z, r3
    89a8:	21 82       	std	Z+1, r2	; 0x01
    89aa:	c7 01       	movw	r24, r14
    89ac:	b6 01       	movw	r22, r12
    89ae:	cd b7       	in	r28, 0x3d	; 61
    89b0:	de b7       	in	r29, 0x3e	; 62
    89b2:	e2 e1       	ldi	r30, 0x12	; 18
    89b4:	0c 94 f4 e0 	jmp	0x1c1e8	; 0x1c1e8 <__epilogue_restores__>

000089b8 <atoi>:
MEMSPACE
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    89b8:	4a e0       	ldi	r20, 0x0A	; 10
    89ba:	50 e0       	ldi	r21, 0x00	; 0
    89bc:	60 e0       	ldi	r22, 0x00	; 0
    89be:	70 e0       	ldi	r23, 0x00	; 0
    89c0:	9d df       	rcall	.-198    	; 0x88fc <strtol>
    return((int)num);
}
    89c2:	cb 01       	movw	r24, r22
    89c4:	08 95       	ret

000089c6 <atol>:
MEMSPACE
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    89c6:	4a e0       	ldi	r20, 0x0A	; 10
    89c8:	50 e0       	ldi	r21, 0x00	; 0
    89ca:	60 e0       	ldi	r22, 0x00	; 0
    89cc:	70 e0       	ldi	r23, 0x00	; 0
    89ce:	96 cf       	rjmp	.-212    	; 0x88fc <strtol>
    return(num);
}
    89d0:	08 95       	ret

000089d2 <ld_dword>:
#endif
		if (res != FR_OK) ABORT(fs, res);
	}

	LEAVE_FF(fs, res);
}
    89d2:	fc 01       	movw	r30, r24
    89d4:	62 81       	ldd	r22, Z+2	; 0x02
    89d6:	73 81       	ldd	r23, Z+3	; 0x03
    89d8:	cb 01       	movw	r24, r22
    89da:	a0 e0       	ldi	r26, 0x00	; 0
    89dc:	b0 e0       	ldi	r27, 0x00	; 0
    89de:	ba 2f       	mov	r27, r26
    89e0:	a9 2f       	mov	r26, r25
    89e2:	98 2f       	mov	r25, r24
    89e4:	88 27       	eor	r24, r24
    89e6:	21 81       	ldd	r18, Z+1	; 0x01
    89e8:	82 2b       	or	r24, r18
    89ea:	ba 2f       	mov	r27, r26
    89ec:	a9 2f       	mov	r26, r25
    89ee:	98 2f       	mov	r25, r24
    89f0:	88 27       	eor	r24, r24
    89f2:	20 81       	ld	r18, Z
    89f4:	bc 01       	movw	r22, r24
    89f6:	cd 01       	movw	r24, r26
    89f8:	62 2b       	or	r22, r18
    89fa:	08 95       	ret

000089fc <st_dword>:
    89fc:	fc 01       	movw	r30, r24
    89fe:	40 83       	st	Z, r20
    8a00:	51 83       	std	Z+1, r21	; 0x01
    8a02:	62 83       	std	Z+2, r22	; 0x02
    8a04:	73 83       	std	Z+3, r23	; 0x03
    8a06:	08 95       	ret

00008a08 <mem_set>:
    8a08:	48 0f       	add	r20, r24
    8a0a:	59 1f       	adc	r21, r25
    8a0c:	fc 01       	movw	r30, r24
    8a0e:	61 93       	st	Z+, r22
    8a10:	cf 01       	movw	r24, r30
    8a12:	e4 17       	cp	r30, r20
    8a14:	f5 07       	cpc	r31, r21
    8a16:	d1 f7       	brne	.-12     	; 0x8a0c <mem_set+0x4>
    8a18:	08 95       	ret

00008a1a <mem_cmp>:
    8a1a:	dc 01       	movw	r26, r24
    8a1c:	fb 01       	movw	r30, r22
    8a1e:	2d 91       	ld	r18, X+
    8a20:	81 91       	ld	r24, Z+
    8a22:	30 e0       	ldi	r19, 0x00	; 0
    8a24:	b9 01       	movw	r22, r18
    8a26:	68 1b       	sub	r22, r24
    8a28:	71 09       	sbc	r23, r1
    8a2a:	cb 01       	movw	r24, r22
    8a2c:	41 50       	subi	r20, 0x01	; 1
    8a2e:	51 09       	sbc	r21, r1
    8a30:	11 f0       	breq	.+4      	; 0x8a36 <mem_cmp+0x1c>
    8a32:	00 97       	sbiw	r24, 0x00	; 0
    8a34:	a1 f3       	breq	.-24     	; 0x8a1e <mem_cmp+0x4>
    8a36:	08 95       	ret

00008a38 <tchar2uni>:
    8a38:	0f 93       	push	r16
    8a3a:	1f 93       	push	r17
    8a3c:	fc 01       	movw	r30, r24
    8a3e:	a0 81       	ld	r26, Z
    8a40:	b1 81       	ldd	r27, Z+1	; 0x01
    8a42:	fd 01       	movw	r30, r26
    8a44:	31 96       	adiw	r30, 0x01	; 1
    8a46:	4c 91       	ld	r20, X
    8a48:	47 fd       	sbrc	r20, 7
    8a4a:	04 c0       	rjmp	.+8      	; 0x8a54 <tchar2uni+0x1c>
    8a4c:	50 e0       	ldi	r21, 0x00	; 0
    8a4e:	60 e0       	ldi	r22, 0x00	; 0
    8a50:	70 e0       	ldi	r23, 0x00	; 0
    8a52:	68 c0       	rjmp	.+208    	; 0x8b24 <tchar2uni+0xec>
    8a54:	24 2f       	mov	r18, r20
    8a56:	20 7e       	andi	r18, 0xE0	; 224
    8a58:	20 3c       	cpi	r18, 0xC0	; 192
    8a5a:	39 f4       	brne	.+14     	; 0x8a6a <tchar2uni+0x32>
    8a5c:	4f 71       	andi	r20, 0x1F	; 31
    8a5e:	50 e0       	ldi	r21, 0x00	; 0
    8a60:	60 e0       	ldi	r22, 0x00	; 0
    8a62:	70 e0       	ldi	r23, 0x00	; 0
    8a64:	21 e0       	ldi	r18, 0x01	; 1
    8a66:	30 e0       	ldi	r19, 0x00	; 0
    8a68:	16 c0       	rjmp	.+44     	; 0x8a96 <tchar2uni+0x5e>
    8a6a:	24 2f       	mov	r18, r20
    8a6c:	20 7f       	andi	r18, 0xF0	; 240
    8a6e:	20 3e       	cpi	r18, 0xE0	; 224
    8a70:	39 f4       	brne	.+14     	; 0x8a80 <tchar2uni+0x48>
    8a72:	4f 70       	andi	r20, 0x0F	; 15
    8a74:	50 e0       	ldi	r21, 0x00	; 0
    8a76:	60 e0       	ldi	r22, 0x00	; 0
    8a78:	70 e0       	ldi	r23, 0x00	; 0
    8a7a:	22 e0       	ldi	r18, 0x02	; 2
    8a7c:	30 e0       	ldi	r19, 0x00	; 0
    8a7e:	0b c0       	rjmp	.+22     	; 0x8a96 <tchar2uni+0x5e>
    8a80:	24 2f       	mov	r18, r20
    8a82:	28 7f       	andi	r18, 0xF8	; 248
    8a84:	20 3f       	cpi	r18, 0xF0	; 240
    8a86:	09 f0       	breq	.+2      	; 0x8a8a <tchar2uni+0x52>
    8a88:	54 c0       	rjmp	.+168    	; 0x8b32 <tchar2uni+0xfa>
    8a8a:	47 70       	andi	r20, 0x07	; 7
    8a8c:	50 e0       	ldi	r21, 0x00	; 0
    8a8e:	60 e0       	ldi	r22, 0x00	; 0
    8a90:	70 e0       	ldi	r23, 0x00	; 0
    8a92:	23 e0       	ldi	r18, 0x03	; 3
    8a94:	30 e0       	ldi	r19, 0x00	; 0
    8a96:	31 96       	adiw	r30, 0x01	; 1
    8a98:	df 01       	movw	r26, r30
    8a9a:	11 97       	sbiw	r26, 0x01	; 1
    8a9c:	ac 91       	ld	r26, X
    8a9e:	ba 2f       	mov	r27, r26
    8aa0:	b0 7c       	andi	r27, 0xC0	; 192
    8aa2:	b0 38       	cpi	r27, 0x80	; 128
    8aa4:	09 f0       	breq	.+2      	; 0x8aa8 <tchar2uni+0x70>
    8aa6:	45 c0       	rjmp	.+138    	; 0x8b32 <tchar2uni+0xfa>
    8aa8:	b6 e0       	ldi	r27, 0x06	; 6
    8aaa:	44 0f       	add	r20, r20
    8aac:	55 1f       	adc	r21, r21
    8aae:	66 1f       	adc	r22, r22
    8ab0:	77 1f       	adc	r23, r23
    8ab2:	ba 95       	dec	r27
    8ab4:	d1 f7       	brne	.-12     	; 0x8aaa <tchar2uni+0x72>
    8ab6:	af 73       	andi	r26, 0x3F	; 63
    8ab8:	4a 2b       	or	r20, r26
    8aba:	21 50       	subi	r18, 0x01	; 1
    8abc:	31 09       	sbc	r19, r1
    8abe:	59 f7       	brne	.-42     	; 0x8a96 <tchar2uni+0x5e>
    8ac0:	8a 01       	movw	r16, r20
    8ac2:	9b 01       	movw	r18, r22
    8ac4:	00 58       	subi	r16, 0x80	; 128
    8ac6:	11 09       	sbc	r17, r1
    8ac8:	21 09       	sbc	r18, r1
    8aca:	31 09       	sbc	r19, r1
    8acc:	00 38       	cpi	r16, 0x80	; 128
    8ace:	1f 4f       	sbci	r17, 0xFF	; 255
    8ad0:	20 41       	sbci	r18, 0x10	; 16
    8ad2:	31 05       	cpc	r19, r1
    8ad4:	70 f5       	brcc	.+92     	; 0x8b32 <tchar2uni+0xfa>
    8ad6:	8a 01       	movw	r16, r20
    8ad8:	9b 01       	movw	r18, r22
    8ada:	18 5d       	subi	r17, 0xD8	; 216
    8adc:	21 09       	sbc	r18, r1
    8ade:	31 09       	sbc	r19, r1
    8ae0:	01 15       	cp	r16, r1
    8ae2:	18 40       	sbci	r17, 0x08	; 8
    8ae4:	21 05       	cpc	r18, r1
    8ae6:	31 05       	cpc	r19, r1
    8ae8:	20 f1       	brcs	.+72     	; 0x8b32 <tchar2uni+0xfa>
    8aea:	41 15       	cp	r20, r1
    8aec:	51 05       	cpc	r21, r1
    8aee:	21 e0       	ldi	r18, 0x01	; 1
    8af0:	62 07       	cpc	r22, r18
    8af2:	71 05       	cpc	r23, r1
    8af4:	b8 f0       	brcs	.+46     	; 0x8b24 <tchar2uni+0xec>
    8af6:	8a 01       	movw	r16, r20
    8af8:	9b 01       	movw	r18, r22
    8afa:	21 50       	subi	r18, 0x01	; 1
    8afc:	31 09       	sbc	r19, r1
    8afe:	a6 e0       	ldi	r26, 0x06	; 6
    8b00:	00 0f       	add	r16, r16
    8b02:	11 1f       	adc	r17, r17
    8b04:	22 1f       	adc	r18, r18
    8b06:	33 1f       	adc	r19, r19
    8b08:	aa 95       	dec	r26
    8b0a:	d1 f7       	brne	.-12     	; 0x8b00 <tchar2uni+0xc8>
    8b0c:	00 27       	eor	r16, r16
    8b0e:	11 27       	eor	r17, r17
    8b10:	33 70       	andi	r19, 0x03	; 3
    8b12:	53 70       	andi	r21, 0x03	; 3
    8b14:	66 27       	eor	r22, r22
    8b16:	77 27       	eor	r23, r23
    8b18:	5c 6d       	ori	r21, 0xDC	; 220
    8b1a:	78 6d       	ori	r23, 0xD8	; 216
    8b1c:	40 2b       	or	r20, r16
    8b1e:	51 2b       	or	r21, r17
    8b20:	62 2b       	or	r22, r18
    8b22:	73 2b       	or	r23, r19
    8b24:	dc 01       	movw	r26, r24
    8b26:	ed 93       	st	X+, r30
    8b28:	fc 93       	st	X, r31
    8b2a:	34 2f       	mov	r19, r20
    8b2c:	25 2f       	mov	r18, r21
    8b2e:	cb 01       	movw	r24, r22
    8b30:	04 c0       	rjmp	.+8      	; 0x8b3a <tchar2uni+0x102>
    8b32:	3f ef       	ldi	r19, 0xFF	; 255
    8b34:	2f ef       	ldi	r18, 0xFF	; 255
    8b36:	8f ef       	ldi	r24, 0xFF	; 255
    8b38:	9f ef       	ldi	r25, 0xFF	; 255
    8b3a:	63 2f       	mov	r22, r19
    8b3c:	72 2f       	mov	r23, r18
    8b3e:	1f 91       	pop	r17
    8b40:	0f 91       	pop	r16
    8b42:	08 95       	ret

00008b44 <clst2sect>:
    8b44:	0f 93       	push	r16
    8b46:	1f 93       	push	r17
    8b48:	fc 01       	movw	r30, r24
    8b4a:	9a 01       	movw	r18, r20
    8b4c:	ab 01       	movw	r20, r22
    8b4e:	22 50       	subi	r18, 0x02	; 2
    8b50:	31 09       	sbc	r19, r1
    8b52:	41 09       	sbc	r20, r1
    8b54:	51 09       	sbc	r21, r1
    8b56:	81 8d       	ldd	r24, Z+25	; 0x19
    8b58:	92 8d       	ldd	r25, Z+26	; 0x1a
    8b5a:	a3 8d       	ldd	r26, Z+27	; 0x1b
    8b5c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    8b5e:	02 97       	sbiw	r24, 0x02	; 2
    8b60:	a1 09       	sbc	r26, r1
    8b62:	b1 09       	sbc	r27, r1
    8b64:	28 17       	cp	r18, r24
    8b66:	39 07       	cpc	r19, r25
    8b68:	4a 07       	cpc	r20, r26
    8b6a:	5b 07       	cpc	r21, r27
    8b6c:	68 f4       	brcc	.+26     	; 0x8b88 <clst2sect+0x44>
    8b6e:	a1 85       	ldd	r26, Z+9	; 0x09
    8b70:	b2 85       	ldd	r27, Z+10	; 0x0a
    8b72:	0e 94 b8 e0 	call	0x1c170	; 0x1c170 <__muluhisi3>
    8b76:	05 a5       	ldd	r16, Z+45	; 0x2d
    8b78:	16 a5       	ldd	r17, Z+46	; 0x2e
    8b7a:	27 a5       	ldd	r18, Z+47	; 0x2f
    8b7c:	30 a9       	ldd	r19, Z+48	; 0x30
    8b7e:	60 0f       	add	r22, r16
    8b80:	71 1f       	adc	r23, r17
    8b82:	82 1f       	adc	r24, r18
    8b84:	93 1f       	adc	r25, r19
    8b86:	03 c0       	rjmp	.+6      	; 0x8b8e <clst2sect+0x4a>
    8b88:	60 e0       	ldi	r22, 0x00	; 0
    8b8a:	70 e0       	ldi	r23, 0x00	; 0
    8b8c:	cb 01       	movw	r24, r22
    8b8e:	1f 91       	pop	r17
    8b90:	0f 91       	pop	r16
    8b92:	08 95       	ret

00008b94 <clmt_clust>:
    8b94:	cf 93       	push	r28
    8b96:	df 93       	push	r29
    8b98:	fc 01       	movw	r30, r24
    8b9a:	c2 a1       	ldd	r28, Z+34	; 0x22
    8b9c:	d3 a1       	ldd	r29, Z+35	; 0x23
    8b9e:	24 96       	adiw	r28, 0x04	; 4
    8ba0:	cb 01       	movw	r24, r22
    8ba2:	ba 01       	movw	r22, r20
    8ba4:	29 e0       	ldi	r18, 0x09	; 9
    8ba6:	96 95       	lsr	r25
    8ba8:	87 95       	ror	r24
    8baa:	77 95       	ror	r23
    8bac:	67 95       	ror	r22
    8bae:	2a 95       	dec	r18
    8bb0:	d1 f7       	brne	.-12     	; 0x8ba6 <clmt_clust+0x12>
    8bb2:	01 90       	ld	r0, Z+
    8bb4:	f0 81       	ld	r31, Z
    8bb6:	e0 2d       	mov	r30, r0
    8bb8:	21 85       	ldd	r18, Z+9	; 0x09
    8bba:	32 85       	ldd	r19, Z+10	; 0x0a
    8bbc:	40 e0       	ldi	r20, 0x00	; 0
    8bbe:	50 e0       	ldi	r21, 0x00	; 0
    8bc0:	0e 94 6b e0 	call	0x1c0d6	; 0x1c0d6 <__udivmodsi4>
    8bc4:	88 81       	ld	r24, Y
    8bc6:	99 81       	ldd	r25, Y+1	; 0x01
    8bc8:	aa 81       	ldd	r26, Y+2	; 0x02
    8bca:	bb 81       	ldd	r27, Y+3	; 0x03
    8bcc:	00 97       	sbiw	r24, 0x00	; 0
    8bce:	a1 05       	cpc	r26, r1
    8bd0:	b1 05       	cpc	r27, r1
    8bd2:	b1 f0       	breq	.+44     	; 0x8c00 <clmt_clust+0x6c>
    8bd4:	28 17       	cp	r18, r24
    8bd6:	39 07       	cpc	r19, r25
    8bd8:	4a 07       	cpc	r20, r26
    8bda:	5b 07       	cpc	r21, r27
    8bdc:	30 f0       	brcs	.+12     	; 0x8bea <clmt_clust+0x56>
    8bde:	28 1b       	sub	r18, r24
    8be0:	39 0b       	sbc	r19, r25
    8be2:	4a 0b       	sbc	r20, r26
    8be4:	5b 0b       	sbc	r21, r27
    8be6:	28 96       	adiw	r28, 0x08	; 8
    8be8:	ed cf       	rjmp	.-38     	; 0x8bc4 <clmt_clust+0x30>
    8bea:	8c 81       	ldd	r24, Y+4	; 0x04
    8bec:	9d 81       	ldd	r25, Y+5	; 0x05
    8bee:	ae 81       	ldd	r26, Y+6	; 0x06
    8bf0:	bf 81       	ldd	r27, Y+7	; 0x07
    8bf2:	bc 01       	movw	r22, r24
    8bf4:	cd 01       	movw	r24, r26
    8bf6:	62 0f       	add	r22, r18
    8bf8:	73 1f       	adc	r23, r19
    8bfa:	84 1f       	adc	r24, r20
    8bfc:	95 1f       	adc	r25, r21
    8bfe:	03 c0       	rjmp	.+6      	; 0x8c06 <clmt_clust+0x72>
    8c00:	60 e0       	ldi	r22, 0x00	; 0
    8c02:	70 e0       	ldi	r23, 0x00	; 0
    8c04:	cb 01       	movw	r24, r22
    8c06:	df 91       	pop	r29
    8c08:	cf 91       	pop	r28
    8c0a:	08 95       	ret

00008c0c <sum_sfn>:
    8c0c:	fc 01       	movw	r30, r24
    8c0e:	9c 01       	movw	r18, r24
    8c10:	25 5f       	subi	r18, 0xF5	; 245
    8c12:	3f 4f       	sbci	r19, 0xFF	; 255
    8c14:	80 e0       	ldi	r24, 0x00	; 0
    8c16:	98 2f       	mov	r25, r24
    8c18:	90 fb       	bst	r25, 0
    8c1a:	97 95       	ror	r25
    8c1c:	97 f9       	bld	r25, 7
    8c1e:	81 91       	ld	r24, Z+
    8c20:	89 0f       	add	r24, r25
    8c22:	e2 17       	cp	r30, r18
    8c24:	f3 07       	cpc	r31, r19
    8c26:	b9 f7       	brne	.-18     	; 0x8c16 <sum_sfn+0xa>
    8c28:	08 95       	ret

00008c2a <get_ldnumber>:
    8c2a:	cf 93       	push	r28
    8c2c:	df 93       	push	r29
    8c2e:	dc 01       	movw	r26, r24
    8c30:	ed 91       	ld	r30, X+
    8c32:	fc 91       	ld	r31, X
    8c34:	11 97       	sbiw	r26, 0x01	; 1
    8c36:	30 97       	sbiw	r30, 0x00	; 0
    8c38:	f9 f0       	breq	.+62     	; 0x8c78 <get_ldnumber+0x4e>
    8c3a:	9f 01       	movw	r18, r30
    8c3c:	2f 5f       	subi	r18, 0xFF	; 255
    8c3e:	3f 4f       	sbci	r19, 0xFF	; 255
    8c40:	e9 01       	movw	r28, r18
    8c42:	21 97       	sbiw	r28, 0x01	; 1
    8c44:	88 81       	ld	r24, Y
    8c46:	80 32       	cpi	r24, 0x20	; 32
    8c48:	18 f0       	brcs	.+6      	; 0x8c50 <get_ldnumber+0x26>
    8c4a:	8a 33       	cpi	r24, 0x3A	; 58
    8c4c:	b9 f7       	brne	.-18     	; 0x8c3c <get_ldnumber+0x12>
    8c4e:	04 c0       	rjmp	.+8      	; 0x8c58 <get_ldnumber+0x2e>
    8c50:	80 91 3a 18 	lds	r24, 0x183A	; 0x80183a <CurrVol>
    8c54:	90 e0       	ldi	r25, 0x00	; 0
    8c56:	12 c0       	rjmp	.+36     	; 0x8c7c <get_ldnumber+0x52>
    8c58:	90 81       	ld	r25, Z
    8c5a:	80 ed       	ldi	r24, 0xD0	; 208
    8c5c:	89 0f       	add	r24, r25
    8c5e:	8a 30       	cpi	r24, 0x0A	; 10
    8c60:	58 f4       	brcc	.+22     	; 0x8c78 <get_ldnumber+0x4e>
    8c62:	32 96       	adiw	r30, 0x02	; 2
    8c64:	2e 17       	cp	r18, r30
    8c66:	3f 07       	cpc	r19, r31
    8c68:	39 f4       	brne	.+14     	; 0x8c78 <get_ldnumber+0x4e>
    8c6a:	90 33       	cpi	r25, 0x30	; 48
    8c6c:	29 f4       	brne	.+10     	; 0x8c78 <get_ldnumber+0x4e>
    8c6e:	2d 93       	st	X+, r18
    8c70:	3c 93       	st	X, r19
    8c72:	80 e0       	ldi	r24, 0x00	; 0
    8c74:	90 e0       	ldi	r25, 0x00	; 0
    8c76:	02 c0       	rjmp	.+4      	; 0x8c7c <get_ldnumber+0x52>
    8c78:	8f ef       	ldi	r24, 0xFF	; 255
    8c7a:	9f ef       	ldi	r25, 0xFF	; 255
    8c7c:	df 91       	pop	r29
    8c7e:	cf 91       	pop	r28
    8c80:	08 95       	ret

00008c82 <validate>:
    8c82:	0f 93       	push	r16
    8c84:	1f 93       	push	r17
    8c86:	cf 93       	push	r28
    8c88:	df 93       	push	r29
    8c8a:	ec 01       	movw	r28, r24
    8c8c:	8b 01       	movw	r16, r22
    8c8e:	89 2b       	or	r24, r25
    8c90:	f9 f0       	breq	.+62     	; 0x8cd0 <validate+0x4e>
    8c92:	e8 81       	ld	r30, Y
    8c94:	f9 81       	ldd	r31, Y+1	; 0x01
    8c96:	30 97       	sbiw	r30, 0x00	; 0
    8c98:	d9 f0       	breq	.+54     	; 0x8cd0 <validate+0x4e>
    8c9a:	80 81       	ld	r24, Z
    8c9c:	88 23       	and	r24, r24
    8c9e:	c1 f0       	breq	.+48     	; 0x8cd0 <validate+0x4e>
    8ca0:	2a 81       	ldd	r18, Y+2	; 0x02
    8ca2:	3b 81       	ldd	r19, Y+3	; 0x03
    8ca4:	85 81       	ldd	r24, Z+5	; 0x05
    8ca6:	96 81       	ldd	r25, Z+6	; 0x06
    8ca8:	28 17       	cp	r18, r24
    8caa:	39 07       	cpc	r19, r25
    8cac:	89 f4       	brne	.+34     	; 0x8cd0 <validate+0x4e>
    8cae:	81 81       	ldd	r24, Z+1	; 0x01
    8cb0:	0e 94 01 68 	call	0xd002	; 0xd002 <disk_status>
    8cb4:	80 fd       	sbrc	r24, 0
    8cb6:	0c c0       	rjmp	.+24     	; 0x8cd0 <validate+0x4e>
    8cb8:	28 81       	ld	r18, Y
    8cba:	39 81       	ldd	r19, Y+1	; 0x01
    8cbc:	80 e0       	ldi	r24, 0x00	; 0
    8cbe:	90 e0       	ldi	r25, 0x00	; 0
    8cc0:	f8 01       	movw	r30, r16
    8cc2:	31 83       	std	Z+1, r19	; 0x01
    8cc4:	20 83       	st	Z, r18
    8cc6:	df 91       	pop	r29
    8cc8:	cf 91       	pop	r28
    8cca:	1f 91       	pop	r17
    8ccc:	0f 91       	pop	r16
    8cce:	08 95       	ret
    8cd0:	89 e0       	ldi	r24, 0x09	; 9
    8cd2:	90 e0       	ldi	r25, 0x00	; 0
    8cd4:	20 e0       	ldi	r18, 0x00	; 0
    8cd6:	30 e0       	ldi	r19, 0x00	; 0
    8cd8:	f3 cf       	rjmp	.-26     	; 0x8cc0 <validate+0x3e>

00008cda <mem_cpy.part.0>:
    8cda:	fb 01       	movw	r30, r22
    8cdc:	48 0f       	add	r20, r24
    8cde:	59 1f       	adc	r21, r25
    8ce0:	21 91       	ld	r18, Z+
    8ce2:	dc 01       	movw	r26, r24
    8ce4:	2d 93       	st	X+, r18
    8ce6:	cd 01       	movw	r24, r26
    8ce8:	a4 17       	cp	r26, r20
    8cea:	b5 07       	cpc	r27, r21
    8cec:	c9 f7       	brne	.-14     	; 0x8ce0 <mem_cpy.part.0+0x6>
    8cee:	08 95       	ret

00008cf0 <put_utf>:
    8cf0:	0f 93       	push	r16
    8cf2:	1f 93       	push	r17
    8cf4:	fa 01       	movw	r30, r20
    8cf6:	60 38       	cpi	r22, 0x80	; 128
    8cf8:	71 05       	cpc	r23, r1
    8cfa:	81 05       	cpc	r24, r1
    8cfc:	91 05       	cpc	r25, r1
    8cfe:	30 f4       	brcc	.+12     	; 0x8d0c <put_utf+0x1c>
    8d00:	23 2b       	or	r18, r19
    8d02:	09 f4       	brne	.+2      	; 0x8d06 <put_utf+0x16>
    8d04:	9e c0       	rjmp	.+316    	; 0x8e42 <put_utf+0x152>
    8d06:	60 83       	st	Z, r22
    8d08:	81 e0       	ldi	r24, 0x01	; 1
    8d0a:	9c c0       	rjmp	.+312    	; 0x8e44 <put_utf+0x154>
    8d0c:	61 15       	cp	r22, r1
    8d0e:	48 e0       	ldi	r20, 0x08	; 8
    8d10:	74 07       	cpc	r23, r20
    8d12:	81 05       	cpc	r24, r1
    8d14:	91 05       	cpc	r25, r1
    8d16:	a0 f4       	brcc	.+40     	; 0x8d40 <put_utf+0x50>
    8d18:	22 30       	cpi	r18, 0x02	; 2
    8d1a:	31 05       	cpc	r19, r1
    8d1c:	08 f4       	brcc	.+2      	; 0x8d20 <put_utf+0x30>
    8d1e:	91 c0       	rjmp	.+290    	; 0x8e42 <put_utf+0x152>
    8d20:	8b 01       	movw	r16, r22
    8d22:	9c 01       	movw	r18, r24
    8d24:	76 e0       	ldi	r23, 0x06	; 6
    8d26:	36 95       	lsr	r19
    8d28:	27 95       	ror	r18
    8d2a:	17 95       	ror	r17
    8d2c:	07 95       	ror	r16
    8d2e:	7a 95       	dec	r23
    8d30:	d1 f7       	brne	.-12     	; 0x8d26 <put_utf+0x36>
    8d32:	00 6c       	ori	r16, 0xC0	; 192
    8d34:	00 83       	st	Z, r16
    8d36:	6f 73       	andi	r22, 0x3F	; 63
    8d38:	60 68       	ori	r22, 0x80	; 128
    8d3a:	61 83       	std	Z+1, r22	; 0x01
    8d3c:	82 e0       	ldi	r24, 0x02	; 2
    8d3e:	82 c0       	rjmp	.+260    	; 0x8e44 <put_utf+0x154>
    8d40:	61 15       	cp	r22, r1
    8d42:	71 05       	cpc	r23, r1
    8d44:	41 e0       	ldi	r20, 0x01	; 1
    8d46:	84 07       	cpc	r24, r20
    8d48:	91 05       	cpc	r25, r1
    8d4a:	58 f5       	brcc	.+86     	; 0x8da2 <put_utf+0xb2>
    8d4c:	23 30       	cpi	r18, 0x03	; 3
    8d4e:	31 05       	cpc	r19, r1
    8d50:	08 f4       	brcc	.+2      	; 0x8d54 <put_utf+0x64>
    8d52:	77 c0       	rjmp	.+238    	; 0x8e42 <put_utf+0x152>
    8d54:	8b 01       	movw	r16, r22
    8d56:	9c 01       	movw	r18, r24
    8d58:	18 5d       	subi	r17, 0xD8	; 216
    8d5a:	21 09       	sbc	r18, r1
    8d5c:	31 09       	sbc	r19, r1
    8d5e:	01 15       	cp	r16, r1
    8d60:	18 40       	sbci	r17, 0x08	; 8
    8d62:	21 05       	cpc	r18, r1
    8d64:	31 05       	cpc	r19, r1
    8d66:	08 f4       	brcc	.+2      	; 0x8d6a <put_utf+0x7a>
    8d68:	6c c0       	rjmp	.+216    	; 0x8e42 <put_utf+0x152>
    8d6a:	8b 01       	movw	r16, r22
    8d6c:	9c 01       	movw	r18, r24
    8d6e:	4c e0       	ldi	r20, 0x0C	; 12
    8d70:	36 95       	lsr	r19
    8d72:	27 95       	ror	r18
    8d74:	17 95       	ror	r17
    8d76:	07 95       	ror	r16
    8d78:	4a 95       	dec	r20
    8d7a:	d1 f7       	brne	.-12     	; 0x8d70 <put_utf+0x80>
    8d7c:	00 6e       	ori	r16, 0xE0	; 224
    8d7e:	00 83       	st	Z, r16
    8d80:	8b 01       	movw	r16, r22
    8d82:	9c 01       	movw	r18, r24
    8d84:	56 e0       	ldi	r21, 0x06	; 6
    8d86:	36 95       	lsr	r19
    8d88:	27 95       	ror	r18
    8d8a:	17 95       	ror	r17
    8d8c:	07 95       	ror	r16
    8d8e:	5a 95       	dec	r21
    8d90:	d1 f7       	brne	.-12     	; 0x8d86 <put_utf+0x96>
    8d92:	0f 73       	andi	r16, 0x3F	; 63
    8d94:	00 68       	ori	r16, 0x80	; 128
    8d96:	01 83       	std	Z+1, r16	; 0x01
    8d98:	6f 73       	andi	r22, 0x3F	; 63
    8d9a:	60 68       	ori	r22, 0x80	; 128
    8d9c:	62 83       	std	Z+2, r22	; 0x02
    8d9e:	83 e0       	ldi	r24, 0x03	; 3
    8da0:	51 c0       	rjmp	.+162    	; 0x8e44 <put_utf+0x154>
    8da2:	24 30       	cpi	r18, 0x04	; 4
    8da4:	31 05       	cpc	r19, r1
    8da6:	08 f4       	brcc	.+2      	; 0x8daa <put_utf+0xba>
    8da8:	4c c0       	rjmp	.+152    	; 0x8e42 <put_utf+0x152>
    8daa:	8b 01       	movw	r16, r22
    8dac:	9c 01       	movw	r18, r24
    8dae:	00 27       	eor	r16, r16
    8db0:	11 27       	eor	r17, r17
    8db2:	38 5d       	subi	r19, 0xD8	; 216
    8db4:	b6 e0       	ldi	r27, 0x06	; 6
    8db6:	36 95       	lsr	r19
    8db8:	27 95       	ror	r18
    8dba:	17 95       	ror	r17
    8dbc:	07 95       	ror	r16
    8dbe:	ba 95       	dec	r27
    8dc0:	d1 f7       	brne	.-12     	; 0x8db6 <put_utf+0xc6>
    8dc2:	01 15       	cp	r16, r1
    8dc4:	11 05       	cpc	r17, r1
    8dc6:	40 e1       	ldi	r20, 0x10	; 16
    8dc8:	24 07       	cpc	r18, r20
    8dca:	31 05       	cpc	r19, r1
    8dcc:	d0 f5       	brcc	.+116    	; 0x8e42 <put_utf+0x152>
    8dce:	dc 01       	movw	r26, r24
    8dd0:	cb 01       	movw	r24, r22
    8dd2:	aa 27       	eor	r26, r26
    8dd4:	bb 27       	eor	r27, r27
    8dd6:	9c 5d       	subi	r25, 0xDC	; 220
    8dd8:	a1 09       	sbc	r26, r1
    8dda:	b1 09       	sbc	r27, r1
    8ddc:	81 15       	cp	r24, r1
    8dde:	44 e0       	ldi	r20, 0x04	; 4
    8de0:	94 07       	cpc	r25, r20
    8de2:	a1 05       	cpc	r26, r1
    8de4:	b1 05       	cpc	r27, r1
    8de6:	68 f5       	brcc	.+90     	; 0x8e42 <put_utf+0x152>
    8de8:	80 2b       	or	r24, r16
    8dea:	91 2b       	or	r25, r17
    8dec:	a2 2b       	or	r26, r18
    8dee:	b3 2b       	or	r27, r19
    8df0:	11 96       	adiw	r26, 0x01	; 1
    8df2:	ac 01       	movw	r20, r24
    8df4:	bd 01       	movw	r22, r26
    8df6:	22 e1       	ldi	r18, 0x12	; 18
    8df8:	76 95       	lsr	r23
    8dfa:	67 95       	ror	r22
    8dfc:	57 95       	ror	r21
    8dfe:	47 95       	ror	r20
    8e00:	2a 95       	dec	r18
    8e02:	d1 f7       	brne	.-12     	; 0x8df8 <put_utf+0x108>
    8e04:	40 6f       	ori	r20, 0xF0	; 240
    8e06:	40 83       	st	Z, r20
    8e08:	ac 01       	movw	r20, r24
    8e0a:	bd 01       	movw	r22, r26
    8e0c:	3c e0       	ldi	r19, 0x0C	; 12
    8e0e:	76 95       	lsr	r23
    8e10:	67 95       	ror	r22
    8e12:	57 95       	ror	r21
    8e14:	47 95       	ror	r20
    8e16:	3a 95       	dec	r19
    8e18:	d1 f7       	brne	.-12     	; 0x8e0e <put_utf+0x11e>
    8e1a:	4f 73       	andi	r20, 0x3F	; 63
    8e1c:	40 68       	ori	r20, 0x80	; 128
    8e1e:	41 83       	std	Z+1, r20	; 0x01
    8e20:	ac 01       	movw	r20, r24
    8e22:	bd 01       	movw	r22, r26
    8e24:	a6 e0       	ldi	r26, 0x06	; 6
    8e26:	76 95       	lsr	r23
    8e28:	67 95       	ror	r22
    8e2a:	57 95       	ror	r21
    8e2c:	47 95       	ror	r20
    8e2e:	aa 95       	dec	r26
    8e30:	d1 f7       	brne	.-12     	; 0x8e26 <put_utf+0x136>
    8e32:	4f 73       	andi	r20, 0x3F	; 63
    8e34:	40 68       	ori	r20, 0x80	; 128
    8e36:	42 83       	std	Z+2, r20	; 0x02
    8e38:	8f 73       	andi	r24, 0x3F	; 63
    8e3a:	80 68       	ori	r24, 0x80	; 128
    8e3c:	83 83       	std	Z+3, r24	; 0x03
    8e3e:	84 e0       	ldi	r24, 0x04	; 4
    8e40:	01 c0       	rjmp	.+2      	; 0x8e44 <put_utf+0x154>
    8e42:	80 e0       	ldi	r24, 0x00	; 0
    8e44:	1f 91       	pop	r17
    8e46:	0f 91       	pop	r16
    8e48:	08 95       	ret

00008e4a <get_fileinfo>:
    8e4a:	a0 e0       	ldi	r26, 0x00	; 0
    8e4c:	b0 e0       	ldi	r27, 0x00	; 0
    8e4e:	eb e2       	ldi	r30, 0x2B	; 43
    8e50:	f7 e4       	ldi	r31, 0x47	; 71
    8e52:	0c 94 d8 e0 	jmp	0x1c1b0	; 0x1c1b0 <__prologue_saves__>
    8e56:	fc 01       	movw	r30, r24
    8e58:	60 80       	ld	r6, Z
    8e5a:	71 80       	ldd	r7, Z+1	; 0x01
    8e5c:	fb 01       	movw	r30, r22
    8e5e:	16 8a       	std	Z+22, r1	; 0x16
    8e60:	fc 01       	movw	r30, r24
    8e62:	06 89       	ldd	r16, Z+22	; 0x16
    8e64:	17 89       	ldd	r17, Z+23	; 0x17
    8e66:	20 8d       	ldd	r18, Z+24	; 0x18
    8e68:	31 8d       	ldd	r19, Z+25	; 0x19
    8e6a:	01 15       	cp	r16, r1
    8e6c:	11 05       	cpc	r17, r1
    8e6e:	21 05       	cpc	r18, r1
    8e70:	31 05       	cpc	r19, r1
    8e72:	09 f4       	brne	.+2      	; 0x8e76 <get_fileinfo+0x2c>
    8e74:	f5 c0       	rjmp	.+490    	; 0x9060 <get_fileinfo+0x216>
    8e76:	eb 01       	movw	r28, r22
    8e78:	8c 01       	movw	r16, r24
    8e7a:	80 a5       	ldd	r24, Z+40	; 0x28
    8e7c:	91 a5       	ldd	r25, Z+41	; 0x29
    8e7e:	a2 a5       	ldd	r26, Z+42	; 0x2a
    8e80:	b3 a5       	ldd	r27, Z+43	; 0x2b
    8e82:	8f 3f       	cpi	r24, 0xFF	; 255
    8e84:	9f 4f       	sbci	r25, 0xFF	; 255
    8e86:	af 4f       	sbci	r26, 0xFF	; 255
    8e88:	bf 4f       	sbci	r27, 0xFF	; 255
    8e8a:	09 f4       	brne	.+2      	; 0x8e8e <get_fileinfo+0x44>
    8e8c:	48 c0       	rjmp	.+144    	; 0x8f1e <get_fileinfo+0xd4>
    8e8e:	a1 2c       	mov	r10, r1
    8e90:	b1 2c       	mov	r11, r1
    8e92:	c1 2c       	mov	r12, r1
    8e94:	d1 2c       	mov	r13, r1
    8e96:	e1 2c       	mov	r14, r1
    8e98:	f1 2c       	mov	r15, r1
    8e9a:	88 24       	eor	r8, r8
    8e9c:	8a 94       	dec	r8
    8e9e:	91 2c       	mov	r9, r1
    8ea0:	f3 01       	movw	r30, r6
    8ea2:	83 85       	ldd	r24, Z+11	; 0x0b
    8ea4:	94 85       	ldd	r25, Z+12	; 0x0c
    8ea6:	fc 01       	movw	r30, r24
    8ea8:	ea 0d       	add	r30, r10
    8eaa:	fb 1d       	adc	r31, r11
    8eac:	80 81       	ld	r24, Z
    8eae:	91 81       	ldd	r25, Z+1	; 0x01
    8eb0:	00 97       	sbiw	r24, 0x00	; 0
    8eb2:	69 f1       	breq	.+90     	; 0x8f0e <get_fileinfo+0xc4>
    8eb4:	c1 14       	cp	r12, r1
    8eb6:	d1 04       	cpc	r13, r1
    8eb8:	29 f4       	brne	.+10     	; 0x8ec4 <get_fileinfo+0x7a>
    8eba:	9c 01       	movw	r18, r24
    8ebc:	38 5d       	subi	r19, 0xD8	; 216
    8ebe:	21 15       	cp	r18, r1
    8ec0:	38 40       	sbci	r19, 0x08	; 8
    8ec2:	f0 f0       	brcs	.+60     	; 0x8f00 <get_fileinfo+0xb6>
    8ec4:	a7 01       	movw	r20, r14
    8ec6:	4a 5e       	subi	r20, 0xEA	; 234
    8ec8:	5f 4f       	sbci	r21, 0xFF	; 255
    8eca:	4c 0f       	add	r20, r28
    8ecc:	5d 1f       	adc	r21, r29
    8ece:	16 01       	movw	r2, r12
    8ed0:	41 2c       	mov	r4, r1
    8ed2:	51 2c       	mov	r5, r1
    8ed4:	21 01       	movw	r4, r2
    8ed6:	33 24       	eor	r3, r3
    8ed8:	22 24       	eor	r2, r2
    8eda:	a0 e0       	ldi	r26, 0x00	; 0
    8edc:	b0 e0       	ldi	r27, 0x00	; 0
    8ede:	bc 01       	movw	r22, r24
    8ee0:	cd 01       	movw	r24, r26
    8ee2:	62 29       	or	r22, r2
    8ee4:	73 29       	or	r23, r3
    8ee6:	84 29       	or	r24, r4
    8ee8:	95 29       	or	r25, r5
    8eea:	94 01       	movw	r18, r8
    8eec:	2e 19       	sub	r18, r14
    8eee:	3f 09       	sbc	r19, r15
    8ef0:	ff de       	rcall	.-514    	; 0x8cf0 <put_utf>
    8ef2:	90 e0       	ldi	r25, 0x00	; 0
    8ef4:	00 97       	sbiw	r24, 0x00	; 0
    8ef6:	49 f0       	breq	.+18     	; 0x8f0a <get_fileinfo+0xc0>
    8ef8:	e8 0e       	add	r14, r24
    8efa:	f9 1e       	adc	r15, r25
    8efc:	80 e0       	ldi	r24, 0x00	; 0
    8efe:	90 e0       	ldi	r25, 0x00	; 0
    8f00:	e2 e0       	ldi	r30, 0x02	; 2
    8f02:	ae 0e       	add	r10, r30
    8f04:	b1 1c       	adc	r11, r1
    8f06:	6c 01       	movw	r12, r24
    8f08:	cb cf       	rjmp	.-106    	; 0x8ea0 <get_fileinfo+0x56>
    8f0a:	e1 2c       	mov	r14, r1
    8f0c:	f1 2c       	mov	r15, r1
    8f0e:	cd 28       	or	r12, r13
    8f10:	11 f0       	breq	.+4      	; 0x8f16 <get_fileinfo+0xcc>
    8f12:	e1 2c       	mov	r14, r1
    8f14:	f1 2c       	mov	r15, r1
    8f16:	fe 01       	movw	r30, r28
    8f18:	ee 0d       	add	r30, r14
    8f1a:	ff 1d       	adc	r31, r15
    8f1c:	16 8a       	std	Z+22, r1	; 0x16
    8f1e:	e1 2c       	mov	r14, r1
    8f20:	f1 2c       	mov	r15, r1
    8f22:	80 e0       	ldi	r24, 0x00	; 0
    8f24:	90 e0       	ldi	r25, 0x00	; 0
    8f26:	2c e0       	ldi	r18, 0x0C	; 12
    8f28:	a2 2e       	mov	r10, r18
    8f2a:	b1 2c       	mov	r11, r1
    8f2c:	3e e2       	ldi	r19, 0x2E	; 46
    8f2e:	93 2e       	mov	r9, r19
    8f30:	6c 01       	movw	r12, r24
    8f32:	ff ef       	ldi	r31, 0xFF	; 255
    8f34:	cf 1a       	sub	r12, r31
    8f36:	df 0a       	sbc	r13, r31
    8f38:	f8 01       	movw	r30, r16
    8f3a:	22 8d       	ldd	r18, Z+26	; 0x1a
    8f3c:	33 8d       	ldd	r19, Z+27	; 0x1b
    8f3e:	f9 01       	movw	r30, r18
    8f40:	e8 0f       	add	r30, r24
    8f42:	f9 1f       	adc	r31, r25
    8f44:	80 81       	ld	r24, Z
    8f46:	90 e0       	ldi	r25, 0x00	; 0
    8f48:	80 32       	cpi	r24, 0x20	; 32
    8f4a:	91 05       	cpc	r25, r1
    8f4c:	71 f1       	breq	.+92     	; 0x8faa <get_fileinfo+0x160>
    8f4e:	85 30       	cpi	r24, 0x05	; 5
    8f50:	91 05       	cpc	r25, r1
    8f52:	11 f4       	brne	.+4      	; 0x8f58 <get_fileinfo+0x10e>
    8f54:	85 ee       	ldi	r24, 0xE5	; 229
    8f56:	90 e0       	ldi	r25, 0x00	; 0
    8f58:	f9 e0       	ldi	r31, 0x09	; 9
    8f5a:	cf 16       	cp	r12, r31
    8f5c:	d1 04       	cpc	r13, r1
    8f5e:	59 f4       	brne	.+22     	; 0x8f76 <get_fileinfo+0x12c>
    8f60:	2c e0       	ldi	r18, 0x0C	; 12
    8f62:	e2 16       	cp	r14, r18
    8f64:	f1 04       	cpc	r15, r1
    8f66:	38 f4       	brcc	.+14     	; 0x8f76 <get_fileinfo+0x12c>
    8f68:	fe 01       	movw	r30, r28
    8f6a:	ee 0d       	add	r30, r14
    8f6c:	ff 1d       	adc	r31, r15
    8f6e:	91 86       	std	Z+9, r9	; 0x09
    8f70:	f7 01       	movw	r30, r14
    8f72:	31 96       	adiw	r30, 0x01	; 1
    8f74:	7f 01       	movw	r14, r30
    8f76:	65 eb       	ldi	r22, 0xB5	; 181
    8f78:	71 e0       	ldi	r23, 0x01	; 1
    8f7a:	0e 94 8a 67 	call	0xcf14	; 0xcf14 <ff_oem2uni>
    8f7e:	00 97       	sbiw	r24, 0x00	; 0
    8f80:	19 f4       	brne	.+6      	; 0x8f88 <get_fileinfo+0x13e>
    8f82:	e1 2c       	mov	r14, r1
    8f84:	f1 2c       	mov	r15, r1
    8f86:	16 c0       	rjmp	.+44     	; 0x8fb4 <get_fileinfo+0x16a>
    8f88:	a7 01       	movw	r20, r14
    8f8a:	47 5f       	subi	r20, 0xF7	; 247
    8f8c:	5f 4f       	sbci	r21, 0xFF	; 255
    8f8e:	4c 0f       	add	r20, r28
    8f90:	5d 1f       	adc	r21, r29
    8f92:	bc 01       	movw	r22, r24
    8f94:	80 e0       	ldi	r24, 0x00	; 0
    8f96:	90 e0       	ldi	r25, 0x00	; 0
    8f98:	95 01       	movw	r18, r10
    8f9a:	2e 19       	sub	r18, r14
    8f9c:	3f 09       	sbc	r19, r15
    8f9e:	a8 de       	rcall	.-688    	; 0x8cf0 <put_utf>
    8fa0:	90 e0       	ldi	r25, 0x00	; 0
    8fa2:	00 97       	sbiw	r24, 0x00	; 0
    8fa4:	71 f3       	breq	.-36     	; 0x8f82 <get_fileinfo+0x138>
    8fa6:	e8 0e       	add	r14, r24
    8fa8:	f9 1e       	adc	r15, r25
    8faa:	c6 01       	movw	r24, r12
    8fac:	8b 30       	cpi	r24, 0x0B	; 11
    8fae:	91 05       	cpc	r25, r1
    8fb0:	09 f0       	breq	.+2      	; 0x8fb4 <get_fileinfo+0x16a>
    8fb2:	be cf       	rjmp	.-132    	; 0x8f30 <get_fileinfo+0xe6>
    8fb4:	fe 01       	movw	r30, r28
    8fb6:	ee 0d       	add	r30, r14
    8fb8:	ff 1d       	adc	r31, r15
    8fba:	11 86       	std	Z+9, r1	; 0x09
    8fbc:	8e 89       	ldd	r24, Y+22	; 0x16
    8fbe:	81 11       	cpse	r24, r1
    8fc0:	36 c0       	rjmp	.+108    	; 0x902e <get_fileinfo+0x1e4>
    8fc2:	e1 14       	cp	r14, r1
    8fc4:	f1 04       	cpc	r15, r1
    8fc6:	31 f0       	breq	.+12     	; 0x8fd4 <get_fileinfo+0x18a>
    8fc8:	de 01       	movw	r26, r28
    8fca:	19 96       	adiw	r26, 0x09	; 9
    8fcc:	58 e0       	ldi	r21, 0x08	; 8
    8fce:	20 e0       	ldi	r18, 0x00	; 0
    8fd0:	30 e0       	ldi	r19, 0x00	; 0
    8fd2:	14 c0       	rjmp	.+40     	; 0x8ffc <get_fileinfo+0x1b2>
    8fd4:	8f e3       	ldi	r24, 0x3F	; 63
    8fd6:	8e 8b       	std	Y+22, r24	; 0x16
    8fd8:	21 e0       	ldi	r18, 0x01	; 1
    8fda:	30 e0       	ldi	r19, 0x00	; 0
    8fdc:	1c c0       	rjmp	.+56     	; 0x9016 <get_fileinfo+0x1cc>
    8fde:	90 e0       	ldi	r25, 0x00	; 0
    8fe0:	8e 32       	cpi	r24, 0x2E	; 46
    8fe2:	91 05       	cpc	r25, r1
    8fe4:	09 f4       	brne	.+2      	; 0x8fe8 <get_fileinfo+0x19e>
    8fe6:	50 e1       	ldi	r21, 0x10	; 16
    8fe8:	bc 01       	movw	r22, r24
    8fea:	61 54       	subi	r22, 0x41	; 65
    8fec:	71 09       	sbc	r23, r1
    8fee:	6a 31       	cpi	r22, 0x1A	; 26
    8ff0:	71 05       	cpc	r23, r1
    8ff2:	40 f0       	brcs	.+16     	; 0x9004 <get_fileinfo+0x1ba>
    8ff4:	fd 01       	movw	r30, r26
    8ff6:	84 87       	std	Z+12, r24	; 0x0c
    8ff8:	2f 5f       	subi	r18, 0xFF	; 255
    8ffa:	3f 4f       	sbci	r19, 0xFF	; 255
    8ffc:	8d 91       	ld	r24, X+
    8ffe:	81 11       	cpse	r24, r1
    9000:	ee cf       	rjmp	.-36     	; 0x8fde <get_fileinfo+0x194>
    9002:	09 c0       	rjmp	.+18     	; 0x9016 <get_fileinfo+0x1cc>
    9004:	f8 01       	movw	r30, r16
    9006:	62 8d       	ldd	r22, Z+26	; 0x1a
    9008:	73 8d       	ldd	r23, Z+27	; 0x1b
    900a:	fb 01       	movw	r30, r22
    900c:	44 85       	ldd	r20, Z+12	; 0x0c
    900e:	45 23       	and	r20, r21
    9010:	89 f3       	breq	.-30     	; 0x8ff4 <get_fileinfo+0x1aa>
    9012:	80 96       	adiw	r24, 0x20	; 32
    9014:	ef cf       	rjmp	.-34     	; 0x8ff4 <get_fileinfo+0x1aa>
    9016:	fe 01       	movw	r30, r28
    9018:	e2 0f       	add	r30, r18
    901a:	f3 1f       	adc	r31, r19
    901c:	16 8a       	std	Z+22, r1	; 0x16
    901e:	f8 01       	movw	r30, r16
    9020:	82 8d       	ldd	r24, Z+26	; 0x1a
    9022:	93 8d       	ldd	r25, Z+27	; 0x1b
    9024:	fc 01       	movw	r30, r24
    9026:	84 85       	ldd	r24, Z+12	; 0x0c
    9028:	81 11       	cpse	r24, r1
    902a:	01 c0       	rjmp	.+2      	; 0x902e <get_fileinfo+0x1e4>
    902c:	19 86       	std	Y+9, r1	; 0x09
    902e:	f8 01       	movw	r30, r16
    9030:	82 8d       	ldd	r24, Z+26	; 0x1a
    9032:	93 8d       	ldd	r25, Z+27	; 0x1b
    9034:	fc 01       	movw	r30, r24
    9036:	83 85       	ldd	r24, Z+11	; 0x0b
    9038:	88 87       	std	Y+8, r24	; 0x08
    903a:	f8 01       	movw	r30, r16
    903c:	02 8d       	ldd	r16, Z+26	; 0x1a
    903e:	13 8d       	ldd	r17, Z+27	; 0x1b
    9040:	c8 01       	movw	r24, r16
    9042:	4c 96       	adiw	r24, 0x1c	; 28
    9044:	c6 dc       	rcall	.-1652   	; 0x89d2 <ld_dword>
    9046:	68 83       	st	Y, r22
    9048:	79 83       	std	Y+1, r23	; 0x01
    904a:	8a 83       	std	Y+2, r24	; 0x02
    904c:	9b 83       	std	Y+3, r25	; 0x03
    904e:	f8 01       	movw	r30, r16
    9050:	86 89       	ldd	r24, Z+22	; 0x16
    9052:	97 89       	ldd	r25, Z+23	; 0x17
    9054:	9f 83       	std	Y+7, r25	; 0x07
    9056:	8e 83       	std	Y+6, r24	; 0x06
    9058:	80 8d       	ldd	r24, Z+24	; 0x18
    905a:	91 8d       	ldd	r25, Z+25	; 0x19
    905c:	9d 83       	std	Y+5, r25	; 0x05
    905e:	8c 83       	std	Y+4, r24	; 0x04
    9060:	cd b7       	in	r28, 0x3d	; 61
    9062:	de b7       	in	r29, 0x3e	; 62
    9064:	e2 e1       	ldi	r30, 0x12	; 18
    9066:	0c 94 f4 e0 	jmp	0x1c1e8	; 0x1c1e8 <__epilogue_restores__>

0000906a <ld_clust.isra.4>:
    906a:	fb 01       	movw	r30, r22
    906c:	42 8d       	ldd	r20, Z+26	; 0x1a
    906e:	53 8d       	ldd	r21, Z+27	; 0x1b
    9070:	60 e0       	ldi	r22, 0x00	; 0
    9072:	70 e0       	ldi	r23, 0x00	; 0
    9074:	83 30       	cpi	r24, 0x03	; 3
    9076:	59 f4       	brne	.+22     	; 0x908e <ld_clust.isra.4+0x24>
    9078:	84 89       	ldd	r24, Z+20	; 0x14
    907a:	95 89       	ldd	r25, Z+21	; 0x15
    907c:	a0 e0       	ldi	r26, 0x00	; 0
    907e:	b0 e0       	ldi	r27, 0x00	; 0
    9080:	dc 01       	movw	r26, r24
    9082:	99 27       	eor	r25, r25
    9084:	88 27       	eor	r24, r24
    9086:	48 2b       	or	r20, r24
    9088:	59 2b       	or	r21, r25
    908a:	6a 2b       	or	r22, r26
    908c:	7b 2b       	or	r23, r27
    908e:	cb 01       	movw	r24, r22
    9090:	ba 01       	movw	r22, r20
    9092:	08 95       	ret

00009094 <st_clust.isra.5>:
    9094:	fb 01       	movw	r30, r22
    9096:	22 8f       	std	Z+26, r18	; 0x1a
    9098:	33 8f       	std	Z+27, r19	; 0x1b
    909a:	dc 01       	movw	r26, r24
    909c:	8c 91       	ld	r24, X
    909e:	83 30       	cpi	r24, 0x03	; 3
    90a0:	29 f4       	brne	.+10     	; 0x90ac <st_clust.isra.5+0x18>
    90a2:	ca 01       	movw	r24, r20
    90a4:	aa 27       	eor	r26, r26
    90a6:	bb 27       	eor	r27, r27
    90a8:	84 8b       	std	Z+20, r24	; 0x14
    90aa:	95 8b       	std	Z+21, r25	; 0x15
    90ac:	08 95       	ret

000090ae <sync_window.part.6>:
    90ae:	8f 92       	push	r8
    90b0:	9f 92       	push	r9
    90b2:	af 92       	push	r10
    90b4:	bf 92       	push	r11
    90b6:	ef 92       	push	r14
    90b8:	ff 92       	push	r15
    90ba:	0f 93       	push	r16
    90bc:	1f 93       	push	r17
    90be:	cf 93       	push	r28
    90c0:	df 93       	push	r29
    90c2:	ec 01       	movw	r28, r24
    90c4:	7c 01       	movw	r14, r24
    90c6:	45 e3       	ldi	r20, 0x35	; 53
    90c8:	e4 0e       	add	r14, r20
    90ca:	f1 1c       	adc	r15, r1
    90cc:	29 a9       	ldd	r18, Y+49	; 0x31
    90ce:	3a a9       	ldd	r19, Y+50	; 0x32
    90d0:	4b a9       	ldd	r20, Y+51	; 0x33
    90d2:	5c a9       	ldd	r21, Y+52	; 0x34
    90d4:	01 e0       	ldi	r16, 0x01	; 1
    90d6:	10 e0       	ldi	r17, 0x00	; 0
    90d8:	b7 01       	movw	r22, r14
    90da:	89 81       	ldd	r24, Y+1	; 0x01
    90dc:	0e 94 1d 68 	call	0xd03a	; 0xd03a <disk_write>
    90e0:	89 2b       	or	r24, r25
    90e2:	41 f5       	brne	.+80     	; 0x9134 <sync_window.part.6+0x86>
    90e4:	1b 82       	std	Y+3, r1	; 0x03
    90e6:	09 a9       	ldd	r16, Y+49	; 0x31
    90e8:	1a a9       	ldd	r17, Y+50	; 0x32
    90ea:	2b a9       	ldd	r18, Y+51	; 0x33
    90ec:	3c a9       	ldd	r19, Y+52	; 0x34
    90ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    90f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    90f2:	af 8d       	ldd	r26, Y+31	; 0x1f
    90f4:	b8 a1       	ldd	r27, Y+32	; 0x20
    90f6:	8d a0       	ldd	r8, Y+37	; 0x25
    90f8:	9e a0       	ldd	r9, Y+38	; 0x26
    90fa:	af a0       	ldd	r10, Y+39	; 0x27
    90fc:	b8 a4       	ldd	r11, Y+40	; 0x28
    90fe:	b9 01       	movw	r22, r18
    9100:	a8 01       	movw	r20, r16
    9102:	48 19       	sub	r20, r8
    9104:	59 09       	sbc	r21, r9
    9106:	6a 09       	sbc	r22, r10
    9108:	7b 09       	sbc	r23, r11
    910a:	48 17       	cp	r20, r24
    910c:	59 07       	cpc	r21, r25
    910e:	6a 07       	cpc	r22, r26
    9110:	7b 07       	cpc	r23, r27
    9112:	98 f4       	brcc	.+38     	; 0x913a <sync_window.part.6+0x8c>
    9114:	6a 81       	ldd	r22, Y+2	; 0x02
    9116:	62 30       	cpi	r22, 0x02	; 2
    9118:	81 f4       	brne	.+32     	; 0x913a <sync_window.part.6+0x8c>
    911a:	a9 01       	movw	r20, r18
    911c:	98 01       	movw	r18, r16
    911e:	28 0f       	add	r18, r24
    9120:	39 1f       	adc	r19, r25
    9122:	4a 1f       	adc	r20, r26
    9124:	5b 1f       	adc	r21, r27
    9126:	01 e0       	ldi	r16, 0x01	; 1
    9128:	10 e0       	ldi	r17, 0x00	; 0
    912a:	b7 01       	movw	r22, r14
    912c:	89 81       	ldd	r24, Y+1	; 0x01
    912e:	0e 94 1d 68 	call	0xd03a	; 0xd03a <disk_write>
    9132:	03 c0       	rjmp	.+6      	; 0x913a <sync_window.part.6+0x8c>
    9134:	81 e0       	ldi	r24, 0x01	; 1
    9136:	90 e0       	ldi	r25, 0x00	; 0
    9138:	02 c0       	rjmp	.+4      	; 0x913e <sync_window.part.6+0x90>
    913a:	80 e0       	ldi	r24, 0x00	; 0
    913c:	90 e0       	ldi	r25, 0x00	; 0
    913e:	df 91       	pop	r29
    9140:	cf 91       	pop	r28
    9142:	1f 91       	pop	r17
    9144:	0f 91       	pop	r16
    9146:	ff 90       	pop	r15
    9148:	ef 90       	pop	r14
    914a:	bf 90       	pop	r11
    914c:	af 90       	pop	r10
    914e:	9f 90       	pop	r9
    9150:	8f 90       	pop	r8
    9152:	08 95       	ret

00009154 <sync_fs>:
    9154:	ef 92       	push	r14
    9156:	ff 92       	push	r15
    9158:	0f 93       	push	r16
    915a:	1f 93       	push	r17
    915c:	cf 93       	push	r28
    915e:	df 93       	push	r29
    9160:	ec 01       	movw	r28, r24
    9162:	8b 81       	ldd	r24, Y+3	; 0x03
    9164:	81 11       	cpse	r24, r1
    9166:	05 c0       	rjmp	.+10     	; 0x9172 <sync_fs+0x1e>
    9168:	88 81       	ld	r24, Y
    916a:	83 30       	cpi	r24, 0x03	; 3
    916c:	09 f0       	breq	.+2      	; 0x9170 <sync_fs+0x1c>
    916e:	52 c0       	rjmp	.+164    	; 0x9214 <sync_fs+0xc0>
    9170:	06 c0       	rjmp	.+12     	; 0x917e <sync_fs+0x2a>
    9172:	ce 01       	movw	r24, r28
    9174:	9c df       	rcall	.-200    	; 0x90ae <sync_window.part.6>
    9176:	00 97       	sbiw	r24, 0x00	; 0
    9178:	09 f0       	breq	.+2      	; 0x917c <sync_fs+0x28>
    917a:	59 c0       	rjmp	.+178    	; 0x922e <sync_fs+0xda>
    917c:	f5 cf       	rjmp	.-22     	; 0x9168 <sync_fs+0x14>
    917e:	8c 81       	ldd	r24, Y+4	; 0x04
    9180:	81 30       	cpi	r24, 0x01	; 1
    9182:	09 f0       	breq	.+2      	; 0x9186 <sync_fs+0x32>
    9184:	47 c0       	rjmp	.+142    	; 0x9214 <sync_fs+0xc0>
    9186:	40 e0       	ldi	r20, 0x00	; 0
    9188:	52 e0       	ldi	r21, 0x02	; 2
    918a:	60 e0       	ldi	r22, 0x00	; 0
    918c:	70 e0       	ldi	r23, 0x00	; 0
    918e:	7e 01       	movw	r14, r28
    9190:	85 e3       	ldi	r24, 0x35	; 53
    9192:	e8 0e       	add	r14, r24
    9194:	f1 1c       	adc	r15, r1
    9196:	c7 01       	movw	r24, r14
    9198:	37 dc       	rcall	.-1938   	; 0x8a08 <mem_set>
    919a:	85 e5       	ldi	r24, 0x55	; 85
    919c:	fe 01       	movw	r30, r28
    919e:	ed 5c       	subi	r30, 0xCD	; 205
    91a0:	fd 4f       	sbci	r31, 0xFD	; 253
    91a2:	80 83       	st	Z, r24
    91a4:	8a ea       	ldi	r24, 0xAA	; 170
    91a6:	31 96       	adiw	r30, 0x01	; 1
    91a8:	80 83       	st	Z, r24
    91aa:	82 e5       	ldi	r24, 0x52	; 82
    91ac:	8d ab       	std	Y+53, r24	; 0x35
    91ae:	8e ab       	std	Y+54, r24	; 0x36
    91b0:	81 e6       	ldi	r24, 0x61	; 97
    91b2:	8f ab       	std	Y+55, r24	; 0x37
    91b4:	91 e4       	ldi	r25, 0x41	; 65
    91b6:	98 af       	std	Y+56, r25	; 0x38
    91b8:	22 e7       	ldi	r18, 0x72	; 114
    91ba:	7b 97       	sbiw	r30, 0x1b	; 27
    91bc:	20 83       	st	Z, r18
    91be:	31 96       	adiw	r30, 0x01	; 1
    91c0:	20 83       	st	Z, r18
    91c2:	31 96       	adiw	r30, 0x01	; 1
    91c4:	90 83       	st	Z, r25
    91c6:	31 96       	adiw	r30, 0x01	; 1
    91c8:	80 83       	st	Z, r24
    91ca:	49 89       	ldd	r20, Y+17	; 0x11
    91cc:	5a 89       	ldd	r21, Y+18	; 0x12
    91ce:	6b 89       	ldd	r22, Y+19	; 0x13
    91d0:	7c 89       	ldd	r23, Y+20	; 0x14
    91d2:	ce 01       	movw	r24, r28
    91d4:	83 5e       	subi	r24, 0xE3	; 227
    91d6:	9d 4f       	sbci	r25, 0xFD	; 253
    91d8:	11 dc       	rcall	.-2014   	; 0x89fc <st_dword>
    91da:	4d 85       	ldd	r20, Y+13	; 0x0d
    91dc:	5e 85       	ldd	r21, Y+14	; 0x0e
    91de:	6f 85       	ldd	r22, Y+15	; 0x0f
    91e0:	78 89       	ldd	r23, Y+16	; 0x10
    91e2:	ce 01       	movw	r24, r28
    91e4:	8f 5d       	subi	r24, 0xDF	; 223
    91e6:	9d 4f       	sbci	r25, 0xFD	; 253
    91e8:	09 dc       	rcall	.-2030   	; 0x89fc <st_dword>
    91ea:	89 a1       	ldd	r24, Y+33	; 0x21
    91ec:	9a a1       	ldd	r25, Y+34	; 0x22
    91ee:	ab a1       	ldd	r26, Y+35	; 0x23
    91f0:	bc a1       	ldd	r27, Y+36	; 0x24
    91f2:	9c 01       	movw	r18, r24
    91f4:	ad 01       	movw	r20, r26
    91f6:	2f 5f       	subi	r18, 0xFF	; 255
    91f8:	3f 4f       	sbci	r19, 0xFF	; 255
    91fa:	4f 4f       	sbci	r20, 0xFF	; 255
    91fc:	5f 4f       	sbci	r21, 0xFF	; 255
    91fe:	29 ab       	std	Y+49, r18	; 0x31
    9200:	3a ab       	std	Y+50, r19	; 0x32
    9202:	4b ab       	std	Y+51, r20	; 0x33
    9204:	5c ab       	std	Y+52, r21	; 0x34
    9206:	01 e0       	ldi	r16, 0x01	; 1
    9208:	10 e0       	ldi	r17, 0x00	; 0
    920a:	b7 01       	movw	r22, r14
    920c:	89 81       	ldd	r24, Y+1	; 0x01
    920e:	0e 94 1d 68 	call	0xd03a	; 0xd03a <disk_write>
    9212:	1c 82       	std	Y+4, r1	; 0x04
    9214:	40 e0       	ldi	r20, 0x00	; 0
    9216:	50 e0       	ldi	r21, 0x00	; 0
    9218:	60 e0       	ldi	r22, 0x00	; 0
    921a:	89 81       	ldd	r24, Y+1	; 0x01
    921c:	0e 94 2d 68 	call	0xd05a	; 0xd05a <disk_ioctl>
    9220:	31 e0       	ldi	r19, 0x01	; 1
    9222:	20 e0       	ldi	r18, 0x00	; 0
    9224:	89 2b       	or	r24, r25
    9226:	09 f4       	brne	.+2      	; 0x922a <sync_fs+0xd6>
    9228:	30 e0       	ldi	r19, 0x00	; 0
    922a:	83 2f       	mov	r24, r19
    922c:	92 2f       	mov	r25, r18
    922e:	cd b7       	in	r28, 0x3d	; 61
    9230:	de b7       	in	r29, 0x3e	; 62
    9232:	e6 e0       	ldi	r30, 0x06	; 6
    9234:	0c 94 00 e1 	jmp	0x1c200	; 0x1c200 <__epilogue_restores__+0x18>

00009238 <dir_clear>:
    9238:	4f 92       	push	r4
    923a:	5f 92       	push	r5
    923c:	6f 92       	push	r6
    923e:	7f 92       	push	r7
    9240:	af 92       	push	r10
    9242:	bf 92       	push	r11
    9244:	cf 92       	push	r12
    9246:	df 92       	push	r13
    9248:	ef 92       	push	r14
    924a:	ff 92       	push	r15
    924c:	0f 93       	push	r16
    924e:	1f 93       	push	r17
    9250:	cf 93       	push	r28
    9252:	df 93       	push	r29
    9254:	ec 01       	movw	r28, r24
    9256:	6a 01       	movw	r12, r20
    9258:	7b 01       	movw	r14, r22
    925a:	8b 81       	ldd	r24, Y+3	; 0x03
    925c:	81 11       	cpse	r24, r1
    925e:	28 c0       	rjmp	.+80     	; 0x92b0 <dir_clear+0x78>
    9260:	b7 01       	movw	r22, r14
    9262:	a6 01       	movw	r20, r12
    9264:	ce 01       	movw	r24, r28
    9266:	6e dc       	rcall	.-1828   	; 0x8b44 <clst2sect>
    9268:	2b 01       	movw	r4, r22
    926a:	3c 01       	movw	r6, r24
    926c:	69 ab       	std	Y+49, r22	; 0x31
    926e:	7a ab       	std	Y+50, r23	; 0x32
    9270:	8b ab       	std	Y+51, r24	; 0x33
    9272:	9c ab       	std	Y+52, r25	; 0x34
    9274:	5e 01       	movw	r10, r28
    9276:	25 e3       	ldi	r18, 0x35	; 53
    9278:	a2 0e       	add	r10, r18
    927a:	b1 1c       	adc	r11, r1
    927c:	40 e0       	ldi	r20, 0x00	; 0
    927e:	52 e0       	ldi	r21, 0x02	; 2
    9280:	60 e0       	ldi	r22, 0x00	; 0
    9282:	70 e0       	ldi	r23, 0x00	; 0
    9284:	c5 01       	movw	r24, r10
    9286:	c0 db       	rcall	.-2176   	; 0x8a08 <mem_set>
    9288:	09 85       	ldd	r16, Y+9	; 0x09
    928a:	1a 85       	ldd	r17, Y+10	; 0x0a
    928c:	c8 01       	movw	r24, r16
    928e:	a0 e0       	ldi	r26, 0x00	; 0
    9290:	b0 e0       	ldi	r27, 0x00	; 0
    9292:	39 e0       	ldi	r19, 0x09	; 9
    9294:	88 0f       	add	r24, r24
    9296:	99 1f       	adc	r25, r25
    9298:	aa 1f       	adc	r26, r26
    929a:	bb 1f       	adc	r27, r27
    929c:	3a 95       	dec	r19
    929e:	d1 f7       	brne	.-12     	; 0x9294 <dir_clear+0x5c>
    92a0:	81 15       	cp	r24, r1
    92a2:	90 48       	sbci	r25, 0x80	; 128
    92a4:	a1 05       	cpc	r26, r1
    92a6:	b1 05       	cpc	r27, r1
    92a8:	50 f0       	brcs	.+20     	; 0x92be <dir_clear+0x86>
    92aa:	00 e0       	ldi	r16, 0x00	; 0
    92ac:	10 e8       	ldi	r17, 0x80	; 128
    92ae:	14 c0       	rjmp	.+40     	; 0x92d8 <dir_clear+0xa0>
    92b0:	ce 01       	movw	r24, r28
    92b2:	fd de       	rcall	.-518    	; 0x90ae <sync_window.part.6>
    92b4:	89 2b       	or	r24, r25
    92b6:	a1 f2       	breq	.-88     	; 0x9260 <dir_clear+0x28>
    92b8:	81 e0       	ldi	r24, 0x01	; 1
    92ba:	90 e0       	ldi	r25, 0x00	; 0
    92bc:	56 c0       	rjmp	.+172    	; 0x936a <dir_clear+0x132>
    92be:	10 2f       	mov	r17, r16
    92c0:	00 27       	eor	r16, r16
    92c2:	11 0f       	add	r17, r17
    92c4:	09 c0       	rjmp	.+18     	; 0x92d8 <dir_clear+0xa0>
    92c6:	c8 01       	movw	r24, r16
    92c8:	0e 94 51 67 	call	0xcea2	; 0xcea2 <ff_memalloc>
    92cc:	6c 01       	movw	r12, r24
    92ce:	00 97       	sbiw	r24, 0x00	; 0
    92d0:	09 f0       	breq	.+2      	; 0x92d4 <dir_clear+0x9c>
    92d2:	40 c0       	rjmp	.+128    	; 0x9354 <dir_clear+0x11c>
    92d4:	16 95       	lsr	r17
    92d6:	07 95       	ror	r16
    92d8:	01 30       	cpi	r16, 0x01	; 1
    92da:	82 e0       	ldi	r24, 0x02	; 2
    92dc:	18 07       	cpc	r17, r24
    92de:	98 f7       	brcc	.-26     	; 0x92c6 <dir_clear+0x8e>
    92e0:	e1 2c       	mov	r14, r1
    92e2:	f1 2c       	mov	r15, r1
    92e4:	11 c0       	rjmp	.+34     	; 0x9308 <dir_clear+0xd0>
    92e6:	01 e0       	ldi	r16, 0x01	; 1
    92e8:	10 e0       	ldi	r17, 0x00	; 0
    92ea:	a3 01       	movw	r20, r6
    92ec:	92 01       	movw	r18, r4
    92ee:	2e 0d       	add	r18, r14
    92f0:	3f 1d       	adc	r19, r15
    92f2:	41 1d       	adc	r20, r1
    92f4:	51 1d       	adc	r21, r1
    92f6:	b5 01       	movw	r22, r10
    92f8:	89 81       	ldd	r24, Y+1	; 0x01
    92fa:	0e 94 1d 68 	call	0xd03a	; 0xd03a <disk_write>
    92fe:	89 2b       	or	r24, r25
    9300:	01 f5       	brne	.+64     	; 0x9342 <dir_clear+0x10a>
    9302:	2f ef       	ldi	r18, 0xFF	; 255
    9304:	e2 1a       	sub	r14, r18
    9306:	f2 0a       	sbc	r15, r18
    9308:	89 85       	ldd	r24, Y+9	; 0x09
    930a:	9a 85       	ldd	r25, Y+10	; 0x0a
    930c:	e8 16       	cp	r14, r24
    930e:	f9 06       	cpc	r15, r25
    9310:	50 f3       	brcs	.-44     	; 0x92e6 <dir_clear+0xae>
    9312:	17 c0       	rjmp	.+46     	; 0x9342 <dir_clear+0x10a>
    9314:	85 01       	movw	r16, r10
    9316:	a3 01       	movw	r20, r6
    9318:	92 01       	movw	r18, r4
    931a:	2e 0d       	add	r18, r14
    931c:	3f 1d       	adc	r19, r15
    931e:	41 1d       	adc	r20, r1
    9320:	51 1d       	adc	r21, r1
    9322:	b6 01       	movw	r22, r12
    9324:	89 81       	ldd	r24, Y+1	; 0x01
    9326:	0e 94 1d 68 	call	0xd03a	; 0xd03a <disk_write>
    932a:	89 2b       	or	r24, r25
    932c:	39 f4       	brne	.+14     	; 0x933c <dir_clear+0x104>
    932e:	ea 0c       	add	r14, r10
    9330:	fb 1c       	adc	r15, r11
    9332:	89 85       	ldd	r24, Y+9	; 0x09
    9334:	9a 85       	ldd	r25, Y+10	; 0x0a
    9336:	e8 16       	cp	r14, r24
    9338:	f9 06       	cpc	r15, r25
    933a:	60 f3       	brcs	.-40     	; 0x9314 <dir_clear+0xdc>
    933c:	c6 01       	movw	r24, r12
    933e:	0e 94 54 67 	call	0xcea8	; 0xcea8 <ff_memfree>
    9342:	81 e0       	ldi	r24, 0x01	; 1
    9344:	90 e0       	ldi	r25, 0x00	; 0
    9346:	29 85       	ldd	r18, Y+9	; 0x09
    9348:	3a 85       	ldd	r19, Y+10	; 0x0a
    934a:	2e 15       	cp	r18, r14
    934c:	3f 05       	cpc	r19, r15
    934e:	69 f4       	brne	.+26     	; 0x936a <dir_clear+0x132>
    9350:	80 e0       	ldi	r24, 0x00	; 0
    9352:	0b c0       	rjmp	.+22     	; 0x936a <dir_clear+0x132>
    9354:	a8 01       	movw	r20, r16
    9356:	60 e0       	ldi	r22, 0x00	; 0
    9358:	70 e0       	ldi	r23, 0x00	; 0
    935a:	56 db       	rcall	.-2388   	; 0x8a08 <mem_set>
    935c:	58 01       	movw	r10, r16
    935e:	ab 2c       	mov	r10, r11
    9360:	bb 24       	eor	r11, r11
    9362:	a6 94       	lsr	r10
    9364:	e1 2c       	mov	r14, r1
    9366:	f1 2c       	mov	r15, r1
    9368:	e4 cf       	rjmp	.-56     	; 0x9332 <dir_clear+0xfa>
    936a:	df 91       	pop	r29
    936c:	cf 91       	pop	r28
    936e:	1f 91       	pop	r17
    9370:	0f 91       	pop	r16
    9372:	ff 90       	pop	r15
    9374:	ef 90       	pop	r14
    9376:	df 90       	pop	r13
    9378:	cf 90       	pop	r12
    937a:	bf 90       	pop	r11
    937c:	af 90       	pop	r10
    937e:	7f 90       	pop	r7
    9380:	6f 90       	pop	r6
    9382:	5f 90       	pop	r5
    9384:	4f 90       	pop	r4
    9386:	08 95       	ret

00009388 <move_window>:
    9388:	a0 e0       	ldi	r26, 0x00	; 0
    938a:	b0 e0       	ldi	r27, 0x00	; 0
    938c:	ea ec       	ldi	r30, 0xCA	; 202
    938e:	f9 e4       	ldi	r31, 0x49	; 73
    9390:	0c 94 e2 e0 	jmp	0x1c1c4	; 0x1c1c4 <__prologue_saves__+0x14>
    9394:	ec 01       	movw	r28, r24
    9396:	6a 01       	movw	r12, r20
    9398:	7b 01       	movw	r14, r22
    939a:	89 a9       	ldd	r24, Y+49	; 0x31
    939c:	9a a9       	ldd	r25, Y+50	; 0x32
    939e:	ab a9       	ldd	r26, Y+51	; 0x33
    93a0:	bc a9       	ldd	r27, Y+52	; 0x34
    93a2:	84 17       	cp	r24, r20
    93a4:	95 07       	cpc	r25, r21
    93a6:	a6 07       	cpc	r26, r22
    93a8:	b7 07       	cpc	r27, r23
    93aa:	11 f1       	breq	.+68     	; 0x93f0 <move_window+0x68>
    93ac:	8b 81       	ldd	r24, Y+3	; 0x03
    93ae:	81 11       	cpse	r24, r1
    93b0:	13 c0       	rjmp	.+38     	; 0x93d8 <move_window+0x50>
    93b2:	01 e0       	ldi	r16, 0x01	; 1
    93b4:	10 e0       	ldi	r17, 0x00	; 0
    93b6:	a7 01       	movw	r20, r14
    93b8:	96 01       	movw	r18, r12
    93ba:	be 01       	movw	r22, r28
    93bc:	6b 5c       	subi	r22, 0xCB	; 203
    93be:	7f 4f       	sbci	r23, 0xFF	; 255
    93c0:	89 81       	ldd	r24, Y+1	; 0x01
    93c2:	0e 94 0d 68 	call	0xd01a	; 0xd01a <disk_read>
    93c6:	89 2b       	or	r24, r25
    93c8:	61 f0       	breq	.+24     	; 0x93e2 <move_window+0x5a>
    93ca:	81 e0       	ldi	r24, 0x01	; 1
    93cc:	90 e0       	ldi	r25, 0x00	; 0
    93ce:	cc 24       	eor	r12, r12
    93d0:	ca 94       	dec	r12
    93d2:	dc 2c       	mov	r13, r12
    93d4:	76 01       	movw	r14, r12
    93d6:	07 c0       	rjmp	.+14     	; 0x93e6 <move_window+0x5e>
    93d8:	ce 01       	movw	r24, r28
    93da:	69 de       	rcall	.-814    	; 0x90ae <sync_window.part.6>
    93dc:	00 97       	sbiw	r24, 0x00	; 0
    93de:	51 f4       	brne	.+20     	; 0x93f4 <move_window+0x6c>
    93e0:	e8 cf       	rjmp	.-48     	; 0x93b2 <move_window+0x2a>
    93e2:	80 e0       	ldi	r24, 0x00	; 0
    93e4:	90 e0       	ldi	r25, 0x00	; 0
    93e6:	c9 aa       	std	Y+49, r12	; 0x31
    93e8:	da aa       	std	Y+50, r13	; 0x32
    93ea:	eb aa       	std	Y+51, r14	; 0x33
    93ec:	fc aa       	std	Y+52, r15	; 0x34
    93ee:	02 c0       	rjmp	.+4      	; 0x93f4 <move_window+0x6c>
    93f0:	80 e0       	ldi	r24, 0x00	; 0
    93f2:	90 e0       	ldi	r25, 0x00	; 0
    93f4:	cd b7       	in	r28, 0x3d	; 61
    93f6:	de b7       	in	r29, 0x3e	; 62
    93f8:	e8 e0       	ldi	r30, 0x08	; 8
    93fa:	0c 94 fe e0 	jmp	0x1c1fc	; 0x1c1fc <__epilogue_restores__+0x14>

000093fe <check_fs>:
    93fe:	cf 93       	push	r28
    9400:	df 93       	push	r29
    9402:	ec 01       	movw	r28, r24
    9404:	1b 82       	std	Y+3, r1	; 0x03
    9406:	8f ef       	ldi	r24, 0xFF	; 255
    9408:	9f ef       	ldi	r25, 0xFF	; 255
    940a:	dc 01       	movw	r26, r24
    940c:	89 ab       	std	Y+49, r24	; 0x31
    940e:	9a ab       	std	Y+50, r25	; 0x32
    9410:	ab ab       	std	Y+51, r26	; 0x33
    9412:	bc ab       	std	Y+52, r27	; 0x34
    9414:	ce 01       	movw	r24, r28
    9416:	b8 df       	rcall	.-144    	; 0x9388 <move_window>
    9418:	89 2b       	or	r24, r25
    941a:	19 f5       	brne	.+70     	; 0x9462 <check_fs+0x64>
    941c:	fe 01       	movw	r30, r28
    941e:	ed 5c       	subi	r30, 0xCD	; 205
    9420:	fd 4f       	sbci	r31, 0xFD	; 253
    9422:	80 81       	ld	r24, Z
    9424:	91 81       	ldd	r25, Z+1	; 0x01
    9426:	85 35       	cpi	r24, 0x55	; 85
    9428:	9a 4a       	sbci	r25, 0xAA	; 170
    942a:	f1 f4       	brne	.+60     	; 0x9468 <check_fs+0x6a>
    942c:	8d a9       	ldd	r24, Y+53	; 0x35
    942e:	8b 3e       	cpi	r24, 0xEB	; 235
    9430:	19 f0       	breq	.+6      	; 0x9438 <check_fs+0x3a>
    9432:	88 5e       	subi	r24, 0xE8	; 232
    9434:	82 30       	cpi	r24, 0x02	; 2
    9436:	f0 f4       	brcc	.+60     	; 0x9474 <check_fs+0x76>
    9438:	43 e0       	ldi	r20, 0x03	; 3
    943a:	50 e0       	ldi	r21, 0x00	; 0
    943c:	66 ec       	ldi	r22, 0xC6	; 198
    943e:	78 e0       	ldi	r23, 0x08	; 8
    9440:	ce 01       	movw	r24, r28
    9442:	85 59       	subi	r24, 0x95	; 149
    9444:	9f 4f       	sbci	r25, 0xFF	; 255
    9446:	e9 da       	rcall	.-2606   	; 0x8a1a <mem_cmp>
    9448:	89 2b       	or	r24, r25
    944a:	89 f0       	breq	.+34     	; 0x946e <check_fs+0x70>
    944c:	45 e0       	ldi	r20, 0x05	; 5
    944e:	50 e0       	ldi	r21, 0x00	; 0
    9450:	61 e2       	ldi	r22, 0x21	; 33
    9452:	74 e0       	ldi	r23, 0x04	; 4
    9454:	ce 01       	movw	r24, r28
    9456:	89 57       	subi	r24, 0x79	; 121
    9458:	9f 4f       	sbci	r25, 0xFF	; 255
    945a:	df da       	rcall	.-2626   	; 0x8a1a <mem_cmp>
    945c:	89 2b       	or	r24, r25
    945e:	51 f4       	brne	.+20     	; 0x9474 <check_fs+0x76>
    9460:	06 c0       	rjmp	.+12     	; 0x946e <check_fs+0x70>
    9462:	84 e0       	ldi	r24, 0x04	; 4
    9464:	90 e0       	ldi	r25, 0x00	; 0
    9466:	08 c0       	rjmp	.+16     	; 0x9478 <check_fs+0x7a>
    9468:	83 e0       	ldi	r24, 0x03	; 3
    946a:	90 e0       	ldi	r25, 0x00	; 0
    946c:	05 c0       	rjmp	.+10     	; 0x9478 <check_fs+0x7a>
    946e:	80 e0       	ldi	r24, 0x00	; 0
    9470:	90 e0       	ldi	r25, 0x00	; 0
    9472:	02 c0       	rjmp	.+4      	; 0x9478 <check_fs+0x7a>
    9474:	82 e0       	ldi	r24, 0x02	; 2
    9476:	90 e0       	ldi	r25, 0x00	; 0
    9478:	df 91       	pop	r29
    947a:	cf 91       	pop	r28
    947c:	08 95       	ret

0000947e <mount_volume>:
    947e:	a0 e2       	ldi	r26, 0x20	; 32
    9480:	b0 e0       	ldi	r27, 0x00	; 0
    9482:	e5 e4       	ldi	r30, 0x45	; 69
    9484:	fa e4       	ldi	r31, 0x4A	; 74
    9486:	0c 94 da e0 	jmp	0x1c1b4	; 0x1c1b4 <__prologue_saves__+0x4>
    948a:	5b 01       	movw	r10, r22
    948c:	f4 2e       	mov	r15, r20
    948e:	db 01       	movw	r26, r22
    9490:	1d 92       	st	X+, r1
    9492:	1c 92       	st	X, r1
    9494:	ca db       	rcall	.-2156   	; 0x8c2a <get_ldnumber>
    9496:	6c 01       	movw	r12, r24
    9498:	97 fd       	sbrc	r25, 7
    949a:	39 c2       	rjmp	.+1138   	; 0x990e <mount_volume+0x490>
    949c:	fc 01       	movw	r30, r24
    949e:	ee 0f       	add	r30, r30
    94a0:	ff 1f       	adc	r31, r31
    94a2:	e3 5c       	subi	r30, 0xC3	; 195
    94a4:	f7 4e       	sbci	r31, 0xE7	; 231
    94a6:	00 81       	ld	r16, Z
    94a8:	11 81       	ldd	r17, Z+1	; 0x01
    94aa:	01 15       	cp	r16, r1
    94ac:	11 05       	cpc	r17, r1
    94ae:	09 f4       	brne	.+2      	; 0x94b2 <mount_volume+0x34>
    94b0:	31 c2       	rjmp	.+1122   	; 0x9914 <mount_volume+0x496>
    94b2:	f5 01       	movw	r30, r10
    94b4:	11 83       	std	Z+1, r17	; 0x01
    94b6:	00 83       	st	Z, r16
    94b8:	ff 2d       	mov	r31, r15
    94ba:	fe 7f       	andi	r31, 0xFE	; 254
    94bc:	ff 2e       	mov	r15, r31
    94be:	d8 01       	movw	r26, r16
    94c0:	8c 91       	ld	r24, X
    94c2:	88 23       	and	r24, r24
    94c4:	71 f0       	breq	.+28     	; 0x94e2 <mount_volume+0x64>
    94c6:	f8 01       	movw	r30, r16
    94c8:	81 81       	ldd	r24, Z+1	; 0x01
    94ca:	0e 94 01 68 	call	0xd002	; 0xd002 <disk_status>
    94ce:	80 fd       	sbrc	r24, 0
    94d0:	08 c0       	rjmp	.+16     	; 0x94e2 <mount_volume+0x64>
    94d2:	ff 20       	and	r15, r15
    94d4:	09 f4       	brne	.+2      	; 0x94d8 <mount_volume+0x5a>
    94d6:	21 c2       	rjmp	.+1090   	; 0x991a <mount_volume+0x49c>
    94d8:	82 ff       	sbrs	r24, 2
    94da:	1f c2       	rjmp	.+1086   	; 0x991a <mount_volume+0x49c>
    94dc:	8a e0       	ldi	r24, 0x0A	; 10
    94de:	90 e0       	ldi	r25, 0x00	; 0
    94e0:	24 c2       	rjmp	.+1096   	; 0x992a <mount_volume+0x4ac>
    94e2:	d8 01       	movw	r26, r16
    94e4:	1c 92       	st	X, r1
    94e6:	f8 01       	movw	r30, r16
    94e8:	c1 82       	std	Z+1, r12	; 0x01
    94ea:	8c 2d       	mov	r24, r12
    94ec:	0e 94 07 68 	call	0xd00e	; 0xd00e <disk_initialize>
    94f0:	80 fd       	sbrc	r24, 0
    94f2:	16 c2       	rjmp	.+1068   	; 0x9920 <mount_volume+0x4a2>
    94f4:	ff 20       	and	r15, r15
    94f6:	11 f0       	breq	.+4      	; 0x94fc <mount_volume+0x7e>
    94f8:	82 fd       	sbrc	r24, 2
    94fa:	f0 cf       	rjmp	.-32     	; 0x94dc <mount_volume+0x5e>
    94fc:	40 e0       	ldi	r20, 0x00	; 0
    94fe:	50 e0       	ldi	r21, 0x00	; 0
    9500:	ba 01       	movw	r22, r20
    9502:	c8 01       	movw	r24, r16
    9504:	7c df       	rcall	.-264    	; 0x93fe <check_fs>
    9506:	82 30       	cpi	r24, 0x02	; 2
    9508:	91 05       	cpc	r25, r1
    950a:	b9 f5       	brne	.+110    	; 0x957a <mount_volume+0xfc>
    950c:	68 01       	movw	r12, r16
    950e:	f5 e0       	ldi	r31, 0x05	; 5
    9510:	cf 1a       	sub	r12, r31
    9512:	fe ef       	ldi	r31, 0xFE	; 254
    9514:	df 0a       	sbc	r13, r31
    9516:	9e 01       	movw	r18, r28
    9518:	2f 5f       	subi	r18, 0xFF	; 255
    951a:	3f 4f       	sbci	r19, 0xFF	; 255
    951c:	79 01       	movw	r14, r18
    951e:	48 01       	movw	r8, r16
    9520:	35 ec       	ldi	r19, 0xC5	; 197
    9522:	83 1a       	sub	r8, r19
    9524:	3d ef       	ldi	r19, 0xFD	; 253
    9526:	93 0a       	sbc	r9, r19
    9528:	57 01       	movw	r10, r14
    952a:	c6 01       	movw	r24, r12
    952c:	52 da       	rcall	.-2908   	; 0x89d2 <ld_dword>
    952e:	d5 01       	movw	r26, r10
    9530:	6d 93       	st	X+, r22
    9532:	7d 93       	st	X+, r23
    9534:	8d 93       	st	X+, r24
    9536:	9d 93       	st	X+, r25
    9538:	5d 01       	movw	r10, r26
    953a:	b0 e1       	ldi	r27, 0x10	; 16
    953c:	cb 0e       	add	r12, r27
    953e:	d1 1c       	adc	r13, r1
    9540:	c8 14       	cp	r12, r8
    9542:	d9 04       	cpc	r13, r9
    9544:	91 f7       	brne	.-28     	; 0x952a <mount_volume+0xac>
    9546:	6e 01       	movw	r12, r28
    9548:	e1 e1       	ldi	r30, 0x11	; 17
    954a:	ce 0e       	add	r12, r30
    954c:	d1 1c       	adc	r13, r1
    954e:	d7 01       	movw	r26, r14
    9550:	4d 91       	ld	r20, X+
    9552:	5d 91       	ld	r21, X+
    9554:	6d 91       	ld	r22, X+
    9556:	7d 91       	ld	r23, X+
    9558:	7d 01       	movw	r14, r26
    955a:	41 15       	cp	r20, r1
    955c:	51 05       	cpc	r21, r1
    955e:	61 05       	cpc	r22, r1
    9560:	71 05       	cpc	r23, r1
    9562:	31 f0       	breq	.+12     	; 0x9570 <mount_volume+0xf2>
    9564:	c8 01       	movw	r24, r16
    9566:	4b df       	rcall	.-362    	; 0x93fe <check_fs>
    9568:	82 30       	cpi	r24, 0x02	; 2
    956a:	91 05       	cpc	r25, r1
    956c:	18 f4       	brcc	.+6      	; 0x9574 <mount_volume+0xf6>
    956e:	05 c0       	rjmp	.+10     	; 0x957a <mount_volume+0xfc>
    9570:	83 e0       	ldi	r24, 0x03	; 3
    9572:	90 e0       	ldi	r25, 0x00	; 0
    9574:	ce 14       	cp	r12, r14
    9576:	df 04       	cpc	r13, r15
    9578:	51 f7       	brne	.-44     	; 0x954e <mount_volume+0xd0>
    957a:	84 30       	cpi	r24, 0x04	; 4
    957c:	91 05       	cpc	r25, r1
    957e:	09 f4       	brne	.+2      	; 0x9582 <mount_volume+0x104>
    9580:	d2 c1       	rjmp	.+932    	; 0x9926 <mount_volume+0x4a8>
    9582:	02 97       	sbiw	r24, 0x02	; 2
    9584:	18 f0       	brcs	.+6      	; 0x958c <mount_volume+0x10e>
    9586:	8d e0       	ldi	r24, 0x0D	; 13
    9588:	90 e0       	ldi	r25, 0x00	; 0
    958a:	cf c1       	rjmp	.+926    	; 0x992a <mount_volume+0x4ac>
    958c:	f8 01       	movw	r30, r16
    958e:	e0 5c       	subi	r30, 0xC0	; 192
    9590:	ff 4f       	sbci	r31, 0xFF	; 255
    9592:	80 81       	ld	r24, Z
    9594:	91 81       	ldd	r25, Z+1	; 0x01
    9596:	81 15       	cp	r24, r1
    9598:	92 40       	sbci	r25, 0x02	; 2
    959a:	a9 f7       	brne	.-22     	; 0x9586 <mount_volume+0x108>
    959c:	3b 96       	adiw	r30, 0x0b	; 11
    959e:	40 80       	ld	r4, Z
    95a0:	51 80       	ldd	r5, Z+1	; 0x01
    95a2:	41 14       	cp	r4, r1
    95a4:	51 04       	cpc	r5, r1
    95a6:	19 f0       	breq	.+6      	; 0x95ae <mount_volume+0x130>
    95a8:	61 2c       	mov	r6, r1
    95aa:	71 2c       	mov	r7, r1
    95ac:	06 c0       	rjmp	.+12     	; 0x95ba <mount_volume+0x13c>
    95ae:	c8 01       	movw	r24, r16
    95b0:	87 5a       	subi	r24, 0xA7	; 167
    95b2:	9f 4f       	sbci	r25, 0xFF	; 255
    95b4:	0e da       	rcall	.-3044   	; 0x89d2 <ld_dword>
    95b6:	2b 01       	movw	r4, r22
    95b8:	3c 01       	movw	r6, r24
    95ba:	f8 01       	movw	r30, r16
    95bc:	21 a9       	ldd	r18, Z+49	; 0x31
    95be:	32 a9       	ldd	r19, Z+50	; 0x32
    95c0:	43 a9       	ldd	r20, Z+51	; 0x33
    95c2:	54 a9       	ldd	r21, Z+52	; 0x34
    95c4:	29 8b       	std	Y+17, r18	; 0x11
    95c6:	3a 8b       	std	Y+18, r19	; 0x12
    95c8:	4b 8b       	std	Y+19, r20	; 0x13
    95ca:	5c 8b       	std	Y+20, r21	; 0x14
    95cc:	45 8e       	std	Z+29, r4	; 0x1d
    95ce:	56 8e       	std	Z+30, r5	; 0x1e
    95d0:	67 8e       	std	Z+31, r6	; 0x1f
    95d2:	70 a2       	std	Z+32, r7	; 0x20
    95d4:	eb 5b       	subi	r30, 0xBB	; 187
    95d6:	ff 4f       	sbci	r31, 0xFF	; 255
    95d8:	a0 80       	ld	r10, Z
    95da:	f8 01       	movw	r30, r16
    95dc:	a2 82       	std	Z+2, r10	; 0x02
    95de:	8f ef       	ldi	r24, 0xFF	; 255
    95e0:	8a 0d       	add	r24, r10
    95e2:	82 30       	cpi	r24, 0x02	; 2
    95e4:	80 f6       	brcc	.-96     	; 0x9586 <mount_volume+0x108>
    95e6:	ee 5b       	subi	r30, 0xBE	; 190
    95e8:	ff 4f       	sbci	r31, 0xFF	; 255
    95ea:	b0 80       	ld	r11, Z
    95ec:	8b 2d       	mov	r24, r11
    95ee:	90 e0       	ldi	r25, 0x00	; 0
    95f0:	f8 01       	movw	r30, r16
    95f2:	92 87       	std	Z+10, r25	; 0x0a
    95f4:	81 87       	std	Z+9, r24	; 0x09
    95f6:	00 97       	sbiw	r24, 0x00	; 0
    95f8:	31 f2       	breq	.-116    	; 0x9586 <mount_volume+0x108>
    95fa:	9c 01       	movw	r18, r24
    95fc:	21 50       	subi	r18, 0x01	; 1
    95fe:	31 09       	sbc	r19, r1
    9600:	82 23       	and	r24, r18
    9602:	93 23       	and	r25, r19
    9604:	89 2b       	or	r24, r25
    9606:	09 f0       	breq	.+2      	; 0x960a <mount_volume+0x18c>
    9608:	be cf       	rjmp	.-132    	; 0x9586 <mount_volume+0x108>
    960a:	ea 5b       	subi	r30, 0xBA	; 186
    960c:	ff 4f       	sbci	r31, 0xFF	; 255
    960e:	80 80       	ld	r8, Z
    9610:	91 80       	ldd	r9, Z+1	; 0x01
    9612:	f8 01       	movw	r30, r16
    9614:	90 86       	std	Z+8, r9	; 0x08
    9616:	87 82       	std	Z+7, r8	; 0x07
    9618:	c4 01       	movw	r24, r8
    961a:	8f 70       	andi	r24, 0x0F	; 15
    961c:	99 27       	eor	r25, r25
    961e:	89 2b       	or	r24, r25
    9620:	09 f0       	breq	.+2      	; 0x9624 <mount_volume+0x1a6>
    9622:	b1 cf       	rjmp	.-158    	; 0x9586 <mount_volume+0x108>
    9624:	e8 5b       	subi	r30, 0xB8	; 184
    9626:	ff 4f       	sbci	r31, 0xFF	; 255
    9628:	80 81       	ld	r24, Z
    962a:	91 81       	ldd	r25, Z+1	; 0x01
    962c:	6c 01       	movw	r12, r24
    962e:	e1 2c       	mov	r14, r1
    9630:	f1 2c       	mov	r15, r1
    9632:	89 2b       	or	r24, r25
    9634:	31 f4       	brne	.+12     	; 0x9642 <mount_volume+0x1c4>
    9636:	c8 01       	movw	r24, r16
    9638:	8b 5a       	subi	r24, 0xAB	; 171
    963a:	9f 4f       	sbci	r25, 0xFF	; 255
    963c:	ca d9       	rcall	.-3180   	; 0x89d2 <ld_dword>
    963e:	6b 01       	movw	r12, r22
    9640:	7c 01       	movw	r14, r24
    9642:	f8 01       	movw	r30, r16
    9644:	ed 5b       	subi	r30, 0xBD	; 189
    9646:	ff 4f       	sbci	r31, 0xFF	; 255
    9648:	01 90       	ld	r0, Z+
    964a:	f0 81       	ld	r31, Z
    964c:	e0 2d       	mov	r30, r0
    964e:	30 97       	sbiw	r30, 0x00	; 0
    9650:	09 f4       	brne	.+2      	; 0x9654 <mount_volume+0x1d6>
    9652:	99 cf       	rjmp	.-206    	; 0x9586 <mount_volume+0x108>
    9654:	aa 2d       	mov	r26, r10
    9656:	b0 e0       	ldi	r27, 0x00	; 0
    9658:	a3 01       	movw	r20, r6
    965a:	92 01       	movw	r18, r4
    965c:	0e 94 b8 e0 	call	0x1c170	; 0x1c170 <__muluhisi3>
    9660:	69 8f       	std	Y+25, r22	; 0x19
    9662:	7a 8f       	std	Y+26, r23	; 0x1a
    9664:	8b 8f       	std	Y+27, r24	; 0x1b
    9666:	9c 8f       	std	Y+28, r25	; 0x1c
    9668:	9f 01       	movw	r18, r30
    966a:	40 e0       	ldi	r20, 0x00	; 0
    966c:	50 e0       	ldi	r21, 0x00	; 0
    966e:	2d 8f       	std	Y+29, r18	; 0x1d
    9670:	3e 8f       	std	Y+30, r19	; 0x1e
    9672:	4f 8f       	std	Y+31, r20	; 0x1f
    9674:	58 a3       	std	Y+32, r21	; 0x20
    9676:	c4 01       	movw	r24, r8
    9678:	f4 e0       	ldi	r31, 0x04	; 4
    967a:	96 95       	lsr	r25
    967c:	87 95       	ror	r24
    967e:	fa 95       	dec	r31
    9680:	e1 f7       	brne	.-8      	; 0x967a <mount_volume+0x1fc>
    9682:	28 0f       	add	r18, r24
    9684:	39 1f       	adc	r19, r25
    9686:	41 1d       	adc	r20, r1
    9688:	51 1d       	adc	r21, r1
    968a:	da 01       	movw	r26, r20
    968c:	c9 01       	movw	r24, r18
    968e:	29 8d       	ldd	r18, Y+25	; 0x19
    9690:	3a 8d       	ldd	r19, Y+26	; 0x1a
    9692:	4b 8d       	ldd	r20, Y+27	; 0x1b
    9694:	5c 8d       	ldd	r21, Y+28	; 0x1c
    9696:	28 0f       	add	r18, r24
    9698:	39 1f       	adc	r19, r25
    969a:	4a 1f       	adc	r20, r26
    969c:	5b 1f       	adc	r21, r27
    969e:	2d 8b       	std	Y+21, r18	; 0x15
    96a0:	3e 8b       	std	Y+22, r19	; 0x16
    96a2:	4f 8b       	std	Y+23, r20	; 0x17
    96a4:	58 8f       	std	Y+24, r21	; 0x18
    96a6:	c2 16       	cp	r12, r18
    96a8:	d3 06       	cpc	r13, r19
    96aa:	e4 06       	cpc	r14, r20
    96ac:	f5 06       	cpc	r15, r21
    96ae:	08 f4       	brcc	.+2      	; 0x96b2 <mount_volume+0x234>
    96b0:	6a cf       	rjmp	.-300    	; 0x9586 <mount_volume+0x108>
    96b2:	c7 01       	movw	r24, r14
    96b4:	b6 01       	movw	r22, r12
    96b6:	62 1b       	sub	r22, r18
    96b8:	73 0b       	sbc	r23, r19
    96ba:	84 0b       	sbc	r24, r20
    96bc:	95 0b       	sbc	r25, r21
    96be:	2b 2d       	mov	r18, r11
    96c0:	30 e0       	ldi	r19, 0x00	; 0
    96c2:	40 e0       	ldi	r20, 0x00	; 0
    96c4:	50 e0       	ldi	r21, 0x00	; 0
    96c6:	0e 94 6b e0 	call	0x1c0d6	; 0x1c0d6 <__udivmodsi4>
    96ca:	da 01       	movw	r26, r20
    96cc:	c9 01       	movw	r24, r18
    96ce:	01 97       	sbiw	r24, 0x01	; 1
    96d0:	a1 09       	sbc	r26, r1
    96d2:	b1 09       	sbc	r27, r1
    96d4:	85 3f       	cpi	r24, 0xF5	; 245
    96d6:	9f 4f       	sbci	r25, 0xFF	; 255
    96d8:	af 4f       	sbci	r26, 0xFF	; 255
    96da:	bf 40       	sbci	r27, 0x0F	; 15
    96dc:	08 f0       	brcs	.+2      	; 0x96e0 <mount_volume+0x262>
    96de:	53 cf       	rjmp	.-346    	; 0x9586 <mount_volume+0x108>
    96e0:	26 3f       	cpi	r18, 0xF6	; 246
    96e2:	8f ef       	ldi	r24, 0xFF	; 255
    96e4:	38 07       	cpc	r19, r24
    96e6:	41 05       	cpc	r20, r1
    96e8:	51 05       	cpc	r21, r1
    96ea:	50 f4       	brcc	.+20     	; 0x9700 <mount_volume+0x282>
    96ec:	26 3f       	cpi	r18, 0xF6	; 246
    96ee:	9f e0       	ldi	r25, 0x0F	; 15
    96f0:	39 07       	cpc	r19, r25
    96f2:	41 05       	cpc	r20, r1
    96f4:	51 05       	cpc	r21, r1
    96f6:	40 f4       	brcc	.+16     	; 0x9708 <mount_volume+0x28a>
    96f8:	aa 24       	eor	r10, r10
    96fa:	a3 94       	inc	r10
    96fc:	b1 2c       	mov	r11, r1
    96fe:	07 c0       	rjmp	.+14     	; 0x970e <mount_volume+0x290>
    9700:	73 e0       	ldi	r23, 0x03	; 3
    9702:	a7 2e       	mov	r10, r23
    9704:	b1 2c       	mov	r11, r1
    9706:	03 c0       	rjmp	.+6      	; 0x970e <mount_volume+0x290>
    9708:	62 e0       	ldi	r22, 0x02	; 2
    970a:	a6 2e       	mov	r10, r22
    970c:	b1 2c       	mov	r11, r1
    970e:	69 01       	movw	r12, r18
    9710:	7a 01       	movw	r14, r20
    9712:	a2 e0       	ldi	r26, 0x02	; 2
    9714:	ca 0e       	add	r12, r26
    9716:	d1 1c       	adc	r13, r1
    9718:	e1 1c       	adc	r14, r1
    971a:	f1 1c       	adc	r15, r1
    971c:	f8 01       	movw	r30, r16
    971e:	c1 8e       	std	Z+25, r12	; 0x19
    9720:	d2 8e       	std	Z+26, r13	; 0x1a
    9722:	e3 8e       	std	Z+27, r14	; 0x1b
    9724:	f4 8e       	std	Z+28, r15	; 0x1c
    9726:	29 89       	ldd	r18, Y+17	; 0x11
    9728:	3a 89       	ldd	r19, Y+18	; 0x12
    972a:	4b 89       	ldd	r20, Y+19	; 0x13
    972c:	5c 89       	ldd	r21, Y+20	; 0x14
    972e:	21 a3       	std	Z+33, r18	; 0x21
    9730:	32 a3       	std	Z+34, r19	; 0x22
    9732:	43 a3       	std	Z+35, r20	; 0x23
    9734:	54 a3       	std	Z+36, r21	; 0x24
    9736:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9738:	9e 8d       	ldd	r25, Y+30	; 0x1e
    973a:	af 8d       	ldd	r26, Y+31	; 0x1f
    973c:	b8 a1       	ldd	r27, Y+32	; 0x20
    973e:	28 0f       	add	r18, r24
    9740:	39 1f       	adc	r19, r25
    9742:	4a 1f       	adc	r20, r26
    9744:	5b 1f       	adc	r21, r27
    9746:	2d 8f       	std	Y+29, r18	; 0x1d
    9748:	3e 8f       	std	Y+30, r19	; 0x1e
    974a:	4f 8f       	std	Y+31, r20	; 0x1f
    974c:	58 a3       	std	Y+32, r21	; 0x20
    974e:	25 a3       	std	Z+37, r18	; 0x25
    9750:	36 a3       	std	Z+38, r19	; 0x26
    9752:	47 a3       	std	Z+39, r20	; 0x27
    9754:	50 a7       	std	Z+40, r21	; 0x28
    9756:	49 89       	ldd	r20, Y+17	; 0x11
    9758:	5a 89       	ldd	r21, Y+18	; 0x12
    975a:	6b 89       	ldd	r22, Y+19	; 0x13
    975c:	7c 89       	ldd	r23, Y+20	; 0x14
    975e:	8d 89       	ldd	r24, Y+21	; 0x15
    9760:	9e 89       	ldd	r25, Y+22	; 0x16
    9762:	af 89       	ldd	r26, Y+23	; 0x17
    9764:	b8 8d       	ldd	r27, Y+24	; 0x18
    9766:	48 0f       	add	r20, r24
    9768:	59 1f       	adc	r21, r25
    976a:	6a 1f       	adc	r22, r26
    976c:	7b 1f       	adc	r23, r27
    976e:	45 a7       	std	Z+45, r20	; 0x2d
    9770:	56 a7       	std	Z+46, r21	; 0x2e
    9772:	67 a7       	std	Z+47, r22	; 0x2f
    9774:	70 ab       	std	Z+48, r23	; 0x30
    9776:	f3 e0       	ldi	r31, 0x03	; 3
    9778:	af 16       	cp	r10, r31
    977a:	b1 04       	cpc	r11, r1
    977c:	e9 f4       	brne	.+58     	; 0x97b8 <mount_volume+0x33a>
    977e:	f8 01       	movw	r30, r16
    9780:	e1 5a       	subi	r30, 0xA1	; 161
    9782:	ff 4f       	sbci	r31, 0xFF	; 255
    9784:	80 81       	ld	r24, Z
    9786:	91 81       	ldd	r25, Z+1	; 0x01
    9788:	89 2b       	or	r24, r25
    978a:	09 f0       	breq	.+2      	; 0x978e <mount_volume+0x310>
    978c:	fc ce       	rjmp	.-520    	; 0x9586 <mount_volume+0x108>
    978e:	81 14       	cp	r8, r1
    9790:	91 04       	cpc	r9, r1
    9792:	09 f0       	breq	.+2      	; 0x9796 <mount_volume+0x318>
    9794:	f8 ce       	rjmp	.-528    	; 0x9586 <mount_volume+0x108>
    9796:	c8 01       	movw	r24, r16
    9798:	8f 59       	subi	r24, 0x9F	; 159
    979a:	9f 4f       	sbci	r25, 0xFF	; 255
    979c:	1a d9       	rcall	.-3532   	; 0x89d2 <ld_dword>
    979e:	f8 01       	movw	r30, r16
    97a0:	61 a7       	std	Z+41, r22	; 0x29
    97a2:	72 a7       	std	Z+42, r23	; 0x2a
    97a4:	83 a7       	std	Z+43, r24	; 0x2b
    97a6:	94 a7       	std	Z+44, r25	; 0x2c
    97a8:	42 e0       	ldi	r20, 0x02	; 2
    97aa:	cc 0c       	add	r12, r12
    97ac:	dd 1c       	adc	r13, r13
    97ae:	ee 1c       	adc	r14, r14
    97b0:	ff 1c       	adc	r15, r15
    97b2:	4a 95       	dec	r20
    97b4:	d1 f7       	brne	.-12     	; 0x97aa <mount_volume+0x32c>
    97b6:	33 c0       	rjmp	.+102    	; 0x981e <mount_volume+0x3a0>
    97b8:	81 14       	cp	r8, r1
    97ba:	91 04       	cpc	r9, r1
    97bc:	09 f4       	brne	.+2      	; 0x97c0 <mount_volume+0x342>
    97be:	e3 ce       	rjmp	.-570    	; 0x9586 <mount_volume+0x108>
    97c0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    97c2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    97c4:	af 8d       	ldd	r26, Y+31	; 0x1f
    97c6:	b8 a1       	ldd	r27, Y+32	; 0x20
    97c8:	29 8d       	ldd	r18, Y+25	; 0x19
    97ca:	3a 8d       	ldd	r19, Y+26	; 0x1a
    97cc:	4b 8d       	ldd	r20, Y+27	; 0x1b
    97ce:	5c 8d       	ldd	r21, Y+28	; 0x1c
    97d0:	82 0f       	add	r24, r18
    97d2:	93 1f       	adc	r25, r19
    97d4:	a4 1f       	adc	r26, r20
    97d6:	b5 1f       	adc	r27, r21
    97d8:	f8 01       	movw	r30, r16
    97da:	81 a7       	std	Z+41, r24	; 0x29
    97dc:	92 a7       	std	Z+42, r25	; 0x2a
    97de:	a3 a7       	std	Z+43, r26	; 0x2b
    97e0:	b4 a7       	std	Z+44, r27	; 0x2c
    97e2:	f2 e0       	ldi	r31, 0x02	; 2
    97e4:	af 16       	cp	r10, r31
    97e6:	b1 04       	cpc	r11, r1
    97e8:	29 f4       	brne	.+10     	; 0x97f4 <mount_volume+0x376>
    97ea:	cc 0c       	add	r12, r12
    97ec:	dd 1c       	adc	r13, r13
    97ee:	ee 1c       	adc	r14, r14
    97f0:	ff 1c       	adc	r15, r15
    97f2:	15 c0       	rjmp	.+42     	; 0x981e <mount_volume+0x3a0>
    97f4:	a3 e0       	ldi	r26, 0x03	; 3
    97f6:	b0 e0       	ldi	r27, 0x00	; 0
    97f8:	a7 01       	movw	r20, r14
    97fa:	96 01       	movw	r18, r12
    97fc:	0e 94 b8 e0 	call	0x1c170	; 0x1c170 <__muluhisi3>
    9800:	dc 01       	movw	r26, r24
    9802:	cb 01       	movw	r24, r22
    9804:	b6 95       	lsr	r27
    9806:	a7 95       	ror	r26
    9808:	97 95       	ror	r25
    980a:	87 95       	ror	r24
    980c:	21 e0       	ldi	r18, 0x01	; 1
    980e:	c2 22       	and	r12, r18
    9810:	dd 24       	eor	r13, r13
    9812:	ee 24       	eor	r14, r14
    9814:	ff 24       	eor	r15, r15
    9816:	c8 0e       	add	r12, r24
    9818:	d9 1e       	adc	r13, r25
    981a:	ea 1e       	adc	r14, r26
    981c:	fb 1e       	adc	r15, r27
    981e:	3f ef       	ldi	r19, 0xFF	; 255
    9820:	c3 0e       	add	r12, r19
    9822:	31 e0       	ldi	r19, 0x01	; 1
    9824:	d3 1e       	adc	r13, r19
    9826:	e1 1c       	adc	r14, r1
    9828:	f1 1c       	adc	r15, r1
    982a:	89 e0       	ldi	r24, 0x09	; 9
    982c:	f6 94       	lsr	r15
    982e:	e7 94       	ror	r14
    9830:	d7 94       	ror	r13
    9832:	c7 94       	ror	r12
    9834:	8a 95       	dec	r24
    9836:	d1 f7       	brne	.-12     	; 0x982c <mount_volume+0x3ae>
    9838:	4c 14       	cp	r4, r12
    983a:	5d 04       	cpc	r5, r13
    983c:	6e 04       	cpc	r6, r14
    983e:	7f 04       	cpc	r7, r15
    9840:	08 f4       	brcc	.+2      	; 0x9844 <mount_volume+0x3c6>
    9842:	a1 ce       	rjmp	.-702    	; 0x9586 <mount_volume+0x108>
    9844:	8f ef       	ldi	r24, 0xFF	; 255
    9846:	9f ef       	ldi	r25, 0xFF	; 255
    9848:	dc 01       	movw	r26, r24
    984a:	f8 01       	movw	r30, r16
    984c:	81 8b       	std	Z+17, r24	; 0x11
    984e:	92 8b       	std	Z+18, r25	; 0x12
    9850:	a3 8b       	std	Z+19, r26	; 0x13
    9852:	b4 8b       	std	Z+20, r27	; 0x14
    9854:	85 87       	std	Z+13, r24	; 0x0d
    9856:	96 87       	std	Z+14, r25	; 0x0e
    9858:	a7 87       	std	Z+15, r26	; 0x0f
    985a:	b0 8b       	std	Z+16, r27	; 0x10
    985c:	80 e8       	ldi	r24, 0x80	; 128
    985e:	84 83       	std	Z+4, r24	; 0x04
    9860:	f3 e0       	ldi	r31, 0x03	; 3
    9862:	af 16       	cp	r10, r31
    9864:	b1 04       	cpc	r11, r1
    9866:	09 f0       	breq	.+2      	; 0x986a <mount_volume+0x3ec>
    9868:	3f c0       	rjmp	.+126    	; 0x98e8 <mount_volume+0x46a>
    986a:	f8 01       	movw	r30, r16
    986c:	eb 59       	subi	r30, 0x9B	; 155
    986e:	ff 4f       	sbci	r31, 0xFF	; 255
    9870:	80 81       	ld	r24, Z
    9872:	91 81       	ldd	r25, Z+1	; 0x01
    9874:	01 97       	sbiw	r24, 0x01	; 1
    9876:	c1 f5       	brne	.+112    	; 0x98e8 <mount_volume+0x46a>
    9878:	49 89       	ldd	r20, Y+17	; 0x11
    987a:	5a 89       	ldd	r21, Y+18	; 0x12
    987c:	6b 89       	ldd	r22, Y+19	; 0x13
    987e:	7c 89       	ldd	r23, Y+20	; 0x14
    9880:	4f 5f       	subi	r20, 0xFF	; 255
    9882:	5f 4f       	sbci	r21, 0xFF	; 255
    9884:	6f 4f       	sbci	r22, 0xFF	; 255
    9886:	7f 4f       	sbci	r23, 0xFF	; 255
    9888:	c8 01       	movw	r24, r16
    988a:	7e dd       	rcall	.-1284   	; 0x9388 <move_window>
    988c:	89 2b       	or	r24, r25
    988e:	61 f5       	brne	.+88     	; 0x98e8 <mount_volume+0x46a>
    9890:	f8 01       	movw	r30, r16
    9892:	14 82       	std	Z+4, r1	; 0x04
    9894:	ed 5c       	subi	r30, 0xCD	; 205
    9896:	fd 4f       	sbci	r31, 0xFD	; 253
    9898:	80 81       	ld	r24, Z
    989a:	91 81       	ldd	r25, Z+1	; 0x01
    989c:	85 35       	cpi	r24, 0x55	; 85
    989e:	9a 4a       	sbci	r25, 0xAA	; 170
    98a0:	19 f5       	brne	.+70     	; 0x98e8 <mount_volume+0x46a>
    98a2:	c8 01       	movw	r24, r16
    98a4:	c5 96       	adiw	r24, 0x35	; 53
    98a6:	95 d8       	rcall	.-3798   	; 0x89d2 <ld_dword>
    98a8:	62 35       	cpi	r22, 0x52	; 82
    98aa:	72 45       	sbci	r23, 0x52	; 82
    98ac:	81 46       	sbci	r24, 0x61	; 97
    98ae:	91 44       	sbci	r25, 0x41	; 65
    98b0:	d9 f4       	brne	.+54     	; 0x98e8 <mount_volume+0x46a>
    98b2:	c8 01       	movw	r24, r16
    98b4:	87 5e       	subi	r24, 0xE7	; 231
    98b6:	9d 4f       	sbci	r25, 0xFD	; 253
    98b8:	8c d8       	rcall	.-3816   	; 0x89d2 <ld_dword>
    98ba:	62 37       	cpi	r22, 0x72	; 114
    98bc:	72 47       	sbci	r23, 0x72	; 114
    98be:	81 44       	sbci	r24, 0x41	; 65
    98c0:	91 46       	sbci	r25, 0x61	; 97
    98c2:	91 f4       	brne	.+36     	; 0x98e8 <mount_volume+0x46a>
    98c4:	c8 01       	movw	r24, r16
    98c6:	83 5e       	subi	r24, 0xE3	; 227
    98c8:	9d 4f       	sbci	r25, 0xFD	; 253
    98ca:	83 d8       	rcall	.-3834   	; 0x89d2 <ld_dword>
    98cc:	f8 01       	movw	r30, r16
    98ce:	61 8b       	std	Z+17, r22	; 0x11
    98d0:	72 8b       	std	Z+18, r23	; 0x12
    98d2:	83 8b       	std	Z+19, r24	; 0x13
    98d4:	94 8b       	std	Z+20, r25	; 0x14
    98d6:	c8 01       	movw	r24, r16
    98d8:	8f 5d       	subi	r24, 0xDF	; 223
    98da:	9d 4f       	sbci	r25, 0xFD	; 253
    98dc:	7a d8       	rcall	.-3852   	; 0x89d2 <ld_dword>
    98de:	f8 01       	movw	r30, r16
    98e0:	65 87       	std	Z+13, r22	; 0x0d
    98e2:	76 87       	std	Z+14, r23	; 0x0e
    98e4:	87 87       	std	Z+15, r24	; 0x0f
    98e6:	90 8b       	std	Z+16, r25	; 0x10
    98e8:	d8 01       	movw	r26, r16
    98ea:	ac 92       	st	X, r10
    98ec:	80 91 3b 18 	lds	r24, 0x183B	; 0x80183b <Fsid>
    98f0:	90 91 3c 18 	lds	r25, 0x183C	; 0x80183c <Fsid+0x1>
    98f4:	01 96       	adiw	r24, 0x01	; 1
    98f6:	90 93 3c 18 	sts	0x183C, r25	; 0x80183c <Fsid+0x1>
    98fa:	80 93 3b 18 	sts	0x183B, r24	; 0x80183b <Fsid>
    98fe:	f8 01       	movw	r30, r16
    9900:	96 83       	std	Z+6, r25	; 0x06
    9902:	85 83       	std	Z+5, r24	; 0x05
    9904:	15 8a       	std	Z+21, r1	; 0x15
    9906:	16 8a       	std	Z+22, r1	; 0x16
    9908:	17 8a       	std	Z+23, r1	; 0x17
    990a:	10 8e       	std	Z+24, r1	; 0x18
    990c:	06 c0       	rjmp	.+12     	; 0x991a <mount_volume+0x49c>
    990e:	8b e0       	ldi	r24, 0x0B	; 11
    9910:	90 e0       	ldi	r25, 0x00	; 0
    9912:	0b c0       	rjmp	.+22     	; 0x992a <mount_volume+0x4ac>
    9914:	8c e0       	ldi	r24, 0x0C	; 12
    9916:	90 e0       	ldi	r25, 0x00	; 0
    9918:	08 c0       	rjmp	.+16     	; 0x992a <mount_volume+0x4ac>
    991a:	80 e0       	ldi	r24, 0x00	; 0
    991c:	90 e0       	ldi	r25, 0x00	; 0
    991e:	05 c0       	rjmp	.+10     	; 0x992a <mount_volume+0x4ac>
    9920:	83 e0       	ldi	r24, 0x03	; 3
    9922:	90 e0       	ldi	r25, 0x00	; 0
    9924:	02 c0       	rjmp	.+4      	; 0x992a <mount_volume+0x4ac>
    9926:	81 e0       	ldi	r24, 0x01	; 1
    9928:	90 e0       	ldi	r25, 0x00	; 0
    992a:	a0 96       	adiw	r28, 0x20	; 32
    992c:	e0 e1       	ldi	r30, 0x10	; 16
    992e:	0c 94 f6 e0 	jmp	0x1c1ec	; 0x1c1ec <__epilogue_restores__+0x4>

00009932 <put_fat>:
    9932:	a6 e0       	ldi	r26, 0x06	; 6
    9934:	b0 e0       	ldi	r27, 0x00	; 0
    9936:	ef e9       	ldi	r30, 0x9F	; 159
    9938:	fc e4       	ldi	r31, 0x4C	; 76
    993a:	0c 94 d8 e0 	jmp	0x1c1b0	; 0x1c1b0 <__prologue_saves__>
    993e:	42 30       	cpi	r20, 0x02	; 2
    9940:	51 05       	cpc	r21, r1
    9942:	61 05       	cpc	r22, r1
    9944:	71 05       	cpc	r23, r1
    9946:	08 f4       	brcc	.+2      	; 0x994a <put_fat+0x18>
    9948:	e7 c0       	rjmp	.+462    	; 0x9b18 <put_fat+0x1e6>
    994a:	fc 01       	movw	r30, r24
    994c:	c1 8c       	ldd	r12, Z+25	; 0x19
    994e:	d2 8c       	ldd	r13, Z+26	; 0x1a
    9950:	e3 8c       	ldd	r14, Z+27	; 0x1b
    9952:	f4 8c       	ldd	r15, Z+28	; 0x1c
    9954:	4c 15       	cp	r20, r12
    9956:	5d 05       	cpc	r21, r13
    9958:	6e 05       	cpc	r22, r14
    995a:	7f 05       	cpc	r23, r15
    995c:	08 f0       	brcs	.+2      	; 0x9960 <put_fat+0x2e>
    995e:	dc c0       	rjmp	.+440    	; 0x9b18 <put_fat+0x1e6>
    9960:	28 01       	movw	r4, r16
    9962:	39 01       	movw	r6, r18
    9964:	6a 01       	movw	r12, r20
    9966:	7b 01       	movw	r14, r22
    9968:	9e 83       	std	Y+6, r25	; 0x06
    996a:	8d 83       	std	Y+5, r24	; 0x05
    996c:	80 81       	ld	r24, Z
    996e:	82 30       	cpi	r24, 0x02	; 2
    9970:	09 f4       	brne	.+2      	; 0x9974 <put_fat+0x42>
    9972:	73 c0       	rjmp	.+230    	; 0x9a5a <put_fat+0x128>
    9974:	83 30       	cpi	r24, 0x03	; 3
    9976:	09 f4       	brne	.+2      	; 0x997a <put_fat+0x48>
    9978:	92 c0       	rjmp	.+292    	; 0x9a9e <put_fat+0x16c>
    997a:	81 30       	cpi	r24, 0x01	; 1
    997c:	09 f0       	breq	.+2      	; 0x9980 <put_fat+0x4e>
    997e:	cc c0       	rjmp	.+408    	; 0x9b18 <put_fat+0x1e6>
    9980:	4a 01       	movw	r8, r20
    9982:	96 94       	lsr	r9
    9984:	87 94       	ror	r8
    9986:	84 0e       	add	r8, r20
    9988:	95 1e       	adc	r9, r21
    998a:	c4 01       	movw	r24, r8
    998c:	89 2f       	mov	r24, r25
    998e:	99 27       	eor	r25, r25
    9990:	86 95       	lsr	r24
    9992:	45 a1       	ldd	r20, Z+37	; 0x25
    9994:	56 a1       	ldd	r21, Z+38	; 0x26
    9996:	67 a1       	ldd	r22, Z+39	; 0x27
    9998:	70 a5       	ldd	r23, Z+40	; 0x28
    999a:	48 0f       	add	r20, r24
    999c:	59 1f       	adc	r21, r25
    999e:	61 1d       	adc	r22, r1
    99a0:	71 1d       	adc	r23, r1
    99a2:	cf 01       	movw	r24, r30
    99a4:	f1 dc       	rcall	.-1566   	; 0x9388 <move_window>
    99a6:	5c 01       	movw	r10, r24
    99a8:	89 2b       	or	r24, r25
    99aa:	09 f0       	breq	.+2      	; 0x99ae <put_fat+0x7c>
    99ac:	b8 c0       	rjmp	.+368    	; 0x9b1e <put_fat+0x1ec>
    99ae:	2d 80       	ldd	r2, Y+5	; 0x05
    99b0:	3e 80       	ldd	r3, Y+6	; 0x06
    99b2:	f5 e3       	ldi	r31, 0x35	; 53
    99b4:	2f 0e       	add	r2, r31
    99b6:	31 1c       	adc	r3, r1
    99b8:	84 01       	movw	r16, r8
    99ba:	0f 5f       	subi	r16, 0xFF	; 255
    99bc:	1f 4f       	sbci	r17, 0xFF	; 255
    99be:	21 e0       	ldi	r18, 0x01	; 1
    99c0:	92 22       	and	r9, r18
    99c2:	f1 01       	movw	r30, r2
    99c4:	e8 0d       	add	r30, r8
    99c6:	f9 1d       	adc	r31, r9
    99c8:	d7 01       	movw	r26, r14
    99ca:	c6 01       	movw	r24, r12
    99cc:	81 70       	andi	r24, 0x01	; 1
    99ce:	99 27       	eor	r25, r25
    99d0:	aa 27       	eor	r26, r26
    99d2:	bb 27       	eor	r27, r27
    99d4:	89 83       	std	Y+1, r24	; 0x01
    99d6:	9a 83       	std	Y+2, r25	; 0x02
    99d8:	ab 83       	std	Y+3, r26	; 0x03
    99da:	bc 83       	std	Y+4, r27	; 0x04
    99dc:	c0 fe       	sbrs	r12, 0
    99de:	09 c0       	rjmp	.+18     	; 0x99f2 <put_fat+0xc0>
    99e0:	80 81       	ld	r24, Z
    99e2:	28 2f       	mov	r18, r24
    99e4:	2f 70       	andi	r18, 0x0F	; 15
    99e6:	a0 e1       	ldi	r26, 0x10	; 16
    99e8:	4a 9e       	mul	r4, r26
    99ea:	c0 01       	movw	r24, r0
    99ec:	11 24       	eor	r1, r1
    99ee:	82 2b       	or	r24, r18
    99f0:	01 c0       	rjmp	.+2      	; 0x99f4 <put_fat+0xc2>
    99f2:	84 2d       	mov	r24, r4
    99f4:	80 83       	st	Z, r24
    99f6:	81 e0       	ldi	r24, 0x01	; 1
    99f8:	ed 81       	ldd	r30, Y+5	; 0x05
    99fa:	fe 81       	ldd	r31, Y+6	; 0x06
    99fc:	83 83       	std	Z+3, r24	; 0x03
    99fe:	45 a1       	ldd	r20, Z+37	; 0x25
    9a00:	56 a1       	ldd	r21, Z+38	; 0x26
    9a02:	67 a1       	ldd	r22, Z+39	; 0x27
    9a04:	70 a5       	ldd	r23, Z+40	; 0x28
    9a06:	c8 01       	movw	r24, r16
    9a08:	89 2f       	mov	r24, r25
    9a0a:	99 27       	eor	r25, r25
    9a0c:	86 95       	lsr	r24
    9a0e:	48 0f       	add	r20, r24
    9a10:	59 1f       	adc	r21, r25
    9a12:	61 1d       	adc	r22, r1
    9a14:	71 1d       	adc	r23, r1
    9a16:	cf 01       	movw	r24, r30
    9a18:	b7 dc       	rcall	.-1682   	; 0x9388 <move_window>
    9a1a:	5c 01       	movw	r10, r24
    9a1c:	89 2b       	or	r24, r25
    9a1e:	09 f0       	breq	.+2      	; 0x9a22 <put_fat+0xf0>
    9a20:	7e c0       	rjmp	.+252    	; 0x9b1e <put_fat+0x1ec>
    9a22:	11 70       	andi	r17, 0x01	; 1
    9a24:	f1 01       	movw	r30, r2
    9a26:	e0 0f       	add	r30, r16
    9a28:	f1 1f       	adc	r31, r17
    9a2a:	89 81       	ldd	r24, Y+1	; 0x01
    9a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    9a2e:	ab 81       	ldd	r26, Y+3	; 0x03
    9a30:	bc 81       	ldd	r27, Y+4	; 0x04
    9a32:	89 2b       	or	r24, r25
    9a34:	8a 2b       	or	r24, r26
    9a36:	8b 2b       	or	r24, r27
    9a38:	41 f0       	breq	.+16     	; 0x9a4a <put_fat+0x118>
    9a3a:	54 e0       	ldi	r21, 0x04	; 4
    9a3c:	76 94       	lsr	r7
    9a3e:	67 94       	ror	r6
    9a40:	57 94       	ror	r5
    9a42:	47 94       	ror	r4
    9a44:	5a 95       	dec	r21
    9a46:	d1 f7       	brne	.-12     	; 0x9a3c <put_fat+0x10a>
    9a48:	06 c0       	rjmp	.+12     	; 0x9a56 <put_fat+0x124>
    9a4a:	00 81       	ld	r16, Z
    9a4c:	00 7f       	andi	r16, 0xF0	; 240
    9a4e:	85 2d       	mov	r24, r5
    9a50:	8f 70       	andi	r24, 0x0F	; 15
    9a52:	40 2e       	mov	r4, r16
    9a54:	48 2a       	or	r4, r24
    9a56:	40 82       	st	Z, r4
    9a58:	5a c0       	rjmp	.+180    	; 0x9b0e <put_fat+0x1dc>
    9a5a:	77 27       	eor	r23, r23
    9a5c:	6f 2d       	mov	r22, r15
    9a5e:	5e 2d       	mov	r21, r14
    9a60:	4d 2d       	mov	r20, r13
    9a62:	ed 81       	ldd	r30, Y+5	; 0x05
    9a64:	fe 81       	ldd	r31, Y+6	; 0x06
    9a66:	85 a1       	ldd	r24, Z+37	; 0x25
    9a68:	96 a1       	ldd	r25, Z+38	; 0x26
    9a6a:	a7 a1       	ldd	r26, Z+39	; 0x27
    9a6c:	b0 a5       	ldd	r27, Z+40	; 0x28
    9a6e:	48 0f       	add	r20, r24
    9a70:	59 1f       	adc	r21, r25
    9a72:	6a 1f       	adc	r22, r26
    9a74:	7b 1f       	adc	r23, r27
    9a76:	cf 01       	movw	r24, r30
    9a78:	87 dc       	rcall	.-1778   	; 0x9388 <move_window>
    9a7a:	5c 01       	movw	r10, r24
    9a7c:	89 2b       	or	r24, r25
    9a7e:	09 f0       	breq	.+2      	; 0x9a82 <put_fat+0x150>
    9a80:	4e c0       	rjmp	.+156    	; 0x9b1e <put_fat+0x1ec>
    9a82:	ed 81       	ldd	r30, Y+5	; 0x05
    9a84:	fe 81       	ldd	r31, Y+6	; 0x06
    9a86:	f5 96       	adiw	r30, 0x35	; 53
    9a88:	cc 0c       	add	r12, r12
    9a8a:	dd 1c       	adc	r13, r13
    9a8c:	e8 94       	clt
    9a8e:	c0 f8       	bld	r12, 0
    9a90:	21 e0       	ldi	r18, 0x01	; 1
    9a92:	d2 22       	and	r13, r18
    9a94:	ec 0d       	add	r30, r12
    9a96:	fd 1d       	adc	r31, r13
    9a98:	40 82       	st	Z, r4
    9a9a:	51 82       	std	Z+1, r5	; 0x01
    9a9c:	38 c0       	rjmp	.+112    	; 0x9b0e <put_fat+0x1dc>
    9a9e:	ed 81       	ldd	r30, Y+5	; 0x05
    9aa0:	fe 81       	ldd	r31, Y+6	; 0x06
    9aa2:	85 a1       	ldd	r24, Z+37	; 0x25
    9aa4:	96 a1       	ldd	r25, Z+38	; 0x26
    9aa6:	a7 a1       	ldd	r26, Z+39	; 0x27
    9aa8:	b0 a5       	ldd	r27, Z+40	; 0x28
    9aaa:	27 e0       	ldi	r18, 0x07	; 7
    9aac:	76 95       	lsr	r23
    9aae:	67 95       	ror	r22
    9ab0:	57 95       	ror	r21
    9ab2:	47 95       	ror	r20
    9ab4:	2a 95       	dec	r18
    9ab6:	d1 f7       	brne	.-12     	; 0x9aac <put_fat+0x17a>
    9ab8:	48 0f       	add	r20, r24
    9aba:	59 1f       	adc	r21, r25
    9abc:	6a 1f       	adc	r22, r26
    9abe:	7b 1f       	adc	r23, r27
    9ac0:	cf 01       	movw	r24, r30
    9ac2:	62 dc       	rcall	.-1852   	; 0x9388 <move_window>
    9ac4:	5c 01       	movw	r10, r24
    9ac6:	89 2b       	or	r24, r25
    9ac8:	51 f5       	brne	.+84     	; 0x9b1e <put_fat+0x1ec>
    9aca:	4d 81       	ldd	r20, Y+5	; 0x05
    9acc:	5e 81       	ldd	r21, Y+6	; 0x06
    9ace:	4b 5c       	subi	r20, 0xCB	; 203
    9ad0:	5f 4f       	sbci	r21, 0xFF	; 255
    9ad2:	cc 0c       	add	r12, r12
    9ad4:	dd 1c       	adc	r13, r13
    9ad6:	cc 0c       	add	r12, r12
    9ad8:	dd 1c       	adc	r13, r13
    9ada:	fc ef       	ldi	r31, 0xFC	; 252
    9adc:	cf 22       	and	r12, r31
    9ade:	f1 e0       	ldi	r31, 0x01	; 1
    9ae0:	df 22       	and	r13, r31
    9ae2:	c4 0e       	add	r12, r20
    9ae4:	d5 1e       	adc	r13, r21
    9ae6:	c6 01       	movw	r24, r12
    9ae8:	0e 94 e9 44 	call	0x89d2	; 0x89d2 <ld_dword>
    9aec:	2f e0       	ldi	r18, 0x0F	; 15
    9aee:	72 22       	and	r7, r18
    9af0:	dc 01       	movw	r26, r24
    9af2:	cb 01       	movw	r24, r22
    9af4:	88 27       	eor	r24, r24
    9af6:	99 27       	eor	r25, r25
    9af8:	aa 27       	eor	r26, r26
    9afa:	b0 7f       	andi	r27, 0xF0	; 240
    9afc:	b3 01       	movw	r22, r6
    9afe:	a2 01       	movw	r20, r4
    9b00:	48 2b       	or	r20, r24
    9b02:	59 2b       	or	r21, r25
    9b04:	6a 2b       	or	r22, r26
    9b06:	7b 2b       	or	r23, r27
    9b08:	c6 01       	movw	r24, r12
    9b0a:	0e 94 fe 44 	call	0x89fc	; 0x89fc <st_dword>
    9b0e:	81 e0       	ldi	r24, 0x01	; 1
    9b10:	ed 81       	ldd	r30, Y+5	; 0x05
    9b12:	fe 81       	ldd	r31, Y+6	; 0x06
    9b14:	83 83       	std	Z+3, r24	; 0x03
    9b16:	03 c0       	rjmp	.+6      	; 0x9b1e <put_fat+0x1ec>
    9b18:	82 e0       	ldi	r24, 0x02	; 2
    9b1a:	a8 2e       	mov	r10, r24
    9b1c:	b1 2c       	mov	r11, r1
    9b1e:	c5 01       	movw	r24, r10
    9b20:	26 96       	adiw	r28, 0x06	; 6
    9b22:	e2 e1       	ldi	r30, 0x12	; 18
    9b24:	0c 94 f4 e0 	jmp	0x1c1e8	; 0x1c1e8 <__epilogue_restores__>

00009b28 <get_fat.isra.10>:
    9b28:	a0 e0       	ldi	r26, 0x00	; 0
    9b2a:	b0 e0       	ldi	r27, 0x00	; 0
    9b2c:	ea e9       	ldi	r30, 0x9A	; 154
    9b2e:	fd e4       	ldi	r31, 0x4D	; 77
    9b30:	0c 94 e0 e0 	jmp	0x1c1c0	; 0x1c1c0 <__prologue_saves__+0x10>
    9b34:	42 30       	cpi	r20, 0x02	; 2
    9b36:	51 05       	cpc	r21, r1
    9b38:	61 05       	cpc	r22, r1
    9b3a:	71 05       	cpc	r23, r1
    9b3c:	08 f4       	brcc	.+2      	; 0x9b40 <get_fat.isra.10+0x18>
    9b3e:	9f c0       	rjmp	.+318    	; 0x9c7e <get_fat.isra.10+0x156>
    9b40:	fc 01       	movw	r30, r24
    9b42:	01 8d       	ldd	r16, Z+25	; 0x19
    9b44:	12 8d       	ldd	r17, Z+26	; 0x1a
    9b46:	23 8d       	ldd	r18, Z+27	; 0x1b
    9b48:	34 8d       	ldd	r19, Z+28	; 0x1c
    9b4a:	40 17       	cp	r20, r16
    9b4c:	51 07       	cpc	r21, r17
    9b4e:	62 07       	cpc	r22, r18
    9b50:	73 07       	cpc	r23, r19
    9b52:	08 f0       	brcs	.+2      	; 0x9b56 <get_fat.isra.10+0x2e>
    9b54:	94 c0       	rjmp	.+296    	; 0x9c7e <get_fat.isra.10+0x156>
    9b56:	6a 01       	movw	r12, r20
    9b58:	7b 01       	movw	r14, r22
    9b5a:	8c 01       	movw	r16, r24
    9b5c:	80 81       	ld	r24, Z
    9b5e:	82 30       	cpi	r24, 0x02	; 2
    9b60:	09 f4       	brne	.+2      	; 0x9b64 <get_fat.isra.10+0x3c>
    9b62:	4b c0       	rjmp	.+150    	; 0x9bfa <get_fat.isra.10+0xd2>
    9b64:	83 30       	cpi	r24, 0x03	; 3
    9b66:	09 f4       	brne	.+2      	; 0x9b6a <get_fat.isra.10+0x42>
    9b68:	67 c0       	rjmp	.+206    	; 0x9c38 <get_fat.isra.10+0x110>
    9b6a:	81 30       	cpi	r24, 0x01	; 1
    9b6c:	09 f0       	breq	.+2      	; 0x9b70 <get_fat.isra.10+0x48>
    9b6e:	87 c0       	rjmp	.+270    	; 0x9c7e <get_fat.isra.10+0x156>
    9b70:	ea 01       	movw	r28, r20
    9b72:	d6 95       	lsr	r29
    9b74:	c7 95       	ror	r28
    9b76:	cc 0d       	add	r28, r12
    9b78:	dd 1d       	adc	r29, r13
    9b7a:	ce 01       	movw	r24, r28
    9b7c:	89 2f       	mov	r24, r25
    9b7e:	99 27       	eor	r25, r25
    9b80:	86 95       	lsr	r24
    9b82:	45 a1       	ldd	r20, Z+37	; 0x25
    9b84:	56 a1       	ldd	r21, Z+38	; 0x26
    9b86:	67 a1       	ldd	r22, Z+39	; 0x27
    9b88:	70 a5       	ldd	r23, Z+40	; 0x28
    9b8a:	48 0f       	add	r20, r24
    9b8c:	59 1f       	adc	r21, r25
    9b8e:	61 1d       	adc	r22, r1
    9b90:	71 1d       	adc	r23, r1
    9b92:	cf 01       	movw	r24, r30
    9b94:	f9 db       	rcall	.-2062   	; 0x9388 <move_window>
    9b96:	89 2b       	or	r24, r25
    9b98:	21 f0       	breq	.+8      	; 0x9ba2 <get_fat.isra.10+0x7a>
    9b9a:	6f ef       	ldi	r22, 0xFF	; 255
    9b9c:	7f ef       	ldi	r23, 0xFF	; 255
    9b9e:	cb 01       	movw	r24, r22
    9ba0:	72 c0       	rjmp	.+228    	; 0x9c86 <get_fat.isra.10+0x15e>
    9ba2:	5e 01       	movw	r10, r28
    9ba4:	ff ef       	ldi	r31, 0xFF	; 255
    9ba6:	af 1a       	sub	r10, r31
    9ba8:	bf 0a       	sbc	r11, r31
    9baa:	d1 70       	andi	r29, 0x01	; 1
    9bac:	c0 0f       	add	r28, r16
    9bae:	d1 1f       	adc	r29, r17
    9bb0:	cd a9       	ldd	r28, Y+53	; 0x35
    9bb2:	c5 01       	movw	r24, r10
    9bb4:	89 2f       	mov	r24, r25
    9bb6:	99 27       	eor	r25, r25
    9bb8:	86 95       	lsr	r24
    9bba:	f8 01       	movw	r30, r16
    9bbc:	45 a1       	ldd	r20, Z+37	; 0x25
    9bbe:	56 a1       	ldd	r21, Z+38	; 0x26
    9bc0:	67 a1       	ldd	r22, Z+39	; 0x27
    9bc2:	70 a5       	ldd	r23, Z+40	; 0x28
    9bc4:	48 0f       	add	r20, r24
    9bc6:	59 1f       	adc	r21, r25
    9bc8:	61 1d       	adc	r22, r1
    9bca:	71 1d       	adc	r23, r1
    9bcc:	c8 01       	movw	r24, r16
    9bce:	dc db       	rcall	.-2120   	; 0x9388 <move_window>
    9bd0:	89 2b       	or	r24, r25
    9bd2:	19 f7       	brne	.-58     	; 0x9b9a <get_fat.isra.10+0x72>
    9bd4:	f1 e0       	ldi	r31, 0x01	; 1
    9bd6:	bf 22       	and	r11, r31
    9bd8:	f8 01       	movw	r30, r16
    9bda:	ea 0d       	add	r30, r10
    9bdc:	fb 1d       	adc	r31, r11
    9bde:	85 a9       	ldd	r24, Z+53	; 0x35
    9be0:	6c 2f       	mov	r22, r28
    9be2:	70 e0       	ldi	r23, 0x00	; 0
    9be4:	78 2b       	or	r23, r24
    9be6:	c0 fe       	sbrs	r12, 0
    9be8:	06 c0       	rjmp	.+12     	; 0x9bf6 <get_fat.isra.10+0xce>
    9bea:	54 e0       	ldi	r21, 0x04	; 4
    9bec:	76 95       	lsr	r23
    9bee:	67 95       	ror	r22
    9bf0:	5a 95       	dec	r21
    9bf2:	e1 f7       	brne	.-8      	; 0x9bec <get_fat.isra.10+0xc4>
    9bf4:	1e c0       	rjmp	.+60     	; 0x9c32 <get_fat.isra.10+0x10a>
    9bf6:	7f 70       	andi	r23, 0x0F	; 15
    9bf8:	1c c0       	rjmp	.+56     	; 0x9c32 <get_fat.isra.10+0x10a>
    9bfa:	77 27       	eor	r23, r23
    9bfc:	6f 2d       	mov	r22, r15
    9bfe:	5e 2d       	mov	r21, r14
    9c00:	4d 2d       	mov	r20, r13
    9c02:	85 a1       	ldd	r24, Z+37	; 0x25
    9c04:	96 a1       	ldd	r25, Z+38	; 0x26
    9c06:	a7 a1       	ldd	r26, Z+39	; 0x27
    9c08:	b0 a5       	ldd	r27, Z+40	; 0x28
    9c0a:	48 0f       	add	r20, r24
    9c0c:	59 1f       	adc	r21, r25
    9c0e:	6a 1f       	adc	r22, r26
    9c10:	7b 1f       	adc	r23, r27
    9c12:	cf 01       	movw	r24, r30
    9c14:	b9 db       	rcall	.-2190   	; 0x9388 <move_window>
    9c16:	89 2b       	or	r24, r25
    9c18:	09 f0       	breq	.+2      	; 0x9c1c <get_fat.isra.10+0xf4>
    9c1a:	bf cf       	rjmp	.-130    	; 0x9b9a <get_fat.isra.10+0x72>
    9c1c:	cc 0c       	add	r12, r12
    9c1e:	dd 1c       	adc	r13, r13
    9c20:	e8 94       	clt
    9c22:	c0 f8       	bld	r12, 0
    9c24:	f1 e0       	ldi	r31, 0x01	; 1
    9c26:	df 22       	and	r13, r31
    9c28:	f8 01       	movw	r30, r16
    9c2a:	ec 0d       	add	r30, r12
    9c2c:	fd 1d       	adc	r31, r13
    9c2e:	65 a9       	ldd	r22, Z+53	; 0x35
    9c30:	76 a9       	ldd	r23, Z+54	; 0x36
    9c32:	80 e0       	ldi	r24, 0x00	; 0
    9c34:	90 e0       	ldi	r25, 0x00	; 0
    9c36:	27 c0       	rjmp	.+78     	; 0x9c86 <get_fat.isra.10+0x15e>
    9c38:	85 a1       	ldd	r24, Z+37	; 0x25
    9c3a:	96 a1       	ldd	r25, Z+38	; 0x26
    9c3c:	a7 a1       	ldd	r26, Z+39	; 0x27
    9c3e:	b0 a5       	ldd	r27, Z+40	; 0x28
    9c40:	27 e0       	ldi	r18, 0x07	; 7
    9c42:	76 95       	lsr	r23
    9c44:	67 95       	ror	r22
    9c46:	57 95       	ror	r21
    9c48:	47 95       	ror	r20
    9c4a:	2a 95       	dec	r18
    9c4c:	d1 f7       	brne	.-12     	; 0x9c42 <get_fat.isra.10+0x11a>
    9c4e:	48 0f       	add	r20, r24
    9c50:	59 1f       	adc	r21, r25
    9c52:	6a 1f       	adc	r22, r26
    9c54:	7b 1f       	adc	r23, r27
    9c56:	cf 01       	movw	r24, r30
    9c58:	97 db       	rcall	.-2258   	; 0x9388 <move_window>
    9c5a:	89 2b       	or	r24, r25
    9c5c:	09 f0       	breq	.+2      	; 0x9c60 <get_fat.isra.10+0x138>
    9c5e:	9d cf       	rjmp	.-198    	; 0x9b9a <get_fat.isra.10+0x72>
    9c60:	0b 5c       	subi	r16, 0xCB	; 203
    9c62:	1f 4f       	sbci	r17, 0xFF	; 255
    9c64:	cc 0c       	add	r12, r12
    9c66:	dd 1c       	adc	r13, r13
    9c68:	cc 0c       	add	r12, r12
    9c6a:	dd 1c       	adc	r13, r13
    9c6c:	c6 01       	movw	r24, r12
    9c6e:	8c 7f       	andi	r24, 0xFC	; 252
    9c70:	91 70       	andi	r25, 0x01	; 1
    9c72:	80 0f       	add	r24, r16
    9c74:	91 1f       	adc	r25, r17
    9c76:	0e 94 e9 44 	call	0x89d2	; 0x89d2 <ld_dword>
    9c7a:	9f 70       	andi	r25, 0x0F	; 15
    9c7c:	04 c0       	rjmp	.+8      	; 0x9c86 <get_fat.isra.10+0x15e>
    9c7e:	61 e0       	ldi	r22, 0x01	; 1
    9c80:	70 e0       	ldi	r23, 0x00	; 0
    9c82:	80 e0       	ldi	r24, 0x00	; 0
    9c84:	90 e0       	ldi	r25, 0x00	; 0
    9c86:	cd b7       	in	r28, 0x3d	; 61
    9c88:	de b7       	in	r29, 0x3e	; 62
    9c8a:	ea e0       	ldi	r30, 0x0A	; 10
    9c8c:	0c 94 fc e0 	jmp	0x1c1f8	; 0x1c1f8 <__epilogue_restores__+0x10>

00009c90 <dir_sdi>:
    9c90:	a0 e0       	ldi	r26, 0x00	; 0
    9c92:	b0 e0       	ldi	r27, 0x00	; 0
    9c94:	ee e4       	ldi	r30, 0x4E	; 78
    9c96:	fe e4       	ldi	r31, 0x4E	; 78
    9c98:	0c 94 da e0 	jmp	0x1c1b4	; 0x1c1b4 <__prologue_saves__+0x4>
    9c9c:	ec 01       	movw	r28, r24
    9c9e:	6a 01       	movw	r12, r20
    9ca0:	7b 01       	movw	r14, r22
    9ca2:	41 15       	cp	r20, r1
    9ca4:	51 05       	cpc	r21, r1
    9ca6:	80 e2       	ldi	r24, 0x20	; 32
    9ca8:	68 07       	cpc	r22, r24
    9caa:	71 05       	cpc	r23, r1
    9cac:	18 f0       	brcs	.+6      	; 0x9cb4 <dir_sdi+0x24>
    9cae:	82 e0       	ldi	r24, 0x02	; 2
    9cb0:	90 e0       	ldi	r25, 0x00	; 0
    9cb2:	aa c0       	rjmp	.+340    	; 0x9e08 <dir_sdi+0x178>
    9cb4:	db 01       	movw	r26, r22
    9cb6:	ca 01       	movw	r24, r20
    9cb8:	8f 71       	andi	r24, 0x1F	; 31
    9cba:	99 27       	eor	r25, r25
    9cbc:	aa 27       	eor	r26, r26
    9cbe:	bb 27       	eor	r27, r27
    9cc0:	89 2b       	or	r24, r25
    9cc2:	8a 2b       	or	r24, r26
    9cc4:	8b 2b       	or	r24, r27
    9cc6:	99 f7       	brne	.-26     	; 0x9cae <dir_sdi+0x1e>
    9cc8:	08 81       	ld	r16, Y
    9cca:	19 81       	ldd	r17, Y+1	; 0x01
    9ccc:	4e 87       	std	Y+14, r20	; 0x0e
    9cce:	5f 87       	std	Y+15, r21	; 0x0f
    9cd0:	68 8b       	std	Y+16, r22	; 0x10
    9cd2:	79 8b       	std	Y+17, r23	; 0x11
    9cd4:	8e 80       	ldd	r8, Y+6	; 0x06
    9cd6:	9f 80       	ldd	r9, Y+7	; 0x07
    9cd8:	a8 84       	ldd	r10, Y+8	; 0x08
    9cda:	b9 84       	ldd	r11, Y+9	; 0x09
    9cdc:	81 14       	cp	r8, r1
    9cde:	91 04       	cpc	r9, r1
    9ce0:	a1 04       	cpc	r10, r1
    9ce2:	b1 04       	cpc	r11, r1
    9ce4:	51 f5       	brne	.+84     	; 0x9d3a <dir_sdi+0xaa>
    9ce6:	f8 01       	movw	r30, r16
    9ce8:	80 81       	ld	r24, Z
    9cea:	83 30       	cpi	r24, 0x03	; 3
    9cec:	40 f0       	brcs	.+16     	; 0x9cfe <dir_sdi+0x6e>
    9cee:	81 a5       	ldd	r24, Z+41	; 0x29
    9cf0:	92 a5       	ldd	r25, Z+42	; 0x2a
    9cf2:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9cf4:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9cf6:	00 97       	sbiw	r24, 0x00	; 0
    9cf8:	a1 05       	cpc	r26, r1
    9cfa:	b1 05       	cpc	r27, r1
    9cfc:	e1 f4       	brne	.+56     	; 0x9d36 <dir_sdi+0xa6>
    9cfe:	f8 01       	movw	r30, r16
    9d00:	87 81       	ldd	r24, Z+7	; 0x07
    9d02:	90 85       	ldd	r25, Z+8	; 0x08
    9d04:	a0 e0       	ldi	r26, 0x00	; 0
    9d06:	b0 e0       	ldi	r27, 0x00	; 0
    9d08:	b7 01       	movw	r22, r14
    9d0a:	a6 01       	movw	r20, r12
    9d0c:	25 e0       	ldi	r18, 0x05	; 5
    9d0e:	76 95       	lsr	r23
    9d10:	67 95       	ror	r22
    9d12:	57 95       	ror	r21
    9d14:	47 95       	ror	r20
    9d16:	2a 95       	dec	r18
    9d18:	d1 f7       	brne	.-12     	; 0x9d0e <dir_sdi+0x7e>
    9d1a:	48 17       	cp	r20, r24
    9d1c:	59 07       	cpc	r21, r25
    9d1e:	6a 07       	cpc	r22, r26
    9d20:	7b 07       	cpc	r23, r27
    9d22:	28 f6       	brcc	.-118    	; 0x9cae <dir_sdi+0x1e>
    9d24:	81 a5       	ldd	r24, Z+41	; 0x29
    9d26:	92 a5       	ldd	r25, Z+42	; 0x2a
    9d28:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9d2a:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9d2c:	8e 8b       	std	Y+22, r24	; 0x16
    9d2e:	9f 8b       	std	Y+23, r25	; 0x17
    9d30:	a8 8f       	std	Y+24, r26	; 0x18
    9d32:	b9 8f       	std	Y+25, r27	; 0x19
    9d34:	3e c0       	rjmp	.+124    	; 0x9db2 <dir_sdi+0x122>
    9d36:	4c 01       	movw	r8, r24
    9d38:	5d 01       	movw	r10, r26
    9d3a:	f8 01       	movw	r30, r16
    9d3c:	41 84       	ldd	r4, Z+9	; 0x09
    9d3e:	52 84       	ldd	r5, Z+10	; 0x0a
    9d40:	61 2c       	mov	r6, r1
    9d42:	71 2c       	mov	r7, r1
    9d44:	39 e0       	ldi	r19, 0x09	; 9
    9d46:	44 0c       	add	r4, r4
    9d48:	55 1c       	adc	r5, r5
    9d4a:	66 1c       	adc	r6, r6
    9d4c:	77 1c       	adc	r7, r7
    9d4e:	3a 95       	dec	r19
    9d50:	d1 f7       	brne	.-12     	; 0x9d46 <dir_sdi+0xb6>
    9d52:	b5 01       	movw	r22, r10
    9d54:	a4 01       	movw	r20, r8
    9d56:	c4 14       	cp	r12, r4
    9d58:	d5 04       	cpc	r13, r5
    9d5a:	e6 04       	cpc	r14, r6
    9d5c:	f7 04       	cpc	r15, r7
    9d5e:	10 f1       	brcs	.+68     	; 0x9da4 <dir_sdi+0x114>
    9d60:	88 81       	ld	r24, Y
    9d62:	99 81       	ldd	r25, Y+1	; 0x01
    9d64:	e1 de       	rcall	.-574    	; 0x9b28 <get_fat.isra.10>
    9d66:	4b 01       	movw	r8, r22
    9d68:	5c 01       	movw	r10, r24
    9d6a:	6f 3f       	cpi	r22, 0xFF	; 255
    9d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    9d6e:	8f 4f       	sbci	r24, 0xFF	; 255
    9d70:	9f 4f       	sbci	r25, 0xFF	; 255
    9d72:	09 f4       	brne	.+2      	; 0x9d76 <dir_sdi+0xe6>
    9d74:	47 c0       	rjmp	.+142    	; 0x9e04 <dir_sdi+0x174>
    9d76:	82 e0       	ldi	r24, 0x02	; 2
    9d78:	88 16       	cp	r8, r24
    9d7a:	91 04       	cpc	r9, r1
    9d7c:	a1 04       	cpc	r10, r1
    9d7e:	b1 04       	cpc	r11, r1
    9d80:	08 f4       	brcc	.+2      	; 0x9d84 <dir_sdi+0xf4>
    9d82:	95 cf       	rjmp	.-214    	; 0x9cae <dir_sdi+0x1e>
    9d84:	f8 01       	movw	r30, r16
    9d86:	81 8d       	ldd	r24, Z+25	; 0x19
    9d88:	92 8d       	ldd	r25, Z+26	; 0x1a
    9d8a:	a3 8d       	ldd	r26, Z+27	; 0x1b
    9d8c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    9d8e:	88 16       	cp	r8, r24
    9d90:	99 06       	cpc	r9, r25
    9d92:	aa 06       	cpc	r10, r26
    9d94:	bb 06       	cpc	r11, r27
    9d96:	08 f0       	brcs	.+2      	; 0x9d9a <dir_sdi+0x10a>
    9d98:	8a cf       	rjmp	.-236    	; 0x9cae <dir_sdi+0x1e>
    9d9a:	c4 18       	sub	r12, r4
    9d9c:	d5 08       	sbc	r13, r5
    9d9e:	e6 08       	sbc	r14, r6
    9da0:	f7 08       	sbc	r15, r7
    9da2:	d7 cf       	rjmp	.-82     	; 0x9d52 <dir_sdi+0xc2>
    9da4:	c8 01       	movw	r24, r16
    9da6:	0e 94 a2 45 	call	0x8b44	; 0x8b44 <clst2sect>
    9daa:	6e 8b       	std	Y+22, r22	; 0x16
    9dac:	7f 8b       	std	Y+23, r23	; 0x17
    9dae:	88 8f       	std	Y+24, r24	; 0x18
    9db0:	99 8f       	std	Y+25, r25	; 0x19
    9db2:	8a 8a       	std	Y+18, r8	; 0x12
    9db4:	9b 8a       	std	Y+19, r9	; 0x13
    9db6:	ac 8a       	std	Y+20, r10	; 0x14
    9db8:	bd 8a       	std	Y+21, r11	; 0x15
    9dba:	8e 89       	ldd	r24, Y+22	; 0x16
    9dbc:	9f 89       	ldd	r25, Y+23	; 0x17
    9dbe:	a8 8d       	ldd	r26, Y+24	; 0x18
    9dc0:	b9 8d       	ldd	r27, Y+25	; 0x19
    9dc2:	00 97       	sbiw	r24, 0x00	; 0
    9dc4:	a1 05       	cpc	r26, r1
    9dc6:	b1 05       	cpc	r27, r1
    9dc8:	09 f4       	brne	.+2      	; 0x9dcc <dir_sdi+0x13c>
    9dca:	71 cf       	rjmp	.-286    	; 0x9cae <dir_sdi+0x1e>
    9dcc:	b7 01       	movw	r22, r14
    9dce:	a6 01       	movw	r20, r12
    9dd0:	29 e0       	ldi	r18, 0x09	; 9
    9dd2:	76 95       	lsr	r23
    9dd4:	67 95       	ror	r22
    9dd6:	57 95       	ror	r21
    9dd8:	47 95       	ror	r20
    9dda:	2a 95       	dec	r18
    9ddc:	d1 f7       	brne	.-12     	; 0x9dd2 <dir_sdi+0x142>
    9dde:	84 0f       	add	r24, r20
    9de0:	95 1f       	adc	r25, r21
    9de2:	a6 1f       	adc	r26, r22
    9de4:	b7 1f       	adc	r27, r23
    9de6:	8e 8b       	std	Y+22, r24	; 0x16
    9de8:	9f 8b       	std	Y+23, r25	; 0x17
    9dea:	a8 8f       	std	Y+24, r26	; 0x18
    9dec:	b9 8f       	std	Y+25, r27	; 0x19
    9dee:	0b 5c       	subi	r16, 0xCB	; 203
    9df0:	1f 4f       	sbci	r17, 0xFF	; 255
    9df2:	f1 e0       	ldi	r31, 0x01	; 1
    9df4:	df 22       	and	r13, r31
    9df6:	c0 0e       	add	r12, r16
    9df8:	d1 1e       	adc	r13, r17
    9dfa:	db 8e       	std	Y+27, r13	; 0x1b
    9dfc:	ca 8e       	std	Y+26, r12	; 0x1a
    9dfe:	80 e0       	ldi	r24, 0x00	; 0
    9e00:	90 e0       	ldi	r25, 0x00	; 0
    9e02:	02 c0       	rjmp	.+4      	; 0x9e08 <dir_sdi+0x178>
    9e04:	81 e0       	ldi	r24, 0x01	; 1
    9e06:	90 e0       	ldi	r25, 0x00	; 0
    9e08:	cd b7       	in	r28, 0x3d	; 61
    9e0a:	de b7       	in	r29, 0x3e	; 62
    9e0c:	e0 e1       	ldi	r30, 0x10	; 16
    9e0e:	0c 94 f6 e0 	jmp	0x1c1ec	; 0x1c1ec <__epilogue_restores__+0x4>

00009e12 <create_chain>:
    9e12:	a0 e0       	ldi	r26, 0x00	; 0
    9e14:	b0 e0       	ldi	r27, 0x00	; 0
    9e16:	ef e0       	ldi	r30, 0x0F	; 15
    9e18:	ff e4       	ldi	r31, 0x4F	; 79
    9e1a:	0c 94 da e0 	jmp	0x1c1b4	; 0x1c1b4 <__prologue_saves__+0x4>
    9e1e:	8c 01       	movw	r16, r24
    9e20:	2a 01       	movw	r4, r20
    9e22:	3b 01       	movw	r6, r22
    9e24:	fc 01       	movw	r30, r24
    9e26:	c0 81       	ld	r28, Z
    9e28:	d1 81       	ldd	r29, Z+1	; 0x01
    9e2a:	41 15       	cp	r20, r1
    9e2c:	51 05       	cpc	r21, r1
    9e2e:	61 05       	cpc	r22, r1
    9e30:	71 05       	cpc	r23, r1
    9e32:	99 f4       	brne	.+38     	; 0x9e5a <create_chain+0x48>
    9e34:	8d 84       	ldd	r8, Y+13	; 0x0d
    9e36:	9e 84       	ldd	r9, Y+14	; 0x0e
    9e38:	af 84       	ldd	r10, Y+15	; 0x0f
    9e3a:	b8 88       	ldd	r11, Y+16	; 0x10
    9e3c:	81 14       	cp	r8, r1
    9e3e:	91 04       	cpc	r9, r1
    9e40:	a1 04       	cpc	r10, r1
    9e42:	b1 04       	cpc	r11, r1
    9e44:	51 f1       	breq	.+84     	; 0x9e9a <create_chain+0x88>
    9e46:	89 8d       	ldd	r24, Y+25	; 0x19
    9e48:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9e4a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9e4c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9e4e:	88 16       	cp	r8, r24
    9e50:	99 06       	cpc	r9, r25
    9e52:	aa 06       	cpc	r10, r26
    9e54:	bb 06       	cpc	r11, r27
    9e56:	28 f1       	brcs	.+74     	; 0x9ea2 <create_chain+0x90>
    9e58:	20 c0       	rjmp	.+64     	; 0x9e9a <create_chain+0x88>
    9e5a:	ce 01       	movw	r24, r28
    9e5c:	65 de       	rcall	.-822    	; 0x9b28 <get_fat.isra.10>
    9e5e:	62 30       	cpi	r22, 0x02	; 2
    9e60:	71 05       	cpc	r23, r1
    9e62:	81 05       	cpc	r24, r1
    9e64:	91 05       	cpc	r25, r1
    9e66:	08 f4       	brcc	.+2      	; 0x9e6a <create_chain+0x58>
    9e68:	ea c0       	rjmp	.+468    	; 0xa03e <create_chain+0x22c>
    9e6a:	6f 3f       	cpi	r22, 0xFF	; 255
    9e6c:	ff ef       	ldi	r31, 0xFF	; 255
    9e6e:	7f 07       	cpc	r23, r31
    9e70:	8f 07       	cpc	r24, r31
    9e72:	9f 07       	cpc	r25, r31
    9e74:	29 f4       	brne	.+10     	; 0x9e80 <create_chain+0x6e>
    9e76:	4f ef       	ldi	r20, 0xFF	; 255
    9e78:	3f ef       	ldi	r19, 0xFF	; 255
    9e7a:	2f ef       	ldi	r18, 0xFF	; 255
    9e7c:	9f ef       	ldi	r25, 0xFF	; 255
    9e7e:	e7 c0       	rjmp	.+462    	; 0xa04e <create_chain+0x23c>
    9e80:	c9 8c       	ldd	r12, Y+25	; 0x19
    9e82:	da 8c       	ldd	r13, Y+26	; 0x1a
    9e84:	eb 8c       	ldd	r14, Y+27	; 0x1b
    9e86:	fc 8c       	ldd	r15, Y+28	; 0x1c
    9e88:	6c 15       	cp	r22, r12
    9e8a:	7d 05       	cpc	r23, r13
    9e8c:	8e 05       	cpc	r24, r14
    9e8e:	9f 05       	cpc	r25, r15
    9e90:	08 f4       	brcc	.+2      	; 0x9e94 <create_chain+0x82>
    9e92:	da c0       	rjmp	.+436    	; 0xa048 <create_chain+0x236>
    9e94:	53 01       	movw	r10, r6
    9e96:	42 01       	movw	r8, r4
    9e98:	04 c0       	rjmp	.+8      	; 0x9ea2 <create_chain+0x90>
    9e9a:	81 2c       	mov	r8, r1
    9e9c:	91 2c       	mov	r9, r1
    9e9e:	54 01       	movw	r10, r8
    9ea0:	83 94       	inc	r8
    9ea2:	89 89       	ldd	r24, Y+17	; 0x11
    9ea4:	9a 89       	ldd	r25, Y+18	; 0x12
    9ea6:	ab 89       	ldd	r26, Y+19	; 0x13
    9ea8:	bc 89       	ldd	r27, Y+20	; 0x14
    9eaa:	89 2b       	or	r24, r25
    9eac:	8a 2b       	or	r24, r26
    9eae:	8b 2b       	or	r24, r27
    9eb0:	11 f4       	brne	.+4      	; 0x9eb6 <create_chain+0xa4>
    9eb2:	40 e0       	ldi	r20, 0x00	; 0
    9eb4:	c5 c0       	rjmp	.+394    	; 0xa040 <create_chain+0x22e>
    9eb6:	84 14       	cp	r8, r4
    9eb8:	95 04       	cpc	r9, r5
    9eba:	a6 04       	cpc	r10, r6
    9ebc:	b7 04       	cpc	r11, r7
    9ebe:	09 f0       	breq	.+2      	; 0x9ec2 <create_chain+0xb0>
    9ec0:	46 c0       	rjmp	.+140    	; 0x9f4e <create_chain+0x13c>
    9ec2:	75 01       	movw	r14, r10
    9ec4:	64 01       	movw	r12, r8
    9ec6:	2f ef       	ldi	r18, 0xFF	; 255
    9ec8:	c2 1a       	sub	r12, r18
    9eca:	d2 0a       	sbc	r13, r18
    9ecc:	e2 0a       	sbc	r14, r18
    9ece:	f2 0a       	sbc	r15, r18
    9ed0:	89 8d       	ldd	r24, Y+25	; 0x19
    9ed2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9ed4:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9ed6:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9ed8:	c8 16       	cp	r12, r24
    9eda:	d9 06       	cpc	r13, r25
    9edc:	ea 06       	cpc	r14, r26
    9ede:	fb 06       	cpc	r15, r27
    9ee0:	28 f0       	brcs	.+10     	; 0x9eec <create_chain+0xda>
    9ee2:	92 e0       	ldi	r25, 0x02	; 2
    9ee4:	c9 2e       	mov	r12, r25
    9ee6:	d1 2c       	mov	r13, r1
    9ee8:	e1 2c       	mov	r14, r1
    9eea:	f1 2c       	mov	r15, r1
    9eec:	b7 01       	movw	r22, r14
    9eee:	a6 01       	movw	r20, r12
    9ef0:	f8 01       	movw	r30, r16
    9ef2:	80 81       	ld	r24, Z
    9ef4:	91 81       	ldd	r25, Z+1	; 0x01
    9ef6:	18 de       	rcall	.-976    	; 0x9b28 <get_fat.isra.10>
    9ef8:	61 30       	cpi	r22, 0x01	; 1
    9efa:	71 05       	cpc	r23, r1
    9efc:	81 05       	cpc	r24, r1
    9efe:	91 05       	cpc	r25, r1
    9f00:	09 f4       	brne	.+2      	; 0x9f04 <create_chain+0xf2>
    9f02:	9d c0       	rjmp	.+314    	; 0xa03e <create_chain+0x22c>
    9f04:	6f 3f       	cpi	r22, 0xFF	; 255
    9f06:	ff ef       	ldi	r31, 0xFF	; 255
    9f08:	7f 07       	cpc	r23, r31
    9f0a:	8f 07       	cpc	r24, r31
    9f0c:	9f 07       	cpc	r25, r31
    9f0e:	09 f4       	brne	.+2      	; 0x9f12 <create_chain+0x100>
    9f10:	b2 cf       	rjmp	.-156    	; 0x9e76 <create_chain+0x64>
    9f12:	67 2b       	or	r22, r23
    9f14:	68 2b       	or	r22, r24
    9f16:	69 2b       	or	r22, r25
    9f18:	a9 f0       	breq	.+42     	; 0x9f44 <create_chain+0x132>
    9f1a:	8d 85       	ldd	r24, Y+13	; 0x0d
    9f1c:	9e 85       	ldd	r25, Y+14	; 0x0e
    9f1e:	af 85       	ldd	r26, Y+15	; 0x0f
    9f20:	b8 89       	ldd	r27, Y+16	; 0x10
    9f22:	82 30       	cpi	r24, 0x02	; 2
    9f24:	91 05       	cpc	r25, r1
    9f26:	a1 05       	cpc	r26, r1
    9f28:	b1 05       	cpc	r27, r1
    9f2a:	88 f0       	brcs	.+34     	; 0x9f4e <create_chain+0x13c>
    9f2c:	49 8d       	ldd	r20, Y+25	; 0x19
    9f2e:	5a 8d       	ldd	r21, Y+26	; 0x1a
    9f30:	6b 8d       	ldd	r22, Y+27	; 0x1b
    9f32:	7c 8d       	ldd	r23, Y+28	; 0x1c
    9f34:	84 17       	cp	r24, r20
    9f36:	95 07       	cpc	r25, r21
    9f38:	a6 07       	cpc	r26, r22
    9f3a:	b7 07       	cpc	r27, r23
    9f3c:	40 f4       	brcc	.+16     	; 0x9f4e <create_chain+0x13c>
    9f3e:	4c 01       	movw	r8, r24
    9f40:	5d 01       	movw	r10, r26
    9f42:	05 c0       	rjmp	.+10     	; 0x9f4e <create_chain+0x13c>
    9f44:	c1 14       	cp	r12, r1
    9f46:	d1 04       	cpc	r13, r1
    9f48:	e1 04       	cpc	r14, r1
    9f4a:	f1 04       	cpc	r15, r1
    9f4c:	c9 f5       	brne	.+114    	; 0x9fc0 <create_chain+0x1ae>
    9f4e:	75 01       	movw	r14, r10
    9f50:	64 01       	movw	r12, r8
    9f52:	2f ef       	ldi	r18, 0xFF	; 255
    9f54:	c2 1a       	sub	r12, r18
    9f56:	d2 0a       	sbc	r13, r18
    9f58:	e2 0a       	sbc	r14, r18
    9f5a:	f2 0a       	sbc	r15, r18
    9f5c:	89 8d       	ldd	r24, Y+25	; 0x19
    9f5e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9f60:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9f62:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9f64:	c8 16       	cp	r12, r24
    9f66:	d9 06       	cpc	r13, r25
    9f68:	ea 06       	cpc	r14, r26
    9f6a:	fb 06       	cpc	r15, r27
    9f6c:	60 f0       	brcs	.+24     	; 0x9f86 <create_chain+0x174>
    9f6e:	82 e0       	ldi	r24, 0x02	; 2
    9f70:	88 16       	cp	r8, r24
    9f72:	91 04       	cpc	r9, r1
    9f74:	a1 04       	cpc	r10, r1
    9f76:	b1 04       	cpc	r11, r1
    9f78:	08 f4       	brcc	.+2      	; 0x9f7c <create_chain+0x16a>
    9f7a:	9b cf       	rjmp	.-202    	; 0x9eb2 <create_chain+0xa0>
    9f7c:	82 e0       	ldi	r24, 0x02	; 2
    9f7e:	c8 2e       	mov	r12, r24
    9f80:	d1 2c       	mov	r13, r1
    9f82:	e1 2c       	mov	r14, r1
    9f84:	f1 2c       	mov	r15, r1
    9f86:	b7 01       	movw	r22, r14
    9f88:	a6 01       	movw	r20, r12
    9f8a:	f8 01       	movw	r30, r16
    9f8c:	80 81       	ld	r24, Z
    9f8e:	91 81       	ldd	r25, Z+1	; 0x01
    9f90:	cb dd       	rcall	.-1130   	; 0x9b28 <get_fat.isra.10>
    9f92:	61 15       	cp	r22, r1
    9f94:	71 05       	cpc	r23, r1
    9f96:	81 05       	cpc	r24, r1
    9f98:	91 05       	cpc	r25, r1
    9f9a:	91 f0       	breq	.+36     	; 0x9fc0 <create_chain+0x1ae>
    9f9c:	61 30       	cpi	r22, 0x01	; 1
    9f9e:	71 05       	cpc	r23, r1
    9fa0:	81 05       	cpc	r24, r1
    9fa2:	91 05       	cpc	r25, r1
    9fa4:	09 f4       	brne	.+2      	; 0x9fa8 <create_chain+0x196>
    9fa6:	4b c0       	rjmp	.+150    	; 0xa03e <create_chain+0x22c>
    9fa8:	6f 3f       	cpi	r22, 0xFF	; 255
    9faa:	7f 4f       	sbci	r23, 0xFF	; 255
    9fac:	8f 4f       	sbci	r24, 0xFF	; 255
    9fae:	9f 4f       	sbci	r25, 0xFF	; 255
    9fb0:	09 f4       	brne	.+2      	; 0x9fb4 <create_chain+0x1a2>
    9fb2:	61 cf       	rjmp	.-318    	; 0x9e76 <create_chain+0x64>
    9fb4:	c8 14       	cp	r12, r8
    9fb6:	d9 04       	cpc	r13, r9
    9fb8:	ea 04       	cpc	r14, r10
    9fba:	fb 04       	cpc	r15, r11
    9fbc:	51 f6       	brne	.-108    	; 0x9f52 <create_chain+0x140>
    9fbe:	79 cf       	rjmp	.-270    	; 0x9eb2 <create_chain+0xa0>
    9fc0:	0f ef       	ldi	r16, 0xFF	; 255
    9fc2:	1f ef       	ldi	r17, 0xFF	; 255
    9fc4:	98 01       	movw	r18, r16
    9fc6:	b7 01       	movw	r22, r14
    9fc8:	a6 01       	movw	r20, r12
    9fca:	ce 01       	movw	r24, r28
    9fcc:	b2 dc       	rcall	.-1692   	; 0x9932 <put_fat>
    9fce:	00 97       	sbiw	r24, 0x00	; 0
    9fd0:	99 f5       	brne	.+102    	; 0xa038 <create_chain+0x226>
    9fd2:	41 14       	cp	r4, r1
    9fd4:	51 04       	cpc	r5, r1
    9fd6:	61 04       	cpc	r6, r1
    9fd8:	71 04       	cpc	r7, r1
    9fda:	e9 f4       	brne	.+58     	; 0xa016 <create_chain+0x204>
    9fdc:	cd 86       	std	Y+13, r12	; 0x0d
    9fde:	de 86       	std	Y+14, r13	; 0x0e
    9fe0:	ef 86       	std	Y+15, r14	; 0x0f
    9fe2:	f8 8a       	std	Y+16, r15	; 0x10
    9fe4:	89 89       	ldd	r24, Y+17	; 0x11
    9fe6:	9a 89       	ldd	r25, Y+18	; 0x12
    9fe8:	ab 89       	ldd	r26, Y+19	; 0x13
    9fea:	bc 89       	ldd	r27, Y+20	; 0x14
    9fec:	49 8d       	ldd	r20, Y+25	; 0x19
    9fee:	5a 8d       	ldd	r21, Y+26	; 0x1a
    9ff0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    9ff2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    9ff4:	42 50       	subi	r20, 0x02	; 2
    9ff6:	51 09       	sbc	r21, r1
    9ff8:	61 09       	sbc	r22, r1
    9ffa:	71 09       	sbc	r23, r1
    9ffc:	48 17       	cp	r20, r24
    9ffe:	59 07       	cpc	r21, r25
    a000:	6a 07       	cpc	r22, r26
    a002:	7b 07       	cpc	r23, r27
    a004:	88 f0       	brcs	.+34     	; 0xa028 <create_chain+0x216>
    a006:	01 97       	sbiw	r24, 0x01	; 1
    a008:	a1 09       	sbc	r26, r1
    a00a:	b1 09       	sbc	r27, r1
    a00c:	89 8b       	std	Y+17, r24	; 0x11
    a00e:	9a 8b       	std	Y+18, r25	; 0x12
    a010:	ab 8b       	std	Y+19, r26	; 0x13
    a012:	bc 8b       	std	Y+20, r27	; 0x14
    a014:	09 c0       	rjmp	.+18     	; 0xa028 <create_chain+0x216>
    a016:	97 01       	movw	r18, r14
    a018:	86 01       	movw	r16, r12
    a01a:	b3 01       	movw	r22, r6
    a01c:	a2 01       	movw	r20, r4
    a01e:	ce 01       	movw	r24, r28
    a020:	88 dc       	rcall	.-1776   	; 0x9932 <put_fat>
    a022:	00 97       	sbiw	r24, 0x00	; 0
    a024:	d9 f2       	breq	.-74     	; 0x9fdc <create_chain+0x1ca>
    a026:	08 c0       	rjmp	.+16     	; 0xa038 <create_chain+0x226>
    a028:	8c 81       	ldd	r24, Y+4	; 0x04
    a02a:	81 60       	ori	r24, 0x01	; 1
    a02c:	8c 83       	std	Y+4, r24	; 0x04
    a02e:	4c 2d       	mov	r20, r12
    a030:	3d 2d       	mov	r19, r13
    a032:	2e 2d       	mov	r18, r14
    a034:	9f 2d       	mov	r25, r15
    a036:	0b c0       	rjmp	.+22     	; 0xa04e <create_chain+0x23c>
    a038:	01 97       	sbiw	r24, 0x01	; 1
    a03a:	09 f4       	brne	.+2      	; 0xa03e <create_chain+0x22c>
    a03c:	1c cf       	rjmp	.-456    	; 0x9e76 <create_chain+0x64>
    a03e:	41 e0       	ldi	r20, 0x01	; 1
    a040:	30 e0       	ldi	r19, 0x00	; 0
    a042:	20 e0       	ldi	r18, 0x00	; 0
    a044:	90 e0       	ldi	r25, 0x00	; 0
    a046:	03 c0       	rjmp	.+6      	; 0xa04e <create_chain+0x23c>
    a048:	46 2f       	mov	r20, r22
    a04a:	37 2f       	mov	r19, r23
    a04c:	28 2f       	mov	r18, r24
    a04e:	64 2f       	mov	r22, r20
    a050:	73 2f       	mov	r23, r19
    a052:	82 2f       	mov	r24, r18
    a054:	cd b7       	in	r28, 0x3d	; 61
    a056:	de b7       	in	r29, 0x3e	; 62
    a058:	e0 e1       	ldi	r30, 0x10	; 16
    a05a:	0c 94 f6 e0 	jmp	0x1c1ec	; 0x1c1ec <__epilogue_restores__+0x4>

0000a05e <remove_chain>:
    a05e:	4f 92       	push	r4
    a060:	5f 92       	push	r5
    a062:	6f 92       	push	r6
    a064:	7f 92       	push	r7
    a066:	af 92       	push	r10
    a068:	bf 92       	push	r11
    a06a:	cf 92       	push	r12
    a06c:	df 92       	push	r13
    a06e:	ef 92       	push	r14
    a070:	ff 92       	push	r15
    a072:	0f 93       	push	r16
    a074:	1f 93       	push	r17
    a076:	cf 93       	push	r28
    a078:	df 93       	push	r29
    a07a:	5c 01       	movw	r10, r24
    a07c:	6a 01       	movw	r12, r20
    a07e:	7b 01       	movw	r14, r22
    a080:	b9 01       	movw	r22, r18
    a082:	a8 01       	movw	r20, r16
    a084:	22 e0       	ldi	r18, 0x02	; 2
    a086:	c2 16       	cp	r12, r18
    a088:	d1 04       	cpc	r13, r1
    a08a:	e1 04       	cpc	r14, r1
    a08c:	f1 04       	cpc	r15, r1
    a08e:	10 f4       	brcc	.+4      	; 0xa094 <remove_chain+0x36>
    a090:	22 e0       	ldi	r18, 0x02	; 2
    a092:	27 c0       	rjmp	.+78     	; 0xa0e2 <remove_chain+0x84>
    a094:	fc 01       	movw	r30, r24
    a096:	c0 81       	ld	r28, Z
    a098:	d1 81       	ldd	r29, Z+1	; 0x01
    a09a:	89 8d       	ldd	r24, Y+25	; 0x19
    a09c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a09e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a0a0:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a0a2:	c8 16       	cp	r12, r24
    a0a4:	d9 06       	cpc	r13, r25
    a0a6:	ea 06       	cpc	r14, r26
    a0a8:	fb 06       	cpc	r15, r27
    a0aa:	90 f7       	brcc	.-28     	; 0xa090 <remove_chain+0x32>
    a0ac:	41 15       	cp	r20, r1
    a0ae:	51 05       	cpc	r21, r1
    a0b0:	61 05       	cpc	r22, r1
    a0b2:	71 05       	cpc	r23, r1
    a0b4:	41 f0       	breq	.+16     	; 0xa0c6 <remove_chain+0x68>
    a0b6:	0f ef       	ldi	r16, 0xFF	; 255
    a0b8:	1f ef       	ldi	r17, 0xFF	; 255
    a0ba:	98 01       	movw	r18, r16
    a0bc:	ce 01       	movw	r24, r28
    a0be:	39 dc       	rcall	.-1934   	; 0x9932 <put_fat>
    a0c0:	00 97       	sbiw	r24, 0x00	; 0
    a0c2:	09 f0       	breq	.+2      	; 0xa0c6 <remove_chain+0x68>
    a0c4:	4c c0       	rjmp	.+152    	; 0xa15e <remove_chain+0x100>
    a0c6:	b7 01       	movw	r22, r14
    a0c8:	a6 01       	movw	r20, r12
    a0ca:	f5 01       	movw	r30, r10
    a0cc:	80 81       	ld	r24, Z
    a0ce:	91 81       	ldd	r25, Z+1	; 0x01
    a0d0:	2b dd       	rcall	.-1450   	; 0x9b28 <get_fat.isra.10>
    a0d2:	2b 01       	movw	r4, r22
    a0d4:	3c 01       	movw	r6, r24
    a0d6:	61 15       	cp	r22, r1
    a0d8:	71 05       	cpc	r23, r1
    a0da:	81 05       	cpc	r24, r1
    a0dc:	91 05       	cpc	r25, r1
    a0de:	19 f4       	brne	.+6      	; 0xa0e6 <remove_chain+0x88>
    a0e0:	20 e0       	ldi	r18, 0x00	; 0
    a0e2:	90 e0       	ldi	r25, 0x00	; 0
    a0e4:	3d c0       	rjmp	.+122    	; 0xa160 <remove_chain+0x102>
    a0e6:	61 30       	cpi	r22, 0x01	; 1
    a0e8:	71 05       	cpc	r23, r1
    a0ea:	81 05       	cpc	r24, r1
    a0ec:	91 05       	cpc	r25, r1
    a0ee:	81 f2       	breq	.-96     	; 0xa090 <remove_chain+0x32>
    a0f0:	6f 3f       	cpi	r22, 0xFF	; 255
    a0f2:	7f 4f       	sbci	r23, 0xFF	; 255
    a0f4:	8f 4f       	sbci	r24, 0xFF	; 255
    a0f6:	9f 4f       	sbci	r25, 0xFF	; 255
    a0f8:	81 f1       	breq	.+96     	; 0xa15a <remove_chain+0xfc>
    a0fa:	00 e0       	ldi	r16, 0x00	; 0
    a0fc:	10 e0       	ldi	r17, 0x00	; 0
    a0fe:	98 01       	movw	r18, r16
    a100:	b7 01       	movw	r22, r14
    a102:	a6 01       	movw	r20, r12
    a104:	ce 01       	movw	r24, r28
    a106:	15 dc       	rcall	.-2006   	; 0x9932 <put_fat>
    a108:	00 97       	sbiw	r24, 0x00	; 0
    a10a:	49 f5       	brne	.+82     	; 0xa15e <remove_chain+0x100>
    a10c:	89 89       	ldd	r24, Y+17	; 0x11
    a10e:	9a 89       	ldd	r25, Y+18	; 0x12
    a110:	ab 89       	ldd	r26, Y+19	; 0x13
    a112:	bc 89       	ldd	r27, Y+20	; 0x14
    a114:	49 8d       	ldd	r20, Y+25	; 0x19
    a116:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a118:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a11a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a11c:	6a 01       	movw	r12, r20
    a11e:	7b 01       	movw	r14, r22
    a120:	e2 e0       	ldi	r30, 0x02	; 2
    a122:	ce 1a       	sub	r12, r30
    a124:	d1 08       	sbc	r13, r1
    a126:	e1 08       	sbc	r14, r1
    a128:	f1 08       	sbc	r15, r1
    a12a:	8c 15       	cp	r24, r12
    a12c:	9d 05       	cpc	r25, r13
    a12e:	ae 05       	cpc	r26, r14
    a130:	bf 05       	cpc	r27, r15
    a132:	50 f4       	brcc	.+20     	; 0xa148 <remove_chain+0xea>
    a134:	01 96       	adiw	r24, 0x01	; 1
    a136:	a1 1d       	adc	r26, r1
    a138:	b1 1d       	adc	r27, r1
    a13a:	89 8b       	std	Y+17, r24	; 0x11
    a13c:	9a 8b       	std	Y+18, r25	; 0x12
    a13e:	ab 8b       	std	Y+19, r26	; 0x13
    a140:	bc 8b       	std	Y+20, r27	; 0x14
    a142:	8c 81       	ldd	r24, Y+4	; 0x04
    a144:	81 60       	ori	r24, 0x01	; 1
    a146:	8c 83       	std	Y+4, r24	; 0x04
    a148:	73 01       	movw	r14, r6
    a14a:	62 01       	movw	r12, r4
    a14c:	44 16       	cp	r4, r20
    a14e:	55 06       	cpc	r5, r21
    a150:	66 06       	cpc	r6, r22
    a152:	77 06       	cpc	r7, r23
    a154:	08 f4       	brcc	.+2      	; 0xa158 <remove_chain+0xfa>
    a156:	b7 cf       	rjmp	.-146    	; 0xa0c6 <remove_chain+0x68>
    a158:	c3 cf       	rjmp	.-122    	; 0xa0e0 <remove_chain+0x82>
    a15a:	21 e0       	ldi	r18, 0x01	; 1
    a15c:	c2 cf       	rjmp	.-124    	; 0xa0e2 <remove_chain+0x84>
    a15e:	28 2f       	mov	r18, r24
    a160:	82 2f       	mov	r24, r18
    a162:	df 91       	pop	r29
    a164:	cf 91       	pop	r28
    a166:	1f 91       	pop	r17
    a168:	0f 91       	pop	r16
    a16a:	ff 90       	pop	r15
    a16c:	ef 90       	pop	r14
    a16e:	df 90       	pop	r13
    a170:	cf 90       	pop	r12
    a172:	bf 90       	pop	r11
    a174:	af 90       	pop	r10
    a176:	7f 90       	pop	r7
    a178:	6f 90       	pop	r6
    a17a:	5f 90       	pop	r5
    a17c:	4f 90       	pop	r4
    a17e:	08 95       	ret

0000a180 <dir_next>:
    a180:	4f 92       	push	r4
    a182:	5f 92       	push	r5
    a184:	6f 92       	push	r6
    a186:	7f 92       	push	r7
    a188:	af 92       	push	r10
    a18a:	bf 92       	push	r11
    a18c:	cf 92       	push	r12
    a18e:	df 92       	push	r13
    a190:	ef 92       	push	r14
    a192:	ff 92       	push	r15
    a194:	0f 93       	push	r16
    a196:	1f 93       	push	r17
    a198:	cf 93       	push	r28
    a19a:	df 93       	push	r29
    a19c:	ec 01       	movw	r28, r24
    a19e:	08 81       	ld	r16, Y
    a1a0:	19 81       	ldd	r17, Y+1	; 0x01
    a1a2:	ce 84       	ldd	r12, Y+14	; 0x0e
    a1a4:	df 84       	ldd	r13, Y+15	; 0x0f
    a1a6:	e8 88       	ldd	r14, Y+16	; 0x10
    a1a8:	f9 88       	ldd	r15, Y+17	; 0x11
    a1aa:	80 e2       	ldi	r24, 0x20	; 32
    a1ac:	c8 0e       	add	r12, r24
    a1ae:	d1 1c       	adc	r13, r1
    a1b0:	e1 1c       	adc	r14, r1
    a1b2:	f1 1c       	adc	r15, r1
    a1b4:	c1 14       	cp	r12, r1
    a1b6:	d1 04       	cpc	r13, r1
    a1b8:	e0 e2       	ldi	r30, 0x20	; 32
    a1ba:	ee 06       	cpc	r14, r30
    a1bc:	f1 04       	cpc	r15, r1
    a1be:	20 f0       	brcs	.+8      	; 0xa1c8 <dir_next+0x48>
    a1c0:	1e 8a       	std	Y+22, r1	; 0x16
    a1c2:	1f 8a       	std	Y+23, r1	; 0x17
    a1c4:	18 8e       	std	Y+24, r1	; 0x18
    a1c6:	19 8e       	std	Y+25, r1	; 0x19
    a1c8:	8e 89       	ldd	r24, Y+22	; 0x16
    a1ca:	9f 89       	ldd	r25, Y+23	; 0x17
    a1cc:	a8 8d       	ldd	r26, Y+24	; 0x18
    a1ce:	b9 8d       	ldd	r27, Y+25	; 0x19
    a1d0:	00 97       	sbiw	r24, 0x00	; 0
    a1d2:	a1 05       	cpc	r26, r1
    a1d4:	b1 05       	cpc	r27, r1
    a1d6:	09 f4       	brne	.+2      	; 0xa1da <dir_next+0x5a>
    a1d8:	a7 c0       	rjmp	.+334    	; 0xa328 <dir_next+0x1a8>
    a1da:	5b 01       	movw	r10, r22
    a1dc:	b7 01       	movw	r22, r14
    a1de:	a6 01       	movw	r20, r12
    a1e0:	51 70       	andi	r21, 0x01	; 1
    a1e2:	66 27       	eor	r22, r22
    a1e4:	77 27       	eor	r23, r23
    a1e6:	45 2b       	or	r20, r21
    a1e8:	46 2b       	or	r20, r22
    a1ea:	47 2b       	or	r20, r23
    a1ec:	09 f0       	breq	.+2      	; 0xa1f0 <dir_next+0x70>
    a1ee:	8d c0       	rjmp	.+282    	; 0xa30a <dir_next+0x18a>
    a1f0:	01 96       	adiw	r24, 0x01	; 1
    a1f2:	a1 1d       	adc	r26, r1
    a1f4:	b1 1d       	adc	r27, r1
    a1f6:	8e 8b       	std	Y+22, r24	; 0x16
    a1f8:	9f 8b       	std	Y+23, r25	; 0x17
    a1fa:	a8 8f       	std	Y+24, r26	; 0x18
    a1fc:	b9 8f       	std	Y+25, r27	; 0x19
    a1fe:	4a 89       	ldd	r20, Y+18	; 0x12
    a200:	5b 89       	ldd	r21, Y+19	; 0x13
    a202:	6c 89       	ldd	r22, Y+20	; 0x14
    a204:	7d 89       	ldd	r23, Y+21	; 0x15
    a206:	f8 01       	movw	r30, r16
    a208:	41 15       	cp	r20, r1
    a20a:	51 05       	cpc	r21, r1
    a20c:	61 05       	cpc	r22, r1
    a20e:	71 05       	cpc	r23, r1
    a210:	c1 f4       	brne	.+48     	; 0xa242 <dir_next+0xc2>
    a212:	87 81       	ldd	r24, Z+7	; 0x07
    a214:	90 85       	ldd	r25, Z+8	; 0x08
    a216:	a0 e0       	ldi	r26, 0x00	; 0
    a218:	b0 e0       	ldi	r27, 0x00	; 0
    a21a:	b7 01       	movw	r22, r14
    a21c:	a6 01       	movw	r20, r12
    a21e:	35 e0       	ldi	r19, 0x05	; 5
    a220:	76 95       	lsr	r23
    a222:	67 95       	ror	r22
    a224:	57 95       	ror	r21
    a226:	47 95       	ror	r20
    a228:	3a 95       	dec	r19
    a22a:	d1 f7       	brne	.-12     	; 0xa220 <dir_next+0xa0>
    a22c:	48 17       	cp	r20, r24
    a22e:	59 07       	cpc	r21, r25
    a230:	6a 07       	cpc	r22, r26
    a232:	7b 07       	cpc	r23, r27
    a234:	08 f4       	brcc	.+2      	; 0xa238 <dir_next+0xb8>
    a236:	69 c0       	rjmp	.+210    	; 0xa30a <dir_next+0x18a>
    a238:	1e 8a       	std	Y+22, r1	; 0x16
    a23a:	1f 8a       	std	Y+23, r1	; 0x17
    a23c:	18 8e       	std	Y+24, r1	; 0x18
    a23e:	19 8e       	std	Y+25, r1	; 0x19
    a240:	73 c0       	rjmp	.+230    	; 0xa328 <dir_next+0x1a8>
    a242:	81 85       	ldd	r24, Z+9	; 0x09
    a244:	92 85       	ldd	r25, Z+10	; 0x0a
    a246:	01 97       	sbiw	r24, 0x01	; 1
    a248:	a0 e0       	ldi	r26, 0x00	; 0
    a24a:	b0 e0       	ldi	r27, 0x00	; 0
    a24c:	26 01       	movw	r4, r12
    a24e:	37 01       	movw	r6, r14
    a250:	29 e0       	ldi	r18, 0x09	; 9
    a252:	76 94       	lsr	r7
    a254:	67 94       	ror	r6
    a256:	57 94       	ror	r5
    a258:	47 94       	ror	r4
    a25a:	2a 95       	dec	r18
    a25c:	d1 f7       	brne	.-12     	; 0xa252 <dir_next+0xd2>
    a25e:	84 21       	and	r24, r4
    a260:	95 21       	and	r25, r5
    a262:	a6 21       	and	r26, r6
    a264:	b7 21       	and	r27, r7
    a266:	89 2b       	or	r24, r25
    a268:	8a 2b       	or	r24, r26
    a26a:	8b 2b       	or	r24, r27
    a26c:	09 f0       	breq	.+2      	; 0xa270 <dir_next+0xf0>
    a26e:	4d c0       	rjmp	.+154    	; 0xa30a <dir_next+0x18a>
    a270:	c8 01       	movw	r24, r16
    a272:	5a dc       	rcall	.-1868   	; 0x9b28 <get_fat.isra.10>
    a274:	2b 01       	movw	r4, r22
    a276:	3c 01       	movw	r6, r24
    a278:	62 30       	cpi	r22, 0x02	; 2
    a27a:	71 05       	cpc	r23, r1
    a27c:	81 05       	cpc	r24, r1
    a27e:	91 05       	cpc	r25, r1
    a280:	18 f4       	brcc	.+6      	; 0xa288 <dir_next+0x108>
    a282:	82 e0       	ldi	r24, 0x02	; 2
    a284:	90 e0       	ldi	r25, 0x00	; 0
    a286:	55 c0       	rjmp	.+170    	; 0xa332 <dir_next+0x1b2>
    a288:	8f ef       	ldi	r24, 0xFF	; 255
    a28a:	48 16       	cp	r4, r24
    a28c:	58 06       	cpc	r5, r24
    a28e:	68 06       	cpc	r6, r24
    a290:	78 06       	cpc	r7, r24
    a292:	19 f4       	brne	.+6      	; 0xa29a <dir_next+0x11a>
    a294:	81 e0       	ldi	r24, 0x01	; 1
    a296:	90 e0       	ldi	r25, 0x00	; 0
    a298:	4c c0       	rjmp	.+152    	; 0xa332 <dir_next+0x1b2>
    a29a:	f8 01       	movw	r30, r16
    a29c:	81 8d       	ldd	r24, Z+25	; 0x19
    a29e:	92 8d       	ldd	r25, Z+26	; 0x1a
    a2a0:	a3 8d       	ldd	r26, Z+27	; 0x1b
    a2a2:	b4 8d       	ldd	r27, Z+28	; 0x1c
    a2a4:	48 16       	cp	r4, r24
    a2a6:	59 06       	cpc	r5, r25
    a2a8:	6a 06       	cpc	r6, r26
    a2aa:	7b 06       	cpc	r7, r27
    a2ac:	08 f1       	brcs	.+66     	; 0xa2f0 <dir_next+0x170>
    a2ae:	ab 28       	or	r10, r11
    a2b0:	19 f2       	breq	.-122    	; 0xa238 <dir_next+0xb8>
    a2b2:	4a 89       	ldd	r20, Y+18	; 0x12
    a2b4:	5b 89       	ldd	r21, Y+19	; 0x13
    a2b6:	6c 89       	ldd	r22, Y+20	; 0x14
    a2b8:	7d 89       	ldd	r23, Y+21	; 0x15
    a2ba:	ce 01       	movw	r24, r28
    a2bc:	aa dd       	rcall	.-1196   	; 0x9e12 <create_chain>
    a2be:	2b 01       	movw	r4, r22
    a2c0:	3c 01       	movw	r6, r24
    a2c2:	61 15       	cp	r22, r1
    a2c4:	71 05       	cpc	r23, r1
    a2c6:	81 05       	cpc	r24, r1
    a2c8:	91 05       	cpc	r25, r1
    a2ca:	89 f1       	breq	.+98     	; 0xa32e <dir_next+0x1ae>
    a2cc:	61 30       	cpi	r22, 0x01	; 1
    a2ce:	71 05       	cpc	r23, r1
    a2d0:	81 05       	cpc	r24, r1
    a2d2:	91 05       	cpc	r25, r1
    a2d4:	b1 f2       	breq	.-84     	; 0xa282 <dir_next+0x102>
    a2d6:	8f ef       	ldi	r24, 0xFF	; 255
    a2d8:	48 16       	cp	r4, r24
    a2da:	58 06       	cpc	r5, r24
    a2dc:	68 06       	cpc	r6, r24
    a2de:	78 06       	cpc	r7, r24
    a2e0:	c9 f2       	breq	.-78     	; 0xa294 <dir_next+0x114>
    a2e2:	b3 01       	movw	r22, r6
    a2e4:	a2 01       	movw	r20, r4
    a2e6:	c8 01       	movw	r24, r16
    a2e8:	0e 94 1c 49 	call	0x9238	; 0x9238 <dir_clear>
    a2ec:	89 2b       	or	r24, r25
    a2ee:	91 f6       	brne	.-92     	; 0xa294 <dir_next+0x114>
    a2f0:	4a 8a       	std	Y+18, r4	; 0x12
    a2f2:	5b 8a       	std	Y+19, r5	; 0x13
    a2f4:	6c 8a       	std	Y+20, r6	; 0x14
    a2f6:	7d 8a       	std	Y+21, r7	; 0x15
    a2f8:	b3 01       	movw	r22, r6
    a2fa:	a2 01       	movw	r20, r4
    a2fc:	c8 01       	movw	r24, r16
    a2fe:	0e 94 a2 45 	call	0x8b44	; 0x8b44 <clst2sect>
    a302:	6e 8b       	std	Y+22, r22	; 0x16
    a304:	7f 8b       	std	Y+23, r23	; 0x17
    a306:	88 8f       	std	Y+24, r24	; 0x18
    a308:	99 8f       	std	Y+25, r25	; 0x19
    a30a:	ce 86       	std	Y+14, r12	; 0x0e
    a30c:	df 86       	std	Y+15, r13	; 0x0f
    a30e:	e8 8a       	std	Y+16, r14	; 0x10
    a310:	f9 8a       	std	Y+17, r15	; 0x11
    a312:	0b 5c       	subi	r16, 0xCB	; 203
    a314:	1f 4f       	sbci	r17, 0xFF	; 255
    a316:	e1 e0       	ldi	r30, 0x01	; 1
    a318:	de 22       	and	r13, r30
    a31a:	c0 0e       	add	r12, r16
    a31c:	d1 1e       	adc	r13, r17
    a31e:	db 8e       	std	Y+27, r13	; 0x1b
    a320:	ca 8e       	std	Y+26, r12	; 0x1a
    a322:	80 e0       	ldi	r24, 0x00	; 0
    a324:	90 e0       	ldi	r25, 0x00	; 0
    a326:	05 c0       	rjmp	.+10     	; 0xa332 <dir_next+0x1b2>
    a328:	84 e0       	ldi	r24, 0x04	; 4
    a32a:	90 e0       	ldi	r25, 0x00	; 0
    a32c:	02 c0       	rjmp	.+4      	; 0xa332 <dir_next+0x1b2>
    a32e:	87 e0       	ldi	r24, 0x07	; 7
    a330:	90 e0       	ldi	r25, 0x00	; 0
    a332:	df 91       	pop	r29
    a334:	cf 91       	pop	r28
    a336:	1f 91       	pop	r17
    a338:	0f 91       	pop	r16
    a33a:	ff 90       	pop	r15
    a33c:	ef 90       	pop	r14
    a33e:	df 90       	pop	r13
    a340:	cf 90       	pop	r12
    a342:	bf 90       	pop	r11
    a344:	af 90       	pop	r10
    a346:	7f 90       	pop	r7
    a348:	6f 90       	pop	r6
    a34a:	5f 90       	pop	r5
    a34c:	4f 90       	pop	r4
    a34e:	08 95       	ret

0000a350 <dir_alloc>:
    a350:	a0 e0       	ldi	r26, 0x00	; 0
    a352:	b0 e0       	ldi	r27, 0x00	; 0
    a354:	ee ea       	ldi	r30, 0xAE	; 174
    a356:	f1 e5       	ldi	r31, 0x51	; 81
    a358:	0c 94 e2 e0 	jmp	0x1c1c4	; 0x1c1c4 <__prologue_saves__+0x14>
    a35c:	ec 01       	movw	r28, r24
    a35e:	6b 01       	movw	r12, r22
    a360:	e8 80       	ld	r14, Y
    a362:	f9 80       	ldd	r15, Y+1	; 0x01
    a364:	40 e0       	ldi	r20, 0x00	; 0
    a366:	50 e0       	ldi	r21, 0x00	; 0
    a368:	ba 01       	movw	r22, r20
    a36a:	92 dc       	rcall	.-1756   	; 0x9c90 <dir_sdi>
    a36c:	00 97       	sbiw	r24, 0x00	; 0
    a36e:	f9 f4       	brne	.+62     	; 0xa3ae <dir_alloc+0x5e>
    a370:	00 e0       	ldi	r16, 0x00	; 0
    a372:	10 e0       	ldi	r17, 0x00	; 0
    a374:	4e 89       	ldd	r20, Y+22	; 0x16
    a376:	5f 89       	ldd	r21, Y+23	; 0x17
    a378:	68 8d       	ldd	r22, Y+24	; 0x18
    a37a:	79 8d       	ldd	r23, Y+25	; 0x19
    a37c:	c7 01       	movw	r24, r14
    a37e:	04 d8       	rcall	.-4088   	; 0x9388 <move_window>
    a380:	00 97       	sbiw	r24, 0x00	; 0
    a382:	a9 f4       	brne	.+42     	; 0xa3ae <dir_alloc+0x5e>
    a384:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a386:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a388:	20 81       	ld	r18, Z
    a38a:	25 3e       	cpi	r18, 0xE5	; 229
    a38c:	11 f0       	breq	.+4      	; 0xa392 <dir_alloc+0x42>
    a38e:	21 11       	cpse	r18, r1
    a390:	06 c0       	rjmp	.+12     	; 0xa39e <dir_alloc+0x4e>
    a392:	0f 5f       	subi	r16, 0xFF	; 255
    a394:	1f 4f       	sbci	r17, 0xFF	; 255
    a396:	0c 15       	cp	r16, r12
    a398:	1d 05       	cpc	r17, r13
    a39a:	19 f4       	brne	.+6      	; 0xa3a2 <dir_alloc+0x52>
    a39c:	0d c0       	rjmp	.+26     	; 0xa3b8 <dir_alloc+0x68>
    a39e:	00 e0       	ldi	r16, 0x00	; 0
    a3a0:	10 e0       	ldi	r17, 0x00	; 0
    a3a2:	61 e0       	ldi	r22, 0x01	; 1
    a3a4:	70 e0       	ldi	r23, 0x00	; 0
    a3a6:	ce 01       	movw	r24, r28
    a3a8:	eb de       	rcall	.-554    	; 0xa180 <dir_next>
    a3aa:	00 97       	sbiw	r24, 0x00	; 0
    a3ac:	19 f3       	breq	.-58     	; 0xa374 <dir_alloc+0x24>
    a3ae:	84 30       	cpi	r24, 0x04	; 4
    a3b0:	91 05       	cpc	r25, r1
    a3b2:	11 f4       	brne	.+4      	; 0xa3b8 <dir_alloc+0x68>
    a3b4:	87 e0       	ldi	r24, 0x07	; 7
    a3b6:	90 e0       	ldi	r25, 0x00	; 0
    a3b8:	cd b7       	in	r28, 0x3d	; 61
    a3ba:	de b7       	in	r29, 0x3e	; 62
    a3bc:	e8 e0       	ldi	r30, 0x08	; 8
    a3be:	0c 94 fe e0 	jmp	0x1c1fc	; 0x1c1fc <__epilogue_restores__+0x14>

0000a3c2 <dir_read>:
    a3c2:	a0 e0       	ldi	r26, 0x00	; 0
    a3c4:	b0 e0       	ldi	r27, 0x00	; 0
    a3c6:	e7 ee       	ldi	r30, 0xE7	; 231
    a3c8:	f1 e5       	ldi	r31, 0x51	; 81
    a3ca:	0c 94 de e0 	jmp	0x1c1bc	; 0x1c1bc <__prologue_saves__+0xc>
    a3ce:	ec 01       	movw	r28, r24
    a3d0:	7b 01       	movw	r14, r22
    a3d2:	a8 80       	ld	r10, Y
    a3d4:	b9 80       	ldd	r11, Y+1	; 0x01
    a3d6:	dd 24       	eor	r13, r13
    a3d8:	da 94       	dec	r13
    a3da:	1f ef       	ldi	r17, 0xFF	; 255
    a3dc:	84 e0       	ldi	r24, 0x04	; 4
    a3de:	90 e0       	ldi	r25, 0x00	; 0
    a3e0:	fd e0       	ldi	r31, 0x0D	; 13
    a3e2:	cf 2e       	mov	r12, r31
    a3e4:	4e 89       	ldd	r20, Y+22	; 0x16
    a3e6:	5f 89       	ldd	r21, Y+23	; 0x17
    a3e8:	68 8d       	ldd	r22, Y+24	; 0x18
    a3ea:	79 8d       	ldd	r23, Y+25	; 0x19
    a3ec:	41 15       	cp	r20, r1
    a3ee:	51 05       	cpc	r21, r1
    a3f0:	61 05       	cpc	r22, r1
    a3f2:	71 05       	cpc	r23, r1
    a3f4:	09 f4       	brne	.+2      	; 0xa3f8 <dir_read+0x36>
    a3f6:	9a c0       	rjmp	.+308    	; 0xa52c <dir_read+0x16a>
    a3f8:	c5 01       	movw	r24, r10
    a3fa:	0e 94 c4 49 	call	0x9388	; 0x9388 <move_window>
    a3fe:	00 97       	sbiw	r24, 0x00	; 0
    a400:	09 f0       	breq	.+2      	; 0xa404 <dir_read+0x42>
    a402:	96 c0       	rjmp	.+300    	; 0xa530 <dir_read+0x16e>
    a404:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a406:	9b 8c       	ldd	r9, Y+27	; 0x1b
    a408:	f4 01       	movw	r30, r8
    a40a:	00 81       	ld	r16, Z
    a40c:	00 23       	and	r16, r16
    a40e:	09 f4       	brne	.+2      	; 0xa412 <dir_read+0x50>
    a410:	97 c0       	rjmp	.+302    	; 0xa540 <dir_read+0x17e>
    a412:	83 85       	ldd	r24, Z+11	; 0x0b
    a414:	8f 73       	andi	r24, 0x3F	; 63
    a416:	8c 83       	std	Y+4, r24	; 0x04
    a418:	05 3e       	cpi	r16, 0xE5	; 229
    a41a:	09 f4       	brne	.+2      	; 0xa41e <dir_read+0x5c>
    a41c:	7e c0       	rjmp	.+252    	; 0xa51a <dir_read+0x158>
    a41e:	0e 32       	cpi	r16, 0x2E	; 46
    a420:	09 f4       	brne	.+2      	; 0xa424 <dir_read+0x62>
    a422:	7b c0       	rjmp	.+246    	; 0xa51a <dir_read+0x158>
    a424:	21 e0       	ldi	r18, 0x01	; 1
    a426:	30 e0       	ldi	r19, 0x00	; 0
    a428:	98 2f       	mov	r25, r24
    a42a:	9f 71       	andi	r25, 0x1F	; 31
    a42c:	98 30       	cpi	r25, 0x08	; 8
    a42e:	11 f0       	breq	.+4      	; 0xa434 <dir_read+0x72>
    a430:	20 e0       	ldi	r18, 0x00	; 0
    a432:	30 e0       	ldi	r19, 0x00	; 0
    a434:	2e 15       	cp	r18, r14
    a436:	3f 05       	cpc	r19, r15
    a438:	09 f0       	breq	.+2      	; 0xa43c <dir_read+0x7a>
    a43a:	6f c0       	rjmp	.+222    	; 0xa51a <dir_read+0x158>
    a43c:	8f 30       	cpi	r24, 0x0F	; 15
    a43e:	09 f0       	breq	.+2      	; 0xa442 <dir_read+0x80>
    a440:	5c c0       	rjmp	.+184    	; 0xa4fa <dir_read+0x138>
    a442:	06 ff       	sbrs	r16, 6
    a444:	0c c0       	rjmp	.+24     	; 0xa45e <dir_read+0x9c>
    a446:	f4 01       	movw	r30, r8
    a448:	85 85       	ldd	r24, Z+13	; 0x0d
    a44a:	0f 7b       	andi	r16, 0xBF	; 191
    a44c:	4e 85       	ldd	r20, Y+14	; 0x0e
    a44e:	5f 85       	ldd	r21, Y+15	; 0x0f
    a450:	68 89       	ldd	r22, Y+16	; 0x10
    a452:	79 89       	ldd	r23, Y+17	; 0x11
    a454:	48 a7       	std	Y+40, r20	; 0x28
    a456:	59 a7       	std	Y+41, r21	; 0x29
    a458:	6a a7       	std	Y+42, r22	; 0x2a
    a45a:	7b a7       	std	Y+43, r23	; 0x2b
    a45c:	03 c0       	rjmp	.+6      	; 0xa464 <dir_read+0xa2>
    a45e:	10 13       	cpse	r17, r16
    a460:	5c c0       	rjmp	.+184    	; 0xa51a <dir_read+0x158>
    a462:	8d 2d       	mov	r24, r13
    a464:	f4 01       	movw	r30, r8
    a466:	d5 84       	ldd	r13, Z+13	; 0x0d
    a468:	d8 12       	cpse	r13, r24
    a46a:	56 c0       	rjmp	.+172    	; 0xa518 <dir_read+0x156>
    a46c:	82 8d       	ldd	r24, Z+26	; 0x1a
    a46e:	93 8d       	ldd	r25, Z+27	; 0x1b
    a470:	89 2b       	or	r24, r25
    a472:	09 f0       	breq	.+2      	; 0xa476 <dir_read+0xb4>
    a474:	52 c0       	rjmp	.+164    	; 0xa51a <dir_read+0x158>
    a476:	f5 01       	movw	r30, r10
    a478:	63 85       	ldd	r22, Z+11	; 0x0b
    a47a:	74 85       	ldd	r23, Z+12	; 0x0c
    a47c:	f4 01       	movw	r30, r8
    a47e:	80 81       	ld	r24, Z
    a480:	90 e0       	ldi	r25, 0x00	; 0
    a482:	8f 7b       	andi	r24, 0xBF	; 191
    a484:	01 97       	sbiw	r24, 0x01	; 1
    a486:	c8 9e       	mul	r12, r24
    a488:	90 01       	movw	r18, r0
    a48a:	c9 9e       	mul	r12, r25
    a48c:	30 0d       	add	r19, r0
    a48e:	11 24       	eor	r1, r1
    a490:	ab ee       	ldi	r26, 0xEB	; 235
    a492:	b4 e0       	ldi	r27, 0x04	; 4
    a494:	81 e0       	ldi	r24, 0x01	; 1
    a496:	90 e0       	ldi	r25, 0x00	; 0
    a498:	4d 91       	ld	r20, X+
    a49a:	f4 01       	movw	r30, r8
    a49c:	e4 0f       	add	r30, r20
    a49e:	f1 1d       	adc	r31, r1
    a4a0:	40 81       	ld	r20, Z
    a4a2:	51 81       	ldd	r21, Z+1	; 0x01
    a4a4:	00 97       	sbiw	r24, 0x00	; 0
    a4a6:	81 f0       	breq	.+32     	; 0xa4c8 <dir_read+0x106>
    a4a8:	2f 3f       	cpi	r18, 0xFF	; 255
    a4aa:	31 05       	cpc	r19, r1
    a4ac:	09 f0       	breq	.+2      	; 0xa4b0 <dir_read+0xee>
    a4ae:	a8 f5       	brcc	.+106    	; 0xa51a <dir_read+0x158>
    a4b0:	c9 01       	movw	r24, r18
    a4b2:	88 0f       	add	r24, r24
    a4b4:	99 1f       	adc	r25, r25
    a4b6:	86 0f       	add	r24, r22
    a4b8:	97 1f       	adc	r25, r23
    a4ba:	fc 01       	movw	r30, r24
    a4bc:	51 83       	std	Z+1, r21	; 0x01
    a4be:	40 83       	st	Z, r20
    a4c0:	ca 01       	movw	r24, r20
    a4c2:	2f 5f       	subi	r18, 0xFF	; 255
    a4c4:	3f 4f       	sbci	r19, 0xFF	; 255
    a4c6:	03 c0       	rjmp	.+6      	; 0xa4ce <dir_read+0x10c>
    a4c8:	4f 3f       	cpi	r20, 0xFF	; 255
    a4ca:	5f 4f       	sbci	r21, 0xFF	; 255
    a4cc:	31 f5       	brne	.+76     	; 0xa51a <dir_read+0x158>
    a4ce:	44 e0       	ldi	r20, 0x04	; 4
    a4d0:	a8 3f       	cpi	r26, 0xF8	; 248
    a4d2:	b4 07       	cpc	r27, r20
    a4d4:	09 f7       	brne	.-62     	; 0xa498 <dir_read+0xd6>
    a4d6:	f4 01       	movw	r30, r8
    a4d8:	40 81       	ld	r20, Z
    a4da:	46 ff       	sbrs	r20, 6
    a4dc:	2e c0       	rjmp	.+92     	; 0xa53a <dir_read+0x178>
    a4de:	89 2b       	or	r24, r25
    a4e0:	61 f1       	breq	.+88     	; 0xa53a <dir_read+0x178>
    a4e2:	2f 3f       	cpi	r18, 0xFF	; 255
    a4e4:	31 05       	cpc	r19, r1
    a4e6:	09 f0       	breq	.+2      	; 0xa4ea <dir_read+0x128>
    a4e8:	c0 f4       	brcc	.+48     	; 0xa51a <dir_read+0x158>
    a4ea:	22 0f       	add	r18, r18
    a4ec:	33 1f       	adc	r19, r19
    a4ee:	fb 01       	movw	r30, r22
    a4f0:	e2 0f       	add	r30, r18
    a4f2:	f3 1f       	adc	r31, r19
    a4f4:	11 82       	std	Z+1, r1	; 0x01
    a4f6:	10 82       	st	Z, r1
    a4f8:	20 c0       	rjmp	.+64     	; 0xa53a <dir_read+0x178>
    a4fa:	11 11       	cpse	r17, r1
    a4fc:	05 c0       	rjmp	.+10     	; 0xa508 <dir_read+0x146>
    a4fe:	c4 01       	movw	r24, r8
    a500:	0e 94 06 46 	call	0x8c0c	; 0x8c0c <sum_sfn>
    a504:	d8 16       	cp	r13, r24
    a506:	f9 f0       	breq	.+62     	; 0xa546 <dir_read+0x184>
    a508:	8f ef       	ldi	r24, 0xFF	; 255
    a50a:	9f ef       	ldi	r25, 0xFF	; 255
    a50c:	dc 01       	movw	r26, r24
    a50e:	88 a7       	std	Y+40, r24	; 0x28
    a510:	99 a7       	std	Y+41, r25	; 0x29
    a512:	aa a7       	std	Y+42, r26	; 0x2a
    a514:	bb a7       	std	Y+43, r27	; 0x2b
    a516:	17 c0       	rjmp	.+46     	; 0xa546 <dir_read+0x184>
    a518:	d8 2e       	mov	r13, r24
    a51a:	1f ef       	ldi	r17, 0xFF	; 255
    a51c:	60 e0       	ldi	r22, 0x00	; 0
    a51e:	70 e0       	ldi	r23, 0x00	; 0
    a520:	ce 01       	movw	r24, r28
    a522:	2e de       	rcall	.-932    	; 0xa180 <dir_next>
    a524:	00 97       	sbiw	r24, 0x00	; 0
    a526:	09 f4       	brne	.+2      	; 0xa52a <dir_read+0x168>
    a528:	5d cf       	rjmp	.-326    	; 0xa3e4 <dir_read+0x22>
    a52a:	02 c0       	rjmp	.+4      	; 0xa530 <dir_read+0x16e>
    a52c:	00 97       	sbiw	r24, 0x00	; 0
    a52e:	59 f0       	breq	.+22     	; 0xa546 <dir_read+0x184>
    a530:	1e 8a       	std	Y+22, r1	; 0x16
    a532:	1f 8a       	std	Y+23, r1	; 0x17
    a534:	18 8e       	std	Y+24, r1	; 0x18
    a536:	19 8e       	std	Y+25, r1	; 0x19
    a538:	08 c0       	rjmp	.+16     	; 0xa54a <dir_read+0x188>
    a53a:	1f ef       	ldi	r17, 0xFF	; 255
    a53c:	10 0f       	add	r17, r16
    a53e:	ee cf       	rjmp	.-36     	; 0xa51c <dir_read+0x15a>
    a540:	84 e0       	ldi	r24, 0x04	; 4
    a542:	90 e0       	ldi	r25, 0x00	; 0
    a544:	f5 cf       	rjmp	.-22     	; 0xa530 <dir_read+0x16e>
    a546:	80 e0       	ldi	r24, 0x00	; 0
    a548:	90 e0       	ldi	r25, 0x00	; 0
    a54a:	cd b7       	in	r28, 0x3d	; 61
    a54c:	de b7       	in	r29, 0x3e	; 62
    a54e:	ec e0       	ldi	r30, 0x0C	; 12
    a550:	0c 94 fa e0 	jmp	0x1c1f4	; 0x1c1f4 <__epilogue_restores__+0xc>

0000a554 <dir_remove>:
    a554:	a0 e0       	ldi	r26, 0x00	; 0
    a556:	b0 e0       	ldi	r27, 0x00	; 0
    a558:	e0 eb       	ldi	r30, 0xB0	; 176
    a55a:	f2 e5       	ldi	r31, 0x52	; 82
    a55c:	0c 94 e0 e0 	jmp	0x1c1c0	; 0x1c1c0 <__prologue_saves__+0x10>
    a560:	ec 01       	movw	r28, r24
    a562:	08 81       	ld	r16, Y
    a564:	19 81       	ldd	r17, Y+1	; 0x01
    a566:	ce 84       	ldd	r12, Y+14	; 0x0e
    a568:	df 84       	ldd	r13, Y+15	; 0x0f
    a56a:	e8 88       	ldd	r14, Y+16	; 0x10
    a56c:	f9 88       	ldd	r15, Y+17	; 0x11
    a56e:	48 a5       	ldd	r20, Y+40	; 0x28
    a570:	59 a5       	ldd	r21, Y+41	; 0x29
    a572:	6a a5       	ldd	r22, Y+42	; 0x2a
    a574:	7b a5       	ldd	r23, Y+43	; 0x2b
    a576:	4f 3f       	cpi	r20, 0xFF	; 255
    a578:	8f ef       	ldi	r24, 0xFF	; 255
    a57a:	58 07       	cpc	r21, r24
    a57c:	68 07       	cpc	r22, r24
    a57e:	78 07       	cpc	r23, r24
    a580:	29 f4       	brne	.+10     	; 0xa58c <dir_remove+0x38>
    a582:	85 ee       	ldi	r24, 0xE5	; 229
    a584:	b8 2e       	mov	r11, r24
    a586:	aa 24       	eor	r10, r10
    a588:	a3 94       	inc	r10
    a58a:	19 c0       	rjmp	.+50     	; 0xa5be <dir_remove+0x6a>
    a58c:	ce 01       	movw	r24, r28
    a58e:	80 db       	rcall	.-2304   	; 0x9c90 <dir_sdi>
    a590:	00 97       	sbiw	r24, 0x00	; 0
    a592:	19 f5       	brne	.+70     	; 0xa5da <dir_remove+0x86>
    a594:	f6 cf       	rjmp	.-20     	; 0xa582 <dir_remove+0x2e>
    a596:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a598:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a59a:	b0 82       	st	Z, r11
    a59c:	f8 01       	movw	r30, r16
    a59e:	a3 82       	std	Z+3, r10	; 0x03
    a5a0:	4e 85       	ldd	r20, Y+14	; 0x0e
    a5a2:	5f 85       	ldd	r21, Y+15	; 0x0f
    a5a4:	68 89       	ldd	r22, Y+16	; 0x10
    a5a6:	79 89       	ldd	r23, Y+17	; 0x11
    a5a8:	4c 15       	cp	r20, r12
    a5aa:	5d 05       	cpc	r21, r13
    a5ac:	6e 05       	cpc	r22, r14
    a5ae:	7f 05       	cpc	r23, r15
    a5b0:	a0 f4       	brcc	.+40     	; 0xa5da <dir_remove+0x86>
    a5b2:	60 e0       	ldi	r22, 0x00	; 0
    a5b4:	70 e0       	ldi	r23, 0x00	; 0
    a5b6:	ce 01       	movw	r24, r28
    a5b8:	e3 dd       	rcall	.-1082   	; 0xa180 <dir_next>
    a5ba:	00 97       	sbiw	r24, 0x00	; 0
    a5bc:	49 f4       	brne	.+18     	; 0xa5d0 <dir_remove+0x7c>
    a5be:	4e 89       	ldd	r20, Y+22	; 0x16
    a5c0:	5f 89       	ldd	r21, Y+23	; 0x17
    a5c2:	68 8d       	ldd	r22, Y+24	; 0x18
    a5c4:	79 8d       	ldd	r23, Y+25	; 0x19
    a5c6:	c8 01       	movw	r24, r16
    a5c8:	0e 94 c4 49 	call	0x9388	; 0x9388 <move_window>
    a5cc:	00 97       	sbiw	r24, 0x00	; 0
    a5ce:	19 f3       	breq	.-58     	; 0xa596 <dir_remove+0x42>
    a5d0:	84 30       	cpi	r24, 0x04	; 4
    a5d2:	91 05       	cpc	r25, r1
    a5d4:	11 f4       	brne	.+4      	; 0xa5da <dir_remove+0x86>
    a5d6:	82 e0       	ldi	r24, 0x02	; 2
    a5d8:	90 e0       	ldi	r25, 0x00	; 0
    a5da:	cd b7       	in	r28, 0x3d	; 61
    a5dc:	de b7       	in	r29, 0x3e	; 62
    a5de:	ea e0       	ldi	r30, 0x0A	; 10
    a5e0:	0c 94 fc e0 	jmp	0x1c1f8	; 0x1c1f8 <__epilogue_restores__+0x10>

0000a5e4 <dir_find>:
    a5e4:	ac e0       	ldi	r26, 0x0C	; 12
    a5e6:	b0 e0       	ldi	r27, 0x00	; 0
    a5e8:	e8 ef       	ldi	r30, 0xF8	; 248
    a5ea:	f2 e5       	ldi	r31, 0x52	; 82
    a5ec:	0c 94 d8 e0 	jmp	0x1c1b0	; 0x1c1b0 <__prologue_saves__>
    a5f0:	9c 87       	std	Y+12, r25	; 0x0c
    a5f2:	8b 87       	std	Y+11, r24	; 0x0b
    a5f4:	fc 01       	movw	r30, r24
    a5f6:	01 90       	ld	r0, Z+
    a5f8:	f0 81       	ld	r31, Z
    a5fa:	e0 2d       	mov	r30, r0
    a5fc:	fc 83       	std	Y+4, r31	; 0x04
    a5fe:	eb 83       	std	Y+3, r30	; 0x03
    a600:	40 e0       	ldi	r20, 0x00	; 0
    a602:	50 e0       	ldi	r21, 0x00	; 0
    a604:	ba 01       	movw	r22, r20
    a606:	44 db       	rcall	.-2424   	; 0x9c90 <dir_sdi>
    a608:	00 97       	sbiw	r24, 0x00	; 0
    a60a:	09 f0       	breq	.+2      	; 0xa60e <dir_find+0x2a>
    a60c:	e7 c0       	rjmp	.+462    	; 0xa7dc <dir_find+0x1f8>
    a60e:	8f ef       	ldi	r24, 0xFF	; 255
    a610:	9f ef       	ldi	r25, 0xFF	; 255
    a612:	dc 01       	movw	r26, r24
    a614:	eb 85       	ldd	r30, Y+11	; 0x0b
    a616:	fc 85       	ldd	r31, Y+12	; 0x0c
    a618:	80 a7       	std	Z+40, r24	; 0x28
    a61a:	91 a7       	std	Z+41, r25	; 0x29
    a61c:	a2 a7       	std	Z+42, r26	; 0x2a
    a61e:	b3 a7       	std	Z+43, r27	; 0x2b
    a620:	0f ef       	ldi	r16, 0xFF	; 255
    a622:	1f ef       	ldi	r17, 0xFF	; 255
    a624:	44 24       	eor	r4, r4
    a626:	4a 94       	dec	r4
    a628:	54 2c       	mov	r5, r4
    a62a:	32 01       	movw	r6, r4
    a62c:	7c 96       	adiw	r30, 0x1c	; 28
    a62e:	fa 87       	std	Y+10, r31	; 0x0a
    a630:	e9 87       	std	Y+9, r30	; 0x09
    a632:	eb 85       	ldd	r30, Y+11	; 0x0b
    a634:	fc 85       	ldd	r31, Y+12	; 0x0c
    a636:	46 89       	ldd	r20, Z+22	; 0x16
    a638:	57 89       	ldd	r21, Z+23	; 0x17
    a63a:	60 8d       	ldd	r22, Z+24	; 0x18
    a63c:	71 8d       	ldd	r23, Z+25	; 0x19
    a63e:	8b 81       	ldd	r24, Y+3	; 0x03
    a640:	9c 81       	ldd	r25, Y+4	; 0x04
    a642:	0e 94 c4 49 	call	0x9388	; 0x9388 <move_window>
    a646:	00 97       	sbiw	r24, 0x00	; 0
    a648:	09 f0       	breq	.+2      	; 0xa64c <dir_find+0x68>
    a64a:	c8 c0       	rjmp	.+400    	; 0xa7dc <dir_find+0x1f8>
    a64c:	eb 85       	ldd	r30, Y+11	; 0x0b
    a64e:	fc 85       	ldd	r31, Y+12	; 0x0c
    a650:	e2 8c       	ldd	r14, Z+26	; 0x1a
    a652:	f3 8c       	ldd	r15, Z+27	; 0x1b
    a654:	f7 01       	movw	r30, r14
    a656:	d0 80       	ld	r13, Z
    a658:	dd 20       	and	r13, r13
    a65a:	09 f4       	brne	.+2      	; 0xa65e <dir_find+0x7a>
    a65c:	c1 c0       	rjmp	.+386    	; 0xa7e0 <dir_find+0x1fc>
    a65e:	93 85       	ldd	r25, Z+11	; 0x0b
    a660:	89 2f       	mov	r24, r25
    a662:	8f 73       	andi	r24, 0x3F	; 63
    a664:	eb 85       	ldd	r30, Y+11	; 0x0b
    a666:	fc 85       	ldd	r31, Y+12	; 0x0c
    a668:	84 83       	std	Z+4, r24	; 0x04
    a66a:	f5 ee       	ldi	r31, 0xE5	; 229
    a66c:	df 16       	cp	r13, r31
    a66e:	09 f4       	brne	.+2      	; 0xa672 <dir_find+0x8e>
    a670:	a6 c0       	rjmp	.+332    	; 0xa7be <dir_find+0x1da>
    a672:	93 ff       	sbrs	r25, 3
    a674:	04 c0       	rjmp	.+8      	; 0xa67e <dir_find+0x9a>
    a676:	8f 30       	cpi	r24, 0x0F	; 15
    a678:	09 f0       	breq	.+2      	; 0xa67c <dir_find+0x98>
    a67a:	a1 c0       	rjmp	.+322    	; 0xa7be <dir_find+0x1da>
    a67c:	03 c0       	rjmp	.+6      	; 0xa684 <dir_find+0xa0>
    a67e:	8f 30       	cpi	r24, 0x0F	; 15
    a680:	09 f0       	breq	.+2      	; 0xa684 <dir_find+0xa0>
    a682:	88 c0       	rjmp	.+272    	; 0xa794 <dir_find+0x1b0>
    a684:	eb 85       	ldd	r30, Y+11	; 0x0b
    a686:	fc 85       	ldd	r31, Y+12	; 0x0c
    a688:	87 a1       	ldd	r24, Z+39	; 0x27
    a68a:	86 fd       	sbrc	r24, 6
    a68c:	9f c0       	rjmp	.+318    	; 0xa7cc <dir_find+0x1e8>
    a68e:	d6 fe       	sbrs	r13, 6
    a690:	10 c0       	rjmp	.+32     	; 0xa6b2 <dir_find+0xce>
    a692:	f7 01       	movw	r30, r14
    a694:	05 85       	ldd	r16, Z+13	; 0x0d
    a696:	fd 2d       	mov	r31, r13
    a698:	ff 7b       	andi	r31, 0xBF	; 191
    a69a:	df 2e       	mov	r13, r31
    a69c:	eb 85       	ldd	r30, Y+11	; 0x0b
    a69e:	fc 85       	ldd	r31, Y+12	; 0x0c
    a6a0:	86 85       	ldd	r24, Z+14	; 0x0e
    a6a2:	97 85       	ldd	r25, Z+15	; 0x0f
    a6a4:	a0 89       	ldd	r26, Z+16	; 0x10
    a6a6:	b1 89       	ldd	r27, Z+17	; 0x11
    a6a8:	80 a7       	std	Z+40, r24	; 0x28
    a6aa:	91 a7       	std	Z+41, r25	; 0x29
    a6ac:	a2 a7       	std	Z+42, r26	; 0x2a
    a6ae:	b3 a7       	std	Z+43, r27	; 0x2b
    a6b0:	02 c0       	rjmp	.+4      	; 0xa6b6 <dir_find+0xd2>
    a6b2:	1d 11       	cpse	r17, r13
    a6b4:	8a c0       	rjmp	.+276    	; 0xa7ca <dir_find+0x1e6>
    a6b6:	f7 01       	movw	r30, r14
    a6b8:	c5 84       	ldd	r12, Z+13	; 0x0d
    a6ba:	c0 12       	cpse	r12, r16
    a6bc:	86 c0       	rjmp	.+268    	; 0xa7ca <dir_find+0x1e6>
    a6be:	82 8d       	ldd	r24, Z+26	; 0x1a
    a6c0:	93 8d       	ldd	r25, Z+27	; 0x1b
    a6c2:	89 2b       	or	r24, r25
    a6c4:	09 f0       	breq	.+2      	; 0xa6c8 <dir_find+0xe4>
    a6c6:	91 c0       	rjmp	.+290    	; 0xa7ea <dir_find+0x206>
    a6c8:	eb 81       	ldd	r30, Y+3	; 0x03
    a6ca:	fc 81       	ldd	r31, Y+4	; 0x04
    a6cc:	03 84       	ldd	r0, Z+11	; 0x0b
    a6ce:	f4 85       	ldd	r31, Z+12	; 0x0c
    a6d0:	e0 2d       	mov	r30, r0
    a6d2:	fe 83       	std	Y+6, r31	; 0x06
    a6d4:	ed 83       	std	Y+5, r30	; 0x05
    a6d6:	f7 01       	movw	r30, r14
    a6d8:	80 81       	ld	r24, Z
    a6da:	8f 73       	andi	r24, 0x3F	; 63
    a6dc:	90 e0       	ldi	r25, 0x00	; 0
    a6de:	01 97       	sbiw	r24, 0x01	; 1
    a6e0:	fd e0       	ldi	r31, 0x0D	; 13
    a6e2:	f8 9f       	mul	r31, r24
    a6e4:	80 01       	movw	r16, r0
    a6e6:	f9 9f       	mul	r31, r25
    a6e8:	10 0d       	add	r17, r0
    a6ea:	11 24       	eor	r1, r1
    a6ec:	2b ee       	ldi	r18, 0xEB	; 235
    a6ee:	34 e0       	ldi	r19, 0x04	; 4
    a6f0:	3a 83       	std	Y+2, r19	; 0x02
    a6f2:	29 83       	std	Y+1, r18	; 0x01
    a6f4:	81 e0       	ldi	r24, 0x01	; 1
    a6f6:	90 e0       	ldi	r25, 0x00	; 0
    a6f8:	e9 81       	ldd	r30, Y+1	; 0x01
    a6fa:	fa 81       	ldd	r31, Y+2	; 0x02
    a6fc:	21 91       	ld	r18, Z+
    a6fe:	fa 83       	std	Y+2, r31	; 0x02
    a700:	e9 83       	std	Y+1, r30	; 0x01
    a702:	f7 01       	movw	r30, r14
    a704:	e2 0f       	add	r30, r18
    a706:	f1 1d       	adc	r31, r1
    a708:	20 80       	ld	r2, Z
    a70a:	31 80       	ldd	r3, Z+1	; 0x01
    a70c:	00 97       	sbiw	r24, 0x00	; 0
    a70e:	39 f1       	breq	.+78     	; 0xa75e <dir_find+0x17a>
    a710:	0f 3f       	cpi	r16, 0xFF	; 255
    a712:	11 05       	cpc	r17, r1
    a714:	11 f0       	breq	.+4      	; 0xa71a <dir_find+0x136>
    a716:	08 f0       	brcs	.+2      	; 0xa71a <dir_find+0x136>
    a718:	68 c0       	rjmp	.+208    	; 0xa7ea <dir_find+0x206>
    a71a:	b1 01       	movw	r22, r2
    a71c:	80 e0       	ldi	r24, 0x00	; 0
    a71e:	90 e0       	ldi	r25, 0x00	; 0
    a720:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <ff_wtoupper>
    a724:	4b 01       	movw	r8, r22
    a726:	5c 01       	movw	r10, r24
    a728:	98 01       	movw	r18, r16
    a72a:	2f 5f       	subi	r18, 0xFF	; 255
    a72c:	3f 4f       	sbci	r19, 0xFF	; 255
    a72e:	38 87       	std	Y+8, r19	; 0x08
    a730:	2f 83       	std	Y+7, r18	; 0x07
    a732:	00 0f       	add	r16, r16
    a734:	11 1f       	adc	r17, r17
    a736:	ed 81       	ldd	r30, Y+5	; 0x05
    a738:	fe 81       	ldd	r31, Y+6	; 0x06
    a73a:	e0 0f       	add	r30, r16
    a73c:	f1 1f       	adc	r31, r17
    a73e:	60 81       	ld	r22, Z
    a740:	71 81       	ldd	r23, Z+1	; 0x01
    a742:	80 e0       	ldi	r24, 0x00	; 0
    a744:	90 e0       	ldi	r25, 0x00	; 0
    a746:	0e 94 9f 67 	call	0xcf3e	; 0xcf3e <ff_wtoupper>
    a74a:	86 16       	cp	r8, r22
    a74c:	97 06       	cpc	r9, r23
    a74e:	a8 06       	cpc	r10, r24
    a750:	b9 06       	cpc	r11, r25
    a752:	09 f0       	breq	.+2      	; 0xa756 <dir_find+0x172>
    a754:	4a c0       	rjmp	.+148    	; 0xa7ea <dir_find+0x206>
    a756:	c1 01       	movw	r24, r2
    a758:	0f 81       	ldd	r16, Y+7	; 0x07
    a75a:	18 85       	ldd	r17, Y+8	; 0x08
    a75c:	05 c0       	rjmp	.+10     	; 0xa768 <dir_find+0x184>
    a75e:	3f ef       	ldi	r19, 0xFF	; 255
    a760:	23 16       	cp	r2, r19
    a762:	33 06       	cpc	r3, r19
    a764:	09 f0       	breq	.+2      	; 0xa768 <dir_find+0x184>
    a766:	41 c0       	rjmp	.+130    	; 0xa7ea <dir_find+0x206>
    a768:	e9 81       	ldd	r30, Y+1	; 0x01
    a76a:	fa 81       	ldd	r31, Y+2	; 0x02
    a76c:	e8 5f       	subi	r30, 0xF8	; 248
    a76e:	f4 40       	sbci	r31, 0x04	; 4
    a770:	19 f6       	brne	.-122    	; 0xa6f8 <dir_find+0x114>
    a772:	f7 01       	movw	r30, r14
    a774:	20 81       	ld	r18, Z
    a776:	26 ff       	sbrs	r18, 6
    a778:	3a c0       	rjmp	.+116    	; 0xa7ee <dir_find+0x20a>
    a77a:	89 2b       	or	r24, r25
    a77c:	c1 f1       	breq	.+112    	; 0xa7ee <dir_find+0x20a>
    a77e:	00 0f       	add	r16, r16
    a780:	11 1f       	adc	r17, r17
    a782:	ed 81       	ldd	r30, Y+5	; 0x05
    a784:	fe 81       	ldd	r31, Y+6	; 0x06
    a786:	e0 0f       	add	r30, r16
    a788:	f1 1f       	adc	r31, r17
    a78a:	80 81       	ld	r24, Z
    a78c:	91 81       	ldd	r25, Z+1	; 0x01
    a78e:	89 2b       	or	r24, r25
    a790:	71 f1       	breq	.+92     	; 0xa7ee <dir_find+0x20a>
    a792:	2b c0       	rjmp	.+86     	; 0xa7ea <dir_find+0x206>
    a794:	11 11       	cpse	r17, r1
    a796:	05 c0       	rjmp	.+10     	; 0xa7a2 <dir_find+0x1be>
    a798:	c7 01       	movw	r24, r14
    a79a:	0e 94 06 46 	call	0x8c0c	; 0x8c0c <sum_sfn>
    a79e:	08 17       	cp	r16, r24
    a7a0:	09 f1       	breq	.+66     	; 0xa7e4 <dir_find+0x200>
    a7a2:	eb 85       	ldd	r30, Y+11	; 0x0b
    a7a4:	fc 85       	ldd	r31, Y+12	; 0x0c
    a7a6:	87 a1       	ldd	r24, Z+39	; 0x27
    a7a8:	80 fd       	sbrc	r24, 0
    a7aa:	09 c0       	rjmp	.+18     	; 0xa7be <dir_find+0x1da>
    a7ac:	4b e0       	ldi	r20, 0x0B	; 11
    a7ae:	50 e0       	ldi	r21, 0x00	; 0
    a7b0:	69 85       	ldd	r22, Y+9	; 0x09
    a7b2:	7a 85       	ldd	r23, Y+10	; 0x0a
    a7b4:	c7 01       	movw	r24, r14
    a7b6:	0e 94 0d 45 	call	0x8a1a	; 0x8a1a <mem_cmp>
    a7ba:	89 2b       	or	r24, r25
    a7bc:	99 f0       	breq	.+38     	; 0xa7e4 <dir_find+0x200>
    a7be:	eb 85       	ldd	r30, Y+11	; 0x0b
    a7c0:	fc 85       	ldd	r31, Y+12	; 0x0c
    a7c2:	40 a6       	std	Z+40, r4	; 0x28
    a7c4:	51 a6       	std	Z+41, r5	; 0x29
    a7c6:	62 a6       	std	Z+42, r6	; 0x2a
    a7c8:	73 a6       	std	Z+43, r7	; 0x2b
    a7ca:	1f ef       	ldi	r17, 0xFF	; 255
    a7cc:	60 e0       	ldi	r22, 0x00	; 0
    a7ce:	70 e0       	ldi	r23, 0x00	; 0
    a7d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    a7d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    a7d4:	d5 dc       	rcall	.-1622   	; 0xa180 <dir_next>
    a7d6:	00 97       	sbiw	r24, 0x00	; 0
    a7d8:	09 f4       	brne	.+2      	; 0xa7dc <dir_find+0x1f8>
    a7da:	2b cf       	rjmp	.-426    	; 0xa632 <dir_find+0x4e>
    a7dc:	28 2f       	mov	r18, r24
    a7de:	0b c0       	rjmp	.+22     	; 0xa7f6 <dir_find+0x212>
    a7e0:	24 e0       	ldi	r18, 0x04	; 4
    a7e2:	01 c0       	rjmp	.+2      	; 0xa7e6 <dir_find+0x202>
    a7e4:	20 e0       	ldi	r18, 0x00	; 0
    a7e6:	90 e0       	ldi	r25, 0x00	; 0
    a7e8:	06 c0       	rjmp	.+12     	; 0xa7f6 <dir_find+0x212>
    a7ea:	0c 2d       	mov	r16, r12
    a7ec:	ee cf       	rjmp	.-36     	; 0xa7ca <dir_find+0x1e6>
    a7ee:	1f ef       	ldi	r17, 0xFF	; 255
    a7f0:	1d 0d       	add	r17, r13
    a7f2:	0c 2d       	mov	r16, r12
    a7f4:	eb cf       	rjmp	.-42     	; 0xa7cc <dir_find+0x1e8>
    a7f6:	82 2f       	mov	r24, r18
    a7f8:	2c 96       	adiw	r28, 0x0c	; 12
    a7fa:	e2 e1       	ldi	r30, 0x12	; 18
    a7fc:	0c 94 f4 e0 	jmp	0x1c1e8	; 0x1c1e8 <__epilogue_restores__>

0000a800 <dir_register>:
    a800:	a6 e1       	ldi	r26, 0x16	; 22
    a802:	b0 e0       	ldi	r27, 0x00	; 0
    a804:	e6 e0       	ldi	r30, 0x06	; 6
    a806:	f4 e5       	ldi	r31, 0x54	; 84
    a808:	0c 94 d8 e0 	jmp	0x1c1b0	; 0x1c1b0 <__prologue_saves__>
    a80c:	fc 01       	movw	r30, r24
    a80e:	27 a1       	ldd	r18, Z+39	; 0x27
    a810:	20 7a       	andi	r18, 0xA0	; 160
    a812:	09 f0       	breq	.+2      	; 0xa816 <dir_register+0x16>
    a814:	53 c1       	rjmp	.+678    	; 0xaabc <dir_register+0x2bc>
    a816:	c0 80       	ld	r12, Z
    a818:	d1 80       	ldd	r13, Z+1	; 0x01
    a81a:	f6 01       	movw	r30, r12
    a81c:	a3 85       	ldd	r26, Z+11	; 0x0b
    a81e:	b4 85       	ldd	r27, Z+12	; 0x0c
    a820:	81 2c       	mov	r8, r1
    a822:	91 2c       	mov	r9, r1
    a824:	2d 91       	ld	r18, X+
    a826:	3d 91       	ld	r19, X+
    a828:	23 2b       	or	r18, r19
    a82a:	21 f0       	breq	.+8      	; 0xa834 <dir_register+0x34>
    a82c:	ff ef       	ldi	r31, 0xFF	; 255
    a82e:	8f 1a       	sub	r8, r31
    a830:	9f 0a       	sbc	r9, r31
    a832:	f8 cf       	rjmp	.-16     	; 0xa824 <dir_register+0x24>
    a834:	8c 01       	movw	r16, r24
    a836:	5c 01       	movw	r10, r24
    a838:	2c e1       	ldi	r18, 0x1C	; 28
    a83a:	a2 0e       	add	r10, r18
    a83c:	b1 1c       	adc	r11, r1
    a83e:	4c e0       	ldi	r20, 0x0C	; 12
    a840:	50 e0       	ldi	r21, 0x00	; 0
    a842:	b5 01       	movw	r22, r10
    a844:	ce 01       	movw	r24, r28
    a846:	01 96       	adiw	r24, 0x01	; 1
    a848:	0e 94 6d 46 	call	0x8cda	; 0x8cda <mem_cpy.part.0>
    a84c:	8c 85       	ldd	r24, Y+12	; 0x0c
    a84e:	80 ff       	sbrs	r24, 0
    a850:	94 c0       	rjmp	.+296    	; 0xa97a <dir_register+0x17a>
    a852:	80 e4       	ldi	r24, 0x40	; 64
    a854:	f8 01       	movw	r30, r16
    a856:	87 a3       	std	Z+39, r24	; 0x27
    a858:	41 2c       	mov	r4, r1
    a85a:	51 2c       	mov	r5, r1
    a85c:	32 01       	movw	r6, r4
    a85e:	43 94       	inc	r4
    a860:	72 01       	movw	r14, r4
    a862:	f6 01       	movw	r30, r12
    a864:	23 84       	ldd	r2, Z+11	; 0x0b
    a866:	34 84       	ldd	r3, Z+12	; 0x0c
    a868:	4b e0       	ldi	r20, 0x0B	; 11
    a86a:	50 e0       	ldi	r21, 0x00	; 0
    a86c:	be 01       	movw	r22, r28
    a86e:	6f 5f       	subi	r22, 0xFF	; 255
    a870:	7f 4f       	sbci	r23, 0xFF	; 255
    a872:	c5 01       	movw	r24, r10
    a874:	0e 94 6d 46 	call	0x8cda	; 0x8cda <mem_cpy.part.0>
    a878:	f6 e0       	ldi	r31, 0x06	; 6
    a87a:	4f 16       	cp	r4, r31
    a87c:	51 04       	cpc	r5, r1
    a87e:	18 f1       	brcs	.+70     	; 0xa8c6 <dir_register+0xc6>
    a880:	f1 01       	movw	r30, r2
    a882:	b3 01       	movw	r22, r6
    a884:	a2 01       	movw	r20, r4
    a886:	81 91       	ld	r24, Z+
    a888:	91 91       	ld	r25, Z+
    a88a:	00 97       	sbiw	r24, 0x00	; 0
    a88c:	d9 f0       	breq	.+54     	; 0xa8c4 <dir_register+0xc4>
    a88e:	20 e1       	ldi	r18, 0x10	; 16
    a890:	30 e0       	ldi	r19, 0x00	; 0
    a892:	44 0f       	add	r20, r20
    a894:	55 1f       	adc	r21, r21
    a896:	66 1f       	adc	r22, r22
    a898:	77 1f       	adc	r23, r23
    a89a:	dc 01       	movw	r26, r24
    a89c:	a1 70       	andi	r26, 0x01	; 1
    a89e:	bb 27       	eor	r27, r27
    a8a0:	4a 0f       	add	r20, r26
    a8a2:	5b 1f       	adc	r21, r27
    a8a4:	61 1d       	adc	r22, r1
    a8a6:	71 1d       	adc	r23, r1
    a8a8:	96 95       	lsr	r25
    a8aa:	87 95       	ror	r24
    a8ac:	60 ff       	sbrs	r22, 0
    a8ae:	06 c0       	rjmp	.+12     	; 0xa8bc <dir_register+0xbc>
    a8b0:	a1 e2       	ldi	r26, 0x21	; 33
    a8b2:	4a 27       	eor	r20, r26
    a8b4:	a0 e1       	ldi	r26, 0x10	; 16
    a8b6:	5a 27       	eor	r21, r26
    a8b8:	a1 e0       	ldi	r26, 0x01	; 1
    a8ba:	6a 27       	eor	r22, r26
    a8bc:	21 50       	subi	r18, 0x01	; 1
    a8be:	31 09       	sbc	r19, r1
    a8c0:	41 f7       	brne	.-48     	; 0xa892 <dir_register+0x92>
    a8c2:	e1 cf       	rjmp	.-62     	; 0xa886 <dir_register+0x86>
    a8c4:	7a 01       	movw	r14, r20
    a8c6:	fe 01       	movw	r30, r28
    a8c8:	75 96       	adiw	r30, 0x15	; 21
    a8ca:	27 e0       	ldi	r18, 0x07	; 7
    a8cc:	30 e0       	ldi	r19, 0x00	; 0
    a8ce:	9e 2d       	mov	r25, r14
    a8d0:	9f 70       	andi	r25, 0x0F	; 15
    a8d2:	80 e3       	ldi	r24, 0x30	; 48
    a8d4:	89 0f       	add	r24, r25
    a8d6:	8a 33       	cpi	r24, 0x3A	; 58
    a8d8:	10 f0       	brcs	.+4      	; 0xa8de <dir_register+0xde>
    a8da:	87 e3       	ldi	r24, 0x37	; 55
    a8dc:	89 0f       	add	r24, r25
    a8de:	21 50       	subi	r18, 0x01	; 1
    a8e0:	31 09       	sbc	r19, r1
    a8e2:	82 93       	st	-Z, r24
    a8e4:	a4 e0       	ldi	r26, 0x04	; 4
    a8e6:	f6 94       	lsr	r15
    a8e8:	e7 94       	ror	r14
    a8ea:	aa 95       	dec	r26
    a8ec:	e1 f7       	brne	.-8      	; 0xa8e6 <dir_register+0xe6>
    a8ee:	e1 14       	cp	r14, r1
    a8f0:	f1 04       	cpc	r15, r1
    a8f2:	69 f7       	brne	.-38     	; 0xa8ce <dir_register+0xce>
    a8f4:	ed e0       	ldi	r30, 0x0D	; 13
    a8f6:	f0 e0       	ldi	r31, 0x00	; 0
    a8f8:	ec 0f       	add	r30, r28
    a8fa:	fd 1f       	adc	r31, r29
    a8fc:	e2 0f       	add	r30, r18
    a8fe:	f3 1f       	adc	r31, r19
    a900:	4e e7       	ldi	r20, 0x7E	; 126
    a902:	40 83       	st	Z, r20
    a904:	f5 01       	movw	r30, r10
    a906:	80 e0       	ldi	r24, 0x00	; 0
    a908:	90 e0       	ldi	r25, 0x00	; 0
    a90a:	28 17       	cp	r18, r24
    a90c:	39 07       	cpc	r19, r25
    a90e:	29 f0       	breq	.+10     	; 0xa91a <dir_register+0x11a>
    a910:	41 91       	ld	r20, Z+
    a912:	40 32       	cpi	r20, 0x20	; 32
    a914:	11 f0       	breq	.+4      	; 0xa91a <dir_register+0x11a>
    a916:	01 96       	adiw	r24, 0x01	; 1
    a918:	f8 cf       	rjmp	.-16     	; 0xa90a <dir_register+0x10a>
    a91a:	f5 01       	movw	r30, r10
    a91c:	e8 0f       	add	r30, r24
    a91e:	f9 1f       	adc	r31, r25
    a920:	28 30       	cpi	r18, 0x08	; 8
    a922:	31 05       	cpc	r19, r1
    a924:	50 f4       	brcc	.+20     	; 0xa93a <dir_register+0x13a>
    a926:	ad e0       	ldi	r26, 0x0D	; 13
    a928:	b0 e0       	ldi	r27, 0x00	; 0
    a92a:	ac 0f       	add	r26, r28
    a92c:	bd 1f       	adc	r27, r29
    a92e:	a2 0f       	add	r26, r18
    a930:	b3 1f       	adc	r27, r19
    a932:	8c 91       	ld	r24, X
    a934:	2f 5f       	subi	r18, 0xFF	; 255
    a936:	3f 4f       	sbci	r19, 0xFF	; 255
    a938:	01 c0       	rjmp	.+2      	; 0xa93c <dir_register+0x13c>
    a93a:	80 e2       	ldi	r24, 0x20	; 32
    a93c:	81 93       	st	Z+, r24
    a93e:	cf 01       	movw	r24, r30
    a940:	8a 19       	sub	r24, r10
    a942:	9b 09       	sbc	r25, r11
    a944:	08 97       	sbiw	r24, 0x08	; 8
    a946:	60 f3       	brcs	.-40     	; 0xa920 <dir_register+0x120>
    a948:	c8 01       	movw	r24, r16
    a94a:	4c de       	rcall	.-872    	; 0xa5e4 <dir_find>
    a94c:	00 97       	sbiw	r24, 0x00	; 0
    a94e:	71 f4       	brne	.+28     	; 0xa96c <dir_register+0x16c>
    a950:	8f ef       	ldi	r24, 0xFF	; 255
    a952:	48 1a       	sub	r4, r24
    a954:	58 0a       	sbc	r5, r24
    a956:	68 0a       	sbc	r6, r24
    a958:	78 0a       	sbc	r7, r24
    a95a:	94 e6       	ldi	r25, 0x64	; 100
    a95c:	49 16       	cp	r4, r25
    a95e:	51 04       	cpc	r5, r1
    a960:	61 04       	cpc	r6, r1
    a962:	71 04       	cpc	r7, r1
    a964:	09 f0       	breq	.+2      	; 0xa968 <dir_register+0x168>
    a966:	7c cf       	rjmp	.-264    	; 0xa860 <dir_register+0x60>
    a968:	27 e0       	ldi	r18, 0x07	; 7
    a96a:	a9 c0       	rjmp	.+338    	; 0xaabe <dir_register+0x2be>
    a96c:	84 30       	cpi	r24, 0x04	; 4
    a96e:	91 05       	cpc	r25, r1
    a970:	09 f0       	breq	.+2      	; 0xa974 <dir_register+0x174>
    a972:	ce c0       	rjmp	.+412    	; 0xab10 <dir_register+0x310>
    a974:	8c 85       	ldd	r24, Y+12	; 0x0c
    a976:	f8 01       	movw	r30, r16
    a978:	87 a3       	std	Z+39, r24	; 0x27
    a97a:	8c 85       	ldd	r24, Y+12	; 0x0c
    a97c:	81 ff       	sbrs	r24, 1
    a97e:	0b c0       	rjmp	.+22     	; 0xa996 <dir_register+0x196>
    a980:	c4 01       	movw	r24, r8
    a982:	0c 96       	adiw	r24, 0x0c	; 12
    a984:	6d e0       	ldi	r22, 0x0D	; 13
    a986:	70 e0       	ldi	r23, 0x00	; 0
    a988:	0e 94 44 e0 	call	0x1c088	; 0x1c088 <__udivmodhi4>
    a98c:	7b 01       	movw	r14, r22
    a98e:	ff ef       	ldi	r31, 0xFF	; 255
    a990:	ef 1a       	sub	r14, r31
    a992:	ff 0a       	sbc	r15, r31
    a994:	03 c0       	rjmp	.+6      	; 0xa99c <dir_register+0x19c>
    a996:	ee 24       	eor	r14, r14
    a998:	e3 94       	inc	r14
    a99a:	f1 2c       	mov	r15, r1
    a99c:	b7 01       	movw	r22, r14
    a99e:	c8 01       	movw	r24, r16
    a9a0:	d7 dc       	rcall	.-1618   	; 0xa350 <dir_alloc>
    a9a2:	00 97       	sbiw	r24, 0x00	; 0
    a9a4:	09 f0       	breq	.+2      	; 0xa9a8 <dir_register+0x1a8>
    a9a6:	b4 c0       	rjmp	.+360    	; 0xab10 <dir_register+0x310>
    a9a8:	21 e0       	ldi	r18, 0x01	; 1
    a9aa:	e2 1a       	sub	r14, r18
    a9ac:	f1 08       	sbc	r15, r1
    a9ae:	09 f4       	brne	.+2      	; 0xa9b2 <dir_register+0x1b2>
    a9b0:	88 c0       	rjmp	.+272    	; 0xaac2 <dir_register+0x2c2>
    a9b2:	f8 01       	movw	r30, r16
    a9b4:	46 85       	ldd	r20, Z+14	; 0x0e
    a9b6:	57 85       	ldd	r21, Z+15	; 0x0f
    a9b8:	60 89       	ldd	r22, Z+16	; 0x10
    a9ba:	71 89       	ldd	r23, Z+17	; 0x11
    a9bc:	c7 01       	movw	r24, r14
    a9be:	e5 e0       	ldi	r30, 0x05	; 5
    a9c0:	88 0f       	add	r24, r24
    a9c2:	99 1f       	adc	r25, r25
    a9c4:	ea 95       	dec	r30
    a9c6:	e1 f7       	brne	.-8      	; 0xa9c0 <dir_register+0x1c0>
    a9c8:	48 1b       	sub	r20, r24
    a9ca:	59 0b       	sbc	r21, r25
    a9cc:	61 09       	sbc	r22, r1
    a9ce:	71 09       	sbc	r23, r1
    a9d0:	c8 01       	movw	r24, r16
    a9d2:	5e d9       	rcall	.-3396   	; 0x9c90 <dir_sdi>
    a9d4:	00 97       	sbiw	r24, 0x00	; 0
    a9d6:	09 f0       	breq	.+2      	; 0xa9da <dir_register+0x1da>
    a9d8:	9b c0       	rjmp	.+310    	; 0xab10 <dir_register+0x310>
    a9da:	c5 01       	movw	r24, r10
    a9dc:	0e 94 06 46 	call	0x8c0c	; 0x8c0c <sum_sfn>
    a9e0:	68 2e       	mov	r6, r24
    a9e2:	5f e0       	ldi	r21, 0x0F	; 15
    a9e4:	35 2e       	mov	r3, r21
    a9e6:	6d e0       	ldi	r22, 0x0D	; 13
    a9e8:	46 2e       	mov	r4, r22
    a9ea:	78 ef       	ldi	r23, 0xF8	; 248
    a9ec:	87 2e       	mov	r8, r23
    a9ee:	74 e0       	ldi	r23, 0x04	; 4
    a9f0:	97 2e       	mov	r9, r23
    a9f2:	55 24       	eor	r5, r5
    a9f4:	53 94       	inc	r5
    a9f6:	f8 01       	movw	r30, r16
    a9f8:	46 89       	ldd	r20, Z+22	; 0x16
    a9fa:	57 89       	ldd	r21, Z+23	; 0x17
    a9fc:	60 8d       	ldd	r22, Z+24	; 0x18
    a9fe:	71 8d       	ldd	r23, Z+25	; 0x19
    aa00:	c6 01       	movw	r24, r12
    aa02:	0e 94 c4 49 	call	0x9388	; 0x9388 <move_window>
    aa06:	00 97       	sbiw	r24, 0x00	; 0
    aa08:	09 f0       	breq	.+2      	; 0xaa0c <dir_register+0x20c>
    aa0a:	82 c0       	rjmp	.+260    	; 0xab10 <dir_register+0x310>
    aa0c:	f6 01       	movw	r30, r12
    aa0e:	63 85       	ldd	r22, Z+11	; 0x0b
    aa10:	74 85       	ldd	r23, Z+12	; 0x0c
    aa12:	f8 01       	movw	r30, r16
    aa14:	02 8c       	ldd	r0, Z+26	; 0x1a
    aa16:	f3 8d       	ldd	r31, Z+27	; 0x1b
    aa18:	e0 2d       	mov	r30, r0
    aa1a:	fe 8b       	std	Y+22, r31	; 0x16
    aa1c:	ed 8b       	std	Y+21, r30	; 0x15
    aa1e:	7e 2c       	mov	r7, r14
    aa20:	65 86       	std	Z+13, r6	; 0x0d
    aa22:	33 86       	std	Z+11, r3	; 0x0b
    aa24:	14 86       	std	Z+12, r1	; 0x0c
    aa26:	12 8e       	std	Z+26, r1	; 0x1a
    aa28:	13 8e       	std	Z+27, r1	; 0x1b
    aa2a:	97 01       	movw	r18, r14
    aa2c:	33 27       	eor	r19, r19
    aa2e:	21 50       	subi	r18, 0x01	; 1
    aa30:	31 09       	sbc	r19, r1
    aa32:	42 9e       	mul	r4, r18
    aa34:	c0 01       	movw	r24, r0
    aa36:	43 9e       	mul	r4, r19
    aa38:	90 0d       	add	r25, r0
    aa3a:	11 24       	eor	r1, r1
    aa3c:	ab ee       	ldi	r26, 0xEB	; 235
    aa3e:	b4 e0       	ldi	r27, 0x04	; 4
    aa40:	20 e0       	ldi	r18, 0x00	; 0
    aa42:	30 e0       	ldi	r19, 0x00	; 0
    aa44:	2f 3f       	cpi	r18, 0xFF	; 255
    aa46:	ff ef       	ldi	r31, 0xFF	; 255
    aa48:	3f 07       	cpc	r19, r31
    aa4a:	49 f0       	breq	.+18     	; 0xaa5e <dir_register+0x25e>
    aa4c:	9c 01       	movw	r18, r24
    aa4e:	22 0f       	add	r18, r18
    aa50:	33 1f       	adc	r19, r19
    aa52:	26 0f       	add	r18, r22
    aa54:	37 1f       	adc	r19, r23
    aa56:	f9 01       	movw	r30, r18
    aa58:	20 81       	ld	r18, Z
    aa5a:	31 81       	ldd	r19, Z+1	; 0x01
    aa5c:	01 96       	adiw	r24, 0x01	; 1
    aa5e:	4d 91       	ld	r20, X+
    aa60:	ed 89       	ldd	r30, Y+21	; 0x15
    aa62:	fe 89       	ldd	r31, Y+22	; 0x16
    aa64:	e4 0f       	add	r30, r20
    aa66:	f1 1d       	adc	r31, r1
    aa68:	20 83       	st	Z, r18
    aa6a:	31 83       	std	Z+1, r19	; 0x01
    aa6c:	21 15       	cp	r18, r1
    aa6e:	31 05       	cpc	r19, r1
    aa70:	11 f4       	brne	.+4      	; 0xaa76 <dir_register+0x276>
    aa72:	2f ef       	ldi	r18, 0xFF	; 255
    aa74:	3f ef       	ldi	r19, 0xFF	; 255
    aa76:	8a 16       	cp	r8, r26
    aa78:	9b 06       	cpc	r9, r27
    aa7a:	21 f7       	brne	.-56     	; 0xaa44 <dir_register+0x244>
    aa7c:	2f 3f       	cpi	r18, 0xFF	; 255
    aa7e:	3f 4f       	sbci	r19, 0xFF	; 255
    aa80:	49 f0       	breq	.+18     	; 0xaa94 <dir_register+0x294>
    aa82:	88 0f       	add	r24, r24
    aa84:	99 1f       	adc	r25, r25
    aa86:	db 01       	movw	r26, r22
    aa88:	a8 0f       	add	r26, r24
    aa8a:	b9 1f       	adc	r27, r25
    aa8c:	8d 91       	ld	r24, X+
    aa8e:	9c 91       	ld	r25, X
    aa90:	89 2b       	or	r24, r25
    aa92:	19 f4       	brne	.+6      	; 0xaa9a <dir_register+0x29a>
    aa94:	27 2d       	mov	r18, r7
    aa96:	20 64       	ori	r18, 0x40	; 64
    aa98:	72 2e       	mov	r7, r18
    aa9a:	ed 89       	ldd	r30, Y+21	; 0x15
    aa9c:	fe 89       	ldd	r31, Y+22	; 0x16
    aa9e:	70 82       	st	Z, r7
    aaa0:	f6 01       	movw	r30, r12
    aaa2:	53 82       	std	Z+3, r5	; 0x03
    aaa4:	60 e0       	ldi	r22, 0x00	; 0
    aaa6:	70 e0       	ldi	r23, 0x00	; 0
    aaa8:	c8 01       	movw	r24, r16
    aaaa:	6a db       	rcall	.-2348   	; 0xa180 <dir_next>
    aaac:	00 97       	sbiw	r24, 0x00	; 0
    aaae:	81 f5       	brne	.+96     	; 0xab10 <dir_register+0x310>
    aab0:	f1 e0       	ldi	r31, 0x01	; 1
    aab2:	ef 1a       	sub	r14, r31
    aab4:	f1 08       	sbc	r15, r1
    aab6:	09 f0       	breq	.+2      	; 0xaaba <dir_register+0x2ba>
    aab8:	9e cf       	rjmp	.-196    	; 0xa9f6 <dir_register+0x1f6>
    aaba:	03 c0       	rjmp	.+6      	; 0xaac2 <dir_register+0x2c2>
    aabc:	26 e0       	ldi	r18, 0x06	; 6
    aabe:	90 e0       	ldi	r25, 0x00	; 0
    aac0:	28 c0       	rjmp	.+80     	; 0xab12 <dir_register+0x312>
    aac2:	f8 01       	movw	r30, r16
    aac4:	46 89       	ldd	r20, Z+22	; 0x16
    aac6:	57 89       	ldd	r21, Z+23	; 0x17
    aac8:	60 8d       	ldd	r22, Z+24	; 0x18
    aaca:	71 8d       	ldd	r23, Z+25	; 0x19
    aacc:	c6 01       	movw	r24, r12
    aace:	0e 94 c4 49 	call	0x9388	; 0x9388 <move_window>
    aad2:	00 97       	sbiw	r24, 0x00	; 0
    aad4:	e9 f4       	brne	.+58     	; 0xab10 <dir_register+0x310>
    aad6:	40 e2       	ldi	r20, 0x20	; 32
    aad8:	50 e0       	ldi	r21, 0x00	; 0
    aada:	60 e0       	ldi	r22, 0x00	; 0
    aadc:	70 e0       	ldi	r23, 0x00	; 0
    aade:	f8 01       	movw	r30, r16
    aae0:	82 8d       	ldd	r24, Z+26	; 0x1a
    aae2:	93 8d       	ldd	r25, Z+27	; 0x1b
    aae4:	0e 94 04 45 	call	0x8a08	; 0x8a08 <mem_set>
    aae8:	4b e0       	ldi	r20, 0x0B	; 11
    aaea:	50 e0       	ldi	r21, 0x00	; 0
    aaec:	b5 01       	movw	r22, r10
    aaee:	f8 01       	movw	r30, r16
    aaf0:	82 8d       	ldd	r24, Z+26	; 0x1a
    aaf2:	93 8d       	ldd	r25, Z+27	; 0x1b
    aaf4:	0e 94 6d 46 	call	0x8cda	; 0x8cda <mem_cpy.part.0>
    aaf8:	f8 01       	movw	r30, r16
    aafa:	22 8d       	ldd	r18, Z+26	; 0x1a
    aafc:	33 8d       	ldd	r19, Z+27	; 0x1b
    aafe:	87 a1       	ldd	r24, Z+39	; 0x27
    ab00:	88 71       	andi	r24, 0x18	; 24
    ab02:	f9 01       	movw	r30, r18
    ab04:	84 87       	std	Z+12, r24	; 0x0c
    ab06:	81 e0       	ldi	r24, 0x01	; 1
    ab08:	f6 01       	movw	r30, r12
    ab0a:	83 83       	std	Z+3, r24	; 0x03
    ab0c:	20 e0       	ldi	r18, 0x00	; 0
    ab0e:	d7 cf       	rjmp	.-82     	; 0xaabe <dir_register+0x2be>
    ab10:	28 2f       	mov	r18, r24
    ab12:	82 2f       	mov	r24, r18
    ab14:	66 96       	adiw	r28, 0x16	; 22
    ab16:	e2 e1       	ldi	r30, 0x12	; 18
    ab18:	0c 94 f4 e0 	jmp	0x1c1e8	; 0x1c1e8 <__epilogue_restores__>

0000ab1c <follow_path>:
    ab1c:	aa e0       	ldi	r26, 0x0A	; 10
    ab1e:	b0 e0       	ldi	r27, 0x00	; 0
    ab20:	e4 e9       	ldi	r30, 0x94	; 148
    ab22:	f5 e5       	ldi	r31, 0x55	; 85
    ab24:	0c 94 d8 e0 	jmp	0x1c1b0	; 0x1c1b0 <__prologue_saves__>
    ab28:	7c 01       	movw	r14, r24
    ab2a:	3b 01       	movw	r6, r22
    ab2c:	dc 01       	movw	r26, r24
    ab2e:	0d 90       	ld	r0, X+
    ab30:	bc 91       	ld	r27, X
    ab32:	a0 2d       	mov	r26, r0
    ab34:	be 83       	std	Y+6, r27	; 0x06
    ab36:	ad 83       	std	Y+5, r26	; 0x05
    ab38:	fb 01       	movw	r30, r22
    ab3a:	80 81       	ld	r24, Z
    ab3c:	8f 32       	cpi	r24, 0x2F	; 47
    ab3e:	11 f0       	breq	.+4      	; 0xab44 <follow_path+0x28>
    ab40:	8c 35       	cpi	r24, 0x5C	; 92
    ab42:	11 f4       	brne	.+4      	; 0xab48 <follow_path+0x2c>
    ab44:	93 01       	movw	r18, r6
    ab46:	0c c0       	rjmp	.+24     	; 0xab60 <follow_path+0x44>
    ab48:	ed 81       	ldd	r30, Y+5	; 0x05
    ab4a:	fe 81       	ldd	r31, Y+6	; 0x06
    ab4c:	85 89       	ldd	r24, Z+21	; 0x15
    ab4e:	96 89       	ldd	r25, Z+22	; 0x16
    ab50:	a7 89       	ldd	r26, Z+23	; 0x17
    ab52:	b0 8d       	ldd	r27, Z+24	; 0x18
    ab54:	f7 01       	movw	r30, r14
    ab56:	86 83       	std	Z+6, r24	; 0x06
    ab58:	97 83       	std	Z+7, r25	; 0x07
    ab5a:	a0 87       	std	Z+8, r26	; 0x08
    ab5c:	b1 87       	std	Z+9, r27	; 0x09
    ab5e:	0e c0       	rjmp	.+28     	; 0xab7c <follow_path+0x60>
    ab60:	39 01       	movw	r6, r18
    ab62:	d9 01       	movw	r26, r18
    ab64:	8c 91       	ld	r24, X
    ab66:	2f 5f       	subi	r18, 0xFF	; 255
    ab68:	3f 4f       	sbci	r19, 0xFF	; 255
    ab6a:	8f 32       	cpi	r24, 0x2F	; 47
    ab6c:	c9 f3       	breq	.-14     	; 0xab60 <follow_path+0x44>
    ab6e:	8c 35       	cpi	r24, 0x5C	; 92
    ab70:	b9 f3       	breq	.-18     	; 0xab60 <follow_path+0x44>
    ab72:	f7 01       	movw	r30, r14
    ab74:	16 82       	std	Z+6, r1	; 0x06
    ab76:	17 82       	std	Z+7, r1	; 0x07
    ab78:	10 86       	std	Z+8, r1	; 0x08
    ab7a:	11 86       	std	Z+9, r1	; 0x09
    ab7c:	d3 01       	movw	r26, r6
    ab7e:	8c 91       	ld	r24, X
    ab80:	80 32       	cpi	r24, 0x20	; 32
    ab82:	58 f0       	brcs	.+22     	; 0xab9a <follow_path+0x7e>
    ab84:	f7 01       	movw	r30, r14
    ab86:	7c 96       	adiw	r30, 0x1c	; 28
    ab88:	f8 87       	std	Y+8, r31	; 0x08
    ab8a:	ef 83       	std	Y+7, r30	; 0x07
    ab8c:	2d 81       	ldd	r18, Y+5	; 0x05
    ab8e:	3e 81       	ldd	r19, Y+6	; 0x06
    ab90:	2b 5c       	subi	r18, 0xCB	; 203
    ab92:	3f 4f       	sbci	r19, 0xFF	; 255
    ab94:	3a 87       	std	Y+10, r19	; 0x0a
    ab96:	29 87       	std	Y+9, r18	; 0x09
    ab98:	96 c0       	rjmp	.+300    	; 0xacc6 <follow_path+0x1aa>
    ab9a:	80 e8       	ldi	r24, 0x80	; 128
    ab9c:	f7 01       	movw	r30, r14
    ab9e:	87 a3       	std	Z+39, r24	; 0x27
    aba0:	40 e0       	ldi	r20, 0x00	; 0
    aba2:	50 e0       	ldi	r21, 0x00	; 0
    aba4:	ba 01       	movw	r22, r20
    aba6:	c7 01       	movw	r24, r14
    aba8:	73 d8       	rcall	.-3866   	; 0x9c90 <dir_sdi>
    abaa:	e5 c1       	rjmp	.+970    	; 0xaf76 <follow_path+0x45a>
    abac:	6c 35       	cpi	r22, 0x5C	; 92
    abae:	71 05       	cpc	r23, r1
    abb0:	b9 f1       	breq	.+110    	; 0xac20 <follow_path+0x104>
    abb2:	60 38       	cpi	r22, 0x80	; 128
    abb4:	71 05       	cpc	r23, r1
    abb6:	28 f4       	brcc	.+10     	; 0xabc2 <follow_path+0xa6>
    abb8:	e7 e2       	ldi	r30, 0x27	; 39
    abba:	f4 e0       	ldi	r31, 0x04	; 4
    abbc:	41 91       	ld	r20, Z+
    abbe:	41 11       	cpse	r20, r1
    abc0:	8c c0       	rjmp	.+280    	; 0xacda <follow_path+0x1be>
    abc2:	0f 3f       	cpi	r16, 0xFF	; 255
    abc4:	11 05       	cpc	r17, r1
    abc6:	08 f0       	brcs	.+2      	; 0xabca <follow_path+0xae>
    abc8:	b9 c1       	rjmp	.+882    	; 0xaf3c <follow_path+0x420>
    abca:	f8 01       	movw	r30, r16
    abcc:	ee 0f       	add	r30, r30
    abce:	ff 1f       	adc	r31, r31
    abd0:	ea 0d       	add	r30, r10
    abd2:	fb 1d       	adc	r31, r11
    abd4:	71 83       	std	Z+1, r23	; 0x01
    abd6:	60 83       	st	Z, r22
    abd8:	0f 5f       	subi	r16, 0xFF	; 255
    abda:	1f 4f       	sbci	r17, 0xFF	; 255
    abdc:	ce 01       	movw	r24, r28
    abde:	01 96       	adiw	r24, 0x01	; 1
    abe0:	0e 94 1c 45 	call	0x8a38	; 0x8a38 <tchar2uni>
    abe4:	6f 3f       	cpi	r22, 0xFF	; 255
    abe6:	bf ef       	ldi	r27, 0xFF	; 255
    abe8:	7b 07       	cpc	r23, r27
    abea:	8b 07       	cpc	r24, r27
    abec:	9b 07       	cpc	r25, r27
    abee:	09 f4       	brne	.+2      	; 0xabf2 <follow_path+0xd6>
    abf0:	a5 c1       	rjmp	.+842    	; 0xaf3c <follow_path+0x420>
    abf2:	61 15       	cp	r22, r1
    abf4:	71 05       	cpc	r23, r1
    abf6:	e1 e0       	ldi	r30, 0x01	; 1
    abf8:	8e 07       	cpc	r24, r30
    abfa:	91 05       	cpc	r25, r1
    abfc:	48 f0       	brcs	.+18     	; 0xac10 <follow_path+0xf4>
    abfe:	f8 01       	movw	r30, r16
    ac00:	ee 0f       	add	r30, r30
    ac02:	ff 1f       	adc	r31, r31
    ac04:	ea 0d       	add	r30, r10
    ac06:	fb 1d       	adc	r31, r11
    ac08:	91 83       	std	Z+1, r25	; 0x01
    ac0a:	80 83       	st	Z, r24
    ac0c:	0f 5f       	subi	r16, 0xFF	; 255
    ac0e:	1f 4f       	sbci	r17, 0xFF	; 255
    ac10:	9b 01       	movw	r18, r22
    ac12:	60 32       	cpi	r22, 0x20	; 32
    ac14:	71 05       	cpc	r23, r1
    ac16:	08 f4       	brcc	.+2      	; 0xac1a <follow_path+0xfe>
    ac18:	6a c0       	rjmp	.+212    	; 0xacee <follow_path+0x1d2>
    ac1a:	6f 32       	cpi	r22, 0x2F	; 47
    ac1c:	71 05       	cpc	r23, r1
    ac1e:	31 f6       	brne	.-116    	; 0xabac <follow_path+0x90>
    ac20:	e9 81       	ldd	r30, Y+1	; 0x01
    ac22:	fa 81       	ldd	r31, Y+2	; 0x02
    ac24:	80 81       	ld	r24, Z
    ac26:	8f 32       	cpi	r24, 0x2F	; 47
    ac28:	09 f4       	brne	.+2      	; 0xac2c <follow_path+0x110>
    ac2a:	5d c0       	rjmp	.+186    	; 0xace6 <follow_path+0x1ca>
    ac2c:	8c 35       	cpi	r24, 0x5C	; 92
    ac2e:	09 f4       	brne	.+2      	; 0xac32 <follow_path+0x116>
    ac30:	5a c0       	rjmp	.+180    	; 0xace6 <follow_path+0x1ca>
    ac32:	1b 82       	std	Y+3, r1	; 0x03
    ac34:	69 80       	ldd	r6, Y+1	; 0x01
    ac36:	7a 80       	ldd	r7, Y+2	; 0x02
    ac38:	98 01       	movw	r18, r16
    ac3a:	22 0f       	add	r18, r18
    ac3c:	33 1f       	adc	r19, r19
    ac3e:	01 30       	cpi	r16, 0x01	; 1
    ac40:	11 05       	cpc	r17, r1
    ac42:	09 f0       	breq	.+2      	; 0xac46 <follow_path+0x12a>
    ac44:	57 c0       	rjmp	.+174    	; 0xacf4 <follow_path+0x1d8>
    ac46:	d5 01       	movw	r26, r10
    ac48:	8d 91       	ld	r24, X+
    ac4a:	9c 91       	ld	r25, X
    ac4c:	8e 97       	sbiw	r24, 0x2e	; 46
    ac4e:	09 f0       	breq	.+2      	; 0xac52 <follow_path+0x136>
    ac50:	5c c0       	rjmp	.+184    	; 0xad0a <follow_path+0x1ee>
    ac52:	f9 01       	movw	r30, r18
    ac54:	ea 0d       	add	r30, r10
    ac56:	fb 1d       	adc	r31, r11
    ac58:	11 82       	std	Z+1, r1	; 0x01
    ac5a:	10 82       	st	Z, r1
    ac5c:	f7 01       	movw	r30, r14
    ac5e:	7c 96       	adiw	r30, 0x1c	; 28
    ac60:	80 e0       	ldi	r24, 0x00	; 0
    ac62:	90 e0       	ldi	r25, 0x00	; 0
    ac64:	80 17       	cp	r24, r16
    ac66:	91 07       	cpc	r25, r17
    ac68:	08 f0       	brcs	.+2      	; 0xac6c <follow_path+0x150>
    ac6a:	53 c0       	rjmp	.+166    	; 0xad12 <follow_path+0x1f6>
    ac6c:	2e e2       	ldi	r18, 0x2E	; 46
    ac6e:	21 93       	st	Z+, r18
    ac70:	01 96       	adiw	r24, 0x01	; 1
    ac72:	8b 30       	cpi	r24, 0x0B	; 11
    ac74:	91 05       	cpc	r25, r1
    ac76:	b1 f7       	brne	.-20     	; 0xac64 <follow_path+0x148>
    ac78:	8b 81       	ldd	r24, Y+3	; 0x03
    ac7a:	80 62       	ori	r24, 0x20	; 32
    ac7c:	f7 01       	movw	r30, r14
    ac7e:	87 a3       	std	Z+39, r24	; 0x27
    ac80:	80 e0       	ldi	r24, 0x00	; 0
    ac82:	90 e0       	ldi	r25, 0x00	; 0
    ac84:	00 97       	sbiw	r24, 0x00	; 0
    ac86:	09 f0       	breq	.+2      	; 0xac8a <follow_path+0x16e>
    ac88:	76 c1       	rjmp	.+748    	; 0xaf76 <follow_path+0x45a>
    ac8a:	c7 01       	movw	r24, r14
    ac8c:	ab dc       	rcall	.-1706   	; 0xa5e4 <dir_find>
    ac8e:	f7 01       	movw	r30, r14
    ac90:	27 a1       	ldd	r18, Z+39	; 0x27
    ac92:	00 97       	sbiw	r24, 0x00	; 0
    ac94:	09 f0       	breq	.+2      	; 0xac98 <follow_path+0x17c>
    ac96:	55 c1       	rjmp	.+682    	; 0xaf42 <follow_path+0x426>
    ac98:	22 fd       	sbrc	r18, 2
    ac9a:	6d c1       	rjmp	.+730    	; 0xaf76 <follow_path+0x45a>
    ac9c:	f7 01       	movw	r30, r14
    ac9e:	84 81       	ldd	r24, Z+4	; 0x04
    aca0:	84 ff       	sbrs	r24, 4
    aca2:	60 c1       	rjmp	.+704    	; 0xaf64 <follow_path+0x448>
    aca4:	66 85       	ldd	r22, Z+14	; 0x0e
    aca6:	77 85       	ldd	r23, Z+15	; 0x0f
    aca8:	71 70       	andi	r23, 0x01	; 1
    acaa:	29 85       	ldd	r18, Y+9	; 0x09
    acac:	3a 85       	ldd	r19, Y+10	; 0x0a
    acae:	62 0f       	add	r22, r18
    acb0:	73 1f       	adc	r23, r19
    acb2:	ad 81       	ldd	r26, Y+5	; 0x05
    acb4:	be 81       	ldd	r27, Y+6	; 0x06
    acb6:	8c 91       	ld	r24, X
    acb8:	0e 94 35 48 	call	0x906a	; 0x906a <ld_clust.isra.4>
    acbc:	f7 01       	movw	r30, r14
    acbe:	66 83       	std	Z+6, r22	; 0x06
    acc0:	77 83       	std	Z+7, r23	; 0x07
    acc2:	80 87       	std	Z+8, r24	; 0x08
    acc4:	91 87       	std	Z+9, r25	; 0x09
    acc6:	7a 82       	std	Y+2, r7	; 0x02
    acc8:	69 82       	std	Y+1, r6	; 0x01
    acca:	d7 01       	movw	r26, r14
    accc:	ed 91       	ld	r30, X+
    acce:	fc 91       	ld	r31, X
    acd0:	a3 84       	ldd	r10, Z+11	; 0x0b
    acd2:	b4 84       	ldd	r11, Z+12	; 0x0c
    acd4:	00 e0       	ldi	r16, 0x00	; 0
    acd6:	10 e0       	ldi	r17, 0x00	; 0
    acd8:	81 cf       	rjmp	.-254    	; 0xabdc <follow_path+0xc0>
    acda:	50 e0       	ldi	r21, 0x00	; 0
    acdc:	24 17       	cp	r18, r20
    acde:	35 07       	cpc	r19, r21
    ace0:	09 f0       	breq	.+2      	; 0xace4 <follow_path+0x1c8>
    ace2:	6c cf       	rjmp	.-296    	; 0xabbc <follow_path+0xa0>
    ace4:	2b c1       	rjmp	.+598    	; 0xaf3c <follow_path+0x420>
    ace6:	31 96       	adiw	r30, 0x01	; 1
    ace8:	fa 83       	std	Y+2, r31	; 0x02
    acea:	e9 83       	std	Y+1, r30	; 0x01
    acec:	99 cf       	rjmp	.-206    	; 0xac20 <follow_path+0x104>
    acee:	f4 e0       	ldi	r31, 0x04	; 4
    acf0:	fb 83       	std	Y+3, r31	; 0x03
    acf2:	a0 cf       	rjmp	.-192    	; 0xac34 <follow_path+0x118>
    acf4:	02 30       	cpi	r16, 0x02	; 2
    acf6:	11 05       	cpc	r17, r1
    acf8:	41 f4       	brne	.+16     	; 0xad0a <follow_path+0x1ee>
    acfa:	f5 01       	movw	r30, r10
    acfc:	82 81       	ldd	r24, Z+2	; 0x02
    acfe:	93 81       	ldd	r25, Z+3	; 0x03
    ad00:	8e 97       	sbiw	r24, 0x2e	; 46
    ad02:	19 f4       	brne	.+6      	; 0xad0a <follow_path+0x1ee>
    ad04:	80 81       	ld	r24, Z
    ad06:	91 81       	ldd	r25, Z+1	; 0x01
    ad08:	a1 cf       	rjmp	.-190    	; 0xac4c <follow_path+0x130>
    ad0a:	f9 01       	movw	r30, r18
    ad0c:	ea 0d       	add	r30, r10
    ad0e:	fb 1d       	adc	r31, r11
    ad10:	09 c0       	rjmp	.+18     	; 0xad24 <follow_path+0x208>
    ad12:	20 e2       	ldi	r18, 0x20	; 32
    ad14:	ac cf       	rjmp	.-168    	; 0xac6e <follow_path+0x152>
    ad16:	92 91       	ld	r25, -Z
    ad18:	82 91       	ld	r24, -Z
    ad1a:	80 32       	cpi	r24, 0x20	; 32
    ad1c:	91 05       	cpc	r25, r1
    ad1e:	31 f4       	brne	.+12     	; 0xad2c <follow_path+0x210>
    ad20:	01 50       	subi	r16, 0x01	; 1
    ad22:	11 09       	sbc	r17, r1
    ad24:	01 15       	cp	r16, r1
    ad26:	11 05       	cpc	r17, r1
    ad28:	b1 f7       	brne	.-20     	; 0xad16 <follow_path+0x1fa>
    ad2a:	02 c0       	rjmp	.+4      	; 0xad30 <follow_path+0x214>
    ad2c:	8e 97       	sbiw	r24, 0x2e	; 46
    ad2e:	c1 f3       	breq	.-16     	; 0xad20 <follow_path+0x204>
    ad30:	f8 01       	movw	r30, r16
    ad32:	ee 0f       	add	r30, r30
    ad34:	ff 1f       	adc	r31, r31
    ad36:	ea 0d       	add	r30, r10
    ad38:	fb 1d       	adc	r31, r11
    ad3a:	11 82       	std	Z+1, r1	; 0x01
    ad3c:	10 82       	st	Z, r1
    ad3e:	01 15       	cp	r16, r1
    ad40:	11 05       	cpc	r17, r1
    ad42:	09 f4       	brne	.+2      	; 0xad46 <follow_path+0x22a>
    ad44:	fb c0       	rjmp	.+502    	; 0xaf3c <follow_path+0x420>
    ad46:	d5 01       	movw	r26, r10
    ad48:	41 2c       	mov	r4, r1
    ad4a:	51 2c       	mov	r5, r1
    ad4c:	8d 91       	ld	r24, X+
    ad4e:	9d 91       	ld	r25, X+
    ad50:	80 32       	cpi	r24, 0x20	; 32
    ad52:	91 05       	cpc	r25, r1
    ad54:	21 f4       	brne	.+8      	; 0xad5e <follow_path+0x242>
    ad56:	2f ef       	ldi	r18, 0xFF	; 255
    ad58:	42 1a       	sub	r4, r18
    ad5a:	52 0a       	sbc	r5, r18
    ad5c:	f7 cf       	rjmp	.-18     	; 0xad4c <follow_path+0x230>
    ad5e:	41 14       	cp	r4, r1
    ad60:	51 04       	cpc	r5, r1
    ad62:	11 f4       	brne	.+4      	; 0xad68 <follow_path+0x24c>
    ad64:	8e 97       	sbiw	r24, 0x2e	; 46
    ad66:	39 f4       	brne	.+14     	; 0xad76 <follow_path+0x25a>
    ad68:	3b 81       	ldd	r19, Y+3	; 0x03
    ad6a:	33 60       	ori	r19, 0x03	; 3
    ad6c:	3b 83       	std	Y+3, r19	; 0x03
    ad6e:	03 c0       	rjmp	.+6      	; 0xad76 <follow_path+0x25a>
    ad70:	01 50       	subi	r16, 0x01	; 1
    ad72:	11 09       	sbc	r17, r1
    ad74:	21 f0       	breq	.+8      	; 0xad7e <follow_path+0x262>
    ad76:	92 91       	ld	r25, -Z
    ad78:	82 91       	ld	r24, -Z
    ad7a:	8e 97       	sbiw	r24, 0x2e	; 46
    ad7c:	c9 f7       	brne	.-14     	; 0xad70 <follow_path+0x254>
    ad7e:	4b e0       	ldi	r20, 0x0B	; 11
    ad80:	50 e0       	ldi	r21, 0x00	; 0
    ad82:	60 e2       	ldi	r22, 0x20	; 32
    ad84:	70 e0       	ldi	r23, 0x00	; 0
    ad86:	8f 81       	ldd	r24, Y+7	; 0x07
    ad88:	98 85       	ldd	r25, Y+8	; 0x08
    ad8a:	0e 94 04 45 	call	0x8a08	; 0x8a08 <mem_set>
    ad8e:	48 e0       	ldi	r20, 0x08	; 8
    ad90:	84 2e       	mov	r8, r20
    ad92:	91 2c       	mov	r9, r1
    ad94:	c1 2c       	mov	r12, r1
    ad96:	d1 2c       	mov	r13, r1
    ad98:	1c 82       	std	Y+4, r1	; 0x04
    ad9a:	12 01       	movw	r2, r4
    ad9c:	8f ef       	ldi	r24, 0xFF	; 255
    ad9e:	28 1a       	sub	r2, r24
    ada0:	38 0a       	sbc	r3, r24
    ada2:	44 0c       	add	r4, r4
    ada4:	55 1c       	adc	r5, r5
    ada6:	f5 01       	movw	r30, r10
    ada8:	e4 0d       	add	r30, r4
    adaa:	f5 1d       	adc	r31, r5
    adac:	80 81       	ld	r24, Z
    adae:	91 81       	ldd	r25, Z+1	; 0x01
    adb0:	00 97       	sbiw	r24, 0x00	; 0
    adb2:	09 f4       	brne	.+2      	; 0xadb6 <follow_path+0x29a>
    adb4:	98 c0       	rjmp	.+304    	; 0xaee6 <follow_path+0x3ca>
    adb6:	80 32       	cpi	r24, 0x20	; 32
    adb8:	91 05       	cpc	r25, r1
    adba:	31 f0       	breq	.+12     	; 0xadc8 <follow_path+0x2ac>
    adbc:	8e 32       	cpi	r24, 0x2E	; 46
    adbe:	91 05       	cpc	r25, r1
    adc0:	41 f4       	brne	.+16     	; 0xadd2 <follow_path+0x2b6>
    adc2:	20 16       	cp	r2, r16
    adc4:	31 06       	cpc	r3, r17
    adc6:	61 f0       	breq	.+24     	; 0xade0 <follow_path+0x2c4>
    adc8:	9b 81       	ldd	r25, Y+3	; 0x03
    adca:	93 60       	ori	r25, 0x03	; 3
    adcc:	9b 83       	std	Y+3, r25	; 0x03
    adce:	21 01       	movw	r4, r2
    add0:	e4 cf       	rjmp	.-56     	; 0xad9a <follow_path+0x27e>
    add2:	c8 14       	cp	r12, r8
    add4:	d9 04       	cpc	r13, r9
    add6:	40 f4       	brcc	.+16     	; 0xade8 <follow_path+0x2cc>
    add8:	20 16       	cp	r2, r16
    adda:	31 06       	cpc	r3, r17
    addc:	31 f5       	brne	.+76     	; 0xae2a <follow_path+0x30e>
    adde:	c5 c0       	rjmp	.+394    	; 0xaf6a <follow_path+0x44e>
    ade0:	c8 14       	cp	r12, r8
    ade2:	d9 04       	cpc	r13, r9
    ade4:	08 f4       	brcc	.+2      	; 0xade8 <follow_path+0x2cc>
    ade6:	c1 c0       	rjmp	.+386    	; 0xaf6a <follow_path+0x44e>
    ade8:	ab e0       	ldi	r26, 0x0B	; 11
    adea:	8a 16       	cp	r8, r26
    adec:	91 04       	cpc	r9, r1
    adee:	39 f4       	brne	.+14     	; 0xadfe <follow_path+0x2e2>
    adf0:	bb 81       	ldd	r27, Y+3	; 0x03
    adf2:	b3 60       	ori	r27, 0x03	; 3
    adf4:	bb 83       	std	Y+3, r27	; 0x03
    adf6:	2b e0       	ldi	r18, 0x0B	; 11
    adf8:	82 2e       	mov	r8, r18
    adfa:	91 2c       	mov	r9, r1
    adfc:	74 c0       	rjmp	.+232    	; 0xaee6 <follow_path+0x3ca>
    adfe:	20 16       	cp	r2, r16
    ae00:	31 06       	cpc	r3, r17
    ae02:	39 f0       	breq	.+14     	; 0xae12 <follow_path+0x2f6>
    ae04:	eb 81       	ldd	r30, Y+3	; 0x03
    ae06:	e3 60       	ori	r30, 0x03	; 3
    ae08:	eb 83       	std	Y+3, r30	; 0x03
    ae0a:	02 15       	cp	r16, r2
    ae0c:	13 05       	cpc	r17, r3
    ae0e:	08 f4       	brcc	.+2      	; 0xae12 <follow_path+0x2f6>
    ae10:	6a c0       	rjmp	.+212    	; 0xaee6 <follow_path+0x3ca>
    ae12:	fc 81       	ldd	r31, Y+4	; 0x04
    ae14:	ff 0f       	add	r31, r31
    ae16:	ff 0f       	add	r31, r31
    ae18:	fc 83       	std	Y+4, r31	; 0x04
    ae1a:	18 01       	movw	r2, r16
    ae1c:	8b e0       	ldi	r24, 0x0B	; 11
    ae1e:	88 2e       	mov	r8, r24
    ae20:	91 2c       	mov	r9, r1
    ae22:	98 e0       	ldi	r25, 0x08	; 8
    ae24:	c9 2e       	mov	r12, r25
    ae26:	d1 2c       	mov	r13, r1
    ae28:	d2 cf       	rjmp	.-92     	; 0xadce <follow_path+0x2b2>
    ae2a:	80 38       	cpi	r24, 0x80	; 128
    ae2c:	91 05       	cpc	r25, r1
    ae2e:	78 f1       	brcs	.+94     	; 0xae8e <follow_path+0x372>
    ae30:	2b 81       	ldd	r18, Y+3	; 0x03
    ae32:	22 60       	ori	r18, 0x02	; 2
    ae34:	52 2e       	mov	r5, r18
    ae36:	bc 01       	movw	r22, r24
    ae38:	80 e0       	ldi	r24, 0x00	; 0
    ae3a:	90 e0       	ldi	r25, 0x00	; 0
    ae3c:	45 eb       	ldi	r20, 0xB5	; 181
    ae3e:	51 e0       	ldi	r21, 0x01	; 1
    ae40:	0e 94 57 67 	call	0xceae	; 0xceae <ff_uni2oem>
    ae44:	87 ff       	sbrs	r24, 7
    ae46:	08 c0       	rjmp	.+16     	; 0xae58 <follow_path+0x33c>
    ae48:	8f 77       	andi	r24, 0x7F	; 127
    ae4a:	99 27       	eor	r25, r25
    ae4c:	fc 01       	movw	r30, r24
    ae4e:	e5 59       	subi	r30, 0x95	; 149
    ae50:	fb 4f       	sbci	r31, 0xFB	; 251
    ae52:	80 81       	ld	r24, Z
    ae54:	90 e0       	ldi	r25, 0x00	; 0
    ae56:	18 c0       	rjmp	.+48     	; 0xae88 <follow_path+0x36c>
    ae58:	8f 3f       	cpi	r24, 0xFF	; 255
    ae5a:	91 05       	cpc	r25, r1
    ae5c:	a9 f0       	breq	.+42     	; 0xae88 <follow_path+0x36c>
    ae5e:	a0 f0       	brcs	.+40     	; 0xae88 <follow_path+0x36c>
    ae60:	94 01       	movw	r18, r8
    ae62:	21 50       	subi	r18, 0x01	; 1
    ae64:	31 09       	sbc	r19, r1
    ae66:	c2 16       	cp	r12, r18
    ae68:	d3 06       	cpc	r13, r19
    ae6a:	28 f0       	brcs	.+10     	; 0xae76 <follow_path+0x35a>
    ae6c:	3b 81       	ldd	r19, Y+3	; 0x03
    ae6e:	33 60       	ori	r19, 0x03	; 3
    ae70:	3b 83       	std	Y+3, r19	; 0x03
    ae72:	64 01       	movw	r12, r8
    ae74:	ac cf       	rjmp	.-168    	; 0xadce <follow_path+0x2b2>
    ae76:	f7 01       	movw	r30, r14
    ae78:	ec 0d       	add	r30, r12
    ae7a:	fd 1d       	adc	r31, r13
    ae7c:	94 8f       	std	Z+28, r25	; 0x1c
    ae7e:	d6 01       	movw	r26, r12
    ae80:	11 96       	adiw	r26, 0x01	; 1
    ae82:	6d 01       	movw	r12, r26
    ae84:	5b 82       	std	Y+3, r5	; 0x03
    ae86:	26 c0       	rjmp	.+76     	; 0xaed4 <follow_path+0x3b8>
    ae88:	00 97       	sbiw	r24, 0x00	; 0
    ae8a:	59 f0       	breq	.+22     	; 0xaea2 <follow_path+0x386>
    ae8c:	5b 82       	std	Y+3, r5	; 0x03
    ae8e:	e0 e3       	ldi	r30, 0x30	; 48
    ae90:	f4 e0       	ldi	r31, 0x04	; 4
    ae92:	21 91       	ld	r18, Z+
    ae94:	22 23       	and	r18, r18
    ae96:	59 f0       	breq	.+22     	; 0xaeae <follow_path+0x392>
    ae98:	30 e0       	ldi	r19, 0x00	; 0
    ae9a:	82 17       	cp	r24, r18
    ae9c:	93 07       	cpc	r25, r19
    ae9e:	c9 f7       	brne	.-14     	; 0xae92 <follow_path+0x376>
    aea0:	5b 80       	ldd	r5, Y+3	; 0x03
    aea2:	b5 2d       	mov	r27, r5
    aea4:	b3 60       	ori	r27, 0x03	; 3
    aea6:	bb 83       	std	Y+3, r27	; 0x03
    aea8:	8f e5       	ldi	r24, 0x5F	; 95
    aeaa:	90 e0       	ldi	r25, 0x00	; 0
    aeac:	13 c0       	rjmp	.+38     	; 0xaed4 <follow_path+0x3b8>
    aeae:	9c 01       	movw	r18, r24
    aeb0:	21 54       	subi	r18, 0x41	; 65
    aeb2:	31 09       	sbc	r19, r1
    aeb4:	2a 31       	cpi	r18, 0x1A	; 26
    aeb6:	31 05       	cpc	r19, r1
    aeb8:	18 f4       	brcc	.+6      	; 0xaec0 <follow_path+0x3a4>
    aeba:	ec 81       	ldd	r30, Y+4	; 0x04
    aebc:	e2 60       	ori	r30, 0x02	; 2
    aebe:	ec 83       	std	Y+4, r30	; 0x04
    aec0:	9c 01       	movw	r18, r24
    aec2:	21 56       	subi	r18, 0x61	; 97
    aec4:	31 09       	sbc	r19, r1
    aec6:	2a 31       	cpi	r18, 0x1A	; 26
    aec8:	31 05       	cpc	r19, r1
    aeca:	20 f4       	brcc	.+8      	; 0xaed4 <follow_path+0x3b8>
    aecc:	fc 81       	ldd	r31, Y+4	; 0x04
    aece:	f1 60       	ori	r31, 0x01	; 1
    aed0:	fc 83       	std	Y+4, r31	; 0x04
    aed2:	80 97       	sbiw	r24, 0x20	; 32
    aed4:	f7 01       	movw	r30, r14
    aed6:	ec 0d       	add	r30, r12
    aed8:	fd 1d       	adc	r31, r13
    aeda:	84 8f       	std	Z+28, r24	; 0x1c
    aedc:	96 01       	movw	r18, r12
    aede:	2f 5f       	subi	r18, 0xFF	; 255
    aee0:	3f 4f       	sbci	r19, 0xFF	; 255
    aee2:	69 01       	movw	r12, r18
    aee4:	74 cf       	rjmp	.-280    	; 0xadce <follow_path+0x2b2>
    aee6:	f7 01       	movw	r30, r14
    aee8:	84 8d       	ldd	r24, Z+28	; 0x1c
    aeea:	85 3e       	cpi	r24, 0xE5	; 229
    aeec:	11 f4       	brne	.+4      	; 0xaef2 <follow_path+0x3d6>
    aeee:	25 e0       	ldi	r18, 0x05	; 5
    aef0:	24 8f       	std	Z+28, r18	; 0x1c
    aef2:	38 e0       	ldi	r19, 0x08	; 8
    aef4:	83 16       	cp	r8, r19
    aef6:	91 04       	cpc	r9, r1
    aef8:	21 f4       	brne	.+8      	; 0xaf02 <follow_path+0x3e6>
    aefa:	8c 81       	ldd	r24, Y+4	; 0x04
    aefc:	88 0f       	add	r24, r24
    aefe:	88 0f       	add	r24, r24
    af00:	8c 83       	std	Y+4, r24	; 0x04
    af02:	8c 81       	ldd	r24, Y+4	; 0x04
    af04:	8c 70       	andi	r24, 0x0C	; 12
    af06:	8c 30       	cpi	r24, 0x0C	; 12
    af08:	21 f0       	breq	.+8      	; 0xaf12 <follow_path+0x3f6>
    af0a:	8c 81       	ldd	r24, Y+4	; 0x04
    af0c:	83 70       	andi	r24, 0x03	; 3
    af0e:	83 30       	cpi	r24, 0x03	; 3
    af10:	19 f4       	brne	.+6      	; 0xaf18 <follow_path+0x3fc>
    af12:	9b 81       	ldd	r25, Y+3	; 0x03
    af14:	92 60       	ori	r25, 0x02	; 2
    af16:	9b 83       	std	Y+3, r25	; 0x03
    af18:	ab 81       	ldd	r26, Y+3	; 0x03
    af1a:	a1 fd       	sbrc	r26, 1
    af1c:	0b c0       	rjmp	.+22     	; 0xaf34 <follow_path+0x418>
    af1e:	bc 81       	ldd	r27, Y+4	; 0x04
    af20:	b0 ff       	sbrs	r27, 0
    af22:	02 c0       	rjmp	.+4      	; 0xaf28 <follow_path+0x40c>
    af24:	a0 61       	ori	r26, 0x10	; 16
    af26:	ab 83       	std	Y+3, r26	; 0x03
    af28:	ec 81       	ldd	r30, Y+4	; 0x04
    af2a:	e2 ff       	sbrs	r30, 2
    af2c:	03 c0       	rjmp	.+6      	; 0xaf34 <follow_path+0x418>
    af2e:	fb 81       	ldd	r31, Y+3	; 0x03
    af30:	f8 60       	ori	r31, 0x08	; 8
    af32:	fb 83       	std	Y+3, r31	; 0x03
    af34:	2b 81       	ldd	r18, Y+3	; 0x03
    af36:	f7 01       	movw	r30, r14
    af38:	27 a3       	std	Z+39, r18	; 0x27
    af3a:	a2 ce       	rjmp	.-700    	; 0xac80 <follow_path+0x164>
    af3c:	86 e0       	ldi	r24, 0x06	; 6
    af3e:	90 e0       	ldi	r25, 0x00	; 0
    af40:	a1 ce       	rjmp	.-702    	; 0xac84 <follow_path+0x168>
    af42:	84 30       	cpi	r24, 0x04	; 4
    af44:	91 05       	cpc	r25, r1
    af46:	b9 f4       	brne	.+46     	; 0xaf76 <follow_path+0x45a>
    af48:	32 2f       	mov	r19, r18
    af4a:	34 70       	andi	r19, 0x04	; 4
    af4c:	25 ff       	sbrs	r18, 5
    af4e:	08 c0       	rjmp	.+16     	; 0xaf60 <follow_path+0x444>
    af50:	33 23       	and	r19, r19
    af52:	09 f4       	brne	.+2      	; 0xaf56 <follow_path+0x43a>
    af54:	b8 ce       	rjmp	.-656    	; 0xacc6 <follow_path+0x1aa>
    af56:	80 e8       	ldi	r24, 0x80	; 128
    af58:	87 a3       	std	Z+39, r24	; 0x27
    af5a:	80 e0       	ldi	r24, 0x00	; 0
    af5c:	90 e0       	ldi	r25, 0x00	; 0
    af5e:	0b c0       	rjmp	.+22     	; 0xaf76 <follow_path+0x45a>
    af60:	31 11       	cpse	r19, r1
    af62:	09 c0       	rjmp	.+18     	; 0xaf76 <follow_path+0x45a>
    af64:	85 e0       	ldi	r24, 0x05	; 5
    af66:	90 e0       	ldi	r25, 0x00	; 0
    af68:	06 c0       	rjmp	.+12     	; 0xaf76 <follow_path+0x45a>
    af6a:	fb e0       	ldi	r31, 0x0B	; 11
    af6c:	8f 16       	cp	r8, r31
    af6e:	91 04       	cpc	r9, r1
    af70:	09 f0       	breq	.+2      	; 0xaf74 <follow_path+0x458>
    af72:	4f cf       	rjmp	.-354    	; 0xae12 <follow_path+0x2f6>
    af74:	3d cf       	rjmp	.-390    	; 0xadf0 <follow_path+0x2d4>
    af76:	2a 96       	adiw	r28, 0x0a	; 10
    af78:	e2 e1       	ldi	r30, 0x12	; 18
    af7a:	0c 94 f4 e0 	jmp	0x1c1e8	; 0x1c1e8 <__epilogue_restores__>

0000af7e <f_mount>:
    af7e:	a6 e0       	ldi	r26, 0x06	; 6
    af80:	b0 e0       	ldi	r27, 0x00	; 0
    af82:	e5 ec       	ldi	r30, 0xC5	; 197
    af84:	f7 e5       	ldi	r31, 0x57	; 87
    af86:	0c 94 e7 e0 	jmp	0x1c1ce	; 0x1c1ce <__prologue_saves__+0x1e>
    af8a:	9c 83       	std	Y+4, r25	; 0x04
    af8c:	8b 83       	std	Y+3, r24	; 0x03
    af8e:	7e 83       	std	Y+6, r23	; 0x06
    af90:	6d 83       	std	Y+5, r22	; 0x05
    af92:	14 2f       	mov	r17, r20
    af94:	7a 83       	std	Y+2, r23	; 0x02
    af96:	69 83       	std	Y+1, r22	; 0x01
    af98:	ce 01       	movw	r24, r28
    af9a:	01 96       	adiw	r24, 0x01	; 1
    af9c:	0e 94 15 46 	call	0x8c2a	; 0x8c2a <get_ldnumber>
    afa0:	97 fd       	sbrc	r25, 7
    afa2:	20 c0       	rjmp	.+64     	; 0xafe4 <f_mount+0x66>
    afa4:	88 0f       	add	r24, r24
    afa6:	99 1f       	adc	r25, r25
    afa8:	fc 01       	movw	r30, r24
    afaa:	e3 5c       	subi	r30, 0xC3	; 195
    afac:	f7 4e       	sbci	r31, 0xE7	; 231
    afae:	01 90       	ld	r0, Z+
    afb0:	f0 81       	ld	r31, Z
    afb2:	e0 2d       	mov	r30, r0
    afb4:	30 97       	sbiw	r30, 0x00	; 0
    afb6:	09 f0       	breq	.+2      	; 0xafba <f_mount+0x3c>
    afb8:	10 82       	st	Z, r1
    afba:	eb 81       	ldd	r30, Y+3	; 0x03
    afbc:	fc 81       	ldd	r31, Y+4	; 0x04
    afbe:	30 97       	sbiw	r30, 0x00	; 0
    afc0:	09 f0       	breq	.+2      	; 0xafc4 <f_mount+0x46>
    afc2:	10 82       	st	Z, r1
    afc4:	dc 01       	movw	r26, r24
    afc6:	a3 5c       	subi	r26, 0xC3	; 195
    afc8:	b7 4e       	sbci	r27, 0xE7	; 231
    afca:	ed 93       	st	X+, r30
    afcc:	fc 93       	st	X, r31
    afce:	11 23       	and	r17, r17
    afd0:	61 f0       	breq	.+24     	; 0xafea <f_mount+0x6c>
    afd2:	40 e0       	ldi	r20, 0x00	; 0
    afd4:	be 01       	movw	r22, r28
    afd6:	6d 5f       	subi	r22, 0xFD	; 253
    afd8:	7f 4f       	sbci	r23, 0xFF	; 255
    afda:	ce 01       	movw	r24, r28
    afdc:	05 96       	adiw	r24, 0x05	; 5
    afde:	0e 94 3f 4a 	call	0x947e	; 0x947e <mount_volume>
    afe2:	05 c0       	rjmp	.+10     	; 0xafee <f_mount+0x70>
    afe4:	8b e0       	ldi	r24, 0x0B	; 11
    afe6:	90 e0       	ldi	r25, 0x00	; 0
    afe8:	02 c0       	rjmp	.+4      	; 0xafee <f_mount+0x70>
    afea:	80 e0       	ldi	r24, 0x00	; 0
    afec:	90 e0       	ldi	r25, 0x00	; 0
    afee:	26 96       	adiw	r28, 0x06	; 6
    aff0:	e3 e0       	ldi	r30, 0x03	; 3
    aff2:	0c 94 03 e1 	jmp	0x1c206	; 0x1c206 <__epilogue_restores__+0x1e>

0000aff6 <f_open>:
    aff6:	a6 e3       	ldi	r26, 0x36	; 54
    aff8:	b0 e0       	ldi	r27, 0x00	; 0
    affa:	e1 e0       	ldi	r30, 0x01	; 1
    affc:	f8 e5       	ldi	r31, 0x58	; 88
    affe:	0c 94 d8 e0 	jmp	0x1c1b0	; 0x1c1b0 <__prologue_saves__>
    b002:	7a ab       	std	Y+50, r23	; 0x32
    b004:	69 ab       	std	Y+49, r22	; 0x31
    b006:	00 97       	sbiw	r24, 0x00	; 0
    b008:	09 f4       	brne	.+2      	; 0xb00c <f_open+0x16>
    b00a:	93 c1       	rjmp	.+806    	; 0xb332 <f_open+0x33c>
    b00c:	74 2e       	mov	r7, r20
    b00e:	7c 01       	movw	r14, r24
    b010:	24 2f       	mov	r18, r20
    b012:	2f 73       	andi	r18, 0x3F	; 63
    b014:	32 2e       	mov	r3, r18
    b016:	42 2f       	mov	r20, r18
    b018:	be 01       	movw	r22, r28
    b01a:	61 5d       	subi	r22, 0xD1	; 209
    b01c:	7f 4f       	sbci	r23, 0xFF	; 255
    b01e:	ce 01       	movw	r24, r28
    b020:	c1 96       	adiw	r24, 0x31	; 49
    b022:	0e 94 3f 4a 	call	0x947e	; 0x947e <mount_volume>
    b026:	00 97       	sbiw	r24, 0x00	; 0
    b028:	09 f0       	breq	.+2      	; 0xb02c <f_open+0x36>
    b02a:	7d c1       	rjmp	.+762    	; 0xb326 <f_open+0x330>
    b02c:	8f a5       	ldd	r24, Y+47	; 0x2f
    b02e:	98 a9       	ldd	r25, Y+48	; 0x30
    b030:	9a 83       	std	Y+2, r25	; 0x02
    b032:	89 83       	std	Y+1, r24	; 0x01
    b034:	80 e0       	ldi	r24, 0x00	; 0
    b036:	92 e0       	ldi	r25, 0x02	; 2
    b038:	0e 94 51 67 	call	0xcea2	; 0xcea2 <ff_memalloc>
    b03c:	5c 01       	movw	r10, r24
    b03e:	00 97       	sbiw	r24, 0x00	; 0
    b040:	09 f4       	brne	.+2      	; 0xb044 <f_open+0x4e>
    b042:	79 c1       	rjmp	.+754    	; 0xb336 <f_open+0x340>
    b044:	ef a5       	ldd	r30, Y+47	; 0x2f
    b046:	f8 a9       	ldd	r31, Y+48	; 0x30
    b048:	94 87       	std	Z+12, r25	; 0x0c
    b04a:	83 87       	std	Z+11, r24	; 0x0b
    b04c:	69 a9       	ldd	r22, Y+49	; 0x31
    b04e:	7a a9       	ldd	r23, Y+50	; 0x32
    b050:	ce 01       	movw	r24, r28
    b052:	01 96       	adiw	r24, 0x01	; 1
    b054:	63 dd       	rcall	.-1338   	; 0xab1c <follow_path>
    b056:	8c 01       	movw	r16, r24
    b058:	89 2b       	or	r24, r25
    b05a:	29 f4       	brne	.+10     	; 0xb066 <f_open+0x70>
    b05c:	88 a5       	ldd	r24, Y+40	; 0x28
    b05e:	87 ff       	sbrs	r24, 7
    b060:	02 c0       	rjmp	.+4      	; 0xb066 <f_open+0x70>
    b062:	06 e0       	ldi	r16, 0x06	; 6
    b064:	10 e0       	ldi	r17, 0x00	; 0
    b066:	87 2d       	mov	r24, r7
    b068:	8c 71       	andi	r24, 0x1C	; 28
    b06a:	09 f4       	brne	.+2      	; 0xb06e <f_open+0x78>
    b06c:	75 c0       	rjmp	.+234    	; 0xb158 <f_open+0x162>
    b06e:	01 15       	cp	r16, r1
    b070:	11 05       	cpc	r17, r1
    b072:	79 f0       	breq	.+30     	; 0xb092 <f_open+0x9c>
    b074:	04 30       	cpi	r16, 0x04	; 4
    b076:	11 05       	cpc	r17, r1
    b078:	09 f0       	breq	.+2      	; 0xb07c <f_open+0x86>
    b07a:	6d c1       	rjmp	.+730    	; 0xb356 <f_open+0x360>
    b07c:	ce 01       	movw	r24, r28
    b07e:	01 96       	adiw	r24, 0x01	; 1
    b080:	bf db       	rcall	.-2178   	; 0xa800 <dir_register>
    b082:	8c 01       	movw	r16, r24
    b084:	89 2b       	or	r24, r25
    b086:	09 f0       	breq	.+2      	; 0xb08a <f_open+0x94>
    b088:	66 c1       	rjmp	.+716    	; 0xb356 <f_open+0x360>
    b08a:	33 2d       	mov	r19, r3
    b08c:	38 60       	ori	r19, 0x08	; 8
    b08e:	33 2e       	mov	r3, r19
    b090:	06 c0       	rjmp	.+12     	; 0xb09e <f_open+0xa8>
    b092:	8d 81       	ldd	r24, Y+5	; 0x05
    b094:	81 71       	andi	r24, 0x11	; 17
    b096:	09 f0       	breq	.+2      	; 0xb09a <f_open+0xa4>
    b098:	5c c1       	rjmp	.+696    	; 0xb352 <f_open+0x35c>
    b09a:	72 fc       	sbrc	r7, 2
    b09c:	51 c1       	rjmp	.+674    	; 0xb340 <f_open+0x34a>
    b09e:	33 fe       	sbrs	r3, 3
    b0a0:	6b c0       	rjmp	.+214    	; 0xb178 <f_open+0x182>
    b0a2:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b0a4:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b0a6:	ef a5       	ldd	r30, Y+47	; 0x2f
    b0a8:	f8 a9       	ldd	r31, Y+48	; 0x30
    b0aa:	b8 01       	movw	r22, r16
    b0ac:	80 81       	ld	r24, Z
    b0ae:	0e 94 35 48 	call	0x906a	; 0x906a <ld_clust.isra.4>
    b0b2:	2b 01       	movw	r4, r22
    b0b4:	3c 01       	movw	r6, r24
    b0b6:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <get_fattime>
    b0ba:	ab 01       	movw	r20, r22
    b0bc:	bc 01       	movw	r22, r24
    b0be:	c8 01       	movw	r24, r16
    b0c0:	0e 96       	adiw	r24, 0x0e	; 14
    b0c2:	0e 94 fe 44 	call	0x89fc	; 0x89fc <st_dword>
    b0c6:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b0c8:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b0ca:	80 e2       	ldi	r24, 0x20	; 32
    b0cc:	83 87       	std	Z+11, r24	; 0x0b
    b0ce:	af a5       	ldd	r26, Y+47	; 0x2f
    b0d0:	b8 a9       	ldd	r27, Y+48	; 0x30
    b0d2:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b0d4:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b0d6:	12 8e       	std	Z+26, r1	; 0x1a
    b0d8:	13 8e       	std	Z+27, r1	; 0x1b
    b0da:	8c 91       	ld	r24, X
    b0dc:	83 30       	cpi	r24, 0x03	; 3
    b0de:	11 f4       	brne	.+4      	; 0xb0e4 <f_open+0xee>
    b0e0:	14 8a       	std	Z+20, r1	; 0x14
    b0e2:	15 8a       	std	Z+21, r1	; 0x15
    b0e4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b0e6:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b0e8:	14 8e       	std	Z+28, r1	; 0x1c
    b0ea:	15 8e       	std	Z+29, r1	; 0x1d
    b0ec:	16 8e       	std	Z+30, r1	; 0x1e
    b0ee:	17 8e       	std	Z+31, r1	; 0x1f
    b0f0:	81 e0       	ldi	r24, 0x01	; 1
    b0f2:	fd 01       	movw	r30, r26
    b0f4:	83 83       	std	Z+3, r24	; 0x03
    b0f6:	41 14       	cp	r4, r1
    b0f8:	51 04       	cpc	r5, r1
    b0fa:	61 04       	cpc	r6, r1
    b0fc:	71 04       	cpc	r7, r1
    b0fe:	c9 f1       	breq	.+114    	; 0xb172 <f_open+0x17c>
    b100:	21 a9       	ldd	r18, Z+49	; 0x31
    b102:	32 a9       	ldd	r19, Z+50	; 0x32
    b104:	43 a9       	ldd	r20, Z+51	; 0x33
    b106:	54 a9       	ldd	r21, Z+52	; 0x34
    b108:	2b ab       	std	Y+51, r18	; 0x33
    b10a:	3c ab       	std	Y+52, r19	; 0x34
    b10c:	4d ab       	std	Y+53, r20	; 0x35
    b10e:	5e ab       	std	Y+54, r21	; 0x36
    b110:	00 e0       	ldi	r16, 0x00	; 0
    b112:	10 e0       	ldi	r17, 0x00	; 0
    b114:	98 01       	movw	r18, r16
    b116:	b3 01       	movw	r22, r6
    b118:	a2 01       	movw	r20, r4
    b11a:	ce 01       	movw	r24, r28
    b11c:	01 96       	adiw	r24, 0x01	; 1
    b11e:	0e 94 2f 50 	call	0xa05e	; 0xa05e <remove_chain>
    b122:	8c 01       	movw	r16, r24
    b124:	89 2b       	or	r24, r25
    b126:	09 f0       	breq	.+2      	; 0xb12a <f_open+0x134>
    b128:	16 c1       	rjmp	.+556    	; 0xb356 <f_open+0x360>
    b12a:	4b a9       	ldd	r20, Y+51	; 0x33
    b12c:	5c a9       	ldd	r21, Y+52	; 0x34
    b12e:	6d a9       	ldd	r22, Y+53	; 0x35
    b130:	7e a9       	ldd	r23, Y+54	; 0x36
    b132:	8f a5       	ldd	r24, Y+47	; 0x2f
    b134:	98 a9       	ldd	r25, Y+48	; 0x30
    b136:	0e 94 c4 49 	call	0x9388	; 0x9388 <move_window>
    b13a:	8c 01       	movw	r16, r24
    b13c:	ef a5       	ldd	r30, Y+47	; 0x2f
    b13e:	f8 a9       	ldd	r31, Y+48	; 0x30
    b140:	21 e0       	ldi	r18, 0x01	; 1
    b142:	42 1a       	sub	r4, r18
    b144:	51 08       	sbc	r5, r1
    b146:	61 08       	sbc	r6, r1
    b148:	71 08       	sbc	r7, r1
    b14a:	45 86       	std	Z+13, r4	; 0x0d
    b14c:	56 86       	std	Z+14, r5	; 0x0e
    b14e:	67 86       	std	Z+15, r6	; 0x0f
    b150:	70 8a       	std	Z+16, r7	; 0x10
    b152:	89 2b       	or	r24, r25
    b154:	61 f0       	breq	.+24     	; 0xb16e <f_open+0x178>
    b156:	ff c0       	rjmp	.+510    	; 0xb356 <f_open+0x360>
    b158:	01 15       	cp	r16, r1
    b15a:	11 05       	cpc	r17, r1
    b15c:	09 f0       	breq	.+2      	; 0xb160 <f_open+0x16a>
    b15e:	fb c0       	rjmp	.+502    	; 0xb356 <f_open+0x360>
    b160:	8d 81       	ldd	r24, Y+5	; 0x05
    b162:	84 fd       	sbrc	r24, 4
    b164:	f3 c0       	rjmp	.+486    	; 0xb34c <f_open+0x356>
    b166:	71 fe       	sbrs	r7, 1
    b168:	02 c0       	rjmp	.+4      	; 0xb16e <f_open+0x178>
    b16a:	80 fd       	sbrc	r24, 0
    b16c:	f2 c0       	rjmp	.+484    	; 0xb352 <f_open+0x35c>
    b16e:	33 fe       	sbrs	r3, 3
    b170:	03 c0       	rjmp	.+6      	; 0xb178 <f_open+0x182>
    b172:	33 2d       	mov	r19, r3
    b174:	30 64       	ori	r19, 0x40	; 64
    b176:	33 2e       	mov	r3, r19
    b178:	0f a5       	ldd	r16, Y+47	; 0x2f
    b17a:	18 a9       	ldd	r17, Y+48	; 0x30
    b17c:	f8 01       	movw	r30, r16
    b17e:	81 a9       	ldd	r24, Z+49	; 0x31
    b180:	92 a9       	ldd	r25, Z+50	; 0x32
    b182:	a3 a9       	ldd	r26, Z+51	; 0x33
    b184:	b4 a9       	ldd	r27, Z+52	; 0x34
    b186:	f7 01       	movw	r30, r14
    b188:	84 8f       	std	Z+28, r24	; 0x1c
    b18a:	95 8f       	std	Z+29, r25	; 0x1d
    b18c:	a6 8f       	std	Z+30, r26	; 0x1e
    b18e:	b7 8f       	std	Z+31, r27	; 0x1f
    b190:	6b 8c       	ldd	r6, Y+27	; 0x1b
    b192:	7c 8c       	ldd	r7, Y+28	; 0x1c
    b194:	71 a2       	std	Z+33, r7	; 0x21
    b196:	60 a2       	std	Z+32, r6	; 0x20
    b198:	b3 01       	movw	r22, r6
    b19a:	f8 01       	movw	r30, r16
    b19c:	80 81       	ld	r24, Z
    b19e:	0e 94 35 48 	call	0x906a	; 0x906a <ld_clust.isra.4>
    b1a2:	f7 01       	movw	r30, r14
    b1a4:	66 83       	std	Z+6, r22	; 0x06
    b1a6:	77 83       	std	Z+7, r23	; 0x07
    b1a8:	80 87       	std	Z+8, r24	; 0x08
    b1aa:	91 87       	std	Z+9, r25	; 0x09
    b1ac:	c3 01       	movw	r24, r6
    b1ae:	4c 96       	adiw	r24, 0x1c	; 28
    b1b0:	0e 94 e9 44 	call	0x89d2	; 0x89d2 <ld_dword>
    b1b4:	f7 01       	movw	r30, r14
    b1b6:	62 87       	std	Z+10, r22	; 0x0a
    b1b8:	73 87       	std	Z+11, r23	; 0x0b
    b1ba:	84 87       	std	Z+12, r24	; 0x0c
    b1bc:	95 87       	std	Z+13, r25	; 0x0d
    b1be:	13 a2       	std	Z+35, r1	; 0x23
    b1c0:	12 a2       	std	Z+34, r1	; 0x22
    b1c2:	11 83       	std	Z+1, r17	; 0x01
    b1c4:	00 83       	st	Z, r16
    b1c6:	f8 01       	movw	r30, r16
    b1c8:	85 81       	ldd	r24, Z+5	; 0x05
    b1ca:	96 81       	ldd	r25, Z+6	; 0x06
    b1cc:	f7 01       	movw	r30, r14
    b1ce:	93 83       	std	Z+3, r25	; 0x03
    b1d0:	82 83       	std	Z+2, r24	; 0x02
    b1d2:	36 86       	std	Z+14, r3	; 0x0e
    b1d4:	17 86       	std	Z+15, r1	; 0x0f
    b1d6:	10 8e       	std	Z+24, r1	; 0x18
    b1d8:	11 8e       	std	Z+25, r1	; 0x19
    b1da:	12 8e       	std	Z+26, r1	; 0x1a
    b1dc:	13 8e       	std	Z+27, r1	; 0x1b
    b1de:	10 8a       	std	Z+16, r1	; 0x10
    b1e0:	11 8a       	std	Z+17, r1	; 0x11
    b1e2:	12 8a       	std	Z+18, r1	; 0x12
    b1e4:	13 8a       	std	Z+19, r1	; 0x13
    b1e6:	67 01       	movw	r12, r14
    b1e8:	f4 e2       	ldi	r31, 0x24	; 36
    b1ea:	cf 0e       	add	r12, r31
    b1ec:	d1 1c       	adc	r13, r1
    b1ee:	40 e0       	ldi	r20, 0x00	; 0
    b1f0:	52 e0       	ldi	r21, 0x02	; 2
    b1f2:	60 e0       	ldi	r22, 0x00	; 0
    b1f4:	70 e0       	ldi	r23, 0x00	; 0
    b1f6:	c6 01       	movw	r24, r12
    b1f8:	0e 94 04 45 	call	0x8a08	; 0x8a08 <mem_set>
    b1fc:	35 fc       	sbrc	r3, 5
    b1fe:	03 c0       	rjmp	.+6      	; 0xb206 <f_open+0x210>
    b200:	00 e0       	ldi	r16, 0x00	; 0
    b202:	10 e0       	ldi	r17, 0x00	; 0
    b204:	89 c0       	rjmp	.+274    	; 0xb318 <f_open+0x322>
    b206:	f7 01       	movw	r30, r14
    b208:	62 84       	ldd	r6, Z+10	; 0x0a
    b20a:	73 84       	ldd	r7, Z+11	; 0x0b
    b20c:	84 84       	ldd	r8, Z+12	; 0x0c
    b20e:	95 84       	ldd	r9, Z+13	; 0x0d
    b210:	61 14       	cp	r6, r1
    b212:	71 04       	cpc	r7, r1
    b214:	81 04       	cpc	r8, r1
    b216:	91 04       	cpc	r9, r1
    b218:	99 f3       	breq	.-26     	; 0xb200 <f_open+0x20a>
    b21a:	60 8a       	std	Z+16, r6	; 0x10
    b21c:	71 8a       	std	Z+17, r7	; 0x11
    b21e:	82 8a       	std	Z+18, r8	; 0x12
    b220:	93 8a       	std	Z+19, r9	; 0x13
    b222:	ef a5       	ldd	r30, Y+47	; 0x2f
    b224:	f8 a9       	ldd	r31, Y+48	; 0x30
    b226:	21 84       	ldd	r2, Z+9	; 0x09
    b228:	32 84       	ldd	r3, Z+10	; 0x0a
    b22a:	c1 01       	movw	r24, r2
    b22c:	a0 e0       	ldi	r26, 0x00	; 0
    b22e:	b0 e0       	ldi	r27, 0x00	; 0
    b230:	1c 01       	movw	r2, r24
    b232:	2d 01       	movw	r4, r26
    b234:	59 e0       	ldi	r21, 0x09	; 9
    b236:	22 0c       	add	r2, r2
    b238:	33 1c       	adc	r3, r3
    b23a:	44 1c       	adc	r4, r4
    b23c:	55 1c       	adc	r5, r5
    b23e:	5a 95       	dec	r21
    b240:	d1 f7       	brne	.-12     	; 0xb236 <f_open+0x240>
    b242:	f7 01       	movw	r30, r14
    b244:	46 81       	ldd	r20, Z+6	; 0x06
    b246:	57 81       	ldd	r21, Z+7	; 0x07
    b248:	60 85       	ldd	r22, Z+8	; 0x08
    b24a:	71 85       	ldd	r23, Z+9	; 0x09
    b24c:	26 14       	cp	r2, r6
    b24e:	37 04       	cpc	r3, r7
    b250:	48 04       	cpc	r4, r8
    b252:	59 04       	cpc	r5, r9
    b254:	f0 f4       	brcc	.+60     	; 0xb292 <f_open+0x29c>
    b256:	f7 01       	movw	r30, r14
    b258:	80 81       	ld	r24, Z
    b25a:	91 81       	ldd	r25, Z+1	; 0x01
    b25c:	0e 94 94 4d 	call	0x9b28	; 0x9b28 <get_fat.isra.10>
    b260:	ab 01       	movw	r20, r22
    b262:	bc 01       	movw	r22, r24
    b264:	d4 01       	movw	r26, r8
    b266:	c3 01       	movw	r24, r6
    b268:	82 19       	sub	r24, r2
    b26a:	93 09       	sbc	r25, r3
    b26c:	a4 09       	sbc	r26, r4
    b26e:	b5 09       	sbc	r27, r5
    b270:	3c 01       	movw	r6, r24
    b272:	4d 01       	movw	r8, r26
    b274:	42 30       	cpi	r20, 0x02	; 2
    b276:	51 05       	cpc	r21, r1
    b278:	61 05       	cpc	r22, r1
    b27a:	71 05       	cpc	r23, r1
    b27c:	08 f4       	brcc	.+2      	; 0xb280 <f_open+0x28a>
    b27e:	63 c0       	rjmp	.+198    	; 0xb346 <f_open+0x350>
    b280:	4f 3f       	cpi	r20, 0xFF	; 255
    b282:	ff ef       	ldi	r31, 0xFF	; 255
    b284:	5f 07       	cpc	r21, r31
    b286:	6f 07       	cpc	r22, r31
    b288:	7f 07       	cpc	r23, r31
    b28a:	01 f7       	brne	.-64     	; 0xb24c <f_open+0x256>
    b28c:	01 e0       	ldi	r16, 0x01	; 1
    b28e:	10 e0       	ldi	r17, 0x00	; 0
    b290:	02 c0       	rjmp	.+4      	; 0xb296 <f_open+0x2a0>
    b292:	00 e0       	ldi	r16, 0x00	; 0
    b294:	10 e0       	ldi	r17, 0x00	; 0
    b296:	f7 01       	movw	r30, r14
    b298:	44 8b       	std	Z+20, r20	; 0x14
    b29a:	55 8b       	std	Z+21, r21	; 0x15
    b29c:	66 8b       	std	Z+22, r22	; 0x16
    b29e:	77 8b       	std	Z+23, r23	; 0x17
    b2a0:	01 15       	cp	r16, r1
    b2a2:	11 05       	cpc	r17, r1
    b2a4:	c9 f5       	brne	.+114    	; 0xb318 <f_open+0x322>
    b2a6:	d4 01       	movw	r26, r8
    b2a8:	c3 01       	movw	r24, r6
    b2aa:	91 70       	andi	r25, 0x01	; 1
    b2ac:	aa 27       	eor	r26, r26
    b2ae:	bb 27       	eor	r27, r27
    b2b0:	89 2b       	or	r24, r25
    b2b2:	8a 2b       	or	r24, r26
    b2b4:	8b 2b       	or	r24, r27
    b2b6:	09 f4       	brne	.+2      	; 0xb2ba <f_open+0x2c4>
    b2b8:	a3 cf       	rjmp	.-186    	; 0xb200 <f_open+0x20a>
    b2ba:	4f a4       	ldd	r4, Y+47	; 0x2f
    b2bc:	58 a8       	ldd	r5, Y+48	; 0x30
    b2be:	c2 01       	movw	r24, r4
    b2c0:	0e 94 a2 45 	call	0x8b44	; 0x8b44 <clst2sect>
    b2c4:	61 15       	cp	r22, r1
    b2c6:	71 05       	cpc	r23, r1
    b2c8:	81 05       	cpc	r24, r1
    b2ca:	91 05       	cpc	r25, r1
    b2cc:	19 f1       	breq	.+70     	; 0xb314 <f_open+0x31e>
    b2ce:	94 01       	movw	r18, r8
    b2d0:	83 01       	movw	r16, r6
    b2d2:	49 e0       	ldi	r20, 0x09	; 9
    b2d4:	36 95       	lsr	r19
    b2d6:	27 95       	ror	r18
    b2d8:	17 95       	ror	r17
    b2da:	07 95       	ror	r16
    b2dc:	4a 95       	dec	r20
    b2de:	d1 f7       	brne	.-12     	; 0xb2d4 <f_open+0x2de>
    b2e0:	a9 01       	movw	r20, r18
    b2e2:	98 01       	movw	r18, r16
    b2e4:	26 0f       	add	r18, r22
    b2e6:	37 1f       	adc	r19, r23
    b2e8:	48 1f       	adc	r20, r24
    b2ea:	59 1f       	adc	r21, r25
    b2ec:	f7 01       	movw	r30, r14
    b2ee:	20 8f       	std	Z+24, r18	; 0x18
    b2f0:	31 8f       	std	Z+25, r19	; 0x19
    b2f2:	42 8f       	std	Z+26, r20	; 0x1a
    b2f4:	53 8f       	std	Z+27, r21	; 0x1b
    b2f6:	01 e0       	ldi	r16, 0x01	; 1
    b2f8:	10 e0       	ldi	r17, 0x00	; 0
    b2fa:	b6 01       	movw	r22, r12
    b2fc:	f2 01       	movw	r30, r4
    b2fe:	81 81       	ldd	r24, Z+1	; 0x01
    b300:	0e 94 0d 68 	call	0xd01a	; 0xd01a <disk_read>
    b304:	31 e0       	ldi	r19, 0x01	; 1
    b306:	20 e0       	ldi	r18, 0x00	; 0
    b308:	89 2b       	or	r24, r25
    b30a:	09 f4       	brne	.+2      	; 0xb30e <f_open+0x318>
    b30c:	30 e0       	ldi	r19, 0x00	; 0
    b30e:	03 2f       	mov	r16, r19
    b310:	12 2f       	mov	r17, r18
    b312:	02 c0       	rjmp	.+4      	; 0xb318 <f_open+0x322>
    b314:	02 e0       	ldi	r16, 0x02	; 2
    b316:	10 e0       	ldi	r17, 0x00	; 0
    b318:	c5 01       	movw	r24, r10
    b31a:	0e 94 54 67 	call	0xcea8	; 0xcea8 <ff_memfree>
    b31e:	01 15       	cp	r16, r1
    b320:	11 05       	cpc	r17, r1
    b322:	59 f0       	breq	.+22     	; 0xb33a <f_open+0x344>
    b324:	01 c0       	rjmp	.+2      	; 0xb328 <f_open+0x332>
    b326:	8c 01       	movw	r16, r24
    b328:	f7 01       	movw	r30, r14
    b32a:	11 82       	std	Z+1, r1	; 0x01
    b32c:	10 82       	st	Z, r1
    b32e:	c8 01       	movw	r24, r16
    b330:	16 c0       	rjmp	.+44     	; 0xb35e <f_open+0x368>
    b332:	89 e0       	ldi	r24, 0x09	; 9
    b334:	03 c0       	rjmp	.+6      	; 0xb33c <f_open+0x346>
    b336:	81 e1       	ldi	r24, 0x11	; 17
    b338:	01 c0       	rjmp	.+2      	; 0xb33c <f_open+0x346>
    b33a:	80 e0       	ldi	r24, 0x00	; 0
    b33c:	90 e0       	ldi	r25, 0x00	; 0
    b33e:	0f c0       	rjmp	.+30     	; 0xb35e <f_open+0x368>
    b340:	08 e0       	ldi	r16, 0x08	; 8
    b342:	10 e0       	ldi	r17, 0x00	; 0
    b344:	08 c0       	rjmp	.+16     	; 0xb356 <f_open+0x360>
    b346:	02 e0       	ldi	r16, 0x02	; 2
    b348:	10 e0       	ldi	r17, 0x00	; 0
    b34a:	a5 cf       	rjmp	.-182    	; 0xb296 <f_open+0x2a0>
    b34c:	04 e0       	ldi	r16, 0x04	; 4
    b34e:	10 e0       	ldi	r17, 0x00	; 0
    b350:	02 c0       	rjmp	.+4      	; 0xb356 <f_open+0x360>
    b352:	07 e0       	ldi	r16, 0x07	; 7
    b354:	10 e0       	ldi	r17, 0x00	; 0
    b356:	c5 01       	movw	r24, r10
    b358:	0e 94 54 67 	call	0xcea8	; 0xcea8 <ff_memfree>
    b35c:	e5 cf       	rjmp	.-54     	; 0xb328 <f_open+0x332>
    b35e:	e6 96       	adiw	r28, 0x36	; 54
    b360:	e2 e1       	ldi	r30, 0x12	; 18
    b362:	0c 94 f4 e0 	jmp	0x1c1e8	; 0x1c1e8 <__epilogue_restores__>

0000b366 <f_read>:
    b366:	a6 e0       	ldi	r26, 0x06	; 6
    b368:	b0 e0       	ldi	r27, 0x00	; 0
    b36a:	e9 eb       	ldi	r30, 0xB9	; 185
    b36c:	f9 e5       	ldi	r31, 0x59	; 89
    b36e:	0c 94 d8 e0 	jmp	0x1c1b0	; 0x1c1b0 <__prologue_saves__>
    b372:	7c 01       	movw	r14, r24
    b374:	4b 01       	movw	r8, r22
    b376:	5a 01       	movw	r10, r20
    b378:	3e 83       	std	Y+6, r19	; 0x06
    b37a:	2d 83       	std	Y+5, r18	; 0x05
    b37c:	f9 01       	movw	r30, r18
    b37e:	11 82       	std	Z+1, r1	; 0x01
    b380:	10 82       	st	Z, r1
    b382:	be 01       	movw	r22, r28
    b384:	6f 5f       	subi	r22, 0xFF	; 255
    b386:	7f 4f       	sbci	r23, 0xFF	; 255
    b388:	0e 94 41 46 	call	0x8c82	; 0x8c82 <validate>
    b38c:	00 97       	sbiw	r24, 0x00	; 0
    b38e:	09 f0       	breq	.+2      	; 0xb392 <f_read+0x2c>
    b390:	31 c1       	rjmp	.+610    	; 0xb5f4 <f_read+0x28e>
    b392:	f7 01       	movw	r30, r14
    b394:	87 85       	ldd	r24, Z+15	; 0x0f
    b396:	90 e0       	ldi	r25, 0x00	; 0
    b398:	00 97       	sbiw	r24, 0x00	; 0
    b39a:	09 f0       	breq	.+2      	; 0xb39e <f_read+0x38>
    b39c:	2b c1       	rjmp	.+598    	; 0xb5f4 <f_read+0x28e>
    b39e:	86 85       	ldd	r24, Z+14	; 0x0e
    b3a0:	80 ff       	sbrs	r24, 0
    b3a2:	26 c1       	rjmp	.+588    	; 0xb5f0 <f_read+0x28a>
    b3a4:	82 85       	ldd	r24, Z+10	; 0x0a
    b3a6:	93 85       	ldd	r25, Z+11	; 0x0b
    b3a8:	a4 85       	ldd	r26, Z+12	; 0x0c
    b3aa:	b5 85       	ldd	r27, Z+13	; 0x0d
    b3ac:	40 89       	ldd	r20, Z+16	; 0x10
    b3ae:	51 89       	ldd	r21, Z+17	; 0x11
    b3b0:	62 89       	ldd	r22, Z+18	; 0x12
    b3b2:	73 89       	ldd	r23, Z+19	; 0x13
    b3b4:	84 1b       	sub	r24, r20
    b3b6:	95 0b       	sbc	r25, r21
    b3b8:	a6 0b       	sbc	r26, r22
    b3ba:	b7 0b       	sbc	r27, r23
    b3bc:	a5 01       	movw	r20, r10
    b3be:	60 e0       	ldi	r22, 0x00	; 0
    b3c0:	70 e0       	ldi	r23, 0x00	; 0
    b3c2:	84 17       	cp	r24, r20
    b3c4:	95 07       	cpc	r25, r21
    b3c6:	a6 07       	cpc	r26, r22
    b3c8:	b7 07       	cpc	r27, r23
    b3ca:	08 f4       	brcc	.+2      	; 0xb3ce <f_read+0x68>
    b3cc:	5c 01       	movw	r10, r24
    b3ce:	17 01       	movw	r2, r14
    b3d0:	f4 e2       	ldi	r31, 0x24	; 36
    b3d2:	2f 0e       	add	r2, r31
    b3d4:	31 1c       	adc	r3, r1
    b3d6:	a1 14       	cp	r10, r1
    b3d8:	b1 04       	cpc	r11, r1
    b3da:	09 f4       	brne	.+2      	; 0xb3de <f_read+0x78>
    b3dc:	07 c1       	rjmp	.+526    	; 0xb5ec <f_read+0x286>
    b3de:	f7 01       	movw	r30, r14
    b3e0:	40 89       	ldd	r20, Z+16	; 0x10
    b3e2:	51 89       	ldd	r21, Z+17	; 0x11
    b3e4:	62 89       	ldd	r22, Z+18	; 0x12
    b3e6:	73 89       	ldd	r23, Z+19	; 0x13
    b3e8:	db 01       	movw	r26, r22
    b3ea:	ca 01       	movw	r24, r20
    b3ec:	91 70       	andi	r25, 0x01	; 1
    b3ee:	aa 27       	eor	r26, r26
    b3f0:	bb 27       	eor	r27, r27
    b3f2:	89 2b       	or	r24, r25
    b3f4:	8a 2b       	or	r24, r26
    b3f6:	8b 2b       	or	r24, r27
    b3f8:	09 f0       	breq	.+2      	; 0xb3fc <f_read+0x96>
    b3fa:	cb c0       	rjmp	.+406    	; 0xb592 <f_read+0x22c>
    b3fc:	e9 81       	ldd	r30, Y+1	; 0x01
    b3fe:	fa 81       	ldd	r31, Y+2	; 0x02
    b400:	01 85       	ldd	r16, Z+9	; 0x09
    b402:	12 85       	ldd	r17, Z+10	; 0x0a
    b404:	01 50       	subi	r16, 0x01	; 1
    b406:	11 09       	sbc	r17, r1
    b408:	db 01       	movw	r26, r22
    b40a:	ca 01       	movw	r24, r20
    b40c:	e9 e0       	ldi	r30, 0x09	; 9
    b40e:	b6 95       	lsr	r27
    b410:	a7 95       	ror	r26
    b412:	97 95       	ror	r25
    b414:	87 95       	ror	r24
    b416:	ea 95       	dec	r30
    b418:	d1 f7       	brne	.-12     	; 0xb40e <f_read+0xa8>
    b41a:	08 23       	and	r16, r24
    b41c:	19 23       	and	r17, r25
    b41e:	01 15       	cp	r16, r1
    b420:	11 05       	cpc	r17, r1
    b422:	91 f5       	brne	.+100    	; 0xb488 <f_read+0x122>
    b424:	f7 01       	movw	r30, r14
    b426:	41 15       	cp	r20, r1
    b428:	51 05       	cpc	r21, r1
    b42a:	61 05       	cpc	r22, r1
    b42c:	71 05       	cpc	r23, r1
    b42e:	29 f4       	brne	.+10     	; 0xb43a <f_read+0xd4>
    b430:	66 81       	ldd	r22, Z+6	; 0x06
    b432:	77 81       	ldd	r23, Z+7	; 0x07
    b434:	80 85       	ldd	r24, Z+8	; 0x08
    b436:	91 85       	ldd	r25, Z+9	; 0x09
    b438:	11 c0       	rjmp	.+34     	; 0xb45c <f_read+0xf6>
    b43a:	82 a1       	ldd	r24, Z+34	; 0x22
    b43c:	93 a1       	ldd	r25, Z+35	; 0x23
    b43e:	89 2b       	or	r24, r25
    b440:	21 f0       	breq	.+8      	; 0xb44a <f_read+0xe4>
    b442:	c7 01       	movw	r24, r14
    b444:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <clmt_clust>
    b448:	09 c0       	rjmp	.+18     	; 0xb45c <f_read+0xf6>
    b44a:	f7 01       	movw	r30, r14
    b44c:	44 89       	ldd	r20, Z+20	; 0x14
    b44e:	55 89       	ldd	r21, Z+21	; 0x15
    b450:	66 89       	ldd	r22, Z+22	; 0x16
    b452:	77 89       	ldd	r23, Z+23	; 0x17
    b454:	80 81       	ld	r24, Z
    b456:	91 81       	ldd	r25, Z+1	; 0x01
    b458:	0e 94 94 4d 	call	0x9b28	; 0x9b28 <get_fat.isra.10>
    b45c:	62 30       	cpi	r22, 0x02	; 2
    b45e:	71 05       	cpc	r23, r1
    b460:	81 05       	cpc	r24, r1
    b462:	91 05       	cpc	r25, r1
    b464:	10 f4       	brcc	.+4      	; 0xb46a <f_read+0x104>
    b466:	82 e0       	ldi	r24, 0x02	; 2
    b468:	07 c0       	rjmp	.+14     	; 0xb478 <f_read+0x112>
    b46a:	6f 3f       	cpi	r22, 0xFF	; 255
    b46c:	ff ef       	ldi	r31, 0xFF	; 255
    b46e:	7f 07       	cpc	r23, r31
    b470:	8f 07       	cpc	r24, r31
    b472:	9f 07       	cpc	r25, r31
    b474:	21 f4       	brne	.+8      	; 0xb47e <f_read+0x118>
    b476:	81 e0       	ldi	r24, 0x01	; 1
    b478:	f7 01       	movw	r30, r14
    b47a:	87 87       	std	Z+15, r24	; 0x0f
    b47c:	ba c0       	rjmp	.+372    	; 0xb5f2 <f_read+0x28c>
    b47e:	f7 01       	movw	r30, r14
    b480:	64 8b       	std	Z+20, r22	; 0x14
    b482:	75 8b       	std	Z+21, r23	; 0x15
    b484:	86 8b       	std	Z+22, r24	; 0x16
    b486:	97 8b       	std	Z+23, r25	; 0x17
    b488:	89 81       	ldd	r24, Y+1	; 0x01
    b48a:	9a 81       	ldd	r25, Y+2	; 0x02
    b48c:	9c 83       	std	Y+4, r25	; 0x04
    b48e:	8b 83       	std	Y+3, r24	; 0x03
    b490:	f7 01       	movw	r30, r14
    b492:	44 89       	ldd	r20, Z+20	; 0x14
    b494:	55 89       	ldd	r21, Z+21	; 0x15
    b496:	66 89       	ldd	r22, Z+22	; 0x16
    b498:	77 89       	ldd	r23, Z+23	; 0x17
    b49a:	0e 94 a2 45 	call	0x8b44	; 0x8b44 <clst2sect>
    b49e:	61 15       	cp	r22, r1
    b4a0:	71 05       	cpc	r23, r1
    b4a2:	81 05       	cpc	r24, r1
    b4a4:	91 05       	cpc	r25, r1
    b4a6:	f9 f2       	breq	.-66     	; 0xb466 <f_read+0x100>
    b4a8:	2b 01       	movw	r4, r22
    b4aa:	3c 01       	movw	r6, r24
    b4ac:	40 0e       	add	r4, r16
    b4ae:	51 1e       	adc	r5, r17
    b4b0:	61 1c       	adc	r6, r1
    b4b2:	71 1c       	adc	r7, r1
    b4b4:	65 01       	movw	r12, r10
    b4b6:	cd 2c       	mov	r12, r13
    b4b8:	dd 24       	eor	r13, r13
    b4ba:	c6 94       	lsr	r12
    b4bc:	c1 14       	cp	r12, r1
    b4be:	d1 04       	cpc	r13, r1
    b4c0:	d1 f1       	breq	.+116    	; 0xb536 <f_read+0x1d0>
    b4c2:	eb 81       	ldd	r30, Y+3	; 0x03
    b4c4:	fc 81       	ldd	r31, Y+4	; 0x04
    b4c6:	81 85       	ldd	r24, Z+9	; 0x09
    b4c8:	92 85       	ldd	r25, Z+10	; 0x0a
    b4ca:	98 01       	movw	r18, r16
    b4cc:	2c 0d       	add	r18, r12
    b4ce:	3d 1d       	adc	r19, r13
    b4d0:	82 17       	cp	r24, r18
    b4d2:	93 07       	cpc	r25, r19
    b4d4:	18 f4       	brcc	.+6      	; 0xb4dc <f_read+0x176>
    b4d6:	6c 01       	movw	r12, r24
    b4d8:	c0 1a       	sub	r12, r16
    b4da:	d1 0a       	sbc	r13, r17
    b4dc:	86 01       	movw	r16, r12
    b4de:	a3 01       	movw	r20, r6
    b4e0:	92 01       	movw	r18, r4
    b4e2:	b4 01       	movw	r22, r8
    b4e4:	eb 81       	ldd	r30, Y+3	; 0x03
    b4e6:	fc 81       	ldd	r31, Y+4	; 0x04
    b4e8:	81 81       	ldd	r24, Z+1	; 0x01
    b4ea:	0e 94 0d 68 	call	0xd01a	; 0xd01a <disk_read>
    b4ee:	89 2b       	or	r24, r25
    b4f0:	11 f6       	brne	.-124    	; 0xb476 <f_read+0x110>
    b4f2:	f7 01       	movw	r30, r14
    b4f4:	86 85       	ldd	r24, Z+14	; 0x0e
    b4f6:	87 ff       	sbrs	r24, 7
    b4f8:	1a c0       	rjmp	.+52     	; 0xb52e <f_read+0x1c8>
    b4fa:	80 8d       	ldd	r24, Z+24	; 0x18
    b4fc:	91 8d       	ldd	r25, Z+25	; 0x19
    b4fe:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b500:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b502:	84 19       	sub	r24, r4
    b504:	95 09       	sbc	r25, r5
    b506:	a6 09       	sbc	r26, r6
    b508:	b7 09       	sbc	r27, r7
    b50a:	a6 01       	movw	r20, r12
    b50c:	60 e0       	ldi	r22, 0x00	; 0
    b50e:	70 e0       	ldi	r23, 0x00	; 0
    b510:	84 17       	cp	r24, r20
    b512:	95 07       	cpc	r25, r21
    b514:	a6 07       	cpc	r26, r22
    b516:	b7 07       	cpc	r27, r23
    b518:	50 f4       	brcc	.+20     	; 0xb52e <f_read+0x1c8>
    b51a:	98 2f       	mov	r25, r24
    b51c:	88 27       	eor	r24, r24
    b51e:	99 0f       	add	r25, r25
    b520:	40 e0       	ldi	r20, 0x00	; 0
    b522:	52 e0       	ldi	r21, 0x02	; 2
    b524:	b1 01       	movw	r22, r2
    b526:	88 0d       	add	r24, r8
    b528:	99 1d       	adc	r25, r9
    b52a:	0e 94 6d 46 	call	0x8cda	; 0x8cda <mem_cpy.part.0>
    b52e:	dc 2c       	mov	r13, r12
    b530:	cc 24       	eor	r12, r12
    b532:	dd 0c       	add	r13, r13
    b534:	41 c0       	rjmp	.+130    	; 0xb5b8 <f_read+0x252>
    b536:	f7 01       	movw	r30, r14
    b538:	20 8d       	ldd	r18, Z+24	; 0x18
    b53a:	31 8d       	ldd	r19, Z+25	; 0x19
    b53c:	42 8d       	ldd	r20, Z+26	; 0x1a
    b53e:	53 8d       	ldd	r21, Z+27	; 0x1b
    b540:	42 16       	cp	r4, r18
    b542:	53 06       	cpc	r5, r19
    b544:	64 06       	cpc	r6, r20
    b546:	75 06       	cpc	r7, r21
    b548:	f9 f0       	breq	.+62     	; 0xb588 <f_read+0x222>
    b54a:	86 85       	ldd	r24, Z+14	; 0x0e
    b54c:	87 ff       	sbrs	r24, 7
    b54e:	0f c0       	rjmp	.+30     	; 0xb56e <f_read+0x208>
    b550:	01 e0       	ldi	r16, 0x01	; 1
    b552:	10 e0       	ldi	r17, 0x00	; 0
    b554:	b1 01       	movw	r22, r2
    b556:	eb 81       	ldd	r30, Y+3	; 0x03
    b558:	fc 81       	ldd	r31, Y+4	; 0x04
    b55a:	81 81       	ldd	r24, Z+1	; 0x01
    b55c:	0e 94 1d 68 	call	0xd03a	; 0xd03a <disk_write>
    b560:	89 2b       	or	r24, r25
    b562:	09 f0       	breq	.+2      	; 0xb566 <f_read+0x200>
    b564:	88 cf       	rjmp	.-240    	; 0xb476 <f_read+0x110>
    b566:	f7 01       	movw	r30, r14
    b568:	86 85       	ldd	r24, Z+14	; 0x0e
    b56a:	8f 77       	andi	r24, 0x7F	; 127
    b56c:	86 87       	std	Z+14, r24	; 0x0e
    b56e:	e9 81       	ldd	r30, Y+1	; 0x01
    b570:	fa 81       	ldd	r31, Y+2	; 0x02
    b572:	01 e0       	ldi	r16, 0x01	; 1
    b574:	10 e0       	ldi	r17, 0x00	; 0
    b576:	a3 01       	movw	r20, r6
    b578:	92 01       	movw	r18, r4
    b57a:	b1 01       	movw	r22, r2
    b57c:	81 81       	ldd	r24, Z+1	; 0x01
    b57e:	0e 94 0d 68 	call	0xd01a	; 0xd01a <disk_read>
    b582:	89 2b       	or	r24, r25
    b584:	09 f0       	breq	.+2      	; 0xb588 <f_read+0x222>
    b586:	77 cf       	rjmp	.-274    	; 0xb476 <f_read+0x110>
    b588:	f7 01       	movw	r30, r14
    b58a:	40 8e       	std	Z+24, r4	; 0x18
    b58c:	51 8e       	std	Z+25, r5	; 0x19
    b58e:	62 8e       	std	Z+26, r6	; 0x1a
    b590:	73 8e       	std	Z+27, r7	; 0x1b
    b592:	f7 01       	movw	r30, r14
    b594:	60 89       	ldd	r22, Z+16	; 0x10
    b596:	71 89       	ldd	r23, Z+17	; 0x11
    b598:	71 70       	andi	r23, 0x01	; 1
    b59a:	80 e0       	ldi	r24, 0x00	; 0
    b59c:	92 e0       	ldi	r25, 0x02	; 2
    b59e:	86 1b       	sub	r24, r22
    b5a0:	97 0b       	sbc	r25, r23
    b5a2:	65 01       	movw	r12, r10
    b5a4:	8a 15       	cp	r24, r10
    b5a6:	9b 05       	cpc	r25, r11
    b5a8:	08 f4       	brcc	.+2      	; 0xb5ac <f_read+0x246>
    b5aa:	6c 01       	movw	r12, r24
    b5ac:	62 0d       	add	r22, r2
    b5ae:	73 1d       	adc	r23, r3
    b5b0:	a6 01       	movw	r20, r12
    b5b2:	c4 01       	movw	r24, r8
    b5b4:	0e 94 6d 46 	call	0x8cda	; 0x8cda <mem_cpy.part.0>
    b5b8:	ac 18       	sub	r10, r12
    b5ba:	bd 08       	sbc	r11, r13
    b5bc:	ed 81       	ldd	r30, Y+5	; 0x05
    b5be:	fe 81       	ldd	r31, Y+6	; 0x06
    b5c0:	80 81       	ld	r24, Z
    b5c2:	91 81       	ldd	r25, Z+1	; 0x01
    b5c4:	8c 0d       	add	r24, r12
    b5c6:	9d 1d       	adc	r25, r13
    b5c8:	91 83       	std	Z+1, r25	; 0x01
    b5ca:	80 83       	st	Z, r24
    b5cc:	8c 0c       	add	r8, r12
    b5ce:	9d 1c       	adc	r9, r13
    b5d0:	f7 01       	movw	r30, r14
    b5d2:	80 89       	ldd	r24, Z+16	; 0x10
    b5d4:	91 89       	ldd	r25, Z+17	; 0x11
    b5d6:	a2 89       	ldd	r26, Z+18	; 0x12
    b5d8:	b3 89       	ldd	r27, Z+19	; 0x13
    b5da:	8c 0d       	add	r24, r12
    b5dc:	9d 1d       	adc	r25, r13
    b5de:	a1 1d       	adc	r26, r1
    b5e0:	b1 1d       	adc	r27, r1
    b5e2:	80 8b       	std	Z+16, r24	; 0x10
    b5e4:	91 8b       	std	Z+17, r25	; 0x11
    b5e6:	a2 8b       	std	Z+18, r26	; 0x12
    b5e8:	b3 8b       	std	Z+19, r27	; 0x13
    b5ea:	f5 ce       	rjmp	.-534    	; 0xb3d6 <f_read+0x70>
    b5ec:	80 e0       	ldi	r24, 0x00	; 0
    b5ee:	01 c0       	rjmp	.+2      	; 0xb5f2 <f_read+0x28c>
    b5f0:	87 e0       	ldi	r24, 0x07	; 7
    b5f2:	90 e0       	ldi	r25, 0x00	; 0
    b5f4:	26 96       	adiw	r28, 0x06	; 6
    b5f6:	e2 e1       	ldi	r30, 0x12	; 18
    b5f8:	0c 94 f4 e0 	jmp	0x1c1e8	; 0x1c1e8 <__epilogue_restores__>

0000b5fc <f_write>:
    b5fc:	a8 e0       	ldi	r26, 0x08	; 8
    b5fe:	b0 e0       	ldi	r27, 0x00	; 0
    b600:	e4 e0       	ldi	r30, 0x04	; 4
    b602:	fb e5       	ldi	r31, 0x5B	; 91
    b604:	0c 94 d8 e0 	jmp	0x1c1b0	; 0x1c1b0 <__prologue_saves__>
    b608:	7c 01       	movw	r14, r24
    b60a:	3b 01       	movw	r6, r22
    b60c:	5a 01       	movw	r10, r20
    b60e:	38 87       	std	Y+8, r19	; 0x08
    b610:	2f 83       	std	Y+7, r18	; 0x07
    b612:	f9 01       	movw	r30, r18
    b614:	11 82       	std	Z+1, r1	; 0x01
    b616:	10 82       	st	Z, r1
    b618:	be 01       	movw	r22, r28
    b61a:	6f 5f       	subi	r22, 0xFF	; 255
    b61c:	7f 4f       	sbci	r23, 0xFF	; 255
    b61e:	0e 94 41 46 	call	0x8c82	; 0x8c82 <validate>
    b622:	00 97       	sbiw	r24, 0x00	; 0
    b624:	09 f0       	breq	.+2      	; 0xb628 <f_write+0x2c>
    b626:	7d c1       	rjmp	.+762    	; 0xb922 <f_write+0x326>
    b628:	f7 01       	movw	r30, r14
    b62a:	87 85       	ldd	r24, Z+15	; 0x0f
    b62c:	90 e0       	ldi	r25, 0x00	; 0
    b62e:	00 97       	sbiw	r24, 0x00	; 0
    b630:	09 f0       	breq	.+2      	; 0xb634 <f_write+0x38>
    b632:	77 c1       	rjmp	.+750    	; 0xb922 <f_write+0x326>
    b634:	86 85       	ldd	r24, Z+14	; 0x0e
    b636:	81 ff       	sbrs	r24, 1
    b638:	72 c1       	rjmp	.+740    	; 0xb91e <f_write+0x322>
    b63a:	80 89       	ldd	r24, Z+16	; 0x10
    b63c:	91 89       	ldd	r25, Z+17	; 0x11
    b63e:	a2 89       	ldd	r26, Z+18	; 0x12
    b640:	b3 89       	ldd	r27, Z+19	; 0x13
    b642:	ac 01       	movw	r20, r24
    b644:	bd 01       	movw	r22, r26
    b646:	4a 0d       	add	r20, r10
    b648:	5b 1d       	adc	r21, r11
    b64a:	61 1d       	adc	r22, r1
    b64c:	71 1d       	adc	r23, r1
    b64e:	48 17       	cp	r20, r24
    b650:	59 07       	cpc	r21, r25
    b652:	6a 07       	cpc	r22, r26
    b654:	7b 07       	cpc	r23, r27
    b656:	18 f4       	brcc	.+6      	; 0xb65e <f_write+0x62>
    b658:	5c 01       	movw	r10, r24
    b65a:	a0 94       	com	r10
    b65c:	b0 94       	com	r11
    b65e:	97 01       	movw	r18, r14
    b660:	2c 5d       	subi	r18, 0xDC	; 220
    b662:	3f 4f       	sbci	r19, 0xFF	; 255
    b664:	3e 83       	std	Y+6, r19	; 0x06
    b666:	2d 83       	std	Y+5, r18	; 0x05
    b668:	a1 14       	cp	r10, r1
    b66a:	b1 04       	cpc	r11, r1
    b66c:	09 f4       	brne	.+2      	; 0xb670 <f_write+0x74>
    b66e:	4d c0       	rjmp	.+154    	; 0xb70a <f_write+0x10e>
    b670:	f7 01       	movw	r30, r14
    b672:	40 89       	ldd	r20, Z+16	; 0x10
    b674:	51 89       	ldd	r21, Z+17	; 0x11
    b676:	62 89       	ldd	r22, Z+18	; 0x12
    b678:	73 89       	ldd	r23, Z+19	; 0x13
    b67a:	db 01       	movw	r26, r22
    b67c:	ca 01       	movw	r24, r20
    b67e:	91 70       	andi	r25, 0x01	; 1
    b680:	aa 27       	eor	r26, r26
    b682:	bb 27       	eor	r27, r27
    b684:	89 2b       	or	r24, r25
    b686:	8a 2b       	or	r24, r26
    b688:	8b 2b       	or	r24, r27
    b68a:	09 f0       	breq	.+2      	; 0xb68e <f_write+0x92>
    b68c:	05 c1       	rjmp	.+522    	; 0xb898 <f_write+0x29c>
    b68e:	e9 81       	ldd	r30, Y+1	; 0x01
    b690:	fa 81       	ldd	r31, Y+2	; 0x02
    b692:	81 84       	ldd	r8, Z+9	; 0x09
    b694:	92 84       	ldd	r9, Z+10	; 0x0a
    b696:	f1 e0       	ldi	r31, 0x01	; 1
    b698:	8f 1a       	sub	r8, r31
    b69a:	91 08       	sbc	r9, r1
    b69c:	db 01       	movw	r26, r22
    b69e:	ca 01       	movw	r24, r20
    b6a0:	e9 e0       	ldi	r30, 0x09	; 9
    b6a2:	b6 95       	lsr	r27
    b6a4:	a7 95       	ror	r26
    b6a6:	97 95       	ror	r25
    b6a8:	87 95       	ror	r24
    b6aa:	ea 95       	dec	r30
    b6ac:	d1 f7       	brne	.-12     	; 0xb6a2 <f_write+0xa6>
    b6ae:	88 22       	and	r8, r24
    b6b0:	99 22       	and	r9, r25
    b6b2:	81 14       	cp	r8, r1
    b6b4:	91 04       	cpc	r9, r1
    b6b6:	09 f0       	breq	.+2      	; 0xb6ba <f_write+0xbe>
    b6b8:	51 c0       	rjmp	.+162    	; 0xb75c <f_write+0x160>
    b6ba:	f7 01       	movw	r30, r14
    b6bc:	41 15       	cp	r20, r1
    b6be:	51 05       	cpc	r21, r1
    b6c0:	61 05       	cpc	r22, r1
    b6c2:	71 05       	cpc	r23, r1
    b6c4:	69 f4       	brne	.+26     	; 0xb6e0 <f_write+0xe4>
    b6c6:	66 81       	ldd	r22, Z+6	; 0x06
    b6c8:	77 81       	ldd	r23, Z+7	; 0x07
    b6ca:	80 85       	ldd	r24, Z+8	; 0x08
    b6cc:	91 85       	ldd	r25, Z+9	; 0x09
    b6ce:	61 15       	cp	r22, r1
    b6d0:	71 05       	cpc	r23, r1
    b6d2:	81 05       	cpc	r24, r1
    b6d4:	91 05       	cpc	r25, r1
    b6d6:	f9 f4       	brne	.+62     	; 0xb716 <f_write+0x11a>
    b6d8:	40 e0       	ldi	r20, 0x00	; 0
    b6da:	50 e0       	ldi	r21, 0x00	; 0
    b6dc:	ba 01       	movw	r22, r20
    b6de:	0d c0       	rjmp	.+26     	; 0xb6fa <f_write+0xfe>
    b6e0:	82 a1       	ldd	r24, Z+34	; 0x22
    b6e2:	93 a1       	ldd	r25, Z+35	; 0x23
    b6e4:	89 2b       	or	r24, r25
    b6e6:	21 f0       	breq	.+8      	; 0xb6f0 <f_write+0xf4>
    b6e8:	c7 01       	movw	r24, r14
    b6ea:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <clmt_clust>
    b6ee:	08 c0       	rjmp	.+16     	; 0xb700 <f_write+0x104>
    b6f0:	f7 01       	movw	r30, r14
    b6f2:	44 89       	ldd	r20, Z+20	; 0x14
    b6f4:	55 89       	ldd	r21, Z+21	; 0x15
    b6f6:	66 89       	ldd	r22, Z+22	; 0x16
    b6f8:	77 89       	ldd	r23, Z+23	; 0x17
    b6fa:	c7 01       	movw	r24, r14
    b6fc:	0e 94 09 4f 	call	0x9e12	; 0x9e12 <create_chain>
    b700:	61 15       	cp	r22, r1
    b702:	71 05       	cpc	r23, r1
    b704:	81 05       	cpc	r24, r1
    b706:	91 05       	cpc	r25, r1
    b708:	31 f4       	brne	.+12     	; 0xb716 <f_write+0x11a>
    b70a:	f7 01       	movw	r30, r14
    b70c:	86 85       	ldd	r24, Z+14	; 0x0e
    b70e:	80 64       	ori	r24, 0x40	; 64
    b710:	86 87       	std	Z+14, r24	; 0x0e
    b712:	80 e0       	ldi	r24, 0x00	; 0
    b714:	05 c1       	rjmp	.+522    	; 0xb920 <f_write+0x324>
    b716:	61 30       	cpi	r22, 0x01	; 1
    b718:	71 05       	cpc	r23, r1
    b71a:	81 05       	cpc	r24, r1
    b71c:	91 05       	cpc	r25, r1
    b71e:	11 f4       	brne	.+4      	; 0xb724 <f_write+0x128>
    b720:	82 e0       	ldi	r24, 0x02	; 2
    b722:	07 c0       	rjmp	.+14     	; 0xb732 <f_write+0x136>
    b724:	6f 3f       	cpi	r22, 0xFF	; 255
    b726:	ff ef       	ldi	r31, 0xFF	; 255
    b728:	7f 07       	cpc	r23, r31
    b72a:	8f 07       	cpc	r24, r31
    b72c:	9f 07       	cpc	r25, r31
    b72e:	21 f4       	brne	.+8      	; 0xb738 <f_write+0x13c>
    b730:	81 e0       	ldi	r24, 0x01	; 1
    b732:	f7 01       	movw	r30, r14
    b734:	87 87       	std	Z+15, r24	; 0x0f
    b736:	f4 c0       	rjmp	.+488    	; 0xb920 <f_write+0x324>
    b738:	f7 01       	movw	r30, r14
    b73a:	64 8b       	std	Z+20, r22	; 0x14
    b73c:	75 8b       	std	Z+21, r23	; 0x15
    b73e:	86 8b       	std	Z+22, r24	; 0x16
    b740:	97 8b       	std	Z+23, r25	; 0x17
    b742:	06 81       	ldd	r16, Z+6	; 0x06
    b744:	17 81       	ldd	r17, Z+7	; 0x07
    b746:	20 85       	ldd	r18, Z+8	; 0x08
    b748:	31 85       	ldd	r19, Z+9	; 0x09
    b74a:	01 15       	cp	r16, r1
    b74c:	11 05       	cpc	r17, r1
    b74e:	21 05       	cpc	r18, r1
    b750:	31 05       	cpc	r19, r1
    b752:	21 f4       	brne	.+8      	; 0xb75c <f_write+0x160>
    b754:	66 83       	std	Z+6, r22	; 0x06
    b756:	77 83       	std	Z+7, r23	; 0x07
    b758:	80 87       	std	Z+8, r24	; 0x08
    b75a:	91 87       	std	Z+9, r25	; 0x09
    b75c:	f7 01       	movw	r30, r14
    b75e:	86 85       	ldd	r24, Z+14	; 0x0e
    b760:	87 ff       	sbrs	r24, 7
    b762:	13 c0       	rjmp	.+38     	; 0xb78a <f_write+0x18e>
    b764:	20 8d       	ldd	r18, Z+24	; 0x18
    b766:	31 8d       	ldd	r19, Z+25	; 0x19
    b768:	42 8d       	ldd	r20, Z+26	; 0x1a
    b76a:	53 8d       	ldd	r21, Z+27	; 0x1b
    b76c:	e9 81       	ldd	r30, Y+1	; 0x01
    b76e:	fa 81       	ldd	r31, Y+2	; 0x02
    b770:	01 e0       	ldi	r16, 0x01	; 1
    b772:	10 e0       	ldi	r17, 0x00	; 0
    b774:	6d 81       	ldd	r22, Y+5	; 0x05
    b776:	7e 81       	ldd	r23, Y+6	; 0x06
    b778:	81 81       	ldd	r24, Z+1	; 0x01
    b77a:	0e 94 1d 68 	call	0xd03a	; 0xd03a <disk_write>
    b77e:	89 2b       	or	r24, r25
    b780:	b9 f6       	brne	.-82     	; 0xb730 <f_write+0x134>
    b782:	f7 01       	movw	r30, r14
    b784:	86 85       	ldd	r24, Z+14	; 0x0e
    b786:	8f 77       	andi	r24, 0x7F	; 127
    b788:	86 87       	std	Z+14, r24	; 0x0e
    b78a:	29 81       	ldd	r18, Y+1	; 0x01
    b78c:	3a 81       	ldd	r19, Y+2	; 0x02
    b78e:	3c 83       	std	Y+4, r19	; 0x04
    b790:	2b 83       	std	Y+3, r18	; 0x03
    b792:	f7 01       	movw	r30, r14
    b794:	44 89       	ldd	r20, Z+20	; 0x14
    b796:	55 89       	ldd	r21, Z+21	; 0x15
    b798:	66 89       	ldd	r22, Z+22	; 0x16
    b79a:	77 89       	ldd	r23, Z+23	; 0x17
    b79c:	c9 01       	movw	r24, r18
    b79e:	0e 94 a2 45 	call	0x8b44	; 0x8b44 <clst2sect>
    b7a2:	61 15       	cp	r22, r1
    b7a4:	71 05       	cpc	r23, r1
    b7a6:	81 05       	cpc	r24, r1
    b7a8:	91 05       	cpc	r25, r1
    b7aa:	09 f4       	brne	.+2      	; 0xb7ae <f_write+0x1b2>
    b7ac:	b9 cf       	rjmp	.-142    	; 0xb720 <f_write+0x124>
    b7ae:	1b 01       	movw	r2, r22
    b7b0:	2c 01       	movw	r4, r24
    b7b2:	28 0c       	add	r2, r8
    b7b4:	39 1c       	adc	r3, r9
    b7b6:	41 1c       	adc	r4, r1
    b7b8:	51 1c       	adc	r5, r1
    b7ba:	65 01       	movw	r12, r10
    b7bc:	cd 2c       	mov	r12, r13
    b7be:	dd 24       	eor	r13, r13
    b7c0:	c6 94       	lsr	r12
    b7c2:	c1 14       	cp	r12, r1
    b7c4:	d1 04       	cpc	r13, r1
    b7c6:	f1 f1       	breq	.+124    	; 0xb844 <f_write+0x248>
    b7c8:	eb 81       	ldd	r30, Y+3	; 0x03
    b7ca:	fc 81       	ldd	r31, Y+4	; 0x04
    b7cc:	81 85       	ldd	r24, Z+9	; 0x09
    b7ce:	92 85       	ldd	r25, Z+10	; 0x0a
    b7d0:	94 01       	movw	r18, r8
    b7d2:	2c 0d       	add	r18, r12
    b7d4:	3d 1d       	adc	r19, r13
    b7d6:	82 17       	cp	r24, r18
    b7d8:	93 07       	cpc	r25, r19
    b7da:	18 f4       	brcc	.+6      	; 0xb7e2 <f_write+0x1e6>
    b7dc:	6c 01       	movw	r12, r24
    b7de:	c8 18       	sub	r12, r8
    b7e0:	d9 08       	sbc	r13, r9
    b7e2:	86 01       	movw	r16, r12
    b7e4:	a2 01       	movw	r20, r4
    b7e6:	91 01       	movw	r18, r2
    b7e8:	b3 01       	movw	r22, r6
    b7ea:	eb 81       	ldd	r30, Y+3	; 0x03
    b7ec:	fc 81       	ldd	r31, Y+4	; 0x04
    b7ee:	81 81       	ldd	r24, Z+1	; 0x01
    b7f0:	0e 94 1d 68 	call	0xd03a	; 0xd03a <disk_write>
    b7f4:	89 2b       	or	r24, r25
    b7f6:	09 f0       	breq	.+2      	; 0xb7fa <f_write+0x1fe>
    b7f8:	9b cf       	rjmp	.-202    	; 0xb730 <f_write+0x134>
    b7fa:	f7 01       	movw	r30, r14
    b7fc:	80 8d       	ldd	r24, Z+24	; 0x18
    b7fe:	91 8d       	ldd	r25, Z+25	; 0x19
    b800:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b802:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b804:	82 19       	sub	r24, r2
    b806:	93 09       	sbc	r25, r3
    b808:	a4 09       	sbc	r26, r4
    b80a:	b5 09       	sbc	r27, r5
    b80c:	a6 01       	movw	r20, r12
    b80e:	60 e0       	ldi	r22, 0x00	; 0
    b810:	70 e0       	ldi	r23, 0x00	; 0
    b812:	84 17       	cp	r24, r20
    b814:	95 07       	cpc	r25, r21
    b816:	a6 07       	cpc	r26, r22
    b818:	b7 07       	cpc	r27, r23
    b81a:	80 f4       	brcc	.+32     	; 0xb83c <f_write+0x240>
    b81c:	98 2f       	mov	r25, r24
    b81e:	88 27       	eor	r24, r24
    b820:	99 0f       	add	r25, r25
    b822:	b3 01       	movw	r22, r6
    b824:	68 0f       	add	r22, r24
    b826:	79 1f       	adc	r23, r25
    b828:	40 e0       	ldi	r20, 0x00	; 0
    b82a:	52 e0       	ldi	r21, 0x02	; 2
    b82c:	8d 81       	ldd	r24, Y+5	; 0x05
    b82e:	9e 81       	ldd	r25, Y+6	; 0x06
    b830:	0e 94 6d 46 	call	0x8cda	; 0x8cda <mem_cpy.part.0>
    b834:	f7 01       	movw	r30, r14
    b836:	86 85       	ldd	r24, Z+14	; 0x0e
    b838:	8f 77       	andi	r24, 0x7F	; 127
    b83a:	86 87       	std	Z+14, r24	; 0x0e
    b83c:	dc 2c       	mov	r13, r12
    b83e:	cc 24       	eor	r12, r12
    b840:	dd 0c       	add	r13, r13
    b842:	43 c0       	rjmp	.+134    	; 0xb8ca <f_write+0x2ce>
    b844:	f7 01       	movw	r30, r14
    b846:	80 8d       	ldd	r24, Z+24	; 0x18
    b848:	91 8d       	ldd	r25, Z+25	; 0x19
    b84a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b84c:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b84e:	28 16       	cp	r2, r24
    b850:	39 06       	cpc	r3, r25
    b852:	4a 06       	cpc	r4, r26
    b854:	5b 06       	cpc	r5, r27
    b856:	d9 f0       	breq	.+54     	; 0xb88e <f_write+0x292>
    b858:	40 89       	ldd	r20, Z+16	; 0x10
    b85a:	51 89       	ldd	r21, Z+17	; 0x11
    b85c:	62 89       	ldd	r22, Z+18	; 0x12
    b85e:	73 89       	ldd	r23, Z+19	; 0x13
    b860:	82 85       	ldd	r24, Z+10	; 0x0a
    b862:	93 85       	ldd	r25, Z+11	; 0x0b
    b864:	a4 85       	ldd	r26, Z+12	; 0x0c
    b866:	b5 85       	ldd	r27, Z+13	; 0x0d
    b868:	48 17       	cp	r20, r24
    b86a:	59 07       	cpc	r21, r25
    b86c:	6a 07       	cpc	r22, r26
    b86e:	7b 07       	cpc	r23, r27
    b870:	70 f4       	brcc	.+28     	; 0xb88e <f_write+0x292>
    b872:	01 e0       	ldi	r16, 0x01	; 1
    b874:	10 e0       	ldi	r17, 0x00	; 0
    b876:	a2 01       	movw	r20, r4
    b878:	91 01       	movw	r18, r2
    b87a:	6d 81       	ldd	r22, Y+5	; 0x05
    b87c:	7e 81       	ldd	r23, Y+6	; 0x06
    b87e:	eb 81       	ldd	r30, Y+3	; 0x03
    b880:	fc 81       	ldd	r31, Y+4	; 0x04
    b882:	81 81       	ldd	r24, Z+1	; 0x01
    b884:	0e 94 0d 68 	call	0xd01a	; 0xd01a <disk_read>
    b888:	89 2b       	or	r24, r25
    b88a:	09 f0       	breq	.+2      	; 0xb88e <f_write+0x292>
    b88c:	51 cf       	rjmp	.-350    	; 0xb730 <f_write+0x134>
    b88e:	f7 01       	movw	r30, r14
    b890:	20 8e       	std	Z+24, r2	; 0x18
    b892:	31 8e       	std	Z+25, r3	; 0x19
    b894:	42 8e       	std	Z+26, r4	; 0x1a
    b896:	53 8e       	std	Z+27, r5	; 0x1b
    b898:	f7 01       	movw	r30, r14
    b89a:	80 89       	ldd	r24, Z+16	; 0x10
    b89c:	91 89       	ldd	r25, Z+17	; 0x11
    b89e:	91 70       	andi	r25, 0x01	; 1
    b8a0:	20 e0       	ldi	r18, 0x00	; 0
    b8a2:	32 e0       	ldi	r19, 0x02	; 2
    b8a4:	28 1b       	sub	r18, r24
    b8a6:	39 0b       	sbc	r19, r25
    b8a8:	65 01       	movw	r12, r10
    b8aa:	2a 15       	cp	r18, r10
    b8ac:	3b 05       	cpc	r19, r11
    b8ae:	08 f4       	brcc	.+2      	; 0xb8b2 <f_write+0x2b6>
    b8b0:	69 01       	movw	r12, r18
    b8b2:	a6 01       	movw	r20, r12
    b8b4:	b3 01       	movw	r22, r6
    b8b6:	2d 81       	ldd	r18, Y+5	; 0x05
    b8b8:	3e 81       	ldd	r19, Y+6	; 0x06
    b8ba:	82 0f       	add	r24, r18
    b8bc:	93 1f       	adc	r25, r19
    b8be:	0e 94 6d 46 	call	0x8cda	; 0x8cda <mem_cpy.part.0>
    b8c2:	f7 01       	movw	r30, r14
    b8c4:	86 85       	ldd	r24, Z+14	; 0x0e
    b8c6:	80 68       	ori	r24, 0x80	; 128
    b8c8:	86 87       	std	Z+14, r24	; 0x0e
    b8ca:	ac 18       	sub	r10, r12
    b8cc:	bd 08       	sbc	r11, r13
    b8ce:	ef 81       	ldd	r30, Y+7	; 0x07
    b8d0:	f8 85       	ldd	r31, Y+8	; 0x08
    b8d2:	80 81       	ld	r24, Z
    b8d4:	91 81       	ldd	r25, Z+1	; 0x01
    b8d6:	8c 0d       	add	r24, r12
    b8d8:	9d 1d       	adc	r25, r13
    b8da:	91 83       	std	Z+1, r25	; 0x01
    b8dc:	80 83       	st	Z, r24
    b8de:	6c 0c       	add	r6, r12
    b8e0:	7d 1c       	adc	r7, r13
    b8e2:	f7 01       	movw	r30, r14
    b8e4:	80 89       	ldd	r24, Z+16	; 0x10
    b8e6:	91 89       	ldd	r25, Z+17	; 0x11
    b8e8:	a2 89       	ldd	r26, Z+18	; 0x12
    b8ea:	b3 89       	ldd	r27, Z+19	; 0x13
    b8ec:	8c 0d       	add	r24, r12
    b8ee:	9d 1d       	adc	r25, r13
    b8f0:	a1 1d       	adc	r26, r1
    b8f2:	b1 1d       	adc	r27, r1
    b8f4:	80 8b       	std	Z+16, r24	; 0x10
    b8f6:	91 8b       	std	Z+17, r25	; 0x11
    b8f8:	a2 8b       	std	Z+18, r26	; 0x12
    b8fa:	b3 8b       	std	Z+19, r27	; 0x13
    b8fc:	42 85       	ldd	r20, Z+10	; 0x0a
    b8fe:	53 85       	ldd	r21, Z+11	; 0x0b
    b900:	64 85       	ldd	r22, Z+12	; 0x0c
    b902:	75 85       	ldd	r23, Z+13	; 0x0d
    b904:	48 17       	cp	r20, r24
    b906:	59 07       	cpc	r21, r25
    b908:	6a 07       	cpc	r22, r26
    b90a:	7b 07       	cpc	r23, r27
    b90c:	10 f4       	brcc	.+4      	; 0xb912 <f_write+0x316>
    b90e:	ac 01       	movw	r20, r24
    b910:	bd 01       	movw	r22, r26
    b912:	f7 01       	movw	r30, r14
    b914:	42 87       	std	Z+10, r20	; 0x0a
    b916:	53 87       	std	Z+11, r21	; 0x0b
    b918:	64 87       	std	Z+12, r22	; 0x0c
    b91a:	75 87       	std	Z+13, r23	; 0x0d
    b91c:	a5 ce       	rjmp	.-694    	; 0xb668 <f_write+0x6c>
    b91e:	87 e0       	ldi	r24, 0x07	; 7
    b920:	90 e0       	ldi	r25, 0x00	; 0
    b922:	28 96       	adiw	r28, 0x08	; 8
    b924:	e2 e1       	ldi	r30, 0x12	; 18
    b926:	0c 94 f4 e0 	jmp	0x1c1e8	; 0x1c1e8 <__epilogue_restores__>

0000b92a <f_sync>:
    b92a:	8f 92       	push	r8
    b92c:	9f 92       	push	r9
    b92e:	af 92       	push	r10
    b930:	bf 92       	push	r11
    b932:	ef 92       	push	r14
    b934:	ff 92       	push	r15
    b936:	0f 93       	push	r16
    b938:	1f 93       	push	r17
    b93a:	cf 93       	push	r28
    b93c:	df 93       	push	r29
    b93e:	00 d0       	rcall	.+0      	; 0xb940 <f_sync+0x16>
    b940:	cd b7       	in	r28, 0x3d	; 61
    b942:	de b7       	in	r29, 0x3e	; 62
    b944:	7c 01       	movw	r14, r24
    b946:	be 01       	movw	r22, r28
    b948:	6f 5f       	subi	r22, 0xFF	; 255
    b94a:	7f 4f       	sbci	r23, 0xFF	; 255
    b94c:	0e 94 41 46 	call	0x8c82	; 0x8c82 <validate>
    b950:	00 97       	sbiw	r24, 0x00	; 0
    b952:	09 f0       	breq	.+2      	; 0xb956 <f_sync+0x2c>
    b954:	5d c0       	rjmp	.+186    	; 0xba10 <f_sync+0xe6>
    b956:	f7 01       	movw	r30, r14
    b958:	86 85       	ldd	r24, Z+14	; 0x0e
    b95a:	86 ff       	sbrs	r24, 6
    b95c:	55 c0       	rjmp	.+170    	; 0xba08 <f_sync+0xde>
    b95e:	87 ff       	sbrs	r24, 7
    b960:	15 c0       	rjmp	.+42     	; 0xb98c <f_sync+0x62>
    b962:	20 8d       	ldd	r18, Z+24	; 0x18
    b964:	31 8d       	ldd	r19, Z+25	; 0x19
    b966:	42 8d       	ldd	r20, Z+26	; 0x1a
    b968:	53 8d       	ldd	r21, Z+27	; 0x1b
    b96a:	e9 81       	ldd	r30, Y+1	; 0x01
    b96c:	fa 81       	ldd	r31, Y+2	; 0x02
    b96e:	01 e0       	ldi	r16, 0x01	; 1
    b970:	10 e0       	ldi	r17, 0x00	; 0
    b972:	b7 01       	movw	r22, r14
    b974:	6c 5d       	subi	r22, 0xDC	; 220
    b976:	7f 4f       	sbci	r23, 0xFF	; 255
    b978:	81 81       	ldd	r24, Z+1	; 0x01
    b97a:	0e 94 1d 68 	call	0xd03a	; 0xd03a <disk_write>
    b97e:	89 2b       	or	r24, r25
    b980:	09 f0       	breq	.+2      	; 0xb984 <f_sync+0x5a>
    b982:	44 c0       	rjmp	.+136    	; 0xba0c <f_sync+0xe2>
    b984:	f7 01       	movw	r30, r14
    b986:	86 85       	ldd	r24, Z+14	; 0x0e
    b988:	8f 77       	andi	r24, 0x7F	; 127
    b98a:	86 87       	std	Z+14, r24	; 0x0e
    b98c:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <get_fattime>
    b990:	4b 01       	movw	r8, r22
    b992:	5c 01       	movw	r10, r24
    b994:	f7 01       	movw	r30, r14
    b996:	44 8d       	ldd	r20, Z+28	; 0x1c
    b998:	55 8d       	ldd	r21, Z+29	; 0x1d
    b99a:	66 8d       	ldd	r22, Z+30	; 0x1e
    b99c:	77 8d       	ldd	r23, Z+31	; 0x1f
    b99e:	89 81       	ldd	r24, Y+1	; 0x01
    b9a0:	9a 81       	ldd	r25, Y+2	; 0x02
    b9a2:	0e 94 c4 49 	call	0x9388	; 0x9388 <move_window>
    b9a6:	00 97       	sbiw	r24, 0x00	; 0
    b9a8:	99 f5       	brne	.+102    	; 0xba10 <f_sync+0xe6>
    b9aa:	f7 01       	movw	r30, r14
    b9ac:	00 a1       	ldd	r16, Z+32	; 0x20
    b9ae:	11 a1       	ldd	r17, Z+33	; 0x21
    b9b0:	f8 01       	movw	r30, r16
    b9b2:	83 85       	ldd	r24, Z+11	; 0x0b
    b9b4:	80 62       	ori	r24, 0x20	; 32
    b9b6:	83 87       	std	Z+11, r24	; 0x0b
    b9b8:	f7 01       	movw	r30, r14
    b9ba:	26 81       	ldd	r18, Z+6	; 0x06
    b9bc:	37 81       	ldd	r19, Z+7	; 0x07
    b9be:	40 85       	ldd	r20, Z+8	; 0x08
    b9c0:	51 85       	ldd	r21, Z+9	; 0x09
    b9c2:	b8 01       	movw	r22, r16
    b9c4:	80 81       	ld	r24, Z
    b9c6:	91 81       	ldd	r25, Z+1	; 0x01
    b9c8:	0e 94 4a 48 	call	0x9094	; 0x9094 <st_clust.isra.5>
    b9cc:	f7 01       	movw	r30, r14
    b9ce:	42 85       	ldd	r20, Z+10	; 0x0a
    b9d0:	53 85       	ldd	r21, Z+11	; 0x0b
    b9d2:	64 85       	ldd	r22, Z+12	; 0x0c
    b9d4:	75 85       	ldd	r23, Z+13	; 0x0d
    b9d6:	c8 01       	movw	r24, r16
    b9d8:	4c 96       	adiw	r24, 0x1c	; 28
    b9da:	0e 94 fe 44 	call	0x89fc	; 0x89fc <st_dword>
    b9de:	b5 01       	movw	r22, r10
    b9e0:	a4 01       	movw	r20, r8
    b9e2:	c8 01       	movw	r24, r16
    b9e4:	46 96       	adiw	r24, 0x16	; 22
    b9e6:	0e 94 fe 44 	call	0x89fc	; 0x89fc <st_dword>
    b9ea:	f8 01       	movw	r30, r16
    b9ec:	12 8a       	std	Z+18, r1	; 0x12
    b9ee:	13 8a       	std	Z+19, r1	; 0x13
    b9f0:	89 81       	ldd	r24, Y+1	; 0x01
    b9f2:	9a 81       	ldd	r25, Y+2	; 0x02
    b9f4:	21 e0       	ldi	r18, 0x01	; 1
    b9f6:	fc 01       	movw	r30, r24
    b9f8:	23 83       	std	Z+3, r18	; 0x03
    b9fa:	0e 94 aa 48 	call	0x9154	; 0x9154 <sync_fs>
    b9fe:	f7 01       	movw	r30, r14
    ba00:	26 85       	ldd	r18, Z+14	; 0x0e
    ba02:	2f 7b       	andi	r18, 0xBF	; 191
    ba04:	26 87       	std	Z+14, r18	; 0x0e
    ba06:	04 c0       	rjmp	.+8      	; 0xba10 <f_sync+0xe6>
    ba08:	80 e0       	ldi	r24, 0x00	; 0
    ba0a:	01 c0       	rjmp	.+2      	; 0xba0e <f_sync+0xe4>
    ba0c:	81 e0       	ldi	r24, 0x01	; 1
    ba0e:	90 e0       	ldi	r25, 0x00	; 0
    ba10:	0f 90       	pop	r0
    ba12:	0f 90       	pop	r0
    ba14:	df 91       	pop	r29
    ba16:	cf 91       	pop	r28
    ba18:	1f 91       	pop	r17
    ba1a:	0f 91       	pop	r16
    ba1c:	ff 90       	pop	r15
    ba1e:	ef 90       	pop	r14
    ba20:	bf 90       	pop	r11
    ba22:	af 90       	pop	r10
    ba24:	9f 90       	pop	r9
    ba26:	8f 90       	pop	r8
    ba28:	08 95       	ret

0000ba2a <f_close>:
    ba2a:	a2 e0       	ldi	r26, 0x02	; 2
    ba2c:	b0 e0       	ldi	r27, 0x00	; 0
    ba2e:	eb e1       	ldi	r30, 0x1B	; 27
    ba30:	fd e5       	ldi	r31, 0x5D	; 93
    ba32:	0c 94 e6 e0 	jmp	0x1c1cc	; 0x1c1cc <__prologue_saves__+0x1c>
    ba36:	8c 01       	movw	r16, r24
    ba38:	78 df       	rcall	.-272    	; 0xb92a <f_sync>
    ba3a:	00 97       	sbiw	r24, 0x00	; 0
    ba3c:	59 f4       	brne	.+22     	; 0xba54 <f_close+0x2a>
    ba3e:	be 01       	movw	r22, r28
    ba40:	6f 5f       	subi	r22, 0xFF	; 255
    ba42:	7f 4f       	sbci	r23, 0xFF	; 255
    ba44:	c8 01       	movw	r24, r16
    ba46:	0e 94 41 46 	call	0x8c82	; 0x8c82 <validate>
    ba4a:	00 97       	sbiw	r24, 0x00	; 0
    ba4c:	19 f4       	brne	.+6      	; 0xba54 <f_close+0x2a>
    ba4e:	f8 01       	movw	r30, r16
    ba50:	11 82       	std	Z+1, r1	; 0x01
    ba52:	10 82       	st	Z, r1
    ba54:	22 96       	adiw	r28, 0x02	; 2
    ba56:	e4 e0       	ldi	r30, 0x04	; 4
    ba58:	0c 94 02 e1 	jmp	0x1c204	; 0x1c204 <__epilogue_restores__+0x1c>

0000ba5c <f_chdir>:
    ba5c:	a2 e3       	ldi	r26, 0x32	; 50
    ba5e:	b0 e0       	ldi	r27, 0x00	; 0
    ba60:	e4 e3       	ldi	r30, 0x34	; 52
    ba62:	fd e5       	ldi	r31, 0x5D	; 93
    ba64:	0c 94 e2 e0 	jmp	0x1c1c4	; 0x1c1c4 <__prologue_saves__+0x14>
    ba68:	9a ab       	std	Y+50, r25	; 0x32
    ba6a:	89 ab       	std	Y+49, r24	; 0x31
    ba6c:	40 e0       	ldi	r20, 0x00	; 0
    ba6e:	be 01       	movw	r22, r28
    ba70:	61 5d       	subi	r22, 0xD1	; 209
    ba72:	7f 4f       	sbci	r23, 0xFF	; 255
    ba74:	ce 01       	movw	r24, r28
    ba76:	c1 96       	adiw	r24, 0x31	; 49
    ba78:	0e 94 3f 4a 	call	0x947e	; 0x947e <mount_volume>
    ba7c:	00 97       	sbiw	r24, 0x00	; 0
    ba7e:	09 f0       	breq	.+2      	; 0xba82 <f_chdir+0x26>
    ba80:	44 c0       	rjmp	.+136    	; 0xbb0a <f_chdir+0xae>
    ba82:	8f a5       	ldd	r24, Y+47	; 0x2f
    ba84:	98 a9       	ldd	r25, Y+48	; 0x30
    ba86:	9a 83       	std	Y+2, r25	; 0x02
    ba88:	89 83       	std	Y+1, r24	; 0x01
    ba8a:	80 e0       	ldi	r24, 0x00	; 0
    ba8c:	92 e0       	ldi	r25, 0x02	; 2
    ba8e:	0e 94 51 67 	call	0xcea2	; 0xcea2 <ff_memalloc>
    ba92:	7c 01       	movw	r14, r24
    ba94:	00 97       	sbiw	r24, 0x00	; 0
    ba96:	a9 f1       	breq	.+106    	; 0xbb02 <f_chdir+0xa6>
    ba98:	ef a5       	ldd	r30, Y+47	; 0x2f
    ba9a:	f8 a9       	ldd	r31, Y+48	; 0x30
    ba9c:	94 87       	std	Z+12, r25	; 0x0c
    ba9e:	83 87       	std	Z+11, r24	; 0x0b
    baa0:	69 a9       	ldd	r22, Y+49	; 0x31
    baa2:	7a a9       	ldd	r23, Y+50	; 0x32
    baa4:	ce 01       	movw	r24, r28
    baa6:	01 96       	adiw	r24, 0x01	; 1
    baa8:	39 d8       	rcall	.-3982   	; 0xab1c <follow_path>
    baaa:	8c 01       	movw	r16, r24
    baac:	89 2b       	or	r24, r25
    baae:	09 f5       	brne	.+66     	; 0xbaf2 <f_chdir+0x96>
    bab0:	88 a5       	ldd	r24, Y+40	; 0x28
    bab2:	87 ff       	sbrs	r24, 7
    bab4:	0b c0       	rjmp	.+22     	; 0xbacc <f_chdir+0x70>
    bab6:	ef a5       	ldd	r30, Y+47	; 0x2f
    bab8:	f8 a9       	ldd	r31, Y+48	; 0x30
    baba:	8f 81       	ldd	r24, Y+7	; 0x07
    babc:	98 85       	ldd	r25, Y+8	; 0x08
    babe:	a9 85       	ldd	r26, Y+9	; 0x09
    bac0:	ba 85       	ldd	r27, Y+10	; 0x0a
    bac2:	85 8b       	std	Z+21, r24	; 0x15
    bac4:	96 8b       	std	Z+22, r25	; 0x16
    bac6:	a7 8b       	std	Z+23, r26	; 0x17
    bac8:	b0 8f       	std	Z+24, r27	; 0x18
    baca:	13 c0       	rjmp	.+38     	; 0xbaf2 <f_chdir+0x96>
    bacc:	8d 81       	ldd	r24, Y+5	; 0x05
    bace:	84 ff       	sbrs	r24, 4
    bad0:	0e c0       	rjmp	.+28     	; 0xbaee <f_chdir+0x92>
    bad2:	cf a4       	ldd	r12, Y+47	; 0x2f
    bad4:	d8 a8       	ldd	r13, Y+48	; 0x30
    bad6:	6b 8d       	ldd	r22, Y+27	; 0x1b
    bad8:	7c 8d       	ldd	r23, Y+28	; 0x1c
    bada:	f6 01       	movw	r30, r12
    badc:	80 81       	ld	r24, Z
    bade:	0e 94 35 48 	call	0x906a	; 0x906a <ld_clust.isra.4>
    bae2:	f6 01       	movw	r30, r12
    bae4:	65 8b       	std	Z+21, r22	; 0x15
    bae6:	76 8b       	std	Z+22, r23	; 0x16
    bae8:	87 8b       	std	Z+23, r24	; 0x17
    baea:	90 8f       	std	Z+24, r25	; 0x18
    baec:	02 c0       	rjmp	.+4      	; 0xbaf2 <f_chdir+0x96>
    baee:	05 e0       	ldi	r16, 0x05	; 5
    baf0:	10 e0       	ldi	r17, 0x00	; 0
    baf2:	c7 01       	movw	r24, r14
    baf4:	0e 94 54 67 	call	0xcea8	; 0xcea8 <ff_memfree>
    baf8:	04 30       	cpi	r16, 0x04	; 4
    bafa:	11 05       	cpc	r17, r1
    bafc:	29 f4       	brne	.+10     	; 0xbb08 <f_chdir+0xac>
    bafe:	85 e0       	ldi	r24, 0x05	; 5
    bb00:	01 c0       	rjmp	.+2      	; 0xbb04 <f_chdir+0xa8>
    bb02:	81 e1       	ldi	r24, 0x11	; 17
    bb04:	90 e0       	ldi	r25, 0x00	; 0
    bb06:	01 c0       	rjmp	.+2      	; 0xbb0a <f_chdir+0xae>
    bb08:	c8 01       	movw	r24, r16
    bb0a:	e2 96       	adiw	r28, 0x32	; 50
    bb0c:	e8 e0       	ldi	r30, 0x08	; 8
    bb0e:	0c 94 fe e0 	jmp	0x1c1fc	; 0x1c1fc <__epilogue_restores__+0x14>

0000bb12 <f_getcwd>:
    bb12:	a8 e4       	ldi	r26, 0x48	; 72
    bb14:	b1 e0       	ldi	r27, 0x01	; 1
    bb16:	ef e8       	ldi	r30, 0x8F	; 143
    bb18:	fd e5       	ldi	r31, 0x5D	; 93
    bb1a:	0c 94 d8 e0 	jmp	0x1c1b0	; 0x1c1b0 <__prologue_saves__>
    bb1e:	c9 5b       	subi	r28, 0xB9	; 185
    bb20:	de 4f       	sbci	r29, 0xFE	; 254
    bb22:	99 83       	std	Y+1, r25	; 0x01
    bb24:	88 83       	st	Y, r24
    bb26:	c7 54       	subi	r28, 0x47	; 71
    bb28:	d1 40       	sbci	r29, 0x01	; 1
    bb2a:	4b 01       	movw	r8, r22
    bb2c:	7c 01       	movw	r14, r24
    bb2e:	fc 01       	movw	r30, r24
    bb30:	10 82       	st	Z, r1
    bb32:	40 e0       	ldi	r20, 0x00	; 0
    bb34:	be 01       	movw	r22, r28
    bb36:	6b 5b       	subi	r22, 0xBB	; 187
    bb38:	7e 4f       	sbci	r23, 0xFE	; 254
    bb3a:	ce 01       	movw	r24, r28
    bb3c:	89 5b       	subi	r24, 0xB9	; 185
    bb3e:	9e 4f       	sbci	r25, 0xFE	; 254
    bb40:	0e 94 3f 4a 	call	0x947e	; 0x947e <mount_volume>
    bb44:	1c 01       	movw	r2, r24
    bb46:	89 2b       	or	r24, r25
    bb48:	09 f0       	breq	.+2      	; 0xbb4c <f_getcwd+0x3a>
    bb4a:	03 c1       	rjmp	.+518    	; 0xbd52 <f_getcwd+0x240>
    bb4c:	cb 5b       	subi	r28, 0xBB	; 187
    bb4e:	de 4f       	sbci	r29, 0xFE	; 254
    bb50:	88 81       	ld	r24, Y
    bb52:	99 81       	ldd	r25, Y+1	; 0x01
    bb54:	c5 54       	subi	r28, 0x45	; 69
    bb56:	d1 40       	sbci	r29, 0x01	; 1
    bb58:	c9 5e       	subi	r28, 0xE9	; 233
    bb5a:	de 4f       	sbci	r29, 0xFE	; 254
    bb5c:	99 83       	std	Y+1, r25	; 0x01
    bb5e:	88 83       	st	Y, r24
    bb60:	c7 51       	subi	r28, 0x17	; 23
    bb62:	d1 40       	sbci	r29, 0x01	; 1
    bb64:	80 e0       	ldi	r24, 0x00	; 0
    bb66:	92 e0       	ldi	r25, 0x02	; 2
    bb68:	0e 94 51 67 	call	0xcea2	; 0xcea2 <ff_memalloc>
    bb6c:	5c 01       	movw	r10, r24
    bb6e:	00 97       	sbiw	r24, 0x00	; 0
    bb70:	09 f4       	brne	.+2      	; 0xbb74 <f_getcwd+0x62>
    bb72:	f3 c0       	rjmp	.+486    	; 0xbd5a <f_getcwd+0x248>
    bb74:	cb 5b       	subi	r28, 0xBB	; 187
    bb76:	de 4f       	sbci	r29, 0xFE	; 254
    bb78:	e8 81       	ld	r30, Y
    bb7a:	f9 81       	ldd	r31, Y+1	; 0x01
    bb7c:	c5 54       	subi	r28, 0x45	; 69
    bb7e:	d1 40       	sbci	r29, 0x01	; 1
    bb80:	94 87       	std	Z+12, r25	; 0x0c
    bb82:	83 87       	std	Z+11, r24	; 0x0b
    bb84:	85 89       	ldd	r24, Z+21	; 0x15
    bb86:	96 89       	ldd	r25, Z+22	; 0x16
    bb88:	a7 89       	ldd	r26, Z+23	; 0x17
    bb8a:	b0 8d       	ldd	r27, Z+24	; 0x18
    bb8c:	c3 5e       	subi	r28, 0xE3	; 227
    bb8e:	de 4f       	sbci	r29, 0xFE	; 254
    bb90:	88 83       	st	Y, r24
    bb92:	99 83       	std	Y+1, r25	; 0x01
    bb94:	aa 83       	std	Y+2, r26	; 0x02
    bb96:	bb 83       	std	Y+3, r27	; 0x03
    bb98:	cd 51       	subi	r28, 0x1D	; 29
    bb9a:	d1 40       	sbci	r29, 0x01	; 1
    bb9c:	84 01       	movw	r16, r8
    bb9e:	ce 01       	movw	r24, r28
    bba0:	01 96       	adiw	r24, 0x01	; 1
    bba2:	6c 01       	movw	r12, r24
    bba4:	c3 5e       	subi	r28, 0xE3	; 227
    bba6:	de 4f       	sbci	r29, 0xFE	; 254
    bba8:	48 80       	ld	r4, Y
    bbaa:	59 80       	ldd	r5, Y+1	; 0x01
    bbac:	6a 80       	ldd	r6, Y+2	; 0x02
    bbae:	7b 80       	ldd	r7, Y+3	; 0x03
    bbb0:	cd 51       	subi	r28, 0x1D	; 29
    bbb2:	d1 40       	sbci	r29, 0x01	; 1
    bbb4:	41 14       	cp	r4, r1
    bbb6:	51 04       	cpc	r5, r1
    bbb8:	61 04       	cpc	r6, r1
    bbba:	71 04       	cpc	r7, r1
    bbbc:	09 f4       	brne	.+2      	; 0xbbc0 <f_getcwd+0xae>
    bbbe:	a3 c0       	rjmp	.+326    	; 0xbd06 <f_getcwd+0x1f4>
    bbc0:	40 e2       	ldi	r20, 0x20	; 32
    bbc2:	50 e0       	ldi	r21, 0x00	; 0
    bbc4:	60 e0       	ldi	r22, 0x00	; 0
    bbc6:	70 e0       	ldi	r23, 0x00	; 0
    bbc8:	ce 01       	movw	r24, r28
    bbca:	89 5e       	subi	r24, 0xE9	; 233
    bbcc:	9e 4f       	sbci	r25, 0xFE	; 254
    bbce:	0e 94 48 4e 	call	0x9c90	; 0x9c90 <dir_sdi>
    bbd2:	00 97       	sbiw	r24, 0x00	; 0
    bbd4:	09 f0       	breq	.+2      	; 0xbbd8 <f_getcwd+0xc6>
    bbd6:	c6 c0       	rjmp	.+396    	; 0xbd64 <f_getcwd+0x252>
    bbd8:	c3 5d       	subi	r28, 0xD3	; 211
    bbda:	de 4f       	sbci	r29, 0xFE	; 254
    bbdc:	48 81       	ld	r20, Y
    bbde:	59 81       	ldd	r21, Y+1	; 0x01
    bbe0:	6a 81       	ldd	r22, Y+2	; 0x02
    bbe2:	7b 81       	ldd	r23, Y+3	; 0x03
    bbe4:	cd 52       	subi	r28, 0x2D	; 45
    bbe6:	d1 40       	sbci	r29, 0x01	; 1
    bbe8:	cb 5b       	subi	r28, 0xBB	; 187
    bbea:	de 4f       	sbci	r29, 0xFE	; 254
    bbec:	88 81       	ld	r24, Y
    bbee:	99 81       	ldd	r25, Y+1	; 0x01
    bbf0:	c5 54       	subi	r28, 0x45	; 69
    bbf2:	d1 40       	sbci	r29, 0x01	; 1
    bbf4:	0e 94 c4 49 	call	0x9388	; 0x9388 <move_window>
    bbf8:	00 97       	sbiw	r24, 0x00	; 0
    bbfa:	09 f0       	breq	.+2      	; 0xbbfe <f_getcwd+0xec>
    bbfc:	b3 c0       	rjmp	.+358    	; 0xbd64 <f_getcwd+0x252>
    bbfe:	cf 5c       	subi	r28, 0xCF	; 207
    bc00:	de 4f       	sbci	r29, 0xFE	; 254
    bc02:	68 81       	ld	r22, Y
    bc04:	79 81       	ldd	r23, Y+1	; 0x01
    bc06:	c1 53       	subi	r28, 0x31	; 49
    bc08:	d1 40       	sbci	r29, 0x01	; 1
    bc0a:	cb 5b       	subi	r28, 0xBB	; 187
    bc0c:	de 4f       	sbci	r29, 0xFE	; 254
    bc0e:	e8 81       	ld	r30, Y
    bc10:	f9 81       	ldd	r31, Y+1	; 0x01
    bc12:	c5 54       	subi	r28, 0x45	; 69
    bc14:	d1 40       	sbci	r29, 0x01	; 1
    bc16:	80 81       	ld	r24, Z
    bc18:	0e 94 35 48 	call	0x906a	; 0x906a <ld_clust.isra.4>
    bc1c:	c3 5e       	subi	r28, 0xE3	; 227
    bc1e:	de 4f       	sbci	r29, 0xFE	; 254
    bc20:	68 83       	st	Y, r22
    bc22:	79 83       	std	Y+1, r23	; 0x01
    bc24:	8a 83       	std	Y+2, r24	; 0x02
    bc26:	9b 83       	std	Y+3, r25	; 0x03
    bc28:	cd 51       	subi	r28, 0x1D	; 29
    bc2a:	d1 40       	sbci	r29, 0x01	; 1
    bc2c:	40 e0       	ldi	r20, 0x00	; 0
    bc2e:	50 e0       	ldi	r21, 0x00	; 0
    bc30:	ba 01       	movw	r22, r20
    bc32:	ce 01       	movw	r24, r28
    bc34:	89 5e       	subi	r24, 0xE9	; 233
    bc36:	9e 4f       	sbci	r25, 0xFE	; 254
    bc38:	0e 94 48 4e 	call	0x9c90	; 0x9c90 <dir_sdi>
    bc3c:	00 97       	sbiw	r24, 0x00	; 0
    bc3e:	09 f0       	breq	.+2      	; 0xbc42 <f_getcwd+0x130>
    bc40:	91 c0       	rjmp	.+290    	; 0xbd64 <f_getcwd+0x252>
    bc42:	60 e0       	ldi	r22, 0x00	; 0
    bc44:	70 e0       	ldi	r23, 0x00	; 0
    bc46:	ce 01       	movw	r24, r28
    bc48:	89 5e       	subi	r24, 0xE9	; 233
    bc4a:	9e 4f       	sbci	r25, 0xFE	; 254
    bc4c:	0e 94 e1 51 	call	0xa3c2	; 0xa3c2 <dir_read>
    bc50:	00 97       	sbiw	r24, 0x00	; 0
    bc52:	09 f0       	breq	.+2      	; 0xbc56 <f_getcwd+0x144>
    bc54:	89 c0       	rjmp	.+274    	; 0xbd68 <f_getcwd+0x256>
    bc56:	cf 5c       	subi	r28, 0xCF	; 207
    bc58:	de 4f       	sbci	r29, 0xFE	; 254
    bc5a:	68 81       	ld	r22, Y
    bc5c:	79 81       	ldd	r23, Y+1	; 0x01
    bc5e:	c1 53       	subi	r28, 0x31	; 49
    bc60:	d1 40       	sbci	r29, 0x01	; 1
    bc62:	cb 5b       	subi	r28, 0xBB	; 187
    bc64:	de 4f       	sbci	r29, 0xFE	; 254
    bc66:	e8 81       	ld	r30, Y
    bc68:	f9 81       	ldd	r31, Y+1	; 0x01
    bc6a:	c5 54       	subi	r28, 0x45	; 69
    bc6c:	d1 40       	sbci	r29, 0x01	; 1
    bc6e:	80 81       	ld	r24, Z
    bc70:	0e 94 35 48 	call	0x906a	; 0x906a <ld_clust.isra.4>
    bc74:	46 16       	cp	r4, r22
    bc76:	57 06       	cpc	r5, r23
    bc78:	68 06       	cpc	r6, r24
    bc7a:	79 06       	cpc	r7, r25
    bc7c:	41 f4       	brne	.+16     	; 0xbc8e <f_getcwd+0x17c>
    bc7e:	b6 01       	movw	r22, r12
    bc80:	ce 01       	movw	r24, r28
    bc82:	89 5e       	subi	r24, 0xE9	; 233
    bc84:	9e 4f       	sbci	r25, 0xFE	; 254
    bc86:	0e 94 25 47 	call	0x8e4a	; 0x8e4a <get_fileinfo>
    bc8a:	f6 01       	movw	r30, r12
    bc8c:	0a c0       	rjmp	.+20     	; 0xbca2 <f_getcwd+0x190>
    bc8e:	60 e0       	ldi	r22, 0x00	; 0
    bc90:	70 e0       	ldi	r23, 0x00	; 0
    bc92:	ce 01       	movw	r24, r28
    bc94:	89 5e       	subi	r24, 0xE9	; 233
    bc96:	9e 4f       	sbci	r25, 0xFE	; 254
    bc98:	0e 94 c0 50 	call	0xa180	; 0xa180 <dir_next>
    bc9c:	00 97       	sbiw	r24, 0x00	; 0
    bc9e:	89 f2       	breq	.-94     	; 0xbc42 <f_getcwd+0x130>
    bca0:	63 c0       	rjmp	.+198    	; 0xbd68 <f_getcwd+0x256>
    bca2:	cf 01       	movw	r24, r30
    bca4:	8c 19       	sub	r24, r12
    bca6:	9d 09       	sbc	r25, r13
    bca8:	31 96       	adiw	r30, 0x01	; 1
    bcaa:	25 89       	ldd	r18, Z+21	; 0x15
    bcac:	21 11       	cpse	r18, r1
    bcae:	f9 cf       	rjmp	.-14     	; 0xbca2 <f_getcwd+0x190>
    bcb0:	9c 01       	movw	r18, r24
    bcb2:	2f 5f       	subi	r18, 0xFF	; 255
    bcb4:	3f 4f       	sbci	r19, 0xFF	; 255
    bcb6:	02 17       	cp	r16, r18
    bcb8:	13 07       	cpc	r17, r19
    bcba:	08 f4       	brcc	.+2      	; 0xbcbe <f_getcwd+0x1ac>
    bcbc:	51 c0       	rjmp	.+162    	; 0xbd60 <f_getcwd+0x24e>
    bcbe:	f6 01       	movw	r30, r12
    bcc0:	e8 0f       	add	r30, r24
    bcc2:	f9 1f       	adc	r31, r25
    bcc4:	98 01       	movw	r18, r16
    bcc6:	ce 16       	cp	r12, r30
    bcc8:	df 06       	cpc	r13, r31
    bcca:	71 f0       	breq	.+28     	; 0xbce8 <f_getcwd+0x1d6>
    bccc:	21 50       	subi	r18, 0x01	; 1
    bcce:	31 09       	sbc	r19, r1
    bcd0:	45 89       	ldd	r20, Z+21	; 0x15
    bcd2:	c9 5b       	subi	r28, 0xB9	; 185
    bcd4:	de 4f       	sbci	r29, 0xFE	; 254
    bcd6:	a8 81       	ld	r26, Y
    bcd8:	b9 81       	ldd	r27, Y+1	; 0x01
    bcda:	c7 54       	subi	r28, 0x47	; 71
    bcdc:	d1 40       	sbci	r29, 0x01	; 1
    bcde:	a2 0f       	add	r26, r18
    bce0:	b3 1f       	adc	r27, r19
    bce2:	4c 93       	st	X, r20
    bce4:	31 97       	sbiw	r30, 0x01	; 1
    bce6:	ef cf       	rjmp	.-34     	; 0xbcc6 <f_getcwd+0x1b4>
    bce8:	80 95       	com	r24
    bcea:	90 95       	com	r25
    bcec:	08 0f       	add	r16, r24
    bcee:	19 1f       	adc	r17, r25
    bcf0:	c9 5b       	subi	r28, 0xB9	; 185
    bcf2:	de 4f       	sbci	r29, 0xFE	; 254
    bcf4:	e8 81       	ld	r30, Y
    bcf6:	f9 81       	ldd	r31, Y+1	; 0x01
    bcf8:	c7 54       	subi	r28, 0x47	; 71
    bcfa:	d1 40       	sbci	r29, 0x01	; 1
    bcfc:	e0 0f       	add	r30, r16
    bcfe:	f1 1f       	adc	r31, r17
    bd00:	9f e2       	ldi	r25, 0x2F	; 47
    bd02:	90 83       	st	Z, r25
    bd04:	4f cf       	rjmp	.-354    	; 0xbba4 <f_getcwd+0x92>
    bd06:	08 15       	cp	r16, r8
    bd08:	19 05       	cpc	r17, r9
    bd0a:	61 f4       	brne	.+24     	; 0xbd24 <f_getcwd+0x212>
    bd0c:	01 50       	subi	r16, 0x01	; 1
    bd0e:	11 09       	sbc	r17, r1
    bd10:	c9 5b       	subi	r28, 0xB9	; 185
    bd12:	de 4f       	sbci	r29, 0xFE	; 254
    bd14:	e8 81       	ld	r30, Y
    bd16:	f9 81       	ldd	r31, Y+1	; 0x01
    bd18:	c7 54       	subi	r28, 0x47	; 71
    bd1a:	d1 40       	sbci	r29, 0x01	; 1
    bd1c:	e0 0f       	add	r30, r16
    bd1e:	f1 1f       	adc	r31, r17
    bd20:	8f e2       	ldi	r24, 0x2F	; 47
    bd22:	80 83       	st	Z, r24
    bd24:	ef ef       	ldi	r30, 0xFF	; 255
    bd26:	ee 1a       	sub	r14, r30
    bd28:	fe 0a       	sbc	r15, r30
    bd2a:	c9 5b       	subi	r28, 0xB9	; 185
    bd2c:	de 4f       	sbci	r29, 0xFE	; 254
    bd2e:	e8 81       	ld	r30, Y
    bd30:	f9 81       	ldd	r31, Y+1	; 0x01
    bd32:	c7 54       	subi	r28, 0x47	; 71
    bd34:	d1 40       	sbci	r29, 0x01	; 1
    bd36:	e0 0f       	add	r30, r16
    bd38:	f1 1f       	adc	r31, r17
    bd3a:	80 81       	ld	r24, Z
    bd3c:	f7 01       	movw	r30, r14
    bd3e:	31 97       	sbiw	r30, 0x01	; 1
    bd40:	80 83       	st	Z, r24
    bd42:	0f 5f       	subi	r16, 0xFF	; 255
    bd44:	1f 4f       	sbci	r17, 0xFF	; 255
    bd46:	08 15       	cp	r16, r8
    bd48:	19 05       	cpc	r17, r9
    bd4a:	60 f3       	brcs	.-40     	; 0xbd24 <f_getcwd+0x212>
    bd4c:	c5 01       	movw	r24, r10
    bd4e:	0e 94 54 67 	call	0xcea8	; 0xcea8 <ff_memfree>
    bd52:	f7 01       	movw	r30, r14
    bd54:	10 82       	st	Z, r1
    bd56:	c1 01       	movw	r24, r2
    bd58:	0d c0       	rjmp	.+26     	; 0xbd74 <f_getcwd+0x262>
    bd5a:	81 e1       	ldi	r24, 0x11	; 17
    bd5c:	90 e0       	ldi	r25, 0x00	; 0
    bd5e:	0a c0       	rjmp	.+20     	; 0xbd74 <f_getcwd+0x262>
    bd60:	81 e1       	ldi	r24, 0x11	; 17
    bd62:	90 e0       	ldi	r25, 0x00	; 0
    bd64:	1c 01       	movw	r2, r24
    bd66:	f2 cf       	rjmp	.-28     	; 0xbd4c <f_getcwd+0x23a>
    bd68:	84 30       	cpi	r24, 0x04	; 4
    bd6a:	91 05       	cpc	r25, r1
    bd6c:	d9 f7       	brne	.-10     	; 0xbd64 <f_getcwd+0x252>
    bd6e:	82 e0       	ldi	r24, 0x02	; 2
    bd70:	90 e0       	ldi	r25, 0x00	; 0
    bd72:	f8 cf       	rjmp	.-16     	; 0xbd64 <f_getcwd+0x252>
    bd74:	c8 5b       	subi	r28, 0xB8	; 184
    bd76:	de 4f       	sbci	r29, 0xFE	; 254
    bd78:	e2 e1       	ldi	r30, 0x12	; 18
    bd7a:	0c 94 f4 e0 	jmp	0x1c1e8	; 0x1c1e8 <__epilogue_restores__>

0000bd7e <f_lseek>:
    bd7e:	aa e0       	ldi	r26, 0x0A	; 10
    bd80:	b0 e0       	ldi	r27, 0x00	; 0
    bd82:	e5 ec       	ldi	r30, 0xC5	; 197
    bd84:	fe e5       	ldi	r31, 0x5E	; 94
    bd86:	0c 94 d8 e0 	jmp	0x1c1b0	; 0x1c1b0 <__prologue_saves__>
    bd8a:	1c 01       	movw	r2, r24
    bd8c:	6a 01       	movw	r12, r20
    bd8e:	7b 01       	movw	r14, r22
    bd90:	be 01       	movw	r22, r28
    bd92:	6f 5f       	subi	r22, 0xFF	; 255
    bd94:	7f 4f       	sbci	r23, 0xFF	; 255
    bd96:	0e 94 41 46 	call	0x8c82	; 0x8c82 <validate>
    bd9a:	00 97       	sbiw	r24, 0x00	; 0
    bd9c:	09 f0       	breq	.+2      	; 0xbda0 <f_lseek+0x22>
    bd9e:	a7 c2       	rjmp	.+1358   	; 0xc2ee <f_lseek+0x570>
    bda0:	f1 01       	movw	r30, r2
    bda2:	87 85       	ldd	r24, Z+15	; 0x0f
    bda4:	90 e0       	ldi	r25, 0x00	; 0
    bda6:	00 97       	sbiw	r24, 0x00	; 0
    bda8:	09 f0       	breq	.+2      	; 0xbdac <f_lseek+0x2e>
    bdaa:	a1 c2       	rjmp	.+1346   	; 0xc2ee <f_lseek+0x570>
    bdac:	22 a1       	ldd	r18, Z+34	; 0x22
    bdae:	33 a1       	ldd	r19, Z+35	; 0x23
    bdb0:	21 15       	cp	r18, r1
    bdb2:	31 05       	cpc	r19, r1
    bdb4:	09 f4       	brne	.+2      	; 0xbdb8 <f_lseek+0x3a>
    bdb6:	2e c1       	rjmp	.+604    	; 0xc014 <f_lseek+0x296>
    bdb8:	ff ef       	ldi	r31, 0xFF	; 255
    bdba:	cf 16       	cp	r12, r31
    bdbc:	df 06       	cpc	r13, r31
    bdbe:	ef 06       	cpc	r14, r31
    bdc0:	ff 06       	cpc	r15, r31
    bdc2:	09 f0       	breq	.+2      	; 0xbdc6 <f_lseek+0x48>
    bdc4:	9a c0       	rjmp	.+308    	; 0xbefa <f_lseek+0x17c>
    bdc6:	89 01       	movw	r16, r18
    bdc8:	0c 5f       	subi	r16, 0xFC	; 252
    bdca:	1f 4f       	sbci	r17, 0xFF	; 255
    bdcc:	d9 01       	movw	r26, r18
    bdce:	4d 91       	ld	r20, X+
    bdd0:	5d 91       	ld	r21, X+
    bdd2:	6d 91       	ld	r22, X+
    bdd4:	7c 91       	ld	r23, X
    bdd6:	4f 83       	std	Y+7, r20	; 0x07
    bdd8:	58 87       	std	Y+8, r21	; 0x08
    bdda:	69 87       	std	Y+9, r22	; 0x09
    bddc:	7a 87       	std	Y+10, r23	; 0x0a
    bdde:	f1 01       	movw	r30, r2
    bde0:	86 80       	ldd	r8, Z+6	; 0x06
    bde2:	97 80       	ldd	r9, Z+7	; 0x07
    bde4:	a0 84       	ldd	r10, Z+8	; 0x08
    bde6:	b1 84       	ldd	r11, Z+9	; 0x09
    bde8:	52 e0       	ldi	r21, 0x02	; 2
    bdea:	c5 2e       	mov	r12, r21
    bdec:	d1 2c       	mov	r13, r1
    bdee:	e1 2c       	mov	r14, r1
    bdf0:	f1 2c       	mov	r15, r1
    bdf2:	81 14       	cp	r8, r1
    bdf4:	91 04       	cpc	r9, r1
    bdf6:	a1 04       	cpc	r10, r1
    bdf8:	b1 04       	cpc	r11, r1
    bdfa:	09 f4       	brne	.+2      	; 0xbdfe <f_lseek+0x80>
    bdfc:	65 c0       	rjmp	.+202    	; 0xbec8 <f_lseek+0x14a>
    bdfe:	24 01       	movw	r4, r8
    be00:	35 01       	movw	r6, r10
    be02:	1b 82       	std	Y+3, r1	; 0x03
    be04:	1c 82       	std	Y+4, r1	; 0x04
    be06:	1d 82       	std	Y+5, r1	; 0x05
    be08:	1e 82       	std	Y+6, r1	; 0x06
    be0a:	2b 81       	ldd	r18, Y+3	; 0x03
    be0c:	3c 81       	ldd	r19, Y+4	; 0x04
    be0e:	4d 81       	ldd	r20, Y+5	; 0x05
    be10:	5e 81       	ldd	r21, Y+6	; 0x06
    be12:	2f 5f       	subi	r18, 0xFF	; 255
    be14:	3f 4f       	sbci	r19, 0xFF	; 255
    be16:	4f 4f       	sbci	r20, 0xFF	; 255
    be18:	5f 4f       	sbci	r21, 0xFF	; 255
    be1a:	2b 83       	std	Y+3, r18	; 0x03
    be1c:	3c 83       	std	Y+4, r19	; 0x04
    be1e:	4d 83       	std	Y+5, r20	; 0x05
    be20:	5e 83       	std	Y+6, r21	; 0x06
    be22:	b3 01       	movw	r22, r6
    be24:	a2 01       	movw	r20, r4
    be26:	d1 01       	movw	r26, r2
    be28:	8d 91       	ld	r24, X+
    be2a:	9c 91       	ld	r25, X
    be2c:	0e 94 94 4d 	call	0x9b28	; 0x9b28 <get_fat.isra.10>
    be30:	62 30       	cpi	r22, 0x02	; 2
    be32:	71 05       	cpc	r23, r1
    be34:	81 05       	cpc	r24, r1
    be36:	91 05       	cpc	r25, r1
    be38:	10 f4       	brcc	.+4      	; 0xbe3e <f_lseek+0xc0>
    be3a:	82 e0       	ldi	r24, 0x02	; 2
    be3c:	07 c0       	rjmp	.+14     	; 0xbe4c <f_lseek+0xce>
    be3e:	6f 3f       	cpi	r22, 0xFF	; 255
    be40:	ff ef       	ldi	r31, 0xFF	; 255
    be42:	7f 07       	cpc	r23, r31
    be44:	8f 07       	cpc	r24, r31
    be46:	9f 07       	cpc	r25, r31
    be48:	29 f4       	brne	.+10     	; 0xbe54 <f_lseek+0xd6>
    be4a:	81 e0       	ldi	r24, 0x01	; 1
    be4c:	f1 01       	movw	r30, r2
    be4e:	87 87       	std	Z+15, r24	; 0x0f
    be50:	90 e0       	ldi	r25, 0x00	; 0
    be52:	4d c2       	rjmp	.+1178   	; 0xc2ee <f_lseek+0x570>
    be54:	a3 01       	movw	r20, r6
    be56:	92 01       	movw	r18, r4
    be58:	2f 5f       	subi	r18, 0xFF	; 255
    be5a:	3f 4f       	sbci	r19, 0xFF	; 255
    be5c:	4f 4f       	sbci	r20, 0xFF	; 255
    be5e:	5f 4f       	sbci	r21, 0xFF	; 255
    be60:	2b 01       	movw	r4, r22
    be62:	3c 01       	movw	r6, r24
    be64:	62 17       	cp	r22, r18
    be66:	73 07       	cpc	r23, r19
    be68:	84 07       	cpc	r24, r20
    be6a:	95 07       	cpc	r25, r21
    be6c:	71 f2       	breq	.-100    	; 0xbe0a <f_lseek+0x8c>
    be6e:	f2 e0       	ldi	r31, 0x02	; 2
    be70:	cf 0e       	add	r12, r31
    be72:	d1 1c       	adc	r13, r1
    be74:	e1 1c       	adc	r14, r1
    be76:	f1 1c       	adc	r15, r1
    be78:	2f 81       	ldd	r18, Y+7	; 0x07
    be7a:	38 85       	ldd	r19, Y+8	; 0x08
    be7c:	49 85       	ldd	r20, Y+9	; 0x09
    be7e:	5a 85       	ldd	r21, Y+10	; 0x0a
    be80:	2c 15       	cp	r18, r12
    be82:	3d 05       	cpc	r19, r13
    be84:	4e 05       	cpc	r20, r14
    be86:	5f 05       	cpc	r21, r15
    be88:	88 f0       	brcs	.+34     	; 0xbeac <f_lseek+0x12e>
    be8a:	2b 81       	ldd	r18, Y+3	; 0x03
    be8c:	3c 81       	ldd	r19, Y+4	; 0x04
    be8e:	4d 81       	ldd	r20, Y+5	; 0x05
    be90:	5e 81       	ldd	r21, Y+6	; 0x06
    be92:	d8 01       	movw	r26, r16
    be94:	2d 93       	st	X+, r18
    be96:	3d 93       	st	X+, r19
    be98:	4d 93       	st	X+, r20
    be9a:	5c 93       	st	X, r21
    be9c:	13 97       	sbiw	r26, 0x03	; 3
    be9e:	f8 01       	movw	r30, r16
    bea0:	84 82       	std	Z+4, r8	; 0x04
    bea2:	95 82       	std	Z+5, r9	; 0x05
    bea4:	a6 82       	std	Z+6, r10	; 0x06
    bea6:	b7 82       	std	Z+7, r11	; 0x07
    bea8:	08 5f       	subi	r16, 0xF8	; 248
    beaa:	1f 4f       	sbci	r17, 0xFF	; 255
    beac:	e9 81       	ldd	r30, Y+1	; 0x01
    beae:	fa 81       	ldd	r31, Y+2	; 0x02
    beb0:	81 8c       	ldd	r8, Z+25	; 0x19
    beb2:	92 8c       	ldd	r9, Z+26	; 0x1a
    beb4:	a3 8c       	ldd	r10, Z+27	; 0x1b
    beb6:	b4 8c       	ldd	r11, Z+28	; 0x1c
    beb8:	68 15       	cp	r22, r8
    beba:	79 05       	cpc	r23, r9
    bebc:	8a 05       	cpc	r24, r10
    bebe:	9b 05       	cpc	r25, r11
    bec0:	18 f4       	brcc	.+6      	; 0xbec8 <f_lseek+0x14a>
    bec2:	4b 01       	movw	r8, r22
    bec4:	5c 01       	movw	r10, r24
    bec6:	9b cf       	rjmp	.-202    	; 0xbdfe <f_lseek+0x80>
    bec8:	f1 01       	movw	r30, r2
    beca:	a2 a1       	ldd	r26, Z+34	; 0x22
    becc:	b3 a1       	ldd	r27, Z+35	; 0x23
    bece:	cd 92       	st	X+, r12
    bed0:	dd 92       	st	X+, r13
    bed2:	ed 92       	st	X+, r14
    bed4:	fc 92       	st	X, r15
    bed6:	13 97       	sbiw	r26, 0x03	; 3
    bed8:	2f 81       	ldd	r18, Y+7	; 0x07
    beda:	38 85       	ldd	r19, Y+8	; 0x08
    bedc:	49 85       	ldd	r20, Y+9	; 0x09
    bede:	5a 85       	ldd	r21, Y+10	; 0x0a
    bee0:	2c 15       	cp	r18, r12
    bee2:	3d 05       	cpc	r19, r13
    bee4:	4e 05       	cpc	r20, r14
    bee6:	5f 05       	cpc	r21, r15
    bee8:	08 f4       	brcc	.+2      	; 0xbeec <f_lseek+0x16e>
    beea:	f8 c1       	rjmp	.+1008   	; 0xc2dc <f_lseek+0x55e>
    beec:	d8 01       	movw	r26, r16
    beee:	1d 92       	st	X+, r1
    bef0:	1d 92       	st	X+, r1
    bef2:	1d 92       	st	X+, r1
    bef4:	1c 92       	st	X, r1
    bef6:	13 97       	sbiw	r26, 0x03	; 3
    bef8:	ef c1       	rjmp	.+990    	; 0xc2d8 <f_lseek+0x55a>
    befa:	f1 01       	movw	r30, r2
    befc:	82 85       	ldd	r24, Z+10	; 0x0a
    befe:	93 85       	ldd	r25, Z+11	; 0x0b
    bf00:	a4 85       	ldd	r26, Z+12	; 0x0c
    bf02:	b5 85       	ldd	r27, Z+13	; 0x0d
    bf04:	46 01       	movw	r8, r12
    bf06:	57 01       	movw	r10, r14
    bf08:	8c 15       	cp	r24, r12
    bf0a:	9d 05       	cpc	r25, r13
    bf0c:	ae 05       	cpc	r26, r14
    bf0e:	bf 05       	cpc	r27, r15
    bf10:	10 f4       	brcc	.+4      	; 0xbf16 <f_lseek+0x198>
    bf12:	4c 01       	movw	r8, r24
    bf14:	5d 01       	movw	r10, r26
    bf16:	f1 01       	movw	r30, r2
    bf18:	80 8a       	std	Z+16, r8	; 0x10
    bf1a:	91 8a       	std	Z+17, r9	; 0x11
    bf1c:	a2 8a       	std	Z+18, r10	; 0x12
    bf1e:	b3 8a       	std	Z+19, r11	; 0x13
    bf20:	81 14       	cp	r8, r1
    bf22:	91 04       	cpc	r9, r1
    bf24:	a1 04       	cpc	r10, r1
    bf26:	b1 04       	cpc	r11, r1
    bf28:	09 f4       	brne	.+2      	; 0xbf2c <f_lseek+0x1ae>
    bf2a:	d6 c1       	rjmp	.+940    	; 0xc2d8 <f_lseek+0x55a>
    bf2c:	24 01       	movw	r4, r8
    bf2e:	35 01       	movw	r6, r10
    bf30:	f1 e0       	ldi	r31, 0x01	; 1
    bf32:	4f 1a       	sub	r4, r31
    bf34:	51 08       	sbc	r5, r1
    bf36:	61 08       	sbc	r6, r1
    bf38:	71 08       	sbc	r7, r1
    bf3a:	b3 01       	movw	r22, r6
    bf3c:	a2 01       	movw	r20, r4
    bf3e:	c1 01       	movw	r24, r2
    bf40:	0e 94 ca 45 	call	0x8b94	; 0x8b94 <clmt_clust>
    bf44:	ab 01       	movw	r20, r22
    bf46:	bc 01       	movw	r22, r24
    bf48:	f1 01       	movw	r30, r2
    bf4a:	44 8b       	std	Z+20, r20	; 0x14
    bf4c:	55 8b       	std	Z+21, r21	; 0x15
    bf4e:	66 8b       	std	Z+22, r22	; 0x16
    bf50:	77 8b       	std	Z+23, r23	; 0x17
    bf52:	e9 80       	ldd	r14, Y+1	; 0x01
    bf54:	fa 80       	ldd	r15, Y+2	; 0x02
    bf56:	c7 01       	movw	r24, r14
    bf58:	0e 94 a2 45 	call	0x8b44	; 0x8b44 <clst2sect>
    bf5c:	61 15       	cp	r22, r1
    bf5e:	71 05       	cpc	r23, r1
    bf60:	81 05       	cpc	r24, r1
    bf62:	91 05       	cpc	r25, r1
    bf64:	09 f4       	brne	.+2      	; 0xbf68 <f_lseek+0x1ea>
    bf66:	69 cf       	rjmp	.-302    	; 0xbe3a <f_lseek+0xbc>
    bf68:	95 01       	movw	r18, r10
    bf6a:	84 01       	movw	r16, r8
    bf6c:	11 70       	andi	r17, 0x01	; 1
    bf6e:	22 27       	eor	r18, r18
    bf70:	33 27       	eor	r19, r19
    bf72:	01 15       	cp	r16, r1
    bf74:	11 05       	cpc	r17, r1
    bf76:	21 05       	cpc	r18, r1
    bf78:	31 05       	cpc	r19, r1
    bf7a:	09 f4       	brne	.+2      	; 0xbf7e <f_lseek+0x200>
    bf7c:	ad c1       	rjmp	.+858    	; 0xc2d8 <f_lseek+0x55a>
    bf7e:	f7 01       	movw	r30, r14
    bf80:	81 84       	ldd	r8, Z+9	; 0x09
    bf82:	92 84       	ldd	r9, Z+10	; 0x0a
    bf84:	f1 e0       	ldi	r31, 0x01	; 1
    bf86:	8f 1a       	sub	r8, r31
    bf88:	91 08       	sbc	r9, r1
    bf8a:	a1 2c       	mov	r10, r1
    bf8c:	b1 2c       	mov	r11, r1
    bf8e:	49 e0       	ldi	r20, 0x09	; 9
    bf90:	76 94       	lsr	r7
    bf92:	67 94       	ror	r6
    bf94:	57 94       	ror	r5
    bf96:	47 94       	ror	r4
    bf98:	4a 95       	dec	r20
    bf9a:	d1 f7       	brne	.-12     	; 0xbf90 <f_lseek+0x212>
    bf9c:	48 20       	and	r4, r8
    bf9e:	59 20       	and	r5, r9
    bfa0:	6a 20       	and	r6, r10
    bfa2:	7b 20       	and	r7, r11
    bfa4:	53 01       	movw	r10, r6
    bfa6:	42 01       	movw	r8, r4
    bfa8:	86 0e       	add	r8, r22
    bfaa:	97 1e       	adc	r9, r23
    bfac:	a8 1e       	adc	r10, r24
    bfae:	b9 1e       	adc	r11, r25
    bfb0:	f1 01       	movw	r30, r2
    bfb2:	20 8d       	ldd	r18, Z+24	; 0x18
    bfb4:	31 8d       	ldd	r19, Z+25	; 0x19
    bfb6:	42 8d       	ldd	r20, Z+26	; 0x1a
    bfb8:	53 8d       	ldd	r21, Z+27	; 0x1b
    bfba:	82 16       	cp	r8, r18
    bfbc:	93 06       	cpc	r9, r19
    bfbe:	a4 06       	cpc	r10, r20
    bfc0:	b5 06       	cpc	r11, r21
    bfc2:	09 f4       	brne	.+2      	; 0xbfc6 <f_lseek+0x248>
    bfc4:	89 c1       	rjmp	.+786    	; 0xc2d8 <f_lseek+0x55a>
    bfc6:	86 85       	ldd	r24, Z+14	; 0x0e
    bfc8:	b1 01       	movw	r22, r2
    bfca:	6c 5d       	subi	r22, 0xDC	; 220
    bfcc:	7f 4f       	sbci	r23, 0xFF	; 255
    bfce:	6b 01       	movw	r12, r22
    bfd0:	87 ff       	sbrs	r24, 7
    bfd2:	0d c0       	rjmp	.+26     	; 0xbfee <f_lseek+0x270>
    bfd4:	01 e0       	ldi	r16, 0x01	; 1
    bfd6:	10 e0       	ldi	r17, 0x00	; 0
    bfd8:	f7 01       	movw	r30, r14
    bfda:	81 81       	ldd	r24, Z+1	; 0x01
    bfdc:	0e 94 1d 68 	call	0xd03a	; 0xd03a <disk_write>
    bfe0:	89 2b       	or	r24, r25
    bfe2:	09 f0       	breq	.+2      	; 0xbfe6 <f_lseek+0x268>
    bfe4:	32 cf       	rjmp	.-412    	; 0xbe4a <f_lseek+0xcc>
    bfe6:	f1 01       	movw	r30, r2
    bfe8:	86 85       	ldd	r24, Z+14	; 0x0e
    bfea:	8f 77       	andi	r24, 0x7F	; 127
    bfec:	86 87       	std	Z+14, r24	; 0x0e
    bfee:	e9 81       	ldd	r30, Y+1	; 0x01
    bff0:	fa 81       	ldd	r31, Y+2	; 0x02
    bff2:	01 e0       	ldi	r16, 0x01	; 1
    bff4:	10 e0       	ldi	r17, 0x00	; 0
    bff6:	a5 01       	movw	r20, r10
    bff8:	94 01       	movw	r18, r8
    bffa:	b6 01       	movw	r22, r12
    bffc:	81 81       	ldd	r24, Z+1	; 0x01
    bffe:	0e 94 0d 68 	call	0xd01a	; 0xd01a <disk_read>
    c002:	89 2b       	or	r24, r25
    c004:	09 f0       	breq	.+2      	; 0xc008 <f_lseek+0x28a>
    c006:	21 cf       	rjmp	.-446    	; 0xbe4a <f_lseek+0xcc>
    c008:	f1 01       	movw	r30, r2
    c00a:	80 8e       	std	Z+24, r8	; 0x18
    c00c:	91 8e       	std	Z+25, r9	; 0x19
    c00e:	a2 8e       	std	Z+26, r10	; 0x1a
    c010:	b3 8e       	std	Z+27, r11	; 0x1b
    c012:	62 c1       	rjmp	.+708    	; 0xc2d8 <f_lseek+0x55a>
    c014:	f1 01       	movw	r30, r2
    c016:	82 85       	ldd	r24, Z+10	; 0x0a
    c018:	93 85       	ldd	r25, Z+11	; 0x0b
    c01a:	a4 85       	ldd	r26, Z+12	; 0x0c
    c01c:	b5 85       	ldd	r27, Z+13	; 0x0d
    c01e:	8c 15       	cp	r24, r12
    c020:	9d 05       	cpc	r25, r13
    c022:	ae 05       	cpc	r26, r14
    c024:	bf 05       	cpc	r27, r15
    c026:	28 f4       	brcc	.+10     	; 0xc032 <f_lseek+0x2b4>
    c028:	26 85       	ldd	r18, Z+14	; 0x0e
    c02a:	21 fd       	sbrc	r18, 1
    c02c:	02 c0       	rjmp	.+4      	; 0xc032 <f_lseek+0x2b4>
    c02e:	6c 01       	movw	r12, r24
    c030:	7d 01       	movw	r14, r26
    c032:	f1 01       	movw	r30, r2
    c034:	40 88       	ldd	r4, Z+16	; 0x10
    c036:	51 88       	ldd	r5, Z+17	; 0x11
    c038:	62 88       	ldd	r6, Z+18	; 0x12
    c03a:	73 88       	ldd	r7, Z+19	; 0x13
    c03c:	10 8a       	std	Z+16, r1	; 0x10
    c03e:	11 8a       	std	Z+17, r1	; 0x11
    c040:	12 8a       	std	Z+18, r1	; 0x12
    c042:	13 8a       	std	Z+19, r1	; 0x13
    c044:	c1 14       	cp	r12, r1
    c046:	d1 04       	cpc	r13, r1
    c048:	e1 04       	cpc	r14, r1
    c04a:	f1 04       	cpc	r15, r1
    c04c:	09 f4       	brne	.+2      	; 0xc050 <f_lseek+0x2d2>
    c04e:	48 c1       	rjmp	.+656    	; 0xc2e0 <f_lseek+0x562>
    c050:	e9 81       	ldd	r30, Y+1	; 0x01
    c052:	fa 81       	ldd	r31, Y+2	; 0x02
    c054:	81 84       	ldd	r8, Z+9	; 0x09
    c056:	92 84       	ldd	r9, Z+10	; 0x0a
    c058:	a1 2c       	mov	r10, r1
    c05a:	b1 2c       	mov	r11, r1
    c05c:	39 e0       	ldi	r19, 0x09	; 9
    c05e:	88 0c       	add	r8, r8
    c060:	99 1c       	adc	r9, r9
    c062:	aa 1c       	adc	r10, r10
    c064:	bb 1c       	adc	r11, r11
    c066:	3a 95       	dec	r19
    c068:	d1 f7       	brne	.-12     	; 0xc05e <f_lseek+0x2e0>
    c06a:	41 14       	cp	r4, r1
    c06c:	51 04       	cpc	r5, r1
    c06e:	61 04       	cpc	r6, r1
    c070:	71 04       	cpc	r7, r1
    c072:	d9 f1       	breq	.+118    	; 0xc0ea <f_lseek+0x36c>
    c074:	f1 e0       	ldi	r31, 0x01	; 1
    c076:	4f 1a       	sub	r4, r31
    c078:	51 08       	sbc	r5, r1
    c07a:	61 08       	sbc	r6, r1
    c07c:	71 08       	sbc	r7, r1
    c07e:	c7 01       	movw	r24, r14
    c080:	b6 01       	movw	r22, r12
    c082:	61 50       	subi	r22, 0x01	; 1
    c084:	71 09       	sbc	r23, r1
    c086:	81 09       	sbc	r24, r1
    c088:	91 09       	sbc	r25, r1
    c08a:	a5 01       	movw	r20, r10
    c08c:	94 01       	movw	r18, r8
    c08e:	0e 94 6b e0 	call	0x1c0d6	; 0x1c0d6 <__udivmodsi4>
    c092:	2b 83       	std	Y+3, r18	; 0x03
    c094:	3c 83       	std	Y+4, r19	; 0x04
    c096:	4d 83       	std	Y+5, r20	; 0x05
    c098:	5e 83       	std	Y+6, r21	; 0x06
    c09a:	c3 01       	movw	r24, r6
    c09c:	b2 01       	movw	r22, r4
    c09e:	a5 01       	movw	r20, r10
    c0a0:	94 01       	movw	r18, r8
    c0a2:	0e 94 6b e0 	call	0x1c0d6	; 0x1c0d6 <__udivmodsi4>
    c0a6:	6b 81       	ldd	r22, Y+3	; 0x03
    c0a8:	7c 81       	ldd	r23, Y+4	; 0x04
    c0aa:	8d 81       	ldd	r24, Y+5	; 0x05
    c0ac:	9e 81       	ldd	r25, Y+6	; 0x06
    c0ae:	62 17       	cp	r22, r18
    c0b0:	73 07       	cpc	r23, r19
    c0b2:	84 07       	cpc	r24, r20
    c0b4:	95 07       	cpc	r25, r21
    c0b6:	c8 f0       	brcs	.+50     	; 0xc0ea <f_lseek+0x36c>
    c0b8:	88 27       	eor	r24, r24
    c0ba:	99 27       	eor	r25, r25
    c0bc:	dc 01       	movw	r26, r24
    c0be:	88 19       	sub	r24, r8
    c0c0:	99 09       	sbc	r25, r9
    c0c2:	aa 09       	sbc	r26, r10
    c0c4:	bb 09       	sbc	r27, r11
    c0c6:	48 22       	and	r4, r24
    c0c8:	59 22       	and	r5, r25
    c0ca:	6a 22       	and	r6, r26
    c0cc:	7b 22       	and	r7, r27
    c0ce:	f1 01       	movw	r30, r2
    c0d0:	40 8a       	std	Z+16, r4	; 0x10
    c0d2:	51 8a       	std	Z+17, r5	; 0x11
    c0d4:	62 8a       	std	Z+18, r6	; 0x12
    c0d6:	73 8a       	std	Z+19, r7	; 0x13
    c0d8:	c4 18       	sub	r12, r4
    c0da:	d5 08       	sbc	r13, r5
    c0dc:	e6 08       	sbc	r14, r6
    c0de:	f7 08       	sbc	r15, r7
    c0e0:	44 89       	ldd	r20, Z+20	; 0x14
    c0e2:	55 89       	ldd	r21, Z+21	; 0x15
    c0e4:	66 89       	ldd	r22, Z+22	; 0x16
    c0e6:	77 89       	ldd	r23, Z+23	; 0x17
    c0e8:	29 c0       	rjmp	.+82     	; 0xc13c <f_lseek+0x3be>
    c0ea:	f1 01       	movw	r30, r2
    c0ec:	46 81       	ldd	r20, Z+6	; 0x06
    c0ee:	57 81       	ldd	r21, Z+7	; 0x07
    c0f0:	60 85       	ldd	r22, Z+8	; 0x08
    c0f2:	71 85       	ldd	r23, Z+9	; 0x09
    c0f4:	41 15       	cp	r20, r1
    c0f6:	51 05       	cpc	r21, r1
    c0f8:	61 05       	cpc	r22, r1
    c0fa:	71 05       	cpc	r23, r1
    c0fc:	d1 f4       	brne	.+52     	; 0xc132 <f_lseek+0x3b4>
    c0fe:	40 e0       	ldi	r20, 0x00	; 0
    c100:	50 e0       	ldi	r21, 0x00	; 0
    c102:	ba 01       	movw	r22, r20
    c104:	c1 01       	movw	r24, r2
    c106:	0e 94 09 4f 	call	0x9e12	; 0x9e12 <create_chain>
    c10a:	ab 01       	movw	r20, r22
    c10c:	bc 01       	movw	r22, r24
    c10e:	41 30       	cpi	r20, 0x01	; 1
    c110:	51 05       	cpc	r21, r1
    c112:	61 05       	cpc	r22, r1
    c114:	71 05       	cpc	r23, r1
    c116:	09 f4       	brne	.+2      	; 0xc11a <f_lseek+0x39c>
    c118:	90 ce       	rjmp	.-736    	; 0xbe3a <f_lseek+0xbc>
    c11a:	4f 3f       	cpi	r20, 0xFF	; 255
    c11c:	ff ef       	ldi	r31, 0xFF	; 255
    c11e:	5f 07       	cpc	r21, r31
    c120:	6f 07       	cpc	r22, r31
    c122:	7f 07       	cpc	r23, r31
    c124:	09 f4       	brne	.+2      	; 0xc128 <f_lseek+0x3aa>
    c126:	91 ce       	rjmp	.-734    	; 0xbe4a <f_lseek+0xcc>
    c128:	f1 01       	movw	r30, r2
    c12a:	46 83       	std	Z+6, r20	; 0x06
    c12c:	57 83       	std	Z+7, r21	; 0x07
    c12e:	60 87       	std	Z+8, r22	; 0x08
    c130:	71 87       	std	Z+9, r23	; 0x09
    c132:	f1 01       	movw	r30, r2
    c134:	44 8b       	std	Z+20, r20	; 0x14
    c136:	55 8b       	std	Z+21, r21	; 0x15
    c138:	66 8b       	std	Z+22, r22	; 0x16
    c13a:	77 8b       	std	Z+23, r23	; 0x17
    c13c:	41 15       	cp	r20, r1
    c13e:	51 05       	cpc	r21, r1
    c140:	61 05       	cpc	r22, r1
    c142:	71 05       	cpc	r23, r1
    c144:	09 f0       	breq	.+2      	; 0xc148 <f_lseek+0x3ca>
    c146:	40 c0       	rjmp	.+128    	; 0xc1c8 <f_lseek+0x44a>
    c148:	c1 2c       	mov	r12, r1
    c14a:	d1 2c       	mov	r13, r1
    c14c:	76 01       	movw	r14, r12
    c14e:	79 c0       	rjmp	.+242    	; 0xc242 <f_lseek+0x4c4>
    c150:	c8 18       	sub	r12, r8
    c152:	d9 08       	sbc	r13, r9
    c154:	ea 08       	sbc	r14, r10
    c156:	fb 08       	sbc	r15, r11
    c158:	f1 01       	movw	r30, r2
    c15a:	80 89       	ldd	r24, Z+16	; 0x10
    c15c:	91 89       	ldd	r25, Z+17	; 0x11
    c15e:	a2 89       	ldd	r26, Z+18	; 0x12
    c160:	b3 89       	ldd	r27, Z+19	; 0x13
    c162:	88 0d       	add	r24, r8
    c164:	99 1d       	adc	r25, r9
    c166:	aa 1d       	adc	r26, r10
    c168:	bb 1d       	adc	r27, r11
    c16a:	80 8b       	std	Z+16, r24	; 0x10
    c16c:	91 8b       	std	Z+17, r25	; 0x11
    c16e:	a2 8b       	std	Z+18, r26	; 0x12
    c170:	b3 8b       	std	Z+19, r27	; 0x13
    c172:	86 85       	ldd	r24, Z+14	; 0x0e
    c174:	81 ff       	sbrs	r24, 1
    c176:	2f c0       	rjmp	.+94     	; 0xc1d6 <f_lseek+0x458>
    c178:	c1 01       	movw	r24, r2
    c17a:	0e 94 09 4f 	call	0x9e12	; 0x9e12 <create_chain>
    c17e:	ab 01       	movw	r20, r22
    c180:	bc 01       	movw	r22, r24
    c182:	41 15       	cp	r20, r1
    c184:	51 05       	cpc	r21, r1
    c186:	61 05       	cpc	r22, r1
    c188:	71 05       	cpc	r23, r1
    c18a:	61 f1       	breq	.+88     	; 0xc1e4 <f_lseek+0x466>
    c18c:	4f 3f       	cpi	r20, 0xFF	; 255
    c18e:	bf ef       	ldi	r27, 0xFF	; 255
    c190:	5b 07       	cpc	r21, r27
    c192:	6b 07       	cpc	r22, r27
    c194:	7b 07       	cpc	r23, r27
    c196:	09 f4       	brne	.+2      	; 0xc19a <f_lseek+0x41c>
    c198:	58 ce       	rjmp	.-848    	; 0xbe4a <f_lseek+0xcc>
    c19a:	42 30       	cpi	r20, 0x02	; 2
    c19c:	51 05       	cpc	r21, r1
    c19e:	61 05       	cpc	r22, r1
    c1a0:	71 05       	cpc	r23, r1
    c1a2:	08 f4       	brcc	.+2      	; 0xc1a6 <f_lseek+0x428>
    c1a4:	4a ce       	rjmp	.-876    	; 0xbe3a <f_lseek+0xbc>
    c1a6:	e9 81       	ldd	r30, Y+1	; 0x01
    c1a8:	fa 81       	ldd	r31, Y+2	; 0x02
    c1aa:	81 8d       	ldd	r24, Z+25	; 0x19
    c1ac:	92 8d       	ldd	r25, Z+26	; 0x1a
    c1ae:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c1b0:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c1b2:	48 17       	cp	r20, r24
    c1b4:	59 07       	cpc	r21, r25
    c1b6:	6a 07       	cpc	r22, r26
    c1b8:	7b 07       	cpc	r23, r27
    c1ba:	08 f0       	brcs	.+2      	; 0xc1be <f_lseek+0x440>
    c1bc:	3e ce       	rjmp	.-900    	; 0xbe3a <f_lseek+0xbc>
    c1be:	f1 01       	movw	r30, r2
    c1c0:	44 8b       	std	Z+20, r20	; 0x14
    c1c2:	55 8b       	std	Z+21, r21	; 0x15
    c1c4:	66 8b       	std	Z+22, r22	; 0x16
    c1c6:	77 8b       	std	Z+23, r23	; 0x17
    c1c8:	8c 14       	cp	r8, r12
    c1ca:	9d 04       	cpc	r9, r13
    c1cc:	ae 04       	cpc	r10, r14
    c1ce:	bf 04       	cpc	r11, r15
    c1d0:	08 f4       	brcc	.+2      	; 0xc1d4 <f_lseek+0x456>
    c1d2:	be cf       	rjmp	.-132    	; 0xc150 <f_lseek+0x3d2>
    c1d4:	0a c0       	rjmp	.+20     	; 0xc1ea <f_lseek+0x46c>
    c1d6:	80 81       	ld	r24, Z
    c1d8:	91 81       	ldd	r25, Z+1	; 0x01
    c1da:	0e 94 94 4d 	call	0x9b28	; 0x9b28 <get_fat.isra.10>
    c1de:	ab 01       	movw	r20, r22
    c1e0:	bc 01       	movw	r22, r24
    c1e2:	d4 cf       	rjmp	.-88     	; 0xc18c <f_lseek+0x40e>
    c1e4:	c1 2c       	mov	r12, r1
    c1e6:	d1 2c       	mov	r13, r1
    c1e8:	76 01       	movw	r14, r12
    c1ea:	f1 01       	movw	r30, r2
    c1ec:	80 89       	ldd	r24, Z+16	; 0x10
    c1ee:	91 89       	ldd	r25, Z+17	; 0x11
    c1f0:	a2 89       	ldd	r26, Z+18	; 0x12
    c1f2:	b3 89       	ldd	r27, Z+19	; 0x13
    c1f4:	8c 0d       	add	r24, r12
    c1f6:	9d 1d       	adc	r25, r13
    c1f8:	ae 1d       	adc	r26, r14
    c1fa:	bf 1d       	adc	r27, r15
    c1fc:	80 8b       	std	Z+16, r24	; 0x10
    c1fe:	91 8b       	std	Z+17, r25	; 0x11
    c200:	a2 8b       	std	Z+18, r26	; 0x12
    c202:	b3 8b       	std	Z+19, r27	; 0x13
    c204:	d7 01       	movw	r26, r14
    c206:	c6 01       	movw	r24, r12
    c208:	91 70       	andi	r25, 0x01	; 1
    c20a:	aa 27       	eor	r26, r26
    c20c:	bb 27       	eor	r27, r27
    c20e:	89 2b       	or	r24, r25
    c210:	8a 2b       	or	r24, r26
    c212:	8b 2b       	or	r24, r27
    c214:	09 f4       	brne	.+2      	; 0xc218 <f_lseek+0x49a>
    c216:	98 cf       	rjmp	.-208    	; 0xc148 <f_lseek+0x3ca>
    c218:	89 81       	ldd	r24, Y+1	; 0x01
    c21a:	9a 81       	ldd	r25, Y+2	; 0x02
    c21c:	0e 94 a2 45 	call	0x8b44	; 0x8b44 <clst2sect>
    c220:	61 15       	cp	r22, r1
    c222:	71 05       	cpc	r23, r1
    c224:	81 05       	cpc	r24, r1
    c226:	91 05       	cpc	r25, r1
    c228:	09 f4       	brne	.+2      	; 0xc22c <f_lseek+0x4ae>
    c22a:	07 ce       	rjmp	.-1010   	; 0xbe3a <f_lseek+0xbc>
    c22c:	29 e0       	ldi	r18, 0x09	; 9
    c22e:	f6 94       	lsr	r15
    c230:	e7 94       	ror	r14
    c232:	d7 94       	ror	r13
    c234:	c7 94       	ror	r12
    c236:	2a 95       	dec	r18
    c238:	d1 f7       	brne	.-12     	; 0xc22e <f_lseek+0x4b0>
    c23a:	c6 0e       	add	r12, r22
    c23c:	d7 1e       	adc	r13, r23
    c23e:	e8 1e       	adc	r14, r24
    c240:	f9 1e       	adc	r15, r25
    c242:	f1 01       	movw	r30, r2
    c244:	80 89       	ldd	r24, Z+16	; 0x10
    c246:	91 89       	ldd	r25, Z+17	; 0x11
    c248:	a2 89       	ldd	r26, Z+18	; 0x12
    c24a:	b3 89       	ldd	r27, Z+19	; 0x13
    c24c:	42 85       	ldd	r20, Z+10	; 0x0a
    c24e:	53 85       	ldd	r21, Z+11	; 0x0b
    c250:	64 85       	ldd	r22, Z+12	; 0x0c
    c252:	75 85       	ldd	r23, Z+13	; 0x0d
    c254:	48 17       	cp	r20, r24
    c256:	59 07       	cpc	r21, r25
    c258:	6a 07       	cpc	r22, r26
    c25a:	7b 07       	cpc	r23, r27
    c25c:	38 f4       	brcc	.+14     	; 0xc26c <f_lseek+0x4ee>
    c25e:	82 87       	std	Z+10, r24	; 0x0a
    c260:	93 87       	std	Z+11, r25	; 0x0b
    c262:	a4 87       	std	Z+12, r26	; 0x0c
    c264:	b5 87       	std	Z+13, r27	; 0x0d
    c266:	26 85       	ldd	r18, Z+14	; 0x0e
    c268:	20 64       	ori	r18, 0x40	; 64
    c26a:	26 87       	std	Z+14, r18	; 0x0e
    c26c:	91 70       	andi	r25, 0x01	; 1
    c26e:	aa 27       	eor	r26, r26
    c270:	bb 27       	eor	r27, r27
    c272:	89 2b       	or	r24, r25
    c274:	8a 2b       	or	r24, r26
    c276:	8b 2b       	or	r24, r27
    c278:	79 f1       	breq	.+94     	; 0xc2d8 <f_lseek+0x55a>
    c27a:	f1 01       	movw	r30, r2
    c27c:	20 8d       	ldd	r18, Z+24	; 0x18
    c27e:	31 8d       	ldd	r19, Z+25	; 0x19
    c280:	42 8d       	ldd	r20, Z+26	; 0x1a
    c282:	53 8d       	ldd	r21, Z+27	; 0x1b
    c284:	2c 15       	cp	r18, r12
    c286:	3d 05       	cpc	r19, r13
    c288:	4e 05       	cpc	r20, r14
    c28a:	5f 05       	cpc	r21, r15
    c28c:	29 f1       	breq	.+74     	; 0xc2d8 <f_lseek+0x55a>
    c28e:	86 85       	ldd	r24, Z+14	; 0x0e
    c290:	b1 01       	movw	r22, r2
    c292:	6c 5d       	subi	r22, 0xDC	; 220
    c294:	7f 4f       	sbci	r23, 0xFF	; 255
    c296:	5b 01       	movw	r10, r22
    c298:	87 ff       	sbrs	r24, 7
    c29a:	0d c0       	rjmp	.+26     	; 0xc2b6 <f_lseek+0x538>
    c29c:	e9 81       	ldd	r30, Y+1	; 0x01
    c29e:	fa 81       	ldd	r31, Y+2	; 0x02
    c2a0:	01 e0       	ldi	r16, 0x01	; 1
    c2a2:	10 e0       	ldi	r17, 0x00	; 0
    c2a4:	81 81       	ldd	r24, Z+1	; 0x01
    c2a6:	c9 d6       	rcall	.+3474   	; 0xd03a <disk_write>
    c2a8:	89 2b       	or	r24, r25
    c2aa:	09 f0       	breq	.+2      	; 0xc2ae <f_lseek+0x530>
    c2ac:	ce cd       	rjmp	.-1124   	; 0xbe4a <f_lseek+0xcc>
    c2ae:	f1 01       	movw	r30, r2
    c2b0:	86 85       	ldd	r24, Z+14	; 0x0e
    c2b2:	8f 77       	andi	r24, 0x7F	; 127
    c2b4:	86 87       	std	Z+14, r24	; 0x0e
    c2b6:	e9 81       	ldd	r30, Y+1	; 0x01
    c2b8:	fa 81       	ldd	r31, Y+2	; 0x02
    c2ba:	01 e0       	ldi	r16, 0x01	; 1
    c2bc:	10 e0       	ldi	r17, 0x00	; 0
    c2be:	a7 01       	movw	r20, r14
    c2c0:	96 01       	movw	r18, r12
    c2c2:	b5 01       	movw	r22, r10
    c2c4:	81 81       	ldd	r24, Z+1	; 0x01
    c2c6:	a9 d6       	rcall	.+3410   	; 0xd01a <disk_read>
    c2c8:	89 2b       	or	r24, r25
    c2ca:	09 f0       	breq	.+2      	; 0xc2ce <f_lseek+0x550>
    c2cc:	be cd       	rjmp	.-1156   	; 0xbe4a <f_lseek+0xcc>
    c2ce:	f1 01       	movw	r30, r2
    c2d0:	c0 8e       	std	Z+24, r12	; 0x18
    c2d2:	d1 8e       	std	Z+25, r13	; 0x19
    c2d4:	e2 8e       	std	Z+26, r14	; 0x1a
    c2d6:	f3 8e       	std	Z+27, r15	; 0x1b
    c2d8:	80 e0       	ldi	r24, 0x00	; 0
    c2da:	ba cd       	rjmp	.-1164   	; 0xbe50 <f_lseek+0xd2>
    c2dc:	81 e1       	ldi	r24, 0x11	; 17
    c2de:	b8 cd       	rjmp	.-1168   	; 0xbe50 <f_lseek+0xd2>
    c2e0:	80 e0       	ldi	r24, 0x00	; 0
    c2e2:	90 e0       	ldi	r25, 0x00	; 0
    c2e4:	dc 01       	movw	r26, r24
    c2e6:	c1 2c       	mov	r12, r1
    c2e8:	d1 2c       	mov	r13, r1
    c2ea:	76 01       	movw	r14, r12
    c2ec:	bf cf       	rjmp	.-130    	; 0xc26c <f_lseek+0x4ee>
    c2ee:	2a 96       	adiw	r28, 0x0a	; 10
    c2f0:	e2 e1       	ldi	r30, 0x12	; 18
    c2f2:	0c 94 f4 e0 	jmp	0x1c1e8	; 0x1c1e8 <__epilogue_restores__>

0000c2f6 <f_opendir>:
    c2f6:	a4 e0       	ldi	r26, 0x04	; 4
    c2f8:	b0 e0       	ldi	r27, 0x00	; 0
    c2fa:	e1 e8       	ldi	r30, 0x81	; 129
    c2fc:	f1 e6       	ldi	r31, 0x61	; 97
    c2fe:	0c 94 e2 e0 	jmp	0x1c1c4	; 0x1c1c4 <__prologue_saves__+0x14>
    c302:	7c 83       	std	Y+4, r23	; 0x04
    c304:	6b 83       	std	Y+3, r22	; 0x03
    c306:	00 97       	sbiw	r24, 0x00	; 0
    c308:	09 f4       	brne	.+2      	; 0xc30c <f_opendir+0x16>
    c30a:	48 c0       	rjmp	.+144    	; 0xc39c <f_opendir+0xa6>
    c30c:	8c 01       	movw	r16, r24
    c30e:	40 e0       	ldi	r20, 0x00	; 0
    c310:	be 01       	movw	r22, r28
    c312:	6f 5f       	subi	r22, 0xFF	; 255
    c314:	7f 4f       	sbci	r23, 0xFF	; 255
    c316:	ce 01       	movw	r24, r28
    c318:	03 96       	adiw	r24, 0x03	; 3
    c31a:	0e 94 3f 4a 	call	0x947e	; 0x947e <mount_volume>
    c31e:	7c 01       	movw	r14, r24
    c320:	89 2b       	or	r24, r25
    c322:	b9 f5       	brne	.+110    	; 0xc392 <f_opendir+0x9c>
    c324:	89 81       	ldd	r24, Y+1	; 0x01
    c326:	9a 81       	ldd	r25, Y+2	; 0x02
    c328:	f8 01       	movw	r30, r16
    c32a:	91 83       	std	Z+1, r25	; 0x01
    c32c:	80 83       	st	Z, r24
    c32e:	80 e0       	ldi	r24, 0x00	; 0
    c330:	92 e0       	ldi	r25, 0x02	; 2
    c332:	b7 d5       	rcall	.+2926   	; 0xcea2 <ff_memalloc>
    c334:	6c 01       	movw	r12, r24
    c336:	00 97       	sbiw	r24, 0x00	; 0
    c338:	99 f1       	breq	.+102    	; 0xc3a0 <f_opendir+0xaa>
    c33a:	e9 81       	ldd	r30, Y+1	; 0x01
    c33c:	fa 81       	ldd	r31, Y+2	; 0x02
    c33e:	94 87       	std	Z+12, r25	; 0x0c
    c340:	83 87       	std	Z+11, r24	; 0x0b
    c342:	6b 81       	ldd	r22, Y+3	; 0x03
    c344:	7c 81       	ldd	r23, Y+4	; 0x04
    c346:	c8 01       	movw	r24, r16
    c348:	0e 94 8e 55 	call	0xab1c	; 0xab1c <follow_path>
    c34c:	7c 01       	movw	r14, r24
    c34e:	89 2b       	or	r24, r25
    c350:	b9 f4       	brne	.+46     	; 0xc380 <f_opendir+0x8a>
    c352:	f8 01       	movw	r30, r16
    c354:	87 a1       	ldd	r24, Z+39	; 0x27
    c356:	87 fd       	sbrc	r24, 7
    c358:	28 c0       	rjmp	.+80     	; 0xc3aa <f_opendir+0xb4>
    c35a:	84 81       	ldd	r24, Z+4	; 0x04
    c35c:	84 ff       	sbrs	r24, 4
    c35e:	0d c0       	rjmp	.+26     	; 0xc37a <f_opendir+0x84>
    c360:	62 8d       	ldd	r22, Z+26	; 0x1a
    c362:	73 8d       	ldd	r23, Z+27	; 0x1b
    c364:	e9 81       	ldd	r30, Y+1	; 0x01
    c366:	fa 81       	ldd	r31, Y+2	; 0x02
    c368:	80 81       	ld	r24, Z
    c36a:	0e 94 35 48 	call	0x906a	; 0x906a <ld_clust.isra.4>
    c36e:	f8 01       	movw	r30, r16
    c370:	66 83       	std	Z+6, r22	; 0x06
    c372:	77 83       	std	Z+7, r23	; 0x07
    c374:	80 87       	std	Z+8, r24	; 0x08
    c376:	91 87       	std	Z+9, r25	; 0x09
    c378:	18 c0       	rjmp	.+48     	; 0xc3aa <f_opendir+0xb4>
    c37a:	95 e0       	ldi	r25, 0x05	; 5
    c37c:	e9 2e       	mov	r14, r25
    c37e:	f1 2c       	mov	r15, r1
    c380:	c6 01       	movw	r24, r12
    c382:	92 d5       	rcall	.+2852   	; 0xcea8 <ff_memfree>
    c384:	f4 e0       	ldi	r31, 0x04	; 4
    c386:	ef 16       	cp	r14, r31
    c388:	f1 04       	cpc	r15, r1
    c38a:	f1 f0       	breq	.+60     	; 0xc3c8 <f_opendir+0xd2>
    c38c:	e1 14       	cp	r14, r1
    c38e:	f1 04       	cpc	r15, r1
    c390:	49 f0       	breq	.+18     	; 0xc3a4 <f_opendir+0xae>
    c392:	f8 01       	movw	r30, r16
    c394:	11 82       	std	Z+1, r1	; 0x01
    c396:	10 82       	st	Z, r1
    c398:	c7 01       	movw	r24, r14
    c39a:	1a c0       	rjmp	.+52     	; 0xc3d0 <f_opendir+0xda>
    c39c:	89 e0       	ldi	r24, 0x09	; 9
    c39e:	03 c0       	rjmp	.+6      	; 0xc3a6 <f_opendir+0xb0>
    c3a0:	81 e1       	ldi	r24, 0x11	; 17
    c3a2:	01 c0       	rjmp	.+2      	; 0xc3a6 <f_opendir+0xb0>
    c3a4:	80 e0       	ldi	r24, 0x00	; 0
    c3a6:	90 e0       	ldi	r25, 0x00	; 0
    c3a8:	13 c0       	rjmp	.+38     	; 0xc3d0 <f_opendir+0xda>
    c3aa:	e9 81       	ldd	r30, Y+1	; 0x01
    c3ac:	fa 81       	ldd	r31, Y+2	; 0x02
    c3ae:	85 81       	ldd	r24, Z+5	; 0x05
    c3b0:	96 81       	ldd	r25, Z+6	; 0x06
    c3b2:	f8 01       	movw	r30, r16
    c3b4:	93 83       	std	Z+3, r25	; 0x03
    c3b6:	82 83       	std	Z+2, r24	; 0x02
    c3b8:	40 e0       	ldi	r20, 0x00	; 0
    c3ba:	50 e0       	ldi	r21, 0x00	; 0
    c3bc:	ba 01       	movw	r22, r20
    c3be:	c8 01       	movw	r24, r16
    c3c0:	0e 94 48 4e 	call	0x9c90	; 0x9c90 <dir_sdi>
    c3c4:	7c 01       	movw	r14, r24
    c3c6:	dc cf       	rjmp	.-72     	; 0xc380 <f_opendir+0x8a>
    c3c8:	85 e0       	ldi	r24, 0x05	; 5
    c3ca:	e8 2e       	mov	r14, r24
    c3cc:	f1 2c       	mov	r15, r1
    c3ce:	e1 cf       	rjmp	.-62     	; 0xc392 <f_opendir+0x9c>
    c3d0:	24 96       	adiw	r28, 0x04	; 4
    c3d2:	e8 e0       	ldi	r30, 0x08	; 8
    c3d4:	0c 94 fe e0 	jmp	0x1c1fc	; 0x1c1fc <__epilogue_restores__+0x14>

0000c3d8 <f_closedir>:
    c3d8:	a2 e0       	ldi	r26, 0x02	; 2
    c3da:	b0 e0       	ldi	r27, 0x00	; 0
    c3dc:	e2 ef       	ldi	r30, 0xF2	; 242
    c3de:	f1 e6       	ldi	r31, 0x61	; 97
    c3e0:	0c 94 e6 e0 	jmp	0x1c1cc	; 0x1c1cc <__prologue_saves__+0x1c>
    c3e4:	8c 01       	movw	r16, r24
    c3e6:	be 01       	movw	r22, r28
    c3e8:	6f 5f       	subi	r22, 0xFF	; 255
    c3ea:	7f 4f       	sbci	r23, 0xFF	; 255
    c3ec:	0e 94 41 46 	call	0x8c82	; 0x8c82 <validate>
    c3f0:	00 97       	sbiw	r24, 0x00	; 0
    c3f2:	19 f4       	brne	.+6      	; 0xc3fa <f_closedir+0x22>
    c3f4:	f8 01       	movw	r30, r16
    c3f6:	11 82       	std	Z+1, r1	; 0x01
    c3f8:	10 82       	st	Z, r1
    c3fa:	22 96       	adiw	r28, 0x02	; 2
    c3fc:	e4 e0       	ldi	r30, 0x04	; 4
    c3fe:	0c 94 02 e1 	jmp	0x1c204	; 0x1c204 <__epilogue_restores__+0x1c>

0000c402 <f_readdir>:
    c402:	a2 e0       	ldi	r26, 0x02	; 2
    c404:	b0 e0       	ldi	r27, 0x00	; 0
    c406:	e7 e0       	ldi	r30, 0x07	; 7
    c408:	f2 e6       	ldi	r31, 0x62	; 98
    c40a:	0c 94 e0 e0 	jmp	0x1c1c0	; 0x1c1c0 <__prologue_saves__+0x10>
    c40e:	7c 01       	movw	r14, r24
    c410:	5b 01       	movw	r10, r22
    c412:	be 01       	movw	r22, r28
    c414:	6f 5f       	subi	r22, 0xFF	; 255
    c416:	7f 4f       	sbci	r23, 0xFF	; 255
    c418:	0e 94 41 46 	call	0x8c82	; 0x8c82 <validate>
    c41c:	00 97       	sbiw	r24, 0x00	; 0
    c41e:	89 f5       	brne	.+98     	; 0xc482 <f_readdir+0x80>
    c420:	a1 14       	cp	r10, r1
    c422:	b1 04       	cpc	r11, r1
    c424:	39 f4       	brne	.+14     	; 0xc434 <f_readdir+0x32>
    c426:	40 e0       	ldi	r20, 0x00	; 0
    c428:	50 e0       	ldi	r21, 0x00	; 0
    c42a:	ba 01       	movw	r22, r20
    c42c:	c7 01       	movw	r24, r14
    c42e:	0e 94 48 4e 	call	0x9c90	; 0x9c90 <dir_sdi>
    c432:	27 c0       	rjmp	.+78     	; 0xc482 <f_readdir+0x80>
    c434:	80 e0       	ldi	r24, 0x00	; 0
    c436:	92 e0       	ldi	r25, 0x02	; 2
    c438:	34 d5       	rcall	.+2664   	; 0xcea2 <ff_memalloc>
    c43a:	6c 01       	movw	r12, r24
    c43c:	00 97       	sbiw	r24, 0x00	; 0
    c43e:	f9 f0       	breq	.+62     	; 0xc47e <f_readdir+0x7c>
    c440:	e9 81       	ldd	r30, Y+1	; 0x01
    c442:	fa 81       	ldd	r31, Y+2	; 0x02
    c444:	94 87       	std	Z+12, r25	; 0x0c
    c446:	83 87       	std	Z+11, r24	; 0x0b
    c448:	60 e0       	ldi	r22, 0x00	; 0
    c44a:	70 e0       	ldi	r23, 0x00	; 0
    c44c:	c7 01       	movw	r24, r14
    c44e:	0e 94 e1 51 	call	0xa3c2	; 0xa3c2 <dir_read>
    c452:	8c 01       	movw	r16, r24
    c454:	8b 7f       	andi	r24, 0xFB	; 251
    c456:	89 2b       	or	r24, r25
    c458:	71 f4       	brne	.+28     	; 0xc476 <f_readdir+0x74>
    c45a:	b5 01       	movw	r22, r10
    c45c:	c7 01       	movw	r24, r14
    c45e:	0e 94 25 47 	call	0x8e4a	; 0x8e4a <get_fileinfo>
    c462:	60 e0       	ldi	r22, 0x00	; 0
    c464:	70 e0       	ldi	r23, 0x00	; 0
    c466:	c7 01       	movw	r24, r14
    c468:	0e 94 c0 50 	call	0xa180	; 0xa180 <dir_next>
    c46c:	8c 01       	movw	r16, r24
    c46e:	04 97       	sbiw	r24, 0x04	; 4
    c470:	11 f4       	brne	.+4      	; 0xc476 <f_readdir+0x74>
    c472:	00 e0       	ldi	r16, 0x00	; 0
    c474:	10 e0       	ldi	r17, 0x00	; 0
    c476:	c6 01       	movw	r24, r12
    c478:	17 d5       	rcall	.+2606   	; 0xcea8 <ff_memfree>
    c47a:	c8 01       	movw	r24, r16
    c47c:	02 c0       	rjmp	.+4      	; 0xc482 <f_readdir+0x80>
    c47e:	81 e1       	ldi	r24, 0x11	; 17
    c480:	90 e0       	ldi	r25, 0x00	; 0
    c482:	22 96       	adiw	r28, 0x02	; 2
    c484:	ea e0       	ldi	r30, 0x0A	; 10
    c486:	0c 94 fc e0 	jmp	0x1c1f8	; 0x1c1f8 <__epilogue_restores__+0x10>

0000c48a <f_stat>:
    c48a:	a0 e3       	ldi	r26, 0x30	; 48
    c48c:	b0 e0       	ldi	r27, 0x00	; 0
    c48e:	eb e4       	ldi	r30, 0x4B	; 75
    c490:	f2 e6       	ldi	r31, 0x62	; 98
    c492:	0c 94 e2 e0 	jmp	0x1c1c4	; 0x1c1c4 <__prologue_saves__+0x14>
    c496:	98 ab       	std	Y+48, r25	; 0x30
    c498:	8f a7       	std	Y+47, r24	; 0x2f
    c49a:	6b 01       	movw	r12, r22
    c49c:	40 e0       	ldi	r20, 0x00	; 0
    c49e:	be 01       	movw	r22, r28
    c4a0:	6f 5f       	subi	r22, 0xFF	; 255
    c4a2:	7f 4f       	sbci	r23, 0xFF	; 255
    c4a4:	ce 01       	movw	r24, r28
    c4a6:	8f 96       	adiw	r24, 0x2f	; 47
    c4a8:	0e 94 3f 4a 	call	0x947e	; 0x947e <mount_volume>
    c4ac:	00 97       	sbiw	r24, 0x00	; 0
    c4ae:	39 f5       	brne	.+78     	; 0xc4fe <f_stat+0x74>
    c4b0:	80 e0       	ldi	r24, 0x00	; 0
    c4b2:	92 e0       	ldi	r25, 0x02	; 2
    c4b4:	f6 d4       	rcall	.+2540   	; 0xcea2 <ff_memalloc>
    c4b6:	7c 01       	movw	r14, r24
    c4b8:	00 97       	sbiw	r24, 0x00	; 0
    c4ba:	f9 f0       	breq	.+62     	; 0xc4fa <f_stat+0x70>
    c4bc:	e9 81       	ldd	r30, Y+1	; 0x01
    c4be:	fa 81       	ldd	r31, Y+2	; 0x02
    c4c0:	94 87       	std	Z+12, r25	; 0x0c
    c4c2:	83 87       	std	Z+11, r24	; 0x0b
    c4c4:	6f a5       	ldd	r22, Y+47	; 0x2f
    c4c6:	78 a9       	ldd	r23, Y+48	; 0x30
    c4c8:	ce 01       	movw	r24, r28
    c4ca:	01 96       	adiw	r24, 0x01	; 1
    c4cc:	0e 94 8e 55 	call	0xab1c	; 0xab1c <follow_path>
    c4d0:	8c 01       	movw	r16, r24
    c4d2:	89 2b       	or	r24, r25
    c4d4:	71 f4       	brne	.+28     	; 0xc4f2 <f_stat+0x68>
    c4d6:	88 a5       	ldd	r24, Y+40	; 0x28
    c4d8:	87 fd       	sbrc	r24, 7
    c4da:	09 c0       	rjmp	.+18     	; 0xc4ee <f_stat+0x64>
    c4dc:	c1 14       	cp	r12, r1
    c4de:	d1 04       	cpc	r13, r1
    c4e0:	41 f0       	breq	.+16     	; 0xc4f2 <f_stat+0x68>
    c4e2:	b6 01       	movw	r22, r12
    c4e4:	ce 01       	movw	r24, r28
    c4e6:	01 96       	adiw	r24, 0x01	; 1
    c4e8:	0e 94 25 47 	call	0x8e4a	; 0x8e4a <get_fileinfo>
    c4ec:	02 c0       	rjmp	.+4      	; 0xc4f2 <f_stat+0x68>
    c4ee:	06 e0       	ldi	r16, 0x06	; 6
    c4f0:	10 e0       	ldi	r17, 0x00	; 0
    c4f2:	c7 01       	movw	r24, r14
    c4f4:	d9 d4       	rcall	.+2482   	; 0xcea8 <ff_memfree>
    c4f6:	c8 01       	movw	r24, r16
    c4f8:	02 c0       	rjmp	.+4      	; 0xc4fe <f_stat+0x74>
    c4fa:	81 e1       	ldi	r24, 0x11	; 17
    c4fc:	90 e0       	ldi	r25, 0x00	; 0
    c4fe:	e0 96       	adiw	r28, 0x30	; 48
    c500:	e8 e0       	ldi	r30, 0x08	; 8
    c502:	0c 94 fe e0 	jmp	0x1c1fc	; 0x1c1fc <__epilogue_restores__+0x14>

0000c506 <f_getfree>:
    c506:	aa e0       	ldi	r26, 0x0A	; 10
    c508:	b0 e0       	ldi	r27, 0x00	; 0
    c50a:	e9 e8       	ldi	r30, 0x89	; 137
    c50c:	f2 e6       	ldi	r31, 0x62	; 98
    c50e:	0c 94 d8 e0 	jmp	0x1c1b0	; 0x1c1b0 <__prologue_saves__>
    c512:	9c 83       	std	Y+4, r25	; 0x04
    c514:	8b 83       	std	Y+3, r24	; 0x03
    c516:	7e 83       	std	Y+6, r23	; 0x06
    c518:	6d 83       	std	Y+5, r22	; 0x05
    c51a:	7a 01       	movw	r14, r20
    c51c:	40 e0       	ldi	r20, 0x00	; 0
    c51e:	be 01       	movw	r22, r28
    c520:	6f 5f       	subi	r22, 0xFF	; 255
    c522:	7f 4f       	sbci	r23, 0xFF	; 255
    c524:	ce 01       	movw	r24, r28
    c526:	03 96       	adiw	r24, 0x03	; 3
    c528:	0e 94 3f 4a 	call	0x947e	; 0x947e <mount_volume>
    c52c:	8c 01       	movw	r16, r24
    c52e:	89 2b       	or	r24, r25
    c530:	09 f0       	breq	.+2      	; 0xc534 <f_getfree+0x2e>
    c532:	c4 c0       	rjmp	.+392    	; 0xc6bc <f_getfree+0x1b6>
    c534:	69 80       	ldd	r6, Y+1	; 0x01
    c536:	7a 80       	ldd	r7, Y+2	; 0x02
    c538:	d7 01       	movw	r26, r14
    c53a:	6d 92       	st	X+, r6
    c53c:	7c 92       	st	X, r7
    c53e:	f3 01       	movw	r30, r6
    c540:	81 89       	ldd	r24, Z+17	; 0x11
    c542:	92 89       	ldd	r25, Z+18	; 0x12
    c544:	a3 89       	ldd	r26, Z+19	; 0x13
    c546:	b4 89       	ldd	r27, Z+20	; 0x14
    c548:	81 8c       	ldd	r8, Z+25	; 0x19
    c54a:	92 8c       	ldd	r9, Z+26	; 0x1a
    c54c:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c54e:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c550:	b5 01       	movw	r22, r10
    c552:	a4 01       	movw	r20, r8
    c554:	42 50       	subi	r20, 0x02	; 2
    c556:	51 09       	sbc	r21, r1
    c558:	61 09       	sbc	r22, r1
    c55a:	71 09       	sbc	r23, r1
    c55c:	48 17       	cp	r20, r24
    c55e:	59 07       	cpc	r21, r25
    c560:	6a 07       	cpc	r22, r26
    c562:	7b 07       	cpc	r23, r27
    c564:	38 f0       	brcs	.+14     	; 0xc574 <f_getfree+0x6e>
    c566:	ed 81       	ldd	r30, Y+5	; 0x05
    c568:	fe 81       	ldd	r31, Y+6	; 0x06
    c56a:	80 83       	st	Z, r24
    c56c:	91 83       	std	Z+1, r25	; 0x01
    c56e:	a2 83       	std	Z+2, r26	; 0x02
    c570:	b3 83       	std	Z+3, r27	; 0x03
    c572:	a4 c0       	rjmp	.+328    	; 0xc6bc <f_getfree+0x1b6>
    c574:	80 81       	ld	r24, Z
    c576:	81 30       	cpi	r24, 0x01	; 1
    c578:	a1 f5       	brne	.+104    	; 0xc5e2 <f_getfree+0xdc>
    c57a:	82 e0       	ldi	r24, 0x02	; 2
    c57c:	88 2e       	mov	r8, r24
    c57e:	91 2c       	mov	r9, r1
    c580:	a1 2c       	mov	r10, r1
    c582:	b1 2c       	mov	r11, r1
    c584:	c1 2c       	mov	r12, r1
    c586:	d1 2c       	mov	r13, r1
    c588:	76 01       	movw	r14, r12
    c58a:	b5 01       	movw	r22, r10
    c58c:	a4 01       	movw	r20, r8
    c58e:	c3 01       	movw	r24, r6
    c590:	0e 94 94 4d 	call	0x9b28	; 0x9b28 <get_fat.isra.10>
    c594:	6f 3f       	cpi	r22, 0xFF	; 255
    c596:	bf ef       	ldi	r27, 0xFF	; 255
    c598:	7b 07       	cpc	r23, r27
    c59a:	8b 07       	cpc	r24, r27
    c59c:	9b 07       	cpc	r25, r27
    c59e:	09 f4       	brne	.+2      	; 0xc5a2 <f_getfree+0x9c>
    c5a0:	76 c0       	rjmp	.+236    	; 0xc68e <f_getfree+0x188>
    c5a2:	61 30       	cpi	r22, 0x01	; 1
    c5a4:	71 05       	cpc	r23, r1
    c5a6:	81 05       	cpc	r24, r1
    c5a8:	91 05       	cpc	r25, r1
    c5aa:	09 f4       	brne	.+2      	; 0xc5ae <f_getfree+0xa8>
    c5ac:	73 c0       	rjmp	.+230    	; 0xc694 <f_getfree+0x18e>
    c5ae:	67 2b       	or	r22, r23
    c5b0:	68 2b       	or	r22, r24
    c5b2:	69 2b       	or	r22, r25
    c5b4:	29 f4       	brne	.+10     	; 0xc5c0 <f_getfree+0xba>
    c5b6:	ef ef       	ldi	r30, 0xFF	; 255
    c5b8:	ce 1a       	sub	r12, r30
    c5ba:	de 0a       	sbc	r13, r30
    c5bc:	ee 0a       	sbc	r14, r30
    c5be:	fe 0a       	sbc	r15, r30
    c5c0:	ff ef       	ldi	r31, 0xFF	; 255
    c5c2:	8f 1a       	sub	r8, r31
    c5c4:	9f 0a       	sbc	r9, r31
    c5c6:	af 0a       	sbc	r10, r31
    c5c8:	bf 0a       	sbc	r11, r31
    c5ca:	e9 81       	ldd	r30, Y+1	; 0x01
    c5cc:	fa 81       	ldd	r31, Y+2	; 0x02
    c5ce:	81 8d       	ldd	r24, Z+25	; 0x19
    c5d0:	92 8d       	ldd	r25, Z+26	; 0x1a
    c5d2:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c5d4:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c5d6:	88 16       	cp	r8, r24
    c5d8:	99 06       	cpc	r9, r25
    c5da:	aa 06       	cpc	r10, r26
    c5dc:	bb 06       	cpc	r11, r27
    c5de:	a8 f2       	brcs	.-86     	; 0xc58a <f_getfree+0x84>
    c5e0:	5d c0       	rjmp	.+186    	; 0xc69c <f_getfree+0x196>
    c5e2:	f3 01       	movw	r30, r6
    c5e4:	45 a0       	ldd	r4, Z+37	; 0x25
    c5e6:	56 a0       	ldd	r5, Z+38	; 0x26
    c5e8:	67 a0       	ldd	r6, Z+39	; 0x27
    c5ea:	70 a4       	ldd	r7, Z+40	; 0x28
    c5ec:	21 2c       	mov	r2, r1
    c5ee:	31 2c       	mov	r3, r1
    c5f0:	c1 2c       	mov	r12, r1
    c5f2:	d1 2c       	mov	r13, r1
    c5f4:	76 01       	movw	r14, r12
    c5f6:	21 14       	cp	r2, r1
    c5f8:	31 04       	cpc	r3, r1
    c5fa:	b1 f4       	brne	.+44     	; 0xc628 <f_getfree+0x122>
    c5fc:	d3 01       	movw	r26, r6
    c5fe:	c2 01       	movw	r24, r4
    c600:	01 96       	adiw	r24, 0x01	; 1
    c602:	a1 1d       	adc	r26, r1
    c604:	b1 1d       	adc	r27, r1
    c606:	8f 83       	std	Y+7, r24	; 0x07
    c608:	98 87       	std	Y+8, r25	; 0x08
    c60a:	a9 87       	std	Y+9, r26	; 0x09
    c60c:	ba 87       	std	Y+10, r27	; 0x0a
    c60e:	b3 01       	movw	r22, r6
    c610:	a2 01       	movw	r20, r4
    c612:	89 81       	ldd	r24, Y+1	; 0x01
    c614:	9a 81       	ldd	r25, Y+2	; 0x02
    c616:	0e 94 c4 49 	call	0x9388	; 0x9388 <move_window>
    c61a:	00 97       	sbiw	r24, 0x00	; 0
    c61c:	09 f0       	breq	.+2      	; 0xc620 <f_getfree+0x11a>
    c61e:	3d c0       	rjmp	.+122    	; 0xc69a <f_getfree+0x194>
    c620:	4f 80       	ldd	r4, Y+7	; 0x07
    c622:	58 84       	ldd	r5, Y+8	; 0x08
    c624:	69 84       	ldd	r6, Y+9	; 0x09
    c626:	7a 84       	ldd	r7, Y+10	; 0x0a
    c628:	e9 81       	ldd	r30, Y+1	; 0x01
    c62a:	fa 81       	ldd	r31, Y+2	; 0x02
    c62c:	80 81       	ld	r24, Z
    c62e:	82 30       	cpi	r24, 0x02	; 2
    c630:	79 f4       	brne	.+30     	; 0xc650 <f_getfree+0x14a>
    c632:	e2 0d       	add	r30, r2
    c634:	f3 1d       	adc	r31, r3
    c636:	85 a9       	ldd	r24, Z+53	; 0x35
    c638:	96 a9       	ldd	r25, Z+54	; 0x36
    c63a:	89 2b       	or	r24, r25
    c63c:	29 f4       	brne	.+10     	; 0xc648 <f_getfree+0x142>
    c63e:	9f ef       	ldi	r25, 0xFF	; 255
    c640:	c9 1a       	sub	r12, r25
    c642:	d9 0a       	sbc	r13, r25
    c644:	e9 0a       	sbc	r14, r25
    c646:	f9 0a       	sbc	r15, r25
    c648:	a2 e0       	ldi	r26, 0x02	; 2
    c64a:	2a 0e       	add	r2, r26
    c64c:	31 1c       	adc	r3, r1
    c64e:	15 c0       	rjmp	.+42     	; 0xc67a <f_getfree+0x174>
    c650:	cf 01       	movw	r24, r30
    c652:	c5 96       	adiw	r24, 0x35	; 53
    c654:	82 0d       	add	r24, r2
    c656:	93 1d       	adc	r25, r3
    c658:	0e 94 e9 44 	call	0x89d2	; 0x89d2 <ld_dword>
    c65c:	dc 01       	movw	r26, r24
    c65e:	cb 01       	movw	r24, r22
    c660:	bf 70       	andi	r27, 0x0F	; 15
    c662:	89 2b       	or	r24, r25
    c664:	8a 2b       	or	r24, r26
    c666:	8b 2b       	or	r24, r27
    c668:	29 f4       	brne	.+10     	; 0xc674 <f_getfree+0x16e>
    c66a:	bf ef       	ldi	r27, 0xFF	; 255
    c66c:	cb 1a       	sub	r12, r27
    c66e:	db 0a       	sbc	r13, r27
    c670:	eb 0a       	sbc	r14, r27
    c672:	fb 0a       	sbc	r15, r27
    c674:	e4 e0       	ldi	r30, 0x04	; 4
    c676:	2e 0e       	add	r2, r30
    c678:	31 1c       	adc	r3, r1
    c67a:	f1 e0       	ldi	r31, 0x01	; 1
    c67c:	3f 22       	and	r3, r31
    c67e:	21 e0       	ldi	r18, 0x01	; 1
    c680:	82 1a       	sub	r8, r18
    c682:	91 08       	sbc	r9, r1
    c684:	a1 08       	sbc	r10, r1
    c686:	b1 08       	sbc	r11, r1
    c688:	09 f0       	breq	.+2      	; 0xc68c <f_getfree+0x186>
    c68a:	b5 cf       	rjmp	.-150    	; 0xc5f6 <f_getfree+0xf0>
    c68c:	07 c0       	rjmp	.+14     	; 0xc69c <f_getfree+0x196>
    c68e:	01 e0       	ldi	r16, 0x01	; 1
    c690:	10 e0       	ldi	r17, 0x00	; 0
    c692:	04 c0       	rjmp	.+8      	; 0xc69c <f_getfree+0x196>
    c694:	02 e0       	ldi	r16, 0x02	; 2
    c696:	10 e0       	ldi	r17, 0x00	; 0
    c698:	01 c0       	rjmp	.+2      	; 0xc69c <f_getfree+0x196>
    c69a:	8c 01       	movw	r16, r24
    c69c:	ad 81       	ldd	r26, Y+5	; 0x05
    c69e:	be 81       	ldd	r27, Y+6	; 0x06
    c6a0:	cd 92       	st	X+, r12
    c6a2:	dd 92       	st	X+, r13
    c6a4:	ed 92       	st	X+, r14
    c6a6:	fc 92       	st	X, r15
    c6a8:	13 97       	sbiw	r26, 0x03	; 3
    c6aa:	e9 81       	ldd	r30, Y+1	; 0x01
    c6ac:	fa 81       	ldd	r31, Y+2	; 0x02
    c6ae:	c1 8a       	std	Z+17, r12	; 0x11
    c6b0:	d2 8a       	std	Z+18, r13	; 0x12
    c6b2:	e3 8a       	std	Z+19, r14	; 0x13
    c6b4:	f4 8a       	std	Z+20, r15	; 0x14
    c6b6:	84 81       	ldd	r24, Z+4	; 0x04
    c6b8:	81 60       	ori	r24, 0x01	; 1
    c6ba:	84 83       	std	Z+4, r24	; 0x04
    c6bc:	c8 01       	movw	r24, r16
    c6be:	2a 96       	adiw	r28, 0x0a	; 10
    c6c0:	e2 e1       	ldi	r30, 0x12	; 18
    c6c2:	0c 94 f4 e0 	jmp	0x1c1e8	; 0x1c1e8 <__epilogue_restores__>

0000c6c6 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
    c6c6:	a0 e6       	ldi	r26, 0x60	; 96
    c6c8:	b0 e0       	ldi	r27, 0x00	; 0
    c6ca:	e9 e6       	ldi	r30, 0x69	; 105
    c6cc:	f3 e6       	ldi	r31, 0x63	; 99
    c6ce:	0c 94 df e0 	jmp	0x1c1be	; 0x1c1be <__prologue_saves__+0xe>
    c6d2:	a1 96       	adiw	r28, 0x21	; 33
    c6d4:	9f af       	std	Y+63, r25	; 0x3f
    c6d6:	8e af       	std	Y+62, r24	; 0x3e
    c6d8:	a1 97       	sbiw	r28, 0x21	; 33
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
    c6da:	42 e0       	ldi	r20, 0x02	; 2
    c6dc:	be 01       	movw	r22, r28
    c6de:	63 5a       	subi	r22, 0xA3	; 163
    c6e0:	7f 4f       	sbci	r23, 0xFF	; 255
    c6e2:	ce 01       	movw	r24, r28
    c6e4:	81 5a       	subi	r24, 0xA1	; 161
    c6e6:	9f 4f       	sbci	r25, 0xFF	; 255
    c6e8:	0e 94 3f 4a 	call	0x947e	; 0x947e <mount_volume>
	if (res == FR_OK) {
    c6ec:	00 97       	sbiw	r24, 0x00	; 0
    c6ee:	09 f0       	breq	.+2      	; 0xc6f2 <f_unlink+0x2c>
    c6f0:	8c c0       	rjmp	.+280    	; 0xc80a <f_unlink+0x144>
		dj.obj.fs = fs;
    c6f2:	6f 96       	adiw	r28, 0x1f	; 31
    c6f4:	8e ad       	ldd	r24, Y+62	; 0x3e
    c6f6:	9f ad       	ldd	r25, Y+63	; 0x3f
    c6f8:	6f 97       	sbiw	r28, 0x1f	; 31
    c6fa:	98 ab       	std	Y+48, r25	; 0x30
    c6fc:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    c6fe:	80 e0       	ldi	r24, 0x00	; 0
    c700:	92 e0       	ldi	r25, 0x02	; 2
    c702:	cf d3       	rcall	.+1950   	; 0xcea2 <ff_memalloc>
    c704:	5c 01       	movw	r10, r24
    c706:	00 97       	sbiw	r24, 0x00	; 0
    c708:	09 f4       	brne	.+2      	; 0xc70c <f_unlink+0x46>
    c70a:	49 c0       	rjmp	.+146    	; 0xc79e <f_unlink+0xd8>
    c70c:	6f 96       	adiw	r28, 0x1f	; 31
    c70e:	ee ad       	ldd	r30, Y+62	; 0x3e
    c710:	ff ad       	ldd	r31, Y+63	; 0x3f
    c712:	6f 97       	sbiw	r28, 0x1f	; 31
    c714:	94 87       	std	Z+12, r25	; 0x0c
    c716:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);		/* Follow the file path */
    c718:	a1 96       	adiw	r28, 0x21	; 33
    c71a:	6e ad       	ldd	r22, Y+62	; 0x3e
    c71c:	7f ad       	ldd	r23, Y+63	; 0x3f
    c71e:	a1 97       	sbiw	r28, 0x21	; 33
    c720:	ce 01       	movw	r24, r28
    c722:	8f 96       	adiw	r24, 0x2f	; 47
    c724:	0e 94 8e 55 	call	0xab1c	; 0xab1c <follow_path>
    c728:	8c 01       	movw	r16, r24
		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
    c72a:	89 2b       	or	r24, r25
    c72c:	a1 f5       	brne	.+104    	; 0xc796 <f_unlink+0xd0>
    c72e:	67 96       	adiw	r28, 0x17	; 23
    c730:	8f ad       	ldd	r24, Y+63	; 0x3f
    c732:	67 97       	sbiw	r28, 0x17	; 23
    c734:	85 fd       	sbrc	r24, 5
    c736:	36 c0       	rjmp	.+108    	; 0xc7a4 <f_unlink+0xde>
		}
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
    c738:	87 fd       	sbrc	r24, 7
    c73a:	34 c0       	rjmp	.+104    	; 0xc7a4 <f_unlink+0xde>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
			} else {
				if (dj.obj.attr & AM_RDO) {
    c73c:	9b a8       	ldd	r9, Y+51	; 0x33
    c73e:	90 fc       	sbrc	r9, 0
    c740:	40 c0       	rjmp	.+128    	; 0xc7c2 <f_unlink+0xfc>
					init_alloc_info(fs, &obj);
					dclst = obj.sclust;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
    c742:	6f 96       	adiw	r28, 0x1f	; 31
    c744:	0e ad       	ldd	r16, Y+62	; 0x3e
    c746:	1f ad       	ldd	r17, Y+63	; 0x3f
    c748:	6f 97       	sbiw	r28, 0x1f	; 31
    c74a:	2b 96       	adiw	r28, 0x0b	; 11
    c74c:	6e ad       	ldd	r22, Y+62	; 0x3e
    c74e:	7f ad       	ldd	r23, Y+63	; 0x3f
    c750:	2b 97       	sbiw	r28, 0x0b	; 11
    c752:	f8 01       	movw	r30, r16
    c754:	80 81       	ld	r24, Z
    c756:	0e 94 35 48 	call	0x906a	; 0x906a <ld_clust.isra.4>
    c75a:	6b 01       	movw	r12, r22
    c75c:	7c 01       	movw	r14, r24
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
    c75e:	94 fe       	sbrs	r9, 4
    c760:	33 c0       	rjmp	.+102    	; 0xc7c8 <f_unlink+0x102>
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
    c762:	f8 01       	movw	r30, r16
    c764:	85 89       	ldd	r24, Z+21	; 0x15
    c766:	96 89       	ldd	r25, Z+22	; 0x16
    c768:	a7 89       	ldd	r26, Z+23	; 0x17
    c76a:	b0 8d       	ldd	r27, Z+24	; 0x18
    c76c:	c8 16       	cp	r12, r24
    c76e:	d9 06       	cpc	r13, r25
    c770:	ea 06       	cpc	r14, r26
    c772:	fb 06       	cpc	r15, r27
    c774:	31 f1       	breq	.+76     	; 0xc7c2 <f_unlink+0xfc>
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;				/* Open the sub-directory */
    c776:	1a 83       	std	Y+2, r17	; 0x02
    c778:	09 83       	std	Y+1, r16	; 0x01
						sdj.obj.sclust = dclst;
    c77a:	cf 82       	std	Y+7, r12	; 0x07
    c77c:	d8 86       	std	Y+8, r13	; 0x08
    c77e:	e9 86       	std	Y+9, r14	; 0x09
    c780:	fa 86       	std	Y+10, r15	; 0x0a
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
    c782:	40 e0       	ldi	r20, 0x00	; 0
    c784:	50 e0       	ldi	r21, 0x00	; 0
    c786:	ba 01       	movw	r22, r20
    c788:	ce 01       	movw	r24, r28
    c78a:	01 96       	adiw	r24, 0x01	; 1
    c78c:	0e 94 48 4e 	call	0x9c90	; 0x9c90 <dir_sdi>
    c790:	8c 01       	movw	r16, r24
						if (res == FR_OK) {
    c792:	89 2b       	or	r24, r25
    c794:	51 f0       	breq	.+20     	; 0xc7aa <f_unlink+0xe4>
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    c796:	c5 01       	movw	r24, r10
    c798:	87 d3       	rcall	.+1806   	; 0xcea8 <ff_memfree>
    c79a:	c8 01       	movw	r24, r16
    c79c:	36 c0       	rjmp	.+108    	; 0xc80a <f_unlink+0x144>

	/* Get logical drive */
	res = mount_volume(&path, &fs, FA_WRITE);
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    c79e:	81 e1       	ldi	r24, 0x11	; 17
    c7a0:	90 e0       	ldi	r25, 0x00	; 0
    c7a2:	33 c0       	rjmp	.+102    	; 0xc80a <f_unlink+0x144>
#if FF_FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
			if (dj.fn[NSFLAG] & NS_NONAME) {
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
    c7a4:	06 e0       	ldi	r16, 0x06	; 6
    c7a6:	10 e0       	ldi	r17, 0x00	; 0
    c7a8:	f6 cf       	rjmp	.-20     	; 0xc796 <f_unlink+0xd0>
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
						if (res == FR_OK) {
							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
    c7aa:	60 e0       	ldi	r22, 0x00	; 0
    c7ac:	70 e0       	ldi	r23, 0x00	; 0
    c7ae:	ce 01       	movw	r24, r28
    c7b0:	01 96       	adiw	r24, 0x01	; 1
    c7b2:	0e 94 e1 51 	call	0xa3c2	; 0xa3c2 <dir_read>
    c7b6:	8c 01       	movw	r16, r24
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
    c7b8:	00 97       	sbiw	r24, 0x00	; 0
    c7ba:	19 f0       	breq	.+6      	; 0xc7c2 <f_unlink+0xfc>
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
    c7bc:	04 97       	sbiw	r24, 0x04	; 4
    c7be:	21 f0       	breq	.+8      	; 0xc7c8 <f_unlink+0x102>
    c7c0:	ea cf       	rjmp	.-44     	; 0xc796 <f_unlink+0xd0>
					dclst = ld_clust(fs, dj.dir);
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
#if FF_FS_RPATH != 0
					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
						res = FR_DENIED;
    c7c2:	07 e0       	ldi	r16, 0x07	; 7
    c7c4:	10 e0       	ldi	r17, 0x00	; 0
    c7c6:	e7 cf       	rjmp	.-50     	; 0xc796 <f_unlink+0xd0>
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&dj);			/* Remove the directory entry */
    c7c8:	ce 01       	movw	r24, r28
    c7ca:	8f 96       	adiw	r24, 0x2f	; 47
    c7cc:	0e 94 aa 52 	call	0xa554	; 0xa554 <dir_remove>
    c7d0:	8c 01       	movw	r16, r24
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
    c7d2:	89 2b       	or	r24, r25
    c7d4:	01 f7       	brne	.-64     	; 0xc796 <f_unlink+0xd0>
    c7d6:	c1 14       	cp	r12, r1
    c7d8:	d1 04       	cpc	r13, r1
    c7da:	e1 04       	cpc	r14, r1
    c7dc:	f1 04       	cpc	r15, r1
    c7de:	41 f4       	brne	.+16     	; 0xc7f0 <f_unlink+0x12a>
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    c7e0:	6f 96       	adiw	r28, 0x1f	; 31
    c7e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    c7e4:	9f ad       	ldd	r25, Y+63	; 0x3f
    c7e6:	6f 97       	sbiw	r28, 0x1f	; 31
    c7e8:	0e 94 aa 48 	call	0x9154	; 0x9154 <sync_fs>
    c7ec:	8c 01       	movw	r16, r24
    c7ee:	d3 cf       	rjmp	.-90     	; 0xc796 <f_unlink+0xd0>
				res = dir_remove(&dj);			/* Remove the directory entry */
				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
#if FF_FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
    c7f0:	00 e0       	ldi	r16, 0x00	; 0
    c7f2:	10 e0       	ldi	r17, 0x00	; 0
    c7f4:	98 01       	movw	r18, r16
    c7f6:	b7 01       	movw	r22, r14
    c7f8:	a6 01       	movw	r20, r12
    c7fa:	ce 01       	movw	r24, r28
    c7fc:	8f 96       	adiw	r24, 0x2f	; 47
    c7fe:	0e 94 2f 50 	call	0xa05e	; 0xa05e <remove_chain>
    c802:	8c 01       	movw	r16, r24
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
    c804:	89 2b       	or	r24, r25
    c806:	39 f6       	brne	.-114    	; 0xc796 <f_unlink+0xd0>
    c808:	eb cf       	rjmp	.-42     	; 0xc7e0 <f_unlink+0x11a>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    c80a:	c0 5a       	subi	r28, 0xA0	; 160
    c80c:	df 4f       	sbci	r29, 0xFF	; 255
    c80e:	eb e0       	ldi	r30, 0x0B	; 11
    c810:	0c 94 fb e0 	jmp	0x1c1f6	; 0x1c1f6 <__epilogue_restores__+0xe>

0000c814 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
    c814:	a0 e4       	ldi	r26, 0x40	; 64
    c816:	b0 e0       	ldi	r27, 0x00	; 0
    c818:	e0 e1       	ldi	r30, 0x10	; 16
    c81a:	f4 e6       	ldi	r31, 0x64	; 100
    c81c:	0c 94 da e0 	jmp	0x1c1b4	; 0x1c1b4 <__prologue_saves__+0x4>
    c820:	21 96       	adiw	r28, 0x01	; 1
    c822:	9f af       	std	Y+63, r25	; 0x3f
    c824:	8e af       	std	Y+62, r24	; 0x3e
    c826:	21 97       	sbiw	r28, 0x01	; 1
	FATFS *fs;
	DWORD dcl, pcl, tm;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    c828:	42 e0       	ldi	r20, 0x02	; 2
    c82a:	be 01       	movw	r22, r28
    c82c:	63 5c       	subi	r22, 0xC3	; 195
    c82e:	7f 4f       	sbci	r23, 0xFF	; 255
    c830:	ce 01       	movw	r24, r28
    c832:	cf 96       	adiw	r24, 0x3f	; 63
    c834:	0e 94 3f 4a 	call	0x947e	; 0x947e <mount_volume>
	if (res == FR_OK) {
    c838:	00 97       	sbiw	r24, 0x00	; 0
    c83a:	09 f0       	breq	.+2      	; 0xc83e <f_mkdir+0x2a>
    c83c:	d6 c0       	rjmp	.+428    	; 0xc9ea <f_mkdir+0x1d6>
		dj.obj.fs = fs;
    c83e:	8d ad       	ldd	r24, Y+61	; 0x3d
    c840:	9e ad       	ldd	r25, Y+62	; 0x3e
    c842:	9a 83       	std	Y+2, r25	; 0x02
    c844:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    c846:	80 e0       	ldi	r24, 0x00	; 0
    c848:	92 e0       	ldi	r25, 0x02	; 2
    c84a:	2b d3       	rcall	.+1622   	; 0xcea2 <ff_memalloc>
    c84c:	6c 01       	movw	r12, r24
    c84e:	00 97       	sbiw	r24, 0x00	; 0
    c850:	e9 f0       	breq	.+58     	; 0xc88c <f_mkdir+0x78>
    c852:	ed ad       	ldd	r30, Y+61	; 0x3d
    c854:	fe ad       	ldd	r31, Y+62	; 0x3e
    c856:	94 87       	std	Z+12, r25	; 0x0c
    c858:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);			/* Follow the file path */
    c85a:	21 96       	adiw	r28, 0x01	; 1
    c85c:	6e ad       	ldd	r22, Y+62	; 0x3e
    c85e:	7f ad       	ldd	r23, Y+63	; 0x3f
    c860:	21 97       	sbiw	r28, 0x01	; 1
    c862:	ce 01       	movw	r24, r28
    c864:	01 96       	adiw	r24, 0x01	; 1
    c866:	0e 94 8e 55 	call	0xab1c	; 0xab1c <follow_path>
    c86a:	7c 01       	movw	r14, r24
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    c86c:	89 2b       	or	r24, r25
    c86e:	89 f0       	breq	.+34     	; 0xc892 <f_mkdir+0x7e>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
    c870:	84 e0       	ldi	r24, 0x04	; 4
    c872:	e8 16       	cp	r14, r24
    c874:	f1 04       	cpc	r15, r1
    c876:	31 f4       	brne	.+12     	; 0xc884 <f_mkdir+0x70>
    c878:	88 a5       	ldd	r24, Y+40	; 0x28
    c87a:	85 ff       	sbrs	r24, 5
    c87c:	0e c0       	rjmp	.+28     	; 0xc89a <f_mkdir+0x86>
			res = FR_INVALID_NAME;
    c87e:	26 e0       	ldi	r18, 0x06	; 6
    c880:	e2 2e       	mov	r14, r18
    c882:	f1 2c       	mov	r15, r1
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
			}
		}
		FREE_NAMBUF();
    c884:	c6 01       	movw	r24, r12
    c886:	10 d3       	rcall	.+1568   	; 0xcea8 <ff_memfree>
    c888:	c7 01       	movw	r24, r14
    c88a:	af c0       	rjmp	.+350    	; 0xc9ea <f_mkdir+0x1d6>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    c88c:	81 e1       	ldi	r24, 0x11	; 17
    c88e:	90 e0       	ldi	r25, 0x00	; 0
    c890:	ac c0       	rjmp	.+344    	; 0xc9ea <f_mkdir+0x1d6>
		res = follow_path(&dj, path);			/* Follow the file path */
		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
    c892:	38 e0       	ldi	r19, 0x08	; 8
    c894:	e3 2e       	mov	r14, r19
    c896:	f1 2c       	mov	r15, r1
    c898:	f5 cf       	rjmp	.-22     	; 0xc884 <f_mkdir+0x70>
		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
    c89a:	8d ad       	ldd	r24, Y+61	; 0x3d
    c89c:	9e ad       	ldd	r25, Y+62	; 0x3e
    c89e:	98 ab       	std	Y+48, r25	; 0x30
    c8a0:	8f a7       	std	Y+47, r24	; 0x2f
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
    c8a2:	40 e0       	ldi	r20, 0x00	; 0
    c8a4:	50 e0       	ldi	r21, 0x00	; 0
    c8a6:	ba 01       	movw	r22, r20
    c8a8:	ce 01       	movw	r24, r28
    c8aa:	8f 96       	adiw	r24, 0x2f	; 47
    c8ac:	0e 94 09 4f 	call	0x9e12	; 0x9e12 <create_chain>
    c8b0:	4b 01       	movw	r8, r22
    c8b2:	5c 01       	movw	r10, r24
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    c8b4:	67 2b       	or	r22, r23
    c8b6:	68 2b       	or	r22, r24
    c8b8:	69 2b       	or	r22, r25
    c8ba:	09 f1       	breq	.+66     	; 0xc8fe <f_mkdir+0xea>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    c8bc:	e1 e0       	ldi	r30, 0x01	; 1
    c8be:	8e 16       	cp	r8, r30
    c8c0:	91 04       	cpc	r9, r1
    c8c2:	a1 04       	cpc	r10, r1
    c8c4:	b1 04       	cpc	r11, r1
    c8c6:	61 f0       	breq	.+24     	; 0xc8e0 <f_mkdir+0xcc>
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
    c8c8:	ff ef       	ldi	r31, 0xFF	; 255
    c8ca:	8f 16       	cp	r8, r31
    c8cc:	9f 06       	cpc	r9, r31
    c8ce:	af 06       	cpc	r10, r31
    c8d0:	bf 06       	cpc	r11, r31
    c8d2:	d9 f4       	brne	.+54     	; 0xc90a <f_mkdir+0xf6>
			tm = GET_FATTIME();
    c8d4:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <get_fattime>
    c8d8:	ee 24       	eor	r14, r14
    c8da:	e3 94       	inc	r14
    c8dc:	f1 2c       	mov	r15, r1
    c8de:	05 c0       	rjmp	.+10     	; 0xc8ea <f_mkdir+0xd6>
    c8e0:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <get_fattime>
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
    c8e4:	92 e0       	ldi	r25, 0x02	; 2
    c8e6:	e9 2e       	mov	r14, r25
    c8e8:	f1 2c       	mov	r15, r1
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
				}
			} else {
				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
    c8ea:	00 e0       	ldi	r16, 0x00	; 0
    c8ec:	10 e0       	ldi	r17, 0x00	; 0
    c8ee:	98 01       	movw	r18, r16
    c8f0:	b5 01       	movw	r22, r10
    c8f2:	a4 01       	movw	r20, r8
    c8f4:	ce 01       	movw	r24, r28
    c8f6:	8f 96       	adiw	r24, 0x2f	; 47
    c8f8:	0e 94 2f 50 	call	0xa05e	; 0xa05e <remove_chain>
    c8fc:	c3 cf       	rjmp	.-122    	; 0xc884 <f_mkdir+0x70>
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    c8fe:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <get_fattime>
		}
		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
			sobj.fs = fs;						/* New object id to create a new chain */
			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
			res = FR_OK;
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
    c902:	87 e0       	ldi	r24, 0x07	; 7
    c904:	e8 2e       	mov	r14, r24
    c906:	f1 2c       	mov	r15, r1
    c908:	f0 cf       	rjmp	.-32     	; 0xc8ea <f_mkdir+0xd6>
			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
			tm = GET_FATTIME();
    c90a:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <get_fattime>
    c90e:	2b 01       	movw	r4, r22
    c910:	3c 01       	movw	r6, r24
			if (res == FR_OK) {
				res = dir_clear(fs, dcl);		/* Clean up the new table */
    c912:	b5 01       	movw	r22, r10
    c914:	a4 01       	movw	r20, r8
    c916:	8d ad       	ldd	r24, Y+61	; 0x3d
    c918:	9e ad       	ldd	r25, Y+62	; 0x3e
    c91a:	0e 94 1c 49 	call	0x9238	; 0x9238 <dir_clear>
    c91e:	7c 01       	movw	r14, r24
				if (res == FR_OK) {
    c920:	89 2b       	or	r24, r25
    c922:	19 f7       	brne	.-58     	; 0xc8ea <f_mkdir+0xd6>
					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
    c924:	8d ad       	ldd	r24, Y+61	; 0x3d
    c926:	9e ad       	ldd	r25, Y+62	; 0x3e
    c928:	4b e0       	ldi	r20, 0x0B	; 11
    c92a:	50 e0       	ldi	r21, 0x00	; 0
    c92c:	60 e2       	ldi	r22, 0x20	; 32
    c92e:	70 e0       	ldi	r23, 0x00	; 0
    c930:	c5 96       	adiw	r24, 0x35	; 53
    c932:	0e 94 04 45 	call	0x8a08	; 0x8a08 <mem_set>
						fs->win[DIR_Name] = '.';
    c936:	8d ad       	ldd	r24, Y+61	; 0x3d
    c938:	9e ad       	ldd	r25, Y+62	; 0x3e
    c93a:	1e e2       	ldi	r17, 0x2E	; 46
    c93c:	fc 01       	movw	r30, r24
    c93e:	15 ab       	std	Z+53, r17	; 0x35
						fs->win[DIR_Attr] = AM_DIR;
    c940:	e0 5c       	subi	r30, 0xC0	; 192
    c942:	ff 4f       	sbci	r31, 0xFF	; 255
    c944:	20 e1       	ldi	r18, 0x10	; 16
    c946:	20 83       	st	Z, r18
						st_dword(fs->win + DIR_ModTime, tm);
    c948:	b3 01       	movw	r22, r6
    c94a:	a2 01       	movw	r20, r4
    c94c:	85 5b       	subi	r24, 0xB5	; 181
    c94e:	9f 4f       	sbci	r25, 0xFF	; 255
    c950:	0e 94 fe 44 	call	0x89fc	; 0x89fc <st_dword>
						st_clust(fs, fs->win, dcl);
    c954:	8d ad       	ldd	r24, Y+61	; 0x3d
    c956:	9e ad       	ldd	r25, Y+62	; 0x3e
    c958:	bc 01       	movw	r22, r24
    c95a:	6b 5c       	subi	r22, 0xCB	; 203
    c95c:	7f 4f       	sbci	r23, 0xFF	; 255
    c95e:	a5 01       	movw	r20, r10
    c960:	94 01       	movw	r18, r8
    c962:	0e 94 4a 48 	call	0x9094	; 0x9094 <st_clust.isra.5>
						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
    c966:	8d ad       	ldd	r24, Y+61	; 0x3d
    c968:	9e ad       	ldd	r25, Y+62	; 0x3e
    c96a:	bc 01       	movw	r22, r24
    c96c:	6b 5c       	subi	r22, 0xCB	; 203
    c96e:	7f 4f       	sbci	r23, 0xFF	; 255
    c970:	40 e2       	ldi	r20, 0x20	; 32
    c972:	50 e0       	ldi	r21, 0x00	; 0
    c974:	8b 5a       	subi	r24, 0xAB	; 171
    c976:	9f 4f       	sbci	r25, 0xFF	; 255
    c978:	0e 94 6d 46 	call	0x8cda	; 0x8cda <mem_cpy.part.0>
						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
    c97c:	8d ad       	ldd	r24, Y+61	; 0x3d
    c97e:	9e ad       	ldd	r25, Y+62	; 0x3e
    c980:	fc 01       	movw	r30, r24
    c982:	ea 5a       	subi	r30, 0xAA	; 170
    c984:	ff 4f       	sbci	r31, 0xFF	; 255
    c986:	10 83       	st	Z, r17
						st_clust(fs, fs->win + SZDIRE, pcl);
    c988:	2f 81       	ldd	r18, Y+7	; 0x07
    c98a:	38 85       	ldd	r19, Y+8	; 0x08
    c98c:	49 85       	ldd	r20, Y+9	; 0x09
    c98e:	5a 85       	ldd	r21, Y+10	; 0x0a
    c990:	bc 01       	movw	r22, r24
    c992:	6b 5a       	subi	r22, 0xAB	; 171
    c994:	7f 4f       	sbci	r23, 0xFF	; 255
    c996:	0e 94 4a 48 	call	0x9094	; 0x9094 <st_clust.isra.5>
						fs->wflag = 1;
    c99a:	ed ad       	ldd	r30, Y+61	; 0x3d
    c99c:	fe ad       	ldd	r31, Y+62	; 0x3e
    c99e:	81 e0       	ldi	r24, 0x01	; 1
    c9a0:	83 83       	std	Z+3, r24	; 0x03
					}
					res = dir_register(&dj);	/* Register the object to the parent directoy */
    c9a2:	ce 01       	movw	r24, r28
    c9a4:	01 96       	adiw	r24, 0x01	; 1
    c9a6:	0e 94 00 54 	call	0xa800	; 0xa800 <dir_register>
    c9aa:	7c 01       	movw	r14, r24
				}
			}
			if (res == FR_OK) {
    c9ac:	89 2b       	or	r24, r25
    c9ae:	09 f0       	breq	.+2      	; 0xc9b2 <f_mkdir+0x19e>
    c9b0:	9c cf       	rjmp	.-200    	; 0xc8ea <f_mkdir+0xd6>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
    c9b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    c9b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    c9b6:	b3 01       	movw	r22, r6
    c9b8:	a2 01       	movw	r20, r4
    c9ba:	46 96       	adiw	r24, 0x16	; 22
    c9bc:	0e 94 fe 44 	call	0x89fc	; 0x89fc <st_dword>
					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
    c9c0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    c9c2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    c9c4:	a5 01       	movw	r20, r10
    c9c6:	94 01       	movw	r18, r8
    c9c8:	8d ad       	ldd	r24, Y+61	; 0x3d
    c9ca:	9e ad       	ldd	r25, Y+62	; 0x3e
    c9cc:	0e 94 4a 48 	call	0x9094	; 0x9094 <st_clust.isra.5>
					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
    c9d0:	eb 8d       	ldd	r30, Y+27	; 0x1b
    c9d2:	fc 8d       	ldd	r31, Y+28	; 0x1c
    c9d4:	80 e1       	ldi	r24, 0x10	; 16
    c9d6:	83 87       	std	Z+11, r24	; 0x0b
					fs->wflag = 1;
    c9d8:	8d ad       	ldd	r24, Y+61	; 0x3d
    c9da:	9e ad       	ldd	r25, Y+62	; 0x3e
    c9dc:	21 e0       	ldi	r18, 0x01	; 1
    c9de:	fc 01       	movw	r30, r24
    c9e0:	23 83       	std	Z+3, r18	; 0x03
				}
				if (res == FR_OK) {
					res = sync_fs(fs);
    c9e2:	0e 94 aa 48 	call	0x9154	; 0x9154 <sync_fs>
    c9e6:	7c 01       	movw	r14, r24
    c9e8:	4d cf       	rjmp	.-358    	; 0xc884 <f_mkdir+0x70>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    c9ea:	c0 5c       	subi	r28, 0xC0	; 192
    c9ec:	df 4f       	sbci	r29, 0xFF	; 255
    c9ee:	e0 e1       	ldi	r30, 0x10	; 16
    c9f0:	0c 94 f6 e0 	jmp	0x1c1ec	; 0x1c1ec <__epilogue_restores__+0x4>

0000c9f4 <f_rename>:

FRESULT f_rename (
	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
	const TCHAR* path_new	/* Pointer to the new name */
)
{
    c9f4:	a2 e8       	ldi	r26, 0x82	; 130
    c9f6:	b0 e0       	ldi	r27, 0x00	; 0
    c9f8:	e0 e0       	ldi	r30, 0x00	; 0
    c9fa:	f5 e6       	ldi	r31, 0x65	; 101
    c9fc:	0c 94 e1 e0 	jmp	0x1c1c2	; 0x1c1c2 <__prologue_saves__+0x12>
    ca00:	c1 58       	subi	r28, 0x81	; 129
    ca02:	df 4f       	sbci	r29, 0xFF	; 255
    ca04:	99 83       	std	Y+1, r25	; 0x01
    ca06:	88 83       	st	Y, r24
    ca08:	cf 57       	subi	r28, 0x7F	; 127
    ca0a:	d0 40       	sbci	r29, 0x00	; 0
    ca0c:	cf 57       	subi	r28, 0x7F	; 127
    ca0e:	df 4f       	sbci	r29, 0xFF	; 255
    ca10:	79 83       	std	Y+1, r23	; 0x01
    ca12:	68 83       	st	Y, r22
    ca14:	c1 58       	subi	r28, 0x81	; 129
    ca16:	d0 40       	sbci	r29, 0x00	; 0
	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
	LBA_t sect;
	DEF_NAMBUF


	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
    ca18:	ce 01       	movw	r24, r28
    ca1a:	8f 57       	subi	r24, 0x7F	; 127
    ca1c:	9f 4f       	sbci	r25, 0xFF	; 255
    ca1e:	0e 94 15 46 	call	0x8c2a	; 0x8c2a <get_ldnumber>
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
    ca22:	42 e0       	ldi	r20, 0x02	; 2
    ca24:	be 01       	movw	r22, r28
    ca26:	63 58       	subi	r22, 0x83	; 131
    ca28:	7f 4f       	sbci	r23, 0xFF	; 255
    ca2a:	ce 01       	movw	r24, r28
    ca2c:	81 58       	subi	r24, 0x81	; 129
    ca2e:	9f 4f       	sbci	r25, 0xFF	; 255
    ca30:	0e 94 3f 4a 	call	0x947e	; 0x947e <mount_volume>
	if (res == FR_OK) {
    ca34:	00 97       	sbiw	r24, 0x00	; 0
    ca36:	09 f0       	breq	.+2      	; 0xca3a <f_rename+0x46>
    ca38:	ed c0       	rjmp	.+474    	; 0xcc14 <f_rename+0x220>
		djo.obj.fs = fs;
    ca3a:	ef 96       	adiw	r28, 0x3f	; 63
    ca3c:	8e ad       	ldd	r24, Y+62	; 0x3e
    ca3e:	9f ad       	ldd	r25, Y+63	; 0x3f
    ca40:	ef 97       	sbiw	r28, 0x3f	; 63
    ca42:	98 ab       	std	Y+48, r25	; 0x30
    ca44:	8f a7       	std	Y+47, r24	; 0x2f
		INIT_NAMBUF(fs);
    ca46:	80 e0       	ldi	r24, 0x00	; 0
    ca48:	92 e0       	ldi	r25, 0x02	; 2
    ca4a:	2b d2       	rcall	.+1110   	; 0xcea2 <ff_memalloc>
    ca4c:	6c 01       	movw	r12, r24
    ca4e:	00 97       	sbiw	r24, 0x00	; 0
    ca50:	f1 f0       	breq	.+60     	; 0xca8e <f_rename+0x9a>
    ca52:	ef 96       	adiw	r28, 0x3f	; 63
    ca54:	ee ad       	ldd	r30, Y+62	; 0x3e
    ca56:	ff ad       	ldd	r31, Y+63	; 0x3f
    ca58:	ef 97       	sbiw	r28, 0x3f	; 63
    ca5a:	94 87       	std	Z+12, r25	; 0x0c
    ca5c:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&djo, path_old);		/* Check old object */
    ca5e:	c1 58       	subi	r28, 0x81	; 129
    ca60:	df 4f       	sbci	r29, 0xFF	; 255
    ca62:	68 81       	ld	r22, Y
    ca64:	79 81       	ldd	r23, Y+1	; 0x01
    ca66:	cf 57       	subi	r28, 0x7F	; 127
    ca68:	d0 40       	sbci	r29, 0x00	; 0
    ca6a:	ce 01       	movw	r24, r28
    ca6c:	8f 96       	adiw	r24, 0x2f	; 47
    ca6e:	0e 94 8e 55 	call	0xab1c	; 0xab1c <follow_path>
    ca72:	8c 01       	movw	r16, r24
		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check validity of name */
    ca74:	89 2b       	or	r24, r25
    ca76:	39 f4       	brne	.+14     	; 0xca86 <f_rename+0x92>
    ca78:	67 96       	adiw	r28, 0x17	; 23
    ca7a:	8f ad       	ldd	r24, Y+63	; 0x3f
    ca7c:	67 97       	sbiw	r28, 0x17	; 23
    ca7e:	80 7a       	andi	r24, 0xA0	; 160
    ca80:	49 f0       	breq	.+18     	; 0xca94 <f_rename+0xa0>
    ca82:	06 e0       	ldi	r16, 0x06	; 6
    ca84:	10 e0       	ldi	r17, 0x00	; 0
					res = sync_fs(fs);
				}
			}
/* End of the critical section */
		}
		FREE_NAMBUF();
    ca86:	c6 01       	movw	r24, r12
    ca88:	0f d2       	rcall	.+1054   	; 0xcea8 <ff_memfree>
    ca8a:	c8 01       	movw	r24, r16
    ca8c:	c3 c0       	rjmp	.+390    	; 0xcc14 <f_rename+0x220>

	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
	if (res == FR_OK) {
		djo.obj.fs = fs;
		INIT_NAMBUF(fs);
    ca8e:	81 e1       	ldi	r24, 0x11	; 17
    ca90:	90 e0       	ldi	r25, 0x00	; 0
    ca92:	c0 c0       	rjmp	.+384    	; 0xcc14 <f_rename+0x220>
    ca94:	2b 96       	adiw	r28, 0x0b	; 11
    ca96:	6e ad       	ldd	r22, Y+62	; 0x3e
    ca98:	7f ad       	ldd	r23, Y+63	; 0x3f
    ca9a:	2b 97       	sbiw	r28, 0x0b	; 11
    ca9c:	40 e2       	ldi	r20, 0x20	; 32
    ca9e:	50 e0       	ldi	r21, 0x00	; 0
    caa0:	ce 01       	movw	r24, r28
    caa2:	83 5a       	subi	r24, 0xA3	; 163
    caa4:	9f 4f       	sbci	r25, 0xFF	; 255
    caa6:	0e 94 6d 46 	call	0x8cda	; 0x8cda <mem_cpy.part.0>
    caaa:	4e e2       	ldi	r20, 0x2E	; 46
    caac:	50 e0       	ldi	r21, 0x00	; 0
    caae:	be 01       	movw	r22, r28
    cab0:	61 5d       	subi	r22, 0xD1	; 209
    cab2:	7f 4f       	sbci	r23, 0xFF	; 255
    cab4:	ce 01       	movw	r24, r28
    cab6:	01 96       	adiw	r24, 0x01	; 1
    cab8:	0e 94 6d 46 	call	0x8cda	; 0x8cda <mem_cpy.part.0>
			} else
#endif
			{	/* At FAT/FAT32 volume */
				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
    cabc:	cf 57       	subi	r28, 0x7F	; 127
    cabe:	df 4f       	sbci	r29, 0xFF	; 255
    cac0:	68 81       	ld	r22, Y
    cac2:	79 81       	ldd	r23, Y+1	; 0x01
    cac4:	c1 58       	subi	r28, 0x81	; 129
    cac6:	d0 40       	sbci	r29, 0x00	; 0
    cac8:	ce 01       	movw	r24, r28
    caca:	01 96       	adiw	r24, 0x01	; 1
    cacc:	0e 94 8e 55 	call	0xab1c	; 0xab1c <follow_path>
    cad0:	8c 01       	movw	r16, r24
				if (res == FR_OK) {						/* Is new name already in use by any other object? */
    cad2:	89 2b       	or	r24, r25
    cad4:	f9 f4       	brne	.+62     	; 0xcb14 <f_rename+0x120>
					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
    cad6:	4f 81       	ldd	r20, Y+7	; 0x07
    cad8:	58 85       	ldd	r21, Y+8	; 0x08
    cada:	69 85       	ldd	r22, Y+9	; 0x09
    cadc:	7a 85       	ldd	r23, Y+10	; 0x0a
    cade:	8d a9       	ldd	r24, Y+53	; 0x35
    cae0:	9e a9       	ldd	r25, Y+54	; 0x36
    cae2:	af a9       	ldd	r26, Y+55	; 0x37
    cae4:	b8 ad       	ldd	r27, Y+56	; 0x38
    cae6:	48 17       	cp	r20, r24
    cae8:	59 07       	cpc	r21, r25
    caea:	6a 07       	cpc	r22, r26
    caec:	7b 07       	cpc	r23, r27
    caee:	09 f0       	breq	.+2      	; 0xcaf2 <f_rename+0xfe>
    caf0:	8b c0       	rjmp	.+278    	; 0xcc08 <f_rename+0x214>
    caf2:	4f 85       	ldd	r20, Y+15	; 0x0f
    caf4:	58 89       	ldd	r21, Y+16	; 0x10
    caf6:	69 89       	ldd	r22, Y+17	; 0x11
    caf8:	7a 89       	ldd	r23, Y+18	; 0x12
    cafa:	21 96       	adiw	r28, 0x01	; 1
    cafc:	8c ad       	ldd	r24, Y+60	; 0x3c
    cafe:	9d ad       	ldd	r25, Y+61	; 0x3d
    cb00:	ae ad       	ldd	r26, Y+62	; 0x3e
    cb02:	bf ad       	ldd	r27, Y+63	; 0x3f
    cb04:	21 97       	sbiw	r28, 0x01	; 1
    cb06:	48 17       	cp	r20, r24
    cb08:	59 07       	cpc	r21, r25
    cb0a:	6a 07       	cpc	r22, r26
    cb0c:	7b 07       	cpc	r23, r27
    cb0e:	09 f0       	breq	.+2      	; 0xcb12 <f_rename+0x11e>
    cb10:	7b c0       	rjmp	.+246    	; 0xcc08 <f_rename+0x214>
    cb12:	04 c0       	rjmp	.+8      	; 0xcb1c <f_rename+0x128>
				}
				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
    cb14:	04 30       	cpi	r16, 0x04	; 4
    cb16:	11 05       	cpc	r17, r1
    cb18:	09 f0       	breq	.+2      	; 0xcb1c <f_rename+0x128>
    cb1a:	b5 cf       	rjmp	.-150    	; 0xca86 <f_rename+0x92>
					res = dir_register(&djn);			/* Register the new entry */
    cb1c:	ce 01       	movw	r24, r28
    cb1e:	01 96       	adiw	r24, 0x01	; 1
    cb20:	0e 94 00 54 	call	0xa800	; 0xa800 <dir_register>
    cb24:	8c 01       	movw	r16, r24
					if (res == FR_OK) {
    cb26:	89 2b       	or	r24, r25
    cb28:	09 f0       	breq	.+2      	; 0xcb2c <f_rename+0x138>
    cb2a:	ad cf       	rjmp	.-166    	; 0xca86 <f_rename+0x92>
						dir = djn.dir;					/* Copy directory entry of the object except name */
    cb2c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    cb2e:	1c 8d       	ldd	r17, Y+28	; 0x1c
    cb30:	6d e5       	ldi	r22, 0x5D	; 93
    cb32:	70 e0       	ldi	r23, 0x00	; 0
    cb34:	6c 0f       	add	r22, r28
    cb36:	7d 1f       	adc	r23, r29
    cb38:	63 5f       	subi	r22, 0xF3	; 243
    cb3a:	7f 4f       	sbci	r23, 0xFF	; 255
    cb3c:	43 e1       	ldi	r20, 0x13	; 19
    cb3e:	50 e0       	ldi	r21, 0x00	; 0
    cb40:	c8 01       	movw	r24, r16
    cb42:	0d 96       	adiw	r24, 0x0d	; 13
    cb44:	0e 94 6d 46 	call	0x8cda	; 0x8cda <mem_cpy.part.0>
						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
						dir[DIR_Attr] = buf[DIR_Attr];
    cb48:	a9 96       	adiw	r28, 0x29	; 41
    cb4a:	8f ad       	ldd	r24, Y+63	; 0x3f
    cb4c:	a9 97       	sbiw	r28, 0x29	; 41
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
    cb4e:	84 ff       	sbrs	r24, 4
    cb50:	80 62       	ori	r24, 0x20	; 32
    cb52:	f8 01       	movw	r30, r16
    cb54:	83 87       	std	Z+11, r24	; 0x0b
						fs->wflag = 1;
    cb56:	ef 96       	adiw	r28, 0x3f	; 63
    cb58:	ee ac       	ldd	r14, Y+62	; 0x3e
    cb5a:	ff ac       	ldd	r15, Y+63	; 0x3f
    cb5c:	ef 97       	sbiw	r28, 0x3f	; 63
    cb5e:	bb 24       	eor	r11, r11
    cb60:	b3 94       	inc	r11
    cb62:	f7 01       	movw	r30, r14
    cb64:	b3 82       	std	Z+3, r11	; 0x03
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
    cb66:	f8 01       	movw	r30, r16
    cb68:	83 85       	ldd	r24, Z+11	; 0x0b
    cb6a:	84 ff       	sbrs	r24, 4
    cb6c:	3d c0       	rjmp	.+122    	; 0xcbe8 <f_rename+0x1f4>
    cb6e:	4d a9       	ldd	r20, Y+53	; 0x35
    cb70:	5e a9       	ldd	r21, Y+54	; 0x36
    cb72:	6f a9       	ldd	r22, Y+55	; 0x37
    cb74:	78 ad       	ldd	r23, Y+56	; 0x38
    cb76:	8f 81       	ldd	r24, Y+7	; 0x07
    cb78:	98 85       	ldd	r25, Y+8	; 0x08
    cb7a:	a9 85       	ldd	r26, Y+9	; 0x09
    cb7c:	ba 85       	ldd	r27, Y+10	; 0x0a
    cb7e:	48 17       	cp	r20, r24
    cb80:	59 07       	cpc	r21, r25
    cb82:	6a 07       	cpc	r22, r26
    cb84:	7b 07       	cpc	r23, r27
    cb86:	81 f1       	breq	.+96     	; 0xcbe8 <f_rename+0x1f4>
							sect = clst2sect(fs, ld_clust(fs, dir));
    cb88:	b8 01       	movw	r22, r16
    cb8a:	f7 01       	movw	r30, r14
    cb8c:	80 81       	ld	r24, Z
    cb8e:	0e 94 35 48 	call	0x906a	; 0x906a <ld_clust.isra.4>
    cb92:	ab 01       	movw	r20, r22
    cb94:	bc 01       	movw	r22, r24
    cb96:	c7 01       	movw	r24, r14
    cb98:	0e 94 a2 45 	call	0x8b44	; 0x8b44 <clst2sect>
    cb9c:	ab 01       	movw	r20, r22
    cb9e:	bc 01       	movw	r22, r24
							if (sect == 0) {
    cba0:	41 15       	cp	r20, r1
    cba2:	51 05       	cpc	r21, r1
    cba4:	61 05       	cpc	r22, r1
    cba6:	71 05       	cpc	r23, r1
    cba8:	91 f1       	breq	.+100    	; 0xcc0e <f_rename+0x21a>
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
    cbaa:	c7 01       	movw	r24, r14
    cbac:	0e 94 c4 49 	call	0x9388	; 0x9388 <move_window>
    cbb0:	8c 01       	movw	r16, r24
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
								if (res == FR_OK && dir[1] == '.') {
    cbb2:	89 2b       	or	r24, r25
    cbb4:	09 f0       	breq	.+2      	; 0xcbb8 <f_rename+0x1c4>
    cbb6:	67 cf       	rjmp	.-306    	; 0xca86 <f_rename+0x92>
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cbb8:	ef 96       	adiw	r28, 0x3f	; 63
    cbba:	8e ad       	ldd	r24, Y+62	; 0x3e
    cbbc:	9f ad       	ldd	r25, Y+63	; 0x3f
    cbbe:	ef 97       	sbiw	r28, 0x3f	; 63
								if (res == FR_OK && dir[1] == '.') {
    cbc0:	fc 01       	movw	r30, r24
    cbc2:	ea 5a       	subi	r30, 0xAA	; 170
    cbc4:	ff 4f       	sbci	r31, 0xFF	; 255
    cbc6:	20 81       	ld	r18, Z
    cbc8:	2e 32       	cpi	r18, 0x2E	; 46
    cbca:	71 f4       	brne	.+28     	; 0xcbe8 <f_rename+0x1f4>
									st_clust(fs, dir, djn.obj.sclust);
    cbcc:	2f 81       	ldd	r18, Y+7	; 0x07
    cbce:	38 85       	ldd	r19, Y+8	; 0x08
    cbd0:	49 85       	ldd	r20, Y+9	; 0x09
    cbd2:	5a 85       	ldd	r21, Y+10	; 0x0a
							if (sect == 0) {
								res = FR_INT_ERR;
							} else {
/* Start of critical section where an interruption can cause a cross-link */
								res = move_window(fs, sect);
								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
    cbd4:	bc 01       	movw	r22, r24
    cbd6:	6b 5a       	subi	r22, 0xAB	; 171
    cbd8:	7f 4f       	sbci	r23, 0xFF	; 255
								if (res == FR_OK && dir[1] == '.') {
									st_clust(fs, dir, djn.obj.sclust);
    cbda:	0e 94 4a 48 	call	0x9094	; 0x9094 <st_clust.isra.5>
									fs->wflag = 1;
    cbde:	ef 96       	adiw	r28, 0x3f	; 63
    cbe0:	ee ad       	ldd	r30, Y+62	; 0x3e
    cbe2:	ff ad       	ldd	r31, Y+63	; 0x3f
    cbe4:	ef 97       	sbiw	r28, 0x3f	; 63
    cbe6:	b3 82       	std	Z+3, r11	; 0x03
						}
					}
				}
			}
			if (res == FR_OK) {
				res = dir_remove(&djo);		/* Remove old entry */
    cbe8:	ce 01       	movw	r24, r28
    cbea:	8f 96       	adiw	r24, 0x2f	; 47
    cbec:	0e 94 aa 52 	call	0xa554	; 0xa554 <dir_remove>
    cbf0:	8c 01       	movw	r16, r24
				if (res == FR_OK) {
    cbf2:	89 2b       	or	r24, r25
    cbf4:	09 f0       	breq	.+2      	; 0xcbf8 <f_rename+0x204>
    cbf6:	47 cf       	rjmp	.-370    	; 0xca86 <f_rename+0x92>
					res = sync_fs(fs);
    cbf8:	ef 96       	adiw	r28, 0x3f	; 63
    cbfa:	8e ad       	ldd	r24, Y+62	; 0x3e
    cbfc:	9f ad       	ldd	r25, Y+63	; 0x3f
    cbfe:	ef 97       	sbiw	r28, 0x3f	; 63
    cc00:	0e 94 aa 48 	call	0x9154	; 0x9154 <sync_fs>
    cc04:	8c 01       	movw	r16, r24
    cc06:	3f cf       	rjmp	.-386    	; 0xca86 <f_rename+0x92>
    cc08:	08 e0       	ldi	r16, 0x08	; 8
    cc0a:	10 e0       	ldi	r17, 0x00	; 0
    cc0c:	3c cf       	rjmp	.-392    	; 0xca86 <f_rename+0x92>
						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a file */
						fs->wflag = 1;
						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the sub-directory if needed */
							sect = clst2sect(fs, ld_clust(fs, dir));
							if (sect == 0) {
								res = FR_INT_ERR;
    cc0e:	02 e0       	ldi	r16, 0x02	; 2
    cc10:	10 e0       	ldi	r17, 0x00	; 0
    cc12:	39 cf       	rjmp	.-398    	; 0xca86 <f_rename+0x92>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cc14:	ce 57       	subi	r28, 0x7E	; 126
    cc16:	df 4f       	sbci	r29, 0xFF	; 255
    cc18:	e9 e0       	ldi	r30, 0x09	; 9
    cc1a:	0c 94 fd e0 	jmp	0x1c1fa	; 0x1c1fa <__epilogue_restores__+0x12>

0000cc1e <f_chmod>:
FRESULT f_chmod (
	const TCHAR* path,	/* Pointer to the file path */
	BYTE attr,			/* Attribute bits */
	BYTE mask			/* Attribute mask to change */
)
{
    cc1e:	a2 e3       	ldi	r26, 0x32	; 50
    cc20:	b0 e0       	ldi	r27, 0x00	; 0
    cc22:	e5 e1       	ldi	r30, 0x15	; 21
    cc24:	f6 e6       	ldi	r31, 0x66	; 102
    cc26:	0c 94 e2 e0 	jmp	0x1c1c4	; 0x1c1c4 <__prologue_saves__+0x14>
    cc2a:	9a ab       	std	Y+50, r25	; 0x32
    cc2c:	89 ab       	std	Y+49, r24	; 0x31
    cc2e:	e6 2e       	mov	r14, r22
    cc30:	f4 2e       	mov	r15, r20
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    cc32:	42 e0       	ldi	r20, 0x02	; 2
    cc34:	be 01       	movw	r22, r28
    cc36:	61 5d       	subi	r22, 0xD1	; 209
    cc38:	7f 4f       	sbci	r23, 0xFF	; 255
    cc3a:	ce 01       	movw	r24, r28
    cc3c:	c1 96       	adiw	r24, 0x31	; 49
    cc3e:	0e 94 3f 4a 	call	0x947e	; 0x947e <mount_volume>
	if (res == FR_OK) {
    cc42:	00 97       	sbiw	r24, 0x00	; 0
    cc44:	a9 f5       	brne	.+106    	; 0xccb0 <f_chmod+0x92>
		dj.obj.fs = fs;
    cc46:	8f a5       	ldd	r24, Y+47	; 0x2f
    cc48:	98 a9       	ldd	r25, Y+48	; 0x30
    cc4a:	9a 83       	std	Y+2, r25	; 0x02
    cc4c:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cc4e:	80 e0       	ldi	r24, 0x00	; 0
    cc50:	92 e0       	ldi	r25, 0x02	; 2
    cc52:	27 d1       	rcall	.+590    	; 0xcea2 <ff_memalloc>
    cc54:	6c 01       	movw	r12, r24
    cc56:	00 97       	sbiw	r24, 0x00	; 0
    cc58:	b1 f0       	breq	.+44     	; 0xcc86 <f_chmod+0x68>
    cc5a:	ef a5       	ldd	r30, Y+47	; 0x2f
    cc5c:	f8 a9       	ldd	r31, Y+48	; 0x30
    cc5e:	94 87       	std	Z+12, r25	; 0x0c
    cc60:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    cc62:	69 a9       	ldd	r22, Y+49	; 0x31
    cc64:	7a a9       	ldd	r23, Y+50	; 0x32
    cc66:	ce 01       	movw	r24, r28
    cc68:	01 96       	adiw	r24, 0x01	; 1
    cc6a:	0e 94 8e 55 	call	0xab1c	; 0xab1c <follow_path>
    cc6e:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    cc70:	89 2b       	or	r24, r25
    cc72:	29 f4       	brne	.+10     	; 0xcc7e <f_chmod+0x60>
    cc74:	88 a5       	ldd	r24, Y+40	; 0x28
    cc76:	80 7a       	andi	r24, 0xA0	; 160
    cc78:	49 f0       	breq	.+18     	; 0xcc8c <f_chmod+0x6e>
    cc7a:	06 e0       	ldi	r16, 0x06	; 6
    cc7c:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cc7e:	c6 01       	movw	r24, r12
    cc80:	13 d1       	rcall	.+550    	; 0xcea8 <ff_memfree>
    cc82:	c8 01       	movw	r24, r16
    cc84:	15 c0       	rjmp	.+42     	; 0xccb0 <f_chmod+0x92>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cc86:	81 e1       	ldi	r24, 0x11	; 17
    cc88:	90 e0       	ldi	r25, 0x00	; 0
    cc8a:	12 c0       	rjmp	.+36     	; 0xccb0 <f_chmod+0x92>
				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
				res = store_xdir(&dj);
			} else
#endif
			{
				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
    cc8c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cc8e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cc90:	83 85       	ldd	r24, Z+11	; 0x0b
    cc92:	6e 2d       	mov	r22, r14
    cc94:	68 27       	eor	r22, r24
    cc96:	6f 21       	and	r22, r15
    cc98:	67 72       	andi	r22, 0x27	; 39
    cc9a:	68 27       	eor	r22, r24
    cc9c:	63 87       	std	Z+11, r22	; 0x0b
				fs->wflag = 1;
    cc9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    cca0:	98 a9       	ldd	r25, Y+48	; 0x30
    cca2:	21 e0       	ldi	r18, 0x01	; 1
    cca4:	fc 01       	movw	r30, r24
    cca6:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    cca8:	0e 94 aa 48 	call	0x9154	; 0x9154 <sync_fs>
    ccac:	8c 01       	movw	r16, r24
    ccae:	e7 cf       	rjmp	.-50     	; 0xcc7e <f_chmod+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    ccb0:	e2 96       	adiw	r28, 0x32	; 50
    ccb2:	e8 e0       	ldi	r30, 0x08	; 8
    ccb4:	0c 94 fe e0 	jmp	0x1c1fc	; 0x1c1fc <__epilogue_restores__+0x14>

0000ccb8 <f_utime>:

FRESULT f_utime (
	const TCHAR* path,	/* Pointer to the file/directory name */
	const FILINFO* fno	/* Pointer to the timestamp to be set */
)
{
    ccb8:	a2 e3       	ldi	r26, 0x32	; 50
    ccba:	b0 e0       	ldi	r27, 0x00	; 0
    ccbc:	e2 e6       	ldi	r30, 0x62	; 98
    ccbe:	f6 e6       	ldi	r31, 0x66	; 102
    ccc0:	0c 94 e2 e0 	jmp	0x1c1c4	; 0x1c1c4 <__prologue_saves__+0x14>
    ccc4:	9a ab       	std	Y+50, r25	; 0x32
    ccc6:	89 ab       	std	Y+49, r24	; 0x31
    ccc8:	6b 01       	movw	r12, r22
	DIR dj;
	FATFS *fs;
	DEF_NAMBUF


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
    ccca:	42 e0       	ldi	r20, 0x02	; 2
    cccc:	be 01       	movw	r22, r28
    ccce:	61 5d       	subi	r22, 0xD1	; 209
    ccd0:	7f 4f       	sbci	r23, 0xFF	; 255
    ccd2:	ce 01       	movw	r24, r28
    ccd4:	c1 96       	adiw	r24, 0x31	; 49
    ccd6:	0e 94 3f 4a 	call	0x947e	; 0x947e <mount_volume>
	if (res == FR_OK) {
    ccda:	00 97       	sbiw	r24, 0x00	; 0
    ccdc:	09 f0       	breq	.+2      	; 0xcce0 <f_utime+0x28>
    ccde:	41 c0       	rjmp	.+130    	; 0xcd62 <f_utime+0xaa>
		dj.obj.fs = fs;
    cce0:	8f a5       	ldd	r24, Y+47	; 0x2f
    cce2:	98 a9       	ldd	r25, Y+48	; 0x30
    cce4:	9a 83       	std	Y+2, r25	; 0x02
    cce6:	89 83       	std	Y+1, r24	; 0x01
		INIT_NAMBUF(fs);
    cce8:	80 e0       	ldi	r24, 0x00	; 0
    ccea:	92 e0       	ldi	r25, 0x02	; 2
    ccec:	da d0       	rcall	.+436    	; 0xcea2 <ff_memalloc>
    ccee:	7c 01       	movw	r14, r24
    ccf0:	00 97       	sbiw	r24, 0x00	; 0
    ccf2:	b1 f0       	breq	.+44     	; 0xcd20 <f_utime+0x68>
    ccf4:	ef a5       	ldd	r30, Y+47	; 0x2f
    ccf6:	f8 a9       	ldd	r31, Y+48	; 0x30
    ccf8:	94 87       	std	Z+12, r25	; 0x0c
    ccfa:	83 87       	std	Z+11, r24	; 0x0b
		res = follow_path(&dj, path);	/* Follow the file path */
    ccfc:	69 a9       	ldd	r22, Y+49	; 0x31
    ccfe:	7a a9       	ldd	r23, Y+50	; 0x32
    cd00:	ce 01       	movw	r24, r28
    cd02:	01 96       	adiw	r24, 0x01	; 1
    cd04:	0e 94 8e 55 	call	0xab1c	; 0xab1c <follow_path>
    cd08:	8c 01       	movw	r16, r24
		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check object validity */
    cd0a:	89 2b       	or	r24, r25
    cd0c:	29 f4       	brne	.+10     	; 0xcd18 <f_utime+0x60>
    cd0e:	88 a5       	ldd	r24, Y+40	; 0x28
    cd10:	80 7a       	andi	r24, 0xA0	; 160
    cd12:	49 f0       	breq	.+18     	; 0xcd26 <f_utime+0x6e>
    cd14:	06 e0       	ldi	r16, 0x06	; 6
    cd16:	10 e0       	ldi	r17, 0x00	; 0
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
			}
		}
		FREE_NAMBUF();
    cd18:	c7 01       	movw	r24, r14
    cd1a:	c6 d0       	rcall	.+396    	; 0xcea8 <ff_memfree>
    cd1c:	c8 01       	movw	r24, r16
    cd1e:	21 c0       	rjmp	.+66     	; 0xcd62 <f_utime+0xaa>


	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
	if (res == FR_OK) {
		dj.obj.fs = fs;
		INIT_NAMBUF(fs);
    cd20:	81 e1       	ldi	r24, 0x11	; 17
    cd22:	90 e0       	ldi	r25, 0x00	; 0
    cd24:	1e c0       	rjmp	.+60     	; 0xcd62 <f_utime+0xaa>
				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
				res = store_xdir(&dj);
			} else
#endif
			{
				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
    cd26:	f6 01       	movw	r30, r12
    cd28:	44 81       	ldd	r20, Z+4	; 0x04
    cd2a:	55 81       	ldd	r21, Z+5	; 0x05
    cd2c:	60 e0       	ldi	r22, 0x00	; 0
    cd2e:	70 e0       	ldi	r23, 0x00	; 0
    cd30:	ba 01       	movw	r22, r20
    cd32:	55 27       	eor	r21, r21
    cd34:	44 27       	eor	r20, r20
    cd36:	86 81       	ldd	r24, Z+6	; 0x06
    cd38:	97 81       	ldd	r25, Z+7	; 0x07
    cd3a:	a0 e0       	ldi	r26, 0x00	; 0
    cd3c:	b0 e0       	ldi	r27, 0x00	; 0
    cd3e:	48 2b       	or	r20, r24
    cd40:	59 2b       	or	r21, r25
    cd42:	6a 2b       	or	r22, r26
    cd44:	7b 2b       	or	r23, r27
    cd46:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cd48:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cd4a:	46 96       	adiw	r24, 0x16	; 22
    cd4c:	0e 94 fe 44 	call	0x89fc	; 0x89fc <st_dword>
				fs->wflag = 1;
    cd50:	8f a5       	ldd	r24, Y+47	; 0x2f
    cd52:	98 a9       	ldd	r25, Y+48	; 0x30
    cd54:	21 e0       	ldi	r18, 0x01	; 1
    cd56:	fc 01       	movw	r30, r24
    cd58:	23 83       	std	Z+3, r18	; 0x03
			}
			if (res == FR_OK) {
				res = sync_fs(fs);
    cd5a:	0e 94 aa 48 	call	0x9154	; 0x9154 <sync_fs>
    cd5e:	8c 01       	movw	r16, r24
    cd60:	db cf       	rjmp	.-74     	; 0xcd18 <f_utime+0x60>
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
}
    cd62:	e2 96       	adiw	r28, 0x32	; 50
    cd64:	e8 e0       	ldi	r30, 0x08	; 8
    cd66:	0c 94 fe e0 	jmp	0x1c1fc	; 0x1c1fc <__epilogue_restores__+0x14>

0000cd6a <f_getlabel>:
FRESULT f_getlabel (
	const TCHAR* path,	/* Logical drive number */
	TCHAR* label,		/* Buffer to store the volume label */
	DWORD* vsn			/* Variable to store the volume serial number */
)
{
    cd6a:	a2 e3       	ldi	r26, 0x32	; 50
    cd6c:	b0 e0       	ldi	r27, 0x00	; 0
    cd6e:	eb eb       	ldi	r30, 0xBB	; 187
    cd70:	f6 e6       	ldi	r31, 0x66	; 102
    cd72:	0c 94 de e0 	jmp	0x1c1bc	; 0x1c1bc <__prologue_saves__+0xc>
    cd76:	9a ab       	std	Y+50, r25	; 0x32
    cd78:	89 ab       	std	Y+49, r24	; 0x31
    cd7a:	6b 01       	movw	r12, r22
    cd7c:	5a 01       	movw	r10, r20
	FATFS *fs;
	UINT si, di;
	WCHAR wc;

	/* Get logical drive */
	res = mount_volume(&path, &fs, 0);
    cd7e:	40 e0       	ldi	r20, 0x00	; 0
    cd80:	be 01       	movw	r22, r28
    cd82:	61 5d       	subi	r22, 0xD1	; 209
    cd84:	7f 4f       	sbci	r23, 0xFF	; 255
    cd86:	ce 01       	movw	r24, r28
    cd88:	c1 96       	adiw	r24, 0x31	; 49
    cd8a:	0e 94 3f 4a 	call	0x947e	; 0x947e <mount_volume>
    cd8e:	7c 01       	movw	r14, r24

	/* Get volume label */
	if (res == FR_OK && label) {
    cd90:	89 2b       	or	r24, r25
    cd92:	09 f0       	breq	.+2      	; 0xcd96 <f_getlabel+0x2c>
    cd94:	81 c0       	rjmp	.+258    	; 0xce98 <f_getlabel+0x12e>
    cd96:	c1 14       	cp	r12, r1
    cd98:	d1 04       	cpc	r13, r1
    cd9a:	09 f4       	brne	.+2      	; 0xcd9e <f_getlabel+0x34>
    cd9c:	53 c0       	rjmp	.+166    	; 0xce44 <f_getlabel+0xda>
		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
    cd9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    cda0:	98 a9       	ldd	r25, Y+48	; 0x30
    cda2:	9a 83       	std	Y+2, r25	; 0x02
    cda4:	89 83       	std	Y+1, r24	; 0x01
    cda6:	1f 82       	std	Y+7, r1	; 0x07
    cda8:	18 86       	std	Y+8, r1	; 0x08
    cdaa:	19 86       	std	Y+9, r1	; 0x09
    cdac:	1a 86       	std	Y+10, r1	; 0x0a
		res = dir_sdi(&dj, 0);
    cdae:	40 e0       	ldi	r20, 0x00	; 0
    cdb0:	50 e0       	ldi	r21, 0x00	; 0
    cdb2:	ba 01       	movw	r22, r20
    cdb4:	ce 01       	movw	r24, r28
    cdb6:	01 96       	adiw	r24, 0x01	; 1
    cdb8:	0e 94 48 4e 	call	0x9c90	; 0x9c90 <dir_sdi>
		if (res == FR_OK) {
    cdbc:	00 97       	sbiw	r24, 0x00	; 0
    cdbe:	e9 f5       	brne	.+122    	; 0xce3a <f_getlabel+0xd0>
		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
    cdc0:	61 e0       	ldi	r22, 0x01	; 1
    cdc2:	70 e0       	ldi	r23, 0x00	; 0
    cdc4:	ce 01       	movw	r24, r28
    cdc6:	01 96       	adiw	r24, 0x01	; 1
    cdc8:	0e 94 e1 51 	call	0xa3c2	; 0xa3c2 <dir_read>
		 	if (res == FR_OK) {
    cdcc:	00 97       	sbiw	r24, 0x00	; 0
    cdce:	a9 f5       	brne	.+106    	; 0xce3a <f_getlabel+0xd0>
    cdd0:	00 e0       	ldi	r16, 0x00	; 0
    cdd2:	10 e0       	ldi	r17, 0x00	; 0
    cdd4:	80 e0       	ldi	r24, 0x00	; 0
    cdd6:	90 e0       	ldi	r25, 0x00	; 0
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
						wc = dj.dir[si++];
    cdd8:	4c 01       	movw	r8, r24
    cdda:	2f ef       	ldi	r18, 0xFF	; 255
    cddc:	82 1a       	sub	r8, r18
    cdde:	92 0a       	sbc	r9, r18
    cde0:	2b 8d       	ldd	r18, Y+27	; 0x1b
    cde2:	3c 8d       	ldd	r19, Y+28	; 0x1c
    cde4:	f9 01       	movw	r30, r18
    cde6:	e8 0f       	add	r30, r24
    cde8:	f9 1f       	adc	r31, r25
    cdea:	80 81       	ld	r24, Z
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
    cdec:	65 eb       	ldi	r22, 0xB5	; 181
    cdee:	71 e0       	ldi	r23, 0x01	; 1
    cdf0:	90 e0       	ldi	r25, 0x00	; 0
    cdf2:	90 d0       	rcall	.+288    	; 0xcf14 <ff_oem2uni>
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    cdf4:	00 97       	sbiw	r24, 0x00	; 0
    cdf6:	19 f4       	brne	.+6      	; 0xcdfe <f_getlabel+0x94>
						if (wc == 0) { di = 0; break; }
    cdf8:	00 e0       	ldi	r16, 0x00	; 0
    cdfa:	10 e0       	ldi	r17, 0x00	; 0
    cdfc:	13 c0       	rjmp	.+38     	; 0xce24 <f_getlabel+0xba>
					while (si < 11) {
						wc = dj.dir[si++];
#if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
    cdfe:	bc 01       	movw	r22, r24
    ce00:	80 e0       	ldi	r24, 0x00	; 0
    ce02:	90 e0       	ldi	r25, 0x00	; 0
    ce04:	24 e0       	ldi	r18, 0x04	; 4
    ce06:	30 e0       	ldi	r19, 0x00	; 0
    ce08:	a6 01       	movw	r20, r12
    ce0a:	40 0f       	add	r20, r16
    ce0c:	51 1f       	adc	r21, r17
    ce0e:	0e 94 78 46 	call	0x8cf0	; 0x8cf0 <put_utf>
    ce12:	90 e0       	ldi	r25, 0x00	; 0
						if (wc == 0) { di = 0; break; }
    ce14:	00 97       	sbiw	r24, 0x00	; 0
    ce16:	81 f3       	breq	.-32     	; 0xcdf8 <f_getlabel+0x8e>
						di += wc;
    ce18:	08 0f       	add	r16, r24
    ce1a:	19 1f       	adc	r17, r25
    ce1c:	c4 01       	movw	r24, r8
					label[di] = 0;
				} else
#endif
				{
					si = di = 0;		/* Extract volume label from AM_VOL entry */
					while (si < 11) {
    ce1e:	8b 30       	cpi	r24, 0x0B	; 11
    ce20:	91 05       	cpc	r25, r1
    ce22:	d1 f6       	brne	.-76     	; 0xcdd8 <f_getlabel+0x6e>
    ce24:	f6 01       	movw	r30, r12
    ce26:	e0 0f       	add	r30, r16
    ce28:	f1 1f       	adc	r31, r17
#else									/* ANSI/OEM output */
						label[di++] = (TCHAR)wc;
#endif
					}
					do {				/* Truncate trailing spaces */
						label[di] = 0;
    ce2a:	10 82       	st	Z, r1
						if (di == 0) break;
    ce2c:	ce 16       	cp	r12, r30
    ce2e:	df 06       	cpc	r13, r31
    ce30:	49 f0       	breq	.+18     	; 0xce44 <f_getlabel+0xda>
					} while (label[--di] == ' ');
    ce32:	82 91       	ld	r24, -Z
    ce34:	80 32       	cpi	r24, 0x20	; 32
    ce36:	c9 f3       	breq	.-14     	; 0xce2a <f_getlabel+0xc0>
    ce38:	05 c0       	rjmp	.+10     	; 0xce44 <f_getlabel+0xda>
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    ce3a:	84 30       	cpi	r24, 0x04	; 4
    ce3c:	91 05       	cpc	r25, r1
    ce3e:	59 f5       	brne	.+86     	; 0xce96 <f_getlabel+0x12c>
			label[0] = 0;
    ce40:	f6 01       	movw	r30, r12
    ce42:	10 82       	st	Z, r1
			res = FR_OK;
		}
	}

	/* Get volume serial number */
	if (res == FR_OK && vsn) {
    ce44:	a1 14       	cp	r10, r1
    ce46:	b1 04       	cpc	r11, r1
    ce48:	39 f1       	breq	.+78     	; 0xce98 <f_getlabel+0x12e>
		res = move_window(fs, fs->volbase);
    ce4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    ce4c:	98 a9       	ldd	r25, Y+48	; 0x30
    ce4e:	fc 01       	movw	r30, r24
    ce50:	41 a1       	ldd	r20, Z+33	; 0x21
    ce52:	52 a1       	ldd	r21, Z+34	; 0x22
    ce54:	63 a1       	ldd	r22, Z+35	; 0x23
    ce56:	74 a1       	ldd	r23, Z+36	; 0x24
    ce58:	0e 94 c4 49 	call	0x9388	; 0x9388 <move_window>
    ce5c:	7c 01       	movw	r14, r24
		if (res == FR_OK) {
    ce5e:	89 2b       	or	r24, r25
    ce60:	d9 f4       	brne	.+54     	; 0xce98 <f_getlabel+0x12e>
			switch (fs->fs_type) {
    ce62:	ef a5       	ldd	r30, Y+47	; 0x2f
    ce64:	f8 a9       	ldd	r31, Y+48	; 0x30
    ce66:	80 81       	ld	r24, Z
    ce68:	83 30       	cpi	r24, 0x03	; 3
    ce6a:	29 f0       	breq	.+10     	; 0xce76 <f_getlabel+0x10c>
    ce6c:	84 30       	cpi	r24, 0x04	; 4
    ce6e:	31 f0       	breq	.+12     	; 0xce7c <f_getlabel+0x112>

			case FS_FAT32:
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
    ce70:	87 e2       	ldi	r24, 0x27	; 39
    ce72:	90 e0       	ldi	r25, 0x00	; 0
    ce74:	05 c0       	rjmp	.+10     	; 0xce80 <f_getlabel+0x116>
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;

			case FS_FAT32:
				di = BS_VolID32; break;
    ce76:	83 e4       	ldi	r24, 0x43	; 67
    ce78:	90 e0       	ldi	r25, 0x00	; 0
    ce7a:	02 c0       	rjmp	.+4      	; 0xce80 <f_getlabel+0x116>
	if (res == FR_OK && vsn) {
		res = move_window(fs, fs->volbase);
		if (res == FR_OK) {
			switch (fs->fs_type) {
			case FS_EXFAT:
				di = BPB_VolIDEx; break;
    ce7c:	84 e6       	ldi	r24, 0x64	; 100
    ce7e:	90 e0       	ldi	r25, 0x00	; 0
				di = BS_VolID32; break;

			default:
				di = BS_VolID;
			}
			*vsn = ld_dword(fs->win + di);
    ce80:	f5 96       	adiw	r30, 0x35	; 53
    ce82:	8e 0f       	add	r24, r30
    ce84:	9f 1f       	adc	r25, r31
    ce86:	0e 94 e9 44 	call	0x89d2	; 0x89d2 <ld_dword>
    ce8a:	f5 01       	movw	r30, r10
    ce8c:	60 83       	st	Z, r22
    ce8e:	71 83       	std	Z+1, r23	; 0x01
    ce90:	82 83       	std	Z+2, r24	; 0x02
    ce92:	93 83       	std	Z+3, r25	; 0x03
    ce94:	01 c0       	rjmp	.+2      	; 0xce98 <f_getlabel+0x12e>
						if (di == 0) break;
					} while (label[--di] == ' ');
				}
			}
		}
		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
    ce96:	7c 01       	movw	r14, r24
			*vsn = ld_dword(fs->win + di);
		}
	}

	LEAVE_FF(fs, res);
}
    ce98:	c7 01       	movw	r24, r14
    ce9a:	e2 96       	adiw	r28, 0x32	; 50
    ce9c:	ec e0       	ldi	r30, 0x0C	; 12
    ce9e:	0c 94 fa e0 	jmp	0x1c1f4	; 0x1c1f4 <__epilogue_restores__+0xc>

0000cea2 <ff_memalloc>:

void* ff_memalloc (	/* Returns pointer to the allocated memory block (null if not enough core) */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    cea2:	0c 94 1a 25 	jmp	0x4a34	; 0x4a34 <safemalloc>
}
    cea6:	08 95       	ret

0000cea8 <ff_memfree>:

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free (nothing to do if null) */
)
{
	safefree(mblock);	/* Free the memory block with POSIX API */
    cea8:	0c 94 3c 25 	jmp	0x4a78	; 0x4a78 <safefree>
    ceac:	08 95       	ret

0000ceae <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
    ceae:	cf 92       	push	r12
    ceb0:	df 92       	push	r13
    ceb2:	ef 92       	push	r14
    ceb4:	ff 92       	push	r15
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (uni < 0x80) {	/* ASCII? */
    ceb6:	60 38       	cpi	r22, 0x80	; 128
    ceb8:	71 05       	cpc	r23, r1
    ceba:	81 05       	cpc	r24, r1
    cebc:	91 05       	cpc	r25, r1
    cebe:	10 f4       	brcc	.+4      	; 0xcec4 <ff_uni2oem+0x16>
		c = (WCHAR)uni;
    cec0:	cb 01       	movw	r24, r22
    cec2:	23 c0       	rjmp	.+70     	; 0xcf0a <ff_uni2oem+0x5c>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
    cec4:	61 15       	cp	r22, r1
    cec6:	71 05       	cpc	r23, r1
    cec8:	21 e0       	ldi	r18, 0x01	; 1
    ceca:	82 07       	cpc	r24, r18
    cecc:	91 05       	cpc	r25, r1
    cece:	d8 f4       	brcc	.+54     	; 0xcf06 <ff_uni2oem+0x58>
    ced0:	45 3b       	cpi	r20, 0xB5	; 181
    ced2:	51 40       	sbci	r21, 0x01	; 1
    ced4:	c1 f4       	brne	.+48     	; 0xcf06 <ff_uni2oem+0x58>
    ced6:	e6 ea       	ldi	r30, 0xA6	; 166
    ced8:	f7 e0       	ldi	r31, 0x07	; 7
    ceda:	20 e0       	ldi	r18, 0x00	; 0
    cedc:	30 e0       	ldi	r19, 0x00	; 0
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
    cede:	c1 90       	ld	r12, Z+
    cee0:	d1 90       	ld	r13, Z+
    cee2:	e1 2c       	mov	r14, r1
    cee4:	f1 2c       	mov	r15, r1
    cee6:	6c 15       	cp	r22, r12
    cee8:	7d 05       	cpc	r23, r13
    ceea:	8e 05       	cpc	r24, r14
    ceec:	9f 05       	cpc	r25, r15
    ceee:	29 f0       	breq	.+10     	; 0xcefa <ff_uni2oem+0x4c>
    cef0:	2f 5f       	subi	r18, 0xFF	; 255
    cef2:	3f 4f       	sbci	r19, 0xFF	; 255
    cef4:	20 38       	cpi	r18, 0x80	; 128
    cef6:	31 05       	cpc	r19, r1
    cef8:	91 f7       	brne	.-28     	; 0xcede <ff_uni2oem+0x30>
			c = (c + 0x80) & 0xFF;
    cefa:	b9 01       	movw	r22, r18
    cefc:	60 58       	subi	r22, 0x80	; 128
    cefe:	7f 4f       	sbci	r23, 0xFF	; 255
    cf00:	cb 01       	movw	r24, r22
    cf02:	99 27       	eor	r25, r25
    cf04:	02 c0       	rjmp	.+4      	; 0xcf0a <ff_uni2oem+0x5c>
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    cf06:	80 e0       	ldi	r24, 0x00	; 0
    cf08:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    cf0a:	ff 90       	pop	r15
    cf0c:	ef 90       	pop	r14
    cf0e:	df 90       	pop	r13
    cf10:	cf 90       	pop	r12
    cf12:	08 95       	ret

0000cf14 <ff_oem2uni>:
{
	WCHAR c = 0;
	const WCHAR *p = CVTBL(uc, FF_CODE_PAGE);


	if (oem < 0x80) {	/* ASCII? */
    cf14:	80 38       	cpi	r24, 0x80	; 128
    cf16:	91 05       	cpc	r25, r1
    cf18:	88 f0       	brcs	.+34     	; 0xcf3c <ff_oem2uni+0x28>
		c = oem;

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
    cf1a:	65 3b       	cpi	r22, 0xB5	; 181
    cf1c:	71 40       	sbci	r23, 0x01	; 1
    cf1e:	61 f4       	brne	.+24     	; 0xcf38 <ff_oem2uni+0x24>
			if (oem < 0x100) c = p[oem - 0x80];
    cf20:	8f 3f       	cpi	r24, 0xFF	; 255
    cf22:	91 05       	cpc	r25, r1
    cf24:	09 f0       	breq	.+2      	; 0xcf28 <ff_oem2uni+0x14>
    cf26:	40 f4       	brcc	.+16     	; 0xcf38 <ff_oem2uni+0x24>
    cf28:	88 0f       	add	r24, r24
    cf2a:	99 1f       	adc	r25, r25
    cf2c:	fc 01       	movw	r30, r24
    cf2e:	ea 55       	subi	r30, 0x5A	; 90
    cf30:	f9 4f       	sbci	r31, 0xF9	; 249
    cf32:	80 81       	ld	r24, Z
    cf34:	91 81       	ldd	r25, Z+1	; 0x01
    cf36:	08 95       	ret
WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
	WCHAR c = 0;
    cf38:	80 e0       	ldi	r24, 0x00	; 0
    cf3a:	90 e0       	ldi	r25, 0x00	; 0
			if (oem < 0x100) c = p[oem - 0x80];
		}
	}

	return c;
}
    cf3c:	08 95       	ret

0000cf3e <ff_wtoupper>:

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
    cf3e:	61 15       	cp	r22, r1
    cf40:	71 05       	cpc	r23, r1
    cf42:	21 e0       	ldi	r18, 0x01	; 1
    cf44:	82 07       	cpc	r24, r18
    cf46:	91 05       	cpc	r25, r1
    cf48:	08 f0       	brcs	.+2      	; 0xcf4c <ff_wtoupper+0xe>
    cf4a:	5a c0       	rjmp	.+180    	; 0xd000 <ff_wtoupper+0xc2>
		uc = (WORD)uni;
		p = uc < 0x1000 ? cvt1 : cvt2;
    cf4c:	61 15       	cp	r22, r1
    cf4e:	80 e1       	ldi	r24, 0x10	; 16
    cf50:	78 07       	cpc	r23, r24
    cf52:	18 f0       	brcs	.+6      	; 0xcf5a <ff_wtoupper+0x1c>
    cf54:	a8 ef       	ldi	r26, 0xF8	; 248
    cf56:	b4 e0       	ldi	r27, 0x04	; 4
    cf58:	02 c0       	rjmp	.+4      	; 0xcf5e <ff_wtoupper+0x20>
    cf5a:	a4 eb       	ldi	r26, 0xB4	; 180
    cf5c:	b5 e0       	ldi	r27, 0x05	; 5
		for (;;) {
			bc = *p++;								/* Get the block base */
    cf5e:	2d 91       	ld	r18, X+
    cf60:	3c 91       	ld	r19, X
    cf62:	11 97       	sbiw	r26, 0x01	; 1
			if (bc == 0 || uc < bc) break;			/* Not matched? */
    cf64:	21 15       	cp	r18, r1
    cf66:	31 05       	cpc	r19, r1
    cf68:	09 f4       	brne	.+2      	; 0xcf6c <ff_wtoupper+0x2e>
    cf6a:	48 c0       	rjmp	.+144    	; 0xcffc <ff_wtoupper+0xbe>
    cf6c:	62 17       	cp	r22, r18
    cf6e:	73 07       	cpc	r23, r19
    cf70:	08 f4       	brcc	.+2      	; 0xcf74 <ff_wtoupper+0x36>
    cf72:	44 c0       	rjmp	.+136    	; 0xcffc <ff_wtoupper+0xbe>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    cf74:	14 96       	adiw	r26, 0x04	; 4
    cf76:	fd 01       	movw	r30, r26
    cf78:	32 97       	sbiw	r30, 0x02	; 2
    cf7a:	80 81       	ld	r24, Z
    cf7c:	91 81       	ldd	r25, Z+1	; 0x01
    cf7e:	e9 2f       	mov	r30, r25
    cf80:	ff 27       	eor	r31, r31
    cf82:	99 27       	eor	r25, r25
			if (uc < bc + nc) {	/* In the block? */
    cf84:	a9 01       	movw	r20, r18
    cf86:	48 0f       	add	r20, r24
    cf88:	59 1f       	adc	r21, r25
    cf8a:	64 17       	cp	r22, r20
    cf8c:	75 07       	cpc	r23, r21
    cf8e:	70 f5       	brcc	.+92     	; 0xcfec <ff_wtoupper+0xae>
				switch (cmd) {
    cf90:	e9 30       	cpi	r30, 0x09	; 9
    cf92:	f1 05       	cpc	r31, r1
    cf94:	98 f5       	brcc	.+102    	; 0xcffc <ff_wtoupper+0xbe>
    cf96:	ec 54       	subi	r30, 0x4C	; 76
    cf98:	ff 4f       	sbci	r31, 0xFF	; 255
    cf9a:	0c 94 a9 e0 	jmp	0x1c152	; 0x1c152 <__tablejump2__>
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
    cf9e:	62 1b       	sub	r22, r18
    cfa0:	73 0b       	sbc	r23, r19
    cfa2:	fb 01       	movw	r30, r22
    cfa4:	ee 0f       	add	r30, r30
    cfa6:	ff 1f       	adc	r31, r31
    cfa8:	ea 0f       	add	r30, r26
    cfaa:	fb 1f       	adc	r31, r27
    cfac:	60 81       	ld	r22, Z
    cfae:	71 81       	ldd	r23, Z+1	; 0x01
    cfb0:	25 c0       	rjmp	.+74     	; 0xcffc <ff_wtoupper+0xbe>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
    cfb2:	cb 01       	movw	r24, r22
    cfb4:	82 1b       	sub	r24, r18
    cfb6:	93 0b       	sbc	r25, r19
    cfb8:	81 70       	andi	r24, 0x01	; 1
    cfba:	99 27       	eor	r25, r25
    cfbc:	68 1b       	sub	r22, r24
    cfbe:	79 0b       	sbc	r23, r25
    cfc0:	1d c0       	rjmp	.+58     	; 0xcffc <ff_wtoupper+0xbe>
				case 2: uc -= 16; break;			/* Shift -16 */
    cfc2:	60 51       	subi	r22, 0x10	; 16
    cfc4:	71 09       	sbc	r23, r1
    cfc6:	1a c0       	rjmp	.+52     	; 0xcffc <ff_wtoupper+0xbe>
				case 3:	uc -= 32; break;			/* Shift -32 */
    cfc8:	60 52       	subi	r22, 0x20	; 32
    cfca:	71 09       	sbc	r23, r1
    cfcc:	17 c0       	rjmp	.+46     	; 0xcffc <ff_wtoupper+0xbe>
				case 4:	uc -= 48; break;			/* Shift -48 */
    cfce:	60 53       	subi	r22, 0x30	; 48
    cfd0:	71 09       	sbc	r23, r1
    cfd2:	14 c0       	rjmp	.+40     	; 0xcffc <ff_wtoupper+0xbe>
				case 5:	uc -= 26; break;			/* Shift -26 */
    cfd4:	6a 51       	subi	r22, 0x1A	; 26
    cfd6:	71 09       	sbc	r23, r1
    cfd8:	11 c0       	rjmp	.+34     	; 0xcffc <ff_wtoupper+0xbe>
				case 6:	uc += 8; break;				/* Shift +8 */
    cfda:	68 5f       	subi	r22, 0xF8	; 248
    cfdc:	7f 4f       	sbci	r23, 0xFF	; 255
    cfde:	0e c0       	rjmp	.+28     	; 0xcffc <ff_wtoupper+0xbe>
				case 7: uc -= 80; break;			/* Shift -80 */
    cfe0:	60 55       	subi	r22, 0x50	; 80
    cfe2:	71 09       	sbc	r23, r1
    cfe4:	0b c0       	rjmp	.+22     	; 0xcffc <ff_wtoupper+0xbe>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
    cfe6:	60 56       	subi	r22, 0x60	; 96
    cfe8:	7c 41       	sbci	r23, 0x1C	; 28
    cfea:	08 c0       	rjmp	.+16     	; 0xcffc <ff_wtoupper+0xbe>
				}
				break;
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
    cfec:	ef 2b       	or	r30, r31
    cfee:	09 f0       	breq	.+2      	; 0xcff2 <ff_wtoupper+0xb4>
    cff0:	b6 cf       	rjmp	.-148    	; 0xcf5e <ff_wtoupper+0x20>
    cff2:	88 0f       	add	r24, r24
    cff4:	99 1f       	adc	r25, r25
    cff6:	a8 0f       	add	r26, r24
    cff8:	b9 1f       	adc	r27, r25
    cffa:	b1 cf       	rjmp	.-158    	; 0xcf5e <ff_wtoupper+0x20>
		}
		uni = uc;
    cffc:	80 e0       	ldi	r24, 0x00	; 0
    cffe:	90 e0       	ldi	r25, 0x00	; 0
	}

	return uni;
}
    d000:	08 95       	ret

0000d002 <disk_status>:

DSTATUS disk_status (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv)
    d002:	81 11       	cpse	r24, r1
    d004:	02 c0       	rjmp	.+4      	; 0xd00a <disk_status+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_status() );
    d006:	a1 c1       	rjmp	.+834    	; 0xd34a <mmc_disk_status>
    d008:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_status() );
#endif
    }
    return STA_NOINIT;
    d00a:	81 e0       	ldi	r24, 0x01	; 1
}
    d00c:	08 95       	ret

0000d00e <disk_initialize>:
DSTATUS disk_initialize (
BYTE pdrv                                         /* Physical drive nmuber to identify the drive */
)
{

    switch (pdrv)
    d00e:	81 11       	cpse	r24, r1
    d010:	02 c0       	rjmp	.+4      	; 0xd016 <disk_initialize+0x8>
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_initialize() );
    d012:	f6 c0       	rjmp	.+492    	; 0xd200 <mmc_disk_initialize>
    d014:	08 95       	ret
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_initialize() );
#endif
    }
    return STA_NOINIT;
    d016:	81 e0       	ldi	r24, 0x01	; 1
}
    d018:	08 95       	ret

0000d01a <disk_read>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
BYTE *buff,                                       /* Data buffer to store read data */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to read */
)
{
    d01a:	0f 93       	push	r16
    d01c:	1f 93       	push	r17
    d01e:	fb 01       	movw	r30, r22
    switch (pdrv)
    d020:	81 11       	cpse	r24, r1
    d022:	06 c0       	rjmp	.+12     	; 0xd030 <disk_read+0x16>
    d024:	ba 01       	movw	r22, r20
    d026:	a9 01       	movw	r20, r18
    d028:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_read(buff, sector, count) );
    d02a:	98 01       	movw	r18, r16
    d02c:	91 d1       	rcall	.+802    	; 0xd350 <mmc_disk_read>
    d02e:	02 c0       	rjmp	.+4      	; 0xd034 <disk_read+0x1a>
#ifdef DRV_USB
        case DEV_USB :
            return ( usb_disk_read(buff, sector, count) );
#endif
    }
    return RES_PARERR;
    d030:	84 e0       	ldi	r24, 0x04	; 4
    d032:	90 e0       	ldi	r25, 0x00	; 0
}
    d034:	1f 91       	pop	r17
    d036:	0f 91       	pop	r16
    d038:	08 95       	ret

0000d03a <disk_write>:
BYTE pdrv,                                        /* Physical drive nmuber to identify the drive */
const BYTE *buff,                                 /* Data to be written */
LBA_t sector,                                     /* Start sector in LBA */
UINT count                                        /* Number of sectors to write */
)
{
    d03a:	0f 93       	push	r16
    d03c:	1f 93       	push	r17
    d03e:	fb 01       	movw	r30, r22
    switch (pdrv)
    d040:	81 11       	cpse	r24, r1
    d042:	06 c0       	rjmp	.+12     	; 0xd050 <disk_write+0x16>
    d044:	ba 01       	movw	r22, r20
    d046:	a9 01       	movw	r20, r18
    d048:	cf 01       	movw	r24, r30
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_write(buff, sector, count) );
    d04a:	98 01       	movw	r18, r16
    d04c:	e2 d1       	rcall	.+964    	; 0xd412 <mmc_disk_write>
    d04e:	02 c0       	rjmp	.+4      	; 0xd054 <disk_write+0x1a>
        case DEV_USB :
            return ( usb_disk_write(buff, sector, count) );
#endif
    }

    return RES_PARERR;
    d050:	84 e0       	ldi	r24, 0x04	; 4
    d052:	90 e0       	ldi	r25, 0x00	; 0
}
    d054:	1f 91       	pop	r17
    d056:	0f 91       	pop	r16
    d058:	08 95       	ret

0000d05a <disk_ioctl>:
DRESULT disk_ioctl (
BYTE pdrv,                                        /* Physical drive nmuber (0..) */
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d05a:	96 2f       	mov	r25, r22
    switch (pdrv)
    d05c:	81 11       	cpse	r24, r1
    d05e:	04 c0       	rjmp	.+8      	; 0xd068 <disk_ioctl+0xe>
    d060:	ba 01       	movw	r22, r20
    d062:	89 2f       	mov	r24, r25
    {
#ifdef DRV_MMC
        case DEV_MMC :
            return ( mmc_disk_ioctl(cmd, buff) );
    d064:	4a c2       	rjmp	.+1172   	; 0xd4fa <mmc_disk_ioctl>
    d066:	08 95       	ret
#ifdef DRV_USB
        case DEV_MMC :
            return ( usb_disk_ioctl(cmd, buff) );
#endif
    }
    return RES_PARERR;
    d068:	84 e0       	ldi	r24, 0x04	; 4
    d06a:	90 e0       	ldi	r25, 0x00	; 0
}
    d06c:	08 95       	ret

0000d06e <xchg_spi>:
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d06e:	f9 c4       	rjmp	.+2546   	; 0xda62 <mmc_spi_TXRX>
    return dat;
}
    d070:	08 95       	ret

0000d072 <deselect>:
///@return void
MEMSPACE
static
void deselect (void)
{
    CS_HIGH();
    d072:	ce d4       	rcall	.+2460   	; 0xda10 <mmc_spi_end>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d074:	8f ef       	ldi	r24, 0xFF	; 255
    d076:	fb df       	rcall	.-10     	; 0xd06e <xchg_spi>
    xchg_spi(0xFF);                               /*< Dummy clock (force DO hi-z for multiple slave SPI) */
    d078:	8f ef       	ldi	r24, 0xFF	; 255
    d07a:	f9 cf       	rjmp	.-14     	; 0xd06e <xchg_spi>
    d07c:	08 95       	ret

0000d07e <rcvr_datablock>:
    d07e:	0f 93       	push	r16
static
int rcvr_datablock (
BYTE *buff,                                       /*< Data buffer to store received data */
UINT btr                                          /*< Byte count (must be multiple of 4) */
)
{
    d080:	1f 93       	push	r17
    d082:	cf 93       	push	r28
    d084:	df 93       	push	r29
    d086:	ec 01       	movw	r28, r24
    d088:	8b 01       	movw	r16, r22
    BYTE token;

    mmc_set_ms_timeout(1000);
    d08a:	88 ee       	ldi	r24, 0xE8	; 232
    d08c:	93 e0       	ldi	r25, 0x03	; 3
    d08e:	ec d4       	rcall	.+2520   	; 0xda68 <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d090:	8f ef       	ldi	r24, 0xFF	; 255
    d092:	e7 d4       	rcall	.+2510   	; 0xda62 <mmc_spi_TXRX>

    mmc_set_ms_timeout(1000);
    do                                            /* Wait for data packet in timeout of 400ms */
    {
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    d094:	8f 3f       	cpi	r24, 0xFF	; 255
    d096:	31 f4       	brne	.+12     	; 0xd0a4 <rcvr_datablock+0x26>
    d098:	ee d4       	rcall	.+2524   	; 0xda76 <mmc_test_timeout>
    d09a:	89 2b       	or	r24, r25
    d09c:	c9 f3       	breq	.-14     	; 0xd090 <rcvr_datablock+0x12>
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */
    d09e:	80 e0       	ldi	r24, 0x00	; 0
    d0a0:	90 e0       	ldi	r25, 0x00	; 0
    d0a2:	0b c0       	rjmp	.+22     	; 0xd0ba <rcvr_datablock+0x3c>
    d0a4:	8e 3f       	cpi	r24, 0xFE	; 254
void rcvr_spi_multi (
BYTE *p,                                          /* Data read buffer */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_RX_buffer((uint8_t *)p, cnt);
    d0a6:	d9 f7       	brne	.-10     	; 0xd09e <rcvr_datablock+0x20>
    d0a8:	b8 01       	movw	r22, r16
    d0aa:	ce 01       	movw	r24, r28
        token = xchg_spi(0xFF);
    } while ((token == 0xFF) && !mmc_test_timeout());
    if (token != 0xFE) return 0;                  /* If not valid data token, retutn with error */

    rcvr_spi_multi(buff, btr);                    /* Receive the data block into buffer */
    xchg_spi(0xFF);                               /* Discard CRC */
    d0ac:	d7 d4       	rcall	.+2478   	; 0xda5c <mmc_spi_RX_buffer>
    d0ae:	8f ef       	ldi	r24, 0xFF	; 255
    d0b0:	de df       	rcall	.-68     	; 0xd06e <xchg_spi>
    xchg_spi(0xFF);
    d0b2:	8f ef       	ldi	r24, 0xFF	; 255
    d0b4:	dc df       	rcall	.-72     	; 0xd06e <xchg_spi>
    d0b6:	81 e0       	ldi	r24, 0x01	; 1
    d0b8:	90 e0       	ldi	r25, 0x00	; 0
    d0ba:	df 91       	pop	r29

    return 1;                                     /* Return with success */
}
    d0bc:	cf 91       	pop	r28
    d0be:	1f 91       	pop	r17
    d0c0:	0f 91       	pop	r16
    d0c2:	08 95       	ret

0000d0c4 <wait_ready>:
    d0c4:	cf 93       	push	r28
int wait_ready (
UINT wt                                           /*< Timeout [ms] */
)
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    d0c6:	d0 d4       	rcall	.+2464   	; 0xda68 <mmc_set_ms_timeout>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d0c8:	8f ef       	ldi	r24, 0xFF	; 255
    d0ca:	cb d4       	rcall	.+2454   	; 0xda62 <mmc_spi_TXRX>
    d0cc:	c8 2f       	mov	r28, r24
{
    BYTE d;
    mmc_set_ms_timeout(wt);
    do
    d = xchg_spi(0xFF);
    while (d != 0xFF && !mmc_test_timeout());
    d0ce:	8f 3f       	cpi	r24, 0xFF	; 255
    d0d0:	19 f0       	breq	.+6      	; 0xd0d8 <wait_ready+0x14>
    d0d2:	d1 d4       	rcall	.+2466   	; 0xda76 <mmc_test_timeout>
    d0d4:	89 2b       	or	r24, r25
    d0d6:	c1 f3       	breq	.-16     	; 0xd0c8 <wait_ready+0x4>

    return (d == 0xFF) ? 1 : 0;
    d0d8:	81 e0       	ldi	r24, 0x01	; 1
    d0da:	90 e0       	ldi	r25, 0x00	; 0
    d0dc:	cf 3f       	cpi	r28, 0xFF	; 255
    d0de:	11 f0       	breq	.+4      	; 0xd0e4 <wait_ready+0x20>
    d0e0:	80 e0       	ldi	r24, 0x00	; 0
    d0e2:	90 e0       	ldi	r25, 0x00	; 0
}
    d0e4:	cf 91       	pop	r28
    d0e6:	08 95       	ret

0000d0e8 <select>:
///@return 1 Successful
///@return 0 Timeout
MEMSPACE
static
int select (void)
{
    d0e8:	cf 93       	push	r28
    d0ea:	df 93       	push	r29
    d0ec:	00 d0       	rcall	.+0      	; 0xd0ee <select+0x6>
    d0ee:	1f 92       	push	r1
    CS_LOW();
    d0f0:	82 d4       	rcall	.+2308   	; 0xd9f6 <mmc_spi_begin>
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */
    d0f2:	8f ef       	ldi	r24, 0xFF	; 255
    d0f4:	bc df       	rcall	.-136    	; 0xd06e <xchg_spi>

    if (wait_ready(1000))
    d0f6:	88 ee       	ldi	r24, 0xE8	; 232
    d0f8:	93 e0       	ldi	r25, 0x03	; 3
    d0fa:	e4 df       	rcall	.-56     	; 0xd0c4 <wait_ready>
    d0fc:	ec 01       	movw	r28, r24
    d0fe:	89 2b       	or	r24, r25
    d100:	61 f4       	brne	.+24     	; 0xd11a <select+0x32>
        return 1;                                 /* OK */

    printf("select failed!\n");
    d102:	8d e7       	ldi	r24, 0x7D	; 125
    d104:	97 e0       	ldi	r25, 0x07	; 7
    d106:	a0 e0       	ldi	r26, 0x00	; 0
    d108:	ed b7       	in	r30, 0x3d	; 61
    d10a:	fe b7       	in	r31, 0x3e	; 62
    d10c:	81 83       	std	Z+1, r24	; 0x01
    d10e:	92 83       	std	Z+2, r25	; 0x02
    d110:	a3 83       	std	Z+3, r26	; 0x03
    d112:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

    deselect();
    d116:	ad df       	rcall	.-166    	; 0xd072 <deselect>
    d118:	02 c0       	rjmp	.+4      	; 0xd11e <select+0x36>
{
    CS_LOW();
    xchg_spi(0xFF);                               /* Dummy clock (force DO enabled) */

    if (wait_ready(1000))
        return 1;                                 /* OK */
    d11a:	c1 e0       	ldi	r28, 0x01	; 1
    d11c:	d0 e0       	ldi	r29, 0x00	; 0

    printf("select failed!\n");

    deselect();
    return 0;                                     /* Timeout */
}
    d11e:	ce 01       	movw	r24, r28
    d120:	cd b7       	in	r28, 0x3d	; 61
    d122:	de b7       	in	r29, 0x3e	; 62
    d124:	23 96       	adiw	r28, 0x03	; 3
    d126:	e2 e0       	ldi	r30, 0x02	; 2
    d128:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

0000d12c <send_cmd>:
static
BYTE send_cmd (
BYTE cmd,                                         /*< Command index */
DWORD arg                                         /*< Argument */
)
{
    d12c:	ff 92       	push	r15
    d12e:	0f 93       	push	r16
    d130:	1f 93       	push	r17
    d132:	cf 93       	push	r28
    d134:	df 93       	push	r29
    d136:	c8 2f       	mov	r28, r24
    d138:	d4 2f       	mov	r29, r20
    d13a:	15 2f       	mov	r17, r21
    d13c:	06 2f       	mov	r16, r22
    d13e:	f7 2e       	mov	r15, r23
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    d140:	87 ff       	sbrs	r24, 7
    d142:	08 c0       	rjmp	.+16     	; 0xd154 <send_cmd+0x28>
    {
        cmd &= 0x7F;
        res = send_cmd(CMD55, 0);
    d144:	40 e0       	ldi	r20, 0x00	; 0
    d146:	50 e0       	ldi	r21, 0x00	; 0
    d148:	ba 01       	movw	r22, r20
    d14a:	87 e3       	ldi	r24, 0x37	; 55
    d14c:	ef df       	rcall	.-34     	; 0xd12c <send_cmd>
        if (res > 1) return res;
    d14e:	82 30       	cpi	r24, 0x02	; 2
    d150:	58 f5       	brcc	.+86     	; 0xd1a8 <send_cmd+0x7c>
{
    BYTE n, res;

    if (cmd & 0x80)                               /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    {
        cmd &= 0x7F;
    d152:	cf 77       	andi	r28, 0x7F	; 127
        res = send_cmd(CMD55, 0);
        if (res > 1) return res;
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    d154:	cc 30       	cpi	r28, 0x0C	; 12
    d156:	71 f4       	brne	.+28     	; 0xd174 <send_cmd+0x48>
        deselect();
        if (!select()) return 0xFF;
    }

/* Send command packet */
    xchg_spi(0x40 | cmd);                         /* Start + Command index */
    d158:	8c 2f       	mov	r24, r28
    d15a:	80 64       	ori	r24, 0x40	; 64
    d15c:	88 df       	rcall	.-240    	; 0xd06e <xchg_spi>
    xchg_spi((BYTE)(arg >> 24));                  /* Argument[31..24] */
    d15e:	8f 2d       	mov	r24, r15
    d160:	86 df       	rcall	.-244    	; 0xd06e <xchg_spi>
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    d162:	80 2f       	mov	r24, r16
    d164:	84 df       	rcall	.-248    	; 0xd06e <xchg_spi>
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    d166:	81 2f       	mov	r24, r17
    d168:	82 df       	rcall	.-252    	; 0xd06e <xchg_spi>
    d16a:	8d 2f       	mov	r24, r29
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    d16c:	80 df       	rcall	.-256    	; 0xd06e <xchg_spi>
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    d16e:	cc 23       	and	r28, r28
    d170:	c9 f0       	breq	.+50     	; 0xd1a4 <send_cmd+0x78>
    d172:	06 c0       	rjmp	.+12     	; 0xd180 <send_cmd+0x54>
    }

/* Select the card and wait for ready except to stop multiple block read */
    if (cmd != CMD12)
    {
        deselect();
    d174:	7e df       	rcall	.-260    	; 0xd072 <deselect>
    d176:	b8 df       	rcall	.-144    	; 0xd0e8 <select>
        if (!select()) return 0xFF;
    d178:	89 2b       	or	r24, r25
    d17a:	71 f7       	brne	.-36     	; 0xd158 <send_cmd+0x2c>
    d17c:	8f ef       	ldi	r24, 0xFF	; 255
    d17e:	14 c0       	rjmp	.+40     	; 0xd1a8 <send_cmd+0x7c>
    d180:	c8 30       	cpi	r28, 0x08	; 8
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d182:	11 f4       	brne	.+4      	; 0xd188 <send_cmd+0x5c>
    d184:	87 e8       	ldi	r24, 0x87	; 135
    d186:	01 c0       	rjmp	.+2      	; 0xd18a <send_cmd+0x5e>

    xchg_spi(n);
    d188:	81 e0       	ldi	r24, 0x01	; 1
    d18a:	71 df       	rcall	.-286    	; 0xd06e <xchg_spi>

/* Receive command response */
    if (cmd == CMD12) xchg_spi(0xFF);             /* Skip a stuff byte when stop reading */
    d18c:	cc 30       	cpi	r28, 0x0C	; 12
    d18e:	11 f4       	brne	.+4      	; 0xd194 <send_cmd+0x68>
    d190:	8f ef       	ldi	r24, 0xFF	; 255
    d192:	6d df       	rcall	.-294    	; 0xd06e <xchg_spi>
    d194:	ca e0       	ldi	r28, 0x0A	; 10
    xchg_spi((BYTE)(arg >> 16));                  /* Argument[23..16] */
    xchg_spi((BYTE)(arg >> 8));                   /* Argument[15..8] */
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */
    d196:	8f ef       	ldi	r24, 0xFF	; 255
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d198:	64 d4       	rcall	.+2248   	; 0xda62 <mmc_spi_TXRX>
    d19a:	87 ff       	sbrs	r24, 7
    d19c:	05 c0       	rjmp	.+10     	; 0xd1a8 <send_cmd+0x7c>
    n = 10;                                       /* Wait for a valid response in timeout of 10 attempts */
    do
    {
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);
    d19e:	c1 50       	subi	r28, 0x01	; 1
    d1a0:	d1 f7       	brne	.-12     	; 0xd196 <send_cmd+0x6a>
    d1a2:	02 c0       	rjmp	.+4      	; 0xd1a8 <send_cmd+0x7c>
    d1a4:	85 e9       	ldi	r24, 0x95	; 149
    d1a6:	f5 cf       	rjmp	.-22     	; 0xd192 <send_cmd+0x66>
    xchg_spi((BYTE)arg);                          /* Argument[7..0] */
    n = 0x01;                                     /* Dummy CRC + Stop */
    if (cmd == CMD0) n = 0x95;                    /* Valid CRC for CMD0(0) + Stop */
    if (cmd == CMD8) n = 0x87;                    /* Valid CRC for CMD8(0x1AA) Stop */

    xchg_spi(n);
    d1a8:	cd b7       	in	r28, 0x3d	; 61
    d1aa:	de b7       	in	r29, 0x3e	; 62
        res = xchg_spi(0xFF);
    }
    while ((res & 0x80) && --n);

    return res;                                   /* Return with the response value */
}
    d1ac:	e5 e0       	ldi	r30, 0x05	; 5
    d1ae:	0c 94 01 e1 	jmp	0x1c202	; 0x1c202 <__epilogue_restores__+0x1a>

0000d1b2 <xmit_datablock>:
    d1b2:	0f 93       	push	r16
    d1b4:	1f 93       	push	r17
static
int xmit_datablock (
const BYTE *buff,                                 /*< 512 byte data block to be transmitted */
BYTE token                                        /*< Data/Stop token */
)
{
    d1b6:	cf 93       	push	r28
    d1b8:	8c 01       	movw	r16, r24
    d1ba:	c6 2f       	mov	r28, r22
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d1bc:	88 ee       	ldi	r24, 0xE8	; 232
    d1be:	93 e0       	ldi	r25, 0x03	; 3
    d1c0:	81 df       	rcall	.-254    	; 0xd0c4 <wait_ready>
    d1c2:	00 97       	sbiw	r24, 0x00	; 0
    d1c4:	c9 f0       	breq	.+50     	; 0xd1f8 <xmit_datablock+0x46>

    xchg_spi(token);                              /* Xmit data token */
    d1c6:	8c 2f       	mov	r24, r28
    d1c8:	52 df       	rcall	.-348    	; 0xd06e <xchg_spi>
    if (token != 0xFD)                            /* Is data token */
    d1ca:	cd 3f       	cpi	r28, 0xFD	; 253
    d1cc:	99 f0       	breq	.+38     	; 0xd1f4 <xmit_datablock+0x42>
void xmit_spi_multi (
const BYTE *p,                                    /* Data block to be sent */
UINT cnt                                          /* Size of data block */
)
{
    mmc_spi_TX_buffer((uint8_t *)p, cnt);
    d1ce:	60 e0       	ldi	r22, 0x00	; 0
    d1d0:	72 e0       	ldi	r23, 0x02	; 2
    d1d2:	c8 01       	movw	r24, r16
    xchg_spi(token);                              /* Xmit data token */
    if (token != 0xFD)                            /* Is data token */
    {
        xmit_spi_multi(buff, 512);                /* Xmit the data block to the MMC */

        xchg_spi(0xFF);                           /* CRC (Dummy) */
    d1d4:	40 d4       	rcall	.+2176   	; 0xda56 <mmc_spi_TX_buffer>
    d1d6:	8f ef       	ldi	r24, 0xFF	; 255
        xchg_spi(0xFF);
    d1d8:	4a df       	rcall	.-364    	; 0xd06e <xchg_spi>
    d1da:	8f ef       	ldi	r24, 0xFF	; 255
    d1dc:	48 df       	rcall	.-368    	; 0xd06e <xchg_spi>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d1de:	8f ef       	ldi	r24, 0xFF	; 255
    d1e0:	40 d4       	rcall	.+2176   	; 0xda62 <mmc_spi_TXRX>
    d1e2:	8f 71       	andi	r24, 0x1F	; 31
BYTE token                                        /*< Data/Stop token */
)
{
    BYTE resp;

    if (!wait_ready(1000)) return 0;
    d1e4:	31 e0       	ldi	r19, 0x01	; 1
    d1e6:	20 e0       	ldi	r18, 0x00	; 0
    d1e8:	85 30       	cpi	r24, 0x05	; 5
    d1ea:	09 f0       	breq	.+2      	; 0xd1ee <xmit_datablock+0x3c>
    d1ec:	30 e0       	ldi	r19, 0x00	; 0
    d1ee:	83 2f       	mov	r24, r19
    d1f0:	92 2f       	mov	r25, r18
    d1f2:	02 c0       	rjmp	.+4      	; 0xd1f8 <xmit_datablock+0x46>
    d1f4:	81 e0       	ldi	r24, 0x01	; 1
        resp = xchg_spi(0xFF);                    /* Reveive data response */
        if ((resp & 0x1F) != 0x05)                /* If not accepted, return with error */
            return 0;
    }

    return 1;
    d1f6:	90 e0       	ldi	r25, 0x00	; 0
    d1f8:	cf 91       	pop	r28
}
    d1fa:	1f 91       	pop	r17
    d1fc:	0f 91       	pop	r16
    d1fe:	08 95       	ret

0000d200 <mmc_disk_initialize>:
    d200:	a4 e0       	ldi	r26, 0x04	; 4

///@brief Initialize Disk Drive
///@return Stat
MEMSPACE
DSTATUS mmc_disk_initialize (void)
{
    d202:	b0 e0       	ldi	r27, 0x00	; 0
    d204:	e6 e0       	ldi	r30, 0x06	; 6
    d206:	f9 e6       	ldi	r31, 0x69	; 105
    d208:	0c 94 e2 e0 	jmp	0x1c1c4	; 0x1c1c4 <__prologue_saves__+0x14>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d20c:	59 d4       	rcall	.+2226   	; 0xdac0 <mmc_power_off>
DSTATUS mmc_disk_initialize (void)
{
    BYTE n, cmd, ty, ocr[4];

    power_off();                                  /* Turn off the socket power to reset the card */
    delayms(100);                                 /* Wait for 100ms */
    d20e:	64 e6       	ldi	r22, 0x64	; 100
    d210:	70 e0       	ldi	r23, 0x00	; 0
    d212:	80 e0       	ldi	r24, 0x00	; 0
    d214:	90 e0       	ldi	r25, 0x00	; 0
    d216:	0e 94 9e 25 	call	0x4b3c	; 0x4b3c <delayms>

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    d21a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d21e:	81 fd       	sbrc	r24, 1
void power_on (void)
{
/* Turn socket power on and wait for 10ms+ (nothing to do if no power controls) */
/* Configure MOSI/MISO/SCLK/CS pins */
/* Enable SPI module in SPI mode 0 */
    mmc_power_on();
    d220:	8e c0       	rjmp	.+284    	; 0xd33e <mmc_disk_initialize+0x13e>
    delayms(100);                                 /* Wait for 100ms */

    if (Stat & STA_NODISK) return Stat;           /* No card in the socket? */
    power_on();                                   /* Turn on the socket power */

    FCLK_SLOW();
    d222:	4d d4       	rcall	.+2202   	; 0xdabe <mmc_power_on>
    d224:	f9 d3       	rcall	.+2034   	; 0xda18 <mmc_slow>

    for (n = 10; n; n--) xchg_spi(0xFF);          /* 80 dummy clocks */
    d226:	1a e0       	ldi	r17, 0x0A	; 10
    d228:	8f ef       	ldi	r24, 0xFF	; 255
    d22a:	21 df       	rcall	.-446    	; 0xd06e <xchg_spi>
    d22c:	11 50       	subi	r17, 0x01	; 1
    d22e:	e1 f7       	brne	.-8      	; 0xd228 <mmc_disk_initialize+0x28>

    ty = 0;
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    d230:	40 e0       	ldi	r20, 0x00	; 0
    d232:	50 e0       	ldi	r21, 0x00	; 0
    d234:	ba 01       	movw	r22, r20
    d236:	80 e0       	ldi	r24, 0x00	; 0
    d238:	79 df       	rcall	.-270    	; 0xd12c <send_cmd>
    d23a:	81 30       	cpi	r24, 0x01	; 1
    d23c:	09 f0       	breq	.+2      	; 0xd240 <mmc_disk_initialize+0x40>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
    d23e:	6f c0       	rjmp	.+222    	; 0xd31e <mmc_disk_initialize+0x11e>
    d240:	80 ed       	ldi	r24, 0xD0	; 208
    d242:	97 e0       	ldi	r25, 0x07	; 7
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
    d244:	11 d4       	rcall	.+2082   	; 0xda68 <mmc_set_ms_timeout>
    d246:	4a ea       	ldi	r20, 0xAA	; 170
    d248:	51 e0       	ldi	r21, 0x01	; 1
    d24a:	60 e0       	ldi	r22, 0x00	; 0
    d24c:	70 e0       	ldi	r23, 0x00	; 0
    d24e:	88 e0       	ldi	r24, 0x08	; 8
    d250:	6d df       	rcall	.-294    	; 0xd12c <send_cmd>
    d252:	81 30       	cpi	r24, 0x01	; 1
    d254:	09 f0       	breq	.+2      	; 0xd258 <mmc_disk_initialize+0x58>
    d256:	3d c0       	rjmp	.+122    	; 0xd2d2 <mmc_disk_initialize+0xd2>
    d258:	8e 01       	movw	r16, r28
    d25a:	0f 5f       	subi	r16, 0xFF	; 255
    d25c:	1f 4f       	sbci	r17, 0xFF	; 255
    d25e:	6e 01       	movw	r12, r28
    d260:	85 e0       	ldi	r24, 0x05	; 5
    d262:	c8 0e       	add	r12, r24
    d264:	d1 1c       	adc	r13, r1
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d266:	78 01       	movw	r14, r16
    d268:	8f ef       	ldi	r24, 0xFF	; 255
    d26a:	fb d3       	rcall	.+2038   	; 0xda62 <mmc_spi_TXRX>
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
    d26c:	f7 01       	movw	r30, r14
    d26e:	81 93       	st	Z+, r24
    d270:	7f 01       	movw	r14, r30
    if (send_cmd(CMD0, 0) == 1)                   /* Enter Idle state */
    {
        mmc_set_ms_timeout(2000);                 /* Initialization timeout of 1000 msec */
        if (send_cmd(CMD8, 0x1AA) == 1)           /* SDv2? */
        {
            for (n = 0; n < 4; n++)
    d272:	ce 16       	cp	r12, r30
    d274:	df 06       	cpc	r13, r31
    d276:	c1 f7       	brne	.-16     	; 0xd268 <mmc_disk_initialize+0x68>
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
    d278:	8b 81       	ldd	r24, Y+3	; 0x03
    d27a:	81 30       	cpi	r24, 0x01	; 1
    d27c:	09 f0       	breq	.+2      	; 0xd280 <mmc_disk_initialize+0x80>
    d27e:	4f c0       	rjmp	.+158    	; 0xd31e <mmc_disk_initialize+0x11e>
    d280:	8c 81       	ldd	r24, Y+4	; 0x04
    d282:	8a 3a       	cpi	r24, 0xAA	; 170
    d284:	09 f0       	breq	.+2      	; 0xd288 <mmc_disk_initialize+0x88>
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d286:	4b c0       	rjmp	.+150    	; 0xd31e <mmc_disk_initialize+0x11e>
    d288:	f6 d3       	rcall	.+2028   	; 0xda76 <mmc_test_timeout>
    d28a:	89 2b       	or	r24, r25
    d28c:	29 f0       	breq	.+10     	; 0xd298 <mmc_disk_initialize+0x98>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d28e:	f3 d3       	rcall	.+2022   	; 0xda76 <mmc_test_timeout>
    d290:	89 2b       	or	r24, r25
    d292:	09 f0       	breq	.+2      	; 0xd296 <mmc_disk_initialize+0x96>
    d294:	44 c0       	rjmp	.+136    	; 0xd31e <mmc_disk_initialize+0x11e>
    d296:	09 c0       	rjmp	.+18     	; 0xd2aa <mmc_disk_initialize+0xaa>
            for (n = 0; n < 4; n++)
                ocr[n] = xchg_spi(0xFF);          /* Get trailing return value of R7 resp */
            if (ocr[2] == 0x01 && ocr[3] == 0xAA) /* The card can work at vdd range of 2.7-3.6V */
            {
/* Wait for leaving idle state (ACMD41 with HCS bit) */
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
    d298:	40 e0       	ldi	r20, 0x00	; 0
    d29a:	50 e0       	ldi	r21, 0x00	; 0
    d29c:	60 e0       	ldi	r22, 0x00	; 0
    d29e:	70 e4       	ldi	r23, 0x40	; 64
    d2a0:	89 ea       	ldi	r24, 0xA9	; 169
    d2a2:	44 df       	rcall	.-376    	; 0xd12c <send_cmd>
    d2a4:	81 11       	cpse	r24, r1
    d2a6:	f0 cf       	rjmp	.-32     	; 0xd288 <mmc_disk_initialize+0x88>
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
    d2a8:	f2 cf       	rjmp	.-28     	; 0xd28e <mmc_disk_initialize+0x8e>
    d2aa:	40 e0       	ldi	r20, 0x00	; 0
    d2ac:	50 e0       	ldi	r21, 0x00	; 0
    d2ae:	ba 01       	movw	r22, r20
    d2b0:	8a e3       	ldi	r24, 0x3A	; 58
    d2b2:	3c df       	rcall	.-392    	; 0xd12c <send_cmd>
    d2b4:	81 11       	cpse	r24, r1
    d2b6:	33 c0       	rjmp	.+102    	; 0xd31e <mmc_disk_initialize+0x11e>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d2b8:	8f ef       	ldi	r24, 0xFF	; 255
    d2ba:	d3 d3       	rcall	.+1958   	; 0xda62 <mmc_spi_TXRX>
    d2bc:	f8 01       	movw	r30, r16
                while (!mmc_test_timeout() && send_cmd(ACMD41, 1UL << 30))
                    ;
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
    d2be:	81 93       	st	Z+, r24
    d2c0:	8f 01       	movw	r16, r30
    d2c2:	ce 16       	cp	r12, r30
    d2c4:	df 06       	cpc	r13, r31
    d2c6:	c1 f7       	brne	.-16     	; 0xd2b8 <mmc_disk_initialize+0xb8>
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d2c8:	89 81       	ldd	r24, Y+1	; 0x01
    d2ca:	86 fd       	sbrc	r24, 6
    d2cc:	2a c0       	rjmp	.+84     	; 0xd322 <mmc_disk_initialize+0x122>
    d2ce:	14 e0       	ldi	r17, 0x04	; 4
    d2d0:	29 c0       	rjmp	.+82     	; 0xd324 <mmc_disk_initialize+0x124>
                }
            }
        }
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
    d2d2:	80 ed       	ldi	r24, 0xD0	; 208
    d2d4:	97 e0       	ldi	r25, 0x07	; 7
    d2d6:	c8 d3       	rcall	.+1936   	; 0xda68 <mmc_set_ms_timeout>
            if (send_cmd(ACMD41, 0) <= 1)
    d2d8:	40 e0       	ldi	r20, 0x00	; 0
    d2da:	50 e0       	ldi	r21, 0x00	; 0
    d2dc:	ba 01       	movw	r22, r20
    d2de:	89 ea       	ldi	r24, 0xA9	; 169
    d2e0:	25 df       	rcall	.-438    	; 0xd12c <send_cmd>
    d2e2:	82 30       	cpi	r24, 0x02	; 2
    d2e4:	18 f0       	brcs	.+6      	; 0xd2ec <mmc_disk_initialize+0xec>
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
            }
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
    d2e6:	11 e0       	ldi	r17, 0x01	; 1
    d2e8:	01 e0       	ldi	r16, 0x01	; 1
        else
        {                                         /* SDv1 or MMCv3 */
            mmc_set_ms_timeout(2000);             /* Initialization timeout of 2000 msec */
            if (send_cmd(ACMD41, 0) <= 1)
            {
                ty = CT_SD1; cmd = ACMD41;        /* SDv1 */
    d2ea:	02 c0       	rjmp	.+4      	; 0xd2f0 <mmc_disk_initialize+0xf0>
    d2ec:	12 e0       	ldi	r17, 0x02	; 2
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d2ee:	09 ea       	ldi	r16, 0xA9	; 169
    d2f0:	c2 d3       	rcall	.+1924   	; 0xda76 <mmc_test_timeout>
    d2f2:	89 2b       	or	r24, r25
    d2f4:	21 f0       	breq	.+8      	; 0xd2fe <mmc_disk_initialize+0xfe>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d2f6:	bf d3       	rcall	.+1918   	; 0xda76 <mmc_test_timeout>
    d2f8:	89 2b       	or	r24, r25
    d2fa:	89 f4       	brne	.+34     	; 0xd31e <mmc_disk_initialize+0x11e>
    d2fc:	08 c0       	rjmp	.+16     	; 0xd30e <mmc_disk_initialize+0x10e>
            else
            {
                ty = CT_MMC; cmd = CMD1;          /* MMCv3 */
            }
/* Wait for leaving idle state */
            while (!mmc_test_timeout() && send_cmd(cmd, 0))
    d2fe:	40 e0       	ldi	r20, 0x00	; 0
    d300:	50 e0       	ldi	r21, 0x00	; 0
    d302:	ba 01       	movw	r22, r20
    d304:	80 2f       	mov	r24, r16
    d306:	12 df       	rcall	.-476    	; 0xd12c <send_cmd>
    d308:	81 11       	cpse	r24, r1
    d30a:	f2 cf       	rjmp	.-28     	; 0xd2f0 <mmc_disk_initialize+0xf0>
    d30c:	f4 cf       	rjmp	.-24     	; 0xd2f6 <mmc_disk_initialize+0xf6>
                ;
/* Set R/W block length to 512 */
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
    d30e:	40 e0       	ldi	r20, 0x00	; 0
    d310:	52 e0       	ldi	r21, 0x02	; 2
    d312:	60 e0       	ldi	r22, 0x00	; 0
    d314:	70 e0       	ldi	r23, 0x00	; 0
    d316:	80 e1       	ldi	r24, 0x10	; 16
    d318:	09 df       	rcall	.-494    	; 0xd12c <send_cmd>
    d31a:	88 23       	and	r24, r24
                ty = 0;
    d31c:	19 f0       	breq	.+6      	; 0xd324 <mmc_disk_initialize+0x124>
    d31e:	10 e0       	ldi	r17, 0x00	; 0
/* Check CCS bit in the OCR */
                if (!mmc_test_timeout() && send_cmd(CMD58, 0) == 0)
                {
                    for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
/* Check if the card is SDv2 */
                    ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
    d320:	01 c0       	rjmp	.+2      	; 0xd324 <mmc_disk_initialize+0x124>
            if (mmc_test_timeout() || send_cmd(CMD16, 512) != 0)
                ty = 0;
        }
    }

    CardType = ty;
    d322:	1c e0       	ldi	r17, 0x0C	; 12
    d324:	10 93 3f 18 	sts	0x183F, r17	; 0x80183f <CardType>
    deselect();
    d328:	a4 de       	rcall	.-696    	; 0xd072 <deselect>

    if (ty)                                       /* Initialization succeded */
    d32a:	11 23       	and	r17, r17
    d32c:	39 f0       	breq	.+14     	; 0xd33c <mmc_disk_initialize+0x13c>
    {
        Stat &= ~STA_NOINIT;                      /* Clear STA_NOINIT */
    d32e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d332:	8e 7f       	andi	r24, 0xFE	; 254
    d334:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
        FCLK_FAST();
    d338:	81 d3       	rcall	.+1794   	; 0xda3c <mmc_fast>
    d33a:	01 c0       	rjmp	.+2      	; 0xd33e <mmc_disk_initialize+0x13e>
    d33c:	c1 d3       	rcall	.+1922   	; 0xdac0 <mmc_power_off>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d33e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    else
    {
        power_off();
    }

    return Stat;
    d342:	24 96       	adiw	r28, 0x04	; 4
    d344:	e8 e0       	ldi	r30, 0x08	; 8
}
    d346:	0c 94 fe e0 	jmp	0x1c1fc	; 0x1c1fc <__epilogue_restores__+0x14>

0000d34a <mmc_disk_status>:
    d34a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
/// @return STA_NOINIT if no drive
MEMSPACE
DSTATUS mmc_disk_status ( void )
{
    return Stat;
}
    d34e:	08 95       	ret

0000d350 <mmc_disk_read>:
DRESULT mmc_disk_read (
BYTE *buff,                                       /*< Pointer to the data buffer to store read data */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /*< Sector count (1..128) */
)
{
    d350:	8f 92       	push	r8
    d352:	9f 92       	push	r9
    d354:	af 92       	push	r10
    d356:	bf 92       	push	r11
    d358:	ef 92       	push	r14
    d35a:	ff 92       	push	r15
    d35c:	1f 93       	push	r17
    d35e:	cf 93       	push	r28
    d360:	df 93       	push	r29
    d362:	7c 01       	movw	r14, r24
    d364:	4a 01       	movw	r8, r20
    d366:	5b 01       	movw	r10, r22
    d368:	e9 01       	movw	r28, r18
    BYTE cmd;

    if (!count)
    d36a:	20 97       	sbiw	r28, 0x00	; 0
    d36c:	19 f4       	brne	.+6      	; 0xd374 <mmc_disk_read+0x24>
    {
        deselect();
    d36e:	81 de       	rcall	.-766    	; 0xd072 <deselect>
        return RES_PARERR;
    d370:	84 e0       	ldi	r24, 0x04	; 4
    d372:	0d c0       	rjmp	.+26     	; 0xd38e <mmc_disk_read+0x3e>
    }

	if( Stat )
    d374:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d378:	88 23       	and	r24, r24
    d37a:	19 f0       	breq	.+6      	; 0xd382 <mmc_disk_read+0x32>
		set_error(1);
    d37c:	81 e0       	ldi	r24, 0x01	; 1
    d37e:	0e 94 3e 24 	call	0x487c	; 0x487c <set_error>

    if (Stat & STA_NOINIT)
    d382:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d386:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d388:	04 c0       	rjmp	.+8      	; 0xd392 <mmc_disk_read+0x42>
    d38a:	73 de       	rcall	.-794    	; 0xd072 <deselect>
        return RES_NOTRDY;
    d38c:	83 e0       	ldi	r24, 0x03	; 3
    d38e:	90 e0       	ldi	r25, 0x00	; 0
    d390:	36 c0       	rjmp	.+108    	; 0xd3fe <mmc_disk_read+0xae>
    }
    if (Stat & STA_NODISK)
    d392:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d396:	81 fd       	sbrc	r24, 1
    d398:	f8 cf       	rjmp	.-16     	; 0xd38a <mmc_disk_read+0x3a>
    {
        deselect();
        return RES_NOTRDY;
	}
    GPIO_PIN_HI(LED1);
    d39a:	46 9a       	sbi	0x08, 6	; 8
    d39c:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d39e:	80 91 3f 18 	lds	r24, 0x183F	; 0x80183f <CardType>
    d3a2:	83 fd       	sbrc	r24, 3
    d3a4:	07 c0       	rjmp	.+14     	; 0xd3b4 <mmc_disk_read+0x64>
    d3a6:	89 e0       	ldi	r24, 0x09	; 9
    d3a8:	88 0c       	add	r8, r8
    d3aa:	99 1c       	adc	r9, r9
    d3ac:	aa 1c       	adc	r10, r10
    d3ae:	bb 1c       	adc	r11, r11
    d3b0:	8a 95       	dec	r24
    d3b2:	d1 f7       	brne	.-12     	; 0xd3a8 <mmc_disk_read+0x58>

    cmd = count > 1 ? CMD18 : CMD17;              /*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    d3b4:	c2 30       	cpi	r28, 0x02	; 2
    d3b6:	d1 05       	cpc	r29, r1
    d3b8:	10 f4       	brcc	.+4      	; 0xd3be <mmc_disk_read+0x6e>
    d3ba:	11 e1       	ldi	r17, 0x11	; 17
    d3bc:	01 c0       	rjmp	.+2      	; 0xd3c0 <mmc_disk_read+0x70>
    d3be:	12 e1       	ldi	r17, 0x12	; 18
    if (send_cmd(cmd, sector) == 0)
    d3c0:	b5 01       	movw	r22, r10
    d3c2:	a4 01       	movw	r20, r8
    d3c4:	81 2f       	mov	r24, r17
    d3c6:	b2 de       	rcall	.-668    	; 0xd12c <send_cmd>
    d3c8:	81 11       	cpse	r24, r1
    d3ca:	11 c0       	rjmp	.+34     	; 0xd3ee <mmc_disk_read+0x9e>
    {
        do
        {
            if (!rcvr_datablock(buff, 512))
    d3cc:	60 e0       	ldi	r22, 0x00	; 0
    d3ce:	72 e0       	ldi	r23, 0x02	; 2
    d3d0:	c7 01       	movw	r24, r14
    d3d2:	55 de       	rcall	.-854    	; 0xd07e <rcvr_datablock>
    d3d4:	89 2b       	or	r24, r25
    d3d6:	21 f0       	breq	.+8      	; 0xd3e0 <mmc_disk_read+0x90>
                break;
            buff += 512;
    d3d8:	8e ef       	ldi	r24, 0xFE	; 254
    d3da:	f8 1a       	sub	r15, r24
        } while (--count);
    d3dc:	21 97       	sbiw	r28, 0x01	; 1
    d3de:	b1 f7       	brne	.-20     	; 0xd3cc <mmc_disk_read+0x7c>
        if (cmd == CMD18) send_cmd(CMD12, 0);     /* STOP_TRANSMISSION */
    d3e0:	12 31       	cpi	r17, 0x12	; 18
    d3e2:	29 f4       	brne	.+10     	; 0xd3ee <mmc_disk_read+0x9e>
    d3e4:	40 e0       	ldi	r20, 0x00	; 0
    d3e6:	50 e0       	ldi	r21, 0x00	; 0
    d3e8:	ba 01       	movw	r22, r20
    d3ea:	8c e0       	ldi	r24, 0x0C	; 12
    }
    deselect();
    d3ec:	9f de       	rcall	.-706    	; 0xd12c <send_cmd>
    d3ee:	41 de       	rcall	.-894    	; 0xd072 <deselect>
    GPIO_PIN_LOW(LED1);
    d3f0:	46 98       	cbi	0x08, 6	; 8
    d3f2:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d3f4:	81 e0       	ldi	r24, 0x01	; 1
    d3f6:	90 e0       	ldi	r25, 0x00	; 0
    d3f8:	cd 2b       	or	r28, r29
    d3fa:	09 f4       	brne	.+2      	; 0xd3fe <mmc_disk_read+0xae>
    d3fc:	80 e0       	ldi	r24, 0x00	; 0
}
    d3fe:	df 91       	pop	r29
    d400:	cf 91       	pop	r28
    d402:	1f 91       	pop	r17
    d404:	ff 90       	pop	r15
    d406:	ef 90       	pop	r14
    d408:	bf 90       	pop	r11
    d40a:	af 90       	pop	r10
    d40c:	9f 90       	pop	r9
    d40e:	8f 90       	pop	r8
    d410:	08 95       	ret

0000d412 <mmc_disk_write>:
DRESULT mmc_disk_write (
const BYTE *buff,                                 /*< Pointer to the data to be written */
DWORD sector,                                     /*< Start sector number (LBA) */
UINT count                                        /* Sector count (1..128) */
)
{
    d412:	a0 e0       	ldi	r26, 0x00	; 0
    d414:	b0 e0       	ldi	r27, 0x00	; 0
    d416:	ef e0       	ldi	r30, 0x0F	; 15
    d418:	fa e6       	ldi	r31, 0x6A	; 106
    d41a:	0c 94 e2 e0 	jmp	0x1c1c4	; 0x1c1c4 <__prologue_saves__+0x14>
    d41e:	8c 01       	movw	r16, r24
    d420:	6a 01       	movw	r12, r20
    d422:	7b 01       	movw	r14, r22
    d424:	e9 01       	movw	r28, r18
    if (!count)
    d426:	20 97       	sbiw	r28, 0x00	; 0
    d428:	19 f4       	brne	.+6      	; 0xd430 <mmc_disk_write+0x1e>
    {
        deselect();
    d42a:	23 de       	rcall	.-954    	; 0xd072 <deselect>
        return RES_PARERR;
    d42c:	84 e0       	ldi	r24, 0x04	; 4
    d42e:	18 c0       	rjmp	.+48     	; 0xd460 <mmc_disk_write+0x4e>
    }

	if( Stat )
    d430:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d434:	88 23       	and	r24, r24
    d436:	19 f0       	breq	.+6      	; 0xd43e <mmc_disk_write+0x2c>
		set_error(1);
    d438:	81 e0       	ldi	r24, 0x01	; 1
    d43a:	0e 94 3e 24 	call	0x487c	; 0x487c <set_error>

    if (Stat & STA_NOINIT)
    d43e:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d442:	80 ff       	sbrs	r24, 0
    {
        deselect();
    d444:	03 c0       	rjmp	.+6      	; 0xd44c <mmc_disk_write+0x3a>
    d446:	15 de       	rcall	.-982    	; 0xd072 <deselect>
        return RES_NOTRDY;
    d448:	83 e0       	ldi	r24, 0x03	; 3
    d44a:	0a c0       	rjmp	.+20     	; 0xd460 <mmc_disk_write+0x4e>
    }
    if (Stat & STA_NODISK)
    d44c:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d450:	81 fd       	sbrc	r24, 1
    d452:	f9 cf       	rjmp	.-14     	; 0xd446 <mmc_disk_write+0x34>
    {
        deselect();
        return RES_NOTRDY;
	}
    if (Stat & STA_PROTECT)
    d454:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    d458:	82 ff       	sbrs	r24, 2
    {
        deselect();
    d45a:	04 c0       	rjmp	.+8      	; 0xd464 <mmc_disk_write+0x52>
    d45c:	0a de       	rcall	.-1004   	; 0xd072 <deselect>
        return RES_WRPRT;
    d45e:	82 e0       	ldi	r24, 0x02	; 2
    d460:	90 e0       	ldi	r25, 0x00	; 0
    d462:	46 c0       	rjmp	.+140    	; 0xd4f0 <mmc_disk_write+0xde>
    }

    GPIO_PIN_HI(LED1);
    d464:	46 9a       	sbi	0x08, 6	; 8
    d466:	3e 9a       	sbi	0x07, 6	; 7

    if (!(CardType & CT_BLOCK)) sector *= 512;    /* Convert to byte address if needed */
    d468:	80 91 3f 18 	lds	r24, 0x183F	; 0x80183f <CardType>
    d46c:	83 fd       	sbrc	r24, 3
    d46e:	07 c0       	rjmp	.+14     	; 0xd47e <mmc_disk_write+0x6c>
    d470:	99 e0       	ldi	r25, 0x09	; 9
    d472:	cc 0c       	add	r12, r12
    d474:	dd 1c       	adc	r13, r13
    d476:	ee 1c       	adc	r14, r14
    d478:	ff 1c       	adc	r15, r15
    d47a:	9a 95       	dec	r25
    d47c:	d1 f7       	brne	.-12     	; 0xd472 <mmc_disk_write+0x60>

    if (count == 1)                               /* Single block write */
    d47e:	c1 30       	cpi	r28, 0x01	; 1
    d480:	d1 05       	cpc	r29, r1
    d482:	89 f4       	brne	.+34     	; 0xd4a6 <mmc_disk_write+0x94>
    {
        if ((send_cmd(CMD24, sector) == 0)        /* WRITE_BLOCK */
    d484:	b7 01       	movw	r22, r14
    d486:	a6 01       	movw	r20, r12
    d488:	88 e1       	ldi	r24, 0x18	; 24
    d48a:	50 de       	rcall	.-864    	; 0xd12c <send_cmd>
    d48c:	81 11       	cpse	r24, r1
            && xmit_datablock(buff, 0xFE))
    d48e:	26 c0       	rjmp	.+76     	; 0xd4dc <mmc_disk_write+0xca>
    d490:	6e ef       	ldi	r22, 0xFE	; 254
    d492:	c8 01       	movw	r24, r16
    d494:	8e de       	rcall	.-740    	; 0xd1b2 <xmit_datablock>
    d496:	31 e0       	ldi	r19, 0x01	; 1
    d498:	20 e0       	ldi	r18, 0x00	; 0
    d49a:	89 2b       	or	r24, r25
    d49c:	09 f0       	breq	.+2      	; 0xd4a0 <mmc_disk_write+0x8e>
    d49e:	30 e0       	ldi	r19, 0x00	; 0
    d4a0:	c3 2f       	mov	r28, r19
    d4a2:	d2 2f       	mov	r29, r18
    d4a4:	1d c0       	rjmp	.+58     	; 0xd4e0 <mmc_disk_write+0xce>
            count = 0;
    }
    else                                          /* Multiple block write */
    {
        if (CardType & CT_SDC) send_cmd(ACMD23, count);
    d4a6:	86 70       	andi	r24, 0x06	; 6
    d4a8:	29 f0       	breq	.+10     	; 0xd4b4 <mmc_disk_write+0xa2>
    d4aa:	ae 01       	movw	r20, r28
    d4ac:	60 e0       	ldi	r22, 0x00	; 0
    d4ae:	70 e0       	ldi	r23, 0x00	; 0
    d4b0:	87 e9       	ldi	r24, 0x97	; 151
        if (send_cmd(CMD25, sector) == 0)         /* WRITE_MULTIPLE_BLOCK */
    d4b2:	3c de       	rcall	.-904    	; 0xd12c <send_cmd>
    d4b4:	b7 01       	movw	r22, r14
    d4b6:	a6 01       	movw	r20, r12
    d4b8:	89 e1       	ldi	r24, 0x19	; 25
    d4ba:	38 de       	rcall	.-912    	; 0xd12c <send_cmd>
    d4bc:	81 11       	cpse	r24, r1
        {
            do
            {
                if (!xmit_datablock(buff, 0xFC)) break;
    d4be:	10 c0       	rjmp	.+32     	; 0xd4e0 <mmc_disk_write+0xce>
    d4c0:	6c ef       	ldi	r22, 0xFC	; 252
    d4c2:	c8 01       	movw	r24, r16
    d4c4:	76 de       	rcall	.-788    	; 0xd1b2 <xmit_datablock>
    d4c6:	89 2b       	or	r24, r25
                buff += 512;
    d4c8:	19 f0       	breq	.+6      	; 0xd4d0 <mmc_disk_write+0xbe>
            } while (--count);
    d4ca:	1e 5f       	subi	r17, 0xFE	; 254
    d4cc:	21 97       	sbiw	r28, 0x01	; 1
            if (!xmit_datablock(0, 0xFD))         /* STOP_TRAN token */
    d4ce:	c1 f7       	brne	.-16     	; 0xd4c0 <mmc_disk_write+0xae>
    d4d0:	6d ef       	ldi	r22, 0xFD	; 253
    d4d2:	80 e0       	ldi	r24, 0x00	; 0
    d4d4:	90 e0       	ldi	r25, 0x00	; 0
    d4d6:	6d de       	rcall	.-806    	; 0xd1b2 <xmit_datablock>
    d4d8:	89 2b       	or	r24, r25
                count = 1;
    d4da:	11 f4       	brne	.+4      	; 0xd4e0 <mmc_disk_write+0xce>
    d4dc:	c1 e0       	ldi	r28, 0x01	; 1
        }
    }
    deselect();
    d4de:	d0 e0       	ldi	r29, 0x00	; 0
    d4e0:	c8 dd       	rcall	.-1136   	; 0xd072 <deselect>
    GPIO_PIN_LOW(LED1);
    d4e2:	46 98       	cbi	0x08, 6	; 8
    d4e4:	3e 9a       	sbi	0x07, 6	; 7

    return count ? RES_ERROR : RES_OK;
    d4e6:	81 e0       	ldi	r24, 0x01	; 1
    d4e8:	90 e0       	ldi	r25, 0x00	; 0
    d4ea:	cd 2b       	or	r28, r29
    d4ec:	09 f4       	brne	.+2      	; 0xd4f0 <mmc_disk_write+0xde>
    d4ee:	80 e0       	ldi	r24, 0x00	; 0
}
    d4f0:	cd b7       	in	r28, 0x3d	; 61
    d4f2:	de b7       	in	r29, 0x3e	; 62
    d4f4:	e8 e0       	ldi	r30, 0x08	; 8
    d4f6:	0c 94 fe e0 	jmp	0x1c1fc	; 0x1c1fc <__epilogue_restores__+0x14>

0000d4fa <mmc_disk_ioctl>:
MEMSPACE
DRESULT mmc_disk_ioctl (
BYTE cmd,                                         /* Control code */
void *buff                                        /* Buffer to send/receive control data */
)
{
    d4fa:	a0 e1       	ldi	r26, 0x10	; 16
    d4fc:	b0 e0       	ldi	r27, 0x00	; 0
    d4fe:	e3 e8       	ldi	r30, 0x83	; 131
    d500:	fa e6       	ldi	r31, 0x6A	; 106
    d502:	0c 94 e2 e0 	jmp	0x1c1c4	; 0x1c1c4 <__prologue_saves__+0x14>
    SDIO_CTRL *sdi;
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
    d506:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d50a:	90 fd       	sbrc	r25, 0
    d50c:	31 c2       	rjmp	.+1122   	; 0xd970 <mmc_disk_ioctl+0x476>
    d50e:	8b 01       	movw	r16, r22
        return RES_NOTRDY;

    if (Stat & STA_NODISK)
    d510:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <Stat>
    d514:	91 ff       	sbrs	r25, 1
    d516:	02 c0       	rjmp	.+4      	; 0xd51c <mmc_disk_ioctl+0x22>
    {
        deselect();
    d518:	ac dd       	rcall	.-1192   	; 0xd072 <deselect>
    d51a:	2a c2       	rjmp	.+1108   	; 0xd970 <mmc_disk_ioctl+0x476>
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d51c:	83 33       	cpi	r24, 0x33	; 51
    d51e:	09 f4       	brne	.+2      	; 0xd522 <mmc_disk_ioctl+0x28>
    d520:	01 c1       	rjmp	.+514    	; 0xd724 <mmc_disk_ioctl+0x22a>
    d522:	a0 f4       	brcc	.+40     	; 0xd54c <mmc_disk_ioctl+0x52>
    d524:	83 30       	cpi	r24, 0x03	; 3
    d526:	09 f4       	brne	.+2      	; 0xd52a <mmc_disk_ioctl+0x30>
    d528:	85 c0       	rjmp	.+266    	; 0xd634 <mmc_disk_ioctl+0x13a>
    d52a:	28 f4       	brcc	.+10     	; 0xd536 <mmc_disk_ioctl+0x3c>
    d52c:	88 23       	and	r24, r24
    d52e:	11 f1       	breq	.+68     	; 0xd574 <mmc_disk_ioctl+0x7a>
    d530:	81 30       	cpi	r24, 0x01	; 1
    d532:	11 f1       	breq	.+68     	; 0xd578 <mmc_disk_ioctl+0x7e>
    d534:	1f c2       	rjmp	.+1086   	; 0xd974 <mmc_disk_ioctl+0x47a>
    d536:	87 30       	cpi	r24, 0x07	; 7
    d538:	09 f4       	brne	.+2      	; 0xd53c <mmc_disk_ioctl+0x42>
    d53a:	2a c1       	rjmp	.+596    	; 0xd790 <mmc_disk_ioctl+0x296>
    d53c:	82 33       	cpi	r24, 0x32	; 50
    d53e:	09 f0       	breq	.+2      	; 0xd542 <mmc_disk_ioctl+0x48>
    d540:	19 c2       	rjmp	.+1074   	; 0xd974 <mmc_disk_ioctl+0x47a>
#endif

/* Following commands are never used by FatFs module */

        case MMC_GET_TYPE :                       /* Get card type flags (1 byte) */
            *ptr = CardType;
    d542:	80 91 3f 18 	lds	r24, 0x183F	; 0x80183f <CardType>
    d546:	fb 01       	movw	r30, r22
    d548:	80 83       	st	Z, r24
    d54a:	28 c1       	rjmp	.+592    	; 0xd79c <mmc_disk_ioctl+0x2a2>
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    switch (cmd)
    d54c:	86 33       	cpi	r24, 0x36	; 54
    d54e:	09 f4       	brne	.+2      	; 0xd552 <mmc_disk_ioctl+0x58>
    d550:	0c c1       	rjmp	.+536    	; 0xd76a <mmc_disk_ioctl+0x270>
    d552:	38 f4       	brcc	.+14     	; 0xd562 <mmc_disk_ioctl+0x68>
    d554:	84 33       	cpi	r24, 0x34	; 52
    d556:	09 f4       	brne	.+2      	; 0xd55a <mmc_disk_ioctl+0x60>
    d558:	ea c0       	rjmp	.+468    	; 0xd72e <mmc_disk_ioctl+0x234>
    d55a:	85 33       	cpi	r24, 0x35	; 53
    d55c:	09 f4       	brne	.+2      	; 0xd560 <mmc_disk_ioctl+0x66>
    d55e:	f1 c0       	rjmp	.+482    	; 0xd742 <mmc_disk_ioctl+0x248>
    d560:	09 c2       	rjmp	.+1042   	; 0xd974 <mmc_disk_ioctl+0x47a>
    d562:	88 33       	cpi	r24, 0x38	; 56
    d564:	09 f4       	brne	.+2      	; 0xd568 <mmc_disk_ioctl+0x6e>
    d566:	74 c1       	rjmp	.+744    	; 0xd850 <mmc_disk_ioctl+0x356>
    d568:	08 f4       	brcc	.+2      	; 0xd56c <mmc_disk_ioctl+0x72>
    d56a:	1a c1       	rjmp	.+564    	; 0xd7a0 <mmc_disk_ioctl+0x2a6>
    d56c:	89 33       	cpi	r24, 0x39	; 57
    d56e:	09 f4       	brne	.+2      	; 0xd572 <mmc_disk_ioctl+0x78>
    d570:	bc c1       	rjmp	.+888    	; 0xd8ea <mmc_disk_ioctl+0x3f0>
    {
        case CTRL_SYNC :                          /* Make sure that no pending write process. Do not remove this or written sector might not left updated. */
            if (select()) res = RES_OK;
    d572:	00 c2       	rjmp	.+1024   	; 0xd974 <mmc_disk_ioctl+0x47a>
    d574:	b9 dd       	rcall	.-1166   	; 0xd0e8 <select>
    d576:	06 c1       	rjmp	.+524    	; 0xd784 <mmc_disk_ioctl+0x28a>
            deselect();
            break;

        case GET_SECTOR_COUNT :                   /* Get number of sectors on the disk (DWORD) */
            if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d578:	40 e0       	ldi	r20, 0x00	; 0
    d57a:	50 e0       	ldi	r21, 0x00	; 0
    d57c:	ba 01       	movw	r22, r20
    d57e:	89 e0       	ldi	r24, 0x09	; 9
    d580:	d5 dd       	rcall	.-1110   	; 0xd12c <send_cmd>
    d582:	81 11       	cpse	r24, r1
    d584:	f1 c1       	rjmp	.+994    	; 0xd968 <mmc_disk_ioctl+0x46e>
    d586:	60 e1       	ldi	r22, 0x10	; 16
    d588:	70 e0       	ldi	r23, 0x00	; 0
    d58a:	ce 01       	movw	r24, r28
    d58c:	01 96       	adiw	r24, 0x01	; 1
    d58e:	77 dd       	rcall	.-1298   	; 0xd07e <rcvr_datablock>
    d590:	89 2b       	or	r24, r25
    d592:	09 f4       	brne	.+2      	; 0xd596 <mmc_disk_ioctl+0x9c>
    d594:	e9 c1       	rjmp	.+978    	; 0xd968 <mmc_disk_ioctl+0x46e>
            {
                if ((csd[0] >> 6) == 1)           /* SDC ver 2.00 */
    d596:	99 81       	ldd	r25, Y+1	; 0x01
    d598:	92 95       	swap	r25
    d59a:	96 95       	lsr	r25
    d59c:	96 95       	lsr	r25
    d59e:	93 70       	andi	r25, 0x03	; 3
    d5a0:	29 85       	ldd	r18, Y+9	; 0x09
    d5a2:	4a 85       	ldd	r20, Y+10	; 0x0a
    d5a4:	88 85       	ldd	r24, Y+8	; 0x08
    d5a6:	91 30       	cpi	r25, 0x01	; 1
    d5a8:	d9 f4       	brne	.+54     	; 0xd5e0 <mmc_disk_ioctl+0xe6>
                {
                    csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
                    *(DWORD*)buff = csize << 10;
    d5aa:	30 e0       	ldi	r19, 0x00	; 0
    d5ac:	32 2f       	mov	r19, r18
    d5ae:	22 27       	eor	r18, r18
    d5b0:	24 0f       	add	r18, r20
    d5b2:	31 1d       	adc	r19, r1
    d5b4:	8f 73       	andi	r24, 0x3F	; 63
    d5b6:	90 e0       	ldi	r25, 0x00	; 0
    d5b8:	a0 e0       	ldi	r26, 0x00	; 0
    d5ba:	b0 e0       	ldi	r27, 0x00	; 0
    d5bc:	dc 01       	movw	r26, r24
    d5be:	99 27       	eor	r25, r25
    d5c0:	88 27       	eor	r24, r24
    d5c2:	01 96       	adiw	r24, 0x01	; 1
    d5c4:	a1 1d       	adc	r26, r1
    d5c6:	b1 1d       	adc	r27, r1
    d5c8:	82 0f       	add	r24, r18
    d5ca:	93 1f       	adc	r25, r19
    d5cc:	a1 1d       	adc	r26, r1
    d5ce:	b1 1d       	adc	r27, r1
    d5d0:	fa e0       	ldi	r31, 0x0A	; 10
    d5d2:	88 0f       	add	r24, r24
    d5d4:	99 1f       	adc	r25, r25
    d5d6:	aa 1f       	adc	r26, r26
    d5d8:	bb 1f       	adc	r27, r27
    d5da:	fa 95       	dec	r31
    d5dc:	d1 f7       	brne	.-12     	; 0xd5d2 <mmc_disk_ioctl+0xd8>
    d5de:	9b c0       	rjmp	.+310    	; 0xd716 <mmc_disk_ioctl+0x21c>
                }                                 /* SDC ver 1.XX or MMC*/
                else
                {
                    n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
                    csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
                    *(DWORD*)buff = csize << (n - 9);
    d5e0:	22 95       	swap	r18
    d5e2:	26 95       	lsr	r18
    d5e4:	26 95       	lsr	r18
    d5e6:	23 70       	andi	r18, 0x03	; 3
    d5e8:	f4 e0       	ldi	r31, 0x04	; 4
    d5ea:	8f 9f       	mul	r24, r31
    d5ec:	c0 01       	movw	r24, r0
    d5ee:	11 24       	eor	r1, r1
    d5f0:	82 0f       	add	r24, r18
    d5f2:	91 1d       	adc	r25, r1
    d5f4:	01 96       	adiw	r24, 0x01	; 1
    d5f6:	2f 81       	ldd	r18, Y+7	; 0x07
    d5f8:	23 70       	andi	r18, 0x03	; 3
    d5fa:	30 e0       	ldi	r19, 0x00	; 0
    d5fc:	32 2f       	mov	r19, r18
    d5fe:	22 27       	eor	r18, r18
    d600:	33 0f       	add	r19, r19
    d602:	33 0f       	add	r19, r19
    d604:	82 0f       	add	r24, r18
    d606:	93 1f       	adc	r25, r19
    d608:	a0 e0       	ldi	r26, 0x00	; 0
    d60a:	b0 e0       	ldi	r27, 0x00	; 0
    d60c:	2e 81       	ldd	r18, Y+6	; 0x06
    d60e:	32 2f       	mov	r19, r18
    d610:	3f 70       	andi	r19, 0x0F	; 15
    d612:	2b 85       	ldd	r18, Y+11	; 0x0b
    d614:	22 1f       	adc	r18, r18
    d616:	22 27       	eor	r18, r18
    d618:	22 1f       	adc	r18, r18
    d61a:	23 0f       	add	r18, r19
    d61c:	43 70       	andi	r20, 0x03	; 3
    d61e:	44 0f       	add	r20, r20
    d620:	42 0f       	add	r20, r18
    d622:	47 50       	subi	r20, 0x07	; 7
    d624:	04 c0       	rjmp	.+8      	; 0xd62e <mmc_disk_ioctl+0x134>
    d626:	88 0f       	add	r24, r24
    d628:	99 1f       	adc	r25, r25
    d62a:	aa 1f       	adc	r26, r26
    d62c:	bb 1f       	adc	r27, r27
    d62e:	4a 95       	dec	r20
    d630:	d2 f7       	brpl	.-12     	; 0xd626 <mmc_disk_ioctl+0x12c>
    d632:	71 c0       	rjmp	.+226    	; 0xd716 <mmc_disk_ioctl+0x21c>
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d634:	80 91 3f 18 	lds	r24, 0x183F	; 0x80183f <CardType>
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d638:	40 e0       	ldi	r20, 0x00	; 0
    d63a:	50 e0       	ldi	r21, 0x00	; 0
            }
            deselect();
            break;

        case GET_BLOCK_SIZE :                     /* Get erase block size in unit of sector (DWORD) */
            if (CardType & CT_SD2)                /* SDv2? */
    d63c:	ba 01       	movw	r22, r20
    d63e:	82 ff       	sbrs	r24, 2
            {
                if (send_cmd(ACMD13, 0) == 0)     /* Read SD status */
    d640:	24 c0       	rjmp	.+72     	; 0xd68a <mmc_disk_ioctl+0x190>
    d642:	8d e8       	ldi	r24, 0x8D	; 141
    d644:	73 dd       	rcall	.-1306   	; 0xd12c <send_cmd>
    d646:	81 11       	cpse	r24, r1
                {
                    xchg_spi(0xFF);
    d648:	8f c1       	rjmp	.+798    	; 0xd968 <mmc_disk_ioctl+0x46e>
    d64a:	8f ef       	ldi	r24, 0xFF	; 255
                    if (rcvr_datablock(csd, 16))  /* Read partial block */
    d64c:	10 dd       	rcall	.-1504   	; 0xd06e <xchg_spi>
    d64e:	60 e1       	ldi	r22, 0x10	; 16
    d650:	70 e0       	ldi	r23, 0x00	; 0
    d652:	ce 01       	movw	r24, r28
    d654:	01 96       	adiw	r24, 0x01	; 1
    d656:	13 dd       	rcall	.-1498   	; 0xd07e <rcvr_datablock>
    d658:	89 2b       	or	r24, r25
    d65a:	09 f4       	brne	.+2      	; 0xd65e <mmc_disk_ioctl+0x164>
    d65c:	85 c1       	rjmp	.+778    	; 0xd968 <mmc_disk_ioctl+0x46e>
    d65e:	50 e3       	ldi	r21, 0x30	; 48
                    {
/* Purge trailing data */
                        for (n = 64 - 16; n; n--) xchg_spi(0xFF);
    d660:	f5 2e       	mov	r15, r21
    d662:	8f ef       	ldi	r24, 0xFF	; 255
    d664:	04 dd       	rcall	.-1528   	; 0xd06e <xchg_spi>
    d666:	fa 94       	dec	r15
    d668:	f1 10       	cpse	r15, r1
    d66a:	fb cf       	rjmp	.-10     	; 0xd662 <mmc_disk_ioctl+0x168>
                        *(DWORD*)buff = 16UL << (csd[10] >> 4);
    d66c:	2b 85       	ldd	r18, Y+11	; 0x0b
    d66e:	22 95       	swap	r18
    d670:	2f 70       	andi	r18, 0x0F	; 15
    d672:	80 e1       	ldi	r24, 0x10	; 16
    d674:	90 e0       	ldi	r25, 0x00	; 0
    d676:	a0 e0       	ldi	r26, 0x00	; 0
    d678:	b0 e0       	ldi	r27, 0x00	; 0
    d67a:	04 c0       	rjmp	.+8      	; 0xd684 <mmc_disk_ioctl+0x18a>
    d67c:	88 0f       	add	r24, r24
    d67e:	99 1f       	adc	r25, r25
    d680:	aa 1f       	adc	r26, r26
    d682:	bb 1f       	adc	r27, r27
    d684:	2a 95       	dec	r18
    d686:	d2 f7       	brpl	.-12     	; 0xd67c <mmc_disk_ioctl+0x182>
                }
            }                                     /* SDv1 or MMCv3 */
            else
            {
/* Read CSD */
                if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
    d688:	46 c0       	rjmp	.+140    	; 0xd716 <mmc_disk_ioctl+0x21c>
    d68a:	89 e0       	ldi	r24, 0x09	; 9
    d68c:	4f dd       	rcall	.-1378   	; 0xd12c <send_cmd>
    d68e:	81 11       	cpse	r24, r1
    d690:	6b c1       	rjmp	.+726    	; 0xd968 <mmc_disk_ioctl+0x46e>
    d692:	60 e1       	ldi	r22, 0x10	; 16
    d694:	70 e0       	ldi	r23, 0x00	; 0
    d696:	ce 01       	movw	r24, r28
    d698:	01 96       	adiw	r24, 0x01	; 1
    d69a:	f1 dc       	rcall	.-1566   	; 0xd07e <rcvr_datablock>
    d69c:	89 2b       	or	r24, r25
    d69e:	09 f4       	brne	.+2      	; 0xd6a2 <mmc_disk_ioctl+0x1a8>
    d6a0:	63 c1       	rjmp	.+710    	; 0xd968 <mmc_disk_ioctl+0x46e>
                {
                    if (CardType & CT_SD1)        /* SDv1 */
    d6a2:	90 91 3f 18 	lds	r25, 0x183F	; 0x80183f <CardType>
    d6a6:	2b 85       	ldd	r18, Y+11	; 0x0b
    d6a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    d6aa:	91 ff       	sbrs	r25, 1
    d6ac:	16 c0       	rjmp	.+44     	; 0xd6da <mmc_disk_ioctl+0x1e0>
                    {
                        *(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
    d6ae:	2f 73       	andi	r18, 0x3F	; 63
    d6b0:	88 1f       	adc	r24, r24
    d6b2:	88 27       	eor	r24, r24
    d6b4:	88 1f       	adc	r24, r24
    d6b6:	90 e0       	ldi	r25, 0x00	; 0
    d6b8:	01 96       	adiw	r24, 0x01	; 1
    d6ba:	82 0f       	add	r24, r18
    d6bc:	91 1d       	adc	r25, r1
    d6be:	82 0f       	add	r24, r18
    d6c0:	91 1d       	adc	r25, r1
    d6c2:	2e 85       	ldd	r18, Y+14	; 0x0e
    d6c4:	22 95       	swap	r18
    d6c6:	26 95       	lsr	r18
    d6c8:	26 95       	lsr	r18
    d6ca:	23 70       	andi	r18, 0x03	; 3
    d6cc:	21 50       	subi	r18, 0x01	; 1
    d6ce:	02 c0       	rjmp	.+4      	; 0xd6d4 <mmc_disk_ioctl+0x1da>
    d6d0:	88 0f       	add	r24, r24
    d6d2:	99 1f       	adc	r25, r25
    d6d4:	2a 95       	dec	r18
    d6d6:	e2 f7       	brpl	.-8      	; 0xd6d0 <mmc_disk_ioctl+0x1d6>
    d6d8:	1c c0       	rjmp	.+56     	; 0xd712 <mmc_disk_ioctl+0x218>
                    }                             /* MMCv3 */
                    else
                    {
                        *(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
    d6da:	38 2f       	mov	r19, r24
    d6dc:	33 70       	andi	r19, 0x03	; 3
    d6de:	82 95       	swap	r24
    d6e0:	86 95       	lsr	r24
    d6e2:	87 70       	andi	r24, 0x07	; 7
    d6e4:	90 e0       	ldi	r25, 0x00	; 0
    d6e6:	f8 e0       	ldi	r31, 0x08	; 8
    d6e8:	3f 9f       	mul	r19, r31
    d6ea:	80 0d       	add	r24, r0
    d6ec:	91 1d       	adc	r25, r1
    d6ee:	11 24       	eor	r1, r1
    d6f0:	01 96       	adiw	r24, 0x01	; 1
    d6f2:	2c 77       	andi	r18, 0x7C	; 124
    d6f4:	30 e0       	ldi	r19, 0x00	; 0
    d6f6:	35 95       	asr	r19
    d6f8:	27 95       	ror	r18
    d6fa:	35 95       	asr	r19
    d6fc:	27 95       	ror	r18
    d6fe:	2f 5f       	subi	r18, 0xFF	; 255
    d700:	3f 4f       	sbci	r19, 0xFF	; 255
    d702:	82 9f       	mul	r24, r18
    d704:	a0 01       	movw	r20, r0
    d706:	83 9f       	mul	r24, r19
    d708:	50 0d       	add	r21, r0
    d70a:	92 9f       	mul	r25, r18
    d70c:	50 0d       	add	r21, r0
    d70e:	11 24       	eor	r1, r1
    d710:	ca 01       	movw	r24, r20
    d712:	a0 e0       	ldi	r26, 0x00	; 0
    d714:	b0 e0       	ldi	r27, 0x00	; 0
    d716:	f8 01       	movw	r30, r16
    d718:	80 83       	st	Z, r24
    d71a:	91 83       	std	Z+1, r25	; 0x01
    d71c:	a2 83       	std	Z+2, r26	; 0x02
    d71e:	b3 83       	std	Z+3, r27	; 0x03
                    }
                    res = RES_OK;
    d720:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
            break;

        case MMC_GET_CSD :                        /* Receive CSD as a data block (16 bytes) */
/* READ_CSD */
            if (send_cmd(CMD9, 0) == 0 && rcvr_datablock(ptr, 16))
    d722:	23 c1       	rjmp	.+582    	; 0xd96a <mmc_disk_ioctl+0x470>
    d724:	40 e0       	ldi	r20, 0x00	; 0
    d726:	50 e0       	ldi	r21, 0x00	; 0
    d728:	ba 01       	movw	r22, r20
    d72a:	89 e0       	ldi	r24, 0x09	; 9
            deselect();
            break;

        case MMC_GET_CID :                        /* Receive CID as a data block (16 bytes) */
/* READ_CID */
            if (send_cmd(CMD10, 0) == 0 && rcvr_datablock(ptr, 16))
    d72c:	04 c0       	rjmp	.+8      	; 0xd736 <mmc_disk_ioctl+0x23c>
    d72e:	40 e0       	ldi	r20, 0x00	; 0
    d730:	50 e0       	ldi	r21, 0x00	; 0
    d732:	ba 01       	movw	r22, r20
    d734:	8a e0       	ldi	r24, 0x0A	; 10
    d736:	fa dc       	rcall	.-1548   	; 0xd12c <send_cmd>
    d738:	81 11       	cpse	r24, r1
    d73a:	16 c1       	rjmp	.+556    	; 0xd968 <mmc_disk_ioctl+0x46e>
    d73c:	60 e1       	ldi	r22, 0x10	; 16
    d73e:	70 e0       	ldi	r23, 0x00	; 0
                res = RES_OK;
            deselect();
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
    d740:	1f c0       	rjmp	.+62     	; 0xd780 <mmc_disk_ioctl+0x286>
    d742:	40 e0       	ldi	r20, 0x00	; 0
    d744:	50 e0       	ldi	r21, 0x00	; 0
    d746:	ba 01       	movw	r22, r20
    d748:	8a e3       	ldi	r24, 0x3A	; 58
    d74a:	f0 dc       	rcall	.-1568   	; 0xd12c <send_cmd>
    d74c:	81 11       	cpse	r24, r1
    d74e:	0c c1       	rjmp	.+536    	; 0xd968 <mmc_disk_ioctl+0x46e>
    d750:	78 01       	movw	r14, r16
    d752:	f4 e0       	ldi	r31, 0x04	; 4
    d754:	ef 0e       	add	r14, r31
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d756:	f1 1c       	adc	r15, r1
    d758:	8f ef       	ldi	r24, 0xFF	; 255
            break;

        case MMC_GET_OCR :                        /* Receive OCR as an R3 resp (4 bytes) */
            if (send_cmd(CMD58, 0) == 0)          /* READ_OCR */
            {
                for (n = 4; n; n--) *ptr++ = xchg_spi(0xFF);
    d75a:	83 d1       	rcall	.+774    	; 0xda62 <mmc_spi_TXRX>
    d75c:	f8 01       	movw	r30, r16
    d75e:	81 93       	st	Z+, r24
    d760:	8f 01       	movw	r16, r30
    d762:	ee 15       	cp	r30, r14
    d764:	ff 05       	cpc	r31, r15
            }
            deselect();
            break;

        case MMC_GET_SDSTAT :                     /* Receive SD statsu as a data block (64 bytes) */
            if (send_cmd(ACMD13, 0) == 0)         /* SD_STATUS */
    d766:	c1 f7       	brne	.-16     	; 0xd758 <mmc_disk_ioctl+0x25e>
    d768:	db cf       	rjmp	.-74     	; 0xd720 <mmc_disk_ioctl+0x226>
    d76a:	40 e0       	ldi	r20, 0x00	; 0
    d76c:	50 e0       	ldi	r21, 0x00	; 0
    d76e:	ba 01       	movw	r22, r20
    d770:	8d e8       	ldi	r24, 0x8D	; 141
    d772:	dc dc       	rcall	.-1608   	; 0xd12c <send_cmd>
            {
                xchg_spi(0xFF);
    d774:	81 11       	cpse	r24, r1
    d776:	f8 c0       	rjmp	.+496    	; 0xd968 <mmc_disk_ioctl+0x46e>
    d778:	8f ef       	ldi	r24, 0xFF	; 255
                if (rcvr_datablock(ptr, 64)) res = RES_OK;
    d77a:	79 dc       	rcall	.-1806   	; 0xd06e <xchg_spi>
    d77c:	60 e4       	ldi	r22, 0x40	; 64
    d77e:	70 e0       	ldi	r23, 0x00	; 0
    d780:	c8 01       	movw	r24, r16
    d782:	7d dc       	rcall	.-1798   	; 0xd07e <rcvr_datablock>
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    d784:	01 e0       	ldi	r16, 0x01	; 1
    d786:	10 e0       	ldi	r17, 0x00	; 0
    d788:	89 2b       	or	r24, r25
    d78a:	09 f4       	brne	.+2      	; 0xd78e <mmc_disk_ioctl+0x294>
    d78c:	ef c0       	rjmp	.+478    	; 0xd96c <mmc_disk_ioctl+0x472>
    d78e:	ea c0       	rjmp	.+468    	; 0xd964 <mmc_disk_ioctl+0x46a>
void power_off (void)
{
/* Disable SPI function */
/* De-configure MOSI/MISO/SCLK/CS pins (set hi-z) */
/* Turn socket power off (nothing to do if no power controls) */
    mmc_power_off();
    d790:	97 d1       	rcall	.+814    	; 0xdac0 <mmc_power_off>
    d792:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
            deselect();
            break;

        case CTRL_POWER_OFF :                     /* Power off */
            power_off();
            Stat |= STA_NOINIT;
    d796:	81 60       	ori	r24, 0x01	; 1
    d798:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    d79c:	00 e0       	ldi	r16, 0x00	; 0
            res = RES_OK;
    d79e:	eb c0       	rjmp	.+470    	; 0xd976 <mmc_disk_ioctl+0x47c>
    d7a0:	fb 01       	movw	r30, r22
            break;
#if _USE_ISDIO
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    d7a2:	43 81       	ldd	r20, Z+3	; 0x03
    d7a4:	54 81       	ldd	r21, Z+4	; 0x04
    d7a6:	65 81       	ldd	r22, Z+5	; 0x05
    d7a8:	76 81       	ldd	r23, Z+6	; 0x06
    d7aa:	39 e0       	ldi	r19, 0x09	; 9
    d7ac:	44 0f       	add	r20, r20
    d7ae:	55 1f       	adc	r21, r21
    d7b0:	66 1f       	adc	r22, r22
    d7b2:	77 1f       	adc	r23, r23
    d7b4:	3a 95       	dec	r19
    d7b6:	d1 f7       	brne	.-12     	; 0xd7ac <mmc_disk_ioctl+0x2b2>
    d7b8:	70 68       	ori	r23, 0x80	; 128
    d7ba:	80 81       	ld	r24, Z
    d7bc:	90 e0       	ldi	r25, 0x00	; 0
    d7be:	a0 e0       	ldi	r26, 0x00	; 0
    d7c0:	b0 e0       	ldi	r27, 0x00	; 0
    d7c2:	2c e1       	ldi	r18, 0x1C	; 28
    d7c4:	88 0f       	add	r24, r24
    d7c6:	99 1f       	adc	r25, r25
    d7c8:	aa 1f       	adc	r26, r26
    d7ca:	bb 1f       	adc	r27, r27
    d7cc:	2a 95       	dec	r18
    d7ce:	d1 f7       	brne	.-12     	; 0xd7c4 <mmc_disk_ioctl+0x2ca>
    d7d0:	48 2b       	or	r20, r24
    d7d2:	59 2b       	or	r21, r25
    d7d4:	6a 2b       	or	r22, r26
    d7d6:	7b 2b       	or	r23, r27
    d7d8:	81 81       	ldd	r24, Z+1	; 0x01
    d7da:	92 81       	ldd	r25, Z+2	; 0x02
    d7dc:	01 97       	sbiw	r24, 0x01	; 1
    d7de:	91 70       	andi	r25, 0x01	; 1
    d7e0:	a0 e0       	ldi	r26, 0x00	; 0
    d7e2:	b0 e0       	ldi	r27, 0x00	; 0
    d7e4:	48 2b       	or	r20, r24
    d7e6:	59 2b       	or	r21, r25
    d7e8:	6a 2b       	or	r22, r26
    d7ea:	7b 2b       	or	r23, r27
    d7ec:	80 e3       	ldi	r24, 0x30	; 48
    d7ee:	9e dc       	rcall	.-1732   	; 0xd12c <send_cmd>
            {
                mmc_set_ms_timeout(1000);
    d7f0:	81 11       	cpse	r24, r1
    d7f2:	ba c0       	rjmp	.+372    	; 0xd968 <mmc_disk_ioctl+0x46e>
    d7f4:	88 ee       	ldi	r24, 0xE8	; 232
    d7f6:	93 e0       	ldi	r25, 0x03	; 3
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d7f8:	37 d1       	rcall	.+622    	; 0xda68 <mmc_set_ms_timeout>
    d7fa:	8f ef       	ldi	r24, 0xFF	; 255
    d7fc:	32 d1       	rcall	.+612    	; 0xda62 <mmc_spi_TXRX>
        case ISDIO_READ:
            sdi = buff;
            if (send_cmd(CMD48, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
            {
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
    d7fe:	8f 3f       	cpi	r24, 0xFF	; 255
    d800:	21 f4       	brne	.+8      	; 0xd80a <mmc_disk_ioctl+0x310>
    d802:	39 d1       	rcall	.+626    	; 0xda76 <mmc_test_timeout>
    d804:	89 2b       	or	r24, r25
    d806:	c9 f3       	breq	.-14     	; 0xd7fa <mmc_disk_ioctl+0x300>
    d808:	af c0       	rjmp	.+350    	; 0xd968 <mmc_disk_ioctl+0x46e>
                    ;
                if (rc == 0xFE)
    d80a:	8e 3f       	cpi	r24, 0xFE	; 254
    d80c:	09 f0       	breq	.+2      	; 0xd810 <mmc_disk_ioctl+0x316>
    d80e:	ac c0       	rjmp	.+344    	; 0xd968 <mmc_disk_ioctl+0x46e>
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    d810:	f8 01       	movw	r30, r16
    d812:	e7 80       	ldd	r14, Z+7	; 0x07
    d814:	f0 84       	ldd	r15, Z+8	; 0x08
    d816:	c1 80       	ldd	r12, Z+1	; 0x01
    d818:	d2 80       	ldd	r13, Z+2	; 0x02
    d81a:	ce 0c       	add	r12, r14
    d81c:	df 1c       	adc	r13, r15
    d81e:	ce 14       	cp	r12, r14
    d820:	df 04       	cpc	r13, r15
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d822:	31 f0       	breq	.+12     	; 0xd830 <mmc_disk_ioctl+0x336>
    d824:	8f ef       	ldi	r24, 0xFF	; 255
    d826:	1d d1       	rcall	.+570    	; 0xda62 <mmc_spi_TXRX>
                mmc_set_ms_timeout(1000);
                while( (rc = xchg_spi(0xFF)) == 0xFF && !mmc_test_timeout() )
                    ;
                if (rc == 0xFE)
                {
                    for (bp = sdi->data, dc = sdi->ndata; dc; dc--) *bp++ = xchg_spi(0xFF);
    d828:	f7 01       	movw	r30, r14
    d82a:	81 93       	st	Z+, r24
    d82c:	7f 01       	movw	r14, r30
    d82e:	f7 cf       	rjmp	.-18     	; 0xd81e <mmc_disk_ioctl+0x324>
                    for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    d830:	f8 01       	movw	r30, r16
    d832:	81 81       	ldd	r24, Z+1	; 0x01
    d834:	92 81       	ldd	r25, Z+2	; 0x02
    d836:	02 e0       	ldi	r16, 0x02	; 2
    d838:	12 e0       	ldi	r17, 0x02	; 2
    d83a:	08 1b       	sub	r16, r24
    d83c:	19 0b       	sbc	r17, r25
    d83e:	01 15       	cp	r16, r1
    d840:	11 05       	cpc	r17, r1
    d842:	09 f4       	brne	.+2      	; 0xd846 <mmc_disk_ioctl+0x34c>
    d844:	6d cf       	rjmp	.-294    	; 0xd720 <mmc_disk_ioctl+0x226>
    d846:	8f ef       	ldi	r24, 0xFF	; 255
    d848:	12 dc       	rcall	.-2012   	; 0xd06e <xchg_spi>
    d84a:	01 50       	subi	r16, 0x01	; 1
    d84c:	11 09       	sbc	r17, r1
    d84e:	f7 cf       	rjmp	.-18     	; 0xd83e <mmc_disk_ioctl+0x344>
    d850:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_WRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x80000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | ((sdi->ndata - 1) & 0x1FF)) == 0)
    d852:	43 81       	ldd	r20, Z+3	; 0x03
    d854:	54 81       	ldd	r21, Z+4	; 0x04
    d856:	65 81       	ldd	r22, Z+5	; 0x05
    d858:	76 81       	ldd	r23, Z+6	; 0x06
    d85a:	39 e0       	ldi	r19, 0x09	; 9
    d85c:	44 0f       	add	r20, r20
    d85e:	55 1f       	adc	r21, r21
    d860:	66 1f       	adc	r22, r22
    d862:	77 1f       	adc	r23, r23
    d864:	3a 95       	dec	r19
    d866:	d1 f7       	brne	.-12     	; 0xd85c <mmc_disk_ioctl+0x362>
    d868:	70 68       	ori	r23, 0x80	; 128
    d86a:	80 81       	ld	r24, Z
    d86c:	90 e0       	ldi	r25, 0x00	; 0
    d86e:	a0 e0       	ldi	r26, 0x00	; 0
    d870:	b0 e0       	ldi	r27, 0x00	; 0
    d872:	2c e1       	ldi	r18, 0x1C	; 28
    d874:	88 0f       	add	r24, r24
    d876:	99 1f       	adc	r25, r25
    d878:	aa 1f       	adc	r26, r26
    d87a:	bb 1f       	adc	r27, r27
    d87c:	2a 95       	dec	r18
    d87e:	d1 f7       	brne	.-12     	; 0xd874 <mmc_disk_ioctl+0x37a>
    d880:	48 2b       	or	r20, r24
    d882:	59 2b       	or	r21, r25
    d884:	6a 2b       	or	r22, r26
    d886:	7b 2b       	or	r23, r27
    d888:	81 81       	ldd	r24, Z+1	; 0x01
    d88a:	92 81       	ldd	r25, Z+2	; 0x02
    d88c:	01 97       	sbiw	r24, 0x01	; 1
    d88e:	91 70       	andi	r25, 0x01	; 1
    d890:	a0 e0       	ldi	r26, 0x00	; 0
    d892:	b0 e0       	ldi	r27, 0x00	; 0
    d894:	48 2b       	or	r20, r24
    d896:	59 2b       	or	r21, r25
    d898:	6a 2b       	or	r22, r26
    d89a:	7b 2b       	or	r23, r27
    d89c:	81 e3       	ldi	r24, 0x31	; 49
    d89e:	46 dc       	rcall	.-1908   	; 0xd12c <send_cmd>
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    d8a0:	81 11       	cpse	r24, r1
    d8a2:	62 c0       	rjmp	.+196    	; 0xd968 <mmc_disk_ioctl+0x46e>
    d8a4:	8f ef       	ldi	r24, 0xFF	; 255
    d8a6:	e3 db       	rcall	.-2106   	; 0xd06e <xchg_spi>
    d8a8:	8e ef       	ldi	r24, 0xFE	; 254
    d8aa:	e1 db       	rcall	.-2110   	; 0xd06e <xchg_spi>
                for (bp = sdi->data, dc = sdi->ndata; dc; dc--) xchg_spi(*bp++);
    d8ac:	f8 01       	movw	r30, r16
    d8ae:	e7 80       	ldd	r14, Z+7	; 0x07
    d8b0:	f0 84       	ldd	r15, Z+8	; 0x08
    d8b2:	c1 80       	ldd	r12, Z+1	; 0x01
    d8b4:	d2 80       	ldd	r13, Z+2	; 0x02
    d8b6:	ce 0c       	add	r12, r14
    d8b8:	df 1c       	adc	r13, r15
    d8ba:	ec 14       	cp	r14, r12
    d8bc:	fd 04       	cpc	r15, r13
    d8be:	29 f0       	breq	.+10     	; 0xd8ca <mmc_disk_ioctl+0x3d0>
    d8c0:	f7 01       	movw	r30, r14
    d8c2:	81 91       	ld	r24, Z+
    d8c4:	7f 01       	movw	r14, r30
    d8c6:	d3 db       	rcall	.-2138   	; 0xd06e <xchg_spi>
    d8c8:	f8 cf       	rjmp	.-16     	; 0xd8ba <mmc_disk_ioctl+0x3c0>
                for (dc = 514 - sdi->ndata; dc; dc--) xchg_spi(0xFF);
    d8ca:	f8 01       	movw	r30, r16
    d8cc:	81 81       	ldd	r24, Z+1	; 0x01
    d8ce:	92 81       	ldd	r25, Z+2	; 0x02
    d8d0:	02 e0       	ldi	r16, 0x02	; 2
    d8d2:	12 e0       	ldi	r17, 0x02	; 2
    d8d4:	08 1b       	sub	r16, r24
    d8d6:	19 0b       	sbc	r17, r25
    d8d8:	8f ef       	ldi	r24, 0xFF	; 255
    d8da:	01 15       	cp	r16, r1
    d8dc:	11 05       	cpc	r17, r1
    d8de:	09 f4       	brne	.+2      	; 0xd8e2 <mmc_disk_ioctl+0x3e8>
    d8e0:	3b c0       	rjmp	.+118    	; 0xd958 <mmc_disk_ioctl+0x45e>
    d8e2:	c5 db       	rcall	.-2166   	; 0xd06e <xchg_spi>
    d8e4:	01 50       	subi	r16, 0x01	; 1
    d8e6:	11 09       	sbc	r17, r1
    d8e8:	f7 cf       	rjmp	.-18     	; 0xd8d8 <mmc_disk_ioctl+0x3de>
    d8ea:	fb 01       	movw	r30, r22
            deselect();
            break;

        case ISDIO_MRITE:
            sdi = buff;
            if (send_cmd(CMD49, 0x84000000 | (DWORD)sdi->func << 28 | (DWORD)sdi->addr << 9 | sdi->ndata >> 8) == 0)
    d8ec:	43 81       	ldd	r20, Z+3	; 0x03
    d8ee:	54 81       	ldd	r21, Z+4	; 0x04
    d8f0:	65 81       	ldd	r22, Z+5	; 0x05
    d8f2:	76 81       	ldd	r23, Z+6	; 0x06
    d8f4:	89 e0       	ldi	r24, 0x09	; 9
    d8f6:	44 0f       	add	r20, r20
    d8f8:	55 1f       	adc	r21, r21
    d8fa:	66 1f       	adc	r22, r22
    d8fc:	77 1f       	adc	r23, r23
    d8fe:	8a 95       	dec	r24
    d900:	d1 f7       	brne	.-12     	; 0xd8f6 <mmc_disk_ioctl+0x3fc>
    d902:	74 68       	ori	r23, 0x84	; 132
    d904:	80 81       	ld	r24, Z
    d906:	90 e0       	ldi	r25, 0x00	; 0
    d908:	a0 e0       	ldi	r26, 0x00	; 0
    d90a:	b0 e0       	ldi	r27, 0x00	; 0
    d90c:	2c e1       	ldi	r18, 0x1C	; 28
    d90e:	88 0f       	add	r24, r24
    d910:	99 1f       	adc	r25, r25
    d912:	aa 1f       	adc	r26, r26
    d914:	bb 1f       	adc	r27, r27
    d916:	2a 95       	dec	r18
    d918:	d1 f7       	brne	.-12     	; 0xd90e <mmc_disk_ioctl+0x414>
    d91a:	48 2b       	or	r20, r24
    d91c:	59 2b       	or	r21, r25
    d91e:	6a 2b       	or	r22, r26
    d920:	7b 2b       	or	r23, r27
    d922:	82 81       	ldd	r24, Z+2	; 0x02
    d924:	90 e0       	ldi	r25, 0x00	; 0
    d926:	a0 e0       	ldi	r26, 0x00	; 0
    d928:	b0 e0       	ldi	r27, 0x00	; 0
    d92a:	48 2b       	or	r20, r24
    d92c:	59 2b       	or	r21, r25
    d92e:	6a 2b       	or	r22, r26
    d930:	7b 2b       	or	r23, r27
            {
                xchg_spi(0xFF); xchg_spi(0xFE);
    d932:	81 e3       	ldi	r24, 0x31	; 49
    d934:	fb db       	rcall	.-2058   	; 0xd12c <send_cmd>
    d936:	81 11       	cpse	r24, r1
    d938:	17 c0       	rjmp	.+46     	; 0xd968 <mmc_disk_ioctl+0x46e>
    d93a:	8f ef       	ldi	r24, 0xFF	; 255
    d93c:	98 db       	rcall	.-2256   	; 0xd06e <xchg_spi>
                xchg_spi(sdi->ndata);
    d93e:	8e ef       	ldi	r24, 0xFE	; 254
    d940:	96 db       	rcall	.-2260   	; 0xd06e <xchg_spi>
    d942:	f8 01       	movw	r30, r16
    d944:	81 81       	ldd	r24, Z+1	; 0x01
    d946:	93 db       	rcall	.-2266   	; 0xd06e <xchg_spi>
    d948:	01 e0       	ldi	r16, 0x01	; 1
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
    d94a:	12 e0       	ldi	r17, 0x02	; 2
    d94c:	8f ef       	ldi	r24, 0xFF	; 255
    d94e:	8f db       	rcall	.-2274   	; 0xd06e <xchg_spi>
    d950:	01 50       	subi	r16, 0x01	; 1
    d952:	11 09       	sbc	r17, r1
    d954:	d9 f7       	brne	.-10     	; 0xd94c <mmc_disk_ioctl+0x452>
static
BYTE xchg_spi (                                   /* Returns received data */
BYTE dat                                          /* Data to be sent */
)
{
    dat = mmc_spi_TXRX(dat);
    d956:	8f ef       	ldi	r24, 0xFF	; 255
    d958:	84 d0       	rcall	.+264    	; 0xda62 <mmc_spi_TXRX>
    d95a:	8f 71       	andi	r24, 0x1F	; 31
    {
        deselect();
        return RES_NOTRDY;
	}

    res = RES_ERROR;
    d95c:	01 e0       	ldi	r16, 0x01	; 1
    d95e:	10 e0       	ldi	r17, 0x00	; 0
    d960:	85 30       	cpi	r24, 0x05	; 5
    d962:	21 f4       	brne	.+8      	; 0xd96c <mmc_disk_ioctl+0x472>
    d964:	00 e0       	ldi	r16, 0x00	; 0
    d966:	02 c0       	rjmp	.+4      	; 0xd96c <mmc_disk_ioctl+0x472>
    d968:	01 e0       	ldi	r16, 0x01	; 1
    d96a:	10 e0       	ldi	r17, 0x00	; 0
    d96c:	82 db       	rcall	.-2300   	; 0xd072 <deselect>
                xchg_spi(0xFF); xchg_spi(0xFE);
                xchg_spi(sdi->ndata);
                for (dc = 513; dc; dc--) xchg_spi(0xFF);
                if ((xchg_spi(0xFF) & 0x1F) == 0x05) res = RES_OK;
            }
            deselect();
    d96e:	04 c0       	rjmp	.+8      	; 0xd978 <mmc_disk_ioctl+0x47e>
    d970:	03 e0       	ldi	r16, 0x03	; 3
            break;
    d972:	01 c0       	rjmp	.+2      	; 0xd976 <mmc_disk_ioctl+0x47c>
    BYTE rc, *bp;
    UINT dc;
#endif

    if (Stat & STA_NOINIT)
        return RES_NOTRDY;
    d974:	04 e0       	ldi	r16, 0x04	; 4
    d976:	10 e0       	ldi	r17, 0x00	; 0
            }
            deselect();
            break;
#endif
        default:
            res = RES_PARERR;
    d978:	c8 01       	movw	r24, r16
    d97a:	60 96       	adiw	r28, 0x10	; 16
    }

    return res;
}
    d97c:	e8 e0       	ldi	r30, 0x08	; 8
    d97e:	0c 94 fe e0 	jmp	0x1c1fc	; 0x1c1fc <__epilogue_restores__+0x14>

0000d982 <mmc_disk_timerproc>:
    d982:	cf 93       	push	r28
    d984:	80 91 41 18 	lds	r24, 0x1841	; 0x801841 <Timer1>
{
    BYTE n;
    BYTE s;

    n = Timer1;                                   /* 100Hz decrement timer */
    if (n) Timer1 = --n;
    d988:	88 23       	and	r24, r24
    d98a:	19 f0       	breq	.+6      	; 0xd992 <mmc_disk_timerproc+0x10>
    d98c:	81 50       	subi	r24, 0x01	; 1
    d98e:	80 93 41 18 	sts	0x1841, r24	; 0x801841 <Timer1>
    n = Timer2;
    d992:	80 91 40 18 	lds	r24, 0x1840	; 0x801840 <Timer2>
    if (n) Timer2 = --n;
    d996:	88 23       	and	r24, r24
    d998:	19 f0       	breq	.+6      	; 0xd9a0 <mmc_disk_timerproc+0x1e>
    d99a:	81 50       	subi	r24, 0x01	; 1
    d99c:	80 93 40 18 	sts	0x1840, r24	; 0x801840 <Timer2>

    s = Stat;
    d9a0:	c0 91 35 01 	lds	r28, 0x0135	; 0x800135 <Stat>
        s |= STA_PROTECT;
    else                                          /* Write enabled */
        s &= ~STA_PROTECT;
#endif

    if (MMC_CD)                                   /* Card inserted */
    d9a4:	8e d0       	rcall	.+284    	; 0xdac2 <mmc_ins_status>
    d9a6:	89 2b       	or	r24, r25
    d9a8:	11 f0       	breq	.+4      	; 0xd9ae <mmc_disk_timerproc+0x2c>
	{
        s &= ~STA_NODISK;
    d9aa:	cd 7f       	andi	r28, 0xFD	; 253
    d9ac:	04 c0       	rjmp	.+8      	; 0xd9b6 <mmc_disk_timerproc+0x34>
	}
    else                                          /* Socket empty */
	{	
        s |= (STA_NODISK | STA_NOINIT);
    d9ae:	c3 60       	ori	r28, 0x03	; 3
		set_error(1);
    d9b0:	81 e0       	ldi	r24, 0x01	; 1
    d9b2:	0e 94 3e 24 	call	0x487c	; 0x487c <set_error>
	}

    Stat = s;                                     /* Update MMC status */
    d9b6:	c0 93 35 01 	sts	0x0135, r28	; 0x800135 <Stat>
}
    d9ba:	cf 91       	pop	r28
    d9bc:	08 95       	ret

0000d9be <mmc_install_timer>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    d9be:	00 d0       	rcall	.+0      	; 0xd9c0 <mmc_install_timer+0x2>
    d9c0:	1f 92       	push	r1
    d9c2:	10 92 4b 18 	sts	0x184B, r1	; 0x80184b <_mmc_timeout+0x1>
    d9c6:	10 92 4a 18 	sts	0x184A, r1	; 0x80184a <_mmc_timeout>
    d9ca:	61 e0       	ldi	r22, 0x01	; 1
    d9cc:	70 e0       	ldi	r23, 0x00	; 0
    d9ce:	8e e6       	ldi	r24, 0x6E	; 110
    d9d0:	9d e6       	ldi	r25, 0x6D	; 109
    d9d2:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <set_timers>
    d9d6:	01 96       	adiw	r24, 0x01	; 1
    d9d8:	51 f4       	brne	.+20     	; 0xd9ee <mmc_install_timer+0x30>
    d9da:	8b e3       	ldi	r24, 0x3B	; 59
    d9dc:	98 e0       	ldi	r25, 0x08	; 8
    d9de:	a0 e0       	ldi	r26, 0x00	; 0
    d9e0:	ed b7       	in	r30, 0x3d	; 61
    d9e2:	fe b7       	in	r31, 0x3e	; 62
    d9e4:	81 83       	std	Z+1, r24	; 0x01
    d9e6:	92 83       	std	Z+2, r25	; 0x02
    d9e8:	a3 83       	std	Z+3, r26	; 0x03
    d9ea:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    d9ee:	0f 90       	pop	r0
    d9f0:	0f 90       	pop	r0
    d9f2:	0f 90       	pop	r0
    d9f4:	08 95       	ret

0000d9f6 <mmc_spi_begin>:
    d9f6:	60 91 46 18 	lds	r22, 0x1846	; 0x801846 <_mmc_clock>
    d9fa:	70 91 47 18 	lds	r23, 0x1847	; 0x801847 <_mmc_clock+0x1>
    d9fe:	80 91 48 18 	lds	r24, 0x1848	; 0x801848 <_mmc_clock+0x2>
    da02:	90 91 49 18 	lds	r25, 0x1849	; 0x801849 <_mmc_clock+0x3>
    da06:	4b e0       	ldi	r20, 0x0B	; 11
    da08:	50 e0       	ldi	r21, 0x00	; 0
    da0a:	0c 94 e5 23 	jmp	0x47ca	; 0x47ca <spi_begin>
    da0e:	08 95       	ret

0000da10 <mmc_spi_end>:
    da10:	8b e0       	ldi	r24, 0x0B	; 11
    da12:	0c 94 81 23 	jmp	0x4702	; 0x4702 <spi_end>
    da16:	08 95       	ret

0000da18 <mmc_slow>:
    da18:	80 e2       	ldi	r24, 0x20	; 32
    da1a:	91 ea       	ldi	r25, 0xA1	; 161
    da1c:	a7 e0       	ldi	r26, 0x07	; 7
    da1e:	b0 e0       	ldi	r27, 0x00	; 0
    da20:	80 93 46 18 	sts	0x1846, r24	; 0x801846 <_mmc_clock>
    da24:	90 93 47 18 	sts	0x1847, r25	; 0x801847 <_mmc_clock+0x1>
    da28:	a0 93 48 18 	sts	0x1848, r26	; 0x801848 <_mmc_clock+0x2>
    da2c:	b0 93 49 18 	sts	0x1849, r27	; 0x801849 <_mmc_clock+0x3>
    da30:	08 95       	ret

0000da32 <mmc_spi_init>:
    da32:	8b e0       	ldi	r24, 0x0B	; 11
    da34:	0e 94 7f 23 	call	0x46fe	; 0x46fe <chip_select_init>
    da38:	ef cf       	rjmp	.-34     	; 0xda18 <mmc_slow>
    da3a:	08 95       	ret

0000da3c <mmc_fast>:
    da3c:	80 ea       	ldi	r24, 0xA0	; 160
    da3e:	95 e2       	ldi	r25, 0x25	; 37
    da40:	a6 e2       	ldi	r26, 0x26	; 38
    da42:	b0 e0       	ldi	r27, 0x00	; 0
    da44:	80 93 46 18 	sts	0x1846, r24	; 0x801846 <_mmc_clock>
    da48:	90 93 47 18 	sts	0x1847, r25	; 0x801847 <_mmc_clock+0x1>
    da4c:	a0 93 48 18 	sts	0x1848, r26	; 0x801848 <_mmc_clock+0x2>
    da50:	b0 93 49 18 	sts	0x1849, r27	; 0x801849 <_mmc_clock+0x3>
    da54:	08 95       	ret

0000da56 <mmc_spi_TX_buffer>:
    da56:	0c 94 b1 23 	jmp	0x4762	; 0x4762 <spi_TX_buffer>
    da5a:	08 95       	ret

0000da5c <mmc_spi_RX_buffer>:
    da5c:	0c 94 b3 23 	jmp	0x4766	; 0x4766 <spi_RX_buffer>
    da60:	08 95       	ret

0000da62 <mmc_spi_TXRX>:
    da62:	0c 94 2d 24 	jmp	0x485a	; 0x485a <spi_TXRX>
    da66:	08 95       	ret

0000da68 <mmc_set_ms_timeout>:
    da68:	f8 94       	cli
    da6a:	90 93 4b 18 	sts	0x184B, r25	; 0x80184b <_mmc_timeout+0x1>
    da6e:	80 93 4a 18 	sts	0x184A, r24	; 0x80184a <_mmc_timeout>
    da72:	78 94       	sei
    da74:	08 95       	ret

0000da76 <mmc_test_timeout>:
    da76:	00 d0       	rcall	.+0      	; 0xda78 <mmc_test_timeout+0x2>
    da78:	1f 92       	push	r1
    da7a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    da7e:	81 fd       	sbrc	r24, 1
    da80:	15 c0       	rjmp	.+42     	; 0xdaac <mmc_test_timeout+0x36>
    da82:	80 91 4a 18 	lds	r24, 0x184A	; 0x80184a <_mmc_timeout>
    da86:	90 91 4b 18 	lds	r25, 0x184B	; 0x80184b <_mmc_timeout+0x1>
    da8a:	89 2b       	or	r24, r25
    da8c:	91 f4       	brne	.+36     	; 0xdab2 <mmc_test_timeout+0x3c>
    da8e:	8e e2       	ldi	r24, 0x2E	; 46
    da90:	98 e0       	ldi	r25, 0x08	; 8
    da92:	a0 e0       	ldi	r26, 0x00	; 0
    da94:	ed b7       	in	r30, 0x3d	; 61
    da96:	fe b7       	in	r31, 0x3e	; 62
    da98:	81 83       	std	Z+1, r24	; 0x01
    da9a:	92 83       	std	Z+2, r25	; 0x02
    da9c:	a3 83       	std	Z+3, r26	; 0x03
    da9e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    daa2:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <Stat>
    daa6:	83 60       	ori	r24, 0x03	; 3
    daa8:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <Stat>
    daac:	81 e0       	ldi	r24, 0x01	; 1
    daae:	90 e0       	ldi	r25, 0x00	; 0
    dab0:	02 c0       	rjmp	.+4      	; 0xdab6 <mmc_test_timeout+0x40>
    dab2:	80 e0       	ldi	r24, 0x00	; 0
    dab4:	90 e0       	ldi	r25, 0x00	; 0
    dab6:	0f 90       	pop	r0
    dab8:	0f 90       	pop	r0
    daba:	0f 90       	pop	r0
    dabc:	08 95       	ret

0000dabe <mmc_power_on>:
    dabe:	08 95       	ret

0000dac0 <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    dac0:	08 95       	ret

0000dac2 <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
	// HI when card is NOT inserted
	if( GPIO_PIN_RD(GPIO_C7) )
    dac2:	3f 98       	cbi	0x07, 7	; 7
    dac4:	86 b1       	in	r24, 0x06	; 6
    dac6:	08 2e       	mov	r0, r24
    dac8:	00 0c       	add	r0, r0
    daca:	99 0b       	sbc	r25, r25
    dacc:	80 95       	com	r24
    dace:	90 95       	com	r25
		return (0);
	else
		return(1);;	
}
    dad0:	89 2f       	mov	r24, r25
    dad2:	88 1f       	adc	r24, r24
    dad4:	88 27       	eor	r24, r24
    dad6:	88 1f       	adc	r24, r24
    dad8:	90 e0       	ldi	r25, 0x00	; 0
    dada:	08 95       	ret

0000dadc <mmc_task>:
 @brief 1000HZ timer task
 @return void
*/
static void mmc_task(void)
{
    if(_mmc_timeout)
    dadc:	80 91 4a 18 	lds	r24, 0x184A	; 0x80184a <_mmc_timeout>
    dae0:	90 91 4b 18 	lds	r25, 0x184B	; 0x80184b <_mmc_timeout+0x1>
    dae4:	00 97       	sbiw	r24, 0x00	; 0
    dae6:	29 f0       	breq	.+10     	; 0xdaf2 <mmc_task+0x16>
        _mmc_timeout--;
    dae8:	01 97       	sbiw	r24, 0x01	; 1
    daea:	90 93 4b 18 	sts	0x184B, r25	; 0x80184b <_mmc_timeout+0x1>
    daee:	80 93 4a 18 	sts	0x184A, r24	; 0x80184a <_mmc_timeout>

// 100HZ
    if(_mmc_pre++  < 10)
    daf2:	80 91 44 18 	lds	r24, 0x1844	; 0x801844 <_mmc_pre>
    daf6:	90 91 45 18 	lds	r25, 0x1845	; 0x801845 <_mmc_pre+0x1>
    dafa:	8a 30       	cpi	r24, 0x0A	; 10
    dafc:	91 05       	cpc	r25, r1
    dafe:	30 f4       	brcc	.+12     	; 0xdb0c <mmc_task+0x30>
    db00:	01 96       	adiw	r24, 0x01	; 1
    db02:	90 93 45 18 	sts	0x1845, r25	; 0x801845 <_mmc_pre+0x1>
    db06:	80 93 44 18 	sts	0x1844, r24	; 0x801844 <_mmc_pre>
    db0a:	08 95       	ret
        return;

    _mmc_pre = 0;
    db0c:	10 92 45 18 	sts	0x1845, r1	; 0x801845 <_mmc_pre+0x1>
    db10:	10 92 44 18 	sts	0x1844, r1	; 0x801844 <_mmc_pre>

	if(!mmc_ins_status())
    db14:	d6 df       	rcall	.-84     	; 0xdac2 <mmc_ins_status>
    db16:	89 2b       	or	r24, r25
    db18:	19 f4       	brne	.+6      	; 0xdb20 <mmc_task+0x44>
		set_error(1);
    db1a:	81 e0       	ldi	r24, 0x01	; 1
    db1c:	0e 94 3e 24 	call	0x487c	; 0x487c <set_error>

    mmc_disk_timerproc();
    db20:	30 cf       	rjmp	.-416    	; 0xd982 <mmc_disk_timerproc>
    db22:	08 95       	ret

0000db24 <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    db24:	ab e0       	ldi	r26, 0x0B	; 11
    db26:	b0 e0       	ldi	r27, 0x00	; 0
    db28:	e8 e9       	ldi	r30, 0x98	; 152
    db2a:	fd e6       	ldi	r31, 0x6D	; 109
    db2c:	0c 94 e4 e0 	jmp	0x1c1c8	; 0x1c1c8 <__prologue_saves__+0x18>
    db30:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    db32:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <Stat>
	clear_error();
    db36:	0e 94 43 24 	call	0x4886	; 0x4886 <clear_error>

	// Card Detect
	GPIO_PIN_LATCH_LOW(GPIO_C7);
    db3a:	47 98       	cbi	0x08, 7	; 8
	GPIO_PIN_DIR_IN(GPIO_C7);
    db3c:	3f 98       	cbi	0x07, 7	; 7

    mmc_spi_init();
    db3e:	79 df       	rcall	.-270    	; 0xda32 <mmc_spi_init>

    if( verbose)
    db40:	e1 14       	cp	r14, r1
    db42:	f1 04       	cpc	r15, r1
    db44:	51 f0       	breq	.+20     	; 0xdb5a <mmc_init+0x36>
    {
        printf("START MMC INIT\n");
    db46:	8e e1       	ldi	r24, 0x1E	; 30
    db48:	98 e0       	ldi	r25, 0x08	; 8
    db4a:	a0 e0       	ldi	r26, 0x00	; 0
    db4c:	ed b7       	in	r30, 0x3d	; 61
    db4e:	fe b7       	in	r31, 0x3e	; 62
    db50:	81 83       	std	Z+1, r24	; 0x01
    db52:	92 83       	std	Z+2, r25	; 0x02
    db54:	a3 83       	std	Z+3, r26	; 0x03
    db56:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    }
// we only install timers once!
    if(!mmc_init_flag)
    db5a:	80 91 42 18 	lds	r24, 0x1842	; 0x801842 <mmc_init_flag>
    db5e:	90 91 43 18 	lds	r25, 0x1843	; 0x801843 <mmc_init_flag+0x1>
    db62:	89 2b       	or	r24, r25
        mmc_install_timer();
    db64:	09 f4       	brne	.+2      	; 0xdb68 <mmc_init+0x44>

	if(!mmc_ins_status())
    db66:	2b df       	rcall	.-426    	; 0xd9be <mmc_install_timer>
    db68:	ac df       	rcall	.-168    	; 0xdac2 <mmc_ins_status>
    db6a:	89 2b       	or	r24, r25
    db6c:	61 f4       	brne	.+24     	; 0xdb86 <mmc_init+0x62>
	{
		printf("*** MMC Card NOT Inserted! ***\n");
    db6e:	8e ef       	ldi	r24, 0xFE	; 254
    db70:	97 e0       	ldi	r25, 0x07	; 7
    db72:	a0 e0       	ldi	r26, 0x00	; 0
    db74:	ed b7       	in	r30, 0x3d	; 61
    db76:	fe b7       	in	r31, 0x3e	; 62
    db78:	81 83       	std	Z+1, r24	; 0x01
    db7a:	92 83       	std	Z+2, r25	; 0x02
    db7c:	a3 83       	std	Z+3, r26	; 0x03
    db7e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
		return(RES_NOTRDY);	
    db82:	83 e0       	ldi	r24, 0x03	; 3
    db84:	8b c0       	rjmp	.+278    	; 0xdc9c <mmc_init+0x178>
	}


    if( verbose)
    db86:	e1 14       	cp	r14, r1
    db88:	f1 04       	cpc	r15, r1
    db8a:	11 f1       	breq	.+68     	; 0xdbd0 <mmc_init+0xac>
    {
		printf("MMC Card Inserted\n");
    db8c:	8b ee       	ldi	r24, 0xEB	; 235
    db8e:	97 e0       	ldi	r25, 0x07	; 7
    db90:	a0 e0       	ldi	r26, 0x00	; 0
    db92:	ed b7       	in	r30, 0x3d	; 61
    db94:	fe b7       	in	r31, 0x3e	; 62
    db96:	81 83       	std	Z+1, r24	; 0x01
    db98:	92 83       	std	Z+2, r25	; 0x02
    db9a:	a3 83       	std	Z+3, r26	; 0x03
    db9c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

#if defined (FF_USE_LFN)
        printf("LFN Enabled");
    dba0:	8f ed       	ldi	r24, 0xDF	; 223
    dba2:	97 e0       	ldi	r25, 0x07	; 7
    dba4:	a0 e0       	ldi	r26, 0x00	; 0
    dba6:	ed b7       	in	r30, 0x3d	; 61
    dba8:	fe b7       	in	r31, 0x3e	; 62
    dbaa:	81 83       	std	Z+1, r24	; 0x01
    dbac:	92 83       	std	Z+2, r25	; 0x02
    dbae:	a3 83       	std	Z+3, r26	; 0x03
    dbb0:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", FF_CODE_PAGE);
    dbb4:	85 eb       	ldi	r24, 0xB5	; 181
    dbb6:	91 e0       	ldi	r25, 0x01	; 1
    dbb8:	ed b7       	in	r30, 0x3d	; 61
    dbba:	fe b7       	in	r31, 0x3e	; 62
    dbbc:	95 83       	std	Z+5, r25	; 0x05
    dbbe:	84 83       	std	Z+4, r24	; 0x04
    dbc0:	8e ec       	ldi	r24, 0xCE	; 206
    dbc2:	97 e0       	ldi	r25, 0x07	; 7
    dbc4:	a0 e0       	ldi	r26, 0x00	; 0
    dbc6:	81 83       	std	Z+1, r24	; 0x01
    dbc8:	92 83       	std	Z+2, r25	; 0x02
    dbca:	a3 83       	std	Z+3, r26	; 0x03
    dbcc:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    }

    rc = disk_initialize(DEV_MMC);                // aliased to mmc_disk_initialize()
    dbd0:	80 e0       	ldi	r24, 0x00	; 0
    dbd2:	1d da       	rcall	.-3014   	; 0xd00e <disk_initialize>
    dbd4:	08 2f       	mov	r16, r24
    dbd6:	10 e0       	ldi	r17, 0x00	; 0

    if( rc != RES_OK  )
    dbd8:	01 15       	cp	r16, r1
    dbda:	11 05       	cpc	r17, r1
        put_rc(rc);
    dbdc:	19 f0       	breq	.+6      	; 0xdbe4 <mmc_init+0xc0>
    dbde:	c8 01       	movw	r24, r16
    dbe0:	e4 d0       	rcall	.+456    	; 0xddaa <put_rc>
    dbe2:	0e c0       	rjmp	.+28     	; 0xdc00 <mmc_init+0xdc>

    if( rc == RES_OK)
        rc = f_mount(&Fatfs[0],"/", 0);
    dbe4:	40 e0       	ldi	r20, 0x00	; 0
    dbe6:	66 ea       	ldi	r22, 0xA6	; 166
    dbe8:	78 e0       	ldi	r23, 0x08	; 8
    dbea:	8a e9       	ldi	r24, 0x9A	; 154
    dbec:	9a e1       	ldi	r25, 0x1A	; 26
    dbee:	0e 94 bf 57 	call	0xaf7e	; 0xaf7e <f_mount>
    dbf2:	8c 01       	movw	r16, r24

    if( rc != RES_OK || verbose)
    dbf4:	89 2b       	or	r24, r25
    dbf6:	21 f4       	brne	.+8      	; 0xdc00 <mmc_init+0xdc>
    dbf8:	e1 14       	cp	r14, r1
    dbfa:	f1 04       	cpc	r15, r1
    dbfc:	09 f4       	brne	.+2      	; 0xdc00 <mmc_init+0xdc>
        put_rc( rc );
    dbfe:	40 c0       	rjmp	.+128    	; 0xdc80 <mmc_init+0x15c>
    dc00:	c8 01       	movw	r24, r16
    dc02:	d3 d0       	rcall	.+422    	; 0xddaa <put_rc>

    if (verbose )
    dc04:	e1 14       	cp	r14, r1
    dc06:	f1 04       	cpc	r15, r1
    dc08:	d9 f1       	breq	.+118    	; 0xdc80 <mmc_init+0x15c>
    {
        DWORD blksize = 0;
    dc0a:	18 86       	std	Y+8, r1	; 0x08
    dc0c:	19 86       	std	Y+9, r1	; 0x09
    dc0e:	1a 86       	std	Y+10, r1	; 0x0a
    dc10:	1b 86       	std	Y+11, r1	; 0x0b
        if(rc == RES_OK)
    dc12:	01 15       	cp	r16, r1
    dc14:	11 05       	cpc	r17, r1
        {
            rc = disk_ioctl ( DEV_MMC, GET_BLOCK_SIZE, (void *) &blksize);
    dc16:	51 f5       	brne	.+84     	; 0xdc6c <mmc_init+0x148>
    dc18:	ae 01       	movw	r20, r28
    dc1a:	48 5f       	subi	r20, 0xF8	; 248
    dc1c:	5f 4f       	sbci	r21, 0xFF	; 255
    dc1e:	63 e0       	ldi	r22, 0x03	; 3
    dc20:	80 e0       	ldi	r24, 0x00	; 0
    dc22:	1b da       	rcall	.-3018   	; 0xd05a <disk_ioctl>
            if( rc != RES_OK)
    dc24:	8c 01       	movw	r16, r24
    dc26:	00 97       	sbiw	r24, 0x00	; 0
            {
                put_rc( rc );
    dc28:	61 f0       	breq	.+24     	; 0xdc42 <mmc_init+0x11e>
    dc2a:	bf d0       	rcall	.+382    	; 0xddaa <put_rc>
                printf("MMC Block Size - read failed\n");
    dc2c:	80 eb       	ldi	r24, 0xB0	; 176
    dc2e:	97 e0       	ldi	r25, 0x07	; 7
    dc30:	a0 e0       	ldi	r26, 0x00	; 0
    dc32:	ed b7       	in	r30, 0x3d	; 61
    dc34:	fe b7       	in	r31, 0x3e	; 62
    dc36:	81 83       	std	Z+1, r24	; 0x01
    dc38:	92 83       	std	Z+2, r25	; 0x02
    dc3a:	a3 83       	std	Z+3, r26	; 0x03
    dc3c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    dc40:	15 c0       	rjmp	.+42     	; 0xdc6c <mmc_init+0x148>
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    dc42:	88 85       	ldd	r24, Y+8	; 0x08
    dc44:	99 85       	ldd	r25, Y+9	; 0x09
    dc46:	aa 85       	ldd	r26, Y+10	; 0x0a
    dc48:	bb 85       	ldd	r27, Y+11	; 0x0b
    dc4a:	ed b7       	in	r30, 0x3d	; 61
    dc4c:	fe b7       	in	r31, 0x3e	; 62
    dc4e:	84 83       	std	Z+4, r24	; 0x04
    dc50:	95 83       	std	Z+5, r25	; 0x05
    dc52:	a6 83       	std	Z+6, r26	; 0x06
    dc54:	b7 83       	std	Z+7, r27	; 0x07
    dc56:	8b e9       	ldi	r24, 0x9B	; 155
    dc58:	97 e0       	ldi	r25, 0x07	; 7
    dc5a:	a0 e0       	ldi	r26, 0x00	; 0
    dc5c:	81 83       	std	Z+1, r24	; 0x01
    dc5e:	92 83       	std	Z+2, r25	; 0x02
    dc60:	a3 83       	std	Z+3, r26	; 0x03
    dc62:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    dc66:	86 ea       	ldi	r24, 0xA6	; 166
    dc68:	98 e0       	ldi	r25, 0x08	; 8
    dc6a:	33 d1       	rcall	.+614    	; 0xded2 <fatfs_status>
            }
        }
        printf("END MMC INIT\n");
    dc6c:	8d e8       	ldi	r24, 0x8D	; 141
    dc6e:	97 e0       	ldi	r25, 0x07	; 7
    dc70:	a0 e0       	ldi	r26, 0x00	; 0
    dc72:	ed b7       	in	r30, 0x3d	; 61
    dc74:	fe b7       	in	r31, 0x3e	; 62
    dc76:	81 83       	std	Z+1, r24	; 0x01
    dc78:	92 83       	std	Z+2, r25	; 0x02
    dc7a:	a3 83       	std	Z+3, r26	; 0x03
    dc7c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    }
    mmc_init_flag = 1;
    dc80:	81 e0       	ldi	r24, 0x01	; 1
    dc82:	90 e0       	ldi	r25, 0x00	; 0
    dc84:	90 93 43 18 	sts	0x1843, r25	; 0x801843 <mmc_init_flag+0x1>
    dc88:	80 93 42 18 	sts	0x1842, r24	; 0x801842 <mmc_init_flag>

	if(rc != RES_OK)
    dc8c:	01 15       	cp	r16, r1
    dc8e:	11 05       	cpc	r17, r1
    dc90:	21 f0       	breq	.+8      	; 0xdc9a <mmc_init+0x176>
		set_error(1);
    dc92:	0e 94 3e 24 	call	0x487c	; 0x487c <set_error>
    dc96:	c8 01       	movw	r24, r16
    dc98:	02 c0       	rjmp	.+4      	; 0xdc9e <mmc_init+0x17a>
    dc9a:	80 e0       	ldi	r24, 0x00	; 0
    dc9c:	90 e0       	ldi	r25, 0x00	; 0

    return( rc ) ;
}
    dc9e:	2b 96       	adiw	r28, 0x0b	; 11
    dca0:	e6 e0       	ldi	r30, 0x06	; 6
    dca2:	0c 94 00 e1 	jmp	0x1c200	; 0x1c200 <__epilogue_restores__+0x18>

0000dca6 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    dca6:	80 e0       	ldi	r24, 0x00	; 0
    dca8:	90 e0       	ldi	r25, 0x00	; 0
    dcaa:	08 95       	ret

0000dcac <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    dcac:	0f 93       	push	r16
    dcae:	1f 93       	push	r17
    dcb0:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    dcb2:	46 81       	ldd	r20, Z+6	; 0x06
    dcb4:	57 81       	ldd	r21, Z+7	; 0x07
    dcb6:	05 2e       	mov	r0, r21
    dcb8:	00 0c       	add	r0, r0
    dcba:	66 0b       	sbc	r22, r22
    dcbc:	77 0b       	sbc	r23, r23
    dcbe:	ba 01       	movw	r22, r20
    dcc0:	55 27       	eor	r21, r21
    dcc2:	44 27       	eor	r20, r20
    dcc4:	84 81       	ldd	r24, Z+4	; 0x04
    dcc6:	95 81       	ldd	r25, Z+5	; 0x05
    dcc8:	09 2e       	mov	r0, r25
    dcca:	00 0c       	add	r0, r0
    dccc:	aa 0b       	sbc	r26, r26
    dcce:	bb 0b       	sbc	r27, r27
    dcd0:	2b e0       	ldi	r18, 0x0B	; 11
    dcd2:	88 0f       	add	r24, r24
    dcd4:	99 1f       	adc	r25, r25
    dcd6:	aa 1f       	adc	r26, r26
    dcd8:	bb 1f       	adc	r27, r27
    dcda:	2a 95       	dec	r18
    dcdc:	d1 f7       	brne	.-12     	; 0xdcd2 <tm_to_fat+0x26>
    dcde:	48 2b       	or	r20, r24
    dce0:	59 2b       	or	r21, r25
    dce2:	6a 2b       	or	r22, r26
    dce4:	7b 2b       	or	r23, r27
    dce6:	82 81       	ldd	r24, Z+2	; 0x02
    dce8:	93 81       	ldd	r25, Z+3	; 0x03
    dcea:	09 2e       	mov	r0, r25
    dcec:	00 0c       	add	r0, r0
    dcee:	aa 0b       	sbc	r26, r26
    dcf0:	bb 0b       	sbc	r27, r27
    dcf2:	35 e0       	ldi	r19, 0x05	; 5
    dcf4:	88 0f       	add	r24, r24
    dcf6:	99 1f       	adc	r25, r25
    dcf8:	aa 1f       	adc	r26, r26
    dcfa:	bb 1f       	adc	r27, r27
    dcfc:	3a 95       	dec	r19
    dcfe:	d1 f7       	brne	.-12     	; 0xdcf4 <tm_to_fat+0x48>
    dd00:	48 2b       	or	r20, r24
    dd02:	59 2b       	or	r21, r25
    dd04:	6a 2b       	or	r22, r26
    dd06:	7b 2b       	or	r23, r27
    dd08:	80 81       	ld	r24, Z
    dd0a:	91 81       	ldd	r25, Z+1	; 0x01
    dd0c:	09 2e       	mov	r0, r25
    dd0e:	00 0c       	add	r0, r0
    dd10:	aa 0b       	sbc	r26, r26
    dd12:	bb 0b       	sbc	r27, r27
    dd14:	b6 95       	lsr	r27
    dd16:	a7 95       	ror	r26
    dd18:	97 95       	ror	r25
    dd1a:	87 95       	ror	r24
    dd1c:	84 2b       	or	r24, r20
    dd1e:	95 2b       	or	r25, r21
    dd20:	a6 2b       	or	r26, r22
    dd22:	b7 2b       	or	r27, r23
    dd24:	02 85       	ldd	r16, Z+10	; 0x0a
    dd26:	13 85       	ldd	r17, Z+11	; 0x0b
    dd28:	00 55       	subi	r16, 0x50	; 80
    dd2a:	11 09       	sbc	r17, r1
    dd2c:	01 2e       	mov	r0, r17
    dd2e:	00 0c       	add	r0, r0
    dd30:	22 0b       	sbc	r18, r18
    dd32:	33 0b       	sbc	r19, r19
    dd34:	49 e1       	ldi	r20, 0x19	; 25
    dd36:	00 0f       	add	r16, r16
    dd38:	11 1f       	adc	r17, r17
    dd3a:	22 1f       	adc	r18, r18
    dd3c:	33 1f       	adc	r19, r19
    dd3e:	4a 95       	dec	r20
    dd40:	d1 f7       	brne	.-12     	; 0xdd36 <tm_to_fat+0x8a>
    dd42:	ac 01       	movw	r20, r24
    dd44:	bd 01       	movw	r22, r26
    dd46:	40 2b       	or	r20, r16
    dd48:	51 2b       	or	r21, r17
    dd4a:	62 2b       	or	r22, r18
    dd4c:	73 2b       	or	r23, r19
    dd4e:	80 85       	ldd	r24, Z+8	; 0x08
    dd50:	91 85       	ldd	r25, Z+9	; 0x09
    dd52:	09 2e       	mov	r0, r25
    dd54:	00 0c       	add	r0, r0
    dd56:	aa 0b       	sbc	r26, r26
    dd58:	bb 0b       	sbc	r27, r27
    dd5a:	01 96       	adiw	r24, 0x01	; 1
    dd5c:	a1 1d       	adc	r26, r1
    dd5e:	b1 1d       	adc	r27, r1
    dd60:	e5 e1       	ldi	r30, 0x15	; 21
    dd62:	88 0f       	add	r24, r24
    dd64:	99 1f       	adc	r25, r25
    dd66:	aa 1f       	adc	r26, r26
    dd68:	bb 1f       	adc	r27, r27
    dd6a:	ea 95       	dec	r30
    dd6c:	d1 f7       	brne	.-12     	; 0xdd62 <tm_to_fat+0xb6>
    dd6e:	8a 01       	movw	r16, r20
    dd70:	9b 01       	movw	r18, r22
    dd72:	08 2b       	or	r16, r24
    dd74:	19 2b       	or	r17, r25
    dd76:	2a 2b       	or	r18, r26
    dd78:	3b 2b       	or	r19, r27
    dd7a:	c9 01       	movw	r24, r18
    dd7c:	b8 01       	movw	r22, r16
}
    dd7e:	1f 91       	pop	r17
    dd80:	0f 91       	pop	r16
    dd82:	08 95       	ret

0000dd84 <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    dd84:	a4 e0       	ldi	r26, 0x04	; 4
    dd86:	b0 e0       	ldi	r27, 0x00	; 0
    dd88:	e8 ec       	ldi	r30, 0xC8	; 200
    dd8a:	fe e6       	ldi	r31, 0x6E	; 110
    dd8c:	0c 94 e8 e0 	jmp	0x1c1d0	; 0x1c1d0 <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    dd90:	ce 01       	movw	r24, r28
    dd92:	01 96       	adiw	r24, 0x01	; 1
    dd94:	0e 94 45 35 	call	0x6a8a	; 0x6a8a <time>
    return( tm_to_fat(localtime(&t)));
    dd98:	ce 01       	movw	r24, r28
    dd9a:	01 96       	adiw	r24, 0x01	; 1
    dd9c:	0e 94 de 35 	call	0x6bbc	; 0x6bbc <localtime>
    dda0:	85 df       	rcall	.-246    	; 0xdcac <tm_to_fat>
}
    dda2:	24 96       	adiw	r28, 0x04	; 4
    dda4:	e2 e0       	ldi	r30, 0x02	; 2
    dda6:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

0000ddaa <put_rc>:
/// @param[in] rc: FatFs status return code
/// @return  void

MEMSPACE
void put_rc (int rc)
{
    ddaa:	00 d0       	rcall	.+0      	; 0xddac <put_rc+0x2>
    ddac:	00 d0       	rcall	.+0      	; 0xddae <put_rc+0x4>
    ddae:	1f 92       	push	r1
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    ddb0:	ed b7       	in	r30, 0x3d	; 61
    ddb2:	fe b7       	in	r31, 0x3e	; 62
    ddb4:	95 83       	std	Z+5, r25	; 0x05
    ddb6:	84 83       	std	Z+4, r24	; 0x04
    ddb8:	8b e4       	ldi	r24, 0x4B	; 75
    ddba:	9a e0       	ldi	r25, 0x0A	; 10
    ddbc:	a0 e0       	ldi	r26, 0x00	; 0
    ddbe:	81 83       	std	Z+1, r24	; 0x01
    ddc0:	92 83       	std	Z+2, r25	; 0x02
    ddc2:	a3 83       	std	Z+3, r26	; 0x03
    ddc4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
}
    ddc8:	0f 90       	pop	r0
    ddca:	0f 90       	pop	r0
    ddcc:	0f 90       	pop	r0
    ddce:	0f 90       	pop	r0
    ddd0:	0f 90       	pop	r0
    ddd2:	08 95       	ret

0000ddd4 <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    ddd4:	a4 e4       	ldi	r26, 0x44	; 68
    ddd6:	b1 e0       	ldi	r27, 0x01	; 1
    ddd8:	e0 ef       	ldi	r30, 0xF0	; 240
    ddda:	fe e6       	ldi	r31, 0x6E	; 110
    dddc:	0c 94 e3 e0 	jmp	0x1c1c6	; 0x1c1c6 <__prologue_saves__+0x16>
    dde0:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    dde2:	bc 01       	movw	r22, r24
    dde4:	ce 01       	movw	r24, r28
    dde6:	89 5e       	subi	r24, 0xE9	; 233
    dde8:	9e 4f       	sbci	r25, 0xFE	; 254
    ddea:	0e 94 7b 61 	call	0xc2f6	; 0xc2f6 <f_opendir>
    if (fr == FR_OK)
    ddee:	00 97       	sbiw	r24, 0x00	; 0
    ddf0:	09 f0       	breq	.+2      	; 0xddf4 <fatfs_scan_files+0x20>
    ddf2:	5b c0       	rjmp	.+182    	; 0xdeaa <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
            {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    ddf4:	8f e2       	ldi	r24, 0x2F	; 47
    ddf6:	d8 2e       	mov	r13, r24
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK)
    {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0])
    ddf8:	be 01       	movw	r22, r28
    ddfa:	6f 5f       	subi	r22, 0xFF	; 255
    ddfc:	7f 4f       	sbci	r23, 0xFF	; 255
    ddfe:	ce 01       	movw	r24, r28
    de00:	89 5e       	subi	r24, 0xE9	; 233
    de02:	9e 4f       	sbci	r25, 0xFE	; 254
    de04:	0e 94 01 62 	call	0xc402	; 0xc402 <f_readdir>
    de08:	00 97       	sbiw	r24, 0x00	; 0
    de0a:	09 f0       	breq	.+2      	; 0xde0e <fatfs_scan_files+0x3a>
    de0c:	4e c0       	rjmp	.+156    	; 0xdeaa <fatfs_scan_files+0xd6>
    de0e:	2f 89       	ldd	r18, Y+23	; 0x17
    de10:	22 23       	and	r18, r18
    de12:	09 f4       	brne	.+2      	; 0xde16 <fatfs_scan_files+0x42>
    de14:	4a c0       	rjmp	.+148    	; 0xdeaa <fatfs_scan_files+0xd6>
        {
            if (info.fattrib & AM_DIR)
    de16:	89 85       	ldd	r24, Y+9	; 0x09
    de18:	84 ff       	sbrs	r24, 4
    de1a:	25 c0       	rjmp	.+74     	; 0xde66 <fatfs_scan_files+0x92>
            {
                AccDirs++;
    de1c:	80 91 d3 1c 	lds	r24, 0x1CD3	; 0x801cd3 <AccDirs>
    de20:	90 91 d4 1c 	lds	r25, 0x1CD4	; 0x801cd4 <AccDirs+0x1>
    de24:	01 96       	adiw	r24, 0x01	; 1
    de26:	90 93 d4 1c 	sts	0x1CD4, r25	; 0x801cd4 <AccDirs+0x1>
    de2a:	80 93 d3 1c 	sts	0x1CD3, r24	; 0x801cd3 <AccDirs>
                i = strlen(path);
    de2e:	f8 01       	movw	r30, r16
    de30:	01 90       	ld	r0, Z+
    de32:	00 20       	and	r0, r0
    de34:	e9 f7       	brne	.-6      	; 0xde30 <fatfs_scan_files+0x5c>
    de36:	31 97       	sbiw	r30, 0x01	; 1
    de38:	e0 1b       	sub	r30, r16
    de3a:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    de3c:	78 01       	movw	r14, r16
    de3e:	ee 0e       	add	r14, r30
    de40:	ff 1e       	adc	r15, r31
    de42:	d7 01       	movw	r26, r14
    de44:	dc 92       	st	X, r13
    de46:	cf 01       	movw	r24, r30
    de48:	01 96       	adiw	r24, 0x01	; 1
    de4a:	be 01       	movw	r22, r28
    de4c:	69 5e       	subi	r22, 0xE9	; 233
    de4e:	7f 4f       	sbci	r23, 0xFF	; 255
    de50:	80 0f       	add	r24, r16
    de52:	91 1f       	adc	r25, r17
    de54:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <strcpy>
                fr = fatfs_scan_files(path);
    de58:	c8 01       	movw	r24, r16
    de5a:	bc df       	rcall	.-136    	; 0xddd4 <fatfs_scan_files>
                path[i] = 0;
    de5c:	f7 01       	movw	r30, r14
    de5e:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    de60:	00 97       	sbiw	r24, 0x00	; 0
    de62:	51 f2       	breq	.-108    	; 0xddf8 <fatfs_scan_files+0x24>
    de64:	22 c0       	rjmp	.+68     	; 0xdeaa <fatfs_scan_files+0xd6>
            }
            else
            {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    de66:	80 91 d5 1c 	lds	r24, 0x1CD5	; 0x801cd5 <AccFiles>
    de6a:	90 91 d6 1c 	lds	r25, 0x1CD6	; 0x801cd6 <AccFiles+0x1>
    de6e:	01 96       	adiw	r24, 0x01	; 1
    de70:	90 93 d6 1c 	sts	0x1CD6, r25	; 0x801cd6 <AccFiles+0x1>
    de74:	80 93 d5 1c 	sts	0x1CD5, r24	; 0x801cd5 <AccFiles>
                AccSize += info.fsize;
    de78:	40 91 cf 1c 	lds	r20, 0x1CCF	; 0x801ccf <AccSize>
    de7c:	50 91 d0 1c 	lds	r21, 0x1CD0	; 0x801cd0 <AccSize+0x1>
    de80:	60 91 d1 1c 	lds	r22, 0x1CD1	; 0x801cd1 <AccSize+0x2>
    de84:	70 91 d2 1c 	lds	r23, 0x1CD2	; 0x801cd2 <AccSize+0x3>
    de88:	89 81       	ldd	r24, Y+1	; 0x01
    de8a:	9a 81       	ldd	r25, Y+2	; 0x02
    de8c:	ab 81       	ldd	r26, Y+3	; 0x03
    de8e:	bc 81       	ldd	r27, Y+4	; 0x04
    de90:	84 0f       	add	r24, r20
    de92:	95 1f       	adc	r25, r21
    de94:	a6 1f       	adc	r26, r22
    de96:	b7 1f       	adc	r27, r23
    de98:	80 93 cf 1c 	sts	0x1CCF, r24	; 0x801ccf <AccSize>
    de9c:	90 93 d0 1c 	sts	0x1CD0, r25	; 0x801cd0 <AccSize+0x1>
    dea0:	a0 93 d1 1c 	sts	0x1CD1, r26	; 0x801cd1 <AccSize+0x2>
    dea4:	b0 93 d2 1c 	sts	0x1CD2, r27	; 0x801cd2 <AccSize+0x3>
    dea8:	a7 cf       	rjmp	.-178    	; 0xddf8 <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    deaa:	cc 5b       	subi	r28, 0xBC	; 188
    deac:	de 4f       	sbci	r29, 0xFE	; 254
    deae:	e7 e0       	ldi	r30, 0x07	; 7
    deb0:	0c 94 ff e0 	jmp	0x1c1fe	; 0x1c1fe <__epilogue_restores__+0x16>

0000deb4 <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    deb4:	01 97       	sbiw	r24, 0x01	; 1
    deb6:	84 30       	cpi	r24, 0x04	; 4
    deb8:	91 05       	cpc	r25, r1
    deba:	40 f4       	brcc	.+16     	; 0xdecc <fatfs_fstype+0x18>
    debc:	88 0f       	add	r24, r24
    debe:	99 1f       	adc	r25, r25
    dec0:	fc 01       	movw	r30, r24
    dec2:	e6 53       	subi	r30, 0x36	; 54
    dec4:	f7 4f       	sbci	r31, 0xF7	; 247
    dec6:	80 81       	ld	r24, Z
    dec8:	91 81       	ldd	r25, Z+1	; 0x01
    deca:	08 95       	ret
    char *ptr;
    switch(type)
    decc:	88 ea       	ldi	r24, 0xA8	; 168
    dece:	98 e0       	ldi	r25, 0x08	; 8
        default:
            ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    ded0:	08 95       	ret

0000ded2 <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  void
MEMSPACE
void fatfs_status(char *ptr)
{
    ded2:	a7 e3       	ldi	r26, 0x37	; 55
    ded4:	b0 e0       	ldi	r27, 0x00	; 0
    ded6:	ef e6       	ldi	r30, 0x6F	; 111
    ded8:	ff e6       	ldi	r31, 0x6F	; 111
    deda:	0c 94 e2 e0 	jmp	0x1c1c4	; 0x1c1c4 <__prologue_saves__+0x14>
    dede:	7c 01       	movw	r14, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn;                                    // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    dee0:	fc 01       	movw	r30, r24
    dee2:	21 91       	ld	r18, Z+
    dee4:	cf 01       	movw	r24, r30
    dee6:	20 32       	cpi	r18, 0x20	; 32
    dee8:	d1 f3       	breq	.-12     	; 0xdede <fatfs_status+0xc>
    deea:	29 30       	cpi	r18, 0x09	; 9
    deec:	c1 f3       	breq	.-16     	; 0xdede <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    deee:	ed b7       	in	r30, 0x3d	; 61
    def0:	fe b7       	in	r31, 0x3e	; 62
    def2:	e4 82       	std	Z+4, r14	; 0x04
    def4:	f5 82       	std	Z+5, r15	; 0x05
    def6:	8a e3       	ldi	r24, 0x3A	; 58
    def8:	9a e0       	ldi	r25, 0x0A	; 10
    defa:	a0 e0       	ldi	r26, 0x00	; 0
    defc:	81 83       	std	Z+1, r24	; 0x01
    defe:	92 83       	std	Z+2, r25	; 0x02
    df00:	a3 83       	std	Z+3, r26	; 0x03
    df02:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    df06:	ae 01       	movw	r20, r28
    df08:	4a 5c       	subi	r20, 0xCA	; 202
    df0a:	5f 4f       	sbci	r21, 0xFF	; 255
    df0c:	be 01       	movw	r22, r28
    df0e:	6e 5c       	subi	r22, 0xCE	; 206
    df10:	7f 4f       	sbci	r23, 0xFF	; 255
    df12:	c7 01       	movw	r24, r14
    df14:	0e 94 83 62 	call	0xc506	; 0xc506 <f_getfree>
    if (res)
    df18:	00 97       	sbiw	r24, 0x00	; 0
    df1a:	09 f0       	breq	.+2      	; 0xdf1e <fatfs_status+0x4c>
    df1c:	f8 c0       	rjmp	.+496    	; 0xe10e <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    df1e:	ee a9       	ldd	r30, Y+54	; 0x36
    df20:	ff a9       	ldd	r31, Y+55	; 0x37
    df22:	80 81       	ld	r24, Z
    df24:	90 e0       	ldi	r25, 0x00	; 0
    df26:	c6 df       	rcall	.-116    	; 0xdeb4 <fatfs_fstype>
    df28:	ed b7       	in	r30, 0x3d	; 61
    df2a:	fe b7       	in	r31, 0x3e	; 62
    df2c:	95 83       	std	Z+5, r25	; 0x05
    df2e:	84 83       	std	Z+4, r24	; 0x04
    df30:	8c e1       	ldi	r24, 0x1C	; 28
    df32:	9a e0       	ldi	r25, 0x0A	; 10
    df34:	a0 e0       	ldi	r26, 0x00	; 0
    df36:	81 83       	std	Z+1, r24	; 0x01
    df38:	92 83       	std	Z+2, r25	; 0x02
    df3a:	a3 83       	std	Z+3, r26	; 0x03
    df3c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    df40:	ee a9       	ldd	r30, Y+54	; 0x36
    df42:	ff a9       	ldd	r31, Y+55	; 0x37
    df44:	81 85       	ldd	r24, Z+9	; 0x09
    df46:	92 85       	ldd	r25, Z+10	; 0x0a
    df48:	a0 e0       	ldi	r26, 0x00	; 0
    df4a:	b0 e0       	ldi	r27, 0x00	; 0
    df4c:	39 e0       	ldi	r19, 0x09	; 9
    df4e:	88 0f       	add	r24, r24
    df50:	99 1f       	adc	r25, r25
    df52:	aa 1f       	adc	r26, r26
    df54:	bb 1f       	adc	r27, r27
    df56:	3a 95       	dec	r19
    df58:	d1 f7       	brne	.-12     	; 0xdf4e <fatfs_status+0x7c>
    df5a:	ed b7       	in	r30, 0x3d	; 61
    df5c:	fe b7       	in	r31, 0x3e	; 62
    df5e:	84 83       	std	Z+4, r24	; 0x04
    df60:	95 83       	std	Z+5, r25	; 0x05
    df62:	a6 83       	std	Z+6, r26	; 0x06
    df64:	b7 83       	std	Z+7, r27	; 0x07
    df66:	8d ef       	ldi	r24, 0xFD	; 253
    df68:	99 e0       	ldi	r25, 0x09	; 9
    df6a:	a0 e0       	ldi	r26, 0x00	; 0
    df6c:	81 83       	std	Z+1, r24	; 0x01
    df6e:	92 83       	std	Z+2, r25	; 0x02
    df70:	a3 83       	std	Z+3, r26	; 0x03
    df72:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    df76:	ee a9       	ldd	r30, Y+54	; 0x36
    df78:	ff a9       	ldd	r31, Y+55	; 0x37
    df7a:	82 81       	ldd	r24, Z+2	; 0x02
    df7c:	90 e0       	ldi	r25, 0x00	; 0
    df7e:	ed b7       	in	r30, 0x3d	; 61
    df80:	fe b7       	in	r31, 0x3e	; 62
    df82:	95 83       	std	Z+5, r25	; 0x05
    df84:	84 83       	std	Z+4, r24	; 0x04
    df86:	8f ed       	ldi	r24, 0xDF	; 223
    df88:	99 e0       	ldi	r25, 0x09	; 9
    df8a:	a0 e0       	ldi	r26, 0x00	; 0
    df8c:	81 83       	std	Z+1, r24	; 0x01
    df8e:	92 83       	std	Z+2, r25	; 0x02
    df90:	a3 83       	std	Z+3, r26	; 0x03
    df92:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    df96:	ee a9       	ldd	r30, Y+54	; 0x36
    df98:	ff a9       	ldd	r31, Y+55	; 0x37
    df9a:	87 81       	ldd	r24, Z+7	; 0x07
    df9c:	90 85       	ldd	r25, Z+8	; 0x08
    df9e:	ed b7       	in	r30, 0x3d	; 61
    dfa0:	fe b7       	in	r31, 0x3e	; 62
    dfa2:	95 83       	std	Z+5, r25	; 0x05
    dfa4:	84 83       	std	Z+4, r24	; 0x04
    dfa6:	81 ec       	ldi	r24, 0xC1	; 193
    dfa8:	99 e0       	ldi	r25, 0x09	; 9
    dfaa:	a0 e0       	ldi	r26, 0x00	; 0
    dfac:	81 83       	std	Z+1, r24	; 0x01
    dfae:	92 83       	std	Z+2, r25	; 0x02
    dfb0:	a3 83       	std	Z+3, r26	; 0x03
    dfb2:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    dfb6:	ee a9       	ldd	r30, Y+54	; 0x36
    dfb8:	ff a9       	ldd	r31, Y+55	; 0x37
    dfba:	85 8d       	ldd	r24, Z+29	; 0x1d
    dfbc:	96 8d       	ldd	r25, Z+30	; 0x1e
    dfbe:	a7 8d       	ldd	r26, Z+31	; 0x1f
    dfc0:	b0 a1       	ldd	r27, Z+32	; 0x20
    dfc2:	ed b7       	in	r30, 0x3d	; 61
    dfc4:	fe b7       	in	r31, 0x3e	; 62
    dfc6:	84 83       	std	Z+4, r24	; 0x04
    dfc8:	95 83       	std	Z+5, r25	; 0x05
    dfca:	a6 83       	std	Z+6, r26	; 0x06
    dfcc:	b7 83       	std	Z+7, r27	; 0x07
    dfce:	82 ea       	ldi	r24, 0xA2	; 162
    dfd0:	99 e0       	ldi	r25, 0x09	; 9
    dfd2:	a0 e0       	ldi	r26, 0x00	; 0
    dfd4:	81 83       	std	Z+1, r24	; 0x01
    dfd6:	92 83       	std	Z+2, r25	; 0x02
    dfd8:	a3 83       	std	Z+3, r26	; 0x03
    dfda:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    dfde:	ee a9       	ldd	r30, Y+54	; 0x36
    dfe0:	ff a9       	ldd	r31, Y+55	; 0x37
    dfe2:	81 8d       	ldd	r24, Z+25	; 0x19
    dfe4:	92 8d       	ldd	r25, Z+26	; 0x1a
    dfe6:	a3 8d       	ldd	r26, Z+27	; 0x1b
    dfe8:	b4 8d       	ldd	r27, Z+28	; 0x1c
    dfea:	02 97       	sbiw	r24, 0x02	; 2
    dfec:	a1 09       	sbc	r26, r1
    dfee:	b1 09       	sbc	r27, r1
    dff0:	ed b7       	in	r30, 0x3d	; 61
    dff2:	fe b7       	in	r31, 0x3e	; 62
    dff4:	84 83       	std	Z+4, r24	; 0x04
    dff6:	95 83       	std	Z+5, r25	; 0x05
    dff8:	a6 83       	std	Z+6, r26	; 0x06
    dffa:	b7 83       	std	Z+7, r27	; 0x07
    dffc:	83 e8       	ldi	r24, 0x83	; 131
    dffe:	99 e0       	ldi	r25, 0x09	; 9
    e000:	a0 e0       	ldi	r26, 0x00	; 0
    e002:	81 83       	std	Z+1, r24	; 0x01
    e004:	92 83       	std	Z+2, r25	; 0x02
    e006:	a3 83       	std	Z+3, r26	; 0x03
    e008:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e00c:	ee a9       	ldd	r30, Y+54	; 0x36
    e00e:	ff a9       	ldd	r31, Y+55	; 0x37
    e010:	85 a1       	ldd	r24, Z+37	; 0x25
    e012:	96 a1       	ldd	r25, Z+38	; 0x26
    e014:	a7 a1       	ldd	r26, Z+39	; 0x27
    e016:	b0 a5       	ldd	r27, Z+40	; 0x28
    e018:	ed b7       	in	r30, 0x3d	; 61
    e01a:	fe b7       	in	r31, 0x3e	; 62
    e01c:	84 83       	std	Z+4, r24	; 0x04
    e01e:	95 83       	std	Z+5, r25	; 0x05
    e020:	a6 83       	std	Z+6, r26	; 0x06
    e022:	b7 83       	std	Z+7, r27	; 0x07
    e024:	84 e6       	ldi	r24, 0x64	; 100
    e026:	99 e0       	ldi	r25, 0x09	; 9
    e028:	a0 e0       	ldi	r26, 0x00	; 0
    e02a:	81 83       	std	Z+1, r24	; 0x01
    e02c:	92 83       	std	Z+2, r25	; 0x02
    e02e:	a3 83       	std	Z+3, r26	; 0x03
    e030:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e034:	ee a9       	ldd	r30, Y+54	; 0x36
    e036:	ff a9       	ldd	r31, Y+55	; 0x37
    e038:	81 a5       	ldd	r24, Z+41	; 0x29
    e03a:	92 a5       	ldd	r25, Z+42	; 0x2a
    e03c:	a3 a5       	ldd	r26, Z+43	; 0x2b
    e03e:	b4 a5       	ldd	r27, Z+44	; 0x2c
    e040:	ed b7       	in	r30, 0x3d	; 61
    e042:	fe b7       	in	r31, 0x3e	; 62
    e044:	84 83       	std	Z+4, r24	; 0x04
    e046:	95 83       	std	Z+5, r25	; 0x05
    e048:	a6 83       	std	Z+6, r26	; 0x06
    e04a:	b7 83       	std	Z+7, r27	; 0x07
    e04c:	85 e4       	ldi	r24, 0x45	; 69
    e04e:	99 e0       	ldi	r25, 0x09	; 9
    e050:	a0 e0       	ldi	r26, 0x00	; 0
    e052:	81 83       	std	Z+1, r24	; 0x01
    e054:	92 83       	std	Z+2, r25	; 0x02
    e056:	a3 83       	std	Z+3, r26	; 0x03
    e058:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e05c:	ee a9       	ldd	r30, Y+54	; 0x36
    e05e:	ff a9       	ldd	r31, Y+55	; 0x37
    e060:	85 a5       	ldd	r24, Z+45	; 0x2d
    e062:	96 a5       	ldd	r25, Z+46	; 0x2e
    e064:	a7 a5       	ldd	r26, Z+47	; 0x2f
    e066:	b0 a9       	ldd	r27, Z+48	; 0x30
    e068:	ed b7       	in	r30, 0x3d	; 61
    e06a:	fe b7       	in	r31, 0x3e	; 62
    e06c:	84 83       	std	Z+4, r24	; 0x04
    e06e:	95 83       	std	Z+5, r25	; 0x05
    e070:	a6 83       	std	Z+6, r26	; 0x06
    e072:	b7 83       	std	Z+7, r27	; 0x07
    e074:	86 e2       	ldi	r24, 0x26	; 38
    e076:	99 e0       	ldi	r25, 0x09	; 9
    e078:	a0 e0       	ldi	r26, 0x00	; 0
    e07a:	81 83       	std	Z+1, r24	; 0x01
    e07c:	92 83       	std	Z+2, r25	; 0x02
    e07e:	a3 83       	std	Z+3, r26	; 0x03
    e080:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

#if FF_USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e084:	ae 01       	movw	r20, r28
    e086:	42 5d       	subi	r20, 0xD2	; 210
    e088:	5f 4f       	sbci	r21, 0xFF	; 255
    e08a:	be 01       	movw	r22, r28
    e08c:	6c 5e       	subi	r22, 0xEC	; 236
    e08e:	7f 4f       	sbci	r23, 0xFF	; 255
    e090:	c7 01       	movw	r24, r14
    e092:	0e 94 b5 66 	call	0xcd6a	; 0xcd6a <f_getlabel>
    if (res)
    e096:	00 97       	sbiw	r24, 0x00	; 0
    e098:	d1 f5       	brne	.+116    	; 0xe10e <fatfs_status+0x23c>
    {
        put_rc(res);
        return;
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e09a:	8c 89       	ldd	r24, Y+20	; 0x14
    e09c:	81 11       	cpse	r24, r1
    e09e:	03 c0       	rjmp	.+6      	; 0xe0a6 <fatfs_status+0x1d4>
    e0a0:	80 eb       	ldi	r24, 0xB0	; 176
    e0a2:	98 e0       	ldi	r25, 0x08	; 8
    e0a4:	02 c0       	rjmp	.+4      	; 0xe0aa <fatfs_status+0x1d8>
    e0a6:	ce 01       	movw	r24, r28
    e0a8:	44 96       	adiw	r24, 0x14	; 20
    e0aa:	ed b7       	in	r30, 0x3d	; 61
    e0ac:	fe b7       	in	r31, 0x3e	; 62
    e0ae:	95 83       	std	Z+5, r25	; 0x05
    e0b0:	84 83       	std	Z+4, r24	; 0x04
    e0b2:	88 e0       	ldi	r24, 0x08	; 8
    e0b4:	99 e0       	ldi	r25, 0x09	; 9
    e0b6:	a0 e0       	ldi	r26, 0x00	; 0
    e0b8:	81 83       	std	Z+1, r24	; 0x01
    e0ba:	92 83       	std	Z+2, r25	; 0x02
    e0bc:	a3 83       	std	Z+3, r26	; 0x03
    e0be:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e0c2:	8e a5       	ldd	r24, Y+46	; 0x2e
    e0c4:	9f a5       	ldd	r25, Y+47	; 0x2f
    e0c6:	a8 a9       	ldd	r26, Y+48	; 0x30
    e0c8:	b9 a9       	ldd	r27, Y+49	; 0x31
    e0ca:	ed b7       	in	r30, 0x3d	; 61
    e0cc:	fe b7       	in	r31, 0x3e	; 62
    e0ce:	97 83       	std	Z+7, r25	; 0x07
    e0d0:	86 83       	std	Z+6, r24	; 0x06
    e0d2:	b5 83       	std	Z+5, r27	; 0x05
    e0d4:	a4 83       	std	Z+4, r26	; 0x04
    e0d6:	83 ee       	ldi	r24, 0xE3	; 227
    e0d8:	98 e0       	ldi	r25, 0x08	; 8
    e0da:	a0 e0       	ldi	r26, 0x00	; 0
    e0dc:	81 83       	std	Z+1, r24	; 0x01
    e0de:	92 83       	std	Z+2, r25	; 0x02
    e0e0:	a3 83       	std	Z+3, r26	; 0x03
    e0e2:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e0e6:	10 92 d4 1c 	sts	0x1CD4, r1	; 0x801cd4 <AccDirs+0x1>
    e0ea:	10 92 d3 1c 	sts	0x1CD3, r1	; 0x801cd3 <AccDirs>
    e0ee:	10 92 d6 1c 	sts	0x1CD6, r1	; 0x801cd6 <AccFiles+0x1>
    e0f2:	10 92 d5 1c 	sts	0x1CD5, r1	; 0x801cd5 <AccFiles>
    e0f6:	10 92 cf 1c 	sts	0x1CCF, r1	; 0x801ccf <AccSize>
    e0fa:	10 92 d0 1c 	sts	0x1CD0, r1	; 0x801cd0 <AccSize+0x1>
    e0fe:	10 92 d1 1c 	sts	0x1CD1, r1	; 0x801cd1 <AccSize+0x2>
    e102:	10 92 d2 1c 	sts	0x1CD2, r1	; 0x801cd2 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    e106:	c7 01       	movw	r24, r14
    e108:	65 de       	rcall	.-822    	; 0xddd4 <fatfs_scan_files>
    if (res)
    e10a:	00 97       	sbiw	r24, 0x00	; 0
    {
        put_rc(res);
    e10c:	11 f0       	breq	.+4      	; 0xe112 <fatfs_status+0x240>
    e10e:	4d de       	rcall	.-870    	; 0xddaa <put_rc>
        return;
    e110:	56 c0       	rjmp	.+172    	; 0xe1be <fatfs_status+0x2ec>
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e112:	0e a9       	ldd	r16, Y+54	; 0x36
    e114:	1f a9       	ldd	r17, Y+55	; 0x37
    e116:	f8 01       	movw	r30, r16
    e118:	c1 84       	ldd	r12, Z+9	; 0x09
    e11a:	d2 84       	ldd	r13, Z+10	; 0x0a
    e11c:	e1 2c       	mov	r14, r1
    e11e:	f1 2c       	mov	r15, r1
    e120:	6a a9       	ldd	r22, Y+50	; 0x32
    e122:	7b a9       	ldd	r23, Y+51	; 0x33
    e124:	8c a9       	ldd	r24, Y+52	; 0x34
    e126:	9d a9       	ldd	r25, Y+53	; 0x35
    e128:	a7 01       	movw	r20, r14
    e12a:	96 01       	movw	r18, r12
    e12c:	0e 94 29 e0 	call	0x1c052	; 0x1c052 <__mulsi3>
    e130:	22 e0       	ldi	r18, 0x02	; 2
    e132:	30 e0       	ldi	r19, 0x00	; 0
    e134:	40 e0       	ldi	r20, 0x00	; 0
    e136:	50 e0       	ldi	r21, 0x00	; 0
    e138:	0e 94 8d e0 	call	0x1c11a	; 0x1c11a <__divmodsi4>
    e13c:	ed b7       	in	r30, 0x3d	; 61
    e13e:	fe b7       	in	r31, 0x3e	; 62
    e140:	20 8b       	std	Z+16, r18	; 0x10
    e142:	31 8b       	std	Z+17, r19	; 0x11
    e144:	42 8b       	std	Z+18, r20	; 0x12
    e146:	53 8b       	std	Z+19, r21	; 0x13
    e148:	f8 01       	movw	r30, r16
    e14a:	81 8d       	ldd	r24, Z+25	; 0x19
    e14c:	92 8d       	ldd	r25, Z+26	; 0x1a
    e14e:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e150:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e152:	9c 01       	movw	r18, r24
    e154:	ad 01       	movw	r20, r26
    e156:	22 50       	subi	r18, 0x02	; 2
    e158:	31 09       	sbc	r19, r1
    e15a:	41 09       	sbc	r20, r1
    e15c:	51 09       	sbc	r21, r1
    e15e:	c7 01       	movw	r24, r14
    e160:	b6 01       	movw	r22, r12
    e162:	0e 94 29 e0 	call	0x1c052	; 0x1c052 <__mulsi3>
    e166:	dc 01       	movw	r26, r24
    e168:	cb 01       	movw	r24, r22
    e16a:	b6 95       	lsr	r27
    e16c:	a7 95       	ror	r26
    e16e:	97 95       	ror	r25
    e170:	87 95       	ror	r24
    e172:	ed b7       	in	r30, 0x3d	; 61
    e174:	fe b7       	in	r31, 0x3e	; 62
    e176:	84 87       	std	Z+12, r24	; 0x0c
    e178:	95 87       	std	Z+13, r25	; 0x0d
    e17a:	a6 87       	std	Z+14, r26	; 0x0e
    e17c:	b7 87       	std	Z+15, r27	; 0x0f
    e17e:	80 91 d3 1c 	lds	r24, 0x1CD3	; 0x801cd3 <AccDirs>
    e182:	90 91 d4 1c 	lds	r25, 0x1CD4	; 0x801cd4 <AccDirs+0x1>
    e186:	93 87       	std	Z+11, r25	; 0x0b
    e188:	82 87       	std	Z+10, r24	; 0x0a
    e18a:	80 91 cf 1c 	lds	r24, 0x1CCF	; 0x801ccf <AccSize>
    e18e:	90 91 d0 1c 	lds	r25, 0x1CD0	; 0x801cd0 <AccSize+0x1>
    e192:	a0 91 d1 1c 	lds	r26, 0x1CD1	; 0x801cd1 <AccSize+0x2>
    e196:	b0 91 d2 1c 	lds	r27, 0x1CD2	; 0x801cd2 <AccSize+0x3>
    e19a:	86 83       	std	Z+6, r24	; 0x06
    e19c:	97 83       	std	Z+7, r25	; 0x07
    e19e:	a0 87       	std	Z+8, r26	; 0x08
    e1a0:	b1 87       	std	Z+9, r27	; 0x09
    e1a2:	80 91 d5 1c 	lds	r24, 0x1CD5	; 0x801cd5 <AccFiles>
    e1a6:	90 91 d6 1c 	lds	r25, 0x1CD6	; 0x801cd6 <AccFiles+0x1>
    e1aa:	95 83       	std	Z+5, r25	; 0x05
    e1ac:	84 83       	std	Z+4, r24	; 0x04
    e1ae:	86 e9       	ldi	r24, 0x96	; 150
    e1b0:	98 e0       	ldi	r25, 0x08	; 8
    e1b2:	a0 e0       	ldi	r26, 0x00	; 0
    e1b4:	81 83       	std	Z+1, r24	; 0x01
    e1b6:	92 83       	std	Z+2, r25	; 0x02
    e1b8:	a3 83       	std	Z+3, r26	; 0x03
    e1ba:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        "%lu KB total disk space.\n%lu KB available.\n",
        AccFiles, AccSize, AccDirs,
        (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
        );

}
    e1be:	e7 96       	adiw	r28, 0x37	; 55
    e1c0:	e8 e0       	ldi	r30, 0x08	; 8
    e1c2:	0c 94 fe e0 	jmp	0x1c1fc	; 0x1c1fc <__epilogue_restores__+0x14>

0000e1c6 <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    e1c6:	ab e1       	ldi	r26, 0x1B	; 27
    e1c8:	b0 e0       	ldi	r27, 0x00	; 0
    e1ca:	e9 ee       	ldi	r30, 0xE9	; 233
    e1cc:	f0 e7       	ldi	r31, 0x70	; 112
    e1ce:	0c 94 e8 e0 	jmp	0x1c1d0	; 0x1c1d0 <__prologue_saves__+0x20>
    e1d2:	dc 01       	movw	r26, r24
    char attrs[6];
    if(info->fname[0] == 0)
    e1d4:	fc 01       	movw	r30, r24
    e1d6:	86 89       	ldd	r24, Z+22	; 0x16
    e1d8:	81 11       	cpse	r24, r1
    e1da:	03 c0       	rjmp	.+6      	; 0xe1e2 <fatfs_filinfo_list+0x1c>
    {
        printf("fatfs_filinfo_list: empty\n");
    e1dc:	8b e7       	ldi	r24, 0x7B	; 123
    e1de:	98 e0       	ldi	r25, 0x08	; 8
    e1e0:	69 c0       	rjmp	.+210    	; 0xe2b4 <fatfs_filinfo_list+0xee>
        return;
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    e1e2:	fd 01       	movw	r30, r26
    e1e4:	80 85       	ldd	r24, Z+8	; 0x08
    e1e6:	84 fd       	sbrc	r24, 4
    e1e8:	02 c0       	rjmp	.+4      	; 0xe1ee <fatfs_filinfo_list+0x28>
    e1ea:	9d e2       	ldi	r25, 0x2D	; 45
    e1ec:	01 c0       	rjmp	.+2      	; 0xe1f0 <fatfs_filinfo_list+0x2a>
    e1ee:	94 e4       	ldi	r25, 0x44	; 68
    e1f0:	9e 8b       	std	Y+22, r25	; 0x16
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    e1f2:	80 fd       	sbrc	r24, 0
    e1f4:	02 c0       	rjmp	.+4      	; 0xe1fa <fatfs_filinfo_list+0x34>
    e1f6:	9d e2       	ldi	r25, 0x2D	; 45
    e1f8:	01 c0       	rjmp	.+2      	; 0xe1fc <fatfs_filinfo_list+0x36>
    e1fa:	92 e5       	ldi	r25, 0x52	; 82
    e1fc:	9f 8b       	std	Y+23, r25	; 0x17
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    e1fe:	81 fd       	sbrc	r24, 1
    e200:	02 c0       	rjmp	.+4      	; 0xe206 <fatfs_filinfo_list+0x40>
    e202:	9d e2       	ldi	r25, 0x2D	; 45
    e204:	01 c0       	rjmp	.+2      	; 0xe208 <fatfs_filinfo_list+0x42>
    e206:	98 e4       	ldi	r25, 0x48	; 72
    e208:	98 8f       	std	Y+24, r25	; 0x18
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    e20a:	82 fd       	sbrc	r24, 2
    e20c:	02 c0       	rjmp	.+4      	; 0xe212 <fatfs_filinfo_list+0x4c>
    e20e:	9d e2       	ldi	r25, 0x2D	; 45
    e210:	01 c0       	rjmp	.+2      	; 0xe214 <fatfs_filinfo_list+0x4e>
    e212:	93 e5       	ldi	r25, 0x53	; 83
    e214:	99 8f       	std	Y+25, r25	; 0x19
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    e216:	85 fd       	sbrc	r24, 5
    e218:	02 c0       	rjmp	.+4      	; 0xe21e <fatfs_filinfo_list+0x58>
    e21a:	8d e2       	ldi	r24, 0x2D	; 45
    e21c:	01 c0       	rjmp	.+2      	; 0xe220 <fatfs_filinfo_list+0x5a>
    e21e:	81 e4       	ldi	r24, 0x41	; 65
    e220:	8a 8f       	std	Y+26, r24	; 0x1a
    attrs[5] = 0;
    e222:	1b 8e       	std	Y+27, r1	; 0x1b
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    e224:	fd 01       	movw	r30, r26
    e226:	24 81       	ldd	r18, Z+4	; 0x04
    e228:	35 81       	ldd	r19, Z+5	; 0x05
    e22a:	46 81       	ldd	r20, Z+6	; 0x06
    e22c:	57 81       	ldd	r21, Z+7	; 0x07
    e22e:	cd 01       	movw	r24, r26
    e230:	46 96       	adiw	r24, 0x16	; 22
    e232:	ed b7       	in	r30, 0x3d	; 61
    e234:	fe b7       	in	r31, 0x3e	; 62
    e236:	95 8b       	std	Z+21, r25	; 0x15
    e238:	84 8b       	std	Z+20, r24	; 0x14
    e23a:	8d 91       	ld	r24, X+
    e23c:	9d 91       	ld	r25, X+
    e23e:	0d 90       	ld	r0, X+
    e240:	bc 91       	ld	r27, X
    e242:	a0 2d       	mov	r26, r0
    e244:	80 8b       	std	Z+16, r24	; 0x10
    e246:	91 8b       	std	Z+17, r25	; 0x11
    e248:	a2 8b       	std	Z+18, r26	; 0x12
    e24a:	b3 8b       	std	Z+19, r27	; 0x13
    e24c:	ca 01       	movw	r24, r20
    e24e:	45 e0       	ldi	r20, 0x05	; 5
    e250:	96 95       	lsr	r25
    e252:	87 95       	ror	r24
    e254:	4a 95       	dec	r20
    e256:	e1 f7       	brne	.-8      	; 0xe250 <fatfs_filinfo_list+0x8a>
    e258:	8f 73       	andi	r24, 0x3F	; 63
    e25a:	99 27       	eor	r25, r25
    e25c:	97 87       	std	Z+15, r25	; 0x0f
    e25e:	86 87       	std	Z+14, r24	; 0x0e
    e260:	85 2f       	mov	r24, r21
    e262:	86 95       	lsr	r24
    e264:	86 95       	lsr	r24
    e266:	86 95       	lsr	r24
    e268:	84 87       	std	Z+12, r24	; 0x0c
    e26a:	15 86       	std	Z+13, r1	; 0x0d
    e26c:	c9 01       	movw	r24, r18
    e26e:	8f 71       	andi	r24, 0x1F	; 31
    e270:	99 27       	eor	r25, r25
    e272:	93 87       	std	Z+11, r25	; 0x0b
    e274:	82 87       	std	Z+10, r24	; 0x0a
    e276:	c9 01       	movw	r24, r18
    e278:	55 e0       	ldi	r21, 0x05	; 5
    e27a:	96 95       	lsr	r25
    e27c:	87 95       	ror	r24
    e27e:	5a 95       	dec	r21
    e280:	e1 f7       	brne	.-8      	; 0xe27a <fatfs_filinfo_list+0xb4>
    e282:	8f 70       	andi	r24, 0x0F	; 15
    e284:	99 27       	eor	r25, r25
    e286:	91 87       	std	Z+9, r25	; 0x09
    e288:	80 87       	std	Z+8, r24	; 0x08
    e28a:	23 2f       	mov	r18, r19
    e28c:	33 27       	eor	r19, r19
    e28e:	26 95       	lsr	r18
    e290:	24 54       	subi	r18, 0x44	; 68
    e292:	38 4f       	sbci	r19, 0xF8	; 248
    e294:	37 83       	std	Z+7, r19	; 0x07
    e296:	26 83       	std	Z+6, r18	; 0x06
    e298:	ce 01       	movw	r24, r28
    e29a:	46 96       	adiw	r24, 0x16	; 22
    e29c:	95 83       	std	Z+5, r25	; 0x05
    e29e:	84 83       	std	Z+4, r24	; 0x04
    e2a0:	89 e5       	ldi	r24, 0x59	; 89
    e2a2:	98 e0       	ldi	r25, 0x08	; 8
    e2a4:	a0 e0       	ldi	r26, 0x00	; 0
    e2a6:	81 83       	std	Z+1, r24	; 0x01
    e2a8:	92 83       	std	Z+2, r25	; 0x02
    e2aa:	a3 83       	std	Z+3, r26	; 0x03
    e2ac:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    e2b0:	87 e5       	ldi	r24, 0x57	; 87
    e2b2:	98 e0       	ldi	r25, 0x08	; 8
    e2b4:	a0 e0       	ldi	r26, 0x00	; 0
    e2b6:	ed b7       	in	r30, 0x3d	; 61
    e2b8:	fe b7       	in	r31, 0x3e	; 62
    e2ba:	81 83       	std	Z+1, r24	; 0x01
    e2bc:	92 83       	std	Z+2, r25	; 0x02
    e2be:	a3 83       	std	Z+3, r26	; 0x03
    e2c0:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
}
    e2c4:	6b 96       	adiw	r28, 0x1b	; 27
    e2c6:	e2 e0       	ldi	r30, 0x02	; 2
    e2c8:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

0000e2cc <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    e2cc:	cf 93       	push	r28
    e2ce:	df 93       	push	r29
    e2d0:	00 d0       	rcall	.+0      	; 0xe2d2 <fatfs_help+0x6>
    e2d2:	1f 92       	push	r1
    e2d4:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    e2d6:	8c e9       	ldi	r24, 0x9C	; 156
    e2d8:	9b e0       	ldi	r25, 0x0B	; 11
    e2da:	a0 e0       	ldi	r26, 0x00	; 0
    e2dc:	ed b7       	in	r30, 0x3d	; 61
    e2de:	fe b7       	in	r31, 0x3e	; 62
    e2e0:	81 83       	std	Z+1, r24	; 0x01
    e2e2:	92 83       	std	Z+2, r25	; 0x02
    e2e4:	a3 83       	std	Z+3, r26	; 0x03
    e2e6:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

    if(full)
    e2ea:	cd 2b       	or	r28, r29
    e2ec:	51 f0       	breq	.+20     	; 0xe302 <fatfs_help+0x36>
    {
        printf(
    e2ee:	80 e2       	ldi	r24, 0x20	; 32
    e2f0:	9b e0       	ldi	r25, 0x0B	; 11
    e2f2:	a0 e0       	ldi	r26, 0x00	; 0
    e2f4:	ed b7       	in	r30, 0x3d	; 61
    e2f6:	fe b7       	in	r31, 0x3e	; 62
    e2f8:	81 83       	std	Z+1, r24	; 0x01
    e2fa:	92 83       	std	Z+2, r25	; 0x02
    e2fc:	a3 83       	std	Z+3, r26	; 0x03
    e2fe:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    #endif
            "\n"
            );
    }

}
    e302:	cd b7       	in	r28, 0x3d	; 61
    e304:	de b7       	in	r29, 0x3e	; 62
    e306:	23 96       	adiw	r28, 0x03	; 3
    e308:	e2 e0       	ldi	r30, 0x02	; 2
    e30a:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

0000e30e <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  void.
MEMSPACE
void fatfs_ls(char *name)
{
    e30e:	a5 e5       	ldi	r26, 0x55	; 85
    e310:	b2 e0       	ldi	r27, 0x02	; 2
    e312:	ed e8       	ldi	r30, 0x8D	; 141
    e314:	f1 e7       	ldi	r31, 0x71	; 113
    e316:	0c 94 e2 e0 	jmp	0x1c1c4	; 0x1c1c4 <__prologue_saves__+0x14>
    e31a:	8e 01       	movw	r16, r28
    e31c:	0e 5d       	subi	r16, 0xDE	; 222
    e31e:	1e 4f       	sbci	r17, 0xFE	; 254
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[256];

    if(!name || !*name)
    e320:	00 97       	sbiw	r24, 0x00	; 0
    e322:	21 f0       	breq	.+8      	; 0xe32c <fatfs_ls+0x1e>
    e324:	fc 01       	movw	r30, r24
    e326:	20 81       	ld	r18, Z
    e328:	21 11       	cpse	r18, r1
    e32a:	03 c0       	rjmp	.+6      	; 0xe332 <fatfs_ls+0x24>
    {
        strcpy(buff,".");
    e32c:	6b ef       	ldi	r22, 0xFB	; 251
    e32e:	72 e1       	ldi	r23, 0x12	; 18
    e330:	01 c0       	rjmp	.+2      	; 0xe334 <fatfs_ls+0x26>
    }
    else
    {
        strcpy(buff,name);
    e332:	bc 01       	movw	r22, r24
    e334:	c8 01       	movw	r24, r16
    e336:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    e33a:	ed b7       	in	r30, 0x3d	; 61
    e33c:	fe b7       	in	r31, 0x3e	; 62
    e33e:	15 83       	std	Z+5, r17	; 0x05
    e340:	04 83       	std	Z+4, r16	; 0x04
    e342:	80 e9       	ldi	r24, 0x90	; 144
    e344:	9a e0       	ldi	r25, 0x0A	; 10
    e346:	a0 e0       	ldi	r26, 0x00	; 0
    e348:	81 83       	std	Z+1, r24	; 0x01
    e34a:	92 83       	std	Z+2, r25	; 0x02
    e34c:	a3 83       	std	Z+3, r26	; 0x03
    e34e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

    res = f_opendir(&dirs, buff);
    e352:	b8 01       	movw	r22, r16
    e354:	ce 01       	movw	r24, r28
    e356:	8e 5d       	subi	r24, 0xDE	; 222
    e358:	9d 4f       	sbci	r25, 0xFD	; 253
    e35a:	0e 94 7b 61 	call	0xc2f6	; 0xc2f6 <f_opendir>
    if (res) { put_rc(res); return; }
    e35e:	00 97       	sbiw	r24, 0x00	; 0
    e360:	11 f0       	breq	.+4      	; 0xe366 <fatfs_ls+0x58>
    e362:	23 dd       	rcall	.-1466   	; 0xddaa <put_rc>
    e364:	8a c0       	rjmp	.+276    	; 0xe47a <fatfs_ls+0x16c>
    p1 = s1 = s2 = 0;
    e366:	c0 5b       	subi	r28, 0xB0	; 176
    e368:	dd 4f       	sbci	r29, 0xFD	; 253
    e36a:	18 82       	st	Y, r1
    e36c:	19 82       	std	Y+1, r1	; 0x01
    e36e:	1a 82       	std	Y+2, r1	; 0x02
    e370:	1b 82       	std	Y+3, r1	; 0x03
    e372:	c0 55       	subi	r28, 0x50	; 80
    e374:	d2 40       	sbci	r29, 0x02	; 2
    e376:	c1 2c       	mov	r12, r1
    e378:	d1 2c       	mov	r13, r1
    e37a:	e1 2c       	mov	r14, r1
    e37c:	f1 2c       	mov	r15, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    e37e:	be 01       	movw	r22, r28
    e380:	64 5f       	subi	r22, 0xF4	; 244
    e382:	7f 4f       	sbci	r23, 0xFF	; 255
    e384:	ce 01       	movw	r24, r28
    e386:	8e 5d       	subi	r24, 0xDE	; 222
    e388:	9d 4f       	sbci	r25, 0xFD	; 253
    e38a:	0e 94 01 62 	call	0xc402	; 0xc402 <f_readdir>
        if ((res != FR_OK) || !fno.fname[0]) break;
    e38e:	89 2b       	or	r24, r25
    e390:	49 f5       	brne	.+82     	; 0xe3e4 <fatfs_ls+0xd6>
    e392:	8a a1       	ldd	r24, Y+34	; 0x22
    e394:	88 23       	and	r24, r24
    e396:	31 f1       	breq	.+76     	; 0xe3e4 <fatfs_ls+0xd6>
        if (fno.fattrib & AM_DIR)
    e398:	8c 89       	ldd	r24, Y+20	; 0x14
    e39a:	84 ff       	sbrs	r24, 4
    e39c:	04 c0       	rjmp	.+8      	; 0xe3a6 <fatfs_ls+0x98>
        {
            s2++;
    e39e:	ff ef       	ldi	r31, 0xFF	; 255
    e3a0:	cf 1a       	sub	r12, r31
    e3a2:	df 0a       	sbc	r13, r31
    e3a4:	1b c0       	rjmp	.+54     	; 0xe3dc <fatfs_ls+0xce>
        }
        else
        {
            s1++; p1 += fno.fsize;
    e3a6:	8f ef       	ldi	r24, 0xFF	; 255
    e3a8:	e8 1a       	sub	r14, r24
    e3aa:	f8 0a       	sbc	r15, r24
    e3ac:	4c 85       	ldd	r20, Y+12	; 0x0c
    e3ae:	5d 85       	ldd	r21, Y+13	; 0x0d
    e3b0:	6e 85       	ldd	r22, Y+14	; 0x0e
    e3b2:	7f 85       	ldd	r23, Y+15	; 0x0f
    e3b4:	c0 5b       	subi	r28, 0xB0	; 176
    e3b6:	dd 4f       	sbci	r29, 0xFD	; 253
    e3b8:	88 81       	ld	r24, Y
    e3ba:	99 81       	ldd	r25, Y+1	; 0x01
    e3bc:	aa 81       	ldd	r26, Y+2	; 0x02
    e3be:	bb 81       	ldd	r27, Y+3	; 0x03
    e3c0:	c0 55       	subi	r28, 0x50	; 80
    e3c2:	d2 40       	sbci	r29, 0x02	; 2
    e3c4:	84 0f       	add	r24, r20
    e3c6:	95 1f       	adc	r25, r21
    e3c8:	a6 1f       	adc	r26, r22
    e3ca:	b7 1f       	adc	r27, r23
    e3cc:	c0 5b       	subi	r28, 0xB0	; 176
    e3ce:	dd 4f       	sbci	r29, 0xFD	; 253
    e3d0:	88 83       	st	Y, r24
    e3d2:	99 83       	std	Y+1, r25	; 0x01
    e3d4:	aa 83       	std	Y+2, r26	; 0x02
    e3d6:	bb 83       	std	Y+3, r27	; 0x03
    e3d8:	c0 55       	subi	r28, 0x50	; 80
    e3da:	d2 40       	sbci	r29, 0x02	; 2
        }
        fatfs_filinfo_list(&fno);
    e3dc:	ce 01       	movw	r24, r28
    e3de:	0c 96       	adiw	r24, 0x0c	; 12
    e3e0:	f2 de       	rcall	.-540    	; 0xe1c6 <fatfs_filinfo_list>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    e3e2:	cd cf       	rjmp	.-102    	; 0xe37e <fatfs_ls+0x70>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    e3e4:	ed b7       	in	r30, 0x3d	; 61
    e3e6:	fe b7       	in	r31, 0x3e	; 62
    e3e8:	d3 86       	std	Z+11, r13	; 0x0b
    e3ea:	c2 86       	std	Z+10, r12	; 0x0a
    e3ec:	c0 5b       	subi	r28, 0xB0	; 176
    e3ee:	dd 4f       	sbci	r29, 0xFD	; 253
    e3f0:	88 81       	ld	r24, Y
    e3f2:	99 81       	ldd	r25, Y+1	; 0x01
    e3f4:	aa 81       	ldd	r26, Y+2	; 0x02
    e3f6:	bb 81       	ldd	r27, Y+3	; 0x03
    e3f8:	c0 55       	subi	r28, 0x50	; 80
    e3fa:	d2 40       	sbci	r29, 0x02	; 2
    e3fc:	86 83       	std	Z+6, r24	; 0x06
    e3fe:	97 83       	std	Z+7, r25	; 0x07
    e400:	a0 87       	std	Z+8, r26	; 0x08
    e402:	b1 87       	std	Z+9, r27	; 0x09
    e404:	f5 82       	std	Z+5, r15	; 0x05
    e406:	e4 82       	std	Z+4, r14	; 0x04
    e408:	87 e6       	ldi	r24, 0x67	; 103
    e40a:	9a e0       	ldi	r25, 0x0A	; 10
    e40c:	a0 e0       	ldi	r26, 0x00	; 0
    e40e:	81 83       	std	Z+1, r24	; 0x01
    e410:	92 83       	std	Z+2, r25	; 0x02
    e412:	a3 83       	std	Z+3, r26	; 0x03
    e414:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    e418:	ae 01       	movw	r20, r28
    e41a:	4c 5a       	subi	r20, 0xAC	; 172
    e41c:	5d 4f       	sbci	r21, 0xFD	; 253
    e41e:	be 01       	movw	r22, r28
    e420:	60 5b       	subi	r22, 0xB0	; 176
    e422:	7d 4f       	sbci	r23, 0xFD	; 253
    e424:	c8 01       	movw	r24, r16
    e426:	0e 94 83 62 	call	0xc506	; 0xc506 <f_getfree>
    e42a:	89 2b       	or	r24, r25
    e42c:	31 f5       	brne	.+76     	; 0xe47a <fatfs_ls+0x16c>
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    e42e:	cc 5a       	subi	r28, 0xAC	; 172
    e430:	dd 4f       	sbci	r29, 0xFD	; 253
    e432:	e8 81       	ld	r30, Y
    e434:	f9 81       	ldd	r31, Y+1	; 0x01
    e436:	c4 55       	subi	r28, 0x54	; 84
    e438:	d2 40       	sbci	r29, 0x02	; 2
    e43a:	a1 85       	ldd	r26, Z+9	; 0x09
    e43c:	b2 85       	ldd	r27, Z+10	; 0x0a
    e43e:	c0 5b       	subi	r28, 0xB0	; 176
    e440:	dd 4f       	sbci	r29, 0xFD	; 253
    e442:	28 81       	ld	r18, Y
    e444:	39 81       	ldd	r19, Y+1	; 0x01
    e446:	4a 81       	ldd	r20, Y+2	; 0x02
    e448:	5b 81       	ldd	r21, Y+3	; 0x03
    e44a:	c0 55       	subi	r28, 0x50	; 80
    e44c:	d2 40       	sbci	r29, 0x02	; 2
    e44e:	0e 94 b8 e0 	call	0x1c170	; 0x1c170 <__muluhisi3>
    e452:	22 e0       	ldi	r18, 0x02	; 2
    e454:	30 e0       	ldi	r19, 0x00	; 0
    e456:	40 e0       	ldi	r20, 0x00	; 0
    e458:	50 e0       	ldi	r21, 0x00	; 0
    e45a:	0e 94 8d e0 	call	0x1c11a	; 0x1c11a <__divmodsi4>
    e45e:	ed b7       	in	r30, 0x3d	; 61
    e460:	fe b7       	in	r31, 0x3e	; 62
    e462:	24 83       	std	Z+4, r18	; 0x04
    e464:	35 83       	std	Z+5, r19	; 0x05
    e466:	46 83       	std	Z+6, r20	; 0x06
    e468:	57 83       	std	Z+7, r21	; 0x07
    e46a:	82 e5       	ldi	r24, 0x52	; 82
    e46c:	9a e0       	ldi	r25, 0x0A	; 10
    e46e:	a0 e0       	ldi	r26, 0x00	; 0
    e470:	81 83       	std	Z+1, r24	; 0x01
    e472:	92 83       	std	Z+2, r25	; 0x02
    e474:	a3 83       	std	Z+3, r26	; 0x03
    e476:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
}
    e47a:	cb 5a       	subi	r28, 0xAB	; 171
    e47c:	dd 4f       	sbci	r29, 0xFD	; 253
    e47e:	e8 e0       	ldi	r30, 0x08	; 8
    e480:	0c 94 fe e0 	jmp	0x1c1fc	; 0x1c1fc <__epilogue_restores__+0x14>

0000e484 <mmc_test>:
/// - Assumes the device is formatted
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    e484:	00 d0       	rcall	.+0      	; 0xe486 <mmc_test+0x2>
    e486:	1f 92       	push	r1
    printf("==============================\n");
    e488:	80 ef       	ldi	r24, 0xF0	; 240
    e48a:	9a e0       	ldi	r25, 0x0A	; 10
    e48c:	a0 e0       	ldi	r26, 0x00	; 0
    e48e:	ed b7       	in	r30, 0x3d	; 61
    e490:	fe b7       	in	r31, 0x3e	; 62
    e492:	81 83       	std	Z+1, r24	; 0x01
    e494:	92 83       	std	Z+2, r25	; 0x02
    e496:	a3 83       	std	Z+3, r26	; 0x03
    e498:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("START MMC TEST\n");
    e49c:	80 ee       	ldi	r24, 0xE0	; 224
    e49e:	9a e0       	ldi	r25, 0x0A	; 10
    e4a0:	a0 e0       	ldi	r26, 0x00	; 0
    e4a2:	ed b7       	in	r30, 0x3d	; 61
    e4a4:	fe b7       	in	r31, 0x3e	; 62
    e4a6:	81 83       	std	Z+1, r24	; 0x01
    e4a8:	92 83       	std	Z+2, r25	; 0x02
    e4aa:	a3 83       	std	Z+3, r26	; 0x03
    e4ac:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    fatfs_status("/");
    e4b0:	86 ea       	ldi	r24, 0xA6	; 166
    e4b2:	98 e0       	ldi	r25, 0x08	; 8
    e4b4:	0e dd       	rcall	.-1508   	; 0xded2 <fatfs_status>
    printf("MMC Directory List\n");
    e4b6:	8c ec       	ldi	r24, 0xCC	; 204
    e4b8:	9a e0       	ldi	r25, 0x0A	; 10
    e4ba:	a0 e0       	ldi	r26, 0x00	; 0
    e4bc:	ed b7       	in	r30, 0x3d	; 61
    e4be:	fe b7       	in	r31, 0x3e	; 62
    e4c0:	81 83       	std	Z+1, r24	; 0x01
    e4c2:	92 83       	std	Z+2, r25	; 0x02
    e4c4:	a3 83       	std	Z+3, r26	; 0x03
    e4c6:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    fatfs_ls("/");
    e4ca:	86 ea       	ldi	r24, 0xA6	; 166
    e4cc:	98 e0       	ldi	r25, 0x08	; 8
    e4ce:	1f df       	rcall	.-450    	; 0xe30e <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    e4d0:	8e eb       	ldi	r24, 0xBE	; 190
    e4d2:	9a e0       	ldi	r25, 0x0A	; 10
    e4d4:	a0 e0       	ldi	r26, 0x00	; 0
    e4d6:	ed b7       	in	r30, 0x3d	; 61
    e4d8:	fe b7       	in	r31, 0x3e	; 62
    e4da:	81 83       	std	Z+1, r24	; 0x01
    e4dc:	92 83       	std	Z+2, r25	; 0x02
    e4de:	a3 83       	std	Z+3, r26	; 0x03
    e4e0:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("==============================\n");
    e4e4:	8e e9       	ldi	r24, 0x9E	; 158
    e4e6:	9a e0       	ldi	r25, 0x0A	; 10
    e4e8:	a0 e0       	ldi	r26, 0x00	; 0
    e4ea:	ed b7       	in	r30, 0x3d	; 61
    e4ec:	fe b7       	in	r31, 0x3e	; 62
    e4ee:	81 83       	std	Z+1, r24	; 0x01
    e4f0:	92 83       	std	Z+2, r25	; 0x02
    e4f2:	a3 83       	std	Z+3, r26	; 0x03
    e4f4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
}
    e4f8:	0f 90       	pop	r0
    e4fa:	0f 90       	pop	r0
    e4fc:	0f 90       	pop	r0
    e4fe:	08 95       	ret

0000e500 <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    e500:	ef 92       	push	r14
    e502:	ff 92       	push	r15
    e504:	0f 93       	push	r16
    e506:	1f 93       	push	r17
    e508:	cf 93       	push	r28
    e50a:	df 93       	push	r29
    e50c:	ad b7       	in	r26, 0x3d	; 61
    e50e:	be b7       	in	r27, 0x3e	; 62
    e510:	17 97       	sbiw	r26, 0x07	; 7
    e512:	0f b6       	in	r0, 0x3f	; 63
    e514:	f8 94       	cli
    e516:	be bf       	out	0x3e, r27	; 62
    e518:	0f be       	out	0x3f, r0	; 63
    e51a:	ad bf       	out	0x3d, r26	; 61
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
    e51c:	fb 01       	movw	r30, r22
    e51e:	20 81       	ld	r18, Z
    e520:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    e522:	21 15       	cp	r18, r1
    e524:	31 05       	cpc	r19, r1
    e526:	19 f4       	brne	.+6      	; 0xe52e <fatfs_tests+0x2e>
        return(0);
    e528:	80 e0       	ldi	r24, 0x00	; 0
    e52a:	90 e0       	ldi	r25, 0x00	; 0
    e52c:	73 c0       	rjmp	.+230    	; 0xe614 <fatfs_tests+0x114>
    e52e:	eb 01       	movw	r28, r22
    e530:	8c 01       	movw	r16, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    e532:	62 ed       	ldi	r22, 0xD2	; 210
    e534:	78 e0       	ldi	r23, 0x08	; 8
    e536:	c9 01       	movw	r24, r18
    e538:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCH>
    e53c:	89 2b       	or	r24, r25
    e53e:	a1 f3       	breq	.-24     	; 0xe528 <fatfs_tests+0x28>
    {
        ptr = argv[ind++];
    e540:	ea 80       	ldd	r14, Y+2	; 0x02
    e542:	fb 80       	ldd	r15, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    e544:	e1 14       	cp	r14, r1
    e546:	f1 04       	cpc	r15, r1
    e548:	21 f4       	brne	.+8      	; 0xe552 <fatfs_tests+0x52>
        {
            fatfs_help(1);
    e54a:	81 e0       	ldi	r24, 0x01	; 1
    e54c:	90 e0       	ldi	r25, 0x00	; 0
    e54e:	be de       	rcall	.-644    	; 0xe2cc <fatfs_help>
    e550:	5f c0       	rjmp	.+190    	; 0xe610 <fatfs_tests+0x110>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    e552:	6d e9       	ldi	r22, 0x9D	; 157
    e554:	76 e1       	ldi	r23, 0x16	; 22
    e556:	c7 01       	movw	r24, r14
    e558:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCH>
    e55c:	89 2b       	or	r24, r25
    e55e:	a9 f7       	brne	.-22     	; 0xe54a <fatfs_tests+0x4a>
    {
        return(0);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    e560:	98 01       	movw	r18, r16
    e562:	42 e0       	ldi	r20, 0x02	; 2
    e564:	50 e0       	ldi	r21, 0x00	; 0
    e566:	68 ed       	ldi	r22, 0xD8	; 216
    e568:	78 e0       	ldi	r23, 0x08	; 8
    e56a:	c7 01       	movw	r24, r14
    e56c:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <MATCHARGS>
    e570:	89 2b       	or	r24, r25
    e572:	31 f1       	breq	.+76     	; 0xe5c0 <fatfs_tests+0xc0>
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
    e574:	ed b7       	in	r30, 0x3d	; 61
    e576:	fe b7       	in	r31, 0x3e	; 62
    e578:	17 83       	std	Z+7, r17	; 0x07
    e57a:	06 83       	std	Z+6, r16	; 0x06
    e57c:	82 e0       	ldi	r24, 0x02	; 2
    e57e:	90 e0       	ldi	r25, 0x00	; 0
    e580:	95 83       	std	Z+5, r25	; 0x05
    e582:	84 83       	std	Z+4, r24	; 0x04
    e584:	80 e1       	ldi	r24, 0x10	; 16
    e586:	9b e0       	ldi	r25, 0x0B	; 11
    e588:	a0 e0       	ldi	r26, 0x00	; 0
    e58a:	81 83       	std	Z+1, r24	; 0x01
    e58c:	92 83       	std	Z+2, r25	; 0x02
    e58e:	a3 83       	std	Z+3, r26	; 0x03
    e590:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    e594:	7e 01       	movw	r14, r28
    e596:	f4 e0       	ldi	r31, 0x04	; 4
    e598:	ef 0e       	add	r14, r31
    e59a:	f1 1c       	adc	r15, r1
        for(i=ind;i<argc;++i)
    e59c:	c2 e0       	ldi	r28, 0x02	; 2
    e59e:	d0 e0       	ldi	r29, 0x00	; 0
    e5a0:	c0 17       	cp	r28, r16
    e5a2:	d1 07       	cpc	r29, r17
    e5a4:	3c f4       	brge	.+14     	; 0xe5b4 <fatfs_tests+0xb4>
        {
//printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
    e5a6:	f7 01       	movw	r30, r14
    e5a8:	81 91       	ld	r24, Z+
    e5aa:	91 91       	ld	r25, Z+
    e5ac:	7f 01       	movw	r14, r30
    e5ae:	af de       	rcall	.-674    	; 0xe30e <fatfs_ls>
    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    e5b0:	21 96       	adiw	r28, 0x01	; 1
    e5b2:	f6 cf       	rjmp	.-20     	; 0xe5a0 <fatfs_tests+0xa0>
        {
//printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
            ++args;
        }
        if(!args)
    e5b4:	22 97       	sbiw	r28, 0x02	; 2
    e5b6:	61 f5       	brne	.+88     	; 0xe610 <fatfs_tests+0x110>
        {
            fatfs_ls("");
    e5b8:	8d e2       	ldi	r24, 0x2D	; 45
    e5ba:	9c e0       	ldi	r25, 0x0C	; 12
    e5bc:	a8 de       	rcall	.-688    	; 0xe30e <fatfs_ls>
    e5be:	28 c0       	rjmp	.+80     	; 0xe610 <fatfs_tests+0x110>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    e5c0:	98 01       	movw	r18, r16
    e5c2:	42 e0       	ldi	r20, 0x02	; 2
    e5c4:	50 e0       	ldi	r21, 0x00	; 0
    e5c6:	6b ed       	ldi	r22, 0xDB	; 219
    e5c8:	78 e0       	ldi	r23, 0x08	; 8
    e5ca:	c7 01       	movw	r24, r14
    e5cc:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <MATCHARGS>
    e5d0:	89 2b       	or	r24, r25
    {
        mmc_test();
    e5d2:	11 f0       	breq	.+4      	; 0xe5d8 <fatfs_tests+0xd8>
    e5d4:	57 df       	rcall	.-338    	; 0xe484 <mmc_test>
    e5d6:	1c c0       	rjmp	.+56     	; 0xe610 <fatfs_tests+0x110>
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    e5d8:	98 01       	movw	r18, r16
    e5da:	42 e0       	ldi	r20, 0x02	; 2
    e5dc:	50 e0       	ldi	r21, 0x00	; 0
    e5de:	64 ee       	ldi	r22, 0xE4	; 228
    e5e0:	78 e0       	ldi	r23, 0x08	; 8
    e5e2:	c7 01       	movw	r24, r14
    e5e4:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <MATCHARGS>
    e5e8:	89 2b       	or	r24, r25
    {
        mmc_init(1);
    e5ea:	21 f0       	breq	.+8      	; 0xe5f4 <fatfs_tests+0xf4>
    e5ec:	81 e0       	ldi	r24, 0x01	; 1
    e5ee:	90 e0       	ldi	r25, 0x00	; 0
    e5f0:	99 da       	rcall	.-2766   	; 0xdb24 <mmc_init>
    e5f2:	0e c0       	rjmp	.+28     	; 0xe610 <fatfs_tests+0x110>
        return(1);
    }

    if (MATCHARGS(ptr,"status", (ind + 1), argc))
    e5f4:	98 01       	movw	r18, r16
    e5f6:	43 e0       	ldi	r20, 0x03	; 3
    e5f8:	50 e0       	ldi	r21, 0x00	; 0
    e5fa:	6d ee       	ldi	r22, 0xED	; 237
    e5fc:	78 e0       	ldi	r23, 0x08	; 8
    e5fe:	c7 01       	movw	r24, r14
    e600:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <MATCHARGS>
    e604:	89 2b       	or	r24, r25
    e606:	09 f4       	brne	.+2      	; 0xe60a <fatfs_tests+0x10a>
    {
        fatfs_status(argv[ind]);
    e608:	8f cf       	rjmp	.-226    	; 0xe528 <fatfs_tests+0x28>
    e60a:	8c 81       	ldd	r24, Y+4	; 0x04
    e60c:	9d 81       	ldd	r25, Y+5	; 0x05
    e60e:	61 dc       	rcall	.-1854   	; 0xded2 <fatfs_status>
        }
        if(!args)
        {
            fatfs_ls("");
        }
        return(1);
    e610:	81 e0       	ldi	r24, 0x01	; 1
    e612:	90 e0       	ldi	r25, 0x00	; 0
        return(1);
    }
#endif

    return(0);
}
    e614:	cd b7       	in	r28, 0x3d	; 61
    e616:	de b7       	in	r29, 0x3e	; 62
    e618:	27 96       	adiw	r28, 0x07	; 7
    e61a:	e6 e0       	ldi	r30, 0x06	; 6
    e61c:	0c 94 00 e1 	jmp	0x1c200	; 0x1c200 <__epilogue_restores__+0x18>

0000e620 <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    e620:	8f 92       	push	r8
    e622:	9f 92       	push	r9
    e624:	af 92       	push	r10
    e626:	bf 92       	push	r11
    e628:	ef 92       	push	r14
    e62a:	ff 92       	push	r15
    e62c:	0f 93       	push	r16
    e62e:	1f 93       	push	r17
    e630:	cf 93       	push	r28
    e632:	df 93       	push	r29
    e634:	00 d0       	rcall	.+0      	; 0xe636 <fatfs_getc+0x16>
    e636:	1f 92       	push	r1
    e638:	cd b7       	in	r28, 0x3d	; 61
    e63a:	de b7       	in	r29, 0x3e	; 62
    e63c:	10 92 d8 1c 	sts	0x1CD8, r1	; 0x801cd8 <errno+0x1>
    e640:	10 92 d7 1c 	sts	0x1CD7, r1	; 0x801cd7 <errno>
    e644:	00 97       	sbiw	r24, 0x00	; 0
    e646:	39 f4       	brne	.+14     	; 0xe656 <fatfs_getc+0x36>
    e648:	89 e0       	ldi	r24, 0x09	; 9
    e64a:	90 e0       	ldi	r25, 0x00	; 0
    e64c:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    e650:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
    e654:	2f c0       	rjmp	.+94     	; 0xe6b4 <fatfs_getc+0x94>
    e656:	fc 01       	movw	r30, r24
    e658:	e4 84       	ldd	r14, Z+12	; 0x0c
    e65a:	f5 84       	ldd	r15, Z+13	; 0x0d
    e65c:	e1 14       	cp	r14, r1
    e65e:	f1 04       	cpc	r15, r1
    e660:	99 f3       	breq	.-26     	; 0xe648 <fatfs_getc+0x28>
    e662:	8c 01       	movw	r16, r24
    e664:	9e 01       	movw	r18, r28
    e666:	2f 5f       	subi	r18, 0xFF	; 255
    e668:	3f 4f       	sbci	r19, 0xFF	; 255
    e66a:	41 e0       	ldi	r20, 0x01	; 1
    e66c:	50 e0       	ldi	r21, 0x00	; 0
    e66e:	be 01       	movw	r22, r28
    e670:	6d 5f       	subi	r22, 0xFD	; 253
    e672:	7f 4f       	sbci	r23, 0xFF	; 255
    e674:	c7 01       	movw	r24, r14
    e676:	0e 94 b3 59 	call	0xb366	; 0xb366 <f_read>
    e67a:	00 97       	sbiw	r24, 0x00	; 0
    e67c:	31 f4       	brne	.+12     	; 0xe68a <fatfs_getc+0x6a>
    e67e:	29 81       	ldd	r18, Y+1	; 0x01
    e680:	3a 81       	ldd	r19, Y+2	; 0x02
    e682:	21 30       	cpi	r18, 0x01	; 1
    e684:	31 05       	cpc	r19, r1
    e686:	c9 f0       	breq	.+50     	; 0xe6ba <fatfs_getc+0x9a>
    e688:	03 c0       	rjmp	.+6      	; 0xe690 <fatfs_getc+0x70>
    e68a:	84 31       	cpi	r24, 0x14	; 20
    e68c:	91 05       	cpc	r25, r1
    e68e:	40 f4       	brcc	.+16     	; 0xe6a0 <fatfs_getc+0x80>
    e690:	fc 01       	movw	r30, r24
    e692:	ea 55       	subi	r30, 0x5A	; 90
    e694:	f4 4f       	sbci	r31, 0xF4	; 244
    e696:	80 81       	ld	r24, Z
    e698:	08 2e       	mov	r0, r24
    e69a:	00 0c       	add	r0, r0
    e69c:	99 0b       	sbc	r25, r25
    e69e:	02 c0       	rjmp	.+4      	; 0xe6a4 <fatfs_getc+0x84>
    e6a0:	83 e2       	ldi	r24, 0x23	; 35
    e6a2:	90 e0       	ldi	r25, 0x00	; 0
    e6a4:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    e6a8:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
    e6ac:	f8 01       	movw	r30, r16
    e6ae:	83 81       	ldd	r24, Z+3	; 0x03
    e6b0:	80 62       	ori	r24, 0x20	; 32
    e6b2:	83 83       	std	Z+3, r24	; 0x03
    e6b4:	8f ef       	ldi	r24, 0xFF	; 255
    e6b6:	9f ef       	ldi	r25, 0xFF	; 255
    e6b8:	28 c0       	rjmp	.+80     	; 0xe70a <fatfs_getc+0xea>
    e6ba:	8b 81       	ldd	r24, Y+3	; 0x03
    e6bc:	8d 30       	cpi	r24, 0x0D	; 13
    e6be:	01 f5       	brne	.+64     	; 0xe700 <fatfs_getc+0xe0>
    e6c0:	f7 01       	movw	r30, r14
    e6c2:	80 88       	ldd	r8, Z+16	; 0x10
    e6c4:	91 88       	ldd	r9, Z+17	; 0x11
    e6c6:	a2 88       	ldd	r10, Z+18	; 0x12
    e6c8:	b3 88       	ldd	r11, Z+19	; 0x13
    e6ca:	9e 01       	movw	r18, r28
    e6cc:	2f 5f       	subi	r18, 0xFF	; 255
    e6ce:	3f 4f       	sbci	r19, 0xFF	; 255
    e6d0:	41 e0       	ldi	r20, 0x01	; 1
    e6d2:	50 e0       	ldi	r21, 0x00	; 0
    e6d4:	be 01       	movw	r22, r28
    e6d6:	6d 5f       	subi	r22, 0xFD	; 253
    e6d8:	7f 4f       	sbci	r23, 0xFF	; 255
    e6da:	c7 01       	movw	r24, r14
    e6dc:	0e 94 b3 59 	call	0xb366	; 0xb366 <f_read>
    e6e0:	89 2b       	or	r24, r25
    e6e2:	89 f4       	brne	.+34     	; 0xe706 <fatfs_getc+0xe6>
    e6e4:	89 81       	ldd	r24, Y+1	; 0x01
    e6e6:	9a 81       	ldd	r25, Y+2	; 0x02
    e6e8:	01 97       	sbiw	r24, 0x01	; 1
    e6ea:	69 f4       	brne	.+26     	; 0xe706 <fatfs_getc+0xe6>
    e6ec:	8b 81       	ldd	r24, Y+3	; 0x03
    e6ee:	8a 30       	cpi	r24, 0x0A	; 10
    e6f0:	31 f0       	breq	.+12     	; 0xe6fe <fatfs_getc+0xde>
    e6f2:	b5 01       	movw	r22, r10
    e6f4:	a4 01       	movw	r20, r8
    e6f6:	c7 01       	movw	r24, r14
    e6f8:	0e 94 bf 5e 	call	0xbd7e	; 0xbd7e <f_lseek>
    e6fc:	04 c0       	rjmp	.+8      	; 0xe706 <fatfs_getc+0xe6>
    e6fe:	8b 83       	std	Y+3, r24	; 0x03
    e700:	8b 81       	ldd	r24, Y+3	; 0x03
    e702:	90 e0       	ldi	r25, 0x00	; 0
    e704:	02 c0       	rjmp	.+4      	; 0xe70a <fatfs_getc+0xea>
    e706:	8a e0       	ldi	r24, 0x0A	; 10
    e708:	90 e0       	ldi	r25, 0x00	; 0
    e70a:	0f 90       	pop	r0
    e70c:	0f 90       	pop	r0
    e70e:	0f 90       	pop	r0
    e710:	df 91       	pop	r29
    e712:	cf 91       	pop	r28
    e714:	1f 91       	pop	r17
    e716:	0f 91       	pop	r16
    e718:	ff 90       	pop	r15
    e71a:	ef 90       	pop	r14
    e71c:	bf 90       	pop	r11
    e71e:	af 90       	pop	r10
    e720:	9f 90       	pop	r9
    e722:	8f 90       	pop	r8
    e724:	08 95       	ret

0000e726 <fatfs_putc>:
    e726:	a3 e0       	ldi	r26, 0x03	; 3
    e728:	b0 e0       	ldi	r27, 0x00	; 0
    e72a:	e9 e9       	ldi	r30, 0x99	; 153
    e72c:	f3 e7       	ldi	r31, 0x73	; 115
    e72e:	0c 94 e6 e0 	jmp	0x1c1cc	; 0x1c1cc <__prologue_saves__+0x1c>
    e732:	8b 83       	std	Y+3, r24	; 0x03
    e734:	10 92 d8 1c 	sts	0x1CD8, r1	; 0x801cd8 <errno+0x1>
    e738:	10 92 d7 1c 	sts	0x1CD7, r1	; 0x801cd7 <errno>
    e73c:	61 15       	cp	r22, r1
    e73e:	71 05       	cpc	r23, r1
    e740:	39 f4       	brne	.+14     	; 0xe750 <fatfs_putc+0x2a>
    e742:	89 e0       	ldi	r24, 0x09	; 9
    e744:	90 e0       	ldi	r25, 0x00	; 0
    e746:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    e74a:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
    e74e:	2d c0       	rjmp	.+90     	; 0xe7aa <fatfs_putc+0x84>
    e750:	fb 01       	movw	r30, r22
    e752:	84 85       	ldd	r24, Z+12	; 0x0c
    e754:	95 85       	ldd	r25, Z+13	; 0x0d
    e756:	00 97       	sbiw	r24, 0x00	; 0
    e758:	a1 f3       	breq	.-24     	; 0xe742 <fatfs_putc+0x1c>
    e75a:	8b 01       	movw	r16, r22
    e75c:	9e 01       	movw	r18, r28
    e75e:	2f 5f       	subi	r18, 0xFF	; 255
    e760:	3f 4f       	sbci	r19, 0xFF	; 255
    e762:	41 e0       	ldi	r20, 0x01	; 1
    e764:	50 e0       	ldi	r21, 0x00	; 0
    e766:	be 01       	movw	r22, r28
    e768:	6d 5f       	subi	r22, 0xFD	; 253
    e76a:	7f 4f       	sbci	r23, 0xFF	; 255
    e76c:	0e 94 fe 5a 	call	0xb5fc	; 0xb5fc <f_write>
    e770:	00 97       	sbiw	r24, 0x00	; 0
    e772:	31 f4       	brne	.+12     	; 0xe780 <fatfs_putc+0x5a>
    e774:	29 81       	ldd	r18, Y+1	; 0x01
    e776:	3a 81       	ldd	r19, Y+2	; 0x02
    e778:	21 30       	cpi	r18, 0x01	; 1
    e77a:	31 05       	cpc	r19, r1
    e77c:	c9 f0       	breq	.+50     	; 0xe7b0 <fatfs_putc+0x8a>
    e77e:	03 c0       	rjmp	.+6      	; 0xe786 <fatfs_putc+0x60>
    e780:	84 31       	cpi	r24, 0x14	; 20
    e782:	91 05       	cpc	r25, r1
    e784:	40 f4       	brcc	.+16     	; 0xe796 <fatfs_putc+0x70>
    e786:	fc 01       	movw	r30, r24
    e788:	ea 55       	subi	r30, 0x5A	; 90
    e78a:	f4 4f       	sbci	r31, 0xF4	; 244
    e78c:	80 81       	ld	r24, Z
    e78e:	08 2e       	mov	r0, r24
    e790:	00 0c       	add	r0, r0
    e792:	99 0b       	sbc	r25, r25
    e794:	02 c0       	rjmp	.+4      	; 0xe79a <fatfs_putc+0x74>
    e796:	83 e2       	ldi	r24, 0x23	; 35
    e798:	90 e0       	ldi	r25, 0x00	; 0
    e79a:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    e79e:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
    e7a2:	f8 01       	movw	r30, r16
    e7a4:	83 81       	ldd	r24, Z+3	; 0x03
    e7a6:	80 62       	ori	r24, 0x20	; 32
    e7a8:	83 83       	std	Z+3, r24	; 0x03
    e7aa:	8f ef       	ldi	r24, 0xFF	; 255
    e7ac:	9f ef       	ldi	r25, 0xFF	; 255
    e7ae:	02 c0       	rjmp	.+4      	; 0xe7b4 <fatfs_putc+0x8e>
    e7b0:	8b 81       	ldd	r24, Y+3	; 0x03
    e7b2:	90 e0       	ldi	r25, 0x00	; 0
    e7b4:	23 96       	adiw	r28, 0x03	; 3
    e7b6:	e4 e0       	ldi	r30, 0x04	; 4
    e7b8:	0c 94 02 e1 	jmp	0x1c204	; 0x1c204 <__epilogue_restores__+0x1c>

0000e7bc <fgetc>:
    e7bc:	cf 93       	push	r28
    e7be:	df 93       	push	r29
    e7c0:	00 d0       	rcall	.+0      	; 0xe7c2 <fgetc+0x6>
    e7c2:	1f 92       	push	r1
    e7c4:	ec 01       	movw	r28, r24
    e7c6:	00 97       	sbiw	r24, 0x00	; 0
    e7c8:	39 f4       	brne	.+14     	; 0xe7d8 <fgetc+0x1c>
    e7ca:	89 e0       	ldi	r24, 0x09	; 9
    e7cc:	90 e0       	ldi	r25, 0x00	; 0
    e7ce:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    e7d2:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
    e7d6:	40 c0       	rjmp	.+128    	; 0xe858 <fgetc+0x9c>
    e7d8:	2b 81       	ldd	r18, Y+3	; 0x03
    e7da:	20 ff       	sbrs	r18, 0
    e7dc:	3d c0       	rjmp	.+122    	; 0xe858 <fgetc+0x9c>
    e7de:	26 ff       	sbrs	r18, 6
    e7e0:	0a c0       	rjmp	.+20     	; 0xe7f6 <fgetc+0x3a>
    e7e2:	2f 7b       	andi	r18, 0xBF	; 191
    e7e4:	2b 83       	std	Y+3, r18	; 0x03
    e7e6:	8e 81       	ldd	r24, Y+6	; 0x06
    e7e8:	9f 81       	ldd	r25, Y+7	; 0x07
    e7ea:	01 96       	adiw	r24, 0x01	; 1
    e7ec:	9f 83       	std	Y+7, r25	; 0x07
    e7ee:	8e 83       	std	Y+6, r24	; 0x06
    e7f0:	8a 81       	ldd	r24, Y+2	; 0x02
    e7f2:	90 e0       	ldi	r25, 0x00	; 0
    e7f4:	33 c0       	rjmp	.+102    	; 0xe85c <fgetc+0xa0>
    e7f6:	22 ff       	sbrs	r18, 2
    e7f8:	0d c0       	rjmp	.+26     	; 0xe814 <fgetc+0x58>
    e7fa:	e8 81       	ld	r30, Y
    e7fc:	f9 81       	ldd	r31, Y+1	; 0x01
    e7fe:	80 81       	ld	r24, Z
    e800:	90 e0       	ldi	r25, 0x00	; 0
    e802:	00 97       	sbiw	r24, 0x00	; 0
    e804:	19 f4       	brne	.+6      	; 0xe80c <fgetc+0x50>
    e806:	20 62       	ori	r18, 0x20	; 32
    e808:	2b 83       	std	Y+3, r18	; 0x03
    e80a:	26 c0       	rjmp	.+76     	; 0xe858 <fgetc+0x9c>
    e80c:	31 96       	adiw	r30, 0x01	; 1
    e80e:	f9 83       	std	Y+1, r31	; 0x01
    e810:	e8 83       	st	Y, r30
    e812:	1b c0       	rjmp	.+54     	; 0xe84a <fgetc+0x8e>
    e814:	ea 85       	ldd	r30, Y+10	; 0x0a
    e816:	fb 85       	ldd	r31, Y+11	; 0x0b
    e818:	30 97       	sbiw	r30, 0x00	; 0
    e81a:	59 f4       	brne	.+22     	; 0xe832 <fgetc+0x76>
    e81c:	88 ed       	ldi	r24, 0xD8	; 216
    e81e:	9b e0       	ldi	r25, 0x0B	; 11
    e820:	a0 e0       	ldi	r26, 0x00	; 0
    e822:	ed b7       	in	r30, 0x3d	; 61
    e824:	fe b7       	in	r31, 0x3e	; 62
    e826:	81 83       	std	Z+1, r24	; 0x01
    e828:	92 83       	std	Z+2, r25	; 0x02
    e82a:	a3 83       	std	Z+3, r26	; 0x03
    e82c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    e830:	13 c0       	rjmp	.+38     	; 0xe858 <fgetc+0x9c>
    e832:	09 95       	icall
    e834:	97 ff       	sbrs	r25, 7
    e836:	09 c0       	rjmp	.+18     	; 0xe84a <fgetc+0x8e>
    e838:	2b 81       	ldd	r18, Y+3	; 0x03
    e83a:	02 96       	adiw	r24, 0x02	; 2
    e83c:	11 f0       	breq	.+4      	; 0xe842 <fgetc+0x86>
    e83e:	80 e2       	ldi	r24, 0x20	; 32
    e840:	01 c0       	rjmp	.+2      	; 0xe844 <fgetc+0x88>
    e842:	80 e1       	ldi	r24, 0x10	; 16
    e844:	82 2b       	or	r24, r18
    e846:	8b 83       	std	Y+3, r24	; 0x03
    e848:	07 c0       	rjmp	.+14     	; 0xe858 <fgetc+0x9c>
    e84a:	2e 81       	ldd	r18, Y+6	; 0x06
    e84c:	3f 81       	ldd	r19, Y+7	; 0x07
    e84e:	2f 5f       	subi	r18, 0xFF	; 255
    e850:	3f 4f       	sbci	r19, 0xFF	; 255
    e852:	3f 83       	std	Y+7, r19	; 0x07
    e854:	2e 83       	std	Y+6, r18	; 0x06
    e856:	02 c0       	rjmp	.+4      	; 0xe85c <fgetc+0xa0>
    e858:	8f ef       	ldi	r24, 0xFF	; 255
    e85a:	9f ef       	ldi	r25, 0xFF	; 255
    e85c:	cd b7       	in	r28, 0x3d	; 61
    e85e:	de b7       	in	r29, 0x3e	; 62
    e860:	23 96       	adiw	r28, 0x03	; 3
    e862:	e2 e0       	ldi	r30, 0x02	; 2
    e864:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

0000e868 <fputc>:
    e868:	cf 93       	push	r28
    e86a:	df 93       	push	r29
    e86c:	00 d0       	rcall	.+0      	; 0xe86e <fputc+0x6>
    e86e:	1f 92       	push	r1
    e870:	eb 01       	movw	r28, r22
    e872:	10 92 d8 1c 	sts	0x1CD8, r1	; 0x801cd8 <errno+0x1>
    e876:	10 92 d7 1c 	sts	0x1CD7, r1	; 0x801cd7 <errno>
    e87a:	20 91 db 1c 	lds	r18, 0x1CDB	; 0x801cdb <__iob+0x2>
    e87e:	30 91 dc 1c 	lds	r19, 0x1CDC	; 0x801cdc <__iob+0x3>
    e882:	62 17       	cp	r22, r18
    e884:	73 07       	cpc	r23, r19
    e886:	49 f0       	breq	.+18     	; 0xe89a <fputc+0x32>
    e888:	20 91 dd 1c 	lds	r18, 0x1CDD	; 0x801cdd <__iob+0x4>
    e88c:	30 91 de 1c 	lds	r19, 0x1CDE	; 0x801cde <__iob+0x5>
    e890:	62 17       	cp	r22, r18
    e892:	73 07       	cpc	r23, r19
    e894:	11 f0       	breq	.+4      	; 0xe89a <fputc+0x32>
    e896:	47 df       	rcall	.-370    	; 0xe726 <fatfs_putc>
    e898:	33 c0       	rjmp	.+102    	; 0xe900 <fputc+0x98>
    e89a:	2b 81       	ldd	r18, Y+3	; 0x03
    e89c:	21 ff       	sbrs	r18, 1
    e89e:	2e c0       	rjmp	.+92     	; 0xe8fc <fputc+0x94>
    e8a0:	22 ff       	sbrs	r18, 2
    e8a2:	10 c0       	rjmp	.+32     	; 0xe8c4 <fputc+0x5c>
    e8a4:	4e 81       	ldd	r20, Y+6	; 0x06
    e8a6:	5f 81       	ldd	r21, Y+7	; 0x07
    e8a8:	2c 81       	ldd	r18, Y+4	; 0x04
    e8aa:	3d 81       	ldd	r19, Y+5	; 0x05
    e8ac:	42 17       	cp	r20, r18
    e8ae:	53 07       	cpc	r21, r19
    e8b0:	f4 f4       	brge	.+60     	; 0xe8ee <fputc+0x86>
    e8b2:	e8 81       	ld	r30, Y
    e8b4:	f9 81       	ldd	r31, Y+1	; 0x01
    e8b6:	9f 01       	movw	r18, r30
    e8b8:	2f 5f       	subi	r18, 0xFF	; 255
    e8ba:	3f 4f       	sbci	r19, 0xFF	; 255
    e8bc:	39 83       	std	Y+1, r19	; 0x01
    e8be:	28 83       	st	Y, r18
    e8c0:	80 83       	st	Z, r24
    e8c2:	15 c0       	rjmp	.+42     	; 0xe8ee <fputc+0x86>
    e8c4:	e8 85       	ldd	r30, Y+8	; 0x08
    e8c6:	f9 85       	ldd	r31, Y+9	; 0x09
    e8c8:	30 97       	sbiw	r30, 0x00	; 0
    e8ca:	59 f4       	brne	.+22     	; 0xe8e2 <fputc+0x7a>
    e8cc:	80 ec       	ldi	r24, 0xC0	; 192
    e8ce:	9b e0       	ldi	r25, 0x0B	; 11
    e8d0:	a0 e0       	ldi	r26, 0x00	; 0
    e8d2:	ed b7       	in	r30, 0x3d	; 61
    e8d4:	fe b7       	in	r31, 0x3e	; 62
    e8d6:	81 83       	std	Z+1, r24	; 0x01
    e8d8:	92 83       	std	Z+2, r25	; 0x02
    e8da:	a3 83       	std	Z+3, r26	; 0x03
    e8dc:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    e8e0:	0d c0       	rjmp	.+26     	; 0xe8fc <fputc+0x94>
    e8e2:	be 01       	movw	r22, r28
    e8e4:	09 95       	icall
    e8e6:	8f 3f       	cpi	r24, 0xFF	; 255
    e8e8:	ff ef       	ldi	r31, 0xFF	; 255
    e8ea:	9f 07       	cpc	r25, r31
    e8ec:	39 f0       	breq	.+14     	; 0xe8fc <fputc+0x94>
    e8ee:	2e 81       	ldd	r18, Y+6	; 0x06
    e8f0:	3f 81       	ldd	r19, Y+7	; 0x07
    e8f2:	2f 5f       	subi	r18, 0xFF	; 255
    e8f4:	3f 4f       	sbci	r19, 0xFF	; 255
    e8f6:	3f 83       	std	Y+7, r19	; 0x07
    e8f8:	2e 83       	std	Y+6, r18	; 0x06
    e8fa:	02 c0       	rjmp	.+4      	; 0xe900 <fputc+0x98>
    e8fc:	8f ef       	ldi	r24, 0xFF	; 255
    e8fe:	9f ef       	ldi	r25, 0xFF	; 255
    e900:	cd b7       	in	r28, 0x3d	; 61
    e902:	de b7       	in	r29, 0x3e	; 62
    e904:	23 96       	adiw	r28, 0x03	; 3
    e906:	e2 e0       	ldi	r30, 0x02	; 2
    e908:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

0000e90c <_fprintf_putc>:
    e90c:	fc 01       	movw	r30, r24
    e90e:	86 2f       	mov	r24, r22
    e910:	26 81       	ldd	r18, Z+6	; 0x06
    e912:	37 81       	ldd	r19, Z+7	; 0x07
    e914:	2f 5f       	subi	r18, 0xFF	; 255
    e916:	3f 4f       	sbci	r19, 0xFF	; 255
    e918:	37 83       	std	Z+7, r19	; 0x07
    e91a:	26 83       	std	Z+6, r18	; 0x06
    e91c:	62 81       	ldd	r22, Z+2	; 0x02
    e91e:	73 81       	ldd	r23, Z+3	; 0x03
    e920:	90 e0       	ldi	r25, 0x00	; 0
    e922:	a2 cf       	rjmp	.-188    	; 0xe868 <fputc>
    e924:	08 95       	ret

0000e926 <getchar>:
    e926:	80 91 d9 1c 	lds	r24, 0x1CD9	; 0x801cd9 <__iob>
    e92a:	90 91 da 1c 	lds	r25, 0x1CDA	; 0x801cda <__iob+0x1>
    e92e:	46 cf       	rjmp	.-372    	; 0xe7bc <fgetc>
    e930:	08 95       	ret

0000e932 <putchar>:
    e932:	60 91 db 1c 	lds	r22, 0x1CDB	; 0x801cdb <__iob+0x2>
    e936:	70 91 dc 1c 	lds	r23, 0x1CDC	; 0x801cdc <__iob+0x3>
    e93a:	96 cf       	rjmp	.-212    	; 0xe868 <fputc>
    e93c:	08 95       	ret

0000e93e <fgets>:
    e93e:	a0 e0       	ldi	r26, 0x00	; 0
    e940:	b0 e0       	ldi	r27, 0x00	; 0
    e942:	e5 ea       	ldi	r30, 0xA5	; 165
    e944:	f4 e7       	ldi	r31, 0x74	; 116
    e946:	0c 94 e2 e0 	jmp	0x1c1c4	; 0x1c1c4 <__prologue_saves__+0x14>
    e94a:	7c 01       	movw	r14, r24
    e94c:	6a 01       	movw	r12, r20
    e94e:	8b 01       	movw	r16, r22
    e950:	c0 e0       	ldi	r28, 0x00	; 0
    e952:	d0 e0       	ldi	r29, 0x00	; 0
    e954:	01 15       	cp	r16, r1
    e956:	11 05       	cpc	r17, r1
    e958:	41 f0       	breq	.+16     	; 0xe96a <fgets+0x2c>
    e95a:	c6 01       	movw	r24, r12
    e95c:	2f df       	rcall	.-418    	; 0xe7bc <fgetc>
    e95e:	8f 3f       	cpi	r24, 0xFF	; 255
    e960:	2f ef       	ldi	r18, 0xFF	; 255
    e962:	92 07       	cpc	r25, r18
    e964:	39 f4       	brne	.+14     	; 0xe974 <fgets+0x36>
    e966:	20 97       	sbiw	r28, 0x00	; 0
    e968:	b9 f0       	breq	.+46     	; 0xe998 <fgets+0x5a>
    e96a:	ce 0d       	add	r28, r14
    e96c:	df 1d       	adc	r29, r15
    e96e:	18 82       	st	Y, r1
    e970:	c7 01       	movw	r24, r14
    e972:	14 c0       	rjmp	.+40     	; 0xe99c <fgets+0x5e>
    e974:	8a 30       	cpi	r24, 0x0A	; 10
    e976:	91 05       	cpc	r25, r1
    e978:	c1 f3       	breq	.-16     	; 0xe96a <fgets+0x2c>
    e97a:	88 30       	cpi	r24, 0x08	; 8
    e97c:	91 05       	cpc	r25, r1
    e97e:	21 f4       	brne	.+8      	; 0xe988 <fgets+0x4a>
    e980:	20 97       	sbiw	r28, 0x00	; 0
    e982:	39 f0       	breq	.+14     	; 0xe992 <fgets+0x54>
    e984:	21 97       	sbiw	r28, 0x01	; 1
    e986:	05 c0       	rjmp	.+10     	; 0xe992 <fgets+0x54>
    e988:	f7 01       	movw	r30, r14
    e98a:	ec 0f       	add	r30, r28
    e98c:	fd 1f       	adc	r31, r29
    e98e:	80 83       	st	Z, r24
    e990:	21 96       	adiw	r28, 0x01	; 1
    e992:	01 50       	subi	r16, 0x01	; 1
    e994:	11 09       	sbc	r17, r1
    e996:	de cf       	rjmp	.-68     	; 0xe954 <fgets+0x16>
    e998:	80 e0       	ldi	r24, 0x00	; 0
    e99a:	90 e0       	ldi	r25, 0x00	; 0
    e99c:	cd b7       	in	r28, 0x3d	; 61
    e99e:	de b7       	in	r29, 0x3e	; 62
    e9a0:	e8 e0       	ldi	r30, 0x08	; 8
    e9a2:	0c 94 fe e0 	jmp	0x1c1fc	; 0x1c1fc <__epilogue_restores__+0x14>

0000e9a6 <fputs>:
    e9a6:	0f 93       	push	r16
    e9a8:	1f 93       	push	r17
    e9aa:	cf 93       	push	r28
    e9ac:	df 93       	push	r29
    e9ae:	8b 01       	movw	r16, r22
    e9b0:	ec 01       	movw	r28, r24
    e9b2:	89 91       	ld	r24, Y+
    e9b4:	88 23       	and	r24, r24
    e9b6:	41 f0       	breq	.+16     	; 0xe9c8 <fputs+0x22>
    e9b8:	b8 01       	movw	r22, r16
    e9ba:	90 e0       	ldi	r25, 0x00	; 0
    e9bc:	55 df       	rcall	.-342    	; 0xe868 <fputc>
    e9be:	8f 3f       	cpi	r24, 0xFF	; 255
    e9c0:	2f ef       	ldi	r18, 0xFF	; 255
    e9c2:	92 07       	cpc	r25, r18
    e9c4:	b1 f7       	brne	.-20     	; 0xe9b2 <fputs+0xc>
    e9c6:	02 c0       	rjmp	.+4      	; 0xe9cc <fputs+0x26>
    e9c8:	80 e0       	ldi	r24, 0x00	; 0
    e9ca:	90 e0       	ldi	r25, 0x00	; 0
    e9cc:	df 91       	pop	r29
    e9ce:	cf 91       	pop	r28
    e9d0:	1f 91       	pop	r17
    e9d2:	0f 91       	pop	r16
    e9d4:	08 95       	ret

0000e9d6 <puts>:
    e9d6:	cf 93       	push	r28
    e9d8:	df 93       	push	r29
    e9da:	ec 01       	movw	r28, r24
    e9dc:	89 91       	ld	r24, Y+
    e9de:	60 91 db 1c 	lds	r22, 0x1CDB	; 0x801cdb <__iob+0x2>
    e9e2:	70 91 dc 1c 	lds	r23, 0x1CDC	; 0x801cdc <__iob+0x3>
    e9e6:	88 23       	and	r24, r24
    e9e8:	39 f0       	breq	.+14     	; 0xe9f8 <puts+0x22>
    e9ea:	90 e0       	ldi	r25, 0x00	; 0
    e9ec:	3d df       	rcall	.-390    	; 0xe868 <fputc>
    e9ee:	8f 3f       	cpi	r24, 0xFF	; 255
    e9f0:	2f ef       	ldi	r18, 0xFF	; 255
    e9f2:	92 07       	cpc	r25, r18
    e9f4:	99 f7       	brne	.-26     	; 0xe9dc <puts+0x6>
    e9f6:	03 c0       	rjmp	.+6      	; 0xe9fe <puts+0x28>
    e9f8:	8a e0       	ldi	r24, 0x0A	; 10
    e9fa:	90 e0       	ldi	r25, 0x00	; 0
    e9fc:	35 df       	rcall	.-406    	; 0xe868 <fputc>
    e9fe:	df 91       	pop	r29
    ea00:	cf 91       	pop	r28
    ea02:	08 95       	ret

0000ea04 <fileno>:
    ea04:	00 97       	sbiw	r24, 0x00	; 0
    ea06:	39 f4       	brne	.+14     	; 0xea16 <fileno+0x12>
    ea08:	89 e0       	ldi	r24, 0x09	; 9
    ea0a:	90 e0       	ldi	r25, 0x00	; 0
    ea0c:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    ea10:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
    ea14:	0e c0       	rjmp	.+28     	; 0xea32 <fileno+0x2e>
    ea16:	e9 ed       	ldi	r30, 0xD9	; 217
    ea18:	fc e1       	ldi	r31, 0x1C	; 28
    ea1a:	20 e0       	ldi	r18, 0x00	; 0
    ea1c:	30 e0       	ldi	r19, 0x00	; 0
    ea1e:	41 91       	ld	r20, Z+
    ea20:	51 91       	ld	r21, Z+
    ea22:	84 17       	cp	r24, r20
    ea24:	95 07       	cpc	r25, r21
    ea26:	41 f0       	breq	.+16     	; 0xea38 <fileno+0x34>
    ea28:	2f 5f       	subi	r18, 0xFF	; 255
    ea2a:	3f 4f       	sbci	r19, 0xFF	; 255
    ea2c:	20 31       	cpi	r18, 0x10	; 16
    ea2e:	31 05       	cpc	r19, r1
    ea30:	b1 f7       	brne	.-20     	; 0xea1e <fileno+0x1a>
    ea32:	8f ef       	ldi	r24, 0xFF	; 255
    ea34:	9f ef       	ldi	r25, 0xFF	; 255
    ea36:	08 95       	ret
    ea38:	c9 01       	movw	r24, r18
    ea3a:	08 95       	ret

0000ea3c <fileno_to_stream>:
    ea3c:	80 31       	cpi	r24, 0x10	; 16
    ea3e:	91 05       	cpc	r25, r1
    ea40:	48 f4       	brcc	.+18     	; 0xea54 <fileno_to_stream+0x18>
    ea42:	88 0f       	add	r24, r24
    ea44:	99 1f       	adc	r25, r25
    ea46:	fc 01       	movw	r30, r24
    ea48:	e7 52       	subi	r30, 0x27	; 39
    ea4a:	f3 4e       	sbci	r31, 0xE3	; 227
    ea4c:	80 81       	ld	r24, Z
    ea4e:	91 81       	ldd	r25, Z+1	; 0x01
    ea50:	00 97       	sbiw	r24, 0x00	; 0
    ea52:	41 f4       	brne	.+16     	; 0xea64 <fileno_to_stream+0x28>
    ea54:	89 e0       	ldi	r24, 0x09	; 9
    ea56:	90 e0       	ldi	r25, 0x00	; 0
    ea58:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    ea5c:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
    ea60:	80 e0       	ldi	r24, 0x00	; 0
    ea62:	90 e0       	ldi	r25, 0x00	; 0
    ea64:	08 95       	ret

0000ea66 <mctime>:
    ea66:	a4 e0       	ldi	r26, 0x04	; 4
    ea68:	b0 e0       	ldi	r27, 0x00	; 0
    ea6a:	e9 e3       	ldi	r30, 0x39	; 57
    ea6c:	f5 e7       	ldi	r31, 0x75	; 117
    ea6e:	0c 94 e8 e0 	jmp	0x1c1d0	; 0x1c1d0 <__prologue_saves__+0x20>
    ea72:	69 83       	std	Y+1, r22	; 0x01
    ea74:	7a 83       	std	Y+2, r23	; 0x02
    ea76:	8b 83       	std	Y+3, r24	; 0x03
    ea78:	9c 83       	std	Y+4, r25	; 0x04
    ea7a:	10 92 d8 1c 	sts	0x1CD8, r1	; 0x801cd8 <errno+0x1>
    ea7e:	10 92 d7 1c 	sts	0x1CD7, r1	; 0x801cd7 <errno>
    ea82:	ce 01       	movw	r24, r28
    ea84:	01 96       	adiw	r24, 0x01	; 1
    ea86:	0e 94 5f 3a 	call	0x74be	; 0x74be <ctime_gm>
    ea8a:	fc 01       	movw	r30, r24
    ea8c:	01 90       	ld	r0, Z+
    ea8e:	00 20       	and	r0, r0
    ea90:	e9 f7       	brne	.-6      	; 0xea8c <mctime+0x26>
    ea92:	31 97       	sbiw	r30, 0x01	; 1
    ea94:	e8 1b       	sub	r30, r24
    ea96:	f9 0b       	sbc	r31, r25
    ea98:	39 f0       	breq	.+14     	; 0xeaa8 <mctime+0x42>
    ea9a:	31 97       	sbiw	r30, 0x01	; 1
    ea9c:	e8 0f       	add	r30, r24
    ea9e:	f9 1f       	adc	r31, r25
    eaa0:	20 81       	ld	r18, Z
    eaa2:	2a 30       	cpi	r18, 0x0A	; 10
    eaa4:	09 f4       	brne	.+2      	; 0xeaa8 <mctime+0x42>
    eaa6:	10 82       	st	Z, r1
    eaa8:	24 96       	adiw	r28, 0x04	; 4
    eaaa:	e2 e0       	ldi	r30, 0x02	; 2
    eaac:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

0000eab0 <basename>:
    eab0:	00 97       	sbiw	r24, 0x00	; 0
    eab2:	49 f0       	breq	.+18     	; 0xeac6 <basename+0x16>
    eab4:	fc 01       	movw	r30, r24
    eab6:	21 91       	ld	r18, Z+
    eab8:	22 23       	and	r18, r18
    eaba:	21 f0       	breq	.+8      	; 0xeac4 <basename+0x14>
    eabc:	2f 32       	cpi	r18, 0x2F	; 47
    eabe:	d9 f7       	brne	.-10     	; 0xeab6 <basename+0x6>
    eac0:	cf 01       	movw	r24, r30
    eac2:	f9 cf       	rjmp	.-14     	; 0xeab6 <basename+0x6>
    eac4:	08 95       	ret
    eac6:	8d e2       	ldi	r24, 0x2D	; 45
    eac8:	9c e0       	ldi	r25, 0x0C	; 12
    eaca:	08 95       	ret

0000eacc <chdir>:
    eacc:	10 92 d8 1c 	sts	0x1CD8, r1	; 0x801cd8 <errno+0x1>
    ead0:	10 92 d7 1c 	sts	0x1CD7, r1	; 0x801cd7 <errno>
    ead4:	0e 94 2e 5d 	call	0xba5c	; 0xba5c <f_chdir>
    ead8:	00 97       	sbiw	r24, 0x00	; 0
    eada:	a1 f0       	breq	.+40     	; 0xeb04 <chdir+0x38>
    eadc:	84 31       	cpi	r24, 0x14	; 20
    eade:	91 05       	cpc	r25, r1
    eae0:	40 f4       	brcc	.+16     	; 0xeaf2 <chdir+0x26>
    eae2:	fc 01       	movw	r30, r24
    eae4:	ea 55       	subi	r30, 0x5A	; 90
    eae6:	f4 4f       	sbci	r31, 0xF4	; 244
    eae8:	80 81       	ld	r24, Z
    eaea:	08 2e       	mov	r0, r24
    eaec:	00 0c       	add	r0, r0
    eaee:	99 0b       	sbc	r25, r25
    eaf0:	02 c0       	rjmp	.+4      	; 0xeaf6 <chdir+0x2a>
    eaf2:	83 e2       	ldi	r24, 0x23	; 35
    eaf4:	90 e0       	ldi	r25, 0x00	; 0
    eaf6:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    eafa:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
    eafe:	8f ef       	ldi	r24, 0xFF	; 255
    eb00:	9f ef       	ldi	r25, 0xFF	; 255
    eb02:	08 95       	ret
    eb04:	80 e0       	ldi	r24, 0x00	; 0
    eb06:	90 e0       	ldi	r25, 0x00	; 0
    eb08:	08 95       	ret

0000eb0a <chmod>:
    eb0a:	10 92 d8 1c 	sts	0x1CD8, r1	; 0x801cd8 <errno+0x1>
    eb0e:	10 92 d7 1c 	sts	0x1CD7, r1	; 0x801cd7 <errno>
    eb12:	42 79       	andi	r20, 0x92	; 146
    eb14:	55 27       	eor	r21, r21
    eb16:	66 27       	eor	r22, r22
    eb18:	77 27       	eor	r23, r23
    eb1a:	45 2b       	or	r20, r21
    eb1c:	46 2b       	or	r20, r22
    eb1e:	47 2b       	or	r20, r23
    eb20:	19 f0       	breq	.+6      	; 0xeb28 <chmod+0x1e>
    eb22:	80 e0       	ldi	r24, 0x00	; 0
    eb24:	90 e0       	ldi	r25, 0x00	; 0
    eb26:	08 95       	ret
    eb28:	41 e0       	ldi	r20, 0x01	; 1
    eb2a:	61 e0       	ldi	r22, 0x01	; 1
    eb2c:	0e 94 0f 66 	call	0xcc1e	; 0xcc1e <f_chmod>
    eb30:	00 97       	sbiw	r24, 0x00	; 0
    eb32:	b9 f3       	breq	.-18     	; 0xeb22 <chmod+0x18>
    eb34:	84 31       	cpi	r24, 0x14	; 20
    eb36:	91 05       	cpc	r25, r1
    eb38:	40 f4       	brcc	.+16     	; 0xeb4a <chmod+0x40>
    eb3a:	fc 01       	movw	r30, r24
    eb3c:	ea 55       	subi	r30, 0x5A	; 90
    eb3e:	f4 4f       	sbci	r31, 0xF4	; 244
    eb40:	80 81       	ld	r24, Z
    eb42:	08 2e       	mov	r0, r24
    eb44:	00 0c       	add	r0, r0
    eb46:	99 0b       	sbc	r25, r25
    eb48:	02 c0       	rjmp	.+4      	; 0xeb4e <chmod+0x44>
    eb4a:	83 e2       	ldi	r24, 0x23	; 35
    eb4c:	90 e0       	ldi	r25, 0x00	; 0
    eb4e:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    eb52:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
    eb56:	8f ef       	ldi	r24, 0xFF	; 255
    eb58:	9f ef       	ldi	r25, 0xFF	; 255
    eb5a:	08 95       	ret

0000eb5c <getcwd>:
    eb5c:	cf 93       	push	r28
    eb5e:	df 93       	push	r29
    eb60:	d8 2f       	mov	r29, r24
    eb62:	c9 2f       	mov	r28, r25
    eb64:	10 92 d8 1c 	sts	0x1CD8, r1	; 0x801cd8 <errno+0x1>
    eb68:	10 92 d7 1c 	sts	0x1CD7, r1	; 0x801cd7 <errno>
    eb6c:	0e 94 89 5d 	call	0xbb12	; 0xbb12 <f_getcwd>
    eb70:	00 97       	sbiw	r24, 0x00	; 0
    eb72:	a1 f0       	breq	.+40     	; 0xeb9c <getcwd+0x40>
    eb74:	84 31       	cpi	r24, 0x14	; 20
    eb76:	91 05       	cpc	r25, r1
    eb78:	40 f4       	brcc	.+16     	; 0xeb8a <getcwd+0x2e>
    eb7a:	fc 01       	movw	r30, r24
    eb7c:	ea 55       	subi	r30, 0x5A	; 90
    eb7e:	f4 4f       	sbci	r31, 0xF4	; 244
    eb80:	80 81       	ld	r24, Z
    eb82:	08 2e       	mov	r0, r24
    eb84:	00 0c       	add	r0, r0
    eb86:	99 0b       	sbc	r25, r25
    eb88:	02 c0       	rjmp	.+4      	; 0xeb8e <getcwd+0x32>
    eb8a:	83 e2       	ldi	r24, 0x23	; 35
    eb8c:	90 e0       	ldi	r25, 0x00	; 0
    eb8e:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    eb92:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
    eb96:	80 e0       	ldi	r24, 0x00	; 0
    eb98:	90 e0       	ldi	r25, 0x00	; 0
    eb9a:	02 c0       	rjmp	.+4      	; 0xeba0 <getcwd+0x44>
    eb9c:	8d 2f       	mov	r24, r29
    eb9e:	9c 2f       	mov	r25, r28
    eba0:	df 91       	pop	r29
    eba2:	cf 91       	pop	r28
    eba4:	08 95       	ret

0000eba6 <mkdir>:
    eba6:	cf 93       	push	r28
    eba8:	df 93       	push	r29
    ebaa:	ec 01       	movw	r28, r24
    ebac:	10 92 d8 1c 	sts	0x1CD8, r1	; 0x801cd8 <errno+0x1>
    ebb0:	10 92 d7 1c 	sts	0x1CD7, r1	; 0x801cd7 <errno>
    ebb4:	41 15       	cp	r20, r1
    ebb6:	51 05       	cpc	r21, r1
    ebb8:	61 05       	cpc	r22, r1
    ebba:	71 05       	cpc	r23, r1
    ebbc:	41 f4       	brne	.+16     	; 0xebce <mkdir+0x28>
    ebbe:	ce 01       	movw	r24, r28
    ebc0:	0e 94 0a 64 	call	0xc814	; 0xc814 <f_mkdir>
    ebc4:	00 97       	sbiw	r24, 0x00	; 0
    ebc6:	39 f4       	brne	.+14     	; 0xebd6 <mkdir+0x30>
    ebc8:	80 e0       	ldi	r24, 0x00	; 0
    ebca:	90 e0       	ldi	r25, 0x00	; 0
    ebcc:	17 c0       	rjmp	.+46     	; 0xebfc <mkdir+0x56>
    ebce:	9d df       	rcall	.-198    	; 0xeb0a <chmod>
    ebd0:	89 2b       	or	r24, r25
    ebd2:	a9 f3       	breq	.-22     	; 0xebbe <mkdir+0x18>
    ebd4:	11 c0       	rjmp	.+34     	; 0xebf8 <mkdir+0x52>
    ebd6:	84 31       	cpi	r24, 0x14	; 20
    ebd8:	91 05       	cpc	r25, r1
    ebda:	40 f4       	brcc	.+16     	; 0xebec <mkdir+0x46>
    ebdc:	fc 01       	movw	r30, r24
    ebde:	ea 55       	subi	r30, 0x5A	; 90
    ebe0:	f4 4f       	sbci	r31, 0xF4	; 244
    ebe2:	80 81       	ld	r24, Z
    ebe4:	08 2e       	mov	r0, r24
    ebe6:	00 0c       	add	r0, r0
    ebe8:	99 0b       	sbc	r25, r25
    ebea:	02 c0       	rjmp	.+4      	; 0xebf0 <mkdir+0x4a>
    ebec:	83 e2       	ldi	r24, 0x23	; 35
    ebee:	90 e0       	ldi	r25, 0x00	; 0
    ebf0:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    ebf4:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
    ebf8:	8f ef       	ldi	r24, 0xFF	; 255
    ebfa:	9f ef       	ldi	r25, 0xFF	; 255
    ebfc:	df 91       	pop	r29
    ebfe:	cf 91       	pop	r28
    ec00:	08 95       	ret

0000ec02 <rename>:
    ec02:	10 92 d8 1c 	sts	0x1CD8, r1	; 0x801cd8 <errno+0x1>
    ec06:	10 92 d7 1c 	sts	0x1CD7, r1	; 0x801cd7 <errno>
    ec0a:	0e 94 fa 64 	call	0xc9f4	; 0xc9f4 <f_rename>
    ec0e:	00 97       	sbiw	r24, 0x00	; 0
    ec10:	a1 f0       	breq	.+40     	; 0xec3a <rename+0x38>
    ec12:	84 31       	cpi	r24, 0x14	; 20
    ec14:	91 05       	cpc	r25, r1
    ec16:	40 f4       	brcc	.+16     	; 0xec28 <rename+0x26>
    ec18:	fc 01       	movw	r30, r24
    ec1a:	ea 55       	subi	r30, 0x5A	; 90
    ec1c:	f4 4f       	sbci	r31, 0xF4	; 244
    ec1e:	80 81       	ld	r24, Z
    ec20:	08 2e       	mov	r0, r24
    ec22:	00 0c       	add	r0, r0
    ec24:	99 0b       	sbc	r25, r25
    ec26:	02 c0       	rjmp	.+4      	; 0xec2c <rename+0x2a>
    ec28:	83 e2       	ldi	r24, 0x23	; 35
    ec2a:	90 e0       	ldi	r25, 0x00	; 0
    ec2c:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    ec30:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
    ec34:	8f ef       	ldi	r24, 0xFF	; 255
    ec36:	9f ef       	ldi	r25, 0xFF	; 255
    ec38:	08 95       	ret
    ec3a:	80 e0       	ldi	r24, 0x00	; 0
    ec3c:	90 e0       	ldi	r25, 0x00	; 0
    ec3e:	08 95       	ret

0000ec40 <unlink>:
    ec40:	10 92 d8 1c 	sts	0x1CD8, r1	; 0x801cd8 <errno+0x1>
    ec44:	10 92 d7 1c 	sts	0x1CD7, r1	; 0x801cd7 <errno>
    ec48:	0e 94 63 63 	call	0xc6c6	; 0xc6c6 <f_unlink>
    ec4c:	00 97       	sbiw	r24, 0x00	; 0
    ec4e:	a1 f0       	breq	.+40     	; 0xec78 <unlink+0x38>
    ec50:	84 31       	cpi	r24, 0x14	; 20
    ec52:	91 05       	cpc	r25, r1
    ec54:	40 f4       	brcc	.+16     	; 0xec66 <unlink+0x26>
    ec56:	fc 01       	movw	r30, r24
    ec58:	ea 55       	subi	r30, 0x5A	; 90
    ec5a:	f4 4f       	sbci	r31, 0xF4	; 244
    ec5c:	80 81       	ld	r24, Z
    ec5e:	08 2e       	mov	r0, r24
    ec60:	00 0c       	add	r0, r0
    ec62:	99 0b       	sbc	r25, r25
    ec64:	02 c0       	rjmp	.+4      	; 0xec6a <unlink+0x2a>
    ec66:	83 e2       	ldi	r24, 0x23	; 35
    ec68:	90 e0       	ldi	r25, 0x00	; 0
    ec6a:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    ec6e:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
    ec72:	8f ef       	ldi	r24, 0xFF	; 255
    ec74:	9f ef       	ldi	r25, 0xFF	; 255
    ec76:	08 95       	ret
    ec78:	80 e0       	ldi	r24, 0x00	; 0
    ec7a:	90 e0       	ldi	r25, 0x00	; 0
    ec7c:	08 95       	ret

0000ec7e <rmdir>:
    ec7e:	e0 cf       	rjmp	.-64     	; 0xec40 <unlink>
    ec80:	08 95       	ret

0000ec82 <closedir>:
    ec82:	0e 94 ec 61 	call	0xc3d8	; 0xc3d8 <f_closedir>
    ec86:	00 97       	sbiw	r24, 0x00	; 0
    ec88:	a1 f0       	breq	.+40     	; 0xecb2 <closedir+0x30>
    ec8a:	84 31       	cpi	r24, 0x14	; 20
    ec8c:	91 05       	cpc	r25, r1
    ec8e:	40 f4       	brcc	.+16     	; 0xeca0 <closedir+0x1e>
    ec90:	fc 01       	movw	r30, r24
    ec92:	ea 55       	subi	r30, 0x5A	; 90
    ec94:	f4 4f       	sbci	r31, 0xF4	; 244
    ec96:	80 81       	ld	r24, Z
    ec98:	08 2e       	mov	r0, r24
    ec9a:	00 0c       	add	r0, r0
    ec9c:	99 0b       	sbc	r25, r25
    ec9e:	02 c0       	rjmp	.+4      	; 0xeca4 <closedir+0x22>
    eca0:	83 e2       	ldi	r24, 0x23	; 35
    eca2:	90 e0       	ldi	r25, 0x00	; 0
    eca4:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    eca8:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
    ecac:	8f ef       	ldi	r24, 0xFF	; 255
    ecae:	9f ef       	ldi	r25, 0xFF	; 255
    ecb0:	08 95       	ret
    ecb2:	80 e0       	ldi	r24, 0x00	; 0
    ecb4:	90 e0       	ldi	r25, 0x00	; 0
    ecb6:	08 95       	ret

0000ecb8 <opendir>:
    ecb8:	bc 01       	movw	r22, r24
    ecba:	8b e4       	ldi	r24, 0x4B	; 75
    ecbc:	99 e1       	ldi	r25, 0x19	; 25
    ecbe:	0e 94 7b 61 	call	0xc2f6	; 0xc2f6 <f_opendir>
    ecc2:	00 97       	sbiw	r24, 0x00	; 0
    ecc4:	a1 f0       	breq	.+40     	; 0xecee <opendir+0x36>
    ecc6:	84 31       	cpi	r24, 0x14	; 20
    ecc8:	91 05       	cpc	r25, r1
    ecca:	40 f4       	brcc	.+16     	; 0xecdc <opendir+0x24>
    eccc:	fc 01       	movw	r30, r24
    ecce:	ea 55       	subi	r30, 0x5A	; 90
    ecd0:	f4 4f       	sbci	r31, 0xF4	; 244
    ecd2:	80 81       	ld	r24, Z
    ecd4:	08 2e       	mov	r0, r24
    ecd6:	00 0c       	add	r0, r0
    ecd8:	99 0b       	sbc	r25, r25
    ecda:	02 c0       	rjmp	.+4      	; 0xece0 <opendir+0x28>
    ecdc:	83 e2       	ldi	r24, 0x23	; 35
    ecde:	90 e0       	ldi	r25, 0x00	; 0
    ece0:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    ece4:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
    ece8:	80 e0       	ldi	r24, 0x00	; 0
    ecea:	90 e0       	ldi	r25, 0x00	; 0
    ecec:	08 95       	ret
    ecee:	8b e4       	ldi	r24, 0x4B	; 75
    ecf0:	99 e1       	ldi	r25, 0x19	; 25
    ecf2:	08 95       	ret

0000ecf4 <readdir>:
    ecf4:	a6 e1       	ldi	r26, 0x16	; 22
    ecf6:	b1 e0       	ldi	r27, 0x01	; 1
    ecf8:	e0 e8       	ldi	r30, 0x80	; 128
    ecfa:	f6 e7       	ldi	r31, 0x76	; 118
    ecfc:	0c 94 e6 e0 	jmp	0x1c1cc	; 0x1c1cc <__prologue_saves__+0x1c>
    ed00:	10 92 4c 18 	sts	0x184C, r1	; 0x80184c <_de>
    ed04:	be 01       	movw	r22, r28
    ed06:	6f 5f       	subi	r22, 0xFF	; 255
    ed08:	7f 4f       	sbci	r23, 0xFF	; 255
    ed0a:	0e 94 01 62 	call	0xc402	; 0xc402 <f_readdir>
    ed0e:	00 97       	sbiw	r24, 0x00	; 0
    ed10:	a1 f0       	breq	.+40     	; 0xed3a <readdir+0x46>
    ed12:	84 31       	cpi	r24, 0x14	; 20
    ed14:	91 05       	cpc	r25, r1
    ed16:	40 f4       	brcc	.+16     	; 0xed28 <readdir+0x34>
    ed18:	fc 01       	movw	r30, r24
    ed1a:	ea 55       	subi	r30, 0x5A	; 90
    ed1c:	f4 4f       	sbci	r31, 0xF4	; 244
    ed1e:	80 81       	ld	r24, Z
    ed20:	08 2e       	mov	r0, r24
    ed22:	00 0c       	add	r0, r0
    ed24:	99 0b       	sbc	r25, r25
    ed26:	02 c0       	rjmp	.+4      	; 0xed2c <readdir+0x38>
    ed28:	83 e2       	ldi	r24, 0x23	; 35
    ed2a:	90 e0       	ldi	r25, 0x00	; 0
    ed2c:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    ed30:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
    ed34:	80 e0       	ldi	r24, 0x00	; 0
    ed36:	90 e0       	ldi	r25, 0x00	; 0
    ed38:	16 c0       	rjmp	.+44     	; 0xed66 <readdir+0x72>
    ed3a:	be 01       	movw	r22, r28
    ed3c:	69 5e       	subi	r22, 0xE9	; 233
    ed3e:	7f 4f       	sbci	r23, 0xFF	; 255
    ed40:	fb 01       	movw	r30, r22
    ed42:	01 90       	ld	r0, Z+
    ed44:	00 20       	and	r0, r0
    ed46:	e9 f7       	brne	.-6      	; 0xed42 <readdir+0x4e>
    ed48:	31 97       	sbiw	r30, 0x01	; 1
    ed4a:	8f 01       	movw	r16, r30
    ed4c:	06 1b       	sub	r16, r22
    ed4e:	17 0b       	sbc	r17, r23
    ed50:	a8 01       	movw	r20, r16
    ed52:	8c e4       	ldi	r24, 0x4C	; 76
    ed54:	98 e1       	ldi	r25, 0x18	; 24
    ed56:	0e 94 8f 2e 	call	0x5d1e	; 0x5d1e <strncpy>
    ed5a:	f8 01       	movw	r30, r16
    ed5c:	e4 5b       	subi	r30, 0xB4	; 180
    ed5e:	f7 4e       	sbci	r31, 0xE7	; 231
    ed60:	10 82       	st	Z, r1
    ed62:	8c e4       	ldi	r24, 0x4C	; 76
    ed64:	98 e1       	ldi	r25, 0x18	; 24
    ed66:	ca 5e       	subi	r28, 0xEA	; 234
    ed68:	de 4f       	sbci	r29, 0xFE	; 254
    ed6a:	e4 e0       	ldi	r30, 0x04	; 4
    ed6c:	0c 94 02 e1 	jmp	0x1c204	; 0x1c204 <__epilogue_restores__+0x1c>

0000ed70 <perror>:
    ed70:	ad b7       	in	r26, 0x3d	; 61
    ed72:	be b7       	in	r27, 0x3e	; 62
    ed74:	17 97       	sbiw	r26, 0x07	; 7
    ed76:	0f b6       	in	r0, 0x3f	; 63
    ed78:	f8 94       	cli
    ed7a:	be bf       	out	0x3e, r27	; 62
    ed7c:	0f be       	out	0x3f, r0	; 63
    ed7e:	ad bf       	out	0x3d, r26	; 61
    ed80:	20 91 d7 1c 	lds	r18, 0x1CD7	; 0x801cd7 <errno>
    ed84:	30 91 d8 1c 	lds	r19, 0x1CD8	; 0x801cd8 <errno+0x1>
    ed88:	23 32       	cpi	r18, 0x23	; 35
    ed8a:	31 05       	cpc	r19, r1
    ed8c:	40 f4       	brcc	.+16     	; 0xed9e <perror+0x2e>
    ed8e:	22 0f       	add	r18, r18
    ed90:	33 1f       	adc	r19, r19
    ed92:	f9 01       	movw	r30, r18
    ed94:	ea 5c       	subi	r30, 0xCA	; 202
    ed96:	fe 4f       	sbci	r31, 0xFE	; 254
    ed98:	20 81       	ld	r18, Z
    ed9a:	31 81       	ldd	r19, Z+1	; 0x01
    ed9c:	04 c0       	rjmp	.+8      	; 0xeda6 <perror+0x36>
    ed9e:	20 91 7c 01 	lds	r18, 0x017C	; 0x80017c <sys_errlist+0x46>
    eda2:	30 91 7d 01 	lds	r19, 0x017D	; 0x80017d <sys_errlist+0x47>
    eda6:	00 97       	sbiw	r24, 0x00	; 0
    eda8:	99 f0       	breq	.+38     	; 0xedd0 <perror+0x60>
    edaa:	fc 01       	movw	r30, r24
    edac:	40 81       	ld	r20, Z
    edae:	44 23       	and	r20, r20
    edb0:	79 f0       	breq	.+30     	; 0xedd0 <perror+0x60>
    edb2:	ed b7       	in	r30, 0x3d	; 61
    edb4:	fe b7       	in	r31, 0x3e	; 62
    edb6:	37 83       	std	Z+7, r19	; 0x07
    edb8:	26 83       	std	Z+6, r18	; 0x06
    edba:	95 83       	std	Z+5, r25	; 0x05
    edbc:	84 83       	std	Z+4, r24	; 0x04
    edbe:	8c ea       	ldi	r24, 0xAC	; 172
    edc0:	9b e0       	ldi	r25, 0x0B	; 11
    edc2:	a0 e0       	ldi	r26, 0x00	; 0
    edc4:	81 83       	std	Z+1, r24	; 0x01
    edc6:	92 83       	std	Z+2, r25	; 0x02
    edc8:	a3 83       	std	Z+3, r26	; 0x03
    edca:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    edce:	0c c0       	rjmp	.+24     	; 0xede8 <perror+0x78>
    edd0:	ed b7       	in	r30, 0x3d	; 61
    edd2:	fe b7       	in	r31, 0x3e	; 62
    edd4:	35 83       	std	Z+5, r19	; 0x05
    edd6:	24 83       	std	Z+4, r18	; 0x04
    edd8:	88 ea       	ldi	r24, 0xA8	; 168
    edda:	9b e0       	ldi	r25, 0x0B	; 11
    eddc:	a0 e0       	ldi	r26, 0x00	; 0
    edde:	81 83       	std	Z+1, r24	; 0x01
    ede0:	92 83       	std	Z+2, r25	; 0x02
    ede2:	a3 83       	std	Z+3, r26	; 0x03
    ede4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    ede8:	ad b7       	in	r26, 0x3d	; 61
    edea:	be b7       	in	r27, 0x3e	; 62
    edec:	17 96       	adiw	r26, 0x07	; 7
    edee:	0f b6       	in	r0, 0x3f	; 63
    edf0:	f8 94       	cli
    edf2:	be bf       	out	0x3e, r27	; 62
    edf4:	0f be       	out	0x3f, r0	; 63
    edf6:	ad bf       	out	0x3d, r26	; 61
    edf8:	08 95       	ret

0000edfa <fdevopen>:
    edfa:	0f 93       	push	r16
    edfc:	1f 93       	push	r17
    edfe:	cf 93       	push	r28
    ee00:	df 93       	push	r29
    ee02:	00 97       	sbiw	r24, 0x00	; 0
    ee04:	31 f4       	brne	.+12     	; 0xee12 <fdevopen+0x18>
    ee06:	61 15       	cp	r22, r1
    ee08:	71 05       	cpc	r23, r1
    ee0a:	19 f4       	brne	.+6      	; 0xee12 <fdevopen+0x18>
    ee0c:	80 e0       	ldi	r24, 0x00	; 0
    ee0e:	90 e0       	ldi	r25, 0x00	; 0
    ee10:	3a c0       	rjmp	.+116    	; 0xee86 <fdevopen+0x8c>
    ee12:	8b 01       	movw	r16, r22
    ee14:	ec 01       	movw	r28, r24
    ee16:	6e e0       	ldi	r22, 0x0E	; 14
    ee18:	70 e0       	ldi	r23, 0x00	; 0
    ee1a:	81 e0       	ldi	r24, 0x01	; 1
    ee1c:	90 e0       	ldi	r25, 0x00	; 0
    ee1e:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <safecalloc>
    ee22:	fc 01       	movw	r30, r24
    ee24:	89 2b       	or	r24, r25
    ee26:	91 f3       	breq	.-28     	; 0xee0c <fdevopen+0x12>
    ee28:	80 e8       	ldi	r24, 0x80	; 128
    ee2a:	83 83       	std	Z+3, r24	; 0x03
    ee2c:	01 15       	cp	r16, r1
    ee2e:	11 05       	cpc	r17, r1
    ee30:	71 f0       	breq	.+28     	; 0xee4e <fdevopen+0x54>
    ee32:	13 87       	std	Z+11, r17	; 0x0b
    ee34:	02 87       	std	Z+10, r16	; 0x0a
    ee36:	81 e8       	ldi	r24, 0x81	; 129
    ee38:	83 83       	std	Z+3, r24	; 0x03
    ee3a:	80 91 d9 1c 	lds	r24, 0x1CD9	; 0x801cd9 <__iob>
    ee3e:	90 91 da 1c 	lds	r25, 0x1CDA	; 0x801cda <__iob+0x1>
    ee42:	89 2b       	or	r24, r25
    ee44:	21 f4       	brne	.+8      	; 0xee4e <fdevopen+0x54>
    ee46:	f0 93 da 1c 	sts	0x1CDA, r31	; 0x801cda <__iob+0x1>
    ee4a:	e0 93 d9 1c 	sts	0x1CD9, r30	; 0x801cd9 <__iob>
    ee4e:	20 97       	sbiw	r28, 0x00	; 0
    ee50:	c9 f0       	breq	.+50     	; 0xee84 <fdevopen+0x8a>
    ee52:	d1 87       	std	Z+9, r29	; 0x09
    ee54:	c0 87       	std	Z+8, r28	; 0x08
    ee56:	83 81       	ldd	r24, Z+3	; 0x03
    ee58:	82 60       	ori	r24, 0x02	; 2
    ee5a:	83 83       	std	Z+3, r24	; 0x03
    ee5c:	80 91 db 1c 	lds	r24, 0x1CDB	; 0x801cdb <__iob+0x2>
    ee60:	90 91 dc 1c 	lds	r25, 0x1CDC	; 0x801cdc <__iob+0x3>
    ee64:	89 2b       	or	r24, r25
    ee66:	21 f4       	brne	.+8      	; 0xee70 <fdevopen+0x76>
    ee68:	f0 93 dc 1c 	sts	0x1CDC, r31	; 0x801cdc <__iob+0x3>
    ee6c:	e0 93 db 1c 	sts	0x1CDB, r30	; 0x801cdb <__iob+0x2>
    ee70:	80 91 dd 1c 	lds	r24, 0x1CDD	; 0x801cdd <__iob+0x4>
    ee74:	90 91 de 1c 	lds	r25, 0x1CDE	; 0x801cde <__iob+0x5>
    ee78:	89 2b       	or	r24, r25
    ee7a:	21 f4       	brne	.+8      	; 0xee84 <fdevopen+0x8a>
    ee7c:	f0 93 de 1c 	sts	0x1CDE, r31	; 0x801cde <__iob+0x5>
    ee80:	e0 93 dd 1c 	sts	0x1CDD, r30	; 0x801cdd <__iob+0x4>
    ee84:	cf 01       	movw	r24, r30
    ee86:	df 91       	pop	r29
    ee88:	cf 91       	pop	r28
    ee8a:	1f 91       	pop	r17
    ee8c:	0f 91       	pop	r16
    ee8e:	08 95       	ret

0000ee90 <fat_time_to_unix>:
    ee90:	a6 e1       	ldi	r26, 0x16	; 22
    ee92:	b0 e0       	ldi	r27, 0x00	; 0
    ee94:	ee e4       	ldi	r30, 0x4E	; 78
    ee96:	f7 e7       	ldi	r31, 0x77	; 119
    ee98:	0c 94 e8 e0 	jmp	0x1c1d0	; 0x1c1d0 <__prologue_saves__+0x20>
    ee9c:	fe 01       	movw	r30, r28
    ee9e:	31 96       	adiw	r30, 0x01	; 1
    eea0:	26 e1       	ldi	r18, 0x16	; 22
    eea2:	df 01       	movw	r26, r30
    eea4:	1d 92       	st	X+, r1
    eea6:	2a 95       	dec	r18
    eea8:	e9 f7       	brne	.-6      	; 0xeea4 <fat_time_to_unix+0x14>
    eeaa:	9b 01       	movw	r18, r22
    eeac:	22 0f       	add	r18, r18
    eeae:	33 1f       	adc	r19, r19
    eeb0:	2e 73       	andi	r18, 0x3E	; 62
    eeb2:	33 27       	eor	r19, r19
    eeb4:	3a 83       	std	Y+2, r19	; 0x02
    eeb6:	29 83       	std	Y+1, r18	; 0x01
    eeb8:	9b 01       	movw	r18, r22
    eeba:	55 e0       	ldi	r21, 0x05	; 5
    eebc:	36 95       	lsr	r19
    eebe:	27 95       	ror	r18
    eec0:	5a 95       	dec	r21
    eec2:	e1 f7       	brne	.-8      	; 0xeebc <fat_time_to_unix+0x2c>
    eec4:	2f 73       	andi	r18, 0x3F	; 63
    eec6:	33 27       	eor	r19, r19
    eec8:	3c 83       	std	Y+4, r19	; 0x04
    eeca:	2b 83       	std	Y+3, r18	; 0x03
    eecc:	27 2f       	mov	r18, r23
    eece:	26 95       	lsr	r18
    eed0:	26 95       	lsr	r18
    eed2:	26 95       	lsr	r18
    eed4:	2d 83       	std	Y+5, r18	; 0x05
    eed6:	1e 82       	std	Y+6, r1	; 0x06
    eed8:	9c 01       	movw	r18, r24
    eeda:	2f 71       	andi	r18, 0x1F	; 31
    eedc:	33 27       	eor	r19, r19
    eede:	38 87       	std	Y+8, r19	; 0x08
    eee0:	2f 83       	std	Y+7, r18	; 0x07
    eee2:	9c 01       	movw	r18, r24
    eee4:	65 e0       	ldi	r22, 0x05	; 5
    eee6:	36 95       	lsr	r19
    eee8:	27 95       	ror	r18
    eeea:	6a 95       	dec	r22
    eeec:	e1 f7       	brne	.-8      	; 0xeee6 <fat_time_to_unix+0x56>
    eeee:	2f 70       	andi	r18, 0x0F	; 15
    eef0:	33 27       	eor	r19, r19
    eef2:	21 50       	subi	r18, 0x01	; 1
    eef4:	31 09       	sbc	r19, r1
    eef6:	3a 87       	std	Y+10, r19	; 0x0a
    eef8:	29 87       	std	Y+9, r18	; 0x09
    eefa:	9c 01       	movw	r18, r24
    eefc:	23 2f       	mov	r18, r19
    eefe:	33 27       	eor	r19, r19
    ef00:	26 95       	lsr	r18
    ef02:	20 5b       	subi	r18, 0xB0	; 176
    ef04:	3f 4f       	sbci	r19, 0xFF	; 255
    ef06:	3c 87       	std	Y+12, r19	; 0x0c
    ef08:	2b 87       	std	Y+11, r18	; 0x0b
    ef0a:	cf 01       	movw	r24, r30
    ef0c:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <timegm>
    ef10:	66 96       	adiw	r28, 0x16	; 22
    ef12:	e2 e0       	ldi	r30, 0x02	; 2
    ef14:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

0000ef18 <stat>:
    ef18:	a6 e1       	ldi	r26, 0x16	; 22
    ef1a:	b1 e0       	ldi	r27, 0x01	; 1
    ef1c:	e2 e9       	ldi	r30, 0x92	; 146
    ef1e:	f7 e7       	ldi	r31, 0x77	; 119
    ef20:	0c 94 e2 e0 	jmp	0x1c1c4	; 0x1c1c4 <__prologue_saves__+0x14>
    ef24:	6c 01       	movw	r12, r24
    ef26:	8b 01       	movw	r16, r22
    ef28:	10 92 d8 1c 	sts	0x1CD8, r1	; 0x801cd8 <errno+0x1>
    ef2c:	10 92 d7 1c 	sts	0x1CD7, r1	; 0x801cd7 <errno>
    ef30:	6c ef       	ldi	r22, 0xFC	; 252
    ef32:	78 e0       	ldi	r23, 0x08	; 8
    ef34:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCH>
    ef38:	89 2b       	or	r24, r25
    ef3a:	01 f1       	breq	.+64     	; 0xef7c <stat+0x64>
    ef3c:	f8 01       	movw	r30, r16
    ef3e:	14 a2       	std	Z+36, r1	; 0x24
    ef40:	15 a2       	std	Z+37, r1	; 0x25
    ef42:	16 a2       	std	Z+38, r1	; 0x26
    ef44:	17 a2       	std	Z+39, r1	; 0x27
    ef46:	10 a6       	std	Z+40, r1	; 0x28
    ef48:	11 a6       	std	Z+41, r1	; 0x29
    ef4a:	12 a6       	std	Z+42, r1	; 0x2a
    ef4c:	13 a6       	std	Z+43, r1	; 0x2b
    ef4e:	14 a6       	std	Z+44, r1	; 0x2c
    ef50:	15 a6       	std	Z+45, r1	; 0x2d
    ef52:	16 a6       	std	Z+46, r1	; 0x2e
    ef54:	17 a6       	std	Z+47, r1	; 0x2f
    ef56:	11 8a       	std	Z+17, r1	; 0x11
    ef58:	10 8a       	std	Z+16, r1	; 0x10
    ef5a:	13 8a       	std	Z+19, r1	; 0x13
    ef5c:	12 8a       	std	Z+18, r1	; 0x12
    ef5e:	10 8e       	std	Z+24, r1	; 0x18
    ef60:	11 8e       	std	Z+25, r1	; 0x19
    ef62:	12 8e       	std	Z+26, r1	; 0x1a
    ef64:	13 8e       	std	Z+27, r1	; 0x1b
    ef66:	80 e0       	ldi	r24, 0x00	; 0
    ef68:	90 e4       	ldi	r25, 0x40	; 64
    ef6a:	a0 e0       	ldi	r26, 0x00	; 0
    ef6c:	b0 e0       	ldi	r27, 0x00	; 0
    ef6e:	80 87       	std	Z+8, r24	; 0x08
    ef70:	91 87       	std	Z+9, r25	; 0x09
    ef72:	a2 87       	std	Z+10, r26	; 0x0a
    ef74:	b3 87       	std	Z+11, r27	; 0x0b
    ef76:	e1 2c       	mov	r14, r1
    ef78:	f1 2c       	mov	r15, r1
    ef7a:	62 c0       	rjmp	.+196    	; 0xf040 <stat+0x128>
    ef7c:	66 ea       	ldi	r22, 0xA6	; 166
    ef7e:	78 e0       	ldi	r23, 0x08	; 8
    ef80:	c6 01       	movw	r24, r12
    ef82:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCH>
    ef86:	89 2b       	or	r24, r25
    ef88:	c9 f6       	brne	.-78     	; 0xef3c <stat+0x24>
    ef8a:	6b ef       	ldi	r22, 0xFB	; 251
    ef8c:	72 e1       	ldi	r23, 0x12	; 18
    ef8e:	c6 01       	movw	r24, r12
    ef90:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCH>
    ef94:	7c 01       	movw	r14, r24
    ef96:	89 2b       	or	r24, r25
    ef98:	89 f6       	brne	.-94     	; 0xef3c <stat+0x24>
    ef9a:	be 01       	movw	r22, r28
    ef9c:	6f 5f       	subi	r22, 0xFF	; 255
    ef9e:	7f 4f       	sbci	r23, 0xFF	; 255
    efa0:	c6 01       	movw	r24, r12
    efa2:	0e 94 45 62 	call	0xc48a	; 0xc48a <f_stat>
    efa6:	00 97       	sbiw	r24, 0x00	; 0
    efa8:	a9 f0       	breq	.+42     	; 0xefd4 <stat+0xbc>
    efaa:	84 31       	cpi	r24, 0x14	; 20
    efac:	91 05       	cpc	r25, r1
    efae:	40 f4       	brcc	.+16     	; 0xefc0 <stat+0xa8>
    efb0:	fc 01       	movw	r30, r24
    efb2:	ea 55       	subi	r30, 0x5A	; 90
    efb4:	f4 4f       	sbci	r31, 0xF4	; 244
    efb6:	80 81       	ld	r24, Z
    efb8:	08 2e       	mov	r0, r24
    efba:	00 0c       	add	r0, r0
    efbc:	99 0b       	sbc	r25, r25
    efbe:	02 c0       	rjmp	.+4      	; 0xefc4 <stat+0xac>
    efc0:	83 e2       	ldi	r24, 0x23	; 35
    efc2:	90 e0       	ldi	r25, 0x00	; 0
    efc4:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    efc8:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
    efcc:	ee 24       	eor	r14, r14
    efce:	ea 94       	dec	r14
    efd0:	fe 2c       	mov	r15, r14
    efd2:	36 c0       	rjmp	.+108    	; 0xf040 <stat+0x128>
    efd4:	89 81       	ldd	r24, Y+1	; 0x01
    efd6:	9a 81       	ldd	r25, Y+2	; 0x02
    efd8:	ab 81       	ldd	r26, Y+3	; 0x03
    efda:	bc 81       	ldd	r27, Y+4	; 0x04
    efdc:	f8 01       	movw	r30, r16
    efde:	80 8f       	std	Z+24, r24	; 0x18
    efe0:	91 8f       	std	Z+25, r25	; 0x19
    efe2:	a2 8f       	std	Z+26, r26	; 0x1a
    efe4:	b3 8f       	std	Z+27, r27	; 0x1b
    efe6:	6f 81       	ldd	r22, Y+7	; 0x07
    efe8:	78 85       	ldd	r23, Y+8	; 0x08
    efea:	8d 81       	ldd	r24, Y+5	; 0x05
    efec:	9e 81       	ldd	r25, Y+6	; 0x06
    efee:	50 df       	rcall	.-352    	; 0xee90 <fat_time_to_unix>
    eff0:	f8 01       	movw	r30, r16
    eff2:	64 a3       	std	Z+36, r22	; 0x24
    eff4:	75 a3       	std	Z+37, r23	; 0x25
    eff6:	86 a3       	std	Z+38, r24	; 0x26
    eff8:	97 a3       	std	Z+39, r25	; 0x27
    effa:	60 a7       	std	Z+40, r22	; 0x28
    effc:	71 a7       	std	Z+41, r23	; 0x29
    effe:	82 a7       	std	Z+42, r24	; 0x2a
    f000:	93 a7       	std	Z+43, r25	; 0x2b
    f002:	64 a7       	std	Z+44, r22	; 0x2c
    f004:	75 a7       	std	Z+45, r23	; 0x2d
    f006:	86 a7       	std	Z+46, r24	; 0x2e
    f008:	97 a7       	std	Z+47, r25	; 0x2f
    f00a:	29 85       	ldd	r18, Y+9	; 0x09
    f00c:	20 fd       	sbrc	r18, 0
    f00e:	03 c0       	rjmp	.+6      	; 0xf016 <stat+0xfe>
    f010:	8f ef       	ldi	r24, 0xFF	; 255
    f012:	91 e0       	ldi	r25, 0x01	; 1
    f014:	02 c0       	rjmp	.+4      	; 0xf01a <stat+0x102>
    f016:	8d e6       	ldi	r24, 0x6D	; 109
    f018:	91 e0       	ldi	r25, 0x01	; 1
    f01a:	48 ee       	ldi	r20, 0xE8	; 232
    f01c:	53 e0       	ldi	r21, 0x03	; 3
    f01e:	f8 01       	movw	r30, r16
    f020:	51 8b       	std	Z+17, r21	; 0x11
    f022:	40 8b       	std	Z+16, r20	; 0x10
    f024:	53 8b       	std	Z+19, r21	; 0x13
    f026:	42 8b       	std	Z+18, r20	; 0x12
    f028:	24 ff       	sbrs	r18, 4
    f02a:	02 c0       	rjmp	.+4      	; 0xf030 <stat+0x118>
    f02c:	90 64       	ori	r25, 0x40	; 64
    f02e:	01 c0       	rjmp	.+2      	; 0xf032 <stat+0x11a>
    f030:	90 68       	ori	r25, 0x80	; 128
    f032:	a0 e0       	ldi	r26, 0x00	; 0
    f034:	b0 e0       	ldi	r27, 0x00	; 0
    f036:	f8 01       	movw	r30, r16
    f038:	80 87       	std	Z+8, r24	; 0x08
    f03a:	91 87       	std	Z+9, r25	; 0x09
    f03c:	a2 87       	std	Z+10, r26	; 0x0a
    f03e:	b3 87       	std	Z+11, r27	; 0x0b
    f040:	c7 01       	movw	r24, r14
    f042:	ca 5e       	subi	r28, 0xEA	; 234
    f044:	de 4f       	sbci	r29, 0xFE	; 254
    f046:	e8 e0       	ldi	r30, 0x08	; 8
    f048:	0c 94 fe e0 	jmp	0x1c1fc	; 0x1c1fc <__epilogue_restores__+0x14>

0000f04c <unix_time_to_fat>:
    f04c:	a4 e0       	ldi	r26, 0x04	; 4
    f04e:	b0 e0       	ldi	r27, 0x00	; 0
    f050:	ec e2       	ldi	r30, 0x2C	; 44
    f052:	f8 e7       	ldi	r31, 0x78	; 120
    f054:	0c 94 e4 e0 	jmp	0x1c1c8	; 0x1c1c8 <__prologue_saves__+0x18>
    f058:	69 83       	std	Y+1, r22	; 0x01
    f05a:	7a 83       	std	Y+2, r23	; 0x02
    f05c:	8b 83       	std	Y+3, r24	; 0x03
    f05e:	9c 83       	std	Y+4, r25	; 0x04
    f060:	7a 01       	movw	r14, r20
    f062:	89 01       	movw	r16, r18
    f064:	ce 01       	movw	r24, r28
    f066:	01 96       	adiw	r24, 0x01	; 1
    f068:	0e 94 eb 34 	call	0x69d6	; 0x69d6 <gmtime>
    f06c:	fc 01       	movw	r30, r24
    f06e:	22 85       	ldd	r18, Z+10	; 0x0a
    f070:	33 85       	ldd	r19, Z+11	; 0x0b
    f072:	20 55       	subi	r18, 0x50	; 80
    f074:	31 09       	sbc	r19, r1
    f076:	c9 01       	movw	r24, r18
    f078:	98 2f       	mov	r25, r24
    f07a:	88 27       	eor	r24, r24
    f07c:	99 0f       	add	r25, r25
    f07e:	20 85       	ldd	r18, Z+8	; 0x08
    f080:	31 85       	ldd	r19, Z+9	; 0x09
    f082:	2f 5f       	subi	r18, 0xFF	; 255
    f084:	3f 4f       	sbci	r19, 0xFF	; 255
    f086:	45 e0       	ldi	r20, 0x05	; 5
    f088:	22 0f       	add	r18, r18
    f08a:	33 1f       	adc	r19, r19
    f08c:	4a 95       	dec	r20
    f08e:	e1 f7       	brne	.-8      	; 0xf088 <unix_time_to_fat+0x3c>
    f090:	28 2b       	or	r18, r24
    f092:	39 2b       	or	r19, r25
    f094:	86 81       	ldd	r24, Z+6	; 0x06
    f096:	97 81       	ldd	r25, Z+7	; 0x07
    f098:	28 2b       	or	r18, r24
    f09a:	39 2b       	or	r19, r25
    f09c:	d7 01       	movw	r26, r14
    f09e:	2d 93       	st	X+, r18
    f0a0:	3c 93       	st	X, r19
    f0a2:	84 81       	ldd	r24, Z+4	; 0x04
    f0a4:	20 e0       	ldi	r18, 0x00	; 0
    f0a6:	30 e0       	ldi	r19, 0x00	; 0
    f0a8:	38 2f       	mov	r19, r24
    f0aa:	33 0f       	add	r19, r19
    f0ac:	33 0f       	add	r19, r19
    f0ae:	33 0f       	add	r19, r19
    f0b0:	82 81       	ldd	r24, Z+2	; 0x02
    f0b2:	93 81       	ldd	r25, Z+3	; 0x03
    f0b4:	55 e0       	ldi	r21, 0x05	; 5
    f0b6:	88 0f       	add	r24, r24
    f0b8:	99 1f       	adc	r25, r25
    f0ba:	5a 95       	dec	r21
    f0bc:	e1 f7       	brne	.-8      	; 0xf0b6 <unix_time_to_fat+0x6a>
    f0be:	82 2b       	or	r24, r18
    f0c0:	93 2b       	or	r25, r19
    f0c2:	20 81       	ld	r18, Z
    f0c4:	31 81       	ldd	r19, Z+1	; 0x01
    f0c6:	36 95       	lsr	r19
    f0c8:	27 95       	ror	r18
    f0ca:	82 2b       	or	r24, r18
    f0cc:	93 2b       	or	r25, r19
    f0ce:	f8 01       	movw	r30, r16
    f0d0:	91 83       	std	Z+1, r25	; 0x01
    f0d2:	80 83       	st	Z, r24
    f0d4:	24 96       	adiw	r28, 0x04	; 4
    f0d6:	e6 e0       	ldi	r30, 0x06	; 6
    f0d8:	0c 94 00 e1 	jmp	0x1c200	; 0x1c200 <__epilogue_restores__+0x18>

0000f0dc <utime>:
    f0dc:	aa e1       	ldi	r26, 0x1A	; 26
    f0de:	b1 e0       	ldi	r27, 0x01	; 1
    f0e0:	e4 e7       	ldi	r30, 0x74	; 116
    f0e2:	f8 e7       	ldi	r31, 0x78	; 120
    f0e4:	0c 94 e6 e0 	jmp	0x1c1cc	; 0x1c1cc <__prologue_saves__+0x1c>
    f0e8:	8c 01       	movw	r16, r24
    f0ea:	61 15       	cp	r22, r1
    f0ec:	71 05       	cpc	r23, r1
    f0ee:	31 f0       	breq	.+12     	; 0xf0fc <utime+0x20>
    f0f0:	fb 01       	movw	r30, r22
    f0f2:	64 81       	ldd	r22, Z+4	; 0x04
    f0f4:	75 81       	ldd	r23, Z+5	; 0x05
    f0f6:	86 81       	ldd	r24, Z+6	; 0x06
    f0f8:	97 81       	ldd	r25, Z+7	; 0x07
    f0fa:	04 c0       	rjmp	.+8      	; 0xf104 <utime+0x28>
    f0fc:	80 e0       	ldi	r24, 0x00	; 0
    f0fe:	90 e0       	ldi	r25, 0x00	; 0
    f100:	0e 94 45 35 	call	0x6a8a	; 0x6a8a <time>
    f104:	9e 01       	movw	r18, r28
    f106:	29 5e       	subi	r18, 0xE9	; 233
    f108:	3e 4f       	sbci	r19, 0xFE	; 254
    f10a:	ae 01       	movw	r20, r28
    f10c:	47 5e       	subi	r20, 0xE7	; 231
    f10e:	5e 4f       	sbci	r21, 0xFE	; 254
    f110:	9d df       	rcall	.-198    	; 0xf04c <unix_time_to_fat>
    f112:	c7 5e       	subi	r28, 0xE7	; 231
    f114:	de 4f       	sbci	r29, 0xFE	; 254
    f116:	88 81       	ld	r24, Y
    f118:	99 81       	ldd	r25, Y+1	; 0x01
    f11a:	c9 51       	subi	r28, 0x19	; 25
    f11c:	d1 40       	sbci	r29, 0x01	; 1
    f11e:	9e 83       	std	Y+6, r25	; 0x06
    f120:	8d 83       	std	Y+5, r24	; 0x05
    f122:	c9 5e       	subi	r28, 0xE9	; 233
    f124:	de 4f       	sbci	r29, 0xFE	; 254
    f126:	88 81       	ld	r24, Y
    f128:	99 81       	ldd	r25, Y+1	; 0x01
    f12a:	c7 51       	subi	r28, 0x17	; 23
    f12c:	d1 40       	sbci	r29, 0x01	; 1
    f12e:	98 87       	std	Y+8, r25	; 0x08
    f130:	8f 83       	std	Y+7, r24	; 0x07
    f132:	be 01       	movw	r22, r28
    f134:	6f 5f       	subi	r22, 0xFF	; 255
    f136:	7f 4f       	sbci	r23, 0xFF	; 255
    f138:	c8 01       	movw	r24, r16
    f13a:	0e 94 5c 66 	call	0xccb8	; 0xccb8 <f_utime>
    f13e:	84 31       	cpi	r24, 0x14	; 20
    f140:	91 05       	cpc	r25, r1
    f142:	40 f4       	brcc	.+16     	; 0xf154 <utime+0x78>
    f144:	fc 01       	movw	r30, r24
    f146:	ea 55       	subi	r30, 0x5A	; 90
    f148:	f4 4f       	sbci	r31, 0xF4	; 244
    f14a:	80 81       	ld	r24, Z
    f14c:	08 2e       	mov	r0, r24
    f14e:	00 0c       	add	r0, r0
    f150:	99 0b       	sbc	r25, r25
    f152:	02 c0       	rjmp	.+4      	; 0xf158 <utime+0x7c>
    f154:	83 e2       	ldi	r24, 0x23	; 35
    f156:	90 e0       	ldi	r25, 0x00	; 0
    f158:	c6 5e       	subi	r28, 0xE6	; 230
    f15a:	de 4f       	sbci	r29, 0xFE	; 254
    f15c:	e4 e0       	ldi	r30, 0x04	; 4
    f15e:	0c 94 02 e1 	jmp	0x1c204	; 0x1c204 <__epilogue_restores__+0x1c>

0000f162 <fileno_to_fatfs>:
    f162:	83 30       	cpi	r24, 0x03	; 3
    f164:	91 05       	cpc	r25, r1
    f166:	48 f4       	brcc	.+18     	; 0xf17a <fileno_to_fatfs+0x18>
    f168:	89 e0       	ldi	r24, 0x09	; 9
    f16a:	90 e0       	ldi	r25, 0x00	; 0
    f16c:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    f170:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
    f174:	80 e0       	ldi	r24, 0x00	; 0
    f176:	90 e0       	ldi	r25, 0x00	; 0
    f178:	08 95       	ret
    f17a:	60 dc       	rcall	.-1856   	; 0xea3c <fileno_to_stream>
    f17c:	00 97       	sbiw	r24, 0x00	; 0
    f17e:	d1 f3       	breq	.-12     	; 0xf174 <fileno_to_fatfs+0x12>
    f180:	fc 01       	movw	r30, r24
    f182:	84 85       	ldd	r24, Z+12	; 0x0c
    f184:	95 85       	ldd	r25, Z+13	; 0x0d
    f186:	00 97       	sbiw	r24, 0x00	; 0
    f188:	79 f3       	breq	.-34     	; 0xf168 <fileno_to_fatfs+0x6>
    f18a:	08 95       	ret

0000f18c <ftell>:
    f18c:	10 92 d8 1c 	sts	0x1CD8, r1	; 0x801cd8 <errno+0x1>
    f190:	10 92 d7 1c 	sts	0x1CD7, r1	; 0x801cd7 <errno>
    f194:	37 dc       	rcall	.-1938   	; 0xea04 <fileno>
    f196:	83 30       	cpi	r24, 0x03	; 3
    f198:	91 05       	cpc	r25, r1
    f19a:	48 f0       	brcs	.+18     	; 0xf1ae <ftell+0x22>
    f19c:	e2 df       	rcall	.-60     	; 0xf162 <fileno_to_fatfs>
    f19e:	00 97       	sbiw	r24, 0x00	; 0
    f1a0:	51 f4       	brne	.+20     	; 0xf1b6 <ftell+0x2a>
    f1a2:	89 e0       	ldi	r24, 0x09	; 9
    f1a4:	90 e0       	ldi	r25, 0x00	; 0
    f1a6:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    f1aa:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
    f1ae:	6f ef       	ldi	r22, 0xFF	; 255
    f1b0:	7f ef       	ldi	r23, 0xFF	; 255
    f1b2:	cb 01       	movw	r24, r22
    f1b4:	08 95       	ret
    f1b6:	fc 01       	movw	r30, r24
    f1b8:	60 89       	ldd	r22, Z+16	; 0x10
    f1ba:	71 89       	ldd	r23, Z+17	; 0x11
    f1bc:	82 89       	ldd	r24, Z+18	; 0x12
    f1be:	93 89       	ldd	r25, Z+19	; 0x13
    f1c0:	08 95       	ret

0000f1c2 <lseek>:
    f1c2:	a3 e0       	ldi	r26, 0x03	; 3
    f1c4:	b0 e0       	ldi	r27, 0x00	; 0
    f1c6:	e7 ee       	ldi	r30, 0xE7	; 231
    f1c8:	f8 e7       	ldi	r31, 0x78	; 120
    f1ca:	0c 94 e0 e0 	jmp	0x1c1c0	; 0x1c1c0 <__prologue_saves__+0x10>
    f1ce:	5c 01       	movw	r10, r24
    f1d0:	6a 01       	movw	r12, r20
    f1d2:	7b 01       	movw	r14, r22
    f1d4:	89 01       	movw	r16, r18
    f1d6:	10 92 d8 1c 	sts	0x1CD8, r1	; 0x801cd8 <errno+0x1>
    f1da:	10 92 d7 1c 	sts	0x1CD7, r1	; 0x801cd7 <errno>
    f1de:	c1 df       	rcall	.-126    	; 0xf162 <fileno_to_fatfs>
    f1e0:	ec 01       	movw	r28, r24
    f1e2:	89 2b       	or	r24, r25
    f1e4:	19 f4       	brne	.+6      	; 0xf1ec <lseek+0x2a>
    f1e6:	88 e1       	ldi	r24, 0x18	; 24
    f1e8:	90 e0       	ldi	r25, 0x00	; 0
    f1ea:	26 c0       	rjmp	.+76     	; 0xf238 <lseek+0x76>
    f1ec:	83 e0       	ldi	r24, 0x03	; 3
    f1ee:	a8 16       	cp	r10, r24
    f1f0:	b1 04       	cpc	r11, r1
    f1f2:	d0 f1       	brcs	.+116    	; 0xf268 <lseek+0xa6>
    f1f4:	c5 01       	movw	r24, r10
    f1f6:	22 dc       	rcall	.-1980   	; 0xea3c <fileno_to_stream>
    f1f8:	fc 01       	movw	r30, r24
    f1fa:	93 81       	ldd	r25, Z+3	; 0x03
    f1fc:	90 64       	ori	r25, 0x40	; 64
    f1fe:	93 83       	std	Z+3, r25	; 0x03
    f200:	02 30       	cpi	r16, 0x02	; 2
    f202:	11 05       	cpc	r17, r1
    f204:	a9 f5       	brne	.+106    	; 0xf270 <lseek+0xae>
    f206:	8a 85       	ldd	r24, Y+10	; 0x0a
    f208:	9b 85       	ldd	r25, Y+11	; 0x0b
    f20a:	ac 85       	ldd	r26, Y+12	; 0x0c
    f20c:	bd 85       	ldd	r27, Y+13	; 0x0d
    f20e:	c8 0e       	add	r12, r24
    f210:	d9 1e       	adc	r13, r25
    f212:	ea 1e       	adc	r14, r26
    f214:	fb 1e       	adc	r15, r27
    f216:	b7 01       	movw	r22, r14
    f218:	a6 01       	movw	r20, r12
    f21a:	ce 01       	movw	r24, r28
    f21c:	0e 94 bf 5e 	call	0xbd7e	; 0xbd7e <f_lseek>
    f220:	00 97       	sbiw	r24, 0x00	; 0
    f222:	79 f0       	breq	.+30     	; 0xf242 <lseek+0x80>
    f224:	84 31       	cpi	r24, 0x14	; 20
    f226:	91 05       	cpc	r25, r1
    f228:	58 f5       	brcc	.+86     	; 0xf280 <lseek+0xbe>
    f22a:	fc 01       	movw	r30, r24
    f22c:	ea 55       	subi	r30, 0x5A	; 90
    f22e:	f4 4f       	sbci	r31, 0xF4	; 244
    f230:	80 81       	ld	r24, Z
    f232:	08 2e       	mov	r0, r24
    f234:	00 0c       	add	r0, r0
    f236:	99 0b       	sbc	r25, r25
    f238:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    f23c:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
    f240:	13 c0       	rjmp	.+38     	; 0xf268 <lseek+0xa6>
    f242:	68 89       	ldd	r22, Y+16	; 0x10
    f244:	79 89       	ldd	r23, Y+17	; 0x11
    f246:	8a 89       	ldd	r24, Y+18	; 0x12
    f248:	9b 89       	ldd	r25, Y+19	; 0x13
    f24a:	c6 16       	cp	r12, r22
    f24c:	d7 06       	cpc	r13, r23
    f24e:	e8 06       	cpc	r14, r24
    f250:	f9 06       	cpc	r15, r25
    f252:	c9 f0       	breq	.+50     	; 0xf286 <lseek+0xc4>
    f254:	84 eb       	ldi	r24, 0xB4	; 180
    f256:	9b e0       	ldi	r25, 0x0B	; 11
    f258:	a0 e0       	ldi	r26, 0x00	; 0
    f25a:	ed b7       	in	r30, 0x3d	; 61
    f25c:	fe b7       	in	r31, 0x3e	; 62
    f25e:	81 83       	std	Z+1, r24	; 0x01
    f260:	92 83       	std	Z+2, r25	; 0x02
    f262:	a3 83       	std	Z+3, r26	; 0x03
    f264:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    f268:	6f ef       	ldi	r22, 0xFF	; 255
    f26a:	7f ef       	ldi	r23, 0xFF	; 255
    f26c:	cb 01       	movw	r24, r22
    f26e:	0b c0       	rjmp	.+22     	; 0xf286 <lseek+0xc4>
    f270:	01 30       	cpi	r16, 0x01	; 1
    f272:	11 05       	cpc	r17, r1
    f274:	81 f6       	brne	.-96     	; 0xf216 <lseek+0x54>
    f276:	88 89       	ldd	r24, Y+16	; 0x10
    f278:	99 89       	ldd	r25, Y+17	; 0x11
    f27a:	aa 89       	ldd	r26, Y+18	; 0x12
    f27c:	bb 89       	ldd	r27, Y+19	; 0x13
    f27e:	c7 cf       	rjmp	.-114    	; 0xf20e <lseek+0x4c>
    f280:	83 e2       	ldi	r24, 0x23	; 35
    f282:	90 e0       	ldi	r25, 0x00	; 0
    f284:	d9 cf       	rjmp	.-78     	; 0xf238 <lseek+0x76>
    f286:	cd b7       	in	r28, 0x3d	; 61
    f288:	de b7       	in	r29, 0x3e	; 62
    f28a:	23 96       	adiw	r28, 0x03	; 3
    f28c:	ea e0       	ldi	r30, 0x0A	; 10
    f28e:	0c 94 fc e0 	jmp	0x1c1f8	; 0x1c1f8 <__epilogue_restores__+0x10>

0000f292 <fseek>:
    f292:	cf 92       	push	r12
    f294:	df 92       	push	r13
    f296:	ef 92       	push	r14
    f298:	ff 92       	push	r15
    f29a:	cf 93       	push	r28
    f29c:	df 93       	push	r29
    f29e:	6a 01       	movw	r12, r20
    f2a0:	7b 01       	movw	r14, r22
    f2a2:	e9 01       	movw	r28, r18
    f2a4:	af db       	rcall	.-2210   	; 0xea04 <fileno>
    f2a6:	97 fd       	sbrc	r25, 7
    f2a8:	12 c0       	rjmp	.+36     	; 0xf2ce <fseek+0x3c>
    f2aa:	9e 01       	movw	r18, r28
    f2ac:	b7 01       	movw	r22, r14
    f2ae:	a6 01       	movw	r20, r12
    f2b0:	88 df       	rcall	.-240    	; 0xf1c2 <lseek>
    f2b2:	21 e0       	ldi	r18, 0x01	; 1
    f2b4:	30 e0       	ldi	r19, 0x00	; 0
    f2b6:	6f 3f       	cpi	r22, 0xFF	; 255
    f2b8:	7f 4f       	sbci	r23, 0xFF	; 255
    f2ba:	8f 4f       	sbci	r24, 0xFF	; 255
    f2bc:	9f 4f       	sbci	r25, 0xFF	; 255
    f2be:	11 f0       	breq	.+4      	; 0xf2c4 <fseek+0x32>
    f2c0:	20 e0       	ldi	r18, 0x00	; 0
    f2c2:	30 e0       	ldi	r19, 0x00	; 0
    f2c4:	88 27       	eor	r24, r24
    f2c6:	99 27       	eor	r25, r25
    f2c8:	82 1b       	sub	r24, r18
    f2ca:	93 0b       	sbc	r25, r19
    f2cc:	02 c0       	rjmp	.+4      	; 0xf2d2 <fseek+0x40>
    f2ce:	8f ef       	ldi	r24, 0xFF	; 255
    f2d0:	9f ef       	ldi	r25, 0xFF	; 255
    f2d2:	df 91       	pop	r29
    f2d4:	cf 91       	pop	r28
    f2d6:	ff 90       	pop	r15
    f2d8:	ef 90       	pop	r14
    f2da:	df 90       	pop	r13
    f2dc:	cf 90       	pop	r12
    f2de:	08 95       	ret

0000f2e0 <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    f2e0:	a2 e0       	ldi	r26, 0x02	; 2
    f2e2:	b0 e0       	ldi	r27, 0x00	; 0
    f2e4:	e6 e7       	ldi	r30, 0x76	; 118
    f2e6:	f9 e7       	ldi	r31, 0x79	; 121
    f2e8:	0c 94 e0 e0 	jmp	0x1c1c0	; 0x1c1c0 <__prologue_saves__+0x10>
    f2ec:	5c 01       	movw	r10, r24
    f2ee:	8b 01       	movw	r16, r22
    f2f0:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

//FIXME
    *(char *) buf = 0;
    f2f2:	fb 01       	movw	r30, r22
    f2f4:	10 82       	st	Z, r1

    errno = 0;
    f2f6:	10 92 d8 1c 	sts	0x1CD8, r1	; 0x801cd8 <errno+0x1>
    f2fa:	10 92 d7 1c 	sts	0x1CD7, r1	; 0x801cd7 <errno>

// TTY read function
// FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    f2fe:	9e db       	rcall	.-2244   	; 0xea3c <fileno_to_stream>
    f300:	7c 01       	movw	r14, r24
    if(stream == stdin)
    f302:	80 91 d9 1c 	lds	r24, 0x1CD9	; 0x801cd9 <__iob>
    f306:	90 91 da 1c 	lds	r25, 0x1CDA	; 0x801cda <__iob+0x1>
    f30a:	e8 16       	cp	r14, r24
    f30c:	f9 06       	cpc	r15, r25
    f30e:	c9 f4       	brne	.+50     	; 0xf342 <read+0x62>
    {
        char *ptr = (char *) buf;
// ungetc is undefined for read
        stream->flags |= __SUNGET;
    f310:	f7 01       	movw	r30, r14
    f312:	83 81       	ldd	r24, Z+3	; 0x03
    f314:	80 64       	ori	r24, 0x40	; 64
    f316:	83 83       	std	Z+3, r24	; 0x03
        size = 0;
    f318:	1a 82       	std	Y+2, r1	; 0x02
    f31a:	19 82       	std	Y+1, r1	; 0x01
    f31c:	c0 0e       	add	r12, r16
    f31e:	d1 1e       	adc	r13, r17
        while(count--)
    f320:	0c 15       	cp	r16, r12
    f322:	1d 05       	cpc	r17, r13
    f324:	09 f4       	brne	.+2      	; 0xf328 <read+0x48>
    f326:	3d c0       	rjmp	.+122    	; 0xf3a2 <read+0xc2>
        {
            ret = fgetc(stream);
    f328:	c7 01       	movw	r24, r14
    f32a:	48 da       	rcall	.-2928   	; 0xe7bc <fgetc>
            if(ret < 0)
    f32c:	97 fd       	sbrc	r25, 7
    f32e:	39 c0       	rjmp	.+114    	; 0xf3a2 <read+0xc2>
                break;

            *ptr++ = ret;
    f330:	f8 01       	movw	r30, r16
    f332:	81 93       	st	Z+, r24
    f334:	8f 01       	movw	r16, r30
            ++size;
    f336:	89 81       	ldd	r24, Y+1	; 0x01
    f338:	9a 81       	ldd	r25, Y+2	; 0x02
    f33a:	01 96       	adiw	r24, 0x01	; 1
    f33c:	9a 83       	std	Y+2, r25	; 0x02
    f33e:	89 83       	std	Y+1, r24	; 0x01
    f340:	ef cf       	rjmp	.-34     	; 0xf320 <read+0x40>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    f342:	80 91 db 1c 	lds	r24, 0x1CDB	; 0x801cdb <__iob+0x2>
    f346:	90 91 dc 1c 	lds	r25, 0x1CDC	; 0x801cdc <__iob+0x3>
    f34a:	e8 16       	cp	r14, r24
    f34c:	f9 06       	cpc	r15, r25
    f34e:	71 f1       	breq	.+92     	; 0xf3ac <read+0xcc>
    f350:	80 91 dd 1c 	lds	r24, 0x1CDD	; 0x801cdd <__iob+0x4>
    f354:	90 91 de 1c 	lds	r25, 0x1CDE	; 0x801cde <__iob+0x5>
    f358:	e8 16       	cp	r14, r24
    f35a:	f9 06       	cpc	r15, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f35c:	39 f1       	breq	.+78     	; 0xf3ac <read+0xcc>
    f35e:	c5 01       	movw	r24, r10
    f360:	00 df       	rcall	.-512    	; 0xf162 <fileno_to_fatfs>
    if ( fh == NULL )
    f362:	00 97       	sbiw	r24, 0x00	; 0
    f364:	19 f4       	brne	.+6      	; 0xf36c <read+0x8c>
    {
        errno = EBADF;
    f366:	89 e0       	ldi	r24, 0x09	; 9
    f368:	90 e0       	ldi	r25, 0x00	; 0
    f36a:	16 c0       	rjmp	.+44     	; 0xf398 <read+0xb8>
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    f36c:	9e 01       	movw	r18, r28
    f36e:	2f 5f       	subi	r18, 0xFF	; 255
    f370:	3f 4f       	sbci	r19, 0xFF	; 255
    f372:	a6 01       	movw	r20, r12
    f374:	b8 01       	movw	r22, r16
    f376:	0e 94 b3 59 	call	0xb366	; 0xb366 <f_read>
    if(res != FR_OK)
    f37a:	00 97       	sbiw	r24, 0x00	; 0
    f37c:	91 f0       	breq	.+36     	; 0xf3a2 <read+0xc2>
    f37e:	84 31       	cpi	r24, 0x14	; 20
    f380:	91 05       	cpc	r25, r1
    f382:	40 f4       	brcc	.+16     	; 0xf394 <read+0xb4>
    f384:	fc 01       	movw	r30, r24
    f386:	ea 55       	subi	r30, 0x5A	; 90
    f388:	f4 4f       	sbci	r31, 0xF4	; 244
    f38a:	80 81       	ld	r24, Z
    f38c:	08 2e       	mov	r0, r24
    f38e:	00 0c       	add	r0, r0
    f390:	99 0b       	sbc	r25, r25
    f392:	02 c0       	rjmp	.+4      	; 0xf398 <read+0xb8>
    f394:	83 e2       	ldi	r24, 0x23	; 35
    f396:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f398:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    f39c:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
    f3a0:	05 c0       	rjmp	.+10     	; 0xf3ac <read+0xcc>
        return(-1);
    }
    return ((ssize_t) size);
    f3a2:	69 81       	ldd	r22, Y+1	; 0x01
    f3a4:	7a 81       	ldd	r23, Y+2	; 0x02
    f3a6:	80 e0       	ldi	r24, 0x00	; 0
    f3a8:	90 e0       	ldi	r25, 0x00	; 0
    f3aa:	03 c0       	rjmp	.+6      	; 0xf3b2 <read+0xd2>
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    f3ac:	6f ef       	ldi	r22, 0xFF	; 255
    f3ae:	7f ef       	ldi	r23, 0xFF	; 255
    f3b0:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f3b2:	22 96       	adiw	r28, 0x02	; 2
    f3b4:	ea e0       	ldi	r30, 0x0A	; 10
    f3b6:	0c 94 fc e0 	jmp	0x1c1f8	; 0x1c1f8 <__epilogue_restores__+0x10>

0000f3ba <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f3ba:	0f 93       	push	r16
    f3bc:	1f 93       	push	r17
    f3be:	cf 93       	push	r28
    f3c0:	df 93       	push	r29
    f3c2:	ec 01       	movw	r28, r24
    f3c4:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f3c6:	64 9f       	mul	r22, r20
    f3c8:	80 01       	movw	r16, r0
    f3ca:	65 9f       	mul	r22, r21
    f3cc:	10 0d       	add	r17, r0
    f3ce:	74 9f       	mul	r23, r20
    f3d0:	10 0d       	add	r17, r0
    f3d2:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f3d4:	17 db       	rcall	.-2514   	; 0xea04 <fileno>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    f3d6:	a8 01       	movw	r20, r16
    f3d8:	be 01       	movw	r22, r28
    f3da:	82 df       	rcall	.-252    	; 0xf2e0 <read>
    if(ret < 0)
    f3dc:	97 fd       	sbrc	r25, 7
    f3de:	02 c0       	rjmp	.+4      	; 0xf3e4 <fread+0x2a>
        return(0);

    return((size_t) ret);
    f3e0:	cb 01       	movw	r24, r22
    f3e2:	02 c0       	rjmp	.+4      	; 0xf3e8 <fread+0x2e>
    ssize_t ret;

// read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    f3e4:	80 e0       	ldi	r24, 0x00	; 0
    f3e6:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f3e8:	df 91       	pop	r29
    f3ea:	cf 91       	pop	r28
    f3ec:	1f 91       	pop	r17
    f3ee:	0f 91       	pop	r16
    f3f0:	08 95       	ret

0000f3f2 <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    f3f2:	cf 93       	push	r28
    f3f4:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    f3f6:	10 92 d8 1c 	sts	0x1CD8, r1	; 0x801cd8 <errno+0x1>
    f3fa:	10 92 d7 1c 	sts	0x1CD7, r1	; 0x801cd7 <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f3fe:	83 30       	cpi	r24, 0x03	; 3
    f400:	91 05       	cpc	r25, r1
    f402:	18 f4       	brcc	.+6      	; 0xf40a <syncfs+0x18>

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    f404:	89 e0       	ldi	r24, 0x09	; 9
    f406:	90 e0       	ldi	r25, 0x00	; 0
    f408:	18 c0       	rjmp	.+48     	; 0xf43a <syncfs+0x48>
    f40a:	ec 01       	movw	r28, r24
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    f40c:	17 db       	rcall	.-2514   	; 0xea3c <fileno_to_stream>
    f40e:	fc 01       	movw	r30, r24
// reset unget on sync
    stream->flags |= __SUNGET;
    f410:	93 81       	ldd	r25, Z+3	; 0x03
    f412:	90 64       	ori	r25, 0x40	; 64
    f414:	93 83       	std	Z+3, r25	; 0x03

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f416:	ce 01       	movw	r24, r28
    f418:	a4 de       	rcall	.-696    	; 0xf162 <fileno_to_fatfs>
    if(fh == NULL)
    f41a:	00 97       	sbiw	r24, 0x00	; 0
    f41c:	99 f3       	breq	.-26     	; 0xf404 <syncfs+0x12>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    f41e:	0e 94 95 5c 	call	0xb92a	; 0xb92a <f_sync>
    if (res != FR_OK)
    f422:	00 97       	sbiw	r24, 0x00	; 0
    f424:	a1 f0       	breq	.+40     	; 0xf44e <syncfs+0x5c>
    f426:	84 31       	cpi	r24, 0x14	; 20
    f428:	91 05       	cpc	r25, r1
    f42a:	70 f4       	brcc	.+28     	; 0xf448 <syncfs+0x56>
    f42c:	fc 01       	movw	r30, r24
    f42e:	ea 55       	subi	r30, 0x5A	; 90
    f430:	f4 4f       	sbci	r31, 0xF4	; 244
    f432:	80 81       	ld	r24, Z
    f434:	08 2e       	mov	r0, r24
    f436:	00 0c       	add	r0, r0
    f438:	99 0b       	sbc	r25, r25
    {
        errno = fatfs_to_errno(res);
    f43a:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    f43e:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
        return(-1);
    f442:	8f ef       	ldi	r24, 0xFF	; 255
    f444:	9f ef       	ldi	r25, 0xFF	; 255
    f446:	05 c0       	rjmp	.+10     	; 0xf452 <syncfs+0x60>
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    f448:	83 e2       	ldi	r24, 0x23	; 35
    f44a:	90 e0       	ldi	r25, 0x00	; 0
    f44c:	f6 cf       	rjmp	.-20     	; 0xf43a <syncfs+0x48>
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    f44e:	80 e0       	ldi	r24, 0x00	; 0
    f450:	90 e0       	ldi	r25, 0x00	; 0
}
    f452:	df 91       	pop	r29
    f454:	cf 91       	pop	r28
    f456:	08 95       	ret

0000f458 <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    f458:	cf 93       	push	r28
    f45a:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    f45c:	c0 e0       	ldi	r28, 0x00	; 0
    f45e:	d0 e0       	ldi	r29, 0x00	; 0
    f460:	21 96       	adiw	r28, 0x01	; 1
    f462:	c0 31       	cpi	r28, 0x10	; 16
    f464:	d1 05       	cpc	r29, r1
    f466:	51 f0       	breq	.+20     	; 0xf47c <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f468:	c3 30       	cpi	r28, 0x03	; 3
    f46a:	d1 05       	cpc	r29, r1
    f46c:	cc f3       	brlt	.-14     	; 0xf460 <sync+0x8>
    {
        if(isatty(i))
            continue;

// fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    f46e:	ce 01       	movw	r24, r28
    f470:	78 de       	rcall	.-784    	; 0xf162 <fileno_to_fatfs>
        if(fh == NULL)
    f472:	89 2b       	or	r24, r25
    f474:	a9 f3       	breq	.-22     	; 0xf460 <sync+0x8>
            continue;

        (void ) syncfs(i);
    f476:	ce 01       	movw	r24, r28
    f478:	bc df       	rcall	.-136    	; 0xf3f2 <syncfs>
    f47a:	f2 cf       	rjmp	.-28     	; 0xf460 <sync+0x8>
    }
}
    f47c:	df 91       	pop	r29
    f47e:	cf 91       	pop	r28
    f480:	08 95       	ret

0000f482 <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    f482:	a2 e0       	ldi	r26, 0x02	; 2
    f484:	b0 e0       	ldi	r27, 0x00	; 0
    f486:	e7 e4       	ldi	r30, 0x47	; 71
    f488:	fa e7       	ldi	r31, 0x7A	; 122
    f48a:	0c 94 de e0 	jmp	0x1c1bc	; 0x1c1bc <__prologue_saves__+0xc>
    f48e:	8c 01       	movw	r16, r24
    f490:	b6 2e       	mov	r11, r22
    f492:	f7 2e       	mov	r15, r23
    f494:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    f496:	10 92 d8 1c 	sts	0x1CD8, r1	; 0x801cd8 <errno+0x1>
    f49a:	10 92 d7 1c 	sts	0x1CD7, r1	; 0x801cd7 <errno>

// TTY read function
    stream = fileno_to_stream(fd);
    f49e:	ce da       	rcall	.-2660   	; 0xea3c <fileno_to_stream>
    f4a0:	6c 01       	movw	r12, r24
    if(stream == stdout || stream == stderr)
    f4a2:	80 91 db 1c 	lds	r24, 0x1CDB	; 0x801cdb <__iob+0x2>
    f4a6:	90 91 dc 1c 	lds	r25, 0x1CDC	; 0x801cdc <__iob+0x3>
    f4aa:	c8 16       	cp	r12, r24
    f4ac:	d9 06       	cpc	r13, r25
    f4ae:	39 f0       	breq	.+14     	; 0xf4be <write+0x3c>
    f4b0:	80 91 dd 1c 	lds	r24, 0x1CDD	; 0x801cdd <__iob+0x4>
    f4b4:	90 91 de 1c 	lds	r25, 0x1CDE	; 0x801cde <__iob+0x5>
    f4b8:	c8 16       	cp	r12, r24
    f4ba:	d9 06       	cpc	r13, r25
    f4bc:	d1 f4       	brne	.+52     	; 0xf4f2 <write+0x70>
    {
        char *ptr = (char *) buf;
        size = 0;
    f4be:	1a 82       	std	Y+2, r1	; 0x02
    f4c0:	19 82       	std	Y+1, r1	; 0x01
    f4c2:	0b 2d       	mov	r16, r11
    f4c4:	1f 2d       	mov	r17, r15
    f4c6:	78 01       	movw	r14, r16
    f4c8:	e8 0c       	add	r14, r8
    f4ca:	f9 1c       	adc	r15, r9
        while(count--)
    f4cc:	0e 15       	cp	r16, r14
    f4ce:	1f 05       	cpc	r17, r15
    f4d0:	d1 f1       	breq	.+116    	; 0xf546 <write+0xc4>
        {
            int c,ret;
            c = *ptr++;
    f4d2:	f8 01       	movw	r30, r16
    f4d4:	a1 90       	ld	r10, Z+
    f4d6:	8f 01       	movw	r16, r30
    f4d8:	b1 2c       	mov	r11, r1
            ret = fputc(c, stream);
    f4da:	b6 01       	movw	r22, r12
    f4dc:	c5 01       	movw	r24, r10
    f4de:	c4 d9       	rcall	.-3192   	; 0xe868 <fputc>
            if(c != ret)
    f4e0:	a8 16       	cp	r10, r24
    f4e2:	b9 06       	cpc	r11, r25
    f4e4:	81 f5       	brne	.+96     	; 0xf546 <write+0xc4>
                break;

            ++size;
    f4e6:	89 81       	ldd	r24, Y+1	; 0x01
    f4e8:	9a 81       	ldd	r25, Y+2	; 0x02
    f4ea:	01 96       	adiw	r24, 0x01	; 1
    f4ec:	9a 83       	std	Y+2, r25	; 0x02
    f4ee:	89 83       	std	Y+1, r24	; 0x01
    f4f0:	ed cf       	rjmp	.-38     	; 0xf4cc <write+0x4a>
        }
        return(size);
    }
    if(stream == stdin)
    f4f2:	80 91 d9 1c 	lds	r24, 0x1CD9	; 0x801cd9 <__iob>
    f4f6:	90 91 da 1c 	lds	r25, 0x1CDA	; 0x801cda <__iob+0x1>
    f4fa:	c8 16       	cp	r12, r24
    f4fc:	d9 06       	cpc	r13, r25
    {
        return(-1);
    }

// fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    f4fe:	41 f1       	breq	.+80     	; 0xf550 <write+0xce>
    f500:	c8 01       	movw	r24, r16
    f502:	2f de       	rcall	.-930    	; 0xf162 <fileno_to_fatfs>
    if ( fh == NULL )
    f504:	00 97       	sbiw	r24, 0x00	; 0
    f506:	19 f4       	brne	.+6      	; 0xf50e <write+0x8c>
    {
        errno = EBADF;
    f508:	89 e0       	ldi	r24, 0x09	; 9
    f50a:	90 e0       	ldi	r25, 0x00	; 0
    f50c:	17 c0       	rjmp	.+46     	; 0xf53c <write+0xba>
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    f50e:	9e 01       	movw	r18, r28
    f510:	2f 5f       	subi	r18, 0xFF	; 255
    f512:	3f 4f       	sbci	r19, 0xFF	; 255
    f514:	a4 01       	movw	r20, r8
    f516:	6b 2d       	mov	r22, r11
    f518:	7f 2d       	mov	r23, r15
    f51a:	0e 94 fe 5a 	call	0xb5fc	; 0xb5fc <f_write>
    if(res != FR_OK)
    f51e:	00 97       	sbiw	r24, 0x00	; 0
    f520:	91 f0       	breq	.+36     	; 0xf546 <write+0xc4>
    f522:	84 31       	cpi	r24, 0x14	; 20
    f524:	91 05       	cpc	r25, r1
    f526:	40 f4       	brcc	.+16     	; 0xf538 <write+0xb6>
    f528:	fc 01       	movw	r30, r24
    f52a:	ea 55       	subi	r30, 0x5A	; 90
    f52c:	f4 4f       	sbci	r31, 0xF4	; 244
    f52e:	80 81       	ld	r24, Z
    f530:	08 2e       	mov	r0, r24
    f532:	00 0c       	add	r0, r0
    f534:	99 0b       	sbc	r25, r25
    f536:	02 c0       	rjmp	.+4      	; 0xf53c <write+0xba>
    f538:	83 e2       	ldi	r24, 0x23	; 35
    f53a:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f53c:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    f540:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
    f544:	05 c0       	rjmp	.+10     	; 0xf550 <write+0xce>
        return(-1);
    }
    return ((ssize_t) size);
    f546:	69 81       	ldd	r22, Y+1	; 0x01
    f548:	7a 81       	ldd	r23, Y+2	; 0x02
    f54a:	80 e0       	ldi	r24, 0x00	; 0
    f54c:	90 e0       	ldi	r25, 0x00	; 0
    f54e:	03 c0       	rjmp	.+6      	; 0xf556 <write+0xd4>
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    f550:	6f ef       	ldi	r22, 0xFF	; 255
    f552:	7f ef       	ldi	r23, 0xFF	; 255
    f554:	cb 01       	movw	r24, r22
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    f556:	22 96       	adiw	r28, 0x02	; 2
    f558:	ec e0       	ldi	r30, 0x0C	; 12
    f55a:	0c 94 fa e0 	jmp	0x1c1f4	; 0x1c1f4 <__epilogue_restores__+0xc>

0000f55e <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    f55e:	0f 93       	push	r16
    f560:	1f 93       	push	r17
    f562:	cf 93       	push	r28
    f564:	df 93       	push	r29
    f566:	ec 01       	movw	r28, r24
    f568:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    f56a:	64 9f       	mul	r22, r20
    f56c:	80 01       	movw	r16, r0
    f56e:	65 9f       	mul	r22, r21
    f570:	10 0d       	add	r17, r0
    f572:	74 9f       	mul	r23, r20
    f574:	10 0d       	add	r17, r0
    f576:	11 24       	eor	r1, r1
    int fn = fileno(stream);
    f578:	45 da       	rcall	.-2934   	; 0xea04 <fileno>
    ssize_t ret;

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
    f57a:	a8 01       	movw	r20, r16
    f57c:	be 01       	movw	r22, r28
    f57e:	81 df       	rcall	.-254    	; 0xf482 <write>

    if(ret < 0)
    f580:	97 fd       	sbrc	r25, 7
    f582:	02 c0       	rjmp	.+4      	; 0xf588 <fwrite+0x2a>
        return(0);

    return((size_t) ret);
    f584:	cb 01       	movw	r24, r22
    f586:	02 c0       	rjmp	.+4      	; 0xf58c <fwrite+0x2e>

// write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
    f588:	80 e0       	ldi	r24, 0x00	; 0
    f58a:	90 e0       	ldi	r25, 0x00	; 0

    return((size_t) ret);
}
    f58c:	df 91       	pop	r29
    f58e:	cf 91       	pop	r28
    f590:	1f 91       	pop	r17
    f592:	0f 91       	pop	r16
    f594:	08 95       	ret

0000f596 <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
    f596:	0f 93       	push	r16
    f598:	1f 93       	push	r17
    f59a:	cf 93       	push	r28
    f59c:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f59e:	83 30       	cpi	r24, 0x03	; 3
    f5a0:	91 05       	cpc	r25, r1
    f5a2:	48 f4       	brcc	.+18     	; 0xf5b6 <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
    f5a4:	89 e0       	ldi	r24, 0x09	; 9
    f5a6:	90 e0       	ldi	r25, 0x00	; 0
    f5a8:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    f5ac:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
        return(-1);
    f5b0:	8f ef       	ldi	r24, 0xFF	; 255
    f5b2:	9f ef       	ldi	r25, 0xFF	; 255
    f5b4:	20 c0       	rjmp	.+64     	; 0xf5f6 <free_file_descriptor+0x60>
    f5b6:	ec 01       	movw	r28, r24
    }

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f5b8:	41 da       	rcall	.-2942   	; 0xea3c <fileno_to_stream>
    f5ba:	8c 01       	movw	r16, r24
    if(stream == NULL)
    f5bc:	89 2b       	or	r24, r25
    f5be:	c1 f3       	breq	.-16     	; 0xf5b0 <free_file_descriptor+0x1a>
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
    f5c0:	f8 01       	movw	r30, r16
    f5c2:	84 85       	ldd	r24, Z+12	; 0x0c
    f5c4:	95 85       	ldd	r25, Z+13	; 0x0d

    if(fh != NULL)
    f5c6:	00 97       	sbiw	r24, 0x00	; 0
    f5c8:	11 f0       	breq	.+4      	; 0xf5ce <free_file_descriptor+0x38>
    {
        safefree(fh);
    f5ca:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
    f5ce:	f8 01       	movw	r30, r16
    f5d0:	80 81       	ld	r24, Z
    f5d2:	91 81       	ldd	r25, Z+1	; 0x01
    f5d4:	00 97       	sbiw	r24, 0x00	; 0
    f5d6:	21 f0       	breq	.+8      	; 0xf5e0 <free_file_descriptor+0x4a>
    f5d8:	23 81       	ldd	r18, Z+3	; 0x03
    f5da:	27 fd       	sbrc	r18, 7
    {
        safefree(stream->buf);
    f5dc:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <safefree>
    }

    __iob[fileno]  = NULL;
    f5e0:	fe 01       	movw	r30, r28
    f5e2:	ee 0f       	add	r30, r30
    f5e4:	ff 1f       	adc	r31, r31
    f5e6:	e7 52       	subi	r30, 0x27	; 39
    f5e8:	f3 4e       	sbci	r31, 0xE3	; 227
    f5ea:	11 82       	std	Z+1, r1	; 0x01
    f5ec:	10 82       	st	Z, r1
    safefree(stream);
    f5ee:	c8 01       	movw	r24, r16
    f5f0:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <safefree>
    return(fileno);
    f5f4:	ce 01       	movw	r24, r28
}
    f5f6:	df 91       	pop	r29
    f5f8:	cf 91       	pop	r28
    f5fa:	1f 91       	pop	r17
    f5fc:	0f 91       	pop	r16
    f5fe:	08 95       	ret

0000f600 <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
    f600:	0f 93       	push	r16
    f602:	1f 93       	push	r17
    f604:	cf 93       	push	r28
    f606:	df 93       	push	r29
    f608:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f60a:	10 92 d8 1c 	sts	0x1CD8, r1	; 0x801cd8 <errno+0x1>
    f60e:	10 92 d7 1c 	sts	0x1CD7, r1	; 0x801cd7 <errno>

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f612:	14 da       	rcall	.-3032   	; 0xea3c <fileno_to_stream>
    if(stream == NULL)
    f614:	89 2b       	or	r24, r25
    f616:	d9 f0       	breq	.+54     	; 0xf64e <close+0x4e>
    {
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f618:	c8 01       	movw	r24, r16
    f61a:	a3 dd       	rcall	.-1210   	; 0xf162 <fileno_to_fatfs>
    if(fh == NULL)
    f61c:	00 97       	sbiw	r24, 0x00	; 0
    f61e:	b9 f0       	breq	.+46     	; 0xf64e <close+0x4e>
    {
        return(-1);
    }
    res = f_close(fh);
    f620:	0e 94 15 5d 	call	0xba2a	; 0xba2a <f_close>
    free_file_descriptor(fileno);
    f624:	ec 01       	movw	r28, r24
    f626:	c8 01       	movw	r24, r16
    f628:	b6 df       	rcall	.-148    	; 0xf596 <free_file_descriptor>
    if (res != FR_OK)
    f62a:	20 97       	sbiw	r28, 0x00	; 0
    f62c:	99 f0       	breq	.+38     	; 0xf654 <close+0x54>
    f62e:	c4 31       	cpi	r28, 0x14	; 20
    f630:	d1 05       	cpc	r29, r1
    f632:	38 f4       	brcc	.+14     	; 0xf642 <close+0x42>
    f634:	ca 55       	subi	r28, 0x5A	; 90
    f636:	d4 4f       	sbci	r29, 0xF4	; 244
    f638:	88 81       	ld	r24, Y
    f63a:	08 2e       	mov	r0, r24
    f63c:	00 0c       	add	r0, r0
    f63e:	99 0b       	sbc	r25, r25
    f640:	02 c0       	rjmp	.+4      	; 0xf646 <close+0x46>
    f642:	83 e2       	ldi	r24, 0x23	; 35
    f644:	90 e0       	ldi	r25, 0x00	; 0
    {
        errno = fatfs_to_errno(res);
    f646:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    f64a:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
        return(-1);
    f64e:	8f ef       	ldi	r24, 0xFF	; 255
    f650:	9f ef       	ldi	r25, 0xFF	; 255
    f652:	02 c0       	rjmp	.+4      	; 0xf658 <close+0x58>
    }
    return(0);
    f654:	80 e0       	ldi	r24, 0x00	; 0
    f656:	90 e0       	ldi	r25, 0x00	; 0
}
    f658:	df 91       	pop	r29
    f65a:	cf 91       	pop	r28
    f65c:	1f 91       	pop	r17
    f65e:	0f 91       	pop	r16
    f660:	08 95       	ret

0000f662 <fclose>:
/// @return  0 on sucess.
/// @return  -1 on error witrh errno set.
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    f662:	d0 d9       	rcall	.-3168   	; 0xea04 <fileno>
    if(fn < 0)
    f664:	97 fd       	sbrc	r25, 7
        return(EOF);

    return( close(fn) );
    f666:	02 c0       	rjmp	.+4      	; 0xf66c <fclose+0xa>
    f668:	cb cf       	rjmp	.-106    	; 0xf600 <close>
    f66a:	08 95       	ret
MEMSPACE
int fclose(FILE *stream)
{
    int fn = fileno(stream);
    if(fn < 0)
        return(EOF);
    f66c:	8f ef       	ldi	r24, 0xFF	; 255
    f66e:	9f ef       	ldi	r25, 0xFF	; 255

    return( close(fn) );
}
    f670:	08 95       	ret

0000f672 <new_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure with errno set.
MEMSPACE
int new_file_descriptor( void )
{
    f672:	0f 93       	push	r16
    f674:	1f 93       	push	r17
    f676:	cf 93       	push	r28
    f678:	df 93       	push	r29
    f67a:	e9 ed       	ldi	r30, 0xD9	; 217
    f67c:	fc e1       	ldi	r31, 0x1C	; 28
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    f67e:	c0 e0       	ldi	r28, 0x00	; 0
    f680:	d0 e0       	ldi	r29, 0x00	; 0
    f682:	21 96       	adiw	r28, 0x01	; 1
    f684:	c0 31       	cpi	r28, 0x10	; 16
    f686:	d1 05       	cpc	r29, r1
    f688:	49 f0       	breq	.+18     	; 0xf69c <new_file_descriptor+0x2a>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    f68a:	c3 30       	cpi	r28, 0x03	; 3
    f68c:	d1 05       	cpc	r29, r1
    f68e:	24 f0       	brlt	.+8      	; 0xf698 <new_file_descriptor+0x26>

    for(i=0;i<MAX_FILES;++i)
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
    f690:	82 81       	ldd	r24, Z+2	; 0x02
    f692:	93 81       	ldd	r25, Z+3	; 0x03
    f694:	89 2b       	or	r24, r25
    f696:	59 f0       	breq	.+22     	; 0xf6ae <new_file_descriptor+0x3c>
    f698:	32 96       	adiw	r30, 0x02	; 2
    f69a:	f3 cf       	rjmp	.-26     	; 0xf682 <new_file_descriptor+0x10>
            __iob[i]  = stream;
            fdev_set_udata(stream, (void *) fh);
            return(i);
        }
    }
    errno = ENFILE;
    f69c:	87 e1       	ldi	r24, 0x17	; 23
    f69e:	90 e0       	ldi	r25, 0x00	; 0
    f6a0:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    f6a4:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
    return(-1);
    f6a8:	8f ef       	ldi	r24, 0xFF	; 255
    f6aa:	9f ef       	ldi	r25, 0xFF	; 255
    f6ac:	22 c0       	rjmp	.+68     	; 0xf6f2 <new_file_descriptor+0x80>
    {
        if(isatty(i))
            continue;
        if( __iob[i] == NULL)
        {
            stream = (FILE *) safecalloc(sizeof(FILE),1);
    f6ae:	61 e0       	ldi	r22, 0x01	; 1
    f6b0:	70 e0       	ldi	r23, 0x00	; 0
    f6b2:	8e e0       	ldi	r24, 0x0E	; 14
    f6b4:	90 e0       	ldi	r25, 0x00	; 0
    f6b6:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <safecalloc>
    f6ba:	8c 01       	movw	r16, r24
            if(stream == NULL)
    f6bc:	89 2b       	or	r24, r25
    f6be:	59 f0       	breq	.+22     	; 0xf6d6 <new_file_descriptor+0x64>
            {
                errno = ENOMEM;
                return(-1);
            }
            fh = (FIL *) safecalloc(sizeof(FIL),1);
    f6c0:	61 e0       	ldi	r22, 0x01	; 1
    f6c2:	70 e0       	ldi	r23, 0x00	; 0
    f6c4:	84 e2       	ldi	r24, 0x24	; 36
    f6c6:	92 e0       	ldi	r25, 0x02	; 2
    f6c8:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <safecalloc>
            if(fh == NULL)
    f6cc:	00 97       	sbiw	r24, 0x00	; 0
    f6ce:	31 f4       	brne	.+12     	; 0xf6dc <new_file_descriptor+0x6a>
            {
                safefree(stream);
    f6d0:	c8 01       	movw	r24, r16
    f6d2:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <safefree>
                errno = ENOMEM;
    f6d6:	8c e0       	ldi	r24, 0x0C	; 12
    f6d8:	90 e0       	ldi	r25, 0x00	; 0
    f6da:	e2 cf       	rjmp	.-60     	; 0xf6a0 <new_file_descriptor+0x2e>
                return(-1);
            }

            __iob[i]  = stream;
    f6dc:	fe 01       	movw	r30, r28
    f6de:	ee 0f       	add	r30, r30
    f6e0:	ff 1f       	adc	r31, r31
    f6e2:	e7 52       	subi	r30, 0x27	; 39
    f6e4:	f3 4e       	sbci	r31, 0xE3	; 227
    f6e6:	11 83       	std	Z+1, r17	; 0x01
    f6e8:	00 83       	st	Z, r16
            fdev_set_udata(stream, (void *) fh);
    f6ea:	f8 01       	movw	r30, r16
    f6ec:	95 87       	std	Z+13, r25	; 0x0d
    f6ee:	84 87       	std	Z+12, r24	; 0x0c
{
    int i;
    FILE *stream;
    FIL *fh;

    for(i=0;i<MAX_FILES;++i)
    f6f0:	ce 01       	movw	r24, r28
            return(i);
        }
    }
    errno = ENFILE;
    return(-1);
}
    f6f2:	df 91       	pop	r29
    f6f4:	cf 91       	pop	r28
    f6f6:	1f 91       	pop	r17
    f6f8:	0f 91       	pop	r16
    f6fa:	08 95       	ret

0000f6fc <open>:
///
/// @return fileno on success.
/// @return -1 on error with errno set.
MEMSPACE
int open(const char *pathname, int flags)
{
    f6fc:	a0 e0       	ldi	r26, 0x00	; 0
    f6fe:	b0 e0       	ldi	r27, 0x00	; 0
    f700:	e4 e8       	ldi	r30, 0x84	; 132
    f702:	fb e7       	ldi	r31, 0x7B	; 123
    f704:	0c 94 dc e0 	jmp	0x1c1b8	; 0x1c1b8 <__prologue_saves__+0x8>
    f708:	5c 01       	movw	r10, r24
    f70a:	6b 01       	movw	r12, r22
    int fatfs_modes;
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
    f70c:	10 92 d8 1c 	sts	0x1CD8, r1	; 0x801cd8 <errno+0x1>
    f710:	10 92 d7 1c 	sts	0x1CD7, r1	; 0x801cd7 <errno>
        errno = fatfs_to_errno(res);
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
    f714:	7b 01       	movw	r14, r22
    f716:	83 e0       	ldi	r24, 0x03	; 3
    f718:	e8 22       	and	r14, r24
    f71a:	ff 24       	eor	r15, r15
    f71c:	e2 e0       	ldi	r30, 0x02	; 2
    f71e:	ee 16       	cp	r14, r30
    f720:	f1 04       	cpc	r15, r1
    f722:	31 f0       	breq	.+12     	; 0xf730 <open+0x34>
        fatfs_modes = FA_READ | FA_WRITE;
    else if((flags & O_ACCMODE) == O_RDONLY)
    f724:	e1 14       	cp	r14, r1
    f726:	f1 04       	cpc	r15, r1
    f728:	31 f0       	breq	.+12     	; 0xf736 <open+0x3a>
        fatfs_modes = FA_READ;
    else
        fatfs_modes = FA_WRITE;
    f72a:	02 e0       	ldi	r16, 0x02	; 2
    f72c:	10 e0       	ldi	r17, 0x00	; 0
    f72e:	05 c0       	rjmp	.+10     	; 0xf73a <open+0x3e>
        return(-1);
    }
#endif

    if((flags & O_ACCMODE) == O_RDWR)
        fatfs_modes = FA_READ | FA_WRITE;
    f730:	03 e0       	ldi	r16, 0x03	; 3
    f732:	10 e0       	ldi	r17, 0x00	; 0
    f734:	02 c0       	rjmp	.+4      	; 0xf73a <open+0x3e>
    else if((flags & O_ACCMODE) == O_RDONLY)
        fatfs_modes = FA_READ;
    f736:	01 e0       	ldi	r16, 0x01	; 1
    f738:	10 e0       	ldi	r17, 0x00	; 0
    else
        fatfs_modes = FA_WRITE;

    if(flags & O_CREAT)
    f73a:	c6 fe       	sbrs	r12, 6
    f73c:	05 c0       	rjmp	.+10     	; 0xf748 <open+0x4c>
    {
        if(flags & O_TRUNC)
    f73e:	d1 fe       	sbrs	r13, 1
    f740:	02 c0       	rjmp	.+4      	; 0xf746 <open+0x4a>
            fatfs_modes |= FA_CREATE_ALWAYS;
    f742:	08 60       	ori	r16, 0x08	; 8
    f744:	01 c0       	rjmp	.+2      	; 0xf748 <open+0x4c>
        else
            fatfs_modes |= FA_OPEN_ALWAYS;
    f746:	00 61       	ori	r16, 0x10	; 16
    }

    fileno = new_file_descriptor();
    f748:	94 df       	rcall	.-216    	; 0xf672 <new_file_descriptor>
    f74a:	3c 01       	movw	r6, r24

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    f74c:	77 d9       	rcall	.-3346   	; 0xea3c <fileno_to_stream>
    f74e:	ec 01       	movw	r28, r24
    f750:	c3 01       	movw	r24, r6
    if(stream == NULL)
    {
        free_file_descriptor(fileno);
    f752:	20 97       	sbiw	r28, 0x00	; 0

    fileno = new_file_descriptor();

// checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
    f754:	09 f4       	brne	.+2      	; 0xf758 <open+0x5c>
    f756:	48 c0       	rjmp	.+144    	; 0xf7e8 <open+0xec>
        free_file_descriptor(fileno);
        return(-1);
    }

// fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
    f758:	04 dd       	rcall	.-1528   	; 0xf162 <fileno_to_fatfs>
    f75a:	4c 01       	movw	r8, r24
    f75c:	00 97       	sbiw	r24, 0x00	; 0
    if(fh == NULL)
    f75e:	59 f4       	brne	.+22     	; 0xf776 <open+0x7a>
    {
        free_file_descriptor(fileno);
    f760:	c3 01       	movw	r24, r6
    f762:	19 df       	rcall	.-462    	; 0xf596 <free_file_descriptor>
    f764:	89 e0       	ldi	r24, 0x09	; 9
        errno = EBADF;
    f766:	90 e0       	ldi	r25, 0x00	; 0
    f768:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    f76c:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
    f770:	8f ef       	ldi	r24, 0xFF	; 255
        return(-1);
    f772:	9f ef       	ldi	r25, 0xFF	; 255
    f774:	5d c0       	rjmp	.+186    	; 0xf830 <open+0x134>
    f776:	40 2f       	mov	r20, r16
    }
    res = f_open(fh, pathname, (BYTE) (fatfs_modes & 0xff));
    f778:	b5 01       	movw	r22, r10
    f77a:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <f_open>
    f77e:	00 97       	sbiw	r24, 0x00	; 0
    if(res != FR_OK)
    f780:	91 f0       	breq	.+36     	; 0xf7a6 <open+0xaa>
    f782:	84 31       	cpi	r24, 0x14	; 20
    f784:	91 05       	cpc	r25, r1
    f786:	40 f4       	brcc	.+16     	; 0xf798 <open+0x9c>
    f788:	fc 01       	movw	r30, r24
    f78a:	ea 55       	subi	r30, 0x5A	; 90
    f78c:	f4 4f       	sbci	r31, 0xF4	; 244
    f78e:	80 81       	ld	r24, Z
    f790:	08 2e       	mov	r0, r24
    f792:	00 0c       	add	r0, r0
    f794:	99 0b       	sbc	r25, r25
    f796:	02 c0       	rjmp	.+4      	; 0xf79c <open+0xa0>
    f798:	83 e2       	ldi	r24, 0x23	; 35
    f79a:	90 e0       	ldi	r25, 0x00	; 0
    f79c:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
    {
        errno = fatfs_to_errno(res);
    f7a0:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
    f7a4:	20 c0       	rjmp	.+64     	; 0xf7e6 <open+0xea>
    f7a6:	d2 fe       	sbrs	r13, 2
        free_file_descriptor(fileno);
        return(-1);
    }
    if(flags & O_APPEND)
    f7a8:	21 c0       	rjmp	.+66     	; 0xf7ec <open+0xf0>
    f7aa:	f4 01       	movw	r30, r8
    {
///  Seek to end of the file
        res = f_lseek(fh, f_size(fh));
    f7ac:	42 85       	ldd	r20, Z+10	; 0x0a
    f7ae:	53 85       	ldd	r21, Z+11	; 0x0b
    f7b0:	64 85       	ldd	r22, Z+12	; 0x0c
    f7b2:	75 85       	ldd	r23, Z+13	; 0x0d
    f7b4:	c4 01       	movw	r24, r8
    f7b6:	0e 94 bf 5e 	call	0xbd7e	; 0xbd7e <f_lseek>
    f7ba:	00 97       	sbiw	r24, 0x00	; 0
        if (res != FR_OK)
    f7bc:	b9 f0       	breq	.+46     	; 0xf7ec <open+0xf0>
    f7be:	84 31       	cpi	r24, 0x14	; 20
    f7c0:	91 05       	cpc	r25, r1
    f7c2:	40 f4       	brcc	.+16     	; 0xf7d4 <open+0xd8>
    f7c4:	fc 01       	movw	r30, r24
    f7c6:	ea 55       	subi	r30, 0x5A	; 90
    f7c8:	f4 4f       	sbci	r31, 0xF4	; 244
    f7ca:	80 81       	ld	r24, Z
    f7cc:	08 2e       	mov	r0, r24
    f7ce:	00 0c       	add	r0, r0
    f7d0:	99 0b       	sbc	r25, r25
    f7d2:	02 c0       	rjmp	.+4      	; 0xf7d8 <open+0xdc>
    f7d4:	83 e2       	ldi	r24, 0x23	; 35
    f7d6:	90 e0       	ldi	r25, 0x00	; 0
    f7d8:	90 93 d8 1c 	sts	0x1CD8, r25	; 0x801cd8 <errno+0x1>
        {
            errno = fatfs_to_errno(res);
    f7dc:	80 93 d7 1c 	sts	0x1CD7, r24	; 0x801cd7 <errno>
    f7e0:	c4 01       	movw	r24, r8
            f_close(fh);
    f7e2:	0e 94 15 5d 	call	0xba2a	; 0xba2a <f_close>
            free_file_descriptor(fileno);
    f7e6:	c3 01       	movw	r24, r6
    f7e8:	d6 de       	rcall	.-596    	; 0xf596 <free_file_descriptor>
    f7ea:	c2 cf       	rjmp	.-124    	; 0xf770 <open+0x74>
    f7ec:	f2 e0       	ldi	r31, 0x02	; 2
            return(-1);
        }
    }

    if((flags & O_ACCMODE) == O_RDWR)
    f7ee:	ef 16       	cp	r14, r31
    f7f0:	f1 04       	cpc	r15, r1
    f7f2:	51 f4       	brne	.+20     	; 0xf808 <open+0x10c>
    f7f4:	83 e9       	ldi	r24, 0x93	; 147
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    f7f6:	93 e7       	ldi	r25, 0x73	; 115
    f7f8:	99 87       	std	Y+9, r25	; 0x09
    f7fa:	88 87       	std	Y+8, r24	; 0x08
    f7fc:	80 e1       	ldi	r24, 0x10	; 16
        stream->get = fatfs_getc;
    f7fe:	93 e7       	ldi	r25, 0x73	; 115
    f800:	9b 87       	std	Y+11, r25	; 0x0b
    f802:	8a 87       	std	Y+10, r24	; 0x0a
    f804:	83 e0       	ldi	r24, 0x03	; 3
        stream->flags = _FDEV_SETUP_RW;
    f806:	12 c0       	rjmp	.+36     	; 0xf82c <open+0x130>
    f808:	e1 14       	cp	r14, r1
    }
    else if((flags & O_ACCMODE) == O_RDONLY)
    f80a:	f1 04       	cpc	r15, r1
    f80c:	41 f4       	brne	.+16     	; 0xf81e <open+0x122>
    f80e:	19 86       	std	Y+9, r1	; 0x09
    {
// FIXME fdevopen should do this
        stream->put = NULL;
    f810:	18 86       	std	Y+8, r1	; 0x08
    f812:	80 e1       	ldi	r24, 0x10	; 16
        stream->get = fatfs_getc;
    f814:	93 e7       	ldi	r25, 0x73	; 115
    f816:	9b 87       	std	Y+11, r25	; 0x0b
    f818:	8a 87       	std	Y+10, r24	; 0x0a
    f81a:	81 e0       	ldi	r24, 0x01	; 1
        stream->flags = _FDEV_SETUP_READ;
    f81c:	07 c0       	rjmp	.+14     	; 0xf82c <open+0x130>
    f81e:	83 e9       	ldi	r24, 0x93	; 147
    }
    else
    {
// FIXME fdevopen should do this
        stream->put = fatfs_putc;
    f820:	93 e7       	ldi	r25, 0x73	; 115
    f822:	99 87       	std	Y+9, r25	; 0x09
    f824:	88 87       	std	Y+8, r24	; 0x08
    f826:	1b 86       	std	Y+11, r1	; 0x0b
        stream->get = NULL;
    f828:	1a 86       	std	Y+10, r1	; 0x0a
    f82a:	82 e0       	ldi	r24, 0x02	; 2
        stream->flags = _FDEV_SETUP_WRITE;
    f82c:	8b 83       	std	Y+3, r24	; 0x03
    f82e:	c3 01       	movw	r24, r6
    }

    return(fileno);
    f830:	cd b7       	in	r28, 0x3d	; 61
}
    f832:	de b7       	in	r29, 0x3e	; 62
    f834:	ee e0       	ldi	r30, 0x0E	; 14
    f836:	0c 94 f8 e0 	jmp	0x1c1f0	; 0x1c1f0 <__epilogue_restores__+0x8>

0000f83a <posix_fopen_modes_to_open>:
    f83a:	cf 93       	push	r28
/// @return open mode flags.
/// @return -1 on error.
/// @warning read and write BOTH share the same stream buffer and buffer index pointers.
MEMSPACE
int posix_fopen_modes_to_open(const char *mode)
{
    f83c:	df 93       	push	r29
    f83e:	ec 01       	movw	r28, r24
    int flag = 0;

    if(modecmp(mode,"r") || modecmp(mode,"rb"))
    f840:	62 e4       	ldi	r22, 0x42	; 66
    f842:	73 e0       	ldi	r23, 0x03	; 3
    f844:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <strcmp>
    f848:	00 97       	sbiw	r24, 0x00	; 0
    f84a:	09 f4       	brne	.+2      	; 0xf84e <posix_fopen_modes_to_open+0x14>
    f84c:	5d c0       	rjmp	.+186    	; 0xf908 <posix_fopen_modes_to_open+0xce>
    f84e:	6e ef       	ldi	r22, 0xFE	; 254
    f850:	78 e0       	ldi	r23, 0x08	; 8
    f852:	ce 01       	movw	r24, r28
    f854:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <strcmp>
    f858:	00 97       	sbiw	r24, 0x00	; 0
    f85a:	09 f4       	brne	.+2      	; 0xf85e <posix_fopen_modes_to_open+0x24>
    f85c:	55 c0       	rjmp	.+170    	; 0xf908 <posix_fopen_modes_to_open+0xce>
    {
        flag = O_RDONLY;
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    f85e:	61 e0       	ldi	r22, 0x01	; 1
    f860:	79 e0       	ldi	r23, 0x09	; 9
    f862:	ce 01       	movw	r24, r28
    f864:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <strcmp>
    f868:	89 2b       	or	r24, r25
    f86a:	09 f4       	brne	.+2      	; 0xf86e <posix_fopen_modes_to_open+0x34>
    f86c:	42 c0       	rjmp	.+132    	; 0xf8f2 <posix_fopen_modes_to_open+0xb8>
    f86e:	64 e0       	ldi	r22, 0x04	; 4
    f870:	79 e0       	ldi	r23, 0x09	; 9
    f872:	ce 01       	movw	r24, r28
    f874:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <strcmp>
    f878:	89 2b       	or	r24, r25
    f87a:	d9 f1       	breq	.+118    	; 0xf8f2 <posix_fopen_modes_to_open+0xb8>
    f87c:	68 e0       	ldi	r22, 0x08	; 8
    f87e:	79 e0       	ldi	r23, 0x09	; 9
    f880:	ce 01       	movw	r24, r28
    f882:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <strcmp>
    f886:	89 2b       	or	r24, r25
    f888:	a1 f1       	breq	.+104    	; 0xf8f2 <posix_fopen_modes_to_open+0xb8>
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    f88a:	6d eb       	ldi	r22, 0xBD	; 189
    f88c:	7a e0       	ldi	r23, 0x0A	; 10
    f88e:	ce 01       	movw	r24, r28
    f890:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <strcmp>
    f894:	89 2b       	or	r24, r25
    f896:	81 f1       	breq	.+96     	; 0xf8f8 <posix_fopen_modes_to_open+0xbe>
    f898:	6c e0       	ldi	r22, 0x0C	; 12
    f89a:	79 e0       	ldi	r23, 0x09	; 9
    f89c:	ce 01       	movw	r24, r28
    f89e:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <strcmp>
    f8a2:	89 2b       	or	r24, r25
    f8a4:	49 f1       	breq	.+82     	; 0xf8f8 <posix_fopen_modes_to_open+0xbe>
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    f8a6:	6f e0       	ldi	r22, 0x0F	; 15
    f8a8:	79 e0       	ldi	r23, 0x09	; 9
    f8aa:	ce 01       	movw	r24, r28
    f8ac:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <strcmp>
    f8b0:	89 2b       	or	r24, r25
    f8b2:	29 f1       	breq	.+74     	; 0xf8fe <posix_fopen_modes_to_open+0xc4>
    f8b4:	62 e1       	ldi	r22, 0x12	; 18
    f8b6:	79 e0       	ldi	r23, 0x09	; 9
    f8b8:	ce 01       	movw	r24, r28
    f8ba:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <strcmp>
    f8be:	89 2b       	or	r24, r25
    f8c0:	f1 f0       	breq	.+60     	; 0xf8fe <posix_fopen_modes_to_open+0xc4>
    f8c2:	66 e1       	ldi	r22, 0x16	; 22
    f8c4:	79 e0       	ldi	r23, 0x09	; 9
    f8c6:	ce 01       	movw	r24, r28
    f8c8:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <strcmp>
    f8cc:	89 2b       	or	r24, r25
    f8ce:	b9 f0       	breq	.+46     	; 0xf8fe <posix_fopen_modes_to_open+0xc4>
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    f8d0:	6c e2       	ldi	r22, 0x2C	; 44
    f8d2:	73 e1       	ldi	r23, 0x13	; 19
    f8d4:	ce 01       	movw	r24, r28
    f8d6:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <strcmp>
    f8da:	89 2b       	or	r24, r25
    f8dc:	99 f0       	breq	.+38     	; 0xf904 <posix_fopen_modes_to_open+0xca>
    f8de:	6a e1       	ldi	r22, 0x1A	; 26
    f8e0:	79 e0       	ldi	r23, 0x09	; 9
    f8e2:	ce 01       	movw	r24, r28
    f8e4:	0e 94 de 2e 	call	0x5dbc	; 0x5dbc <strcmp>
    f8e8:	89 2b       	or	r24, r25
    f8ea:	61 f0       	breq	.+24     	; 0xf904 <posix_fopen_modes_to_open+0xca>
        return(flag);
    }
    if(modecmp(mode,"a+") || modecmp(mode, "a+b" ) || modecmp(mode, "ab+" ))
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    f8ec:	8f ef       	ldi	r24, 0xFF	; 255
    f8ee:	9f ef       	ldi	r25, 0xFF	; 255
    f8f0:	0b c0       	rjmp	.+22     	; 0xf908 <posix_fopen_modes_to_open+0xce>
        return(flag);
    }
    if(modecmp(mode,"r+") || modecmp(mode, "r+b" ) || modecmp(mode, "rb+" ))
    {
        flag = O_RDWR | O_TRUNC;
        return(flag);
    f8f2:	82 e0       	ldi	r24, 0x02	; 2
    f8f4:	92 e0       	ldi	r25, 0x02	; 2
    f8f6:	08 c0       	rjmp	.+16     	; 0xf908 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w") || modecmp(mode,"wb"))
    {
        flag = O_WRONLY | O_CREAT | O_TRUNC;
        return(flag);
    f8f8:	81 e4       	ldi	r24, 0x41	; 65
    f8fa:	92 e0       	ldi	r25, 0x02	; 2
    f8fc:	05 c0       	rjmp	.+10     	; 0xf908 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"w+") || modecmp(mode, "w+b" ) || modecmp(mode, "wb+" ))
    {
        flag = O_RDWR | O_CREAT | O_TRUNC;
        return(flag);
    f8fe:	82 e4       	ldi	r24, 0x42	; 66
    f900:	92 e0       	ldi	r25, 0x02	; 2
    f902:	02 c0       	rjmp	.+4      	; 0xf908 <posix_fopen_modes_to_open+0xce>
    }
    if(modecmp(mode,"a") || modecmp(mode,"ab"))
    {
        flag = O_WRONLY | O_CREAT | O_APPEND;
        return(flag);
    f904:	81 e4       	ldi	r24, 0x41	; 65
    f906:	94 e0       	ldi	r25, 0x04	; 4
    {
        flag = O_RDWR | O_CREAT | O_APPEND;
        return(-1);
    }
    return(-1);                                   // nvalid mode
}
    f908:	df 91       	pop	r29
    f90a:	cf 91       	pop	r28
    f90c:	08 95       	ret

0000f90e <fopen>:
///
/// @return stream * on success.
/// @return NULL on error with errno set.
MEMSPACE
FILE *fopen(const char *path, const char *mode)
{
    f90e:	cf 93       	push	r28
    f910:	df 93       	push	r29
    f912:	ec 01       	movw	r28, r24
    f914:	cb 01       	movw	r24, r22
    int flags = posix_fopen_modes_to_open(mode);
    f916:	91 df       	rcall	.-222    	; 0xf83a <posix_fopen_modes_to_open>
    int fileno = open(path, flags);
    f918:	bc 01       	movw	r22, r24
    f91a:	ce 01       	movw	r24, r28

// checks if fileno out of bounds
    return( fileno_to_stream(fileno) );
    f91c:	ef de       	rcall	.-546    	; 0xf6fc <open>
    f91e:	8e d8       	rcall	.-3812   	; 0xea3c <fileno_to_stream>
}
    f920:	df 91       	pop	r29
    f922:	cf 91       	pop	r28
    f924:	08 95       	ret

0000f926 <fprintf>:
/// @param[in] ...: vararg list or arguments
/// @return size of printed result
MEMSPACE
int
fprintf(FILE *fp, const char *format, ...)
{
    f926:	a8 e0       	ldi	r26, 0x08	; 8
    f928:	b0 e0       	ldi	r27, 0x00	; 0
    f92a:	e9 e9       	ldi	r30, 0x99	; 153
    f92c:	fc e7       	ldi	r31, 0x7C	; 124
    f92e:	0c 94 e8 e0 	jmp	0x1c1d0	; 0x1c1d0 <__prologue_saves__+0x20>
    printf_t fn;
    va_list va;

    fn.put = _fprintf_putc;
    f932:	86 e8       	ldi	r24, 0x86	; 134
    f934:	94 e7       	ldi	r25, 0x74	; 116
    f936:	9a 83       	std	Y+2, r25	; 0x02
    f938:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    f93a:	18 86       	std	Y+8, r1	; 0x08
    f93c:	1f 82       	std	Y+7, r1	; 0x07
    fn.buffer = (void *) fp;
    f93e:	8d 85       	ldd	r24, Y+13	; 0x0d
    f940:	9e 85       	ldd	r25, Y+14	; 0x0e
    f942:	9c 83       	std	Y+4, r25	; 0x04
    f944:	8b 83       	std	Y+3, r24	; 0x03

    va_start(va, format);
    _printf_fn(&fn, format, va);
    f946:	4f 85       	ldd	r20, Y+15	; 0x0f
    f948:	58 89       	ldd	r21, Y+16	; 0x10
    f94a:	60 e8       	ldi	r22, 0x80	; 128
    f94c:	9e 01       	movw	r18, r28
    f94e:	2f 5e       	subi	r18, 0xEF	; 239
    f950:	3f 4f       	sbci	r19, 0xFF	; 255
    f952:	ce 01       	movw	r24, r28
    f954:	01 96       	adiw	r24, 0x01	; 1
    f956:	0e 94 9e 3f 	call	0x7f3c	; 0x7f3c <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    f95a:	8f 81       	ldd	r24, Y+7	; 0x07
    f95c:	98 85       	ldd	r25, Y+8	; 0x08
    f95e:	28 96       	adiw	r28, 0x08	; 8
    f960:	e2 e0       	ldi	r30, 0x02	; 2
    f962:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

0000f966 <posix_help>:
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
    return(_pagesize);
}
    f966:	cf 93       	push	r28
    f968:	df 93       	push	r29
    f96a:	00 d0       	rcall	.+0      	; 0xf96c <posix_help+0x6>
    f96c:	1f 92       	push	r1
    f96e:	ec 01       	movw	r28, r24
    f970:	8a e5       	ldi	r24, 0x5A	; 90
    f972:	9e e0       	ldi	r25, 0x0E	; 14
    f974:	a0 e0       	ldi	r26, 0x00	; 0
    f976:	ed b7       	in	r30, 0x3d	; 61
    f978:	fe b7       	in	r31, 0x3e	; 62
    f97a:	81 83       	std	Z+1, r24	; 0x01
    f97c:	92 83       	std	Z+2, r25	; 0x02
    f97e:	a3 83       	std	Z+3, r26	; 0x03
    f980:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    f984:	cd 2b       	or	r28, r29
    f986:	51 f0       	breq	.+20     	; 0xf99c <posix_help+0x36>
    f988:	84 e9       	ldi	r24, 0x94	; 148
    f98a:	9d e0       	ldi	r25, 0x0D	; 13
    f98c:	a0 e0       	ldi	r26, 0x00	; 0
    f98e:	ed b7       	in	r30, 0x3d	; 61
    f990:	fe b7       	in	r31, 0x3e	; 62
    f992:	81 83       	std	Z+1, r24	; 0x01
    f994:	92 83       	std	Z+2, r25	; 0x02
    f996:	a3 83       	std	Z+3, r26	; 0x03
    f998:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    f99c:	cd b7       	in	r28, 0x3d	; 61
    f99e:	de b7       	in	r29, 0x3e	; 62
    f9a0:	23 96       	adiw	r28, 0x03	; 3
    f9a2:	e2 e0       	ldi	r30, 0x02	; 2
    f9a4:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

0000f9a8 <copy>:
    f9a8:	4f 92       	push	r4
    f9aa:	5f 92       	push	r5
    f9ac:	6f 92       	push	r6
    f9ae:	8f 92       	push	r8
    f9b0:	9f 92       	push	r9
    f9b2:	af 92       	push	r10
    f9b4:	bf 92       	push	r11
    f9b6:	cf 92       	push	r12
    f9b8:	df 92       	push	r13
    f9ba:	ef 92       	push	r14
    f9bc:	ff 92       	push	r15
    f9be:	0f 93       	push	r16
    f9c0:	1f 93       	push	r17
    f9c2:	cf 93       	push	r28
    f9c4:	df 93       	push	r29
    f9c6:	ad b7       	in	r26, 0x3d	; 61
    f9c8:	be b7       	in	r27, 0x3e	; 62
    f9ca:	17 97       	sbiw	r26, 0x07	; 7
    f9cc:	0f b6       	in	r0, 0x3f	; 63
    f9ce:	f8 94       	cli
    f9d0:	be bf       	out	0x3e, r27	; 62
    f9d2:	0f be       	out	0x3f, r0	; 63
    f9d4:	ad bf       	out	0x3d, r26	; 61
    f9d6:	8c 01       	movw	r16, r24
    f9d8:	eb 01       	movw	r28, r22
    f9da:	ed b7       	in	r30, 0x3d	; 61
    f9dc:	fe b7       	in	r31, 0x3e	; 62
    f9de:	95 83       	std	Z+5, r25	; 0x05
    f9e0:	84 83       	std	Z+4, r24	; 0x04
    f9e2:	85 e1       	ldi	r24, 0x15	; 21
    f9e4:	9d e0       	ldi	r25, 0x0D	; 13
    f9e6:	a0 e0       	ldi	r26, 0x00	; 0
    f9e8:	81 83       	std	Z+1, r24	; 0x01
    f9ea:	92 83       	std	Z+2, r25	; 0x02
    f9ec:	a3 83       	std	Z+3, r26	; 0x03
    f9ee:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    f9f2:	6e ef       	ldi	r22, 0xFE	; 254
    f9f4:	78 e0       	ldi	r23, 0x08	; 8
    f9f6:	c8 01       	movw	r24, r16
    f9f8:	8a df       	rcall	.-236    	; 0xf90e <fopen>
    f9fa:	7c 01       	movw	r14, r24
    f9fc:	ed b7       	in	r30, 0x3d	; 61
    f9fe:	fe b7       	in	r31, 0x3e	; 62
    fa00:	89 2b       	or	r24, r25
    fa02:	59 f4       	brne	.+22     	; 0xfa1a <copy+0x72>
    fa04:	15 83       	std	Z+5, r17	; 0x05
    fa06:	04 83       	std	Z+4, r16	; 0x04
    fa08:	85 e0       	ldi	r24, 0x05	; 5
    fa0a:	9d e0       	ldi	r25, 0x0D	; 13
    fa0c:	a0 e0       	ldi	r26, 0x00	; 0
    fa0e:	81 83       	std	Z+1, r24	; 0x01
    fa10:	92 83       	std	Z+2, r25	; 0x02
    fa12:	a3 83       	std	Z+3, r26	; 0x03
    fa14:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    fa18:	20 c0       	rjmp	.+64     	; 0xfa5a <copy+0xb2>
    fa1a:	d5 83       	std	Z+5, r29	; 0x05
    fa1c:	c4 83       	std	Z+4, r28	; 0x04
    fa1e:	88 ef       	ldi	r24, 0xF8	; 248
    fa20:	9c e0       	ldi	r25, 0x0C	; 12
    fa22:	a0 e0       	ldi	r26, 0x00	; 0
    fa24:	81 83       	std	Z+1, r24	; 0x01
    fa26:	92 83       	std	Z+2, r25	; 0x02
    fa28:	a3 83       	std	Z+3, r26	; 0x03
    fa2a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    fa2e:	6c e0       	ldi	r22, 0x0C	; 12
    fa30:	79 e0       	ldi	r23, 0x09	; 9
    fa32:	ce 01       	movw	r24, r28
    fa34:	6c df       	rcall	.-296    	; 0xf90e <fopen>
    fa36:	8c 01       	movw	r16, r24
    fa38:	89 2b       	or	r24, r25
    fa3a:	a1 f4       	brne	.+40     	; 0xfa64 <copy+0xbc>
    fa3c:	ed b7       	in	r30, 0x3d	; 61
    fa3e:	fe b7       	in	r31, 0x3e	; 62
    fa40:	d5 83       	std	Z+5, r29	; 0x05
    fa42:	c4 83       	std	Z+4, r28	; 0x04
    fa44:	88 ee       	ldi	r24, 0xE8	; 232
    fa46:	9c e0       	ldi	r25, 0x0C	; 12
    fa48:	a0 e0       	ldi	r26, 0x00	; 0
    fa4a:	81 83       	std	Z+1, r24	; 0x01
    fa4c:	92 83       	std	Z+2, r25	; 0x02
    fa4e:	a3 83       	std	Z+3, r26	; 0x03
    fa50:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    fa54:	80 e0       	ldi	r24, 0x00	; 0
    fa56:	90 e0       	ldi	r25, 0x00	; 0
    fa58:	04 de       	rcall	.-1016   	; 0xf662 <fclose>
    fa5a:	60 e0       	ldi	r22, 0x00	; 0
    fa5c:	70 e0       	ldi	r23, 0x00	; 0
    fa5e:	80 e0       	ldi	r24, 0x00	; 0
    fa60:	90 e0       	ldi	r25, 0x00	; 0
    fa62:	68 c0       	rjmp	.+208    	; 0xfb34 <copy+0x18c>
    fa64:	61 e0       	ldi	r22, 0x01	; 1
    fa66:	70 e0       	ldi	r23, 0x00	; 0
    fa68:	80 e0       	ldi	r24, 0x00	; 0
    fa6a:	92 e0       	ldi	r25, 0x02	; 2
    fa6c:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <safecalloc>
    fa70:	6c 01       	movw	r12, r24
    fa72:	89 2b       	or	r24, r25
    fa74:	21 f4       	brne	.+8      	; 0xfa7e <copy+0xd6>
    fa76:	c7 01       	movw	r24, r14
    fa78:	f4 dd       	rcall	.-1048   	; 0xf662 <fclose>
    fa7a:	c8 01       	movw	r24, r16
    fa7c:	ed cf       	rjmp	.-38     	; 0xfa58 <copy+0xb0>
    fa7e:	8b ed       	ldi	r24, 0xDB	; 219
    fa80:	9c e0       	ldi	r25, 0x0C	; 12
    fa82:	a0 e0       	ldi	r26, 0x00	; 0
    fa84:	ed b7       	in	r30, 0x3d	; 61
    fa86:	fe b7       	in	r31, 0x3e	; 62
    fa88:	81 83       	std	Z+1, r24	; 0x01
    fa8a:	92 83       	std	Z+2, r25	; 0x02
    fa8c:	a3 83       	std	Z+3, r26	; 0x03
    fa8e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    fa92:	81 2c       	mov	r8, r1
    fa94:	91 2c       	mov	r9, r1
    fa96:	54 01       	movw	r10, r8
    fa98:	8f eb       	ldi	r24, 0xBF	; 191
    fa9a:	9c e0       	ldi	r25, 0x0C	; 12
    fa9c:	2c 01       	movw	r4, r24
    fa9e:	61 2c       	mov	r6, r1
    faa0:	97 01       	movw	r18, r14
    faa2:	40 e0       	ldi	r20, 0x00	; 0
    faa4:	52 e0       	ldi	r21, 0x02	; 2
    faa6:	61 e0       	ldi	r22, 0x01	; 1
    faa8:	70 e0       	ldi	r23, 0x00	; 0
    faaa:	c6 01       	movw	r24, r12
    faac:	86 dc       	rcall	.-1780   	; 0xf3ba <fread>
    faae:	ec 01       	movw	r28, r24
    fab0:	18 16       	cp	r1, r24
    fab2:	19 06       	cpc	r1, r25
    fab4:	44 f5       	brge	.+80     	; 0xfb06 <copy+0x15e>
    fab6:	98 01       	movw	r18, r16
    fab8:	ae 01       	movw	r20, r28
    faba:	61 e0       	ldi	r22, 0x01	; 1
    fabc:	70 e0       	ldi	r23, 0x00	; 0
    fabe:	c6 01       	movw	r24, r12
    fac0:	4e dd       	rcall	.-1380   	; 0xf55e <fwrite>
    fac2:	8c 17       	cp	r24, r28
    fac4:	9d 07       	cpc	r25, r29
    fac6:	5c f4       	brge	.+22     	; 0xfade <copy+0x136>
    fac8:	8e ec       	ldi	r24, 0xCE	; 206
    faca:	9c e0       	ldi	r25, 0x0C	; 12
    facc:	a0 e0       	ldi	r26, 0x00	; 0
    face:	ed b7       	in	r30, 0x3d	; 61
    fad0:	fe b7       	in	r31, 0x3e	; 62
    fad2:	81 83       	std	Z+1, r24	; 0x01
    fad4:	92 83       	std	Z+2, r25	; 0x02
    fad6:	a3 83       	std	Z+3, r26	; 0x03
    fad8:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    fadc:	14 c0       	rjmp	.+40     	; 0xfb06 <copy+0x15e>
    fade:	ce 01       	movw	r24, r28
    fae0:	dd 0f       	add	r29, r29
    fae2:	aa 0b       	sbc	r26, r26
    fae4:	bb 0b       	sbc	r27, r27
    fae6:	88 0e       	add	r8, r24
    fae8:	99 1e       	adc	r9, r25
    faea:	aa 1e       	adc	r10, r26
    faec:	bb 1e       	adc	r11, r27
    faee:	ed b7       	in	r30, 0x3d	; 61
    faf0:	fe b7       	in	r31, 0x3e	; 62
    faf2:	84 82       	std	Z+4, r8	; 0x04
    faf4:	95 82       	std	Z+5, r9	; 0x05
    faf6:	a6 82       	std	Z+6, r10	; 0x06
    faf8:	b7 82       	std	Z+7, r11	; 0x07
    fafa:	41 82       	std	Z+1, r4	; 0x01
    fafc:	52 82       	std	Z+2, r5	; 0x02
    fafe:	63 82       	std	Z+3, r6	; 0x03
    fb00:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    fb04:	cd cf       	rjmp	.-102    	; 0xfaa0 <copy+0xf8>
    fb06:	ed b7       	in	r30, 0x3d	; 61
    fb08:	fe b7       	in	r31, 0x3e	; 62
    fb0a:	84 82       	std	Z+4, r8	; 0x04
    fb0c:	95 82       	std	Z+5, r9	; 0x05
    fb0e:	a6 82       	std	Z+6, r10	; 0x06
    fb10:	b7 82       	std	Z+7, r11	; 0x07
    fb12:	8c ea       	ldi	r24, 0xAC	; 172
    fb14:	9c e0       	ldi	r25, 0x0C	; 12
    fb16:	a0 e0       	ldi	r26, 0x00	; 0
    fb18:	81 83       	std	Z+1, r24	; 0x01
    fb1a:	92 83       	std	Z+2, r25	; 0x02
    fb1c:	a3 83       	std	Z+3, r26	; 0x03
    fb1e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    fb22:	c6 01       	movw	r24, r12
    fb24:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <safefree>
    fb28:	c7 01       	movw	r24, r14
    fb2a:	9b dd       	rcall	.-1226   	; 0xf662 <fclose>
    fb2c:	c8 01       	movw	r24, r16
    fb2e:	99 dd       	rcall	.-1230   	; 0xf662 <fclose>
    fb30:	b4 01       	movw	r22, r8
    fb32:	c5 01       	movw	r24, r10
    fb34:	ad b7       	in	r26, 0x3d	; 61
    fb36:	be b7       	in	r27, 0x3e	; 62
    fb38:	17 96       	adiw	r26, 0x07	; 7
    fb3a:	0f b6       	in	r0, 0x3f	; 63
    fb3c:	f8 94       	cli
    fb3e:	be bf       	out	0x3e, r27	; 62
    fb40:	0f be       	out	0x3f, r0	; 63
    fb42:	ad bf       	out	0x3d, r26	; 61
    fb44:	df 91       	pop	r29
    fb46:	cf 91       	pop	r28
    fb48:	1f 91       	pop	r17
    fb4a:	0f 91       	pop	r16
    fb4c:	ff 90       	pop	r15
    fb4e:	ef 90       	pop	r14
    fb50:	df 90       	pop	r13
    fb52:	cf 90       	pop	r12
    fb54:	bf 90       	pop	r11
    fb56:	af 90       	pop	r10
    fb58:	9f 90       	pop	r9
    fb5a:	8f 90       	pop	r8
    fb5c:	6f 90       	pop	r6
    fb5e:	5f 90       	pop	r5
    fb60:	4f 90       	pop	r4
    fb62:	08 95       	ret

0000fb64 <testpage>:
/// @brief Used to page output of functions like cat, hexdump, etc
/// @param[in] *name: file to hexdump
/// @retrun -1 = quit, return count or 0 at new page
MEMSPACE
int testpage(int count)
{
    fb64:	cf 93       	push	r28
    fb66:	df 93       	push	r29
    fb68:	00 d0       	rcall	.+0      	; 0xfb6a <testpage+0x6>
    fb6a:	1f 92       	push	r1
    int c;
    if(count >= _pagesize)
    fb6c:	20 91 80 01 	lds	r18, 0x0180	; 0x800180 <_pagesize>
    fb70:	30 91 81 01 	lds	r19, 0x0181	; 0x800181 <_pagesize+0x1>
    fb74:	82 17       	cp	r24, r18
    fb76:	93 07       	cpc	r25, r19
    fb78:	3c f1       	brlt	.+78     	; 0xfbc8 <testpage+0x64>
    {
        printf("More..");
    fb7a:	85 ea       	ldi	r24, 0xA5	; 165
    fb7c:	9c e0       	ldi	r25, 0x0C	; 12
    fb7e:	a0 e0       	ldi	r26, 0x00	; 0
    fb80:	ed b7       	in	r30, 0x3d	; 61
    fb82:	fe b7       	in	r31, 0x3e	; 62
    fb84:	81 83       	std	Z+1, r24	; 0x01
    fb86:	92 83       	std	Z+2, r25	; 0x02
    fb88:	a3 83       	std	Z+3, r26	; 0x03
    fb8a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        {
            optimistic_yield(1000);
            wdt_reset();
        }
#endif
        c = getchar();
    fb8e:	0e 94 93 74 	call	0xe926	; 0xe926 <getchar>
    fb92:	ec 01       	movw	r28, r24
        printf("\r");
    fb94:	83 ea       	ldi	r24, 0xA3	; 163
    fb96:	9c e0       	ldi	r25, 0x0C	; 12
    fb98:	a0 e0       	ldi	r26, 0x00	; 0
    fb9a:	ed b7       	in	r30, 0x3d	; 61
    fb9c:	fe b7       	in	r31, 0x3e	; 62
    fb9e:	81 83       	std	Z+1, r24	; 0x01
    fba0:	92 83       	std	Z+2, r25	; 0x02
    fba2:	a3 83       	std	Z+3, r26	; 0x03
    fba4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        if(c == 'q')
    fba8:	c1 37       	cpi	r28, 0x71	; 113
    fbaa:	d1 05       	cpc	r29, r1
    fbac:	41 f0       	breq	.+16     	; 0xfbbe <testpage+0x5a>
            return(-1);                           // quit
        if(c == '\n')
    fbae:	2a 97       	sbiw	r28, 0x0a	; 10
    fbb0:	49 f4       	brne	.+18     	; 0xfbc4 <testpage+0x60>
            return(_pagesize-1);                  // single line
    fbb2:	80 91 80 01 	lds	r24, 0x0180	; 0x800180 <_pagesize>
    fbb6:	90 91 81 01 	lds	r25, 0x0181	; 0x800181 <_pagesize+0x1>
    fbba:	01 97       	sbiw	r24, 0x01	; 1
    fbbc:	05 c0       	rjmp	.+10     	; 0xfbc8 <testpage+0x64>
        }
#endif
        c = getchar();
        printf("\r");
        if(c == 'q')
            return(-1);                           // quit
    fbbe:	8f ef       	ldi	r24, 0xFF	; 255
    fbc0:	9f ef       	ldi	r25, 0xFF	; 255
    fbc2:	02 c0       	rjmp	.+4      	; 0xfbc8 <testpage+0x64>
        if(c == '\n')
            return(_pagesize-1);                  // single line
        return(0);                                // new page
    fbc4:	80 e0       	ldi	r24, 0x00	; 0
    fbc6:	90 e0       	ldi	r25, 0x00	; 0
    }
    return (count);
}
    fbc8:	cd b7       	in	r28, 0x3d	; 61
    fbca:	de b7       	in	r29, 0x3e	; 62
    fbcc:	23 96       	adiw	r28, 0x03	; 3
    fbce:	e2 e0       	ldi	r30, 0x02	; 2
    fbd0:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

0000fbd4 <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  void.
MEMSPACE
long cat(char *name, int dopage)
{
    fbd4:	a7 e0       	ldi	r26, 0x07	; 7
    fbd6:	b1 e0       	ldi	r27, 0x01	; 1
    fbd8:	e0 ef       	ldi	r30, 0xF0	; 240
    fbda:	fd e7       	ldi	r31, 0x7D	; 125
    fbdc:	0c 94 de e0 	jmp	0x1c1bc	; 0x1c1bc <__prologue_saves__+0xc>
    fbe0:	8c 01       	movw	r16, r24
    fbe2:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
    fbe4:	6e ef       	ldi	r22, 0xFE	; 254
    fbe6:	78 e0       	ldi	r23, 0x08	; 8
    fbe8:	92 de       	rcall	.-732    	; 0xf90e <fopen>
    fbea:	7c 01       	movw	r14, r24
    if (!fp)
    fbec:	89 2b       	or	r24, r25
    fbee:	41 f0       	breq	.+16     	; 0xfc00 <cat+0x2c>
    fbf0:	c1 2c       	mov	r12, r1
    fbf2:	d1 2c       	mov	r13, r1
    fbf4:	a1 2c       	mov	r10, r1
    fbf6:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    fbf8:	8e 01       	movw	r16, r28
    fbfa:	08 5f       	subi	r16, 0xF8	; 248
    fbfc:	1f 4f       	sbci	r17, 0xFF	; 255
    fbfe:	22 c0       	rjmp	.+68     	; 0xfc44 <cat+0x70>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
    fc00:	ed b7       	in	r30, 0x3d	; 61
    fc02:	fe b7       	in	r31, 0x3e	; 62
    fc04:	15 83       	std	Z+5, r17	; 0x05
    fc06:	04 83       	std	Z+4, r16	; 0x04
    fc08:	8e e2       	ldi	r24, 0x2E	; 46
    fc0a:	9d e0       	ldi	r25, 0x0D	; 13
    fc0c:	a0 e0       	ldi	r26, 0x00	; 0
    fc0e:	81 83       	std	Z+1, r24	; 0x01
    fc10:	92 83       	std	Z+2, r25	; 0x02
    fc12:	a3 83       	std	Z+3, r26	; 0x03
    fc14:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        return(0);
    fc18:	c1 2c       	mov	r12, r1
    fc1a:	d1 2c       	mov	r13, r1
    fc1c:	76 01       	movw	r14, r12
    fc1e:	3f c0       	rjmp	.+126    	; 0xfc9e <cat+0xca>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
    fc20:	c8 01       	movw	r24, r16
    fc22:	0e 94 62 2f 	call	0x5ec4	; 0x5ec4 <trim_tail>
        size += strlen(line);
    fc26:	f8 01       	movw	r30, r16
    fc28:	01 90       	ld	r0, Z+
    fc2a:	00 20       	and	r0, r0
    fc2c:	e9 f7       	brne	.-6      	; 0xfc28 <cat+0x54>
    fc2e:	31 97       	sbiw	r30, 0x01	; 1
    fc30:	e0 1b       	sub	r30, r16
    fc32:	f1 0b       	sbc	r31, r17
    fc34:	ce 0e       	add	r12, r30
    fc36:	df 1e       	adc	r13, r31
        puts(line);
    fc38:	c8 01       	movw	r24, r16
    fc3a:	0e 94 eb 74 	call	0xe9d6	; 0xe9d6 <puts>
        if(dopage)
    fc3e:	81 14       	cp	r8, r1
    fc40:	91 04       	cpc	r9, r1
    fc42:	49 f4       	brne	.+18     	; 0xfc56 <cat+0x82>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    fc44:	a7 01       	movw	r20, r14
    fc46:	6e ef       	ldi	r22, 0xFE	; 254
    fc48:	70 e0       	ldi	r23, 0x00	; 0
    fc4a:	c8 01       	movw	r24, r16
    fc4c:	0e 94 9f 74 	call	0xe93e	; 0xe93e <fgets>
    fc50:	89 2b       	or	r24, r25
    fc52:	31 f7       	brne	.-52     	; 0xfc20 <cat+0x4c>
    fc54:	06 c0       	rjmp	.+12     	; 0xfc62 <cat+0x8e>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
    fc56:	c5 01       	movw	r24, r10
    fc58:	01 96       	adiw	r24, 0x01	; 1
    fc5a:	84 df       	rcall	.-248    	; 0xfb64 <testpage>
    fc5c:	5c 01       	movw	r10, r24
            if(count < 0)
    fc5e:	97 ff       	sbrs	r25, 7
    fc60:	f1 cf       	rjmp	.-30     	; 0xfc44 <cat+0x70>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
    fc62:	8c e2       	ldi	r24, 0x2C	; 44
    fc64:	9d e0       	ldi	r25, 0x0D	; 13
    fc66:	a0 e0       	ldi	r26, 0x00	; 0
    fc68:	ed b7       	in	r30, 0x3d	; 61
    fc6a:	fe b7       	in	r31, 0x3e	; 62
    fc6c:	81 83       	std	Z+1, r24	; 0x01
    fc6e:	92 83       	std	Z+2, r25	; 0x02
    fc70:	a3 83       	std	Z+3, r26	; 0x03
    fc72:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    fclose(fp);
    fc76:	c7 01       	movw	r24, r14
    fc78:	f4 dc       	rcall	.-1560   	; 0xf662 <fclose>
    printf("%ld bytes\n", (long)size);
    fc7a:	0d 2c       	mov	r0, r13
    fc7c:	00 0c       	add	r0, r0
    fc7e:	ee 08       	sbc	r14, r14
    fc80:	ff 08       	sbc	r15, r15
    fc82:	ed b7       	in	r30, 0x3d	; 61
    fc84:	fe b7       	in	r31, 0x3e	; 62
    fc86:	c4 82       	std	Z+4, r12	; 0x04
    fc88:	d5 82       	std	Z+5, r13	; 0x05
    fc8a:	e6 82       	std	Z+6, r14	; 0x06
    fc8c:	f7 82       	std	Z+7, r15	; 0x07
    fc8e:	81 e2       	ldi	r24, 0x21	; 33
    fc90:	9d e0       	ldi	r25, 0x0D	; 13
    fc92:	a0 e0       	ldi	r26, 0x00	; 0
    fc94:	81 83       	std	Z+1, r24	; 0x01
    fc96:	92 83       	std	Z+2, r25	; 0x02
    fc98:	a3 83       	std	Z+3, r26	; 0x03
    fc9a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    return(size);
}
    fc9e:	c7 01       	movw	r24, r14
    fca0:	b6 01       	movw	r22, r12
    fca2:	c9 5f       	subi	r28, 0xF9	; 249
    fca4:	de 4f       	sbci	r29, 0xFE	; 254
    fca6:	ec e0       	ldi	r30, 0x0C	; 12
    fca8:	0c 94 fa e0 	jmp	0x1c1f4	; 0x1c1f4 <__epilogue_restores__+0xc>

0000fcac <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    fcac:	4f 92       	push	r4
    fcae:	5f 92       	push	r5
    fcb0:	6f 92       	push	r6
    fcb2:	7f 92       	push	r7
    fcb4:	af 92       	push	r10
    fcb6:	bf 92       	push	r11
    fcb8:	cf 92       	push	r12
    fcba:	df 92       	push	r13
    fcbc:	ef 92       	push	r14
    fcbe:	ff 92       	push	r15
    fcc0:	0f 93       	push	r16
    fcc2:	1f 93       	push	r17
    fcc4:	cf 93       	push	r28
    fcc6:	df 93       	push	r29
    fcc8:	cd b7       	in	r28, 0x3d	; 61
    fcca:	de b7       	in	r29, 0x3e	; 62
    fccc:	c9 54       	subi	r28, 0x49	; 73
    fcce:	d1 09       	sbc	r29, r1
    fcd0:	0f b6       	in	r0, 0x3f	; 63
    fcd2:	f8 94       	cli
    fcd4:	de bf       	out	0x3e, r29	; 62
    fcd6:	0f be       	out	0x3f, r0	; 63
    fcd8:	cd bf       	out	0x3d, r28	; 61
    fcda:	8c 01       	movw	r16, r24
    fcdc:	7b 01       	movw	r14, r22
    struct stat sp;
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;

    if(stat(name, &sp) == -1)
    fcde:	be 01       	movw	r22, r28
    fce0:	62 5f       	subi	r22, 0xF2	; 242
    fce2:	7f 4f       	sbci	r23, 0xFF	; 255
    fce4:	19 d9       	rcall	.-3534   	; 0xef18 <stat>
    fce6:	01 96       	adiw	r24, 0x01	; 1
    fce8:	79 f4       	brne	.+30     	; 0xfd08 <ls_info+0x5c>
    {
        printf("can not stat: %s\n", name);
    fcea:	ed b7       	in	r30, 0x3d	; 61
    fcec:	fe b7       	in	r31, 0x3e	; 62
    fcee:	15 83       	std	Z+5, r17	; 0x05
    fcf0:	04 83       	std	Z+4, r16	; 0x04
    fcf2:	81 e9       	ldi	r24, 0x91	; 145
    fcf4:	9c e0       	ldi	r25, 0x0C	; 12
    fcf6:	a0 e0       	ldi	r26, 0x00	; 0
    fcf8:	81 83       	std	Z+1, r24	; 0x01
    fcfa:	92 83       	std	Z+2, r25	; 0x02
    fcfc:	a3 83       	std	Z+3, r26	; 0x03
    fcfe:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        return(0);
    fd02:	80 e0       	ldi	r24, 0x00	; 0
    fd04:	90 e0       	ldi	r25, 0x00	; 0
    fd06:	77 c0       	rjmp	.+238    	; 0xfdf6 <ls_info+0x14a>
    }

    if(!verbose)
    fd08:	ef 28       	or	r14, r15
    fd0a:	81 f4       	brne	.+32     	; 0xfd2c <ls_info+0x80>
    {
        printf("%s\n",basename(name));
    fd0c:	c8 01       	movw	r24, r16
    fd0e:	0e 94 58 75 	call	0xeab0	; 0xeab0 <basename>
    fd12:	ed b7       	in	r30, 0x3d	; 61
    fd14:	fe b7       	in	r31, 0x3e	; 62
    fd16:	95 83       	std	Z+5, r25	; 0x05
    fd18:	84 83       	std	Z+4, r24	; 0x04
    fd1a:	8d e8       	ldi	r24, 0x8D	; 141
    fd1c:	9c e0       	ldi	r25, 0x0C	; 12
    fd1e:	a0 e0       	ldi	r26, 0x00	; 0
    fd20:	81 83       	std	Z+1, r24	; 0x01
    fd22:	92 83       	std	Z+2, r25	; 0x02
    fd24:	a3 83       	std	Z+3, r26	; 0x03
    fd26:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    fd2a:	63 c0       	rjmp	.+198    	; 0xfdf2 <ls_info+0x146>
        return(1);
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
    fd2c:	4e 88       	ldd	r4, Y+22	; 0x16
    fd2e:	5f 88       	ldd	r5, Y+23	; 0x17
    fd30:	68 8c       	ldd	r6, Y+24	; 0x18
    fd32:	79 8c       	ldd	r7, Y+25	; 0x19
    fd34:	d3 01       	movw	r26, r6
    fd36:	c2 01       	movw	r24, r4
    fd38:	88 27       	eor	r24, r24
    fd3a:	90 7f       	andi	r25, 0xF0	; 240
    fd3c:	aa 27       	eor	r26, r26
    fd3e:	bb 27       	eor	r27, r27
    fd40:	81 15       	cp	r24, r1
    fd42:	90 44       	sbci	r25, 0x40	; 64
    fd44:	a1 05       	cpc	r26, r1
    fd46:	b1 05       	cpc	r27, r1
    fd48:	11 f4       	brne	.+4      	; 0xfd4e <ls_info+0xa2>
        *p++ = 'd';
    fd4a:	84 e6       	ldi	r24, 0x64	; 100
    fd4c:	01 c0       	rjmp	.+2      	; 0xfd50 <ls_info+0xa4>
    else
        *p++ = '-';
    fd4e:	8d e2       	ldi	r24, 0x2D	; 45
    fd50:	8e af       	std	Y+62, r24	; 0x3e
    fd52:	fe 01       	movw	r30, r28
    fd54:	fe 96       	adiw	r30, 0x3e	; 62
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
    fd56:	e1 2c       	mov	r14, r1
    fd58:	ff 24       	eor	r15, r15
    fd5a:	f3 94       	inc	r15
    fd5c:	20 e0       	ldi	r18, 0x00	; 0
    fd5e:	30 e0       	ldi	r19, 0x00	; 0
    fd60:	be 2e       	mov	r11, r30
    fd62:	af 2e       	mov	r10, r31
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
    fd64:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
    fd66:	53 e0       	ldi	r21, 0x03	; 3
    fd68:	c5 2e       	mov	r12, r21
    fd6a:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
// User
        if( sp.st_mode & mask)
    fd6c:	c7 01       	movw	r24, r14
    fd6e:	a0 e0       	ldi	r26, 0x00	; 0
    fd70:	b0 e0       	ldi	r27, 0x00	; 0
    fd72:	84 21       	and	r24, r4
    fd74:	95 21       	and	r25, r5
    fd76:	a6 21       	and	r26, r6
    fd78:	b7 21       	and	r27, r7
    fd7a:	89 2b       	or	r24, r25
    fd7c:	8a 2b       	or	r24, r26
    fd7e:	8b 2b       	or	r24, r27
    fd80:	51 f0       	breq	.+20     	; 0xfd96 <ls_info+0xea>
            *p++ = cm[ i % 3];
    fd82:	c9 01       	movw	r24, r18
    fd84:	b6 01       	movw	r22, r12
    fd86:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <__divmodhi4>
    fd8a:	dc 01       	movw	r26, r24
    fd8c:	a6 54       	subi	r26, 0x46	; 70
    fd8e:	b4 4f       	sbci	r27, 0xF4	; 244
    fd90:	8c 91       	ld	r24, X
    fd92:	81 83       	std	Z+1, r24	; 0x01
    fd94:	01 c0       	rjmp	.+2      	; 0xfd98 <ls_info+0xec>
        else
            *p++ = '-';
    fd96:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
    fd98:	f6 94       	lsr	r15
    fd9a:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
    fd9c:	2f 5f       	subi	r18, 0xFF	; 255
    fd9e:	3f 4f       	sbci	r19, 0xFF	; 255
    fda0:	31 96       	adiw	r30, 0x01	; 1
    fda2:	29 30       	cpi	r18, 0x09	; 9
    fda4:	31 05       	cpc	r19, r1
    fda6:	11 f7       	brne	.-60     	; 0xfd6c <ls_info+0xc0>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
    fda8:	29 96       	adiw	r28, 0x09	; 9
    fdaa:	1f ae       	std	Y+63, r1	; 0x3f
    fdac:	29 97       	sbiw	r28, 0x09	; 9

    printf("%s none none %12ld %s %s\n",
    fdae:	4e a0       	ldd	r4, Y+38	; 0x26
    fdb0:	5f a0       	ldd	r5, Y+39	; 0x27
    fdb2:	68 a4       	ldd	r6, Y+40	; 0x28
    fdb4:	79 a4       	ldd	r7, Y+41	; 0x29
    fdb6:	6e a9       	ldd	r22, Y+54	; 0x36
    fdb8:	7f a9       	ldd	r23, Y+55	; 0x37
    fdba:	88 ad       	ldd	r24, Y+56	; 0x38
    fdbc:	99 ad       	ldd	r25, Y+57	; 0x39
    fdbe:	0e 94 33 75 	call	0xea66	; 0xea66 <mctime>
    fdc2:	7c 01       	movw	r14, r24
    fdc4:	c8 01       	movw	r24, r16
    fdc6:	0e 94 58 75 	call	0xeab0	; 0xeab0 <basename>
    fdca:	ed b7       	in	r30, 0x3d	; 61
    fdcc:	fe b7       	in	r31, 0x3e	; 62
    fdce:	95 87       	std	Z+13, r25	; 0x0d
    fdd0:	84 87       	std	Z+12, r24	; 0x0c
    fdd2:	f3 86       	std	Z+11, r15	; 0x0b
    fdd4:	e2 86       	std	Z+10, r14	; 0x0a
    fdd6:	46 82       	std	Z+6, r4	; 0x06
    fdd8:	57 82       	std	Z+7, r5	; 0x07
    fdda:	60 86       	std	Z+8, r6	; 0x08
    fddc:	71 86       	std	Z+9, r7	; 0x09
    fdde:	b4 82       	std	Z+4, r11	; 0x04
    fde0:	a5 82       	std	Z+5, r10	; 0x05
    fde2:	83 e7       	ldi	r24, 0x73	; 115
    fde4:	9c e0       	ldi	r25, 0x0C	; 12
    fde6:	a0 e0       	ldi	r26, 0x00	; 0
    fde8:	81 83       	std	Z+1, r24	; 0x01
    fdea:	92 83       	std	Z+2, r25	; 0x02
    fdec:	a3 83       	std	Z+3, r26	; 0x03
    fdee:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        attr,
        (long) sp.st_size,
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
    fdf2:	81 e0       	ldi	r24, 0x01	; 1
    fdf4:	90 e0       	ldi	r25, 0x00	; 0
}
    fdf6:	c7 5b       	subi	r28, 0xB7	; 183
    fdf8:	df 4f       	sbci	r29, 0xFF	; 255
    fdfa:	0f b6       	in	r0, 0x3f	; 63
    fdfc:	f8 94       	cli
    fdfe:	de bf       	out	0x3e, r29	; 62
    fe00:	0f be       	out	0x3f, r0	; 63
    fe02:	cd bf       	out	0x3d, r28	; 61
    fe04:	df 91       	pop	r29
    fe06:	cf 91       	pop	r28
    fe08:	1f 91       	pop	r17
    fe0a:	0f 91       	pop	r16
    fe0c:	ff 90       	pop	r15
    fe0e:	ef 90       	pop	r14
    fe10:	df 90       	pop	r13
    fe12:	cf 90       	pop	r12
    fe14:	bf 90       	pop	r11
    fe16:	af 90       	pop	r10
    fe18:	7f 90       	pop	r7
    fe1a:	6f 90       	pop	r6
    fe1c:	5f 90       	pop	r5
    fe1e:	4f 90       	pop	r4
    fe20:	08 95       	ret

0000fe22 <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files
MEMSPACE
int ls(char *name, int verbose)
{
    fe22:	2f 92       	push	r2
    fe24:	3f 92       	push	r3
    fe26:	4f 92       	push	r4
    fe28:	5f 92       	push	r5
    fe2a:	6f 92       	push	r6
    fe2c:	8f 92       	push	r8
    fe2e:	9f 92       	push	r9
    fe30:	af 92       	push	r10
    fe32:	bf 92       	push	r11
    fe34:	cf 92       	push	r12
    fe36:	df 92       	push	r13
    fe38:	ef 92       	push	r14
    fe3a:	ff 92       	push	r15
    fe3c:	0f 93       	push	r16
    fe3e:	1f 93       	push	r17
    fe40:	cf 93       	push	r28
    fe42:	df 93       	push	r29
    fe44:	cd b7       	in	r28, 0x3d	; 61
    fe46:	de b7       	in	r29, 0x3e	; 62
    fe48:	c7 53       	subi	r28, 0x37	; 55
    fe4a:	d1 40       	sbci	r29, 0x01	; 1
    fe4c:	0f b6       	in	r0, 0x3f	; 63
    fe4e:	f8 94       	cli
    fe50:	de bf       	out	0x3e, r29	; 62
    fe52:	0f be       	out	0x3f, r0	; 63
    fe54:	cd bf       	out	0x3d, r28	; 61
    fe56:	7c 01       	movw	r14, r24
    fe58:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    fe5a:	1e 82       	std	Y+6, r1	; 0x06
    fe5c:	8e 01       	movw	r16, r28
    fe5e:	0a 5f       	subi	r16, 0xFA	; 250
    fe60:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
    fe62:	00 97       	sbiw	r24, 0x00	; 0
    fe64:	91 f4       	brne	.+36     	; 0xfe8a <ls+0x68>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
    fe66:	6e ef       	ldi	r22, 0xFE	; 254
    fe68:	70 e0       	ldi	r23, 0x00	; 0
    fe6a:	c8 01       	movw	r24, r16
    fe6c:	0e 94 ae 75 	call	0xeb5c	; 0xeb5c <getcwd>
    fe70:	89 2b       	or	r24, r25
    fe72:	d1 f4       	brne	.+52     	; 0xfea8 <ls+0x86>
        {
            printf("ls: Can't get current directory\n");
    fe74:	82 e5       	ldi	r24, 0x52	; 82
    fe76:	9c e0       	ldi	r25, 0x0C	; 12
    fe78:	a0 e0       	ldi	r26, 0x00	; 0
    fe7a:	ed b7       	in	r30, 0x3d	; 61
    fe7c:	fe b7       	in	r31, 0x3e	; 62
    fe7e:	81 83       	std	Z+1, r24	; 0x01
    fe80:	92 83       	std	Z+2, r25	; 0x02
    fe82:	a3 83       	std	Z+3, r26	; 0x03
    fe84:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    fe88:	37 c0       	rjmp	.+110    	; 0xfef8 <ls+0xd6>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
    fe8a:	fc 01       	movw	r30, r24
    fe8c:	80 81       	ld	r24, Z
    fe8e:	88 23       	and	r24, r24
    fe90:	51 f3       	breq	.-44     	; 0xfe66 <ls+0x44>
    fe92:	6b ef       	ldi	r22, 0xFB	; 251
    fe94:	72 e1       	ldi	r23, 0x12	; 18
    fe96:	c7 01       	movw	r24, r14
    fe98:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCH>
    fe9c:	89 2b       	or	r24, r25
    fe9e:	19 f7       	brne	.-58     	; 0xfe66 <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
    fea0:	b7 01       	movw	r22, r14
    fea2:	c8 01       	movw	r24, r16
    fea4:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <strcpy>
    }
    len = strlen(fullpath);
    fea8:	f8 01       	movw	r30, r16
    feaa:	01 90       	ld	r0, Z+
    feac:	00 20       	and	r0, r0
    feae:	e9 f7       	brne	.-6      	; 0xfeaa <ls+0x88>
    feb0:	31 97       	sbiw	r30, 0x01	; 1
    feb2:	1f 01       	movw	r2, r30
    feb4:	20 1a       	sub	r2, r16
    feb6:	31 0a       	sbc	r3, r17

    printf("Listing:[%s]\n",fullpath);
    feb8:	ed b7       	in	r30, 0x3d	; 61
    feba:	fe b7       	in	r31, 0x3e	; 62
    febc:	15 83       	std	Z+5, r17	; 0x05
    febe:	04 83       	std	Z+4, r16	; 0x04
    fec0:	84 e4       	ldi	r24, 0x44	; 68
    fec2:	9c e0       	ldi	r25, 0x0C	; 12
    fec4:	a0 e0       	ldi	r26, 0x00	; 0
    fec6:	81 83       	std	Z+1, r24	; 0x01
    fec8:	92 83       	std	Z+2, r25	; 0x02
    feca:	a3 83       	std	Z+3, r26	; 0x03
    fecc:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

    if (stat(fullpath, &st))
    fed0:	be 01       	movw	r22, r28
    fed2:	6a 5f       	subi	r22, 0xFA	; 250
    fed4:	7e 4f       	sbci	r23, 0xFE	; 254
    fed6:	c8 01       	movw	r24, r16
    fed8:	1f d8       	rcall	.-4034   	; 0xef18 <stat>
    feda:	7c 01       	movw	r14, r24
    fedc:	89 2b       	or	r24, r25
    fede:	79 f0       	breq	.+30     	; 0xfefe <ls+0xdc>
    {
        printf("ls: cannot stat [%s]\n", fullpath);
    fee0:	ed b7       	in	r30, 0x3d	; 61
    fee2:	fe b7       	in	r31, 0x3e	; 62
    fee4:	15 83       	std	Z+5, r17	; 0x05
    fee6:	04 83       	std	Z+4, r16	; 0x04
    fee8:	8e e2       	ldi	r24, 0x2E	; 46
    feea:	9c e0       	ldi	r25, 0x0C	; 12
    feec:	a0 e0       	ldi	r26, 0x00	; 0
    feee:	81 83       	std	Z+1, r24	; 0x01
    fef0:	92 83       	std	Z+2, r25	; 0x02
    fef2:	a3 83       	std	Z+3, r26	; 0x03
    fef4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        return(0);
    fef8:	e1 2c       	mov	r14, r1
    fefa:	f1 2c       	mov	r15, r1
    fefc:	8c c0       	rjmp	.+280    	; 0x10016 <__EEPROM_REGION_LENGTH__+0x16>
    }

    switch (st.st_mode & S_IFMT)
    fefe:	c2 5f       	subi	r28, 0xF2	; 242
    ff00:	de 4f       	sbci	r29, 0xFE	; 254
    ff02:	88 81       	ld	r24, Y
    ff04:	99 81       	ldd	r25, Y+1	; 0x01
    ff06:	aa 81       	ldd	r26, Y+2	; 0x02
    ff08:	bb 81       	ldd	r27, Y+3	; 0x03
    ff0a:	ce 50       	subi	r28, 0x0E	; 14
    ff0c:	d1 40       	sbci	r29, 0x01	; 1
    ff0e:	88 27       	eor	r24, r24
    ff10:	90 7f       	andi	r25, 0xF0	; 240
    ff12:	aa 27       	eor	r26, r26
    ff14:	bb 27       	eor	r27, r27
    ff16:	81 15       	cp	r24, r1
    ff18:	f0 e4       	ldi	r31, 0x40	; 64
    ff1a:	9f 07       	cpc	r25, r31
    ff1c:	a1 05       	cpc	r26, r1
    ff1e:	b1 05       	cpc	r27, r1
    ff20:	59 f0       	breq	.+22     	; 0xff38 <__DATA_REGION_LENGTH__+0x38>
    ff22:	81 15       	cp	r24, r1
    ff24:	90 48       	sbci	r25, 0x80	; 128
    ff26:	a1 05       	cpc	r26, r1
    ff28:	b1 05       	cpc	r27, r1
    ff2a:	09 f0       	breq	.+2      	; 0xff2e <__DATA_REGION_LENGTH__+0x2e>
    ff2c:	66 c0       	rjmp	.+204    	; 0xfffa <__DATA_REGION_LENGTH__+0xfa>
    {
        case S_IFREG:
            files = ls_info(fullpath,verbose);
    ff2e:	b4 01       	movw	r22, r8
    ff30:	c8 01       	movw	r24, r16
    ff32:	bc de       	rcall	.-648    	; 0xfcac <ls_info>
    ff34:	7c 01       	movw	r14, r24
            break;
    ff36:	63 c0       	rjmp	.+198    	; 0xfffe <__DATA_REGION_LENGTH__+0xfe>
        case S_IFDIR:
            dirp = opendir(fullpath);
    ff38:	c8 01       	movw	r24, r16
    ff3a:	0e 94 5c 76 	call	0xecb8	; 0xecb8 <opendir>
    ff3e:	5c 01       	movw	r10, r24
            if(!dirp)
    ff40:	89 2b       	or	r24, r25
    ff42:	81 f0       	breq	.+32     	; 0xff64 <__DATA_REGION_LENGTH__+0x64>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
    ff44:	e1 2c       	mov	r14, r1
    ff46:	f1 2c       	mov	r15, r1
                    strcat(fullpath,"/");
                }
                strcat(fullpath,de->d_name);
                files +=ls_info(fullpath,verbose);
// restore path
                fullpath[len] = 0;
    ff48:	c8 01       	movw	r24, r16
    ff4a:	82 0d       	add	r24, r2
    ff4c:	93 1d       	adc	r25, r3
    ff4e:	ca 5c       	subi	r28, 0xCA	; 202
    ff50:	de 4f       	sbci	r29, 0xFE	; 254
    ff52:	99 83       	std	Y+1, r25	; 0x01
    ff54:	88 83       	st	Y, r24
    ff56:	c6 53       	subi	r28, 0x36	; 54
    ff58:	d1 40       	sbci	r29, 0x01	; 1
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
    ff5a:	8b ef       	ldi	r24, 0xFB	; 251
    ff5c:	9b e0       	ldi	r25, 0x0B	; 11
    ff5e:	2c 01       	movw	r4, r24
    ff60:	61 2c       	mov	r6, r1
    ff62:	24 c0       	rjmp	.+72     	; 0xffac <__DATA_REGION_LENGTH__+0xac>
            break;
        case S_IFDIR:
            dirp = opendir(fullpath);
            if(!dirp)
            {
                printf("opendir failed\n");
    ff64:	8e e1       	ldi	r24, 0x1E	; 30
    ff66:	9c e0       	ldi	r25, 0x0C	; 12
    ff68:	a0 e0       	ldi	r26, 0x00	; 0
    ff6a:	ed b7       	in	r30, 0x3d	; 61
    ff6c:	fe b7       	in	r31, 0x3e	; 62
    ff6e:	81 83       	std	Z+1, r24	; 0x01
    ff70:	92 83       	std	Z+2, r25	; 0x02
    ff72:	a3 83       	std	Z+3, r26	; 0x03
    ff74:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
                return(0);
    ff78:	4e c0       	rjmp	.+156    	; 0x10016 <__EEPROM_REGION_LENGTH__+0x16>
            }
            while ( (de = readdir(dirp)) )
            {
                if(de->d_name[0] == 0)
    ff7a:	f6 01       	movw	r30, r12
    ff7c:	80 81       	ld	r24, Z
    ff7e:	88 23       	and	r24, r24
    ff80:	d9 f0       	breq	.+54     	; 0xffb8 <__DATA_REGION_LENGTH__+0xb8>
                    break;
// FIXME neeed beetter string length tests here
                len2 = strlen(de->d_name);
    ff82:	f6 01       	movw	r30, r12
    ff84:	01 90       	ld	r0, Z+
    ff86:	00 20       	and	r0, r0
    ff88:	e9 f7       	brne	.-6      	; 0xff84 <__DATA_REGION_LENGTH__+0x84>
    ff8a:	31 97       	sbiw	r30, 0x01	; 1
    ff8c:	ec 19       	sub	r30, r12
    ff8e:	fd 09       	sbc	r31, r13
                if(len + len2 >= MAX_NAME_LEN)
    ff90:	e2 0d       	add	r30, r2
    ff92:	f3 1d       	adc	r31, r3
    ff94:	ef 3f       	cpi	r30, 0xFF	; 255
    ff96:	f1 05       	cpc	r31, r1
    ff98:	9c f0       	brlt	.+38     	; 0xffc0 <__DATA_REGION_LENGTH__+0xc0>
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
    ff9a:	ed b7       	in	r30, 0x3d	; 61
    ff9c:	fe b7       	in	r31, 0x3e	; 62
    ff9e:	d5 82       	std	Z+5, r13	; 0x05
    ffa0:	c4 82       	std	Z+4, r12	; 0x04
    ffa2:	41 82       	std	Z+1, r4	; 0x01
    ffa4:	52 82       	std	Z+2, r5	; 0x02
    ffa6:	63 82       	std	Z+3, r6	; 0x03
    ffa8:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            if(!dirp)
            {
                printf("opendir failed\n");
                return(0);
            }
            while ( (de = readdir(dirp)) )
    ffac:	c5 01       	movw	r24, r10
    ffae:	0e 94 7a 76 	call	0xecf4	; 0xecf4 <readdir>
    ffb2:	6c 01       	movw	r12, r24
    ffb4:	89 2b       	or	r24, r25
    ffb6:	09 f7       	brne	.-62     	; 0xff7a <__DATA_REGION_LENGTH__+0x7a>
#ifdef ESP8266
                optimistic_yield(1000);
                wdt_reset();
#endif
            }
            closedir(dirp);
    ffb8:	c5 01       	movw	r24, r10
    ffba:	0e 94 41 76 	call	0xec82	; 0xec82 <closedir>
            break;
    ffbe:	1f c0       	rjmp	.+62     	; 0xfffe <__DATA_REGION_LENGTH__+0xfe>
                if(len + len2 >= MAX_NAME_LEN)
                {
                    printf("name:[%s] too long with full path\n",de->d_name);
                    continue;
                }
                if(!MATCH(fullpath,"/") )
    ffc0:	66 ea       	ldi	r22, 0xA6	; 166
    ffc2:	78 e0       	ldi	r23, 0x08	; 8
    ffc4:	c8 01       	movw	r24, r16
    ffc6:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCH>
    ffca:	89 2b       	or	r24, r25
    ffcc:	29 f4       	brne	.+10     	; 0xffd8 <__DATA_REGION_LENGTH__+0xd8>
                {
                    strcat(fullpath,"/");
    ffce:	66 ea       	ldi	r22, 0xA6	; 166
    ffd0:	78 e0       	ldi	r23, 0x08	; 8
    ffd2:	c8 01       	movw	r24, r16
    ffd4:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <strcat>
                }
                strcat(fullpath,de->d_name);
    ffd8:	b6 01       	movw	r22, r12
    ffda:	c8 01       	movw	r24, r16
    ffdc:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <strcat>
                files +=ls_info(fullpath,verbose);
    ffe0:	b4 01       	movw	r22, r8
    ffe2:	c8 01       	movw	r24, r16
    ffe4:	63 de       	rcall	.-826    	; 0xfcac <ls_info>
    ffe6:	e8 0e       	add	r14, r24
    ffe8:	f9 1e       	adc	r15, r25
// restore path
                fullpath[len] = 0;
    ffea:	ca 5c       	subi	r28, 0xCA	; 202
    ffec:	de 4f       	sbci	r29, 0xFE	; 254
    ffee:	e8 81       	ld	r30, Y
    fff0:	f9 81       	ldd	r31, Y+1	; 0x01
    fff2:	c6 53       	subi	r28, 0x36	; 54
    fff4:	d1 40       	sbci	r29, 0x01	; 1
    fff6:	10 82       	st	Z, r1
    fff8:	d9 cf       	rjmp	.-78     	; 0xffac <__DATA_REGION_LENGTH__+0xac>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
    fffa:	e1 2c       	mov	r14, r1
    fffc:	f1 2c       	mov	r15, r1
#endif
            }
            closedir(dirp);
            break;
    }
    printf("Files: %d\n", (int)files);
    fffe:	ed b7       	in	r30, 0x3d	; 61
   10000:	fe b7       	in	r31, 0x3e	; 62
   10002:	f5 82       	std	Z+5, r15	; 0x05
   10004:	e4 82       	std	Z+4, r14	; 0x04
   10006:	80 ef       	ldi	r24, 0xF0	; 240
   10008:	9b e0       	ldi	r25, 0x0B	; 11
   1000a:	a0 e0       	ldi	r26, 0x00	; 0
   1000c:	81 83       	std	Z+1, r24	; 0x01
   1000e:	92 83       	std	Z+2, r25	; 0x02
   10010:	a3 83       	std	Z+3, r26	; 0x03
   10012:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    return(files);
}
   10016:	c7 01       	movw	r24, r14
   10018:	c9 5c       	subi	r28, 0xC9	; 201
   1001a:	de 4f       	sbci	r29, 0xFE	; 254
   1001c:	0f b6       	in	r0, 0x3f	; 63
   1001e:	f8 94       	cli
   10020:	de bf       	out	0x3e, r29	; 62
   10022:	0f be       	out	0x3f, r0	; 63
   10024:	cd bf       	out	0x3d, r28	; 61
   10026:	df 91       	pop	r29
   10028:	cf 91       	pop	r28
   1002a:	1f 91       	pop	r17
   1002c:	0f 91       	pop	r16
   1002e:	ff 90       	pop	r15
   10030:	ef 90       	pop	r14
   10032:	df 90       	pop	r13
   10034:	cf 90       	pop	r12
   10036:	bf 90       	pop	r11
   10038:	af 90       	pop	r10
   1003a:	9f 90       	pop	r9
   1003c:	8f 90       	pop	r8
   1003e:	6f 90       	pop	r6
   10040:	5f 90       	pop	r5
   10042:	4f 90       	pop	r4
   10044:	3f 90       	pop	r3
   10046:	2f 90       	pop	r2
   10048:	08 95       	ret

0001004a <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   1004a:	a7 e0       	ldi	r26, 0x07	; 7
   1004c:	b1 e0       	ldi	r27, 0x01	; 1
   1004e:	eb e2       	ldi	r30, 0x2B	; 43
   10050:	f0 e8       	ldi	r31, 0x80	; 128
   10052:	0c 94 da e0 	jmp	0x1c1b4	; 0x1c1b4 <__prologue_saves__+0x4>
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   10056:	fb 01       	movw	r30, r22
   10058:	c0 80       	ld	r12, Z
   1005a:	d1 80       	ldd	r13, Z+1	; 0x01

    if(!ptr)
   1005c:	c1 14       	cp	r12, r1
   1005e:	d1 04       	cpc	r13, r1
   10060:	09 f4       	brne	.+2      	; 0x10064 <posix_tests+0x1a>
   10062:	9a c1       	rjmp	.+820    	; 0x10398 <posix_tests+0x34e>
   10064:	2b 01       	movw	r4, r22
   10066:	8c 01       	movw	r16, r24
        return(0);

    if( MATCH(ptr,"posix") )
   10068:	6e eb       	ldi	r22, 0xBE	; 190
   1006a:	7b e0       	ldi	r23, 0x0B	; 11
   1006c:	c6 01       	movw	r24, r12
   1006e:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCH>
   10072:	89 2b       	or	r24, r25
   10074:	a9 f0       	breq	.+42     	; 0x100a0 <posix_tests+0x56>
    {
        ptr = argv[ind++];
   10076:	f2 01       	movw	r30, r4
   10078:	c2 80       	ldd	r12, Z+2	; 0x02
   1007a:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   1007c:	c1 14       	cp	r12, r1
   1007e:	d1 04       	cpc	r13, r1
   10080:	21 f4       	brne	.+8      	; 0x1008a <posix_tests+0x40>
        {
            posix_help(1);
   10082:	81 e0       	ldi	r24, 0x01	; 1
   10084:	90 e0       	ldi	r25, 0x00	; 0
   10086:	6f dc       	rcall	.-1826   	; 0xf966 <posix_help>
   10088:	28 c1       	rjmp	.+592    	; 0x102da <posix_tests+0x290>
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   1008a:	6d e9       	ldi	r22, 0x9D	; 157
   1008c:	76 e1       	ldi	r23, 0x16	; 22
   1008e:	c6 01       	movw	r24, r12
   10090:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCH>
   10094:	89 2b       	or	r24, r25
   10096:	a9 f7       	brne	.-22     	; 0x10082 <posix_tests+0x38>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   10098:	22 e0       	ldi	r18, 0x02	; 2
   1009a:	62 2e       	mov	r6, r18
   1009c:	71 2c       	mov	r7, r1
   1009e:	03 c0       	rjmp	.+6      	; 0x100a6 <posix_tests+0x5c>
{
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   100a0:	66 24       	eor	r6, r6
   100a2:	63 94       	inc	r6
   100a4:	71 2c       	mov	r7, r1
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   100a6:	73 01       	movw	r14, r6
   100a8:	ff ef       	ldi	r31, 0xFF	; 255
   100aa:	ef 1a       	sub	r14, r31
   100ac:	ff 0a       	sbc	r15, r31
   100ae:	98 01       	movw	r18, r16
   100b0:	a7 01       	movw	r20, r14
   100b2:	64 ec       	ldi	r22, 0xC4	; 196
   100b4:	7b e0       	ldi	r23, 0x0B	; 11
   100b6:	c6 01       	movw	r24, r12
   100b8:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <MATCHARGS>
   100bc:	89 2b       	or	r24, r25
   100be:	a1 f1       	breq	.+104    	; 0x10128 <posix_tests+0xde>
   100c0:	73 01       	movw	r14, r6
   100c2:	ee 0c       	add	r14, r14
   100c4:	ff 1c       	adc	r15, r15
   100c6:	e4 0c       	add	r14, r4
   100c8:	f5 1c       	adc	r15, r5
   100ca:	57 01       	movw	r10, r14
   100cc:	47 01       	movw	r8, r14
   100ce:	63 01       	movw	r12, r6
   100d0:	41 2c       	mov	r4, r1
   100d2:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   100d4:	c0 16       	cp	r12, r16
   100d6:	d1 06       	cpc	r13, r17
   100d8:	1c f5       	brge	.+70     	; 0x10120 <posix_tests+0xd6>
        {
            if(MATCH(argv[i],"-p"))
   100da:	68 ec       	ldi	r22, 0xC8	; 200
   100dc:	7b e0       	ldi	r23, 0x0B	; 11
   100de:	f4 01       	movw	r30, r8
   100e0:	81 91       	ld	r24, Z+
   100e2:	91 91       	ld	r25, Z+
   100e4:	4f 01       	movw	r8, r30
   100e6:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCH>
   100ea:	89 2b       	or	r24, r25
   100ec:	19 f0       	breq	.+6      	; 0x100f4 <posix_tests+0xaa>
                page = 1;
   100ee:	44 24       	eor	r4, r4
   100f0:	43 94       	inc	r4
   100f2:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   100f4:	ff ef       	ldi	r31, 0xFF	; 255
   100f6:	cf 1a       	sub	r12, r31
   100f8:	df 0a       	sbc	r13, r31
   100fa:	ec cf       	rjmp	.-40     	; 0x100d4 <posix_tests+0x8a>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   100fc:	68 ec       	ldi	r22, 0xC8	; 200
   100fe:	7b e0       	ldi	r23, 0x0B	; 11
   10100:	f5 01       	movw	r30, r10
   10102:	81 91       	ld	r24, Z+
   10104:	91 91       	ld	r25, Z+
   10106:	5f 01       	movw	r10, r30
   10108:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCH>
   1010c:	89 2b       	or	r24, r25
   1010e:	29 f4       	brne	.+10     	; 0x1011a <posix_tests+0xd0>
                cat(argv[ind], page);
   10110:	b2 01       	movw	r22, r4
   10112:	f7 01       	movw	r30, r14
   10114:	80 81       	ld	r24, Z
   10116:	91 81       	ldd	r25, Z+1	; 0x01
   10118:	5d dd       	rcall	.-1350   	; 0xfbd4 <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   1011a:	ff ef       	ldi	r31, 0xFF	; 255
   1011c:	6f 1a       	sub	r6, r31
   1011e:	7f 0a       	sbc	r7, r31
   10120:	60 16       	cp	r6, r16
   10122:	71 06       	cpc	r7, r17
   10124:	5c f3       	brlt	.-42     	; 0x100fc <posix_tests+0xb2>
   10126:	d9 c0       	rjmp	.+434    	; 0x102da <posix_tests+0x290>
        chmod( argv[ind],strtol(argv[ind+1],NULL,8));
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   10128:	53 01       	movw	r10, r6
   1012a:	82 e0       	ldi	r24, 0x02	; 2
   1012c:	a8 0e       	add	r10, r24
   1012e:	b1 1c       	adc	r11, r1
   10130:	98 01       	movw	r18, r16
   10132:	a5 01       	movw	r20, r10
   10134:	6b ec       	ldi	r22, 0xCB	; 203
   10136:	7b e0       	ldi	r23, 0x0B	; 11
   10138:	c6 01       	movw	r24, r12
   1013a:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <MATCHARGS>
   1013e:	89 2b       	or	r24, r25
   10140:	59 f0       	breq	.+22     	; 0x10158 <posix_tests+0x10e>
    {
        copy(argv[ind],argv[ind+1]);
   10142:	f3 01       	movw	r30, r6
   10144:	ee 0f       	add	r30, r30
   10146:	ff 1f       	adc	r31, r31
   10148:	e4 0d       	add	r30, r4
   1014a:	f5 1d       	adc	r31, r5
   1014c:	62 81       	ldd	r22, Z+2	; 0x02
   1014e:	73 81       	ldd	r23, Z+3	; 0x03
   10150:	80 81       	ld	r24, Z
   10152:	91 81       	ldd	r25, Z+1	; 0x01
   10154:	29 dc       	rcall	.-1966   	; 0xf9a8 <copy>
   10156:	c1 c0       	rjmp	.+386    	; 0x102da <posix_tests+0x290>
        return(1);
    }

    if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   10158:	98 01       	movw	r18, r16
   1015a:	a7 01       	movw	r20, r14
   1015c:	60 ed       	ldi	r22, 0xD0	; 208
   1015e:	7b e0       	ldi	r23, 0x0B	; 11
   10160:	c6 01       	movw	r24, r12
   10162:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <MATCHARGS>
   10166:	89 2b       	or	r24, r25
   10168:	b9 f0       	breq	.+46     	; 0x10198 <posix_tests+0x14e>
    {
        if ( chdir(argv[ind]) != 0)
   1016a:	73 01       	movw	r14, r6
   1016c:	ee 0c       	add	r14, r14
   1016e:	ff 1c       	adc	r15, r15
   10170:	e4 0c       	add	r14, r4
   10172:	f5 1c       	adc	r15, r5
   10174:	f7 01       	movw	r30, r14
   10176:	80 81       	ld	r24, Z
   10178:	91 81       	ldd	r25, Z+1	; 0x01
   1017a:	0e 94 66 75 	call	0xeacc	; 0xeacc <chdir>
   1017e:	89 2b       	or	r24, r25
   10180:	09 f4       	brne	.+2      	; 0x10184 <posix_tests+0x13a>
   10182:	ab c0       	rjmp	.+342    	; 0x102da <posix_tests+0x290>
            printf("chdir %s failed\n", argv[ind]);
   10184:	f7 01       	movw	r30, r14
   10186:	80 81       	ld	r24, Z
   10188:	91 81       	ldd	r25, Z+1	; 0x01
   1018a:	ed b7       	in	r30, 0x3d	; 61
   1018c:	fe b7       	in	r31, 0x3e	; 62
   1018e:	95 83       	std	Z+5, r25	; 0x05
   10190:	84 83       	std	Z+4, r24	; 0x04
   10192:	83 e8       	ldi	r24, 0x83	; 131
   10194:	9d e0       	ldi	r25, 0x0D	; 13
   10196:	9b c0       	rjmp	.+310    	; 0x102ce <posix_tests+0x284>
        logfile(argv[ind],argv[ind+1]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
   10198:	98 01       	movw	r18, r16
   1019a:	a3 01       	movw	r20, r6
   1019c:	68 ed       	ldi	r22, 0xD8	; 216
   1019e:	78 e0       	ldi	r23, 0x08	; 8
   101a0:	c6 01       	movw	r24, r12
   101a2:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <MATCHARGS>
   101a6:	4c 01       	movw	r8, r24
   101a8:	89 2b       	or	r24, r25
   101aa:	69 f1       	breq	.+90     	; 0x10206 <posix_tests+0x1bc>
   101ac:	73 01       	movw	r14, r6
   101ae:	ee 0c       	add	r14, r14
   101b0:	ff 1c       	adc	r15, r15
   101b2:	e4 0c       	add	r14, r4
   101b4:	f5 1c       	adc	r15, r5
   101b6:	c1 2c       	mov	r12, r1
   101b8:	d1 2c       	mov	r13, r1
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   101ba:	c6 01       	movw	r24, r12
   101bc:	86 0d       	add	r24, r6
   101be:	97 1d       	adc	r25, r7
   101c0:	80 17       	cp	r24, r16
   101c2:	91 07       	cpc	r25, r17
   101c4:	b4 f4       	brge	.+44     	; 0x101f2 <posix_tests+0x1a8>
        {
            if(!MATCH(argv[i],"-l"))
   101c6:	63 ed       	ldi	r22, 0xD3	; 211
   101c8:	7b e0       	ldi	r23, 0x0B	; 11
   101ca:	f7 01       	movw	r30, r14
   101cc:	80 81       	ld	r24, Z
   101ce:	91 81       	ldd	r25, Z+1	; 0x01
   101d0:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCH>
   101d4:	89 2b       	or	r24, r25
   101d6:	31 f4       	brne	.+12     	; 0x101e4 <posix_tests+0x19a>
                ls(argv[i],1);
   101d8:	61 e0       	ldi	r22, 0x01	; 1
   101da:	70 e0       	ldi	r23, 0x00	; 0
   101dc:	f7 01       	movw	r30, r14
   101de:	80 81       	ld	r24, Z
   101e0:	91 81       	ldd	r25, Z+1	; 0x01
   101e2:	1f de       	rcall	.-962    	; 0xfe22 <ls>
            ++args;
   101e4:	ff ef       	ldi	r31, 0xFF	; 255
   101e6:	cf 1a       	sub	r12, r31
   101e8:	df 0a       	sbc	r13, r31
   101ea:	82 e0       	ldi	r24, 0x02	; 2
   101ec:	e8 0e       	add	r14, r24
   101ee:	f1 1c       	adc	r15, r1
   101f0:	e4 cf       	rjmp	.-56     	; 0x101ba <posix_tests+0x170>
        }
        if(!args)
   101f2:	c1 14       	cp	r12, r1
   101f4:	d1 04       	cpc	r13, r1
   101f6:	09 f0       	breq	.+2      	; 0x101fa <posix_tests+0x1b0>
   101f8:	70 c0       	rjmp	.+224    	; 0x102da <posix_tests+0x290>
        {
            ls("",1);
   101fa:	61 e0       	ldi	r22, 0x01	; 1
   101fc:	70 e0       	ldi	r23, 0x00	; 0
   101fe:	8d e2       	ldi	r24, 0x2D	; 45
   10200:	9c e0       	ldi	r25, 0x0C	; 12
   10202:	0f de       	rcall	.-994    	; 0xfe22 <ls>
   10204:	6a c0       	rjmp	.+212    	; 0x102da <posix_tests+0x290>
        mkfs(argv[ind++]);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   10206:	98 01       	movw	r18, r16
   10208:	a7 01       	movw	r20, r14
   1020a:	66 ed       	ldi	r22, 0xD6	; 214
   1020c:	7b e0       	ldi	r23, 0x0B	; 11
   1020e:	c6 01       	movw	r24, r12
   10210:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <MATCHARGS>
   10214:	89 2b       	or	r24, r25
   10216:	71 f1       	breq	.+92     	; 0x10274 <posix_tests+0x22a>
    {
        int mode = 0777;
        if((ind+2) <= argc)
   10218:	e0 16       	cp	r14, r16
   1021a:	f1 06       	cpc	r15, r17
   1021c:	7c f4       	brge	.+30     	; 0x1023c <posix_tests+0x1f2>
        {
            mode = strtol(argv[ind+1],NULL,8);
   1021e:	ee 0c       	add	r14, r14
   10220:	ff 1c       	adc	r15, r15
   10222:	f2 01       	movw	r30, r4
   10224:	ee 0d       	add	r30, r14
   10226:	ff 1d       	adc	r31, r15
   10228:	48 e0       	ldi	r20, 0x08	; 8
   1022a:	50 e0       	ldi	r21, 0x00	; 0
   1022c:	60 e0       	ldi	r22, 0x00	; 0
   1022e:	70 e0       	ldi	r23, 0x00	; 0
   10230:	80 81       	ld	r24, Z
   10232:	91 81       	ldd	r25, Z+1	; 0x01
   10234:	0e 94 7e 44 	call	0x88fc	; 0x88fc <strtol>
   10238:	ab 01       	movw	r20, r22
   1023a:	02 c0       	rjmp	.+4      	; 0x10240 <posix_tests+0x1f6>
    }
#endif

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   1023c:	4f ef       	ldi	r20, 0xFF	; 255
   1023e:	51 e0       	ldi	r21, 0x01	; 1
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        if ( mkdir(argv[ind],mode) != 0 )
   10240:	73 01       	movw	r14, r6
   10242:	ee 0c       	add	r14, r14
   10244:	ff 1c       	adc	r15, r15
   10246:	e4 0c       	add	r14, r4
   10248:	f5 1c       	adc	r15, r5
   1024a:	05 2e       	mov	r0, r21
   1024c:	00 0c       	add	r0, r0
   1024e:	66 0b       	sbc	r22, r22
   10250:	77 0b       	sbc	r23, r23
   10252:	f7 01       	movw	r30, r14
   10254:	80 81       	ld	r24, Z
   10256:	91 81       	ldd	r25, Z+1	; 0x01
   10258:	0e 94 d3 75 	call	0xeba6	; 0xeba6 <mkdir>
   1025c:	89 2b       	or	r24, r25
   1025e:	e9 f1       	breq	.+122    	; 0x102da <posix_tests+0x290>
        {
            printf("mkdir %s failed\n", argv[ind]);
   10260:	f7 01       	movw	r30, r14
   10262:	80 81       	ld	r24, Z
   10264:	91 81       	ldd	r25, Z+1	; 0x01
   10266:	ed b7       	in	r30, 0x3d	; 61
   10268:	fe b7       	in	r31, 0x3e	; 62
   1026a:	95 83       	std	Z+5, r25	; 0x05
   1026c:	84 83       	std	Z+4, r24	; 0x04
   1026e:	82 e7       	ldi	r24, 0x72	; 114
   10270:	9d e0       	ldi	r25, 0x0D	; 13
   10272:	b4 c0       	rjmp	.+360    	; 0x103dc <posix_tests+0x392>
            return(0);
        }
        return(1);
    }

    if (MATCHARGS(ptr,"page", (ind + 1), argc))
   10274:	98 01       	movw	r18, r16
   10276:	a7 01       	movw	r20, r14
   10278:	6c ed       	ldi	r22, 0xDC	; 220
   1027a:	7b e0       	ldi	r23, 0x0B	; 11
   1027c:	c6 01       	movw	r24, r12
   1027e:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <MATCHARGS>
   10282:	89 2b       	or	r24, r25
   10284:	71 f0       	breq	.+28     	; 0x102a2 <posix_tests+0x258>
    {
        setpage(atoi(argv[ind]));
   10286:	66 0c       	add	r6, r6
   10288:	77 1c       	adc	r7, r7
   1028a:	f2 01       	movw	r30, r4
   1028c:	e6 0d       	add	r30, r6
   1028e:	f7 1d       	adc	r31, r7
   10290:	80 81       	ld	r24, Z
   10292:	91 81       	ldd	r25, Z+1	; 0x01
   10294:	0e 94 dc 44 	call	0x89b8	; 0x89b8 <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   10298:	90 93 81 01 	sts	0x0181, r25	; 0x800181 <_pagesize+0x1>
   1029c:	80 93 80 01 	sts	0x0180, r24	; 0x800180 <_pagesize>
   102a0:	1c c0       	rjmp	.+56     	; 0x102da <posix_tests+0x290>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   102a2:	98 01       	movw	r18, r16
   102a4:	a3 01       	movw	r20, r6
   102a6:	61 ee       	ldi	r22, 0xE1	; 225
   102a8:	7b e0       	ldi	r23, 0x0B	; 11
   102aa:	c6 01       	movw	r24, r12
   102ac:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <MATCHARGS>
   102b0:	4c 01       	movw	r8, r24
   102b2:	89 2b       	or	r24, r25
   102b4:	b1 f0       	breq	.+44     	; 0x102e2 <posix_tests+0x298>
    {
        char path[256];
        printf("%s\n", getcwd(path, sizeof(path)-2));
   102b6:	6e ef       	ldi	r22, 0xFE	; 254
   102b8:	70 e0       	ldi	r23, 0x00	; 0
   102ba:	ce 01       	movw	r24, r28
   102bc:	08 96       	adiw	r24, 0x08	; 8
   102be:	0e 94 ae 75 	call	0xeb5c	; 0xeb5c <getcwd>
   102c2:	ed b7       	in	r30, 0x3d	; 61
   102c4:	fe b7       	in	r31, 0x3e	; 62
   102c6:	95 83       	std	Z+5, r25	; 0x05
   102c8:	84 83       	std	Z+4, r24	; 0x04
   102ca:	8e e6       	ldi	r24, 0x6E	; 110
   102cc:	9d e0       	ldi	r25, 0x0D	; 13
   102ce:	a0 e0       	ldi	r26, 0x00	; 0
   102d0:	81 83       	std	Z+1, r24	; 0x01
   102d2:	92 83       	std	Z+2, r25	; 0x02
   102d4:	a3 83       	std	Z+3, r26	; 0x03
   102d6:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        return(1);
   102da:	88 24       	eor	r8, r8
   102dc:	83 94       	inc	r8
   102de:	91 2c       	mov	r9, r1
   102e0:	83 c0       	rjmp	.+262    	; 0x103e8 <posix_tests+0x39e>
    }

    if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   102e2:	98 01       	movw	r18, r16
   102e4:	a5 01       	movw	r20, r10
   102e6:	65 ee       	ldi	r22, 0xE5	; 229
   102e8:	7b e0       	ldi	r23, 0x0B	; 11
   102ea:	c6 01       	movw	r24, r12
   102ec:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <MATCHARGS>
   102f0:	89 2b       	or	r24, r25
   102f2:	61 f1       	breq	.+88     	; 0x1034c <posix_tests+0x302>
    {
        if( rename(argv[ind],argv[ind+1]) != 0)
   102f4:	66 0c       	add	r6, r6
   102f6:	77 1c       	adc	r7, r7
   102f8:	82 01       	movw	r16, r4
   102fa:	06 0d       	add	r16, r6
   102fc:	17 1d       	adc	r17, r7
   102fe:	f2 e0       	ldi	r31, 0x02	; 2
   10300:	6f 0e       	add	r6, r31
   10302:	71 1c       	adc	r7, r1
   10304:	72 01       	movw	r14, r4
   10306:	e6 0c       	add	r14, r6
   10308:	f7 1c       	adc	r15, r7
   1030a:	f7 01       	movw	r30, r14
   1030c:	60 81       	ld	r22, Z
   1030e:	71 81       	ldd	r23, Z+1	; 0x01
   10310:	f8 01       	movw	r30, r16
   10312:	80 81       	ld	r24, Z
   10314:	91 81       	ldd	r25, Z+1	; 0x01
   10316:	0e 94 01 76 	call	0xec02	; 0xec02 <rename>
   1031a:	89 2b       	or	r24, r25
   1031c:	f1 f2       	breq	.-68     	; 0x102da <posix_tests+0x290>
        {
            printf("rename %s to %s\n", argv[ind], argv[ind+1]);
   1031e:	f7 01       	movw	r30, r14
   10320:	80 81       	ld	r24, Z
   10322:	91 81       	ldd	r25, Z+1	; 0x01
   10324:	ed b7       	in	r30, 0x3d	; 61
   10326:	fe b7       	in	r31, 0x3e	; 62
   10328:	97 83       	std	Z+7, r25	; 0x07
   1032a:	86 83       	std	Z+6, r24	; 0x06
   1032c:	f8 01       	movw	r30, r16
   1032e:	80 81       	ld	r24, Z
   10330:	91 81       	ldd	r25, Z+1	; 0x01
   10332:	ed b7       	in	r30, 0x3d	; 61
   10334:	fe b7       	in	r31, 0x3e	; 62
   10336:	95 83       	std	Z+5, r25	; 0x05
   10338:	84 83       	std	Z+4, r24	; 0x04
   1033a:	8d e5       	ldi	r24, 0x5D	; 93
   1033c:	9d e0       	ldi	r25, 0x0D	; 13
   1033e:	a0 e0       	ldi	r26, 0x00	; 0
   10340:	81 83       	std	Z+1, r24	; 0x01
   10342:	92 83       	std	Z+2, r25	; 0x02
   10344:	a3 83       	std	Z+3, r26	; 0x03
   10346:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            return(0);
   1034a:	4e c0       	rjmp	.+156    	; 0x103e8 <posix_tests+0x39e>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   1034c:	98 01       	movw	r18, r16
   1034e:	a7 01       	movw	r20, r14
   10350:	6c ee       	ldi	r22, 0xEC	; 236
   10352:	7b e0       	ldi	r23, 0x0B	; 11
   10354:	c6 01       	movw	r24, r12
   10356:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <MATCHARGS>
   1035a:	4c 01       	movw	r8, r24
   1035c:	89 2b       	or	r24, r25
   1035e:	f9 f0       	breq	.+62     	; 0x1039e <posix_tests+0x354>
    {
        if ( unlink(argv[ind]) != 0)
   10360:	73 01       	movw	r14, r6
   10362:	ee 0c       	add	r14, r14
   10364:	ff 1c       	adc	r15, r15
   10366:	e4 0c       	add	r14, r4
   10368:	f5 1c       	adc	r15, r5
   1036a:	f7 01       	movw	r30, r14
   1036c:	80 81       	ld	r24, Z
   1036e:	91 81       	ldd	r25, Z+1	; 0x01
   10370:	0e 94 20 76 	call	0xec40	; 0xec40 <unlink>
   10374:	89 2b       	or	r24, r25
   10376:	09 f4       	brne	.+2      	; 0x1037a <posix_tests+0x330>
   10378:	b0 cf       	rjmp	.-160    	; 0x102da <posix_tests+0x290>
        {
            printf("rm %s failed\n", argv[ind]);
   1037a:	f7 01       	movw	r30, r14
   1037c:	80 81       	ld	r24, Z
   1037e:	91 81       	ldd	r25, Z+1	; 0x01
   10380:	ed b7       	in	r30, 0x3d	; 61
   10382:	fe b7       	in	r31, 0x3e	; 62
   10384:	95 83       	std	Z+5, r25	; 0x05
   10386:	84 83       	std	Z+4, r24	; 0x04
   10388:	8f e4       	ldi	r24, 0x4F	; 79
   1038a:	9d e0       	ldi	r25, 0x0D	; 13
   1038c:	a0 e0       	ldi	r26, 0x00	; 0
   1038e:	81 83       	std	Z+1, r24	; 0x01
   10390:	92 83       	std	Z+2, r25	; 0x02
   10392:	a3 83       	std	Z+3, r26	; 0x03
   10394:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            return(0);
   10398:	81 2c       	mov	r8, r1
   1039a:	91 2c       	mov	r9, r1
   1039c:	25 c0       	rjmp	.+74     	; 0x103e8 <posix_tests+0x39e>
        dump_stat(&p);
        return(1);
    }
#endif

    if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   1039e:	98 01       	movw	r18, r16
   103a0:	a7 01       	movw	r20, r14
   103a2:	6f ee       	ldi	r22, 0xEF	; 239
   103a4:	7b e0       	ldi	r23, 0x0B	; 11
   103a6:	c6 01       	movw	r24, r12
   103a8:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <MATCHARGS>
   103ac:	89 2b       	or	r24, r25
   103ae:	a1 f3       	breq	.-24     	; 0x10398 <posix_tests+0x34e>
    {
        if ( rmdir(argv[ind]) != 0)
   103b0:	73 01       	movw	r14, r6
   103b2:	ee 0c       	add	r14, r14
   103b4:	ff 1c       	adc	r15, r15
   103b6:	e4 0c       	add	r14, r4
   103b8:	f5 1c       	adc	r15, r5
   103ba:	f7 01       	movw	r30, r14
   103bc:	80 81       	ld	r24, Z
   103be:	91 81       	ldd	r25, Z+1	; 0x01
   103c0:	0e 94 3f 76 	call	0xec7e	; 0xec7e <rmdir>
   103c4:	89 2b       	or	r24, r25
   103c6:	09 f4       	brne	.+2      	; 0x103ca <posix_tests+0x380>
   103c8:	88 cf       	rjmp	.-240    	; 0x102da <posix_tests+0x290>
        {
            printf("rmdir %s failed\n", argv[ind]);
   103ca:	f7 01       	movw	r30, r14
   103cc:	80 81       	ld	r24, Z
   103ce:	91 81       	ldd	r25, Z+1	; 0x01
   103d0:	ed b7       	in	r30, 0x3d	; 61
   103d2:	fe b7       	in	r31, 0x3e	; 62
   103d4:	95 83       	std	Z+5, r25	; 0x05
   103d6:	84 83       	std	Z+4, r24	; 0x04
   103d8:	8e e3       	ldi	r24, 0x3E	; 62
   103da:	9d e0       	ldi	r25, 0x0D	; 13
   103dc:	a0 e0       	ldi	r26, 0x00	; 0
   103de:	81 83       	std	Z+1, r24	; 0x01
   103e0:	92 83       	std	Z+2, r25	; 0x02
   103e2:	a3 83       	std	Z+3, r26	; 0x03
   103e4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        return(1);
    }
#endif

    return(0);
}
   103e8:	c4 01       	movw	r24, r8
   103ea:	c9 5f       	subi	r28, 0xF9	; 249
   103ec:	de 4f       	sbci	r29, 0xFE	; 254
   103ee:	e0 e1       	ldi	r30, 0x10	; 16
   103f0:	0c 94 f6 e0 	jmp	0x1c1ec	; 0x1c1ec <__epilogue_restores__+0x4>

000103f4 <gpib_timer_init>:
///
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
   103f4:	00 d0       	rcall	.+0      	; 0x103f6 <gpib_timer_init+0x2>
   103f6:	1f 92       	push	r1
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   103f8:	61 e0       	ldi	r22, 0x01	; 1
   103fa:	70 e0       	ldi	r23, 0x00	; 0
   103fc:	86 eb       	ldi	r24, 0xB6	; 182
   103fe:	93 e8       	ldi	r25, 0x83	; 131
   10400:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <set_timers>
   10404:	01 96       	adiw	r24, 0x01	; 1
   10406:	51 f4       	brne	.+20     	; 0x1041c <gpib_timer_init+0x28>
        printf("GPIB Clock task init failed\n");
   10408:	80 ec       	ldi	r24, 0xC0	; 192
   1040a:	9e e0       	ldi	r25, 0x0E	; 14
   1040c:	a0 e0       	ldi	r26, 0x00	; 0
   1040e:	ed b7       	in	r30, 0x3d	; 61
   10410:	fe b7       	in	r31, 0x3e	; 62
   10412:	81 83       	std	Z+1, r24	; 0x01
   10414:	92 83       	std	Z+2, r25	; 0x02
   10416:	a3 83       	std	Z+3, r26	; 0x03
   10418:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

    gpib_timer_reset();
   1041c:	95 d1       	rcall	.+810    	; 0x10748 <gpib_timer_reset>
}
   1041e:	0f 90       	pop	r0
   10420:	0f 90       	pop	r0
   10422:	0f 90       	pop	r0
   10424:	08 95       	ret

00010426 <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   10426:	28 2f       	mov	r18, r24
   10428:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   1042a:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   1042c:	88 0f       	add	r24, r24
        if(mask & 1)
   1042e:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   10430:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   10432:	26 95       	lsr	r18
   10434:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   10436:	d1 f7       	brne	.-12     	; 0x1042c <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   10438:	08 95       	ret

0001043a <ppr_set>:
void ppr_set(uint8_t mask)
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    _ppr_reg = reverse_8bits(mask);
   1043a:	f5 df       	rcall	.-22     	; 0x10426 <reverse_8bits>
   1043c:	80 93 79 19 	sts	0x1979, r24	; 0x801979 <_ppr_reg>
#else
    _ppr_reg = mask;
#endif
    SPI0_TXRX_Byte(_ppr_reg);
   10440:	0e 94 4b 28 	call	0x5096	; 0x5096 <SPI0_TXRX_Byte>

    GPIB_IO_HI(PPE);
   10444:	2a 9a       	sbi	0x05, 2	; 5
   10446:	22 9a       	sbi	0x04, 2	; 4
    GPIB_IO_LOW(PPE);
   10448:	2a 98       	cbi	0x05, 2	; 5
   1044a:	22 9a       	sbi	0x04, 2	; 4
   1044c:	08 95       	ret

0001044e <ppr_reg>:
uint8_t ppr_reg()
{
///@brief optionally reverse bit order in PPR mask
/// Used only of PPR circuit board PPR bits are not reversed in hardware
#if PPR_REVERSE_BITS == 1
    return(reverse_8bits(_ppr_reg));
   1044e:	80 91 79 19 	lds	r24, 0x1979	; 0x801979 <_ppr_reg>
   10452:	e9 cf       	rjmp	.-46     	; 0x10426 <reverse_8bits>
#else
    return(_ppr_reg);
#endif
}
   10454:	08 95       	ret

00010456 <ppr_init>:
///
/// - Hides the register access implimentation from the upper level.
/// @return  void

void ppr_init()
{
   10456:	00 d0       	rcall	.+0      	; 0x10458 <ppr_init+0x2>
   10458:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_PPR)
   1045a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1045e:	81 ff       	sbrs	r24, 1
   10460:	0a c0       	rjmp	.+20     	; 0x10476 <ppr_init+0x20>
        printf("[PPR DISABLE ALL]\n");
   10462:	8d ea       	ldi	r24, 0xAD	; 173
   10464:	9e e0       	ldi	r25, 0x0E	; 14
   10466:	a0 e0       	ldi	r26, 0x00	; 0
   10468:	ed b7       	in	r30, 0x3d	; 61
   1046a:	fe b7       	in	r31, 0x3e	; 62
   1046c:	81 83       	std	Z+1, r24	; 0x01
   1046e:	92 83       	std	Z+2, r25	; 0x02
   10470:	a3 83       	std	Z+3, r26	; 0x03
   10472:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
    ppr_set(0);
   10476:	80 e0       	ldi	r24, 0x00	; 0
   10478:	e0 df       	rcall	.-64     	; 0x1043a <ppr_set>
}
   1047a:	0f 90       	pop	r0
   1047c:	0f 90       	pop	r0
   1047e:	0f 90       	pop	r0
   10480:	08 95       	ret

00010482 <ppr_bit_set>:
/// @return  void

void ppr_bit_set(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_SET(_ppr_reg,bit);
   10482:	21 e0       	ldi	r18, 0x01	; 1
   10484:	30 e0       	ldi	r19, 0x00	; 0
   10486:	01 c0       	rjmp	.+2      	; 0x1048a <ppr_bit_set+0x8>
   10488:	22 0f       	add	r18, r18
   1048a:	8a 95       	dec	r24
   1048c:	ea f7       	brpl	.-6      	; 0x10488 <ppr_bit_set+0x6>
   1048e:	80 91 79 19 	lds	r24, 0x1979	; 0x801979 <_ppr_reg>
   10492:	82 2b       	or	r24, r18
   10494:	80 93 79 19 	sts	0x1979, r24	; 0x801979 <_ppr_reg>
    ppr_set(_ppr_reg);
   10498:	d0 cf       	rjmp	.-96     	; 0x1043a <ppr_set>
   1049a:	08 95       	ret

0001049c <ppr_bit_clr>:
/// @return  void

void ppr_bit_clr(uint8_t bit)
{
///FIXME _ppr_reg = 0;
    BIT_CLR(_ppr_reg,bit);
   1049c:	21 e0       	ldi	r18, 0x01	; 1
   1049e:	30 e0       	ldi	r19, 0x00	; 0
   104a0:	01 c0       	rjmp	.+2      	; 0x104a4 <ppr_bit_clr+0x8>
   104a2:	22 0f       	add	r18, r18
   104a4:	8a 95       	dec	r24
   104a6:	ea f7       	brpl	.-6      	; 0x104a2 <ppr_bit_clr+0x6>
   104a8:	20 95       	com	r18
   104aa:	80 91 79 19 	lds	r24, 0x1979	; 0x801979 <_ppr_reg>
   104ae:	82 23       	and	r24, r18
   104b0:	80 93 79 19 	sts	0x1979, r24	; 0x801979 <_ppr_reg>
    ppr_set(_ppr_reg);
   104b4:	c2 cf       	rjmp	.-124    	; 0x1043a <ppr_set>
   104b6:	08 95       	ret

000104b8 <dbf_open>:
/// @see ff.h
///
/// @return  FRESULT f_open(fp,path, mode);

FRESULT dbf_open (FIL* fp, const TCHAR* path, BYTE mode)
{
   104b8:	0f 93       	push	r16
   104ba:	1f 93       	push	r17
   104bc:	cf 93       	push	r28
   104be:	df 93       	push	r29
   104c0:	00 d0       	rcall	.+0      	; 0x104c2 <dbf_open+0xa>
   104c2:	00 d0       	rcall	.+0      	; 0x104c4 <dbf_open+0xc>
   104c4:	1f 92       	push	r1
   104c6:	8b 01       	movw	r16, r22
    int rc;
    rc = f_open(fp,path, mode);
   104c8:	0e 94 fb 57 	call	0xaff6	; 0xaff6 <f_open>
   104cc:	ec 01       	movw	r28, r24
    if(rc)
   104ce:	89 2b       	or	r24, r25
   104d0:	79 f0       	breq	.+30     	; 0x104f0 <dbf_open+0x38>
    {
        printf("Open error:[%s] ", path);
   104d2:	ed b7       	in	r30, 0x3d	; 61
   104d4:	fe b7       	in	r31, 0x3e	; 62
   104d6:	15 83       	std	Z+5, r17	; 0x05
   104d8:	04 83       	std	Z+4, r16	; 0x04
   104da:	8c e9       	ldi	r24, 0x9C	; 156
   104dc:	9e e0       	ldi	r25, 0x0E	; 14
   104de:	a0 e0       	ldi	r26, 0x00	; 0
   104e0:	81 83       	std	Z+1, r24	; 0x01
   104e2:	92 83       	std	Z+2, r25	; 0x02
   104e4:	a3 83       	std	Z+3, r26	; 0x03
   104e6:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        put_rc(rc);
   104ea:	ce 01       	movw	r24, r28
   104ec:	0e 94 d5 6e 	call	0xddaa	; 0xddaa <put_rc>
        return (rc);
    }
    return(0);
}
   104f0:	ce 01       	movw	r24, r28
   104f2:	cd b7       	in	r28, 0x3d	; 61
   104f4:	de b7       	in	r29, 0x3e	; 62
   104f6:	25 96       	adiw	r28, 0x05	; 5
   104f8:	e4 e0       	ldi	r30, 0x04	; 4
   104fa:	0c 94 02 e1 	jmp	0x1c204	; 0x1c204 <__epilogue_restores__+0x1c>

000104fe <dbf_read>:
/// @see ff.h
///
/// @return  FRESULT f_read (FIL* fp, void* buff, UINT btr, UINT* br)

FRESULT dbf_read (FIL* fp, void* buff, UINT btr, UINT* br)
{
   104fe:	cf 93       	push	r28
   10500:	df 93       	push	r29
   10502:	00 d0       	rcall	.+0      	; 0x10504 <dbf_read+0x6>
   10504:	1f 92       	push	r1
    int rc;
    rc = f_read(fp, buff, btr, br);
   10506:	0e 94 b3 59 	call	0xb366	; 0xb366 <f_read>
   1050a:	ec 01       	movw	r28, r24
    if(rc)
   1050c:	89 2b       	or	r24, r25
   1050e:	69 f0       	breq	.+26     	; 0x1052a <dbf_read+0x2c>
    {
        printf("Read error: ");
   10510:	8f e8       	ldi	r24, 0x8F	; 143
   10512:	9e e0       	ldi	r25, 0x0E	; 14
   10514:	a0 e0       	ldi	r26, 0x00	; 0
   10516:	ed b7       	in	r30, 0x3d	; 61
   10518:	fe b7       	in	r31, 0x3e	; 62
   1051a:	81 83       	std	Z+1, r24	; 0x01
   1051c:	92 83       	std	Z+2, r25	; 0x02
   1051e:	a3 83       	std	Z+3, r26	; 0x03
   10520:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        put_rc(rc);
   10524:	ce 01       	movw	r24, r28
   10526:	0e 94 d5 6e 	call	0xddaa	; 0xddaa <put_rc>
        return (rc);
    }
    return(0);
}
   1052a:	ce 01       	movw	r24, r28
   1052c:	cd b7       	in	r28, 0x3d	; 61
   1052e:	de b7       	in	r29, 0x3e	; 62
   10530:	23 96       	adiw	r28, 0x03	; 3
   10532:	e2 e0       	ldi	r30, 0x02	; 2
   10534:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

00010538 <dbf_write>:
///
/// @see ff.h
/// @return  FRESULT f_write (FIL* fp, void* buff, UINT btw, UINT* bw)

FRESULT dbf_write (FIL* fp, const void* buff, UINT btw, UINT* bw)
{
   10538:	cf 93       	push	r28
   1053a:	df 93       	push	r29
   1053c:	00 d0       	rcall	.+0      	; 0x1053e <dbf_write+0x6>
   1053e:	1f 92       	push	r1
    int rc;
    rc = f_write(fp, buff, btw, bw);
   10540:	0e 94 fe 5a 	call	0xb5fc	; 0xb5fc <f_write>
   10544:	ec 01       	movw	r28, r24
    if(rc)
   10546:	89 2b       	or	r24, r25
   10548:	69 f0       	breq	.+26     	; 0x10564 <dbf_write+0x2c>
    {
        printf("Write error: ");
   1054a:	81 e8       	ldi	r24, 0x81	; 129
   1054c:	9e e0       	ldi	r25, 0x0E	; 14
   1054e:	a0 e0       	ldi	r26, 0x00	; 0
   10550:	ed b7       	in	r30, 0x3d	; 61
   10552:	fe b7       	in	r31, 0x3e	; 62
   10554:	81 83       	std	Z+1, r24	; 0x01
   10556:	92 83       	std	Z+2, r25	; 0x02
   10558:	a3 83       	std	Z+3, r26	; 0x03
   1055a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        put_rc(rc);
   1055e:	ce 01       	movw	r24, r28
   10560:	0e 94 d5 6e 	call	0xddaa	; 0xddaa <put_rc>
        return (rc);
    }
    return(0);
}
   10564:	ce 01       	movw	r24, r28
   10566:	cd b7       	in	r28, 0x3d	; 61
   10568:	de b7       	in	r29, 0x3e	; 62
   1056a:	23 96       	adiw	r28, 0x03	; 3
   1056c:	e2 e0       	ldi	r30, 0x02	; 2
   1056e:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

00010572 <dbf_lseek>:
///
/// @see ff.h.
/// @return  FRESULT

FRESULT dbf_lseek (FIL* fp, DWORD ofs)
{
   10572:	cf 93       	push	r28
   10574:	df 93       	push	r29
   10576:	00 d0       	rcall	.+0      	; 0x10578 <dbf_lseek+0x6>
   10578:	1f 92       	push	r1
    int rc;
    rc = f_lseek(fp, ofs);
   1057a:	0e 94 bf 5e 	call	0xbd7e	; 0xbd7e <f_lseek>
   1057e:	ec 01       	movw	r28, r24
    if(rc)
   10580:	89 2b       	or	r24, r25
   10582:	69 f0       	breq	.+26     	; 0x1059e <dbf_lseek+0x2c>
    {
        printf("Seek error: ");
   10584:	84 e7       	ldi	r24, 0x74	; 116
   10586:	9e e0       	ldi	r25, 0x0E	; 14
   10588:	a0 e0       	ldi	r26, 0x00	; 0
   1058a:	ed b7       	in	r30, 0x3d	; 61
   1058c:	fe b7       	in	r31, 0x3e	; 62
   1058e:	81 83       	std	Z+1, r24	; 0x01
   10590:	92 83       	std	Z+2, r25	; 0x02
   10592:	a3 83       	std	Z+3, r26	; 0x03
   10594:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        put_rc(rc);
   10598:	ce 01       	movw	r24, r28
   1059a:	0e 94 d5 6e 	call	0xddaa	; 0xddaa <put_rc>
        return (rc);
    }
    return(0);
}
   1059e:	ce 01       	movw	r24, r28
   105a0:	cd b7       	in	r28, 0x3d	; 61
   105a2:	de b7       	in	r29, 0x3e	; 62
   105a4:	23 96       	adiw	r28, 0x03	; 3
   105a6:	e2 e0       	ldi	r30, 0x02	; 2
   105a8:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

000105ac <dbf_close>:
///
/// @see ff.h.
/// @return  FRESULT dbf_close (FIL* fp)

FRESULT dbf_close (FIL* fp)
{
   105ac:	cf 93       	push	r28
   105ae:	df 93       	push	r29
   105b0:	00 d0       	rcall	.+0      	; 0x105b2 <dbf_close+0x6>
   105b2:	1f 92       	push	r1
    int rc;
    rc = f_close(fp);
   105b4:	0e 94 15 5d 	call	0xba2a	; 0xba2a <f_close>
   105b8:	ec 01       	movw	r28, r24
    if(rc != FR_OK)
   105ba:	89 2b       	or	r24, r25
   105bc:	69 f0       	breq	.+26     	; 0x105d8 <dbf_close+0x2c>
    {
        printf("Close error: ");
   105be:	86 e6       	ldi	r24, 0x66	; 102
   105c0:	9e e0       	ldi	r25, 0x0E	; 14
   105c2:	a0 e0       	ldi	r26, 0x00	; 0
   105c4:	ed b7       	in	r30, 0x3d	; 61
   105c6:	fe b7       	in	r31, 0x3e	; 62
   105c8:	81 83       	std	Z+1, r24	; 0x01
   105ca:	92 83       	std	Z+2, r25	; 0x02
   105cc:	a3 83       	std	Z+3, r26	; 0x03
   105ce:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        put_rc(rc);
   105d2:	ce 01       	movw	r24, r28
   105d4:	0e 94 d5 6e 	call	0xddaa	; 0xddaa <put_rc>
        return (rc);
    }
    return(0);
}
   105d8:	ce 01       	movw	r24, r28
   105da:	cd b7       	in	r28, 0x3d	; 61
   105dc:	de b7       	in	r29, 0x3e	; 62
   105de:	23 96       	adiw	r28, 0x03	; 3
   105e0:	e2 e0       	ldi	r30, 0x02	; 2
   105e2:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

000105e6 <dbf_open_read>:
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT

int dbf_open_read(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   105e6:	a6 e2       	ldi	r26, 0x26	; 38
   105e8:	b2 e0       	ldi	r27, 0x02	; 2
   105ea:	e9 ef       	ldi	r30, 0xF9	; 249
   105ec:	f2 e8       	ldi	r31, 0x82	; 130
   105ee:	0c 94 de e0 	jmp	0x1c1bc	; 0x1c1bc <__prologue_saves__+0xc>
   105f2:	4a 01       	movw	r8, r20
   105f4:	5b 01       	movw	r10, r22
   105f6:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   105f8:	cb 5d       	subi	r28, 0xDB	; 219
   105fa:	dd 4f       	sbci	r29, 0xFD	; 253
   105fc:	19 82       	std	Y+1, r1	; 0x01
   105fe:	18 82       	st	Y, r1
   10600:	c5 52       	subi	r28, 0x25	; 37
   10602:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   10604:	43 e0       	ldi	r20, 0x03	; 3
   10606:	bc 01       	movw	r22, r24
   10608:	ce 01       	movw	r24, r28
   1060a:	01 96       	adiw	r24, 0x01	; 1
   1060c:	55 df       	rcall	.-342    	; 0x104b8 <dbf_open>
    if( rc != FR_OK)
   1060e:	89 2b       	or	r24, r25
   10610:	19 f0       	breq	.+6      	; 0x10618 <dbf_open_read+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_READ;
        *errors = flags;
   10612:	81 e1       	ldi	r24, 0x11	; 17
   10614:	90 e0       	ldi	r25, 0x00	; 0
   10616:	2f c0       	rjmp	.+94     	; 0x10676 <dbf_open_read+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   10618:	b5 01       	movw	r22, r10
   1061a:	a4 01       	movw	r20, r8
   1061c:	ce 01       	movw	r24, r28
   1061e:	01 96       	adiw	r24, 0x01	; 1
   10620:	a8 df       	rcall	.-176    	; 0x10572 <dbf_lseek>
    if( rc != FR_OK)
   10622:	89 2b       	or	r24, r25
   10624:	59 f0       	breq	.+22     	; 0x1063c <dbf_open_read+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_READ;
        *errors = flags;
   10626:	85 e0       	ldi	r24, 0x05	; 5
   10628:	90 e0       	ldi	r25, 0x00	; 0
   1062a:	f7 01       	movw	r30, r14
   1062c:	91 83       	std	Z+1, r25	; 0x01
   1062e:	80 83       	st	Z, r24
        dbf_close(&fp);
   10630:	ce 01       	movw	r24, r28
   10632:	01 96       	adiw	r24, 0x01	; 1
   10634:	bb df       	rcall	.-138    	; 0x105ac <dbf_close>
        return( -1 );
   10636:	8f ef       	ldi	r24, 0xFF	; 255
   10638:	9f ef       	ldi	r25, 0xFF	; 255
   1063a:	27 c0       	rjmp	.+78     	; 0x1068a <dbf_open_read+0xa4>
    }

    rc = dbf_read(&fp, buff,size,&bytes);
   1063c:	9e 01       	movw	r18, r28
   1063e:	2b 5d       	subi	r18, 0xDB	; 219
   10640:	3d 4f       	sbci	r19, 0xFD	; 253
   10642:	a8 01       	movw	r20, r16
   10644:	b6 01       	movw	r22, r12
   10646:	ce 01       	movw	r24, r28
   10648:	01 96       	adiw	r24, 0x01	; 1
   1064a:	59 df       	rcall	.-334    	; 0x104fe <dbf_read>
    if( rc != FR_OK || (UINT) size != bytes)
   1064c:	89 2b       	or	r24, r25
   1064e:	49 f4       	brne	.+18     	; 0x10662 <dbf_open_read+0x7c>
   10650:	cb 5d       	subi	r28, 0xDB	; 219
   10652:	dd 4f       	sbci	r29, 0xFD	; 253
   10654:	88 81       	ld	r24, Y
   10656:	99 81       	ldd	r25, Y+1	; 0x01
   10658:	c5 52       	subi	r28, 0x25	; 37
   1065a:	d2 40       	sbci	r29, 0x02	; 2
   1065c:	08 17       	cp	r16, r24
   1065e:	19 07       	cpc	r17, r25
   10660:	19 f0       	breq	.+6      	; 0x10668 <dbf_open_read+0x82>
    {
        flags |= ERR_READ;
        *errors = flags;
   10662:	81 e0       	ldi	r24, 0x01	; 1
   10664:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   10666:	e1 cf       	rjmp	.-62     	; 0x1062a <dbf_open_read+0x44>
   10668:	ce 01       	movw	r24, r28
   1066a:	01 96       	adiw	r24, 0x01	; 1
   1066c:	9f df       	rcall	.-194    	; 0x105ac <dbf_close>
    if( rc != FR_OK)
   1066e:	89 2b       	or	r24, r25
   10670:	31 f0       	breq	.+12     	; 0x1067e <dbf_open_read+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   10672:	80 e1       	ldi	r24, 0x10	; 16
   10674:	90 e0       	ldi	r25, 0x00	; 0
   10676:	f7 01       	movw	r30, r14
   10678:	91 83       	std	Z+1, r25	; 0x01
   1067a:	80 83       	st	Z, r24
   1067c:	dc cf       	rjmp	.-72     	; 0x10636 <dbf_open_read+0x50>
#if 0
// test timeout - this works ok
	delayms(500); 
#endif

    return(bytes);
   1067e:	cb 5d       	subi	r28, 0xDB	; 219
   10680:	dd 4f       	sbci	r29, 0xFD	; 253
   10682:	88 81       	ld	r24, Y
   10684:	99 81       	ldd	r25, Y+1	; 0x01
   10686:	c5 52       	subi	r28, 0x25	; 37
   10688:	d2 40       	sbci	r29, 0x02	; 2
}
   1068a:	ca 5d       	subi	r28, 0xDA	; 218
   1068c:	dd 4f       	sbci	r29, 0xFD	; 253
   1068e:	ec e0       	ldi	r30, 0x0C	; 12
   10690:	0c 94 fa e0 	jmp	0x1c1f4	; 0x1c1f4 <__epilogue_restores__+0xc>

00010694 <dbf_open_write>:
/// @return  bytes actually written.
/// @return -1 on error.
/// @see: ff.h.
/// @return  FRESULT
int dbf_open_write(char *name, uint32_t pos, void *buff, int size, int *errors)
{
   10694:	a6 e2       	ldi	r26, 0x26	; 38
   10696:	b2 e0       	ldi	r27, 0x02	; 2
   10698:	e0 e5       	ldi	r30, 0x50	; 80
   1069a:	f3 e8       	ldi	r31, 0x83	; 131
   1069c:	0c 94 de e0 	jmp	0x1c1bc	; 0x1c1bc <__prologue_saves__+0xc>
   106a0:	4a 01       	movw	r8, r20
   106a2:	5b 01       	movw	r10, r22
   106a4:	69 01       	movw	r12, r18
    int rc;
    FIL fp;
    int flags = 0;
    UINT bytes = 0;
   106a6:	cb 5d       	subi	r28, 0xDB	; 219
   106a8:	dd 4f       	sbci	r29, 0xFD	; 253
   106aa:	19 82       	std	Y+1, r1	; 0x01
   106ac:	18 82       	st	Y, r1
   106ae:	c5 52       	subi	r28, 0x25	; 37
   106b0:	d2 40       	sbci	r29, 0x02	; 2

    rc = dbf_open(&fp, name, FA_OPEN_EXISTING | FA_READ | FA_WRITE);
   106b2:	43 e0       	ldi	r20, 0x03	; 3
   106b4:	bc 01       	movw	r22, r24
   106b6:	ce 01       	movw	r24, r28
   106b8:	01 96       	adiw	r24, 0x01	; 1
   106ba:	fe de       	rcall	.-516    	; 0x104b8 <dbf_open>
    if( rc != FR_OK)
   106bc:	89 2b       	or	r24, r25
   106be:	19 f0       	breq	.+6      	; 0x106c6 <dbf_open_write+0x32>
    {
        flags |= ERR_DISK;
        flags |= ERR_READ;
        *errors = flags;
   106c0:	81 e1       	ldi	r24, 0x11	; 17
   106c2:	90 e0       	ldi	r25, 0x00	; 0
   106c4:	2f c0       	rjmp	.+94     	; 0x10724 <dbf_open_write+0x90>
        return( -1 );
    }

///  SEEK
    rc = dbf_lseek(&fp, pos);
   106c6:	b5 01       	movw	r22, r10
   106c8:	a4 01       	movw	r20, r8
   106ca:	ce 01       	movw	r24, r28
   106cc:	01 96       	adiw	r24, 0x01	; 1
   106ce:	51 df       	rcall	.-350    	; 0x10572 <dbf_lseek>
    if( rc != FR_OK)
   106d0:	89 2b       	or	r24, r25
   106d2:	59 f0       	breq	.+22     	; 0x106ea <dbf_open_write+0x56>
    {
        flags |= ERR_SEEK;
        flags |= ERR_READ;
        *errors = flags;
   106d4:	85 e0       	ldi	r24, 0x05	; 5
   106d6:	90 e0       	ldi	r25, 0x00	; 0
   106d8:	f7 01       	movw	r30, r14
   106da:	91 83       	std	Z+1, r25	; 0x01
   106dc:	80 83       	st	Z, r24
        dbf_close(&fp);
   106de:	ce 01       	movw	r24, r28
   106e0:	01 96       	adiw	r24, 0x01	; 1
   106e2:	64 df       	rcall	.-312    	; 0x105ac <dbf_close>
        return( -1 );
   106e4:	8f ef       	ldi	r24, 0xFF	; 255
   106e6:	9f ef       	ldi	r25, 0xFF	; 255
   106e8:	27 c0       	rjmp	.+78     	; 0x10738 <dbf_open_write+0xa4>
    }

    rc = dbf_write(&fp, buff,size,&bytes);
   106ea:	9e 01       	movw	r18, r28
   106ec:	2b 5d       	subi	r18, 0xDB	; 219
   106ee:	3d 4f       	sbci	r19, 0xFD	; 253
   106f0:	a8 01       	movw	r20, r16
   106f2:	b6 01       	movw	r22, r12
   106f4:	ce 01       	movw	r24, r28
   106f6:	01 96       	adiw	r24, 0x01	; 1
   106f8:	1f df       	rcall	.-450    	; 0x10538 <dbf_write>
    if( rc != FR_OK || (UINT) size != bytes)
   106fa:	89 2b       	or	r24, r25
   106fc:	49 f4       	brne	.+18     	; 0x10710 <dbf_open_write+0x7c>
   106fe:	cb 5d       	subi	r28, 0xDB	; 219
   10700:	dd 4f       	sbci	r29, 0xFD	; 253
   10702:	88 81       	ld	r24, Y
   10704:	99 81       	ldd	r25, Y+1	; 0x01
   10706:	c5 52       	subi	r28, 0x25	; 37
   10708:	d2 40       	sbci	r29, 0x02	; 2
   1070a:	08 17       	cp	r16, r24
   1070c:	19 07       	cpc	r17, r25
   1070e:	19 f0       	breq	.+6      	; 0x10716 <dbf_open_write+0x82>
    {
        flags |= ERR_READ;
        *errors = flags;
   10710:	81 e0       	ldi	r24, 0x01	; 1
   10712:	90 e0       	ldi	r25, 0x00	; 0
        dbf_close(&fp);
        return( -1 );
    }
    rc = dbf_close(&fp);
   10714:	e1 cf       	rjmp	.-62     	; 0x106d8 <dbf_open_write+0x44>
   10716:	ce 01       	movw	r24, r28
   10718:	01 96       	adiw	r24, 0x01	; 1
   1071a:	48 df       	rcall	.-368    	; 0x105ac <dbf_close>
    if( rc != FR_OK)
   1071c:	89 2b       	or	r24, r25
   1071e:	31 f0       	breq	.+12     	; 0x1072c <dbf_open_write+0x98>
    {
        flags |= ERR_DISK;
        *errors = flags;
   10720:	80 e1       	ldi	r24, 0x10	; 16
   10722:	90 e0       	ldi	r25, 0x00	; 0
   10724:	f7 01       	movw	r30, r14
   10726:	91 83       	std	Z+1, r25	; 0x01
   10728:	80 83       	st	Z, r24
   1072a:	dc cf       	rjmp	.-72     	; 0x106e4 <dbf_open_write+0x50>
#if 0
// test timeout - this causes timeout
	delayms(200); 
#endif

    return(bytes);
   1072c:	cb 5d       	subi	r28, 0xDB	; 219
   1072e:	dd 4f       	sbci	r29, 0xFD	; 253
   10730:	88 81       	ld	r24, Y
   10732:	99 81       	ldd	r25, Y+1	; 0x01
   10734:	c5 52       	subi	r28, 0x25	; 37
   10736:	d2 40       	sbci	r29, 0x02	; 2
}
   10738:	ca 5d       	subi	r28, 0xDA	; 218
   1073a:	dd 4f       	sbci	r29, 0xFD	; 253
   1073c:	ec e0       	ldi	r30, 0x0C	; 12
   1073e:	0c 94 fa e0 	jmp	0x1c1f4	; 0x1c1f4 <__epilogue_restores__+0xc>

00010742 <gpib_timer_elapsed_begin>:
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
            printf("[REN HI]\n");
#endif
        GPIB_PIN_FLOAT_UP(REN);
    }
}
   10742:	0c 94 b1 32 	jmp	0x6562	; 0x6562 <clock_elapsed_begin>
   10746:	08 95       	ret

00010748 <gpib_timer_reset>:
   10748:	f8 94       	cli
   1074a:	e9 ef       	ldi	r30, 0xF9	; 249
   1074c:	fc e1       	ldi	r31, 0x1C	; 28
   1074e:	10 82       	st	Z, r1
   10750:	11 82       	std	Z+1, r1	; 0x01
   10752:	12 82       	std	Z+2, r1	; 0x02
   10754:	13 82       	std	Z+3, r1	; 0x03
   10756:	14 82       	std	Z+4, r1	; 0x04
   10758:	15 82       	std	Z+5, r1	; 0x05
   1075a:	16 82       	std	Z+6, r1	; 0x06
   1075c:	17 82       	std	Z+7, r1	; 0x07
   1075e:	81 e0       	ldi	r24, 0x01	; 1
   10760:	80 87       	std	Z+8, r24	; 0x08
   10762:	78 94       	sei
   10764:	08 95       	ret

00010766 <gpib_timer_elapsed_end>:
   10766:	0c 94 b7 32 	jmp	0x656e	; 0x656e <clock_elapsed_end>
   1076a:	08 95       	ret

0001076c <gpib_timer_task>:
   1076c:	f8 94       	cli
   1076e:	80 91 fd 1c 	lds	r24, 0x1CFD	; 0x801cfd <gpib_timer+0x4>
   10772:	90 91 fe 1c 	lds	r25, 0x1CFE	; 0x801cfe <gpib_timer+0x5>
   10776:	a0 91 ff 1c 	lds	r26, 0x1CFF	; 0x801cff <gpib_timer+0x6>
   1077a:	b0 91 00 1d 	lds	r27, 0x1D00	; 0x801d00 <gpib_timer+0x7>
   1077e:	89 2b       	or	r24, r25
   10780:	8a 2b       	or	r24, r26
   10782:	8b 2b       	or	r24, r27
   10784:	a1 f0       	breq	.+40     	; 0x107ae <gpib_timer_task+0x42>
   10786:	80 91 fd 1c 	lds	r24, 0x1CFD	; 0x801cfd <gpib_timer+0x4>
   1078a:	90 91 fe 1c 	lds	r25, 0x1CFE	; 0x801cfe <gpib_timer+0x5>
   1078e:	a0 91 ff 1c 	lds	r26, 0x1CFF	; 0x801cff <gpib_timer+0x6>
   10792:	b0 91 00 1d 	lds	r27, 0x1D00	; 0x801d00 <gpib_timer+0x7>
   10796:	01 97       	sbiw	r24, 0x01	; 1
   10798:	a1 09       	sbc	r26, r1
   1079a:	b1 09       	sbc	r27, r1
   1079c:	80 93 fd 1c 	sts	0x1CFD, r24	; 0x801cfd <gpib_timer+0x4>
   107a0:	90 93 fe 1c 	sts	0x1CFE, r25	; 0x801cfe <gpib_timer+0x5>
   107a4:	a0 93 ff 1c 	sts	0x1CFF, r26	; 0x801cff <gpib_timer+0x6>
   107a8:	b0 93 00 1d 	sts	0x1D00, r27	; 0x801d00 <gpib_timer+0x7>
   107ac:	03 c0       	rjmp	.+6      	; 0x107b4 <gpib_timer_task+0x48>
   107ae:	81 e0       	ldi	r24, 0x01	; 1
   107b0:	80 93 01 1d 	sts	0x1D01, r24	; 0x801d01 <gpib_timer+0x8>
   107b4:	78 94       	sei
   107b6:	08 95       	ret

000107b8 <gpib_timeout_set>:
   107b8:	f8 94       	cli
   107ba:	e9 ef       	ldi	r30, 0xF9	; 249
   107bc:	fc e1       	ldi	r31, 0x1C	; 28
   107be:	64 83       	std	Z+4, r22	; 0x04
   107c0:	75 83       	std	Z+5, r23	; 0x05
   107c2:	86 83       	std	Z+6, r24	; 0x06
   107c4:	97 83       	std	Z+7, r25	; 0x07
   107c6:	10 86       	std	Z+8, r1	; 0x08
   107c8:	78 94       	sei
   107ca:	08 95       	ret

000107cc <gpib_bus_read_init>:
   107cc:	54 98       	cbi	0x0a, 4	; 10
   107ce:	57 98       	cbi	0x0a, 7	; 10
   107d0:	45 98       	cbi	0x08, 5	; 8
   107d2:	3d 9a       	sbi	0x07, 5	; 7
   107d4:	11 b8       	out	0x01, r1	; 1
   107d6:	2f ef       	ldi	r18, 0xFF	; 255
   107d8:	22 b9       	out	0x02, r18	; 2
   107da:	43 98       	cbi	0x08, 3	; 8
   107dc:	3b 9a       	sbi	0x07, 3	; 7
   107de:	21 98       	cbi	0x04, 1	; 4
   107e0:	56 98       	cbi	0x0a, 6	; 10
   107e2:	20 98       	cbi	0x04, 0	; 4
   107e4:	55 98       	cbi	0x0a, 5	; 10
   107e6:	89 2b       	or	r24, r25
   107e8:	39 f4       	brne	.+14     	; 0x107f8 <gpib_bus_read_init+0x2c>
   107ea:	52 98       	cbi	0x0a, 2	; 10
   107ec:	53 98       	cbi	0x0a, 3	; 10
   107ee:	8d e0       	ldi	r24, 0x0D	; 13
   107f0:	8a 95       	dec	r24
   107f2:	f1 f7       	brne	.-4      	; 0x107f0 <gpib_bus_read_init+0x24>
   107f4:	00 00       	nop
   107f6:	04 c0       	rjmp	.+8      	; 0x10800 <gpib_bus_read_init+0x34>
   107f8:	5b 98       	cbi	0x0b, 3	; 11
   107fa:	53 9a       	sbi	0x0a, 3	; 10
   107fc:	5a 98       	cbi	0x0b, 2	; 11
   107fe:	52 9a       	sbi	0x0a, 2	; 10
   10800:	42 98       	cbi	0x08, 2	; 8
   10802:	3a 9a       	sbi	0x07, 2	; 7
   10804:	44 9a       	sbi	0x08, 4	; 8
   10806:	3c 9a       	sbi	0x07, 4	; 7
   10808:	8d e0       	ldi	r24, 0x0D	; 13
   1080a:	8a 95       	dec	r24
   1080c:	f1 f7       	brne	.-4      	; 0x1080a <gpib_bus_read_init+0x3e>
   1080e:	00 00       	nop
   10810:	08 95       	ret

00010812 <gpib_bus_init>:
   10812:	00 d0       	rcall	.+0      	; 0x10814 <gpib_bus_init+0x2>
   10814:	1f 92       	push	r1
   10816:	10 92 7a 19 	sts	0x197A, r1	; 0x80197a <gpib_unread_f>
   1081a:	11 b8       	out	0x01, r1	; 1
   1081c:	8f ef       	ldi	r24, 0xFF	; 255
   1081e:	82 b9       	out	0x02, r24	; 2
   10820:	21 98       	cbi	0x04, 1	; 4
   10822:	52 98       	cbi	0x0a, 2	; 10
   10824:	53 98       	cbi	0x0a, 3	; 10
   10826:	54 98       	cbi	0x0a, 4	; 10
   10828:	57 98       	cbi	0x0a, 7	; 10
   1082a:	56 98       	cbi	0x0a, 6	; 10
   1082c:	20 98       	cbi	0x04, 0	; 4
   1082e:	55 98       	cbi	0x0a, 5	; 10
   10830:	45 98       	cbi	0x08, 5	; 8
   10832:	3d 9a       	sbi	0x07, 5	; 7
   10834:	43 98       	cbi	0x08, 3	; 8
   10836:	3b 9a       	sbi	0x07, 3	; 7
   10838:	42 98       	cbi	0x08, 2	; 8
   1083a:	3a 9a       	sbi	0x07, 2	; 7
   1083c:	44 9a       	sbi	0x08, 4	; 8
   1083e:	3c 9a       	sbi	0x07, 4	; 7
   10840:	8d e0       	ldi	r24, 0x0D	; 13
   10842:	8a 95       	dec	r24
   10844:	f1 f7       	brne	.-4      	; 0x10842 <gpib_bus_init+0x30>
   10846:	00 00       	nop
   10848:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1084c:	82 ff       	sbrs	r24, 2
   1084e:	0a c0       	rjmp	.+20     	; 0x10864 <gpib_bus_init+0x52>
   10850:	87 ea       	ldi	r24, 0xA7	; 167
   10852:	91 e1       	ldi	r25, 0x11	; 17
   10854:	a0 e0       	ldi	r26, 0x00	; 0
   10856:	ed b7       	in	r30, 0x3d	; 61
   10858:	fe b7       	in	r31, 0x3e	; 62
   1085a:	81 83       	std	Z+1, r24	; 0x01
   1085c:	92 83       	std	Z+2, r25	; 0x02
   1085e:	a3 83       	std	Z+3, r26	; 0x03
   10860:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   10864:	0f 90       	pop	r0
   10866:	0f 90       	pop	r0
   10868:	0f 90       	pop	r0
   1086a:	08 95       	ret

0001086c <gpib_state_init>:
   1086c:	00 d0       	rcall	.+0      	; 0x1086e <gpib_state_init+0x2>
   1086e:	1f 92       	push	r1
   10870:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10874:	82 ff       	sbrs	r24, 2
   10876:	0a c0       	rjmp	.+20     	; 0x1088c <gpib_state_init+0x20>
   10878:	84 e9       	ldi	r24, 0x94	; 148
   1087a:	91 e1       	ldi	r25, 0x11	; 17
   1087c:	a0 e0       	ldi	r26, 0x00	; 0
   1087e:	ed b7       	in	r30, 0x3d	; 61
   10880:	fe b7       	in	r31, 0x3e	; 62
   10882:	81 83       	std	Z+1, r24	; 0x01
   10884:	92 83       	std	Z+2, r25	; 0x02
   10886:	a3 83       	std	Z+3, r26	; 0x03
   10888:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1088c:	e4 dd       	rcall	.-1080   	; 0x10456 <ppr_init>
   1088e:	0e 94 f1 8e 	call	0x11de2	; 0x11de2 <listen_cleanup>
   10892:	0e 94 07 90 	call	0x1200e	; 0x1200e <talk_cleanup>
   10896:	10 92 05 1f 	sts	0x1F05, r1	; 0x801f05 <spoll>
   1089a:	10 92 08 1f 	sts	0x1F08, r1	; 0x801f08 <talking>
   1089e:	10 92 0b 1f 	sts	0x1F0B, r1	; 0x801f0b <talking_last>
   108a2:	10 92 0a 1f 	sts	0x1F0A, r1	; 0x801f0a <listening>
   108a6:	10 92 04 1f 	sts	0x1F04, r1	; 0x801f04 <listening_last>
   108aa:	10 92 03 1d 	sts	0x1D03, r1	; 0x801d03 <lastcmd+0x1>
   108ae:	10 92 02 1d 	sts	0x1D02, r1	; 0x801d02 <lastcmd>
   108b2:	10 92 07 1f 	sts	0x1F07, r1	; 0x801f07 <current+0x1>
   108b6:	10 92 06 1f 	sts	0x1F06, r1	; 0x801f06 <current>
   108ba:	10 92 09 1f 	sts	0x1F09, r1	; 0x801f09 <secondary>
   108be:	0f 90       	pop	r0
   108c0:	0f 90       	pop	r0
   108c2:	0f 90       	pop	r0
   108c4:	08 95       	ret

000108c6 <gpib_enable_PPR>:
   108c6:	cf 93       	push	r28
   108c8:	df 93       	push	r29
   108ca:	ad b7       	in	r26, 0x3d	; 61
   108cc:	be b7       	in	r27, 0x3e	; 62
   108ce:	17 97       	sbiw	r26, 0x07	; 7
   108d0:	0f b6       	in	r0, 0x3f	; 63
   108d2:	f8 94       	cli
   108d4:	be bf       	out	0x3e, r27	; 62
   108d6:	0f be       	out	0x3f, r0	; 63
   108d8:	ad bf       	out	0x3d, r26	; 61
   108da:	ec 01       	movw	r28, r24
   108dc:	88 30       	cpi	r24, 0x08	; 8
   108de:	91 05       	cpc	r25, r1
   108e0:	68 f0       	brcs	.+26     	; 0x108fc <gpib_enable_PPR+0x36>
   108e2:	ed b7       	in	r30, 0x3d	; 61
   108e4:	fe b7       	in	r31, 0x3e	; 62
   108e6:	95 83       	std	Z+5, r25	; 0x05
   108e8:	84 83       	std	Z+4, r24	; 0x04
   108ea:	8e e6       	ldi	r24, 0x6E	; 110
   108ec:	91 e1       	ldi	r25, 0x11	; 17
   108ee:	a0 e0       	ldi	r26, 0x00	; 0
   108f0:	81 83       	std	Z+1, r24	; 0x01
   108f2:	92 83       	std	Z+2, r25	; 0x02
   108f4:	a3 83       	std	Z+3, r26	; 0x03
   108f6:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   108fa:	15 c0       	rjmp	.+42     	; 0x10926 <gpib_enable_PPR+0x60>
   108fc:	c2 dd       	rcall	.-1148   	; 0x10482 <ppr_bit_set>
   108fe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10902:	81 ff       	sbrs	r24, 1
   10904:	10 c0       	rjmp	.+32     	; 0x10926 <gpib_enable_PPR+0x60>
   10906:	a3 dd       	rcall	.-1210   	; 0x1044e <ppr_reg>
   10908:	90 e0       	ldi	r25, 0x00	; 0
   1090a:	ed b7       	in	r30, 0x3d	; 61
   1090c:	fe b7       	in	r31, 0x3e	; 62
   1090e:	97 83       	std	Z+7, r25	; 0x07
   10910:	86 83       	std	Z+6, r24	; 0x06
   10912:	d5 83       	std	Z+5, r29	; 0x05
   10914:	c4 83       	std	Z+4, r28	; 0x04
   10916:	83 e5       	ldi	r24, 0x53	; 83
   10918:	91 e1       	ldi	r25, 0x11	; 17
   1091a:	a0 e0       	ldi	r26, 0x00	; 0
   1091c:	81 83       	std	Z+1, r24	; 0x01
   1091e:	92 83       	std	Z+2, r25	; 0x02
   10920:	a3 83       	std	Z+3, r26	; 0x03
   10922:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   10926:	cd b7       	in	r28, 0x3d	; 61
   10928:	de b7       	in	r29, 0x3e	; 62
   1092a:	27 96       	adiw	r28, 0x07	; 7
   1092c:	e2 e0       	ldi	r30, 0x02	; 2
   1092e:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

00010932 <gpib_disable_PPR>:
   10932:	cf 93       	push	r28
   10934:	df 93       	push	r29
   10936:	ad b7       	in	r26, 0x3d	; 61
   10938:	be b7       	in	r27, 0x3e	; 62
   1093a:	17 97       	sbiw	r26, 0x07	; 7
   1093c:	0f b6       	in	r0, 0x3f	; 63
   1093e:	f8 94       	cli
   10940:	be bf       	out	0x3e, r27	; 62
   10942:	0f be       	out	0x3f, r0	; 63
   10944:	ad bf       	out	0x3d, r26	; 61
   10946:	ec 01       	movw	r28, r24
   10948:	88 30       	cpi	r24, 0x08	; 8
   1094a:	91 05       	cpc	r25, r1
   1094c:	68 f0       	brcs	.+26     	; 0x10968 <gpib_disable_PPR+0x36>
   1094e:	ed b7       	in	r30, 0x3d	; 61
   10950:	fe b7       	in	r31, 0x3e	; 62
   10952:	95 83       	std	Z+5, r25	; 0x05
   10954:	84 83       	std	Z+4, r24	; 0x04
   10956:	8c e2       	ldi	r24, 0x2C	; 44
   10958:	91 e1       	ldi	r25, 0x11	; 17
   1095a:	a0 e0       	ldi	r26, 0x00	; 0
   1095c:	81 83       	std	Z+1, r24	; 0x01
   1095e:	92 83       	std	Z+2, r25	; 0x02
   10960:	a3 83       	std	Z+3, r26	; 0x03
   10962:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   10966:	15 c0       	rjmp	.+42     	; 0x10992 <gpib_disable_PPR+0x60>
   10968:	99 dd       	rcall	.-1230   	; 0x1049c <ppr_bit_clr>
   1096a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1096e:	81 ff       	sbrs	r24, 1
   10970:	10 c0       	rjmp	.+32     	; 0x10992 <gpib_disable_PPR+0x60>
   10972:	6d dd       	rcall	.-1318   	; 0x1044e <ppr_reg>
   10974:	90 e0       	ldi	r25, 0x00	; 0
   10976:	ed b7       	in	r30, 0x3d	; 61
   10978:	fe b7       	in	r31, 0x3e	; 62
   1097a:	97 83       	std	Z+7, r25	; 0x07
   1097c:	86 83       	std	Z+6, r24	; 0x06
   1097e:	d5 83       	std	Z+5, r29	; 0x05
   10980:	c4 83       	std	Z+4, r28	; 0x04
   10982:	81 e1       	ldi	r24, 0x11	; 17
   10984:	91 e1       	ldi	r25, 0x11	; 17
   10986:	a0 e0       	ldi	r26, 0x00	; 0
   10988:	81 83       	std	Z+1, r24	; 0x01
   1098a:	92 83       	std	Z+2, r25	; 0x02
   1098c:	a3 83       	std	Z+3, r26	; 0x03
   1098e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   10992:	cd b7       	in	r28, 0x3d	; 61
   10994:	de b7       	in	r29, 0x3e	; 62
   10996:	27 96       	adiw	r28, 0x07	; 7
   10998:	e2 e0       	ldi	r30, 0x02	; 2
   1099a:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

0001099e <gpib_assert_ifc>:
   1099e:	00 d0       	rcall	.+0      	; 0x109a0 <gpib_assert_ifc+0x2>
   109a0:	1f 92       	push	r1
   109a2:	5c 98       	cbi	0x0b, 4	; 11
   109a4:	54 9a       	sbi	0x0a, 4	; 10
   109a6:	6a ef       	ldi	r22, 0xFA	; 250
   109a8:	70 e0       	ldi	r23, 0x00	; 0
   109aa:	80 e0       	ldi	r24, 0x00	; 0
   109ac:	90 e0       	ldi	r25, 0x00	; 0
   109ae:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <delayus>
   109b2:	54 98       	cbi	0x0a, 4	; 10
   109b4:	6a ef       	ldi	r22, 0xFA	; 250
   109b6:	70 e0       	ldi	r23, 0x00	; 0
   109b8:	80 e0       	ldi	r24, 0x00	; 0
   109ba:	90 e0       	ldi	r25, 0x00	; 0
   109bc:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <delayus>
   109c0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   109c4:	82 ff       	sbrs	r24, 2
   109c6:	0a c0       	rjmp	.+20     	; 0x109dc <gpib_assert_ifc+0x3e>
   109c8:	85 e0       	ldi	r24, 0x05	; 5
   109ca:	91 e1       	ldi	r25, 0x11	; 17
   109cc:	a0 e0       	ldi	r26, 0x00	; 0
   109ce:	ed b7       	in	r30, 0x3d	; 61
   109d0:	fe b7       	in	r31, 0x3e	; 62
   109d2:	81 83       	std	Z+1, r24	; 0x01
   109d4:	92 83       	std	Z+2, r25	; 0x02
   109d6:	a3 83       	std	Z+3, r26	; 0x03
   109d8:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   109dc:	0f 90       	pop	r0
   109de:	0f 90       	pop	r0
   109e0:	0f 90       	pop	r0
   109e2:	08 95       	ret

000109e4 <gpib_unread>:
///     - If ATN is LOW then we strip parity from the byte.
///   - Upper 8 bits: Status and Errors present.
///     - @see gpib.h _FLAGS defines for a full list.
/// @return ch
uint16_t gpib_unread(uint16_t ch)
{
   109e4:	cf 93       	push	r28
   109e6:	df 93       	push	r29
   109e8:	00 d0       	rcall	.+0      	; 0x109ea <gpib_unread+0x6>
   109ea:	1f 92       	push	r1
   109ec:	ec 01       	movw	r28, r24
    if(!gpib_unread_f)
   109ee:	80 91 7a 19 	lds	r24, 0x197A	; 0x80197a <gpib_unread_f>
   109f2:	81 11       	cpse	r24, r1
   109f4:	08 c0       	rjmp	.+16     	; 0x10a06 <gpib_unread+0x22>
    {
        gpib_unread_data = ch;
   109f6:	d0 93 0d 1f 	sts	0x1F0D, r29	; 0x801f0d <gpib_unread_data+0x1>
   109fa:	c0 93 0c 1f 	sts	0x1F0C, r28	; 0x801f0c <gpib_unread_data>
        gpib_unread_f = 1;
   109fe:	81 e0       	ldi	r24, 0x01	; 1
   10a00:	80 93 7a 19 	sts	0x197A, r24	; 0x80197a <gpib_unread_f>
   10a04:	12 c0       	rjmp	.+36     	; 0x10a2a <gpib_unread+0x46>
    }
    else
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10a06:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10a0a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10a0e:	85 70       	andi	r24, 0x05	; 5
   10a10:	99 27       	eor	r25, r25
   10a12:	89 2b       	or	r24, r25
   10a14:	51 f0       	breq	.+20     	; 0x10a2a <gpib_unread+0x46>
            printf("gpib_unread: error, can only be called once!\n");
   10a16:	87 ed       	ldi	r24, 0xD7	; 215
   10a18:	90 e1       	ldi	r25, 0x10	; 16
   10a1a:	a0 e0       	ldi	r26, 0x00	; 0
   10a1c:	ed b7       	in	r30, 0x3d	; 61
   10a1e:	fe b7       	in	r31, 0x3e	; 62
   10a20:	81 83       	std	Z+1, r24	; 0x01
   10a22:	92 83       	std	Z+2, r25	; 0x02
   10a24:	a3 83       	std	Z+3, r26	; 0x03
   10a26:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    }
    return(ch);
}
   10a2a:	ce 01       	movw	r24, r28
   10a2c:	cd b7       	in	r28, 0x3d	; 61
   10a2e:	de b7       	in	r29, 0x3e	; 62
   10a30:	23 96       	adiw	r28, 0x03	; 3
   10a32:	e2 e0       	ldi	r30, 0x02	; 2
   10a34:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

00010a38 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   10a38:	11 b8       	out	0x01, r1	; 1
   10a3a:	80 b1       	in	r24, 0x00	; 0
   10a3c:	80 95       	com	r24

///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   10a3e:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   10a40:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   10a42:	08 95       	ret

00010a44 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   10a44:	4e 99       	sbic	0x09, 6	; 9
   10a46:	03 c0       	rjmp	.+6      	; 0x10a4e <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   10a48:	80 e0       	ldi	r24, 0x00	; 0
   10a4a:	94 e0       	ldi	r25, 0x04	; 4
   10a4c:	02 c0       	rjmp	.+4      	; 0x10a52 <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   10a4e:	80 e0       	ldi	r24, 0x00	; 0
   10a50:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   10a52:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   10a54:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   10a56:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   10a58:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   10a5a:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   10a5c:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   10a5e:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   10a60:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   10a62:	08 95       	ret

00010a64 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   10a64:	19 99       	sbic	0x03, 1	; 3
   10a66:	03 c0       	rjmp	.+6      	; 0x10a6e <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   10a68:	80 e0       	ldi	r24, 0x00	; 0
   10a6a:	90 e2       	ldi	r25, 0x20	; 32
   10a6c:	02 c0       	rjmp	.+4      	; 0x10a72 <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   10a6e:	80 e0       	ldi	r24, 0x00	; 0
   10a70:	90 e0       	ldi	r25, 0x00	; 0
///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
/// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   10a72:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   10a74:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   10a76:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   10a78:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   10a7a:	08 95       	ret

00010a7c <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   10a7c:	2f 92       	push	r2
   10a7e:	3f 92       	push	r3
   10a80:	4f 92       	push	r4
   10a82:	6f 92       	push	r6
   10a84:	7f 92       	push	r7
   10a86:	8f 92       	push	r8
   10a88:	cf 92       	push	r12
   10a8a:	df 92       	push	r13
   10a8c:	ef 92       	push	r14
   10a8e:	1f 93       	push	r17
   10a90:	cf 93       	push	r28
   10a92:	df 93       	push	r29
   10a94:	cd b7       	in	r28, 0x3d	; 61
   10a96:	de b7       	in	r29, 0x3e	; 62
   10a98:	2f 97       	sbiw	r28, 0x0f	; 15
   10a9a:	0f b6       	in	r0, 0x3f	; 63
   10a9c:	f8 94       	cli
   10a9e:	de bf       	out	0x3e, r29	; 62
   10aa0:	0f be       	out	0x3f, r0	; 63
   10aa2:	cd bf       	out	0x3d, r28	; 61
   10aa4:	9f 87       	std	Y+15, r25	; 0x0f
   10aa6:	8e 87       	std	Y+14, r24	; 0x0e
    uint8_t tx_state;

// Wait for DAV to be released before starting
// Read state for DAV
///@brief NRFD,NDAC SRQ are outputs
    gpib_bus_read_init(0);
   10aa8:	80 e0       	ldi	r24, 0x00	; 0
   10aaa:	90 e0       	ldi	r25, 0x00	; 0
   10aac:	8f de       	rcall	.-738    	; 0x107cc <gpib_bus_read_init>
// Bus read init sets the following states
// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   10aae:	64 ef       	ldi	r22, 0xF4	; 244
   10ab0:	71 e0       	ldi	r23, 0x01	; 1
   10ab2:	80 e0       	ldi	r24, 0x00	; 0
   10ab4:	90 e0       	ldi	r25, 0x00	; 0
   10ab6:	80 de       	rcall	.-768    	; 0x107b8 <gpib_timeout_set>

// Bus read init sets the following states
// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
   10ab8:	10 e0       	ldi	r17, 0x00	; 0
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for DAV==1>\n");
   10aba:	87 e0       	ldi	r24, 0x07	; 7
   10abc:	90 e1       	ldi	r25, 0x10	; 16
   10abe:	6c 01       	movw	r12, r24
   10ac0:	e1 2c       	mov	r14, r1
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for NDAC==1>\n");
   10ac2:	81 e2       	ldi	r24, 0x21	; 33
   10ac4:	90 e1       	ldi	r25, 0x10	; 16
   10ac6:	3c 01       	movw	r6, r24
   10ac8:	81 2c       	mov	r8, r1
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for NRFD==0>\n");
   10aca:	8c e3       	ldi	r24, 0x3C	; 60
   10acc:	90 e1       	ldi	r25, 0x10	; 16
   10ace:	1c 01       	movw	r2, r24
   10ad0:	41 2c       	mov	r4, r1
                    tx_state = GPIB_TX_PUT_DATA;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   10ad2:	87 e5       	ldi	r24, 0x57	; 87
   10ad4:	90 e1       	ldi	r25, 0x10	; 16
   10ad6:	9c 01       	movw	r18, r24
   10ad8:	40 e0       	ldi	r20, 0x00	; 0
   10ada:	28 87       	std	Y+8, r18	; 0x08
   10adc:	39 87       	std	Y+9, r19	; 0x09
   10ade:	4a 87       	std	Y+10, r20	; 0x0a
                    tx_state = GPIB_TX_WAIT_READY;
                }
                if (gpib_timeout_test())
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
                        printf("<BUS waiting for DAV==1>\n");
   10ae0:	8f e7       	ldi	r24, 0x7F	; 127
   10ae2:	90 e1       	ldi	r25, 0x10	; 16
   10ae4:	9c 01       	movw	r18, r24
   10ae6:	40 e0       	ldi	r20, 0x00	; 0
   10ae8:	2b 87       	std	Y+11, r18	; 0x0b
   10aea:	3c 87       	std	Y+12, r19	; 0x0c
   10aec:	4d 87       	std	Y+13, r20	; 0x0d
    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
    {
		if(uart_keyhit(0))
   10aee:	80 e0       	ldi	r24, 0x00	; 0
   10af0:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <uart_keyhit>
   10af4:	89 2b       	or	r24, r25
   10af6:	99 f0       	breq	.+38     	; 0x10b1e <gpib_write_byte+0xa2>
		{
			if(debuglevel & GPIB_ERR)
   10af8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10afc:	80 ff       	sbrs	r24, 0
   10afe:	39 c1       	rjmp	.+626    	; 0x10d72 <gpib_write_byte+0x2f6>
				printf("gpib_write_byte: KEY state=%d\n", tx_state);
   10b00:	81 2f       	mov	r24, r17
   10b02:	90 e0       	ldi	r25, 0x00	; 0
   10b04:	ed b7       	in	r30, 0x3d	; 61
   10b06:	fe b7       	in	r31, 0x3e	; 62
   10b08:	95 83       	std	Z+5, r25	; 0x05
   10b0a:	84 83       	std	Z+4, r24	; 0x04
   10b0c:	88 eb       	ldi	r24, 0xB8	; 184
   10b0e:	90 e1       	ldi	r25, 0x10	; 16
   10b10:	a0 e0       	ldi	r26, 0x00	; 0
   10b12:	81 83       	std	Z+1, r24	; 0x01
   10b14:	92 83       	std	Z+2, r25	; 0x02
   10b16:	a3 83       	std	Z+3, r26	; 0x03
   10b18:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   10b1c:	2a c1       	rjmp	.+596    	; 0x10d72 <gpib_write_byte+0x2f6>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   10b1e:	4c 99       	sbic	0x09, 4	; 9
   10b20:	19 c0       	rjmp	.+50     	; 0x10b54 <gpib_write_byte+0xd8>
        {
            ch |= IFC_FLAG;
   10b22:	2e 85       	ldd	r18, Y+14	; 0x0e
   10b24:	3f 85       	ldd	r19, Y+15	; 0x0f
   10b26:	30 61       	ori	r19, 0x10	; 16
   10b28:	3f 87       	std	Y+15, r19	; 0x0f
   10b2a:	2e 87       	std	Y+14, r18	; 0x0e
			if(debuglevel & GPIB_ERR)
   10b2c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10b30:	80 ff       	sbrs	r24, 0
   10b32:	0e c0       	rjmp	.+28     	; 0x10b50 <gpib_write_byte+0xd4>
				printf("gpib_write_byte: IFC state=%d\n", tx_state);
   10b34:	81 2f       	mov	r24, r17
   10b36:	90 e0       	ldi	r25, 0x00	; 0
   10b38:	ed b7       	in	r30, 0x3d	; 61
   10b3a:	fe b7       	in	r31, 0x3e	; 62
   10b3c:	95 83       	std	Z+5, r25	; 0x05
   10b3e:	84 83       	std	Z+4, r24	; 0x04
   10b40:	89 e9       	ldi	r24, 0x99	; 153
   10b42:	90 e1       	ldi	r25, 0x10	; 16
   10b44:	a0 e0       	ldi	r26, 0x00	; 0
   10b46:	81 83       	std	Z+1, r24	; 0x01
   10b48:	92 83       	std	Z+2, r25	; 0x02
   10b4a:	a3 83       	std	Z+3, r26	; 0x03
   10b4c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            gpib_bus_init();
   10b50:	60 de       	rcall	.-832    	; 0x10812 <gpib_bus_init>
            break;
   10b52:	0f c1       	rjmp	.+542    	; 0x10d72 <gpib_write_byte+0x2f6>
        }

        switch(tx_state)
   10b54:	81 2f       	mov	r24, r17
   10b56:	90 e0       	ldi	r25, 0x00	; 0
   10b58:	8a 30       	cpi	r24, 0x0A	; 10
   10b5a:	91 05       	cpc	r25, r1
   10b5c:	08 f0       	brcs	.+2      	; 0x10b60 <gpib_write_byte+0xe4>
   10b5e:	ff c0       	rjmp	.+510    	; 0x10d5e <gpib_write_byte+0x2e2>
   10b60:	fc 01       	movw	r30, r24
   10b62:	e3 54       	subi	r30, 0x43	; 67
   10b64:	ff 4f       	sbci	r31, 0xFF	; 255
   10b66:	0c 94 a9 e0 	jmp	0x1c152	; 0x1c152 <__tablejump2__>
        {
            case GPIB_TX_START:
// Wait for release of DAV and EOI before starting
// IF DAV = 0 the bus is busy
                if(GPIB_PIN_TST(DAV) == 1)
   10b6a:	19 9b       	sbis	0x03, 1	; 3
   10b6c:	12 c0       	rjmp	.+36     	; 0x10b92 <gpib_write_byte+0x116>
// We arrive here in Read Mode - see gpib_bus_read_init(0);

// Switch GBIB driver direction to Write
// CPU has BUS already set IN with pullups = 0xff - see gpib_bus_read_init(0);
// When we switch the GPIB drivers will be in OC mode and off the bus (0xff)
                    GPIB_IO_HI(TE);               // BUS OUT, DAV OUT, NRFD and NDAC IN
   10b6e:	42 9a       	sbi	0x08, 2	; 8
   10b70:	3a 9a       	sbi	0x07, 2	; 7
                    GPIB_IO_LOW(DC);              // ATN OUT, EOI OUT, SRQ IN
   10b72:	44 98       	cbi	0x08, 4	; 8
   10b74:	3c 9a       	sbi	0x07, 4	; 7
#endif
// My testing with various GPIB devices shows that we MUST assert ATN EARLY!
                    if(ch & ATN_FLAG)
   10b76:	2e 85       	ldd	r18, Y+14	; 0x0e
   10b78:	3f 85       	ldd	r19, Y+15	; 0x0f
   10b7a:	32 ff       	sbrs	r19, 2
   10b7c:	02 c0       	rjmp	.+4      	; 0x10b82 <gpib_write_byte+0x106>
                        GPIB_IO_LOW(ATN);         // FYI: SS80 never sends ATN from a device
   10b7e:	5e 98       	cbi	0x0b, 6	; 11
   10b80:	01 c0       	rjmp	.+2      	; 0x10b84 <gpib_write_byte+0x108>
                    else
#if BOARD == 2
                        GPIB_IO_HI(ATN); 
   10b82:	5e 9a       	sbi	0x0b, 6	; 11
   10b84:	56 9a       	sbi	0x0a, 6	; 10
#else
                        GPIB_PIN_FLOAT_UP(ATN);
#endif

                    gpib_timeout_set(HTIMEOUT);
   10b86:	64 ef       	ldi	r22, 0xF4	; 244
   10b88:	71 e0       	ldi	r23, 0x01	; 1
   10b8a:	80 e0       	ldi	r24, 0x00	; 0
   10b8c:	90 e0       	ldi	r25, 0x00	; 0
   10b8e:	14 de       	rcall	.-984    	; 0x107b8 <gpib_timeout_set>
                    tx_state = GPIB_TX_WAIT_READY;
   10b90:	11 e0       	ldi	r17, 0x01	; 1
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10b92:	80 91 01 1d 	lds	r24, 0x1D01	; 0x801d01 <gpib_timer+0x8>
#endif

                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_READY;
                }
                if (gpib_timeout_test())
   10b96:	88 23       	and	r24, r24
   10b98:	09 f4       	brne	.+2      	; 0x10b9c <gpib_write_byte+0x120>
   10b9a:	a9 cf       	rjmp	.-174    	; 0x10aee <gpib_write_byte+0x72>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10b9c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10ba0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10ba4:	85 70       	andi	r24, 0x05	; 5
   10ba6:	99 27       	eor	r25, r25
   10ba8:	89 2b       	or	r24, r25
   10baa:	29 f1       	breq	.+74     	; 0x10bf6 <gpib_write_byte+0x17a>
                        printf("<BUS waiting for DAV==1>\n");
   10bac:	8b 85       	ldd	r24, Y+11	; 0x0b
   10bae:	9c 85       	ldd	r25, Y+12	; 0x0c
   10bb0:	ad 85       	ldd	r26, Y+13	; 0x0d
   10bb2:	1a c0       	rjmp	.+52     	; 0x10be8 <gpib_write_byte+0x16c>
                }
                break;

            case GPIB_TX_WAIT_READY:
// Wait for ready condition
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
   10bb4:	4a 9b       	sbis	0x09, 2	; 9
   10bb6:	08 c0       	rjmp	.+16     	; 0x10bc8 <gpib_write_byte+0x14c>
   10bb8:	4b 99       	sbic	0x09, 3	; 9
   10bba:	06 c0       	rjmp	.+12     	; 0x10bc8 <gpib_write_byte+0x14c>
                {
                    gpib_timeout_set(HTIMEOUT);
   10bbc:	64 ef       	ldi	r22, 0xF4	; 244
   10bbe:	71 e0       	ldi	r23, 0x01	; 1
   10bc0:	80 e0       	ldi	r24, 0x00	; 0
   10bc2:	90 e0       	ldi	r25, 0x00	; 0
   10bc4:	f9 dd       	rcall	.-1038   	; 0x107b8 <gpib_timeout_set>
                    tx_state = GPIB_TX_PUT_DATA;
   10bc6:	12 e0       	ldi	r17, 0x02	; 2
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10bc8:	80 91 01 1d 	lds	r24, 0x1D01	; 0x801d01 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_PUT_DATA;
                }
                if (gpib_timeout_test())
   10bcc:	88 23       	and	r24, r24
   10bce:	09 f4       	brne	.+2      	; 0x10bd2 <gpib_write_byte+0x156>
   10bd0:	8e cf       	rjmp	.-228    	; 0x10aee <gpib_write_byte+0x72>
                {
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10bd2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10bd6:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10bda:	85 70       	andi	r24, 0x05	; 5
   10bdc:	99 27       	eor	r25, r25
   10bde:	89 2b       	or	r24, r25
   10be0:	51 f0       	breq	.+20     	; 0x10bf6 <gpib_write_byte+0x17a>
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   10be2:	88 85       	ldd	r24, Y+8	; 0x08
   10be4:	99 85       	ldd	r25, Y+9	; 0x09
   10be6:	aa 85       	ldd	r26, Y+10	; 0x0a
   10be8:	ed b7       	in	r30, 0x3d	; 61
   10bea:	fe b7       	in	r31, 0x3e	; 62
   10bec:	81 83       	std	Z+1, r24	; 0x01
   10bee:	92 83       	std	Z+2, r25	; 0x02
   10bf0:	a3 83       	std	Z+3, r26	; 0x03
   10bf2:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
                    ch |= TIMEOUT_FLAG;
   10bf6:	2e 85       	ldd	r18, Y+14	; 0x0e
   10bf8:	3f 85       	ldd	r19, Y+15	; 0x0f
   10bfa:	30 64       	ori	r19, 0x40	; 64
   10bfc:	3f 87       	std	Y+15, r19	; 0x0f
   10bfe:	2e 87       	std	Y+14, r18	; 0x0e
   10c00:	b6 c0       	rjmp	.+364    	; 0x10d6e <gpib_write_byte+0x2f2>
                }
                break;

            case GPIB_TX_PUT_DATA:

                if(ch & EOI_FLAG)
   10c02:	8e 85       	ldd	r24, Y+14	; 0x0e
   10c04:	9f 85       	ldd	r25, Y+15	; 0x0f
   10c06:	90 ff       	sbrs	r25, 0
   10c08:	02 c0       	rjmp	.+4      	; 0x10c0e <gpib_write_byte+0x192>
                    GPIB_IO_LOW(EOI);
   10c0a:	28 98       	cbi	0x05, 0	; 5
   10c0c:	01 c0       	rjmp	.+2      	; 0x10c10 <gpib_write_byte+0x194>
                else
#if BOARD == 2
                    GPIB_IO_HI(EOI);
   10c0e:	28 9a       	sbi	0x05, 0	; 5
   10c10:	20 9a       	sbi	0x04, 0	; 4
#else
                    GPIB_PIN_FLOAT_UP(EOI);
#endif

                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   10c12:	8f ef       	ldi	r24, 0xFF	; 255
   10c14:	81 b9       	out	0x01, r24	; 1
   10c16:	8e 85       	ldd	r24, Y+14	; 0x0e
   10c18:	80 95       	com	r24
   10c1a:	82 b9       	out	0x02, r24	; 2
#if BOARD == 2
// Switch to Tristate mode to soeed up Write
                GPIB_IO_HI(PE);
   10c1c:	43 9a       	sbi	0x08, 3	; 8
   10c1e:	3b 9a       	sbi	0x07, 3	; 7
   10c20:	9d e0       	ldi	r25, 0x0D	; 13
   10c22:	9a 95       	dec	r25
   10c24:	f1 f7       	brne	.-4      	; 0x10c22 <gpib_write_byte+0x1a6>
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   10c26:	00 00       	nop
   10c28:	64 ef       	ldi	r22, 0xF4	; 244
   10c2a:	71 e0       	ldi	r23, 0x01	; 1
   10c2c:	80 e0       	ldi	r24, 0x00	; 0
   10c2e:	90 e0       	ldi	r25, 0x00	; 0
   10c30:	c3 dd       	rcall	.-1146   	; 0x107b8 <gpib_timeout_set>
                tx_state = GPIB_TX_SET_DAV_LOW;
   10c32:	13 e0       	ldi	r17, 0x03	; 3
                break;
   10c34:	5c cf       	rjmp	.-328    	; 0x10aee <gpib_write_byte+0x72>

            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   10c36:	29 98       	cbi	0x05, 1	; 5
                gpib_timeout_set(HTIMEOUT);
   10c38:	21 9a       	sbi	0x04, 1	; 4
   10c3a:	64 ef       	ldi	r22, 0xF4	; 244
   10c3c:	71 e0       	ldi	r23, 0x01	; 1
   10c3e:	80 e0       	ldi	r24, 0x00	; 0
   10c40:	90 e0       	ldi	r25, 0x00	; 0
   10c42:	ba dd       	rcall	.-1164   	; 0x107b8 <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_NRFD_LOW;
   10c44:	14 e0       	ldi	r17, 0x04	; 4
                break;

///@brief first device is ready
            case GPIB_TX_WAIT_FOR_NRFD_LOW:
                if (GPIB_PIN_TST(NRFD) == 0)
   10c46:	53 cf       	rjmp	.-346    	; 0x10aee <gpib_write_byte+0x72>
   10c48:	4a 99       	sbic	0x09, 2	; 9
                {
                    gpib_timeout_set(HTIMEOUT);
   10c4a:	07 c0       	rjmp	.+14     	; 0x10c5a <gpib_write_byte+0x1de>
   10c4c:	64 ef       	ldi	r22, 0xF4	; 244
   10c4e:	71 e0       	ldi	r23, 0x01	; 1
   10c50:	80 e0       	ldi	r24, 0x00	; 0
   10c52:	90 e0       	ldi	r25, 0x00	; 0
   10c54:	b1 dd       	rcall	.-1182   	; 0x107b8 <gpib_timeout_set>
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   10c56:	15 e0       	ldi	r17, 0x05	; 5
                    break;
   10c58:	4a cf       	rjmp	.-364    	; 0x10aee <gpib_write_byte+0x72>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10c5a:	80 91 01 1d 	lds	r24, 0x1D01	; 0x801d01 <gpib_timer+0x8>
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
                    break;
                }
                if (gpib_timeout_test())
   10c5e:	88 23       	and	r24, r24
   10c60:	09 f4       	brne	.+2      	; 0x10c64 <gpib_write_byte+0x1e8>
   10c62:	45 cf       	rjmp	.-374    	; 0x10aee <gpib_write_byte+0x72>
                {
                    ch |= TIMEOUT_FLAG;
   10c64:	ee 85       	ldd	r30, Y+14	; 0x0e
   10c66:	ff 85       	ldd	r31, Y+15	; 0x0f
   10c68:	f0 64       	ori	r31, 0x40	; 64
   10c6a:	ff 87       	std	Y+15, r31	; 0x0f
   10c6c:	ee 87       	std	Y+14, r30	; 0x0e
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10c6e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10c72:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10c76:	85 70       	andi	r24, 0x05	; 5
   10c78:	99 27       	eor	r25, r25
   10c7a:	89 2b       	or	r24, r25
   10c7c:	09 f4       	brne	.+2      	; 0x10c80 <gpib_write_byte+0x204>
   10c7e:	77 c0       	rjmp	.+238    	; 0x10d6e <gpib_write_byte+0x2f2>
                        printf("<BUS waiting for NRFD==0>\n");
   10c80:	ed b7       	in	r30, 0x3d	; 61
   10c82:	fe b7       	in	r31, 0x3e	; 62
   10c84:	21 82       	std	Z+1, r2	; 0x01
   10c86:	32 82       	std	Z+2, r3	; 0x02
   10c88:	43 82       	std	Z+3, r4	; 0x03
   10c8a:	44 c0       	rjmp	.+136    	; 0x10d14 <gpib_write_byte+0x298>
                }
                break;

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
   10c8c:	4b 99       	sbic	0x09, 3	; 9
   10c8e:	6b c0       	rjmp	.+214    	; 0x10d66 <gpib_write_byte+0x2ea>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10c90:	80 91 01 1d 	lds	r24, 0x1D01	; 0x801d01 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   10c94:	88 23       	and	r24, r24
   10c96:	09 f4       	brne	.+2      	; 0x10c9a <gpib_write_byte+0x21e>
   10c98:	2a cf       	rjmp	.-428    	; 0x10aee <gpib_write_byte+0x72>
                {
                    ch |= TIMEOUT_FLAG;
   10c9a:	2e 85       	ldd	r18, Y+14	; 0x0e
   10c9c:	3f 85       	ldd	r19, Y+15	; 0x0f
   10c9e:	30 64       	ori	r19, 0x40	; 64
   10ca0:	3f 87       	std	Y+15, r19	; 0x0f
   10ca2:	2e 87       	std	Y+14, r18	; 0x0e
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10ca4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10ca8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10cac:	85 70       	andi	r24, 0x05	; 5
   10cae:	99 27       	eor	r25, r25
   10cb0:	89 2b       	or	r24, r25
   10cb2:	09 f4       	brne	.+2      	; 0x10cb6 <gpib_write_byte+0x23a>
   10cb4:	5c c0       	rjmp	.+184    	; 0x10d6e <gpib_write_byte+0x2f2>
                        printf("<BUS waiting for NDAC==1>\n");
   10cb6:	ed b7       	in	r30, 0x3d	; 61
   10cb8:	fe b7       	in	r31, 0x3e	; 62
   10cba:	61 82       	std	Z+1, r6	; 0x01
   10cbc:	72 82       	std	Z+2, r7	; 0x02
   10cbe:	83 82       	std	Z+3, r8	; 0x03
   10cc0:	29 c0       	rjmp	.+82     	; 0x10d14 <gpib_write_byte+0x298>
                break;

///@release BUS
            case GPIB_TX_SET_DAV_HI:
#if BOARD == 2
                GPIB_IO_HI(DAV);
   10cc2:	29 9a       	sbi	0x05, 1	; 5
   10cc4:	21 9a       	sbi	0x04, 1	; 4
   10cc6:	fd e0       	ldi	r31, 0x0D	; 13
   10cc8:	fa 95       	dec	r31
#else
                GPIB_PIN_FLOAT_UP(DAV);
#endif
                GPIB_BUS_SETTLE();                // give some time

                gpib_bus_read_init(0);            // Free BUS, NOT busy
   10cca:	f1 f7       	brne	.-4      	; 0x10cc8 <gpib_write_byte+0x24c>
   10ccc:	00 00       	nop
   10cce:	80 e0       	ldi	r24, 0x00	; 0
   10cd0:	90 e0       	ldi	r25, 0x00	; 0

                gpib_timeout_set(HTIMEOUT);
   10cd2:	7c dd       	rcall	.-1288   	; 0x107cc <gpib_bus_read_init>
   10cd4:	64 ef       	ldi	r22, 0xF4	; 244
   10cd6:	71 e0       	ldi	r23, 0x01	; 1
   10cd8:	80 e0       	ldi	r24, 0x00	; 0
   10cda:	90 e0       	ldi	r25, 0x00	; 0
   10cdc:	6d dd       	rcall	.-1318   	; 0x107b8 <gpib_timeout_set>
                tx_state = GPIB_TX_WAIT_FOR_DAV_HI;
   10cde:	17 e0       	ldi	r17, 0x07	; 7
                break;
   10ce0:	06 cf       	rjmp	.-500    	; 0x10aee <gpib_write_byte+0x72>

/// We are in read mode now
///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
   10ce2:	19 99       	sbic	0x03, 1	; 3
   10ce4:	42 c0       	rjmp	.+132    	; 0x10d6a <gpib_write_byte+0x2ee>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   10ce6:	80 91 01 1d 	lds	r24, 0x1D01	; 0x801d01 <gpib_timer+0x8>
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
                    break;
                }
                if (gpib_timeout_test())
   10cea:	88 23       	and	r24, r24
   10cec:	09 f4       	brne	.+2      	; 0x10cf0 <gpib_write_byte+0x274>
   10cee:	ff ce       	rjmp	.-514    	; 0x10aee <gpib_write_byte+0x72>
                {
                    ch |= TIMEOUT_FLAG;
   10cf0:	2e 85       	ldd	r18, Y+14	; 0x0e
   10cf2:	3f 85       	ldd	r19, Y+15	; 0x0f
   10cf4:	30 64       	ori	r19, 0x40	; 64
   10cf6:	3f 87       	std	Y+15, r19	; 0x0f
   10cf8:	2e 87       	std	Y+14, r18	; 0x0e
                    tx_state = GPIB_TX_ERROR;
                    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10cfa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10cfe:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10d02:	85 70       	andi	r24, 0x05	; 5
   10d04:	99 27       	eor	r25, r25
   10d06:	89 2b       	or	r24, r25
   10d08:	91 f1       	breq	.+100    	; 0x10d6e <gpib_write_byte+0x2f2>
                        printf("<BUS waiting for DAV==1>\n");
   10d0a:	ed b7       	in	r30, 0x3d	; 61
   10d0c:	fe b7       	in	r31, 0x3e	; 62
   10d0e:	c1 82       	std	Z+1, r12	; 0x01
   10d10:	d2 82       	std	Z+2, r13	; 0x02
   10d12:	e3 82       	std	Z+3, r14	; 0x03
   10d14:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   10d18:	2a c0       	rjmp	.+84     	; 0x10d6e <gpib_write_byte+0x2f2>
            case GPIB_TX_FINISH:
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
                if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   10d1a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   10d1e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   10d22:	85 70       	andi	r24, 0x05	; 5
   10d24:	99 27       	eor	r25, r25
   10d26:	89 2b       	or	r24, r25
   10d28:	b1 f0       	breq	.+44     	; 0x10d56 <gpib_write_byte+0x2da>
                    printf("<NRFD=%d,NDAV=%d>\n", GPIB_PIN_TST(NRFD),GPIB_PIN_TST(NDAC));
   10d2a:	89 b1       	in	r24, 0x09	; 9
   10d2c:	99 b1       	in	r25, 0x09	; 9
   10d2e:	93 fb       	bst	r25, 3
   10d30:	99 27       	eor	r25, r25
   10d32:	90 f9       	bld	r25, 0
   10d34:	ed b7       	in	r30, 0x3d	; 61
   10d36:	fe b7       	in	r31, 0x3e	; 62
   10d38:	96 83       	std	Z+6, r25	; 0x06
   10d3a:	17 82       	std	Z+7, r1	; 0x07
   10d3c:	82 fb       	bst	r24, 2
   10d3e:	88 27       	eor	r24, r24
   10d40:	80 f9       	bld	r24, 0
   10d42:	84 83       	std	Z+4, r24	; 0x04
   10d44:	15 82       	std	Z+5, r1	; 0x05
   10d46:	84 ef       	ldi	r24, 0xF4	; 244
   10d48:	9f e0       	ldi	r25, 0x0F	; 15
   10d4a:	a0 e0       	ldi	r26, 0x00	; 0
   10d4c:	81 83       	std	Z+1, r24	; 0x01
   10d4e:	92 83       	std	Z+2, r25	; 0x02
   10d50:	a3 83       	std	Z+3, r26	; 0x03
   10d52:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
// Free BUS, BUSY on error
                gpib_bus_read_init(1);
   10d56:	81 e0       	ldi	r24, 0x01	; 1
   10d58:	90 e0       	ldi	r25, 0x00	; 0
   10d5a:	38 dd       	rcall	.-1424   	; 0x107cc <gpib_bus_read_init>
                tx_state = GPIB_TX_DONE;
                break;
   10d5c:	0a c0       	rjmp	.+20     	; 0x10d72 <gpib_write_byte+0x2f6>
// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
   10d5e:	1a 30       	cpi	r17, 0x0A	; 10
   10d60:	09 f0       	breq	.+2      	; 0x10d64 <gpib_write_byte+0x2e8>
   10d62:	c5 ce       	rjmp	.-630    	; 0x10aee <gpib_write_byte+0x72>
   10d64:	06 c0       	rjmp	.+12     	; 0x10d72 <gpib_write_byte+0x2f6>

///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)       // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   10d66:	16 e0       	ldi	r17, 0x06	; 6
   10d68:	c2 ce       	rjmp	.-636    	; 0x10aee <gpib_write_byte+0x72>
/// We are in read mode now
///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
   10d6a:	18 e0       	ldi	r17, 0x08	; 8
   10d6c:	c0 ce       	rjmp	.-640    	; 0x10aee <gpib_write_byte+0x72>
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   10d6e:	19 e0       	ldi	r17, 0x09	; 9
   10d70:	be ce       	rjmp	.-644    	; 0x10aee <gpib_write_byte+0x72>
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   10d72:	8e 85       	ldd	r24, Y+14	; 0x0e
   10d74:	9f 85       	ldd	r25, Y+15	; 0x0f
   10d76:	2f 96       	adiw	r28, 0x0f	; 15
   10d78:	0f b6       	in	r0, 0x3f	; 63
   10d7a:	f8 94       	cli
   10d7c:	de bf       	out	0x3e, r29	; 62
   10d7e:	0f be       	out	0x3f, r0	; 63
   10d80:	cd bf       	out	0x3d, r28	; 61
   10d82:	df 91       	pop	r29
   10d84:	cf 91       	pop	r28
   10d86:	1f 91       	pop	r17
   10d88:	ef 90       	pop	r14
   10d8a:	df 90       	pop	r13
   10d8c:	cf 90       	pop	r12
   10d8e:	8f 90       	pop	r8
   10d90:	7f 90       	pop	r7
   10d92:	6f 90       	pop	r6
   10d94:	4f 90       	pop	r4
   10d96:	3f 90       	pop	r3
   10d98:	2f 90       	pop	r2
   10d9a:	08 95       	ret

00010d9c <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   10d9c:	cf 93       	push	r28
   10d9e:	df 93       	push	r29
   10da0:	ec 01       	movw	r28, r24
    if(fo == NULL)
   10da2:	89 2b       	or	r24, r25
   10da4:	21 f4       	brne	.+8      	; 0x10dae <gpib_decode_header+0x12>
        fo = stdout;
   10da6:	c0 91 db 1c 	lds	r28, 0x1CDB	; 0x801cdb <__iob+0x2>
   10daa:	d0 91 dc 1c 	lds	r29, 0x1CDC	; 0x801cdc <__iob+0x3>

    fprintf(fo,"===========================================\n");
   10dae:	be 01       	movw	r22, r28
   10db0:	81 e0       	ldi	r24, 0x01	; 1
   10db2:	9c e0       	ldi	r25, 0x0C	; 12
   10db4:	0e 94 d3 74 	call	0xe9a6	; 0xe9a6 <fputs>
    fprintf(fo,"GPIB bus state\n");
   10db8:	be 01       	movw	r22, r28
   10dba:	8e e2       	ldi	r24, 0x2E	; 46
   10dbc:	9c e0       	ldi	r25, 0x0C	; 12
   10dbe:	0e 94 d3 74 	call	0xe9a6	; 0xe9a6 <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   10dc2:	be 01       	movw	r22, r28
   10dc4:	8e e3       	ldi	r24, 0x3E	; 62
   10dc6:	9c e0       	ldi	r25, 0x0C	; 12
   10dc8:	0e 94 d3 74 	call	0xe9a6	; 0xe9a6 <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   10dcc:	be 01       	movw	r22, r28
   10dce:	82 e5       	ldi	r24, 0x52	; 82
   10dd0:	9c e0       	ldi	r25, 0x0C	; 12
   10dd2:	0e 94 d3 74 	call	0xe9a6	; 0xe9a6 <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   10dd6:	be 01       	movw	r22, r28
   10dd8:	85 e7       	ldi	r24, 0x75	; 117
   10dda:	9c e0       	ldi	r25, 0x0C	; 12
   10ddc:	0e 94 d3 74 	call	0xe9a6	; 0xe9a6 <fputs>
    fprintf(fo,"     A = ATN\n");
   10de0:	be 01       	movw	r22, r28
   10de2:	8f e9       	ldi	r24, 0x9F	; 159
   10de4:	9c e0       	ldi	r25, 0x0C	; 12
   10de6:	0e 94 d3 74 	call	0xe9a6	; 0xe9a6 <fputs>
    fprintf(fo,"      E = EOI\n");
   10dea:	be 01       	movw	r22, r28
   10dec:	8d ea       	ldi	r24, 0xAD	; 173
   10dee:	9c e0       	ldi	r25, 0x0C	; 12
   10df0:	0e 94 d3 74 	call	0xe9a6	; 0xe9a6 <fputs>
    fprintf(fo,"       S = SRQ\n");
   10df4:	be 01       	movw	r22, r28
   10df6:	8c eb       	ldi	r24, 0xBC	; 188
   10df8:	9c e0       	ldi	r25, 0x0C	; 12
   10dfa:	0e 94 d3 74 	call	0xe9a6	; 0xe9a6 <fputs>
    fprintf(fo,"        R = REN\n");
   10dfe:	be 01       	movw	r22, r28
   10e00:	8c ec       	ldi	r24, 0xCC	; 204
   10e02:	9c e0       	ldi	r25, 0x0C	; 12
   10e04:	0e 94 d3 74 	call	0xe9a6	; 0xe9a6 <fputs>
    fprintf(fo,"         I = IFC\n");
   10e08:	be 01       	movw	r22, r28
   10e0a:	8d ed       	ldi	r24, 0xDD	; 221
   10e0c:	9c e0       	ldi	r25, 0x0C	; 12
   10e0e:	0e 94 d3 74 	call	0xe9a6	; 0xe9a6 <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   10e12:	be 01       	movw	r22, r28
   10e14:	8f ee       	ldi	r24, 0xEF	; 239
   10e16:	9c e0       	ldi	r25, 0x0C	; 12
   10e18:	0e 94 d3 74 	call	0xe9a6	; 0xe9a6 <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   10e1c:	be 01       	movw	r22, r28
   10e1e:	81 e1       	ldi	r24, 0x11	; 17
   10e20:	9d e0       	ldi	r25, 0x0D	; 13
   10e22:	0e 94 d3 74 	call	0xe9a6	; 0xe9a6 <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   10e26:	be 01       	movw	r22, r28
   10e28:	89 e2       	ldi	r24, 0x29	; 41
   10e2a:	9d e0       	ldi	r25, 0x0D	; 13
   10e2c:	0e 94 d3 74 	call	0xe9a6	; 0xe9a6 <fputs>
    fprintf(fo,"              GPIB commands\n");
   10e30:	be 01       	movw	r22, r28
   10e32:	84 e4       	ldi	r24, 0x44	; 68
   10e34:	9d e0       	ldi	r25, 0x0D	; 13
   10e36:	0e 94 d3 74 	call	0xe9a6	; 0xe9a6 <fputs>
}
   10e3a:	df 91       	pop	r29
   10e3c:	cf 91       	pop	r28
   10e3e:	08 95       	ret

00010e40 <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   10e40:	a9 e8       	ldi	r26, 0x89	; 137
   10e42:	b0 e0       	ldi	r27, 0x00	; 0
   10e44:	e6 e2       	ldi	r30, 0x26	; 38
   10e46:	f7 e8       	ldi	r31, 0x87	; 135
   10e48:	0c 94 de e0 	jmp	0x1c1bc	; 0x1c1bc <__prologue_saves__+0xc>
   10e4c:	8c 01       	movw	r16, r24
   10e4e:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   10e50:	1a 86       	std	Y+10, r1	; 0x0a
   10e52:	4c 01       	movw	r8, r24
   10e54:	88 24       	eor	r8, r8
   10e56:	44 e0       	ldi	r20, 0x04	; 4
   10e58:	94 22       	and	r9, r20
   10e5a:	ce 01       	movw	r24, r28
   10e5c:	0a 96       	adiw	r24, 0x0a	; 10
   10e5e:	7c 01       	movw	r14, r24

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   10e60:	62 30       	cpi	r22, 0x02	; 2
   10e62:	71 05       	cpc	r23, r1
   10e64:	e8 f4       	brcc	.+58     	; 0x10ea0 <gpib_trace_display+0x60>
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   10e66:	81 14       	cp	r8, r1
   10e68:	91 04       	cpc	r9, r1
   10e6a:	29 f4       	brne	.+10     	; 0x10e76 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   10e6c:	80 2f       	mov	r24, r16

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   10e6e:	90 ee       	ldi	r25, 0xE0	; 224
   10e70:	90 0f       	add	r25, r16
   10e72:	9f 35       	cpi	r25, 0x5F	; 95
   10e74:	08 f0       	brcs	.+2      	; 0x10e78 <gpib_trace_display+0x38>
    str[0] = 0;

// Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                  // Data
   10e76:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   10e78:	90 e0       	ldi	r25, 0x00	; 0
   10e7a:	ed b7       	in	r30, 0x3d	; 61
   10e7c:	fe b7       	in	r31, 0x3e	; 62
   10e7e:	91 87       	std	Z+9, r25	; 0x09
   10e80:	80 87       	std	Z+8, r24	; 0x08
   10e82:	c8 01       	movw	r24, r16
   10e84:	99 27       	eor	r25, r25
   10e86:	97 83       	std	Z+7, r25	; 0x07
   10e88:	86 83       	std	Z+6, r24	; 0x06
   10e8a:	83 eb       	ldi	r24, 0xB3	; 179
   10e8c:	9f e0       	ldi	r25, 0x0F	; 15
   10e8e:	a0 e0       	ldi	r26, 0x00	; 0
   10e90:	83 83       	std	Z+3, r24	; 0x03
   10e92:	94 83       	std	Z+4, r25	; 0x04
   10e94:	a5 83       	std	Z+5, r26	; 0x05
   10e96:	f2 82       	std	Z+2, r15	; 0x02
   10e98:	e1 82       	std	Z+1, r14	; 0x01
   10e9a:	0e 94 2f 44 	call	0x885e	; 0x885e <sprintf_P>
   10e9e:	0c c0       	rjmp	.+24     	; 0x10eb8 <gpib_trace_display+0x78>
    }
    else
    {
        sprintf(str, "     ");
   10ea0:	8d ea       	ldi	r24, 0xAD	; 173
   10ea2:	9f e0       	ldi	r25, 0x0F	; 15
   10ea4:	a0 e0       	ldi	r26, 0x00	; 0
   10ea6:	ed b7       	in	r30, 0x3d	; 61
   10ea8:	fe b7       	in	r31, 0x3e	; 62
   10eaa:	83 83       	std	Z+3, r24	; 0x03
   10eac:	94 83       	std	Z+4, r25	; 0x04
   10eae:	a5 83       	std	Z+5, r26	; 0x05
   10eb0:	f2 82       	std	Z+2, r15	; 0x02
   10eb2:	e1 82       	std	Z+1, r14	; 0x01
   10eb4:	0e 94 2f 44 	call	0x885e	; 0x885e <sprintf_P>
    }

    tmp = str + strlen(str);
   10eb8:	f7 01       	movw	r30, r14
   10eba:	01 90       	ld	r0, Z+
   10ebc:	00 20       	and	r0, r0
   10ebe:	e9 f7       	brne	.-6      	; 0x10eba <gpib_trace_display+0x7a>
   10ec0:	31 97       	sbiw	r30, 0x01	; 1
   10ec2:	cf 01       	movw	r24, r30
   10ec4:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   10ec6:	81 14       	cp	r8, r1
   10ec8:	91 04       	cpc	r9, r1
   10eca:	11 f0       	breq	.+4      	; 0x10ed0 <gpib_trace_display+0x90>
        *tmp++ = 'A';
   10ecc:	21 e4       	ldi	r18, 0x41	; 65
   10ece:	01 c0       	rjmp	.+2      	; 0x10ed2 <gpib_trace_display+0x92>
    else
        *tmp++ = '-';
   10ed0:	2d e2       	ldi	r18, 0x2D	; 45
   10ed2:	20 83       	st	Z, r18
   10ed4:	dc 01       	movw	r26, r24
   10ed6:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   10ed8:	10 ff       	sbrs	r17, 0
   10eda:	02 c0       	rjmp	.+4      	; 0x10ee0 <gpib_trace_display+0xa0>
        *tmp++ = 'E';
   10edc:	25 e4       	ldi	r18, 0x45	; 69
   10ede:	01 c0       	rjmp	.+2      	; 0x10ee2 <gpib_trace_display+0xa2>
    else
        *tmp++ = '-';
   10ee0:	2d e2       	ldi	r18, 0x2D	; 45
   10ee2:	fc 01       	movw	r30, r24
   10ee4:	20 83       	st	Z, r18
   10ee6:	fd 01       	movw	r30, r26
   10ee8:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   10eea:	11 ff       	sbrs	r17, 1
   10eec:	02 c0       	rjmp	.+4      	; 0x10ef2 <gpib_trace_display+0xb2>
        *tmp++ = 'S';
   10eee:	83 e5       	ldi	r24, 0x53	; 83
   10ef0:	01 c0       	rjmp	.+2      	; 0x10ef4 <gpib_trace_display+0xb4>
    else
        *tmp++ = '-';
   10ef2:	8d e2       	ldi	r24, 0x2D	; 45
   10ef4:	8c 93       	st	X, r24
   10ef6:	df 01       	movw	r26, r30
   10ef8:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   10efa:	13 ff       	sbrs	r17, 3
   10efc:	02 c0       	rjmp	.+4      	; 0x10f02 <gpib_trace_display+0xc2>
        *tmp++ = 'R';
   10efe:	82 e5       	ldi	r24, 0x52	; 82
   10f00:	01 c0       	rjmp	.+2      	; 0x10f04 <gpib_trace_display+0xc4>
    else
        *tmp++ = '-';
   10f02:	8d e2       	ldi	r24, 0x2D	; 45
   10f04:	80 83       	st	Z, r24
   10f06:	fd 01       	movw	r30, r26
   10f08:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   10f0a:	14 ff       	sbrs	r17, 4
   10f0c:	02 c0       	rjmp	.+4      	; 0x10f12 <gpib_trace_display+0xd2>
        *tmp++ = 'I';
   10f0e:	89 e4       	ldi	r24, 0x49	; 73
   10f10:	01 c0       	rjmp	.+2      	; 0x10f14 <gpib_trace_display+0xd4>
    else
        *tmp++ = '-';
   10f12:	8d e2       	ldi	r24, 0x2D	; 45
   10f14:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   10f16:	a1 14       	cp	r10, r1
   10f18:	b1 04       	cpc	r11, r1
   10f1a:	d1 f4       	brne	.+52     	; 0x10f50 <gpib_trace_display+0x110>
   10f1c:	df 01       	movw	r26, r30
   10f1e:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   10f20:	15 ff       	sbrs	r17, 5
   10f22:	02 c0       	rjmp	.+4      	; 0x10f28 <gpib_trace_display+0xe8>
            *tmp++ = 'P';
   10f24:	80 e5       	ldi	r24, 0x50	; 80
   10f26:	01 c0       	rjmp	.+2      	; 0x10f2a <gpib_trace_display+0xea>
        else
            *tmp++ = '-';
   10f28:	8d e2       	ldi	r24, 0x2D	; 45
   10f2a:	80 83       	st	Z, r24
   10f2c:	fd 01       	movw	r30, r26
   10f2e:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   10f30:	16 ff       	sbrs	r17, 6
   10f32:	02 c0       	rjmp	.+4      	; 0x10f38 <gpib_trace_display+0xf8>
            *tmp++ = 'T';
   10f34:	84 e5       	ldi	r24, 0x54	; 84
   10f36:	01 c0       	rjmp	.+2      	; 0x10f3a <gpib_trace_display+0xfa>
        else
            *tmp++ = '-';
   10f38:	8d e2       	ldi	r24, 0x2D	; 45
   10f3a:	8c 93       	st	X, r24
   10f3c:	cf 01       	movw	r24, r30
   10f3e:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   10f40:	6c 01       	movw	r12, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   10f42:	17 ff       	sbrs	r17, 7
   10f44:	02 c0       	rjmp	.+4      	; 0x10f4a <gpib_trace_display+0x10a>
            *tmp++ = 'B';
   10f46:	82 e4       	ldi	r24, 0x42	; 66
   10f48:	01 c0       	rjmp	.+2      	; 0x10f4c <gpib_trace_display+0x10c>
        else
            *tmp++ = '-';
   10f4a:	8d e2       	ldi	r24, 0x2D	; 45
   10f4c:	80 83       	st	Z, r24
   10f4e:	08 c0       	rjmp	.+16     	; 0x10f60 <gpib_trace_display+0x120>
    }
    else
    {
// not used when tracing
        *tmp++ = '-';
   10f50:	8d e2       	ldi	r24, 0x2D	; 45
   10f52:	80 83       	st	Z, r24
        *tmp++ = '-';
   10f54:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   10f56:	6f 01       	movw	r12, r30
   10f58:	43 e0       	ldi	r20, 0x03	; 3
   10f5a:	c4 0e       	add	r12, r20
   10f5c:	d1 1c       	adc	r13, r1
   10f5e:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   10f60:	f6 01       	movw	r30, r12
   10f62:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   10f64:	f1 e0       	ldi	r31, 0x01	; 1
   10f66:	af 1a       	sub	r10, r31
   10f68:	b1 08       	sbc	r11, r1
   10f6a:	42 e0       	ldi	r20, 0x02	; 2
   10f6c:	a4 16       	cp	r10, r20
   10f6e:	b1 04       	cpc	r11, r1
   10f70:	f0 f4       	brcc	.+60     	; 0x10fae <gpib_trace_display+0x16e>
    {
        if(status & DAV_FLAG)
   10f72:	15 ff       	sbrs	r17, 5
   10f74:	03 c0       	rjmp	.+6      	; 0x10f7c <gpib_trace_display+0x13c>
            strcat(str,"  DAV");
   10f76:	61 e6       	ldi	r22, 0x61	; 97
   10f78:	7d e0       	ldi	r23, 0x0D	; 13
   10f7a:	02 c0       	rjmp	.+4      	; 0x10f80 <gpib_trace_display+0x140>
        else
            strcat(str,"     ");
   10f7c:	65 e6       	ldi	r22, 0x65	; 101
   10f7e:	74 e0       	ldi	r23, 0x04	; 4
   10f80:	c7 01       	movw	r24, r14
   10f82:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <strcat>
        if(status & NRFD_FLAG)
   10f86:	16 ff       	sbrs	r17, 6
   10f88:	03 c0       	rjmp	.+6      	; 0x10f90 <gpib_trace_display+0x150>
            strcat(str," NRFD");
   10f8a:	67 e6       	ldi	r22, 0x67	; 103
   10f8c:	7d e0       	ldi	r23, 0x0D	; 13
   10f8e:	02 c0       	rjmp	.+4      	; 0x10f94 <gpib_trace_display+0x154>
        else
            strcat(str,"     ");
   10f90:	65 e6       	ldi	r22, 0x65	; 101
   10f92:	74 e0       	ldi	r23, 0x04	; 4
   10f94:	c7 01       	movw	r24, r14
   10f96:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <strcat>
        if(status & NDAC_FLAG)
   10f9a:	17 ff       	sbrs	r17, 7
   10f9c:	03 c0       	rjmp	.+6      	; 0x10fa4 <gpib_trace_display+0x164>
            strcat(str," NDAC");
   10f9e:	6d e6       	ldi	r22, 0x6D	; 109
   10fa0:	7d e0       	ldi	r23, 0x0D	; 13
   10fa2:	02 c0       	rjmp	.+4      	; 0x10fa8 <gpib_trace_display+0x168>
        else
            strcat(str,"     ");
   10fa4:	65 e6       	ldi	r22, 0x65	; 101
   10fa6:	74 e0       	ldi	r23, 0x04	; 4
   10fa8:	c7 01       	movw	r24, r14
   10faa:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <strcat>
    }

    if( (status & ATN_FLAG) )
   10fae:	81 14       	cp	r8, r1
   10fb0:	91 04       	cpc	r9, r1
   10fb2:	09 f4       	brne	.+2      	; 0x10fb6 <gpib_trace_display+0x176>
   10fb4:	5a c0       	rjmp	.+180    	; 0x1106a <gpib_trace_display+0x22a>
    {
        int i;
        int cmd = status & CMD_MASK;
   10fb6:	c8 01       	movw	r24, r16
   10fb8:	8f 77       	andi	r24, 0x7F	; 127
   10fba:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   10fbc:	9c 01       	movw	r18, r24
   10fbe:	20 52       	subi	r18, 0x20	; 32
   10fc0:	31 09       	sbc	r19, r1
   10fc2:	2f 31       	cpi	r18, 0x1F	; 31
   10fc4:	31 05       	cpc	r19, r1
   10fc6:	48 f4       	brcc	.+18     	; 0x10fda <gpib_trace_display+0x19a>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   10fc8:	0f 71       	andi	r16, 0x1F	; 31
   10fca:	11 27       	eor	r17, r17
   10fcc:	ed b7       	in	r30, 0x3d	; 61
   10fce:	fe b7       	in	r31, 0x3e	; 62
   10fd0:	17 83       	std	Z+7, r17	; 0x07
   10fd2:	06 83       	std	Z+6, r16	; 0x06
   10fd4:	82 ea       	ldi	r24, 0xA2	; 162
   10fd6:	9f e0       	ldi	r25, 0x0F	; 15
   10fd8:	0e c0       	rjmp	.+28     	; 0x10ff6 <gpib_trace_display+0x1b6>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   10fda:	9c 01       	movw	r18, r24
   10fdc:	20 54       	subi	r18, 0x40	; 64
   10fde:	31 09       	sbc	r19, r1
   10fe0:	2f 30       	cpi	r18, 0x0F	; 15
   10fe2:	31 05       	cpc	r19, r1
   10fe4:	88 f4       	brcc	.+34     	; 0x11008 <gpib_trace_display+0x1c8>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   10fe6:	0f 71       	andi	r16, 0x1F	; 31
   10fe8:	11 27       	eor	r17, r17
   10fea:	ed b7       	in	r30, 0x3d	; 61
   10fec:	fe b7       	in	r31, 0x3e	; 62
   10fee:	17 83       	std	Z+7, r17	; 0x07
   10ff0:	06 83       	std	Z+6, r16	; 0x06
   10ff2:	87 e9       	ldi	r24, 0x97	; 151
   10ff4:	9f e0       	ldi	r25, 0x0F	; 15
   10ff6:	a0 e0       	ldi	r26, 0x00	; 0
   10ff8:	83 83       	std	Z+3, r24	; 0x03
   10ffa:	94 83       	std	Z+4, r25	; 0x04
   10ffc:	a5 83       	std	Z+5, r26	; 0x05
   10ffe:	d2 82       	std	Z+2, r13	; 0x02
   11000:	c1 82       	std	Z+1, r12	; 0x01
   11002:	0e 94 2f 44 	call	0x885e	; 0x885e <sprintf_P>
   11006:	31 c0       	rjmp	.+98     	; 0x1106a <gpib_trace_display+0x22a>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   11008:	9c 01       	movw	r18, r24
   1100a:	20 56       	subi	r18, 0x60	; 96
   1100c:	31 09       	sbc	r19, r1
   1100e:	20 31       	cpi	r18, 0x10	; 16
   11010:	31 05       	cpc	r19, r1
   11012:	28 f0       	brcs	.+10     	; 0x1101e <gpib_trace_display+0x1de>
   11014:	e2 e8       	ldi	r30, 0x82	; 130
   11016:	f1 e0       	ldi	r31, 0x01	; 1
   11018:	00 e0       	ldi	r16, 0x00	; 0
   1101a:	10 e0       	ldi	r17, 0x00	; 0
   1101c:	0b c0       	rjmp	.+22     	; 0x11034 <gpib_trace_display+0x1f4>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   1101e:	0f 71       	andi	r16, 0x1F	; 31
   11020:	11 27       	eor	r17, r17
   11022:	ed b7       	in	r30, 0x3d	; 61
   11024:	fe b7       	in	r31, 0x3e	; 62
   11026:	17 83       	std	Z+7, r17	; 0x07
   11028:	06 83       	std	Z+6, r16	; 0x06
   1102a:	8c e8       	ldi	r24, 0x8C	; 140
   1102c:	9f e0       	ldi	r25, 0x0F	; 15
   1102e:	e3 cf       	rjmp	.-58     	; 0x10ff6 <gpib_trace_display+0x1b6>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   11030:	0f 5f       	subi	r16, 0xFF	; 255
   11032:	1f 4f       	sbci	r17, 0xFF	; 255
   11034:	20 81       	ld	r18, Z
   11036:	31 81       	ldd	r19, Z+1	; 0x01
   11038:	2f 3f       	cpi	r18, 0xFF	; 255
   1103a:	4f ef       	ldi	r20, 0xFF	; 255
   1103c:	34 07       	cpc	r19, r20
   1103e:	a9 f0       	breq	.+42     	; 0x1106a <gpib_trace_display+0x22a>
   11040:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   11042:	82 17       	cp	r24, r18
   11044:	93 07       	cpc	r25, r19
   11046:	a1 f7       	brne	.-24     	; 0x11030 <gpib_trace_display+0x1f0>
                {
                    strcat(tmp," ");
   11048:	69 e6       	ldi	r22, 0x69	; 105
   1104a:	74 e0       	ldi	r23, 0x04	; 4
   1104c:	c6 01       	movw	r24, r12
   1104e:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   11052:	f8 01       	movw	r30, r16
   11054:	ee 0f       	add	r30, r30
   11056:	ff 1f       	adc	r31, r31
   11058:	ee 0f       	add	r30, r30
   1105a:	ff 1f       	adc	r31, r31
   1105c:	ee 57       	subi	r30, 0x7E	; 126
   1105e:	fe 4f       	sbci	r31, 0xFE	; 254
   11060:	62 81       	ldd	r22, Z+2	; 0x02
   11062:	73 81       	ldd	r23, Z+3	; 0x03
   11064:	c6 01       	movw	r24, r12
   11066:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   1106a:	20 91 7b 19 	lds	r18, 0x197B	; 0x80197b <gpib_log_fp>
   1106e:	30 91 7c 19 	lds	r19, 0x197C	; 0x80197c <gpib_log_fp+0x1>
   11072:	80 91 db 1c 	lds	r24, 0x1CDB	; 0x801cdb <__iob+0x2>
   11076:	90 91 dc 1c 	lds	r25, 0x1CDC	; 0x801cdc <__iob+0x3>
   1107a:	23 2b       	or	r18, r19
   1107c:	21 f4       	brne	.+8      	; 0x11086 <gpib_trace_display+0x246>
        gpib_log_fp = stdout;
   1107e:	90 93 7c 19 	sts	0x197C, r25	; 0x80197c <gpib_log_fp+0x1>
   11082:	80 93 7b 19 	sts	0x197B, r24	; 0x80197b <gpib_log_fp>

// Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   11086:	20 91 7b 19 	lds	r18, 0x197B	; 0x80197b <gpib_log_fp>
   1108a:	30 91 7c 19 	lds	r19, 0x197C	; 0x80197c <gpib_log_fp+0x1>
   1108e:	82 17       	cp	r24, r18
   11090:	93 07       	cpc	r25, r19
   11092:	19 f0       	breq	.+6      	; 0x1109a <gpib_trace_display+0x25a>
        puts(str);
   11094:	c7 01       	movw	r24, r14
   11096:	0e 94 eb 74 	call	0xe9d6	; 0xe9d6 <puts>

// Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   1109a:	ed b7       	in	r30, 0x3d	; 61
   1109c:	fe b7       	in	r31, 0x3e	; 62
   1109e:	f6 82       	std	Z+6, r15	; 0x06
   110a0:	e5 82       	std	Z+5, r14	; 0x05
   110a2:	83 e7       	ldi	r24, 0x73	; 115
   110a4:	9d e0       	ldi	r25, 0x0D	; 13
   110a6:	94 83       	std	Z+4, r25	; 0x04
   110a8:	83 83       	std	Z+3, r24	; 0x03
   110aa:	80 91 7b 19 	lds	r24, 0x197B	; 0x80197b <gpib_log_fp>
   110ae:	90 91 7c 19 	lds	r25, 0x197C	; 0x80197c <gpib_log_fp+0x1>
   110b2:	92 83       	std	Z+2, r25	; 0x02
   110b4:	81 83       	std	Z+1, r24	; 0x01
   110b6:	0e 94 93 7c 	call	0xf926	; 0xf926 <fprintf>
}
   110ba:	c7 57       	subi	r28, 0x77	; 119
   110bc:	df 4f       	sbci	r29, 0xFF	; 255
   110be:	ec e0       	ldi	r30, 0x0C	; 12
   110c0:	0c 94 fa e0 	jmp	0x1c1f4	; 0x1c1f4 <__epilogue_restores__+0xc>

000110c4 <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   110c4:	a5 e0       	ldi	r26, 0x05	; 5
   110c6:	b0 e0       	ldi	r27, 0x00	; 0
   110c8:	e8 e6       	ldi	r30, 0x68	; 104
   110ca:	f8 e8       	ldi	r31, 0x88	; 136
   110cc:	0c 94 e0 e0 	jmp	0x1c1c0	; 0x1c1c0 <__prologue_saves__+0x10>
    ch = 0;
    control_last = 0;


// If we have an unread state it has already been traced!
    if(gpib_unread_f)
   110d0:	20 91 7a 19 	lds	r18, 0x197A	; 0x80197a <gpib_unread_f>
   110d4:	22 23       	and	r18, r18
   110d6:	39 f0       	breq	.+14     	; 0x110e6 <gpib_read_byte+0x22>
    {
        gpib_unread_f = 0;
   110d8:	10 92 7a 19 	sts	0x197A, r1	; 0x80197a <gpib_unread_f>
        return(gpib_unread_data);
   110dc:	80 91 0c 1f 	lds	r24, 0x1F0C	; 0x801f0c <gpib_unread_data>
   110e0:	90 91 0d 1f 	lds	r25, 0x1F0D	; 0x801f0d <gpib_unread_data+0x1>
   110e4:	d4 c0       	rjmp	.+424    	; 0x1128e <gpib_read_byte+0x1ca>
   110e6:	5c 01       	movw	r10, r24
    }

    gpib_bus_read_init(1);                        // Busy until we are ready
   110e8:	81 e0       	ldi	r24, 0x01	; 1
   110ea:	90 e0       	ldi	r25, 0x00	; 0
   110ec:	6f db       	rcall	.-2338   	; 0x107cc <gpib_bus_read_init>

///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs

    if(trace)
   110ee:	a1 14       	cp	r10, r1
   110f0:	b1 04       	cpc	r11, r1
    {
        control_last = gpib_control_pin_read();
   110f2:	51 f0       	breq	.+20     	; 0x11108 <gpib_read_byte+0x44>
   110f4:	a7 dc       	rcall	.-1714   	; 0x10a44 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   110f6:	7c 01       	movw	r14, r24
   110f8:	b5 dc       	rcall	.-1686   	; 0x10a64 <gpib_handshake_pin_read>
   110fa:	e8 2a       	or	r14, r24
   110fc:	f9 2a       	or	r15, r25
        gpib_trace_display(control_last, TRACE_BUS);
   110fe:	62 e0       	ldi	r22, 0x02	; 2
   11100:	70 e0       	ldi	r23, 0x00	; 0
   11102:	c7 01       	movw	r24, r14
   11104:	9d de       	rcall	.-710    	; 0x10e40 <gpib_trace_display>
   11106:	02 c0       	rjmp	.+4      	; 0x1110c <gpib_read_byte+0x48>
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;
	extern void gpib_user_task();

    ch = 0;
    control_last = 0;
   11108:	e1 2c       	mov	r14, r1
   1110a:	f1 2c       	mov	r15, r1
            case GPIB_RX_DONE:
                gpib_bus_read_init(1);            // Busy
                break;
        }

        if(trace)
   1110c:	00 e0       	ldi	r16, 0x00	; 0
   1110e:	10 e0       	ldi	r17, 0x00	; 0
   11110:	c0 e0       	ldi	r28, 0x00	; 0
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
    {
gpib_user_task();
   11112:	0e 94 3b dd 	call	0x1ba76	; 0x1ba76 <gpib_user_task>

        if(uart_keyhit(0))
   11116:	80 e0       	ldi	r24, 0x00	; 0
   11118:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <uart_keyhit>
   1111c:	89 2b       	or	r24, r25
   1111e:	91 f0       	breq	.+36     	; 0x11144 <gpib_read_byte+0x80>
		{
			if(debuglevel & GPIB_ERR)
   11120:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11124:	80 ff       	sbrs	r24, 0
   11126:	90 c0       	rjmp	.+288    	; 0x11248 <gpib_read_byte+0x184>
				printf("gpib_read_byte: state=%d\n", rx_state);
   11128:	d0 e0       	ldi	r29, 0x00	; 0
   1112a:	ed b7       	in	r30, 0x3d	; 61
   1112c:	fe b7       	in	r31, 0x3e	; 62
   1112e:	d5 83       	std	Z+5, r29	; 0x05
   11130:	c4 83       	std	Z+4, r28	; 0x04
   11132:	8a ed       	ldi	r24, 0xDA	; 218
   11134:	9f e0       	ldi	r25, 0x0F	; 15
   11136:	a0 e0       	ldi	r26, 0x00	; 0
   11138:	81 83       	std	Z+1, r24	; 0x01
   1113a:	92 83       	std	Z+2, r25	; 0x02
   1113c:	a3 83       	std	Z+3, r26	; 0x03
   1113e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   11142:	82 c0       	rjmp	.+260    	; 0x11248 <gpib_read_byte+0x184>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   11144:	4c 99       	sbic	0x09, 4	; 9
   11146:	14 c0       	rjmp	.+40     	; 0x11170 <gpib_read_byte+0xac>
        {
            ch |= IFC_FLAG;
   11148:	10 61       	ori	r17, 0x10	; 16
			if(debuglevel & GPIB_ERR)
   1114a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1114e:	80 ff       	sbrs	r24, 0
   11150:	0d c0       	rjmp	.+26     	; 0x1116c <gpib_read_byte+0xa8>
				printf("gpib_read_byte: IFC state=%d\n", rx_state);
   11152:	d0 e0       	ldi	r29, 0x00	; 0
   11154:	ed b7       	in	r30, 0x3d	; 61
   11156:	fe b7       	in	r31, 0x3e	; 62
   11158:	d5 83       	std	Z+5, r29	; 0x05
   1115a:	c4 83       	std	Z+4, r28	; 0x04
   1115c:	8c eb       	ldi	r24, 0xBC	; 188
   1115e:	9f e0       	ldi	r25, 0x0F	; 15
   11160:	a0 e0       	ldi	r26, 0x00	; 0
   11162:	81 83       	std	Z+1, r24	; 0x01
   11164:	92 83       	std	Z+2, r25	; 0x02
   11166:	a3 83       	std	Z+3, r26	; 0x03
   11168:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            gpib_bus_init();
   1116c:	52 db       	rcall	.-2396   	; 0x10812 <gpib_bus_init>
   1116e:	6c c0       	rjmp	.+216    	; 0x11248 <gpib_read_byte+0x184>
            break;
        }

        switch(rx_state)
   11170:	8c 2f       	mov	r24, r28
   11172:	90 e0       	ldi	r25, 0x00	; 0
   11174:	89 30       	cpi	r24, 0x09	; 9
   11176:	91 05       	cpc	r25, r1
   11178:	08 f0       	brcs	.+2      	; 0x1117c <gpib_read_byte+0xb8>
   1117a:	4c c0       	rjmp	.+152    	; 0x11214 <gpib_read_byte+0x150>
   1117c:	fc 01       	movw	r30, r24
   1117e:	e9 53       	subi	r30, 0x39	; 57
   11180:	ff 4f       	sbci	r31, 0xFF	; 255
   11182:	0c 94 a9 e0 	jmp	0x1c152	; 0x1c152 <__tablejump2__>
        {
            case GPIB_RX_START:
///@brief Signal that we are ready to ready
#if BOARD == 2
                GPIB_IO_HI(NRFD);
   11186:	5a 9a       	sbi	0x0b, 2	; 11
   11188:	52 9a       	sbi	0x0a, 2	; 10
   1118a:	fd e0       	ldi	r31, 0x0D	; 13
   1118c:	fa 95       	dec	r31
   1118e:	f1 f7       	brne	.-4      	; 0x1118c <gpib_read_byte+0xc8>
   11190:	00 00       	nop
#else
                GPIB_PIN_FLOAT_UP(NRFD);
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   11192:	c1 e0       	ldi	r28, 0x01	; 1
   11194:	77 c0       	rjmp	.+238    	; 0x11284 <gpib_read_byte+0x1c0>
                break;

            case GPIB_RX_WAIT_FOR_DAV_LOW:
///@brief Wait for Ready acknowledge
                if ( GPIB_PIN_TST(DAV) == 0 )
   11196:	19 99       	sbic	0x03, 1	; 3
                    rx_state = GPIB_RX_DAV_IS_LOW;
   11198:	75 c0       	rjmp	.+234    	; 0x11284 <gpib_read_byte+0x1c0>
   1119a:	c2 e0       	ldi	r28, 0x02	; 2
                break;

// Accept Data
            case GPIB_RX_DAV_IS_LOW:
                GPIB_IO_LOW(NRFD);                // BUSY
   1119c:	73 c0       	rjmp	.+230    	; 0x11284 <gpib_read_byte+0x1c0>

///@brief gpib_bus_read strips command parity if ATN is low at read time
                bus = gpib_bus_read();
   1119e:	5a 98       	cbi	0x0b, 2	; 11
   111a0:	52 9a       	sbi	0x0a, 2	; 10
   111a2:	4a dc       	rcall	.-1900   	; 0x10a38 <gpib_bus_read>
   111a4:	c8 2e       	mov	r12, r24
                ch |= bus;
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                control_last = gpib_control_pin_read();
   111a6:	d1 2c       	mov	r13, r1
   111a8:	4d dc       	rcall	.-1894   	; 0x10a44 <gpib_control_pin_read>
   111aa:	7c 01       	movw	r14, r24
   111ac:	08 2b       	or	r16, r24
                ch |= control_last;
   111ae:	19 2b       	or	r17, r25
   111b0:	0c 29       	or	r16, r12

                if(trace)
   111b2:	1d 29       	or	r17, r13
   111b4:	a1 14       	cp	r10, r1
   111b6:	b1 04       	cpc	r11, r1
                {
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                    control_last |= gpib_handshake_pin_read();
   111b8:	49 f0       	breq	.+18     	; 0x111cc <gpib_read_byte+0x108>
   111ba:	54 dc       	rcall	.-1880   	; 0x10a64 <gpib_handshake_pin_read>
   111bc:	e8 2a       	or	r14, r24
                    gpib_trace_display(bus | control_last, TRACE_READ);
   111be:	f9 2a       	or	r15, r25
   111c0:	61 e0       	ldi	r22, 0x01	; 1
   111c2:	70 e0       	ldi	r23, 0x00	; 0
   111c4:	c6 01       	movw	r24, r12
   111c6:	8e 29       	or	r24, r14
   111c8:	9f 29       	or	r25, r15
   111ca:	3a de       	rcall	.-908    	; 0x10e40 <gpib_trace_display>
                }

#if BOARD == 2
                GPIB_IO_HI(NDAC);
   111cc:	5b 9a       	sbi	0x0b, 3	; 11
   111ce:	53 9a       	sbi	0x0a, 3	; 10
   111d0:	8d e0       	ldi	r24, 0x0D	; 13
   111d2:	8a 95       	dec	r24
   111d4:	f1 f7       	brne	.-4      	; 0x111d2 <gpib_read_byte+0x10e>
#else
                GPIB_PIN_FLOAT_UP(NDAC);
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                gpib_timeout_set(HTIMEOUT);
   111d6:	00 00       	nop
   111d8:	64 ef       	ldi	r22, 0xF4	; 244
   111da:	71 e0       	ldi	r23, 0x01	; 1
   111dc:	80 e0       	ldi	r24, 0x00	; 0
   111de:	90 e0       	ldi	r25, 0x00	; 0
#if BOARD == 3
/// FIXME do we want to keep the next state ?
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
#else
                rx_state = GPIB_RX_WAIT_FOR_NDAC_HI;
   111e0:	eb da       	rcall	.-2602   	; 0x107b8 <gpib_timeout_set>
   111e2:	c3 e0       	ldi	r28, 0x03	; 3
/// FIXME We clould add a test for read/write state ??
///@brief V2 boards we can't - not a big deal as the DAV test works anyway
///@brief Wait for NDAC float HI

            case GPIB_RX_WAIT_FOR_NDAC_HI:
                if (GPIB_PIN_TST(NDAC) == 1)
   111e4:	4f c0       	rjmp	.+158    	; 0x11284 <gpib_read_byte+0x1c0>
   111e6:	4b 9b       	sbis	0x09, 3	; 9
                {
                    gpib_timeout_set(HTIMEOUT);
   111e8:	09 c0       	rjmp	.+18     	; 0x111fc <gpib_read_byte+0x138>
   111ea:	64 ef       	ldi	r22, 0xF4	; 244
   111ec:	71 e0       	ldi	r23, 0x01	; 1
   111ee:	80 e0       	ldi	r24, 0x00	; 0
   111f0:	90 e0       	ldi	r25, 0x00	; 0
   111f2:	e2 da       	rcall	.-2620   	; 0x107b8 <gpib_timeout_set>
                    rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   111f4:	c4 e0       	ldi	r28, 0x04	; 4
   111f6:	02 c0       	rjmp	.+4      	; 0x111fc <gpib_read_byte+0x138>
                }
                break;

///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   111f8:	19 99       	sbic	0x03, 1	; 3
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
// printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   111fa:	c5 e0       	ldi	r28, 0x05	; 5
   111fc:	80 91 01 1d 	lds	r24, 0x1D01	; 0x801d01 <gpib_timer+0x8>
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
                {
                    rx_state = GPIB_RX_DAV_IS_HI;
                }
                if (gpib_timeout_test())
   11200:	88 23       	and	r24, r24
   11202:	09 f4       	brne	.+2      	; 0x11206 <gpib_read_byte+0x142>
                {
                    ch |= TIMEOUT_FLAG;
   11204:	3f c0       	rjmp	.+126    	; 0x11284 <gpib_read_byte+0x1c0>
                    rx_state = GPIB_RX_ERROR;
   11206:	10 64       	ori	r17, 0x40	; 64
   11208:	c7 e0       	ldi	r28, 0x07	; 7
            case GPIB_RX_ERROR:
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_DONE:
                gpib_bus_read_init(1);            // Busy
   1120a:	3c c0       	rjmp	.+120    	; 0x11284 <gpib_read_byte+0x1c0>
   1120c:	81 e0       	ldi	r24, 0x01	; 1
   1120e:	90 e0       	ldi	r25, 0x00	; 0
                break;
        }

        if(trace)
   11210:	dd da       	rcall	.-2630   	; 0x107cc <gpib_bus_read_init>
   11212:	04 c0       	rjmp	.+8      	; 0x1121c <gpib_read_byte+0x158>
   11214:	a1 14       	cp	r10, r1
   11216:	b1 04       	cpc	r11, r1
   11218:	91 f0       	breq	.+36     	; 0x1123e <gpib_read_byte+0x17a>
   1121a:	04 c0       	rjmp	.+8      	; 0x11224 <gpib_read_byte+0x160>
   1121c:	a1 14       	cp	r10, r1
        {
/// V2 boards can not read all control and handshake bits at once
/// FIXME We could add a test for read/write state ??
/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   1121e:	b1 04       	cpc	r11, r1
   11220:	99 f0       	breq	.+38     	; 0x11248 <gpib_read_byte+0x184>
   11222:	c8 e0       	ldi	r28, 0x08	; 8
            control |= gpib_handshake_pin_read();
   11224:	0f dc       	rcall	.-2018   	; 0x10a44 <gpib_control_pin_read>
   11226:	6c 01       	movw	r12, r24
   11228:	1d dc       	rcall	.-1990   	; 0x10a64 <gpib_handshake_pin_read>
   1122a:	c8 2a       	or	r12, r24
            if(control_last != control)
   1122c:	d9 2a       	or	r13, r25
   1122e:	ce 14       	cp	r12, r14
   11230:	df 04       	cpc	r13, r15
            {
                gpib_trace_display(control, TRACE_BUS);
   11232:	31 f0       	breq	.+12     	; 0x11240 <gpib_read_byte+0x17c>
   11234:	62 e0       	ldi	r22, 0x02	; 2
   11236:	70 e0       	ldi	r23, 0x00	; 0
   11238:	c6 01       	movw	r24, r12
   1123a:	02 de       	rcall	.-1020   	; 0x10e40 <gpib_trace_display>
   1123c:	01 c0       	rjmp	.+2      	; 0x11240 <gpib_read_byte+0x17c>
            case GPIB_RX_DONE:
                gpib_bus_read_init(1);            // Busy
                break;
        }

        if(trace)
   1123e:	67 01       	movw	r12, r14
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   11240:	c8 30       	cpi	r28, 0x08	; 8
   11242:	11 f0       	breq	.+4      	; 0x11248 <gpib_read_byte+0x184>
            case GPIB_RX_DONE:
                gpib_bus_read_init(1);            // Busy
                break;
        }

        if(trace)
   11244:	76 01       	movw	r14, r12
   11246:	65 cf       	rjmp	.-310    	; 0x11112 <gpib_read_byte+0x4e>
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   11248:	80 91 06 1f 	lds	r24, 0x1F06	; 0x801f06 <current>
   1124c:	90 91 07 1f 	lds	r25, 0x1F07	; 0x801f07 <current+0x1>
   11250:	90 93 03 1d 	sts	0x1D03, r25	; 0x801d03 <lastcmd+0x1>
   11254:	80 93 02 1d 	sts	0x1D02, r24	; 0x801d02 <lastcmd>

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   11258:	c8 01       	movw	r24, r16
   1125a:	88 27       	eor	r24, r24
   1125c:	90 7d       	andi	r25, 0xD0	; 208
   1125e:	89 2b       	or	r24, r25
   11260:	11 f4       	brne	.+4      	; 0x11266 <gpib_read_byte+0x1a2>
   11262:	12 fd       	sbrc	r17, 2
   11264:	05 c0       	rjmp	.+10     	; 0x11270 <gpib_read_byte+0x1ac>
        current = 0;
   11266:	10 92 07 1f 	sts	0x1F07, r1	; 0x801f07 <current+0x1>
   1126a:	10 92 06 1f 	sts	0x1F06, r1	; 0x801f06 <current>
   1126e:	07 c0       	rjmp	.+14     	; 0x1127e <gpib_read_byte+0x1ba>
    else
        current = ch & CMD_MASK;
   11270:	c8 01       	movw	r24, r16
   11272:	8f 77       	andi	r24, 0x7F	; 127
   11274:	99 27       	eor	r25, r25
   11276:	90 93 07 1f 	sts	0x1F07, r25	; 0x801f07 <current+0x1>
   1127a:	80 93 06 1f 	sts	0x1F06, r24	; 0x801f06 <current>
   1127e:	c8 01       	movw	r24, r16
   11280:	06 c0       	rjmp	.+12     	; 0x1128e <gpib_read_byte+0x1ca>
                }
                break;

///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
                rx_state = GPIB_RX_FINISH;        // DONE
   11282:	c6 e0       	ldi	r28, 0x06	; 6
            case GPIB_RX_DONE:
                gpib_bus_read_init(1);            // Busy
                break;
        }

        if(trace)
   11284:	a1 14       	cp	r10, r1
   11286:	b1 04       	cpc	r11, r1
   11288:	69 f6       	brne	.-102    	; 0x11224 <gpib_read_byte+0x160>
   1128a:	67 01       	movw	r12, r14
   1128c:	db cf       	rjmp	.-74     	; 0x11244 <gpib_read_byte+0x180>
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   1128e:	cd b7       	in	r28, 0x3d	; 61
   11290:	de b7       	in	r29, 0x3e	; 62
   11292:	25 96       	adiw	r28, 0x05	; 5
   11294:	ea e0       	ldi	r30, 0x0A	; 10
   11296:	0c 94 fc e0 	jmp	0x1c1f8	; 0x1c1f8 <__epilogue_restores__+0x10>

0001129a <gpib_decode>:
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   1129a:	60 e0       	ldi	r22, 0x00	; 0
   1129c:	70 e0       	ldi	r23, 0x00	; 0
   1129e:	d0 cd       	rjmp	.-1120   	; 0x10e40 <gpib_trace_display>
   112a0:	08 95       	ret

000112a2 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   112a2:	a7 e0       	ldi	r26, 0x07	; 7
   112a4:	b0 e0       	ldi	r27, 0x00	; 0
   112a6:	e7 e5       	ldi	r30, 0x57	; 87
   112a8:	f9 e8       	ldi	r31, 0x89	; 137
   112aa:	0c 94 e0 e0 	jmp	0x1c1c0	; 0x1c1c0 <__prologue_saves__+0x10>
   112ae:	5b 01       	movw	r10, r22
   112b0:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   112b2:	fa 01       	movw	r30, r20
   112b4:	20 81       	ld	r18, Z
   112b6:	31 81       	ldd	r19, Z+1	; 0x01
   112b8:	22 27       	eor	r18, r18
   112ba:	31 83       	std	Z+1, r19	; 0x01
   112bc:	20 83       	st	Z, r18

    if(!size)
   112be:	67 2b       	or	r22, r23
   112c0:	21 f0       	breq	.+8      	; 0x112ca <gpib_read_str+0x28>
   112c2:	7c 01       	movw	r14, r24
   112c4:	00 e0       	ldi	r16, 0x00	; 0
   112c6:	10 e0       	ldi	r17, 0x00	; 0
   112c8:	28 c0       	rjmp	.+80     	; 0x1131a <gpib_read_str+0x78>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   112ca:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   112ce:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   112d2:	81 72       	andi	r24, 0x21	; 33
   112d4:	91 70       	andi	r25, 0x01	; 1
   112d6:	89 2b       	or	r24, r25
   112d8:	09 f4       	brne	.+2      	; 0x112dc <gpib_read_str+0x3a>
   112da:	7c c0       	rjmp	.+248    	; 0x113d4 <gpib_read_str+0x132>
            printf("gpib_read_str: size = 0\n");
   112dc:	83 e7       	ldi	r24, 0x73	; 115
   112de:	9f e0       	ldi	r25, 0x0F	; 15
   112e0:	a0 e0       	ldi	r26, 0x00	; 0
   112e2:	ed b7       	in	r30, 0x3d	; 61
   112e4:	fe b7       	in	r31, 0x3e	; 62
   112e6:	81 83       	std	Z+1, r24	; 0x01
   112e8:	92 83       	std	Z+2, r25	; 0x02
   112ea:	a3 83       	std	Z+3, r26	; 0x03
   112ec:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   112f0:	71 c0       	rjmp	.+226    	; 0x113d4 <gpib_read_str+0x132>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   112f2:	8c 27       	eor	r24, r28
   112f4:	9d 27       	eor	r25, r29
   112f6:	92 fd       	sbrc	r25, 2
   112f8:	2e c0       	rjmp	.+92     	; 0x11356 <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   112fa:	ce 01       	movw	r24, r28
   112fc:	88 27       	eor	r24, r24
   112fe:	94 70       	andi	r25, 0x04	; 4
            buf[ind] = (val & CMD_MASK);
   11300:	2c 2f       	mov	r18, r28
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   11302:	d2 fd       	sbrc	r29, 2
            buf[ind] = (val & CMD_MASK);
   11304:	2f 77       	andi	r18, 0x7F	; 127
        else
            buf[ind] = (val & DATA_MASK);
   11306:	f7 01       	movw	r30, r14
   11308:	20 83       	st	Z, r18
        ++ind;
   1130a:	0f 5f       	subi	r16, 0xFF	; 255
   1130c:	1f 4f       	sbci	r17, 0xFF	; 255

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   1130e:	89 2b       	or	r24, r25
   11310:	09 f4       	brne	.+2      	; 0x11314 <gpib_read_str+0x72>
   11312:	3c c0       	rjmp	.+120    	; 0x1138c <gpib_read_str+0xea>
   11314:	ff ef       	ldi	r31, 0xFF	; 255
   11316:	ef 1a       	sub	r14, r31
   11318:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   1131a:	0a 15       	cp	r16, r10
   1131c:	1b 05       	cpc	r17, r11
   1131e:	0c f0       	brlt	.+2      	; 0x11322 <gpib_read_str+0x80>
   11320:	3f c0       	rjmp	.+126    	; 0x113a0 <gpib_read_str+0xfe>
    {
        val = gpib_read_byte(NO_TRACE);
   11322:	80 e0       	ldi	r24, 0x00	; 0
   11324:	90 e0       	ldi	r25, 0x00	; 0
   11326:	ce de       	rcall	.-612    	; 0x110c4 <gpib_read_byte>
   11328:	ec 01       	movw	r28, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   1132a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1132e:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11332:	90 ff       	sbrs	r25, 0
   11334:	02 c0       	rjmp	.+4      	; 0x1133a <gpib_read_str+0x98>
            gpib_decode(val);
   11336:	ce 01       	movw	r24, r28
   11338:	b0 df       	rcall	.-160    	; 0x1129a <gpib_decode>
#endif
        if(val & ERROR_MASK)
   1133a:	9e 01       	movw	r18, r28
   1133c:	22 27       	eor	r18, r18
   1133e:	30 7d       	andi	r19, 0xD0	; 208
   11340:	f6 01       	movw	r30, r12
   11342:	80 81       	ld	r24, Z
   11344:	91 81       	ldd	r25, Z+1	; 0x01
   11346:	21 15       	cp	r18, r1
   11348:	31 05       	cpc	r19, r1
   1134a:	99 f2       	breq	.-90     	; 0x112f2 <gpib_read_str+0x50>
        {
            *status |= (val & ERROR_MASK);
   1134c:	82 2b       	or	r24, r18
   1134e:	93 2b       	or	r25, r19
   11350:	91 83       	std	Z+1, r25	; 0x01
   11352:	80 83       	st	Z, r24
            break;
   11354:	28 c0       	rjmp	.+80     	; 0x113a6 <gpib_read_str+0x104>
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11356:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1135a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1135e:	81 72       	andi	r24, 0x21	; 33
   11360:	91 70       	andi	r25, 0x01	; 1
   11362:	89 2b       	or	r24, r25
   11364:	81 f0       	breq	.+32     	; 0x11386 <gpib_read_str+0xe4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   11366:	ce 01       	movw	r24, r28
   11368:	99 27       	eor	r25, r25
   1136a:	ed b7       	in	r30, 0x3d	; 61
   1136c:	fe b7       	in	r31, 0x3e	; 62
   1136e:	97 83       	std	Z+7, r25	; 0x07
   11370:	86 83       	std	Z+6, r24	; 0x06
   11372:	15 83       	std	Z+5, r17	; 0x05
   11374:	04 83       	std	Z+4, r16	; 0x04
   11376:	86 e4       	ldi	r24, 0x46	; 70
   11378:	9f e0       	ldi	r25, 0x0F	; 15
   1137a:	a0 e0       	ldi	r26, 0x00	; 0
   1137c:	81 83       	std	Z+1, r24	; 0x01
   1137e:	92 83       	std	Z+2, r25	; 0x02
   11380:	a3 83       	std	Z+3, r26	; 0x03
   11382:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            gpib_unread(val);
   11386:	ce 01       	movw	r24, r28
   11388:	2d db       	rcall	.-2470   	; 0x109e4 <gpib_unread>
            break;
   1138a:	0d c0       	rjmp	.+26     	; 0x113a6 <gpib_read_str+0x104>
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   1138c:	d0 ff       	sbrs	r29, 0
   1138e:	c2 cf       	rjmp	.-124    	; 0x11314 <gpib_read_str+0x72>
        {

            if(*status & EOI_FLAG)
   11390:	f6 01       	movw	r30, r12
   11392:	80 81       	ld	r24, Z
   11394:	91 81       	ldd	r25, Z+1	; 0x01
   11396:	90 fd       	sbrc	r25, 0
   11398:	1f c0       	rjmp	.+62     	; 0x113d8 <gpib_read_str+0x136>
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   1139a:	91 60       	ori	r25, 0x01	; 1
   1139c:	91 83       	std	Z+1, r25	; 0x01
   1139e:	80 83       	st	Z, r24
            break;
        }
    }
    if ( ind != size )
   113a0:	0a 15       	cp	r16, r10
   113a2:	1b 05       	cpc	r17, r11
   113a4:	c9 f0       	breq	.+50     	; 0x113d8 <gpib_read_str+0x136>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   113a6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   113aa:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   113ae:	81 72       	andi	r24, 0x21	; 33
   113b0:	99 27       	eor	r25, r25
   113b2:	89 2b       	or	r24, r25
   113b4:	89 f0       	breq	.+34     	; 0x113d8 <gpib_read_str+0x136>
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   113b6:	ed b7       	in	r30, 0x3d	; 61
   113b8:	fe b7       	in	r31, 0x3e	; 62
   113ba:	b7 82       	std	Z+7, r11	; 0x07
   113bc:	a6 82       	std	Z+6, r10	; 0x06
   113be:	15 83       	std	Z+5, r17	; 0x05
   113c0:	04 83       	std	Z+4, r16	; 0x04
   113c2:	8f e1       	ldi	r24, 0x1F	; 31
   113c4:	9f e0       	ldi	r25, 0x0F	; 15
   113c6:	a0 e0       	ldi	r26, 0x00	; 0
   113c8:	81 83       	std	Z+1, r24	; 0x01
   113ca:	92 83       	std	Z+2, r25	; 0x02
   113cc:	a3 83       	std	Z+3, r26	; 0x03
   113ce:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   113d2:	02 c0       	rjmp	.+4      	; 0x113d8 <gpib_read_str+0x136>
   113d4:	00 e0       	ldi	r16, 0x00	; 0
   113d6:	10 e0       	ldi	r17, 0x00	; 0
    }
    return(ind);
}
   113d8:	c8 01       	movw	r24, r16
   113da:	cd b7       	in	r28, 0x3d	; 61
   113dc:	de b7       	in	r29, 0x3e	; 62
   113de:	27 96       	adiw	r28, 0x07	; 7
   113e0:	ea e0       	ldi	r30, 0x0A	; 10
   113e2:	0c 94 fc e0 	jmp	0x1c1f8	; 0x1c1f8 <__epilogue_restores__+0x10>

000113e6 <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   113e6:	a7 e0       	ldi	r26, 0x07	; 7
   113e8:	b0 e0       	ldi	r27, 0x00	; 0
   113ea:	e9 ef       	ldi	r30, 0xF9	; 249
   113ec:	f9 e8       	ldi	r31, 0x89	; 137
   113ee:	0c 94 e0 e0 	jmp	0x1c1c0	; 0x1c1c0 <__prologue_saves__+0x10>
   113f2:	8b 01       	movw	r16, r22
   113f4:	7a 01       	movw	r14, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   113f6:	fa 01       	movw	r30, r20
   113f8:	20 81       	ld	r18, Z
   113fa:	31 81       	ldd	r19, Z+1	; 0x01
   113fc:	22 27       	eor	r18, r18
   113fe:	31 83       	std	Z+1, r19	; 0x01
   11400:	20 83       	st	Z, r18

    if(!size)
   11402:	67 2b       	or	r22, r23
   11404:	21 f0       	breq	.+8      	; 0x1140e <gpib_write_str+0x28>
   11406:	6c 01       	movw	r12, r24
   11408:	c0 e0       	ldi	r28, 0x00	; 0
   1140a:	d0 e0       	ldi	r29, 0x00	; 0
   1140c:	35 c0       	rjmp	.+106    	; 0x11478 <gpib_write_str+0x92>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   1140e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11412:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11416:	81 72       	andi	r24, 0x21	; 33
   11418:	91 70       	andi	r25, 0x01	; 1
   1141a:	89 2b       	or	r24, r25
   1141c:	09 f4       	brne	.+2      	; 0x11420 <gpib_write_str+0x3a>
   1141e:	4f c0       	rjmp	.+158    	; 0x114be <gpib_write_str+0xd8>
            printf("gpib_write_str: size = 0\n");
   11420:	85 e0       	ldi	r24, 0x05	; 5
   11422:	9f e0       	ldi	r25, 0x0F	; 15
   11424:	a0 e0       	ldi	r26, 0x00	; 0
   11426:	ed b7       	in	r30, 0x3d	; 61
   11428:	fe b7       	in	r31, 0x3e	; 62
   1142a:	81 83       	std	Z+1, r24	; 0x01
   1142c:	92 83       	std	Z+2, r25	; 0x02
   1142e:	a3 83       	std	Z+3, r26	; 0x03
   11430:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   11434:	44 c0       	rjmp	.+136    	; 0x114be <gpib_write_str+0xd8>
    }

    while(ind < size)
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   11436:	21 96       	adiw	r28, 0x01	; 1
   11438:	f6 01       	movw	r30, r12
   1143a:	81 91       	ld	r24, Z+
   1143c:	6f 01       	movw	r12, r30
   1143e:	90 e0       	ldi	r25, 0x00	; 0

        if(*status & ATN_FLAG)
   11440:	f7 01       	movw	r30, r14
   11442:	20 81       	ld	r18, Z
   11444:	31 81       	ldd	r19, Z+1	; 0x01
   11446:	32 fd       	sbrc	r19, 2
        {
            ch |= ATN_FLAG;
   11448:	94 60       	ori	r25, 0x04	; 4
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   1144a:	30 fd       	sbrc	r19, 0
   1144c:	19 c0       	rjmp	.+50     	; 0x11480 <gpib_write_str+0x9a>
            ch |= EOI_FLAG;

/// @return Returns

        val = gpib_write_byte(ch);
   1144e:	16 db       	rcall	.-2516   	; 0x10a7c <gpib_write_byte>
        *status |= (val & ERROR_MASK);
   11450:	5c 01       	movw	r10, r24
   11452:	aa 24       	eor	r10, r10
   11454:	f0 ed       	ldi	r31, 0xD0	; 208
   11456:	bf 22       	and	r11, r31
   11458:	f7 01       	movw	r30, r14
   1145a:	20 81       	ld	r18, Z
   1145c:	31 81       	ldd	r19, Z+1	; 0x01
   1145e:	2a 29       	or	r18, r10
   11460:	3b 29       	or	r19, r11
   11462:	31 83       	std	Z+1, r19	; 0x01
   11464:	20 83       	st	Z, r18

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_BUS_DECODE)
   11466:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1146a:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
            gpib_decode(val);
   1146e:	30 fd       	sbrc	r19, 0
   11470:	14 df       	rcall	.-472    	; 0x1129a <gpib_decode>
#endif
        if(val & ERROR_MASK)
   11472:	a1 14       	cp	r10, r1
   11474:	b1 04       	cpc	r11, r1
   11476:	49 f4       	brne	.+18     	; 0x1148a <gpib_write_str+0xa4>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("gpib_write_str: size = 0\n");
    }

    while(ind < size)
   11478:	c0 17       	cp	r28, r16
   1147a:	d1 07       	cpc	r29, r17
   1147c:	e4 f2       	brlt	.-72     	; 0x11436 <gpib_write_str+0x50>
   1147e:	05 c0       	rjmp	.+10     	; 0x1148a <gpib_write_str+0xa4>
        if(*status & ATN_FLAG)
        {
            ch |= ATN_FLAG;
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   11480:	0c 17       	cp	r16, r28
   11482:	1d 07       	cpc	r17, r29
   11484:	21 f7       	brne	.-56     	; 0x1144e <gpib_write_str+0x68>
            ch |= EOI_FLAG;
   11486:	91 60       	ori	r25, 0x01	; 1
   11488:	e2 cf       	rjmp	.-60     	; 0x1144e <gpib_write_str+0x68>
        {
            break;
        }

    }                                             // while(ind < size)
    if ( ind != size )
   1148a:	c0 17       	cp	r28, r16
   1148c:	d1 07       	cpc	r29, r17
   1148e:	c9 f0       	breq	.+50     	; 0x114c2 <gpib_write_str+0xdc>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
   11490:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11494:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11498:	81 72       	andi	r24, 0x21	; 33
   1149a:	91 70       	andi	r25, 0x01	; 1
   1149c:	89 2b       	or	r24, r25
   1149e:	89 f0       	breq	.+34     	; 0x114c2 <gpib_write_str+0xdc>
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   114a0:	ed b7       	in	r30, 0x3d	; 61
   114a2:	fe b7       	in	r31, 0x3e	; 62
   114a4:	17 83       	std	Z+7, r17	; 0x07
   114a6:	06 83       	std	Z+6, r16	; 0x06
   114a8:	d5 83       	std	Z+5, r29	; 0x05
   114aa:	c4 83       	std	Z+4, r28	; 0x04
   114ac:	8d ed       	ldi	r24, 0xDD	; 221
   114ae:	9e e0       	ldi	r25, 0x0E	; 14
   114b0:	a0 e0       	ldi	r26, 0x00	; 0
   114b2:	81 83       	std	Z+1, r24	; 0x01
   114b4:	92 83       	std	Z+2, r25	; 0x02
   114b6:	a3 83       	std	Z+3, r26	; 0x03
   114b8:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   114bc:	02 c0       	rjmp	.+4      	; 0x114c2 <gpib_write_str+0xdc>
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;

    if(!size)
   114be:	c0 e0       	ldi	r28, 0x00	; 0
   114c0:	d0 e0       	ldi	r29, 0x00	; 0
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES + GPIB_RW_STR_BUS_DECODE))
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
    }
    return(ind);
}
   114c2:	ce 01       	movw	r24, r28
   114c4:	cd b7       	in	r28, 0x3d	; 61
   114c6:	de b7       	in	r29, 0x3e	; 62
   114c8:	27 96       	adiw	r28, 0x07	; 7
   114ca:	ea e0       	ldi	r30, 0x0A	; 10
   114cc:	0c 94 fc e0 	jmp	0x1c1f8	; 0x1c1f8 <__epilogue_restores__+0x10>

000114d0 <gpib_file_init>:
{
    int index = find_device(PRINTER_TYPE, address, BASE_MSA);
    if(index == -1)
        return(0);
    return(set_active_device(index));
}
   114d0:	ad b7       	in	r26, 0x3d	; 61
   114d2:	be b7       	in	r27, 0x3e	; 62
   114d4:	17 97       	sbiw	r26, 0x07	; 7
   114d6:	0f b6       	in	r0, 0x3f	; 63
   114d8:	f8 94       	cli
   114da:	be bf       	out	0x3e, r27	; 62
   114dc:	0f be       	out	0x3f, r0	; 63
   114de:	ad bf       	out	0x3d, r26	; 61
   114e0:	10 92 b7 01 	sts	0x01B7, r1	; 0x8001b7 <debuglevel+0x1>
   114e4:	10 92 b6 01 	sts	0x01B6, r1	; 0x8001b6 <debuglevel>
   114e8:	88 eb       	ldi	r24, 0xB8	; 184
   114ea:	91 e0       	ldi	r25, 0x01	; 1
   114ec:	0e 94 66 99 	call	0x132cc	; 0x132cc <Read_Config>
   114f0:	18 16       	cp	r1, r24
   114f2:	19 06       	cpc	r1, r25
   114f4:	8c f4       	brge	.+34     	; 0x11518 <gpib_file_init+0x48>
   114f6:	ed b7       	in	r30, 0x3d	; 61
   114f8:	fe b7       	in	r31, 0x3e	; 62
   114fa:	97 83       	std	Z+7, r25	; 0x07
   114fc:	86 83       	std	Z+6, r24	; 0x06
   114fe:	88 eb       	ldi	r24, 0xB8	; 184
   11500:	91 e0       	ldi	r25, 0x01	; 1
   11502:	95 83       	std	Z+5, r25	; 0x05
   11504:	84 83       	std	Z+4, r24	; 0x04
   11506:	8a e5       	ldi	r24, 0x5A	; 90
   11508:	94 e1       	ldi	r25, 0x14	; 20
   1150a:	a0 e0       	ldi	r26, 0x00	; 0
   1150c:	81 83       	std	Z+1, r24	; 0x01
   1150e:	92 83       	std	Z+2, r25	; 0x02
   11510:	a3 83       	std	Z+3, r26	; 0x03
   11512:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   11516:	10 c0       	rjmp	.+32     	; 0x11538 <gpib_file_init+0x68>
   11518:	89 2b       	or	r24, r25
   1151a:	71 f0       	breq	.+28     	; 0x11538 <gpib_file_init+0x68>
   1151c:	88 eb       	ldi	r24, 0xB8	; 184
   1151e:	91 e0       	ldi	r25, 0x01	; 1
   11520:	ed b7       	in	r30, 0x3d	; 61
   11522:	fe b7       	in	r31, 0x3e	; 62
   11524:	95 83       	std	Z+5, r25	; 0x05
   11526:	84 83       	std	Z+4, r24	; 0x04
   11528:	89 e4       	ldi	r24, 0x49	; 73
   1152a:	94 e1       	ldi	r25, 0x14	; 20
   1152c:	a0 e0       	ldi	r26, 0x00	; 0
   1152e:	81 83       	std	Z+1, r24	; 0x01
   11530:	92 83       	std	Z+2, r25	; 0x02
   11532:	a3 83       	std	Z+3, r26	; 0x03
   11534:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   11538:	0e 94 31 98 	call	0x13062	; 0x13062 <set_Config_Defaults>
   1153c:	0e 94 53 6e 	call	0xdca6	; 0xdca6 <mmc_wp_status>
   11540:	89 2b       	or	r24, r25
   11542:	51 f0       	breq	.+20     	; 0x11558 <gpib_file_init+0x88>
   11544:	80 e3       	ldi	r24, 0x30	; 48
   11546:	94 e1       	ldi	r25, 0x14	; 20
   11548:	a0 e0       	ldi	r26, 0x00	; 0
   1154a:	ed b7       	in	r30, 0x3d	; 61
   1154c:	fe b7       	in	r31, 0x3e	; 62
   1154e:	81 83       	std	Z+1, r24	; 0x01
   11550:	92 83       	std	Z+2, r25	; 0x02
   11552:	a3 83       	std	Z+3, r26	; 0x03
   11554:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   11558:	ad b7       	in	r26, 0x3d	; 61
   1155a:	be b7       	in	r27, 0x3e	; 62
   1155c:	17 96       	adiw	r26, 0x07	; 7
   1155e:	0f b6       	in	r0, 0x3f	; 63
   11560:	f8 94       	cli
   11562:	be bf       	out	0x3e, r27	; 62
   11564:	0f be       	out	0x3f, r0	; 63
   11566:	ad bf       	out	0x3d, r26	; 61
   11568:	08 95       	ret

0001156a <SS80_is_MLA>:
   1156a:	40 e2       	ldi	r20, 0x20	; 32
   1156c:	50 e0       	ldi	r21, 0x00	; 0
   1156e:	bc 01       	movw	r22, r24
   11570:	83 e0       	ldi	r24, 0x03	; 3
   11572:	90 e0       	ldi	r25, 0x00	; 0
   11574:	0e 94 97 95 	call	0x12b2e	; 0x12b2e <find_device>
   11578:	8f 3f       	cpi	r24, 0xFF	; 255
   1157a:	2f ef       	ldi	r18, 0xFF	; 255
   1157c:	92 07       	cpc	r25, r18
   1157e:	19 f0       	breq	.+6      	; 0x11586 <SS80_is_MLA+0x1c>
   11580:	0c 94 c1 95 	jmp	0x12b82	; 0x12b82 <set_active_device>
   11584:	08 95       	ret
   11586:	80 e0       	ldi	r24, 0x00	; 0
   11588:	90 e0       	ldi	r25, 0x00	; 0
   1158a:	08 95       	ret

0001158c <SS80_is_MTA>:
   1158c:	40 e4       	ldi	r20, 0x40	; 64
   1158e:	50 e0       	ldi	r21, 0x00	; 0
   11590:	bc 01       	movw	r22, r24
   11592:	83 e0       	ldi	r24, 0x03	; 3
   11594:	90 e0       	ldi	r25, 0x00	; 0
   11596:	0e 94 97 95 	call	0x12b2e	; 0x12b2e <find_device>
   1159a:	8f 3f       	cpi	r24, 0xFF	; 255
   1159c:	2f ef       	ldi	r18, 0xFF	; 255
   1159e:	92 07       	cpc	r25, r18
   115a0:	19 f0       	breq	.+6      	; 0x115a8 <SS80_is_MTA+0x1c>
   115a2:	0c 94 c1 95 	jmp	0x12b82	; 0x12b82 <set_active_device>
   115a6:	08 95       	ret
   115a8:	80 e0       	ldi	r24, 0x00	; 0
   115aa:	90 e0       	ldi	r25, 0x00	; 0
   115ac:	08 95       	ret

000115ae <SS80_is_MSA>:
   115ae:	40 e6       	ldi	r20, 0x60	; 96
   115b0:	50 e0       	ldi	r21, 0x00	; 0
   115b2:	bc 01       	movw	r22, r24
   115b4:	83 e0       	ldi	r24, 0x03	; 3
   115b6:	90 e0       	ldi	r25, 0x00	; 0
   115b8:	0e 94 97 95 	call	0x12b2e	; 0x12b2e <find_device>
   115bc:	8f 3f       	cpi	r24, 0xFF	; 255
   115be:	2f ef       	ldi	r18, 0xFF	; 255
   115c0:	92 07       	cpc	r25, r18
   115c2:	19 f0       	breq	.+6      	; 0x115ca <SS80_is_MSA+0x1c>
   115c4:	0c 94 c1 95 	jmp	0x12b82	; 0x12b82 <set_active_device>
   115c8:	08 95       	ret
   115ca:	80 e0       	ldi	r24, 0x00	; 0
   115cc:	90 e0       	ldi	r25, 0x00	; 0
   115ce:	08 95       	ret

000115d0 <AMIGO_is_MLA>:
   115d0:	40 e2       	ldi	r20, 0x20	; 32
   115d2:	50 e0       	ldi	r21, 0x00	; 0
   115d4:	bc 01       	movw	r22, r24
   115d6:	81 e0       	ldi	r24, 0x01	; 1
   115d8:	90 e0       	ldi	r25, 0x00	; 0
   115da:	0e 94 97 95 	call	0x12b2e	; 0x12b2e <find_device>
   115de:	8f 3f       	cpi	r24, 0xFF	; 255
   115e0:	2f ef       	ldi	r18, 0xFF	; 255
   115e2:	92 07       	cpc	r25, r18
   115e4:	19 f0       	breq	.+6      	; 0x115ec <AMIGO_is_MLA+0x1c>
   115e6:	0c 94 c1 95 	jmp	0x12b82	; 0x12b82 <set_active_device>
   115ea:	08 95       	ret
   115ec:	80 e0       	ldi	r24, 0x00	; 0
   115ee:	90 e0       	ldi	r25, 0x00	; 0
   115f0:	08 95       	ret

000115f2 <AMIGO_is_MTA>:
   115f2:	40 e4       	ldi	r20, 0x40	; 64
   115f4:	50 e0       	ldi	r21, 0x00	; 0
   115f6:	bc 01       	movw	r22, r24
   115f8:	81 e0       	ldi	r24, 0x01	; 1
   115fa:	90 e0       	ldi	r25, 0x00	; 0
   115fc:	0e 94 97 95 	call	0x12b2e	; 0x12b2e <find_device>
   11600:	8f 3f       	cpi	r24, 0xFF	; 255
   11602:	2f ef       	ldi	r18, 0xFF	; 255
   11604:	92 07       	cpc	r25, r18
   11606:	19 f0       	breq	.+6      	; 0x1160e <AMIGO_is_MTA+0x1c>
   11608:	0c 94 c1 95 	jmp	0x12b82	; 0x12b82 <set_active_device>
   1160c:	08 95       	ret
   1160e:	80 e0       	ldi	r24, 0x00	; 0
   11610:	90 e0       	ldi	r25, 0x00	; 0
   11612:	08 95       	ret

00011614 <AMIGO_is_MSA>:
   11614:	40 e6       	ldi	r20, 0x60	; 96
   11616:	50 e0       	ldi	r21, 0x00	; 0
   11618:	bc 01       	movw	r22, r24
   1161a:	81 e0       	ldi	r24, 0x01	; 1
   1161c:	90 e0       	ldi	r25, 0x00	; 0
   1161e:	0e 94 97 95 	call	0x12b2e	; 0x12b2e <find_device>
   11622:	8f 3f       	cpi	r24, 0xFF	; 255
   11624:	2f ef       	ldi	r18, 0xFF	; 255
   11626:	92 07       	cpc	r25, r18
   11628:	19 f0       	breq	.+6      	; 0x11630 <AMIGO_is_MSA+0x1c>
   1162a:	0c 94 c1 95 	jmp	0x12b82	; 0x12b82 <set_active_device>
   1162e:	08 95       	ret
   11630:	80 e0       	ldi	r24, 0x00	; 0
   11632:	90 e0       	ldi	r25, 0x00	; 0
   11634:	08 95       	ret

00011636 <PRINTER_is_MLA>:
   11636:	40 e2       	ldi	r20, 0x20	; 32
   11638:	50 e0       	ldi	r21, 0x00	; 0
   1163a:	bc 01       	movw	r22, r24
   1163c:	84 e0       	ldi	r24, 0x04	; 4
   1163e:	90 e0       	ldi	r25, 0x00	; 0
   11640:	0e 94 97 95 	call	0x12b2e	; 0x12b2e <find_device>
   11644:	8f 3f       	cpi	r24, 0xFF	; 255
   11646:	2f ef       	ldi	r18, 0xFF	; 255
   11648:	92 07       	cpc	r25, r18
   1164a:	19 f0       	breq	.+6      	; 0x11652 <PRINTER_is_MLA+0x1c>
   1164c:	0c 94 c1 95 	jmp	0x12b82	; 0x12b82 <set_active_device>
   11650:	08 95       	ret
   11652:	80 e0       	ldi	r24, 0x00	; 0
   11654:	90 e0       	ldi	r25, 0x00	; 0
   11656:	08 95       	ret

00011658 <PRINTER_is_MTA>:
   11658:	40 e4       	ldi	r20, 0x40	; 64
   1165a:	50 e0       	ldi	r21, 0x00	; 0
   1165c:	bc 01       	movw	r22, r24
   1165e:	84 e0       	ldi	r24, 0x04	; 4
   11660:	90 e0       	ldi	r25, 0x00	; 0
   11662:	0e 94 97 95 	call	0x12b2e	; 0x12b2e <find_device>
   11666:	8f 3f       	cpi	r24, 0xFF	; 255
   11668:	2f ef       	ldi	r18, 0xFF	; 255
   1166a:	92 07       	cpc	r25, r18
   1166c:	19 f0       	breq	.+6      	; 0x11674 <PRINTER_is_MTA+0x1c>
   1166e:	0c 94 c1 95 	jmp	0x12b82	; 0x12b82 <set_active_device>
   11672:	08 95       	ret
   11674:	80 e0       	ldi	r24, 0x00	; 0
   11676:	90 e0       	ldi	r25, 0x00	; 0
   11678:	08 95       	ret

0001167a <gpib_init_devices>:
///
/// - Used at power up, Bus IFC or user aborts
/// @return  void
void gpib_init_devices(void)
{
    gpib_bus_init();                              // Not busy - we have to free all pins on the BUS
   1167a:	cb d8       	rcall	.-3690   	; 0x10812 <gpib_bus_init>

// Init PPR talking and listening states
// Enable this 14 April 2020 - testing MIke Gore
    gpib_state_init();
   1167c:	f7 d8       	rcall	.-3602   	; 0x1086c <gpib_state_init>
   1167e:	0e 94 74 a9 	call	0x152e8	; 0x152e8 <SS80_init>

    SS80_init();                                  // SS80 state init
   11682:	0e 94 03 af 	call	0x15e06	; 0x15e06 <amigo_init>

#ifdef AMIGO
    amigo_init();                                 // AMIGO state init
   11686:	0c 94 38 ba 	jmp	0x17470	; 0x17470 <printer_close>
#endif

    printer_close();                              // Close any open fprinter files
   1168a:	08 95       	ret

0001168c <gpib_trace_task>:
   1168c:	0f 93       	push	r16
/// @param name: File name to save log file to.
/// @return  void
///   Exit on Key Press

void gpib_trace_task( char *name , int detail)
{
   1168e:	1f 93       	push	r17
   11690:	cf 93       	push	r28
   11692:	df 93       	push	r29
   11694:	00 d0       	rcall	.+0      	; 0x11696 <gpib_trace_task+0xa>
   11696:	00 d0       	rcall	.+0      	; 0x11698 <gpib_trace_task+0xc>
   11698:	1f 92       	push	r1
   1169a:	eb 01       	movw	r28, r22
    int ch;

    if(name && *name)
   1169c:	00 97       	sbiw	r24, 0x00	; 0
   1169e:	09 f4       	brne	.+2      	; 0x116a2 <gpib_trace_task+0x16>
   116a0:	44 c0       	rjmp	.+136    	; 0x1172a <gpib_trace_task+0x9e>
   116a2:	fc 01       	movw	r30, r24
   116a4:	20 81       	ld	r18, Z
   116a6:	22 23       	and	r18, r18
   116a8:	09 f4       	brne	.+2      	; 0x116ac <gpib_trace_task+0x20>
   116aa:	3f c0       	rjmp	.+126    	; 0x1172a <gpib_trace_task+0x9e>
    {
        name = skipspaces(name);
   116ac:	0e 94 72 2f 	call	0x5ee4	; 0x5ee4 <skipspaces>
   116b0:	8c 01       	movw	r16, r24
        printf("Capturing GPIB BUS to:%s\n", name);
   116b2:	ed b7       	in	r30, 0x3d	; 61
   116b4:	fe b7       	in	r31, 0x3e	; 62
   116b6:	95 83       	std	Z+5, r25	; 0x05
   116b8:	84 83       	std	Z+4, r24	; 0x04
   116ba:	86 e1       	ldi	r24, 0x16	; 22
   116bc:	94 e1       	ldi	r25, 0x14	; 20
   116be:	a0 e0       	ldi	r26, 0x00	; 0
   116c0:	81 83       	std	Z+1, r24	; 0x01
   116c2:	92 83       	std	Z+2, r25	; 0x02
   116c4:	a3 83       	std	Z+3, r26	; 0x03
   116c6:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        if(detail)
   116ca:	20 97       	sbiw	r28, 0x00	; 0
   116cc:	51 f0       	breq	.+20     	; 0x116e2 <gpib_trace_task+0x56>
            printf("FULL GPIB BUS handshake logging requested\n");
   116ce:	8b ee       	ldi	r24, 0xEB	; 235
   116d0:	93 e1       	ldi	r25, 0x13	; 19
   116d2:	a0 e0       	ldi	r26, 0x00	; 0
   116d4:	ed b7       	in	r30, 0x3d	; 61
   116d6:	fe b7       	in	r31, 0x3e	; 62
   116d8:	81 83       	std	Z+1, r24	; 0x01
   116da:	92 83       	std	Z+2, r25	; 0x02
   116dc:	a3 83       	std	Z+3, r26	; 0x03
   116de:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        printf("Press ANY key to exit\n");
   116e2:	84 ed       	ldi	r24, 0xD4	; 212
   116e4:	93 e1       	ldi	r25, 0x13	; 19
   116e6:	a0 e0       	ldi	r26, 0x00	; 0
   116e8:	ed b7       	in	r30, 0x3d	; 61
   116ea:	fe b7       	in	r31, 0x3e	; 62
   116ec:	81 83       	std	Z+1, r24	; 0x01
   116ee:	92 83       	std	Z+2, r25	; 0x02
   116f0:	a3 83       	std	Z+3, r26	; 0x03
   116f2:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

        gpib_log_fp = fopen(name,"wb");
   116f6:	6c e0       	ldi	r22, 0x0C	; 12
   116f8:	79 e0       	ldi	r23, 0x09	; 9
   116fa:	c8 01       	movw	r24, r16
   116fc:	0e 94 87 7c 	call	0xf90e	; 0xf90e <fopen>
   11700:	90 93 7c 19 	sts	0x197C, r25	; 0x80197c <gpib_log_fp+0x1>
   11704:	80 93 7b 19 	sts	0x197B, r24	; 0x80197b <gpib_log_fp>
        if(gpib_log_fp == NULL)
   11708:	89 2b       	or	r24, r25
   1170a:	b9 f4       	brne	.+46     	; 0x1173a <gpib_trace_task+0xae>
        {
            perror("open failed");
   1170c:	87 ea       	ldi	r24, 0xA7	; 167
   1170e:	9d e0       	ldi	r25, 0x0D	; 13
   11710:	0e 94 b8 76 	call	0xed70	; 0xed70 <perror>
            printf("exiting...\n");
   11714:	88 ec       	ldi	r24, 0xC8	; 200
   11716:	93 e1       	ldi	r25, 0x13	; 19
   11718:	a0 e0       	ldi	r26, 0x00	; 0
   1171a:	ed b7       	in	r30, 0x3d	; 61
   1171c:	fe b7       	in	r31, 0x3e	; 62
   1171e:	81 83       	std	Z+1, r24	; 0x01
   11720:	92 83       	std	Z+2, r25	; 0x02
   11722:	a3 83       	std	Z+3, r26	; 0x03
   11724:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            return;
   11728:	3d c0       	rjmp	.+122    	; 0x117a4 <gpib_trace_task+0x118>
        }
    }
    else
    {
        gpib_log_fp = stdout;
   1172a:	80 91 db 1c 	lds	r24, 0x1CDB	; 0x801cdb <__iob+0x2>
   1172e:	90 91 dc 1c 	lds	r25, 0x1CDC	; 0x801cdc <__iob+0x3>
   11732:	90 93 7c 19 	sts	0x197C, r25	; 0x80197c <gpib_log_fp+0x1>
   11736:	80 93 7b 19 	sts	0x197B, r24	; 0x80197b <gpib_log_fp>
    }

    // gpib_state_init();                            // Init PPR talking and listening states
	// gpib_state_init is in gpib_init_devices()
    gpib_init_devices();
   1173a:	9f df       	rcall	.-194    	; 0x1167a <gpib_init_devices>

    gpib_decode_header(gpib_log_fp);
   1173c:	80 91 7b 19 	lds	r24, 0x197B	; 0x80197b <gpib_log_fp>
   11740:	90 91 7c 19 	lds	r25, 0x197C	; 0x80197c <gpib_log_fp+0x1>
   11744:	2b db       	rcall	.-2474   	; 0x10d9c <gpib_decode_header>
    while(1)                                      // Main loop, forever
    {
        if(uart_keyhit(0))
   11746:	80 e0       	ldi	r24, 0x00	; 0
   11748:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <uart_keyhit>
   1174c:	89 2b       	or	r24, r25
            break;

        ch = gpib_read_byte(detail);
   1174e:	31 f4       	brne	.+12     	; 0x1175c <gpib_trace_task+0xd0>
   11750:	ce 01       	movw	r24, r28
        if(!detail)
   11752:	b8 dc       	rcall	.-1680   	; 0x110c4 <gpib_read_byte>
   11754:	20 97       	sbiw	r28, 0x00	; 0
            gpib_decode(ch);
   11756:	b9 f7       	brne	.-18     	; 0x11746 <gpib_trace_task+0xba>
   11758:	a0 dd       	rcall	.-1216   	; 0x1129a <gpib_decode>
   1175a:	f5 cf       	rjmp	.-22     	; 0x11746 <gpib_trace_task+0xba>
    }

    printf("Done\n");
   1175c:	82 ec       	ldi	r24, 0xC2	; 194
   1175e:	93 e1       	ldi	r25, 0x13	; 19
   11760:	a0 e0       	ldi	r26, 0x00	; 0
   11762:	ed b7       	in	r30, 0x3d	; 61
   11764:	fe b7       	in	r31, 0x3e	; 62
   11766:	81 83       	std	Z+1, r24	; 0x01
   11768:	92 83       	std	Z+2, r25	; 0x02
   1176a:	a3 83       	std	Z+3, r26	; 0x03
   1176c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    if(gpib_log_fp)
   11770:	80 91 7b 19 	lds	r24, 0x197B	; 0x80197b <gpib_log_fp>
   11774:	90 91 7c 19 	lds	r25, 0x197C	; 0x80197c <gpib_log_fp+0x1>
   11778:	00 97       	sbiw	r24, 0x00	; 0
   1177a:	a1 f0       	breq	.+40     	; 0x117a4 <gpib_trace_task+0x118>
    {
        fclose(gpib_log_fp);
   1177c:	0e 94 31 7b 	call	0xf662	; 0xf662 <fclose>
        printf("Capturing Closed\n");
   11780:	80 eb       	ldi	r24, 0xB0	; 176
   11782:	93 e1       	ldi	r25, 0x13	; 19
   11784:	a0 e0       	ldi	r26, 0x00	; 0
   11786:	ed b7       	in	r30, 0x3d	; 61
   11788:	fe b7       	in	r31, 0x3e	; 62
   1178a:	81 83       	std	Z+1, r24	; 0x01
   1178c:	92 83       	std	Z+2, r25	; 0x02
   1178e:	a3 83       	std	Z+3, r26	; 0x03
   11790:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        gpib_log_fp = stdout;
   11794:	80 91 db 1c 	lds	r24, 0x1CDB	; 0x801cdb <__iob+0x2>
   11798:	90 91 dc 1c 	lds	r25, 0x1CDC	; 0x801cdc <__iob+0x3>
   1179c:	90 93 7c 19 	sts	0x197C, r25	; 0x80197c <gpib_log_fp+0x1>
   117a0:	80 93 7b 19 	sts	0x197B, r24	; 0x80197b <gpib_log_fp>
    }
}
   117a4:	cd b7       	in	r28, 0x3d	; 61
   117a6:	de b7       	in	r29, 0x3e	; 62
   117a8:	25 96       	adiw	r28, 0x05	; 5
   117aa:	e4 e0       	ldi	r30, 0x04	; 4
   117ac:	0c 94 02 e1 	jmp	0x1c204	; 0x1c204 <__epilogue_restores__+0x1c>

000117b0 <gpib_error_test>:
///
/// @return  val
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{
   117b0:	ef 92       	push	r14
   117b2:	ff 92       	push	r15
   117b4:	0f 93       	push	r16
   117b6:	1f 93       	push	r17
   117b8:	cf 93       	push	r28
   117ba:	df 93       	push	r29
   117bc:	00 d0       	rcall	.+0      	; 0x117be <gpib_error_test+0xe>
   117be:	1f 92       	push	r1
   117c0:	7c 01       	movw	r14, r24

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   117c2:	ec 01       	movw	r28, r24
   117c4:	cc 27       	eor	r28, r28
   117c6:	d0 7d       	andi	r29, 0xD0	; 208
   117c8:	20 97       	sbiw	r28, 0x00	; 0
   117ca:	61 f0       	breq	.+24     	; 0x117e4 <gpib_error_test+0x34>
    {
        val &= ERROR_MASK;

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   117cc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   117d0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   117d4:	8d 72       	andi	r24, 0x2D	; 45
   117d6:	99 27       	eor	r25, r25
   117d8:	87 01       	movw	r16, r14
   117da:	00 27       	eor	r16, r16
   117dc:	10 71       	andi	r17, 0x10	; 16
   117de:	89 2b       	or	r24, r25
   117e0:	59 f4       	brne	.+22     	; 0x117f8 <gpib_error_test+0x48>
   117e2:	17 c0       	rjmp	.+46     	; 0x11812 <gpib_error_test+0x62>
/// @return ABORT flag on user keypress

uint16_t gpib_error_test(uint16_t val)
{

    if(val & ERROR_MASK || uart_keyhit(0) || mmc_ins_status() != 1 )
   117e4:	80 e0       	ldi	r24, 0x00	; 0
   117e6:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <uart_keyhit>
   117ea:	89 2b       	or	r24, r25
   117ec:	79 f7       	brne	.-34     	; 0x117cc <gpib_error_test+0x1c>
   117ee:	0e 94 61 6d 	call	0xdac2	; 0xdac2 <mmc_ins_status>
   117f2:	01 97       	sbiw	r24, 0x01	; 1
   117f4:	59 f7       	brne	.-42     	; 0x117cc <gpib_error_test+0x1c>
   117f6:	62 c0       	rjmp	.+196    	; 0x118bc <gpib_error_test+0x10c>

///@brief IFC is and important state so display it for most messages
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
        {
/// Bus Clear, reseat all states, etc
            if(val & IFC_FLAG)
   117f8:	01 15       	cp	r16, r1
   117fa:	11 05       	cpc	r17, r1
   117fc:	51 f0       	breq	.+20     	; 0x11812 <gpib_error_test+0x62>
                printf("<IFC>\n");
   117fe:	89 ea       	ldi	r24, 0xA9	; 169
   11800:	93 e1       	ldi	r25, 0x13	; 19
   11802:	a0 e0       	ldi	r26, 0x00	; 0
   11804:	ed b7       	in	r30, 0x3d	; 61
   11806:	fe b7       	in	r31, 0x3e	; 62
   11808:	81 83       	std	Z+1, r24	; 0x01
   1180a:	92 83       	std	Z+2, r25	; 0x02
   1180c:	a3 83       	std	Z+3, r26	; 0x03
   1180e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        }

        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TOP_LEVEL_BUS_DECODE + GPIB_DEVICE_STATE_MESSAGES))
   11812:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11816:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1181a:	8d 72       	andi	r24, 0x2D	; 45
   1181c:	99 27       	eor	r25, r25
   1181e:	89 2b       	or	r24, r25
   11820:	c1 f0       	breq	.+48     	; 0x11852 <gpib_error_test+0xa2>
        {
            if(val & TIMEOUT_FLAG)
   11822:	f6 fe       	sbrs	r15, 6
   11824:	0a c0       	rjmp	.+20     	; 0x1183a <gpib_error_test+0x8a>
                printf("<TIMEOUT>\n");
   11826:	8e e9       	ldi	r24, 0x9E	; 158
   11828:	93 e1       	ldi	r25, 0x13	; 19
   1182a:	a0 e0       	ldi	r26, 0x00	; 0
   1182c:	ed b7       	in	r30, 0x3d	; 61
   1182e:	fe b7       	in	r31, 0x3e	; 62
   11830:	81 83       	std	Z+1, r24	; 0x01
   11832:	92 83       	std	Z+2, r25	; 0x02
   11834:	a3 83       	std	Z+3, r26	; 0x03
   11836:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            if(val & BUS_ERROR_FLAG)
   1183a:	d7 ff       	sbrs	r29, 7
   1183c:	0a c0       	rjmp	.+20     	; 0x11852 <gpib_error_test+0xa2>
                printf("<BUS>\n");
   1183e:	87 e9       	ldi	r24, 0x97	; 151
   11840:	93 e1       	ldi	r25, 0x13	; 19
   11842:	a0 e0       	ldi	r26, 0x00	; 0
   11844:	ed b7       	in	r30, 0x3d	; 61
   11846:	fe b7       	in	r31, 0x3e	; 62
   11848:	81 83       	std	Z+1, r24	; 0x01
   1184a:	92 83       	std	Z+2, r25	; 0x02
   1184c:	a3 83       	std	Z+3, r26	; 0x03
   1184e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        }

        if(uart_keyhit(0))
   11852:	80 e0       	ldi	r24, 0x00	; 0
   11854:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <uart_keyhit>
   11858:	89 2b       	or	r24, r25
   1185a:	51 f0       	breq	.+20     	; 0x11870 <gpib_error_test+0xc0>
            printf("<INTERRUPT>\n");
   1185c:	8a e8       	ldi	r24, 0x8A	; 138
   1185e:	93 e1       	ldi	r25, 0x13	; 19
   11860:	a0 e0       	ldi	r26, 0x00	; 0
   11862:	ed b7       	in	r30, 0x3d	; 61
   11864:	fe b7       	in	r31, 0x3e	; 62
   11866:	81 83       	std	Z+1, r24	; 0x01
   11868:	92 83       	std	Z+2, r25	; 0x02
   1186a:	a3 83       	std	Z+3, r26	; 0x03
   1186c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

        if( mmc_ins_status() != 1 )
   11870:	0e 94 61 6d 	call	0xdac2	; 0xdac2 <mmc_ins_status>
   11874:	01 97       	sbiw	r24, 0x01	; 1
   11876:	51 f0       	breq	.+20     	; 0x1188c <gpib_error_test+0xdc>
            printf("<MEDIA MISSING>\n");
   11878:	89 e7       	ldi	r24, 0x79	; 121
   1187a:	93 e1       	ldi	r25, 0x13	; 19
   1187c:	a0 e0       	ldi	r26, 0x00	; 0
   1187e:	ed b7       	in	r30, 0x3d	; 61
   11880:	fe b7       	in	r31, 0x3e	; 62
   11882:	81 83       	std	Z+1, r24	; 0x01
   11884:	92 83       	std	Z+2, r25	; 0x02
   11886:	a3 83       	std	Z+3, r26	; 0x03
   11888:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

        if(val & IFC_FLAG)
   1188c:	01 15       	cp	r16, r1
   1188e:	11 05       	cpc	r17, r1
   11890:	09 f0       	breq	.+2      	; 0x11894 <gpib_error_test+0xe4>
        {
            gpib_init_devices();
   11892:	f3 de       	rcall	.-538    	; 0x1167a <gpib_init_devices>
        }

        if(uart_keyhit(0))
   11894:	80 e0       	ldi	r24, 0x00	; 0
   11896:	0e 94 a8 27 	call	0x4f50	; 0x4f50 <uart_keyhit>
   1189a:	89 2b       	or	r24, r25
        {
            gpib_init_devices();
   1189c:	11 f0       	breq	.+4      	; 0x118a2 <gpib_error_test+0xf2>
   1189e:	ed de       	rcall	.-550    	; 0x1167a <gpib_init_devices>
   118a0:	0b c0       	rjmp	.+22     	; 0x118b8 <gpib_error_test+0x108>
            return(ABORT_FLAG);
        }

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
   118a2:	0e 94 61 6d 	call	0xdac2	; 0xdac2 <mmc_ins_status>
   118a6:	01 97       	sbiw	r24, 0x01	; 1
   118a8:	39 f4       	brne	.+14     	; 0x118b8 <gpib_error_test+0x108>
        {
            return(ABORT_FLAG);
        }

// Wait for IFC free
        if(val & IFC_FLAG )
   118aa:	01 15       	cp	r16, r1
   118ac:	11 05       	cpc	r17, r1
   118ae:	31 f0       	breq	.+12     	; 0x118bc <gpib_error_test+0x10c>
        {
            while(GPIB_IO_RD(IFC) == 0)
   118b0:	54 98       	cbi	0x0a, 4	; 10
   118b2:	4c 9b       	sbis	0x09, 4	; 9
   118b4:	fd cf       	rjmp	.-6      	; 0x118b0 <gpib_error_test+0x100>
   118b6:	02 c0       	rjmp	.+4      	; 0x118bc <gpib_error_test+0x10c>

/// @todo  do we want to always exit here ?
///  low level GPIB functions are still useful even without a DISK
        if( mmc_ins_status() != 1 )
        {
            return(ABORT_FLAG);
   118b8:	c1 e0       	ldi	r28, 0x01	; 1
   118ba:	d0 e0       	ldi	r29, 0x00	; 0
                ;
        }
        return(val);
    }
    return(0);
}
   118bc:	ce 01       	movw	r24, r28
   118be:	cd b7       	in	r28, 0x3d	; 61
   118c0:	de b7       	in	r29, 0x3e	; 62
   118c2:	23 96       	adiw	r28, 0x03	; 3
   118c4:	e6 e0       	ldi	r30, 0x06	; 6
   118c6:	0c 94 00 e1 	jmp	0x1c200	; 0x1c200 <__epilogue_restores__+0x18>

000118ca <GPIB_COMMANDS>:
///
/// @return GPIB status from emulator command.
/// @return 0 if no emulator command processed.

uint16_t GPIB_COMMANDS(uint16_t val, uint8_t unread)
{
   118ca:	1f 93       	push	r17
   118cc:	cf 93       	push	r28
   118ce:	df 93       	push	r29
   118d0:	ec 01       	movw	r28, r24
   118d2:	16 2f       	mov	r17, r22
    uint16_t status;

///@brief talking ?
    if(talking != UNT)
   118d4:	80 91 08 1f 	lds	r24, 0x1F08	; 0x801f08 <talking>
   118d8:	8f 35       	cpi	r24, 0x5F	; 95
   118da:	91 f0       	breq	.+36     	; 0x11900 <GPIB_COMMANDS+0x36>
    {

#ifdef AMIGO
        if ( AMIGO_is_MLA(listening) )
   118dc:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   118e0:	90 e0       	ldi	r25, 0x00	; 0
   118e2:	76 de       	rcall	.-788    	; 0x115d0 <AMIGO_is_MLA>
   118e4:	89 2b       	or	r24, r25
   118e6:	c9 f4       	brne	.+50     	; 0x1191a <GPIB_COMMANDS+0x50>
            secondary = 0;
            return(status);
        }
#endif                                    // ifdef AMIGO

        if ( SS80_is_MLA(listening) )
   118e8:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   118ec:	90 e0       	ldi	r25, 0x00	; 0
   118ee:	3d de       	rcall	.-902    	; 0x1156a <SS80_is_MLA>
   118f0:	89 2b       	or	r24, r25
   118f2:	11 f5       	brne	.+68     	; 0x11938 <GPIB_COMMANDS+0x6e>
            status = SS80_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MLA(listening) )
   118f4:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   118f8:	90 e0       	ldi	r25, 0x00	; 0
   118fa:	9d de       	rcall	.-710    	; 0x11636 <PRINTER_is_MLA>
   118fc:	89 2b       	or	r24, r25
   118fe:	59 f5       	brne	.+86     	; 0x11956 <GPIB_COMMANDS+0x8c>
            return(status);
        }
    }

///@brief listening ?
    if(listening != UNL)
   11900:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   11904:	8f 33       	cpi	r24, 0x3F	; 63
   11906:	19 f4       	brne	.+6      	; 0x1190e <GPIB_COMMANDS+0x44>
            status = PRINTER_COMMANDS(secondary);
            secondary = 0;
            return(status);
        }
    }
    return(0);
   11908:	80 e0       	ldi	r24, 0x00	; 0
   1190a:	90 e0       	ldi	r25, 0x00	; 0
   1190c:	2e c0       	rjmp	.+92     	; 0x1196a <GPIB_COMMANDS+0xa0>

///@brief listening ?
    if(listening != UNL)
    {
#ifdef AMIGO
        if ( AMIGO_is_MTA(talking) )
   1190e:	80 91 08 1f 	lds	r24, 0x1F08	; 0x801f08 <talking>
   11912:	90 e0       	ldi	r25, 0x00	; 0
   11914:	6e de       	rcall	.-804    	; 0x115f2 <AMIGO_is_MTA>
   11916:	89 2b       	or	r24, r25
   11918:	49 f0       	breq	.+18     	; 0x1192c <GPIB_COMMANDS+0x62>
        {
            if(unread)
   1191a:	11 23       	and	r17, r17
   1191c:	11 f0       	breq	.+4      	; 0x11922 <GPIB_COMMANDS+0x58>
                gpib_unread(val);
   1191e:	ce 01       	movw	r24, r28
   11920:	61 d8       	rcall	.-3902   	; 0x109e4 <gpib_unread>
   11922:	80 91 09 1f 	lds	r24, 0x1F09	; 0x801f09 <secondary>
            status = AMIGO_COMMANDS(secondary);
   11926:	0e 94 33 b9 	call	0x17266	; 0x17266 <AMIGO_COMMANDS>
   1192a:	1d c0       	rjmp	.+58     	; 0x11966 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }
#endif

        if ( SS80_is_MTA(talking) )
   1192c:	80 91 08 1f 	lds	r24, 0x1F08	; 0x801f08 <talking>
   11930:	90 e0       	ldi	r25, 0x00	; 0
   11932:	2c de       	rcall	.-936    	; 0x1158c <SS80_is_MTA>
   11934:	89 2b       	or	r24, r25
   11936:	49 f0       	breq	.+18     	; 0x1194a <GPIB_COMMANDS+0x80>
        {
            if(unread)
   11938:	11 23       	and	r17, r17
   1193a:	11 f0       	breq	.+4      	; 0x11940 <GPIB_COMMANDS+0x76>
                gpib_unread(val);
   1193c:	ce 01       	movw	r24, r28
   1193e:	52 d8       	rcall	.-3932   	; 0x109e4 <gpib_unread>
   11940:	80 91 09 1f 	lds	r24, 0x1F09	; 0x801f09 <secondary>
            status = SS80_COMMANDS(secondary);
   11944:	0e 94 4f ad 	call	0x15a9e	; 0x15a9e <SS80_COMMANDS>
   11948:	0e c0       	rjmp	.+28     	; 0x11966 <GPIB_COMMANDS+0x9c>
            secondary = 0;
            return(status);
        }

        if ( PRINTER_is_MTA(talking) )
   1194a:	80 91 08 1f 	lds	r24, 0x1F08	; 0x801f08 <talking>
   1194e:	90 e0       	ldi	r25, 0x00	; 0
   11950:	83 de       	rcall	.-762    	; 0x11658 <PRINTER_is_MTA>
   11952:	89 2b       	or	r24, r25
   11954:	c9 f2       	breq	.-78     	; 0x11908 <GPIB_COMMANDS+0x3e>
        {
            if(unread)
   11956:	11 23       	and	r17, r17
   11958:	11 f0       	breq	.+4      	; 0x1195e <GPIB_COMMANDS+0x94>
                gpib_unread(val);
   1195a:	ce 01       	movw	r24, r28
   1195c:	43 d8       	rcall	.-3962   	; 0x109e4 <gpib_unread>
   1195e:	80 91 09 1f 	lds	r24, 0x1F09	; 0x801f09 <secondary>
            status = PRINTER_COMMANDS(secondary);
   11962:	0e 94 ac bb 	call	0x17758	; 0x17758 <PRINTER_COMMANDS>
   11966:	10 92 09 1f 	sts	0x1F09, r1	; 0x801f09 <secondary>
            secondary = 0;
   1196a:	df 91       	pop	r29
            return(status);
        }
    }
    return(0);
}
   1196c:	cf 91       	pop	r28
   1196e:	1f 91       	pop	r17
   11970:	08 95       	ret

00011972 <Send_Identify>:
   11972:	cf 92       	push	r12
///
/// @return  0 on GPIB error returns error flags
/// @see gpib.h ERROR_MASK for a full list.

int Send_Identify(uint8_t ch, uint16_t ID)
{
   11974:	df 92       	push	r13
   11976:	ff 92       	push	r15
   11978:	0f 93       	push	r16
   1197a:	1f 93       	push	r17
   1197c:	cf 93       	push	r28
   1197e:	df 93       	push	r29
   11980:	cd b7       	in	r28, 0x3d	; 61
   11982:	de b7       	in	r29, 0x3e	; 62
   11984:	2b 97       	sbiw	r28, 0x0b	; 11
   11986:	0f b6       	in	r0, 0x3f	; 63
   11988:	f8 94       	cli
   1198a:	de bf       	out	0x3e, r29	; 62
   1198c:	0f be       	out	0x3f, r0	; 63
   1198e:	cd bf       	out	0x3d, r28	; 61
   11990:	f8 2e       	mov	r15, r24
   11992:	6b 01       	movw	r12, r22
    uint16_t status = EOI_FLAG;
   11994:	80 e0       	ldi	r24, 0x00	; 0
   11996:	91 e0       	ldi	r25, 0x01	; 1
   11998:	9b 87       	std	Y+11, r25	; 0x0b
   1199a:	8a 87       	std	Y+10, r24	; 0x0a
    uint8_t tmp[2];

    V2B_MSB(tmp,0,2,ID);
   1199c:	8b 01       	movw	r16, r22
   1199e:	20 e0       	ldi	r18, 0x00	; 0
   119a0:	30 e0       	ldi	r19, 0x00	; 0
   119a2:	42 e0       	ldi	r20, 0x02	; 2
   119a4:	50 e0       	ldi	r21, 0x00	; 0
   119a6:	60 e0       	ldi	r22, 0x00	; 0
   119a8:	70 e0       	ldi	r23, 0x00	; 0
   119aa:	ce 01       	movw	r24, r28
   119ac:	08 96       	adiw	r24, 0x08	; 8
   119ae:	0e 94 e7 bb 	call	0x177ce	; 0x177ce <V2B_MSB>
    if(gpib_write_str(tmp,2, &status) != 2)
   119b2:	ae 01       	movw	r20, r28
   119b4:	46 5f       	subi	r20, 0xF6	; 246
   119b6:	5f 4f       	sbci	r21, 0xFF	; 255
   119b8:	62 e0       	ldi	r22, 0x02	; 2
   119ba:	70 e0       	ldi	r23, 0x00	; 0
   119bc:	ce 01       	movw	r24, r28
   119be:	08 96       	adiw	r24, 0x08	; 8
   119c0:	12 dd       	rcall	.-1500   	; 0x113e6 <gpib_write_str>
   119c2:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   119c6:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   119ca:	02 97       	sbiw	r24, 0x02	; 2
   119cc:	79 f0       	breq	.+30     	; 0x119ec <Send_Identify+0x7a>
    {
        if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   119ce:	25 72       	andi	r18, 0x25	; 37
   119d0:	33 27       	eor	r19, r19
   119d2:	23 2b       	or	r18, r19
   119d4:	f9 f0       	breq	.+62     	; 0x11a14 <Send_Identify+0xa2>
            printf("[IDENT Unit:%02XH=%04XH FAILED]\n",
   119d6:	ed b7       	in	r30, 0x3d	; 61
   119d8:	fe b7       	in	r31, 0x3e	; 62
   119da:	d7 82       	std	Z+7, r13	; 0x07
   119dc:	c6 82       	std	Z+6, r12	; 0x06
   119de:	8f 2d       	mov	r24, r15
   119e0:	90 e0       	ldi	r25, 0x00	; 0
   119e2:	95 83       	std	Z+5, r25	; 0x05
   119e4:	84 83       	std	Z+4, r24	; 0x04
   119e6:	88 e5       	ldi	r24, 0x58	; 88
   119e8:	93 e1       	ldi	r25, 0x13	; 19
   119ea:	0e c0       	rjmp	.+28     	; 0x11a08 <Send_Identify+0x96>
                (int)ch,(int)ID);
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   119ec:	24 72       	andi	r18, 0x24	; 36
   119ee:	33 27       	eor	r19, r19
   119f0:	23 2b       	or	r18, r19
   119f2:	81 f0       	breq	.+32     	; 0x11a14 <Send_Identify+0xa2>
        printf("[IDENT Unit:%02XH=%04XH]\n", (int)ch,(int)ID);
   119f4:	ed b7       	in	r30, 0x3d	; 61
   119f6:	fe b7       	in	r31, 0x3e	; 62
   119f8:	d7 82       	std	Z+7, r13	; 0x07
   119fa:	c6 82       	std	Z+6, r12	; 0x06
   119fc:	8f 2d       	mov	r24, r15
   119fe:	90 e0       	ldi	r25, 0x00	; 0
   11a00:	95 83       	std	Z+5, r25	; 0x05
   11a02:	84 83       	std	Z+4, r24	; 0x04
   11a04:	8e e3       	ldi	r24, 0x3E	; 62
   11a06:	93 e1       	ldi	r25, 0x13	; 19
   11a08:	a0 e0       	ldi	r26, 0x00	; 0
   11a0a:	81 83       	std	Z+1, r24	; 0x01
   11a0c:	92 83       	std	Z+2, r25	; 0x02
   11a0e:	a3 83       	std	Z+3, r26	; 0x03
   11a10:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
    return (status & ERROR_MASK);
   11a14:	8a 85       	ldd	r24, Y+10	; 0x0a
   11a16:	9b 85       	ldd	r25, Y+11	; 0x0b
   11a18:	88 27       	eor	r24, r24
   11a1a:	90 7d       	andi	r25, 0xD0	; 208
}
   11a1c:	2b 96       	adiw	r28, 0x0b	; 11
   11a1e:	0f b6       	in	r0, 0x3f	; 63
   11a20:	f8 94       	cli
   11a22:	de bf       	out	0x3e, r29	; 62
   11a24:	0f be       	out	0x3f, r0	; 63
   11a26:	cd bf       	out	0x3d, r28	; 61
   11a28:	df 91       	pop	r29
   11a2a:	cf 91       	pop	r28
   11a2c:	1f 91       	pop	r17
   11a2e:	0f 91       	pop	r16
   11a30:	ff 90       	pop	r15
   11a32:	df 90       	pop	r13
   11a34:	cf 90       	pop	r12
   11a36:	08 95       	ret

00011a38 <GPIB>:
/// @return  0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list.

int GPIB(uint8_t ch)
{
   11a38:	00 d0       	rcall	.+0      	; 0x11a3a <GPIB+0x2>
   11a3a:	00 d0       	rcall	.+0      	; 0x11a3c <GPIB+0x4>
   11a3c:	1f 92       	push	r1
   11a3e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11a42:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
///@brief Parallel Poll Configure
///TODO
    if(ch == PPC)
   11a46:	85 30       	cpi	r24, 0x05	; 5
   11a48:	89 f4       	brne	.+34     	; 0x11a6c <GPIB+0x34>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11a4a:	27 71       	andi	r18, 0x17	; 23
   11a4c:	33 27       	eor	r19, r19
   11a4e:	23 2b       	or	r18, r19
   11a50:	51 f0       	breq	.+20     	; 0x11a66 <GPIB+0x2e>
            printf("[PPC unsupported TODO]\n");
   11a52:	86 e2       	ldi	r24, 0x26	; 38
   11a54:	93 e1       	ldi	r25, 0x13	; 19
   11a56:	a0 e0       	ldi	r26, 0x00	; 0
   11a58:	ed b7       	in	r30, 0x3d	; 61
   11a5a:	fe b7       	in	r31, 0x3e	; 62
   11a5c:	81 83       	std	Z+1, r24	; 0x01
   11a5e:	92 83       	std	Z+2, r25	; 0x02
   11a60:	a3 83       	std	Z+3, r26	; 0x03
   11a62:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        spoll = 0;
   11a66:	10 92 05 1f 	sts	0x1F05, r1	; 0x801f05 <spoll>
   11a6a:	a0 c0       	rjmp	.+320    	; 0x11bac <GPIB+0x174>
        return 0;
    }
///@brief Parallel Poll Unconfigure
///TODO
    if(ch == PPU)
   11a6c:	85 31       	cpi	r24, 0x15	; 21
   11a6e:	39 f4       	brne	.+14     	; 0x11a7e <GPIB+0x46>
    {
        if(debuglevel & (GPIB_ERR + GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11a70:	27 71       	andi	r18, 0x17	; 23
   11a72:	33 27       	eor	r19, r19
   11a74:	23 2b       	or	r18, r19
   11a76:	b9 f3       	breq	.-18     	; 0x11a66 <GPIB+0x2e>
            printf("[PPU unsupported TODO]\n");
   11a78:	8e e0       	ldi	r24, 0x0E	; 14
   11a7a:	93 e1       	ldi	r25, 0x13	; 19
   11a7c:	ec cf       	rjmp	.-40     	; 0x11a56 <GPIB+0x1e>
    }

/// @todo FIXME
#if defined(SPOLL)
///@brief Serial Poll Enable
    if(ch == SPE)
   11a7e:	88 31       	cpi	r24, 0x18	; 24
   11a80:	d9 f4       	brne	.+54     	; 0x11ab8 <GPIB+0x80>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11a82:	26 70       	andi	r18, 0x06	; 6
   11a84:	33 27       	eor	r19, r19
   11a86:	23 2b       	or	r18, r19
   11a88:	51 f0       	breq	.+20     	; 0x11a9e <GPIB+0x66>
            printf("[SPE]\n");
   11a8a:	87 e0       	ldi	r24, 0x07	; 7
   11a8c:	93 e1       	ldi	r25, 0x13	; 19
   11a8e:	a0 e0       	ldi	r26, 0x00	; 0
   11a90:	ed b7       	in	r30, 0x3d	; 61
   11a92:	fe b7       	in	r31, 0x3e	; 62
   11a94:	81 83       	std	Z+1, r24	; 0x01
   11a96:	92 83       	std	Z+2, r25	; 0x02
   11a98:	a3 83       	std	Z+3, r26	; 0x03
   11a9a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
        spoll = 1;
   11a9e:	81 e0       	ldi	r24, 0x01	; 1
   11aa0:	80 93 05 1f 	sts	0x1F05, r24	; 0x801f05 <spoll>
        if(SS80_is_MTA(talking))
   11aa4:	80 91 08 1f 	lds	r24, 0x1F08	; 0x801f08 <talking>
   11aa8:	90 e0       	ldi	r25, 0x00	; 0
   11aaa:	70 dd       	rcall	.-1312   	; 0x1158c <SS80_is_MTA>
   11aac:	89 2b       	or	r24, r25
   11aae:	09 f4       	brne	.+2      	; 0x11ab2 <GPIB+0x7a>
   11ab0:	7d c0       	rjmp	.+250    	; 0x11bac <GPIB+0x174>
        {
            return( SS80_Report() );
   11ab2:	0e 94 08 a9 	call	0x15210	; 0x15210 <SS80_Report>
   11ab6:	7c c0       	rjmp	.+248    	; 0x11bb0 <GPIB+0x178>
        }
        return 0;
    }

///@brief Serial Poll Disable
    if(ch == SPD)
   11ab8:	89 31       	cpi	r24, 0x19	; 25
   11aba:	39 f4       	brne	.+14     	; 0x11aca <GPIB+0x92>
    {
#if SDEBUG
        if(debuglevel & (GPIB_PPR + GPIB_BUS_OR_CMD_BYTE_MESSAGES))
   11abc:	26 70       	andi	r18, 0x06	; 6
   11abe:	33 27       	eor	r19, r19
   11ac0:	23 2b       	or	r18, r19
   11ac2:	89 f2       	breq	.-94     	; 0x11a66 <GPIB+0x2e>
            printf("[SPD]\n");
   11ac4:	80 e0       	ldi	r24, 0x00	; 0
   11ac6:	93 e1       	ldi	r25, 0x13	; 19
   11ac8:	c6 cf       	rjmp	.-116    	; 0x11a56 <GPIB+0x1e>
        return 0;
    }
#endif                                        // #if defined(SPOLL)

///@brief Selected Device Clear
    if(ch == SDC )
   11aca:	84 30       	cpi	r24, 0x04	; 4
   11acc:	09 f0       	breq	.+2      	; 0x11ad0 <GPIB+0x98>
   11ace:	48 c0       	rjmp	.+144    	; 0x11b60 <GPIB+0x128>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11ad0:	22 ff       	sbrs	r18, 2
   11ad2:	0a c0       	rjmp	.+20     	; 0x11ae8 <GPIB+0xb0>
            printf("[SDC]\n");
   11ad4:	89 ef       	ldi	r24, 0xF9	; 249
   11ad6:	92 e1       	ldi	r25, 0x12	; 18
   11ad8:	a0 e0       	ldi	r26, 0x00	; 0
   11ada:	ed b7       	in	r30, 0x3d	; 61
   11adc:	fe b7       	in	r31, 0x3e	; 62
   11ade:	81 83       	std	Z+1, r24	; 0x01
   11ae0:	92 83       	std	Z+2, r25	; 0x02
   11ae2:	a3 83       	std	Z+3, r26	; 0x03
   11ae4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
        if(SS80_is_MLA(listening))
   11ae8:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   11aec:	90 e0       	ldi	r25, 0x00	; 0
   11aee:	3d dd       	rcall	.-1414   	; 0x1156a <SS80_is_MLA>
   11af0:	89 2b       	or	r24, r25
   11af2:	d9 f0       	breq	.+54     	; 0x11b2a <GPIB+0xf2>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
///  CS80 3-4
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11af4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11af8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11afc:	84 72       	andi	r24, 0x24	; 36
   11afe:	99 27       	eor	r25, r25
   11b00:	89 2b       	or	r24, r25
   11b02:	51 f0       	breq	.+20     	; 0x11b18 <GPIB+0xe0>
                printf("[SDC SS80]\n");
   11b04:	8d ee       	ldi	r24, 0xED	; 237
   11b06:	92 e1       	ldi	r25, 0x12	; 18
   11b08:	a0 e0       	ldi	r26, 0x00	; 0
   11b0a:	ed b7       	in	r30, 0x3d	; 61
   11b0c:	fe b7       	in	r31, 0x3e	; 62
   11b0e:	81 83       	std	Z+1, r24	; 0x01
   11b10:	92 83       	std	Z+2, r25	; 0x02
   11b12:	a3 83       	std	Z+3, r26	; 0x03
   11b14:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
            return(SS80_Selected_Device_Clear(SS80s->unitNO) );
   11b18:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   11b1c:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   11b20:	85 81       	ldd	r24, Z+5	; 0x05
   11b22:	90 e0       	ldi	r25, 0x00	; 0
   11b24:	0e 94 d4 a9 	call	0x153a8	; 0x153a8 <SS80_Selected_Device_Clear>
   11b28:	43 c0       	rjmp	.+134    	; 0x11bb0 <GPIB+0x178>
        }

#ifdef AMIGO
        if(AMIGO_is_MLA(listening))
   11b2a:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   11b2e:	90 e0       	ldi	r25, 0x00	; 0
   11b30:	4f dd       	rcall	.-1378   	; 0x115d0 <AMIGO_is_MLA>
   11b32:	89 2b       	or	r24, r25
   11b34:	d9 f1       	breq	.+118    	; 0x11bac <GPIB+0x174>
        {
///  Note: Suposed to be unsupported in SS80 - pg 4-2
#if SDEBUG
            if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11b36:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11b3a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11b3e:	84 72       	andi	r24, 0x24	; 36
   11b40:	99 27       	eor	r25, r25
   11b42:	89 2b       	or	r24, r25
   11b44:	51 f0       	breq	.+20     	; 0x11b5a <GPIB+0x122>
                printf("[SDC AMIGO]\n");
   11b46:	80 ee       	ldi	r24, 0xE0	; 224
   11b48:	92 e1       	ldi	r25, 0x12	; 18
   11b4a:	a0 e0       	ldi	r26, 0x00	; 0
   11b4c:	ed b7       	in	r30, 0x3d	; 61
   11b4e:	fe b7       	in	r31, 0x3e	; 62
   11b50:	81 83       	std	Z+1, r24	; 0x01
   11b52:	92 83       	std	Z+2, r25	; 0x02
   11b54:	a3 83       	std	Z+3, r26	; 0x03
   11b56:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
            return( amigo_cmd_clear() );
   11b5a:	0e 94 19 b4 	call	0x16832	; 0x16832 <amigo_cmd_clear>
   11b5e:	28 c0       	rjmp	.+80     	; 0x11bb0 <GPIB+0x178>
/// @todo FIXME
        return( 0 );
    }

///@brief   (Universal) Device Clear
    if(ch == DCL )
   11b60:	84 31       	cpi	r24, 0x14	; 20
   11b62:	99 f4       	brne	.+38     	; 0x11b8a <GPIB+0x152>
    {
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11b64:	22 ff       	sbrs	r18, 2
   11b66:	0a c0       	rjmp	.+20     	; 0x11b7c <GPIB+0x144>
            printf("[DCL]\n");
   11b68:	89 ed       	ldi	r24, 0xD9	; 217
   11b6a:	92 e1       	ldi	r25, 0x12	; 18
   11b6c:	a0 e0       	ldi	r26, 0x00	; 0
   11b6e:	ed b7       	in	r30, 0x3d	; 61
   11b70:	fe b7       	in	r31, 0x3e	; 62
   11b72:	81 83       	std	Z+1, r24	; 0x01
   11b74:	92 83       	std	Z+2, r25	; 0x02
   11b76:	a3 83       	std	Z+3, r26	; 0x03
   11b78:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
        SS80_Universal_Device_Clear();
   11b7c:	0e 94 c6 a9 	call	0x1538c	; 0x1538c <SS80_Universal_Device_Clear>

#ifdef AMIGO
        amigo_cmd_clear();
   11b80:	0e 94 19 b4 	call	0x16832	; 0x16832 <amigo_cmd_clear>
#endif

/// @todo Fixme
        printer_close();
   11b84:	0e 94 38 ba 	call	0x17470	; 0x17470 <printer_close>
   11b88:	11 c0       	rjmp	.+34     	; 0x11bac <GPIB+0x174>
        return( 0 );
    }

    if(debuglevel & (GPIB_ERR + GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_TODO))
   11b8a:	25 71       	andi	r18, 0x15	; 21
   11b8c:	33 27       	eor	r19, r19
   11b8e:	23 2b       	or	r18, r19
   11b90:	69 f0       	breq	.+26     	; 0x11bac <GPIB+0x174>
        printf("[GPIB (%02XH) not defined TODO]\n", 0xff & ch);
   11b92:	90 e0       	ldi	r25, 0x00	; 0
   11b94:	ed b7       	in	r30, 0x3d	; 61
   11b96:	fe b7       	in	r31, 0x3e	; 62
   11b98:	95 83       	std	Z+5, r25	; 0x05
   11b9a:	84 83       	std	Z+4, r24	; 0x04
   11b9c:	88 eb       	ldi	r24, 0xB8	; 184
   11b9e:	92 e1       	ldi	r25, 0x12	; 18
   11ba0:	a0 e0       	ldi	r26, 0x00	; 0
   11ba2:	81 83       	std	Z+1, r24	; 0x01
   11ba4:	92 83       	std	Z+2, r25	; 0x02
   11ba6:	a3 83       	std	Z+3, r26	; 0x03
   11ba8:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    return(0);
   11bac:	80 e0       	ldi	r24, 0x00	; 0
   11bae:	90 e0       	ldi	r25, 0x00	; 0
}
   11bb0:	0f 90       	pop	r0
   11bb2:	0f 90       	pop	r0
   11bb4:	0f 90       	pop	r0
   11bb6:	0f 90       	pop	r0
   11bb8:	0f 90       	pop	r0
   11bba:	08 95       	ret

00011bbc <GPIB_TALK>:
/// @param[in] ch 8 bit talk command
///
/// @return  0

int GPIB_TALK(uint8_t ch)
{
   11bbc:	cf 93       	push	r28
   11bbe:	df 93       	push	r29
   11bc0:	00 d0       	rcall	.+0      	; 0x11bc2 <GPIB_TALK+0x6>
   11bc2:	00 d0       	rcall	.+0      	; 0x11bc4 <GPIB_TALK+0x8>
   11bc4:	1f 92       	push	r1

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///  save talking state
    talking_last = talking;
   11bc6:	90 91 08 1f 	lds	r25, 0x1F08	; 0x801f08 <talking>
   11bca:	90 93 0b 1f 	sts	0x1F0B, r25	; 0x801f0b <talking_last>
    talking = ch;
   11bce:	80 93 08 1f 	sts	0x1F08, r24	; 0x801f08 <talking>

    talk_cleanup();

///@brief  Universal Untalk
    if(ch == UNT)
   11bd2:	8f 35       	cpi	r24, 0x5F	; 95
   11bd4:	79 f4       	brne	.+30     	; 0x11bf4 <GPIB_TALK+0x38>
    {
//FIXME talking = 0 ????
#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11bd6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11bda:	82 ff       	sbrs	r24, 2
   11bdc:	7f c0       	rjmp	.+254    	; 0x11cdc <GPIB_TALK+0x120>
            printf("[UNT]\n");
   11bde:	85 e6       	ldi	r24, 0x65	; 101
   11be0:	92 e1       	ldi	r25, 0x12	; 18
   11be2:	a0 e0       	ldi	r26, 0x00	; 0
   11be4:	ed b7       	in	r30, 0x3d	; 61
   11be6:	fe b7       	in	r31, 0x3e	; 62
   11be8:	81 83       	std	Z+1, r24	; 0x01
   11bea:	92 83       	std	Z+2, r25	; 0x02
   11bec:	a3 83       	std	Z+3, r26	; 0x03
   11bee:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   11bf2:	74 c0       	rjmp	.+232    	; 0x11cdc <GPIB_TALK+0x120>
#endif
        return(0);
    }

    if(SS80_is_MTA(ch))
   11bf4:	c8 2f       	mov	r28, r24
   11bf6:	d0 e0       	ldi	r29, 0x00	; 0
   11bf8:	ce 01       	movw	r24, r28
   11bfa:	c8 dc       	rcall	.-1648   	; 0x1158c <SS80_is_MTA>
   11bfc:	89 2b       	or	r24, r25
   11bfe:	e1 f0       	breq	.+56     	; 0x11c38 <GPIB_TALK+0x7c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11c00:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11c04:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11c08:	84 72       	andi	r24, 0x24	; 36
   11c0a:	99 27       	eor	r25, r25
   11c0c:	89 2b       	or	r24, r25
   11c0e:	61 f0       	breq	.+24     	; 0x11c28 <GPIB_TALK+0x6c>
            printf("[TA %02XH SS80]\n", 0xff & ch);
   11c10:	ed b7       	in	r30, 0x3d	; 61
   11c12:	fe b7       	in	r31, 0x3e	; 62
   11c14:	d5 83       	std	Z+5, r29	; 0x05
   11c16:	c4 83       	std	Z+4, r28	; 0x04
   11c18:	84 e5       	ldi	r24, 0x54	; 84
   11c1a:	92 e1       	ldi	r25, 0x12	; 18
   11c1c:	a0 e0       	ldi	r26, 0x00	; 0
   11c1e:	81 83       	std	Z+1, r24	; 0x01
   11c20:	92 83       	std	Z+2, r25	; 0x02
   11c22:	a3 83       	std	Z+3, r26	; 0x03
   11c24:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif

        if (spoll)
   11c28:	80 91 05 1f 	lds	r24, 0x1F05	; 0x801f05 <spoll>
   11c2c:	88 23       	and	r24, r24
   11c2e:	09 f4       	brne	.+2      	; 0x11c32 <GPIB_TALK+0x76>
   11c30:	55 c0       	rjmp	.+170    	; 0x11cdc <GPIB_TALK+0x120>
        {
            SS80_Report();
   11c32:	0e 94 08 a9 	call	0x15210	; 0x15210 <SS80_Report>
   11c36:	52 c0       	rjmp	.+164    	; 0x11cdc <GPIB_TALK+0x120>
        }
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MTA(ch))
   11c38:	ce 01       	movw	r24, r28
   11c3a:	db dc       	rcall	.-1610   	; 0x115f2 <AMIGO_is_MTA>
   11c3c:	89 2b       	or	r24, r25
   11c3e:	81 f0       	breq	.+32     	; 0x11c60 <GPIB_TALK+0xa4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11c40:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11c44:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11c48:	84 72       	andi	r24, 0x24	; 36
   11c4a:	99 27       	eor	r25, r25
   11c4c:	89 2b       	or	r24, r25
   11c4e:	09 f4       	brne	.+2      	; 0x11c52 <GPIB_TALK+0x96>
   11c50:	45 c0       	rjmp	.+138    	; 0x11cdc <GPIB_TALK+0x120>
            printf("[TA %02XH AMIGO]\n", 0xff & ch);
   11c52:	ed b7       	in	r30, 0x3d	; 61
   11c54:	fe b7       	in	r31, 0x3e	; 62
   11c56:	d5 83       	std	Z+5, r29	; 0x05
   11c58:	c4 83       	std	Z+4, r28	; 0x04
   11c5a:	82 e4       	ldi	r24, 0x42	; 66
   11c5c:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(PRINTER_is_MTA(ch))
   11c5e:	38 c0       	rjmp	.+112    	; 0x11cd0 <GPIB_TALK+0x114>
   11c60:	ce 01       	movw	r24, r28
   11c62:	fa dc       	rcall	.-1548   	; 0x11658 <PRINTER_is_MTA>
   11c64:	89 2b       	or	r24, r25
   11c66:	79 f0       	breq	.+30     	; 0x11c86 <GPIB_TALK+0xca>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11c68:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11c6c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11c70:	84 72       	andi	r24, 0x24	; 36
   11c72:	99 27       	eor	r25, r25
   11c74:	89 2b       	or	r24, r25
   11c76:	91 f1       	breq	.+100    	; 0x11cdc <GPIB_TALK+0x120>
            printf("[TA %02XH PRINTER]\n", 0xff & ch);
   11c78:	ed b7       	in	r30, 0x3d	; 61
   11c7a:	fe b7       	in	r31, 0x3e	; 62
   11c7c:	d5 83       	std	Z+5, r29	; 0x05
   11c7e:	c4 83       	std	Z+4, r28	; 0x04
   11c80:	8e e2       	ldi	r24, 0x2E	; 46
   11c82:	92 e1       	ldi	r25, 0x12	; 18
   11c84:	25 c0       	rjmp	.+74     	; 0x11cd0 <GPIB_TALK+0x114>
#endif
        return(0);
    }

    if(PRINTER_is_MLA(listening))
   11c86:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   11c8a:	90 e0       	ldi	r25, 0x00	; 0
   11c8c:	d4 dc       	rcall	.-1624   	; 0x11636 <PRINTER_is_MLA>
   11c8e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11c92:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11c96:	89 2b       	or	r24, r25
   11c98:	99 f0       	breq	.+38     	; 0x11cc0 <GPIB_TALK+0x104>
    {
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11c9a:	24 72       	andi	r18, 0x24	; 36
   11c9c:	33 27       	eor	r19, r19
   11c9e:	23 2b       	or	r18, r19
   11ca0:	51 f0       	breq	.+20     	; 0x11cb6 <GPIB_TALK+0xfa>
            printf("[PRINTER OPEN]\n");
   11ca2:	8e e1       	ldi	r24, 0x1E	; 30
   11ca4:	92 e1       	ldi	r25, 0x12	; 18
   11ca6:	a0 e0       	ldi	r26, 0x00	; 0
   11ca8:	ed b7       	in	r30, 0x3d	; 61
   11caa:	fe b7       	in	r31, 0x3e	; 62
   11cac:	81 83       	std	Z+1, r24	; 0x01
   11cae:	92 83       	std	Z+2, r25	; 0x02
   11cb0:	a3 83       	std	Z+3, r26	; 0x03
   11cb2:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        printer_open(NULL);
   11cb6:	80 e0       	ldi	r24, 0x00	; 0
   11cb8:	90 e0       	ldi	r25, 0x00	; 0
   11cba:	0e 94 90 ba 	call	0x17520	; 0x17520 <printer_open>
   11cbe:	0e c0       	rjmp	.+28     	; 0x11cdc <GPIB_TALK+0x120>
        return(0);
    }

#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11cc0:	22 ff       	sbrs	r18, 2
   11cc2:	0c c0       	rjmp	.+24     	; 0x11cdc <GPIB_TALK+0x120>
        printf("[TA %02XH]\n", 0xff & ch);
   11cc4:	ed b7       	in	r30, 0x3d	; 61
   11cc6:	fe b7       	in	r31, 0x3e	; 62
   11cc8:	d5 83       	std	Z+5, r29	; 0x05
   11cca:	c4 83       	std	Z+4, r28	; 0x04
   11ccc:	82 e1       	ldi	r24, 0x12	; 18
   11cce:	92 e1       	ldi	r25, 0x12	; 18
   11cd0:	a0 e0       	ldi	r26, 0x00	; 0
   11cd2:	81 83       	std	Z+1, r24	; 0x01
   11cd4:	92 83       	std	Z+2, r25	; 0x02
   11cd6:	a3 83       	std	Z+3, r26	; 0x03
   11cd8:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
    return(0);
}                                                 // Talk Address primary address group
   11cdc:	80 e0       	ldi	r24, 0x00	; 0
   11cde:	90 e0       	ldi	r25, 0x00	; 0
   11ce0:	cd b7       	in	r28, 0x3d	; 61
   11ce2:	de b7       	in	r29, 0x3e	; 62
   11ce4:	25 96       	adiw	r28, 0x05	; 5
   11ce6:	e2 e0       	ldi	r30, 0x02	; 2
   11ce8:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

00011cec <GPIB_SECONDARY_ADDRESS>:
///
/// @param[in] ch 8 bit secondary address.
///
/// @return  0
int GPIB_SECONDARY_ADDRESS(uint8_t ch)
{
   11cec:	a9 e0       	ldi	r26, 0x09	; 9
   11cee:	b0 e0       	ldi	r27, 0x00	; 0
   11cf0:	ec e7       	ldi	r30, 0x7C	; 124
   11cf2:	fe e8       	ldi	r31, 0x8E	; 142
   11cf4:	0c 94 e7 e0 	jmp	0x1c1ce	; 0x1c1ce <__prologue_saves__+0x1e>
   11cf8:	18 2f       	mov	r17, r24
///  note: any errors will reset lastcmd
///  Universal Talk mode
///  Treat this as a Secondary Address ?
///  SS80 Ident 4-31
///  If we have our secondary address then send IDENT
    if(SS80_is_MSA(ch) )
   11cfa:	c8 2f       	mov	r28, r24
   11cfc:	d0 e0       	ldi	r29, 0x00	; 0
   11cfe:	ce 01       	movw	r24, r28
   11d00:	56 dc       	rcall	.-1876   	; 0x115ae <SS80_is_MSA>
   11d02:	89 2b       	or	r24, r25
   11d04:	09 f1       	breq	.+66     	; 0x11d48 <GPIB_SECONDARY_ADDRESS+0x5c>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d06:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11d0a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11d0e:	84 72       	andi	r24, 0x24	; 36
   11d10:	99 27       	eor	r25, r25
   11d12:	89 2b       	or	r24, r25
   11d14:	61 f0       	breq	.+24     	; 0x11d2e <GPIB_SECONDARY_ADDRESS+0x42>
            printf("[SA %02XH SS80]\n", 0xff & ch);
   11d16:	ed b7       	in	r30, 0x3d	; 61
   11d18:	fe b7       	in	r31, 0x3e	; 62
   11d1a:	d5 83       	std	Z+5, r29	; 0x05
   11d1c:	c4 83       	std	Z+4, r28	; 0x04
   11d1e:	81 e0       	ldi	r24, 0x01	; 1
   11d20:	92 e1       	ldi	r25, 0x12	; 18
   11d22:	a0 e0       	ldi	r26, 0x00	; 0
   11d24:	81 83       	std	Z+1, r24	; 0x01
   11d26:	92 83       	std	Z+2, r25	; 0x02
   11d28:	a3 83       	std	Z+3, r26	; 0x03
   11d2a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(SS80p->HEADER.PPR);
   11d2e:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   11d32:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   11d36:	81 81       	ldd	r24, Z+1	; 0x01
   11d38:	90 e0       	ldi	r25, 0x00	; 0
   11d3a:	0e 94 99 84 	call	0x10932	; 0x10932 <gpib_disable_PPR>
        return(Send_Identify( ch, SS80p->CONFIG.ID) );
   11d3e:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   11d42:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   11d46:	25 c0       	rjmp	.+74     	; 0x11d92 <GPIB_SECONDARY_ADDRESS+0xa6>

    }

#ifdef AMIGO
    if(AMIGO_is_MSA(ch) )
   11d48:	ce 01       	movw	r24, r28
   11d4a:	64 dc       	rcall	.-1848   	; 0x11614 <AMIGO_is_MSA>
   11d4c:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11d50:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11d54:	89 2b       	or	r24, r25
   11d56:	11 f1       	breq	.+68     	; 0x11d9c <GPIB_SECONDARY_ADDRESS+0xb0>
    {
/// @todo
///     Two identify bytes should be repeated until untalked
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d58:	c9 01       	movw	r24, r18
   11d5a:	84 72       	andi	r24, 0x24	; 36
   11d5c:	99 27       	eor	r25, r25
   11d5e:	89 2b       	or	r24, r25
   11d60:	61 f0       	breq	.+24     	; 0x11d7a <GPIB_SECONDARY_ADDRESS+0x8e>
            printf("[SA %02XH AMIGO]\n", 0xff & ch);
   11d62:	ed b7       	in	r30, 0x3d	; 61
   11d64:	fe b7       	in	r31, 0x3e	; 62
   11d66:	d5 83       	std	Z+5, r29	; 0x05
   11d68:	c4 83       	std	Z+4, r28	; 0x04
   11d6a:	8f ee       	ldi	r24, 0xEF	; 239
   11d6c:	91 e1       	ldi	r25, 0x11	; 17
   11d6e:	a0 e0       	ldi	r26, 0x00	; 0
   11d70:	81 83       	std	Z+1, r24	; 0x01
   11d72:	92 83       	std	Z+2, r25	; 0x02
   11d74:	a3 83       	std	Z+3, r26	; 0x03
   11d76:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
///@brief ch = secondary address
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   11d7a:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   11d7e:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   11d82:	81 81       	ldd	r24, Z+1	; 0x01
   11d84:	90 e0       	ldi	r25, 0x00	; 0
   11d86:	0e 94 99 84 	call	0x10932	; 0x10932 <gpib_disable_PPR>
        return( Send_Identify( ch, AMIGOp->CONFIG.ID) );
   11d8a:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   11d8e:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   11d92:	64 81       	ldd	r22, Z+4	; 0x04
   11d94:	75 81       	ldd	r23, Z+5	; 0x05
   11d96:	81 2f       	mov	r24, r17
   11d98:	ec dd       	rcall	.-1064   	; 0x11972 <Send_Identify>
   11d9a:	1d c0       	rjmp	.+58     	; 0x11dd6 <GPIB_SECONDARY_ADDRESS+0xea>
    }
#endif                                        // #ifdef AMIGO

#if SDEBUG
    if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11d9c:	c9 01       	movw	r24, r18
   11d9e:	84 72       	andi	r24, 0x24	; 36
   11da0:	99 27       	eor	r25, r25
   11da2:	00 97       	sbiw	r24, 0x00	; 0
   11da4:	c1 f0       	breq	.+48     	; 0x11dd6 <GPIB_SECONDARY_ADDRESS+0xea>
        printf("[SA %02XH, listen:%02XH, talk:%02XH]\n",
   11da6:	80 91 08 1f 	lds	r24, 0x1F08	; 0x801f08 <talking>
   11daa:	90 e0       	ldi	r25, 0x00	; 0
   11dac:	ed b7       	in	r30, 0x3d	; 61
   11dae:	fe b7       	in	r31, 0x3e	; 62
   11db0:	91 87       	std	Z+9, r25	; 0x09
   11db2:	80 87       	std	Z+8, r24	; 0x08
   11db4:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   11db8:	90 e0       	ldi	r25, 0x00	; 0
   11dba:	97 83       	std	Z+7, r25	; 0x07
   11dbc:	86 83       	std	Z+6, r24	; 0x06
   11dbe:	d5 83       	std	Z+5, r29	; 0x05
   11dc0:	c4 83       	std	Z+4, r28	; 0x04
   11dc2:	89 ec       	ldi	r24, 0xC9	; 201
   11dc4:	91 e1       	ldi	r25, 0x11	; 17
   11dc6:	a0 e0       	ldi	r26, 0x00	; 0
   11dc8:	81 83       	std	Z+1, r24	; 0x01
   11dca:	92 83       	std	Z+2, r25	; 0x02
   11dcc:	a3 83       	std	Z+3, r26	; 0x03
   11dce:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
#endif
    return(0);
   11dd2:	80 e0       	ldi	r24, 0x00	; 0
   11dd4:	90 e0       	ldi	r25, 0x00	; 0
}
   11dd6:	cd b7       	in	r28, 0x3d	; 61
   11dd8:	de b7       	in	r29, 0x3e	; 62
   11dda:	29 96       	adiw	r28, 0x09	; 9
   11ddc:	e3 e0       	ldi	r30, 0x03	; 3
   11dde:	0c 94 03 e1 	jmp	0x1c206	; 0x1c206 <__epilogue_restores__+0x1e>

00011de2 <listen_cleanup>:
/// - Used to cleanup or close at the end of any listen address transition.
/// - Also called when GPIB bus reset or unlisten.
/// For now we just use this to close printer capture
/// @return  void
void listen_cleanup()
{
   11de2:	00 d0       	rcall	.+0      	; 0x11de4 <listen_cleanup+0x2>
   11de4:	1f 92       	push	r1
    if(listening_last)
   11de6:	60 91 04 1f 	lds	r22, 0x1F04	; 0x801f04 <listening_last>
   11dea:	66 23       	and	r22, r22
   11dec:	e1 f0       	breq	.+56     	; 0x11e26 <listen_cleanup+0x44>
    {
        int index = find_device(PRINTER_TYPE, listening_last, BASE_MLA);
   11dee:	70 e0       	ldi	r23, 0x00	; 0
   11df0:	40 e2       	ldi	r20, 0x20	; 32
   11df2:	50 e0       	ldi	r21, 0x00	; 0
   11df4:	84 e0       	ldi	r24, 0x04	; 4
   11df6:	90 e0       	ldi	r25, 0x00	; 0
   11df8:	9a d6       	rcall	.+3380   	; 0x12b2e <find_device>
        if(index == -1)
   11dfa:	01 96       	adiw	r24, 0x01	; 1
   11dfc:	a1 f0       	breq	.+40     	; 0x11e26 <listen_cleanup+0x44>
            return;

//We should not set the active device globally
//FIXME if we have to then printer close should temprarily do so
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11dfe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11e02:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11e06:	84 72       	andi	r24, 0x24	; 36
   11e08:	99 27       	eor	r25, r25
   11e0a:	89 2b       	or	r24, r25
   11e0c:	51 f0       	breq	.+20     	; 0x11e22 <listen_cleanup+0x40>
            printf("[PRINTER close]\n");
   11e0e:	88 eb       	ldi	r24, 0xB8	; 184
   11e10:	91 e1       	ldi	r25, 0x11	; 17
   11e12:	a0 e0       	ldi	r26, 0x00	; 0
   11e14:	ed b7       	in	r30, 0x3d	; 61
   11e16:	fe b7       	in	r31, 0x3e	; 62
   11e18:	81 83       	std	Z+1, r24	; 0x01
   11e1a:	92 83       	std	Z+2, r25	; 0x02
   11e1c:	a3 83       	std	Z+3, r26	; 0x03
   11e1e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        printer_close();
   11e22:	0e 94 38 ba 	call	0x17470	; 0x17470 <printer_close>
    }
}
   11e26:	0f 90       	pop	r0
   11e28:	0f 90       	pop	r0
   11e2a:	0f 90       	pop	r0
   11e2c:	08 95       	ret

00011e2e <GPIB_LISTEN>:
/// @param[in] ch 8 bit listen command
///
/// @return  0

int GPIB_LISTEN(uint8_t ch)
{
   11e2e:	cf 93       	push	r28
   11e30:	df 93       	push	r29
   11e32:	00 d0       	rcall	.+0      	; 0x11e34 <GPIB_LISTEN+0x6>
   11e34:	00 d0       	rcall	.+0      	; 0x11e36 <GPIB_LISTEN+0x8>
   11e36:	1f 92       	push	r1
   11e38:	c8 2f       	mov	r28, r24
    listening_last = listening;
   11e3a:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   11e3e:	80 93 04 1f 	sts	0x1F04, r24	; 0x801f04 <listening_last>
    listening = ch;
   11e42:	c0 93 0a 1f 	sts	0x1F0A, r28	; 0x801f0a <listening>

    listen_cleanup();
   11e46:	cd df       	rcall	.-102    	; 0x11de2 <listen_cleanup>

///  NOTE: we must track the "addressed state" of each device
///  so we can determine its state - ie: command vs Secondary states
///@brief  Universal Unlisten
    if(ch == UNL)
   11e48:	cf 33       	cpi	r28, 0x3F	; 63
   11e4a:	19 f5       	brne	.+70     	; 0x11e92 <GPIB_LISTEN+0x64>
    {
        listening = 0;
   11e4c:	10 92 0a 1f 	sts	0x1F0A, r1	; 0x801f0a <listening>

#if SDEBUG
        if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11e50:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11e54:	82 ff       	sbrs	r24, 2
   11e56:	74 c0       	rjmp	.+232    	; 0x11f40 <GPIB_LISTEN+0x112>
        {
            printf("[UNL]\n");
   11e58:	81 eb       	ldi	r24, 0xB1	; 177
   11e5a:	92 e1       	ldi	r25, 0x12	; 18
   11e5c:	a0 e0       	ldi	r26, 0x00	; 0
   11e5e:	ed b7       	in	r30, 0x3d	; 61
   11e60:	fe b7       	in	r31, 0x3e	; 62
   11e62:	81 83       	std	Z+1, r24	; 0x01
   11e64:	92 83       	std	Z+2, r25	; 0x02
   11e66:	a3 83       	std	Z+3, r26	; 0x03
   11e68:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
///@brief add a line break if we both Untalk and Unlisten
            if(lastcmd == UNT)
   11e6c:	80 91 02 1d 	lds	r24, 0x1D02	; 0x801d02 <lastcmd>
   11e70:	90 91 03 1d 	lds	r25, 0x1D03	; 0x801d03 <lastcmd+0x1>
   11e74:	8f 35       	cpi	r24, 0x5F	; 95
   11e76:	91 05       	cpc	r25, r1
   11e78:	09 f0       	breq	.+2      	; 0x11e7c <GPIB_LISTEN+0x4e>
   11e7a:	62 c0       	rjmp	.+196    	; 0x11f40 <GPIB_LISTEN+0x112>
                printf("\n");
   11e7c:	8f ea       	ldi	r24, 0xAF	; 175
   11e7e:	92 e1       	ldi	r25, 0x12	; 18
   11e80:	a0 e0       	ldi	r26, 0x00	; 0
   11e82:	ed b7       	in	r30, 0x3d	; 61
   11e84:	fe b7       	in	r31, 0x3e	; 62
   11e86:	81 83       	std	Z+1, r24	; 0x01
   11e88:	92 83       	std	Z+2, r25	; 0x02
   11e8a:	a3 83       	std	Z+3, r26	; 0x03
   11e8c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   11e90:	57 c0       	rjmp	.+174    	; 0x11f40 <GPIB_LISTEN+0x112>
#endif
        return(0);
    }

#ifdef AMIGO
    if(AMIGO_is_MLA(ch))
   11e92:	d0 e0       	ldi	r29, 0x00	; 0
   11e94:	ce 01       	movw	r24, r28
   11e96:	9c db       	rcall	.-2248   	; 0x115d0 <AMIGO_is_MLA>
   11e98:	89 2b       	or	r24, r25
   11e9a:	81 f0       	breq	.+32     	; 0x11ebc <GPIB_LISTEN+0x8e>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11e9c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11ea0:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11ea4:	84 72       	andi	r24, 0x24	; 36
   11ea6:	99 27       	eor	r25, r25
   11ea8:	89 2b       	or	r24, r25
   11eaa:	09 f4       	brne	.+2      	; 0x11eae <GPIB_LISTEN+0x80>
   11eac:	49 c0       	rjmp	.+146    	; 0x11f40 <GPIB_LISTEN+0x112>
            printf("[LA %02XH AMIGO]\n", 0xff & ch);
   11eae:	ed b7       	in	r30, 0x3d	; 61
   11eb0:	fe b7       	in	r31, 0x3e	; 62
   11eb2:	d5 83       	std	Z+5, r29	; 0x05
   11eb4:	c4 83       	std	Z+4, r28	; 0x04
   11eb6:	8d e9       	ldi	r24, 0x9D	; 157
   11eb8:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }
#endif                                        // #ifdef AMIGO

    if(SS80_is_MLA(ch))
   11eba:	3c c0       	rjmp	.+120    	; 0x11f34 <GPIB_LISTEN+0x106>
   11ebc:	ce 01       	movw	r24, r28
   11ebe:	55 db       	rcall	.-2390   	; 0x1156a <SS80_is_MLA>
   11ec0:	89 2b       	or	r24, r25
   11ec2:	79 f0       	breq	.+30     	; 0x11ee2 <GPIB_LISTEN+0xb4>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11ec4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11ec8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11ecc:	84 72       	andi	r24, 0x24	; 36
   11ece:	99 27       	eor	r25, r25
   11ed0:	89 2b       	or	r24, r25
   11ed2:	b1 f1       	breq	.+108    	; 0x11f40 <GPIB_LISTEN+0x112>
            printf("[LA %02XH SS80]\n", 0xff & ch);
   11ed4:	ed b7       	in	r30, 0x3d	; 61
   11ed6:	fe b7       	in	r31, 0x3e	; 62
   11ed8:	d5 83       	std	Z+5, r29	; 0x05
   11eda:	c4 83       	std	Z+4, r28	; 0x04
   11edc:	8c e8       	ldi	r24, 0x8C	; 140
   11ede:	92 e1       	ldi	r25, 0x12	; 18
#endif
        return(0);
    }

    if(PRINTER_is_MLA(ch))
   11ee0:	29 c0       	rjmp	.+82     	; 0x11f34 <GPIB_LISTEN+0x106>
   11ee2:	ce 01       	movw	r24, r28
   11ee4:	a8 db       	rcall	.-2224   	; 0x11636 <PRINTER_is_MLA>
   11ee6:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   11eea:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   11eee:	89 2b       	or	r24, r25
   11ef0:	c9 f0       	breq	.+50     	; 0x11f24 <GPIB_LISTEN+0xf6>
    {
#if SDEBUG
        if(debuglevel & (GPIB_BUS_OR_CMD_BYTE_MESSAGES + GPIB_DEVICE_STATE_MESSAGES))
   11ef2:	24 72       	andi	r18, 0x24	; 36
   11ef4:	33 27       	eor	r19, r19
   11ef6:	23 2b       	or	r18, r19
   11ef8:	61 f0       	breq	.+24     	; 0x11f12 <GPIB_LISTEN+0xe4>
            printf("[LA %02XH PRINTER]\n", 0xff & ch);
   11efa:	ed b7       	in	r30, 0x3d	; 61
   11efc:	fe b7       	in	r31, 0x3e	; 62
   11efe:	d5 83       	std	Z+5, r29	; 0x05
   11f00:	c4 83       	std	Z+4, r28	; 0x04
   11f02:	88 e7       	ldi	r24, 0x78	; 120
   11f04:	92 e1       	ldi	r25, 0x12	; 18
   11f06:	a0 e0       	ldi	r26, 0x00	; 0
   11f08:	81 83       	std	Z+1, r24	; 0x01
   11f0a:	92 83       	std	Z+2, r25	; 0x02
   11f0c:	a3 83       	std	Z+3, r26	; 0x03
   11f0e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
        if(talking != UNT)
   11f12:	80 91 08 1f 	lds	r24, 0x1F08	; 0x801f08 <talking>
   11f16:	8f 35       	cpi	r24, 0x5F	; 95
   11f18:	99 f0       	breq	.+38     	; 0x11f40 <GPIB_LISTEN+0x112>
        {
///@brief NULL creates a file named based on date and time
            printer_open(NULL);
   11f1a:	80 e0       	ldi	r24, 0x00	; 0
   11f1c:	90 e0       	ldi	r25, 0x00	; 0
   11f1e:	0e 94 90 ba 	call	0x17520	; 0x17520 <printer_open>
   11f22:	0e c0       	rjmp	.+28     	; 0x11f40 <GPIB_LISTEN+0x112>
        }
        return(0);
    }
#if SDEBUG
    if(debuglevel & GPIB_BUS_OR_CMD_BYTE_MESSAGES)
   11f24:	22 ff       	sbrs	r18, 2
   11f26:	0c c0       	rjmp	.+24     	; 0x11f40 <GPIB_LISTEN+0x112>
        printf("[LA %02XH]\n", 0xff & ch);
   11f28:	ed b7       	in	r30, 0x3d	; 61
   11f2a:	fe b7       	in	r31, 0x3e	; 62
   11f2c:	d5 83       	std	Z+5, r29	; 0x05
   11f2e:	c4 83       	std	Z+4, r28	; 0x04
   11f30:	8c e6       	ldi	r24, 0x6C	; 108
   11f32:	92 e1       	ldi	r25, 0x12	; 18
   11f34:	a0 e0       	ldi	r26, 0x00	; 0
   11f36:	81 83       	std	Z+1, r24	; 0x01
   11f38:	92 83       	std	Z+2, r25	; 0x02
   11f3a:	a3 83       	std	Z+3, r26	; 0x03
   11f3c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
    return(0);
}                                                 // Listen Primary Address group
   11f40:	80 e0       	ldi	r24, 0x00	; 0
   11f42:	90 e0       	ldi	r25, 0x00	; 0
   11f44:	cd b7       	in	r28, 0x3d	; 61
   11f46:	de b7       	in	r29, 0x3e	; 62
   11f48:	25 96       	adiw	r28, 0x05	; 5
   11f4a:	e2 e0       	ldi	r30, 0x02	; 2
   11f4c:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

00011f50 <gpib_task>:
/// - Reads and processes GPIB control or data bytes
/// and calls emulator task.
/// @return  void

void gpib_task(void)
{
   11f50:	cf 93       	push	r28
   11f52:	df 93       	push	r29
    uint16_t val;
    uint8_t ch;
    uint16_t status;

    gpib_init_devices();                          // Init devices
   11f54:	92 db       	rcall	.-2268   	; 0x1167a <gpib_init_devices>
	// gpib_state_init() is now done in gpib_init_devices
    // gpib_state_init();                            // Init PPR talking and listening states

    gpib_log_fp = NULL;
   11f56:	10 92 7c 19 	sts	0x197C, r1	; 0x80197c <gpib_log_fp+0x1>
   11f5a:	10 92 7b 19 	sts	0x197B, r1	; 0x80197b <gpib_log_fp>

    while(1)
    {


        val = gpib_read_byte(NO_TRACE);
   11f5e:	80 e0       	ldi	r24, 0x00	; 0
   11f60:	90 e0       	ldi	r25, 0x00	; 0
   11f62:	b0 d8       	rcall	.-3744   	; 0x110c4 <gpib_read_byte>
   11f64:	ec 01       	movw	r28, r24

#if SDEBUG
        if(debuglevel & GPIB_TOP_LEVEL_BUS_DECODE)
   11f66:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   11f6a:	83 ff       	sbrs	r24, 3
            gpib_decode(val);
   11f6c:	02 c0       	rjmp	.+4      	; 0x11f72 <gpib_task+0x22>
   11f6e:	ce 01       	movw	r24, r28
   11f70:	94 d9       	rcall	.-3288   	; 0x1129a <gpib_decode>
#endif
        status = gpib_error_test(val);
   11f72:	ce 01       	movw	r24, r28
   11f74:	1d dc       	rcall	.-1990   	; 0x117b0 <gpib_error_test>
        if(status & ABORT_FLAG)
        {
            return;
        }
        else if(status & MEDIA_FLAG)
   11f76:	9c 01       	movw	r18, r24
   11f78:	23 70       	andi	r18, 0x03	; 3
   11f7a:	33 27       	eor	r19, r19
   11f7c:	23 2b       	or	r18, r19
   11f7e:	09 f0       	breq	.+2      	; 0x11f82 <gpib_task+0x32>
   11f80:	43 c0       	rjmp	.+134    	; 0x12008 <gpib_task+0xb8>
        {
            return;
        }
        else if(status)
   11f82:	89 2b       	or	r24, r25
   11f84:	61 f7       	brne	.-40     	; 0x11f5e <gpib_task+0xe>
        {
            continue;
        }
///@brief GPIB commands with ATN set (COMMANDS)
        if(val & ATN_FLAG)
   11f86:	d2 ff       	sbrs	r29, 2
   11f88:	26 c0       	rjmp	.+76     	; 0x11fd6 <gpib_task+0x86>
        {
            ch = val & CMD_MASK;
   11f8a:	8c 2f       	mov	r24, r28
   11f8c:	8f 77       	andi	r24, 0x7F	; 127
            if(ch <= 0x1f)
   11f8e:	80 32       	cpi	r24, 0x20	; 32
            {
                GPIB(ch);
   11f90:	10 f4       	brcc	.+4      	; 0x11f96 <gpib_task+0x46>
   11f92:	52 dd       	rcall	.-1372   	; 0x11a38 <GPIB>
                continue;
   11f94:	e4 cf       	rjmp	.-56     	; 0x11f5e <gpib_task+0xe>
            }
///@brief GPIB listen
            if(ch >= 0x20 && ch <= 0x3f)
   11f96:	90 ee       	ldi	r25, 0xE0	; 224
   11f98:	98 0f       	add	r25, r24
   11f9a:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_LISTEN(ch);
   11f9c:	10 f4       	brcc	.+4      	; 0x11fa2 <gpib_task+0x52>
   11f9e:	47 df       	rcall	.-370    	; 0x11e2e <GPIB_LISTEN>
                continue;
   11fa0:	de cf       	rjmp	.-68     	; 0x11f5e <gpib_task+0xe>
            }
///@brief GPIB talk
            if(ch >= 0x40 && ch <= 0x5f)
   11fa2:	90 ec       	ldi	r25, 0xC0	; 192
   11fa4:	98 0f       	add	r25, r24
   11fa6:	90 32       	cpi	r25, 0x20	; 32
            {
                GPIB_TALK(ch);
   11fa8:	10 f4       	brcc	.+4      	; 0x11fae <gpib_task+0x5e>
   11faa:	08 de       	rcall	.-1008   	; 0x11bbc <GPIB_TALK>
                continue;
   11fac:	d8 cf       	rjmp	.-80     	; 0x11f5e <gpib_task+0xe>
            }

///@brief GPIB secondary
/// Note: We know ch >= 0x60 && ch <= 0x7f because of previous tests

            if( listening && lastcmd == UNT)
   11fae:	90 91 0a 1f 	lds	r25, 0x1F0A	; 0x801f0a <listening>
   11fb2:	99 23       	and	r25, r25
   11fb4:	59 f0       	breq	.+22     	; 0x11fcc <gpib_task+0x7c>
   11fb6:	20 91 02 1d 	lds	r18, 0x1D02	; 0x801d02 <lastcmd>
   11fba:	30 91 03 1d 	lds	r19, 0x1D03	; 0x801d03 <lastcmd+0x1>
   11fbe:	2f 35       	cpi	r18, 0x5F	; 95
   11fc0:	31 05       	cpc	r19, r1
            {
                secondary = 0;
   11fc2:	21 f4       	brne	.+8      	; 0x11fcc <gpib_task+0x7c>
   11fc4:	10 92 09 1f 	sts	0x1F09, r1	; 0x801f09 <secondary>
                GPIB_SECONDARY_ADDRESS(ch);
   11fc8:	91 de       	rcall	.-734    	; 0x11cec <GPIB_SECONDARY_ADDRESS>
                continue;
   11fca:	c9 cf       	rjmp	.-110    	; 0x11f5e <gpib_task+0xe>
            }

///@brief We have to keep track of secondary address that may happen out of order with older AMIGO protocol
/// this method works for SS80 as well
            secondary = ch;
   11fcc:	80 93 09 1f 	sts	0x1F09, r24	; 0x801f09 <secondary>
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(secondary,0);
   11fd0:	60 e0       	ldi	r22, 0x00	; 0
   11fd2:	90 e0       	ldi	r25, 0x00	; 0
        }                                         // GPIB ATN

///@brief GPIB commands without ATN set (DATA)
        else                                      // GPIB Data
        {
            if ( PRINTER_is_MLA(listening) )
   11fd4:	12 c0       	rjmp	.+36     	; 0x11ffa <gpib_task+0xaa>
   11fd6:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   11fda:	90 e0       	ldi	r25, 0x00	; 0
   11fdc:	2c db       	rcall	.-2472   	; 0x11636 <PRINTER_is_MLA>
   11fde:	89 2b       	or	r24, r25
   11fe0:	29 f0       	breq	.+10     	; 0x11fec <gpib_task+0x9c>
            {
                printer_buffer( 0xff & val );
   11fe2:	ce 01       	movw	r24, r28
   11fe4:	99 27       	eor	r25, r25
   11fe6:	0e 94 33 bb 	call	0x17666	; 0x17666 <printer_buffer>
                continue;
   11fea:	b9 cf       	rjmp	.-142    	; 0x11f5e <gpib_task+0xe>
            }

            if(!secondary)
   11fec:	80 91 09 1f 	lds	r24, 0x1F09	; 0x801f09 <secondary>
   11ff0:	88 23       	and	r24, r24
                continue;

// ONLY secondar commands at this point
///@brief GPIB_COMMANDS does most of the work
            status = GPIB_COMMANDS(val,1);
   11ff2:	09 f4       	brne	.+2      	; 0x11ff6 <gpib_task+0xa6>
   11ff4:	b4 cf       	rjmp	.-152    	; 0x11f5e <gpib_task+0xe>
   11ff6:	61 e0       	ldi	r22, 0x01	; 1
   11ff8:	ce 01       	movw	r24, r28
            status = gpib_error_test(status);
   11ffa:	67 dc       	rcall	.-1842   	; 0x118ca <GPIB_COMMANDS>
   11ffc:	d9 db       	rcall	.-2126   	; 0x117b0 <gpib_error_test>

            if(status & ( ABORT_FLAG | MEDIA_FLAG ))
   11ffe:	83 70       	andi	r24, 0x03	; 3
   12000:	99 27       	eor	r25, r25
   12002:	89 2b       	or	r24, r25
   12004:	09 f4       	brne	.+2      	; 0x12008 <gpib_task+0xb8>
   12006:	ab cf       	rjmp	.-170    	; 0x11f5e <gpib_task+0xe>
            }
            continue;
        }
    }                                             // while(1)
    return;
}
   12008:	df 91       	pop	r29
   1200a:	cf 91       	pop	r28
   1200c:	08 95       	ret

0001200e <talk_cleanup>:
/// - Not used in this emulator.
///
/// @return  void

void talk_cleanup()
{
   1200e:	08 95       	ret

00012010 <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   12010:	cf 93       	push	r28
   12012:	df 93       	push	r29
   12014:	00 d0       	rcall	.+0      	; 0x12016 <gpib_help+0x6>
   12016:	1f 92       	push	r1
   12018:	ec 01       	movw	r28, r24
    printf("gpib help\n");
   1201a:	82 e4       	ldi	r24, 0x42	; 66
   1201c:	96 e1       	ldi	r25, 0x16	; 22
   1201e:	a0 e0       	ldi	r26, 0x00	; 0
   12020:	ed b7       	in	r30, 0x3d	; 61
   12022:	fe b7       	in	r31, 0x3e	; 62
   12024:	81 83       	std	Z+1, r24	; 0x01
   12026:	92 83       	std	Z+2, r25	; 0x02
   12028:	a3 83       	std	Z+3, r26	; 0x03
   1202a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    if(full)
   1202e:	cd 2b       	or	r28, r29
   12030:	51 f0       	breq	.+20     	; 0x12046 <gpib_help+0x36>
    {
        printf("Note: gpib prefix is optional\n"
   12032:	89 e7       	ldi	r24, 0x79	; 121
   12034:	94 e1       	ldi	r25, 0x14	; 20
   12036:	a0 e0       	ldi	r26, 0x00	; 0
   12038:	ed b7       	in	r30, 0x3d	; 61
   1203a:	fe b7       	in	r31, 0x3e	; 62
   1203c:	81 83       	std	Z+1, r24	; 0x01
   1203e:	92 83       	std	Z+2, r25	; 0x02
   12040:	a3 83       	std	Z+3, r26	; 0x03
   12042:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            "gpib ppr_set XX\n"
    #endif
            "\n"
            );
    }
}
   12046:	cd b7       	in	r28, 0x3d	; 61
   12048:	de b7       	in	r29, 0x3e	; 62
   1204a:	23 96       	adiw	r28, 0x03	; 3
   1204c:	e2 e0       	ldi	r30, 0x02	; 2
   1204e:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

00012052 <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   12052:	a5 e0       	ldi	r26, 0x05	; 5
   12054:	b0 e0       	ldi	r27, 0x00	; 0
   12056:	ef e2       	ldi	r30, 0x2F	; 47
   12058:	f0 e9       	ldi	r31, 0x90	; 144
   1205a:	0c 94 e0 e0 	jmp	0x1c1c0	; 0x1c1c0 <__prologue_saves__+0x10>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1205e:	fb 01       	movw	r30, r22
   12060:	e0 80       	ld	r14, Z
   12062:	f1 80       	ldd	r15, Z+1	; 0x01

    if(!ptr)
   12064:	e1 14       	cp	r14, r1
   12066:	f1 04       	cpc	r15, r1
   12068:	19 f4       	brne	.+6      	; 0x12070 <gpib_tests+0x1e>
        return(0);
   1206a:	80 e0       	ldi	r24, 0x00	; 0
   1206c:	90 e0       	ldi	r25, 0x00	; 0
   1206e:	dc c0       	rjmp	.+440    	; 0x12228 <gpib_tests+0x1d6>
   12070:	6b 01       	movw	r12, r22
   12072:	5c 01       	movw	r10, r24

    if( MATCH(ptr,"gpib") )
   12074:	63 eb       	ldi	r22, 0xB3	; 179
   12076:	7d e0       	ldi	r23, 0x0D	; 13
   12078:	c7 01       	movw	r24, r14
   1207a:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCH>
   1207e:	89 2b       	or	r24, r25
   12080:	a1 f0       	breq	.+40     	; 0x120aa <gpib_tests+0x58>
    {
        ptr = argv[ind++];
   12082:	f6 01       	movw	r30, r12
   12084:	e2 80       	ldd	r14, Z+2	; 0x02
   12086:	f3 80       	ldd	r15, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   12088:	e1 14       	cp	r14, r1
   1208a:	f1 04       	cpc	r15, r1
   1208c:	21 f4       	brne	.+8      	; 0x12096 <gpib_tests+0x44>
        {
            gpib_help(1);
   1208e:	81 e0       	ldi	r24, 0x01	; 1
   12090:	90 e0       	ldi	r25, 0x00	; 0
   12092:	be df       	rcall	.-132    	; 0x12010 <gpib_help>
   12094:	c7 c0       	rjmp	.+398    	; 0x12224 <gpib_tests+0x1d2>
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   12096:	6d e9       	ldi	r22, 0x9D	; 157
   12098:	76 e1       	ldi	r23, 0x16	; 22
   1209a:	c7 01       	movw	r24, r14
   1209c:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCH>
   120a0:	89 2b       	or	r24, r25
   120a2:	a9 f7       	brne	.-22     	; 0x1208e <gpib_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"gpib") )
    {
        ptr = argv[ind++];
   120a4:	c2 e0       	ldi	r28, 0x02	; 2
   120a6:	d0 e0       	ldi	r29, 0x00	; 0
   120a8:	02 c0       	rjmp	.+4      	; 0x120ae <gpib_tests+0x5c>

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   120aa:	c1 e0       	ldi	r28, 0x01	; 1
   120ac:	d0 e0       	ldi	r29, 0x00	; 0
            gpib_help(1);
            return(1);
        }
    }

    if (MATCHI(ptr,"debug") )
   120ae:	68 eb       	ldi	r22, 0xB8	; 184
   120b0:	7d e0       	ldi	r23, 0x0D	; 13
   120b2:	c7 01       	movw	r24, r14
   120b4:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHI>
   120b8:	89 2b       	or	r24, r25
   120ba:	29 f1       	breq	.+74     	; 0x12106 <gpib_tests+0xb4>
    {
        ptr = argv[ind];
   120bc:	fe 01       	movw	r30, r28
   120be:	ee 0f       	add	r30, r30
   120c0:	ff 1f       	adc	r31, r31
   120c2:	ec 0d       	add	r30, r12
   120c4:	fd 1d       	adc	r31, r13
        if(*ptr == '=')
   120c6:	01 90       	ld	r0, Z+
   120c8:	f0 81       	ld	r31, Z
   120ca:	e0 2d       	mov	r30, r0
   120cc:	80 81       	ld	r24, Z
   120ce:	8d 33       	cpi	r24, 0x3D	; 61
   120d0:	09 f4       	brne	.+2      	; 0x120d4 <gpib_tests+0x82>
            ++ind;
   120d2:	21 96       	adiw	r28, 0x01	; 1
        debuglevel = get_value(argv[ind]);
   120d4:	cc 0f       	add	r28, r28
   120d6:	dd 1f       	adc	r29, r29
   120d8:	cc 0d       	add	r28, r12
   120da:	dd 1d       	adc	r29, r13
   120dc:	88 81       	ld	r24, Y
   120de:	99 81       	ldd	r25, Y+1	; 0x01
   120e0:	0e 94 87 30 	call	0x610e	; 0x610e <get_value>
   120e4:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   120e8:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
        printf("debug=%04XH\n", debuglevel);
   120ec:	ed b7       	in	r30, 0x3d	; 61
   120ee:	fe b7       	in	r31, 0x3e	; 62
   120f0:	75 83       	std	Z+5, r23	; 0x05
   120f2:	64 83       	std	Z+4, r22	; 0x04
   120f4:	8c e6       	ldi	r24, 0x6C	; 108
   120f6:	94 e1       	ldi	r25, 0x14	; 20
   120f8:	a0 e0       	ldi	r26, 0x00	; 0
   120fa:	81 83       	std	Z+1, r24	; 0x01
   120fc:	92 83       	std	Z+2, r25	; 0x02
   120fe:	a3 83       	std	Z+3, r26	; 0x03
   12100:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   12104:	8f c0       	rjmp	.+286    	; 0x12224 <gpib_tests+0x1d2>
        return(1);
    }

    if (MATCHI(ptr,"addresses") )
   12106:	6e eb       	ldi	r22, 0xBE	; 190
   12108:	7d e0       	ldi	r23, 0x0D	; 13
   1210a:	c7 01       	movw	r24, r14
   1210c:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHI>
   12110:	89 2b       	or	r24, r25
   12112:	c9 f0       	breq	.+50     	; 0x12146 <gpib_tests+0xf4>
    {
        ptr = argv[ind];
   12114:	cc 0f       	add	r28, r28
   12116:	dd 1f       	adc	r29, r29
   12118:	cc 0d       	add	r28, r12
   1211a:	dd 1d       	adc	r29, r13
   1211c:	88 81       	ld	r24, Y
   1211e:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   12120:	00 97       	sbiw	r24, 0x00	; 0
   12122:	69 f0       	breq	.+26     	; 0x1213e <gpib_tests+0xec>
   12124:	fc 01       	movw	r30, r24
   12126:	20 81       	ld	r18, Z
   12128:	22 23       	and	r18, r18
   1212a:	49 f0       	breq	.+18     	; 0x1213e <gpib_tests+0xec>
   1212c:	68 ec       	ldi	r22, 0xC8	; 200
   1212e:	7d e0       	ldi	r23, 0x0D	; 13
   12130:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCH>
   12134:	89 2b       	or	r24, r25
   12136:	19 f0       	breq	.+6      	; 0x1213e <gpib_tests+0xec>
            display_Addresses(1);
   12138:	81 e0       	ldi	r24, 0x01	; 1
   1213a:	90 e0       	ldi	r25, 0x00	; 0
   1213c:	02 c0       	rjmp	.+4      	; 0x12142 <gpib_tests+0xf0>
        else
            display_Addresses(0);
   1213e:	80 e0       	ldi	r24, 0x00	; 0
   12140:	90 e0       	ldi	r25, 0x00	; 0
   12142:	54 d1       	rcall	.+680    	; 0x123ec <display_Addresses>
   12144:	6f c0       	rjmp	.+222    	; 0x12224 <gpib_tests+0x1d2>
        return(1);
    }

    if (MATCHI(ptr,"config") )
   12146:	6b ec       	ldi	r22, 0xCB	; 203
   12148:	7d e0       	ldi	r23, 0x0D	; 13
   1214a:	c7 01       	movw	r24, r14
   1214c:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHI>
   12150:	89 2b       	or	r24, r25
   12152:	c9 f0       	breq	.+50     	; 0x12186 <gpib_tests+0x134>
    {
        ptr = argv[ind];
   12154:	cc 0f       	add	r28, r28
   12156:	dd 1f       	adc	r29, r29
   12158:	cc 0d       	add	r28, r12
   1215a:	dd 1d       	adc	r29, r13
   1215c:	88 81       	ld	r24, Y
   1215e:	99 81       	ldd	r25, Y+1	; 0x01
        if(ptr && *ptr && MATCH(ptr,"-v"))
   12160:	00 97       	sbiw	r24, 0x00	; 0
   12162:	69 f0       	breq	.+26     	; 0x1217e <gpib_tests+0x12c>
   12164:	fc 01       	movw	r30, r24
   12166:	20 81       	ld	r18, Z
   12168:	22 23       	and	r18, r18
   1216a:	49 f0       	breq	.+18     	; 0x1217e <gpib_tests+0x12c>
   1216c:	68 ec       	ldi	r22, 0xC8	; 200
   1216e:	7d e0       	ldi	r23, 0x0D	; 13
   12170:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCH>
   12174:	89 2b       	or	r24, r25
   12176:	19 f0       	breq	.+6      	; 0x1217e <gpib_tests+0x12c>
            display_Config(1);
   12178:	81 e0       	ldi	r24, 0x01	; 1
   1217a:	90 e0       	ldi	r25, 0x00	; 0
   1217c:	02 c0       	rjmp	.+4      	; 0x12182 <gpib_tests+0x130>
        else
            display_Config(0);
   1217e:	80 e0       	ldi	r24, 0x00	; 0
   12180:	90 e0       	ldi	r25, 0x00	; 0
   12182:	0f d2       	rcall	.+1054   	; 0x125a2 <display_Config>
   12184:	4f c0       	rjmp	.+158    	; 0x12224 <gpib_tests+0x1d2>
        return(1);
    }

    if (MATCHI(ptr,"elapsed_reset") )
   12186:	62 ed       	ldi	r22, 0xD2	; 210
   12188:	7d e0       	ldi	r23, 0x0D	; 13
   1218a:	c7 01       	movw	r24, r14
   1218c:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHI>
   12190:	89 2b       	or	r24, r25
   12192:	19 f0       	breq	.+6      	; 0x1219a <gpib_tests+0x148>
    {
        gpib_timer_elapsed_begin();
   12194:	0e 94 a1 83 	call	0x10742	; 0x10742 <gpib_timer_elapsed_begin>
   12198:	45 c0       	rjmp	.+138    	; 0x12224 <gpib_tests+0x1d2>
        return(1);
    }

    if (MATCHI(ptr,"elapsed") )
   1219a:	60 ee       	ldi	r22, 0xE0	; 224
   1219c:	7d e0       	ldi	r23, 0x0D	; 13
   1219e:	c7 01       	movw	r24, r14
   121a0:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHI>
   121a4:	89 2b       	or	r24, r25
   121a6:	29 f0       	breq	.+10     	; 0x121b2 <gpib_tests+0x160>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   121a8:	88 ee       	ldi	r24, 0xE8	; 232
   121aa:	9d e0       	ldi	r25, 0x0D	; 13
   121ac:	0e 94 b3 83 	call	0x10766	; 0x10766 <gpib_timer_elapsed_end>
   121b0:	39 c0       	rjmp	.+114    	; 0x12224 <gpib_tests+0x1d2>
        return(1);
    }

    if ( MATCHI(ptr, "ifc") )
   121b2:	66 ef       	ldi	r22, 0xF6	; 246
   121b4:	7d e0       	ldi	r23, 0x0D	; 13
   121b6:	c7 01       	movw	r24, r14
   121b8:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHI>
   121bc:	89 2b       	or	r24, r25
   121be:	19 f0       	breq	.+6      	; 0x121c6 <gpib_tests+0x174>
    {
        gpib_assert_ifc();
   121c0:	0e 94 cf 84 	call	0x1099e	; 0x1099e <gpib_assert_ifc>
   121c4:	2f c0       	rjmp	.+94     	; 0x12224 <gpib_tests+0x1d2>
        return(1);

    }

    if (MATCHI(ptr,"task") )
   121c6:	6a ef       	ldi	r22, 0xFA	; 250
   121c8:	7d e0       	ldi	r23, 0x0D	; 13
   121ca:	c7 01       	movw	r24, r14
   121cc:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHI>
   121d0:	89 2b       	or	r24, r25
    {
        gpib_task();
   121d2:	11 f0       	breq	.+4      	; 0x121d8 <gpib_tests+0x186>
   121d4:	bd de       	rcall	.-646    	; 0x11f50 <gpib_task>
   121d6:	26 c0       	rjmp	.+76     	; 0x12224 <gpib_tests+0x1d2>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   121d8:	8e 01       	movw	r16, r28
   121da:	0f 5f       	subi	r16, 0xFF	; 255
   121dc:	1f 4f       	sbci	r17, 0xFF	; 255
   121de:	95 01       	movw	r18, r10
   121e0:	a8 01       	movw	r20, r16
   121e2:	6f ef       	ldi	r22, 0xFF	; 255
   121e4:	7d e0       	ldi	r23, 0x0D	; 13
   121e6:	c7 01       	movw	r24, r14
   121e8:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <MATCHARGS>
   121ec:	89 2b       	or	r24, r25
   121ee:	09 f4       	brne	.+2      	; 0x121f2 <gpib_tests+0x1a0>
   121f0:	3c cf       	rjmp	.-392    	; 0x1206a <gpib_tests+0x18>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   121f2:	00 0f       	add	r16, r16
   121f4:	11 1f       	adc	r17, r17
   121f6:	e6 01       	movw	r28, r12
   121f8:	c0 0f       	add	r28, r16
   121fa:	d1 1f       	adc	r29, r17
   121fc:	88 81       	ld	r24, Y
   121fe:	99 81       	ldd	r25, Y+1	; 0x01
   12200:	00 97       	sbiw	r24, 0x00	; 0
   12202:	51 f0       	breq	.+20     	; 0x12218 <gpib_tests+0x1c6>
   12204:	65 e0       	ldi	r22, 0x05	; 5
   12206:	7e e0       	ldi	r23, 0x0E	; 14
   12208:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   1220c:	61 e0       	ldi	r22, 0x01	; 1
   1220e:	70 e0       	ldi	r23, 0x00	; 0
   12210:	89 2b       	or	r24, r25
   12212:	21 f4       	brne	.+8      	; 0x1221c <gpib_tests+0x1ca>
   12214:	60 e0       	ldi	r22, 0x00	; 0
   12216:	02 c0       	rjmp	.+4      	; 0x1221c <gpib_tests+0x1ca>
   12218:	60 e0       	ldi	r22, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   1221a:	70 e0       	ldi	r23, 0x00	; 0
   1221c:	22 97       	sbiw	r28, 0x02	; 2
   1221e:	88 81       	ld	r24, Y
   12220:	99 81       	ldd	r25, Y+1	; 0x01
   12222:	34 da       	rcall	.-2968   	; 0x1168c <gpib_trace_task>
        return(1);
   12224:	81 e0       	ldi	r24, 0x01	; 1
   12226:	90 e0       	ldi	r25, 0x00	; 0

    }                                             // port write
#endif                                        // #ifdef GPIB_EXTENDED_TESTS

    return(0);
}
   12228:	cd b7       	in	r28, 0x3d	; 61
   1222a:	de b7       	in	r29, 0x3e	; 62
   1222c:	25 96       	adiw	r28, 0x05	; 5
   1222e:	ea e0       	ldi	r30, 0x0A	; 10
   12230:	0c 94 fc e0 	jmp	0x1c1f8	; 0x1c1f8 <__epilogue_restores__+0x10>

00012234 <tok_index>:
        }
    }
    if(bad)
        return(0);
    return(1);
}
   12234:	ef 92       	push	r14
   12236:	ff 92       	push	r15
   12238:	0f 93       	push	r16
   1223a:	1f 93       	push	r17
   1223c:	cf 93       	push	r28
   1223e:	df 93       	push	r29
   12240:	7c 01       	movw	r14, r24
   12242:	c4 ec       	ldi	r28, 0xC4	; 196
   12244:	d1 e0       	ldi	r29, 0x01	; 1
   12246:	00 e0       	ldi	r16, 0x00	; 0
   12248:	10 e0       	ldi	r17, 0x00	; 0
   1224a:	8a 81       	ldd	r24, Y+2	; 0x02
   1224c:	9b 81       	ldd	r25, Y+3	; 0x03
   1224e:	8f 3f       	cpi	r24, 0xFF	; 255
   12250:	2f ef       	ldi	r18, 0xFF	; 255
   12252:	92 07       	cpc	r25, r18
   12254:	61 f0       	breq	.+24     	; 0x1226e <tok_index+0x3a>
   12256:	68 81       	ld	r22, Y
   12258:	79 81       	ldd	r23, Y+1	; 0x01
   1225a:	c7 01       	movw	r24, r14
   1225c:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHI>
   12260:	24 96       	adiw	r28, 0x04	; 4
   12262:	89 2b       	or	r24, r25
   12264:	19 f4       	brne	.+6      	; 0x1226c <tok_index+0x38>
   12266:	0f 5f       	subi	r16, 0xFF	; 255
   12268:	1f 4f       	sbci	r17, 0xFF	; 255
   1226a:	ef cf       	rjmp	.-34     	; 0x1224a <tok_index+0x16>
   1226c:	c8 01       	movw	r24, r16
   1226e:	cd b7       	in	r28, 0x3d	; 61
   12270:	de b7       	in	r29, 0x3e	; 62
   12272:	e6 e0       	ldi	r30, 0x06	; 6
   12274:	0c 94 00 e1 	jmp	0x1c200	; 0x1c200 <__epilogue_restores__+0x18>

00012278 <tok_name>:
   12278:	e4 ec       	ldi	r30, 0xC4	; 196
   1227a:	f1 e0       	ldi	r31, 0x01	; 1
   1227c:	20 e0       	ldi	r18, 0x00	; 0
   1227e:	30 e0       	ldi	r19, 0x00	; 0
   12280:	90 e0       	ldi	r25, 0x00	; 0
   12282:	42 81       	ldd	r20, Z+2	; 0x02
   12284:	53 81       	ldd	r21, Z+3	; 0x03
   12286:	4f 3f       	cpi	r20, 0xFF	; 255
   12288:	6f ef       	ldi	r22, 0xFF	; 255
   1228a:	56 07       	cpc	r21, r22
   1228c:	89 f0       	breq	.+34     	; 0x122b0 <tok_name+0x38>
   1228e:	34 96       	adiw	r30, 0x04	; 4
   12290:	48 17       	cp	r20, r24
   12292:	59 07       	cpc	r21, r25
   12294:	51 f4       	brne	.+20     	; 0x122aa <tok_name+0x32>
   12296:	22 0f       	add	r18, r18
   12298:	33 1f       	adc	r19, r19
   1229a:	22 0f       	add	r18, r18
   1229c:	33 1f       	adc	r19, r19
   1229e:	f9 01       	movw	r30, r18
   122a0:	ec 53       	subi	r30, 0x3C	; 60
   122a2:	fe 4f       	sbci	r31, 0xFE	; 254
   122a4:	80 81       	ld	r24, Z
   122a6:	91 81       	ldd	r25, Z+1	; 0x01
   122a8:	08 95       	ret
   122aa:	2f 5f       	subi	r18, 0xFF	; 255
   122ac:	3f 4f       	sbci	r19, 0xFF	; 255
   122ae:	e9 cf       	rjmp	.-46     	; 0x12282 <tok_name+0xa>
   122b0:	8d e2       	ldi	r24, 0x2D	; 45
   122b2:	9c e0       	ldi	r25, 0x0C	; 12
   122b4:	08 95       	ret

000122b6 <print_tok_val>:
   122b6:	cf 92       	push	r12
   122b8:	df 92       	push	r13
   122ba:	ef 92       	push	r14
   122bc:	ff 92       	push	r15
   122be:	0f 93       	push	r16
   122c0:	1f 93       	push	r17
   122c2:	cf 93       	push	r28
   122c4:	ad b7       	in	r26, 0x3d	; 61
   122c6:	be b7       	in	r27, 0x3e	; 62
   122c8:	1d 97       	sbiw	r26, 0x0d	; 13
   122ca:	0f b6       	in	r0, 0x3f	; 63
   122cc:	f8 94       	cli
   122ce:	be bf       	out	0x3e, r27	; 62
   122d0:	0f be       	out	0x3f, r0	; 63
   122d2:	ad bf       	out	0x3d, r26	; 61
   122d4:	c6 2f       	mov	r28, r22
   122d6:	69 01       	movw	r12, r18
   122d8:	7a 01       	movw	r14, r20
   122da:	ce df       	rcall	.-100    	; 0x12278 <tok_name>
   122dc:	8c 01       	movw	r16, r24
   122de:	cc 23       	and	r28, r28
   122e0:	31 f0       	breq	.+12     	; 0x122ee <print_tok_val+0x38>
   122e2:	80 e2       	ldi	r24, 0x20	; 32
   122e4:	90 e0       	ldi	r25, 0x00	; 0
   122e6:	0e 94 99 74 	call	0xe932	; 0xe932 <putchar>
   122ea:	c1 50       	subi	r28, 0x01	; 1
   122ec:	f8 cf       	rjmp	.-16     	; 0x122de <print_tok_val+0x28>
   122ee:	ed b7       	in	r30, 0x3d	; 61
   122f0:	fe b7       	in	r31, 0x3e	; 62
   122f2:	c2 86       	std	Z+10, r12	; 0x0a
   122f4:	d3 86       	std	Z+11, r13	; 0x0b
   122f6:	e4 86       	std	Z+12, r14	; 0x0c
   122f8:	f5 86       	std	Z+13, r15	; 0x0d
   122fa:	c6 82       	std	Z+6, r12	; 0x06
   122fc:	d7 82       	std	Z+7, r13	; 0x07
   122fe:	e0 86       	std	Z+8, r14	; 0x08
   12300:	f1 86       	std	Z+9, r15	; 0x09
   12302:	15 83       	std	Z+5, r17	; 0x05
   12304:	04 83       	std	Z+4, r16	; 0x04
   12306:	85 ed       	ldi	r24, 0xD5	; 213
   12308:	9c e1       	ldi	r25, 0x1C	; 28
   1230a:	a0 e0       	ldi	r26, 0x00	; 0
   1230c:	81 83       	std	Z+1, r24	; 0x01
   1230e:	92 83       	std	Z+2, r25	; 0x02
   12310:	a3 83       	std	Z+3, r26	; 0x03
   12312:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   12316:	ad b7       	in	r26, 0x3d	; 61
   12318:	be b7       	in	r27, 0x3e	; 62
   1231a:	1d 96       	adiw	r26, 0x0d	; 13
   1231c:	0f b6       	in	r0, 0x3f	; 63
   1231e:	f8 94       	cli
   12320:	be bf       	out	0x3e, r27	; 62
   12322:	0f be       	out	0x3f, r0	; 63
   12324:	ad bf       	out	0x3d, r26	; 61
   12326:	cf 91       	pop	r28
   12328:	1f 91       	pop	r17
   1232a:	0f 91       	pop	r16
   1232c:	ff 90       	pop	r15
   1232e:	ef 90       	pop	r14
   12330:	df 90       	pop	r13
   12332:	cf 90       	pop	r12
   12334:	08 95       	ret

00012336 <print_tok_str>:
   12336:	ef 92       	push	r14
   12338:	ff 92       	push	r15
   1233a:	0f 93       	push	r16
   1233c:	1f 93       	push	r17
   1233e:	cf 93       	push	r28
   12340:	ad b7       	in	r26, 0x3d	; 61
   12342:	be b7       	in	r27, 0x3e	; 62
   12344:	17 97       	sbiw	r26, 0x07	; 7
   12346:	0f b6       	in	r0, 0x3f	; 63
   12348:	f8 94       	cli
   1234a:	be bf       	out	0x3e, r27	; 62
   1234c:	0f be       	out	0x3f, r0	; 63
   1234e:	ad bf       	out	0x3d, r26	; 61
   12350:	c6 2f       	mov	r28, r22
   12352:	7a 01       	movw	r14, r20
   12354:	91 df       	rcall	.-222    	; 0x12278 <tok_name>
   12356:	8c 01       	movw	r16, r24
   12358:	cc 23       	and	r28, r28
   1235a:	31 f0       	breq	.+12     	; 0x12368 <print_tok_str+0x32>
   1235c:	80 e2       	ldi	r24, 0x20	; 32
   1235e:	90 e0       	ldi	r25, 0x00	; 0
   12360:	0e 94 99 74 	call	0xe932	; 0xe932 <putchar>
   12364:	c1 50       	subi	r28, 0x01	; 1
   12366:	f8 cf       	rjmp	.-16     	; 0x12358 <print_tok_str+0x22>
   12368:	ed b7       	in	r30, 0x3d	; 61
   1236a:	fe b7       	in	r31, 0x3e	; 62
   1236c:	f7 82       	std	Z+7, r15	; 0x07
   1236e:	e6 82       	std	Z+6, r14	; 0x06
   12370:	15 83       	std	Z+5, r17	; 0x05
   12372:	04 83       	std	Z+4, r16	; 0x04
   12374:	89 ec       	ldi	r24, 0xC9	; 201
   12376:	9c e1       	ldi	r25, 0x1C	; 28
   12378:	a0 e0       	ldi	r26, 0x00	; 0
   1237a:	81 83       	std	Z+1, r24	; 0x01
   1237c:	92 83       	std	Z+2, r25	; 0x02
   1237e:	a3 83       	std	Z+3, r26	; 0x03
   12380:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   12384:	ad b7       	in	r26, 0x3d	; 61
   12386:	be b7       	in	r27, 0x3e	; 62
   12388:	17 96       	adiw	r26, 0x07	; 7
   1238a:	0f b6       	in	r0, 0x3f	; 63
   1238c:	f8 94       	cli
   1238e:	be bf       	out	0x3e, r27	; 62
   12390:	0f be       	out	0x3f, r0	; 63
   12392:	ad bf       	out	0x3d, r26	; 61
   12394:	cf 91       	pop	r28
   12396:	1f 91       	pop	r17
   12398:	0f 91       	pop	r16
   1239a:	ff 90       	pop	r15
   1239c:	ef 90       	pop	r14
   1239e:	08 95       	ret

000123a0 <print_tok>:
   123a0:	0f 93       	push	r16
   123a2:	1f 93       	push	r17
   123a4:	cf 93       	push	r28
   123a6:	00 d0       	rcall	.+0      	; 0x123a8 <print_tok+0x8>
   123a8:	00 d0       	rcall	.+0      	; 0x123aa <print_tok+0xa>
   123aa:	1f 92       	push	r1
   123ac:	c6 2f       	mov	r28, r22
   123ae:	64 df       	rcall	.-312    	; 0x12278 <tok_name>
   123b0:	8c 01       	movw	r16, r24
   123b2:	cc 23       	and	r28, r28
   123b4:	31 f0       	breq	.+12     	; 0x123c2 <print_tok+0x22>
   123b6:	80 e2       	ldi	r24, 0x20	; 32
   123b8:	90 e0       	ldi	r25, 0x00	; 0
   123ba:	0e 94 99 74 	call	0xe932	; 0xe932 <putchar>
   123be:	c1 50       	subi	r28, 0x01	; 1
   123c0:	f8 cf       	rjmp	.-16     	; 0x123b2 <print_tok+0x12>
   123c2:	ed b7       	in	r30, 0x3d	; 61
   123c4:	fe b7       	in	r31, 0x3e	; 62
   123c6:	15 83       	std	Z+5, r17	; 0x05
   123c8:	04 83       	std	Z+4, r16	; 0x04
   123ca:	85 ec       	ldi	r24, 0xC5	; 197
   123cc:	9c e1       	ldi	r25, 0x1C	; 28
   123ce:	a0 e0       	ldi	r26, 0x00	; 0
   123d0:	81 83       	std	Z+1, r24	; 0x01
   123d2:	92 83       	std	Z+2, r25	; 0x02
   123d4:	a3 83       	std	Z+3, r26	; 0x03
   123d6:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   123da:	0f 90       	pop	r0
   123dc:	0f 90       	pop	r0
   123de:	0f 90       	pop	r0
   123e0:	0f 90       	pop	r0
   123e2:	0f 90       	pop	r0
   123e4:	cf 91       	pop	r28
   123e6:	1f 91       	pop	r17
   123e8:	0f 91       	pop	r16
   123ea:	08 95       	ret

000123ec <display_Addresses>:
   123ec:	2f 92       	push	r2
   123ee:	3f 92       	push	r3
   123f0:	4f 92       	push	r4
   123f2:	6f 92       	push	r6
   123f4:	7f 92       	push	r7
   123f6:	8f 92       	push	r8
   123f8:	cf 92       	push	r12
   123fa:	df 92       	push	r13
   123fc:	ef 92       	push	r14
   123fe:	cf 93       	push	r28
   12400:	df 93       	push	r29
   12402:	cd b7       	in	r28, 0x3d	; 61
   12404:	de b7       	in	r29, 0x3e	; 62
   12406:	2a 97       	sbiw	r28, 0x0a	; 10
   12408:	0f b6       	in	r0, 0x3f	; 63
   1240a:	f8 94       	cli
   1240c:	de bf       	out	0x3e, r29	; 62
   1240e:	0f be       	out	0x3f, r0	; 63
   12410:	cd bf       	out	0x3d, r28	; 61
   12412:	8f e8       	ldi	r24, 0x8F	; 143
   12414:	99 e1       	ldi	r25, 0x19	; 25
   12416:	a0 e0       	ldi	r26, 0x00	; 0
   12418:	ed b7       	in	r30, 0x3d	; 61
   1241a:	fe b7       	in	r31, 0x3e	; 62
   1241c:	81 83       	std	Z+1, r24	; 0x01
   1241e:	92 83       	std	Z+2, r25	; 0x02
   12420:	a3 83       	std	Z+3, r26	; 0x03
   12422:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   12426:	2e e0       	ldi	r18, 0x0E	; 14
   12428:	3f e1       	ldi	r19, 0x1F	; 31
   1242a:	3a 87       	std	Y+10, r19	; 0x0a
   1242c:	29 87       	std	Y+9, r18	; 0x09
   1242e:	81 e7       	ldi	r24, 0x71	; 113
   12430:	99 e1       	ldi	r25, 0x19	; 25
   12432:	6c 01       	movw	r12, r24
   12434:	e1 2c       	mov	r14, r1
   12436:	83 e7       	ldi	r24, 0x73	; 115
   12438:	99 e1       	ldi	r25, 0x19	; 25
   1243a:	3c 01       	movw	r6, r24
   1243c:	81 2c       	mov	r8, r1
   1243e:	8c e7       	ldi	r24, 0x7C	; 124
   12440:	99 e1       	ldi	r25, 0x19	; 25
   12442:	1c 01       	movw	r2, r24
   12444:	41 2c       	mov	r4, r1
   12446:	86 e8       	ldi	r24, 0x86	; 134
   12448:	99 e1       	ldi	r25, 0x19	; 25
   1244a:	9c 01       	movw	r18, r24
   1244c:	40 e0       	ldi	r20, 0x00	; 0
   1244e:	2e 83       	std	Y+6, r18	; 0x06
   12450:	3f 83       	std	Y+7, r19	; 0x07
   12452:	48 87       	std	Y+8, r20	; 0x08
   12454:	e9 85       	ldd	r30, Y+9	; 0x09
   12456:	fa 85       	ldd	r31, Y+10	; 0x0a
   12458:	80 81       	ld	r24, Z
   1245a:	88 23       	and	r24, r24
   1245c:	09 f4       	brne	.+2      	; 0x12460 <display_Addresses+0x74>
   1245e:	7b c0       	rjmp	.+246    	; 0x12556 <display_Addresses+0x16a>
   12460:	83 30       	cpi	r24, 0x03	; 3
   12462:	21 f0       	breq	.+8      	; 0x1246c <display_Addresses+0x80>
   12464:	81 30       	cpi	r24, 0x01	; 1
   12466:	09 f0       	breq	.+2      	; 0x1246a <display_Addresses+0x7e>
   12468:	5a c0       	rjmp	.+180    	; 0x1251e <display_Addresses+0x132>
   1246a:	1f c0       	rjmp	.+62     	; 0x124aa <display_Addresses+0xbe>
   1246c:	e9 85       	ldd	r30, Y+9	; 0x09
   1246e:	fa 85       	ldd	r31, Y+10	; 0x0a
   12470:	87 a1       	ldd	r24, Z+39	; 0x27
   12472:	90 a5       	ldd	r25, Z+40	; 0x28
   12474:	90 93 84 19 	sts	0x1984, r25	; 0x801984 <SS80p+0x1>
   12478:	80 93 83 19 	sts	0x1983, r24	; 0x801983 <SS80p>
   1247c:	cf 01       	movw	r24, r30
   1247e:	07 96       	adiw	r24, 0x07	; 7
   12480:	ed b7       	in	r30, 0x3d	; 61
   12482:	fe b7       	in	r31, 0x3e	; 62
   12484:	95 83       	std	Z+5, r25	; 0x05
   12486:	84 83       	std	Z+4, r24	; 0x04
   12488:	2e 81       	ldd	r18, Y+6	; 0x06
   1248a:	3f 81       	ldd	r19, Y+7	; 0x07
   1248c:	48 85       	ldd	r20, Y+8	; 0x08
   1248e:	21 83       	std	Z+1, r18	; 0x01
   12490:	32 83       	std	Z+2, r19	; 0x02
   12492:	43 83       	std	Z+3, r20	; 0x03
   12494:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   12498:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   1249c:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   124a0:	42 81       	ldd	r20, Z+2	; 0x02
   124a2:	53 81       	ldd	r21, Z+3	; 0x03
   124a4:	64 e0       	ldi	r22, 0x04	; 4
   124a6:	82 e1       	ldi	r24, 0x12	; 18
   124a8:	46 df       	rcall	.-372    	; 0x12336 <print_tok_str>
   124aa:	e9 85       	ldd	r30, Y+9	; 0x09
   124ac:	fa 85       	ldd	r31, Y+10	; 0x0a
   124ae:	80 81       	ld	r24, Z
   124b0:	81 30       	cpi	r24, 0x01	; 1
   124b2:	d1 f4       	brne	.+52     	; 0x124e8 <display_Addresses+0xfc>
   124b4:	87 a1       	ldd	r24, Z+39	; 0x27
   124b6:	90 a5       	ldd	r25, Z+40	; 0x28
   124b8:	90 93 80 19 	sts	0x1980, r25	; 0x801980 <AMIGOp+0x1>
   124bc:	80 93 7f 19 	sts	0x197F, r24	; 0x80197f <AMIGOp>
   124c0:	cf 01       	movw	r24, r30
   124c2:	07 96       	adiw	r24, 0x07	; 7
   124c4:	ed b7       	in	r30, 0x3d	; 61
   124c6:	fe b7       	in	r31, 0x3e	; 62
   124c8:	95 83       	std	Z+5, r25	; 0x05
   124ca:	84 83       	std	Z+4, r24	; 0x04
   124cc:	21 82       	std	Z+1, r2	; 0x01
   124ce:	32 82       	std	Z+2, r3	; 0x02
   124d0:	43 82       	std	Z+3, r4	; 0x03
   124d2:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   124d6:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   124da:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   124de:	42 81       	ldd	r20, Z+2	; 0x02
   124e0:	53 81       	ldd	r21, Z+3	; 0x03
   124e2:	64 e0       	ldi	r22, 0x04	; 4
   124e4:	82 e1       	ldi	r24, 0x12	; 18
   124e6:	27 df       	rcall	.-434    	; 0x12336 <print_tok_str>
   124e8:	e9 85       	ldd	r30, Y+9	; 0x09
   124ea:	fa 85       	ldd	r31, Y+10	; 0x0a
   124ec:	21 81       	ldd	r18, Z+1	; 0x01
   124ee:	30 e0       	ldi	r19, 0x00	; 0
   124f0:	40 e0       	ldi	r20, 0x00	; 0
   124f2:	50 e0       	ldi	r21, 0x00	; 0
   124f4:	64 e0       	ldi	r22, 0x04	; 4
   124f6:	81 e0       	ldi	r24, 0x01	; 1
   124f8:	de de       	rcall	.-580    	; 0x122b6 <print_tok_val>
   124fa:	e9 85       	ldd	r30, Y+9	; 0x09
   124fc:	fa 85       	ldd	r31, Y+10	; 0x0a
   124fe:	22 81       	ldd	r18, Z+2	; 0x02
   12500:	30 e0       	ldi	r19, 0x00	; 0
   12502:	40 e0       	ldi	r20, 0x00	; 0
   12504:	50 e0       	ldi	r21, 0x00	; 0
   12506:	64 e0       	ldi	r22, 0x04	; 4
   12508:	8f e1       	ldi	r24, 0x1F	; 31
   1250a:	d5 de       	rcall	.-598    	; 0x122b6 <print_tok_val>
   1250c:	e9 85       	ldd	r30, Y+9	; 0x09
   1250e:	fa 85       	ldd	r31, Y+10	; 0x0a
   12510:	23 81       	ldd	r18, Z+3	; 0x03
   12512:	34 81       	ldd	r19, Z+4	; 0x04
   12514:	45 81       	ldd	r20, Z+5	; 0x05
   12516:	56 81       	ldd	r21, Z+6	; 0x06
   12518:	64 e0       	ldi	r22, 0x04	; 4
   1251a:	83 e0       	ldi	r24, 0x03	; 3
   1251c:	cc de       	rcall	.-616    	; 0x122b6 <print_tok_val>
   1251e:	e9 85       	ldd	r30, Y+9	; 0x09
   12520:	fa 85       	ldd	r31, Y+10	; 0x0a
   12522:	80 81       	ld	r24, Z
   12524:	84 30       	cpi	r24, 0x04	; 4
   12526:	81 f4       	brne	.+32     	; 0x12548 <display_Addresses+0x15c>
   12528:	ed b7       	in	r30, 0x3d	; 61
   1252a:	fe b7       	in	r31, 0x3e	; 62
   1252c:	61 82       	std	Z+1, r6	; 0x01
   1252e:	72 82       	std	Z+2, r7	; 0x02
   12530:	83 82       	std	Z+3, r8	; 0x03
   12532:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   12536:	e9 85       	ldd	r30, Y+9	; 0x09
   12538:	fa 85       	ldd	r31, Y+10	; 0x0a
   1253a:	21 81       	ldd	r18, Z+1	; 0x01
   1253c:	30 e0       	ldi	r19, 0x00	; 0
   1253e:	40 e0       	ldi	r20, 0x00	; 0
   12540:	50 e0       	ldi	r21, 0x00	; 0
   12542:	64 e0       	ldi	r22, 0x04	; 4
   12544:	81 e0       	ldi	r24, 0x01	; 1
   12546:	b7 de       	rcall	.-658    	; 0x122b6 <print_tok_val>
   12548:	ed b7       	in	r30, 0x3d	; 61
   1254a:	fe b7       	in	r31, 0x3e	; 62
   1254c:	c1 82       	std	Z+1, r12	; 0x01
   1254e:	d2 82       	std	Z+2, r13	; 0x02
   12550:	e3 82       	std	Z+3, r14	; 0x03
   12552:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   12556:	29 85       	ldd	r18, Y+9	; 0x09
   12558:	3a 85       	ldd	r19, Y+10	; 0x0a
   1255a:	25 5d       	subi	r18, 0xD5	; 213
   1255c:	3f 4f       	sbci	r19, 0xFF	; 255
   1255e:	3a 87       	std	Y+10, r19	; 0x0a
   12560:	29 87       	std	Y+9, r18	; 0x09
   12562:	22 51       	subi	r18, 0x12	; 18
   12564:	31 42       	sbci	r19, 0x21	; 33
   12566:	09 f0       	breq	.+2      	; 0x1256a <display_Addresses+0x17e>
   12568:	75 cf       	rjmp	.-278    	; 0x12454 <display_Addresses+0x68>
   1256a:	8f e6       	ldi	r24, 0x6F	; 111
   1256c:	99 e1       	ldi	r25, 0x19	; 25
   1256e:	a0 e0       	ldi	r26, 0x00	; 0
   12570:	ed b7       	in	r30, 0x3d	; 61
   12572:	fe b7       	in	r31, 0x3e	; 62
   12574:	81 83       	std	Z+1, r24	; 0x01
   12576:	92 83       	std	Z+2, r25	; 0x02
   12578:	a3 83       	std	Z+3, r26	; 0x03
   1257a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1257e:	2a 96       	adiw	r28, 0x0a	; 10
   12580:	0f b6       	in	r0, 0x3f	; 63
   12582:	f8 94       	cli
   12584:	de bf       	out	0x3e, r29	; 62
   12586:	0f be       	out	0x3f, r0	; 63
   12588:	cd bf       	out	0x3d, r28	; 61
   1258a:	df 91       	pop	r29
   1258c:	cf 91       	pop	r28
   1258e:	ef 90       	pop	r14
   12590:	df 90       	pop	r13
   12592:	cf 90       	pop	r12
   12594:	8f 90       	pop	r8
   12596:	7f 90       	pop	r7
   12598:	6f 90       	pop	r6
   1259a:	4f 90       	pop	r4
   1259c:	3f 90       	pop	r3
   1259e:	2f 90       	pop	r2
   125a0:	08 95       	ret

000125a2 <display_Config>:
   125a2:	2f 92       	push	r2
   125a4:	3f 92       	push	r3
   125a6:	4f 92       	push	r4
   125a8:	6f 92       	push	r6
   125aa:	7f 92       	push	r7
   125ac:	8f 92       	push	r8
   125ae:	af 92       	push	r10
   125b0:	bf 92       	push	r11
   125b2:	cf 92       	push	r12
   125b4:	df 92       	push	r13
   125b6:	ef 92       	push	r14
   125b8:	0f 93       	push	r16
   125ba:	1f 93       	push	r17
   125bc:	cf 93       	push	r28
   125be:	df 93       	push	r29
   125c0:	cd b7       	in	r28, 0x3d	; 61
   125c2:	de b7       	in	r29, 0x3e	; 62
   125c4:	62 97       	sbiw	r28, 0x12	; 18
   125c6:	0f b6       	in	r0, 0x3f	; 63
   125c8:	f8 94       	cli
   125ca:	de bf       	out	0x3e, r29	; 62
   125cc:	0f be       	out	0x3f, r0	; 63
   125ce:	cd bf       	out	0x3d, r28	; 61
   125d0:	5c 01       	movw	r10, r24
   125d2:	8f e4       	ldi	r24, 0x4F	; 79
   125d4:	99 e1       	ldi	r25, 0x19	; 25
   125d6:	a0 e0       	ldi	r26, 0x00	; 0
   125d8:	ed b7       	in	r30, 0x3d	; 61
   125da:	fe b7       	in	r31, 0x3e	; 62
   125dc:	81 83       	std	Z+1, r24	; 0x01
   125de:	92 83       	std	Z+2, r25	; 0x02
   125e0:	a3 83       	std	Z+3, r26	; 0x03
   125e2:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   125e6:	0e e0       	ldi	r16, 0x0E	; 14
   125e8:	1f e1       	ldi	r17, 0x1F	; 31
   125ea:	84 ed       	ldi	r24, 0xD4	; 212
   125ec:	98 e1       	ldi	r25, 0x18	; 24
   125ee:	9c 01       	movw	r18, r24
   125f0:	40 e0       	ldi	r20, 0x00	; 0
   125f2:	28 87       	std	Y+8, r18	; 0x08
   125f4:	39 87       	std	Y+9, r19	; 0x09
   125f6:	4a 87       	std	Y+10, r20	; 0x0a
   125f8:	89 e0       	ldi	r24, 0x09	; 9
   125fa:	99 e1       	ldi	r25, 0x19	; 25
   125fc:	9c 01       	movw	r18, r24
   125fe:	40 e0       	ldi	r20, 0x00	; 0
   12600:	2b 87       	std	Y+11, r18	; 0x0b
   12602:	3c 87       	std	Y+12, r19	; 0x0c
   12604:	4d 87       	std	Y+13, r20	; 0x0d
   12606:	8a ee       	ldi	r24, 0xEA	; 234
   12608:	98 e1       	ldi	r25, 0x18	; 24
   1260a:	9c 01       	movw	r18, r24
   1260c:	40 e0       	ldi	r20, 0x00	; 0
   1260e:	2e 87       	std	Y+14, r18	; 0x0e
   12610:	3f 87       	std	Y+15, r19	; 0x0f
   12612:	48 8b       	std	Y+16, r20	; 0x10
   12614:	86 ed       	ldi	r24, 0xD6	; 214
   12616:	98 e1       	ldi	r25, 0x18	; 24
   12618:	1c 01       	movw	r2, r24
   1261a:	41 2c       	mov	r4, r1
   1261c:	86 e4       	ldi	r24, 0x46	; 70
   1261e:	99 e1       	ldi	r25, 0x19	; 25
   12620:	6c 01       	movw	r12, r24
   12622:	e1 2c       	mov	r14, r1
   12624:	87 e2       	ldi	r24, 0x27	; 39
   12626:	99 e1       	ldi	r25, 0x19	; 25
   12628:	3c 01       	movw	r6, r24
   1262a:	81 2c       	mov	r8, r1
   1262c:	f8 01       	movw	r30, r16
   1262e:	80 81       	ld	r24, Z
   12630:	88 23       	and	r24, r24
   12632:	09 f4       	brne	.+2      	; 0x12636 <display_Config+0x94>
   12634:	14 c2       	rjmp	.+1064   	; 0x12a5e <display_Config+0x4bc>
   12636:	83 30       	cpi	r24, 0x03	; 3
   12638:	09 f0       	breq	.+2      	; 0x1263c <display_Config+0x9a>
   1263a:	38 c1       	rjmp	.+624    	; 0x128ac <display_Config+0x30a>
   1263c:	27 a1       	ldd	r18, Z+39	; 0x27
   1263e:	30 a5       	ldd	r19, Z+40	; 0x28
   12640:	3a 8b       	std	Y+18, r19	; 0x12
   12642:	29 8b       	std	Y+17, r18	; 0x11
   12644:	c8 01       	movw	r24, r16
   12646:	07 96       	adiw	r24, 0x07	; 7
   12648:	ed b7       	in	r30, 0x3d	; 61
   1264a:	fe b7       	in	r31, 0x3e	; 62
   1264c:	95 83       	std	Z+5, r25	; 0x05
   1264e:	84 83       	std	Z+4, r24	; 0x04
   12650:	c1 82       	std	Z+1, r12	; 0x01
   12652:	d2 82       	std	Z+2, r13	; 0x02
   12654:	e3 82       	std	Z+3, r14	; 0x03
   12656:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1265a:	e9 89       	ldd	r30, Y+17	; 0x11
   1265c:	fa 89       	ldd	r31, Y+18	; 0x12
   1265e:	80 81       	ld	r24, Z
   12660:	90 e0       	ldi	r25, 0x00	; 0
   12662:	ed b7       	in	r30, 0x3d	; 61
   12664:	fe b7       	in	r31, 0x3e	; 62
   12666:	95 83       	std	Z+5, r25	; 0x05
   12668:	84 83       	std	Z+4, r24	; 0x04
   1266a:	61 82       	std	Z+1, r6	; 0x01
   1266c:	72 82       	std	Z+2, r7	; 0x02
   1266e:	83 82       	std	Z+3, r8	; 0x03
   12670:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   12674:	64 e0       	ldi	r22, 0x04	; 4
   12676:	89 e0       	ldi	r24, 0x09	; 9
   12678:	93 de       	rcall	.-730    	; 0x123a0 <print_tok>
   1267a:	e9 89       	ldd	r30, Y+17	; 0x11
   1267c:	fa 89       	ldd	r31, Y+18	; 0x12
   1267e:	20 81       	ld	r18, Z
   12680:	30 e0       	ldi	r19, 0x00	; 0
   12682:	40 e0       	ldi	r20, 0x00	; 0
   12684:	50 e0       	ldi	r21, 0x00	; 0
   12686:	68 e0       	ldi	r22, 0x08	; 8
   12688:	81 e0       	ldi	r24, 0x01	; 1
   1268a:	15 de       	rcall	.-982    	; 0x122b6 <print_tok_val>
   1268c:	e9 89       	ldd	r30, Y+17	; 0x11
   1268e:	fa 89       	ldd	r31, Y+18	; 0x12
   12690:	21 81       	ldd	r18, Z+1	; 0x01
   12692:	30 e0       	ldi	r19, 0x00	; 0
   12694:	40 e0       	ldi	r20, 0x00	; 0
   12696:	50 e0       	ldi	r21, 0x00	; 0
   12698:	68 e0       	ldi	r22, 0x08	; 8
   1269a:	8f e1       	ldi	r24, 0x1F	; 31
   1269c:	0c de       	rcall	.-1000   	; 0x122b6 <print_tok_val>
   1269e:	e9 89       	ldd	r30, Y+17	; 0x11
   126a0:	fa 89       	ldd	r31, Y+18	; 0x12
   126a2:	42 81       	ldd	r20, Z+2	; 0x02
   126a4:	53 81       	ldd	r21, Z+3	; 0x03
   126a6:	68 e0       	ldi	r22, 0x08	; 8
   126a8:	82 e1       	ldi	r24, 0x12	; 18
   126aa:	45 de       	rcall	.-886    	; 0x12336 <print_tok_str>
   126ac:	64 e0       	ldi	r22, 0x04	; 4
   126ae:	81 e1       	ldi	r24, 0x11	; 17
   126b0:	77 de       	rcall	.-786    	; 0x123a0 <print_tok>
   126b2:	64 e0       	ldi	r22, 0x04	; 4
   126b4:	85 e1       	ldi	r24, 0x15	; 21
   126b6:	74 de       	rcall	.-792    	; 0x123a0 <print_tok>
   126b8:	e9 89       	ldd	r30, Y+17	; 0x11
   126ba:	fa 89       	ldd	r31, Y+18	; 0x12
   126bc:	24 81       	ldd	r18, Z+4	; 0x04
   126be:	35 81       	ldd	r19, Z+5	; 0x05
   126c0:	40 e0       	ldi	r20, 0x00	; 0
   126c2:	50 e0       	ldi	r21, 0x00	; 0
   126c4:	68 e0       	ldi	r22, 0x08	; 8
   126c6:	87 e1       	ldi	r24, 0x17	; 23
   126c8:	f6 dd       	rcall	.-1044   	; 0x122b6 <print_tok_val>
   126ca:	64 e0       	ldi	r22, 0x04	; 4
   126cc:	81 e1       	ldi	r24, 0x11	; 17
   126ce:	68 de       	rcall	.-816    	; 0x123a0 <print_tok>
   126d0:	a1 14       	cp	r10, r1
   126d2:	b1 04       	cpc	r11, r1
   126d4:	09 f1       	breq	.+66     	; 0x12718 <display_Config+0x176>
   126d6:	64 e0       	ldi	r22, 0x04	; 4
   126d8:	8b e0       	ldi	r24, 0x0B	; 11
   126da:	62 de       	rcall	.-828    	; 0x123a0 <print_tok>
   126dc:	e9 89       	ldd	r30, Y+17	; 0x11
   126de:	fa 89       	ldd	r31, Y+18	; 0x12
   126e0:	26 81       	ldd	r18, Z+6	; 0x06
   126e2:	37 81       	ldd	r19, Z+7	; 0x07
   126e4:	40 e0       	ldi	r20, 0x00	; 0
   126e6:	50 e0       	ldi	r21, 0x00	; 0
   126e8:	68 e0       	ldi	r22, 0x08	; 8
   126ea:	88 e2       	ldi	r24, 0x28	; 40
   126ec:	e4 dd       	rcall	.-1080   	; 0x122b6 <print_tok_val>
   126ee:	e9 89       	ldd	r30, Y+17	; 0x11
   126f0:	fa 89       	ldd	r31, Y+18	; 0x12
   126f2:	20 85       	ldd	r18, Z+8	; 0x08
   126f4:	31 85       	ldd	r19, Z+9	; 0x09
   126f6:	40 e0       	ldi	r20, 0x00	; 0
   126f8:	50 e0       	ldi	r21, 0x00	; 0
   126fa:	68 e0       	ldi	r22, 0x08	; 8
   126fc:	85 e2       	ldi	r24, 0x25	; 37
   126fe:	db dd       	rcall	.-1098   	; 0x122b6 <print_tok_val>
   12700:	e9 89       	ldd	r30, Y+17	; 0x11
   12702:	fa 89       	ldd	r31, Y+18	; 0x12
   12704:	22 85       	ldd	r18, Z+10	; 0x0a
   12706:	30 e0       	ldi	r19, 0x00	; 0
   12708:	40 e0       	ldi	r20, 0x00	; 0
   1270a:	50 e0       	ldi	r21, 0x00	; 0
   1270c:	68 e0       	ldi	r22, 0x08	; 8
   1270e:	86 e2       	ldi	r24, 0x26	; 38
   12710:	d2 dd       	rcall	.-1116   	; 0x122b6 <print_tok_val>
   12712:	64 e0       	ldi	r22, 0x04	; 4
   12714:	81 e1       	ldi	r24, 0x11	; 17
   12716:	44 de       	rcall	.-888    	; 0x123a0 <print_tok>
   12718:	64 e0       	ldi	r22, 0x04	; 4
   1271a:	87 e2       	ldi	r24, 0x27	; 39
   1271c:	41 de       	rcall	.-894    	; 0x123a0 <print_tok>
   1271e:	a1 14       	cp	r10, r1
   12720:	b1 04       	cpc	r11, r1
   12722:	49 f0       	breq	.+18     	; 0x12736 <display_Config+0x194>
   12724:	e9 89       	ldd	r30, Y+17	; 0x11
   12726:	fa 89       	ldd	r31, Y+18	; 0x12
   12728:	23 85       	ldd	r18, Z+11	; 0x0b
   1272a:	30 e0       	ldi	r19, 0x00	; 0
   1272c:	40 e0       	ldi	r20, 0x00	; 0
   1272e:	50 e0       	ldi	r21, 0x00	; 0
   12730:	68 e0       	ldi	r22, 0x08	; 8
   12732:	89 e2       	ldi	r24, 0x29	; 41
   12734:	c0 dd       	rcall	.-1152   	; 0x122b6 <print_tok_val>
   12736:	e9 89       	ldd	r30, Y+17	; 0x11
   12738:	fa 89       	ldd	r31, Y+18	; 0x12
   1273a:	24 85       	ldd	r18, Z+12	; 0x0c
   1273c:	35 85       	ldd	r19, Z+13	; 0x0d
   1273e:	46 85       	ldd	r20, Z+14	; 0x0e
   12740:	57 85       	ldd	r21, Z+15	; 0x0f
   12742:	68 e0       	ldi	r22, 0x08	; 8
   12744:	8f e0       	ldi	r24, 0x0F	; 15
   12746:	b7 dd       	rcall	.-1170   	; 0x122b6 <print_tok_val>
   12748:	a1 14       	cp	r10, r1
   1274a:	b1 04       	cpc	r11, r1
   1274c:	09 f4       	brne	.+2      	; 0x12750 <display_Config+0x1ae>
   1274e:	5a c0       	rjmp	.+180    	; 0x12804 <display_Config+0x262>
   12750:	e9 89       	ldd	r30, Y+17	; 0x11
   12752:	fa 89       	ldd	r31, Y+18	; 0x12
   12754:	20 89       	ldd	r18, Z+16	; 0x10
   12756:	31 89       	ldd	r19, Z+17	; 0x11
   12758:	40 e0       	ldi	r20, 0x00	; 0
   1275a:	50 e0       	ldi	r21, 0x00	; 0
   1275c:	68 e0       	ldi	r22, 0x08	; 8
   1275e:	87 e0       	ldi	r24, 0x07	; 7
   12760:	aa dd       	rcall	.-1196   	; 0x122b6 <print_tok_val>
   12762:	e9 89       	ldd	r30, Y+17	; 0x11
   12764:	fa 89       	ldd	r31, Y+18	; 0x12
   12766:	22 89       	ldd	r18, Z+18	; 0x12
   12768:	30 e0       	ldi	r19, 0x00	; 0
   1276a:	40 e0       	ldi	r20, 0x00	; 0
   1276c:	50 e0       	ldi	r21, 0x00	; 0
   1276e:	68 e0       	ldi	r22, 0x08	; 8
   12770:	85 e0       	ldi	r24, 0x05	; 5
   12772:	a1 dd       	rcall	.-1214   	; 0x122b6 <print_tok_val>
   12774:	e9 89       	ldd	r30, Y+17	; 0x11
   12776:	fa 89       	ldd	r31, Y+18	; 0x12
   12778:	23 89       	ldd	r18, Z+19	; 0x13
   1277a:	30 e0       	ldi	r19, 0x00	; 0
   1277c:	40 e0       	ldi	r20, 0x00	; 0
   1277e:	50 e0       	ldi	r21, 0x00	; 0
   12780:	68 e0       	ldi	r22, 0x08	; 8
   12782:	86 e0       	ldi	r24, 0x06	; 6
   12784:	98 dd       	rcall	.-1232   	; 0x122b6 <print_tok_val>
   12786:	e9 89       	ldd	r30, Y+17	; 0x11
   12788:	fa 89       	ldd	r31, Y+18	; 0x12
   1278a:	24 89       	ldd	r18, Z+20	; 0x14
   1278c:	35 89       	ldd	r19, Z+21	; 0x15
   1278e:	40 e0       	ldi	r20, 0x00	; 0
   12790:	50 e0       	ldi	r21, 0x00	; 0
   12792:	68 e0       	ldi	r22, 0x08	; 8
   12794:	84 e0       	ldi	r24, 0x04	; 4
   12796:	8f dd       	rcall	.-1250   	; 0x122b6 <print_tok_val>
   12798:	e9 89       	ldd	r30, Y+17	; 0x11
   1279a:	fa 89       	ldd	r31, Y+18	; 0x12
   1279c:	26 89       	ldd	r18, Z+22	; 0x16
   1279e:	37 89       	ldd	r19, Z+23	; 0x17
   127a0:	40 e0       	ldi	r20, 0x00	; 0
   127a2:	50 e0       	ldi	r21, 0x00	; 0
   127a4:	68 e0       	ldi	r22, 0x08	; 8
   127a6:	8a e0       	ldi	r24, 0x0A	; 10
   127a8:	86 dd       	rcall	.-1268   	; 0x122b6 <print_tok_val>
   127aa:	e9 89       	ldd	r30, Y+17	; 0x11
   127ac:	fa 89       	ldd	r31, Y+18	; 0x12
   127ae:	20 8d       	ldd	r18, Z+24	; 0x18
   127b0:	31 8d       	ldd	r19, Z+25	; 0x19
   127b2:	40 e0       	ldi	r20, 0x00	; 0
   127b4:	50 e0       	ldi	r21, 0x00	; 0
   127b6:	68 e0       	ldi	r22, 0x08	; 8
   127b8:	8e e1       	ldi	r24, 0x1E	; 30
   127ba:	7d dd       	rcall	.-1286   	; 0x122b6 <print_tok_val>
   127bc:	e9 89       	ldd	r30, Y+17	; 0x11
   127be:	fa 89       	ldd	r31, Y+18	; 0x12
   127c0:	22 8d       	ldd	r18, Z+26	; 0x1a
   127c2:	33 8d       	ldd	r19, Z+27	; 0x1b
   127c4:	40 e0       	ldi	r20, 0x00	; 0
   127c6:	50 e0       	ldi	r21, 0x00	; 0
   127c8:	68 e0       	ldi	r22, 0x08	; 8
   127ca:	80 e0       	ldi	r24, 0x00	; 0
   127cc:	74 dd       	rcall	.-1304   	; 0x122b6 <print_tok_val>
   127ce:	e9 89       	ldd	r30, Y+17	; 0x11
   127d0:	fa 89       	ldd	r31, Y+18	; 0x12
   127d2:	24 8d       	ldd	r18, Z+28	; 0x1c
   127d4:	30 e0       	ldi	r19, 0x00	; 0
   127d6:	40 e0       	ldi	r20, 0x00	; 0
   127d8:	50 e0       	ldi	r21, 0x00	; 0
   127da:	68 e0       	ldi	r22, 0x08	; 8
   127dc:	8c e1       	ldi	r24, 0x1C	; 28
   127de:	6b dd       	rcall	.-1322   	; 0x122b6 <print_tok_val>
   127e0:	e9 89       	ldd	r30, Y+17	; 0x11
   127e2:	fa 89       	ldd	r31, Y+18	; 0x12
   127e4:	25 8d       	ldd	r18, Z+29	; 0x1d
   127e6:	30 e0       	ldi	r19, 0x00	; 0
   127e8:	40 e0       	ldi	r20, 0x00	; 0
   127ea:	50 e0       	ldi	r21, 0x00	; 0
   127ec:	68 e0       	ldi	r22, 0x08	; 8
   127ee:	83 e1       	ldi	r24, 0x13	; 19
   127f0:	62 dd       	rcall	.-1340   	; 0x122b6 <print_tok_val>
   127f2:	e9 89       	ldd	r30, Y+17	; 0x11
   127f4:	fa 89       	ldd	r31, Y+18	; 0x12
   127f6:	26 8d       	ldd	r18, Z+30	; 0x1e
   127f8:	30 e0       	ldi	r19, 0x00	; 0
   127fa:	40 e0       	ldi	r20, 0x00	; 0
   127fc:	50 e0       	ldi	r21, 0x00	; 0
   127fe:	68 e0       	ldi	r22, 0x08	; 8
   12800:	81 e2       	ldi	r24, 0x21	; 33
   12802:	59 dd       	rcall	.-1358   	; 0x122b6 <print_tok_val>
   12804:	64 e0       	ldi	r22, 0x04	; 4
   12806:	81 e1       	ldi	r24, 0x11	; 17
   12808:	cb dd       	rcall	.-1130   	; 0x123a0 <print_tok>
   1280a:	a1 14       	cp	r10, r1
   1280c:	b1 04       	cpc	r11, r1
   1280e:	99 f1       	breq	.+102    	; 0x12876 <display_Config+0x2d4>
   12810:	64 e0       	ldi	r22, 0x04	; 4
   12812:	8a e2       	ldi	r24, 0x2A	; 42
   12814:	c5 dd       	rcall	.-1142   	; 0x123a0 <print_tok>
   12816:	e9 89       	ldd	r30, Y+17	; 0x11
   12818:	fa 89       	ldd	r31, Y+18	; 0x12
   1281a:	27 8d       	ldd	r18, Z+31	; 0x1f
   1281c:	30 a1       	ldd	r19, Z+32	; 0x20
   1281e:	41 a1       	ldd	r20, Z+33	; 0x21
   12820:	52 a1       	ldd	r21, Z+34	; 0x22
   12822:	68 e0       	ldi	r22, 0x08	; 8
   12824:	8a e1       	ldi	r24, 0x1A	; 26
   12826:	47 dd       	rcall	.-1394   	; 0x122b6 <print_tok_val>
   12828:	e9 89       	ldd	r30, Y+17	; 0x11
   1282a:	fa 89       	ldd	r31, Y+18	; 0x12
   1282c:	23 a1       	ldd	r18, Z+35	; 0x23
   1282e:	30 e0       	ldi	r19, 0x00	; 0
   12830:	40 e0       	ldi	r20, 0x00	; 0
   12832:	50 e0       	ldi	r21, 0x00	; 0
   12834:	68 e0       	ldi	r22, 0x08	; 8
   12836:	8b e1       	ldi	r24, 0x1B	; 27
   12838:	3e dd       	rcall	.-1412   	; 0x122b6 <print_tok_val>
   1283a:	e9 89       	ldd	r30, Y+17	; 0x11
   1283c:	fa 89       	ldd	r31, Y+18	; 0x12
   1283e:	24 a1       	ldd	r18, Z+36	; 0x24
   12840:	35 a1       	ldd	r19, Z+37	; 0x25
   12842:	40 e0       	ldi	r20, 0x00	; 0
   12844:	50 e0       	ldi	r21, 0x00	; 0
   12846:	68 e0       	ldi	r22, 0x08	; 8
   12848:	8d e1       	ldi	r24, 0x1D	; 29
   1284a:	35 dd       	rcall	.-1430   	; 0x122b6 <print_tok_val>
   1284c:	e9 89       	ldd	r30, Y+17	; 0x11
   1284e:	fa 89       	ldd	r31, Y+18	; 0x12
   12850:	26 a1       	ldd	r18, Z+38	; 0x26
   12852:	37 a1       	ldd	r19, Z+39	; 0x27
   12854:	40 a5       	ldd	r20, Z+40	; 0x28
   12856:	51 a5       	ldd	r21, Z+41	; 0x29
   12858:	68 e0       	ldi	r22, 0x08	; 8
   1285a:	89 e1       	ldi	r24, 0x19	; 25
   1285c:	2c dd       	rcall	.-1448   	; 0x122b6 <print_tok_val>
   1285e:	e9 89       	ldd	r30, Y+17	; 0x11
   12860:	fa 89       	ldd	r31, Y+18	; 0x12
   12862:	22 a5       	ldd	r18, Z+42	; 0x2a
   12864:	30 e0       	ldi	r19, 0x00	; 0
   12866:	40 e0       	ldi	r20, 0x00	; 0
   12868:	50 e0       	ldi	r21, 0x00	; 0
   1286a:	68 e0       	ldi	r22, 0x08	; 8
   1286c:	88 e1       	ldi	r24, 0x18	; 24
   1286e:	23 dd       	rcall	.-1466   	; 0x122b6 <print_tok_val>
   12870:	64 e0       	ldi	r22, 0x04	; 4
   12872:	81 e1       	ldi	r24, 0x11	; 17
   12874:	95 dd       	rcall	.-1238   	; 0x123a0 <print_tok>
   12876:	e9 89       	ldd	r30, Y+17	; 0x11
   12878:	fa 89       	ldd	r31, Y+18	; 0x12
   1287a:	86 a1       	ldd	r24, Z+38	; 0x26
   1287c:	97 a1       	ldd	r25, Z+39	; 0x27
   1287e:	a0 a5       	ldd	r26, Z+40	; 0x28
   12880:	b1 a5       	ldd	r27, Z+41	; 0x29
   12882:	01 96       	adiw	r24, 0x01	; 1
   12884:	a1 1d       	adc	r26, r1
   12886:	b1 1d       	adc	r27, r1
   12888:	ed b7       	in	r30, 0x3d	; 61
   1288a:	fe b7       	in	r31, 0x3e	; 62
   1288c:	84 83       	std	Z+4, r24	; 0x04
   1288e:	95 83       	std	Z+5, r25	; 0x05
   12890:	a6 83       	std	Z+6, r26	; 0x06
   12892:	b7 83       	std	Z+7, r27	; 0x07
   12894:	23 e1       	ldi	r18, 0x13	; 19
   12896:	39 e1       	ldi	r19, 0x19	; 25
   12898:	c9 01       	movw	r24, r18
   1289a:	a0 e0       	ldi	r26, 0x00	; 0
   1289c:	81 83       	std	Z+1, r24	; 0x01
   1289e:	92 83       	std	Z+2, r25	; 0x02
   128a0:	a3 83       	std	Z+3, r26	; 0x03
   128a2:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   128a6:	60 e0       	ldi	r22, 0x00	; 0
   128a8:	81 e1       	ldi	r24, 0x11	; 17
   128aa:	7a dd       	rcall	.-1292   	; 0x123a0 <print_tok>
   128ac:	f8 01       	movw	r30, r16
   128ae:	80 81       	ld	r24, Z
   128b0:	81 30       	cpi	r24, 0x01	; 1
   128b2:	09 f0       	breq	.+2      	; 0x128b6 <display_Config+0x314>
   128b4:	ad c0       	rjmp	.+346    	; 0x12a10 <display_Config+0x46e>
   128b6:	27 a1       	ldd	r18, Z+39	; 0x27
   128b8:	30 a5       	ldd	r19, Z+40	; 0x28
   128ba:	3a 8b       	std	Y+18, r19	; 0x12
   128bc:	29 8b       	std	Y+17, r18	; 0x11
   128be:	c8 01       	movw	r24, r16
   128c0:	07 96       	adiw	r24, 0x07	; 7
   128c2:	ed b7       	in	r30, 0x3d	; 61
   128c4:	fe b7       	in	r31, 0x3e	; 62
   128c6:	95 83       	std	Z+5, r25	; 0x05
   128c8:	84 83       	std	Z+4, r24	; 0x04
   128ca:	2b 85       	ldd	r18, Y+11	; 0x0b
   128cc:	3c 85       	ldd	r19, Y+12	; 0x0c
   128ce:	4d 85       	ldd	r20, Y+13	; 0x0d
   128d0:	21 83       	std	Z+1, r18	; 0x01
   128d2:	32 83       	std	Z+2, r19	; 0x02
   128d4:	43 83       	std	Z+3, r20	; 0x03
   128d6:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   128da:	e9 89       	ldd	r30, Y+17	; 0x11
   128dc:	fa 89       	ldd	r31, Y+18	; 0x12
   128de:	80 81       	ld	r24, Z
   128e0:	90 e0       	ldi	r25, 0x00	; 0
   128e2:	ed b7       	in	r30, 0x3d	; 61
   128e4:	fe b7       	in	r31, 0x3e	; 62
   128e6:	95 83       	std	Z+5, r25	; 0x05
   128e8:	84 83       	std	Z+4, r24	; 0x04
   128ea:	2e 85       	ldd	r18, Y+14	; 0x0e
   128ec:	3f 85       	ldd	r19, Y+15	; 0x0f
   128ee:	48 89       	ldd	r20, Y+16	; 0x10
   128f0:	21 83       	std	Z+1, r18	; 0x01
   128f2:	32 83       	std	Z+2, r19	; 0x02
   128f4:	43 83       	std	Z+3, r20	; 0x03
   128f6:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   128fa:	64 e0       	ldi	r22, 0x04	; 4
   128fc:	85 e1       	ldi	r24, 0x15	; 21
   128fe:	50 dd       	rcall	.-1376   	; 0x123a0 <print_tok>
   12900:	e9 89       	ldd	r30, Y+17	; 0x11
   12902:	fa 89       	ldd	r31, Y+18	; 0x12
   12904:	20 81       	ld	r18, Z
   12906:	30 e0       	ldi	r19, 0x00	; 0
   12908:	40 e0       	ldi	r20, 0x00	; 0
   1290a:	50 e0       	ldi	r21, 0x00	; 0
   1290c:	68 e0       	ldi	r22, 0x08	; 8
   1290e:	81 e0       	ldi	r24, 0x01	; 1
   12910:	d2 dc       	rcall	.-1628   	; 0x122b6 <print_tok_val>
   12912:	e9 89       	ldd	r30, Y+17	; 0x11
   12914:	fa 89       	ldd	r31, Y+18	; 0x12
   12916:	21 81       	ldd	r18, Z+1	; 0x01
   12918:	30 e0       	ldi	r19, 0x00	; 0
   1291a:	40 e0       	ldi	r20, 0x00	; 0
   1291c:	50 e0       	ldi	r21, 0x00	; 0
   1291e:	68 e0       	ldi	r22, 0x08	; 8
   12920:	8f e1       	ldi	r24, 0x1F	; 31
   12922:	c9 dc       	rcall	.-1646   	; 0x122b6 <print_tok_val>
   12924:	e9 89       	ldd	r30, Y+17	; 0x11
   12926:	fa 89       	ldd	r31, Y+18	; 0x12
   12928:	42 81       	ldd	r20, Z+2	; 0x02
   1292a:	53 81       	ldd	r21, Z+3	; 0x03
   1292c:	68 e0       	ldi	r22, 0x08	; 8
   1292e:	82 e1       	ldi	r24, 0x12	; 18
   12930:	02 dd       	rcall	.-1532   	; 0x12336 <print_tok_str>
   12932:	64 e0       	ldi	r22, 0x04	; 4
   12934:	81 e1       	ldi	r24, 0x11	; 17
   12936:	34 dd       	rcall	.-1432   	; 0x123a0 <print_tok>
   12938:	64 e0       	ldi	r22, 0x04	; 4
   1293a:	89 e0       	ldi	r24, 0x09	; 9
   1293c:	31 dd       	rcall	.-1438   	; 0x123a0 <print_tok>
   1293e:	e9 89       	ldd	r30, Y+17	; 0x11
   12940:	fa 89       	ldd	r31, Y+18	; 0x12
   12942:	24 81       	ldd	r18, Z+4	; 0x04
   12944:	35 81       	ldd	r19, Z+5	; 0x05
   12946:	40 e0       	ldi	r20, 0x00	; 0
   12948:	50 e0       	ldi	r21, 0x00	; 0
   1294a:	68 e0       	ldi	r22, 0x08	; 8
   1294c:	87 e1       	ldi	r24, 0x17	; 23
   1294e:	b3 dc       	rcall	.-1690   	; 0x122b6 <print_tok_val>
   12950:	64 e0       	ldi	r22, 0x04	; 4
   12952:	81 e1       	ldi	r24, 0x11	; 17
   12954:	25 dd       	rcall	.-1462   	; 0x123a0 <print_tok>
   12956:	a1 14       	cp	r10, r1
   12958:	b1 04       	cpc	r11, r1
   1295a:	91 f1       	breq	.+100    	; 0x129c0 <display_Config+0x41e>
   1295c:	64 e0       	ldi	r22, 0x04	; 4
   1295e:	84 e1       	ldi	r24, 0x14	; 20
   12960:	1f dd       	rcall	.-1474   	; 0x123a0 <print_tok>
   12962:	e9 89       	ldd	r30, Y+17	; 0x11
   12964:	fa 89       	ldd	r31, Y+18	; 0x12
   12966:	26 81       	ldd	r18, Z+6	; 0x06
   12968:	37 81       	ldd	r19, Z+7	; 0x07
   1296a:	03 2e       	mov	r0, r19
   1296c:	00 0c       	add	r0, r0
   1296e:	44 0b       	sbc	r20, r20
   12970:	55 0b       	sbc	r21, r21
   12972:	68 e0       	ldi	r22, 0x08	; 8
   12974:	88 e0       	ldi	r24, 0x08	; 8
   12976:	9f dc       	rcall	.-1730   	; 0x122b6 <print_tok_val>
   12978:	e9 89       	ldd	r30, Y+17	; 0x11
   1297a:	fa 89       	ldd	r31, Y+18	; 0x12
   1297c:	20 85       	ldd	r18, Z+8	; 0x08
   1297e:	31 85       	ldd	r19, Z+9	; 0x09
   12980:	03 2e       	mov	r0, r19
   12982:	00 0c       	add	r0, r0
   12984:	44 0b       	sbc	r20, r20
   12986:	55 0b       	sbc	r21, r21
   12988:	68 e0       	ldi	r22, 0x08	; 8
   1298a:	82 e2       	ldi	r24, 0x22	; 34
   1298c:	94 dc       	rcall	.-1752   	; 0x122b6 <print_tok_val>
   1298e:	e9 89       	ldd	r30, Y+17	; 0x11
   12990:	fa 89       	ldd	r31, Y+18	; 0x12
   12992:	22 85       	ldd	r18, Z+10	; 0x0a
   12994:	33 85       	ldd	r19, Z+11	; 0x0b
   12996:	03 2e       	mov	r0, r19
   12998:	00 0c       	add	r0, r0
   1299a:	44 0b       	sbc	r20, r20
   1299c:	55 0b       	sbc	r21, r21
   1299e:	68 e0       	ldi	r22, 0x08	; 8
   129a0:	86 e1       	ldi	r24, 0x16	; 22
   129a2:	89 dc       	rcall	.-1774   	; 0x122b6 <print_tok_val>
   129a4:	e9 89       	ldd	r30, Y+17	; 0x11
   129a6:	fa 89       	ldd	r31, Y+18	; 0x12
   129a8:	24 85       	ldd	r18, Z+12	; 0x0c
   129aa:	35 85       	ldd	r19, Z+13	; 0x0d
   129ac:	03 2e       	mov	r0, r19
   129ae:	00 0c       	add	r0, r0
   129b0:	44 0b       	sbc	r20, r20
   129b2:	55 0b       	sbc	r21, r21
   129b4:	68 e0       	ldi	r22, 0x08	; 8
   129b6:	8d e0       	ldi	r24, 0x0D	; 13
   129b8:	7e dc       	rcall	.-1796   	; 0x122b6 <print_tok_val>
   129ba:	64 e0       	ldi	r22, 0x04	; 4
   129bc:	81 e1       	ldi	r24, 0x11	; 17
   129be:	f0 dc       	rcall	.-1568   	; 0x123a0 <print_tok>
   129c0:	e9 89       	ldd	r30, Y+17	; 0x11
   129c2:	fa 89       	ldd	r31, Y+18	; 0x12
   129c4:	44 85       	ldd	r20, Z+12	; 0x0c
   129c6:	55 85       	ldd	r21, Z+13	; 0x0d
   129c8:	20 85       	ldd	r18, Z+8	; 0x08
   129ca:	31 85       	ldd	r19, Z+9	; 0x09
   129cc:	42 9f       	mul	r20, r18
   129ce:	c0 01       	movw	r24, r0
   129d0:	43 9f       	mul	r20, r19
   129d2:	90 0d       	add	r25, r0
   129d4:	52 9f       	mul	r21, r18
   129d6:	90 0d       	add	r25, r0
   129d8:	11 24       	eor	r1, r1
   129da:	42 85       	ldd	r20, Z+10	; 0x0a
   129dc:	53 85       	ldd	r21, Z+11	; 0x0b
   129de:	84 9f       	mul	r24, r20
   129e0:	90 01       	movw	r18, r0
   129e2:	85 9f       	mul	r24, r21
   129e4:	30 0d       	add	r19, r0
   129e6:	94 9f       	mul	r25, r20
   129e8:	30 0d       	add	r19, r0
   129ea:	11 24       	eor	r1, r1
   129ec:	c9 01       	movw	r24, r18
   129ee:	33 0f       	add	r19, r19
   129f0:	aa 0b       	sbc	r26, r26
   129f2:	bb 0b       	sbc	r27, r27
   129f4:	ed b7       	in	r30, 0x3d	; 61
   129f6:	fe b7       	in	r31, 0x3e	; 62
   129f8:	84 83       	std	Z+4, r24	; 0x04
   129fa:	95 83       	std	Z+5, r25	; 0x05
   129fc:	a6 83       	std	Z+6, r26	; 0x06
   129fe:	b7 83       	std	Z+7, r27	; 0x07
   12a00:	21 82       	std	Z+1, r2	; 0x01
   12a02:	32 82       	std	Z+2, r3	; 0x02
   12a04:	43 82       	std	Z+3, r4	; 0x03
   12a06:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   12a0a:	60 e0       	ldi	r22, 0x00	; 0
   12a0c:	81 e1       	ldi	r24, 0x11	; 17
   12a0e:	c8 dc       	rcall	.-1648   	; 0x123a0 <print_tok>
   12a10:	f8 01       	movw	r30, r16
   12a12:	80 81       	ld	r24, Z
   12a14:	84 30       	cpi	r24, 0x04	; 4
   12a16:	c9 f4       	brne	.+50     	; 0x12a4a <display_Config+0x4a8>
   12a18:	27 a1       	ldd	r18, Z+39	; 0x27
   12a1a:	30 a5       	ldd	r19, Z+40	; 0x28
   12a1c:	3a 8b       	std	Y+18, r19	; 0x12
   12a1e:	29 8b       	std	Y+17, r18	; 0x11
   12a20:	60 e0       	ldi	r22, 0x00	; 0
   12a22:	80 e2       	ldi	r24, 0x20	; 32
   12a24:	bd dc       	rcall	.-1670   	; 0x123a0 <print_tok>
   12a26:	64 e0       	ldi	r22, 0x04	; 4
   12a28:	89 e0       	ldi	r24, 0x09	; 9
   12a2a:	ba dc       	rcall	.-1676   	; 0x123a0 <print_tok>
   12a2c:	e9 89       	ldd	r30, Y+17	; 0x11
   12a2e:	fa 89       	ldd	r31, Y+18	; 0x12
   12a30:	20 81       	ld	r18, Z
   12a32:	30 e0       	ldi	r19, 0x00	; 0
   12a34:	40 e0       	ldi	r20, 0x00	; 0
   12a36:	50 e0       	ldi	r21, 0x00	; 0
   12a38:	68 e0       	ldi	r22, 0x08	; 8
   12a3a:	81 e0       	ldi	r24, 0x01	; 1
   12a3c:	3c dc       	rcall	.-1928   	; 0x122b6 <print_tok_val>
   12a3e:	64 e0       	ldi	r22, 0x04	; 4
   12a40:	81 e1       	ldi	r24, 0x11	; 17
   12a42:	ae dc       	rcall	.-1700   	; 0x123a0 <print_tok>
   12a44:	60 e0       	ldi	r22, 0x00	; 0
   12a46:	81 e1       	ldi	r24, 0x11	; 17
   12a48:	ab dc       	rcall	.-1706   	; 0x123a0 <print_tok>
   12a4a:	28 85       	ldd	r18, Y+8	; 0x08
   12a4c:	39 85       	ldd	r19, Y+9	; 0x09
   12a4e:	4a 85       	ldd	r20, Y+10	; 0x0a
   12a50:	ed b7       	in	r30, 0x3d	; 61
   12a52:	fe b7       	in	r31, 0x3e	; 62
   12a54:	21 83       	std	Z+1, r18	; 0x01
   12a56:	32 83       	std	Z+2, r19	; 0x02
   12a58:	43 83       	std	Z+3, r20	; 0x03
   12a5a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   12a5e:	05 5d       	subi	r16, 0xD5	; 213
   12a60:	1f 4f       	sbci	r17, 0xFF	; 255
   12a62:	22 e1       	ldi	r18, 0x12	; 18
   12a64:	31 e2       	ldi	r19, 0x21	; 33
   12a66:	20 17       	cp	r18, r16
   12a68:	31 07       	cpc	r19, r17
   12a6a:	09 f0       	breq	.+2      	; 0x12a6e <display_Config+0x4cc>
   12a6c:	df cd       	rjmp	.-1090   	; 0x1262c <display_Config+0x8a>
   12a6e:	82 ed       	ldi	r24, 0xD2	; 210
   12a70:	98 e1       	ldi	r25, 0x18	; 24
   12a72:	a0 e0       	ldi	r26, 0x00	; 0
   12a74:	ed b7       	in	r30, 0x3d	; 61
   12a76:	fe b7       	in	r31, 0x3e	; 62
   12a78:	81 83       	std	Z+1, r24	; 0x01
   12a7a:	92 83       	std	Z+2, r25	; 0x02
   12a7c:	a3 83       	std	Z+3, r26	; 0x03
   12a7e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   12a82:	62 96       	adiw	r28, 0x12	; 18
   12a84:	0f b6       	in	r0, 0x3f	; 63
   12a86:	f8 94       	cli
   12a88:	de bf       	out	0x3e, r29	; 62
   12a8a:	0f be       	out	0x3f, r0	; 63
   12a8c:	cd bf       	out	0x3d, r28	; 61
   12a8e:	df 91       	pop	r29
   12a90:	cf 91       	pop	r28
   12a92:	1f 91       	pop	r17
   12a94:	0f 91       	pop	r16
   12a96:	ef 90       	pop	r14
   12a98:	df 90       	pop	r13
   12a9a:	cf 90       	pop	r12
   12a9c:	bf 90       	pop	r11
   12a9e:	af 90       	pop	r10
   12aa0:	8f 90       	pop	r8
   12aa2:	7f 90       	pop	r7
   12aa4:	6f 90       	pop	r6
   12aa6:	4f 90       	pop	r4
   12aa8:	3f 90       	pop	r3
   12aaa:	2f 90       	pop	r2
   12aac:	08 95       	ret

00012aae <find_type>:
   12aae:	ee e0       	ldi	r30, 0x0E	; 14
   12ab0:	ff e1       	ldi	r31, 0x1F	; 31
   12ab2:	20 e0       	ldi	r18, 0x00	; 0
   12ab4:	30 e0       	ldi	r19, 0x00	; 0
   12ab6:	40 81       	ld	r20, Z
   12ab8:	50 e0       	ldi	r21, 0x00	; 0
   12aba:	48 17       	cp	r20, r24
   12abc:	59 07       	cpc	r21, r25
   12abe:	49 f0       	breq	.+18     	; 0x12ad2 <find_type+0x24>
   12ac0:	2f 5f       	subi	r18, 0xFF	; 255
   12ac2:	3f 4f       	sbci	r19, 0xFF	; 255
   12ac4:	bb 96       	adiw	r30, 0x2b	; 43
   12ac6:	2c 30       	cpi	r18, 0x0C	; 12
   12ac8:	31 05       	cpc	r19, r1
   12aca:	a9 f7       	brne	.-22     	; 0x12ab6 <find_type+0x8>
   12acc:	8f ef       	ldi	r24, 0xFF	; 255
   12ace:	9f ef       	ldi	r25, 0xFF	; 255
   12ad0:	08 95       	ret
   12ad2:	c9 01       	movw	r24, r18
   12ad4:	08 95       	ret

00012ad6 <count_drive_types>:
   12ad6:	28 2f       	mov	r18, r24
   12ad8:	ee e0       	ldi	r30, 0x0E	; 14
   12ada:	ff e1       	ldi	r31, 0x1F	; 31
   12adc:	80 e0       	ldi	r24, 0x00	; 0
   12ade:	90 e0       	ldi	r25, 0x00	; 0
   12ae0:	30 81       	ld	r19, Z
   12ae2:	32 13       	cpse	r19, r18
   12ae4:	01 c0       	rjmp	.+2      	; 0x12ae8 <count_drive_types+0x12>
   12ae6:	01 96       	adiw	r24, 0x01	; 1
   12ae8:	bb 96       	adiw	r30, 0x2b	; 43
   12aea:	31 e2       	ldi	r19, 0x21	; 33
   12aec:	e2 31       	cpi	r30, 0x12	; 18
   12aee:	f3 07       	cpc	r31, r19
   12af0:	b9 f7       	brne	.-18     	; 0x12ae0 <count_drive_types+0xa>
   12af2:	08 95       	ret

00012af4 <type_to_str>:
   12af4:	00 97       	sbiw	r24, 0x00	; 0
   12af6:	59 f0       	breq	.+22     	; 0x12b0e <type_to_str+0x1a>
   12af8:	81 30       	cpi	r24, 0x01	; 1
   12afa:	91 05       	cpc	r25, r1
   12afc:	59 f0       	breq	.+22     	; 0x12b14 <type_to_str+0x20>
   12afe:	83 30       	cpi	r24, 0x03	; 3
   12b00:	91 05       	cpc	r25, r1
   12b02:	59 f0       	breq	.+22     	; 0x12b1a <type_to_str+0x26>
   12b04:	04 97       	sbiw	r24, 0x04	; 4
   12b06:	61 f0       	breq	.+24     	; 0x12b20 <type_to_str+0x2c>
   12b08:	83 e3       	ldi	r24, 0x33	; 51
   12b0a:	9e e0       	ldi	r25, 0x0E	; 14
   12b0c:	08 95       	ret
   12b0e:	89 e0       	ldi	r24, 0x09	; 9
   12b10:	9e e0       	ldi	r25, 0x0E	; 14
   12b12:	08 95       	ret
   12b14:	81 e1       	ldi	r24, 0x11	; 17
   12b16:	9e e0       	ldi	r25, 0x0E	; 14
   12b18:	08 95       	ret
   12b1a:	89 e2       	ldi	r24, 0x29	; 41
   12b1c:	9e e0       	ldi	r25, 0x0E	; 14
   12b1e:	08 95       	ret
   12b20:	8c e1       	ldi	r24, 0x1C	; 28
   12b22:	9e e0       	ldi	r25, 0x0E	; 14
   12b24:	08 95       	ret

00012b26 <find_free>:
   12b26:	80 e0       	ldi	r24, 0x00	; 0
   12b28:	90 e0       	ldi	r25, 0x00	; 0
   12b2a:	c1 cf       	rjmp	.-126    	; 0x12aae <find_type>
   12b2c:	08 95       	ret

00012b2e <find_device>:
   12b2e:	9b 01       	movw	r18, r22
   12b30:	20 52       	subi	r18, 0x20	; 32
   12b32:	31 09       	sbc	r19, r1
   12b34:	2f 35       	cpi	r18, 0x5F	; 95
   12b36:	31 05       	cpc	r19, r1
   12b38:	f8 f4       	brcc	.+62     	; 0x12b78 <find_device+0x4a>
   12b3a:	64 17       	cp	r22, r20
   12b3c:	75 07       	cpc	r23, r21
   12b3e:	e4 f0       	brlt	.+56     	; 0x12b78 <find_device+0x4a>
   12b40:	9a 01       	movw	r18, r20
   12b42:	22 5e       	subi	r18, 0xE2	; 226
   12b44:	3f 4f       	sbci	r19, 0xFF	; 255
   12b46:	26 17       	cp	r18, r22
   12b48:	37 07       	cpc	r19, r23
   12b4a:	b4 f0       	brlt	.+44     	; 0x12b78 <find_device+0x4a>
   12b4c:	64 1b       	sub	r22, r20
   12b4e:	75 0b       	sbc	r23, r21
   12b50:	ee e0       	ldi	r30, 0x0E	; 14
   12b52:	ff e1       	ldi	r31, 0x1F	; 31
   12b54:	20 e0       	ldi	r18, 0x00	; 0
   12b56:	30 e0       	ldi	r19, 0x00	; 0
   12b58:	40 81       	ld	r20, Z
   12b5a:	50 e0       	ldi	r21, 0x00	; 0
   12b5c:	48 17       	cp	r20, r24
   12b5e:	59 07       	cpc	r21, r25
   12b60:	29 f4       	brne	.+10     	; 0x12b6c <find_device+0x3e>
   12b62:	41 81       	ldd	r20, Z+1	; 0x01
   12b64:	50 e0       	ldi	r21, 0x00	; 0
   12b66:	64 17       	cp	r22, r20
   12b68:	75 07       	cpc	r23, r21
   12b6a:	49 f0       	breq	.+18     	; 0x12b7e <find_device+0x50>
   12b6c:	2f 5f       	subi	r18, 0xFF	; 255
   12b6e:	3f 4f       	sbci	r19, 0xFF	; 255
   12b70:	bb 96       	adiw	r30, 0x2b	; 43
   12b72:	2c 30       	cpi	r18, 0x0C	; 12
   12b74:	31 05       	cpc	r19, r1
   12b76:	81 f7       	brne	.-32     	; 0x12b58 <find_device+0x2a>
   12b78:	8f ef       	ldi	r24, 0xFF	; 255
   12b7a:	9f ef       	ldi	r25, 0xFF	; 255
   12b7c:	08 95       	ret
   12b7e:	c9 01       	movw	r24, r18
   12b80:	08 95       	ret

00012b82 <set_active_device>:
   12b82:	a9 e0       	ldi	r26, 0x09	; 9
   12b84:	b0 e0       	ldi	r27, 0x00	; 0
   12b86:	e7 ec       	ldi	r30, 0xC7	; 199
   12b88:	f5 e9       	ldi	r31, 0x95	; 149
   12b8a:	0c 94 e6 e0 	jmp	0x1c1cc	; 0x1c1cc <__prologue_saves__+0x1c>
   12b8e:	8f 3f       	cpi	r24, 0xFF	; 255
   12b90:	2f ef       	ldi	r18, 0xFF	; 255
   12b92:	92 07       	cpc	r25, r18
   12b94:	09 f4       	brne	.+2      	; 0x12b98 <set_active_device+0x16>
   12b96:	d0 c0       	rjmp	.+416    	; 0x12d38 <set_active_device+0x1b6>
   12b98:	ec 01       	movw	r28, r24
   12b9a:	0c 97       	sbiw	r24, 0x0c	; 12
   12b9c:	b0 f0       	brcs	.+44     	; 0x12bca <set_active_device+0x48>
   12b9e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12ba2:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12ba6:	c9 01       	movw	r24, r18
   12ba8:	81 70       	andi	r24, 0x01	; 1
   12baa:	99 27       	eor	r25, r25
   12bac:	20 ff       	sbrs	r18, 0
   12bae:	c6 c0       	rjmp	.+396    	; 0x12d3c <set_active_device+0x1ba>
   12bb0:	ed b7       	in	r30, 0x3d	; 61
   12bb2:	fe b7       	in	r31, 0x3e	; 62
   12bb4:	d5 83       	std	Z+5, r29	; 0x05
   12bb6:	c4 83       	std	Z+4, r28	; 0x04
   12bb8:	8d ea       	ldi	r24, 0xAD	; 173
   12bba:	98 e1       	ldi	r25, 0x18	; 24
   12bbc:	a0 e0       	ldi	r26, 0x00	; 0
   12bbe:	81 83       	std	Z+1, r24	; 0x01
   12bc0:	92 83       	std	Z+2, r25	; 0x02
   12bc2:	a3 83       	std	Z+3, r26	; 0x03
   12bc4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   12bc8:	b7 c0       	rjmp	.+366    	; 0x12d38 <set_active_device+0x1b6>
   12bca:	8b e2       	ldi	r24, 0x2B	; 43
   12bcc:	8c 9f       	mul	r24, r28
   12bce:	f0 01       	movw	r30, r0
   12bd0:	8d 9f       	mul	r24, r29
   12bd2:	f0 0d       	add	r31, r0
   12bd4:	11 24       	eor	r1, r1
   12bd6:	e2 5f       	subi	r30, 0xF2	; 242
   12bd8:	f0 4e       	sbci	r31, 0xE0	; 224
   12bda:	21 81       	ldd	r18, Z+1	; 0x01
   12bdc:	2f 31       	cpi	r18, 0x1F	; 31
   12bde:	d0 f0       	brcs	.+52     	; 0x12c14 <set_active_device+0x92>
   12be0:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   12be4:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12be8:	ca 01       	movw	r24, r20
   12bea:	81 70       	andi	r24, 0x01	; 1
   12bec:	99 27       	eor	r25, r25
   12bee:	40 ff       	sbrs	r20, 0
   12bf0:	a5 c0       	rjmp	.+330    	; 0x12d3c <set_active_device+0x1ba>
   12bf2:	82 2f       	mov	r24, r18
   12bf4:	90 e0       	ldi	r25, 0x00	; 0
   12bf6:	ed b7       	in	r30, 0x3d	; 61
   12bf8:	fe b7       	in	r31, 0x3e	; 62
   12bfa:	97 83       	std	Z+7, r25	; 0x07
   12bfc:	86 83       	std	Z+6, r24	; 0x06
   12bfe:	d5 83       	std	Z+5, r29	; 0x05
   12c00:	c4 83       	std	Z+4, r28	; 0x04
   12c02:	84 e7       	ldi	r24, 0x74	; 116
   12c04:	98 e1       	ldi	r25, 0x18	; 24
   12c06:	a0 e0       	ldi	r26, 0x00	; 0
   12c08:	81 83       	std	Z+1, r24	; 0x01
   12c0a:	92 83       	std	Z+2, r25	; 0x02
   12c0c:	a3 83       	std	Z+3, r26	; 0x03
   12c0e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   12c12:	92 c0       	rjmp	.+292    	; 0x12d38 <set_active_device+0x1b6>
   12c14:	20 81       	ld	r18, Z
   12c16:	02 2f       	mov	r16, r18
   12c18:	10 e0       	ldi	r17, 0x00	; 0
   12c1a:	87 a1       	ldd	r24, Z+39	; 0x27
   12c1c:	90 a5       	ldd	r25, Z+40	; 0x28
   12c1e:	00 97       	sbiw	r24, 0x00	; 0
   12c20:	b1 f4       	brne	.+44     	; 0x12c4e <set_active_device+0xcc>
   12c22:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12c26:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12c2a:	c9 01       	movw	r24, r18
   12c2c:	81 70       	andi	r24, 0x01	; 1
   12c2e:	99 27       	eor	r25, r25
   12c30:	20 ff       	sbrs	r18, 0
   12c32:	84 c0       	rjmp	.+264    	; 0x12d3c <set_active_device+0x1ba>
   12c34:	c8 01       	movw	r24, r16
   12c36:	5e df       	rcall	.-324    	; 0x12af4 <type_to_str>
   12c38:	ed b7       	in	r30, 0x3d	; 61
   12c3a:	fe b7       	in	r31, 0x3e	; 62
   12c3c:	91 87       	std	Z+9, r25	; 0x09
   12c3e:	80 87       	std	Z+8, r24	; 0x08
   12c40:	17 83       	std	Z+7, r17	; 0x07
   12c42:	06 83       	std	Z+6, r16	; 0x06
   12c44:	d5 83       	std	Z+5, r29	; 0x05
   12c46:	c4 83       	std	Z+4, r28	; 0x04
   12c48:	8f e3       	ldi	r24, 0x3F	; 63
   12c4a:	98 e1       	ldi	r25, 0x18	; 24
   12c4c:	6f c0       	rjmp	.+222    	; 0x12d2c <set_active_device+0x1aa>
   12c4e:	01 15       	cp	r16, r1
   12c50:	11 05       	cpc	r17, r1
   12c52:	b9 f4       	brne	.+46     	; 0x12c82 <set_active_device+0x100>
   12c54:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12c58:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12c5c:	c9 01       	movw	r24, r18
   12c5e:	81 70       	andi	r24, 0x01	; 1
   12c60:	99 27       	eor	r25, r25
   12c62:	20 ff       	sbrs	r18, 0
   12c64:	6b c0       	rjmp	.+214    	; 0x12d3c <set_active_device+0x1ba>
   12c66:	80 e0       	ldi	r24, 0x00	; 0
   12c68:	90 e0       	ldi	r25, 0x00	; 0
   12c6a:	44 df       	rcall	.-376    	; 0x12af4 <type_to_str>
   12c6c:	ed b7       	in	r30, 0x3d	; 61
   12c6e:	fe b7       	in	r31, 0x3e	; 62
   12c70:	91 87       	std	Z+9, r25	; 0x09
   12c72:	80 87       	std	Z+8, r24	; 0x08
   12c74:	17 82       	std	Z+7, r1	; 0x07
   12c76:	16 82       	std	Z+6, r1	; 0x06
   12c78:	d5 83       	std	Z+5, r29	; 0x05
   12c7a:	c4 83       	std	Z+4, r28	; 0x04
   12c7c:	8a e0       	ldi	r24, 0x0A	; 10
   12c7e:	98 e1       	ldi	r25, 0x18	; 24
   12c80:	55 c0       	rjmp	.+170    	; 0x12d2c <set_active_device+0x1aa>
   12c82:	04 30       	cpi	r16, 0x04	; 4
   12c84:	11 05       	cpc	r17, r1
   12c86:	29 f4       	brne	.+10     	; 0x12c92 <set_active_device+0x110>
   12c88:	90 93 86 19 	sts	0x1986, r25	; 0x801986 <PRINTERp+0x1>
   12c8c:	80 93 85 19 	sts	0x1985, r24	; 0x801985 <PRINTERp>
   12c90:	35 c0       	rjmp	.+106    	; 0x12cfc <set_active_device+0x17a>
   12c92:	2d 7f       	andi	r18, 0xFD	; 253
   12c94:	21 30       	cpi	r18, 0x01	; 1
   12c96:	a9 f5       	brne	.+106    	; 0x12d02 <set_active_device+0x180>
   12c98:	21 a5       	ldd	r18, Z+41	; 0x29
   12c9a:	32 a5       	ldd	r19, Z+42	; 0x2a
   12c9c:	21 15       	cp	r18, r1
   12c9e:	31 05       	cpc	r19, r1
   12ca0:	b1 f4       	brne	.+44     	; 0x12cce <set_active_device+0x14c>
   12ca2:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12ca6:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12caa:	c9 01       	movw	r24, r18
   12cac:	81 70       	andi	r24, 0x01	; 1
   12cae:	99 27       	eor	r25, r25
   12cb0:	20 ff       	sbrs	r18, 0
   12cb2:	44 c0       	rjmp	.+136    	; 0x12d3c <set_active_device+0x1ba>
   12cb4:	c8 01       	movw	r24, r16
   12cb6:	1e df       	rcall	.-452    	; 0x12af4 <type_to_str>
   12cb8:	ed b7       	in	r30, 0x3d	; 61
   12cba:	fe b7       	in	r31, 0x3e	; 62
   12cbc:	91 87       	std	Z+9, r25	; 0x09
   12cbe:	80 87       	std	Z+8, r24	; 0x08
   12cc0:	17 83       	std	Z+7, r17	; 0x07
   12cc2:	06 83       	std	Z+6, r16	; 0x06
   12cc4:	d5 83       	std	Z+5, r29	; 0x05
   12cc6:	c4 83       	std	Z+4, r28	; 0x04
   12cc8:	82 ed       	ldi	r24, 0xD2	; 210
   12cca:	97 e1       	ldi	r25, 0x17	; 23
   12ccc:	2f c0       	rjmp	.+94     	; 0x12d2c <set_active_device+0x1aa>
   12cce:	01 30       	cpi	r16, 0x01	; 1
   12cd0:	11 05       	cpc	r17, r1
   12cd2:	49 f4       	brne	.+18     	; 0x12ce6 <set_active_device+0x164>
   12cd4:	90 93 80 19 	sts	0x1980, r25	; 0x801980 <AMIGOp+0x1>
   12cd8:	80 93 7f 19 	sts	0x197F, r24	; 0x80197f <AMIGOp>
   12cdc:	30 93 7e 19 	sts	0x197E, r19	; 0x80197e <AMIGOs+0x1>
   12ce0:	20 93 7d 19 	sts	0x197D, r18	; 0x80197d <AMIGOs>
   12ce4:	0b c0       	rjmp	.+22     	; 0x12cfc <set_active_device+0x17a>
   12ce6:	03 30       	cpi	r16, 0x03	; 3
   12ce8:	11 05       	cpc	r17, r1
   12cea:	59 f4       	brne	.+22     	; 0x12d02 <set_active_device+0x180>
   12cec:	90 93 84 19 	sts	0x1984, r25	; 0x801984 <SS80p+0x1>
   12cf0:	80 93 83 19 	sts	0x1983, r24	; 0x801983 <SS80p>
   12cf4:	30 93 82 19 	sts	0x1982, r19	; 0x801982 <SS80s+0x1>
   12cf8:	20 93 81 19 	sts	0x1981, r18	; 0x801981 <SS80s>
   12cfc:	81 e0       	ldi	r24, 0x01	; 1
   12cfe:	90 e0       	ldi	r25, 0x00	; 0
   12d00:	1d c0       	rjmp	.+58     	; 0x12d3c <set_active_device+0x1ba>
   12d02:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   12d06:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   12d0a:	c9 01       	movw	r24, r18
   12d0c:	81 70       	andi	r24, 0x01	; 1
   12d0e:	99 27       	eor	r25, r25
   12d10:	20 ff       	sbrs	r18, 0
   12d12:	14 c0       	rjmp	.+40     	; 0x12d3c <set_active_device+0x1ba>
   12d14:	c8 01       	movw	r24, r16
   12d16:	ee de       	rcall	.-548    	; 0x12af4 <type_to_str>
   12d18:	ed b7       	in	r30, 0x3d	; 61
   12d1a:	fe b7       	in	r31, 0x3e	; 62
   12d1c:	91 87       	std	Z+9, r25	; 0x09
   12d1e:	80 87       	std	Z+8, r24	; 0x08
   12d20:	17 83       	std	Z+7, r17	; 0x07
   12d22:	06 83       	std	Z+6, r16	; 0x06
   12d24:	d5 83       	std	Z+5, r29	; 0x05
   12d26:	c4 83       	std	Z+4, r28	; 0x04
   12d28:	87 ea       	ldi	r24, 0xA7	; 167
   12d2a:	97 e1       	ldi	r25, 0x17	; 23
   12d2c:	a0 e0       	ldi	r26, 0x00	; 0
   12d2e:	81 83       	std	Z+1, r24	; 0x01
   12d30:	92 83       	std	Z+2, r25	; 0x02
   12d32:	a3 83       	std	Z+3, r26	; 0x03
   12d34:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   12d38:	80 e0       	ldi	r24, 0x00	; 0
   12d3a:	90 e0       	ldi	r25, 0x00	; 0
   12d3c:	cd b7       	in	r28, 0x3d	; 61
   12d3e:	de b7       	in	r29, 0x3e	; 62
   12d40:	29 96       	adiw	r28, 0x09	; 9
   12d42:	e4 e0       	ldi	r30, 0x04	; 4
   12d44:	0c 94 02 e1 	jmp	0x1c204	; 0x1c204 <__epilogue_restores__+0x1c>

00012d48 <SS80_Set_Defaults>:
   12d48:	0f 93       	push	r16
   12d4a:	1f 93       	push	r17
   12d4c:	cf 93       	push	r28
   12d4e:	df 93       	push	r29
   12d50:	ec 01       	movw	r28, r24
   12d52:	82 e0       	ldi	r24, 0x02	; 2
   12d54:	90 e0       	ldi	r25, 0x00	; 0
   12d56:	ab de       	rcall	.-682    	; 0x12aae <find_type>
   12d58:	97 fd       	sbrc	r25, 7
   12d5a:	6b c0       	rjmp	.+214    	; 0x12e32 <SS80_Set_Defaults+0xea>
   12d5c:	2b e2       	ldi	r18, 0x2B	; 43
   12d5e:	2c 9f       	mul	r18, r28
   12d60:	f0 01       	movw	r30, r0
   12d62:	2d 9f       	mul	r18, r29
   12d64:	f0 0d       	add	r31, r0
   12d66:	11 24       	eor	r1, r1
   12d68:	e2 5f       	subi	r30, 0xF2	; 242
   12d6a:	f0 4e       	sbci	r31, 0xE0	; 224
   12d6c:	c7 a1       	ldd	r28, Z+39	; 0x27
   12d6e:	d0 a5       	ldd	r29, Z+40	; 0x28
   12d70:	28 9f       	mul	r18, r24
   12d72:	f0 01       	movw	r30, r0
   12d74:	29 9f       	mul	r18, r25
   12d76:	f0 0d       	add	r31, r0
   12d78:	11 24       	eor	r1, r1
   12d7a:	e2 5f       	subi	r30, 0xF2	; 242
   12d7c:	f0 4e       	sbci	r31, 0xE0	; 224
   12d7e:	07 a1       	ldd	r16, Z+39	; 0x27
   12d80:	10 a5       	ldd	r17, Z+40	; 0x28
   12d82:	f8 01       	movw	r30, r16
   12d84:	80 81       	ld	r24, Z
   12d86:	88 83       	st	Y, r24
   12d88:	81 81       	ldd	r24, Z+1	; 0x01
   12d8a:	89 83       	std	Y+1, r24	; 0x01
   12d8c:	82 81       	ldd	r24, Z+2	; 0x02
   12d8e:	93 81       	ldd	r25, Z+3	; 0x03
   12d90:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <stralloc>
   12d94:	9b 83       	std	Y+3, r25	; 0x03
   12d96:	8a 83       	std	Y+2, r24	; 0x02
   12d98:	f8 01       	movw	r30, r16
   12d9a:	84 81       	ldd	r24, Z+4	; 0x04
   12d9c:	95 81       	ldd	r25, Z+5	; 0x05
   12d9e:	9d 83       	std	Y+5, r25	; 0x05
   12da0:	8c 83       	std	Y+4, r24	; 0x04
   12da2:	86 81       	ldd	r24, Z+6	; 0x06
   12da4:	97 81       	ldd	r25, Z+7	; 0x07
   12da6:	9f 83       	std	Y+7, r25	; 0x07
   12da8:	8e 83       	std	Y+6, r24	; 0x06
   12daa:	80 85       	ldd	r24, Z+8	; 0x08
   12dac:	91 85       	ldd	r25, Z+9	; 0x09
   12dae:	99 87       	std	Y+9, r25	; 0x09
   12db0:	88 87       	std	Y+8, r24	; 0x08
   12db2:	82 85       	ldd	r24, Z+10	; 0x0a
   12db4:	8a 87       	std	Y+10, r24	; 0x0a
   12db6:	83 85       	ldd	r24, Z+11	; 0x0b
   12db8:	8b 87       	std	Y+11, r24	; 0x0b
   12dba:	84 85       	ldd	r24, Z+12	; 0x0c
   12dbc:	95 85       	ldd	r25, Z+13	; 0x0d
   12dbe:	a6 85       	ldd	r26, Z+14	; 0x0e
   12dc0:	b7 85       	ldd	r27, Z+15	; 0x0f
   12dc2:	8c 87       	std	Y+12, r24	; 0x0c
   12dc4:	9d 87       	std	Y+13, r25	; 0x0d
   12dc6:	ae 87       	std	Y+14, r26	; 0x0e
   12dc8:	bf 87       	std	Y+15, r27	; 0x0f
   12dca:	80 89       	ldd	r24, Z+16	; 0x10
   12dcc:	91 89       	ldd	r25, Z+17	; 0x11
   12dce:	99 8b       	std	Y+17, r25	; 0x11
   12dd0:	88 8b       	std	Y+16, r24	; 0x10
   12dd2:	82 89       	ldd	r24, Z+18	; 0x12
   12dd4:	8a 8b       	std	Y+18, r24	; 0x12
   12dd6:	83 89       	ldd	r24, Z+19	; 0x13
   12dd8:	8b 8b       	std	Y+19, r24	; 0x13
   12dda:	84 89       	ldd	r24, Z+20	; 0x14
   12ddc:	95 89       	ldd	r25, Z+21	; 0x15
   12dde:	9d 8b       	std	Y+21, r25	; 0x15
   12de0:	8c 8b       	std	Y+20, r24	; 0x14
   12de2:	86 89       	ldd	r24, Z+22	; 0x16
   12de4:	97 89       	ldd	r25, Z+23	; 0x17
   12de6:	9f 8b       	std	Y+23, r25	; 0x17
   12de8:	8e 8b       	std	Y+22, r24	; 0x16
   12dea:	80 8d       	ldd	r24, Z+24	; 0x18
   12dec:	91 8d       	ldd	r25, Z+25	; 0x19
   12dee:	99 8f       	std	Y+25, r25	; 0x19
   12df0:	88 8f       	std	Y+24, r24	; 0x18
   12df2:	82 8d       	ldd	r24, Z+26	; 0x1a
   12df4:	93 8d       	ldd	r25, Z+27	; 0x1b
   12df6:	9b 8f       	std	Y+27, r25	; 0x1b
   12df8:	8a 8f       	std	Y+26, r24	; 0x1a
   12dfa:	84 8d       	ldd	r24, Z+28	; 0x1c
   12dfc:	8c 8f       	std	Y+28, r24	; 0x1c
   12dfe:	85 8d       	ldd	r24, Z+29	; 0x1d
   12e00:	8d 8f       	std	Y+29, r24	; 0x1d
   12e02:	87 8d       	ldd	r24, Z+31	; 0x1f
   12e04:	90 a1       	ldd	r25, Z+32	; 0x20
   12e06:	a1 a1       	ldd	r26, Z+33	; 0x21
   12e08:	b2 a1       	ldd	r27, Z+34	; 0x22
   12e0a:	8f 8f       	std	Y+31, r24	; 0x1f
   12e0c:	98 a3       	std	Y+32, r25	; 0x20
   12e0e:	a9 a3       	std	Y+33, r26	; 0x21
   12e10:	ba a3       	std	Y+34, r27	; 0x22
   12e12:	83 a1       	ldd	r24, Z+35	; 0x23
   12e14:	8b a3       	std	Y+35, r24	; 0x23
   12e16:	84 a1       	ldd	r24, Z+36	; 0x24
   12e18:	95 a1       	ldd	r25, Z+37	; 0x25
   12e1a:	9d a3       	std	Y+37, r25	; 0x25
   12e1c:	8c a3       	std	Y+36, r24	; 0x24
   12e1e:	86 a1       	ldd	r24, Z+38	; 0x26
   12e20:	97 a1       	ldd	r25, Z+39	; 0x27
   12e22:	a0 a5       	ldd	r26, Z+40	; 0x28
   12e24:	b1 a5       	ldd	r27, Z+41	; 0x29
   12e26:	8e a3       	std	Y+38, r24	; 0x26
   12e28:	9f a3       	std	Y+39, r25	; 0x27
   12e2a:	a8 a7       	std	Y+40, r26	; 0x28
   12e2c:	b9 a7       	std	Y+41, r27	; 0x29
   12e2e:	82 a5       	ldd	r24, Z+42	; 0x2a
   12e30:	8a a7       	std	Y+42, r24	; 0x2a
   12e32:	df 91       	pop	r29
   12e34:	cf 91       	pop	r28
   12e36:	1f 91       	pop	r17
   12e38:	0f 91       	pop	r16
   12e3a:	08 95       	ret

00012e3c <alloc_device>:
   12e3c:	0f 93       	push	r16
   12e3e:	1f 93       	push	r17
   12e40:	cf 93       	push	r28
   12e42:	df 93       	push	r29
   12e44:	ad b7       	in	r26, 0x3d	; 61
   12e46:	be b7       	in	r27, 0x3e	; 62
   12e48:	17 97       	sbiw	r26, 0x07	; 7
   12e4a:	0f b6       	in	r0, 0x3f	; 63
   12e4c:	f8 94       	cli
   12e4e:	be bf       	out	0x3e, r27	; 62
   12e50:	0f be       	out	0x3f, r0	; 63
   12e52:	ad bf       	out	0x3d, r26	; 61
   12e54:	8c 01       	movw	r16, r24
   12e56:	67 de       	rcall	.-818    	; 0x12b26 <find_free>
   12e58:	ec 01       	movw	r28, r24
   12e5a:	cf 3f       	cpi	r28, 0xFF	; 255
   12e5c:	8f ef       	ldi	r24, 0xFF	; 255
   12e5e:	d8 07       	cpc	r29, r24
   12e60:	89 f4       	brne	.+34     	; 0x12e84 <alloc_device+0x48>
   12e62:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12e66:	80 ff       	sbrs	r24, 0
   12e68:	a1 c0       	rjmp	.+322    	; 0x12fac <alloc_device+0x170>
   12e6a:	ed b7       	in	r30, 0x3d	; 61
   12e6c:	fe b7       	in	r31, 0x3e	; 62
   12e6e:	15 83       	std	Z+5, r17	; 0x05
   12e70:	04 83       	std	Z+4, r16	; 0x04
   12e72:	83 e8       	ldi	r24, 0x83	; 131
   12e74:	97 e1       	ldi	r25, 0x17	; 23
   12e76:	a0 e0       	ldi	r26, 0x00	; 0
   12e78:	81 83       	std	Z+1, r24	; 0x01
   12e7a:	92 83       	std	Z+2, r25	; 0x02
   12e7c:	a3 83       	std	Z+3, r26	; 0x03
   12e7e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   12e82:	94 c0       	rjmp	.+296    	; 0x12fac <alloc_device+0x170>
   12e84:	02 30       	cpi	r16, 0x02	; 2
   12e86:	11 05       	cpc	r17, r1
   12e88:	e1 f1       	breq	.+120    	; 0x12f02 <alloc_device+0xc6>
   12e8a:	ec f4       	brge	.+58     	; 0x12ec6 <alloc_device+0x8a>
   12e8c:	01 30       	cpi	r16, 0x01	; 1
   12e8e:	11 05       	cpc	r17, r1
   12e90:	09 f0       	breq	.+2      	; 0x12e94 <alloc_device+0x58>
   12e92:	76 c0       	rjmp	.+236    	; 0x12f80 <alloc_device+0x144>
   12e94:	8b e2       	ldi	r24, 0x2B	; 43
   12e96:	8c 9f       	mul	r24, r28
   12e98:	80 01       	movw	r16, r0
   12e9a:	8d 9f       	mul	r24, r29
   12e9c:	10 0d       	add	r17, r0
   12e9e:	11 24       	eor	r1, r1
   12ea0:	02 5f       	subi	r16, 0xF2	; 242
   12ea2:	10 4e       	sbci	r17, 0xE0	; 224
   12ea4:	81 e0       	ldi	r24, 0x01	; 1
   12ea6:	f8 01       	movw	r30, r16
   12ea8:	80 83       	st	Z, r24
   12eaa:	61 e0       	ldi	r22, 0x01	; 1
   12eac:	70 e0       	ldi	r23, 0x00	; 0
   12eae:	85 e1       	ldi	r24, 0x15	; 21
   12eb0:	90 e0       	ldi	r25, 0x00	; 0
   12eb2:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <safecalloc>
   12eb6:	f8 01       	movw	r30, r16
   12eb8:	90 a7       	std	Z+40, r25	; 0x28
   12eba:	87 a3       	std	Z+39, r24	; 0x27
   12ebc:	61 e0       	ldi	r22, 0x01	; 1
   12ebe:	70 e0       	ldi	r23, 0x00	; 0
   12ec0:	88 e1       	ldi	r24, 0x18	; 24
   12ec2:	90 e0       	ldi	r25, 0x00	; 0
   12ec4:	57 c0       	rjmp	.+174    	; 0x12f74 <alloc_device+0x138>
   12ec6:	03 30       	cpi	r16, 0x03	; 3
   12ec8:	11 05       	cpc	r17, r1
   12eca:	a1 f1       	breq	.+104    	; 0x12f34 <alloc_device+0xf8>
   12ecc:	04 30       	cpi	r16, 0x04	; 4
   12ece:	11 05       	cpc	r17, r1
   12ed0:	09 f0       	breq	.+2      	; 0x12ed4 <alloc_device+0x98>
   12ed2:	56 c0       	rjmp	.+172    	; 0x12f80 <alloc_device+0x144>
   12ed4:	8b e2       	ldi	r24, 0x2B	; 43
   12ed6:	8c 9f       	mul	r24, r28
   12ed8:	80 01       	movw	r16, r0
   12eda:	8d 9f       	mul	r24, r29
   12edc:	10 0d       	add	r17, r0
   12ede:	11 24       	eor	r1, r1
   12ee0:	02 5f       	subi	r16, 0xF2	; 242
   12ee2:	10 4e       	sbci	r17, 0xE0	; 224
   12ee4:	84 e0       	ldi	r24, 0x04	; 4
   12ee6:	f8 01       	movw	r30, r16
   12ee8:	80 83       	st	Z, r24
   12eea:	61 e0       	ldi	r22, 0x01	; 1
   12eec:	70 e0       	ldi	r23, 0x00	; 0
   12eee:	8b e0       	ldi	r24, 0x0B	; 11
   12ef0:	90 e0       	ldi	r25, 0x00	; 0
   12ef2:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <safecalloc>
   12ef6:	f8 01       	movw	r30, r16
   12ef8:	90 a7       	std	Z+40, r25	; 0x28
   12efa:	87 a3       	std	Z+39, r24	; 0x27
   12efc:	12 a6       	std	Z+42, r1	; 0x2a
   12efe:	11 a6       	std	Z+41, r1	; 0x29
   12f00:	55 c0       	rjmp	.+170    	; 0x12fac <alloc_device+0x170>
   12f02:	8b e2       	ldi	r24, 0x2B	; 43
   12f04:	8c 9f       	mul	r24, r28
   12f06:	80 01       	movw	r16, r0
   12f08:	8d 9f       	mul	r24, r29
   12f0a:	10 0d       	add	r17, r0
   12f0c:	11 24       	eor	r1, r1
   12f0e:	02 5f       	subi	r16, 0xF2	; 242
   12f10:	10 4e       	sbci	r17, 0xE0	; 224
   12f12:	82 e0       	ldi	r24, 0x02	; 2
   12f14:	f8 01       	movw	r30, r16
   12f16:	80 83       	st	Z, r24
   12f18:	61 e0       	ldi	r22, 0x01	; 1
   12f1a:	70 e0       	ldi	r23, 0x00	; 0
   12f1c:	82 e3       	ldi	r24, 0x32	; 50
   12f1e:	90 e0       	ldi	r25, 0x00	; 0
   12f20:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <safecalloc>
   12f24:	f8 01       	movw	r30, r16
   12f26:	90 a7       	std	Z+40, r25	; 0x28
   12f28:	87 a3       	std	Z+39, r24	; 0x27
   12f2a:	61 e0       	ldi	r22, 0x01	; 1
   12f2c:	70 e0       	ldi	r23, 0x00	; 0
   12f2e:	86 e1       	ldi	r24, 0x16	; 22
   12f30:	90 e0       	ldi	r25, 0x00	; 0
   12f32:	20 c0       	rjmp	.+64     	; 0x12f74 <alloc_device+0x138>
   12f34:	8b e2       	ldi	r24, 0x2B	; 43
   12f36:	8c 9f       	mul	r24, r28
   12f38:	80 01       	movw	r16, r0
   12f3a:	8d 9f       	mul	r24, r29
   12f3c:	10 0d       	add	r17, r0
   12f3e:	11 24       	eor	r1, r1
   12f40:	02 5f       	subi	r16, 0xF2	; 242
   12f42:	10 4e       	sbci	r17, 0xE0	; 224
   12f44:	83 e0       	ldi	r24, 0x03	; 3
   12f46:	f8 01       	movw	r30, r16
   12f48:	80 83       	st	Z, r24
   12f4a:	61 e0       	ldi	r22, 0x01	; 1
   12f4c:	70 e0       	ldi	r23, 0x00	; 0
   12f4e:	82 e3       	ldi	r24, 0x32	; 50
   12f50:	90 e0       	ldi	r25, 0x00	; 0
   12f52:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <safecalloc>
   12f56:	f8 01       	movw	r30, r16
   12f58:	90 a7       	std	Z+40, r25	; 0x28
   12f5a:	87 a3       	std	Z+39, r24	; 0x27
   12f5c:	61 e0       	ldi	r22, 0x01	; 1
   12f5e:	70 e0       	ldi	r23, 0x00	; 0
   12f60:	86 e1       	ldi	r24, 0x16	; 22
   12f62:	90 e0       	ldi	r25, 0x00	; 0
   12f64:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <safecalloc>
   12f68:	f8 01       	movw	r30, r16
   12f6a:	92 a7       	std	Z+42, r25	; 0x2a
   12f6c:	81 a7       	std	Z+41, r24	; 0x29
   12f6e:	ce 01       	movw	r24, r28
   12f70:	eb de       	rcall	.-554    	; 0x12d48 <SS80_Set_Defaults>
   12f72:	1c c0       	rjmp	.+56     	; 0x12fac <alloc_device+0x170>
   12f74:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <safecalloc>
   12f78:	f8 01       	movw	r30, r16
   12f7a:	92 a7       	std	Z+42, r25	; 0x2a
   12f7c:	81 a7       	std	Z+41, r24	; 0x29
   12f7e:	16 c0       	rjmp	.+44     	; 0x12fac <alloc_device+0x170>
   12f80:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   12f84:	80 ff       	sbrs	r24, 0
   12f86:	10 c0       	rjmp	.+32     	; 0x12fa8 <alloc_device+0x16c>
   12f88:	c8 01       	movw	r24, r16
   12f8a:	b4 dd       	rcall	.-1176   	; 0x12af4 <type_to_str>
   12f8c:	ed b7       	in	r30, 0x3d	; 61
   12f8e:	fe b7       	in	r31, 0x3e	; 62
   12f90:	97 83       	std	Z+7, r25	; 0x07
   12f92:	86 83       	std	Z+6, r24	; 0x06
   12f94:	15 83       	std	Z+5, r17	; 0x05
   12f96:	04 83       	std	Z+4, r16	; 0x04
   12f98:	81 e6       	ldi	r24, 0x61	; 97
   12f9a:	97 e1       	ldi	r25, 0x17	; 23
   12f9c:	a0 e0       	ldi	r26, 0x00	; 0
   12f9e:	81 83       	std	Z+1, r24	; 0x01
   12fa0:	92 83       	std	Z+2, r25	; 0x02
   12fa2:	a3 83       	std	Z+3, r26	; 0x03
   12fa4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   12fa8:	cf ef       	ldi	r28, 0xFF	; 255
   12faa:	df ef       	ldi	r29, 0xFF	; 255
   12fac:	ce 01       	movw	r24, r28
   12fae:	cd b7       	in	r28, 0x3d	; 61
   12fb0:	de b7       	in	r29, 0x3e	; 62
   12fb2:	27 96       	adiw	r28, 0x07	; 7
   12fb4:	e4 e0       	ldi	r30, 0x04	; 4
   12fb6:	0c 94 02 e1 	jmp	0x1c204	; 0x1c204 <__epilogue_restores__+0x1c>

00012fba <init_Devices>:
   12fba:	cf 93       	push	r28
   12fbc:	df 93       	push	r29
   12fbe:	10 92 92 19 	sts	0x1992, r1	; 0x801992 <stack_ind+0x1>
   12fc2:	10 92 91 19 	sts	0x1991, r1	; 0x801991 <stack_ind>
   12fc6:	ee e0       	ldi	r30, 0x0E	; 14
   12fc8:	ff e1       	ldi	r31, 0x1F	; 31
   12fca:	9f ef       	ldi	r25, 0xFF	; 255
   12fcc:	80 e2       	ldi	r24, 0x20	; 32
   12fce:	10 82       	st	Z, r1
   12fd0:	11 82       	std	Z+1, r1	; 0x01
   12fd2:	92 83       	std	Z+2, r25	; 0x02
   12fd4:	13 82       	std	Z+3, r1	; 0x03
   12fd6:	14 82       	std	Z+4, r1	; 0x04
   12fd8:	15 82       	std	Z+5, r1	; 0x05
   12fda:	16 82       	std	Z+6, r1	; 0x06
   12fdc:	df 01       	movw	r26, r30
   12fde:	17 96       	adiw	r26, 0x07	; 7
   12fe0:	ed 01       	movw	r28, r26
   12fe2:	28 2f       	mov	r18, r24
   12fe4:	19 92       	st	Y+, r1
   12fe6:	2a 95       	dec	r18
   12fe8:	e9 f7       	brne	.-6      	; 0x12fe4 <init_Devices+0x2a>
   12fea:	10 a6       	std	Z+40, r1	; 0x28
   12fec:	17 a2       	std	Z+39, r1	; 0x27
   12fee:	12 a6       	std	Z+42, r1	; 0x2a
   12ff0:	11 a6       	std	Z+41, r1	; 0x29
   12ff2:	bb 96       	adiw	r30, 0x2b	; 43
   12ff4:	c1 e2       	ldi	r28, 0x21	; 33
   12ff6:	e2 31       	cpi	r30, 0x12	; 18
   12ff8:	fc 07       	cpc	r31, r28
   12ffa:	49 f7       	brne	.-46     	; 0x12fce <init_Devices+0x14>
   12ffc:	df 91       	pop	r29
   12ffe:	cf 91       	pop	r28
   13000:	08 95       	ret

00013002 <push_state>:
   13002:	20 91 91 19 	lds	r18, 0x1991	; 0x801991 <stack_ind>
   13006:	30 91 92 19 	lds	r19, 0x1992	; 0x801992 <stack_ind+0x1>
   1300a:	25 30       	cpi	r18, 0x05	; 5
   1300c:	31 05       	cpc	r19, r1
   1300e:	7c f4       	brge	.+30     	; 0x1302e <push_state+0x2c>
   13010:	a9 01       	movw	r20, r18
   13012:	4f 5f       	subi	r20, 0xFF	; 255
   13014:	5f 4f       	sbci	r21, 0xFF	; 255
   13016:	50 93 92 19 	sts	0x1992, r21	; 0x801992 <stack_ind+0x1>
   1301a:	40 93 91 19 	sts	0x1991, r20	; 0x801991 <stack_ind>
   1301e:	22 0f       	add	r18, r18
   13020:	33 1f       	adc	r19, r19
   13022:	f9 01       	movw	r30, r18
   13024:	e9 57       	subi	r30, 0x79	; 121
   13026:	f6 4e       	sbci	r31, 0xE6	; 230
   13028:	80 83       	st	Z, r24
   1302a:	91 83       	std	Z+1, r25	; 0x01
   1302c:	08 95       	ret
   1302e:	80 e0       	ldi	r24, 0x00	; 0
   13030:	90 e0       	ldi	r25, 0x00	; 0
   13032:	08 95       	ret

00013034 <pop_state>:
   13034:	80 91 91 19 	lds	r24, 0x1991	; 0x801991 <stack_ind>
   13038:	90 91 92 19 	lds	r25, 0x1992	; 0x801992 <stack_ind+0x1>
   1303c:	18 16       	cp	r1, r24
   1303e:	19 06       	cpc	r1, r25
   13040:	6c f4       	brge	.+26     	; 0x1305c <pop_state+0x28>
   13042:	01 97       	sbiw	r24, 0x01	; 1
   13044:	90 93 92 19 	sts	0x1992, r25	; 0x801992 <stack_ind+0x1>
   13048:	80 93 91 19 	sts	0x1991, r24	; 0x801991 <stack_ind>
   1304c:	88 0f       	add	r24, r24
   1304e:	99 1f       	adc	r25, r25
   13050:	fc 01       	movw	r30, r24
   13052:	e9 57       	subi	r30, 0x79	; 121
   13054:	f6 4e       	sbci	r31, 0xE6	; 230
   13056:	80 81       	ld	r24, Z
   13058:	91 81       	ldd	r25, Z+1	; 0x01
   1305a:	08 95       	ret
   1305c:	80 e0       	ldi	r24, 0x00	; 0
   1305e:	90 e0       	ldi	r25, 0x00	; 0
   13060:	08 95       	ret

00013062 <set_Config_Defaults>:
/// ===============================================
///@brief Set Defaults for any missing disk or printer devices
/// These are only used if the Config file omits them or is empty
/// @return  void
void set_Config_Defaults()
{
   13062:	08 95       	ret

00013064 <hpdir_set_device>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
void hpdir_set_device(int index)
{
   13064:	0f 93       	push	r16
   13066:	1f 93       	push	r17
   13068:	cf 93       	push	r28
   1306a:	df 93       	push	r29
   1306c:	00 d0       	rcall	.+0      	; 0x1306e <hpdir_set_device+0xa>
   1306e:	1f 92       	push	r1
    if(Devices[index].TYPE == SS80_TYPE)
   13070:	2b e2       	ldi	r18, 0x2B	; 43
   13072:	ac 01       	movw	r20, r24
   13074:	24 9f       	mul	r18, r20
   13076:	c0 01       	movw	r24, r0
   13078:	25 9f       	mul	r18, r21
   1307a:	90 0d       	add	r25, r0
   1307c:	11 24       	eor	r1, r1
   1307e:	ec 01       	movw	r28, r24
   13080:	c2 5f       	subi	r28, 0xF2	; 242
   13082:	d0 4e       	sbci	r29, 0xE0	; 224
   13084:	28 81       	ld	r18, Y
   13086:	23 30       	cpi	r18, 0x03	; 3
   13088:	a1 f5       	brne	.+104    	; 0x130f2 <hpdir_set_device+0x8e>
    {
        SS80DiskType *SS80p = (SS80DiskType *) Devices[index].dev;
   1308a:	ef a1       	ldd	r30, Y+39	; 0x27
   1308c:	f8 a5       	ldd	r31, Y+40	; 0x28
        SS80p->CONFIG.ID                = hpdir.ID;
   1308e:	20 91 92 21 	lds	r18, 0x2192	; 0x802192 <hpdir+0x80>
   13092:	30 91 93 21 	lds	r19, 0x2193	; 0x802193 <hpdir+0x81>
   13096:	35 83       	std	Z+5, r19	; 0x05
   13098:	24 83       	std	Z+4, r18	; 0x04
        SS80p->UNIT.DEVICE_NUMBER       = hpdir.DEVICE_NUMBER;
   1309a:	40 91 9e 21 	lds	r20, 0x219E	; 0x80219e <hpdir+0x8c>
   1309e:	50 91 9f 21 	lds	r21, 0x219F	; 0x80219f <hpdir+0x8d>
   130a2:	60 91 a0 21 	lds	r22, 0x21A0	; 0x8021a0 <hpdir+0x8e>
   130a6:	70 91 a1 21 	lds	r23, 0x21A1	; 0x8021a1 <hpdir+0x8f>
   130aa:	44 87       	std	Z+12, r20	; 0x0c
   130ac:	55 87       	std	Z+13, r21	; 0x0d
   130ae:	66 87       	std	Z+14, r22	; 0x0e
   130b0:	77 87       	std	Z+15, r23	; 0x0f
        SS80p->UNIT.BYTES_PER_BLOCK     = hpdir.BYTES_PER_SECTOR;
   130b2:	20 91 b2 21 	lds	r18, 0x21B2	; 0x8021b2 <hpdir+0xa0>
   130b6:	30 91 b3 21 	lds	r19, 0x21B3	; 0x8021b3 <hpdir+0xa1>
   130ba:	31 8b       	std	Z+17, r19	; 0x11
   130bc:	20 8b       	std	Z+16, r18	; 0x10

// CHS NOT used in this emulator!
        SS80p->VOLUME.MAX_CYLINDER      = 0;      // hpdir.CYLINDERS-1;
   130be:	17 8e       	std	Z+31, r1	; 0x1f
   130c0:	10 a2       	std	Z+32, r1	; 0x20
   130c2:	11 a2       	std	Z+33, r1	; 0x21
   130c4:	12 a2       	std	Z+34, r1	; 0x22
        SS80p->VOLUME.MAX_HEAD          = 0;      // hpdir.HEADS-1;
   130c6:	13 a2       	std	Z+35, r1	; 0x23
        SS80p->VOLUME.MAX_SECTOR        = 0;      // hpdir.SECTORS-1;
   130c8:	15 a2       	std	Z+37, r1	; 0x25
   130ca:	14 a2       	std	Z+36, r1	; 0x24

        SS80p->VOLUME.MAX_BLOCK_NUMBER  = hpdir.BLOCKS-1;
   130cc:	40 91 be 21 	lds	r20, 0x21BE	; 0x8021be <hpdir+0xac>
   130d0:	50 91 bf 21 	lds	r21, 0x21BF	; 0x8021bf <hpdir+0xad>
   130d4:	60 91 c0 21 	lds	r22, 0x21C0	; 0x8021c0 <hpdir+0xae>
   130d8:	70 91 c1 21 	lds	r23, 0x21C1	; 0x8021c1 <hpdir+0xaf>
   130dc:	8a 01       	movw	r16, r20
   130de:	9b 01       	movw	r18, r22
   130e0:	01 50       	subi	r16, 0x01	; 1
   130e2:	11 09       	sbc	r17, r1
   130e4:	21 09       	sbc	r18, r1
   130e6:	31 09       	sbc	r19, r1
   130e8:	06 a3       	std	Z+38, r16	; 0x26
   130ea:	17 a3       	std	Z+39, r17	; 0x27
   130ec:	20 a7       	std	Z+40, r18	; 0x28
   130ee:	31 a7       	std	Z+41, r19	; 0x29
   130f0:	2a c0       	rjmp	.+84     	; 0x13146 <hpdir_set_device+0xe2>
        Devices[index].BLOCKS = hpdir.BLOCKS;
        strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
    }

#ifdef AMIGO
    else if(Devices[index].TYPE == AMIGO_TYPE)
   130f2:	21 30       	cpi	r18, 0x01	; 1
   130f4:	a9 f5       	brne	.+106    	; 0x13160 <hpdir_set_device+0xfc>
    {
        AMIGODiskType *AMIGOp = (AMIGODiskType *) Devices[index].dev;
   130f6:	ef a1       	ldd	r30, Y+39	; 0x27
   130f8:	f8 a5       	ldd	r31, Y+40	; 0x28
        AMIGOp->CONFIG.ID = hpdir.ID;
   130fa:	20 91 92 21 	lds	r18, 0x2192	; 0x802192 <hpdir+0x80>
   130fe:	30 91 93 21 	lds	r19, 0x2193	; 0x802193 <hpdir+0x81>
   13102:	35 83       	std	Z+5, r19	; 0x05
   13104:	24 83       	std	Z+4, r18	; 0x04
        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = hpdir.BYTES_PER_SECTOR;
   13106:	20 91 b2 21 	lds	r18, 0x21B2	; 0x8021b2 <hpdir+0xa0>
   1310a:	30 91 b3 21 	lds	r19, 0x21B3	; 0x8021b3 <hpdir+0xa1>
   1310e:	37 83       	std	Z+7, r19	; 0x07
   13110:	26 83       	std	Z+6, r18	; 0x06
        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = hpdir.SECTORS;
   13112:	20 91 ae 21 	lds	r18, 0x21AE	; 0x8021ae <hpdir+0x9c>
   13116:	30 91 af 21 	lds	r19, 0x21AF	; 0x8021af <hpdir+0x9d>
   1311a:	31 87       	std	Z+9, r19	; 0x09
   1311c:	20 87       	std	Z+8, r18	; 0x08
        AMIGOp->GEOMETRY.HEADS = hpdir.HEADS;
   1311e:	20 91 aa 21 	lds	r18, 0x21AA	; 0x8021aa <hpdir+0x98>
   13122:	30 91 ab 21 	lds	r19, 0x21AB	; 0x8021ab <hpdir+0x99>
   13126:	33 87       	std	Z+11, r19	; 0x0b
   13128:	22 87       	std	Z+10, r18	; 0x0a
        AMIGOp->GEOMETRY.CYLINDERS = hpdir.CYLINDERS;
   1312a:	20 91 a6 21 	lds	r18, 0x21A6	; 0x8021a6 <hpdir+0x94>
   1312e:	30 91 a7 21 	lds	r19, 0x21A7	; 0x8021a7 <hpdir+0x95>
   13132:	35 87       	std	Z+13, r19	; 0x0d
   13134:	24 87       	std	Z+12, r18	; 0x0c
        Devices[index].BLOCKS = hpdir.BLOCKS;
   13136:	40 91 be 21 	lds	r20, 0x21BE	; 0x8021be <hpdir+0xac>
   1313a:	50 91 bf 21 	lds	r21, 0x21BF	; 0x8021bf <hpdir+0xad>
   1313e:	60 91 c0 21 	lds	r22, 0x21C0	; 0x8021c0 <hpdir+0xae>
   13142:	70 91 c1 21 	lds	r23, 0x21C1	; 0x8021c1 <hpdir+0xaf>
   13146:	4b 83       	std	Y+3, r20	; 0x03
   13148:	5c 83       	std	Y+4, r21	; 0x04
   1314a:	6d 83       	std	Y+5, r22	; 0x05
   1314c:	7e 83       	std	Y+6, r23	; 0x06
        strncpy(Devices[index].model, hpdir.model, sizeof(Devices[index].model) -2);
   1314e:	4e e1       	ldi	r20, 0x1E	; 30
   13150:	50 e0       	ldi	r21, 0x00	; 0
   13152:	62 e1       	ldi	r22, 0x12	; 18
   13154:	71 e2       	ldi	r23, 0x21	; 33
   13156:	8b 5e       	subi	r24, 0xEB	; 235
   13158:	90 4e       	sbci	r25, 0xE0	; 224
   1315a:	0e 94 8f 2e 	call	0x5d1e	; 0x5d1e <strncpy>
   1315e:	0a c0       	rjmp	.+20     	; 0x13174 <hpdir_set_device+0x110>
    }
#endif
    else
    {
        printf("hpdir_parameters invalid TYPE\n");
   13160:	82 e4       	ldi	r24, 0x42	; 66
   13162:	97 e1       	ldi	r25, 0x17	; 23
   13164:	a0 e0       	ldi	r26, 0x00	; 0
   13166:	ed b7       	in	r30, 0x3d	; 61
   13168:	fe b7       	in	r31, 0x3e	; 62
   1316a:	81 83       	std	Z+1, r24	; 0x01
   1316c:	92 83       	std	Z+2, r25	; 0x02
   1316e:	a3 83       	std	Z+3, r26	; 0x03
   13170:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    }

}
   13174:	cd b7       	in	r28, 0x3d	; 61
   13176:	de b7       	in	r29, 0x3e	; 62
   13178:	23 96       	adiw	r28, 0x03	; 3
   1317a:	e4 e0       	ldi	r30, 0x04	; 4
   1317c:	0c 94 02 e1 	jmp	0x1c204	; 0x1c204 <__epilogue_restores__+0x1c>

00013180 <hpdir_set_parameters>:
///@param[in] index: Devices index
///@param[in] model: model string
///
///@return void
void hpdir_set_parameters(int index, char *model)
{
   13180:	cf 93       	push	r28
   13182:	df 93       	push	r29
   13184:	ec 01       	movw	r28, r24
   13186:	cb 01       	movw	r24, r22
    if ( hpdir_find_drive( model, 0 ,1) )
   13188:	41 e0       	ldi	r20, 0x01	; 1
   1318a:	50 e0       	ldi	r21, 0x00	; 0
   1318c:	60 e0       	ldi	r22, 0x00	; 0
   1318e:	70 e0       	ldi	r23, 0x00	; 0
   13190:	d9 d6       	rcall	.+3506   	; 0x13f44 <hpdir_find_drive>
   13192:	89 2b       	or	r24, r25
   13194:	11 f0       	breq	.+4      	; 0x1319a <hpdir_set_parameters+0x1a>
        hpdir_set_device(index);
   13196:	ce 01       	movw	r24, r28
   13198:	65 df       	rcall	.-310    	; 0x13064 <hpdir_set_device>
}
   1319a:	df 91       	pop	r29
   1319c:	cf 91       	pop	r28
   1319e:	08 95       	ret

000131a0 <Post_Config>:

/// ===============================================
/// @brief Post Process COnfiguration file after reading
/// @return  void
void Post_Config()
{
   131a0:	4f 92       	push	r4
   131a2:	5f 92       	push	r5
   131a4:	6f 92       	push	r6
   131a6:	7f 92       	push	r7
   131a8:	8f 92       	push	r8
   131aa:	af 92       	push	r10
   131ac:	bf 92       	push	r11
   131ae:	cf 92       	push	r12
   131b0:	df 92       	push	r13
   131b2:	ef 92       	push	r14
   131b4:	0f 93       	push	r16
   131b6:	1f 93       	push	r17
   131b8:	cf 93       	push	r28
   131ba:	df 93       	push	r29
   131bc:	00 d0       	rcall	.+0      	; 0x131be <Post_Config+0x1e>
   131be:	00 d0       	rcall	.+0      	; 0x131c0 <Post_Config+0x20>
   131c0:	1f 92       	push	r1
   131c2:	ce e0       	ldi	r28, 0x0E	; 14
   131c4:	df e1       	ldi	r29, 0x1F	; 31
   131c6:	82 e1       	ldi	r24, 0x12	; 18
   131c8:	48 2e       	mov	r4, r24
   131ca:	81 e2       	ldi	r24, 0x21	; 33
   131cc:	58 2e       	mov	r5, r24
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
            if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
            {
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   131ce:	a1 2c       	mov	r10, r1
   131d0:	bb 24       	eor	r11, r11
   131d2:	b3 94       	inc	r11
                printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   131d4:	85 ed       	ldi	r24, 0xD5	; 213
   131d6:	96 e1       	ldi	r25, 0x16	; 22
   131d8:	6c 01       	movw	r12, r24
   131da:	e1 2c       	mov	r14, r1
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
            if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
            {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
                printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   131dc:	8c e0       	ldi	r24, 0x0C	; 12
   131de:	97 e1       	ldi	r25, 0x17	; 23
   131e0:	3c 01       	movw	r6, r24
   131e2:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   131e4:	88 81       	ld	r24, Y
   131e6:	88 23       	and	r24, r24
   131e8:	09 f4       	brne	.+2      	; 0x131ec <Post_Config+0x4c>
   131ea:	57 c0       	rjmp	.+174    	; 0x1329a <Post_Config+0xfa>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   131ec:	83 30       	cpi	r24, 0x03	; 3
   131ee:	f9 f4       	brne	.+62     	; 0x1322e <Post_Config+0x8e>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   131f0:	0f a1       	ldd	r16, Y+39	; 0x27
   131f2:	18 a5       	ldd	r17, Y+40	; 0x28
            if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   131f4:	f8 01       	movw	r30, r16
   131f6:	80 89       	ldd	r24, Z+16	; 0x10
   131f8:	91 89       	ldd	r25, Z+17	; 0x11
   131fa:	81 15       	cp	r24, r1
   131fc:	91 40       	sbci	r25, 0x01	; 1
   131fe:	59 f0       	breq	.+22     	; 0x13216 <Post_Config+0x76>
            {
// SS80p->UNIT.BYTES_PER_BLOCK = 256;
                printf("Warning: %s BYTES_PER_BLOCK != 256, Adjusting to 256\n", Devices[i].model);
   13200:	ce 01       	movw	r24, r28
   13202:	07 96       	adiw	r24, 0x07	; 7
   13204:	ed b7       	in	r30, 0x3d	; 61
   13206:	fe b7       	in	r31, 0x3e	; 62
   13208:	95 83       	std	Z+5, r25	; 0x05
   1320a:	84 83       	std	Z+4, r24	; 0x04
   1320c:	61 82       	std	Z+1, r6	; 0x01
   1320e:	72 82       	std	Z+2, r7	; 0x02
   13210:	83 82       	std	Z+3, r8	; 0x03
   13212:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            }
            sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER+1;
            Devices[i].BLOCKS = sectors;
   13216:	f8 01       	movw	r30, r16
   13218:	86 a1       	ldd	r24, Z+38	; 0x26
   1321a:	97 a1       	ldd	r25, Z+39	; 0x27
   1321c:	a0 a5       	ldd	r26, Z+40	; 0x28
   1321e:	b1 a5       	ldd	r27, Z+41	; 0x29
   13220:	01 96       	adiw	r24, 0x01	; 1
   13222:	a1 1d       	adc	r26, r1
   13224:	b1 1d       	adc	r27, r1
   13226:	8b 83       	std	Y+3, r24	; 0x03
   13228:	9c 83       	std	Y+4, r25	; 0x04
   1322a:	ad 83       	std	Y+5, r26	; 0x05
   1322c:	be 83       	std	Y+6, r27	; 0x06
        }                                         // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   1322e:	88 81       	ld	r24, Y
   13230:	81 30       	cpi	r24, 0x01	; 1
   13232:	99 f5       	brne	.+102    	; 0x1329a <Post_Config+0xfa>
        {
            AMIGOp = (AMIGODiskType *)Devices[i].dev;
   13234:	0f a1       	ldd	r16, Y+39	; 0x27
   13236:	18 a5       	ldd	r17, Y+40	; 0x28
            if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   13238:	f8 01       	movw	r30, r16
   1323a:	86 81       	ldd	r24, Z+6	; 0x06
   1323c:	97 81       	ldd	r25, Z+7	; 0x07
   1323e:	81 15       	cp	r24, r1
   13240:	91 40       	sbci	r25, 0x01	; 1
   13242:	71 f0       	breq	.+28     	; 0x13260 <Post_Config+0xc0>
            {
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = 256;
   13244:	f8 01       	movw	r30, r16
   13246:	b7 82       	std	Z+7, r11	; 0x07
   13248:	a6 82       	std	Z+6, r10	; 0x06
                printf("Warning: %s BYTES_PER_SECTOR != 256, Adjusting to 256\n", Devices[i].model);
   1324a:	ce 01       	movw	r24, r28
   1324c:	07 96       	adiw	r24, 0x07	; 7
   1324e:	ed b7       	in	r30, 0x3d	; 61
   13250:	fe b7       	in	r31, 0x3e	; 62
   13252:	95 83       	std	Z+5, r25	; 0x05
   13254:	84 83       	std	Z+4, r24	; 0x04
   13256:	c1 82       	std	Z+1, r12	; 0x01
   13258:	d2 82       	std	Z+2, r13	; 0x02
   1325a:	e3 82       	std	Z+3, r14	; 0x03
   1325c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            }
            sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
                * AMIGOp->GEOMETRY.HEADS
                * AMIGOp->GEOMETRY.CYLINDERS;
            Devices[i].BLOCKS = sectors;
   13260:	f8 01       	movw	r30, r16
   13262:	20 85       	ldd	r18, Z+8	; 0x08
   13264:	31 85       	ldd	r19, Z+9	; 0x09
   13266:	82 85       	ldd	r24, Z+10	; 0x0a
   13268:	93 85       	ldd	r25, Z+11	; 0x0b
   1326a:	28 9f       	mul	r18, r24
   1326c:	a0 01       	movw	r20, r0
   1326e:	29 9f       	mul	r18, r25
   13270:	50 0d       	add	r21, r0
   13272:	38 9f       	mul	r19, r24
   13274:	50 0d       	add	r21, r0
   13276:	11 24       	eor	r1, r1
   13278:	24 85       	ldd	r18, Z+12	; 0x0c
   1327a:	35 85       	ldd	r19, Z+13	; 0x0d
   1327c:	42 9f       	mul	r20, r18
   1327e:	c0 01       	movw	r24, r0
   13280:	43 9f       	mul	r20, r19
   13282:	90 0d       	add	r25, r0
   13284:	52 9f       	mul	r21, r18
   13286:	90 0d       	add	r25, r0
   13288:	11 24       	eor	r1, r1
   1328a:	09 2e       	mov	r0, r25
   1328c:	00 0c       	add	r0, r0
   1328e:	aa 0b       	sbc	r26, r26
   13290:	bb 0b       	sbc	r27, r27
   13292:	8b 83       	std	Y+3, r24	; 0x03
   13294:	9c 83       	std	Y+4, r25	; 0x04
   13296:	ad 83       	std	Y+5, r26	; 0x05
   13298:	be 83       	std	Y+6, r27	; 0x06
   1329a:	ab 96       	adiw	r28, 0x2b	; 43
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   1329c:	4c 16       	cp	r4, r28
   1329e:	5d 06       	cpc	r5, r29
   132a0:	09 f0       	breq	.+2      	; 0x132a4 <Post_Config+0x104>
   132a2:	a0 cf       	rjmp	.-192    	; 0x131e4 <Post_Config+0x44>
                * AMIGOp->GEOMETRY.CYLINDERS;
            Devices[i].BLOCKS = sectors;
        }
#endif                                    // #ifdef AMIGO
    }
}
   132a4:	0f 90       	pop	r0
   132a6:	0f 90       	pop	r0
   132a8:	0f 90       	pop	r0
   132aa:	0f 90       	pop	r0
   132ac:	0f 90       	pop	r0
   132ae:	df 91       	pop	r29
   132b0:	cf 91       	pop	r28
   132b2:	1f 91       	pop	r17
   132b4:	0f 91       	pop	r16
   132b6:	ef 90       	pop	r14
   132b8:	df 90       	pop	r13
   132ba:	cf 90       	pop	r12
   132bc:	bf 90       	pop	r11
   132be:	af 90       	pop	r10
   132c0:	8f 90       	pop	r8
   132c2:	7f 90       	pop	r7
   132c4:	6f 90       	pop	r6
   132c6:	5f 90       	pop	r5
   132c8:	4f 90       	pop	r4
   132ca:	08 95       	ret

000132cc <Read_Config>:
/// Set all drive parameters and debuglevel
///
/// @param name: config file name to process
/// @return  number of parse errors
int Read_Config(char *name)
{
   132cc:	af e1       	ldi	r26, 0x1F	; 31
   132ce:	b1 e0       	ldi	r27, 0x01	; 1
   132d0:	ec e6       	ldi	r30, 0x6C	; 108
   132d2:	f9 e9       	ldi	r31, 0x99	; 153
   132d4:	0c 94 d8 e0 	jmp	0x1c1b0	; 0x1c1b0 <__prologue_saves__>
   132d8:	8c 01       	movw	r16, r24
    int lines = 0;

    char str[128];
    char token[128];

    init_Devices();
   132da:	6f de       	rcall	.-802    	; 0x12fba <init_Devices>

    printf("Reading: %s\n", name);
   132dc:	ed b7       	in	r30, 0x3d	; 61
   132de:	fe b7       	in	r31, 0x3e	; 62
   132e0:	15 83       	std	Z+5, r17	; 0x05
   132e2:	04 83       	std	Z+4, r16	; 0x04
   132e4:	88 eb       	ldi	r24, 0xB8	; 184
   132e6:	9c e1       	ldi	r25, 0x1C	; 28
   132e8:	a0 e0       	ldi	r26, 0x00	; 0
   132ea:	81 83       	std	Z+1, r24	; 0x01
   132ec:	92 83       	std	Z+2, r25	; 0x02
   132ee:	a3 83       	std	Z+3, r26	; 0x03
   132f0:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    cfg = fopen(name, "rb");
   132f4:	6e ef       	ldi	r22, 0xFE	; 254
   132f6:	78 e0       	ldi	r23, 0x08	; 8
   132f8:	c8 01       	movw	r24, r16
   132fa:	0e 94 87 7c 	call	0xf90e	; 0xf90e <fopen>
   132fe:	c4 5f       	subi	r28, 0xF4	; 244
   13300:	de 4f       	sbci	r29, 0xFE	; 254
   13302:	99 83       	std	Y+1, r25	; 0x01
   13304:	88 83       	st	Y, r24
   13306:	cc 50       	subi	r28, 0x0C	; 12
   13308:	d1 40       	sbci	r29, 0x01	; 1
    if(cfg == NULL)
   1330a:	89 2b       	or	r24, r25
   1330c:	09 f4       	brne	.+2      	; 0x13310 <Read_Config+0x44>
   1330e:	59 c0       	rjmp	.+178    	; 0x133c2 <Read_Config+0xf6>
   13310:	41 2c       	mov	r4, r1
   13312:	51 2c       	mov	r5, r1
   13314:	c1 2c       	mov	r12, r1
   13316:	d1 2c       	mov	r13, r1
   13318:	c8 5f       	subi	r28, 0xF8	; 248
   1331a:	de 4f       	sbci	r29, 0xFE	; 254
   1331c:	19 82       	std	Y+1, r1	; 0x01
   1331e:	18 82       	st	Y, r1
   13320:	c8 50       	subi	r28, 0x08	; 8
   13322:	d1 40       	sbci	r29, 0x01	; 1
   13324:	61 2c       	mov	r6, r1
   13326:	71 2c       	mov	r7, r1
   13328:	c6 5f       	subi	r28, 0xF6	; 246
   1332a:	de 4f       	sbci	r29, 0xFE	; 254
   1332c:	19 82       	std	Y+1, r1	; 0x01
   1332e:	18 82       	st	Y, r1
   13330:	ca 50       	subi	r28, 0x0A	; 10
   13332:	d1 40       	sbci	r29, 0x01	; 1
   13334:	e1 2c       	mov	r14, r1
   13336:	f1 2c       	mov	r15, r1
   13338:	21 2c       	mov	r2, r1
   1333a:	31 2c       	mov	r3, r1
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   1333c:	87 e0       	ldi	r24, 0x07	; 7
   1333e:	9a e1       	ldi	r25, 0x1A	; 26
   13340:	9c 01       	movw	r18, r24
   13342:	40 e0       	ldi	r20, 0x00	; 0
   13344:	c2 5f       	subi	r28, 0xF2	; 242
   13346:	de 4f       	sbci	r29, 0xFE	; 254
   13348:	28 83       	st	Y, r18
   1334a:	39 83       	std	Y+1, r19	; 0x01
   1334c:	4a 83       	std	Y+2, r20	; 0x02
   1334e:	ce 50       	subi	r28, 0x0E	; 14
   13350:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
                        break;
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13352:	89 e2       	ldi	r24, 0x29	; 41
   13354:	9a e1       	ldi	r25, 0x1A	; 26
   13356:	9c 01       	movw	r18, r24
   13358:	40 e0       	ldi	r20, 0x00	; 0
   1335a:	cf 5e       	subi	r28, 0xEF	; 239
   1335c:	de 4f       	sbci	r29, 0xFE	; 254
   1335e:	28 83       	st	Y, r18
   13360:	39 83       	std	Y+1, r19	; 0x01
   13362:	4a 83       	std	Y+2, r20	; 0x02
   13364:	c1 51       	subi	r28, 0x11	; 17
   13366:	d1 40       	sbci	r29, 0x01	; 1
                {
                    AMIGOp->CONFIG.ID = val.w;
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   13368:	89 e5       	ldi	r24, 0x59	; 89
   1336a:	9a e1       	ldi	r25, 0x1A	; 26
   1336c:	9c 01       	movw	r18, r24
   1336e:	40 e0       	ldi	r20, 0x00	; 0
   13370:	cc 5e       	subi	r28, 0xEC	; 236
   13372:	de 4f       	sbci	r29, 0xFE	; 254
   13374:	28 83       	st	Y, r18
   13376:	39 83       	std	Y+1, r19	; 0x01
   13378:	4a 83       	std	Y+2, r20	; 0x02
   1337a:	c4 51       	subi	r28, 0x14	; 20
   1337c:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
                        break;
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   1337e:	88 e8       	ldi	r24, 0x88	; 136
   13380:	9a e1       	ldi	r25, 0x1A	; 26
   13382:	9c 01       	movw	r18, r24
   13384:	40 e0       	ldi	r20, 0x00	; 0
   13386:	c9 5e       	subi	r28, 0xE9	; 233
   13388:	de 4f       	sbci	r29, 0xFE	; 254
   1338a:	28 83       	st	Y, r18
   1338c:	39 83       	std	Y+1, r19	; 0x01
   1338e:	4a 83       	std	Y+2, r20	; 0x02
   13390:	c7 51       	subi	r28, 0x17	; 23
   13392:	d1 40       	sbci	r29, 0x01	; 1
                    case TOK_GEOMETRY:
                        push_state(state);
                        state = AMIGO_GEOMETRY;
                        break;
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   13394:	88 eb       	ldi	r24, 0xB8	; 184
   13396:	9a e1       	ldi	r25, 0x1A	; 26
   13398:	9c 01       	movw	r18, r24
   1339a:	40 e0       	ldi	r20, 0x00	; 0
   1339c:	c6 5e       	subi	r28, 0xE6	; 230
   1339e:	de 4f       	sbci	r29, 0xFE	; 254
   133a0:	28 83       	st	Y, r18
   133a2:	39 83       	std	Y+1, r19	; 0x01
   133a4:	4a 83       	std	Y+2, r20	; 0x02
   133a6:	ca 51       	subi	r28, 0x1A	; 26
   133a8:	d1 40       	sbci	r29, 0x01	; 1
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
                        break;
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   133aa:	86 ee       	ldi	r24, 0xE6	; 230
   133ac:	9a e1       	ldi	r25, 0x1A	; 26
   133ae:	9c 01       	movw	r18, r24
   133b0:	40 e0       	ldi	r20, 0x00	; 0
   133b2:	c3 5e       	subi	r28, 0xE3	; 227
   133b4:	de 4f       	sbci	r29, 0xFE	; 254
   133b6:	28 83       	st	Y, r18
   133b8:	39 83       	std	Y+1, r19	; 0x01
   133ba:	4a 83       	std	Y+2, r20	; 0x02
   133bc:	cd 51       	subi	r28, 0x1D	; 29
   133be:	d1 40       	sbci	r29, 0x01	; 1
   133c0:	26 c0       	rjmp	.+76     	; 0x1340e <Read_Config+0x142>
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
//FIXME
        perror("Read_Config - open");
   133c2:	8b e5       	ldi	r24, 0x5B	; 91
   133c4:	9e e0       	ldi	r25, 0x0E	; 14
   133c6:	0e 94 b8 76 	call	0xed70	; 0xed70 <perror>
        printf("Read_Config: open(%s) failed\n", name);
   133ca:	ed b7       	in	r30, 0x3d	; 61
   133cc:	fe b7       	in	r31, 0x3e	; 62
   133ce:	15 83       	std	Z+5, r17	; 0x05
   133d0:	04 83       	std	Z+4, r16	; 0x04
   133d2:	8a e9       	ldi	r24, 0x9A	; 154
   133d4:	9c e1       	ldi	r25, 0x1C	; 28
   133d6:	a0 e0       	ldi	r26, 0x00	; 0
   133d8:	81 83       	std	Z+1, r24	; 0x01
   133da:	92 83       	std	Z+2, r25	; 0x02
   133dc:	a3 83       	std	Z+3, r26	; 0x03
   133de:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        set_Config_Defaults();
        return(errors);
   133e2:	81 e0       	ldi	r24, 0x01	; 1
   133e4:	90 e0       	ldi	r25, 0x00	; 0
   133e6:	95 c3       	rjmp	.+1834   	; 0x13b12 <Read_Config+0x846>
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   133e8:	ff ef       	ldi	r31, 0xFF	; 255
   133ea:	4f 1a       	sub	r4, r31
   133ec:	5f 0a       	sbc	r5, r31

        ptr = get_token(str, token, sizeof(token)-2);
   133ee:	4e e7       	ldi	r20, 0x7E	; 126
   133f0:	50 e0       	ldi	r21, 0x00	; 0
   133f2:	9e 01       	movw	r18, r28
   133f4:	28 5f       	subi	r18, 0xF8	; 248
   133f6:	3f 4f       	sbci	r19, 0xFF	; 255
   133f8:	49 01       	movw	r8, r18
   133fa:	b9 01       	movw	r22, r18
   133fc:	ce 01       	movw	r24, r28
   133fe:	88 57       	subi	r24, 0x78	; 120
   13400:	9f 4f       	sbci	r25, 0xFF	; 255
   13402:	0e 94 44 30 	call	0x6088	; 0x6088 <get_token>
   13406:	5c 01       	movw	r10, r24

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   13408:	88 85       	ldd	r24, Y+8	; 0x08
   1340a:	81 11       	cpse	r24, r1
   1340c:	10 c0       	rjmp	.+32     	; 0x1342e <Read_Config+0x162>
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   1340e:	c4 5f       	subi	r28, 0xF4	; 244
   13410:	de 4f       	sbci	r29, 0xFE	; 254
   13412:	48 81       	ld	r20, Y
   13414:	59 81       	ldd	r21, Y+1	; 0x01
   13416:	cc 50       	subi	r28, 0x0C	; 12
   13418:	d1 40       	sbci	r29, 0x01	; 1
   1341a:	6e e7       	ldi	r22, 0x7E	; 126
   1341c:	70 e0       	ldi	r23, 0x00	; 0
   1341e:	ce 01       	movw	r24, r28
   13420:	88 57       	subi	r24, 0x78	; 120
   13422:	9f 4f       	sbci	r25, 0xFF	; 255
   13424:	0e 94 9f 74 	call	0xe93e	; 0xe93e <fgets>
   13428:	89 2b       	or	r24, r25
   1342a:	f1 f6       	brne	.-68     	; 0x133e8 <Read_Config+0x11c>
   1342c:	32 c3       	rjmp	.+1636   	; 0x13a92 <Read_Config+0x7c6>
        ++lines;

        ptr = get_token(str, token, sizeof(token)-2);

// Skip comments
        if(token[0] == 0 || token[0]  == '#')
   1342e:	83 32       	cpi	r24, 0x23	; 35
   13430:	71 f3       	breq	.-36     	; 0x1340e <Read_Config+0x142>
            continue;

        val.l = 0;
        tok = TOK_INVALID;

        if( ( ind = tok_index(token) )  == -1)
   13432:	c4 01       	movw	r24, r8
   13434:	0e 94 1a 91 	call	0x12234	; 0x12234 <tok_index>
   13438:	8f 3f       	cpi	r24, 0xFF	; 255
   1343a:	3f ef       	ldi	r19, 0xFF	; 255
   1343c:	93 07       	cpc	r25, r19
   1343e:	49 f4       	brne	.+18     	; 0x13452 <Read_Config+0x186>
        {
            printf("Unexpected token: %s, at line:%d\n", token,lines);
   13440:	ed b7       	in	r30, 0x3d	; 61
   13442:	fe b7       	in	r31, 0x3e	; 62
   13444:	57 82       	std	Z+7, r5	; 0x07
   13446:	46 82       	std	Z+6, r4	; 0x06
   13448:	95 82       	std	Z+5, r9	; 0x05
   1344a:	84 82       	std	Z+4, r8	; 0x04
   1344c:	88 e7       	ldi	r24, 0x78	; 120
   1344e:	9c e1       	ldi	r25, 0x1C	; 28
   13450:	c9 c0       	rjmp	.+402    	; 0x135e4 <Read_Config+0x318>
            ++errors;
            continue;
        }
        tok = tokens[ind].tok;
   13452:	88 0f       	add	r24, r24
   13454:	99 1f       	adc	r25, r25
   13456:	88 0f       	add	r24, r24
   13458:	99 1f       	adc	r25, r25
   1345a:	fc 01       	movw	r30, r24
   1345c:	ec 53       	subi	r30, 0x3C	; 60
   1345e:	fe 4f       	sbci	r31, 0xFE	; 254
   13460:	02 81       	ldd	r16, Z+2	; 0x02
   13462:	13 81       	ldd	r17, Z+3	; 0x03

// get optional argument
        ptr = get_token(ptr, token, sizeof(token)-2);
   13464:	4e e7       	ldi	r20, 0x7E	; 126
   13466:	50 e0       	ldi	r21, 0x00	; 0
   13468:	b4 01       	movw	r22, r8
   1346a:	c5 01       	movw	r24, r10
   1346c:	0e 94 44 30 	call	0x6088	; 0x6088 <get_token>
   13470:	5c 01       	movw	r10, r24
        if(MATCH(token,"="))
   13472:	6e e6       	ldi	r22, 0x6E	; 110
   13474:	7e e0       	ldi	r23, 0x0E	; 14
   13476:	c4 01       	movw	r24, r8
   13478:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCH>
   1347c:	89 2b       	or	r24, r25
   1347e:	39 f0       	breq	.+14     	; 0x1348e <Read_Config+0x1c2>
            ptr = get_token(ptr, token, sizeof(token)-2);
   13480:	4e e7       	ldi	r20, 0x7E	; 126
   13482:	50 e0       	ldi	r21, 0x00	; 0
   13484:	b4 01       	movw	r22, r8
   13486:	c5 01       	movw	r24, r10
   13488:	0e 94 44 30 	call	0x6088	; 0x6088 <get_token>
   1348c:	5c 01       	movw	r10, r24
        val.l = get_value(token);
   1348e:	c4 01       	movw	r24, r8
   13490:	0e 94 87 30 	call	0x610e	; 0x610e <get_value>
        val.w = (uint16_t) 0xFFFF & val.l;
        val.b = (uint8_t) 0xFF & val.l;

//FIXME check for state and last state
        if(tok == TOK_END )
   13494:	01 31       	cpi	r16, 0x11	; 17
   13496:	11 05       	cpc	r17, r1
        {
            state = pop_state();
   13498:	19 f4       	brne	.+6      	; 0x134a0 <Read_Config+0x1d4>
   1349a:	cc dd       	rcall	.-1128   	; 0x13034 <pop_state>
   1349c:	1c 01       	movw	r2, r24
            continue;
   1349e:	b7 cf       	rjmp	.-146    	; 0x1340e <Read_Config+0x142>
        }

        switch(state)
   134a0:	30 e1       	ldi	r19, 0x10	; 16
   134a2:	23 16       	cp	r2, r19
   134a4:	31 04       	cpc	r3, r1
   134a6:	08 f0       	brcs	.+2      	; 0x134aa <Read_Config+0x1de>
   134a8:	de c2       	rjmp	.+1468   	; 0x13a66 <Read_Config+0x79a>
   134aa:	f1 01       	movw	r30, r2
   134ac:	e0 53       	subi	r30, 0x30	; 48
   134ae:	ff 4f       	sbci	r31, 0xFF	; 255
   134b0:	0c 94 a9 e0 	jmp	0x1c152	; 0x1c152 <__tablejump2__>
        {
            case START_STATE:
                switch(tok)
   134b4:	0e 30       	cpi	r16, 0x0E	; 14
   134b6:	11 05       	cpc	r17, r1
   134b8:	09 f4       	brne	.+2      	; 0x134bc <Read_Config+0x1f0>
   134ba:	87 c0       	rjmp	.+270    	; 0x135ca <Read_Config+0x2fe>
   134bc:	44 f4       	brge	.+16     	; 0x134ce <Read_Config+0x202>
   134be:	02 30       	cpi	r16, 0x02	; 2
   134c0:	11 05       	cpc	r17, r1
   134c2:	09 f4       	brne	.+2      	; 0x134c6 <Read_Config+0x1fa>
   134c4:	41 c0       	rjmp	.+130    	; 0x13548 <Read_Config+0x27c>
   134c6:	0c 30       	cpi	r16, 0x0C	; 12
   134c8:	11 05       	cpc	r17, r1
   134ca:	09 f1       	breq	.+66     	; 0x1350e <Read_Config+0x242>
   134cc:	83 c0       	rjmp	.+262    	; 0x135d4 <Read_Config+0x308>
   134ce:	03 32       	cpi	r16, 0x23	; 35
   134d0:	11 05       	cpc	r17, r1
   134d2:	e9 f0       	breq	.+58     	; 0x1350e <Read_Config+0x242>
   134d4:	04 32       	cpi	r16, 0x24	; 36
   134d6:	11 05       	cpc	r17, r1
   134d8:	29 f0       	breq	.+10     	; 0x134e4 <Read_Config+0x218>
   134da:	00 32       	cpi	r16, 0x20	; 32
   134dc:	11 05       	cpc	r17, r1
   134de:	09 f0       	breq	.+2      	; 0x134e2 <Read_Config+0x216>
   134e0:	79 c0       	rjmp	.+242    	; 0x135d4 <Read_Config+0x308>
   134e2:	55 c0       	rjmp	.+170    	; 0x1358e <Read_Config+0x2c2>
                {
                    case TOK_SS80_DEFAULT:
                        push_state(state);
   134e4:	80 e0       	ldi	r24, 0x00	; 0
   134e6:	90 e0       	ldi	r25, 0x00	; 0
   134e8:	8c dd       	rcall	.-1256   	; 0x13002 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_DEFAULT_TYPE);
   134ea:	82 e0       	ldi	r24, 0x02	; 2
   134ec:	90 e0       	ldi	r25, 0x00	; 0
   134ee:	a6 dc       	rcall	.-1716   	; 0x12e3c <alloc_device>
   134f0:	6c 01       	movw	r12, r24
   134f2:	01 96       	adiw	r24, 0x01	; 1
                        if(index == -1)
   134f4:	09 f4       	brne	.+2      	; 0x134f8 <Read_Config+0x22c>
   134f6:	8b cf       	rjmp	.-234    	; 0x1340e <Read_Config+0x142>
   134f8:	8b e2       	ldi	r24, 0x2B	; 43
                            state = START_STATE;
                        else
                            SS80p = (SS80DiskType *) Devices[index].dev;
   134fa:	8c 9d       	mul	r24, r12
   134fc:	f0 01       	movw	r30, r0
   134fe:	8d 9d       	mul	r24, r13
   13500:	f0 0d       	add	r31, r0
   13502:	11 24       	eor	r1, r1
   13504:	e2 5f       	subi	r30, 0xF2	; 242
   13506:	f0 4e       	sbci	r31, 0xE0	; 224
   13508:	67 a0       	ldd	r6, Z+39	; 0x27
   1350a:	70 a4       	ldd	r7, Z+40	; 0x28
   1350c:	19 c0       	rjmp	.+50     	; 0x13540 <Read_Config+0x274>
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
   1350e:	80 e0       	ldi	r24, 0x00	; 0
   13510:	90 e0       	ldi	r25, 0x00	; 0
   13512:	77 dd       	rcall	.-1298   	; 0x13002 <push_state>
                        state = SS80_STATE;
                        index = alloc_device(SS80_TYPE);
   13514:	83 e0       	ldi	r24, 0x03	; 3
   13516:	90 e0       	ldi	r25, 0x00	; 0
   13518:	91 dc       	rcall	.-1758   	; 0x12e3c <alloc_device>
   1351a:	6c 01       	movw	r12, r24
   1351c:	8f ef       	ldi	r24, 0xFF	; 255
                        if(index == -1)
   1351e:	c8 16       	cp	r12, r24
   13520:	d8 06       	cpc	r13, r24
   13522:	09 f4       	brne	.+2      	; 0x13526 <Read_Config+0x25a>
   13524:	74 cf       	rjmp	.-280    	; 0x1340e <Read_Config+0x142>
   13526:	8b e2       	ldi	r24, 0x2B	; 43
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            SS80p = (SS80DiskType *) Devices[index].dev;
   13528:	8c 9d       	mul	r24, r12
   1352a:	f0 01       	movw	r30, r0
   1352c:	8d 9d       	mul	r24, r13
   1352e:	f0 0d       	add	r31, r0
   13530:	11 24       	eor	r1, r1
   13532:	e2 5f       	subi	r30, 0xF2	; 242
   13534:	f0 4e       	sbci	r31, 0xE0	; 224
   13536:	67 a0       	ldd	r6, Z+39	; 0x27
   13538:	70 a4       	ldd	r7, Z+40	; 0x28
// Also sets Devices[index].model
                            hpdir_set_parameters(index,token);
   1353a:	b4 01       	movw	r22, r8
   1353c:	c6 01       	movw	r24, r12
   1353e:	20 de       	rcall	.-960    	; 0x13180 <hpdir_set_parameters>
                            SS80p = (SS80DiskType *) Devices[index].dev;
                        break;
                    case TOK_SS80:
                    case TOK_CS80:
                        push_state(state);
                        state = SS80_STATE;
   13540:	22 24       	eor	r2, r2
   13542:	23 94       	inc	r2
   13544:	31 2c       	mov	r3, r1
                            hpdir_set_parameters(index,token);
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
   13546:	63 cf       	rjmp	.-314    	; 0x1340e <Read_Config+0x142>
   13548:	80 e0       	ldi	r24, 0x00	; 0
   1354a:	90 e0       	ldi	r25, 0x00	; 0
   1354c:	5a dd       	rcall	.-1356   	; 0x13002 <push_state>
                        state = AMIGO_STATE;
                        index = alloc_device(AMIGO_TYPE);
   1354e:	81 e0       	ldi	r24, 0x01	; 1
   13550:	90 e0       	ldi	r25, 0x00	; 0
   13552:	74 dc       	rcall	.-1816   	; 0x12e3c <alloc_device>
   13554:	6c 01       	movw	r12, r24
   13556:	9f ef       	ldi	r25, 0xFF	; 255
                        if(index == -1)
   13558:	c9 16       	cp	r12, r25
   1355a:	d9 06       	cpc	r13, r25
   1355c:	09 f4       	brne	.+2      	; 0x13560 <Read_Config+0x294>
   1355e:	57 cf       	rjmp	.-338    	; 0x1340e <Read_Config+0x142>
   13560:	8b e2       	ldi	r24, 0x2B	; 43
                        {
                            state = START_STATE;
                        }
                        else
                        {
                            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   13562:	8c 9d       	mul	r24, r12
   13564:	f0 01       	movw	r30, r0
   13566:	8d 9d       	mul	r24, r13
   13568:	f0 0d       	add	r31, r0
   1356a:	11 24       	eor	r1, r1
   1356c:	e2 5f       	subi	r30, 0xF2	; 242
   1356e:	f0 4e       	sbci	r31, 0xE0	; 224
   13570:	a7 a1       	ldd	r26, Z+39	; 0x27
   13572:	b0 a5       	ldd	r27, Z+40	; 0x28
   13574:	c8 5f       	subi	r28, 0xF8	; 248
   13576:	de 4f       	sbci	r29, 0xFE	; 254
   13578:	b9 83       	std	Y+1, r27	; 0x01
   1357a:	a8 83       	st	Y, r26
   1357c:	c8 50       	subi	r28, 0x08	; 8
   1357e:	d1 40       	sbci	r29, 0x01	; 1
// Also sets Devices[index.model
                            hpdir_set_parameters(index,token);
   13580:	b4 01       	movw	r22, r8
   13582:	c6 01       	movw	r24, r12
   13584:	fd dd       	rcall	.-1030   	; 0x13180 <hpdir_set_parameters>
                        }
                        break;
#ifdef AMIGO
                    case TOK_AMIGO:
                        push_state(state);
                        state = AMIGO_STATE;
   13586:	aa e0       	ldi	r26, 0x0A	; 10
   13588:	2a 2e       	mov	r2, r26
   1358a:	31 2c       	mov	r3, r1
   1358c:	40 cf       	rjmp	.-384    	; 0x1340e <Read_Config+0x142>
                            hpdir_set_parameters(index,token);
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
   1358e:	80 e0       	ldi	r24, 0x00	; 0
   13590:	90 e0       	ldi	r25, 0x00	; 0
   13592:	37 dd       	rcall	.-1426   	; 0x13002 <push_state>
   13594:	84 e0       	ldi	r24, 0x04	; 4
                        state = PRINTER_STATE;
                        index = alloc_device(PRINTER_TYPE);
   13596:	90 e0       	ldi	r25, 0x00	; 0
   13598:	51 dc       	rcall	.-1886   	; 0x12e3c <alloc_device>
   1359a:	6c 01       	movw	r12, r24
   1359c:	01 96       	adiw	r24, 0x01	; 1
   1359e:	09 f4       	brne	.+2      	; 0x135a2 <Read_Config+0x2d6>
                        if(index == -1)
   135a0:	36 cf       	rjmp	.-404    	; 0x1340e <Read_Config+0x142>
   135a2:	8b e2       	ldi	r24, 0x2B	; 43
   135a4:	8c 9d       	mul	r24, r12
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   135a6:	f0 01       	movw	r30, r0
   135a8:	8d 9d       	mul	r24, r13
   135aa:	f0 0d       	add	r31, r0
   135ac:	11 24       	eor	r1, r1
   135ae:	e2 5f       	subi	r30, 0xF2	; 242
   135b0:	f0 4e       	sbci	r31, 0xE0	; 224
   135b2:	27 a1       	ldd	r18, Z+39	; 0x27
   135b4:	30 a5       	ldd	r19, Z+40	; 0x28
   135b6:	c6 5f       	subi	r28, 0xF6	; 246
   135b8:	de 4f       	sbci	r29, 0xFE	; 254
   135ba:	39 83       	std	Y+1, r19	; 0x01
   135bc:	28 83       	st	Y, r18
   135be:	ca 50       	subi	r28, 0x0A	; 10
   135c0:	d1 40       	sbci	r29, 0x01	; 1
   135c2:	fe e0       	ldi	r31, 0x0E	; 14
   135c4:	2f 2e       	mov	r2, r31
                        }
                        break;
#endif
                    case TOK_PRINTER:
                        push_state(state);
                        state = PRINTER_STATE;
   135c6:	31 2c       	mov	r3, r1
   135c8:	22 cf       	rjmp	.-444    	; 0x1340e <Read_Config+0x142>
   135ca:	60 93 b6 01 	sts	0x01B6, r22	; 0x8001b6 <debuglevel>
                            state = START_STATE;
                        else
                            PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
                        break;
                    case TOK_DEBUG:
                        debuglevel = val.w;
   135ce:	70 93 b7 01 	sts	0x01B7, r23	; 0x8001b7 <debuglevel+0x1>
   135d2:	1d cf       	rjmp	.-454    	; 0x1340e <Read_Config+0x142>
   135d4:	ed b7       	in	r30, 0x3d	; 61
                        break;
   135d6:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected token: %s, at line:%d\n", ptr,lines);
   135d8:	57 82       	std	Z+7, r5	; 0x07
   135da:	46 82       	std	Z+6, r4	; 0x06
   135dc:	b5 82       	std	Z+5, r11	; 0x05
   135de:	a4 82       	std	Z+4, r10	; 0x04
   135e0:	86 e5       	ldi	r24, 0x56	; 86
   135e2:	9c e1       	ldi	r25, 0x1C	; 28
   135e4:	a0 e0       	ldi	r26, 0x00	; 0
   135e6:	81 83       	std	Z+1, r24	; 0x01
   135e8:	92 83       	std	Z+2, r25	; 0x02
   135ea:	a3 83       	std	Z+3, r26	; 0x03
   135ec:	4c c2       	rjmp	.+1176   	; 0x13a86 <Read_Config+0x7ba>
   135ee:	09 30       	cpi	r16, 0x09	; 9
                        break;
                }
                break;

            case PRINTER_STATE:
                if(tok == TOK_CONFIG)
   135f0:	11 05       	cpc	r17, r1
   135f2:	39 f4       	brne	.+14     	; 0x13602 <Read_Config+0x336>
   135f4:	8e e0       	ldi	r24, 0x0E	; 14
                {
                    push_state(state);
   135f6:	90 e0       	ldi	r25, 0x00	; 0
   135f8:	04 dd       	rcall	.-1528   	; 0x13002 <push_state>
   135fa:	ef e0       	ldi	r30, 0x0F	; 15
   135fc:	2e 2e       	mov	r2, r30
                    state = PRINTER_CONFIG;
   135fe:	31 2c       	mov	r3, r1
   13600:	06 cf       	rjmp	.-500    	; 0x1340e <Read_Config+0x142>
   13602:	ed b7       	in	r30, 0x3d	; 61
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
                    ++errors;
                    break;
                }
                break;
   13604:	fe b7       	in	r31, 0x3e	; 62
                    push_state(state);
                    state = PRINTER_CONFIG;
                }
                else
                {
                    printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   13606:	57 82       	std	Z+7, r5	; 0x07
   13608:	46 82       	std	Z+6, r4	; 0x06
   1360a:	b5 82       	std	Z+5, r11	; 0x05
   1360c:	a4 82       	std	Z+4, r10	; 0x04
   1360e:	8c e2       	ldi	r24, 0x2C	; 44
   13610:	9c e1       	ldi	r25, 0x1C	; 28
   13612:	e8 cf       	rjmp	.-48     	; 0x135e4 <Read_Config+0x318>
   13614:	01 30       	cpi	r16, 0x01	; 1
   13616:	11 05       	cpc	r17, r1
                    break;
                }
                break;

            case PRINTER_CONFIG:
                if(tok == TOK_ADDRESS)
   13618:	b1 f4       	brne	.+44     	; 0x13646 <Read_Config+0x37a>
   1361a:	6f 71       	andi	r22, 0x1F	; 31
   1361c:	8b e2       	ldi	r24, 0x2B	; 43
                {
                    Devices[index].ADDRESS = 0x1f & val.b;
   1361e:	8c 9d       	mul	r24, r12
   13620:	f0 01       	movw	r30, r0
   13622:	8d 9d       	mul	r24, r13
   13624:	f0 0d       	add	r31, r0
   13626:	11 24       	eor	r1, r1
   13628:	e2 5f       	subi	r30, 0xF2	; 242
   1362a:	f0 4e       	sbci	r31, 0xE0	; 224
   1362c:	61 83       	std	Z+1, r22	; 0x01
   1362e:	c6 5f       	subi	r28, 0xF6	; 246
   13630:	de 4f       	sbci	r29, 0xFE	; 254
                    PRINTERp->HEADER.ADDRESS  = 0x1f & val.b;
   13632:	a8 81       	ld	r26, Y
   13634:	b9 81       	ldd	r27, Y+1	; 0x01
   13636:	ca 50       	subi	r28, 0x0A	; 10
   13638:	d1 40       	sbci	r29, 0x01	; 1
   1363a:	6c 93       	st	X, r22
   1363c:	8f ef       	ldi	r24, 0xFF	; 255
   1363e:	82 83       	std	Z+2, r24	; 0x02
// NO PPR
                    Devices[index].PPR = 0xff;
   13640:	fd 01       	movw	r30, r26
   13642:	81 83       	std	Z+1, r24	; 0x01
                    PRINTERp->HEADER.PPR = 0xff;
   13644:	e4 ce       	rjmp	.-568    	; 0x1340e <Read_Config+0x142>
   13646:	ed b7       	in	r30, 0x3d	; 61
   13648:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   1364a:	57 82       	std	Z+7, r5	; 0x07
   1364c:	46 82       	std	Z+6, r4	; 0x06
   1364e:	b5 82       	std	Z+5, r11	; 0x05
   13650:	a4 82       	std	Z+4, r10	; 0x04
   13652:	8b ef       	ldi	r24, 0xFB	; 251
   13654:	9b e1       	ldi	r25, 0x1B	; 27
   13656:	c6 cf       	rjmp	.-116    	; 0x135e4 <Read_Config+0x318>
   13658:	05 31       	cpi	r16, 0x15	; 21
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   1365a:	11 05       	cpc	r17, r1
   1365c:	d9 f0       	breq	.+54     	; 0x13694 <Read_Config+0x3c8>
   1365e:	6c f4       	brge	.+26     	; 0x1367a <Read_Config+0x3ae>
   13660:	09 30       	cpi	r16, 0x09	; 9
   13662:	11 05       	cpc	r17, r1
   13664:	f1 f0       	breq	.+60     	; 0x136a2 <Read_Config+0x3d6>
   13666:	0b 30       	cpi	r16, 0x0B	; 11
   13668:	11 05       	cpc	r17, r1
   1366a:	49 f5       	brne	.+82     	; 0x136be <Read_Config+0x3f2>
   1366c:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONFIG:
                        push_state(state);
                        state = SS80_CONFIG;
                        break;
                    case TOK_CONTROLLER:
                        push_state(state);
   1366e:	90 e0       	ldi	r25, 0x00	; 0
   13670:	c8 dc       	rcall	.-1648   	; 0x13002 <push_state>
   13672:	54 e0       	ldi	r21, 0x04	; 4
                        state = SS80_CONTROLLER;
   13674:	25 2e       	mov	r2, r21
   13676:	31 2c       	mov	r3, r1
   13678:	ca ce       	rjmp	.-620    	; 0x1340e <Read_Config+0x142>
                        break;
   1367a:	07 32       	cpi	r16, 0x27	; 39
                    ++errors;
                }
                break;

            case SS80_STATE:
                switch(tok)
   1367c:	11 05       	cpc	r17, r1
   1367e:	c1 f0       	breq	.+48     	; 0x136b0 <Read_Config+0x3e4>
   13680:	0a 32       	cpi	r16, 0x2A	; 42
   13682:	11 05       	cpc	r17, r1
   13684:	e1 f4       	brne	.+56     	; 0x136be <Read_Config+0x3f2>
                    case TOK_UNIT:
                        push_state(state);
                        state = SS80_UNIT;
                        break;
                    case TOK_VOLUME:
                        push_state(state);
   13686:	81 e0       	ldi	r24, 0x01	; 1
   13688:	90 e0       	ldi	r25, 0x00	; 0
   1368a:	bb dc       	rcall	.-1674   	; 0x13002 <push_state>
                        state = SS80_VOLUME;
   1368c:	36 e0       	ldi	r19, 0x06	; 6
   1368e:	23 2e       	mov	r2, r19
   13690:	31 2c       	mov	r3, r1
                        break;
   13692:	bd ce       	rjmp	.-646    	; 0x1340e <Read_Config+0x142>

            case SS80_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   13694:	81 e0       	ldi	r24, 0x01	; 1
   13696:	90 e0       	ldi	r25, 0x00	; 0
   13698:	b4 dc       	rcall	.-1688   	; 0x13002 <push_state>
                        state = SS80_HEADER;
   1369a:	72 e0       	ldi	r23, 0x02	; 2
   1369c:	27 2e       	mov	r2, r23
   1369e:	31 2c       	mov	r3, r1
                        break;
   136a0:	b6 ce       	rjmp	.-660    	; 0x1340e <Read_Config+0x142>
                    case TOK_CONFIG:
                        push_state(state);
   136a2:	81 e0       	ldi	r24, 0x01	; 1
   136a4:	90 e0       	ldi	r25, 0x00	; 0
   136a6:	ad dc       	rcall	.-1702   	; 0x13002 <push_state>
   136a8:	63 e0       	ldi	r22, 0x03	; 3
                        state = SS80_CONFIG;
   136aa:	26 2e       	mov	r2, r22
   136ac:	31 2c       	mov	r3, r1
   136ae:	af ce       	rjmp	.-674    	; 0x1340e <Read_Config+0x142>
                        break;
   136b0:	81 e0       	ldi	r24, 0x01	; 1
                    case TOK_CONTROLLER:
                        push_state(state);
                        state = SS80_CONTROLLER;
                        break;
                    case TOK_UNIT:
                        push_state(state);
   136b2:	90 e0       	ldi	r25, 0x00	; 0
   136b4:	a6 dc       	rcall	.-1716   	; 0x13002 <push_state>
   136b6:	45 e0       	ldi	r20, 0x05	; 5
   136b8:	24 2e       	mov	r2, r20
                        state = SS80_UNIT;
   136ba:	31 2c       	mov	r3, r1
   136bc:	a8 ce       	rjmp	.-688    	; 0x1340e <Read_Config+0x142>
   136be:	ed b7       	in	r30, 0x3d	; 61
                        break;
   136c0:	fe b7       	in	r31, 0x3e	; 62
                    case TOK_VOLUME:
                        push_state(state);
                        state = SS80_VOLUME;
                        break;
                    default:
                        printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   136c2:	57 82       	std	Z+7, r5	; 0x07
   136c4:	46 82       	std	Z+6, r4	; 0x06
   136c6:	b5 82       	std	Z+5, r11	; 0x05
   136c8:	a4 82       	std	Z+4, r10	; 0x04
   136ca:	8e ec       	ldi	r24, 0xCE	; 206
   136cc:	9b e1       	ldi	r25, 0x1B	; 27
   136ce:	8a cf       	rjmp	.-236    	; 0x135e4 <Read_Config+0x318>
   136d0:	02 31       	cpi	r16, 0x12	; 18
   136d2:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_HEADER:
                switch(tok)
   136d4:	f1 f0       	breq	.+60     	; 0x13712 <Read_Config+0x446>
   136d6:	0f 31       	cpi	r16, 0x1F	; 31
   136d8:	11 05       	cpc	r17, r1
   136da:	79 f0       	breq	.+30     	; 0x136fa <Read_Config+0x42e>
   136dc:	01 30       	cpi	r16, 0x01	; 1
   136de:	11 05       	cpc	r17, r1
   136e0:	e9 f4       	brne	.+58     	; 0x1371c <Read_Config+0x450>
   136e2:	6f 71       	andi	r22, 0x1F	; 31
   136e4:	8b e2       	ldi	r24, 0x2B	; 43
                {
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
   136e6:	8c 9d       	mul	r24, r12
   136e8:	f0 01       	movw	r30, r0
   136ea:	8d 9d       	mul	r24, r13
   136ec:	f0 0d       	add	r31, r0
   136ee:	11 24       	eor	r1, r1
   136f0:	e2 5f       	subi	r30, 0xF2	; 242
   136f2:	f0 4e       	sbci	r31, 0xE0	; 224
   136f4:	61 83       	std	Z+1, r22	; 0x01
   136f6:	d3 01       	movw	r26, r6
   136f8:	37 c1       	rjmp	.+622    	; 0x13968 <Read_Config+0x69c>
                        SS80p->HEADER.ADDRESS  = 0x1f & val.b;
   136fa:	67 70       	andi	r22, 0x07	; 7
   136fc:	8b e2       	ldi	r24, 0x2B	; 43
                        break;
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
   136fe:	8c 9d       	mul	r24, r12
   13700:	f0 01       	movw	r30, r0
   13702:	8d 9d       	mul	r24, r13
   13704:	f0 0d       	add	r31, r0
   13706:	11 24       	eor	r1, r1
   13708:	e2 5f       	subi	r30, 0xF2	; 242
   1370a:	f0 4e       	sbci	r31, 0xE0	; 224
   1370c:	62 83       	std	Z+2, r22	; 0x02
   1370e:	f3 01       	movw	r30, r6
   13710:	2d c1       	rjmp	.+602    	; 0x1396c <Read_Config+0x6a0>
                        SS80p->HEADER.PPR = 0x07 & val.b;
   13712:	c4 01       	movw	r24, r8
   13714:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <stralloc>
                        break;
                    case TOK_FILE:
                        SS80p->HEADER.NAME = stralloc(token);
   13718:	f3 01       	movw	r30, r6
   1371a:	33 c1       	rjmp	.+614    	; 0x13982 <Read_Config+0x6b6>
   1371c:	ed b7       	in	r30, 0x3d	; 61
   1371e:	fe b7       	in	r31, 0x3e	; 62
                        break;
                    default:
                        printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   13720:	57 82       	std	Z+7, r5	; 0x07
   13722:	46 82       	std	Z+6, r4	; 0x06
   13724:	b5 82       	std	Z+5, r11	; 0x05
   13726:	a4 82       	std	Z+4, r10	; 0x04
   13728:	80 ea       	ldi	r24, 0xA0	; 160
   1372a:	9b e1       	ldi	r25, 0x1B	; 27
   1372c:	5b cf       	rjmp	.-330    	; 0x135e4 <Read_Config+0x318>
   1372e:	07 31       	cpi	r16, 0x17	; 23
   13730:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_CONFIG:
                if(tok == TOK_ID )
   13732:	21 f4       	brne	.+8      	; 0x1373c <Read_Config+0x470>
   13734:	96 2f       	mov	r25, r22
   13736:	87 2f       	mov	r24, r23
                {
                    SS80p->CONFIG.ID = val.w;
   13738:	f3 01       	movw	r30, r6
   1373a:	3f c1       	rjmp	.+638    	; 0x139ba <Read_Config+0x6ee>
   1373c:	ed b7       	in	r30, 0x3d	; 61
   1373e:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   13740:	57 82       	std	Z+7, r5	; 0x07
   13742:	46 82       	std	Z+6, r4	; 0x06
   13744:	b5 82       	std	Z+5, r11	; 0x05
   13746:	a4 82       	std	Z+4, r10	; 0x04
   13748:	82 e7       	ldi	r24, 0x72	; 114
   1374a:	9b e1       	ldi	r25, 0x1B	; 27
   1374c:	4b cf       	rjmp	.-362    	; 0x135e4 <Read_Config+0x318>
   1374e:	06 32       	cpi	r16, 0x26	; 38
   13750:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case SS80_CONTROLLER:
                switch(tok)
   13752:	71 f0       	breq	.+28     	; 0x13770 <Read_Config+0x4a4>
   13754:	08 32       	cpi	r16, 0x28	; 40
   13756:	11 05       	cpc	r17, r1
   13758:	39 f0       	breq	.+14     	; 0x13768 <Read_Config+0x49c>
   1375a:	05 32       	cpi	r16, 0x25	; 37
   1375c:	11 05       	cpc	r17, r1
   1375e:	59 f4       	brne	.+22     	; 0x13776 <Read_Config+0x4aa>
   13760:	96 2f       	mov	r25, r22
   13762:	87 2f       	mov	r24, r23
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
   13764:	f3 01       	movw	r30, r6
   13766:	5c c1       	rjmp	.+696    	; 0x13a20 <Read_Config+0x754>
   13768:	96 2f       	mov	r25, r22
   1376a:	87 2f       	mov	r24, r23

            case SS80_CONTROLLER:
                switch(tok)
                {
                    case TOK_UNITS_INSTALLED:
                        SS80p->CONTROLLER.UNITS_INSTALLED = val.w;
   1376c:	f3 01       	movw	r30, r6
   1376e:	55 c1       	rjmp	.+682    	; 0x13a1a <Read_Config+0x74e>
   13770:	f3 01       	movw	r30, r6
   13772:	62 87       	std	Z+10, r22	; 0x0a
                        break;
                    case TOK_TRANSFER_RATE:
                        SS80p->CONTROLLER.TRANSFER_RATE = val.w;
                        break;
                    case TOK_TYPE:
                        SS80p->CONTROLLER.TYPE = val.b;
   13774:	4c ce       	rjmp	.-872    	; 0x1340e <Read_Config+0x142>
   13776:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13778:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   1377a:	57 82       	std	Z+7, r5	; 0x07
   1377c:	46 82       	std	Z+6, r4	; 0x06
   1377e:	b5 82       	std	Z+5, r11	; 0x05
   13780:	a4 82       	std	Z+4, r10	; 0x04
   13782:	80 e4       	ldi	r24, 0x40	; 64
   13784:	9b e1       	ldi	r25, 0x1B	; 27
   13786:	2e cf       	rjmp	.-420    	; 0x135e4 <Read_Config+0x318>
   13788:	0a 30       	cpi	r16, 0x0A	; 10
   1378a:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   1378c:	09 f4       	brne	.+2      	; 0x13790 <Read_Config+0x4c4>
   1378e:	45 c0       	rjmp	.+138    	; 0x1381a <Read_Config+0x54e>
   13790:	d4 f4       	brge	.+52     	; 0x137c6 <Read_Config+0x4fa>
   13792:	05 30       	cpi	r16, 0x05	; 5
   13794:	11 05       	cpc	r17, r1
   13796:	d1 f1       	breq	.+116    	; 0x1380c <Read_Config+0x540>
   13798:	64 f4       	brge	.+24     	; 0x137b2 <Read_Config+0x4e6>
   1379a:	01 15       	cp	r16, r1
   1379c:	11 05       	cpc	r17, r1
   1379e:	09 f4       	brne	.+2      	; 0x137a2 <Read_Config+0x4d6>
   137a0:	40 c0       	rjmp	.+128    	; 0x13822 <Read_Config+0x556>
   137a2:	04 30       	cpi	r16, 0x04	; 4
   137a4:	11 05       	cpc	r17, r1
   137a6:	09 f0       	breq	.+2      	; 0x137aa <Read_Config+0x4de>
   137a8:	46 c0       	rjmp	.+140    	; 0x13836 <Read_Config+0x56a>
   137aa:	f3 01       	movw	r30, r6
   137ac:	64 8b       	std	Z+20, r22	; 0x14
                        break;
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
                        break;
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
   137ae:	75 8b       	std	Z+21, r23	; 0x15
   137b0:	2e ce       	rjmp	.-932    	; 0x1340e <Read_Config+0x142>
   137b2:	06 30       	cpi	r16, 0x06	; 6
                        break;
   137b4:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   137b6:	71 f1       	breq	.+92     	; 0x13814 <Read_Config+0x548>
   137b8:	07 30       	cpi	r16, 0x07	; 7
   137ba:	11 05       	cpc	r17, r1
   137bc:	e1 f5       	brne	.+120    	; 0x13836 <Read_Config+0x56a>
   137be:	f3 01       	movw	r30, r6
   137c0:	60 8b       	std	Z+16, r22	; 0x10
                        break;
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
                        break;
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
   137c2:	71 8b       	std	Z+17, r23	; 0x11
   137c4:	24 ce       	rjmp	.-952    	; 0x1340e <Read_Config+0x142>
   137c6:	0c 31       	cpi	r16, 0x1C	; 28
                        break;
   137c8:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   137ca:	79 f1       	breq	.+94     	; 0x1382a <Read_Config+0x55e>
   137cc:	4c f4       	brge	.+18     	; 0x137e0 <Read_Config+0x514>
   137ce:	0f 30       	cpi	r16, 0x0F	; 15
   137d0:	11 05       	cpc	r17, r1
   137d2:	b1 f0       	breq	.+44     	; 0x13800 <Read_Config+0x534>
   137d4:	03 31       	cpi	r16, 0x13	; 19
   137d6:	11 05       	cpc	r17, r1
   137d8:	71 f5       	brne	.+92     	; 0x13836 <Read_Config+0x56a>
   137da:	f3 01       	movw	r30, r6
   137dc:	65 8f       	std	Z+29, r22	; 0x1d
                        break;
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
                        break;
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
   137de:	17 ce       	rjmp	.-978    	; 0x1340e <Read_Config+0x142>
   137e0:	01 32       	cpi	r16, 0x21	; 33
                        break;
   137e2:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_UNIT:
                switch(tok)
   137e4:	29 f1       	breq	.+74     	; 0x13830 <Read_Config+0x564>
   137e6:	09 32       	cpi	r16, 0x29	; 41
   137e8:	11 05       	cpc	r17, r1
   137ea:	39 f0       	breq	.+14     	; 0x137fa <Read_Config+0x52e>
   137ec:	0e 31       	cpi	r16, 0x1E	; 30
   137ee:	11 05       	cpc	r17, r1
   137f0:	11 f5       	brne	.+68     	; 0x13836 <Read_Config+0x56a>
   137f2:	f3 01       	movw	r30, r6
   137f4:	60 8f       	std	Z+24, r22	; 0x18
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
                        break;
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
   137f6:	71 8f       	std	Z+25, r23	; 0x19
   137f8:	0a ce       	rjmp	.-1004   	; 0x1340e <Read_Config+0x142>
   137fa:	f3 01       	movw	r30, r6
                        break;
   137fc:	63 87       	std	Z+11, r22	; 0x0b

            case SS80_UNIT:
                switch(tok)
                {
                    case TOK_UNIT_TYPE:
                        SS80p->UNIT.UNIT_TYPE = val.b;
   137fe:	07 ce       	rjmp	.-1010   	; 0x1340e <Read_Config+0x142>
   13800:	f3 01       	movw	r30, r6
                        break;
   13802:	64 87       	std	Z+12, r22	; 0x0c
                    case TOK_DEVICE_NUMBER:
                        SS80p->UNIT.DEVICE_NUMBER = val.l;
   13804:	75 87       	std	Z+13, r23	; 0x0d
   13806:	86 87       	std	Z+14, r24	; 0x0e
   13808:	97 87       	std	Z+15, r25	; 0x0f
   1380a:	01 ce       	rjmp	.-1022   	; 0x1340e <Read_Config+0x142>
   1380c:	61 70       	andi	r22, 0x01	; 1
                        break;
   1380e:	f3 01       	movw	r30, r6
                    case TOK_BYTES_PER_BLOCK:
                        SS80p->UNIT.BYTES_PER_BLOCK = val.w;
                        break;
                    case TOK_BUFFERED_BLOCKS:
                        SS80p->UNIT.BUFFERED_BLOCKS = 1 & val.b;
   13810:	62 8b       	std	Z+18, r22	; 0x12
   13812:	fd cd       	rjmp	.-1030   	; 0x1340e <Read_Config+0x142>
   13814:	f3 01       	movw	r30, r6
                        break;
   13816:	63 8b       	std	Z+19, r22	; 0x13
                    case TOK_BURST_SIZE:
                        SS80p->UNIT.BURST_SIZE = val.b;
   13818:	fa cd       	rjmp	.-1036   	; 0x1340e <Read_Config+0x142>
   1381a:	f3 01       	movw	r30, r6
                        break;
   1381c:	66 8b       	std	Z+22, r22	; 0x16
                    case TOK_BLOCK_TIME:
                        SS80p->UNIT.BLOCK_TIME = val.w;
                        break;
                    case TOK_CONTINUOUS_TRANSFER_RATE:
                        SS80p->UNIT.CONTINUOUS_TRANSFER_RATE = val.w;
   1381e:	77 8b       	std	Z+23, r23	; 0x17
   13820:	f6 cd       	rjmp	.-1044   	; 0x1340e <Read_Config+0x142>
   13822:	f3 01       	movw	r30, r6
                        break;
   13824:	62 8f       	std	Z+26, r22	; 0x1a
                    case TOK_OPTIMAL_RETRY_TIME:
                        SS80p->UNIT.OPTIMAL_RETRY_TIME = val.w;
                        break;
                    case TOK_ACCESS_TIME:
                        SS80p->UNIT.ACCESS_TIME = val.w;
   13826:	73 8f       	std	Z+27, r23	; 0x1b
   13828:	f2 cd       	rjmp	.-1052   	; 0x1340e <Read_Config+0x142>
   1382a:	f3 01       	movw	r30, r6
                        break;
   1382c:	64 8f       	std	Z+28, r22	; 0x1c
                    case TOK_MAXIMUM_INTERLEAVE:
                        SS80p->UNIT.MAXIMUM_INTERLEAVE = val.b;
   1382e:	ef cd       	rjmp	.-1058   	; 0x1340e <Read_Config+0x142>
   13830:	f3 01       	movw	r30, r6
                        break;
   13832:	66 8f       	std	Z+30, r22	; 0x1e
                    case TOK_FIXED_VOLUMES:
                        SS80p->UNIT.FIXED_VOLUMES = val.b;
                        break;
                    case TOK_REMOVABLE_VOLUMES:
                        SS80p->UNIT.REMOVABLE_VOLUMES = val.b;
   13834:	ec cd       	rjmp	.-1064   	; 0x1340e <Read_Config+0x142>
   13836:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13838:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   1383a:	57 82       	std	Z+7, r5	; 0x07
   1383c:	46 82       	std	Z+6, r4	; 0x06
   1383e:	b5 82       	std	Z+5, r11	; 0x05
   13840:	a4 82       	std	Z+4, r10	; 0x04
   13842:	84 e1       	ldi	r24, 0x14	; 20
   13844:	9b e1       	ldi	r25, 0x1B	; 27
   13846:	ce ce       	rjmp	.-612    	; 0x135e4 <Read_Config+0x318>
   13848:	0a 31       	cpi	r16, 0x1A	; 26
   1384a:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   1384c:	b9 f0       	breq	.+46     	; 0x1387c <Read_Config+0x5b0>
   1384e:	64 f4       	brge	.+24     	; 0x13868 <Read_Config+0x59c>
   13850:	08 31       	cpi	r16, 0x18	; 24
   13852:	11 05       	cpc	r17, r1
   13854:	e1 f0       	breq	.+56     	; 0x1388e <Read_Config+0x5c2>
   13856:	09 31       	cpi	r16, 0x19	; 25
   13858:	11 05       	cpc	r17, r1
   1385a:	e1 f4       	brne	.+56     	; 0x13894 <Read_Config+0x5c8>
   1385c:	f3 01       	movw	r30, r6
   1385e:	66 a3       	std	Z+38, r22	; 0x26
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
   13860:	77 a3       	std	Z+39, r23	; 0x27
   13862:	80 a7       	std	Z+40, r24	; 0x28
   13864:	91 a7       	std	Z+41, r25	; 0x29
   13866:	d3 cd       	rjmp	.-1114   	; 0x1340e <Read_Config+0x142>
   13868:	0b 31       	cpi	r16, 0x1B	; 27
                        break;
   1386a:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case SS80_VOLUME:
                switch(tok)
   1386c:	69 f0       	breq	.+26     	; 0x13888 <Read_Config+0x5bc>
   1386e:	0d 31       	cpi	r16, 0x1D	; 29
   13870:	11 05       	cpc	r17, r1
   13872:	81 f4       	brne	.+32     	; 0x13894 <Read_Config+0x5c8>
   13874:	f3 01       	movw	r30, r6
   13876:	64 a3       	std	Z+36, r22	; 0x24
                        break;
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
                        break;
                    case TOK_MAX_SECTOR:
                        SS80p->VOLUME.MAX_SECTOR = val.w;
   13878:	75 a3       	std	Z+37, r23	; 0x25
   1387a:	c9 cd       	rjmp	.-1134   	; 0x1340e <Read_Config+0x142>
   1387c:	f3 01       	movw	r30, r6
                        break;
   1387e:	67 8f       	std	Z+31, r22	; 0x1f

            case SS80_VOLUME:
                switch(tok)
                {
                    case TOK_MAX_CYLINDER:
                        SS80p->VOLUME.MAX_CYLINDER = val.l;
   13880:	70 a3       	std	Z+32, r23	; 0x20
   13882:	81 a3       	std	Z+33, r24	; 0x21
   13884:	92 a3       	std	Z+34, r25	; 0x22
   13886:	c3 cd       	rjmp	.-1146   	; 0x1340e <Read_Config+0x142>
   13888:	f3 01       	movw	r30, r6
                        break;
   1388a:	63 a3       	std	Z+35, r22	; 0x23
                    case TOK_MAX_HEAD:
                        SS80p->VOLUME.MAX_HEAD = val.b;
   1388c:	c0 cd       	rjmp	.-1152   	; 0x1340e <Read_Config+0x142>
   1388e:	f3 01       	movw	r30, r6
                        break;
   13890:	62 a7       	std	Z+42, r22	; 0x2a
                        break;
                    case TOK_MAX_BLOCK_NUMBER:
                        SS80p->VOLUME.MAX_BLOCK_NUMBER = val.l;
                        break;
                    case TOK_INTERLEAVE:
                        SS80p->VOLUME.INTERLEAVE = val.b;
   13892:	bd cd       	rjmp	.-1158   	; 0x1340e <Read_Config+0x142>
   13894:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13896:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   13898:	57 82       	std	Z+7, r5	; 0x07
   1389a:	46 82       	std	Z+6, r4	; 0x06
   1389c:	b5 82       	std	Z+5, r11	; 0x05
   1389e:	a4 82       	std	Z+4, r10	; 0x04
   138a0:	c3 5e       	subi	r28, 0xE3	; 227
   138a2:	de 4f       	sbci	r29, 0xFE	; 254
   138a4:	28 81       	ld	r18, Y
   138a6:	39 81       	ldd	r19, Y+1	; 0x01
   138a8:	4a 81       	ldd	r20, Y+2	; 0x02
   138aa:	cd 51       	subi	r28, 0x1D	; 29
   138ac:	d1 40       	sbci	r29, 0x01	; 1
   138ae:	e8 c0       	rjmp	.+464    	; 0x13a80 <Read_Config+0x7b4>
   138b0:	04 31       	cpi	r16, 0x14	; 20
                }
                break;

#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
   138b2:	11 05       	cpc	r17, r1
   138b4:	a1 f0       	breq	.+40     	; 0x138de <Read_Config+0x612>
   138b6:	05 31       	cpi	r16, 0x15	; 21
   138b8:	11 05       	cpc	r17, r1
   138ba:	51 f0       	breq	.+20     	; 0x138d0 <Read_Config+0x604>
   138bc:	09 30       	cpi	r16, 0x09	; 9
   138be:	11 05       	cpc	r17, r1
                    case TOK_HEADER:
                        push_state(state);
                        state = AMIGO_HEADER;
                        break;
                    case TOK_CONFIG:
                        push_state(state);
   138c0:	a9 f4       	brne	.+42     	; 0x138ec <Read_Config+0x620>
   138c2:	8a e0       	ldi	r24, 0x0A	; 10
   138c4:	90 e0       	ldi	r25, 0x00	; 0
   138c6:	9d db       	rcall	.-2246   	; 0x13002 <push_state>
                        state = AMIGO_CONFIG;
   138c8:	9c e0       	ldi	r25, 0x0C	; 12
   138ca:	29 2e       	mov	r2, r25
   138cc:	31 2c       	mov	r3, r1
                        break;
   138ce:	9f cd       	rjmp	.-1218   	; 0x1340e <Read_Config+0x142>
#ifdef AMIGO
            case AMIGO_STATE:
                switch(tok)
                {
                    case TOK_HEADER:
                        push_state(state);
   138d0:	8a e0       	ldi	r24, 0x0A	; 10
   138d2:	90 e0       	ldi	r25, 0x00	; 0
   138d4:	96 db       	rcall	.-2260   	; 0x13002 <push_state>
   138d6:	2b e0       	ldi	r18, 0x0B	; 11
                        state = AMIGO_HEADER;
   138d8:	22 2e       	mov	r2, r18
   138da:	31 2c       	mov	r3, r1
   138dc:	98 cd       	rjmp	.-1232   	; 0x1340e <Read_Config+0x142>
                        break;
   138de:	8a e0       	ldi	r24, 0x0A	; 10
                    case TOK_CONFIG:
                        push_state(state);
                        state = AMIGO_CONFIG;
                        break;
                    case TOK_GEOMETRY:
                        push_state(state);
   138e0:	90 e0       	ldi	r25, 0x00	; 0
   138e2:	8f db       	rcall	.-2274   	; 0x13002 <push_state>
   138e4:	8d e0       	ldi	r24, 0x0D	; 13
   138e6:	28 2e       	mov	r2, r24
                        state = AMIGO_GEOMETRY;
   138e8:	31 2c       	mov	r3, r1
   138ea:	91 cd       	rjmp	.-1246   	; 0x1340e <Read_Config+0x142>
   138ec:	ed b7       	in	r30, 0x3d	; 61
                        break;
   138ee:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   138f0:	57 82       	std	Z+7, r5	; 0x07
   138f2:	46 82       	std	Z+6, r4	; 0x06
   138f4:	b5 82       	std	Z+5, r11	; 0x05
   138f6:	a4 82       	std	Z+4, r10	; 0x04
   138f8:	c6 5e       	subi	r28, 0xE6	; 230
   138fa:	de 4f       	sbci	r29, 0xFE	; 254
   138fc:	28 81       	ld	r18, Y
   138fe:	39 81       	ldd	r19, Y+1	; 0x01
   13900:	4a 81       	ldd	r20, Y+2	; 0x02
   13902:	ca 51       	subi	r28, 0x1A	; 26
   13904:	d1 40       	sbci	r29, 0x01	; 1
   13906:	bc c0       	rjmp	.+376    	; 0x13a80 <Read_Config+0x7b4>
   13908:	00 31       	cpi	r16, 0x10	; 16
   1390a:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   1390c:	09 f4       	brne	.+2      	; 0x13910 <Read_Config+0x644>
   1390e:	7f cd       	rjmp	.-1282   	; 0x1340e <Read_Config+0x142>
   13910:	a4 f4       	brge	.+40     	; 0x1393a <Read_Config+0x66e>
   13912:	01 30       	cpi	r16, 0x01	; 1
   13914:	11 05       	cpc	r17, r1
   13916:	c1 f5       	brne	.+112    	; 0x13988 <Read_Config+0x6bc>
   13918:	6f 71       	andi	r22, 0x1F	; 31
   1391a:	8b e2       	ldi	r24, 0x2B	; 43
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
   1391c:	8c 9d       	mul	r24, r12
   1391e:	f0 01       	movw	r30, r0
   13920:	8d 9d       	mul	r24, r13
   13922:	f0 0d       	add	r31, r0
   13924:	11 24       	eor	r1, r1
   13926:	e2 5f       	subi	r30, 0xF2	; 242
   13928:	f0 4e       	sbci	r31, 0xE0	; 224
   1392a:	61 83       	std	Z+1, r22	; 0x01
   1392c:	c8 5f       	subi	r28, 0xF8	; 248
   1392e:	de 4f       	sbci	r29, 0xFE	; 254
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   13930:	a8 81       	ld	r26, Y
   13932:	b9 81       	ldd	r27, Y+1	; 0x01
   13934:	c8 50       	subi	r28, 0x08	; 8
   13936:	d1 40       	sbci	r29, 0x01	; 1
   13938:	17 c0       	rjmp	.+46     	; 0x13968 <Read_Config+0x69c>
   1393a:	02 31       	cpi	r16, 0x12	; 18
   1393c:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_HEADER:
                switch(tok)
   1393e:	c1 f0       	breq	.+48     	; 0x13970 <Read_Config+0x6a4>
   13940:	0f 31       	cpi	r16, 0x1F	; 31
   13942:	11 05       	cpc	r17, r1
   13944:	09 f5       	brne	.+66     	; 0x13988 <Read_Config+0x6bc>
   13946:	67 70       	andi	r22, 0x07	; 7
   13948:	8b e2       	ldi	r24, 0x2B	; 43
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
                        break;
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
   1394a:	8c 9d       	mul	r24, r12
   1394c:	f0 01       	movw	r30, r0
   1394e:	8d 9d       	mul	r24, r13
   13950:	f0 0d       	add	r31, r0
   13952:	11 24       	eor	r1, r1
   13954:	e2 5f       	subi	r30, 0xF2	; 242
   13956:	f0 4e       	sbci	r31, 0xE0	; 224
   13958:	62 83       	std	Z+2, r22	; 0x02
   1395a:	c8 5f       	subi	r28, 0xF8	; 248
   1395c:	de 4f       	sbci	r29, 0xFE	; 254
                        AMIGOp->HEADER.PPR = 0x07 & val.b;
   1395e:	e8 81       	ld	r30, Y
   13960:	f9 81       	ldd	r31, Y+1	; 0x01
   13962:	c8 50       	subi	r28, 0x08	; 8
   13964:	d1 40       	sbci	r29, 0x01	; 1
   13966:	02 c0       	rjmp	.+4      	; 0x1396c <Read_Config+0x6a0>
   13968:	6c 93       	st	X, r22
   1396a:	51 cd       	rjmp	.-1374   	; 0x1340e <Read_Config+0x142>
                {
                    case TOK_DRIVE:
                        break;
                    case TOK_ADDRESS:
                        Devices[index].ADDRESS = 0x1f & val.b;
                        AMIGOp->HEADER.ADDRESS = 0x1f & val.b;
   1396c:	61 83       	std	Z+1, r22	; 0x01
                        break;
   1396e:	4f cd       	rjmp	.-1378   	; 0x1340e <Read_Config+0x142>
                    case TOK_PPR:
                        Devices[index].PPR = 0x07 & val.b;
                        AMIGOp->HEADER.PPR = 0x07 & val.b;
   13970:	c4 01       	movw	r24, r8
                        break;
   13972:	0e 94 32 2f 	call	0x5e64	; 0x5e64 <stralloc>
                    case TOK_FILE:
                        AMIGOp->HEADER.NAME = stralloc(token);
   13976:	c8 5f       	subi	r28, 0xF8	; 248
   13978:	de 4f       	sbci	r29, 0xFE	; 254
   1397a:	e8 81       	ld	r30, Y
   1397c:	f9 81       	ldd	r31, Y+1	; 0x01
   1397e:	c8 50       	subi	r28, 0x08	; 8
   13980:	d1 40       	sbci	r29, 0x01	; 1
   13982:	93 83       	std	Z+3, r25	; 0x03
   13984:	82 83       	std	Z+2, r24	; 0x02
   13986:	43 cd       	rjmp	.-1402   	; 0x1340e <Read_Config+0x142>
   13988:	ed b7       	in	r30, 0x3d	; 61
                        break;
   1398a:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   1398c:	57 82       	std	Z+7, r5	; 0x07
   1398e:	46 82       	std	Z+6, r4	; 0x06
   13990:	b5 82       	std	Z+5, r11	; 0x05
   13992:	a4 82       	std	Z+4, r10	; 0x04
   13994:	c9 5e       	subi	r28, 0xE9	; 233
   13996:	de 4f       	sbci	r29, 0xFE	; 254
   13998:	28 81       	ld	r18, Y
   1399a:	39 81       	ldd	r19, Y+1	; 0x01
   1399c:	4a 81       	ldd	r20, Y+2	; 0x02
   1399e:	c7 51       	subi	r28, 0x17	; 23
   139a0:	d1 40       	sbci	r29, 0x01	; 1
   139a2:	6e c0       	rjmp	.+220    	; 0x13a80 <Read_Config+0x7b4>
   139a4:	07 31       	cpi	r16, 0x17	; 23
   139a6:	11 05       	cpc	r17, r1
                        break;
                }
                break;

            case AMIGO_CONFIG:
                if(tok == TOK_ID )
   139a8:	59 f4       	brne	.+22     	; 0x139c0 <Read_Config+0x6f4>
   139aa:	96 2f       	mov	r25, r22
   139ac:	87 2f       	mov	r24, r23
                {
                    AMIGOp->CONFIG.ID = val.w;
   139ae:	c8 5f       	subi	r28, 0xF8	; 248
   139b0:	de 4f       	sbci	r29, 0xFE	; 254
   139b2:	e8 81       	ld	r30, Y
   139b4:	f9 81       	ldd	r31, Y+1	; 0x01
   139b6:	c8 50       	subi	r28, 0x08	; 8
   139b8:	d1 40       	sbci	r29, 0x01	; 1
   139ba:	94 83       	std	Z+4, r25	; 0x04
   139bc:	85 83       	std	Z+5, r24	; 0x05
   139be:	27 cd       	rjmp	.-1458   	; 0x1340e <Read_Config+0x142>
   139c0:	ed b7       	in	r30, 0x3d	; 61
   139c2:	fe b7       	in	r31, 0x3e	; 62
                }
                else
                {
                    printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   139c4:	57 82       	std	Z+7, r5	; 0x07
   139c6:	46 82       	std	Z+6, r4	; 0x06
   139c8:	b5 82       	std	Z+5, r11	; 0x05
   139ca:	a4 82       	std	Z+4, r10	; 0x04
   139cc:	cc 5e       	subi	r28, 0xEC	; 236
   139ce:	de 4f       	sbci	r29, 0xFE	; 254
   139d0:	28 81       	ld	r18, Y
   139d2:	39 81       	ldd	r19, Y+1	; 0x01
   139d4:	4a 81       	ldd	r20, Y+2	; 0x02
   139d6:	c4 51       	subi	r28, 0x14	; 20
   139d8:	d1 40       	sbci	r29, 0x01	; 1
   139da:	52 c0       	rjmp	.+164    	; 0x13a80 <Read_Config+0x7b4>
   139dc:	0d 30       	cpi	r16, 0x0D	; 13
   139de:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   139e0:	59 f1       	breq	.+86     	; 0x13a38 <Read_Config+0x76c>
   139e2:	64 f4       	brge	.+24     	; 0x139fc <Read_Config+0x730>
   139e4:	08 30       	cpi	r16, 0x08	; 8
   139e6:	11 05       	cpc	r17, r1
   139e8:	81 f5       	brne	.+96     	; 0x13a4a <Read_Config+0x77e>
   139ea:	96 2f       	mov	r25, r22
   139ec:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   139ee:	c8 5f       	subi	r28, 0xF8	; 248
   139f0:	de 4f       	sbci	r29, 0xFE	; 254
   139f2:	e8 81       	ld	r30, Y
   139f4:	f9 81       	ldd	r31, Y+1	; 0x01
   139f6:	c8 50       	subi	r28, 0x08	; 8
   139f8:	d1 40       	sbci	r29, 0x01	; 1
   139fa:	0f c0       	rjmp	.+30     	; 0x13a1a <Read_Config+0x74e>
   139fc:	06 31       	cpi	r16, 0x16	; 22
   139fe:	11 05       	cpc	r17, r1
                    ++errors;
                }
                break;

            case AMIGO_GEOMETRY:
                switch(tok)
   13a00:	91 f0       	breq	.+36     	; 0x13a26 <Read_Config+0x75a>
   13a02:	02 32       	cpi	r16, 0x22	; 34
   13a04:	11 05       	cpc	r17, r1
   13a06:	09 f5       	brne	.+66     	; 0x13a4a <Read_Config+0x77e>
   13a08:	96 2f       	mov	r25, r22
   13a0a:	87 2f       	mov	r24, r23
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
                        break;
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13a0c:	c8 5f       	subi	r28, 0xF8	; 248
   13a0e:	de 4f       	sbci	r29, 0xFE	; 254
   13a10:	e8 81       	ld	r30, Y
   13a12:	f9 81       	ldd	r31, Y+1	; 0x01
   13a14:	c8 50       	subi	r28, 0x08	; 8
   13a16:	d1 40       	sbci	r29, 0x01	; 1
   13a18:	03 c0       	rjmp	.+6      	; 0x13a20 <Read_Config+0x754>
   13a1a:	96 83       	std	Z+6, r25	; 0x06
   13a1c:	87 83       	std	Z+7, r24	; 0x07

            case AMIGO_GEOMETRY:
                switch(tok)
                {
                    case TOK_BYTES_PER_SECTOR:
                        AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val.w;
   13a1e:	f7 cc       	rjmp	.-1554   	; 0x1340e <Read_Config+0x142>
   13a20:	90 87       	std	Z+8, r25	; 0x08
                        break;
   13a22:	81 87       	std	Z+9, r24	; 0x09
                    case TOK_SECTORS_PER_TRACK:
                        AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val.w;
   13a24:	f4 cc       	rjmp	.-1560   	; 0x1340e <Read_Config+0x142>
   13a26:	c8 5f       	subi	r28, 0xF8	; 248
                        break;
   13a28:	de 4f       	sbci	r29, 0xFE	; 254
                    case TOK_HEADS:
                        AMIGOp->GEOMETRY.HEADS = val.w;
   13a2a:	e8 81       	ld	r30, Y
   13a2c:	f9 81       	ldd	r31, Y+1	; 0x01
   13a2e:	c8 50       	subi	r28, 0x08	; 8
   13a30:	d1 40       	sbci	r29, 0x01	; 1
   13a32:	62 87       	std	Z+10, r22	; 0x0a
   13a34:	73 87       	std	Z+11, r23	; 0x0b
   13a36:	eb cc       	rjmp	.-1578   	; 0x1340e <Read_Config+0x142>
   13a38:	c8 5f       	subi	r28, 0xF8	; 248
                        break;
   13a3a:	de 4f       	sbci	r29, 0xFE	; 254
                    case TOK_CYLINDERS:
                        AMIGOp->GEOMETRY.CYLINDERS = val.w;
   13a3c:	e8 81       	ld	r30, Y
   13a3e:	f9 81       	ldd	r31, Y+1	; 0x01
   13a40:	c8 50       	subi	r28, 0x08	; 8
   13a42:	d1 40       	sbci	r29, 0x01	; 1
   13a44:	64 87       	std	Z+12, r22	; 0x0c
   13a46:	75 87       	std	Z+13, r23	; 0x0d
   13a48:	e2 cc       	rjmp	.-1596   	; 0x1340e <Read_Config+0x142>
   13a4a:	ed b7       	in	r30, 0x3d	; 61
                        break;
   13a4c:	fe b7       	in	r31, 0x3e	; 62
                    default:
                        printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   13a4e:	57 82       	std	Z+7, r5	; 0x07
   13a50:	46 82       	std	Z+6, r4	; 0x06
   13a52:	b5 82       	std	Z+5, r11	; 0x05
   13a54:	a4 82       	std	Z+4, r10	; 0x04
   13a56:	cf 5e       	subi	r28, 0xEF	; 239
   13a58:	de 4f       	sbci	r29, 0xFE	; 254
   13a5a:	28 81       	ld	r18, Y
   13a5c:	39 81       	ldd	r19, Y+1	; 0x01
   13a5e:	4a 81       	ldd	r20, Y+2	; 0x02
   13a60:	c1 51       	subi	r28, 0x11	; 17
   13a62:	d1 40       	sbci	r29, 0x01	; 1
   13a64:	0d c0       	rjmp	.+26     	; 0x13a80 <Read_Config+0x7b4>
   13a66:	ed b7       	in	r30, 0x3d	; 61
   13a68:	fe b7       	in	r31, 0x3e	; 62
                        break;
                }
                break;
#endif                                // #ifdef AMIGO
            default:
                printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   13a6a:	57 82       	std	Z+7, r5	; 0x07
   13a6c:	46 82       	std	Z+6, r4	; 0x06
   13a6e:	b5 82       	std	Z+5, r11	; 0x05
   13a70:	a4 82       	std	Z+4, r10	; 0x04
   13a72:	c2 5f       	subi	r28, 0xF2	; 242
   13a74:	de 4f       	sbci	r29, 0xFE	; 254
   13a76:	28 81       	ld	r18, Y
   13a78:	39 81       	ldd	r19, Y+1	; 0x01
   13a7a:	4a 81       	ldd	r20, Y+2	; 0x02
   13a7c:	ce 50       	subi	r28, 0x0E	; 14
   13a7e:	d1 40       	sbci	r29, 0x01	; 1
   13a80:	21 83       	std	Z+1, r18	; 0x01
   13a82:	32 83       	std	Z+2, r19	; 0x02
   13a84:	43 83       	std	Z+3, r20	; 0x03
   13a86:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   13a8a:	ff ef       	ldi	r31, 0xFF	; 255
   13a8c:	ef 1a       	sub	r14, r31
                ++errors;
   13a8e:	ff 0a       	sbc	r15, r31
   13a90:	be cc       	rjmp	.-1668   	; 0x1340e <Read_Config+0x142>
   13a92:	21 14       	cp	r2, r1
                break;
   13a94:	31 04       	cpc	r3, r1

        }                                         // switch
    }                                             //while
    if(state != START_STATE)
   13a96:	79 f0       	breq	.+30     	; 0x13ab6 <Read_Config+0x7ea>
   13a98:	ed b7       	in	r30, 0x3d	; 61
   13a9a:	fe b7       	in	r31, 0x3e	; 62
    {
        printf("Missing END statement at line:%d\n", lines);
   13a9c:	55 82       	std	Z+5, r5	; 0x05
   13a9e:	44 82       	std	Z+4, r4	; 0x04
   13aa0:	85 ee       	ldi	r24, 0xE5	; 229
   13aa2:	99 e1       	ldi	r25, 0x19	; 25
   13aa4:	a0 e0       	ldi	r26, 0x00	; 0
   13aa6:	81 83       	std	Z+1, r24	; 0x01
   13aa8:	92 83       	std	Z+2, r25	; 0x02
   13aaa:	a3 83       	std	Z+3, r26	; 0x03
   13aac:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   13ab0:	ff ef       	ldi	r31, 0xFF	; 255
   13ab2:	ef 1a       	sub	r14, r31
        ++errors;
   13ab4:	ff 0a       	sbc	r15, r31
   13ab6:	ed b7       	in	r30, 0x3d	; 61
   13ab8:	fe b7       	in	r31, 0x3e	; 62
    }
    printf("Read_Config: read(%d) lines\n", lines);
   13aba:	55 82       	std	Z+5, r5	; 0x05
   13abc:	44 82       	std	Z+4, r4	; 0x04
   13abe:	88 ec       	ldi	r24, 0xC8	; 200
   13ac0:	99 e1       	ldi	r25, 0x19	; 25
   13ac2:	a0 e0       	ldi	r26, 0x00	; 0
   13ac4:	81 83       	std	Z+1, r24	; 0x01
   13ac6:	92 83       	std	Z+2, r25	; 0x02
   13ac8:	a3 83       	std	Z+3, r26	; 0x03
   13aca:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   13ace:	e1 14       	cp	r14, r1
   13ad0:	f1 04       	cpc	r15, r1
    if(errors)
   13ad2:	61 f0       	breq	.+24     	; 0x13aec <Read_Config+0x820>
   13ad4:	ed b7       	in	r30, 0x3d	; 61
   13ad6:	fe b7       	in	r31, 0x3e	; 62
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   13ad8:	f5 82       	std	Z+5, r15	; 0x05
   13ada:	e4 82       	std	Z+4, r14	; 0x04
   13adc:	81 ea       	ldi	r24, 0xA1	; 161
   13ade:	99 e1       	ldi	r25, 0x19	; 25
   13ae0:	a0 e0       	ldi	r26, 0x00	; 0
   13ae2:	81 83       	std	Z+1, r24	; 0x01
   13ae4:	92 83       	std	Z+2, r25	; 0x02
   13ae6:	a3 83       	std	Z+3, r26	; 0x03
   13ae8:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   13aec:	c4 5f       	subi	r28, 0xF4	; 244

    if(fclose(cfg) == EOF)
   13aee:	de 4f       	sbci	r29, 0xFE	; 254
   13af0:	88 81       	ld	r24, Y
   13af2:	99 81       	ldd	r25, Y+1	; 0x01
   13af4:	cc 50       	subi	r28, 0x0C	; 12
   13af6:	d1 40       	sbci	r29, 0x01	; 1
   13af8:	0e 94 31 7b 	call	0xf662	; 0xf662 <fclose>
   13afc:	01 96       	adiw	r24, 0x01	; 1
   13afe:	39 f4       	brne	.+14     	; 0x13b0e <Read_Config+0x842>
   13b00:	80 e7       	ldi	r24, 0x70	; 112
    {
        perror("Read_Config - close error");
   13b02:	9e e0       	ldi	r25, 0x0E	; 14
   13b04:	0e 94 b8 76 	call	0xed70	; 0xed70 <perror>
   13b08:	2f ef       	ldi	r18, 0xFF	; 255
        ++errors;
   13b0a:	e2 1a       	sub	r14, r18
   13b0c:	f2 0a       	sbc	r15, r18
   13b0e:	48 db       	rcall	.-2416   	; 0x131a0 <Post_Config>
    }

// Post process device values
    Post_Config();
   13b10:	c7 01       	movw	r24, r14
   13b12:	c1 5e       	subi	r28, 0xE1	; 225

    return(errors);
   13b14:	de 4f       	sbci	r29, 0xFE	; 254
}
   13b16:	e2 e1       	ldi	r30, 0x12	; 18
   13b18:	0c 94 f4 e0 	jmp	0x1c1e8	; 0x1c1e8 <__epilogue_restores__>

00013b1c <format_drives>:
   13b1c:	2f 92       	push	r2
   13b1e:	3f 92       	push	r3

/// ===============================================
/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   13b20:	4f 92       	push	r4
   13b22:	5f 92       	push	r5
   13b24:	6f 92       	push	r6
   13b26:	7f 92       	push	r7
   13b28:	8f 92       	push	r8
   13b2a:	af 92       	push	r10
   13b2c:	bf 92       	push	r11
   13b2e:	cf 92       	push	r12
   13b30:	df 92       	push	r13
   13b32:	ef 92       	push	r14
   13b34:	ff 92       	push	r15
   13b36:	0f 93       	push	r16
   13b38:	1f 93       	push	r17
   13b3a:	cf 93       	push	r28
   13b3c:	df 93       	push	r29
   13b3e:	cd b7       	in	r28, 0x3d	; 61
   13b40:	de b7       	in	r29, 0x3e	; 62
   13b42:	ce 56       	subi	r28, 0x6E	; 110
   13b44:	d1 09       	sbc	r29, r1
   13b46:	0f b6       	in	r0, 0x3f	; 63
   13b48:	f8 94       	cli
   13b4a:	de bf       	out	0x3e, r29	; 62
   13b4c:	0f be       	out	0x3f, r0	; 63
   13b4e:	cd bf       	out	0x3d, r28	; 61
   13b50:	8e e0       	ldi	r24, 0x0E	; 14
   13b52:	c8 2e       	mov	r12, r24
   13b54:	8f e1       	ldi	r24, 0x1F	; 31
   13b56:	d8 2e       	mov	r13, r24
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
    int ss80 = 0;
    int amigo = 0;
   13b58:	a0 96       	adiw	r28, 0x20	; 32
   13b5a:	1f ae       	std	Y+63, r1	; 0x3f
   13b5c:	1e ae       	std	Y+62, r1	; 0x3e
   13b5e:	a0 97       	sbiw	r28, 0x20	; 32
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
    int ss80 = 0;
   13b60:	6e 96       	adiw	r28, 0x1e	; 30
   13b62:	1f ae       	std	Y+63, r1	; 0x3f
   13b64:	1e ae       	std	Y+62, r1	; 0x3e
   13b66:	6e 97       	sbiw	r28, 0x1e	; 30
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int count =0;
   13b68:	6c 96       	adiw	r28, 0x1c	; 28
   13b6a:	1f ae       	std	Y+63, r1	; 0x3f
   13b6c:	1e ae       	std	Y+62, r1	; 0x3e
   13b6e:	6c 97       	sbiw	r28, 0x1c	; 28
                {
                    printf("Can not use non 256 byte sectors\n");
                    continue;
                }
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   13b70:	85 e5       	ldi	r24, 0x55	; 85
   13b72:	96 e1       	ldi	r25, 0x16	; 22
   13b74:	9c 01       	movw	r18, r24
   13b76:	40 e0       	ldi	r20, 0x00	; 0
   13b78:	a3 96       	adiw	r28, 0x23	; 35
   13b7a:	2d af       	std	Y+61, r18	; 0x3d
   13b7c:	3e af       	std	Y+62, r19	; 0x3e
   13b7e:	4f af       	std	Y+63, r20	; 0x3f
   13b80:	a3 97       	sbiw	r28, 0x23	; 35
                sprintf(label,"AMIGO%d", amigo);
   13b82:	8d e4       	ldi	r24, 0x4D	; 77
   13b84:	96 e1       	ldi	r25, 0x16	; 22
   13b86:	9c 01       	movw	r18, r24
   13b88:	40 e0       	ldi	r20, 0x00	; 0
   13b8a:	a6 96       	adiw	r28, 0x26	; 38
   13b8c:	2d af       	std	Y+61, r18	; 0x3d
   13b8e:	3e af       	std	Y+62, r19	; 0x3e
   13b90:	4f af       	std	Y+63, r20	; 0x3f
   13b92:	a6 97       	sbiw	r28, 0x26	; 38
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1)
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   13b94:	8f e6       	ldi	r24, 0x6F	; 111
   13b96:	96 e1       	ldi	r25, 0x16	; 22
   13b98:	9c 01       	movw	r18, r24
   13b9a:	40 e0       	ldi	r20, 0x00	; 0
   13b9c:	a9 96       	adiw	r28, 0x29	; 41
   13b9e:	2d af       	std	Y+61, r18	; 0x3d
   13ba0:	3e af       	std	Y+62, r19	; 0x3e
   13ba2:	4f af       	std	Y+63, r20	; 0x3f
   13ba4:	a9 97       	sbiw	r28, 0x29	; 41
                }
//SS80p->VOLUME.MAX_CYLINDER;
//SS80p->VOLUME.MAX_HEAD;
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   13ba6:	89 e9       	ldi	r24, 0x99	; 153
   13ba8:	96 e1       	ldi	r25, 0x16	; 22
   13baa:	9c 01       	movw	r18, r24
   13bac:	40 e0       	ldi	r20, 0x00	; 0
   13bae:	ac 96       	adiw	r28, 0x2c	; 44
   13bb0:	2d af       	std	Y+61, r18	; 0x3d
   13bb2:	3e af       	std	Y+62, r19	; 0x3e
   13bb4:	4f af       	std	Y+63, r20	; 0x3f
   13bb6:	ac 97       	sbiw	r28, 0x2c	; 44
                sprintf(label,"SS80-%d", ss80);
   13bb8:	81 e9       	ldi	r24, 0x91	; 145
   13bba:	96 e1       	ldi	r25, 0x16	; 22
   13bbc:	9c 01       	movw	r18, r24
   13bbe:	40 e0       	ldi	r20, 0x00	; 0
   13bc0:	af 96       	adiw	r28, 0x2f	; 47
   13bc2:	2d af       	std	Y+61, r18	; 0x3d
   13bc4:	3e af       	std	Y+62, r19	; 0x3e
   13bc6:	4f af       	std	Y+63, r20	; 0x3f
   13bc8:	af 97       	sbiw	r28, 0x2f	; 47

            if(stat(SS80p->HEADER.NAME, &st) == -1)
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   13bca:	83 eb       	ldi	r24, 0xB3	; 179
   13bcc:	96 e1       	ldi	r25, 0x16	; 22
   13bce:	3c 01       	movw	r6, r24
   13bd0:	81 2c       	mov	r8, r1
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   13bd2:	f6 01       	movw	r30, r12
   13bd4:	80 81       	ld	r24, Z
   13bd6:	88 23       	and	r24, r24
   13bd8:	09 f4       	brne	.+2      	; 0x13bdc <format_drives+0xc0>
   13bda:	ef c0       	rjmp	.+478    	; 0x13dba <format_drives+0x29e>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   13bdc:	83 30       	cpi	r24, 0x03	; 3
   13bde:	09 f0       	breq	.+2      	; 0x13be2 <format_drives+0xc6>
   13be0:	70 c0       	rjmp	.+224    	; 0x13cc2 <format_drives+0x1a6>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   13be2:	a7 a0       	ldd	r10, Z+39	; 0x27
   13be4:	b0 a4       	ldd	r11, Z+40	; 0x28

            if(stat(SS80p->HEADER.NAME, &st) == -1)
   13be6:	be 01       	movw	r22, r28
   13be8:	66 5f       	subi	r22, 0xF6	; 246
   13bea:	7f 4f       	sbci	r23, 0xFF	; 255
   13bec:	f5 01       	movw	r30, r10
   13bee:	82 81       	ldd	r24, Z+2	; 0x02
   13bf0:	93 81       	ldd	r25, Z+3	; 0x03
   13bf2:	0e 94 8c 77 	call	0xef18	; 0xef18 <stat>
   13bf6:	01 96       	adiw	r24, 0x01	; 1
   13bf8:	09 f0       	breq	.+2      	; 0x13bfc <format_drives+0xe0>
   13bfa:	63 c0       	rjmp	.+198    	; 0x13cc2 <format_drives+0x1a6>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   13bfc:	f5 01       	movw	r30, r10
   13bfe:	80 89       	ldd	r24, Z+16	; 0x10
   13c00:	91 89       	ldd	r25, Z+17	; 0x11
   13c02:	81 15       	cp	r24, r1
   13c04:	91 40       	sbci	r25, 0x01	; 1
   13c06:	31 f0       	breq	.+12     	; 0x13c14 <format_drives+0xf8>
                {
                    printf("Can not use non 256 byte sectors\n");
   13c08:	ed b7       	in	r30, 0x3d	; 61
   13c0a:	fe b7       	in	r31, 0x3e	; 62
   13c0c:	61 82       	std	Z+1, r6	; 0x01
   13c0e:	72 82       	std	Z+2, r7	; 0x02
   13c10:	83 82       	std	Z+3, r8	; 0x03
   13c12:	79 c0       	rjmp	.+242    	; 0x13d06 <format_drives+0x1ea>
                    continue;
                }
//SS80p->VOLUME.MAX_CYLINDER;
//SS80p->VOLUME.MAX_HEAD;
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
   13c14:	f6 01       	movw	r30, r12
   13c16:	23 80       	ldd	r2, Z+3	; 0x03
   13c18:	34 80       	ldd	r3, Z+4	; 0x04
   13c1a:	45 80       	ldd	r4, Z+5	; 0x05
   13c1c:	56 80       	ldd	r5, Z+6	; 0x06
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
   13c1e:	ed b7       	in	r30, 0x3d	; 61
   13c20:	fe b7       	in	r31, 0x3e	; 62
   13c22:	26 82       	std	Z+6, r2	; 0x06
   13c24:	37 82       	std	Z+7, r3	; 0x07
   13c26:	40 86       	std	Z+8, r4	; 0x08
   13c28:	51 86       	std	Z+9, r5	; 0x09
   13c2a:	f5 01       	movw	r30, r10
   13c2c:	82 81       	ldd	r24, Z+2	; 0x02
   13c2e:	93 81       	ldd	r25, Z+3	; 0x03
   13c30:	ed b7       	in	r30, 0x3d	; 61
   13c32:	fe b7       	in	r31, 0x3e	; 62
   13c34:	95 83       	std	Z+5, r25	; 0x05
   13c36:	84 83       	std	Z+4, r24	; 0x04
   13c38:	ac 96       	adiw	r28, 0x2c	; 44
   13c3a:	2d ad       	ldd	r18, Y+61	; 0x3d
   13c3c:	3e ad       	ldd	r19, Y+62	; 0x3e
   13c3e:	4f ad       	ldd	r20, Y+63	; 0x3f
   13c40:	ac 97       	sbiw	r28, 0x2c	; 44
   13c42:	21 83       	std	Z+1, r18	; 0x01
   13c44:	32 83       	std	Z+2, r19	; 0x02
   13c46:	43 83       	std	Z+3, r20	; 0x03
   13c48:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
                sprintf(label,"SS80-%d", ss80);
   13c4c:	6e 96       	adiw	r28, 0x1e	; 30
   13c4e:	2e ad       	ldd	r18, Y+62	; 0x3e
   13c50:	3f ad       	ldd	r19, Y+63	; 0x3f
   13c52:	6e 97       	sbiw	r28, 0x1e	; 30
   13c54:	ed b7       	in	r30, 0x3d	; 61
   13c56:	fe b7       	in	r31, 0x3e	; 62
   13c58:	37 83       	std	Z+7, r19	; 0x07
   13c5a:	26 83       	std	Z+6, r18	; 0x06
   13c5c:	af 96       	adiw	r28, 0x2f	; 47
   13c5e:	8d ad       	ldd	r24, Y+61	; 0x3d
   13c60:	9e ad       	ldd	r25, Y+62	; 0x3e
   13c62:	af ad       	ldd	r26, Y+63	; 0x3f
   13c64:	af 97       	sbiw	r28, 0x2f	; 47
   13c66:	83 83       	std	Z+3, r24	; 0x03
   13c68:	94 83       	std	Z+4, r25	; 0x04
   13c6a:	a5 83       	std	Z+5, r26	; 0x05
   13c6c:	2a e3       	ldi	r18, 0x3A	; 58
   13c6e:	30 e0       	ldi	r19, 0x00	; 0
   13c70:	2c 0f       	add	r18, r28
   13c72:	3d 1f       	adc	r19, r29
   13c74:	32 83       	std	Z+2, r19	; 0x02
   13c76:	21 83       	std	Z+1, r18	; 0x01
   13c78:	0e 94 2f 44 	call	0x885e	; 0x885e <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   13c7c:	f5 01       	movw	r30, r10
   13c7e:	a2 80       	ldd	r10, Z+2	; 0x02
   13c80:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors),
   13c82:	c2 01       	movw	r24, r4
   13c84:	b1 01       	movw	r22, r2
   13c86:	41 d1       	rcall	.+642    	; 0x13f0a <lif_dir_count>
   13c88:	9b 01       	movw	r18, r22
   13c8a:	ac 01       	movw	r20, r24
//SS80p->VOLUME.MAX_SECTOR;
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", SS80p->HEADER.NAME, (long) sectors);
                sprintf(label,"SS80-%d", ss80);
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   13c8c:	82 01       	movw	r16, r4
   13c8e:	71 01       	movw	r14, r2
   13c90:	be 01       	movw	r22, r28
   13c92:	66 5c       	subi	r22, 0xC6	; 198
   13c94:	7f 4f       	sbci	r23, 0xFF	; 255
   13c96:	c5 01       	movw	r24, r10
   13c98:	0e 94 cb d9 	call	0x1b396	; 0x1b396 <lif_create_image>
                    lif_dir_count(sectors),
                    sectors);
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif
                ++count;
   13c9c:	6c 96       	adiw	r28, 0x1c	; 28
   13c9e:	2e ad       	ldd	r18, Y+62	; 0x3e
   13ca0:	3f ad       	ldd	r19, Y+63	; 0x3f
   13ca2:	6c 97       	sbiw	r28, 0x1c	; 28
   13ca4:	2f 5f       	subi	r18, 0xFF	; 255
   13ca6:	3f 4f       	sbci	r19, 0xFF	; 255
   13ca8:	6c 96       	adiw	r28, 0x1c	; 28
   13caa:	3f af       	std	Y+63, r19	; 0x3f
   13cac:	2e af       	std	Y+62, r18	; 0x3e
   13cae:	6c 97       	sbiw	r28, 0x1c	; 28
                ++ss80;
   13cb0:	6e 96       	adiw	r28, 0x1e	; 30
   13cb2:	8e ad       	ldd	r24, Y+62	; 0x3e
   13cb4:	9f ad       	ldd	r25, Y+63	; 0x3f
   13cb6:	6e 97       	sbiw	r28, 0x1e	; 30
   13cb8:	01 96       	adiw	r24, 0x01	; 1
   13cba:	6e 96       	adiw	r28, 0x1e	; 30
   13cbc:	9f af       	std	Y+63, r25	; 0x3f
   13cbe:	8e af       	std	Y+62, r24	; 0x3e
   13cc0:	6e 97       	sbiw	r28, 0x1e	; 30

            }
        }                                         // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   13cc2:	f6 01       	movw	r30, r12
   13cc4:	80 81       	ld	r24, Z
   13cc6:	81 30       	cpi	r24, 0x01	; 1
   13cc8:	09 f0       	breq	.+2      	; 0x13ccc <format_drives+0x1b0>
   13cca:	77 c0       	rjmp	.+238    	; 0x13dba <format_drives+0x29e>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   13ccc:	a7 a0       	ldd	r10, Z+39	; 0x27
   13cce:	b0 a4       	ldd	r11, Z+40	; 0x28
            if(stat(AMIGOp->HEADER.NAME, &st) == -1)
   13cd0:	be 01       	movw	r22, r28
   13cd2:	66 5f       	subi	r22, 0xF6	; 246
   13cd4:	7f 4f       	sbci	r23, 0xFF	; 255
   13cd6:	f5 01       	movw	r30, r10
   13cd8:	82 81       	ldd	r24, Z+2	; 0x02
   13cda:	93 81       	ldd	r25, Z+3	; 0x03
   13cdc:	0e 94 8c 77 	call	0xef18	; 0xef18 <stat>
   13ce0:	01 96       	adiw	r24, 0x01	; 1
   13ce2:	09 f0       	breq	.+2      	; 0x13ce6 <format_drives+0x1ca>
   13ce4:	6a c0       	rjmp	.+212    	; 0x13dba <format_drives+0x29e>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   13ce6:	f5 01       	movw	r30, r10
   13ce8:	86 81       	ldd	r24, Z+6	; 0x06
   13cea:	97 81       	ldd	r25, Z+7	; 0x07
   13cec:	81 15       	cp	r24, r1
   13cee:	91 40       	sbci	r25, 0x01	; 1
   13cf0:	69 f0       	breq	.+26     	; 0x13d0c <format_drives+0x1f0>
                {
                    printf("Can not use non 256 byte sectors\n");
   13cf2:	a9 96       	adiw	r28, 0x29	; 41
   13cf4:	2d ad       	ldd	r18, Y+61	; 0x3d
   13cf6:	3e ad       	ldd	r19, Y+62	; 0x3e
   13cf8:	4f ad       	ldd	r20, Y+63	; 0x3f
   13cfa:	a9 97       	sbiw	r28, 0x29	; 41
   13cfc:	ed b7       	in	r30, 0x3d	; 61
   13cfe:	fe b7       	in	r31, 0x3e	; 62
   13d00:	21 83       	std	Z+1, r18	; 0x01
   13d02:	32 83       	std	Z+2, r19	; 0x02
   13d04:	43 83       	std	Z+3, r20	; 0x03
   13d06:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
                    continue;
   13d0a:	57 c0       	rjmp	.+174    	; 0x13dba <format_drives+0x29e>
                }
                sectors = Devices[i].BLOCKS;
   13d0c:	f6 01       	movw	r30, r12
   13d0e:	23 80       	ldd	r2, Z+3	; 0x03
   13d10:	34 80       	ldd	r3, Z+4	; 0x04
   13d12:	45 80       	ldd	r4, Z+5	; 0x05
   13d14:	56 80       	ldd	r5, Z+6	; 0x06
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
   13d16:	ed b7       	in	r30, 0x3d	; 61
   13d18:	fe b7       	in	r31, 0x3e	; 62
   13d1a:	26 82       	std	Z+6, r2	; 0x06
   13d1c:	37 82       	std	Z+7, r3	; 0x07
   13d1e:	40 86       	std	Z+8, r4	; 0x08
   13d20:	51 86       	std	Z+9, r5	; 0x09
   13d22:	f5 01       	movw	r30, r10
   13d24:	82 81       	ldd	r24, Z+2	; 0x02
   13d26:	93 81       	ldd	r25, Z+3	; 0x03
   13d28:	ed b7       	in	r30, 0x3d	; 61
   13d2a:	fe b7       	in	r31, 0x3e	; 62
   13d2c:	95 83       	std	Z+5, r25	; 0x05
   13d2e:	84 83       	std	Z+4, r24	; 0x04
   13d30:	a3 96       	adiw	r28, 0x23	; 35
   13d32:	2d ad       	ldd	r18, Y+61	; 0x3d
   13d34:	3e ad       	ldd	r19, Y+62	; 0x3e
   13d36:	4f ad       	ldd	r20, Y+63	; 0x3f
   13d38:	a3 97       	sbiw	r28, 0x23	; 35
   13d3a:	21 83       	std	Z+1, r18	; 0x01
   13d3c:	32 83       	std	Z+2, r19	; 0x02
   13d3e:	43 83       	std	Z+3, r20	; 0x03
   13d40:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
                sprintf(label,"AMIGO%d", amigo);
   13d44:	a0 96       	adiw	r28, 0x20	; 32
   13d46:	2e ad       	ldd	r18, Y+62	; 0x3e
   13d48:	3f ad       	ldd	r19, Y+63	; 0x3f
   13d4a:	a0 97       	sbiw	r28, 0x20	; 32
   13d4c:	ed b7       	in	r30, 0x3d	; 61
   13d4e:	fe b7       	in	r31, 0x3e	; 62
   13d50:	37 83       	std	Z+7, r19	; 0x07
   13d52:	26 83       	std	Z+6, r18	; 0x06
   13d54:	a6 96       	adiw	r28, 0x26	; 38
   13d56:	8d ad       	ldd	r24, Y+61	; 0x3d
   13d58:	9e ad       	ldd	r25, Y+62	; 0x3e
   13d5a:	af ad       	ldd	r26, Y+63	; 0x3f
   13d5c:	a6 97       	sbiw	r28, 0x26	; 38
   13d5e:	83 83       	std	Z+3, r24	; 0x03
   13d60:	94 83       	std	Z+4, r25	; 0x04
   13d62:	a5 83       	std	Z+5, r26	; 0x05
   13d64:	2a e3       	ldi	r18, 0x3A	; 58
   13d66:	30 e0       	ldi	r19, 0x00	; 0
   13d68:	2c 0f       	add	r18, r28
   13d6a:	3d 1f       	adc	r19, r29
   13d6c:	32 83       	std	Z+2, r19	; 0x02
   13d6e:	21 83       	std	Z+1, r18	; 0x01
   13d70:	0e 94 2f 44 	call	0x885e	; 0x885e <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   13d74:	f5 01       	movw	r30, r10
   13d76:	a2 80       	ldd	r10, Z+2	; 0x02
   13d78:	b3 80       	ldd	r11, Z+3	; 0x03
                    label,
                    lif_dir_count(sectors),
   13d7a:	c2 01       	movw	r24, r4
   13d7c:	b1 01       	movw	r22, r2
   13d7e:	c5 d0       	rcall	.+394    	; 0x13f0a <lif_dir_count>
   13d80:	9b 01       	movw	r18, r22
   13d82:	ac 01       	movw	r20, r24
                }
                sectors = Devices[i].BLOCKS;
                printf("formating %s %ld sectors\n", AMIGOp->HEADER.NAME, (long) sectors);
                sprintf(label,"AMIGO%d", amigo);
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   13d84:	82 01       	movw	r16, r4
   13d86:	71 01       	movw	r14, r2
   13d88:	be 01       	movw	r22, r28
   13d8a:	66 5c       	subi	r22, 0xC6	; 198
   13d8c:	7f 4f       	sbci	r23, 0xFF	; 255
   13d8e:	c5 01       	movw	r24, r10
   13d90:	0e 94 cb d9 	call	0x1b396	; 0x1b396 <lif_create_image>
                    lif_dir_count(sectors),
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
                ++count;
   13d94:	6c 96       	adiw	r28, 0x1c	; 28
   13d96:	2e ad       	ldd	r18, Y+62	; 0x3e
   13d98:	3f ad       	ldd	r19, Y+63	; 0x3f
   13d9a:	6c 97       	sbiw	r28, 0x1c	; 28
   13d9c:	2f 5f       	subi	r18, 0xFF	; 255
   13d9e:	3f 4f       	sbci	r19, 0xFF	; 255
   13da0:	6c 96       	adiw	r28, 0x1c	; 28
   13da2:	3f af       	std	Y+63, r19	; 0x3f
   13da4:	2e af       	std	Y+62, r18	; 0x3e
   13da6:	6c 97       	sbiw	r28, 0x1c	; 28
                ++amigo;
   13da8:	a0 96       	adiw	r28, 0x20	; 32
   13daa:	8e ad       	ldd	r24, Y+62	; 0x3e
   13dac:	9f ad       	ldd	r25, Y+63	; 0x3f
   13dae:	a0 97       	sbiw	r28, 0x20	; 32
   13db0:	01 96       	adiw	r24, 0x01	; 1
   13db2:	a0 96       	adiw	r28, 0x20	; 32
   13db4:	9f af       	std	Y+63, r25	; 0x3f
   13db6:	8e af       	std	Y+62, r24	; 0x3e
   13db8:	a0 97       	sbiw	r28, 0x20	; 32
   13dba:	9b e2       	ldi	r25, 0x2B	; 43
   13dbc:	c9 0e       	add	r12, r25
   13dbe:	d1 1c       	adc	r13, r1
#ifdef AMIGO
///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   13dc0:	a2 e1       	ldi	r26, 0x12	; 18
   13dc2:	ca 16       	cp	r12, r26
   13dc4:	a1 e2       	ldi	r26, 0x21	; 33
   13dc6:	da 06       	cpc	r13, r26
   13dc8:	09 f0       	breq	.+2      	; 0x13dcc <format_drives+0x2b0>
   13dca:	03 cf       	rjmp	.-506    	; 0x13bd2 <format_drives+0xb6>
                ++amigo;
            }
        }
#endif                                    // #ifdef AMIGO
    }
    if(count)
   13dcc:	6c 96       	adiw	r28, 0x1c	; 28
   13dce:	ee ad       	ldd	r30, Y+62	; 0x3e
   13dd0:	ff ad       	ldd	r31, Y+63	; 0x3f
   13dd2:	6c 97       	sbiw	r28, 0x1c	; 28
   13dd4:	ef 2b       	or	r30, r31
   13dd6:	11 f0       	breq	.+4      	; 0x13ddc <format_drives+0x2c0>
        sep();
   13dd8:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <sep>
}
   13ddc:	c2 59       	subi	r28, 0x92	; 146
   13dde:	df 4f       	sbci	r29, 0xFF	; 255
   13de0:	0f b6       	in	r0, 0x3f	; 63
   13de2:	f8 94       	cli
   13de4:	de bf       	out	0x3e, r29	; 62
   13de6:	0f be       	out	0x3f, r0	; 63
   13de8:	cd bf       	out	0x3d, r28	; 61
   13dea:	df 91       	pop	r29
   13dec:	cf 91       	pop	r28
   13dee:	1f 91       	pop	r17
   13df0:	0f 91       	pop	r16
   13df2:	ff 90       	pop	r15
   13df4:	ef 90       	pop	r14
   13df6:	df 90       	pop	r13
   13df8:	cf 90       	pop	r12
   13dfa:	bf 90       	pop	r11
   13dfc:	af 90       	pop	r10
   13dfe:	8f 90       	pop	r8
   13e00:	7f 90       	pop	r7
   13e02:	6f 90       	pop	r6
   13e04:	5f 90       	pop	r5
   13e06:	4f 90       	pop	r4
   13e08:	3f 90       	pop	r3
   13e0a:	2f 90       	pop	r2
   13e0c:	08 95       	ret

00013e0e <hpdir_init>:
/// disk parameters from a single hpdir disk entry
///
///@return void
void hpdir_init()
{
    memset(hpdir.model,0,sizeof(hpdir.model) -1); // 1
   13e0e:	8f e1       	ldi	r24, 0x1F	; 31
   13e10:	e2 e1       	ldi	r30, 0x12	; 18
   13e12:	f1 e2       	ldi	r31, 0x21	; 33
   13e14:	df 01       	movw	r26, r30
   13e16:	98 2f       	mov	r25, r24
   13e18:	1d 92       	st	X+, r1
   13e1a:	9a 95       	dec	r25
   13e1c:	e9 f7       	brne	.-6      	; 0x13e18 <hpdir_init+0xa>
// 2
    memset(hpdir.comment,0,sizeof(hpdir.comment) -1);
   13e1e:	9f e3       	ldi	r25, 0x3F	; 63
   13e20:	e2 e3       	ldi	r30, 0x32	; 50
   13e22:	f1 e2       	ldi	r31, 0x21	; 33
   13e24:	df 01       	movw	r26, r30
   13e26:	1d 92       	st	X+, r1
   13e28:	9a 95       	dec	r25
   13e2a:	e9 f7       	brne	.-6      	; 0x13e26 <hpdir_init+0x18>
    memset(hpdir.TYPE,0,sizeof(hpdir.TYPE) -1);   // 3
   13e2c:	e2 e7       	ldi	r30, 0x72	; 114
   13e2e:	f1 e2       	ldi	r31, 0x21	; 33
   13e30:	df 01       	movw	r26, r30
   13e32:	1d 92       	st	X+, r1
   13e34:	8a 95       	dec	r24
   13e36:	e9 f7       	brne	.-6      	; 0x13e32 <hpdir_init+0x24>
    hpdir.ID = 0;                                 // 4
   13e38:	10 92 92 21 	sts	0x2192, r1	; 0x802192 <hpdir+0x80>
   13e3c:	10 92 93 21 	sts	0x2193, r1	; 0x802193 <hpdir+0x81>
   13e40:	10 92 94 21 	sts	0x2194, r1	; 0x802194 <hpdir+0x82>
   13e44:	10 92 95 21 	sts	0x2195, r1	; 0x802195 <hpdir+0x83>
    hpdir.mask_stat2 = 0;                         // 5
   13e48:	10 92 96 21 	sts	0x2196, r1	; 0x802196 <hpdir+0x84>
   13e4c:	10 92 97 21 	sts	0x2197, r1	; 0x802197 <hpdir+0x85>
   13e50:	10 92 98 21 	sts	0x2198, r1	; 0x802198 <hpdir+0x86>
   13e54:	10 92 99 21 	sts	0x2199, r1	; 0x802199 <hpdir+0x87>
    hpdir.id_stat2 = 0;                           // 6
   13e58:	10 92 9a 21 	sts	0x219A, r1	; 0x80219a <hpdir+0x88>
   13e5c:	10 92 9b 21 	sts	0x219B, r1	; 0x80219b <hpdir+0x89>
   13e60:	10 92 9c 21 	sts	0x219C, r1	; 0x80219c <hpdir+0x8a>
   13e64:	10 92 9d 21 	sts	0x219D, r1	; 0x80219d <hpdir+0x8b>
    hpdir.DEVICE_NUMBER = 0;                      // 7
   13e68:	10 92 9e 21 	sts	0x219E, r1	; 0x80219e <hpdir+0x8c>
   13e6c:	10 92 9f 21 	sts	0x219F, r1	; 0x80219f <hpdir+0x8d>
   13e70:	10 92 a0 21 	sts	0x21A0, r1	; 0x8021a0 <hpdir+0x8e>
   13e74:	10 92 a1 21 	sts	0x21A1, r1	; 0x8021a1 <hpdir+0x8f>
    hpdir.UNITS_INSTALLED = 0x8001;               // 8
   13e78:	81 e0       	ldi	r24, 0x01	; 1
   13e7a:	90 e8       	ldi	r25, 0x80	; 128
   13e7c:	a0 e0       	ldi	r26, 0x00	; 0
   13e7e:	b0 e0       	ldi	r27, 0x00	; 0
   13e80:	80 93 a2 21 	sts	0x21A2, r24	; 0x8021a2 <hpdir+0x90>
   13e84:	90 93 a3 21 	sts	0x21A3, r25	; 0x8021a3 <hpdir+0x91>
   13e88:	a0 93 a4 21 	sts	0x21A4, r26	; 0x8021a4 <hpdir+0x92>
   13e8c:	b0 93 a5 21 	sts	0x21A5, r27	; 0x8021a5 <hpdir+0x93>
    hpdir.CYLINDERS = 0;                          // 9
   13e90:	10 92 a6 21 	sts	0x21A6, r1	; 0x8021a6 <hpdir+0x94>
   13e94:	10 92 a7 21 	sts	0x21A7, r1	; 0x8021a7 <hpdir+0x95>
   13e98:	10 92 a8 21 	sts	0x21A8, r1	; 0x8021a8 <hpdir+0x96>
   13e9c:	10 92 a9 21 	sts	0x21A9, r1	; 0x8021a9 <hpdir+0x97>
    hpdir.HEADS= 0;                               // 10
   13ea0:	10 92 aa 21 	sts	0x21AA, r1	; 0x8021aa <hpdir+0x98>
   13ea4:	10 92 ab 21 	sts	0x21AB, r1	; 0x8021ab <hpdir+0x99>
   13ea8:	10 92 ac 21 	sts	0x21AC, r1	; 0x8021ac <hpdir+0x9a>
   13eac:	10 92 ad 21 	sts	0x21AD, r1	; 0x8021ad <hpdir+0x9b>
    hpdir.SECTORS= 0;                             // 11
   13eb0:	10 92 ae 21 	sts	0x21AE, r1	; 0x8021ae <hpdir+0x9c>
   13eb4:	10 92 af 21 	sts	0x21AF, r1	; 0x8021af <hpdir+0x9d>
   13eb8:	10 92 b0 21 	sts	0x21B0, r1	; 0x8021b0 <hpdir+0x9e>
   13ebc:	10 92 b1 21 	sts	0x21B1, r1	; 0x8021b1 <hpdir+0x9f>
    hpdir.BYTES_PER_SECTOR = 0;                   // 12
   13ec0:	10 92 b2 21 	sts	0x21B2, r1	; 0x8021b2 <hpdir+0xa0>
   13ec4:	10 92 b3 21 	sts	0x21B3, r1	; 0x8021b3 <hpdir+0xa1>
   13ec8:	10 92 b4 21 	sts	0x21B4, r1	; 0x8021b4 <hpdir+0xa2>
   13ecc:	10 92 b5 21 	sts	0x21B5, r1	; 0x8021b5 <hpdir+0xa3>
    hpdir.INTERLEAVE = 0;                         // 13
   13ed0:	10 92 b6 21 	sts	0x21B6, r1	; 0x8021b6 <hpdir+0xa4>
   13ed4:	10 92 b7 21 	sts	0x21B7, r1	; 0x8021b7 <hpdir+0xa5>
   13ed8:	10 92 b8 21 	sts	0x21B8, r1	; 0x8021b8 <hpdir+0xa6>
   13edc:	10 92 b9 21 	sts	0x21B9, r1	; 0x8021b9 <hpdir+0xa7>
    hpdir.FIXED = 1;                              // 14 ALWAYS 1
   13ee0:	81 e0       	ldi	r24, 0x01	; 1
   13ee2:	90 e0       	ldi	r25, 0x00	; 0
   13ee4:	a0 e0       	ldi	r26, 0x00	; 0
   13ee6:	b0 e0       	ldi	r27, 0x00	; 0
   13ee8:	80 93 ba 21 	sts	0x21BA, r24	; 0x8021ba <hpdir+0xa8>
   13eec:	90 93 bb 21 	sts	0x21BB, r25	; 0x8021bb <hpdir+0xa9>
   13ef0:	a0 93 bc 21 	sts	0x21BC, r26	; 0x8021bc <hpdir+0xaa>
   13ef4:	b0 93 bd 21 	sts	0x21BD, r27	; 0x8021bd <hpdir+0xab>

// Computed values
    hpdir.BLOCKS = 0;
   13ef8:	10 92 be 21 	sts	0x21BE, r1	; 0x8021be <hpdir+0xac>
   13efc:	10 92 bf 21 	sts	0x21BF, r1	; 0x8021bf <hpdir+0xad>
   13f00:	10 92 c0 21 	sts	0x21C0, r1	; 0x8021c0 <hpdir+0xae>
   13f04:	10 92 c1 21 	sts	0x21C1, r1	; 0x8021c1 <hpdir+0xaf>
   13f08:	08 95       	ret

00013f0a <lif_dir_count>:
///@param[in] blocks: size of LIF image in total
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
   13f0a:	20 e0       	ldi	r18, 0x00	; 0
   13f0c:	30 e0       	ldi	r19, 0x00	; 0
    long num = 1;
    while(blocks)
   13f0e:	61 15       	cp	r22, r1
   13f10:	71 05       	cpc	r23, r1
   13f12:	81 05       	cpc	r24, r1
   13f14:	91 05       	cpc	r25, r1
   13f16:	39 f0       	breq	.+14     	; 0x13f26 <lif_dir_count+0x1c>
    {
        scale++;
   13f18:	2f 5f       	subi	r18, 0xFF	; 255
   13f1a:	3f 4f       	sbci	r19, 0xFF	; 255
        blocks >>= 1;
   13f1c:	95 95       	asr	r25
   13f1e:	87 95       	ror	r24
   13f20:	77 95       	ror	r23
   13f22:	67 95       	ror	r22
   13f24:	f4 cf       	rjmp	.-24     	; 0x13f0e <lif_dir_count+0x4>
    }
    scale>>=1;
   13f26:	35 95       	asr	r19
   13f28:	27 95       	ror	r18
///
///@return Size of LIF directory in blocks
long lif_dir_count(long blocks)
{
    int scale = 0;
    long num = 1;
   13f2a:	61 e0       	ldi	r22, 0x01	; 1
   13f2c:	70 e0       	ldi	r23, 0x00	; 0
   13f2e:	80 e0       	ldi	r24, 0x00	; 0
   13f30:	90 e0       	ldi	r25, 0x00	; 0
    {
        scale++;
        blocks >>= 1;
    }
    scale>>=1;
    while(scale--)
   13f32:	21 50       	subi	r18, 0x01	; 1
   13f34:	31 09       	sbc	r19, r1
   13f36:	28 f0       	brcs	.+10     	; 0x13f42 <lif_dir_count+0x38>
        num <<=1;
   13f38:	66 0f       	add	r22, r22
   13f3a:	77 1f       	adc	r23, r23
   13f3c:	88 1f       	adc	r24, r24
   13f3e:	99 1f       	adc	r25, r25
   13f40:	f8 cf       	rjmp	.-16     	; 0x13f32 <lif_dir_count+0x28>
    return(num);
}
   13f42:	08 95       	ret

00013f44 <hpdir_find_drive>:
///
///@param[in] model: model string
///
///@return 1 on sucess or 0 on fail
int hpdir_find_drive(char *model, int list, int verbose)
{
   13f44:	2f 92       	push	r2
   13f46:	3f 92       	push	r3
   13f48:	4f 92       	push	r4
   13f4a:	5f 92       	push	r5
   13f4c:	6f 92       	push	r6
   13f4e:	8f 92       	push	r8
   13f50:	9f 92       	push	r9
   13f52:	af 92       	push	r10
   13f54:	bf 92       	push	r11
   13f56:	cf 92       	push	r12
   13f58:	df 92       	push	r13
   13f5a:	ef 92       	push	r14
   13f5c:	ff 92       	push	r15
   13f5e:	0f 93       	push	r16
   13f60:	1f 93       	push	r17
   13f62:	cf 93       	push	r28
   13f64:	df 93       	push	r29
   13f66:	cd b7       	in	r28, 0x3d	; 61
   13f68:	de b7       	in	r29, 0x3e	; 62
   13f6a:	c9 58       	subi	r28, 0x89	; 137
   13f6c:	d1 40       	sbci	r29, 0x01	; 1
   13f6e:	0f b6       	in	r0, 0x3f	; 63
   13f70:	f8 94       	cli
   13f72:	de bf       	out	0x3e, r29	; 62
   13f74:	0f be       	out	0x3f, r0	; 63
   13f76:	cd bf       	out	0x3d, r28	; 61
   13f78:	6c 01       	movw	r12, r24
   13f7a:	c8 57       	subi	r28, 0x78	; 120
   13f7c:	de 4f       	sbci	r29, 0xFE	; 254
   13f7e:	79 83       	std	Y+1, r23	; 0x01
   13f80:	68 83       	st	Y, r22
   13f82:	c8 58       	subi	r28, 0x88	; 136
   13f84:	d1 40       	sbci	r29, 0x01	; 1
   13f86:	5a 01       	movw	r10, r20
    FILE *cfg;
    char *ptr;
    char str[256];
    char token[128];

    hpdir_init();
   13f88:	42 df       	rcall	.-380    	; 0x13e0e <hpdir_init>

    cfg = fopen("hpdir.ini","rb");
   13f8a:	6e ef       	ldi	r22, 0xFE	; 254
   13f8c:	78 e0       	ldi	r23, 0x08	; 8
   13f8e:	81 e6       	ldi	r24, 0x61	; 97
   13f90:	90 e1       	ldi	r25, 0x10	; 16
   13f92:	0e 94 87 7c 	call	0xf90e	; 0xf90e <fopen>
   13f96:	7c 01       	movw	r14, r24

#ifndef LIF_STAND_ALONE
    if(cfg == NULL)
   13f98:	89 2b       	or	r24, r25
   13f9a:	49 f4       	brne	.+18     	; 0x13fae <hpdir_find_drive+0x6a>
        cfg = fopen("/hpdir.ini","rb");
   13f9c:	6e ef       	ldi	r22, 0xFE	; 254
   13f9e:	78 e0       	ldi	r23, 0x08	; 8
   13fa0:	80 e6       	ldi	r24, 0x60	; 96
   13fa2:	90 e1       	ldi	r25, 0x10	; 16
   13fa4:	0e 94 87 7c 	call	0xf90e	; 0xf90e <fopen>
   13fa8:	7c 01       	movw	r14, r24
        strcat  (name, "/hpdir.ini");
        cfg = fopen(name, "rb");
    }
#endif

    if(cfg == NULL)
   13faa:	89 2b       	or	r24, r25
   13fac:	51 f0       	breq	.+20     	; 0x13fc2 <hpdir_find_drive+0x7e>
// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);

        if(MATCHI(token,"[driveinfo]"))
        {
            driveinfo = 1;
   13fae:	21 2c       	mov	r2, r1
   13fb0:	31 2c       	mov	r3, r1

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   13fb2:	8e 01       	movw	r16, r28
   13fb4:	08 5f       	subi	r16, 0xF8	; 248
   13fb6:	1e 4f       	sbci	r17, 0xFE	; 254
        if( driveinfo != 1)
            continue;

        if(list)
        {
            printf("%s %s\n", token, ptr);
   13fb8:	8b ef       	ldi	r24, 0xFB	; 251
   13fba:	9c e1       	ldi	r25, 0x1C	; 28
   13fbc:	2c 01       	movw	r4, r24
   13fbe:	61 2c       	mov	r6, r1
   13fc0:	1e c0       	rjmp	.+60     	; 0x13ffe <hpdir_find_drive+0xba>
    }
#endif

    if(cfg == NULL)
    {
        if(verbose)
   13fc2:	ab 28       	or	r10, r11
   13fc4:	09 f4       	brne	.+2      	; 0x13fc8 <hpdir_find_drive+0x84>
   13fc6:	69 c1       	rjmp	.+722    	; 0x1429a <hpdir_find_drive+0x356>
            printf("Error: hpdir.ini not found!\n");
   13fc8:	82 e0       	ldi	r24, 0x02	; 2
   13fca:	9d e1       	ldi	r25, 0x1D	; 29
   13fcc:	a0 e0       	ldi	r26, 0x00	; 0
   13fce:	ed b7       	in	r30, 0x3d	; 61
   13fd0:	fe b7       	in	r31, 0x3e	; 62
   13fd2:	81 83       	std	Z+1, r24	; 0x01
   13fd4:	92 83       	std	Z+2, r25	; 0x02
   13fd6:	a3 83       	std	Z+3, r26	; 0x03
   13fd8:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   13fdc:	5e c1       	rjmp	.+700    	; 0x1429a <hpdir_find_drive+0x356>
    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        errors = 0;
        ptr = str;

        trim_tail(ptr);
   13fde:	ce 01       	movw	r24, r28
   13fe0:	08 96       	adiw	r24, 0x08	; 8
   13fe2:	0e 94 62 2f 	call	0x5ec4	; 0x5ec4 <trim_tail>
        ptr = skipspaces(ptr);
   13fe6:	ce 01       	movw	r24, r28
   13fe8:	08 96       	adiw	r24, 0x08	; 8
   13fea:	0e 94 72 2f 	call	0x5ee4	; 0x5ee4 <skipspaces>

        len = strlen(ptr);
   13fee:	fc 01       	movw	r30, r24
   13ff0:	01 90       	ld	r0, Z+
   13ff2:	00 20       	and	r0, r0
   13ff4:	e9 f7       	brne	.-6      	; 0x13ff0 <hpdir_find_drive+0xac>
   13ff6:	31 97       	sbiw	r30, 0x01	; 1
        if(!len)
   13ff8:	8e 17       	cp	r24, r30
   13ffa:	9f 07       	cpc	r25, r31
   13ffc:	51 f4       	brne	.+20     	; 0x14012 <hpdir_find_drive+0xce>
        return(0);
    }

// printf("Searching /hpdir.ini for model:%s\n", model);

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   13ffe:	a7 01       	movw	r20, r14
   14000:	6e ef       	ldi	r22, 0xFE	; 254
   14002:	70 e0       	ldi	r23, 0x00	; 0
   14004:	ce 01       	movw	r24, r28
   14006:	08 96       	adiw	r24, 0x08	; 8
   14008:	0e 94 9f 74 	call	0xe93e	; 0xe93e <fgets>
   1400c:	89 2b       	or	r24, r25
   1400e:	39 f7       	brne	.-50     	; 0x13fde <hpdir_find_drive+0x9a>
   14010:	0c c0       	rjmp	.+24     	; 0x1402a <hpdir_find_drive+0xe6>
        len = strlen(ptr);
        if(!len)
            continue;

// Skip comments
        if(*ptr == ';' || *ptr == '#' )
   14012:	fc 01       	movw	r30, r24
   14014:	20 81       	ld	r18, Z
   14016:	2b 33       	cpi	r18, 0x3B	; 59
   14018:	91 f3       	breq	.-28     	; 0x13ffe <hpdir_find_drive+0xba>
   1401a:	23 32       	cpi	r18, 0x23	; 35
   1401c:	81 f3       	breq	.-32     	; 0x13ffe <hpdir_find_drive+0xba>
            continue;

        if(*ptr == '[' && driveinfo == 1 )
   1401e:	2b 35       	cpi	r18, 0x5B	; 91
   14020:	31 f4       	brne	.+12     	; 0x1402e <hpdir_find_drive+0xea>
   14022:	f1 e0       	ldi	r31, 0x01	; 1
   14024:	2f 16       	cp	r2, r31
   14026:	31 04       	cpc	r3, r1
   14028:	11 f4       	brne	.+4      	; 0x1402e <hpdir_find_drive+0xea>
int hpdir_find_drive(char *model, int list, int verbose)
{
    int len;
    int errors = 0;
    int driveinfo=0;
    int found = 0;
   1402a:	00 e0       	ldi	r16, 0x00	; 0
   1402c:	30 c1       	rjmp	.+608    	; 0x1428e <hpdir_find_drive+0x34a>

        if(*ptr == '[' && driveinfo == 1 )
            break;

// MODEL something else
        ptr = get_token(ptr, token,     sizeof(token)-2);
   1402e:	4e e7       	ldi	r20, 0x7E	; 126
   14030:	50 e0       	ldi	r21, 0x00	; 0
   14032:	b8 01       	movw	r22, r16
   14034:	0e 94 44 30 	call	0x6088	; 0x6088 <get_token>
   14038:	4c 01       	movw	r8, r24

        if(MATCHI(token,"[driveinfo]"))
   1403a:	6b e6       	ldi	r22, 0x6B	; 107
   1403c:	70 e1       	ldi	r23, 0x10	; 16
   1403e:	c8 01       	movw	r24, r16
   14040:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHI>
   14044:	89 2b       	or	r24, r25
   14046:	21 f0       	breq	.+8      	; 0x14050 <hpdir_find_drive+0x10c>
        {
            driveinfo = 1;
   14048:	22 24       	eor	r2, r2
   1404a:	23 94       	inc	r2
   1404c:	31 2c       	mov	r3, r1
   1404e:	d7 cf       	rjmp	.-82     	; 0x13ffe <hpdir_find_drive+0xba>
            continue;
        }

        if( driveinfo != 1)
   14050:	21 e0       	ldi	r18, 0x01	; 1
   14052:	22 16       	cp	r2, r18
   14054:	31 04       	cpc	r3, r1
   14056:	99 f6       	brne	.-90     	; 0x13ffe <hpdir_find_drive+0xba>
            continue;

        if(list)
   14058:	c8 57       	subi	r28, 0x78	; 120
   1405a:	de 4f       	sbci	r29, 0xFE	; 254
   1405c:	88 81       	ld	r24, Y
   1405e:	99 81       	ldd	r25, Y+1	; 0x01
   14060:	c8 58       	subi	r28, 0x88	; 136
   14062:	d1 40       	sbci	r29, 0x01	; 1
   14064:	89 2b       	or	r24, r25
   14066:	61 f0       	breq	.+24     	; 0x14080 <hpdir_find_drive+0x13c>
        {
            printf("%s %s\n", token, ptr);
   14068:	ed b7       	in	r30, 0x3d	; 61
   1406a:	fe b7       	in	r31, 0x3e	; 62
   1406c:	97 82       	std	Z+7, r9	; 0x07
   1406e:	86 82       	std	Z+6, r8	; 0x06
   14070:	15 83       	std	Z+5, r17	; 0x05
   14072:	04 83       	std	Z+4, r16	; 0x04
   14074:	41 82       	std	Z+1, r4	; 0x01
   14076:	52 82       	std	Z+2, r5	; 0x02
   14078:	63 82       	std	Z+3, r6	; 0x03
   1407a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            continue;
   1407e:	bf cf       	rjmp	.-130    	; 0x13ffe <hpdir_find_drive+0xba>
        }

        if ( ! MATCHI(model,token) )
   14080:	b8 01       	movw	r22, r16
   14082:	c6 01       	movw	r24, r12
   14084:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHI>
   14088:	89 2b       	or	r24, r25
            continue;

        hpdir_init();
   1408a:	f1 f2       	breq	.-68     	; 0x14048 <hpdir_find_drive+0x104>
   1408c:	c0 de       	rcall	.-640    	; 0x13e0e <hpdir_init>

        if(verbose)
   1408e:	ab 28       	or	r10, r11
   14090:	61 f0       	breq	.+24     	; 0x140aa <hpdir_find_drive+0x166>
            printf("Found Model: %s\n", model);
   14092:	ed b7       	in	r30, 0x3d	; 61
   14094:	fe b7       	in	r31, 0x3e	; 62
   14096:	d5 82       	std	Z+5, r13	; 0x05
   14098:	c4 82       	std	Z+4, r12	; 0x04
   1409a:	8a ee       	ldi	r24, 0xEA	; 234
   1409c:	9c e1       	ldi	r25, 0x1C	; 28
   1409e:	a0 e0       	ldi	r26, 0x00	; 0
   140a0:	81 83       	std	Z+1, r24	; 0x01
   140a2:	92 83       	std	Z+2, r25	; 0x02
   140a4:	a3 83       	std	Z+3, r26	; 0x03
   140a6:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

// 1 Model
        strncpy(hpdir.model,token,sizeof(hpdir.model)-2);
   140aa:	4e e1       	ldi	r20, 0x1E	; 30
   140ac:	50 e0       	ldi	r21, 0x00	; 0
   140ae:	b8 01       	movw	r22, r16
   140b0:	82 e1       	ldi	r24, 0x12	; 18
   140b2:	91 e2       	ldi	r25, 0x21	; 33
   140b4:	0e 94 8f 2e 	call	0x5d1e	; 0x5d1e <strncpy>

// =
        ptr = get_token(ptr, token,     sizeof(token)-2);
   140b8:	4e e7       	ldi	r20, 0x7E	; 126
   140ba:	50 e0       	ldi	r21, 0x00	; 0
   140bc:	b8 01       	movw	r22, r16
   140be:	c4 01       	movw	r24, r8
   140c0:	0e 94 44 30 	call	0x6088	; 0x6088 <get_token>

// 2 Comment
        ptr = get_token(ptr, hpdir.comment, sizeof(hpdir.comment)-2);
   140c4:	4e e3       	ldi	r20, 0x3E	; 62
   140c6:	50 e0       	ldi	r21, 0x00	; 0
   140c8:	62 e3       	ldi	r22, 0x32	; 50
   140ca:	71 e2       	ldi	r23, 0x21	; 33
   140cc:	0e 94 44 30 	call	0x6088	; 0x6088 <get_token>

// 3 AMIGO/SS80/CS80
        ptr = get_token(ptr, hpdir.TYPE,  sizeof(hpdir.TYPE)-2);
   140d0:	4e e1       	ldi	r20, 0x1E	; 30
   140d2:	50 e0       	ldi	r21, 0x00	; 0
   140d4:	62 e7       	ldi	r22, 0x72	; 114
   140d6:	71 e2       	ldi	r23, 0x21	; 33
   140d8:	0e 94 44 30 	call	0x6088	; 0x6088 <get_token>

// 4 Identify ID
        ptr = get_token(ptr, token,         sizeof(token)-2);
   140dc:	4e e7       	ldi	r20, 0x7E	; 126
   140de:	50 e0       	ldi	r21, 0x00	; 0
   140e0:	b8 01       	movw	r22, r16
   140e2:	0e 94 44 30 	call	0x6088	; 0x6088 <get_token>
   140e6:	6c 01       	movw	r12, r24
        hpdir.ID = get_value(token);
   140e8:	c8 01       	movw	r24, r16
   140ea:	0e 94 87 30 	call	0x610e	; 0x610e <get_value>
   140ee:	60 93 92 21 	sts	0x2192, r22	; 0x802192 <hpdir+0x80>
   140f2:	70 93 93 21 	sts	0x2193, r23	; 0x802193 <hpdir+0x81>
   140f6:	80 93 94 21 	sts	0x2194, r24	; 0x802194 <hpdir+0x82>
   140fa:	90 93 95 21 	sts	0x2195, r25	; 0x802195 <hpdir+0x83>

// 5 MASK STAT 2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   140fe:	4e e7       	ldi	r20, 0x7E	; 126
   14100:	50 e0       	ldi	r21, 0x00	; 0
   14102:	b8 01       	movw	r22, r16
   14104:	c6 01       	movw	r24, r12
   14106:	0e 94 44 30 	call	0x6088	; 0x6088 <get_token>
   1410a:	6c 01       	movw	r12, r24
        hpdir.mask_stat2 = get_value(token);
   1410c:	c8 01       	movw	r24, r16
   1410e:	0e 94 87 30 	call	0x610e	; 0x610e <get_value>
   14112:	60 93 96 21 	sts	0x2196, r22	; 0x802196 <hpdir+0x84>
   14116:	70 93 97 21 	sts	0x2197, r23	; 0x802197 <hpdir+0x85>
   1411a:	80 93 98 21 	sts	0x2198, r24	; 0x802198 <hpdir+0x86>
   1411e:	90 93 99 21 	sts	0x2199, r25	; 0x802199 <hpdir+0x87>

// 6 STAT2
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14122:	4e e7       	ldi	r20, 0x7E	; 126
   14124:	50 e0       	ldi	r21, 0x00	; 0
   14126:	b8 01       	movw	r22, r16
   14128:	c6 01       	movw	r24, r12
   1412a:	0e 94 44 30 	call	0x6088	; 0x6088 <get_token>
   1412e:	6c 01       	movw	r12, r24
        hpdir.id_stat2 = get_value(token);
   14130:	c8 01       	movw	r24, r16
   14132:	0e 94 87 30 	call	0x610e	; 0x610e <get_value>
   14136:	60 93 9a 21 	sts	0x219A, r22	; 0x80219a <hpdir+0x88>
   1413a:	70 93 9b 21 	sts	0x219B, r23	; 0x80219b <hpdir+0x89>
   1413e:	80 93 9c 21 	sts	0x219C, r24	; 0x80219c <hpdir+0x8a>
   14142:	90 93 9d 21 	sts	0x219D, r25	; 0x80219d <hpdir+0x8b>

// 7 BCD include model number
        ptr = get_token(ptr, token,         sizeof(token)-2);
   14146:	4e e7       	ldi	r20, 0x7E	; 126
   14148:	50 e0       	ldi	r21, 0x00	; 0
   1414a:	b8 01       	movw	r22, r16
   1414c:	c6 01       	movw	r24, r12
   1414e:	0e 94 44 30 	call	0x6088	; 0x6088 <get_token>
   14152:	6c 01       	movw	r12, r24
        hpdir.DEVICE_NUMBER = get_value(token);
   14154:	c8 01       	movw	r24, r16
   14156:	0e 94 87 30 	call	0x610e	; 0x610e <get_value>
   1415a:	60 93 9e 21 	sts	0x219E, r22	; 0x80219e <hpdir+0x8c>
   1415e:	70 93 9f 21 	sts	0x219F, r23	; 0x80219f <hpdir+0x8d>
   14162:	80 93 a0 21 	sts	0x21A0, r24	; 0x8021a0 <hpdir+0x8e>
   14166:	90 93 a1 21 	sts	0x21A1, r25	; 0x8021a1 <hpdir+0x8f>

// 8 Units installed
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1416a:	4e e7       	ldi	r20, 0x7E	; 126
   1416c:	50 e0       	ldi	r21, 0x00	; 0
   1416e:	b8 01       	movw	r22, r16
   14170:	c6 01       	movw	r24, r12
   14172:	0e 94 44 30 	call	0x6088	; 0x6088 <get_token>
   14176:	6c 01       	movw	r12, r24
        hpdir.UNITS_INSTALLED = get_value(token);
   14178:	c8 01       	movw	r24, r16
   1417a:	0e 94 87 30 	call	0x610e	; 0x610e <get_value>
   1417e:	60 93 a2 21 	sts	0x21A2, r22	; 0x8021a2 <hpdir+0x90>
   14182:	70 93 a3 21 	sts	0x21A3, r23	; 0x8021a3 <hpdir+0x91>
   14186:	80 93 a4 21 	sts	0x21A4, r24	; 0x8021a4 <hpdir+0x92>
   1418a:	90 93 a5 21 	sts	0x21A5, r25	; 0x8021a5 <hpdir+0x93>

// 9 Cylinders
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1418e:	4e e7       	ldi	r20, 0x7E	; 126
   14190:	50 e0       	ldi	r21, 0x00	; 0
   14192:	b8 01       	movw	r22, r16
   14194:	c6 01       	movw	r24, r12
   14196:	0e 94 44 30 	call	0x6088	; 0x6088 <get_token>
   1419a:	6c 01       	movw	r12, r24
        hpdir.CYLINDERS = get_value(token);
   1419c:	c8 01       	movw	r24, r16
   1419e:	0e 94 87 30 	call	0x610e	; 0x610e <get_value>
   141a2:	60 93 a6 21 	sts	0x21A6, r22	; 0x8021a6 <hpdir+0x94>
   141a6:	70 93 a7 21 	sts	0x21A7, r23	; 0x8021a7 <hpdir+0x95>
   141aa:	80 93 a8 21 	sts	0x21A8, r24	; 0x8021a8 <hpdir+0x96>
   141ae:	90 93 a9 21 	sts	0x21A9, r25	; 0x8021a9 <hpdir+0x97>

// 10 Heads
        ptr = get_token(ptr, token,         sizeof(token)-2);
   141b2:	4e e7       	ldi	r20, 0x7E	; 126
   141b4:	50 e0       	ldi	r21, 0x00	; 0
   141b6:	b8 01       	movw	r22, r16
   141b8:	c6 01       	movw	r24, r12
   141ba:	0e 94 44 30 	call	0x6088	; 0x6088 <get_token>
   141be:	6c 01       	movw	r12, r24
        hpdir.HEADS = get_value(token);
   141c0:	c8 01       	movw	r24, r16
   141c2:	0e 94 87 30 	call	0x610e	; 0x610e <get_value>
   141c6:	60 93 aa 21 	sts	0x21AA, r22	; 0x8021aa <hpdir+0x98>
   141ca:	70 93 ab 21 	sts	0x21AB, r23	; 0x8021ab <hpdir+0x99>
   141ce:	80 93 ac 21 	sts	0x21AC, r24	; 0x8021ac <hpdir+0x9a>
   141d2:	90 93 ad 21 	sts	0x21AD, r25	; 0x8021ad <hpdir+0x9b>

// 11 Sectors
        ptr = get_token(ptr, token,         sizeof(token)-2);
   141d6:	4e e7       	ldi	r20, 0x7E	; 126
   141d8:	50 e0       	ldi	r21, 0x00	; 0
   141da:	b8 01       	movw	r22, r16
   141dc:	c6 01       	movw	r24, r12
   141de:	0e 94 44 30 	call	0x6088	; 0x6088 <get_token>
   141e2:	6c 01       	movw	r12, r24
        hpdir.SECTORS = get_value(token);
   141e4:	c8 01       	movw	r24, r16
   141e6:	0e 94 87 30 	call	0x610e	; 0x610e <get_value>
   141ea:	60 93 ae 21 	sts	0x21AE, r22	; 0x8021ae <hpdir+0x9c>
   141ee:	70 93 af 21 	sts	0x21AF, r23	; 0x8021af <hpdir+0x9d>
   141f2:	80 93 b0 21 	sts	0x21B0, r24	; 0x8021b0 <hpdir+0x9e>
   141f6:	90 93 b1 21 	sts	0x21B1, r25	; 0x8021b1 <hpdir+0x9f>

// 12 Bytes Per Block/Sector
        ptr = get_token(ptr, token,         sizeof(token)-2);
   141fa:	4e e7       	ldi	r20, 0x7E	; 126
   141fc:	50 e0       	ldi	r21, 0x00	; 0
   141fe:	b8 01       	movw	r22, r16
   14200:	c6 01       	movw	r24, r12
   14202:	0e 94 44 30 	call	0x6088	; 0x6088 <get_token>
   14206:	6c 01       	movw	r12, r24
        hpdir.BYTES_PER_SECTOR = get_value(token);
   14208:	c8 01       	movw	r24, r16
   1420a:	0e 94 87 30 	call	0x610e	; 0x610e <get_value>
   1420e:	60 93 b2 21 	sts	0x21B2, r22	; 0x8021b2 <hpdir+0xa0>
   14212:	70 93 b3 21 	sts	0x21B3, r23	; 0x8021b3 <hpdir+0xa1>
   14216:	80 93 b4 21 	sts	0x21B4, r24	; 0x8021b4 <hpdir+0xa2>
   1421a:	90 93 b5 21 	sts	0x21B5, r25	; 0x8021b5 <hpdir+0xa3>

// 13 Interleave
        ptr = get_token(ptr, token,         sizeof(token)-2);
   1421e:	4e e7       	ldi	r20, 0x7E	; 126
   14220:	50 e0       	ldi	r21, 0x00	; 0
   14222:	b8 01       	movw	r22, r16
   14224:	c6 01       	movw	r24, r12
   14226:	0e 94 44 30 	call	0x6088	; 0x6088 <get_token>
        hpdir.INTERLEAVE = get_value(token);
   1422a:	c8 01       	movw	r24, r16
   1422c:	0e 94 87 30 	call	0x610e	; 0x610e <get_value>
   14230:	60 93 b6 21 	sts	0x21B6, r22	; 0x8021b6 <hpdir+0xa4>
   14234:	70 93 b7 21 	sts	0x21B7, r23	; 0x8021b7 <hpdir+0xa5>
   14238:	80 93 b8 21 	sts	0x21B8, r24	; 0x8021b8 <hpdir+0xa6>
   1423c:	90 93 b9 21 	sts	0x21B9, r25	; 0x8021b9 <hpdir+0xa7>

// Computed values
        hpdir.BLOCKS = ( hpdir.CYLINDERS * hpdir.HEADS * hpdir.SECTORS );
   14240:	20 91 a6 21 	lds	r18, 0x21A6	; 0x8021a6 <hpdir+0x94>
   14244:	30 91 a7 21 	lds	r19, 0x21A7	; 0x8021a7 <hpdir+0x95>
   14248:	40 91 a8 21 	lds	r20, 0x21A8	; 0x8021a8 <hpdir+0x96>
   1424c:	50 91 a9 21 	lds	r21, 0x21A9	; 0x8021a9 <hpdir+0x97>
   14250:	60 91 aa 21 	lds	r22, 0x21AA	; 0x8021aa <hpdir+0x98>
   14254:	70 91 ab 21 	lds	r23, 0x21AB	; 0x8021ab <hpdir+0x99>
   14258:	80 91 ac 21 	lds	r24, 0x21AC	; 0x8021ac <hpdir+0x9a>
   1425c:	90 91 ad 21 	lds	r25, 0x21AD	; 0x8021ad <hpdir+0x9b>
   14260:	0e 94 29 e0 	call	0x1c052	; 0x1c052 <__mulsi3>
   14264:	9b 01       	movw	r18, r22
   14266:	ac 01       	movw	r20, r24
   14268:	60 91 ae 21 	lds	r22, 0x21AE	; 0x8021ae <hpdir+0x9c>
   1426c:	70 91 af 21 	lds	r23, 0x21AF	; 0x8021af <hpdir+0x9d>
   14270:	80 91 b0 21 	lds	r24, 0x21B0	; 0x8021b0 <hpdir+0x9e>
   14274:	90 91 b1 21 	lds	r25, 0x21B1	; 0x8021b1 <hpdir+0x9f>
   14278:	0e 94 29 e0 	call	0x1c052	; 0x1c052 <__mulsi3>
   1427c:	60 93 be 21 	sts	0x21BE, r22	; 0x8021be <hpdir+0xac>
   14280:	70 93 bf 21 	sts	0x21BF, r23	; 0x8021bf <hpdir+0xad>
   14284:	80 93 c0 21 	sts	0x21C0, r24	; 0x8021c0 <hpdir+0xae>
   14288:	90 93 c1 21 	sts	0x21C1, r25	; 0x8021c1 <hpdir+0xaf>
        {
            if(verbose)
                printf("Error /hpdir.ini parsing\n");
            break;
        }
        found = 1;
   1428c:	01 e0       	ldi	r16, 0x01	; 1
   1428e:	10 e0       	ldi	r17, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
   14290:	c7 01       	movw	r24, r14
   14292:	0e 94 31 7b 	call	0xf662	; 0xf662 <fclose>
    return(found);
   14296:	c8 01       	movw	r24, r16
   14298:	02 c0       	rjmp	.+4      	; 0x1429e <hpdir_find_drive+0x35a>

    if(cfg == NULL)
    {
        if(verbose)
            printf("Error: hpdir.ini not found!\n");
        return(0);
   1429a:	80 e0       	ldi	r24, 0x00	; 0
   1429c:	90 e0       	ldi	r25, 0x00	; 0
        break;

    }                                             // while
    fclose(cfg);
    return(found);
}
   1429e:	c7 57       	subi	r28, 0x77	; 119
   142a0:	de 4f       	sbci	r29, 0xFE	; 254
   142a2:	0f b6       	in	r0, 0x3f	; 63
   142a4:	f8 94       	cli
   142a6:	de bf       	out	0x3e, r29	; 62
   142a8:	0f be       	out	0x3f, r0	; 63
   142aa:	cd bf       	out	0x3d, r28	; 61
   142ac:	df 91       	pop	r29
   142ae:	cf 91       	pop	r28
   142b0:	1f 91       	pop	r17
   142b2:	0f 91       	pop	r16
   142b4:	ff 90       	pop	r15
   142b6:	ef 90       	pop	r14
   142b8:	df 90       	pop	r13
   142ba:	cf 90       	pop	r12
   142bc:	bf 90       	pop	r11
   142be:	af 90       	pop	r10
   142c0:	9f 90       	pop	r9
   142c2:	8f 90       	pop	r8
   142c4:	6f 90       	pop	r6
   142c6:	5f 90       	pop	r5
   142c8:	4f 90       	pop	r4
   142ca:	3f 90       	pop	r3
   142cc:	2f 90       	pop	r2
   142ce:	08 95       	ret

000142d0 <SS80ControllerPack>:
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
        printf("[SS80 Increment to (%lXH)]\n",
            (long) SS80_Blocks_to_Bytes(SS80s->AddressBlocks));
#endif
    return(0);
}
   142d0:	0f 93       	push	r16
   142d2:	1f 93       	push	r17
   142d4:	25 e0       	ldi	r18, 0x05	; 5
   142d6:	30 e0       	ldi	r19, 0x00	; 0
   142d8:	fc 01       	movw	r30, r24
   142da:	31 83       	std	Z+1, r19	; 0x01
   142dc:	20 83       	st	Z, r18
   142de:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   142e2:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   142e6:	06 81       	ldd	r16, Z+6	; 0x06
   142e8:	17 81       	ldd	r17, Z+7	; 0x07
   142ea:	20 e0       	ldi	r18, 0x00	; 0
   142ec:	30 e0       	ldi	r19, 0x00	; 0
   142ee:	42 e0       	ldi	r20, 0x02	; 2
   142f0:	50 e0       	ldi	r21, 0x00	; 0
   142f2:	60 e0       	ldi	r22, 0x00	; 0
   142f4:	70 e0       	ldi	r23, 0x00	; 0
   142f6:	83 eb       	ldi	r24, 0xB3	; 179
   142f8:	99 e1       	ldi	r25, 0x19	; 25
   142fa:	0e 94 e7 bb 	call	0x177ce	; 0x177ce <V2B_MSB>
   142fe:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   14302:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   14306:	00 85       	ldd	r16, Z+8	; 0x08
   14308:	11 85       	ldd	r17, Z+9	; 0x09
   1430a:	20 e0       	ldi	r18, 0x00	; 0
   1430c:	30 e0       	ldi	r19, 0x00	; 0
   1430e:	42 e0       	ldi	r20, 0x02	; 2
   14310:	50 e0       	ldi	r21, 0x00	; 0
   14312:	61 e0       	ldi	r22, 0x01	; 1
   14314:	70 e0       	ldi	r23, 0x00	; 0
   14316:	83 eb       	ldi	r24, 0xB3	; 179
   14318:	99 e1       	ldi	r25, 0x19	; 25
   1431a:	0e 94 e7 bb 	call	0x177ce	; 0x177ce <V2B_MSB>
   1431e:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   14322:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   14326:	02 85       	ldd	r16, Z+10	; 0x0a
   14328:	10 e0       	ldi	r17, 0x00	; 0
   1432a:	20 e0       	ldi	r18, 0x00	; 0
   1432c:	30 e0       	ldi	r19, 0x00	; 0
   1432e:	41 e0       	ldi	r20, 0x01	; 1
   14330:	50 e0       	ldi	r21, 0x00	; 0
   14332:	64 e0       	ldi	r22, 0x04	; 4
   14334:	70 e0       	ldi	r23, 0x00	; 0
   14336:	83 eb       	ldi	r24, 0xB3	; 179
   14338:	99 e1       	ldi	r25, 0x19	; 25
   1433a:	0e 94 e7 bb 	call	0x177ce	; 0x177ce <V2B_MSB>
   1433e:	83 eb       	ldi	r24, 0xB3	; 179
   14340:	99 e1       	ldi	r25, 0x19	; 25
   14342:	1f 91       	pop	r17
   14344:	0f 91       	pop	r16
   14346:	08 95       	ret

00014348 <SS80UnitPack>:
   14348:	0f 93       	push	r16
   1434a:	1f 93       	push	r17
   1434c:	23 e1       	ldi	r18, 0x13	; 19
   1434e:	30 e0       	ldi	r19, 0x00	; 0
   14350:	fc 01       	movw	r30, r24
   14352:	31 83       	std	Z+1, r19	; 0x01
   14354:	20 83       	st	Z, r18
   14356:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   1435a:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   1435e:	03 85       	ldd	r16, Z+11	; 0x0b
   14360:	10 e0       	ldi	r17, 0x00	; 0
   14362:	20 e0       	ldi	r18, 0x00	; 0
   14364:	30 e0       	ldi	r19, 0x00	; 0
   14366:	41 e0       	ldi	r20, 0x01	; 1
   14368:	50 e0       	ldi	r21, 0x00	; 0
   1436a:	60 e0       	ldi	r22, 0x00	; 0
   1436c:	70 e0       	ldi	r23, 0x00	; 0
   1436e:	80 ea       	ldi	r24, 0xA0	; 160
   14370:	99 e1       	ldi	r25, 0x19	; 25
   14372:	0e 94 e7 bb 	call	0x177ce	; 0x177ce <V2B_MSB>
   14376:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   1437a:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   1437e:	04 85       	ldd	r16, Z+12	; 0x0c
   14380:	15 85       	ldd	r17, Z+13	; 0x0d
   14382:	26 85       	ldd	r18, Z+14	; 0x0e
   14384:	37 85       	ldd	r19, Z+15	; 0x0f
   14386:	43 e0       	ldi	r20, 0x03	; 3
   14388:	50 e0       	ldi	r21, 0x00	; 0
   1438a:	61 e0       	ldi	r22, 0x01	; 1
   1438c:	70 e0       	ldi	r23, 0x00	; 0
   1438e:	80 ea       	ldi	r24, 0xA0	; 160
   14390:	99 e1       	ldi	r25, 0x19	; 25
   14392:	0e 94 e7 bb 	call	0x177ce	; 0x177ce <V2B_MSB>
   14396:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   1439a:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   1439e:	00 89       	ldd	r16, Z+16	; 0x10
   143a0:	11 89       	ldd	r17, Z+17	; 0x11
   143a2:	20 e0       	ldi	r18, 0x00	; 0
   143a4:	30 e0       	ldi	r19, 0x00	; 0
   143a6:	42 e0       	ldi	r20, 0x02	; 2
   143a8:	50 e0       	ldi	r21, 0x00	; 0
   143aa:	64 e0       	ldi	r22, 0x04	; 4
   143ac:	70 e0       	ldi	r23, 0x00	; 0
   143ae:	80 ea       	ldi	r24, 0xA0	; 160
   143b0:	99 e1       	ldi	r25, 0x19	; 25
   143b2:	0e 94 e7 bb 	call	0x177ce	; 0x177ce <V2B_MSB>
   143b6:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   143ba:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   143be:	02 89       	ldd	r16, Z+18	; 0x12
   143c0:	10 e0       	ldi	r17, 0x00	; 0
   143c2:	20 e0       	ldi	r18, 0x00	; 0
   143c4:	30 e0       	ldi	r19, 0x00	; 0
   143c6:	41 e0       	ldi	r20, 0x01	; 1
   143c8:	50 e0       	ldi	r21, 0x00	; 0
   143ca:	66 e0       	ldi	r22, 0x06	; 6
   143cc:	70 e0       	ldi	r23, 0x00	; 0
   143ce:	80 ea       	ldi	r24, 0xA0	; 160
   143d0:	99 e1       	ldi	r25, 0x19	; 25
   143d2:	0e 94 e7 bb 	call	0x177ce	; 0x177ce <V2B_MSB>
   143d6:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   143da:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   143de:	03 89       	ldd	r16, Z+19	; 0x13
   143e0:	10 e0       	ldi	r17, 0x00	; 0
   143e2:	20 e0       	ldi	r18, 0x00	; 0
   143e4:	30 e0       	ldi	r19, 0x00	; 0
   143e6:	41 e0       	ldi	r20, 0x01	; 1
   143e8:	50 e0       	ldi	r21, 0x00	; 0
   143ea:	67 e0       	ldi	r22, 0x07	; 7
   143ec:	70 e0       	ldi	r23, 0x00	; 0
   143ee:	80 ea       	ldi	r24, 0xA0	; 160
   143f0:	99 e1       	ldi	r25, 0x19	; 25
   143f2:	0e 94 e7 bb 	call	0x177ce	; 0x177ce <V2B_MSB>
   143f6:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   143fa:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   143fe:	04 89       	ldd	r16, Z+20	; 0x14
   14400:	15 89       	ldd	r17, Z+21	; 0x15
   14402:	20 e0       	ldi	r18, 0x00	; 0
   14404:	30 e0       	ldi	r19, 0x00	; 0
   14406:	42 e0       	ldi	r20, 0x02	; 2
   14408:	50 e0       	ldi	r21, 0x00	; 0
   1440a:	68 e0       	ldi	r22, 0x08	; 8
   1440c:	70 e0       	ldi	r23, 0x00	; 0
   1440e:	80 ea       	ldi	r24, 0xA0	; 160
   14410:	99 e1       	ldi	r25, 0x19	; 25
   14412:	0e 94 e7 bb 	call	0x177ce	; 0x177ce <V2B_MSB>
   14416:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   1441a:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   1441e:	06 89       	ldd	r16, Z+22	; 0x16
   14420:	17 89       	ldd	r17, Z+23	; 0x17
   14422:	20 e0       	ldi	r18, 0x00	; 0
   14424:	30 e0       	ldi	r19, 0x00	; 0
   14426:	42 e0       	ldi	r20, 0x02	; 2
   14428:	50 e0       	ldi	r21, 0x00	; 0
   1442a:	6a e0       	ldi	r22, 0x0A	; 10
   1442c:	70 e0       	ldi	r23, 0x00	; 0
   1442e:	80 ea       	ldi	r24, 0xA0	; 160
   14430:	99 e1       	ldi	r25, 0x19	; 25
   14432:	0e 94 e7 bb 	call	0x177ce	; 0x177ce <V2B_MSB>
   14436:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   1443a:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   1443e:	00 8d       	ldd	r16, Z+24	; 0x18
   14440:	11 8d       	ldd	r17, Z+25	; 0x19
   14442:	20 e0       	ldi	r18, 0x00	; 0
   14444:	30 e0       	ldi	r19, 0x00	; 0
   14446:	42 e0       	ldi	r20, 0x02	; 2
   14448:	50 e0       	ldi	r21, 0x00	; 0
   1444a:	6c e0       	ldi	r22, 0x0C	; 12
   1444c:	70 e0       	ldi	r23, 0x00	; 0
   1444e:	80 ea       	ldi	r24, 0xA0	; 160
   14450:	99 e1       	ldi	r25, 0x19	; 25
   14452:	0e 94 e7 bb 	call	0x177ce	; 0x177ce <V2B_MSB>
   14456:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   1445a:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   1445e:	02 8d       	ldd	r16, Z+26	; 0x1a
   14460:	13 8d       	ldd	r17, Z+27	; 0x1b
   14462:	20 e0       	ldi	r18, 0x00	; 0
   14464:	30 e0       	ldi	r19, 0x00	; 0
   14466:	42 e0       	ldi	r20, 0x02	; 2
   14468:	50 e0       	ldi	r21, 0x00	; 0
   1446a:	6e e0       	ldi	r22, 0x0E	; 14
   1446c:	70 e0       	ldi	r23, 0x00	; 0
   1446e:	80 ea       	ldi	r24, 0xA0	; 160
   14470:	99 e1       	ldi	r25, 0x19	; 25
   14472:	0e 94 e7 bb 	call	0x177ce	; 0x177ce <V2B_MSB>
   14476:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   1447a:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   1447e:	04 8d       	ldd	r16, Z+28	; 0x1c
   14480:	10 e0       	ldi	r17, 0x00	; 0
   14482:	20 e0       	ldi	r18, 0x00	; 0
   14484:	30 e0       	ldi	r19, 0x00	; 0
   14486:	41 e0       	ldi	r20, 0x01	; 1
   14488:	50 e0       	ldi	r21, 0x00	; 0
   1448a:	60 e1       	ldi	r22, 0x10	; 16
   1448c:	70 e0       	ldi	r23, 0x00	; 0
   1448e:	80 ea       	ldi	r24, 0xA0	; 160
   14490:	99 e1       	ldi	r25, 0x19	; 25
   14492:	0e 94 e7 bb 	call	0x177ce	; 0x177ce <V2B_MSB>
   14496:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   1449a:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   1449e:	05 8d       	ldd	r16, Z+29	; 0x1d
   144a0:	10 e0       	ldi	r17, 0x00	; 0
   144a2:	20 e0       	ldi	r18, 0x00	; 0
   144a4:	30 e0       	ldi	r19, 0x00	; 0
   144a6:	41 e0       	ldi	r20, 0x01	; 1
   144a8:	50 e0       	ldi	r21, 0x00	; 0
   144aa:	61 e1       	ldi	r22, 0x11	; 17
   144ac:	70 e0       	ldi	r23, 0x00	; 0
   144ae:	80 ea       	ldi	r24, 0xA0	; 160
   144b0:	99 e1       	ldi	r25, 0x19	; 25
   144b2:	0e 94 e7 bb 	call	0x177ce	; 0x177ce <V2B_MSB>
   144b6:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   144ba:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   144be:	06 8d       	ldd	r16, Z+30	; 0x1e
   144c0:	10 e0       	ldi	r17, 0x00	; 0
   144c2:	20 e0       	ldi	r18, 0x00	; 0
   144c4:	30 e0       	ldi	r19, 0x00	; 0
   144c6:	41 e0       	ldi	r20, 0x01	; 1
   144c8:	50 e0       	ldi	r21, 0x00	; 0
   144ca:	62 e1       	ldi	r22, 0x12	; 18
   144cc:	70 e0       	ldi	r23, 0x00	; 0
   144ce:	80 ea       	ldi	r24, 0xA0	; 160
   144d0:	99 e1       	ldi	r25, 0x19	; 25
   144d2:	0e 94 e7 bb 	call	0x177ce	; 0x177ce <V2B_MSB>
   144d6:	80 ea       	ldi	r24, 0xA0	; 160
   144d8:	99 e1       	ldi	r25, 0x19	; 25
   144da:	1f 91       	pop	r17
   144dc:	0f 91       	pop	r16
   144de:	08 95       	ret

000144e0 <SS80VolumePack>:
   144e0:	0f 93       	push	r16
   144e2:	1f 93       	push	r17
   144e4:	2d e0       	ldi	r18, 0x0D	; 13
   144e6:	30 e0       	ldi	r19, 0x00	; 0
   144e8:	fc 01       	movw	r30, r24
   144ea:	31 83       	std	Z+1, r19	; 0x01
   144ec:	20 83       	st	Z, r18
   144ee:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   144f2:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   144f6:	07 8d       	ldd	r16, Z+31	; 0x1f
   144f8:	10 a1       	ldd	r17, Z+32	; 0x20
   144fa:	21 a1       	ldd	r18, Z+33	; 0x21
   144fc:	32 a1       	ldd	r19, Z+34	; 0x22
   144fe:	43 e0       	ldi	r20, 0x03	; 3
   14500:	50 e0       	ldi	r21, 0x00	; 0
   14502:	60 e0       	ldi	r22, 0x00	; 0
   14504:	70 e0       	ldi	r23, 0x00	; 0
   14506:	83 e9       	ldi	r24, 0x93	; 147
   14508:	99 e1       	ldi	r25, 0x19	; 25
   1450a:	0e 94 e7 bb 	call	0x177ce	; 0x177ce <V2B_MSB>
   1450e:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   14512:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   14516:	03 a1       	ldd	r16, Z+35	; 0x23
   14518:	10 e0       	ldi	r17, 0x00	; 0
   1451a:	20 e0       	ldi	r18, 0x00	; 0
   1451c:	30 e0       	ldi	r19, 0x00	; 0
   1451e:	41 e0       	ldi	r20, 0x01	; 1
   14520:	50 e0       	ldi	r21, 0x00	; 0
   14522:	63 e0       	ldi	r22, 0x03	; 3
   14524:	70 e0       	ldi	r23, 0x00	; 0
   14526:	83 e9       	ldi	r24, 0x93	; 147
   14528:	99 e1       	ldi	r25, 0x19	; 25
   1452a:	0e 94 e7 bb 	call	0x177ce	; 0x177ce <V2B_MSB>
   1452e:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   14532:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   14536:	04 a1       	ldd	r16, Z+36	; 0x24
   14538:	15 a1       	ldd	r17, Z+37	; 0x25
   1453a:	20 e0       	ldi	r18, 0x00	; 0
   1453c:	30 e0       	ldi	r19, 0x00	; 0
   1453e:	42 e0       	ldi	r20, 0x02	; 2
   14540:	50 e0       	ldi	r21, 0x00	; 0
   14542:	64 e0       	ldi	r22, 0x04	; 4
   14544:	70 e0       	ldi	r23, 0x00	; 0
   14546:	83 e9       	ldi	r24, 0x93	; 147
   14548:	99 e1       	ldi	r25, 0x19	; 25
   1454a:	0e 94 e7 bb 	call	0x177ce	; 0x177ce <V2B_MSB>
   1454e:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   14552:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   14556:	06 a1       	ldd	r16, Z+38	; 0x26
   14558:	17 a1       	ldd	r17, Z+39	; 0x27
   1455a:	20 a5       	ldd	r18, Z+40	; 0x28
   1455c:	31 a5       	ldd	r19, Z+41	; 0x29
   1455e:	46 e0       	ldi	r20, 0x06	; 6
   14560:	50 e0       	ldi	r21, 0x00	; 0
   14562:	66 e0       	ldi	r22, 0x06	; 6
   14564:	70 e0       	ldi	r23, 0x00	; 0
   14566:	83 e9       	ldi	r24, 0x93	; 147
   14568:	99 e1       	ldi	r25, 0x19	; 25
   1456a:	0e 94 e7 bb 	call	0x177ce	; 0x177ce <V2B_MSB>
   1456e:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   14572:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   14576:	02 a5       	ldd	r16, Z+42	; 0x2a
   14578:	10 e0       	ldi	r17, 0x00	; 0
   1457a:	20 e0       	ldi	r18, 0x00	; 0
   1457c:	30 e0       	ldi	r19, 0x00	; 0
   1457e:	41 e0       	ldi	r20, 0x01	; 1
   14580:	50 e0       	ldi	r21, 0x00	; 0
   14582:	6c e0       	ldi	r22, 0x0C	; 12
   14584:	70 e0       	ldi	r23, 0x00	; 0
   14586:	83 e9       	ldi	r24, 0x93	; 147
   14588:	99 e1       	ldi	r25, 0x19	; 25
   1458a:	0e 94 e7 bb 	call	0x177ce	; 0x177ce <V2B_MSB>
   1458e:	83 e9       	ldi	r24, 0x93	; 147
   14590:	99 e1       	ldi	r25, 0x19	; 25
   14592:	1f 91       	pop	r17
   14594:	0f 91       	pop	r16
   14596:	08 95       	ret

00014598 <SS80_test_extended_status>:
   14598:	9b 01       	movw	r18, r22
   1459a:	43 e0       	ldi	r20, 0x03	; 3
   1459c:	35 95       	asr	r19
   1459e:	27 95       	ror	r18
   145a0:	4a 95       	dec	r20
   145a2:	e1 f7       	brne	.-8      	; 0x1459c <SS80_test_extended_status+0x4>
   145a4:	82 0f       	add	r24, r18
   145a6:	93 1f       	adc	r25, r19
   145a8:	67 70       	andi	r22, 0x07	; 7
   145aa:	77 27       	eor	r23, r23
   145ac:	20 e8       	ldi	r18, 0x80	; 128
   145ae:	30 e0       	ldi	r19, 0x00	; 0
   145b0:	02 c0       	rjmp	.+4      	; 0x145b6 <SS80_test_extended_status+0x1e>
   145b2:	35 95       	asr	r19
   145b4:	27 95       	ror	r18
   145b6:	6a 95       	dec	r22
   145b8:	e2 f7       	brpl	.-8      	; 0x145b2 <SS80_test_extended_status+0x1a>
   145ba:	fc 01       	movw	r30, r24
   145bc:	80 81       	ld	r24, Z
   145be:	28 23       	and	r18, r24
   145c0:	81 e0       	ldi	r24, 0x01	; 1
   145c2:	90 e0       	ldi	r25, 0x00	; 0
   145c4:	11 f4       	brne	.+4      	; 0x145ca <SS80_test_extended_status+0x32>
   145c6:	80 e0       	ldi	r24, 0x00	; 0
   145c8:	90 e0       	ldi	r25, 0x00	; 0
   145ca:	08 95       	ret

000145cc <SS80_display_extended_status>:
   145cc:	6f 92       	push	r6
   145ce:	7f 92       	push	r7
   145d0:	8f 92       	push	r8
   145d2:	ef 92       	push	r14
   145d4:	ff 92       	push	r15
   145d6:	0f 93       	push	r16
   145d8:	1f 93       	push	r17
   145da:	cf 93       	push	r28
   145dc:	df 93       	push	r29
   145de:	ad b7       	in	r26, 0x3d	; 61
   145e0:	be b7       	in	r27, 0x3e	; 62
   145e2:	17 97       	sbiw	r26, 0x07	; 7
   145e4:	0f b6       	in	r0, 0x3f	; 63
   145e6:	f8 94       	cli
   145e8:	be bf       	out	0x3e, r27	; 62
   145ea:	0f be       	out	0x3f, r0	; 63
   145ec:	ad bf       	out	0x3d, r26	; 61
   145ee:	fc 01       	movw	r30, r24
   145f0:	ac 01       	movw	r20, r24
   145f2:	48 5f       	subi	r20, 0xF8	; 248
   145f4:	5f 4f       	sbci	r21, 0xFF	; 255
   145f6:	20 e0       	ldi	r18, 0x00	; 0
   145f8:	30 e0       	ldi	r19, 0x00	; 0
   145fa:	a1 91       	ld	r26, Z+
   145fc:	aa 23       	and	r26, r26
   145fe:	11 f0       	breq	.+4      	; 0x14604 <SS80_display_extended_status+0x38>
   14600:	21 e0       	ldi	r18, 0x01	; 1
   14602:	30 e0       	ldi	r19, 0x00	; 0
   14604:	e4 17       	cp	r30, r20
   14606:	f5 07       	cpc	r31, r21
   14608:	c1 f7       	brne	.-16     	; 0x145fa <SS80_display_extended_status+0x2e>
   1460a:	23 2b       	or	r18, r19
   1460c:	81 f1       	breq	.+96     	; 0x1466e <SS80_display_extended_status+0xa2>
   1460e:	ec 01       	movw	r28, r24
   14610:	ed b7       	in	r30, 0x3d	; 61
   14612:	fe b7       	in	r31, 0x3e	; 62
   14614:	75 83       	std	Z+5, r23	; 0x05
   14616:	64 83       	std	Z+4, r22	; 0x04
   14618:	8b e5       	ldi	r24, 0x5B	; 91
   1461a:	93 e2       	ldi	r25, 0x23	; 35
   1461c:	a0 e0       	ldi	r26, 0x00	; 0
   1461e:	81 83       	std	Z+1, r24	; 0x01
   14620:	92 83       	std	Z+2, r25	; 0x02
   14622:	a3 83       	std	Z+3, r26	; 0x03
   14624:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   14628:	0c e7       	ldi	r16, 0x7C	; 124
   1462a:	12 e0       	ldi	r17, 0x02	; 2
   1462c:	80 e5       	ldi	r24, 0x50	; 80
   1462e:	93 e2       	ldi	r25, 0x23	; 35
   14630:	3c 01       	movw	r6, r24
   14632:	81 2c       	mov	r8, r1
   14634:	f8 01       	movw	r30, r16
   14636:	e0 80       	ld	r14, Z
   14638:	f1 80       	ldd	r15, Z+1	; 0x01
   1463a:	ff ef       	ldi	r31, 0xFF	; 255
   1463c:	ef 16       	cp	r14, r31
   1463e:	ff 06       	cpc	r15, r31
   14640:	b1 f0       	breq	.+44     	; 0x1466e <SS80_display_extended_status+0xa2>
   14642:	b7 01       	movw	r22, r14
   14644:	ce 01       	movw	r24, r28
   14646:	a8 df       	rcall	.-176    	; 0x14598 <SS80_test_extended_status>
   14648:	89 2b       	or	r24, r25
   1464a:	71 f0       	breq	.+28     	; 0x14668 <SS80_display_extended_status+0x9c>
   1464c:	f8 01       	movw	r30, r16
   1464e:	82 81       	ldd	r24, Z+2	; 0x02
   14650:	93 81       	ldd	r25, Z+3	; 0x03
   14652:	ed b7       	in	r30, 0x3d	; 61
   14654:	fe b7       	in	r31, 0x3e	; 62
   14656:	97 83       	std	Z+7, r25	; 0x07
   14658:	86 83       	std	Z+6, r24	; 0x06
   1465a:	f5 82       	std	Z+5, r15	; 0x05
   1465c:	e4 82       	std	Z+4, r14	; 0x04
   1465e:	61 82       	std	Z+1, r6	; 0x01
   14660:	72 82       	std	Z+2, r7	; 0x02
   14662:	83 82       	std	Z+3, r8	; 0x03
   14664:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   14668:	0c 5f       	subi	r16, 0xFC	; 252
   1466a:	1f 4f       	sbci	r17, 0xFF	; 255
   1466c:	e3 cf       	rjmp	.-58     	; 0x14634 <SS80_display_extended_status+0x68>
   1466e:	ad b7       	in	r26, 0x3d	; 61
   14670:	be b7       	in	r27, 0x3e	; 62
   14672:	17 96       	adiw	r26, 0x07	; 7
   14674:	0f b6       	in	r0, 0x3f	; 63
   14676:	f8 94       	cli
   14678:	be bf       	out	0x3e, r27	; 62
   1467a:	0f be       	out	0x3f, r0	; 63
   1467c:	ad bf       	out	0x3d, r26	; 61
   1467e:	df 91       	pop	r29
   14680:	cf 91       	pop	r28
   14682:	1f 91       	pop	r17
   14684:	0f 91       	pop	r16
   14686:	ff 90       	pop	r15
   14688:	ef 90       	pop	r14
   1468a:	8f 90       	pop	r8
   1468c:	7f 90       	pop	r7
   1468e:	6f 90       	pop	r6
   14690:	08 95       	ret

00014692 <SS80_send_status>:
   14692:	a9 e1       	ldi	r26, 0x19	; 25
   14694:	b0 e0       	ldi	r27, 0x00	; 0
   14696:	ef e4       	ldi	r30, 0x4F	; 79
   14698:	f3 ea       	ldi	r31, 0xA3	; 163
   1469a:	0c 94 e4 e0 	jmp	0x1c1c8	; 0x1c1c8 <__prologue_saves__+0x18>
   1469e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   146a2:	85 ff       	sbrs	r24, 5
   146a4:	0a c0       	rjmp	.+20     	; 0x146ba <SS80_send_status+0x28>
   146a6:	8c e3       	ldi	r24, 0x3C	; 60
   146a8:	93 e2       	ldi	r25, 0x23	; 35
   146aa:	a0 e0       	ldi	r26, 0x00	; 0
   146ac:	ed b7       	in	r30, 0x3d	; 61
   146ae:	fe b7       	in	r31, 0x3e	; 62
   146b0:	81 83       	std	Z+1, r24	; 0x01
   146b2:	92 83       	std	Z+2, r25	; 0x02
   146b4:	a3 83       	std	Z+3, r26	; 0x03
   146b6:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   146ba:	ce 01       	movw	r24, r28
   146bc:	04 96       	adiw	r24, 0x04	; 4
   146be:	7c 01       	movw	r14, r24
   146c0:	84 e1       	ldi	r24, 0x14	; 20
   146c2:	f7 01       	movw	r30, r14
   146c4:	11 92       	st	Z+, r1
   146c6:	8a 95       	dec	r24
   146c8:	e9 f7       	brne	.-6      	; 0x146c4 <SS80_send_status+0x32>
   146ca:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   146ce:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   146d2:	86 81       	ldd	r24, Z+6	; 0x06
   146d4:	20 e1       	ldi	r18, 0x10	; 16
   146d6:	82 9f       	mul	r24, r18
   146d8:	c0 01       	movw	r24, r0
   146da:	11 24       	eor	r1, r1
   146dc:	95 81       	ldd	r25, Z+5	; 0x05
   146de:	9f 70       	andi	r25, 0x0F	; 15
   146e0:	89 2b       	or	r24, r25
   146e2:	8c 83       	std	Y+4, r24	; 0x04
   146e4:	8f ef       	ldi	r24, 0xFF	; 255
   146e6:	8d 83       	std	Y+5, r24	; 0x05
   146e8:	83 81       	ldd	r24, Z+3	; 0x03
   146ea:	86 ff       	sbrs	r24, 6
   146ec:	02 c0       	rjmp	.+4      	; 0x146f2 <SS80_send_status+0x60>
   146ee:	92 e0       	ldi	r25, 0x02	; 2
   146f0:	9e 83       	std	Y+6, r25	; 0x06
   146f2:	82 ff       	sbrs	r24, 2
   146f4:	03 c0       	rjmp	.+6      	; 0x146fc <SS80_send_status+0x6a>
   146f6:	9e 81       	ldd	r25, Y+6	; 0x06
   146f8:	91 60       	ori	r25, 0x01	; 1
   146fa:	9e 83       	std	Y+6, r25	; 0x06
   146fc:	80 ff       	sbrs	r24, 0
   146fe:	02 c0       	rjmp	.+4      	; 0x14704 <SS80_send_status+0x72>
   14700:	82 e0       	ldi	r24, 0x02	; 2
   14702:	88 87       	std	Y+8, r24	; 0x08
   14704:	83 81       	ldd	r24, Z+3	; 0x03
   14706:	81 ff       	sbrs	r24, 1
   14708:	03 c0       	rjmp	.+6      	; 0x14710 <SS80_send_status+0x7e>
   1470a:	88 85       	ldd	r24, Y+8	; 0x08
   1470c:	82 60       	ori	r24, 0x02	; 2
   1470e:	88 87       	std	Y+8, r24	; 0x08
   14710:	83 81       	ldd	r24, Z+3	; 0x03
   14712:	83 ff       	sbrs	r24, 3
   14714:	02 c0       	rjmp	.+4      	; 0x1471a <SS80_send_status+0x88>
   14716:	88 e0       	ldi	r24, 0x08	; 8
   14718:	8a 87       	std	Y+10, r24	; 0x0a
   1471a:	83 81       	ldd	r24, Z+3	; 0x03
   1471c:	94 81       	ldd	r25, Z+4	; 0x04
   1471e:	89 2b       	or	r24, r25
   14720:	59 f4       	brne	.+22     	; 0x14738 <SS80_send_status+0xa6>
   14722:	07 81       	ldd	r16, Z+7	; 0x07
   14724:	10 85       	ldd	r17, Z+8	; 0x08
   14726:	21 85       	ldd	r18, Z+9	; 0x09
   14728:	32 85       	ldd	r19, Z+10	; 0x0a
   1472a:	46 e0       	ldi	r20, 0x06	; 6
   1472c:	50 e0       	ldi	r21, 0x00	; 0
   1472e:	6a e0       	ldi	r22, 0x0A	; 10
   14730:	70 e0       	ldi	r23, 0x00	; 0
   14732:	c7 01       	movw	r24, r14
   14734:	0e 94 e7 bb 	call	0x177ce	; 0x177ce <V2B_MSB>
   14738:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   1473c:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   14740:	83 81       	ldd	r24, Z+3	; 0x03
   14742:	94 81       	ldd	r25, Z+4	; 0x04
   14744:	89 2b       	or	r24, r25
   14746:	11 f0       	breq	.+4      	; 0x1474c <SS80_send_status+0xba>
   14748:	81 e0       	ldi	r24, 0x01	; 1
   1474a:	82 83       	std	Z+2, r24	; 0x02
   1474c:	80 e0       	ldi	r24, 0x00	; 0
   1474e:	91 e0       	ldi	r25, 0x01	; 1
   14750:	99 8f       	std	Y+25, r25	; 0x19
   14752:	88 8f       	std	Y+24, r24	; 0x18
   14754:	ae 01       	movw	r20, r28
   14756:	48 5e       	subi	r20, 0xE8	; 232
   14758:	5f 4f       	sbci	r21, 0xFF	; 255
   1475a:	64 e1       	ldi	r22, 0x14	; 20
   1475c:	70 e0       	ldi	r23, 0x00	; 0
   1475e:	c7 01       	movw	r24, r14
   14760:	0e 94 f3 89 	call	0x113e6	; 0x113e6 <gpib_write_str>
   14764:	44 97       	sbiw	r24, 0x14	; 20
   14766:	71 f0       	breq	.+28     	; 0x14784 <SS80_send_status+0xf2>
   14768:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1476c:	80 ff       	sbrs	r24, 0
   1476e:	0a c0       	rjmp	.+20     	; 0x14784 <SS80_send_status+0xf2>
   14770:	81 e2       	ldi	r24, 0x21	; 33
   14772:	93 e2       	ldi	r25, 0x23	; 35
   14774:	a0 e0       	ldi	r26, 0x00	; 0
   14776:	ed b7       	in	r30, 0x3d	; 61
   14778:	fe b7       	in	r31, 0x3e	; 62
   1477a:	81 83       	std	Z+1, r24	; 0x01
   1477c:	92 83       	std	Z+2, r25	; 0x02
   1477e:	a3 83       	std	Z+3, r26	; 0x03
   14780:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   14784:	88 8d       	ldd	r24, Y+24	; 0x18
   14786:	99 8d       	ldd	r25, Y+25	; 0x19
   14788:	88 27       	eor	r24, r24
   1478a:	90 7d       	andi	r25, 0xD0	; 208
   1478c:	69 96       	adiw	r28, 0x19	; 25
   1478e:	e6 e0       	ldi	r30, 0x06	; 6
   14790:	0c 94 00 e1 	jmp	0x1c200	; 0x1c200 <__epilogue_restores__+0x18>

00014794 <SS80_describe>:
   14794:	a7 e0       	ldi	r26, 0x07	; 7
   14796:	b0 e0       	ldi	r27, 0x00	; 0
   14798:	e0 ed       	ldi	r30, 0xD0	; 208
   1479a:	f3 ea       	ldi	r31, 0xA3	; 163
   1479c:	0c 94 e8 e0 	jmp	0x1c1d0	; 0x1c1d0 <__prologue_saves__+0x20>
   147a0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   147a4:	85 ff       	sbrs	r24, 5
   147a6:	0a c0       	rjmp	.+20     	; 0x147bc <SS80_describe+0x28>
   147a8:	80 e1       	ldi	r24, 0x10	; 16
   147aa:	93 e2       	ldi	r25, 0x23	; 35
   147ac:	a0 e0       	ldi	r26, 0x00	; 0
   147ae:	ed b7       	in	r30, 0x3d	; 61
   147b0:	fe b7       	in	r31, 0x3e	; 62
   147b2:	81 83       	std	Z+1, r24	; 0x01
   147b4:	92 83       	std	Z+2, r25	; 0x02
   147b6:	a3 83       	std	Z+3, r26	; 0x03
   147b8:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   147bc:	1f 82       	std	Y+7, r1	; 0x07
   147be:	1e 82       	std	Y+6, r1	; 0x06
   147c0:	ce 01       	movw	r24, r28
   147c2:	04 96       	adiw	r24, 0x04	; 4
   147c4:	85 dd       	rcall	.-1270   	; 0x142d0 <SS80ControllerPack>
   147c6:	6c 81       	ldd	r22, Y+4	; 0x04
   147c8:	7d 81       	ldd	r23, Y+5	; 0x05
   147ca:	ae 01       	movw	r20, r28
   147cc:	4a 5f       	subi	r20, 0xFA	; 250
   147ce:	5f 4f       	sbci	r21, 0xFF	; 255
   147d0:	0e 94 f3 89 	call	0x113e6	; 0x113e6 <gpib_write_str>
   147d4:	2c 81       	ldd	r18, Y+4	; 0x04
   147d6:	3d 81       	ldd	r19, Y+5	; 0x05
   147d8:	82 17       	cp	r24, r18
   147da:	93 07       	cpc	r25, r19
   147dc:	39 f0       	breq	.+14     	; 0x147ec <SS80_describe+0x58>
   147de:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   147e2:	80 ff       	sbrs	r24, 0
   147e4:	3c c0       	rjmp	.+120    	; 0x1485e <SS80_describe+0xca>
   147e6:	8d ee       	ldi	r24, 0xED	; 237
   147e8:	92 e2       	ldi	r25, 0x22	; 34
   147ea:	31 c0       	rjmp	.+98     	; 0x1484e <SS80_describe+0xba>
   147ec:	1f 82       	std	Y+7, r1	; 0x07
   147ee:	1e 82       	std	Y+6, r1	; 0x06
   147f0:	ce 01       	movw	r24, r28
   147f2:	04 96       	adiw	r24, 0x04	; 4
   147f4:	a9 dd       	rcall	.-1198   	; 0x14348 <SS80UnitPack>
   147f6:	6c 81       	ldd	r22, Y+4	; 0x04
   147f8:	7d 81       	ldd	r23, Y+5	; 0x05
   147fa:	ae 01       	movw	r20, r28
   147fc:	4a 5f       	subi	r20, 0xFA	; 250
   147fe:	5f 4f       	sbci	r21, 0xFF	; 255
   14800:	0e 94 f3 89 	call	0x113e6	; 0x113e6 <gpib_write_str>
   14804:	2c 81       	ldd	r18, Y+4	; 0x04
   14806:	3d 81       	ldd	r19, Y+5	; 0x05
   14808:	82 17       	cp	r24, r18
   1480a:	93 07       	cpc	r25, r19
   1480c:	39 f0       	breq	.+14     	; 0x1481c <SS80_describe+0x88>
   1480e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14812:	80 ff       	sbrs	r24, 0
   14814:	24 c0       	rjmp	.+72     	; 0x1485e <SS80_describe+0xca>
   14816:	80 ed       	ldi	r24, 0xD0	; 208
   14818:	92 e2       	ldi	r25, 0x22	; 34
   1481a:	19 c0       	rjmp	.+50     	; 0x1484e <SS80_describe+0xba>
   1481c:	80 e0       	ldi	r24, 0x00	; 0
   1481e:	91 e0       	ldi	r25, 0x01	; 1
   14820:	9f 83       	std	Y+7, r25	; 0x07
   14822:	8e 83       	std	Y+6, r24	; 0x06
   14824:	ce 01       	movw	r24, r28
   14826:	04 96       	adiw	r24, 0x04	; 4
   14828:	5b de       	rcall	.-842    	; 0x144e0 <SS80VolumePack>
   1482a:	6c 81       	ldd	r22, Y+4	; 0x04
   1482c:	7d 81       	ldd	r23, Y+5	; 0x05
   1482e:	ae 01       	movw	r20, r28
   14830:	4a 5f       	subi	r20, 0xFA	; 250
   14832:	5f 4f       	sbci	r21, 0xFF	; 255
   14834:	0e 94 f3 89 	call	0x113e6	; 0x113e6 <gpib_write_str>
   14838:	2c 81       	ldd	r18, Y+4	; 0x04
   1483a:	3d 81       	ldd	r19, Y+5	; 0x05
   1483c:	82 17       	cp	r24, r18
   1483e:	93 07       	cpc	r25, r19
   14840:	99 f0       	breq	.+38     	; 0x14868 <SS80_describe+0xd4>
   14842:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14846:	80 ff       	sbrs	r24, 0
   14848:	0a c0       	rjmp	.+20     	; 0x1485e <SS80_describe+0xca>
   1484a:	81 eb       	ldi	r24, 0xB1	; 177
   1484c:	92 e2       	ldi	r25, 0x22	; 34
   1484e:	a0 e0       	ldi	r26, 0x00	; 0
   14850:	ed b7       	in	r30, 0x3d	; 61
   14852:	fe b7       	in	r31, 0x3e	; 62
   14854:	81 83       	std	Z+1, r24	; 0x01
   14856:	92 83       	std	Z+2, r25	; 0x02
   14858:	a3 83       	std	Z+3, r26	; 0x03
   1485a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1485e:	8e 81       	ldd	r24, Y+6	; 0x06
   14860:	9f 81       	ldd	r25, Y+7	; 0x07
   14862:	88 27       	eor	r24, r24
   14864:	90 7d       	andi	r25, 0xD0	; 208
   14866:	02 c0       	rjmp	.+4      	; 0x1486c <SS80_describe+0xd8>
   14868:	80 e0       	ldi	r24, 0x00	; 0
   1486a:	90 e0       	ldi	r25, 0x00	; 0
   1486c:	27 96       	adiw	r28, 0x07	; 7
   1486e:	e2 e0       	ldi	r30, 0x02	; 2
   14870:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

00014874 <SS80_Check_Unit>:
   14874:	00 d0       	rcall	.+0      	; 0x14876 <SS80_Check_Unit+0x2>
   14876:	00 d0       	rcall	.+0      	; 0x14878 <SS80_Check_Unit+0x4>
   14878:	1f 92       	push	r1
   1487a:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   1487e:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   14882:	88 23       	and	r24, r24
   14884:	c9 f0       	breq	.+50     	; 0x148b8 <SS80_Check_Unit+0x44>
   14886:	8f 30       	cpi	r24, 0x0F	; 15
   14888:	b9 f0       	breq	.+46     	; 0x148b8 <SS80_Check_Unit+0x44>
   1488a:	23 81       	ldd	r18, Z+3	; 0x03
   1488c:	34 81       	ldd	r19, Z+4	; 0x04
   1488e:	20 64       	ori	r18, 0x40	; 64
   14890:	34 83       	std	Z+4, r19	; 0x04
   14892:	23 83       	std	Z+3, r18	; 0x03
   14894:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   14898:	90 ff       	sbrs	r25, 0
   1489a:	0f c0       	rjmp	.+30     	; 0x148ba <SS80_Check_Unit+0x46>
   1489c:	90 e0       	ldi	r25, 0x00	; 0
   1489e:	ed b7       	in	r30, 0x3d	; 61
   148a0:	fe b7       	in	r31, 0x3e	; 62
   148a2:	95 83       	std	Z+5, r25	; 0x05
   148a4:	84 83       	std	Z+4, r24	; 0x04
   148a6:	89 e9       	ldi	r24, 0x99	; 153
   148a8:	92 e2       	ldi	r25, 0x22	; 34
   148aa:	a0 e0       	ldi	r26, 0x00	; 0
   148ac:	81 83       	std	Z+1, r24	; 0x01
   148ae:	92 83       	std	Z+2, r25	; 0x02
   148b0:	a3 83       	std	Z+3, r26	; 0x03
   148b2:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   148b6:	01 c0       	rjmp	.+2      	; 0x148ba <SS80_Check_Unit+0x46>
   148b8:	85 83       	std	Z+5, r24	; 0x05
   148ba:	0f 90       	pop	r0
   148bc:	0f 90       	pop	r0
   148be:	0f 90       	pop	r0
   148c0:	0f 90       	pop	r0
   148c2:	0f 90       	pop	r0
   148c4:	08 95       	ret

000148c6 <SS80_Check_Volume>:
   148c6:	00 d0       	rcall	.+0      	; 0x148c8 <SS80_Check_Volume+0x2>
   148c8:	00 d0       	rcall	.+0      	; 0x148ca <SS80_Check_Volume+0x4>
   148ca:	1f 92       	push	r1
   148cc:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   148d0:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   148d4:	88 23       	and	r24, r24
   148d6:	b9 f0       	breq	.+46     	; 0x14906 <SS80_Check_Volume+0x40>
   148d8:	23 81       	ldd	r18, Z+3	; 0x03
   148da:	34 81       	ldd	r19, Z+4	; 0x04
   148dc:	20 64       	ori	r18, 0x40	; 64
   148de:	34 83       	std	Z+4, r19	; 0x04
   148e0:	23 83       	std	Z+3, r18	; 0x03
   148e2:	90 91 b6 01 	lds	r25, 0x01B6	; 0x8001b6 <debuglevel>
   148e6:	90 ff       	sbrs	r25, 0
   148e8:	0f c0       	rjmp	.+30     	; 0x14908 <SS80_Check_Volume+0x42>
   148ea:	90 e0       	ldi	r25, 0x00	; 0
   148ec:	ed b7       	in	r30, 0x3d	; 61
   148ee:	fe b7       	in	r31, 0x3e	; 62
   148f0:	95 83       	std	Z+5, r25	; 0x05
   148f2:	84 83       	std	Z+4, r24	; 0x04
   148f4:	8f e7       	ldi	r24, 0x7F	; 127
   148f6:	92 e2       	ldi	r25, 0x22	; 34
   148f8:	a0 e0       	ldi	r26, 0x00	; 0
   148fa:	81 83       	std	Z+1, r24	; 0x01
   148fc:	92 83       	std	Z+2, r25	; 0x02
   148fe:	a3 83       	std	Z+3, r26	; 0x03
   14900:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   14904:	01 c0       	rjmp	.+2      	; 0x14908 <SS80_Check_Volume+0x42>
   14906:	16 82       	std	Z+6, r1	; 0x06
   14908:	0f 90       	pop	r0
   1490a:	0f 90       	pop	r0
   1490c:	0f 90       	pop	r0
   1490e:	0f 90       	pop	r0
   14910:	0f 90       	pop	r0
   14912:	08 95       	ret

00014914 <SS80_Command_State>:
   14914:	2f 92       	push	r2
   14916:	3f 92       	push	r3
   14918:	4f 92       	push	r4
   1491a:	6f 92       	push	r6
   1491c:	7f 92       	push	r7
   1491e:	8f 92       	push	r8
   14920:	af 92       	push	r10
   14922:	bf 92       	push	r11
   14924:	cf 92       	push	r12
   14926:	ef 92       	push	r14
   14928:	ff 92       	push	r15
   1492a:	0f 93       	push	r16
   1492c:	1f 93       	push	r17
   1492e:	cf 93       	push	r28
   14930:	df 93       	push	r29
   14932:	cd b7       	in	r28, 0x3d	; 61
   14934:	de b7       	in	r29, 0x3e	; 62
   14936:	66 97       	sbiw	r28, 0x16	; 22
   14938:	0f b6       	in	r0, 0x3f	; 63
   1493a:	f8 94       	cli
   1493c:	de bf       	out	0x3e, r29	; 62
   1493e:	0f be       	out	0x3f, r0	; 63
   14940:	cd bf       	out	0x3d, r28	; 61
   14942:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   14946:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   1494a:	81 81       	ldd	r24, Z+1	; 0x01
   1494c:	90 e0       	ldi	r25, 0x00	; 0
   1494e:	0e 94 99 84 	call	0x10932	; 0x10932 <gpib_disable_PPR>
   14952:	80 e0       	ldi	r24, 0x00	; 0
   14954:	91 e0       	ldi	r25, 0x01	; 1
   14956:	99 87       	std	Y+9, r25	; 0x09
   14958:	88 87       	std	Y+8, r24	; 0x08
   1495a:	ae 01       	movw	r20, r28
   1495c:	48 5f       	subi	r20, 0xF8	; 248
   1495e:	5f 4f       	sbci	r21, 0xFF	; 255
   14960:	60 e0       	ldi	r22, 0x00	; 0
   14962:	72 e0       	ldi	r23, 0x02	; 2
   14964:	84 e0       	ldi	r24, 0x04	; 4
   14966:	9d e1       	ldi	r25, 0x1D	; 29
   14968:	0e 94 51 89 	call	0x112a2	; 0x112a2 <gpib_read_str>
   1496c:	9b 87       	std	Y+11, r25	; 0x0b
   1496e:	8a 87       	std	Y+10, r24	; 0x0a
   14970:	88 85       	ldd	r24, Y+8	; 0x08
   14972:	99 85       	ldd	r25, Y+9	; 0x09
   14974:	9c 01       	movw	r18, r24
   14976:	22 27       	eor	r18, r18
   14978:	30 7d       	andi	r19, 0xD0	; 208
   1497a:	23 2b       	or	r18, r19
   1497c:	79 f0       	breq	.+30     	; 0x1499c <SS80_Command_State+0x88>
   1497e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14982:	80 ff       	sbrs	r24, 0
   14984:	21 c2       	rjmp	.+1090   	; 0x14dc8 <SS80_Command_State+0x4b4>
   14986:	89 e5       	ldi	r24, 0x59	; 89
   14988:	92 e2       	ldi	r25, 0x22	; 34
   1498a:	a0 e0       	ldi	r26, 0x00	; 0
   1498c:	ed b7       	in	r30, 0x3d	; 61
   1498e:	fe b7       	in	r31, 0x3e	; 62
   14990:	81 83       	std	Z+1, r24	; 0x01
   14992:	92 83       	std	Z+2, r25	; 0x02
   14994:	a3 83       	std	Z+3, r26	; 0x03
   14996:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1499a:	16 c2       	rjmp	.+1068   	; 0x14dc8 <SS80_Command_State+0x4b4>
   1499c:	2a 85       	ldd	r18, Y+10	; 0x0a
   1499e:	3b 85       	ldd	r19, Y+11	; 0x0b
   149a0:	23 2b       	or	r18, r19
   149a2:	09 f4       	brne	.+2      	; 0x149a6 <SS80_Command_State+0x92>
   149a4:	16 c2       	rjmp	.+1068   	; 0x14dd2 <SS80_Command_State+0x4be>
   149a6:	90 fd       	sbrc	r25, 0
   149a8:	0e c0       	rjmp	.+28     	; 0x149c6 <SS80_Command_State+0xb2>
   149aa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   149ae:	80 ff       	sbrs	r24, 0
   149b0:	0a c0       	rjmp	.+20     	; 0x149c6 <SS80_Command_State+0xb2>
   149b2:	80 e4       	ldi	r24, 0x40	; 64
   149b4:	92 e2       	ldi	r25, 0x22	; 34
   149b6:	a0 e0       	ldi	r26, 0x00	; 0
   149b8:	ed b7       	in	r30, 0x3d	; 61
   149ba:	fe b7       	in	r31, 0x3e	; 62
   149bc:	81 83       	std	Z+1, r24	; 0x01
   149be:	92 83       	std	Z+2, r25	; 0x02
   149c0:	a3 83       	std	Z+3, r26	; 0x03
   149c2:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   149c6:	e1 2c       	mov	r14, r1
   149c8:	f1 2c       	mov	r15, r1
   149ca:	84 e4       	ldi	r24, 0x44	; 68
   149cc:	91 e2       	ldi	r25, 0x21	; 33
   149ce:	9c 01       	movw	r18, r24
   149d0:	40 e0       	ldi	r20, 0x00	; 0
   149d2:	2e 87       	std	Y+14, r18	; 0x0e
   149d4:	3f 87       	std	Y+15, r19	; 0x0f
   149d6:	48 8b       	std	Y+16, r20	; 0x10
   149d8:	89 e6       	ldi	r24, 0x69	; 105
   149da:	91 e2       	ldi	r25, 0x21	; 33
   149dc:	9c 01       	movw	r18, r24
   149de:	40 e0       	ldi	r20, 0x00	; 0
   149e0:	29 8b       	std	Y+17, r18	; 0x11
   149e2:	3a 8b       	std	Y+18, r19	; 0x12
   149e4:	4b 8b       	std	Y+19, r20	; 0x13
   149e6:	83 e8       	ldi	r24, 0x83	; 131
   149e8:	91 e2       	ldi	r25, 0x21	; 33
   149ea:	9c 01       	movw	r18, r24
   149ec:	40 e0       	ldi	r20, 0x00	; 0
   149ee:	2c 8b       	std	Y+20, r18	; 0x14
   149f0:	3d 8b       	std	Y+21, r19	; 0x15
   149f2:	4e 8b       	std	Y+22, r20	; 0x16
   149f4:	89 e9       	ldi	r24, 0x99	; 153
   149f6:	91 e2       	ldi	r25, 0x21	; 33
   149f8:	3c 01       	movw	r6, r24
   149fa:	81 2c       	mov	r8, r1
   149fc:	87 ea       	ldi	r24, 0xA7	; 167
   149fe:	91 e2       	ldi	r25, 0x21	; 33
   14a00:	5c 01       	movw	r10, r24
   14a02:	c1 2c       	mov	r12, r1
   14a04:	83 ec       	ldi	r24, 0xC3	; 195
   14a06:	91 e2       	ldi	r25, 0x21	; 33
   14a08:	1c 01       	movw	r2, r24
   14a0a:	41 2c       	mov	r4, r1
   14a0c:	2a 85       	ldd	r18, Y+10	; 0x0a
   14a0e:	3b 85       	ldd	r19, Y+11	; 0x0b
   14a10:	87 01       	movw	r16, r14
   14a12:	e2 16       	cp	r14, r18
   14a14:	f3 06       	cpc	r15, r19
   14a16:	0c f0       	brlt	.+2      	; 0x14a1a <SS80_Command_State+0x106>
   14a18:	b6 c1       	rjmp	.+876    	; 0x14d86 <SS80_Command_State+0x472>
   14a1a:	0f 5f       	subi	r16, 0xFF	; 255
   14a1c:	1f 4f       	sbci	r17, 0xFF	; 255
   14a1e:	f7 01       	movw	r30, r14
   14a20:	ec 5f       	subi	r30, 0xFC	; 252
   14a22:	f2 4e       	sbci	r31, 0xE2	; 226
   14a24:	80 81       	ld	r24, Z
   14a26:	28 2f       	mov	r18, r24
   14a28:	30 e0       	ldi	r19, 0x00	; 0
   14a2a:	a9 01       	movw	r20, r18
   14a2c:	40 52       	subi	r20, 0x20	; 32
   14a2e:	51 09       	sbc	r21, r1
   14a30:	40 31       	cpi	r20, 0x10	; 16
   14a32:	51 05       	cpc	r21, r1
   14a34:	98 f4       	brcc	.+38     	; 0x14a5c <SS80_Command_State+0x148>
   14a36:	80 52       	subi	r24, 0x20	; 32
   14a38:	1d df       	rcall	.-454    	; 0x14874 <SS80_Check_Unit>
   14a3a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14a3e:	85 ff       	sbrs	r24, 5
   14a40:	a0 c1       	rjmp	.+832    	; 0x14d82 <SS80_Command_State+0x46e>
   14a42:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   14a46:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   14a4a:	85 81       	ldd	r24, Z+5	; 0x05
   14a4c:	90 e0       	ldi	r25, 0x00	; 0
   14a4e:	ed b7       	in	r30, 0x3d	; 61
   14a50:	fe b7       	in	r31, 0x3e	; 62
   14a52:	95 83       	std	Z+5, r25	; 0x05
   14a54:	84 83       	std	Z+4, r24	; 0x04
   14a56:	8a e2       	ldi	r24, 0x2A	; 42
   14a58:	92 e2       	ldi	r25, 0x22	; 34
   14a5a:	19 c0       	rjmp	.+50     	; 0x14a8e <SS80_Command_State+0x17a>
   14a5c:	a9 01       	movw	r20, r18
   14a5e:	40 54       	subi	r20, 0x40	; 64
   14a60:	51 09       	sbc	r21, r1
   14a62:	40 31       	cpi	r20, 0x10	; 16
   14a64:	51 05       	cpc	r21, r1
   14a66:	d0 f4       	brcc	.+52     	; 0x14a9c <SS80_Command_State+0x188>
   14a68:	80 54       	subi	r24, 0x40	; 64
   14a6a:	2d df       	rcall	.-422    	; 0x148c6 <SS80_Check_Volume>
   14a6c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14a70:	85 ff       	sbrs	r24, 5
   14a72:	87 c1       	rjmp	.+782    	; 0x14d82 <SS80_Command_State+0x46e>
   14a74:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   14a78:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   14a7c:	86 81       	ldd	r24, Z+6	; 0x06
   14a7e:	90 e0       	ldi	r25, 0x00	; 0
   14a80:	ed b7       	in	r30, 0x3d	; 61
   14a82:	fe b7       	in	r31, 0x3e	; 62
   14a84:	95 83       	std	Z+5, r25	; 0x05
   14a86:	84 83       	std	Z+4, r24	; 0x04
   14a88:	21 e1       	ldi	r18, 0x11	; 17
   14a8a:	32 e2       	ldi	r19, 0x22	; 34
   14a8c:	c9 01       	movw	r24, r18
   14a8e:	a0 e0       	ldi	r26, 0x00	; 0
   14a90:	81 83       	std	Z+1, r24	; 0x01
   14a92:	92 83       	std	Z+2, r25	; 0x02
   14a94:	a3 83       	std	Z+3, r26	; 0x03
   14a96:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   14a9a:	73 c1       	rjmp	.+742    	; 0x14d82 <SS80_Command_State+0x46e>
   14a9c:	21 15       	cp	r18, r1
   14a9e:	31 05       	cpc	r19, r1
   14aa0:	79 f4       	brne	.+30     	; 0x14ac0 <SS80_Command_State+0x1ac>
   14aa2:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   14aa6:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   14aaa:	81 e0       	ldi	r24, 0x01	; 1
   14aac:	90 e0       	ldi	r25, 0x00	; 0
   14aae:	91 83       	std	Z+1, r25	; 0x01
   14ab0:	80 83       	st	Z, r24
   14ab2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14ab6:	85 ff       	sbrs	r24, 5
   14ab8:	66 c1       	rjmp	.+716    	; 0x14d86 <SS80_Command_State+0x472>
   14aba:	89 ef       	ldi	r24, 0xF9	; 249
   14abc:	91 e2       	ldi	r25, 0x21	; 33
   14abe:	0f c0       	rjmp	.+30     	; 0x14ade <SS80_Command_State+0x1ca>
   14ac0:	22 30       	cpi	r18, 0x02	; 2
   14ac2:	31 05       	cpc	r19, r1
   14ac4:	a9 f4       	brne	.+42     	; 0x14af0 <SS80_Command_State+0x1dc>
   14ac6:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   14aca:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   14ace:	31 83       	std	Z+1, r19	; 0x01
   14ad0:	20 83       	st	Z, r18
   14ad2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14ad6:	85 ff       	sbrs	r24, 5
   14ad8:	56 c1       	rjmp	.+684    	; 0x14d86 <SS80_Command_State+0x472>
   14ada:	80 ee       	ldi	r24, 0xE0	; 224
   14adc:	91 e2       	ldi	r25, 0x21	; 33
   14ade:	a0 e0       	ldi	r26, 0x00	; 0
   14ae0:	ed b7       	in	r30, 0x3d	; 61
   14ae2:	fe b7       	in	r31, 0x3e	; 62
   14ae4:	81 83       	std	Z+1, r24	; 0x01
   14ae6:	92 83       	std	Z+2, r25	; 0x02
   14ae8:	a3 83       	std	Z+3, r26	; 0x03
   14aea:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   14aee:	4b c1       	rjmp	.+662    	; 0x14d86 <SS80_Command_State+0x472>
   14af0:	20 31       	cpi	r18, 0x10	; 16
   14af2:	31 05       	cpc	r19, r1
   14af4:	b1 f5       	brne	.+108    	; 0x14b62 <SS80_Command_State+0x24e>
   14af6:	20 91 81 19 	lds	r18, 0x1981	; 0x801981 <SS80s>
   14afa:	30 91 82 19 	lds	r19, 0x1982	; 0x801982 <SS80s+0x1>
   14afe:	3d 87       	std	Y+13, r19	; 0x0d
   14b00:	2c 87       	std	Y+12, r18	; 0x0c
   14b02:	46 e0       	ldi	r20, 0x06	; 6
   14b04:	50 e0       	ldi	r21, 0x00	; 0
   14b06:	b8 01       	movw	r22, r16
   14b08:	84 e0       	ldi	r24, 0x04	; 4
   14b0a:	9d e1       	ldi	r25, 0x1D	; 29
   14b0c:	0e 94 10 bc 	call	0x17820	; 0x17820 <B2V_MSB>
   14b10:	ec 85       	ldd	r30, Y+12	; 0x0c
   14b12:	fd 85       	ldd	r31, Y+13	; 0x0d
   14b14:	67 83       	std	Z+7, r22	; 0x07
   14b16:	70 87       	std	Z+8, r23	; 0x08
   14b18:	81 87       	std	Z+9, r24	; 0x09
   14b1a:	92 87       	std	Z+10, r25	; 0x0a
   14b1c:	87 01       	movw	r16, r14
   14b1e:	09 5f       	subi	r16, 0xF9	; 249
   14b20:	1f 4f       	sbci	r17, 0xFF	; 255
   14b22:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14b26:	85 ff       	sbrs	r24, 5
   14b28:	2c c1       	rjmp	.+600    	; 0x14d82 <SS80_Command_State+0x46e>
   14b2a:	20 91 81 19 	lds	r18, 0x1981	; 0x801981 <SS80s>
   14b2e:	30 91 82 19 	lds	r19, 0x1982	; 0x801982 <SS80s+0x1>
   14b32:	80 91 83 19 	lds	r24, 0x1983	; 0x801983 <SS80p>
   14b36:	90 91 84 19 	lds	r25, 0x1984	; 0x801984 <SS80p+0x1>
   14b3a:	fc 01       	movw	r30, r24
   14b3c:	a0 89       	ldd	r26, Z+16	; 0x10
   14b3e:	b1 89       	ldd	r27, Z+17	; 0x11
   14b40:	f9 01       	movw	r30, r18
   14b42:	27 81       	ldd	r18, Z+7	; 0x07
   14b44:	30 85       	ldd	r19, Z+8	; 0x08
   14b46:	41 85       	ldd	r20, Z+9	; 0x09
   14b48:	52 85       	ldd	r21, Z+10	; 0x0a
   14b4a:	0e 94 b8 e0 	call	0x1c170	; 0x1c170 <__muluhisi3>
   14b4e:	ed b7       	in	r30, 0x3d	; 61
   14b50:	fe b7       	in	r31, 0x3e	; 62
   14b52:	64 83       	std	Z+4, r22	; 0x04
   14b54:	75 83       	std	Z+5, r23	; 0x05
   14b56:	86 83       	std	Z+6, r24	; 0x06
   14b58:	97 83       	std	Z+7, r25	; 0x07
   14b5a:	21 82       	std	Z+1, r2	; 0x01
   14b5c:	32 82       	std	Z+2, r3	; 0x02
   14b5e:	43 82       	std	Z+3, r4	; 0x03
   14b60:	2e c0       	rjmp	.+92     	; 0x14bbe <SS80_Command_State+0x2aa>
   14b62:	28 31       	cpi	r18, 0x18	; 24
   14b64:	31 05       	cpc	r19, r1
   14b66:	71 f5       	brne	.+92     	; 0x14bc4 <SS80_Command_State+0x2b0>
   14b68:	20 91 81 19 	lds	r18, 0x1981	; 0x801981 <SS80s>
   14b6c:	30 91 82 19 	lds	r19, 0x1982	; 0x801982 <SS80s+0x1>
   14b70:	3d 87       	std	Y+13, r19	; 0x0d
   14b72:	2c 87       	std	Y+12, r18	; 0x0c
   14b74:	44 e0       	ldi	r20, 0x04	; 4
   14b76:	50 e0       	ldi	r21, 0x00	; 0
   14b78:	b8 01       	movw	r22, r16
   14b7a:	84 e0       	ldi	r24, 0x04	; 4
   14b7c:	9d e1       	ldi	r25, 0x1D	; 29
   14b7e:	0e 94 10 bc 	call	0x17820	; 0x17820 <B2V_MSB>
   14b82:	ec 85       	ldd	r30, Y+12	; 0x0c
   14b84:	fd 85       	ldd	r31, Y+13	; 0x0d
   14b86:	63 87       	std	Z+11, r22	; 0x0b
   14b88:	74 87       	std	Z+12, r23	; 0x0c
   14b8a:	85 87       	std	Z+13, r24	; 0x0d
   14b8c:	96 87       	std	Z+14, r25	; 0x0e
   14b8e:	87 01       	movw	r16, r14
   14b90:	0b 5f       	subi	r16, 0xFB	; 251
   14b92:	1f 4f       	sbci	r17, 0xFF	; 255
   14b94:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14b98:	85 ff       	sbrs	r24, 5
   14b9a:	f3 c0       	rjmp	.+486    	; 0x14d82 <SS80_Command_State+0x46e>
   14b9c:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   14ba0:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   14ba4:	83 85       	ldd	r24, Z+11	; 0x0b
   14ba6:	94 85       	ldd	r25, Z+12	; 0x0c
   14ba8:	a5 85       	ldd	r26, Z+13	; 0x0d
   14baa:	b6 85       	ldd	r27, Z+14	; 0x0e
   14bac:	ed b7       	in	r30, 0x3d	; 61
   14bae:	fe b7       	in	r31, 0x3e	; 62
   14bb0:	84 83       	std	Z+4, r24	; 0x04
   14bb2:	95 83       	std	Z+5, r25	; 0x05
   14bb4:	a6 83       	std	Z+6, r26	; 0x06
   14bb6:	b7 83       	std	Z+7, r27	; 0x07
   14bb8:	a1 82       	std	Z+1, r10	; 0x01
   14bba:	b2 82       	std	Z+2, r11	; 0x02
   14bbc:	c3 82       	std	Z+3, r12	; 0x03
   14bbe:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   14bc2:	df c0       	rjmp	.+446    	; 0x14d82 <SS80_Command_State+0x46e>
   14bc4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14bc8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   14bcc:	24 33       	cpi	r18, 0x34	; 52
   14bce:	31 05       	cpc	r19, r1
   14bd0:	41 f4       	brne	.+16     	; 0x14be2 <SS80_Command_State+0x2ce>
   14bd2:	85 ff       	sbrs	r24, 5
   14bd4:	d6 c0       	rjmp	.+428    	; 0x14d82 <SS80_Command_State+0x46e>
   14bd6:	ed b7       	in	r30, 0x3d	; 61
   14bd8:	fe b7       	in	r31, 0x3e	; 62
   14bda:	61 82       	std	Z+1, r6	; 0x01
   14bdc:	72 82       	std	Z+2, r7	; 0x02
   14bde:	83 82       	std	Z+3, r8	; 0x03
   14be0:	2b c0       	rjmp	.+86     	; 0x14c38 <SS80_Command_State+0x324>
   14be2:	29 33       	cpi	r18, 0x39	; 57
   14be4:	31 05       	cpc	r19, r1
   14be6:	49 f4       	brne	.+18     	; 0x14bfa <SS80_Command_State+0x2e6>
   14be8:	87 01       	movw	r16, r14
   14bea:	0d 5f       	subi	r16, 0xFD	; 253
   14bec:	1f 4f       	sbci	r17, 0xFF	; 255
   14bee:	85 ff       	sbrs	r24, 5
   14bf0:	c8 c0       	rjmp	.+400    	; 0x14d82 <SS80_Command_State+0x46e>
   14bf2:	2c 89       	ldd	r18, Y+20	; 0x14
   14bf4:	3d 89       	ldd	r19, Y+21	; 0x15
   14bf6:	4e 89       	ldd	r20, Y+22	; 0x16
   14bf8:	1a c0       	rjmp	.+52     	; 0x14c2e <SS80_Command_State+0x31a>
   14bfa:	2b 33       	cpi	r18, 0x3B	; 59
   14bfc:	31 05       	cpc	r19, r1
   14bfe:	49 f4       	brne	.+18     	; 0x14c12 <SS80_Command_State+0x2fe>
   14c00:	87 01       	movw	r16, r14
   14c02:	0e 5f       	subi	r16, 0xFE	; 254
   14c04:	1f 4f       	sbci	r17, 0xFF	; 255
   14c06:	85 ff       	sbrs	r24, 5
   14c08:	bc c0       	rjmp	.+376    	; 0x14d82 <SS80_Command_State+0x46e>
   14c0a:	29 89       	ldd	r18, Y+17	; 0x11
   14c0c:	3a 89       	ldd	r19, Y+18	; 0x12
   14c0e:	4b 89       	ldd	r20, Y+19	; 0x13
   14c10:	0e c0       	rjmp	.+28     	; 0x14c2e <SS80_Command_State+0x31a>
   14c12:	28 34       	cpi	r18, 0x48	; 72
   14c14:	31 05       	cpc	r19, r1
   14c16:	99 f4       	brne	.+38     	; 0x14c3e <SS80_Command_State+0x32a>
   14c18:	87 01       	movw	r16, r14
   14c1a:	0e 5f       	subi	r16, 0xFE	; 254
   14c1c:	1f 4f       	sbci	r17, 0xFF	; 255
   14c1e:	80 73       	andi	r24, 0x30	; 48
   14c20:	99 27       	eor	r25, r25
   14c22:	89 2b       	or	r24, r25
   14c24:	09 f4       	brne	.+2      	; 0x14c28 <SS80_Command_State+0x314>
   14c26:	ad c0       	rjmp	.+346    	; 0x14d82 <SS80_Command_State+0x46e>
   14c28:	2e 85       	ldd	r18, Y+14	; 0x0e
   14c2a:	3f 85       	ldd	r19, Y+15	; 0x0f
   14c2c:	48 89       	ldd	r20, Y+16	; 0x10
   14c2e:	ed b7       	in	r30, 0x3d	; 61
   14c30:	fe b7       	in	r31, 0x3e	; 62
   14c32:	21 83       	std	Z+1, r18	; 0x01
   14c34:	32 83       	std	Z+2, r19	; 0x02
   14c36:	43 83       	std	Z+3, r20	; 0x03
   14c38:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   14c3c:	a2 c0       	rjmp	.+324    	; 0x14d82 <SS80_Command_State+0x46e>
   14c3e:	24 30       	cpi	r18, 0x04	; 4
   14c40:	31 05       	cpc	r19, r1
   14c42:	41 f4       	brne	.+16     	; 0x14c54 <SS80_Command_State+0x340>
   14c44:	80 73       	andi	r24, 0x30	; 48
   14c46:	99 27       	eor	r25, r25
   14c48:	89 2b       	or	r24, r25
   14c4a:	09 f4       	brne	.+2      	; 0x14c4e <SS80_Command_State+0x33a>
   14c4c:	9c c0       	rjmp	.+312    	; 0x14d86 <SS80_Command_State+0x472>
   14c4e:	83 e2       	ldi	r24, 0x23	; 35
   14c50:	91 e2       	ldi	r25, 0x21	; 33
   14c52:	45 cf       	rjmp	.-374    	; 0x14ade <SS80_Command_State+0x1ca>
   14c54:	2e 30       	cpi	r18, 0x0E	; 14
   14c56:	31 05       	cpc	r19, r1
   14c58:	29 f4       	brne	.+10     	; 0x14c64 <SS80_Command_State+0x350>
   14c5a:	85 ff       	sbrs	r24, 5
   14c5c:	94 c0       	rjmp	.+296    	; 0x14d86 <SS80_Command_State+0x472>
   14c5e:	8d e0       	ldi	r24, 0x0D	; 13
   14c60:	91 e2       	ldi	r25, 0x21	; 33
   14c62:	3d cf       	rjmp	.-390    	; 0x14ade <SS80_Command_State+0x1ca>
   14c64:	2f 30       	cpi	r18, 0x0F	; 15
   14c66:	31 05       	cpc	r19, r1
   14c68:	29 f4       	brne	.+10     	; 0x14c74 <SS80_Command_State+0x360>
   14c6a:	85 ff       	sbrs	r24, 5
   14c6c:	8c c0       	rjmp	.+280    	; 0x14d86 <SS80_Command_State+0x472>
   14c6e:	80 ef       	ldi	r24, 0xF0	; 240
   14c70:	90 e2       	ldi	r25, 0x20	; 32
   14c72:	35 cf       	rjmp	.-406    	; 0x14ade <SS80_Command_State+0x1ca>
   14c74:	21 33       	cpi	r18, 0x31	; 49
   14c76:	31 05       	cpc	r19, r1
   14c78:	59 f4       	brne	.+22     	; 0x14c90 <SS80_Command_State+0x37c>
   14c7a:	87 01       	movw	r16, r14
   14c7c:	0d 5f       	subi	r16, 0xFD	; 253
   14c7e:	1f 4f       	sbci	r17, 0xFF	; 255
   14c80:	80 73       	andi	r24, 0x30	; 48
   14c82:	99 27       	eor	r25, r25
   14c84:	89 2b       	or	r24, r25
   14c86:	09 f4       	brne	.+2      	; 0x14c8a <SS80_Command_State+0x376>
   14c88:	7e c0       	rjmp	.+252    	; 0x14d86 <SS80_Command_State+0x472>
   14c8a:	84 ed       	ldi	r24, 0xD4	; 212
   14c8c:	90 e2       	ldi	r25, 0x20	; 32
   14c8e:	27 cf       	rjmp	.-434    	; 0x14ade <SS80_Command_State+0x1ca>
   14c90:	25 33       	cpi	r18, 0x35	; 53
   14c92:	31 05       	cpc	r19, r1
   14c94:	69 f4       	brne	.+26     	; 0x14cb0 <SS80_Command_State+0x39c>
   14c96:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   14c9a:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   14c9e:	24 e0       	ldi	r18, 0x04	; 4
   14ca0:	30 e0       	ldi	r19, 0x00	; 0
   14ca2:	31 83       	std	Z+1, r19	; 0x01
   14ca4:	20 83       	st	Z, r18
   14ca6:	85 ff       	sbrs	r24, 5
   14ca8:	6e c0       	rjmp	.+220    	; 0x14d86 <SS80_Command_State+0x472>
   14caa:	83 ec       	ldi	r24, 0xC3	; 195
   14cac:	90 e2       	ldi	r25, 0x20	; 32
   14cae:	17 cf       	rjmp	.-466    	; 0x14ade <SS80_Command_State+0x1ca>
   14cb0:	27 33       	cpi	r18, 0x37	; 55
   14cb2:	31 05       	cpc	r19, r1
   14cb4:	59 f4       	brne	.+22     	; 0x14ccc <SS80_Command_State+0x3b8>
   14cb6:	87 01       	movw	r16, r14
   14cb8:	0d 5f       	subi	r16, 0xFD	; 253
   14cba:	1f 4f       	sbci	r17, 0xFF	; 255
   14cbc:	80 73       	andi	r24, 0x30	; 48
   14cbe:	99 27       	eor	r25, r25
   14cc0:	89 2b       	or	r24, r25
   14cc2:	09 f4       	brne	.+2      	; 0x14cc6 <SS80_Command_State+0x3b2>
   14cc4:	60 c0       	rjmp	.+192    	; 0x14d86 <SS80_Command_State+0x472>
   14cc6:	85 ea       	ldi	r24, 0xA5	; 165
   14cc8:	90 e2       	ldi	r25, 0x20	; 32
   14cca:	09 cf       	rjmp	.-494    	; 0x14ade <SS80_Command_State+0x1ca>
   14ccc:	2e 33       	cpi	r18, 0x3E	; 62
   14cce:	31 05       	cpc	r19, r1
   14cd0:	c1 f4       	brne	.+48     	; 0x14d02 <SS80_Command_State+0x3ee>
   14cd2:	80 73       	andi	r24, 0x30	; 48
   14cd4:	99 27       	eor	r25, r25
   14cd6:	89 2b       	or	r24, r25
   14cd8:	81 f0       	breq	.+32     	; 0x14cfa <SS80_Command_State+0x3e6>
   14cda:	86 e8       	ldi	r24, 0x86	; 134
   14cdc:	90 e2       	ldi	r25, 0x20	; 32
   14cde:	a0 e0       	ldi	r26, 0x00	; 0
   14ce0:	ed b7       	in	r30, 0x3d	; 61
   14ce2:	fe b7       	in	r31, 0x3e	; 62
   14ce4:	81 83       	std	Z+1, r24	; 0x01
   14ce6:	92 83       	std	Z+2, r25	; 0x02
   14ce8:	a3 83       	std	Z+3, r26	; 0x03
   14cea:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   14cee:	67 e7       	ldi	r22, 0x77	; 119
   14cf0:	70 e1       	ldi	r23, 0x10	; 16
   14cf2:	c8 01       	movw	r24, r16
   14cf4:	8c 5f       	subi	r24, 0xFC	; 252
   14cf6:	92 4e       	sbci	r25, 0xE2	; 226
   14cf8:	69 dc       	rcall	.-1838   	; 0x145cc <SS80_display_extended_status>
   14cfa:	87 01       	movw	r16, r14
   14cfc:	07 5f       	subi	r16, 0xF7	; 247
   14cfe:	1f 4f       	sbci	r17, 0xFF	; 255
   14d00:	42 c0       	rjmp	.+132    	; 0x14d86 <SS80_Command_State+0x472>
   14d02:	2c 34       	cpi	r18, 0x4C	; 76
   14d04:	31 05       	cpc	r19, r1
   14d06:	39 f4       	brne	.+14     	; 0x14d16 <SS80_Command_State+0x402>
   14d08:	80 73       	andi	r24, 0x30	; 48
   14d0a:	99 27       	eor	r25, r25
   14d0c:	89 2b       	or	r24, r25
   14d0e:	d9 f1       	breq	.+118    	; 0x14d86 <SS80_Command_State+0x472>
   14d10:	8b e6       	ldi	r24, 0x6B	; 107
   14d12:	90 e2       	ldi	r25, 0x20	; 32
   14d14:	e4 ce       	rjmp	.-568    	; 0x14ade <SS80_Command_State+0x1ca>
   14d16:	2d 34       	cpi	r18, 0x4D	; 77
   14d18:	31 05       	cpc	r19, r1
   14d1a:	39 f4       	brne	.+14     	; 0x14d2a <SS80_Command_State+0x416>
   14d1c:	80 73       	andi	r24, 0x30	; 48
   14d1e:	99 27       	eor	r25, r25
   14d20:	89 2b       	or	r24, r25
   14d22:	89 f1       	breq	.+98     	; 0x14d86 <SS80_Command_State+0x472>
   14d24:	82 e5       	ldi	r24, 0x52	; 82
   14d26:	90 e2       	ldi	r25, 0x20	; 32
   14d28:	da ce       	rjmp	.-588    	; 0x14ade <SS80_Command_State+0x1ca>
   14d2a:	2d 30       	cpi	r18, 0x0D	; 13
   14d2c:	31 05       	cpc	r19, r1
   14d2e:	69 f4       	brne	.+26     	; 0x14d4a <SS80_Command_State+0x436>
   14d30:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   14d34:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   14d38:	23 e0       	ldi	r18, 0x03	; 3
   14d3a:	30 e0       	ldi	r19, 0x00	; 0
   14d3c:	31 83       	std	Z+1, r19	; 0x01
   14d3e:	20 83       	st	Z, r18
   14d40:	85 ff       	sbrs	r24, 5
   14d42:	21 c0       	rjmp	.+66     	; 0x14d86 <SS80_Command_State+0x472>
   14d44:	8b e3       	ldi	r24, 0x3B	; 59
   14d46:	90 e2       	ldi	r25, 0x20	; 32
   14d48:	ca ce       	rjmp	.-620    	; 0x14ade <SS80_Command_State+0x1ca>
   14d4a:	23 33       	cpi	r18, 0x33	; 51
   14d4c:	31 05       	cpc	r19, r1
   14d4e:	51 f4       	brne	.+20     	; 0x14d64 <SS80_Command_State+0x450>
   14d50:	87 01       	movw	r16, r14
   14d52:	0c 5f       	subi	r16, 0xFC	; 252
   14d54:	1f 4f       	sbci	r17, 0xFF	; 255
   14d56:	80 73       	andi	r24, 0x30	; 48
   14d58:	99 27       	eor	r25, r25
   14d5a:	89 2b       	or	r24, r25
   14d5c:	a1 f0       	breq	.+40     	; 0x14d86 <SS80_Command_State+0x472>
   14d5e:	88 e1       	ldi	r24, 0x18	; 24
   14d60:	90 e2       	ldi	r25, 0x20	; 32
   14d62:	bd ce       	rjmp	.-646    	; 0x14ade <SS80_Command_State+0x1ca>
   14d64:	80 ff       	sbrs	r24, 0
   14d66:	28 c0       	rjmp	.+80     	; 0x14db8 <SS80_Command_State+0x4a4>
   14d68:	ed b7       	in	r30, 0x3d	; 61
   14d6a:	fe b7       	in	r31, 0x3e	; 62
   14d6c:	35 83       	std	Z+5, r19	; 0x05
   14d6e:	24 83       	std	Z+4, r18	; 0x04
   14d70:	88 ef       	ldi	r24, 0xF8	; 248
   14d72:	9f e1       	ldi	r25, 0x1F	; 31
   14d74:	a0 e0       	ldi	r26, 0x00	; 0
   14d76:	81 83       	std	Z+1, r24	; 0x01
   14d78:	92 83       	std	Z+2, r25	; 0x02
   14d7a:	a3 83       	std	Z+3, r26	; 0x03
   14d7c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   14d80:	02 c0       	rjmp	.+4      	; 0x14d86 <SS80_Command_State+0x472>
   14d82:	78 01       	movw	r14, r16
   14d84:	43 ce       	rjmp	.-890    	; 0x14a0c <SS80_Command_State+0xf8>
   14d86:	8a 85       	ldd	r24, Y+10	; 0x0a
   14d88:	9b 85       	ldd	r25, Y+11	; 0x0b
   14d8a:	08 17       	cp	r16, r24
   14d8c:	19 07       	cpc	r17, r25
   14d8e:	a1 f0       	breq	.+40     	; 0x14db8 <SS80_Command_State+0x4a4>
   14d90:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14d94:	80 ff       	sbrs	r24, 0
   14d96:	10 c0       	rjmp	.+32     	; 0x14db8 <SS80_Command_State+0x4a4>
   14d98:	2a 85       	ldd	r18, Y+10	; 0x0a
   14d9a:	3b 85       	ldd	r19, Y+11	; 0x0b
   14d9c:	ed b7       	in	r30, 0x3d	; 61
   14d9e:	fe b7       	in	r31, 0x3e	; 62
   14da0:	37 83       	std	Z+7, r19	; 0x07
   14da2:	26 83       	std	Z+6, r18	; 0x06
   14da4:	15 83       	std	Z+5, r17	; 0x05
   14da6:	04 83       	std	Z+4, r16	; 0x04
   14da8:	80 ec       	ldi	r24, 0xC0	; 192
   14daa:	9f e1       	ldi	r25, 0x1F	; 31
   14dac:	a0 e0       	ldi	r26, 0x00	; 0
   14dae:	81 83       	std	Z+1, r24	; 0x01
   14db0:	92 83       	std	Z+2, r25	; 0x02
   14db2:	a3 83       	std	Z+3, r26	; 0x03
   14db4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   14db8:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   14dbc:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   14dc0:	81 81       	ldd	r24, Z+1	; 0x01
   14dc2:	90 e0       	ldi	r25, 0x00	; 0
   14dc4:	0e 94 63 84 	call	0x108c6	; 0x108c6 <gpib_enable_PPR>
   14dc8:	88 85       	ldd	r24, Y+8	; 0x08
   14dca:	99 85       	ldd	r25, Y+9	; 0x09
   14dcc:	88 27       	eor	r24, r24
   14dce:	90 7d       	andi	r25, 0xD0	; 208
   14dd0:	02 c0       	rjmp	.+4      	; 0x14dd6 <SS80_Command_State+0x4c2>
   14dd2:	80 e0       	ldi	r24, 0x00	; 0
   14dd4:	90 e0       	ldi	r25, 0x00	; 0
   14dd6:	66 96       	adiw	r28, 0x16	; 22
   14dd8:	0f b6       	in	r0, 0x3f	; 63
   14dda:	f8 94       	cli
   14ddc:	de bf       	out	0x3e, r29	; 62
   14dde:	0f be       	out	0x3f, r0	; 63
   14de0:	cd bf       	out	0x3d, r28	; 61
   14de2:	df 91       	pop	r29
   14de4:	cf 91       	pop	r28
   14de6:	1f 91       	pop	r17
   14de8:	0f 91       	pop	r16
   14dea:	ff 90       	pop	r15
   14dec:	ef 90       	pop	r14
   14dee:	cf 90       	pop	r12
   14df0:	bf 90       	pop	r11
   14df2:	af 90       	pop	r10
   14df4:	8f 90       	pop	r8
   14df6:	7f 90       	pop	r7
   14df8:	6f 90       	pop	r6
   14dfa:	4f 90       	pop	r4
   14dfc:	3f 90       	pop	r3
   14dfe:	2f 90       	pop	r2
   14e00:	08 95       	ret

00014e02 <SS80_cmd_seek>:
   14e02:	a7 e0       	ldi	r26, 0x07	; 7
   14e04:	b0 e0       	ldi	r27, 0x00	; 0
   14e06:	e7 e0       	ldi	r30, 0x07	; 7
   14e08:	f7 ea       	ldi	r31, 0xA7	; 167
   14e0a:	0c 94 da e0 	jmp	0x1c1b4	; 0x1c1b4 <__prologue_saves__+0x4>
   14e0e:	c0 91 81 19 	lds	r28, 0x1981	; 0x801981 <SS80s>
   14e12:	d0 91 82 19 	lds	r29, 0x1982	; 0x801982 <SS80s+0x1>
   14e16:	8f 80       	ldd	r8, Y+7	; 0x07
   14e18:	98 84       	ldd	r9, Y+8	; 0x08
   14e1a:	a9 84       	ldd	r10, Y+9	; 0x09
   14e1c:	ba 84       	ldd	r11, Y+10	; 0x0a
   14e1e:	00 91 83 19 	lds	r16, 0x1983	; 0x801983 <SS80p>
   14e22:	10 91 84 19 	lds	r17, 0x1984	; 0x801984 <SS80p+0x1>
   14e26:	f8 01       	movw	r30, r16
   14e28:	c0 88       	ldd	r12, Z+16	; 0x10
   14e2a:	d1 88       	ldd	r13, Z+17	; 0x11
   14e2c:	e1 2c       	mov	r14, r1
   14e2e:	f1 2c       	mov	r15, r1
   14e30:	6b 85       	ldd	r22, Y+11	; 0x0b
   14e32:	7c 85       	ldd	r23, Y+12	; 0x0c
   14e34:	8d 85       	ldd	r24, Y+13	; 0x0d
   14e36:	9e 85       	ldd	r25, Y+14	; 0x0e
   14e38:	a7 01       	movw	r20, r14
   14e3a:	96 01       	movw	r18, r12
   14e3c:	0e 94 6b e0 	call	0x1c0d6	; 0x1c0d6 <__udivmodsi4>
   14e40:	da 01       	movw	r26, r20
   14e42:	c9 01       	movw	r24, r18
   14e44:	88 0d       	add	r24, r8
   14e46:	99 1d       	adc	r25, r9
   14e48:	aa 1d       	adc	r26, r10
   14e4a:	bb 1d       	adc	r27, r11
   14e4c:	f8 01       	movw	r30, r16
   14e4e:	46 a0       	ldd	r4, Z+38	; 0x26
   14e50:	57 a0       	ldd	r5, Z+39	; 0x27
   14e52:	60 a4       	ldd	r6, Z+40	; 0x28
   14e54:	71 a4       	ldd	r7, Z+41	; 0x29
   14e56:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   14e5a:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   14e5e:	48 16       	cp	r4, r24
   14e60:	59 06       	cpc	r5, r25
   14e62:	6a 06       	cpc	r6, r26
   14e64:	7b 06       	cpc	r7, r27
   14e66:	f0 f4       	brcc	.+60     	; 0x14ea4 <SS80_cmd_seek+0xa2>
   14e68:	81 e0       	ldi	r24, 0x01	; 1
   14e6a:	8a 83       	std	Y+2, r24	; 0x02
   14e6c:	8b 81       	ldd	r24, Y+3	; 0x03
   14e6e:	9c 81       	ldd	r25, Y+4	; 0x04
   14e70:	84 60       	ori	r24, 0x04	; 4
   14e72:	9c 83       	std	Y+4, r25	; 0x04
   14e74:	8b 83       	std	Y+3, r24	; 0x03
   14e76:	40 ff       	sbrs	r20, 0
   14e78:	31 c0       	rjmp	.+98     	; 0x14edc <SS80_cmd_seek+0xda>
   14e7a:	a0 89       	ldd	r26, Z+16	; 0x10
   14e7c:	b1 89       	ldd	r27, Z+17	; 0x11
   14e7e:	a5 01       	movw	r20, r10
   14e80:	94 01       	movw	r18, r8
   14e82:	0e 94 b8 e0 	call	0x1c170	; 0x1c170 <__muluhisi3>
   14e86:	ed b7       	in	r30, 0x3d	; 61
   14e88:	fe b7       	in	r31, 0x3e	; 62
   14e8a:	64 83       	std	Z+4, r22	; 0x04
   14e8c:	75 83       	std	Z+5, r23	; 0x05
   14e8e:	86 83       	std	Z+6, r24	; 0x06
   14e90:	97 83       	std	Z+7, r25	; 0x07
   14e92:	8d e7       	ldi	r24, 0x7D	; 125
   14e94:	9e e1       	ldi	r25, 0x1E	; 30
   14e96:	a0 e0       	ldi	r26, 0x00	; 0
   14e98:	81 83       	std	Z+1, r24	; 0x01
   14e9a:	92 83       	std	Z+2, r25	; 0x02
   14e9c:	a3 83       	std	Z+3, r26	; 0x03
   14e9e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   14ea2:	1c c0       	rjmp	.+56     	; 0x14edc <SS80_cmd_seek+0xda>
   14ea4:	ca 01       	movw	r24, r20
   14ea6:	80 72       	andi	r24, 0x20	; 32
   14ea8:	99 27       	eor	r25, r25
   14eaa:	45 ff       	sbrs	r20, 5
   14eac:	19 c0       	rjmp	.+50     	; 0x14ee0 <SS80_cmd_seek+0xde>
   14eae:	a5 01       	movw	r20, r10
   14eb0:	94 01       	movw	r18, r8
   14eb2:	c7 01       	movw	r24, r14
   14eb4:	b6 01       	movw	r22, r12
   14eb6:	0e 94 29 e0 	call	0x1c052	; 0x1c052 <__mulsi3>
   14eba:	ed b7       	in	r30, 0x3d	; 61
   14ebc:	fe b7       	in	r31, 0x3e	; 62
   14ebe:	64 83       	std	Z+4, r22	; 0x04
   14ec0:	75 83       	std	Z+5, r23	; 0x05
   14ec2:	86 83       	std	Z+6, r24	; 0x06
   14ec4:	97 83       	std	Z+7, r25	; 0x07
   14ec6:	89 e6       	ldi	r24, 0x69	; 105
   14ec8:	9e e1       	ldi	r25, 0x1E	; 30
   14eca:	a0 e0       	ldi	r26, 0x00	; 0
   14ecc:	81 83       	std	Z+1, r24	; 0x01
   14ece:	92 83       	std	Z+2, r25	; 0x02
   14ed0:	a3 83       	std	Z+3, r26	; 0x03
   14ed2:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   14ed6:	80 e0       	ldi	r24, 0x00	; 0
   14ed8:	90 e0       	ldi	r25, 0x00	; 0
   14eda:	02 c0       	rjmp	.+4      	; 0x14ee0 <SS80_cmd_seek+0xde>
   14edc:	81 e0       	ldi	r24, 0x01	; 1
   14ede:	90 e0       	ldi	r25, 0x00	; 0
   14ee0:	cd b7       	in	r28, 0x3d	; 61
   14ee2:	de b7       	in	r29, 0x3e	; 62
   14ee4:	27 96       	adiw	r28, 0x07	; 7
   14ee6:	e0 e1       	ldi	r30, 0x10	; 16
   14ee8:	0c 94 f6 e0 	jmp	0x1c1ec	; 0x1c1ec <__epilogue_restores__+0x4>

00014eec <SS80_locate_and_write>:
   14eec:	a3 e1       	ldi	r26, 0x13	; 19
   14eee:	b0 e0       	ldi	r27, 0x00	; 0
   14ef0:	ec e7       	ldi	r30, 0x7C	; 124
   14ef2:	f7 ea       	ldi	r31, 0xA7	; 167
   14ef4:	0c 94 d8 e0 	jmp	0x1c1b0	; 0x1c1b0 <__prologue_saves__>
   14ef8:	00 91 81 19 	lds	r16, 0x1981	; 0x801981 <SS80s>
   14efc:	10 91 82 19 	lds	r17, 0x1982	; 0x801982 <SS80s+0x1>
   14f00:	80 91 83 19 	lds	r24, 0x1983	; 0x801983 <SS80p>
   14f04:	90 91 84 19 	lds	r25, 0x1984	; 0x801984 <SS80p+0x1>
   14f08:	fc 01       	movw	r30, r24
   14f0a:	a0 89       	ldd	r26, Z+16	; 0x10
   14f0c:	b1 89       	ldd	r27, Z+17	; 0x11
   14f0e:	f8 01       	movw	r30, r16
   14f10:	27 81       	ldd	r18, Z+7	; 0x07
   14f12:	30 85       	ldd	r19, Z+8	; 0x08
   14f14:	41 85       	ldd	r20, Z+9	; 0x09
   14f16:	52 85       	ldd	r21, Z+10	; 0x0a
   14f18:	0e 94 b8 e0 	call	0x1c170	; 0x1c170 <__muluhisi3>
   14f1c:	4b 01       	movw	r8, r22
   14f1e:	5c 01       	movw	r10, r24
   14f20:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14f24:	85 ff       	sbrs	r24, 5
   14f26:	16 c0       	rjmp	.+44     	; 0x14f54 <SS80_locate_and_write+0x68>
   14f28:	83 85       	ldd	r24, Z+11	; 0x0b
   14f2a:	94 85       	ldd	r25, Z+12	; 0x0c
   14f2c:	a5 85       	ldd	r26, Z+13	; 0x0d
   14f2e:	b6 85       	ldd	r27, Z+14	; 0x0e
   14f30:	ed b7       	in	r30, 0x3d	; 61
   14f32:	fe b7       	in	r31, 0x3e	; 62
   14f34:	80 87       	std	Z+8, r24	; 0x08
   14f36:	91 87       	std	Z+9, r25	; 0x09
   14f38:	a2 87       	std	Z+10, r26	; 0x0a
   14f3a:	b3 87       	std	Z+11, r27	; 0x0b
   14f3c:	84 82       	std	Z+4, r8	; 0x04
   14f3e:	95 82       	std	Z+5, r9	; 0x05
   14f40:	a6 82       	std	Z+6, r10	; 0x06
   14f42:	b7 82       	std	Z+7, r11	; 0x07
   14f44:	80 e0       	ldi	r24, 0x00	; 0
   14f46:	94 e2       	ldi	r25, 0x24	; 36
   14f48:	a0 e0       	ldi	r26, 0x00	; 0
   14f4a:	81 83       	std	Z+1, r24	; 0x01
   14f4c:	92 83       	std	Z+2, r25	; 0x02
   14f4e:	a3 83       	std	Z+3, r26	; 0x03
   14f50:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   14f54:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   14f58:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   14f5c:	12 82       	std	Z+2, r1	; 0x02
   14f5e:	54 98       	cbi	0x0a, 4	; 10
   14f60:	4c 99       	sbic	0x09, 4	; 9
   14f62:	03 c0       	rjmp	.+6      	; 0x14f6a <SS80_locate_and_write+0x7e>
   14f64:	80 e0       	ldi	r24, 0x00	; 0
   14f66:	90 e1       	ldi	r25, 0x10	; 16
   14f68:	4f c1       	rjmp	.+670    	; 0x15208 <SS80_locate_and_write+0x31c>
   14f6a:	4b df       	rcall	.-362    	; 0x14e02 <SS80_cmd_seek>
   14f6c:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   14f70:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   14f74:	89 2b       	or	r24, r25
   14f76:	41 f0       	breq	.+16     	; 0x14f88 <SS80_locate_and_write+0x9c>
   14f78:	83 81       	ldd	r24, Z+3	; 0x03
   14f7a:	94 81       	ldd	r25, Z+4	; 0x04
   14f7c:	82 60       	ori	r24, 0x02	; 2
   14f7e:	94 83       	std	Z+4, r25	; 0x04
   14f80:	83 83       	std	Z+3, r24	; 0x03
   14f82:	01 e0       	ldi	r16, 0x01	; 1
   14f84:	10 e0       	ldi	r17, 0x00	; 0
   14f86:	02 c0       	rjmp	.+4      	; 0x14f8c <SS80_locate_and_write+0xa0>
   14f88:	00 e0       	ldi	r16, 0x00	; 0
   14f8a:	10 e0       	ldi	r17, 0x00	; 0
   14f8c:	23 84       	ldd	r2, Z+11	; 0x0b
   14f8e:	34 84       	ldd	r3, Z+12	; 0x0c
   14f90:	1d 86       	std	Y+13, r1	; 0x0d
   14f92:	1c 86       	std	Y+12, r1	; 0x0c
   14f94:	41 2c       	mov	r4, r1
   14f96:	51 2c       	mov	r5, r1
   14f98:	32 01       	movw	r6, r4
   14f9a:	83 eb       	ldi	r24, 0xB3	; 179
   14f9c:	93 e2       	ldi	r25, 0x23	; 35
   14f9e:	9c 01       	movw	r18, r24
   14fa0:	40 e0       	ldi	r20, 0x00	; 0
   14fa2:	2e 87       	std	Y+14, r18	; 0x0e
   14fa4:	3f 87       	std	Y+15, r19	; 0x0f
   14fa6:	48 8b       	std	Y+16, r20	; 0x10
   14fa8:	89 ed       	ldi	r24, 0xD9	; 217
   14faa:	93 e2       	ldi	r25, 0x23	; 35
   14fac:	9c 01       	movw	r18, r24
   14fae:	40 e0       	ldi	r20, 0x00	; 0
   14fb0:	29 8b       	std	Y+17, r18	; 0x11
   14fb2:	3a 8b       	std	Y+18, r19	; 0x12
   14fb4:	4b 8b       	std	Y+19, r20	; 0x13
   14fb6:	12 14       	cp	r1, r2
   14fb8:	13 04       	cpc	r1, r3
   14fba:	0c f0       	brlt	.+2      	; 0x14fbe <SS80_locate_and_write+0xd2>
   14fbc:	f5 c0       	rjmp	.+490    	; 0x151a8 <SS80_locate_and_write+0x2bc>
   14fbe:	54 98       	cbi	0x0a, 4	; 10
   14fc0:	4c 9b       	sbis	0x09, 4	; 9
   14fc2:	d0 cf       	rjmp	.-96     	; 0x14f64 <SS80_locate_and_write+0x78>
   14fc4:	71 01       	movw	r14, r2
   14fc6:	31 e0       	ldi	r19, 0x01	; 1
   14fc8:	23 16       	cp	r2, r19
   14fca:	33 06       	cpc	r3, r19
   14fcc:	1c f0       	brlt	.+6      	; 0x14fd4 <SS80_locate_and_write+0xe8>
   14fce:	e1 2c       	mov	r14, r1
   14fd0:	ff 24       	eor	r15, r15
   14fd2:	f3 94       	inc	r15
   14fd4:	e4 e0       	ldi	r30, 0x04	; 4
   14fd6:	fd e1       	ldi	r31, 0x1D	; 29
   14fd8:	20 e0       	ldi	r18, 0x00	; 0
   14fda:	32 e0       	ldi	r19, 0x02	; 2
   14fdc:	11 92       	st	Z+, r1
   14fde:	21 50       	subi	r18, 0x01	; 1
   14fe0:	30 40       	sbci	r19, 0x00	; 0
   14fe2:	e1 f7       	brne	.-8      	; 0x14fdc <SS80_locate_and_write+0xf0>
   14fe4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   14fe8:	87 fd       	sbrc	r24, 7
   14fea:	0e 94 a1 83 	call	0x10742	; 0x10742 <gpib_timer_elapsed_begin>
   14fee:	ae 01       	movw	r20, r28
   14ff0:	44 5f       	subi	r20, 0xF4	; 244
   14ff2:	5f 4f       	sbci	r21, 0xFF	; 255
   14ff4:	b7 01       	movw	r22, r14
   14ff6:	84 e0       	ldi	r24, 0x04	; 4
   14ff8:	9d e1       	ldi	r25, 0x1D	; 29
   14ffa:	0e 94 51 89 	call	0x112a2	; 0x112a2 <gpib_read_str>
   14ffe:	6c 01       	movw	r12, r24
   15000:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15004:	87 ff       	sbrs	r24, 7
   15006:	04 c0       	rjmp	.+8      	; 0x15010 <SS80_locate_and_write+0x124>
   15008:	83 e9       	ldi	r24, 0x93	; 147
   1500a:	90 e1       	ldi	r25, 0x10	; 16
   1500c:	0e 94 b3 83 	call	0x10766	; 0x10766 <gpib_timer_elapsed_end>
   15010:	ce 14       	cp	r12, r14
   15012:	df 04       	cpc	r13, r15
   15014:	39 f1       	breq	.+78     	; 0x15064 <SS80_locate_and_write+0x178>
   15016:	8c 85       	ldd	r24, Y+12	; 0x0c
   15018:	9d 85       	ldd	r25, Y+13	; 0x0d
   1501a:	9c 01       	movw	r18, r24
   1501c:	22 27       	eor	r18, r18
   1501e:	30 7d       	andi	r19, 0xD0	; 208
   15020:	23 2b       	or	r18, r19
   15022:	d1 f0       	breq	.+52     	; 0x15058 <SS80_locate_and_write+0x16c>
   15024:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15028:	80 ff       	sbrs	r24, 0
   1502a:	0a c0       	rjmp	.+20     	; 0x15040 <SS80_locate_and_write+0x154>
   1502c:	8d ee       	ldi	r24, 0xED	; 237
   1502e:	93 e2       	ldi	r25, 0x23	; 35
   15030:	a0 e0       	ldi	r26, 0x00	; 0
   15032:	ed b7       	in	r30, 0x3d	; 61
   15034:	fe b7       	in	r31, 0x3e	; 62
   15036:	81 83       	std	Z+1, r24	; 0x01
   15038:	92 83       	std	Z+2, r25	; 0x02
   1503a:	a3 83       	std	Z+3, r26	; 0x03
   1503c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   15040:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   15044:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   15048:	83 81       	ldd	r24, Z+3	; 0x03
   1504a:	94 81       	ldd	r25, Z+4	; 0x04
   1504c:	82 60       	ori	r24, 0x02	; 2
   1504e:	94 83       	std	Z+4, r25	; 0x04
   15050:	83 83       	std	Z+3, r24	; 0x03
   15052:	81 e0       	ldi	r24, 0x01	; 1
   15054:	82 83       	std	Z+2, r24	; 0x02
   15056:	99 c0       	rjmp	.+306    	; 0x1518a <SS80_locate_and_write+0x29e>
   15058:	c1 14       	cp	r12, r1
   1505a:	d1 04       	cpc	r13, r1
   1505c:	09 f0       	breq	.+2      	; 0x15060 <SS80_locate_and_write+0x174>
   1505e:	d0 c0       	rjmp	.+416    	; 0x15200 <SS80_locate_and_write+0x314>
   15060:	90 fd       	sbrc	r25, 0
   15062:	93 c0       	rjmp	.+294    	; 0x1518a <SS80_locate_and_write+0x29e>
   15064:	01 15       	cp	r16, r1
   15066:	11 05       	cpc	r17, r1
   15068:	09 f0       	breq	.+2      	; 0x1506c <SS80_locate_and_write+0x180>
   1506a:	84 c0       	rjmp	.+264    	; 0x15174 <SS80_locate_and_write+0x288>
   1506c:	c1 14       	cp	r12, r1
   1506e:	d1 04       	cpc	r13, r1
   15070:	09 f4       	brne	.+2      	; 0x15074 <SS80_locate_and_write+0x188>
   15072:	82 c0       	rjmp	.+260    	; 0x15178 <SS80_locate_and_write+0x28c>
   15074:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15078:	86 fd       	sbrc	r24, 6
   1507a:	0e 94 a1 83 	call	0x10742	; 0x10742 <gpib_timer_elapsed_begin>
   1507e:	e0 90 81 19 	lds	r14, 0x1981	; 0x801981 <SS80s>
   15082:	f0 90 82 19 	lds	r15, 0x1982	; 0x801982 <SS80s+0x1>
   15086:	f3 e0       	ldi	r31, 0x03	; 3
   15088:	ef 0e       	add	r14, r31
   1508a:	f1 1c       	adc	r15, r1
   1508c:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   15090:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   15094:	86 01       	movw	r16, r12
   15096:	24 e0       	ldi	r18, 0x04	; 4
   15098:	3d e1       	ldi	r19, 0x1D	; 29
   1509a:	b5 01       	movw	r22, r10
   1509c:	a4 01       	movw	r20, r8
   1509e:	82 81       	ldd	r24, Z+2	; 0x02
   150a0:	93 81       	ldd	r25, Z+3	; 0x03
   150a2:	0e 94 4a 83 	call	0x10694	; 0x10694 <dbf_open_write>
   150a6:	7c 01       	movw	r14, r24
   150a8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   150ac:	86 ff       	sbrs	r24, 6
   150ae:	04 c0       	rjmp	.+8      	; 0x150b8 <SS80_locate_and_write+0x1cc>
   150b0:	8e e9       	ldi	r24, 0x9E	; 158
   150b2:	90 e1       	ldi	r25, 0x10	; 16
   150b4:	0e 94 b3 83 	call	0x10766	; 0x10766 <gpib_timer_elapsed_end>
   150b8:	ce 14       	cp	r12, r14
   150ba:	df 04       	cpc	r13, r15
   150bc:	39 f1       	breq	.+78     	; 0x1510c <SS80_locate_and_write+0x220>
   150be:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   150c2:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   150c6:	83 81       	ldd	r24, Z+3	; 0x03
   150c8:	94 81       	ldd	r25, Z+4	; 0x04
   150ca:	82 60       	ori	r24, 0x02	; 2
   150cc:	94 83       	std	Z+4, r25	; 0x04
   150ce:	83 83       	std	Z+3, r24	; 0x03
   150d0:	0e 94 53 6e 	call	0xdca6	; 0xdca6 <mmc_wp_status>
   150d4:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   150d8:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   150dc:	89 2b       	or	r24, r25
   150de:	29 f0       	breq	.+10     	; 0x150ea <SS80_locate_and_write+0x1fe>
   150e0:	83 81       	ldd	r24, Z+3	; 0x03
   150e2:	94 81       	ldd	r25, Z+4	; 0x04
   150e4:	88 60       	ori	r24, 0x08	; 8
   150e6:	94 83       	std	Z+4, r25	; 0x04
   150e8:	83 83       	std	Z+3, r24	; 0x03
   150ea:	21 e0       	ldi	r18, 0x01	; 1
   150ec:	22 83       	std	Z+2, r18	; 0x02
   150ee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   150f2:	80 ff       	sbrs	r24, 0
   150f4:	27 c0       	rjmp	.+78     	; 0x15144 <SS80_locate_and_write+0x258>
   150f6:	89 89       	ldd	r24, Y+17	; 0x11
   150f8:	9a 89       	ldd	r25, Y+18	; 0x12
   150fa:	ab 89       	ldd	r26, Y+19	; 0x13
   150fc:	ed b7       	in	r30, 0x3d	; 61
   150fe:	fe b7       	in	r31, 0x3e	; 62
   15100:	81 83       	std	Z+1, r24	; 0x01
   15102:	92 83       	std	Z+2, r25	; 0x02
   15104:	a3 83       	std	Z+3, r26	; 0x03
   15106:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1510a:	1c c0       	rjmp	.+56     	; 0x15144 <SS80_locate_and_write+0x258>
   1510c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15110:	85 ff       	sbrs	r24, 5
   15112:	0c c0       	rjmp	.+24     	; 0x1512c <SS80_locate_and_write+0x240>
   15114:	ed b7       	in	r30, 0x3d	; 61
   15116:	fe b7       	in	r31, 0x3e	; 62
   15118:	d5 82       	std	Z+5, r13	; 0x05
   1511a:	c4 82       	std	Z+4, r12	; 0x04
   1511c:	2e 85       	ldd	r18, Y+14	; 0x0e
   1511e:	3f 85       	ldd	r19, Y+15	; 0x0f
   15120:	48 89       	ldd	r20, Y+16	; 0x10
   15122:	21 83       	std	Z+1, r18	; 0x01
   15124:	32 83       	std	Z+2, r19	; 0x02
   15126:	43 83       	std	Z+3, r20	; 0x03
   15128:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1512c:	c6 01       	movw	r24, r12
   1512e:	0d 2c       	mov	r0, r13
   15130:	00 0c       	add	r0, r0
   15132:	aa 0b       	sbc	r26, r26
   15134:	bb 0b       	sbc	r27, r27
   15136:	88 0e       	add	r8, r24
   15138:	99 1e       	adc	r9, r25
   1513a:	aa 1e       	adc	r10, r26
   1513c:	bb 1e       	adc	r11, r27
   1513e:	00 e0       	ldi	r16, 0x00	; 0
   15140:	10 e0       	ldi	r17, 0x00	; 0
   15142:	05 c0       	rjmp	.+10     	; 0x1514e <SS80_locate_and_write+0x262>
   15144:	ec 14       	cp	r14, r12
   15146:	fd 04       	cpc	r15, r13
   15148:	64 f0       	brlt	.+24     	; 0x15162 <SS80_locate_and_write+0x276>
   1514a:	01 e0       	ldi	r16, 0x01	; 1
   1514c:	10 e0       	ldi	r17, 0x00	; 0
   1514e:	c7 01       	movw	r24, r14
   15150:	0f 2c       	mov	r0, r15
   15152:	00 0c       	add	r0, r0
   15154:	aa 0b       	sbc	r26, r26
   15156:	bb 0b       	sbc	r27, r27
   15158:	48 0e       	add	r4, r24
   1515a:	59 1e       	adc	r5, r25
   1515c:	6a 1e       	adc	r6, r26
   1515e:	7b 1e       	adc	r7, r27
   15160:	0b c0       	rjmp	.+22     	; 0x15178 <SS80_locate_and_write+0x28c>
   15162:	c6 01       	movw	r24, r12
   15164:	0d 2c       	mov	r0, r13
   15166:	00 0c       	add	r0, r0
   15168:	aa 0b       	sbc	r26, r26
   1516a:	bb 0b       	sbc	r27, r27
   1516c:	48 0e       	add	r4, r24
   1516e:	59 1e       	adc	r5, r25
   15170:	6a 1e       	adc	r6, r26
   15172:	7b 1e       	adc	r7, r27
   15174:	01 e0       	ldi	r16, 0x01	; 1
   15176:	10 e0       	ldi	r17, 0x00	; 0
   15178:	2c 18       	sub	r2, r12
   1517a:	3d 08       	sbc	r3, r13
   1517c:	8c 85       	ldd	r24, Y+12	; 0x0c
   1517e:	9d 85       	ldd	r25, Y+13	; 0x0d
   15180:	90 ff       	sbrs	r25, 0
   15182:	19 cf       	rjmp	.-462    	; 0x14fb6 <SS80_locate_and_write+0xca>
   15184:	12 14       	cp	r1, r2
   15186:	13 04       	cpc	r1, r3
   15188:	7c f4       	brge	.+30     	; 0x151a8 <SS80_locate_and_write+0x2bc>
   1518a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1518e:	80 ff       	sbrs	r24, 0
   15190:	1d c0       	rjmp	.+58     	; 0x151cc <SS80_locate_and_write+0x2e0>
   15192:	8b e8       	ldi	r24, 0x8B	; 139
   15194:	93 e2       	ldi	r25, 0x23	; 35
   15196:	a0 e0       	ldi	r26, 0x00	; 0
   15198:	ed b7       	in	r30, 0x3d	; 61
   1519a:	fe b7       	in	r31, 0x3e	; 62
   1519c:	81 83       	std	Z+1, r24	; 0x01
   1519e:	92 83       	std	Z+2, r25	; 0x02
   151a0:	a3 83       	std	Z+3, r26	; 0x03
   151a2:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   151a6:	12 c0       	rjmp	.+36     	; 0x151cc <SS80_locate_and_write+0x2e0>
   151a8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   151ac:	85 ff       	sbrs	r24, 5
   151ae:	0e c0       	rjmp	.+28     	; 0x151cc <SS80_locate_and_write+0x2e0>
   151b0:	ed b7       	in	r30, 0x3d	; 61
   151b2:	fe b7       	in	r31, 0x3e	; 62
   151b4:	44 82       	std	Z+4, r4	; 0x04
   151b6:	55 82       	std	Z+5, r5	; 0x05
   151b8:	66 82       	std	Z+6, r6	; 0x06
   151ba:	77 82       	std	Z+7, r7	; 0x07
   151bc:	80 e6       	ldi	r24, 0x60	; 96
   151be:	93 e2       	ldi	r25, 0x23	; 35
   151c0:	a0 e0       	ldi	r26, 0x00	; 0
   151c2:	81 83       	std	Z+1, r24	; 0x01
   151c4:	92 83       	std	Z+2, r25	; 0x02
   151c6:	a3 83       	std	Z+3, r26	; 0x03
   151c8:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   151cc:	00 91 81 19 	lds	r16, 0x1981	; 0x801981 <SS80s>
   151d0:	10 91 82 19 	lds	r17, 0x1982	; 0x801982 <SS80s+0x1>
   151d4:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   151d8:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   151dc:	20 89       	ldd	r18, Z+16	; 0x10
   151de:	31 89       	ldd	r19, Z+17	; 0x11
   151e0:	40 e0       	ldi	r20, 0x00	; 0
   151e2:	50 e0       	ldi	r21, 0x00	; 0
   151e4:	c5 01       	movw	r24, r10
   151e6:	b4 01       	movw	r22, r8
   151e8:	0e 94 6b e0 	call	0x1c0d6	; 0x1c0d6 <__udivmodsi4>
   151ec:	f8 01       	movw	r30, r16
   151ee:	27 83       	std	Z+7, r18	; 0x07
   151f0:	30 87       	std	Z+8, r19	; 0x08
   151f2:	41 87       	std	Z+9, r20	; 0x09
   151f4:	52 87       	std	Z+10, r21	; 0x0a
   151f6:	8c 85       	ldd	r24, Y+12	; 0x0c
   151f8:	9d 85       	ldd	r25, Y+13	; 0x0d
   151fa:	88 27       	eor	r24, r24
   151fc:	90 7d       	andi	r25, 0xD0	; 208
   151fe:	04 c0       	rjmp	.+8      	; 0x15208 <SS80_locate_and_write+0x31c>
   15200:	01 2b       	or	r16, r17
   15202:	09 f4       	brne	.+2      	; 0x15206 <SS80_locate_and_write+0x31a>
   15204:	37 cf       	rjmp	.-402    	; 0x15074 <SS80_locate_and_write+0x188>
   15206:	b6 cf       	rjmp	.-148    	; 0x15174 <SS80_locate_and_write+0x288>
   15208:	63 96       	adiw	r28, 0x13	; 19
   1520a:	e2 e1       	ldi	r30, 0x12	; 18
   1520c:	0c 94 f4 e0 	jmp	0x1c1e8	; 0x1c1e8 <__epilogue_restores__>

00015210 <SS80_Report>:
   15210:	a8 e0       	ldi	r26, 0x08	; 8
   15212:	b0 e0       	ldi	r27, 0x00	; 0
   15214:	ee e0       	ldi	r30, 0x0E	; 14
   15216:	f9 ea       	ldi	r31, 0xA9	; 169
   15218:	0c 94 e8 e0 	jmp	0x1c1d0	; 0x1c1d0 <__prologue_saves__+0x20>
   1521c:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   15220:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   15224:	82 81       	ldd	r24, Z+2	; 0x02
   15226:	88 87       	std	Y+8, r24	; 0x08
   15228:	80 e0       	ldi	r24, 0x00	; 0
   1522a:	91 e0       	ldi	r25, 0x01	; 1
   1522c:	9f 83       	std	Y+7, r25	; 0x07
   1522e:	8e 83       	std	Y+6, r24	; 0x06
   15230:	ae 01       	movw	r20, r28
   15232:	4a 5f       	subi	r20, 0xFA	; 250
   15234:	5f 4f       	sbci	r21, 0xFF	; 255
   15236:	61 e0       	ldi	r22, 0x01	; 1
   15238:	70 e0       	ldi	r23, 0x00	; 0
   1523a:	ce 01       	movw	r24, r28
   1523c:	08 96       	adiw	r24, 0x08	; 8
   1523e:	0e 94 f3 89 	call	0x113e6	; 0x113e6 <gpib_write_str>
   15242:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15246:	01 97       	sbiw	r24, 0x01	; 1
   15248:	89 f0       	breq	.+34     	; 0x1526c <SS80_Report+0x5c>
   1524a:	20 ff       	sbrs	r18, 0
   1524c:	0a c0       	rjmp	.+20     	; 0x15262 <SS80_Report+0x52>
   1524e:	8f e4       	ldi	r24, 0x4F	; 79
   15250:	9e e1       	ldi	r25, 0x1E	; 30
   15252:	a0 e0       	ldi	r26, 0x00	; 0
   15254:	ed b7       	in	r30, 0x3d	; 61
   15256:	fe b7       	in	r31, 0x3e	; 62
   15258:	81 83       	std	Z+1, r24	; 0x01
   1525a:	92 83       	std	Z+2, r25	; 0x02
   1525c:	a3 83       	std	Z+3, r26	; 0x03
   1525e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   15262:	8e 81       	ldd	r24, Y+6	; 0x06
   15264:	9f 81       	ldd	r25, Y+7	; 0x07
   15266:	88 27       	eor	r24, r24
   15268:	90 7d       	andi	r25, 0xD0	; 208
   1526a:	1b c0       	rjmp	.+54     	; 0x152a2 <SS80_Report+0x92>
   1526c:	25 ff       	sbrs	r18, 5
   1526e:	12 c0       	rjmp	.+36     	; 0x15294 <SS80_Report+0x84>
   15270:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   15274:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   15278:	82 81       	ldd	r24, Z+2	; 0x02
   1527a:	90 e0       	ldi	r25, 0x00	; 0
   1527c:	ed b7       	in	r30, 0x3d	; 61
   1527e:	fe b7       	in	r31, 0x3e	; 62
   15280:	95 83       	std	Z+5, r25	; 0x05
   15282:	84 83       	std	Z+4, r24	; 0x04
   15284:	8c e3       	ldi	r24, 0x3C	; 60
   15286:	9e e1       	ldi	r25, 0x1E	; 30
   15288:	a0 e0       	ldi	r26, 0x00	; 0
   1528a:	81 83       	std	Z+1, r24	; 0x01
   1528c:	92 83       	std	Z+2, r25	; 0x02
   1528e:	a3 83       	std	Z+3, r26	; 0x03
   15290:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   15294:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   15298:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   1529c:	12 82       	std	Z+2, r1	; 0x02
   1529e:	80 e0       	ldi	r24, 0x00	; 0
   152a0:	90 e0       	ldi	r25, 0x00	; 0
   152a2:	28 96       	adiw	r28, 0x08	; 8
   152a4:	e2 e0       	ldi	r30, 0x02	; 2
   152a6:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

000152aa <Clear_Common>:
   152aa:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   152ae:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   152b2:	25 81       	ldd	r18, Z+5	; 0x05
   152b4:	30 e0       	ldi	r19, 0x00	; 0
   152b6:	28 17       	cp	r18, r24
   152b8:	39 07       	cpc	r19, r25
   152ba:	19 f0       	breq	.+6      	; 0x152c2 <Clear_Common+0x18>
   152bc:	0f 97       	sbiw	r24, 0x0f	; 15
   152be:	99 f4       	brne	.+38     	; 0x152e6 <Clear_Common+0x3c>
   152c0:	03 c0       	rjmp	.+6      	; 0x152c8 <Clear_Common+0x1e>
   152c2:	2f 30       	cpi	r18, 0x0F	; 15
   152c4:	31 05       	cpc	r19, r1
   152c6:	09 f4       	brne	.+2      	; 0x152ca <Clear_Common+0x20>
   152c8:	15 82       	std	Z+5, r1	; 0x05
   152ca:	16 82       	std	Z+6, r1	; 0x06
   152cc:	17 82       	std	Z+7, r1	; 0x07
   152ce:	10 86       	std	Z+8, r1	; 0x08
   152d0:	11 86       	std	Z+9, r1	; 0x09
   152d2:	12 86       	std	Z+10, r1	; 0x0a
   152d4:	13 86       	std	Z+11, r1	; 0x0b
   152d6:	14 86       	std	Z+12, r1	; 0x0c
   152d8:	15 86       	std	Z+13, r1	; 0x0d
   152da:	16 86       	std	Z+14, r1	; 0x0e
   152dc:	11 82       	std	Z+1, r1	; 0x01
   152de:	10 82       	st	Z, r1
   152e0:	14 82       	std	Z+4, r1	; 0x04
   152e2:	13 82       	std	Z+3, r1	; 0x03
   152e4:	12 82       	std	Z+2, r1	; 0x02
   152e6:	08 95       	ret

000152e8 <SS80_init>:
   152e8:	a5 e0       	ldi	r26, 0x05	; 5
   152ea:	b0 e0       	ldi	r27, 0x00	; 0
   152ec:	ea e7       	ldi	r30, 0x7A	; 122
   152ee:	f9 ea       	ldi	r31, 0xA9	; 169
   152f0:	0c 94 e2 e0 	jmp	0x1c1c4	; 0x1c1c4 <__prologue_saves__+0x14>
   152f4:	07 ee       	ldi	r16, 0xE7	; 231
   152f6:	10 e2       	ldi	r17, 0x20	; 32
   152f8:	cb e0       	ldi	r28, 0x0B	; 11
   152fa:	d0 e0       	ldi	r29, 0x00	; 0
   152fc:	82 e0       	ldi	r24, 0x02	; 2
   152fe:	f8 2e       	mov	r15, r24
   15300:	89 e0       	ldi	r24, 0x09	; 9
   15302:	95 e2       	ldi	r25, 0x25	; 37
   15304:	6c 01       	movw	r12, r24
   15306:	e1 2c       	mov	r14, r1
   15308:	f8 01       	movw	r30, r16
   1530a:	80 81       	ld	r24, Z
   1530c:	83 30       	cpi	r24, 0x03	; 3
   1530e:	29 f5       	brne	.+74     	; 0x1535a <SS80_init+0x72>
   15310:	ce 01       	movw	r24, r28
   15312:	0e 94 c1 95 	call	0x12b82	; 0x12b82 <set_active_device>
   15316:	89 2b       	or	r24, r25
   15318:	01 f1       	breq	.+64     	; 0x1535a <SS80_init+0x72>
   1531a:	8f e0       	ldi	r24, 0x0F	; 15
   1531c:	90 e0       	ldi	r25, 0x00	; 0
   1531e:	c5 df       	rcall	.-118    	; 0x152aa <Clear_Common>
   15320:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   15324:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   15328:	f2 82       	std	Z+2, r15	; 0x02
   1532a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1532e:	85 ff       	sbrs	r24, 5
   15330:	0c c0       	rjmp	.+24     	; 0x1534a <SS80_init+0x62>
   15332:	f8 01       	movw	r30, r16
   15334:	81 81       	ldd	r24, Z+1	; 0x01
   15336:	90 e0       	ldi	r25, 0x00	; 0
   15338:	ed b7       	in	r30, 0x3d	; 61
   1533a:	fe b7       	in	r31, 0x3e	; 62
   1533c:	95 83       	std	Z+5, r25	; 0x05
   1533e:	84 83       	std	Z+4, r24	; 0x04
   15340:	c1 82       	std	Z+1, r12	; 0x01
   15342:	d2 82       	std	Z+2, r13	; 0x02
   15344:	e3 82       	std	Z+3, r14	; 0x03
   15346:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1534a:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   1534e:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   15352:	81 81       	ldd	r24, Z+1	; 0x01
   15354:	90 e0       	ldi	r25, 0x00	; 0
   15356:	0e 94 99 84 	call	0x10932	; 0x10932 <gpib_disable_PPR>
   1535a:	21 97       	sbiw	r28, 0x01	; 1
   1535c:	0b 52       	subi	r16, 0x2B	; 43
   1535e:	11 09       	sbc	r17, r1
   15360:	cf 3f       	cpi	r28, 0xFF	; 255
   15362:	ff ef       	ldi	r31, 0xFF	; 255
   15364:	df 07       	cpc	r29, r31
   15366:	81 f6       	brne	.-96     	; 0x15308 <SS80_init+0x20>
   15368:	cd b7       	in	r28, 0x3d	; 61
   1536a:	de b7       	in	r29, 0x3e	; 62
   1536c:	25 96       	adiw	r28, 0x05	; 5
   1536e:	e8 e0       	ldi	r30, 0x08	; 8
   15370:	0c 94 fe e0 	jmp	0x1c1fc	; 0x1c1fc <__epilogue_restores__+0x14>

00015374 <SS80_Channel_Independent_Clear>:
   15374:	9a df       	rcall	.-204    	; 0x152aa <Clear_Common>
   15376:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   1537a:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   1537e:	81 81       	ldd	r24, Z+1	; 0x01
   15380:	90 e0       	ldi	r25, 0x00	; 0
   15382:	0e 94 63 84 	call	0x108c6	; 0x108c6 <gpib_enable_PPR>
   15386:	80 e0       	ldi	r24, 0x00	; 0
   15388:	90 e0       	ldi	r25, 0x00	; 0
   1538a:	08 95       	ret

0001538c <SS80_Universal_Device_Clear>:
   1538c:	8f e0       	ldi	r24, 0x0F	; 15
   1538e:	90 e0       	ldi	r25, 0x00	; 0
   15390:	8c df       	rcall	.-232    	; 0x152aa <Clear_Common>
   15392:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   15396:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   1539a:	81 81       	ldd	r24, Z+1	; 0x01
   1539c:	90 e0       	ldi	r25, 0x00	; 0
   1539e:	0e 94 63 84 	call	0x108c6	; 0x108c6 <gpib_enable_PPR>
   153a2:	80 e0       	ldi	r24, 0x00	; 0
   153a4:	90 e0       	ldi	r25, 0x00	; 0
   153a6:	08 95       	ret

000153a8 <SS80_Selected_Device_Clear>:
   153a8:	cf 93       	push	r28
   153aa:	df 93       	push	r29
   153ac:	00 d0       	rcall	.+0      	; 0x153ae <SS80_Selected_Device_Clear+0x6>
   153ae:	1f 92       	push	r1
   153b0:	ec 01       	movw	r28, r24
   153b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   153b6:	85 ff       	sbrs	r24, 5
   153b8:	0a c0       	rjmp	.+20     	; 0x153ce <SS80_Selected_Device_Clear+0x26>
   153ba:	80 e3       	ldi	r24, 0x30	; 48
   153bc:	9e e1       	ldi	r25, 0x1E	; 30
   153be:	a0 e0       	ldi	r26, 0x00	; 0
   153c0:	ed b7       	in	r30, 0x3d	; 61
   153c2:	fe b7       	in	r31, 0x3e	; 62
   153c4:	81 83       	std	Z+1, r24	; 0x01
   153c6:	92 83       	std	Z+2, r25	; 0x02
   153c8:	a3 83       	std	Z+3, r26	; 0x03
   153ca:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   153ce:	ce 01       	movw	r24, r28
   153d0:	6c df       	rcall	.-296    	; 0x152aa <Clear_Common>
   153d2:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   153d6:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   153da:	81 81       	ldd	r24, Z+1	; 0x01
   153dc:	90 e0       	ldi	r25, 0x00	; 0
   153de:	0e 94 63 84 	call	0x108c6	; 0x108c6 <gpib_enable_PPR>
   153e2:	80 e0       	ldi	r24, 0x00	; 0
   153e4:	90 e0       	ldi	r25, 0x00	; 0
   153e6:	cd b7       	in	r28, 0x3d	; 61
   153e8:	de b7       	in	r29, 0x3e	; 62
   153ea:	23 96       	adiw	r28, 0x03	; 3
   153ec:	e2 e0       	ldi	r30, 0x02	; 2
   153ee:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

000153f2 <SS80_Amigo_Clear>:
   153f2:	a6 e0       	ldi	r26, 0x06	; 6
   153f4:	b0 e0       	ldi	r27, 0x00	; 0
   153f6:	ef ef       	ldi	r30, 0xFF	; 255
   153f8:	f9 ea       	ldi	r31, 0xA9	; 169
   153fa:	0c 94 e8 e0 	jmp	0x1c1d0	; 0x1c1d0 <__prologue_saves__+0x20>
   153fe:	1d 82       	std	Y+5, r1	; 0x05
   15400:	1c 82       	std	Y+4, r1	; 0x04
   15402:	ae 01       	movw	r20, r28
   15404:	4c 5f       	subi	r20, 0xFC	; 252
   15406:	5f 4f       	sbci	r21, 0xFF	; 255
   15408:	61 e0       	ldi	r22, 0x01	; 1
   1540a:	70 e0       	ldi	r23, 0x00	; 0
   1540c:	ce 01       	movw	r24, r28
   1540e:	06 96       	adiw	r24, 0x06	; 6
   15410:	0e 94 51 89 	call	0x112a2	; 0x112a2 <gpib_read_str>
   15414:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15418:	01 97       	sbiw	r24, 0x01	; 1
   1541a:	89 f0       	breq	.+34     	; 0x1543e <SS80_Amigo_Clear+0x4c>
   1541c:	20 ff       	sbrs	r18, 0
   1541e:	0a c0       	rjmp	.+20     	; 0x15434 <SS80_Amigo_Clear+0x42>
   15420:	8d e1       	ldi	r24, 0x1D	; 29
   15422:	9e e1       	ldi	r25, 0x1E	; 30
   15424:	a0 e0       	ldi	r26, 0x00	; 0
   15426:	ed b7       	in	r30, 0x3d	; 61
   15428:	fe b7       	in	r31, 0x3e	; 62
   1542a:	81 83       	std	Z+1, r24	; 0x01
   1542c:	92 83       	std	Z+2, r25	; 0x02
   1542e:	a3 83       	std	Z+3, r26	; 0x03
   15430:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   15434:	8c 81       	ldd	r24, Y+4	; 0x04
   15436:	9d 81       	ldd	r25, Y+5	; 0x05
   15438:	88 27       	eor	r24, r24
   1543a:	90 7d       	andi	r25, 0xD0	; 208
   1543c:	19 c0       	rjmp	.+50     	; 0x15470 <SS80_Amigo_Clear+0x7e>
   1543e:	25 ff       	sbrs	r18, 5
   15440:	0a c0       	rjmp	.+20     	; 0x15456 <SS80_Amigo_Clear+0x64>
   15442:	8e e0       	ldi	r24, 0x0E	; 14
   15444:	9e e1       	ldi	r25, 0x1E	; 30
   15446:	a0 e0       	ldi	r26, 0x00	; 0
   15448:	ed b7       	in	r30, 0x3d	; 61
   1544a:	fe b7       	in	r31, 0x3e	; 62
   1544c:	81 83       	std	Z+1, r24	; 0x01
   1544e:	92 83       	std	Z+2, r25	; 0x02
   15450:	a3 83       	std	Z+3, r26	; 0x03
   15452:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   15456:	8f e0       	ldi	r24, 0x0F	; 15
   15458:	90 e0       	ldi	r25, 0x00	; 0
   1545a:	27 df       	rcall	.-434    	; 0x152aa <Clear_Common>
   1545c:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   15460:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   15464:	81 81       	ldd	r24, Z+1	; 0x01
   15466:	90 e0       	ldi	r25, 0x00	; 0
   15468:	0e 94 63 84 	call	0x108c6	; 0x108c6 <gpib_enable_PPR>
   1546c:	80 e0       	ldi	r24, 0x00	; 0
   1546e:	90 e0       	ldi	r25, 0x00	; 0
   15470:	26 96       	adiw	r28, 0x06	; 6
   15472:	e2 e0       	ldi	r30, 0x02	; 2
   15474:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

00015478 <SS80_Cancel>:
   15478:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   1547c:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   15480:	11 82       	std	Z+1, r1	; 0x01
   15482:	10 82       	st	Z, r1
   15484:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   15488:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   1548c:	81 81       	ldd	r24, Z+1	; 0x01
   1548e:	90 e0       	ldi	r25, 0x00	; 0
   15490:	0e 94 63 84 	call	0x108c6	; 0x108c6 <gpib_enable_PPR>
   15494:	80 e0       	ldi	r24, 0x00	; 0
   15496:	90 e0       	ldi	r25, 0x00	; 0
   15498:	08 95       	ret

0001549a <SS80_Transparent_State>:
   1549a:	a9 e0       	ldi	r26, 0x09	; 9
   1549c:	b0 e0       	ldi	r27, 0x00	; 0
   1549e:	e3 e5       	ldi	r30, 0x53	; 83
   154a0:	fa ea       	ldi	r31, 0xAA	; 170
   154a2:	0c 94 e0 e0 	jmp	0x1c1c0	; 0x1c1c0 <__prologue_saves__+0x10>
   154a6:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   154aa:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   154ae:	81 81       	ldd	r24, Z+1	; 0x01
   154b0:	90 e0       	ldi	r25, 0x00	; 0
   154b2:	0e 94 99 84 	call	0x10932	; 0x10932 <gpib_disable_PPR>
   154b6:	80 e0       	ldi	r24, 0x00	; 0
   154b8:	91 e0       	ldi	r25, 0x01	; 1
   154ba:	99 87       	std	Y+9, r25	; 0x09
   154bc:	88 87       	std	Y+8, r24	; 0x08
   154be:	ae 01       	movw	r20, r28
   154c0:	48 5f       	subi	r20, 0xF8	; 248
   154c2:	5f 4f       	sbci	r21, 0xFF	; 255
   154c4:	60 e0       	ldi	r22, 0x00	; 0
   154c6:	72 e0       	ldi	r23, 0x02	; 2
   154c8:	84 e0       	ldi	r24, 0x04	; 4
   154ca:	9d e1       	ldi	r25, 0x1D	; 29
   154cc:	0e 94 51 89 	call	0x112a2	; 0x112a2 <gpib_read_str>
   154d0:	7c 01       	movw	r14, r24
   154d2:	88 85       	ldd	r24, Y+8	; 0x08
   154d4:	99 85       	ldd	r25, Y+9	; 0x09
   154d6:	9c 01       	movw	r18, r24
   154d8:	22 27       	eor	r18, r18
   154da:	30 7d       	andi	r19, 0xD0	; 208
   154dc:	23 2b       	or	r18, r19
   154de:	79 f0       	breq	.+30     	; 0x154fe <SS80_Transparent_State+0x64>
   154e0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   154e4:	80 ff       	sbrs	r24, 0
   154e6:	da c0       	rjmp	.+436    	; 0x1569c <SS80_Transparent_State+0x202>
   154e8:	8d ea       	ldi	r24, 0xAD	; 173
   154ea:	9f e1       	ldi	r25, 0x1F	; 31
   154ec:	a0 e0       	ldi	r26, 0x00	; 0
   154ee:	ed b7       	in	r30, 0x3d	; 61
   154f0:	fe b7       	in	r31, 0x3e	; 62
   154f2:	81 83       	std	Z+1, r24	; 0x01
   154f4:	92 83       	std	Z+2, r25	; 0x02
   154f6:	a3 83       	std	Z+3, r26	; 0x03
   154f8:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   154fc:	cf c0       	rjmp	.+414    	; 0x1569c <SS80_Transparent_State+0x202>
   154fe:	e1 14       	cp	r14, r1
   15500:	f1 04       	cpc	r15, r1
   15502:	09 f4       	brne	.+2      	; 0x15506 <SS80_Transparent_State+0x6c>
   15504:	d0 c0       	rjmp	.+416    	; 0x156a6 <SS80_Transparent_State+0x20c>
   15506:	90 fd       	sbrc	r25, 0
   15508:	0e c0       	rjmp	.+28     	; 0x15526 <SS80_Transparent_State+0x8c>
   1550a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1550e:	80 ff       	sbrs	r24, 0
   15510:	0a c0       	rjmp	.+20     	; 0x15526 <SS80_Transparent_State+0x8c>
   15512:	84 e9       	ldi	r24, 0x94	; 148
   15514:	9f e1       	ldi	r25, 0x1F	; 31
   15516:	a0 e0       	ldi	r26, 0x00	; 0
   15518:	ed b7       	in	r30, 0x3d	; 61
   1551a:	fe b7       	in	r31, 0x3e	; 62
   1551c:	81 83       	std	Z+1, r24	; 0x01
   1551e:	92 83       	std	Z+2, r25	; 0x02
   15520:	a3 83       	std	Z+3, r26	; 0x03
   15522:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   15526:	84 e0       	ldi	r24, 0x04	; 4
   15528:	a8 2e       	mov	r10, r24
   1552a:	8d e1       	ldi	r24, 0x1D	; 29
   1552c:	b8 2e       	mov	r11, r24
   1552e:	00 e0       	ldi	r16, 0x00	; 0
   15530:	10 e0       	ldi	r17, 0x00	; 0
   15532:	0e 15       	cp	r16, r14
   15534:	1f 05       	cpc	r17, r15
   15536:	0c f0       	brlt	.+2      	; 0x1553a <SS80_Transparent_State+0xa0>
   15538:	9c c0       	rjmp	.+312    	; 0x15672 <SS80_Transparent_State+0x1d8>
   1553a:	68 01       	movw	r12, r16
   1553c:	ff ef       	ldi	r31, 0xFF	; 255
   1553e:	cf 1a       	sub	r12, r31
   15540:	df 0a       	sbc	r13, r31
   15542:	f5 01       	movw	r30, r10
   15544:	81 91       	ld	r24, Z+
   15546:	5f 01       	movw	r10, r30
   15548:	28 2f       	mov	r18, r24
   1554a:	30 e0       	ldi	r19, 0x00	; 0
   1554c:	a9 01       	movw	r20, r18
   1554e:	40 52       	subi	r20, 0x20	; 32
   15550:	51 09       	sbc	r21, r1
   15552:	40 31       	cpi	r20, 0x10	; 16
   15554:	51 05       	cpc	r21, r1
   15556:	20 f4       	brcc	.+8      	; 0x15560 <SS80_Transparent_State+0xc6>
   15558:	80 52       	subi	r24, 0x20	; 32
   1555a:	8c d9       	rcall	.-3304   	; 0x14874 <SS80_Check_Unit>
   1555c:	86 01       	movw	r16, r12
   1555e:	e9 cf       	rjmp	.-46     	; 0x15532 <SS80_Transparent_State+0x98>
   15560:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15564:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   15568:	21 30       	cpi	r18, 0x01	; 1
   1556a:	31 05       	cpc	r19, r1
   1556c:	c9 f4       	brne	.+50     	; 0x155a0 <SS80_Transparent_State+0x106>
   1556e:	0e 5f       	subi	r16, 0xFE	; 254
   15570:	1f 4f       	sbci	r17, 0xFF	; 255
   15572:	80 73       	andi	r24, 0x30	; 48
   15574:	99 27       	eor	r25, r25
   15576:	89 2b       	or	r24, r25
   15578:	51 f0       	breq	.+20     	; 0x1558e <SS80_Transparent_State+0xf4>
   1557a:	8f e6       	ldi	r24, 0x6F	; 111
   1557c:	9f e1       	ldi	r25, 0x1F	; 31
   1557e:	a0 e0       	ldi	r26, 0x00	; 0
   15580:	ed b7       	in	r30, 0x3d	; 61
   15582:	fe b7       	in	r31, 0x3e	; 62
   15584:	81 83       	std	Z+1, r24	; 0x01
   15586:	92 83       	std	Z+2, r25	; 0x02
   15588:	a3 83       	std	Z+3, r26	; 0x03
   1558a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1558e:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   15592:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   15596:	81 81       	ldd	r24, Z+1	; 0x01
   15598:	90 e0       	ldi	r25, 0x00	; 0
   1559a:	0e 94 63 84 	call	0x108c6	; 0x108c6 <gpib_enable_PPR>
   1559e:	69 c0       	rjmp	.+210    	; 0x15672 <SS80_Transparent_State+0x1d8>
   155a0:	22 30       	cpi	r18, 0x02	; 2
   155a2:	31 05       	cpc	r19, r1
   155a4:	51 f4       	brne	.+20     	; 0x155ba <SS80_Transparent_State+0x120>
   155a6:	0b 5f       	subi	r16, 0xFB	; 251
   155a8:	1f 4f       	sbci	r17, 0xFF	; 255
   155aa:	80 73       	andi	r24, 0x30	; 48
   155ac:	99 27       	eor	r25, r25
   155ae:	89 2b       	or	r24, r25
   155b0:	09 f4       	brne	.+2      	; 0x155b4 <SS80_Transparent_State+0x11a>
   155b2:	5f c0       	rjmp	.+190    	; 0x15672 <SS80_Transparent_State+0x1d8>
   155b4:	82 e5       	ldi	r24, 0x52	; 82
   155b6:	9f e1       	ldi	r25, 0x1F	; 31
   155b8:	0c c0       	rjmp	.+24     	; 0x155d2 <SS80_Transparent_State+0x138>
   155ba:	23 30       	cpi	r18, 0x03	; 3
   155bc:	31 05       	cpc	r19, r1
   155be:	91 f4       	brne	.+36     	; 0x155e4 <SS80_Transparent_State+0x14a>
   155c0:	0b 5f       	subi	r16, 0xFB	; 251
   155c2:	1f 4f       	sbci	r17, 0xFF	; 255
   155c4:	80 73       	andi	r24, 0x30	; 48
   155c6:	99 27       	eor	r25, r25
   155c8:	89 2b       	or	r24, r25
   155ca:	09 f4       	brne	.+2      	; 0x155ce <SS80_Transparent_State+0x134>
   155cc:	52 c0       	rjmp	.+164    	; 0x15672 <SS80_Transparent_State+0x1d8>
   155ce:	84 e3       	ldi	r24, 0x34	; 52
   155d0:	9f e1       	ldi	r25, 0x1F	; 31
   155d2:	a0 e0       	ldi	r26, 0x00	; 0
   155d4:	ed b7       	in	r30, 0x3d	; 61
   155d6:	fe b7       	in	r31, 0x3e	; 62
   155d8:	81 83       	std	Z+1, r24	; 0x01
   155da:	92 83       	std	Z+2, r25	; 0x02
   155dc:	a3 83       	std	Z+3, r26	; 0x03
   155de:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   155e2:	47 c0       	rjmp	.+142    	; 0x15672 <SS80_Transparent_State+0x1d8>
   155e4:	28 30       	cpi	r18, 0x08	; 8
   155e6:	31 05       	cpc	r19, r1
   155e8:	e1 f4       	brne	.+56     	; 0x15622 <SS80_Transparent_State+0x188>
   155ea:	85 ff       	sbrs	r24, 5
   155ec:	12 c0       	rjmp	.+36     	; 0x15612 <SS80_Transparent_State+0x178>
   155ee:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   155f2:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   155f6:	85 81       	ldd	r24, Z+5	; 0x05
   155f8:	90 e0       	ldi	r25, 0x00	; 0
   155fa:	ed b7       	in	r30, 0x3d	; 61
   155fc:	fe b7       	in	r31, 0x3e	; 62
   155fe:	95 83       	std	Z+5, r25	; 0x05
   15600:	84 83       	std	Z+4, r24	; 0x04
   15602:	8d e0       	ldi	r24, 0x0D	; 13
   15604:	9f e1       	ldi	r25, 0x1F	; 31
   15606:	a0 e0       	ldi	r26, 0x00	; 0
   15608:	81 83       	std	Z+1, r24	; 0x01
   1560a:	92 83       	std	Z+2, r25	; 0x02
   1560c:	a3 83       	std	Z+3, r26	; 0x03
   1560e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   15612:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   15616:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   1561a:	85 81       	ldd	r24, Z+5	; 0x05
   1561c:	90 e0       	ldi	r25, 0x00	; 0
   1561e:	aa de       	rcall	.-684    	; 0x15374 <SS80_Channel_Independent_Clear>
   15620:	44 c0       	rjmp	.+136    	; 0x156aa <SS80_Transparent_State+0x210>
   15622:	29 30       	cpi	r18, 0x09	; 9
   15624:	31 05       	cpc	r19, r1
   15626:	b1 f4       	brne	.+44     	; 0x15654 <SS80_Transparent_State+0x1ba>
   15628:	85 ff       	sbrs	r24, 5
   1562a:	12 c0       	rjmp	.+36     	; 0x15650 <SS80_Transparent_State+0x1b6>
   1562c:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   15630:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   15634:	85 81       	ldd	r24, Z+5	; 0x05
   15636:	90 e0       	ldi	r25, 0x00	; 0
   15638:	ed b7       	in	r30, 0x3d	; 61
   1563a:	fe b7       	in	r31, 0x3e	; 62
   1563c:	95 83       	std	Z+5, r25	; 0x05
   1563e:	84 83       	std	Z+4, r24	; 0x04
   15640:	89 ef       	ldi	r24, 0xF9	; 249
   15642:	9e e1       	ldi	r25, 0x1E	; 30
   15644:	a0 e0       	ldi	r26, 0x00	; 0
   15646:	81 83       	std	Z+1, r24	; 0x01
   15648:	92 83       	std	Z+2, r25	; 0x02
   1564a:	a3 83       	std	Z+3, r26	; 0x03
   1564c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   15650:	13 df       	rcall	.-474    	; 0x15478 <SS80_Cancel>
   15652:	2b c0       	rjmp	.+86     	; 0x156aa <SS80_Transparent_State+0x210>
   15654:	80 ff       	sbrs	r24, 0
   15656:	22 c0       	rjmp	.+68     	; 0x1569c <SS80_Transparent_State+0x202>
   15658:	ed b7       	in	r30, 0x3d	; 61
   1565a:	fe b7       	in	r31, 0x3e	; 62
   1565c:	35 83       	std	Z+5, r19	; 0x05
   1565e:	24 83       	std	Z+4, r18	; 0x04
   15660:	89 ed       	ldi	r24, 0xD9	; 217
   15662:	9e e1       	ldi	r25, 0x1E	; 30
   15664:	a0 e0       	ldi	r26, 0x00	; 0
   15666:	81 83       	std	Z+1, r24	; 0x01
   15668:	92 83       	std	Z+2, r25	; 0x02
   1566a:	a3 83       	std	Z+3, r26	; 0x03
   1566c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   15670:	86 01       	movw	r16, r12
   15672:	0e 15       	cp	r16, r14
   15674:	1f 05       	cpc	r17, r15
   15676:	91 f0       	breq	.+36     	; 0x1569c <SS80_Transparent_State+0x202>
   15678:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1567c:	80 ff       	sbrs	r24, 0
   1567e:	0e c0       	rjmp	.+28     	; 0x1569c <SS80_Transparent_State+0x202>
   15680:	ed b7       	in	r30, 0x3d	; 61
   15682:	fe b7       	in	r31, 0x3e	; 62
   15684:	f7 82       	std	Z+7, r15	; 0x07
   15686:	e6 82       	std	Z+6, r14	; 0x06
   15688:	15 83       	std	Z+5, r17	; 0x05
   1568a:	04 83       	std	Z+4, r16	; 0x04
   1568c:	8d e9       	ldi	r24, 0x9D	; 157
   1568e:	9e e1       	ldi	r25, 0x1E	; 30
   15690:	a0 e0       	ldi	r26, 0x00	; 0
   15692:	81 83       	std	Z+1, r24	; 0x01
   15694:	92 83       	std	Z+2, r25	; 0x02
   15696:	a3 83       	std	Z+3, r26	; 0x03
   15698:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1569c:	88 85       	ldd	r24, Y+8	; 0x08
   1569e:	99 85       	ldd	r25, Y+9	; 0x09
   156a0:	88 27       	eor	r24, r24
   156a2:	90 7d       	andi	r25, 0xD0	; 208
   156a4:	02 c0       	rjmp	.+4      	; 0x156aa <SS80_Transparent_State+0x210>
   156a6:	80 e0       	ldi	r24, 0x00	; 0
   156a8:	90 e0       	ldi	r25, 0x00	; 0
   156aa:	29 96       	adiw	r28, 0x09	; 9
   156ac:	ea e0       	ldi	r30, 0x0A	; 10
   156ae:	0c 94 fc e0 	jmp	0x1c1f8	; 0x1c1f8 <__epilogue_restores__+0x10>

000156b2 <SS80_error_return>:
/// @return  0 on send
/// @return GPIB flags on send error
/// @see gpib.h _FLAGS defines for a full list.

int SS80_error_return( void )
{
   156b2:	a6 e0       	ldi	r26, 0x06	; 6
   156b4:	b0 e0       	ldi	r27, 0x00	; 0
   156b6:	ef e5       	ldi	r30, 0x5F	; 95
   156b8:	fb ea       	ldi	r31, 0xAB	; 171
   156ba:	0c 94 e8 e0 	jmp	0x1c1d0	; 0x1c1d0 <__prologue_saves__+0x20>
    uint8_t tmp[1];
    uint16_t status = EOI_FLAG;
   156be:	80 e0       	ldi	r24, 0x00	; 0
   156c0:	91 e0       	ldi	r25, 0x01	; 1
   156c2:	9d 83       	std	Y+5, r25	; 0x05
   156c4:	8c 83       	std	Y+4, r24	; 0x04

    SS80s->qstat = 1;
   156c6:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   156ca:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   156ce:	81 e0       	ldi	r24, 0x01	; 1
   156d0:	82 83       	std	Z+2, r24	; 0x02
    tmp[0] = SS80s->qstat;
   156d2:	8e 83       	std	Y+6, r24	; 0x06

    status = EOI_FLAG;
    if( gpib_write_str(tmp,sizeof(tmp), &status) != sizeof(tmp))
   156d4:	ae 01       	movw	r20, r28
   156d6:	4c 5f       	subi	r20, 0xFC	; 252
   156d8:	5f 4f       	sbci	r21, 0xFF	; 255
   156da:	61 e0       	ldi	r22, 0x01	; 1
   156dc:	70 e0       	ldi	r23, 0x00	; 0
   156de:	ce 01       	movw	r24, r28
   156e0:	06 96       	adiw	r24, 0x06	; 6
   156e2:	0e 94 f3 89 	call	0x113e6	; 0x113e6 <gpib_write_str>
   156e6:	01 97       	sbiw	r24, 0x01	; 1
   156e8:	99 f0       	breq	.+38     	; 0x15710 <SS80_error_return+0x5e>
    {
        if(debuglevel & GPIB_ERR)
   156ea:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   156ee:	80 ff       	sbrs	r24, 0
   156f0:	0a c0       	rjmp	.+20     	; 0x15706 <SS80_error_return+0x54>
            printf("[GPIB Error Return - Write ERROR]\n");
   156f2:	8b ee       	ldi	r24, 0xEB	; 235
   156f4:	9d e1       	ldi	r25, 0x1D	; 29
   156f6:	a0 e0       	ldi	r26, 0x00	; 0
   156f8:	ed b7       	in	r30, 0x3d	; 61
   156fa:	fe b7       	in	r31, 0x3e	; 62
   156fc:	81 83       	std	Z+1, r24	; 0x01
   156fe:	92 83       	std	Z+2, r25	; 0x02
   15700:	a3 83       	std	Z+3, r26	; 0x03
   15702:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        return(status & ERROR_MASK);
   15706:	8c 81       	ldd	r24, Y+4	; 0x04
   15708:	9d 81       	ldd	r25, Y+5	; 0x05
   1570a:	88 27       	eor	r24, r24
   1570c:	90 7d       	andi	r25, 0xD0	; 208
   1570e:	07 c0       	rjmp	.+14     	; 0x1571e <SS80_error_return+0x6c>
    }
    SS80s->qstat = 0;
   15710:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   15714:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   15718:	12 82       	std	Z+2, r1	; 0x02
    return(0);
   1571a:	80 e0       	ldi	r24, 0x00	; 0
   1571c:	90 e0       	ldi	r25, 0x00	; 0
}
   1571e:	26 96       	adiw	r28, 0x06	; 6
   15720:	e2 e0       	ldi	r30, 0x02	; 2
   15722:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

00015726 <SS80_locate_and_read>:
///  - Currenly we will only process 2 ** 31 bytes Max in one transfer.
///  - If an seek or I/O error happens then we MUST continue to
/// read and discard the GPIB data until we get an EOI or GPIB error...

int SS80_locate_and_read( void )
{
   15726:	a7 e1       	ldi	r26, 0x17	; 23
   15728:	b0 e0       	ldi	r27, 0x00	; 0
   1572a:	e9 e9       	ldi	r30, 0x99	; 153
   1572c:	fb ea       	ldi	r31, 0xAB	; 171
   1572e:	0c 94 d9 e0 	jmp	0x1c1b2	; 0x1c1b2 <__prologue_saves__+0x2>
    DWORD total_bytes;
    DWORD count;
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);
   15732:	60 91 81 19 	lds	r22, 0x1981	; 0x801981 <SS80s>
   15736:	70 91 82 19 	lds	r23, 0x1982	; 0x801982 <SS80s+0x1>
   1573a:	fb 01       	movw	r30, r22
   1573c:	27 81       	ldd	r18, Z+7	; 0x07
   1573e:	30 85       	ldd	r19, Z+8	; 0x08
   15740:	41 85       	ldd	r20, Z+9	; 0x09
   15742:	52 85       	ldd	r21, Z+10	; 0x0a

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   15744:	80 91 83 19 	lds	r24, 0x1983	; 0x801983 <SS80p>
   15748:	90 91 84 19 	lds	r25, 0x1984	; 0x801984 <SS80p+0x1>
   1574c:	fc 01       	movw	r30, r24
   1574e:	a0 89       	ldd	r26, Z+16	; 0x10
   15750:	b1 89       	ldd	r27, Z+17	; 0x11
    int chunk;
    int len;
    uint16_t status;
    uint32_t Address = SS80_Blocks_to_Bytes(SS80s->AddressBlocks);

    SS80s->qstat = 0;
   15752:	fb 01       	movw	r30, r22
   15754:	12 82       	std	Z+2, r1	; 0x02

    status = 0;
   15756:	1d 86       	std	Y+13, r1	; 0x0d
   15758:	1c 86       	std	Y+12, r1	; 0x0c

    if( GPIB_IO_RD(IFC) == 0)
   1575a:	54 98       	cbi	0x0a, 4	; 10
   1575c:	4c 99       	sbic	0x09, 4	; 9
   1575e:	03 c0       	rjmp	.+6      	; 0x15766 <SS80_locate_and_read+0x40>
        return(IFC_FLAG);
   15760:	80 e0       	ldi	r24, 0x00	; 0
   15762:	90 e1       	ldi	r25, 0x10	; 16
   15764:	3e c1       	rjmp	.+636    	; 0x159e2 <SS80_locate_and_read+0x2bc>

/// @brief  SS80 Return current address in bytes
/// @return Byte Address
uint32_t SS80_Blocks_to_Bytes(uint32_t block)
{
    return(block * SS80p->UNIT.BYTES_PER_BLOCK);
   15766:	0e 94 b8 e0 	call	0x1c170	; 0x1c170 <__muluhisi3>
   1576a:	4b 01       	movw	r8, r22
   1576c:	5c 01       	movw	r10, r24
/// @todo FIXME
///  SS80 4-39
///  For now we will assume the controller will never do this

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1576e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15772:	85 ff       	sbrs	r24, 5
   15774:	1a c0       	rjmp	.+52     	; 0x157aa <SS80_locate_and_read+0x84>
        printf("[SS80 Locate and Read at %08lXH(%lXH)]\n",
   15776:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   1577a:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   1577e:	83 85       	ldd	r24, Z+11	; 0x0b
   15780:	94 85       	ldd	r25, Z+12	; 0x0c
   15782:	a5 85       	ldd	r26, Z+13	; 0x0d
   15784:	b6 85       	ldd	r27, Z+14	; 0x0e
   15786:	ed b7       	in	r30, 0x3d	; 61
   15788:	fe b7       	in	r31, 0x3e	; 62
   1578a:	80 87       	std	Z+8, r24	; 0x08
   1578c:	91 87       	std	Z+9, r25	; 0x09
   1578e:	a2 87       	std	Z+10, r26	; 0x0a
   15790:	b3 87       	std	Z+11, r27	; 0x0b
   15792:	84 82       	std	Z+4, r8	; 0x04
   15794:	95 82       	std	Z+5, r9	; 0x05
   15796:	a6 82       	std	Z+6, r10	; 0x06
   15798:	b7 82       	std	Z+7, r11	; 0x07
   1579a:	85 ec       	ldi	r24, 0xC5	; 197
   1579c:	94 e2       	ldi	r25, 0x24	; 36
   1579e:	a0 e0       	ldi	r26, 0x00	; 0
   157a0:	81 83       	std	Z+1, r24	; 0x01
   157a2:	92 83       	std	Z+2, r25	; 0x02
   157a4:	a3 83       	std	Z+3, r26	; 0x03
   157a6:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            (long) Address, (long) SS80s->Length);
#endif

    if( SS80_cmd_seek() )
   157aa:	2b db       	rcall	.-2474   	; 0x14e02 <SS80_cmd_seek>
   157ac:	89 2b       	or	r24, r25
   157ae:	09 f0       	breq	.+2      	; 0x157b2 <SS80_locate_and_read+0x8c>
   157b0:	ae c0       	rjmp	.+348    	; 0x1590e <SS80_locate_and_read+0x1e8>
    {
        return(SS80_error_return());
    }

    count = SS80s->Length;
   157b2:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   157b6:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   157ba:	43 84       	ldd	r4, Z+11	; 0x0b
   157bc:	54 84       	ldd	r5, Z+12	; 0x0c
   157be:	65 84       	ldd	r6, Z+13	; 0x0d
   157c0:	76 84       	ldd	r7, Z+14	; 0x0e
    total_bytes = 0;
   157c2:	1e 86       	std	Y+14, r1	; 0x0e
   157c4:	1f 86       	std	Y+15, r1	; 0x0f
   157c6:	18 8a       	std	Y+16, r1	; 0x10
   157c8:	19 8a       	std	Y+17, r1	; 0x11

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
            gpib_timer_elapsed_end("disk READ ");
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   157ca:	87 ea       	ldi	r24, 0xA7	; 167
   157cc:	94 e2       	ldi	r25, 0x24	; 36
   157ce:	9c 01       	movw	r18, r24
   157d0:	40 e0       	ldi	r20, 0x00	; 0
   157d2:	2a 8b       	std	Y+18, r18	; 0x12
   157d4:	3b 8b       	std	Y+19, r19	; 0x13
   157d6:	4c 8b       	std	Y+20, r20	; 0x14
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   157d8:	33 24       	eor	r3, r3
   157da:	33 94       	inc	r3
            if(debuglevel & GPIB_ERR)
                printf("[SS80 GPIB Write Error]\n");
   157dc:	86 e7       	ldi	r24, 0x76	; 118
   157de:	94 e2       	ldi	r25, 0x24	; 36
   157e0:	9c 01       	movw	r18, r24
   157e2:	40 e0       	ldi	r20, 0x00	; 0
   157e4:	2d 8b       	std	Y+21, r18	; 0x15
   157e6:	3e 8b       	std	Y+22, r19	; 0x16
   157e8:	4f 8b       	std	Y+23, r20	; 0x17
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   157ea:	34 c0       	rjmp	.+104    	; 0x15854 <SS80_locate_and_read+0x12e>
                printf("[SS80 Disk Read Error]\n");
            return( SS80_error_return() );
        }

#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   157ec:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   157ee:	0e 94 a1 83 	call	0x10742	; 0x10742 <gpib_timer_elapsed_begin>
#endif
        len = gpib_write_str(gpib_iobuff, chunk, &status);
   157f2:	ae 01       	movw	r20, r28
   157f4:	44 5f       	subi	r20, 0xF4	; 244
   157f6:	5f 4f       	sbci	r21, 0xFF	; 255
   157f8:	b6 01       	movw	r22, r12
   157fa:	84 e0       	ldi	r24, 0x04	; 4
   157fc:	9d e1       	ldi	r25, 0x1D	; 29
   157fe:	0e 94 f3 89 	call	0x113e6	; 0x113e6 <gpib_write_str>
   15802:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   15804:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15808:	87 ff       	sbrs	r24, 7
   1580a:	04 c0       	rjmp	.+8      	; 0x15814 <SS80_locate_and_read+0xee>
            gpib_timer_elapsed_end("GPIB write");
   1580c:	84 eb       	ldi	r24, 0xB4	; 180
   1580e:	90 e1       	ldi	r25, 0x10	; 16
   15810:	0e 94 b3 83 	call	0x10766	; 0x10766 <gpib_timer_elapsed_end>
#endif
        if( len != chunk)
   15814:	c0 16       	cp	r12, r16
   15816:	d1 06       	cpc	r13, r17
   15818:	09 f0       	breq	.+2      	; 0x1581c <SS80_locate_and_read+0xf6>
   1581a:	82 c0       	rjmp	.+260    	; 0x15920 <SS80_locate_and_read+0x1fa>
                SS80s->Errors |= ERR_GPIB;
                break;
            }
        }

        Address += chunk;
   1581c:	0d 2c       	mov	r0, r13
   1581e:	00 0c       	add	r0, r0
   15820:	ee 08       	sbc	r14, r14
   15822:	ff 08       	sbc	r15, r15
   15824:	8c 0c       	add	r8, r12
   15826:	9d 1c       	adc	r9, r13
   15828:	ae 1c       	adc	r10, r14
   1582a:	bf 1c       	adc	r11, r15
        total_bytes = total_bytes + len;
   1582c:	01 2e       	mov	r0, r17
   1582e:	00 0c       	add	r0, r0
   15830:	22 0b       	sbc	r18, r18
   15832:	33 0b       	sbc	r19, r19
   15834:	8e 85       	ldd	r24, Y+14	; 0x0e
   15836:	9f 85       	ldd	r25, Y+15	; 0x0f
   15838:	a8 89       	ldd	r26, Y+16	; 0x10
   1583a:	b9 89       	ldd	r27, Y+17	; 0x11
   1583c:	80 0f       	add	r24, r16
   1583e:	91 1f       	adc	r25, r17
   15840:	a2 1f       	adc	r26, r18
   15842:	b3 1f       	adc	r27, r19
   15844:	8e 87       	std	Y+14, r24	; 0x0e
   15846:	9f 87       	std	Y+15, r25	; 0x0f
   15848:	a8 8b       	std	Y+16, r26	; 0x10
   1584a:	b9 8b       	std	Y+17, r27	; 0x11
        count -= len;
   1584c:	40 1a       	sub	r4, r16
   1584e:	51 0a       	sbc	r5, r17
   15850:	62 0a       	sbc	r6, r18
   15852:	73 0a       	sbc	r7, r19
        return(SS80_error_return());
    }

    count = SS80s->Length;
    total_bytes = 0;
    while(count > 0 )
   15854:	41 14       	cp	r4, r1
   15856:	51 04       	cpc	r5, r1
   15858:	61 04       	cpc	r6, r1
   1585a:	71 04       	cpc	r7, r1
   1585c:	09 f4       	brne	.+2      	; 0x15860 <SS80_locate_and_read+0x13a>
   1585e:	92 c0       	rjmp	.+292    	; 0x15984 <SS80_locate_and_read+0x25e>
    {
        if( GPIB_IO_RD(IFC) == 0)
   15860:	54 98       	cbi	0x0a, 4	; 10
   15862:	4c 9b       	sbis	0x09, 4	; 9
   15864:	7d cf       	rjmp	.-262    	; 0x15760 <SS80_locate_and_read+0x3a>
        {
            return(IFC_FLAG);
        }

        if(count > 256)
   15866:	31 e0       	ldi	r19, 0x01	; 1
   15868:	43 16       	cp	r4, r19
   1586a:	53 06       	cpc	r5, r19
   1586c:	61 04       	cpc	r6, r1
   1586e:	71 04       	cpc	r7, r1
   15870:	08 f4       	brcc	.+2      	; 0x15874 <SS80_locate_and_read+0x14e>
   15872:	4f c0       	rjmp	.+158    	; 0x15912 <SS80_locate_and_read+0x1ec>
        {
            chunk = 256;
            status = 0;                           // GPIB status
   15874:	1d 86       	std	Y+13, r1	; 0x0d
   15876:	1c 86       	std	Y+12, r1	; 0x0c
            return(IFC_FLAG);
        }

        if(count > 256)
        {
            chunk = 256;
   15878:	c1 2c       	mov	r12, r1
   1587a:	dd 24       	eor	r13, r13
   1587c:	d3 94       	inc	r13
            chunk = count;
            status |= EOI_FLAG;                   // GPIB EOI on final charater
        }

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   1587e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15882:	86 fd       	sbrc	r24, 6
            gpib_timer_elapsed_begin();
   15884:	0e 94 a1 83 	call	0x10742	; 0x10742 <gpib_timer_elapsed_begin>
#endif

// FIXME len != chunk
        len = dbf_open_read(SS80p->HEADER.NAME, Address, gpib_iobuff, chunk, &SS80s->Errors);
   15888:	e0 90 81 19 	lds	r14, 0x1981	; 0x801981 <SS80s>
   1588c:	f0 90 82 19 	lds	r15, 0x1982	; 0x801982 <SS80s+0x1>
   15890:	43 e0       	ldi	r20, 0x03	; 3
   15892:	e4 0e       	add	r14, r20
   15894:	f1 1c       	adc	r15, r1
   15896:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   1589a:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   1589e:	86 01       	movw	r16, r12
   158a0:	24 e0       	ldi	r18, 0x04	; 4
   158a2:	3d e1       	ldi	r19, 0x1D	; 29
   158a4:	b5 01       	movw	r22, r10
   158a6:	a4 01       	movw	r20, r8
   158a8:	82 81       	ldd	r24, Z+2	; 0x02
   158aa:	93 81       	ldd	r25, Z+3	; 0x03
   158ac:	0e 94 f3 82 	call	0x105e6	; 0x105e6 <dbf_open_read>
   158b0:	8c 01       	movw	r16, r24

#if SDEBUG
        if(debuglevel & GPIB_DISK_IO_TIMING)
   158b2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   158b6:	86 ff       	sbrs	r24, 6
   158b8:	04 c0       	rjmp	.+8      	; 0x158c2 <SS80_locate_and_read+0x19c>
            gpib_timer_elapsed_end("disk READ ");
   158ba:	89 ea       	ldi	r24, 0xA9	; 169
   158bc:	90 e1       	ldi	r25, 0x10	; 16
   158be:	0e 94 b3 83 	call	0x10766	; 0x10766 <gpib_timer_elapsed_end>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   158c2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   158c6:	85 ff       	sbrs	r24, 5
   158c8:	0c c0       	rjmp	.+24     	; 0x158e2 <SS80_locate_and_read+0x1bc>
            printf("[SS80 Disk Read %02XH bytes]\n", len);
   158ca:	ed b7       	in	r30, 0x3d	; 61
   158cc:	fe b7       	in	r31, 0x3e	; 62
   158ce:	15 83       	std	Z+5, r17	; 0x05
   158d0:	04 83       	std	Z+4, r16	; 0x04
   158d2:	2a 89       	ldd	r18, Y+18	; 0x12
   158d4:	3b 89       	ldd	r19, Y+19	; 0x13
   158d6:	4c 89       	ldd	r20, Y+20	; 0x14
   158d8:	21 83       	std	Z+1, r18	; 0x01
   158da:	32 83       	std	Z+2, r19	; 0x02
   158dc:	43 83       	std	Z+3, r20	; 0x03
   158de:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   158e2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
#endif
        if(len < 0)
   158e6:	17 ff       	sbrs	r17, 7
   158e8:	81 cf       	rjmp	.-254    	; 0x157ec <SS80_locate_and_read+0xc6>
        {
            SS80s->qstat = 1;
   158ea:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   158ee:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   158f2:	91 e0       	ldi	r25, 0x01	; 1
   158f4:	92 83       	std	Z+2, r25	; 0x02
/// @return Return
            if(debuglevel & GPIB_ERR)
   158f6:	80 ff       	sbrs	r24, 0
   158f8:	0a c0       	rjmp	.+20     	; 0x1590e <SS80_locate_and_read+0x1e8>
                printf("[SS80 Disk Read Error]\n");
   158fa:	8f e8       	ldi	r24, 0x8F	; 143
   158fc:	94 e2       	ldi	r25, 0x24	; 36
   158fe:	a0 e0       	ldi	r26, 0x00	; 0
   15900:	ed b7       	in	r30, 0x3d	; 61
   15902:	fe b7       	in	r31, 0x3e	; 62
   15904:	81 83       	std	Z+1, r24	; 0x01
   15906:	92 83       	std	Z+2, r25	; 0x02
   15908:	a3 83       	std	Z+3, r26	; 0x03
   1590a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            return( SS80_error_return() );
   1590e:	d1 de       	rcall	.-606    	; 0x156b2 <SS80_error_return>
   15910:	68 c0       	rjmp	.+208    	; 0x159e2 <SS80_locate_and_read+0x2bc>
            chunk = 256;
            status = 0;                           // GPIB status
        }
        else
        {
            chunk = count;
   15912:	62 01       	movw	r12, r4
            status |= EOI_FLAG;                   // GPIB EOI on final charater
   15914:	8c 85       	ldd	r24, Y+12	; 0x0c
   15916:	9d 85       	ldd	r25, Y+13	; 0x0d
   15918:	91 60       	ori	r25, 0x01	; 1
   1591a:	9d 87       	std	Y+13, r25	; 0x0d
   1591c:	8c 87       	std	Y+12, r24	; 0x0c
   1591e:	af cf       	rjmp	.-162    	; 0x1587e <SS80_locate_and_read+0x158>
        if(debuglevel & GPIB_RW_STR_TIMING)
            gpib_timer_elapsed_end("GPIB write");
#endif
        if( len != chunk)
        {
            SS80s->qstat = 1;
   15920:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   15924:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   15928:	32 82       	std	Z+2, r3	; 0x02
            if(debuglevel & GPIB_ERR)
   1592a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1592e:	80 ff       	sbrs	r24, 0
   15930:	0a c0       	rjmp	.+20     	; 0x15946 <SS80_locate_and_read+0x220>
                printf("[SS80 GPIB Write Error]\n");
   15932:	2d 89       	ldd	r18, Y+21	; 0x15
   15934:	3e 89       	ldd	r19, Y+22	; 0x16
   15936:	4f 89       	ldd	r20, Y+23	; 0x17
   15938:	ed b7       	in	r30, 0x3d	; 61
   1593a:	fe b7       	in	r31, 0x3e	; 62
   1593c:	21 83       	std	Z+1, r18	; 0x01
   1593e:	32 83       	std	Z+2, r19	; 0x02
   15940:	43 83       	std	Z+3, r20	; 0x03
   15942:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            if(status & ERROR_MASK)
   15946:	8c 85       	ldd	r24, Y+12	; 0x0c
   15948:	9d 85       	ldd	r25, Y+13	; 0x0d
   1594a:	88 27       	eor	r24, r24
   1594c:	90 7d       	andi	r25, 0xD0	; 208
   1594e:	89 2b       	or	r24, r25
   15950:	09 f4       	brne	.+2      	; 0x15954 <SS80_locate_and_read+0x22e>
   15952:	64 cf       	rjmp	.-312    	; 0x1581c <SS80_locate_and_read+0xf6>
            {
                SS80s->Errors |= ERR_GPIB;
   15954:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   15958:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   1595c:	83 81       	ldd	r24, Z+3	; 0x03
   1595e:	94 81       	ldd	r25, Z+4	; 0x04
   15960:	80 62       	ori	r24, 0x20	; 32
   15962:	94 83       	std	Z+4, r25	; 0x04
   15964:	83 83       	std	Z+3, r24	; 0x03
        count -= len;
    }
///  Note: this should not happen unless we exit on errors above
    if(count > 0)
    {
        if(debuglevel & GPIB_ERR)
   15966:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1596a:	80 ff       	sbrs	r24, 0
   1596c:	21 c0       	rjmp	.+66     	; 0x159b0 <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read DID NOT FINISH]\n");
   1596e:	81 e5       	ldi	r24, 0x51	; 81
   15970:	94 e2       	ldi	r25, 0x24	; 36
   15972:	a0 e0       	ldi	r26, 0x00	; 0
   15974:	ed b7       	in	r30, 0x3d	; 61
   15976:	fe b7       	in	r31, 0x3e	; 62
   15978:	81 83       	std	Z+1, r24	; 0x01
   1597a:	92 83       	std	Z+2, r25	; 0x02
   1597c:	a3 83       	std	Z+3, r26	; 0x03
   1597e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   15982:	16 c0       	rjmp	.+44     	; 0x159b0 <SS80_locate_and_read+0x28a>
    }
    else
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15984:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15988:	85 ff       	sbrs	r24, 5
   1598a:	12 c0       	rjmp	.+36     	; 0x159b0 <SS80_locate_and_read+0x28a>
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
   1598c:	8e 85       	ldd	r24, Y+14	; 0x0e
   1598e:	9f 85       	ldd	r25, Y+15	; 0x0f
   15990:	a8 89       	ldd	r26, Y+16	; 0x10
   15992:	b9 89       	ldd	r27, Y+17	; 0x11
   15994:	ed b7       	in	r30, 0x3d	; 61
   15996:	fe b7       	in	r31, 0x3e	; 62
   15998:	84 83       	std	Z+4, r24	; 0x04
   1599a:	95 83       	std	Z+5, r25	; 0x05
   1599c:	a6 83       	std	Z+6, r26	; 0x06
   1599e:	b7 83       	std	Z+7, r27	; 0x07
   159a0:	89 e2       	ldi	r24, 0x29	; 41
   159a2:	94 e2       	ldi	r25, 0x24	; 36
   159a4:	a0 e0       	ldi	r26, 0x00	; 0
   159a6:	81 83       	std	Z+1, r24	; 0x01
   159a8:	92 83       	std	Z+2, r25	; 0x02
   159aa:	a3 83       	std	Z+3, r26	; 0x03
   159ac:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   159b0:	00 91 81 19 	lds	r16, 0x1981	; 0x801981 <SS80s>
   159b4:	10 91 82 19 	lds	r17, 0x1982	; 0x801982 <SS80s+0x1>

/// @brief  SS80 Return current block addresss from bytes
/// @return Block Address
uint32_t SS80_Bytes_to_Blocks(uint32_t bytes)
{
    return(bytes / SS80p->UNIT.BYTES_PER_BLOCK);
   159b8:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   159bc:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
            printf("[SS80 Buffered Read Total(%lXH) bytes]\n", (long) total_bytes);
#endif
    }

    SS80s->AddressBlocks = SS80_Bytes_to_Blocks(Address);
   159c0:	20 89       	ldd	r18, Z+16	; 0x10
   159c2:	31 89       	ldd	r19, Z+17	; 0x11
   159c4:	40 e0       	ldi	r20, 0x00	; 0
   159c6:	50 e0       	ldi	r21, 0x00	; 0
   159c8:	c5 01       	movw	r24, r10
   159ca:	b4 01       	movw	r22, r8
   159cc:	0e 94 6b e0 	call	0x1c0d6	; 0x1c0d6 <__udivmodsi4>
   159d0:	f8 01       	movw	r30, r16
   159d2:	27 83       	std	Z+7, r18	; 0x07
   159d4:	30 87       	std	Z+8, r19	; 0x08
   159d6:	41 87       	std	Z+9, r20	; 0x09
   159d8:	52 87       	std	Z+10, r21	; 0x0a
    return (status & ERROR_MASK);
   159da:	8c 85       	ldd	r24, Y+12	; 0x0c
   159dc:	9d 85       	ldd	r25, Y+13	; 0x0d
   159de:	88 27       	eor	r24, r24
   159e0:	90 7d       	andi	r25, 0xD0	; 208
}
   159e2:	67 96       	adiw	r28, 0x17	; 23
   159e4:	e1 e1       	ldi	r30, 0x11	; 17
   159e6:	0c 94 f5 e0 	jmp	0x1c1ea	; 0x1c1ea <__epilogue_restores__+0x2>

000159ea <SS80_Execute_State>:
/// - State: EXEC STATE COMMAND
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
   159ea:	cf 93       	push	r28
   159ec:	df 93       	push	r29
   159ee:	00 d0       	rcall	.+0      	; 0x159f0 <SS80_Execute_State+0x6>
   159f0:	00 d0       	rcall	.+0      	; 0x159f2 <SS80_Execute_State+0x8>
   159f2:	1f 92       	push	r1
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
   159f4:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   159f8:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   159fc:	81 81       	ldd	r24, Z+1	; 0x01
   159fe:	90 e0       	ldi	r25, 0x00	; 0
   15a00:	0e 94 99 84 	call	0x10932	; 0x10932 <gpib_disable_PPR>
    switch(SS80s->estate)
   15a04:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   15a08:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   15a0c:	80 81       	ld	r24, Z
   15a0e:	91 81       	ldd	r25, Z+1	; 0x01
   15a10:	82 30       	cpi	r24, 0x02	; 2
   15a12:	91 05       	cpc	r25, r1
   15a14:	89 f0       	breq	.+34     	; 0x15a38 <SS80_Execute_State+0x4e>
   15a16:	3c f4       	brge	.+14     	; 0x15a26 <SS80_Execute_State+0x3c>
   15a18:	00 97       	sbiw	r24, 0x00	; 0
   15a1a:	81 f1       	breq	.+96     	; 0x15a7c <SS80_Execute_State+0x92>
   15a1c:	81 30       	cpi	r24, 0x01	; 1
   15a1e:	91 05       	cpc	r25, r1
   15a20:	b9 f4       	brne	.+46     	; 0x15a50 <SS80_Execute_State+0x66>
    {
        case EXEC_IDLE:
            break;
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
   15a22:	81 de       	rcall	.-766    	; 0x15726 <SS80_locate_and_read>
   15a24:	0d c0       	rjmp	.+26     	; 0x15a40 <SS80_Execute_State+0x56>
int SS80_Execute_State(void)
{
    int ret = 0;

    gpib_disable_PPR(SS80p->HEADER.PPR);
    switch(SS80s->estate)
   15a26:	83 30       	cpi	r24, 0x03	; 3
   15a28:	91 05       	cpc	r25, r1
   15a2a:	41 f0       	breq	.+16     	; 0x15a3c <SS80_Execute_State+0x52>
   15a2c:	84 30       	cpi	r24, 0x04	; 4
   15a2e:	91 05       	cpc	r25, r1
   15a30:	79 f4       	brne	.+30     	; 0x15a50 <SS80_Execute_State+0x66>
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   15a32:	0e 94 ca a3 	call	0x14794	; 0x14794 <SS80_describe>
        case EXEC_LOCATE_AND_READ:
            ret = SS80_locate_and_read();
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_LOCATE_AND_WRITE:
            ret = SS80_locate_and_write();
   15a36:	04 c0       	rjmp	.+8      	; 0x15a40 <SS80_Execute_State+0x56>
   15a38:	59 da       	rcall	.-2894   	; 0x14eec <SS80_locate_and_write>
   15a3a:	02 c0       	rjmp	.+4      	; 0x15a40 <SS80_Execute_State+0x56>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_SEND_STATUS:
            ret = SS80_send_status();
   15a3c:	0e 94 49 a3 	call	0x14692	; 0x14692 <SS80_send_status>
            SS80s->estate = EXEC_IDLE;
            break;
        case EXEC_DESCRIBE:
            ret = SS80_describe();
   15a40:	ec 01       	movw	r28, r24
            SS80s->estate = EXEC_IDLE;
   15a42:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   15a46:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   15a4a:	11 82       	std	Z+1, r1	; 0x01
   15a4c:	10 82       	st	Z, r1
            break;
   15a4e:	18 c0       	rjmp	.+48     	; 0x15a80 <SS80_Execute_State+0x96>
        default:
            if(debuglevel & GPIB_ERR)
   15a50:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   15a54:	20 ff       	sbrs	r18, 0
   15a56:	0c c0       	rjmp	.+24     	; 0x15a70 <SS80_Execute_State+0x86>
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
   15a58:	ed b7       	in	r30, 0x3d	; 61
   15a5a:	fe b7       	in	r31, 0x3e	; 62
   15a5c:	95 83       	std	Z+5, r25	; 0x05
   15a5e:	84 83       	std	Z+4, r24	; 0x04
   15a60:	8d ee       	ldi	r24, 0xED	; 237
   15a62:	94 e2       	ldi	r25, 0x24	; 36
   15a64:	a0 e0       	ldi	r26, 0x00	; 0
   15a66:	81 83       	std	Z+1, r24	; 0x01
   15a68:	92 83       	std	Z+2, r25	; 0x02
   15a6a:	a3 83       	std	Z+3, r26	; 0x03
   15a6c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            SS80s->estate = EXEC_IDLE;
   15a70:	e0 91 81 19 	lds	r30, 0x1981	; 0x801981 <SS80s>
   15a74:	f0 91 82 19 	lds	r31, 0x1982	; 0x801982 <SS80s+0x1>
   15a78:	11 82       	std	Z+1, r1	; 0x01
   15a7a:	10 82       	st	Z, r1
/// @return 0 on sucess
/// @return GPIB error flags on fail
/// @see gpib.h ERROR_MASK defines for a full list of error flags.
int SS80_Execute_State(void)
{
    int ret = 0;
   15a7c:	c0 e0       	ldi	r28, 0x00	; 0
   15a7e:	d0 e0       	ldi	r29, 0x00	; 0
            if(debuglevel & GPIB_ERR)
                printf("[SS80 EXEC state:%d error]\n", SS80s->estate);
            SS80s->estate = EXEC_IDLE;
            break;
    }
    gpib_enable_PPR(SS80p->HEADER.PPR);
   15a80:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   15a84:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   15a88:	81 81       	ldd	r24, Z+1	; 0x01
   15a8a:	90 e0       	ldi	r25, 0x00	; 0
   15a8c:	0e 94 63 84 	call	0x108c6	; 0x108c6 <gpib_enable_PPR>
    return(ret);
}
   15a90:	ce 01       	movw	r24, r28
   15a92:	cd b7       	in	r28, 0x3d	; 61
   15a94:	de b7       	in	r29, 0x3e	; 62
   15a96:	25 96       	adiw	r28, 0x05	; 5
   15a98:	e2 e0       	ldi	r30, 0x02	; 2
   15a9a:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

00015a9e <SS80_COMMANDS>:
/// @param[in] ch command.
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
   15a9e:	a9 e0       	ldi	r26, 0x09	; 9
   15aa0:	b0 e0       	ldi	r27, 0x00	; 0
   15aa2:	e5 e5       	ldi	r30, 0x55	; 85
   15aa4:	fd ea       	ldi	r31, 0xAD	; 173
   15aa6:	0c 94 e7 e0 	jmp	0x1c1ce	; 0x1c1ce <__prologue_saves__+0x1e>
   15aaa:	18 2f       	mov	r17, r24
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   15aac:	80 91 08 1f 	lds	r24, 0x1F08	; 0x801f08 <talking>
   15ab0:	90 e0       	ldi	r25, 0x00	; 0
   15ab2:	0e 94 c6 8a 	call	0x1158c	; 0x1158c <SS80_is_MTA>
   15ab6:	89 2b       	or	r24, r25
   15ab8:	19 f0       	breq	.+6      	; 0x15ac0 <SS80_COMMANDS+0x22>
    {
        if(ch == 0x65 )
   15aba:	15 36       	cpi	r17, 0x65	; 101
   15abc:	19 f5       	brne	.+70     	; 0x15b04 <SS80_COMMANDS+0x66>
   15abe:	09 c0       	rjmp	.+18     	; 0x15ad2 <SS80_COMMANDS+0x34>
/// @return  0 on send
/// @see GPIB error status
/// @see gpib.h _FLAGS defines for a full list.
int SS80_COMMANDS(uint8_t ch)
{
    if(SS80_is_MTA(talking) || SS80_is_MLA(listening))
   15ac0:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   15ac4:	90 e0       	ldi	r25, 0x00	; 0
   15ac6:	0e 94 b5 8a 	call	0x1156a	; 0x1156a <SS80_is_MLA>
   15aca:	ec 01       	movw	r28, r24
   15acc:	89 2b       	or	r24, r25
   15ace:	a9 f7       	brne	.-22     	; 0x15aba <SS80_COMMANDS+0x1c>
   15ad0:	ad c0       	rjmp	.+346    	; 0x15c2c <SS80_COMMANDS+0x18e>
    {
        if(ch == 0x65 )
        {
            if(SS80_is_MLA(listening))
   15ad2:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   15ad6:	90 e0       	ldi	r25, 0x00	; 0
   15ad8:	0e 94 b5 8a 	call	0x1156a	; 0x1156a <SS80_is_MLA>
   15adc:	89 2b       	or	r24, r25
   15ade:	09 f4       	brne	.+2      	; 0x15ae2 <SS80_COMMANDS+0x44>
   15ae0:	a2 c0       	rjmp	.+324    	; 0x15c26 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15ae2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15ae6:	85 ff       	sbrs	r24, 5
   15ae8:	0a c0       	rjmp	.+20     	; 0x15afe <SS80_COMMANDS+0x60>
                    printf("[SS80 Command State]\n");
   15aea:	85 ed       	ldi	r24, 0xD5	; 213
   15aec:	9d e1       	ldi	r25, 0x1D	; 29
   15aee:	a0 e0       	ldi	r26, 0x00	; 0
   15af0:	ed b7       	in	r30, 0x3d	; 61
   15af2:	fe b7       	in	r31, 0x3e	; 62
   15af4:	81 83       	std	Z+1, r24	; 0x01
   15af6:	92 83       	std	Z+2, r25	; 0x02
   15af8:	a3 83       	std	Z+3, r26	; 0x03
   15afa:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
                return ( SS80_Command_State() );
   15afe:	0e 94 8a a4 	call	0x14914	; 0x14914 <SS80_Command_State>
   15b02:	73 c0       	rjmp	.+230    	; 0x15bea <SS80_COMMANDS+0x14c>
            }
            return(0);
        }

        if(ch == 0x6e )
   15b04:	1e 36       	cpi	r17, 0x6E	; 110
   15b06:	01 f5       	brne	.+64     	; 0x15b48 <SS80_COMMANDS+0xaa>
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   15b08:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   15b0c:	90 e0       	ldi	r25, 0x00	; 0
   15b0e:	0e 94 b5 8a 	call	0x1156a	; 0x1156a <SS80_is_MLA>
   15b12:	89 2b       	or	r24, r25
   15b14:	79 f0       	breq	.+30     	; 0x15b34 <SS80_COMMANDS+0x96>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15b16:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15b1a:	85 ff       	sbrs	r24, 5
   15b1c:	13 c0       	rjmp	.+38     	; 0x15b44 <SS80_COMMANDS+0xa6>
                    printf("[SS00 Execute State]\n");
   15b1e:	8f eb       	ldi	r24, 0xBF	; 191
   15b20:	9d e1       	ldi	r25, 0x1D	; 29
   15b22:	a0 e0       	ldi	r26, 0x00	; 0
   15b24:	ed b7       	in	r30, 0x3d	; 61
   15b26:	fe b7       	in	r31, 0x3e	; 62
   15b28:	81 83       	std	Z+1, r24	; 0x01
   15b2a:	92 83       	std	Z+2, r25	; 0x02
   15b2c:	a3 83       	std	Z+3, r26	; 0x03
   15b2e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   15b32:	08 c0       	rjmp	.+16     	; 0x15b44 <SS80_COMMANDS+0xa6>
            return(0);
        }

        if(ch == 0x6e )
        {
            if(SS80_is_MLA(listening)  || SS80_is_MTA(talking))
   15b34:	80 91 08 1f 	lds	r24, 0x1F08	; 0x801f08 <talking>
   15b38:	90 e0       	ldi	r25, 0x00	; 0
   15b3a:	0e 94 c6 8a 	call	0x1158c	; 0x1158c <SS80_is_MTA>
   15b3e:	89 2b       	or	r24, r25
   15b40:	51 f7       	brne	.-44     	; 0x15b16 <SS80_COMMANDS+0x78>
   15b42:	71 c0       	rjmp	.+226    	; 0x15c26 <SS80_COMMANDS+0x188>
            {
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
                    printf("[SS00 Execute State]\n");
                return ( SS80_Execute_State() );
   15b44:	52 df       	rcall	.-348    	; 0x159ea <SS80_Execute_State>
   15b46:	51 c0       	rjmp	.+162    	; 0x15bea <SS80_COMMANDS+0x14c>

            }
            return(0);
        }

        if(ch == 0x70 )
   15b48:	10 37       	cpi	r17, 0x70	; 112
   15b4a:	b9 f5       	brne	.+110    	; 0x15bba <SS80_COMMANDS+0x11c>
        {
            if(SS80_is_MTA(talking) )
   15b4c:	80 91 08 1f 	lds	r24, 0x1F08	; 0x801f08 <talking>
   15b50:	90 e0       	ldi	r25, 0x00	; 0
   15b52:	0e 94 c6 8a 	call	0x1158c	; 0x1158c <SS80_is_MTA>
   15b56:	89 2b       	or	r24, r25
   15b58:	81 f0       	breq	.+32     	; 0x15b7a <SS80_COMMANDS+0xdc>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15b5a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15b5e:	85 ff       	sbrs	r24, 5
   15b60:	0a c0       	rjmp	.+20     	; 0x15b76 <SS80_COMMANDS+0xd8>
                    printf("[SS80 Report State]\n");
   15b62:	8a ea       	ldi	r24, 0xAA	; 170
   15b64:	9d e1       	ldi	r25, 0x1D	; 29
   15b66:	a0 e0       	ldi	r26, 0x00	; 0
   15b68:	ed b7       	in	r30, 0x3d	; 61
   15b6a:	fe b7       	in	r31, 0x3e	; 62
   15b6c:	81 83       	std	Z+1, r24	; 0x01
   15b6e:	92 83       	std	Z+2, r25	; 0x02
   15b70:	a3 83       	std	Z+3, r26	; 0x03
   15b72:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
                return( SS80_Report() );
   15b76:	4c db       	rcall	.-2408   	; 0x15210 <SS80_Report>
   15b78:	38 c0       	rjmp	.+112    	; 0x15bea <SS80_COMMANDS+0x14c>
            }

            if(SS80_is_MLA(listening))
   15b7a:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   15b7e:	90 e0       	ldi	r25, 0x00	; 0
   15b80:	0e 94 b5 8a 	call	0x1156a	; 0x1156a <SS80_is_MLA>
   15b84:	89 2b       	or	r24, r25
   15b86:	09 f4       	brne	.+2      	; 0x15b8a <SS80_COMMANDS+0xec>
   15b88:	4e c0       	rjmp	.+156    	; 0x15c26 <SS80_COMMANDS+0x188>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15b8a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15b8e:	85 ff       	sbrs	r24, 5
   15b90:	0a c0       	rjmp	.+20     	; 0x15ba6 <SS80_COMMANDS+0x108>
                    printf("[Amigo Clear]\n");
   15b92:	8b e9       	ldi	r24, 0x9B	; 155
   15b94:	9d e1       	ldi	r25, 0x1D	; 29
   15b96:	a0 e0       	ldi	r26, 0x00	; 0
   15b98:	ed b7       	in	r30, 0x3d	; 61
   15b9a:	fe b7       	in	r31, 0x3e	; 62
   15b9c:	81 83       	std	Z+1, r24	; 0x01
   15b9e:	92 83       	std	Z+2, r25	; 0x02
   15ba0:	a3 83       	std	Z+3, r26	; 0x03
   15ba2:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
                gpib_disable_PPR(SS80p->HEADER.PPR);
   15ba6:	e0 91 83 19 	lds	r30, 0x1983	; 0x801983 <SS80p>
   15baa:	f0 91 84 19 	lds	r31, 0x1984	; 0x801984 <SS80p+0x1>
   15bae:	81 81       	ldd	r24, Z+1	; 0x01
   15bb0:	90 e0       	ldi	r25, 0x00	; 0
   15bb2:	0e 94 99 84 	call	0x10932	; 0x10932 <gpib_disable_PPR>
                return( SS80_Amigo_Clear() );
   15bb6:	1d dc       	rcall	.-1990   	; 0x153f2 <SS80_Amigo_Clear>
   15bb8:	18 c0       	rjmp	.+48     	; 0x15bea <SS80_COMMANDS+0x14c>
            }
            return (0);
        }
        if(ch == 0x72 )
   15bba:	12 37       	cpi	r17, 0x72	; 114
   15bbc:	c1 f4       	brne	.+48     	; 0x15bee <SS80_COMMANDS+0x150>
        {
            if(SS80_is_MLA(listening) )
   15bbe:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   15bc2:	90 e0       	ldi	r25, 0x00	; 0
   15bc4:	0e 94 b5 8a 	call	0x1156a	; 0x1156a <SS80_is_MLA>
   15bc8:	89 2b       	or	r24, r25
   15bca:	89 f0       	breq	.+34     	; 0x15bee <SS80_COMMANDS+0x150>
            {
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   15bcc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15bd0:	85 ff       	sbrs	r24, 5
   15bd2:	0a c0       	rjmp	.+20     	; 0x15be8 <SS80_COMMANDS+0x14a>
                    printf("[SS80 Transparent]\n");
   15bd4:	87 e8       	ldi	r24, 0x87	; 135
   15bd6:	9d e1       	ldi	r25, 0x1D	; 29
   15bd8:	a0 e0       	ldi	r26, 0x00	; 0
   15bda:	ed b7       	in	r30, 0x3d	; 61
   15bdc:	fe b7       	in	r31, 0x3e	; 62
   15bde:	81 83       	std	Z+1, r24	; 0x01
   15be0:	92 83       	std	Z+2, r25	; 0x02
   15be2:	a3 83       	std	Z+3, r26	; 0x03
   15be4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
                return( SS80_Transparent_State() );
   15be8:	58 dc       	rcall	.-1872   	; 0x1549a <SS80_Transparent_State>
   15bea:	ec 01       	movw	r28, r24
   15bec:	3b c0       	rjmp	.+118    	; 0x15c64 <SS80_COMMANDS+0x1c6>
            }
        }
        if(debuglevel & GPIB_ERR)
   15bee:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15bf2:	80 ff       	sbrs	r24, 0
   15bf4:	18 c0       	rjmp	.+48     	; 0x15c26 <SS80_COMMANDS+0x188>
            printf("[SS80 SC Unknown: %02XH, listen:%02XH, talk:%02XH]\n",
   15bf6:	80 91 08 1f 	lds	r24, 0x1F08	; 0x801f08 <talking>
   15bfa:	90 e0       	ldi	r25, 0x00	; 0
   15bfc:	ed b7       	in	r30, 0x3d	; 61
   15bfe:	fe b7       	in	r31, 0x3e	; 62
   15c00:	91 87       	std	Z+9, r25	; 0x09
   15c02:	80 87       	std	Z+8, r24	; 0x08
   15c04:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   15c08:	90 e0       	ldi	r25, 0x00	; 0
   15c0a:	97 83       	std	Z+7, r25	; 0x07
   15c0c:	86 83       	std	Z+6, r24	; 0x06
   15c0e:	81 2f       	mov	r24, r17
   15c10:	90 e0       	ldi	r25, 0x00	; 0
   15c12:	95 83       	std	Z+5, r25	; 0x05
   15c14:	84 83       	std	Z+4, r24	; 0x04
   15c16:	83 e5       	ldi	r24, 0x53	; 83
   15c18:	9d e1       	ldi	r25, 0x1D	; 29
   15c1a:	a0 e0       	ldi	r26, 0x00	; 0
   15c1c:	81 83       	std	Z+1, r24	; 0x01
   15c1e:	92 83       	std	Z+2, r25	; 0x02
   15c20:	a3 83       	std	Z+3, r26	; 0x03
   15c22:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
                0xff & ch, 0xff & listening, 0xff & talking);
        return(0);
   15c26:	c0 e0       	ldi	r28, 0x00	; 0
   15c28:	d0 e0       	ldi	r29, 0x00	; 0
   15c2a:	1c c0       	rjmp	.+56     	; 0x15c64 <SS80_COMMANDS+0x1c6>
    }

    if(debuglevel & GPIB_ERR)
   15c2c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15c30:	80 ff       	sbrs	r24, 0
   15c32:	f9 cf       	rjmp	.-14     	; 0x15c26 <SS80_COMMANDS+0x188>
        printf("[SS80 Unknown SC: %02XH, listen:%02XH, talk:%02XH]\n",
   15c34:	80 91 08 1f 	lds	r24, 0x1F08	; 0x801f08 <talking>
   15c38:	90 e0       	ldi	r25, 0x00	; 0
   15c3a:	ed b7       	in	r30, 0x3d	; 61
   15c3c:	fe b7       	in	r31, 0x3e	; 62
   15c3e:	91 87       	std	Z+9, r25	; 0x09
   15c40:	80 87       	std	Z+8, r24	; 0x08
   15c42:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   15c46:	90 e0       	ldi	r25, 0x00	; 0
   15c48:	97 83       	std	Z+7, r25	; 0x07
   15c4a:	86 83       	std	Z+6, r24	; 0x06
   15c4c:	81 2f       	mov	r24, r17
   15c4e:	90 e0       	ldi	r25, 0x00	; 0
   15c50:	95 83       	std	Z+5, r25	; 0x05
   15c52:	84 83       	std	Z+4, r24	; 0x04
   15c54:	8f e1       	ldi	r24, 0x1F	; 31
   15c56:	9d e1       	ldi	r25, 0x1D	; 29
   15c58:	a0 e0       	ldi	r26, 0x00	; 0
   15c5a:	81 83       	std	Z+1, r24	; 0x01
   15c5c:	92 83       	std	Z+2, r25	; 0x02
   15c5e:	a3 83       	std	Z+3, r26	; 0x03
   15c60:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            0xff & ch, 0xff & listening, 0xff & talking);
    return(0);
}
   15c64:	ce 01       	movw	r24, r28
   15c66:	cd b7       	in	r28, 0x3d	; 61
   15c68:	de b7       	in	r29, 0x3e	; 62
   15c6a:	29 96       	adiw	r28, 0x09	; 9
   15c6c:	e3 e0       	ldi	r30, 0x03	; 3
   15c6e:	0c 94 03 e1 	jmp	0x1c206	; 0x1c206 <__epilogue_restores__+0x1e>

00015c72 <amigo_overflow_check>:
    }
/// @todo FIXME
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
    AMIGOs->dsj = 0;
    return(status & ERROR_MASK);
}
   15c72:	cf 92       	push	r12
   15c74:	df 92       	push	r13
   15c76:	ef 92       	push	r14
   15c78:	0f 93       	push	r16
   15c7a:	1f 93       	push	r17
   15c7c:	cf 93       	push	r28
   15c7e:	df 93       	push	r29
   15c80:	00 d0       	rcall	.+0      	; 0x15c82 <amigo_overflow_check+0x10>
   15c82:	00 d0       	rcall	.+0      	; 0x15c84 <amigo_overflow_check+0x12>
   15c84:	1f 92       	push	r1
   15c86:	ec 01       	movw	r28, r24
   15c88:	8b 01       	movw	r16, r22
   15c8a:	80 e0       	ldi	r24, 0x00	; 0
   15c8c:	90 e0       	ldi	r25, 0x00	; 0
   15c8e:	27 eb       	ldi	r18, 0xB7	; 183
   15c90:	3c e2       	ldi	r19, 0x2C	; 44
   15c92:	69 01       	movw	r12, r18
   15c94:	e1 2c       	mov	r14, r1
   15c96:	2d 81       	ldd	r18, Y+5	; 0x05
   15c98:	30 e0       	ldi	r19, 0x00	; 0
   15c9a:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   15c9e:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   15ca2:	40 85       	ldd	r20, Z+8	; 0x08
   15ca4:	51 85       	ldd	r21, Z+9	; 0x09
   15ca6:	24 17       	cp	r18, r20
   15ca8:	35 07       	cpc	r19, r21
   15caa:	64 f1       	brlt	.+88     	; 0x15d04 <amigo_overflow_check+0x92>
   15cac:	1d 82       	std	Y+5, r1	; 0x05
   15cae:	2c 81       	ldd	r18, Y+4	; 0x04
   15cb0:	2f 5f       	subi	r18, 0xFF	; 255
   15cb2:	2c 83       	std	Y+4, r18	; 0x04
   15cb4:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   15cb8:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   15cbc:	2c 81       	ldd	r18, Y+4	; 0x04
   15cbe:	30 e0       	ldi	r19, 0x00	; 0
   15cc0:	42 85       	ldd	r20, Z+10	; 0x0a
   15cc2:	53 85       	ldd	r21, Z+11	; 0x0b
   15cc4:	24 17       	cp	r18, r20
   15cc6:	35 07       	cpc	r19, r21
   15cc8:	34 f3       	brlt	.-52     	; 0x15c96 <amigo_overflow_check+0x24>
   15cca:	1c 82       	std	Y+4, r1	; 0x04
   15ccc:	2b 81       	ldd	r18, Y+3	; 0x03
   15cce:	2f 5f       	subi	r18, 0xFF	; 255
   15cd0:	2b 83       	std	Y+3, r18	; 0x03
   15cd2:	30 e0       	ldi	r19, 0x00	; 0
   15cd4:	44 85       	ldd	r20, Z+12	; 0x0c
   15cd6:	55 85       	ldd	r21, Z+13	; 0x0d
   15cd8:	24 17       	cp	r18, r20
   15cda:	35 07       	cpc	r19, r21
   15cdc:	5c f3       	brlt	.-42     	; 0x15cb4 <amigo_overflow_check+0x42>
   15cde:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15ce2:	80 ff       	sbrs	r24, 0
   15ce4:	0c c0       	rjmp	.+24     	; 0x15cfe <amigo_overflow_check+0x8c>
   15ce6:	01 15       	cp	r16, r1
   15ce8:	11 05       	cpc	r17, r1
   15cea:	49 f0       	breq	.+18     	; 0x15cfe <amigo_overflow_check+0x8c>
   15cec:	ed b7       	in	r30, 0x3d	; 61
   15cee:	fe b7       	in	r31, 0x3e	; 62
   15cf0:	15 83       	std	Z+5, r17	; 0x05
   15cf2:	04 83       	std	Z+4, r16	; 0x04
   15cf4:	c1 82       	std	Z+1, r12	; 0x01
   15cf6:	d2 82       	std	Z+2, r13	; 0x02
   15cf8:	e3 82       	std	Z+3, r14	; 0x03
   15cfa:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   15cfe:	81 e0       	ldi	r24, 0x01	; 1
   15d00:	90 e0       	ldi	r25, 0x00	; 0
   15d02:	d8 cf       	rjmp	.-80     	; 0x15cb4 <amigo_overflow_check+0x42>
   15d04:	0f 90       	pop	r0
   15d06:	0f 90       	pop	r0
   15d08:	0f 90       	pop	r0
   15d0a:	0f 90       	pop	r0
   15d0c:	0f 90       	pop	r0
   15d0e:	df 91       	pop	r29
   15d10:	cf 91       	pop	r28
   15d12:	1f 91       	pop	r17
   15d14:	0f 91       	pop	r16
   15d16:	ef 90       	pop	r14
   15d18:	df 90       	pop	r13
   15d1a:	cf 90       	pop	r12
   15d1c:	08 95       	ret

00015d1e <amigo_chs_to_logical>:
   15d1e:	a1 e1       	ldi	r26, 0x11	; 17
   15d20:	b0 e0       	ldi	r27, 0x00	; 0
   15d22:	e5 e9       	ldi	r30, 0x95	; 149
   15d24:	fe ea       	ldi	r31, 0xAE	; 174
   15d26:	0c 94 dc e0 	jmp	0x1c1b8	; 0x1c1b8 <__prologue_saves__+0x8>
   15d2a:	8b 01       	movw	r16, r22
   15d2c:	60 91 7f 19 	lds	r22, 0x197F	; 0x80197f <AMIGOp>
   15d30:	70 91 80 19 	lds	r23, 0x1980	; 0x801980 <AMIGOp+0x1>
   15d34:	fb 01       	movw	r30, r22
   15d36:	40 85       	ldd	r20, Z+8	; 0x08
   15d38:	51 85       	ldd	r21, Z+9	; 0x09
   15d3a:	fc 01       	movw	r30, r24
   15d3c:	c4 81       	ldd	r28, Z+4	; 0x04
   15d3e:	d0 e0       	ldi	r29, 0x00	; 0
   15d40:	4c 9f       	mul	r20, r28
   15d42:	90 01       	movw	r18, r0
   15d44:	4d 9f       	mul	r20, r29
   15d46:	30 0d       	add	r19, r0
   15d48:	5c 9f       	mul	r21, r28
   15d4a:	30 0d       	add	r19, r0
   15d4c:	11 24       	eor	r1, r1
   15d4e:	49 01       	movw	r8, r18
   15d50:	33 0f       	add	r19, r19
   15d52:	aa 08       	sbc	r10, r10
   15d54:	bb 08       	sbc	r11, r11
   15d56:	63 80       	ldd	r6, Z+3	; 0x03
   15d58:	71 2c       	mov	r7, r1
   15d5a:	fb 01       	movw	r30, r22
   15d5c:	e2 84       	ldd	r14, Z+10	; 0x0a
   15d5e:	f3 84       	ldd	r15, Z+11	; 0x0b
   15d60:	4e 9d       	mul	r20, r14
   15d62:	d0 01       	movw	r26, r0
   15d64:	4f 9d       	mul	r20, r15
   15d66:	b0 0d       	add	r27, r0
   15d68:	5e 9d       	mul	r21, r14
   15d6a:	b0 0d       	add	r27, r0
   15d6c:	11 24       	eor	r1, r1
   15d6e:	a6 9d       	mul	r26, r6
   15d70:	90 01       	movw	r18, r0
   15d72:	a7 9d       	mul	r26, r7
   15d74:	30 0d       	add	r19, r0
   15d76:	b6 9d       	mul	r27, r6
   15d78:	30 0d       	add	r19, r0
   15d7a:	11 24       	eor	r1, r1
   15d7c:	69 01       	movw	r12, r18
   15d7e:	33 0f       	add	r19, r19
   15d80:	ee 08       	sbc	r14, r14
   15d82:	ff 08       	sbc	r15, r15
   15d84:	8c 0c       	add	r8, r12
   15d86:	9d 1c       	adc	r9, r13
   15d88:	ae 1c       	adc	r10, r14
   15d8a:	bf 1c       	adc	r11, r15
   15d8c:	fc 01       	movw	r30, r24
   15d8e:	f5 80       	ldd	r15, Z+5	; 0x05
   15d90:	a5 01       	movw	r20, r10
   15d92:	94 01       	movw	r18, r8
   15d94:	2f 0d       	add	r18, r15
   15d96:	31 1d       	adc	r19, r1
   15d98:	41 1d       	adc	r20, r1
   15d9a:	51 1d       	adc	r21, r1
   15d9c:	fb 01       	movw	r30, r22
   15d9e:	a6 81       	ldd	r26, Z+6	; 0x06
   15da0:	b7 81       	ldd	r27, Z+7	; 0x07
   15da2:	0e 94 c2 e0 	call	0x1c184	; 0x1c184 <__mulshisi3>
   15da6:	4b 01       	movw	r8, r22
   15da8:	5c 01       	movw	r10, r24
   15daa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15dae:	85 ff       	sbrs	r24, 5
   15db0:	22 c0       	rjmp	.+68     	; 0x15df6 <amigo_chs_to_logical+0xd8>
   15db2:	8f 2d       	mov	r24, r15
   15db4:	90 e0       	ldi	r25, 0x00	; 0
   15db6:	ed b7       	in	r30, 0x3d	; 61
   15db8:	fe b7       	in	r31, 0x3e	; 62
   15dba:	91 8b       	std	Z+17, r25	; 0x11
   15dbc:	80 8b       	std	Z+16, r24	; 0x10
   15dbe:	d7 87       	std	Z+15, r29	; 0x0f
   15dc0:	c6 87       	std	Z+14, r28	; 0x0e
   15dc2:	75 86       	std	Z+13, r7	; 0x0d
   15dc4:	64 86       	std	Z+12, r6	; 0x0c
   15dc6:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   15dca:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   15dce:	81 81       	ldd	r24, Z+1	; 0x01
   15dd0:	90 e0       	ldi	r25, 0x00	; 0
   15dd2:	ed b7       	in	r30, 0x3d	; 61
   15dd4:	fe b7       	in	r31, 0x3e	; 62
   15dd6:	93 87       	std	Z+11, r25	; 0x0b
   15dd8:	82 87       	std	Z+10, r24	; 0x0a
   15dda:	86 82       	std	Z+6, r8	; 0x06
   15ddc:	97 82       	std	Z+7, r9	; 0x07
   15dde:	a0 86       	std	Z+8, r10	; 0x08
   15de0:	b1 86       	std	Z+9, r11	; 0x09
   15de2:	15 83       	std	Z+5, r17	; 0x05
   15de4:	04 83       	std	Z+4, r16	; 0x04
   15de6:	84 e6       	ldi	r24, 0x64	; 100
   15de8:	9c e2       	ldi	r25, 0x2C	; 44
   15dea:	a0 e0       	ldi	r26, 0x00	; 0
   15dec:	81 83       	std	Z+1, r24	; 0x01
   15dee:	92 83       	std	Z+2, r25	; 0x02
   15df0:	a3 83       	std	Z+3, r26	; 0x03
   15df2:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   15df6:	c5 01       	movw	r24, r10
   15df8:	b4 01       	movw	r22, r8
   15dfa:	cd b7       	in	r28, 0x3d	; 61
   15dfc:	de b7       	in	r29, 0x3e	; 62
   15dfe:	61 96       	adiw	r28, 0x11	; 17
   15e00:	ee e0       	ldi	r30, 0x0E	; 14
   15e02:	0c 94 f8 e0 	jmp	0x1c1f0	; 0x1c1f0 <__epilogue_restores__+0x8>

00015e06 <amigo_init>:
   15e06:	ef 92       	push	r14
   15e08:	ff 92       	push	r15
   15e0a:	0f 93       	push	r16
   15e0c:	1f 93       	push	r17
   15e0e:	cf 93       	push	r28
   15e10:	df 93       	push	r29
   15e12:	07 ee       	ldi	r16, 0xE7	; 231
   15e14:	10 e2       	ldi	r17, 0x20	; 32
   15e16:	cb e0       	ldi	r28, 0x0B	; 11
   15e18:	d0 e0       	ldi	r29, 0x00	; 0
   15e1a:	84 e0       	ldi	r24, 0x04	; 4
   15e1c:	f8 2e       	mov	r15, r24
   15e1e:	92 e0       	ldi	r25, 0x02	; 2
   15e20:	e9 2e       	mov	r14, r25
   15e22:	d8 01       	movw	r26, r16
   15e24:	8c 91       	ld	r24, X
   15e26:	81 30       	cpi	r24, 0x01	; 1
   15e28:	31 f5       	brne	.+76     	; 0x15e76 <amigo_init+0x70>
   15e2a:	ce 01       	movw	r24, r28
   15e2c:	0e 94 c1 95 	call	0x12b82	; 0x12b82 <set_active_device>
   15e30:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   15e34:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   15e38:	10 82       	st	Z, r1
   15e3a:	9f 01       	movw	r18, r30
   15e3c:	27 5f       	subi	r18, 0xF7	; 247
   15e3e:	3f 4f       	sbci	r19, 0xFF	; 255
   15e40:	d9 01       	movw	r26, r18
   15e42:	8f 2d       	mov	r24, r15
   15e44:	1d 92       	st	X+, r1
   15e46:	8a 95       	dec	r24
   15e48:	e9 f7       	brne	.-6      	; 0x15e44 <amigo_init+0x3e>
   15e4a:	2c 5f       	subi	r18, 0xFC	; 252
   15e4c:	3f 4f       	sbci	r19, 0xFF	; 255
   15e4e:	d9 01       	movw	r26, r18
   15e50:	8f 2d       	mov	r24, r15
   15e52:	1d 92       	st	X+, r1
   15e54:	8a 95       	dec	r24
   15e56:	e9 f7       	brne	.-6      	; 0x15e52 <amigo_init+0x4c>
   15e58:	11 82       	std	Z+1, r1	; 0x01
   15e5a:	15 82       	std	Z+5, r1	; 0x05
   15e5c:	14 82       	std	Z+4, r1	; 0x04
   15e5e:	13 82       	std	Z+3, r1	; 0x03
   15e60:	e6 82       	std	Z+6, r14	; 0x06
   15e62:	10 86       	std	Z+8, r1	; 0x08
   15e64:	17 82       	std	Z+7, r1	; 0x07
   15e66:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   15e6a:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   15e6e:	81 81       	ldd	r24, Z+1	; 0x01
   15e70:	90 e0       	ldi	r25, 0x00	; 0
   15e72:	0e 94 99 84 	call	0x10932	; 0x10932 <gpib_disable_PPR>
   15e76:	21 97       	sbiw	r28, 0x01	; 1
   15e78:	0b 52       	subi	r16, 0x2B	; 43
   15e7a:	11 09       	sbc	r17, r1
   15e7c:	cf 3f       	cpi	r28, 0xFF	; 255
   15e7e:	af ef       	ldi	r26, 0xFF	; 255
   15e80:	da 07       	cpc	r29, r26
   15e82:	79 f6       	brne	.-98     	; 0x15e22 <amigo_init+0x1c>
   15e84:	cd b7       	in	r28, 0x3d	; 61
   15e86:	de b7       	in	r29, 0x3e	; 62
   15e88:	e6 e0       	ldi	r30, 0x06	; 6
   15e8a:	0c 94 00 e1 	jmp	0x1c200	; 0x1c200 <__epilogue_restores__+0x18>

00015e8e <amigo_request_logical_address>:
   15e8e:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   15e92:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   15e96:	15 86       	std	Z+13, r1	; 0x0d
   15e98:	83 81       	ldd	r24, Z+3	; 0x03
   15e9a:	86 87       	std	Z+14, r24	; 0x0e
   15e9c:	84 81       	ldd	r24, Z+4	; 0x04
   15e9e:	87 87       	std	Z+15, r24	; 0x0f
   15ea0:	85 81       	ldd	r24, Z+5	; 0x05
   15ea2:	80 8b       	std	Z+16, r24	; 0x10
   15ea4:	80 e0       	ldi	r24, 0x00	; 0
   15ea6:	90 e0       	ldi	r25, 0x00	; 0
   15ea8:	08 95       	ret

00015eaa <amigo_request_status>:
   15eaa:	00 d0       	rcall	.+0      	; 0x15eac <amigo_request_status+0x2>
   15eac:	1f 92       	push	r1
   15eae:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15eb2:	85 ff       	sbrs	r24, 5
   15eb4:	0a c0       	rjmp	.+20     	; 0x15eca <amigo_request_status+0x20>
   15eb6:	87 e3       	ldi	r24, 0x37	; 55
   15eb8:	9d e2       	ldi	r25, 0x2D	; 45
   15eba:	a0 e0       	ldi	r26, 0x00	; 0
   15ebc:	ed b7       	in	r30, 0x3d	; 61
   15ebe:	fe b7       	in	r31, 0x3e	; 62
   15ec0:	81 83       	std	Z+1, r24	; 0x01
   15ec2:	92 83       	std	Z+2, r25	; 0x02
   15ec4:	a3 83       	std	Z+3, r26	; 0x03
   15ec6:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   15eca:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   15ece:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   15ed2:	11 86       	std	Z+9, r1	; 0x09
   15ed4:	81 81       	ldd	r24, Z+1	; 0x01
   15ed6:	82 87       	std	Z+10, r24	; 0x0a
   15ed8:	8d e0       	ldi	r24, 0x0D	; 13
   15eda:	83 87       	std	Z+11, r24	; 0x0b
   15edc:	14 86       	std	Z+12, r1	; 0x0c
   15ede:	0e 94 53 6e 	call	0xdca6	; 0xdca6 <mmc_wp_status>
   15ee2:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   15ee6:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   15eea:	89 2b       	or	r24, r25
   15eec:	19 f0       	breq	.+6      	; 0x15ef4 <amigo_request_status+0x4a>
   15eee:	84 85       	ldd	r24, Z+12	; 0x0c
   15ef0:	80 66       	ori	r24, 0x60	; 96
   15ef2:	84 87       	std	Z+12, r24	; 0x0c
   15ef4:	86 81       	ldd	r24, Z+6	; 0x06
   15ef6:	82 30       	cpi	r24, 0x02	; 2
   15ef8:	31 f4       	brne	.+12     	; 0x15f06 <amigo_request_status+0x5c>
   15efa:	83 e1       	ldi	r24, 0x13	; 19
   15efc:	81 87       	std	Z+9, r24	; 0x09
   15efe:	84 85       	ldd	r24, Z+12	; 0x0c
   15f00:	88 60       	ori	r24, 0x08	; 8
   15f02:	84 87       	std	Z+12, r24	; 0x0c
   15f04:	21 c0       	rjmp	.+66     	; 0x15f48 <amigo_request_status+0x9e>
   15f06:	27 81       	ldd	r18, Z+7	; 0x07
   15f08:	30 85       	ldd	r19, Z+8	; 0x08
   15f0a:	21 15       	cp	r18, r1
   15f0c:	31 05       	cpc	r19, r1
   15f0e:	11 f4       	brne	.+4      	; 0x15f14 <amigo_request_status+0x6a>
   15f10:	81 30       	cpi	r24, 0x01	; 1
   15f12:	d1 f4       	brne	.+52     	; 0x15f48 <amigo_request_status+0x9e>
   15f14:	26 fd       	sbrc	r18, 6
   15f16:	0c c0       	rjmp	.+24     	; 0x15f30 <amigo_request_status+0x86>
   15f18:	25 ff       	sbrs	r18, 5
   15f1a:	03 c0       	rjmp	.+6      	; 0x15f22 <amigo_request_status+0x78>
   15f1c:	8a e0       	ldi	r24, 0x0A	; 10
   15f1e:	81 87       	std	Z+9, r24	; 0x09
   15f20:	0d c0       	rjmp	.+26     	; 0x15f3c <amigo_request_status+0x92>
   15f22:	84 85       	ldd	r24, Z+12	; 0x0c
   15f24:	24 ff       	sbrs	r18, 4
   15f26:	02 c0       	rjmp	.+4      	; 0x15f2c <amigo_request_status+0x82>
   15f28:	83 60       	ori	r24, 0x03	; 3
   15f2a:	07 c0       	rjmp	.+14     	; 0x15f3a <amigo_request_status+0x90>
   15f2c:	21 ff       	sbrs	r18, 1
   15f2e:	02 c0       	rjmp	.+4      	; 0x15f34 <amigo_request_status+0x8a>
   15f30:	83 e1       	ldi	r24, 0x13	; 19
   15f32:	f5 cf       	rjmp	.-22     	; 0x15f1e <amigo_request_status+0x74>
   15f34:	22 ff       	sbrs	r18, 2
   15f36:	02 c0       	rjmp	.+4      	; 0x15f3c <amigo_request_status+0x92>
   15f38:	84 60       	ori	r24, 0x04	; 4
   15f3a:	84 87       	std	Z+12, r24	; 0x0c
   15f3c:	84 85       	ldd	r24, Z+12	; 0x0c
   15f3e:	80 61       	ori	r24, 0x10	; 16
   15f40:	84 87       	std	Z+12, r24	; 0x0c
   15f42:	83 85       	ldd	r24, Z+11	; 0x0b
   15f44:	80 68       	ori	r24, 0x80	; 128
   15f46:	83 87       	std	Z+11, r24	; 0x0b
   15f48:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   15f4c:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   15f50:	81 81       	ldd	r24, Z+1	; 0x01
   15f52:	90 e0       	ldi	r25, 0x00	; 0
   15f54:	0e 94 63 84 	call	0x108c6	; 0x108c6 <gpib_enable_PPR>
   15f58:	80 e0       	ldi	r24, 0x00	; 0
   15f5a:	90 e0       	ldi	r25, 0x00	; 0
   15f5c:	0f 90       	pop	r0
   15f5e:	0f 90       	pop	r0
   15f60:	0f 90       	pop	r0
   15f62:	08 95       	ret

00015f64 <amigo_send_logical_address>:
   15f64:	a5 e0       	ldi	r26, 0x05	; 5
   15f66:	b0 e0       	ldi	r27, 0x00	; 0
   15f68:	e8 eb       	ldi	r30, 0xB8	; 184
   15f6a:	ff ea       	ldi	r31, 0xAF	; 175
   15f6c:	0c 94 e8 e0 	jmp	0x1c1d0	; 0x1c1d0 <__prologue_saves__+0x20>
   15f70:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15f74:	85 ff       	sbrs	r24, 5
   15f76:	0a c0       	rjmp	.+20     	; 0x15f8c <amigo_send_logical_address+0x28>
   15f78:	89 e1       	ldi	r24, 0x19	; 25
   15f7a:	9d e2       	ldi	r25, 0x2D	; 45
   15f7c:	a0 e0       	ldi	r26, 0x00	; 0
   15f7e:	ed b7       	in	r30, 0x3d	; 61
   15f80:	fe b7       	in	r31, 0x3e	; 62
   15f82:	81 83       	std	Z+1, r24	; 0x01
   15f84:	92 83       	std	Z+2, r25	; 0x02
   15f86:	a3 83       	std	Z+3, r26	; 0x03
   15f88:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   15f8c:	80 e0       	ldi	r24, 0x00	; 0
   15f8e:	91 e0       	ldi	r25, 0x01	; 1
   15f90:	9d 83       	std	Y+5, r25	; 0x05
   15f92:	8c 83       	std	Y+4, r24	; 0x04
   15f94:	80 91 7d 19 	lds	r24, 0x197D	; 0x80197d <AMIGOs>
   15f98:	90 91 7e 19 	lds	r25, 0x197E	; 0x80197e <AMIGOs+0x1>
   15f9c:	ae 01       	movw	r20, r28
   15f9e:	4c 5f       	subi	r20, 0xFC	; 252
   15fa0:	5f 4f       	sbci	r21, 0xFF	; 255
   15fa2:	64 e0       	ldi	r22, 0x04	; 4
   15fa4:	70 e0       	ldi	r23, 0x00	; 0
   15fa6:	0d 96       	adiw	r24, 0x0d	; 13
   15fa8:	0e 94 f3 89 	call	0x113e6	; 0x113e6 <gpib_write_str>
   15fac:	2c 81       	ldd	r18, Y+4	; 0x04
   15fae:	3d 81       	ldd	r19, Y+5	; 0x05
   15fb0:	22 27       	eor	r18, r18
   15fb2:	30 7d       	andi	r19, 0xD0	; 208
   15fb4:	23 2b       	or	r18, r19
   15fb6:	49 f0       	breq	.+18     	; 0x15fca <amigo_send_logical_address+0x66>
   15fb8:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   15fbc:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   15fc0:	27 81       	ldd	r18, Z+7	; 0x07
   15fc2:	30 85       	ldd	r19, Z+8	; 0x08
   15fc4:	20 62       	ori	r18, 0x20	; 32
   15fc6:	30 87       	std	Z+8, r19	; 0x08
   15fc8:	27 83       	std	Z+7, r18	; 0x07
   15fca:	04 97       	sbiw	r24, 0x04	; 4
   15fcc:	c9 f0       	breq	.+50     	; 0x16000 <amigo_send_logical_address+0x9c>
   15fce:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   15fd2:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   15fd6:	87 81       	ldd	r24, Z+7	; 0x07
   15fd8:	90 85       	ldd	r25, Z+8	; 0x08
   15fda:	80 62       	ori	r24, 0x20	; 32
   15fdc:	90 87       	std	Z+8, r25	; 0x08
   15fde:	87 83       	std	Z+7, r24	; 0x07
   15fe0:	81 e0       	ldi	r24, 0x01	; 1
   15fe2:	86 83       	std	Z+6, r24	; 0x06
   15fe4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   15fe8:	80 ff       	sbrs	r24, 0
   15fea:	0a c0       	rjmp	.+20     	; 0x16000 <amigo_send_logical_address+0x9c>
   15fec:	8f ef       	ldi	r24, 0xFF	; 255
   15fee:	9c e2       	ldi	r25, 0x2C	; 44
   15ff0:	a0 e0       	ldi	r26, 0x00	; 0
   15ff2:	ed b7       	in	r30, 0x3d	; 61
   15ff4:	fe b7       	in	r31, 0x3e	; 62
   15ff6:	81 83       	std	Z+1, r24	; 0x01
   15ff8:	92 83       	std	Z+2, r25	; 0x02
   15ffa:	a3 83       	std	Z+3, r26	; 0x03
   15ffc:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   16000:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   16004:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   16008:	81 81       	ldd	r24, Z+1	; 0x01
   1600a:	90 e0       	ldi	r25, 0x00	; 0
   1600c:	0e 94 63 84 	call	0x108c6	; 0x108c6 <gpib_enable_PPR>
   16010:	8c 81       	ldd	r24, Y+4	; 0x04
   16012:	9d 81       	ldd	r25, Y+5	; 0x05
   16014:	88 27       	eor	r24, r24
   16016:	90 7d       	andi	r25, 0xD0	; 208
   16018:	25 96       	adiw	r28, 0x05	; 5
   1601a:	e2 e0       	ldi	r30, 0x02	; 2
   1601c:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

00016020 <amigo_send_status>:
   16020:	a5 e0       	ldi	r26, 0x05	; 5
   16022:	b0 e0       	ldi	r27, 0x00	; 0
   16024:	e6 e1       	ldi	r30, 0x16	; 22
   16026:	f0 eb       	ldi	r31, 0xB0	; 176
   16028:	0c 94 e8 e0 	jmp	0x1c1d0	; 0x1c1d0 <__prologue_saves__+0x20>
   1602c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16030:	85 ff       	sbrs	r24, 5
   16032:	0a c0       	rjmp	.+20     	; 0x16048 <amigo_send_status+0x28>
   16034:	8a ee       	ldi	r24, 0xEA	; 234
   16036:	9c e2       	ldi	r25, 0x2C	; 44
   16038:	a0 e0       	ldi	r26, 0x00	; 0
   1603a:	ed b7       	in	r30, 0x3d	; 61
   1603c:	fe b7       	in	r31, 0x3e	; 62
   1603e:	81 83       	std	Z+1, r24	; 0x01
   16040:	92 83       	std	Z+2, r25	; 0x02
   16042:	a3 83       	std	Z+3, r26	; 0x03
   16044:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   16048:	80 e0       	ldi	r24, 0x00	; 0
   1604a:	91 e0       	ldi	r25, 0x01	; 1
   1604c:	9d 83       	std	Y+5, r25	; 0x05
   1604e:	8c 83       	std	Y+4, r24	; 0x04
   16050:	80 91 7d 19 	lds	r24, 0x197D	; 0x80197d <AMIGOs>
   16054:	90 91 7e 19 	lds	r25, 0x197E	; 0x80197e <AMIGOs+0x1>
   16058:	ae 01       	movw	r20, r28
   1605a:	4c 5f       	subi	r20, 0xFC	; 252
   1605c:	5f 4f       	sbci	r21, 0xFF	; 255
   1605e:	64 e0       	ldi	r22, 0x04	; 4
   16060:	70 e0       	ldi	r23, 0x00	; 0
   16062:	09 96       	adiw	r24, 0x09	; 9
   16064:	0e 94 f3 89 	call	0x113e6	; 0x113e6 <gpib_write_str>
   16068:	2c 81       	ldd	r18, Y+4	; 0x04
   1606a:	3d 81       	ldd	r19, Y+5	; 0x05
   1606c:	22 27       	eor	r18, r18
   1606e:	30 7d       	andi	r19, 0xD0	; 208
   16070:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   16074:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   16078:	23 2b       	or	r18, r19
   1607a:	29 f0       	breq	.+10     	; 0x16086 <amigo_send_status+0x66>
   1607c:	27 81       	ldd	r18, Z+7	; 0x07
   1607e:	30 85       	ldd	r19, Z+8	; 0x08
   16080:	20 62       	ori	r18, 0x20	; 32
   16082:	30 87       	std	Z+8, r19	; 0x08
   16084:	27 83       	std	Z+7, r18	; 0x07
   16086:	04 97       	sbiw	r24, 0x04	; 4
   16088:	b1 f0       	breq	.+44     	; 0x160b6 <amigo_send_status+0x96>
   1608a:	87 81       	ldd	r24, Z+7	; 0x07
   1608c:	90 85       	ldd	r25, Z+8	; 0x08
   1608e:	80 62       	ori	r24, 0x20	; 32
   16090:	90 87       	std	Z+8, r25	; 0x08
   16092:	87 83       	std	Z+7, r24	; 0x07
   16094:	81 e0       	ldi	r24, 0x01	; 1
   16096:	86 83       	std	Z+6, r24	; 0x06
   16098:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1609c:	80 ff       	sbrs	r24, 0
   1609e:	0e c0       	rjmp	.+28     	; 0x160bc <amigo_send_status+0x9c>
   160a0:	80 ed       	ldi	r24, 0xD0	; 208
   160a2:	9c e2       	ldi	r25, 0x2C	; 44
   160a4:	a0 e0       	ldi	r26, 0x00	; 0
   160a6:	ed b7       	in	r30, 0x3d	; 61
   160a8:	fe b7       	in	r31, 0x3e	; 62
   160aa:	81 83       	std	Z+1, r24	; 0x01
   160ac:	92 83       	std	Z+2, r25	; 0x02
   160ae:	a3 83       	std	Z+3, r26	; 0x03
   160b0:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   160b4:	03 c0       	rjmp	.+6      	; 0x160bc <amigo_send_status+0x9c>
   160b6:	10 86       	std	Z+8, r1	; 0x08
   160b8:	17 82       	std	Z+7, r1	; 0x07
   160ba:	16 82       	std	Z+6, r1	; 0x06
   160bc:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   160c0:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   160c4:	81 81       	ldd	r24, Z+1	; 0x01
   160c6:	90 e0       	ldi	r25, 0x00	; 0
   160c8:	0e 94 63 84 	call	0x108c6	; 0x108c6 <gpib_enable_PPR>
   160cc:	8c 81       	ldd	r24, Y+4	; 0x04
   160ce:	9d 81       	ldd	r25, Y+5	; 0x05
   160d0:	88 27       	eor	r24, r24
   160d2:	90 7d       	andi	r25, 0xD0	; 208
   160d4:	25 96       	adiw	r28, 0x05	; 5
   160d6:	e2 e0       	ldi	r30, 0x02	; 2
   160d8:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

000160dc <amigo_increment>:
   160dc:	a1 e1       	ldi	r26, 0x11	; 17
   160de:	b0 e0       	ldi	r27, 0x00	; 0
   160e0:	e4 e7       	ldi	r30, 0x74	; 116
   160e2:	f0 eb       	ldi	r31, 0xB0	; 176
   160e4:	0c 94 e8 e0 	jmp	0x1c1d0	; 0x1c1d0 <__prologue_saves__+0x20>
   160e8:	bc 01       	movw	r22, r24
   160ea:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   160ee:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   160f2:	91 e1       	ldi	r25, 0x11	; 17
   160f4:	de 01       	movw	r26, r28
   160f6:	11 96       	adiw	r26, 0x01	; 1
   160f8:	01 90       	ld	r0, Z+
   160fa:	0d 92       	st	X+, r0
   160fc:	9a 95       	dec	r25
   160fe:	e1 f7       	brne	.-8      	; 0x160f8 <amigo_increment+0x1c>
   16100:	9e 81       	ldd	r25, Y+6	; 0x06
   16102:	9f 5f       	subi	r25, 0xFF	; 255
   16104:	9e 83       	std	Y+6, r25	; 0x06
   16106:	ce 01       	movw	r24, r28
   16108:	01 96       	adiw	r24, 0x01	; 1
   1610a:	b3 dd       	rcall	.-1178   	; 0x15c72 <amigo_overflow_check>
   1610c:	00 97       	sbiw	r24, 0x00	; 0
   1610e:	59 f4       	brne	.+22     	; 0x16126 <amigo_increment+0x4a>
   16110:	a0 91 7d 19 	lds	r26, 0x197D	; 0x80197d <AMIGOs>
   16114:	b0 91 7e 19 	lds	r27, 0x197E	; 0x80197e <AMIGOs+0x1>
   16118:	21 e1       	ldi	r18, 0x11	; 17
   1611a:	fe 01       	movw	r30, r28
   1611c:	31 96       	adiw	r30, 0x01	; 1
   1611e:	01 90       	ld	r0, Z+
   16120:	0d 92       	st	X+, r0
   16122:	2a 95       	dec	r18
   16124:	e1 f7       	brne	.-8      	; 0x1611e <amigo_increment+0x42>
   16126:	61 96       	adiw	r28, 0x11	; 17
   16128:	e2 e0       	ldi	r30, 0x02	; 2
   1612a:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

0001612e <amigo_seek>:
   1612e:	0f 93       	push	r16
   16130:	1f 93       	push	r17
   16132:	cf 93       	push	r28
   16134:	df 93       	push	r29
   16136:	ec 01       	movw	r28, r24
   16138:	60 e9       	ldi	r22, 0x90	; 144
   1613a:	75 e1       	ldi	r23, 0x15	; 21
   1613c:	9a dd       	rcall	.-1228   	; 0x15c72 <amigo_overflow_check>
   1613e:	8c 01       	movw	r16, r24
   16140:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   16144:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   16148:	89 2b       	or	r24, r25
   1614a:	41 f0       	breq	.+16     	; 0x1615c <amigo_seek+0x2e>
   1614c:	81 e0       	ldi	r24, 0x01	; 1
   1614e:	86 83       	std	Z+6, r24	; 0x06
   16150:	87 81       	ldd	r24, Z+7	; 0x07
   16152:	90 85       	ldd	r25, Z+8	; 0x08
   16154:	84 60       	ori	r24, 0x04	; 4
   16156:	90 87       	std	Z+8, r25	; 0x08
   16158:	87 83       	std	Z+7, r24	; 0x07
   1615a:	06 c0       	rjmp	.+12     	; 0x16168 <amigo_seek+0x3a>
   1615c:	8d 81       	ldd	r24, Y+5	; 0x05
   1615e:	85 83       	std	Z+5, r24	; 0x05
   16160:	8c 81       	ldd	r24, Y+4	; 0x04
   16162:	84 83       	std	Z+4, r24	; 0x04
   16164:	8b 81       	ldd	r24, Y+3	; 0x03
   16166:	83 83       	std	Z+3, r24	; 0x03
   16168:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   1616c:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   16170:	81 81       	ldd	r24, Z+1	; 0x01
   16172:	90 e0       	ldi	r25, 0x00	; 0
   16174:	0e 94 63 84 	call	0x108c6	; 0x108c6 <gpib_enable_PPR>
   16178:	c8 01       	movw	r24, r16
   1617a:	df 91       	pop	r29
   1617c:	cf 91       	pop	r28
   1617e:	1f 91       	pop	r17
   16180:	0f 91       	pop	r16
   16182:	08 95       	ret

00016184 <amigo_verify>:
   16184:	8f 92       	push	r8
   16186:	9f 92       	push	r9
   16188:	af 92       	push	r10
   1618a:	bf 92       	push	r11
   1618c:	ef 92       	push	r14
   1618e:	ff 92       	push	r15
   16190:	0f 93       	push	r16
   16192:	1f 93       	push	r17
   16194:	cf 93       	push	r28
   16196:	df 93       	push	r29
   16198:	ad b7       	in	r26, 0x3d	; 61
   1619a:	be b7       	in	r27, 0x3e	; 62
   1619c:	19 97       	sbiw	r26, 0x09	; 9
   1619e:	0f b6       	in	r0, 0x3f	; 63
   161a0:	f8 94       	cli
   161a2:	be bf       	out	0x3e, r27	; 62
   161a4:	0f be       	out	0x3f, r0	; 63
   161a6:	ad bf       	out	0x3d, r26	; 61
   161a8:	7c 01       	movw	r14, r24
   161aa:	65 e9       	ldi	r22, 0x95	; 149
   161ac:	75 e1       	ldi	r23, 0x15	; 21
   161ae:	80 91 7d 19 	lds	r24, 0x197D	; 0x80197d <AMIGOs>
   161b2:	90 91 7e 19 	lds	r25, 0x197E	; 0x80197e <AMIGOs+0x1>
   161b6:	b3 dd       	rcall	.-1178   	; 0x15d1e <amigo_chs_to_logical>
   161b8:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   161bc:	25 ff       	sbrs	r18, 5
   161be:	10 c0       	rjmp	.+32     	; 0x161e0 <amigo_verify+0x5c>
   161c0:	ed b7       	in	r30, 0x3d	; 61
   161c2:	fe b7       	in	r31, 0x3e	; 62
   161c4:	e0 86       	std	Z+8, r14	; 0x08
   161c6:	f1 86       	std	Z+9, r15	; 0x09
   161c8:	64 83       	std	Z+4, r22	; 0x04
   161ca:	75 83       	std	Z+5, r23	; 0x05
   161cc:	86 83       	std	Z+6, r24	; 0x06
   161ce:	97 83       	std	Z+7, r25	; 0x07
   161d0:	8f e8       	ldi	r24, 0x8F	; 143
   161d2:	9c e2       	ldi	r25, 0x2C	; 44
   161d4:	a0 e0       	ldi	r26, 0x00	; 0
   161d6:	81 83       	std	Z+1, r24	; 0x01
   161d8:	92 83       	std	Z+2, r25	; 0x02
   161da:	a3 83       	std	Z+3, r26	; 0x03
   161dc:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   161e0:	e7 01       	movw	r28, r14
   161e2:	20 97       	sbiw	r28, 0x00	; 0
   161e4:	09 f4       	brne	.+2      	; 0x161e8 <amigo_verify+0x64>
   161e6:	49 c0       	rjmp	.+146    	; 0x1627a <amigo_verify+0xf6>
   161e8:	62 ea       	ldi	r22, 0xA2	; 162
   161ea:	75 e1       	ldi	r23, 0x15	; 21
   161ec:	80 91 7d 19 	lds	r24, 0x197D	; 0x80197d <AMIGOs>
   161f0:	90 91 7e 19 	lds	r25, 0x197E	; 0x80197e <AMIGOs+0x1>
   161f4:	94 dd       	rcall	.-1240   	; 0x15d1e <amigo_chs_to_logical>
   161f6:	4b 01       	movw	r8, r22
   161f8:	5c 01       	movw	r10, r24
   161fa:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   161fe:	86 fd       	sbrc	r24, 6
   16200:	0e 94 a1 83 	call	0x10742	; 0x10742 <gpib_timer_elapsed_begin>
   16204:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   16208:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   1620c:	e0 90 7d 19 	lds	r14, 0x197D	; 0x80197d <AMIGOs>
   16210:	f0 90 7e 19 	lds	r15, 0x197E	; 0x80197e <AMIGOs+0x1>
   16214:	87 e0       	ldi	r24, 0x07	; 7
   16216:	e8 0e       	add	r14, r24
   16218:	f1 1c       	adc	r15, r1
   1621a:	06 81       	ldd	r16, Z+6	; 0x06
   1621c:	17 81       	ldd	r17, Z+7	; 0x07
   1621e:	24 e0       	ldi	r18, 0x04	; 4
   16220:	3d e1       	ldi	r19, 0x1D	; 29
   16222:	b5 01       	movw	r22, r10
   16224:	a4 01       	movw	r20, r8
   16226:	82 81       	ldd	r24, Z+2	; 0x02
   16228:	93 81       	ldd	r25, Z+3	; 0x03
   1622a:	0e 94 f3 82 	call	0x105e6	; 0x105e6 <dbf_open_read>
   1622e:	7c 01       	movw	r14, r24
   16230:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16234:	86 ff       	sbrs	r24, 6
   16236:	04 c0       	rjmp	.+8      	; 0x16240 <amigo_verify+0xbc>
   16238:	89 ea       	ldi	r24, 0xA9	; 169
   1623a:	90 e1       	ldi	r25, 0x10	; 16
   1623c:	0e 94 b3 83 	call	0x10766	; 0x10766 <gpib_timer_elapsed_end>
   16240:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   16244:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   16248:	86 81       	ldd	r24, Z+6	; 0x06
   1624a:	97 81       	ldd	r25, Z+7	; 0x07
   1624c:	e8 16       	cp	r14, r24
   1624e:	f9 06       	cpc	r15, r25
   16250:	61 f0       	breq	.+24     	; 0x1626a <amigo_verify+0xe6>
   16252:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   16256:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   1625a:	81 e0       	ldi	r24, 0x01	; 1
   1625c:	86 83       	std	Z+6, r24	; 0x06
   1625e:	87 81       	ldd	r24, Z+7	; 0x07
   16260:	90 85       	ldd	r25, Z+8	; 0x08
   16262:	81 60       	ori	r24, 0x01	; 1
   16264:	90 87       	std	Z+8, r25	; 0x08
   16266:	87 83       	std	Z+7, r24	; 0x07
   16268:	0b c0       	rjmp	.+22     	; 0x16280 <amigo_verify+0xfc>
   1626a:	8a ea       	ldi	r24, 0xAA	; 170
   1626c:	95 e1       	ldi	r25, 0x15	; 21
   1626e:	36 df       	rcall	.-404    	; 0x160dc <amigo_increment>
   16270:	21 97       	sbiw	r28, 0x01	; 1
   16272:	89 2b       	or	r24, r25
   16274:	09 f4       	brne	.+2      	; 0x16278 <amigo_verify+0xf4>
   16276:	b5 cf       	rjmp	.-150    	; 0x161e2 <amigo_verify+0x5e>
   16278:	03 c0       	rjmp	.+6      	; 0x16280 <amigo_verify+0xfc>
   1627a:	c0 e0       	ldi	r28, 0x00	; 0
   1627c:	d0 e0       	ldi	r29, 0x00	; 0
   1627e:	02 c0       	rjmp	.+4      	; 0x16284 <amigo_verify+0x100>
   16280:	c1 e0       	ldi	r28, 0x01	; 1
   16282:	d0 e0       	ldi	r29, 0x00	; 0
   16284:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   16288:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   1628c:	81 81       	ldd	r24, Z+1	; 0x01
   1628e:	90 e0       	ldi	r25, 0x00	; 0
   16290:	0e 94 63 84 	call	0x108c6	; 0x108c6 <gpib_enable_PPR>
   16294:	ce 01       	movw	r24, r28
   16296:	ad b7       	in	r26, 0x3d	; 61
   16298:	be b7       	in	r27, 0x3e	; 62
   1629a:	19 96       	adiw	r26, 0x09	; 9
   1629c:	0f b6       	in	r0, 0x3f	; 63
   1629e:	f8 94       	cli
   162a0:	be bf       	out	0x3e, r27	; 62
   162a2:	0f be       	out	0x3f, r0	; 63
   162a4:	ad bf       	out	0x3d, r26	; 61
   162a6:	df 91       	pop	r29
   162a8:	cf 91       	pop	r28
   162aa:	1f 91       	pop	r17
   162ac:	0f 91       	pop	r16
   162ae:	ff 90       	pop	r15
   162b0:	ef 90       	pop	r14
   162b2:	bf 90       	pop	r11
   162b4:	af 90       	pop	r10
   162b6:	9f 90       	pop	r9
   162b8:	8f 90       	pop	r8
   162ba:	08 95       	ret

000162bc <amigo_format>:
   162bc:	ef 92       	push	r14
   162be:	ff 92       	push	r15
   162c0:	0f 93       	push	r16
   162c2:	1f 93       	push	r17
   162c4:	cf 93       	push	r28
   162c6:	df 93       	push	r29
   162c8:	00 d0       	rcall	.+0      	; 0x162ca <amigo_format+0xe>
   162ca:	1f 92       	push	r1
   162cc:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   162d0:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   162d4:	15 82       	std	Z+5, r1	; 0x05
   162d6:	14 82       	std	Z+4, r1	; 0x04
   162d8:	13 82       	std	Z+3, r1	; 0x03
   162da:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   162de:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   162e2:	46 81       	ldd	r20, Z+6	; 0x06
   162e4:	57 81       	ldd	r21, Z+7	; 0x07
   162e6:	68 2f       	mov	r22, r24
   162e8:	70 e0       	ldi	r23, 0x00	; 0
   162ea:	84 e0       	ldi	r24, 0x04	; 4
   162ec:	9d e1       	ldi	r25, 0x1D	; 29
   162ee:	0e 94 d0 e4 	call	0x1c9a0	; 0x1c9a0 <memset>
   162f2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   162f6:	85 ff       	sbrs	r24, 5
   162f8:	0a c0       	rjmp	.+20     	; 0x1630e <amigo_format+0x52>
   162fa:	84 e5       	ldi	r24, 0x54	; 84
   162fc:	9c e2       	ldi	r25, 0x2C	; 44
   162fe:	a0 e0       	ldi	r26, 0x00	; 0
   16300:	ed b7       	in	r30, 0x3d	; 61
   16302:	fe b7       	in	r31, 0x3e	; 62
   16304:	81 83       	std	Z+1, r24	; 0x01
   16306:	92 83       	std	Z+2, r25	; 0x02
   16308:	a3 83       	std	Z+3, r26	; 0x03
   1630a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1630e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16312:	86 fd       	sbrc	r24, 6
   16314:	0e 94 a1 83 	call	0x10742	; 0x10742 <gpib_timer_elapsed_begin>
   16318:	61 eb       	ldi	r22, 0xB1	; 177
   1631a:	75 e1       	ldi	r23, 0x15	; 21
   1631c:	80 91 7d 19 	lds	r24, 0x197D	; 0x80197d <AMIGOs>
   16320:	90 91 7e 19 	lds	r25, 0x197E	; 0x80197e <AMIGOs+0x1>
   16324:	fc dc       	rcall	.-1544   	; 0x15d1e <amigo_chs_to_logical>
   16326:	ab 01       	movw	r20, r22
   16328:	bc 01       	movw	r22, r24
   1632a:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   1632e:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   16332:	e0 90 7d 19 	lds	r14, 0x197D	; 0x80197d <AMIGOs>
   16336:	f0 90 7e 19 	lds	r15, 0x197E	; 0x80197e <AMIGOs+0x1>
   1633a:	87 e0       	ldi	r24, 0x07	; 7
   1633c:	e8 0e       	add	r14, r24
   1633e:	f1 1c       	adc	r15, r1
   16340:	06 81       	ldd	r16, Z+6	; 0x06
   16342:	17 81       	ldd	r17, Z+7	; 0x07
   16344:	24 e0       	ldi	r18, 0x04	; 4
   16346:	3d e1       	ldi	r19, 0x1D	; 29
   16348:	82 81       	ldd	r24, Z+2	; 0x02
   1634a:	93 81       	ldd	r25, Z+3	; 0x03
   1634c:	0e 94 4a 83 	call	0x10694	; 0x10694 <dbf_open_write>
   16350:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   16354:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   16358:	26 81       	ldd	r18, Z+6	; 0x06
   1635a:	37 81       	ldd	r19, Z+7	; 0x07
   1635c:	82 17       	cp	r24, r18
   1635e:	93 07       	cpc	r25, r19
   16360:	71 f0       	breq	.+28     	; 0x1637e <amigo_format+0xc2>
   16362:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   16366:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   1636a:	87 81       	ldd	r24, Z+7	; 0x07
   1636c:	90 85       	ldd	r25, Z+8	; 0x08
   1636e:	82 60       	ori	r24, 0x02	; 2
   16370:	90 87       	std	Z+8, r25	; 0x08
   16372:	87 83       	std	Z+7, r24	; 0x07
   16374:	81 e0       	ldi	r24, 0x01	; 1
   16376:	86 83       	std	Z+6, r24	; 0x06
   16378:	c1 e0       	ldi	r28, 0x01	; 1
   1637a:	d0 e0       	ldi	r29, 0x00	; 0
   1637c:	0f c0       	rjmp	.+30     	; 0x1639c <amigo_format+0xe0>
   1637e:	80 e0       	ldi	r24, 0x00	; 0
   16380:	90 e0       	ldi	r25, 0x00	; 0
   16382:	ac de       	rcall	.-680    	; 0x160dc <amigo_increment>
   16384:	89 2b       	or	r24, r25
   16386:	41 f2       	breq	.-112    	; 0x16318 <amigo_format+0x5c>
   16388:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   1638c:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   16390:	15 82       	std	Z+5, r1	; 0x05
   16392:	14 82       	std	Z+4, r1	; 0x04
   16394:	13 82       	std	Z+3, r1	; 0x03
   16396:	16 82       	std	Z+6, r1	; 0x06
   16398:	c0 e0       	ldi	r28, 0x00	; 0
   1639a:	d0 e0       	ldi	r29, 0x00	; 0
   1639c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   163a0:	86 ff       	sbrs	r24, 6
   163a2:	04 c0       	rjmp	.+8      	; 0x163ac <amigo_format+0xf0>
   163a4:	81 eb       	ldi	r24, 0xB1	; 177
   163a6:	95 e1       	ldi	r25, 0x15	; 21
   163a8:	0e 94 b3 83 	call	0x10766	; 0x10766 <gpib_timer_elapsed_end>
   163ac:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   163b0:	85 ff       	sbrs	r24, 5
   163b2:	0a c0       	rjmp	.+20     	; 0x163c8 <amigo_format+0x10c>
   163b4:	8f e3       	ldi	r24, 0x3F	; 63
   163b6:	9c e2       	ldi	r25, 0x2C	; 44
   163b8:	a0 e0       	ldi	r26, 0x00	; 0
   163ba:	ed b7       	in	r30, 0x3d	; 61
   163bc:	fe b7       	in	r31, 0x3e	; 62
   163be:	81 83       	std	Z+1, r24	; 0x01
   163c0:	92 83       	std	Z+2, r25	; 0x02
   163c2:	a3 83       	std	Z+3, r26	; 0x03
   163c4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   163c8:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   163cc:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   163d0:	81 81       	ldd	r24, Z+1	; 0x01
   163d2:	90 e0       	ldi	r25, 0x00	; 0
   163d4:	0e 94 63 84 	call	0x108c6	; 0x108c6 <gpib_enable_PPR>
   163d8:	ce 01       	movw	r24, r28
   163da:	cd b7       	in	r28, 0x3d	; 61
   163dc:	de b7       	in	r29, 0x3e	; 62
   163de:	23 96       	adiw	r28, 0x03	; 3
   163e0:	e6 e0       	ldi	r30, 0x06	; 6
   163e2:	0c 94 00 e1 	jmp	0x1c200	; 0x1c200 <__epilogue_restores__+0x18>

000163e6 <amigo_buffered_read_command>:
   163e6:	8f 92       	push	r8
   163e8:	9f 92       	push	r9
   163ea:	af 92       	push	r10
   163ec:	bf 92       	push	r11
   163ee:	ef 92       	push	r14
   163f0:	ff 92       	push	r15
   163f2:	0f 93       	push	r16
   163f4:	1f 93       	push	r17
   163f6:	00 d0       	rcall	.+0      	; 0x163f8 <amigo_buffered_read_command+0x12>
   163f8:	00 d0       	rcall	.+0      	; 0x163fa <amigo_buffered_read_command+0x14>
   163fa:	1f 92       	push	r1
   163fc:	68 eb       	ldi	r22, 0xB8	; 184
   163fe:	75 e1       	ldi	r23, 0x15	; 21
   16400:	80 91 7d 19 	lds	r24, 0x197D	; 0x80197d <AMIGOs>
   16404:	90 91 7e 19 	lds	r25, 0x197E	; 0x80197e <AMIGOs+0x1>
   16408:	8a dc       	rcall	.-1772   	; 0x15d1e <amigo_chs_to_logical>
   1640a:	4b 01       	movw	r8, r22
   1640c:	5c 01       	movw	r10, r24
   1640e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16412:	85 ff       	sbrs	r24, 5
   16414:	12 c0       	rjmp	.+36     	; 0x1643a <amigo_buffered_read_command+0x54>
   16416:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   1641a:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   1641e:	80 81       	ld	r24, Z
   16420:	90 e0       	ldi	r25, 0x00	; 0
   16422:	ed b7       	in	r30, 0x3d	; 61
   16424:	fe b7       	in	r31, 0x3e	; 62
   16426:	95 83       	std	Z+5, r25	; 0x05
   16428:	84 83       	std	Z+4, r24	; 0x04
   1642a:	8d e2       	ldi	r24, 0x2D	; 45
   1642c:	9c e2       	ldi	r25, 0x2C	; 44
   1642e:	a0 e0       	ldi	r26, 0x00	; 0
   16430:	81 83       	std	Z+1, r24	; 0x01
   16432:	92 83       	std	Z+2, r25	; 0x02
   16434:	a3 83       	std	Z+3, r26	; 0x03
   16436:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1643a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1643e:	86 fd       	sbrc	r24, 6
   16440:	0e 94 a1 83 	call	0x10742	; 0x10742 <gpib_timer_elapsed_begin>
   16444:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   16448:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   1644c:	e0 90 7d 19 	lds	r14, 0x197D	; 0x80197d <AMIGOs>
   16450:	f0 90 7e 19 	lds	r15, 0x197E	; 0x80197e <AMIGOs+0x1>
   16454:	87 e0       	ldi	r24, 0x07	; 7
   16456:	e8 0e       	add	r14, r24
   16458:	f1 1c       	adc	r15, r1
   1645a:	06 81       	ldd	r16, Z+6	; 0x06
   1645c:	17 81       	ldd	r17, Z+7	; 0x07
   1645e:	24 e0       	ldi	r18, 0x04	; 4
   16460:	3d e1       	ldi	r19, 0x1D	; 29
   16462:	b5 01       	movw	r22, r10
   16464:	a4 01       	movw	r20, r8
   16466:	82 81       	ldd	r24, Z+2	; 0x02
   16468:	93 81       	ldd	r25, Z+3	; 0x03
   1646a:	0e 94 f3 82 	call	0x105e6	; 0x105e6 <dbf_open_read>
   1646e:	7c 01       	movw	r14, r24
   16470:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16474:	86 ff       	sbrs	r24, 6
   16476:	04 c0       	rjmp	.+8      	; 0x16480 <amigo_buffered_read_command+0x9a>
   16478:	89 ea       	ldi	r24, 0xA9	; 169
   1647a:	90 e1       	ldi	r25, 0x10	; 16
   1647c:	0e 94 b3 83 	call	0x10766	; 0x10766 <gpib_timer_elapsed_end>
   16480:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   16484:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   16488:	86 81       	ldd	r24, Z+6	; 0x06
   1648a:	97 81       	ldd	r25, Z+7	; 0x07
   1648c:	e8 16       	cp	r14, r24
   1648e:	f9 06       	cpc	r15, r25
   16490:	61 f0       	breq	.+24     	; 0x164aa <amigo_buffered_read_command+0xc4>
   16492:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   16496:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   1649a:	81 e0       	ldi	r24, 0x01	; 1
   1649c:	86 83       	std	Z+6, r24	; 0x06
   1649e:	87 81       	ldd	r24, Z+7	; 0x07
   164a0:	90 85       	ldd	r25, Z+8	; 0x08
   164a2:	81 60       	ori	r24, 0x01	; 1
   164a4:	90 87       	std	Z+8, r25	; 0x08
   164a6:	87 83       	std	Z+7, r24	; 0x07
   164a8:	18 c0       	rjmp	.+48     	; 0x164da <amigo_buffered_read_command+0xf4>
   164aa:	88 eb       	ldi	r24, 0xB8	; 184
   164ac:	95 e1       	ldi	r25, 0x15	; 21
   164ae:	16 de       	rcall	.-980    	; 0x160dc <amigo_increment>
   164b0:	89 2b       	or	r24, r25
   164b2:	59 f0       	breq	.+22     	; 0x164ca <amigo_buffered_read_command+0xe4>
   164b4:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   164b8:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   164bc:	81 e0       	ldi	r24, 0x01	; 1
   164be:	86 83       	std	Z+6, r24	; 0x06
   164c0:	87 81       	ldd	r24, Z+7	; 0x07
   164c2:	90 85       	ldd	r25, Z+8	; 0x08
   164c4:	84 60       	ori	r24, 0x04	; 4
   164c6:	90 87       	std	Z+8, r25	; 0x08
   164c8:	87 83       	std	Z+7, r24	; 0x07
   164ca:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   164ce:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   164d2:	81 81       	ldd	r24, Z+1	; 0x01
   164d4:	90 e0       	ldi	r25, 0x00	; 0
   164d6:	0e 94 63 84 	call	0x108c6	; 0x108c6 <gpib_enable_PPR>
   164da:	80 e0       	ldi	r24, 0x00	; 0
   164dc:	90 e0       	ldi	r25, 0x00	; 0
   164de:	0f 90       	pop	r0
   164e0:	0f 90       	pop	r0
   164e2:	0f 90       	pop	r0
   164e4:	0f 90       	pop	r0
   164e6:	0f 90       	pop	r0
   164e8:	1f 91       	pop	r17
   164ea:	0f 91       	pop	r16
   164ec:	ff 90       	pop	r15
   164ee:	ef 90       	pop	r14
   164f0:	bf 90       	pop	r11
   164f2:	af 90       	pop	r10
   164f4:	9f 90       	pop	r9
   164f6:	8f 90       	pop	r8
   164f8:	08 95       	ret

000164fa <amigo_buffered_read_execute>:
   164fa:	a5 e0       	ldi	r26, 0x05	; 5
   164fc:	b0 e0       	ldi	r27, 0x00	; 0
   164fe:	e3 e8       	ldi	r30, 0x83	; 131
   16500:	f2 eb       	ldi	r31, 0xB2	; 178
   16502:	0c 94 e6 e0 	jmp	0x1c1cc	; 0x1c1cc <__prologue_saves__+0x1c>
   16506:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1650a:	87 fd       	sbrc	r24, 7
   1650c:	0e 94 a1 83 	call	0x10742	; 0x10742 <gpib_timer_elapsed_begin>
   16510:	80 e0       	ldi	r24, 0x00	; 0
   16512:	91 e0       	ldi	r25, 0x01	; 1
   16514:	9d 83       	std	Y+5, r25	; 0x05
   16516:	8c 83       	std	Y+4, r24	; 0x04
   16518:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   1651c:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   16520:	66 81       	ldd	r22, Z+6	; 0x06
   16522:	77 81       	ldd	r23, Z+7	; 0x07
   16524:	ae 01       	movw	r20, r28
   16526:	4c 5f       	subi	r20, 0xFC	; 252
   16528:	5f 4f       	sbci	r21, 0xFF	; 255
   1652a:	84 e0       	ldi	r24, 0x04	; 4
   1652c:	9d e1       	ldi	r25, 0x1D	; 29
   1652e:	0e 94 f3 89 	call	0x113e6	; 0x113e6 <gpib_write_str>
   16532:	8c 01       	movw	r16, r24
   16534:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16538:	87 ff       	sbrs	r24, 7
   1653a:	04 c0       	rjmp	.+8      	; 0x16544 <amigo_buffered_read_execute+0x4a>
   1653c:	84 eb       	ldi	r24, 0xB4	; 180
   1653e:	90 e1       	ldi	r25, 0x10	; 16
   16540:	0e 94 b3 83 	call	0x10766	; 0x10766 <gpib_timer_elapsed_end>
   16544:	8c 81       	ldd	r24, Y+4	; 0x04
   16546:	9d 81       	ldd	r25, Y+5	; 0x05
   16548:	88 27       	eor	r24, r24
   1654a:	90 7d       	andi	r25, 0xD0	; 208
   1654c:	89 2b       	or	r24, r25
   1654e:	49 f4       	brne	.+18     	; 0x16562 <amigo_buffered_read_execute+0x68>
   16550:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   16554:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   16558:	86 81       	ldd	r24, Z+6	; 0x06
   1655a:	97 81       	ldd	r25, Z+7	; 0x07
   1655c:	08 17       	cp	r16, r24
   1655e:	19 07       	cpc	r17, r25
   16560:	31 f1       	breq	.+76     	; 0x165ae <amigo_buffered_read_execute+0xb4>
   16562:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   16566:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   1656a:	81 e0       	ldi	r24, 0x01	; 1
   1656c:	86 83       	std	Z+6, r24	; 0x06
   1656e:	87 81       	ldd	r24, Z+7	; 0x07
   16570:	90 85       	ldd	r25, Z+8	; 0x08
   16572:	80 62       	ori	r24, 0x20	; 32
   16574:	90 87       	std	Z+8, r25	; 0x08
   16576:	87 83       	std	Z+7, r24	; 0x07
   16578:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1657c:	80 ff       	sbrs	r24, 0
   1657e:	0a c0       	rjmp	.+20     	; 0x16594 <amigo_buffered_read_execute+0x9a>
   16580:	83 e1       	ldi	r24, 0x13	; 19
   16582:	9c e2       	ldi	r25, 0x2C	; 44
   16584:	a0 e0       	ldi	r26, 0x00	; 0
   16586:	ed b7       	in	r30, 0x3d	; 61
   16588:	fe b7       	in	r31, 0x3e	; 62
   1658a:	81 83       	std	Z+1, r24	; 0x01
   1658c:	92 83       	std	Z+2, r25	; 0x02
   1658e:	a3 83       	std	Z+3, r26	; 0x03
   16590:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   16594:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   16598:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   1659c:	81 81       	ldd	r24, Z+1	; 0x01
   1659e:	90 e0       	ldi	r25, 0x00	; 0
   165a0:	0e 94 63 84 	call	0x108c6	; 0x108c6 <gpib_enable_PPR>
   165a4:	8c 81       	ldd	r24, Y+4	; 0x04
   165a6:	9d 81       	ldd	r25, Y+5	; 0x05
   165a8:	88 27       	eor	r24, r24
   165aa:	90 7d       	andi	r25, 0xD0	; 208
   165ac:	06 c0       	rjmp	.+12     	; 0x165ba <amigo_buffered_read_execute+0xc0>
   165ae:	81 81       	ldd	r24, Z+1	; 0x01
   165b0:	90 e0       	ldi	r25, 0x00	; 0
   165b2:	0e 94 63 84 	call	0x108c6	; 0x108c6 <gpib_enable_PPR>
   165b6:	80 e0       	ldi	r24, 0x00	; 0
   165b8:	90 e0       	ldi	r25, 0x00	; 0
   165ba:	25 96       	adiw	r28, 0x05	; 5
   165bc:	e4 e0       	ldi	r30, 0x04	; 4
   165be:	0c 94 02 e1 	jmp	0x1c204	; 0x1c204 <__epilogue_restores__+0x1c>

000165c2 <amigo_buffered_write>:
   165c2:	8f 92       	push	r8
   165c4:	9f 92       	push	r9
   165c6:	af 92       	push	r10
   165c8:	bf 92       	push	r11
   165ca:	ef 92       	push	r14
   165cc:	ff 92       	push	r15
   165ce:	0f 93       	push	r16
   165d0:	1f 93       	push	r17
   165d2:	cf 93       	push	r28
   165d4:	df 93       	push	r29
   165d6:	cd b7       	in	r28, 0x3d	; 61
   165d8:	de b7       	in	r29, 0x3e	; 62
   165da:	27 97       	sbiw	r28, 0x07	; 7
   165dc:	0f b6       	in	r0, 0x3f	; 63
   165de:	f8 94       	cli
   165e0:	de bf       	out	0x3e, r29	; 62
   165e2:	0f be       	out	0x3f, r0	; 63
   165e4:	cd bf       	out	0x3d, r28	; 61
   165e6:	66 ec       	ldi	r22, 0xC6	; 198
   165e8:	75 e1       	ldi	r23, 0x15	; 21
   165ea:	80 91 7d 19 	lds	r24, 0x197D	; 0x80197d <AMIGOs>
   165ee:	90 91 7e 19 	lds	r25, 0x197E	; 0x80197e <AMIGOs+0x1>
   165f2:	95 db       	rcall	.-2262   	; 0x15d1e <amigo_chs_to_logical>
   165f4:	4b 01       	movw	r8, r22
   165f6:	5c 01       	movw	r10, r24
   165f8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   165fc:	87 fd       	sbrc	r24, 7
   165fe:	0e 94 a1 83 	call	0x10742	; 0x10742 <gpib_timer_elapsed_begin>
   16602:	1f 82       	std	Y+7, r1	; 0x07
   16604:	1e 82       	std	Y+6, r1	; 0x06
   16606:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   1660a:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   1660e:	66 81       	ldd	r22, Z+6	; 0x06
   16610:	77 81       	ldd	r23, Z+7	; 0x07
   16612:	ae 01       	movw	r20, r28
   16614:	4a 5f       	subi	r20, 0xFA	; 250
   16616:	5f 4f       	sbci	r21, 0xFF	; 255
   16618:	84 e0       	ldi	r24, 0x04	; 4
   1661a:	9d e1       	ldi	r25, 0x1D	; 29
   1661c:	0e 94 51 89 	call	0x112a2	; 0x112a2 <gpib_read_str>
   16620:	7c 01       	movw	r14, r24
   16622:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16626:	85 ff       	sbrs	r24, 5
   16628:	12 c0       	rjmp	.+36     	; 0x1664e <amigo_buffered_write+0x8c>
   1662a:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   1662e:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   16632:	80 81       	ld	r24, Z
   16634:	90 e0       	ldi	r25, 0x00	; 0
   16636:	ed b7       	in	r30, 0x3d	; 61
   16638:	fe b7       	in	r31, 0x3e	; 62
   1663a:	95 83       	std	Z+5, r25	; 0x05
   1663c:	84 83       	std	Z+4, r24	; 0x04
   1663e:	81 e0       	ldi	r24, 0x01	; 1
   16640:	9c e2       	ldi	r25, 0x2C	; 44
   16642:	a0 e0       	ldi	r26, 0x00	; 0
   16644:	81 83       	std	Z+1, r24	; 0x01
   16646:	92 83       	std	Z+2, r25	; 0x02
   16648:	a3 83       	std	Z+3, r26	; 0x03
   1664a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1664e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16652:	87 ff       	sbrs	r24, 7
   16654:	04 c0       	rjmp	.+8      	; 0x1665e <amigo_buffered_write+0x9c>
   16656:	85 ed       	ldi	r24, 0xD5	; 213
   16658:	95 e1       	ldi	r25, 0x15	; 21
   1665a:	0e 94 b3 83 	call	0x10766	; 0x10766 <gpib_timer_elapsed_end>
   1665e:	8e 81       	ldd	r24, Y+6	; 0x06
   16660:	9f 81       	ldd	r25, Y+7	; 0x07
   16662:	88 27       	eor	r24, r24
   16664:	90 7d       	andi	r25, 0xD0	; 208
   16666:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1666a:	89 2b       	or	r24, r25
   1666c:	49 f4       	brne	.+18     	; 0x16680 <amigo_buffered_write+0xbe>
   1666e:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   16672:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   16676:	86 81       	ldd	r24, Z+6	; 0x06
   16678:	97 81       	ldd	r25, Z+7	; 0x07
   1667a:	e8 16       	cp	r14, r24
   1667c:	f9 06       	cpc	r15, r25
   1667e:	c1 f0       	breq	.+48     	; 0x166b0 <amigo_buffered_write+0xee>
   16680:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   16684:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   16688:	81 e0       	ldi	r24, 0x01	; 1
   1668a:	86 83       	std	Z+6, r24	; 0x06
   1668c:	87 81       	ldd	r24, Z+7	; 0x07
   1668e:	90 85       	ldd	r25, Z+8	; 0x08
   16690:	80 62       	ori	r24, 0x20	; 32
   16692:	90 87       	std	Z+8, r25	; 0x08
   16694:	87 83       	std	Z+7, r24	; 0x07
   16696:	20 ff       	sbrs	r18, 0
   16698:	4e c0       	rjmp	.+156    	; 0x16736 <amigo_buffered_write+0x174>
   1669a:	82 ee       	ldi	r24, 0xE2	; 226
   1669c:	9b e2       	ldi	r25, 0x2B	; 43
   1669e:	a0 e0       	ldi	r26, 0x00	; 0
   166a0:	ed b7       	in	r30, 0x3d	; 61
   166a2:	fe b7       	in	r31, 0x3e	; 62
   166a4:	81 83       	std	Z+1, r24	; 0x01
   166a6:	92 83       	std	Z+2, r25	; 0x02
   166a8:	a3 83       	std	Z+3, r26	; 0x03
   166aa:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   166ae:	43 c0       	rjmp	.+134    	; 0x16736 <amigo_buffered_write+0x174>
   166b0:	26 fd       	sbrc	r18, 6
   166b2:	0e 94 a1 83 	call	0x10742	; 0x10742 <gpib_timer_elapsed_begin>
   166b6:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   166ba:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   166be:	e0 90 7d 19 	lds	r14, 0x197D	; 0x80197d <AMIGOs>
   166c2:	f0 90 7e 19 	lds	r15, 0x197E	; 0x80197e <AMIGOs+0x1>
   166c6:	87 e0       	ldi	r24, 0x07	; 7
   166c8:	e8 0e       	add	r14, r24
   166ca:	f1 1c       	adc	r15, r1
   166cc:	06 81       	ldd	r16, Z+6	; 0x06
   166ce:	17 81       	ldd	r17, Z+7	; 0x07
   166d0:	24 e0       	ldi	r18, 0x04	; 4
   166d2:	3d e1       	ldi	r19, 0x1D	; 29
   166d4:	b5 01       	movw	r22, r10
   166d6:	a4 01       	movw	r20, r8
   166d8:	82 81       	ldd	r24, Z+2	; 0x02
   166da:	93 81       	ldd	r25, Z+3	; 0x03
   166dc:	0e 94 4a 83 	call	0x10694	; 0x10694 <dbf_open_write>
   166e0:	7c 01       	movw	r14, r24
   166e2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   166e6:	86 ff       	sbrs	r24, 6
   166e8:	04 c0       	rjmp	.+8      	; 0x166f2 <amigo_buffered_write+0x130>
   166ea:	8e e9       	ldi	r24, 0x9E	; 158
   166ec:	90 e1       	ldi	r25, 0x10	; 16
   166ee:	0e 94 b3 83 	call	0x10766	; 0x10766 <gpib_timer_elapsed_end>
   166f2:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   166f6:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   166fa:	86 81       	ldd	r24, Z+6	; 0x06
   166fc:	97 81       	ldd	r25, Z+7	; 0x07
   166fe:	e8 16       	cp	r14, r24
   16700:	f9 06       	cpc	r15, r25
   16702:	49 f0       	breq	.+18     	; 0x16716 <amigo_buffered_write+0x154>
   16704:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   16708:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   1670c:	81 e0       	ldi	r24, 0x01	; 1
   1670e:	86 83       	std	Z+6, r24	; 0x06
   16710:	80 e0       	ldi	r24, 0x00	; 0
   16712:	90 e0       	ldi	r25, 0x00	; 0
   16714:	1c c0       	rjmp	.+56     	; 0x1674e <amigo_buffered_write+0x18c>
   16716:	86 ec       	ldi	r24, 0xC6	; 198
   16718:	95 e1       	ldi	r25, 0x15	; 21
   1671a:	e0 dc       	rcall	.-1600   	; 0x160dc <amigo_increment>
   1671c:	89 2b       	or	r24, r25
   1671e:	59 f0       	breq	.+22     	; 0x16736 <amigo_buffered_write+0x174>
   16720:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   16724:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   16728:	81 e0       	ldi	r24, 0x01	; 1
   1672a:	86 83       	std	Z+6, r24	; 0x06
   1672c:	87 81       	ldd	r24, Z+7	; 0x07
   1672e:	90 85       	ldd	r25, Z+8	; 0x08
   16730:	84 60       	ori	r24, 0x04	; 4
   16732:	90 87       	std	Z+8, r25	; 0x08
   16734:	87 83       	std	Z+7, r24	; 0x07
   16736:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   1673a:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   1673e:	81 81       	ldd	r24, Z+1	; 0x01
   16740:	90 e0       	ldi	r25, 0x00	; 0
   16742:	0e 94 63 84 	call	0x108c6	; 0x108c6 <gpib_enable_PPR>
   16746:	8e 81       	ldd	r24, Y+6	; 0x06
   16748:	9f 81       	ldd	r25, Y+7	; 0x07
   1674a:	88 27       	eor	r24, r24
   1674c:	90 7d       	andi	r25, 0xD0	; 208
   1674e:	27 96       	adiw	r28, 0x07	; 7
   16750:	0f b6       	in	r0, 0x3f	; 63
   16752:	f8 94       	cli
   16754:	de bf       	out	0x3e, r29	; 62
   16756:	0f be       	out	0x3f, r0	; 63
   16758:	cd bf       	out	0x3d, r28	; 61
   1675a:	df 91       	pop	r29
   1675c:	cf 91       	pop	r28
   1675e:	1f 91       	pop	r17
   16760:	0f 91       	pop	r16
   16762:	ff 90       	pop	r15
   16764:	ef 90       	pop	r14
   16766:	bf 90       	pop	r11
   16768:	af 90       	pop	r10
   1676a:	9f 90       	pop	r9
   1676c:	8f 90       	pop	r8
   1676e:	08 95       	ret

00016770 <amigo_cmd_dsj>:
   16770:	a8 e0       	ldi	r26, 0x08	; 8
   16772:	b0 e0       	ldi	r27, 0x00	; 0
   16774:	ee eb       	ldi	r30, 0xBE	; 190
   16776:	f3 eb       	ldi	r31, 0xB3	; 179
   16778:	0c 94 e8 e0 	jmp	0x1c1d0	; 0x1c1d0 <__prologue_saves__+0x20>
   1677c:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   16780:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   16784:	86 81       	ldd	r24, Z+6	; 0x06
   16786:	88 87       	std	Y+8, r24	; 0x08
   16788:	80 e0       	ldi	r24, 0x00	; 0
   1678a:	91 e0       	ldi	r25, 0x01	; 1
   1678c:	9f 83       	std	Y+7, r25	; 0x07
   1678e:	8e 83       	std	Y+6, r24	; 0x06
   16790:	ae 01       	movw	r20, r28
   16792:	4a 5f       	subi	r20, 0xFA	; 250
   16794:	5f 4f       	sbci	r21, 0xFF	; 255
   16796:	61 e0       	ldi	r22, 0x01	; 1
   16798:	70 e0       	ldi	r23, 0x00	; 0
   1679a:	ce 01       	movw	r24, r28
   1679c:	08 96       	adiw	r24, 0x08	; 8
   1679e:	0e 94 f3 89 	call	0x113e6	; 0x113e6 <gpib_write_str>
   167a2:	2e 81       	ldd	r18, Y+6	; 0x06
   167a4:	3f 81       	ldd	r19, Y+7	; 0x07
   167a6:	22 27       	eor	r18, r18
   167a8:	30 7d       	andi	r19, 0xD0	; 208
   167aa:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   167ae:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   167b2:	23 2b       	or	r18, r19
   167b4:	29 f0       	breq	.+10     	; 0x167c0 <amigo_cmd_dsj+0x50>
   167b6:	27 81       	ldd	r18, Z+7	; 0x07
   167b8:	30 85       	ldd	r19, Z+8	; 0x08
   167ba:	20 62       	ori	r18, 0x20	; 32
   167bc:	30 87       	std	Z+8, r19	; 0x08
   167be:	27 83       	std	Z+7, r18	; 0x07
   167c0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   167c4:	01 97       	sbiw	r24, 0x01	; 1
   167c6:	c1 f0       	breq	.+48     	; 0x167f8 <amigo_cmd_dsj+0x88>
   167c8:	81 e0       	ldi	r24, 0x01	; 1
   167ca:	86 83       	std	Z+6, r24	; 0x06
   167cc:	87 81       	ldd	r24, Z+7	; 0x07
   167ce:	90 85       	ldd	r25, Z+8	; 0x08
   167d0:	80 62       	ori	r24, 0x20	; 32
   167d2:	90 87       	std	Z+8, r25	; 0x08
   167d4:	87 83       	std	Z+7, r24	; 0x07
   167d6:	20 ff       	sbrs	r18, 0
   167d8:	0a c0       	rjmp	.+20     	; 0x167ee <amigo_cmd_dsj+0x7e>
   167da:	88 ec       	ldi	r24, 0xC8	; 200
   167dc:	9b e2       	ldi	r25, 0x2B	; 43
   167de:	a0 e0       	ldi	r26, 0x00	; 0
   167e0:	ed b7       	in	r30, 0x3d	; 61
   167e2:	fe b7       	in	r31, 0x3e	; 62
   167e4:	81 83       	std	Z+1, r24	; 0x01
   167e6:	92 83       	std	Z+2, r25	; 0x02
   167e8:	a3 83       	std	Z+3, r26	; 0x03
   167ea:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   167ee:	8e 81       	ldd	r24, Y+6	; 0x06
   167f0:	9f 81       	ldd	r25, Y+7	; 0x07
   167f2:	88 27       	eor	r24, r24
   167f4:	90 7d       	andi	r25, 0xD0	; 208
   167f6:	19 c0       	rjmp	.+50     	; 0x1682a <amigo_cmd_dsj+0xba>
   167f8:	25 ff       	sbrs	r18, 5
   167fa:	0e c0       	rjmp	.+28     	; 0x16818 <amigo_cmd_dsj+0xa8>
   167fc:	86 81       	ldd	r24, Z+6	; 0x06
   167fe:	90 e0       	ldi	r25, 0x00	; 0
   16800:	ed b7       	in	r30, 0x3d	; 61
   16802:	fe b7       	in	r31, 0x3e	; 62
   16804:	95 83       	std	Z+5, r25	; 0x05
   16806:	84 83       	std	Z+4, r24	; 0x04
   16808:	8b eb       	ldi	r24, 0xBB	; 187
   1680a:	9b e2       	ldi	r25, 0x2B	; 43
   1680c:	a0 e0       	ldi	r26, 0x00	; 0
   1680e:	81 83       	std	Z+1, r24	; 0x01
   16810:	92 83       	std	Z+2, r25	; 0x02
   16812:	a3 83       	std	Z+3, r26	; 0x03
   16814:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   16818:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   1681c:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   16820:	16 82       	std	Z+6, r1	; 0x06
   16822:	10 86       	std	Z+8, r1	; 0x08
   16824:	17 82       	std	Z+7, r1	; 0x07
   16826:	80 e0       	ldi	r24, 0x00	; 0
   16828:	90 e0       	ldi	r25, 0x00	; 0
   1682a:	28 96       	adiw	r28, 0x08	; 8
   1682c:	e2 e0       	ldi	r30, 0x02	; 2
   1682e:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

00016832 <amigo_cmd_clear>:
/// - Reference: A23.
/// - Select sector 0.
/// @return  0

int amigo_cmd_clear()
{
   16832:	00 d0       	rcall	.+0      	; 0x16834 <amigo_cmd_clear+0x2>
   16834:	1f 92       	push	r1
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16836:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1683a:	85 ff       	sbrs	r24, 5
   1683c:	0a c0       	rjmp	.+20     	; 0x16852 <amigo_cmd_clear+0x20>
        printf("[AMIGO Clear]\n");
   1683e:	8c ea       	ldi	r24, 0xAC	; 172
   16840:	9b e2       	ldi	r25, 0x2B	; 43
   16842:	a0 e0       	ldi	r26, 0x00	; 0
   16844:	ed b7       	in	r30, 0x3d	; 61
   16846:	fe b7       	in	r31, 0x3e	; 62
   16848:	81 83       	std	Z+1, r24	; 0x01
   1684a:	92 83       	std	Z+2, r25	; 0x02
   1684c:	a3 83       	std	Z+3, r26	; 0x03
   1684e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
    AMIGOs->sector = 0;
   16852:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   16856:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   1685a:	15 82       	std	Z+5, r1	; 0x05
    AMIGOs->head = 0;
   1685c:	14 82       	std	Z+4, r1	; 0x04
    AMIGOs->cyl = 0;
   1685e:	13 82       	std	Z+3, r1	; 0x03
/// @todo FIXME
///
///  Clear the DSJ byte that might be 2 after powerup
///
    AMIGOs->dsj = 0;
   16860:	16 82       	std	Z+6, r1	; 0x06
    AMIGOs->Errors =0;
   16862:	10 86       	std	Z+8, r1	; 0x08
   16864:	17 82       	std	Z+7, r1	; 0x07

    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16866:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   1686a:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   1686e:	81 81       	ldd	r24, Z+1	; 0x01
   16870:	90 e0       	ldi	r25, 0x00	; 0
   16872:	0e 94 63 84 	call	0x108c6	; 0x108c6 <gpib_enable_PPR>
    return(0);
}
   16876:	80 e0       	ldi	r24, 0x00	; 0
   16878:	90 e0       	ldi	r25, 0x00	; 0
   1687a:	0f 90       	pop	r0
   1687c:	0f 90       	pop	r0
   1687e:	0f 90       	pop	r0
   16880:	08 95       	ret

00016882 <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   16882:	af e0       	ldi	r26, 0x0F	; 15
   16884:	b0 e0       	ldi	r27, 0x00	; 0
   16886:	e7 e4       	ldi	r30, 0x47	; 71
   16888:	f4 eb       	ldi	r31, 0xB4	; 180
   1688a:	0c 94 e4 e0 	jmp	0x1c1c8	; 0x1c1c8 <__prologue_saves__+0x18>
   1688e:	c8 2f       	mov	r28, r24
   16890:	e6 2e       	mov	r14, r22
   16892:	8a 01       	movw	r16, r20
    if(AMIGO_is_MLA(listening))
   16894:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   16898:	90 e0       	ldi	r25, 0x00	; 0
   1689a:	0e 94 e8 8a 	call	0x115d0	; 0x115d0 <AMIGO_is_MLA>
   1689e:	20 91 08 1f 	lds	r18, 0x1F08	; 0x801f08 <talking>
   168a2:	f1 2c       	mov	r15, r1
   168a4:	d0 e0       	ldi	r29, 0x00	; 0
   168a6:	89 2b       	or	r24, r25
   168a8:	f1 f0       	breq	.+60     	; 0x168e6 <amigo_todo_op+0x64>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   168aa:	82 2f       	mov	r24, r18
   168ac:	90 e0       	ldi	r25, 0x00	; 0
   168ae:	ed b7       	in	r30, 0x3d	; 61
   168b0:	fe b7       	in	r31, 0x3e	; 62
   168b2:	97 87       	std	Z+15, r25	; 0x0f
   168b4:	86 87       	std	Z+14, r24	; 0x0e
   168b6:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   168ba:	90 e0       	ldi	r25, 0x00	; 0
   168bc:	95 87       	std	Z+13, r25	; 0x0d
   168be:	84 87       	std	Z+12, r24	; 0x0c
   168c0:	13 87       	std	Z+11, r17	; 0x0b
   168c2:	02 87       	std	Z+10, r16	; 0x0a
   168c4:	f1 86       	std	Z+9, r15	; 0x09
   168c6:	e0 86       	std	Z+8, r14	; 0x08
   168c8:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   168cc:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   168d0:	80 81       	ld	r24, Z
   168d2:	90 e0       	ldi	r25, 0x00	; 0
   168d4:	ed b7       	in	r30, 0x3d	; 61
   168d6:	fe b7       	in	r31, 0x3e	; 62
   168d8:	97 83       	std	Z+7, r25	; 0x07
   168da:	86 83       	std	Z+6, r24	; 0x06
   168dc:	d5 83       	std	Z+5, r29	; 0x05
   168de:	c4 83       	std	Z+4, r28	; 0x04
   168e0:	85 e4       	ldi	r24, 0x45	; 69
   168e2:	9b e2       	ldi	r25, 0x2B	; 43
   168e4:	51 c0       	rjmp	.+162    	; 0x16988 <amigo_todo_op+0x106>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   168e6:	82 2f       	mov	r24, r18
   168e8:	90 e0       	ldi	r25, 0x00	; 0
   168ea:	0e 94 f9 8a 	call	0x115f2	; 0x115f2 <AMIGO_is_MTA>
   168ee:	20 91 0a 1f 	lds	r18, 0x1F0A	; 0x801f0a <listening>
   168f2:	30 91 08 1f 	lds	r19, 0x1F08	; 0x801f08 <talking>
   168f6:	a0 91 7d 19 	lds	r26, 0x197D	; 0x80197d <AMIGOs>
   168fa:	b0 91 7e 19 	lds	r27, 0x197E	; 0x80197e <AMIGOs+0x1>
   168fe:	89 2b       	or	r24, r25
   16900:	b1 f0       	breq	.+44     	; 0x1692e <amigo_todo_op+0xac>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16902:	83 2f       	mov	r24, r19
   16904:	90 e0       	ldi	r25, 0x00	; 0
   16906:	ed b7       	in	r30, 0x3d	; 61
   16908:	fe b7       	in	r31, 0x3e	; 62
   1690a:	97 87       	std	Z+15, r25	; 0x0f
   1690c:	86 87       	std	Z+14, r24	; 0x0e
   1690e:	30 e0       	ldi	r19, 0x00	; 0
   16910:	35 87       	std	Z+13, r19	; 0x0d
   16912:	24 87       	std	Z+12, r18	; 0x0c
   16914:	13 87       	std	Z+11, r17	; 0x0b
   16916:	02 87       	std	Z+10, r16	; 0x0a
   16918:	f1 86       	std	Z+9, r15	; 0x09
   1691a:	e0 86       	std	Z+8, r14	; 0x08
   1691c:	8c 91       	ld	r24, X
   1691e:	90 e0       	ldi	r25, 0x00	; 0
   16920:	97 83       	std	Z+7, r25	; 0x07
   16922:	86 83       	std	Z+6, r24	; 0x06
   16924:	d5 83       	std	Z+5, r29	; 0x05
   16926:	c4 83       	std	Z+4, r28	; 0x04
   16928:	8e ed       	ldi	r24, 0xDE	; 222
   1692a:	9a e2       	ldi	r25, 0x2A	; 42
   1692c:	2d c0       	rjmp	.+90     	; 0x16988 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   1692e:	3f 35       	cpi	r19, 0x5F	; 95
   16930:	b1 f4       	brne	.+44     	; 0x1695e <amigo_todo_op+0xdc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   16932:	8f e5       	ldi	r24, 0x5F	; 95
   16934:	90 e0       	ldi	r25, 0x00	; 0
   16936:	ed b7       	in	r30, 0x3d	; 61
   16938:	fe b7       	in	r31, 0x3e	; 62
   1693a:	97 87       	std	Z+15, r25	; 0x0f
   1693c:	86 87       	std	Z+14, r24	; 0x0e
   1693e:	30 e0       	ldi	r19, 0x00	; 0
   16940:	35 87       	std	Z+13, r19	; 0x0d
   16942:	24 87       	std	Z+12, r18	; 0x0c
   16944:	13 87       	std	Z+11, r17	; 0x0b
   16946:	02 87       	std	Z+10, r16	; 0x0a
   16948:	f1 86       	std	Z+9, r15	; 0x09
   1694a:	e0 86       	std	Z+8, r14	; 0x08
   1694c:	8c 91       	ld	r24, X
   1694e:	90 e0       	ldi	r25, 0x00	; 0
   16950:	97 83       	std	Z+7, r25	; 0x07
   16952:	86 83       	std	Z+6, r24	; 0x06
   16954:	d5 83       	std	Z+5, r29	; 0x05
   16956:	c4 83       	std	Z+4, r28	; 0x04
   16958:	87 e7       	ldi	r24, 0x77	; 119
   1695a:	9a e2       	ldi	r25, 0x2A	; 42
   1695c:	15 c0       	rjmp	.+42     	; 0x16988 <amigo_todo_op+0x106>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   1695e:	83 2f       	mov	r24, r19
   16960:	90 e0       	ldi	r25, 0x00	; 0
   16962:	ed b7       	in	r30, 0x3d	; 61
   16964:	fe b7       	in	r31, 0x3e	; 62
   16966:	97 87       	std	Z+15, r25	; 0x0f
   16968:	86 87       	std	Z+14, r24	; 0x0e
   1696a:	30 e0       	ldi	r19, 0x00	; 0
   1696c:	35 87       	std	Z+13, r19	; 0x0d
   1696e:	24 87       	std	Z+12, r18	; 0x0c
   16970:	13 87       	std	Z+11, r17	; 0x0b
   16972:	02 87       	std	Z+10, r16	; 0x0a
   16974:	f1 86       	std	Z+9, r15	; 0x09
   16976:	e0 86       	std	Z+8, r14	; 0x08
   16978:	8c 91       	ld	r24, X
   1697a:	90 e0       	ldi	r25, 0x00	; 0
   1697c:	97 83       	std	Z+7, r25	; 0x07
   1697e:	86 83       	std	Z+6, r24	; 0x06
   16980:	d5 83       	std	Z+5, r29	; 0x05
   16982:	c4 83       	std	Z+4, r28	; 0x04
   16984:	82 e1       	ldi	r24, 0x12	; 18
   16986:	9a e2       	ldi	r25, 0x2A	; 42
   16988:	a0 e0       	ldi	r26, 0x00	; 0
   1698a:	81 83       	std	Z+1, r24	; 0x01
   1698c:	92 83       	std	Z+2, r25	; 0x02
   1698e:	a3 83       	std	Z+3, r26	; 0x03
   16990:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16994:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   16998:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   1699c:	81 81       	ldd	r24, Z+1	; 0x01
   1699e:	90 e0       	ldi	r25, 0x00	; 0
   169a0:	0e 94 63 84 	call	0x108c6	; 0x108c6 <gpib_enable_PPR>
    return(0);
}
   169a4:	80 e0       	ldi	r24, 0x00	; 0
   169a6:	90 e0       	ldi	r25, 0x00	; 0
   169a8:	cd b7       	in	r28, 0x3d	; 61
   169aa:	de b7       	in	r29, 0x3e	; 62
   169ac:	2f 96       	adiw	r28, 0x0f	; 15
   169ae:	e6 e0       	ldi	r30, 0x06	; 6
   169b0:	0c 94 00 e1 	jmp	0x1c200	; 0x1c200 <__epilogue_restores__+0x18>

000169b4 <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   169b4:	ab e0       	ldi	r26, 0x0B	; 11
   169b6:	b0 e0       	ldi	r27, 0x00	; 0
   169b8:	e0 ee       	ldi	r30, 0xE0	; 224
   169ba:	f4 eb       	ldi	r31, 0xB4	; 180
   169bc:	0c 94 e8 e0 	jmp	0x1c1d0	; 0x1c1d0 <__prologue_saves__+0x20>
   169c0:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   169c2:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   169c6:	90 e0       	ldi	r25, 0x00	; 0
   169c8:	0e 94 e8 8a 	call	0x115d0	; 0x115d0 <AMIGO_is_MLA>
   169cc:	20 91 08 1f 	lds	r18, 0x1F08	; 0x801f08 <talking>
   169d0:	d0 e0       	ldi	r29, 0x00	; 0
   169d2:	89 2b       	or	r24, r25
   169d4:	d1 f0       	breq	.+52     	; 0x16a0a <amigo_todo+0x56>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   169d6:	82 2f       	mov	r24, r18
   169d8:	90 e0       	ldi	r25, 0x00	; 0
   169da:	ed b7       	in	r30, 0x3d	; 61
   169dc:	fe b7       	in	r31, 0x3e	; 62
   169de:	93 87       	std	Z+11, r25	; 0x0b
   169e0:	82 87       	std	Z+10, r24	; 0x0a
   169e2:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   169e6:	90 e0       	ldi	r25, 0x00	; 0
   169e8:	91 87       	std	Z+9, r25	; 0x09
   169ea:	80 87       	std	Z+8, r24	; 0x08
   169ec:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   169f0:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   169f4:	80 81       	ld	r24, Z
   169f6:	90 e0       	ldi	r25, 0x00	; 0
   169f8:	ed b7       	in	r30, 0x3d	; 61
   169fa:	fe b7       	in	r31, 0x3e	; 62
   169fc:	97 83       	std	Z+7, r25	; 0x07
   169fe:	86 83       	std	Z+6, r24	; 0x06
   16a00:	d5 83       	std	Z+5, r29	; 0x05
   16a02:	c4 83       	std	Z+4, r28	; 0x04
   16a04:	82 ec       	ldi	r24, 0xC2	; 194
   16a06:	99 e2       	ldi	r25, 0x29	; 41
   16a08:	43 c0       	rjmp	.+134    	; 0x16a90 <amigo_todo+0xdc>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   16a0a:	82 2f       	mov	r24, r18
   16a0c:	90 e0       	ldi	r25, 0x00	; 0
   16a0e:	0e 94 f9 8a 	call	0x115f2	; 0x115f2 <AMIGO_is_MTA>
   16a12:	20 91 0a 1f 	lds	r18, 0x1F0A	; 0x801f0a <listening>
   16a16:	40 91 08 1f 	lds	r20, 0x1F08	; 0x801f08 <talking>
   16a1a:	a0 91 7d 19 	lds	r26, 0x197D	; 0x80197d <AMIGOs>
   16a1e:	b0 91 7e 19 	lds	r27, 0x197E	; 0x80197e <AMIGOs+0x1>
   16a22:	89 2b       	or	r24, r25
   16a24:	89 f0       	breq	.+34     	; 0x16a48 <amigo_todo+0x94>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16a26:	50 e0       	ldi	r21, 0x00	; 0
   16a28:	ed b7       	in	r30, 0x3d	; 61
   16a2a:	fe b7       	in	r31, 0x3e	; 62
   16a2c:	53 87       	std	Z+11, r21	; 0x0b
   16a2e:	42 87       	std	Z+10, r20	; 0x0a
   16a30:	30 e0       	ldi	r19, 0x00	; 0
   16a32:	31 87       	std	Z+9, r19	; 0x09
   16a34:	20 87       	std	Z+8, r18	; 0x08
   16a36:	8c 91       	ld	r24, X
   16a38:	90 e0       	ldi	r25, 0x00	; 0
   16a3a:	97 83       	std	Z+7, r25	; 0x07
   16a3c:	86 83       	std	Z+6, r24	; 0x06
   16a3e:	d5 83       	std	Z+5, r29	; 0x05
   16a40:	c4 83       	std	Z+4, r28	; 0x04
   16a42:	82 e7       	ldi	r24, 0x72	; 114
   16a44:	99 e2       	ldi	r25, 0x29	; 41
   16a46:	24 c0       	rjmp	.+72     	; 0x16a90 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   16a48:	4f 35       	cpi	r20, 0x5F	; 95
   16a4a:	91 f4       	brne	.+36     	; 0x16a70 <amigo_todo+0xbc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16a4c:	8f e5       	ldi	r24, 0x5F	; 95
   16a4e:	90 e0       	ldi	r25, 0x00	; 0
   16a50:	ed b7       	in	r30, 0x3d	; 61
   16a52:	fe b7       	in	r31, 0x3e	; 62
   16a54:	93 87       	std	Z+11, r25	; 0x0b
   16a56:	82 87       	std	Z+10, r24	; 0x0a
   16a58:	30 e0       	ldi	r19, 0x00	; 0
   16a5a:	31 87       	std	Z+9, r19	; 0x09
   16a5c:	20 87       	std	Z+8, r18	; 0x08
   16a5e:	8c 91       	ld	r24, X
   16a60:	90 e0       	ldi	r25, 0x00	; 0
   16a62:	97 83       	std	Z+7, r25	; 0x07
   16a64:	86 83       	std	Z+6, r24	; 0x06
   16a66:	d5 83       	std	Z+5, r29	; 0x05
   16a68:	c4 83       	std	Z+4, r28	; 0x04
   16a6a:	82 e2       	ldi	r24, 0x22	; 34
   16a6c:	99 e2       	ldi	r25, 0x29	; 41
   16a6e:	10 c0       	rjmp	.+32     	; 0x16a90 <amigo_todo+0xdc>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   16a70:	50 e0       	ldi	r21, 0x00	; 0
   16a72:	ed b7       	in	r30, 0x3d	; 61
   16a74:	fe b7       	in	r31, 0x3e	; 62
   16a76:	53 87       	std	Z+11, r21	; 0x0b
   16a78:	42 87       	std	Z+10, r20	; 0x0a
   16a7a:	30 e0       	ldi	r19, 0x00	; 0
   16a7c:	31 87       	std	Z+9, r19	; 0x09
   16a7e:	20 87       	std	Z+8, r18	; 0x08
   16a80:	8c 91       	ld	r24, X
   16a82:	90 e0       	ldi	r25, 0x00	; 0
   16a84:	97 83       	std	Z+7, r25	; 0x07
   16a86:	86 83       	std	Z+6, r24	; 0x06
   16a88:	d5 83       	std	Z+5, r29	; 0x05
   16a8a:	c4 83       	std	Z+4, r28	; 0x04
   16a8c:	81 ed       	ldi	r24, 0xD1	; 209
   16a8e:	98 e2       	ldi	r25, 0x28	; 40
   16a90:	a0 e0       	ldi	r26, 0x00	; 0
   16a92:	81 83       	std	Z+1, r24	; 0x01
   16a94:	92 83       	std	Z+2, r25	; 0x02
   16a96:	a3 83       	std	Z+3, r26	; 0x03
   16a98:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16a9c:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   16aa0:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   16aa4:	81 81       	ldd	r24, Z+1	; 0x01
   16aa6:	90 e0       	ldi	r25, 0x00	; 0
   16aa8:	0e 94 63 84 	call	0x108c6	; 0x108c6 <gpib_enable_PPR>
    return(0);
}
   16aac:	80 e0       	ldi	r24, 0x00	; 0
   16aae:	90 e0       	ldi	r25, 0x00	; 0
   16ab0:	cd b7       	in	r28, 0x3d	; 61
   16ab2:	de b7       	in	r29, 0x3e	; 62
   16ab4:	2b 96       	adiw	r28, 0x0b	; 11
   16ab6:	e2 e0       	ldi	r30, 0x02	; 2
   16ab8:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

00016abc <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   16abc:	8f 30       	cpi	r24, 0x0F	; 15
   16abe:	29 f0       	breq	.+10     	; 0x16aca <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   16ac0:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   16ac4:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   16ac8:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   16aca:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   16ace:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   16ad2:	81 81       	ldd	r24, Z+1	; 0x01
   16ad4:	88 23       	and	r24, r24
   16ad6:	29 f0       	breq	.+10     	; 0x16ae2 <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   16ad8:	87 81       	ldd	r24, Z+7	; 0x07
   16ada:	90 85       	ldd	r25, Z+8	; 0x08
   16adc:	80 64       	ori	r24, 0x40	; 64
   16ade:	90 87       	std	Z+8, r25	; 0x08
   16ae0:	87 83       	std	Z+7, r24	; 0x07
   16ae2:	08 95       	ret

00016ae4 <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   16ae4:	ac e1       	ldi	r26, 0x1C	; 28
   16ae6:	b0 e0       	ldi	r27, 0x00	; 0
   16ae8:	e8 e7       	ldi	r30, 0x78	; 120
   16aea:	f5 eb       	ldi	r31, 0xB5	; 181
   16aec:	0c 94 e4 e0 	jmp	0x1c1c8	; 0x1c1c8 <__prologue_saves__+0x18>
   16af0:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16af2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16af6:	85 ff       	sbrs	r24, 5
   16af8:	16 c0       	rjmp	.+44     	; 0x16b26 <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   16afa:	80 91 08 1f 	lds	r24, 0x1F08	; 0x801f08 <talking>
   16afe:	90 e0       	ldi	r25, 0x00	; 0
   16b00:	ed b7       	in	r30, 0x3d	; 61
   16b02:	fe b7       	in	r31, 0x3e	; 62
   16b04:	91 87       	std	Z+9, r25	; 0x09
   16b06:	80 87       	std	Z+8, r24	; 0x08
   16b08:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   16b0c:	90 e0       	ldi	r25, 0x00	; 0
   16b0e:	97 83       	std	Z+7, r25	; 0x07
   16b10:	86 83       	std	Z+6, r24	; 0x06
   16b12:	f5 82       	std	Z+5, r15	; 0x05
   16b14:	e4 82       	std	Z+4, r14	; 0x04
   16b16:	8f e9       	ldi	r24, 0x9F	; 159
   16b18:	98 e2       	ldi	r25, 0x28	; 40
   16b1a:	a0 e0       	ldi	r26, 0x00	; 0
   16b1c:	81 83       	std	Z+1, r24	; 0x01
   16b1e:	92 83       	std	Z+2, r25	; 0x02
   16b20:	a3 83       	std	Z+3, r26	; 0x03
   16b22:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   16b26:	fe e7       	ldi	r31, 0x7E	; 126
   16b28:	ef 16       	cp	r14, r31
   16b2a:	f1 04       	cpc	r15, r1
   16b2c:	f1 f5       	brne	.+124    	; 0x16baa <Amigo_Command+0xc6>
   16b2e:	80 91 08 1f 	lds	r24, 0x1F08	; 0x801f08 <talking>
   16b32:	90 e0       	ldi	r25, 0x00	; 0
   16b34:	0e 94 f9 8a 	call	0x115f2	; 0x115f2 <AMIGO_is_MTA>
   16b38:	89 2b       	or	r24, r25
   16b3a:	09 f4       	brne	.+2      	; 0x16b3e <Amigo_Command+0x5a>
   16b3c:	86 c0       	rjmp	.+268    	; 0x16c4a <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16b3e:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   16b42:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   16b46:	81 81       	ldd	r24, Z+1	; 0x01
   16b48:	90 e0       	ldi	r25, 0x00	; 0
   16b4a:	0e 94 99 84 	call	0x10932	; 0x10932 <gpib_disable_PPR>
        status = EOI_FLAG;
   16b4e:	80 e0       	ldi	r24, 0x00	; 0
   16b50:	91 e0       	ldi	r25, 0x01	; 1
   16b52:	9c 8f       	std	Y+28, r25	; 0x1c
   16b54:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16b56:	ae 01       	movw	r20, r28
   16b58:	45 5e       	subi	r20, 0xE5	; 229
   16b5a:	5f 4f       	sbci	r21, 0xFF	; 255
   16b5c:	60 e0       	ldi	r22, 0x00	; 0
   16b5e:	72 e0       	ldi	r23, 0x02	; 2
   16b60:	84 e0       	ldi	r24, 0x04	; 4
   16b62:	9d e1       	ldi	r25, 0x1D	; 29
   16b64:	0e 94 f3 89 	call	0x113e6	; 0x113e6 <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16b68:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   16b6c:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   16b70:	81 81       	ldd	r24, Z+1	; 0x01
   16b72:	90 e0       	ldi	r25, 0x00	; 0
   16b74:	0e 94 63 84 	call	0x108c6	; 0x108c6 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   16b78:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16b7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16b7c:	88 27       	eor	r24, r24
   16b7e:	90 7d       	andi	r25, 0xD0	; 208
   16b80:	89 2b       	or	r24, r25
   16b82:	09 f4       	brne	.+2      	; 0x16b86 <Amigo_Command+0xa2>
   16b84:	89 c2       	rjmp	.+1298   	; 0x17098 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   16b86:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   16b8a:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   16b8e:	81 e0       	ldi	r24, 0x01	; 1
   16b90:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   16b92:	87 81       	ldd	r24, Z+7	; 0x07
   16b94:	90 85       	ldd	r25, Z+8	; 0x08
   16b96:	80 62       	ori	r24, 0x20	; 32
   16b98:	90 87       	std	Z+8, r25	; 0x08
   16b9a:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   16b9c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ba0:	80 ff       	sbrs	r24, 0
   16ba2:	7a c2       	rjmp	.+1268   	; 0x17098 <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   16ba4:	8d e7       	ldi	r24, 0x7D	; 125
   16ba6:	98 e2       	ldi	r25, 0x28	; 40
   16ba8:	8e c0       	rjmp	.+284    	; 0x16cc6 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   16baa:	ff e7       	ldi	r31, 0x7F	; 127
   16bac:	ef 16       	cp	r14, r31
   16bae:	f1 04       	cpc	r15, r1
   16bb0:	09 f0       	breq	.+2      	; 0x16bb4 <Amigo_Command+0xd0>
   16bb2:	4b c0       	rjmp	.+150    	; 0x16c4a <Amigo_Command+0x166>
   16bb4:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   16bb8:	90 e0       	ldi	r25, 0x00	; 0
   16bba:	0e 94 e8 8a 	call	0x115d0	; 0x115d0 <AMIGO_is_MLA>
   16bbe:	89 2b       	or	r24, r25
   16bc0:	09 f4       	brne	.+2      	; 0x16bc4 <Amigo_Command+0xe0>
   16bc2:	43 c0       	rjmp	.+134    	; 0x16c4a <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16bc4:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   16bc8:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   16bcc:	81 81       	ldd	r24, Z+1	; 0x01
   16bce:	90 e0       	ldi	r25, 0x00	; 0
   16bd0:	0e 94 99 84 	call	0x10932	; 0x10932 <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16bd4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16bd8:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   16bda:	0e 94 a1 83 	call	0x10742	; 0x10742 <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   16bde:	80 e0       	ldi	r24, 0x00	; 0
   16be0:	91 e0       	ldi	r25, 0x01	; 1
   16be2:	9c 8f       	std	Y+28, r25	; 0x1c
   16be4:	8b 8f       	std	Y+27, r24	; 0x1b
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16be6:	ae 01       	movw	r20, r28
   16be8:	45 5e       	subi	r20, 0xE5	; 229
   16bea:	5f 4f       	sbci	r21, 0xFF	; 255
   16bec:	60 e0       	ldi	r22, 0x00	; 0
   16bee:	72 e0       	ldi	r23, 0x02	; 2
   16bf0:	84 e0       	ldi	r24, 0x04	; 4
   16bf2:	9d e1       	ldi	r25, 0x1D	; 29
   16bf4:	0e 94 51 89 	call	0x112a2	; 0x112a2 <gpib_read_str>
#if SDEBUG
        if(debuglevel & GPIB_RW_STR_TIMING)
   16bf8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16bfc:	87 ff       	sbrs	r24, 7
   16bfe:	04 c0       	rjmp	.+8      	; 0x16c08 <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read");
   16c00:	85 ed       	ldi	r24, 0xD5	; 213
   16c02:	95 e1       	ldi	r25, 0x15	; 21
   16c04:	0e 94 b3 83 	call	0x10766	; 0x10766 <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16c08:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   16c0c:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   16c10:	81 81       	ldd	r24, Z+1	; 0x01
   16c12:	90 e0       	ldi	r25, 0x00	; 0
   16c14:	0e 94 63 84 	call	0x108c6	; 0x108c6 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   16c18:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16c1a:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16c1c:	88 27       	eor	r24, r24
   16c1e:	90 7d       	andi	r25, 0xD0	; 208
   16c20:	89 2b       	or	r24, r25
   16c22:	09 f4       	brne	.+2      	; 0x16c26 <Amigo_Command+0x142>
   16c24:	39 c2       	rjmp	.+1138   	; 0x17098 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   16c26:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   16c2a:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   16c2e:	81 e0       	ldi	r24, 0x01	; 1
   16c30:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   16c32:	87 81       	ldd	r24, Z+7	; 0x07
   16c34:	90 85       	ldd	r25, Z+8	; 0x08
   16c36:	80 62       	ori	r24, 0x20	; 32
   16c38:	90 87       	std	Z+8, r25	; 0x08
   16c3a:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & GPIB_ERR)
   16c3c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16c40:	80 ff       	sbrs	r24, 0
   16c42:	2a c2       	rjmp	.+1108   	; 0x17098 <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   16c44:	8c e5       	ldi	r24, 0x5C	; 92
   16c46:	98 e2       	ldi	r25, 0x28	; 40
   16c48:	3e c0       	rjmp	.+124    	; 0x16cc6 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   16c4a:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   16c4e:	90 e0       	ldi	r25, 0x00	; 0
   16c50:	0e 94 e8 8a 	call	0x115d0	; 0x115d0 <AMIGO_is_MLA>
   16c54:	89 2b       	or	r24, r25
   16c56:	19 f4       	brne	.+6      	; 0x16c5e <Amigo_Command+0x17a>
        return(0);
   16c58:	80 e0       	ldi	r24, 0x00	; 0
   16c5a:	90 e0       	ldi	r25, 0x00	; 0
   16c5c:	25 c2       	rjmp	.+1098   	; 0x170a8 <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   16c5e:	80 91 08 1f 	lds	r24, 0x1F08	; 0x801f08 <talking>
   16c62:	90 e0       	ldi	r25, 0x00	; 0
   16c64:	0e 94 f9 8a 	call	0x115f2	; 0x115f2 <AMIGO_is_MTA>
   16c68:	89 2b       	or	r24, r25
   16c6a:	b1 f7       	brne	.-20     	; 0x16c58 <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16c6c:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   16c70:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   16c74:	81 81       	ldd	r24, Z+1	; 0x01
   16c76:	90 e0       	ldi	r25, 0x00	; 0
   16c78:	0e 94 99 84 	call	0x10932	; 0x10932 <gpib_disable_PPR>

///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   16c7c:	80 e0       	ldi	r24, 0x00	; 0
   16c7e:	91 e0       	ldi	r25, 0x01	; 1
   16c80:	9c 8f       	std	Y+28, r25	; 0x1c
   16c82:	8b 8f       	std	Y+27, r24	; 0x1b
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   16c84:	ae 01       	movw	r20, r28
   16c86:	45 5e       	subi	r20, 0xE5	; 229
   16c88:	5f 4f       	sbci	r21, 0xFF	; 255
   16c8a:	60 e0       	ldi	r22, 0x00	; 0
   16c8c:	72 e0       	ldi	r23, 0x02	; 2
   16c8e:	84 e0       	ldi	r24, 0x04	; 4
   16c90:	9d e1       	ldi	r25, 0x1D	; 29
   16c92:	0e 94 51 89 	call	0x112a2	; 0x112a2 <gpib_read_str>
   16c96:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   16c98:	8b 8d       	ldd	r24, Y+27	; 0x1b
   16c9a:	9c 8d       	ldd	r25, Y+28	; 0x1c
   16c9c:	88 27       	eor	r24, r24
   16c9e:	90 7d       	andi	r25, 0xD0	; 208
   16ca0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   16ca4:	89 2b       	or	r24, r25
   16ca6:	c1 f0       	breq	.+48     	; 0x16cd8 <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   16ca8:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   16cac:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   16cb0:	81 e0       	ldi	r24, 0x01	; 1
   16cb2:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   16cb4:	87 81       	ldd	r24, Z+7	; 0x07
   16cb6:	90 85       	ldd	r25, Z+8	; 0x08
   16cb8:	80 62       	ori	r24, 0x20	; 32
   16cba:	90 87       	std	Z+8, r25	; 0x08
   16cbc:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & GPIB_ERR)
   16cbe:	20 ff       	sbrs	r18, 0
   16cc0:	eb c1       	rjmp	.+982    	; 0x17098 <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   16cc2:	8b e3       	ldi	r24, 0x3B	; 59
   16cc4:	98 e2       	ldi	r25, 0x28	; 40
   16cc6:	a0 e0       	ldi	r26, 0x00	; 0
   16cc8:	ed b7       	in	r30, 0x3d	; 61
   16cca:	fe b7       	in	r31, 0x3e	; 62
   16ccc:	81 83       	std	Z+1, r24	; 0x01
   16cce:	92 83       	std	Z+2, r25	; 0x02
   16cd0:	a3 83       	std	Z+3, r26	; 0x03
   16cd2:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   16cd6:	e0 c1       	rjmp	.+960    	; 0x17098 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16cd8:	25 ff       	sbrs	r18, 5
   16cda:	0e c0       	rjmp	.+28     	; 0x16cf8 <Amigo_Command+0x214>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   16cdc:	ed b7       	in	r30, 0x3d	; 61
   16cde:	fe b7       	in	r31, 0x3e	; 62
   16ce0:	17 83       	std	Z+7, r17	; 0x07
   16ce2:	06 83       	std	Z+6, r16	; 0x06
   16ce4:	f5 82       	std	Z+5, r15	; 0x05
   16ce6:	e4 82       	std	Z+4, r14	; 0x04
   16ce8:	8c e0       	ldi	r24, 0x0C	; 12
   16cea:	98 e2       	ldi	r25, 0x28	; 40
   16cec:	a0 e0       	ldi	r26, 0x00	; 0
   16cee:	81 83       	std	Z+1, r24	; 0x01
   16cf0:	92 83       	std	Z+2, r25	; 0x02
   16cf2:	a3 83       	std	Z+3, r26	; 0x03
   16cf4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            secondary, len);
#endif
    if(!len)
   16cf8:	01 15       	cp	r16, r1
   16cfa:	11 05       	cpc	r17, r1
   16cfc:	61 f4       	brne	.+24     	; 0x16d16 <Amigo_Command+0x232>
    {
        AMIGOs->dsj = 1;
   16cfe:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   16d02:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   16d06:	81 e0       	ldi	r24, 0x01	; 1
   16d08:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   16d0a:	87 81       	ldd	r24, Z+7	; 0x07
   16d0c:	90 85       	ldd	r25, Z+8	; 0x08
   16d0e:	80 62       	ori	r24, 0x20	; 32
   16d10:	90 87       	std	Z+8, r25	; 0x08
   16d12:	87 83       	std	Z+7, r24	; 0x07
   16d14:	c1 c1       	rjmp	.+898    	; 0x17098 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   16d16:	60 91 04 1d 	lds	r22, 0x1D04	; 0x801d04 <gpib_iobuff>

    if (secondary == 0x68)
   16d1a:	f8 e6       	ldi	r31, 0x68	; 104
   16d1c:	ef 16       	cp	r14, r31
   16d1e:	f1 04       	cpc	r15, r1
   16d20:	09 f0       	breq	.+2      	; 0x16d24 <Amigo_Command+0x240>
   16d22:	28 c1       	rjmp	.+592    	; 0x16f74 <Amigo_Command+0x490>
    {
        if(op == 0x00 && len == 2)
   16d24:	61 11       	cpse	r22, r1
   16d26:	2e c0       	rjmp	.+92     	; 0x16d84 <Amigo_Command+0x2a0>
   16d28:	02 30       	cpi	r16, 0x02	; 2
   16d2a:	11 05       	cpc	r17, r1
   16d2c:	09 f0       	breq	.+2      	; 0x16d30 <Amigo_Command+0x24c>
   16d2e:	b9 c1       	rjmp	.+882    	; 0x170a2 <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16d30:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16d34:	85 ff       	sbrs	r24, 5
   16d36:	0a c0       	rjmp	.+20     	; 0x16d4c <Amigo_Command+0x268>
                printf("[AMIGO Cold Load Read Command]\n");
   16d38:	8c ee       	ldi	r24, 0xEC	; 236
   16d3a:	97 e2       	ldi	r25, 0x27	; 39
   16d3c:	a0 e0       	ldi	r26, 0x00	; 0
   16d3e:	ed b7       	in	r30, 0x3d	; 61
   16d40:	fe b7       	in	r31, 0x3e	; 62
   16d42:	81 83       	std	Z+1, r24	; 0x01
   16d44:	92 83       	std	Z+2, r25	; 0x02
   16d46:	a3 83       	std	Z+3, r26	; 0x03
   16d48:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   16d4c:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   16d50:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   16d54:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   16d56:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   16d58:	10 86       	std	Z+8, r1	; 0x08
   16d5a:	17 82       	std	Z+7, r1	; 0x07
/// Fill in temparary address
            tmp.cyl = 0;
   16d5c:	1d 86       	std	Y+13, r1	; 0x0d
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   16d5e:	80 91 05 1d 	lds	r24, 0x1D05	; 0x801d05 <gpib_iobuff+0x1>
   16d62:	98 2f       	mov	r25, r24
   16d64:	92 95       	swap	r25
   16d66:	96 95       	lsr	r25
   16d68:	96 95       	lsr	r25
   16d6a:	93 70       	andi	r25, 0x03	; 3
   16d6c:	9e 87       	std	Y+14, r25	; 0x0e
            tmp.sector = 0x3f & *ptr;
   16d6e:	8f 73       	andi	r24, 0x3F	; 63
   16d70:	8f 87       	std	Y+15, r24	; 0x0f
            ++ptr;
//update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   16d72:	ce 01       	movw	r24, r28
   16d74:	0a 96       	adiw	r24, 0x0a	; 10
   16d76:	db d9       	rcall	.-3146   	; 0x1612e <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   16d78:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   16d7c:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   16d80:	85 e0       	ldi	r24, 0x05	; 5
   16d82:	19 c1       	rjmp	.+562    	; 0x16fb6 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   16d84:	62 30       	cpi	r22, 0x02	; 2
   16d86:	09 f0       	breq	.+2      	; 0x16d8a <Amigo_Command+0x2a6>
   16d88:	3f c0       	rjmp	.+126    	; 0x16e08 <Amigo_Command+0x324>
   16d8a:	05 30       	cpi	r16, 0x05	; 5
   16d8c:	11 05       	cpc	r17, r1
   16d8e:	d1 f4       	brne	.+52     	; 0x16dc4 <Amigo_Command+0x2e0>
/// @brief
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16d90:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16d94:	85 ff       	sbrs	r24, 5
   16d96:	0a c0       	rjmp	.+20     	; 0x16dac <Amigo_Command+0x2c8>
                printf("[AMIGO Seek len=5]\n");
   16d98:	88 ed       	ldi	r24, 0xD8	; 216
   16d9a:	97 e2       	ldi	r25, 0x27	; 39
   16d9c:	a0 e0       	ldi	r26, 0x00	; 0
   16d9e:	ed b7       	in	r30, 0x3d	; 61
   16da0:	fe b7       	in	r31, 0x3e	; 62
   16da2:	81 83       	std	Z+1, r24	; 0x01
   16da4:	92 83       	std	Z+2, r25	; 0x02
   16da6:	a3 83       	std	Z+3, r26	; 0x03
   16da8:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16dac:	80 91 05 1d 	lds	r24, 0x1D05	; 0x801d05 <gpib_iobuff+0x1>
   16db0:	85 de       	rcall	.-758    	; 0x16abc <amigo_check_unit>

/// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   16db2:	80 91 06 1d 	lds	r24, 0x1D06	; 0x801d06 <gpib_iobuff+0x2>
   16db6:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   16db8:	80 91 07 1d 	lds	r24, 0x1D07	; 0x801d07 <gpib_iobuff+0x3>
   16dbc:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   16dbe:	80 91 08 1d 	lds	r24, 0x1D08	; 0x801d08 <gpib_iobuff+0x4>
   16dc2:	1d c0       	rjmp	.+58     	; 0x16dfe <Amigo_Command+0x31a>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   16dc4:	06 30       	cpi	r16, 0x06	; 6
   16dc6:	11 05       	cpc	r17, r1
   16dc8:	09 f0       	breq	.+2      	; 0x16dcc <Amigo_Command+0x2e8>
   16dca:	6b c1       	rjmp	.+726    	; 0x170a2 <Amigo_Command+0x5be>
/// @brief
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16dcc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16dd0:	85 ff       	sbrs	r24, 5
   16dd2:	0a c0       	rjmp	.+20     	; 0x16de8 <Amigo_Command+0x304>
                printf("[AMIGO Seek len=6]\n");
   16dd4:	84 ec       	ldi	r24, 0xC4	; 196
   16dd6:	97 e2       	ldi	r25, 0x27	; 39
   16dd8:	a0 e0       	ldi	r26, 0x00	; 0
   16dda:	ed b7       	in	r30, 0x3d	; 61
   16ddc:	fe b7       	in	r31, 0x3e	; 62
   16dde:	81 83       	std	Z+1, r24	; 0x01
   16de0:	92 83       	std	Z+2, r25	; 0x02
   16de2:	a3 83       	std	Z+3, r26	; 0x03
   16de4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16de8:	80 91 05 1d 	lds	r24, 0x1D05	; 0x801d05 <gpib_iobuff+0x1>
   16dec:	67 de       	rcall	.-818    	; 0x16abc <amigo_check_unit>
/// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   16dee:	80 91 07 1d 	lds	r24, 0x1D07	; 0x801d07 <gpib_iobuff+0x3>
   16df2:	8d 87       	std	Y+13, r24	; 0x0d
            tmp.head = 0xff & *ptr++;
   16df4:	80 91 08 1d 	lds	r24, 0x1D08	; 0x801d08 <gpib_iobuff+0x4>
   16df8:	8e 87       	std	Y+14, r24	; 0x0e
            tmp.sector = 0xff & *ptr++;
   16dfa:	80 91 09 1d 	lds	r24, 0x1D09	; 0x801d09 <gpib_iobuff+0x5>
//update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   16dfe:	8f 87       	std	Y+15, r24	; 0x0f
   16e00:	ce 01       	movw	r24, r28
   16e02:	0a 96       	adiw	r24, 0x0a	; 10
   16e04:	94 d9       	rcall	.-3288   	; 0x1612e <amigo_seek>
   16e06:	d8 c0       	rjmp	.+432    	; 0x16fb8 <Amigo_Command+0x4d4>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   16e08:	63 30       	cpi	r22, 0x03	; 3
   16e0a:	e9 f4       	brne	.+58     	; 0x16e46 <Amigo_Command+0x362>
   16e0c:	02 30       	cpi	r16, 0x02	; 2
   16e0e:	11 05       	cpc	r17, r1
   16e10:	09 f0       	breq	.+2      	; 0x16e14 <Amigo_Command+0x330>
   16e12:	47 c1       	rjmp	.+654    	; 0x170a2 <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16e14:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e18:	85 ff       	sbrs	r24, 5
   16e1a:	0a c0       	rjmp	.+20     	; 0x16e30 <Amigo_Command+0x34c>
                printf("[AMIGO Request Status Buffered Command]\n");
   16e1c:	8b e9       	ldi	r24, 0x9B	; 155
   16e1e:	97 e2       	ldi	r25, 0x27	; 39
   16e20:	a0 e0       	ldi	r26, 0x00	; 0
   16e22:	ed b7       	in	r30, 0x3d	; 61
   16e24:	fe b7       	in	r31, 0x3e	; 62
   16e26:	81 83       	std	Z+1, r24	; 0x01
   16e28:	92 83       	std	Z+2, r25	; 0x02
   16e2a:	a3 83       	std	Z+3, r26	; 0x03
   16e2c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16e30:	80 91 05 1d 	lds	r24, 0x1D05	; 0x801d05 <gpib_iobuff+0x1>
            amigo_request_status();
   16e34:	43 de       	rcall	.-890    	; 0x16abc <amigo_check_unit>
   16e36:	39 d8       	rcall	.-3982   	; 0x15eaa <amigo_request_status>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   16e38:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   16e3c:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   16e40:	83 e0       	ldi	r24, 0x03	; 3
   16e42:	80 83       	st	Z, r24
   16e44:	29 c1       	rjmp	.+594    	; 0x17098 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   16e46:	65 30       	cpi	r22, 0x05	; 5
   16e48:	d9 f4       	brne	.+54     	; 0x16e80 <Amigo_Command+0x39c>
   16e4a:	02 30       	cpi	r16, 0x02	; 2
   16e4c:	11 05       	cpc	r17, r1
   16e4e:	09 f0       	breq	.+2      	; 0x16e52 <Amigo_Command+0x36e>
   16e50:	28 c1       	rjmp	.+592    	; 0x170a2 <Amigo_Command+0x5be>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16e52:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e56:	85 ff       	sbrs	r24, 5
   16e58:	0a c0       	rjmp	.+20     	; 0x16e6e <Amigo_Command+0x38a>
                printf("[AMIGO Read Unbuffered Command]\n");
   16e5a:	8a e7       	ldi	r24, 0x7A	; 122
   16e5c:	97 e2       	ldi	r25, 0x27	; 39
   16e5e:	a0 e0       	ldi	r26, 0x00	; 0
   16e60:	ed b7       	in	r30, 0x3d	; 61
   16e62:	fe b7       	in	r31, 0x3e	; 62
   16e64:	81 83       	std	Z+1, r24	; 0x01
   16e66:	92 83       	std	Z+2, r25	; 0x02
   16e68:	a3 83       	std	Z+3, r26	; 0x03
   16e6a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16e6e:	80 91 05 1d 	lds	r24, 0x1D05	; 0x801d05 <gpib_iobuff+0x1>
   16e72:	24 de       	rcall	.-952    	; 0x16abc <amigo_check_unit>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   16e74:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   16e78:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   16e7c:	86 e0       	ldi	r24, 0x06	; 6
   16e7e:	e7 c0       	rjmp	.+462    	; 0x1704e <Amigo_Command+0x56a>
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
#endif
        }
        else if(op == 0x07 && len == 4)
   16e80:	67 30       	cpi	r22, 0x07	; 7
   16e82:	f9 f4       	brne	.+62     	; 0x16ec2 <Amigo_Command+0x3de>
   16e84:	04 30       	cpi	r16, 0x04	; 4
   16e86:	11 05       	cpc	r17, r1
   16e88:	09 f0       	breq	.+2      	; 0x16e8c <Amigo_Command+0x3a8>
   16e8a:	0b c1       	rjmp	.+534    	; 0x170a2 <Amigo_Command+0x5be>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16e8c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16e90:	85 ff       	sbrs	r24, 5
   16e92:	0a c0       	rjmp	.+20     	; 0x16ea8 <Amigo_Command+0x3c4>
                printf("[AMIGO Verify]\n");
   16e94:	8a e6       	ldi	r24, 0x6A	; 106
   16e96:	97 e2       	ldi	r25, 0x27	; 39
   16e98:	a0 e0       	ldi	r26, 0x00	; 0
   16e9a:	ed b7       	in	r30, 0x3d	; 61
   16e9c:	fe b7       	in	r31, 0x3e	; 62
   16e9e:	81 83       	std	Z+1, r24	; 0x01
   16ea0:	92 83       	std	Z+2, r25	; 0x02
   16ea2:	a3 83       	std	Z+3, r26	; 0x03
   16ea4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16ea8:	80 91 05 1d 	lds	r24, 0x1D05	; 0x801d05 <gpib_iobuff+0x1>
   16eac:	07 de       	rcall	.-1010   	; 0x16abc <amigo_check_unit>
            sectors = (0xff & *ptr++) << 8;
   16eae:	80 91 06 1d 	lds	r24, 0x1D06	; 0x801d06 <gpib_iobuff+0x2>
   16eb2:	90 e0       	ldi	r25, 0x00	; 0
   16eb4:	98 2f       	mov	r25, r24
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   16eb6:	88 27       	eor	r24, r24
   16eb8:	20 91 07 1d 	lds	r18, 0x1D07	; 0x801d07 <gpib_iobuff+0x3>
   16ebc:	82 2b       	or	r24, r18
   16ebe:	62 d9       	rcall	.-3388   	; 0x16184 <amigo_verify>
   16ec0:	f3 c0       	rjmp	.+486    	; 0x170a8 <Amigo_Command+0x5c4>
        }
        else if(op == 0x08 && len == 2)
   16ec2:	68 30       	cpi	r22, 0x08	; 8
   16ec4:	d9 f4       	brne	.+54     	; 0x16efc <Amigo_Command+0x418>
   16ec6:	02 30       	cpi	r16, 0x02	; 2
   16ec8:	11 05       	cpc	r17, r1
   16eca:	09 f0       	breq	.+2      	; 0x16ece <Amigo_Command+0x3ea>
   16ecc:	ea c0       	rjmp	.+468    	; 0x170a2 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16ece:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16ed2:	85 ff       	sbrs	r24, 5
   16ed4:	0a c0       	rjmp	.+20     	; 0x16eea <Amigo_Command+0x406>
                printf("[AMIGO Write Unbuffered Command]\n");
   16ed6:	88 e4       	ldi	r24, 0x48	; 72
   16ed8:	97 e2       	ldi	r25, 0x27	; 39
   16eda:	a0 e0       	ldi	r26, 0x00	; 0
   16edc:	ed b7       	in	r30, 0x3d	; 61
   16ede:	fe b7       	in	r31, 0x3e	; 62
   16ee0:	81 83       	std	Z+1, r24	; 0x01
   16ee2:	92 83       	std	Z+2, r25	; 0x02
   16ee4:	a3 83       	std	Z+3, r26	; 0x03
   16ee6:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16eea:	80 91 05 1d 	lds	r24, 0x1D05	; 0x801d05 <gpib_iobuff+0x1>
   16eee:	e6 dd       	rcall	.-1076   	; 0x16abc <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   16ef0:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   16ef4:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   16ef8:	88 e0       	ldi	r24, 0x08	; 8
   16efa:	5d c0       	rjmp	.+186    	; 0x16fb6 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   16efc:	86 2f       	mov	r24, r22
   16efe:	8f 7d       	andi	r24, 0xDF	; 223
   16f00:	8b 30       	cpi	r24, 0x0B	; 11
   16f02:	d9 f4       	brne	.+54     	; 0x16f3a <Amigo_Command+0x456>
   16f04:	02 30       	cpi	r16, 0x02	; 2
   16f06:	11 05       	cpc	r17, r1
   16f08:	09 f0       	breq	.+2      	; 0x16f0c <Amigo_Command+0x428>
   16f0a:	cb c0       	rjmp	.+406    	; 0x170a2 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16f0c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f10:	85 ff       	sbrs	r24, 5
   16f12:	0a c0       	rjmp	.+20     	; 0x16f28 <Amigo_Command+0x444>
                printf("[AMIGO Initialize Command]\n");
   16f14:	8c e2       	ldi	r24, 0x2C	; 44
   16f16:	97 e2       	ldi	r25, 0x27	; 39
   16f18:	a0 e0       	ldi	r26, 0x00	; 0
   16f1a:	ed b7       	in	r30, 0x3d	; 61
   16f1c:	fe b7       	in	r31, 0x3e	; 62
   16f1e:	81 83       	std	Z+1, r24	; 0x01
   16f20:	92 83       	std	Z+2, r25	; 0x02
   16f22:	a3 83       	std	Z+3, r26	; 0x03
   16f24:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16f28:	80 91 05 1d 	lds	r24, 0x1D05	; 0x801d05 <gpib_iobuff+0x1>
   16f2c:	c7 dd       	rcall	.-1138   	; 0x16abc <amigo_check_unit>
            AMIGOs->state = AMIGO_INITIALIZE;
   16f2e:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   16f32:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   16f36:	8a e0       	ldi	r24, 0x0A	; 10
   16f38:	3e c0       	rjmp	.+124    	; 0x16fb6 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   16f3a:	64 31       	cpi	r22, 0x14	; 20
   16f3c:	09 f0       	breq	.+2      	; 0x16f40 <Amigo_Command+0x45c>
   16f3e:	b1 c0       	rjmp	.+354    	; 0x170a2 <Amigo_Command+0x5be>
   16f40:	02 30       	cpi	r16, 0x02	; 2
   16f42:	11 05       	cpc	r17, r1
   16f44:	09 f0       	breq	.+2      	; 0x16f48 <Amigo_Command+0x464>
   16f46:	ad c0       	rjmp	.+346    	; 0x170a2 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16f48:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f4c:	85 ff       	sbrs	r24, 5
   16f4e:	0a c0       	rjmp	.+20     	; 0x16f64 <Amigo_Command+0x480>
                printf("[AMIGO Request Logical Address Command]\n");
   16f50:	83 e0       	ldi	r24, 0x03	; 3
   16f52:	97 e2       	ldi	r25, 0x27	; 39
   16f54:	a0 e0       	ldi	r26, 0x00	; 0
   16f56:	ed b7       	in	r30, 0x3d	; 61
   16f58:	fe b7       	in	r31, 0x3e	; 62
   16f5a:	81 83       	std	Z+1, r24	; 0x01
   16f5c:	92 83       	std	Z+2, r25	; 0x02
   16f5e:	a3 83       	std	Z+3, r26	; 0x03
   16f60:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
            amigo_request_logical_address();
   16f64:	0e 94 47 af 	call	0x15e8e	; 0x15e8e <amigo_request_logical_address>
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   16f68:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   16f6c:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   16f70:	84 e0       	ldi	r24, 0x04	; 4
   16f72:	21 c0       	rjmp	.+66     	; 0x16fb6 <Amigo_Command+0x4d2>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   16f74:	f9 e6       	ldi	r31, 0x69	; 105
   16f76:	ef 16       	cp	r14, r31
   16f78:	f1 04       	cpc	r15, r1
   16f7a:	39 f5       	brne	.+78     	; 0x16fca <Amigo_Command+0x4e6>
    {
        if(op == 0x08 && len == 2)
   16f7c:	68 30       	cpi	r22, 0x08	; 8
   16f7e:	09 f0       	breq	.+2      	; 0x16f82 <Amigo_Command+0x49e>
   16f80:	90 c0       	rjmp	.+288    	; 0x170a2 <Amigo_Command+0x5be>
   16f82:	02 30       	cpi	r16, 0x02	; 2
   16f84:	11 05       	cpc	r17, r1
   16f86:	09 f0       	breq	.+2      	; 0x16f8a <Amigo_Command+0x4a6>
   16f88:	8c c0       	rjmp	.+280    	; 0x170a2 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16f8a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16f8e:	85 ff       	sbrs	r24, 5
   16f90:	0a c0       	rjmp	.+20     	; 0x16fa6 <Amigo_Command+0x4c2>
                printf("[AMIGO Write Buffered Command]\n");
   16f92:	83 ee       	ldi	r24, 0xE3	; 227
   16f94:	96 e2       	ldi	r25, 0x26	; 38
   16f96:	a0 e0       	ldi	r26, 0x00	; 0
   16f98:	ed b7       	in	r30, 0x3d	; 61
   16f9a:	fe b7       	in	r31, 0x3e	; 62
   16f9c:	81 83       	std	Z+1, r24	; 0x01
   16f9e:	92 83       	std	Z+2, r25	; 0x02
   16fa0:	a3 83       	std	Z+3, r26	; 0x03
   16fa2:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16fa6:	80 91 05 1d 	lds	r24, 0x1D05	; 0x801d05 <gpib_iobuff+0x1>
   16faa:	88 dd       	rcall	.-1264   	; 0x16abc <amigo_check_unit>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   16fac:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   16fb0:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   16fb4:	89 e0       	ldi	r24, 0x09	; 9
   16fb6:	80 83       	st	Z, r24
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16fb8:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   16fbc:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   16fc0:	81 81       	ldd	r24, Z+1	; 0x01
   16fc2:	90 e0       	ldi	r25, 0x00	; 0
   16fc4:	0e 94 63 84 	call	0x108c6	; 0x108c6 <gpib_enable_PPR>
   16fc8:	67 c0       	rjmp	.+206    	; 0x17098 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   16fca:	fa e6       	ldi	r31, 0x6A	; 106
   16fcc:	ef 16       	cp	r14, r31
   16fce:	f1 04       	cpc	r15, r1
   16fd0:	09 f0       	breq	.+2      	; 0x16fd4 <Amigo_Command+0x4f0>
   16fd2:	40 c0       	rjmp	.+128    	; 0x17054 <Amigo_Command+0x570>
    {
        if(op == 0x08 && len == 2)
   16fd4:	68 30       	cpi	r22, 0x08	; 8
   16fd6:	f1 f4       	brne	.+60     	; 0x17014 <Amigo_Command+0x530>
   16fd8:	02 30       	cpi	r16, 0x02	; 2
   16fda:	11 05       	cpc	r17, r1
   16fdc:	09 f0       	breq	.+2      	; 0x16fe0 <Amigo_Command+0x4fc>
   16fde:	61 c0       	rjmp	.+194    	; 0x170a2 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   16fe0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   16fe4:	85 ff       	sbrs	r24, 5
   16fe6:	0a c0       	rjmp	.+20     	; 0x16ffc <Amigo_Command+0x518>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   16fe8:	88 eb       	ldi	r24, 0xB8	; 184
   16fea:	96 e2       	ldi	r25, 0x26	; 38
   16fec:	a0 e0       	ldi	r26, 0x00	; 0
   16fee:	ed b7       	in	r30, 0x3d	; 61
   16ff0:	fe b7       	in	r31, 0x3e	; 62
   16ff2:	81 83       	std	Z+1, r24	; 0x01
   16ff4:	92 83       	std	Z+2, r25	; 0x02
   16ff6:	a3 83       	std	Z+3, r26	; 0x03
   16ff8:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16ffc:	80 91 05 1d 	lds	r24, 0x1D05	; 0x801d05 <gpib_iobuff+0x1>
   17000:	5d dd       	rcall	.-1350   	; 0x16abc <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   17002:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   17006:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   1700a:	82 e0       	ldi	r24, 0x02	; 2
   1700c:	80 83       	st	Z, r24
            amigo_request_status();
   1700e:	0e 94 55 af 	call	0x15eaa	; 0x15eaa <amigo_request_status>
   17012:	42 c0       	rjmp	.+132    	; 0x17098 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   17014:	65 30       	cpi	r22, 0x05	; 5
   17016:	09 f0       	breq	.+2      	; 0x1701a <Amigo_Command+0x536>
   17018:	44 c0       	rjmp	.+136    	; 0x170a2 <Amigo_Command+0x5be>
   1701a:	02 30       	cpi	r16, 0x02	; 2
   1701c:	11 05       	cpc	r17, r1
   1701e:	09 f0       	breq	.+2      	; 0x17022 <Amigo_Command+0x53e>
   17020:	40 c0       	rjmp	.+128    	; 0x170a2 <Amigo_Command+0x5be>
        {
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17022:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17026:	85 ff       	sbrs	r24, 5
   17028:	0a c0       	rjmp	.+20     	; 0x1703e <Amigo_Command+0x55a>
                printf("[AMIGO Read Buffered Command]\n");
   1702a:	89 e9       	ldi	r24, 0x99	; 153
   1702c:	96 e2       	ldi	r25, 0x26	; 38
   1702e:	a0 e0       	ldi	r26, 0x00	; 0
   17030:	ed b7       	in	r30, 0x3d	; 61
   17032:	fe b7       	in	r31, 0x3e	; 62
   17034:	81 83       	std	Z+1, r24	; 0x01
   17036:	92 83       	std	Z+2, r25	; 0x02
   17038:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1703a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1703e:	80 91 05 1d 	lds	r24, 0x1D05	; 0x801d05 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   17042:	3c dd       	rcall	.-1416   	; 0x16abc <amigo_check_unit>
   17044:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   17048:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   1704c:	87 e0       	ldi	r24, 0x07	; 7

#if 0
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
#else
			return( amigo_buffered_read_command() );
   1704e:	80 83       	st	Z, r24
   17050:	ca d9       	rcall	.-3180   	; 0x163e6 <amigo_buffered_read_command>
   17052:	2a c0       	rjmp	.+84     	; 0x170a8 <Amigo_Command+0x5c4>
#endif
        }
    }
    else if (secondary == 0x6C)
   17054:	fc e6       	ldi	r31, 0x6C	; 108
   17056:	ef 16       	cp	r14, r31
   17058:	f1 04       	cpc	r15, r1
   1705a:	d1 f4       	brne	.+52     	; 0x17090 <Amigo_Command+0x5ac>
    {
        if(op == 0x18 && len == 5)
   1705c:	68 31       	cpi	r22, 0x18	; 24
   1705e:	09 f5       	brne	.+66     	; 0x170a2 <Amigo_Command+0x5be>
   17060:	05 30       	cpi	r16, 0x05	; 5
   17062:	11 05       	cpc	r17, r1
   17064:	f1 f4       	brne	.+60     	; 0x170a2 <Amigo_Command+0x5be>
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17066:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1706a:	85 ff       	sbrs	r24, 5
   1706c:	0a c0       	rjmp	.+20     	; 0x17082 <Amigo_Command+0x59e>
                printf("[AMIGO Format]\n");
   1706e:	89 e8       	ldi	r24, 0x89	; 137
   17070:	96 e2       	ldi	r25, 0x26	; 38
   17072:	a0 e0       	ldi	r26, 0x00	; 0
   17074:	ed b7       	in	r30, 0x3d	; 61
   17076:	fe b7       	in	r31, 0x3e	; 62
   17078:	81 83       	std	Z+1, r24	; 0x01
   1707a:	92 83       	std	Z+2, r25	; 0x02
   1707c:	a3 83       	std	Z+3, r26	; 0x03
#endif
///TODO we do not support multiple units yet
///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1707e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   17082:	80 91 05 1d 	lds	r24, 0x1D05	; 0x801d05 <gpib_iobuff+0x1>
            ++ptr;                                // override not used
            ++ptr;                                // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   17086:	1a dd       	rcall	.-1484   	; 0x16abc <amigo_check_unit>
   17088:	80 91 08 1d 	lds	r24, 0x1D08	; 0x801d08 <gpib_iobuff+0x4>
   1708c:	17 d9       	rcall	.-3538   	; 0x162bc <amigo_format>
   1708e:	04 c0       	rjmp	.+8      	; 0x17098 <Amigo_Command+0x5b4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   17090:	f0 e7       	ldi	r31, 0x70	; 112
   17092:	ef 16       	cp	r14, r31
   17094:	f1 04       	cpc	r15, r1
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   17096:	29 f4       	brne	.+10     	; 0x170a2 <Amigo_Command+0x5be>
   17098:	8b 8d       	ldd	r24, Y+27	; 0x1b
   1709a:	9c 8d       	ldd	r25, Y+28	; 0x1c
   1709c:	88 27       	eor	r24, r24
   1709e:	90 7d       	andi	r25, 0xD0	; 208
    }
    return ( amigo_todo_op(secondary, op, len) );
   170a0:	03 c0       	rjmp	.+6      	; 0x170a8 <Amigo_Command+0x5c4>
   170a2:	a8 01       	movw	r20, r16
   170a4:	8e 2d       	mov	r24, r14
   170a6:	ed db       	rcall	.-2086   	; 0x16882 <amigo_todo_op>
}
   170a8:	6c 96       	adiw	r28, 0x1c	; 28
   170aa:	e6 e0       	ldi	r30, 0x06	; 6
   170ac:	0c 94 00 e1 	jmp	0x1c200	; 0x1c200 <__epilogue_restores__+0x18>

000170b0 <Amigo_Execute>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Execute( int secondary )
{
   170b0:	a9 e0       	ldi	r26, 0x09	; 9
   170b2:	b0 e0       	ldi	r27, 0x00	; 0
   170b4:	ee e5       	ldi	r30, 0x5E	; 94
   170b6:	f8 eb       	ldi	r31, 0xB8	; 184
   170b8:	0c 94 e8 e0 	jmp	0x1c1d0	; 0x1c1d0 <__prologue_saves__+0x20>
   170bc:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   170be:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   170c2:	85 ff       	sbrs	r24, 5
   170c4:	16 c0       	rjmp	.+44     	; 0x170f2 <Amigo_Execute+0x42>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   170c6:	80 91 08 1f 	lds	r24, 0x1F08	; 0x801f08 <talking>
   170ca:	90 e0       	ldi	r25, 0x00	; 0
   170cc:	ed b7       	in	r30, 0x3d	; 61
   170ce:	fe b7       	in	r31, 0x3e	; 62
   170d0:	91 87       	std	Z+9, r25	; 0x09
   170d2:	80 87       	std	Z+8, r24	; 0x08
   170d4:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   170d8:	90 e0       	ldi	r25, 0x00	; 0
   170da:	97 83       	std	Z+7, r25	; 0x07
   170dc:	86 83       	std	Z+6, r24	; 0x06
   170de:	d5 83       	std	Z+5, r29	; 0x05
   170e0:	c4 83       	std	Z+4, r28	; 0x04
   170e2:	87 e5       	ldi	r24, 0x57	; 87
   170e4:	96 e2       	ldi	r25, 0x26	; 38
   170e6:	a0 e0       	ldi	r26, 0x00	; 0
   170e8:	81 83       	std	Z+1, r24	; 0x01
   170ea:	92 83       	std	Z+2, r25	; 0x02
   170ec:	a3 83       	std	Z+3, r26	; 0x03
   170ee:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            secondary, listening, talking);
#endif

    if(talking == UNT)
   170f2:	80 91 08 1f 	lds	r24, 0x1F08	; 0x801f08 <talking>
   170f6:	8f 35       	cpi	r24, 0x5F	; 95
   170f8:	09 f4       	brne	.+2      	; 0x170fc <Amigo_Execute+0x4c>
   170fa:	ad c0       	rjmp	.+346    	; 0x17256 <Amigo_Execute+0x1a6>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   170fc:	90 e0       	ldi	r25, 0x00	; 0
   170fe:	0e 94 f9 8a 	call	0x115f2	; 0x115f2 <AMIGO_is_MTA>
   17102:	89 2b       	or	r24, r25
   17104:	39 f0       	breq	.+14     	; 0x17114 <Amigo_Execute+0x64>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   17106:	ce 01       	movw	r24, r28
   17108:	87 7f       	andi	r24, 0xF7	; 247
   1710a:	80 36       	cpi	r24, 0x60	; 96
   1710c:	91 05       	cpc	r25, r1
   1710e:	09 f0       	breq	.+2      	; 0x17112 <Amigo_Execute+0x62>
   17110:	a2 c0       	rjmp	.+324    	; 0x17256 <Amigo_Execute+0x1a6>
   17112:	08 c0       	rjmp	.+16     	; 0x17124 <Amigo_Execute+0x74>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   17114:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   17118:	90 e0       	ldi	r25, 0x00	; 0
   1711a:	0e 94 e8 8a 	call	0x115d0	; 0x115d0 <AMIGO_is_MLA>
   1711e:	89 2b       	or	r24, r25
   17120:	91 f7       	brne	.-28     	; 0x17106 <Amigo_Execute+0x56>
   17122:	99 c0       	rjmp	.+306    	; 0x17256 <Amigo_Execute+0x1a6>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   17124:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   17128:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   1712c:	81 81       	ldd	r24, Z+1	; 0x01
   1712e:	90 e0       	ldi	r25, 0x00	; 0
   17130:	0e 94 99 84 	call	0x10932	; 0x10932 <gpib_disable_PPR>

    if(secondary == 0x60)
   17134:	c0 36       	cpi	r28, 0x60	; 96
   17136:	d1 05       	cpc	r29, r1
   17138:	09 f0       	breq	.+2      	; 0x1713c <Amigo_Execute+0x8c>
   1713a:	4e c0       	rjmp	.+156    	; 0x171d8 <Amigo_Execute+0x128>
    {
        switch(AMIGOs->state)
   1713c:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   17140:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   17144:	e0 81       	ld	r30, Z
   17146:	8e 2f       	mov	r24, r30
   17148:	90 e0       	ldi	r25, 0x00	; 0
   1714a:	8b 30       	cpi	r24, 0x0B	; 11
   1714c:	91 05       	cpc	r25, r1
   1714e:	08 f0       	brcs	.+2      	; 0x17152 <Amigo_Execute+0xa2>
   17150:	41 c0       	rjmp	.+130    	; 0x171d4 <Amigo_Execute+0x124>
   17152:	fc 01       	movw	r30, r24
   17154:	e0 52       	subi	r30, 0x20	; 32
   17156:	ff 4f       	sbci	r31, 0xFF	; 255
   17158:	0c 94 a9 e0 	jmp	0x1c152	; 0x1c152 <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1715c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17160:	85 ff       	sbrs	r24, 5
   17162:	18 c0       	rjmp	.+48     	; 0x17194 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Cold Load Read]\n");
   17164:	87 e3       	ldi	r24, 0x37	; 55
   17166:	96 e2       	ldi	r25, 0x26	; 38
   17168:	0d c0       	rjmp	.+26     	; 0x17184 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1716a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1716e:	85 ff       	sbrs	r24, 5
   17170:	11 c0       	rjmp	.+34     	; 0x17194 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   17172:	86 e1       	ldi	r24, 0x16	; 22
   17174:	96 e2       	ldi	r25, 0x26	; 38
   17176:	06 c0       	rjmp	.+12     	; 0x17184 <Amigo_Execute+0xd4>
#endif
                return ( amigo_buffered_read_execute() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17178:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1717c:	85 ff       	sbrs	r24, 5
   1717e:	0a c0       	rjmp	.+20     	; 0x17194 <Amigo_Execute+0xe4>
                    printf("[AMIGO Execute Read Buffered]\n");
   17180:	87 ef       	ldi	r24, 0xF7	; 247
   17182:	95 e2       	ldi	r25, 0x25	; 37
   17184:	a0 e0       	ldi	r26, 0x00	; 0
   17186:	ed b7       	in	r30, 0x3d	; 61
   17188:	fe b7       	in	r31, 0x3e	; 62
   1718a:	81 83       	std	Z+1, r24	; 0x01
   1718c:	92 83       	std	Z+2, r25	; 0x02
   1718e:	a3 83       	std	Z+3, r26	; 0x03
   17190:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
                return ( amigo_buffered_read_execute() );
   17194:	b2 d9       	rcall	.-3228   	; 0x164fa <amigo_buffered_read_execute>
   17196:	61 c0       	rjmp	.+194    	; 0x1725a <Amigo_Execute+0x1aa>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17198:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1719c:	85 ff       	sbrs	r24, 5
   1719e:	18 c0       	rjmp	.+48     	; 0x171d0 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Unbuffered]\n");
   171a0:	85 ed       	ldi	r24, 0xD5	; 213
   171a2:	95 e2       	ldi	r25, 0x25	; 37
   171a4:	0d c0       	rjmp	.+26     	; 0x171c0 <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   171a6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   171aa:	85 ff       	sbrs	r24, 5
   171ac:	11 c0       	rjmp	.+34     	; 0x171d0 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Initialize]\n");
   171ae:	89 eb       	ldi	r24, 0xB9	; 185
   171b0:	95 e2       	ldi	r25, 0x25	; 37
   171b2:	06 c0       	rjmp	.+12     	; 0x171c0 <Amigo_Execute+0x110>
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   171b4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   171b8:	85 ff       	sbrs	r24, 5
   171ba:	0a c0       	rjmp	.+20     	; 0x171d0 <Amigo_Execute+0x120>
                    printf("[AMIGO Execute Write Buffered]\n");
   171bc:	89 e9       	ldi	r24, 0x99	; 153
   171be:	95 e2       	ldi	r25, 0x25	; 37
   171c0:	a0 e0       	ldi	r26, 0x00	; 0
   171c2:	ed b7       	in	r30, 0x3d	; 61
   171c4:	fe b7       	in	r31, 0x3e	; 62
   171c6:	81 83       	std	Z+1, r24	; 0x01
   171c8:	92 83       	std	Z+2, r25	; 0x02
   171ca:	a3 83       	std	Z+3, r26	; 0x03
   171cc:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
                return ( amigo_buffered_write() );
   171d0:	f8 d9       	rcall	.-3088   	; 0x165c2 <amigo_buffered_write>
   171d2:	43 c0       	rjmp	.+134    	; 0x1725a <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   171d4:	80 e6       	ldi	r24, 0x60	; 96
   171d6:	3d c0       	rjmp	.+122    	; 0x17252 <Amigo_Execute+0x1a2>
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   171d8:	c8 36       	cpi	r28, 0x68	; 104
   171da:	d1 05       	cpc	r29, r1
   171dc:	e1 f5       	brne	.+120    	; 0x17256 <Amigo_Execute+0x1a6>
    {
        switch(AMIGOs->state)
   171de:	e0 91 7d 19 	lds	r30, 0x197D	; 0x80197d <AMIGOs>
   171e2:	f0 91 7e 19 	lds	r31, 0x197E	; 0x80197e <AMIGOs+0x1>
   171e6:	80 81       	ld	r24, Z
   171e8:	82 30       	cpi	r24, 0x02	; 2
   171ea:	81 f0       	breq	.+32     	; 0x1720c <Amigo_Execute+0x15c>
   171ec:	18 f4       	brcc	.+6      	; 0x171f4 <Amigo_Execute+0x144>
   171ee:	88 23       	and	r24, r24
   171f0:	91 f1       	breq	.+100    	; 0x17256 <Amigo_Execute+0x1a6>
   171f2:	2e c0       	rjmp	.+92     	; 0x17250 <Amigo_Execute+0x1a0>
   171f4:	83 30       	cpi	r24, 0x03	; 3
   171f6:	19 f0       	breq	.+6      	; 0x171fe <Amigo_Execute+0x14e>
   171f8:	84 30       	cpi	r24, 0x04	; 4
   171fa:	c9 f0       	breq	.+50     	; 0x1722e <Amigo_Execute+0x17e>
   171fc:	29 c0       	rjmp	.+82     	; 0x17250 <Amigo_Execute+0x1a0>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   171fe:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17202:	85 ff       	sbrs	r24, 5
   17204:	11 c0       	rjmp	.+34     	; 0x17228 <Amigo_Execute+0x178>
                    printf("[AMIGO Execute Request Status Buffered]\n");
   17206:	80 e7       	ldi	r24, 0x70	; 112
   17208:	95 e2       	ldi	r25, 0x25	; 37
   1720a:	06 c0       	rjmp	.+12     	; 0x17218 <Amigo_Execute+0x168>
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1720c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17210:	85 ff       	sbrs	r24, 5
   17212:	0a c0       	rjmp	.+20     	; 0x17228 <Amigo_Execute+0x178>
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   17214:	85 e4       	ldi	r24, 0x45	; 69
   17216:	95 e2       	ldi	r25, 0x25	; 37
   17218:	a0 e0       	ldi	r26, 0x00	; 0
   1721a:	ed b7       	in	r30, 0x3d	; 61
   1721c:	fe b7       	in	r31, 0x3e	; 62
   1721e:	81 83       	std	Z+1, r24	; 0x01
   17220:	92 83       	std	Z+2, r25	; 0x02
   17222:	a3 83       	std	Z+3, r26	; 0x03
   17224:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
                return ( amigo_send_status() );
   17228:	0e 94 10 b0 	call	0x16020	; 0x16020 <amigo_send_status>
   1722c:	16 c0       	rjmp	.+44     	; 0x1725a <Amigo_Execute+0x1aa>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   1722e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17232:	85 ff       	sbrs	r24, 5
   17234:	0a c0       	rjmp	.+20     	; 0x1724a <Amigo_Execute+0x19a>
                    printf("[AMIGO Execute Request Logical Address]\n");
   17236:	8c e1       	ldi	r24, 0x1C	; 28
   17238:	95 e2       	ldi	r25, 0x25	; 37
   1723a:	a0 e0       	ldi	r26, 0x00	; 0
   1723c:	ed b7       	in	r30, 0x3d	; 61
   1723e:	fe b7       	in	r31, 0x3e	; 62
   17240:	81 83       	std	Z+1, r24	; 0x01
   17242:	92 83       	std	Z+2, r25	; 0x02
   17244:	a3 83       	std	Z+3, r26	; 0x03
   17246:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
                return ( amigo_send_logical_address() );
   1724a:	0e 94 b2 af 	call	0x15f64	; 0x15f64 <amigo_send_logical_address>
   1724e:	05 c0       	rjmp	.+10     	; 0x1725a <Amigo_Execute+0x1aa>
            default:
                return ( amigo_todo(secondary) );
   17250:	88 e6       	ldi	r24, 0x68	; 104
   17252:	b0 db       	rcall	.-2208   	; 0x169b4 <amigo_todo>
   17254:	02 c0       	rjmp	.+4      	; 0x1725a <Amigo_Execute+0x1aa>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   17256:	80 e0       	ldi	r24, 0x00	; 0
   17258:	90 e0       	ldi	r25, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   1725a:	cd b7       	in	r28, 0x3d	; 61
   1725c:	de b7       	in	r29, 0x3e	; 62
   1725e:	29 96       	adiw	r28, 0x09	; 9
   17260:	e2 e0       	ldi	r30, 0x02	; 2
   17262:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

00017266 <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   17266:	cf 93       	push	r28
   17268:	df 93       	push	r29
   1726a:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   1726c:	80 91 08 1f 	lds	r24, 0x1F08	; 0x801f08 <talking>
   17270:	90 e0       	ldi	r25, 0x00	; 0
   17272:	0e 94 f9 8a 	call	0x115f2	; 0x115f2 <AMIGO_is_MTA>
   17276:	89 2b       	or	r24, r25
   17278:	51 f0       	breq	.+20     	; 0x1728e <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   1727a:	80 91 08 1f 	lds	r24, 0x1F08	; 0x801f08 <talking>
   1727e:	8f 35       	cpi	r24, 0x5F	; 95
   17280:	71 f4       	brne	.+28     	; 0x1729e <AMIGO_COMMANDS+0x38>
   17282:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   17286:	90 e0       	ldi	r25, 0x00	; 0
   17288:	0e 94 e8 8a 	call	0x115d0	; 0x115d0 <AMIGO_is_MLA>
   1728c:	08 c0       	rjmp	.+16     	; 0x1729e <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   1728e:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   17292:	90 e0       	ldi	r25, 0x00	; 0
   17294:	0e 94 e8 8a 	call	0x115d0	; 0x115d0 <AMIGO_is_MLA>
   17298:	89 2b       	or	r24, r25
   1729a:	79 f7       	brne	.-34     	; 0x1727a <AMIGO_COMMANDS+0x14>
   1729c:	76 c0       	rjmp	.+236    	; 0x1738a <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
// printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   1729e:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   172a2:	81 11       	cpse	r24, r1
   172a4:	05 c0       	rjmp	.+10     	; 0x172b0 <AMIGO_COMMANDS+0x4a>
   172a6:	80 91 08 1f 	lds	r24, 0x1F08	; 0x801f08 <talking>
   172aa:	90 e0       	ldi	r25, 0x00	; 0
   172ac:	0e 94 f9 8a 	call	0x115f2	; 0x115f2 <AMIGO_is_MTA>
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   172b0:	c0 36       	cpi	r28, 0x60	; 96
   172b2:	99 f4       	brne	.+38     	; 0x172da <AMIGO_COMMANDS+0x74>
   172b4:	80 91 08 1f 	lds	r24, 0x1F08	; 0x801f08 <talking>
   172b8:	90 e0       	ldi	r25, 0x00	; 0
   172ba:	0e 94 f9 8a 	call	0x115f2	; 0x115f2 <AMIGO_is_MTA>
   172be:	89 2b       	or	r24, r25
   172c0:	19 f0       	breq	.+6      	; 0x172c8 <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   172c2:	80 e6       	ldi	r24, 0x60	; 96
   172c4:	90 e0       	ldi	r25, 0x00	; 0
   172c6:	14 c0       	rjmp	.+40     	; 0x172f0 <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
// printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   172c8:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   172cc:	90 e0       	ldi	r25, 0x00	; 0
   172ce:	0e 94 e8 8a 	call	0x115d0	; 0x115d0 <AMIGO_is_MLA>
   172d2:	89 2b       	or	r24, r25
   172d4:	09 f4       	brne	.+2      	; 0x172d8 <AMIGO_COMMANDS+0x72>
   172d6:	59 c0       	rjmp	.+178    	; 0x1738a <AMIGO_COMMANDS+0x124>
   172d8:	f4 cf       	rjmp	.-24     	; 0x172c2 <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   172da:	c8 36       	cpi	r28, 0x68	; 104
   172dc:	c1 f4       	brne	.+48     	; 0x1730e <AMIGO_COMMANDS+0xa8>
   172de:	80 91 08 1f 	lds	r24, 0x1F08	; 0x801f08 <talking>
   172e2:	90 e0       	ldi	r25, 0x00	; 0
   172e4:	0e 94 f9 8a 	call	0x115f2	; 0x115f2 <AMIGO_is_MTA>
   172e8:	89 2b       	or	r24, r25
   172ea:	21 f0       	breq	.+8      	; 0x172f4 <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   172ec:	88 e6       	ldi	r24, 0x68	; 104
   172ee:	90 e0       	ldi	r25, 0x00	; 0
   172f0:	df de       	rcall	.-578    	; 0x170b0 <Amigo_Execute>
   172f2:	0b c0       	rjmp	.+22     	; 0x1730a <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
   172f4:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   172f8:	90 e0       	ldi	r25, 0x00	; 0
   172fa:	0e 94 e8 8a 	call	0x115d0	; 0x115d0 <AMIGO_is_MLA>
   172fe:	89 2b       	or	r24, r25
   17300:	09 f4       	brne	.+2      	; 0x17304 <AMIGO_COMMANDS+0x9e>
   17302:	43 c0       	rjmp	.+134    	; 0x1738a <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17304:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
   17306:	90 e0       	ldi	r25, 0x00	; 0
   17308:	ed db       	rcall	.-2086   	; 0x16ae4 <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   1730a:	ec 01       	movw	r28, r24
   1730c:	40 c0       	rjmp	.+128    	; 0x1738e <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) )// Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) )// Single byte command
   1730e:	c9 36       	cpi	r28, 0x69	; 105
   17310:	51 f4       	brne	.+20     	; 0x17326 <AMIGO_COMMANDS+0xc0>
   17312:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   17316:	90 e0       	ldi	r25, 0x00	; 0
   17318:	0e 94 e8 8a 	call	0x115d0	; 0x115d0 <AMIGO_is_MLA>
   1731c:	89 2b       	or	r24, r25
   1731e:	a9 f1       	breq	.+106    	; 0x1738a <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17320:	89 e6       	ldi	r24, 0x69	; 105
   17322:	90 e0       	ldi	r25, 0x00	; 0
   17324:	f1 cf       	rjmp	.-30     	; 0x17308 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) )// Single byte command
   17326:	ca 36       	cpi	r28, 0x6A	; 106
   17328:	51 f4       	brne	.+20     	; 0x1733e <AMIGO_COMMANDS+0xd8>
   1732a:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   1732e:	90 e0       	ldi	r25, 0x00	; 0
   17330:	0e 94 e8 8a 	call	0x115d0	; 0x115d0 <AMIGO_is_MLA>
   17334:	89 2b       	or	r24, r25
   17336:	49 f1       	breq	.+82     	; 0x1738a <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17338:	8a e6       	ldi	r24, 0x6A	; 106
   1733a:	90 e0       	ldi	r25, 0x00	; 0
   1733c:	e5 cf       	rjmp	.-54     	; 0x17308 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) )// Single byte command
   1733e:	cc 36       	cpi	r28, 0x6C	; 108
   17340:	51 f4       	brne	.+20     	; 0x17356 <AMIGO_COMMANDS+0xf0>
   17342:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   17346:	90 e0       	ldi	r25, 0x00	; 0
   17348:	0e 94 e8 8a 	call	0x115d0	; 0x115d0 <AMIGO_is_MLA>
   1734c:	89 2b       	or	r24, r25
   1734e:	e9 f0       	breq	.+58     	; 0x1738a <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   17350:	8c e6       	ldi	r24, 0x6C	; 108
   17352:	90 e0       	ldi	r25, 0x00	; 0
   17354:	d9 cf       	rjmp	.-78     	; 0x17308 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   17356:	c0 37       	cpi	r28, 0x70	; 112
   17358:	c1 f4       	brne	.+48     	; 0x1738a <AMIGO_COMMANDS+0x124>
   1735a:	80 91 08 1f 	lds	r24, 0x1F08	; 0x801f08 <talking>
   1735e:	90 e0       	ldi	r25, 0x00	; 0
   17360:	0e 94 f9 8a 	call	0x115f2	; 0x115f2 <AMIGO_is_MTA>
   17364:	ec 01       	movw	r28, r24
   17366:	89 2b       	or	r24, r25
   17368:	51 f0       	breq	.+20     	; 0x1737e <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   1736a:	e0 91 7f 19 	lds	r30, 0x197F	; 0x80197f <AMIGOp>
   1736e:	f0 91 80 19 	lds	r31, 0x1980	; 0x801980 <AMIGOp+0x1>
   17372:	81 81       	ldd	r24, Z+1	; 0x01
   17374:	90 e0       	ldi	r25, 0x00	; 0
   17376:	0e 94 99 84 	call	0x10932	; 0x10932 <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   1737a:	fa d9       	rcall	.-3084   	; 0x16770 <amigo_cmd_dsj>
   1737c:	c6 cf       	rjmp	.-116    	; 0x1730a <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   1737e:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   17382:	90 e0       	ldi	r25, 0x00	; 0
   17384:	0e 94 e8 8a 	call	0x115d0	; 0x115d0 <AMIGO_is_MLA>
   17388:	02 c0       	rjmp	.+4      	; 0x1738e <AMIGO_COMMANDS+0x128>
        {
// NOP
        }
    }
    return(0);
   1738a:	c0 e0       	ldi	r28, 0x00	; 0
   1738c:	d0 e0       	ldi	r29, 0x00	; 0
}
   1738e:	ce 01       	movw	r24, r28
   17390:	df 91       	pop	r29
   17392:	cf 91       	pop	r28
   17394:	08 95       	ret

00017396 <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   17396:	e8 eb       	ldi	r30, 0xB8	; 184
   17398:	f9 e1       	ldi	r31, 0x19	; 25
   1739a:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   1739c:	10 82       	st	Z, r1
   1739e:	11 82       	std	Z+1, r1	; 0x01
   173a0:	12 82       	std	Z+2, r1	; 0x02
   173a2:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   173a4:	15 82       	std	Z+5, r1	; 0x05
   173a6:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   173a8:	12 86       	std	Z+10, r1	; 0x0a
   173aa:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   173ac:	14 86       	std	Z+12, r1	; 0x0c
   173ae:	13 86       	std	Z+11, r1	; 0x0b
   173b0:	08 95       	ret

000173b2 <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   173b2:	cf 93       	push	r28
   173b4:	df 93       	push	r29
   173b6:	ad b7       	in	r26, 0x3d	; 61
   173b8:	be b7       	in	r27, 0x3e	; 62
   173ba:	17 97       	sbiw	r26, 0x07	; 7
   173bc:	0f b6       	in	r0, 0x3f	; 63
   173be:	f8 94       	cli
   173c0:	be bf       	out	0x3e, r27	; 62
   173c2:	0f be       	out	0x3f, r0	; 63
   173c4:	ad bf       	out	0x3d, r26	; 61
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   173c6:	20 91 c1 19 	lds	r18, 0x19C1	; 0x8019c1 <plot+0x9>
   173ca:	30 91 c2 19 	lds	r19, 0x19C2	; 0x8019c2 <plot+0xa>
   173ce:	21 15       	cp	r18, r1
   173d0:	31 05       	cpc	r19, r1
   173d2:	09 f4       	brne	.+2      	; 0x173d6 <receive_plot_flush+0x24>
   173d4:	45 c0       	rjmp	.+138    	; 0x17460 <receive_plot_flush+0xae>
   173d6:	80 91 bc 19 	lds	r24, 0x19BC	; 0x8019bc <plot+0x4>
   173da:	90 91 bd 19 	lds	r25, 0x19BD	; 0x8019bd <plot+0x5>
   173de:	00 97       	sbiw	r24, 0x00	; 0
   173e0:	09 f4       	brne	.+2      	; 0x173e4 <receive_plot_flush+0x32>
   173e2:	40 c0       	rjmp	.+128    	; 0x17464 <receive_plot_flush+0xb2>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   173e4:	ac 01       	movw	r20, r24
   173e6:	61 e0       	ldi	r22, 0x01	; 1
   173e8:	70 e0       	ldi	r23, 0x00	; 0
   173ea:	80 91 c3 19 	lds	r24, 0x19C3	; 0x8019c3 <plot+0xb>
   173ee:	90 91 c4 19 	lds	r25, 0x19C4	; 0x8019c4 <plot+0xc>
   173f2:	0e 94 af 7a 	call	0xf55e	; 0xf55e <fwrite>
   173f6:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   173f8:	80 91 bc 19 	lds	r24, 0x19BC	; 0x8019bc <plot+0x4>
   173fc:	90 91 bd 19 	lds	r25, 0x19BD	; 0x8019bd <plot+0x5>
   17400:	c8 17       	cp	r28, r24
   17402:	d9 07       	cpc	r29, r25
   17404:	09 f1       	breq	.+66     	; 0x17448 <receive_plot_flush+0x96>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17406:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1740a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1740e:	81 72       	andi	r24, 0x21	; 33
   17410:	99 27       	eor	r25, r25
   17412:	89 2b       	or	r24, r25
   17414:	b1 f0       	breq	.+44     	; 0x17442 <receive_plot_flush+0x90>
        {
            perror("receive_plot_flush");
   17416:	8f ed       	ldi	r24, 0xDF	; 223
   17418:	95 e1       	ldi	r25, 0x15	; 21
   1741a:	0e 94 b8 76 	call	0xed70	; 0xed70 <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   1741e:	ed b7       	in	r30, 0x3d	; 61
   17420:	fe b7       	in	r31, 0x3e	; 62
   17422:	d7 83       	std	Z+7, r29	; 0x07
   17424:	c6 83       	std	Z+6, r28	; 0x06
   17426:	80 91 bc 19 	lds	r24, 0x19BC	; 0x8019bc <plot+0x4>
   1742a:	90 91 bd 19 	lds	r25, 0x19BD	; 0x8019bd <plot+0x5>
   1742e:	95 83       	std	Z+5, r25	; 0x05
   17430:	84 83       	std	Z+4, r24	; 0x04
   17432:	8c e8       	ldi	r24, 0x8C	; 140
   17434:	9d e2       	ldi	r25, 0x2D	; 45
   17436:	a0 e0       	ldi	r26, 0x00	; 0
   17438:	81 83       	std	Z+1, r24	; 0x01
   1743a:	92 83       	std	Z+2, r25	; 0x02
   1743c:	a3 83       	std	Z+3, r26	; 0x03
   1743e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        }
        return(-1);
   17442:	8f ef       	ldi	r24, 0xFF	; 255
   17444:	9f ef       	ldi	r25, 0xFF	; 255
   17446:	0e c0       	rjmp	.+28     	; 0x17464 <receive_plot_flush+0xb2>
    }

    fno = fileno( plot.fp );
   17448:	80 91 c1 19 	lds	r24, 0x19C1	; 0x8019c1 <plot+0x9>
   1744c:	90 91 c2 19 	lds	r25, 0x19C2	; 0x8019c2 <plot+0xa>
   17450:	0e 94 02 75 	call	0xea04	; 0xea04 <fileno>
    if(fno < 0)
   17454:	97 fd       	sbrc	r25, 7
   17456:	f5 cf       	rjmp	.-22     	; 0x17442 <receive_plot_flush+0x90>
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
   17458:	0e 94 f9 79 	call	0xf3f2	; 0xf3f2 <syncfs>
    return (ret);
   1745c:	ce 01       	movw	r24, r28
   1745e:	02 c0       	rjmp	.+4      	; 0x17464 <receive_plot_flush+0xb2>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   17460:	80 e0       	ldi	r24, 0x00	; 0
   17462:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
///@brief sync filesystem after every write
    syncfs( fno );
    return (ret);
}
   17464:	cd b7       	in	r28, 0x3d	; 61
   17466:	de b7       	in	r29, 0x3e	; 62
   17468:	27 96       	adiw	r28, 0x07	; 7
   1746a:	e2 e0       	ldi	r30, 0x02	; 2
   1746c:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

00017470 <printer_close>:
/// @see posix.h
/// @return  void
/// FYI: for the HP54645D plots end with: pd;pu;pu;sp0;
/// This gets called
void printer_close()
{
   17470:	ad b7       	in	r26, 0x3d	; 61
   17472:	be b7       	in	r27, 0x3e	; 62
   17474:	17 97       	sbiw	r26, 0x07	; 7
   17476:	0f b6       	in	r0, 0x3f	; 63
   17478:	f8 94       	cli
   1747a:	be bf       	out	0x3e, r27	; 62
   1747c:	0f be       	out	0x3f, r0	; 63
   1747e:	ad bf       	out	0x3d, r26	; 61
    if( receive_plot_flush() < 0 )
   17480:	98 df       	rcall	.-208    	; 0x173b2 <receive_plot_flush>
   17482:	97 ff       	sbrs	r25, 7
   17484:	03 c0       	rjmp	.+6      	; 0x1748c <printer_close+0x1c>
        plot.error = 1;
   17486:	81 e0       	ldi	r24, 0x01	; 1
   17488:	80 93 c0 19 	sts	0x19C0, r24	; 0x8019c0 <plot+0x8>

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   1748c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17490:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17494:	81 72       	andi	r24, 0x21	; 33
   17496:	99 27       	eor	r25, r25
   17498:	89 2b       	or	r24, r25
   1749a:	71 f0       	breq	.+28     	; 0x174b8 <printer_close+0x48>
    {
        if(plot.error)
   1749c:	80 91 c0 19 	lds	r24, 0x19C0	; 0x8019c0 <plot+0x8>
   174a0:	88 23       	and	r24, r24
   174a2:	51 f0       	breq	.+20     	; 0x174b8 <printer_close+0x48>
            printf("ERROR durring write\n");
   174a4:	8b eb       	ldi	r24, 0xBB	; 187
   174a6:	9d e2       	ldi	r25, 0x2D	; 45
   174a8:	a0 e0       	ldi	r26, 0x00	; 0
   174aa:	ed b7       	in	r30, 0x3d	; 61
   174ac:	fe b7       	in	r31, 0x3e	; 62
   174ae:	81 83       	std	Z+1, r24	; 0x01
   174b0:	92 83       	std	Z+2, r25	; 0x02
   174b2:	a3 83       	std	Z+3, r26	; 0x03
   174b4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    }

    if(plot.fp)
   174b8:	80 91 c1 19 	lds	r24, 0x19C1	; 0x8019c1 <plot+0x9>
   174bc:	90 91 c2 19 	lds	r25, 0x19C2	; 0x8019c2 <plot+0xa>
   174c0:	00 97       	sbiw	r24, 0x00	; 0
   174c2:	e1 f0       	breq	.+56     	; 0x174fc <printer_close+0x8c>
    {
        fclose(plot.fp);
   174c4:	0e 94 31 7b 	call	0xf662	; 0xf662 <fclose>
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   174c8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   174cc:	85 ff       	sbrs	r24, 5
   174ce:	16 c0       	rjmp	.+44     	; 0x174fc <printer_close+0x8c>
            printf("\nDONE: %08ld\n",plot.count);
   174d0:	80 91 b8 19 	lds	r24, 0x19B8	; 0x8019b8 <plot>
   174d4:	90 91 b9 19 	lds	r25, 0x19B9	; 0x8019b9 <plot+0x1>
   174d8:	a0 91 ba 19 	lds	r26, 0x19BA	; 0x8019ba <plot+0x2>
   174dc:	b0 91 bb 19 	lds	r27, 0x19BB	; 0x8019bb <plot+0x3>
   174e0:	ed b7       	in	r30, 0x3d	; 61
   174e2:	fe b7       	in	r31, 0x3e	; 62
   174e4:	84 83       	std	Z+4, r24	; 0x04
   174e6:	95 83       	std	Z+5, r25	; 0x05
   174e8:	a6 83       	std	Z+6, r26	; 0x06
   174ea:	b7 83       	std	Z+7, r27	; 0x07
   174ec:	8d ea       	ldi	r24, 0xAD	; 173
   174ee:	9d e2       	ldi	r25, 0x2D	; 45
   174f0:	a0 e0       	ldi	r26, 0x00	; 0
   174f2:	81 83       	std	Z+1, r24	; 0x01
   174f4:	92 83       	std	Z+2, r25	; 0x02
   174f6:	a3 83       	std	Z+3, r26	; 0x03
   174f8:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    }

    if(plot.buf)
   174fc:	80 91 c3 19 	lds	r24, 0x19C3	; 0x8019c3 <plot+0xb>
   17500:	90 91 c4 19 	lds	r25, 0x19C4	; 0x8019c4 <plot+0xc>
   17504:	00 97       	sbiw	r24, 0x00	; 0
   17506:	11 f0       	breq	.+4      	; 0x1750c <printer_close+0x9c>
        safefree(plot.buf);
   17508:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <safefree>
    printer_init();
   1750c:	44 df       	rcall	.-376    	; 0x17396 <printer_init>
}
   1750e:	ad b7       	in	r26, 0x3d	; 61
   17510:	be b7       	in	r27, 0x3e	; 62
   17512:	17 96       	adiw	r26, 0x07	; 7
   17514:	0f b6       	in	r0, 0x3f	; 63
   17516:	f8 94       	cli
   17518:	be bf       	out	0x3e, r27	; 62
   1751a:	0f be       	out	0x3f, r0	; 63
   1751c:	ad bf       	out	0x3d, r26	; 61
   1751e:	08 95       	ret

00017520 <printer_open>:
/// @see posix.c
/// @see posix.h
/// @return  void

void printer_open(char *name)
{
   17520:	ad e5       	ldi	r26, 0x5D	; 93
   17522:	b0 e0       	ldi	r27, 0x00	; 0
   17524:	e6 e9       	ldi	r30, 0x96	; 150
   17526:	fa eb       	ldi	r31, 0xBA	; 186
   17528:	0c 94 e4 e0 	jmp	0x1c1c8	; 0x1c1c8 <__prologue_saves__+0x18>
   1752c:	8c 01       	movw	r16, r24

    char *ptr;

    if(!name)
   1752e:	89 2b       	or	r24, r25
   17530:	09 f0       	breq	.+2      	; 0x17534 <printer_open+0x14>
   17532:	4f c0       	rjmp	.+158    	; 0x175d2 <printer_open+0xb2>
        time_t seconds;
        tm_t *tc;
        ts_t ts;
        char fname[64];

        clock_gettime(0, (ts_t *) &ts);
   17534:	be 01       	movw	r22, r28
   17536:	6e 5a       	subi	r22, 0xAE	; 174
   17538:	7f 4f       	sbci	r23, 0xFF	; 255
   1753a:	80 e0       	ldi	r24, 0x00	; 0
   1753c:	90 e0       	ldi	r25, 0x00	; 0
   1753e:	0e 94 01 31 	call	0x6202	; 0x6202 <clock_gettime>
        seconds = ts.tv_sec;
   17542:	66 96       	adiw	r28, 0x16	; 22
   17544:	8c ad       	ldd	r24, Y+60	; 0x3c
   17546:	9d ad       	ldd	r25, Y+61	; 0x3d
   17548:	ae ad       	ldd	r26, Y+62	; 0x3e
   1754a:	bf ad       	ldd	r27, Y+63	; 0x3f
   1754c:	66 97       	sbiw	r28, 0x16	; 22
   1754e:	6e 96       	adiw	r28, 0x1e	; 30
   17550:	8c af       	std	Y+60, r24	; 0x3c
   17552:	9d af       	std	Y+61, r25	; 0x3d
   17554:	ae af       	std	Y+62, r26	; 0x3e
   17556:	bf af       	std	Y+63, r27	; 0x3f
   17558:	6e 97       	sbiw	r28, 0x1e	; 30
        tc = gmtime(&seconds);
   1755a:	ce 01       	movw	r24, r28
   1755c:	86 5a       	subi	r24, 0xA6	; 166
   1755e:	9f 4f       	sbci	r25, 0xFF	; 255
   17560:	0e 94 eb 34 	call	0x69d6	; 0x69d6 <gmtime>
   17564:	8c 01       	movw	r16, r24
        sprintf(fname,"/plot-%02d%s%04d-%02d%02d%02d.plt",
   17566:	fc 01       	movw	r30, r24
   17568:	e6 80       	ldd	r14, Z+6	; 0x06
   1756a:	f7 80       	ldd	r15, Z+7	; 0x07
   1756c:	80 85       	ldd	r24, Z+8	; 0x08
   1756e:	91 85       	ldd	r25, Z+9	; 0x09
   17570:	0e 94 c7 33 	call	0x678e	; 0x678e <tm_mon_to_ascii>
   17574:	f8 01       	movw	r30, r16
   17576:	20 81       	ld	r18, Z
   17578:	31 81       	ldd	r19, Z+1	; 0x01
   1757a:	ed b7       	in	r30, 0x3d	; 61
   1757c:	fe b7       	in	r31, 0x3e	; 62
   1757e:	31 8b       	std	Z+17, r19	; 0x11
   17580:	20 8b       	std	Z+16, r18	; 0x10
   17582:	f8 01       	movw	r30, r16
   17584:	22 81       	ldd	r18, Z+2	; 0x02
   17586:	33 81       	ldd	r19, Z+3	; 0x03
   17588:	ed b7       	in	r30, 0x3d	; 61
   1758a:	fe b7       	in	r31, 0x3e	; 62
   1758c:	37 87       	std	Z+15, r19	; 0x0f
   1758e:	26 87       	std	Z+14, r18	; 0x0e
   17590:	f8 01       	movw	r30, r16
   17592:	24 81       	ldd	r18, Z+4	; 0x04
   17594:	35 81       	ldd	r19, Z+5	; 0x05
   17596:	ed b7       	in	r30, 0x3d	; 61
   17598:	fe b7       	in	r31, 0x3e	; 62
   1759a:	35 87       	std	Z+13, r19	; 0x0d
   1759c:	24 87       	std	Z+12, r18	; 0x0c
   1759e:	f8 01       	movw	r30, r16
   175a0:	22 85       	ldd	r18, Z+10	; 0x0a
   175a2:	33 85       	ldd	r19, Z+11	; 0x0b
   175a4:	24 59       	subi	r18, 0x94	; 148
   175a6:	38 4f       	sbci	r19, 0xF8	; 248
   175a8:	ed b7       	in	r30, 0x3d	; 61
   175aa:	fe b7       	in	r31, 0x3e	; 62
   175ac:	33 87       	std	Z+11, r19	; 0x0b
   175ae:	22 87       	std	Z+10, r18	; 0x0a
   175b0:	91 87       	std	Z+9, r25	; 0x09
   175b2:	80 87       	std	Z+8, r24	; 0x08
   175b4:	f7 82       	std	Z+7, r15	; 0x07
   175b6:	e6 82       	std	Z+6, r14	; 0x06
   175b8:	82 ef       	ldi	r24, 0xF2	; 242
   175ba:	9d e2       	ldi	r25, 0x2D	; 45
   175bc:	a0 e0       	ldi	r26, 0x00	; 0
   175be:	83 83       	std	Z+3, r24	; 0x03
   175c0:	94 83       	std	Z+4, r25	; 0x04
   175c2:	a5 83       	std	Z+5, r26	; 0x05
   175c4:	8e 01       	movw	r16, r28
   175c6:	0e 5e       	subi	r16, 0xEE	; 238
   175c8:	1f 4f       	sbci	r17, 0xFF	; 255
   175ca:	12 83       	std	Z+2, r17	; 0x02
   175cc:	01 83       	std	Z+1, r16	; 0x01
   175ce:	0e 94 2f 44 	call	0x885e	; 0x885e <sprintf_P>
    else
    {
        ptr = name;
    }

    if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   175d2:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   175d6:	85 ff       	sbrs	r24, 5
   175d8:	0c c0       	rjmp	.+24     	; 0x175f2 <printer_open+0xd2>
        printf("Capturing plot to:%s\n", ptr);
   175da:	ed b7       	in	r30, 0x3d	; 61
   175dc:	fe b7       	in	r31, 0x3e	; 62
   175de:	15 83       	std	Z+5, r17	; 0x05
   175e0:	04 83       	std	Z+4, r16	; 0x04
   175e2:	8c ed       	ldi	r24, 0xDC	; 220
   175e4:	9d e2       	ldi	r25, 0x2D	; 45
   175e6:	a0 e0       	ldi	r26, 0x00	; 0
   175e8:	81 83       	std	Z+1, r24	; 0x01
   175ea:	92 83       	std	Z+2, r25	; 0x02
   175ec:	a3 83       	std	Z+3, r26	; 0x03
   175ee:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

    plot.fp = fopen(ptr,"wb");
   175f2:	6c e0       	ldi	r22, 0x0C	; 12
   175f4:	79 e0       	ldi	r23, 0x09	; 9
   175f6:	c8 01       	movw	r24, r16
   175f8:	0e 94 87 7c 	call	0xf90e	; 0xf90e <fopen>
   175fc:	90 93 c2 19 	sts	0x19C2, r25	; 0x8019c2 <plot+0xa>
   17600:	80 93 c1 19 	sts	0x19C1, r24	; 0x8019c1 <plot+0x9>
    if(plot.fp == NULL)
   17604:	89 2b       	or	r24, r25
   17606:	b9 f4       	brne	.+46     	; 0x17636 <printer_open+0x116>
    {
        if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   17608:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1760c:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17610:	81 72       	andi	r24, 0x21	; 33
   17612:	99 27       	eor	r25, r25
   17614:	89 2b       	or	r24, r25
   17616:	11 f1       	breq	.+68     	; 0x1765c <printer_open+0x13c>
        {
            perror("open failed");
   17618:	87 ea       	ldi	r24, 0xA7	; 167
   1761a:	9d e0       	ldi	r25, 0x0D	; 13
   1761c:	0e 94 b8 76 	call	0xed70	; 0xed70 <perror>
            printf("exiting...\n");
   17620:	80 ed       	ldi	r24, 0xD0	; 208
   17622:	9d e2       	ldi	r25, 0x2D	; 45
   17624:	a0 e0       	ldi	r26, 0x00	; 0
   17626:	ed b7       	in	r30, 0x3d	; 61
   17628:	fe b7       	in	r31, 0x3e	; 62
   1762a:	81 83       	std	Z+1, r24	; 0x01
   1762c:	92 83       	std	Z+2, r25	; 0x02
   1762e:	a3 83       	std	Z+3, r26	; 0x03
   17630:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   17634:	13 c0       	rjmp	.+38     	; 0x1765c <printer_open+0x13c>
        }
        return;
    }

    plot.buf = calloc(512+1,1);
   17636:	61 e0       	ldi	r22, 0x01	; 1
   17638:	70 e0       	ldi	r23, 0x00	; 0
   1763a:	81 e0       	ldi	r24, 0x01	; 1
   1763c:	92 e0       	ldi	r25, 0x02	; 2
   1763e:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <safecalloc>
   17642:	90 93 c4 19 	sts	0x19C4, r25	; 0x8019c4 <plot+0xc>
   17646:	80 93 c3 19 	sts	0x19C3, r24	; 0x8019c3 <plot+0xb>
    if(plot.buf == NULL)
   1764a:	89 2b       	or	r24, r25
   1764c:	09 f4       	brne	.+2      	; 0x17650 <printer_open+0x130>
        printer_close();
   1764e:	10 df       	rcall	.-480    	; 0x17470 <printer_close>
    plot.size = 512;
   17650:	80 e0       	ldi	r24, 0x00	; 0
   17652:	92 e0       	ldi	r25, 0x02	; 2
   17654:	90 93 bf 19 	sts	0x19BF, r25	; 0x8019bf <plot+0x7>
   17658:	80 93 be 19 	sts	0x19BE, r24	; 0x8019be <plot+0x6>
}
   1765c:	c3 5a       	subi	r28, 0xA3	; 163
   1765e:	df 4f       	sbci	r29, 0xFF	; 255
   17660:	e6 e0       	ldi	r30, 0x06	; 6
   17662:	0c 94 00 e1 	jmp	0x1c200	; 0x1c200 <__epilogue_restores__+0x18>

00017666 <printer_buffer>:
///
/// @see posix.c
/// @see posix.h
/// @return  void
void printer_buffer( uint16_t val )
{
   17666:	cf 93       	push	r28
   17668:	df 93       	push	r29
   1766a:	ad b7       	in	r26, 0x3d	; 61
   1766c:	be b7       	in	r27, 0x3e	; 62
   1766e:	17 97       	sbiw	r26, 0x07	; 7
   17670:	0f b6       	in	r0, 0x3f	; 63
   17672:	f8 94       	cli
   17674:	be bf       	out	0x3e, r27	; 62
   17676:	0f be       	out	0x3f, r0	; 63
   17678:	ad bf       	out	0x3d, r26	; 61
   1767a:	ec 01       	movw	r28, r24

    uint16_t ch;

    if(debuglevel & (GPIB_ERR + GPIB_DEVICE_STATE_MESSAGES))
   1767c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17680:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   17684:	81 72       	andi	r24, 0x21	; 33
   17686:	99 27       	eor	r25, r25
   17688:	89 2b       	or	r24, r25
   1768a:	c1 f0       	breq	.+48     	; 0x176bc <printer_buffer+0x56>
    {
        if( ( plot.count & 255L ) == 0)
   1768c:	80 91 b8 19 	lds	r24, 0x19B8	; 0x8019b8 <plot>
   17690:	30 91 b9 19 	lds	r19, 0x19B9	; 0x8019b9 <plot+0x1>
   17694:	20 91 ba 19 	lds	r18, 0x19BA	; 0x8019ba <plot+0x2>
   17698:	90 91 bb 19 	lds	r25, 0x19BB	; 0x8019bb <plot+0x3>
   1769c:	81 11       	cpse	r24, r1
   1769e:	0e c0       	rjmp	.+28     	; 0x176bc <printer_buffer+0x56>
            printf("%08ld\r",plot.count);
   176a0:	ed b7       	in	r30, 0x3d	; 61
   176a2:	fe b7       	in	r31, 0x3e	; 62
   176a4:	84 83       	std	Z+4, r24	; 0x04
   176a6:	35 83       	std	Z+5, r19	; 0x05
   176a8:	26 83       	std	Z+6, r18	; 0x06
   176aa:	97 83       	std	Z+7, r25	; 0x07
   176ac:	85 e8       	ldi	r24, 0x85	; 133
   176ae:	9d e2       	ldi	r25, 0x2D	; 45
   176b0:	a0 e0       	ldi	r26, 0x00	; 0
   176b2:	81 83       	std	Z+1, r24	; 0x01
   176b4:	92 83       	std	Z+2, r25	; 0x02
   176b6:	a3 83       	std	Z+3, r26	; 0x03
   176b8:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    }

    ch = val & 0xff;
    if(val & (0xff00 & ~REN_FLAG))
   176bc:	ce 01       	movw	r24, r28
   176be:	88 27       	eor	r24, r24
   176c0:	97 7f       	andi	r25, 0xF7	; 247
   176c2:	89 2b       	or	r24, r25
   176c4:	41 f0       	breq	.+16     	; 0x176d6 <printer_buffer+0x70>
    {
        if( receive_plot_flush() )
   176c6:	75 de       	rcall	.-790    	; 0x173b2 <receive_plot_flush>
   176c8:	89 2b       	or	r24, r25
   176ca:	09 f4       	brne	.+2      	; 0x176ce <printer_buffer+0x68>
   176cc:	3f c0       	rjmp	.+126    	; 0x1774c <printer_buffer+0xe6>
            plot.error = 1;
   176ce:	81 e0       	ldi	r24, 0x01	; 1
   176d0:	80 93 c0 19 	sts	0x19C0, r24	; 0x8019c0 <plot+0x8>
   176d4:	3b c0       	rjmp	.+118    	; 0x1774c <printer_buffer+0xe6>
//plot.count += strlen(ptr);
    }
    else
    {
        ch  = val & 0xff;
        plot.buf[plot.ind++] = ch;
   176d6:	20 91 c3 19 	lds	r18, 0x19C3	; 0x8019c3 <plot+0xb>
   176da:	30 91 c4 19 	lds	r19, 0x19C4	; 0x8019c4 <plot+0xc>
   176de:	80 91 bc 19 	lds	r24, 0x19BC	; 0x8019bc <plot+0x4>
   176e2:	90 91 bd 19 	lds	r25, 0x19BD	; 0x8019bd <plot+0x5>
   176e6:	ac 01       	movw	r20, r24
   176e8:	4f 5f       	subi	r20, 0xFF	; 255
   176ea:	5f 4f       	sbci	r21, 0xFF	; 255
   176ec:	50 93 bd 19 	sts	0x19BD, r21	; 0x8019bd <plot+0x5>
   176f0:	40 93 bc 19 	sts	0x19BC, r20	; 0x8019bc <plot+0x4>
   176f4:	f9 01       	movw	r30, r18
   176f6:	e8 0f       	add	r30, r24
   176f8:	f9 1f       	adc	r31, r25
   176fa:	c0 83       	st	Z, r28
        plot.count++;
   176fc:	80 91 b8 19 	lds	r24, 0x19B8	; 0x8019b8 <plot>
   17700:	90 91 b9 19 	lds	r25, 0x19B9	; 0x8019b9 <plot+0x1>
   17704:	a0 91 ba 19 	lds	r26, 0x19BA	; 0x8019ba <plot+0x2>
   17708:	b0 91 bb 19 	lds	r27, 0x19BB	; 0x8019bb <plot+0x3>
   1770c:	01 96       	adiw	r24, 0x01	; 1
   1770e:	a1 1d       	adc	r26, r1
   17710:	b1 1d       	adc	r27, r1
   17712:	80 93 b8 19 	sts	0x19B8, r24	; 0x8019b8 <plot>
   17716:	90 93 b9 19 	sts	0x19B9, r25	; 0x8019b9 <plot+0x1>
   1771a:	a0 93 ba 19 	sts	0x19BA, r26	; 0x8019ba <plot+0x2>
   1771e:	b0 93 bb 19 	sts	0x19BB, r27	; 0x8019bb <plot+0x3>

        if(plot.ind >= plot.size)
   17722:	20 91 bc 19 	lds	r18, 0x19BC	; 0x8019bc <plot+0x4>
   17726:	30 91 bd 19 	lds	r19, 0x19BD	; 0x8019bd <plot+0x5>
   1772a:	80 91 be 19 	lds	r24, 0x19BE	; 0x8019be <plot+0x6>
   1772e:	90 91 bf 19 	lds	r25, 0x19BF	; 0x8019bf <plot+0x7>
   17732:	28 17       	cp	r18, r24
   17734:	39 07       	cpc	r19, r25
        {
            if( receive_plot_flush() < 0 )
   17736:	54 f0       	brlt	.+20     	; 0x1774c <printer_buffer+0xe6>
   17738:	3c de       	rcall	.-904    	; 0x173b2 <receive_plot_flush>
   1773a:	97 ff       	sbrs	r25, 7
   1773c:	03 c0       	rjmp	.+6      	; 0x17744 <printer_buffer+0xde>
                plot.error = 1;
   1773e:	81 e0       	ldi	r24, 0x01	; 1
   17740:	80 93 c0 19 	sts	0x19C0, r24	; 0x8019c0 <plot+0x8>
            plot.ind  = 0;
   17744:	10 92 bd 19 	sts	0x19BD, r1	; 0x8019bd <plot+0x5>
   17748:	10 92 bc 19 	sts	0x19BC, r1	; 0x8019bc <plot+0x4>
        }
    }
}
   1774c:	cd b7       	in	r28, 0x3d	; 61
   1774e:	de b7       	in	r29, 0x3e	; 62
   17750:	27 96       	adiw	r28, 0x07	; 7
   17752:	e2 e0       	ldi	r30, 0x02	; 2
   17754:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

00017758 <PRINTER_COMMANDS>:
///
/// @todo  Fully emulated plotter response.
/// @return  0

int PRINTER_COMMANDS(uint8_t ch)
{
   17758:	cf 93       	push	r28
   1775a:	00 d0       	rcall	.+0      	; 0x1775c <PRINTER_COMMANDS+0x4>
   1775c:	00 d0       	rcall	.+0      	; 0x1775e <PRINTER_COMMANDS+0x6>
   1775e:	1f 92       	push	r1
   17760:	c8 2f       	mov	r28, r24

// We could, for example, use secondaries to set file names, etc
// We don not use them yet
    if(PRINTER_is_MLA(listening))
   17762:	80 91 0a 1f 	lds	r24, 0x1F0A	; 0x801f0a <listening>
   17766:	90 e0       	ldi	r25, 0x00	; 0
   17768:	0e 94 1b 8b 	call	0x11636	; 0x11636 <PRINTER_is_MLA>
   1776c:	89 2b       	or	r24, r25
   1776e:	69 f0       	breq	.+26     	; 0x1778a <PRINTER_COMMANDS+0x32>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17770:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17774:	85 ff       	sbrs	r24, 5
   17776:	22 c0       	rjmp	.+68     	; 0x177bc <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Listen: %02XH]\n",  0xff & ch );
   17778:	8c 2f       	mov	r24, r28
   1777a:	90 e0       	ldi	r25, 0x00	; 0
   1777c:	ed b7       	in	r30, 0x3d	; 61
   1777e:	fe b7       	in	r31, 0x3e	; 62
   17780:	95 83       	std	Z+5, r25	; 0x05
   17782:	84 83       	std	Z+4, r24	; 0x04
   17784:	89 e6       	ldi	r24, 0x69	; 105
   17786:	9d e2       	ldi	r25, 0x2D	; 45
   17788:	13 c0       	rjmp	.+38     	; 0x177b0 <PRINTER_COMMANDS+0x58>
#endif
        return(0);
    }

    if(PRINTER_is_MTA(talking))
   1778a:	80 91 08 1f 	lds	r24, 0x1F08	; 0x801f08 <talking>
   1778e:	90 e0       	ldi	r25, 0x00	; 0
   17790:	0e 94 2c 8b 	call	0x11658	; 0x11658 <PRINTER_is_MTA>
   17794:	89 2b       	or	r24, r25
   17796:	91 f0       	breq	.+36     	; 0x177bc <PRINTER_COMMANDS+0x64>
    {
#if SDEBUG
        if(debuglevel & GPIB_DEVICE_STATE_MESSAGES)
   17798:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1779c:	85 ff       	sbrs	r24, 5
   1779e:	0e c0       	rjmp	.+28     	; 0x177bc <PRINTER_COMMANDS+0x64>
            printf("[SC PRINTER Talk: %02XH]\n",  0xff & ch );
   177a0:	8c 2f       	mov	r24, r28
   177a2:	90 e0       	ldi	r25, 0x00	; 0
   177a4:	ed b7       	in	r30, 0x3d	; 61
   177a6:	fe b7       	in	r31, 0x3e	; 62
   177a8:	95 83       	std	Z+5, r25	; 0x05
   177aa:	84 83       	std	Z+4, r24	; 0x04
   177ac:	8f e4       	ldi	r24, 0x4F	; 79
   177ae:	9d e2       	ldi	r25, 0x2D	; 45
   177b0:	a0 e0       	ldi	r26, 0x00	; 0
   177b2:	81 83       	std	Z+1, r24	; 0x01
   177b4:	92 83       	std	Z+2, r25	; 0x02
   177b6:	a3 83       	std	Z+3, r26	; 0x03
   177b8:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
#endif
        return(0);
    }
    return(0);
}
   177bc:	80 e0       	ldi	r24, 0x00	; 0
   177be:	90 e0       	ldi	r25, 0x00	; 0
   177c0:	0f 90       	pop	r0
   177c2:	0f 90       	pop	r0
   177c4:	0f 90       	pop	r0
   177c6:	0f 90       	pop	r0
   177c8:	0f 90       	pop	r0
   177ca:	cf 91       	pop	r28
   177cc:	08 95       	ret

000177ce <V2B_MSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_MSB(uint8_t *B, int index, int size, uint32_t val)
{
   177ce:	0f 93       	push	r16
   177d0:	1f 93       	push	r17
   177d2:	da 01       	movw	r26, r20
   177d4:	11 97       	sbiw	r26, 0x01	; 1
    int i;
    for(i=size-1;i>=0;--i)
   177d6:	b7 fd       	sbrc	r27, 7
   177d8:	0b c0       	rjmp	.+22     	; 0x177f0 <V2B_MSB+0x22>
    {
        B[index+i] = val & 0xff;
   177da:	fd 01       	movw	r30, r26
   177dc:	e6 0f       	add	r30, r22
   177de:	f7 1f       	adc	r31, r23
   177e0:	e8 0f       	add	r30, r24
   177e2:	f9 1f       	adc	r31, r25
   177e4:	00 83       	st	Z, r16
        val >>= 8;
   177e6:	01 2f       	mov	r16, r17
   177e8:	12 2f       	mov	r17, r18
   177ea:	23 2f       	mov	r18, r19
   177ec:	33 27       	eor	r19, r19
   177ee:	f2 cf       	rjmp	.-28     	; 0x177d4 <V2B_MSB+0x6>
    }
}
   177f0:	1f 91       	pop	r17
   177f2:	0f 91       	pop	r16
   177f4:	08 95       	ret

000177f6 <V2B_LSB>:
///@param index: offset into byte array
///@param size: number of bytes to process
///@param val: Value to convert
///@return void
void V2B_LSB(uint8_t *B, int index, int size, uint32_t val)
{
   177f6:	0f 93       	push	r16
   177f8:	1f 93       	push	r17
   177fa:	fc 01       	movw	r30, r24
   177fc:	e6 0f       	add	r30, r22
   177fe:	f7 1f       	adc	r31, r23
   17800:	bf 01       	movw	r22, r30
    int i;
    for(i=0;i<size;++i)
   17802:	cf 01       	movw	r24, r30
   17804:	86 1b       	sub	r24, r22
   17806:	97 0b       	sbc	r25, r23
   17808:	84 17       	cp	r24, r20
   1780a:	95 07       	cpc	r25, r21
   1780c:	34 f4       	brge	.+12     	; 0x1781a <V2B_LSB+0x24>
    {
        B[index+i] = val & 0xff;
   1780e:	01 93       	st	Z+, r16
        val >>= 8;
   17810:	01 2f       	mov	r16, r17
   17812:	12 2f       	mov	r17, r18
   17814:	23 2f       	mov	r18, r19
   17816:	33 27       	eor	r19, r19
   17818:	f4 cf       	rjmp	.-24     	; 0x17802 <V2B_LSB+0xc>
    }
}
   1781a:	1f 91       	pop	r17
   1781c:	0f 91       	pop	r16
   1781e:	08 95       	ret

00017820 <B2V_MSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_MSB(uint8_t *B, int index, int size)
{
   17820:	cf 92       	push	r12
   17822:	df 92       	push	r13
   17824:	ef 92       	push	r14
   17826:	ff 92       	push	r15
   17828:	fc 01       	movw	r30, r24
   1782a:	e6 0f       	add	r30, r22
   1782c:	f7 1f       	adc	r31, r23
    int i;
    uint32_t val = 0;
   1782e:	60 e0       	ldi	r22, 0x00	; 0
   17830:	70 e0       	ldi	r23, 0x00	; 0
   17832:	cb 01       	movw	r24, r22
   17834:	df 01       	movw	r26, r30

    for(i=0;i<size;++i)
   17836:	9f 01       	movw	r18, r30
   17838:	2a 1b       	sub	r18, r26
   1783a:	3b 0b       	sbc	r19, r27
   1783c:	24 17       	cp	r18, r20
   1783e:	35 07       	cpc	r19, r21
   17840:	4c f4       	brge	.+18     	; 0x17854 <B2V_MSB+0x34>
    {
        val <<= 8;
   17842:	cc 24       	eor	r12, r12
   17844:	d6 2e       	mov	r13, r22
   17846:	e7 2e       	mov	r14, r23
   17848:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   1784a:	21 91       	ld	r18, Z+
   1784c:	c7 01       	movw	r24, r14
   1784e:	b6 01       	movw	r22, r12
   17850:	62 2b       	or	r22, r18
   17852:	f1 cf       	rjmp	.-30     	; 0x17836 <B2V_MSB+0x16>
    }
    return(val);
}
   17854:	ff 90       	pop	r15
   17856:	ef 90       	pop	r14
   17858:	df 90       	pop	r13
   1785a:	cf 90       	pop	r12
   1785c:	08 95       	ret

0001785e <B2V_LSB>:
///@param B: byte array
///@param index: offset into byte array
///@param size: number of bytes to process
///@return value
uint32_t B2V_LSB(uint8_t *B, int index, int size)
{
   1785e:	cf 92       	push	r12
   17860:	df 92       	push	r13
   17862:	ef 92       	push	r14
   17864:	ff 92       	push	r15
   17866:	9c 01       	movw	r18, r24
   17868:	db 01       	movw	r26, r22
    int i;
    uint32_t val = 0;
   1786a:	60 e0       	ldi	r22, 0x00	; 0
   1786c:	70 e0       	ldi	r23, 0x00	; 0
   1786e:	cb 01       	movw	r24, r22
   17870:	41 50       	subi	r20, 0x01	; 1
   17872:	51 09       	sbc	r21, r1

    for(i=size-1;i>=0;--i)
   17874:	57 fd       	sbrc	r21, 7
   17876:	0e c0       	rjmp	.+28     	; 0x17894 <B2V_LSB+0x36>
    {
        val <<= 8;
   17878:	cc 24       	eor	r12, r12
   1787a:	d6 2e       	mov	r13, r22
   1787c:	e7 2e       	mov	r14, r23
   1787e:	f8 2e       	mov	r15, r24
        val |= (uint8_t) (B[i+index] & 0xff);
   17880:	fa 01       	movw	r30, r20
   17882:	ea 0f       	add	r30, r26
   17884:	fb 1f       	adc	r31, r27
   17886:	e2 0f       	add	r30, r18
   17888:	f3 1f       	adc	r31, r19
   1788a:	e0 81       	ld	r30, Z
   1788c:	c7 01       	movw	r24, r14
   1788e:	b6 01       	movw	r22, r12
   17890:	6e 2b       	or	r22, r30
   17892:	ee cf       	rjmp	.-36     	; 0x17870 <B2V_LSB+0x12>
    }
    return(val);
}
   17894:	ff 90       	pop	r15
   17896:	ef 90       	pop	r14
   17898:	df 90       	pop	r13
   1789a:	cf 90       	pop	r12
   1789c:	08 95       	ret

0001789e <lif_help>:
            return( (lifdir_t *) &LIF->DIR );

// Skip purged records
    }
    return( NULL );
}
   1789e:	cf 93       	push	r28
   178a0:	df 93       	push	r29
   178a2:	00 d0       	rcall	.+0      	; 0x178a4 <lif_help+0x6>
   178a4:	1f 92       	push	r1
   178a6:	ec 01       	movw	r28, r24
   178a8:	82 e3       	ldi	r24, 0x32	; 50
   178aa:	92 e4       	ldi	r25, 0x42	; 66
   178ac:	a0 e0       	ldi	r26, 0x00	; 0
   178ae:	ed b7       	in	r30, 0x3d	; 61
   178b0:	fe b7       	in	r31, 0x3e	; 62
   178b2:	81 83       	std	Z+1, r24	; 0x01
   178b4:	92 83       	std	Z+2, r25	; 0x02
   178b6:	a3 83       	std	Z+3, r26	; 0x03
   178b8:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   178bc:	cd 2b       	or	r28, r29
   178be:	51 f0       	breq	.+20     	; 0x178d4 <lif_help+0x36>
   178c0:	89 e6       	ldi	r24, 0x69	; 105
   178c2:	90 e4       	ldi	r25, 0x40	; 64
   178c4:	a0 e0       	ldi	r26, 0x00	; 0
   178c6:	ed b7       	in	r30, 0x3d	; 61
   178c8:	fe b7       	in	r31, 0x3e	; 62
   178ca:	81 83       	std	Z+1, r24	; 0x01
   178cc:	92 83       	std	Z+2, r25	; 0x02
   178ce:	a3 83       	std	Z+3, r26	; 0x03
   178d0:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   178d4:	cd b7       	in	r28, 0x3d	; 61
   178d6:	de b7       	in	r29, 0x3e	; 62
   178d8:	23 96       	adiw	r28, 0x03	; 3
   178da:	e2 e0       	ldi	r30, 0x02	; 2
   178dc:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

000178e0 <lif_calloc>:
   178e0:	cf 92       	push	r12
   178e2:	df 92       	push	r13
   178e4:	ef 92       	push	r14
   178e6:	ff 92       	push	r15
   178e8:	cf 93       	push	r28
   178ea:	df 93       	push	r29
   178ec:	ad b7       	in	r26, 0x3d	; 61
   178ee:	be b7       	in	r27, 0x3e	; 62
   178f0:	17 97       	sbiw	r26, 0x07	; 7
   178f2:	0f b6       	in	r0, 0x3f	; 63
   178f4:	f8 94       	cli
   178f6:	be bf       	out	0x3e, r27	; 62
   178f8:	0f be       	out	0x3f, r0	; 63
   178fa:	ad bf       	out	0x3d, r26	; 61
   178fc:	6b 01       	movw	r12, r22
   178fe:	7c 01       	movw	r14, r24
   17900:	61 e0       	ldi	r22, 0x01	; 1
   17902:	70 e0       	ldi	r23, 0x00	; 0
   17904:	c6 01       	movw	r24, r12
   17906:	0e 94 f0 24 	call	0x49e0	; 0x49e0 <safecalloc>
   1790a:	ec 01       	movw	r28, r24
   1790c:	89 2b       	or	r24, r25
   1790e:	71 f4       	brne	.+28     	; 0x1792c <lif_calloc+0x4c>
   17910:	ed b7       	in	r30, 0x3d	; 61
   17912:	fe b7       	in	r31, 0x3e	; 62
   17914:	c4 82       	std	Z+4, r12	; 0x04
   17916:	d5 82       	std	Z+5, r13	; 0x05
   17918:	e6 82       	std	Z+6, r14	; 0x06
   1791a:	f7 82       	std	Z+7, r15	; 0x07
   1791c:	8f e1       	ldi	r24, 0x1F	; 31
   1791e:	90 e4       	ldi	r25, 0x40	; 64
   17920:	a0 e0       	ldi	r26, 0x00	; 0
   17922:	81 83       	std	Z+1, r24	; 0x01
   17924:	92 83       	std	Z+2, r25	; 0x02
   17926:	a3 83       	std	Z+3, r26	; 0x03
   17928:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1792c:	ce 01       	movw	r24, r28
   1792e:	ad b7       	in	r26, 0x3d	; 61
   17930:	be b7       	in	r27, 0x3e	; 62
   17932:	17 96       	adiw	r26, 0x07	; 7
   17934:	0f b6       	in	r0, 0x3f	; 63
   17936:	f8 94       	cli
   17938:	be bf       	out	0x3e, r27	; 62
   1793a:	0f be       	out	0x3f, r0	; 63
   1793c:	ad bf       	out	0x3d, r26	; 61
   1793e:	df 91       	pop	r29
   17940:	cf 91       	pop	r28
   17942:	ff 90       	pop	r15
   17944:	ef 90       	pop	r14
   17946:	df 90       	pop	r13
   17948:	cf 90       	pop	r12
   1794a:	08 95       	ret

0001794c <lif_free>:
   1794c:	00 d0       	rcall	.+0      	; 0x1794e <lif_free+0x2>
   1794e:	1f 92       	push	r1
   17950:	00 97       	sbiw	r24, 0x00	; 0
   17952:	59 f4       	brne	.+22     	; 0x1796a <lif_free+0x1e>
   17954:	87 e0       	ldi	r24, 0x07	; 7
   17956:	90 e4       	ldi	r25, 0x40	; 64
   17958:	a0 e0       	ldi	r26, 0x00	; 0
   1795a:	ed b7       	in	r30, 0x3d	; 61
   1795c:	fe b7       	in	r31, 0x3e	; 62
   1795e:	81 83       	std	Z+1, r24	; 0x01
   17960:	92 83       	std	Z+2, r25	; 0x02
   17962:	a3 83       	std	Z+3, r26	; 0x03
   17964:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   17968:	02 c0       	rjmp	.+4      	; 0x1796e <lif_free+0x22>
   1796a:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <safefree>
   1796e:	0f 90       	pop	r0
   17970:	0f 90       	pop	r0
   17972:	0f 90       	pop	r0
   17974:	08 95       	ret

00017976 <lif_stralloc>:
   17976:	0f 93       	push	r16
   17978:	1f 93       	push	r17
   1797a:	cf 93       	push	r28
   1797c:	df 93       	push	r29
   1797e:	ec 01       	movw	r28, r24
   17980:	fc 01       	movw	r30, r24
   17982:	01 90       	ld	r0, Z+
   17984:	00 20       	and	r0, r0
   17986:	e9 f7       	brne	.-6      	; 0x17982 <lif_stralloc+0xc>
   17988:	bf 01       	movw	r22, r30
   1798a:	68 1b       	sub	r22, r24
   1798c:	79 0b       	sbc	r23, r25
   1798e:	6d 5f       	subi	r22, 0xFD	; 253
   17990:	7f 4f       	sbci	r23, 0xFF	; 255
   17992:	07 2e       	mov	r0, r23
   17994:	00 0c       	add	r0, r0
   17996:	88 0b       	sbc	r24, r24
   17998:	99 0b       	sbc	r25, r25
   1799a:	a2 df       	rcall	.-188    	; 0x178e0 <lif_calloc>
   1799c:	8c 01       	movw	r16, r24
   1799e:	00 97       	sbiw	r24, 0x00	; 0
   179a0:	19 f0       	breq	.+6      	; 0x179a8 <lif_stralloc+0x32>
   179a2:	be 01       	movw	r22, r28
   179a4:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <strcpy>
   179a8:	c8 01       	movw	r24, r16
   179aa:	df 91       	pop	r29
   179ac:	cf 91       	pop	r28
   179ae:	1f 91       	pop	r17
   179b0:	0f 91       	pop	r16
   179b2:	08 95       	ret

000179b4 <lif_open>:
   179b4:	ef 92       	push	r14
   179b6:	ff 92       	push	r15
   179b8:	0f 93       	push	r16
   179ba:	1f 93       	push	r17
   179bc:	cf 93       	push	r28
   179be:	df 93       	push	r29
   179c0:	ad b7       	in	r26, 0x3d	; 61
   179c2:	be b7       	in	r27, 0x3e	; 62
   179c4:	17 97       	sbiw	r26, 0x07	; 7
   179c6:	0f b6       	in	r0, 0x3f	; 63
   179c8:	f8 94       	cli
   179ca:	be bf       	out	0x3e, r27	; 62
   179cc:	0f be       	out	0x3f, r0	; 63
   179ce:	ad bf       	out	0x3d, r26	; 61
   179d0:	8c 01       	movw	r16, r24
   179d2:	7b 01       	movw	r14, r22
   179d4:	0e 94 87 7c 	call	0xf90e	; 0xf90e <fopen>
   179d8:	ec 01       	movw	r28, r24
   179da:	89 2b       	or	r24, r25
   179dc:	71 f4       	brne	.+28     	; 0x179fa <lif_open+0x46>
   179de:	ed b7       	in	r30, 0x3d	; 61
   179e0:	fe b7       	in	r31, 0x3e	; 62
   179e2:	f7 82       	std	Z+7, r15	; 0x07
   179e4:	e6 82       	std	Z+6, r14	; 0x06
   179e6:	15 83       	std	Z+5, r17	; 0x05
   179e8:	04 83       	std	Z+4, r16	; 0x04
   179ea:	82 ee       	ldi	r24, 0xE2	; 226
   179ec:	9f e3       	ldi	r25, 0x3F	; 63
   179ee:	a0 e0       	ldi	r26, 0x00	; 0
   179f0:	81 83       	std	Z+1, r24	; 0x01
   179f2:	92 83       	std	Z+2, r25	; 0x02
   179f4:	a3 83       	std	Z+3, r26	; 0x03
   179f6:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   179fa:	ce 01       	movw	r24, r28
   179fc:	cd b7       	in	r28, 0x3d	; 61
   179fe:	de b7       	in	r29, 0x3e	; 62
   17a00:	27 96       	adiw	r28, 0x07	; 7
   17a02:	e6 e0       	ldi	r30, 0x06	; 6
   17a04:	0c 94 00 e1 	jmp	0x1c200	; 0x1c200 <__epilogue_restores__+0x18>

00017a08 <lif_stat>:
   17a08:	0f 93       	push	r16
   17a0a:	1f 93       	push	r17
   17a0c:	cf 93       	push	r28
   17a0e:	df 93       	push	r29
   17a10:	00 d0       	rcall	.+0      	; 0x17a12 <lif_stat+0xa>
   17a12:	00 d0       	rcall	.+0      	; 0x17a14 <lif_stat+0xc>
   17a14:	1f 92       	push	r1
   17a16:	8c 01       	movw	r16, r24
   17a18:	d6 2f       	mov	r29, r22
   17a1a:	c7 2f       	mov	r28, r23
   17a1c:	0e 94 8c 77 	call	0xef18	; 0xef18 <stat>
   17a20:	97 ff       	sbrs	r25, 7
   17a22:	0f c0       	rjmp	.+30     	; 0x17a42 <lif_stat+0x3a>
   17a24:	ed b7       	in	r30, 0x3d	; 61
   17a26:	fe b7       	in	r31, 0x3e	; 62
   17a28:	15 83       	std	Z+5, r17	; 0x05
   17a2a:	04 83       	std	Z+4, r16	; 0x04
   17a2c:	89 ec       	ldi	r24, 0xC9	; 201
   17a2e:	9f e3       	ldi	r25, 0x3F	; 63
   17a30:	a0 e0       	ldi	r26, 0x00	; 0
   17a32:	81 83       	std	Z+1, r24	; 0x01
   17a34:	92 83       	std	Z+2, r25	; 0x02
   17a36:	a3 83       	std	Z+3, r26	; 0x03
   17a38:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   17a3c:	80 e0       	ldi	r24, 0x00	; 0
   17a3e:	90 e0       	ldi	r25, 0x00	; 0
   17a40:	02 c0       	rjmp	.+4      	; 0x17a46 <lif_stat+0x3e>
   17a42:	8d 2f       	mov	r24, r29
   17a44:	9c 2f       	mov	r25, r28
   17a46:	cd b7       	in	r28, 0x3d	; 61
   17a48:	de b7       	in	r29, 0x3e	; 62
   17a4a:	25 96       	adiw	r28, 0x05	; 5
   17a4c:	e4 e0       	ldi	r30, 0x04	; 4
   17a4e:	0c 94 02 e1 	jmp	0x1c204	; 0x1c204 <__epilogue_restores__+0x1c>

00017a52 <lif_seek_msg>:
   17a52:	a9 e0       	ldi	r26, 0x09	; 9
   17a54:	b0 e0       	ldi	r27, 0x00	; 0
   17a56:	ef e2       	ldi	r30, 0x2F	; 47
   17a58:	fd eb       	ldi	r31, 0xBD	; 189
   17a5a:	0c 94 e2 e0 	jmp	0x1c1c4	; 0x1c1c4 <__prologue_saves__+0x14>
   17a5e:	ec 01       	movw	r28, r24
   17a60:	6a 01       	movw	r12, r20
   17a62:	7b 01       	movw	r14, r22
   17a64:	89 01       	movw	r16, r18
   17a66:	0e 94 c6 78 	call	0xf18c	; 0xf18c <ftell>
   17a6a:	6c 15       	cp	r22, r12
   17a6c:	7d 05       	cpc	r23, r13
   17a6e:	8e 05       	cpc	r24, r14
   17a70:	9f 05       	cpc	r25, r15
   17a72:	19 f4       	brne	.+6      	; 0x17a7a <lif_seek_msg+0x28>
   17a74:	81 e0       	ldi	r24, 0x01	; 1
   17a76:	90 e0       	ldi	r25, 0x00	; 0
   17a78:	1b c0       	rjmp	.+54     	; 0x17ab0 <lif_seek_msg+0x5e>
   17a7a:	20 e0       	ldi	r18, 0x00	; 0
   17a7c:	30 e0       	ldi	r19, 0x00	; 0
   17a7e:	b7 01       	movw	r22, r14
   17a80:	a6 01       	movw	r20, r12
   17a82:	ce 01       	movw	r24, r28
   17a84:	0e 94 49 79 	call	0xf292	; 0xf292 <fseek>
   17a88:	97 ff       	sbrs	r25, 7
   17a8a:	f4 cf       	rjmp	.-24     	; 0x17a74 <lif_seek_msg+0x22>
   17a8c:	ed b7       	in	r30, 0x3d	; 61
   17a8e:	fe b7       	in	r31, 0x3e	; 62
   17a90:	c6 82       	std	Z+6, r12	; 0x06
   17a92:	d7 82       	std	Z+7, r13	; 0x07
   17a94:	e0 86       	std	Z+8, r14	; 0x08
   17a96:	f1 86       	std	Z+9, r15	; 0x09
   17a98:	15 83       	std	Z+5, r17	; 0x05
   17a9a:	04 83       	std	Z+4, r16	; 0x04
   17a9c:	88 ea       	ldi	r24, 0xA8	; 168
   17a9e:	9f e3       	ldi	r25, 0x3F	; 63
   17aa0:	a0 e0       	ldi	r26, 0x00	; 0
   17aa2:	81 83       	std	Z+1, r24	; 0x01
   17aa4:	92 83       	std	Z+2, r25	; 0x02
   17aa6:	a3 83       	std	Z+3, r26	; 0x03
   17aa8:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   17aac:	80 e0       	ldi	r24, 0x00	; 0
   17aae:	90 e0       	ldi	r25, 0x00	; 0
   17ab0:	cd b7       	in	r28, 0x3d	; 61
   17ab2:	de b7       	in	r29, 0x3e	; 62
   17ab4:	29 96       	adiw	r28, 0x09	; 9
   17ab6:	e8 e0       	ldi	r30, 0x08	; 8
   17ab8:	0c 94 fe e0 	jmp	0x1c1fc	; 0x1c1fc <__epilogue_restores__+0x14>

00017abc <lif_read>:
   17abc:	af e0       	ldi	r26, 0x0F	; 15
   17abe:	b0 e0       	ldi	r27, 0x00	; 0
   17ac0:	e4 e6       	ldi	r30, 0x64	; 100
   17ac2:	fd eb       	ldi	r31, 0xBD	; 189
   17ac4:	0c 94 de e0 	jmp	0x1c1bc	; 0x1c1bc <__prologue_saves__+0xc>
   17ac8:	ec 01       	movw	r28, r24
   17aca:	7b 01       	movw	r14, r22
   17acc:	49 01       	movw	r8, r18
   17ace:	5a 01       	movw	r10, r20
   17ad0:	28 81       	ld	r18, Y
   17ad2:	39 81       	ldd	r19, Y+1	; 0x01
   17ad4:	b5 01       	movw	r22, r10
   17ad6:	a4 01       	movw	r20, r8
   17ad8:	8a 81       	ldd	r24, Y+2	; 0x02
   17ada:	9b 81       	ldd	r25, Y+3	; 0x03
   17adc:	ba df       	rcall	.-140    	; 0x17a52 <lif_seek_msg>
   17ade:	89 2b       	or	r24, r25
   17ae0:	91 f1       	breq	.+100    	; 0x17b46 <lif_read+0x8a>
   17ae2:	2a 81       	ldd	r18, Y+2	; 0x02
   17ae4:	3b 81       	ldd	r19, Y+3	; 0x03
   17ae6:	a8 01       	movw	r20, r16
   17ae8:	61 e0       	ldi	r22, 0x01	; 1
   17aea:	70 e0       	ldi	r23, 0x00	; 0
   17aec:	c7 01       	movw	r24, r14
   17aee:	0e 94 dd 79 	call	0xf3ba	; 0xf3ba <fread>
   17af2:	6c 01       	movw	r12, r24
   17af4:	e1 2c       	mov	r14, r1
   17af6:	f1 2c       	mov	r15, r1
   17af8:	b8 01       	movw	r22, r16
   17afa:	01 2e       	mov	r0, r17
   17afc:	00 0c       	add	r0, r0
   17afe:	88 0b       	sbc	r24, r24
   17b00:	99 0b       	sbc	r25, r25
   17b02:	c6 16       	cp	r12, r22
   17b04:	d7 06       	cpc	r13, r23
   17b06:	e8 06       	cpc	r14, r24
   17b08:	f9 06       	cpc	r15, r25
   17b0a:	19 f1       	breq	.+70     	; 0x17b52 <lif_read+0x96>
   17b0c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17b10:	81 ff       	sbrs	r24, 1
   17b12:	1d c0       	rjmp	.+58     	; 0x17b4e <lif_read+0x92>
   17b14:	ed b7       	in	r30, 0x3d	; 61
   17b16:	fe b7       	in	r31, 0x3e	; 62
   17b18:	17 87       	std	Z+15, r17	; 0x0f
   17b1a:	06 87       	std	Z+14, r16	; 0x0e
   17b1c:	c2 86       	std	Z+10, r12	; 0x0a
   17b1e:	d3 86       	std	Z+11, r13	; 0x0b
   17b20:	e4 86       	std	Z+12, r14	; 0x0c
   17b22:	f5 86       	std	Z+13, r15	; 0x0d
   17b24:	86 82       	std	Z+6, r8	; 0x06
   17b26:	97 82       	std	Z+7, r9	; 0x07
   17b28:	a0 86       	std	Z+8, r10	; 0x08
   17b2a:	b1 86       	std	Z+9, r11	; 0x09
   17b2c:	88 81       	ld	r24, Y
   17b2e:	99 81       	ldd	r25, Y+1	; 0x01
   17b30:	95 83       	std	Z+5, r25	; 0x05
   17b32:	84 83       	std	Z+4, r24	; 0x04
   17b34:	8c e6       	ldi	r24, 0x6C	; 108
   17b36:	9f e3       	ldi	r25, 0x3F	; 63
   17b38:	a0 e0       	ldi	r26, 0x00	; 0
   17b3a:	81 83       	std	Z+1, r24	; 0x01
   17b3c:	92 83       	std	Z+2, r25	; 0x02
   17b3e:	a3 83       	std	Z+3, r26	; 0x03
   17b40:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   17b44:	04 c0       	rjmp	.+8      	; 0x17b4e <lif_read+0x92>
   17b46:	60 e0       	ldi	r22, 0x00	; 0
   17b48:	70 e0       	ldi	r23, 0x00	; 0
   17b4a:	cb 01       	movw	r24, r22
   17b4c:	02 c0       	rjmp	.+4      	; 0x17b52 <lif_read+0x96>
   17b4e:	c7 01       	movw	r24, r14
   17b50:	b6 01       	movw	r22, r12
   17b52:	cd b7       	in	r28, 0x3d	; 61
   17b54:	de b7       	in	r29, 0x3e	; 62
   17b56:	2f 96       	adiw	r28, 0x0f	; 15
   17b58:	ec e0       	ldi	r30, 0x0C	; 12
   17b5a:	0c 94 fa e0 	jmp	0x1c1f4	; 0x1c1f4 <__epilogue_restores__+0xc>

00017b5e <lif_write>:
   17b5e:	8f 92       	push	r8
   17b60:	9f 92       	push	r9
   17b62:	af 92       	push	r10
   17b64:	bf 92       	push	r11
   17b66:	ef 92       	push	r14
   17b68:	ff 92       	push	r15
   17b6a:	0f 93       	push	r16
   17b6c:	1f 93       	push	r17
   17b6e:	cf 93       	push	r28
   17b70:	df 93       	push	r29
   17b72:	ad b7       	in	r26, 0x3d	; 61
   17b74:	be b7       	in	r27, 0x3e	; 62
   17b76:	1d 97       	sbiw	r26, 0x0d	; 13
   17b78:	0f b6       	in	r0, 0x3f	; 63
   17b7a:	f8 94       	cli
   17b7c:	be bf       	out	0x3e, r27	; 62
   17b7e:	0f be       	out	0x3f, r0	; 63
   17b80:	ad bf       	out	0x3d, r26	; 61
   17b82:	7c 01       	movw	r14, r24
   17b84:	eb 01       	movw	r28, r22
   17b86:	49 01       	movw	r8, r18
   17b88:	5a 01       	movw	r10, r20
   17b8a:	fc 01       	movw	r30, r24
   17b8c:	20 81       	ld	r18, Z
   17b8e:	31 81       	ldd	r19, Z+1	; 0x01
   17b90:	b5 01       	movw	r22, r10
   17b92:	a4 01       	movw	r20, r8
   17b94:	82 81       	ldd	r24, Z+2	; 0x02
   17b96:	93 81       	ldd	r25, Z+3	; 0x03
   17b98:	5c df       	rcall	.-328    	; 0x17a52 <lif_seek_msg>
   17b9a:	00 97       	sbiw	r24, 0x00	; 0
   17b9c:	71 f1       	breq	.+92     	; 0x17bfa <lif_write+0x9c>
   17b9e:	f7 01       	movw	r30, r14
   17ba0:	22 81       	ldd	r18, Z+2	; 0x02
   17ba2:	33 81       	ldd	r19, Z+3	; 0x03
   17ba4:	a8 01       	movw	r20, r16
   17ba6:	61 e0       	ldi	r22, 0x01	; 1
   17ba8:	70 e0       	ldi	r23, 0x00	; 0
   17baa:	ce 01       	movw	r24, r28
   17bac:	0e 94 af 7a 	call	0xf55e	; 0xf55e <fwrite>
   17bb0:	ec 01       	movw	r28, r24
   17bb2:	08 17       	cp	r16, r24
   17bb4:	19 07       	cpc	r17, r25
   17bb6:	f1 f0       	breq	.+60     	; 0x17bf4 <lif_write+0x96>
   17bb8:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   17bbc:	81 ff       	sbrs	r24, 1
   17bbe:	1c c0       	rjmp	.+56     	; 0x17bf8 <lif_write+0x9a>
   17bc0:	ed b7       	in	r30, 0x3d	; 61
   17bc2:	fe b7       	in	r31, 0x3e	; 62
   17bc4:	15 87       	std	Z+13, r17	; 0x0d
   17bc6:	04 87       	std	Z+12, r16	; 0x0c
   17bc8:	d3 87       	std	Z+11, r29	; 0x0b
   17bca:	c2 87       	std	Z+10, r28	; 0x0a
   17bcc:	86 82       	std	Z+6, r8	; 0x06
   17bce:	97 82       	std	Z+7, r9	; 0x07
   17bd0:	a0 86       	std	Z+8, r10	; 0x08
   17bd2:	b1 86       	std	Z+9, r11	; 0x09
   17bd4:	f7 01       	movw	r30, r14
   17bd6:	80 81       	ld	r24, Z
   17bd8:	91 81       	ldd	r25, Z+1	; 0x01
   17bda:	ed b7       	in	r30, 0x3d	; 61
   17bdc:	fe b7       	in	r31, 0x3e	; 62
   17bde:	95 83       	std	Z+5, r25	; 0x05
   17be0:	84 83       	std	Z+4, r24	; 0x04
   17be2:	8f e2       	ldi	r24, 0x2F	; 47
   17be4:	9f e3       	ldi	r25, 0x3F	; 63
   17be6:	a0 e0       	ldi	r26, 0x00	; 0
   17be8:	81 83       	std	Z+1, r24	; 0x01
   17bea:	92 83       	std	Z+2, r25	; 0x02
   17bec:	a3 83       	std	Z+3, r26	; 0x03
   17bee:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   17bf2:	02 c0       	rjmp	.+4      	; 0x17bf8 <lif_write+0x9a>
   17bf4:	c8 01       	movw	r24, r16
   17bf6:	01 c0       	rjmp	.+2      	; 0x17bfa <lif_write+0x9c>
   17bf8:	ce 01       	movw	r24, r28
   17bfa:	ad b7       	in	r26, 0x3d	; 61
   17bfc:	be b7       	in	r27, 0x3e	; 62
   17bfe:	1d 96       	adiw	r26, 0x0d	; 13
   17c00:	0f b6       	in	r0, 0x3f	; 63
   17c02:	f8 94       	cli
   17c04:	be bf       	out	0x3e, r27	; 62
   17c06:	0f be       	out	0x3f, r0	; 63
   17c08:	ad bf       	out	0x3d, r26	; 61
   17c0a:	df 91       	pop	r29
   17c0c:	cf 91       	pop	r28
   17c0e:	1f 91       	pop	r17
   17c10:	0f 91       	pop	r16
   17c12:	ff 90       	pop	r15
   17c14:	ef 90       	pop	r14
   17c16:	bf 90       	pop	r11
   17c18:	af 90       	pop	r10
   17c1a:	9f 90       	pop	r9
   17c1c:	8f 90       	pop	r8
   17c1e:	08 95       	ret

00017c20 <lif_chars>:
   17c20:	80 32       	cpi	r24, 0x20	; 32
   17c22:	91 05       	cpc	r25, r1
   17c24:	e1 f0       	breq	.+56     	; 0x17c5e <lif_chars+0x3e>
   17c26:	9c 01       	movw	r18, r24
   17c28:	21 56       	subi	r18, 0x61	; 97
   17c2a:	31 09       	sbc	r19, r1
   17c2c:	2a 31       	cpi	r18, 0x1A	; 26
   17c2e:	31 05       	cpc	r19, r1
   17c30:	10 f4       	brcc	.+4      	; 0x17c36 <lif_chars+0x16>
   17c32:	80 97       	sbiw	r24, 0x20	; 32
   17c34:	08 95       	ret
   17c36:	9c 01       	movw	r18, r24
   17c38:	21 54       	subi	r18, 0x41	; 65
   17c3a:	31 09       	sbc	r19, r1
   17c3c:	2a 31       	cpi	r18, 0x1A	; 26
   17c3e:	31 05       	cpc	r19, r1
   17c40:	c8 f0       	brcs	.+50     	; 0x17c74 <lif_chars+0x54>
   17c42:	16 16       	cp	r1, r22
   17c44:	17 06       	cpc	r1, r23
   17c46:	74 f4       	brge	.+28     	; 0x17c64 <lif_chars+0x44>
   17c48:	2f 5e       	subi	r18, 0xEF	; 239
   17c4a:	3f 4f       	sbci	r19, 0xFF	; 255
   17c4c:	2a 30       	cpi	r18, 0x0A	; 10
   17c4e:	31 05       	cpc	r19, r1
   17c50:	88 f0       	brcs	.+34     	; 0x17c74 <lif_chars+0x54>
   17c52:	8f 35       	cpi	r24, 0x5F	; 95
   17c54:	91 05       	cpc	r25, r1
   17c56:	49 f0       	breq	.+18     	; 0x17c6a <lif_chars+0x4a>
   17c58:	8d 97       	sbiw	r24, 0x2d	; 45
   17c5a:	21 f4       	brne	.+8      	; 0x17c64 <lif_chars+0x44>
   17c5c:	09 c0       	rjmp	.+18     	; 0x17c70 <lif_chars+0x50>
   17c5e:	80 e2       	ldi	r24, 0x20	; 32
   17c60:	90 e0       	ldi	r25, 0x00	; 0
   17c62:	08 95       	ret
   17c64:	80 e0       	ldi	r24, 0x00	; 0
   17c66:	90 e0       	ldi	r25, 0x00	; 0
   17c68:	08 95       	ret
   17c6a:	8f e5       	ldi	r24, 0x5F	; 95
   17c6c:	90 e0       	ldi	r25, 0x00	; 0
   17c6e:	08 95       	ret
   17c70:	8d e2       	ldi	r24, 0x2D	; 45
   17c72:	90 e0       	ldi	r25, 0x00	; 0
   17c74:	08 95       	ret

00017c76 <lif_B2S>:
   17c76:	a0 e0       	ldi	r26, 0x00	; 0
   17c78:	b0 e0       	ldi	r27, 0x00	; 0
   17c7a:	e1 e4       	ldi	r30, 0x41	; 65
   17c7c:	fe eb       	ldi	r31, 0xBE	; 190
   17c7e:	0c 94 de e0 	jmp	0x1c1bc	; 0x1c1bc <__prologue_saves__+0xc>
   17c82:	5c 01       	movw	r10, r24
   17c84:	6b 01       	movw	r12, r22
   17c86:	ea 01       	movw	r28, r20
   17c88:	4c 01       	movw	r8, r24
   17c8a:	ee 24       	eor	r14, r14
   17c8c:	e3 94       	inc	r14
   17c8e:	f1 2c       	mov	r15, r1
   17c90:	00 e0       	ldi	r16, 0x00	; 0
   17c92:	10 e0       	ldi	r17, 0x00	; 0
   17c94:	0c 17       	cp	r16, r28
   17c96:	1d 07       	cpc	r17, r29
   17c98:	6c f4       	brge	.+26     	; 0x17cb4 <lif_B2S+0x3e>
   17c9a:	f4 01       	movw	r30, r8
   17c9c:	81 91       	ld	r24, Z+
   17c9e:	4f 01       	movw	r8, r30
   17ca0:	b8 01       	movw	r22, r16
   17ca2:	90 e0       	ldi	r25, 0x00	; 0
   17ca4:	bd df       	rcall	.-134    	; 0x17c20 <lif_chars>
   17ca6:	89 2b       	or	r24, r25
   17ca8:	11 f4       	brne	.+4      	; 0x17cae <lif_B2S+0x38>
   17caa:	e1 2c       	mov	r14, r1
   17cac:	f1 2c       	mov	r15, r1
   17cae:	0f 5f       	subi	r16, 0xFF	; 255
   17cb0:	1f 4f       	sbci	r17, 0xFF	; 255
   17cb2:	f0 cf       	rjmp	.-32     	; 0x17c94 <lif_B2S+0x1e>
   17cb4:	d6 01       	movw	r26, r12
   17cb6:	f5 01       	movw	r30, r10
   17cb8:	cf 01       	movw	r24, r30
   17cba:	8a 19       	sub	r24, r10
   17cbc:	9b 09       	sbc	r25, r11
   17cbe:	8c 17       	cp	r24, r28
   17cc0:	9d 07       	cpc	r25, r29
   17cc2:	1c f4       	brge	.+6      	; 0x17cca <lif_B2S+0x54>
   17cc4:	81 91       	ld	r24, Z+
   17cc6:	8d 93       	st	X+, r24
   17cc8:	f7 cf       	rjmp	.-18     	; 0x17cb8 <lif_B2S+0x42>
   17cca:	d7 ff       	sbrs	r29, 7
   17ccc:	02 c0       	rjmp	.+4      	; 0x17cd2 <lif_B2S+0x5c>
   17cce:	c0 e0       	ldi	r28, 0x00	; 0
   17cd0:	d0 e0       	ldi	r29, 0x00	; 0
   17cd2:	cc 0d       	add	r28, r12
   17cd4:	dd 1d       	adc	r29, r13
   17cd6:	18 82       	st	Y, r1
   17cd8:	c6 01       	movw	r24, r12
   17cda:	0e 94 62 2f 	call	0x5ec4	; 0x5ec4 <trim_tail>
   17cde:	c7 01       	movw	r24, r14
   17ce0:	cd b7       	in	r28, 0x3d	; 61
   17ce2:	de b7       	in	r29, 0x3e	; 62
   17ce4:	ec e0       	ldi	r30, 0x0C	; 12
   17ce6:	0c 94 fa e0 	jmp	0x1c1f4	; 0x1c1f4 <__epilogue_restores__+0xc>

00017cea <lif_checkname>:
   17cea:	ef 92       	push	r14
   17cec:	ff 92       	push	r15
   17cee:	0f 93       	push	r16
   17cf0:	1f 93       	push	r17
   17cf2:	cf 93       	push	r28
   17cf4:	df 93       	push	r29
   17cf6:	7c 01       	movw	r14, r24
   17cf8:	ec 01       	movw	r28, r24
   17cfa:	01 e0       	ldi	r16, 0x01	; 1
   17cfc:	10 e0       	ldi	r17, 0x00	; 0
   17cfe:	be 01       	movw	r22, r28
   17d00:	6e 19       	sub	r22, r14
   17d02:	7f 09       	sbc	r23, r15
   17d04:	89 91       	ld	r24, Y+
   17d06:	88 23       	and	r24, r24
   17d08:	39 f0       	breq	.+14     	; 0x17d18 <lif_checkname+0x2e>
   17d0a:	90 e0       	ldi	r25, 0x00	; 0
   17d0c:	89 df       	rcall	.-238    	; 0x17c20 <lif_chars>
   17d0e:	89 2b       	or	r24, r25
   17d10:	b1 f7       	brne	.-20     	; 0x17cfe <lif_checkname+0x14>
   17d12:	00 e0       	ldi	r16, 0x00	; 0
   17d14:	10 e0       	ldi	r17, 0x00	; 0
   17d16:	f3 cf       	rjmp	.-26     	; 0x17cfe <lif_checkname+0x14>
   17d18:	c8 01       	movw	r24, r16
   17d1a:	cd b7       	in	r28, 0x3d	; 61
   17d1c:	de b7       	in	r29, 0x3e	; 62
   17d1e:	e6 e0       	ldi	r30, 0x06	; 6
   17d20:	0c 94 00 e1 	jmp	0x1c200	; 0x1c200 <__epilogue_restores__+0x18>

00017d24 <lif_S2B>:
   17d24:	fb 01       	movw	r30, r22
   17d26:	dc 01       	movw	r26, r24
   17d28:	20 e0       	ldi	r18, 0x00	; 0
   17d2a:	30 e0       	ldi	r19, 0x00	; 0
   17d2c:	61 91       	ld	r22, Z+
   17d2e:	61 11       	cpse	r22, r1
   17d30:	05 c0       	rjmp	.+10     	; 0x17d3c <lif_S2B+0x18>
   17d32:	fc 01       	movw	r30, r24
   17d34:	e2 0f       	add	r30, r18
   17d36:	f3 1f       	adc	r31, r19
   17d38:	60 e2       	ldi	r22, 0x20	; 32
   17d3a:	08 c0       	rjmp	.+16     	; 0x17d4c <lif_S2B+0x28>
   17d3c:	24 17       	cp	r18, r20
   17d3e:	35 07       	cpc	r19, r21
   17d40:	24 f4       	brge	.+8      	; 0x17d4a <lif_S2B+0x26>
   17d42:	6d 93       	st	X+, r22
   17d44:	2f 5f       	subi	r18, 0xFF	; 255
   17d46:	3f 4f       	sbci	r19, 0xFF	; 255
   17d48:	f1 cf       	rjmp	.-30     	; 0x17d2c <lif_S2B+0x8>
   17d4a:	08 95       	ret
   17d4c:	9f 01       	movw	r18, r30
   17d4e:	28 1b       	sub	r18, r24
   17d50:	39 0b       	sbc	r19, r25
   17d52:	24 17       	cp	r18, r20
   17d54:	35 07       	cpc	r19, r21
   17d56:	14 f4       	brge	.+4      	; 0x17d5c <lif_S2B+0x38>
   17d58:	61 93       	st	Z+, r22
   17d5a:	f8 cf       	rjmp	.-16     	; 0x17d4c <lif_S2B+0x28>
   17d5c:	08 95       	ret

00017d5e <lif_fixname>:
   17d5e:	a0 e0       	ldi	r26, 0x00	; 0
   17d60:	b0 e0       	ldi	r27, 0x00	; 0
   17d62:	e5 eb       	ldi	r30, 0xB5	; 181
   17d64:	fe eb       	ldi	r31, 0xBE	; 190
   17d66:	0c 94 e1 e0 	jmp	0x1c1c2	; 0x1c1c2 <__prologue_saves__+0x12>
   17d6a:	8c 01       	movw	r16, r24
   17d6c:	cb 01       	movw	r24, r22
   17d6e:	7a 01       	movw	r14, r20
   17d70:	0e 94 58 75 	call	0xeab0	; 0xeab0 <basename>
   17d74:	6c 01       	movw	r12, r24
   17d76:	e8 01       	movw	r28, r16
   17d78:	80 e2       	ldi	r24, 0x20	; 32
   17d7a:	b8 2e       	mov	r11, r24
   17d7c:	be 01       	movw	r22, r28
   17d7e:	60 1b       	sub	r22, r16
   17d80:	71 0b       	sbc	r23, r17
   17d82:	f6 01       	movw	r30, r12
   17d84:	81 91       	ld	r24, Z+
   17d86:	6f 01       	movw	r12, r30
   17d88:	81 11       	cpse	r24, r1
   17d8a:	02 c0       	rjmp	.+4      	; 0x17d90 <lif_fixname+0x32>
   17d8c:	20 e2       	ldi	r18, 0x20	; 32
   17d8e:	0e c0       	rjmp	.+28     	; 0x17dac <lif_fixname+0x4e>
   17d90:	1e 14       	cp	r1, r14
   17d92:	1f 04       	cpc	r1, r15
   17d94:	dc f7       	brge	.-10     	; 0x17d8c <lif_fixname+0x2e>
   17d96:	8e 32       	cpi	r24, 0x2E	; 46
   17d98:	c9 f3       	breq	.-14     	; 0x17d8c <lif_fixname+0x2e>
   17d9a:	90 e0       	ldi	r25, 0x00	; 0
   17d9c:	41 df       	rcall	.-382    	; 0x17c20 <lif_chars>
   17d9e:	88 23       	and	r24, r24
   17da0:	11 f0       	breq	.+4      	; 0x17da6 <lif_fixname+0x48>
   17da2:	88 83       	st	Y, r24
   17da4:	01 c0       	rjmp	.+2      	; 0x17da8 <lif_fixname+0x4a>
   17da6:	b8 82       	st	Y, r11
   17da8:	21 96       	adiw	r28, 0x01	; 1
   17daa:	e8 cf       	rjmp	.-48     	; 0x17d7c <lif_fixname+0x1e>
   17dac:	ce 01       	movw	r24, r28
   17dae:	80 1b       	sub	r24, r16
   17db0:	91 0b       	sbc	r25, r17
   17db2:	8e 15       	cp	r24, r14
   17db4:	9f 05       	cpc	r25, r15
   17db6:	14 f4       	brge	.+4      	; 0x17dbc <lif_fixname+0x5e>
   17db8:	29 93       	st	Y+, r18
   17dba:	f8 cf       	rjmp	.-16     	; 0x17dac <lif_fixname+0x4e>
   17dbc:	18 82       	st	Y, r1
   17dbe:	f8 01       	movw	r30, r16
   17dc0:	01 90       	ld	r0, Z+
   17dc2:	00 20       	and	r0, r0
   17dc4:	e9 f7       	brne	.-6      	; 0x17dc0 <lif_fixname+0x62>
   17dc6:	cf 01       	movw	r24, r30
   17dc8:	01 97       	sbiw	r24, 0x01	; 1
   17dca:	80 1b       	sub	r24, r16
   17dcc:	91 0b       	sbc	r25, r17
   17dce:	cd b7       	in	r28, 0x3d	; 61
   17dd0:	de b7       	in	r29, 0x3e	; 62
   17dd2:	e9 e0       	ldi	r30, 0x09	; 9
   17dd4:	0c 94 fd e0 	jmp	0x1c1fa	; 0x1c1fa <__epilogue_restores__+0x12>

00017dd8 <lif_vol2str>:
   17dd8:	ef 92       	push	r14
   17dda:	ff 92       	push	r15
   17ddc:	0f 93       	push	r16
   17dde:	1f 93       	push	r17
   17de0:	cf 93       	push	r28
   17de2:	df 93       	push	r29
   17de4:	7c 01       	movw	r14, r24
   17de6:	eb 01       	movw	r28, r22
   17de8:	fc 01       	movw	r30, r24
   17dea:	04 a1       	ldd	r16, Z+36	; 0x24
   17dec:	15 a1       	ldd	r17, Z+37	; 0x25
   17dee:	20 e0       	ldi	r18, 0x00	; 0
   17df0:	30 e0       	ldi	r19, 0x00	; 0
   17df2:	42 e0       	ldi	r20, 0x02	; 2
   17df4:	50 e0       	ldi	r21, 0x00	; 0
   17df6:	60 e0       	ldi	r22, 0x00	; 0
   17df8:	70 e0       	ldi	r23, 0x00	; 0
   17dfa:	ce 01       	movw	r24, r28
   17dfc:	e8 dc       	rcall	.-1584   	; 0x177ce <V2B_MSB>
   17dfe:	b7 01       	movw	r22, r14
   17e00:	6a 5d       	subi	r22, 0xDA	; 218
   17e02:	7f 4f       	sbci	r23, 0xFF	; 255
   17e04:	46 e0       	ldi	r20, 0x06	; 6
   17e06:	50 e0       	ldi	r21, 0x00	; 0
   17e08:	ce 01       	movw	r24, r28
   17e0a:	02 96       	adiw	r24, 0x02	; 2
   17e0c:	8b df       	rcall	.-234    	; 0x17d24 <lif_S2B>
   17e0e:	f7 01       	movw	r30, r14
   17e10:	05 a5       	ldd	r16, Z+45	; 0x2d
   17e12:	16 a5       	ldd	r17, Z+46	; 0x2e
   17e14:	27 a5       	ldd	r18, Z+47	; 0x2f
   17e16:	30 a9       	ldd	r19, Z+48	; 0x30
   17e18:	44 e0       	ldi	r20, 0x04	; 4
   17e1a:	50 e0       	ldi	r21, 0x00	; 0
   17e1c:	68 e0       	ldi	r22, 0x08	; 8
   17e1e:	70 e0       	ldi	r23, 0x00	; 0
   17e20:	ce 01       	movw	r24, r28
   17e22:	d5 dc       	rcall	.-1622   	; 0x177ce <V2B_MSB>
   17e24:	f7 01       	movw	r30, r14
   17e26:	01 a9       	ldd	r16, Z+49	; 0x31
   17e28:	12 a9       	ldd	r17, Z+50	; 0x32
   17e2a:	20 e0       	ldi	r18, 0x00	; 0
   17e2c:	30 e0       	ldi	r19, 0x00	; 0
   17e2e:	42 e0       	ldi	r20, 0x02	; 2
   17e30:	50 e0       	ldi	r21, 0x00	; 0
   17e32:	6c e0       	ldi	r22, 0x0C	; 12
   17e34:	70 e0       	ldi	r23, 0x00	; 0
   17e36:	ce 01       	movw	r24, r28
   17e38:	ca dc       	rcall	.-1644   	; 0x177ce <V2B_MSB>
   17e3a:	00 e0       	ldi	r16, 0x00	; 0
   17e3c:	10 e0       	ldi	r17, 0x00	; 0
   17e3e:	98 01       	movw	r18, r16
   17e40:	42 e0       	ldi	r20, 0x02	; 2
   17e42:	50 e0       	ldi	r21, 0x00	; 0
   17e44:	6e e0       	ldi	r22, 0x0E	; 14
   17e46:	70 e0       	ldi	r23, 0x00	; 0
   17e48:	ce 01       	movw	r24, r28
   17e4a:	c1 dc       	rcall	.-1662   	; 0x177ce <V2B_MSB>
   17e4c:	f7 01       	movw	r30, r14
   17e4e:	05 a9       	ldd	r16, Z+53	; 0x35
   17e50:	16 a9       	ldd	r17, Z+54	; 0x36
   17e52:	27 a9       	ldd	r18, Z+55	; 0x37
   17e54:	30 ad       	ldd	r19, Z+56	; 0x38
   17e56:	44 e0       	ldi	r20, 0x04	; 4
   17e58:	50 e0       	ldi	r21, 0x00	; 0
   17e5a:	60 e1       	ldi	r22, 0x10	; 16
   17e5c:	70 e0       	ldi	r23, 0x00	; 0
   17e5e:	ce 01       	movw	r24, r28
   17e60:	b6 dc       	rcall	.-1684   	; 0x177ce <V2B_MSB>
   17e62:	f7 01       	movw	r30, r14
   17e64:	01 ad       	ldd	r16, Z+57	; 0x39
   17e66:	12 ad       	ldd	r17, Z+58	; 0x3a
   17e68:	20 e0       	ldi	r18, 0x00	; 0
   17e6a:	30 e0       	ldi	r19, 0x00	; 0
   17e6c:	42 e0       	ldi	r20, 0x02	; 2
   17e6e:	50 e0       	ldi	r21, 0x00	; 0
   17e70:	64 e1       	ldi	r22, 0x14	; 20
   17e72:	70 e0       	ldi	r23, 0x00	; 0
   17e74:	ce 01       	movw	r24, r28
   17e76:	ab dc       	rcall	.-1706   	; 0x177ce <V2B_MSB>
   17e78:	00 e0       	ldi	r16, 0x00	; 0
   17e7a:	10 e0       	ldi	r17, 0x00	; 0
   17e7c:	98 01       	movw	r18, r16
   17e7e:	42 e0       	ldi	r20, 0x02	; 2
   17e80:	50 e0       	ldi	r21, 0x00	; 0
   17e82:	66 e1       	ldi	r22, 0x16	; 22
   17e84:	70 e0       	ldi	r23, 0x00	; 0
   17e86:	ce 01       	movw	r24, r28
   17e88:	a2 dc       	rcall	.-1724   	; 0x177ce <V2B_MSB>
   17e8a:	f7 01       	movw	r30, r14
   17e8c:	fd 96       	adiw	r30, 0x3d	; 61
   17e8e:	00 81       	ld	r16, Z
   17e90:	11 81       	ldd	r17, Z+1	; 0x01
   17e92:	22 81       	ldd	r18, Z+2	; 0x02
   17e94:	33 81       	ldd	r19, Z+3	; 0x03
   17e96:	44 e0       	ldi	r20, 0x04	; 4
   17e98:	50 e0       	ldi	r21, 0x00	; 0
   17e9a:	68 e1       	ldi	r22, 0x18	; 24
   17e9c:	70 e0       	ldi	r23, 0x00	; 0
   17e9e:	ce 01       	movw	r24, r28
   17ea0:	96 dc       	rcall	.-1748   	; 0x177ce <V2B_MSB>
   17ea2:	f7 01       	movw	r30, r14
   17ea4:	ef 5b       	subi	r30, 0xBF	; 191
   17ea6:	ff 4f       	sbci	r31, 0xFF	; 255
   17ea8:	00 81       	ld	r16, Z
   17eaa:	11 81       	ldd	r17, Z+1	; 0x01
   17eac:	22 81       	ldd	r18, Z+2	; 0x02
   17eae:	33 81       	ldd	r19, Z+3	; 0x03
   17eb0:	44 e0       	ldi	r20, 0x04	; 4
   17eb2:	50 e0       	ldi	r21, 0x00	; 0
   17eb4:	6c e1       	ldi	r22, 0x1C	; 28
   17eb6:	70 e0       	ldi	r23, 0x00	; 0
   17eb8:	ce 01       	movw	r24, r28
   17eba:	89 dc       	rcall	.-1774   	; 0x177ce <V2B_MSB>
   17ebc:	f7 01       	movw	r30, r14
   17ebe:	eb 5b       	subi	r30, 0xBB	; 187
   17ec0:	ff 4f       	sbci	r31, 0xFF	; 255
   17ec2:	00 81       	ld	r16, Z
   17ec4:	11 81       	ldd	r17, Z+1	; 0x01
   17ec6:	22 81       	ldd	r18, Z+2	; 0x02
   17ec8:	33 81       	ldd	r19, Z+3	; 0x03
   17eca:	44 e0       	ldi	r20, 0x04	; 4
   17ecc:	50 e0       	ldi	r21, 0x00	; 0
   17ece:	60 e2       	ldi	r22, 0x20	; 32
   17ed0:	70 e0       	ldi	r23, 0x00	; 0
   17ed2:	ce 01       	movw	r24, r28
   17ed4:	7c dc       	rcall	.-1800   	; 0x177ce <V2B_MSB>
   17ed6:	de 01       	movw	r26, r28
   17ed8:	94 96       	adiw	r26, 0x24	; 36
   17eda:	f7 01       	movw	r30, r14
   17edc:	e7 5b       	subi	r30, 0xB7	; 183
   17ede:	ff 4f       	sbci	r31, 0xFF	; 255
   17ee0:	86 e0       	ldi	r24, 0x06	; 6
   17ee2:	01 90       	ld	r0, Z+
   17ee4:	0d 92       	st	X+, r0
   17ee6:	8a 95       	dec	r24
   17ee8:	e1 f7       	brne	.-8      	; 0x17ee2 <lif_vol2str+0x10a>
   17eea:	cd b7       	in	r28, 0x3d	; 61
   17eec:	de b7       	in	r29, 0x3e	; 62
   17eee:	e6 e0       	ldi	r30, 0x06	; 6
   17ef0:	0c 94 00 e1 	jmp	0x1c200	; 0x1c200 <__epilogue_restores__+0x18>

00017ef4 <lif_str2vol>:
   17ef4:	0f 93       	push	r16
   17ef6:	1f 93       	push	r17
   17ef8:	cf 93       	push	r28
   17efa:	df 93       	push	r29
   17efc:	8c 01       	movw	r16, r24
   17efe:	eb 01       	movw	r28, r22
   17f00:	42 e0       	ldi	r20, 0x02	; 2
   17f02:	50 e0       	ldi	r21, 0x00	; 0
   17f04:	60 e0       	ldi	r22, 0x00	; 0
   17f06:	70 e0       	ldi	r23, 0x00	; 0
   17f08:	8b dc       	rcall	.-1770   	; 0x17820 <B2V_MSB>
   17f0a:	7d a3       	std	Y+37, r23	; 0x25
   17f0c:	6c a3       	std	Y+36, r22	; 0x24
   17f0e:	be 01       	movw	r22, r28
   17f10:	6a 5d       	subi	r22, 0xDA	; 218
   17f12:	7f 4f       	sbci	r23, 0xFF	; 255
   17f14:	46 e0       	ldi	r20, 0x06	; 6
   17f16:	50 e0       	ldi	r21, 0x00	; 0
   17f18:	c8 01       	movw	r24, r16
   17f1a:	02 96       	adiw	r24, 0x02	; 2
   17f1c:	ac de       	rcall	.-680    	; 0x17c76 <lif_B2S>
   17f1e:	44 e0       	ldi	r20, 0x04	; 4
   17f20:	50 e0       	ldi	r21, 0x00	; 0
   17f22:	68 e0       	ldi	r22, 0x08	; 8
   17f24:	70 e0       	ldi	r23, 0x00	; 0
   17f26:	c8 01       	movw	r24, r16
   17f28:	7b dc       	rcall	.-1802   	; 0x17820 <B2V_MSB>
   17f2a:	6d a7       	std	Y+45, r22	; 0x2d
   17f2c:	7e a7       	std	Y+46, r23	; 0x2e
   17f2e:	8f a7       	std	Y+47, r24	; 0x2f
   17f30:	98 ab       	std	Y+48, r25	; 0x30
   17f32:	42 e0       	ldi	r20, 0x02	; 2
   17f34:	50 e0       	ldi	r21, 0x00	; 0
   17f36:	6c e0       	ldi	r22, 0x0C	; 12
   17f38:	70 e0       	ldi	r23, 0x00	; 0
   17f3a:	c8 01       	movw	r24, r16
   17f3c:	71 dc       	rcall	.-1822   	; 0x17820 <B2V_MSB>
   17f3e:	7a ab       	std	Y+50, r23	; 0x32
   17f40:	69 ab       	std	Y+49, r22	; 0x31
   17f42:	42 e0       	ldi	r20, 0x02	; 2
   17f44:	50 e0       	ldi	r21, 0x00	; 0
   17f46:	6e e0       	ldi	r22, 0x0E	; 14
   17f48:	70 e0       	ldi	r23, 0x00	; 0
   17f4a:	c8 01       	movw	r24, r16
   17f4c:	69 dc       	rcall	.-1838   	; 0x17820 <B2V_MSB>
   17f4e:	7c ab       	std	Y+52, r23	; 0x34
   17f50:	6b ab       	std	Y+51, r22	; 0x33
   17f52:	44 e0       	ldi	r20, 0x04	; 4
   17f54:	50 e0       	ldi	r21, 0x00	; 0
   17f56:	60 e1       	ldi	r22, 0x10	; 16
   17f58:	70 e0       	ldi	r23, 0x00	; 0
   17f5a:	c8 01       	movw	r24, r16
   17f5c:	61 dc       	rcall	.-1854   	; 0x17820 <B2V_MSB>
   17f5e:	6d ab       	std	Y+53, r22	; 0x35
   17f60:	7e ab       	std	Y+54, r23	; 0x36
   17f62:	8f ab       	std	Y+55, r24	; 0x37
   17f64:	98 af       	std	Y+56, r25	; 0x38
   17f66:	42 e0       	ldi	r20, 0x02	; 2
   17f68:	50 e0       	ldi	r21, 0x00	; 0
   17f6a:	64 e1       	ldi	r22, 0x14	; 20
   17f6c:	70 e0       	ldi	r23, 0x00	; 0
   17f6e:	c8 01       	movw	r24, r16
   17f70:	57 dc       	rcall	.-1874   	; 0x17820 <B2V_MSB>
   17f72:	7a af       	std	Y+58, r23	; 0x3a
   17f74:	69 af       	std	Y+57, r22	; 0x39
   17f76:	42 e0       	ldi	r20, 0x02	; 2
   17f78:	50 e0       	ldi	r21, 0x00	; 0
   17f7a:	66 e1       	ldi	r22, 0x16	; 22
   17f7c:	70 e0       	ldi	r23, 0x00	; 0
   17f7e:	c8 01       	movw	r24, r16
   17f80:	4f dc       	rcall	.-1890   	; 0x17820 <B2V_MSB>
   17f82:	7c af       	std	Y+60, r23	; 0x3c
   17f84:	6b af       	std	Y+59, r22	; 0x3b
   17f86:	44 e0       	ldi	r20, 0x04	; 4
   17f88:	50 e0       	ldi	r21, 0x00	; 0
   17f8a:	68 e1       	ldi	r22, 0x18	; 24
   17f8c:	70 e0       	ldi	r23, 0x00	; 0
   17f8e:	c8 01       	movw	r24, r16
   17f90:	47 dc       	rcall	.-1906   	; 0x17820 <B2V_MSB>
   17f92:	fe 01       	movw	r30, r28
   17f94:	fd 96       	adiw	r30, 0x3d	; 61
   17f96:	60 83       	st	Z, r22
   17f98:	71 83       	std	Z+1, r23	; 0x01
   17f9a:	82 83       	std	Z+2, r24	; 0x02
   17f9c:	93 83       	std	Z+3, r25	; 0x03
   17f9e:	44 e0       	ldi	r20, 0x04	; 4
   17fa0:	50 e0       	ldi	r21, 0x00	; 0
   17fa2:	6c e1       	ldi	r22, 0x1C	; 28
   17fa4:	70 e0       	ldi	r23, 0x00	; 0
   17fa6:	c8 01       	movw	r24, r16
   17fa8:	3b dc       	rcall	.-1930   	; 0x17820 <B2V_MSB>
   17faa:	fe 01       	movw	r30, r28
   17fac:	ef 5b       	subi	r30, 0xBF	; 191
   17fae:	ff 4f       	sbci	r31, 0xFF	; 255
   17fb0:	60 83       	st	Z, r22
   17fb2:	71 83       	std	Z+1, r23	; 0x01
   17fb4:	82 83       	std	Z+2, r24	; 0x02
   17fb6:	93 83       	std	Z+3, r25	; 0x03
   17fb8:	44 e0       	ldi	r20, 0x04	; 4
   17fba:	50 e0       	ldi	r21, 0x00	; 0
   17fbc:	60 e2       	ldi	r22, 0x20	; 32
   17fbe:	70 e0       	ldi	r23, 0x00	; 0
   17fc0:	c8 01       	movw	r24, r16
   17fc2:	2e dc       	rcall	.-1956   	; 0x17820 <B2V_MSB>
   17fc4:	fe 01       	movw	r30, r28
   17fc6:	eb 5b       	subi	r30, 0xBB	; 187
   17fc8:	ff 4f       	sbci	r31, 0xFF	; 255
   17fca:	60 83       	st	Z, r22
   17fcc:	71 83       	std	Z+1, r23	; 0x01
   17fce:	82 83       	std	Z+2, r24	; 0x02
   17fd0:	93 83       	std	Z+3, r25	; 0x03
   17fd2:	de 01       	movw	r26, r28
   17fd4:	a7 5b       	subi	r26, 0xB7	; 183
   17fd6:	bf 4f       	sbci	r27, 0xFF	; 255
   17fd8:	f8 01       	movw	r30, r16
   17fda:	b4 96       	adiw	r30, 0x24	; 36
   17fdc:	86 e0       	ldi	r24, 0x06	; 6
   17fde:	01 90       	ld	r0, Z+
   17fe0:	0d 92       	st	X+, r0
   17fe2:	8a 95       	dec	r24
   17fe4:	e1 f7       	brne	.-8      	; 0x17fde <lif_str2vol+0xea>
   17fe6:	df 91       	pop	r29
   17fe8:	cf 91       	pop	r28
   17fea:	1f 91       	pop	r17
   17fec:	0f 91       	pop	r16
   17fee:	08 95       	ret

00017ff0 <lif_dir2str>:
   17ff0:	ef 92       	push	r14
   17ff2:	ff 92       	push	r15
   17ff4:	0f 93       	push	r16
   17ff6:	1f 93       	push	r17
   17ff8:	cf 93       	push	r28
   17ffa:	df 93       	push	r29
   17ffc:	ec 01       	movw	r28, r24
   17ffe:	7b 01       	movw	r14, r22
   18000:	bc 01       	movw	r22, r24
   18002:	61 5b       	subi	r22, 0xB1	; 177
   18004:	7f 4f       	sbci	r23, 0xFF	; 255
   18006:	4a e0       	ldi	r20, 0x0A	; 10
   18008:	50 e0       	ldi	r21, 0x00	; 0
   1800a:	c7 01       	movw	r24, r14
   1800c:	8b de       	rcall	.-746    	; 0x17d24 <lif_S2B>
   1800e:	fe 01       	movw	r30, r28
   18010:	e6 5a       	subi	r30, 0xA6	; 166
   18012:	ff 4f       	sbci	r31, 0xFF	; 255
   18014:	00 81       	ld	r16, Z
   18016:	11 81       	ldd	r17, Z+1	; 0x01
   18018:	20 e0       	ldi	r18, 0x00	; 0
   1801a:	30 e0       	ldi	r19, 0x00	; 0
   1801c:	42 e0       	ldi	r20, 0x02	; 2
   1801e:	50 e0       	ldi	r21, 0x00	; 0
   18020:	6a e0       	ldi	r22, 0x0A	; 10
   18022:	70 e0       	ldi	r23, 0x00	; 0
   18024:	c7 01       	movw	r24, r14
   18026:	d3 db       	rcall	.-2138   	; 0x177ce <V2B_MSB>
   18028:	fe 01       	movw	r30, r28
   1802a:	e4 5a       	subi	r30, 0xA4	; 164
   1802c:	ff 4f       	sbci	r31, 0xFF	; 255
   1802e:	00 81       	ld	r16, Z
   18030:	11 81       	ldd	r17, Z+1	; 0x01
   18032:	22 81       	ldd	r18, Z+2	; 0x02
   18034:	33 81       	ldd	r19, Z+3	; 0x03
   18036:	44 e0       	ldi	r20, 0x04	; 4
   18038:	50 e0       	ldi	r21, 0x00	; 0
   1803a:	6c e0       	ldi	r22, 0x0C	; 12
   1803c:	70 e0       	ldi	r23, 0x00	; 0
   1803e:	c7 01       	movw	r24, r14
   18040:	c6 db       	rcall	.-2164   	; 0x177ce <V2B_MSB>
   18042:	fe 01       	movw	r30, r28
   18044:	e0 5a       	subi	r30, 0xA0	; 160
   18046:	ff 4f       	sbci	r31, 0xFF	; 255
   18048:	00 81       	ld	r16, Z
   1804a:	11 81       	ldd	r17, Z+1	; 0x01
   1804c:	22 81       	ldd	r18, Z+2	; 0x02
   1804e:	33 81       	ldd	r19, Z+3	; 0x03
   18050:	44 e0       	ldi	r20, 0x04	; 4
   18052:	50 e0       	ldi	r21, 0x00	; 0
   18054:	60 e1       	ldi	r22, 0x10	; 16
   18056:	70 e0       	ldi	r23, 0x00	; 0
   18058:	c7 01       	movw	r24, r14
   1805a:	b9 db       	rcall	.-2190   	; 0x177ce <V2B_MSB>
   1805c:	d7 01       	movw	r26, r14
   1805e:	54 96       	adiw	r26, 0x14	; 20
   18060:	fe 01       	movw	r30, r28
   18062:	ec 59       	subi	r30, 0x9C	; 156
   18064:	ff 4f       	sbci	r31, 0xFF	; 255
   18066:	86 e0       	ldi	r24, 0x06	; 6
   18068:	01 90       	ld	r0, Z+
   1806a:	0d 92       	st	X+, r0
   1806c:	8a 95       	dec	r24
   1806e:	e1 f7       	brne	.-8      	; 0x18068 <lif_dir2str+0x78>
   18070:	fe 01       	movw	r30, r28
   18072:	e6 59       	subi	r30, 0x96	; 150
   18074:	ff 4f       	sbci	r31, 0xFF	; 255
   18076:	00 81       	ld	r16, Z
   18078:	11 81       	ldd	r17, Z+1	; 0x01
   1807a:	20 e0       	ldi	r18, 0x00	; 0
   1807c:	30 e0       	ldi	r19, 0x00	; 0
   1807e:	42 e0       	ldi	r20, 0x02	; 2
   18080:	50 e0       	ldi	r21, 0x00	; 0
   18082:	6a e1       	ldi	r22, 0x1A	; 26
   18084:	70 e0       	ldi	r23, 0x00	; 0
   18086:	c7 01       	movw	r24, r14
   18088:	a2 db       	rcall	.-2236   	; 0x177ce <V2B_MSB>
   1808a:	fe 01       	movw	r30, r28
   1808c:	e4 59       	subi	r30, 0x94	; 148
   1808e:	ff 4f       	sbci	r31, 0xFF	; 255
   18090:	00 81       	ld	r16, Z
   18092:	11 81       	ldd	r17, Z+1	; 0x01
   18094:	20 e0       	ldi	r18, 0x00	; 0
   18096:	30 e0       	ldi	r19, 0x00	; 0
   18098:	42 e0       	ldi	r20, 0x02	; 2
   1809a:	50 e0       	ldi	r21, 0x00	; 0
   1809c:	6c e1       	ldi	r22, 0x1C	; 28
   1809e:	70 e0       	ldi	r23, 0x00	; 0
   180a0:	c7 01       	movw	r24, r14
   180a2:	a9 db       	rcall	.-2222   	; 0x177f6 <V2B_LSB>
   180a4:	c2 59       	subi	r28, 0x92	; 146
   180a6:	df 4f       	sbci	r29, 0xFF	; 255
   180a8:	08 81       	ld	r16, Y
   180aa:	19 81       	ldd	r17, Y+1	; 0x01
   180ac:	20 e0       	ldi	r18, 0x00	; 0
   180ae:	30 e0       	ldi	r19, 0x00	; 0
   180b0:	42 e0       	ldi	r20, 0x02	; 2
   180b2:	50 e0       	ldi	r21, 0x00	; 0
   180b4:	6e e1       	ldi	r22, 0x1E	; 30
   180b6:	70 e0       	ldi	r23, 0x00	; 0
   180b8:	c7 01       	movw	r24, r14
   180ba:	9d db       	rcall	.-2246   	; 0x177f6 <V2B_LSB>
   180bc:	cd b7       	in	r28, 0x3d	; 61
   180be:	de b7       	in	r29, 0x3e	; 62
   180c0:	e6 e0       	ldi	r30, 0x06	; 6
   180c2:	0c 94 00 e1 	jmp	0x1c200	; 0x1c200 <__epilogue_restores__+0x18>

000180c6 <lif_str2dir>:
   180c6:	0f 93       	push	r16
   180c8:	1f 93       	push	r17
   180ca:	cf 93       	push	r28
   180cc:	df 93       	push	r29
   180ce:	8c 01       	movw	r16, r24
   180d0:	eb 01       	movw	r28, r22
   180d2:	61 5b       	subi	r22, 0xB1	; 177
   180d4:	7f 4f       	sbci	r23, 0xFF	; 255
   180d6:	4a e0       	ldi	r20, 0x0A	; 10
   180d8:	50 e0       	ldi	r21, 0x00	; 0
   180da:	cd dd       	rcall	.-1126   	; 0x17c76 <lif_B2S>
   180dc:	42 e0       	ldi	r20, 0x02	; 2
   180de:	50 e0       	ldi	r21, 0x00	; 0
   180e0:	6a e0       	ldi	r22, 0x0A	; 10
   180e2:	70 e0       	ldi	r23, 0x00	; 0
   180e4:	c8 01       	movw	r24, r16
   180e6:	9c db       	rcall	.-2248   	; 0x17820 <B2V_MSB>
   180e8:	fe 01       	movw	r30, r28
   180ea:	e6 5a       	subi	r30, 0xA6	; 166
   180ec:	ff 4f       	sbci	r31, 0xFF	; 255
   180ee:	71 83       	std	Z+1, r23	; 0x01
   180f0:	60 83       	st	Z, r22
   180f2:	44 e0       	ldi	r20, 0x04	; 4
   180f4:	50 e0       	ldi	r21, 0x00	; 0
   180f6:	6c e0       	ldi	r22, 0x0C	; 12
   180f8:	70 e0       	ldi	r23, 0x00	; 0
   180fa:	c8 01       	movw	r24, r16
   180fc:	91 db       	rcall	.-2270   	; 0x17820 <B2V_MSB>
   180fe:	fe 01       	movw	r30, r28
   18100:	e4 5a       	subi	r30, 0xA4	; 164
   18102:	ff 4f       	sbci	r31, 0xFF	; 255
   18104:	60 83       	st	Z, r22
   18106:	71 83       	std	Z+1, r23	; 0x01
   18108:	82 83       	std	Z+2, r24	; 0x02
   1810a:	93 83       	std	Z+3, r25	; 0x03
   1810c:	44 e0       	ldi	r20, 0x04	; 4
   1810e:	50 e0       	ldi	r21, 0x00	; 0
   18110:	60 e1       	ldi	r22, 0x10	; 16
   18112:	70 e0       	ldi	r23, 0x00	; 0
   18114:	c8 01       	movw	r24, r16
   18116:	84 db       	rcall	.-2296   	; 0x17820 <B2V_MSB>
   18118:	fe 01       	movw	r30, r28
   1811a:	e0 5a       	subi	r30, 0xA0	; 160
   1811c:	ff 4f       	sbci	r31, 0xFF	; 255
   1811e:	60 83       	st	Z, r22
   18120:	71 83       	std	Z+1, r23	; 0x01
   18122:	82 83       	std	Z+2, r24	; 0x02
   18124:	93 83       	std	Z+3, r25	; 0x03
   18126:	de 01       	movw	r26, r28
   18128:	ac 59       	subi	r26, 0x9C	; 156
   1812a:	bf 4f       	sbci	r27, 0xFF	; 255
   1812c:	f8 01       	movw	r30, r16
   1812e:	74 96       	adiw	r30, 0x14	; 20
   18130:	86 e0       	ldi	r24, 0x06	; 6
   18132:	01 90       	ld	r0, Z+
   18134:	0d 92       	st	X+, r0
   18136:	8a 95       	dec	r24
   18138:	e1 f7       	brne	.-8      	; 0x18132 <lif_str2dir+0x6c>
   1813a:	42 e0       	ldi	r20, 0x02	; 2
   1813c:	50 e0       	ldi	r21, 0x00	; 0
   1813e:	6a e1       	ldi	r22, 0x1A	; 26
   18140:	70 e0       	ldi	r23, 0x00	; 0
   18142:	c8 01       	movw	r24, r16
   18144:	6d db       	rcall	.-2342   	; 0x17820 <B2V_MSB>
   18146:	fe 01       	movw	r30, r28
   18148:	e6 59       	subi	r30, 0x96	; 150
   1814a:	ff 4f       	sbci	r31, 0xFF	; 255
   1814c:	71 83       	std	Z+1, r23	; 0x01
   1814e:	60 83       	st	Z, r22
   18150:	42 e0       	ldi	r20, 0x02	; 2
   18152:	50 e0       	ldi	r21, 0x00	; 0
   18154:	6c e1       	ldi	r22, 0x1C	; 28
   18156:	70 e0       	ldi	r23, 0x00	; 0
   18158:	c8 01       	movw	r24, r16
   1815a:	81 db       	rcall	.-2302   	; 0x1785e <B2V_LSB>
   1815c:	fe 01       	movw	r30, r28
   1815e:	e4 59       	subi	r30, 0x94	; 148
   18160:	ff 4f       	sbci	r31, 0xFF	; 255
   18162:	71 83       	std	Z+1, r23	; 0x01
   18164:	60 83       	st	Z, r22
   18166:	42 e0       	ldi	r20, 0x02	; 2
   18168:	50 e0       	ldi	r21, 0x00	; 0
   1816a:	6e e1       	ldi	r22, 0x1E	; 30
   1816c:	70 e0       	ldi	r23, 0x00	; 0
   1816e:	c8 01       	movw	r24, r16
   18170:	76 db       	rcall	.-2324   	; 0x1785e <B2V_LSB>
   18172:	c2 59       	subi	r28, 0x92	; 146
   18174:	df 4f       	sbci	r29, 0xFF	; 255
   18176:	79 83       	std	Y+1, r23	; 0x01
   18178:	68 83       	st	Y, r22
   1817a:	df 91       	pop	r29
   1817c:	cf 91       	pop	r28
   1817e:	1f 91       	pop	r17
   18180:	0f 91       	pop	r16
   18182:	08 95       	ret

00018184 <lif_BIN2BCD>:
   18184:	6a e0       	ldi	r22, 0x0A	; 10
   18186:	0e 94 38 e0 	call	0x1c070	; 0x1c070 <__udivmodqi4>
   1818a:	82 95       	swap	r24
   1818c:	80 7f       	andi	r24, 0xF0	; 240
   1818e:	89 2b       	or	r24, r25
   18190:	08 95       	ret

00018192 <lif_BCD2BIN>:
   18192:	28 2f       	mov	r18, r24
   18194:	22 95       	swap	r18
   18196:	2f 70       	andi	r18, 0x0F	; 15
   18198:	8f 70       	andi	r24, 0x0F	; 15
   1819a:	90 e0       	ldi	r25, 0x00	; 0
   1819c:	3a e0       	ldi	r19, 0x0A	; 10
   1819e:	23 9f       	mul	r18, r19
   181a0:	80 0d       	add	r24, r0
   181a2:	91 1d       	adc	r25, r1
   181a4:	11 24       	eor	r1, r1
   181a6:	08 95       	ret

000181a8 <lif_time2lifbcd>:
   181a8:	aa e1       	ldi	r26, 0x1A	; 26
   181aa:	b0 e0       	ldi	r27, 0x00	; 0
   181ac:	ea ed       	ldi	r30, 0xDA	; 218
   181ae:	f0 ec       	ldi	r31, 0xC0	; 192
   181b0:	0c 94 e6 e0 	jmp	0x1c1cc	; 0x1c1cc <__prologue_saves__+0x1c>
   181b4:	8b 01       	movw	r16, r22
   181b6:	9c 01       	movw	r18, r24
   181b8:	6f 8b       	std	Y+23, r22	; 0x17
   181ba:	78 8f       	std	Y+24, r23	; 0x18
   181bc:	89 8f       	std	Y+25, r24	; 0x19
   181be:	9a 8f       	std	Y+26, r25	; 0x1a
   181c0:	67 2b       	or	r22, r23
   181c2:	68 2b       	or	r22, r24
   181c4:	69 2b       	or	r22, r25
   181c6:	41 f4       	brne	.+16     	; 0x181d8 <lif_time2lifbcd+0x30>
   181c8:	fa 01       	movw	r30, r20
   181ca:	ca 01       	movw	r24, r20
   181cc:	06 96       	adiw	r24, 0x06	; 6
   181ce:	11 92       	st	Z+, r1
   181d0:	e8 17       	cp	r30, r24
   181d2:	f9 07       	cpc	r31, r25
   181d4:	e1 f7       	brne	.-8      	; 0x181ce <lif_time2lifbcd+0x26>
   181d6:	26 c0       	rjmp	.+76     	; 0x18224 <lif_time2lifbcd+0x7c>
   181d8:	8a 01       	movw	r16, r20
   181da:	be 01       	movw	r22, r28
   181dc:	6f 5f       	subi	r22, 0xFF	; 255
   181de:	7f 4f       	sbci	r23, 0xFF	; 255
   181e0:	ce 01       	movw	r24, r28
   181e2:	47 96       	adiw	r24, 0x17	; 23
   181e4:	0e 94 d6 34 	call	0x69ac	; 0x69ac <gmtime_r>
   181e8:	8b 85       	ldd	r24, Y+11	; 0x0b
   181ea:	9c 85       	ldd	r25, Y+12	; 0x0c
   181ec:	64 e6       	ldi	r22, 0x64	; 100
   181ee:	70 e0       	ldi	r23, 0x00	; 0
   181f0:	0e 94 58 e0 	call	0x1c0b0	; 0x1c0b0 <__divmodhi4>
   181f4:	c7 df       	rcall	.-114    	; 0x18184 <lif_BIN2BCD>
   181f6:	f8 01       	movw	r30, r16
   181f8:	80 83       	st	Z, r24
   181fa:	89 85       	ldd	r24, Y+9	; 0x09
   181fc:	8f 5f       	subi	r24, 0xFF	; 255
   181fe:	c2 df       	rcall	.-124    	; 0x18184 <lif_BIN2BCD>
   18200:	f8 01       	movw	r30, r16
   18202:	81 83       	std	Z+1, r24	; 0x01
   18204:	8f 81       	ldd	r24, Y+7	; 0x07
   18206:	be df       	rcall	.-132    	; 0x18184 <lif_BIN2BCD>
   18208:	f8 01       	movw	r30, r16
   1820a:	82 83       	std	Z+2, r24	; 0x02
   1820c:	8d 81       	ldd	r24, Y+5	; 0x05
   1820e:	ba df       	rcall	.-140    	; 0x18184 <lif_BIN2BCD>
   18210:	f8 01       	movw	r30, r16
   18212:	83 83       	std	Z+3, r24	; 0x03
   18214:	8b 81       	ldd	r24, Y+3	; 0x03
   18216:	b6 df       	rcall	.-148    	; 0x18184 <lif_BIN2BCD>
   18218:	f8 01       	movw	r30, r16
   1821a:	84 83       	std	Z+4, r24	; 0x04
   1821c:	89 81       	ldd	r24, Y+1	; 0x01
   1821e:	b2 df       	rcall	.-156    	; 0x18184 <lif_BIN2BCD>
   18220:	f8 01       	movw	r30, r16
   18222:	85 83       	std	Z+5, r24	; 0x05
   18224:	6a 96       	adiw	r28, 0x1a	; 26
   18226:	e4 e0       	ldi	r30, 0x04	; 4
   18228:	0c 94 02 e1 	jmp	0x1c204	; 0x1c204 <__epilogue_restores__+0x1c>

0001822c <lif_lifbcd2time>:
   1822c:	a6 e1       	ldi	r26, 0x16	; 22
   1822e:	b0 e0       	ldi	r27, 0x00	; 0
   18230:	ec e1       	ldi	r30, 0x1C	; 28
   18232:	f1 ec       	ldi	r31, 0xC1	; 193
   18234:	0c 94 e0 e0 	jmp	0x1c1c0	; 0x1c1c0 <__prologue_saves__+0x10>
   18238:	8c 01       	movw	r16, r24
   1823a:	7c 01       	movw	r14, r24
   1823c:	5c 01       	movw	r10, r24
   1823e:	26 e0       	ldi	r18, 0x06	; 6
   18240:	a2 0e       	add	r10, r18
   18242:	b1 1c       	adc	r11, r1
   18244:	cc 24       	eor	r12, r12
   18246:	c3 94       	inc	r12
   18248:	d1 2c       	mov	r13, r1
   1824a:	f7 01       	movw	r30, r14
   1824c:	81 91       	ld	r24, Z+
   1824e:	7f 01       	movw	r14, r30
   18250:	a0 df       	rcall	.-192    	; 0x18192 <lif_BCD2BIN>
   18252:	89 2b       	or	r24, r25
   18254:	11 f0       	breq	.+4      	; 0x1825a <lif_lifbcd2time+0x2e>
   18256:	c1 2c       	mov	r12, r1
   18258:	d1 2c       	mov	r13, r1
   1825a:	ea 14       	cp	r14, r10
   1825c:	fb 04       	cpc	r15, r11
   1825e:	a9 f7       	brne	.-22     	; 0x1824a <lif_lifbcd2time+0x1e>
   18260:	c1 14       	cp	r12, r1
   18262:	d1 04       	cpc	r13, r1
   18264:	61 f5       	brne	.+88     	; 0x182be <lif_lifbcd2time+0x92>
   18266:	f8 01       	movw	r30, r16
   18268:	80 81       	ld	r24, Z
   1826a:	93 df       	rcall	.-218    	; 0x18192 <lif_BCD2BIN>
   1826c:	7c 01       	movw	r14, r24
   1826e:	f8 01       	movw	r30, r16
   18270:	81 81       	ldd	r24, Z+1	; 0x01
   18272:	8f df       	rcall	.-226    	; 0x18192 <lif_BCD2BIN>
   18274:	01 97       	sbiw	r24, 0x01	; 1
   18276:	f6 e4       	ldi	r31, 0x46	; 70
   18278:	ef 16       	cp	r14, r31
   1827a:	f1 04       	cpc	r15, r1
   1827c:	1c f4       	brge	.+6      	; 0x18284 <lif_lifbcd2time+0x58>
   1827e:	24 e6       	ldi	r18, 0x64	; 100
   18280:	e2 0e       	add	r14, r18
   18282:	f1 1c       	adc	r15, r1
   18284:	fc 86       	std	Y+12, r15	; 0x0c
   18286:	eb 86       	std	Y+11, r14	; 0x0b
   18288:	9a 87       	std	Y+10, r25	; 0x0a
   1828a:	89 87       	std	Y+9, r24	; 0x09
   1828c:	f8 01       	movw	r30, r16
   1828e:	82 81       	ldd	r24, Z+2	; 0x02
   18290:	80 df       	rcall	.-256    	; 0x18192 <lif_BCD2BIN>
   18292:	98 87       	std	Y+8, r25	; 0x08
   18294:	8f 83       	std	Y+7, r24	; 0x07
   18296:	f8 01       	movw	r30, r16
   18298:	83 81       	ldd	r24, Z+3	; 0x03
   1829a:	7b df       	rcall	.-266    	; 0x18192 <lif_BCD2BIN>
   1829c:	9e 83       	std	Y+6, r25	; 0x06
   1829e:	8d 83       	std	Y+5, r24	; 0x05
   182a0:	f8 01       	movw	r30, r16
   182a2:	84 81       	ldd	r24, Z+4	; 0x04
   182a4:	76 df       	rcall	.-276    	; 0x18192 <lif_BCD2BIN>
   182a6:	9c 83       	std	Y+4, r25	; 0x04
   182a8:	8b 83       	std	Y+3, r24	; 0x03
   182aa:	f8 01       	movw	r30, r16
   182ac:	85 81       	ldd	r24, Z+5	; 0x05
   182ae:	71 df       	rcall	.-286    	; 0x18192 <lif_BCD2BIN>
   182b0:	9a 83       	std	Y+2, r25	; 0x02
   182b2:	89 83       	std	Y+1, r24	; 0x01
   182b4:	ce 01       	movw	r24, r28
   182b6:	01 96       	adiw	r24, 0x01	; 1
   182b8:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <timegm>
   182bc:	03 c0       	rjmp	.+6      	; 0x182c4 <lif_lifbcd2time+0x98>
   182be:	60 e0       	ldi	r22, 0x00	; 0
   182c0:	70 e0       	ldi	r23, 0x00	; 0
   182c2:	cb 01       	movw	r24, r22
   182c4:	66 96       	adiw	r28, 0x16	; 22
   182c6:	ea e0       	ldi	r30, 0x0A	; 10
   182c8:	0c 94 fc e0 	jmp	0x1c1f8	; 0x1c1f8 <__epilogue_restores__+0x10>

000182cc <lif_ctime_gmt>:
   182cc:	a6 e1       	ldi	r26, 0x16	; 22
   182ce:	b0 e0       	ldi	r27, 0x00	; 0
   182d0:	ec e6       	ldi	r30, 0x6C	; 108
   182d2:	f1 ec       	ldi	r31, 0xC1	; 193
   182d4:	0c 94 e6 e0 	jmp	0x1c1cc	; 0x1c1cc <__prologue_saves__+0x1c>
   182d8:	20 e2       	ldi	r18, 0x20	; 32
   182da:	e5 ee       	ldi	r30, 0xE5	; 229
   182dc:	f9 e1       	ldi	r31, 0x19	; 25
   182de:	df 01       	movw	r26, r30
   182e0:	1d 92       	st	X+, r1
   182e2:	2a 95       	dec	r18
   182e4:	e9 f7       	brne	.-6      	; 0x182e0 <lif_ctime_gmt+0x14>
   182e6:	be 01       	movw	r22, r28
   182e8:	6f 5f       	subi	r22, 0xFF	; 255
   182ea:	7f 4f       	sbci	r23, 0xFF	; 255
   182ec:	0e 94 d6 34 	call	0x69ac	; 0x69ac <gmtime_r>
   182f0:	65 ee       	ldi	r22, 0xE5	; 229
   182f2:	79 e1       	ldi	r23, 0x19	; 25
   182f4:	0e 94 06 3a 	call	0x740c	; 0x740c <asctime_r>
   182f8:	8c 01       	movw	r16, r24
   182fa:	0e 94 62 2f 	call	0x5ec4	; 0x5ec4 <trim_tail>
   182fe:	c8 01       	movw	r24, r16
   18300:	66 96       	adiw	r28, 0x16	; 22
   18302:	e4 e0       	ldi	r30, 0x04	; 4
   18304:	0c 94 02 e1 	jmp	0x1c204	; 0x1c204 <__epilogue_restores__+0x1c>

00018308 <lif_lifbcd2timestr>:
   18308:	a4 e0       	ldi	r26, 0x04	; 4
   1830a:	b0 e0       	ldi	r27, 0x00	; 0
   1830c:	ea e8       	ldi	r30, 0x8A	; 138
   1830e:	f1 ec       	ldi	r31, 0xC1	; 193
   18310:	0c 94 e8 e0 	jmp	0x1c1d0	; 0x1c1d0 <__prologue_saves__+0x20>
   18314:	20 e2       	ldi	r18, 0x20	; 32
   18316:	e5 ec       	ldi	r30, 0xC5	; 197
   18318:	f9 e1       	ldi	r31, 0x19	; 25
   1831a:	df 01       	movw	r26, r30
   1831c:	1d 92       	st	X+, r1
   1831e:	2a 95       	dec	r18
   18320:	e9 f7       	brne	.-6      	; 0x1831c <lif_lifbcd2timestr+0x14>
   18322:	84 df       	rcall	.-248    	; 0x1822c <lif_lifbcd2time>
   18324:	69 83       	std	Y+1, r22	; 0x01
   18326:	7a 83       	std	Y+2, r23	; 0x02
   18328:	8b 83       	std	Y+3, r24	; 0x03
   1832a:	9c 83       	std	Y+4, r25	; 0x04
   1832c:	67 2b       	or	r22, r23
   1832e:	68 2b       	or	r22, r24
   18330:	69 2b       	or	r22, r25
   18332:	29 f0       	breq	.+10     	; 0x1833e <lif_lifbcd2timestr+0x36>
   18334:	ce 01       	movw	r24, r28
   18336:	01 96       	adiw	r24, 0x01	; 1
   18338:	c9 df       	rcall	.-110    	; 0x182cc <lif_ctime_gmt>
   1833a:	bc 01       	movw	r22, r24
   1833c:	02 c0       	rjmp	.+4      	; 0x18342 <lif_lifbcd2timestr+0x3a>
   1833e:	68 e1       	ldi	r22, 0x18	; 24
   18340:	76 e1       	ldi	r23, 0x16	; 22
   18342:	85 ec       	ldi	r24, 0xC5	; 197
   18344:	99 e1       	ldi	r25, 0x19	; 25
   18346:	0e 94 84 2e 	call	0x5d08	; 0x5d08 <strcpy>
   1834a:	85 ec       	ldi	r24, 0xC5	; 197
   1834c:	99 e1       	ldi	r25, 0x19	; 25
   1834e:	24 96       	adiw	r28, 0x04	; 4
   18350:	e2 e0       	ldi	r30, 0x02	; 2
   18352:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

00018356 <lif_image_clear>:
   18356:	20 e7       	ldi	r18, 0x70	; 112
   18358:	fc 01       	movw	r30, r24
   1835a:	11 92       	st	Z+, r1
   1835c:	2a 95       	dec	r18
   1835e:	e9 f7       	brne	.-6      	; 0x1835a <lif_image_clear+0x4>
   18360:	08 95       	ret

00018362 <lif_dir_clear>:
   18362:	81 5b       	subi	r24, 0xB1	; 177
   18364:	9f 4f       	sbci	r25, 0xFF	; 255
   18366:	21 e2       	ldi	r18, 0x21	; 33
   18368:	fc 01       	movw	r30, r24
   1836a:	11 92       	st	Z+, r1
   1836c:	2a 95       	dec	r18
   1836e:	e9 f7       	brne	.-6      	; 0x1836a <lif_dir_clear+0x8>
   18370:	08 95       	ret

00018372 <lif_vol_clear>:
   18372:	84 96       	adiw	r24, 0x24	; 36
   18374:	2b e2       	ldi	r18, 0x2B	; 43
   18376:	fc 01       	movw	r30, r24
   18378:	11 92       	st	Z+, r1
   1837a:	2a 95       	dec	r18
   1837c:	e9 f7       	brne	.-6      	; 0x18378 <lif_vol_clear+0x6>
   1837e:	08 95       	ret

00018380 <lif_dump_vol>:
   18380:	cf 93       	push	r28
   18382:	df 93       	push	r29
   18384:	ad b7       	in	r26, 0x3d	; 61
   18386:	be b7       	in	r27, 0x3e	; 62
   18388:	17 97       	sbiw	r26, 0x07	; 7
   1838a:	0f b6       	in	r0, 0x3f	; 63
   1838c:	f8 94       	cli
   1838e:	be bf       	out	0x3e, r27	; 62
   18390:	0f be       	out	0x3f, r0	; 63
   18392:	ad bf       	out	0x3d, r26	; 61
   18394:	ec 01       	movw	r28, r24
   18396:	ed b7       	in	r30, 0x3d	; 61
   18398:	fe b7       	in	r31, 0x3e	; 62
   1839a:	75 83       	std	Z+5, r23	; 0x05
   1839c:	64 83       	std	Z+4, r22	; 0x04
   1839e:	8a e2       	ldi	r24, 0x2A	; 42
   183a0:	9f e3       	ldi	r25, 0x3F	; 63
   183a2:	a0 e0       	ldi	r26, 0x00	; 0
   183a4:	81 83       	std	Z+1, r24	; 0x01
   183a6:	92 83       	std	Z+2, r25	; 0x02
   183a8:	a3 83       	std	Z+3, r26	; 0x03
   183aa:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   183ae:	88 81       	ld	r24, Y
   183b0:	99 81       	ldd	r25, Y+1	; 0x01
   183b2:	ed b7       	in	r30, 0x3d	; 61
   183b4:	fe b7       	in	r31, 0x3e	; 62
   183b6:	95 83       	std	Z+5, r25	; 0x05
   183b8:	84 83       	std	Z+4, r24	; 0x04
   183ba:	80 e1       	ldi	r24, 0x10	; 16
   183bc:	9f e3       	ldi	r25, 0x3F	; 63
   183be:	a0 e0       	ldi	r26, 0x00	; 0
   183c0:	81 83       	std	Z+1, r24	; 0x01
   183c2:	92 83       	std	Z+2, r25	; 0x02
   183c4:	a3 83       	std	Z+3, r26	; 0x03
   183c6:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   183ca:	8c 81       	ldd	r24, Y+4	; 0x04
   183cc:	9d 81       	ldd	r25, Y+5	; 0x05
   183ce:	ae 81       	ldd	r26, Y+6	; 0x06
   183d0:	bf 81       	ldd	r27, Y+7	; 0x07
   183d2:	ed b7       	in	r30, 0x3d	; 61
   183d4:	fe b7       	in	r31, 0x3e	; 62
   183d6:	84 83       	std	Z+4, r24	; 0x04
   183d8:	95 83       	std	Z+5, r25	; 0x05
   183da:	a6 83       	std	Z+6, r26	; 0x06
   183dc:	b7 83       	std	Z+7, r27	; 0x07
   183de:	83 ef       	ldi	r24, 0xF3	; 243
   183e0:	9e e3       	ldi	r25, 0x3E	; 62
   183e2:	a0 e0       	ldi	r26, 0x00	; 0
   183e4:	81 83       	std	Z+1, r24	; 0x01
   183e6:	92 83       	std	Z+2, r25	; 0x02
   183e8:	a3 83       	std	Z+3, r26	; 0x03
   183ea:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   183ee:	88 85       	ldd	r24, Y+8	; 0x08
   183f0:	99 85       	ldd	r25, Y+9	; 0x09
   183f2:	aa 85       	ldd	r26, Y+10	; 0x0a
   183f4:	bb 85       	ldd	r27, Y+11	; 0x0b
   183f6:	ed b7       	in	r30, 0x3d	; 61
   183f8:	fe b7       	in	r31, 0x3e	; 62
   183fa:	84 83       	std	Z+4, r24	; 0x04
   183fc:	95 83       	std	Z+5, r25	; 0x05
   183fe:	a6 83       	std	Z+6, r26	; 0x06
   18400:	b7 83       	std	Z+7, r27	; 0x07
   18402:	86 ed       	ldi	r24, 0xD6	; 214
   18404:	9e e3       	ldi	r25, 0x3E	; 62
   18406:	a0 e0       	ldi	r26, 0x00	; 0
   18408:	81 83       	std	Z+1, r24	; 0x01
   1840a:	92 83       	std	Z+2, r25	; 0x02
   1840c:	a3 83       	std	Z+3, r26	; 0x03
   1840e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   18412:	8c 85       	ldd	r24, Y+12	; 0x0c
   18414:	9d 85       	ldd	r25, Y+13	; 0x0d
   18416:	ae 85       	ldd	r26, Y+14	; 0x0e
   18418:	bf 85       	ldd	r27, Y+15	; 0x0f
   1841a:	ed b7       	in	r30, 0x3d	; 61
   1841c:	fe b7       	in	r31, 0x3e	; 62
   1841e:	84 83       	std	Z+4, r24	; 0x04
   18420:	95 83       	std	Z+5, r25	; 0x05
   18422:	a6 83       	std	Z+6, r26	; 0x06
   18424:	b7 83       	std	Z+7, r27	; 0x07
   18426:	89 eb       	ldi	r24, 0xB9	; 185
   18428:	9e e3       	ldi	r25, 0x3E	; 62
   1842a:	a0 e0       	ldi	r26, 0x00	; 0
   1842c:	81 83       	std	Z+1, r24	; 0x01
   1842e:	92 83       	std	Z+2, r25	; 0x02
   18430:	a3 83       	std	Z+3, r26	; 0x03
   18432:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   18436:	88 89       	ldd	r24, Y+16	; 0x10
   18438:	99 89       	ldd	r25, Y+17	; 0x11
   1843a:	aa 89       	ldd	r26, Y+18	; 0x12
   1843c:	bb 89       	ldd	r27, Y+19	; 0x13
   1843e:	ed b7       	in	r30, 0x3d	; 61
   18440:	fe b7       	in	r31, 0x3e	; 62
   18442:	84 83       	std	Z+4, r24	; 0x04
   18444:	95 83       	std	Z+5, r25	; 0x05
   18446:	a6 83       	std	Z+6, r26	; 0x06
   18448:	b7 83       	std	Z+7, r27	; 0x07
   1844a:	8c e9       	ldi	r24, 0x9C	; 156
   1844c:	9e e3       	ldi	r25, 0x3E	; 62
   1844e:	a0 e0       	ldi	r26, 0x00	; 0
   18450:	81 83       	std	Z+1, r24	; 0x01
   18452:	92 83       	std	Z+2, r25	; 0x02
   18454:	a3 83       	std	Z+3, r26	; 0x03
   18456:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1845a:	8c 89       	ldd	r24, Y+20	; 0x14
   1845c:	9d 89       	ldd	r25, Y+21	; 0x15
   1845e:	ae 89       	ldd	r26, Y+22	; 0x16
   18460:	bf 89       	ldd	r27, Y+23	; 0x17
   18462:	ed b7       	in	r30, 0x3d	; 61
   18464:	fe b7       	in	r31, 0x3e	; 62
   18466:	84 83       	std	Z+4, r24	; 0x04
   18468:	95 83       	std	Z+5, r25	; 0x05
   1846a:	a6 83       	std	Z+6, r26	; 0x06
   1846c:	b7 83       	std	Z+7, r27	; 0x07
   1846e:	8f e7       	ldi	r24, 0x7F	; 127
   18470:	9e e3       	ldi	r25, 0x3E	; 62
   18472:	a0 e0       	ldi	r26, 0x00	; 0
   18474:	81 83       	std	Z+1, r24	; 0x01
   18476:	92 83       	std	Z+2, r25	; 0x02
   18478:	a3 83       	std	Z+3, r26	; 0x03
   1847a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1847e:	88 8d       	ldd	r24, Y+24	; 0x18
   18480:	99 8d       	ldd	r25, Y+25	; 0x19
   18482:	aa 8d       	ldd	r26, Y+26	; 0x1a
   18484:	bb 8d       	ldd	r27, Y+27	; 0x1b
   18486:	ed b7       	in	r30, 0x3d	; 61
   18488:	fe b7       	in	r31, 0x3e	; 62
   1848a:	84 83       	std	Z+4, r24	; 0x04
   1848c:	95 83       	std	Z+5, r25	; 0x05
   1848e:	a6 83       	std	Z+6, r26	; 0x06
   18490:	b7 83       	std	Z+7, r27	; 0x07
   18492:	82 e6       	ldi	r24, 0x62	; 98
   18494:	9e e3       	ldi	r25, 0x3E	; 62
   18496:	a0 e0       	ldi	r26, 0x00	; 0
   18498:	81 83       	std	Z+1, r24	; 0x01
   1849a:	92 83       	std	Z+2, r25	; 0x02
   1849c:	a3 83       	std	Z+3, r26	; 0x03
   1849e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   184a2:	8c 8d       	ldd	r24, Y+28	; 0x1c
   184a4:	9d 8d       	ldd	r25, Y+29	; 0x1d
   184a6:	09 2e       	mov	r0, r25
   184a8:	00 0c       	add	r0, r0
   184aa:	aa 0b       	sbc	r26, r26
   184ac:	bb 0b       	sbc	r27, r27
   184ae:	ed b7       	in	r30, 0x3d	; 61
   184b0:	fe b7       	in	r31, 0x3e	; 62
   184b2:	84 83       	std	Z+4, r24	; 0x04
   184b4:	95 83       	std	Z+5, r25	; 0x05
   184b6:	a6 83       	std	Z+6, r26	; 0x06
   184b8:	b7 83       	std	Z+7, r27	; 0x07
   184ba:	85 e4       	ldi	r24, 0x45	; 69
   184bc:	9e e3       	ldi	r25, 0x3E	; 62
   184be:	a0 e0       	ldi	r26, 0x00	; 0
   184c0:	81 83       	std	Z+1, r24	; 0x01
   184c2:	92 83       	std	Z+2, r25	; 0x02
   184c4:	a3 83       	std	Z+3, r26	; 0x03
   184c6:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   184ca:	8e 8d       	ldd	r24, Y+30	; 0x1e
   184cc:	9f 8d       	ldd	r25, Y+31	; 0x1f
   184ce:	09 2e       	mov	r0, r25
   184d0:	00 0c       	add	r0, r0
   184d2:	aa 0b       	sbc	r26, r26
   184d4:	bb 0b       	sbc	r27, r27
   184d6:	ed b7       	in	r30, 0x3d	; 61
   184d8:	fe b7       	in	r31, 0x3e	; 62
   184da:	84 83       	std	Z+4, r24	; 0x04
   184dc:	95 83       	std	Z+5, r25	; 0x05
   184de:	a6 83       	std	Z+6, r26	; 0x06
   184e0:	b7 83       	std	Z+7, r27	; 0x07
   184e2:	88 e2       	ldi	r24, 0x28	; 40
   184e4:	9e e3       	ldi	r25, 0x3E	; 62
   184e6:	a0 e0       	ldi	r26, 0x00	; 0
   184e8:	81 83       	std	Z+1, r24	; 0x01
   184ea:	92 83       	std	Z+2, r25	; 0x02
   184ec:	a3 83       	std	Z+3, r26	; 0x03
   184ee:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   184f2:	ce 01       	movw	r24, r28
   184f4:	86 96       	adiw	r24, 0x26	; 38
   184f6:	ed b7       	in	r30, 0x3d	; 61
   184f8:	fe b7       	in	r31, 0x3e	; 62
   184fa:	95 83       	std	Z+5, r25	; 0x05
   184fc:	84 83       	std	Z+4, r24	; 0x04
   184fe:	8e e0       	ldi	r24, 0x0E	; 14
   18500:	9e e3       	ldi	r25, 0x3E	; 62
   18502:	a0 e0       	ldi	r26, 0x00	; 0
   18504:	81 83       	std	Z+1, r24	; 0x01
   18506:	92 83       	std	Z+2, r25	; 0x02
   18508:	a3 83       	std	Z+3, r26	; 0x03
   1850a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1850e:	8c a1       	ldd	r24, Y+36	; 0x24
   18510:	9d a1       	ldd	r25, Y+37	; 0x25
   18512:	ed b7       	in	r30, 0x3d	; 61
   18514:	fe b7       	in	r31, 0x3e	; 62
   18516:	95 83       	std	Z+5, r25	; 0x05
   18518:	84 83       	std	Z+4, r24	; 0x04
   1851a:	82 ef       	ldi	r24, 0xF2	; 242
   1851c:	9d e3       	ldi	r25, 0x3D	; 61
   1851e:	a0 e0       	ldi	r26, 0x00	; 0
   18520:	81 83       	std	Z+1, r24	; 0x01
   18522:	92 83       	std	Z+2, r25	; 0x02
   18524:	a3 83       	std	Z+3, r26	; 0x03
   18526:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1852a:	8d a5       	ldd	r24, Y+45	; 0x2d
   1852c:	9e a5       	ldd	r25, Y+46	; 0x2e
   1852e:	af a5       	ldd	r26, Y+47	; 0x2f
   18530:	b8 a9       	ldd	r27, Y+48	; 0x30
   18532:	ed b7       	in	r30, 0x3d	; 61
   18534:	fe b7       	in	r31, 0x3e	; 62
   18536:	84 83       	std	Z+4, r24	; 0x04
   18538:	95 83       	std	Z+5, r25	; 0x05
   1853a:	a6 83       	std	Z+6, r26	; 0x06
   1853c:	b7 83       	std	Z+7, r27	; 0x07
   1853e:	85 ed       	ldi	r24, 0xD5	; 213
   18540:	9d e3       	ldi	r25, 0x3D	; 61
   18542:	a0 e0       	ldi	r26, 0x00	; 0
   18544:	81 83       	std	Z+1, r24	; 0x01
   18546:	92 83       	std	Z+2, r25	; 0x02
   18548:	a3 83       	std	Z+3, r26	; 0x03
   1854a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1854e:	8d a9       	ldd	r24, Y+53	; 0x35
   18550:	9e a9       	ldd	r25, Y+54	; 0x36
   18552:	af a9       	ldd	r26, Y+55	; 0x37
   18554:	b8 ad       	ldd	r27, Y+56	; 0x38
   18556:	ed b7       	in	r30, 0x3d	; 61
   18558:	fe b7       	in	r31, 0x3e	; 62
   1855a:	84 83       	std	Z+4, r24	; 0x04
   1855c:	95 83       	std	Z+5, r25	; 0x05
   1855e:	a6 83       	std	Z+6, r26	; 0x06
   18560:	b7 83       	std	Z+7, r27	; 0x07
   18562:	88 eb       	ldi	r24, 0xB8	; 184
   18564:	9d e3       	ldi	r25, 0x3D	; 61
   18566:	a0 e0       	ldi	r26, 0x00	; 0
   18568:	81 83       	std	Z+1, r24	; 0x01
   1856a:	92 83       	std	Z+2, r25	; 0x02
   1856c:	a3 83       	std	Z+3, r26	; 0x03
   1856e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   18572:	89 a9       	ldd	r24, Y+49	; 0x31
   18574:	9a a9       	ldd	r25, Y+50	; 0x32
   18576:	ed b7       	in	r30, 0x3d	; 61
   18578:	fe b7       	in	r31, 0x3e	; 62
   1857a:	95 83       	std	Z+5, r25	; 0x05
   1857c:	84 83       	std	Z+4, r24	; 0x04
   1857e:	8c e9       	ldi	r24, 0x9C	; 156
   18580:	9d e3       	ldi	r25, 0x3D	; 61
   18582:	a0 e0       	ldi	r26, 0x00	; 0
   18584:	81 83       	std	Z+1, r24	; 0x01
   18586:	92 83       	std	Z+2, r25	; 0x02
   18588:	a3 83       	std	Z+3, r26	; 0x03
   1858a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1858e:	89 ad       	ldd	r24, Y+57	; 0x39
   18590:	9a ad       	ldd	r25, Y+58	; 0x3a
   18592:	ed b7       	in	r30, 0x3d	; 61
   18594:	fe b7       	in	r31, 0x3e	; 62
   18596:	95 83       	std	Z+5, r25	; 0x05
   18598:	84 83       	std	Z+4, r24	; 0x04
   1859a:	80 e8       	ldi	r24, 0x80	; 128
   1859c:	9d e3       	ldi	r25, 0x3D	; 61
   1859e:	a0 e0       	ldi	r26, 0x00	; 0
   185a0:	81 83       	std	Z+1, r24	; 0x01
   185a2:	92 83       	std	Z+2, r25	; 0x02
   185a4:	a3 83       	std	Z+3, r26	; 0x03
   185a6:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   185aa:	ce 01       	movw	r24, r28
   185ac:	87 5b       	subi	r24, 0xB7	; 183
   185ae:	9f 4f       	sbci	r25, 0xFF	; 255
   185b0:	ab de       	rcall	.-682    	; 0x18308 <lif_lifbcd2timestr>
   185b2:	ed b7       	in	r30, 0x3d	; 61
   185b4:	fe b7       	in	r31, 0x3e	; 62
   185b6:	95 83       	std	Z+5, r25	; 0x05
   185b8:	84 83       	std	Z+4, r24	; 0x04
   185ba:	86 e6       	ldi	r24, 0x66	; 102
   185bc:	9d e3       	ldi	r25, 0x3D	; 61
   185be:	a0 e0       	ldi	r26, 0x00	; 0
   185c0:	81 83       	std	Z+1, r24	; 0x01
   185c2:	92 83       	std	Z+2, r25	; 0x02
   185c4:	a3 83       	std	Z+3, r26	; 0x03
   185c6:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   185ca:	ce 01       	movw	r24, r28
   185cc:	81 5b       	subi	r24, 0xB1	; 177
   185ce:	9f 4f       	sbci	r25, 0xFF	; 255
   185d0:	ed b7       	in	r30, 0x3d	; 61
   185d2:	fe b7       	in	r31, 0x3e	; 62
   185d4:	95 83       	std	Z+5, r25	; 0x05
   185d6:	84 83       	std	Z+4, r24	; 0x04
   185d8:	8c e4       	ldi	r24, 0x4C	; 76
   185da:	9d e3       	ldi	r25, 0x3D	; 61
   185dc:	a0 e0       	ldi	r26, 0x00	; 0
   185de:	81 83       	std	Z+1, r24	; 0x01
   185e0:	92 83       	std	Z+2, r25	; 0x02
   185e2:	a3 83       	std	Z+3, r26	; 0x03
   185e4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   185e8:	fe 01       	movw	r30, r28
   185ea:	e6 5a       	subi	r30, 0xA6	; 166
   185ec:	ff 4f       	sbci	r31, 0xFF	; 255
   185ee:	80 81       	ld	r24, Z
   185f0:	91 81       	ldd	r25, Z+1	; 0x01
   185f2:	ed b7       	in	r30, 0x3d	; 61
   185f4:	fe b7       	in	r31, 0x3e	; 62
   185f6:	95 83       	std	Z+5, r25	; 0x05
   185f8:	84 83       	std	Z+4, r24	; 0x04
   185fa:	80 e3       	ldi	r24, 0x30	; 48
   185fc:	9d e3       	ldi	r25, 0x3D	; 61
   185fe:	a0 e0       	ldi	r26, 0x00	; 0
   18600:	81 83       	std	Z+1, r24	; 0x01
   18602:	92 83       	std	Z+2, r25	; 0x02
   18604:	a3 83       	std	Z+3, r26	; 0x03
   18606:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1860a:	fe 01       	movw	r30, r28
   1860c:	e6 59       	subi	r30, 0x96	; 150
   1860e:	ff 4f       	sbci	r31, 0xFF	; 255
   18610:	80 81       	ld	r24, Z
   18612:	91 81       	ldd	r25, Z+1	; 0x01
   18614:	ed b7       	in	r30, 0x3d	; 61
   18616:	fe b7       	in	r31, 0x3e	; 62
   18618:	95 83       	std	Z+5, r25	; 0x05
   1861a:	84 83       	std	Z+4, r24	; 0x04
   1861c:	84 e1       	ldi	r24, 0x14	; 20
   1861e:	9d e3       	ldi	r25, 0x3D	; 61
   18620:	a0 e0       	ldi	r26, 0x00	; 0
   18622:	81 83       	std	Z+1, r24	; 0x01
   18624:	92 83       	std	Z+2, r25	; 0x02
   18626:	a3 83       	std	Z+3, r26	; 0x03
   18628:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1862c:	fe 01       	movw	r30, r28
   1862e:	e4 5a       	subi	r30, 0xA4	; 164
   18630:	ff 4f       	sbci	r31, 0xFF	; 255
   18632:	80 81       	ld	r24, Z
   18634:	91 81       	ldd	r25, Z+1	; 0x01
   18636:	a2 81       	ldd	r26, Z+2	; 0x02
   18638:	b3 81       	ldd	r27, Z+3	; 0x03
   1863a:	ed b7       	in	r30, 0x3d	; 61
   1863c:	fe b7       	in	r31, 0x3e	; 62
   1863e:	84 83       	std	Z+4, r24	; 0x04
   18640:	95 83       	std	Z+5, r25	; 0x05
   18642:	a6 83       	std	Z+6, r26	; 0x06
   18644:	b7 83       	std	Z+7, r27	; 0x07
   18646:	87 ef       	ldi	r24, 0xF7	; 247
   18648:	9c e3       	ldi	r25, 0x3C	; 60
   1864a:	a0 e0       	ldi	r26, 0x00	; 0
   1864c:	81 83       	std	Z+1, r24	; 0x01
   1864e:	92 83       	std	Z+2, r25	; 0x02
   18650:	a3 83       	std	Z+3, r26	; 0x03
   18652:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   18656:	fe 01       	movw	r30, r28
   18658:	e0 5a       	subi	r30, 0xA0	; 160
   1865a:	ff 4f       	sbci	r31, 0xFF	; 255
   1865c:	80 81       	ld	r24, Z
   1865e:	91 81       	ldd	r25, Z+1	; 0x01
   18660:	a2 81       	ldd	r26, Z+2	; 0x02
   18662:	b3 81       	ldd	r27, Z+3	; 0x03
   18664:	ed b7       	in	r30, 0x3d	; 61
   18666:	fe b7       	in	r31, 0x3e	; 62
   18668:	84 83       	std	Z+4, r24	; 0x04
   1866a:	95 83       	std	Z+5, r25	; 0x05
   1866c:	a6 83       	std	Z+6, r26	; 0x06
   1866e:	b7 83       	std	Z+7, r27	; 0x07
   18670:	8a ed       	ldi	r24, 0xDA	; 218
   18672:	9c e3       	ldi	r25, 0x3C	; 60
   18674:	a0 e0       	ldi	r26, 0x00	; 0
   18676:	81 83       	std	Z+1, r24	; 0x01
   18678:	92 83       	std	Z+2, r25	; 0x02
   1867a:	a3 83       	std	Z+3, r26	; 0x03
   1867c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   18680:	fe 01       	movw	r30, r28
   18682:	e4 59       	subi	r30, 0x94	; 148
   18684:	ff 4f       	sbci	r31, 0xFF	; 255
   18686:	80 81       	ld	r24, Z
   18688:	91 81       	ldd	r25, Z+1	; 0x01
   1868a:	a0 e0       	ldi	r26, 0x00	; 0
   1868c:	b0 e0       	ldi	r27, 0x00	; 0
   1868e:	ed b7       	in	r30, 0x3d	; 61
   18690:	fe b7       	in	r31, 0x3e	; 62
   18692:	84 83       	std	Z+4, r24	; 0x04
   18694:	95 83       	std	Z+5, r25	; 0x05
   18696:	a6 83       	std	Z+6, r26	; 0x06
   18698:	b7 83       	std	Z+7, r27	; 0x07
   1869a:	8d eb       	ldi	r24, 0xBD	; 189
   1869c:	9c e3       	ldi	r25, 0x3C	; 60
   1869e:	a0 e0       	ldi	r26, 0x00	; 0
   186a0:	81 83       	std	Z+1, r24	; 0x01
   186a2:	92 83       	std	Z+2, r25	; 0x02
   186a4:	a3 83       	std	Z+3, r26	; 0x03
   186a6:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   186aa:	fe 01       	movw	r30, r28
   186ac:	e2 59       	subi	r30, 0x92	; 146
   186ae:	ff 4f       	sbci	r31, 0xFF	; 255
   186b0:	80 81       	ld	r24, Z
   186b2:	91 81       	ldd	r25, Z+1	; 0x01
   186b4:	ed b7       	in	r30, 0x3d	; 61
   186b6:	fe b7       	in	r31, 0x3e	; 62
   186b8:	95 83       	std	Z+5, r25	; 0x05
   186ba:	84 83       	std	Z+4, r24	; 0x04
   186bc:	81 ea       	ldi	r24, 0xA1	; 161
   186be:	9c e3       	ldi	r25, 0x3C	; 60
   186c0:	a0 e0       	ldi	r26, 0x00	; 0
   186c2:	81 83       	std	Z+1, r24	; 0x01
   186c4:	92 83       	std	Z+2, r25	; 0x02
   186c6:	a3 83       	std	Z+3, r26	; 0x03
   186c8:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   186cc:	ce 01       	movw	r24, r28
   186ce:	8c 59       	subi	r24, 0x9C	; 156
   186d0:	9f 4f       	sbci	r25, 0xFF	; 255
   186d2:	1a de       	rcall	.-972    	; 0x18308 <lif_lifbcd2timestr>
   186d4:	ed b7       	in	r30, 0x3d	; 61
   186d6:	fe b7       	in	r31, 0x3e	; 62
   186d8:	95 83       	std	Z+5, r25	; 0x05
   186da:	84 83       	std	Z+4, r24	; 0x04
   186dc:	87 e8       	ldi	r24, 0x87	; 135
   186de:	9c e3       	ldi	r25, 0x3C	; 60
   186e0:	a0 e0       	ldi	r26, 0x00	; 0
   186e2:	81 83       	std	Z+1, r24	; 0x01
   186e4:	92 83       	std	Z+2, r25	; 0x02
   186e6:	a3 83       	std	Z+3, r26	; 0x03
   186e8:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   186ec:	85 e8       	ldi	r24, 0x85	; 133
   186ee:	9c e3       	ldi	r25, 0x3C	; 60
   186f0:	a0 e0       	ldi	r26, 0x00	; 0
   186f2:	ed b7       	in	r30, 0x3d	; 61
   186f4:	fe b7       	in	r31, 0x3e	; 62
   186f6:	81 83       	std	Z+1, r24	; 0x01
   186f8:	92 83       	std	Z+2, r25	; 0x02
   186fa:	a3 83       	std	Z+3, r26	; 0x03
   186fc:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   18700:	cd b7       	in	r28, 0x3d	; 61
   18702:	de b7       	in	r29, 0x3e	; 62
   18704:	27 96       	adiw	r28, 0x07	; 7
   18706:	e2 e0       	ldi	r30, 0x02	; 2
   18708:	0c 94 04 e1 	jmp	0x1c208	; 0x1c208 <__epilogue_restores__+0x20>

0001870c <lif_check_volume>:
   1870c:	0f 93       	push	r16
   1870e:	1f 93       	push	r17
   18710:	cf 93       	push	r28
   18712:	df 93       	push	r29
   18714:	ad b7       	in	r26, 0x3d	; 61
   18716:	be b7       	in	r27, 0x3e	; 62
   18718:	17 97       	sbiw	r26, 0x07	; 7
   1871a:	0f b6       	in	r0, 0x3f	; 63
   1871c:	f8 94       	cli
   1871e:	be bf       	out	0x3e, r27	; 62
   18720:	0f be       	out	0x3f, r0	; 63
   18722:	ad bf       	out	0x3d, r26	; 61
   18724:	ec 01       	movw	r28, r24
   18726:	86 96       	adiw	r24, 0x26	; 38
   18728:	e0 da       	rcall	.-2624   	; 0x17cea <lif_checkname>
   1872a:	89 2b       	or	r24, r25
   1872c:	79 f4       	brne	.+30     	; 0x1874c <lif_check_volume+0x40>
   1872e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18732:	81 ff       	sbrs	r24, 1
   18734:	0e c0       	rjmp	.+28     	; 0x18752 <lif_check_volume+0x46>
   18736:	86 e6       	ldi	r24, 0x66	; 102
   18738:	9c e3       	ldi	r25, 0x3C	; 60
   1873a:	a0 e0       	ldi	r26, 0x00	; 0
   1873c:	ed b7       	in	r30, 0x3d	; 61
   1873e:	fe b7       	in	r31, 0x3e	; 62
   18740:	81 83       	std	Z+1, r24	; 0x01
   18742:	92 83       	std	Z+2, r25	; 0x02
   18744:	a3 83       	std	Z+3, r26	; 0x03
   18746:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1874a:	03 c0       	rjmp	.+6      	; 0x18752 <lif_check_volume+0x46>
   1874c:	81 e0       	ldi	r24, 0x01	; 1
   1874e:	90 e0       	ldi	r25, 0x00	; 0
   18750:	02 c0       	rjmp	.+4      	; 0x18756 <lif_check_volume+0x4a>
   18752:	80 e0       	ldi	r24, 0x00	; 0
   18754:	90 e0       	ldi	r25, 0x00	; 0
   18756:	29 a9       	ldd	r18, Y+49	; 0x31
   18758:	3a a9       	ldd	r19, Y+50	; 0x32
   1875a:	21 15       	cp	r18, r1
   1875c:	f0 e1       	ldi	r31, 0x10	; 16
   1875e:	3f 07       	cpc	r19, r31
   18760:	91 f0       	breq	.+36     	; 0x18786 <lif_check_volume+0x7a>
   18762:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18766:	81 ff       	sbrs	r24, 1
   18768:	0c c0       	rjmp	.+24     	; 0x18782 <lif_check_volume+0x76>
   1876a:	ed b7       	in	r30, 0x3d	; 61
   1876c:	fe b7       	in	r31, 0x3e	; 62
   1876e:	35 83       	std	Z+5, r19	; 0x05
   18770:	24 83       	std	Z+4, r18	; 0x04
   18772:	8d e2       	ldi	r24, 0x2D	; 45
   18774:	9c e3       	ldi	r25, 0x3C	; 60
   18776:	a0 e0       	ldi	r26, 0x00	; 0
   18778:	81 83       	std	Z+1, r24	; 0x01
   1877a:	92 83       	std	Z+2, r25	; 0x02
   1877c:	a3 83       	std	Z+3, r26	; 0x03
   1877e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   18782:	80 e0       	ldi	r24, 0x00	; 0
   18784:	90 e0       	ldi	r25, 0x00	; 0
   18786:	29 ad       	ldd	r18, Y+57	; 0x39
   18788:	3a ad       	ldd	r19, Y+58	; 0x3a
   1878a:	22 30       	cpi	r18, 0x02	; 2
   1878c:	31 05       	cpc	r19, r1
   1878e:	90 f0       	brcs	.+36     	; 0x187b4 <lif_check_volume+0xa8>
   18790:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18794:	81 ff       	sbrs	r24, 1
   18796:	0c c0       	rjmp	.+24     	; 0x187b0 <lif_check_volume+0xa4>
   18798:	ed b7       	in	r30, 0x3d	; 61
   1879a:	fe b7       	in	r31, 0x3e	; 62
   1879c:	35 83       	std	Z+5, r19	; 0x05
   1879e:	24 83       	std	Z+4, r18	; 0x04
   187a0:	85 e1       	ldi	r24, 0x15	; 21
   187a2:	9c e3       	ldi	r25, 0x3C	; 60
   187a4:	a0 e0       	ldi	r26, 0x00	; 0
   187a6:	81 83       	std	Z+1, r24	; 0x01
   187a8:	92 83       	std	Z+2, r25	; 0x02
   187aa:	a3 83       	std	Z+3, r26	; 0x03
   187ac:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   187b0:	80 e0       	ldi	r24, 0x00	; 0
   187b2:	90 e0       	ldi	r25, 0x00	; 0
   187b4:	2b a9       	ldd	r18, Y+51	; 0x33
   187b6:	3c a9       	ldd	r19, Y+52	; 0x34
   187b8:	23 2b       	or	r18, r19
   187ba:	81 f0       	breq	.+32     	; 0x187dc <lif_check_volume+0xd0>
   187bc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   187c0:	81 ff       	sbrs	r24, 1
   187c2:	0a c0       	rjmp	.+20     	; 0x187d8 <lif_check_volume+0xcc>
   187c4:	8c ed       	ldi	r24, 0xDC	; 220
   187c6:	9b e3       	ldi	r25, 0x3B	; 59
   187c8:	a0 e0       	ldi	r26, 0x00	; 0
   187ca:	ed b7       	in	r30, 0x3d	; 61
   187cc:	fe b7       	in	r31, 0x3e	; 62
   187ce:	81 83       	std	Z+1, r24	; 0x01
   187d0:	92 83       	std	Z+2, r25	; 0x02
   187d2:	a3 83       	std	Z+3, r26	; 0x03
   187d4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   187d8:	80 e0       	ldi	r24, 0x00	; 0
   187da:	90 e0       	ldi	r25, 0x00	; 0
   187dc:	2b ad       	ldd	r18, Y+59	; 0x3b
   187de:	3c ad       	ldd	r19, Y+60	; 0x3c
   187e0:	23 2b       	or	r18, r19
   187e2:	81 f0       	breq	.+32     	; 0x18804 <lif_check_volume+0xf8>
   187e4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   187e8:	81 ff       	sbrs	r24, 1
   187ea:	0a c0       	rjmp	.+20     	; 0x18800 <lif_check_volume+0xf4>
   187ec:	83 ea       	ldi	r24, 0xA3	; 163
   187ee:	9b e3       	ldi	r25, 0x3B	; 59
   187f0:	a0 e0       	ldi	r26, 0x00	; 0
   187f2:	ed b7       	in	r30, 0x3d	; 61
   187f4:	fe b7       	in	r31, 0x3e	; 62
   187f6:	81 83       	std	Z+1, r24	; 0x01
   187f8:	92 83       	std	Z+2, r25	; 0x02
   187fa:	a3 83       	std	Z+3, r26	; 0x03
   187fc:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   18800:	80 e0       	ldi	r24, 0x00	; 0
   18802:	90 e0       	ldi	r25, 0x00	; 0
   18804:	4d a5       	ldd	r20, Y+45	; 0x2d
   18806:	5e a5       	ldd	r21, Y+46	; 0x2e
   18808:	6f a5       	ldd	r22, Y+47	; 0x2f
   1880a:	78 a9       	ldd	r23, Y+48	; 0x30
   1880c:	45 2b       	or	r20, r21
   1880e:	46 2b       	or	r20, r22
   18810:	47 2b       	or	r20, r23
   18812:	a1 f4       	brne	.+40     	; 0x1883c <lif_check_volume+0x130>
   18814:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18818:	81 ff       	sbrs	r24, 1
   1881a:	0e c0       	rjmp	.+28     	; 0x18838 <lif_check_volume+0x12c>
   1881c:	ed b7       	in	r30, 0x3d	; 61
   1881e:	fe b7       	in	r31, 0x3e	; 62
   18820:	14 82       	std	Z+4, r1	; 0x04
   18822:	15 82       	std	Z+5, r1	; 0x05
   18824:	16 82       	std	Z+6, r1	; 0x06
   18826:	17 82       	std	Z+7, r1	; 0x07
   18828:	8e e7       	ldi	r24, 0x7E	; 126
   1882a:	9b e3       	ldi	r25, 0x3B	; 59
   1882c:	a0 e0       	ldi	r26, 0x00	; 0
   1882e:	81 83       	std	Z+1, r24	; 0x01
   18830:	92 83       	std	Z+2, r25	; 0x02
   18832:	a3 83       	std	Z+3, r26	; 0x03
   18834:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   18838:	80 e0       	ldi	r24, 0x00	; 0
   1883a:	90 e0       	ldi	r25, 0x00	; 0
   1883c:	4d a9       	ldd	r20, Y+53	; 0x35
   1883e:	5e a9       	ldd	r21, Y+54	; 0x36
   18840:	6f a9       	ldd	r22, Y+55	; 0x37
   18842:	78 ad       	ldd	r23, Y+56	; 0x38
   18844:	45 2b       	or	r20, r21
   18846:	46 2b       	or	r20, r22
   18848:	47 2b       	or	r20, r23
   1884a:	81 f4       	brne	.+32     	; 0x1886c <lif_check_volume+0x160>
   1884c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18850:	81 ff       	sbrs	r24, 1
   18852:	0a c0       	rjmp	.+20     	; 0x18868 <lif_check_volume+0x15c>
   18854:	8f e4       	ldi	r24, 0x4F	; 79
   18856:	9b e3       	ldi	r25, 0x3B	; 59
   18858:	a0 e0       	ldi	r26, 0x00	; 0
   1885a:	ed b7       	in	r30, 0x3d	; 61
   1885c:	fe b7       	in	r31, 0x3e	; 62
   1885e:	81 83       	std	Z+1, r24	; 0x01
   18860:	92 83       	std	Z+2, r25	; 0x02
   18862:	a3 83       	std	Z+3, r26	; 0x03
   18864:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   18868:	80 e0       	ldi	r24, 0x00	; 0
   1886a:	90 e0       	ldi	r25, 0x00	; 0
   1886c:	0d a5       	ldd	r16, Y+45	; 0x2d
   1886e:	1e a5       	ldd	r17, Y+46	; 0x2e
   18870:	2f a5       	ldd	r18, Y+47	; 0x2f
   18872:	38 a9       	ldd	r19, Y+48	; 0x30
   18874:	4d a9       	ldd	r20, Y+53	; 0x35
   18876:	5e a9       	ldd	r21, Y+54	; 0x36
   18878:	6f a9       	ldd	r22, Y+55	; 0x37
   1887a:	78 ad       	ldd	r23, Y+56	; 0x38
   1887c:	40 0f       	add	r20, r16
   1887e:	51 1f       	adc	r21, r17
   18880:	62 1f       	adc	r22, r18
   18882:	73 1f       	adc	r23, r19
   18884:	0c 81       	ldd	r16, Y+4	; 0x04
   18886:	1d 81       	ldd	r17, Y+5	; 0x05
   18888:	2e 81       	ldd	r18, Y+6	; 0x06
   1888a:	3f 81       	ldd	r19, Y+7	; 0x07
   1888c:	04 17       	cp	r16, r20
   1888e:	15 07       	cpc	r17, r21
   18890:	26 07       	cpc	r18, r22
   18892:	37 07       	cpc	r19, r23
   18894:	80 f4       	brcc	.+32     	; 0x188b6 <lif_check_volume+0x1aa>
   18896:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1889a:	81 ff       	sbrs	r24, 1
   1889c:	0a c0       	rjmp	.+20     	; 0x188b2 <lif_check_volume+0x1a6>
   1889e:	83 e2       	ldi	r24, 0x23	; 35
   188a0:	9b e3       	ldi	r25, 0x3B	; 59
   188a2:	a0 e0       	ldi	r26, 0x00	; 0
   188a4:	ed b7       	in	r30, 0x3d	; 61
   188a6:	fe b7       	in	r31, 0x3e	; 62
   188a8:	81 83       	std	Z+1, r24	; 0x01
   188aa:	92 83       	std	Z+2, r25	; 0x02
   188ac:	a3 83       	std	Z+3, r26	; 0x03
   188ae:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   188b2:	80 e0       	ldi	r24, 0x00	; 0
   188b4:	90 e0       	ldi	r25, 0x00	; 0
   188b6:	cd b7       	in	r28, 0x3d	; 61
   188b8:	de b7       	in	r29, 0x3e	; 62
   188ba:	27 96       	adiw	r28, 0x07	; 7
   188bc:	e4 e0       	ldi	r30, 0x04	; 4
   188be:	0c 94 02 e1 	jmp	0x1c204	; 0x1c204 <__epilogue_restores__+0x1c>

000188c2 <lif_check_dir>:
   188c2:	a5 e1       	ldi	r26, 0x15	; 21
   188c4:	b0 e0       	ldi	r27, 0x00	; 0
   188c6:	e7 e6       	ldi	r30, 0x67	; 103
   188c8:	f4 ec       	ldi	r31, 0xC4	; 196
   188ca:	0c 94 d8 e0 	jmp	0x1c1b0	; 0x1c1b0 <__prologue_saves__>
   188ce:	6c 01       	movw	r12, r24
   188d0:	2a e5       	ldi	r18, 0x5A	; 90
   188d2:	c2 0e       	add	r12, r18
   188d4:	d1 1c       	adc	r13, r1
   188d6:	f6 01       	movw	r30, r12
   188d8:	20 81       	ld	r18, Z
   188da:	31 81       	ldd	r19, Z+1	; 0x01
   188dc:	21 50       	subi	r18, 0x01	; 1
   188de:	31 09       	sbc	r19, r1
   188e0:	2e 3f       	cpi	r18, 0xFE	; 254
   188e2:	3f 4f       	sbci	r19, 0xFF	; 255
   188e4:	08 f0       	brcs	.+2      	; 0x188e8 <lif_check_dir+0x26>
   188e6:	8e c1       	rjmp	.+796    	; 0x18c04 <lif_check_dir+0x342>
   188e8:	9d 8b       	std	Y+21, r25	; 0x15
   188ea:	8c 8b       	std	Y+20, r24	; 0x14
   188ec:	7c 01       	movw	r14, r24
   188ee:	2f e4       	ldi	r18, 0x4F	; 79
   188f0:	e2 0e       	add	r14, r18
   188f2:	f1 1c       	adc	r15, r1
   188f4:	c7 01       	movw	r24, r14
   188f6:	f9 d9       	rcall	.-3086   	; 0x17cea <lif_checkname>
   188f8:	89 2b       	or	r24, r25
   188fa:	89 f4       	brne	.+34     	; 0x1891e <lif_check_dir+0x5c>
   188fc:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18900:	81 ff       	sbrs	r24, 1
   18902:	0f c0       	rjmp	.+30     	; 0x18922 <lif_check_dir+0x60>
   18904:	ed b7       	in	r30, 0x3d	; 61
   18906:	fe b7       	in	r31, 0x3e	; 62
   18908:	f5 82       	std	Z+5, r15	; 0x05
   1890a:	e4 82       	std	Z+4, r14	; 0x04
   1890c:	82 e0       	ldi	r24, 0x02	; 2
   1890e:	9b e3       	ldi	r25, 0x3B	; 59
   18910:	a0 e0       	ldi	r26, 0x00	; 0
   18912:	81 83       	std	Z+1, r24	; 0x01
   18914:	92 83       	std	Z+2, r25	; 0x02
   18916:	a3 83       	std	Z+3, r26	; 0x03
   18918:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1891c:	02 c0       	rjmp	.+4      	; 0x18922 <lif_check_dir+0x60>
   1891e:	01 e0       	ldi	r16, 0x01	; 1
   18920:	01 c0       	rjmp	.+2      	; 0x18924 <lif_check_dir+0x62>
   18922:	00 e0       	ldi	r16, 0x00	; 0
   18924:	10 e0       	ldi	r17, 0x00	; 0
   18926:	ec 89       	ldd	r30, Y+20	; 0x14
   18928:	fd 89       	ldd	r31, Y+21	; 0x15
   1892a:	84 85       	ldd	r24, Z+12	; 0x0c
   1892c:	95 85       	ldd	r25, Z+13	; 0x0d
   1892e:	a6 85       	ldd	r26, Z+14	; 0x0e
   18930:	b7 85       	ldd	r27, Z+15	; 0x0f
   18932:	00 97       	sbiw	r24, 0x00	; 0
   18934:	a1 05       	cpc	r26, r1
   18936:	b1 05       	cpc	r27, r1
   18938:	29 f1       	breq	.+74     	; 0x18984 <lif_check_dir+0xc2>
   1893a:	e4 5a       	subi	r30, 0xA4	; 164
   1893c:	ff 4f       	sbci	r31, 0xFF	; 255
   1893e:	40 81       	ld	r20, Z
   18940:	51 81       	ldd	r21, Z+1	; 0x01
   18942:	62 81       	ldd	r22, Z+2	; 0x02
   18944:	73 81       	ldd	r23, Z+3	; 0x03
   18946:	48 17       	cp	r20, r24
   18948:	59 07       	cpc	r21, r25
   1894a:	6a 07       	cpc	r22, r26
   1894c:	7b 07       	cpc	r23, r27
   1894e:	d0 f4       	brcc	.+52     	; 0x18984 <lif_check_dir+0xc2>
   18950:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18954:	21 ff       	sbrs	r18, 1
   18956:	14 c0       	rjmp	.+40     	; 0x18980 <lif_check_dir+0xbe>
   18958:	ed b7       	in	r30, 0x3d	; 61
   1895a:	fe b7       	in	r31, 0x3e	; 62
   1895c:	82 87       	std	Z+10, r24	; 0x0a
   1895e:	93 87       	std	Z+11, r25	; 0x0b
   18960:	a4 87       	std	Z+12, r26	; 0x0c
   18962:	b5 87       	std	Z+13, r27	; 0x0d
   18964:	46 83       	std	Z+6, r20	; 0x06
   18966:	57 83       	std	Z+7, r21	; 0x07
   18968:	60 87       	std	Z+8, r22	; 0x08
   1896a:	71 87       	std	Z+9, r23	; 0x09
   1896c:	f5 82       	std	Z+5, r15	; 0x05
   1896e:	e4 82       	std	Z+4, r14	; 0x04
   18970:	8e eb       	ldi	r24, 0xBE	; 190
   18972:	9a e3       	ldi	r25, 0x3A	; 58
   18974:	a0 e0       	ldi	r26, 0x00	; 0
   18976:	81 83       	std	Z+1, r24	; 0x01
   18978:	92 83       	std	Z+2, r25	; 0x02
   1897a:	a3 83       	std	Z+3, r26	; 0x03
   1897c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   18980:	00 e0       	ldi	r16, 0x00	; 0
   18982:	10 e0       	ldi	r17, 0x00	; 0
   18984:	ec 89       	ldd	r30, Y+20	; 0x14
   18986:	fd 89       	ldd	r31, Y+21	; 0x15
   18988:	44 81       	ldd	r20, Z+4	; 0x04
   1898a:	55 81       	ldd	r21, Z+5	; 0x05
   1898c:	66 81       	ldd	r22, Z+6	; 0x06
   1898e:	77 81       	ldd	r23, Z+7	; 0x07
   18990:	41 15       	cp	r20, r1
   18992:	51 05       	cpc	r21, r1
   18994:	61 05       	cpc	r22, r1
   18996:	71 05       	cpc	r23, r1
   18998:	89 f1       	breq	.+98     	; 0x189fc <lif_check_dir+0x13a>
   1899a:	e4 5a       	subi	r30, 0xA4	; 164
   1899c:	ff 4f       	sbci	r31, 0xFF	; 255
   1899e:	80 80       	ld	r8, Z
   189a0:	91 80       	ldd	r9, Z+1	; 0x01
   189a2:	a2 80       	ldd	r10, Z+2	; 0x02
   189a4:	b3 80       	ldd	r11, Z+3	; 0x03
   189a6:	ec 89       	ldd	r30, Y+20	; 0x14
   189a8:	fd 89       	ldd	r31, Y+21	; 0x15
   189aa:	e0 5a       	subi	r30, 0xA0	; 160
   189ac:	ff 4f       	sbci	r31, 0xFF	; 255
   189ae:	80 81       	ld	r24, Z
   189b0:	91 81       	ldd	r25, Z+1	; 0x01
   189b2:	a2 81       	ldd	r26, Z+2	; 0x02
   189b4:	b3 81       	ldd	r27, Z+3	; 0x03
   189b6:	88 0d       	add	r24, r8
   189b8:	99 1d       	adc	r25, r9
   189ba:	aa 1d       	adc	r26, r10
   189bc:	bb 1d       	adc	r27, r11
   189be:	48 17       	cp	r20, r24
   189c0:	59 07       	cpc	r21, r25
   189c2:	6a 07       	cpc	r22, r26
   189c4:	7b 07       	cpc	r23, r27
   189c6:	d0 f4       	brcc	.+52     	; 0x189fc <lif_check_dir+0x13a>
   189c8:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   189cc:	21 ff       	sbrs	r18, 1
   189ce:	14 c0       	rjmp	.+40     	; 0x189f8 <lif_check_dir+0x136>
   189d0:	ed b7       	in	r30, 0x3d	; 61
   189d2:	fe b7       	in	r31, 0x3e	; 62
   189d4:	42 87       	std	Z+10, r20	; 0x0a
   189d6:	53 87       	std	Z+11, r21	; 0x0b
   189d8:	64 87       	std	Z+12, r22	; 0x0c
   189da:	75 87       	std	Z+13, r23	; 0x0d
   189dc:	86 83       	std	Z+6, r24	; 0x06
   189de:	97 83       	std	Z+7, r25	; 0x07
   189e0:	a0 87       	std	Z+8, r26	; 0x08
   189e2:	b1 87       	std	Z+9, r27	; 0x09
   189e4:	f5 82       	std	Z+5, r15	; 0x05
   189e6:	e4 82       	std	Z+4, r14	; 0x04
   189e8:	8d e7       	ldi	r24, 0x7D	; 125
   189ea:	9a e3       	ldi	r25, 0x3A	; 58
   189ec:	a0 e0       	ldi	r26, 0x00	; 0
   189ee:	81 83       	std	Z+1, r24	; 0x01
   189f0:	92 83       	std	Z+2, r25	; 0x02
   189f2:	a3 83       	std	Z+3, r26	; 0x03
   189f4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   189f8:	00 e0       	ldi	r16, 0x00	; 0
   189fa:	10 e0       	ldi	r17, 0x00	; 0
   189fc:	ec 89       	ldd	r30, Y+20	; 0x14
   189fe:	fd 89       	ldd	r31, Y+21	; 0x15
   18a00:	e6 59       	subi	r30, 0x96	; 150
   18a02:	ff 4f       	sbci	r31, 0xFF	; 255
   18a04:	80 81       	ld	r24, Z
   18a06:	91 81       	ldd	r25, Z+1	; 0x01
   18a08:	81 30       	cpi	r24, 0x01	; 1
   18a0a:	f0 e8       	ldi	r31, 0x80	; 128
   18a0c:	9f 07       	cpc	r25, r31
   18a0e:	a1 f0       	breq	.+40     	; 0x18a38 <lif_check_dir+0x176>
   18a10:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18a14:	21 ff       	sbrs	r18, 1
   18a16:	0e c0       	rjmp	.+28     	; 0x18a34 <lif_check_dir+0x172>
   18a18:	ed b7       	in	r30, 0x3d	; 61
   18a1a:	fe b7       	in	r31, 0x3e	; 62
   18a1c:	97 83       	std	Z+7, r25	; 0x07
   18a1e:	86 83       	std	Z+6, r24	; 0x06
   18a20:	f5 82       	std	Z+5, r15	; 0x05
   18a22:	e4 82       	std	Z+4, r14	; 0x04
   18a24:	8f e4       	ldi	r24, 0x4F	; 79
   18a26:	9a e3       	ldi	r25, 0x3A	; 58
   18a28:	a0 e0       	ldi	r26, 0x00	; 0
   18a2a:	81 83       	std	Z+1, r24	; 0x01
   18a2c:	92 83       	std	Z+2, r25	; 0x02
   18a2e:	a3 83       	std	Z+3, r26	; 0x03
   18a30:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   18a34:	00 e0       	ldi	r16, 0x00	; 0
   18a36:	10 e0       	ldi	r17, 0x00	; 0
   18a38:	f6 01       	movw	r30, r12
   18a3a:	80 81       	ld	r24, Z
   18a3c:	91 81       	ldd	r25, Z+1	; 0x01
   18a3e:	8c 7f       	andi	r24, 0xFC	; 252
   18a40:	80 31       	cpi	r24, 0x10	; 16
   18a42:	90 4e       	sbci	r25, 0xE0	; 224
   18a44:	09 f0       	breq	.+2      	; 0x18a48 <lif_check_dir+0x186>
   18a46:	af c0       	rjmp	.+350    	; 0x18ba6 <lif_check_dir+0x2e4>
   18a48:	cc 88       	ldd	r12, Y+20	; 0x14
   18a4a:	dd 88       	ldd	r13, Y+21	; 0x15
   18a4c:	2c e6       	ldi	r18, 0x6C	; 108
   18a4e:	c2 0e       	add	r12, r18
   18a50:	d1 1c       	adc	r13, r1
   18a52:	f6 01       	movw	r30, r12
   18a54:	80 81       	ld	r24, Z
   18a56:	91 81       	ldd	r25, Z+1	; 0x01
   18a58:	00 97       	sbiw	r24, 0x00	; 0
   18a5a:	09 f4       	brne	.+2      	; 0x18a5e <lif_check_dir+0x19c>
   18a5c:	a4 c0       	rjmp	.+328    	; 0x18ba6 <lif_check_dir+0x2e4>
   18a5e:	4c 01       	movw	r8, r24
   18a60:	a1 2c       	mov	r10, r1
   18a62:	b1 2c       	mov	r11, r1
   18a64:	77 27       	eor	r23, r23
   18a66:	6b 2d       	mov	r22, r11
   18a68:	5a 2d       	mov	r21, r10
   18a6a:	49 2d       	mov	r20, r9
   18a6c:	9c 01       	movw	r18, r24
   18a6e:	33 27       	eor	r19, r19
   18a70:	3b 8b       	std	Y+19, r19	; 0x13
   18a72:	2a 8b       	std	Y+18, r18	; 0x12
   18a74:	db 01       	movw	r26, r22
   18a76:	ca 01       	movw	r24, r20
   18a78:	23 2b       	or	r18, r19
   18a7a:	19 f0       	breq	.+6      	; 0x18a82 <lif_check_dir+0x1c0>
   18a7c:	01 96       	adiw	r24, 0x01	; 1
   18a7e:	a1 1d       	adc	r26, r1
   18a80:	b1 1d       	adc	r27, r1
   18a82:	2c 88       	ldd	r2, Y+20	; 0x14
   18a84:	3d 88       	ldd	r3, Y+21	; 0x15
   18a86:	30 e6       	ldi	r19, 0x60	; 96
   18a88:	23 0e       	add	r2, r19
   18a8a:	31 1c       	adc	r3, r1
   18a8c:	f1 01       	movw	r30, r2
   18a8e:	40 80       	ld	r4, Z
   18a90:	51 80       	ldd	r5, Z+1	; 0x01
   18a92:	62 80       	ldd	r6, Z+2	; 0x02
   18a94:	73 80       	ldd	r7, Z+3	; 0x03
   18a96:	48 16       	cp	r4, r24
   18a98:	59 06       	cpc	r5, r25
   18a9a:	6a 06       	cpc	r6, r26
   18a9c:	7b 06       	cpc	r7, r27
   18a9e:	30 f5       	brcc	.+76     	; 0x18aec <lif_check_dir+0x22a>
   18aa0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18aa4:	21 ff       	sbrs	r18, 1
   18aa6:	20 c0       	rjmp	.+64     	; 0x18ae8 <lif_check_dir+0x226>
   18aa8:	2a 89       	ldd	r18, Y+18	; 0x12
   18aaa:	3b 89       	ldd	r19, Y+19	; 0x13
   18aac:	23 2b       	or	r18, r19
   18aae:	21 f0       	breq	.+8      	; 0x18ab8 <lif_check_dir+0x1f6>
   18ab0:	4f 5f       	subi	r20, 0xFF	; 255
   18ab2:	5f 4f       	sbci	r21, 0xFF	; 255
   18ab4:	6f 4f       	sbci	r22, 0xFF	; 255
   18ab6:	7f 4f       	sbci	r23, 0xFF	; 255
   18ab8:	ed b7       	in	r30, 0x3d	; 61
   18aba:	fe b7       	in	r31, 0x3e	; 62
   18abc:	46 86       	std	Z+14, r4	; 0x0e
   18abe:	57 86       	std	Z+15, r5	; 0x0f
   18ac0:	60 8a       	std	Z+16, r6	; 0x10
   18ac2:	71 8a       	std	Z+17, r7	; 0x11
   18ac4:	42 87       	std	Z+10, r20	; 0x0a
   18ac6:	53 87       	std	Z+11, r21	; 0x0b
   18ac8:	64 87       	std	Z+12, r22	; 0x0c
   18aca:	75 87       	std	Z+13, r23	; 0x0d
   18acc:	86 82       	std	Z+6, r8	; 0x06
   18ace:	97 82       	std	Z+7, r9	; 0x07
   18ad0:	a0 86       	std	Z+8, r10	; 0x08
   18ad2:	b1 86       	std	Z+9, r11	; 0x09
   18ad4:	f5 82       	std	Z+5, r15	; 0x05
   18ad6:	e4 82       	std	Z+4, r14	; 0x04
   18ad8:	84 e0       	ldi	r24, 0x04	; 4
   18ada:	9a e3       	ldi	r25, 0x3A	; 58
   18adc:	a0 e0       	ldi	r26, 0x00	; 0
   18ade:	81 83       	std	Z+1, r24	; 0x01
   18ae0:	92 83       	std	Z+2, r25	; 0x02
   18ae2:	a3 83       	std	Z+3, r26	; 0x03
   18ae4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   18ae8:	00 e0       	ldi	r16, 0x00	; 0
   18aea:	10 e0       	ldi	r17, 0x00	; 0
   18aec:	f6 01       	movw	r30, r12
   18aee:	20 81       	ld	r18, Z
   18af0:	31 81       	ldd	r19, Z+1	; 0x01
   18af2:	a9 01       	movw	r20, r18
   18af4:	60 e0       	ldi	r22, 0x00	; 0
   18af6:	70 e0       	ldi	r23, 0x00	; 0
   18af8:	bb 27       	eor	r27, r27
   18afa:	a7 2f       	mov	r26, r23
   18afc:	96 2f       	mov	r25, r22
   18afe:	85 2f       	mov	r24, r21
   18b00:	f9 01       	movw	r30, r18
   18b02:	ff 27       	eor	r31, r31
   18b04:	fb 8b       	std	Y+19, r31	; 0x13
   18b06:	ea 8b       	std	Y+18, r30	; 0x12
   18b08:	2c 01       	movw	r4, r24
   18b0a:	3d 01       	movw	r6, r26
   18b0c:	ef 2b       	or	r30, r31
   18b0e:	29 f0       	breq	.+10     	; 0x18b1a <lif_check_dir+0x258>
   18b10:	ff ef       	ldi	r31, 0xFF	; 255
   18b12:	4f 1a       	sub	r4, r31
   18b14:	5f 0a       	sbc	r5, r31
   18b16:	6f 0a       	sbc	r6, r31
   18b18:	7f 0a       	sbc	r7, r31
   18b1a:	f1 01       	movw	r30, r2
   18b1c:	80 80       	ld	r8, Z
   18b1e:	91 80       	ldd	r9, Z+1	; 0x01
   18b20:	a2 80       	ldd	r10, Z+2	; 0x02
   18b22:	b3 80       	ldd	r11, Z+3	; 0x03
   18b24:	48 14       	cp	r4, r8
   18b26:	59 04       	cpc	r5, r9
   18b28:	6a 04       	cpc	r6, r10
   18b2a:	7b 04       	cpc	r7, r11
   18b2c:	28 f5       	brcc	.+74     	; 0x18b78 <lif_check_dir+0x2b6>
   18b2e:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18b32:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18b36:	32 ff       	sbrs	r19, 2
   18b38:	1f c0       	rjmp	.+62     	; 0x18b78 <lif_check_dir+0x2b6>
   18b3a:	2a 89       	ldd	r18, Y+18	; 0x12
   18b3c:	3b 89       	ldd	r19, Y+19	; 0x13
   18b3e:	23 2b       	or	r18, r19
   18b40:	19 f0       	breq	.+6      	; 0x18b48 <lif_check_dir+0x286>
   18b42:	01 96       	adiw	r24, 0x01	; 1
   18b44:	a1 1d       	adc	r26, r1
   18b46:	b1 1d       	adc	r27, r1
   18b48:	ed b7       	in	r30, 0x3d	; 61
   18b4a:	fe b7       	in	r31, 0x3e	; 62
   18b4c:	86 86       	std	Z+14, r8	; 0x0e
   18b4e:	97 86       	std	Z+15, r9	; 0x0f
   18b50:	a0 8a       	std	Z+16, r10	; 0x10
   18b52:	b1 8a       	std	Z+17, r11	; 0x11
   18b54:	82 87       	std	Z+10, r24	; 0x0a
   18b56:	93 87       	std	Z+11, r25	; 0x0b
   18b58:	a4 87       	std	Z+12, r26	; 0x0c
   18b5a:	b5 87       	std	Z+13, r27	; 0x0d
   18b5c:	46 83       	std	Z+6, r20	; 0x06
   18b5e:	57 83       	std	Z+7, r21	; 0x07
   18b60:	60 87       	std	Z+8, r22	; 0x08
   18b62:	71 87       	std	Z+9, r23	; 0x09
   18b64:	f5 82       	std	Z+5, r15	; 0x05
   18b66:	e4 82       	std	Z+4, r14	; 0x04
   18b68:	89 eb       	ldi	r24, 0xB9	; 185
   18b6a:	99 e3       	ldi	r25, 0x39	; 57
   18b6c:	a0 e0       	ldi	r26, 0x00	; 0
   18b6e:	81 83       	std	Z+1, r24	; 0x01
   18b70:	92 83       	std	Z+2, r25	; 0x02
   18b72:	a3 83       	std	Z+3, r26	; 0x03
   18b74:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   18b78:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18b7c:	81 ff       	sbrs	r24, 1
   18b7e:	13 c0       	rjmp	.+38     	; 0x18ba6 <lif_check_dir+0x2e4>
   18b80:	f6 01       	movw	r30, r12
   18b82:	80 81       	ld	r24, Z
   18b84:	91 81       	ldd	r25, Z+1	; 0x01
   18b86:	89 2b       	or	r24, r25
   18b88:	71 f4       	brne	.+28     	; 0x18ba6 <lif_check_dir+0x2e4>
   18b8a:	ed b7       	in	r30, 0x3d	; 61
   18b8c:	fe b7       	in	r31, 0x3e	; 62
   18b8e:	f5 82       	std	Z+5, r15	; 0x05
   18b90:	e4 82       	std	Z+4, r14	; 0x04
   18b92:	8e e8       	ldi	r24, 0x8E	; 142
   18b94:	99 e3       	ldi	r25, 0x39	; 57
   18b96:	a0 e0       	ldi	r26, 0x00	; 0
   18b98:	81 83       	std	Z+1, r24	; 0x01
   18b9a:	92 83       	std	Z+2, r25	; 0x02
   18b9c:	a3 83       	std	Z+3, r26	; 0x03
   18b9e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   18ba2:	00 e0       	ldi	r16, 0x00	; 0
   18ba4:	10 e0       	ldi	r17, 0x00	; 0
   18ba6:	ec 89       	ldd	r30, Y+20	; 0x14
   18ba8:	fd 89       	ldd	r31, Y+21	; 0x15
   18baa:	e2 59       	subi	r30, 0x92	; 146
   18bac:	ff 4f       	sbci	r31, 0xFF	; 255
   18bae:	20 81       	ld	r18, Z
   18bb0:	31 81       	ldd	r19, Z+1	; 0x01
   18bb2:	21 15       	cp	r18, r1
   18bb4:	f1 e0       	ldi	r31, 0x01	; 1
   18bb6:	3f 07       	cpc	r19, r31
   18bb8:	41 f1       	breq	.+80     	; 0x18c0a <lif_check_dir+0x348>
   18bba:	40 91 b6 01 	lds	r20, 0x01B6	; 0x8001b6 <debuglevel>
   18bbe:	50 91 b7 01 	lds	r21, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18bc2:	ca 01       	movw	r24, r20
   18bc4:	82 70       	andi	r24, 0x02	; 2
   18bc6:	99 27       	eor	r25, r25
   18bc8:	41 ff       	sbrs	r20, 1
   18bca:	20 c0       	rjmp	.+64     	; 0x18c0c <lif_check_dir+0x34a>
   18bcc:	c9 01       	movw	r24, r18
   18bce:	a0 e0       	ldi	r26, 0x00	; 0
   18bd0:	b0 e0       	ldi	r27, 0x00	; 0
   18bd2:	ed b7       	in	r30, 0x3d	; 61
   18bd4:	fe b7       	in	r31, 0x3e	; 62
   18bd6:	86 83       	std	Z+6, r24	; 0x06
   18bd8:	97 83       	std	Z+7, r25	; 0x07
   18bda:	a0 87       	std	Z+8, r26	; 0x08
   18bdc:	b1 87       	std	Z+9, r27	; 0x09
   18bde:	ec 89       	ldd	r30, Y+20	; 0x14
   18be0:	fd 89       	ldd	r31, Y+21	; 0x15
   18be2:	80 81       	ld	r24, Z
   18be4:	91 81       	ldd	r25, Z+1	; 0x01
   18be6:	ed b7       	in	r30, 0x3d	; 61
   18be8:	fe b7       	in	r31, 0x3e	; 62
   18bea:	95 83       	std	Z+5, r25	; 0x05
   18bec:	84 83       	std	Z+4, r24	; 0x04
   18bee:	82 e6       	ldi	r24, 0x62	; 98
   18bf0:	99 e3       	ldi	r25, 0x39	; 57
   18bf2:	a0 e0       	ldi	r26, 0x00	; 0
   18bf4:	81 83       	std	Z+1, r24	; 0x01
   18bf6:	92 83       	std	Z+2, r25	; 0x02
   18bf8:	a3 83       	std	Z+3, r26	; 0x03
   18bfa:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   18bfe:	80 e0       	ldi	r24, 0x00	; 0
   18c00:	90 e0       	ldi	r25, 0x00	; 0
   18c02:	04 c0       	rjmp	.+8      	; 0x18c0c <lif_check_dir+0x34a>
   18c04:	81 e0       	ldi	r24, 0x01	; 1
   18c06:	90 e0       	ldi	r25, 0x00	; 0
   18c08:	01 c0       	rjmp	.+2      	; 0x18c0c <lif_check_dir+0x34a>
   18c0a:	c8 01       	movw	r24, r16
   18c0c:	65 96       	adiw	r28, 0x15	; 21
   18c0e:	e2 e1       	ldi	r30, 0x12	; 18
   18c10:	0c 94 f4 e0 	jmp	0x1c1e8	; 0x1c1e8 <__epilogue_restores__>

00018c14 <lif_close_volume>:
   18c14:	cf 93       	push	r28
   18c16:	df 93       	push	r29
   18c18:	00 97       	sbiw	r24, 0x00	; 0
   18c1a:	f9 f0       	breq	.+62     	; 0x18c5a <lif_close_volume+0x46>
   18c1c:	ec 01       	movw	r28, r24
   18c1e:	8a 81       	ldd	r24, Y+2	; 0x02
   18c20:	9b 81       	ldd	r25, Y+3	; 0x03
   18c22:	00 97       	sbiw	r24, 0x00	; 0
   18c24:	79 f0       	breq	.+30     	; 0x18c44 <lif_close_volume+0x30>
   18c26:	22 e0       	ldi	r18, 0x02	; 2
   18c28:	30 e0       	ldi	r19, 0x00	; 0
   18c2a:	40 e0       	ldi	r20, 0x00	; 0
   18c2c:	50 e0       	ldi	r21, 0x00	; 0
   18c2e:	ba 01       	movw	r22, r20
   18c30:	0e 94 49 79 	call	0xf292	; 0xf292 <fseek>
   18c34:	8a 81       	ldd	r24, Y+2	; 0x02
   18c36:	9b 81       	ldd	r25, Y+3	; 0x03
   18c38:	0e 94 31 7b 	call	0xf662	; 0xf662 <fclose>
   18c3c:	1b 82       	std	Y+3, r1	; 0x03
   18c3e:	1a 82       	std	Y+2, r1	; 0x02
   18c40:	0e 94 2c 7a 	call	0xf458	; 0xf458 <sync>
   18c44:	88 81       	ld	r24, Y
   18c46:	99 81       	ldd	r25, Y+1	; 0x01
   18c48:	00 97       	sbiw	r24, 0x00	; 0
   18c4a:	11 f0       	breq	.+4      	; 0x18c50 <lif_close_volume+0x3c>
   18c4c:	0e 94 a6 bc 	call	0x1794c	; 0x1794c <lif_free>
   18c50:	ce 01       	movw	r24, r28
   18c52:	8f db       	rcall	.-2274   	; 0x18372 <lif_vol_clear>
   18c54:	ce 01       	movw	r24, r28
   18c56:	0e 94 a6 bc 	call	0x1794c	; 0x1794c <lif_free>
   18c5a:	df 91       	pop	r29
   18c5c:	cf 91       	pop	r28
   18c5e:	08 95       	ret

00018c60 <lif_checkdirindex>:
   18c60:	cf 92       	push	r12
   18c62:	df 92       	push	r13
   18c64:	ef 92       	push	r14
   18c66:	ff 92       	push	r15
   18c68:	cf 93       	push	r28
   18c6a:	df 93       	push	r29
   18c6c:	ad b7       	in	r26, 0x3d	; 61
   18c6e:	be b7       	in	r27, 0x3e	; 62
   18c70:	17 97       	sbiw	r26, 0x07	; 7
   18c72:	0f b6       	in	r0, 0x3f	; 63
   18c74:	f8 94       	cli
   18c76:	be bf       	out	0x3e, r27	; 62
   18c78:	0f be       	out	0x3f, r0	; 63
   18c7a:	ad bf       	out	0x3d, r26	; 61
   18c7c:	9b 01       	movw	r18, r22
   18c7e:	77 fd       	sbrc	r23, 7
   18c80:	25 c0       	rjmp	.+74     	; 0x18ccc <lif_checkdirindex+0x6c>
   18c82:	ab 01       	movw	r20, r22
   18c84:	77 0f       	add	r23, r23
   18c86:	66 0b       	sbc	r22, r22
   18c88:	77 0b       	sbc	r23, r23
   18c8a:	e5 e0       	ldi	r30, 0x05	; 5
   18c8c:	44 0f       	add	r20, r20
   18c8e:	55 1f       	adc	r21, r21
   18c90:	66 1f       	adc	r22, r22
   18c92:	77 1f       	adc	r23, r23
   18c94:	ea 95       	dec	r30
   18c96:	d1 f7       	brne	.-12     	; 0x18c8c <lif_checkdirindex+0x2c>
   18c98:	c5 2e       	mov	r12, r21
   18c9a:	d6 2e       	mov	r13, r22
   18c9c:	e7 2e       	mov	r14, r23
   18c9e:	ff 24       	eor	r15, r15
   18ca0:	55 27       	eor	r21, r21
   18ca2:	66 27       	eor	r22, r22
   18ca4:	77 27       	eor	r23, r23
   18ca6:	45 2b       	or	r20, r21
   18ca8:	46 2b       	or	r20, r22
   18caa:	47 2b       	or	r20, r23
   18cac:	29 f0       	breq	.+10     	; 0x18cb8 <lif_checkdirindex+0x58>
   18cae:	4f ef       	ldi	r20, 0xFF	; 255
   18cb0:	c4 1a       	sub	r12, r20
   18cb2:	d4 0a       	sbc	r13, r20
   18cb4:	e4 0a       	sbc	r14, r20
   18cb6:	f4 0a       	sbc	r15, r20
   18cb8:	fc 01       	movw	r30, r24
   18cba:	45 a9       	ldd	r20, Z+53	; 0x35
   18cbc:	56 a9       	ldd	r21, Z+54	; 0x36
   18cbe:	67 a9       	ldd	r22, Z+55	; 0x37
   18cc0:	70 ad       	ldd	r23, Z+56	; 0x38
   18cc2:	4c 15       	cp	r20, r12
   18cc4:	5d 05       	cpc	r21, r13
   18cc6:	6e 05       	cpc	r22, r14
   18cc8:	7f 05       	cpc	r23, r15
   18cca:	08 f5       	brcc	.+66     	; 0x18d0e <lif_checkdirindex+0xae>
   18ccc:	ec 01       	movw	r28, r24
   18cce:	ed b7       	in	r30, 0x3d	; 61
   18cd0:	fe b7       	in	r31, 0x3e	; 62
   18cd2:	37 83       	std	Z+7, r19	; 0x07
   18cd4:	26 83       	std	Z+6, r18	; 0x06
   18cd6:	88 81       	ld	r24, Y
   18cd8:	99 81       	ldd	r25, Y+1	; 0x01
   18cda:	95 83       	std	Z+5, r25	; 0x05
   18cdc:	84 83       	std	Z+4, r24	; 0x04
   18cde:	8f e9       	ldi	r24, 0x9F	; 159
   18ce0:	98 e3       	ldi	r25, 0x38	; 56
   18ce2:	a0 e0       	ldi	r26, 0x00	; 0
   18ce4:	81 83       	std	Z+1, r24	; 0x01
   18ce6:	92 83       	std	Z+2, r25	; 0x02
   18ce8:	a3 83       	std	Z+3, r26	; 0x03
   18cea:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   18cee:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   18cf2:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18cf6:	c9 01       	movw	r24, r18
   18cf8:	88 27       	eor	r24, r24
   18cfa:	94 70       	andi	r25, 0x04	; 4
   18cfc:	32 ff       	sbrs	r19, 2
   18cfe:	09 c0       	rjmp	.+18     	; 0x18d12 <lif_checkdirindex+0xb2>
   18d00:	60 e2       	ldi	r22, 0x20	; 32
   18d02:	76 e1       	ldi	r23, 0x16	; 22
   18d04:	ce 01       	movw	r24, r28
   18d06:	3c db       	rcall	.-2440   	; 0x18380 <lif_dump_vol>
   18d08:	80 e0       	ldi	r24, 0x00	; 0
   18d0a:	90 e0       	ldi	r25, 0x00	; 0
   18d0c:	02 c0       	rjmp	.+4      	; 0x18d12 <lif_checkdirindex+0xb2>
   18d0e:	81 e0       	ldi	r24, 0x01	; 1
   18d10:	90 e0       	ldi	r25, 0x00	; 0
   18d12:	ad b7       	in	r26, 0x3d	; 61
   18d14:	be b7       	in	r27, 0x3e	; 62
   18d16:	17 96       	adiw	r26, 0x07	; 7
   18d18:	0f b6       	in	r0, 0x3f	; 63
   18d1a:	f8 94       	cli
   18d1c:	be bf       	out	0x3e, r27	; 62
   18d1e:	0f be       	out	0x3f, r0	; 63
   18d20:	ad bf       	out	0x3d, r26	; 61
   18d22:	df 91       	pop	r29
   18d24:	cf 91       	pop	r28
   18d26:	ff 90       	pop	r15
   18d28:	ef 90       	pop	r14
   18d2a:	df 90       	pop	r13
   18d2c:	cf 90       	pop	r12
   18d2e:	08 95       	ret

00018d30 <lif_readdirindex>:
   18d30:	a5 e2       	ldi	r26, 0x25	; 37
   18d32:	b0 e0       	ldi	r27, 0x00	; 0
   18d34:	ee e9       	ldi	r30, 0x9E	; 158
   18d36:	f6 ec       	ldi	r31, 0xC6	; 198
   18d38:	0c 94 e2 e0 	jmp	0x1c1c4	; 0x1c1c4 <__prologue_saves__+0x14>
   18d3c:	7c 01       	movw	r14, r24
   18d3e:	6b 01       	movw	r12, r22
   18d40:	8f df       	rcall	.-226    	; 0x18c60 <lif_checkdirindex>
   18d42:	89 2b       	or	r24, r25
   18d44:	19 f4       	brne	.+6      	; 0x18d4c <lif_readdirindex+0x1c>
   18d46:	00 e0       	ldi	r16, 0x00	; 0
   18d48:	10 e0       	ldi	r17, 0x00	; 0
   18d4a:	54 c0       	rjmp	.+168    	; 0x18df4 <lif_readdirindex+0xc4>
   18d4c:	f7 01       	movw	r30, r14
   18d4e:	85 a5       	ldd	r24, Z+45	; 0x2d
   18d50:	96 a5       	ldd	r25, Z+46	; 0x2e
   18d52:	a7 a5       	ldd	r26, Z+47	; 0x2f
   18d54:	b0 a9       	ldd	r27, Z+48	; 0x30
   18d56:	44 27       	eor	r20, r20
   18d58:	58 2f       	mov	r21, r24
   18d5a:	69 2f       	mov	r22, r25
   18d5c:	7a 2f       	mov	r23, r26
   18d5e:	c6 01       	movw	r24, r12
   18d60:	0d 2c       	mov	r0, r13
   18d62:	00 0c       	add	r0, r0
   18d64:	aa 0b       	sbc	r26, r26
   18d66:	bb 0b       	sbc	r27, r27
   18d68:	35 e0       	ldi	r19, 0x05	; 5
   18d6a:	88 0f       	add	r24, r24
   18d6c:	99 1f       	adc	r25, r25
   18d6e:	aa 1f       	adc	r26, r26
   18d70:	bb 1f       	adc	r27, r27
   18d72:	3a 95       	dec	r19
   18d74:	d1 f7       	brne	.-12     	; 0x18d6a <lif_readdirindex+0x3a>
   18d76:	9a 01       	movw	r18, r20
   18d78:	ab 01       	movw	r20, r22
   18d7a:	28 0f       	add	r18, r24
   18d7c:	39 1f       	adc	r19, r25
   18d7e:	4a 1f       	adc	r20, r26
   18d80:	5b 1f       	adc	r21, r27
   18d82:	00 e2       	ldi	r16, 0x20	; 32
   18d84:	10 e0       	ldi	r17, 0x00	; 0
   18d86:	be 01       	movw	r22, r28
   18d88:	6a 5f       	subi	r22, 0xFA	; 250
   18d8a:	7f 4f       	sbci	r23, 0xFF	; 255
   18d8c:	c7 01       	movw	r24, r14
   18d8e:	0e 94 5e bd 	call	0x17abc	; 0x17abc <lif_read>
   18d92:	60 32       	cpi	r22, 0x20	; 32
   18d94:	71 05       	cpc	r23, r1
   18d96:	81 05       	cpc	r24, r1
   18d98:	91 05       	cpc	r25, r1
   18d9a:	a8 f2       	brcs	.-86     	; 0x18d46 <lif_readdirindex+0x16>
   18d9c:	b7 01       	movw	r22, r14
   18d9e:	ce 01       	movw	r24, r28
   18da0:	06 96       	adiw	r24, 0x06	; 6
   18da2:	91 d9       	rcall	.-3294   	; 0x180c6 <lif_str2dir>
   18da4:	f7 01       	movw	r30, r14
   18da6:	e6 5a       	subi	r30, 0xA6	; 166
   18da8:	ff 4f       	sbci	r31, 0xFF	; 255
   18daa:	80 81       	ld	r24, Z
   18dac:	91 81       	ldd	r25, Z+1	; 0x01
   18dae:	01 96       	adiw	r24, 0x01	; 1
   18db0:	19 f4       	brne	.+6      	; 0x18db8 <lif_readdirindex+0x88>
   18db2:	f7 01       	movw	r30, r14
   18db4:	d3 a2       	std	Z+35, r13	; 0x23
   18db6:	c2 a2       	std	Z+34, r12	; 0x22
   18db8:	c7 01       	movw	r24, r14
   18dba:	83 dd       	rcall	.-1274   	; 0x188c2 <lif_check_dir>
   18dbc:	8c 01       	movw	r16, r24
   18dbe:	89 2b       	or	r24, r25
   18dc0:	b9 f4       	brne	.+46     	; 0x18df0 <lif_readdirindex+0xc0>
   18dc2:	ed b7       	in	r30, 0x3d	; 61
   18dc4:	fe b7       	in	r31, 0x3e	; 62
   18dc6:	d5 82       	std	Z+5, r13	; 0x05
   18dc8:	c4 82       	std	Z+4, r12	; 0x04
   18dca:	8f e7       	ldi	r24, 0x7F	; 127
   18dcc:	98 e3       	ldi	r25, 0x38	; 56
   18dce:	a0 e0       	ldi	r26, 0x00	; 0
   18dd0:	81 83       	std	Z+1, r24	; 0x01
   18dd2:	92 83       	std	Z+2, r25	; 0x02
   18dd4:	a3 83       	std	Z+3, r26	; 0x03
   18dd6:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   18dda:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18dde:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18de2:	92 ff       	sbrs	r25, 2
   18de4:	b0 cf       	rjmp	.-160    	; 0x18d46 <lif_readdirindex+0x16>
   18de6:	61 e3       	ldi	r22, 0x31	; 49
   18de8:	76 e1       	ldi	r23, 0x16	; 22
   18dea:	c7 01       	movw	r24, r14
   18dec:	c9 da       	rcall	.-2670   	; 0x18380 <lif_dump_vol>
   18dee:	02 c0       	rjmp	.+4      	; 0x18df4 <lif_readdirindex+0xc4>
   18df0:	01 e0       	ldi	r16, 0x01	; 1
   18df2:	10 e0       	ldi	r17, 0x00	; 0
   18df4:	c8 01       	movw	r24, r16
   18df6:	a5 96       	adiw	r28, 0x25	; 37
   18df8:	e8 e0       	ldi	r30, 0x08	; 8
   18dfa:	0c 94 fe e0 	jmp	0x1c1fc	; 0x1c1fc <__epilogue_restores__+0x14>

00018dfe <lif_writedirindex>:
   18dfe:	a0 e2       	ldi	r26, 0x20	; 32
   18e00:	b0 e0       	ldi	r27, 0x00	; 0
   18e02:	e5 e0       	ldi	r30, 0x05	; 5
   18e04:	f7 ec       	ldi	r31, 0xC7	; 199
   18e06:	0c 94 e0 e0 	jmp	0x1c1c0	; 0x1c1c0 <__prologue_saves__+0x10>
   18e0a:	5c 01       	movw	r10, r24
   18e0c:	6b 01       	movw	r12, r22
   18e0e:	59 dd       	rcall	.-1358   	; 0x188c2 <lif_check_dir>
   18e10:	7c 01       	movw	r14, r24
   18e12:	89 2b       	or	r24, r25
   18e14:	71 f4       	brne	.+28     	; 0x18e32 <lif_writedirindex+0x34>
   18e16:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   18e1a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   18e1e:	92 fd       	sbrc	r25, 2
   18e20:	03 c0       	rjmp	.+6      	; 0x18e28 <lif_writedirindex+0x2a>
   18e22:	e1 2c       	mov	r14, r1
   18e24:	f1 2c       	mov	r15, r1
   18e26:	42 c0       	rjmp	.+132    	; 0x18eac <lif_writedirindex+0xae>
   18e28:	62 e4       	ldi	r22, 0x42	; 66
   18e2a:	76 e1       	ldi	r23, 0x16	; 22
   18e2c:	c5 01       	movw	r24, r10
   18e2e:	a8 da       	rcall	.-2736   	; 0x18380 <lif_dump_vol>
   18e30:	3d c0       	rjmp	.+122    	; 0x18eac <lif_writedirindex+0xae>
   18e32:	b6 01       	movw	r22, r12
   18e34:	c5 01       	movw	r24, r10
   18e36:	14 df       	rcall	.-472    	; 0x18c60 <lif_checkdirindex>
   18e38:	89 2b       	or	r24, r25
   18e3a:	99 f3       	breq	.-26     	; 0x18e22 <lif_writedirindex+0x24>
   18e3c:	f5 01       	movw	r30, r10
   18e3e:	e6 5a       	subi	r30, 0xA6	; 166
   18e40:	ff 4f       	sbci	r31, 0xFF	; 255
   18e42:	80 81       	ld	r24, Z
   18e44:	91 81       	ldd	r25, Z+1	; 0x01
   18e46:	01 96       	adiw	r24, 0x01	; 1
   18e48:	19 f4       	brne	.+6      	; 0x18e50 <lif_writedirindex+0x52>
   18e4a:	f5 01       	movw	r30, r10
   18e4c:	d3 a2       	std	Z+35, r13	; 0x23
   18e4e:	c2 a2       	std	Z+34, r12	; 0x22
   18e50:	f5 01       	movw	r30, r10
   18e52:	85 a5       	ldd	r24, Z+45	; 0x2d
   18e54:	96 a5       	ldd	r25, Z+46	; 0x2e
   18e56:	a7 a5       	ldd	r26, Z+47	; 0x2f
   18e58:	b0 a9       	ldd	r27, Z+48	; 0x30
   18e5a:	ba 2f       	mov	r27, r26
   18e5c:	a9 2f       	mov	r26, r25
   18e5e:	98 2f       	mov	r25, r24
   18e60:	88 27       	eor	r24, r24
   18e62:	0d 2c       	mov	r0, r13
   18e64:	00 0c       	add	r0, r0
   18e66:	ee 08       	sbc	r14, r14
   18e68:	ff 08       	sbc	r15, r15
   18e6a:	35 e0       	ldi	r19, 0x05	; 5
   18e6c:	cc 0c       	add	r12, r12
   18e6e:	dd 1c       	adc	r13, r13
   18e70:	ee 1c       	adc	r14, r14
   18e72:	ff 1c       	adc	r15, r15
   18e74:	3a 95       	dec	r19
   18e76:	d1 f7       	brne	.-12     	; 0x18e6c <lif_writedirindex+0x6e>
   18e78:	c8 0e       	add	r12, r24
   18e7a:	d9 1e       	adc	r13, r25
   18e7c:	ea 1e       	adc	r14, r26
   18e7e:	fb 1e       	adc	r15, r27
   18e80:	be 01       	movw	r22, r28
   18e82:	6f 5f       	subi	r22, 0xFF	; 255
   18e84:	7f 4f       	sbci	r23, 0xFF	; 255
   18e86:	c5 01       	movw	r24, r10
   18e88:	b3 d8       	rcall	.-3738   	; 0x17ff0 <lif_dir2str>
   18e8a:	00 e2       	ldi	r16, 0x20	; 32
   18e8c:	10 e0       	ldi	r17, 0x00	; 0
   18e8e:	a7 01       	movw	r20, r14
   18e90:	96 01       	movw	r18, r12
   18e92:	be 01       	movw	r22, r28
   18e94:	6f 5f       	subi	r22, 0xFF	; 255
   18e96:	7f 4f       	sbci	r23, 0xFF	; 255
   18e98:	c5 01       	movw	r24, r10
   18e9a:	0e 94 af bd 	call	0x17b5e	; 0x17b5e <lif_write>
   18e9e:	31 e0       	ldi	r19, 0x01	; 1
   18ea0:	20 e0       	ldi	r18, 0x00	; 0
   18ea2:	80 97       	sbiw	r24, 0x20	; 32
   18ea4:	0c f4       	brge	.+2      	; 0x18ea8 <lif_writedirindex+0xaa>
   18ea6:	30 e0       	ldi	r19, 0x00	; 0
   18ea8:	e3 2e       	mov	r14, r19
   18eaa:	f2 2e       	mov	r15, r18
   18eac:	c7 01       	movw	r24, r14
   18eae:	a0 96       	adiw	r28, 0x20	; 32
   18eb0:	ea e0       	ldi	r30, 0x0A	; 10
   18eb2:	0c 94 fc e0 	jmp	0x1c1f8	; 0x1c1f8 <__epilogue_restores__+0x10>

00018eb6 <lif_writedirEOF>:
   18eb6:	0f 93       	push	r16
   18eb8:	1f 93       	push	r17
   18eba:	cf 93       	push	r28
   18ebc:	df 93       	push	r29
   18ebe:	ec 01       	movw	r28, r24
   18ec0:	8b 01       	movw	r16, r22
   18ec2:	4f da       	rcall	.-2914   	; 0x18362 <lif_dir_clear>
   18ec4:	fe 01       	movw	r30, r28
   18ec6:	e6 5a       	subi	r30, 0xA6	; 166
   18ec8:	ff 4f       	sbci	r31, 0xFF	; 255
   18eca:	8f ef       	ldi	r24, 0xFF	; 255
   18ecc:	9f ef       	ldi	r25, 0xFF	; 255
   18ece:	91 83       	std	Z+1, r25	; 0x01
   18ed0:	80 83       	st	Z, r24
   18ed2:	1b a3       	std	Y+35, r17	; 0x23
   18ed4:	0a a3       	std	Y+34, r16	; 0x22
   18ed6:	b8 01       	movw	r22, r16
   18ed8:	ce 01       	movw	r24, r28
   18eda:	91 df       	rcall	.-222    	; 0x18dfe <lif_writedirindex>
   18edc:	df 91       	pop	r29
   18ede:	cf 91       	pop	r28
   18ee0:	1f 91       	pop	r17
   18ee2:	0f 91       	pop	r16
   18ee4:	08 95       	ret

00018ee6 <lif_updatefree>:
/// @brief Update free space
/// @parameter[in] *LIF: LIF structure
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
   18ee6:	2f 92       	push	r2
   18ee8:	3f 92       	push	r3
   18eea:	4f 92       	push	r4
   18eec:	5f 92       	push	r5
   18eee:	6f 92       	push	r6
   18ef0:	7f 92       	push	r7
   18ef2:	8f 92       	push	r8
   18ef4:	af 92       	push	r10
   18ef6:	bf 92       	push	r11
   18ef8:	cf 92       	push	r12
   18efa:	df 92       	push	r13
   18efc:	ef 92       	push	r14
   18efe:	ff 92       	push	r15
   18f00:	0f 93       	push	r16
   18f02:	1f 93       	push	r17
   18f04:	cf 93       	push	r28
   18f06:	df 93       	push	r29
   18f08:	cd b7       	in	r28, 0x3d	; 61
   18f0a:	de b7       	in	r29, 0x3e	; 62
   18f0c:	2f 97       	sbiw	r28, 0x0f	; 15
   18f0e:	0f b6       	in	r0, 0x3f	; 63
   18f10:	f8 94       	cli
   18f12:	de bf       	out	0x3e, r29	; 62
   18f14:	0f be       	out	0x3f, r0	; 63
   18f16:	cd bf       	out	0x3d, r28	; 61
   18f18:	9f 87       	std	Y+15, r25	; 0x0f
   18f1a:	8e 87       	std	Y+14, r24	; 0x0e
    int index = 0;
    int purgeindex = -1;

// Start of free space
    uint32_t start = LIF->filestart;
   18f1c:	fc 01       	movw	r30, r24
   18f1e:	24 84       	ldd	r2, Z+12	; 0x0c
   18f20:	35 84       	ldd	r3, Z+13	; 0x0d
   18f22:	46 84       	ldd	r4, Z+14	; 0x0e
   18f24:	57 84       	ldd	r5, Z+15	; 0x0f
// Free sectors
    LIF->freesectors = LIF->filesectors;
   18f26:	80 89       	ldd	r24, Z+16	; 0x10
   18f28:	91 89       	ldd	r25, Z+17	; 0x11
   18f2a:	a2 89       	ldd	r26, Z+18	; 0x12
   18f2c:	b3 89       	ldd	r27, Z+19	; 0x13
   18f2e:	80 8f       	std	Z+24, r24	; 0x18
   18f30:	91 8f       	std	Z+25, r25	; 0x19
   18f32:	a2 8f       	std	Z+26, r26	; 0x1a
   18f34:	b3 8f       	std	Z+27, r27	; 0x1b
// Used sectors
    LIF->usedsectors = 0;
   18f36:	14 8a       	std	Z+20, r1	; 0x14
   18f38:	15 8a       	std	Z+21, r1	; 0x15
   18f3a:	16 8a       	std	Z+22, r1	; 0x16
   18f3c:	17 8a       	std	Z+23, r1	; 0x17
// Purged files
    LIF->purged= 0;
   18f3e:	17 8e       	std	Z+31, r1	; 0x1f
   18f40:	16 8e       	std	Z+30, r1	; 0x1e
// Files
    LIF->files = 0;
   18f42:	15 8e       	std	Z+29, r1	; 0x1d
   18f44:	14 8e       	std	Z+28, r1	; 0x1c
// Director pointer
    LIF->dirindex = 0;
   18f46:	11 a2       	std	Z+33, r1	; 0x21
   18f48:	10 a2       	std	Z+32, r1	; 0x20
// Directory EOF record
    LIF->EOFindex = 0;
   18f4a:	13 a2       	std	Z+35, r1	; 0x23
   18f4c:	12 a2       	std	Z+34, r1	; 0x22
   18f4e:	cc 24       	eor	r12, r12
   18f50:	c3 94       	inc	r12
   18f52:	d1 2c       	mov	r13, r1
/// @return: LIF or NULL on error
MEMSPACE
lif_t *lif_updatefree(lif_t *LIF)
{
    int index = 0;
    int purgeindex = -1;
   18f54:	0f ef       	ldi	r16, 0xFF	; 255
   18f56:	1f ef       	ldi	r17, 0xFF	; 255
        if( !lif_readdirindex(LIF,index) )
        {
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
   18f58:	e6 5a       	subi	r30, 0xA6	; 166
   18f5a:	ff 4f       	sbci	r31, 0xFF	; 255
   18f5c:	f9 87       	std	Y+9, r31	; 0x09
   18f5e:	e8 87       	std	Y+8, r30	; 0x08
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   18f60:	ae 84       	ldd	r10, Y+14	; 0x0e
   18f62:	bf 84       	ldd	r11, Y+15	; 0x0f
   18f64:	fc e5       	ldi	r31, 0x5C	; 92
   18f66:	af 0e       	add	r10, r31
   18f68:	b1 1c       	adc	r11, r1
        {
            if(debuglevel & GPIB_PPR)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   18f6a:	8e 85       	ldd	r24, Y+14	; 0x0e
   18f6c:	9f 85       	ldd	r25, Y+15	; 0x0f
   18f6e:	80 5a       	subi	r24, 0xA0	; 160
   18f70:	9f 4f       	sbci	r25, 0xFF	; 255
   18f72:	9b 87       	std	Y+11, r25	; 0x0b
   18f74:	8a 87       	std	Y+10, r24	; 0x0a
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
        {
            if(debuglevel & GPIB_PPR)
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   18f76:	ee 85       	ldd	r30, Y+14	; 0x0e
   18f78:	ff 85       	ldd	r31, Y+15	; 0x0f
   18f7a:	e1 5b       	subi	r30, 0xB1	; 177
   18f7c:	ff 4f       	sbci	r31, 0xFF	; 255
   18f7e:	fd 87       	std	Y+13, r31	; 0x0d
   18f80:	ec 87       	std	Y+12, r30	; 0x0c
   18f82:	82 e3       	ldi	r24, 0x32	; 50
   18f84:	98 e3       	ldi	r25, 0x38	; 56
   18f86:	3c 01       	movw	r6, r24
   18f88:	81 2c       	mov	r8, r1
   18f8a:	76 01       	movw	r14, r12
   18f8c:	21 e0       	ldi	r18, 0x01	; 1
   18f8e:	e2 1a       	sub	r14, r18
   18f90:	f1 08       	sbc	r15, r1
    LIF->EOFindex = 0;

/// Update free
    while(1)
    {
        if( !lif_readdirindex(LIF,index) )
   18f92:	b7 01       	movw	r22, r14
   18f94:	8e 85       	ldd	r24, Y+14	; 0x0e
   18f96:	9f 85       	ldd	r25, Y+15	; 0x0f
   18f98:	cb de       	rcall	.-618    	; 0x18d30 <lif_readdirindex>
   18f9a:	89 2b       	or	r24, r25
   18f9c:	19 f4       	brne	.+6      	; 0x18fa4 <lif_updatefree+0xbe>
        {
            return(NULL);
   18f9e:	80 e0       	ldi	r24, 0x00	; 0
   18fa0:	90 e0       	ldi	r25, 0x00	; 0
   18fa2:	91 c0       	rjmp	.+290    	; 0x190c6 <lif_updatefree+0x1e0>
        }

        if(LIF->DIR.FileType == 0xffff)
   18fa4:	e8 85       	ldd	r30, Y+8	; 0x08
   18fa6:	f9 85       	ldd	r31, Y+9	; 0x09
   18fa8:	80 81       	ld	r24, Z
   18faa:	91 81       	ldd	r25, Z+1	; 0x01
   18fac:	8f 3f       	cpi	r24, 0xFF	; 255
   18fae:	ff ef       	ldi	r31, 0xFF	; 255
   18fb0:	9f 07       	cpc	r25, r31
   18fb2:	c1 f4       	brne	.+48     	; 0x18fe4 <lif_updatefree+0xfe>
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
            {
                LIF->EOFindex = purgeindex;
   18fb4:	ee 85       	ldd	r30, Y+14	; 0x0e
   18fb6:	ff 85       	ldd	r31, Y+15	; 0x0f
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
            if(purgeindex != -1)
   18fb8:	0f 3f       	cpi	r16, 0xFF	; 255
   18fba:	2f ef       	ldi	r18, 0xFF	; 255
   18fbc:	12 07       	cpc	r17, r18
   18fbe:	09 f4       	brne	.+2      	; 0x18fc2 <lif_updatefree+0xdc>
   18fc0:	78 c0       	rjmp	.+240    	; 0x190b2 <lif_updatefree+0x1cc>
            {
                LIF->EOFindex = purgeindex;
   18fc2:	13 a3       	std	Z+35, r17	; 0x23
   18fc4:	02 a3       	std	Z+34, r16	; 0x22

// Adjust purged file count
                LIF->purged -= (index - purgeindex);
   18fc6:	e0 1a       	sub	r14, r16
   18fc8:	f1 0a       	sbc	r15, r17
   18fca:	86 8d       	ldd	r24, Z+30	; 0x1e
   18fcc:	97 8d       	ldd	r25, Z+31	; 0x1f
   18fce:	8e 19       	sub	r24, r14
   18fd0:	9f 09       	sbc	r25, r15
   18fd2:	97 8f       	std	Z+31, r25	; 0x1f
   18fd4:	86 8f       	std	Z+30, r24	; 0x1e
// update EOF
                if(!lif_writedirEOF(LIF,purgeindex))
   18fd6:	b8 01       	movw	r22, r16
   18fd8:	cf 01       	movw	r24, r30
   18fda:	6d df       	rcall	.-294    	; 0x18eb6 <lif_writedirEOF>
   18fdc:	89 2b       	or	r24, r25
   18fde:	09 f0       	breq	.+2      	; 0x18fe2 <lif_updatefree+0xfc>
   18fe0:	6a c0       	rjmp	.+212    	; 0x190b6 <lif_updatefree+0x1d0>
   18fe2:	dd cf       	rjmp	.-70     	; 0x18f9e <lif_updatefree+0xb8>
                    return(NULL);
                }
            }
            break;
        }
        if(LIF->DIR.FileType == 0)
   18fe4:	89 2b       	or	r24, r25
   18fe6:	81 f4       	brne	.+32     	; 0x19008 <lif_updatefree+0x122>
        {
            if(purgeindex == -1)
   18fe8:	0f 3f       	cpi	r16, 0xFF	; 255
   18fea:	ff ef       	ldi	r31, 0xFF	; 255
   18fec:	1f 07       	cpc	r17, r31
   18fee:	09 f4       	brne	.+2      	; 0x18ff2 <lif_updatefree+0x10c>
   18ff0:	87 01       	movw	r16, r14
                purgeindex = index;
            LIF->purged++;
   18ff2:	ee 85       	ldd	r30, Y+14	; 0x0e
   18ff4:	ff 85       	ldd	r31, Y+15	; 0x0f
   18ff6:	86 8d       	ldd	r24, Z+30	; 0x1e
   18ff8:	97 8d       	ldd	r25, Z+31	; 0x1f
   18ffa:	01 96       	adiw	r24, 0x01	; 1
   18ffc:	97 8f       	std	Z+31, r25	; 0x1f
   18ffe:	86 8f       	std	Z+30, r24	; 0x1e
   19000:	ff ef       	ldi	r31, 0xFF	; 255
   19002:	cf 1a       	sub	r12, r31
   19004:	df 0a       	sbc	r13, r31
   19006:	c1 cf       	rjmp	.-126    	; 0x18f8a <lif_updatefree+0xa4>
            ++index;
            continue;
        }
        purgeindex = -1;
        if(start > LIF->DIR.FileStartSector)
   19008:	f5 01       	movw	r30, r10
   1900a:	80 81       	ld	r24, Z
   1900c:	91 81       	ldd	r25, Z+1	; 0x01
   1900e:	a2 81       	ldd	r26, Z+2	; 0x02
   19010:	b3 81       	ldd	r27, Z+3	; 0x03
   19012:	82 15       	cp	r24, r2
   19014:	93 05       	cpc	r25, r3
   19016:	a4 05       	cpc	r26, r4
   19018:	b5 05       	cpc	r27, r5
   1901a:	b8 f4       	brcc	.+46     	; 0x1904a <lif_updatefree+0x164>
        {
            if(debuglevel & GPIB_PPR)
   1901c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19020:	81 ff       	sbrs	r24, 1
   19022:	13 c0       	rjmp	.+38     	; 0x1904a <lif_updatefree+0x164>
                printf("lif_update_free:[%s] error previous record file area overlaps this one:[%s]\n", LIF->name, LIF->DIR.filename);
   19024:	8c 85       	ldd	r24, Y+12	; 0x0c
   19026:	9d 85       	ldd	r25, Y+13	; 0x0d
   19028:	ed b7       	in	r30, 0x3d	; 61
   1902a:	fe b7       	in	r31, 0x3e	; 62
   1902c:	97 83       	std	Z+7, r25	; 0x07
   1902e:	86 83       	std	Z+6, r24	; 0x06
   19030:	ee 85       	ldd	r30, Y+14	; 0x0e
   19032:	ff 85       	ldd	r31, Y+15	; 0x0f
   19034:	80 81       	ld	r24, Z
   19036:	91 81       	ldd	r25, Z+1	; 0x01
   19038:	ed b7       	in	r30, 0x3d	; 61
   1903a:	fe b7       	in	r31, 0x3e	; 62
   1903c:	95 83       	std	Z+5, r25	; 0x05
   1903e:	84 83       	std	Z+4, r24	; 0x04
   19040:	61 82       	std	Z+1, r6	; 0x01
   19042:	72 82       	std	Z+2, r7	; 0x02
   19044:	83 82       	std	Z+3, r8	; 0x03
   19046:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

        }
        LIF->usedsectors += LIF->DIR.FileSectors;
   1904a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1904c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1904e:	80 81       	ld	r24, Z
   19050:	91 81       	ldd	r25, Z+1	; 0x01
   19052:	a2 81       	ldd	r26, Z+2	; 0x02
   19054:	b3 81       	ldd	r27, Z+3	; 0x03
   19056:	ee 85       	ldd	r30, Y+14	; 0x0e
   19058:	ff 85       	ldd	r31, Y+15	; 0x0f
   1905a:	44 89       	ldd	r20, Z+20	; 0x14
   1905c:	55 89       	ldd	r21, Z+21	; 0x15
   1905e:	66 89       	ldd	r22, Z+22	; 0x16
   19060:	77 89       	ldd	r23, Z+23	; 0x17
   19062:	48 0f       	add	r20, r24
   19064:	59 1f       	adc	r21, r25
   19066:	6a 1f       	adc	r22, r26
   19068:	7b 1f       	adc	r23, r27
   1906a:	44 8b       	std	Z+20, r20	; 0x14
   1906c:	55 8b       	std	Z+21, r21	; 0x15
   1906e:	66 8b       	std	Z+22, r22	; 0x16
   19070:	77 8b       	std	Z+23, r23	; 0x17
        LIF->freesectors -= LIF->DIR.FileSectors;
   19072:	40 8d       	ldd	r20, Z+24	; 0x18
   19074:	51 8d       	ldd	r21, Z+25	; 0x19
   19076:	62 8d       	ldd	r22, Z+26	; 0x1a
   19078:	73 8d       	ldd	r23, Z+27	; 0x1b
   1907a:	48 1b       	sub	r20, r24
   1907c:	59 0b       	sbc	r21, r25
   1907e:	6a 0b       	sbc	r22, r26
   19080:	7b 0b       	sbc	r23, r27
   19082:	40 8f       	std	Z+24, r20	; 0x18
   19084:	51 8f       	std	Z+25, r21	; 0x19
   19086:	62 8f       	std	Z+26, r22	; 0x1a
   19088:	73 8f       	std	Z+27, r23	; 0x1b
        LIF->files++;
   1908a:	24 8d       	ldd	r18, Z+28	; 0x1c
   1908c:	35 8d       	ldd	r19, Z+29	; 0x1d
   1908e:	2f 5f       	subi	r18, 0xFF	; 255
   19090:	3f 4f       	sbci	r19, 0xFF	; 255
   19092:	35 8f       	std	Z+29, r19	; 0x1d
   19094:	24 8f       	std	Z+28, r18	; 0x1c
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   19096:	f5 01       	movw	r30, r10
   19098:	40 81       	ld	r20, Z
   1909a:	51 81       	ldd	r21, Z+1	; 0x01
   1909c:	62 81       	ldd	r22, Z+2	; 0x02
   1909e:	73 81       	ldd	r23, Z+3	; 0x03
   190a0:	1c 01       	movw	r2, r24
   190a2:	2d 01       	movw	r4, r26
   190a4:	24 0e       	add	r2, r20
   190a6:	35 1e       	adc	r3, r21
   190a8:	46 1e       	adc	r4, r22
   190aa:	57 1e       	adc	r5, r23
                purgeindex = index;
            LIF->purged++;
            ++index;
            continue;
        }
        purgeindex = -1;
   190ac:	0f ef       	ldi	r16, 0xFF	; 255
   190ae:	1f ef       	ldi	r17, 0xFF	; 255
   190b0:	a7 cf       	rjmp	.-178    	; 0x19000 <lif_updatefree+0x11a>
            return(NULL);
        }

        if(LIF->DIR.FileType == 0xffff)
        {
            LIF->EOFindex = index;
   190b2:	f3 a2       	std	Z+35, r15	; 0x23
   190b4:	e2 a2       	std	Z+34, r14	; 0x22
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   190b6:	8f ef       	ldi	r24, 0xFF	; 255
   190b8:	9f ef       	ldi	r25, 0xFF	; 255
   190ba:	ee 85       	ldd	r30, Y+14	; 0x0e
   190bc:	ff 85       	ldd	r31, Y+15	; 0x0f
   190be:	91 a3       	std	Z+33, r25	; 0x21
   190c0:	80 a3       	std	Z+32, r24	; 0x20
        ++index;
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
    }
// rewind
    lif_rewinddir(LIF);
    return(LIF);
   190c2:	8e 85       	ldd	r24, Y+14	; 0x0e
   190c4:	9f 85       	ldd	r25, Y+15	; 0x0f
}
   190c6:	2f 96       	adiw	r28, 0x0f	; 15
   190c8:	0f b6       	in	r0, 0x3f	; 63
   190ca:	f8 94       	cli
   190cc:	de bf       	out	0x3e, r29	; 62
   190ce:	0f be       	out	0x3f, r0	; 63
   190d0:	cd bf       	out	0x3d, r28	; 61
   190d2:	df 91       	pop	r29
   190d4:	cf 91       	pop	r28
   190d6:	1f 91       	pop	r17
   190d8:	0f 91       	pop	r16
   190da:	ff 90       	pop	r15
   190dc:	ef 90       	pop	r14
   190de:	df 90       	pop	r13
   190e0:	cf 90       	pop	r12
   190e2:	bf 90       	pop	r11
   190e4:	af 90       	pop	r10
   190e6:	8f 90       	pop	r8
   190e8:	7f 90       	pop	r7
   190ea:	6f 90       	pop	r6
   190ec:	5f 90       	pop	r5
   190ee:	4f 90       	pop	r4
   190f0:	3f 90       	pop	r3
   190f2:	2f 90       	pop	r2
   190f4:	08 95       	ret

000190f6 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   190f6:	a9 e2       	ldi	r26, 0x29	; 41
   190f8:	b1 e0       	ldi	r27, 0x01	; 1
   190fa:	e1 e8       	ldi	r30, 0x81	; 129
   190fc:	f8 ec       	ldi	r31, 0xC8	; 200
   190fe:	0c 94 d8 e0 	jmp	0x1c1b0	; 0x1c1b0 <__prologue_saves__>
   19102:	4c 01       	movw	r8, r24
   19104:	3b 01       	movw	r6, r22
   19106:	19 01       	movw	r2, r18
   19108:	2a 01       	movw	r4, r20
   1910a:	ca 5d       	subi	r28, 0xDA	; 218
   1910c:	de 4f       	sbci	r29, 0xFE	; 254
   1910e:	e8 82       	st	Y, r14
   19110:	f9 82       	std	Y+1, r15	; 0x01
   19112:	0a 83       	std	Y+2, r16	; 0x02
   19114:	1b 83       	std	Y+3, r17	; 0x03
   19116:	c6 52       	subi	r28, 0x26	; 38
   19118:	d1 40       	sbci	r29, 0x01	; 1
   1911a:	c2 5e       	subi	r28, 0xE2	; 226
   1911c:	de 4f       	sbci	r29, 0xFE	; 254
   1911e:	a8 82       	st	Y, r10
   19120:	b9 82       	std	Y+1, r11	; 0x01
   19122:	ca 82       	std	Y+2, r12	; 0x02
   19124:	db 82       	std	Y+3, r13	; 0x03
   19126:	ce 51       	subi	r28, 0x1E	; 30
   19128:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   1912a:	80 e0       	ldi	r24, 0x00	; 0
   1912c:	90 e0       	ldi	r25, 0x00	; 0
   1912e:	0e 94 45 35 	call	0x6a8a	; 0x6a8a <time>
   19132:	5b 01       	movw	r10, r22
   19134:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   19136:	64 e7       	ldi	r22, 0x74	; 116
   19138:	70 e0       	ldi	r23, 0x00	; 0
   1913a:	80 e0       	ldi	r24, 0x00	; 0
   1913c:	90 e0       	ldi	r25, 0x00	; 0
   1913e:	0e 94 70 bc 	call	0x178e0	; 0x178e0 <lif_calloc>
   19142:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   19144:	89 2b       	or	r24, r25
   19146:	09 f4       	brne	.+2      	; 0x1914a <lif_create_volume+0x54>
   19148:	b6 c2       	rjmp	.+1388   	; 0x196b6 <lif_create_volume+0x5c0>
        return(NULL);

    printf("Creating:%s, Label:[%s], Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   1914a:	c2 5e       	subi	r28, 0xE2	; 226
   1914c:	de 4f       	sbci	r29, 0xFE	; 254
   1914e:	28 81       	ld	r18, Y
   19150:	39 81       	ldd	r19, Y+1	; 0x01
   19152:	4a 81       	ldd	r20, Y+2	; 0x02
   19154:	5b 81       	ldd	r21, Y+3	; 0x03
   19156:	ce 51       	subi	r28, 0x1E	; 30
   19158:	d1 40       	sbci	r29, 0x01	; 1
   1915a:	ed b7       	in	r30, 0x3d	; 61
   1915c:	fe b7       	in	r31, 0x3e	; 62
   1915e:	20 8b       	std	Z+16, r18	; 0x10
   19160:	31 8b       	std	Z+17, r19	; 0x11
   19162:	42 8b       	std	Z+18, r20	; 0x12
   19164:	53 8b       	std	Z+19, r21	; 0x13
   19166:	ca 5d       	subi	r28, 0xDA	; 218
   19168:	de 4f       	sbci	r29, 0xFE	; 254
   1916a:	28 81       	ld	r18, Y
   1916c:	39 81       	ldd	r19, Y+1	; 0x01
   1916e:	4a 81       	ldd	r20, Y+2	; 0x02
   19170:	5b 81       	ldd	r21, Y+3	; 0x03
   19172:	c6 52       	subi	r28, 0x26	; 38
   19174:	d1 40       	sbci	r29, 0x01	; 1
   19176:	24 87       	std	Z+12, r18	; 0x0c
   19178:	35 87       	std	Z+13, r19	; 0x0d
   1917a:	46 87       	std	Z+14, r20	; 0x0e
   1917c:	57 87       	std	Z+15, r21	; 0x0f
   1917e:	20 86       	std	Z+8, r2	; 0x08
   19180:	31 86       	std	Z+9, r3	; 0x09
   19182:	42 86       	std	Z+10, r4	; 0x0a
   19184:	53 86       	std	Z+11, r5	; 0x0b
   19186:	77 82       	std	Z+7, r7	; 0x07
   19188:	66 82       	std	Z+6, r6	; 0x06
   1918a:	95 82       	std	Z+5, r9	; 0x05
   1918c:	84 82       	std	Z+4, r8	; 0x04
   1918e:	8d e0       	ldi	r24, 0x0D	; 13
   19190:	99 e3       	ldi	r25, 0x39	; 57
   19192:	a0 e0       	ldi	r26, 0x00	; 0
   19194:	81 83       	std	Z+1, r24	; 0x01
   19196:	92 83       	std	Z+2, r25	; 0x02
   19198:	a3 83       	std	Z+3, r26	; 0x03
   1919a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & LIF_DEBUG)
   1919e:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   191a2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   191a6:	92 ff       	sbrs	r25, 2
   191a8:	04 c0       	rjmp	.+8      	; 0x191b2 <lif_create_volume+0xbc>
        lif_dump_vol(LIF,"lif_create_volume");
   191aa:	64 e5       	ldi	r22, 0x54	; 84
   191ac:	76 e1       	ldi	r23, 0x16	; 22
   191ae:	c7 01       	movw	r24, r14
   191b0:	e7 d8       	rcall	.-3634   	; 0x18380 <lif_dump_vol>

    lif_image_clear(LIF);
   191b2:	c7 01       	movw	r24, r14
   191b4:	d0 d8       	rcall	.-3680   	; 0x18356 <lif_image_clear>

// Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   191b6:	80 e0       	ldi	r24, 0x00	; 0
   191b8:	90 e8       	ldi	r25, 0x80	; 128
   191ba:	f7 01       	movw	r30, r14
   191bc:	95 a3       	std	Z+37, r25	; 0x25
   191be:	84 a3       	std	Z+36, r24	; 0x24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   191c0:	46 e0       	ldi	r20, 0x06	; 6
   191c2:	50 e0       	ldi	r21, 0x00	; 0
   191c4:	b3 01       	movw	r22, r6
   191c6:	c7 01       	movw	r24, r14
   191c8:	86 96       	adiw	r24, 0x26	; 38
   191ca:	0e 94 af be 	call	0x17d5e	; 0x17d5e <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   191ce:	f7 01       	movw	r30, r14
   191d0:	25 a6       	std	Z+45, r2	; 0x2d
   191d2:	36 a6       	std	Z+46, r3	; 0x2e
   191d4:	47 a6       	std	Z+47, r4	; 0x2f
   191d6:	50 aa       	std	Z+48, r5	; 0x30
    LIF->VOL.DirSectors = dirsectors;
   191d8:	ca 5d       	subi	r28, 0xDA	; 218
   191da:	de 4f       	sbci	r29, 0xFE	; 254
   191dc:	28 81       	ld	r18, Y
   191de:	39 81       	ldd	r19, Y+1	; 0x01
   191e0:	4a 81       	ldd	r20, Y+2	; 0x02
   191e2:	5b 81       	ldd	r21, Y+3	; 0x03
   191e4:	c6 52       	subi	r28, 0x26	; 38
   191e6:	d1 40       	sbci	r29, 0x01	; 1
   191e8:	25 ab       	std	Z+53, r18	; 0x35
   191ea:	36 ab       	std	Z+54, r19	; 0x36
   191ec:	47 ab       	std	Z+55, r20	; 0x37
   191ee:	50 af       	std	Z+56, r21	; 0x38
    LIF->VOL.System3000LIFid = 0x1000;
   191f0:	80 e0       	ldi	r24, 0x00	; 0
   191f2:	90 e1       	ldi	r25, 0x10	; 16
   191f4:	92 ab       	std	Z+50, r25	; 0x32
   191f6:	81 ab       	std	Z+49, r24	; 0x31
    LIF->VOL.tracks_per_side = 0;
   191f8:	fd 96       	adiw	r30, 0x3d	; 61
   191fa:	10 82       	st	Z, r1
   191fc:	11 82       	std	Z+1, r1	; 0x01
   191fe:	12 82       	std	Z+2, r1	; 0x02
   19200:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sides = 0;
   19202:	34 96       	adiw	r30, 0x04	; 4
   19204:	10 82       	st	Z, r1
   19206:	11 82       	std	Z+1, r1	; 0x01
   19208:	12 82       	std	Z+2, r1	; 0x02
   1920a:	13 82       	std	Z+3, r1	; 0x03
    LIF->VOL.sectors_per_track = 0;
   1920c:	34 96       	adiw	r30, 0x04	; 4
   1920e:	10 82       	st	Z, r1
   19210:	11 82       	std	Z+1, r1	; 0x01
   19212:	12 82       	std	Z+2, r1	; 0x02
   19214:	13 82       	std	Z+3, r1	; 0x03
///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   19216:	a7 01       	movw	r20, r14
   19218:	47 5b       	subi	r20, 0xB7	; 183
   1921a:	5f 4f       	sbci	r21, 0xFF	; 255
   1921c:	c6 01       	movw	r24, r12
   1921e:	b5 01       	movw	r22, r10
   19220:	0e 94 d4 c0 	call	0x181a8	; 0x181a8 <lif_time2lifbcd>

// update LIF headers
    LIF->name = lif_stralloc(imagename);
   19224:	c4 01       	movw	r24, r8
   19226:	0e 94 bb bc 	call	0x17976	; 0x17976 <lif_stralloc>
   1922a:	d7 01       	movw	r26, r14
   1922c:	8d 93       	st	X+, r24
   1922e:	9c 93       	st	X, r25
    if(LIF->name == NULL)
   19230:	89 2b       	or	r24, r25
   19232:	09 f4       	brne	.+2      	; 0x19236 <lif_create_volume+0x140>
   19234:	35 c2       	rjmp	.+1130   	; 0x196a0 <lif_create_volume+0x5aa>
        lif_close_volume(LIF);
        return(NULL);
    }

// Initilize all LIF headers
    LIF->filesectors = filesectors;
   19236:	c2 5e       	subi	r28, 0xE2	; 226
   19238:	de 4f       	sbci	r29, 0xFE	; 254
   1923a:	28 81       	ld	r18, Y
   1923c:	39 81       	ldd	r19, Y+1	; 0x01
   1923e:	4a 81       	ldd	r20, Y+2	; 0x02
   19240:	5b 81       	ldd	r21, Y+3	; 0x03
   19242:	ce 51       	subi	r28, 0x1E	; 30
   19244:	d1 40       	sbci	r29, 0x01	; 1
   19246:	f7 01       	movw	r30, r14
   19248:	20 8b       	std	Z+16, r18	; 0x10
   1924a:	31 8b       	std	Z+17, r19	; 0x11
   1924c:	42 8b       	std	Z+18, r20	; 0x12
   1924e:	53 8b       	std	Z+19, r21	; 0x13
    LIF->filestart = dirstart + dirsectors;
   19250:	ca 5d       	subi	r28, 0xDA	; 218
   19252:	de 4f       	sbci	r29, 0xFE	; 254
   19254:	88 81       	ld	r24, Y
   19256:	99 81       	ldd	r25, Y+1	; 0x01
   19258:	aa 81       	ldd	r26, Y+2	; 0x02
   1925a:	bb 81       	ldd	r27, Y+3	; 0x03
   1925c:	c6 52       	subi	r28, 0x26	; 38
   1925e:	d1 40       	sbci	r29, 0x01	; 1
   19260:	82 0d       	add	r24, r2
   19262:	93 1d       	adc	r25, r3
   19264:	a4 1d       	adc	r26, r4
   19266:	b5 1d       	adc	r27, r5
   19268:	84 87       	std	Z+12, r24	; 0x0c
   1926a:	95 87       	std	Z+13, r25	; 0x0d
   1926c:	a6 87       	std	Z+14, r26	; 0x0e
   1926e:	b7 87       	std	Z+15, r27	; 0x0f
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   19270:	82 0f       	add	r24, r18
   19272:	93 1f       	adc	r25, r19
   19274:	a4 1f       	adc	r26, r20
   19276:	b5 1f       	adc	r27, r21
   19278:	84 83       	std	Z+4, r24	; 0x04
   1927a:	95 83       	std	Z+5, r25	; 0x05
   1927c:	a6 83       	std	Z+6, r26	; 0x06
   1927e:	b7 83       	std	Z+7, r27	; 0x07
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   19280:	ba 2f       	mov	r27, r26
   19282:	a9 2f       	mov	r26, r25
   19284:	98 2f       	mov	r25, r24
   19286:	88 27       	eor	r24, r24
   19288:	80 87       	std	Z+8, r24	; 0x08
   1928a:	91 87       	std	Z+9, r25	; 0x09
   1928c:	a2 87       	std	Z+10, r26	; 0x0a
   1928e:	b3 87       	std	Z+11, r27	; 0x0b
    LIF->freesectors = LIF->filesectors;
   19290:	20 8f       	std	Z+24, r18	; 0x18
   19292:	31 8f       	std	Z+25, r19	; 0x19
   19294:	42 8f       	std	Z+26, r20	; 0x1a
   19296:	53 8f       	std	Z+27, r21	; 0x1b
    LIF->usedsectors = 0;
   19298:	14 8a       	std	Z+20, r1	; 0x14
   1929a:	15 8a       	std	Z+21, r1	; 0x15
   1929c:	16 8a       	std	Z+22, r1	; 0x16
   1929e:	17 8a       	std	Z+23, r1	; 0x17
    LIF->files = 0;
   192a0:	15 8e       	std	Z+29, r1	; 0x1d
   192a2:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->purged = 0;
   192a4:	17 8e       	std	Z+31, r1	; 0x1f
   192a6:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->dirindex = 0;
   192a8:	11 a2       	std	Z+33, r1	; 0x21
   192aa:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   192ac:	13 a2       	std	Z+35, r1	; 0x23
   192ae:	12 a2       	std	Z+34, r1	; 0x22

    memset(buffer,0,LIF_SECTOR_SIZE);
   192b0:	61 2c       	mov	r6, r1
   192b2:	77 24       	eor	r7, r7
   192b4:	73 94       	inc	r7
   192b6:	9e 01       	movw	r18, r28
   192b8:	2c 5e       	subi	r18, 0xEC	; 236
   192ba:	3f 4f       	sbci	r19, 0xFF	; 255
   192bc:	49 01       	movw	r8, r18
   192be:	d9 01       	movw	r26, r18
   192c0:	f3 01       	movw	r30, r6
   192c2:	1d 92       	st	X+, r1
   192c4:	31 97       	sbiw	r30, 0x01	; 1
   192c6:	e9 f7       	brne	.-6      	; 0x192c2 <lif_create_volume+0x1cc>

    lif_vol2str(LIF,buffer);
   192c8:	b9 01       	movw	r22, r18
   192ca:	c7 01       	movw	r24, r14
   192cc:	0e 94 ec be 	call	0x17dd8	; 0x17dd8 <lif_vol2str>

// Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   192d0:	66 e1       	ldi	r22, 0x16	; 22
   192d2:	79 e0       	ldi	r23, 0x09	; 9
   192d4:	d7 01       	movw	r26, r14
   192d6:	8d 91       	ld	r24, X+
   192d8:	9c 91       	ld	r25, X
   192da:	0e 94 da bc 	call	0x179b4	; 0x179b4 <lif_open>
   192de:	f7 01       	movw	r30, r14
   192e0:	93 83       	std	Z+3, r25	; 0x03
   192e2:	82 83       	std	Z+2, r24	; 0x02
    if(LIF->fp == NULL)
   192e4:	89 2b       	or	r24, r25
   192e6:	09 f4       	brne	.+2      	; 0x192ea <lif_create_volume+0x1f4>
   192e8:	db c1       	rjmp	.+950    	; 0x196a0 <lif_create_volume+0x5aa>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   192ea:	00 e0       	ldi	r16, 0x00	; 0
   192ec:	11 e0       	ldi	r17, 0x01	; 1
   192ee:	20 e0       	ldi	r18, 0x00	; 0
   192f0:	30 e0       	ldi	r19, 0x00	; 0
   192f2:	a9 01       	movw	r20, r18
   192f4:	b4 01       	movw	r22, r8
   192f6:	c7 01       	movw	r24, r14
   192f8:	0e 94 af bd 	call	0x17b5e	; 0x17b5e <lif_write>
   192fc:	9c 01       	movw	r18, r24
   192fe:	99 0f       	add	r25, r25
   19300:	44 0b       	sbc	r20, r20
   19302:	55 0b       	sbc	r21, r21
   19304:	ca 5e       	subi	r28, 0xEA	; 234
   19306:	de 4f       	sbci	r29, 0xFE	; 254
   19308:	28 83       	st	Y, r18
   1930a:	39 83       	std	Y+1, r19	; 0x01
   1930c:	4a 83       	std	Y+2, r20	; 0x02
   1930e:	5b 83       	std	Y+3, r21	; 0x03
   19310:	c6 51       	subi	r28, 0x16	; 22
   19312:	d1 40       	sbci	r29, 0x01	; 1

    if(size < LIF_SECTOR_SIZE)
   19314:	2f 3f       	cpi	r18, 0xFF	; 255
   19316:	31 05       	cpc	r19, r1
   19318:	41 05       	cpc	r20, r1
   1931a:	51 05       	cpc	r21, r1
   1931c:	09 f0       	breq	.+2      	; 0x19320 <lif_create_volume+0x22a>
   1931e:	0c f4       	brge	.+2      	; 0x19322 <lif_create_volume+0x22c>
   19320:	bf c1       	rjmp	.+894    	; 0x196a0 <lif_create_volume+0x5aa>
        return(NULL);
    }
    offset += size;
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);
   19322:	d4 01       	movw	r26, r8
   19324:	f3 01       	movw	r30, r6
   19326:	1d 92       	st	X+, r1
   19328:	31 97       	sbiw	r30, 0x01	; 1
   1932a:	e9 f7       	brne	.-6      	; 0x19326 <lif_create_volume+0x230>

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1932c:	21 e0       	ldi	r18, 0x01	; 1
   1932e:	30 e0       	ldi	r19, 0x00	; 0
   19330:	40 e0       	ldi	r20, 0x00	; 0
   19332:	50 e0       	ldi	r21, 0x00	; 0
   19334:	c6 5e       	subi	r28, 0xE6	; 230
   19336:	de 4f       	sbci	r29, 0xFE	; 254
   19338:	28 83       	st	Y, r18
   1933a:	39 83       	std	Y+1, r19	; 0x01
   1933c:	4a 83       	std	Y+2, r20	; 0x02
   1933e:	5b 83       	std	Y+3, r21	; 0x03
   19340:	ca 51       	subi	r28, 0x1A	; 26
   19342:	d1 40       	sbci	r29, 0x01	; 1
   19344:	64 01       	movw	r12, r8
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        printf("\tWrote: %ld\r", count);
   19346:	80 e0       	ldi	r24, 0x00	; 0
   19348:	99 e3       	ldi	r25, 0x39	; 57
   1934a:	3c 01       	movw	r6, r24
   1934c:	81 2c       	mov	r8, r1
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1934e:	c6 5e       	subi	r28, 0xE6	; 230
   19350:	de 4f       	sbci	r29, 0xFE	; 254
   19352:	88 81       	ld	r24, Y
   19354:	99 81       	ldd	r25, Y+1	; 0x01
   19356:	aa 81       	ldd	r26, Y+2	; 0x02
   19358:	bb 81       	ldd	r27, Y+3	; 0x03
   1935a:	ca 51       	subi	r28, 0x1A	; 26
   1935c:	d1 40       	sbci	r29, 0x01	; 1
   1935e:	82 15       	cp	r24, r2
   19360:	93 05       	cpc	r25, r3
   19362:	a4 05       	cpc	r26, r4
   19364:	b5 05       	cpc	r27, r5
   19366:	0c f0       	brlt	.+2      	; 0x1936a <lif_create_volume+0x274>
   19368:	55 c0       	rjmp	.+170    	; 0x19414 <lif_create_volume+0x31e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1936a:	00 e0       	ldi	r16, 0x00	; 0
   1936c:	11 e0       	ldi	r17, 0x01	; 1
   1936e:	ca 5e       	subi	r28, 0xEA	; 234
   19370:	de 4f       	sbci	r29, 0xFE	; 254
   19372:	28 81       	ld	r18, Y
   19374:	39 81       	ldd	r19, Y+1	; 0x01
   19376:	4a 81       	ldd	r20, Y+2	; 0x02
   19378:	5b 81       	ldd	r21, Y+3	; 0x03
   1937a:	c6 51       	subi	r28, 0x16	; 22
   1937c:	d1 40       	sbci	r29, 0x01	; 1
   1937e:	b6 01       	movw	r22, r12
   19380:	c7 01       	movw	r24, r14
   19382:	0e 94 af bd 	call	0x17b5e	; 0x17b5e <lif_write>
   19386:	09 2e       	mov	r0, r25
   19388:	00 0c       	add	r0, r0
   1938a:	aa 0b       	sbc	r26, r26
   1938c:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   1938e:	8f 3f       	cpi	r24, 0xFF	; 255
   19390:	91 05       	cpc	r25, r1
   19392:	a1 05       	cpc	r26, r1
   19394:	b1 05       	cpc	r27, r1
   19396:	09 f0       	breq	.+2      	; 0x1939a <lif_create_volume+0x2a4>
   19398:	0c f4       	brge	.+2      	; 0x1939c <lif_create_volume+0x2a6>
   1939a:	82 c1       	rjmp	.+772    	; 0x196a0 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1939c:	ca 5e       	subi	r28, 0xEA	; 234
   1939e:	de 4f       	sbci	r29, 0xFE	; 254
   193a0:	28 81       	ld	r18, Y
   193a2:	39 81       	ldd	r19, Y+1	; 0x01
   193a4:	4a 81       	ldd	r20, Y+2	; 0x02
   193a6:	5b 81       	ldd	r21, Y+3	; 0x03
   193a8:	c6 51       	subi	r28, 0x16	; 22
   193aa:	d1 40       	sbci	r29, 0x01	; 1
   193ac:	28 0f       	add	r18, r24
   193ae:	39 1f       	adc	r19, r25
   193b0:	4a 1f       	adc	r20, r26
   193b2:	5b 1f       	adc	r21, r27
   193b4:	ca 5e       	subi	r28, 0xEA	; 234
   193b6:	de 4f       	sbci	r29, 0xFE	; 254
   193b8:	28 83       	st	Y, r18
   193ba:	39 83       	std	Y+1, r19	; 0x01
   193bc:	4a 83       	std	Y+2, r20	; 0x02
   193be:	5b 83       	std	Y+3, r21	; 0x03
   193c0:	c6 51       	subi	r28, 0x16	; 22
   193c2:	d1 40       	sbci	r29, 0x01	; 1
        printf("\tWrote: %ld\r", count);
   193c4:	c6 5e       	subi	r28, 0xE6	; 230
   193c6:	de 4f       	sbci	r29, 0xFE	; 254
   193c8:	88 81       	ld	r24, Y
   193ca:	99 81       	ldd	r25, Y+1	; 0x01
   193cc:	aa 81       	ldd	r26, Y+2	; 0x02
   193ce:	bb 81       	ldd	r27, Y+3	; 0x03
   193d0:	ca 51       	subi	r28, 0x1A	; 26
   193d2:	d1 40       	sbci	r29, 0x01	; 1
   193d4:	ed b7       	in	r30, 0x3d	; 61
   193d6:	fe b7       	in	r31, 0x3e	; 62
   193d8:	84 83       	std	Z+4, r24	; 0x04
   193da:	95 83       	std	Z+5, r25	; 0x05
   193dc:	a6 83       	std	Z+6, r26	; 0x06
   193de:	b7 83       	std	Z+7, r27	; 0x07
   193e0:	61 82       	std	Z+1, r6	; 0x01
   193e2:	72 82       	std	Z+2, r7	; 0x02
   193e4:	83 82       	std	Z+3, r8	; 0x03
   193e6:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    ++count;

    memset(buffer,0,LIF_SECTOR_SIZE);

// Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   193ea:	c6 5e       	subi	r28, 0xE6	; 230
   193ec:	de 4f       	sbci	r29, 0xFE	; 254
   193ee:	28 81       	ld	r18, Y
   193f0:	39 81       	ldd	r19, Y+1	; 0x01
   193f2:	4a 81       	ldd	r20, Y+2	; 0x02
   193f4:	5b 81       	ldd	r21, Y+3	; 0x03
   193f6:	ca 51       	subi	r28, 0x1A	; 26
   193f8:	d1 40       	sbci	r29, 0x01	; 1
   193fa:	2f 5f       	subi	r18, 0xFF	; 255
   193fc:	3f 4f       	sbci	r19, 0xFF	; 255
   193fe:	4f 4f       	sbci	r20, 0xFF	; 255
   19400:	5f 4f       	sbci	r21, 0xFF	; 255
   19402:	c6 5e       	subi	r28, 0xE6	; 230
   19404:	de 4f       	sbci	r29, 0xFE	; 254
   19406:	28 83       	st	Y, r18
   19408:	39 83       	std	Y+1, r19	; 0x01
   1940a:	4a 83       	std	Y+2, r20	; 0x02
   1940c:	5b 83       	std	Y+3, r21	; 0x03
   1940e:	ca 51       	subi	r28, 0x1A	; 26
   19410:	d1 40       	sbci	r29, 0x01	; 1
   19412:	9d cf       	rjmp	.-198    	; 0x1934e <lif_create_volume+0x258>
        printf("\tWrote: %ld\r", count);
        ++count;
    }

// Write Directory sectors
    lif_dir_clear(LIF);
   19414:	c7 01       	movw	r24, r14
   19416:	0e 94 b1 c1 	call	0x18362	; 0x18362 <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   1941a:	8f ef       	ldi	r24, 0xFF	; 255
   1941c:	9f ef       	ldi	r25, 0xFF	; 255
   1941e:	f7 01       	movw	r30, r14
   19420:	e6 5a       	subi	r30, 0xA6	; 166
   19422:	ff 4f       	sbci	r31, 0xFF	; 255
   19424:	91 83       	std	Z+1, r25	; 0x01
   19426:	80 83       	st	Z, r24
   19428:	46 01       	movw	r8, r12
   1942a:	6e 01       	movw	r12, r28
   1942c:	9c ee       	ldi	r25, 0xEC	; 236
   1942e:	c9 1a       	sub	r12, r25
   19430:	9e ef       	ldi	r25, 0xFE	; 254
   19432:	d9 0a       	sbc	r13, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   19434:	b4 01       	movw	r22, r8
   19436:	c7 01       	movw	r24, r14
   19438:	0e 94 f8 bf 	call	0x17ff0	; 0x17ff0 <lif_dir2str>
   1943c:	a0 e2       	ldi	r26, 0x20	; 32
   1943e:	8a 0e       	add	r8, r26
   19440:	91 1c       	adc	r9, r1

// Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   19442:	c8 14       	cp	r12, r8
   19444:	d9 04       	cpc	r13, r9
   19446:	b1 f7       	brne	.-20     	; 0x19434 <lif_create_volume+0x33e>
   19448:	a1 2c       	mov	r10, r1
   1944a:	b1 2c       	mov	r11, r1
   1944c:	65 01       	movw	r12, r10
   1944e:	fe 01       	movw	r30, r28
   19450:	74 96       	adiw	r30, 0x14	; 20
   19452:	cc 5e       	subi	r28, 0xEC	; 236
   19454:	de 4f       	sbci	r29, 0xFE	; 254
   19456:	f9 83       	std	Y+1, r31	; 0x01
   19458:	e8 83       	st	Y, r30
   1945a:	c4 51       	subi	r28, 0x14	; 20
   1945c:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   1945e:	84 e6       	ldi	r24, 0x64	; 100
   19460:	28 2e       	mov	r2, r24
   19462:	31 2c       	mov	r3, r1
   19464:	41 2c       	mov	r4, r1
   19466:	51 2c       	mov	r5, r1
            printf("\tWrote: %ld\r", count);
   19468:	83 ef       	ldi	r24, 0xF3	; 243
   1946a:	98 e3       	ldi	r25, 0x38	; 56
   1946c:	3c 01       	movw	r6, r24
   1946e:	81 2c       	mov	r8, r1
   19470:	c6 5e       	subi	r28, 0xE6	; 230
   19472:	de 4f       	sbci	r29, 0xFE	; 254
   19474:	28 81       	ld	r18, Y
   19476:	39 81       	ldd	r19, Y+1	; 0x01
   19478:	4a 81       	ldd	r20, Y+2	; 0x02
   1947a:	5b 81       	ldd	r21, Y+3	; 0x03
   1947c:	ca 51       	subi	r28, 0x1A	; 26
   1947e:	d1 40       	sbci	r29, 0x01	; 1
   19480:	2a 0d       	add	r18, r10
   19482:	3b 1d       	adc	r19, r11
   19484:	4c 1d       	adc	r20, r12
   19486:	5d 1d       	adc	r21, r13
   19488:	ce 5d       	subi	r28, 0xDE	; 222
   1948a:	de 4f       	sbci	r29, 0xFE	; 254
   1948c:	28 83       	st	Y, r18
   1948e:	39 83       	std	Y+1, r19	; 0x01
   19490:	4a 83       	std	Y+2, r20	; 0x02
   19492:	5b 83       	std	Y+3, r21	; 0x03
   19494:	c2 52       	subi	r28, 0x22	; 34
   19496:	d1 40       	sbci	r29, 0x01	; 1
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19498:	ca 5d       	subi	r28, 0xDA	; 218
   1949a:	de 4f       	sbci	r29, 0xFE	; 254
   1949c:	88 81       	ld	r24, Y
   1949e:	99 81       	ldd	r25, Y+1	; 0x01
   194a0:	aa 81       	ldd	r26, Y+2	; 0x02
   194a2:	bb 81       	ldd	r27, Y+3	; 0x03
   194a4:	c6 52       	subi	r28, 0x26	; 38
   194a6:	d1 40       	sbci	r29, 0x01	; 1
   194a8:	a8 16       	cp	r10, r24
   194aa:	b9 06       	cpc	r11, r25
   194ac:	ca 06       	cpc	r12, r26
   194ae:	db 06       	cpc	r13, r27
   194b0:	0c f0       	brlt	.+2      	; 0x194b4 <lif_create_volume+0x3be>
   194b2:	58 c0       	rjmp	.+176    	; 0x19564 <lif_create_volume+0x46e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   194b4:	00 e0       	ldi	r16, 0x00	; 0
   194b6:	11 e0       	ldi	r17, 0x01	; 1
   194b8:	ca 5e       	subi	r28, 0xEA	; 234
   194ba:	de 4f       	sbci	r29, 0xFE	; 254
   194bc:	28 81       	ld	r18, Y
   194be:	39 81       	ldd	r19, Y+1	; 0x01
   194c0:	4a 81       	ldd	r20, Y+2	; 0x02
   194c2:	5b 81       	ldd	r21, Y+3	; 0x03
   194c4:	c6 51       	subi	r28, 0x16	; 22
   194c6:	d1 40       	sbci	r29, 0x01	; 1
   194c8:	be 01       	movw	r22, r28
   194ca:	6c 5e       	subi	r22, 0xEC	; 236
   194cc:	7f 4f       	sbci	r23, 0xFF	; 255
   194ce:	c7 01       	movw	r24, r14
   194d0:	0e 94 af bd 	call	0x17b5e	; 0x17b5e <lif_write>
   194d4:	09 2e       	mov	r0, r25
   194d6:	00 0c       	add	r0, r0
   194d8:	aa 0b       	sbc	r26, r26
   194da:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   194dc:	8f 3f       	cpi	r24, 0xFF	; 255
   194de:	91 05       	cpc	r25, r1
   194e0:	a1 05       	cpc	r26, r1
   194e2:	b1 05       	cpc	r27, r1
   194e4:	09 f0       	breq	.+2      	; 0x194e8 <lif_create_volume+0x3f2>
   194e6:	0c f4       	brge	.+2      	; 0x194ea <lif_create_volume+0x3f4>
   194e8:	db c0       	rjmp	.+438    	; 0x196a0 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   194ea:	ca 5e       	subi	r28, 0xEA	; 234
   194ec:	de 4f       	sbci	r29, 0xFE	; 254
   194ee:	28 81       	ld	r18, Y
   194f0:	39 81       	ldd	r19, Y+1	; 0x01
   194f2:	4a 81       	ldd	r20, Y+2	; 0x02
   194f4:	5b 81       	ldd	r21, Y+3	; 0x03
   194f6:	c6 51       	subi	r28, 0x16	; 22
   194f8:	d1 40       	sbci	r29, 0x01	; 1
   194fa:	28 0f       	add	r18, r24
   194fc:	39 1f       	adc	r19, r25
   194fe:	4a 1f       	adc	r20, r26
   19500:	5b 1f       	adc	r21, r27
   19502:	ca 5e       	subi	r28, 0xEA	; 234
   19504:	de 4f       	sbci	r29, 0xFE	; 254
   19506:	28 83       	st	Y, r18
   19508:	39 83       	std	Y+1, r19	; 0x01
   1950a:	4a 83       	std	Y+2, r20	; 0x02
   1950c:	5b 83       	std	Y+3, r21	; 0x03
   1950e:	c6 51       	subi	r28, 0x16	; 22
   19510:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   19512:	ce 5d       	subi	r28, 0xDE	; 222
   19514:	de 4f       	sbci	r29, 0xFE	; 254
   19516:	68 81       	ld	r22, Y
   19518:	79 81       	ldd	r23, Y+1	; 0x01
   1951a:	8a 81       	ldd	r24, Y+2	; 0x02
   1951c:	9b 81       	ldd	r25, Y+3	; 0x03
   1951e:	c2 52       	subi	r28, 0x22	; 34
   19520:	d1 40       	sbci	r29, 0x01	; 1
   19522:	a2 01       	movw	r20, r4
   19524:	91 01       	movw	r18, r2
   19526:	0e 94 8d e0 	call	0x1c11a	; 0x1c11a <__divmodsi4>
   1952a:	67 2b       	or	r22, r23
   1952c:	68 2b       	or	r22, r24
   1952e:	69 2b       	or	r22, r25
   19530:	99 f4       	brne	.+38     	; 0x19558 <lif_create_volume+0x462>
            printf("\tWrote: %ld\r", count);
   19532:	ce 5d       	subi	r28, 0xDE	; 222
   19534:	de 4f       	sbci	r29, 0xFE	; 254
   19536:	88 81       	ld	r24, Y
   19538:	99 81       	ldd	r25, Y+1	; 0x01
   1953a:	aa 81       	ldd	r26, Y+2	; 0x02
   1953c:	bb 81       	ldd	r27, Y+3	; 0x03
   1953e:	c2 52       	subi	r28, 0x22	; 34
   19540:	d1 40       	sbci	r29, 0x01	; 1
   19542:	ed b7       	in	r30, 0x3d	; 61
   19544:	fe b7       	in	r31, 0x3e	; 62
   19546:	84 83       	std	Z+4, r24	; 0x04
   19548:	95 83       	std	Z+5, r25	; 0x05
   1954a:	a6 83       	std	Z+6, r26	; 0x06
   1954c:	b7 83       	std	Z+7, r27	; 0x07
   1954e:	61 82       	std	Z+1, r6	; 0x01
   19550:	72 82       	std	Z+2, r7	; 0x02
   19552:	83 82       	std	Z+3, r8	; 0x03
   19554:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   19558:	ff ef       	ldi	r31, 0xFF	; 255
   1955a:	af 1a       	sub	r10, r31
   1955c:	bf 0a       	sbc	r11, r31
   1955e:	cf 0a       	sbc	r12, r31
   19560:	df 0a       	sbc	r13, r31
   19562:	86 cf       	rjmp	.-244    	; 0x19470 <lif_create_volume+0x37a>
            printf("\tWrote: %ld\r", count);
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   19564:	80 e0       	ldi	r24, 0x00	; 0
   19566:	91 e0       	ldi	r25, 0x01	; 1
   19568:	cc 5e       	subi	r28, 0xEC	; 236
   1956a:	de 4f       	sbci	r29, 0xFE	; 254
   1956c:	a8 81       	ld	r26, Y
   1956e:	b9 81       	ldd	r27, Y+1	; 0x01
   19570:	c4 51       	subi	r28, 0x14	; 20
   19572:	d1 40       	sbci	r29, 0x01	; 1
   19574:	fc 01       	movw	r30, r24
   19576:	1d 92       	st	X+, r1
   19578:	31 97       	sbiw	r30, 0x01	; 1
   1957a:	e9 f7       	brne	.-6      	; 0x19576 <lif_create_volume+0x480>
    for(i=0;i<filesectors;++i)
   1957c:	81 2c       	mov	r8, r1
   1957e:	91 2c       	mov	r9, r1
   19580:	54 01       	movw	r10, r8
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
   19582:	86 ee       	ldi	r24, 0xE6	; 230
   19584:	98 e3       	ldi	r25, 0x38	; 56
   19586:	9c 01       	movw	r18, r24
   19588:	40 e0       	ldi	r20, 0x00	; 0
   1958a:	c6 5e       	subi	r28, 0xE6	; 230
   1958c:	de 4f       	sbci	r29, 0xFE	; 254
   1958e:	28 83       	st	Y, r18
   19590:	39 83       	std	Y+1, r19	; 0x01
   19592:	4a 83       	std	Y+2, r20	; 0x02
   19594:	ca 51       	subi	r28, 0x1A	; 26
   19596:	d1 40       	sbci	r29, 0x01	; 1
   19598:	ce 5d       	subi	r28, 0xDE	; 222
   1959a:	de 4f       	sbci	r29, 0xFE	; 254
   1959c:	48 80       	ld	r4, Y
   1959e:	59 80       	ldd	r5, Y+1	; 0x01
   195a0:	6a 80       	ldd	r6, Y+2	; 0x02
   195a2:	7b 80       	ldd	r7, Y+3	; 0x03
   195a4:	c2 52       	subi	r28, 0x22	; 34
   195a6:	d1 40       	sbci	r29, 0x01	; 1
   195a8:	48 0c       	add	r4, r8
   195aa:	59 1c       	adc	r5, r9
   195ac:	6a 1c       	adc	r6, r10
   195ae:	7b 1c       	adc	r7, r11
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   195b0:	c2 5e       	subi	r28, 0xE2	; 226
   195b2:	de 4f       	sbci	r29, 0xFE	; 254
   195b4:	28 81       	ld	r18, Y
   195b6:	39 81       	ldd	r19, Y+1	; 0x01
   195b8:	4a 81       	ldd	r20, Y+2	; 0x02
   195ba:	5b 81       	ldd	r21, Y+3	; 0x03
   195bc:	ce 51       	subi	r28, 0x1E	; 30
   195be:	d1 40       	sbci	r29, 0x01	; 1
   195c0:	82 16       	cp	r8, r18
   195c2:	93 06       	cpc	r9, r19
   195c4:	a4 06       	cpc	r10, r20
   195c6:	b5 06       	cpc	r11, r21
   195c8:	0c f0       	brlt	.+2      	; 0x195cc <lif_create_volume+0x4d6>
   195ca:	53 c0       	rjmp	.+166    	; 0x19672 <lif_create_volume+0x57c>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   195cc:	00 e0       	ldi	r16, 0x00	; 0
   195ce:	11 e0       	ldi	r17, 0x01	; 1
   195d0:	ca 5e       	subi	r28, 0xEA	; 234
   195d2:	de 4f       	sbci	r29, 0xFE	; 254
   195d4:	28 81       	ld	r18, Y
   195d6:	39 81       	ldd	r19, Y+1	; 0x01
   195d8:	4a 81       	ldd	r20, Y+2	; 0x02
   195da:	5b 81       	ldd	r21, Y+3	; 0x03
   195dc:	c6 51       	subi	r28, 0x16	; 22
   195de:	d1 40       	sbci	r29, 0x01	; 1
   195e0:	be 01       	movw	r22, r28
   195e2:	6c 5e       	subi	r22, 0xEC	; 236
   195e4:	7f 4f       	sbci	r23, 0xFF	; 255
   195e6:	c7 01       	movw	r24, r14
   195e8:	0e 94 af bd 	call	0x17b5e	; 0x17b5e <lif_write>
   195ec:	09 2e       	mov	r0, r25
   195ee:	00 0c       	add	r0, r0
   195f0:	aa 0b       	sbc	r26, r26
   195f2:	bb 0b       	sbc	r27, r27
        if(size < LIF_SECTOR_SIZE)
   195f4:	8f 3f       	cpi	r24, 0xFF	; 255
   195f6:	91 05       	cpc	r25, r1
   195f8:	a1 05       	cpc	r26, r1
   195fa:	b1 05       	cpc	r27, r1
   195fc:	09 f0       	breq	.+2      	; 0x19600 <lif_create_volume+0x50a>
   195fe:	0c f4       	brge	.+2      	; 0x19602 <lif_create_volume+0x50c>
   19600:	4f c0       	rjmp	.+158    	; 0x196a0 <lif_create_volume+0x5aa>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   19602:	ca 5e       	subi	r28, 0xEA	; 234
   19604:	de 4f       	sbci	r29, 0xFE	; 254
   19606:	28 81       	ld	r18, Y
   19608:	39 81       	ldd	r19, Y+1	; 0x01
   1960a:	4a 81       	ldd	r20, Y+2	; 0x02
   1960c:	5b 81       	ldd	r21, Y+3	; 0x03
   1960e:	c6 51       	subi	r28, 0x16	; 22
   19610:	d1 40       	sbci	r29, 0x01	; 1
   19612:	28 0f       	add	r18, r24
   19614:	39 1f       	adc	r19, r25
   19616:	4a 1f       	adc	r20, r26
   19618:	5b 1f       	adc	r21, r27
   1961a:	ca 5e       	subi	r28, 0xEA	; 234
   1961c:	de 4f       	sbci	r29, 0xFE	; 254
   1961e:	28 83       	st	Y, r18
   19620:	39 83       	std	Y+1, r19	; 0x01
   19622:	4a 83       	std	Y+2, r20	; 0x02
   19624:	5b 83       	std	Y+3, r21	; 0x03
   19626:	c6 51       	subi	r28, 0x16	; 22
   19628:	d1 40       	sbci	r29, 0x01	; 1
        if((count % 100) == 0)
   1962a:	c3 01       	movw	r24, r6
   1962c:	b2 01       	movw	r22, r4
   1962e:	24 e6       	ldi	r18, 0x64	; 100
   19630:	30 e0       	ldi	r19, 0x00	; 0
   19632:	40 e0       	ldi	r20, 0x00	; 0
   19634:	50 e0       	ldi	r21, 0x00	; 0
   19636:	0e 94 8d e0 	call	0x1c11a	; 0x1c11a <__divmodsi4>
   1963a:	67 2b       	or	r22, r23
   1963c:	68 2b       	or	r22, r24
   1963e:	69 2b       	or	r22, r25
   19640:	91 f4       	brne	.+36     	; 0x19666 <lif_create_volume+0x570>
            printf("\tWrote: %ld\r", count);
   19642:	ed b7       	in	r30, 0x3d	; 61
   19644:	fe b7       	in	r31, 0x3e	; 62
   19646:	44 82       	std	Z+4, r4	; 0x04
   19648:	55 82       	std	Z+5, r5	; 0x05
   1964a:	66 82       	std	Z+6, r6	; 0x06
   1964c:	77 82       	std	Z+7, r7	; 0x07
   1964e:	c6 5e       	subi	r28, 0xE6	; 230
   19650:	de 4f       	sbci	r29, 0xFE	; 254
   19652:	28 81       	ld	r18, Y
   19654:	39 81       	ldd	r19, Y+1	; 0x01
   19656:	4a 81       	ldd	r20, Y+2	; 0x02
   19658:	ca 51       	subi	r28, 0x1A	; 26
   1965a:	d1 40       	sbci	r29, 0x01	; 1
   1965c:	21 83       	std	Z+1, r18	; 0x01
   1965e:	32 83       	std	Z+2, r19	; 0x02
   19660:	43 83       	std	Z+3, r20	; 0x03
   19662:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        ++count;
    }

// File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   19666:	ff ef       	ldi	r31, 0xFF	; 255
   19668:	8f 1a       	sub	r8, r31
   1966a:	9f 0a       	sbc	r9, r31
   1966c:	af 0a       	sbc	r10, r31
   1966e:	bf 0a       	sbc	r11, r31
   19670:	93 cf       	rjmp	.-218    	; 0x19598 <lif_create_volume+0x4a2>
        offset += size;
        if((count % 100) == 0)
            printf("\tWrote: %ld\r", count);
        ++count;
    }
    printf("\tWrote: %ld\n", count);
   19672:	ed b7       	in	r30, 0x3d	; 61
   19674:	fe b7       	in	r31, 0x3e	; 62
   19676:	44 82       	std	Z+4, r4	; 0x04
   19678:	55 82       	std	Z+5, r5	; 0x05
   1967a:	66 82       	std	Z+6, r6	; 0x06
   1967c:	77 82       	std	Z+7, r7	; 0x07
   1967e:	89 ed       	ldi	r24, 0xD9	; 217
   19680:	98 e3       	ldi	r25, 0x38	; 56
   19682:	a0 e0       	ldi	r26, 0x00	; 0
   19684:	81 83       	std	Z+1, r24	; 0x01
   19686:	92 83       	std	Z+2, r25	; 0x02
   19688:	a3 83       	std	Z+3, r26	; 0x03
   1968a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
// Directory index
    LIF->dirindex = -1;
   1968e:	8f ef       	ldi	r24, 0xFF	; 255
   19690:	9f ef       	ldi	r25, 0xFF	; 255
   19692:	f7 01       	movw	r30, r14
   19694:	91 a3       	std	Z+33, r25	; 0x21
    printf("\tWrote: %ld\n", count);

    lif_rewinddir(LIF);

// As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   19696:	80 a3       	std	Z+32, r24	; 0x20
   19698:	c7 01       	movw	r24, r14
   1969a:	38 d8       	rcall	.-3984   	; 0x1870c <lif_check_volume>
   1969c:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1969e:	19 f4       	brne	.+6      	; 0x196a6 <lif_create_volume+0x5b0>
   196a0:	c7 01       	movw	r24, r14
   196a2:	b8 da       	rcall	.-2704   	; 0x18c14 <lif_close_volume>
   196a4:	08 c0       	rjmp	.+16     	; 0x196b6 <lif_create_volume+0x5c0>
        lif_closedir(LIF);
        return(NULL);
    }

// Scan directory and verify values
    if( !lif_updatefree(LIF))
   196a6:	c7 01       	movw	r24, r14
   196a8:	1e dc       	rcall	.-1988   	; 0x18ee6 <lif_updatefree>
   196aa:	6c 01       	movw	r12, r24
   196ac:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   196ae:	31 f4       	brne	.+12     	; 0x196bc <lif_create_volume+0x5c6>
   196b0:	c7 01       	movw	r24, r14
   196b2:	b0 da       	rcall	.-2720   	; 0x18c14 <lif_close_volume>

// Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   196b4:	04 c0       	rjmp	.+8      	; 0x196be <lif_create_volume+0x5c8>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   196b6:	c1 2c       	mov	r12, r1
   196b8:	d1 2c       	mov	r13, r1
   196ba:	01 c0       	rjmp	.+2      	; 0x196be <lif_create_volume+0x5c8>
   196bc:	67 01       	movw	r12, r14
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   196be:	c6 01       	movw	r24, r12
   196c0:	c7 5d       	subi	r28, 0xD7	; 215
   196c2:	de 4f       	sbci	r29, 0xFE	; 254
   196c4:	e2 e1       	ldi	r30, 0x12	; 18
   196c6:	0c 94 f4 e0 	jmp	0x1c1e8	; 0x1c1e8 <__epilogue_restores__>

000196ca <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   196ca:	ad e1       	ldi	r26, 0x1D	; 29
   196cc:	b0 e0       	ldi	r27, 0x00	; 0
   196ce:	eb e6       	ldi	r30, 0x6B	; 107
   196d0:	fb ec       	ldi	r31, 0xCB	; 203
   196d2:	0c 94 d8 e0 	jmp	0x1c1b0	; 0x1c1b0 <__prologue_saves__>
   196d6:	9d 8f       	std	Y+29, r25	; 0x1d
   196d8:	8c 8f       	std	Y+28, r24	; 0x1c
   196da:	4a 01       	movw	r8, r20
   196dc:	5b 01       	movw	r10, r22

// Directory index
    index = 0;

// Start of free space
    start = LIF->filestart;
   196de:	fc 01       	movw	r30, r24
   196e0:	c4 84       	ldd	r12, Z+12	; 0x0c
   196e2:	d5 84       	ldd	r13, Z+13	; 0x0d
   196e4:	e6 84       	ldd	r14, Z+14	; 0x0e
   196e6:	f7 84       	ldd	r15, Z+15	; 0x0f

// Update all file information
    if(lif_updatefree(LIF) == NULL)
   196e8:	fe db       	rcall	.-2052   	; 0x18ee6 <lif_updatefree>
   196ea:	ec 8d       	ldd	r30, Y+28	; 0x1c
   196ec:	fd 8d       	ldd	r31, Y+29	; 0x1d
   196ee:	40 8d       	ldd	r20, Z+24	; 0x18
   196f0:	51 8d       	ldd	r21, Z+25	; 0x19
   196f2:	62 8d       	ldd	r22, Z+26	; 0x1a
   196f4:	73 8d       	ldd	r23, Z+27	; 0x1b
   196f6:	89 2b       	or	r24, r25
   196f8:	99 f4       	brne	.+38     	; 0x19720 <lif_newdir+0x56>
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   196fa:	ed b7       	in	r30, 0x3d	; 61
   196fc:	fe b7       	in	r31, 0x3e	; 62
   196fe:	80 86       	std	Z+8, r8	; 0x08
   19700:	91 86       	std	Z+9, r9	; 0x09
   19702:	a2 86       	std	Z+10, r10	; 0x0a
   19704:	b3 86       	std	Z+11, r11	; 0x0b
   19706:	44 83       	std	Z+4, r20	; 0x04
   19708:	55 83       	std	Z+5, r21	; 0x05
   1970a:	66 83       	std	Z+6, r22	; 0x06
   1970c:	77 83       	std	Z+7, r23	; 0x07
   1970e:	8a ef       	ldi	r24, 0xFA	; 250
   19710:	97 e3       	ldi	r25, 0x37	; 55
   19712:	a0 e0       	ldi	r26, 0x00	; 0
   19714:	81 83       	std	Z+1, r24	; 0x01
   19716:	92 83       	std	Z+2, r25	; 0x02
   19718:	a3 83       	std	Z+3, r26	; 0x03
   1971a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1971e:	2f c1       	rjmp	.+606    	; 0x1997e <lif_newdir+0x2b4>
        return(-1);
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
   19720:	48 15       	cp	r20, r8
   19722:	59 05       	cpc	r21, r9
   19724:	6a 05       	cpc	r22, r10
   19726:	7b 05       	cpc	r23, r11
   19728:	c4 f0       	brlt	.+48     	; 0x1975a <lif_newdir+0x90>
   1972a:	44 24       	eor	r4, r4
   1972c:	43 94       	inc	r4
   1972e:	51 2c       	mov	r5, r1
   19730:	61 2c       	mov	r6, r1
   19732:	71 2c       	mov	r7, r1
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   19734:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19736:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19738:	86 5a       	subi	r24, 0xA6	; 166
   1973a:	9f 4f       	sbci	r25, 0xFF	; 255
   1973c:	9d 8b       	std	Y+21, r25	; 0x15
   1973e:	8c 8b       	std	Y+20, r24	; 0x14
   19740:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19742:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19744:	e4 5a       	subi	r30, 0xA4	; 164
   19746:	ff 4f       	sbci	r31, 0xFF	; 255
   19748:	fb 8b       	std	Y+19, r31	; 0x13
   1974a:	ea 8b       	std	Y+18, r30	; 0x12
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1974c:	8c 8d       	ldd	r24, Y+28	; 0x1c
   1974e:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19750:	80 5a       	subi	r24, 0xA0	; 160
   19752:	9f 4f       	sbci	r25, 0xFF	; 255
   19754:	9f 8b       	std	Y+23, r25	; 0x17
   19756:	8e 8b       	std	Y+22, r24	; 0x16
   19758:	21 c0       	rjmp	.+66     	; 0x1979c <lif_newdir+0xd2>
    }

// Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   1975a:	ed b7       	in	r30, 0x3d	; 61
   1975c:	fe b7       	in	r31, 0x3e	; 62
   1975e:	44 83       	std	Z+4, r20	; 0x04
   19760:	55 83       	std	Z+5, r21	; 0x05
   19762:	66 83       	std	Z+6, r22	; 0x06
   19764:	77 83       	std	Z+7, r23	; 0x07
   19766:	81 ed       	ldi	r24, 0xD1	; 209
   19768:	97 e3       	ldi	r25, 0x37	; 55
   1976a:	a0 e0       	ldi	r26, 0x00	; 0
   1976c:	81 83       	std	Z+1, r24	; 0x01
   1976e:	92 83       	std	Z+2, r25	; 0x02
   19770:	a3 83       	std	Z+3, r26	; 0x03
   19772:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   19776:	03 c1       	rjmp	.+518    	; 0x1997e <lif_newdir+0x2b4>
#endif
            break;
        }

// We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   19778:	ec 89       	ldd	r30, Y+20	; 0x14
   1977a:	fd 89       	ldd	r31, Y+21	; 0x15
   1977c:	80 81       	ld	r24, Z
   1977e:	91 81       	ldd	r25, Z+1	; 0x01
   19780:	8f 3f       	cpi	r24, 0xFF	; 255
   19782:	ff ef       	ldi	r31, 0xFF	; 255
   19784:	9f 07       	cpc	r25, r31
   19786:	a1 f0       	breq	.+40     	; 0x197b0 <lif_newdir+0xe6>
            }
            return(index);
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
   19788:	89 2b       	or	r24, r25
   1978a:	09 f0       	breq	.+2      	; 0x1978e <lif_newdir+0xc4>
   1978c:	ce c0       	rjmp	.+412    	; 0x1992a <lif_newdir+0x260>
        {
            if(freestate == 0)
   1978e:	61 14       	cp	r6, r1
   19790:	71 04       	cpc	r7, r1
   19792:	09 f4       	brne	.+2      	; 0x19796 <lif_newdir+0xcc>
   19794:	c1 c0       	rjmp	.+386    	; 0x19918 <lif_newdir+0x24e>
   19796:	ff ef       	ldi	r31, 0xFF	; 255
   19798:	4f 1a       	sub	r4, r31
   1979a:	5f 0a       	sbc	r5, r31
   1979c:	82 01       	movw	r16, r4
   1979e:	01 50       	subi	r16, 0x01	; 1
   197a0:	11 09       	sbc	r17, r1

// Update free space and EOF pointers
    while(1)
    {
// Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   197a2:	b8 01       	movw	r22, r16
   197a4:	8c 8d       	ldd	r24, Y+28	; 0x1c
   197a6:	9d 8d       	ldd	r25, Y+29	; 0x1d
   197a8:	c3 da       	rcall	.-2682   	; 0x18d30 <lif_readdirindex>
   197aa:	89 2b       	or	r24, r25
   197ac:	29 f7       	brne	.-54     	; 0x19778 <lif_newdir+0xae>
   197ae:	e7 c0       	rjmp	.+462    	; 0x1997e <lif_newdir+0x2b4>
        if(LIF->DIR.FileType == 0xffff)
        {

// Was enough free space found in purged area ?
// Do NOT need to update EOF!
            if(freestate == 2)
   197b0:	22 e0       	ldi	r18, 0x02	; 2
   197b2:	62 16       	cp	r6, r18
   197b4:	71 04       	cpc	r7, r1
   197b6:	09 f0       	breq	.+2      	; 0x197ba <lif_newdir+0xf0>
   197b8:	46 c0       	rjmp	.+140    	; 0x19846 <lif_newdir+0x17c>
            {
// Update free pace for new file
                lif_dir_clear(LIF);
   197ba:	8c 8d       	ldd	r24, Y+28	; 0x1c
   197bc:	9d 8d       	ldd	r25, Y+29	; 0x1d
   197be:	0e 94 b1 c1 	call	0x18362	; 0x18362 <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   197c2:	ec 8d       	ldd	r30, Y+28	; 0x1c
   197c4:	fd 8d       	ldd	r31, Y+29	; 0x1d
   197c6:	e4 5a       	subi	r30, 0xA4	; 164
   197c8:	ff 4f       	sbci	r31, 0xFF	; 255
   197ca:	88 8d       	ldd	r24, Y+24	; 0x18
   197cc:	80 83       	st	Z, r24
   197ce:	99 8d       	ldd	r25, Y+25	; 0x19
   197d0:	91 83       	std	Z+1, r25	; 0x01
   197d2:	2a 8d       	ldd	r18, Y+26	; 0x1a
   197d4:	22 83       	std	Z+2, r18	; 0x02
   197d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
   197d8:	83 83       	std	Z+3, r24	; 0x03
                LIF->DIR.FileSectors = sectors;
   197da:	ec 8d       	ldd	r30, Y+28	; 0x1c
   197dc:	fd 8d       	ldd	r31, Y+29	; 0x1d
   197de:	e0 5a       	subi	r30, 0xA0	; 160
   197e0:	ff 4f       	sbci	r31, 0xFF	; 255
   197e2:	80 82       	st	Z, r8
   197e4:	91 82       	std	Z+1, r9	; 0x01
   197e6:	a2 82       	std	Z+2, r10	; 0x02
   197e8:	b3 82       	std	Z+3, r11	; 0x03
                LIF->usedsectors += sectors;
   197ea:	ec 8d       	ldd	r30, Y+28	; 0x1c
   197ec:	fd 8d       	ldd	r31, Y+29	; 0x1d
   197ee:	84 89       	ldd	r24, Z+20	; 0x14
   197f0:	95 89       	ldd	r25, Z+21	; 0x15
   197f2:	a6 89       	ldd	r26, Z+22	; 0x16
   197f4:	b7 89       	ldd	r27, Z+23	; 0x17
   197f6:	88 0d       	add	r24, r8
   197f8:	99 1d       	adc	r25, r9
   197fa:	aa 1d       	adc	r26, r10
   197fc:	bb 1d       	adc	r27, r11
   197fe:	84 8b       	std	Z+20, r24	; 0x14
   19800:	95 8b       	std	Z+21, r25	; 0x15
   19802:	a6 8b       	std	Z+22, r26	; 0x16
   19804:	b7 8b       	std	Z+23, r27	; 0x17
                LIF->freesectors -= sectors;
   19806:	80 8d       	ldd	r24, Z+24	; 0x18
   19808:	91 8d       	ldd	r25, Z+25	; 0x19
   1980a:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1980c:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1980e:	88 19       	sub	r24, r8
   19810:	99 09       	sbc	r25, r9
   19812:	aa 09       	sbc	r26, r10
   19814:	bb 09       	sbc	r27, r11
   19816:	80 8f       	std	Z+24, r24	; 0x18
   19818:	91 8f       	std	Z+25, r25	; 0x19
   1981a:	a2 8f       	std	Z+26, r26	; 0x1a
   1981c:	b3 8f       	std	Z+27, r27	; 0x1b
                LIF->files++;
   1981e:	84 8d       	ldd	r24, Z+28	; 0x1c
   19820:	95 8d       	ldd	r25, Z+29	; 0x1d
   19822:	01 96       	adiw	r24, 0x01	; 1
   19824:	95 8f       	std	Z+29, r25	; 0x1d
   19826:	84 8f       	std	Z+28, r24	; 0x1c
                LIF->purged--;
   19828:	86 8d       	ldd	r24, Z+30	; 0x1e
   1982a:	97 8d       	ldd	r25, Z+31	; 0x1f
   1982c:	01 97       	sbiw	r24, 0x01	; 1
   1982e:	97 8f       	std	Z+31, r25	; 0x1f
   19830:	86 8f       	std	Z+30, r24	; 0x1e
                LIF->dirindex = freeindex;
   19832:	20 a2       	std	Z+32, r2	; 0x20
   19834:	31 a2       	std	Z+33, r3	; 0x21
// Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   19836:	b1 01       	movw	r22, r2
   19838:	cf 01       	movw	r24, r30
   1983a:	e1 da       	rcall	.-2622   	; 0x18dfe <lif_writedirindex>
   1983c:	89 2b       	or	r24, r25
   1983e:	09 f4       	brne	.+2      	; 0x19842 <lif_newdir+0x178>
   19840:	9e c0       	rjmp	.+316    	; 0x1997e <lif_newdir+0x2b4>
   19842:	c1 01       	movw	r24, r2
   19844:	9e c0       	rjmp	.+316    	; 0x19982 <lif_newdir+0x2b8>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & LIF_DEBUG)
   19846:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1984a:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1984e:	92 ff       	sbrs	r25, 2
   19850:	1e c0       	rjmp	.+60     	; 0x1988e <lif_newdir+0x1c4>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n",
   19852:	ec 8d       	ldd	r30, Y+28	; 0x1c
   19854:	fd 8d       	ldd	r31, Y+29	; 0x1d
   19856:	80 8d       	ldd	r24, Z+24	; 0x18
   19858:	91 8d       	ldd	r25, Z+25	; 0x19
   1985a:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1985c:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1985e:	ed b7       	in	r30, 0x3d	; 61
   19860:	fe b7       	in	r31, 0x3e	; 62
   19862:	86 87       	std	Z+14, r24	; 0x0e
   19864:	97 87       	std	Z+15, r25	; 0x0f
   19866:	a0 8b       	std	Z+16, r26	; 0x10
   19868:	b1 8b       	std	Z+17, r27	; 0x11
   1986a:	82 86       	std	Z+10, r8	; 0x0a
   1986c:	93 86       	std	Z+11, r9	; 0x0b
   1986e:	a4 86       	std	Z+12, r10	; 0x0c
   19870:	b5 86       	std	Z+13, r11	; 0x0d
   19872:	c6 82       	std	Z+6, r12	; 0x06
   19874:	d7 82       	std	Z+7, r13	; 0x07
   19876:	e0 86       	std	Z+8, r14	; 0x08
   19878:	f1 86       	std	Z+9, r15	; 0x09
   1987a:	15 83       	std	Z+5, r17	; 0x05
   1987c:	04 83       	std	Z+4, r16	; 0x04
   1987e:	80 e8       	ldi	r24, 0x80	; 128
   19880:	97 e3       	ldi	r25, 0x37	; 55
   19882:	a0 e0       	ldi	r26, 0x00	; 0
   19884:	81 83       	std	Z+1, r24	; 0x01
   19886:	92 83       	std	Z+2, r25	; 0x02
   19888:	a3 83       	std	Z+3, r26	; 0x03
   1988a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

// Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   1988e:	b8 01       	movw	r22, r16
   19890:	6f 5f       	subi	r22, 0xFF	; 255
   19892:	7f 4f       	sbci	r23, 0xFF	; 255
   19894:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19896:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19898:	0e db       	rcall	.-2532   	; 0x18eb6 <lif_writedirEOF>
   1989a:	89 2b       	or	r24, r25
   1989c:	09 f4       	brne	.+2      	; 0x198a0 <lif_newdir+0x1d6>
   1989e:	6f c0       	rjmp	.+222    	; 0x1997e <lif_newdir+0x2b4>
            {
                break;
            }

            lif_dir_clear(LIF);
   198a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
   198a2:	9d 8d       	ldd	r25, Y+29	; 0x1d
   198a4:	0e 94 b1 c1 	call	0x18362	; 0x18362 <lif_dir_clear>
            LIF->DIR.FileStartSector = start;
   198a8:	ec 8d       	ldd	r30, Y+28	; 0x1c
   198aa:	fd 8d       	ldd	r31, Y+29	; 0x1d
   198ac:	e4 5a       	subi	r30, 0xA4	; 164
   198ae:	ff 4f       	sbci	r31, 0xFF	; 255
   198b0:	c0 82       	st	Z, r12
   198b2:	d1 82       	std	Z+1, r13	; 0x01
   198b4:	e2 82       	std	Z+2, r14	; 0x02
   198b6:	f3 82       	std	Z+3, r15	; 0x03
            LIF->DIR.FileSectors = sectors;
   198b8:	ec 8d       	ldd	r30, Y+28	; 0x1c
   198ba:	fd 8d       	ldd	r31, Y+29	; 0x1d
   198bc:	e0 5a       	subi	r30, 0xA0	; 160
   198be:	ff 4f       	sbci	r31, 0xFF	; 255
   198c0:	80 82       	st	Z, r8
   198c2:	91 82       	std	Z+1, r9	; 0x01
   198c4:	a2 82       	std	Z+2, r10	; 0x02
   198c6:	b3 82       	std	Z+3, r11	; 0x03
            LIF->usedsectors += sectors;
   198c8:	ec 8d       	ldd	r30, Y+28	; 0x1c
   198ca:	fd 8d       	ldd	r31, Y+29	; 0x1d
   198cc:	84 89       	ldd	r24, Z+20	; 0x14
   198ce:	95 89       	ldd	r25, Z+21	; 0x15
   198d0:	a6 89       	ldd	r26, Z+22	; 0x16
   198d2:	b7 89       	ldd	r27, Z+23	; 0x17
   198d4:	88 0d       	add	r24, r8
   198d6:	99 1d       	adc	r25, r9
   198d8:	aa 1d       	adc	r26, r10
   198da:	bb 1d       	adc	r27, r11
   198dc:	84 8b       	std	Z+20, r24	; 0x14
   198de:	95 8b       	std	Z+21, r25	; 0x15
   198e0:	a6 8b       	std	Z+22, r26	; 0x16
   198e2:	b7 8b       	std	Z+23, r27	; 0x17
            LIF->freesectors -= sectors;
   198e4:	80 8d       	ldd	r24, Z+24	; 0x18
   198e6:	91 8d       	ldd	r25, Z+25	; 0x19
   198e8:	a2 8d       	ldd	r26, Z+26	; 0x1a
   198ea:	b3 8d       	ldd	r27, Z+27	; 0x1b
   198ec:	88 19       	sub	r24, r8
   198ee:	99 09       	sbc	r25, r9
   198f0:	aa 09       	sbc	r26, r10
   198f2:	bb 09       	sbc	r27, r11
   198f4:	80 8f       	std	Z+24, r24	; 0x18
   198f6:	91 8f       	std	Z+25, r25	; 0x19
   198f8:	a2 8f       	std	Z+26, r26	; 0x1a
   198fa:	b3 8f       	std	Z+27, r27	; 0x1b
            LIF->files++;
   198fc:	84 8d       	ldd	r24, Z+28	; 0x1c
   198fe:	95 8d       	ldd	r25, Z+29	; 0x1d
   19900:	01 96       	adiw	r24, 0x01	; 1
   19902:	95 8f       	std	Z+29, r25	; 0x1d
   19904:	84 8f       	std	Z+28, r24	; 0x1c
            LIF->dirindex = index;
   19906:	11 a3       	std	Z+33, r17	; 0x21
// Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   19908:	00 a3       	std	Z+32, r16	; 0x20
   1990a:	b8 01       	movw	r22, r16
   1990c:	cf 01       	movw	r24, r30
   1990e:	77 da       	rcall	.-2834   	; 0x18dfe <lif_writedirindex>
   19910:	89 2b       	or	r24, r25
   19912:	a9 f1       	breq	.+106    	; 0x1997e <lif_newdir+0x2b4>
   19914:	c8 01       	movw	r24, r16
   19916:	35 c0       	rjmp	.+106    	; 0x19982 <lif_newdir+0x2b8>
        }

// PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   19918:	c8 8e       	std	Y+24, r12	; 0x18
   1991a:	d9 8e       	std	Y+25, r13	; 0x19
   1991c:	ea 8e       	std	Y+26, r14	; 0x1a
   1991e:	fb 8e       	std	Y+27, r15	; 0x1b
   19920:	18 01       	movw	r2, r16
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   19922:	66 24       	eor	r6, r6
   19924:	63 94       	inc	r6
   19926:	71 2c       	mov	r7, r1
            }
            ++index;
            continue;
   19928:	36 cf       	rjmp	.-404    	; 0x19796 <lif_newdir+0xcc>
        }

// VALID record
        if(freestate == 1)
   1992a:	f1 e0       	ldi	r31, 0x01	; 1
   1992c:	6f 16       	cp	r6, r31
   1992e:	71 04       	cpc	r7, r1
   19930:	a9 f4       	brne	.+42     	; 0x1995c <lif_newdir+0x292>
        {
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   19932:	ea 89       	ldd	r30, Y+18	; 0x12
   19934:	fb 89       	ldd	r31, Y+19	; 0x13
   19936:	80 81       	ld	r24, Z
   19938:	91 81       	ldd	r25, Z+1	; 0x01
   1993a:	a2 81       	ldd	r26, Z+2	; 0x02
   1993c:	b3 81       	ldd	r27, Z+3	; 0x03
   1993e:	8c 19       	sub	r24, r12
   19940:	9d 09       	sbc	r25, r13
   19942:	ae 09       	sbc	r26, r14
   19944:	bf 09       	sbc	r27, r15
   19946:	88 15       	cp	r24, r8
   19948:	99 05       	cpc	r25, r9
   1994a:	aa 05       	cpc	r26, r10
   1994c:	bb 05       	cpc	r27, r11
   1994e:	1c f4       	brge	.+6      	; 0x19956 <lif_newdir+0x28c>
                freestate = 2;                    // Found free space in purged record
            else
                freestate = 0;                    // Try again
   19950:	61 2c       	mov	r6, r1
   19952:	71 2c       	mov	r7, r1
   19954:	03 c0       	rjmp	.+6      	; 0x1995c <lif_newdir+0x292>
            long freesectors;
// Compute sectors of purged space between valid records
// Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;                    // Found free space in purged record
   19956:	82 e0       	ldi	r24, 0x02	; 2
   19958:	68 2e       	mov	r6, r24
   1995a:	71 2c       	mov	r7, r1
                freestate = 0;                    // Try again
        }

// Computed start of next record
// Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1995c:	ea 89       	ldd	r30, Y+18	; 0x12
   1995e:	fb 89       	ldd	r31, Y+19	; 0x13
   19960:	c0 80       	ld	r12, Z
   19962:	d1 80       	ldd	r13, Z+1	; 0x01
   19964:	e2 80       	ldd	r14, Z+2	; 0x02
   19966:	f3 80       	ldd	r15, Z+3	; 0x03
   19968:	ee 89       	ldd	r30, Y+22	; 0x16
   1996a:	ff 89       	ldd	r31, Y+23	; 0x17
   1996c:	80 81       	ld	r24, Z
   1996e:	91 81       	ldd	r25, Z+1	; 0x01
   19970:	a2 81       	ldd	r26, Z+2	; 0x02
   19972:	b3 81       	ldd	r27, Z+3	; 0x03
   19974:	c8 0e       	add	r12, r24
   19976:	d9 1e       	adc	r13, r25
   19978:	ea 1e       	adc	r14, r26
   1997a:	fb 1e       	adc	r15, r27
   1997c:	0c cf       	rjmp	.-488    	; 0x19796 <lif_newdir+0xcc>
        ++index;
    }
// ERROR
    return(-1);
   1997e:	8f ef       	ldi	r24, 0xFF	; 255
   19980:	9f ef       	ldi	r25, 0xFF	; 255
}
   19982:	6d 96       	adiw	r28, 0x1d	; 29
   19984:	e2 e1       	ldi	r30, 0x12	; 18
   19986:	0c 94 f4 e0 	jmp	0x1c1e8	; 0x1c1e8 <__epilogue_restores__>

0001998a <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   1998a:	a9 e3       	ldi	r26, 0x39	; 57
   1998c:	b1 e0       	ldi	r27, 0x01	; 1
   1998e:	eb ec       	ldi	r30, 0xCB	; 203
   19990:	fc ec       	ldi	r31, 0xCC	; 204
   19992:	0c 94 de e0 	jmp	0x1c1bc	; 0x1c1bc <__prologue_saves__+0xc>
   19996:	6c 01       	movw	r12, r24
   19998:	8b 01       	movw	r16, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];

    sp = lif_stat(name, (stat_t *)&sb);
   1999a:	be 01       	movw	r22, r28
   1999c:	66 5f       	subi	r22, 0xF6	; 246
   1999e:	7e 4f       	sbci	r23, 0xFE	; 254
   199a0:	0e 94 04 bd 	call	0x17a08	; 0x17a08 <lif_stat>
   199a4:	5c 01       	movw	r10, r24
    if(sp == NULL)
   199a6:	00 97       	sbiw	r24, 0x00	; 0
   199a8:	f9 f0       	breq	.+62     	; 0x199e8 <lif_open_volume+0x5e>
        return(NULL);

// To read LIF volume we must have at minimum two sectors
// volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   199aa:	fc 01       	movw	r30, r24
   199ac:	80 8d       	ldd	r24, Z+24	; 0x18
   199ae:	91 8d       	ldd	r25, Z+25	; 0x19
   199b0:	a2 8d       	ldd	r26, Z+26	; 0x1a
   199b2:	b3 8d       	ldd	r27, Z+27	; 0x1b
   199b4:	81 15       	cp	r24, r1
   199b6:	f2 e0       	ldi	r31, 0x02	; 2
   199b8:	9f 07       	cpc	r25, r31
   199ba:	a1 05       	cpc	r26, r1
   199bc:	b1 05       	cpc	r27, r1
   199be:	b8 f4       	brcc	.+46     	; 0x199ee <lif_open_volume+0x64>
    {
        if(debuglevel & GPIB_PPR)
   199c0:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   199c4:	21 ff       	sbrs	r18, 1
   199c6:	10 c0       	rjmp	.+32     	; 0x199e8 <lif_open_volume+0x5e>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   199c8:	ed b7       	in	r30, 0x3d	; 61
   199ca:	fe b7       	in	r31, 0x3e	; 62
   199cc:	86 83       	std	Z+6, r24	; 0x06
   199ce:	97 83       	std	Z+7, r25	; 0x07
   199d0:	a0 87       	std	Z+8, r26	; 0x08
   199d2:	b1 87       	std	Z+9, r27	; 0x09
   199d4:	d5 82       	std	Z+5, r13	; 0x05
   199d6:	c4 82       	std	Z+4, r12	; 0x04
   199d8:	81 e4       	ldi	r24, 0x41	; 65
   199da:	97 e3       	ldi	r25, 0x37	; 55
   199dc:	a0 e0       	ldi	r26, 0x00	; 0
   199de:	81 83       	std	Z+1, r24	; 0x01
   199e0:	92 83       	std	Z+2, r25	; 0x02
   199e2:	a3 83       	std	Z+3, r26	; 0x03
   199e4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        return(NULL);
   199e8:	00 e0       	ldi	r16, 0x00	; 0
   199ea:	10 e0       	ldi	r17, 0x00	; 0
   199ec:	c2 c0       	rjmp	.+388    	; 0x19b72 <lif_open_volume+0x1e8>
    }

// Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   199ee:	64 e7       	ldi	r22, 0x74	; 116
   199f0:	70 e0       	ldi	r23, 0x00	; 0
   199f2:	80 e0       	ldi	r24, 0x00	; 0
   199f4:	90 e0       	ldi	r25, 0x00	; 0
   199f6:	0e 94 70 bc 	call	0x178e0	; 0x178e0 <lif_calloc>
   199fa:	7c 01       	movw	r14, r24
    if(!LIF)
   199fc:	89 2b       	or	r24, r25
   199fe:	a1 f3       	breq	.-24     	; 0x199e8 <lif_open_volume+0x5e>
        return(NULL);

    LIF->name = lif_stralloc(name);
   19a00:	c6 01       	movw	r24, r12
   19a02:	0e 94 bb bc 	call	0x17976	; 0x17976 <lif_stralloc>
   19a06:	f7 01       	movw	r30, r14
   19a08:	91 83       	std	Z+1, r25	; 0x01
   19a0a:	80 83       	st	Z, r24
    if(!LIF->name)
   19a0c:	00 97       	sbiw	r24, 0x00	; 0
   19a0e:	09 f4       	brne	.+2      	; 0x19a12 <lif_open_volume+0x88>
   19a10:	5a c0       	rjmp	.+180    	; 0x19ac6 <lif_open_volume+0x13c>
    {
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
   19a12:	f5 01       	movw	r30, r10
   19a14:	80 8c       	ldd	r8, Z+24	; 0x18
   19a16:	91 8c       	ldd	r9, Z+25	; 0x19
   19a18:	a2 8c       	ldd	r10, Z+26	; 0x1a
   19a1a:	b3 8c       	ldd	r11, Z+27	; 0x1b
   19a1c:	f7 01       	movw	r30, r14
   19a1e:	80 86       	std	Z+8, r8	; 0x08
   19a20:	91 86       	std	Z+9, r9	; 0x09
   19a22:	a2 86       	std	Z+10, r10	; 0x0a
   19a24:	b3 86       	std	Z+11, r11	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19a26:	77 27       	eor	r23, r23
   19a28:	6b 2d       	mov	r22, r11
   19a2a:	5a 2d       	mov	r21, r10
   19a2c:	49 2d       	mov	r20, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19a2e:	88 20       	and	r8, r8
   19a30:	21 f0       	breq	.+8      	; 0x19a3a <lif_open_volume+0xb0>
        ++sectors;
   19a32:	4f 5f       	subi	r20, 0xFF	; 255
   19a34:	5f 4f       	sbci	r21, 0xFF	; 255
   19a36:	6f 4f       	sbci	r22, 0xFF	; 255
   19a38:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }

    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   19a3a:	f7 01       	movw	r30, r14
   19a3c:	44 83       	std	Z+4, r20	; 0x04
   19a3e:	55 83       	std	Z+5, r21	; 0x05
   19a40:	66 83       	std	Z+6, r22	; 0x06
   19a42:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   19a44:	b8 01       	movw	r22, r16
   19a46:	0e 94 da bc 	call	0x179b4	; 0x179b4 <lif_open>
   19a4a:	f7 01       	movw	r30, r14
   19a4c:	93 83       	std	Z+3, r25	; 0x03
   19a4e:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   19a50:	89 2b       	or	r24, r25
   19a52:	c9 f1       	breq	.+114    	; 0x19ac6 <lif_open_volume+0x13c>
        lif_closedir(LIF);
        return(NULL);
    }

// Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   19a54:	00 e0       	ldi	r16, 0x00	; 0
   19a56:	11 e0       	ldi	r17, 0x01	; 1
   19a58:	20 e0       	ldi	r18, 0x00	; 0
   19a5a:	30 e0       	ldi	r19, 0x00	; 0
   19a5c:	a9 01       	movw	r20, r18
   19a5e:	be 01       	movw	r22, r28
   19a60:	66 5f       	subi	r22, 0xF6	; 246
   19a62:	7f 4f       	sbci	r23, 0xFF	; 255
   19a64:	c7 01       	movw	r24, r14
   19a66:	0e 94 5e bd 	call	0x17abc	; 0x17abc <lif_read>
   19a6a:	6f 3f       	cpi	r22, 0xFF	; 255
   19a6c:	71 05       	cpc	r23, r1
   19a6e:	81 05       	cpc	r24, r1
   19a70:	91 05       	cpc	r25, r1
   19a72:	09 f0       	breq	.+2      	; 0x19a76 <lif_open_volume+0xec>
   19a74:	5c f4       	brge	.+22     	; 0x19a8c <lif_open_volume+0x102>
    {
        if(debuglevel & GPIB_PPR)
   19a76:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19a7a:	81 ff       	sbrs	r24, 1
   19a7c:	24 c0       	rjmp	.+72     	; 0x19ac6 <lif_open_volume+0x13c>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   19a7e:	ed b7       	in	r30, 0x3d	; 61
   19a80:	fe b7       	in	r31, 0x3e	; 62
   19a82:	d5 82       	std	Z+5, r13	; 0x05
   19a84:	c4 82       	std	Z+4, r12	; 0x04
   19a86:	8b e0       	ldi	r24, 0x0B	; 11
   19a88:	97 e3       	ldi	r25, 0x37	; 55
   19a8a:	17 c0       	rjmp	.+46     	; 0x19aba <lif_open_volume+0x130>
        lif_closedir(LIF);
        return(NULL);
    }

// Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   19a8c:	b7 01       	movw	r22, r14
   19a8e:	ce 01       	movw	r24, r28
   19a90:	0a 96       	adiw	r24, 0x0a	; 10
   19a92:	0e 94 7a bf 	call	0x17ef4	; 0x17ef4 <lif_str2vol>

// Validate basic Volume headers
    if( !lif_check_volume(LIF) )
   19a96:	c7 01       	movw	r24, r14
   19a98:	0e 94 86 c3 	call	0x1870c	; 0x1870c <lif_check_volume>
   19a9c:	89 2b       	or	r24, r25
   19a9e:	b1 f4       	brne	.+44     	; 0x19acc <lif_open_volume+0x142>
    {
        if(debuglevel & GPIB_PPR)
   19aa0:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19aa4:	81 ff       	sbrs	r24, 1
   19aa6:	0f c0       	rjmp	.+30     	; 0x19ac6 <lif_open_volume+0x13c>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   19aa8:	f7 01       	movw	r30, r14
   19aaa:	80 81       	ld	r24, Z
   19aac:	91 81       	ldd	r25, Z+1	; 0x01
   19aae:	ed b7       	in	r30, 0x3d	; 61
   19ab0:	fe b7       	in	r31, 0x3e	; 62
   19ab2:	95 83       	std	Z+5, r25	; 0x05
   19ab4:	84 83       	std	Z+4, r24	; 0x04
   19ab6:	88 ed       	ldi	r24, 0xD8	; 216
   19ab8:	96 e3       	ldi	r25, 0x36	; 54
   19aba:	a0 e0       	ldi	r26, 0x00	; 0
   19abc:	81 83       	std	Z+1, r24	; 0x01
   19abe:	92 83       	std	Z+2, r25	; 0x02
   19ac0:	a3 83       	std	Z+3, r26	; 0x03
   19ac2:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19ac6:	c7 01       	movw	r24, r14
   19ac8:	a5 d8       	rcall	.-3766   	; 0x18c14 <lif_close_volume>
   19aca:	8e cf       	rjmp	.-228    	; 0x199e8 <lif_open_volume+0x5e>
        lif_closedir(LIF);
        return(NULL);
    }

// Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   19acc:	f7 01       	movw	r30, r14
   19ace:	45 a5       	ldd	r20, Z+45	; 0x2d
   19ad0:	56 a5       	ldd	r21, Z+46	; 0x2e
   19ad2:	67 a5       	ldd	r22, Z+47	; 0x2f
   19ad4:	70 a9       	ldd	r23, Z+48	; 0x30
   19ad6:	85 a9       	ldd	r24, Z+53	; 0x35
   19ad8:	96 a9       	ldd	r25, Z+54	; 0x36
   19ada:	a7 a9       	ldd	r26, Z+55	; 0x37
   19adc:	b0 ad       	ldd	r27, Z+56	; 0x38
   19ade:	48 0f       	add	r20, r24
   19ae0:	59 1f       	adc	r21, r25
   19ae2:	6a 1f       	adc	r22, r26
   19ae4:	7b 1f       	adc	r23, r27
   19ae6:	44 87       	std	Z+12, r20	; 0x0c
   19ae8:	55 87       	std	Z+13, r21	; 0x0d
   19aea:	66 87       	std	Z+14, r22	; 0x0e
   19aec:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   19aee:	84 81       	ldd	r24, Z+4	; 0x04
   19af0:	95 81       	ldd	r25, Z+5	; 0x05
   19af2:	a6 81       	ldd	r26, Z+6	; 0x06
   19af4:	b7 81       	ldd	r27, Z+7	; 0x07
   19af6:	84 1b       	sub	r24, r20
   19af8:	95 0b       	sbc	r25, r21
   19afa:	a6 0b       	sbc	r26, r22
   19afc:	b7 0b       	sbc	r27, r23
   19afe:	80 8b       	std	Z+16, r24	; 0x10
   19b00:	91 8b       	std	Z+17, r25	; 0x11
   19b02:	a2 8b       	std	Z+18, r26	; 0x12
   19b04:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   19b06:	80 8f       	std	Z+24, r24	; 0x18
   19b08:	91 8f       	std	Z+25, r25	; 0x19
   19b0a:	a2 8f       	std	Z+26, r26	; 0x1a
   19b0c:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   19b0e:	14 8a       	std	Z+20, r1	; 0x14
   19b10:	15 8a       	std	Z+21, r1	; 0x15
   19b12:	16 8a       	std	Z+22, r1	; 0x16
   19b14:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   19b16:	17 8e       	std	Z+31, r1	; 0x1f
   19b18:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   19b1a:	15 8e       	std	Z+29, r1	; 0x1d
   19b1c:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   19b1e:	11 a2       	std	Z+33, r1	; 0x21
   19b20:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   19b22:	13 a2       	std	Z+35, r1	; 0x23
   19b24:	12 a2       	std	Z+34, r1	; 0x22

    if( lif_updatefree(LIF) == NULL)
   19b26:	c7 01       	movw	r24, r14
   19b28:	de d9       	rcall	.-3140   	; 0x18ee6 <lif_updatefree>
   19b2a:	8c 01       	movw	r16, r24
   19b2c:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19b30:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19b34:	01 15       	cp	r16, r1
   19b36:	11 05       	cpc	r17, r1
   19b38:	a1 f4       	brne	.+40     	; 0x19b62 <lif_open_volume+0x1d8>
    {
        if(debuglevel & GPIB_PPR)
   19b3a:	81 ff       	sbrs	r24, 1
   19b3c:	0f c0       	rjmp	.+30     	; 0x19b5c <lif_open_volume+0x1d2>
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   19b3e:	f7 01       	movw	r30, r14
   19b40:	80 81       	ld	r24, Z
   19b42:	91 81       	ldd	r25, Z+1	; 0x01
   19b44:	ed b7       	in	r30, 0x3d	; 61
   19b46:	fe b7       	in	r31, 0x3e	; 62
   19b48:	95 83       	std	Z+5, r25	; 0x05
   19b4a:	84 83       	std	Z+4, r24	; 0x04
   19b4c:	85 ea       	ldi	r24, 0xA5	; 165
   19b4e:	96 e3       	ldi	r25, 0x36	; 54
   19b50:	a0 e0       	ldi	r26, 0x00	; 0
   19b52:	81 83       	std	Z+1, r24	; 0x01
   19b54:	92 83       	std	Z+2, r25	; 0x02
   19b56:	a3 83       	std	Z+3, r26	; 0x03
   19b58:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19b5c:	c7 01       	movw	r24, r14
   19b5e:	5a d8       	rcall	.-3916   	; 0x18c14 <lif_close_volume>
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & GPIB_PPR)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   19b60:	08 c0       	rjmp	.+16     	; 0x19b72 <lif_open_volume+0x1e8>
    }

    if(debuglevel &LIF_DEBUG)
   19b62:	92 ff       	sbrs	r25, 2
   19b64:	05 c0       	rjmp	.+10     	; 0x19b70 <lif_open_volume+0x1e6>
        lif_dump_vol(LIF, "Volume Listing");
   19b66:	66 e6       	ldi	r22, 0x66	; 102
   19b68:	76 e1       	ldi	r23, 0x16	; 22
   19b6a:	c7 01       	movw	r24, r14
   19b6c:	0e 94 c0 c1 	call	0x18380	; 0x18380 <lif_dump_vol>
   19b70:	87 01       	movw	r16, r14
    return( LIF );
}
   19b72:	c8 01       	movw	r24, r16
   19b74:	c7 5c       	subi	r28, 0xC7	; 199
   19b76:	de 4f       	sbci	r29, 0xFE	; 254
   19b78:	ec e0       	ldi	r30, 0x0C	; 12
   19b7a:	0c 94 fa e0 	jmp	0x1c1f4	; 0x1c1f4 <__epilogue_restores__+0xc>

00019b7e <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   19b7e:	2f 92       	push	r2
   19b80:	3f 92       	push	r3
   19b82:	4f 92       	push	r4
   19b84:	5f 92       	push	r5
   19b86:	6f 92       	push	r6
   19b88:	8f 92       	push	r8
   19b8a:	9f 92       	push	r9
   19b8c:	af 92       	push	r10
   19b8e:	bf 92       	push	r11
   19b90:	cf 92       	push	r12
   19b92:	df 92       	push	r13
   19b94:	ef 92       	push	r14
   19b96:	0f 93       	push	r16
   19b98:	1f 93       	push	r17
   19b9a:	cf 93       	push	r28
   19b9c:	df 93       	push	r29
   19b9e:	cd b7       	in	r28, 0x3d	; 61
   19ba0:	de b7       	in	r29, 0x3e	; 62
   19ba2:	af 97       	sbiw	r28, 0x2f	; 47
   19ba4:	0f b6       	in	r0, 0x3f	; 63
   19ba6:	f8 94       	cli
   19ba8:	de bf       	out	0x3e, r29	; 62
   19baa:	0f be       	out	0x3f, r0	; 63
   19bac:	cd bf       	out	0x3d, r28	; 61
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   19bae:	68 e0       	ldi	r22, 0x08	; 8
   19bb0:	79 e0       	ldi	r23, 0x09	; 9
   19bb2:	eb de       	rcall	.-554    	; 0x1998a <lif_open_volume>
   19bb4:	9f a7       	std	Y+47, r25	; 0x2f
   19bb6:	8e a7       	std	Y+46, r24	; 0x2e
    if(LIF == NULL)
   19bb8:	00 97       	sbiw	r24, 0x00	; 0
   19bba:	09 f4       	brne	.+2      	; 0x19bbe <lif_dir+0x40>
   19bbc:	9e c1       	rjmp	.+828    	; 0x19efa <lif_dir+0x37c>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   19bbe:	fc 01       	movw	r30, r24
   19bc0:	86 a1       	ldd	r24, Z+38	; 0x26
   19bc2:	88 23       	and	r24, r24
   19bc4:	21 f0       	breq	.+8      	; 0x19bce <lif_dir+0x50>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   19bc6:	8f 01       	movw	r16, r30
   19bc8:	0a 5d       	subi	r16, 0xDA	; 218
   19bca:	1f 4f       	sbci	r17, 0xFF	; 255
   19bcc:	02 c0       	rjmp	.+4      	; 0x19bd2 <lif_dir+0x54>
    if(!vol[0])
        vol = "<EMPTY>";
   19bce:	08 e1       	ldi	r16, 0x18	; 24
   19bd0:	16 e1       	ldi	r17, 0x16	; 22

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   19bd2:	8e a5       	ldd	r24, Y+46	; 0x2e
   19bd4:	9f a5       	ldd	r25, Y+47	; 0x2f
   19bd6:	87 5b       	subi	r24, 0xB7	; 183
   19bd8:	9f 4f       	sbci	r25, 0xFF	; 255
   19bda:	0e 94 84 c1 	call	0x18308	; 0x18308 <lif_lifbcd2timestr>
   19bde:	ed b7       	in	r30, 0x3d	; 61
   19be0:	fe b7       	in	r31, 0x3e	; 62
   19be2:	97 83       	std	Z+7, r25	; 0x07
   19be4:	86 83       	std	Z+6, r24	; 0x06
   19be6:	15 83       	std	Z+5, r17	; 0x05
   19be8:	04 83       	std	Z+4, r16	; 0x04
   19bea:	8e e8       	ldi	r24, 0x8E	; 142
   19bec:	96 e3       	ldi	r25, 0x36	; 54
   19bee:	a0 e0       	ldi	r26, 0x00	; 0
   19bf0:	81 83       	std	Z+1, r24	; 0x01
   19bf2:	92 83       	std	Z+2, r25	; 0x02
   19bf4:	a3 83       	std	Z+3, r26	; 0x03
   19bf6:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   19bfa:	8e e4       	ldi	r24, 0x4E	; 78
   19bfc:	96 e3       	ldi	r25, 0x36	; 54
   19bfe:	a0 e0       	ldi	r26, 0x00	; 0
   19c00:	ed b7       	in	r30, 0x3d	; 61
   19c02:	fe b7       	in	r31, 0x3e	; 62
   19c04:	81 83       	std	Z+1, r24	; 0x01
   19c06:	92 83       	std	Z+2, r25	; 0x02
   19c08:	a3 83       	std	Z+3, r26	; 0x03
   19c0a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   19c0e:	00 e2       	ldi	r16, 0x20	; 32
   19c10:	10 e0       	ldi	r17, 0x00	; 0
   19c12:	1f 8b       	std	Y+23, r17	; 0x17
   19c14:	0e 8b       	std	Y+22, r16	; 0x16
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   19c16:	21 2c       	mov	r2, r1
   19c18:	31 2c       	mov	r3, r1
    {

        if(!lif_readdirindex(LIF,index))
            break;

        if(LIF->DIR.FileType == 0xffff)
   19c1a:	0e a5       	ldd	r16, Y+46	; 0x2e
   19c1c:	1f a5       	ldd	r17, Y+47	; 0x2f
   19c1e:	06 5a       	subi	r16, 0xA6	; 166
   19c20:	1f 4f       	sbci	r17, 0xFF	; 255
   19c22:	1d 8f       	std	Y+29, r17	; 0x1d
   19c24:	0c 8f       	std	Y+28, r16	; 0x1c
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   19c26:	0e a5       	ldd	r16, Y+46	; 0x2e
   19c28:	1f a5       	ldd	r17, Y+47	; 0x2f
   19c2a:	00 5a       	subi	r16, 0xA0	; 160
   19c2c:	1f 4f       	sbci	r17, 0xFF	; 255
   19c2e:	1d a3       	std	Y+37, r17	; 0x25
   19c30:	0c a3       	std	Y+36, r16	; 0x24

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19c32:	0e a5       	ldd	r16, Y+46	; 0x2e
   19c34:	1f a5       	ldd	r17, Y+47	; 0x2f
   19c36:	04 59       	subi	r16, 0x94	; 148
   19c38:	1f 4f       	sbci	r17, 0xFF	; 255
   19c3a:	1f a3       	std	Y+39, r17	; 0x27
   19c3c:	0e a3       	std	Y+38, r16	; 0x26
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   19c3e:	82 e0       	ldi	r24, 0x02	; 2
   19c40:	96 e3       	ldi	r25, 0x36	; 54
   19c42:	6c 01       	movw	r12, r24
   19c44:	e1 2c       	mov	r14, r1
   19c46:	0e a5       	ldd	r16, Y+46	; 0x2e
   19c48:	1f a5       	ldd	r17, Y+47	; 0x2f
   19c4a:	01 5b       	subi	r16, 0xB1	; 177
   19c4c:	1f 4f       	sbci	r17, 0xFF	; 255
   19c4e:	1f 8f       	std	Y+31, r17	; 0x1f
   19c50:	0e 8f       	std	Y+30, r16	; 0x1e
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   19c52:	82 ed       	ldi	r24, 0xD2	; 210
   19c54:	95 e3       	ldi	r25, 0x35	; 53
   19c56:	2c 01       	movw	r4, r24
   19c58:	61 2c       	mov	r6, r1
   19c5a:	0e a5       	ldd	r16, Y+46	; 0x2e
   19c5c:	1f a5       	ldd	r17, Y+47	; 0x2f
   19c5e:	04 5a       	subi	r16, 0xA4	; 164
   19c60:	1f 4f       	sbci	r17, 0xFF	; 255
   19c62:	19 a7       	std	Y+41, r17	; 0x29
   19c64:	08 a7       	std	Y+40, r16	; 0x28
   19c66:	0e a5       	ldd	r16, Y+46	; 0x2e
   19c68:	1f a5       	ldd	r17, Y+47	; 0x2f
   19c6a:	02 59       	subi	r16, 0x92	; 146
   19c6c:	1f 4f       	sbci	r17, 0xFF	; 255
   19c6e:	1b a7       	std	Y+43, r17	; 0x2b
   19c70:	0a a7       	std	Y+42, r16	; 0x2a
   19c72:	0e a5       	ldd	r16, Y+46	; 0x2e
   19c74:	1f a5       	ldd	r17, Y+47	; 0x2f
   19c76:	0c 59       	subi	r16, 0x9C	; 156
   19c78:	1f 4f       	sbci	r17, 0xFF	; 255
   19c7a:	1d a7       	std	Y+45, r17	; 0x2d
   19c7c:	0c a7       	std	Y+44, r16	; 0x2c

    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   19c7e:	b1 01       	movw	r22, r2
   19c80:	8e a5       	ldd	r24, Y+46	; 0x2e
   19c82:	9f a5       	ldd	r25, Y+47	; 0x2f
   19c84:	55 d8       	rcall	.-3926   	; 0x18d30 <lif_readdirindex>
   19c86:	89 2b       	or	r24, r25
   19c88:	09 f4       	brne	.+2      	; 0x19c8c <lif_dir+0x10e>
   19c8a:	ad c0       	rjmp	.+346    	; 0x19de6 <lif_dir+0x268>
            break;

        if(LIF->DIR.FileType == 0xffff)
   19c8c:	ac 8d       	ldd	r26, Y+28	; 0x1c
   19c8e:	bd 8d       	ldd	r27, Y+29	; 0x1d
   19c90:	8d 91       	ld	r24, X+
   19c92:	9c 91       	ld	r25, X
   19c94:	8f 3f       	cpi	r24, 0xFF	; 255
   19c96:	bf ef       	ldi	r27, 0xFF	; 255
   19c98:	9b 07       	cpc	r25, r27
   19c9a:	09 f4       	brne	.+2      	; 0x19c9e <lif_dir+0x120>
   19c9c:	a4 c0       	rjmp	.+328    	; 0x19de6 <lif_dir+0x268>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   19c9e:	ec a1       	ldd	r30, Y+36	; 0x24
   19ca0:	fd a1       	ldd	r31, Y+37	; 0x25
   19ca2:	40 81       	ld	r20, Z
   19ca4:	51 81       	ldd	r21, Z+1	; 0x01
   19ca6:	62 81       	ldd	r22, Z+2	; 0x02
   19ca8:	73 81       	ldd	r23, Z+3	; 0x03
   19caa:	00 27       	eor	r16, r16
   19cac:	14 2f       	mov	r17, r20
   19cae:	25 2f       	mov	r18, r21
   19cb0:	36 2f       	mov	r19, r22
   19cb2:	08 8f       	std	Y+24, r16	; 0x18
   19cb4:	19 8f       	std	Y+25, r17	; 0x19
   19cb6:	2a 8f       	std	Y+26, r18	; 0x1a
   19cb8:	3b 8f       	std	Y+27, r19	; 0x1b

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   19cba:	8c 7f       	andi	r24, 0xFC	; 252
   19cbc:	80 31       	cpi	r24, 0x10	; 16
   19cbe:	90 4e       	sbci	r25, 0xE0	; 224
   19cc0:	09 f0       	breq	.+2      	; 0x19cc4 <lif_dir+0x146>
   19cc2:	4b c0       	rjmp	.+150    	; 0x19d5a <lif_dir+0x1dc>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19cc4:	ae a1       	ldd	r26, Y+38	; 0x26
   19cc6:	bf a1       	ldd	r27, Y+39	; 0x27
   19cc8:	8d 91       	ld	r24, X+
   19cca:	9c 91       	ld	r25, X
   19ccc:	00 97       	sbiw	r24, 0x00	; 0
   19cce:	b9 f0       	breq	.+46     	; 0x19cfe <lif_dir+0x180>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19cd0:	4c 01       	movw	r8, r24
   19cd2:	a1 2c       	mov	r10, r1
   19cd4:	b1 2c       	mov	r11, r1
   19cd6:	33 27       	eor	r19, r19
   19cd8:	2b 2d       	mov	r18, r11
   19cda:	1a 2d       	mov	r17, r10
   19cdc:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19cde:	88 23       	and	r24, r24
   19ce0:	21 f0       	breq	.+8      	; 0x19cea <lif_dir+0x16c>
        ++sectors;
   19ce2:	0f 5f       	subi	r16, 0xFF	; 255
   19ce4:	1f 4f       	sbci	r17, 0xFF	; 255
   19ce6:	2f 4f       	sbci	r18, 0xFF	; 255
   19ce8:	3f 4f       	sbci	r19, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   19cea:	40 17       	cp	r20, r16
   19cec:	51 07       	cpc	r21, r17
   19cee:	62 07       	cpc	r22, r18
   19cf0:	73 07       	cpc	r23, r19
   19cf2:	29 f4       	brne	.+10     	; 0x19cfe <lif_dir+0x180>
            {
                bytes = LIF->DIR.FileBytes;
   19cf4:	88 8e       	std	Y+24, r8	; 0x18
   19cf6:	99 8e       	std	Y+25, r9	; 0x19
   19cf8:	aa 8e       	std	Y+26, r10	; 0x1a
   19cfa:	bb 8e       	std	Y+27, r11	; 0x1b
   19cfc:	2e c0       	rjmp	.+92     	; 0x19d5a <lif_dir+0x1dc>
            }
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
   19cfe:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   19d02:	30 91 b7 01 	lds	r19, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   19d06:	32 ff       	sbrs	r19, 2
   19d08:	24 c0       	rjmp	.+72     	; 0x19d52 <lif_dir+0x1d4>
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   19d0a:	4c 01       	movw	r8, r24
   19d0c:	a1 2c       	mov	r10, r1
   19d0e:	b1 2c       	mov	r11, r1
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   19d10:	33 27       	eor	r19, r19
   19d12:	2b 2d       	mov	r18, r11
   19d14:	1a 2d       	mov	r17, r10
   19d16:	09 2d       	mov	r16, r9
    if(bytes % (long)LIF_SECTOR_SIZE)
   19d18:	88 23       	and	r24, r24
   19d1a:	21 f0       	breq	.+8      	; 0x19d24 <lif_dir+0x1a6>
        ++sectors;
   19d1c:	0f 5f       	subi	r16, 0xFF	; 255
   19d1e:	1f 4f       	sbci	r17, 0xFF	; 255
   19d20:	2f 4f       	sbci	r18, 0xFF	; 255
   19d22:	3f 4f       	sbci	r19, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & LIF_DEBUG)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n",
   19d24:	ed b7       	in	r30, 0x3d	; 61
   19d26:	fe b7       	in	r31, 0x3e	; 62
   19d28:	46 87       	std	Z+14, r20	; 0x0e
   19d2a:	57 87       	std	Z+15, r21	; 0x0f
   19d2c:	60 8b       	std	Z+16, r22	; 0x10
   19d2e:	71 8b       	std	Z+17, r23	; 0x11
   19d30:	02 87       	std	Z+10, r16	; 0x0a
   19d32:	13 87       	std	Z+11, r17	; 0x0b
   19d34:	24 87       	std	Z+12, r18	; 0x0c
   19d36:	35 87       	std	Z+13, r19	; 0x0d
   19d38:	86 82       	std	Z+6, r8	; 0x06
   19d3a:	97 82       	std	Z+7, r9	; 0x07
   19d3c:	a0 86       	std	Z+8, r10	; 0x08
   19d3e:	b1 86       	std	Z+9, r11	; 0x09
   19d40:	0e 8d       	ldd	r16, Y+30	; 0x1e
   19d42:	1f 8d       	ldd	r17, Y+31	; 0x1f
   19d44:	15 83       	std	Z+5, r17	; 0x05
   19d46:	04 83       	std	Z+4, r16	; 0x04
   19d48:	c1 82       	std	Z+1, r12	; 0x01
   19d4a:	d2 82       	std	Z+2, r13	; 0x02
   19d4c:	e3 82       	std	Z+3, r14	; 0x03
   19d4e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   19d52:	01 e2       	ldi	r16, 0x21	; 33
   19d54:	10 e0       	ldi	r17, 0x00	; 0
   19d56:	1f 8b       	std	Y+23, r17	; 0x17
   19d58:	0e 8b       	std	Y+22, r16	; 0x16
                }
            }
        }

// name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n",
   19d5a:	ac 8d       	ldd	r26, Y+28	; 0x1c
   19d5c:	bd 8d       	ldd	r27, Y+29	; 0x1d
   19d5e:	8d 90       	ld	r8, X+
   19d60:	9c 90       	ld	r9, X
   19d62:	81 14       	cp	r8, r1
   19d64:	91 04       	cpc	r9, r1
   19d66:	19 f0       	breq	.+6      	; 0x19d6e <lif_dir+0x1f0>
   19d68:	0e 8d       	ldd	r16, Y+30	; 0x1e
   19d6a:	1f 8d       	ldd	r17, Y+31	; 0x1f
   19d6c:	02 c0       	rjmp	.+4      	; 0x19d72 <lif_dir+0x1f4>
   19d6e:	05 e7       	ldi	r16, 0x75	; 117
   19d70:	16 e1       	ldi	r17, 0x16	; 22
   19d72:	a8 a5       	ldd	r26, Y+40	; 0x28
   19d74:	b9 a5       	ldd	r27, Y+41	; 0x29
   19d76:	8d 91       	ld	r24, X+
   19d78:	9d 91       	ld	r25, X+
   19d7a:	0d 90       	ld	r0, X+
   19d7c:	bc 91       	ld	r27, X
   19d7e:	a0 2d       	mov	r26, r0
   19d80:	88 a3       	std	Y+32, r24	; 0x20
   19d82:	99 a3       	std	Y+33, r25	; 0x21
   19d84:	aa a3       	std	Y+34, r26	; 0x22
   19d86:	bb a3       	std	Y+35, r27	; 0x23
   19d88:	ea a5       	ldd	r30, Y+42	; 0x2a
   19d8a:	fb a5       	ldd	r31, Y+43	; 0x2b
   19d8c:	a0 80       	ld	r10, Z
   19d8e:	b1 80       	ldd	r11, Z+1	; 0x01
   19d90:	8c a5       	ldd	r24, Y+44	; 0x2c
   19d92:	9d a5       	ldd	r25, Y+45	; 0x2d
   19d94:	0e 94 84 c1 	call	0x18308	; 0x18308 <lif_lifbcd2timestr>
   19d98:	ed b7       	in	r30, 0x3d	; 61
   19d9a:	fe b7       	in	r31, 0x3e	; 62
   19d9c:	95 8b       	std	Z+21, r25	; 0x15
   19d9e:	84 8b       	std	Z+20, r24	; 0x14
   19da0:	b3 8a       	std	Z+19, r11	; 0x13
   19da2:	a2 8a       	std	Z+18, r10	; 0x12
   19da4:	2e 89       	ldd	r18, Y+22	; 0x16
   19da6:	3f 89       	ldd	r19, Y+23	; 0x17
   19da8:	31 8b       	std	Z+17, r19	; 0x11
   19daa:	20 8b       	std	Z+16, r18	; 0x10
   19dac:	88 8d       	ldd	r24, Y+24	; 0x18
   19dae:	99 8d       	ldd	r25, Y+25	; 0x19
   19db0:	aa 8d       	ldd	r26, Y+26	; 0x1a
   19db2:	bb 8d       	ldd	r27, Y+27	; 0x1b
   19db4:	84 87       	std	Z+12, r24	; 0x0c
   19db6:	95 87       	std	Z+13, r25	; 0x0d
   19db8:	a6 87       	std	Z+14, r26	; 0x0e
   19dba:	b7 87       	std	Z+15, r27	; 0x0f
   19dbc:	88 a1       	ldd	r24, Y+32	; 0x20
   19dbe:	99 a1       	ldd	r25, Y+33	; 0x21
   19dc0:	aa a1       	ldd	r26, Y+34	; 0x22
   19dc2:	bb a1       	ldd	r27, Y+35	; 0x23
   19dc4:	80 87       	std	Z+8, r24	; 0x08
   19dc6:	91 87       	std	Z+9, r25	; 0x09
   19dc8:	a2 87       	std	Z+10, r26	; 0x0a
   19dca:	b3 87       	std	Z+11, r27	; 0x0b
   19dcc:	97 82       	std	Z+7, r9	; 0x07
   19dce:	86 82       	std	Z+6, r8	; 0x06
   19dd0:	15 83       	std	Z+5, r17	; 0x05
   19dd2:	04 83       	std	Z+4, r16	; 0x04
   19dd4:	41 82       	std	Z+1, r4	; 0x01
   19dd6:	52 82       	std	Z+2, r5	; 0x02
   19dd8:	63 82       	std	Z+3, r6	; 0x03
   19dda:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            (long)bytes,
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   19dde:	ff ef       	ldi	r31, 0xFF	; 255
   19de0:	2f 1a       	sub	r2, r31
   19de2:	3f 0a       	sbc	r3, r31
    }
   19de4:	4c cf       	rjmp	.-360    	; 0x19c7e <lif_dir+0x100>

    printf("\n");
   19de6:	80 ed       	ldi	r24, 0xD0	; 208
   19de8:	95 e3       	ldi	r25, 0x35	; 53
   19dea:	a0 e0       	ldi	r26, 0x00	; 0
   19dec:	ed b7       	in	r30, 0x3d	; 61
   19dee:	fe b7       	in	r31, 0x3e	; 62
   19df0:	81 83       	std	Z+1, r24	; 0x01
   19df2:	92 83       	std	Z+2, r25	; 0x02
   19df4:	a3 83       	std	Z+3, r26	; 0x03
   19df6:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   19dfa:	ee a5       	ldd	r30, Y+46	; 0x2e
   19dfc:	ff a5       	ldd	r31, Y+47	; 0x2f
   19dfe:	84 8d       	ldd	r24, Z+28	; 0x1c
   19e00:	95 8d       	ldd	r25, Z+29	; 0x1d
   19e02:	09 2e       	mov	r0, r25
   19e04:	00 0c       	add	r0, r0
   19e06:	aa 0b       	sbc	r26, r26
   19e08:	bb 0b       	sbc	r27, r27
   19e0a:	ed b7       	in	r30, 0x3d	; 61
   19e0c:	fe b7       	in	r31, 0x3e	; 62
   19e0e:	84 83       	std	Z+4, r24	; 0x04
   19e10:	95 83       	std	Z+5, r25	; 0x05
   19e12:	a6 83       	std	Z+6, r26	; 0x06
   19e14:	b7 83       	std	Z+7, r27	; 0x07
   19e16:	84 ec       	ldi	r24, 0xC4	; 196
   19e18:	95 e3       	ldi	r25, 0x35	; 53
   19e1a:	a0 e0       	ldi	r26, 0x00	; 0
   19e1c:	81 83       	std	Z+1, r24	; 0x01
   19e1e:	92 83       	std	Z+2, r25	; 0x02
   19e20:	a3 83       	std	Z+3, r26	; 0x03
   19e22:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   19e26:	ee a5       	ldd	r30, Y+46	; 0x2e
   19e28:	ff a5       	ldd	r31, Y+47	; 0x2f
   19e2a:	86 8d       	ldd	r24, Z+30	; 0x1e
   19e2c:	97 8d       	ldd	r25, Z+31	; 0x1f
   19e2e:	09 2e       	mov	r0, r25
   19e30:	00 0c       	add	r0, r0
   19e32:	aa 0b       	sbc	r26, r26
   19e34:	bb 0b       	sbc	r27, r27
   19e36:	ed b7       	in	r30, 0x3d	; 61
   19e38:	fe b7       	in	r31, 0x3e	; 62
   19e3a:	84 83       	std	Z+4, r24	; 0x04
   19e3c:	95 83       	std	Z+5, r25	; 0x05
   19e3e:	a6 83       	std	Z+6, r26	; 0x06
   19e40:	b7 83       	std	Z+7, r27	; 0x07
   19e42:	87 eb       	ldi	r24, 0xB7	; 183
   19e44:	95 e3       	ldi	r25, 0x35	; 53
   19e46:	a0 e0       	ldi	r26, 0x00	; 0
   19e48:	81 83       	std	Z+1, r24	; 0x01
   19e4a:	92 83       	std	Z+2, r25	; 0x02
   19e4c:	a3 83       	std	Z+3, r26	; 0x03
   19e4e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("%8ld Dir  start\n",   (long)LIF->VOL.DirStartSector);
   19e52:	ee a5       	ldd	r30, Y+46	; 0x2e
   19e54:	ff a5       	ldd	r31, Y+47	; 0x2f
   19e56:	85 a5       	ldd	r24, Z+45	; 0x2d
   19e58:	96 a5       	ldd	r25, Z+46	; 0x2e
   19e5a:	a7 a5       	ldd	r26, Z+47	; 0x2f
   19e5c:	b0 a9       	ldd	r27, Z+48	; 0x30
   19e5e:	ed b7       	in	r30, 0x3d	; 61
   19e60:	fe b7       	in	r31, 0x3e	; 62
   19e62:	84 83       	std	Z+4, r24	; 0x04
   19e64:	95 83       	std	Z+5, r25	; 0x05
   19e66:	a6 83       	std	Z+6, r26	; 0x06
   19e68:	b7 83       	std	Z+7, r27	; 0x07
   19e6a:	86 ea       	ldi	r24, 0xA6	; 166
   19e6c:	95 e3       	ldi	r25, 0x35	; 53
   19e6e:	a0 e0       	ldi	r26, 0x00	; 0
   19e70:	81 83       	std	Z+1, r24	; 0x01
   19e72:	92 83       	std	Z+2, r25	; 0x02
   19e74:	a3 83       	std	Z+3, r26	; 0x03
   19e76:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
   19e7a:	ee a5       	ldd	r30, Y+46	; 0x2e
   19e7c:	ff a5       	ldd	r31, Y+47	; 0x2f
   19e7e:	85 a9       	ldd	r24, Z+53	; 0x35
   19e80:	96 a9       	ldd	r25, Z+54	; 0x36
   19e82:	a7 a9       	ldd	r26, Z+55	; 0x37
   19e84:	b0 ad       	ldd	r27, Z+56	; 0x38
   19e86:	ed b7       	in	r30, 0x3d	; 61
   19e88:	fe b7       	in	r31, 0x3e	; 62
   19e8a:	84 83       	std	Z+4, r24	; 0x04
   19e8c:	95 83       	std	Z+5, r25	; 0x05
   19e8e:	a6 83       	std	Z+6, r26	; 0x06
   19e90:	b7 83       	std	Z+7, r27	; 0x07
   19e92:	83 e9       	ldi	r24, 0x93	; 147
   19e94:	95 e3       	ldi	r25, 0x35	; 53
   19e96:	a0 e0       	ldi	r26, 0x00	; 0
   19e98:	81 83       	std	Z+1, r24	; 0x01
   19e9a:	92 83       	std	Z+2, r25	; 0x02
   19e9c:	a3 83       	std	Z+3, r26	; 0x03
   19e9e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   19ea2:	ee a5       	ldd	r30, Y+46	; 0x2e
   19ea4:	ff a5       	ldd	r31, Y+47	; 0x2f
   19ea6:	84 89       	ldd	r24, Z+20	; 0x14
   19ea8:	95 89       	ldd	r25, Z+21	; 0x15
   19eaa:	a6 89       	ldd	r26, Z+22	; 0x16
   19eac:	b7 89       	ldd	r27, Z+23	; 0x17
   19eae:	ed b7       	in	r30, 0x3d	; 61
   19eb0:	fe b7       	in	r31, 0x3e	; 62
   19eb2:	84 83       	std	Z+4, r24	; 0x04
   19eb4:	95 83       	std	Z+5, r25	; 0x05
   19eb6:	a6 83       	std	Z+6, r26	; 0x06
   19eb8:	b7 83       	std	Z+7, r27	; 0x07
   19eba:	80 e8       	ldi	r24, 0x80	; 128
   19ebc:	95 e3       	ldi	r25, 0x35	; 53
   19ebe:	a0 e0       	ldi	r26, 0x00	; 0
   19ec0:	81 83       	std	Z+1, r24	; 0x01
   19ec2:	92 83       	std	Z+2, r25	; 0x02
   19ec4:	a3 83       	std	Z+3, r26	; 0x03
   19ec6:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   19eca:	ee a5       	ldd	r30, Y+46	; 0x2e
   19ecc:	ff a5       	ldd	r31, Y+47	; 0x2f
   19ece:	80 8d       	ldd	r24, Z+24	; 0x18
   19ed0:	91 8d       	ldd	r25, Z+25	; 0x19
   19ed2:	a2 8d       	ldd	r26, Z+26	; 0x1a
   19ed4:	b3 8d       	ldd	r27, Z+27	; 0x1b
   19ed6:	ed b7       	in	r30, 0x3d	; 61
   19ed8:	fe b7       	in	r31, 0x3e	; 62
   19eda:	84 83       	std	Z+4, r24	; 0x04
   19edc:	95 83       	std	Z+5, r25	; 0x05
   19ede:	a6 83       	std	Z+6, r26	; 0x06
   19ee0:	b7 83       	std	Z+7, r27	; 0x07
   19ee2:	8d e6       	ldi	r24, 0x6D	; 109
   19ee4:	95 e3       	ldi	r25, 0x35	; 53
   19ee6:	a0 e0       	ldi	r26, 0x00	; 0
   19ee8:	81 83       	std	Z+1, r24	; 0x01
   19eea:	92 83       	std	Z+2, r25	; 0x02
   19eec:	a3 83       	std	Z+3, r26	; 0x03
   19eee:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   19ef2:	8e a5       	ldd	r24, Y+46	; 0x2e
   19ef4:	9f a5       	ldd	r25, Y+47	; 0x2f
   19ef6:	0e 94 0a c6 	call	0x18c14	; 0x18c14 <lif_close_volume>
    printf("%8ld Dir  sectors\n", (long)LIF->VOL.DirSectors);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   19efa:	af 96       	adiw	r28, 0x2f	; 47
   19efc:	0f b6       	in	r0, 0x3f	; 63
   19efe:	f8 94       	cli
   19f00:	de bf       	out	0x3e, r29	; 62
   19f02:	0f be       	out	0x3f, r0	; 63
   19f04:	cd bf       	out	0x3d, r28	; 61
   19f06:	df 91       	pop	r29
   19f08:	cf 91       	pop	r28
   19f0a:	1f 91       	pop	r17
   19f0c:	0f 91       	pop	r16
   19f0e:	ef 90       	pop	r14
   19f10:	df 90       	pop	r13
   19f12:	cf 90       	pop	r12
   19f14:	bf 90       	pop	r11
   19f16:	af 90       	pop	r10
   19f18:	9f 90       	pop	r9
   19f1a:	8f 90       	pop	r8
   19f1c:	6f 90       	pop	r6
   19f1e:	5f 90       	pop	r5
   19f20:	4f 90       	pop	r4
   19f22:	3f 90       	pop	r3
   19f24:	2f 90       	pop	r2
   19f26:	08 95       	ret

00019f28 <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   19f28:	a5 e0       	ldi	r26, 0x05	; 5
   19f2a:	b0 e0       	ldi	r27, 0x00	; 0
   19f2c:	ea e9       	ldi	r30, 0x9A	; 154
   19f2e:	ff ec       	ldi	r31, 0xCF	; 207
   19f30:	0c 94 e0 e0 	jmp	0x1c1c0	; 0x1c1c0 <__prologue_saves__+0x10>
   19f34:	7c 01       	movw	r14, r24
   19f36:	eb 01       	movw	r28, r22
    int index;

    if( !lif_checkname(liflabel) )
   19f38:	cb 01       	movw	r24, r22
   19f3a:	0e 94 75 be 	call	0x17cea	; 0x17cea <lif_checkname>
   19f3e:	89 2b       	or	r24, r25
   19f40:	59 f4       	brne	.+22     	; 0x19f58 <lif_find_file+0x30>
    {
        if(debuglevel & GPIB_PPR)
   19f42:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19f46:	81 ff       	sbrs	r24, 1
   19f48:	46 c0       	rjmp	.+140    	; 0x19fd6 <lif_find_file+0xae>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   19f4a:	ed b7       	in	r30, 0x3d	; 61
   19f4c:	fe b7       	in	r31, 0x3e	; 62
   19f4e:	d5 83       	std	Z+5, r29	; 0x05
   19f50:	c4 83       	std	Z+4, r28	; 0x04
   19f52:	86 e4       	ldi	r24, 0x46	; 70
   19f54:	95 e3       	ldi	r25, 0x35	; 53
   19f56:	13 c0       	rjmp	.+38     	; 0x19f7e <lif_find_file+0x56>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   19f58:	fe 01       	movw	r30, r28
   19f5a:	01 90       	ld	r0, Z+
   19f5c:	00 20       	and	r0, r0
   19f5e:	e9 f7       	brne	.-6      	; 0x19f5a <lif_find_file+0x32>
   19f60:	31 97       	sbiw	r30, 0x01	; 1
   19f62:	ec 1b       	sub	r30, r28
   19f64:	fd 0b       	sbc	r31, r29
   19f66:	3b 97       	sbiw	r30, 0x0b	; 11
   19f68:	88 f0       	brcs	.+34     	; 0x19f8c <lif_find_file+0x64>
    {
        if(debuglevel & GPIB_PPR)
   19f6a:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   19f6e:	81 ff       	sbrs	r24, 1
   19f70:	32 c0       	rjmp	.+100    	; 0x19fd6 <lif_find_file+0xae>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   19f72:	ed b7       	in	r30, 0x3d	; 61
   19f74:	fe b7       	in	r31, 0x3e	; 62
   19f76:	d5 83       	std	Z+5, r29	; 0x05
   19f78:	c4 83       	std	Z+4, r28	; 0x04
   19f7a:	81 e2       	ldi	r24, 0x21	; 33
   19f7c:	95 e3       	ldi	r25, 0x35	; 53
   19f7e:	a0 e0       	ldi	r26, 0x00	; 0
   19f80:	81 83       	std	Z+1, r24	; 0x01
   19f82:	92 83       	std	Z+2, r25	; 0x02
   19f84:	a3 83       	std	Z+3, r26	; 0x03
   19f86:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   19f8a:	25 c0       	rjmp	.+74     	; 0x19fd6 <lif_find_file+0xae>
        return(-1);
    }

    if(LIF == NULL)
   19f8c:	e1 14       	cp	r14, r1
   19f8e:	f1 04       	cpc	r15, r1
   19f90:	11 f1       	breq	.+68     	; 0x19fd6 <lif_find_file+0xae>
   19f92:	00 e0       	ldi	r16, 0x00	; 0
   19f94:	10 e0       	ldi	r17, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   19f96:	67 01       	movw	r12, r14
   19f98:	fa e5       	ldi	r31, 0x5A	; 90
   19f9a:	cf 0e       	add	r12, r31
   19f9c:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   19f9e:	57 01       	movw	r10, r14
   19fa0:	2f e4       	ldi	r18, 0x4F	; 79
   19fa2:	a2 0e       	add	r10, r18
   19fa4:	b1 1c       	adc	r11, r1
        return(-1);

    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   19fa6:	b8 01       	movw	r22, r16
   19fa8:	c7 01       	movw	r24, r14
   19faa:	0e 94 98 c6 	call	0x18d30	; 0x18d30 <lif_readdirindex>
   19fae:	89 2b       	or	r24, r25
   19fb0:	91 f0       	breq	.+36     	; 0x19fd6 <lif_find_file+0xae>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   19fb2:	f6 01       	movw	r30, r12
   19fb4:	80 81       	ld	r24, Z
   19fb6:	91 81       	ldd	r25, Z+1	; 0x01
   19fb8:	8f 3f       	cpi	r24, 0xFF	; 255
   19fba:	ff ef       	ldi	r31, 0xFF	; 255
   19fbc:	9f 07       	cpc	r25, r31
   19fbe:	59 f0       	breq	.+22     	; 0x19fd6 <lif_find_file+0xae>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   19fc0:	89 2b       	or	r24, r25
   19fc2:	31 f0       	breq	.+12     	; 0x19fd0 <lif_find_file+0xa8>
   19fc4:	be 01       	movw	r22, r28
   19fc6:	c5 01       	movw	r24, r10
   19fc8:	0e 94 eb 2e 	call	0x5dd6	; 0x5dd6 <strcasecmp>
   19fcc:	89 2b       	or	r24, r25
   19fce:	31 f0       	breq	.+12     	; 0x19fdc <lif_find_file+0xb4>
            break;
        ++index;
   19fd0:	0f 5f       	subi	r16, 0xFF	; 255
   19fd2:	1f 4f       	sbci	r17, 0xFF	; 255
   19fd4:	e8 cf       	rjmp	.-48     	; 0x19fa6 <lif_find_file+0x7e>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & GPIB_PPR)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   19fd6:	8f ef       	ldi	r24, 0xFF	; 255
   19fd8:	9f ef       	ldi	r25, 0xFF	; 255
   19fda:	01 c0       	rjmp	.+2      	; 0x19fde <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   19fdc:	c8 01       	movw	r24, r16
            break;
        ++index;
    }
    return(index);
}
   19fde:	cd b7       	in	r28, 0x3d	; 61
   19fe0:	de b7       	in	r29, 0x3e	; 62
   19fe2:	25 96       	adiw	r28, 0x05	; 5
   19fe4:	ea e0       	ldi	r30, 0x0A	; 10
   19fe6:	0c 94 fc e0 	jmp	0x1c1f8	; 0x1c1f8 <__epilogue_restores__+0x10>

00019fea <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   19fea:	a5 e0       	ldi	r26, 0x05	; 5
   19fec:	b0 e0       	ldi	r27, 0x00	; 0
   19fee:	eb ef       	ldi	r30, 0xFB	; 251
   19ff0:	ff ec       	ldi	r31, 0xCF	; 207
   19ff2:	0c 94 e2 e0 	jmp	0x1c1c4	; 0x1c1c4 <__prologue_saves__+0x14>
   19ff6:	6b 01       	movw	r12, r22
   19ff8:	7c 01       	movw	r14, r24
   19ffa:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   19ffc:	20 e0       	ldi	r18, 0x00	; 0
   19ffe:	31 e0       	ldi	r19, 0x01	; 1
   1a000:	40 e0       	ldi	r20, 0x00	; 0
   1a002:	50 e0       	ldi	r21, 0x00	; 0
   1a004:	0e 94 8d e0 	call	0x1c11a	; 0x1c11a <__divmodsi4>
    if(!pos)
   1a008:	61 15       	cp	r22, r1
   1a00a:	71 05       	cpc	r23, r1
   1a00c:	d1 f1       	breq	.+116    	; 0x1a082 <lif_e010_pad_sector+0x98>
        return(0);

// Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1a00e:	c0 e0       	ldi	r28, 0x00	; 0
   1a010:	d1 e0       	ldi	r29, 0x01	; 1
   1a012:	c6 1b       	sub	r28, r22
   1a014:	d7 0b       	sbc	r29, r23

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
   1a016:	f8 01       	movw	r30, r16
   1a018:	8f ee       	ldi	r24, 0xEF	; 239
   1a01a:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1a01c:	2f ef       	ldi	r18, 0xFF	; 255

// Bytes written to wbuf
    ind = 0;
// PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1a01e:	cf 01       	movw	r24, r30
   1a020:	80 1b       	sub	r24, r16
   1a022:	91 0b       	sbc	r25, r17
   1a024:	8c 17       	cp	r24, r28
   1a026:	9d 07       	cpc	r25, r29
   1a028:	14 f4       	brge	.+4      	; 0x1a02e <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1a02a:	21 93       	st	Z+, r18
   1a02c:	f8 cf       	rjmp	.-16     	; 0x1a01e <lif_e010_pad_sector+0x34>
   1a02e:	1c 16       	cp	r1, r28
   1a030:	1d 06       	cpc	r1, r29
   1a032:	14 f0       	brlt	.+4      	; 0x1a038 <lif_e010_pad_sector+0x4e>
   1a034:	c1 e0       	ldi	r28, 0x01	; 1
   1a036:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1a038:	ce 01       	movw	r24, r28
   1a03a:	0d 2e       	mov	r0, r29
   1a03c:	00 0c       	add	r0, r0
   1a03e:	aa 0b       	sbc	r26, r26
   1a040:	bb 0b       	sbc	r27, r27
   1a042:	bc 01       	movw	r22, r24
   1a044:	cd 01       	movw	r24, r26
   1a046:	6c 0d       	add	r22, r12
   1a048:	7d 1d       	adc	r23, r13
   1a04a:	8e 1d       	adc	r24, r14
   1a04c:	9f 1d       	adc	r25, r15
   1a04e:	20 e0       	ldi	r18, 0x00	; 0
   1a050:	31 e0       	ldi	r19, 0x01	; 1
   1a052:	40 e0       	ldi	r20, 0x00	; 0
   1a054:	50 e0       	ldi	r21, 0x00	; 0
   1a056:	0e 94 8d e0 	call	0x1c11a	; 0x1c11a <__divmodsi4>
// NEW SECTOR
// Debugging make sure we are at sector boundry
    if(pos)
   1a05a:	61 15       	cp	r22, r1
   1a05c:	71 05       	cpc	r23, r1
   1a05e:	a1 f0       	breq	.+40     	; 0x1a088 <lif_e010_pad_sector+0x9e>
    {
        if(debuglevel & GPIB_PPR)
   1a060:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a064:	21 ff       	sbrs	r18, 1
   1a066:	12 c0       	rjmp	.+36     	; 0x1a08c <lif_e010_pad_sector+0xa2>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1a068:	ed b7       	in	r30, 0x3d	; 61
   1a06a:	fe b7       	in	r31, 0x3e	; 62
   1a06c:	75 83       	std	Z+5, r23	; 0x05
   1a06e:	64 83       	std	Z+4, r22	; 0x04
   1a070:	88 ee       	ldi	r24, 0xE8	; 232
   1a072:	94 e3       	ldi	r25, 0x34	; 52
   1a074:	a0 e0       	ldi	r26, 0x00	; 0
   1a076:	81 83       	std	Z+1, r24	; 0x01
   1a078:	92 83       	std	Z+2, r25	; 0x02
   1a07a:	a3 83       	std	Z+3, r26	; 0x03
   1a07c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1a080:	05 c0       	rjmp	.+10     	; 0x1a08c <lif_e010_pad_sector+0xa2>
    int pos,rem;

// Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1a082:	80 e0       	ldi	r24, 0x00	; 0
   1a084:	90 e0       	ldi	r25, 0x00	; 0
   1a086:	04 c0       	rjmp	.+8      	; 0x1a090 <lif_e010_pad_sector+0xa6>
   1a088:	ce 01       	movw	r24, r28
   1a08a:	02 c0       	rjmp	.+4      	; 0x1a090 <lif_e010_pad_sector+0xa6>
// Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & GPIB_PPR)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1a08c:	8f ef       	ldi	r24, 0xFF	; 255
   1a08e:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1a090:	cd b7       	in	r28, 0x3d	; 61
   1a092:	de b7       	in	r29, 0x3e	; 62
   1a094:	25 96       	adiw	r28, 0x05	; 5
   1a096:	e8 e0       	ldi	r30, 0x08	; 8
   1a098:	0c 94 fe e0 	jmp	0x1c1fc	; 0x1c1fc <__epilogue_restores__+0x14>

0001a09c <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1a09c:	a5 e0       	ldi	r26, 0x05	; 5
   1a09e:	b0 e0       	ldi	r27, 0x00	; 0
   1a0a0:	e4 e5       	ldi	r30, 0x54	; 84
   1a0a2:	f0 ed       	ldi	r31, 0xD0	; 208
   1a0a4:	0c 94 d8 e0 	jmp	0x1c1b0	; 0x1c1b0 <__prologue_saves__>
   1a0a8:	ec 01       	movw	r28, r24
   1a0aa:	4a 01       	movw	r8, r20
   1a0ac:	5b 01       	movw	r10, r22
   1a0ae:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;

// String size
    len = strlen(str);
   1a0b0:	fc 01       	movw	r30, r24
   1a0b2:	01 90       	ld	r0, Z+
   1a0b4:	00 20       	and	r0, r0
   1a0b6:	e9 f7       	brne	.-6      	; 0x1a0b2 <lif_ascii_string_to_e010+0x16>
   1a0b8:	31 97       	sbiw	r30, 0x01	; 1
   1a0ba:	6f 01       	movw	r12, r30
   1a0bc:	c8 1a       	sub	r12, r24
   1a0be:	d9 0a       	sbc	r13, r25
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a0c0:	41 2c       	mov	r4, r1
   1a0c2:	51 2c       	mov	r5, r1
   1a0c4:	32 01       	movw	r6, r4
   1a0c6:	53 94       	inc	r5
   1a0c8:	cb 01       	movw	r24, r22
   1a0ca:	ba 01       	movw	r22, r20
   1a0cc:	a3 01       	movw	r20, r6
   1a0ce:	92 01       	movw	r18, r4
   1a0d0:	0e 94 8d e0 	call	0x1c11a	; 0x1c11a <__divmodsi4>
   1a0d4:	21 2c       	mov	r2, r1
   1a0d6:	33 24       	eor	r3, r3
   1a0d8:	33 94       	inc	r3
   1a0da:	c1 01       	movw	r24, r2
   1a0dc:	86 1b       	sub	r24, r22
   1a0de:	97 0b       	sbc	r25, r23

/// We ALWAYS pad a sector if:
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1a0e0:	86 30       	cpi	r24, 0x06	; 6
   1a0e2:	91 05       	cpc	r25, r1
   1a0e4:	20 f0       	brcs	.+8      	; 0x1a0ee <lif_ascii_string_to_e010+0x52>
    ind = 0;

// Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1a0e6:	1c 01       	movw	r2, r24

// String size
    len = strlen(str);

// Output buffer index
    ind = 0;
   1a0e8:	00 e0       	ldi	r16, 0x00	; 0
   1a0ea:	10 e0       	ldi	r17, 0x00	; 0
   1a0ec:	17 c0       	rjmp	.+46     	; 0x1a11c <lif_ascii_string_to_e010+0x80>
///   There is no room for a 0xdf single header
///   - OR -
///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1a0ee:	a7 01       	movw	r20, r14
   1a0f0:	c5 01       	movw	r24, r10
   1a0f2:	b4 01       	movw	r22, r8
   1a0f4:	7a df       	rcall	.-268    	; 0x19fea <lif_e010_pad_sector>
   1a0f6:	8c 01       	movw	r16, r24
        if(ind < 0)
   1a0f8:	97 fd       	sbrc	r25, 7
   1a0fa:	81 c0       	rjmp	.+258    	; 0x1a1fe <lif_ascii_string_to_e010+0x162>
            return(ind);

// Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
// Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1a0fc:	09 2e       	mov	r0, r25
   1a0fe:	00 0c       	add	r0, r0
   1a100:	aa 0b       	sbc	r26, r26
   1a102:	bb 0b       	sbc	r27, r27
   1a104:	bc 01       	movw	r22, r24
   1a106:	cd 01       	movw	r24, r26
   1a108:	68 0d       	add	r22, r8
   1a10a:	79 1d       	adc	r23, r9
   1a10c:	8a 1d       	adc	r24, r10
   1a10e:	9b 1d       	adc	r25, r11
   1a110:	a3 01       	movw	r20, r6
   1a112:	92 01       	movw	r18, r4
   1a114:	0e 94 8d e0 	call	0x1c11a	; 0x1c11a <__divmodsi4>
   1a118:	26 1a       	sub	r2, r22
   1a11a:	37 0a       	sbc	r3, r23
   1a11c:	f7 01       	movw	r30, r14
   1a11e:	e0 0f       	add	r30, r16
   1a120:	f1 1f       	adc	r31, r17
   1a122:	0d 5f       	subi	r16, 0xFD	; 253
   1a124:	1f 4f       	sbci	r17, 0xFF	; 255
    }

// Note: IMPORTANT we have >= 6 bytes!!!

// Do not have to split, there is enough room
    if(rem >= (3 + len))
   1a126:	c6 01       	movw	r24, r12
   1a128:	02 96       	adiw	r24, 0x02	; 2
   1a12a:	82 15       	cp	r24, r2
   1a12c:	93 05       	cpc	r25, r3
   1a12e:	84 f4       	brge	.+32     	; 0x1a150 <lif_ascii_string_to_e010+0xb4>
    {

// Write string in new sector
// The full string + header will fit
        wbuf[ind++] = 0xDF;
   1a130:	8f ed       	ldi	r24, 0xDF	; 223
   1a132:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a134:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1a136:	d2 82       	std	Z+2, r13	; 0x02
   1a138:	f7 01       	movw	r30, r14
   1a13a:	e0 0f       	add	r30, r16
   1a13c:	f1 1f       	adc	r31, r17
   1a13e:	cf 01       	movw	r24, r30
   1a140:	8e 19       	sub	r24, r14
   1a142:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1a144:	29 91       	ld	r18, Y+
   1a146:	22 23       	and	r18, r18
   1a148:	09 f4       	brne	.+2      	; 0x1a14c <lif_ascii_string_to_e010+0xb0>
   1a14a:	59 c0       	rjmp	.+178    	; 0x1a1fe <lif_ascii_string_to_e010+0x162>
            wbuf[ind++] = *str++;
   1a14c:	21 93       	st	Z+, r18
   1a14e:	f7 cf       	rjmp	.-18     	; 0x1a13e <lif_ascii_string_to_e010+0xa2>

// CURRENT SECTOR
// String spans a sector , so split the string

// 1st Split string header
        wbuf[ind++] = 0xCF;
   1a150:	8f ec       	ldi	r24, 0xCF	; 207
   1a152:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1a154:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1a156:	d2 82       	std	Z+2, r13	; 0x02
   1a158:	d7 01       	movw	r26, r14
   1a15a:	a0 0f       	add	r26, r16
   1a15c:	b1 1f       	adc	r27, r17
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a15e:	fe 01       	movw	r30, r28
   1a160:	81 91       	ld	r24, Z+
   1a162:	81 11       	cpse	r24, r1
   1a164:	0e c0       	rjmp	.+28     	; 0x1a182 <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1a166:	c8 01       	movw	r24, r16
   1a168:	01 2e       	mov	r0, r17
   1a16a:	00 0c       	add	r0, r0
   1a16c:	aa 0b       	sbc	r26, r26
   1a16e:	bb 0b       	sbc	r27, r27
   1a170:	bc 01       	movw	r22, r24
   1a172:	cd 01       	movw	r24, r26
   1a174:	68 0d       	add	r22, r8
   1a176:	79 1d       	adc	r23, r9
   1a178:	8a 1d       	adc	r24, r10
   1a17a:	9b 1d       	adc	r25, r11
   1a17c:	61 11       	cpse	r22, r1
   1a17e:	09 c0       	rjmp	.+18     	; 0x1a192 <lif_ascii_string_to_e010+0xf6>
   1a180:	1f c0       	rjmp	.+62     	; 0x1a1c0 <lif_ascii_string_to_e010+0x124>
// 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
// Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1a182:	02 15       	cp	r16, r2
   1a184:	13 05       	cpc	r17, r3
   1a186:	7c f7       	brge	.-34     	; 0x1a166 <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1a188:	0f 5f       	subi	r16, 0xFF	; 255
   1a18a:	1f 4f       	sbci	r17, 0xFF	; 255
   1a18c:	8d 93       	st	X+, r24
   1a18e:	ef 01       	movw	r28, r30
   1a190:	e6 cf       	rjmp	.-52     	; 0x1a15e <lif_ascii_string_to_e010+0xc2>

// NEW SECTOR
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & GPIB_PPR)
   1a192:	20 91 b6 01 	lds	r18, 0x01B6	; 0x8001b6 <debuglevel>
   1a196:	21 ff       	sbrs	r18, 1
   1a198:	30 c0       	rjmp	.+96     	; 0x1a1fa <lif_ascii_string_to_e010+0x15e>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1a19a:	20 e0       	ldi	r18, 0x00	; 0
   1a19c:	31 e0       	ldi	r19, 0x01	; 1
   1a19e:	40 e0       	ldi	r20, 0x00	; 0
   1a1a0:	50 e0       	ldi	r21, 0x00	; 0
   1a1a2:	0e 94 8d e0 	call	0x1c11a	; 0x1c11a <__divmodsi4>
   1a1a6:	ed b7       	in	r30, 0x3d	; 61
   1a1a8:	fe b7       	in	r31, 0x3e	; 62
   1a1aa:	75 83       	std	Z+5, r23	; 0x05
   1a1ac:	64 83       	std	Z+4, r22	; 0x04
   1a1ae:	84 ec       	ldi	r24, 0xC4	; 196
   1a1b0:	94 e3       	ldi	r25, 0x34	; 52
   1a1b2:	a0 e0       	ldi	r26, 0x00	; 0
   1a1b4:	81 83       	std	Z+1, r24	; 0x01
   1a1b6:	92 83       	std	Z+2, r25	; 0x02
   1a1b8:	a3 83       	std	Z+3, r26	; 0x03
   1a1ba:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1a1be:	1d c0       	rjmp	.+58     	; 0x1a1fa <lif_ascii_string_to_e010+0x15e>
            return(-1);
        }

// Update remining string length
        len = strlen(str);
   1a1c0:	fe 01       	movw	r30, r28
   1a1c2:	01 90       	ld	r0, Z+
   1a1c4:	00 20       	and	r0, r0
   1a1c6:	e9 f7       	brne	.-6      	; 0x1a1c2 <lif_ascii_string_to_e010+0x126>
   1a1c8:	31 97       	sbiw	r30, 0x01	; 1
   1a1ca:	9f 01       	movw	r18, r30
   1a1cc:	2c 1b       	sub	r18, r28
   1a1ce:	3d 0b       	sbc	r19, r29
// 2nd Split string header
        wbuf[ind++] = 0x6F;
   1a1d0:	d7 01       	movw	r26, r14
   1a1d2:	a0 0f       	add	r26, r16
   1a1d4:	b1 1f       	adc	r27, r17
   1a1d6:	8f e6       	ldi	r24, 0x6F	; 111
   1a1d8:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1a1da:	fd 01       	movw	r30, r26
   1a1dc:	21 83       	std	Z+1, r18	; 0x01
        wbuf[ind++] = (len>>8) & 0xff;
   1a1de:	32 83       	std	Z+2, r19	; 0x02
   1a1e0:	0d 5f       	subi	r16, 0xFD	; 253
   1a1e2:	1f 4f       	sbci	r17, 0xFF	; 255
   1a1e4:	f7 01       	movw	r30, r14
   1a1e6:	e0 0f       	add	r30, r16
   1a1e8:	f1 1f       	adc	r31, r17
   1a1ea:	cf 01       	movw	r24, r30
   1a1ec:	8e 19       	sub	r24, r14
   1a1ee:	9f 09       	sbc	r25, r15
// Write string
        while(*str)
   1a1f0:	29 91       	ld	r18, Y+
   1a1f2:	22 23       	and	r18, r18
   1a1f4:	21 f0       	breq	.+8      	; 0x1a1fe <lif_ascii_string_to_e010+0x162>
            wbuf[ind++] = *str++;
   1a1f6:	21 93       	st	Z+, r18
   1a1f8:	f8 cf       	rjmp	.-16     	; 0x1a1ea <lif_ascii_string_to_e010+0x14e>
// Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & GPIB_PPR)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1a1fa:	8f ef       	ldi	r24, 0xFF	; 255
   1a1fc:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1a1fe:	cd b7       	in	r28, 0x3d	; 61
   1a200:	de b7       	in	r29, 0x3e	; 62
   1a202:	25 96       	adiw	r28, 0x05	; 5
   1a204:	e2 e1       	ldi	r30, 0x12	; 18
   1a206:	0c 94 f4 e0 	jmp	0x1c1e8	; 0x1c1e8 <__epilogue_restores__>

0001a20a <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1a20a:	ad e0       	ldi	r26, 0x0D	; 13
   1a20c:	b3 e0       	ldi	r27, 0x03	; 3
   1a20e:	eb e0       	ldi	r30, 0x0B	; 11
   1a210:	f1 ed       	ldi	r31, 0xD1	; 209
   1a212:	0c 94 d8 e0 	jmp	0x1c1b0	; 0x1c1b0 <__prologue_saves__>
   1a216:	5c 01       	movw	r10, r24
   1a218:	2a 01       	movw	r4, r20
   1a21a:	3b 01       	movw	r6, r22
   1a21c:	c9 01       	movw	r24, r18
// strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
// output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1a21e:	6e ef       	ldi	r22, 0xFE	; 254
   1a220:	78 e0       	ldi	r23, 0x08	; 8
   1a222:	0e 94 da bc 	call	0x179b4	; 0x179b4 <lif_open>
   1a226:	c7 5f       	subi	r28, 0xF7	; 247
   1a228:	dc 4f       	sbci	r29, 0xFC	; 252
   1a22a:	99 83       	std	Y+1, r25	; 0x01
   1a22c:	88 83       	st	Y, r24
   1a22e:	c9 50       	subi	r28, 0x09	; 9
   1a230:	d3 40       	sbci	r29, 0x03	; 3
    if(fi == NULL)
   1a232:	89 2b       	or	r24, r25
   1a234:	09 f4       	brne	.+2      	; 0x1a238 <lif_add_ascii_file_as_e010_wrapper+0x2e>
   1a236:	63 c0       	rjmp	.+198    	; 0x1a2fe <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1a238:	81 2c       	mov	r8, r1
   1a23a:	91 2c       	mov	r9, r1
   1a23c:	c1 2c       	mov	r12, r1
   1a23e:	d1 2c       	mov	r13, r1
   1a240:	76 01       	movw	r14, r12

        if(count > 256)
        {
            count = 0;
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
   1a242:	86 eb       	ldi	r24, 0xB6	; 182
   1a244:	94 e3       	ldi	r25, 0x34	; 52
   1a246:	9c 01       	movw	r18, r24
   1a248:	40 e0       	ldi	r20, 0x00	; 0
   1a24a:	c5 5f       	subi	r28, 0xF5	; 245
   1a24c:	dc 4f       	sbci	r29, 0xFC	; 252
   1a24e:	28 83       	st	Y, r18
   1a250:	39 83       	std	Y+1, r19	; 0x01
   1a252:	4a 83       	std	Y+2, r20	; 0x02
   1a254:	cb 50       	subi	r28, 0x0B	; 11
   1a256:	d3 40       	sbci	r29, 0x03	; 3
   1a258:	14 c0       	rjmp	.+40     	; 0x1a282 <lif_add_ascii_file_as_e010_wrapper+0x78>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1a25a:	c1 01       	movw	r24, r2
   1a25c:	03 2c       	mov	r0, r3
   1a25e:	00 0c       	add	r0, r0
   1a260:	aa 0b       	sbc	r26, r26
   1a262:	bb 0b       	sbc	r27, r27
   1a264:	48 0e       	add	r4, r24
   1a266:	59 1e       	adc	r5, r25
   1a268:	6a 1e       	adc	r6, r26
   1a26a:	7b 1e       	adc	r7, r27
        bytes += size;
   1a26c:	c8 0e       	add	r12, r24
   1a26e:	d9 1e       	adc	r13, r25
   1a270:	ea 1e       	adc	r14, r26
   1a272:	fb 1e       	adc	r15, r27
        count += size;
   1a274:	82 0c       	add	r8, r2
   1a276:	93 1c       	adc	r9, r3

        if(count > 256)
   1a278:	31 e0       	ldi	r19, 0x01	; 1
   1a27a:	83 16       	cp	r8, r19
   1a27c:	93 06       	cpc	r9, r19
   1a27e:	0c f0       	brlt	.+2      	; 0x1a282 <lif_add_ascii_file_as_e010_wrapper+0x78>
   1a280:	43 c0       	rjmp	.+134    	; 0x1a308 <lif_add_ascii_file_as_e010_wrapper+0xfe>
    bytes = 0;
    count = 0;

// Read user file and write LIF records
// reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1a282:	c7 5f       	subi	r28, 0xF7	; 247
   1a284:	dc 4f       	sbci	r29, 0xFC	; 252
   1a286:	48 81       	ld	r20, Y
   1a288:	59 81       	ldd	r21, Y+1	; 0x01
   1a28a:	c9 50       	subi	r28, 0x09	; 9
   1a28c:	d3 40       	sbci	r29, 0x03	; 3
   1a28e:	6d ef       	ldi	r22, 0xFD	; 253
   1a290:	70 e0       	ldi	r23, 0x00	; 0
   1a292:	ce 01       	movw	r24, r28
   1a294:	88 5f       	subi	r24, 0xF8	; 248
   1a296:	9d 4f       	sbci	r25, 0xFD	; 253
   1a298:	0e 94 9f 74 	call	0xe93e	; 0xe93e <fgets>
   1a29c:	89 2b       	or	r24, r25
   1a29e:	09 f4       	brne	.+2      	; 0x1a2a2 <lif_add_ascii_file_as_e010_wrapper+0x98>
   1a2a0:	4b c0       	rjmp	.+150    	; 0x1a338 <lif_add_ascii_file_as_e010_wrapper+0x12e>
    {
        trim_tail((char *)str);
   1a2a2:	ce 01       	movw	r24, r28
   1a2a4:	88 5f       	subi	r24, 0xF8	; 248
   1a2a6:	9d 4f       	sbci	r25, 0xFD	; 253
   1a2a8:	0e 94 62 2f 	call	0x5ec4	; 0x5ec4 <trim_tail>

        strcat((char *)str,"\r");                 // HP85 lines end with "\r"
   1a2ac:	6e e7       	ldi	r22, 0x7E	; 126
   1a2ae:	76 e1       	ldi	r23, 0x16	; 22
   1a2b0:	ce 01       	movw	r24, r28
   1a2b2:	88 5f       	subi	r24, 0xF8	; 248
   1a2b4:	9d 4f       	sbci	r25, 0xFD	; 253
   1a2b6:	0e 94 a5 2e 	call	0x5d4a	; 0x5d4a <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1a2ba:	9e 01       	movw	r18, r28
   1a2bc:	28 5f       	subi	r18, 0xF8	; 248
   1a2be:	3f 4f       	sbci	r19, 0xFF	; 255
   1a2c0:	b3 01       	movw	r22, r6
   1a2c2:	a2 01       	movw	r20, r4
   1a2c4:	ce 01       	movw	r24, r28
   1a2c6:	88 5f       	subi	r24, 0xF8	; 248
   1a2c8:	9d 4f       	sbci	r25, 0xFD	; 253
   1a2ca:	e8 de       	rcall	.-560    	; 0x1a09c <lif_ascii_string_to_e010>
   1a2cc:	1c 01       	movw	r2, r24
// Write string
// Now Write string
        if(LIF)
   1a2ce:	a1 14       	cp	r10, r1
   1a2d0:	b1 04       	cpc	r11, r1
   1a2d2:	19 f2       	breq	.-122    	; 0x1a25a <lif_add_ascii_file_as_e010_wrapper+0x50>
        {
            len = lif_write(LIF, obuf, offset, size);
   1a2d4:	8c 01       	movw	r16, r24
   1a2d6:	a3 01       	movw	r20, r6
   1a2d8:	92 01       	movw	r18, r4
   1a2da:	be 01       	movw	r22, r28
   1a2dc:	68 5f       	subi	r22, 0xF8	; 248
   1a2de:	7f 4f       	sbci	r23, 0xFF	; 255
   1a2e0:	c5 01       	movw	r24, r10
   1a2e2:	0e 94 af bd 	call	0x17b5e	; 0x17b5e <lif_write>
            if(len < size)
   1a2e6:	82 15       	cp	r24, r2
   1a2e8:	93 05       	cpc	r25, r3
   1a2ea:	0c f0       	brlt	.+2      	; 0x1a2ee <lif_add_ascii_file_as_e010_wrapper+0xe4>
   1a2ec:	b6 cf       	rjmp	.-148    	; 0x1a25a <lif_add_ascii_file_as_e010_wrapper+0x50>
            {
                fclose(fi);
   1a2ee:	c7 5f       	subi	r28, 0xF7	; 247
   1a2f0:	dc 4f       	sbci	r29, 0xFC	; 252
   1a2f2:	88 81       	ld	r24, Y
   1a2f4:	99 81       	ldd	r25, Y+1	; 0x01
   1a2f6:	c9 50       	subi	r28, 0x09	; 9
   1a2f8:	d3 40       	sbci	r29, 0x03	; 3
   1a2fa:	0e 94 31 7b 	call	0xf662	; 0xf662 <fclose>
                return(-1);
   1a2fe:	6f ef       	ldi	r22, 0xFF	; 255
   1a300:	7f ef       	ldi	r23, 0xFF	; 255
   1a302:	8f ef       	ldi	r24, 0xFF	; 255
   1a304:	9f ef       	ldi	r25, 0xFF	; 255
   1a306:	84 c0       	rjmp	.+264    	; 0x1a410 <lif_add_ascii_file_as_e010_wrapper+0x206>
        count += size;

        if(count > 256)
        {
            count = 0;
            if(LIF)
   1a308:	a1 14       	cp	r10, r1
   1a30a:	b1 04       	cpc	r11, r1
   1a30c:	91 f0       	breq	.+36     	; 0x1a332 <lif_add_ascii_file_as_e010_wrapper+0x128>
                printf("\tWrote: %8ld\r", (long)bytes);
   1a30e:	ed b7       	in	r30, 0x3d	; 61
   1a310:	fe b7       	in	r31, 0x3e	; 62
   1a312:	c4 82       	std	Z+4, r12	; 0x04
   1a314:	d5 82       	std	Z+5, r13	; 0x05
   1a316:	e6 82       	std	Z+6, r14	; 0x06
   1a318:	f7 82       	std	Z+7, r15	; 0x07
   1a31a:	c5 5f       	subi	r28, 0xF5	; 245
   1a31c:	dc 4f       	sbci	r29, 0xFC	; 252
   1a31e:	28 81       	ld	r18, Y
   1a320:	39 81       	ldd	r19, Y+1	; 0x01
   1a322:	4a 81       	ldd	r20, Y+2	; 0x02
   1a324:	cb 50       	subi	r28, 0x0B	; 11
   1a326:	d3 40       	sbci	r29, 0x03	; 3
   1a328:	21 83       	std	Z+1, r18	; 0x01
   1a32a:	32 83       	std	Z+2, r19	; 0x02
   1a32c:	43 83       	std	Z+3, r20	; 0x03
   1a32e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        bytes += size;
        count += size;

        if(count > 256)
        {
            count = 0;
   1a332:	81 2c       	mov	r8, r1
   1a334:	91 2c       	mov	r9, r1
   1a336:	a5 cf       	rjmp	.-182    	; 0x1a282 <lif_add_ascii_file_as_e010_wrapper+0x78>
            if(LIF)
                printf("\tWrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1a338:	c7 5f       	subi	r28, 0xF7	; 247
   1a33a:	dc 4f       	sbci	r29, 0xFC	; 252
   1a33c:	88 81       	ld	r24, Y
   1a33e:	99 81       	ldd	r25, Y+1	; 0x01
   1a340:	c9 50       	subi	r28, 0x09	; 9
   1a342:	d3 40       	sbci	r29, 0x03	; 3
   1a344:	0e 94 31 7b 	call	0xf662	; 0xf662 <fclose>

// Write EOF
    str[0] = 0;
   1a348:	c8 5f       	subi	r28, 0xF8	; 248
   1a34a:	dd 4f       	sbci	r29, 0xFD	; 253
   1a34c:	18 82       	st	Y, r1
   1a34e:	c8 50       	subi	r28, 0x08	; 8
   1a350:	d2 40       	sbci	r29, 0x02	; 2
// We only want to return the count of bytes in the file NOT the padding at the end
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1a352:	9e 01       	movw	r18, r28
   1a354:	28 5f       	subi	r18, 0xF8	; 248
   1a356:	3f 4f       	sbci	r19, 0xFF	; 255
   1a358:	b3 01       	movw	r22, r6
   1a35a:	a2 01       	movw	r20, r4
   1a35c:	ce 01       	movw	r24, r28
   1a35e:	88 5f       	subi	r24, 0xF8	; 248
   1a360:	9d 4f       	sbci	r25, 0xFD	; 253
   1a362:	9c de       	rcall	.-712    	; 0x1a09c <lif_ascii_string_to_e010>
   1a364:	4c 01       	movw	r8, r24

    if(LIF)
   1a366:	a1 14       	cp	r10, r1
   1a368:	b1 04       	cpc	r11, r1
   1a36a:	d1 f4       	brne	.+52     	; 0x1a3a0 <lif_add_ascii_file_as_e010_wrapper+0x196>
            return(-1);

    }

    offset += size;
    bytes += size;
   1a36c:	c4 01       	movw	r24, r8
   1a36e:	09 2c       	mov	r0, r9
   1a370:	00 0c       	add	r0, r0
   1a372:	aa 0b       	sbc	r26, r26
   1a374:	bb 0b       	sbc	r27, r27
   1a376:	c8 0e       	add	r12, r24
   1a378:	d9 1e       	adc	r13, r25
   1a37a:	ea 1e       	adc	r14, r26
   1a37c:	fb 1e       	adc	r15, r27

// PAD
    size = lif_e010_pad_sector(offset, obuf);
   1a37e:	12 01       	movw	r2, r4
   1a380:	23 01       	movw	r4, r6
   1a382:	28 0e       	add	r2, r24
   1a384:	39 1e       	adc	r3, r25
   1a386:	4a 1e       	adc	r4, r26
   1a388:	5b 1e       	adc	r5, r27
   1a38a:	ae 01       	movw	r20, r28
   1a38c:	48 5f       	subi	r20, 0xF8	; 248
   1a38e:	5f 4f       	sbci	r21, 0xFF	; 255
   1a390:	c2 01       	movw	r24, r4
   1a392:	b1 01       	movw	r22, r2
   1a394:	2a de       	rcall	.-940    	; 0x19fea <lif_e010_pad_sector>
   1a396:	3c 01       	movw	r6, r24
    if(LIF)
   1a398:	a1 14       	cp	r10, r1
   1a39a:	b1 04       	cpc	r11, r1
   1a39c:	e1 f4       	brne	.+56     	; 0x1a3d6 <lif_add_ascii_file_as_e010_wrapper+0x1cc>
   1a39e:	36 c0       	rjmp	.+108    	; 0x1a40c <lif_add_ascii_file_as_e010_wrapper+0x202>
// Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("\tWrote: %8ld\r", (long)bytes);
   1a3a0:	ed b7       	in	r30, 0x3d	; 61
   1a3a2:	fe b7       	in	r31, 0x3e	; 62
   1a3a4:	c4 82       	std	Z+4, r12	; 0x04
   1a3a6:	d5 82       	std	Z+5, r13	; 0x05
   1a3a8:	e6 82       	std	Z+6, r14	; 0x06
   1a3aa:	f7 82       	std	Z+7, r15	; 0x07
   1a3ac:	88 ea       	ldi	r24, 0xA8	; 168
   1a3ae:	94 e3       	ldi	r25, 0x34	; 52
   1a3b0:	a0 e0       	ldi	r26, 0x00	; 0
   1a3b2:	81 83       	std	Z+1, r24	; 0x01
   1a3b4:	92 83       	std	Z+2, r25	; 0x02
   1a3b6:	a3 83       	std	Z+3, r26	; 0x03
   1a3b8:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1a3bc:	84 01       	movw	r16, r8
   1a3be:	a3 01       	movw	r20, r6
   1a3c0:	92 01       	movw	r18, r4
   1a3c2:	be 01       	movw	r22, r28
   1a3c4:	68 5f       	subi	r22, 0xF8	; 248
   1a3c6:	7f 4f       	sbci	r23, 0xFF	; 255
   1a3c8:	c5 01       	movw	r24, r10
   1a3ca:	0e 94 af bd 	call	0x17b5e	; 0x17b5e <lif_write>
        if(len < size)
   1a3ce:	88 15       	cp	r24, r8
   1a3d0:	99 05       	cpc	r25, r9
   1a3d2:	64 f6       	brge	.-104    	; 0x1a36c <lif_add_ascii_file_as_e010_wrapper+0x162>
   1a3d4:	94 cf       	rjmp	.-216    	; 0x1a2fe <lif_add_ascii_file_as_e010_wrapper+0xf4>

// PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1a3d6:	8c 01       	movw	r16, r24
   1a3d8:	a2 01       	movw	r20, r4
   1a3da:	91 01       	movw	r18, r2
   1a3dc:	be 01       	movw	r22, r28
   1a3de:	68 5f       	subi	r22, 0xF8	; 248
   1a3e0:	7f 4f       	sbci	r23, 0xFF	; 255
   1a3e2:	c5 01       	movw	r24, r10
   1a3e4:	0e 94 af bd 	call	0x17b5e	; 0x17b5e <lif_write>
        if(len < size)
   1a3e8:	86 15       	cp	r24, r6
   1a3ea:	97 05       	cpc	r25, r7
   1a3ec:	0c f4       	brge	.+2      	; 0x1a3f0 <lif_add_ascii_file_as_e010_wrapper+0x1e6>
   1a3ee:	87 cf       	rjmp	.-242    	; 0x1a2fe <lif_add_ascii_file_as_e010_wrapper+0xf4>
            return(-1);
    }

    if(LIF)
        printf("\tWrote: %8ld\r",(long)bytes);
   1a3f0:	ed b7       	in	r30, 0x3d	; 61
   1a3f2:	fe b7       	in	r31, 0x3e	; 62
   1a3f4:	c4 82       	std	Z+4, r12	; 0x04
   1a3f6:	d5 82       	std	Z+5, r13	; 0x05
   1a3f8:	e6 82       	std	Z+6, r14	; 0x06
   1a3fa:	f7 82       	std	Z+7, r15	; 0x07
   1a3fc:	8a e9       	ldi	r24, 0x9A	; 154
   1a3fe:	94 e3       	ldi	r25, 0x34	; 52
   1a400:	a0 e0       	ldi	r26, 0x00	; 0
   1a402:	81 83       	std	Z+1, r24	; 0x01
   1a404:	92 83       	std	Z+2, r25	; 0x02
   1a406:	a3 83       	std	Z+3, r26	; 0x03
   1a408:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

    return(bytes);
   1a40c:	b6 01       	movw	r22, r12
   1a40e:	c7 01       	movw	r24, r14
}
   1a410:	c3 5f       	subi	r28, 0xF3	; 243
   1a412:	dc 4f       	sbci	r29, 0xFC	; 252
   1a414:	e2 e1       	ldi	r30, 0x12	; 18
   1a416:	0c 94 f4 e0 	jmp	0x1c1e8	; 0x1c1e8 <__epilogue_restores__>

0001a41a <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1a41a:	ab e3       	ldi	r26, 0x3B	; 59
   1a41c:	b0 e0       	ldi	r27, 0x00	; 0
   1a41e:	e3 e1       	ldi	r30, 0x13	; 19
   1a420:	f2 ed       	ldi	r31, 0xD2	; 210
   1a422:	0c 94 d8 e0 	jmp	0x1c1b0	; 0x1c1b0 <__prologue_saves__>
   1a426:	6c 01       	movw	r12, r24
   1a428:	1b 01       	movw	r2, r22
   1a42a:	7a 01       	movw	r14, r20
    long offset;
    int index;
    lif_t *LIF;
    stat_t st, *sp;

    if(!*lifimagename)
   1a42c:	fc 01       	movw	r30, r24
   1a42e:	80 81       	ld	r24, Z
   1a430:	81 11       	cpse	r24, r1
   1a432:	03 c0       	rjmp	.+6      	; 0x1a43a <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1a434:	87 e6       	ldi	r24, 0x67	; 103
   1a436:	94 e3       	ldi	r25, 0x34	; 52
   1a438:	1a c0       	rjmp	.+52     	; 0x1a46e <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1a43a:	fb 01       	movw	r30, r22
   1a43c:	80 81       	ld	r24, Z
   1a43e:	81 11       	cpse	r24, r1
   1a440:	03 c0       	rjmp	.+6      	; 0x1a448 <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1a442:	89 e3       	ldi	r24, 0x39	; 57
   1a444:	94 e3       	ldi	r25, 0x34	; 52
   1a446:	13 c0       	rjmp	.+38     	; 0x1a46e <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1a448:	fa 01       	movw	r30, r20
   1a44a:	80 81       	ld	r24, Z
   1a44c:	81 11       	cpse	r24, r1
   1a44e:	03 c0       	rjmp	.+6      	; 0x1a456 <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1a450:	8a e0       	ldi	r24, 0x0A	; 10
   1a452:	94 e3       	ldi	r25, 0x34	; 52
   1a454:	0c c0       	rjmp	.+24     	; 0x1a46e <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

//Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1a456:	be 01       	movw	r22, r28
   1a458:	66 5f       	subi	r22, 0xF6	; 246
   1a45a:	7f 4f       	sbci	r23, 0xFF	; 255
   1a45c:	ca 01       	movw	r24, r20
   1a45e:	0e 94 04 bd 	call	0x17a08	; 0x17a08 <lif_stat>
   1a462:	9b af       	std	Y+59, r25	; 0x3b
   1a464:	8a af       	std	Y+58, r24	; 0x3a
    if(!sp)
   1a466:	89 2b       	or	r24, r25
   1a468:	59 f4       	brne	.+22     	; 0x1a480 <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1a46a:	8a ed       	ldi	r24, 0xDA	; 218
   1a46c:	93 e3       	ldi	r25, 0x33	; 51
   1a46e:	a0 e0       	ldi	r26, 0x00	; 0
   1a470:	ed b7       	in	r30, 0x3d	; 61
   1a472:	fe b7       	in	r31, 0x3e	; 62
   1a474:	81 83       	std	Z+1, r24	; 0x01
   1a476:	92 83       	std	Z+2, r25	; 0x02
   1a478:	a3 83       	std	Z+3, r26	; 0x03
   1a47a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1a47e:	01 c1       	rjmp	.+514    	; 0x1a682 <lif_add_ascii_file_as_e010+0x268>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1a480:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a484:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a488:	92 ff       	sbrs	r25, 2
   1a48a:	10 c0       	rjmp	.+32     	; 0x1a4ac <lif_add_ascii_file_as_e010+0x92>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1a48c:	ed b7       	in	r30, 0x3d	; 61
   1a48e:	fe b7       	in	r31, 0x3e	; 62
   1a490:	f1 86       	std	Z+9, r15	; 0x09
   1a492:	e0 86       	std	Z+8, r14	; 0x08
   1a494:	37 82       	std	Z+7, r3	; 0x07
   1a496:	26 82       	std	Z+6, r2	; 0x06
   1a498:	d5 82       	std	Z+5, r13	; 0x05
   1a49a:	c4 82       	std	Z+4, r12	; 0x04
   1a49c:	8b ea       	ldi	r24, 0xAB	; 171
   1a49e:	93 e3       	ldi	r25, 0x33	; 51
   1a4a0:	a0 e0       	ldi	r26, 0x00	; 0
   1a4a2:	81 83       	std	Z+1, r24	; 0x01
   1a4a4:	92 83       	std	Z+2, r25	; 0x02
   1a4a6:	a3 83       	std	Z+3, r26	; 0x03
   1a4a8:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            lifimagename, lifname, userfile);

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1a4ac:	97 01       	movw	r18, r14
   1a4ae:	40 e0       	ldi	r20, 0x00	; 0
   1a4b0:	50 e0       	ldi	r21, 0x00	; 0
   1a4b2:	ba 01       	movw	r22, r20
   1a4b4:	80 e0       	ldi	r24, 0x00	; 0
   1a4b6:	90 e0       	ldi	r25, 0x00	; 0
   1a4b8:	a8 de       	rcall	.-688    	; 0x1a20a <lif_add_ascii_file_as_e010_wrapper>
   1a4ba:	4b 01       	movw	r8, r22
   1a4bc:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1a4be:	47 2e       	mov	r4, r23
   1a4c0:	58 2e       	mov	r5, r24
   1a4c2:	69 2e       	mov	r6, r25
   1a4c4:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1a4c6:	66 23       	and	r22, r22
   1a4c8:	29 f0       	breq	.+10     	; 0x1a4d4 <lif_add_ascii_file_as_e010+0xba>
        ++sectors;
   1a4ca:	ff ef       	ldi	r31, 0xFF	; 255
   1a4cc:	4f 1a       	sub	r4, r31
   1a4ce:	5f 0a       	sbc	r5, r31
   1a4d0:	6f 0a       	sbc	r6, r31
   1a4d2:	7f 0a       	sbc	r7, r31

// Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1a4d4:	61 e0       	ldi	r22, 0x01	; 1
   1a4d6:	79 e0       	ldi	r23, 0x09	; 9
   1a4d8:	c6 01       	movw	r24, r12
   1a4da:	57 da       	rcall	.-2898   	; 0x1998a <lif_open_volume>
   1a4dc:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1a4de:	00 97       	sbiw	r24, 0x00	; 0
   1a4e0:	09 f4       	brne	.+2      	; 0x1a4e4 <lif_add_ascii_file_as_e010+0xca>
   1a4e2:	cf c0       	rjmp	.+414    	; 0x1a682 <lif_add_ascii_file_as_e010+0x268>
        return(-1);

// Now find free record
    index = lif_newdir(LIF, sectors);
   1a4e4:	b3 01       	movw	r22, r6
   1a4e6:	a2 01       	movw	r20, r4
   1a4e8:	f0 d8       	rcall	.-3616   	; 0x196ca <lif_newdir>
   1a4ea:	3c 01       	movw	r6, r24
    if(index == -1)
   1a4ec:	8f ef       	ldi	r24, 0xFF	; 255
   1a4ee:	68 16       	cp	r6, r24
   1a4f0:	78 06       	cpc	r7, r24
   1a4f2:	79 f4       	brne	.+30     	; 0x1a512 <lif_add_ascii_file_as_e010+0xf8>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1a4f4:	ed b7       	in	r30, 0x3d	; 61
   1a4f6:	fe b7       	in	r31, 0x3e	; 62
   1a4f8:	f7 82       	std	Z+7, r15	; 0x07
   1a4fa:	e6 82       	std	Z+6, r14	; 0x06
   1a4fc:	d5 82       	std	Z+5, r13	; 0x05
   1a4fe:	c4 82       	std	Z+4, r12	; 0x04
   1a500:	8b e7       	ldi	r24, 0x7B	; 123
   1a502:	93 e3       	ldi	r25, 0x33	; 51
   1a504:	a0 e0       	ldi	r26, 0x00	; 0
   1a506:	81 83       	std	Z+1, r24	; 0x01
   1a508:	92 83       	std	Z+2, r25	; 0x02
   1a50a:	a3 83       	std	Z+3, r26	; 0x03
   1a50c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1a510:	a0 c0       	rjmp	.+320    	; 0x1a652 <lif_add_ascii_file_as_e010+0x238>
        lif_closedir(LIF);
        return(-1);
    }

// Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1a512:	68 01       	movw	r12, r16
   1a514:	ff e4       	ldi	r31, 0x4F	; 79
   1a516:	cf 0e       	add	r12, r31
   1a518:	d1 1c       	adc	r13, r1
   1a51a:	4a e0       	ldi	r20, 0x0A	; 10
   1a51c:	50 e0       	ldi	r21, 0x00	; 0
   1a51e:	b1 01       	movw	r22, r2
   1a520:	c6 01       	movw	r24, r12
   1a522:	0e 94 af be 	call	0x17d5e	; 0x17d5e <lif_fixname>
    LIF->DIR.FileType = 0xe010;                   // 10
   1a526:	80 e1       	ldi	r24, 0x10	; 16
   1a528:	90 ee       	ldi	r25, 0xE0	; 224
   1a52a:	f8 01       	movw	r30, r16
   1a52c:	e6 5a       	subi	r30, 0xA6	; 166
   1a52e:	ff 4f       	sbci	r31, 0xFF	; 255
   1a530:	91 83       	std	Z+1, r25	; 0x01
   1a532:	80 83       	st	Z, r24
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1a534:	ea ad       	ldd	r30, Y+58	; 0x3a
   1a536:	fb ad       	ldd	r31, Y+59	; 0x3b
   1a538:	60 a5       	ldd	r22, Z+40	; 0x28
   1a53a:	71 a5       	ldd	r23, Z+41	; 0x29
   1a53c:	82 a5       	ldd	r24, Z+42	; 0x2a
   1a53e:	93 a5       	ldd	r25, Z+43	; 0x2b
   1a540:	a8 01       	movw	r20, r16
   1a542:	4c 59       	subi	r20, 0x9C	; 156
   1a544:	5f 4f       	sbci	r21, 0xFF	; 255
   1a546:	0e 94 d4 c0 	call	0x181a8	; 0x181a8 <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;                  // 26
   1a54a:	81 e0       	ldi	r24, 0x01	; 1
   1a54c:	90 e8       	ldi	r25, 0x80	; 128
   1a54e:	f8 01       	movw	r30, r16
   1a550:	e6 59       	subi	r30, 0x96	; 150
   1a552:	ff 4f       	sbci	r31, 0xFF	; 255
   1a554:	91 83       	std	Z+1, r25	; 0x01
   1a556:	80 83       	st	Z, r24
    LIF->DIR.FileBytes = bytes;                   // 28
   1a558:	32 96       	adiw	r30, 0x02	; 2
   1a55a:	91 82       	std	Z+1, r9	; 0x01
   1a55c:	80 82       	st	Z, r8
    LIF->DIR.SectorSize  = 0x100;                 // 30
   1a55e:	80 e0       	ldi	r24, 0x00	; 0
   1a560:	91 e0       	ldi	r25, 0x01	; 1
   1a562:	32 96       	adiw	r30, 0x02	; 2
   1a564:	91 83       	std	Z+1, r25	; 0x01
   1a566:	80 83       	st	Z, r24
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1a568:	58 01       	movw	r10, r16
   1a56a:	fc e5       	ldi	r31, 0x5C	; 92
   1a56c:	af 0e       	add	r10, r31
   1a56e:	b1 1c       	adc	r11, r1
   1a570:	f5 01       	movw	r30, r10
   1a572:	80 81       	ld	r24, Z
   1a574:	91 81       	ldd	r25, Z+1	; 0x01
   1a576:	a2 81       	ldd	r26, Z+2	; 0x02
   1a578:	b3 81       	ldd	r27, Z+3	; 0x03
   1a57a:	22 24       	eor	r2, r2
   1a57c:	38 2e       	mov	r3, r24
   1a57e:	49 2e       	mov	r4, r25
   1a580:	5a 2e       	mov	r5, r26

    if(debuglevel & LIF_DEBUG)
   1a582:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a586:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a58a:	92 ff       	sbrs	r25, 2
   1a58c:	05 c0       	rjmp	.+10     	; 0x1a598 <lif_add_ascii_file_as_e010+0x17e>
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1a58e:	60 e8       	ldi	r22, 0x80	; 128
   1a590:	76 e1       	ldi	r23, 0x16	; 22
   1a592:	c8 01       	movw	r24, r16
   1a594:	0e 94 c0 c1 	call	0x18380	; 0x18380 <lif_dump_vol>

// Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1a598:	97 01       	movw	r18, r14
   1a59a:	b2 01       	movw	r22, r4
   1a59c:	a1 01       	movw	r20, r2
   1a59e:	c8 01       	movw	r24, r16
   1a5a0:	34 de       	rcall	.-920    	; 0x1a20a <lif_add_ascii_file_as_e010_wrapper>
   1a5a2:	4b 01       	movw	r8, r22
   1a5a4:	7c 01       	movw	r14, r24

    if(debuglevel & LIF_DEBUG)
   1a5a6:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1a5aa:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1a5ae:	92 ff       	sbrs	r25, 2
   1a5b0:	4a c0       	rjmp	.+148    	; 0x1a646 <lif_add_ascii_file_as_e010+0x22c>
    {
        printf("New Directory Information AFTER write\n");
   1a5b2:	84 e5       	ldi	r24, 0x54	; 84
   1a5b4:	93 e3       	ldi	r25, 0x33	; 51
   1a5b6:	a0 e0       	ldi	r26, 0x00	; 0
   1a5b8:	ed b7       	in	r30, 0x3d	; 61
   1a5ba:	fe b7       	in	r31, 0x3e	; 62
   1a5bc:	81 83       	std	Z+1, r24	; 0x01
   1a5be:	92 83       	std	Z+2, r25	; 0x02
   1a5c0:	a3 83       	std	Z+3, r26	; 0x03
   1a5c2:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1a5c6:	ed b7       	in	r30, 0x3d	; 61
   1a5c8:	fe b7       	in	r31, 0x3e	; 62
   1a5ca:	d5 82       	std	Z+5, r13	; 0x05
   1a5cc:	c4 82       	std	Z+4, r12	; 0x04
   1a5ce:	8d e3       	ldi	r24, 0x3D	; 61
   1a5d0:	93 e3       	ldi	r25, 0x33	; 51
   1a5d2:	a0 e0       	ldi	r26, 0x00	; 0
   1a5d4:	81 83       	std	Z+1, r24	; 0x01
   1a5d6:	92 83       	std	Z+2, r25	; 0x02
   1a5d8:	a3 83       	std	Z+3, r26	; 0x03
   1a5da:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1a5de:	ed b7       	in	r30, 0x3d	; 61
   1a5e0:	fe b7       	in	r31, 0x3e	; 62
   1a5e2:	75 82       	std	Z+5, r7	; 0x05
   1a5e4:	64 82       	std	Z+4, r6	; 0x04
   1a5e6:	86 e2       	ldi	r24, 0x26	; 38
   1a5e8:	93 e3       	ldi	r25, 0x33	; 51
   1a5ea:	a0 e0       	ldi	r26, 0x00	; 0
   1a5ec:	81 83       	std	Z+1, r24	; 0x01
   1a5ee:	92 83       	std	Z+2, r25	; 0x02
   1a5f0:	a3 83       	std	Z+3, r26	; 0x03
   1a5f2:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1a5f6:	f5 01       	movw	r30, r10
   1a5f8:	80 81       	ld	r24, Z
   1a5fa:	91 81       	ldd	r25, Z+1	; 0x01
   1a5fc:	a2 81       	ldd	r26, Z+2	; 0x02
   1a5fe:	b3 81       	ldd	r27, Z+3	; 0x03
   1a600:	ed b7       	in	r30, 0x3d	; 61
   1a602:	fe b7       	in	r31, 0x3e	; 62
   1a604:	84 83       	std	Z+4, r24	; 0x04
   1a606:	95 83       	std	Z+5, r25	; 0x05
   1a608:	a6 83       	std	Z+6, r26	; 0x06
   1a60a:	b7 83       	std	Z+7, r27	; 0x07
   1a60c:	8d e0       	ldi	r24, 0x0D	; 13
   1a60e:	93 e3       	ldi	r25, 0x33	; 51
   1a610:	a0 e0       	ldi	r26, 0x00	; 0
   1a612:	81 83       	std	Z+1, r24	; 0x01
   1a614:	92 83       	std	Z+2, r25	; 0x02
   1a616:	a3 83       	std	Z+3, r26	; 0x03
   1a618:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1a61c:	f8 01       	movw	r30, r16
   1a61e:	e0 5a       	subi	r30, 0xA0	; 160
   1a620:	ff 4f       	sbci	r31, 0xFF	; 255
   1a622:	80 81       	ld	r24, Z
   1a624:	91 81       	ldd	r25, Z+1	; 0x01
   1a626:	a2 81       	ldd	r26, Z+2	; 0x02
   1a628:	b3 81       	ldd	r27, Z+3	; 0x03
   1a62a:	ed b7       	in	r30, 0x3d	; 61
   1a62c:	fe b7       	in	r31, 0x3e	; 62
   1a62e:	84 83       	std	Z+4, r24	; 0x04
   1a630:	95 83       	std	Z+5, r25	; 0x05
   1a632:	a6 83       	std	Z+6, r26	; 0x06
   1a634:	b7 83       	std	Z+7, r27	; 0x07
   1a636:	84 ef       	ldi	r24, 0xF4	; 244
   1a638:	92 e3       	ldi	r25, 0x32	; 50
   1a63a:	a0 e0       	ldi	r26, 0x00	; 0
   1a63c:	81 83       	std	Z+1, r24	; 0x01
   1a63e:	92 83       	std	Z+2, r25	; 0x02
   1a640:	a3 83       	std	Z+3, r26	; 0x03
   1a642:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    }

// Write directory record
// Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1a646:	b3 01       	movw	r22, r6
   1a648:	c8 01       	movw	r24, r16
   1a64a:	0e 94 ff c6 	call	0x18dfe	; 0x18dfe <lif_writedirindex>
   1a64e:	89 2b       	or	r24, r25
   1a650:	21 f4       	brne	.+8      	; 0x1a65a <lif_add_ascii_file_as_e010+0x240>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a652:	c8 01       	movw	r24, r16
   1a654:	0e 94 0a c6 	call	0x18c14	; 0x18c14 <lif_close_volume>
   1a658:	14 c0       	rjmp	.+40     	; 0x1a682 <lif_add_ascii_file_as_e010+0x268>
   1a65a:	c8 01       	movw	r24, r16
   1a65c:	0e 94 0a c6 	call	0x18c14	; 0x18c14 <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("\tWrote: %8ld\n", bytes);
   1a660:	ed b7       	in	r30, 0x3d	; 61
   1a662:	fe b7       	in	r31, 0x3e	; 62
   1a664:	84 82       	std	Z+4, r8	; 0x04
   1a666:	95 82       	std	Z+5, r9	; 0x05
   1a668:	e6 82       	std	Z+6, r14	; 0x06
   1a66a:	f7 82       	std	Z+7, r15	; 0x07
   1a66c:	86 ee       	ldi	r24, 0xE6	; 230
   1a66e:	92 e3       	ldi	r25, 0x32	; 50
   1a670:	a0 e0       	ldi	r26, 0x00	; 0
   1a672:	81 83       	std	Z+1, r24	; 0x01
   1a674:	92 83       	std	Z+2, r25	; 0x02
   1a676:	a3 83       	std	Z+3, r26	; 0x03
   1a678:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

// Return file size
    return(bytes);
   1a67c:	b4 01       	movw	r22, r8
   1a67e:	c7 01       	movw	r24, r14
   1a680:	04 c0       	rjmp	.+8      	; 0x1a68a <lif_add_ascii_file_as_e010+0x270>
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1);
   1a682:	6f ef       	ldi	r22, 0xFF	; 255
   1a684:	7f ef       	ldi	r23, 0xFF	; 255
   1a686:	8f ef       	ldi	r24, 0xFF	; 255
   1a688:	9f ef       	ldi	r25, 0xFF	; 255

    printf("\tWrote: %8ld\n", bytes);

// Return file size
    return(bytes);
}
   1a68a:	eb 96       	adiw	r28, 0x3b	; 59
   1a68c:	e2 e1       	ldi	r30, 0x12	; 18
   1a68e:	0c 94 f4 e0 	jmp	0x1c1e8	; 0x1c1e8 <__epilogue_restores__>

0001a692 <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1a692:	a7 e3       	ldi	r26, 0x37	; 55
   1a694:	b2 e0       	ldi	r27, 0x02	; 2
   1a696:	ef e4       	ldi	r30, 0x4F	; 79
   1a698:	f3 ed       	ldi	r31, 0xD3	; 211
   1a69a:	0c 94 d8 e0 	jmp	0x1c1b0	; 0x1c1b0 <__prologue_saves__>
   1a69e:	7c 01       	movw	r14, r24
   1a6a0:	8b 01       	movw	r16, r22
   1a6a2:	ca 5d       	subi	r28, 0xDA	; 218
   1a6a4:	dd 4f       	sbci	r29, 0xFD	; 253
   1a6a6:	59 83       	std	Y+1, r21	; 0x01
   1a6a8:	48 83       	st	Y, r20
   1a6aa:	c6 52       	subi	r28, 0x26	; 38
   1a6ac:	d2 40       	sbci	r29, 0x02	; 2
// read buffer
    uint8_t buf[LIF_SECTOR_SIZE+4];
// Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1a6ae:	62 e4       	ldi	r22, 0x42	; 66
   1a6b0:	73 e0       	ldi	r23, 0x03	; 3
   1a6b2:	6b d9       	rcall	.-3370   	; 0x1998a <lif_open_volume>
   1a6b4:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1a6b6:	00 97       	sbiw	r24, 0x00	; 0
   1a6b8:	69 f4       	brne	.+26     	; 0x1a6d4 <lif_extract_e010_as_ascii+0x42>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1a6ba:	ed b7       	in	r30, 0x3d	; 61
   1a6bc:	fe b7       	in	r31, 0x3e	; 62
   1a6be:	f5 82       	std	Z+5, r15	; 0x05
   1a6c0:	e4 82       	std	Z+4, r14	; 0x04
   1a6c2:	8e ec       	ldi	r24, 0xCE	; 206
   1a6c4:	92 e3       	ldi	r25, 0x32	; 50
   1a6c6:	a0 e0       	ldi	r26, 0x00	; 0
   1a6c8:	81 83       	std	Z+1, r24	; 0x01
   1a6ca:	92 83       	std	Z+2, r25	; 0x02
   1a6cc:	a3 83       	std	Z+3, r26	; 0x03
   1a6ce:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1a6d2:	13 c0       	rjmp	.+38     	; 0x1a6fa <lif_extract_e010_as_ascii+0x68>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1a6d4:	b8 01       	movw	r22, r16
   1a6d6:	28 dc       	rcall	.-1968   	; 0x19f28 <lif_find_file>
    if(index == -1)
   1a6d8:	01 96       	adiw	r24, 0x01	; 1
   1a6da:	91 f4       	brne	.+36     	; 0x1a700 <lif_extract_e010_as_ascii+0x6e>
    {
        printf("LIF File not found:%s\n", lifname);
   1a6dc:	ed b7       	in	r30, 0x3d	; 61
   1a6de:	fe b7       	in	r31, 0x3e	; 62
   1a6e0:	15 83       	std	Z+5, r17	; 0x05
   1a6e2:	04 83       	std	Z+4, r16	; 0x04
   1a6e4:	87 eb       	ldi	r24, 0xB7	; 183
   1a6e6:	92 e3       	ldi	r25, 0x32	; 50
   1a6e8:	a0 e0       	ldi	r26, 0x00	; 0
   1a6ea:	81 83       	std	Z+1, r24	; 0x01
   1a6ec:	92 83       	std	Z+2, r25	; 0x02
   1a6ee:	a3 83       	std	Z+3, r26	; 0x03
   1a6f0:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1a6f4:	c6 01       	movw	r24, r12
   1a6f6:	0e 94 0a c6 	call	0x18c14	; 0x18c14 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1a6fa:	80 e0       	ldi	r24, 0x00	; 0
   1a6fc:	90 e0       	ldi	r25, 0x00	; 0
   1a6fe:	73 c2       	rjmp	.+1254   	; 0x1abe6 <lif_extract_e010_as_ascii+0x554>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1a700:	f6 01       	movw	r30, r12
   1a702:	e6 5a       	subi	r30, 0xA6	; 166
   1a704:	ff 4f       	sbci	r31, 0xFF	; 255
   1a706:	80 81       	ld	r24, Z
   1a708:	91 81       	ldd	r25, Z+1	; 0x01
   1a70a:	9c 01       	movw	r18, r24
   1a70c:	2c 7f       	andi	r18, 0xFC	; 252
   1a70e:	20 31       	cpi	r18, 0x10	; 16
   1a710:	30 4e       	sbci	r19, 0xE0	; 224
   1a712:	a9 f0       	breq	.+42     	; 0x1a73e <lif_extract_e010_as_ascii+0xac>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1a714:	ed b7       	in	r30, 0x3d	; 61
   1a716:	fe b7       	in	r31, 0x3e	; 62
   1a718:	97 83       	std	Z+7, r25	; 0x07
   1a71a:	86 83       	std	Z+6, r24	; 0x06
   1a71c:	ca 5d       	subi	r28, 0xDA	; 218
   1a71e:	dd 4f       	sbci	r29, 0xFD	; 253
   1a720:	28 81       	ld	r18, Y
   1a722:	39 81       	ldd	r19, Y+1	; 0x01
   1a724:	c6 52       	subi	r28, 0x26	; 38
   1a726:	d2 40       	sbci	r29, 0x02	; 2
   1a728:	35 83       	std	Z+5, r19	; 0x05
   1a72a:	24 83       	std	Z+4, r18	; 0x04
   1a72c:	8f e7       	ldi	r24, 0x7F	; 127
   1a72e:	92 e3       	ldi	r25, 0x32	; 50
   1a730:	a0 e0       	ldi	r26, 0x00	; 0
   1a732:	81 83       	std	Z+1, r24	; 0x01
   1a734:	92 83       	std	Z+2, r25	; 0x02
   1a736:	a3 83       	std	Z+3, r26	; 0x03
   1a738:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1a73c:	db cf       	rjmp	.-74     	; 0x1a6f4 <lif_extract_e010_as_ascii+0x62>
        lif_closedir(LIF);
        return(0);
    }

    start = LIF->DIR.FileStartSector;
   1a73e:	f6 01       	movw	r30, r12
   1a740:	e4 5a       	subi	r30, 0xA4	; 164
   1a742:	ff 4f       	sbci	r31, 0xFF	; 255
   1a744:	80 80       	ld	r8, Z
   1a746:	91 80       	ldd	r9, Z+1	; 0x01
   1a748:	a2 80       	ldd	r10, Z+2	; 0x02
   1a74a:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1a74c:	34 96       	adiw	r30, 0x04	; 4
   1a74e:	80 81       	ld	r24, Z
   1a750:	91 81       	ldd	r25, Z+1	; 0x01
   1a752:	a2 81       	ldd	r26, Z+2	; 0x02
   1a754:	b3 81       	ldd	r27, Z+3	; 0x03
   1a756:	a5 01       	movw	r20, r10
   1a758:	94 01       	movw	r18, r8
   1a75a:	28 0f       	add	r18, r24
   1a75c:	39 1f       	adc	r19, r25
   1a75e:	4a 1f       	adc	r20, r26
   1a760:	5b 1f       	adc	r21, r27
   1a762:	c4 5d       	subi	r28, 0xD4	; 212
   1a764:	dd 4f       	sbci	r29, 0xFD	; 253
   1a766:	28 83       	st	Y, r18
   1a768:	39 83       	std	Y+1, r19	; 0x01
   1a76a:	4a 83       	std	Y+2, r20	; 0x02
   1a76c:	5b 83       	std	Y+3, r21	; 0x03
   1a76e:	cc 52       	subi	r28, 0x2C	; 44
   1a770:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1a772:	c6 01       	movw	r24, r12
   1a774:	8c 59       	subi	r24, 0x9C	; 156
   1a776:	9f 4f       	sbci	r25, 0xFF	; 255
   1a778:	0e 94 16 c1 	call	0x1822c	; 0x1822c <lif_lifbcd2time>
   1a77c:	c8 5d       	subi	r28, 0xD8	; 216
   1a77e:	dd 4f       	sbci	r29, 0xFD	; 253
   1a780:	68 83       	st	Y, r22
   1a782:	79 83       	std	Y+1, r23	; 0x01
   1a784:	8a 83       	std	Y+2, r24	; 0x02
   1a786:	9b 83       	std	Y+3, r25	; 0x03
   1a788:	c8 52       	subi	r28, 0x28	; 40
   1a78a:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1a78c:	ba 2d       	mov	r27, r10
   1a78e:	a9 2d       	mov	r26, r9
   1a790:	98 2d       	mov	r25, r8
   1a792:	88 27       	eor	r24, r24
   1a794:	c2 5e       	subi	r28, 0xE2	; 226
   1a796:	dd 4f       	sbci	r29, 0xFD	; 253
   1a798:	88 83       	st	Y, r24
   1a79a:	99 83       	std	Y+1, r25	; 0x01
   1a79c:	aa 83       	std	Y+2, r26	; 0x02
   1a79e:	bb 83       	std	Y+3, r27	; 0x03
   1a7a0:	ce 51       	subi	r28, 0x1E	; 30
   1a7a2:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1a7a4:	6c e0       	ldi	r22, 0x0C	; 12
   1a7a6:	79 e0       	ldi	r23, 0x09	; 9
   1a7a8:	ca 5d       	subi	r28, 0xDA	; 218
   1a7aa:	dd 4f       	sbci	r29, 0xFD	; 253
   1a7ac:	88 81       	ld	r24, Y
   1a7ae:	99 81       	ldd	r25, Y+1	; 0x01
   1a7b0:	c6 52       	subi	r28, 0x26	; 38
   1a7b2:	d2 40       	sbci	r29, 0x02	; 2
   1a7b4:	0e 94 da bc 	call	0x179b4	; 0x179b4 <lif_open>
   1a7b8:	cc 5d       	subi	r28, 0xDC	; 220
   1a7ba:	dd 4f       	sbci	r29, 0xFD	; 253
   1a7bc:	99 83       	std	Y+1, r25	; 0x01
   1a7be:	88 83       	st	Y, r24
   1a7c0:	c4 52       	subi	r28, 0x24	; 36
   1a7c2:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1a7c4:	89 2b       	or	r24, r25
   1a7c6:	09 f4       	brne	.+2      	; 0x1a7ca <lif_extract_e010_as_ascii+0x138>
   1a7c8:	95 cf       	rjmp	.-214    	; 0x1a6f4 <lif_extract_e010_as_ascii+0x62>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1a7ca:	ca 5d       	subi	r28, 0xDA	; 218
   1a7cc:	dd 4f       	sbci	r29, 0xFD	; 253
   1a7ce:	28 81       	ld	r18, Y
   1a7d0:	39 81       	ldd	r19, Y+1	; 0x01
   1a7d2:	c6 52       	subi	r28, 0x26	; 38
   1a7d4:	d2 40       	sbci	r29, 0x02	; 2
   1a7d6:	ed b7       	in	r30, 0x3d	; 61
   1a7d8:	fe b7       	in	r31, 0x3e	; 62
   1a7da:	35 83       	std	Z+5, r19	; 0x05
   1a7dc:	24 83       	std	Z+4, r18	; 0x04
   1a7de:	8f e6       	ldi	r24, 0x6F	; 111
   1a7e0:	92 e3       	ldi	r25, 0x32	; 50
   1a7e2:	a0 e0       	ldi	r26, 0x00	; 0
   1a7e4:	81 83       	std	Z+1, r24	; 0x01
   1a7e6:	92 83       	std	Z+2, r25	; 0x02
   1a7e8:	a3 83       	std	Z+3, r26	; 0x03
   1a7ea:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

    bytes = 0;
    wind = 0;
   1a7ee:	21 2c       	mov	r2, r1
   1a7f0:	31 2c       	mov	r3, r1
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1a7f2:	ce 5d       	subi	r28, 0xDE	; 222
   1a7f4:	dd 4f       	sbci	r29, 0xFD	; 253
   1a7f6:	19 82       	std	Y+1, r1	; 0x01
   1a7f8:	18 82       	st	Y, r1
   1a7fa:	c2 52       	subi	r28, 0x22	; 34
   1a7fc:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;                          // sectors
    long offset, bytes;                           // bytes
    int index;
    int i, len,size;
    int status = 1;
   1a7fe:	ee 24       	eor	r14, r14
   1a800:	e3 94       	inc	r14
   1a802:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1a804:	41 2c       	mov	r4, r1
   1a806:	51 2c       	mov	r5, r1
   1a808:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("\tWrote: %8ld\r", bytes);
   1a80a:	8e ea       	ldi	r24, 0xAE	; 174
   1a80c:	91 e3       	ldi	r25, 0x31	; 49
   1a80e:	9c 01       	movw	r18, r24
   1a810:	40 e0       	ldi	r20, 0x00	; 0
   1a812:	ce 5c       	subi	r28, 0xCE	; 206
   1a814:	dd 4f       	sbci	r29, 0xFD	; 253
   1a816:	28 83       	st	Y, r18
   1a818:	39 83       	std	Y+1, r19	; 0x01
   1a81a:	4a 83       	std	Y+2, r20	; 0x02
   1a81c:	c2 53       	subi	r28, 0x32	; 50
   1a81e:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1a820:	8c eb       	ldi	r24, 0xBC	; 188
   1a822:	91 e3       	ldi	r25, 0x31	; 49
   1a824:	9c 01       	movw	r18, r24
   1a826:	40 e0       	ldi	r20, 0x00	; 0
   1a828:	cb 5c       	subi	r28, 0xCB	; 203
   1a82a:	dd 4f       	sbci	r29, 0xFD	; 253
   1a82c:	28 83       	st	Y, r18
   1a82e:	39 83       	std	Y+1, r19	; 0x01
   1a830:	4a 83       	std	Y+2, r20	; 0x02
   1a832:	c5 53       	subi	r28, 0x35	; 53
   1a834:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1a836:	c2 5e       	subi	r28, 0xE2	; 226
   1a838:	dd 4f       	sbci	r29, 0xFD	; 253
   1a83a:	28 81       	ld	r18, Y
   1a83c:	39 81       	ldd	r19, Y+1	; 0x01
   1a83e:	4a 81       	ldd	r20, Y+2	; 0x02
   1a840:	5b 81       	ldd	r21, Y+3	; 0x03
   1a842:	ce 51       	subi	r28, 0x1E	; 30
   1a844:	d2 40       	sbci	r29, 0x02	; 2
   1a846:	bb 27       	eor	r27, r27
   1a848:	a5 2f       	mov	r26, r21
   1a84a:	94 2f       	mov	r25, r20
   1a84c:	83 2f       	mov	r24, r19
   1a84e:	c4 5d       	subi	r28, 0xD4	; 212
   1a850:	dd 4f       	sbci	r29, 0xFD	; 253
   1a852:	28 81       	ld	r18, Y
   1a854:	39 81       	ldd	r19, Y+1	; 0x01
   1a856:	4a 81       	ldd	r20, Y+2	; 0x02
   1a858:	5b 81       	ldd	r21, Y+3	; 0x03
   1a85a:	cc 52       	subi	r28, 0x2C	; 44
   1a85c:	d2 40       	sbci	r29, 0x02	; 2
   1a85e:	28 17       	cp	r18, r24
   1a860:	39 07       	cpc	r19, r25
   1a862:	4a 07       	cpc	r20, r26
   1a864:	5b 07       	cpc	r21, r27
   1a866:	08 f4       	brcc	.+2      	; 0x1a86a <lif_extract_e010_as_ascii+0x1d8>
   1a868:	51 c1       	rjmp	.+674    	; 0x1ab0c <lif_extract_e010_as_ascii+0x47a>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1a86a:	00 e0       	ldi	r16, 0x00	; 0
   1a86c:	11 e0       	ldi	r17, 0x01	; 1
   1a86e:	c2 5e       	subi	r28, 0xE2	; 226
   1a870:	dd 4f       	sbci	r29, 0xFD	; 253
   1a872:	28 81       	ld	r18, Y
   1a874:	39 81       	ldd	r19, Y+1	; 0x01
   1a876:	4a 81       	ldd	r20, Y+2	; 0x02
   1a878:	5b 81       	ldd	r21, Y+3	; 0x03
   1a87a:	ce 51       	subi	r28, 0x1E	; 30
   1a87c:	d2 40       	sbci	r29, 0x02	; 2
   1a87e:	be 01       	movw	r22, r28
   1a880:	60 5f       	subi	r22, 0xF0	; 240
   1a882:	7e 4f       	sbci	r23, 0xFE	; 254
   1a884:	c6 01       	movw	r24, r12
   1a886:	0e 94 5e bd 	call	0x17abc	; 0x17abc <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1a88a:	6f 3f       	cpi	r22, 0xFF	; 255
   1a88c:	71 05       	cpc	r23, r1
   1a88e:	09 f0       	breq	.+2      	; 0x1a892 <lif_extract_e010_as_ascii+0x200>
   1a890:	0c f4       	brge	.+2      	; 0x1a894 <lif_extract_e010_as_ascii+0x202>
   1a892:	3a c1       	rjmp	.+628    	; 0x1ab08 <lif_extract_e010_as_ascii+0x476>
   1a894:	00 e0       	ldi	r16, 0x00	; 0
   1a896:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1a898:	ce 5d       	subi	r28, 0xDE	; 222
   1a89a:	dd 4f       	sbci	r29, 0xFD	; 253
   1a89c:	88 81       	ld	r24, Y
   1a89e:	99 81       	ldd	r25, Y+1	; 0x01
   1a8a0:	c2 52       	subi	r28, 0x22	; 34
   1a8a2:	d2 40       	sbci	r29, 0x02	; 2
   1a8a4:	89 2b       	or	r24, r25
   1a8a6:	09 f0       	breq	.+2      	; 0x1a8aa <lif_extract_e010_as_ascii+0x218>
   1a8a8:	1b c1       	rjmp	.+566    	; 0x1aae0 <lif_extract_e010_as_ascii+0x44e>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1a8aa:	e0 e1       	ldi	r30, 0x10	; 16
   1a8ac:	f1 e0       	ldi	r31, 0x01	; 1
   1a8ae:	ec 0f       	add	r30, r28
   1a8b0:	fd 1f       	adc	r31, r29
   1a8b2:	e0 0f       	add	r30, r16
   1a8b4:	f1 1f       	adc	r31, r17
   1a8b6:	80 81       	ld	r24, Z
   1a8b8:	98 2f       	mov	r25, r24
   1a8ba:	9f 7e       	andi	r25, 0xEF	; 239
   1a8bc:	9f 3c       	cpi	r25, 0xCF	; 207
   1a8be:	11 f0       	breq	.+4      	; 0x1a8c4 <lif_extract_e010_as_ascii+0x232>
   1a8c0:	8f 36       	cpi	r24, 0x6F	; 111
   1a8c2:	c9 f5       	brne	.+114    	; 0x1a936 <lif_extract_e010_as_ascii+0x2a4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1a8c4:	e0 e1       	ldi	r30, 0x10	; 16
   1a8c6:	f1 e0       	ldi	r31, 0x01	; 1
   1a8c8:	ec 0f       	add	r30, r28
   1a8ca:	fd 1f       	adc	r31, r29
   1a8cc:	e0 0f       	add	r30, r16
   1a8ce:	f1 1f       	adc	r31, r17
   1a8d0:	a1 80       	ldd	r10, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8);
   1a8d2:	f8 01       	movw	r30, r16
   1a8d4:	32 96       	adiw	r30, 0x02	; 2
   1a8d6:	40 e1       	ldi	r20, 0x10	; 16
   1a8d8:	51 e0       	ldi	r21, 0x01	; 1
   1a8da:	4c 0f       	add	r20, r28
   1a8dc:	5d 1f       	adc	r21, r29
   1a8de:	e4 0f       	add	r30, r20
   1a8e0:	f5 1f       	adc	r31, r21
   1a8e2:	0d 5f       	subi	r16, 0xFD	; 253
   1a8e4:	1f 4f       	sbci	r17, 0xFF	; 255
   1a8e6:	80 81       	ld	r24, Z
   1a8e8:	b1 2c       	mov	r11, r1
   1a8ea:	b8 2a       	or	r11, r24
// EOF ?
                if(len == 0)
   1a8ec:	a1 14       	cp	r10, r1
   1a8ee:	b1 04       	cpc	r11, r1
   1a8f0:	09 f4       	brne	.+2      	; 0x1a8f4 <lif_extract_e010_as_ascii+0x262>
   1a8f2:	ee c0       	rjmp	.+476    	; 0x1aad0 <lif_extract_e010_as_ascii+0x43e>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1a8f4:	5f ef       	ldi	r21, 0xFF	; 255
   1a8f6:	a5 16       	cp	r10, r21
   1a8f8:	b1 04       	cpc	r11, r1
   1a8fa:	09 f0       	breq	.+2      	; 0x1a8fe <lif_extract_e010_as_ascii+0x26c>
   1a8fc:	7c f4       	brge	.+30     	; 0x1a91c <lif_extract_e010_as_ascii+0x28a>
   1a8fe:	c4 5e       	subi	r28, 0xE4	; 228
   1a900:	dd 4f       	sbci	r29, 0xFD	; 253
   1a902:	19 82       	std	Y+1, r1	; 0x01
   1a904:	18 82       	st	Y, r1
   1a906:	cc 51       	subi	r28, 0x1C	; 28
   1a908:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1a90a:	c5 01       	movw	r24, r10
   1a90c:	01 97       	sbiw	r24, 0x01	; 1
   1a90e:	c0 5d       	subi	r28, 0xD0	; 208
   1a910:	dd 4f       	sbci	r29, 0xFD	; 253
   1a912:	99 83       	std	Y+1, r25	; 0x01
   1a914:	88 83       	st	Y, r24
   1a916:	c0 53       	subi	r28, 0x30	; 48
   1a918:	d2 40       	sbci	r29, 0x02	; 2
   1a91a:	68 c0       	rjmp	.+208    	; 0x1a9ec <lif_extract_e010_as_ascii+0x35a>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1a91c:	ed b7       	in	r30, 0x3d	; 61
   1a91e:	fe b7       	in	r31, 0x3e	; 62
   1a920:	b5 82       	std	Z+5, r11	; 0x05
   1a922:	a4 82       	std	Z+4, r10	; 0x04
   1a924:	8a e3       	ldi	r24, 0x3A	; 58
   1a926:	92 e3       	ldi	r25, 0x32	; 50
   1a928:	a0 e0       	ldi	r26, 0x00	; 0
   1a92a:	81 83       	std	Z+1, r24	; 0x01
   1a92c:	92 83       	std	Z+2, r25	; 0x02
   1a92e:	a3 83       	std	Z+3, r26	; 0x03
   1a930:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1a934:	1e c0       	rjmp	.+60     	; 0x1a972 <lif_extract_e010_as_ascii+0x2e0>
                    status = 0;
                    done = 1;
                    break;
                }
            }
            else if(buf[ind] == 0xEF)
   1a936:	8f 3e       	cpi	r24, 0xEF	; 239
   1a938:	09 f4       	brne	.+2      	; 0x1a93c <lif_extract_e010_as_ascii+0x2aa>
   1a93a:	d2 c0       	rjmp	.+420    	; 0x1aae0 <lif_extract_e010_as_ascii+0x44e>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1a93c:	ed b7       	in	r30, 0x3d	; 61
   1a93e:	fe b7       	in	r31, 0x3e	; 62
   1a940:	13 87       	std	Z+11, r17	; 0x0b
   1a942:	02 87       	std	Z+10, r16	; 0x0a
   1a944:	c2 5e       	subi	r28, 0xE2	; 226
   1a946:	dd 4f       	sbci	r29, 0xFD	; 253
   1a948:	28 81       	ld	r18, Y
   1a94a:	39 81       	ldd	r19, Y+1	; 0x01
   1a94c:	4a 81       	ldd	r20, Y+2	; 0x02
   1a94e:	5b 81       	ldd	r21, Y+3	; 0x03
   1a950:	ce 51       	subi	r28, 0x1E	; 30
   1a952:	d2 40       	sbci	r29, 0x02	; 2
   1a954:	26 83       	std	Z+6, r18	; 0x06
   1a956:	37 83       	std	Z+7, r19	; 0x07
   1a958:	40 87       	std	Z+8, r20	; 0x08
   1a95a:	51 87       	std	Z+9, r21	; 0x09
   1a95c:	90 e0       	ldi	r25, 0x00	; 0
   1a95e:	95 83       	std	Z+5, r25	; 0x05
   1a960:	84 83       	std	Z+4, r24	; 0x04
   1a962:	84 ee       	ldi	r24, 0xE4	; 228
   1a964:	91 e3       	ldi	r25, 0x31	; 49
   1a966:	a0 e0       	ldi	r26, 0x00	; 0
   1a968:	81 83       	std	Z+1, r24	; 0x01
   1a96a:	92 83       	std	Z+2, r25	; 0x02
   1a96c:	a3 83       	std	Z+3, r26	; 0x03
   1a96e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
                status = 0;
                done = 1;
   1a972:	21 e0       	ldi	r18, 0x01	; 1
   1a974:	30 e0       	ldi	r19, 0x00	; 0
   1a976:	ce 5d       	subi	r28, 0xDE	; 222
   1a978:	dd 4f       	sbci	r29, 0xFD	; 253
   1a97a:	39 83       	std	Y+1, r19	; 0x01
   1a97c:	28 83       	st	Y, r18
   1a97e:	c2 52       	subi	r28, 0x22	; 34
   1a980:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1a982:	e1 2c       	mov	r14, r1
   1a984:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1a986:	ac c0       	rjmp	.+344    	; 0x1aae0 <lif_extract_e010_as_ascii+0x44e>
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1a988:	0f 3f       	cpi	r16, 0xFF	; 255
   1a98a:	11 05       	cpc	r17, r1
   1a98c:	11 f0       	breq	.+4      	; 0x1a992 <lif_extract_e010_as_ascii+0x300>
   1a98e:	0c f0       	brlt	.+2      	; 0x1a992 <lif_extract_e010_as_ascii+0x300>
   1a990:	a7 c0       	rjmp	.+334    	; 0x1aae0 <lif_extract_e010_as_ascii+0x44e>
            {
                if(buf[ind] == '\r' && i == len-1)
   1a992:	e0 e1       	ldi	r30, 0x10	; 16
   1a994:	f1 e0       	ldi	r31, 0x01	; 1
   1a996:	ec 0f       	add	r30, r28
   1a998:	fd 1f       	adc	r31, r29
   1a99a:	e0 0f       	add	r30, r16
   1a99c:	f1 1f       	adc	r31, r17
   1a99e:	20 81       	ld	r18, Z
   1a9a0:	a1 01       	movw	r20, r2
   1a9a2:	4f 5f       	subi	r20, 0xFF	; 255
   1a9a4:	5f 4f       	sbci	r21, 0xFF	; 255
   1a9a6:	4a 01       	movw	r8, r20
   1a9a8:	2d 30       	cpi	r18, 0x0D	; 13
   1a9aa:	51 f1       	breq	.+84     	; 0x1aa00 <lif_extract_e010_as_ascii+0x36e>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1a9ac:	98 2d       	mov	r25, r8
   1a9ae:	89 2d       	mov	r24, r9
   1a9b0:	0f 5f       	subi	r16, 0xFF	; 255
   1a9b2:	1f 4f       	sbci	r17, 0xFF	; 255
   1a9b4:	ec e0       	ldi	r30, 0x0C	; 12
   1a9b6:	f0 e0       	ldi	r31, 0x00	; 0
   1a9b8:	ec 0f       	add	r30, r28
   1a9ba:	fd 1f       	adc	r31, r29
   1a9bc:	e2 0d       	add	r30, r2
   1a9be:	f3 1d       	adc	r31, r3
   1a9c0:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1a9c2:	ef ef       	ldi	r30, 0xFF	; 255
   1a9c4:	8e 16       	cp	r8, r30
   1a9c6:	91 04       	cpc	r9, r1
   1a9c8:	09 f0       	breq	.+2      	; 0x1a9cc <lif_extract_e010_as_ascii+0x33a>
   1a9ca:	ac f5       	brge	.+106    	; 0x1aa36 <lif_extract_e010_as_ascii+0x3a4>
                status = 0;
                done = 1;
                break;
            }
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1a9cc:	c4 5e       	subi	r28, 0xE4	; 228
   1a9ce:	dd 4f       	sbci	r29, 0xFD	; 253
   1a9d0:	28 81       	ld	r18, Y
   1a9d2:	39 81       	ldd	r19, Y+1	; 0x01
   1a9d4:	cc 51       	subi	r28, 0x1C	; 28
   1a9d6:	d2 40       	sbci	r29, 0x02	; 2
   1a9d8:	2f 5f       	subi	r18, 0xFF	; 255
   1a9da:	3f 4f       	sbci	r19, 0xFF	; 255
   1a9dc:	c4 5e       	subi	r28, 0xE4	; 228
   1a9de:	dd 4f       	sbci	r29, 0xFD	; 253
   1a9e0:	39 83       	std	Y+1, r19	; 0x01
   1a9e2:	28 83       	st	Y, r18
   1a9e4:	cc 51       	subi	r28, 0x1C	; 28
   1a9e6:	d2 40       	sbci	r29, 0x02	; 2
   1a9e8:	29 2e       	mov	r2, r25
   1a9ea:	38 2e       	mov	r3, r24
   1a9ec:	c4 5e       	subi	r28, 0xE4	; 228
   1a9ee:	dd 4f       	sbci	r29, 0xFD	; 253
   1a9f0:	48 81       	ld	r20, Y
   1a9f2:	59 81       	ldd	r21, Y+1	; 0x01
   1a9f4:	cc 51       	subi	r28, 0x1C	; 28
   1a9f6:	d2 40       	sbci	r29, 0x02	; 2
   1a9f8:	4a 15       	cp	r20, r10
   1a9fa:	5b 05       	cpc	r21, r11
   1a9fc:	2c f2       	brlt	.-118    	; 0x1a988 <lif_extract_e010_as_ascii+0x2f6>
   1a9fe:	62 c0       	rjmp	.+196    	; 0x1aac4 <lif_extract_e010_as_ascii+0x432>
            {
                if(buf[ind] == '\r' && i == len-1)
   1aa00:	c4 5e       	subi	r28, 0xE4	; 228
   1aa02:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa04:	88 81       	ld	r24, Y
   1aa06:	99 81       	ldd	r25, Y+1	; 0x01
   1aa08:	cc 51       	subi	r28, 0x1C	; 28
   1aa0a:	d2 40       	sbci	r29, 0x02	; 2
   1aa0c:	c0 5d       	subi	r28, 0xD0	; 208
   1aa0e:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa10:	a8 81       	ld	r26, Y
   1aa12:	b9 81       	ldd	r27, Y+1	; 0x01
   1aa14:	c0 53       	subi	r28, 0x30	; 48
   1aa16:	d2 40       	sbci	r29, 0x02	; 2
   1aa18:	8a 17       	cp	r24, r26
   1aa1a:	9b 07       	cpc	r25, r27
   1aa1c:	39 f6       	brne	.-114    	; 0x1a9ac <lif_extract_e010_as_ascii+0x31a>
                {
                    wbuf[wind++] = '\n';
   1aa1e:	ec e0       	ldi	r30, 0x0C	; 12
   1aa20:	f0 e0       	ldi	r31, 0x00	; 0
   1aa22:	ec 0f       	add	r30, r28
   1aa24:	fd 1f       	adc	r31, r29
   1aa26:	e2 0d       	add	r30, r2
   1aa28:	f3 1d       	adc	r31, r3
   1aa2a:	ba e0       	ldi	r27, 0x0A	; 10
   1aa2c:	b0 83       	st	Z, r27
                    ++ind;
   1aa2e:	0f 5f       	subi	r16, 0xFF	; 255
   1aa30:	1f 4f       	sbci	r17, 0xFF	; 255
// write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1aa32:	1a 01       	movw	r2, r20
                    ++ind;
                    break;
   1aa34:	47 c0       	rjmp	.+142    	; 0x1aac4 <lif_extract_e010_as_ascii+0x432>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1aa36:	cc 5d       	subi	r28, 0xDC	; 220
   1aa38:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa3a:	28 81       	ld	r18, Y
   1aa3c:	39 81       	ldd	r19, Y+1	; 0x01
   1aa3e:	c4 52       	subi	r28, 0x24	; 36
   1aa40:	d2 40       	sbci	r29, 0x02	; 2
   1aa42:	a4 01       	movw	r20, r8
   1aa44:	61 e0       	ldi	r22, 0x01	; 1
   1aa46:	70 e0       	ldi	r23, 0x00	; 0
   1aa48:	ce 01       	movw	r24, r28
   1aa4a:	0c 96       	adiw	r24, 0x0c	; 12
   1aa4c:	0e 94 af 7a 	call	0xf55e	; 0xf55e <fwrite>
                    if(size < wind)
   1aa50:	88 15       	cp	r24, r8
   1aa52:	99 05       	cpc	r25, r9
   1aa54:	d4 f4       	brge	.+52     	; 0x1aa8a <lif_extract_e010_as_ascii+0x3f8>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1aa56:	cb 5c       	subi	r28, 0xCB	; 203
   1aa58:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa5a:	28 81       	ld	r18, Y
   1aa5c:	39 81       	ldd	r19, Y+1	; 0x01
   1aa5e:	4a 81       	ldd	r20, Y+2	; 0x02
   1aa60:	c5 53       	subi	r28, 0x35	; 53
   1aa62:	d2 40       	sbci	r29, 0x02	; 2
   1aa64:	ed b7       	in	r30, 0x3d	; 61
   1aa66:	fe b7       	in	r31, 0x3e	; 62
   1aa68:	21 83       	std	Z+1, r18	; 0x01
   1aa6a:	32 83       	std	Z+2, r19	; 0x02
   1aa6c:	43 83       	std	Z+3, r20	; 0x03
   1aa6e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
                    ++ind;
                    break;
                }
                else
                {
                    wbuf[wind++] = buf[ind++];
   1aa72:	14 01       	movw	r2, r8
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1aa74:	21 e0       	ldi	r18, 0x01	; 1
   1aa76:	30 e0       	ldi	r19, 0x00	; 0
   1aa78:	ce 5d       	subi	r28, 0xDE	; 222
   1aa7a:	dd 4f       	sbci	r29, 0xFD	; 253
   1aa7c:	39 83       	std	Y+1, r19	; 0x01
   1aa7e:	28 83       	st	Y, r18
   1aa80:	c2 52       	subi	r28, 0x22	; 34
   1aa82:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1aa84:	e1 2c       	mov	r14, r1
   1aa86:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1aa88:	1d c0       	rjmp	.+58     	; 0x1aac4 <lif_extract_e010_as_ascii+0x432>
                    }
                    bytes += size;
   1aa8a:	09 2e       	mov	r0, r25
   1aa8c:	00 0c       	add	r0, r0
   1aa8e:	aa 0b       	sbc	r26, r26
   1aa90:	bb 0b       	sbc	r27, r27
   1aa92:	48 0e       	add	r4, r24
   1aa94:	59 1e       	adc	r5, r25
   1aa96:	6a 1e       	adc	r6, r26
   1aa98:	7b 1e       	adc	r7, r27
                    printf("\tWrote: %8ld\r", bytes);
   1aa9a:	ed b7       	in	r30, 0x3d	; 61
   1aa9c:	fe b7       	in	r31, 0x3e	; 62
   1aa9e:	44 82       	std	Z+4, r4	; 0x04
   1aaa0:	55 82       	std	Z+5, r5	; 0x05
   1aaa2:	66 82       	std	Z+6, r6	; 0x06
   1aaa4:	77 82       	std	Z+7, r7	; 0x07
   1aaa6:	ce 5c       	subi	r28, 0xCE	; 206
   1aaa8:	dd 4f       	sbci	r29, 0xFD	; 253
   1aaaa:	28 81       	ld	r18, Y
   1aaac:	39 81       	ldd	r19, Y+1	; 0x01
   1aaae:	4a 81       	ldd	r20, Y+2	; 0x02
   1aab0:	c2 53       	subi	r28, 0x32	; 50
   1aab2:	d2 40       	sbci	r29, 0x02	; 2
   1aab4:	21 83       	std	Z+1, r18	; 0x01
   1aab6:	32 83       	std	Z+2, r19	; 0x02
   1aab8:	43 83       	std	Z+3, r20	; 0x03
   1aaba:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
                    wind = 0;
   1aabe:	90 e0       	ldi	r25, 0x00	; 0
   1aac0:	80 e0       	ldi	r24, 0x00	; 0
   1aac2:	84 cf       	rjmp	.-248    	; 0x1a9cc <lif_extract_e010_as_ascii+0x33a>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1aac4:	0f 3f       	cpi	r16, 0xFF	; 255
   1aac6:	11 05       	cpc	r17, r1
   1aac8:	09 f0       	breq	.+2      	; 0x1aacc <lif_extract_e010_as_ascii+0x43a>
   1aaca:	0c f4       	brge	.+2      	; 0x1aace <lif_extract_e010_as_ascii+0x43c>
   1aacc:	e5 ce       	rjmp	.-566    	; 0x1a898 <lif_extract_e010_as_ascii+0x206>
   1aace:	08 c0       	rjmp	.+16     	; 0x1aae0 <lif_extract_e010_as_ascii+0x44e>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8);
// EOF ?
                if(len == 0)
                {
                    done = 1;
   1aad0:	a1 e0       	ldi	r26, 0x01	; 1
   1aad2:	b0 e0       	ldi	r27, 0x00	; 0
   1aad4:	ce 5d       	subi	r28, 0xDE	; 222
   1aad6:	dd 4f       	sbci	r29, 0xFD	; 253
   1aad8:	b9 83       	std	Y+1, r27	; 0x01
   1aada:	a8 83       	st	Y, r26
   1aadc:	c2 52       	subi	r28, 0x22	; 34
   1aade:	d2 40       	sbci	r29, 0x02	; 2

            }                                     // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }                                         // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1aae0:	c2 5e       	subi	r28, 0xE2	; 226
   1aae2:	dd 4f       	sbci	r29, 0xFD	; 253
   1aae4:	28 81       	ld	r18, Y
   1aae6:	39 81       	ldd	r19, Y+1	; 0x01
   1aae8:	4a 81       	ldd	r20, Y+2	; 0x02
   1aaea:	5b 81       	ldd	r21, Y+3	; 0x03
   1aaec:	ce 51       	subi	r28, 0x1E	; 30
   1aaee:	d2 40       	sbci	r29, 0x02	; 2
   1aaf0:	3f 5f       	subi	r19, 0xFF	; 255
   1aaf2:	4f 4f       	sbci	r20, 0xFF	; 255
   1aaf4:	5f 4f       	sbci	r21, 0xFF	; 255
   1aaf6:	c2 5e       	subi	r28, 0xE2	; 226
   1aaf8:	dd 4f       	sbci	r29, 0xFD	; 253
   1aafa:	28 83       	st	Y, r18
   1aafc:	39 83       	std	Y+1, r19	; 0x01
   1aafe:	4a 83       	std	Y+2, r20	; 0x02
   1ab00:	5b 83       	std	Y+3, r21	; 0x03
   1ab02:	ce 51       	subi	r28, 0x1E	; 30
   1ab04:	d2 40       	sbci	r29, 0x02	; 2
   1ab06:	97 ce       	rjmp	.-722    	; 0x1a836 <lif_extract_e010_as_ascii+0x1a4>
    {
// LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1ab08:	e1 2c       	mov	r14, r1
   1ab0a:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ab0c:	c6 01       	movw	r24, r12
   1ab0e:	0e 94 0a c6 	call	0x18c14	; 0x18c14 <lif_close_volume>

    }                                             // while(offset <= end)

    lif_closedir(LIF);
// Flush any remaining bytes
    if(wind)
   1ab12:	21 14       	cp	r2, r1
   1ab14:	31 04       	cpc	r3, r1
   1ab16:	31 f1       	breq	.+76     	; 0x1ab64 <lif_extract_e010_as_ascii+0x4d2>
    {
        size = fwrite(wbuf,1,wind,fo);
   1ab18:	cc 5d       	subi	r28, 0xDC	; 220
   1ab1a:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab1c:	28 81       	ld	r18, Y
   1ab1e:	39 81       	ldd	r19, Y+1	; 0x01
   1ab20:	c4 52       	subi	r28, 0x24	; 36
   1ab22:	d2 40       	sbci	r29, 0x02	; 2
   1ab24:	a1 01       	movw	r20, r2
   1ab26:	61 e0       	ldi	r22, 0x01	; 1
   1ab28:	70 e0       	ldi	r23, 0x00	; 0
   1ab2a:	ce 01       	movw	r24, r28
   1ab2c:	0c 96       	adiw	r24, 0x0c	; 12
   1ab2e:	0e 94 af 7a 	call	0xf55e	; 0xf55e <fwrite>
   1ab32:	8c 01       	movw	r16, r24
        if(size < wind)
   1ab34:	82 15       	cp	r24, r2
   1ab36:	93 05       	cpc	r25, r3
   1ab38:	64 f4       	brge	.+24     	; 0x1ab52 <lif_extract_e010_as_ascii+0x4c0>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1ab3a:	86 e8       	ldi	r24, 0x86	; 134
   1ab3c:	91 e3       	ldi	r25, 0x31	; 49
   1ab3e:	a0 e0       	ldi	r26, 0x00	; 0
   1ab40:	ed b7       	in	r30, 0x3d	; 61
   1ab42:	fe b7       	in	r31, 0x3e	; 62
   1ab44:	81 83       	std	Z+1, r24	; 0x01
   1ab46:	92 83       	std	Z+2, r25	; 0x02
   1ab48:	a3 83       	std	Z+3, r26	; 0x03
   1ab4a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            status = 0;
   1ab4e:	e1 2c       	mov	r14, r1
   1ab50:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1ab52:	c8 01       	movw	r24, r16
   1ab54:	01 2e       	mov	r0, r17
   1ab56:	00 0c       	add	r0, r0
   1ab58:	aa 0b       	sbc	r26, r26
   1ab5a:	bb 0b       	sbc	r27, r27
   1ab5c:	48 0e       	add	r4, r24
   1ab5e:	59 1e       	adc	r5, r25
   1ab60:	6a 1e       	adc	r6, r26
   1ab62:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1ab64:	cc 5d       	subi	r28, 0xDC	; 220
   1ab66:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab68:	88 81       	ld	r24, Y
   1ab6a:	99 81       	ldd	r25, Y+1	; 0x01
   1ab6c:	c4 52       	subi	r28, 0x24	; 36
   1ab6e:	d2 40       	sbci	r29, 0x02	; 2
   1ab70:	0e 94 31 7b 	call	0xf662	; 0xf662 <fclose>
    if(t)
   1ab74:	c8 5d       	subi	r28, 0xD8	; 216
   1ab76:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab78:	28 81       	ld	r18, Y
   1ab7a:	39 81       	ldd	r19, Y+1	; 0x01
   1ab7c:	4a 81       	ldd	r20, Y+2	; 0x02
   1ab7e:	5b 81       	ldd	r21, Y+3	; 0x03
   1ab80:	c8 52       	subi	r28, 0x28	; 40
   1ab82:	d2 40       	sbci	r29, 0x02	; 2
   1ab84:	21 15       	cp	r18, r1
   1ab86:	31 05       	cpc	r19, r1
   1ab88:	41 05       	cpc	r20, r1
   1ab8a:	51 05       	cpc	r21, r1
   1ab8c:	d9 f0       	breq	.+54     	; 0x1abc4 <lif_extract_e010_as_ascii+0x532>
    {
        struct utimbuf times;
        times.modtime = t;
   1ab8e:	c8 5e       	subi	r28, 0xE8	; 232
   1ab90:	dd 4f       	sbci	r29, 0xFD	; 253
   1ab92:	28 83       	st	Y, r18
   1ab94:	39 83       	std	Y+1, r19	; 0x01
   1ab96:	4a 83       	std	Y+2, r20	; 0x02
   1ab98:	5b 83       	std	Y+3, r21	; 0x03
   1ab9a:	c8 51       	subi	r28, 0x18	; 24
   1ab9c:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1ab9e:	cc 5e       	subi	r28, 0xEC	; 236
   1aba0:	dd 4f       	sbci	r29, 0xFD	; 253
   1aba2:	28 83       	st	Y, r18
   1aba4:	39 83       	std	Y+1, r19	; 0x01
   1aba6:	4a 83       	std	Y+2, r20	; 0x02
   1aba8:	5b 83       	std	Y+3, r21	; 0x03
   1abaa:	c4 51       	subi	r28, 0x14	; 20
   1abac:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1abae:	be 01       	movw	r22, r28
   1abb0:	6c 5e       	subi	r22, 0xEC	; 236
   1abb2:	7d 4f       	sbci	r23, 0xFD	; 253
   1abb4:	ca 5d       	subi	r28, 0xDA	; 218
   1abb6:	dd 4f       	sbci	r29, 0xFD	; 253
   1abb8:	88 81       	ld	r24, Y
   1abba:	99 81       	ldd	r25, Y+1	; 0x01
   1abbc:	c6 52       	subi	r28, 0x26	; 38
   1abbe:	d2 40       	sbci	r29, 0x02	; 2
   1abc0:	0e 94 6e 78 	call	0xf0dc	; 0xf0dc <utime>
    }
    sync();
   1abc4:	0e 94 2c 7a 	call	0xf458	; 0xf458 <sync>
    printf("\tWrote: %8ld\n", bytes);
   1abc8:	ed b7       	in	r30, 0x3d	; 61
   1abca:	fe b7       	in	r31, 0x3e	; 62
   1abcc:	44 82       	std	Z+4, r4	; 0x04
   1abce:	55 82       	std	Z+5, r5	; 0x05
   1abd0:	66 82       	std	Z+6, r6	; 0x06
   1abd2:	77 82       	std	Z+7, r7	; 0x07
   1abd4:	88 e7       	ldi	r24, 0x78	; 120
   1abd6:	91 e3       	ldi	r25, 0x31	; 49
   1abd8:	a0 e0       	ldi	r26, 0x00	; 0
   1abda:	81 83       	std	Z+1, r24	; 0x01
   1abdc:	92 83       	std	Z+2, r25	; 0x02
   1abde:	a3 83       	std	Z+3, r26	; 0x03
   1abe0:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    return(status);
   1abe4:	c7 01       	movw	r24, r14
}
   1abe6:	c9 5c       	subi	r28, 0xC9	; 201
   1abe8:	dd 4f       	sbci	r29, 0xFD	; 253
   1abea:	e2 e1       	ldi	r30, 0x12	; 18
   1abec:	0c 94 f4 e0 	jmp	0x1c1e8	; 0x1c1e8 <__epilogue_restores__>

0001abf0 <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1abf0:	a4 e1       	ldi	r26, 0x14	; 20
   1abf2:	b1 e0       	ldi	r27, 0x01	; 1
   1abf4:	ee ef       	ldi	r30, 0xFE	; 254
   1abf6:	f5 ed       	ldi	r31, 0xD5	; 213
   1abf8:	0c 94 d8 e0 	jmp	0x1c1b0	; 0x1c1b0 <__prologue_saves__>
   1abfc:	7c 01       	movw	r14, r24
   1abfe:	8b 01       	movw	r16, r22
   1ac00:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1ac02:	62 e4       	ldi	r22, 0x42	; 66
   1ac04:	73 e0       	ldi	r23, 0x03	; 3
   1ac06:	0e 94 c5 cc 	call	0x1998a	; 0x1998a <lif_open_volume>
   1ac0a:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1ac0c:	00 97       	sbiw	r24, 0x00	; 0
   1ac0e:	69 f4       	brne	.+26     	; 0x1ac2a <lif_extract_lif_as_lif+0x3a>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1ac10:	ed b7       	in	r30, 0x3d	; 61
   1ac12:	fe b7       	in	r31, 0x3e	; 62
   1ac14:	f5 82       	std	Z+5, r15	; 0x05
   1ac16:	e4 82       	std	Z+4, r14	; 0x04
   1ac18:	80 e6       	ldi	r24, 0x60	; 96
   1ac1a:	91 e3       	ldi	r25, 0x31	; 49
   1ac1c:	a0 e0       	ldi	r26, 0x00	; 0
   1ac1e:	81 83       	std	Z+1, r24	; 0x01
   1ac20:	92 83       	std	Z+2, r25	; 0x02
   1ac22:	a3 83       	std	Z+3, r26	; 0x03
   1ac24:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1ac28:	13 c0       	rjmp	.+38     	; 0x1ac50 <lif_extract_lif_as_lif+0x60>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1ac2a:	b8 01       	movw	r22, r16
   1ac2c:	7d d9       	rcall	.-3334   	; 0x19f28 <lif_find_file>
    if(index == -1)
   1ac2e:	01 96       	adiw	r24, 0x01	; 1
   1ac30:	91 f4       	brne	.+36     	; 0x1ac56 <lif_extract_lif_as_lif+0x66>
    {
        printf("File not found:%s\n", lifname);
   1ac32:	ed b7       	in	r30, 0x3d	; 61
   1ac34:	fe b7       	in	r31, 0x3e	; 62
   1ac36:	15 83       	std	Z+5, r17	; 0x05
   1ac38:	04 83       	std	Z+4, r16	; 0x04
   1ac3a:	8d e4       	ldi	r24, 0x4D	; 77
   1ac3c:	91 e3       	ldi	r25, 0x31	; 49
   1ac3e:	a0 e0       	ldi	r26, 0x00	; 0
   1ac40:	81 83       	std	Z+1, r24	; 0x01
   1ac42:	92 83       	std	Z+2, r25	; 0x02
   1ac44:	a3 83       	std	Z+3, r26	; 0x03
   1ac46:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ac4a:	c4 01       	movw	r24, r8
   1ac4c:	0e 94 0a c6 	call	0x18c14	; 0x18c14 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1ac50:	00 e0       	ldi	r16, 0x00	; 0
   1ac52:	10 e0       	ldi	r17, 0x00	; 0
   1ac54:	ff c0       	rjmp	.+510    	; 0x1ae54 <lif_extract_lif_as_lif+0x264>
    }

    sectors = LIF->DIR.FileSectors;
   1ac56:	94 01       	movw	r18, r8
   1ac58:	20 5a       	subi	r18, 0xA0	; 160
   1ac5a:	3f 4f       	sbci	r19, 0xFF	; 255
   1ac5c:	c0 5f       	subi	r28, 0xF0	; 240
   1ac5e:	de 4f       	sbci	r29, 0xFE	; 254
   1ac60:	39 83       	std	Y+1, r19	; 0x01
   1ac62:	28 83       	st	Y, r18
   1ac64:	c0 51       	subi	r28, 0x10	; 16
   1ac66:	d1 40       	sbci	r29, 0x01	; 1

//Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1ac68:	f9 01       	movw	r30, r18
   1ac6a:	a0 80       	ld	r10, Z
   1ac6c:	b1 80       	ldd	r11, Z+1	; 0x01
   1ac6e:	0b 2c       	mov	r0, r11
   1ac70:	00 0c       	add	r0, r0
   1ac72:	cc 08       	sbc	r12, r12
   1ac74:	dd 08       	sbc	r13, r13
   1ac76:	e1 2c       	mov	r14, r1
   1ac78:	f1 2c       	mov	r15, r1
   1ac7a:	87 01       	movw	r16, r14
   1ac7c:	e3 94       	inc	r14
   1ac7e:	21 e0       	ldi	r18, 0x01	; 1
   1ac80:	30 e0       	ldi	r19, 0x00	; 0
   1ac82:	40 e0       	ldi	r20, 0x00	; 0
   1ac84:	50 e0       	ldi	r21, 0x00	; 0
   1ac86:	65 e9       	ldi	r22, 0x95	; 149
   1ac88:	76 e1       	ldi	r23, 0x16	; 22
   1ac8a:	c3 01       	movw	r24, r6
   1ac8c:	0e 94 7b c8 	call	0x190f6	; 0x190f6 <lif_create_volume>
   1ac90:	7c 01       	movw	r14, r24
    if(ULIF == NULL)
   1ac92:	89 2b       	or	r24, r25
   1ac94:	d1 f2       	breq	.-76     	; 0x1ac4a <lif_extract_lif_as_lif+0x5a>
    }

// Only the start sector changes

// Copy directory record
    ULIF->DIR = LIF->DIR;
   1ac96:	81 e2       	ldi	r24, 0x21	; 33
   1ac98:	f4 01       	movw	r30, r8
   1ac9a:	e1 5b       	subi	r30, 0xB1	; 177
   1ac9c:	ff 4f       	sbci	r31, 0xFF	; 255
   1ac9e:	d7 01       	movw	r26, r14
   1aca0:	a1 5b       	subi	r26, 0xB1	; 177
   1aca2:	bf 4f       	sbci	r27, 0xFF	; 255
   1aca4:	01 90       	ld	r0, Z+
   1aca6:	0d 92       	st	X+, r0
   1aca8:	8a 95       	dec	r24
   1acaa:	e1 f7       	brne	.-8      	; 0x1aca4 <lif_extract_lif_as_lif+0xb4>

    ULIF->DIR.FileStartSector = 2;
   1acac:	82 e0       	ldi	r24, 0x02	; 2
   1acae:	90 e0       	ldi	r25, 0x00	; 0
   1acb0:	a0 e0       	ldi	r26, 0x00	; 0
   1acb2:	b0 e0       	ldi	r27, 0x00	; 0
   1acb4:	f7 01       	movw	r30, r14
   1acb6:	e4 5a       	subi	r30, 0xA4	; 164
   1acb8:	ff 4f       	sbci	r31, 0xFF	; 255
   1acba:	80 83       	st	Z, r24
   1acbc:	91 83       	std	Z+1, r25	; 0x01
   1acbe:	a2 83       	std	Z+2, r26	; 0x02
   1acc0:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1acc2:	c0 5f       	subi	r28, 0xF0	; 240
   1acc4:	de 4f       	sbci	r29, 0xFE	; 254
   1acc6:	e8 81       	ld	r30, Y
   1acc8:	f9 81       	ldd	r31, Y+1	; 0x01
   1acca:	c0 51       	subi	r28, 0x10	; 16
   1accc:	d1 40       	sbci	r29, 0x01	; 1
   1acce:	80 81       	ld	r24, Z
   1acd0:	91 81       	ldd	r25, Z+1	; 0x01
   1acd2:	a2 81       	ldd	r26, Z+2	; 0x02
   1acd4:	b3 81       	ldd	r27, Z+3	; 0x03
   1acd6:	f7 01       	movw	r30, r14
   1acd8:	80 8b       	std	Z+16, r24	; 0x10
   1acda:	91 8b       	std	Z+17, r25	; 0x11
   1acdc:	a2 8b       	std	Z+18, r26	; 0x12
   1acde:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1ace0:	60 e0       	ldi	r22, 0x00	; 0
   1ace2:	70 e0       	ldi	r23, 0x00	; 0
   1ace4:	c7 01       	movw	r24, r14
   1ace6:	0e 94 ff c6 	call	0x18dfe	; 0x18dfe <lif_writedirindex>
   1acea:	8c 01       	movw	r16, r24
   1acec:	89 2b       	or	r24, r25
   1acee:	41 f0       	breq	.+16     	; 0x1ad00 <lif_extract_lif_as_lif+0x110>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1acf0:	61 e0       	ldi	r22, 0x01	; 1
   1acf2:	70 e0       	ldi	r23, 0x00	; 0
   1acf4:	c7 01       	movw	r24, r14
   1acf6:	0e 94 5b c7 	call	0x18eb6	; 0x18eb6 <lif_writedirEOF>
   1acfa:	8c 01       	movw	r16, r24
   1acfc:	89 2b       	or	r24, r25
   1acfe:	39 f4       	brne	.+14     	; 0x1ad0e <lif_extract_lif_as_lif+0x11e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ad00:	c4 01       	movw	r24, r8
   1ad02:	0e 94 0a c6 	call	0x18c14	; 0x18c14 <lif_close_volume>
   1ad06:	c7 01       	movw	r24, r14
   1ad08:	0e 94 0a c6 	call	0x18c14	; 0x18c14 <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1ad0c:	a3 c0       	rjmp	.+326    	; 0x1ae54 <lif_extract_lif_as_lif+0x264>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1ad0e:	f7 01       	movw	r30, r14
   1ad10:	44 84       	ldd	r4, Z+12	; 0x0c
   1ad12:	55 84       	ldd	r5, Z+13	; 0x0d
   1ad14:	66 84       	ldd	r6, Z+14	; 0x0e
   1ad16:	77 84       	ldd	r7, Z+15	; 0x0f
   1ad18:	76 2c       	mov	r7, r6
   1ad1a:	65 2c       	mov	r6, r5
   1ad1c:	54 2c       	mov	r5, r4
   1ad1e:	44 24       	eor	r4, r4

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1ad20:	f4 01       	movw	r30, r8
   1ad22:	e4 5a       	subi	r30, 0xA4	; 164
   1ad24:	ff 4f       	sbci	r31, 0xFF	; 255
   1ad26:	80 81       	ld	r24, Z
   1ad28:	91 81       	ldd	r25, Z+1	; 0x01
   1ad2a:	a2 81       	ldd	r26, Z+2	; 0x02
   1ad2c:	b3 81       	ldd	r27, Z+3	; 0x03
   1ad2e:	22 27       	eor	r18, r18
   1ad30:	38 2f       	mov	r19, r24
   1ad32:	49 2f       	mov	r20, r25
   1ad34:	5a 2f       	mov	r21, r26
   1ad36:	c4 5f       	subi	r28, 0xF4	; 244
   1ad38:	de 4f       	sbci	r29, 0xFE	; 254
   1ad3a:	28 83       	st	Y, r18
   1ad3c:	39 83       	std	Y+1, r19	; 0x01
   1ad3e:	4a 83       	std	Y+2, r20	; 0x02
   1ad40:	5b 83       	std	Y+3, r21	; 0x03
   1ad42:	cc 50       	subi	r28, 0x0C	; 12
   1ad44:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1ad46:	21 2c       	mov	r2, r1
   1ad48:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1ad4a:	8f e3       	ldi	r24, 0x3F	; 63
   1ad4c:	91 e3       	ldi	r25, 0x31	; 49
   1ad4e:	9c 01       	movw	r18, r24
   1ad50:	40 e0       	ldi	r20, 0x00	; 0
   1ad52:	ce 5e       	subi	r28, 0xEE	; 238
   1ad54:	de 4f       	sbci	r29, 0xFE	; 254
   1ad56:	28 83       	st	Y, r18
   1ad58:	39 83       	std	Y+1, r19	; 0x01
   1ad5a:	4a 83       	std	Y+2, r20	; 0x02
   1ad5c:	c2 51       	subi	r28, 0x12	; 18
   1ad5e:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1ad60:	c0 5f       	subi	r28, 0xF0	; 240
   1ad62:	de 4f       	sbci	r29, 0xFE	; 254
   1ad64:	e8 81       	ld	r30, Y
   1ad66:	f9 81       	ldd	r31, Y+1	; 0x01
   1ad68:	c0 51       	subi	r28, 0x10	; 16
   1ad6a:	d1 40       	sbci	r29, 0x01	; 1
   1ad6c:	80 81       	ld	r24, Z
   1ad6e:	91 81       	ldd	r25, Z+1	; 0x01
   1ad70:	28 16       	cp	r2, r24
   1ad72:	39 06       	cpc	r3, r25
   1ad74:	0c f0       	brlt	.+2      	; 0x1ad78 <lif_extract_lif_as_lif+0x188>
   1ad76:	58 c0       	rjmp	.+176    	; 0x1ae28 <lif_extract_lif_as_lif+0x238>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1ad78:	00 e0       	ldi	r16, 0x00	; 0
   1ad7a:	11 e0       	ldi	r17, 0x01	; 1
   1ad7c:	c4 5f       	subi	r28, 0xF4	; 244
   1ad7e:	de 4f       	sbci	r29, 0xFE	; 254
   1ad80:	28 81       	ld	r18, Y
   1ad82:	39 81       	ldd	r19, Y+1	; 0x01
   1ad84:	4a 81       	ldd	r20, Y+2	; 0x02
   1ad86:	5b 81       	ldd	r21, Y+3	; 0x03
   1ad88:	cc 50       	subi	r28, 0x0C	; 12
   1ad8a:	d1 40       	sbci	r29, 0x01	; 1
   1ad8c:	be 01       	movw	r22, r28
   1ad8e:	68 5f       	subi	r22, 0xF8	; 248
   1ad90:	7f 4f       	sbci	r23, 0xFF	; 255
   1ad92:	c4 01       	movw	r24, r8
   1ad94:	0e 94 5e bd 	call	0x17abc	; 0x17abc <lif_read>
   1ad98:	5b 01       	movw	r10, r22
   1ad9a:	6c 01       	movw	r12, r24
        if(size < LIF_SECTOR_SIZE)
   1ad9c:	6f 3f       	cpi	r22, 0xFF	; 255
   1ad9e:	71 05       	cpc	r23, r1
   1ada0:	09 f0       	breq	.+2      	; 0x1ada4 <lif_extract_lif_as_lif+0x1b4>
   1ada2:	2c f4       	brge	.+10     	; 0x1adae <lif_extract_lif_as_lif+0x1be>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ada4:	c4 01       	movw	r24, r8
   1ada6:	0e 94 0a c6 	call	0x18c14	; 0x18c14 <lif_close_volume>
   1adaa:	c7 01       	movw	r24, r14
   1adac:	4f cf       	rjmp	.-354    	; 0x1ac4c <lif_extract_lif_as_lif+0x5c>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1adae:	00 e0       	ldi	r16, 0x00	; 0
   1adb0:	11 e0       	ldi	r17, 0x01	; 1
   1adb2:	a3 01       	movw	r20, r6
   1adb4:	92 01       	movw	r18, r4
   1adb6:	be 01       	movw	r22, r28
   1adb8:	68 5f       	subi	r22, 0xF8	; 248
   1adba:	7f 4f       	sbci	r23, 0xFF	; 255
   1adbc:	c7 01       	movw	r24, r14
   1adbe:	0e 94 af bd 	call	0x17b5e	; 0x17b5e <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1adc2:	c5 01       	movw	r24, r10
   1adc4:	0b 2c       	mov	r0, r11
   1adc6:	00 0c       	add	r0, r0
   1adc8:	aa 0b       	sbc	r26, r26
   1adca:	bb 0b       	sbc	r27, r27
   1adcc:	48 0e       	add	r4, r24
   1adce:	59 1e       	adc	r5, r25
   1add0:	6a 1e       	adc	r6, r26
   1add2:	7b 1e       	adc	r7, r27
        offset += size;
   1add4:	c4 5f       	subi	r28, 0xF4	; 244
   1add6:	de 4f       	sbci	r29, 0xFE	; 254
   1add8:	28 81       	ld	r18, Y
   1adda:	39 81       	ldd	r19, Y+1	; 0x01
   1addc:	4a 81       	ldd	r20, Y+2	; 0x02
   1adde:	5b 81       	ldd	r21, Y+3	; 0x03
   1ade0:	cc 50       	subi	r28, 0x0C	; 12
   1ade2:	d1 40       	sbci	r29, 0x01	; 1
   1ade4:	28 0f       	add	r18, r24
   1ade6:	39 1f       	adc	r19, r25
   1ade8:	4a 1f       	adc	r20, r26
   1adea:	5b 1f       	adc	r21, r27
   1adec:	c4 5f       	subi	r28, 0xF4	; 244
   1adee:	de 4f       	sbci	r29, 0xFE	; 254
   1adf0:	28 83       	st	Y, r18
   1adf2:	39 83       	std	Y+1, r19	; 0x01
   1adf4:	4a 83       	std	Y+2, r20	; 0x02
   1adf6:	5b 83       	std	Y+3, r21	; 0x03
   1adf8:	cc 50       	subi	r28, 0x0C	; 12
   1adfa:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
   1adfc:	ed b7       	in	r30, 0x3d	; 61
   1adfe:	fe b7       	in	r31, 0x3e	; 62
   1ae00:	44 82       	std	Z+4, r4	; 0x04
   1ae02:	55 82       	std	Z+5, r5	; 0x05
   1ae04:	66 82       	std	Z+6, r6	; 0x06
   1ae06:	77 82       	std	Z+7, r7	; 0x07
   1ae08:	ce 5e       	subi	r28, 0xEE	; 238
   1ae0a:	de 4f       	sbci	r29, 0xFE	; 254
   1ae0c:	28 81       	ld	r18, Y
   1ae0e:	39 81       	ldd	r19, Y+1	; 0x01
   1ae10:	4a 81       	ldd	r20, Y+2	; 0x02
   1ae12:	c2 51       	subi	r28, 0x12	; 18
   1ae14:	d1 40       	sbci	r29, 0x01	; 1
   1ae16:	21 83       	std	Z+1, r18	; 0x01
   1ae18:	32 83       	std	Z+2, r19	; 0x02
   1ae1a:	43 83       	std	Z+3, r20	; 0x03
   1ae1c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1ae20:	ff ef       	ldi	r31, 0xFF	; 255
   1ae22:	2f 1a       	sub	r2, r31
   1ae24:	3f 0a       	sbc	r3, r31
   1ae26:	9c cf       	rjmp	.-200    	; 0x1ad60 <lif_extract_lif_as_lif+0x170>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ae28:	c4 01       	movw	r24, r8
   1ae2a:	0e 94 0a c6 	call	0x18c14	; 0x18c14 <lif_close_volume>
   1ae2e:	c7 01       	movw	r24, r14
   1ae30:	0e 94 0a c6 	call	0x18c14	; 0x18c14 <lif_close_volume>
        uoffset += size;
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("\tWrote: %8ld\n", bytes);
   1ae34:	ed b7       	in	r30, 0x3d	; 61
   1ae36:	fe b7       	in	r31, 0x3e	; 62
   1ae38:	44 82       	std	Z+4, r4	; 0x04
   1ae3a:	55 82       	std	Z+5, r5	; 0x05
   1ae3c:	66 82       	std	Z+6, r6	; 0x06
   1ae3e:	77 82       	std	Z+7, r7	; 0x07
   1ae40:	81 e3       	ldi	r24, 0x31	; 49
   1ae42:	91 e3       	ldi	r25, 0x31	; 49
   1ae44:	a0 e0       	ldi	r26, 0x00	; 0
   1ae46:	81 83       	std	Z+1, r24	; 0x01
   1ae48:	92 83       	std	Z+2, r25	; 0x02
   1ae4a:	a3 83       	std	Z+3, r26	; 0x03
   1ae4c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    return(1);
   1ae50:	01 e0       	ldi	r16, 0x01	; 1
   1ae52:	10 e0       	ldi	r17, 0x00	; 0
}
   1ae54:	c8 01       	movw	r24, r16
   1ae56:	cc 5e       	subi	r28, 0xEC	; 236
   1ae58:	de 4f       	sbci	r29, 0xFE	; 254
   1ae5a:	e2 e1       	ldi	r30, 0x12	; 18
   1ae5c:	0c 94 f4 e0 	jmp	0x1c1e8	; 0x1c1e8 <__epilogue_restores__>

0001ae60 <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1ae60:	2f 92       	push	r2
   1ae62:	3f 92       	push	r3
   1ae64:	4f 92       	push	r4
   1ae66:	5f 92       	push	r5
   1ae68:	6f 92       	push	r6
   1ae6a:	8f 92       	push	r8
   1ae6c:	9f 92       	push	r9
   1ae6e:	af 92       	push	r10
   1ae70:	bf 92       	push	r11
   1ae72:	cf 92       	push	r12
   1ae74:	df 92       	push	r13
   1ae76:	ef 92       	push	r14
   1ae78:	ff 92       	push	r15
   1ae7a:	0f 93       	push	r16
   1ae7c:	1f 93       	push	r17
   1ae7e:	cf 93       	push	r28
   1ae80:	df 93       	push	r29
   1ae82:	cd b7       	in	r28, 0x3d	; 61
   1ae84:	de b7       	in	r29, 0x3e	; 62
   1ae86:	cd 51       	subi	r28, 0x1D	; 29
   1ae88:	d1 40       	sbci	r29, 0x01	; 1
   1ae8a:	0f b6       	in	r0, 0x3f	; 63
   1ae8c:	f8 94       	cli
   1ae8e:	de bf       	out	0x3e, r29	; 62
   1ae90:	0f be       	out	0x3f, r0	; 63
   1ae92:	cd bf       	out	0x3d, r28	; 61
   1ae94:	5c 01       	movw	r10, r24
   1ae96:	7b 01       	movw	r14, r22
   1ae98:	4a 01       	movw	r8, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1ae9a:	dc 01       	movw	r26, r24
   1ae9c:	8c 91       	ld	r24, X
   1ae9e:	81 11       	cpse	r24, r1
   1aea0:	03 c0       	rjmp	.+6      	; 0x1aea8 <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1aea2:	81 e1       	ldi	r24, 0x11	; 17
   1aea4:	91 e3       	ldi	r25, 0x31	; 49
   1aea6:	06 c0       	rjmp	.+12     	; 0x1aeb4 <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1aea8:	db 01       	movw	r26, r22
   1aeaa:	8c 91       	ld	r24, X
   1aeac:	81 11       	cpse	r24, r1
   1aeae:	0b c0       	rjmp	.+22     	; 0x1aec6 <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1aeb0:	86 ef       	ldi	r24, 0xF6	; 246
   1aeb2:	90 e3       	ldi	r25, 0x30	; 48
   1aeb4:	a0 e0       	ldi	r26, 0x00	; 0
   1aeb6:	ed b7       	in	r30, 0x3d	; 61
   1aeb8:	fe b7       	in	r31, 0x3e	; 62
   1aeba:	81 83       	std	Z+1, r24	; 0x01
   1aebc:	92 83       	std	Z+2, r25	; 0x02
   1aebe:	a3 83       	std	Z+3, r26	; 0x03
   1aec0:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1aec4:	25 c1       	rjmp	.+586    	; 0x1b110 <lif_add_lif_file+0x2b0>
        return(-1);
    }
    if(!*userfile)
   1aec6:	da 01       	movw	r26, r20
   1aec8:	8c 91       	ld	r24, X
   1aeca:	81 11       	cpse	r24, r1
   1aecc:	03 c0       	rjmp	.+6      	; 0x1aed4 <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1aece:	8a ed       	ldi	r24, 0xDA	; 218
   1aed0:	90 e3       	ldi	r25, 0x30	; 48
   1aed2:	f0 cf       	rjmp	.-32     	; 0x1aeb4 <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & LIF_DEBUG)
   1aed4:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1aed8:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1aedc:	92 ff       	sbrs	r25, 2
   1aede:	10 c0       	rjmp	.+32     	; 0x1af00 <lif_add_lif_file+0xa0>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n",
   1aee0:	ed b7       	in	r30, 0x3d	; 61
   1aee2:	fe b7       	in	r31, 0x3e	; 62
   1aee4:	51 87       	std	Z+9, r21	; 0x09
   1aee6:	40 87       	std	Z+8, r20	; 0x08
   1aee8:	77 83       	std	Z+7, r23	; 0x07
   1aeea:	66 83       	std	Z+6, r22	; 0x06
   1aeec:	b5 82       	std	Z+5, r11	; 0x05
   1aeee:	a4 82       	std	Z+4, r10	; 0x04
   1aef0:	8b ea       	ldi	r24, 0xAB	; 171
   1aef2:	90 e3       	ldi	r25, 0x30	; 48
   1aef4:	a0 e0       	ldi	r26, 0x00	; 0
   1aef6:	81 83       	std	Z+1, r24	; 0x01
   1aef8:	92 83       	std	Z+2, r25	; 0x02
   1aefa:	a3 83       	std	Z+3, r26	; 0x03
   1aefc:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            lifimagename, lifname, userfile);

// open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1af00:	68 e0       	ldi	r22, 0x08	; 8
   1af02:	79 e0       	ldi	r23, 0x09	; 9
   1af04:	c4 01       	movw	r24, r8
   1af06:	0e 94 c5 cc 	call	0x1998a	; 0x1998a <lif_open_volume>
   1af0a:	6c 01       	movw	r12, r24
    if(ULIF == NULL)
   1af0c:	00 97       	sbiw	r24, 0x00	; 0
   1af0e:	09 f4       	brne	.+2      	; 0x1af12 <lif_add_lif_file+0xb2>
   1af10:	ff c0       	rjmp	.+510    	; 0x1b110 <lif_add_lif_file+0x2b0>
        return(-1);

// find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1af12:	b7 01       	movw	r22, r14
   1af14:	09 d8       	rcall	.-4078   	; 0x19f28 <lif_find_file>
    if(index == -1)
   1af16:	01 96       	adiw	r24, 0x01	; 1
   1af18:	a1 f4       	brne	.+40     	; 0x1af42 <lif_add_lif_file+0xe2>
    {
        printf("File not found:%s\n", lifname);
   1af1a:	ed b7       	in	r30, 0x3d	; 61
   1af1c:	fe b7       	in	r31, 0x3e	; 62
   1af1e:	f5 82       	std	Z+5, r15	; 0x05
   1af20:	e4 82       	std	Z+4, r14	; 0x04
   1af22:	88 e9       	ldi	r24, 0x98	; 152
   1af24:	90 e3       	ldi	r25, 0x30	; 48
   1af26:	a0 e0       	ldi	r26, 0x00	; 0
   1af28:	81 83       	std	Z+1, r24	; 0x01
   1af2a:	92 83       	std	Z+2, r25	; 0x02
   1af2c:	a3 83       	std	Z+3, r26	; 0x03
   1af2e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1af32:	c6 01       	movw	r24, r12
   1af34:	0e 94 0a c6 	call	0x18c14	; 0x18c14 <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1af38:	60 e0       	ldi	r22, 0x00	; 0
   1af3a:	70 e0       	ldi	r23, 0x00	; 0
   1af3c:	80 e0       	ldi	r24, 0x00	; 0
   1af3e:	90 e0       	ldi	r25, 0x00	; 0
   1af40:	ff c0       	rjmp	.+510    	; 0x1b140 <lif_add_lif_file+0x2e0>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1af42:	68 e0       	ldi	r22, 0x08	; 8
   1af44:	79 e0       	ldi	r23, 0x09	; 9
   1af46:	c5 01       	movw	r24, r10
   1af48:	0e 94 c5 cc 	call	0x1998a	; 0x1998a <lif_open_volume>
   1af4c:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1af4e:	00 97       	sbiw	r24, 0x00	; 0
   1af50:	09 f4       	brne	.+2      	; 0x1af54 <lif_add_lif_file+0xf4>
   1af52:	de c0       	rjmp	.+444    	; 0x1b110 <lif_add_lif_file+0x2b0>
        return(-1);

// Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1af54:	f6 01       	movw	r30, r12
   1af56:	e0 5a       	subi	r30, 0xA0	; 160
   1af58:	ff 4f       	sbci	r31, 0xFF	; 255
   1af5a:	40 81       	ld	r20, Z
   1af5c:	51 81       	ldd	r21, Z+1	; 0x01
   1af5e:	62 81       	ldd	r22, Z+2	; 0x02
   1af60:	73 81       	ldd	r23, Z+3	; 0x03
   1af62:	0e 94 65 cb 	call	0x196ca	; 0x196ca <lif_newdir>
   1af66:	ca 5e       	subi	r28, 0xEA	; 234
   1af68:	de 4f       	sbci	r29, 0xFE	; 254
   1af6a:	99 83       	std	Y+1, r25	; 0x01
   1af6c:	88 83       	st	Y, r24
   1af6e:	c6 51       	subi	r28, 0x16	; 22
   1af70:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1af72:	01 96       	adiw	r24, 0x01	; 1
   1af74:	79 f4       	brne	.+30     	; 0x1af94 <lif_add_lif_file+0x134>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n",
   1af76:	ed b7       	in	r30, 0x3d	; 61
   1af78:	fe b7       	in	r31, 0x3e	; 62
   1af7a:	97 82       	std	Z+7, r9	; 0x07
   1af7c:	86 82       	std	Z+6, r8	; 0x06
   1af7e:	b5 82       	std	Z+5, r11	; 0x05
   1af80:	a4 82       	std	Z+4, r10	; 0x04
   1af82:	88 e6       	ldi	r24, 0x68	; 104
   1af84:	90 e3       	ldi	r25, 0x30	; 48
   1af86:	a0 e0       	ldi	r26, 0x00	; 0
   1af88:	81 83       	std	Z+1, r24	; 0x01
   1af8a:	92 83       	std	Z+2, r25	; 0x02
   1af8c:	a3 83       	std	Z+3, r26	; 0x03
   1af8e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1af92:	a8 c0       	rjmp	.+336    	; 0x1b0e4 <lif_add_lif_file+0x284>
        lif_closedir(ULIF);
        return(-1);
    }

// Save start sector
    start = LIF->DIR.FileStartSector;
   1af94:	c7 01       	movw	r24, r14
   1af96:	84 5a       	subi	r24, 0xA4	; 164
   1af98:	9f 4f       	sbci	r25, 0xFF	; 255
   1af9a:	dc 01       	movw	r26, r24
   1af9c:	4d 91       	ld	r20, X+
   1af9e:	5d 91       	ld	r21, X+
   1afa0:	6d 91       	ld	r22, X+
   1afa2:	7c 91       	ld	r23, X
   1afa4:	13 97       	sbiw	r26, 0x03	; 3

// Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1afa6:	21 e2       	ldi	r18, 0x21	; 33
   1afa8:	f6 01       	movw	r30, r12
   1afaa:	e1 5b       	subi	r30, 0xB1	; 177
   1afac:	ff 4f       	sbci	r31, 0xFF	; 255
   1afae:	1d 97       	sbiw	r26, 0x0d	; 13
   1afb0:	01 90       	ld	r0, Z+
   1afb2:	0d 92       	st	X+, r0
   1afb4:	2a 95       	dec	r18
   1afb6:	e1 f7       	brne	.-8      	; 0x1afb0 <lif_add_lif_file+0x150>

// Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1afb8:	fc 01       	movw	r30, r24
   1afba:	40 83       	st	Z, r20
   1afbc:	51 83       	std	Z+1, r21	; 0x01
   1afbe:	62 83       	std	Z+2, r22	; 0x02
   1afc0:	73 83       	std	Z+3, r23	; 0x03

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1afc2:	b6 2f       	mov	r27, r22
   1afc4:	a5 2f       	mov	r26, r21
   1afc6:	94 2f       	mov	r25, r20
   1afc8:	88 27       	eor	r24, r24
   1afca:	c2 5f       	subi	r28, 0xF2	; 242
   1afcc:	de 4f       	sbci	r29, 0xFE	; 254
   1afce:	88 83       	st	Y, r24
   1afd0:	99 83       	std	Y+1, r25	; 0x01
   1afd2:	aa 83       	std	Y+2, r26	; 0x02
   1afd4:	bb 83       	std	Y+3, r27	; 0x03
   1afd6:	ce 50       	subi	r28, 0x0E	; 14
   1afd8:	d1 40       	sbci	r29, 0x01	; 1
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1afda:	f6 01       	movw	r30, r12
   1afdc:	e4 5a       	subi	r30, 0xA4	; 164
   1afde:	ff 4f       	sbci	r31, 0xFF	; 255
   1afe0:	80 81       	ld	r24, Z
   1afe2:	91 81       	ldd	r25, Z+1	; 0x01
   1afe4:	a2 81       	ldd	r26, Z+2	; 0x02
   1afe6:	b3 81       	ldd	r27, Z+3	; 0x03
   1afe8:	22 27       	eor	r18, r18
   1afea:	38 2f       	mov	r19, r24
   1afec:	49 2f       	mov	r20, r25
   1afee:	5a 2f       	mov	r21, r26
   1aff0:	ce 5e       	subi	r28, 0xEE	; 238
   1aff2:	de 4f       	sbci	r29, 0xFE	; 254
   1aff4:	28 83       	st	Y, r18
   1aff6:	39 83       	std	Y+1, r19	; 0x01
   1aff8:	4a 83       	std	Y+2, r20	; 0x02
   1affa:	5b 83       	std	Y+3, r21	; 0x03
   1affc:	c2 51       	subi	r28, 0x12	; 18
   1affe:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b000:	21 2c       	mov	r2, r1
   1b002:	31 2c       	mov	r3, r1

// Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1b004:	81 2c       	mov	r8, r1
   1b006:	91 2c       	mov	r9, r1
   1b008:	54 01       	movw	r10, r8
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b00a:	a7 01       	movw	r20, r14
   1b00c:	40 5a       	subi	r20, 0xA0	; 160
   1b00e:	5f 4f       	sbci	r21, 0xFF	; 255
   1b010:	c4 5e       	subi	r28, 0xE4	; 228
   1b012:	de 4f       	sbci	r29, 0xFE	; 254
   1b014:	59 83       	std	Y+1, r21	; 0x01
   1b016:	48 83       	st	Y, r20
   1b018:	cc 51       	subi	r28, 0x1C	; 28
   1b01a:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("\tWrote: %8ld\r", bytes);
   1b01c:	8a e5       	ldi	r24, 0x5A	; 90
   1b01e:	90 e3       	ldi	r25, 0x30	; 48
   1b020:	2c 01       	movw	r4, r24
   1b022:	61 2c       	mov	r6, r1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b024:	27 c0       	rjmp	.+78     	; 0x1b074 <lif_add_lif_file+0x214>
            lif_closedir(ULIF);
            return(-1);
        }

// Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1b026:	00 e0       	ldi	r16, 0x00	; 0
   1b028:	11 e0       	ldi	r17, 0x01	; 1
   1b02a:	c8 5e       	subi	r28, 0xE8	; 232
   1b02c:	de 4f       	sbci	r29, 0xFE	; 254
   1b02e:	28 81       	ld	r18, Y
   1b030:	39 81       	ldd	r19, Y+1	; 0x01
   1b032:	4a 81       	ldd	r20, Y+2	; 0x02
   1b034:	5b 81       	ldd	r21, Y+3	; 0x03
   1b036:	c8 51       	subi	r28, 0x18	; 24
   1b038:	d1 40       	sbci	r29, 0x01	; 1
   1b03a:	be 01       	movw	r22, r28
   1b03c:	66 5f       	subi	r22, 0xF6	; 246
   1b03e:	7f 4f       	sbci	r23, 0xFF	; 255
   1b040:	c7 01       	movw	r24, r14
   1b042:	0e 94 af bd 	call	0x17b5e	; 0x17b5e <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1b046:	8f 3f       	cpi	r24, 0xFF	; 255
   1b048:	91 05       	cpc	r25, r1
   1b04a:	09 f0       	breq	.+2      	; 0x1b04e <lif_add_lif_file+0x1ee>
   1b04c:	0c f4       	brge	.+2      	; 0x1b050 <lif_add_lif_file+0x1f0>
   1b04e:	4a c0       	rjmp	.+148    	; 0x1b0e4 <lif_add_lif_file+0x284>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1b050:	5f ef       	ldi	r21, 0xFF	; 255
   1b052:	95 1a       	sub	r9, r21
   1b054:	a5 0a       	sbc	r10, r21
   1b056:	b5 0a       	sbc	r11, r21
        printf("\tWrote: %8ld\r", bytes);
   1b058:	ed b7       	in	r30, 0x3d	; 61
   1b05a:	fe b7       	in	r31, 0x3e	; 62
   1b05c:	84 82       	std	Z+4, r8	; 0x04
   1b05e:	95 82       	std	Z+5, r9	; 0x05
   1b060:	a6 82       	std	Z+6, r10	; 0x06
   1b062:	b7 82       	std	Z+7, r11	; 0x07
   1b064:	41 82       	std	Z+1, r4	; 0x01
   1b066:	52 82       	std	Z+2, r5	; 0x02
   1b068:	63 82       	std	Z+3, r6	; 0x03
   1b06a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
// User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
// Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1b06e:	ff ef       	ldi	r31, 0xFF	; 255
   1b070:	2f 1a       	sub	r2, r31
   1b072:	3f 0a       	sbc	r3, r31
   1b074:	ce 5e       	subi	r28, 0xEE	; 238
   1b076:	de 4f       	sbci	r29, 0xFE	; 254
   1b078:	28 81       	ld	r18, Y
   1b07a:	39 81       	ldd	r19, Y+1	; 0x01
   1b07c:	4a 81       	ldd	r20, Y+2	; 0x02
   1b07e:	5b 81       	ldd	r21, Y+3	; 0x03
   1b080:	c2 51       	subi	r28, 0x12	; 18
   1b082:	d1 40       	sbci	r29, 0x01	; 1
   1b084:	28 0d       	add	r18, r8
   1b086:	39 1d       	adc	r19, r9
   1b088:	4a 1d       	adc	r20, r10
   1b08a:	5b 1d       	adc	r21, r11
   1b08c:	c2 5f       	subi	r28, 0xF2	; 242
   1b08e:	de 4f       	sbci	r29, 0xFE	; 254
   1b090:	88 81       	ld	r24, Y
   1b092:	99 81       	ldd	r25, Y+1	; 0x01
   1b094:	aa 81       	ldd	r26, Y+2	; 0x02
   1b096:	bb 81       	ldd	r27, Y+3	; 0x03
   1b098:	ce 50       	subi	r28, 0x0E	; 14
   1b09a:	d1 40       	sbci	r29, 0x01	; 1
   1b09c:	88 0d       	add	r24, r8
   1b09e:	99 1d       	adc	r25, r9
   1b0a0:	aa 1d       	adc	r26, r10
   1b0a2:	bb 1d       	adc	r27, r11
   1b0a4:	c8 5e       	subi	r28, 0xE8	; 232
   1b0a6:	de 4f       	sbci	r29, 0xFE	; 254
   1b0a8:	88 83       	st	Y, r24
   1b0aa:	99 83       	std	Y+1, r25	; 0x01
   1b0ac:	aa 83       	std	Y+2, r26	; 0x02
   1b0ae:	bb 83       	std	Y+3, r27	; 0x03
   1b0b0:	c8 51       	subi	r28, 0x18	; 24
   1b0b2:	d1 40       	sbci	r29, 0x01	; 1
   1b0b4:	c4 5e       	subi	r28, 0xE4	; 228
   1b0b6:	de 4f       	sbci	r29, 0xFE	; 254
   1b0b8:	a8 81       	ld	r26, Y
   1b0ba:	b9 81       	ldd	r27, Y+1	; 0x01
   1b0bc:	cc 51       	subi	r28, 0x1C	; 28
   1b0be:	d1 40       	sbci	r29, 0x01	; 1
   1b0c0:	8d 91       	ld	r24, X+
   1b0c2:	9c 91       	ld	r25, X
   1b0c4:	28 16       	cp	r2, r24
   1b0c6:	39 06       	cpc	r3, r25
   1b0c8:	94 f4       	brge	.+36     	; 0x1b0ee <lif_add_lif_file+0x28e>
    {
// Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1b0ca:	00 e0       	ldi	r16, 0x00	; 0
   1b0cc:	11 e0       	ldi	r17, 0x01	; 1
   1b0ce:	be 01       	movw	r22, r28
   1b0d0:	66 5f       	subi	r22, 0xF6	; 246
   1b0d2:	7f 4f       	sbci	r23, 0xFF	; 255
   1b0d4:	c6 01       	movw	r24, r12
   1b0d6:	0e 94 5e bd 	call	0x17abc	; 0x17abc <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1b0da:	6f 3f       	cpi	r22, 0xFF	; 255
   1b0dc:	71 05       	cpc	r23, r1
   1b0de:	11 f0       	breq	.+4      	; 0x1b0e4 <lif_add_lif_file+0x284>
   1b0e0:	0c f0       	brlt	.+2      	; 0x1b0e4 <lif_add_lif_file+0x284>
   1b0e2:	a1 cf       	rjmp	.-190    	; 0x1b026 <lif_add_lif_file+0x1c6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b0e4:	c7 01       	movw	r24, r14
   1b0e6:	0e 94 0a c6 	call	0x18c14	; 0x18c14 <lif_close_volume>
   1b0ea:	c6 01       	movw	r24, r12
   1b0ec:	0f c0       	rjmp	.+30     	; 0x1b10c <lif_add_lif_file+0x2ac>
   1b0ee:	c6 01       	movw	r24, r12
   1b0f0:	0e 94 0a c6 	call	0x18c14	; 0x18c14 <lif_close_volume>
        printf("\tWrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

// Write directory record
    if( !lif_writedirindex(LIF,index))
   1b0f4:	ca 5e       	subi	r28, 0xEA	; 234
   1b0f6:	de 4f       	sbci	r29, 0xFE	; 254
   1b0f8:	68 81       	ld	r22, Y
   1b0fa:	79 81       	ldd	r23, Y+1	; 0x01
   1b0fc:	c6 51       	subi	r28, 0x16	; 22
   1b0fe:	d1 40       	sbci	r29, 0x01	; 1
   1b100:	c7 01       	movw	r24, r14
   1b102:	0e 94 ff c6 	call	0x18dfe	; 0x18dfe <lif_writedirindex>
   1b106:	89 2b       	or	r24, r25
   1b108:	41 f4       	brne	.+16     	; 0x1b11a <lif_add_lif_file+0x2ba>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b10a:	c7 01       	movw	r24, r14
   1b10c:	0e 94 0a c6 	call	0x18c14	; 0x18c14 <lif_close_volume>

// Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1b110:	6f ef       	ldi	r22, 0xFF	; 255
   1b112:	7f ef       	ldi	r23, 0xFF	; 255
   1b114:	8f ef       	ldi	r24, 0xFF	; 255
   1b116:	9f ef       	ldi	r25, 0xFF	; 255
   1b118:	13 c0       	rjmp	.+38     	; 0x1b140 <lif_add_lif_file+0x2e0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b11a:	c7 01       	movw	r24, r14
   1b11c:	0e 94 0a c6 	call	0x18c14	; 0x18c14 <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("\tWrote: %8ld\n", bytes);
   1b120:	ed b7       	in	r30, 0x3d	; 61
   1b122:	fe b7       	in	r31, 0x3e	; 62
   1b124:	84 82       	std	Z+4, r8	; 0x04
   1b126:	95 82       	std	Z+5, r9	; 0x05
   1b128:	a6 82       	std	Z+6, r10	; 0x06
   1b12a:	b7 82       	std	Z+7, r11	; 0x07
   1b12c:	8c e4       	ldi	r24, 0x4C	; 76
   1b12e:	90 e3       	ldi	r25, 0x30	; 48
   1b130:	a0 e0       	ldi	r26, 0x00	; 0
   1b132:	81 83       	std	Z+1, r24	; 0x01
   1b134:	92 83       	std	Z+2, r25	; 0x02
   1b136:	a3 83       	std	Z+3, r26	; 0x03
   1b138:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    return(bytes);
   1b13c:	b4 01       	movw	r22, r8
   1b13e:	c5 01       	movw	r24, r10
}
   1b140:	c3 5e       	subi	r28, 0xE3	; 227
   1b142:	de 4f       	sbci	r29, 0xFE	; 254
   1b144:	0f b6       	in	r0, 0x3f	; 63
   1b146:	f8 94       	cli
   1b148:	de bf       	out	0x3e, r29	; 62
   1b14a:	0f be       	out	0x3f, r0	; 63
   1b14c:	cd bf       	out	0x3d, r28	; 61
   1b14e:	df 91       	pop	r29
   1b150:	cf 91       	pop	r28
   1b152:	1f 91       	pop	r17
   1b154:	0f 91       	pop	r16
   1b156:	ff 90       	pop	r15
   1b158:	ef 90       	pop	r14
   1b15a:	df 90       	pop	r13
   1b15c:	cf 90       	pop	r12
   1b15e:	bf 90       	pop	r11
   1b160:	af 90       	pop	r10
   1b162:	9f 90       	pop	r9
   1b164:	8f 90       	pop	r8
   1b166:	6f 90       	pop	r6
   1b168:	5f 90       	pop	r5
   1b16a:	4f 90       	pop	r4
   1b16c:	3f 90       	pop	r3
   1b16e:	2f 90       	pop	r2
   1b170:	08 95       	ret

0001b172 <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1b172:	ef 92       	push	r14
   1b174:	ff 92       	push	r15
   1b176:	0f 93       	push	r16
   1b178:	1f 93       	push	r17
   1b17a:	cf 93       	push	r28
   1b17c:	df 93       	push	r29
   1b17e:	ad b7       	in	r26, 0x3d	; 61
   1b180:	be b7       	in	r27, 0x3e	; 62
   1b182:	17 97       	sbiw	r26, 0x07	; 7
   1b184:	0f b6       	in	r0, 0x3f	; 63
   1b186:	f8 94       	cli
   1b188:	be bf       	out	0x3e, r27	; 62
   1b18a:	0f be       	out	0x3f, r0	; 63
   1b18c:	ad bf       	out	0x3d, r26	; 61
   1b18e:	7c 01       	movw	r14, r24
   1b190:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1b192:	fc 01       	movw	r30, r24
   1b194:	80 81       	ld	r24, Z
   1b196:	81 11       	cpse	r24, r1
   1b198:	03 c0       	rjmp	.+6      	; 0x1b1a0 <lif_del_file+0x2e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1b19a:	87 e2       	ldi	r24, 0x27	; 39
   1b19c:	90 e3       	ldi	r25, 0x30	; 48
   1b19e:	06 c0       	rjmp	.+12     	; 0x1b1ac <lif_del_file+0x3a>
        return(-1);
    }
    if(!*lifname)
   1b1a0:	fb 01       	movw	r30, r22
   1b1a2:	80 81       	ld	r24, Z
   1b1a4:	81 11       	cpse	r24, r1
   1b1a6:	0b c0       	rjmp	.+22     	; 0x1b1be <lif_del_file+0x4c>
    {
        printf("lif_del_file: lifname is empty\n");
   1b1a8:	87 e0       	ldi	r24, 0x07	; 7
   1b1aa:	90 e3       	ldi	r25, 0x30	; 48
   1b1ac:	a0 e0       	ldi	r26, 0x00	; 0
   1b1ae:	ed b7       	in	r30, 0x3d	; 61
   1b1b0:	fe b7       	in	r31, 0x3e	; 62
   1b1b2:	81 83       	std	Z+1, r24	; 0x01
   1b1b4:	92 83       	std	Z+2, r25	; 0x02
   1b1b6:	a3 83       	std	Z+3, r26	; 0x03
   1b1b8:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1b1bc:	68 c0       	rjmp	.+208    	; 0x1b28e <lif_del_file+0x11c>
        return(-1);
    }
    if(debuglevel & LIF_DEBUG)
   1b1be:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1b1c2:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1b1c6:	92 ff       	sbrs	r25, 2
   1b1c8:	0e c0       	rjmp	.+28     	; 0x1b1e6 <lif_del_file+0x74>
        printf("LIF image:[%s], LIF name:[%s]\n",
   1b1ca:	ed b7       	in	r30, 0x3d	; 61
   1b1cc:	fe b7       	in	r31, 0x3e	; 62
   1b1ce:	77 83       	std	Z+7, r23	; 0x07
   1b1d0:	66 83       	std	Z+6, r22	; 0x06
   1b1d2:	f5 82       	std	Z+5, r15	; 0x05
   1b1d4:	e4 82       	std	Z+4, r14	; 0x04
   1b1d6:	88 ee       	ldi	r24, 0xE8	; 232
   1b1d8:	9f e2       	ldi	r25, 0x2F	; 47
   1b1da:	a0 e0       	ldi	r26, 0x00	; 0
   1b1dc:	81 83       	std	Z+1, r24	; 0x01
   1b1de:	92 83       	std	Z+2, r25	; 0x02
   1b1e0:	a3 83       	std	Z+3, r26	; 0x03
   1b1e2:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
   1b1e6:	68 e0       	ldi	r22, 0x08	; 8
   1b1e8:	79 e0       	ldi	r23, 0x09	; 9
   1b1ea:	c7 01       	movw	r24, r14
   1b1ec:	0e 94 c5 cc 	call	0x1998a	; 0x1998a <lif_open_volume>
   1b1f0:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b1f2:	00 97       	sbiw	r24, 0x00	; 0
   1b1f4:	09 f4       	brne	.+2      	; 0x1b1f8 <lif_del_file+0x86>
   1b1f6:	4b c0       	rjmp	.+150    	; 0x1b28e <lif_del_file+0x11c>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, lifname);
   1b1f8:	b8 01       	movw	r22, r16
   1b1fa:	0e 94 94 cf 	call	0x19f28	; 0x19f28 <lif_find_file>
    if(index == -1)
   1b1fe:	8f 3f       	cpi	r24, 0xFF	; 255
   1b200:	ff ef       	ldi	r31, 0xFF	; 255
   1b202:	9f 07       	cpc	r25, r31
   1b204:	a1 f4       	brne	.+40     	; 0x1b22e <lif_del_file+0xbc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b206:	ce 01       	movw	r24, r28
   1b208:	0e 94 0a c6 	call	0x18c14	; 0x18c14 <lif_close_volume>
// Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1b20c:	ed b7       	in	r30, 0x3d	; 61
   1b20e:	fe b7       	in	r31, 0x3e	; 62
   1b210:	17 83       	std	Z+7, r17	; 0x07
   1b212:	06 83       	std	Z+6, r16	; 0x06
   1b214:	f5 82       	std	Z+5, r15	; 0x05
   1b216:	e4 82       	std	Z+4, r14	; 0x04
   1b218:	80 ec       	ldi	r24, 0xC0	; 192
   1b21a:	9f e2       	ldi	r25, 0x2F	; 47
   1b21c:	a0 e0       	ldi	r26, 0x00	; 0
   1b21e:	81 83       	std	Z+1, r24	; 0x01
   1b220:	92 83       	std	Z+2, r25	; 0x02
   1b222:	a3 83       	std	Z+3, r26	; 0x03
   1b224:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        return(0);
   1b228:	80 e0       	ldi	r24, 0x00	; 0
   1b22a:	90 e0       	ldi	r25, 0x00	; 0
   1b22c:	32 c0       	rjmp	.+100    	; 0x1b292 <lif_del_file+0x120>
    }

// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1b22e:	2a a1       	ldd	r18, Y+34	; 0x22
   1b230:	3b a1       	ldd	r19, Y+35	; 0x23
   1b232:	21 50       	subi	r18, 0x01	; 1
   1b234:	31 09       	sbc	r19, r1
   1b236:	fe 01       	movw	r30, r28
   1b238:	e6 5a       	subi	r30, 0xA6	; 166
   1b23a:	ff 4f       	sbci	r31, 0xFF	; 255
   1b23c:	82 17       	cp	r24, r18
   1b23e:	93 07       	cpc	r25, r19
   1b240:	2c f0       	brlt	.+10     	; 0x1b24c <lif_del_file+0xda>
        LIF->DIR.FileType = 0xffff;
   1b242:	2f ef       	ldi	r18, 0xFF	; 255
   1b244:	3f ef       	ldi	r19, 0xFF	; 255
   1b246:	31 83       	std	Z+1, r19	; 0x01
   1b248:	20 83       	st	Z, r18
   1b24a:	02 c0       	rjmp	.+4      	; 0x1b250 <lif_del_file+0xde>
    else
        LIF->DIR.FileType = 0;
   1b24c:	11 82       	std	Z+1, r1	; 0x01
   1b24e:	10 82       	st	Z, r1

// re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1b250:	bc 01       	movw	r22, r24
   1b252:	ce 01       	movw	r24, r28
   1b254:	0e 94 ff c6 	call	0x18dfe	; 0x18dfe <lif_writedirindex>
   1b258:	89 2b       	or	r24, r25
   1b25a:	21 f4       	brne	.+8      	; 0x1b264 <lif_del_file+0xf2>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b25c:	ce 01       	movw	r24, r28
   1b25e:	0e 94 0a c6 	call	0x18c14	; 0x18c14 <lif_close_volume>
   1b262:	15 c0       	rjmp	.+42     	; 0x1b28e <lif_del_file+0x11c>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1b264:	ce 01       	movw	r24, r28
   1b266:	0e 94 73 c7 	call	0x18ee6	; 0x18ee6 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b26a:	ce 01       	movw	r24, r28
   1b26c:	0e 94 0a c6 	call	0x18c14	; 0x18c14 <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1b270:	ed b7       	in	r30, 0x3d	; 61
   1b272:	fe b7       	in	r31, 0x3e	; 62
   1b274:	15 83       	std	Z+5, r17	; 0x05
   1b276:	04 83       	std	Z+4, r16	; 0x04
   1b278:	81 eb       	ldi	r24, 0xB1	; 177
   1b27a:	9f e2       	ldi	r25, 0x2F	; 47
   1b27c:	a0 e0       	ldi	r26, 0x00	; 0
   1b27e:	81 83       	std	Z+1, r24	; 0x01
   1b280:	92 83       	std	Z+2, r25	; 0x02
   1b282:	a3 83       	std	Z+3, r26	; 0x03
   1b284:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

    return(1);
   1b288:	81 e0       	ldi	r24, 0x01	; 1
   1b28a:	90 e0       	ldi	r25, 0x00	; 0
   1b28c:	02 c0       	rjmp	.+4      	; 0x1b292 <lif_del_file+0x120>
        printf("LIF image:[%s], LIF name:[%s]\n",
            lifimagename, lifname);

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1b28e:	8f ef       	ldi	r24, 0xFF	; 255
   1b290:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1b292:	cd b7       	in	r28, 0x3d	; 61
   1b294:	de b7       	in	r29, 0x3e	; 62
   1b296:	27 96       	adiw	r28, 0x07	; 7
   1b298:	e6 e0       	ldi	r30, 0x06	; 6
   1b29a:	b2 c7       	rjmp	.+3940   	; 0x1c200 <__epilogue_restores__+0x18>

0001b29c <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1b29c:	a7 e0       	ldi	r26, 0x07	; 7
   1b29e:	b0 e0       	ldi	r27, 0x00	; 0
   1b2a0:	e3 e5       	ldi	r30, 0x53	; 83
   1b2a2:	f9 ed       	ldi	r31, 0xD9	; 217
   1b2a4:	8d c7       	rjmp	.+3866   	; 0x1c1c0 <__prologue_saves__+0x10>
   1b2a6:	6c 01       	movw	r12, r24
   1b2a8:	8b 01       	movw	r16, r22
   1b2aa:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1b2ac:	fc 01       	movw	r30, r24
   1b2ae:	80 81       	ld	r24, Z
   1b2b0:	81 11       	cpse	r24, r1
   1b2b2:	03 c0       	rjmp	.+6      	; 0x1b2ba <lif_rename_file+0x1e>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1b2b4:	89 e8       	ldi	r24, 0x89	; 137
   1b2b6:	9f e2       	ldi	r25, 0x2F	; 47
   1b2b8:	06 c0       	rjmp	.+12     	; 0x1b2c6 <lif_rename_file+0x2a>
        return(-1);
    }
    if(!*oldlifname)
   1b2ba:	fb 01       	movw	r30, r22
   1b2bc:	80 81       	ld	r24, Z
   1b2be:	81 11       	cpse	r24, r1
   1b2c0:	0b c0       	rjmp	.+22     	; 0x1b2d8 <lif_rename_file+0x3c>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1b2c2:	82 e6       	ldi	r24, 0x62	; 98
   1b2c4:	9f e2       	ldi	r25, 0x2F	; 47
   1b2c6:	a0 e0       	ldi	r26, 0x00	; 0
   1b2c8:	ed b7       	in	r30, 0x3d	; 61
   1b2ca:	fe b7       	in	r31, 0x3e	; 62
   1b2cc:	81 83       	std	Z+1, r24	; 0x01
   1b2ce:	92 83       	std	Z+2, r25	; 0x02
   1b2d0:	a3 83       	std	Z+3, r26	; 0x03
   1b2d2:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1b2d6:	58 c0       	rjmp	.+176    	; 0x1b388 <lif_rename_file+0xec>
        return(-1);
    }
    if(!*newlifname)
   1b2d8:	fa 01       	movw	r30, r20
   1b2da:	80 81       	ld	r24, Z
   1b2dc:	81 11       	cpse	r24, r1
   1b2de:	03 c0       	rjmp	.+6      	; 0x1b2e6 <lif_rename_file+0x4a>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1b2e0:	8b e3       	ldi	r24, 0x3B	; 59
   1b2e2:	9f e2       	ldi	r25, 0x2F	; 47
   1b2e4:	f0 cf       	rjmp	.-32     	; 0x1b2c6 <lif_rename_file+0x2a>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1b2e6:	ca 01       	movw	r24, r20
   1b2e8:	0e 94 75 be 	call	0x17cea	; 0x17cea <lif_checkname>
   1b2ec:	89 2b       	or	r24, r25
   1b2ee:	19 f4       	brne	.+6      	; 0x1b2f6 <lif_rename_file+0x5a>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1b2f0:	85 e0       	ldi	r24, 0x05	; 5
   1b2f2:	9f e2       	ldi	r25, 0x2F	; 47
   1b2f4:	e8 cf       	rjmp	.-48     	; 0x1b2c6 <lif_rename_file+0x2a>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1b2f6:	68 e0       	ldi	r22, 0x08	; 8
   1b2f8:	79 e0       	ldi	r23, 0x09	; 9
   1b2fa:	c6 01       	movw	r24, r12
   1b2fc:	0e 94 c5 cc 	call	0x1998a	; 0x1998a <lif_open_volume>
   1b300:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1b302:	00 97       	sbiw	r24, 0x00	; 0
   1b304:	09 f4       	brne	.+2      	; 0x1b308 <lif_rename_file+0x6c>
   1b306:	40 c0       	rjmp	.+128    	; 0x1b388 <lif_rename_file+0xec>
        return(-1);

// Now find file record
    index = lif_find_file(LIF, oldlifname);
   1b308:	b8 01       	movw	r22, r16
   1b30a:	0e 94 94 cf 	call	0x19f28	; 0x19f28 <lif_find_file>
   1b30e:	5c 01       	movw	r10, r24
    if(index == -1)
   1b310:	01 96       	adiw	r24, 0x01	; 1
   1b312:	a1 f4       	brne	.+40     	; 0x1b33c <lif_rename_file+0xa0>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1b314:	ed b7       	in	r30, 0x3d	; 61
   1b316:	fe b7       	in	r31, 0x3e	; 62
   1b318:	17 83       	std	Z+7, r17	; 0x07
   1b31a:	06 83       	std	Z+6, r16	; 0x06
   1b31c:	d5 82       	std	Z+5, r13	; 0x05
   1b31e:	c4 82       	std	Z+4, r12	; 0x04
   1b320:	8c ed       	ldi	r24, 0xDC	; 220
   1b322:	9e e2       	ldi	r25, 0x2E	; 46
   1b324:	a0 e0       	ldi	r26, 0x00	; 0
   1b326:	81 83       	std	Z+1, r24	; 0x01
   1b328:	92 83       	std	Z+2, r25	; 0x02
   1b32a:	a3 83       	std	Z+3, r26	; 0x03
   1b32c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b330:	ce 01       	movw	r24, r28
   1b332:	0e 94 0a c6 	call	0x18c14	; 0x18c14 <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1b336:	80 e0       	ldi	r24, 0x00	; 0
   1b338:	90 e0       	ldi	r25, 0x00	; 0
   1b33a:	28 c0       	rjmp	.+80     	; 0x1b38c <lif_rename_file+0xf0>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1b33c:	4a e0       	ldi	r20, 0x0A	; 10
   1b33e:	50 e0       	ldi	r21, 0x00	; 0
   1b340:	b7 01       	movw	r22, r14
   1b342:	ce 01       	movw	r24, r28
   1b344:	81 5b       	subi	r24, 0xB1	; 177
   1b346:	9f 4f       	sbci	r25, 0xFF	; 255
   1b348:	0e 94 af be 	call	0x17d5e	; 0x17d5e <lif_fixname>

// re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1b34c:	b5 01       	movw	r22, r10
   1b34e:	ce 01       	movw	r24, r28
   1b350:	0e 94 ff c6 	call	0x18dfe	; 0x18dfe <lif_writedirindex>
   1b354:	89 2b       	or	r24, r25
   1b356:	21 f4       	brne	.+8      	; 0x1b360 <lif_rename_file+0xc4>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b358:	ce 01       	movw	r24, r28
   1b35a:	0e 94 0a c6 	call	0x18c14	; 0x18c14 <lif_close_volume>
   1b35e:	14 c0       	rjmp	.+40     	; 0x1b388 <lif_rename_file+0xec>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1b360:	ed b7       	in	r30, 0x3d	; 61
   1b362:	fe b7       	in	r31, 0x3e	; 62
   1b364:	f7 82       	std	Z+7, r15	; 0x07
   1b366:	e6 82       	std	Z+6, r14	; 0x06
   1b368:	15 83       	std	Z+5, r17	; 0x05
   1b36a:	04 83       	std	Z+4, r16	; 0x04
   1b36c:	85 ec       	ldi	r24, 0xC5	; 197
   1b36e:	9e e2       	ldi	r25, 0x2E	; 46
   1b370:	a0 e0       	ldi	r26, 0x00	; 0
   1b372:	81 83       	std	Z+1, r24	; 0x01
   1b374:	92 83       	std	Z+2, r25	; 0x02
   1b376:	a3 83       	std	Z+3, r26	; 0x03
   1b378:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b37c:	ce 01       	movw	r24, r28
   1b37e:	0e 94 0a c6 	call	0x18c14	; 0x18c14 <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1b382:	81 e0       	ldi	r24, 0x01	; 1
   1b384:	90 e0       	ldi	r25, 0x00	; 0
   1b386:	02 c0       	rjmp	.+4      	; 0x1b38c <lif_rename_file+0xf0>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1);
   1b388:	8f ef       	ldi	r24, 0xFF	; 255
   1b38a:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1b38c:	cd b7       	in	r28, 0x3d	; 61
   1b38e:	de b7       	in	r29, 0x3e	; 62
   1b390:	27 96       	adiw	r28, 0x07	; 7
   1b392:	ea e0       	ldi	r30, 0x0A	; 10
   1b394:	31 c7       	rjmp	.+3682   	; 0x1c1f8 <__epilogue_restores__+0x10>

0001b396 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1b396:	4f 92       	push	r4
   1b398:	5f 92       	push	r5
   1b39a:	6f 92       	push	r6
   1b39c:	7f 92       	push	r7
   1b39e:	af 92       	push	r10
   1b3a0:	bf 92       	push	r11
   1b3a2:	cf 92       	push	r12
   1b3a4:	df 92       	push	r13
   1b3a6:	ef 92       	push	r14
   1b3a8:	ff 92       	push	r15
   1b3aa:	0f 93       	push	r16
   1b3ac:	1f 93       	push	r17
   1b3ae:	cf 93       	push	r28
   1b3b0:	df 93       	push	r29
   1b3b2:	ad b7       	in	r26, 0x3d	; 61
   1b3b4:	be b7       	in	r27, 0x3e	; 62
   1b3b6:	17 97       	sbiw	r26, 0x07	; 7
   1b3b8:	0f b6       	in	r0, 0x3f	; 63
   1b3ba:	f8 94       	cli
   1b3bc:	be bf       	out	0x3e, r27	; 62
   1b3be:	0f be       	out	0x3f, r0	; 63
   1b3c0:	ad bf       	out	0x3d, r26	; 61
   1b3c2:	27 01       	movw	r4, r14
   1b3c4:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1b3c6:	dc 01       	movw	r26, r24
   1b3c8:	ec 91       	ld	r30, X
   1b3ca:	e1 11       	cpse	r30, r1
   1b3cc:	03 c0       	rjmp	.+6      	; 0x1b3d4 <lif_create_image+0x3e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1b3ce:	8c e9       	ldi	r24, 0x9C	; 156
   1b3d0:	9e e2       	ldi	r25, 0x2E	; 46
   1b3d2:	16 c0       	rjmp	.+44     	; 0x1b400 <lif_create_image+0x6a>
        return(-1);
    }
    if(!*liflabel)
   1b3d4:	db 01       	movw	r26, r22
   1b3d6:	ec 91       	ld	r30, X
   1b3d8:	e1 11       	cpse	r30, r1
   1b3da:	03 c0       	rjmp	.+6      	; 0x1b3e2 <lif_create_image+0x4c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1b3dc:	87 e7       	ldi	r24, 0x77	; 119
   1b3de:	9e e2       	ldi	r25, 0x2E	; 46
   1b3e0:	0f c0       	rjmp	.+30     	; 0x1b400 <lif_create_image+0x6a>
        return(-1);
    }
    if(!dirsectors)
   1b3e2:	21 15       	cp	r18, r1
   1b3e4:	31 05       	cpc	r19, r1
   1b3e6:	41 05       	cpc	r20, r1
   1b3e8:	51 05       	cpc	r21, r1
   1b3ea:	19 f4       	brne	.+6      	; 0x1b3f2 <lif_create_image+0x5c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1b3ec:	84 e5       	ldi	r24, 0x54	; 84
   1b3ee:	9e e2       	ldi	r25, 0x2E	; 46
   1b3f0:	07 c0       	rjmp	.+14     	; 0x1b400 <lif_create_image+0x6a>
        return(-1);
    }
    if(!sectors)
   1b3f2:	e1 14       	cp	r14, r1
   1b3f4:	f1 04       	cpc	r15, r1
   1b3f6:	01 05       	cpc	r16, r1
   1b3f8:	11 05       	cpc	r17, r1
   1b3fa:	59 f4       	brne	.+22     	; 0x1b412 <lif_create_image+0x7c>
    {
        printf("lif_create_image: sectors is 0\n");
   1b3fc:	84 e3       	ldi	r24, 0x34	; 52
   1b3fe:	9e e2       	ldi	r25, 0x2E	; 46
   1b400:	a0 e0       	ldi	r26, 0x00	; 0
   1b402:	ed b7       	in	r30, 0x3d	; 61
   1b404:	fe b7       	in	r31, 0x3e	; 62
   1b406:	81 83       	std	Z+1, r24	; 0x01
   1b408:	92 83       	std	Z+2, r25	; 0x02
   1b40a:	a3 83       	std	Z+3, r26	; 0x03
   1b40c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1b410:	2b c0       	rjmp	.+86     	; 0x1b468 <lif_create_image+0xd2>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1b412:	67 01       	movw	r12, r14
   1b414:	78 01       	movw	r14, r16
   1b416:	f2 e0       	ldi	r31, 0x02	; 2
   1b418:	cf 1a       	sub	r12, r31
   1b41a:	d1 08       	sbc	r13, r1
   1b41c:	e1 08       	sbc	r14, r1
   1b41e:	f1 08       	sbc	r15, r1
   1b420:	56 01       	movw	r10, r12
   1b422:	67 01       	movw	r12, r14
   1b424:	a2 1a       	sub	r10, r18
   1b426:	b3 0a       	sbc	r11, r19
   1b428:	c4 0a       	sbc	r12, r20
   1b42a:	d5 0a       	sbc	r13, r21
   1b42c:	79 01       	movw	r14, r18
   1b42e:	8a 01       	movw	r16, r20
   1b430:	22 e0       	ldi	r18, 0x02	; 2
   1b432:	30 e0       	ldi	r19, 0x00	; 0
   1b434:	40 e0       	ldi	r20, 0x00	; 0
   1b436:	50 e0       	ldi	r21, 0x00	; 0
   1b438:	0e 94 7b c8 	call	0x190f6	; 0x190f6 <lif_create_volume>
    if(LIF == NULL)
   1b43c:	00 97       	sbiw	r24, 0x00	; 0
   1b43e:	a1 f0       	breq	.+40     	; 0x1b468 <lif_create_image+0xd2>
        return(-1);
    lif_close_volume(LIF);
   1b440:	0e 94 0a c6 	call	0x18c14	; 0x18c14 <lif_close_volume>

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
   1b444:	82 01       	movw	r16, r4
   1b446:	d6 2d       	mov	r29, r6
   1b448:	c7 2d       	mov	r28, r7
   1b44a:	ed b7       	in	r30, 0x3d	; 61
   1b44c:	fe b7       	in	r31, 0x3e	; 62
   1b44e:	44 82       	std	Z+4, r4	; 0x04
   1b450:	15 83       	std	Z+5, r17	; 0x05
   1b452:	66 82       	std	Z+6, r6	; 0x06
   1b454:	77 82       	std	Z+7, r7	; 0x07
   1b456:	84 e1       	ldi	r24, 0x14	; 20
   1b458:	9e e2       	ldi	r25, 0x2E	; 46
   1b45a:	a0 e0       	ldi	r26, 0x00	; 0
   1b45c:	81 83       	std	Z+1, r24	; 0x01
   1b45e:	92 83       	std	Z+2, r25	; 0x02
   1b460:	a3 83       	std	Z+3, r26	; 0x03
   1b462:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    return(end);
   1b466:	04 c0       	rjmp	.+8      	; 0x1b470 <lif_create_image+0xda>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1b468:	0f ef       	ldi	r16, 0xFF	; 255
   1b46a:	1f ef       	ldi	r17, 0xFF	; 255
   1b46c:	df ef       	ldi	r29, 0xFF	; 255
   1b46e:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("\tFormatting: wrote %ld sectors\n", (long)end);
    return(end);
}
   1b470:	b8 01       	movw	r22, r16
   1b472:	8d 2f       	mov	r24, r29
   1b474:	9c 2f       	mov	r25, r28
   1b476:	ad b7       	in	r26, 0x3d	; 61
   1b478:	be b7       	in	r27, 0x3e	; 62
   1b47a:	17 96       	adiw	r26, 0x07	; 7
   1b47c:	0f b6       	in	r0, 0x3f	; 63
   1b47e:	f8 94       	cli
   1b480:	be bf       	out	0x3e, r27	; 62
   1b482:	0f be       	out	0x3f, r0	; 63
   1b484:	ad bf       	out	0x3d, r26	; 61
   1b486:	df 91       	pop	r29
   1b488:	cf 91       	pop	r28
   1b48a:	1f 91       	pop	r17
   1b48c:	0f 91       	pop	r16
   1b48e:	ff 90       	pop	r15
   1b490:	ef 90       	pop	r14
   1b492:	df 90       	pop	r13
   1b494:	cf 90       	pop	r12
   1b496:	bf 90       	pop	r11
   1b498:	af 90       	pop	r10
   1b49a:	7f 90       	pop	r7
   1b49c:	6f 90       	pop	r6
   1b49e:	5f 90       	pop	r5
   1b4a0:	4f 90       	pop	r4
   1b4a2:	08 95       	ret

0001b4a4 <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1b4a4:	8f 92       	push	r8
   1b4a6:	9f 92       	push	r9
   1b4a8:	af 92       	push	r10
   1b4aa:	bf 92       	push	r11
   1b4ac:	ef 92       	push	r14
   1b4ae:	ff 92       	push	r15
   1b4b0:	0f 93       	push	r16
   1b4b2:	1f 93       	push	r17
   1b4b4:	cf 93       	push	r28
   1b4b6:	df 93       	push	r29
   1b4b8:	00 d0       	rcall	.+0      	; 0x1b4ba <lif_tests+0x16>
   1b4ba:	00 d0       	rcall	.+0      	; 0x1b4bc <lif_tests+0x18>
   1b4bc:	1f 92       	push	r1
        printf("%d:%s\n", i, argv[i]);
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
   1b4be:	82 30       	cpi	r24, 0x02	; 2
   1b4c0:	91 05       	cpc	r25, r1
   1b4c2:	0c f4       	brge	.+2      	; 0x1b4c6 <lif_tests+0x22>
   1b4c4:	17 c1       	rjmp	.+558    	; 0x1b6f4 <lif_tests+0x250>
        return (1);

// Argument 1
    ind = 1;
    ptr = argv[ind++];
   1b4c6:	fb 01       	movw	r30, r22
   1b4c8:	02 81       	ldd	r16, Z+2	; 0x02
   1b4ca:	13 81       	ldd	r17, Z+3	; 0x03

// Argument 1 missing ?
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
   1b4cc:	01 15       	cp	r16, r1
   1b4ce:	11 05       	cpc	r17, r1
   1b4d0:	09 f4       	brne	.+2      	; 0x1b4d4 <lif_tests+0x30>
   1b4d2:	10 c1       	rjmp	.+544    	; 0x1b6f4 <lif_tests+0x250>
   1b4d4:	f8 01       	movw	r30, r16
   1b4d6:	20 81       	ld	r18, Z
   1b4d8:	22 23       	and	r18, r18
   1b4da:	09 f4       	brne	.+2      	; 0x1b4de <lif_tests+0x3a>
   1b4dc:	0b c1       	rjmp	.+534    	; 0x1b6f4 <lif_tests+0x250>
   1b4de:	eb 01       	movw	r28, r22
   1b4e0:	7c 01       	movw	r14, r24
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1b4e2:	6d e9       	ldi	r22, 0x9D	; 157
   1b4e4:	76 e1       	ldi	r23, 0x16	; 22
   1b4e6:	c8 01       	movw	r24, r16
   1b4e8:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCH>
   1b4ec:	89 2b       	or	r24, r25
   1b4ee:	29 f0       	breq	.+10     	; 0x1b4fa <lif_tests+0x56>
    {
        lif_help(1);
   1b4f0:	81 e0       	ldi	r24, 0x01	; 1
   1b4f2:	90 e0       	ldi	r25, 0x00	; 0
   1b4f4:	0e 94 4f bc 	call	0x1789e	; 0x1789e <lif_help>
   1b4f8:	fd c0       	rjmp	.+506    	; 0x1b6f4 <lif_tests+0x250>
//        Nothing to do
// argc should really get this
    if(!ptr || !*ptr)
        return(1);

    if(MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1b4fa:	6c e9       	ldi	r22, 0x9C	; 156
   1b4fc:	76 e1       	ldi	r23, 0x16	; 22
   1b4fe:	c8 01       	movw	r24, r16
   1b500:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCH>
   1b504:	89 2b       	or	r24, r25
   1b506:	a1 f7       	brne	.-24     	; 0x1b4f0 <lif_tests+0x4c>
   1b508:	62 ea       	ldi	r22, 0xA2	; 162
   1b50a:	76 e1       	ldi	r23, 0x16	; 22
   1b50c:	c8 01       	movw	r24, r16
   1b50e:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCH>
   1b512:	89 2b       	or	r24, r25
   1b514:	69 f7       	brne	.-38     	; 0x1b4f0 <lif_tests+0x4c>
        return(1);
    }

// Turn one debugging
// in the future we can add tests for specific messages
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1b516:	97 01       	movw	r18, r14
   1b518:	42 e0       	ldi	r20, 0x02	; 2
   1b51a:	50 e0       	ldi	r21, 0x00	; 0
   1b51c:	65 ea       	ldi	r22, 0xA5	; 165
   1b51e:	76 e1       	ldi	r23, 0x16	; 22
   1b520:	c8 01       	movw	r24, r16
   1b522:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <MATCHARGS>
   1b526:	89 2b       	or	r24, r25
   1b528:	39 f0       	breq	.+14     	; 0x1b538 <lif_tests+0x94>
    {
        debuglevel = 0xffff;
   1b52a:	8f ef       	ldi	r24, 0xFF	; 255
   1b52c:	9f ef       	ldi	r25, 0xFF	; 255
   1b52e:	90 93 b7 01 	sts	0x01B7, r25	; 0x8001b7 <debuglevel+0x1>
   1b532:	80 93 b6 01 	sts	0x01B6, r24	; 0x8001b6 <debuglevel>
   1b536:	de c0       	rjmp	.+444    	; 0x1b6f4 <lif_tests+0x250>
        return(1);
        ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1b538:	97 01       	movw	r18, r14
   1b53a:	45 e0       	ldi	r20, 0x05	; 5
   1b53c:	50 e0       	ldi	r21, 0x00	; 0
   1b53e:	68 ea       	ldi	r22, 0xA8	; 168
   1b540:	76 e1       	ldi	r23, 0x16	; 22
   1b542:	c8 01       	movw	r24, r16
   1b544:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <MATCHARGS>
   1b548:	89 2b       	or	r24, r25
   1b54a:	41 f0       	breq	.+16     	; 0x1b55c <lif_tests+0xb8>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1b54c:	48 85       	ldd	r20, Y+8	; 0x08
   1b54e:	59 85       	ldd	r21, Y+9	; 0x09
   1b550:	6e 81       	ldd	r22, Y+6	; 0x06
   1b552:	7f 81       	ldd	r23, Y+7	; 0x07
   1b554:	8c 81       	ldd	r24, Y+4	; 0x04
   1b556:	9d 81       	ldd	r25, Y+5	; 0x05
   1b558:	83 dc       	rcall	.-1786   	; 0x1ae60 <lif_add_lif_file>
   1b55a:	cc c0       	rjmp	.+408    	; 0x1b6f4 <lif_tests+0x250>

        return(1);
    }
    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1b55c:	97 01       	movw	r18, r14
   1b55e:	45 e0       	ldi	r20, 0x05	; 5
   1b560:	50 e0       	ldi	r21, 0x00	; 0
   1b562:	6f ea       	ldi	r22, 0xAF	; 175
   1b564:	76 e1       	ldi	r23, 0x16	; 22
   1b566:	c8 01       	movw	r24, r16
   1b568:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <MATCHARGS>
   1b56c:	89 2b       	or	r24, r25
   1b56e:	49 f0       	breq	.+18     	; 0x1b582 <lif_tests+0xde>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1b570:	48 85       	ldd	r20, Y+8	; 0x08
   1b572:	59 85       	ldd	r21, Y+9	; 0x09
   1b574:	6e 81       	ldd	r22, Y+6	; 0x06
   1b576:	7f 81       	ldd	r23, Y+7	; 0x07
   1b578:	8c 81       	ldd	r24, Y+4	; 0x04
   1b57a:	9d 81       	ldd	r25, Y+5	; 0x05
   1b57c:	0e 94 0d d2 	call	0x1a41a	; 0x1a41a <lif_add_ascii_file_as_e010>
   1b580:	b9 c0       	rjmp	.+370    	; 0x1b6f4 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"createdisk", (ind + 3) ,argc))
   1b582:	97 01       	movw	r18, r14
   1b584:	45 e0       	ldi	r20, 0x05	; 5
   1b586:	50 e0       	ldi	r21, 0x00	; 0
   1b588:	63 eb       	ldi	r22, 0xB3	; 179
   1b58a:	76 e1       	ldi	r23, 0x16	; 22
   1b58c:	c8 01       	movw	r24, r16
   1b58e:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <MATCHARGS>
   1b592:	89 2b       	or	r24, r25
   1b594:	e1 f1       	breq	.+120    	; 0x1b60e <lif_tests+0x16a>
    {
///@brief format LIF image
        long dir,sectors;
        char *name = argv[ind];
   1b596:	ac 80       	ldd	r10, Y+4	; 0x04
   1b598:	bd 80       	ldd	r11, Y+5	; 0x05
        char *label = argv[ind+1];
   1b59a:	8e 80       	ldd	r8, Y+6	; 0x06
   1b59c:	9f 80       	ldd	r9, Y+7	; 0x07
        char *model = argv[ind+2];
   1b59e:	08 84       	ldd	r0, Y+8	; 0x08
   1b5a0:	d9 85       	ldd	r29, Y+9	; 0x09
   1b5a2:	c0 2d       	mov	r28, r0
        if( MATCHI_LEN(model,"hp"))
   1b5a4:	6e eb       	ldi	r22, 0xBE	; 190
   1b5a6:	76 e1       	ldi	r23, 0x16	; 22
   1b5a8:	ce 01       	movw	r24, r28
   1b5aa:	0e 94 ce 2f 	call	0x5f9c	; 0x5f9c <MATCHI_LEN>
   1b5ae:	89 2b       	or	r24, r25
   1b5b0:	09 f0       	breq	.+2      	; 0x1b5b4 <lif_tests+0x110>
            model +=2;
   1b5b2:	22 96       	adiw	r28, 0x02	; 2
        if(hpdir_find_drive(model,0, 0))
   1b5b4:	40 e0       	ldi	r20, 0x00	; 0
   1b5b6:	50 e0       	ldi	r21, 0x00	; 0
   1b5b8:	60 e0       	ldi	r22, 0x00	; 0
   1b5ba:	70 e0       	ldi	r23, 0x00	; 0
   1b5bc:	ce 01       	movw	r24, r28
   1b5be:	0e 94 a2 9f 	call	0x13f44	; 0x13f44 <hpdir_find_drive>
   1b5c2:	89 2b       	or	r24, r25
   1b5c4:	b9 f0       	breq	.+46     	; 0x1b5f4 <lif_tests+0x150>
        {
            dir = lif_dir_count(hpdir.BLOCKS);
   1b5c6:	60 91 be 21 	lds	r22, 0x21BE	; 0x8021be <hpdir+0xac>
   1b5ca:	70 91 bf 21 	lds	r23, 0x21BF	; 0x8021bf <hpdir+0xad>
   1b5ce:	80 91 c0 21 	lds	r24, 0x21C0	; 0x8021c0 <hpdir+0xae>
   1b5d2:	90 91 c1 21 	lds	r25, 0x21C1	; 0x8021c1 <hpdir+0xaf>
   1b5d6:	0e 94 85 9f 	call	0x13f0a	; 0x13f0a <lif_dir_count>
   1b5da:	9b 01       	movw	r18, r22
   1b5dc:	ac 01       	movw	r20, r24
            sectors = hpdir.BLOCKS;
            lif_create_image(name, label, dir, sectors);
   1b5de:	e0 90 be 21 	lds	r14, 0x21BE	; 0x8021be <hpdir+0xac>
   1b5e2:	f0 90 bf 21 	lds	r15, 0x21BF	; 0x8021bf <hpdir+0xad>
   1b5e6:	00 91 c0 21 	lds	r16, 0x21C0	; 0x8021c0 <hpdir+0xae>
   1b5ea:	10 91 c1 21 	lds	r17, 0x21C1	; 0x8021c1 <hpdir+0xaf>
   1b5ee:	b4 01       	movw	r22, r8
   1b5f0:	c5 01       	movw	r24, r10
   1b5f2:	29 c0       	rjmp	.+82     	; 0x1b646 <lif_tests+0x1a2>
            return(1);
        }
        printf("Disk: %s not found in hpdir.ini\n", model);
   1b5f4:	ed b7       	in	r30, 0x3d	; 61
   1b5f6:	fe b7       	in	r31, 0x3e	; 62
   1b5f8:	d5 83       	std	Z+5, r29	; 0x05
   1b5fa:	c4 83       	std	Z+4, r28	; 0x04
   1b5fc:	88 e4       	ldi	r24, 0x48	; 72
   1b5fe:	90 e4       	ldi	r25, 0x40	; 64
   1b600:	a0 e0       	ldi	r26, 0x00	; 0
   1b602:	81 83       	std	Z+1, r24	; 0x01
   1b604:	92 83       	std	Z+2, r25	; 0x02
   1b606:	a3 83       	std	Z+3, r26	; 0x03
   1b608:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1b60c:	73 c0       	rjmp	.+230    	; 0x1b6f4 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1b60e:	97 01       	movw	r18, r14
   1b610:	46 e0       	ldi	r20, 0x06	; 6
   1b612:	50 e0       	ldi	r21, 0x00	; 0
   1b614:	61 ec       	ldi	r22, 0xC1	; 193
   1b616:	76 e1       	ldi	r23, 0x16	; 22
   1b618:	c8 01       	movw	r24, r16
   1b61a:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <MATCHARGS>
   1b61e:	89 2b       	or	r24, r25
   1b620:	a1 f0       	breq	.+40     	; 0x1b64a <lif_tests+0x1a6>
    {
///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1b622:	88 85       	ldd	r24, Y+8	; 0x08
   1b624:	99 85       	ldd	r25, Y+9	; 0x09
   1b626:	0e 94 e3 44 	call	0x89c6	; 0x89c6 <atol>
   1b62a:	4b 01       	movw	r8, r22
   1b62c:	5c 01       	movw	r10, r24
   1b62e:	8a 85       	ldd	r24, Y+10	; 0x0a
   1b630:	9b 85       	ldd	r25, Y+11	; 0x0b
   1b632:	0e 94 e3 44 	call	0x89c6	; 0x89c6 <atol>
   1b636:	7b 01       	movw	r14, r22
   1b638:	8c 01       	movw	r16, r24
   1b63a:	6e 81       	ldd	r22, Y+6	; 0x06
   1b63c:	7f 81       	ldd	r23, Y+7	; 0x07
   1b63e:	a5 01       	movw	r20, r10
   1b640:	94 01       	movw	r18, r8
   1b642:	8c 81       	ldd	r24, Y+4	; 0x04
   1b644:	9d 81       	ldd	r25, Y+5	; 0x05
   1b646:	a7 de       	rcall	.-690    	; 0x1b396 <lif_create_image>
   1b648:	55 c0       	rjmp	.+170    	; 0x1b6f4 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1b64a:	97 01       	movw	r18, r14
   1b64c:	44 e0       	ldi	r20, 0x04	; 4
   1b64e:	50 e0       	ldi	r21, 0x00	; 0
   1b650:	68 ec       	ldi	r22, 0xC8	; 200
   1b652:	76 e1       	ldi	r23, 0x16	; 22
   1b654:	c8 01       	movw	r24, r16
   1b656:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <MATCHARGS>
   1b65a:	89 2b       	or	r24, r25
   1b65c:	31 f0       	breq	.+12     	; 0x1b66a <lif_tests+0x1c6>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1b65e:	6e 81       	ldd	r22, Y+6	; 0x06
   1b660:	7f 81       	ldd	r23, Y+7	; 0x07
   1b662:	8c 81       	ldd	r24, Y+4	; 0x04
   1b664:	9d 81       	ldd	r25, Y+5	; 0x05
   1b666:	85 dd       	rcall	.-1270   	; 0x1b172 <lif_del_file>
   1b668:	45 c0       	rjmp	.+138    	; 0x1b6f4 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1b66a:	97 01       	movw	r18, r14
   1b66c:	43 e0       	ldi	r20, 0x03	; 3
   1b66e:	50 e0       	ldi	r21, 0x00	; 0
   1b670:	68 ed       	ldi	r22, 0xD8	; 216
   1b672:	7b e0       	ldi	r23, 0x0B	; 11
   1b674:	c8 01       	movw	r24, r16
   1b676:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <MATCHARGS>
   1b67a:	89 2b       	or	r24, r25
   1b67c:	29 f0       	breq	.+10     	; 0x1b688 <lif_tests+0x1e4>
    {
        lif_dir(argv[ind]);
   1b67e:	8c 81       	ldd	r24, Y+4	; 0x04
   1b680:	9d 81       	ldd	r25, Y+5	; 0x05
   1b682:	0e 94 bf cd 	call	0x19b7e	; 0x19b7e <lif_dir>
   1b686:	36 c0       	rjmp	.+108    	; 0x1b6f4 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1b688:	97 01       	movw	r18, r14
   1b68a:	45 e0       	ldi	r20, 0x05	; 5
   1b68c:	50 e0       	ldi	r21, 0x00	; 0
   1b68e:	6c ec       	ldi	r22, 0xCC	; 204
   1b690:	76 e1       	ldi	r23, 0x16	; 22
   1b692:	c8 01       	movw	r24, r16
   1b694:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <MATCHARGS>
   1b698:	89 2b       	or	r24, r25
   1b69a:	41 f0       	breq	.+16     	; 0x1b6ac <lif_tests+0x208>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1b69c:	48 85       	ldd	r20, Y+8	; 0x08
   1b69e:	59 85       	ldd	r21, Y+9	; 0x09
   1b6a0:	6e 81       	ldd	r22, Y+6	; 0x06
   1b6a2:	7f 81       	ldd	r23, Y+7	; 0x07
   1b6a4:	8c 81       	ldd	r24, Y+4	; 0x04
   1b6a6:	9d 81       	ldd	r25, Y+5	; 0x05
   1b6a8:	a3 da       	rcall	.-2746   	; 0x1abf0 <lif_extract_lif_as_lif>
   1b6aa:	24 c0       	rjmp	.+72     	; 0x1b6f4 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1b6ac:	97 01       	movw	r18, r14
   1b6ae:	45 e0       	ldi	r20, 0x05	; 5
   1b6b0:	50 e0       	ldi	r21, 0x00	; 0
   1b6b2:	67 ed       	ldi	r22, 0xD7	; 215
   1b6b4:	76 e1       	ldi	r23, 0x16	; 22
   1b6b6:	c8 01       	movw	r24, r16
   1b6b8:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <MATCHARGS>
   1b6bc:	89 2b       	or	r24, r25
   1b6be:	49 f0       	breq	.+18     	; 0x1b6d2 <lif_tests+0x22e>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1b6c0:	48 85       	ldd	r20, Y+8	; 0x08
   1b6c2:	59 85       	ldd	r21, Y+9	; 0x09
   1b6c4:	6e 81       	ldd	r22, Y+6	; 0x06
   1b6c6:	7f 81       	ldd	r23, Y+7	; 0x07
   1b6c8:	8c 81       	ldd	r24, Y+4	; 0x04
   1b6ca:	9d 81       	ldd	r25, Y+5	; 0x05
   1b6cc:	0e 94 49 d3 	call	0x1a692	; 0x1a692 <lif_extract_e010_as_ascii>
   1b6d0:	11 c0       	rjmp	.+34     	; 0x1b6f4 <lif_tests+0x250>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1b6d2:	97 01       	movw	r18, r14
   1b6d4:	45 e0       	ldi	r20, 0x05	; 5
   1b6d6:	50 e0       	ldi	r21, 0x00	; 0
   1b6d8:	65 ee       	ldi	r22, 0xE5	; 229
   1b6da:	7b e0       	ldi	r23, 0x0B	; 11
   1b6dc:	c8 01       	movw	r24, r16
   1b6de:	0e 94 a4 2f 	call	0x5f48	; 0x5f48 <MATCHARGS>
   1b6e2:	00 97       	sbiw	r24, 0x00	; 0
   1b6e4:	49 f0       	breq	.+18     	; 0x1b6f8 <lif_tests+0x254>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1b6e6:	48 85       	ldd	r20, Y+8	; 0x08
   1b6e8:	59 85       	ldd	r21, Y+9	; 0x09
   1b6ea:	6e 81       	ldd	r22, Y+6	; 0x06
   1b6ec:	7f 81       	ldd	r23, Y+7	; 0x07
   1b6ee:	8c 81       	ldd	r24, Y+4	; 0x04
   1b6f0:	9d 81       	ldd	r25, Y+5	; 0x05
   1b6f2:	d4 dd       	rcall	.-1112   	; 0x1b29c <lif_rename_file>
    printf("\n");
#endif

// Nothing to do ?
    if(argc < 2)
        return (1);
   1b6f4:	81 e0       	ldi	r24, 0x01	; 1
   1b6f6:	90 e0       	ldi	r25, 0x00	; 0
        td02lif(argc,argv);
        return(1);
    }
#endif
    return(0);
}
   1b6f8:	0f 90       	pop	r0
   1b6fa:	0f 90       	pop	r0
   1b6fc:	0f 90       	pop	r0
   1b6fe:	0f 90       	pop	r0
   1b700:	0f 90       	pop	r0
   1b702:	df 91       	pop	r29
   1b704:	cf 91       	pop	r28
   1b706:	1f 91       	pop	r17
   1b708:	0f 91       	pop	r16
   1b70a:	ff 90       	pop	r15
   1b70c:	ef 90       	pop	r14
   1b70e:	bf 90       	pop	r11
   1b710:	af 90       	pop	r10
   1b712:	9f 90       	pop	r9
   1b714:	8f 90       	pop	r8
   1b716:	08 95       	ret

0001b718 <lcd_task>:
static int16_t lcd_display_time = 0;

///@brief LCD timer function called at 1000HZ
void lcd_task()
{
	++lcd_display_time;
   1b718:	80 91 05 1a 	lds	r24, 0x1A05	; 0x801a05 <lcd_display_time>
   1b71c:	90 91 06 1a 	lds	r25, 0x1A06	; 0x801a06 <lcd_display_time+0x1>
   1b720:	01 96       	adiw	r24, 0x01	; 1
   1b722:	90 93 06 1a 	sts	0x1A06, r25	; 0x801a06 <lcd_display_time+0x1>
   1b726:	80 93 05 1a 	sts	0x1A05, r24	; 0x801a05 <lcd_display_time>
   1b72a:	08 95       	ret

0001b72c <copyright>:


///@brief Display Copyright
///@return void
void copyright()
{
   1b72c:	00 d0       	rcall	.+0      	; 0x1b72e <copyright+0x2>
   1b72e:	00 d0       	rcall	.+0      	; 0x1b730 <copyright+0x4>
   1b730:	1f 92       	push	r1
    printf("Stand alone version of LIF utilities for linux\n");
   1b732:	8a e2       	ldi	r24, 0x2A	; 42
   1b734:	96 e4       	ldi	r25, 0x46	; 70
   1b736:	a0 e0       	ldi	r26, 0x00	; 0
   1b738:	ed b7       	in	r30, 0x3d	; 61
   1b73a:	fe b7       	in	r31, 0x3e	; 62
   1b73c:	81 83       	std	Z+1, r24	; 0x01
   1b73e:	92 83       	std	Z+2, r25	; 0x02
   1b740:	a3 83       	std	Z+3, r26	; 0x03
   1b742:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1b746:	8b e0       	ldi	r24, 0x0B	; 11
   1b748:	96 e4       	ldi	r25, 0x46	; 70
   1b74a:	a0 e0       	ldi	r26, 0x00	; 0
   1b74c:	ed b7       	in	r30, 0x3d	; 61
   1b74e:	fe b7       	in	r31, 0x3e	; 62
   1b750:	81 83       	std	Z+1, r24	; 0x01
   1b752:	92 83       	std	Z+2, r25	; 0x02
   1b754:	a3 83       	std	Z+3, r26	; 0x03
   1b756:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1b75a:	8e ee       	ldi	r24, 0xEE	; 238
   1b75c:	95 e4       	ldi	r25, 0x45	; 69
   1b75e:	a0 e0       	ldi	r26, 0x00	; 0
   1b760:	ed b7       	in	r30, 0x3d	; 61
   1b762:	fe b7       	in	r31, 0x3e	; 62
   1b764:	81 83       	std	Z+1, r24	; 0x01
   1b766:	92 83       	std	Z+2, r25	; 0x02
   1b768:	a3 83       	std	Z+3, r26	; 0x03
   1b76a:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf(" GNU version 3\n");
   1b76e:	8e ed       	ldi	r24, 0xDE	; 222
   1b770:	95 e4       	ldi	r25, 0x45	; 69
   1b772:	a0 e0       	ldi	r26, 0x00	; 0
   1b774:	ed b7       	in	r30, 0x3d	; 61
   1b776:	fe b7       	in	r31, 0x3e	; 62
   1b778:	81 83       	std	Z+1, r24	; 0x01
   1b77a:	92 83       	std	Z+2, r25	; 0x02
   1b77c:	a3 83       	std	Z+3, r26	; 0x03
   1b77e:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1b782:	87 eb       	ldi	r24, 0xB7	; 183
   1b784:	95 e4       	ldi	r25, 0x45	; 69
   1b786:	a0 e0       	ldi	r26, 0x00	; 0
   1b788:	ed b7       	in	r30, 0x3d	; 61
   1b78a:	fe b7       	in	r31, 0x3e	; 62
   1b78c:	81 83       	std	Z+1, r24	; 0x01
   1b78e:	92 83       	std	Z+2, r25	; 0x02
   1b790:	a3 83       	std	Z+3, r26	; 0x03
   1b792:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1b796:	8f ed       	ldi	r24, 0xDF	; 223
   1b798:	96 e1       	ldi	r25, 0x16	; 22
   1b79a:	ed b7       	in	r30, 0x3d	; 61
   1b79c:	fe b7       	in	r31, 0x3e	; 62
   1b79e:	95 83       	std	Z+5, r25	; 0x05
   1b7a0:	84 83       	std	Z+4, r24	; 0x04
   1b7a2:	8d e9       	ldi	r24, 0x9D	; 157
   1b7a4:	95 e4       	ldi	r25, 0x45	; 69
   1b7a6:	a0 e0       	ldi	r26, 0x00	; 0
   1b7a8:	81 83       	std	Z+1, r24	; 0x01
   1b7aa:	92 83       	std	Z+2, r25	; 0x02
   1b7ac:	a3 83       	std	Z+3, r26	; 0x03
   1b7ae:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1b7b2:	83 e0       	ldi	r24, 0x03	; 3
   1b7b4:	97 e1       	ldi	r25, 0x17	; 23
   1b7b6:	ed b7       	in	r30, 0x3d	; 61
   1b7b8:	fe b7       	in	r31, 0x3e	; 62
   1b7ba:	95 83       	std	Z+5, r25	; 0x05
   1b7bc:	84 83       	std	Z+4, r24	; 0x04
   1b7be:	83 e8       	ldi	r24, 0x83	; 131
   1b7c0:	95 e4       	ldi	r25, 0x45	; 69
   1b7c2:	a0 e0       	ldi	r26, 0x00	; 0
   1b7c4:	81 83       	std	Z+1, r24	; 0x01
   1b7c6:	92 83       	std	Z+2, r25	; 0x02
   1b7c8:	a3 83       	std	Z+3, r26	; 0x03
   1b7ca:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("\n");
   1b7ce:	81 e8       	ldi	r24, 0x81	; 129
   1b7d0:	95 e4       	ldi	r25, 0x45	; 69
   1b7d2:	a0 e0       	ldi	r26, 0x00	; 0
   1b7d4:	ed b7       	in	r30, 0x3d	; 61
   1b7d6:	fe b7       	in	r31, 0x3e	; 62
   1b7d8:	81 83       	std	Z+1, r24	; 0x01
   1b7da:	92 83       	std	Z+2, r25	; 0x02
   1b7dc:	a3 83       	std	Z+3, r26	; 0x03
   1b7de:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
}
   1b7e2:	0f 90       	pop	r0
   1b7e4:	0f 90       	pop	r0
   1b7e6:	0f 90       	pop	r0
   1b7e8:	0f 90       	pop	r0
   1b7ea:	0f 90       	pop	r0
   1b7ec:	08 95       	ret

0001b7ee <lcd_time>:
/// - Example output: "Thu Dec  8 21:45:05 EST 2011".
///
/// @return buf string pointer.
MEMSPACE
char *lcd_time(tm_t *t, char *buf, int max)
{
   1b7ee:	a1 e1       	ldi	r26, 0x11	; 17
   1b7f0:	b0 e0       	ldi	r27, 0x00	; 0
   1b7f2:	ec ef       	ldi	r30, 0xFC	; 252
   1b7f4:	fb ed       	ldi	r31, 0xDB	; 219
   1b7f6:	e8 c4       	rjmp	.+2512   	; 0x1c1c8 <__prologue_saves__+0x18>
   1b7f8:	ec 01       	movw	r28, r24
   1b7fa:	7b 01       	movw	r14, r22
   1b7fc:	8a 01       	movw	r16, r20
// normaize tm_t before output
    (void) normalize(t,0);
   1b7fe:	60 e0       	ldi	r22, 0x00	; 0
   1b800:	70 e0       	ldi	r23, 0x00	; 0
   1b802:	0e 94 e2 35 	call	0x6bc4	; 0x6bc4 <normalize>
    memset(buf,0,max);
   1b806:	a8 01       	movw	r20, r16
   1b808:	60 e0       	ldi	r22, 0x00	; 0
   1b80a:	70 e0       	ldi	r23, 0x00	; 0
   1b80c:	c7 01       	movw	r24, r14
   1b80e:	0e 94 d0 e4 	call	0x1c9a0	; 0x1c9a0 <memset>
    snprintf(buf,max-1,"%s %2d %02d:%02d:%02d",
   1b812:	88 85       	ldd	r24, Y+8	; 0x08
   1b814:	99 85       	ldd	r25, Y+9	; 0x09
   1b816:	0e 94 c7 33 	call	0x678e	; 0x678e <tm_mon_to_ascii>
   1b81a:	28 81       	ld	r18, Y
   1b81c:	39 81       	ldd	r19, Y+1	; 0x01
   1b81e:	ed b7       	in	r30, 0x3d	; 61
   1b820:	fe b7       	in	r31, 0x3e	; 62
   1b822:	31 8b       	std	Z+17, r19	; 0x11
   1b824:	20 8b       	std	Z+16, r18	; 0x10
   1b826:	2a 81       	ldd	r18, Y+2	; 0x02
   1b828:	3b 81       	ldd	r19, Y+3	; 0x03
   1b82a:	37 87       	std	Z+15, r19	; 0x0f
   1b82c:	26 87       	std	Z+14, r18	; 0x0e
   1b82e:	2c 81       	ldd	r18, Y+4	; 0x04
   1b830:	3d 81       	ldd	r19, Y+5	; 0x05
   1b832:	35 87       	std	Z+13, r19	; 0x0d
   1b834:	24 87       	std	Z+12, r18	; 0x0c
   1b836:	2e 81       	ldd	r18, Y+6	; 0x06
   1b838:	3f 81       	ldd	r19, Y+7	; 0x07
   1b83a:	33 87       	std	Z+11, r19	; 0x0b
   1b83c:	22 87       	std	Z+10, r18	; 0x0a
   1b83e:	91 87       	std	Z+9, r25	; 0x09
   1b840:	80 87       	std	Z+8, r24	; 0x08
   1b842:	8b e6       	ldi	r24, 0x6B	; 107
   1b844:	95 e4       	ldi	r25, 0x45	; 69
   1b846:	a0 e0       	ldi	r26, 0x00	; 0
   1b848:	85 83       	std	Z+5, r24	; 0x05
   1b84a:	96 83       	std	Z+6, r25	; 0x06
   1b84c:	a7 83       	std	Z+7, r26	; 0x07
   1b84e:	01 50       	subi	r16, 0x01	; 1
   1b850:	11 09       	sbc	r17, r1
   1b852:	14 83       	std	Z+4, r17	; 0x04
   1b854:	03 83       	std	Z+3, r16	; 0x03
   1b856:	f2 82       	std	Z+2, r15	; 0x02
   1b858:	e1 82       	std	Z+1, r14	; 0x01
   1b85a:	0e 94 1b 44 	call	0x8836	; 0x8836 <snprintf_P>
        (int)t->tm_mday,
        (int)t->tm_hour,
        (int)t->tm_min,
        (int)t->tm_sec);
    return(buf);
}
   1b85e:	c7 01       	movw	r24, r14
   1b860:	cd b7       	in	r28, 0x3d	; 61
   1b862:	de b7       	in	r29, 0x3e	; 62
   1b864:	61 96       	adiw	r28, 0x11	; 17
   1b866:	e6 e0       	ldi	r30, 0x06	; 6
   1b868:	cb c4       	rjmp	.+2454   	; 0x1c200 <__epilogue_restores__+0x18>

0001b86a <lcd_backlight>:

///@brief lcd_backlight LCD Backlight settings
/// @param[in] rgb: hex value 0xRRGGBB, RR,GG,BB values are 0 to 255
uint8_t  _backlight[5] = { 0x7c, '+', 0x80, 0x80, 0x80 };	/* Backlight half bright */
uint8_t lcd_backlight(uint32_t rgb)
{
   1b86a:	cf 93       	push	r28
   1b86c:	00 d0       	rcall	.+0      	; 0x1b86e <lcd_backlight+0x4>
   1b86e:	1f 92       	push	r1

	_backlight[2] = 0xff & (rgb >> 16);
   1b870:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <_backlight+0x2>
	_backlight[3] = 0xff & (rgb >> 8);
   1b874:	70 93 f3 02 	sts	0x02F3, r23	; 0x8002f3 <_backlight+0x3>
	_backlight[4] = 0xff & (rgb );
   1b878:	60 93 f4 02 	sts	0x02F4, r22	; 0x8002f4 <_backlight+0x4>

	if(! i2c_fn(0x72, TW_WRITE, _backlight, sizeof(_backlight)) )
   1b87c:	25 e0       	ldi	r18, 0x05	; 5
   1b87e:	40 ef       	ldi	r20, 0xF0	; 240
   1b880:	52 e0       	ldi	r21, 0x02	; 2
   1b882:	60 e0       	ldi	r22, 0x00	; 0
   1b884:	82 e7       	ldi	r24, 0x72	; 114
   1b886:	0e 94 5a 2a 	call	0x54b4	; 0x54b4 <i2c_fn>
   1b88a:	c8 2f       	mov	r28, r24
   1b88c:	81 11       	cpse	r24, r1
   1b88e:	0d c0       	rjmp	.+26     	; 0x1b8aa <lcd_backlight+0x40>
	{
		i2c_display_task_errors();
   1b890:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1b894:	81 e5       	ldi	r24, 0x51	; 81
   1b896:	95 e4       	ldi	r25, 0x45	; 69
   1b898:	a0 e0       	ldi	r26, 0x00	; 0
   1b89a:	ed b7       	in	r30, 0x3d	; 61
   1b89c:	fe b7       	in	r31, 0x3e	; 62
   1b89e:	81 83       	std	Z+1, r24	; 0x01
   1b8a0:	92 83       	std	Z+2, r25	; 0x02
   1b8a2:	a3 83       	std	Z+3, r26	; 0x03
   1b8a4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1b8a8:	01 c0       	rjmp	.+2      	; 0x1b8ac <lcd_backlight+0x42>
		return(0);
	}
	return(1);
   1b8aa:	c1 e0       	ldi	r28, 0x01	; 1
}
   1b8ac:	8c 2f       	mov	r24, r28
   1b8ae:	0f 90       	pop	r0
   1b8b0:	0f 90       	pop	r0
   1b8b2:	0f 90       	pop	r0
   1b8b4:	cf 91       	pop	r28
   1b8b6:	08 95       	ret

0001b8b8 <lcd_setup>:
///@brief LCD setup code
/// For a SparkFun SERLCD 2x16 display
/// Initializes the I2C deiplay update task structure 
/// Passes the structures to the interrupt handler
void lcd_setup()
{
   1b8b8:	cf 93       	push	r28
   1b8ba:	ad b7       	in	r26, 0x3d	; 61
   1b8bc:	be b7       	in	r27, 0x3e	; 62
   1b8be:	17 97       	sbiw	r26, 0x07	; 7
   1b8c0:	0f b6       	in	r0, 0x3f	; 63
   1b8c2:	f8 94       	cli
   1b8c4:	be bf       	out	0x3e, r27	; 62
   1b8c6:	0f be       	out	0x3f, r0	; 63
   1b8c8:	ad bf       	out	0x3d, r26	; 61
	int ind = 0;
    uint8_t sreg = SREG;
   1b8ca:	cf b7       	in	r28, 0x3f	; 63

    printf("I2C LCD initialization start\n");
   1b8cc:	83 e3       	ldi	r24, 0x33	; 51
   1b8ce:	95 e4       	ldi	r25, 0x45	; 69
   1b8d0:	a0 e0       	ldi	r26, 0x00	; 0
   1b8d2:	ed b7       	in	r30, 0x3d	; 61
   1b8d4:	fe b7       	in	r31, 0x3e	; 62
   1b8d6:	81 83       	std	Z+1, r24	; 0x01
   1b8d8:	92 83       	std	Z+2, r25	; 0x02
   1b8da:	a3 83       	std	Z+3, r26	; 0x03
   1b8dc:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

	if(set_timers(lcd_task,1) == -1)
   1b8e0:	61 e0       	ldi	r22, 0x01	; 1
   1b8e2:	70 e0       	ldi	r23, 0x00	; 0
   1b8e4:	8c e8       	ldi	r24, 0x8C	; 140
   1b8e6:	9b ed       	ldi	r25, 0xDB	; 219
   1b8e8:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <set_timers>
   1b8ec:	01 96       	adiw	r24, 0x01	; 1
   1b8ee:	51 f4       	brne	.+20     	; 0x1b904 <lcd_setup+0x4c>
        printf("lcd_task init failed\n");
   1b8f0:	8d e1       	ldi	r24, 0x1D	; 29
   1b8f2:	95 e4       	ldi	r25, 0x45	; 69
   1b8f4:	a0 e0       	ldi	r26, 0x00	; 0
   1b8f6:	ed b7       	in	r30, 0x3d	; 61
   1b8f8:	fe b7       	in	r31, 0x3e	; 62
   1b8fa:	81 83       	std	Z+1, r24	; 0x01
   1b8fc:	92 83       	std	Z+2, r25	; 0x02
   1b8fe:	a3 83       	std	Z+3, r26	; 0x03
   1b900:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

	i2c_init(100000);
   1b904:	60 ea       	ldi	r22, 0xA0	; 160
   1b906:	76 e8       	ldi	r23, 0x86	; 134
   1b908:	81 e0       	ldi	r24, 0x01	; 1
   1b90a:	90 e0       	ldi	r25, 0x00	; 0
   1b90c:	0e 94 61 29 	call	0x52c2	; 0x52c2 <i2c_init>

	i2c_task_init();
   1b910:	0e 94 22 29 	call	0x5244	; 0x5244 <i2c_task_init>

	cli();
   1b914:	f8 94       	cli

	// Default startup message
    sprintf((char *) _line1, "%-16s", "HP85Disk V2");
   1b916:	87 e2       	ldi	r24, 0x27	; 39
   1b918:	97 e1       	ldi	r25, 0x17	; 23
   1b91a:	ed b7       	in	r30, 0x3d	; 61
   1b91c:	fe b7       	in	r31, 0x3e	; 62
   1b91e:	97 83       	std	Z+7, r25	; 0x07
   1b920:	86 83       	std	Z+6, r24	; 0x06
   1b922:	87 e1       	ldi	r24, 0x17	; 23
   1b924:	95 e4       	ldi	r25, 0x45	; 69
   1b926:	a0 e0       	ldi	r26, 0x00	; 0
   1b928:	83 83       	std	Z+3, r24	; 0x03
   1b92a:	94 83       	std	Z+4, r25	; 0x04
   1b92c:	a5 83       	std	Z+5, r26	; 0x05
   1b92e:	8c e0       	ldi	r24, 0x0C	; 12
   1b930:	93 e0       	ldi	r25, 0x03	; 3
   1b932:	92 83       	std	Z+2, r25	; 0x02
   1b934:	81 83       	std	Z+1, r24	; 0x01
   1b936:	0e 94 2f 44 	call	0x885e	; 0x885e <sprintf_P>
    sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1b93a:	83 e3       	ldi	r24, 0x33	; 51
   1b93c:	97 e1       	ldi	r25, 0x17	; 23
   1b93e:	ed b7       	in	r30, 0x3d	; 61
   1b940:	fe b7       	in	r31, 0x3e	; 62
   1b942:	97 83       	std	Z+7, r25	; 0x07
   1b944:	86 83       	std	Z+6, r24	; 0x06
   1b946:	81 e1       	ldi	r24, 0x11	; 17
   1b948:	95 e4       	ldi	r25, 0x45	; 69
   1b94a:	a0 e0       	ldi	r26, 0x00	; 0
   1b94c:	83 83       	std	Z+3, r24	; 0x03
   1b94e:	94 83       	std	Z+4, r25	; 0x04
   1b950:	a5 83       	std	Z+5, r26	; 0x05
   1b952:	85 ef       	ldi	r24, 0xF5	; 245
   1b954:	92 e0       	ldi	r25, 0x02	; 2
   1b956:	92 83       	std	Z+2, r25	; 0x02
   1b958:	81 83       	std	Z+1, r24	; 0x01
   1b95a:	0e 94 2f 44 	call	0x885e	; 0x885e <sprintf_P>

	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd1, sizeof(_cmd1));
   1b95e:	22 e0       	ldi	r18, 0x02	; 2
   1b960:	41 e2       	ldi	r20, 0x21	; 33
   1b962:	53 e0       	ldi	r21, 0x03	; 3
   1b964:	60 e0       	ldi	r22, 0x00	; 0
   1b966:	82 e7       	ldi	r24, 0x72	; 114
   1b968:	0e 94 37 29 	call	0x526e	; 0x526e <i2c_task_op_add>
   1b96c:	90 93 73 17 	sts	0x1773, r25	; 0x801773 <i2c_task_op+0x1>
   1b970:	80 93 72 17 	sts	0x1772, r24	; 0x801772 <i2c_task_op>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line1, 16);
   1b974:	20 e1       	ldi	r18, 0x10	; 16
   1b976:	4c e0       	ldi	r20, 0x0C	; 12
   1b978:	53 e0       	ldi	r21, 0x03	; 3
   1b97a:	60 e0       	ldi	r22, 0x00	; 0
   1b97c:	82 e7       	ldi	r24, 0x72	; 114
   1b97e:	0e 94 37 29 	call	0x526e	; 0x526e <i2c_task_op_add>
   1b982:	90 93 75 17 	sts	0x1775, r25	; 0x801775 <i2c_task_op+0x3>
   1b986:	80 93 74 17 	sts	0x1774, r24	; 0x801774 <i2c_task_op+0x2>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _cmd2, sizeof(_cmd2));
   1b98a:	22 e0       	ldi	r18, 0x02	; 2
   1b98c:	4a e0       	ldi	r20, 0x0A	; 10
   1b98e:	53 e0       	ldi	r21, 0x03	; 3
   1b990:	60 e0       	ldi	r22, 0x00	; 0
   1b992:	82 e7       	ldi	r24, 0x72	; 114
   1b994:	0e 94 37 29 	call	0x526e	; 0x526e <i2c_task_op_add>
   1b998:	90 93 77 17 	sts	0x1777, r25	; 0x801777 <i2c_task_op+0x5>
   1b99c:	80 93 76 17 	sts	0x1776, r24	; 0x801776 <i2c_task_op+0x4>
	i2c_task_op[ind++] = i2c_task_op_add(0x72, TW_WRITE, _line2, 16);
   1b9a0:	20 e1       	ldi	r18, 0x10	; 16
   1b9a2:	45 ef       	ldi	r20, 0xF5	; 245
   1b9a4:	52 e0       	ldi	r21, 0x02	; 2
   1b9a6:	60 e0       	ldi	r22, 0x00	; 0
   1b9a8:	82 e7       	ldi	r24, 0x72	; 114
   1b9aa:	0e 94 37 29 	call	0x526e	; 0x526e <i2c_task_op_add>
   1b9ae:	90 93 79 17 	sts	0x1779, r25	; 0x801779 <i2c_task_op+0x7>
   1b9b2:	80 93 78 17 	sts	0x1778, r24	; 0x801778 <i2c_task_op+0x6>

	SREG = sreg;
   1b9b6:	cf bf       	out	0x3f, r28	; 63

    i2c_task_run();
   1b9b8:	0e 94 f7 29 	call	0x53ee	; 0x53ee <i2c_task_run>
	// wait long enough for us to see the startup message
    delayms(1000);
   1b9bc:	68 ee       	ldi	r22, 0xE8	; 232
   1b9be:	73 e0       	ldi	r23, 0x03	; 3
   1b9c0:	80 e0       	ldi	r24, 0x00	; 0
   1b9c2:	90 e0       	ldi	r25, 0x00	; 0
   1b9c4:	0e 94 9e 25 	call	0x4b3c	; 0x4b3c <delayms>
	
	// Verify the task finished - it normally takes < 30mS
    if(!i2c_task_done())
   1b9c8:	0e 94 d8 29 	call	0x53b0	; 0x53b0 <i2c_task_done>
   1b9cc:	81 11       	cpse	r24, r1
   1b9ce:	0c c0       	rjmp	.+24     	; 0x1b9e8 <lcd_setup+0x130>
	{
		i2c_display_task_errors();
   1b9d0:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <i2c_display_task_errors>
        printf("I2C LCD is NOT attached!\n");
   1b9d4:	87 ef       	ldi	r24, 0xF7	; 247
   1b9d6:	94 e4       	ldi	r25, 0x44	; 68
   1b9d8:	a0 e0       	ldi	r26, 0x00	; 0
   1b9da:	ed b7       	in	r30, 0x3d	; 61
   1b9dc:	fe b7       	in	r31, 0x3e	; 62
   1b9de:	81 83       	std	Z+1, r24	; 0x01
   1b9e0:	92 83       	std	Z+2, r25	; 0x02
   1b9e2:	a3 83       	std	Z+3, r26	; 0x03
   1b9e4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
	}

    sep();
   1b9e8:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <sep>
}
   1b9ec:	ad b7       	in	r26, 0x3d	; 61
   1b9ee:	be b7       	in	r27, 0x3e	; 62
   1b9f0:	17 96       	adiw	r26, 0x07	; 7
   1b9f2:	0f b6       	in	r0, 0x3f	; 63
   1b9f4:	f8 94       	cli
   1b9f6:	be bf       	out	0x3e, r27	; 62
   1b9f8:	0f be       	out	0x3f, r0	; 63
   1b9fa:	ad bf       	out	0x3d, r26	; 61
   1b9fc:	cf 91       	pop	r28
   1b9fe:	08 95       	ret

0001ba00 <i2c_lcd_task>:


///@brief Update the LCD wile the system is running
/// Display SD card fault status and the current time
void i2c_lcd_task()
{
   1ba00:	af e2       	ldi	r26, 0x2F	; 47
   1ba02:	b0 e0       	ldi	r27, 0x00	; 0
   1ba04:	e5 e0       	ldi	r30, 0x05	; 5
   1ba06:	fd ed       	ldi	r31, 0xDD	; 221
   1ba08:	e2 c3       	rjmp	.+1988   	; 0x1c1ce <__prologue_saves__+0x1e>
	char buf[32];
	uint8_t sreg=SREG;
   1ba0a:	1f b7       	in	r17, 0x3f	; 63
    ts_t ts;

	cli();
   1ba0c:	f8 94       	cli
	if(!mmc_ins_status())
   1ba0e:	0e 94 61 6d 	call	0xdac2	; 0xdac2 <mmc_ins_status>
   1ba12:	89 2b       	or	r24, r25
   1ba14:	49 f4       	brne	.+18     	; 0x1ba28 <i2c_lcd_task+0x28>
	{
		sprintf((char *) _line2,"%-16s", "SD Card Fault");
   1ba16:	80 e4       	ldi	r24, 0x40	; 64
   1ba18:	97 e1       	ldi	r25, 0x17	; 23
   1ba1a:	ed b7       	in	r30, 0x3d	; 61
   1ba1c:	fe b7       	in	r31, 0x3e	; 62
   1ba1e:	97 83       	std	Z+7, r25	; 0x07
   1ba20:	86 83       	std	Z+6, r24	; 0x06
   1ba22:	81 ef       	ldi	r24, 0xF1	; 241
   1ba24:	94 e4       	ldi	r25, 0x44	; 68
   1ba26:	17 c0       	rjmp	.+46     	; 0x1ba56 <i2c_lcd_task+0x56>
	}
	else
	{
		clock_gettime(0, (ts_t *) &ts);
   1ba28:	be 01       	movw	r22, r28
   1ba2a:	68 5d       	subi	r22, 0xD8	; 216
   1ba2c:	7f 4f       	sbci	r23, 0xFF	; 255
   1ba2e:	80 e0       	ldi	r24, 0x00	; 0
   1ba30:	90 e0       	ldi	r25, 0x00	; 0
   1ba32:	0e 94 01 31 	call	0x6202	; 0x6202 <clock_gettime>
		sprintf((char *) _line2, "%-16s", lcd_time(gmtime(&(ts.tv_sec)),buf,sizeof(buf)-1) );
   1ba36:	ce 01       	movw	r24, r28
   1ba38:	88 96       	adiw	r24, 0x28	; 40
   1ba3a:	0e 94 eb 34 	call	0x69d6	; 0x69d6 <gmtime>
   1ba3e:	4f e1       	ldi	r20, 0x1F	; 31
   1ba40:	50 e0       	ldi	r21, 0x00	; 0
   1ba42:	be 01       	movw	r22, r28
   1ba44:	68 5f       	subi	r22, 0xF8	; 248
   1ba46:	7f 4f       	sbci	r23, 0xFF	; 255
   1ba48:	d2 de       	rcall	.-604    	; 0x1b7ee <lcd_time>
   1ba4a:	ed b7       	in	r30, 0x3d	; 61
   1ba4c:	fe b7       	in	r31, 0x3e	; 62
   1ba4e:	97 83       	std	Z+7, r25	; 0x07
   1ba50:	86 83       	std	Z+6, r24	; 0x06
   1ba52:	8b ee       	ldi	r24, 0xEB	; 235
   1ba54:	94 e4       	ldi	r25, 0x44	; 68
   1ba56:	a0 e0       	ldi	r26, 0x00	; 0
   1ba58:	83 83       	std	Z+3, r24	; 0x03
   1ba5a:	94 83       	std	Z+4, r25	; 0x04
   1ba5c:	a5 83       	std	Z+5, r26	; 0x05
   1ba5e:	85 ef       	ldi	r24, 0xF5	; 245
   1ba60:	92 e0       	ldi	r25, 0x02	; 2
   1ba62:	92 83       	std	Z+2, r25	; 0x02
   1ba64:	81 83       	std	Z+1, r24	; 0x01
   1ba66:	0e 94 2f 44 	call	0x885e	; 0x885e <sprintf_P>
		// sprintf((char *) _line2,"%16ld.%03ld", (long) ts.tv_sec, (long) ts.tv_nsec / 1000000UL);
	}
	SREG=sreg;
   1ba6a:	1f bf       	out	0x3f, r17	; 63

    i2c_task_run();
   1ba6c:	0e 94 f7 29 	call	0x53ee	; 0x53ee <i2c_task_run>
}
   1ba70:	af 96       	adiw	r28, 0x2f	; 47
   1ba72:	e3 e0       	ldi	r30, 0x03	; 3
   1ba74:	c8 c3       	rjmp	.+1936   	; 0x1c206 <__epilogue_restores__+0x1e>

0001ba76 <gpib_user_task>:
///@brief GPIB callback from gpib_read_byte()
/// This function gets called evry time trough the read loop
/// This task run in the forground - is not an interrupt task
void gpib_user_task()
{
	uint8_t sreg = SREG;
   1ba76:	8f b7       	in	r24, 0x3f	; 63

	cli();
   1ba78:	f8 94       	cli
	if(lcd_display_time > 100) // increments at 1000HZ
   1ba7a:	20 91 05 1a 	lds	r18, 0x1A05	; 0x801a05 <lcd_display_time>
   1ba7e:	30 91 06 1a 	lds	r19, 0x1A06	; 0x801a06 <lcd_display_time+0x1>
   1ba82:	25 36       	cpi	r18, 0x65	; 101
   1ba84:	31 05       	cpc	r19, r1
   1ba86:	3c f0       	brlt	.+14     	; 0x1ba96 <gpib_user_task+0x20>
	{
		lcd_display_time = 0;
   1ba88:	10 92 06 1a 	sts	0x1A06, r1	; 0x801a06 <lcd_display_time+0x1>
   1ba8c:	10 92 05 1a 	sts	0x1A05, r1	; 0x801a05 <lcd_display_time>
		SREG = sreg;
   1ba90:	8f bf       	out	0x3f, r24	; 63
		i2c_lcd_task();
   1ba92:	b6 cf       	rjmp	.-148    	; 0x1ba00 <i2c_lcd_task>
		return;
   1ba94:	08 95       	ret
	}
	SREG = sreg;
   1ba96:	8f bf       	out	0x3f, r24	; 63
   1ba98:	08 95       	ret

0001ba9a <help>:
/// @brief  Display the main help menu - calls all other help menus
/// @return  void
/// @see gpib_help()
/// @see fatfs_help()
void help()
{
   1ba9a:	00 d0       	rcall	.+0      	; 0x1ba9c <help+0x2>
   1ba9c:	1f 92       	push	r1

    copyright();
   1ba9e:	46 de       	rcall	.-884    	; 0x1b72c <copyright>

#ifdef FATFS_TESTS
    fatfs_help(0);
   1baa0:	80 e0       	ldi	r24, 0x00	; 0
   1baa2:	90 e0       	ldi	r25, 0x00	; 0
   1baa4:	0e 94 66 71 	call	0xe2cc	; 0xe2cc <fatfs_help>
#endif

#ifdef POSIX_TESTS
    posix_help(0);
   1baa8:	80 e0       	ldi	r24, 0x00	; 0
   1baaa:	90 e0       	ldi	r25, 0x00	; 0
   1baac:	0e 94 b3 7c 	call	0xf966	; 0xf966 <posix_help>
#endif

#ifdef LIF_SUPPORT
    lif_help(0);
   1bab0:	80 e0       	ldi	r24, 0x00	; 0
   1bab2:	90 e0       	ldi	r25, 0x00	; 0
   1bab4:	0e 94 4f bc 	call	0x1789e	; 0x1789e <lif_help>
#endif

    gpib_help(0);
   1bab8:	80 e0       	ldi	r24, 0x00	; 0
   1baba:	90 e0       	ldi	r25, 0x00	; 0
   1babc:	0e 94 08 90 	call	0x12010	; 0x12010 <gpib_help>

    printf(
   1bac0:	8a eb       	ldi	r24, 0xBA	; 186
   1bac2:	94 e4       	ldi	r25, 0x44	; 68
   1bac4:	a0 e0       	ldi	r26, 0x00	; 0
   1bac6:	ed b7       	in	r30, 0x3d	; 61
   1bac8:	fe b7       	in	r31, 0x3e	; 62
   1baca:	81 83       	std	Z+1, r24	; 0x01
   1bacc:	92 83       	std	Z+2, r25	; 0x02
   1bace:	a3 83       	std	Z+3, r26	; 0x03
   1bad0:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
        "reset\n"
        "setdate\n"
        "time\n"
        "\n"
        );
}
   1bad4:	0f 90       	pop	r0
   1bad6:	0f 90       	pop	r0
   1bad8:	0f 90       	pop	r0
   1bada:	08 95       	ret

0001badc <user_task.part.1>:
/// If a keypress is detected read a line from the uart
/// parse the result and call various user functions.
/// ? will return a list of fuctions and paramters permitted
/// @param[in] gpib - if non-zero run gpib while there are no user commands
/// @return  void
void user_task(uint8_t gpib)
   1badc:	a9 e6       	ldi	r26, 0x69	; 105
   1bade:	b1 e0       	ldi	r27, 0x01	; 1
   1bae0:	e3 e7       	ldi	r30, 0x73	; 115
   1bae2:	fd ed       	ldi	r31, 0xDD	; 221
   1bae4:	6f c3       	rjmp	.+1758   	; 0x1c1c4 <__prologue_saves__+0x14>
        gpib_task();

    if(!kbhit(0))
        return;

    printf("\n>");
   1bae6:	87 eb       	ldi	r24, 0xB7	; 183
   1bae8:	94 e4       	ldi	r25, 0x44	; 68
   1baea:	a0 e0       	ldi	r26, 0x00	; 0
   1baec:	ed b7       	in	r30, 0x3d	; 61
   1baee:	fe b7       	in	r31, 0x3e	; 62
   1baf0:	81 83       	std	Z+1, r24	; 0x01
   1baf2:	92 83       	std	Z+2, r25	; 0x02
   1baf4:	a3 83       	std	Z+3, r26	; 0x03
   1baf6:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

    fgets(line,sizeof(line)-2,stdin);
   1bafa:	40 91 d9 1c 	lds	r20, 0x1CD9	; 0x801cd9 <__iob>
   1bafe:	50 91 da 1c 	lds	r21, 0x1CDA	; 0x801cda <__iob+0x1>
   1bb02:	6e ef       	ldi	r22, 0xFE	; 254
   1bb04:	70 e0       	ldi	r23, 0x00	; 0
   1bb06:	ce 01       	movw	r24, r28
   1bb08:	06 96       	adiw	r24, 0x06	; 6
   1bb0a:	7c 01       	movw	r14, r24
   1bb0c:	0e 94 9f 74 	call	0xe93e	; 0xe93e <fgets>
    trim_tail(line);
   1bb10:	c7 01       	movw	r24, r14
   1bb12:	0e 94 62 2f 	call	0x5ec4	; 0x5ec4 <trim_tail>
    argc = split_args(line,argv,50);
   1bb16:	42 e3       	ldi	r20, 0x32	; 50
   1bb18:	50 e0       	ldi	r21, 0x00	; 0
   1bb1a:	be 01       	movw	r22, r28
   1bb1c:	6a 5f       	subi	r22, 0xFA	; 250
   1bb1e:	7e 4f       	sbci	r23, 0xFE	; 254
   1bb20:	c7 01       	movw	r24, r14
   1bb22:	0e 94 e8 2f 	call	0x5fd0	; 0x5fd0 <split_args>
   1bb26:	6c 01       	movw	r12, r24
    for(i=0;i<argc;++i)
        printf("   [%s]\n", argv[i]);
#endif

    ind = 0;
    ptr = argv[ind++];
   1bb28:	ca 5f       	subi	r28, 0xFA	; 250
   1bb2a:	de 4f       	sbci	r29, 0xFE	; 254
   1bb2c:	08 81       	ld	r16, Y
   1bb2e:	19 81       	ldd	r17, Y+1	; 0x01
   1bb30:	c6 50       	subi	r28, 0x06	; 6
   1bb32:	d1 40       	sbci	r29, 0x01	; 1

    if(!ptr || argc < 1)
   1bb34:	01 15       	cp	r16, r1
   1bb36:	11 05       	cpc	r17, r1
   1bb38:	09 f4       	brne	.+2      	; 0x1bb3c <user_task.part.1+0x60>
   1bb3a:	98 c0       	rjmp	.+304    	; 0x1bc6c <user_task.part.1+0x190>
   1bb3c:	18 16       	cp	r1, r24
   1bb3e:	19 06       	cpc	r1, r25
   1bb40:	0c f0       	brlt	.+2      	; 0x1bb44 <user_task.part.1+0x68>
   1bb42:	94 c0       	rjmp	.+296    	; 0x1bc6c <user_task.part.1+0x190>

    }
#endif

#ifdef LCD_SUPPORT
    else if (MATCHI(ptr,"backlight") )
   1bb44:	6e e4       	ldi	r22, 0x4E	; 78
   1bb46:	77 e1       	ldi	r23, 0x17	; 23
   1bb48:	c8 01       	movw	r24, r16
   1bb4a:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHI>
   1bb4e:	89 2b       	or	r24, r25
   1bb50:	f9 f0       	breq	.+62     	; 0x1bb90 <user_task.part.1+0xb4>
    {
		uint32_t rgb;
        ptr = argv[ind];
        if(*ptr == '=')
   1bb52:	c8 5f       	subi	r28, 0xF8	; 248
   1bb54:	de 4f       	sbci	r29, 0xFE	; 254
   1bb56:	e8 81       	ld	r30, Y
   1bb58:	f9 81       	ldd	r31, Y+1	; 0x01
   1bb5a:	c8 50       	subi	r28, 0x08	; 8
   1bb5c:	d1 40       	sbci	r29, 0x01	; 1
   1bb5e:	80 81       	ld	r24, Z
   1bb60:	8d 33       	cpi	r24, 0x3D	; 61
   1bb62:	19 f4       	brne	.+6      	; 0x1bb6a <user_task.part.1+0x8e>
            ++ind;
   1bb64:	82 e0       	ldi	r24, 0x02	; 2
   1bb66:	90 e0       	ldi	r25, 0x00	; 0
   1bb68:	02 c0       	rjmp	.+4      	; 0x1bb6e <user_task.part.1+0x92>
    for(i=0;i<argc;++i)
        printf("   [%s]\n", argv[i]);
#endif

    ind = 0;
    ptr = argv[ind++];
   1bb6a:	81 e0       	ldi	r24, 0x01	; 1
   1bb6c:	90 e0       	ldi	r25, 0x00	; 0
    {
		uint32_t rgb;
        ptr = argv[ind];
        if(*ptr == '=')
            ++ind;
        rgb = get_value(argv[ind]);
   1bb6e:	88 0f       	add	r24, r24
   1bb70:	99 1f       	adc	r25, r25
   1bb72:	e6 e0       	ldi	r30, 0x06	; 6
   1bb74:	f1 e0       	ldi	r31, 0x01	; 1
   1bb76:	ec 0f       	add	r30, r28
   1bb78:	fd 1f       	adc	r31, r29
   1bb7a:	e8 0f       	add	r30, r24
   1bb7c:	f9 1f       	adc	r31, r25
   1bb7e:	80 81       	ld	r24, Z
   1bb80:	91 81       	ldd	r25, Z+1	; 0x01
   1bb82:	0e 94 87 30 	call	0x610e	; 0x610e <get_value>
		result = lcd_backlight(rgb);
   1bb86:	71 de       	rcall	.-798    	; 0x1b86a <lcd_backlight>

#ifdef LIF_SUPPORT
    else if(lif_tests(argc,argv))
        result = 1;
#endif
    if(result)
   1bb88:	88 23       	and	r24, r24
   1bb8a:	09 f4       	brne	.+2      	; 0x1bb8e <user_task.part.1+0xb2>
   1bb8c:	62 c0       	rjmp	.+196    	; 0x1bc52 <user_task.part.1+0x176>
   1bb8e:	6e c0       	rjmp	.+220    	; 0x1bc6c <user_task.part.1+0x190>
        rgb = get_value(argv[ind]);
		result = lcd_backlight(rgb);
    }
#endif

    else if ( MATCH(ptr,"mem") )
   1bb90:	68 e5       	ldi	r22, 0x58	; 88
   1bb92:	77 e1       	ldi	r23, 0x17	; 23
   1bb94:	c8 01       	movw	r24, r16
   1bb96:	0e 94 7c 2f 	call	0x5ef8	; 0x5ef8 <MATCH>
   1bb9a:	89 2b       	or	r24, r25
   1bb9c:	19 f0       	breq	.+6      	; 0x1bba4 <user_task.part.1+0xc8>
    {
        PrintFree();
   1bb9e:	0e 94 5f 24 	call	0x48be	; 0x48be <PrintFree>
   1bba2:	64 c0       	rjmp	.+200    	; 0x1bc6c <user_task.part.1+0x190>
        result = 1;

    }
    else if ( MATCHI(ptr,"reset") )
   1bba4:	6a ed       	ldi	r22, 0xDA	; 218
   1bba6:	7d e0       	ldi	r23, 0x0D	; 13
   1bba8:	c8 01       	movw	r24, r16
   1bbaa:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHI>
   1bbae:	89 2b       	or	r24, r25
   1bbb0:	51 f0       	breq	.+20     	; 0x1bbc6 <user_task.part.1+0xea>
    {
        cli();
   1bbb2:	f8 94       	cli
        uart_rx_flush(0);
   1bbb4:	80 e0       	ldi	r24, 0x00	; 0
   1bbb6:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <uart_rx_flush>
        cli();
   1bbba:	f8 94       	cli
        MCUSR = (1 << EXTRF);
   1bbbc:	82 e0       	ldi	r24, 0x02	; 2
   1bbbe:	84 bf       	out	0x34, r24	; 52
        RESET();
   1bbc0:	e0 e0       	ldi	r30, 0x00	; 0
   1bbc2:	fc ef       	ldi	r31, 0xFC	; 252
   1bbc4:	09 95       	icall
		// should not return!
        result = 1;
    }
    else if ( MATCHI(ptr,"setdate" ) )
   1bbc6:	6c e5       	ldi	r22, 0x5C	; 92
   1bbc8:	77 e1       	ldi	r23, 0x17	; 23
   1bbca:	c8 01       	movw	r24, r16
   1bbcc:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHI>
   1bbd0:	89 2b       	or	r24, r25
   1bbd2:	19 f0       	breq	.+6      	; 0x1bbda <user_task.part.1+0xfe>
    {
        setdate();
   1bbd4:	0e 94 cb 38 	call	0x7196	; 0x7196 <setdate>
   1bbd8:	07 c0       	rjmp	.+14     	; 0x1bbe8 <user_task.part.1+0x10c>
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"time") )
   1bbda:	64 e6       	ldi	r22, 0x64	; 100
   1bbdc:	77 e1       	ldi	r23, 0x17	; 23
   1bbde:	c8 01       	movw	r24, r16
   1bbe0:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHI>
   1bbe4:	89 2b       	or	r24, r25
   1bbe6:	19 f0       	breq	.+6      	; 0x1bbee <user_task.part.1+0x112>
    {
        display_clock();
   1bbe8:	0e 94 e7 3a 	call	0x75ce	; 0x75ce <display_clock>
   1bbec:	3f c0       	rjmp	.+126    	; 0x1bc6c <user_task.part.1+0x190>
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1bbee:	6d e9       	ldi	r22, 0x9D	; 157
   1bbf0:	76 e1       	ldi	r23, 0x16	; 22
   1bbf2:	c8 01       	movw	r24, r16
   1bbf4:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHI>
   1bbf8:	89 2b       	or	r24, r25
    {
        help();
   1bbfa:	11 f0       	breq	.+4      	; 0x1bc00 <user_task.part.1+0x124>
   1bbfc:	4e df       	rcall	.-356    	; 0x1ba9a <help>
   1bbfe:	36 c0       	rjmp	.+108    	; 0x1bc6c <user_task.part.1+0x190>
    else if ( MATCHI(ptr,"time") )
    {
        display_clock();
        result = 1;
    }
    else if ( MATCHI(ptr,"help") || MATCHI(ptr,"?") )
   1bc00:	63 ea       	ldi	r22, 0xA3	; 163
   1bc02:	76 e1       	ldi	r23, 0x16	; 22
   1bc04:	c8 01       	movw	r24, r16
   1bc06:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <MATCHI>
   1bc0a:	89 2b       	or	r24, r25
   1bc0c:	b9 f7       	brne	.-18     	; 0x1bbfc <user_task.part.1+0x120>
    {
        help();
        result = 1;
    }

    else if(gpib_tests(argc,argv))
   1bc0e:	be 01       	movw	r22, r28
   1bc10:	6a 5f       	subi	r22, 0xFA	; 250
   1bc12:	7e 4f       	sbci	r23, 0xFE	; 254
   1bc14:	c6 01       	movw	r24, r12
   1bc16:	0e 94 29 90 	call	0x12052	; 0x12052 <gpib_tests>
   1bc1a:	89 2b       	or	r24, r25
   1bc1c:	19 f0       	breq	.+6      	; 0x1bc24 <user_task.part.1+0x148>
    {
// Restore GPIB BUS states
        gpib_init_devices();
   1bc1e:	0e 94 3d 8b 	call	0x1167a	; 0x1167a <gpib_init_devices>
   1bc22:	24 c0       	rjmp	.+72     	; 0x1bc6c <user_task.part.1+0x190>
        result = 1;
    }

#ifdef POSIX_TESTS
    else if(posix_tests(argc,argv))
   1bc24:	be 01       	movw	r22, r28
   1bc26:	6a 5f       	subi	r22, 0xFA	; 250
   1bc28:	7e 4f       	sbci	r23, 0xFE	; 254
   1bc2a:	c6 01       	movw	r24, r12
   1bc2c:	0e 94 25 80 	call	0x1004a	; 0x1004a <posix_tests>
   1bc30:	89 2b       	or	r24, r25
   1bc32:	e1 f4       	brne	.+56     	; 0x1bc6c <user_task.part.1+0x190>
        result = 1;
#endif

#ifdef FATFS_TESTS
    else if(fatfs_tests(argc,argv))
   1bc34:	be 01       	movw	r22, r28
   1bc36:	6a 5f       	subi	r22, 0xFA	; 250
   1bc38:	7e 4f       	sbci	r23, 0xFE	; 254
   1bc3a:	c6 01       	movw	r24, r12
   1bc3c:	0e 94 80 72 	call	0xe500	; 0xe500 <fatfs_tests>
   1bc40:	89 2b       	or	r24, r25
   1bc42:	a1 f4       	brne	.+40     	; 0x1bc6c <user_task.part.1+0x190>
        result = 1;
#endif

#ifdef LIF_SUPPORT
    else if(lif_tests(argc,argv))
   1bc44:	be 01       	movw	r22, r28
   1bc46:	6a 5f       	subi	r22, 0xFA	; 250
   1bc48:	7e 4f       	sbci	r23, 0xFE	; 254
   1bc4a:	c6 01       	movw	r24, r12
   1bc4c:	2b dc       	rcall	.-1962   	; 0x1b4a4 <lif_tests>
   1bc4e:	89 2b       	or	r24, r25
   1bc50:	69 f4       	brne	.+26     	; 0x1bc6c <user_task.part.1+0x190>
        result = 1;
#endif
    if(result)
        printf("OK\n");
    else
        printf("Error:[%s]\n",line);
   1bc52:	ed b7       	in	r30, 0x3d	; 61
   1bc54:	fe b7       	in	r31, 0x3e	; 62
   1bc56:	f5 82       	std	Z+5, r15	; 0x05
   1bc58:	e4 82       	std	Z+4, r14	; 0x04
   1bc5a:	87 ea       	ldi	r24, 0xA7	; 167
   1bc5c:	94 e4       	ldi	r25, 0x44	; 68
   1bc5e:	a0 e0       	ldi	r26, 0x00	; 0
   1bc60:	81 83       	std	Z+1, r24	; 0x01
   1bc62:	92 83       	std	Z+2, r25	; 0x02
   1bc64:	a3 83       	std	Z+3, r26	; 0x03
   1bc66:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
   1bc6a:	0a c0       	rjmp	.+20     	; 0x1bc80 <user_task.part.1+0x1a4>
#ifdef LIF_SUPPORT
    else if(lif_tests(argc,argv))
        result = 1;
#endif
    if(result)
        printf("OK\n");
   1bc6c:	83 eb       	ldi	r24, 0xB3	; 179
   1bc6e:	94 e4       	ldi	r25, 0x44	; 68
   1bc70:	a0 e0       	ldi	r26, 0x00	; 0
   1bc72:	ed b7       	in	r30, 0x3d	; 61
   1bc74:	fe b7       	in	r31, 0x3e	; 62
   1bc76:	81 83       	std	Z+1, r24	; 0x01
   1bc78:	92 83       	std	Z+2, r25	; 0x02
   1bc7a:	a3 83       	std	Z+3, r26	; 0x03
   1bc7c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    else
        printf("Error:[%s]\n",line);
}
   1bc80:	c7 59       	subi	r28, 0x97	; 151
   1bc82:	de 4f       	sbci	r29, 0xFE	; 254
   1bc84:	e8 e0       	ldi	r30, 0x08	; 8
   1bc86:	ba c2       	rjmp	.+1396   	; 0x1c1fc <__epilogue_restores__+0x14>

0001bc88 <user_task>:
    int result = 0;
    char *argv[50];
    char line[256];


    if(gpib)
   1bc88:	81 11       	cpse	r24, r1
        gpib_task();
   1bc8a:	0e 94 a8 8f 	call	0x11f50	; 0x11f50 <gpib_task>

    if(!kbhit(0))
   1bc8e:	80 e0       	ldi	r24, 0x00	; 0
   1bc90:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <uart_rx_count>
   1bc94:	89 2b       	or	r24, r25
   1bc96:	09 f0       	breq	.+2      	; 0x1bc9a <user_task+0x12>
   1bc98:	21 cf       	rjmp	.-446    	; 0x1badc <user_task.part.1>
   1bc9a:	08 95       	ret

0001bc9c <main>:


/// @brief  main() for gpib project
/// @return  should never return!
int main(void)
{
   1bc9c:	a3 e3       	ldi	r26, 0x33	; 51
   1bc9e:	b0 e0       	ldi	r27, 0x00	; 0
   1bca0:	e3 e5       	ldi	r30, 0x53	; 83
   1bca2:	fe ed       	ldi	r31, 0xDE	; 222
   1bca4:	8f c2       	rjmp	.+1310   	; 0x1c1c4 <__prologue_saves__+0x14>
    ts_t ts;
    uint32_t actual,baud;
	char tmp[32];

	clear_error();		// Clear error state
   1bca6:	0e 94 43 24 	call	0x4886	; 0x4886 <clear_error>

	GPIO_PIN_LOW(LED1);	// Activity status
   1bcaa:	46 98       	cbi	0x08, 6	; 8
   1bcac:	3e 9a       	sbi	0x07, 6	; 7

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1bcae:	0e 94 09 84 	call	0x10812	; 0x10812 <gpib_bus_init>
// BAUD setting moved to Makefile
    baud = BAUD;

///@ Initialize UART early
/// Returns actual BAUD rate - possible with hardware - may differ slightly
    actual = uart_init(0, baud);                  // Serial Port Initialize
   1bcb2:	40 e0       	ldi	r20, 0x00	; 0
   1bcb4:	52 ec       	ldi	r21, 0xC2	; 194
   1bcb6:	61 e0       	ldi	r22, 0x01	; 1
   1bcb8:	70 e0       	ldi	r23, 0x00	; 0
   1bcba:	80 e0       	ldi	r24, 0x00	; 0
   1bcbc:	0e 94 91 26 	call	0x4d22	; 0x4d22 <uart_init>
   1bcc0:	6b 01       	movw	r12, r22
   1bcc2:	7c 01       	movw	r14, r24

///@brief Power up delay
    delayms(200);
   1bcc4:	68 ec       	ldi	r22, 0xC8	; 200
   1bcc6:	70 e0       	ldi	r23, 0x00	; 0
   1bcc8:	80 e0       	ldi	r24, 0x00	; 0
   1bcca:	90 e0       	ldi	r25, 0x00	; 0
   1bccc:	0e 94 9e 25 	call	0x4b3c	; 0x4b3c <delayms>

    sep();
   1bcd0:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <sep>
    printf("Start\n");
   1bcd4:	80 ea       	ldi	r24, 0xA0	; 160
   1bcd6:	94 e4       	ldi	r25, 0x44	; 68
   1bcd8:	a0 e0       	ldi	r26, 0x00	; 0
   1bcda:	ed b7       	in	r30, 0x3d	; 61
   1bcdc:	fe b7       	in	r31, 0x3e	; 62
   1bcde:	81 83       	std	Z+1, r24	; 0x01
   1bce0:	92 83       	std	Z+2, r25	; 0x02
   1bce2:	a3 83       	std	Z+3, r26	; 0x03
   1bce4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("CPU Clock = %lu\n", F_CPU);
   1bce8:	80 e0       	ldi	r24, 0x00	; 0
   1bcea:	9d e2       	ldi	r25, 0x2D	; 45
   1bcec:	a1 e3       	ldi	r26, 0x31	; 49
   1bcee:	b1 e0       	ldi	r27, 0x01	; 1
   1bcf0:	ed b7       	in	r30, 0x3d	; 61
   1bcf2:	fe b7       	in	r31, 0x3e	; 62
   1bcf4:	84 83       	std	Z+4, r24	; 0x04
   1bcf6:	95 83       	std	Z+5, r25	; 0x05
   1bcf8:	a6 83       	std	Z+6, r26	; 0x06
   1bcfa:	b7 83       	std	Z+7, r27	; 0x07
   1bcfc:	8f e8       	ldi	r24, 0x8F	; 143
   1bcfe:	94 e4       	ldi	r25, 0x44	; 68
   1bd00:	a0 e0       	ldi	r26, 0x00	; 0
   1bd02:	81 83       	std	Z+1, r24	; 0x01
   1bd04:	92 83       	std	Z+2, r25	; 0x02
   1bd06:	a3 83       	std	Z+3, r26	; 0x03
   1bd08:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("Requested Baud Rate: %ld, Actual: %ld\n", (long)baud, (long)actual);
   1bd0c:	ed b7       	in	r30, 0x3d	; 61
   1bd0e:	fe b7       	in	r31, 0x3e	; 62
   1bd10:	c0 86       	std	Z+8, r12	; 0x08
   1bd12:	d1 86       	std	Z+9, r13	; 0x09
   1bd14:	e2 86       	std	Z+10, r14	; 0x0a
   1bd16:	f3 86       	std	Z+11, r15	; 0x0b
   1bd18:	80 e0       	ldi	r24, 0x00	; 0
   1bd1a:	92 ec       	ldi	r25, 0xC2	; 194
   1bd1c:	a1 e0       	ldi	r26, 0x01	; 1
   1bd1e:	b0 e0       	ldi	r27, 0x00	; 0
   1bd20:	84 83       	std	Z+4, r24	; 0x04
   1bd22:	95 83       	std	Z+5, r25	; 0x05
   1bd24:	a6 83       	std	Z+6, r26	; 0x06
   1bd26:	b7 83       	std	Z+7, r27	; 0x07
   1bd28:	88 e6       	ldi	r24, 0x68	; 104
   1bd2a:	94 e4       	ldi	r25, 0x44	; 68
   1bd2c:	a0 e0       	ldi	r26, 0x00	; 0
   1bd2e:	81 83       	std	Z+1, r24	; 0x01
   1bd30:	92 83       	std	Z+2, r25	; 0x02
   1bd32:	a3 83       	std	Z+3, r26	; 0x03
   1bd34:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

    init_timers();
   1bd38:	0e 94 38 33 	call	0x6670	; 0x6670 <init_timers>

    sep();
   1bd3c:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <sep>
    printf("HP85 Disk and Device Emulator\n");
   1bd40:	89 e4       	ldi	r24, 0x49	; 73
   1bd42:	94 e4       	ldi	r25, 0x44	; 68
   1bd44:	a0 e0       	ldi	r26, 0x00	; 0
   1bd46:	ed b7       	in	r30, 0x3d	; 61
   1bd48:	fe b7       	in	r31, 0x3e	; 62
   1bd4a:	81 83       	std	Z+1, r24	; 0x01
   1bd4c:	92 83       	std	Z+2, r25	; 0x02
   1bd4e:	a3 83       	std	Z+3, r26	; 0x03
   1bd50:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf(" (C) 2014-2020 by Mike Gore\n");
   1bd54:	8c e2       	ldi	r24, 0x2C	; 44
   1bd56:	94 e4       	ldi	r25, 0x44	; 68
   1bd58:	a0 e0       	ldi	r26, 0x00	; 0
   1bd5a:	ed b7       	in	r30, 0x3d	; 61
   1bd5c:	fe b7       	in	r31, 0x3e	; 62
   1bd5e:	81 83       	std	Z+1, r24	; 0x01
   1bd60:	92 83       	std	Z+2, r25	; 0x02
   1bd62:	a3 83       	std	Z+3, r26	; 0x03
   1bd64:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf(" GNU version 3\n");
   1bd68:	8c e1       	ldi	r24, 0x1C	; 28
   1bd6a:	94 e4       	ldi	r25, 0x44	; 68
   1bd6c:	a0 e0       	ldi	r26, 0x00	; 0
   1bd6e:	ed b7       	in	r30, 0x3d	; 61
   1bd70:	fe b7       	in	r31, 0x3e	; 62
   1bd72:	81 83       	std	Z+1, r24	; 0x01
   1bd74:	92 83       	std	Z+2, r25	; 0x02
   1bd76:	a3 83       	std	Z+3, r26	; 0x03
   1bd78:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1bd7c:	85 ef       	ldi	r24, 0xF5	; 245
   1bd7e:	93 e4       	ldi	r25, 0x43	; 67
   1bd80:	a0 e0       	ldi	r26, 0x00	; 0
   1bd82:	ed b7       	in	r30, 0x3d	; 61
   1bd84:	fe b7       	in	r31, 0x3e	; 62
   1bd86:	81 83       	std	Z+1, r24	; 0x01
   1bd88:	92 83       	std	Z+2, r25	; 0x02
   1bd8a:	a3 83       	std	Z+3, r26	; 0x03
   1bd8c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1bd90:	8f ed       	ldi	r24, 0xDF	; 223
   1bd92:	96 e1       	ldi	r25, 0x16	; 22
   1bd94:	ed b7       	in	r30, 0x3d	; 61
   1bd96:	fe b7       	in	r31, 0x3e	; 62
   1bd98:	95 83       	std	Z+5, r25	; 0x05
   1bd9a:	84 83       	std	Z+4, r24	; 0x04
   1bd9c:	8b ed       	ldi	r24, 0xDB	; 219
   1bd9e:	93 e4       	ldi	r25, 0x43	; 67
   1bda0:	a0 e0       	ldi	r26, 0x00	; 0
   1bda2:	81 83       	std	Z+1, r24	; 0x01
   1bda4:	92 83       	std	Z+2, r25	; 0x02
   1bda6:	a3 83       	std	Z+3, r26	; 0x03
   1bda8:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1bdac:	83 e0       	ldi	r24, 0x03	; 3
   1bdae:	97 e1       	ldi	r25, 0x17	; 23
   1bdb0:	ed b7       	in	r30, 0x3d	; 61
   1bdb2:	fe b7       	in	r31, 0x3e	; 62
   1bdb4:	95 83       	std	Z+5, r25	; 0x05
   1bdb6:	84 83       	std	Z+4, r24	; 0x04
   1bdb8:	81 ec       	ldi	r24, 0xC1	; 193
   1bdba:	93 e4       	ldi	r25, 0x43	; 67
   1bdbc:	a0 e0       	ldi	r26, 0x00	; 0
   1bdbe:	81 83       	std	Z+1, r24	; 0x01
   1bdc0:	92 83       	std	Z+2, r25	; 0x02
   1bdc2:	a3 83       	std	Z+3, r26	; 0x03
   1bdc4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

    sep();
   1bdc8:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <sep>
    PrintFree();
   1bdcc:	0e 94 5f 24 	call	0x48be	; 0x48be <PrintFree>

    sep();
   1bdd0:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <sep>
    // delayms(200);                                 ///@brief Power up delay

///@ initialize SPI bus
    printf("Initializing SPI bus\n");
   1bdd4:	8b ea       	ldi	r24, 0xAB	; 171
   1bdd6:	93 e4       	ldi	r25, 0x43	; 67
   1bdd8:	a0 e0       	ldi	r26, 0x00	; 0
   1bdda:	ed b7       	in	r30, 0x3d	; 61
   1bddc:	fe b7       	in	r31, 0x3e	; 62
   1bdde:	81 83       	std	Z+1, r24	; 0x01
   1bde0:	92 83       	std	Z+2, r25	; 0x02
   1bde2:	a3 83       	std	Z+3, r26	; 0x03
   1bde4:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    spi_init(MMC_SLOW,GPIO_B3);
   1bde8:	4b e0       	ldi	r20, 0x0B	; 11
   1bdea:	50 e0       	ldi	r21, 0x00	; 0
   1bdec:	60 e2       	ldi	r22, 0x20	; 32
   1bdee:	71 ea       	ldi	r23, 0xA1	; 161
   1bdf0:	87 e0       	ldi	r24, 0x07	; 7
   1bdf2:	90 e0       	ldi	r25, 0x00	; 0
   1bdf4:	0e 94 c5 23 	call	0x478a	; 0x478a <spi_init>

///@ initialize I2C bus
    printf("Initializing I2C bus\n");
   1bdf8:	85 e9       	ldi	r24, 0x95	; 149
   1bdfa:	93 e4       	ldi	r25, 0x43	; 67
   1bdfc:	a0 e0       	ldi	r26, 0x00	; 0
   1bdfe:	ed b7       	in	r30, 0x3d	; 61
   1be00:	fe b7       	in	r31, 0x3e	; 62
   1be02:	81 83       	std	Z+1, r24	; 0x01
   1be04:	92 83       	std	Z+2, r25	; 0x02
   1be06:	a3 83       	std	Z+3, r26	; 0x03
   1be08:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
	i2c_init(100000);
   1be0c:	60 ea       	ldi	r22, 0xA0	; 160
   1be0e:	76 e8       	ldi	r23, 0x86	; 134
   1be10:	81 e0       	ldi	r24, 0x01	; 1
   1be12:	90 e0       	ldi	r25, 0x00	; 0
   1be14:	0e 94 61 29 	call	0x52c2	; 0x52c2 <i2c_init>
    sep();
   1be18:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <sep>

///@ initialize clock by RTC if we have it
    printf("Initializing RTC\n");
   1be1c:	83 e8       	ldi	r24, 0x83	; 131
   1be1e:	93 e4       	ldi	r25, 0x43	; 67
   1be20:	a0 e0       	ldi	r26, 0x00	; 0
   1be22:	ed b7       	in	r30, 0x3d	; 61
   1be24:	fe b7       	in	r31, 0x3e	; 62
   1be26:	81 83       	std	Z+1, r24	; 0x01
   1be28:	92 83       	std	Z+2, r25	; 0x02
   1be2a:	a3 83       	std	Z+3, r26	; 0x03
   1be2c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    clock_clear();
   1be30:	0e 94 f5 32 	call	0x65ea	; 0x65ea <clock_clear>
    printf("Clock cleared\n");
   1be34:	84 e7       	ldi	r24, 0x74	; 116
   1be36:	93 e4       	ldi	r25, 0x43	; 67
   1be38:	a0 e0       	ldi	r26, 0x00	; 0
   1be3a:	ed b7       	in	r30, 0x3d	; 61
   1be3c:	fe b7       	in	r31, 0x3e	; 62
   1be3e:	81 83       	std	Z+1, r24	; 0x01
   1be40:	92 83       	std	Z+2, r25	; 0x02
   1be42:	a3 83       	std	Z+3, r26	; 0x03
   1be44:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    clock_getres(0, (ts_t *) &ts);
   1be48:	be 01       	movw	r22, r28
   1be4a:	64 5d       	subi	r22, 0xD4	; 212
   1be4c:	7f 4f       	sbci	r23, 0xFF	; 255
   1be4e:	80 e0       	ldi	r24, 0x00	; 0
   1be50:	90 e0       	ldi	r25, 0x00	; 0
   1be52:	0e 94 95 33 	call	0x672a	; 0x672a <clock_getres>
    printf("System Task Interrupt Rate: %ld Nano Seconds\n", (long) ts.tv_nsec);
   1be56:	88 a9       	ldd	r24, Y+48	; 0x30
   1be58:	99 a9       	ldd	r25, Y+49	; 0x31
   1be5a:	aa a9       	ldd	r26, Y+50	; 0x32
   1be5c:	bb a9       	ldd	r27, Y+51	; 0x33
   1be5e:	ed b7       	in	r30, 0x3d	; 61
   1be60:	fe b7       	in	r31, 0x3e	; 62
   1be62:	84 83       	std	Z+4, r24	; 0x04
   1be64:	95 83       	std	Z+5, r25	; 0x05
   1be66:	a6 83       	std	Z+6, r26	; 0x06
   1be68:	b7 83       	std	Z+7, r27	; 0x07
   1be6a:	86 e4       	ldi	r24, 0x46	; 70
   1be6c:	93 e4       	ldi	r25, 0x43	; 67
   1be6e:	a0 e0       	ldi	r26, 0x00	; 0
   1be70:	81 83       	std	Z+1, r24	; 0x01
   1be72:	92 83       	std	Z+2, r25	; 0x02
   1be74:	a3 83       	std	Z+3, r26	; 0x03
   1be76:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

// Timezone offset we just use local time
    initialize_clock(0);
   1be7a:	80 e0       	ldi	r24, 0x00	; 0
   1be7c:	90 e0       	ldi	r25, 0x00	; 0
   1be7e:	0e 94 70 3a 	call	0x74e0	; 0x74e0 <initialize_clock>
    display_clock();
   1be82:	0e 94 e7 3a 	call	0x75ce	; 0x75ce <display_clock>
    sep();
   1be86:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <sep>

///@ initialize Optional I2C LCD
#ifdef LCD_SUPPORT
	lcd_setup();
   1be8a:	16 dd       	rcall	.-1492   	; 0x1b8b8 <lcd_setup>
#endif

///@ initialize MMC bus
    printf("MMC initializing start\n");
   1be8c:	8e e2       	ldi	r24, 0x2E	; 46
   1be8e:	93 e4       	ldi	r25, 0x43	; 67
   1be90:	a0 e0       	ldi	r26, 0x00	; 0
   1be92:	ed b7       	in	r30, 0x3d	; 61
   1be94:	fe b7       	in	r31, 0x3e	; 62
   1be96:	81 83       	std	Z+1, r24	; 0x01
   1be98:	92 83       	std	Z+2, r25	; 0x02
   1be9a:	a3 83       	std	Z+3, r26	; 0x03
   1be9c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    if ( !mmc_init(1) )
   1bea0:	81 e0       	ldi	r24, 0x01	; 1
   1bea2:	90 e0       	ldi	r25, 0x00	; 0
   1bea4:	0e 94 92 6d 	call	0xdb24	; 0xdb24 <mmc_init>
   1bea8:	89 2b       	or	r24, r25
   1beaa:	51 f4       	brne	.+20     	; 0x1bec0 <main+0x224>
		printf("MMC initialized\n");
   1beac:	8d e1       	ldi	r24, 0x1D	; 29
   1beae:	93 e4       	ldi	r25, 0x43	; 67
   1beb0:	a0 e0       	ldi	r26, 0x00	; 0
   1beb2:	ed b7       	in	r30, 0x3d	; 61
   1beb4:	fe b7       	in	r31, 0x3e	; 62
   1beb6:	81 83       	std	Z+1, r24	; 0x01
   1beb8:	92 83       	std	Z+2, r25	; 0x02
   1beba:	a3 83       	std	Z+3, r26	; 0x03
   1bebc:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    sep();
   1bec0:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <sep>

///@ initialize bus state as soon as practical
    gpib_bus_init();
   1bec4:	0e 94 09 84 	call	0x10812	; 0x10812 <gpib_bus_init>
    printf("GPIB bus initialized\n");
   1bec8:	87 e0       	ldi	r24, 0x07	; 7
   1beca:	93 e4       	ldi	r25, 0x43	; 67
   1becc:	a0 e0       	ldi	r26, 0x00	; 0
   1bece:	ed b7       	in	r30, 0x3d	; 61
   1bed0:	fe b7       	in	r31, 0x3e	; 62
   1bed2:	81 83       	std	Z+1, r24	; 0x01
   1bed4:	92 83       	std	Z+2, r25	; 0x02
   1bed6:	a3 83       	std	Z+3, r26	; 0x03
   1bed8:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

///@ initialize Printer Capture
    printer_init();
   1bedc:	0e 94 cb b9 	call	0x17396	; 0x17396 <printer_init>
    printf("Printer initialized\n");
   1bee0:	82 ef       	ldi	r24, 0xF2	; 242
   1bee2:	92 e4       	ldi	r25, 0x42	; 66
   1bee4:	a0 e0       	ldi	r26, 0x00	; 0
   1bee6:	ed b7       	in	r30, 0x3d	; 61
   1bee8:	fe b7       	in	r31, 0x3e	; 62
   1beea:	81 83       	std	Z+1, r24	; 0x01
   1beec:	92 83       	std	Z+2, r25	; 0x02
   1beee:	a3 83       	std	Z+3, r26	; 0x03
   1bef0:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

///@ initialize GPIB timer tasks
    printf("GPIB Timer Setup\n");
   1bef4:	80 ee       	ldi	r24, 0xE0	; 224
   1bef6:	92 e4       	ldi	r25, 0x42	; 66
   1bef8:	a0 e0       	ldi	r26, 0x00	; 0
   1befa:	ed b7       	in	r30, 0x3d	; 61
   1befc:	fe b7       	in	r31, 0x3e	; 62
   1befe:	81 83       	std	Z+1, r24	; 0x01
   1bf00:	92 83       	std	Z+2, r25	; 0x02
   1bf02:	a3 83       	std	Z+3, r26	; 0x03
   1bf04:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    gpib_timer_init();
   1bf08:	0e 94 fa 81 	call	0x103f4	; 0x103f4 <gpib_timer_init>
    printf("GPIB Timer initialized\n");
   1bf0c:	88 ec       	ldi	r24, 0xC8	; 200
   1bf0e:	92 e4       	ldi	r25, 0x42	; 66
   1bf10:	a0 e0       	ldi	r26, 0x00	; 0
   1bf12:	ed b7       	in	r30, 0x3d	; 61
   1bf14:	fe b7       	in	r31, 0x3e	; 62
   1bf16:	81 83       	std	Z+1, r24	; 0x01
   1bf18:	92 83       	std	Z+2, r25	; 0x02
   1bf1a:	a3 83       	std	Z+3, r26	; 0x03
   1bf1c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

///@brief Process hp85disk emulator config file
    gpib_file_init();
   1bf20:	0e 94 68 8a 	call	0x114d0	; 0x114d0 <gpib_file_init>
    printf("GPIB File init done\n");
   1bf24:	83 eb       	ldi	r24, 0xB3	; 179
   1bf26:	92 e4       	ldi	r25, 0x42	; 66
   1bf28:	a0 e0       	ldi	r26, 0x00	; 0
   1bf2a:	ed b7       	in	r30, 0x3d	; 61
   1bf2c:	fe b7       	in	r31, 0x3e	; 62
   1bf2e:	81 83       	std	Z+1, r24	; 0x01
   1bf30:	92 83       	std	Z+2, r25	; 0x02
   1bf32:	a3 83       	std	Z+3, r26	; 0x03
   1bf34:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>

///@brief GPIB talking/listening state variables
///Must be done AFTER gpib_file_init() so we have a valid configuration
    gpib_state_init();
   1bf38:	0e 94 36 84 	call	0x1086c	; 0x1086c <gpib_state_init>
    printf("GPIB State init done\n");
   1bf3c:	8d e9       	ldi	r24, 0x9D	; 157
   1bf3e:	92 e4       	ldi	r25, 0x42	; 66
   1bf40:	a0 e0       	ldi	r26, 0x00	; 0
   1bf42:	ed b7       	in	r30, 0x3d	; 61
   1bf44:	fe b7       	in	r31, 0x3e	; 62
   1bf46:	81 83       	std	Z+1, r24	; 0x01
   1bf48:	92 83       	std	Z+2, r25	; 0x02
   1bf4a:	a3 83       	std	Z+3, r26	; 0x03
   1bf4c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    sep();
   1bf50:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <sep>

///@brief Display Address Summary
    display_Addresses(0);
   1bf54:	80 e0       	ldi	r24, 0x00	; 0
   1bf56:	90 e0       	ldi	r25, 0x00	; 0
   1bf58:	0e 94 f6 91 	call	0x123ec	; 0x123ec <display_Addresses>
    sep();
   1bf5c:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <sep>

///@brief Display debug level
    printf("debuglevel   = %04xH\n",(int)debuglevel);
   1bf60:	80 91 b6 01 	lds	r24, 0x01B6	; 0x8001b6 <debuglevel>
   1bf64:	90 91 b7 01 	lds	r25, 0x01B7	; 0x8001b7 <debuglevel+0x1>
   1bf68:	ed b7       	in	r30, 0x3d	; 61
   1bf6a:	fe b7       	in	r31, 0x3e	; 62
   1bf6c:	95 83       	std	Z+5, r25	; 0x05
   1bf6e:	84 83       	std	Z+4, r24	; 0x04
   1bf70:	87 e8       	ldi	r24, 0x87	; 135
   1bf72:	92 e4       	ldi	r25, 0x42	; 66
   1bf74:	a0 e0       	ldi	r26, 0x00	; 0
   1bf76:	81 83       	std	Z+1, r24	; 0x01
   1bf78:	92 83       	std	Z+2, r25	; 0x02
   1bf7a:	a3 83       	std	Z+3, r26	; 0x03
   1bf7c:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
    sep();
   1bf80:	0e 94 52 2f 	call	0x5ea4	; 0x5ea4 <sep>

///@brief Format any drives that do not yet exist
    format_drives();
   1bf84:	0e 94 8e 9d 	call	0x13b1c	; 0x13b1c <format_drives>

#ifdef LCD_SUPPORT
	sprintf((char *) tmp, "SS80=%d AMIGO=%d",
   1bf88:	83 e0       	ldi	r24, 0x03	; 3
   1bf8a:	0e 94 6b 95 	call	0x12ad6	; 0x12ad6 <count_drive_types>
   1bf8e:	8c 01       	movw	r16, r24
   1bf90:	81 e0       	ldi	r24, 0x01	; 1
   1bf92:	0e 94 6b 95 	call	0x12ad6	; 0x12ad6 <count_drive_types>
   1bf96:	ed b7       	in	r30, 0x3d	; 61
   1bf98:	fe b7       	in	r31, 0x3e	; 62
   1bf9a:	91 87       	std	Z+9, r25	; 0x09
   1bf9c:	80 87       	std	Z+8, r24	; 0x08
   1bf9e:	17 83       	std	Z+7, r17	; 0x07
   1bfa0:	06 83       	std	Z+6, r16	; 0x06
   1bfa2:	86 e7       	ldi	r24, 0x76	; 118
   1bfa4:	92 e4       	ldi	r25, 0x42	; 66
   1bfa6:	a0 e0       	ldi	r26, 0x00	; 0
   1bfa8:	83 83       	std	Z+3, r24	; 0x03
   1bfaa:	94 83       	std	Z+4, r25	; 0x04
   1bfac:	a5 83       	std	Z+5, r26	; 0x05
   1bfae:	8e 01       	movw	r16, r28
   1bfb0:	04 5f       	subi	r16, 0xF4	; 244
   1bfb2:	1f 4f       	sbci	r17, 0xFF	; 255
   1bfb4:	12 83       	std	Z+2, r17	; 0x02
   1bfb6:	01 83       	std	Z+1, r16	; 0x01
   1bfb8:	0e 94 2f 44 	call	0x885e	; 0x885e <sprintf_P>
		(int) count_drive_types(SS80_TYPE),
		(int) count_drive_types(AMIGO_TYPE) );
	sprintf((char *) _line1, "%-16s", tmp);
   1bfbc:	ed b7       	in	r30, 0x3d	; 61
   1bfbe:	fe b7       	in	r31, 0x3e	; 62
   1bfc0:	17 83       	std	Z+7, r17	; 0x07
   1bfc2:	06 83       	std	Z+6, r16	; 0x06
   1bfc4:	80 e7       	ldi	r24, 0x70	; 112
   1bfc6:	92 e4       	ldi	r25, 0x42	; 66
   1bfc8:	a0 e0       	ldi	r26, 0x00	; 0
   1bfca:	83 83       	std	Z+3, r24	; 0x03
   1bfcc:	94 83       	std	Z+4, r25	; 0x04
   1bfce:	a5 83       	std	Z+5, r26	; 0x05
   1bfd0:	8c e0       	ldi	r24, 0x0C	; 12
   1bfd2:	93 e0       	ldi	r25, 0x03	; 3
   1bfd4:	92 83       	std	Z+2, r25	; 0x02
   1bfd6:	81 83       	std	Z+1, r24	; 0x01
   1bfd8:	0e 94 2f 44 	call	0x885e	; 0x885e <sprintf_P>
	sprintf((char *) _line2, "%-16s", "(C)Mike Gore");
   1bfdc:	83 e3       	ldi	r24, 0x33	; 51
   1bfde:	97 e1       	ldi	r25, 0x17	; 23
   1bfe0:	ed b7       	in	r30, 0x3d	; 61
   1bfe2:	fe b7       	in	r31, 0x3e	; 62
   1bfe4:	97 83       	std	Z+7, r25	; 0x07
   1bfe6:	86 83       	std	Z+6, r24	; 0x06
   1bfe8:	8a e6       	ldi	r24, 0x6A	; 106
   1bfea:	92 e4       	ldi	r25, 0x42	; 66
   1bfec:	a0 e0       	ldi	r26, 0x00	; 0
   1bfee:	83 83       	std	Z+3, r24	; 0x03
   1bff0:	94 83       	std	Z+4, r25	; 0x04
   1bff2:	a5 83       	std	Z+5, r26	; 0x05
   1bff4:	85 ef       	ldi	r24, 0xF5	; 245
   1bff6:	92 e0       	ldi	r25, 0x02	; 2
   1bff8:	92 83       	std	Z+2, r25	; 0x02
   1bffa:	81 83       	std	Z+1, r24	; 0x01
   1bffc:	0e 94 2f 44 	call	0x885e	; 0x885e <sprintf_P>

	i2c_task_run();
   1c000:	0e 94 f7 29 	call	0x53ee	; 0x53ee <i2c_task_run>
	delayms(1000);
   1c004:	68 ee       	ldi	r22, 0xE8	; 232
   1c006:	73 e0       	ldi	r23, 0x03	; 3
   1c008:	80 e0       	ldi	r24, 0x00	; 0
   1c00a:	90 e0       	ldi	r25, 0x00	; 0
   1c00c:	0e 94 9e 25 	call	0x4b3c	; 0x4b3c <delayms>
    if(!i2c_task.done || i2c_task.error )
   1c010:	80 91 94 17 	lds	r24, 0x1794	; 0x801794 <i2c_task+0x2>
   1c014:	88 23       	and	r24, r24
   1c016:	21 f0       	breq	.+8      	; 0x1c020 <main+0x384>
   1c018:	80 91 95 17 	lds	r24, 0x1795	; 0x801795 <i2c_task+0x3>
   1c01c:	88 23       	and	r24, r24
   1c01e:	61 f0       	breq	.+24     	; 0x1c038 <main+0x39c>
	{
		i2c_display_task_errors();
   1c020:	0e 94 5e 2c 	call	0x58bc	; 0x58bc <i2c_display_task_errors>
		printf("I2C LCD is NOT attached!\n");
   1c024:	80 e5       	ldi	r24, 0x50	; 80
   1c026:	92 e4       	ldi	r25, 0x42	; 66
   1c028:	a0 e0       	ldi	r26, 0x00	; 0
   1c02a:	ed b7       	in	r30, 0x3d	; 61
   1c02c:	fe b7       	in	r31, 0x3e	; 62
   1c02e:	81 83       	std	Z+1, r24	; 0x01
   1c030:	92 83       	std	Z+2, r25	; 0x02
   1c032:	a3 83       	std	Z+3, r26	; 0x03
   1c034:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
	}
#endif

///@brief Start main GPIB state machine
    printf("Starting GPIB TASK\n");
   1c038:	8c e3       	ldi	r24, 0x3C	; 60
   1c03a:	92 e4       	ldi	r25, 0x42	; 66
   1c03c:	a0 e0       	ldi	r26, 0x00	; 0
   1c03e:	ed b7       	in	r30, 0x3d	; 61
   1c040:	fe b7       	in	r31, 0x3e	; 62
   1c042:	81 83       	std	Z+1, r24	; 0x01
   1c044:	92 83       	std	Z+2, r25	; 0x02
   1c046:	a3 83       	std	Z+3, r26	; 0x03
   1c048:	0e 94 43 44 	call	0x8886	; 0x8886 <printf_P>
///@brief Keep the task running 
/// task does not exit unless a keypress occurs
/// When it restarts ALL GPIB states are reset 
    while ( 1)
    {
        user_task(1);
   1c04c:	81 e0       	ldi	r24, 0x01	; 1
   1c04e:	1c de       	rcall	.-968    	; 0x1bc88 <user_task>
   1c050:	fd cf       	rjmp	.-6      	; 0x1c04c <main+0x3b0>

0001c052 <__mulsi3>:
   1c052:	db 01       	movw	r26, r22
   1c054:	8f 93       	push	r24
   1c056:	9f 93       	push	r25
   1c058:	8b d0       	rcall	.+278    	; 0x1c170 <__muluhisi3>
   1c05a:	bf 91       	pop	r27
   1c05c:	af 91       	pop	r26
   1c05e:	a2 9f       	mul	r26, r18
   1c060:	80 0d       	add	r24, r0
   1c062:	91 1d       	adc	r25, r1
   1c064:	a3 9f       	mul	r26, r19
   1c066:	90 0d       	add	r25, r0
   1c068:	b2 9f       	mul	r27, r18
   1c06a:	90 0d       	add	r25, r0
   1c06c:	11 24       	eor	r1, r1
   1c06e:	08 95       	ret

0001c070 <__udivmodqi4>:
   1c070:	99 1b       	sub	r25, r25
   1c072:	79 e0       	ldi	r23, 0x09	; 9
   1c074:	04 c0       	rjmp	.+8      	; 0x1c07e <__udivmodqi4_ep>

0001c076 <__udivmodqi4_loop>:
   1c076:	99 1f       	adc	r25, r25
   1c078:	96 17       	cp	r25, r22
   1c07a:	08 f0       	brcs	.+2      	; 0x1c07e <__udivmodqi4_ep>
   1c07c:	96 1b       	sub	r25, r22

0001c07e <__udivmodqi4_ep>:
   1c07e:	88 1f       	adc	r24, r24
   1c080:	7a 95       	dec	r23
   1c082:	c9 f7       	brne	.-14     	; 0x1c076 <__udivmodqi4_loop>
   1c084:	80 95       	com	r24
   1c086:	08 95       	ret

0001c088 <__udivmodhi4>:
   1c088:	aa 1b       	sub	r26, r26
   1c08a:	bb 1b       	sub	r27, r27
   1c08c:	51 e1       	ldi	r21, 0x11	; 17
   1c08e:	07 c0       	rjmp	.+14     	; 0x1c09e <__udivmodhi4_ep>

0001c090 <__udivmodhi4_loop>:
   1c090:	aa 1f       	adc	r26, r26
   1c092:	bb 1f       	adc	r27, r27
   1c094:	a6 17       	cp	r26, r22
   1c096:	b7 07       	cpc	r27, r23
   1c098:	10 f0       	brcs	.+4      	; 0x1c09e <__udivmodhi4_ep>
   1c09a:	a6 1b       	sub	r26, r22
   1c09c:	b7 0b       	sbc	r27, r23

0001c09e <__udivmodhi4_ep>:
   1c09e:	88 1f       	adc	r24, r24
   1c0a0:	99 1f       	adc	r25, r25
   1c0a2:	5a 95       	dec	r21
   1c0a4:	a9 f7       	brne	.-22     	; 0x1c090 <__udivmodhi4_loop>
   1c0a6:	80 95       	com	r24
   1c0a8:	90 95       	com	r25
   1c0aa:	bc 01       	movw	r22, r24
   1c0ac:	cd 01       	movw	r24, r26
   1c0ae:	08 95       	ret

0001c0b0 <__divmodhi4>:
   1c0b0:	97 fb       	bst	r25, 7
   1c0b2:	07 2e       	mov	r0, r23
   1c0b4:	16 f4       	brtc	.+4      	; 0x1c0ba <__divmodhi4+0xa>
   1c0b6:	00 94       	com	r0
   1c0b8:	06 d0       	rcall	.+12     	; 0x1c0c6 <__divmodhi4_neg1>
   1c0ba:	77 fd       	sbrc	r23, 7
   1c0bc:	08 d0       	rcall	.+16     	; 0x1c0ce <__divmodhi4_neg2>
   1c0be:	e4 df       	rcall	.-56     	; 0x1c088 <__udivmodhi4>
   1c0c0:	07 fc       	sbrc	r0, 7
   1c0c2:	05 d0       	rcall	.+10     	; 0x1c0ce <__divmodhi4_neg2>
   1c0c4:	3e f4       	brtc	.+14     	; 0x1c0d4 <__divmodhi4_exit>

0001c0c6 <__divmodhi4_neg1>:
   1c0c6:	90 95       	com	r25
   1c0c8:	81 95       	neg	r24
   1c0ca:	9f 4f       	sbci	r25, 0xFF	; 255
   1c0cc:	08 95       	ret

0001c0ce <__divmodhi4_neg2>:
   1c0ce:	70 95       	com	r23
   1c0d0:	61 95       	neg	r22
   1c0d2:	7f 4f       	sbci	r23, 0xFF	; 255

0001c0d4 <__divmodhi4_exit>:
   1c0d4:	08 95       	ret

0001c0d6 <__udivmodsi4>:
   1c0d6:	a1 e2       	ldi	r26, 0x21	; 33
   1c0d8:	1a 2e       	mov	r1, r26
   1c0da:	aa 1b       	sub	r26, r26
   1c0dc:	bb 1b       	sub	r27, r27
   1c0de:	fd 01       	movw	r30, r26
   1c0e0:	0d c0       	rjmp	.+26     	; 0x1c0fc <__udivmodsi4_ep>

0001c0e2 <__udivmodsi4_loop>:
   1c0e2:	aa 1f       	adc	r26, r26
   1c0e4:	bb 1f       	adc	r27, r27
   1c0e6:	ee 1f       	adc	r30, r30
   1c0e8:	ff 1f       	adc	r31, r31
   1c0ea:	a2 17       	cp	r26, r18
   1c0ec:	b3 07       	cpc	r27, r19
   1c0ee:	e4 07       	cpc	r30, r20
   1c0f0:	f5 07       	cpc	r31, r21
   1c0f2:	20 f0       	brcs	.+8      	; 0x1c0fc <__udivmodsi4_ep>
   1c0f4:	a2 1b       	sub	r26, r18
   1c0f6:	b3 0b       	sbc	r27, r19
   1c0f8:	e4 0b       	sbc	r30, r20
   1c0fa:	f5 0b       	sbc	r31, r21

0001c0fc <__udivmodsi4_ep>:
   1c0fc:	66 1f       	adc	r22, r22
   1c0fe:	77 1f       	adc	r23, r23
   1c100:	88 1f       	adc	r24, r24
   1c102:	99 1f       	adc	r25, r25
   1c104:	1a 94       	dec	r1
   1c106:	69 f7       	brne	.-38     	; 0x1c0e2 <__udivmodsi4_loop>
   1c108:	60 95       	com	r22
   1c10a:	70 95       	com	r23
   1c10c:	80 95       	com	r24
   1c10e:	90 95       	com	r25
   1c110:	9b 01       	movw	r18, r22
   1c112:	ac 01       	movw	r20, r24
   1c114:	bd 01       	movw	r22, r26
   1c116:	cf 01       	movw	r24, r30
   1c118:	08 95       	ret

0001c11a <__divmodsi4>:
   1c11a:	05 2e       	mov	r0, r21
   1c11c:	97 fb       	bst	r25, 7
   1c11e:	16 f4       	brtc	.+4      	; 0x1c124 <__divmodsi4+0xa>
   1c120:	00 94       	com	r0
   1c122:	0f d0       	rcall	.+30     	; 0x1c142 <__negsi2>
   1c124:	57 fd       	sbrc	r21, 7
   1c126:	05 d0       	rcall	.+10     	; 0x1c132 <__divmodsi4_neg2>
   1c128:	d6 df       	rcall	.-84     	; 0x1c0d6 <__udivmodsi4>
   1c12a:	07 fc       	sbrc	r0, 7
   1c12c:	02 d0       	rcall	.+4      	; 0x1c132 <__divmodsi4_neg2>
   1c12e:	46 f4       	brtc	.+16     	; 0x1c140 <__divmodsi4_exit>
   1c130:	08 c0       	rjmp	.+16     	; 0x1c142 <__negsi2>

0001c132 <__divmodsi4_neg2>:
   1c132:	50 95       	com	r21
   1c134:	40 95       	com	r20
   1c136:	30 95       	com	r19
   1c138:	21 95       	neg	r18
   1c13a:	3f 4f       	sbci	r19, 0xFF	; 255
   1c13c:	4f 4f       	sbci	r20, 0xFF	; 255
   1c13e:	5f 4f       	sbci	r21, 0xFF	; 255

0001c140 <__divmodsi4_exit>:
   1c140:	08 95       	ret

0001c142 <__negsi2>:
   1c142:	90 95       	com	r25
   1c144:	80 95       	com	r24
   1c146:	70 95       	com	r23
   1c148:	61 95       	neg	r22
   1c14a:	7f 4f       	sbci	r23, 0xFF	; 255
   1c14c:	8f 4f       	sbci	r24, 0xFF	; 255
   1c14e:	9f 4f       	sbci	r25, 0xFF	; 255
   1c150:	08 95       	ret

0001c152 <__tablejump2__>:
   1c152:	ee 0f       	add	r30, r30
   1c154:	ff 1f       	adc	r31, r31
   1c156:	00 24       	eor	r0, r0
   1c158:	00 1c       	adc	r0, r0
   1c15a:	0b be       	out	0x3b, r0	; 59
   1c15c:	07 90       	elpm	r0, Z+
   1c15e:	f6 91       	elpm	r31, Z
   1c160:	e0 2d       	mov	r30, r0
   1c162:	09 94       	ijmp

0001c164 <__usmulhisi3>:
   1c164:	6f d0       	rcall	.+222    	; 0x1c244 <__umulhisi3>

0001c166 <__usmulhisi3_tail>:
   1c166:	b7 ff       	sbrs	r27, 7
   1c168:	08 95       	ret
   1c16a:	82 1b       	sub	r24, r18
   1c16c:	93 0b       	sbc	r25, r19
   1c16e:	08 95       	ret

0001c170 <__muluhisi3>:
   1c170:	69 d0       	rcall	.+210    	; 0x1c244 <__umulhisi3>
   1c172:	a5 9f       	mul	r26, r21
   1c174:	90 0d       	add	r25, r0
   1c176:	b4 9f       	mul	r27, r20
   1c178:	90 0d       	add	r25, r0
   1c17a:	a4 9f       	mul	r26, r20
   1c17c:	80 0d       	add	r24, r0
   1c17e:	91 1d       	adc	r25, r1
   1c180:	11 24       	eor	r1, r1
   1c182:	08 95       	ret

0001c184 <__mulshisi3>:
   1c184:	b7 ff       	sbrs	r27, 7
   1c186:	f4 cf       	rjmp	.-24     	; 0x1c170 <__muluhisi3>

0001c188 <__mulohisi3>:
   1c188:	f3 df       	rcall	.-26     	; 0x1c170 <__muluhisi3>
   1c18a:	82 1b       	sub	r24, r18
   1c18c:	93 0b       	sbc	r25, r19
   1c18e:	08 95       	ret

0001c190 <__negdi2>:
   1c190:	60 95       	com	r22
   1c192:	70 95       	com	r23
   1c194:	80 95       	com	r24
   1c196:	90 95       	com	r25
   1c198:	30 95       	com	r19
   1c19a:	40 95       	com	r20
   1c19c:	50 95       	com	r21
   1c19e:	21 95       	neg	r18
   1c1a0:	3f 4f       	sbci	r19, 0xFF	; 255
   1c1a2:	4f 4f       	sbci	r20, 0xFF	; 255
   1c1a4:	5f 4f       	sbci	r21, 0xFF	; 255
   1c1a6:	6f 4f       	sbci	r22, 0xFF	; 255
   1c1a8:	7f 4f       	sbci	r23, 0xFF	; 255
   1c1aa:	8f 4f       	sbci	r24, 0xFF	; 255
   1c1ac:	9f 4f       	sbci	r25, 0xFF	; 255
   1c1ae:	08 95       	ret

0001c1b0 <__prologue_saves__>:
   1c1b0:	2f 92       	push	r2
   1c1b2:	3f 92       	push	r3
   1c1b4:	4f 92       	push	r4
   1c1b6:	5f 92       	push	r5
   1c1b8:	6f 92       	push	r6
   1c1ba:	7f 92       	push	r7
   1c1bc:	8f 92       	push	r8
   1c1be:	9f 92       	push	r9
   1c1c0:	af 92       	push	r10
   1c1c2:	bf 92       	push	r11
   1c1c4:	cf 92       	push	r12
   1c1c6:	df 92       	push	r13
   1c1c8:	ef 92       	push	r14
   1c1ca:	ff 92       	push	r15
   1c1cc:	0f 93       	push	r16
   1c1ce:	1f 93       	push	r17
   1c1d0:	cf 93       	push	r28
   1c1d2:	df 93       	push	r29
   1c1d4:	cd b7       	in	r28, 0x3d	; 61
   1c1d6:	de b7       	in	r29, 0x3e	; 62
   1c1d8:	ca 1b       	sub	r28, r26
   1c1da:	db 0b       	sbc	r29, r27
   1c1dc:	0f b6       	in	r0, 0x3f	; 63
   1c1de:	f8 94       	cli
   1c1e0:	de bf       	out	0x3e, r29	; 62
   1c1e2:	0f be       	out	0x3f, r0	; 63
   1c1e4:	cd bf       	out	0x3d, r28	; 61
   1c1e6:	09 94       	ijmp

0001c1e8 <__epilogue_restores__>:
   1c1e8:	2a 88       	ldd	r2, Y+18	; 0x12
   1c1ea:	39 88       	ldd	r3, Y+17	; 0x11
   1c1ec:	48 88       	ldd	r4, Y+16	; 0x10
   1c1ee:	5f 84       	ldd	r5, Y+15	; 0x0f
   1c1f0:	6e 84       	ldd	r6, Y+14	; 0x0e
   1c1f2:	7d 84       	ldd	r7, Y+13	; 0x0d
   1c1f4:	8c 84       	ldd	r8, Y+12	; 0x0c
   1c1f6:	9b 84       	ldd	r9, Y+11	; 0x0b
   1c1f8:	aa 84       	ldd	r10, Y+10	; 0x0a
   1c1fa:	b9 84       	ldd	r11, Y+9	; 0x09
   1c1fc:	c8 84       	ldd	r12, Y+8	; 0x08
   1c1fe:	df 80       	ldd	r13, Y+7	; 0x07
   1c200:	ee 80       	ldd	r14, Y+6	; 0x06
   1c202:	fd 80       	ldd	r15, Y+5	; 0x05
   1c204:	0c 81       	ldd	r16, Y+4	; 0x04
   1c206:	1b 81       	ldd	r17, Y+3	; 0x03
   1c208:	aa 81       	ldd	r26, Y+2	; 0x02
   1c20a:	b9 81       	ldd	r27, Y+1	; 0x01
   1c20c:	ce 0f       	add	r28, r30
   1c20e:	d1 1d       	adc	r29, r1
   1c210:	0f b6       	in	r0, 0x3f	; 63
   1c212:	f8 94       	cli
   1c214:	de bf       	out	0x3e, r29	; 62
   1c216:	0f be       	out	0x3f, r0	; 63
   1c218:	cd bf       	out	0x3d, r28	; 61
   1c21a:	ed 01       	movw	r28, r26
   1c21c:	08 95       	ret

0001c21e <__xload_1>:
   1c21e:	57 fd       	sbrc	r21, 7
   1c220:	03 c0       	rjmp	.+6      	; 0x1c228 <__xload_1+0xa>
   1c222:	5b bf       	out	0x3b, r21	; 59
   1c224:	67 91       	elpm	r22, Z+
   1c226:	08 95       	ret
   1c228:	60 81       	ld	r22, Z
   1c22a:	08 95       	ret

0001c22c <__cmpdi2_s8>:
   1c22c:	00 24       	eor	r0, r0
   1c22e:	a7 fd       	sbrc	r26, 7
   1c230:	00 94       	com	r0
   1c232:	2a 17       	cp	r18, r26
   1c234:	30 05       	cpc	r19, r0
   1c236:	40 05       	cpc	r20, r0
   1c238:	50 05       	cpc	r21, r0
   1c23a:	60 05       	cpc	r22, r0
   1c23c:	70 05       	cpc	r23, r0
   1c23e:	80 05       	cpc	r24, r0
   1c240:	90 05       	cpc	r25, r0
   1c242:	08 95       	ret

0001c244 <__umulhisi3>:
   1c244:	a2 9f       	mul	r26, r18
   1c246:	b0 01       	movw	r22, r0
   1c248:	b3 9f       	mul	r27, r19
   1c24a:	c0 01       	movw	r24, r0
   1c24c:	a3 9f       	mul	r26, r19
   1c24e:	70 0d       	add	r23, r0
   1c250:	81 1d       	adc	r24, r1
   1c252:	11 24       	eor	r1, r1
   1c254:	91 1d       	adc	r25, r1
   1c256:	b2 9f       	mul	r27, r18
   1c258:	70 0d       	add	r23, r0
   1c25a:	81 1d       	adc	r24, r1
   1c25c:	11 24       	eor	r1, r1
   1c25e:	91 1d       	adc	r25, r1
   1c260:	08 95       	ret

0001c262 <__subsf3>:
   1c262:	50 58       	subi	r21, 0x80	; 128

0001c264 <__addsf3>:
   1c264:	bb 27       	eor	r27, r27
   1c266:	aa 27       	eor	r26, r26
   1c268:	0e d0       	rcall	.+28     	; 0x1c286 <__addsf3x>
   1c26a:	75 c1       	rjmp	.+746    	; 0x1c556 <__fp_round>
   1c26c:	66 d1       	rcall	.+716    	; 0x1c53a <__fp_pscA>
   1c26e:	30 f0       	brcs	.+12     	; 0x1c27c <__addsf3+0x18>
   1c270:	6b d1       	rcall	.+726    	; 0x1c548 <__fp_pscB>
   1c272:	20 f0       	brcs	.+8      	; 0x1c27c <__addsf3+0x18>
   1c274:	31 f4       	brne	.+12     	; 0x1c282 <__addsf3+0x1e>
   1c276:	9f 3f       	cpi	r25, 0xFF	; 255
   1c278:	11 f4       	brne	.+4      	; 0x1c27e <__addsf3+0x1a>
   1c27a:	1e f4       	brtc	.+6      	; 0x1c282 <__addsf3+0x1e>
   1c27c:	5b c1       	rjmp	.+694    	; 0x1c534 <__fp_nan>
   1c27e:	0e f4       	brtc	.+2      	; 0x1c282 <__addsf3+0x1e>
   1c280:	e0 95       	com	r30
   1c282:	e7 fb       	bst	r30, 7
   1c284:	51 c1       	rjmp	.+674    	; 0x1c528 <__fp_inf>

0001c286 <__addsf3x>:
   1c286:	e9 2f       	mov	r30, r25
   1c288:	77 d1       	rcall	.+750    	; 0x1c578 <__fp_split3>
   1c28a:	80 f3       	brcs	.-32     	; 0x1c26c <__addsf3+0x8>
   1c28c:	ba 17       	cp	r27, r26
   1c28e:	62 07       	cpc	r22, r18
   1c290:	73 07       	cpc	r23, r19
   1c292:	84 07       	cpc	r24, r20
   1c294:	95 07       	cpc	r25, r21
   1c296:	18 f0       	brcs	.+6      	; 0x1c29e <__addsf3x+0x18>
   1c298:	71 f4       	brne	.+28     	; 0x1c2b6 <__addsf3x+0x30>
   1c29a:	9e f5       	brtc	.+102    	; 0x1c302 <__addsf3x+0x7c>
   1c29c:	8f c1       	rjmp	.+798    	; 0x1c5bc <__fp_zero>
   1c29e:	0e f4       	brtc	.+2      	; 0x1c2a2 <__addsf3x+0x1c>
   1c2a0:	e0 95       	com	r30
   1c2a2:	0b 2e       	mov	r0, r27
   1c2a4:	ba 2f       	mov	r27, r26
   1c2a6:	a0 2d       	mov	r26, r0
   1c2a8:	0b 01       	movw	r0, r22
   1c2aa:	b9 01       	movw	r22, r18
   1c2ac:	90 01       	movw	r18, r0
   1c2ae:	0c 01       	movw	r0, r24
   1c2b0:	ca 01       	movw	r24, r20
   1c2b2:	a0 01       	movw	r20, r0
   1c2b4:	11 24       	eor	r1, r1
   1c2b6:	ff 27       	eor	r31, r31
   1c2b8:	59 1b       	sub	r21, r25
   1c2ba:	99 f0       	breq	.+38     	; 0x1c2e2 <__addsf3x+0x5c>
   1c2bc:	59 3f       	cpi	r21, 0xF9	; 249
   1c2be:	50 f4       	brcc	.+20     	; 0x1c2d4 <__addsf3x+0x4e>
   1c2c0:	50 3e       	cpi	r21, 0xE0	; 224
   1c2c2:	68 f1       	brcs	.+90     	; 0x1c31e <__addsf3x+0x98>
   1c2c4:	1a 16       	cp	r1, r26
   1c2c6:	f0 40       	sbci	r31, 0x00	; 0
   1c2c8:	a2 2f       	mov	r26, r18
   1c2ca:	23 2f       	mov	r18, r19
   1c2cc:	34 2f       	mov	r19, r20
   1c2ce:	44 27       	eor	r20, r20
   1c2d0:	58 5f       	subi	r21, 0xF8	; 248
   1c2d2:	f3 cf       	rjmp	.-26     	; 0x1c2ba <__addsf3x+0x34>
   1c2d4:	46 95       	lsr	r20
   1c2d6:	37 95       	ror	r19
   1c2d8:	27 95       	ror	r18
   1c2da:	a7 95       	ror	r26
   1c2dc:	f0 40       	sbci	r31, 0x00	; 0
   1c2de:	53 95       	inc	r21
   1c2e0:	c9 f7       	brne	.-14     	; 0x1c2d4 <__addsf3x+0x4e>
   1c2e2:	7e f4       	brtc	.+30     	; 0x1c302 <__addsf3x+0x7c>
   1c2e4:	1f 16       	cp	r1, r31
   1c2e6:	ba 0b       	sbc	r27, r26
   1c2e8:	62 0b       	sbc	r22, r18
   1c2ea:	73 0b       	sbc	r23, r19
   1c2ec:	84 0b       	sbc	r24, r20
   1c2ee:	ba f0       	brmi	.+46     	; 0x1c31e <__addsf3x+0x98>
   1c2f0:	91 50       	subi	r25, 0x01	; 1
   1c2f2:	a1 f0       	breq	.+40     	; 0x1c31c <__addsf3x+0x96>
   1c2f4:	ff 0f       	add	r31, r31
   1c2f6:	bb 1f       	adc	r27, r27
   1c2f8:	66 1f       	adc	r22, r22
   1c2fa:	77 1f       	adc	r23, r23
   1c2fc:	88 1f       	adc	r24, r24
   1c2fe:	c2 f7       	brpl	.-16     	; 0x1c2f0 <__addsf3x+0x6a>
   1c300:	0e c0       	rjmp	.+28     	; 0x1c31e <__addsf3x+0x98>
   1c302:	ba 0f       	add	r27, r26
   1c304:	62 1f       	adc	r22, r18
   1c306:	73 1f       	adc	r23, r19
   1c308:	84 1f       	adc	r24, r20
   1c30a:	48 f4       	brcc	.+18     	; 0x1c31e <__addsf3x+0x98>
   1c30c:	87 95       	ror	r24
   1c30e:	77 95       	ror	r23
   1c310:	67 95       	ror	r22
   1c312:	b7 95       	ror	r27
   1c314:	f7 95       	ror	r31
   1c316:	9e 3f       	cpi	r25, 0xFE	; 254
   1c318:	08 f0       	brcs	.+2      	; 0x1c31c <__addsf3x+0x96>
   1c31a:	b3 cf       	rjmp	.-154    	; 0x1c282 <__addsf3+0x1e>
   1c31c:	93 95       	inc	r25
   1c31e:	88 0f       	add	r24, r24
   1c320:	08 f0       	brcs	.+2      	; 0x1c324 <__addsf3x+0x9e>
   1c322:	99 27       	eor	r25, r25
   1c324:	ee 0f       	add	r30, r30
   1c326:	97 95       	ror	r25
   1c328:	87 95       	ror	r24
   1c32a:	08 95       	ret

0001c32c <__cmpsf2>:
   1c32c:	d9 d0       	rcall	.+434    	; 0x1c4e0 <__fp_cmp>
   1c32e:	08 f4       	brcc	.+2      	; 0x1c332 <__cmpsf2+0x6>
   1c330:	81 e0       	ldi	r24, 0x01	; 1
   1c332:	08 95       	ret

0001c334 <__divsf3>:
   1c334:	0c d0       	rcall	.+24     	; 0x1c34e <__divsf3x>
   1c336:	0f c1       	rjmp	.+542    	; 0x1c556 <__fp_round>
   1c338:	07 d1       	rcall	.+526    	; 0x1c548 <__fp_pscB>
   1c33a:	40 f0       	brcs	.+16     	; 0x1c34c <__divsf3+0x18>
   1c33c:	fe d0       	rcall	.+508    	; 0x1c53a <__fp_pscA>
   1c33e:	30 f0       	brcs	.+12     	; 0x1c34c <__divsf3+0x18>
   1c340:	21 f4       	brne	.+8      	; 0x1c34a <__divsf3+0x16>
   1c342:	5f 3f       	cpi	r21, 0xFF	; 255
   1c344:	19 f0       	breq	.+6      	; 0x1c34c <__divsf3+0x18>
   1c346:	f0 c0       	rjmp	.+480    	; 0x1c528 <__fp_inf>
   1c348:	51 11       	cpse	r21, r1
   1c34a:	39 c1       	rjmp	.+626    	; 0x1c5be <__fp_szero>
   1c34c:	f3 c0       	rjmp	.+486    	; 0x1c534 <__fp_nan>

0001c34e <__divsf3x>:
   1c34e:	14 d1       	rcall	.+552    	; 0x1c578 <__fp_split3>
   1c350:	98 f3       	brcs	.-26     	; 0x1c338 <__divsf3+0x4>

0001c352 <__divsf3_pse>:
   1c352:	99 23       	and	r25, r25
   1c354:	c9 f3       	breq	.-14     	; 0x1c348 <__divsf3+0x14>
   1c356:	55 23       	and	r21, r21
   1c358:	b1 f3       	breq	.-20     	; 0x1c346 <__divsf3+0x12>
   1c35a:	95 1b       	sub	r25, r21
   1c35c:	55 0b       	sbc	r21, r21
   1c35e:	bb 27       	eor	r27, r27
   1c360:	aa 27       	eor	r26, r26
   1c362:	62 17       	cp	r22, r18
   1c364:	73 07       	cpc	r23, r19
   1c366:	84 07       	cpc	r24, r20
   1c368:	38 f0       	brcs	.+14     	; 0x1c378 <__divsf3_pse+0x26>
   1c36a:	9f 5f       	subi	r25, 0xFF	; 255
   1c36c:	5f 4f       	sbci	r21, 0xFF	; 255
   1c36e:	22 0f       	add	r18, r18
   1c370:	33 1f       	adc	r19, r19
   1c372:	44 1f       	adc	r20, r20
   1c374:	aa 1f       	adc	r26, r26
   1c376:	a9 f3       	breq	.-22     	; 0x1c362 <__divsf3_pse+0x10>
   1c378:	33 d0       	rcall	.+102    	; 0x1c3e0 <__divsf3_pse+0x8e>
   1c37a:	0e 2e       	mov	r0, r30
   1c37c:	3a f0       	brmi	.+14     	; 0x1c38c <__divsf3_pse+0x3a>
   1c37e:	e0 e8       	ldi	r30, 0x80	; 128
   1c380:	30 d0       	rcall	.+96     	; 0x1c3e2 <__divsf3_pse+0x90>
   1c382:	91 50       	subi	r25, 0x01	; 1
   1c384:	50 40       	sbci	r21, 0x00	; 0
   1c386:	e6 95       	lsr	r30
   1c388:	00 1c       	adc	r0, r0
   1c38a:	ca f7       	brpl	.-14     	; 0x1c37e <__divsf3_pse+0x2c>
   1c38c:	29 d0       	rcall	.+82     	; 0x1c3e0 <__divsf3_pse+0x8e>
   1c38e:	fe 2f       	mov	r31, r30
   1c390:	27 d0       	rcall	.+78     	; 0x1c3e0 <__divsf3_pse+0x8e>
   1c392:	66 0f       	add	r22, r22
   1c394:	77 1f       	adc	r23, r23
   1c396:	88 1f       	adc	r24, r24
   1c398:	bb 1f       	adc	r27, r27
   1c39a:	26 17       	cp	r18, r22
   1c39c:	37 07       	cpc	r19, r23
   1c39e:	48 07       	cpc	r20, r24
   1c3a0:	ab 07       	cpc	r26, r27
   1c3a2:	b0 e8       	ldi	r27, 0x80	; 128
   1c3a4:	09 f0       	breq	.+2      	; 0x1c3a8 <__divsf3_pse+0x56>
   1c3a6:	bb 0b       	sbc	r27, r27
   1c3a8:	80 2d       	mov	r24, r0
   1c3aa:	bf 01       	movw	r22, r30
   1c3ac:	ff 27       	eor	r31, r31
   1c3ae:	93 58       	subi	r25, 0x83	; 131
   1c3b0:	5f 4f       	sbci	r21, 0xFF	; 255
   1c3b2:	2a f0       	brmi	.+10     	; 0x1c3be <__divsf3_pse+0x6c>
   1c3b4:	9e 3f       	cpi	r25, 0xFE	; 254
   1c3b6:	51 05       	cpc	r21, r1
   1c3b8:	68 f0       	brcs	.+26     	; 0x1c3d4 <__divsf3_pse+0x82>
   1c3ba:	b6 c0       	rjmp	.+364    	; 0x1c528 <__fp_inf>
   1c3bc:	00 c1       	rjmp	.+512    	; 0x1c5be <__fp_szero>
   1c3be:	5f 3f       	cpi	r21, 0xFF	; 255
   1c3c0:	ec f3       	brlt	.-6      	; 0x1c3bc <__divsf3_pse+0x6a>
   1c3c2:	98 3e       	cpi	r25, 0xE8	; 232
   1c3c4:	dc f3       	brlt	.-10     	; 0x1c3bc <__divsf3_pse+0x6a>
   1c3c6:	86 95       	lsr	r24
   1c3c8:	77 95       	ror	r23
   1c3ca:	67 95       	ror	r22
   1c3cc:	b7 95       	ror	r27
   1c3ce:	f7 95       	ror	r31
   1c3d0:	9f 5f       	subi	r25, 0xFF	; 255
   1c3d2:	c9 f7       	brne	.-14     	; 0x1c3c6 <__divsf3_pse+0x74>
   1c3d4:	88 0f       	add	r24, r24
   1c3d6:	91 1d       	adc	r25, r1
   1c3d8:	96 95       	lsr	r25
   1c3da:	87 95       	ror	r24
   1c3dc:	97 f9       	bld	r25, 7
   1c3de:	08 95       	ret
   1c3e0:	e1 e0       	ldi	r30, 0x01	; 1
   1c3e2:	66 0f       	add	r22, r22
   1c3e4:	77 1f       	adc	r23, r23
   1c3e6:	88 1f       	adc	r24, r24
   1c3e8:	bb 1f       	adc	r27, r27
   1c3ea:	62 17       	cp	r22, r18
   1c3ec:	73 07       	cpc	r23, r19
   1c3ee:	84 07       	cpc	r24, r20
   1c3f0:	ba 07       	cpc	r27, r26
   1c3f2:	20 f0       	brcs	.+8      	; 0x1c3fc <__divsf3_pse+0xaa>
   1c3f4:	62 1b       	sub	r22, r18
   1c3f6:	73 0b       	sbc	r23, r19
   1c3f8:	84 0b       	sbc	r24, r20
   1c3fa:	ba 0b       	sbc	r27, r26
   1c3fc:	ee 1f       	adc	r30, r30
   1c3fe:	88 f7       	brcc	.-30     	; 0x1c3e2 <__divsf3_pse+0x90>
   1c400:	e0 95       	com	r30
   1c402:	08 95       	ret

0001c404 <__fixsfsi>:
   1c404:	04 d0       	rcall	.+8      	; 0x1c40e <__fixunssfsi>
   1c406:	68 94       	set
   1c408:	b1 11       	cpse	r27, r1
   1c40a:	d9 c0       	rjmp	.+434    	; 0x1c5be <__fp_szero>
   1c40c:	08 95       	ret

0001c40e <__fixunssfsi>:
   1c40e:	bc d0       	rcall	.+376    	; 0x1c588 <__fp_splitA>
   1c410:	88 f0       	brcs	.+34     	; 0x1c434 <__fixunssfsi+0x26>
   1c412:	9f 57       	subi	r25, 0x7F	; 127
   1c414:	90 f0       	brcs	.+36     	; 0x1c43a <__fixunssfsi+0x2c>
   1c416:	b9 2f       	mov	r27, r25
   1c418:	99 27       	eor	r25, r25
   1c41a:	b7 51       	subi	r27, 0x17	; 23
   1c41c:	a0 f0       	brcs	.+40     	; 0x1c446 <__fixunssfsi+0x38>
   1c41e:	d1 f0       	breq	.+52     	; 0x1c454 <__fixunssfsi+0x46>
   1c420:	66 0f       	add	r22, r22
   1c422:	77 1f       	adc	r23, r23
   1c424:	88 1f       	adc	r24, r24
   1c426:	99 1f       	adc	r25, r25
   1c428:	1a f0       	brmi	.+6      	; 0x1c430 <__fixunssfsi+0x22>
   1c42a:	ba 95       	dec	r27
   1c42c:	c9 f7       	brne	.-14     	; 0x1c420 <__fixunssfsi+0x12>
   1c42e:	12 c0       	rjmp	.+36     	; 0x1c454 <__fixunssfsi+0x46>
   1c430:	b1 30       	cpi	r27, 0x01	; 1
   1c432:	81 f0       	breq	.+32     	; 0x1c454 <__fixunssfsi+0x46>
   1c434:	c3 d0       	rcall	.+390    	; 0x1c5bc <__fp_zero>
   1c436:	b1 e0       	ldi	r27, 0x01	; 1
   1c438:	08 95       	ret
   1c43a:	c0 c0       	rjmp	.+384    	; 0x1c5bc <__fp_zero>
   1c43c:	67 2f       	mov	r22, r23
   1c43e:	78 2f       	mov	r23, r24
   1c440:	88 27       	eor	r24, r24
   1c442:	b8 5f       	subi	r27, 0xF8	; 248
   1c444:	39 f0       	breq	.+14     	; 0x1c454 <__fixunssfsi+0x46>
   1c446:	b9 3f       	cpi	r27, 0xF9	; 249
   1c448:	cc f3       	brlt	.-14     	; 0x1c43c <__fixunssfsi+0x2e>
   1c44a:	86 95       	lsr	r24
   1c44c:	77 95       	ror	r23
   1c44e:	67 95       	ror	r22
   1c450:	b3 95       	inc	r27
   1c452:	d9 f7       	brne	.-10     	; 0x1c44a <__fixunssfsi+0x3c>
   1c454:	3e f4       	brtc	.+14     	; 0x1c464 <__fixunssfsi+0x56>
   1c456:	90 95       	com	r25
   1c458:	80 95       	com	r24
   1c45a:	70 95       	com	r23
   1c45c:	61 95       	neg	r22
   1c45e:	7f 4f       	sbci	r23, 0xFF	; 255
   1c460:	8f 4f       	sbci	r24, 0xFF	; 255
   1c462:	9f 4f       	sbci	r25, 0xFF	; 255
   1c464:	08 95       	ret

0001c466 <__floatunsisf>:
   1c466:	e8 94       	clt
   1c468:	09 c0       	rjmp	.+18     	; 0x1c47c <__floatsisf+0x12>

0001c46a <__floatsisf>:
   1c46a:	97 fb       	bst	r25, 7
   1c46c:	3e f4       	brtc	.+14     	; 0x1c47c <__floatsisf+0x12>
   1c46e:	90 95       	com	r25
   1c470:	80 95       	com	r24
   1c472:	70 95       	com	r23
   1c474:	61 95       	neg	r22
   1c476:	7f 4f       	sbci	r23, 0xFF	; 255
   1c478:	8f 4f       	sbci	r24, 0xFF	; 255
   1c47a:	9f 4f       	sbci	r25, 0xFF	; 255
   1c47c:	99 23       	and	r25, r25
   1c47e:	a9 f0       	breq	.+42     	; 0x1c4aa <__floatsisf+0x40>
   1c480:	f9 2f       	mov	r31, r25
   1c482:	96 e9       	ldi	r25, 0x96	; 150
   1c484:	bb 27       	eor	r27, r27
   1c486:	93 95       	inc	r25
   1c488:	f6 95       	lsr	r31
   1c48a:	87 95       	ror	r24
   1c48c:	77 95       	ror	r23
   1c48e:	67 95       	ror	r22
   1c490:	b7 95       	ror	r27
   1c492:	f1 11       	cpse	r31, r1
   1c494:	f8 cf       	rjmp	.-16     	; 0x1c486 <__floatsisf+0x1c>
   1c496:	fa f4       	brpl	.+62     	; 0x1c4d6 <__floatsisf+0x6c>
   1c498:	bb 0f       	add	r27, r27
   1c49a:	11 f4       	brne	.+4      	; 0x1c4a0 <__floatsisf+0x36>
   1c49c:	60 ff       	sbrs	r22, 0
   1c49e:	1b c0       	rjmp	.+54     	; 0x1c4d6 <__floatsisf+0x6c>
   1c4a0:	6f 5f       	subi	r22, 0xFF	; 255
   1c4a2:	7f 4f       	sbci	r23, 0xFF	; 255
   1c4a4:	8f 4f       	sbci	r24, 0xFF	; 255
   1c4a6:	9f 4f       	sbci	r25, 0xFF	; 255
   1c4a8:	16 c0       	rjmp	.+44     	; 0x1c4d6 <__floatsisf+0x6c>
   1c4aa:	88 23       	and	r24, r24
   1c4ac:	11 f0       	breq	.+4      	; 0x1c4b2 <__floatsisf+0x48>
   1c4ae:	96 e9       	ldi	r25, 0x96	; 150
   1c4b0:	11 c0       	rjmp	.+34     	; 0x1c4d4 <__floatsisf+0x6a>
   1c4b2:	77 23       	and	r23, r23
   1c4b4:	21 f0       	breq	.+8      	; 0x1c4be <__floatsisf+0x54>
   1c4b6:	9e e8       	ldi	r25, 0x8E	; 142
   1c4b8:	87 2f       	mov	r24, r23
   1c4ba:	76 2f       	mov	r23, r22
   1c4bc:	05 c0       	rjmp	.+10     	; 0x1c4c8 <__floatsisf+0x5e>
   1c4be:	66 23       	and	r22, r22
   1c4c0:	71 f0       	breq	.+28     	; 0x1c4de <__floatsisf+0x74>
   1c4c2:	96 e8       	ldi	r25, 0x86	; 134
   1c4c4:	86 2f       	mov	r24, r22
   1c4c6:	70 e0       	ldi	r23, 0x00	; 0
   1c4c8:	60 e0       	ldi	r22, 0x00	; 0
   1c4ca:	2a f0       	brmi	.+10     	; 0x1c4d6 <__floatsisf+0x6c>
   1c4cc:	9a 95       	dec	r25
   1c4ce:	66 0f       	add	r22, r22
   1c4d0:	77 1f       	adc	r23, r23
   1c4d2:	88 1f       	adc	r24, r24
   1c4d4:	da f7       	brpl	.-10     	; 0x1c4cc <__floatsisf+0x62>
   1c4d6:	88 0f       	add	r24, r24
   1c4d8:	96 95       	lsr	r25
   1c4da:	87 95       	ror	r24
   1c4dc:	97 f9       	bld	r25, 7
   1c4de:	08 95       	ret

0001c4e0 <__fp_cmp>:
   1c4e0:	99 0f       	add	r25, r25
   1c4e2:	00 08       	sbc	r0, r0
   1c4e4:	55 0f       	add	r21, r21
   1c4e6:	aa 0b       	sbc	r26, r26
   1c4e8:	e0 e8       	ldi	r30, 0x80	; 128
   1c4ea:	fe ef       	ldi	r31, 0xFE	; 254
   1c4ec:	16 16       	cp	r1, r22
   1c4ee:	17 06       	cpc	r1, r23
   1c4f0:	e8 07       	cpc	r30, r24
   1c4f2:	f9 07       	cpc	r31, r25
   1c4f4:	c0 f0       	brcs	.+48     	; 0x1c526 <__fp_cmp+0x46>
   1c4f6:	12 16       	cp	r1, r18
   1c4f8:	13 06       	cpc	r1, r19
   1c4fa:	e4 07       	cpc	r30, r20
   1c4fc:	f5 07       	cpc	r31, r21
   1c4fe:	98 f0       	brcs	.+38     	; 0x1c526 <__fp_cmp+0x46>
   1c500:	62 1b       	sub	r22, r18
   1c502:	73 0b       	sbc	r23, r19
   1c504:	84 0b       	sbc	r24, r20
   1c506:	95 0b       	sbc	r25, r21
   1c508:	39 f4       	brne	.+14     	; 0x1c518 <__fp_cmp+0x38>
   1c50a:	0a 26       	eor	r0, r26
   1c50c:	61 f0       	breq	.+24     	; 0x1c526 <__fp_cmp+0x46>
   1c50e:	23 2b       	or	r18, r19
   1c510:	24 2b       	or	r18, r20
   1c512:	25 2b       	or	r18, r21
   1c514:	21 f4       	brne	.+8      	; 0x1c51e <__fp_cmp+0x3e>
   1c516:	08 95       	ret
   1c518:	0a 26       	eor	r0, r26
   1c51a:	09 f4       	brne	.+2      	; 0x1c51e <__fp_cmp+0x3e>
   1c51c:	a1 40       	sbci	r26, 0x01	; 1
   1c51e:	a6 95       	lsr	r26
   1c520:	8f ef       	ldi	r24, 0xFF	; 255
   1c522:	81 1d       	adc	r24, r1
   1c524:	81 1d       	adc	r24, r1
   1c526:	08 95       	ret

0001c528 <__fp_inf>:
   1c528:	97 f9       	bld	r25, 7
   1c52a:	9f 67       	ori	r25, 0x7F	; 127
   1c52c:	80 e8       	ldi	r24, 0x80	; 128
   1c52e:	70 e0       	ldi	r23, 0x00	; 0
   1c530:	60 e0       	ldi	r22, 0x00	; 0
   1c532:	08 95       	ret

0001c534 <__fp_nan>:
   1c534:	9f ef       	ldi	r25, 0xFF	; 255
   1c536:	80 ec       	ldi	r24, 0xC0	; 192
   1c538:	08 95       	ret

0001c53a <__fp_pscA>:
   1c53a:	00 24       	eor	r0, r0
   1c53c:	0a 94       	dec	r0
   1c53e:	16 16       	cp	r1, r22
   1c540:	17 06       	cpc	r1, r23
   1c542:	18 06       	cpc	r1, r24
   1c544:	09 06       	cpc	r0, r25
   1c546:	08 95       	ret

0001c548 <__fp_pscB>:
   1c548:	00 24       	eor	r0, r0
   1c54a:	0a 94       	dec	r0
   1c54c:	12 16       	cp	r1, r18
   1c54e:	13 06       	cpc	r1, r19
   1c550:	14 06       	cpc	r1, r20
   1c552:	05 06       	cpc	r0, r21
   1c554:	08 95       	ret

0001c556 <__fp_round>:
   1c556:	09 2e       	mov	r0, r25
   1c558:	03 94       	inc	r0
   1c55a:	00 0c       	add	r0, r0
   1c55c:	11 f4       	brne	.+4      	; 0x1c562 <__fp_round+0xc>
   1c55e:	88 23       	and	r24, r24
   1c560:	52 f0       	brmi	.+20     	; 0x1c576 <__fp_round+0x20>
   1c562:	bb 0f       	add	r27, r27
   1c564:	40 f4       	brcc	.+16     	; 0x1c576 <__fp_round+0x20>
   1c566:	bf 2b       	or	r27, r31
   1c568:	11 f4       	brne	.+4      	; 0x1c56e <__fp_round+0x18>
   1c56a:	60 ff       	sbrs	r22, 0
   1c56c:	04 c0       	rjmp	.+8      	; 0x1c576 <__fp_round+0x20>
   1c56e:	6f 5f       	subi	r22, 0xFF	; 255
   1c570:	7f 4f       	sbci	r23, 0xFF	; 255
   1c572:	8f 4f       	sbci	r24, 0xFF	; 255
   1c574:	9f 4f       	sbci	r25, 0xFF	; 255
   1c576:	08 95       	ret

0001c578 <__fp_split3>:
   1c578:	57 fd       	sbrc	r21, 7
   1c57a:	90 58       	subi	r25, 0x80	; 128
   1c57c:	44 0f       	add	r20, r20
   1c57e:	55 1f       	adc	r21, r21
   1c580:	59 f0       	breq	.+22     	; 0x1c598 <__fp_splitA+0x10>
   1c582:	5f 3f       	cpi	r21, 0xFF	; 255
   1c584:	71 f0       	breq	.+28     	; 0x1c5a2 <__fp_splitA+0x1a>
   1c586:	47 95       	ror	r20

0001c588 <__fp_splitA>:
   1c588:	88 0f       	add	r24, r24
   1c58a:	97 fb       	bst	r25, 7
   1c58c:	99 1f       	adc	r25, r25
   1c58e:	61 f0       	breq	.+24     	; 0x1c5a8 <__fp_splitA+0x20>
   1c590:	9f 3f       	cpi	r25, 0xFF	; 255
   1c592:	79 f0       	breq	.+30     	; 0x1c5b2 <__fp_splitA+0x2a>
   1c594:	87 95       	ror	r24
   1c596:	08 95       	ret
   1c598:	12 16       	cp	r1, r18
   1c59a:	13 06       	cpc	r1, r19
   1c59c:	14 06       	cpc	r1, r20
   1c59e:	55 1f       	adc	r21, r21
   1c5a0:	f2 cf       	rjmp	.-28     	; 0x1c586 <__fp_split3+0xe>
   1c5a2:	46 95       	lsr	r20
   1c5a4:	f1 df       	rcall	.-30     	; 0x1c588 <__fp_splitA>
   1c5a6:	08 c0       	rjmp	.+16     	; 0x1c5b8 <__fp_splitA+0x30>
   1c5a8:	16 16       	cp	r1, r22
   1c5aa:	17 06       	cpc	r1, r23
   1c5ac:	18 06       	cpc	r1, r24
   1c5ae:	99 1f       	adc	r25, r25
   1c5b0:	f1 cf       	rjmp	.-30     	; 0x1c594 <__fp_splitA+0xc>
   1c5b2:	86 95       	lsr	r24
   1c5b4:	71 05       	cpc	r23, r1
   1c5b6:	61 05       	cpc	r22, r1
   1c5b8:	08 94       	sec
   1c5ba:	08 95       	ret

0001c5bc <__fp_zero>:
   1c5bc:	e8 94       	clt

0001c5be <__fp_szero>:
   1c5be:	bb 27       	eor	r27, r27
   1c5c0:	66 27       	eor	r22, r22
   1c5c2:	77 27       	eor	r23, r23
   1c5c4:	cb 01       	movw	r24, r22
   1c5c6:	97 f9       	bld	r25, 7
   1c5c8:	08 95       	ret

0001c5ca <__gesf2>:
   1c5ca:	8a df       	rcall	.-236    	; 0x1c4e0 <__fp_cmp>
   1c5cc:	08 f4       	brcc	.+2      	; 0x1c5d0 <__gesf2+0x6>
   1c5ce:	8f ef       	ldi	r24, 0xFF	; 255
   1c5d0:	08 95       	ret

0001c5d2 <__mulsf3>:
   1c5d2:	0b d0       	rcall	.+22     	; 0x1c5ea <__mulsf3x>
   1c5d4:	c0 cf       	rjmp	.-128    	; 0x1c556 <__fp_round>
   1c5d6:	b1 df       	rcall	.-158    	; 0x1c53a <__fp_pscA>
   1c5d8:	28 f0       	brcs	.+10     	; 0x1c5e4 <__mulsf3+0x12>
   1c5da:	b6 df       	rcall	.-148    	; 0x1c548 <__fp_pscB>
   1c5dc:	18 f0       	brcs	.+6      	; 0x1c5e4 <__mulsf3+0x12>
   1c5de:	95 23       	and	r25, r21
   1c5e0:	09 f0       	breq	.+2      	; 0x1c5e4 <__mulsf3+0x12>
   1c5e2:	a2 cf       	rjmp	.-188    	; 0x1c528 <__fp_inf>
   1c5e4:	a7 cf       	rjmp	.-178    	; 0x1c534 <__fp_nan>
   1c5e6:	11 24       	eor	r1, r1
   1c5e8:	ea cf       	rjmp	.-44     	; 0x1c5be <__fp_szero>

0001c5ea <__mulsf3x>:
   1c5ea:	c6 df       	rcall	.-116    	; 0x1c578 <__fp_split3>
   1c5ec:	a0 f3       	brcs	.-24     	; 0x1c5d6 <__mulsf3+0x4>

0001c5ee <__mulsf3_pse>:
   1c5ee:	95 9f       	mul	r25, r21
   1c5f0:	d1 f3       	breq	.-12     	; 0x1c5e6 <__mulsf3+0x14>
   1c5f2:	95 0f       	add	r25, r21
   1c5f4:	50 e0       	ldi	r21, 0x00	; 0
   1c5f6:	55 1f       	adc	r21, r21
   1c5f8:	62 9f       	mul	r22, r18
   1c5fa:	f0 01       	movw	r30, r0
   1c5fc:	72 9f       	mul	r23, r18
   1c5fe:	bb 27       	eor	r27, r27
   1c600:	f0 0d       	add	r31, r0
   1c602:	b1 1d       	adc	r27, r1
   1c604:	63 9f       	mul	r22, r19
   1c606:	aa 27       	eor	r26, r26
   1c608:	f0 0d       	add	r31, r0
   1c60a:	b1 1d       	adc	r27, r1
   1c60c:	aa 1f       	adc	r26, r26
   1c60e:	64 9f       	mul	r22, r20
   1c610:	66 27       	eor	r22, r22
   1c612:	b0 0d       	add	r27, r0
   1c614:	a1 1d       	adc	r26, r1
   1c616:	66 1f       	adc	r22, r22
   1c618:	82 9f       	mul	r24, r18
   1c61a:	22 27       	eor	r18, r18
   1c61c:	b0 0d       	add	r27, r0
   1c61e:	a1 1d       	adc	r26, r1
   1c620:	62 1f       	adc	r22, r18
   1c622:	73 9f       	mul	r23, r19
   1c624:	b0 0d       	add	r27, r0
   1c626:	a1 1d       	adc	r26, r1
   1c628:	62 1f       	adc	r22, r18
   1c62a:	83 9f       	mul	r24, r19
   1c62c:	a0 0d       	add	r26, r0
   1c62e:	61 1d       	adc	r22, r1
   1c630:	22 1f       	adc	r18, r18
   1c632:	74 9f       	mul	r23, r20
   1c634:	33 27       	eor	r19, r19
   1c636:	a0 0d       	add	r26, r0
   1c638:	61 1d       	adc	r22, r1
   1c63a:	23 1f       	adc	r18, r19
   1c63c:	84 9f       	mul	r24, r20
   1c63e:	60 0d       	add	r22, r0
   1c640:	21 1d       	adc	r18, r1
   1c642:	82 2f       	mov	r24, r18
   1c644:	76 2f       	mov	r23, r22
   1c646:	6a 2f       	mov	r22, r26
   1c648:	11 24       	eor	r1, r1
   1c64a:	9f 57       	subi	r25, 0x7F	; 127
   1c64c:	50 40       	sbci	r21, 0x00	; 0
   1c64e:	8a f0       	brmi	.+34     	; 0x1c672 <__mulsf3_pse+0x84>
   1c650:	e1 f0       	breq	.+56     	; 0x1c68a <__mulsf3_pse+0x9c>
   1c652:	88 23       	and	r24, r24
   1c654:	4a f0       	brmi	.+18     	; 0x1c668 <__mulsf3_pse+0x7a>
   1c656:	ee 0f       	add	r30, r30
   1c658:	ff 1f       	adc	r31, r31
   1c65a:	bb 1f       	adc	r27, r27
   1c65c:	66 1f       	adc	r22, r22
   1c65e:	77 1f       	adc	r23, r23
   1c660:	88 1f       	adc	r24, r24
   1c662:	91 50       	subi	r25, 0x01	; 1
   1c664:	50 40       	sbci	r21, 0x00	; 0
   1c666:	a9 f7       	brne	.-22     	; 0x1c652 <__mulsf3_pse+0x64>
   1c668:	9e 3f       	cpi	r25, 0xFE	; 254
   1c66a:	51 05       	cpc	r21, r1
   1c66c:	70 f0       	brcs	.+28     	; 0x1c68a <__mulsf3_pse+0x9c>
   1c66e:	5c cf       	rjmp	.-328    	; 0x1c528 <__fp_inf>
   1c670:	a6 cf       	rjmp	.-180    	; 0x1c5be <__fp_szero>
   1c672:	5f 3f       	cpi	r21, 0xFF	; 255
   1c674:	ec f3       	brlt	.-6      	; 0x1c670 <__mulsf3_pse+0x82>
   1c676:	98 3e       	cpi	r25, 0xE8	; 232
   1c678:	dc f3       	brlt	.-10     	; 0x1c670 <__mulsf3_pse+0x82>
   1c67a:	86 95       	lsr	r24
   1c67c:	77 95       	ror	r23
   1c67e:	67 95       	ror	r22
   1c680:	b7 95       	ror	r27
   1c682:	f7 95       	ror	r31
   1c684:	e7 95       	ror	r30
   1c686:	9f 5f       	subi	r25, 0xFF	; 255
   1c688:	c1 f7       	brne	.-16     	; 0x1c67a <__mulsf3_pse+0x8c>
   1c68a:	fe 2b       	or	r31, r30
   1c68c:	88 0f       	add	r24, r24
   1c68e:	91 1d       	adc	r25, r1
   1c690:	96 95       	lsr	r25
   1c692:	87 95       	ror	r24
   1c694:	97 f9       	bld	r25, 7
   1c696:	08 95       	ret

0001c698 <round>:
   1c698:	77 df       	rcall	.-274    	; 0x1c588 <__fp_splitA>
   1c69a:	e0 f0       	brcs	.+56     	; 0x1c6d4 <round+0x3c>
   1c69c:	9e 37       	cpi	r25, 0x7E	; 126
   1c69e:	d8 f0       	brcs	.+54     	; 0x1c6d6 <round+0x3e>
   1c6a0:	96 39       	cpi	r25, 0x96	; 150
   1c6a2:	b8 f4       	brcc	.+46     	; 0x1c6d2 <round+0x3a>
   1c6a4:	9e 38       	cpi	r25, 0x8E	; 142
   1c6a6:	48 f4       	brcc	.+18     	; 0x1c6ba <round+0x22>
   1c6a8:	67 2f       	mov	r22, r23
   1c6aa:	78 2f       	mov	r23, r24
   1c6ac:	88 27       	eor	r24, r24
   1c6ae:	98 5f       	subi	r25, 0xF8	; 248
   1c6b0:	f9 cf       	rjmp	.-14     	; 0x1c6a4 <round+0xc>
   1c6b2:	86 95       	lsr	r24
   1c6b4:	77 95       	ror	r23
   1c6b6:	67 95       	ror	r22
   1c6b8:	93 95       	inc	r25
   1c6ba:	95 39       	cpi	r25, 0x95	; 149
   1c6bc:	d0 f3       	brcs	.-12     	; 0x1c6b2 <round+0x1a>
   1c6be:	b6 2f       	mov	r27, r22
   1c6c0:	b1 70       	andi	r27, 0x01	; 1
   1c6c2:	6b 0f       	add	r22, r27
   1c6c4:	71 1d       	adc	r23, r1
   1c6c6:	81 1d       	adc	r24, r1
   1c6c8:	20 f4       	brcc	.+8      	; 0x1c6d2 <round+0x3a>
   1c6ca:	87 95       	ror	r24
   1c6cc:	77 95       	ror	r23
   1c6ce:	67 95       	ror	r22
   1c6d0:	93 95       	inc	r25
   1c6d2:	02 c0       	rjmp	.+4      	; 0x1c6d8 <__fp_mintl>
   1c6d4:	1c c0       	rjmp	.+56     	; 0x1c70e <__fp_mpack>
   1c6d6:	73 cf       	rjmp	.-282    	; 0x1c5be <__fp_szero>

0001c6d8 <__fp_mintl>:
   1c6d8:	88 23       	and	r24, r24
   1c6da:	71 f4       	brne	.+28     	; 0x1c6f8 <__fp_mintl+0x20>
   1c6dc:	77 23       	and	r23, r23
   1c6de:	21 f0       	breq	.+8      	; 0x1c6e8 <__fp_mintl+0x10>
   1c6e0:	98 50       	subi	r25, 0x08	; 8
   1c6e2:	87 2b       	or	r24, r23
   1c6e4:	76 2f       	mov	r23, r22
   1c6e6:	07 c0       	rjmp	.+14     	; 0x1c6f6 <__fp_mintl+0x1e>
   1c6e8:	66 23       	and	r22, r22
   1c6ea:	11 f4       	brne	.+4      	; 0x1c6f0 <__fp_mintl+0x18>
   1c6ec:	99 27       	eor	r25, r25
   1c6ee:	0d c0       	rjmp	.+26     	; 0x1c70a <__fp_mintl+0x32>
   1c6f0:	90 51       	subi	r25, 0x10	; 16
   1c6f2:	86 2b       	or	r24, r22
   1c6f4:	70 e0       	ldi	r23, 0x00	; 0
   1c6f6:	60 e0       	ldi	r22, 0x00	; 0
   1c6f8:	2a f0       	brmi	.+10     	; 0x1c704 <__fp_mintl+0x2c>
   1c6fa:	9a 95       	dec	r25
   1c6fc:	66 0f       	add	r22, r22
   1c6fe:	77 1f       	adc	r23, r23
   1c700:	88 1f       	adc	r24, r24
   1c702:	da f7       	brpl	.-10     	; 0x1c6fa <__fp_mintl+0x22>
   1c704:	88 0f       	add	r24, r24
   1c706:	96 95       	lsr	r25
   1c708:	87 95       	ror	r24
   1c70a:	97 f9       	bld	r25, 7
   1c70c:	08 95       	ret

0001c70e <__fp_mpack>:
   1c70e:	9f 3f       	cpi	r25, 0xFF	; 255
   1c710:	31 f0       	breq	.+12     	; 0x1c71e <__fp_mpack_finite+0xc>

0001c712 <__fp_mpack_finite>:
   1c712:	91 50       	subi	r25, 0x01	; 1
   1c714:	20 f4       	brcc	.+8      	; 0x1c71e <__fp_mpack_finite+0xc>
   1c716:	87 95       	ror	r24
   1c718:	77 95       	ror	r23
   1c71a:	67 95       	ror	r22
   1c71c:	b7 95       	ror	r27
   1c71e:	88 0f       	add	r24, r24
   1c720:	91 1d       	adc	r25, r1
   1c722:	96 95       	lsr	r25
   1c724:	87 95       	ror	r24
   1c726:	97 f9       	bld	r25, 7
   1c728:	08 95       	ret

0001c72a <calloc>:
   1c72a:	0f 93       	push	r16
   1c72c:	1f 93       	push	r17
   1c72e:	cf 93       	push	r28
   1c730:	df 93       	push	r29
   1c732:	86 9f       	mul	r24, r22
   1c734:	80 01       	movw	r16, r0
   1c736:	87 9f       	mul	r24, r23
   1c738:	10 0d       	add	r17, r0
   1c73a:	96 9f       	mul	r25, r22
   1c73c:	10 0d       	add	r17, r0
   1c73e:	11 24       	eor	r1, r1
   1c740:	c8 01       	movw	r24, r16
   1c742:	0d d0       	rcall	.+26     	; 0x1c75e <malloc>
   1c744:	ec 01       	movw	r28, r24
   1c746:	00 97       	sbiw	r24, 0x00	; 0
   1c748:	21 f0       	breq	.+8      	; 0x1c752 <calloc+0x28>
   1c74a:	a8 01       	movw	r20, r16
   1c74c:	60 e0       	ldi	r22, 0x00	; 0
   1c74e:	70 e0       	ldi	r23, 0x00	; 0
   1c750:	27 d1       	rcall	.+590    	; 0x1c9a0 <memset>
   1c752:	ce 01       	movw	r24, r28
   1c754:	df 91       	pop	r29
   1c756:	cf 91       	pop	r28
   1c758:	1f 91       	pop	r17
   1c75a:	0f 91       	pop	r16
   1c75c:	08 95       	ret

0001c75e <malloc>:
   1c75e:	0f 93       	push	r16
   1c760:	1f 93       	push	r17
   1c762:	cf 93       	push	r28
   1c764:	df 93       	push	r29
   1c766:	82 30       	cpi	r24, 0x02	; 2
   1c768:	91 05       	cpc	r25, r1
   1c76a:	10 f4       	brcc	.+4      	; 0x1c770 <malloc+0x12>
   1c76c:	82 e0       	ldi	r24, 0x02	; 2
   1c76e:	90 e0       	ldi	r25, 0x00	; 0
   1c770:	e0 91 c8 21 	lds	r30, 0x21C8	; 0x8021c8 <__flp>
   1c774:	f0 91 c9 21 	lds	r31, 0x21C9	; 0x8021c9 <__flp+0x1>
   1c778:	20 e0       	ldi	r18, 0x00	; 0
   1c77a:	30 e0       	ldi	r19, 0x00	; 0
   1c77c:	a0 e0       	ldi	r26, 0x00	; 0
   1c77e:	b0 e0       	ldi	r27, 0x00	; 0
   1c780:	30 97       	sbiw	r30, 0x00	; 0
   1c782:	19 f1       	breq	.+70     	; 0x1c7ca <malloc+0x6c>
   1c784:	40 81       	ld	r20, Z
   1c786:	51 81       	ldd	r21, Z+1	; 0x01
   1c788:	02 81       	ldd	r16, Z+2	; 0x02
   1c78a:	13 81       	ldd	r17, Z+3	; 0x03
   1c78c:	48 17       	cp	r20, r24
   1c78e:	59 07       	cpc	r21, r25
   1c790:	c8 f0       	brcs	.+50     	; 0x1c7c4 <malloc+0x66>
   1c792:	84 17       	cp	r24, r20
   1c794:	95 07       	cpc	r25, r21
   1c796:	69 f4       	brne	.+26     	; 0x1c7b2 <malloc+0x54>
   1c798:	10 97       	sbiw	r26, 0x00	; 0
   1c79a:	31 f0       	breq	.+12     	; 0x1c7a8 <malloc+0x4a>
   1c79c:	12 96       	adiw	r26, 0x02	; 2
   1c79e:	0c 93       	st	X, r16
   1c7a0:	12 97       	sbiw	r26, 0x02	; 2
   1c7a2:	13 96       	adiw	r26, 0x03	; 3
   1c7a4:	1c 93       	st	X, r17
   1c7a6:	27 c0       	rjmp	.+78     	; 0x1c7f6 <malloc+0x98>
   1c7a8:	00 93 c8 21 	sts	0x21C8, r16	; 0x8021c8 <__flp>
   1c7ac:	10 93 c9 21 	sts	0x21C9, r17	; 0x8021c9 <__flp+0x1>
   1c7b0:	22 c0       	rjmp	.+68     	; 0x1c7f6 <malloc+0x98>
   1c7b2:	21 15       	cp	r18, r1
   1c7b4:	31 05       	cpc	r19, r1
   1c7b6:	19 f0       	breq	.+6      	; 0x1c7be <malloc+0x60>
   1c7b8:	42 17       	cp	r20, r18
   1c7ba:	53 07       	cpc	r21, r19
   1c7bc:	18 f4       	brcc	.+6      	; 0x1c7c4 <malloc+0x66>
   1c7be:	9a 01       	movw	r18, r20
   1c7c0:	bd 01       	movw	r22, r26
   1c7c2:	ef 01       	movw	r28, r30
   1c7c4:	df 01       	movw	r26, r30
   1c7c6:	f8 01       	movw	r30, r16
   1c7c8:	db cf       	rjmp	.-74     	; 0x1c780 <malloc+0x22>
   1c7ca:	21 15       	cp	r18, r1
   1c7cc:	31 05       	cpc	r19, r1
   1c7ce:	f9 f0       	breq	.+62     	; 0x1c80e <malloc+0xb0>
   1c7d0:	28 1b       	sub	r18, r24
   1c7d2:	39 0b       	sbc	r19, r25
   1c7d4:	24 30       	cpi	r18, 0x04	; 4
   1c7d6:	31 05       	cpc	r19, r1
   1c7d8:	80 f4       	brcc	.+32     	; 0x1c7fa <malloc+0x9c>
   1c7da:	8a 81       	ldd	r24, Y+2	; 0x02
   1c7dc:	9b 81       	ldd	r25, Y+3	; 0x03
   1c7de:	61 15       	cp	r22, r1
   1c7e0:	71 05       	cpc	r23, r1
   1c7e2:	21 f0       	breq	.+8      	; 0x1c7ec <malloc+0x8e>
   1c7e4:	fb 01       	movw	r30, r22
   1c7e6:	93 83       	std	Z+3, r25	; 0x03
   1c7e8:	82 83       	std	Z+2, r24	; 0x02
   1c7ea:	04 c0       	rjmp	.+8      	; 0x1c7f4 <malloc+0x96>
   1c7ec:	90 93 c9 21 	sts	0x21C9, r25	; 0x8021c9 <__flp+0x1>
   1c7f0:	80 93 c8 21 	sts	0x21C8, r24	; 0x8021c8 <__flp>
   1c7f4:	fe 01       	movw	r30, r28
   1c7f6:	32 96       	adiw	r30, 0x02	; 2
   1c7f8:	44 c0       	rjmp	.+136    	; 0x1c882 <malloc+0x124>
   1c7fa:	fe 01       	movw	r30, r28
   1c7fc:	e2 0f       	add	r30, r18
   1c7fe:	f3 1f       	adc	r31, r19
   1c800:	81 93       	st	Z+, r24
   1c802:	91 93       	st	Z+, r25
   1c804:	22 50       	subi	r18, 0x02	; 2
   1c806:	31 09       	sbc	r19, r1
   1c808:	39 83       	std	Y+1, r19	; 0x01
   1c80a:	28 83       	st	Y, r18
   1c80c:	3a c0       	rjmp	.+116    	; 0x1c882 <malloc+0x124>
   1c80e:	20 91 c6 21 	lds	r18, 0x21C6	; 0x8021c6 <__brkval>
   1c812:	30 91 c7 21 	lds	r19, 0x21C7	; 0x8021c7 <__brkval+0x1>
   1c816:	23 2b       	or	r18, r19
   1c818:	41 f4       	brne	.+16     	; 0x1c82a <malloc+0xcc>
   1c81a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
   1c81e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
   1c822:	30 93 c7 21 	sts	0x21C7, r19	; 0x8021c7 <__brkval+0x1>
   1c826:	20 93 c6 21 	sts	0x21C6, r18	; 0x8021c6 <__brkval>
   1c82a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
   1c82e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
   1c832:	21 15       	cp	r18, r1
   1c834:	31 05       	cpc	r19, r1
   1c836:	41 f4       	brne	.+16     	; 0x1c848 <malloc+0xea>
   1c838:	2d b7       	in	r18, 0x3d	; 61
   1c83a:	3e b7       	in	r19, 0x3e	; 62
   1c83c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
   1c840:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
   1c844:	24 1b       	sub	r18, r20
   1c846:	35 0b       	sbc	r19, r21
   1c848:	e0 91 c6 21 	lds	r30, 0x21C6	; 0x8021c6 <__brkval>
   1c84c:	f0 91 c7 21 	lds	r31, 0x21C7	; 0x8021c7 <__brkval+0x1>
   1c850:	e2 17       	cp	r30, r18
   1c852:	f3 07       	cpc	r31, r19
   1c854:	a0 f4       	brcc	.+40     	; 0x1c87e <malloc+0x120>
   1c856:	2e 1b       	sub	r18, r30
   1c858:	3f 0b       	sbc	r19, r31
   1c85a:	28 17       	cp	r18, r24
   1c85c:	39 07       	cpc	r19, r25
   1c85e:	78 f0       	brcs	.+30     	; 0x1c87e <malloc+0x120>
   1c860:	ac 01       	movw	r20, r24
   1c862:	4e 5f       	subi	r20, 0xFE	; 254
   1c864:	5f 4f       	sbci	r21, 0xFF	; 255
   1c866:	24 17       	cp	r18, r20
   1c868:	35 07       	cpc	r19, r21
   1c86a:	48 f0       	brcs	.+18     	; 0x1c87e <malloc+0x120>
   1c86c:	4e 0f       	add	r20, r30
   1c86e:	5f 1f       	adc	r21, r31
   1c870:	50 93 c7 21 	sts	0x21C7, r21	; 0x8021c7 <__brkval+0x1>
   1c874:	40 93 c6 21 	sts	0x21C6, r20	; 0x8021c6 <__brkval>
   1c878:	81 93       	st	Z+, r24
   1c87a:	91 93       	st	Z+, r25
   1c87c:	02 c0       	rjmp	.+4      	; 0x1c882 <malloc+0x124>
   1c87e:	e0 e0       	ldi	r30, 0x00	; 0
   1c880:	f0 e0       	ldi	r31, 0x00	; 0
   1c882:	cf 01       	movw	r24, r30
   1c884:	df 91       	pop	r29
   1c886:	cf 91       	pop	r28
   1c888:	1f 91       	pop	r17
   1c88a:	0f 91       	pop	r16
   1c88c:	08 95       	ret

0001c88e <free>:
   1c88e:	cf 93       	push	r28
   1c890:	df 93       	push	r29
   1c892:	00 97       	sbiw	r24, 0x00	; 0
   1c894:	09 f4       	brne	.+2      	; 0x1c898 <free+0xa>
   1c896:	81 c0       	rjmp	.+258    	; 0x1c99a <free+0x10c>
   1c898:	fc 01       	movw	r30, r24
   1c89a:	32 97       	sbiw	r30, 0x02	; 2
   1c89c:	13 82       	std	Z+3, r1	; 0x03
   1c89e:	12 82       	std	Z+2, r1	; 0x02
   1c8a0:	a0 91 c8 21 	lds	r26, 0x21C8	; 0x8021c8 <__flp>
   1c8a4:	b0 91 c9 21 	lds	r27, 0x21C9	; 0x8021c9 <__flp+0x1>
   1c8a8:	10 97       	sbiw	r26, 0x00	; 0
   1c8aa:	81 f4       	brne	.+32     	; 0x1c8cc <free+0x3e>
   1c8ac:	20 81       	ld	r18, Z
   1c8ae:	31 81       	ldd	r19, Z+1	; 0x01
   1c8b0:	82 0f       	add	r24, r18
   1c8b2:	93 1f       	adc	r25, r19
   1c8b4:	20 91 c6 21 	lds	r18, 0x21C6	; 0x8021c6 <__brkval>
   1c8b8:	30 91 c7 21 	lds	r19, 0x21C7	; 0x8021c7 <__brkval+0x1>
   1c8bc:	28 17       	cp	r18, r24
   1c8be:	39 07       	cpc	r19, r25
   1c8c0:	51 f5       	brne	.+84     	; 0x1c916 <free+0x88>
   1c8c2:	f0 93 c7 21 	sts	0x21C7, r31	; 0x8021c7 <__brkval+0x1>
   1c8c6:	e0 93 c6 21 	sts	0x21C6, r30	; 0x8021c6 <__brkval>
   1c8ca:	67 c0       	rjmp	.+206    	; 0x1c99a <free+0x10c>
   1c8cc:	ed 01       	movw	r28, r26
   1c8ce:	20 e0       	ldi	r18, 0x00	; 0
   1c8d0:	30 e0       	ldi	r19, 0x00	; 0
   1c8d2:	ce 17       	cp	r28, r30
   1c8d4:	df 07       	cpc	r29, r31
   1c8d6:	40 f4       	brcc	.+16     	; 0x1c8e8 <free+0x5a>
   1c8d8:	4a 81       	ldd	r20, Y+2	; 0x02
   1c8da:	5b 81       	ldd	r21, Y+3	; 0x03
   1c8dc:	9e 01       	movw	r18, r28
   1c8de:	41 15       	cp	r20, r1
   1c8e0:	51 05       	cpc	r21, r1
   1c8e2:	f1 f0       	breq	.+60     	; 0x1c920 <free+0x92>
   1c8e4:	ea 01       	movw	r28, r20
   1c8e6:	f5 cf       	rjmp	.-22     	; 0x1c8d2 <free+0x44>
   1c8e8:	d3 83       	std	Z+3, r29	; 0x03
   1c8ea:	c2 83       	std	Z+2, r28	; 0x02
   1c8ec:	40 81       	ld	r20, Z
   1c8ee:	51 81       	ldd	r21, Z+1	; 0x01
   1c8f0:	84 0f       	add	r24, r20
   1c8f2:	95 1f       	adc	r25, r21
   1c8f4:	c8 17       	cp	r28, r24
   1c8f6:	d9 07       	cpc	r29, r25
   1c8f8:	59 f4       	brne	.+22     	; 0x1c910 <free+0x82>
   1c8fa:	88 81       	ld	r24, Y
   1c8fc:	99 81       	ldd	r25, Y+1	; 0x01
   1c8fe:	84 0f       	add	r24, r20
   1c900:	95 1f       	adc	r25, r21
   1c902:	02 96       	adiw	r24, 0x02	; 2
   1c904:	91 83       	std	Z+1, r25	; 0x01
   1c906:	80 83       	st	Z, r24
   1c908:	8a 81       	ldd	r24, Y+2	; 0x02
   1c90a:	9b 81       	ldd	r25, Y+3	; 0x03
   1c90c:	93 83       	std	Z+3, r25	; 0x03
   1c90e:	82 83       	std	Z+2, r24	; 0x02
   1c910:	21 15       	cp	r18, r1
   1c912:	31 05       	cpc	r19, r1
   1c914:	29 f4       	brne	.+10     	; 0x1c920 <free+0x92>
   1c916:	f0 93 c9 21 	sts	0x21C9, r31	; 0x8021c9 <__flp+0x1>
   1c91a:	e0 93 c8 21 	sts	0x21C8, r30	; 0x8021c8 <__flp>
   1c91e:	3d c0       	rjmp	.+122    	; 0x1c99a <free+0x10c>
   1c920:	e9 01       	movw	r28, r18
   1c922:	fb 83       	std	Y+3, r31	; 0x03
   1c924:	ea 83       	std	Y+2, r30	; 0x02
   1c926:	49 91       	ld	r20, Y+
   1c928:	59 91       	ld	r21, Y+
   1c92a:	c4 0f       	add	r28, r20
   1c92c:	d5 1f       	adc	r29, r21
   1c92e:	ec 17       	cp	r30, r28
   1c930:	fd 07       	cpc	r31, r29
   1c932:	61 f4       	brne	.+24     	; 0x1c94c <free+0xbe>
   1c934:	80 81       	ld	r24, Z
   1c936:	91 81       	ldd	r25, Z+1	; 0x01
   1c938:	84 0f       	add	r24, r20
   1c93a:	95 1f       	adc	r25, r21
   1c93c:	02 96       	adiw	r24, 0x02	; 2
   1c93e:	e9 01       	movw	r28, r18
   1c940:	99 83       	std	Y+1, r25	; 0x01
   1c942:	88 83       	st	Y, r24
   1c944:	82 81       	ldd	r24, Z+2	; 0x02
   1c946:	93 81       	ldd	r25, Z+3	; 0x03
   1c948:	9b 83       	std	Y+3, r25	; 0x03
   1c94a:	8a 83       	std	Y+2, r24	; 0x02
   1c94c:	e0 e0       	ldi	r30, 0x00	; 0
   1c94e:	f0 e0       	ldi	r31, 0x00	; 0
   1c950:	12 96       	adiw	r26, 0x02	; 2
   1c952:	8d 91       	ld	r24, X+
   1c954:	9c 91       	ld	r25, X
   1c956:	13 97       	sbiw	r26, 0x03	; 3
   1c958:	00 97       	sbiw	r24, 0x00	; 0
   1c95a:	19 f0       	breq	.+6      	; 0x1c962 <free+0xd4>
   1c95c:	fd 01       	movw	r30, r26
   1c95e:	dc 01       	movw	r26, r24
   1c960:	f7 cf       	rjmp	.-18     	; 0x1c950 <free+0xc2>
   1c962:	8d 91       	ld	r24, X+
   1c964:	9c 91       	ld	r25, X
   1c966:	11 97       	sbiw	r26, 0x01	; 1
   1c968:	9d 01       	movw	r18, r26
   1c96a:	2e 5f       	subi	r18, 0xFE	; 254
   1c96c:	3f 4f       	sbci	r19, 0xFF	; 255
   1c96e:	82 0f       	add	r24, r18
   1c970:	93 1f       	adc	r25, r19
   1c972:	20 91 c6 21 	lds	r18, 0x21C6	; 0x8021c6 <__brkval>
   1c976:	30 91 c7 21 	lds	r19, 0x21C7	; 0x8021c7 <__brkval+0x1>
   1c97a:	28 17       	cp	r18, r24
   1c97c:	39 07       	cpc	r19, r25
   1c97e:	69 f4       	brne	.+26     	; 0x1c99a <free+0x10c>
   1c980:	30 97       	sbiw	r30, 0x00	; 0
   1c982:	29 f4       	brne	.+10     	; 0x1c98e <free+0x100>
   1c984:	10 92 c9 21 	sts	0x21C9, r1	; 0x8021c9 <__flp+0x1>
   1c988:	10 92 c8 21 	sts	0x21C8, r1	; 0x8021c8 <__flp>
   1c98c:	02 c0       	rjmp	.+4      	; 0x1c992 <free+0x104>
   1c98e:	13 82       	std	Z+3, r1	; 0x03
   1c990:	12 82       	std	Z+2, r1	; 0x02
   1c992:	b0 93 c7 21 	sts	0x21C7, r27	; 0x8021c7 <__brkval+0x1>
   1c996:	a0 93 c6 21 	sts	0x21C6, r26	; 0x8021c6 <__brkval>
   1c99a:	df 91       	pop	r29
   1c99c:	cf 91       	pop	r28
   1c99e:	08 95       	ret

0001c9a0 <memset>:
   1c9a0:	dc 01       	movw	r26, r24
   1c9a2:	01 c0       	rjmp	.+2      	; 0x1c9a6 <memset+0x6>
   1c9a4:	6d 93       	st	X+, r22
   1c9a6:	41 50       	subi	r20, 0x01	; 1
   1c9a8:	50 40       	sbci	r21, 0x00	; 0
   1c9aa:	e0 f7       	brcc	.-8      	; 0x1c9a4 <memset+0x4>
   1c9ac:	08 95       	ret

0001c9ae <_exit>:
   1c9ae:	f8 94       	cli

0001c9b0 <__stop_program>:
   1c9b0:	ff cf       	rjmp	.-2      	; 0x1c9b0 <__stop_program>
