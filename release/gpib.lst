
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000016a8  00800100  0001ddb8  0001de4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001ddb8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007d3  008017a8  008017a8  0001f4f4  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001f4f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001f508  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000015b0  00000000  00000000  0001f548  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00026a5a  00000000  00000000  00020af8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005d55  00000000  00000000  00047552  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00011628  00000000  00000000  0004d2a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00005db8  00000000  00000000  0005e8d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000043c5  00000000  00000000  00064688  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00025ece  00000000  00000000  00068a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001558  00000000  00000000  0008e91b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 93 24 	jmp	0x4926	; 0x4926 <__ctors_end>
       4:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
       8:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
       c:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      10:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      14:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      18:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      1c:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      20:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      24:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      28:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      2c:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      30:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      34:	0c 94 78 32 	jmp	0x64f0	; 0x64f0 <__vector_13>
      38:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      3c:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      40:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      44:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      48:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      4c:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      50:	0c 94 b3 2b 	jmp	0x5766	; 0x5766 <__vector_20>
      54:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      58:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      5c:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      60:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      64:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      68:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      6c:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      70:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      74:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      78:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      7c:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      80:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      84:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      88:	0c 94 b2 24 	jmp	0x4964	; 0x4964 <__bad_interrupt>
      8c:	1f 42       	sbci	r17, 0x2F	; 47
      8e:	7a 43       	sbci	r23, 0x3A	; 58
      90:	4f 42       	sbci	r20, 0x2F	; 47
      92:	53 43       	sbci	r21, 0x33	; 51
      94:	53 43       	sbci	r21, 0x33	; 51
      96:	7a 43       	sbci	r23, 0x3A	; 58
      98:	7a 43       	sbci	r23, 0x3A	; 58
      9a:	7a 43       	sbci	r23, 0x3A	; 58
      9c:	7a 43       	sbci	r23, 0x3A	; 58
      9e:	7a 43       	sbci	r23, 0x3A	; 58
      a0:	7a 43       	sbci	r23, 0x3A	; 58
      a2:	7a 43       	sbci	r23, 0x3A	; 58
      a4:	7a 43       	sbci	r23, 0x3A	; 58
      a6:	1f 42       	sbci	r17, 0x2F	; 47
      a8:	19 42       	sbci	r17, 0x29	; 41
      aa:	7a 43       	sbci	r23, 0x3A	; 58
      ac:	7a 43       	sbci	r23, 0x3A	; 58
      ae:	7a 43       	sbci	r23, 0x3A	; 58
      b0:	7a 43       	sbci	r23, 0x3A	; 58
      b2:	49 42       	sbci	r20, 0x29	; 41
      b4:	7a 43       	sbci	r23, 0x3A	; 58
      b6:	7a 43       	sbci	r23, 0x3A	; 58
      b8:	1f 42       	sbci	r17, 0x2F	; 47
      ba:	7a 43       	sbci	r23, 0x3A	; 58
      bc:	7a 43       	sbci	r23, 0x3A	; 58
      be:	7a 43       	sbci	r23, 0x3A	; 58
      c0:	7a 43       	sbci	r23, 0x3A	; 58
      c2:	7a 43       	sbci	r23, 0x3A	; 58
      c4:	7a 43       	sbci	r23, 0x3A	; 58
      c6:	7a 43       	sbci	r23, 0x3A	; 58
      c8:	7a 43       	sbci	r23, 0x3A	; 58
      ca:	7a 43       	sbci	r23, 0x3A	; 58
      cc:	1f 42       	sbci	r17, 0x2F	; 47
      ce:	75 43       	sbci	r23, 0x35	; 53
      d0:	4f 42       	sbci	r20, 0x2F	; 47
      d2:	53 43       	sbci	r21, 0x33	; 51
      d4:	53 43       	sbci	r21, 0x33	; 51
      d6:	7a 43       	sbci	r23, 0x3A	; 58
      d8:	7a 43       	sbci	r23, 0x3A	; 58
      da:	7a 43       	sbci	r23, 0x3A	; 58
      dc:	7a 43       	sbci	r23, 0x3A	; 58
      de:	7a 43       	sbci	r23, 0x3A	; 58
      e0:	7a 43       	sbci	r23, 0x3A	; 58
      e2:	7a 43       	sbci	r23, 0x3A	; 58
      e4:	7a 43       	sbci	r23, 0x3A	; 58
      e6:	1f 42       	sbci	r17, 0x2F	; 47
      e8:	19 42       	sbci	r17, 0x29	; 41
      ea:	7a 43       	sbci	r23, 0x3A	; 58
      ec:	7a 43       	sbci	r23, 0x3A	; 58
      ee:	70 43       	sbci	r23, 0x30	; 48
      f0:	7a 43       	sbci	r23, 0x3A	; 58
      f2:	49 42       	sbci	r20, 0x29	; 41
      f4:	7a 43       	sbci	r23, 0x3A	; 58
      f6:	7a 43       	sbci	r23, 0x3A	; 58
      f8:	1f 42       	sbci	r17, 0x2F	; 47
      fa:	9c 43       	sbci	r25, 0x3C	; 60
      fc:	83 44       	sbci	r24, 0x43	; 67
      fe:	92 43       	sbci	r25, 0x32	; 50
     100:	f0 43       	sbci	r31, 0x30	; 48
     102:	d7 43       	sbci	r29, 0x37	; 55
     104:	83 44       	sbci	r24, 0x43	; 67
     106:	83 44       	sbci	r24, 0x43	; 67
     108:	83 44       	sbci	r24, 0x43	; 67
     10a:	83 44       	sbci	r24, 0x43	; 67
     10c:	83 44       	sbci	r24, 0x43	; 67
     10e:	83 44       	sbci	r24, 0x43	; 67
     110:	83 44       	sbci	r24, 0x43	; 67
     112:	83 44       	sbci	r24, 0x43	; 67
     114:	a6 43       	sbci	r26, 0x36	; 54
     116:	ba 43       	sbci	r27, 0x3A	; 58
     118:	83 44       	sbci	r24, 0x43	; 67
     11a:	83 44       	sbci	r24, 0x43	; 67
     11c:	83 44       	sbci	r24, 0x43	; 67
     11e:	83 44       	sbci	r24, 0x43	; 67
     120:	8e 43       	sbci	r24, 0x3E	; 62
     122:	83 44       	sbci	r24, 0x43	; 67
     124:	83 44       	sbci	r24, 0x43	; 67
     126:	ba 43       	sbci	r27, 0x3A	; 58
     128:	83 44       	sbci	r24, 0x43	; 67
     12a:	83 44       	sbci	r24, 0x43	; 67
     12c:	83 44       	sbci	r24, 0x43	; 67
     12e:	83 44       	sbci	r24, 0x43	; 67
     130:	83 44       	sbci	r24, 0x43	; 67
     132:	83 44       	sbci	r24, 0x43	; 67
     134:	83 44       	sbci	r24, 0x43	; 67
     136:	83 44       	sbci	r24, 0x43	; 67
     138:	83 44       	sbci	r24, 0x43	; 67
     13a:	9c 43       	sbci	r25, 0x3C	; 60
     13c:	1e 44       	sbci	r17, 0x4E	; 78
     13e:	92 43       	sbci	r25, 0x32	; 50
     140:	f0 43       	sbci	r31, 0x30	; 48
     142:	d7 43       	sbci	r29, 0x37	; 55
     144:	83 44       	sbci	r24, 0x43	; 67
     146:	83 44       	sbci	r24, 0x43	; 67
     148:	83 44       	sbci	r24, 0x43	; 67
     14a:	83 44       	sbci	r24, 0x43	; 67
     14c:	83 44       	sbci	r24, 0x43	; 67
     14e:	83 44       	sbci	r24, 0x43	; 67
     150:	83 44       	sbci	r24, 0x43	; 67
     152:	83 44       	sbci	r24, 0x43	; 67
     154:	a6 43       	sbci	r26, 0x36	; 54
     156:	ba 43       	sbci	r27, 0x3A	; 58
     158:	83 44       	sbci	r24, 0x43	; 67
     15a:	83 44       	sbci	r24, 0x43	; 67
     15c:	1e 44       	sbci	r17, 0x4E	; 78
     15e:	83 44       	sbci	r24, 0x43	; 67
     160:	8e 43       	sbci	r24, 0x3E	; 62
     162:	83 44       	sbci	r24, 0x43	; 67
     164:	83 44       	sbci	r24, 0x43	; 67
     166:	ba 43       	sbci	r27, 0x3A	; 58
     168:	b5 6c       	ori	r27, 0xC5	; 197
     16a:	bf 6c       	ori	r27, 0xCF	; 207
     16c:	c7 6c       	ori	r28, 0xC7	; 199
     16e:	c9 6c       	ori	r28, 0xC9	; 201
     170:	cb 6c       	ori	r28, 0xCB	; 203
     172:	cd 6c       	ori	r28, 0xCD	; 205
     174:	cf 6c       	ori	r28, 0xCF	; 207
     176:	d1 6c       	ori	r29, 0xC1	; 193
     178:	d4 6c       	ori	r29, 0xC4	; 196
     17a:	63 8d       	ldd	r22, Z+27	; 0x1b
     17c:	89 8d       	ldd	r24, Y+25	; 0x19
     17e:	b0 8d       	ldd	r27, Z+24	; 0x18
     180:	ca 8d       	ldd	r28, Y+26	; 0x1a
     182:	d3 8d       	ldd	r29, Z+27	; 0x1b
     184:	f3 8d       	ldd	r31, Z+27	; 0x1b
     186:	0c 8e       	std	Y+28, r0	; 0x1c
     188:	1b 8e       	std	Y+27, r1	; 0x1b
     18a:	66 8e       	std	Z+30, r6	; 0x1e
     18c:	38 8e       	std	Y+24, r3	; 0x18
     18e:	54 90       	lpm	r5, Z
     190:	5c 90       	ld	r5, X
     192:	61 90       	ld	r6, Z+
     194:	85 90       	lpm	r8, Z+
     196:	8f 90       	pop	r8
     198:	d9 90       	ld	r13, Y+
     19a:	a4 90       	lpm	r10, Z
     19c:	a4 90       	lpm	r10, Z
     19e:	9c 90       	ld	r9, X
     1a0:	ef b1       	in	r30, 0x0f	; 15
     1a2:	ae b1       	in	r26, 0x0e	; 14
     1a4:	ae b1       	in	r26, 0x0e	; 14
     1a6:	ae b1       	in	r26, 0x0e	; 14
     1a8:	ae b1       	in	r26, 0x0e	; 14
     1aa:	72 b1       	in	r23, 0x02	; 2
     1ac:	79 b1       	in	r23, 0x09	; 9
     1ae:	80 b1       	in	r24, 0x00	; 0
     1b0:	90 b1       	in	r25, 0x00	; 0
     1b2:	9e b1       	in	r25, 0x0e	; 14
     1b4:	97 b1       	in	r25, 0x07	; 7
     1b6:	ba b9       	out	0x0a, r27	; 10
     1b8:	c4 ba       	out	0x14, r12	; 20
     1ba:	18 bb       	out	0x18, r17	; 24
     1bc:	9c bb       	out	0x1c, r25	; 28
     1be:	cf bb       	out	0x1f, r28	; 31
     1c0:	4b bc       	out	0x2b, r4	; 43
     1c2:	25 be       	out	0x35, r2	; 53
     1c4:	fb be       	out	0x3b, r15	; 59
     1c6:	3a bf       	out	0x3a, r19	; 58
     1c8:	ea bf       	out	0x3a, r30	; 58
     1ca:	2c c0       	rjmp	.+88     	; 0x224 <__c.2332+0x50>
     1cc:	5f ba       	out	0x1f, r5	; 31
     1ce:	7b ba       	out	0x1b, r7	; 27

000001d0 <__trampolines_end>:
     1d0:	6e 61       	ori	r22, 0x1E	; 30
     1d2:	6e 00       	.word	0x006e	; ????

000001d4 <__c.2332>:
     1d4:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1e4:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1f4:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     204:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     214:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     224:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     234:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     244:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     254:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     264:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     274:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     284:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     294:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2a4:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2b4:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2c4:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002d2 <__c.3318>:
     2d2:	63 73 5f 64 69 73 61 62 6c 65 20 77 61 73 3a 20     cs_disable was: 
     2e2:	25 64 2c 20 77 61 6e 74 3a 20 25 64 0a 00           %d, want: %d..

000002f0 <__c.3313>:
     2f0:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     300:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

0000030d <__c.3341>:
     30d:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     31d:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     32d:	25 75 29 0a 00                                      %u)..

00000332 <__c.3332>:
     332:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     342:	61 69 6c 65 64 21 0a 00                             ailed!..

0000034a <__c.3326>:
     34a:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     35a:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

00000365 <__c.3311>:
     365:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     375:	35 75 0a 00                                         5u..

00000379 <__c.3309>:
     379:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     389:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

00000397 <__c.3307>:
     397:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     3a7:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003b5 <__c.3305>:
     3b5:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     3c5:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003d3 <__c.3303>:
     3d3:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     3e3:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003f1 <__c.3301>:
     3f1:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     401:	75 0a 00                                            u..

00000404 <__c.3299>:
     404:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     414:	75 0a 00                                            u..

00000417 <__c.3297>:
     417:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

00000424 <__c.3295>:
     424:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     434:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000441 <__c.3327>:
     441:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000451 <__c.3320>:
     451:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

00000462 <__c.3310>:
     462:	72 74 63 5f 69 6e 69 74 20 72 61 6d 20 2d 20 77     rtc_init ram - w
     472:	72 69 74 65 20 65 72 72 6f 72 0a 00                 rite error..

0000047e <__c.3308>:
     47e:	72 74 63 20 5f 77 72 69 74 65 20 65 70 6f 63 68     rtc _write epoch
     48e:	20 66 61 69 6c 65 64 0a 00                           failed..

00000497 <__c.3297>:
     497:	72 74 63 5f 72 75 6e 20 2d 20 77 72 69 74 65 20     rtc_run - write 
     4a7:	65 72 72 6f 72 0a 00                                error..

000004ae <__c.3295>:
     4ae:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     4be:	6f 72 0a 00                                         or..

000004c2 <__c.3287>:
     4c2:	72 74 63 5f 73 74 61 74 65 20 72 65 61 64 20 65     rtc_state read e
     4d2:	72 72 6f 72 0a 00                                   rror..

000004d8 <__c.3445>:
     4d8:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     4e8:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     4f8:	74 20 25 64 0a 00                                   t %d..

000004fe <__c.3279>:
     4fe:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     50e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

0000051e <__c.3358>:
     51e:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

0000052e <__c.3356>:
     52e:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

0000053f <__c.3354>:
     53f:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     54f:	66 61 69 6c 65 64 0a 00                             failed..

00000557 <__c.3352>:
     557:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000563 <__c.3350>:
     563:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     573:	64 0a 00                                            d..

00000576 <__c.3348>:
     576:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     586:	65 64 0a 00                                         ed..

0000058a <__c.3328>:
     58a:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

00000595 <__c.3326>:
     595:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005a3 <__c.3317>:
     5a3:	5b 53 65 63 6f 6e 64 73 3a 20 25 73 5d 0a 00        [Seconds: %s]..

000005b2 <__c.3312>:
     5b2:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005bc <__c.3292>:
     5bc:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5cc:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005d9 <__c.3825>:
     5d9:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005ea <__c.3823>:
     5ea:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     5fa:	0a 00                                               ..

000005fc <__c.3821>:
     5fc:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

0000060d <__c.3819>:
     60d:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

0000061e <__c.3817>:
     61e:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     62e:	0a 00                                               ..

00000630 <__c.3810>:
     630:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     640:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     650:	6d 65 0a 00                                         me..

00000654 <__c.3808>:
     654:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     664:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

0000066e <__c.3806>:
     66e:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     67e:	61 69 6c 65 64 0a 00                                ailed..

00000685 <__c.3804>:
     685:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     695:	6e 69 74 0a 00                                      nit..

0000069a <__c.3802>:
     69a:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6aa:	0a 00                                               ..

000006ac <__c.3793>:
     6ac:	44 53 54 20 45 4e 44 20 20 20 20 20 20 20 20 20     DST END         
     6bc:	47 4d 54 3a 20 25 73 0a 00                          GMT: %s..

000006c5 <__c.3791>:
     6c5:	44 53 54 20 53 54 41 52 54 20 20 20 20 20 20 20     DST START       
     6d5:	47 4d 54 3a 20 25 73 0a 00                          GMT: %s..

000006de <__c.3787>:
     6de:	44 53 54 20 45 4e 44 20 20 20 6c 6f 63 61 6c 74     DST END   localt
     6ee:	69 6d 65 3a 20 25 73 0a 00                          ime: %s..

000006f7 <__c.3785>:
     6f7:	44 53 54 20 53 54 41 52 54 20 6c 6f 63 61 6c 74     DST START localt
     707:	69 6d 65 3a 20 25 73 0a 00                          ime: %s..

00000710 <__c.3756>:
     710:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     720:	61 69 6c 65 64 0a 00                                ailed..

00000727 <__c.3754>:
     727:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

00000738 <__c.3752>:
     738:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     748:	0a 00                                               ..

0000074a <__c.3750>:
     74a:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

0000075b <__c.3748>:
     75b:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

0000076c <__c.3746>:
     76c:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     77c:	0a 00                                               ..

0000077e <__c.3725>:
     77e:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     78e:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

0000079f <__c.3600>:
     79f:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     7af:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

000007bc <__c.3310>:
     7bc:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

000007cc <__c.3339>:
     7cc:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

000007da <__c.3337>:
     7da:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     7ea:	25 6c 64 0a 00                                      %ld..

000007ef <__c.3335>:
     7ef:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7ff:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

0000080d <__c.3332>:
     80d:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

0000081e <__c.3330>:
     81e:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

0000082a <__c.3328>:
     82a:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000083a <__c.3315>:
     83a:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

00000847 <__c.3287>:
     847:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     857:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000863 <__c.3359>:
     863:	0a 00                                               ..

00000865 <__c.3357>:
     865:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     875:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     885:	73 00                                               s.

00000887 <__c.3355>:
     887:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     897:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

000008a2 <__c.3349>:
     8a2:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     8b2:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8c2:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8d2:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8e2:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008ef <__c.3347>:
     8ef:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     8ff:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     90f:	30 34 58 0a 00                                      04X..

00000914 <__c.3345>:
     914:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     924:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000932 <__c.3343>:
     932:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     942:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000951 <__c.3341>:
     951:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     961:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000970 <__c.3339>:
     970:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     980:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

0000098f <__c.3337>:
     98f:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     99f:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

000009ae <__c.3335>:
     9ae:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     9be:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009cd <__c.3333>:
     9cd:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     9dd:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

000009eb <__c.3331>:
     9eb:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     9fb:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a09 <__c.3329>:
     a09:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     a19:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a28 <__c.3327>:
     a28:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a38:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a46 <__c.3325>:
     a46:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a57 <__c.3289>:
     a57:	72 63 3d 25 75 0a 00                                rc=%u..

00000a5e <__c.3327>:
     a5e:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     a6e:	72 65 65 0a 00                                      ree..

00000a73 <__c.3325>:
     a73:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     a83:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     a93:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000a9c <__c.3321>:
     a9c:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000aaa <__c.3308>:
     aaa:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     aba:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000aca <__c.3306>:
     aca:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000ad8 <__c.3304>:
     ad8:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     ae8:	73 74 0a 00                                         st..

00000aec <__c.3302>:
     aec:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000afc <__c.3300>:
     afc:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     b0c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000b1c <__c.3292>:
     b1c:	69 6e 64 3a 25 64 2c 61 72 67 63 3a 25 64 0a 00     ind:%d,argc:%d..

00000b2c <__c.3282>:
     b2c:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b3c:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b4c:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b5c:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b6c:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b7c:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b8c:	20 6c 73 20 64 69 72 0a 66 61 74 66 73 20 73 74      ls dir.fatfs st
     b9c:	61 74 75 73 20 66 69 6c 65 0a 0a 00                 atus file...

00000ba8 <__c.3280>:
     ba8:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000bb4 <__c.3897>:
     bb4:	45 78 70 65 63 74 65 64 20 2f 64 65 76 2f 73 64     Expected /dev/sd
     bc4:	61 20 2e 2e 20 2f 64 65 76 2f 73 64 6a 0a 00        a .. /dev/sdj..

00000bd3 <__c.3870>:
     bd3:	25 73 0a 00                                         %s..

00000bd7 <__c.3868>:
     bd7:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000bdf <__c.3764>:
     bdf:	09 63 74 69 6d 65 3a 20 25 73 0a 00                 .ctime: %s..

00000beb <__c.3762>:
     beb:	09 6d 74 69 6d 65 3a 20 25 73 0a 00                 .mtime: %s..

00000bf7 <__c.3760>:
     bf7:	09 61 74 69 6d 65 3a 20 25 73 0a 00                 .atime: %s..

00000c03 <__c.3758>:
     c03:	09 47 49 44 3a 20 20 20 25 6c 75 0a 00              .GID:   %lu..

00000c10 <__c.3756>:
     c10:	09 55 49 44 3a 20 20 20 25 6c 75 0a 00              .UID:   %lu..

00000c1d <__c.3754>:
     c1d:	09 4d 6f 64 65 3a 20 20 25 6c 6f 0a 00              .Mode:  %lo..

00000c2a <__c.3752>:
     c2a:	55 6e 6b 6e 6f 77 6e 0a 00                          Unknown..

00000c33 <__c.3750>:
     c33:	46 69 6c 65 0a 00                                   File..

00000c39 <__c.3748>:
     c39:	44 49 52 0a 00                                      DIR..

00000c3e <__c.3746>:
     c3e:	09 54 79 70 65 3a 20 20 00                          .Type:  .

00000c47 <__c.3744>:
     c47:	09 53 69 7a 65 3a 20 20 25 6c 75 0a 00              .Size:  %lu..

00000c54 <__c.3623>:
     c54:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000c60 <__c.3552>:
     c60:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     c70:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c78 <__c.3545>:
     c78:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     c88:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c90 <__c.3785>:
     c90:	43 61 6e 27 20 6f 70 65 6e 3a 20 25 73 0a 00        Can' open: %s..

00000c9f <__c.3775>:
     c9f:	53 75 6d 3a 20 25 30 34 58 68 2c 20 25 35 75 0a     Sum: %04Xh, %5u.
	...

00000cb0 <__c.3767>:
     cb0:	43 61 6e 27 20 6f 70 65 6e 3a 20 25 73 0a 00        Can' open: %s..

00000cbf <__c.3757>:
     cbf:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000ccc <__c.3755>:
     ccc:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cdc <__c.3747>:
     cdc:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000ce7 <__c.3743>:
     ce7:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     cf7:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     d07:	68 0a 00                                            h..

00000d0a <__c.3740>:
     d0a:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000d1a <__c.3735>:
     d1a:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     d2a:	5b 25 73 5d 0a 00                                   [%s]..

00000d30 <__c.3733>:
     d30:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000d3e <__c.3731>:
     d3e:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     d4e:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000d5f <__c.3718>:
     d5f:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     d6f:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000d79 <__c.3713>:
     d79:	25 73 0a 00                                         %s..

00000d7d <__c.3711>:
     d7d:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     d8d:	0a 00                                               ..

00000d8f <__c.3699>:
     d8f:	0d 00                                               ..

00000d91 <__c.3697>:
     d91:	4d 6f 72 65 2e 2e 00                                More...

00000d98 <__c.3687>:
     d98:	0a 00                                               ..

00000d9a <__c.3682>:
     d9a:	0a 00                                               ..

00000d9c <__c.3674>:
     d9c:	20 3a 20 00                                          : .

00000da0 <__c.3669>:
     da0:	20 20 20 00                                            .

00000da4 <__c.3664>:
     da4:	25 30 32 78 20 00                                   %02x .

00000daa <__c.3662>:
     daa:	25 30 38 6c 78 20 3a 20 00                          %08lx : .

00000db3 <__c.3660>:
     db3:	43 61 6e 27 20 6f 70 65 6e 3a 20 25 73 0a 00        Can' open: %s..

00000dc2 <__c.3648>:
     dc2:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     dd2:	2e 0a 00                                            ...

00000dd5 <__c.3644>:
     dd5:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000de4 <__c.3641>:
     de4:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000df1 <__c.3639>:
     df1:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000dfe <__c.3637>:
     dfe:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000e0e <__c.3635>:
     e0e:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000e1b <__c.3633>:
     e1b:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000e2b <__c.3631>:
     e2b:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000e37 <__c.3620>:
     e37:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000e42 <__c.3618>:
     e42:	0a 00                                               ..

00000e44 <__c.3613>:
     e44:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000e54 <__c.3602>:
     e54:	25 73 0a 00                                         %s..

00000e58 <__c.3571>:
     e58:	70 6f 73 69 78 20 70 72 65 66 69 78 20 69 73 20     posix prefix is 
     e68:	6f 70 74 69 6f 6e 61 6c 0a 70 6f 73 69 78 20 63     optional.posix c
     e78:	68 6d 6f 64 20 66 69 6c 65 20 4e 4e 4e 0a 70 6f     hmod file NNN.po
     e88:	73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d 70     six cat file [-p
     e98:	5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a 70     ].posix cd dir.p
     ea8:	6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31 20     osix copy file1 
     eb8:	66 69 6c 65 32 0a 70 6f 73 69 78 20 68 65 78 64     file2.posix hexd
     ec8:	75 6d 70 20 66 69 6c 65 20 5b 2d 70 5d 0a 70 6f     ump file [-p].po
     ed8:	73 69 78 20 6c 6f 67 20 73 74 72 0a 70 6f 73 69     six log str.posi
     ee8:	78 20 6c 73 20 64 69 72 20 5b 2d 6c 5d 0a 70 6f     x ls dir [-l].po
     ef8:	73 69 78 20 6d 6b 64 69 72 20 64 69 72 0a 70 6f     six mkdir dir.po
     f08:	73 69 78 20 6d 6b 66 73 0a 70 6f 73 69 78 20 70     six mkfs.posix p
     f18:	61 67 65 20 4e 4e 0a 70 6f 73 69 78 20 70 77 64     age NN.posix pwd
     f28:	0a 70 6f 73 69 78 20 73 74 61 74 20 66 69 6c 65     .posix stat file
     f38:	0a 70 6f 73 69 78 20 73 75 6d 20 66 69 6c 65 0a     .posix sum file.
     f48:	70 6f 73 69 78 20 72 6d 20 66 69 6c 65 0a 70 6f     posix rm file.po
     f58:	73 69 78 20 72 6d 64 69 72 20 64 69 72 0a 70 6f     six rmdir dir.po
     f68:	73 69 78 20 72 65 6e 61 6d 65 20 6f 6c 64 20 6e     six rename old n
     f78:	65 77 0a 70 6f 73 69 78 20 75 70 6c 6f 61 64 20     ew.posix upload 
     f88:	66 69 6c 65 0a 0a 00                                file...

00000f8f <__c.3569>:
     f8f:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000f9b <__c.3760>:
     f9b:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000fa9 <__c.3754>:
     fa9:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000fb6 <__c.3747>:
     fb6:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000fc4 <__c.3738>:
     fc4:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000fd1 <__c.3729>:
     fd1:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000fe2 <__c.3715>:
     fe2:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     ff2:	5d 0a 00                                            ]..

00000ff5 <__c.3697>:
     ff5:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
    1005:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00001012 <__c.4244>:
    1012:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
    1022:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
    1032:	64 28 25 64 29 5d 0a 00                             d(%d)]..

0000103a <__c.4239>:
    103a:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
    104a:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00001054 <__c.4229>:
    1054:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
    1064:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
    1074:	28 25 64 29 5d 0a 00                                (%d)]..

0000107b <__c.4225>:
    107b:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
    108b:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
    109b:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

000010a8 <__c.4222>:
    10a8:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
    10b8:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

000010c1 <__c.4206>:
    10c1:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

000010cc <__c.4204>:
    10cc:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

000010d7 <__c.4202>:
    10d7:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

000010e2 <__c.4198>:
    10e2:	20 20 20 20 20 00                                        .

000010e8 <__c.4196>:
    10e8:	25 30 32 58 20 25 63 20 00                          %02X %c .

000010f1 <__c.4154>:
    10f1:	3c 4e 52 46 44 3d 25 64 2c 4e 44 41 56 3d 25 64     <NRFD=%d,NDAV=%d
    1101:	3e 0a 00                                            >..

00001104 <__c.4150>:
    1104:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1114:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

0000111e <__c.4146>:
    111e:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    112e:	20 4e 44 41 43 3d 3d 31 3e 0a 00                     NDAC==1>..

00001139 <__c.4143>:
    1139:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1149:	20 4e 52 46 44 3d 3d 30 3e 0a 00                     NRFD==0>..

00001154 <__c.4138>:
    1154:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1164:	20 4e 52 46 44 3d 3d 31 20 26 26 20 4e 44 41 43      NRFD==1 && NDAC
    1174:	20 3d 3d 20 30 3e 0a 00                              == 0>..

0000117c <__c.4134>:
    117c:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    118c:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00001196 <__c.4117>:
    1196:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    11a6:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    11b6:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

000011c4 <__c.4112>:
    11c4:	5b 52 45 4e 20 48 49 5d 0a 00                       [REN HI]..

000011ce <__c.4110>:
    11ce:	5b 52 45 4e 20 4c 4f 57 5d 0a 00                    [REN LOW]..

000011d9 <__c.4105>:
    11d9:	5b 49 46 43 20 53 45 4e 54 5d 0a 00                 [IFC SENT]..

000011e5 <__c.4097>:
    11e5:	5b 50 50 52 3a 25 30 32 58 48 2c 20 50 49 4e 3a     [PPR:%02XH, PIN:
    11f5:	25 30 32 58 48 2c 20 44 44 52 3a 25 30 32 58 48     %02XH, DDR:%02XH
    1205:	5d 0a 00                                            ]..

00001208 <__c.4091>:
    1208:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    1218:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001223 <__c.4089>:
    1223:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    1233:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    1243:	72 61 6e 67 65 0a 00                                range..

0000124a <__c.4084>:
    124a:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    125a:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001265 <__c.4082>:
    1265:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    1275:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    1285:	61 6e 67 65 0a 00                                   ange..

0000128b <__c.4077>:
    128b:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    129b:	5d 0a 00                                            ]..

0000129e <__c.4072>:
    129e:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

000012af <__c.4255>:
    12af:	0a 00                                               ..

000012b1 <__c.4247>:
    12b1:	2e 00                                               ..

000012b3 <__c.4245>:
    12b3:	25 63 00                                            %c.

000012b6 <__c.4243>:
    12b6:	20 7c 20 00                                          | .

000012ba <__c.4238>:
    12ba:	20 25 30 32 58 00                                    %02X.

000012c0 <__c.4236>:
    12c0:	0a 00                                               ..

000012c2 <__c.4234>:
    12c2:	5b 44 75 6d 70 3a 20 25 64 5d 0a 00                 [Dump: %d]..

000012ce <__c.4223>:
    12ce:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

000012df <__c.4218>:
    12df:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    12ef:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    12ff:	32 58 48 5d 0a 00                                   2XH]..

00001305 <__c.4216>:
    1305:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    1315:	0a 00                                               ..

00001317 <__c.4214>:
    1317:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

00001328 <__c.4209>:
    1328:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

00001334 <__c.4207>:
    1334:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

00001344 <__c.4205>:
    1344:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    1354:	52 5d 0a 00                                         R]..

00001358 <__c.4203>:
    1358:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    1368:	0a 00                                               ..

0000136a <__c.4201>:
    136a:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

0000137b <__c.4199>:
    137b:	5b 55 4e 54 5d 0a 00                                [UNT]..

00001382 <__c.4194>:
    1382:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

0000138e <__c.4192>:
    138e:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    139e:	52 5d 0a 00                                         R]..

000013a2 <__c.4190>:
    13a2:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

000013b3 <__c.4188>:
    13b3:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    13c3:	0a 00                                               ..

000013c5 <__c.4186>:
    13c5:	0a 00                                               ..

000013c7 <__c.4184>:
    13c7:	5b 55 4e 4c 5d 0a 00                                [UNL]..

000013ce <__c.4179>:
    13ce:	5b 48 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [HPIB (%02XH) no
    13de:	74 20 64 65 66 69 6e 65 64 5d 0a 00                 t defined]..

000013ea <__c.4177>:
    13ea:	5b 44 43 4c 5d 0a 00                                [DCL]..

000013f1 <__c.4175>:
    13f1:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

000013fe <__c.4173>:
    13fe:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

0000140a <__c.4171>:
    140a:	5b 53 44 43 5d 0a 00                                [SDC]..

00001411 <__c.4169>:
    1411:	5b 53 50 44 5d 0a 00                                [SPD]..

00001418 <__c.4167>:
    1418:	5b 53 50 45 5d 0a 00                                [SPE]..

0000141f <__c.4165>:
    141f:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    142f:	5d 0a 00                                            ]..

00001432 <__c.4163>:
    1432:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    1442:	5d 0a 00                                            ]..

00001445 <__c.4158>:
    1445:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    1455:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

0000145f <__c.4156>:
    145f:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    146f:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

00001480 <__c.4129>:
    1480:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

00001491 <__c.4127>:
    1491:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

0000149e <__c.4125>:
    149e:	3c 42 55 53 3e 0a 00                                <BUS>..

000014a5 <__c.4123>:
    14a5:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

000014b0 <__c.4121>:
    14b0:	3c 49 46 43 3e 0a 00                                <IFC>..

000014b7 <__c.4116>:
    14b7:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    14c7:	0a 00                                               ..

000014c9 <__c.4114>:
    14c9:	44 6f 6e 65 0a 00                                   Done..

000014cf <__c.4110>:
    14cf:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

000014db <__c.4108>:
    14db:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    14eb:	20 65 78 69 74 0a 00                                 exit..

000014f2 <__c.4106>:
    14f2:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    1502:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    1512:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

0000151d <__c.4104>:
    151d:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    152d:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

00001537 <__c.4058>:
    1537:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    1547:	6f 74 65 63 74 65 64 0a 00                          otected..

00001550 <__c.4056>:
    1550:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    1560:	0a 00                                               ..

00001562 <__c.4300>:
    1562:	50 6f 72 74 20 64 64 72 20 44 20 52 44 3a 5b 25     Port ddr D RD:[%
    1572:	30 32 58 48 5d 0a 00                                02XH]..

00001579 <__c.4298>:
    1579:	50 6f 72 74 20 64 64 72 20 43 20 52 44 3a 5b 25     Port ddr C RD:[%
    1589:	30 32 58 48 5d 0a 00                                02XH]..

00001590 <__c.4296>:
    1590:	50 6f 72 74 20 64 64 72 20 42 20 52 44 3a 5b 25     Port ddr B RD:[%
    15a0:	30 32 58 48 5d 0a 00                                02XH]..

000015a7 <__c.4294>:
    15a7:	50 6f 72 74 20 64 64 72 20 41 20 52 44 3a 5b 25     Port ddr A RD:[%
    15b7:	30 32 58 48 5d 0a 00                                02XH]..

000015be <__c.4292>:
    15be:	50 6f 72 74 20 6c 61 74 63 68 20 44 20 52 44 3a     Port latch D RD:
    15ce:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

000015d7 <__c.4290>:
    15d7:	50 6f 72 74 20 6c 61 74 63 68 20 43 20 52 44 3a     Port latch C RD:
    15e7:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

000015f0 <__c.4288>:
    15f0:	50 6f 72 74 20 6c 61 74 63 68 20 42 20 52 44 3a     Port latch B RD:
    1600:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

00001609 <__c.4286>:
    1609:	50 6f 72 74 20 6c 61 74 63 68 20 41 20 52 44 3a     Port latch A RD:
    1619:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

00001622 <__c.4284>:
    1622:	50 6f 72 74 20 70 69 6e 73 20 44 20 52 44 3a 5b     Port pins D RD:[
    1632:	25 30 32 58 48 5d 0a 00                             %02XH]..

0000163a <__c.4282>:
    163a:	50 6f 72 74 20 70 69 6e 73 20 43 20 52 44 3a 5b     Port pins C RD:[
    164a:	25 30 32 58 48 5d 0a 00                             %02XH]..

00001652 <__c.4280>:
    1652:	50 6f 72 74 20 70 69 6e 73 20 42 20 52 44 3a 5b     Port pins B RD:[
    1662:	25 30 32 58 48 5d 0a 00                             %02XH]..

0000166a <__c.4278>:
    166a:	50 6f 72 74 20 70 69 6e 73 20 41 20 52 44 3a 5b     Port pins A RD:[
    167a:	25 30 32 58 48 5d 0a 00                             %02XH]..

00001682 <__c.4275>:
    1682:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

0000168f <__c.4267>:
    168f:	67 70 69 62 20 70 72 65 66 69 78 20 69 73 20 6f     gpib prefix is o
    169f:	70 74 69 6f 6e 61 6c 0a 67 70 69 62 20 61 64 64     ptional.gpib add
    16af:	72 65 73 73 65 73 0a 67 70 69 62 20 63 6f 6e 66     resses.gpib conf
    16bf:	69 67 0a 67 70 69 62 20 64 65 62 75 67 20 4e 0a     ig.gpib debug N.
    16cf:	67 70 69 62 20 65 6c 61 70 73 65 64 0a 67 70 69     gpib elapsed.gpi
    16df:	62 20 65 6c 61 70 73 65 64 5f 72 65 73 65 74 0a     b elapsed_reset.
    16ef:	67 70 69 62 20 74 61 73 6b 0a 67 70 69 62 20 74     gpib task.gpib t
    16ff:	72 61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74 78     race filename.tx
    170f:	74 20 5b 42 55 53 5d 0a 67 70 69 62 20 69 66 63     t [BUS].gpib ifc
    171f:	0a 67 70 69 62 20 70 6c 6f 74 20 66 69 6c 65 6e     .gpib plot filen
    172f:	61 6d 65 2e 74 78 74 0a 67 70 69 62 20 70 70 72     ame.txt.gpib ppr
    173f:	5f 62 69 74 5f 6f 6e 20 4e 0a 67 70 69 62 20 70     _bit_on N.gpib p
    174f:	70 72 5f 62 69 74 5f 6f 66 66 20 4e 0a 67 70 69     pr_bit_off N.gpi
    175f:	62 20 70 70 72 5f 73 65 74 20 58 58 0a 67 70 69     b ppr_set XX.gpi
    176f:	62 20 70 70 72 5f 69 6e 69 74 0a 67 70 69 62 20     b ppr_init.gpib 
    177f:	70 6f 72 74 20 72 65 61 64 20 70 69 6e 73 20 20     port read pins  
    178f:	20 5b 41 2d 44 5d 0a 67 70 69 62 20 70 6f 72 74      [A-D].gpib port
    179f:	20 72 65 61 64 20 6c 61 74 63 68 20 20 5b 41 2d      read latch  [A-
    17af:	44 5d 0a 67 70 69 62 20 70 6f 72 74 20 72 65 61     D].gpib port rea
    17bf:	64 20 64 64 72 20 20 20 20 5b 41 2d 44 5d 0a 67     d ddr    [A-D].g
    17cf:	70 69 62 20 70 6f 72 74 20 77 72 69 74 65 20 6c     pib port write l
    17df:	61 74 63 68 20 5b 41 2d 44 5d 20 76 61 6c 0a 67     atch [A-D] val.g
    17ef:	70 69 62 20 70 6f 72 74 20 77 72 69 74 65 20 70     pib port write p
    17ff:	69 6e 73 20 20 5b 41 2d 44 5d 20 76 61 6c 0a 0a     ins  [A-D] val..
	...

00001810 <__c.4265>:
    1810:	67 70 69 62 20 68 65 6c 70 0a 00                    gpib help..

0000181b <__c.4368>:
    181b:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    182b:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    183b:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    184b:	48 5d 0a 00                                         H]..

0000184f <__c.4366>:
    184f:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    185f:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    186f:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    187f:	48 5d 0a 00                                         H]..

00001883 <__c.4364>:
    1883:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1893:	74 5d 0a 00                                         t]..

00001897 <__c.4362>:
    1897:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

000018a6 <__c.4360>:
    18a6:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    18b6:	74 65 5d 0a 00                                      te]..

000018bb <__c.4358>:
    18bb:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    18cb:	61 74 65 5d 0a 00                                   ate]..

000018d1 <__c.4356>:
    18d1:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    18e1:	61 74 65 5d 0a 00                                   ate]..

000018e7 <__c.4351>:
    18e7:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    18f7:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    1907:	5d 0a 00                                            ]..

0000190a <__c.4344>:
    190a:	5b 53 53 38 30 20 49 6e 63 72 65 6d 65 6e 74 20     [SS80 Increment 
    191a:	74 6f 20 28 25 6c 58 48 29 5d 0a 00                 to (%lXH)]..

00001926 <__c.4337>:
    1926:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001935 <__c.4335>:
    1935:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    1945:	5d 0a 00                                            ]..

00001948 <__c.4328>:
    1948:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

00001954 <__c.4314>:
    1954:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    1964:	5d 0a 00                                            ]..

00001967 <__c.4312>:
    1967:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    1977:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

00001981 <__c.4305>:
    1981:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    1991:	48 5d 0a 00                                         H]..

00001995 <__c.4303>:
    1995:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    19a5:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

000019b5 <__c.4298>:
    19b5:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    19c5:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    19d5:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    19e5:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

000019f1 <__c.4295>:
    19f1:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1a01:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00001a11 <__c.4293>:
    1a11:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    1a21:	29 5d 0a 00                                         )]..

00001a25 <__c.4291>:
    1a25:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    1a35:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    1a45:	28 25 64 29 5d 0a 00                                (%d)]..

00001a4c <__c.4289>:
    1a4c:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    1a5c:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

00001a6a <__c.4287>:
    1a6a:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    1a7a:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00001a87 <__c.4284>:
    1a87:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    1a97:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    1aa7:	44 4f 5d 0a 00                                      DO]..

00001aac <__c.4281>:
    1aac:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    1abc:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00001ac5 <__c.4279>:
    1ac5:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    1ad5:	5d 0a 00                                            ]..

00001ad8 <__c.4270>:
    1ad8:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    1ae8:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    1af8:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    1b08:	43 6f 64 65 73 5d 0a 00                             Codes]..

00001b10 <__c.4267>:
    1b10:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1b20:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00001b30 <__c.4265>:
    1b30:	5b 53 53 38 30 20 49 6e 69 61 74 65 20 44 69 61     [SS80 Iniate Dia
    1b40:	67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f 5d 0a     gnostic - TODO].
	...

00001b51 <__c.4263>:
    1b51:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    1b61:	61 74 75 73 5d 0a 00                                atus]..

00001b68 <__c.4261>:
    1b68:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    1b78:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

00001b81 <__c.4259>:
    1b81:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    1b91:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

00001b9c <__c.4257>:
    1b9c:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    1bac:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

00001bbb <__c.4255>:
    1bbb:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    1bcb:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

00001bd9 <__c.4253>:
    1bd9:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00001bea <__c.4251>:
    1bea:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    1bfa:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

00001c06 <__c.4249>:
    1c06:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    1c16:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

00001c23 <__c.4247>:
    1c23:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    1c33:	2d 4f 50 5d 0a 00                                   -OP]..

00001c39 <__c.4245>:
    1c39:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1c49:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

00001c5a <__c.4243>:
    1c5a:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    1c6a:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    1c7a:	44 4f 5d 0a 00                                      DO]..

00001c7f <__c.4241>:
    1c7f:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    1c8f:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

00001c99 <__c.4239>:
    1c99:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    1ca9:	2d 4f 50 5d 0a 00                                   -OP]..

00001caf <__c.4237>:
    1caf:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

00001cbd <__c.4235>:
    1cbd:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    1ccd:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

00001cd9 <__c.4233>:
    1cd9:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    1ce9:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

00001cf6 <__c.4231>:
    1cf6:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1d06:	20 57 72 69 74 65 5d 0a 00                           Write]..

00001d0f <__c.4228>:
    1d0f:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1d1f:	20 52 65 61 64 5d 0a 00                              Read]..

00001d27 <__c.4226>:
    1d27:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    1d37:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

00001d40 <__c.4223>:
    1d40:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    1d50:	25 64 29 5d 0a 00                                   %d)]..

00001d56 <__c.4221>:
    1d56:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    1d66:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00001d6f <__c.4219>:
    1d6f:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    1d7f:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    1d8f:	52 4f 52 5d 0a 00                                   ROR]..

00001d95 <__c.4210>:
    1d95:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    1da5:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

00001daf <__c.4205>:
    1daf:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    1dbf:	76 61 6c 69 64 5d 0a 00                             valid]..

00001dc7 <__c.4200>:
    1dc7:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    1dd7:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

00001de6 <__c.4198>:
    1de6:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    1df6:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

00001e03 <__c.4196>:
    1e03:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    1e13:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    1e23:	5d 0a 00                                            ]..

00001e26 <__c.4194>:
    1e26:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00001e37 <__c.4186>:
    1e37:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    1e47:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

00001e52 <__c.4184>:
    1e52:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    1e62:	73 5d 0a 00                                         s]..

00001e66 <__c.4174>:
    1e66:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

00001e71 <__c.4172>:
    1e71:	25 73 3a 0a 00                                      %s:..

00001e76 <__c.4147>:
    1e76:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1e86:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    1e96:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

00001ea1 <__c.4145>:
    1ea1:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1eb1:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    1ec1:	49 4e 49 53 48 5d 0a 00                             INISH]..

00001ec9 <__c.4141>:
    1ec9:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1ed9:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    1ee9:	58 48 29 5d 0a 00                                   XH)]..

00001eef <__c.4139>:
    1eef:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    1eff:	72 5d 0a 00                                         r]..

00001f03 <__c.4135>:
    1f03:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    1f13:	5d 0a 00                                            ]..

00001f16 <__c.4133>:
    1f16:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1f26:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    1f36:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

00001f3f <__c.4121>:
    1f3f:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    1f4f:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    1f5f:	62 79 74 65 73 5d 0a 00                             bytes]..

00001f67 <__c.4119>:
    1f67:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    1f77:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    1f87:	53 48 5d 0a 00                                      SH]..

00001f8c <__c.4114>:
    1f8c:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    1f9c:	20 57 72 72 6f 72 5d 0a 00                           Wrror]..

00001fa5 <__c.4112>:
    1fa5:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    1fb5:	45 72 72 6f 72 5d 0a 00                             Error]..

00001fbd <__c.4110>:
    1fbd:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    1fcd:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

00001fdb <__c.4108>:
    1fdb:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1feb:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    1ffb:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

00002003 <__c.4091>:
    2003:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    2013:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

0000201f <__c.4075>:
    201f:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    202f:	5d 0a 00                                            ]..

00002032 <__c.4050>:
    2032:	5b 53 53 38 30 20 54 65 73 74 20 44 6f 6e 65 5d     [SS80 Test Done]
    2042:	0a 00                                               ..

00002044 <__c.4048>:
    2044:	5b 53 53 38 30 20 54 65 73 74 5d 0a 00              [SS80 Test]..

00002051 <__c.4205>:
    2051:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2061:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    2071:	64 64 72 65 73 73 5d 0a 00                          ddress]..

0000207a <__c.4202>:
    207a:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    208a:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    209a:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

000020a5 <__c.4199>:
    20a5:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    20b5:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    20c5:	66 66 65 72 65 64 5d 0a 00                          ffered]..

000020ce <__c.4194>:
    20ce:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    20de:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

000020ee <__c.4191>:
    20ee:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    20fe:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

0000210a <__c.4188>:
    210a:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    211a:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    212a:	0a 00                                               ..

0000212c <__c.4185>:
    212c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    213c:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

0000214b <__c.4182>:
    214b:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    215b:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

0000216c <__c.4179>:
    216c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    217c:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

0000218c <__c.4175>:
    218c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    219c:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    21ac:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    21bc:	0a 00                                               ..

000021be <__c.4170>:
    21be:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

000021ce <__c.4167>:
    21ce:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    21de:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

000021ed <__c.4165>:
    21ed:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    21fd:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    220d:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

00002218 <__c.4163>:
    2218:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    2228:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

00002238 <__c.4161>:
    2238:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    2248:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    2258:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002261 <__c.4159>:
    2261:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    2271:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

0000227d <__c.4157>:
    227d:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    228d:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    229d:	0a 00                                               ..

0000229f <__c.4155>:
    229f:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

000022af <__c.4152>:
    22af:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    22bf:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

000022d0 <__c.4150>:
    22d0:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    22e0:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    22f0:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

000022f9 <__c.4148>:
    22f9:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2309:	36 5d 0a 00                                         6]..

0000230d <__c.4145>:
    230d:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    231d:	35 5d 0a 00                                         5]..

00002321 <__c.4142>:
    2321:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2331:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002341 <__c.4139>:
    2341:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2351:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2361:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002370 <__c.4137>:
    2370:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2380:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002391 <__c.4135>:
    2391:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    23a1:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

000023b2 <__c.4133>:
    23b2:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    23c2:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    23d2:	0a 00                                               ..

000023d4 <__c.4131>:
    23d4:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    23e4:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    23f4:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2404:	0a 00                                               ..

00002406 <__c.4119>:
    2406:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    2416:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    2426:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2436:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2446:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002457 <__c.4117>:
    2457:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2467:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2477:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2487:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2497:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

000024a7 <__c.4115>:
    24a7:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    24b7:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    24c7:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    24d7:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    24e7:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

000024f7 <__c.4113>:
    24f7:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2507:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2517:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2527:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2537:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002547 <__c.4108>:
    2547:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2557:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2567:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2577:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2587:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2597:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    25a7:	58 48 5d 0a 00                                      XH]..

000025ac <__c.4106>:
    25ac:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    25bc:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    25cc:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    25dc:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    25ec:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    25fc:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    260c:	30 32 58 48 5d 0a 00                                02XH]..

00002613 <__c.4104>:
    2613:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2623:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2633:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2643:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2653:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2663:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2673:	30 32 58 48 5d 0a 00                                02XH]..

0000267a <__c.4102>:
    267a:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    268a:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    269a:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    26aa:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    26ba:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    26ca:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    26da:	30 32 58 48 5d 0a 00                                02XH]..

000026e1 <__c.4095>:
    26e1:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

000026f0 <__c.4091>:
    26f0:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2700:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

0000270a <__c.4089>:
    270a:	5b 41 4d 49 47 4f 20 57 61 6b 65 75 70 5d 0a 00     [AMIGO Wakeup]..

0000271a <__c.4082>:
    271a:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002727 <__c.4080>:
    2727:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2737:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002741 <__c.4073>:
    2741:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2751:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002760 <__c.4066>:
    2760:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2770:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

0000277a <__c.4059>:
    277a:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    278a:	6e 65 5d 0a 00                                      ne]..

0000278f <__c.4055>:
    278f:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

0000279f <__c.4014>:
    279f:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    27af:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    27bf:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

000027ca <__c.4044>:
    27ca:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    27da:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    27ea:	25 30 34 58 48 5d 0a 00                             %04XH]..

000027f2 <__c.4021>:
    27f2:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    2802:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

0000280b <__c.4007>:
    280b:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    281b:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002825 <__c.4005>:
    2825:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    2835:	75 73 5d 0a 00                                      us]..

0000283a <__c.3999>:
    283a:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    284a:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002854 <__c.3997>:
    2854:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    2864:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00002872 <__c.3991>:
    2872:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    2882:	74 61 74 75 73 5d 0a 00                             tatus]..

0000288a <__c.4013>:
    288a:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 62 79     received:[%d] by
    289a:	74 65 73 0a 00                                      tes..

0000289f <__c.4011>:
    289f:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 25 73     received:[%d] %s
    28af:	0a 00                                               ..

000028b1 <__c.4009>:
    28b1:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 25 73     received:[%d] %s
    28c1:	0a 00                                               ..

000028c3 <__c.4004>:
    28c3:	70 72 69 6e 74 65 72 20 6e 6f 74 20 64 65 66 69     printer not defi
    28d3:	6e 65 64 0a 00                                      ned..

000028d8 <__c.3995>:
    28d8:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    28e8:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

000028f2 <__c.3993>:
    28f2:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    2902:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

0000290e <__c.3988>:
    290e:	25 30 38 6c 64 0d 00                                %08ld..

00002915 <__c.3982>:
    2915:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    2925:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00002936 <__c.3976>:
    2936:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00002944 <__c.3974>:
    2944:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    2954:	69 74 65 0a 00                                      ite..

00002959 <__c.3968>:
    2959:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00002965 <__c.3966>:
    2965:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    2975:	6f 3a 25 73 0a 00                                   o:%s..

0000297b <__c.3964>:
    297b:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    298b:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    299b:	74 00                                               t.

0000299d <__c.4646>:
    299d:	0a 00                                               ..

0000299f <__c.4641>:
    299f:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

000029a7 <__c.4639>:
    29a7:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    29b7:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    29c7:	0a 00                                               ..

000029c9 <__c.4637>:
    29c9:	53 53 38 30 2d 25 64 00                             SS80-%d.

000029d1 <__c.4635>:
    29d1:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    29e1:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    29f1:	0a 00                                               ..

000029f3 <__c.4622>:
    29f3:	0a 00                                               ..

000029f5 <__c.4620>:
    29f5:	0a 00                                               ..

000029f7 <__c.4618>:
    29f7:	45 4e 44 0a 00                                      END..

000029fc <__c.4613>:
    29fc:	0a 00                                               ..

000029fe <__c.4611>:
    29fe:	41 44 44 52 45 53 53 00                             ADDRESS.

00002a06 <__c.4609>:
    2a06:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00002a10 <__c.4607>:
    2a10:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

00002a19 <__c.4605>:
    2a19:	43 59 4c 49 4e 44 45 52 53 00                       CYLINDERS.

00002a23 <__c.4603>:
    2a23:	48 45 41 44 53 00                                   HEADS.

00002a29 <__c.4601>:
    2a29:	53 45 43 54 4f 52 53 5f 50 45 52 5f 54 52 41 43     SECTORS_PER_TRAC
    2a39:	4b 00                                               K.

00002a3b <__c.4599>:
    2a3b:	42 59 54 45 53 5f 50 45 52 5f 53 45 43 54 4f 52     BYTES_PER_SECTOR
	...

00002a4c <__c.4597>:
    2a4c:	20 20 47 45 4f 4d 45 54 52 59 0a 00                   GEOMETRY..

00002a58 <__c.4595>:
    2a58:	49 44 00                                            ID.

00002a5b <__c.4593>:
    2a5b:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00002a65 <__c.4591>:
    2a65:	46 49 4c 45 00                                      FILE.

00002a6a <__c.4589>:
    2a6a:	50 50 52 00                                         PPR.

00002a6e <__c.4587>:
    2a6e:	41 44 44 52 45 53 53 00                             ADDRESS.

00002a76 <__c.4585>:
    2a76:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

00002a80 <__c.4583>:
    2a80:	41 4d 49 47 4f 0a 00                                AMIGO..

00002a87 <__c.4581>:
    2a87:	49 4e 54 45 52 4c 45 41 56 45 00                    INTERLEAVE.

00002a92 <__c.4579>:
    2a92:	4d 41 58 5f 42 4c 4f 43 4b 5f 4e 55 4d 42 45 52     MAX_BLOCK_NUMBER
	...

00002aa3 <__c.4577>:
    2aa3:	4d 41 58 5f 53 45 43 54 4f 52 00                    MAX_SECTOR.

00002aae <__c.4575>:
    2aae:	4d 41 58 5f 48 45 41 44 00                          MAX_HEAD.

00002ab7 <__c.4573>:
    2ab7:	4d 41 58 5f 43 59 4c 49 4e 44 45 52 00              MAX_CYLINDER.

00002ac4 <__c.4571>:
    2ac4:	20 20 56 4f 4c 55 4d 45 0a 00                         VOLUME..

00002ace <__c.4569>:
    2ace:	52 45 4d 4f 56 41 42 4c 45 5f 56 4f 4c 55 4d 45     REMOVABLE_VOLUME
    2ade:	53 00                                               S.

00002ae0 <__c.4567>:
    2ae0:	46 49 58 45 44 5f 56 4f 4c 55 4d 45 53 00           FIXED_VOLUMES.

00002aee <__c.4565>:
    2aee:	4d 41 58 49 4d 55 4d 5f 49 4e 54 45 52 4c 45 41     MAXIMUM_INTERLEA
    2afe:	56 45 00                                            VE.

00002b01 <__c.4563>:
    2b01:	41 43 43 45 53 53 5f 54 49 4d 45 00                 ACCESS_TIME.

00002b0d <__c.4561>:
    2b0d:	4f 50 54 49 4d 41 4c 5f 52 45 54 52 59 5f 54 49     OPTIMAL_RETRY_TI
    2b1d:	4d 45 00                                            ME.

00002b20 <__c.4559>:
    2b20:	43 4f 4e 54 49 4e 4f 55 53 5f 54 52 41 4e 53 46     CONTINOUS_TRANSF
    2b30:	45 52 5f 52 41 54 45 00                             ER_RATE.

00002b38 <__c.4557>:
    2b38:	42 4c 4f 43 4b 5f 54 49 4d 45 00                    BLOCK_TIME.

00002b43 <__c.4555>:
    2b43:	42 55 52 53 54 5f 53 49 5a 45 00                    BURST_SIZE.

00002b4e <__c.4553>:
    2b4e:	42 55 46 46 45 52 45 44 5f 42 4c 4f 43 4b 53 00     BUFFERED_BLOCKS.

00002b5e <__c.4551>:
    2b5e:	42 59 54 45 53 5f 50 45 52 5f 42 4c 4f 43 4b 00     BYTES_PER_BLOCK.

00002b6e <__c.4549>:
    2b6e:	44 45 56 49 43 45 5f 4e 55 4d 42 45 52 00           DEVICE_NUMBER.

00002b7c <__c.4547>:
    2b7c:	55 4e 49 54 5f 54 59 50 45 00                       UNIT_TYPE.

00002b86 <__c.4545>:
    2b86:	20 20 55 4e 49 54 0a 00                               UNIT..

00002b8e <__c.4543>:
    2b8e:	54 59 50 45 00                                      TYPE.

00002b93 <__c.4541>:
    2b93:	54 52 41 4e 53 46 45 52 5f 52 41 54 45 00           TRANSFER_RATE.

00002ba1 <__c.4539>:
    2ba1:	55 4e 49 54 53 5f 49 4e 53 54 41 4c 4c 45 44 00     UNITS_INSTALLED.

00002bb1 <__c.4537>:
    2bb1:	20 20 43 4f 4e 54 52 4f 4c 4c 45 52 0a 00             CONTROLLER..

00002bbf <__c.4535>:
    2bbf:	49 44 00                                            ID.

00002bc2 <__c.4533>:
    2bc2:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

00002bcc <__c.4531>:
    2bcc:	46 49 4c 45 00                                      FILE.

00002bd1 <__c.4529>:
    2bd1:	50 50 52 00                                         PPR.

00002bd5 <__c.4527>:
    2bd5:	41 44 44 52 45 53 53 00                             ADDRESS.

00002bdd <__c.4525>:
    2bdd:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00002be7 <__c.4523>:
    2be7:	53 53 38 30 0a 00                                   SS80..

00002bed <__c.4520>:
    2bed:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    2bfd:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00002c0d <__c.4512>:
    2c0d:	0a 00                                               ..

00002c0f <__c.4507>:
    2c0f:	20 20 50 52 49 4e 54 45 52 5f 4d 53 41 20 3d 20       PRINTER_MSA = 
    2c1f:	25 30 32 58 48 0a 00                                %02XH..

00002c26 <__c.4505>:
    2c26:	20 20 50 52 49 4e 54 45 52 5f 4d 54 41 20 3d 20       PRINTER_MTA = 
    2c36:	25 30 32 58 48 0a 00                                %02XH..

00002c3d <__c.4503>:
    2c3d:	20 20 50 52 49 4e 54 45 52 5f 4d 4c 41 20 3d 20       PRINTER_MLA = 
    2c4d:	25 30 32 58 48 0a 00                                %02XH..

00002c54 <__c.4501>:
    2c54:	20 20 41 4d 49 47 4f 5f 4d 53 41 20 20 20 3d 20       AMIGO_MSA   = 
    2c64:	25 30 32 58 48 0a 00                                %02XH..

00002c6b <__c.4499>:
    2c6b:	20 20 41 4d 49 47 4f 5f 4d 54 41 20 20 20 3d 20       AMIGO_MTA   = 
    2c7b:	25 30 32 58 48 0a 00                                %02XH..

00002c82 <__c.4497>:
    2c82:	20 20 41 4d 49 47 4f 5f 4d 4c 41 20 20 20 3d 20       AMIGO_MLA   = 
    2c92:	25 30 32 58 48 0a 00                                %02XH..

00002c99 <__c.4495>:
    2c99:	20 20 53 53 38 30 5f 4d 53 41 20 20 20 20 3d 20       SS80_MSA    = 
    2ca9:	25 30 32 58 48 0a 00                                %02XH..

00002cb0 <__c.4493>:
    2cb0:	20 20 53 53 38 30 5f 4d 54 41 20 20 20 20 3d 20       SS80_MTA    = 
    2cc0:	25 30 32 58 48 0a 00                                %02XH..

00002cc7 <__c.4491>:
    2cc7:	20 20 53 53 38 30 5f 4d 4c 41 20 20 20 20 3d 20       SS80_MLA    = 
    2cd7:	25 30 32 58 48 0a 00                                %02XH..

00002cde <__c.4488>:
    2cde:	4c 69 73 74 65 6e 20 61 6e 64 20 54 61 6c 6b 20     Listen and Talk 
    2cee:	41 64 64 72 65 73 73 20 53 65 74 74 69 6e 67 73     Address Settings
    2cfe:	0a 00                                               ..

00002d00 <__c.4482>:
    2d00:	20 20 20 20 25 2d 32 35 73 20 3d 20 22 25 73 22         %-25s = "%s"
    2d10:	0a 00                                               ..

00002d12 <__c.4471>:
    2d12:	20 20 20 20 25 2d 32 35 73 20 3d 20 25 38 6c 78         %-25s = %8lx
    2d22:	48 20 28 25 6c 64 29 0a 00                          H (%ld)..

00002d2b <__c.4460>:
    2d2b:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    2d3b:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    2d4b:	2a 2a 2a 2a 2a 0a 00                                *****..

00002d52 <__c.4458>:
    2d52:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    2d62:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

00002d6f <__c.4456>:
    2d6f:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    2d7f:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    2d8f:	0a 00                                               ..

00002d91 <__c.4452>:
    2d91:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    2da1:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    2db1:	0a 00                                               ..

00002db3 <__c.4449>:
    2db3:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    2dc3:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    2dd3:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00002de3 <__c.4446>:
    2de3:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    2df3:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    2e03:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00002e12 <__c.4443>:
    2e12:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    2e22:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    2e32:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00002e42 <__c.4441>:
    2e42:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    2e52:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

00002e5b <__c.4438>:
    2e5b:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    2e6b:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    2e7b:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002e89 <__c.4435>:
    2e89:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2e99:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    2ea9:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002eb7 <__c.4432>:
    2eb7:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2ec7:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    2ed7:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00002ee3 <__c.4429>:
    2ee3:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2ef3:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    2f03:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    2f13:	0a 00                                               ..

00002f15 <__c.4426>:
    2f15:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2f25:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    2f35:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002f43 <__c.4423>:
    2f43:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2f53:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    2f63:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002f71 <__c.4420>:
    2f71:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2f81:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    2f91:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00002f9e <__c.4417>:
    2f9e:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    2fae:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    2fbe:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00002fcf <__c.4414>:
    2fcf:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    2fdf:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    2fef:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00002ff9 <__c.4410>:
    2ff9:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 52 54     Unexpected START
    3009:	20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74 20 6c      token: %s, at l
    3019:	69 6e 65 3a 25 64 0a 00                             ine:%d..

00003021 <__c.4408>:
    3021:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    3031:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

0000303a <__c.4404>:
    303a:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    304a:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00003058 <__c.4402>:
    3058:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00003065 <__c.4383>:
    3065:	73 65 74 5f 43 6f 6e 66 69 67 5f 44 65 66 61 75     set_Config_Defau
    3075:	6c 74 73 3a 20 20 55 73 69 6e 67 20 64 65 66 61     lts:  Using defa
    3085:	75 6c 74 20 50 52 49 4e 54 45 52 20 73 65 74 74     ult PRINTER sett
    3095:	69 6e 67 73 0a 00                                   ings..

0000309b <__c.4381>:
    309b:	73 65 74 5f 43 6f 6e 66 69 67 5f 44 65 66 61 75     set_Config_Defau
    30ab:	6c 74 73 3a 20 20 55 73 69 6e 67 20 64 65 66 61     lts:  Using defa
    30bb:	75 6c 74 20 41 6d 69 67 6f 20 39 31 32 31 44 0a     ult Amigo 9121D.
	...

000030cc <__c.4379>:
    30cc:	73 65 74 5f 43 6f 6e 66 69 67 5f 44 65 66 61 75     set_Config_Defau
    30dc:	6c 74 73 3a 20 55 73 69 6e 67 20 64 65 66 61 75     lts: Using defau
    30ec:	6c 74 20 53 53 2f 38 30 20 39 31 33 34 4c 0a 00     lt SS/80 9134L..

000030fc <__c.4374>:
    30fc:	6c 69 6e 65 3a 25 64 2c 20 25 73 20 69 73 20 61     line:%d, %s is a
    310c:	62 6f 76 65 20 72 61 6e 67 65 20 25 64 0a 00        bove range %d..

0000311b <__c.4372>:
    311b:	6c 69 6e 65 3a 25 64 2c 20 25 73 20 69 73 20 62     line:%d, %s is b
    312b:	65 6c 6f 77 20 72 61 6e 67 65 20 25 64 0a 00        elow range %d..

0000313a <__c.4370>:
    313a:	6c 69 6e 65 3a 25 64 2c 20 6d 69 73 73 69 6e 67     line:%d, missing
    314a:	20 76 61 6c 75 65 0a 00                              value..

00003152 <__c.4347>:
    3152:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    3162:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    3172:	0a 00                                               ..

00003174 <__c.4340>:
    3174:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    3184:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    3194:	6c 6c 0a 00                                         ll..

00003198 <__c.4333>:
    3198:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    31a8:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    31b8:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

000031c3 <__c.4331>:
    31c3:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    31d3:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    31e3:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    31f3:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

000031fb <__c.4329>:
    31fb:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    320b:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    321b:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    322b:	3a 25 73 0a 00                                      :%s..

00003230 <__c.4327>:
    3230:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    3240:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    3250:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    3260:	55 4c 4c 0a 00                                      ULL..

00003265 <__c.4325>:
    3265:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    3275:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    3285:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    3295:	66 20 72 61 6e 67 65 0a 00                          f range..

0000329e <__c.4323>:
    329e:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    32ae:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    32be:	6e 67 65 0a 00                                      nge..

000032c3 <__c.4624>:
    32c3:	46 6f 72 6d 61 74 69 6e 67 3a 20 77 72 6f 74 65     Formating: wrote
    32d3:	3a 5b 25 6c 64 5d 20 73 65 63 74 6f 72 73 0a 00     :[%ld] sectors..

000032e3 <__c.4622>:
    32e3:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    32f3:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

00003303 <__c.4620>:
    3303:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3313:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    3323:	30 0a 00                                            0..

00003326 <__c.4618>:
    3326:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    3336:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    3346:	70 74 79 0a 00                                      pty..

0000334b <__c.4616>:
    334b:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    335b:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    336b:	73 20 65 6d 70 74 79 0a 00                          s empty..

00003374 <__c.4603>:
    3374:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    3384:	20 25 31 30 73 0a 00                                 %10s..

0000338b <__c.4601>:
    338b:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    339b:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    33ab:	74 20 66 6f 75 6e 64 0a 00                          t found..

000033b4 <__c.4599>:
    33b4:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    33c4:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    33d4:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    33e4:	74 65 72 73 0a 00                                   ters..

000033ea <__c.4597>:
    33ea:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    33fa:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    340a:	65 6d 70 74 79 0a 00                                empty..

00003411 <__c.4595>:
    3411:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3421:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    3431:	65 6d 70 74 79 0a 00                                empty..

00003438 <__c.4593>:
    3438:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3448:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    3458:	20 65 6d 70 74 79 0a 00                              empty..

00003460 <__c.4584>:
    3460:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

0000346f <__c.4582>:
    346f:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    347f:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    348f:	20 66 6f 75 6e 64 0a 00                              found..

00003497 <__c.4580>:
    3497:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    34a7:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

000034b6 <__c.4578>:
    34b6:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    34c6:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

000034d6 <__c.4576>:
    34d6:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    34e6:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    34f6:	70 74 79 0a 00                                      pty..

000034fb <__c.4568>:
    34fb:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

00003508 <__c.4563>:
    3508:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

00003515 <__c.4561>:
    3515:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3525:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3535:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003545 <__c.4559>:
    3545:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3555:	73 0a 00                                            s..

00003558 <__c.4557>:
    3558:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3568:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    3578:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

00003587 <__c.4555>:
    3587:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    3597:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

000035a3 <__c.4553>:
    35a3:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    35b3:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

000035be <__c.4551>:
    35be:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    35ce:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

000035de <__c.4534>:
    35de:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

000035eb <__c.4529>:
    35eb:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

000035f8 <__c.4527>:
    35f8:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3608:	73 0a 00                                            s..

0000360b <__c.4525>:
    360b:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    361b:	75 6e 64 3a 25 73 0a 00                             und:%s..

00003623 <__c.4508>:
    3623:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

00003630 <__c.4505>:
    3630:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3640:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    3650:	20 65 72 72 6f 72 0a 00                              error..

00003658 <__c.4497>:
    3658:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

00003665 <__c.4495>:
    3665:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3675:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    3685:	20 65 72 72 6f 72 0a 00                              error..

0000368d <__c.4492>:
    368d:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    369d:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    36ad:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    36bd:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    36cd:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    36dd:	30 32 58 48 0a 00                                   02XH..

000036e3 <__c.4490>:
    36e3:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    36f3:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    3703:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    3713:	20 25 64 0a 00                                       %d..

00003718 <__c.4486>:
    3718:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

00003728 <__c.4484>:
    3728:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    3738:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    3748:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    3758:	30 78 45 30 31 33 0a 00                             0xE013..

00003760 <__c.4482>:
    3760:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    3770:	6e 64 3a 25 73 0a 00                                nd:%s..

00003777 <__c.4480>:
    3777:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3787:	75 6e 64 3a 25 73 0a 00                             und:%s..

0000378f <__c.4456>:
    378f:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

0000379c <__c.4454>:
    379c:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    37ac:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000037b5 <__c.4452>:
    37b5:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    37c5:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

000037ce <__c.4450>:
    37ce:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    37de:	20 20 25 34 64 0a 00                                  %4d..

000037e5 <__c.4448>:
    37e5:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    37f5:	20 20 20 25 73 0a 00                                   %s..

000037fc <__c.4446>:
    37fc:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    380c:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    381c:	77 72 69 74 65 0a 00                                write..

00003823 <__c.4444>:
    3823:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3833:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    3843:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

00003853 <__c.4442>:
    3853:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3863:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    3873:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

00003882 <__c.4440>:
    3882:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3892:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    38a2:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

000038b2 <__c.4438>:
    38b2:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    38c2:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    38d2:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

000038e1 <__c.4436>:
    38e1:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    38f1:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    3901:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

0000390f <__c.4434>:
    390f:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    391f:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    392f:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    393f:	79 0a 00                                            y..

00003942 <__c.4420>:
    3942:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

0000394f <__c.4418>:
    394f:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

0000395c <__c.4413>:
    395c:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

00003969 <__c.4396>:
    3969:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    3979:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    3989:	25 64 0a 00                                         %d..

0000398d <__c.4379>:
    398d:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    399d:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    39ad:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    39bd:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

000039c6 <__c.4365>:
    39c6:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    39d6:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    39e6:	62 69 67 0a 00                                      big..

000039eb <__c.4363>:
    39eb:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    39fb:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    3a0b:	63 74 65 72 73 0a 00                                cters..

00003a12 <__c.4356>:
    3a12:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    3a22:	73 0a 00                                            s..

00003a25 <__c.4354>:
    3a25:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    3a35:	73 0a 00                                            s..

00003a38 <__c.4352>:
    3a38:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

00003a45 <__c.4350>:
    3a45:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

00003a51 <__c.4348>:
    3a51:	0a 00                                               ..

00003a53 <__c.4345>:
    3a53:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    3a63:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    3a73:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

00003a83 <__c.4343>:
    3a83:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3a93:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3aa3:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3ab3:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    3ac3:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003acf <__c.4340>:
    3acf:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3adf:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3aef:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3aff:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003b0f <__c.4338>:
    3b0f:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    3b1f:	3a 5b 25 73 5d 0a 00                                :[%s]..

00003b26 <__c.4328>:
    3b26:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b36:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    3b46:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    3b56:	64 0a 00                                            d..

00003b59 <__c.4326>:
    3b59:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b69:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3b79:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    3b89:	64 0a 00                                            d..

00003b8c <__c.4324>:
    3b8c:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b9c:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3bac:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3bbc:	69 6c 65 64 0a 00                                   iled..

00003bc2 <__c.4322>:
    3bc2:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3bd2:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3be2:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3bf2:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003c01 <__c.4309>:
    3c01:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3c11:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3c21:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    3c31:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    3c41:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

00003c52 <__c.4306>:
    3c52:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3c62:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3c72:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003c7b <__c.4304>:
    3c7b:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3c8b:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3c9b:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3cab:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003cb3 <__c.4292>:
    3cb3:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3cc3:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3cd3:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3ce3:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3cf3:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003d00 <__c.4267>:
    3d00:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3d10:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003d20 <__c.4258>:
    3d20:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3d30:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    3d40:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    3d50:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003d5a <__c.4239>:
    3d5a:	57 72 6f 74 65 3a 20 25 6c 64 0a 00                 Wrote: %ld..

00003d66 <__c.4234>:
    3d66:	57 72 6f 74 65 3a 20 25 6c 64 0d 00                 Wrote: %ld..

00003d72 <__c.4229>:
    3d72:	57 72 6f 74 65 3a 20 25 6c 64 0d 00                 Wrote: %ld..

00003d7e <__c.4221>:
    3d7e:	57 72 6f 74 65 3a 20 25 6c 64 0d 00                 Wrote: %ld..

00003d8a <__c.4205>:
    3d8a:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d9a:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3daa:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003db6 <__c.4203>:
    3db6:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3dc6:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3dd6:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003de1 <__c.4201>:
    3de1:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3df1:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3e01:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3e11:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3e21:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003e2c <__c.4199>:
    3e2c:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e3c:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3e4c:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3e5c:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3e6c:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003e77 <__c.4197>:
    3e77:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e87:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3e97:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003ea5 <__c.4195>:
    3ea5:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3eb5:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3ec5:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3ed5:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003ee6 <__c.4193>:
    3ee6:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ef6:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3f06:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3f16:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3f26:	58 68 0a 00                                         Xh..

00003f2a <__c.4191>:
    3f2a:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3f3a:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003f4b <__c.4185>:
    3f4b:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f5b:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3f6b:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003f77 <__c.4183>:
    3f77:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f87:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3f97:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003fa6 <__c.4181>:
    3fa6:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3fb6:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3fc6:	25 6c 64 0a 00                                      %ld..

00003fcb <__c.4179>:
    3fcb:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3fdb:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3feb:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3ffb:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00004004 <__c.4177>:
    4004:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4014:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    4024:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    4034:	62 65 20 7a 65 72 6f 0a 00                          be zero..

0000403d <__c.4175>:
    403d:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    404d:	58 48 20 3e 20 31 0a 00                             XH > 1..

00004055 <__c.4173>:
    4055:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4065:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    4075:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    4085:	64 20 31 30 30 30 48 0a 00                          d 1000H..

0000408e <__c.4171>:
    408e:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    409e:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

000040ad <__c.4164>:
    40ad:	0a 00                                               ..

000040af <__c.4162>:
    40af:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    40bf:	20 20 20 20 20 20 25 73 0a 00                             %s..

000040c9 <__c.4160>:
    40c9:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    40d9:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

000040e5 <__c.4158>:
    40e5:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    40f5:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004102 <__c.4156>:
    4102:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    4112:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

0000411f <__c.4154>:
    411f:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    412f:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000413c <__c.4152>:
    413c:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    414c:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

00004158 <__c.4150>:
    4158:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    4168:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004174 <__c.4148>:
    4174:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    4184:	20 20 20 20 20 20 25 73 0a 00                             %s..

0000418e <__c.4146>:
    418e:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    419e:	20 20 20 20 20 20 25 73 0a 00                             %s..

000041a8 <__c.4144>:
    41a8:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    41b8:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000041c4 <__c.4142>:
    41c4:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    41d4:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000041e0 <__c.4140>:
    41e0:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    41f0:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041fd <__c.4138>:
    41fd:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    420d:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000421a <__c.4136>:
    421a:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    422a:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004236 <__c.4134>:
    4236:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    4246:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004250 <__c.4132>:
    4250:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    4260:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000426d <__c.4130>:
    426d:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    427d:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000428a <__c.4128>:
    428a:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    429a:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042a7 <__c.4126>:
    42a7:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    42b7:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042c4 <__c.4124>:
    42c4:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    42d4:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

000042e1 <__c.4122>:
    42e1:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    42f1:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042fe <__c.4120>:
    42fe:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    430e:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000431b <__c.4118>:
    431b:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    432b:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004338 <__c.4116>:
    4338:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    4348:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004352 <__c.4114>:
    4352:	0a 25 73 0a 00                                      .%s..

00004357 <__c.3991>:
    4357:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    4367:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    4377:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    4387:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

00004394 <__c.3982>:
    4394:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    43a4:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    43b4:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    43c4:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

000043d0 <__c.3973>:
    43d0:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    43e0:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

000043f1 <__c.3966>:
    43f1:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    4401:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

0000440a <__c.3960>:
    440a:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    441a:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    442a:	25 73 5d 0a 00                                      %s]..

0000442f <__c.3948>:
    442f:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    443f:	6f 69 6e 74 65 72 0a 00                             ointer..

00004447 <__c.3943>:
    4447:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    4457:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    4467:	20 6d 65 6d 6f 72 79 0a 00                           memory..

00004470 <__c.3931>:
    4470:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    4480:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    4490:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    44a0:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    44b0:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    44c0:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    44d0:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    44e0:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    44f0:	65 63 74 6f 72 73 0a 6c 69 66 20 64 65 6c 20 6c     ectors.lif del l
    4500:	69 66 69 6d 61 67 65 20 6e 61 6d 65 0a 6c 69 66     ifimage name.lif
    4510:	20 64 69 72 20 6c 69 66 69 6d 61 67 65 0a 6c 69      dir lifimage.li
    4520:	66 20 65 78 74 72 61 63 74 20 6c 69 66 69 6d 61     f extract lifima
    4530:	67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f 61 73     ge lifname to_as
    4540:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 65 78 74     cii_file.lif ext
    4550:	72 61 63 74 62 69 6e 20 6c 69 66 69 6d 61 67 65     ractbin lifimage
    4560:	20 6c 69 66 6e 61 6d 65 20 74 6f 5f 6c 69 66 5f      lifname to_lif_
    4570:	66 69 6c 65 0a 20 20 20 20 65 78 74 72 61 63 74     file.    extract
    4580:	73 20 61 20 66 69 6c 65 20 69 6e 74 6f 20 61 20     s a file into a 
    4590:	73 69 67 6c 65 20 66 69 6c 65 20 4c 49 46 20 69     sigle file LIF i
    45a0:	6d 61 67 65 0a 6c 69 66 20 72 65 6e 61 6d 65 20     mage.lif rename 
    45b0:	6c 69 66 69 6d 61 67 65 20 6f 6c 64 6c 69 66 6e     lifimage oldlifn
    45c0:	61 6d 65 20 6e 65 77 6c 69 66 6e 61 6d 65 0a 55     ame newlifname.U
    45d0:	73 65 20 2d 64 20 61 66 74 65 72 20 66 69 72 73     se -d after firs
    45e0:	74 20 6b 65 79 77 6f 72 64 20 27 6c 69 66 27 20     t keyword 'lif' 
    45f0:	61 62 6f 76 65 20 66 6f 72 20 4c 49 46 20 66 69     above for LIF fi
    4600:	6c 65 73 79 73 74 65 6d 20 64 65 62 75 67 67 69     lesystem debuggi
    4610:	6e 67 0a 0a 00                                      ng...

00004615 <__c.3929>:
    4615:	6c 69 66 20 68 65 6c 70 0a 00                       lif help..

0000461f <__c.4379>:
    461f:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    462f:	53 4b 0a 00                                         SK..

00004633 <__c.4377>:
    4633:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    4643:	30 34 78 48 0a 00                                   04xH..

00004649 <__c.4375>:
    4649:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    4659:	64 6f 6e 65 0a 00                                   done..

0000465f <__c.4373>:
    465f:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    466f:	6f 6e 65 0a 00                                      one..

00004674 <__c.4371>:
    4674:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 20     GPIB Timer init 
    4684:	64 6f 6e 65 0a 00                                   done..

0000468a <__c.4369>:
    468a:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    469a:	0a 00                                               ..

0000469c <__c.4367>:
    469c:	50 72 69 6e 74 65 72 20 49 6e 69 74 20 64 6f 6e     Printer Init don
    46ac:	65 0a 00                                            e..

000046af <__c.4365>:
    46af:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 47 50 49     initializing GPI
    46bf:	42 20 62 75 73 0a 00                                B bus..

000046c6 <__c.4363>:
    46c6:	53 59 53 54 45 4d 5f 54 41 53 4b 5f 43 4f 55 4e     SYSTEM_TASK_COUN
    46d6:	54 45 52 5f 52 45 53 3a 25 6c 64 0a 00              TER_RES:%ld..

000046e3 <__c.4361>:
    46e3:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

000046f2 <__c.4359>:
    46f2:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     initializing I2C
    4702:	20 62 75 73 0a 00                                    bus..

00004708 <__c.4357>:
    4708:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     initializing SPI
    4718:	20 62 75 73 0a 00                                    bus..

0000471e <__c.4355>:
    471e:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    472e:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004738 <__c.4353>:
    4738:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4748:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004752 <__c.4351>:
    4752:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4762:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    4772:	35 64 69 73 6b 0a 00                                5disk..

00004779 <__c.4349>:
    4779:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004789 <__c.4347>:
    4789:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    4799:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

000047a6 <__c.4345>:
    47a6:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    47b6:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

000047c5 <__c.4343>:
    47c5:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    47d5:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    47e5:	3a 20 25 6c 64 0a 00                                : %ld..

000047ec <__c.4341>:
    47ec:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

000047fd <__c.4339>:
    47fd:	53 74 61 72 74 0a 00                                Start..

00004804 <__c.4331>:
    4804:	45 72 72 6f 72 3a 5b 25 73 5d 0a 00                 Error:[%s]..

00004810 <__c.4329>:
    4810:	0a 3e 00                                            .>.

00004813 <__c.4319>:
    4813:	64 65 6c 61 79 5f 74 65 73 74 73 0a 74 69 6d 65     delay_tests.time
    4823:	0a 73 65 74 64 61 74 65 0a 6d 65 6d 0a 0a 00        .setdate.mem...

00004832 <__c.4315>:
    4832:	4d 79 20 64 65 6c 61 79 73 0a 00                    My delays..

0000483d <__c.4313>:
    483d:	53 79 73 74 65 6d 20 64 65 6c 61 79 73 0a 00        System delays..

0000484c <__c.4309>:
    484c:	0a 00                                               ..

0000484e <__c.4307>:
    484e:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    485e:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004868 <__c.4305>:
    4868:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4878:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

00004882 <__c.4303>:
    4882:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    4892:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    48a2:	35 64 69 73 6b 0a 00                                5disk..

000048a9 <__c.4301>:
    48a9:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

000048b9 <__c.4299>:
    48b9:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    48c9:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

000048d6 <__c.4297>:
    48d6:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    48e6:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

000048f5 <__c.4295>:
    48f5:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    4905:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    4915:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..
	...

00004926 <__ctors_end>:
    4926:	11 24       	eor	r1, r1
    4928:	1f be       	out	0x3f, r1	; 63
    492a:	cf ef       	ldi	r28, 0xFF	; 255
    492c:	d0 e4       	ldi	r29, 0x40	; 64
    492e:	de bf       	out	0x3e, r29	; 62
    4930:	cd bf       	out	0x3d, r28	; 61

00004932 <__do_copy_data>:
    4932:	17 e1       	ldi	r17, 0x17	; 23
    4934:	a0 e0       	ldi	r26, 0x00	; 0
    4936:	b1 e0       	ldi	r27, 0x01	; 1
    4938:	e8 eb       	ldi	r30, 0xB8	; 184
    493a:	fd ed       	ldi	r31, 0xDD	; 221
    493c:	01 e0       	ldi	r16, 0x01	; 1
    493e:	0b bf       	out	0x3b, r16	; 59
    4940:	02 c0       	rjmp	.+4      	; 0x4946 <__do_copy_data+0x14>
    4942:	07 90       	elpm	r0, Z+
    4944:	0d 92       	st	X+, r0
    4946:	a8 3a       	cpi	r26, 0xA8	; 168
    4948:	b1 07       	cpc	r27, r17
    494a:	d9 f7       	brne	.-10     	; 0x4942 <__do_copy_data+0x10>

0000494c <__do_clear_bss>:
    494c:	2f e1       	ldi	r18, 0x1F	; 31
    494e:	a8 ea       	ldi	r26, 0xA8	; 168
    4950:	b7 e1       	ldi	r27, 0x17	; 23
    4952:	01 c0       	rjmp	.+2      	; 0x4956 <.do_clear_bss_start>

00004954 <.do_clear_bss_loop>:
    4954:	1d 92       	st	X+, r1

00004956 <.do_clear_bss_start>:
    4956:	ab 37       	cpi	r26, 0x7B	; 123
    4958:	b2 07       	cpc	r27, r18
    495a:	e1 f7       	brne	.-8      	; 0x4954 <.do_clear_bss_loop>
    495c:	0e 94 ac e7 	call	0x1cf58	; 0x1cf58 <main>
    4960:	0c 94 da ee 	jmp	0x1ddb4	; 0x1ddb4 <_exit>

00004964 <__bad_interrupt>:
    4964:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00004968 <vfprintf>:
    4968:	2f 92       	push	r2
    496a:	3f 92       	push	r3
    496c:	4f 92       	push	r4
    496e:	5f 92       	push	r5
    4970:	6f 92       	push	r6
    4972:	7f 92       	push	r7
    4974:	8f 92       	push	r8
    4976:	9f 92       	push	r9
    4978:	af 92       	push	r10
    497a:	bf 92       	push	r11
    497c:	cf 92       	push	r12
    497e:	df 92       	push	r13
    4980:	ef 92       	push	r14
    4982:	ff 92       	push	r15
    4984:	0f 93       	push	r16
    4986:	1f 93       	push	r17
    4988:	cf 93       	push	r28
    498a:	df 93       	push	r29
    498c:	cd b7       	in	r28, 0x3d	; 61
    498e:	de b7       	in	r29, 0x3e	; 62
    4990:	60 97       	sbiw	r28, 0x10	; 16
    4992:	0f b6       	in	r0, 0x3f	; 63
    4994:	f8 94       	cli
    4996:	de bf       	out	0x3e, r29	; 62
    4998:	0f be       	out	0x3f, r0	; 63
    499a:	cd bf       	out	0x3d, r28	; 61
    499c:	7c 01       	movw	r14, r24
    499e:	1b 01       	movw	r2, r22
    49a0:	6a 01       	movw	r12, r20
    49a2:	fc 01       	movw	r30, r24
    49a4:	17 82       	std	Z+7, r1	; 0x07
    49a6:	16 82       	std	Z+6, r1	; 0x06
    49a8:	83 81       	ldd	r24, Z+3	; 0x03
    49aa:	81 ff       	sbrs	r24, 1
    49ac:	44 c3       	rjmp	.+1672   	; 0x5036 <vfprintf+0x6ce>
    49ae:	9e 01       	movw	r18, r28
    49b0:	2f 5f       	subi	r18, 0xFF	; 255
    49b2:	3f 4f       	sbci	r19, 0xFF	; 255
    49b4:	39 01       	movw	r6, r18
    49b6:	f7 01       	movw	r30, r14
    49b8:	93 81       	ldd	r25, Z+3	; 0x03
    49ba:	f1 01       	movw	r30, r2
    49bc:	93 fd       	sbrc	r25, 3
    49be:	85 91       	lpm	r24, Z+
    49c0:	93 ff       	sbrs	r25, 3
    49c2:	81 91       	ld	r24, Z+
    49c4:	1f 01       	movw	r2, r30
    49c6:	88 23       	and	r24, r24
    49c8:	09 f4       	brne	.+2      	; 0x49cc <vfprintf+0x64>
    49ca:	31 c3       	rjmp	.+1634   	; 0x502e <vfprintf+0x6c6>
    49cc:	85 32       	cpi	r24, 0x25	; 37
    49ce:	39 f4       	brne	.+14     	; 0x49de <vfprintf+0x76>
    49d0:	93 fd       	sbrc	r25, 3
    49d2:	85 91       	lpm	r24, Z+
    49d4:	93 ff       	sbrs	r25, 3
    49d6:	81 91       	ld	r24, Z+
    49d8:	1f 01       	movw	r2, r30
    49da:	85 32       	cpi	r24, 0x25	; 37
    49dc:	39 f4       	brne	.+14     	; 0x49ec <vfprintf+0x84>
    49de:	b7 01       	movw	r22, r14
    49e0:	90 e0       	ldi	r25, 0x00	; 0
    49e2:	0e 94 ba 78 	call	0xf174	; 0xf174 <fputc>
    49e6:	56 01       	movw	r10, r12
    49e8:	65 01       	movw	r12, r10
    49ea:	e5 cf       	rjmp	.-54     	; 0x49b6 <vfprintf+0x4e>
    49ec:	10 e0       	ldi	r17, 0x00	; 0
    49ee:	51 2c       	mov	r5, r1
    49f0:	91 2c       	mov	r9, r1
    49f2:	ff e1       	ldi	r31, 0x1F	; 31
    49f4:	f9 15       	cp	r31, r9
    49f6:	d8 f0       	brcs	.+54     	; 0x4a2e <vfprintf+0xc6>
    49f8:	8b 32       	cpi	r24, 0x2B	; 43
    49fa:	79 f0       	breq	.+30     	; 0x4a1a <vfprintf+0xb2>
    49fc:	38 f4       	brcc	.+14     	; 0x4a0c <vfprintf+0xa4>
    49fe:	80 32       	cpi	r24, 0x20	; 32
    4a00:	79 f0       	breq	.+30     	; 0x4a20 <vfprintf+0xb8>
    4a02:	83 32       	cpi	r24, 0x23	; 35
    4a04:	a1 f4       	brne	.+40     	; 0x4a2e <vfprintf+0xc6>
    4a06:	f9 2d       	mov	r31, r9
    4a08:	f0 61       	ori	r31, 0x10	; 16
    4a0a:	2e c0       	rjmp	.+92     	; 0x4a68 <vfprintf+0x100>
    4a0c:	8d 32       	cpi	r24, 0x2D	; 45
    4a0e:	61 f0       	breq	.+24     	; 0x4a28 <vfprintf+0xc0>
    4a10:	80 33       	cpi	r24, 0x30	; 48
    4a12:	69 f4       	brne	.+26     	; 0x4a2e <vfprintf+0xc6>
    4a14:	29 2d       	mov	r18, r9
    4a16:	21 60       	ori	r18, 0x01	; 1
    4a18:	2d c0       	rjmp	.+90     	; 0x4a74 <vfprintf+0x10c>
    4a1a:	39 2d       	mov	r19, r9
    4a1c:	32 60       	ori	r19, 0x02	; 2
    4a1e:	93 2e       	mov	r9, r19
    4a20:	89 2d       	mov	r24, r9
    4a22:	84 60       	ori	r24, 0x04	; 4
    4a24:	98 2e       	mov	r9, r24
    4a26:	2a c0       	rjmp	.+84     	; 0x4a7c <vfprintf+0x114>
    4a28:	e9 2d       	mov	r30, r9
    4a2a:	e8 60       	ori	r30, 0x08	; 8
    4a2c:	15 c0       	rjmp	.+42     	; 0x4a58 <vfprintf+0xf0>
    4a2e:	97 fc       	sbrc	r9, 7
    4a30:	2d c0       	rjmp	.+90     	; 0x4a8c <vfprintf+0x124>
    4a32:	20 ed       	ldi	r18, 0xD0	; 208
    4a34:	28 0f       	add	r18, r24
    4a36:	2a 30       	cpi	r18, 0x0A	; 10
    4a38:	88 f4       	brcc	.+34     	; 0x4a5c <vfprintf+0xf4>
    4a3a:	96 fe       	sbrs	r9, 6
    4a3c:	06 c0       	rjmp	.+12     	; 0x4a4a <vfprintf+0xe2>
    4a3e:	3a e0       	ldi	r19, 0x0A	; 10
    4a40:	13 9f       	mul	r17, r19
    4a42:	20 0d       	add	r18, r0
    4a44:	11 24       	eor	r1, r1
    4a46:	12 2f       	mov	r17, r18
    4a48:	19 c0       	rjmp	.+50     	; 0x4a7c <vfprintf+0x114>
    4a4a:	8a e0       	ldi	r24, 0x0A	; 10
    4a4c:	58 9e       	mul	r5, r24
    4a4e:	20 0d       	add	r18, r0
    4a50:	11 24       	eor	r1, r1
    4a52:	52 2e       	mov	r5, r18
    4a54:	e9 2d       	mov	r30, r9
    4a56:	e0 62       	ori	r30, 0x20	; 32
    4a58:	9e 2e       	mov	r9, r30
    4a5a:	10 c0       	rjmp	.+32     	; 0x4a7c <vfprintf+0x114>
    4a5c:	8e 32       	cpi	r24, 0x2E	; 46
    4a5e:	31 f4       	brne	.+12     	; 0x4a6c <vfprintf+0x104>
    4a60:	96 fc       	sbrc	r9, 6
    4a62:	e5 c2       	rjmp	.+1482   	; 0x502e <vfprintf+0x6c6>
    4a64:	f9 2d       	mov	r31, r9
    4a66:	f0 64       	ori	r31, 0x40	; 64
    4a68:	9f 2e       	mov	r9, r31
    4a6a:	08 c0       	rjmp	.+16     	; 0x4a7c <vfprintf+0x114>
    4a6c:	8c 36       	cpi	r24, 0x6C	; 108
    4a6e:	21 f4       	brne	.+8      	; 0x4a78 <vfprintf+0x110>
    4a70:	29 2d       	mov	r18, r9
    4a72:	20 68       	ori	r18, 0x80	; 128
    4a74:	92 2e       	mov	r9, r18
    4a76:	02 c0       	rjmp	.+4      	; 0x4a7c <vfprintf+0x114>
    4a78:	88 36       	cpi	r24, 0x68	; 104
    4a7a:	41 f4       	brne	.+16     	; 0x4a8c <vfprintf+0x124>
    4a7c:	f1 01       	movw	r30, r2
    4a7e:	93 fd       	sbrc	r25, 3
    4a80:	85 91       	lpm	r24, Z+
    4a82:	93 ff       	sbrs	r25, 3
    4a84:	81 91       	ld	r24, Z+
    4a86:	1f 01       	movw	r2, r30
    4a88:	81 11       	cpse	r24, r1
    4a8a:	b3 cf       	rjmp	.-154    	; 0x49f2 <vfprintf+0x8a>
    4a8c:	9b eb       	ldi	r25, 0xBB	; 187
    4a8e:	98 0f       	add	r25, r24
    4a90:	93 30       	cpi	r25, 0x03	; 3
    4a92:	20 f4       	brcc	.+8      	; 0x4a9c <vfprintf+0x134>
    4a94:	99 2d       	mov	r25, r9
    4a96:	90 61       	ori	r25, 0x10	; 16
    4a98:	80 5e       	subi	r24, 0xE0	; 224
    4a9a:	07 c0       	rjmp	.+14     	; 0x4aaa <vfprintf+0x142>
    4a9c:	9b e9       	ldi	r25, 0x9B	; 155
    4a9e:	98 0f       	add	r25, r24
    4aa0:	93 30       	cpi	r25, 0x03	; 3
    4aa2:	08 f0       	brcs	.+2      	; 0x4aa6 <vfprintf+0x13e>
    4aa4:	66 c1       	rjmp	.+716    	; 0x4d72 <vfprintf+0x40a>
    4aa6:	99 2d       	mov	r25, r9
    4aa8:	9f 7e       	andi	r25, 0xEF	; 239
    4aaa:	96 ff       	sbrs	r25, 6
    4aac:	16 e0       	ldi	r17, 0x06	; 6
    4aae:	9f 73       	andi	r25, 0x3F	; 63
    4ab0:	99 2e       	mov	r9, r25
    4ab2:	85 36       	cpi	r24, 0x65	; 101
    4ab4:	19 f4       	brne	.+6      	; 0x4abc <vfprintf+0x154>
    4ab6:	90 64       	ori	r25, 0x40	; 64
    4ab8:	99 2e       	mov	r9, r25
    4aba:	08 c0       	rjmp	.+16     	; 0x4acc <vfprintf+0x164>
    4abc:	86 36       	cpi	r24, 0x66	; 102
    4abe:	21 f4       	brne	.+8      	; 0x4ac8 <vfprintf+0x160>
    4ac0:	39 2f       	mov	r19, r25
    4ac2:	30 68       	ori	r19, 0x80	; 128
    4ac4:	93 2e       	mov	r9, r19
    4ac6:	02 c0       	rjmp	.+4      	; 0x4acc <vfprintf+0x164>
    4ac8:	11 11       	cpse	r17, r1
    4aca:	11 50       	subi	r17, 0x01	; 1
    4acc:	97 fe       	sbrs	r9, 7
    4ace:	07 c0       	rjmp	.+14     	; 0x4ade <vfprintf+0x176>
    4ad0:	1c 33       	cpi	r17, 0x3C	; 60
    4ad2:	50 f4       	brcc	.+20     	; 0x4ae8 <vfprintf+0x180>
    4ad4:	44 24       	eor	r4, r4
    4ad6:	43 94       	inc	r4
    4ad8:	41 0e       	add	r4, r17
    4ada:	27 e0       	ldi	r18, 0x07	; 7
    4adc:	0b c0       	rjmp	.+22     	; 0x4af4 <vfprintf+0x18c>
    4ade:	18 30       	cpi	r17, 0x08	; 8
    4ae0:	38 f0       	brcs	.+14     	; 0x4af0 <vfprintf+0x188>
    4ae2:	27 e0       	ldi	r18, 0x07	; 7
    4ae4:	17 e0       	ldi	r17, 0x07	; 7
    4ae6:	05 c0       	rjmp	.+10     	; 0x4af2 <vfprintf+0x18a>
    4ae8:	27 e0       	ldi	r18, 0x07	; 7
    4aea:	9c e3       	ldi	r25, 0x3C	; 60
    4aec:	49 2e       	mov	r4, r25
    4aee:	02 c0       	rjmp	.+4      	; 0x4af4 <vfprintf+0x18c>
    4af0:	21 2f       	mov	r18, r17
    4af2:	41 2c       	mov	r4, r1
    4af4:	56 01       	movw	r10, r12
    4af6:	84 e0       	ldi	r24, 0x04	; 4
    4af8:	a8 0e       	add	r10, r24
    4afa:	b1 1c       	adc	r11, r1
    4afc:	f6 01       	movw	r30, r12
    4afe:	60 81       	ld	r22, Z
    4b00:	71 81       	ldd	r23, Z+1	; 0x01
    4b02:	82 81       	ldd	r24, Z+2	; 0x02
    4b04:	93 81       	ldd	r25, Z+3	; 0x03
    4b06:	04 2d       	mov	r16, r4
    4b08:	a3 01       	movw	r20, r6
    4b0a:	0e 94 87 ed 	call	0x1db0e	; 0x1db0e <__ftoa_engine>
    4b0e:	6c 01       	movw	r12, r24
    4b10:	f9 81       	ldd	r31, Y+1	; 0x01
    4b12:	fc 87       	std	Y+12, r31	; 0x0c
    4b14:	f0 ff       	sbrs	r31, 0
    4b16:	02 c0       	rjmp	.+4      	; 0x4b1c <vfprintf+0x1b4>
    4b18:	f3 ff       	sbrs	r31, 3
    4b1a:	06 c0       	rjmp	.+12     	; 0x4b28 <vfprintf+0x1c0>
    4b1c:	91 fc       	sbrc	r9, 1
    4b1e:	06 c0       	rjmp	.+12     	; 0x4b2c <vfprintf+0x1c4>
    4b20:	92 fe       	sbrs	r9, 2
    4b22:	06 c0       	rjmp	.+12     	; 0x4b30 <vfprintf+0x1c8>
    4b24:	00 e2       	ldi	r16, 0x20	; 32
    4b26:	05 c0       	rjmp	.+10     	; 0x4b32 <vfprintf+0x1ca>
    4b28:	0d e2       	ldi	r16, 0x2D	; 45
    4b2a:	03 c0       	rjmp	.+6      	; 0x4b32 <vfprintf+0x1ca>
    4b2c:	0b e2       	ldi	r16, 0x2B	; 43
    4b2e:	01 c0       	rjmp	.+2      	; 0x4b32 <vfprintf+0x1ca>
    4b30:	00 e0       	ldi	r16, 0x00	; 0
    4b32:	8c 85       	ldd	r24, Y+12	; 0x0c
    4b34:	8c 70       	andi	r24, 0x0C	; 12
    4b36:	19 f0       	breq	.+6      	; 0x4b3e <vfprintf+0x1d6>
    4b38:	01 11       	cpse	r16, r1
    4b3a:	5a c2       	rjmp	.+1204   	; 0x4ff0 <vfprintf+0x688>
    4b3c:	9b c2       	rjmp	.+1334   	; 0x5074 <vfprintf+0x70c>
    4b3e:	97 fe       	sbrs	r9, 7
    4b40:	10 c0       	rjmp	.+32     	; 0x4b62 <vfprintf+0x1fa>
    4b42:	4c 0c       	add	r4, r12
    4b44:	fc 85       	ldd	r31, Y+12	; 0x0c
    4b46:	f4 ff       	sbrs	r31, 4
    4b48:	04 c0       	rjmp	.+8      	; 0x4b52 <vfprintf+0x1ea>
    4b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b4c:	81 33       	cpi	r24, 0x31	; 49
    4b4e:	09 f4       	brne	.+2      	; 0x4b52 <vfprintf+0x1ea>
    4b50:	4a 94       	dec	r4
    4b52:	14 14       	cp	r1, r4
    4b54:	74 f5       	brge	.+92     	; 0x4bb2 <vfprintf+0x24a>
    4b56:	28 e0       	ldi	r18, 0x08	; 8
    4b58:	24 15       	cp	r18, r4
    4b5a:	78 f5       	brcc	.+94     	; 0x4bba <vfprintf+0x252>
    4b5c:	88 e0       	ldi	r24, 0x08	; 8
    4b5e:	48 2e       	mov	r4, r24
    4b60:	2c c0       	rjmp	.+88     	; 0x4bba <vfprintf+0x252>
    4b62:	96 fc       	sbrc	r9, 6
    4b64:	2a c0       	rjmp	.+84     	; 0x4bba <vfprintf+0x252>
    4b66:	81 2f       	mov	r24, r17
    4b68:	90 e0       	ldi	r25, 0x00	; 0
    4b6a:	8c 15       	cp	r24, r12
    4b6c:	9d 05       	cpc	r25, r13
    4b6e:	9c f0       	brlt	.+38     	; 0x4b96 <vfprintf+0x22e>
    4b70:	3c ef       	ldi	r19, 0xFC	; 252
    4b72:	c3 16       	cp	r12, r19
    4b74:	3f ef       	ldi	r19, 0xFF	; 255
    4b76:	d3 06       	cpc	r13, r19
    4b78:	74 f0       	brlt	.+28     	; 0x4b96 <vfprintf+0x22e>
    4b7a:	89 2d       	mov	r24, r9
    4b7c:	80 68       	ori	r24, 0x80	; 128
    4b7e:	98 2e       	mov	r9, r24
    4b80:	0a c0       	rjmp	.+20     	; 0x4b96 <vfprintf+0x22e>
    4b82:	e2 e0       	ldi	r30, 0x02	; 2
    4b84:	f0 e0       	ldi	r31, 0x00	; 0
    4b86:	ec 0f       	add	r30, r28
    4b88:	fd 1f       	adc	r31, r29
    4b8a:	e1 0f       	add	r30, r17
    4b8c:	f1 1d       	adc	r31, r1
    4b8e:	80 81       	ld	r24, Z
    4b90:	80 33       	cpi	r24, 0x30	; 48
    4b92:	19 f4       	brne	.+6      	; 0x4b9a <vfprintf+0x232>
    4b94:	11 50       	subi	r17, 0x01	; 1
    4b96:	11 11       	cpse	r17, r1
    4b98:	f4 cf       	rjmp	.-24     	; 0x4b82 <vfprintf+0x21a>
    4b9a:	97 fe       	sbrs	r9, 7
    4b9c:	0e c0       	rjmp	.+28     	; 0x4bba <vfprintf+0x252>
    4b9e:	44 24       	eor	r4, r4
    4ba0:	43 94       	inc	r4
    4ba2:	41 0e       	add	r4, r17
    4ba4:	81 2f       	mov	r24, r17
    4ba6:	90 e0       	ldi	r25, 0x00	; 0
    4ba8:	c8 16       	cp	r12, r24
    4baa:	d9 06       	cpc	r13, r25
    4bac:	2c f4       	brge	.+10     	; 0x4bb8 <vfprintf+0x250>
    4bae:	1c 19       	sub	r17, r12
    4bb0:	04 c0       	rjmp	.+8      	; 0x4bba <vfprintf+0x252>
    4bb2:	44 24       	eor	r4, r4
    4bb4:	43 94       	inc	r4
    4bb6:	01 c0       	rjmp	.+2      	; 0x4bba <vfprintf+0x252>
    4bb8:	10 e0       	ldi	r17, 0x00	; 0
    4bba:	97 fe       	sbrs	r9, 7
    4bbc:	06 c0       	rjmp	.+12     	; 0x4bca <vfprintf+0x262>
    4bbe:	1c 14       	cp	r1, r12
    4bc0:	1d 04       	cpc	r1, r13
    4bc2:	34 f4       	brge	.+12     	; 0x4bd0 <vfprintf+0x268>
    4bc4:	c6 01       	movw	r24, r12
    4bc6:	01 96       	adiw	r24, 0x01	; 1
    4bc8:	05 c0       	rjmp	.+10     	; 0x4bd4 <vfprintf+0x26c>
    4bca:	85 e0       	ldi	r24, 0x05	; 5
    4bcc:	90 e0       	ldi	r25, 0x00	; 0
    4bce:	02 c0       	rjmp	.+4      	; 0x4bd4 <vfprintf+0x26c>
    4bd0:	81 e0       	ldi	r24, 0x01	; 1
    4bd2:	90 e0       	ldi	r25, 0x00	; 0
    4bd4:	01 11       	cpse	r16, r1
    4bd6:	01 96       	adiw	r24, 0x01	; 1
    4bd8:	11 23       	and	r17, r17
    4bda:	31 f0       	breq	.+12     	; 0x4be8 <vfprintf+0x280>
    4bdc:	21 2f       	mov	r18, r17
    4bde:	30 e0       	ldi	r19, 0x00	; 0
    4be0:	2f 5f       	subi	r18, 0xFF	; 255
    4be2:	3f 4f       	sbci	r19, 0xFF	; 255
    4be4:	82 0f       	add	r24, r18
    4be6:	93 1f       	adc	r25, r19
    4be8:	25 2d       	mov	r18, r5
    4bea:	30 e0       	ldi	r19, 0x00	; 0
    4bec:	82 17       	cp	r24, r18
    4bee:	93 07       	cpc	r25, r19
    4bf0:	14 f4       	brge	.+4      	; 0x4bf6 <vfprintf+0x28e>
    4bf2:	58 1a       	sub	r5, r24
    4bf4:	01 c0       	rjmp	.+2      	; 0x4bf8 <vfprintf+0x290>
    4bf6:	51 2c       	mov	r5, r1
    4bf8:	89 2d       	mov	r24, r9
    4bfa:	89 70       	andi	r24, 0x09	; 9
    4bfc:	49 f4       	brne	.+18     	; 0x4c10 <vfprintf+0x2a8>
    4bfe:	55 20       	and	r5, r5
    4c00:	39 f0       	breq	.+14     	; 0x4c10 <vfprintf+0x2a8>
    4c02:	b7 01       	movw	r22, r14
    4c04:	80 e2       	ldi	r24, 0x20	; 32
    4c06:	90 e0       	ldi	r25, 0x00	; 0
    4c08:	0e 94 ba 78 	call	0xf174	; 0xf174 <fputc>
    4c0c:	5a 94       	dec	r5
    4c0e:	f7 cf       	rjmp	.-18     	; 0x4bfe <vfprintf+0x296>
    4c10:	00 23       	and	r16, r16
    4c12:	29 f0       	breq	.+10     	; 0x4c1e <vfprintf+0x2b6>
    4c14:	b7 01       	movw	r22, r14
    4c16:	80 2f       	mov	r24, r16
    4c18:	90 e0       	ldi	r25, 0x00	; 0
    4c1a:	0e 94 ba 78 	call	0xf174	; 0xf174 <fputc>
    4c1e:	93 fc       	sbrc	r9, 3
    4c20:	09 c0       	rjmp	.+18     	; 0x4c34 <vfprintf+0x2cc>
    4c22:	55 20       	and	r5, r5
    4c24:	39 f0       	breq	.+14     	; 0x4c34 <vfprintf+0x2cc>
    4c26:	b7 01       	movw	r22, r14
    4c28:	80 e3       	ldi	r24, 0x30	; 48
    4c2a:	90 e0       	ldi	r25, 0x00	; 0
    4c2c:	0e 94 ba 78 	call	0xf174	; 0xf174 <fputc>
    4c30:	5a 94       	dec	r5
    4c32:	f7 cf       	rjmp	.-18     	; 0x4c22 <vfprintf+0x2ba>
    4c34:	97 fe       	sbrs	r9, 7
    4c36:	4c c0       	rjmp	.+152    	; 0x4cd0 <vfprintf+0x368>
    4c38:	46 01       	movw	r8, r12
    4c3a:	d7 fe       	sbrs	r13, 7
    4c3c:	02 c0       	rjmp	.+4      	; 0x4c42 <vfprintf+0x2da>
    4c3e:	81 2c       	mov	r8, r1
    4c40:	91 2c       	mov	r9, r1
    4c42:	c6 01       	movw	r24, r12
    4c44:	88 19       	sub	r24, r8
    4c46:	99 09       	sbc	r25, r9
    4c48:	f3 01       	movw	r30, r6
    4c4a:	e8 0f       	add	r30, r24
    4c4c:	f9 1f       	adc	r31, r25
    4c4e:	fe 87       	std	Y+14, r31	; 0x0e
    4c50:	ed 87       	std	Y+13, r30	; 0x0d
    4c52:	96 01       	movw	r18, r12
    4c54:	24 19       	sub	r18, r4
    4c56:	31 09       	sbc	r19, r1
    4c58:	38 8b       	std	Y+16, r19	; 0x10
    4c5a:	2f 87       	std	Y+15, r18	; 0x0f
    4c5c:	01 2f       	mov	r16, r17
    4c5e:	10 e0       	ldi	r17, 0x00	; 0
    4c60:	11 95       	neg	r17
    4c62:	01 95       	neg	r16
    4c64:	11 09       	sbc	r17, r1
    4c66:	3f ef       	ldi	r19, 0xFF	; 255
    4c68:	83 16       	cp	r8, r19
    4c6a:	93 06       	cpc	r9, r19
    4c6c:	29 f4       	brne	.+10     	; 0x4c78 <vfprintf+0x310>
    4c6e:	b7 01       	movw	r22, r14
    4c70:	8e e2       	ldi	r24, 0x2E	; 46
    4c72:	90 e0       	ldi	r25, 0x00	; 0
    4c74:	0e 94 ba 78 	call	0xf174	; 0xf174 <fputc>
    4c78:	c8 14       	cp	r12, r8
    4c7a:	d9 04       	cpc	r13, r9
    4c7c:	4c f0       	brlt	.+18     	; 0x4c90 <vfprintf+0x328>
    4c7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    4c80:	98 89       	ldd	r25, Y+16	; 0x10
    4c82:	88 15       	cp	r24, r8
    4c84:	99 05       	cpc	r25, r9
    4c86:	24 f4       	brge	.+8      	; 0x4c90 <vfprintf+0x328>
    4c88:	ed 85       	ldd	r30, Y+13	; 0x0d
    4c8a:	fe 85       	ldd	r31, Y+14	; 0x0e
    4c8c:	81 81       	ldd	r24, Z+1	; 0x01
    4c8e:	01 c0       	rjmp	.+2      	; 0x4c92 <vfprintf+0x32a>
    4c90:	80 e3       	ldi	r24, 0x30	; 48
    4c92:	f1 e0       	ldi	r31, 0x01	; 1
    4c94:	8f 1a       	sub	r8, r31
    4c96:	91 08       	sbc	r9, r1
    4c98:	2d 85       	ldd	r18, Y+13	; 0x0d
    4c9a:	3e 85       	ldd	r19, Y+14	; 0x0e
    4c9c:	2f 5f       	subi	r18, 0xFF	; 255
    4c9e:	3f 4f       	sbci	r19, 0xFF	; 255
    4ca0:	3e 87       	std	Y+14, r19	; 0x0e
    4ca2:	2d 87       	std	Y+13, r18	; 0x0d
    4ca4:	80 16       	cp	r8, r16
    4ca6:	91 06       	cpc	r9, r17
    4ca8:	2c f0       	brlt	.+10     	; 0x4cb4 <vfprintf+0x34c>
    4caa:	b7 01       	movw	r22, r14
    4cac:	90 e0       	ldi	r25, 0x00	; 0
    4cae:	0e 94 ba 78 	call	0xf174	; 0xf174 <fputc>
    4cb2:	d9 cf       	rjmp	.-78     	; 0x4c66 <vfprintf+0x2fe>
    4cb4:	c8 14       	cp	r12, r8
    4cb6:	d9 04       	cpc	r13, r9
    4cb8:	41 f4       	brne	.+16     	; 0x4cca <vfprintf+0x362>
    4cba:	9a 81       	ldd	r25, Y+2	; 0x02
    4cbc:	96 33       	cpi	r25, 0x36	; 54
    4cbe:	20 f4       	brcc	.+8      	; 0x4cc8 <vfprintf+0x360>
    4cc0:	95 33       	cpi	r25, 0x35	; 53
    4cc2:	19 f4       	brne	.+6      	; 0x4cca <vfprintf+0x362>
    4cc4:	3c 85       	ldd	r19, Y+12	; 0x0c
    4cc6:	34 ff       	sbrs	r19, 4
    4cc8:	81 e3       	ldi	r24, 0x31	; 49
    4cca:	b7 01       	movw	r22, r14
    4ccc:	90 e0       	ldi	r25, 0x00	; 0
    4cce:	4e c0       	rjmp	.+156    	; 0x4d6c <vfprintf+0x404>
    4cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    4cd2:	81 33       	cpi	r24, 0x31	; 49
    4cd4:	19 f0       	breq	.+6      	; 0x4cdc <vfprintf+0x374>
    4cd6:	9c 85       	ldd	r25, Y+12	; 0x0c
    4cd8:	9f 7e       	andi	r25, 0xEF	; 239
    4cda:	9c 87       	std	Y+12, r25	; 0x0c
    4cdc:	b7 01       	movw	r22, r14
    4cde:	90 e0       	ldi	r25, 0x00	; 0
    4ce0:	0e 94 ba 78 	call	0xf174	; 0xf174 <fputc>
    4ce4:	11 11       	cpse	r17, r1
    4ce6:	05 c0       	rjmp	.+10     	; 0x4cf2 <vfprintf+0x38a>
    4ce8:	94 fc       	sbrc	r9, 4
    4cea:	18 c0       	rjmp	.+48     	; 0x4d1c <vfprintf+0x3b4>
    4cec:	85 e6       	ldi	r24, 0x65	; 101
    4cee:	90 e0       	ldi	r25, 0x00	; 0
    4cf0:	17 c0       	rjmp	.+46     	; 0x4d20 <vfprintf+0x3b8>
    4cf2:	b7 01       	movw	r22, r14
    4cf4:	8e e2       	ldi	r24, 0x2E	; 46
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	0e 94 ba 78 	call	0xf174	; 0xf174 <fputc>
    4cfc:	1e 5f       	subi	r17, 0xFE	; 254
    4cfe:	82 e0       	ldi	r24, 0x02	; 2
    4d00:	01 e0       	ldi	r16, 0x01	; 1
    4d02:	08 0f       	add	r16, r24
    4d04:	f3 01       	movw	r30, r6
    4d06:	e8 0f       	add	r30, r24
    4d08:	f1 1d       	adc	r31, r1
    4d0a:	80 81       	ld	r24, Z
    4d0c:	b7 01       	movw	r22, r14
    4d0e:	90 e0       	ldi	r25, 0x00	; 0
    4d10:	0e 94 ba 78 	call	0xf174	; 0xf174 <fputc>
    4d14:	80 2f       	mov	r24, r16
    4d16:	01 13       	cpse	r16, r17
    4d18:	f3 cf       	rjmp	.-26     	; 0x4d00 <vfprintf+0x398>
    4d1a:	e6 cf       	rjmp	.-52     	; 0x4ce8 <vfprintf+0x380>
    4d1c:	85 e4       	ldi	r24, 0x45	; 69
    4d1e:	90 e0       	ldi	r25, 0x00	; 0
    4d20:	b7 01       	movw	r22, r14
    4d22:	0e 94 ba 78 	call	0xf174	; 0xf174 <fputc>
    4d26:	d7 fc       	sbrc	r13, 7
    4d28:	06 c0       	rjmp	.+12     	; 0x4d36 <vfprintf+0x3ce>
    4d2a:	c1 14       	cp	r12, r1
    4d2c:	d1 04       	cpc	r13, r1
    4d2e:	41 f4       	brne	.+16     	; 0x4d40 <vfprintf+0x3d8>
    4d30:	ec 85       	ldd	r30, Y+12	; 0x0c
    4d32:	e4 ff       	sbrs	r30, 4
    4d34:	05 c0       	rjmp	.+10     	; 0x4d40 <vfprintf+0x3d8>
    4d36:	d1 94       	neg	r13
    4d38:	c1 94       	neg	r12
    4d3a:	d1 08       	sbc	r13, r1
    4d3c:	8d e2       	ldi	r24, 0x2D	; 45
    4d3e:	01 c0       	rjmp	.+2      	; 0x4d42 <vfprintf+0x3da>
    4d40:	8b e2       	ldi	r24, 0x2B	; 43
    4d42:	b7 01       	movw	r22, r14
    4d44:	90 e0       	ldi	r25, 0x00	; 0
    4d46:	0e 94 ba 78 	call	0xf174	; 0xf174 <fputc>
    4d4a:	80 e3       	ldi	r24, 0x30	; 48
    4d4c:	2a e0       	ldi	r18, 0x0A	; 10
    4d4e:	c2 16       	cp	r12, r18
    4d50:	d1 04       	cpc	r13, r1
    4d52:	2c f0       	brlt	.+10     	; 0x4d5e <vfprintf+0x3f6>
    4d54:	8f 5f       	subi	r24, 0xFF	; 255
    4d56:	fa e0       	ldi	r31, 0x0A	; 10
    4d58:	cf 1a       	sub	r12, r31
    4d5a:	d1 08       	sbc	r13, r1
    4d5c:	f7 cf       	rjmp	.-18     	; 0x4d4c <vfprintf+0x3e4>
    4d5e:	b7 01       	movw	r22, r14
    4d60:	90 e0       	ldi	r25, 0x00	; 0
    4d62:	0e 94 ba 78 	call	0xf174	; 0xf174 <fputc>
    4d66:	b7 01       	movw	r22, r14
    4d68:	c6 01       	movw	r24, r12
    4d6a:	c0 96       	adiw	r24, 0x30	; 48
    4d6c:	0e 94 ba 78 	call	0xf174	; 0xf174 <fputc>
    4d70:	54 c1       	rjmp	.+680    	; 0x501a <vfprintf+0x6b2>
    4d72:	83 36       	cpi	r24, 0x63	; 99
    4d74:	31 f0       	breq	.+12     	; 0x4d82 <vfprintf+0x41a>
    4d76:	83 37       	cpi	r24, 0x73	; 115
    4d78:	79 f0       	breq	.+30     	; 0x4d98 <vfprintf+0x430>
    4d7a:	83 35       	cpi	r24, 0x53	; 83
    4d7c:	09 f0       	breq	.+2      	; 0x4d80 <vfprintf+0x418>
    4d7e:	56 c0       	rjmp	.+172    	; 0x4e2c <vfprintf+0x4c4>
    4d80:	20 c0       	rjmp	.+64     	; 0x4dc2 <vfprintf+0x45a>
    4d82:	56 01       	movw	r10, r12
    4d84:	32 e0       	ldi	r19, 0x02	; 2
    4d86:	a3 0e       	add	r10, r19
    4d88:	b1 1c       	adc	r11, r1
    4d8a:	f6 01       	movw	r30, r12
    4d8c:	80 81       	ld	r24, Z
    4d8e:	89 83       	std	Y+1, r24	; 0x01
    4d90:	01 e0       	ldi	r16, 0x01	; 1
    4d92:	10 e0       	ldi	r17, 0x00	; 0
    4d94:	63 01       	movw	r12, r6
    4d96:	12 c0       	rjmp	.+36     	; 0x4dbc <vfprintf+0x454>
    4d98:	56 01       	movw	r10, r12
    4d9a:	f2 e0       	ldi	r31, 0x02	; 2
    4d9c:	af 0e       	add	r10, r31
    4d9e:	b1 1c       	adc	r11, r1
    4da0:	f6 01       	movw	r30, r12
    4da2:	c0 80       	ld	r12, Z
    4da4:	d1 80       	ldd	r13, Z+1	; 0x01
    4da6:	96 fe       	sbrs	r9, 6
    4da8:	03 c0       	rjmp	.+6      	; 0x4db0 <vfprintf+0x448>
    4daa:	61 2f       	mov	r22, r17
    4dac:	70 e0       	ldi	r23, 0x00	; 0
    4dae:	02 c0       	rjmp	.+4      	; 0x4db4 <vfprintf+0x44c>
    4db0:	6f ef       	ldi	r22, 0xFF	; 255
    4db2:	7f ef       	ldi	r23, 0xFF	; 255
    4db4:	c6 01       	movw	r24, r12
    4db6:	0e 94 71 ee 	call	0x1dce2	; 0x1dce2 <strnlen>
    4dba:	8c 01       	movw	r16, r24
    4dbc:	f9 2d       	mov	r31, r9
    4dbe:	ff 77       	andi	r31, 0x7F	; 127
    4dc0:	14 c0       	rjmp	.+40     	; 0x4dea <vfprintf+0x482>
    4dc2:	56 01       	movw	r10, r12
    4dc4:	22 e0       	ldi	r18, 0x02	; 2
    4dc6:	a2 0e       	add	r10, r18
    4dc8:	b1 1c       	adc	r11, r1
    4dca:	f6 01       	movw	r30, r12
    4dcc:	c0 80       	ld	r12, Z
    4dce:	d1 80       	ldd	r13, Z+1	; 0x01
    4dd0:	96 fe       	sbrs	r9, 6
    4dd2:	03 c0       	rjmp	.+6      	; 0x4dda <vfprintf+0x472>
    4dd4:	61 2f       	mov	r22, r17
    4dd6:	70 e0       	ldi	r23, 0x00	; 0
    4dd8:	02 c0       	rjmp	.+4      	; 0x4dde <vfprintf+0x476>
    4dda:	6f ef       	ldi	r22, 0xFF	; 255
    4ddc:	7f ef       	ldi	r23, 0xFF	; 255
    4dde:	c6 01       	movw	r24, r12
    4de0:	0e 94 5f ee 	call	0x1dcbe	; 0x1dcbe <strnlen_P>
    4de4:	8c 01       	movw	r16, r24
    4de6:	f9 2d       	mov	r31, r9
    4de8:	f0 68       	ori	r31, 0x80	; 128
    4dea:	9f 2e       	mov	r9, r31
    4dec:	f3 fd       	sbrc	r31, 3
    4dee:	1a c0       	rjmp	.+52     	; 0x4e24 <vfprintf+0x4bc>
    4df0:	85 2d       	mov	r24, r5
    4df2:	90 e0       	ldi	r25, 0x00	; 0
    4df4:	08 17       	cp	r16, r24
    4df6:	19 07       	cpc	r17, r25
    4df8:	a8 f4       	brcc	.+42     	; 0x4e24 <vfprintf+0x4bc>
    4dfa:	b7 01       	movw	r22, r14
    4dfc:	80 e2       	ldi	r24, 0x20	; 32
    4dfe:	90 e0       	ldi	r25, 0x00	; 0
    4e00:	0e 94 ba 78 	call	0xf174	; 0xf174 <fputc>
    4e04:	5a 94       	dec	r5
    4e06:	f4 cf       	rjmp	.-24     	; 0x4df0 <vfprintf+0x488>
    4e08:	f6 01       	movw	r30, r12
    4e0a:	97 fc       	sbrc	r9, 7
    4e0c:	85 91       	lpm	r24, Z+
    4e0e:	97 fe       	sbrs	r9, 7
    4e10:	81 91       	ld	r24, Z+
    4e12:	6f 01       	movw	r12, r30
    4e14:	b7 01       	movw	r22, r14
    4e16:	90 e0       	ldi	r25, 0x00	; 0
    4e18:	0e 94 ba 78 	call	0xf174	; 0xf174 <fputc>
    4e1c:	51 10       	cpse	r5, r1
    4e1e:	5a 94       	dec	r5
    4e20:	01 50       	subi	r16, 0x01	; 1
    4e22:	11 09       	sbc	r17, r1
    4e24:	01 15       	cp	r16, r1
    4e26:	11 05       	cpc	r17, r1
    4e28:	79 f7       	brne	.-34     	; 0x4e08 <vfprintf+0x4a0>
    4e2a:	f7 c0       	rjmp	.+494    	; 0x501a <vfprintf+0x6b2>
    4e2c:	84 36       	cpi	r24, 0x64	; 100
    4e2e:	11 f0       	breq	.+4      	; 0x4e34 <vfprintf+0x4cc>
    4e30:	89 36       	cpi	r24, 0x69	; 105
    4e32:	61 f5       	brne	.+88     	; 0x4e8c <vfprintf+0x524>
    4e34:	56 01       	movw	r10, r12
    4e36:	97 fe       	sbrs	r9, 7
    4e38:	09 c0       	rjmp	.+18     	; 0x4e4c <vfprintf+0x4e4>
    4e3a:	24 e0       	ldi	r18, 0x04	; 4
    4e3c:	a2 0e       	add	r10, r18
    4e3e:	b1 1c       	adc	r11, r1
    4e40:	f6 01       	movw	r30, r12
    4e42:	60 81       	ld	r22, Z
    4e44:	71 81       	ldd	r23, Z+1	; 0x01
    4e46:	82 81       	ldd	r24, Z+2	; 0x02
    4e48:	93 81       	ldd	r25, Z+3	; 0x03
    4e4a:	0a c0       	rjmp	.+20     	; 0x4e60 <vfprintf+0x4f8>
    4e4c:	f2 e0       	ldi	r31, 0x02	; 2
    4e4e:	af 0e       	add	r10, r31
    4e50:	b1 1c       	adc	r11, r1
    4e52:	f6 01       	movw	r30, r12
    4e54:	60 81       	ld	r22, Z
    4e56:	71 81       	ldd	r23, Z+1	; 0x01
    4e58:	07 2e       	mov	r0, r23
    4e5a:	00 0c       	add	r0, r0
    4e5c:	88 0b       	sbc	r24, r24
    4e5e:	99 0b       	sbc	r25, r25
    4e60:	f9 2d       	mov	r31, r9
    4e62:	ff 76       	andi	r31, 0x6F	; 111
    4e64:	9f 2e       	mov	r9, r31
    4e66:	97 ff       	sbrs	r25, 7
    4e68:	09 c0       	rjmp	.+18     	; 0x4e7c <vfprintf+0x514>
    4e6a:	90 95       	com	r25
    4e6c:	80 95       	com	r24
    4e6e:	70 95       	com	r23
    4e70:	61 95       	neg	r22
    4e72:	7f 4f       	sbci	r23, 0xFF	; 255
    4e74:	8f 4f       	sbci	r24, 0xFF	; 255
    4e76:	9f 4f       	sbci	r25, 0xFF	; 255
    4e78:	f0 68       	ori	r31, 0x80	; 128
    4e7a:	9f 2e       	mov	r9, r31
    4e7c:	2a e0       	ldi	r18, 0x0A	; 10
    4e7e:	30 e0       	ldi	r19, 0x00	; 0
    4e80:	a3 01       	movw	r20, r6
    4e82:	0e 94 7c ee 	call	0x1dcf8	; 0x1dcf8 <__ultoa_invert>
    4e86:	c8 2e       	mov	r12, r24
    4e88:	c6 18       	sub	r12, r6
    4e8a:	3f c0       	rjmp	.+126    	; 0x4f0a <vfprintf+0x5a2>
    4e8c:	09 2d       	mov	r16, r9
    4e8e:	85 37       	cpi	r24, 0x75	; 117
    4e90:	21 f4       	brne	.+8      	; 0x4e9a <vfprintf+0x532>
    4e92:	0f 7e       	andi	r16, 0xEF	; 239
    4e94:	2a e0       	ldi	r18, 0x0A	; 10
    4e96:	30 e0       	ldi	r19, 0x00	; 0
    4e98:	1d c0       	rjmp	.+58     	; 0x4ed4 <vfprintf+0x56c>
    4e9a:	09 7f       	andi	r16, 0xF9	; 249
    4e9c:	8f 36       	cpi	r24, 0x6F	; 111
    4e9e:	91 f0       	breq	.+36     	; 0x4ec4 <vfprintf+0x55c>
    4ea0:	18 f4       	brcc	.+6      	; 0x4ea8 <vfprintf+0x540>
    4ea2:	88 35       	cpi	r24, 0x58	; 88
    4ea4:	59 f0       	breq	.+22     	; 0x4ebc <vfprintf+0x554>
    4ea6:	c3 c0       	rjmp	.+390    	; 0x502e <vfprintf+0x6c6>
    4ea8:	80 37       	cpi	r24, 0x70	; 112
    4eaa:	19 f0       	breq	.+6      	; 0x4eb2 <vfprintf+0x54a>
    4eac:	88 37       	cpi	r24, 0x78	; 120
    4eae:	11 f0       	breq	.+4      	; 0x4eb4 <vfprintf+0x54c>
    4eb0:	be c0       	rjmp	.+380    	; 0x502e <vfprintf+0x6c6>
    4eb2:	00 61       	ori	r16, 0x10	; 16
    4eb4:	04 ff       	sbrs	r16, 4
    4eb6:	09 c0       	rjmp	.+18     	; 0x4eca <vfprintf+0x562>
    4eb8:	04 60       	ori	r16, 0x04	; 4
    4eba:	07 c0       	rjmp	.+14     	; 0x4eca <vfprintf+0x562>
    4ebc:	94 fe       	sbrs	r9, 4
    4ebe:	08 c0       	rjmp	.+16     	; 0x4ed0 <vfprintf+0x568>
    4ec0:	06 60       	ori	r16, 0x06	; 6
    4ec2:	06 c0       	rjmp	.+12     	; 0x4ed0 <vfprintf+0x568>
    4ec4:	28 e0       	ldi	r18, 0x08	; 8
    4ec6:	30 e0       	ldi	r19, 0x00	; 0
    4ec8:	05 c0       	rjmp	.+10     	; 0x4ed4 <vfprintf+0x56c>
    4eca:	20 e1       	ldi	r18, 0x10	; 16
    4ecc:	30 e0       	ldi	r19, 0x00	; 0
    4ece:	02 c0       	rjmp	.+4      	; 0x4ed4 <vfprintf+0x56c>
    4ed0:	20 e1       	ldi	r18, 0x10	; 16
    4ed2:	32 e0       	ldi	r19, 0x02	; 2
    4ed4:	56 01       	movw	r10, r12
    4ed6:	07 ff       	sbrs	r16, 7
    4ed8:	09 c0       	rjmp	.+18     	; 0x4eec <vfprintf+0x584>
    4eda:	84 e0       	ldi	r24, 0x04	; 4
    4edc:	a8 0e       	add	r10, r24
    4ede:	b1 1c       	adc	r11, r1
    4ee0:	f6 01       	movw	r30, r12
    4ee2:	60 81       	ld	r22, Z
    4ee4:	71 81       	ldd	r23, Z+1	; 0x01
    4ee6:	82 81       	ldd	r24, Z+2	; 0x02
    4ee8:	93 81       	ldd	r25, Z+3	; 0x03
    4eea:	08 c0       	rjmp	.+16     	; 0x4efc <vfprintf+0x594>
    4eec:	f2 e0       	ldi	r31, 0x02	; 2
    4eee:	af 0e       	add	r10, r31
    4ef0:	b1 1c       	adc	r11, r1
    4ef2:	f6 01       	movw	r30, r12
    4ef4:	60 81       	ld	r22, Z
    4ef6:	71 81       	ldd	r23, Z+1	; 0x01
    4ef8:	80 e0       	ldi	r24, 0x00	; 0
    4efa:	90 e0       	ldi	r25, 0x00	; 0
    4efc:	a3 01       	movw	r20, r6
    4efe:	0e 94 7c ee 	call	0x1dcf8	; 0x1dcf8 <__ultoa_invert>
    4f02:	c8 2e       	mov	r12, r24
    4f04:	c6 18       	sub	r12, r6
    4f06:	0f 77       	andi	r16, 0x7F	; 127
    4f08:	90 2e       	mov	r9, r16
    4f0a:	96 fe       	sbrs	r9, 6
    4f0c:	0b c0       	rjmp	.+22     	; 0x4f24 <vfprintf+0x5bc>
    4f0e:	09 2d       	mov	r16, r9
    4f10:	0e 7f       	andi	r16, 0xFE	; 254
    4f12:	c1 16       	cp	r12, r17
    4f14:	50 f4       	brcc	.+20     	; 0x4f2a <vfprintf+0x5c2>
    4f16:	94 fe       	sbrs	r9, 4
    4f18:	0a c0       	rjmp	.+20     	; 0x4f2e <vfprintf+0x5c6>
    4f1a:	92 fc       	sbrc	r9, 2
    4f1c:	08 c0       	rjmp	.+16     	; 0x4f2e <vfprintf+0x5c6>
    4f1e:	09 2d       	mov	r16, r9
    4f20:	0e 7e       	andi	r16, 0xEE	; 238
    4f22:	05 c0       	rjmp	.+10     	; 0x4f2e <vfprintf+0x5c6>
    4f24:	dc 2c       	mov	r13, r12
    4f26:	09 2d       	mov	r16, r9
    4f28:	03 c0       	rjmp	.+6      	; 0x4f30 <vfprintf+0x5c8>
    4f2a:	dc 2c       	mov	r13, r12
    4f2c:	01 c0       	rjmp	.+2      	; 0x4f30 <vfprintf+0x5c8>
    4f2e:	d1 2e       	mov	r13, r17
    4f30:	04 ff       	sbrs	r16, 4
    4f32:	0d c0       	rjmp	.+26     	; 0x4f4e <vfprintf+0x5e6>
    4f34:	fe 01       	movw	r30, r28
    4f36:	ec 0d       	add	r30, r12
    4f38:	f1 1d       	adc	r31, r1
    4f3a:	80 81       	ld	r24, Z
    4f3c:	80 33       	cpi	r24, 0x30	; 48
    4f3e:	11 f4       	brne	.+4      	; 0x4f44 <vfprintf+0x5dc>
    4f40:	09 7e       	andi	r16, 0xE9	; 233
    4f42:	09 c0       	rjmp	.+18     	; 0x4f56 <vfprintf+0x5ee>
    4f44:	02 ff       	sbrs	r16, 2
    4f46:	06 c0       	rjmp	.+12     	; 0x4f54 <vfprintf+0x5ec>
    4f48:	d3 94       	inc	r13
    4f4a:	d3 94       	inc	r13
    4f4c:	04 c0       	rjmp	.+8      	; 0x4f56 <vfprintf+0x5ee>
    4f4e:	80 2f       	mov	r24, r16
    4f50:	86 78       	andi	r24, 0x86	; 134
    4f52:	09 f0       	breq	.+2      	; 0x4f56 <vfprintf+0x5ee>
    4f54:	d3 94       	inc	r13
    4f56:	03 fd       	sbrc	r16, 3
    4f58:	11 c0       	rjmp	.+34     	; 0x4f7c <vfprintf+0x614>
    4f5a:	00 ff       	sbrs	r16, 0
    4f5c:	06 c0       	rjmp	.+12     	; 0x4f6a <vfprintf+0x602>
    4f5e:	1c 2d       	mov	r17, r12
    4f60:	d5 14       	cp	r13, r5
    4f62:	80 f4       	brcc	.+32     	; 0x4f84 <vfprintf+0x61c>
    4f64:	15 0d       	add	r17, r5
    4f66:	1d 19       	sub	r17, r13
    4f68:	0d c0       	rjmp	.+26     	; 0x4f84 <vfprintf+0x61c>
    4f6a:	d5 14       	cp	r13, r5
    4f6c:	58 f4       	brcc	.+22     	; 0x4f84 <vfprintf+0x61c>
    4f6e:	b7 01       	movw	r22, r14
    4f70:	80 e2       	ldi	r24, 0x20	; 32
    4f72:	90 e0       	ldi	r25, 0x00	; 0
    4f74:	0e 94 ba 78 	call	0xf174	; 0xf174 <fputc>
    4f78:	d3 94       	inc	r13
    4f7a:	f7 cf       	rjmp	.-18     	; 0x4f6a <vfprintf+0x602>
    4f7c:	d5 14       	cp	r13, r5
    4f7e:	10 f4       	brcc	.+4      	; 0x4f84 <vfprintf+0x61c>
    4f80:	5d 18       	sub	r5, r13
    4f82:	01 c0       	rjmp	.+2      	; 0x4f86 <vfprintf+0x61e>
    4f84:	51 2c       	mov	r5, r1
    4f86:	04 ff       	sbrs	r16, 4
    4f88:	10 c0       	rjmp	.+32     	; 0x4faa <vfprintf+0x642>
    4f8a:	b7 01       	movw	r22, r14
    4f8c:	80 e3       	ldi	r24, 0x30	; 48
    4f8e:	90 e0       	ldi	r25, 0x00	; 0
    4f90:	0e 94 ba 78 	call	0xf174	; 0xf174 <fputc>
    4f94:	02 ff       	sbrs	r16, 2
    4f96:	17 c0       	rjmp	.+46     	; 0x4fc6 <vfprintf+0x65e>
    4f98:	01 fd       	sbrc	r16, 1
    4f9a:	03 c0       	rjmp	.+6      	; 0x4fa2 <vfprintf+0x63a>
    4f9c:	88 e7       	ldi	r24, 0x78	; 120
    4f9e:	90 e0       	ldi	r25, 0x00	; 0
    4fa0:	02 c0       	rjmp	.+4      	; 0x4fa6 <vfprintf+0x63e>
    4fa2:	88 e5       	ldi	r24, 0x58	; 88
    4fa4:	90 e0       	ldi	r25, 0x00	; 0
    4fa6:	b7 01       	movw	r22, r14
    4fa8:	0c c0       	rjmp	.+24     	; 0x4fc2 <vfprintf+0x65a>
    4faa:	80 2f       	mov	r24, r16
    4fac:	86 78       	andi	r24, 0x86	; 134
    4fae:	59 f0       	breq	.+22     	; 0x4fc6 <vfprintf+0x65e>
    4fb0:	01 ff       	sbrs	r16, 1
    4fb2:	02 c0       	rjmp	.+4      	; 0x4fb8 <vfprintf+0x650>
    4fb4:	8b e2       	ldi	r24, 0x2B	; 43
    4fb6:	01 c0       	rjmp	.+2      	; 0x4fba <vfprintf+0x652>
    4fb8:	80 e2       	ldi	r24, 0x20	; 32
    4fba:	07 fd       	sbrc	r16, 7
    4fbc:	8d e2       	ldi	r24, 0x2D	; 45
    4fbe:	b7 01       	movw	r22, r14
    4fc0:	90 e0       	ldi	r25, 0x00	; 0
    4fc2:	0e 94 ba 78 	call	0xf174	; 0xf174 <fputc>
    4fc6:	c1 16       	cp	r12, r17
    4fc8:	38 f4       	brcc	.+14     	; 0x4fd8 <vfprintf+0x670>
    4fca:	b7 01       	movw	r22, r14
    4fcc:	80 e3       	ldi	r24, 0x30	; 48
    4fce:	90 e0       	ldi	r25, 0x00	; 0
    4fd0:	0e 94 ba 78 	call	0xf174	; 0xf174 <fputc>
    4fd4:	11 50       	subi	r17, 0x01	; 1
    4fd6:	f7 cf       	rjmp	.-18     	; 0x4fc6 <vfprintf+0x65e>
    4fd8:	ca 94       	dec	r12
    4fda:	f3 01       	movw	r30, r6
    4fdc:	ec 0d       	add	r30, r12
    4fde:	f1 1d       	adc	r31, r1
    4fe0:	80 81       	ld	r24, Z
    4fe2:	b7 01       	movw	r22, r14
    4fe4:	90 e0       	ldi	r25, 0x00	; 0
    4fe6:	0e 94 ba 78 	call	0xf174	; 0xf174 <fputc>
    4fea:	c1 10       	cpse	r12, r1
    4fec:	f5 cf       	rjmp	.-22     	; 0x4fd8 <vfprintf+0x670>
    4fee:	15 c0       	rjmp	.+42     	; 0x501a <vfprintf+0x6b2>
    4ff0:	f4 e0       	ldi	r31, 0x04	; 4
    4ff2:	f5 15       	cp	r31, r5
    4ff4:	60 f5       	brcc	.+88     	; 0x504e <vfprintf+0x6e6>
    4ff6:	84 e0       	ldi	r24, 0x04	; 4
    4ff8:	58 1a       	sub	r5, r24
    4ffa:	93 fe       	sbrs	r9, 3
    4ffc:	1f c0       	rjmp	.+62     	; 0x503c <vfprintf+0x6d4>
    4ffe:	01 11       	cpse	r16, r1
    5000:	27 c0       	rjmp	.+78     	; 0x5050 <vfprintf+0x6e8>
    5002:	2c 85       	ldd	r18, Y+12	; 0x0c
    5004:	23 ff       	sbrs	r18, 3
    5006:	2a c0       	rjmp	.+84     	; 0x505c <vfprintf+0x6f4>
    5008:	00 ed       	ldi	r16, 0xD0	; 208
    500a:	11 e0       	ldi	r17, 0x01	; 1
    500c:	39 2d       	mov	r19, r9
    500e:	30 71       	andi	r19, 0x10	; 16
    5010:	93 2e       	mov	r9, r19
    5012:	f8 01       	movw	r30, r16
    5014:	84 91       	lpm	r24, Z
    5016:	81 11       	cpse	r24, r1
    5018:	24 c0       	rjmp	.+72     	; 0x5062 <vfprintf+0x6fa>
    501a:	55 20       	and	r5, r5
    501c:	09 f4       	brne	.+2      	; 0x5020 <vfprintf+0x6b8>
    501e:	e4 cc       	rjmp	.-1592   	; 0x49e8 <vfprintf+0x80>
    5020:	b7 01       	movw	r22, r14
    5022:	80 e2       	ldi	r24, 0x20	; 32
    5024:	90 e0       	ldi	r25, 0x00	; 0
    5026:	0e 94 ba 78 	call	0xf174	; 0xf174 <fputc>
    502a:	5a 94       	dec	r5
    502c:	f6 cf       	rjmp	.-20     	; 0x501a <vfprintf+0x6b2>
    502e:	f7 01       	movw	r30, r14
    5030:	86 81       	ldd	r24, Z+6	; 0x06
    5032:	97 81       	ldd	r25, Z+7	; 0x07
    5034:	26 c0       	rjmp	.+76     	; 0x5082 <vfprintf+0x71a>
    5036:	8f ef       	ldi	r24, 0xFF	; 255
    5038:	9f ef       	ldi	r25, 0xFF	; 255
    503a:	23 c0       	rjmp	.+70     	; 0x5082 <vfprintf+0x71a>
    503c:	b7 01       	movw	r22, r14
    503e:	80 e2       	ldi	r24, 0x20	; 32
    5040:	90 e0       	ldi	r25, 0x00	; 0
    5042:	0e 94 ba 78 	call	0xf174	; 0xf174 <fputc>
    5046:	5a 94       	dec	r5
    5048:	51 10       	cpse	r5, r1
    504a:	f8 cf       	rjmp	.-16     	; 0x503c <vfprintf+0x6d4>
    504c:	d8 cf       	rjmp	.-80     	; 0x4ffe <vfprintf+0x696>
    504e:	51 2c       	mov	r5, r1
    5050:	b7 01       	movw	r22, r14
    5052:	80 2f       	mov	r24, r16
    5054:	90 e0       	ldi	r25, 0x00	; 0
    5056:	0e 94 ba 78 	call	0xf174	; 0xf174 <fputc>
    505a:	d3 cf       	rjmp	.-90     	; 0x5002 <vfprintf+0x69a>
    505c:	04 ed       	ldi	r16, 0xD4	; 212
    505e:	11 e0       	ldi	r17, 0x01	; 1
    5060:	d5 cf       	rjmp	.-86     	; 0x500c <vfprintf+0x6a4>
    5062:	91 10       	cpse	r9, r1
    5064:	80 52       	subi	r24, 0x20	; 32
    5066:	b7 01       	movw	r22, r14
    5068:	90 e0       	ldi	r25, 0x00	; 0
    506a:	0e 94 ba 78 	call	0xf174	; 0xf174 <fputc>
    506e:	0f 5f       	subi	r16, 0xFF	; 255
    5070:	1f 4f       	sbci	r17, 0xFF	; 255
    5072:	cf cf       	rjmp	.-98     	; 0x5012 <vfprintf+0x6aa>
    5074:	23 e0       	ldi	r18, 0x03	; 3
    5076:	25 15       	cp	r18, r5
    5078:	10 f4       	brcc	.+4      	; 0x507e <vfprintf+0x716>
    507a:	83 e0       	ldi	r24, 0x03	; 3
    507c:	bd cf       	rjmp	.-134    	; 0x4ff8 <vfprintf+0x690>
    507e:	51 2c       	mov	r5, r1
    5080:	c0 cf       	rjmp	.-128    	; 0x5002 <vfprintf+0x69a>
    5082:	60 96       	adiw	r28, 0x10	; 16
    5084:	0f b6       	in	r0, 0x3f	; 63
    5086:	f8 94       	cli
    5088:	de bf       	out	0x3e, r29	; 62
    508a:	0f be       	out	0x3f, r0	; 63
    508c:	cd bf       	out	0x3d, r28	; 61
    508e:	df 91       	pop	r29
    5090:	cf 91       	pop	r28
    5092:	1f 91       	pop	r17
    5094:	0f 91       	pop	r16
    5096:	ff 90       	pop	r15
    5098:	ef 90       	pop	r14
    509a:	df 90       	pop	r13
    509c:	cf 90       	pop	r12
    509e:	bf 90       	pop	r11
    50a0:	af 90       	pop	r10
    50a2:	9f 90       	pop	r9
    50a4:	8f 90       	pop	r8
    50a6:	7f 90       	pop	r7
    50a8:	6f 90       	pop	r6
    50aa:	5f 90       	pop	r5
    50ac:	4f 90       	pop	r4
    50ae:	3f 90       	pop	r3
    50b0:	2f 90       	pop	r2
    50b2:	08 95       	ret

000050b4 <chip_select>:
/// @brief SPI CS pin status
/// return CS GPIO pin number or 0xff
uint8_t spi_chip_select_status()
{
    return(_cs_pin);
}
    50b4:	e8 2f       	mov	r30, r24
    50b6:	e6 95       	lsr	r30
    50b8:	e6 95       	lsr	r30
    50ba:	e6 95       	lsr	r30
    50bc:	93 e0       	ldi	r25, 0x03	; 3
    50be:	e9 9f       	mul	r30, r25
    50c0:	f0 01       	movw	r30, r0
    50c2:	11 24       	eor	r1, r1
    50c4:	32 a1       	ldd	r19, Z+34	; 0x22
    50c6:	28 2f       	mov	r18, r24
    50c8:	27 70       	andi	r18, 0x07	; 7
    50ca:	81 e0       	ldi	r24, 0x01	; 1
    50cc:	90 e0       	ldi	r25, 0x00	; 0
    50ce:	01 c0       	rjmp	.+2      	; 0x50d2 <chip_select+0x1e>
    50d0:	88 0f       	add	r24, r24
    50d2:	2a 95       	dec	r18
    50d4:	ea f7       	brpl	.-6      	; 0x50d0 <chip_select+0x1c>
    50d6:	98 2f       	mov	r25, r24
    50d8:	90 95       	com	r25
    50da:	93 23       	and	r25, r19
    50dc:	92 a3       	std	Z+34, r25	; 0x22
    50de:	91 a1       	ldd	r25, Z+33	; 0x21
    50e0:	89 2b       	or	r24, r25
    50e2:	81 a3       	std	Z+33, r24	; 0x21
    50e4:	08 95       	ret

000050e6 <chip_deselect>:
    50e6:	e8 2f       	mov	r30, r24
    50e8:	e6 95       	lsr	r30
    50ea:	e6 95       	lsr	r30
    50ec:	e6 95       	lsr	r30
    50ee:	93 e0       	ldi	r25, 0x03	; 3
    50f0:	e9 9f       	mul	r30, r25
    50f2:	f0 01       	movw	r30, r0
    50f4:	11 24       	eor	r1, r1
    50f6:	32 a1       	ldd	r19, Z+34	; 0x22
    50f8:	28 2f       	mov	r18, r24
    50fa:	27 70       	andi	r18, 0x07	; 7
    50fc:	81 e0       	ldi	r24, 0x01	; 1
    50fe:	90 e0       	ldi	r25, 0x00	; 0
    5100:	01 c0       	rjmp	.+2      	; 0x5104 <chip_deselect+0x1e>
    5102:	88 0f       	add	r24, r24
    5104:	2a 95       	dec	r18
    5106:	ea f7       	brpl	.-6      	; 0x5102 <chip_deselect+0x1c>
    5108:	93 2f       	mov	r25, r19
    510a:	98 2b       	or	r25, r24
    510c:	92 a3       	std	Z+34, r25	; 0x22
    510e:	91 a1       	ldd	r25, Z+33	; 0x21
    5110:	89 2b       	or	r24, r25
    5112:	81 a3       	std	Z+33, r24	; 0x21
    5114:	08 95       	ret

00005116 <chip_select_init>:
    5116:	e7 cf       	rjmp	.-50     	; 0x50e6 <chip_deselect>
    5118:	08 95       	ret

0000511a <spi_end>:
    511a:	cf 93       	push	r28
    511c:	c8 2f       	mov	r28, r24
    511e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_cs_pin>
    5122:	8c 17       	cp	r24, r28
    5124:	a9 f0       	breq	.+42     	; 0x5150 <spi_end+0x36>
    5126:	8f 3f       	cpi	r24, 0xFF	; 255
    5128:	99 f0       	breq	.+38     	; 0x5150 <spi_end+0x36>
    512a:	1f 92       	push	r1
    512c:	cf 93       	push	r28
    512e:	1f 92       	push	r1
    5130:	8f 93       	push	r24
    5132:	82 ed       	ldi	r24, 0xD2	; 210
    5134:	92 e0       	ldi	r25, 0x02	; 2
    5136:	1f 92       	push	r1
    5138:	9f 93       	push	r25
    513a:	8f 93       	push	r24
    513c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    5140:	8d b7       	in	r24, 0x3d	; 61
    5142:	9e b7       	in	r25, 0x3e	; 62
    5144:	07 96       	adiw	r24, 0x07	; 7
    5146:	0f b6       	in	r0, 0x3f	; 63
    5148:	f8 94       	cli
    514a:	9e bf       	out	0x3e, r25	; 62
    514c:	0f be       	out	0x3f, r0	; 63
    514e:	8d bf       	out	0x3d, r24	; 61
    5150:	8c 2f       	mov	r24, r28
    5152:	c9 df       	rcall	.-110    	; 0x50e6 <chip_deselect>
    5154:	8f ef       	ldi	r24, 0xFF	; 255
    5156:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_cs_pin>
    515a:	cf 91       	pop	r28
    515c:	08 95       	ret

0000515e <spi_TX_buffer>:
/// @brief SPI write buffer
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void spi_TX_buffer(const uint8_t *data, int count)
{
    515e:	7a c4       	rjmp	.+2292   	; 0x5a54 <SPI0_TX>
    5160:	08 95       	ret

00005162 <spi_RX_buffer>:
    5162:	a2 c4       	rjmp	.+2372   	; 0x5aa8 <SPI0_RX>
    5164:	08 95       	ret

00005166 <spi_TX>:
    5166:	a1 e0       	ldi	r26, 0x01	; 1
    5168:	b0 e0       	ldi	r27, 0x00	; 0
    516a:	e9 eb       	ldi	r30, 0xB9	; 185
    516c:	f8 e2       	ldi	r31, 0x28	; 40
    516e:	0c 94 9f e9 	jmp	0x1d33e	; 0x1d33e <__prologue_saves__+0x20>
    5172:	89 83       	std	Y+1, r24	; 0x01
    5174:	61 e0       	ldi	r22, 0x01	; 1
    5176:	70 e0       	ldi	r23, 0x00	; 0
    5178:	ce 01       	movw	r24, r28
    517a:	01 96       	adiw	r24, 0x01	; 1
    517c:	6b d4       	rcall	.+2262   	; 0x5a54 <SPI0_TX>
    517e:	21 96       	adiw	r28, 0x01	; 1
    5180:	e2 e0       	ldi	r30, 0x02	; 2
    5182:	0c 94 bb e9 	jmp	0x1d376	; 0x1d376 <__epilogue_restores__+0x20>

00005186 <spi_init>:
    5186:	cf 92       	push	r12
    5188:	df 92       	push	r13
    518a:	ef 92       	push	r14
    518c:	ff 92       	push	r15
    518e:	6b 01       	movw	r12, r22
    5190:	7c 01       	movw	r14, r24
    5192:	84 2f       	mov	r24, r20
    5194:	a8 df       	rcall	.-176    	; 0x50e6 <chip_deselect>
    5196:	8f ef       	ldi	r24, 0xFF	; 255
    5198:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_cs_pin>
    519c:	c7 01       	movw	r24, r14
    519e:	b6 01       	movw	r22, r12
    51a0:	34 d4       	rcall	.+2152   	; 0x5a0a <SPI0_Init>
    51a2:	80 e0       	ldi	r24, 0x00	; 0
    51a4:	90 e0       	ldi	r25, 0x00	; 0
    51a6:	f5 d3       	rcall	.+2026   	; 0x5992 <SPI0_Mode>
    51a8:	8f ef       	ldi	r24, 0xFF	; 255
    51aa:	dd df       	rcall	.-70     	; 0x5166 <spi_TX>
    51ac:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
    51b0:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
    51b4:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__data_start+0x2>
    51b8:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__data_start+0x3>
    51bc:	ff 90       	pop	r15
    51be:	ef 90       	pop	r14
    51c0:	df 90       	pop	r13
    51c2:	cf 90       	pop	r12
    51c4:	08 95       	ret

000051c6 <spi_begin>:
    51c6:	cf 92       	push	r12
    51c8:	df 92       	push	r13
    51ca:	ef 92       	push	r14
    51cc:	ff 92       	push	r15
    51ce:	cf 93       	push	r28
    51d0:	df 93       	push	r29
    51d2:	6b 01       	movw	r12, r22
    51d4:	7c 01       	movw	r14, r24
    51d6:	ea 01       	movw	r28, r20
    51d8:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_cs_pin>
    51dc:	8f 3f       	cpi	r24, 0xFF	; 255
    51de:	99 f0       	breq	.+38     	; 0x5206 <spi_begin+0x40>
    51e0:	df 93       	push	r29
    51e2:	4f 93       	push	r20
    51e4:	1f 92       	push	r1
    51e6:	8f 93       	push	r24
    51e8:	80 ef       	ldi	r24, 0xF0	; 240
    51ea:	92 e0       	ldi	r25, 0x02	; 2
    51ec:	1f 92       	push	r1
    51ee:	9f 93       	push	r25
    51f0:	8f 93       	push	r24
    51f2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    51f6:	8d b7       	in	r24, 0x3d	; 61
    51f8:	9e b7       	in	r25, 0x3e	; 62
    51fa:	07 96       	adiw	r24, 0x07	; 7
    51fc:	0f b6       	in	r0, 0x3f	; 63
    51fe:	f8 94       	cli
    5200:	9e bf       	out	0x3e, r25	; 62
    5202:	0f be       	out	0x3f, r0	; 63
    5204:	8d bf       	out	0x3d, r24	; 61
    5206:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    520a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    520e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
    5212:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
    5216:	8c 15       	cp	r24, r12
    5218:	9d 05       	cpc	r25, r13
    521a:	ae 05       	cpc	r26, r14
    521c:	bf 05       	cpc	r27, r15
    521e:	21 f0       	breq	.+8      	; 0x5228 <spi_begin+0x62>
    5220:	ae 01       	movw	r20, r28
    5222:	c7 01       	movw	r24, r14
    5224:	b6 01       	movw	r22, r12
    5226:	af df       	rcall	.-162    	; 0x5186 <spi_init>
    5228:	8c 2f       	mov	r24, r28
    522a:	44 df       	rcall	.-376    	; 0x50b4 <chip_select>
    522c:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <_cs_pin>
    5230:	df 91       	pop	r29
    5232:	cf 91       	pop	r28
    5234:	ff 90       	pop	r15
    5236:	ef 90       	pop	r14
    5238:	df 90       	pop	r13
    523a:	cf 90       	pop	r12
    523c:	08 95       	ret

0000523e <spi_TXRX>:
    523e:	a1 e0       	ldi	r26, 0x01	; 1
    5240:	b0 e0       	ldi	r27, 0x00	; 0
    5242:	e5 e2       	ldi	r30, 0x25	; 37
    5244:	f9 e2       	ldi	r31, 0x29	; 41
    5246:	0c 94 9f e9 	jmp	0x1d33e	; 0x1d33e <__prologue_saves__+0x20>
    524a:	89 83       	std	Y+1, r24	; 0x01
    524c:	61 e0       	ldi	r22, 0x01	; 1
    524e:	70 e0       	ldi	r23, 0x00	; 0
    5250:	ce 01       	movw	r24, r28
    5252:	01 96       	adiw	r24, 0x01	; 1
    5254:	13 d4       	rcall	.+2086   	; 0x5a7c <SPI0_TXRX>
    5256:	89 81       	ldd	r24, Y+1	; 0x01
    5258:	21 96       	adiw	r28, 0x01	; 1
    525a:	e2 e0       	ldi	r30, 0x02	; 2
    525c:	0c 94 bb e9 	jmp	0x1d376	; 0x1d376 <__epilogue_restores__+0x20>

00005260 <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    5260:	a2 e0       	ldi	r26, 0x02	; 2
    5262:	b0 e0       	ldi	r27, 0x00	; 0
    5264:	e6 e3       	ldi	r30, 0x36	; 54
    5266:	f9 e2       	ldi	r31, 0x29	; 41
    5268:	0c 94 9f e9 	jmp	0x1d33e	; 0x1d33e <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    526c:	20 91 77 1f 	lds	r18, 0x1F77	; 0x801f77 <__brkval>
    5270:	30 91 78 1f 	lds	r19, 0x1F78	; 0x801f78 <__brkval+0x1>
    5274:	21 15       	cp	r18, r1
    5276:	31 05       	cpc	r19, r1
    5278:	11 f4       	brne	.+4      	; 0x527e <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    527a:	2b e7       	ldi	r18, 0x7B	; 123
    527c:	3f e1       	ldi	r19, 0x1F	; 31

    ret = (uint16_t) &v - top;
    return ( ret );
}
    527e:	ce 01       	movw	r24, r28
    5280:	01 96       	adiw	r24, 0x01	; 1
    5282:	82 1b       	sub	r24, r18
    5284:	93 0b       	sbc	r25, r19
    5286:	22 96       	adiw	r28, 0x02	; 2
    5288:	e2 e0       	ldi	r30, 0x02	; 2
    528a:	0c 94 bb e9 	jmp	0x1d376	; 0x1d376 <__epilogue_restores__+0x20>

0000528e <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    528e:	a2 e0       	ldi	r26, 0x02	; 2
    5290:	b0 e0       	ldi	r27, 0x00	; 0
    5292:	ed e4       	ldi	r30, 0x4D	; 77
    5294:	f9 e2       	ldi	r31, 0x29	; 41
    5296:	0c 94 9f e9 	jmp	0x1d33e	; 0x1d33e <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    529a:	e2 df       	rcall	.-60     	; 0x5260 <freeRam>
    529c:	89 83       	std	Y+1, r24	; 0x01

    printf("Free Ram:%u\n", ram);
    529e:	9a 83       	std	Y+2, r25	; 0x02
    52a0:	9f 93       	push	r25
    52a2:	8f 93       	push	r24
    52a4:	87 e1       	ldi	r24, 0x17	; 23
    52a6:	94 e0       	ldi	r25, 0x04	; 4
    52a8:	1f 92       	push	r1
    52aa:	9f 93       	push	r25
    52ac:	8f 93       	push	r24
    52ae:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    52b2:	8f ef       	ldi	r24, 0xFF	; 255
    52b4:	90 e4       	ldi	r25, 0x40	; 64
    52b6:	9f 93       	push	r25
    52b8:	8f 93       	push	r24
    52ba:	84 e0       	ldi	r24, 0x04	; 4
    52bc:	94 e0       	ldi	r25, 0x04	; 4
    52be:	1f 92       	push	r1
    52c0:	9f 93       	push	r25
    52c2:	8f 93       	push	r24
    52c4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    52c8:	ce 01       	movw	r24, r28
    52ca:	01 96       	adiw	r24, 0x01	; 1
    52cc:	9f 93       	push	r25
    52ce:	8f 93       	push	r24
    52d0:	81 ef       	ldi	r24, 0xF1	; 241
    52d2:	93 e0       	ldi	r25, 0x03	; 3
    52d4:	1f 92       	push	r1
    52d6:	9f 93       	push	r25
    52d8:	8f 93       	push	r24
    52da:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    52de:	8b e7       	ldi	r24, 0x7B	; 123
    52e0:	9f e1       	ldi	r25, 0x1F	; 31
    52e2:	9f 93       	push	r25
    52e4:	8f 93       	push	r24
    52e6:	88 ea       	ldi	r24, 0xA8	; 168
    52e8:	97 e1       	ldi	r25, 0x17	; 23
    52ea:	9f 93       	push	r25
    52ec:	8f 93       	push	r24
    52ee:	83 ed       	ldi	r24, 0xD3	; 211
    52f0:	93 e0       	ldi	r25, 0x03	; 3
    52f2:	1f 92       	push	r1
    52f4:	9f 93       	push	r25
    52f6:	8f 93       	push	r24
    52f8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    52fc:	88 ea       	ldi	r24, 0xA8	; 168
    52fe:	97 e1       	ldi	r25, 0x17	; 23
    5300:	9f 93       	push	r25
    5302:	8f 93       	push	r24
    5304:	80 e0       	ldi	r24, 0x00	; 0
    5306:	91 e0       	ldi	r25, 0x01	; 1
    5308:	9f 93       	push	r25
    530a:	8f 93       	push	r24
    530c:	85 eb       	ldi	r24, 0xB5	; 181
    530e:	93 e0       	ldi	r25, 0x03	; 3
    5310:	1f 92       	push	r1
    5312:	9f 93       	push	r25
    5314:	8f 93       	push	r24
    5316:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    531a:	80 e0       	ldi	r24, 0x00	; 0
    531c:	90 e0       	ldi	r25, 0x00	; 0
    531e:	9f 93       	push	r25
    5320:	8f 93       	push	r24
    5322:	8b e7       	ldi	r24, 0x7B	; 123
    5324:	9f e1       	ldi	r25, 0x1F	; 31
    5326:	9f 93       	push	r25
    5328:	8f 93       	push	r24
    532a:	87 e9       	ldi	r24, 0x97	; 151
    532c:	93 e0       	ldi	r25, 0x03	; 3
    532e:	1f 92       	push	r1
    5330:	9f 93       	push	r25
    5332:	8f 93       	push	r24
    5334:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    5338:	0f b6       	in	r0, 0x3f	; 63
    533a:	f8 94       	cli
    533c:	de bf       	out	0x3e, r29	; 62
    533e:	0f be       	out	0x3f, r0	; 63
    5340:	cd bf       	out	0x3d, r28	; 61
    5342:	80 91 e3 02 	lds	r24, 0x02E3	; 0x8002e3 <__malloc_heap_end+0x1>
    5346:	8f 93       	push	r24
    5348:	80 91 e2 02 	lds	r24, 0x02E2	; 0x8002e2 <__malloc_heap_end>
    534c:	8f 93       	push	r24
    534e:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <__malloc_heap_start+0x1>
    5352:	8f 93       	push	r24
    5354:	80 91 e4 02 	lds	r24, 0x02E4	; 0x8002e4 <__malloc_heap_start>
    5358:	8f 93       	push	r24
    535a:	89 e7       	ldi	r24, 0x79	; 121
    535c:	93 e0       	ldi	r25, 0x03	; 3
    535e:	1f 92       	push	r1
    5360:	9f 93       	push	r25
    5362:	8f 93       	push	r24
    5364:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    5368:	80 91 78 1f 	lds	r24, 0x1F78	; 0x801f78 <__brkval+0x1>
    536c:	8f 93       	push	r24
    536e:	80 91 77 1f 	lds	r24, 0x1F77	; 0x801f77 <__brkval>
    5372:	8f 93       	push	r24
    5374:	85 e6       	ldi	r24, 0x65	; 101
    5376:	93 e0       	ldi	r25, 0x03	; 3
    5378:	1f 92       	push	r1
    537a:	9f 93       	push	r25
    537c:	8f 93       	push	r24
    537e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

}
    5382:	0f b6       	in	r0, 0x3f	; 63
    5384:	f8 94       	cli
    5386:	de bf       	out	0x3e, r29	; 62
    5388:	0f be       	out	0x3f, r0	; 63
    538a:	cd bf       	out	0x3d, r28	; 61
    538c:	22 96       	adiw	r28, 0x02	; 2
    538e:	e2 e0       	ldi	r30, 0x02	; 2
    5390:	0c 94 bb e9 	jmp	0x1d376	; 0x1d376 <__epilogue_restores__+0x20>

00005394 <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    5394:	ef 92       	push	r14
    5396:	ff 92       	push	r15
    5398:	0f 93       	push	r16
    539a:	1f 93       	push	r17
    539c:	cf 93       	push	r28
    539e:	df 93       	push	r29
    53a0:	18 2f       	mov	r17, r24
    53a2:	09 2f       	mov	r16, r25
    53a4:	f6 2e       	mov	r15, r22
    53a6:	e7 2e       	mov	r14, r23
	void *p = calloc(size, elements);
    53a8:	0e 94 4c ec 	call	0x1d898	; 0x1d898 <calloc>
    53ac:	ec 01       	movw	r28, r24
	if(!p)
    53ae:	89 2b       	or	r24, r25
    53b0:	99 f4       	brne	.+38     	; 0x53d8 <safecalloc+0x44>
	{
		printf("safecalloc(%d,%d) failed!\n", size, elements);
    53b2:	ef 92       	push	r14
    53b4:	ff 92       	push	r15
    53b6:	0f 93       	push	r16
    53b8:	1f 93       	push	r17
    53ba:	8a e4       	ldi	r24, 0x4A	; 74
    53bc:	93 e0       	ldi	r25, 0x03	; 3
    53be:	1f 92       	push	r1
    53c0:	9f 93       	push	r25
    53c2:	8f 93       	push	r24
    53c4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    53c8:	8d b7       	in	r24, 0x3d	; 61
    53ca:	9e b7       	in	r25, 0x3e	; 62
    53cc:	07 96       	adiw	r24, 0x07	; 7
    53ce:	0f b6       	in	r0, 0x3f	; 63
    53d0:	f8 94       	cli
    53d2:	9e bf       	out	0x3e, r25	; 62
    53d4:	0f be       	out	0x3f, r0	; 63
    53d6:	8d bf       	out	0x3d, r24	; 61
	}
	return(p);
}
    53d8:	ce 01       	movw	r24, r28
    53da:	cd b7       	in	r28, 0x3d	; 61
    53dc:	de b7       	in	r29, 0x3e	; 62
    53de:	e6 e0       	ldi	r30, 0x06	; 6
    53e0:	0c 94 b7 e9 	jmp	0x1d36e	; 0x1d36e <__epilogue_restores__+0x18>

000053e4 <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    53e4:	0f 93       	push	r16
    53e6:	1f 93       	push	r17
    53e8:	cf 93       	push	r28
    53ea:	df 93       	push	r29
    53ec:	18 2f       	mov	r17, r24
    53ee:	09 2f       	mov	r16, r25
    void *p = calloc(size, 1);
    53f0:	61 e0       	ldi	r22, 0x01	; 1
    53f2:	70 e0       	ldi	r23, 0x00	; 0
    53f4:	0e 94 4c ec 	call	0x1d898	; 0x1d898 <calloc>
    53f8:	ec 01       	movw	r28, r24
    if(!p)
    53fa:	89 2b       	or	r24, r25
    53fc:	71 f4       	brne	.+28     	; 0x541a <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    53fe:	0f 93       	push	r16
    5400:	1f 93       	push	r17
    5402:	82 e3       	ldi	r24, 0x32	; 50
    5404:	93 e0       	ldi	r25, 0x03	; 3
    5406:	1f 92       	push	r1
    5408:	9f 93       	push	r25
    540a:	8f 93       	push	r24
    540c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    5410:	0f 90       	pop	r0
    5412:	0f 90       	pop	r0
    5414:	0f 90       	pop	r0
    5416:	0f 90       	pop	r0
    5418:	0f 90       	pop	r0
    }
    return(p);
}
    541a:	ce 01       	movw	r24, r28
    541c:	df 91       	pop	r29
    541e:	cf 91       	pop	r28
    5420:	1f 91       	pop	r17
    5422:	0f 91       	pop	r16
    5424:	08 95       	ret

00005426 <safefree>:
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    5426:	00 97       	sbiw	r24, 0x00	; 0
    5428:	39 f1       	breq	.+78     	; 0x5478 <safefree+0x52>
        return;

    if(__brkval)
    542a:	20 91 77 1f 	lds	r18, 0x1F77	; 0x801f77 <__brkval>
    542e:	30 91 78 1f 	lds	r19, 0x1F78	; 0x801f78 <__brkval+0x1>
    5432:	21 15       	cp	r18, r1
    5434:	31 05       	cpc	r19, r1
    5436:	11 f4       	brne	.+4      	; 0x543c <safefree+0x16>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    5438:	2b e7       	ldi	r18, 0x7B	; 123
    543a:	3f e1       	ldi	r19, 0x1F	; 31

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    543c:	4f e1       	ldi	r20, 0x1F	; 31
    543e:	8b 37       	cpi	r24, 0x7B	; 123
    5440:	94 07       	cpc	r25, r20
    5442:	30 f0       	brcs	.+12     	; 0x5450 <safefree+0x2a>
    5444:	28 17       	cp	r18, r24
    5446:	39 07       	cpc	r19, r25
    5448:	18 f0       	brcs	.+6      	; 0x5450 <safefree+0x2a>
        ((uint16_t) p <= top) )
    {
        free(p);
    544a:	0c 94 fe ec 	jmp	0x1d9fc	; 0x1d9fc <free>
        return;
    544e:	08 95       	ret
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    5450:	3f 93       	push	r19
    5452:	2f 93       	push	r18
    5454:	9f 93       	push	r25
    5456:	8f 93       	push	r24
    5458:	8d e0       	ldi	r24, 0x0D	; 13
    545a:	93 e0       	ldi	r25, 0x03	; 3
    545c:	1f 92       	push	r1
    545e:	9f 93       	push	r25
    5460:	8f 93       	push	r24
    5462:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    PrintFree();
    5466:	13 df       	rcall	.-474    	; 0x528e <PrintFree>
    5468:	8d b7       	in	r24, 0x3d	; 61
    546a:	9e b7       	in	r25, 0x3e	; 62
    546c:	07 96       	adiw	r24, 0x07	; 7
    546e:	0f b6       	in	r0, 0x3f	; 63
    5470:	f8 94       	cli
    5472:	9e bf       	out	0x3e, r25	; 62
    5474:	0f be       	out	0x3f, r0	; 63
    5476:	8d bf       	out	0x3d, r24	; 61
    5478:	08 95       	ret

0000547a <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    547a:	64 36       	cpi	r22, 0x64	; 100
    547c:	71 05       	cpc	r23, r1
    547e:	81 05       	cpc	r24, r1
    5480:	91 05       	cpc	r25, r1
    5482:	58 f0       	brcs	.+22     	; 0x549a <delayus+0x20>
    {
        us -= 100U;
    5484:	64 56       	subi	r22, 0x64	; 100
    5486:	71 09       	sbc	r23, r1
    5488:	81 09       	sbc	r24, r1
    548a:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    548c:	e3 ef       	ldi	r30, 0xF3	; 243
    548e:	f1 e0       	ldi	r31, 0x01	; 1
    5490:	31 97       	sbiw	r30, 0x01	; 1
    5492:	f1 f7       	brne	.-4      	; 0x5490 <delayus+0x16>
    5494:	00 c0       	rjmp	.+0      	; 0x5496 <delayus+0x1c>
    5496:	00 00       	nop
    5498:	f0 cf       	rjmp	.-32     	; 0x547a <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    549a:	6a 30       	cpi	r22, 0x0A	; 10
    549c:	71 05       	cpc	r23, r1
    549e:	81 05       	cpc	r24, r1
    54a0:	91 05       	cpc	r25, r1
    54a2:	48 f0       	brcs	.+18     	; 0x54b6 <delayus+0x3c>
    {
        us -= 10U;
    54a4:	6a 50       	subi	r22, 0x0A	; 10
    54a6:	71 09       	sbc	r23, r1
    54a8:	81 09       	sbc	r24, r1
    54aa:	91 09       	sbc	r25, r1
    54ac:	f2 e4       	ldi	r31, 0x42	; 66
    54ae:	fa 95       	dec	r31
    54b0:	f1 f7       	brne	.-4      	; 0x54ae <delayus+0x34>
    54b2:	00 c0       	rjmp	.+0      	; 0x54b4 <delayus+0x3a>
    54b4:	f2 cf       	rjmp	.-28     	; 0x549a <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    54b6:	61 15       	cp	r22, r1
    54b8:	71 05       	cpc	r23, r1
    54ba:	81 05       	cpc	r24, r1
    54bc:	91 05       	cpc	r25, r1
    54be:	49 f0       	breq	.+18     	; 0x54d2 <delayus+0x58>
    {
        --us;
    54c0:	61 50       	subi	r22, 0x01	; 1
    54c2:	71 09       	sbc	r23, r1
    54c4:	81 09       	sbc	r24, r1
    54c6:	91 09       	sbc	r25, r1
    54c8:	26 e0       	ldi	r18, 0x06	; 6
    54ca:	2a 95       	dec	r18
    54cc:	f1 f7       	brne	.-4      	; 0x54ca <delayus+0x50>
    54ce:	00 c0       	rjmp	.+0      	; 0x54d0 <delayus+0x56>
    54d0:	f2 cf       	rjmp	.-28     	; 0x54b6 <delayus+0x3c>
        _delay_us(1);
    }
}
    54d2:	08 95       	ret

000054d4 <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    54d4:	61 15       	cp	r22, r1
    54d6:	71 05       	cpc	r23, r1
    54d8:	81 05       	cpc	r24, r1
    54da:	91 05       	cpc	r25, r1
    54dc:	09 f4       	brne	.+2      	; 0x54e0 <delayms+0xc>
    54de:	41 c0       	rjmp	.+130    	; 0x5562 <delayms+0x8e>
    54e0:	e3 ef       	ldi	r30, 0xF3	; 243
    54e2:	f1 e0       	ldi	r31, 0x01	; 1
    54e4:	31 97       	sbiw	r30, 0x01	; 1
    54e6:	f1 f7       	brne	.-4      	; 0x54e4 <delayms+0x10>
    54e8:	00 c0       	rjmp	.+0      	; 0x54ea <delayms+0x16>
    54ea:	00 00       	nop
    54ec:	e3 ef       	ldi	r30, 0xF3	; 243
    54ee:	f1 e0       	ldi	r31, 0x01	; 1
    54f0:	31 97       	sbiw	r30, 0x01	; 1
    54f2:	f1 f7       	brne	.-4      	; 0x54f0 <delayms+0x1c>
    54f4:	00 c0       	rjmp	.+0      	; 0x54f6 <delayms+0x22>
    54f6:	00 00       	nop
    54f8:	e3 ef       	ldi	r30, 0xF3	; 243
    54fa:	f1 e0       	ldi	r31, 0x01	; 1
    54fc:	31 97       	sbiw	r30, 0x01	; 1
    54fe:	f1 f7       	brne	.-4      	; 0x54fc <delayms+0x28>
    5500:	00 c0       	rjmp	.+0      	; 0x5502 <delayms+0x2e>
    5502:	00 00       	nop
    5504:	e3 ef       	ldi	r30, 0xF3	; 243
    5506:	f1 e0       	ldi	r31, 0x01	; 1
    5508:	31 97       	sbiw	r30, 0x01	; 1
    550a:	f1 f7       	brne	.-4      	; 0x5508 <delayms+0x34>
    550c:	00 c0       	rjmp	.+0      	; 0x550e <delayms+0x3a>
    550e:	00 00       	nop
    5510:	e3 ef       	ldi	r30, 0xF3	; 243
    5512:	f1 e0       	ldi	r31, 0x01	; 1
    5514:	31 97       	sbiw	r30, 0x01	; 1
    5516:	f1 f7       	brne	.-4      	; 0x5514 <delayms+0x40>
    5518:	00 c0       	rjmp	.+0      	; 0x551a <delayms+0x46>
    551a:	00 00       	nop
    551c:	e3 ef       	ldi	r30, 0xF3	; 243
    551e:	f1 e0       	ldi	r31, 0x01	; 1
    5520:	31 97       	sbiw	r30, 0x01	; 1
    5522:	f1 f7       	brne	.-4      	; 0x5520 <delayms+0x4c>
    5524:	00 c0       	rjmp	.+0      	; 0x5526 <delayms+0x52>
    5526:	00 00       	nop
    5528:	e3 ef       	ldi	r30, 0xF3	; 243
    552a:	f1 e0       	ldi	r31, 0x01	; 1
    552c:	31 97       	sbiw	r30, 0x01	; 1
    552e:	f1 f7       	brne	.-4      	; 0x552c <delayms+0x58>
    5530:	00 c0       	rjmp	.+0      	; 0x5532 <delayms+0x5e>
    5532:	00 00       	nop
    5534:	e3 ef       	ldi	r30, 0xF3	; 243
    5536:	f1 e0       	ldi	r31, 0x01	; 1
    5538:	31 97       	sbiw	r30, 0x01	; 1
    553a:	f1 f7       	brne	.-4      	; 0x5538 <delayms+0x64>
    553c:	00 c0       	rjmp	.+0      	; 0x553e <delayms+0x6a>
    553e:	00 00       	nop
    5540:	e3 ef       	ldi	r30, 0xF3	; 243
    5542:	f1 e0       	ldi	r31, 0x01	; 1
    5544:	31 97       	sbiw	r30, 0x01	; 1
    5546:	f1 f7       	brne	.-4      	; 0x5544 <delayms+0x70>
    5548:	00 c0       	rjmp	.+0      	; 0x554a <delayms+0x76>
    554a:	00 00       	nop
    554c:	e3 ef       	ldi	r30, 0xF3	; 243
    554e:	f1 e0       	ldi	r31, 0x01	; 1
    5550:	31 97       	sbiw	r30, 0x01	; 1
    5552:	f1 f7       	brne	.-4      	; 0x5550 <delayms+0x7c>
    5554:	00 c0       	rjmp	.+0      	; 0x5556 <delayms+0x82>
    5556:	00 00       	nop
    5558:	61 50       	subi	r22, 0x01	; 1
    555a:	71 09       	sbc	r23, r1
    555c:	81 09       	sbc	r24, r1
    555e:	91 09       	sbc	r25, r1
    5560:	b9 cf       	rjmp	.-142    	; 0x54d4 <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    5562:	08 95       	ret

00005564 <uart_ubr>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    5564:	4f 92       	push	r4
    5566:	5f 92       	push	r5
    5568:	6f 92       	push	r6
    556a:	7f 92       	push	r7
    556c:	8f 92       	push	r8
    556e:	9f 92       	push	r9
    5570:	af 92       	push	r10
    5572:	bf 92       	push	r11
    5574:	cf 92       	push	r12
    5576:	df 92       	push	r13
    5578:	ef 92       	push	r14
    557a:	ff 92       	push	r15
    557c:	cf 93       	push	r28
    557e:	df 93       	push	r29
    5580:	5a 01       	movw	r10, r20
    5582:	e9 01       	movw	r28, r18
    5584:	0e 94 ea ea 	call	0x1d5d4	; 0x1d5d4 <__floatunsisf>
    5588:	2b 01       	movw	r4, r22
    558a:	3c 01       	movw	r6, r24
    558c:	20 e0       	ldi	r18, 0x00	; 0
    558e:	30 e0       	ldi	r19, 0x00	; 0
    5590:	40 e0       	ldi	r20, 0x00	; 0
    5592:	51 e4       	ldi	r21, 0x41	; 65
    5594:	0e 94 a0 eb 	call	0x1d740	; 0x1d740 <__mulsf3>
    5598:	9b 01       	movw	r18, r22
    559a:	ac 01       	movw	r20, r24
    559c:	60 e8       	ldi	r22, 0x80	; 128
    559e:	76 e9       	ldi	r23, 0x96	; 150
    55a0:	88 e9       	ldi	r24, 0x98	; 152
    55a2:	9b e4       	ldi	r25, 0x4B	; 75
    55a4:	0e 94 51 ea 	call	0x1d4a2	; 0x1d4a2 <__divsf3>
    55a8:	20 e0       	ldi	r18, 0x00	; 0
    55aa:	30 e0       	ldi	r19, 0x00	; 0
    55ac:	40 e8       	ldi	r20, 0x80	; 128
    55ae:	5f e3       	ldi	r21, 0x3F	; 63
    55b0:	0e 94 e8 e9 	call	0x1d3d0	; 0x1d3d0 <__subsf3>
    55b4:	0e 94 03 ec 	call	0x1d806	; 0x1d806 <round>
    55b8:	0e 94 be ea 	call	0x1d57c	; 0x1d57c <__fixunssfsi>
    55bc:	6b 01       	movw	r12, r22
    55be:	7c 01       	movw	r14, r24
    55c0:	c1 14       	cp	r12, r1
    55c2:	80 e1       	ldi	r24, 0x10	; 16
    55c4:	d8 06       	cpc	r13, r24
    55c6:	e1 04       	cpc	r14, r1
    55c8:	f1 04       	cpc	r15, r1
    55ca:	58 f4       	brcc	.+22     	; 0x55e2 <uart_ubr+0x7e>
    55cc:	81 e0       	ldi	r24, 0x01	; 1
    55ce:	90 e0       	ldi	r25, 0x00	; 0
    55d0:	f5 01       	movw	r30, r10
    55d2:	91 83       	std	Z+1, r25	; 0x01
    55d4:	80 83       	st	Z, r24
    55d6:	81 2c       	mov	r8, r1
    55d8:	91 2c       	mov	r9, r1
    55da:	a1 2c       	mov	r10, r1
    55dc:	21 e4       	ldi	r18, 0x41	; 65
    55de:	b2 2e       	mov	r11, r18
    55e0:	31 c0       	rjmp	.+98     	; 0x5644 <uart_ubr+0xe0>
    55e2:	f5 01       	movw	r30, r10
    55e4:	11 82       	std	Z+1, r1	; 0x01
    55e6:	10 82       	st	Z, r1
    55e8:	20 e0       	ldi	r18, 0x00	; 0
    55ea:	30 e0       	ldi	r19, 0x00	; 0
    55ec:	40 e8       	ldi	r20, 0x80	; 128
    55ee:	51 e4       	ldi	r21, 0x41	; 65
    55f0:	c3 01       	movw	r24, r6
    55f2:	b2 01       	movw	r22, r4
    55f4:	0e 94 a0 eb 	call	0x1d740	; 0x1d740 <__mulsf3>
    55f8:	9b 01       	movw	r18, r22
    55fa:	ac 01       	movw	r20, r24
    55fc:	60 e8       	ldi	r22, 0x80	; 128
    55fe:	76 e9       	ldi	r23, 0x96	; 150
    5600:	88 e9       	ldi	r24, 0x98	; 152
    5602:	9b e4       	ldi	r25, 0x4B	; 75
    5604:	0e 94 51 ea 	call	0x1d4a2	; 0x1d4a2 <__divsf3>
    5608:	20 e0       	ldi	r18, 0x00	; 0
    560a:	30 e0       	ldi	r19, 0x00	; 0
    560c:	40 e8       	ldi	r20, 0x80	; 128
    560e:	5f e3       	ldi	r21, 0x3F	; 63
    5610:	0e 94 e8 e9 	call	0x1d3d0	; 0x1d3d0 <__subsf3>
    5614:	0e 94 03 ec 	call	0x1d806	; 0x1d806 <round>
    5618:	0e 94 be ea 	call	0x1d57c	; 0x1d57c <__fixunssfsi>
    561c:	6b 01       	movw	r12, r22
    561e:	7c 01       	movw	r14, r24
    5620:	81 2c       	mov	r8, r1
    5622:	91 2c       	mov	r9, r1
    5624:	90 e8       	ldi	r25, 0x80	; 128
    5626:	a9 2e       	mov	r10, r25
    5628:	91 e4       	ldi	r25, 0x41	; 65
    562a:	b9 2e       	mov	r11, r25
    562c:	c1 14       	cp	r12, r1
    562e:	f0 e1       	ldi	r31, 0x10	; 16
    5630:	df 06       	cpc	r13, r31
    5632:	e1 04       	cpc	r14, r1
    5634:	f1 04       	cpc	r15, r1
    5636:	30 f0       	brcs	.+12     	; 0x5644 <uart_ubr+0xe0>
    5638:	cc 24       	eor	r12, r12
    563a:	ca 94       	dec	r12
    563c:	8f e0       	ldi	r24, 0x0F	; 15
    563e:	d8 2e       	mov	r13, r24
    5640:	e1 2c       	mov	r14, r1
    5642:	f1 2c       	mov	r15, r1
    5644:	c7 01       	movw	r24, r14
    5646:	b6 01       	movw	r22, r12
    5648:	6f 5f       	subi	r22, 0xFF	; 255
    564a:	7f 4f       	sbci	r23, 0xFF	; 255
    564c:	8f 4f       	sbci	r24, 0xFF	; 255
    564e:	9f 4f       	sbci	r25, 0xFF	; 255
    5650:	0e 94 ea ea 	call	0x1d5d4	; 0x1d5d4 <__floatunsisf>
    5654:	a5 01       	movw	r20, r10
    5656:	94 01       	movw	r18, r8
    5658:	0e 94 a0 eb 	call	0x1d740	; 0x1d740 <__mulsf3>
    565c:	9b 01       	movw	r18, r22
    565e:	ac 01       	movw	r20, r24
    5660:	60 e8       	ldi	r22, 0x80	; 128
    5662:	76 e9       	ldi	r23, 0x96	; 150
    5664:	88 e9       	ldi	r24, 0x98	; 152
    5666:	9b e4       	ldi	r25, 0x4B	; 75
    5668:	0e 94 51 ea 	call	0x1d4a2	; 0x1d4a2 <__divsf3>
    566c:	0e 94 be ea 	call	0x1d57c	; 0x1d57c <__fixunssfsi>
    5670:	68 83       	st	Y, r22
    5672:	79 83       	std	Y+1, r23	; 0x01
    5674:	8a 83       	std	Y+2, r24	; 0x02
    5676:	9b 83       	std	Y+3, r25	; 0x03
    5678:	c6 01       	movw	r24, r12
    567a:	df 91       	pop	r29
    567c:	cf 91       	pop	r28
    567e:	ff 90       	pop	r15
    5680:	ef 90       	pop	r14
    5682:	df 90       	pop	r13
    5684:	cf 90       	pop	r12
    5686:	bf 90       	pop	r11
    5688:	af 90       	pop	r10
    568a:	9f 90       	pop	r9
    568c:	8f 90       	pop	r8
    568e:	7f 90       	pop	r7
    5690:	6f 90       	pop	r6
    5692:	5f 90       	pop	r5
    5694:	4f 90       	pop	r4
    5696:	08 95       	ret

00005698 <uart_init>:
    5698:	a6 e0       	ldi	r26, 0x06	; 6
    569a:	b0 e0       	ldi	r27, 0x00	; 0
    569c:	e2 e5       	ldi	r30, 0x52	; 82
    569e:	fb e2       	ldi	r31, 0x2B	; 43
    56a0:	0c 94 9f e9 	jmp	0x1d33e	; 0x1d33e <__prologue_saves__+0x20>
    56a4:	1e 82       	std	Y+6, r1	; 0x06
    56a6:	1d 82       	std	Y+5, r1	; 0x05
    56a8:	81 11       	cpse	r24, r1
    56aa:	36 c0       	rjmp	.+108    	; 0x5718 <uart_init+0x80>
    56ac:	cb 01       	movw	r24, r22
    56ae:	ba 01       	movw	r22, r20
    56b0:	9e 01       	movw	r18, r28
    56b2:	2f 5f       	subi	r18, 0xFF	; 255
    56b4:	3f 4f       	sbci	r19, 0xFF	; 255
    56b6:	ae 01       	movw	r20, r28
    56b8:	4b 5f       	subi	r20, 0xFB	; 251
    56ba:	5f 4f       	sbci	r21, 0xFF	; 255
    56bc:	53 df       	rcall	.-346    	; 0x5564 <uart_ubr>
    56be:	f8 94       	cli
    56c0:	10 92 42 1a 	sts	0x1A42, r1	; 0x801a42 <uarts+0x4>
    56c4:	10 92 41 1a 	sts	0x1A41, r1	; 0x801a41 <uarts+0x3>
    56c8:	10 92 3e 1a 	sts	0x1A3E, r1	; 0x801a3e <uarts>
    56cc:	10 92 3f 1a 	sts	0x1A3F, r1	; 0x801a3f <uarts+0x1>
    56d0:	10 92 40 1a 	sts	0x1A40, r1	; 0x801a40 <uarts+0x2>
    56d4:	10 92 43 1a 	sts	0x1A43, r1	; 0x801a43 <uarts+0x5>
    56d8:	78 94       	sei
    56da:	f8 94       	cli
    56dc:	58 9a       	sbi	0x0b, 0	; 11
    56de:	59 9a       	sbi	0x0b, 1	; 11
    56e0:	50 98       	cbi	0x0a, 0	; 10
    56e2:	51 9a       	sbi	0x0a, 1	; 10
    56e4:	28 e9       	ldi	r18, 0x98	; 152
    56e6:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    56ea:	2d 81       	ldd	r18, Y+5	; 0x05
    56ec:	3e 81       	ldd	r19, Y+6	; 0x06
    56ee:	23 2b       	or	r18, r19
    56f0:	19 f0       	breq	.+6      	; 0x56f8 <uart_init+0x60>
    56f2:	22 e0       	ldi	r18, 0x02	; 2
    56f4:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    56f8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    56fc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    5700:	78 94       	sei
    5702:	61 e4       	ldi	r22, 0x41	; 65
    5704:	7c e2       	ldi	r23, 0x2C	; 44
    5706:	86 e5       	ldi	r24, 0x56	; 86
    5708:	9c e2       	ldi	r25, 0x2C	; 44
    570a:	0e 94 21 7c 	call	0xf842	; 0xf842 <fdevopen>
    570e:	69 81       	ldd	r22, Y+1	; 0x01
    5710:	7a 81       	ldd	r23, Y+2	; 0x02
    5712:	8b 81       	ldd	r24, Y+3	; 0x03
    5714:	9c 81       	ldd	r25, Y+4	; 0x04
    5716:	03 c0       	rjmp	.+6      	; 0x571e <uart_init+0x86>
    5718:	60 e0       	ldi	r22, 0x00	; 0
    571a:	70 e0       	ldi	r23, 0x00	; 0
    571c:	cb 01       	movw	r24, r22
    571e:	26 96       	adiw	r28, 0x06	; 6
    5720:	e2 e0       	ldi	r30, 0x02	; 2
    5722:	0c 94 bb e9 	jmp	0x1d376	; 0x1d376 <__epilogue_restores__+0x20>

00005726 <uart_rx_interrupt>:
    5726:	27 e5       	ldi	r18, 0x57	; 87
    5728:	82 9f       	mul	r24, r18
    572a:	c0 01       	movw	r24, r0
    572c:	11 24       	eor	r1, r1
    572e:	fc 01       	movw	r30, r24
    5730:	e2 5c       	subi	r30, 0xC2	; 194
    5732:	f5 4e       	sbci	r31, 0xE5	; 229
    5734:	83 81       	ldd	r24, Z+3	; 0x03
    5736:	94 81       	ldd	r25, Z+4	; 0x04
    5738:	80 35       	cpi	r24, 0x50	; 80
    573a:	91 05       	cpc	r25, r1
    573c:	84 f4       	brge	.+32     	; 0x575e <uart_rx_interrupt+0x38>
    573e:	30 81       	ld	r19, Z
    5740:	21 e0       	ldi	r18, 0x01	; 1
    5742:	23 0f       	add	r18, r19
    5744:	20 83       	st	Z, r18
    5746:	df 01       	movw	r26, r30
    5748:	a3 0f       	add	r26, r19
    574a:	b1 1d       	adc	r27, r1
    574c:	16 96       	adiw	r26, 0x06	; 6
    574e:	6c 93       	st	X, r22
    5750:	01 96       	adiw	r24, 0x01	; 1
    5752:	94 83       	std	Z+4, r25	; 0x04
    5754:	83 83       	std	Z+3, r24	; 0x03
    5756:	20 35       	cpi	r18, 0x50	; 80
    5758:	28 f0       	brcs	.+10     	; 0x5764 <uart_rx_interrupt+0x3e>
    575a:	10 82       	st	Z, r1
    575c:	08 95       	ret
    575e:	85 81       	ldd	r24, Z+5	; 0x05
    5760:	81 60       	ori	r24, 0x01	; 1
    5762:	85 83       	std	Z+5, r24	; 0x05
    5764:	08 95       	ret

00005766 <__vector_20>:
    5766:	1f 92       	push	r1
    5768:	0f 92       	push	r0
    576a:	0f b6       	in	r0, 0x3f	; 63
    576c:	0f 92       	push	r0
    576e:	11 24       	eor	r1, r1
    5770:	0b b6       	in	r0, 0x3b	; 59
    5772:	0f 92       	push	r0
    5774:	2f 93       	push	r18
    5776:	3f 93       	push	r19
    5778:	4f 93       	push	r20
    577a:	5f 93       	push	r21
    577c:	6f 93       	push	r22
    577e:	7f 93       	push	r23
    5780:	8f 93       	push	r24
    5782:	9f 93       	push	r25
    5784:	af 93       	push	r26
    5786:	bf 93       	push	r27
    5788:	ef 93       	push	r30
    578a:	ff 93       	push	r31
    578c:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    5790:	80 e0       	ldi	r24, 0x00	; 0
    5792:	c9 df       	rcall	.-110    	; 0x5726 <uart_rx_interrupt>
    5794:	ff 91       	pop	r31
    5796:	ef 91       	pop	r30
    5798:	bf 91       	pop	r27
    579a:	af 91       	pop	r26
    579c:	9f 91       	pop	r25
    579e:	8f 91       	pop	r24
    57a0:	7f 91       	pop	r23
    57a2:	6f 91       	pop	r22
    57a4:	5f 91       	pop	r21
    57a6:	4f 91       	pop	r20
    57a8:	3f 91       	pop	r19
    57aa:	2f 91       	pop	r18
    57ac:	0f 90       	pop	r0
    57ae:	0b be       	out	0x3b, r0	; 59
    57b0:	0f 90       	pop	r0
    57b2:	0f be       	out	0x3f, r0	; 63
    57b4:	0f 90       	pop	r0
    57b6:	1f 90       	pop	r1
    57b8:	18 95       	reti

000057ba <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    57ba:	81 11       	cpse	r24, r1
    57bc:	07 c0       	rjmp	.+14     	; 0x57cc <uart_rx_count+0x12>
        return(EOF);

    cli();
    57be:	f8 94       	cli

    count = uarts[uart].rx_count;
    57c0:	80 91 41 1a 	lds	r24, 0x1A41	; 0x801a41 <uarts+0x3>
    57c4:	90 91 42 1a 	lds	r25, 0x1A42	; 0x801a42 <uarts+0x4>

    sei();
    57c8:	78 94       	sei

    return (count );
    57ca:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    57cc:	8f ef       	ldi	r24, 0xFF	; 255
    57ce:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    57d0:	08 95       	ret

000057d2 <uart_get_tail>:
/// @return 0 on error.
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;
    if(uart >= UARTS)
    57d2:	81 11       	cpse	r24, r1
    57d4:	21 c0       	rjmp	.+66     	; 0x5818 <uart_get_tail+0x46>
        return(EOF);

	while(uart_rx_count(uart) < 1)
    57d6:	80 e0       	ldi	r24, 0x00	; 0
    57d8:	f0 df       	rcall	.-32     	; 0x57ba <uart_rx_count>
    57da:	18 16       	cp	r1, r24
    57dc:	19 06       	cpc	r1, r25
    57de:	dc f7       	brge	.-10     	; 0x57d6 <uart_get_tail+0x4>
		;
    cli();
    57e0:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    57e2:	e0 91 3f 1a 	lds	r30, 0x1A3F	; 0x801a3f <uarts+0x1>
    57e6:	91 e0       	ldi	r25, 0x01	; 1
    57e8:	9e 0f       	add	r25, r30
    57ea:	90 93 3f 1a 	sts	0x1A3F, r25	; 0x801a3f <uarts+0x1>
    57ee:	f0 e0       	ldi	r31, 0x00	; 0
    57f0:	e2 5c       	subi	r30, 0xC2	; 194
    57f2:	f5 4e       	sbci	r31, 0xE5	; 229
    57f4:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    57f6:	90 35       	cpi	r25, 0x50	; 80
    57f8:	10 f0       	brcs	.+4      	; 0x57fe <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    57fa:	10 92 3f 1a 	sts	0x1A3F, r1	; 0x801a3f <uarts+0x1>
    uarts[uart].rx_count--;
    57fe:	20 91 41 1a 	lds	r18, 0x1A41	; 0x801a41 <uarts+0x3>
    5802:	30 91 42 1a 	lds	r19, 0x1A42	; 0x801a42 <uarts+0x4>
    5806:	21 50       	subi	r18, 0x01	; 1
    5808:	31 09       	sbc	r19, r1
    580a:	30 93 42 1a 	sts	0x1A42, r19	; 0x801a42 <uarts+0x4>
    580e:	20 93 41 1a 	sts	0x1A41, r18	; 0x801a41 <uarts+0x3>
    sei();
    5812:	78 94       	sei

    return (c & 0xff);
    5814:	90 e0       	ldi	r25, 0x00	; 0
    5816:	08 95       	ret
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;
    if(uart >= UARTS)
        return(EOF);
    5818:	8f ef       	ldi	r24, 0xFF	; 255
    581a:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    581c:	08 95       	ret

0000581e <uart_rx_byte>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    581e:	d9 df       	rcall	.-78     	; 0x57d2 <uart_get_tail>
    5820:	99 27       	eor	r25, r25
    5822:	08 95       	ret

00005824 <uart_tx_byte>:
    5824:	61 11       	cpse	r22, r1
    5826:	09 c0       	rjmp	.+18     	; 0x583a <uart_tx_byte+0x16>
    5828:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    582c:	25 ff       	sbrs	r18, 5
    582e:	fc cf       	rjmp	.-8      	; 0x5828 <uart_tx_byte+0x4>
    5830:	28 2f       	mov	r18, r24
    5832:	2f 77       	andi	r18, 0x7F	; 127
    5834:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    5838:	08 95       	ret
    583a:	61 30       	cpi	r22, 0x01	; 1
    583c:	49 f4       	brne	.+18     	; 0x5850 <uart_tx_byte+0x2c>
    583e:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    5842:	25 ff       	sbrs	r18, 5
    5844:	fc cf       	rjmp	.-8      	; 0x583e <uart_tx_byte+0x1a>
    5846:	28 2f       	mov	r18, r24
    5848:	2f 77       	andi	r18, 0x7F	; 127
    584a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    584e:	08 95       	ret
    5850:	8f ef       	ldi	r24, 0xFF	; 255
    5852:	9f ef       	ldi	r25, 0xFF	; 255
    5854:	08 95       	ret

00005856 <uart_getchar>:
    5856:	cf 93       	push	r28
    5858:	81 11       	cpse	r24, r1
    585a:	0f c0       	rjmp	.+30     	; 0x587a <uart_getchar+0x24>
    585c:	e0 df       	rcall	.-64     	; 0x581e <uart_rx_byte>
    585e:	c8 2f       	mov	r28, r24
    5860:	60 e0       	ldi	r22, 0x00	; 0
    5862:	90 e0       	ldi	r25, 0x00	; 0
    5864:	df df       	rcall	.-66     	; 0x5824 <uart_tx_byte>
    5866:	cd 30       	cpi	r28, 0x0D	; 13
    5868:	29 f4       	brne	.+10     	; 0x5874 <uart_getchar+0x1e>
    586a:	60 e0       	ldi	r22, 0x00	; 0
    586c:	8a e0       	ldi	r24, 0x0A	; 10
    586e:	90 e0       	ldi	r25, 0x00	; 0
    5870:	d9 df       	rcall	.-78     	; 0x5824 <uart_tx_byte>
    5872:	ca e0       	ldi	r28, 0x0A	; 10
    5874:	8c 2f       	mov	r24, r28
    5876:	90 e0       	ldi	r25, 0x00	; 0
    5878:	02 c0       	rjmp	.+4      	; 0x587e <uart_getchar+0x28>
    587a:	8f ef       	ldi	r24, 0xFF	; 255
    587c:	9f ef       	ldi	r25, 0xFF	; 255
    587e:	cf 91       	pop	r28
    5880:	08 95       	ret

00005882 <uart0_getchar>:
    5882:	80 e0       	ldi	r24, 0x00	; 0
    5884:	e8 cf       	rjmp	.-48     	; 0x5856 <uart_getchar>
    5886:	08 95       	ret

00005888 <uart_putchar>:
    5888:	1f 93       	push	r17
    588a:	cf 93       	push	r28
    588c:	df 93       	push	r29
    588e:	ec 01       	movw	r28, r24
    5890:	16 2f       	mov	r17, r22
    5892:	c8 df       	rcall	.-112    	; 0x5824 <uart_tx_byte>
    5894:	ca 30       	cpi	r28, 0x0A	; 10
    5896:	d1 05       	cpc	r29, r1
    5898:	21 f4       	brne	.+8      	; 0x58a2 <uart_putchar+0x1a>
    589a:	61 2f       	mov	r22, r17
    589c:	8d e0       	ldi	r24, 0x0D	; 13
    589e:	90 e0       	ldi	r25, 0x00	; 0
    58a0:	c1 df       	rcall	.-126    	; 0x5824 <uart_tx_byte>
    58a2:	ce 01       	movw	r24, r28
    58a4:	df 91       	pop	r29
    58a6:	cf 91       	pop	r28
    58a8:	1f 91       	pop	r17
    58aa:	08 95       	ret

000058ac <uart0_putchar>:
    58ac:	cf 93       	push	r28
    58ae:	df 93       	push	r29
    58b0:	ec 01       	movw	r28, r24
    58b2:	60 e0       	ldi	r22, 0x00	; 0
    58b4:	70 e0       	ldi	r23, 0x00	; 0
    58b6:	e8 df       	rcall	.-48     	; 0x5888 <uart_putchar>
    58b8:	ce 01       	movw	r24, r28
    58ba:	df 91       	pop	r29
    58bc:	cf 91       	pop	r28
    58be:	08 95       	ret

000058c0 <uart_keyhit>:
    58c0:	7c cf       	rjmp	.-264    	; 0x57ba <uart_rx_count>
    58c2:	08 95       	ret

000058c4 <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    58c4:	cf 92       	push	r12
    58c6:	df 92       	push	r13
    58c8:	ef 92       	push	r14
    58ca:	ff 92       	push	r15
    58cc:	6b 01       	movw	r12, r22
    58ce:	7c 01       	movw	r14, r24
    58d0:	80 91 aa 17 	lds	r24, 0x17AA	; 0x8017aa <SPI0_Speed_value>
    58d4:	90 91 ab 17 	lds	r25, 0x17AB	; 0x8017ab <SPI0_Speed_value+0x1>
    58d8:	a0 91 ac 17 	lds	r26, 0x17AC	; 0x8017ac <SPI0_Speed_value+0x2>
    58dc:	b0 91 ad 17 	lds	r27, 0x17AD	; 0x8017ad <SPI0_Speed_value+0x3>
    58e0:	8c 15       	cp	r24, r12
    58e2:	9d 05       	cpc	r25, r13
    58e4:	ae 05       	cpc	r26, r14
    58e6:	bf 05       	cpc	r27, r15
    58e8:	09 f4       	brne	.+2      	; 0x58ec <SPI0_Speed+0x28>
    58ea:	4e c0       	rjmp	.+156    	; 0x5988 <SPI0_Speed+0xc4>
    58ec:	60 e0       	ldi	r22, 0x00	; 0
    58ee:	7d e2       	ldi	r23, 0x2D	; 45
    58f0:	81 e3       	ldi	r24, 0x31	; 49
    58f2:	91 e0       	ldi	r25, 0x01	; 1
    58f4:	a7 01       	movw	r20, r14
    58f6:	96 01       	movw	r18, r12
    58f8:	0e 94 22 e9 	call	0x1d244	; 0x1d244 <__udivmodsi4>
    58fc:	20 38       	cpi	r18, 0x80	; 128
    58fe:	31 05       	cpc	r19, r1
    5900:	41 05       	cpc	r20, r1
    5902:	51 05       	cpc	r21, r1
    5904:	28 f4       	brcc	.+10     	; 0x5910 <SPI0_Speed+0x4c>
    5906:	20 34       	cpi	r18, 0x40	; 64
    5908:	31 05       	cpc	r19, r1
    590a:	41 05       	cpc	r20, r1
    590c:	51 05       	cpc	r21, r1
    590e:	30 f0       	brcs	.+12     	; 0x591c <SPI0_Speed+0x58>
    5910:	8d b5       	in	r24, 0x2d	; 45
    5912:	8e 7f       	andi	r24, 0xFE	; 254
    5914:	8d bd       	out	0x2d, r24	; 45
    5916:	8c b5       	in	r24, 0x2c	; 44
    5918:	82 60       	ori	r24, 0x02	; 2
    591a:	1b c0       	rjmp	.+54     	; 0x5952 <SPI0_Speed+0x8e>
    591c:	8d b5       	in	r24, 0x2d	; 45
    591e:	20 32       	cpi	r18, 0x20	; 32
    5920:	31 05       	cpc	r19, r1
    5922:	41 05       	cpc	r20, r1
    5924:	51 05       	cpc	r21, r1
    5926:	28 f0       	brcs	.+10     	; 0x5932 <SPI0_Speed+0x6e>
    5928:	81 60       	ori	r24, 0x01	; 1
    592a:	8d bd       	out	0x2d, r24	; 45
    592c:	8c b5       	in	r24, 0x2c	; 44
    592e:	82 60       	ori	r24, 0x02	; 2
    5930:	1f c0       	rjmp	.+62     	; 0x5970 <SPI0_Speed+0xac>
    5932:	20 31       	cpi	r18, 0x10	; 16
    5934:	31 05       	cpc	r19, r1
    5936:	41 05       	cpc	r20, r1
    5938:	51 05       	cpc	r21, r1
    593a:	10 f0       	brcs	.+4      	; 0x5940 <SPI0_Speed+0x7c>
    593c:	8e 7f       	andi	r24, 0xFE	; 254
    593e:	06 c0       	rjmp	.+12     	; 0x594c <SPI0_Speed+0x88>
    5940:	28 30       	cpi	r18, 0x08	; 8
    5942:	31 05       	cpc	r19, r1
    5944:	41 05       	cpc	r20, r1
    5946:	51 05       	cpc	r21, r1
    5948:	40 f0       	brcs	.+16     	; 0x595a <SPI0_Speed+0x96>
    594a:	81 60       	ori	r24, 0x01	; 1
    594c:	8d bd       	out	0x2d, r24	; 45
    594e:	8c b5       	in	r24, 0x2c	; 44
    5950:	8d 7f       	andi	r24, 0xFD	; 253
    5952:	8c bd       	out	0x2c, r24	; 44
    5954:	8c b5       	in	r24, 0x2c	; 44
    5956:	81 60       	ori	r24, 0x01	; 1
    5958:	0e c0       	rjmp	.+28     	; 0x5976 <SPI0_Speed+0xb2>
    595a:	24 30       	cpi	r18, 0x04	; 4
    595c:	31 05       	cpc	r19, r1
    595e:	41 05       	cpc	r20, r1
    5960:	51 05       	cpc	r21, r1
    5962:	10 f0       	brcs	.+4      	; 0x5968 <SPI0_Speed+0xa4>
    5964:	8e 7f       	andi	r24, 0xFE	; 254
    5966:	01 c0       	rjmp	.+2      	; 0x596a <SPI0_Speed+0xa6>
    5968:	81 60       	ori	r24, 0x01	; 1
    596a:	8d bd       	out	0x2d, r24	; 45
    596c:	8c b5       	in	r24, 0x2c	; 44
    596e:	8d 7f       	andi	r24, 0xFD	; 253
    5970:	8c bd       	out	0x2c, r24	; 44
    5972:	8c b5       	in	r24, 0x2c	; 44
    5974:	8e 7f       	andi	r24, 0xFE	; 254
    5976:	8c bd       	out	0x2c, r24	; 44
    5978:	c0 92 aa 17 	sts	0x17AA, r12	; 0x8017aa <SPI0_Speed_value>
    597c:	d0 92 ab 17 	sts	0x17AB, r13	; 0x8017ab <SPI0_Speed_value+0x1>
    5980:	e0 92 ac 17 	sts	0x17AC, r14	; 0x8017ac <SPI0_Speed_value+0x2>
    5984:	f0 92 ad 17 	sts	0x17AD, r15	; 0x8017ad <SPI0_Speed_value+0x3>
    5988:	ff 90       	pop	r15
    598a:	ef 90       	pop	r14
    598c:	df 90       	pop	r13
    598e:	cf 90       	pop	r12
    5990:	08 95       	ret

00005992 <SPI0_Mode>:
    5992:	cf 93       	push	r28
    5994:	df 93       	push	r29
    5996:	ec 01       	movw	r28, r24
    5998:	81 30       	cpi	r24, 0x01	; 1
    599a:	91 05       	cpc	r25, r1
    599c:	71 f0       	breq	.+28     	; 0x59ba <SPI0_Mode+0x28>
    599e:	2c f4       	brge	.+10     	; 0x59aa <SPI0_Mode+0x18>
    59a0:	89 2b       	or	r24, r25
    59a2:	c1 f4       	brne	.+48     	; 0x59d4 <SPI0_Mode+0x42>
    59a4:	8c b5       	in	r24, 0x2c	; 44
    59a6:	87 7f       	andi	r24, 0xF7	; 247
    59a8:	11 c0       	rjmp	.+34     	; 0x59cc <SPI0_Mode+0x3a>
    59aa:	82 30       	cpi	r24, 0x02	; 2
    59ac:	91 05       	cpc	r25, r1
    59ae:	61 f0       	breq	.+24     	; 0x59c8 <SPI0_Mode+0x36>
    59b0:	03 97       	sbiw	r24, 0x03	; 3
    59b2:	81 f4       	brne	.+32     	; 0x59d4 <SPI0_Mode+0x42>
    59b4:	8c b5       	in	r24, 0x2c	; 44
    59b6:	88 60       	ori	r24, 0x08	; 8
    59b8:	02 c0       	rjmp	.+4      	; 0x59be <SPI0_Mode+0x2c>
    59ba:	8c b5       	in	r24, 0x2c	; 44
    59bc:	87 7f       	andi	r24, 0xF7	; 247
    59be:	8c bd       	out	0x2c, r24	; 44
    59c0:	8c b5       	in	r24, 0x2c	; 44
    59c2:	84 60       	ori	r24, 0x04	; 4
    59c4:	8c bd       	out	0x2c, r24	; 44
    59c6:	14 c0       	rjmp	.+40     	; 0x59f0 <SPI0_Mode+0x5e>
    59c8:	8c b5       	in	r24, 0x2c	; 44
    59ca:	88 60       	ori	r24, 0x08	; 8
    59cc:	8c bd       	out	0x2c, r24	; 44
    59ce:	8c b5       	in	r24, 0x2c	; 44
    59d0:	8b 7f       	andi	r24, 0xFB	; 251
    59d2:	f8 cf       	rjmp	.-16     	; 0x59c4 <SPI0_Mode+0x32>
    59d4:	df 93       	push	r29
    59d6:	cf 93       	push	r28
    59d8:	84 e2       	ldi	r24, 0x24	; 36
    59da:	94 e0       	ldi	r25, 0x04	; 4
    59dc:	1f 92       	push	r1
    59de:	9f 93       	push	r25
    59e0:	8f 93       	push	r24
    59e2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    59e6:	0f 90       	pop	r0
    59e8:	0f 90       	pop	r0
    59ea:	0f 90       	pop	r0
    59ec:	0f 90       	pop	r0
    59ee:	0f 90       	pop	r0
    59f0:	d0 93 a9 17 	sts	0x17A9, r29	; 0x8017a9 <__data_end+0x1>
    59f4:	c0 93 a8 17 	sts	0x17A8, r28	; 0x8017a8 <__data_end>
    59f8:	df 91       	pop	r29
    59fa:	cf 91       	pop	r28
    59fc:	08 95       	ret

000059fe <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    59fe:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    5a00:	0d b4       	in	r0, 0x2d	; 45
    5a02:	07 fe       	sbrs	r0, 7
    5a04:	fd cf       	rjmp	.-6      	; 0x5a00 <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    5a06:	8e b5       	in	r24, 0x2e	; 46
}
    5a08:	08 95       	ret

00005a0a <SPI0_Init>:

///@brief Initialize SPI0 device.
///
/// - Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    5a0a:	cf 92       	push	r12
    5a0c:	df 92       	push	r13
    5a0e:	ef 92       	push	r14
    5a10:	ff 92       	push	r15
    5a12:	6b 01       	movw	r12, r22
    5a14:	7c 01       	movw	r14, r24

    GPIO_PIN_HI(SS);                                    // SS Output HI
    5a16:	2c 9a       	sbi	0x05, 4	; 5
    5a18:	24 9a       	sbi	0x04, 4	; 4

    delayus(10);
    5a1a:	6a e0       	ldi	r22, 0x0A	; 10
    5a1c:	70 e0       	ldi	r23, 0x00	; 0
    5a1e:	80 e0       	ldi	r24, 0x00	; 0
    5a20:	90 e0       	ldi	r25, 0x00	; 0
    5a22:	2b dd       	rcall	.-1450   	; 0x547a <delayus>

    GPIO_PIN_HI(SCK);                                   // SCK Output
    5a24:	2f 9a       	sbi	0x05, 7	; 5
    5a26:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                                  // MOSI Output
    5a28:	2d 9a       	sbi	0x05, 5	; 5
    5a2a:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                               // MISO Input, no pull-up
    5a2c:	26 98       	cbi	0x04, 6	; 4

    BIT_SET(SPCR, SPE);                           // Enable SPI
    5a2e:	8c b5       	in	r24, 0x2c	; 44
    5a30:	80 64       	ori	r24, 0x40	; 64
    5a32:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, MSTR);                          // Master Mode
    5a34:	8c b5       	in	r24, 0x2c	; 44
    5a36:	80 61       	ori	r24, 0x10	; 16
    5a38:	8c bd       	out	0x2c, r24	; 44

    SPI0_Mode(0);
    5a3a:	80 e0       	ldi	r24, 0x00	; 0
    5a3c:	90 e0       	ldi	r25, 0x00	; 0
    SPI0_Speed(speed);
    5a3e:	a9 df       	rcall	.-174    	; 0x5992 <SPI0_Mode>
    5a40:	c7 01       	movw	r24, r14
    SPI0_TXRX_Byte(0xff);
    5a42:	b6 01       	movw	r22, r12
    5a44:	3f df       	rcall	.-386    	; 0x58c4 <SPI0_Speed>
    5a46:	8f ef       	ldi	r24, 0xFF	; 255
	SPI0_Init_state = 1;
}
    5a48:	da df       	rcall	.-76     	; 0x59fe <SPI0_TXRX_Byte>
    5a4a:	ff 90       	pop	r15
    5a4c:	ef 90       	pop	r14
    5a4e:	df 90       	pop	r13
    5a50:	cf 90       	pop	r12
    5a52:	08 95       	ret

00005a54 <SPI0_TX>:
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    5a54:	0f 93       	push	r16
    5a56:	1f 93       	push	r17
    5a58:	cf 93       	push	r28
    5a5a:	df 93       	push	r29
    5a5c:	8c 01       	movw	r16, r24
    5a5e:	eb 01       	movw	r28, r22

    while(count > 0)
    5a60:	1c 16       	cp	r1, r28
    5a62:	1d 06       	cpc	r1, r29
    5a64:	34 f4       	brge	.+12     	; 0x5a72 <SPI0_TX+0x1e>
    {
		SPI0_TXRX_Byte(*data);
    5a66:	f8 01       	movw	r30, r16
    5a68:	81 91       	ld	r24, Z+
    5a6a:	8f 01       	movw	r16, r30
    5a6c:	c8 df       	rcall	.-112    	; 0x59fe <SPI0_TXRX_Byte>
		++data;
		--count;
    5a6e:	21 97       	sbiw	r28, 0x01	; 1
    5a70:	f7 cf       	rjmp	.-18     	; 0x5a60 <SPI0_TX+0xc>
	}
}
    5a72:	df 91       	pop	r29
    5a74:	cf 91       	pop	r28
    5a76:	1f 91       	pop	r17
    5a78:	0f 91       	pop	r16
    5a7a:	08 95       	ret

00005a7c <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    5a7c:	0f 93       	push	r16
    5a7e:	1f 93       	push	r17
    5a80:	cf 93       	push	r28
    5a82:	df 93       	push	r29
    5a84:	8c 01       	movw	r16, r24
    5a86:	eb 01       	movw	r28, r22

    while(count > 0)
    5a88:	1c 16       	cp	r1, r28
    5a8a:	1d 06       	cpc	r1, r29
    5a8c:	44 f4       	brge	.+16     	; 0x5a9e <SPI0_TXRX+0x22>
    {
		*data = SPI0_TXRX_Byte(*data);
    5a8e:	f8 01       	movw	r30, r16
    5a90:	80 81       	ld	r24, Z
    5a92:	b5 df       	rcall	.-150    	; 0x59fe <SPI0_TXRX_Byte>
    5a94:	f8 01       	movw	r30, r16
    5a96:	81 93       	st	Z+, r24
    5a98:	8f 01       	movw	r16, r30
		++data;
		--count;
    5a9a:	21 97       	sbiw	r28, 0x01	; 1
    5a9c:	f5 cf       	rjmp	.-22     	; 0x5a88 <SPI0_TXRX+0xc>
	}
}
    5a9e:	df 91       	pop	r29
    5aa0:	cf 91       	pop	r28
    5aa2:	1f 91       	pop	r17
    5aa4:	0f 91       	pop	r16
    5aa6:	08 95       	ret

00005aa8 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    5aa8:	0f 93       	push	r16
    5aaa:	1f 93       	push	r17
    5aac:	cf 93       	push	r28
    5aae:	df 93       	push	r29
    5ab0:	8c 01       	movw	r16, r24
    5ab2:	eb 01       	movw	r28, r22

    while(count > 0)
    5ab4:	1c 16       	cp	r1, r28
    5ab6:	1d 06       	cpc	r1, r29
    5ab8:	3c f4       	brge	.+14     	; 0x5ac8 <SPI0_RX+0x20>
    {
		*data = SPI0_TXRX_Byte(0xff);
    5aba:	8f ef       	ldi	r24, 0xFF	; 255
    5abc:	a0 df       	rcall	.-192    	; 0x59fe <SPI0_TXRX_Byte>
    5abe:	f8 01       	movw	r30, r16
    5ac0:	81 93       	st	Z+, r24
    5ac2:	8f 01       	movw	r16, r30
		++data;
		--count;
    5ac4:	21 97       	sbiw	r28, 0x01	; 1
    5ac6:	f6 cf       	rjmp	.-20     	; 0x5ab4 <SPI0_RX+0xc>
	}
}
    5ac8:	df 91       	pop	r29
    5aca:	cf 91       	pop	r28
    5acc:	1f 91       	pop	r17
    5ace:	0f 91       	pop	r16
    5ad0:	08 95       	ret

00005ad2 <TWI_Init>:
///
///@return void.
void TWI_Init(const uint8_t Prescale, const uint8_t BitLength)
{

    GPIO_PIN_LATCH_HI(SCL);                   // Pull Up on
    5ad2:	40 9a       	sbi	0x08, 0	; 8
    GPIO_PIN_LATCH_HI(SDA);                   // Pull Up on
    5ad4:	41 9a       	sbi	0x08, 1	; 8

    BIT_SET(TWCR,TWEN);
    5ad6:	ec eb       	ldi	r30, 0xBC	; 188
    5ad8:	f0 e0       	ldi	r31, 0x00	; 0
    5ada:	90 81       	ld	r25, Z
    5adc:	94 60       	ori	r25, 0x04	; 4
    5ade:	90 83       	st	Z, r25

    TWSR  = Prescale;
    5ae0:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR  = BitLength;
    5ae4:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5ae8:	08 95       	ret

00005aea <TWI_StartTransmission>:
    for (;;)
    {
        bool     BusCaptured = false;
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5aea:	94 ea       	ldi	r25, 0xA4	; 164
    5aec:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5af0:	24 e6       	ldi	r18, 0x64	; 100
    5af2:	62 9f       	mul	r22, r18
    5af4:	b0 01       	movw	r22, r0
    5af6:	11 24       	eor	r1, r1
    5af8:	61 50       	subi	r22, 0x01	; 1
    5afa:	71 09       	sbc	r23, r1

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5afc:	9b 01       	movw	r18, r22
///@return TWI error value on fail.
uint8_t TWI_StartTransmission(const uint8_t SlaveAddress, const uint8_t TimeoutMS)
{
    for (;;)
    {
        bool     BusCaptured = false;
    5afe:	40 e0       	ldi	r20, 0x00	; 0
    5b00:	50 e0       	ldi	r21, 0x00	; 0
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5b02:	e4 ea       	ldi	r30, 0xA4	; 164
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5b04:	2f 3f       	cpi	r18, 0xFF	; 255
    5b06:	9f ef       	ldi	r25, 0xFF	; 255
    5b08:	39 07       	cpc	r19, r25
    5b0a:	41 f1       	breq	.+80     	; 0x5b5c <TWI_StartTransmission+0x72>
    5b0c:	41 15       	cp	r20, r1
    5b0e:	51 05       	cpc	r21, r1
    5b10:	f1 f4       	brne	.+60     	; 0x5b4e <TWI_StartTransmission+0x64>
        {
            if (TWCR & (1 << TWINT))
    5b12:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b16:	97 ff       	sbrs	r25, 7
    5b18:	13 c0       	rjmp	.+38     	; 0x5b40 <TWI_StartTransmission+0x56>
            {
                switch (TWSR & TW_STATUS_MASK)
    5b1a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b1e:	98 7f       	andi	r25, 0xF8	; 248
    5b20:	90 31       	cpi	r25, 0x10	; 16
    5b22:	61 f0       	breq	.+24     	; 0x5b3c <TWI_StartTransmission+0x52>
    5b24:	98 33       	cpi	r25, 0x38	; 56
    5b26:	39 f0       	breq	.+14     	; 0x5b36 <TWI_StartTransmission+0x4c>
    5b28:	98 30       	cpi	r25, 0x08	; 8
    5b2a:	41 f0       	breq	.+16     	; 0x5b3c <TWI_StartTransmission+0x52>
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
                        continue;
                    default:
                        TWCR = (1 << TWEN);
    5b2c:	84 e0       	ldi	r24, 0x04	; 4
    5b2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        return TWI_ERROR_BusFault;
    5b32:	81 e0       	ldi	r24, 0x01	; 1
    5b34:	08 95       	ret
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5b36:	e0 93 bc 00 	sts	0x00BC, r30	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        continue;
    5b3a:	06 c0       	rjmp	.+12     	; 0x5b48 <TWI_StartTransmission+0x5e>
            {
                switch (TWSR & TW_STATUS_MASK)
                {
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
    5b3c:	41 e0       	ldi	r20, 0x01	; 1
    5b3e:	50 e0       	ldi	r21, 0x00	; 0
    5b40:	92 e4       	ldi	r25, 0x42	; 66
    5b42:	9a 95       	dec	r25
    5b44:	f1 f7       	brne	.-4      	; 0x5b42 <TWI_StartTransmission+0x58>
    5b46:	00 c0       	rjmp	.+0      	; 0x5b48 <TWI_StartTransmission+0x5e>
    5b48:	21 50       	subi	r18, 0x01	; 1
    5b4a:	31 09       	sbc	r19, r1
    5b4c:	db cf       	rjmp	.-74     	; 0x5b04 <TWI_StartTransmission+0x1a>
            }

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5b4e:	23 2b       	or	r18, r19
    5b50:	29 f4       	brne	.+10     	; 0x5b5c <TWI_StartTransmission+0x72>
        {
            TWCR = (1 << TWEN);
    5b52:	84 e0       	ldi	r24, 0x04	; 4
    5b54:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            return TWI_ERROR_BusCaptureTimeout;
    5b58:	82 e0       	ldi	r24, 0x02	; 2
    5b5a:	08 95       	ret
        }

        TWDR = SlaveAddress;
    5b5c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = ((1 << TWINT) | (1 << TWEN));
    5b60:	84 e8       	ldi	r24, 0x84	; 132
    5b62:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining--)
    5b66:	6f 3f       	cpi	r22, 0xFF	; 255
    5b68:	8f ef       	ldi	r24, 0xFF	; 255
    5b6a:	78 07       	cpc	r23, r24
    5b6c:	71 f0       	breq	.+28     	; 0x5b8a <TWI_StartTransmission+0xa0>
        {
            if (TWCR & (1 << TWINT))
    5b6e:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b72:	cb 01       	movw	r24, r22
    5b74:	01 97       	sbiw	r24, 0x01	; 1
    5b76:	27 fd       	sbrc	r18, 7
    5b78:	06 c0       	rjmp	.+12     	; 0x5b86 <TWI_StartTransmission+0x9c>
    5b7a:	22 e4       	ldi	r18, 0x42	; 66
    5b7c:	2a 95       	dec	r18
    5b7e:	f1 f7       	brne	.-4      	; 0x5b7c <TWI_StartTransmission+0x92>
    5b80:	00 c0       	rjmp	.+0      	; 0x5b82 <TWI_StartTransmission+0x98>
    5b82:	bc 01       	movw	r22, r24
    5b84:	f0 cf       	rjmp	.-32     	; 0x5b66 <TWI_StartTransmission+0x7c>
                break;

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5b86:	67 2b       	or	r22, r23
    5b88:	61 f0       	breq	.+24     	; 0x5ba2 <TWI_StartTransmission+0xb8>
            return TWI_ERROR_SlaveResponseTimeout;

        switch (TWSR & TW_STATUS_MASK)
    5b8a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b8e:	88 7f       	andi	r24, 0xF8	; 248
    5b90:	88 31       	cpi	r24, 0x18	; 24
    5b92:	49 f0       	breq	.+18     	; 0x5ba6 <TWI_StartTransmission+0xbc>
    5b94:	80 34       	cpi	r24, 0x40	; 64
    5b96:	39 f0       	breq	.+14     	; 0x5ba6 <TWI_StartTransmission+0xbc>
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5b98:	84 e9       	ldi	r24, 0x94	; 148
    5b9a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                return TWI_ERROR_SlaveNotReady;
    5b9e:	84 e0       	ldi	r24, 0x04	; 4
    5ba0:	08 95       	ret

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
            return TWI_ERROR_SlaveResponseTimeout;
    5ba2:	83 e0       	ldi	r24, 0x03	; 3
    5ba4:	08 95       	ret

        switch (TWSR & TW_STATUS_MASK)
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
    5ba6:	80 e0       	ldi	r24, 0x00	; 0
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
                return TWI_ERROR_SlaveNotReady;
        }
    }
}
    5ba8:	08 95       	ret

00005baa <TWI_SendByte>:
///
///@return 1 if Acknowledge.
///@return 0 on fail.
bool TWI_SendByte(const uint8_t Byte)
{
    TWDR = Byte;
    5baa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = ((1 << TWINT) | (1 << TWEN));
    5bae:	84 e8       	ldi	r24, 0x84	; 132
    5bb0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!(TWCR & (1 << TWINT)));
    5bb4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5bb8:	87 ff       	sbrs	r24, 7
    5bba:	fc cf       	rjmp	.-8      	; 0x5bb4 <TWI_SendByte+0xa>

    return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    5bbc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5bc0:	98 7f       	andi	r25, 0xF8	; 248
    5bc2:	21 e0       	ldi	r18, 0x01	; 1
    5bc4:	30 e0       	ldi	r19, 0x00	; 0
    5bc6:	98 32       	cpi	r25, 0x28	; 40
    5bc8:	11 f0       	breq	.+4      	; 0x5bce <TWI_SendByte+0x24>
    5bca:	20 e0       	ldi	r18, 0x00	; 0
    5bcc:	30 e0       	ldi	r19, 0x00	; 0
}
    5bce:	c9 01       	movw	r24, r18
    5bd0:	08 95       	ret

00005bd2 <TWI_ReceiveByte>:


bool TWI_ReceiveByte(uint8_t* const Byte,
const bool LastByte)
{
    5bd2:	fc 01       	movw	r30, r24
    uint8_t TWCRMask;

    if (LastByte)
    5bd4:	61 15       	cp	r22, r1
    5bd6:	71 05       	cpc	r23, r1
    5bd8:	11 f4       	brne	.+4      	; 0x5bde <TWI_ReceiveByte+0xc>
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
    5bda:	94 ec       	ldi	r25, 0xC4	; 196
    5bdc:	01 c0       	rjmp	.+2      	; 0x5be0 <TWI_ReceiveByte+0xe>
const bool LastByte)
{
    uint8_t TWCRMask;

    if (LastByte)
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    5bde:	94 e8       	ldi	r25, 0x84	; 132
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));

    TWCR = TWCRMask;
    5be0:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!BIT_TST(TWCR, TWINT))
    5be4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5be8:	87 ff       	sbrs	r24, 7
    5bea:	fc cf       	rjmp	.-8      	; 0x5be4 <TWI_ReceiveByte+0x12>
        ;
    *Byte = TWDR;
    5bec:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5bf0:	80 83       	st	Z, r24

    uint8_t Status = (TWSR & TW_STATUS_MASK);
    5bf2:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5bf6:	28 7f       	andi	r18, 0xF8	; 248

    return ((LastByte) ? (Status == TW_MR_DATA_NACK) : (Status == TW_MR_DATA_ACK));
    5bf8:	81 e0       	ldi	r24, 0x01	; 1
    5bfa:	90 e0       	ldi	r25, 0x00	; 0
    5bfc:	67 2b       	or	r22, r23
    5bfe:	19 f0       	breq	.+6      	; 0x5c06 <TWI_ReceiveByte+0x34>
    5c00:	28 35       	cpi	r18, 0x58	; 88
    5c02:	19 f4       	brne	.+6      	; 0x5c0a <TWI_ReceiveByte+0x38>
    5c04:	03 c0       	rjmp	.+6      	; 0x5c0c <TWI_ReceiveByte+0x3a>
    5c06:	20 35       	cpi	r18, 0x50	; 80
    5c08:	09 f0       	breq	.+2      	; 0x5c0c <TWI_ReceiveByte+0x3a>
    5c0a:	80 e0       	ldi	r24, 0x00	; 0
}
    5c0c:	08 95       	ret

00005c0e <TWI_ReadPacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
uint8_t* Buffer,
uint8_t Length)
{
    5c0e:	a0 e0       	ldi	r26, 0x00	; 0
    5c10:	b0 e0       	ldi	r27, 0x00	; 0
    5c12:	ed e0       	ldi	r30, 0x0D	; 13
    5c14:	fe e2       	ldi	r31, 0x2E	; 46
    5c16:	0c 94 96 e9 	jmp	0x1d32c	; 0x1d32c <__prologue_saves__+0xe>
    5c1a:	f8 2e       	mov	r15, r24
    5c1c:	b6 2e       	mov	r11, r22
    5c1e:	94 2e       	mov	r9, r20
    5c20:	a5 2e       	mov	r10, r21
    5c22:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5c24:	8e 7f       	andi	r24, 0xFE	; 254
    5c26:	61 df       	rcall	.-318    	; 0x5aea <TWI_StartTransmission>
    5c28:	d8 2f       	mov	r29, r24
    5c2a:	81 11       	cpse	r24, r1
    5c2c:	2b c0       	rjmp	.+86     	; 0x5c84 <TWI_ReadPacket+0x76>
    5c2e:	c9 2c       	mov	r12, r9
    5c30:	da 2c       	mov	r13, r10
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5c32:	cc 23       	and	r28, r28
    5c34:	39 f0       	breq	.+14     	; 0x5c44 <TWI_ReadPacket+0x36>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5c36:	f6 01       	movw	r30, r12
    5c38:	81 91       	ld	r24, Z+
    5c3a:	6f 01       	movw	r12, r30
    5c3c:	b6 df       	rcall	.-148    	; 0x5baa <TWI_SendByte>
    5c3e:	c1 50       	subi	r28, 0x01	; 1
    5c40:	89 2b       	or	r24, r25
    5c42:	b9 f7       	brne	.-18     	; 0x5c32 <TWI_ReadPacket+0x24>
                ErrorCode = TWI_ERROR_SlaveNAK;
                break;
            }
        }

        if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
    5c44:	6b 2d       	mov	r22, r11
    5c46:	8f 2d       	mov	r24, r15
    5c48:	81 60       	ori	r24, 0x01	; 1
    5c4a:	4f df       	rcall	.-354    	; 0x5aea <TWI_StartTransmission>
    5c4c:	d8 2f       	mov	r29, r24
    5c4e:	81 11       	cpse	r24, r1
    5c50:	19 c0       	rjmp	.+50     	; 0x5c84 <TWI_ReadPacket+0x76>
    5c52:	cf ef       	ldi	r28, 0xFF	; 255
    5c54:	ce 0d       	add	r28, r14
            TimeoutMS)) == TWI_ERROR_NoError)
        {
            while (Length--)
    5c56:	cf 3f       	cpi	r28, 0xFF	; 255
    5c58:	91 f0       	breq	.+36     	; 0x5c7e <TWI_ReadPacket+0x70>
            {
                if (!(TWI_ReceiveByte(Buffer++, (Length == 0))))
    5c5a:	78 01       	movw	r14, r16
    5c5c:	ff ef       	ldi	r31, 0xFF	; 255
    5c5e:	ef 1a       	sub	r14, r31
    5c60:	ff 0a       	sbc	r15, r31
    5c62:	61 e0       	ldi	r22, 0x01	; 1
    5c64:	70 e0       	ldi	r23, 0x00	; 0
    5c66:	cc 23       	and	r28, r28
    5c68:	11 f0       	breq	.+4      	; 0x5c6e <TWI_ReadPacket+0x60>
    5c6a:	60 e0       	ldi	r22, 0x00	; 0
    5c6c:	70 e0       	ldi	r23, 0x00	; 0
    5c6e:	c8 01       	movw	r24, r16
    5c70:	b0 df       	rcall	.-160    	; 0x5bd2 <TWI_ReceiveByte>
    5c72:	c1 50       	subi	r28, 0x01	; 1
    5c74:	89 2b       	or	r24, r25
    5c76:	11 f0       	breq	.+4      	; 0x5c7c <TWI_ReadPacket+0x6e>
    5c78:	87 01       	movw	r16, r14
    5c7a:	ed cf       	rjmp	.-38     	; 0x5c56 <TWI_ReadPacket+0x48>
                {
                    ErrorCode = TWI_ERROR_SlaveNAK;
    5c7c:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
static inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5c7e:	84 e9       	ldi	r24, 0x94	; 148
    5c80:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            TWI_StopTransmission();
        }
    }

    return ErrorCode;
}
    5c84:	8d 2f       	mov	r24, r29
    5c86:	cd b7       	in	r28, 0x3d	; 61
    5c88:	de b7       	in	r29, 0x3e	; 62
    5c8a:	eb e0       	ldi	r30, 0x0B	; 11
    5c8c:	0c 94 b2 e9 	jmp	0x1d364	; 0x1d364 <__epilogue_restores__+0xe>

00005c90 <TWI_WritePacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
const uint8_t* Buffer,
uint8_t Length)
{
    5c90:	a0 e0       	ldi	r26, 0x00	; 0
    5c92:	b0 e0       	ldi	r27, 0x00	; 0
    5c94:	ee e4       	ldi	r30, 0x4E	; 78
    5c96:	fe e2       	ldi	r31, 0x2E	; 46
    5c98:	0c 94 98 e9 	jmp	0x1d330	; 0x1d330 <__prologue_saves__+0x12>
    5c9c:	b4 2e       	mov	r11, r20
    5c9e:	f5 2e       	mov	r15, r21
    5ca0:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5ca2:	8e 7f       	andi	r24, 0xFE	; 254
    5ca4:	22 df       	rcall	.-444    	; 0x5aea <TWI_StartTransmission>
    5ca6:	d8 2f       	mov	r29, r24
    5ca8:	81 11       	cpse	r24, r1
    5caa:	1a c0       	rjmp	.+52     	; 0x5ce0 <TWI_WritePacket+0x50>
    5cac:	cb 2c       	mov	r12, r11
    5cae:	df 2c       	mov	r13, r15
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5cb0:	cc 23       	and	r28, r28
    5cb2:	41 f0       	breq	.+16     	; 0x5cc4 <TWI_WritePacket+0x34>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5cb4:	f6 01       	movw	r30, r12
    5cb6:	81 91       	ld	r24, Z+
    5cb8:	6f 01       	movw	r12, r30
    5cba:	77 df       	rcall	.-274    	; 0x5baa <TWI_SendByte>
    5cbc:	c1 50       	subi	r28, 0x01	; 1
    5cbe:	89 2b       	or	r24, r25
    5cc0:	b9 f7       	brne	.-18     	; 0x5cb0 <TWI_WritePacket+0x20>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5cc2:	d5 e0       	ldi	r29, 0x05	; 5
    5cc4:	68 01       	movw	r12, r16
                break;
            }
        }

        while (Length--)
    5cc6:	ee 20       	and	r14, r14
    5cc8:	41 f0       	breq	.+16     	; 0x5cda <TWI_WritePacket+0x4a>
        {
            if (!(TWI_SendByte(*(Buffer++))))
    5cca:	f6 01       	movw	r30, r12
    5ccc:	81 91       	ld	r24, Z+
    5cce:	6f 01       	movw	r12, r30
    5cd0:	6c df       	rcall	.-296    	; 0x5baa <TWI_SendByte>
    5cd2:	ea 94       	dec	r14
    5cd4:	89 2b       	or	r24, r25
    5cd6:	b9 f7       	brne	.-18     	; 0x5cc6 <TWI_WritePacket+0x36>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5cd8:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
static inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5cda:	84 e9       	ldi	r24, 0x94	; 148
    5cdc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TWI_StopTransmission();
    }

    return ErrorCode;
}
    5ce0:	8d 2f       	mov	r24, r29
    5ce2:	cd b7       	in	r28, 0x3d	; 61
    5ce4:	de b7       	in	r29, 0x3e	; 62
    5ce6:	e9 e0       	ldi	r30, 0x09	; 9
    5ce8:	0c 94 b4 e9 	jmp	0x1d368	; 0x1d368 <__epilogue_restores__+0x12>

00005cec <BINtoBCD>:
        return -1;
    }
    if(b & 8)
        return 0;
    return 1;
}
    5cec:	6a e0       	ldi	r22, 0x0A	; 10
    5cee:	0e 94 ef e8 	call	0x1d1de	; 0x1d1de <__udivmodqi4>
    5cf2:	82 95       	swap	r24
    5cf4:	80 7f       	andi	r24, 0xF0	; 240
    5cf6:	89 2b       	or	r24, r25
    5cf8:	08 95       	ret

00005cfa <BCDtoBIN>:
    5cfa:	98 2f       	mov	r25, r24
    5cfc:	92 95       	swap	r25
    5cfe:	9f 70       	andi	r25, 0x0F	; 15
    5d00:	8f 70       	andi	r24, 0x0F	; 15
    5d02:	2a e0       	ldi	r18, 0x0A	; 10
    5d04:	92 9f       	mul	r25, r18
    5d06:	80 0d       	add	r24, r0
    5d08:	11 24       	eor	r1, r1
    5d0a:	08 95       	ret

00005d0c <rtc_run>:
///  - -1 = check run state.
///
/// @return  run state 0/1 on success.
/// @return -1 on error.
int rtc_run(int run)
{
    5d0c:	cf 92       	push	r12
    5d0e:	df 92       	push	r13
    5d10:	ef 92       	push	r14
    5d12:	0f 93       	push	r16
    5d14:	1f 93       	push	r17
    5d16:	cf 93       	push	r28
    5d18:	df 93       	push	r29
    5d1a:	00 d0       	rcall	.+0      	; 0x5d1c <rtc_run+0x10>
    5d1c:	1f 92       	push	r1
    5d1e:	cd b7       	in	r28, 0x3d	; 61
    5d20:	de b7       	in	r29, 0x3e	; 62
    5d22:	6c 01       	movw	r12, r24
    uint8_t  WriteAddress;
    uint8_t  ReadAddress;
    uint8_t b = 0;
    5d24:	19 82       	std	Y+1, r1	; 0x01

    ReadAddress = 0;
    5d26:	1a 82       	std	Y+2, r1	; 0x02
    if (TWI_ReadPacket(DS1307_R, 20, &ReadAddress, sizeof(ReadAddress),
    5d28:	ee 24       	eor	r14, r14
    5d2a:	e3 94       	inc	r14
    5d2c:	8e 01       	movw	r16, r28
    5d2e:	0f 5f       	subi	r16, 0xFF	; 255
    5d30:	1f 4f       	sbci	r17, 0xFF	; 255
    5d32:	21 e0       	ldi	r18, 0x01	; 1
    5d34:	ae 01       	movw	r20, r28
    5d36:	4e 5f       	subi	r20, 0xFE	; 254
    5d38:	5f 4f       	sbci	r21, 0xFF	; 255
    5d3a:	64 e1       	ldi	r22, 0x14	; 20
    5d3c:	81 ed       	ldi	r24, 0xD1	; 209
    5d3e:	67 df       	rcall	.-306    	; 0x5c0e <TWI_ReadPacket>
    5d40:	88 23       	and	r24, r24
    5d42:	19 f0       	breq	.+6      	; 0x5d4a <rtc_run+0x3e>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run read error\n");
    5d44:	8e ea       	ldi	r24, 0xAE	; 174
    5d46:	94 e0       	ldi	r25, 0x04	; 4
    5d48:	2a c0       	rjmp	.+84     	; 0x5d9e <rtc_run+0x92>
    5d4a:	89 81       	ldd	r24, Y+1	; 0x01
        return -1;
    }

    if(run == -1)
    5d4c:	9f ef       	ldi	r25, 0xFF	; 255
    5d4e:	c9 16       	cp	r12, r25
    5d50:	d9 06       	cpc	r13, r25
    5d52:	59 f4       	brne	.+22     	; 0x5d6a <rtc_run+0x5e>
        return ((b & 0x80) ? 0 : 1);
    5d54:	08 2e       	mov	r0, r24
    5d56:	00 0c       	add	r0, r0
    5d58:	99 0b       	sbc	r25, r25
    5d5a:	80 95       	com	r24
    5d5c:	90 95       	com	r25
    5d5e:	89 2f       	mov	r24, r25
    5d60:	88 1f       	adc	r24, r24
    5d62:	88 27       	eor	r24, r24
    5d64:	88 1f       	adc	r24, r24
    5d66:	90 e0       	ldi	r25, 0x00	; 0
    5d68:	26 c0       	rjmp	.+76     	; 0x5db6 <rtc_run+0xaa>

    b = ( b  & 0x7f) | (run ? 0 : 0x80);
    5d6a:	8f 77       	andi	r24, 0x7F	; 127
    5d6c:	c1 14       	cp	r12, r1
    5d6e:	d1 04       	cpc	r13, r1
    5d70:	11 f4       	brne	.+4      	; 0x5d76 <rtc_run+0x6a>
    5d72:	90 e8       	ldi	r25, 0x80	; 128
    5d74:	01 c0       	rjmp	.+2      	; 0x5d78 <rtc_run+0x6c>
    5d76:	90 e0       	ldi	r25, 0x00	; 0
    5d78:	89 2b       	or	r24, r25
    5d7a:	89 83       	std	Y+1, r24	; 0x01

    WriteAddress = 0;
    5d7c:	1b 82       	std	Y+3, r1	; 0x03
    if (TWI_WritePacket(DS1307_W, 20, &WriteAddress, sizeof(WriteAddress),
    5d7e:	ee 24       	eor	r14, r14
    5d80:	e3 94       	inc	r14
    5d82:	8e 01       	movw	r16, r28
    5d84:	0f 5f       	subi	r16, 0xFF	; 255
    5d86:	1f 4f       	sbci	r17, 0xFF	; 255
    5d88:	21 e0       	ldi	r18, 0x01	; 1
    5d8a:	ae 01       	movw	r20, r28
    5d8c:	4d 5f       	subi	r20, 0xFD	; 253
    5d8e:	5f 4f       	sbci	r21, 0xFF	; 255
    5d90:	64 e1       	ldi	r22, 0x14	; 20
    5d92:	80 ed       	ldi	r24, 0xD0	; 208
    5d94:	7d df       	rcall	.-262    	; 0x5c90 <TWI_WritePacket>
    5d96:	88 23       	and	r24, r24
    5d98:	69 f0       	breq	.+26     	; 0x5db4 <rtc_run+0xa8>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run - write error\n");
    5d9a:	87 e9       	ldi	r24, 0x97	; 151
    5d9c:	94 e0       	ldi	r25, 0x04	; 4
    5d9e:	1f 92       	push	r1
    5da0:	9f 93       	push	r25
    5da2:	8f 93       	push	r24
    5da4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return(-1);
    5da8:	0f 90       	pop	r0
    5daa:	0f 90       	pop	r0
    5dac:	0f 90       	pop	r0
    5dae:	8f ef       	ldi	r24, 0xFF	; 255
    5db0:	9f ef       	ldi	r25, 0xFF	; 255
    5db2:	01 c0       	rjmp	.+2      	; 0x5db6 <rtc_run+0xaa>
    5db4:	c6 01       	movw	r24, r12
    }
    return(run);
}
    5db6:	0f 90       	pop	r0
    5db8:	0f 90       	pop	r0
    5dba:	0f 90       	pop	r0
    5dbc:	df 91       	pop	r29
    5dbe:	cf 91       	pop	r28
    5dc0:	1f 91       	pop	r17
    5dc2:	0f 91       	pop	r16
    5dc4:	ef 90       	pop	r14
    5dc6:	df 90       	pop	r13
    5dc8:	cf 90       	pop	r12
    5dca:	08 95       	ret

00005dcc <rtc_write>:
/// @param[in] t: POSIX struct tm * time to set.
///
/// @return 1 on sucess.
/// @return 0 on fail.
uint8_t rtc_write(tm_t *t)
{
    5dcc:	ef 92       	push	r14
    5dce:	0f 93       	push	r16
    5dd0:	1f 93       	push	r17
    5dd2:	cf 93       	push	r28
    5dd4:	df 93       	push	r29
    5dd6:	cd b7       	in	r28, 0x3d	; 61
    5dd8:	de b7       	in	r29, 0x3e	; 62
    5dda:	29 97       	sbiw	r28, 0x09	; 9
    5ddc:	0f b6       	in	r0, 0x3f	; 63
    5dde:	f8 94       	cli
    5de0:	de bf       	out	0x3e, r29	; 62
    5de2:	0f be       	out	0x3f, r0	; 63
    5de4:	cd bf       	out	0x3d, r28	; 61
    5de6:	8c 01       	movw	r16, r24
    uint8_t buf[8];
    uint8_t WriteAddress;

    buf[0] =  BINtoBCD(t->tm_sec) & 0x7f;
    5de8:	fc 01       	movw	r30, r24
    5dea:	80 81       	ld	r24, Z
    5dec:	7f df       	rcall	.-258    	; 0x5cec <BINtoBCD>
    5dee:	8f 77       	andi	r24, 0x7F	; 127
    5df0:	89 83       	std	Y+1, r24	; 0x01
    buf[1] =  BINtoBCD(t->tm_min) & 0x7f;
    5df2:	f8 01       	movw	r30, r16
    5df4:	82 81       	ldd	r24, Z+2	; 0x02
    5df6:	7a df       	rcall	.-268    	; 0x5cec <BINtoBCD>
    5df8:	8f 77       	andi	r24, 0x7F	; 127
    buf[2] =  BINtoBCD(t->tm_hour) & 0x3f;
    5dfa:	8a 83       	std	Y+2, r24	; 0x02
    5dfc:	f8 01       	movw	r30, r16
    5dfe:	84 81       	ldd	r24, Z+4	; 0x04
    5e00:	75 df       	rcall	.-278    	; 0x5cec <BINtoBCD>
    5e02:	8f 73       	andi	r24, 0x3F	; 63
    buf[3] =  ((t->tm_wday & 7) + 1) & 0x0f;
    5e04:	8b 83       	std	Y+3, r24	; 0x03
    5e06:	f8 01       	movw	r30, r16
    5e08:	84 85       	ldd	r24, Z+12	; 0x0c
    5e0a:	87 70       	andi	r24, 0x07	; 7
    buf[4] =  BINtoBCD(t->tm_mday ) & 0x3f;
    5e0c:	8f 5f       	subi	r24, 0xFF	; 255
    5e0e:	8c 83       	std	Y+4, r24	; 0x04
    5e10:	86 81       	ldd	r24, Z+6	; 0x06
    5e12:	6c df       	rcall	.-296    	; 0x5cec <BINtoBCD>
    buf[5] =  BINtoBCD(t->tm_mon + 1) & 0x1f;
    5e14:	8f 73       	andi	r24, 0x3F	; 63
    5e16:	8d 83       	std	Y+5, r24	; 0x05
    5e18:	f8 01       	movw	r30, r16
    5e1a:	80 85       	ldd	r24, Z+8	; 0x08
    5e1c:	8f 5f       	subi	r24, 0xFF	; 255
    5e1e:	66 df       	rcall	.-308    	; 0x5cec <BINtoBCD>
    buf[6] =  BINtoBCD(t->tm_year - 100) & 0xff;  // 2000 = 0
    5e20:	8f 71       	andi	r24, 0x1F	; 31
    5e22:	8e 83       	std	Y+6, r24	; 0x06
    5e24:	f8 01       	movw	r30, r16
    5e26:	82 85       	ldd	r24, Z+10	; 0x0a
    5e28:	84 56       	subi	r24, 0x64	; 100
    5e2a:	60 df       	rcall	.-320    	; 0x5cec <BINtoBCD>
    buf[7] = 0x93;                                // 32khz, out square wave
    5e2c:	8f 83       	std	Y+7, r24	; 0x07
    5e2e:	83 e9       	ldi	r24, 0x93	; 147
	for(i=0;i<7;++i)
		printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    WriteAddress = 0;
    5e30:	88 87       	std	Y+8, r24	; 0x08
    if (TWI_WritePacket(DS1307_W, 20, &WriteAddress, sizeof(WriteAddress),
    5e32:	19 86       	std	Y+9, r1	; 0x09
    5e34:	88 e0       	ldi	r24, 0x08	; 8
    5e36:	e8 2e       	mov	r14, r24
    5e38:	8e 01       	movw	r16, r28
    5e3a:	0f 5f       	subi	r16, 0xFF	; 255
    5e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    5e3e:	21 e0       	ldi	r18, 0x01	; 1
    5e40:	ae 01       	movw	r20, r28
    5e42:	47 5f       	subi	r20, 0xF7	; 247
    5e44:	5f 4f       	sbci	r21, 0xFF	; 255
    5e46:	64 e1       	ldi	r22, 0x14	; 20
    5e48:	80 ed       	ldi	r24, 0xD0	; 208
    5e4a:	22 df       	rcall	.-444    	; 0x5c90 <TWI_WritePacket>
    5e4c:	88 23       	and	r24, r24
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_write error\n");
    5e4e:	61 f0       	breq	.+24     	; 0x5e68 <rtc_write+0x9c>
    5e50:	81 e5       	ldi	r24, 0x51	; 81
    5e52:	94 e0       	ldi	r25, 0x04	; 4
    5e54:	1f 92       	push	r1
    5e56:	9f 93       	push	r25
    5e58:	8f 93       	push	r24
    5e5a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return(0);
    5e5e:	0f 90       	pop	r0
    5e60:	0f 90       	pop	r0
    5e62:	0f 90       	pop	r0
    5e64:	80 e0       	ldi	r24, 0x00	; 0
    }

    return(1);
    5e66:	01 c0       	rjmp	.+2      	; 0x5e6a <rtc_write+0x9e>
}
    5e68:	81 e0       	ldi	r24, 0x01	; 1
    5e6a:	29 96       	adiw	r28, 0x09	; 9
    5e6c:	0f b6       	in	r0, 0x3f	; 63
    5e6e:	f8 94       	cli
    5e70:	de bf       	out	0x3e, r29	; 62
    5e72:	0f be       	out	0x3f, r0	; 63
    5e74:	cd bf       	out	0x3d, r28	; 61
    5e76:	df 91       	pop	r29
    5e78:	cf 91       	pop	r28
    5e7a:	1f 91       	pop	r17
    5e7c:	0f 91       	pop	r16
    5e7e:	ef 90       	pop	r14
    5e80:	08 95       	ret

00005e82 <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  1 on success.
/// @return 0 on fail.
uint8_t rtc_init (int force, time_t seconds)
{
    5e82:	ad e0       	ldi	r26, 0x0D	; 13
    5e84:	b0 e0       	ldi	r27, 0x00	; 0
    5e86:	e7 e4       	ldi	r30, 0x47	; 71
    5e88:	ff e2       	ldi	r31, 0x2F	; 47
    5e8a:	0c 94 99 e9 	jmp	0x1d332	; 0x1d332 <__prologue_saves__+0x14>
    5e8e:	6c 01       	movw	r12, r24
    5e90:	4a 87       	std	Y+10, r20	; 0x0a
    5e92:	5b 87       	std	Y+11, r21	; 0x0b
    5e94:	6c 87       	std	Y+12, r22	; 0x0c
    5e96:	7d 87       	std	Y+13, r23	; 0x0d
    uint8_t  WriteAddress;
    int8_t    state;

    tm_t *tmp;

    TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 50000));
    5e98:	6a e2       	ldi	r22, 0x2A	; 42
    5e9a:	81 e0       	ldi	r24, 0x01	; 1
    5e9c:	1a de       	rcall	.-972    	; 0x5ad2 <TWI_Init>

    if(!force)
    5e9e:	c1 14       	cp	r12, r1
    5ea0:	d1 04       	cpc	r13, r1
    5ea2:	09 f0       	breq	.+2      	; 0x5ea6 <rtc_init+0x24>
    5ea4:	42 c0       	rjmp	.+132    	; 0x5f2a <rtc_init+0xa8>
    {
        state = rtc_run(-1);
    5ea6:	8f ef       	ldi	r24, 0xFF	; 255
    5ea8:	9f ef       	ldi	r25, 0xFF	; 255
    5eaa:	30 df       	rcall	.-416    	; 0x5d0c <rtc_run>
        if(state < 0)
    5eac:	87 ff       	sbrs	r24, 7
    5eae:	05 c0       	rjmp	.+10     	; 0x5eba <rtc_init+0x38>
        {
            rtc_ok = 0;
    5eb0:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <rtc_ok+0x1>
    5eb4:	10 92 3c 1a 	sts	0x1A3C, r1	; 0x801a3c <rtc_ok>
    5eb8:	24 c0       	rjmp	.+72     	; 0x5f02 <rtc_init+0x80>
            return 0;
        }
        if(state == 0)                            // stopped
    5eba:	88 23       	and	r24, r24
    5ebc:	b1 f1       	breq	.+108    	; 0x5f2a <rtc_init+0xa8>
    5ebe:	2d c0       	rjmp	.+90     	; 0x5f1a <rtc_init+0x98>
            printf("rtc _write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        memset(buf, 0, 8);
    5ec0:	ce 01       	movw	r24, r28
    5ec2:	01 96       	adiw	r24, 0x01	; 1
    5ec4:	6c 01       	movw	r12, r24
    5ec6:	88 e0       	ldi	r24, 0x08	; 8
    5ec8:	f6 01       	movw	r30, r12
    5eca:	11 92       	st	Z+, r1
    5ecc:	8a 95       	dec	r24
    5ece:	e9 f7       	brne	.-6      	; 0x5eca <rtc_init+0x48>
        for (addr = 8; addr < 0x3f; addr += 8)
    5ed0:	98 e0       	ldi	r25, 0x08	; 8
    5ed2:	f9 2e       	mov	r15, r25
        {
            WriteAddress = addr;
    5ed4:	f9 86       	std	Y+9, r15	; 0x09
            if (TWI_WritePacket(DS1307_W, 20, &WriteAddress, sizeof(WriteAddress),
    5ed6:	88 e0       	ldi	r24, 0x08	; 8
    5ed8:	e8 2e       	mov	r14, r24
    5eda:	86 01       	movw	r16, r12
    5edc:	21 e0       	ldi	r18, 0x01	; 1
    5ede:	ae 01       	movw	r20, r28
    5ee0:	47 5f       	subi	r20, 0xF7	; 247
    5ee2:	5f 4f       	sbci	r21, 0xFF	; 255
    5ee4:	64 e1       	ldi	r22, 0x14	; 20
    5ee6:	80 ed       	ldi	r24, 0xD0	; 208
    5ee8:	d3 de       	rcall	.-602    	; 0x5c90 <TWI_WritePacket>
    5eea:	88 23       	and	r24, r24
    5eec:	61 f0       	breq	.+24     	; 0x5f06 <rtc_init+0x84>
                (uint8_t*)buf, 8) != TWI_ERROR_NoError)
            {
                printf("rtc_init ram - write error\n");
    5eee:	82 e6       	ldi	r24, 0x62	; 98
    5ef0:	94 e0       	ldi	r25, 0x04	; 4
    5ef2:	1f 92       	push	r1
    5ef4:	9f 93       	push	r25
    5ef6:	8f 93       	push	r24
    5ef8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
                return(0);
    5efc:	0f 90       	pop	r0
    5efe:	0f 90       	pop	r0
    5f00:	0f 90       	pop	r0
    5f02:	10 e0       	ldi	r17, 0x00	; 0
    5f04:	2c c0       	rjmp	.+88     	; 0x5f5e <rtc_init+0xdc>
            rtc_ok = 0;
            return 0;
        }

        memset(buf, 0, 8);
        for (addr = 8; addr < 0x3f; addr += 8)
    5f06:	f8 e0       	ldi	r31, 0x08	; 8
    5f08:	ff 0e       	add	r15, r31
    5f0a:	80 e4       	ldi	r24, 0x40	; 64
    5f0c:	f8 12       	cpse	r15, r24
                printf("rtc_init ram - write error\n");
                return(0);
            }
        }

        if(rtc_run(1) < 0)                        // START RTC
    5f0e:	e2 cf       	rjmp	.-60     	; 0x5ed4 <rtc_init+0x52>
    5f10:	81 e0       	ldi	r24, 0x01	; 1
    5f12:	90 e0       	ldi	r25, 0x00	; 0
    5f14:	fb de       	rcall	.-522    	; 0x5d0c <rtc_run>
    5f16:	97 fd       	sbrc	r25, 7
    5f18:	cb cf       	rjmp	.-106    	; 0x5eb0 <rtc_init+0x2e>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    5f1a:	81 e0       	ldi	r24, 0x01	; 1
    5f1c:	90 e0       	ldi	r25, 0x00	; 0
    5f1e:	90 93 3d 1a 	sts	0x1A3D, r25	; 0x801a3d <rtc_ok+0x1>
    5f22:	80 93 3c 1a 	sts	0x1A3C, r24	; 0x801a3c <rtc_ok>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    5f26:	11 e0       	ldi	r17, 0x01	; 1
    5f28:	1a c0       	rjmp	.+52     	; 0x5f5e <rtc_init+0xdc>
    5f2a:	80 e0       	ldi	r24, 0x00	; 0
    5f2c:	90 e0       	ldi	r25, 0x00	; 0
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
        tmp = gmtime(&seconds);
    5f2e:	ee de       	rcall	.-548    	; 0x5d0c <rtc_run>
    5f30:	97 fd       	sbrc	r25, 7
    5f32:	be cf       	rjmp	.-132    	; 0x5eb0 <rtc_init+0x2e>
    5f34:	ce 01       	movw	r24, r28
        if(!rtc_write(tmp))
    5f36:	0a 96       	adiw	r24, 0x0a	; 10
    5f38:	d2 d6       	rcall	.+3492   	; 0x6cde <gmtime>
    5f3a:	48 df       	rcall	.-368    	; 0x5dcc <rtc_write>
    5f3c:	18 2f       	mov	r17, r24
    5f3e:	81 11       	cpse	r24, r1
        {
            printf("rtc _write epoch failed\n");
    5f40:	bf cf       	rjmp	.-130    	; 0x5ec0 <rtc_init+0x3e>
    5f42:	8e e7       	ldi	r24, 0x7E	; 126
    5f44:	94 e0       	ldi	r25, 0x04	; 4
    5f46:	1f 92       	push	r1
    5f48:	9f 93       	push	r25
    5f4a:	8f 93       	push	r24
    5f4c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            rtc_ok = 0;
    5f50:	10 92 3d 1a 	sts	0x1A3D, r1	; 0x801a3d <rtc_ok+0x1>
    5f54:	10 92 3c 1a 	sts	0x1A3C, r1	; 0x801a3c <rtc_ok>
            return 0;
    5f58:	0f 90       	pop	r0
    5f5a:	0f 90       	pop	r0
            return 0;
        }
    }
    rtc_ok = 1;
    return 1;
}
    5f5c:	0f 90       	pop	r0
    5f5e:	81 2f       	mov	r24, r17
    5f60:	2d 96       	adiw	r28, 0x0d	; 13
    5f62:	e8 e0       	ldi	r30, 0x08	; 8
    5f64:	0c 94 b5 e9 	jmp	0x1d36a	; 0x1d36a <__epilogue_restores__+0x14>

00005f68 <rtc_read>:
///
/// @param[out] t: struct tm * POSIX time returned.
/// @return  1 on sucess.
/// @return 0 on fail.
uint8_t rtc_read(tm_t *t)
{
    5f68:	cf 92       	push	r12
    5f6a:	df 92       	push	r13
    5f6c:	ef 92       	push	r14
    5f6e:	0f 93       	push	r16
    5f70:	1f 93       	push	r17
    5f72:	cf 93       	push	r28
    5f74:	df 93       	push	r29
    5f76:	cd b7       	in	r28, 0x3d	; 61
    5f78:	de b7       	in	r29, 0x3e	; 62
    5f7a:	29 97       	sbiw	r28, 0x09	; 9
    5f7c:	0f b6       	in	r0, 0x3f	; 63
    5f7e:	f8 94       	cli
    5f80:	de bf       	out	0x3e, r29	; 62
    5f82:	0f be       	out	0x3f, r0	; 63
    5f84:	cd bf       	out	0x3d, r28	; 61
    5f86:	6c 01       	movw	r12, r24
    uint8_t buf[8];

    uint8_t ReadAddress = 0;
    5f88:	19 86       	std	Y+9, r1	; 0x09

    ReadAddress = 0;
    if (TWI_ReadPacket(DS1307_R, 20, &ReadAddress, sizeof(ReadAddress),
    5f8a:	88 e0       	ldi	r24, 0x08	; 8
    5f8c:	e8 2e       	mov	r14, r24
    5f8e:	8e 01       	movw	r16, r28
    5f90:	0f 5f       	subi	r16, 0xFF	; 255
    5f92:	1f 4f       	sbci	r17, 0xFF	; 255
    5f94:	21 e0       	ldi	r18, 0x01	; 1
    5f96:	ae 01       	movw	r20, r28
    5f98:	47 5f       	subi	r20, 0xF7	; 247
    5f9a:	5f 4f       	sbci	r21, 0xFF	; 255
    5f9c:	64 e1       	ldi	r22, 0x14	; 20
    5f9e:	81 ed       	ldi	r24, 0xD1	; 209
    5fa0:	36 de       	rcall	.-916    	; 0x5c0e <TWI_ReadPacket>
    5fa2:	88 23       	and	r24, r24
    5fa4:	61 f0       	breq	.+24     	; 0x5fbe <rtc_read+0x56>
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_read error\n");
    5fa6:	81 e4       	ldi	r24, 0x41	; 65
    5fa8:	94 e0       	ldi	r25, 0x04	; 4
    5faa:	1f 92       	push	r1
    5fac:	9f 93       	push	r25
    5fae:	8f 93       	push	r24
    5fb0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return 0;
    5fb4:	0f 90       	pop	r0
    5fb6:	0f 90       	pop	r0
    5fb8:	0f 90       	pop	r0
    5fba:	80 e0       	ldi	r24, 0x00	; 0
    5fbc:	33 c0       	rjmp	.+102    	; 0x6024 <rtc_read+0xbc>
    for(i=0;i<7;++i)
        printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    t->tm_sec =   BCDtoBIN( buf[0] & 0x7f);
    5fbe:	89 81       	ldd	r24, Y+1	; 0x01
    5fc0:	8f 77       	andi	r24, 0x7F	; 127
    5fc2:	9b de       	rcall	.-714    	; 0x5cfa <BCDtoBIN>
    5fc4:	90 e0       	ldi	r25, 0x00	; 0
    5fc6:	f6 01       	movw	r30, r12
    5fc8:	91 83       	std	Z+1, r25	; 0x01
    t->tm_min =   BCDtoBIN( buf[1] & 0x7f);
    5fca:	80 83       	st	Z, r24
    5fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    5fce:	8f 77       	andi	r24, 0x7F	; 127
    5fd0:	94 de       	rcall	.-728    	; 0x5cfa <BCDtoBIN>
    5fd2:	90 e0       	ldi	r25, 0x00	; 0
    5fd4:	f6 01       	movw	r30, r12
    t->tm_hour =  BCDtoBIN( buf[2] & 0x3f);
    5fd6:	93 83       	std	Z+3, r25	; 0x03
    5fd8:	82 83       	std	Z+2, r24	; 0x02
    5fda:	8b 81       	ldd	r24, Y+3	; 0x03
    5fdc:	8f 73       	andi	r24, 0x3F	; 63
    5fde:	8d de       	rcall	.-742    	; 0x5cfa <BCDtoBIN>
    5fe0:	90 e0       	ldi	r25, 0x00	; 0
    5fe2:	f6 01       	movw	r30, r12
    5fe4:	95 83       	std	Z+5, r25	; 0x05
    t->tm_wday =  ( buf[3] & 0x07) - 1;
    5fe6:	84 83       	std	Z+4, r24	; 0x04
    5fe8:	8c 81       	ldd	r24, Y+4	; 0x04
    5fea:	87 70       	andi	r24, 0x07	; 7
    5fec:	90 e0       	ldi	r25, 0x00	; 0
    5fee:	01 97       	sbiw	r24, 0x01	; 1
    t->tm_mday =  BCDtoBIN( buf[4] & 0x3f) ;
    5ff0:	95 87       	std	Z+13, r25	; 0x0d
    5ff2:	84 87       	std	Z+12, r24	; 0x0c
    5ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    5ff6:	8f 73       	andi	r24, 0x3F	; 63
    5ff8:	80 de       	rcall	.-768    	; 0x5cfa <BCDtoBIN>
    5ffa:	90 e0       	ldi	r25, 0x00	; 0
    5ffc:	f6 01       	movw	r30, r12
    t->tm_mon=    BCDtoBIN( buf[5] & 0x1f) - 1;
    5ffe:	97 83       	std	Z+7, r25	; 0x07
    6000:	86 83       	std	Z+6, r24	; 0x06
    6002:	8e 81       	ldd	r24, Y+6	; 0x06
    6004:	8f 71       	andi	r24, 0x1F	; 31
    6006:	79 de       	rcall	.-782    	; 0x5cfa <BCDtoBIN>
    6008:	90 e0       	ldi	r25, 0x00	; 0
    600a:	01 97       	sbiw	r24, 0x01	; 1
    600c:	f6 01       	movw	r30, r12
    t->tm_year =  BCDtoBIN( buf[6] & 0xff) + 100;
    600e:	91 87       	std	Z+9, r25	; 0x09
    6010:	80 87       	std	Z+8, r24	; 0x08
    6012:	8f 81       	ldd	r24, Y+7	; 0x07
    6014:	72 de       	rcall	.-796    	; 0x5cfa <BCDtoBIN>
    6016:	90 e0       	ldi	r25, 0x00	; 0
    6018:	8c 59       	subi	r24, 0x9C	; 156
    601a:	9f 4f       	sbci	r25, 0xFF	; 255
    601c:	f6 01       	movw	r30, r12
    601e:	93 87       	std	Z+11, r25	; 0x0b
        t->tm_min,
        t->tm_sec,
        t->tm_wday);
#endif

    return 1;
    6020:	82 87       	std	Z+10, r24	; 0x0a
}
    6022:	81 e0       	ldi	r24, 0x01	; 1
    6024:	29 96       	adiw	r28, 0x09	; 9
    6026:	0f b6       	in	r0, 0x3f	; 63
    6028:	f8 94       	cli
    602a:	de bf       	out	0x3e, r29	; 62
    602c:	0f be       	out	0x3f, r0	; 63
    602e:	cd bf       	out	0x3d, r28	; 61
    6030:	df 91       	pop	r29
    6032:	cf 91       	pop	r28
    6034:	1f 91       	pop	r17
    6036:	0f 91       	pop	r16
    6038:	ef 90       	pop	r14
    603a:	df 90       	pop	r13
    603c:	cf 90       	pop	r12
    603e:	08 95       	ret

00006040 <sep>:
    *token = 0;
    // str points past the token
    if(!len)
        return(NULL);
    return(str);
}
    6040:	8e ef       	ldi	r24, 0xFE	; 254
    6042:	94 e0       	ldi	r25, 0x04	; 4
    6044:	1f 92       	push	r1
    6046:	9f 93       	push	r25
    6048:	8f 93       	push	r24
    604a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    604e:	0f 90       	pop	r0
    6050:	0f 90       	pop	r0
    6052:	0f 90       	pop	r0
    6054:	08 95       	ret

00006056 <isupper>:
    6056:	9c 01       	movw	r18, r24
    6058:	21 54       	subi	r18, 0x41	; 65
    605a:	31 09       	sbc	r19, r1
    605c:	81 e0       	ldi	r24, 0x01	; 1
    605e:	90 e0       	ldi	r25, 0x00	; 0
    6060:	2a 31       	cpi	r18, 0x1A	; 26
    6062:	31 05       	cpc	r19, r1
    6064:	10 f0       	brcs	.+4      	; 0x606a <isupper+0x14>
    6066:	80 e0       	ldi	r24, 0x00	; 0
    6068:	90 e0       	ldi	r25, 0x00	; 0
    606a:	08 95       	ret

0000606c <islower>:
    606c:	9c 01       	movw	r18, r24
    606e:	21 56       	subi	r18, 0x61	; 97
    6070:	31 09       	sbc	r19, r1
    6072:	81 e0       	ldi	r24, 0x01	; 1
    6074:	90 e0       	ldi	r25, 0x00	; 0
    6076:	2a 31       	cpi	r18, 0x1A	; 26
    6078:	31 05       	cpc	r19, r1
    607a:	10 f0       	brcs	.+4      	; 0x6080 <islower+0x14>
    607c:	80 e0       	ldi	r24, 0x00	; 0
    607e:	90 e0       	ldi	r25, 0x00	; 0
    6080:	08 95       	ret

00006082 <tolower>:
    6082:	cf 93       	push	r28
    6084:	df 93       	push	r29
    6086:	ec 01       	movw	r28, r24
    6088:	e6 df       	rcall	.-52     	; 0x6056 <isupper>
    608a:	89 2b       	or	r24, r25
    608c:	19 f0       	breq	.+6      	; 0x6094 <tolower+0x12>
    608e:	ce 01       	movw	r24, r28
    6090:	80 96       	adiw	r24, 0x20	; 32
    6092:	01 c0       	rjmp	.+2      	; 0x6096 <tolower+0x14>
    6094:	ce 01       	movw	r24, r28
    6096:	df 91       	pop	r29
    6098:	cf 91       	pop	r28
    609a:	08 95       	ret

0000609c <toupper>:
    609c:	cf 93       	push	r28
    609e:	df 93       	push	r29
    60a0:	ec 01       	movw	r28, r24
    60a2:	e4 df       	rcall	.-56     	; 0x606c <islower>
    60a4:	89 2b       	or	r24, r25
    60a6:	19 f0       	breq	.+6      	; 0x60ae <toupper+0x12>
    60a8:	ce 01       	movw	r24, r28
    60aa:	80 97       	sbiw	r24, 0x20	; 32
    60ac:	01 c0       	rjmp	.+2      	; 0x60b0 <toupper+0x14>
    60ae:	ce 01       	movw	r24, r28
    60b0:	df 91       	pop	r29
    60b2:	cf 91       	pop	r28
    60b4:	08 95       	ret

000060b6 <strcpy>:
    60b6:	fc 01       	movw	r30, r24
    60b8:	db 01       	movw	r26, r22
    60ba:	2d 91       	ld	r18, X+
    60bc:	bd 01       	movw	r22, r26
    60be:	01 96       	adiw	r24, 0x01	; 1
    60c0:	22 23       	and	r18, r18
    60c2:	11 f0       	breq	.+4      	; 0x60c8 <strcpy+0x12>
    60c4:	20 83       	st	Z, r18
    60c6:	f7 cf       	rjmp	.-18     	; 0x60b6 <strcpy>
    60c8:	10 82       	st	Z, r1
    60ca:	08 95       	ret

000060cc <strncpy>:
    60cc:	db 01       	movw	r26, r22
    60ce:	fc 01       	movw	r30, r24
    60d0:	2d 91       	ld	r18, X+
    60d2:	21 11       	cpse	r18, r1
    60d4:	03 c0       	rjmp	.+6      	; 0x60dc <strncpy+0x10>
    60d6:	4e 0f       	add	r20, r30
    60d8:	5f 1f       	adc	r21, r31
    60da:	08 c0       	rjmp	.+16     	; 0x60ec <strncpy+0x20>
    60dc:	41 15       	cp	r20, r1
    60de:	51 05       	cpc	r21, r1
    60e0:	21 f0       	breq	.+8      	; 0x60ea <strncpy+0x1e>
    60e2:	21 93       	st	Z+, r18
    60e4:	41 50       	subi	r20, 0x01	; 1
    60e6:	51 09       	sbc	r21, r1
    60e8:	f3 cf       	rjmp	.-26     	; 0x60d0 <strncpy+0x4>
    60ea:	08 95       	ret
    60ec:	4e 17       	cp	r20, r30
    60ee:	5f 07       	cpc	r21, r31
    60f0:	11 f0       	breq	.+4      	; 0x60f6 <strncpy+0x2a>
    60f2:	11 92       	st	Z+, r1
    60f4:	fb cf       	rjmp	.-10     	; 0x60ec <strncpy+0x20>
    60f6:	08 95       	ret

000060f8 <strcat>:
    60f8:	cf 93       	push	r28
    60fa:	df 93       	push	r29
    60fc:	d8 2f       	mov	r29, r24
    60fe:	c9 2f       	mov	r28, r25
    6100:	28 2f       	mov	r18, r24
    6102:	39 2f       	mov	r19, r25
    6104:	c9 01       	movw	r24, r18
    6106:	2f 5f       	subi	r18, 0xFF	; 255
    6108:	3f 4f       	sbci	r19, 0xFF	; 255
    610a:	fc 01       	movw	r30, r24
    610c:	40 81       	ld	r20, Z
    610e:	41 11       	cpse	r20, r1
    6110:	f9 cf       	rjmp	.-14     	; 0x6104 <strcat+0xc>
    6112:	d1 df       	rcall	.-94     	; 0x60b6 <strcpy>
    6114:	8d 2f       	mov	r24, r29
    6116:	9c 2f       	mov	r25, r28
    6118:	df 91       	pop	r29
    611a:	cf 91       	pop	r28
    611c:	08 95       	ret

0000611e <reverse>:
    611e:	fc 01       	movw	r30, r24
    6120:	01 90       	ld	r0, Z+
    6122:	00 20       	and	r0, r0
    6124:	e9 f7       	brne	.-6      	; 0x6120 <reverse+0x2>
    6126:	31 97       	sbiw	r30, 0x01	; 1
    6128:	e8 1b       	sub	r30, r24
    612a:	f9 0b       	sbc	r31, r25
    612c:	af 01       	movw	r20, r30
    612e:	55 95       	asr	r21
    6130:	47 95       	ror	r20
    6132:	e8 0f       	add	r30, r24
    6134:	f9 1f       	adc	r31, r25
    6136:	dc 01       	movw	r26, r24
    6138:	9d 01       	movw	r18, r26
    613a:	28 1b       	sub	r18, r24
    613c:	39 0b       	sbc	r19, r25
    613e:	24 17       	cp	r18, r20
    6140:	35 07       	cpc	r19, r21
    6142:	2c f4       	brge	.+10     	; 0x614e <reverse+0x30>
    6144:	22 91       	ld	r18, -Z
    6146:	3c 91       	ld	r19, X
    6148:	30 83       	st	Z, r19
    614a:	2d 93       	st	X+, r18
    614c:	f5 cf       	rjmp	.-22     	; 0x6138 <reverse+0x1a>
    614e:	08 95       	ret

00006150 <strupper>:
    6150:	cf 93       	push	r28
    6152:	df 93       	push	r29
    6154:	ec 01       	movw	r28, r24
    6156:	88 81       	ld	r24, Y
    6158:	88 23       	and	r24, r24
    615a:	21 f0       	breq	.+8      	; 0x6164 <strupper+0x14>
    615c:	90 e0       	ldi	r25, 0x00	; 0
    615e:	9e df       	rcall	.-196    	; 0x609c <toupper>
    6160:	89 93       	st	Y+, r24
    6162:	f9 cf       	rjmp	.-14     	; 0x6156 <strupper+0x6>
    6164:	df 91       	pop	r29
    6166:	cf 91       	pop	r28
    6168:	08 95       	ret

0000616a <trim_tail>:
    616a:	fc 01       	movw	r30, r24
    616c:	01 90       	ld	r0, Z+
    616e:	00 20       	and	r0, r0
    6170:	e9 f7       	brne	.-6      	; 0x616c <trim_tail+0x2>
    6172:	31 97       	sbiw	r30, 0x01	; 1
    6174:	e8 17       	cp	r30, r24
    6176:	f9 07       	cpc	r31, r25
    6178:	29 f0       	breq	.+10     	; 0x6184 <trim_tail+0x1a>
    617a:	22 91       	ld	r18, -Z
    617c:	21 32       	cpi	r18, 0x21	; 33
    617e:	10 f4       	brcc	.+4      	; 0x6184 <trim_tail+0x1a>
    6180:	10 82       	st	Z, r1
    6182:	f8 cf       	rjmp	.-16     	; 0x6174 <trim_tail+0xa>
    6184:	08 95       	ret

00006186 <skipspaces>:
    6186:	00 97       	sbiw	r24, 0x00	; 0
    6188:	39 f0       	breq	.+14     	; 0x6198 <skipspaces+0x12>
    618a:	fc 01       	movw	r30, r24
    618c:	cf 01       	movw	r24, r30
    618e:	21 91       	ld	r18, Z+
    6190:	20 32       	cpi	r18, 0x20	; 32
    6192:	e1 f3       	breq	.-8      	; 0x618c <skipspaces+0x6>
    6194:	29 30       	cpi	r18, 0x09	; 9
    6196:	d1 f3       	breq	.-12     	; 0x618c <skipspaces+0x6>
    6198:	08 95       	ret

0000619a <strcmp>:
    619a:	dc 01       	movw	r26, r24
    619c:	fb 01       	movw	r30, r22
    619e:	2d 91       	ld	r18, X+
    61a0:	41 91       	ld	r20, Z+
    61a2:	50 e0       	ldi	r21, 0x00	; 0
    61a4:	30 e0       	ldi	r19, 0x00	; 0
    61a6:	c9 01       	movw	r24, r18
    61a8:	84 1b       	sub	r24, r20
    61aa:	95 0b       	sbc	r25, r21
    61ac:	11 f4       	brne	.+4      	; 0x61b2 <strcmp+0x18>
    61ae:	45 2b       	or	r20, r21
    61b0:	b1 f7       	brne	.-20     	; 0x619e <strcmp+0x4>
    61b2:	08 95       	ret

000061b4 <strncmp>:
    61b4:	fc 01       	movw	r30, r24
    61b6:	db 01       	movw	r26, r22
    61b8:	48 0f       	add	r20, r24
    61ba:	59 1f       	adc	r21, r25
    61bc:	e4 17       	cp	r30, r20
    61be:	f5 07       	cpc	r31, r21
    61c0:	59 f0       	breq	.+22     	; 0x61d8 <strncmp+0x24>
    61c2:	21 91       	ld	r18, Z+
    61c4:	6d 91       	ld	r22, X+
    61c6:	70 e0       	ldi	r23, 0x00	; 0
    61c8:	30 e0       	ldi	r19, 0x00	; 0
    61ca:	c9 01       	movw	r24, r18
    61cc:	86 1b       	sub	r24, r22
    61ce:	97 0b       	sbc	r25, r23
    61d0:	29 f4       	brne	.+10     	; 0x61dc <strncmp+0x28>
    61d2:	67 2b       	or	r22, r23
    61d4:	99 f7       	brne	.-26     	; 0x61bc <strncmp+0x8>
    61d6:	02 c0       	rjmp	.+4      	; 0x61dc <strncmp+0x28>
    61d8:	80 e0       	ldi	r24, 0x00	; 0
    61da:	90 e0       	ldi	r25, 0x00	; 0
    61dc:	08 95       	ret

000061de <strcasecmp>:
    61de:	ef 92       	push	r14
    61e0:	ff 92       	push	r15
    61e2:	0f 93       	push	r16
    61e4:	1f 93       	push	r17
    61e6:	cf 93       	push	r28
    61e8:	df 93       	push	r29
    61ea:	7c 01       	movw	r14, r24
    61ec:	8b 01       	movw	r16, r22
    61ee:	f7 01       	movw	r30, r14
    61f0:	81 91       	ld	r24, Z+
    61f2:	7f 01       	movw	r14, r30
    61f4:	90 e0       	ldi	r25, 0x00	; 0
    61f6:	52 df       	rcall	.-348    	; 0x609c <toupper>
    61f8:	ec 01       	movw	r28, r24
    61fa:	f8 01       	movw	r30, r16
    61fc:	81 91       	ld	r24, Z+
    61fe:	8f 01       	movw	r16, r30
    6200:	90 e0       	ldi	r25, 0x00	; 0
    6202:	4c df       	rcall	.-360    	; 0x609c <toupper>
    6204:	9c 01       	movw	r18, r24
    6206:	ce 01       	movw	r24, r28
    6208:	82 1b       	sub	r24, r18
    620a:	93 0b       	sbc	r25, r19
    620c:	11 f4       	brne	.+4      	; 0x6212 <strcasecmp+0x34>
    620e:	23 2b       	or	r18, r19
    6210:	71 f7       	brne	.-36     	; 0x61ee <strcasecmp+0x10>
    6212:	cd b7       	in	r28, 0x3d	; 61
    6214:	de b7       	in	r29, 0x3e	; 62
    6216:	e6 e0       	ldi	r30, 0x06	; 6
    6218:	0c 94 b7 e9 	jmp	0x1d36e	; 0x1d36e <__epilogue_restores__+0x18>

0000621c <strncasecmp>:
    621c:	a0 e0       	ldi	r26, 0x00	; 0
    621e:	b0 e0       	ldi	r27, 0x00	; 0
    6220:	e4 e1       	ldi	r30, 0x14	; 20
    6222:	f1 e3       	ldi	r31, 0x31	; 49
    6224:	0c 94 99 e9 	jmp	0x1d332	; 0x1d332 <__prologue_saves__+0x14>
    6228:	8c 01       	movw	r16, r24
    622a:	7b 01       	movw	r14, r22
    622c:	6c 01       	movw	r12, r24
    622e:	c4 0e       	add	r12, r20
    6230:	d5 1e       	adc	r13, r21
    6232:	0c 15       	cp	r16, r12
    6234:	1d 05       	cpc	r17, r13
    6236:	99 f0       	breq	.+38     	; 0x625e <strncasecmp+0x42>
    6238:	f8 01       	movw	r30, r16
    623a:	81 91       	ld	r24, Z+
    623c:	8f 01       	movw	r16, r30
    623e:	90 e0       	ldi	r25, 0x00	; 0
    6240:	2d df       	rcall	.-422    	; 0x609c <toupper>
    6242:	ec 01       	movw	r28, r24
    6244:	f7 01       	movw	r30, r14
    6246:	81 91       	ld	r24, Z+
    6248:	7f 01       	movw	r14, r30
    624a:	90 e0       	ldi	r25, 0x00	; 0
    624c:	27 df       	rcall	.-434    	; 0x609c <toupper>
    624e:	9c 01       	movw	r18, r24
    6250:	ce 01       	movw	r24, r28
    6252:	82 1b       	sub	r24, r18
    6254:	93 0b       	sbc	r25, r19
    6256:	29 f4       	brne	.+10     	; 0x6262 <strncasecmp+0x46>
    6258:	23 2b       	or	r18, r19
    625a:	59 f7       	brne	.-42     	; 0x6232 <strncasecmp+0x16>
    625c:	02 c0       	rjmp	.+4      	; 0x6262 <strncasecmp+0x46>
    625e:	80 e0       	ldi	r24, 0x00	; 0
    6260:	90 e0       	ldi	r25, 0x00	; 0
    6262:	cd b7       	in	r28, 0x3d	; 61
    6264:	de b7       	in	r29, 0x3e	; 62
    6266:	e8 e0       	ldi	r30, 0x08	; 8
    6268:	0c 94 b5 e9 	jmp	0x1d36a	; 0x1d36a <__epilogue_restores__+0x14>

0000626c <MATCH>:
    626c:	cf 93       	push	r28
    626e:	df 93       	push	r29
    6270:	fb 01       	movw	r30, r22
    6272:	01 90       	ld	r0, Z+
    6274:	00 20       	and	r0, r0
    6276:	e9 f7       	brne	.-6      	; 0x6272 <MATCH+0x6>
    6278:	31 97       	sbiw	r30, 0x01	; 1
    627a:	ef 01       	movw	r28, r30
    627c:	c6 1b       	sub	r28, r22
    627e:	d7 0b       	sbc	r29, r23
    6280:	8c df       	rcall	.-232    	; 0x619a <strcmp>
    6282:	89 2b       	or	r24, r25
    6284:	11 f4       	brne	.+4      	; 0x628a <MATCH+0x1e>
    6286:	ce 01       	movw	r24, r28
    6288:	02 c0       	rjmp	.+4      	; 0x628e <MATCH+0x22>
    628a:	80 e0       	ldi	r24, 0x00	; 0
    628c:	90 e0       	ldi	r25, 0x00	; 0
    628e:	df 91       	pop	r29
    6290:	cf 91       	pop	r28
    6292:	08 95       	ret

00006294 <MATCHARGS>:
    6294:	ef 92       	push	r14
    6296:	ff 92       	push	r15
    6298:	0f 93       	push	r16
    629a:	1f 93       	push	r17
    629c:	cf 93       	push	r28
    629e:	df 93       	push	r29
    62a0:	f6 2e       	mov	r15, r22
    62a2:	e7 2e       	mov	r14, r23
    62a4:	ea 01       	movw	r28, r20
    62a6:	89 01       	movw	r16, r18
    62a8:	e1 df       	rcall	.-62     	; 0x626c <MATCH>
    62aa:	00 97       	sbiw	r24, 0x00	; 0
    62ac:	e9 f0       	breq	.+58     	; 0x62e8 <MATCHARGS+0x54>
    62ae:	0c 17       	cp	r16, r28
    62b0:	1d 07       	cpc	r17, r29
    62b2:	c4 f4       	brge	.+48     	; 0x62e4 <MATCHARGS+0x50>
    62b4:	1f 93       	push	r17
    62b6:	0f 93       	push	r16
    62b8:	df 93       	push	r29
    62ba:	cf 93       	push	r28
    62bc:	ef 92       	push	r14
    62be:	ff 92       	push	r15
    62c0:	88 ed       	ldi	r24, 0xD8	; 216
    62c2:	94 e0       	ldi	r25, 0x04	; 4
    62c4:	1f 92       	push	r1
    62c6:	9f 93       	push	r25
    62c8:	8f 93       	push	r24
    62ca:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    62ce:	8d b7       	in	r24, 0x3d	; 61
    62d0:	9e b7       	in	r25, 0x3e	; 62
    62d2:	09 96       	adiw	r24, 0x09	; 9
    62d4:	0f b6       	in	r0, 0x3f	; 63
    62d6:	f8 94       	cli
    62d8:	9e bf       	out	0x3e, r25	; 62
    62da:	0f be       	out	0x3f, r0	; 63
    62dc:	8d bf       	out	0x3d, r24	; 61
    62de:	80 e0       	ldi	r24, 0x00	; 0
    62e0:	90 e0       	ldi	r25, 0x00	; 0
    62e2:	02 c0       	rjmp	.+4      	; 0x62e8 <MATCHARGS+0x54>
    62e4:	81 e0       	ldi	r24, 0x01	; 1
    62e6:	90 e0       	ldi	r25, 0x00	; 0
    62e8:	cd b7       	in	r28, 0x3d	; 61
    62ea:	de b7       	in	r29, 0x3e	; 62
    62ec:	e6 e0       	ldi	r30, 0x06	; 6
    62ee:	0c 94 b7 e9 	jmp	0x1d36e	; 0x1d36e <__epilogue_restores__+0x18>

000062f2 <MATCHI>:
    62f2:	cf 93       	push	r28
    62f4:	df 93       	push	r29
    62f6:	fb 01       	movw	r30, r22
    62f8:	01 90       	ld	r0, Z+
    62fa:	00 20       	and	r0, r0
    62fc:	e9 f7       	brne	.-6      	; 0x62f8 <MATCHI+0x6>
    62fe:	31 97       	sbiw	r30, 0x01	; 1
    6300:	ef 01       	movw	r28, r30
    6302:	c6 1b       	sub	r28, r22
    6304:	d7 0b       	sbc	r29, r23
    6306:	6b df       	rcall	.-298    	; 0x61de <strcasecmp>
    6308:	89 2b       	or	r24, r25
    630a:	11 f4       	brne	.+4      	; 0x6310 <MATCHI+0x1e>
    630c:	ce 01       	movw	r24, r28
    630e:	02 c0       	rjmp	.+4      	; 0x6314 <MATCHI+0x22>
    6310:	80 e0       	ldi	r24, 0x00	; 0
    6312:	90 e0       	ldi	r25, 0x00	; 0
    6314:	df 91       	pop	r29
    6316:	cf 91       	pop	r28
    6318:	08 95       	ret

0000631a <MATCHI_LEN>:
    631a:	cf 93       	push	r28
    631c:	df 93       	push	r29
    631e:	00 97       	sbiw	r24, 0x00	; 0
    6320:	89 f0       	breq	.+34     	; 0x6344 <MATCHI_LEN+0x2a>
    6322:	61 15       	cp	r22, r1
    6324:	71 05       	cpc	r23, r1
    6326:	71 f0       	breq	.+28     	; 0x6344 <MATCHI_LEN+0x2a>
    6328:	eb 01       	movw	r28, r22
    632a:	09 90       	ld	r0, Y+
    632c:	00 20       	and	r0, r0
    632e:	e9 f7       	brne	.-6      	; 0x632a <MATCHI_LEN+0x10>
    6330:	21 97       	sbiw	r28, 0x01	; 1
    6332:	c6 1b       	sub	r28, r22
    6334:	d7 0b       	sbc	r29, r23
    6336:	31 f0       	breq	.+12     	; 0x6344 <MATCHI_LEN+0x2a>
    6338:	ae 01       	movw	r20, r28
    633a:	70 df       	rcall	.-288    	; 0x621c <strncasecmp>
    633c:	89 2b       	or	r24, r25
    633e:	11 f4       	brne	.+4      	; 0x6344 <MATCHI_LEN+0x2a>
    6340:	ce 01       	movw	r24, r28
    6342:	02 c0       	rjmp	.+4      	; 0x6348 <MATCHI_LEN+0x2e>
    6344:	80 e0       	ldi	r24, 0x00	; 0
    6346:	90 e0       	ldi	r25, 0x00	; 0
    6348:	df 91       	pop	r29
    634a:	cf 91       	pop	r28
    634c:	08 95       	ret

0000634e <split_args>:
    634e:	a0 e0       	ldi	r26, 0x00	; 0
    6350:	b0 e0       	ldi	r27, 0x00	; 0
    6352:	ed ea       	ldi	r30, 0xAD	; 173
    6354:	f1 e3       	ldi	r31, 0x31	; 49
    6356:	0c 94 99 e9 	jmp	0x1d332	; 0x1d332 <__prologue_saves__+0x14>
    635a:	dc 01       	movw	r26, r24
    635c:	6a 01       	movw	r12, r20
    635e:	8b 01       	movw	r16, r22
    6360:	fb 01       	movw	r30, r22
    6362:	80 e0       	ldi	r24, 0x00	; 0
    6364:	90 e0       	ldi	r25, 0x00	; 0
    6366:	8c 15       	cp	r24, r12
    6368:	9d 05       	cpc	r25, r13
    636a:	24 f4       	brge	.+8      	; 0x6374 <split_args+0x26>
    636c:	11 92       	st	Z+, r1
    636e:	11 92       	st	Z+, r1
    6370:	01 96       	adiw	r24, 0x01	; 1
    6372:	f9 cf       	rjmp	.-14     	; 0x6366 <split_args+0x18>
    6374:	c1 14       	cp	r12, r1
    6376:	d1 04       	cpc	r13, r1
    6378:	d9 f1       	breq	.+118    	; 0x63f0 <split_args+0xa2>
    637a:	10 97       	sbiw	r26, 0x00	; 0
    637c:	c9 f1       	breq	.+114    	; 0x63f0 <split_args+0xa2>
    637e:	ee 24       	eor	r14, r14
    6380:	e3 94       	inc	r14
    6382:	f1 2c       	mov	r15, r1
    6384:	c0 e0       	ldi	r28, 0x00	; 0
    6386:	d0 e0       	ldi	r29, 0x00	; 0
    6388:	8c 91       	ld	r24, X
    638a:	88 23       	and	r24, r24
    638c:	b1 f1       	breq	.+108    	; 0x63fa <split_args+0xac>
    638e:	cc 15       	cp	r28, r12
    6390:	dd 05       	cpc	r29, r13
    6392:	9c f5       	brge	.+102    	; 0x63fa <split_args+0xac>
    6394:	cd 01       	movw	r24, r26
    6396:	f7 de       	rcall	.-530    	; 0x6186 <skipspaces>
    6398:	dc 01       	movw	r26, r24
    639a:	2c 91       	ld	r18, X
    639c:	22 23       	and	r18, r18
    639e:	69 f1       	breq	.+90     	; 0x63fa <split_args+0xac>
    63a0:	22 32       	cpi	r18, 0x22	; 34
    63a2:	79 f4       	brne	.+30     	; 0x63c2 <split_args+0x74>
    63a4:	fc 01       	movw	r30, r24
    63a6:	31 96       	adiw	r30, 0x01	; 1
    63a8:	d8 01       	movw	r26, r16
    63aa:	ed 93       	st	X+, r30
    63ac:	fc 93       	st	X, r31
    63ae:	df 01       	movw	r26, r30
    63b0:	80 81       	ld	r24, Z
    63b2:	31 96       	adiw	r30, 0x01	; 1
    63b4:	88 23       	and	r24, r24
    63b6:	a9 f0       	breq	.+42     	; 0x63e2 <split_args+0x94>
    63b8:	82 32       	cpi	r24, 0x22	; 34
    63ba:	c9 f7       	brne	.-14     	; 0x63ae <split_args+0x60>
    63bc:	1c 92       	st	X, r1
    63be:	df 01       	movw	r26, r30
    63c0:	10 c0       	rjmp	.+32     	; 0x63e2 <split_args+0x94>
    63c2:	f8 01       	movw	r30, r16
    63c4:	91 83       	std	Z+1, r25	; 0x01
    63c6:	80 83       	st	Z, r24
    63c8:	fc 01       	movw	r30, r24
    63ca:	2e 2f       	mov	r18, r30
    63cc:	9f 2f       	mov	r25, r31
    63ce:	81 91       	ld	r24, Z+
    63d0:	3f ed       	ldi	r19, 0xDF	; 223
    63d2:	38 0f       	add	r19, r24
    63d4:	3e 35       	cpi	r19, 0x5E	; 94
    63d6:	c8 f3       	brcs	.-14     	; 0x63ca <split_args+0x7c>
    63d8:	88 23       	and	r24, r24
    63da:	69 f0       	breq	.+26     	; 0x63f6 <split_args+0xa8>
    63dc:	a2 2f       	mov	r26, r18
    63de:	b9 2f       	mov	r27, r25
    63e0:	1d 92       	st	X+, r1
    63e2:	21 96       	adiw	r28, 0x01	; 1
    63e4:	ff ef       	ldi	r31, 0xFF	; 255
    63e6:	ef 1a       	sub	r14, r31
    63e8:	ff 0a       	sbc	r15, r31
    63ea:	0e 5f       	subi	r16, 0xFE	; 254
    63ec:	1f 4f       	sbci	r17, 0xFF	; 255
    63ee:	cc cf       	rjmp	.-104    	; 0x6388 <split_args+0x3a>
    63f0:	80 e0       	ldi	r24, 0x00	; 0
    63f2:	90 e0       	ldi	r25, 0x00	; 0
    63f4:	03 c0       	rjmp	.+6      	; 0x63fc <split_args+0xae>
    63f6:	c7 01       	movw	r24, r14
    63f8:	01 c0       	rjmp	.+2      	; 0x63fc <split_args+0xae>
    63fa:	ce 01       	movw	r24, r28
    63fc:	cd b7       	in	r28, 0x3d	; 61
    63fe:	de b7       	in	r29, 0x3e	; 62
    6400:	e8 e0       	ldi	r30, 0x08	; 8
    6402:	0c 94 b5 e9 	jmp	0x1d36a	; 0x1d36a <__epilogue_restores__+0x14>

00006406 <token>:
///@return string lenth on match.
///@return 0 on no match.

MEMSPACE
int token(char *str, char *pat)
{
    6406:	ef 92       	push	r14
    6408:	ff 92       	push	r15
    640a:	0f 93       	push	r16
    640c:	1f 93       	push	r17
    640e:	cf 93       	push	r28
    6410:	df 93       	push	r29
    6412:	7c 01       	movw	r14, r24
    int patlen;
    int len;
    char *ptr;

    ptr = skipspaces(str);
    6414:	8b 01       	movw	r16, r22
    6416:	b7 de       	rcall	.-658    	; 0x6186 <skipspaces>
    len = 0;
    while(*ptr > ' ' && *ptr <= 0x7e )
    6418:	9c 01       	movw	r18, r24
    641a:	fc 01       	movw	r30, r24
    641c:	ef 01       	movw	r28, r30
    641e:	c2 1b       	sub	r28, r18
    6420:	d3 0b       	sbc	r29, r19
    6422:	91 91       	ld	r25, Z+
    6424:	91 52       	subi	r25, 0x21	; 33
    6426:	9e 35       	cpi	r25, 0x5E	; 94
    {
        ++len;
        ++ptr;
    }

    if(!len)
    6428:	c8 f3       	brcs	.-14     	; 0x641c <token+0x16>
    642a:	20 97       	sbiw	r28, 0x00	; 0
        return(0);

    patlen = strlen(pat);
    642c:	91 f0       	breq	.+36     	; 0x6452 <token+0x4c>
    642e:	f8 01       	movw	r30, r16
    6430:	01 90       	ld	r0, Z+
    6432:	00 20       	and	r0, r0
    6434:	e9 f7       	brne	.-6      	; 0x6430 <token+0x2a>
    6436:	31 97       	sbiw	r30, 0x01	; 1
    6438:	e0 1b       	sub	r30, r16

    if(len != patlen)
    643a:	f1 0b       	sbc	r31, r17
    643c:	ec 17       	cp	r30, r28
    643e:	fd 07       	cpc	r31, r29
        return(0);

    if(strncmp(str,pat,patlen) == 0)
    6440:	31 f4       	brne	.+12     	; 0x644e <token+0x48>
    6442:	ae 01       	movw	r20, r28
    6444:	b8 01       	movw	r22, r16
    6446:	c7 01       	movw	r24, r14
    6448:	b5 de       	rcall	.-662    	; 0x61b4 <strncmp>
    644a:	89 2b       	or	r24, r25
        ++len;
        ++ptr;
    }

    if(!len)
        return(0);
    644c:	11 f0       	breq	.+4      	; 0x6452 <token+0x4c>
    644e:	c0 e0       	ldi	r28, 0x00	; 0
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    6450:	d0 e0       	ldi	r29, 0x00	; 0
    6452:	ce 01       	movw	r24, r28
    6454:	cd b7       	in	r28, 0x3d	; 61
    6456:	de b7       	in	r29, 0x3e	; 62
    6458:	e6 e0       	ldi	r30, 0x06	; 6
    645a:	0c 94 b7 e9 	jmp	0x1d36e	; 0x1d36e <__epilogue_restores__+0x18>

0000645e <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{ 
    645e:	a2 e0       	ldi	r26, 0x02	; 2
    6460:	b0 e0       	ldi	r27, 0x00	; 0
    6462:	e5 e3       	ldi	r30, 0x35	; 53
    6464:	f2 e3       	ldi	r31, 0x32	; 50
    6466:	0c 94 9d e9 	jmp	0x1d33a	; 0x1d33a <__prologue_saves__+0x1c>
    int ret;
    char *ptr;
    char *endptr;


    ptr = skipspaces(str);
    646a:	8d de       	rcall	.-742    	; 0x6186 <skipspaces>
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    646c:	8c 01       	movw	r16, r24
    646e:	6d e9       	ldi	r22, 0x9D	; 157
    6470:	77 e0       	ldi	r23, 0x07	; 7
    6472:	53 df       	rcall	.-346    	; 0x631a <MATCHI_LEN>
    6474:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 16;
        ptr += ret;
    6476:	29 f0       	breq	.+10     	; 0x6482 <get_value+0x24>
    6478:	08 0f       	add	r16, r24
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    647a:	19 1f       	adc	r17, r25
    647c:	40 e1       	ldi	r20, 0x10	; 16
    647e:	50 e0       	ldi	r21, 0x00	; 0
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    6480:	18 c0       	rjmp	.+48     	; 0x64b2 <get_value+0x54>
    6482:	60 ea       	ldi	r22, 0xA0	; 160
    6484:	77 e0       	ldi	r23, 0x07	; 7
    6486:	c8 01       	movw	r24, r16
    6488:	48 df       	rcall	.-368    	; 0x631a <MATCHI_LEN>
    648a:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 8;
        ptr += ret;
    648c:	29 f0       	breq	.+10     	; 0x6498 <get_value+0x3a>
    648e:	08 0f       	add	r16, r24
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    6490:	19 1f       	adc	r17, r25
    6492:	48 e0       	ldi	r20, 0x08	; 8
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    6494:	50 e0       	ldi	r21, 0x00	; 0
    6496:	0d c0       	rjmp	.+26     	; 0x64b2 <get_value+0x54>
    6498:	63 ea       	ldi	r22, 0xA3	; 163
    649a:	77 e0       	ldi	r23, 0x07	; 7
    649c:	c8 01       	movw	r24, r16
    649e:	3d df       	rcall	.-390    	; 0x631a <MATCHI_LEN>
    {
        base = 2;
        ptr += ret;
    64a0:	00 97       	sbiw	r24, 0x00	; 0
    64a2:	29 f0       	breq	.+10     	; 0x64ae <get_value+0x50>
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    64a4:	08 0f       	add	r16, r24
    64a6:	19 1f       	adc	r17, r25
    64a8:	42 e0       	ldi	r20, 0x02	; 2
    char *ptr;
    char *endptr;


    ptr = skipspaces(str);
    base = 10;
    64aa:	50 e0       	ldi	r21, 0x00	; 0
    64ac:	02 c0       	rjmp	.+4      	; 0x64b2 <get_value+0x54>
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    64ae:	4a e0       	ldi	r20, 0x0A	; 10
    64b0:	50 e0       	ldi	r21, 0x00	; 0
    64b2:	be 01       	movw	r22, r28
    64b4:	6f 5f       	subi	r22, 0xFF	; 255
    64b6:	7f 4f       	sbci	r23, 0xFF	; 255
    64b8:	c8 01       	movw	r24, r16
}
    64ba:	0e 94 49 45 	call	0x8a92	; 0x8a92 <strtol>
    64be:	22 96       	adiw	r28, 0x02	; 2
    64c0:	e4 e0       	ldi	r30, 0x04	; 4
    64c2:	0c 94 b9 e9 	jmp	0x1d372	; 0x1d372 <__epilogue_restores__+0x1c>

000064c6 <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    64c6:	78 94       	sei
    64c8:	08 95       	ret

000064ca <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    64ca:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;   // No Prescale
    64cc:	89 e0       	ldi	r24, 0x09	; 9
    64ce:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    64d2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);    // 0 .. count
    64d6:	8f e1       	ldi	r24, 0x1F	; 31
    64d8:	9e e4       	ldi	r25, 0x4E	; 78
    64da:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    64de:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);              //Enable the Output Compare A interrupt
    64e2:	ef e6       	ldi	r30, 0x6F	; 111
    64e4:	f0 e0       	ldi	r31, 0x00	; 0
    64e6:	80 81       	ld	r24, Z
    64e8:	82 60       	ori	r24, 0x02	; 2
    64ea:	80 83       	st	Z, r24
    sei();
    64ec:	78 94       	sei
    64ee:	08 95       	ret

000064f0 <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    64f0:	1f 92       	push	r1
    64f2:	0f 92       	push	r0
    64f4:	0f b6       	in	r0, 0x3f	; 63
    64f6:	0f 92       	push	r0
    64f8:	11 24       	eor	r1, r1
    64fa:	0b b6       	in	r0, 0x3b	; 59
    64fc:	0f 92       	push	r0
    64fe:	2f 93       	push	r18
    6500:	3f 93       	push	r19
    6502:	4f 93       	push	r20
    6504:	5f 93       	push	r21
    6506:	6f 93       	push	r22
    6508:	7f 93       	push	r23
    650a:	8f 93       	push	r24
    650c:	9f 93       	push	r25
    650e:	af 93       	push	r26
    6510:	bf 93       	push	r27
    6512:	ef 93       	push	r30
    execute_timers();
    6514:	ff 93       	push	r31
}
    6516:	26 d2       	rcall	.+1100   	; 0x6964 <execute_timers>
    6518:	ff 91       	pop	r31
    651a:	ef 91       	pop	r30
    651c:	bf 91       	pop	r27
    651e:	af 91       	pop	r26
    6520:	9f 91       	pop	r25
    6522:	8f 91       	pop	r24
    6524:	7f 91       	pop	r23
    6526:	6f 91       	pop	r22
    6528:	5f 91       	pop	r21
    652a:	4f 91       	pop	r20
    652c:	3f 91       	pop	r19
    652e:	2f 91       	pop	r18
    6530:	0f 90       	pop	r0
    6532:	0b be       	out	0x3b, r0	; 59
    6534:	0f 90       	pop	r0
    6536:	0f be       	out	0x3f, r0	; 63
    6538:	0f 90       	pop	r0
    653a:	1f 90       	pop	r1
    653c:	18 95       	reti

0000653e <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    653e:	0f 93       	push	r16
    6540:	1f 93       	push	r17
    6542:	cf 93       	push	r28
    6544:	df 93       	push	r29
    6546:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

    // disable interrupts
    cli();
    6548:	f8 94       	cli

    count1 = TCNT1;
    654a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    654e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    6552:	80 91 95 1a 	lds	r24, 0x1A95	; 0x801a95 <__clock>
    6556:	90 91 96 1a 	lds	r25, 0x1A96	; 0x801a96 <__clock+0x1>
    655a:	a0 91 97 1a 	lds	r26, 0x1A97	; 0x801a97 <__clock+0x2>
    655e:	b0 91 98 1a 	lds	r27, 0x1A98	; 0x801a98 <__clock+0x3>
    6562:	80 83       	st	Z, r24
    6564:	91 83       	std	Z+1, r25	; 0x01
    6566:	a2 83       	std	Z+2, r26	; 0x02
    6568:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    656a:	80 91 99 1a 	lds	r24, 0x1A99	; 0x801a99 <__clock+0x4>
    656e:	90 91 9a 1a 	lds	r25, 0x1A9A	; 0x801a9a <__clock+0x5>
    6572:	a0 91 9b 1a 	lds	r26, 0x1A9B	; 0x801a9b <__clock+0x6>
    6576:	b0 91 9c 1a 	lds	r27, 0x1A9C	; 0x801a9c <__clock+0x7>
    657a:	84 83       	std	Z+4, r24	; 0x04
    657c:	95 83       	std	Z+5, r25	; 0x05
    657e:	a6 83       	std	Z+6, r26	; 0x06
    6580:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    6582:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6586:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    658a:	b1 9b       	sbis	0x16, 1	; 22
    658c:	03 c0       	rjmp	.+6      	; 0x6594 <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    658e:	c0 e0       	ldi	r28, 0x00	; 0
    6590:	d0 e0       	ldi	r29, 0x00	; 0
    6592:	3f c0       	rjmp	.+126    	; 0x6612 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    6594:	82 17       	cp	r24, r18
    6596:	93 07       	cpc	r25, r19
    6598:	d0 f1       	brcs	.+116    	; 0x660e <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    659a:	c0 e0       	ldi	r28, 0x00	; 0
    659c:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    659e:	40 e0       	ldi	r20, 0x00	; 0
    65a0:	50 e0       	ldi	r21, 0x00	; 0
    65a2:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    65a4:	9a 01       	movw	r18, r20
    65a6:	ab 01       	movw	r20, r22
    65a8:	28 0f       	add	r18, r24
    65aa:	39 1f       	adc	r19, r25
    65ac:	41 1d       	adc	r20, r1
    65ae:	51 1d       	adc	r21, r1

    // enable interrupts
    sei();
    65b0:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    65b2:	a2 e3       	ldi	r26, 0x32	; 50
    65b4:	b0 e0       	ldi	r27, 0x00	; 0
    65b6:	0e 94 6f e9 	call	0x1d2de	; 0x1d2de <__muluhisi3>
    65ba:	04 81       	ldd	r16, Z+4	; 0x04
    65bc:	15 81       	ldd	r17, Z+5	; 0x05
    65be:	26 81       	ldd	r18, Z+6	; 0x06
    65c0:	37 81       	ldd	r19, Z+7	; 0x07
    65c2:	dc 01       	movw	r26, r24
    65c4:	cb 01       	movw	r24, r22
    65c6:	80 0f       	add	r24, r16
    65c8:	91 1f       	adc	r25, r17
    65ca:	a2 1f       	adc	r26, r18
    65cc:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    65ce:	81 15       	cp	r24, r1
    65d0:	2a ec       	ldi	r18, 0xCA	; 202
    65d2:	92 07       	cpc	r25, r18
    65d4:	2a e9       	ldi	r18, 0x9A	; 154
    65d6:	a2 07       	cpc	r26, r18
    65d8:	2b e3       	ldi	r18, 0x3B	; 59
    65da:	b2 07       	cpc	r27, r18
    65dc:	2c f4       	brge	.+10     	; 0x65e8 <clock_gettime+0xaa>
    // enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    65de:	84 83       	std	Z+4, r24	; 0x04
    65e0:	95 83       	std	Z+5, r25	; 0x05
    65e2:	a6 83       	std	Z+6, r26	; 0x06
    65e4:	b7 83       	std	Z+7, r27	; 0x07
    65e6:	1a c0       	rjmp	.+52     	; 0x661c <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    65e8:	9a 5c       	subi	r25, 0xCA	; 202
    65ea:	aa 49       	sbci	r26, 0x9A	; 154
    65ec:	bb 43       	sbci	r27, 0x3B	; 59
    65ee:	84 83       	std	Z+4, r24	; 0x04
    65f0:	95 83       	std	Z+5, r25	; 0x05
    65f2:	a6 83       	std	Z+6, r26	; 0x06
    65f4:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    65f6:	80 81       	ld	r24, Z
    65f8:	91 81       	ldd	r25, Z+1	; 0x01
    65fa:	a2 81       	ldd	r26, Z+2	; 0x02
    65fc:	b3 81       	ldd	r27, Z+3	; 0x03
    65fe:	01 96       	adiw	r24, 0x01	; 1
    6600:	a1 1d       	adc	r26, r1
    6602:	b1 1d       	adc	r27, r1
    6604:	80 83       	st	Z, r24
    6606:	91 83       	std	Z+1, r25	; 0x01
    6608:	a2 83       	std	Z+2, r26	; 0x02
    660a:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    660c:	07 c0       	rjmp	.+14     	; 0x661c <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;    // counter overflow and NO pending is an error!
    660e:	cf ef       	ldi	r28, 0xFF	; 255
    6610:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    6612:	40 e2       	ldi	r20, 0x20	; 32
    6614:	5e e4       	ldi	r21, 0x4E	; 78
    6616:	60 e0       	ldi	r22, 0x00	; 0
    6618:	70 e0       	ldi	r23, 0x00	; 0
    661a:	c4 cf       	rjmp	.-120    	; 0x65a4 <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    661c:	ce 01       	movw	r24, r28
    661e:	df 91       	pop	r29
    6620:	cf 91       	pop	r28
    6622:	1f 91       	pop	r17
    6624:	0f 91       	pop	r16
    6626:	08 95       	ret

00006628 <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    6628:	80 91 99 1a 	lds	r24, 0x1A99	; 0x801a99 <__clock+0x4>
    662c:	90 91 9a 1a 	lds	r25, 0x1A9A	; 0x801a9a <__clock+0x5>
    6630:	a0 91 9b 1a 	lds	r26, 0x1A9B	; 0x801a9b <__clock+0x6>
    6634:	b0 91 9c 1a 	lds	r27, 0x1A9C	; 0x801a9c <__clock+0x7>
    6638:	80 5c       	subi	r24, 0xC0	; 192
    663a:	9d 4b       	sbci	r25, 0xBD	; 189
    663c:	a0 4f       	sbci	r26, 0xF0	; 240
    663e:	bf 4f       	sbci	r27, 0xFF	; 255
    6640:	80 93 99 1a 	sts	0x1A99, r24	; 0x801a99 <__clock+0x4>
    6644:	90 93 9a 1a 	sts	0x1A9A, r25	; 0x801a9a <__clock+0x5>
    6648:	a0 93 9b 1a 	sts	0x1A9B, r26	; 0x801a9b <__clock+0x6>
    664c:	b0 93 9c 1a 	sts	0x1A9C, r27	; 0x801a9c <__clock+0x7>
    6650:	80 91 99 1a 	lds	r24, 0x1A99	; 0x801a99 <__clock+0x4>
    6654:	90 91 9a 1a 	lds	r25, 0x1A9A	; 0x801a9a <__clock+0x5>
    6658:	a0 91 9b 1a 	lds	r26, 0x1A9B	; 0x801a9b <__clock+0x6>
    665c:	b0 91 9c 1a 	lds	r27, 0x1A9C	; 0x801a9c <__clock+0x7>
    6660:	81 15       	cp	r24, r1
    6662:	9a 4c       	sbci	r25, 0xCA	; 202
    6664:	aa 49       	sbci	r26, 0x9A	; 154
    6666:	bb 43       	sbci	r27, 0x3B	; 59
    6668:	dc f0       	brlt	.+54     	; 0x66a0 <clock_task+0x78>
    666a:	80 91 95 1a 	lds	r24, 0x1A95	; 0x801a95 <__clock>
    666e:	90 91 96 1a 	lds	r25, 0x1A96	; 0x801a96 <__clock+0x1>
    6672:	a0 91 97 1a 	lds	r26, 0x1A97	; 0x801a97 <__clock+0x2>
    6676:	b0 91 98 1a 	lds	r27, 0x1A98	; 0x801a98 <__clock+0x3>
    667a:	01 96       	adiw	r24, 0x01	; 1
    667c:	a1 1d       	adc	r26, r1
    667e:	b1 1d       	adc	r27, r1
    6680:	80 93 95 1a 	sts	0x1A95, r24	; 0x801a95 <__clock>
    6684:	90 93 96 1a 	sts	0x1A96, r25	; 0x801a96 <__clock+0x1>
    6688:	a0 93 97 1a 	sts	0x1A97, r26	; 0x801a97 <__clock+0x2>
    668c:	b0 93 98 1a 	sts	0x1A98, r27	; 0x801a98 <__clock+0x3>
    6690:	10 92 99 1a 	sts	0x1A99, r1	; 0x801a99 <__clock+0x4>
    6694:	10 92 9a 1a 	sts	0x1A9A, r1	; 0x801a9a <__clock+0x5>
    6698:	10 92 9b 1a 	sts	0x1A9B, r1	; 0x801a9b <__clock+0x6>
    669c:	10 92 9c 1a 	sts	0x1A9C, r1	; 0x801a9c <__clock+0x7>
    66a0:	08 95       	ret

000066a2 <clock_settime.part.2>:
    66a2:	fc 01       	movw	r30, r24
    66a4:	84 81       	ldd	r24, Z+4	; 0x04
    66a6:	95 81       	ldd	r25, Z+5	; 0x05
    66a8:	a6 81       	ldd	r26, Z+6	; 0x06
    66aa:	b7 81       	ldd	r27, Z+7	; 0x07
    66ac:	80 93 99 1a 	sts	0x1A99, r24	; 0x801a99 <__clock+0x4>
    66b0:	90 93 9a 1a 	sts	0x1A9A, r25	; 0x801a9a <__clock+0x5>
    66b4:	a0 93 9b 1a 	sts	0x1A9B, r26	; 0x801a9b <__clock+0x6>
    66b8:	b0 93 9c 1a 	sts	0x1A9C, r27	; 0x801a9c <__clock+0x7>
    66bc:	80 81       	ld	r24, Z
    66be:	91 81       	ldd	r25, Z+1	; 0x01
    66c0:	a2 81       	ldd	r26, Z+2	; 0x02
    66c2:	b3 81       	ldd	r27, Z+3	; 0x03
    66c4:	80 93 95 1a 	sts	0x1A95, r24	; 0x801a95 <__clock>
    66c8:	90 93 96 1a 	sts	0x1A96, r25	; 0x801a96 <__clock+0x1>
    66cc:	a0 93 97 1a 	sts	0x1A97, r26	; 0x801a97 <__clock+0x2>
    66d0:	b0 93 98 1a 	sts	0x1A98, r27	; 0x801a98 <__clock+0x3>
    66d4:	80 91 99 1a 	lds	r24, 0x1A99	; 0x801a99 <__clock+0x4>
    66d8:	90 91 9a 1a 	lds	r25, 0x1A9A	; 0x801a9a <__clock+0x5>
    66dc:	a0 91 9b 1a 	lds	r26, 0x1A9B	; 0x801a9b <__clock+0x6>
    66e0:	b0 91 9c 1a 	lds	r27, 0x1A9C	; 0x801a9c <__clock+0x7>
    66e4:	44 81       	ldd	r20, Z+4	; 0x04
    66e6:	55 81       	ldd	r21, Z+5	; 0x05
    66e8:	66 81       	ldd	r22, Z+6	; 0x06
    66ea:	77 81       	ldd	r23, Z+7	; 0x07
    66ec:	48 17       	cp	r20, r24
    66ee:	59 07       	cpc	r21, r25
    66f0:	6a 07       	cpc	r22, r26
    66f2:	7b 07       	cpc	r23, r27
    66f4:	b9 f6       	brne	.-82     	; 0x66a4 <clock_settime.part.2+0x2>
    66f6:	80 91 95 1a 	lds	r24, 0x1A95	; 0x801a95 <__clock>
    66fa:	90 91 96 1a 	lds	r25, 0x1A96	; 0x801a96 <__clock+0x1>
    66fe:	a0 91 97 1a 	lds	r26, 0x1A97	; 0x801a97 <__clock+0x2>
    6702:	b0 91 98 1a 	lds	r27, 0x1A98	; 0x801a98 <__clock+0x3>
    6706:	40 81       	ld	r20, Z
    6708:	51 81       	ldd	r21, Z+1	; 0x01
    670a:	62 81       	ldd	r22, Z+2	; 0x02
    670c:	73 81       	ldd	r23, Z+3	; 0x03
    670e:	48 17       	cp	r20, r24
    6710:	59 07       	cpc	r21, r25
    6712:	6a 07       	cpc	r22, r26
    6714:	7b 07       	cpc	r23, r27
    6716:	31 f6       	brne	.-116    	; 0x66a4 <clock_settime.part.2+0x2>
    6718:	80 e0       	ldi	r24, 0x00	; 0
    671a:	90 e0       	ldi	r25, 0x00	; 0
    671c:	08 95       	ret

0000671e <set_timers>:
    671e:	00 97       	sbiw	r24, 0x00	; 0
    6720:	79 f1       	breq	.+94     	; 0x6780 <set_timers+0x62>
    6722:	ed e9       	ldi	r30, 0x9D	; 157
    6724:	fa e1       	ldi	r31, 0x1A	; 26
    6726:	4f ef       	ldi	r20, 0xFF	; 255
    6728:	5f ef       	ldi	r21, 0xFF	; 255
    672a:	20 e0       	ldi	r18, 0x00	; 0
    672c:	30 e0       	ldi	r19, 0x00	; 0
    672e:	60 81       	ld	r22, Z
    6730:	71 81       	ldd	r23, Z+1	; 0x01
    6732:	86 17       	cp	r24, r22
    6734:	97 07       	cpc	r25, r23
    6736:	79 f0       	breq	.+30     	; 0x6756 <set_timers+0x38>
    6738:	67 2b       	or	r22, r23
    673a:	71 f4       	brne	.+28     	; 0x6758 <set_timers+0x3a>
    673c:	f9 01       	movw	r30, r18
    673e:	ee 0f       	add	r30, r30
    6740:	ff 1f       	adc	r31, r31
    6742:	e2 0f       	add	r30, r18
    6744:	f3 1f       	adc	r31, r19
    6746:	e3 56       	subi	r30, 0x63	; 99
    6748:	f5 4e       	sbci	r31, 0xE5	; 229
    674a:	91 83       	std	Z+1, r25	; 0x01
    674c:	80 83       	st	Z, r24
    674e:	81 e0       	ldi	r24, 0x01	; 1
    6750:	82 83       	std	Z+2, r24	; 0x02
    6752:	c9 01       	movw	r24, r18
    6754:	08 95       	ret
    6756:	a9 01       	movw	r20, r18
    6758:	2f 5f       	subi	r18, 0xFF	; 255
    675a:	3f 4f       	sbci	r19, 0xFF	; 255
    675c:	33 96       	adiw	r30, 0x03	; 3
    675e:	28 30       	cpi	r18, 0x08	; 8
    6760:	31 05       	cpc	r19, r1
    6762:	29 f7       	brne	.-54     	; 0x672e <set_timers+0x10>
    6764:	4f 3f       	cpi	r20, 0xFF	; 255
    6766:	8f ef       	ldi	r24, 0xFF	; 255
    6768:	58 07       	cpc	r21, r24
    676a:	69 f4       	brne	.+26     	; 0x6786 <set_timers+0x68>
    676c:	8c eb       	ldi	r24, 0xBC	; 188
    676e:	95 e0       	ldi	r25, 0x05	; 5
    6770:	1f 92       	push	r1
    6772:	9f 93       	push	r25
    6774:	8f 93       	push	r24
    6776:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    677a:	0f 90       	pop	r0
    677c:	0f 90       	pop	r0
    677e:	0f 90       	pop	r0
    6780:	8f ef       	ldi	r24, 0xFF	; 255
    6782:	9f ef       	ldi	r25, 0xFF	; 255
    6784:	08 95       	ret
    6786:	ca 01       	movw	r24, r20
    6788:	08 95       	ret

0000678a <delete_all_timers>:
    678a:	ed e9       	ldi	r30, 0x9D	; 157
    678c:	fa e1       	ldi	r31, 0x1A	; 26
    678e:	12 82       	std	Z+2, r1	; 0x02
    6790:	11 82       	std	Z+1, r1	; 0x01
    6792:	10 82       	st	Z, r1
    6794:	33 96       	adiw	r30, 0x03	; 3
    6796:	8a e1       	ldi	r24, 0x1A	; 26
    6798:	e5 3b       	cpi	r30, 0xB5	; 181
    679a:	f8 07       	cpc	r31, r24
    679c:	c1 f7       	brne	.-16     	; 0x678e <delete_all_timers+0x4>
    679e:	08 95       	ret

000067a0 <subtract_timespec>:
    67a0:	0f 93       	push	r16
    67a2:	1f 93       	push	r17
    67a4:	cf 93       	push	r28
    67a6:	df 93       	push	r29
    67a8:	fc 01       	movw	r30, r24
    67aa:	84 81       	ldd	r24, Z+4	; 0x04
    67ac:	95 81       	ldd	r25, Z+5	; 0x05
    67ae:	a6 81       	ldd	r26, Z+6	; 0x06
    67b0:	b7 81       	ldd	r27, Z+7	; 0x07
    67b2:	eb 01       	movw	r28, r22
    67b4:	0c 81       	ldd	r16, Y+4	; 0x04
    67b6:	1d 81       	ldd	r17, Y+5	; 0x05
    67b8:	2e 81       	ldd	r18, Y+6	; 0x06
    67ba:	3f 81       	ldd	r19, Y+7	; 0x07
    67bc:	80 1b       	sub	r24, r16
    67be:	91 0b       	sbc	r25, r17
    67c0:	a2 0b       	sbc	r26, r18
    67c2:	b3 0b       	sbc	r27, r19
    67c4:	b7 fd       	sbrc	r27, 7
    67c6:	05 c0       	rjmp	.+10     	; 0x67d2 <subtract_timespec+0x32>
    67c8:	84 83       	std	Z+4, r24	; 0x04
    67ca:	95 83       	std	Z+5, r25	; 0x05
    67cc:	a6 83       	std	Z+6, r26	; 0x06
    67ce:	b7 83       	std	Z+7, r27	; 0x07
    67d0:	12 c0       	rjmp	.+36     	; 0x67f6 <subtract_timespec+0x56>
    67d2:	96 53       	subi	r25, 0x36	; 54
    67d4:	a5 46       	sbci	r26, 0x65	; 101
    67d6:	b4 4c       	sbci	r27, 0xC4	; 196
    67d8:	84 83       	std	Z+4, r24	; 0x04
    67da:	95 83       	std	Z+5, r25	; 0x05
    67dc:	a6 83       	std	Z+6, r26	; 0x06
    67de:	b7 83       	std	Z+7, r27	; 0x07
    67e0:	80 81       	ld	r24, Z
    67e2:	91 81       	ldd	r25, Z+1	; 0x01
    67e4:	a2 81       	ldd	r26, Z+2	; 0x02
    67e6:	b3 81       	ldd	r27, Z+3	; 0x03
    67e8:	01 97       	sbiw	r24, 0x01	; 1
    67ea:	a1 09       	sbc	r26, r1
    67ec:	b1 09       	sbc	r27, r1
    67ee:	80 83       	st	Z, r24
    67f0:	91 83       	std	Z+1, r25	; 0x01
    67f2:	a2 83       	std	Z+2, r26	; 0x02
    67f4:	b3 83       	std	Z+3, r27	; 0x03
    67f6:	80 81       	ld	r24, Z
    67f8:	91 81       	ldd	r25, Z+1	; 0x01
    67fa:	a2 81       	ldd	r26, Z+2	; 0x02
    67fc:	b3 81       	ldd	r27, Z+3	; 0x03
    67fe:	eb 01       	movw	r28, r22
    6800:	48 81       	ld	r20, Y
    6802:	59 81       	ldd	r21, Y+1	; 0x01
    6804:	6a 81       	ldd	r22, Y+2	; 0x02
    6806:	7b 81       	ldd	r23, Y+3	; 0x03
    6808:	84 1b       	sub	r24, r20
    680a:	95 0b       	sbc	r25, r21
    680c:	a6 0b       	sbc	r26, r22
    680e:	b7 0b       	sbc	r27, r23
    6810:	80 83       	st	Z, r24
    6812:	91 83       	std	Z+1, r25	; 0x01
    6814:	a2 83       	std	Z+2, r26	; 0x02
    6816:	b3 83       	std	Z+3, r27	; 0x03
    6818:	df 91       	pop	r29
    681a:	cf 91       	pop	r28
    681c:	1f 91       	pop	r17
    681e:	0f 91       	pop	r16
    6820:	08 95       	ret

00006822 <ts_to_str>:
    6822:	fc 01       	movw	r30, r24
    6824:	87 81       	ldd	r24, Z+7	; 0x07
    6826:	8f 93       	push	r24
    6828:	86 81       	ldd	r24, Z+6	; 0x06
    682a:	8f 93       	push	r24
    682c:	85 81       	ldd	r24, Z+5	; 0x05
    682e:	8f 93       	push	r24
    6830:	84 81       	ldd	r24, Z+4	; 0x04
    6832:	8f 93       	push	r24
    6834:	83 81       	ldd	r24, Z+3	; 0x03
    6836:	8f 93       	push	r24
    6838:	82 81       	ldd	r24, Z+2	; 0x02
    683a:	8f 93       	push	r24
    683c:	81 81       	ldd	r24, Z+1	; 0x01
    683e:	8f 93       	push	r24
    6840:	80 81       	ld	r24, Z
    6842:	8f 93       	push	r24
    6844:	82 eb       	ldi	r24, 0xB2	; 178
    6846:	95 e0       	ldi	r25, 0x05	; 5
    6848:	1f 92       	push	r1
    684a:	9f 93       	push	r25
    684c:	8f 93       	push	r24
    684e:	1f 92       	push	r1
    6850:	8f e1       	ldi	r24, 0x1F	; 31
    6852:	8f 93       	push	r24
    6854:	86 eb       	ldi	r24, 0xB6	; 182
    6856:	97 e1       	ldi	r25, 0x17	; 23
    6858:	9f 93       	push	r25
    685a:	8f 93       	push	r24
    685c:	0e 94 e6 44 	call	0x89cc	; 0x89cc <snprintf_P>
    6860:	8d b7       	in	r24, 0x3d	; 61
    6862:	9e b7       	in	r25, 0x3e	; 62
    6864:	0f 96       	adiw	r24, 0x0f	; 15
    6866:	0f b6       	in	r0, 0x3f	; 63
    6868:	f8 94       	cli
    686a:	9e bf       	out	0x3e, r25	; 62
    686c:	0f be       	out	0x3f, r0	; 63
    686e:	8d bf       	out	0x3d, r24	; 61
    6870:	86 eb       	ldi	r24, 0xB6	; 182
    6872:	97 e1       	ldi	r25, 0x17	; 23
    6874:	08 95       	ret

00006876 <clock_elapsed_begin>:
    6876:	6e ea       	ldi	r22, 0xAE	; 174
    6878:	77 e1       	ldi	r23, 0x17	; 23
    687a:	80 e0       	ldi	r24, 0x00	; 0
    687c:	90 e0       	ldi	r25, 0x00	; 0
    687e:	5f ce       	rjmp	.-834    	; 0x653e <clock_gettime>
    6880:	08 95       	ret

00006882 <clock_elapsed_end>:
    6882:	a8 e0       	ldi	r26, 0x08	; 8
    6884:	b0 e0       	ldi	r27, 0x00	; 0
    6886:	e7 e4       	ldi	r30, 0x47	; 71
    6888:	f4 e3       	ldi	r31, 0x34	; 52
    688a:	0c 94 9d e9 	jmp	0x1d33a	; 0x1d33a <__prologue_saves__+0x1c>
    688e:	8c 01       	movw	r16, r24
    6890:	be 01       	movw	r22, r28
    6892:	6f 5f       	subi	r22, 0xFF	; 255
    6894:	7f 4f       	sbci	r23, 0xFF	; 255
    6896:	80 e0       	ldi	r24, 0x00	; 0
    6898:	90 e0       	ldi	r25, 0x00	; 0
    689a:	51 de       	rcall	.-862    	; 0x653e <clock_gettime>
    689c:	6e ea       	ldi	r22, 0xAE	; 174
    689e:	77 e1       	ldi	r23, 0x17	; 23
    68a0:	ce 01       	movw	r24, r28
    68a2:	01 96       	adiw	r24, 0x01	; 1
    68a4:	7d df       	rcall	.-262    	; 0x67a0 <subtract_timespec>
    68a6:	01 15       	cp	r16, r1
    68a8:	11 05       	cpc	r17, r1
    68aa:	c1 f0       	breq	.+48     	; 0x68dc <clock_elapsed_end+0x5a>
    68ac:	f8 01       	movw	r30, r16
    68ae:	80 81       	ld	r24, Z
    68b0:	88 23       	and	r24, r24
    68b2:	a1 f0       	breq	.+40     	; 0x68dc <clock_elapsed_end+0x5a>
    68b4:	ce 01       	movw	r24, r28
    68b6:	01 96       	adiw	r24, 0x01	; 1
    68b8:	b4 df       	rcall	.-152    	; 0x6822 <ts_to_str>
    68ba:	9f 93       	push	r25
    68bc:	8f 93       	push	r24
    68be:	1f 93       	push	r17
    68c0:	0f 93       	push	r16
    68c2:	85 e9       	ldi	r24, 0x95	; 149
    68c4:	95 e0       	ldi	r25, 0x05	; 5
    68c6:	1f 92       	push	r1
    68c8:	9f 93       	push	r25
    68ca:	8f 93       	push	r24
    68cc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    68d0:	0f b6       	in	r0, 0x3f	; 63
    68d2:	f8 94       	cli
    68d4:	de bf       	out	0x3e, r29	; 62
    68d6:	0f be       	out	0x3f, r0	; 63
    68d8:	cd bf       	out	0x3d, r28	; 61
    68da:	11 c0       	rjmp	.+34     	; 0x68fe <clock_elapsed_end+0x7c>
    68dc:	ce 01       	movw	r24, r28
    68de:	01 96       	adiw	r24, 0x01	; 1
    68e0:	a0 df       	rcall	.-192    	; 0x6822 <ts_to_str>
    68e2:	9f 93       	push	r25
    68e4:	8f 93       	push	r24
    68e6:	8a e8       	ldi	r24, 0x8A	; 138
    68e8:	95 e0       	ldi	r25, 0x05	; 5
    68ea:	1f 92       	push	r1
    68ec:	9f 93       	push	r25
    68ee:	8f 93       	push	r24
    68f0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    68f4:	0f 90       	pop	r0
    68f6:	0f 90       	pop	r0
    68f8:	0f 90       	pop	r0
    68fa:	0f 90       	pop	r0
    68fc:	0f 90       	pop	r0
    68fe:	28 96       	adiw	r28, 0x08	; 8
    6900:	e4 e0       	ldi	r30, 0x04	; 4
    6902:	0c 94 b9 e9 	jmp	0x1d372	; 0x1d372 <__epilogue_restores__+0x1c>

00006906 <clock_clear>:
    6906:	a8 e0       	ldi	r26, 0x08	; 8
    6908:	b0 e0       	ldi	r27, 0x00	; 0
    690a:	e9 e8       	ldi	r30, 0x89	; 137
    690c:	f4 e3       	ldi	r31, 0x34	; 52
    690e:	0c 94 9f e9 	jmp	0x1d33e	; 0x1d33e <__prologue_saves__+0x20>
    6912:	1d 82       	std	Y+5, r1	; 0x05
    6914:	1e 82       	std	Y+6, r1	; 0x06
    6916:	1f 82       	std	Y+7, r1	; 0x07
    6918:	18 86       	std	Y+8, r1	; 0x08
    691a:	19 82       	std	Y+1, r1	; 0x01
    691c:	1a 82       	std	Y+2, r1	; 0x02
    691e:	1b 82       	std	Y+3, r1	; 0x03
    6920:	1c 82       	std	Y+4, r1	; 0x04
    6922:	ce 01       	movw	r24, r28
    6924:	01 96       	adiw	r24, 0x01	; 1
    6926:	bd de       	rcall	.-646    	; 0x66a2 <clock_settime.part.2>
    6928:	e5 eb       	ldi	r30, 0xB5	; 181
    692a:	fa e1       	ldi	r31, 0x1A	; 26
    692c:	11 82       	std	Z+1, r1	; 0x01
    692e:	10 82       	st	Z, r1
    6930:	13 82       	std	Z+3, r1	; 0x03
    6932:	12 82       	std	Z+2, r1	; 0x02
    6934:	28 96       	adiw	r28, 0x08	; 8
    6936:	e2 e0       	ldi	r30, 0x02	; 2
    6938:	0c 94 bb e9 	jmp	0x1d376	; 0x1d376 <__epilogue_restores__+0x20>

0000693c <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    693c:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <timers_configured>
    6940:	90 91 d7 17 	lds	r25, 0x17D7	; 0x8017d7 <timers_configured+0x1>
    6944:	89 2b       	or	r24, r25
    6946:	69 f0       	breq	.+26     	; 0x6962 <enable_timers+0x26>
    6948:	80 91 d8 17 	lds	r24, 0x17D8	; 0x8017d8 <timers_enabled>
    694c:	90 91 d9 17 	lds	r25, 0x17D9	; 0x8017d9 <timers_enabled+0x1>
    6950:	89 2b       	or	r24, r25
    {
        enable_system_task();
    6952:	39 f4       	brne	.+14     	; 0x6962 <enable_timers+0x26>
        timers_enabled = 1;
    6954:	b8 dd       	rcall	.-1168   	; 0x64c6 <enable_system_task>
    6956:	81 e0       	ldi	r24, 0x01	; 1
    6958:	90 e0       	ldi	r25, 0x00	; 0
    695a:	90 93 d9 17 	sts	0x17D9, r25	; 0x8017d9 <timers_enabled+0x1>
    695e:	80 93 d8 17 	sts	0x17D8, r24	; 0x8017d8 <timers_enabled>
    6962:	08 95       	ret

00006964 <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6964:	cf 93       	push	r28
    6966:	df 93       	push	r29
    6968:	cd e9       	ldi	r28, 0x9D	; 157
    696a:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    696c:	8a 81       	ldd	r24, Y+2	; 0x02
    696e:	88 23       	and	r24, r24
    6970:	29 f0       	breq	.+10     	; 0x697c <execute_timers+0x18>
    6972:	e8 81       	ld	r30, Y
    6974:	f9 81       	ldd	r31, Y+1	; 0x01
    6976:	30 97       	sbiw	r30, 0x00	; 0
    6978:	09 f0       	breq	.+2      	; 0x697c <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    697a:	09 95       	icall
    697c:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    697e:	8a e1       	ldi	r24, 0x1A	; 26
    6980:	c5 3b       	cpi	r28, 0xB5	; 181
    6982:	d8 07       	cpc	r29, r24
    6984:	99 f7       	brne	.-26     	; 0x696c <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6986:	df 91       	pop	r29
    6988:	cf 91       	pop	r28
    698a:	08 95       	ret

0000698c <init_timers>:
//
/// @return  void
MEMSPACE
void init_timers()
{
    printf("Timers init called\n");
    698c:	86 e7       	ldi	r24, 0x76	; 118
    698e:	95 e0       	ldi	r25, 0x05	; 5
    6990:	1f 92       	push	r1
    6992:	9f 93       	push	r25
    6994:	8f 93       	push	r24
    6996:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    if(!timers_configured)
    699a:	0f 90       	pop	r0
    699c:	0f 90       	pop	r0
    699e:	0f 90       	pop	r0
    69a0:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <timers_configured>
    69a4:	90 91 d7 17 	lds	r25, 0x17D7	; 0x8017d7 <timers_configured+0x1>
    69a8:	89 2b       	or	r24, r25
    {
        install_timers_isr();
    69aa:	a9 f4       	brne	.+42     	; 0x69d6 <init_timers+0x4a>
        timers_configured = 1;
    69ac:	8e dd       	rcall	.-1252   	; 0x64ca <install_timers_isr>
    69ae:	81 e0       	ldi	r24, 0x01	; 1
    69b0:	90 e0       	ldi	r25, 0x00	; 0
    69b2:	90 93 d7 17 	sts	0x17D7, r25	; 0x8017d7 <timers_configured+0x1>
    69b6:	80 93 d6 17 	sts	0x17D6, r24	; 0x8017d6 <timers_configured>
        timers_enabled = 0;
    69ba:	10 92 d9 17 	sts	0x17D9, r1	; 0x8017d9 <timers_enabled+0x1>
    69be:	10 92 d8 17 	sts	0x17D8, r1	; 0x8017d8 <timers_enabled>
        printf("Timers configured\n");
    69c2:	83 e6       	ldi	r24, 0x63	; 99
    69c4:	95 e0       	ldi	r25, 0x05	; 5
    69c6:	1f 92       	push	r1
    69c8:	9f 93       	push	r25
    69ca:	8f 93       	push	r24
    69cc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    }

    delete_all_timers();
    69d0:	0f 90       	pop	r0

    clock_clear();
    69d2:	0f 90       	pop	r0
    69d4:	0f 90       	pop	r0
    printf("Clock Init\n");
    69d6:	d9 de       	rcall	.-590    	; 0x678a <delete_all_timers>
    69d8:	96 df       	rcall	.-212    	; 0x6906 <clock_clear>
    69da:	87 e5       	ldi	r24, 0x57	; 87
    69dc:	95 e0       	ldi	r25, 0x05	; 5
    69de:	1f 92       	push	r1
    69e0:	9f 93       	push	r25
    69e2:	8f 93       	push	r24

///  See time.c
    if(set_timers(clock_task,1) == -1)
    69e4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    69e8:	61 e0       	ldi	r22, 0x01	; 1
    69ea:	70 e0       	ldi	r23, 0x00	; 0
    69ec:	84 e1       	ldi	r24, 0x14	; 20
    69ee:	93 e3       	ldi	r25, 0x33	; 51
    69f0:	96 de       	rcall	.-724    	; 0x671e <set_timers>
    69f2:	0f 90       	pop	r0
    69f4:	0f 90       	pop	r0
    69f6:	0f 90       	pop	r0
        printf("Clock task init failed\n");
    69f8:	01 96       	adiw	r24, 0x01	; 1
    69fa:	51 f4       	brne	.+20     	; 0x6a10 <init_timers+0x84>
    69fc:	8f e3       	ldi	r24, 0x3F	; 63
    69fe:	95 e0       	ldi	r25, 0x05	; 5
    6a00:	1f 92       	push	r1
    6a02:	9f 93       	push	r25
    6a04:	8f 93       	push	r24
    6a06:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    6a0a:	0f 90       	pop	r0
    printf("Clock Installed\n");
    6a0c:	0f 90       	pop	r0
    6a0e:	0f 90       	pop	r0
    6a10:	8e e2       	ldi	r24, 0x2E	; 46
    6a12:	95 e0       	ldi	r25, 0x05	; 5
    6a14:	1f 92       	push	r1
    6a16:	9f 93       	push	r25

    enable_timers();
    6a18:	8f 93       	push	r24
    6a1a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    printf("Timers enabled\n");
    6a1e:	8e df       	rcall	.-228    	; 0x693c <enable_timers>
    6a20:	8e e1       	ldi	r24, 0x1E	; 30
    6a22:	95 e0       	ldi	r25, 0x05	; 5
    6a24:	1f 92       	push	r1
    6a26:	9f 93       	push	r25
    6a28:	8f 93       	push	r24
}
    6a2a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    6a2e:	0f 90       	pop	r0
    6a30:	0f 90       	pop	r0
    6a32:	0f 90       	pop	r0
    6a34:	0f 90       	pop	r0
    6a36:	0f 90       	pop	r0
    6a38:	0f 90       	pop	r0
    6a3a:	08 95       	ret

00006a3c <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id, struct timespec *res)
{
    res->tv_sec = 0;
    6a3c:	fb 01       	movw	r30, r22
    6a3e:	10 82       	st	Z, r1
    6a40:	11 82       	std	Z+1, r1	; 0x01
    6a42:	12 82       	std	Z+2, r1	; 0x02
    6a44:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6a46:	80 e4       	ldi	r24, 0x40	; 64
    6a48:	92 e4       	ldi	r25, 0x42	; 66
    6a4a:	af e0       	ldi	r26, 0x0F	; 15
    6a4c:	b0 e0       	ldi	r27, 0x00	; 0
    6a4e:	84 83       	std	Z+4, r24	; 0x04
    6a50:	95 83       	std	Z+5, r25	; 0x05
    6a52:	a6 83       	std	Z+6, r26	; 0x06
    6a54:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
}
    6a56:	80 e0       	ldi	r24, 0x00	; 0
    6a58:	90 e0       	ldi	r25, 0x00	; 0
    6a5a:	08 95       	ret

00006a5c <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id, const struct timespec *ts)
{
    if(clk_id)
    6a5c:	89 2b       	or	r24, r25
    6a5e:	19 f4       	brne	.+6      	; 0x6a66 <clock_settime+0xa>
    6a60:	cb 01       	movw	r24, r22
    6a62:	1f ce       	rjmp	.-962    	; 0x66a2 <clock_settime.part.2>
    6a64:	08 95       	ret
        return(-1);
    6a66:	8f ef       	ldi	r24, 0xFF	; 255
    6a68:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6a6a:	08 95       	ret

00006a6c <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6a6c:	9c 01       	movw	r18, r24
    6a6e:	83 70       	andi	r24, 0x03	; 3
    6a70:	99 27       	eor	r25, r25
    6a72:	00 97       	sbiw	r24, 0x00	; 0
    6a74:	69 f4       	brne	.+26     	; 0x6a90 <IS_Leap+0x24>
    6a76:	2c 36       	cpi	r18, 0x6C	; 108
    6a78:	47 e0       	ldi	r20, 0x07	; 7
    6a7a:	34 07       	cpc	r19, r20
    6a7c:	59 f0       	breq	.+22     	; 0x6a94 <IS_Leap+0x28>
    6a7e:	51 e0       	ldi	r21, 0x01	; 1
    6a80:	40 e0       	ldi	r20, 0x00	; 0
    6a82:	24 33       	cpi	r18, 0x34	; 52
    6a84:	38 40       	sbci	r19, 0x08	; 8
    6a86:	09 f4       	brne	.+2      	; 0x6a8a <IS_Leap+0x1e>
    6a88:	50 e0       	ldi	r21, 0x00	; 0
    6a8a:	85 2f       	mov	r24, r21
    6a8c:	94 2f       	mov	r25, r20
    6a8e:	08 95       	ret
    6a90:	80 e0       	ldi	r24, 0x00	; 0
    6a92:	90 e0       	ldi	r25, 0x00	; 0
    6a94:	08 95       	ret

00006a96 <tm_mon_to_ascii>:
    6a96:	8c 30       	cpi	r24, 0x0C	; 12
    6a98:	91 05       	cpc	r25, r1
    6a9a:	40 f4       	brcc	.+16     	; 0x6aac <tm_mon_to_ascii+0x16>
    6a9c:	88 0f       	add	r24, r24
    6a9e:	99 1f       	adc	r25, r25
    6aa0:	fc 01       	movw	r30, r24
    6aa2:	eb 5f       	subi	r30, 0xFB	; 251
    6aa4:	fe 4f       	sbci	r31, 0xFE	; 254
    6aa6:	80 81       	ld	r24, Z
    6aa8:	91 81       	ldd	r25, Z+1	; 0x01
    6aaa:	08 95       	ret
    6aac:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <__Month+0x18>
    6ab0:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <__Month+0x19>
    6ab4:	08 95       	ret

00006ab6 <Days_Per_Month>:
    6ab6:	cf 93       	push	r28
    6ab8:	df 93       	push	r29
    6aba:	8c 30       	cpi	r24, 0x0C	; 12
    6abc:	91 05       	cpc	r25, r1
    6abe:	24 f0       	brlt	.+8      	; 0x6ac8 <Days_Per_Month+0x12>
    6ac0:	6f 5f       	subi	r22, 0xFF	; 255
    6ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    6ac4:	0c 97       	sbiw	r24, 0x0c	; 12
    6ac6:	f9 cf       	rjmp	.-14     	; 0x6aba <Days_Per_Month+0x4>
    6ac8:	97 ff       	sbrs	r25, 7
    6aca:	04 c0       	rjmp	.+8      	; 0x6ad4 <Days_Per_Month+0x1e>
    6acc:	61 50       	subi	r22, 0x01	; 1
    6ace:	71 09       	sbc	r23, r1
    6ad0:	0c 96       	adiw	r24, 0x0c	; 12
    6ad2:	fa cf       	rjmp	.-12     	; 0x6ac8 <Days_Per_Month+0x12>
    6ad4:	fc 01       	movw	r30, r24
    6ad6:	ee 0f       	add	r30, r30
    6ad8:	ff 1f       	adc	r31, r31
    6ada:	e8 51       	subi	r30, 0x18	; 24
    6adc:	fd 4f       	sbci	r31, 0xFD	; 253
    6ade:	c0 81       	ld	r28, Z
    6ae0:	d1 81       	ldd	r29, Z+1	; 0x01
    6ae2:	01 97       	sbiw	r24, 0x01	; 1
    6ae4:	29 f4       	brne	.+10     	; 0x6af0 <Days_Per_Month+0x3a>
    6ae6:	cb 01       	movw	r24, r22
    6ae8:	c1 df       	rcall	.-126    	; 0x6a6c <IS_Leap>
    6aea:	89 2b       	or	r24, r25
    6aec:	09 f0       	breq	.+2      	; 0x6af0 <Days_Per_Month+0x3a>
    6aee:	21 96       	adiw	r28, 0x01	; 1
    6af0:	ce 01       	movw	r24, r28
    6af2:	df 91       	pop	r29
    6af4:	cf 91       	pop	r28
    6af6:	08 95       	ret

00006af8 <time_to_tm>:
    6af8:	a0 e0       	ldi	r26, 0x00	; 0
    6afa:	b0 e0       	ldi	r27, 0x00	; 0
    6afc:	e2 e8       	ldi	r30, 0x82	; 130
    6afe:	f5 e3       	ldi	r31, 0x35	; 53
    6b00:	0c 94 91 e9 	jmp	0x1d322	; 0x1d322 <__prologue_saves__+0x4>
    6b04:	e8 01       	movw	r28, r16
    6b06:	e6 e1       	ldi	r30, 0x16	; 22
    6b08:	d8 01       	movw	r26, r16
    6b0a:	1d 92       	st	X+, r1
    6b0c:	ea 95       	dec	r30
    6b0e:	e9 f7       	brne	.-6      	; 0x6b0a <time_to_tm+0x12>
    6b10:	61 15       	cp	r22, r1
    6b12:	bd e5       	ldi	r27, 0x5D	; 93
    6b14:	7b 07       	cpc	r23, r27
    6b16:	bd ef       	ldi	r27, 0xFD	; 253
    6b18:	8b 07       	cpc	r24, r27
    6b1a:	bf ef       	ldi	r27, 0xFF	; 255
    6b1c:	9b 07       	cpc	r25, r27
    6b1e:	08 f0       	brcs	.+2      	; 0x6b22 <time_to_tm+0x2a>
    6b20:	c0 c0       	rjmp	.+384    	; 0x6ca2 <time_to_tm+0x1aa>
    6b22:	6b 01       	movw	r12, r22
    6b24:	7c 01       	movw	r14, r24
    6b26:	c2 1a       	sub	r12, r18
    6b28:	d3 0a       	sbc	r13, r19
    6b2a:	e4 0a       	sbc	r14, r20
    6b2c:	f5 0a       	sbc	r15, r21
    6b2e:	46 01       	movw	r8, r12
    6b30:	57 01       	movw	r10, r14
    6b32:	e0 e8       	ldi	r30, 0x80	; 128
    6b34:	ce 16       	cp	r12, r30
    6b36:	ee ea       	ldi	r30, 0xAE	; 174
    6b38:	de 06       	cpc	r13, r30
    6b3a:	ee ef       	ldi	r30, 0xFE	; 254
    6b3c:	ee 06       	cpc	r14, r30
    6b3e:	ef ef       	ldi	r30, 0xFF	; 255
    6b40:	fe 06       	cpc	r15, r30
    6b42:	50 f0       	brcs	.+20     	; 0x6b58 <time_to_tm+0x60>
    6b44:	80 e8       	ldi	r24, 0x80	; 128
    6b46:	88 0e       	add	r8, r24
    6b48:	81 e5       	ldi	r24, 0x51	; 81
    6b4a:	98 1e       	adc	r9, r24
    6b4c:	81 e0       	ldi	r24, 0x01	; 1
    6b4e:	a8 1e       	adc	r10, r24
    6b50:	b1 1c       	adc	r11, r1
    6b52:	01 e0       	ldi	r16, 0x01	; 1
    6b54:	10 e0       	ldi	r17, 0x00	; 0
    6b56:	02 c0       	rjmp	.+4      	; 0x6b5c <time_to_tm+0x64>
    6b58:	00 e0       	ldi	r16, 0x00	; 0
    6b5a:	10 e0       	ldi	r17, 0x00	; 0
    6b5c:	8c e3       	ldi	r24, 0x3C	; 60
    6b5e:	48 2e       	mov	r4, r24
    6b60:	51 2c       	mov	r5, r1
    6b62:	61 2c       	mov	r6, r1
    6b64:	71 2c       	mov	r7, r1
    6b66:	c5 01       	movw	r24, r10
    6b68:	b4 01       	movw	r22, r8
    6b6a:	a3 01       	movw	r20, r6
    6b6c:	92 01       	movw	r18, r4
    6b6e:	0e 94 22 e9 	call	0x1d244	; 0x1d244 <__udivmodsi4>
    6b72:	79 83       	std	Y+1, r23	; 0x01
    6b74:	68 83       	st	Y, r22
    6b76:	ca 01       	movw	r24, r20
    6b78:	b9 01       	movw	r22, r18
    6b7a:	a3 01       	movw	r20, r6
    6b7c:	92 01       	movw	r18, r4
    6b7e:	0e 94 22 e9 	call	0x1d244	; 0x1d244 <__udivmodsi4>
    6b82:	7b 83       	std	Y+3, r23	; 0x03
    6b84:	6a 83       	std	Y+2, r22	; 0x02
    6b86:	c5 01       	movw	r24, r10
    6b88:	b4 01       	movw	r22, r8
    6b8a:	20 e1       	ldi	r18, 0x10	; 16
    6b8c:	3e e0       	ldi	r19, 0x0E	; 14
    6b8e:	40 e0       	ldi	r20, 0x00	; 0
    6b90:	50 e0       	ldi	r21, 0x00	; 0
    6b92:	0e 94 22 e9 	call	0x1d244	; 0x1d244 <__udivmodsi4>
    6b96:	ca 01       	movw	r24, r20
    6b98:	b9 01       	movw	r22, r18
    6b9a:	28 e1       	ldi	r18, 0x18	; 24
    6b9c:	30 e0       	ldi	r19, 0x00	; 0
    6b9e:	40 e0       	ldi	r20, 0x00	; 0
    6ba0:	50 e0       	ldi	r21, 0x00	; 0
    6ba2:	0e 94 22 e9 	call	0x1d244	; 0x1d244 <__udivmodsi4>
    6ba6:	7d 83       	std	Y+5, r23	; 0x05
    6ba8:	6c 83       	std	Y+4, r22	; 0x04
    6baa:	01 15       	cp	r16, r1
    6bac:	11 05       	cpc	r17, r1
    6bae:	89 f0       	breq	.+34     	; 0x6bd2 <time_to_tm+0xda>
    6bb0:	85 e4       	ldi	r24, 0x45	; 69
    6bb2:	90 e0       	ldi	r25, 0x00	; 0
    6bb4:	9b 87       	std	Y+11, r25	; 0x0b
    6bb6:	8a 87       	std	Y+10, r24	; 0x0a
    6bb8:	8b e0       	ldi	r24, 0x0B	; 11
    6bba:	90 e0       	ldi	r25, 0x00	; 0
    6bbc:	99 87       	std	Y+9, r25	; 0x09
    6bbe:	88 87       	std	Y+8, r24	; 0x08
    6bc0:	8f e1       	ldi	r24, 0x1F	; 31
    6bc2:	90 e0       	ldi	r25, 0x00	; 0
    6bc4:	9f 83       	std	Y+7, r25	; 0x07
    6bc6:	8e 83       	std	Y+6, r24	; 0x06
    6bc8:	83 e0       	ldi	r24, 0x03	; 3
    6bca:	90 e0       	ldi	r25, 0x00	; 0
    6bcc:	9d 87       	std	Y+13, r25	; 0x0d
    6bce:	8c 87       	std	Y+12, r24	; 0x0c
    6bd0:	65 c0       	rjmp	.+202    	; 0x6c9c <time_to_tm+0x1a4>
    6bd2:	c5 01       	movw	r24, r10
    6bd4:	b4 01       	movw	r22, r8
    6bd6:	20 e8       	ldi	r18, 0x80	; 128
    6bd8:	31 e5       	ldi	r19, 0x51	; 81
    6bda:	41 e0       	ldi	r20, 0x01	; 1
    6bdc:	50 e0       	ldi	r21, 0x00	; 0
    6bde:	0e 94 22 e9 	call	0x1d244	; 0x1d244 <__udivmodsi4>
    6be2:	49 01       	movw	r8, r18
    6be4:	5a 01       	movw	r10, r20
    6be6:	ca 01       	movw	r24, r20
    6be8:	b9 01       	movw	r22, r18
    6bea:	6c 5f       	subi	r22, 0xFC	; 252
    6bec:	7f 4f       	sbci	r23, 0xFF	; 255
    6bee:	8f 4f       	sbci	r24, 0xFF	; 255
    6bf0:	9f 4f       	sbci	r25, 0xFF	; 255
    6bf2:	27 e0       	ldi	r18, 0x07	; 7
    6bf4:	30 e0       	ldi	r19, 0x00	; 0
    6bf6:	40 e0       	ldi	r20, 0x00	; 0
    6bf8:	50 e0       	ldi	r21, 0x00	; 0
    6bfa:	0e 94 44 e9 	call	0x1d288	; 0x1d288 <__divmodsi4>
    6bfe:	7d 87       	std	Y+13, r23	; 0x0d
    6c00:	6c 87       	std	Y+12, r22	; 0x0c
    6c02:	02 eb       	ldi	r16, 0xB2	; 178
    6c04:	17 e0       	ldi	r17, 0x07	; 7
    6c06:	c8 01       	movw	r24, r16
    6c08:	31 df       	rcall	.-414    	; 0x6a6c <IS_Leap>
    6c0a:	00 97       	sbiw	r24, 0x00	; 0
    6c0c:	19 f4       	brne	.+6      	; 0x6c14 <time_to_tm+0x11c>
    6c0e:	4d e6       	ldi	r20, 0x6D	; 109
    6c10:	51 e0       	ldi	r21, 0x01	; 1
    6c12:	02 c0       	rjmp	.+4      	; 0x6c18 <time_to_tm+0x120>
    6c14:	4e e6       	ldi	r20, 0x6E	; 110
    6c16:	51 e0       	ldi	r21, 0x01	; 1
    6c18:	05 2e       	mov	r0, r21
    6c1a:	00 0c       	add	r0, r0
    6c1c:	66 0b       	sbc	r22, r22
    6c1e:	77 0b       	sbc	r23, r23
    6c20:	84 16       	cp	r8, r20
    6c22:	95 06       	cpc	r9, r21
    6c24:	a6 06       	cpc	r10, r22
    6c26:	b7 06       	cpc	r11, r23
    6c28:	3c f0       	brlt	.+14     	; 0x6c38 <time_to_tm+0x140>
    6c2a:	0f 5f       	subi	r16, 0xFF	; 255
    6c2c:	1f 4f       	sbci	r17, 0xFF	; 255
    6c2e:	84 1a       	sub	r8, r20
    6c30:	95 0a       	sbc	r9, r21
    6c32:	a6 0a       	sbc	r10, r22
    6c34:	b7 0a       	sbc	r11, r23
    6c36:	e7 cf       	rjmp	.-50     	; 0x6c06 <time_to_tm+0x10e>
    6c38:	0c 56       	subi	r16, 0x6C	; 108
    6c3a:	17 40       	sbci	r17, 0x07	; 7
    6c3c:	1b 87       	std	Y+11, r17	; 0x0b
    6c3e:	0a 87       	std	Y+10, r16	; 0x0a
    6c40:	9f 86       	std	Y+15, r9	; 0x0f
    6c42:	8e 86       	std	Y+14, r8	; 0x0e
    6c44:	e8 ee       	ldi	r30, 0xE8	; 232
    6c46:	f2 e0       	ldi	r31, 0x02	; 2
    6c48:	20 e0       	ldi	r18, 0x00	; 0
    6c4a:	30 e0       	ldi	r19, 0x00	; 0
    6c4c:	18 14       	cp	r1, r8
    6c4e:	19 04       	cpc	r1, r9
    6c50:	1a 04       	cpc	r1, r10
    6c52:	1b 04       	cpc	r1, r11
    6c54:	e4 f4       	brge	.+56     	; 0x6c8e <time_to_tm+0x196>
    6c56:	2c 30       	cpi	r18, 0x0C	; 12
    6c58:	31 05       	cpc	r19, r1
    6c5a:	c9 f0       	breq	.+50     	; 0x6c8e <time_to_tm+0x196>
    6c5c:	41 91       	ld	r20, Z+
    6c5e:	51 91       	ld	r21, Z+
    6c60:	21 30       	cpi	r18, 0x01	; 1
    6c62:	31 05       	cpc	r19, r1
    6c64:	21 f4       	brne	.+8      	; 0x6c6e <time_to_tm+0x176>
    6c66:	00 97       	sbiw	r24, 0x00	; 0
    6c68:	11 f0       	breq	.+4      	; 0x6c6e <time_to_tm+0x176>
    6c6a:	4f 5f       	subi	r20, 0xFF	; 255
    6c6c:	5f 4f       	sbci	r21, 0xFF	; 255
    6c6e:	05 2e       	mov	r0, r21
    6c70:	00 0c       	add	r0, r0
    6c72:	66 0b       	sbc	r22, r22
    6c74:	77 0b       	sbc	r23, r23
    6c76:	84 16       	cp	r8, r20
    6c78:	95 06       	cpc	r9, r21
    6c7a:	a6 06       	cpc	r10, r22
    6c7c:	b7 06       	cpc	r11, r23
    6c7e:	3c f0       	brlt	.+14     	; 0x6c8e <time_to_tm+0x196>
    6c80:	84 1a       	sub	r8, r20
    6c82:	95 0a       	sbc	r9, r21
    6c84:	a6 0a       	sbc	r10, r22
    6c86:	b7 0a       	sbc	r11, r23
    6c88:	2f 5f       	subi	r18, 0xFF	; 255
    6c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    6c8c:	df cf       	rjmp	.-66     	; 0x6c4c <time_to_tm+0x154>
    6c8e:	39 87       	std	Y+9, r19	; 0x09
    6c90:	28 87       	std	Y+8, r18	; 0x08
    6c92:	af ef       	ldi	r26, 0xFF	; 255
    6c94:	8a 1a       	sub	r8, r26
    6c96:	9a 0a       	sbc	r9, r26
    6c98:	9f 82       	std	Y+7, r9	; 0x07
    6c9a:	8e 82       	std	Y+6, r8	; 0x06
    6c9c:	b6 01       	movw	r22, r12
    6c9e:	c7 01       	movw	r24, r14
    6ca0:	04 c0       	rjmp	.+8      	; 0x6caa <time_to_tm+0x1b2>
    6ca2:	6f ef       	ldi	r22, 0xFF	; 255
    6ca4:	7f ef       	ldi	r23, 0xFF	; 255
    6ca6:	8f ef       	ldi	r24, 0xFF	; 255
    6ca8:	9f ef       	ldi	r25, 0xFF	; 255
    6caa:	cd b7       	in	r28, 0x3d	; 61
    6cac:	de b7       	in	r29, 0x3e	; 62
    6cae:	e0 e1       	ldi	r30, 0x10	; 16
    6cb0:	0c 94 ad e9 	jmp	0x1d35a	; 0x1d35a <__epilogue_restores__+0x4>

00006cb4 <gmtime_r>:
    6cb4:	0f 93       	push	r16
    6cb6:	1f 93       	push	r17
    6cb8:	cf 93       	push	r28
    6cba:	df 93       	push	r29
    6cbc:	eb 01       	movw	r28, r22
    6cbe:	fc 01       	movw	r30, r24
    6cc0:	60 81       	ld	r22, Z
    6cc2:	71 81       	ldd	r23, Z+1	; 0x01
    6cc4:	82 81       	ldd	r24, Z+2	; 0x02
    6cc6:	93 81       	ldd	r25, Z+3	; 0x03
    6cc8:	8e 01       	movw	r16, r28
    6cca:	20 e0       	ldi	r18, 0x00	; 0
    6ccc:	30 e0       	ldi	r19, 0x00	; 0
    6cce:	a9 01       	movw	r20, r18
    6cd0:	13 df       	rcall	.-474    	; 0x6af8 <time_to_tm>
    6cd2:	ce 01       	movw	r24, r28
    6cd4:	df 91       	pop	r29
    6cd6:	cf 91       	pop	r28
    6cd8:	1f 91       	pop	r17
    6cda:	0f 91       	pop	r16
    6cdc:	08 95       	ret

00006cde <gmtime>:
    6cde:	28 ef       	ldi	r18, 0xF8	; 248
    6ce0:	37 e1       	ldi	r19, 0x17	; 23
    6ce2:	30 93 0f 18 	sts	0x180F, r19	; 0x80180f <p.3628+0x1>
    6ce6:	20 93 0e 18 	sts	0x180E, r18	; 0x80180e <p.3628>
    6cea:	b9 01       	movw	r22, r18
    6cec:	e3 df       	rcall	.-58     	; 0x6cb4 <gmtime_r>
    6cee:	88 ef       	ldi	r24, 0xF8	; 248
    6cf0:	97 e1       	ldi	r25, 0x17	; 23
    6cf2:	08 95       	ret

00006cf4 <gettimezone>:
    6cf4:	e5 eb       	ldi	r30, 0xB5	; 181
    6cf6:	fa e1       	ldi	r31, 0x1A	; 26
    6cf8:	20 81       	ld	r18, Z
    6cfa:	31 81       	ldd	r19, Z+1	; 0x01
    6cfc:	dc 01       	movw	r26, r24
    6cfe:	11 96       	adiw	r26, 0x01	; 1
    6d00:	3c 93       	st	X, r19
    6d02:	2e 93       	st	-X, r18
    6d04:	22 81       	ldd	r18, Z+2	; 0x02
    6d06:	33 81       	ldd	r19, Z+3	; 0x03
    6d08:	13 96       	adiw	r26, 0x03	; 3
    6d0a:	3c 93       	st	X, r19
    6d0c:	2e 93       	st	-X, r18
    6d0e:	12 97       	sbiw	r26, 0x02	; 2
    6d10:	80 e0       	ldi	r24, 0x00	; 0
    6d12:	90 e0       	ldi	r25, 0x00	; 0
    6d14:	08 95       	ret

00006d16 <settimezone>:
    6d16:	dc 01       	movw	r26, r24
    6d18:	2d 91       	ld	r18, X+
    6d1a:	3c 91       	ld	r19, X
    6d1c:	11 97       	sbiw	r26, 0x01	; 1
    6d1e:	e5 eb       	ldi	r30, 0xB5	; 181
    6d20:	fa e1       	ldi	r31, 0x1A	; 26
    6d22:	31 83       	std	Z+1, r19	; 0x01
    6d24:	20 83       	st	Z, r18
    6d26:	12 96       	adiw	r26, 0x02	; 2
    6d28:	8d 91       	ld	r24, X+
    6d2a:	9c 91       	ld	r25, X
    6d2c:	13 97       	sbiw	r26, 0x03	; 3
    6d2e:	93 83       	std	Z+3, r25	; 0x03
    6d30:	82 83       	std	Z+2, r24	; 0x02
    6d32:	80 e0       	ldi	r24, 0x00	; 0
    6d34:	90 e0       	ldi	r25, 0x00	; 0
    6d36:	08 95       	ret

00006d38 <gettimeofday>:
    6d38:	a8 e0       	ldi	r26, 0x08	; 8
    6d3a:	b0 e0       	ldi	r27, 0x00	; 0
    6d3c:	e2 ea       	ldi	r30, 0xA2	; 162
    6d3e:	f6 e3       	ldi	r31, 0x36	; 54
    6d40:	0c 94 9b e9 	jmp	0x1d336	; 0x1d336 <__prologue_saves__+0x18>
    6d44:	8c 01       	movw	r16, r24
    6d46:	7b 01       	movw	r14, r22
    6d48:	be 01       	movw	r22, r28
    6d4a:	6f 5f       	subi	r22, 0xFF	; 255
    6d4c:	7f 4f       	sbci	r23, 0xFF	; 255
    6d4e:	80 e0       	ldi	r24, 0x00	; 0
    6d50:	90 e0       	ldi	r25, 0x00	; 0
    6d52:	f5 db       	rcall	.-2070   	; 0x653e <clock_gettime>
    6d54:	89 81       	ldd	r24, Y+1	; 0x01
    6d56:	9a 81       	ldd	r25, Y+2	; 0x02
    6d58:	ab 81       	ldd	r26, Y+3	; 0x03
    6d5a:	bc 81       	ldd	r27, Y+4	; 0x04
    6d5c:	f8 01       	movw	r30, r16
    6d5e:	80 83       	st	Z, r24
    6d60:	91 83       	std	Z+1, r25	; 0x01
    6d62:	a2 83       	std	Z+2, r26	; 0x02
    6d64:	b3 83       	std	Z+3, r27	; 0x03
    6d66:	6d 81       	ldd	r22, Y+5	; 0x05
    6d68:	7e 81       	ldd	r23, Y+6	; 0x06
    6d6a:	8f 81       	ldd	r24, Y+7	; 0x07
    6d6c:	98 85       	ldd	r25, Y+8	; 0x08
    6d6e:	28 ee       	ldi	r18, 0xE8	; 232
    6d70:	33 e0       	ldi	r19, 0x03	; 3
    6d72:	40 e0       	ldi	r20, 0x00	; 0
    6d74:	50 e0       	ldi	r21, 0x00	; 0
    6d76:	0e 94 44 e9 	call	0x1d288	; 0x1d288 <__divmodsi4>
    6d7a:	f8 01       	movw	r30, r16
    6d7c:	24 83       	std	Z+4, r18	; 0x04
    6d7e:	35 83       	std	Z+5, r19	; 0x05
    6d80:	46 83       	std	Z+6, r20	; 0x06
    6d82:	57 83       	std	Z+7, r21	; 0x07
    6d84:	c7 01       	movw	r24, r14
    6d86:	b6 df       	rcall	.-148    	; 0x6cf4 <gettimezone>
    6d88:	80 e0       	ldi	r24, 0x00	; 0
    6d8a:	90 e0       	ldi	r25, 0x00	; 0
    6d8c:	28 96       	adiw	r28, 0x08	; 8
    6d8e:	e6 e0       	ldi	r30, 0x06	; 6
    6d90:	0c 94 b7 e9 	jmp	0x1d36e	; 0x1d36e <__epilogue_restores__+0x18>

00006d94 <time>:
    6d94:	cf 93       	push	r28
    6d96:	df 93       	push	r29
    6d98:	ec 01       	movw	r28, r24
    6d9a:	6a ed       	ldi	r22, 0xDA	; 218
    6d9c:	77 e1       	ldi	r23, 0x17	; 23
    6d9e:	80 e0       	ldi	r24, 0x00	; 0
    6da0:	90 e0       	ldi	r25, 0x00	; 0
    6da2:	cd db       	rcall	.-2150   	; 0x653e <clock_gettime>
    6da4:	20 97       	sbiw	r28, 0x00	; 0
    6da6:	61 f0       	breq	.+24     	; 0x6dc0 <time+0x2c>
    6da8:	80 91 da 17 	lds	r24, 0x17DA	; 0x8017da <ts.3706>
    6dac:	90 91 db 17 	lds	r25, 0x17DB	; 0x8017db <ts.3706+0x1>
    6db0:	a0 91 dc 17 	lds	r26, 0x17DC	; 0x8017dc <ts.3706+0x2>
    6db4:	b0 91 dd 17 	lds	r27, 0x17DD	; 0x8017dd <ts.3706+0x3>
    6db8:	88 83       	st	Y, r24
    6dba:	99 83       	std	Y+1, r25	; 0x01
    6dbc:	aa 83       	std	Y+2, r26	; 0x02
    6dbe:	bb 83       	std	Y+3, r27	; 0x03
    6dc0:	60 91 da 17 	lds	r22, 0x17DA	; 0x8017da <ts.3706>
    6dc4:	70 91 db 17 	lds	r23, 0x17DB	; 0x8017db <ts.3706+0x1>
    6dc8:	80 91 dc 17 	lds	r24, 0x17DC	; 0x8017dc <ts.3706+0x2>
    6dcc:	90 91 dd 17 	lds	r25, 0x17DD	; 0x8017dd <ts.3706+0x3>
    6dd0:	df 91       	pop	r29
    6dd2:	cf 91       	pop	r28
    6dd4:	08 95       	ret

00006dd6 <is_dst>:
    6dd6:	cf 92       	push	r12
    6dd8:	df 92       	push	r13
    6dda:	ef 92       	push	r14
    6ddc:	ff 92       	push	r15
    6dde:	6b 01       	movw	r12, r22
    6de0:	7c 01       	movw	r14, r24
    6de2:	ff d3       	rcall	.+2046   	; 0x75e2 <set_dst>
    6de4:	80 91 b9 1a 	lds	r24, 0x1AB9	; 0x801ab9 <dst>
    6de8:	90 91 ba 1a 	lds	r25, 0x1ABA	; 0x801aba <dst+0x1>
    6dec:	a0 91 bb 1a 	lds	r26, 0x1ABB	; 0x801abb <dst+0x2>
    6df0:	b0 91 bc 1a 	lds	r27, 0x1ABC	; 0x801abc <dst+0x3>
    6df4:	c8 16       	cp	r12, r24
    6df6:	d9 06       	cpc	r13, r25
    6df8:	ea 06       	cpc	r14, r26
    6dfa:	fb 06       	cpc	r15, r27
    6dfc:	88 f0       	brcs	.+34     	; 0x6e20 <is_dst+0x4a>
    6dfe:	81 e0       	ldi	r24, 0x01	; 1
    6e00:	90 e0       	ldi	r25, 0x00	; 0
    6e02:	40 91 bd 1a 	lds	r20, 0x1ABD	; 0x801abd <dst+0x4>
    6e06:	50 91 be 1a 	lds	r21, 0x1ABE	; 0x801abe <dst+0x5>
    6e0a:	60 91 bf 1a 	lds	r22, 0x1ABF	; 0x801abf <dst+0x6>
    6e0e:	70 91 c0 1a 	lds	r23, 0x1AC0	; 0x801ac0 <dst+0x7>
    6e12:	4c 15       	cp	r20, r12
    6e14:	5d 05       	cpc	r21, r13
    6e16:	6e 05       	cpc	r22, r14
    6e18:	7f 05       	cpc	r23, r15
    6e1a:	20 f4       	brcc	.+8      	; 0x6e24 <is_dst+0x4e>
    6e1c:	80 e0       	ldi	r24, 0x00	; 0
    6e1e:	02 c0       	rjmp	.+4      	; 0x6e24 <is_dst+0x4e>
    6e20:	80 e0       	ldi	r24, 0x00	; 0
    6e22:	90 e0       	ldi	r25, 0x00	; 0
    6e24:	ff 90       	pop	r15
    6e26:	ef 90       	pop	r14
    6e28:	df 90       	pop	r13
    6e2a:	cf 90       	pop	r12
    6e2c:	08 95       	ret

00006e2e <localtime_r>:
    6e2e:	4f 92       	push	r4
    6e30:	5f 92       	push	r5
    6e32:	6f 92       	push	r6
    6e34:	7f 92       	push	r7
    6e36:	af 92       	push	r10
    6e38:	bf 92       	push	r11
    6e3a:	cf 92       	push	r12
    6e3c:	df 92       	push	r13
    6e3e:	ef 92       	push	r14
    6e40:	ff 92       	push	r15
    6e42:	0f 93       	push	r16
    6e44:	1f 93       	push	r17
    6e46:	cf 93       	push	r28
    6e48:	df 93       	push	r29
    6e4a:	00 d0       	rcall	.+0      	; 0x6e4c <localtime_r+0x1e>
    6e4c:	00 d0       	rcall	.+0      	; 0x6e4e <localtime_r+0x20>
    6e4e:	cd b7       	in	r28, 0x3d	; 61
    6e50:	de b7       	in	r29, 0x3e	; 62
    6e52:	5b 01       	movw	r10, r22
    6e54:	fc 01       	movw	r30, r24
    6e56:	40 80       	ld	r4, Z
    6e58:	51 80       	ldd	r5, Z+1	; 0x01
    6e5a:	62 80       	ldd	r6, Z+2	; 0x02
    6e5c:	73 80       	ldd	r7, Z+3	; 0x03
    6e5e:	ce 01       	movw	r24, r28
    6e60:	01 96       	adiw	r24, 0x01	; 1
    6e62:	48 df       	rcall	.-368    	; 0x6cf4 <gettimezone>
    6e64:	a9 81       	ldd	r26, Y+1	; 0x01
    6e66:	ba 81       	ldd	r27, Y+2	; 0x02
    6e68:	2c e3       	ldi	r18, 0x3C	; 60
    6e6a:	30 e0       	ldi	r19, 0x00	; 0
    6e6c:	0e 94 69 e9 	call	0x1d2d2	; 0x1d2d2 <__usmulhisi3>
    6e70:	6b 01       	movw	r12, r22
    6e72:	7c 01       	movw	r14, r24
    6e74:	c3 01       	movw	r24, r6
    6e76:	b2 01       	movw	r22, r4
    6e78:	6c 19       	sub	r22, r12
    6e7a:	7d 09       	sbc	r23, r13
    6e7c:	8e 09       	sbc	r24, r14
    6e7e:	9f 09       	sbc	r25, r15
    6e80:	aa df       	rcall	.-172    	; 0x6dd6 <is_dst>
    6e82:	89 2b       	or	r24, r25
    6e84:	31 f0       	breq	.+12     	; 0x6e92 <localtime_r+0x64>
    6e86:	f0 e1       	ldi	r31, 0x10	; 16
    6e88:	cf 1a       	sub	r12, r31
    6e8a:	fe e0       	ldi	r31, 0x0E	; 14
    6e8c:	df 0a       	sbc	r13, r31
    6e8e:	e1 08       	sbc	r14, r1
    6e90:	f1 08       	sbc	r15, r1
    6e92:	85 01       	movw	r16, r10
    6e94:	a7 01       	movw	r20, r14
    6e96:	96 01       	movw	r18, r12
    6e98:	c3 01       	movw	r24, r6
    6e9a:	b2 01       	movw	r22, r4
    6e9c:	2d de       	rcall	.-934    	; 0x6af8 <time_to_tm>
    6e9e:	c5 01       	movw	r24, r10
    6ea0:	0f 90       	pop	r0
    6ea2:	0f 90       	pop	r0
    6ea4:	0f 90       	pop	r0
    6ea6:	0f 90       	pop	r0
    6ea8:	df 91       	pop	r29
    6eaa:	cf 91       	pop	r28
    6eac:	1f 91       	pop	r17
    6eae:	0f 91       	pop	r16
    6eb0:	ff 90       	pop	r15
    6eb2:	ef 90       	pop	r14
    6eb4:	df 90       	pop	r13
    6eb6:	cf 90       	pop	r12
    6eb8:	bf 90       	pop	r11
    6eba:	af 90       	pop	r10
    6ebc:	7f 90       	pop	r7
    6ebe:	6f 90       	pop	r6
    6ec0:	5f 90       	pop	r5
    6ec2:	4f 90       	pop	r4
    6ec4:	08 95       	ret

00006ec6 <localtime>:
    6ec6:	62 ee       	ldi	r22, 0xE2	; 226
    6ec8:	77 e1       	ldi	r23, 0x17	; 23
    6eca:	b1 cf       	rjmp	.-158    	; 0x6e2e <localtime_r>
    6ecc:	08 95       	ret

00006ece <normalize>:
    6ece:	aa e0       	ldi	r26, 0x0A	; 10
    6ed0:	b0 e0       	ldi	r27, 0x00	; 0
    6ed2:	ed e6       	ldi	r30, 0x6D	; 109
    6ed4:	f7 e3       	ldi	r31, 0x37	; 55
    6ed6:	0c 94 8f e9 	jmp	0x1d31e	; 0x1d31e <__prologue_saves__>
    6eda:	7c 01       	movw	r14, r24
    6edc:	7a 87       	std	Y+10, r23	; 0x0a
    6ede:	69 87       	std	Y+9, r22	; 0x09
    6ee0:	f7 01       	movw	r30, r14
    6ee2:	80 81       	ld	r24, Z
    6ee4:	91 81       	ldd	r25, Z+1	; 0x01
    6ee6:	8c 33       	cpi	r24, 0x3C	; 60
    6ee8:	91 05       	cpc	r25, r1
    6eea:	5c f0       	brlt	.+22     	; 0x6f02 <normalize+0x34>
    6eec:	f7 01       	movw	r30, r14
    6eee:	22 81       	ldd	r18, Z+2	; 0x02
    6ef0:	33 81       	ldd	r19, Z+3	; 0x03
    6ef2:	2f 5f       	subi	r18, 0xFF	; 255
    6ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    6ef6:	33 83       	std	Z+3, r19	; 0x03
    6ef8:	22 83       	std	Z+2, r18	; 0x02
    6efa:	cc 97       	sbiw	r24, 0x3c	; 60
    6efc:	91 83       	std	Z+1, r25	; 0x01
    6efe:	80 83       	st	Z, r24
    6f00:	ef cf       	rjmp	.-34     	; 0x6ee0 <normalize+0x12>
    6f02:	f7 01       	movw	r30, r14
    6f04:	01 90       	ld	r0, Z+
    6f06:	f0 81       	ld	r31, Z
    6f08:	e0 2d       	mov	r30, r0
    6f0a:	fe 83       	std	Y+6, r31	; 0x06
    6f0c:	ed 83       	std	Y+5, r30	; 0x05
    6f0e:	f7 ff       	sbrs	r31, 7
    6f10:	0d c0       	rjmp	.+26     	; 0x6f2c <normalize+0x5e>
    6f12:	f7 01       	movw	r30, r14
    6f14:	82 81       	ldd	r24, Z+2	; 0x02
    6f16:	93 81       	ldd	r25, Z+3	; 0x03
    6f18:	01 97       	sbiw	r24, 0x01	; 1
    6f1a:	93 83       	std	Z+3, r25	; 0x03
    6f1c:	82 83       	std	Z+2, r24	; 0x02
    6f1e:	6d 81       	ldd	r22, Y+5	; 0x05
    6f20:	7e 81       	ldd	r23, Y+6	; 0x06
    6f22:	64 5c       	subi	r22, 0xC4	; 196
    6f24:	7f 4f       	sbci	r23, 0xFF	; 255
    6f26:	71 83       	std	Z+1, r23	; 0x01
    6f28:	60 83       	st	Z, r22
    6f2a:	eb cf       	rjmp	.-42     	; 0x6f02 <normalize+0x34>
    6f2c:	f7 01       	movw	r30, r14
    6f2e:	82 81       	ldd	r24, Z+2	; 0x02
    6f30:	93 81       	ldd	r25, Z+3	; 0x03
    6f32:	8c 33       	cpi	r24, 0x3C	; 60
    6f34:	91 05       	cpc	r25, r1
    6f36:	5c f0       	brlt	.+22     	; 0x6f4e <normalize+0x80>
    6f38:	f7 01       	movw	r30, r14
    6f3a:	24 81       	ldd	r18, Z+4	; 0x04
    6f3c:	35 81       	ldd	r19, Z+5	; 0x05
    6f3e:	2f 5f       	subi	r18, 0xFF	; 255
    6f40:	3f 4f       	sbci	r19, 0xFF	; 255
    6f42:	35 83       	std	Z+5, r19	; 0x05
    6f44:	24 83       	std	Z+4, r18	; 0x04
    6f46:	cc 97       	sbiw	r24, 0x3c	; 60
    6f48:	93 83       	std	Z+3, r25	; 0x03
    6f4a:	82 83       	std	Z+2, r24	; 0x02
    6f4c:	ef cf       	rjmp	.-34     	; 0x6f2c <normalize+0x5e>
    6f4e:	f7 01       	movw	r30, r14
    6f50:	22 80       	ldd	r2, Z+2	; 0x02
    6f52:	33 80       	ldd	r3, Z+3	; 0x03
    6f54:	37 fe       	sbrs	r3, 7
    6f56:	0d c0       	rjmp	.+26     	; 0x6f72 <normalize+0xa4>
    6f58:	f7 01       	movw	r30, r14
    6f5a:	84 81       	ldd	r24, Z+4	; 0x04
    6f5c:	95 81       	ldd	r25, Z+5	; 0x05
    6f5e:	01 97       	sbiw	r24, 0x01	; 1
    6f60:	95 83       	std	Z+5, r25	; 0x05
    6f62:	84 83       	std	Z+4, r24	; 0x04
    6f64:	fc e3       	ldi	r31, 0x3C	; 60
    6f66:	2f 0e       	add	r2, r31
    6f68:	31 1c       	adc	r3, r1
    6f6a:	f7 01       	movw	r30, r14
    6f6c:	33 82       	std	Z+3, r3	; 0x03
    6f6e:	22 82       	std	Z+2, r2	; 0x02
    6f70:	ee cf       	rjmp	.-36     	; 0x6f4e <normalize+0x80>
    6f72:	f7 01       	movw	r30, r14
    6f74:	84 81       	ldd	r24, Z+4	; 0x04
    6f76:	95 81       	ldd	r25, Z+5	; 0x05
    6f78:	88 31       	cpi	r24, 0x18	; 24
    6f7a:	91 05       	cpc	r25, r1
    6f7c:	5c f0       	brlt	.+22     	; 0x6f94 <normalize+0xc6>
    6f7e:	f7 01       	movw	r30, r14
    6f80:	26 81       	ldd	r18, Z+6	; 0x06
    6f82:	37 81       	ldd	r19, Z+7	; 0x07
    6f84:	2f 5f       	subi	r18, 0xFF	; 255
    6f86:	3f 4f       	sbci	r19, 0xFF	; 255
    6f88:	37 83       	std	Z+7, r19	; 0x07
    6f8a:	26 83       	std	Z+6, r18	; 0x06
    6f8c:	48 97       	sbiw	r24, 0x18	; 24
    6f8e:	95 83       	std	Z+5, r25	; 0x05
    6f90:	84 83       	std	Z+4, r24	; 0x04
    6f92:	ef cf       	rjmp	.-34     	; 0x6f72 <normalize+0xa4>
    6f94:	f7 01       	movw	r30, r14
    6f96:	04 81       	ldd	r16, Z+4	; 0x04
    6f98:	15 81       	ldd	r17, Z+5	; 0x05
    6f9a:	17 ff       	sbrs	r17, 7
    6f9c:	0b c0       	rjmp	.+22     	; 0x6fb4 <normalize+0xe6>
    6f9e:	f7 01       	movw	r30, r14
    6fa0:	86 81       	ldd	r24, Z+6	; 0x06
    6fa2:	97 81       	ldd	r25, Z+7	; 0x07
    6fa4:	01 97       	sbiw	r24, 0x01	; 1
    6fa6:	97 83       	std	Z+7, r25	; 0x07
    6fa8:	86 83       	std	Z+6, r24	; 0x06
    6faa:	08 5e       	subi	r16, 0xE8	; 232
    6fac:	1f 4f       	sbci	r17, 0xFF	; 255
    6fae:	15 83       	std	Z+5, r17	; 0x05
    6fb0:	04 83       	std	Z+4, r16	; 0x04
    6fb2:	f0 cf       	rjmp	.-32     	; 0x6f94 <normalize+0xc6>
    6fb4:	f7 01       	movw	r30, r14
    6fb6:	80 85       	ldd	r24, Z+8	; 0x08
    6fb8:	91 85       	ldd	r25, Z+9	; 0x09
    6fba:	8c 30       	cpi	r24, 0x0C	; 12
    6fbc:	91 05       	cpc	r25, r1
    6fbe:	5c f0       	brlt	.+22     	; 0x6fd6 <normalize+0x108>
    6fc0:	f7 01       	movw	r30, r14
    6fc2:	22 85       	ldd	r18, Z+10	; 0x0a
    6fc4:	33 85       	ldd	r19, Z+11	; 0x0b
    6fc6:	2f 5f       	subi	r18, 0xFF	; 255
    6fc8:	3f 4f       	sbci	r19, 0xFF	; 255
    6fca:	33 87       	std	Z+11, r19	; 0x0b
    6fcc:	22 87       	std	Z+10, r18	; 0x0a
    6fce:	0c 97       	sbiw	r24, 0x0c	; 12
    6fd0:	91 87       	std	Z+9, r25	; 0x09
    6fd2:	80 87       	std	Z+8, r24	; 0x08
    6fd4:	ef cf       	rjmp	.-34     	; 0x6fb4 <normalize+0xe6>
    6fd6:	f7 01       	movw	r30, r14
    6fd8:	80 85       	ldd	r24, Z+8	; 0x08
    6fda:	91 85       	ldd	r25, Z+9	; 0x09
    6fdc:	97 ff       	sbrs	r25, 7
    6fde:	2d c0       	rjmp	.+90     	; 0x703a <normalize+0x16c>
    6fe0:	f7 01       	movw	r30, r14
    6fe2:	22 85       	ldd	r18, Z+10	; 0x0a
    6fe4:	33 85       	ldd	r19, Z+11	; 0x0b
    6fe6:	21 50       	subi	r18, 0x01	; 1
    6fe8:	31 09       	sbc	r19, r1
    6fea:	33 87       	std	Z+11, r19	; 0x0b
    6fec:	22 87       	std	Z+10, r18	; 0x0a
    6fee:	0c 96       	adiw	r24, 0x0c	; 12
    6ff0:	91 87       	std	Z+9, r25	; 0x09
    6ff2:	80 87       	std	Z+8, r24	; 0x08
    6ff4:	f0 cf       	rjmp	.-32     	; 0x6fd6 <normalize+0x108>
    6ff6:	f7 01       	movw	r30, r14
    6ff8:	c6 80       	ldd	r12, Z+6	; 0x06
    6ffa:	d7 80       	ldd	r13, Z+7	; 0x07
    6ffc:	a0 84       	ldd	r10, Z+8	; 0x08
    6ffe:	b1 84       	ldd	r11, Z+9	; 0x09
    7000:	b4 01       	movw	r22, r8
    7002:	c5 01       	movw	r24, r10
    7004:	58 dd       	rcall	.-1360   	; 0x6ab6 <Days_Per_Month>
    7006:	8c 15       	cp	r24, r12
    7008:	9d 05       	cpc	r25, r13
    700a:	84 f5       	brge	.+96     	; 0x706c <normalize+0x19e>
    700c:	c8 1a       	sub	r12, r24
    700e:	d9 0a       	sbc	r13, r25
    7010:	f7 01       	movw	r30, r14
    7012:	d7 82       	std	Z+7, r13	; 0x07
    7014:	c6 82       	std	Z+6, r12	; 0x06
    7016:	c5 01       	movw	r24, r10
    7018:	01 96       	adiw	r24, 0x01	; 1
    701a:	91 87       	std	Z+9, r25	; 0x09
    701c:	80 87       	std	Z+8, r24	; 0x08
    701e:	0c 97       	sbiw	r24, 0x0c	; 12
    7020:	54 f3       	brlt	.-44     	; 0x6ff6 <normalize+0x128>
    7022:	fb e0       	ldi	r31, 0x0B	; 11
    7024:	af 1a       	sub	r10, r31
    7026:	b1 08       	sbc	r11, r1
    7028:	f7 01       	movw	r30, r14
    702a:	b1 86       	std	Z+9, r11	; 0x09
    702c:	a0 86       	std	Z+8, r10	; 0x08
    702e:	ff ef       	ldi	r31, 0xFF	; 255
    7030:	8f 1a       	sub	r8, r31
    7032:	9f 0a       	sbc	r9, r31
    7034:	f7 01       	movw	r30, r14
    7036:	93 86       	std	Z+11, r9	; 0x0b
    7038:	82 86       	std	Z+10, r8	; 0x0a
    703a:	f7 01       	movw	r30, r14
    703c:	82 84       	ldd	r8, Z+10	; 0x0a
    703e:	93 84       	ldd	r9, Z+11	; 0x0b
    7040:	da cf       	rjmp	.-76     	; 0x6ff6 <normalize+0x128>
    7042:	f7 01       	movw	r30, r14
    7044:	80 85       	ldd	r24, Z+8	; 0x08
    7046:	91 85       	ldd	r25, Z+9	; 0x09
    7048:	9c 01       	movw	r18, r24
    704a:	21 50       	subi	r18, 0x01	; 1
    704c:	31 09       	sbc	r19, r1
    704e:	37 fd       	sbrc	r19, 7
    7050:	16 c0       	rjmp	.+44     	; 0x707e <normalize+0x1b0>
    7052:	31 87       	std	Z+9, r19	; 0x09
    7054:	20 87       	std	Z+8, r18	; 0x08
    7056:	f7 01       	movw	r30, r14
    7058:	62 85       	ldd	r22, Z+10	; 0x0a
    705a:	73 85       	ldd	r23, Z+11	; 0x0b
    705c:	80 85       	ldd	r24, Z+8	; 0x08
    705e:	91 85       	ldd	r25, Z+9	; 0x09
    7060:	2a dd       	rcall	.-1452   	; 0x6ab6 <Days_Per_Month>
    7062:	88 0d       	add	r24, r8
    7064:	99 1d       	adc	r25, r9
    7066:	f7 01       	movw	r30, r14
    7068:	97 83       	std	Z+7, r25	; 0x07
    706a:	86 83       	std	Z+6, r24	; 0x06
    706c:	f7 01       	movw	r30, r14
    706e:	86 80       	ldd	r8, Z+6	; 0x06
    7070:	97 80       	ldd	r9, Z+7	; 0x07
    7072:	a2 84       	ldd	r10, Z+10	; 0x0a
    7074:	b3 84       	ldd	r11, Z+11	; 0x0b
    7076:	18 14       	cp	r1, r8
    7078:	19 04       	cpc	r1, r9
    707a:	1c f7       	brge	.-58     	; 0x7042 <normalize+0x174>
    707c:	0b c0       	rjmp	.+22     	; 0x7094 <normalize+0x1c6>
    707e:	0b 96       	adiw	r24, 0x0b	; 11
    7080:	f7 01       	movw	r30, r14
    7082:	91 87       	std	Z+9, r25	; 0x09
    7084:	80 87       	std	Z+8, r24	; 0x08
    7086:	f1 e0       	ldi	r31, 0x01	; 1
    7088:	af 1a       	sub	r10, r31
    708a:	b1 08       	sbc	r11, r1
    708c:	f7 01       	movw	r30, r14
    708e:	b3 86       	std	Z+11, r11	; 0x0b
    7090:	a2 86       	std	Z+10, r10	; 0x0a
    7092:	e1 cf       	rjmp	.-62     	; 0x7056 <normalize+0x188>
    7094:	a5 01       	movw	r20, r10
    7096:	44 59       	subi	r20, 0x94	; 148
    7098:	58 4f       	sbci	r21, 0xF8	; 248
    709a:	58 87       	std	Y+8, r21	; 0x08
    709c:	4f 83       	std	Y+7, r20	; 0x07
    709e:	35 01       	movw	r6, r10
    70a0:	56 e4       	ldi	r21, 0x46	; 70
    70a2:	65 1a       	sub	r6, r21
    70a4:	71 08       	sbc	r7, r1
    70a6:	89 e8       	ldi	r24, 0x89	; 137
    70a8:	68 16       	cp	r6, r24
    70aa:	71 04       	cpc	r7, r1
    70ac:	08 f0       	brcs	.+2      	; 0x70b0 <normalize+0x1e2>
    70ae:	9b c0       	rjmp	.+310    	; 0x71e6 <normalize+0x318>
    70b0:	c0 84       	ldd	r12, Z+8	; 0x08
    70b2:	d1 84       	ldd	r13, Z+9	; 0x09
    70b4:	9c e0       	ldi	r25, 0x0C	; 12
    70b6:	c9 16       	cp	r12, r25
    70b8:	d1 04       	cpc	r13, r1
    70ba:	08 f0       	brcs	.+2      	; 0x70be <normalize+0x1f0>
    70bc:	94 c0       	rjmp	.+296    	; 0x71e6 <normalize+0x318>
    70be:	24 01       	movw	r4, r8
    70c0:	e1 e0       	ldi	r30, 0x01	; 1
    70c2:	4e 1a       	sub	r4, r30
    70c4:	51 08       	sbc	r5, r1
    70c6:	6f 81       	ldd	r22, Y+7	; 0x07
    70c8:	78 85       	ldd	r23, Y+8	; 0x08
    70ca:	c6 01       	movw	r24, r12
    70cc:	f4 dc       	rcall	.-1560   	; 0x6ab6 <Days_Per_Month>
    70ce:	48 16       	cp	r4, r24
    70d0:	59 06       	cpc	r5, r25
    70d2:	0c f0       	brlt	.+2      	; 0x70d6 <normalize+0x208>
    70d4:	88 c0       	rjmp	.+272    	; 0x71e6 <normalize+0x318>
    70d6:	08 31       	cpi	r16, 0x18	; 24
    70d8:	11 05       	cpc	r17, r1
    70da:	0c f0       	brlt	.+2      	; 0x70de <normalize+0x210>
    70dc:	84 c0       	rjmp	.+264    	; 0x71e6 <normalize+0x318>
    70de:	fc e3       	ldi	r31, 0x3C	; 60
    70e0:	2f 16       	cp	r2, r31
    70e2:	31 04       	cpc	r3, r1
    70e4:	0c f0       	brlt	.+2      	; 0x70e8 <normalize+0x21a>
    70e6:	7f c0       	rjmp	.+254    	; 0x71e6 <normalize+0x318>
    70e8:	4d 81       	ldd	r20, Y+5	; 0x05
    70ea:	5e 81       	ldd	r21, Y+6	; 0x06
    70ec:	4c 33       	cpi	r20, 0x3C	; 60
    70ee:	51 05       	cpc	r21, r1
    70f0:	0c f0       	brlt	.+2      	; 0x70f4 <normalize+0x226>
    70f2:	79 c0       	rjmp	.+242    	; 0x71e6 <normalize+0x318>
    70f4:	2d e6       	ldi	r18, 0x6D	; 109
    70f6:	31 e0       	ldi	r19, 0x01	; 1
    70f8:	d3 01       	movw	r26, r6
    70fa:	0e 94 69 e9 	call	0x1d2d2	; 0x1d2d2 <__usmulhisi3>
    70fe:	f6 01       	movw	r30, r12
    7100:	ee 0f       	add	r30, r30
    7102:	ff 1f       	adc	r31, r31
    7104:	e0 50       	subi	r30, 0x00	; 0
    7106:	fd 4f       	sbci	r31, 0xFD	; 253
    7108:	20 81       	ld	r18, Z
    710a:	31 81       	ldd	r19, Z+1	; 0x01
    710c:	dc 01       	movw	r26, r24
    710e:	cb 01       	movw	r24, r22
    7110:	82 0f       	add	r24, r18
    7112:	93 1f       	adc	r25, r19
    7114:	a1 1d       	adc	r26, r1
    7116:	b1 1d       	adc	r27, r1
    7118:	05 2c       	mov	r0, r5
    711a:	00 0c       	add	r0, r0
    711c:	66 08       	sbc	r6, r6
    711e:	77 08       	sbc	r7, r7
    7120:	48 0e       	add	r4, r24
    7122:	59 1e       	adc	r5, r25
    7124:	6a 1e       	adc	r6, r26
    7126:	7b 1e       	adc	r7, r27
    7128:	1a 14       	cp	r1, r10
    712a:	1b 04       	cpc	r1, r11
    712c:	1c f4       	brge	.+6      	; 0x7134 <normalize+0x266>
    712e:	51 e0       	ldi	r21, 0x01	; 1
    7130:	a5 1a       	sub	r10, r21
    7132:	b1 08       	sbc	r11, r1
    7134:	45 01       	movw	r8, r10
    7136:	95 94       	asr	r9
    7138:	87 94       	ror	r8
    713a:	95 94       	asr	r9
    713c:	87 94       	ror	r8
    713e:	88 ec       	ldi	r24, 0xC8	; 200
    7140:	a8 16       	cp	r10, r24
    7142:	b1 04       	cpc	r11, r1
    7144:	1c f0       	brlt	.+6      	; 0x714c <normalize+0x27e>
    7146:	91 e0       	ldi	r25, 0x01	; 1
    7148:	89 1a       	sub	r8, r25
    714a:	91 08       	sbc	r9, r1
    714c:	09 2c       	mov	r0, r9
    714e:	00 0c       	add	r0, r0
    7150:	aa 08       	sbc	r10, r10
    7152:	bb 08       	sbc	r11, r11
    7154:	84 0c       	add	r8, r4
    7156:	95 1c       	adc	r9, r5
    7158:	a6 1c       	adc	r10, r6
    715a:	b7 1c       	adc	r11, r7
    715c:	24 01       	movw	r4, r8
    715e:	35 01       	movw	r6, r10
    7160:	e1 e1       	ldi	r30, 0x11	; 17
    7162:	4e 1a       	sub	r4, r30
    7164:	51 08       	sbc	r5, r1
    7166:	61 08       	sbc	r6, r1
    7168:	71 08       	sbc	r7, r1
    716a:	f2 e0       	ldi	r31, 0x02	; 2
    716c:	cf 16       	cp	r12, r31
    716e:	d1 04       	cpc	r13, r1
    7170:	64 f0       	brlt	.+24     	; 0x718a <normalize+0x2bc>
    7172:	8f 81       	ldd	r24, Y+7	; 0x07
    7174:	98 85       	ldd	r25, Y+8	; 0x08
    7176:	7a dc       	rcall	.-1804   	; 0x6a6c <IS_Leap>
    7178:	89 2b       	or	r24, r25
    717a:	39 f0       	breq	.+14     	; 0x718a <normalize+0x2bc>
    717c:	24 01       	movw	r4, r8
    717e:	35 01       	movw	r6, r10
    7180:	40 e1       	ldi	r20, 0x10	; 16
    7182:	44 1a       	sub	r4, r20
    7184:	51 08       	sbc	r5, r1
    7186:	61 08       	sbc	r6, r1
    7188:	71 08       	sbc	r7, r1
    718a:	a8 e1       	ldi	r26, 0x18	; 24
    718c:	b0 e0       	ldi	r27, 0x00	; 0
    718e:	a3 01       	movw	r20, r6
    7190:	92 01       	movw	r18, r4
    7192:	0e 94 6f e9 	call	0x1d2de	; 0x1d2de <__muluhisi3>
    7196:	01 2e       	mov	r0, r17
    7198:	00 0c       	add	r0, r0
    719a:	22 0b       	sbc	r18, r18
    719c:	33 0b       	sbc	r19, r19
    719e:	a9 01       	movw	r20, r18
    71a0:	98 01       	movw	r18, r16
    71a2:	26 0f       	add	r18, r22
    71a4:	37 1f       	adc	r19, r23
    71a6:	48 1f       	adc	r20, r24
    71a8:	59 1f       	adc	r21, r25
    71aa:	ac e3       	ldi	r26, 0x3C	; 60
    71ac:	b0 e0       	ldi	r27, 0x00	; 0
    71ae:	0e 94 6f e9 	call	0x1d2de	; 0x1d2de <__muluhisi3>
    71b2:	81 01       	movw	r16, r2
    71b4:	03 2c       	mov	r0, r3
    71b6:	00 0c       	add	r0, r0
    71b8:	22 0b       	sbc	r18, r18
    71ba:	33 0b       	sbc	r19, r19
    71bc:	a9 01       	movw	r20, r18
    71be:	98 01       	movw	r18, r16
    71c0:	26 0f       	add	r18, r22
    71c2:	37 1f       	adc	r19, r23
    71c4:	48 1f       	adc	r20, r24
    71c6:	59 1f       	adc	r21, r25
    71c8:	0e 94 6f e9 	call	0x1d2de	; 0x1d2de <__muluhisi3>
    71cc:	ed 81       	ldd	r30, Y+5	; 0x05
    71ce:	fe 81       	ldd	r31, Y+6	; 0x06
    71d0:	8f 01       	movw	r16, r30
    71d2:	ff 0f       	add	r31, r31
    71d4:	22 0b       	sbc	r18, r18
    71d6:	33 0b       	sbc	r19, r19
    71d8:	48 01       	movw	r8, r16
    71da:	59 01       	movw	r10, r18
    71dc:	86 0e       	add	r8, r22
    71de:	97 1e       	adc	r9, r23
    71e0:	a8 1e       	adc	r10, r24
    71e2:	b9 1e       	adc	r11, r25
    71e4:	04 c0       	rjmp	.+8      	; 0x71ee <normalize+0x320>
    71e6:	88 24       	eor	r8, r8
    71e8:	8a 94       	dec	r8
    71ea:	98 2c       	mov	r9, r8
    71ec:	54 01       	movw	r10, r8
    71ee:	49 85       	ldd	r20, Y+9	; 0x09
    71f0:	5a 85       	ldd	r21, Y+10	; 0x0a
    71f2:	45 2b       	or	r20, r21
    71f4:	e9 f0       	breq	.+58     	; 0x7230 <normalize+0x362>
    71f6:	ce 01       	movw	r24, r28
    71f8:	01 96       	adiw	r24, 0x01	; 1
    71fa:	7c dd       	rcall	.-1288   	; 0x6cf4 <gettimezone>
    71fc:	a9 81       	ldd	r26, Y+1	; 0x01
    71fe:	ba 81       	ldd	r27, Y+2	; 0x02
    7200:	2c e3       	ldi	r18, 0x3C	; 60
    7202:	30 e0       	ldi	r19, 0x00	; 0
    7204:	0e 94 69 e9 	call	0x1d2d2	; 0x1d2d2 <__usmulhisi3>
    7208:	2b 01       	movw	r4, r22
    720a:	3c 01       	movw	r6, r24
    720c:	c5 01       	movw	r24, r10
    720e:	b4 01       	movw	r22, r8
    7210:	e2 dd       	rcall	.-1084   	; 0x6dd6 <is_dst>
    7212:	89 2b       	or	r24, r25
    7214:	51 f0       	breq	.+20     	; 0x722a <normalize+0x35c>
    7216:	50 e1       	ldi	r21, 0x10	; 16
    7218:	45 1a       	sub	r4, r21
    721a:	5e e0       	ldi	r21, 0x0E	; 14
    721c:	55 0a       	sbc	r5, r21
    721e:	61 08       	sbc	r6, r1
    7220:	71 08       	sbc	r7, r1
    7222:	cc 24       	eor	r12, r12
    7224:	c3 94       	inc	r12
    7226:	d1 2c       	mov	r13, r1
    7228:	08 c0       	rjmp	.+16     	; 0x723a <normalize+0x36c>
    722a:	c1 2c       	mov	r12, r1
    722c:	d1 2c       	mov	r13, r1
    722e:	05 c0       	rjmp	.+10     	; 0x723a <normalize+0x36c>
    7230:	c1 2c       	mov	r12, r1
    7232:	d1 2c       	mov	r13, r1
    7234:	41 2c       	mov	r4, r1
    7236:	51 2c       	mov	r5, r1
    7238:	32 01       	movw	r6, r4
    723a:	87 01       	movw	r16, r14
    723c:	a3 01       	movw	r20, r6
    723e:	92 01       	movw	r18, r4
    7240:	c5 01       	movw	r24, r10
    7242:	b4 01       	movw	r22, r8
    7244:	59 dc       	rcall	.-1870   	; 0x6af8 <time_to_tm>
    7246:	c1 14       	cp	r12, r1
    7248:	d1 04       	cpc	r13, r1
    724a:	29 f0       	breq	.+10     	; 0x7256 <normalize+0x388>
    724c:	21 e0       	ldi	r18, 0x01	; 1
    724e:	30 e0       	ldi	r19, 0x00	; 0
    7250:	f7 01       	movw	r30, r14
    7252:	31 8b       	std	Z+17, r19	; 0x11
    7254:	20 8b       	std	Z+16, r18	; 0x10
    7256:	2a 96       	adiw	r28, 0x0a	; 10
    7258:	e2 e1       	ldi	r30, 0x12	; 18
    725a:	0c 94 ab e9 	jmp	0x1d356	; 0x1d356 <__epilogue_restores__>

0000725e <timegm>:
    725e:	60 e0       	ldi	r22, 0x00	; 0
    7260:	70 e0       	ldi	r23, 0x00	; 0
    7262:	35 ce       	rjmp	.-918    	; 0x6ece <normalize>
    7264:	08 95       	ret

00007266 <setdate_r>:
    7266:	cf 92       	push	r12
    7268:	df 92       	push	r13
    726a:	ef 92       	push	r14
    726c:	ff 92       	push	r15
    726e:	cf 93       	push	r28
    7270:	df 93       	push	r29
    7272:	cd b7       	in	r28, 0x3d	; 61
    7274:	de b7       	in	r29, 0x3e	; 62
    7276:	a0 97       	sbiw	r28, 0x20	; 32
    7278:	0f b6       	in	r0, 0x3f	; 63
    727a:	f8 94       	cli
    727c:	de bf       	out	0x3e, r29	; 62
    727e:	0f be       	out	0x3f, r0	; 63
    7280:	cd bf       	out	0x3d, r28	; 61
    7282:	98 a3       	std	Y+32, r25	; 0x20
    7284:	8f 8f       	std	Y+31, r24	; 0x1f
    7286:	1a 82       	std	Y+2, r1	; 0x02
    7288:	19 82       	std	Y+1, r1	; 0x01
    728a:	1c 82       	std	Y+4, r1	; 0x04
    728c:	1b 82       	std	Y+3, r1	; 0x03
    728e:	1e 82       	std	Y+6, r1	; 0x06
    7290:	1d 82       	std	Y+5, r1	; 0x05
    7292:	18 86       	std	Y+8, r1	; 0x08
    7294:	1f 82       	std	Y+7, r1	; 0x07
    7296:	1a 86       	std	Y+10, r1	; 0x0a
    7298:	19 86       	std	Y+9, r1	; 0x09
    729a:	1c 86       	std	Y+12, r1	; 0x0c
    729c:	1b 86       	std	Y+11, r1	; 0x0b
    729e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    72a0:	98 a1       	ldd	r25, Y+32	; 0x20
    72a2:	fc 01       	movw	r30, r24
    72a4:	20 81       	ld	r18, Z
    72a6:	20 32       	cpi	r18, 0x20	; 32
    72a8:	21 f4       	brne	.+8      	; 0x72b2 <setdate_r+0x4c>
    72aa:	01 96       	adiw	r24, 0x01	; 1
    72ac:	98 a3       	std	Y+32, r25	; 0x20
    72ae:	8f 8f       	std	Y+31, r24	; 0x1f
    72b0:	f6 cf       	rjmp	.-20     	; 0x729e <setdate_r+0x38>
    72b2:	4a e0       	ldi	r20, 0x0A	; 10
    72b4:	50 e0       	ldi	r21, 0x00	; 0
    72b6:	be 01       	movw	r22, r28
    72b8:	61 5e       	subi	r22, 0xE1	; 225
    72ba:	7f 4f       	sbci	r23, 0xFF	; 255
    72bc:	0e 94 49 45 	call	0x8a92	; 0x8a92 <strtol>
    72c0:	7c 87       	std	Y+12, r23	; 0x0c
    72c2:	6b 87       	std	Y+11, r22	; 0x0b
    72c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    72c6:	98 a1       	ldd	r25, Y+32	; 0x20
    72c8:	fc 01       	movw	r30, r24
    72ca:	20 81       	ld	r18, Z
    72cc:	20 32       	cpi	r18, 0x20	; 32
    72ce:	21 f4       	brne	.+8      	; 0x72d8 <setdate_r+0x72>
    72d0:	01 96       	adiw	r24, 0x01	; 1
    72d2:	98 a3       	std	Y+32, r25	; 0x20
    72d4:	8f 8f       	std	Y+31, r24	; 0x1f
    72d6:	f6 cf       	rjmp	.-20     	; 0x72c4 <setdate_r+0x5e>
    72d8:	4a e0       	ldi	r20, 0x0A	; 10
    72da:	50 e0       	ldi	r21, 0x00	; 0
    72dc:	be 01       	movw	r22, r28
    72de:	61 5e       	subi	r22, 0xE1	; 225
    72e0:	7f 4f       	sbci	r23, 0xFF	; 255
    72e2:	0e 94 49 45 	call	0x8a92	; 0x8a92 <strtol>
    72e6:	7a 87       	std	Y+10, r23	; 0x0a
    72e8:	69 87       	std	Y+9, r22	; 0x09
    72ea:	8f 8d       	ldd	r24, Y+31	; 0x1f
    72ec:	98 a1       	ldd	r25, Y+32	; 0x20
    72ee:	fc 01       	movw	r30, r24
    72f0:	20 81       	ld	r18, Z
    72f2:	20 32       	cpi	r18, 0x20	; 32
    72f4:	21 f4       	brne	.+8      	; 0x72fe <setdate_r+0x98>
    72f6:	01 96       	adiw	r24, 0x01	; 1
    72f8:	98 a3       	std	Y+32, r25	; 0x20
    72fa:	8f 8f       	std	Y+31, r24	; 0x1f
    72fc:	f6 cf       	rjmp	.-20     	; 0x72ea <setdate_r+0x84>
    72fe:	4a e0       	ldi	r20, 0x0A	; 10
    7300:	50 e0       	ldi	r21, 0x00	; 0
    7302:	be 01       	movw	r22, r28
    7304:	61 5e       	subi	r22, 0xE1	; 225
    7306:	7f 4f       	sbci	r23, 0xFF	; 255
    7308:	0e 94 49 45 	call	0x8a92	; 0x8a92 <strtol>
    730c:	78 87       	std	Y+8, r23	; 0x08
    730e:	6f 83       	std	Y+7, r22	; 0x07
    7310:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7312:	98 a1       	ldd	r25, Y+32	; 0x20
    7314:	fc 01       	movw	r30, r24
    7316:	20 81       	ld	r18, Z
    7318:	20 32       	cpi	r18, 0x20	; 32
    731a:	21 f4       	brne	.+8      	; 0x7324 <setdate_r+0xbe>
    731c:	01 96       	adiw	r24, 0x01	; 1
    731e:	98 a3       	std	Y+32, r25	; 0x20
    7320:	8f 8f       	std	Y+31, r24	; 0x1f
    7322:	f6 cf       	rjmp	.-20     	; 0x7310 <setdate_r+0xaa>
    7324:	4a e0       	ldi	r20, 0x0A	; 10
    7326:	50 e0       	ldi	r21, 0x00	; 0
    7328:	be 01       	movw	r22, r28
    732a:	61 5e       	subi	r22, 0xE1	; 225
    732c:	7f 4f       	sbci	r23, 0xFF	; 255
    732e:	0e 94 49 45 	call	0x8a92	; 0x8a92 <strtol>
    7332:	7e 83       	std	Y+6, r23	; 0x06
    7334:	6d 83       	std	Y+5, r22	; 0x05
    7336:	ef 8d       	ldd	r30, Y+31	; 0x1f
    7338:	f8 a1       	ldd	r31, Y+32	; 0x20
    733a:	80 81       	ld	r24, Z
    733c:	88 23       	and	r24, r24
    733e:	39 f0       	breq	.+14     	; 0x734e <setdate_r+0xe8>
    7340:	80 32       	cpi	r24, 0x20	; 32
    7342:	11 f0       	breq	.+4      	; 0x7348 <setdate_r+0xe2>
    7344:	8a 33       	cpi	r24, 0x3A	; 58
    7346:	19 f4       	brne	.+6      	; 0x734e <setdate_r+0xe8>
    7348:	31 96       	adiw	r30, 0x01	; 1
    734a:	f8 a3       	std	Y+32, r31	; 0x20
    734c:	ef 8f       	std	Y+31, r30	; 0x1f
    734e:	4a e0       	ldi	r20, 0x0A	; 10
    7350:	50 e0       	ldi	r21, 0x00	; 0
    7352:	be 01       	movw	r22, r28
    7354:	61 5e       	subi	r22, 0xE1	; 225
    7356:	7f 4f       	sbci	r23, 0xFF	; 255
    7358:	8f 8d       	ldd	r24, Y+31	; 0x1f
    735a:	98 a1       	ldd	r25, Y+32	; 0x20
    735c:	0e 94 49 45 	call	0x8a92	; 0x8a92 <strtol>
    7360:	7c 83       	std	Y+4, r23	; 0x04
    7362:	6b 83       	std	Y+3, r22	; 0x03
    7364:	ef 8d       	ldd	r30, Y+31	; 0x1f
    7366:	f8 a1       	ldd	r31, Y+32	; 0x20
    7368:	80 81       	ld	r24, Z
    736a:	88 23       	and	r24, r24
    736c:	39 f0       	breq	.+14     	; 0x737c <setdate_r+0x116>
    736e:	80 32       	cpi	r24, 0x20	; 32
    7370:	11 f0       	breq	.+4      	; 0x7376 <setdate_r+0x110>
    7372:	8a 33       	cpi	r24, 0x3A	; 58
    7374:	19 f4       	brne	.+6      	; 0x737c <setdate_r+0x116>
    7376:	31 96       	adiw	r30, 0x01	; 1
    7378:	f8 a3       	std	Y+32, r31	; 0x20
    737a:	ef 8f       	std	Y+31, r30	; 0x1f
    737c:	4a e0       	ldi	r20, 0x0A	; 10
    737e:	50 e0       	ldi	r21, 0x00	; 0
    7380:	be 01       	movw	r22, r28
    7382:	61 5e       	subi	r22, 0xE1	; 225
    7384:	7f 4f       	sbci	r23, 0xFF	; 255
    7386:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7388:	98 a1       	ldd	r25, Y+32	; 0x20
    738a:	0e 94 49 45 	call	0x8a92	; 0x8a92 <strtol>
    738e:	7a 83       	std	Y+2, r23	; 0x02
    7390:	69 83       	std	Y+1, r22	; 0x01
    7392:	29 85       	ldd	r18, Y+9	; 0x09
    7394:	3a 85       	ldd	r19, Y+10	; 0x0a
    7396:	21 50       	subi	r18, 0x01	; 1
    7398:	31 09       	sbc	r19, r1
    739a:	3a 87       	std	Y+10, r19	; 0x0a
    739c:	29 87       	std	Y+9, r18	; 0x09
    739e:	8b 85       	ldd	r24, Y+11	; 0x0b
    73a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    73a2:	ac 01       	movw	r20, r24
    73a4:	42 5b       	subi	r20, 0xB2	; 178
    73a6:	57 40       	sbci	r21, 0x07	; 7
    73a8:	45 34       	cpi	r20, 0x45	; 69
    73aa:	51 05       	cpc	r21, r1
    73ac:	28 f0       	brcs	.+10     	; 0x73b8 <setdate_r+0x152>
    73ae:	9f 93       	push	r25
    73b0:	8f 93       	push	r24
    73b2:	8c e6       	ldi	r24, 0x6C	; 108
    73b4:	97 e0       	ldi	r25, 0x07	; 7
    73b6:	2c c0       	rjmp	.+88     	; 0x7410 <setdate_r+0x1aa>
    73b8:	8c 56       	subi	r24, 0x6C	; 108
    73ba:	97 40       	sbci	r25, 0x07	; 7
    73bc:	9c 87       	std	Y+12, r25	; 0x0c
    73be:	8b 87       	std	Y+11, r24	; 0x0b
    73c0:	2c 30       	cpi	r18, 0x0C	; 12
    73c2:	31 05       	cpc	r19, r1
    73c4:	28 f0       	brcs	.+10     	; 0x73d0 <setdate_r+0x16a>
    73c6:	9f 93       	push	r25
    73c8:	8f 93       	push	r24
    73ca:	8b e5       	ldi	r24, 0x5B	; 91
    73cc:	97 e0       	ldi	r25, 0x07	; 7
    73ce:	20 c0       	rjmp	.+64     	; 0x7410 <setdate_r+0x1aa>
    73d0:	8f 81       	ldd	r24, Y+7	; 0x07
    73d2:	98 85       	ldd	r25, Y+8	; 0x08
    73d4:	9c 01       	movw	r18, r24
    73d6:	21 50       	subi	r18, 0x01	; 1
    73d8:	31 09       	sbc	r19, r1
    73da:	2f 31       	cpi	r18, 0x1F	; 31
    73dc:	31 05       	cpc	r19, r1
    73de:	28 f0       	brcs	.+10     	; 0x73ea <setdate_r+0x184>
    73e0:	9f 93       	push	r25
    73e2:	8f 93       	push	r24
    73e4:	8a e4       	ldi	r24, 0x4A	; 74
    73e6:	97 e0       	ldi	r25, 0x07	; 7
    73e8:	13 c0       	rjmp	.+38     	; 0x7410 <setdate_r+0x1aa>
    73ea:	8d 81       	ldd	r24, Y+5	; 0x05
    73ec:	9e 81       	ldd	r25, Y+6	; 0x06
    73ee:	88 31       	cpi	r24, 0x18	; 24
    73f0:	91 05       	cpc	r25, r1
    73f2:	28 f0       	brcs	.+10     	; 0x73fe <setdate_r+0x198>
    73f4:	9f 93       	push	r25
    73f6:	8f 93       	push	r24
    73f8:	88 e3       	ldi	r24, 0x38	; 56
    73fa:	97 e0       	ldi	r25, 0x07	; 7
    73fc:	09 c0       	rjmp	.+18     	; 0x7410 <setdate_r+0x1aa>
    73fe:	8b 81       	ldd	r24, Y+3	; 0x03
    7400:	9c 81       	ldd	r25, Y+4	; 0x04
    7402:	8c 33       	cpi	r24, 0x3C	; 60
    7404:	91 05       	cpc	r25, r1
    7406:	78 f0       	brcs	.+30     	; 0x7426 <setdate_r+0x1c0>
    7408:	9f 93       	push	r25
    740a:	8f 93       	push	r24
    740c:	87 e2       	ldi	r24, 0x27	; 39
    740e:	97 e0       	ldi	r25, 0x07	; 7
    7410:	1f 92       	push	r1
    7412:	9f 93       	push	r25
    7414:	8f 93       	push	r24
    7416:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    741a:	0f 90       	pop	r0
    741c:	0f 90       	pop	r0
    741e:	0f 90       	pop	r0
    7420:	0f 90       	pop	r0
    7422:	0f 90       	pop	r0
    7424:	25 c0       	rjmp	.+74     	; 0x7470 <setdate_r+0x20a>
    7426:	ce 01       	movw	r24, r28
    7428:	01 96       	adiw	r24, 0x01	; 1
    742a:	19 df       	rcall	.-462    	; 0x725e <timegm>
    742c:	6b 01       	movw	r12, r22
    742e:	7c 01       	movw	r14, r24
    7430:	6f 8b       	std	Y+23, r22	; 0x17
    7432:	78 8f       	std	Y+24, r23	; 0x18
    7434:	89 8f       	std	Y+25, r24	; 0x19
    7436:	9a 8f       	std	Y+26, r25	; 0x1a
    7438:	1b 8e       	std	Y+27, r1	; 0x1b
    743a:	1c 8e       	std	Y+28, r1	; 0x1c
    743c:	1d 8e       	std	Y+29, r1	; 0x1d
    743e:	1e 8e       	std	Y+30, r1	; 0x1e
    7440:	be 01       	movw	r22, r28
    7442:	69 5e       	subi	r22, 0xE9	; 233
    7444:	7f 4f       	sbci	r23, 0xFF	; 255
    7446:	80 e0       	ldi	r24, 0x00	; 0
    7448:	90 e0       	ldi	r25, 0x00	; 0
    744a:	08 db       	rcall	.-2544   	; 0x6a5c <clock_settime>
    744c:	b7 01       	movw	r22, r14
    744e:	a6 01       	movw	r20, r12
    7450:	81 e0       	ldi	r24, 0x01	; 1
    7452:	90 e0       	ldi	r25, 0x00	; 0
    7454:	0e 94 41 2f 	call	0x5e82	; 0x5e82 <rtc_init>
    7458:	81 11       	cpse	r24, r1
    745a:	0d c0       	rjmp	.+26     	; 0x7476 <setdate_r+0x210>
    745c:	80 e1       	ldi	r24, 0x10	; 16
    745e:	97 e0       	ldi	r25, 0x07	; 7
    7460:	1f 92       	push	r1
    7462:	9f 93       	push	r25
    7464:	8f 93       	push	r24
    7466:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    746a:	0f 90       	pop	r0
    746c:	0f 90       	pop	r0
    746e:	0f 90       	pop	r0
    7470:	8f ef       	ldi	r24, 0xFF	; 255
    7472:	9f ef       	ldi	r25, 0xFF	; 255
    7474:	02 c0       	rjmp	.+4      	; 0x747a <setdate_r+0x214>
    7476:	80 e0       	ldi	r24, 0x00	; 0
    7478:	90 e0       	ldi	r25, 0x00	; 0
    747a:	a0 96       	adiw	r28, 0x20	; 32
    747c:	0f b6       	in	r0, 0x3f	; 63
    747e:	f8 94       	cli
    7480:	de bf       	out	0x3e, r29	; 62
    7482:	0f be       	out	0x3f, r0	; 63
    7484:	cd bf       	out	0x3d, r28	; 61
    7486:	df 91       	pop	r29
    7488:	cf 91       	pop	r28
    748a:	ff 90       	pop	r15
    748c:	ef 90       	pop	r14
    748e:	df 90       	pop	r13
    7490:	cf 90       	pop	r12
    7492:	08 95       	ret

00007494 <setdate>:
    7494:	a8 e2       	ldi	r26, 0x28	; 40
    7496:	b0 e0       	ldi	r27, 0x00	; 0
    7498:	e0 e5       	ldi	r30, 0x50	; 80
    749a:	fa e3       	ldi	r31, 0x3A	; 58
    749c:	0c 94 9f e9 	jmp	0x1d33e	; 0x1d33e <__prologue_saves__+0x20>
    74a0:	8e e7       	ldi	r24, 0x7E	; 126
    74a2:	97 e0       	ldi	r25, 0x07	; 7
    74a4:	1f 92       	push	r1
    74a6:	9f 93       	push	r25
    74a8:	8f 93       	push	r24
    74aa:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    74ae:	40 91 0a 1d 	lds	r20, 0x1D0A	; 0x801d0a <__iob>
    74b2:	50 91 0b 1d 	lds	r21, 0x1D0B	; 0x801d0b <__iob+0x1>
    74b6:	67 e2       	ldi	r22, 0x27	; 39
    74b8:	70 e0       	ldi	r23, 0x00	; 0
    74ba:	ce 01       	movw	r24, r28
    74bc:	01 96       	adiw	r24, 0x01	; 1
    74be:	0e 94 20 79 	call	0xf240	; 0xf240 <fgets>
    74c2:	ce 01       	movw	r24, r28
    74c4:	01 96       	adiw	r24, 0x01	; 1
    74c6:	cf de       	rcall	.-610    	; 0x7266 <setdate_r>
    74c8:	0f 90       	pop	r0
    74ca:	0f 90       	pop	r0
    74cc:	0f 90       	pop	r0
    74ce:	a8 96       	adiw	r28, 0x28	; 40
    74d0:	e2 e0       	ldi	r30, 0x02	; 2
    74d2:	0c 94 bb e9 	jmp	0x1d376	; 0x1d376 <__epilogue_restores__+0x20>

000074d6 <find_dst>:
    74d6:	a8 e2       	ldi	r26, 0x28	; 40
    74d8:	b0 e0       	ldi	r27, 0x00	; 0
    74da:	e1 e7       	ldi	r30, 0x71	; 113
    74dc:	fa e3       	ldi	r31, 0x3A	; 58
    74de:	0c 94 8f e9 	jmp	0x1d31e	; 0x1d31e <__prologue_saves__>
    74e2:	3c 01       	movw	r6, r24
    74e4:	1a 01       	movw	r2, r20
    74e6:	2b 01       	movw	r4, r22
    74e8:	49 01       	movw	r8, r18
    74ea:	1c a3       	std	Y+36, r17	; 0x24
    74ec:	0b a3       	std	Y+35, r16	; 0x23
    74ee:	de a2       	std	Y+38, r13	; 0x26
    74f0:	cd a2       	std	Y+37, r12	; 0x25
    74f2:	b8 a6       	std	Y+40, r11	; 0x28
    74f4:	af a2       	std	Y+39, r10	; 0x27
    74f6:	be 01       	movw	r22, r28
    74f8:	61 5e       	subi	r22, 0xE1	; 225
    74fa:	7f 4f       	sbci	r23, 0xFF	; 255
    74fc:	ce 01       	movw	r24, r28
    74fe:	47 96       	adiw	r24, 0x17	; 23
    7500:	1b dc       	rcall	.-1994   	; 0x6d38 <gettimeofday>
    7502:	af 8d       	ldd	r26, Y+31	; 0x1f
    7504:	b8 a1       	ldd	r27, Y+32	; 0x20
    7506:	2c e3       	ldi	r18, 0x3C	; 60
    7508:	30 e0       	ldi	r19, 0x00	; 0
    750a:	0e 94 69 e9 	call	0x1d2d2	; 0x1d2d2 <__usmulhisi3>
    750e:	5b 01       	movw	r10, r22
    7510:	6c 01       	movw	r12, r24
    7512:	61 14       	cp	r6, r1
    7514:	71 04       	cpc	r7, r1
    7516:	31 f0       	breq	.+12     	; 0x7524 <find_dst+0x4e>
    7518:	20 e1       	ldi	r18, 0x10	; 16
    751a:	a2 1a       	sub	r10, r18
    751c:	2e e0       	ldi	r18, 0x0E	; 14
    751e:	b2 0a       	sbc	r11, r18
    7520:	c1 08       	sbc	r12, r1
    7522:	d1 08       	sbc	r13, r1
    7524:	81 14       	cp	r8, r1
    7526:	91 04       	cpc	r9, r1
    7528:	39 f0       	breq	.+14     	; 0x7538 <find_dst+0x62>
    752a:	4c e6       	ldi	r20, 0x6C	; 108
    752c:	84 1a       	sub	r8, r20
    752e:	47 e0       	ldi	r20, 0x07	; 7
    7530:	94 0a       	sbc	r9, r20
    7532:	9c 86       	std	Y+12, r9	; 0x0c
    7534:	8b 86       	std	Y+11, r8	; 0x0b
    7536:	11 c0       	rjmp	.+34     	; 0x755a <find_dst+0x84>
    7538:	21 14       	cp	r2, r1
    753a:	31 04       	cpc	r3, r1
    753c:	41 04       	cpc	r4, r1
    753e:	51 04       	cpc	r5, r1
    7540:	21 f4       	brne	.+8      	; 0x754a <find_dst+0x74>
    7542:	2f 88       	ldd	r2, Y+23	; 0x17
    7544:	38 8c       	ldd	r3, Y+24	; 0x18
    7546:	49 8c       	ldd	r4, Y+25	; 0x19
    7548:	5a 8c       	ldd	r5, Y+26	; 0x1a
    754a:	8e 01       	movw	r16, r28
    754c:	0f 5f       	subi	r16, 0xFF	; 255
    754e:	1f 4f       	sbci	r17, 0xFF	; 255
    7550:	a6 01       	movw	r20, r12
    7552:	95 01       	movw	r18, r10
    7554:	c2 01       	movw	r24, r4
    7556:	b1 01       	movw	r22, r2
    7558:	cf da       	rcall	.-2658   	; 0x6af8 <time_to_tm>
    755a:	8b a1       	ldd	r24, Y+35	; 0x23
    755c:	9c a1       	ldd	r25, Y+36	; 0x24
    755e:	01 97       	sbiw	r24, 0x01	; 1
    7560:	9a 87       	std	Y+10, r25	; 0x0a
    7562:	89 87       	std	Y+9, r24	; 0x09
    7564:	81 e0       	ldi	r24, 0x01	; 1
    7566:	90 e0       	ldi	r25, 0x00	; 0
    7568:	98 87       	std	Y+8, r25	; 0x08
    756a:	8f 83       	std	Y+7, r24	; 0x07
    756c:	8f a1       	ldd	r24, Y+39	; 0x27
    756e:	98 a5       	ldd	r25, Y+40	; 0x28
    7570:	9e 83       	std	Y+6, r25	; 0x06
    7572:	8d 83       	std	Y+5, r24	; 0x05
    7574:	1c 82       	std	Y+4, r1	; 0x04
    7576:	1b 82       	std	Y+3, r1	; 0x03
    7578:	1a 82       	std	Y+2, r1	; 0x02
    757a:	19 82       	std	Y+1, r1	; 0x01
    757c:	ce 01       	movw	r24, r28
    757e:	01 96       	adiw	r24, 0x01	; 1
    7580:	6e de       	rcall	.-804    	; 0x725e <timegm>
    7582:	45 01       	movw	r8, r10
    7584:	56 01       	movw	r10, r12
    7586:	86 0e       	add	r8, r22
    7588:	97 1e       	adc	r9, r23
    758a:	a8 1e       	adc	r10, r24
    758c:	b9 1e       	adc	r11, r25
    758e:	8e 01       	movw	r16, r28
    7590:	0f 5f       	subi	r16, 0xFF	; 255
    7592:	1f 4f       	sbci	r17, 0xFF	; 255
    7594:	20 e0       	ldi	r18, 0x00	; 0
    7596:	30 e0       	ldi	r19, 0x00	; 0
    7598:	a9 01       	movw	r20, r18
    759a:	c5 01       	movw	r24, r10
    759c:	b4 01       	movw	r22, r8
    759e:	ac da       	rcall	.-2728   	; 0x6af8 <time_to_tm>
    75a0:	2d 85       	ldd	r18, Y+13	; 0x0d
    75a2:	3e 85       	ldd	r19, Y+14	; 0x0e
    75a4:	e7 e0       	ldi	r30, 0x07	; 7
    75a6:	f0 e0       	ldi	r31, 0x00	; 0
    75a8:	c9 01       	movw	r24, r18
    75aa:	bf 01       	movw	r22, r30
    75ac:	0e 94 0f e9 	call	0x1d21e	; 0x1d21e <__divmodhi4>
    75b0:	4d a1       	ldd	r20, Y+37	; 0x25
    75b2:	5e a1       	ldd	r21, Y+38	; 0x26
    75b4:	48 17       	cp	r20, r24
    75b6:	59 07       	cpc	r21, r25
    75b8:	21 f4       	brne	.+8      	; 0x75c2 <find_dst+0xec>
    75ba:	51 e0       	ldi	r21, 0x01	; 1
    75bc:	e5 1a       	sub	r14, r21
    75be:	f1 08       	sbc	r15, r1
    75c0:	51 f0       	breq	.+20     	; 0x75d6 <find_dst+0x100>
    75c2:	80 e8       	ldi	r24, 0x80	; 128
    75c4:	88 0e       	add	r8, r24
    75c6:	81 e5       	ldi	r24, 0x51	; 81
    75c8:	98 1e       	adc	r9, r24
    75ca:	81 e0       	ldi	r24, 0x01	; 1
    75cc:	a8 1e       	adc	r10, r24
    75ce:	b1 1c       	adc	r11, r1
    75d0:	2f 5f       	subi	r18, 0xFF	; 255
    75d2:	3f 4f       	sbci	r19, 0xFF	; 255
    75d4:	e9 cf       	rjmp	.-46     	; 0x75a8 <find_dst+0xd2>
    75d6:	c5 01       	movw	r24, r10
    75d8:	b4 01       	movw	r22, r8
    75da:	a8 96       	adiw	r28, 0x28	; 40
    75dc:	e2 e1       	ldi	r30, 0x12	; 18
    75de:	0c 94 ab e9 	jmp	0x1d356	; 0x1d356 <__epilogue_restores__>

000075e2 <set_dst>:
    75e2:	4f 92       	push	r4
    75e4:	5f 92       	push	r5
    75e6:	6f 92       	push	r6
    75e8:	7f 92       	push	r7
    75ea:	af 92       	push	r10
    75ec:	bf 92       	push	r11
    75ee:	cf 92       	push	r12
    75f0:	df 92       	push	r13
    75f2:	ef 92       	push	r14
    75f4:	ff 92       	push	r15
    75f6:	0f 93       	push	r16
    75f8:	1f 93       	push	r17
    75fa:	cf 93       	push	r28
    75fc:	df 93       	push	r29
    75fe:	cd b7       	in	r28, 0x3d	; 61
    7600:	de b7       	in	r29, 0x3e	; 62
    7602:	2c 97       	sbiw	r28, 0x0c	; 12
    7604:	0f b6       	in	r0, 0x3f	; 63
    7606:	f8 94       	cli
    7608:	de bf       	out	0x3e, r29	; 62
    760a:	0f be       	out	0x3f, r0	; 63
    760c:	cd bf       	out	0x3d, r28	; 61
    760e:	2b 01       	movw	r4, r22
    7610:	3c 01       	movw	r6, r24
    7612:	67 2b       	or	r22, r23
    7614:	68 2b       	or	r22, r24
    7616:	69 2b       	or	r22, r25
    7618:	51 f4       	brne	.+20     	; 0x762e <set_dst+0x4c>
    761a:	be 01       	movw	r22, r28
    761c:	67 5f       	subi	r22, 0xF7	; 247
    761e:	7f 4f       	sbci	r23, 0xFF	; 255
    7620:	ce 01       	movw	r24, r28
    7622:	01 96       	adiw	r24, 0x01	; 1
    7624:	89 db       	rcall	.-2286   	; 0x6d38 <gettimeofday>
    7626:	49 80       	ldd	r4, Y+1	; 0x01
    7628:	5a 80       	ldd	r5, Y+2	; 0x02
    762a:	6b 80       	ldd	r6, Y+3	; 0x03
    762c:	7c 80       	ldd	r7, Y+4	; 0x04
    762e:	80 91 c1 1a 	lds	r24, 0x1AC1	; 0x801ac1 <dst+0x8>
    7632:	90 91 c2 1a 	lds	r25, 0x1AC2	; 0x801ac2 <dst+0x9>
    7636:	a0 91 c3 1a 	lds	r26, 0x1AC3	; 0x801ac3 <dst+0xa>
    763a:	b0 91 c4 1a 	lds	r27, 0x1AC4	; 0x801ac4 <dst+0xb>
    763e:	84 15       	cp	r24, r4
    7640:	95 05       	cpc	r25, r5
    7642:	a6 05       	cpc	r26, r6
    7644:	b7 05       	cpc	r27, r7
    7646:	50 f0       	brcs	.+20     	; 0x765c <set_dst+0x7a>
    7648:	84 19       	sub	r24, r4
    764a:	95 09       	sbc	r25, r5
    764c:	a6 09       	sbc	r26, r6
    764e:	b7 09       	sbc	r27, r7
    7650:	80 38       	cpi	r24, 0x80	; 128
    7652:	91 45       	sbci	r25, 0x51	; 81
    7654:	a1 40       	sbci	r26, 0x01	; 1
    7656:	b1 05       	cpc	r27, r1
    7658:	70 f4       	brcc	.+28     	; 0x7676 <set_dst+0x94>
    765a:	42 c0       	rjmp	.+132    	; 0x76e0 <set_dst+0xfe>
    765c:	a3 01       	movw	r20, r6
    765e:	92 01       	movw	r18, r4
    7660:	28 1b       	sub	r18, r24
    7662:	39 0b       	sbc	r19, r25
    7664:	4a 0b       	sbc	r20, r26
    7666:	5b 0b       	sbc	r21, r27
    7668:	da 01       	movw	r26, r20
    766a:	c9 01       	movw	r24, r18
    766c:	80 38       	cpi	r24, 0x80	; 128
    766e:	91 45       	sbci	r25, 0x51	; 81
    7670:	a1 40       	sbci	r26, 0x01	; 1
    7672:	b1 05       	cpc	r27, r1
    7674:	a8 f1       	brcs	.+106    	; 0x76e0 <set_dst+0xfe>
    7676:	40 92 c1 1a 	sts	0x1AC1, r4	; 0x801ac1 <dst+0x8>
    767a:	50 92 c2 1a 	sts	0x1AC2, r5	; 0x801ac2 <dst+0x9>
    767e:	60 92 c3 1a 	sts	0x1AC3, r6	; 0x801ac3 <dst+0xa>
    7682:	70 92 c4 1a 	sts	0x1AC4, r7	; 0x801ac4 <dst+0xb>
    7686:	82 e0       	ldi	r24, 0x02	; 2
    7688:	a8 2e       	mov	r10, r24
    768a:	b1 2c       	mov	r11, r1
    768c:	c1 2c       	mov	r12, r1
    768e:	d1 2c       	mov	r13, r1
    7690:	92 e0       	ldi	r25, 0x02	; 2
    7692:	e9 2e       	mov	r14, r25
    7694:	f1 2c       	mov	r15, r1
    7696:	03 e0       	ldi	r16, 0x03	; 3
    7698:	10 e0       	ldi	r17, 0x00	; 0
    769a:	20 e0       	ldi	r18, 0x00	; 0
    769c:	30 e0       	ldi	r19, 0x00	; 0
    769e:	b3 01       	movw	r22, r6
    76a0:	a2 01       	movw	r20, r4
    76a2:	80 e0       	ldi	r24, 0x00	; 0
    76a4:	90 e0       	ldi	r25, 0x00	; 0
    76a6:	17 df       	rcall	.-466    	; 0x74d6 <find_dst>
    76a8:	60 93 b9 1a 	sts	0x1AB9, r22	; 0x801ab9 <dst>
    76ac:	70 93 ba 1a 	sts	0x1ABA, r23	; 0x801aba <dst+0x1>
    76b0:	80 93 bb 1a 	sts	0x1ABB, r24	; 0x801abb <dst+0x2>
    76b4:	90 93 bc 1a 	sts	0x1ABC, r25	; 0x801abc <dst+0x3>
    76b8:	ee 24       	eor	r14, r14
    76ba:	e3 94       	inc	r14
    76bc:	f1 2c       	mov	r15, r1
    76be:	0b e0       	ldi	r16, 0x0B	; 11
    76c0:	10 e0       	ldi	r17, 0x00	; 0
    76c2:	20 e0       	ldi	r18, 0x00	; 0
    76c4:	30 e0       	ldi	r19, 0x00	; 0
    76c6:	b3 01       	movw	r22, r6
    76c8:	a2 01       	movw	r20, r4
    76ca:	81 e0       	ldi	r24, 0x01	; 1
    76cc:	90 e0       	ldi	r25, 0x00	; 0
    76ce:	03 df       	rcall	.-506    	; 0x74d6 <find_dst>
    76d0:	60 93 bd 1a 	sts	0x1ABD, r22	; 0x801abd <dst+0x4>
    76d4:	70 93 be 1a 	sts	0x1ABE, r23	; 0x801abe <dst+0x5>
    76d8:	80 93 bf 1a 	sts	0x1ABF, r24	; 0x801abf <dst+0x6>
    76dc:	90 93 c0 1a 	sts	0x1AC0, r25	; 0x801ac0 <dst+0x7>
    76e0:	2c 96       	adiw	r28, 0x0c	; 12
    76e2:	0f b6       	in	r0, 0x3f	; 63
    76e4:	f8 94       	cli
    76e6:	de bf       	out	0x3e, r29	; 62
    76e8:	0f be       	out	0x3f, r0	; 63
    76ea:	cd bf       	out	0x3d, r28	; 61
    76ec:	df 91       	pop	r29
    76ee:	cf 91       	pop	r28
    76f0:	1f 91       	pop	r17
    76f2:	0f 91       	pop	r16
    76f4:	ff 90       	pop	r15
    76f6:	ef 90       	pop	r14
    76f8:	df 90       	pop	r13
    76fa:	cf 90       	pop	r12
    76fc:	bf 90       	pop	r11
    76fe:	af 90       	pop	r10
    7700:	7f 90       	pop	r7
    7702:	6f 90       	pop	r6
    7704:	5f 90       	pop	r5
    7706:	4f 90       	pop	r4
    7708:	08 95       	ret

0000770a <asctime_r>:
    770a:	0f 93       	push	r16
    770c:	1f 93       	push	r17
    770e:	cf 93       	push	r28
    7710:	df 93       	push	r29
    7712:	ec 01       	movw	r28, r24
    7714:	8b 01       	movw	r16, r22
    7716:	60 e0       	ldi	r22, 0x00	; 0
    7718:	70 e0       	ldi	r23, 0x00	; 0
    771a:	d9 db       	rcall	.-2126   	; 0x6ece <normalize>
    771c:	20 e2       	ldi	r18, 0x20	; 32
    771e:	d8 01       	movw	r26, r16
    7720:	82 2f       	mov	r24, r18
    7722:	1d 92       	st	X+, r1
    7724:	8a 95       	dec	r24
    7726:	e9 f7       	brne	.-6      	; 0x7722 <asctime_r+0x18>
    7728:	8a 85       	ldd	r24, Y+10	; 0x0a
    772a:	9b 85       	ldd	r25, Y+11	; 0x0b
    772c:	84 59       	subi	r24, 0x94	; 148
    772e:	98 4f       	sbci	r25, 0xF8	; 248
    7730:	9f 93       	push	r25
    7732:	8f 93       	push	r24
    7734:	89 81       	ldd	r24, Y+1	; 0x01
    7736:	8f 93       	push	r24
    7738:	88 81       	ld	r24, Y
    773a:	8f 93       	push	r24
    773c:	8b 81       	ldd	r24, Y+3	; 0x03
    773e:	8f 93       	push	r24
    7740:	8a 81       	ldd	r24, Y+2	; 0x02
    7742:	8f 93       	push	r24
    7744:	8d 81       	ldd	r24, Y+5	; 0x05
    7746:	8f 93       	push	r24
    7748:	8c 81       	ldd	r24, Y+4	; 0x04
    774a:	8f 93       	push	r24
    774c:	8f 81       	ldd	r24, Y+7	; 0x07
    774e:	8f 93       	push	r24
    7750:	8e 81       	ldd	r24, Y+6	; 0x06
    7752:	8f 93       	push	r24
    7754:	e8 85       	ldd	r30, Y+8	; 0x08
    7756:	f9 85       	ldd	r31, Y+9	; 0x09
    7758:	ee 0f       	add	r30, r30
    775a:	ff 1f       	adc	r31, r31
    775c:	eb 5f       	subi	r30, 0xFB	; 251
    775e:	fe 4f       	sbci	r31, 0xFE	; 254
    7760:	81 81       	ldd	r24, Z+1	; 0x01
    7762:	8f 93       	push	r24
    7764:	80 81       	ld	r24, Z
    7766:	8f 93       	push	r24
    7768:	ec 85       	ldd	r30, Y+12	; 0x0c
    776a:	fd 85       	ldd	r31, Y+13	; 0x0d
    776c:	ee 0f       	add	r30, r30
    776e:	ff 1f       	adc	r31, r31
    7770:	e1 5e       	subi	r30, 0xE1	; 225
    7772:	fe 4f       	sbci	r31, 0xFE	; 254
    7774:	81 81       	ldd	r24, Z+1	; 0x01
    7776:	8f 93       	push	r24
    7778:	80 81       	ld	r24, Z
    777a:	8f 93       	push	r24
    777c:	8f e9       	ldi	r24, 0x9F	; 159
    777e:	97 e0       	ldi	r25, 0x07	; 7
    7780:	1f 92       	push	r1
    7782:	9f 93       	push	r25
    7784:	8f 93       	push	r24
    7786:	1f 92       	push	r1
    7788:	2f 93       	push	r18
    778a:	1f 93       	push	r17
    778c:	0f 93       	push	r16
    778e:	0e 94 e6 44 	call	0x89cc	; 0x89cc <snprintf_P>
    7792:	ad b7       	in	r26, 0x3d	; 61
    7794:	be b7       	in	r27, 0x3e	; 62
    7796:	55 96       	adiw	r26, 0x15	; 21
    7798:	0f b6       	in	r0, 0x3f	; 63
    779a:	f8 94       	cli
    779c:	be bf       	out	0x3e, r27	; 62
    779e:	0f be       	out	0x3f, r0	; 63
    77a0:	ad bf       	out	0x3d, r26	; 61
    77a2:	c8 01       	movw	r24, r16
    77a4:	df 91       	pop	r29
    77a6:	cf 91       	pop	r28
    77a8:	1f 91       	pop	r17
    77aa:	0f 91       	pop	r16
    77ac:	08 95       	ret

000077ae <asctime>:
    77ae:	60 e5       	ldi	r22, 0x50	; 80
    77b0:	78 e1       	ldi	r23, 0x18	; 24
    77b2:	ab cf       	rjmp	.-170    	; 0x770a <asctime_r>
    77b4:	08 95       	ret

000077b6 <ctime_gm>:
    77b6:	a6 e1       	ldi	r26, 0x16	; 22
    77b8:	b0 e0       	ldi	r27, 0x00	; 0
    77ba:	e1 ee       	ldi	r30, 0xE1	; 225
    77bc:	fb e3       	ldi	r31, 0x3B	; 59
    77be:	0c 94 9f e9 	jmp	0x1d33e	; 0x1d33e <__prologue_saves__+0x20>
    77c2:	be 01       	movw	r22, r28
    77c4:	6f 5f       	subi	r22, 0xFF	; 255
    77c6:	7f 4f       	sbci	r23, 0xFF	; 255
    77c8:	75 da       	rcall	.-2838   	; 0x6cb4 <gmtime_r>
    77ca:	60 e1       	ldi	r22, 0x10	; 16
    77cc:	78 e1       	ldi	r23, 0x18	; 24
    77ce:	9d df       	rcall	.-198    	; 0x770a <asctime_r>
    77d0:	66 96       	adiw	r28, 0x16	; 22
    77d2:	e2 e0       	ldi	r30, 0x02	; 2
    77d4:	0c 94 bb e9 	jmp	0x1d376	; 0x1d376 <__epilogue_restores__+0x20>

000077d8 <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    77d8:	a2 e2       	ldi	r26, 0x22	; 34
    77da:	b0 e0       	ldi	r27, 0x00	; 0
    77dc:	e2 ef       	ldi	r30, 0xF2	; 242
    77de:	fb e3       	ldi	r31, 0x3B	; 59
    77e0:	0c 94 99 e9 	jmp	0x1d332	; 0x1d332 <__prologue_saves__+0x14>
    77e4:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    77e6:	40 e0       	ldi	r20, 0x00	; 0
    77e8:	50 e0       	ldi	r21, 0x00	; 0
    77ea:	ba 01       	movw	r22, r20
    77ec:	80 e0       	ldi	r24, 0x00	; 0
    77ee:	90 e0       	ldi	r25, 0x00	; 0
    77f0:	0e 94 41 2f 	call	0x5e82	; 0x5e82 <rtc_init>
    77f4:	81 11       	cpse	r24, r1
    77f6:	27 c0       	rjmp	.+78     	; 0x7846 <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    77f8:	8a e9       	ldi	r24, 0x9A	; 154
    77fa:	96 e0       	ldi	r25, 0x06	; 6
    77fc:	1f 92       	push	r1
    77fe:	9f 93       	push	r25
    7800:	8f 93       	push	r24
    7802:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        printf("attempting rtc init\n");
    7806:	85 e8       	ldi	r24, 0x85	; 133
    7808:	96 e0       	ldi	r25, 0x06	; 6
    780a:	1f 92       	push	r1
    780c:	9f 93       	push	r25
    780e:	8f 93       	push	r24
    7810:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    7814:	40 e0       	ldi	r20, 0x00	; 0
    7816:	50 e0       	ldi	r21, 0x00	; 0
    7818:	ba 01       	movw	r22, r20
    781a:	81 e0       	ldi	r24, 0x01	; 1
    781c:	90 e0       	ldi	r25, 0x00	; 0
    781e:	0e 94 41 2f 	call	0x5e82	; 0x5e82 <rtc_init>
    7822:	0f 90       	pop	r0
    7824:	0f 90       	pop	r0
    7826:	0f 90       	pop	r0
    7828:	0f 90       	pop	r0
    782a:	0f 90       	pop	r0
    782c:	0f 90       	pop	r0
    782e:	81 11       	cpse	r24, r1
    7830:	0a c0       	rjmp	.+20     	; 0x7846 <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    7832:	8e e6       	ldi	r24, 0x6E	; 110
    7834:	96 e0       	ldi	r25, 0x06	; 6
    7836:	1f 92       	push	r1
    7838:	9f 93       	push	r25
    783a:	8f 93       	push	r24
    783c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    7840:	0f 90       	pop	r0
    7842:	0f 90       	pop	r0
    7844:	0f 90       	pop	r0
        }
    }

    if(rtc_read(&tc))
    7846:	ce 01       	movw	r24, r28
    7848:	01 96       	adiw	r24, 0x01	; 1
    784a:	0e 94 b4 2f 	call	0x5f68	; 0x5f68 <rtc_read>
    784e:	88 23       	and	r24, r24
    7850:	51 f0       	breq	.+20     	; 0x7866 <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7852:	ce 01       	movw	r24, r28
    7854:	01 96       	adiw	r24, 0x01	; 1
    7856:	03 dd       	rcall	.-1530   	; 0x725e <timegm>
    7858:	6b 01       	movw	r12, r22
    785a:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
    785c:	67 2b       	or	r22, r23
    785e:	68 2b       	or	r22, r24
    7860:	69 2b       	or	r22, r25
    7862:	c1 f4       	brne	.+48     	; 0x7894 <initialize_clock+0xbc>
    7864:	0a c0       	rjmp	.+20     	; 0x787a <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7866:	84 e5       	ldi	r24, 0x54	; 84
    7868:	96 e0       	ldi	r25, 0x06	; 6
    786a:	1f 92       	push	r1
    786c:	9f 93       	push	r25
    786e:	8f 93       	push	r24
    7870:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    7874:	0f 90       	pop	r0
    7876:	0f 90       	pop	r0
    7878:	0f 90       	pop	r0
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    787a:	80 e3       	ldi	r24, 0x30	; 48
    787c:	96 e0       	ldi	r25, 0x06	; 6
    787e:	1f 92       	push	r1
    7880:	9f 93       	push	r25
    7882:	8f 93       	push	r24
    7884:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    7888:	0f 90       	pop	r0
    788a:	0f 90       	pop	r0
    788c:	0f 90       	pop	r0
    788e:	c1 2c       	mov	r12, r1
    7890:	d1 2c       	mov	r13, r1
    7892:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7894:	18 a3       	std	Y+32, r17	; 0x20
    7896:	0f 8f       	std	Y+31, r16	; 0x1f
    tz.tz_dsttime = 0;
    7898:	1a a2       	std	Y+34, r1	; 0x22
    789a:	19 a2       	std	Y+33, r1	; 0x21
    settimezone( &tz );
    789c:	ce 01       	movw	r24, r28
    789e:	4f 96       	adiw	r24, 0x1f	; 31
    78a0:	3a da       	rcall	.-2956   	; 0x6d16 <settimezone>

    ts.tv_sec = seconds;
    78a2:	cf 8a       	std	Y+23, r12	; 0x17
    78a4:	d8 8e       	std	Y+24, r13	; 0x18
    78a6:	e9 8e       	std	Y+25, r14	; 0x19
    78a8:	fa 8e       	std	Y+26, r15	; 0x1a
    ts.tv_nsec = 0L;
    78aa:	1b 8e       	std	Y+27, r1	; 0x1b
    78ac:	1c 8e       	std	Y+28, r1	; 0x1c
    78ae:	1d 8e       	std	Y+29, r1	; 0x1d
    78b0:	1e 8e       	std	Y+30, r1	; 0x1e
    clock_settime(0, (ts_t *) &ts);
    78b2:	be 01       	movw	r22, r28
    78b4:	69 5e       	subi	r22, 0xE9	; 233
    78b6:	7f 4f       	sbci	r23, 0xFF	; 255
    78b8:	80 e0       	ldi	r24, 0x00	; 0
    78ba:	90 e0       	ldi	r25, 0x00	; 0
    78bc:	cf d8       	rcall	.-3682   	; 0x6a5c <clock_settime>
}
    78be:	a2 96       	adiw	r28, 0x22	; 34
    78c0:	e8 e0       	ldi	r30, 0x08	; 8
    78c2:	0c 94 b5 e9 	jmp	0x1d36a	; 0x1d36a <__epilogue_restores__+0x14>

000078c6 <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    78c6:	a2 e2       	ldi	r26, 0x22	; 34
    78c8:	b0 e0       	ldi	r27, 0x00	; 0
    78ca:	e9 e6       	ldi	r30, 0x69	; 105
    78cc:	fc e3       	ldi	r31, 0x3C	; 60
    78ce:	0c 94 9f e9 	jmp	0x1d33e	; 0x1d33e <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    78d2:	ce 01       	movw	r24, r28
    78d4:	01 96       	adiw	r24, 0x01	; 1
    78d6:	0e 94 b4 2f 	call	0x5f68	; 0x5f68 <rtc_read>
    78da:	88 23       	and	r24, r24
    78dc:	21 f1       	breq	.+72     	; 0x7926 <display_clock+0x60>
    {
        seconds = timegm(&tc);
    78de:	ce 01       	movw	r24, r28
    78e0:	01 96       	adiw	r24, 0x01	; 1
    78e2:	bd dc       	rcall	.-1670   	; 0x725e <timegm>
    78e4:	6f 8f       	std	Y+31, r22	; 0x1f
    78e6:	78 a3       	std	Y+32, r23	; 0x20
    78e8:	89 a3       	std	Y+33, r24	; 0x21
    78ea:	9a a3       	std	Y+34, r25	; 0x22
        printf("rtc seconds: %lu\n",seconds);
    78ec:	9f 93       	push	r25
    78ee:	8f 93       	push	r24
    78f0:	7f 93       	push	r23
    78f2:	6f 93       	push	r22
    78f4:	8e e1       	ldi	r24, 0x1E	; 30
    78f6:	96 e0       	ldi	r25, 0x06	; 6
    78f8:	1f 92       	push	r1
    78fa:	9f 93       	push	r25
    78fc:	8f 93       	push	r24
    78fe:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7902:	ce 01       	movw	r24, r28
    7904:	01 96       	adiw	r24, 0x01	; 1
    7906:	53 df       	rcall	.-346    	; 0x77ae <asctime>
    7908:	9f 93       	push	r25
    790a:	8f 93       	push	r24
    790c:	8d e0       	ldi	r24, 0x0D	; 13
    790e:	96 e0       	ldi	r25, 0x06	; 6
    7910:	1f 92       	push	r1
    7912:	9f 93       	push	r25
    7914:	8f 93       	push	r24
    7916:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    791a:	0f b6       	in	r0, 0x3f	; 63
    791c:	f8 94       	cli
    791e:	de bf       	out	0x3e, r29	; 62
    7920:	0f be       	out	0x3f, r0	; 63
    7922:	cd bf       	out	0x3d, r28	; 61
    7924:	0a c0       	rjmp	.+20     	; 0x793a <display_clock+0x74>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7926:	8c ef       	ldi	r24, 0xFC	; 252
    7928:	95 e0       	ldi	r25, 0x05	; 5
    792a:	1f 92       	push	r1
    792c:	9f 93       	push	r25
    792e:	8f 93       	push	r24
    7930:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    7934:	0f 90       	pop	r0
    7936:	0f 90       	pop	r0
    7938:	0f 90       	pop	r0
    }
#endif  // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    793a:	be 01       	movw	r22, r28
    793c:	69 5e       	subi	r22, 0xE9	; 233
    793e:	7f 4f       	sbci	r23, 0xFF	; 255
    7940:	80 e0       	ldi	r24, 0x00	; 0
    7942:	90 e0       	ldi	r25, 0x00	; 0
    7944:	0e 94 9f 32 	call	0x653e	; 0x653e <clock_gettime>
    seconds = ts.tv_sec;
    7948:	8f 89       	ldd	r24, Y+23	; 0x17
    794a:	98 8d       	ldd	r25, Y+24	; 0x18
    794c:	29 8d       	ldd	r18, Y+25	; 0x19
    794e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    7950:	8f 8f       	std	Y+31, r24	; 0x1f
    7952:	98 a3       	std	Y+32, r25	; 0x20
    7954:	29 a3       	std	Y+33, r18	; 0x21
    7956:	3a a3       	std	Y+34, r19	; 0x22
    printf("clk seconds: %lu\n",seconds);
    7958:	3f 93       	push	r19
    795a:	2f 93       	push	r18
    795c:	9f 93       	push	r25
    795e:	8f 93       	push	r24
    7960:	8a ee       	ldi	r24, 0xEA	; 234
    7962:	95 e0       	ldi	r25, 0x05	; 5
    7964:	1f 92       	push	r1
    7966:	9f 93       	push	r25
    7968:	8f 93       	push	r24
    796a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    796e:	ce 01       	movw	r24, r28
    7970:	4f 96       	adiw	r24, 0x1f	; 31
    7972:	b5 d9       	rcall	.-3222   	; 0x6cde <gmtime>
    7974:	1c df       	rcall	.-456    	; 0x77ae <asctime>
    7976:	9f 93       	push	r25
    7978:	8f 93       	push	r24
    797a:	89 ed       	ldi	r24, 0xD9	; 217
    797c:	95 e0       	ldi	r25, 0x05	; 5
    797e:	1f 92       	push	r1
    7980:	9f 93       	push	r25
    7982:	8f 93       	push	r24
    7984:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
}
    7988:	0f b6       	in	r0, 0x3f	; 63
    798a:	f8 94       	cli
    798c:	de bf       	out	0x3e, r29	; 62
    798e:	0f be       	out	0x3f, r0	; 63
    7990:	cd bf       	out	0x3d, r28	; 61
    7992:	a2 96       	adiw	r28, 0x22	; 34
    7994:	e2 e0       	ldi	r30, 0x02	; 2
    7996:	0c 94 bb e9 	jmp	0x1d376	; 0x1d376 <__epilogue_restores__+0x20>

0000799a <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    799a:	fc 01       	movw	r30, r24
    799c:	84 81       	ldd	r24, Z+4	; 0x04
    799e:	95 81       	ldd	r25, Z+5	; 0x05
    79a0:	00 97       	sbiw	r24, 0x00	; 0
    79a2:	79 f0       	breq	.+30     	; 0x79c2 <_putc_buffer_fn+0x28>
    79a4:	66 23       	and	r22, r22
    79a6:	69 f0       	breq	.+26     	; 0x79c2 <_putc_buffer_fn+0x28>
    79a8:	01 97       	sbiw	r24, 0x01	; 1
    79aa:	95 83       	std	Z+5, r25	; 0x05
    79ac:	84 83       	std	Z+4, r24	; 0x04
    79ae:	86 81       	ldd	r24, Z+6	; 0x06
    79b0:	97 81       	ldd	r25, Z+7	; 0x07
    79b2:	01 96       	adiw	r24, 0x01	; 1
    79b4:	97 83       	std	Z+7, r25	; 0x07
    79b6:	86 83       	std	Z+6, r24	; 0x06
    79b8:	a2 81       	ldd	r26, Z+2	; 0x02
    79ba:	b3 81       	ldd	r27, Z+3	; 0x03
    79bc:	6d 93       	st	X+, r22
    79be:	b3 83       	std	Z+3, r27	; 0x03
    79c0:	a2 83       	std	Z+2, r26	; 0x02
    79c2:	02 80       	ldd	r0, Z+2	; 0x02
    79c4:	f3 81       	ldd	r31, Z+3	; 0x03
    79c6:	e0 2d       	mov	r30, r0
    79c8:	10 82       	st	Z, r1
    79ca:	08 95       	ret

000079cc <_putc_fn>:
    79cc:	fc 01       	movw	r30, r24
    79ce:	26 81       	ldd	r18, Z+6	; 0x06
    79d0:	37 81       	ldd	r19, Z+7	; 0x07
    79d2:	2f 5f       	subi	r18, 0xFF	; 255
    79d4:	3f 4f       	sbci	r19, 0xFF	; 255
    79d6:	37 83       	std	Z+7, r19	; 0x07
    79d8:	26 83       	std	Z+6, r18	; 0x06
    79da:	86 2f       	mov	r24, r22
    79dc:	90 e0       	ldi	r25, 0x00	; 0
    79de:	0c 94 1a 79 	jmp	0xf234	; 0xf234 <putchar>
    79e2:	08 95       	ret

000079e4 <bin2num>:
    79e4:	a0 e0       	ldi	r26, 0x00	; 0
    79e6:	b0 e0       	ldi	r27, 0x00	; 0
    79e8:	e8 ef       	ldi	r30, 0xF8	; 248
    79ea:	fc e3       	ldi	r31, 0x3C	; 60
    79ec:	0c 94 96 e9 	jmp	0x1d32c	; 0x1d32c <__prologue_saves__+0xe>
    79f0:	ea 01       	movw	r28, r20
    79f2:	53 e0       	ldi	r21, 0x03	; 3
    79f4:	ee 0c       	add	r14, r14
    79f6:	ff 1c       	adc	r15, r15
    79f8:	5a 95       	dec	r21
    79fa:	e1 f7       	brne	.-8      	; 0x79f4 <bin2num+0x10>
    79fc:	fc 01       	movw	r30, r24
    79fe:	af 01       	movw	r20, r30
    7a00:	48 1b       	sub	r20, r24
    7a02:	59 0b       	sbc	r21, r25
    7a04:	c4 17       	cp	r28, r20
    7a06:	d5 07       	cpc	r29, r21
    7a08:	14 f0       	brlt	.+4      	; 0x7a0e <bin2num+0x2a>
    7a0a:	11 92       	st	Z+, r1
    7a0c:	f8 cf       	rjmp	.-16     	; 0x79fe <bin2num+0x1a>
    7a0e:	41 e0       	ldi	r20, 0x01	; 1
    7a10:	e4 1a       	sub	r14, r20
    7a12:	f1 08       	sbc	r15, r1
    7a14:	5b 01       	movw	r10, r22
    7a16:	42 e0       	ldi	r20, 0x02	; 2
    7a18:	a4 1a       	sub	r10, r20
    7a1a:	b1 08       	sbc	r11, r1
    7a1c:	f7 fc       	sbrc	r15, 7
    7a1e:	3b c0       	rjmp	.+118    	; 0x7a96 <bin2num+0xb2>
    7a20:	f7 01       	movw	r30, r14
    7a22:	43 e0       	ldi	r20, 0x03	; 3
    7a24:	f5 95       	asr	r31
    7a26:	e7 95       	ror	r30
    7a28:	4a 95       	dec	r20
    7a2a:	e1 f7       	brne	.-8      	; 0x7a24 <bin2num+0x40>
    7a2c:	e0 0f       	add	r30, r16
    7a2e:	f1 1f       	adc	r31, r17
    7a30:	40 81       	ld	r20, Z
    7a32:	50 e0       	ldi	r21, 0x00	; 0
    7a34:	f7 01       	movw	r30, r14
    7a36:	e7 70       	andi	r30, 0x07	; 7
    7a38:	ff 27       	eor	r31, r31
    7a3a:	02 c0       	rjmp	.+4      	; 0x7a40 <bin2num+0x5c>
    7a3c:	55 95       	asr	r21
    7a3e:	47 95       	ror	r20
    7a40:	ea 95       	dec	r30
    7a42:	e2 f7       	brpl	.-8      	; 0x7a3c <bin2num+0x58>
    7a44:	41 70       	andi	r20, 0x01	; 1
    7a46:	55 27       	eor	r21, r21
    7a48:	dc 01       	movw	r26, r24
    7a4a:	e0 e0       	ldi	r30, 0x00	; 0
    7a4c:	f0 e0       	ldi	r31, 0x00	; 0
    7a4e:	ec 17       	cp	r30, r28
    7a50:	fd 07       	cpc	r31, r29
    7a52:	ec f4       	brge	.+58     	; 0x7a8e <bin2num+0xaa>
    7a54:	ea 15       	cp	r30, r10
    7a56:	fb 05       	cpc	r31, r11
    7a58:	4c f0       	brlt	.+18     	; 0x7a6c <bin2num+0x88>
    7a5a:	dc 01       	movw	r26, r24
    7a5c:	ae 0f       	add	r26, r30
    7a5e:	bf 1f       	adc	r27, r31
    7a60:	1c 92       	st	X, r1
    7a62:	41 e0       	ldi	r20, 0x01	; 1
    7a64:	e4 1a       	sub	r14, r20
    7a66:	f1 08       	sbc	r15, r1
    7a68:	ef 01       	movw	r28, r30
    7a6a:	d8 cf       	rjmp	.-80     	; 0x7a1c <bin2num+0x38>
    7a6c:	9c 90       	ld	r9, X
    7a6e:	99 0c       	add	r9, r9
    7a70:	94 2a       	or	r9, r20
    7a72:	49 2d       	mov	r20, r9
    7a74:	50 e0       	ldi	r21, 0x00	; 0
    7a76:	42 17       	cp	r20, r18
    7a78:	53 07       	cpc	r21, r19
    7a7a:	24 f0       	brlt	.+8      	; 0x7a84 <bin2num+0xa0>
    7a7c:	92 1a       	sub	r9, r18
    7a7e:	41 e0       	ldi	r20, 0x01	; 1
    7a80:	50 e0       	ldi	r21, 0x00	; 0
    7a82:	02 c0       	rjmp	.+4      	; 0x7a88 <bin2num+0xa4>
    7a84:	40 e0       	ldi	r20, 0x00	; 0
    7a86:	50 e0       	ldi	r21, 0x00	; 0
    7a88:	9d 92       	st	X+, r9
    7a8a:	31 96       	adiw	r30, 0x01	; 1
    7a8c:	e0 cf       	rjmp	.-64     	; 0x7a4e <bin2num+0x6a>
    7a8e:	41 15       	cp	r20, r1
    7a90:	51 05       	cpc	r21, r1
    7a92:	01 f7       	brne	.-64     	; 0x7a54 <bin2num+0x70>
    7a94:	e2 cf       	rjmp	.-60     	; 0x7a5a <bin2num+0x76>
    7a96:	fc 01       	movw	r30, r24
    7a98:	9f 01       	movw	r18, r30
    7a9a:	28 1b       	sub	r18, r24
    7a9c:	39 0b       	sbc	r19, r25
    7a9e:	2c 17       	cp	r18, r28
    7aa0:	3d 07       	cpc	r19, r29
    7aa2:	4c f4       	brge	.+18     	; 0x7ab6 <bin2num+0xd2>
    7aa4:	20 81       	ld	r18, Z
    7aa6:	2a 30       	cpi	r18, 0x0A	; 10
    7aa8:	10 f4       	brcc	.+4      	; 0x7aae <bin2num+0xca>
    7aaa:	20 5d       	subi	r18, 0xD0	; 208
    7aac:	01 c0       	rjmp	.+2      	; 0x7ab0 <bin2num+0xcc>
    7aae:	29 5a       	subi	r18, 0xA9	; 169
    7ab0:	20 83       	st	Z, r18
    7ab2:	31 96       	adiw	r30, 0x01	; 1
    7ab4:	f1 cf       	rjmp	.-30     	; 0x7a98 <bin2num+0xb4>
    7ab6:	9e 01       	movw	r18, r28
    7ab8:	d7 ff       	sbrs	r29, 7
    7aba:	02 c0       	rjmp	.+4      	; 0x7ac0 <bin2num+0xdc>
    7abc:	20 e0       	ldi	r18, 0x00	; 0
    7abe:	30 e0       	ldi	r19, 0x00	; 0
    7ac0:	c1 14       	cp	r12, r1
    7ac2:	d1 04       	cpc	r13, r1
    7ac4:	61 f0       	breq	.+24     	; 0x7ade <bin2num+0xfa>
    7ac6:	61 50       	subi	r22, 0x01	; 1
    7ac8:	71 09       	sbc	r23, r1
    7aca:	26 17       	cp	r18, r22
    7acc:	37 07       	cpc	r19, r23
    7ace:	3c f4       	brge	.+14     	; 0x7ade <bin2num+0xfa>
    7ad0:	fc 01       	movw	r30, r24
    7ad2:	e2 0f       	add	r30, r18
    7ad4:	f3 1f       	adc	r31, r19
    7ad6:	c0 82       	st	Z, r12
    7ad8:	21 96       	adiw	r28, 0x01	; 1
    7ada:	2f 5f       	subi	r18, 0xFF	; 255
    7adc:	3f 4f       	sbci	r19, 0xFF	; 255
    7ade:	fc 01       	movw	r30, r24
    7ae0:	e2 0f       	add	r30, r18
    7ae2:	f3 1f       	adc	r31, r19
    7ae4:	10 82       	st	Z, r1
    7ae6:	0e 94 8f 30 	call	0x611e	; 0x611e <reverse>
    7aea:	ce 01       	movw	r24, r28
    7aec:	cd b7       	in	r28, 0x3d	; 61
    7aee:	de b7       	in	r29, 0x3e	; 62
    7af0:	eb e0       	ldi	r30, 0x0B	; 11
    7af2:	0c 94 b2 e9 	jmp	0x1d364	; 0x1d364 <__epilogue_restores__+0xe>

00007af6 <pch_init>:
    7af6:	e5 ec       	ldi	r30, 0xC5	; 197
    7af8:	fa e1       	ldi	r31, 0x1A	; 26
    7afa:	91 83       	std	Z+1, r25	; 0x01
    7afc:	80 83       	st	Z, r24
    7afe:	13 82       	std	Z+3, r1	; 0x03
    7b00:	12 82       	std	Z+2, r1	; 0x02
    7b02:	61 50       	subi	r22, 0x01	; 1
    7b04:	71 09       	sbc	r23, r1
    7b06:	75 83       	std	Z+5, r23	; 0x05
    7b08:	64 83       	std	Z+4, r22	; 0x04
    7b0a:	fc 01       	movw	r30, r24
    7b0c:	10 82       	st	Z, r1
    7b0e:	08 95       	ret

00007b10 <pch>:
    7b10:	20 91 c7 1a 	lds	r18, 0x1AC7	; 0x801ac7 <_pch+0x2>
    7b14:	30 91 c8 1a 	lds	r19, 0x1AC8	; 0x801ac8 <_pch+0x3>
    7b18:	60 91 c9 1a 	lds	r22, 0x1AC9	; 0x801ac9 <_pch+0x4>
    7b1c:	70 91 ca 1a 	lds	r23, 0x1ACA	; 0x801aca <_pch+0x5>
    7b20:	40 91 c5 1a 	lds	r20, 0x1AC5	; 0x801ac5 <_pch>
    7b24:	50 91 c6 1a 	lds	r21, 0x1AC6	; 0x801ac6 <_pch+0x1>
    7b28:	26 17       	cp	r18, r22
    7b2a:	37 07       	cpc	r19, r23
    7b2c:	64 f4       	brge	.+24     	; 0x7b46 <pch+0x36>
    7b2e:	b9 01       	movw	r22, r18
    7b30:	6f 5f       	subi	r22, 0xFF	; 255
    7b32:	7f 4f       	sbci	r23, 0xFF	; 255
    7b34:	70 93 c8 1a 	sts	0x1AC8, r23	; 0x801ac8 <_pch+0x3>
    7b38:	60 93 c7 1a 	sts	0x1AC7, r22	; 0x801ac7 <_pch+0x2>
    7b3c:	fa 01       	movw	r30, r20
    7b3e:	e2 0f       	add	r30, r18
    7b40:	f3 1f       	adc	r31, r19
    7b42:	80 83       	st	Z, r24
    7b44:	04 c0       	rjmp	.+8      	; 0x7b4e <pch+0x3e>
    7b46:	fa 01       	movw	r30, r20
    7b48:	e2 0f       	add	r30, r18
    7b4a:	f3 1f       	adc	r31, r19
    7b4c:	10 82       	st	Z, r1
    7b4e:	80 91 c7 1a 	lds	r24, 0x1AC7	; 0x801ac7 <_pch+0x2>
    7b52:	90 91 c8 1a 	lds	r25, 0x1AC8	; 0x801ac8 <_pch+0x3>
    7b56:	08 95       	ret

00007b58 <p_ntoa>:
    7b58:	af 92       	push	r10
    7b5a:	cf 92       	push	r12
    7b5c:	df 92       	push	r13
    7b5e:	ef 92       	push	r14
    7b60:	ff 92       	push	r15
    7b62:	0f 93       	push	r16
    7b64:	1f 93       	push	r17
    7b66:	cf 93       	push	r28
    7b68:	df 93       	push	r29
    7b6a:	dc 01       	movw	r26, r24
    7b6c:	eb 01       	movw	r28, r22
    7b6e:	fa 01       	movw	r30, r20
    7b70:	b9 01       	movw	r22, r18
    7b72:	98 01       	movw	r18, r16
    7b74:	a6 01       	movw	r20, r12
    7b76:	9a 2d       	mov	r25, r10
    7b78:	a5 fa       	bst	r10, 5
    7b7a:	cc 24       	eor	r12, r12
    7b7c:	c0 f8       	bld	r12, 0
    7b7e:	a6 fc       	sbrc	r10, 6
    7b80:	07 c0       	rjmp	.+14     	; 0x7b90 <p_ntoa+0x38>
    7b82:	a2 fc       	sbrc	r10, 2
    7b84:	08 c0       	rjmp	.+16     	; 0x7b96 <p_ntoa+0x3e>
    7b86:	a4 fe       	sbrs	r10, 4
    7b88:	09 c0       	rjmp	.+18     	; 0x7b9c <p_ntoa+0x44>
    7b8a:	00 e2       	ldi	r16, 0x20	; 32
    7b8c:	10 e0       	ldi	r17, 0x00	; 0
    7b8e:	08 c0       	rjmp	.+16     	; 0x7ba0 <p_ntoa+0x48>
    7b90:	0d e2       	ldi	r16, 0x2D	; 45
    7b92:	10 e0       	ldi	r17, 0x00	; 0
    7b94:	05 c0       	rjmp	.+10     	; 0x7ba0 <p_ntoa+0x48>
    7b96:	0b e2       	ldi	r16, 0x2B	; 43
    7b98:	10 e0       	ldi	r17, 0x00	; 0
    7b9a:	02 c0       	rjmp	.+4      	; 0x7ba0 <p_ntoa+0x48>
    7b9c:	00 e0       	ldi	r16, 0x00	; 0
    7b9e:	10 e0       	ldi	r17, 0x00	; 0
    7ba0:	95 ff       	sbrs	r25, 5
    7ba2:	04 c0       	rjmp	.+8      	; 0x7bac <p_ntoa+0x54>
    7ba4:	89 2f       	mov	r24, r25
    7ba6:	8a 70       	andi	r24, 0x0A	; 10
    7ba8:	09 f0       	breq	.+2      	; 0x7bac <p_ntoa+0x54>
    7baa:	c1 2c       	mov	r12, r1
    7bac:	c0 fa       	bst	r12, 0
    7bae:	95 f9       	bld	r25, 5
    7bb0:	89 2f       	mov	r24, r25
    7bb2:	82 70       	andi	r24, 0x02	; 2
    7bb4:	c8 2e       	mov	r12, r24
    7bb6:	91 fd       	sbrc	r25, 1
    7bb8:	02 c0       	rjmp	.+4      	; 0x7bbe <p_ntoa+0x66>
    7bba:	40 e0       	ldi	r20, 0x00	; 0
    7bbc:	50 e0       	ldi	r21, 0x00	; 0
    7bbe:	89 2f       	mov	r24, r25
    7bc0:	83 70       	andi	r24, 0x03	; 3
    7bc2:	11 f4       	brne	.+4      	; 0x7bc8 <p_ntoa+0x70>
    7bc4:	41 e0       	ldi	r20, 0x01	; 1
    7bc6:	50 e0       	ldi	r21, 0x00	; 0
    7bc8:	90 ff       	sbrs	r25, 0
    7bca:	0c c0       	rjmp	.+24     	; 0x7be4 <p_ntoa+0x8c>
    7bcc:	95 fd       	sbrc	r25, 5
    7bce:	05 c0       	rjmp	.+10     	; 0x7bda <p_ntoa+0x82>
    7bd0:	c1 10       	cpse	r12, r1
    7bd2:	08 c0       	rjmp	.+16     	; 0x7be4 <p_ntoa+0x8c>
    7bd4:	41 e0       	ldi	r20, 0x01	; 1
    7bd6:	50 e0       	ldi	r21, 0x00	; 0
    7bd8:	05 c0       	rjmp	.+10     	; 0x7be4 <p_ntoa+0x8c>
    7bda:	94 75       	andi	r25, 0x54	; 84
    7bdc:	a7 01       	movw	r20, r14
    7bde:	11 f0       	breq	.+4      	; 0x7be4 <p_ntoa+0x8c>
    7be0:	41 50       	subi	r20, 0x01	; 1
    7be2:	51 09       	sbc	r21, r1
    7be4:	68 01       	movw	r12, r16
    7be6:	7e 01       	movw	r14, r28
    7be8:	8d 01       	movw	r16, r26
    7bea:	cf 01       	movw	r24, r30
    7bec:	fb de       	rcall	.-522    	; 0x79e4 <bin2num>
    7bee:	df 91       	pop	r29
    7bf0:	cf 91       	pop	r28
    7bf2:	1f 91       	pop	r17
    7bf4:	0f 91       	pop	r16
    7bf6:	ff 90       	pop	r15
    7bf8:	ef 90       	pop	r14
    7bfa:	df 90       	pop	r13
    7bfc:	cf 90       	pop	r12
    7bfe:	af 90       	pop	r10
    7c00:	08 95       	ret

00007c02 <p_ftoa>:
    7c02:	2f 92       	push	r2
    7c04:	3f 92       	push	r3
    7c06:	4f 92       	push	r4
    7c08:	5f 92       	push	r5
    7c0a:	6f 92       	push	r6
    7c0c:	7f 92       	push	r7
    7c0e:	8f 92       	push	r8
    7c10:	9f 92       	push	r9
    7c12:	af 92       	push	r10
    7c14:	bf 92       	push	r11
    7c16:	cf 92       	push	r12
    7c18:	ef 92       	push	r14
    7c1a:	ff 92       	push	r15
    7c1c:	0f 93       	push	r16
    7c1e:	1f 93       	push	r17
    7c20:	cf 93       	push	r28
    7c22:	df 93       	push	r29
    7c24:	4b 01       	movw	r8, r22
    7c26:	5c 01       	movw	r10, r24
    7c28:	1a 01       	movw	r2, r20
    7c2a:	38 01       	movw	r6, r16
    7c2c:	c6 fa       	bst	r12, 6
    7c2e:	cc 27       	eor	r28, r28
    7c30:	c0 f9       	bld	r28, 0
    7c32:	b9 01       	movw	r22, r18
    7c34:	ca 01       	movw	r24, r20
    7c36:	5f df       	rcall	.-322    	; 0x7af6 <pch_init>
    7c38:	20 e0       	ldi	r18, 0x00	; 0
    7c3a:	30 e0       	ldi	r19, 0x00	; 0
    7c3c:	a9 01       	movw	r20, r18
    7c3e:	c5 01       	movw	r24, r10
    7c40:	b4 01       	movw	r22, r8
    7c42:	0e 94 4d ea 	call	0x1d49a	; 0x1d49a <__cmpsf2>
    7c46:	87 ff       	sbrs	r24, 7
    7c48:	05 c0       	rjmp	.+10     	; 0x7c54 <p_ftoa+0x52>
    7c4a:	b7 fa       	bst	r11, 7
    7c4c:	b0 94       	com	r11
    7c4e:	b7 f8       	bld	r11, 7
    7c50:	b0 94       	com	r11
    7c52:	c1 e0       	ldi	r28, 0x01	; 1
    7c54:	c0 fb       	bst	r28, 0
    7c56:	c6 f8       	bld	r12, 6
    7c58:	c6 fe       	sbrs	r12, 6
    7c5a:	02 c0       	rjmp	.+4      	; 0x7c60 <p_ftoa+0x5e>
    7c5c:	8d e2       	ldi	r24, 0x2D	; 45
    7c5e:	07 c0       	rjmp	.+14     	; 0x7c6e <p_ftoa+0x6c>
    7c60:	c2 fe       	sbrs	r12, 2
    7c62:	02 c0       	rjmp	.+4      	; 0x7c68 <p_ftoa+0x66>
    7c64:	8b e2       	ldi	r24, 0x2B	; 43
    7c66:	03 c0       	rjmp	.+6      	; 0x7c6e <p_ftoa+0x6c>
    7c68:	c4 fe       	sbrs	r12, 4
    7c6a:	02 c0       	rjmp	.+4      	; 0x7c70 <p_ftoa+0x6e>
    7c6c:	80 e2       	ldi	r24, 0x20	; 32
    7c6e:	50 df       	rcall	.-352    	; 0x7b10 <pch>
    7c70:	e7 01       	movw	r28, r14
    7c72:	f7 fe       	sbrs	r15, 7
    7c74:	02 c0       	rjmp	.+4      	; 0x7c7a <p_ftoa+0x78>
    7c76:	c0 e0       	ldi	r28, 0x00	; 0
    7c78:	d0 e0       	ldi	r29, 0x00	; 0
    7c7a:	20 e0       	ldi	r18, 0x00	; 0
    7c7c:	30 e0       	ldi	r19, 0x00	; 0
    7c7e:	a9 01       	movw	r20, r18
    7c80:	c5 01       	movw	r24, r10
    7c82:	b4 01       	movw	r22, r8
    7c84:	0e 94 4d ea 	call	0x1d49a	; 0x1d49a <__cmpsf2>
    7c88:	88 23       	and	r24, r24
    7c8a:	d1 f1       	breq	.+116    	; 0x7d00 <p_ftoa+0xfe>
    7c8c:	c1 fe       	sbrs	r12, 1
    7c8e:	11 c0       	rjmp	.+34     	; 0x7cb2 <p_ftoa+0xb0>
    7c90:	8e 01       	movw	r16, r28
    7c92:	60 e0       	ldi	r22, 0x00	; 0
    7c94:	70 e0       	ldi	r23, 0x00	; 0
    7c96:	80 e0       	ldi	r24, 0x00	; 0
    7c98:	9f e3       	ldi	r25, 0x3F	; 63
    7c9a:	01 15       	cp	r16, r1
    7c9c:	11 05       	cpc	r17, r1
    7c9e:	69 f0       	breq	.+26     	; 0x7cba <p_ftoa+0xb8>
    7ca0:	20 e0       	ldi	r18, 0x00	; 0
    7ca2:	30 e0       	ldi	r19, 0x00	; 0
    7ca4:	40 e2       	ldi	r20, 0x20	; 32
    7ca6:	51 e4       	ldi	r21, 0x41	; 65
    7ca8:	0e 94 51 ea 	call	0x1d4a2	; 0x1d4a2 <__divsf3>
    7cac:	01 50       	subi	r16, 0x01	; 1
    7cae:	11 09       	sbc	r17, r1
    7cb0:	f4 cf       	rjmp	.-24     	; 0x7c9a <p_ftoa+0x98>
    7cb2:	60 e0       	ldi	r22, 0x00	; 0
    7cb4:	70 e0       	ldi	r23, 0x00	; 0
    7cb6:	80 e0       	ldi	r24, 0x00	; 0
    7cb8:	9f e3       	ldi	r25, 0x3F	; 63
    7cba:	9b 01       	movw	r18, r22
    7cbc:	ac 01       	movw	r20, r24
    7cbe:	c5 01       	movw	r24, r10
    7cc0:	b4 01       	movw	r22, r8
    7cc2:	0e 94 e9 e9 	call	0x1d3d2	; 0x1d3d2 <__addsf3>
    7cc6:	4b 01       	movw	r8, r22
    7cc8:	5c 01       	movw	r10, r24
    7cca:	ee 24       	eor	r14, r14
    7ccc:	e3 94       	inc	r14
    7cce:	f1 2c       	mov	r15, r1
    7cd0:	20 e0       	ldi	r18, 0x00	; 0
    7cd2:	30 e0       	ldi	r19, 0x00	; 0
    7cd4:	40 e2       	ldi	r20, 0x20	; 32
    7cd6:	51 e4       	ldi	r21, 0x41	; 65
    7cd8:	c5 01       	movw	r24, r10
    7cda:	b4 01       	movw	r22, r8
    7cdc:	0e 94 9c eb 	call	0x1d738	; 0x1d738 <__gesf2>
    7ce0:	87 fd       	sbrc	r24, 7
    7ce2:	11 c0       	rjmp	.+34     	; 0x7d06 <p_ftoa+0x104>
    7ce4:	2f ef       	ldi	r18, 0xFF	; 255
    7ce6:	e2 1a       	sub	r14, r18
    7ce8:	f2 0a       	sbc	r15, r18
    7cea:	20 e0       	ldi	r18, 0x00	; 0
    7cec:	30 e0       	ldi	r19, 0x00	; 0
    7cee:	40 e2       	ldi	r20, 0x20	; 32
    7cf0:	51 e4       	ldi	r21, 0x41	; 65
    7cf2:	c5 01       	movw	r24, r10
    7cf4:	b4 01       	movw	r22, r8
    7cf6:	0e 94 51 ea 	call	0x1d4a2	; 0x1d4a2 <__divsf3>
    7cfa:	4b 01       	movw	r8, r22
    7cfc:	5c 01       	movw	r10, r24
    7cfe:	e8 cf       	rjmp	.-48     	; 0x7cd0 <p_ftoa+0xce>
    7d00:	ee 24       	eor	r14, r14
    7d02:	e3 94       	inc	r14
    7d04:	f1 2c       	mov	r15, r1
    7d06:	8c 2d       	mov	r24, r12
    7d08:	88 72       	andi	r24, 0x28	; 40
    7d0a:	80 32       	cpi	r24, 0x20	; 32
    7d0c:	b9 f4       	brne	.+46     	; 0x7d3c <p_ftoa+0x13a>
    7d0e:	83 01       	movw	r16, r6
    7d10:	0e 19       	sub	r16, r14
    7d12:	1f 09       	sbc	r17, r15
    7d14:	80 91 c7 1a 	lds	r24, 0x1AC7	; 0x801ac7 <_pch+0x2>
    7d18:	90 91 c8 1a 	lds	r25, 0x1AC8	; 0x801ac8 <_pch+0x3>
    7d1c:	08 1b       	sub	r16, r24
    7d1e:	19 0b       	sbc	r17, r25
    7d20:	c1 fe       	sbrs	r12, 1
    7d22:	06 c0       	rjmp	.+12     	; 0x7d30 <p_ftoa+0x12e>
    7d24:	20 97       	sbiw	r28, 0x00	; 0
    7d26:	21 f0       	breq	.+8      	; 0x7d30 <p_ftoa+0x12e>
    7d28:	0c 1b       	sub	r16, r28
    7d2a:	1d 0b       	sbc	r17, r29
    7d2c:	01 50       	subi	r16, 0x01	; 1
    7d2e:	11 09       	sbc	r17, r1
    7d30:	10 16       	cp	r1, r16
    7d32:	11 06       	cpc	r1, r17
    7d34:	1c f4       	brge	.+6      	; 0x7d3c <p_ftoa+0x13a>
    7d36:	80 e3       	ldi	r24, 0x30	; 48
    7d38:	eb de       	rcall	.-554    	; 0x7b10 <pch>
    7d3a:	f8 cf       	rjmp	.-16     	; 0x7d2c <p_ftoa+0x12a>
    7d3c:	c5 01       	movw	r24, r10
    7d3e:	b4 01       	movw	r22, r8
    7d40:	0e 94 b9 ea 	call	0x1d572	; 0x1d572 <__fixsfsi>
    7d44:	2b 01       	movw	r4, r22
    7d46:	3c 01       	movw	r6, r24
    7d48:	80 e3       	ldi	r24, 0x30	; 48
    7d4a:	84 0d       	add	r24, r4
    7d4c:	e1 de       	rcall	.-574    	; 0x7b10 <pch>
    7d4e:	b2 01       	movw	r22, r4
    7d50:	55 0c       	add	r5, r5
    7d52:	88 0b       	sbc	r24, r24
    7d54:	99 0b       	sbc	r25, r25
    7d56:	0e 94 ec ea 	call	0x1d5d8	; 0x1d5d8 <__floatsisf>
    7d5a:	9b 01       	movw	r18, r22
    7d5c:	ac 01       	movw	r20, r24
    7d5e:	c5 01       	movw	r24, r10
    7d60:	b4 01       	movw	r22, r8
    7d62:	0e 94 e8 e9 	call	0x1d3d0	; 0x1d3d0 <__subsf3>
    7d66:	21 e0       	ldi	r18, 0x01	; 1
    7d68:	e2 1a       	sub	r14, r18
    7d6a:	f1 08       	sbc	r15, r1
    7d6c:	20 e0       	ldi	r18, 0x00	; 0
    7d6e:	30 e0       	ldi	r19, 0x00	; 0
    7d70:	40 e2       	ldi	r20, 0x20	; 32
    7d72:	51 e4       	ldi	r21, 0x41	; 65
    7d74:	0e 94 a0 eb 	call	0x1d740	; 0x1d740 <__mulsf3>
    7d78:	4b 01       	movw	r8, r22
    7d7a:	5c 01       	movw	r10, r24
    7d7c:	e1 14       	cp	r14, r1
    7d7e:	f1 04       	cpc	r15, r1
    7d80:	e9 f6       	brne	.-70     	; 0x7d3c <p_ftoa+0x13a>
    7d82:	c1 fc       	sbrc	r12, 1
    7d84:	1c c0       	rjmp	.+56     	; 0x7dbe <p_ftoa+0x1bc>
    7d86:	80 e0       	ldi	r24, 0x00	; 0
    7d88:	c3 de       	rcall	.-634    	; 0x7b10 <pch>
    7d8a:	f1 01       	movw	r30, r2
    7d8c:	01 90       	ld	r0, Z+
    7d8e:	00 20       	and	r0, r0
    7d90:	e9 f7       	brne	.-6      	; 0x7d8c <p_ftoa+0x18a>
    7d92:	31 97       	sbiw	r30, 0x01	; 1
    7d94:	cf 01       	movw	r24, r30
    7d96:	82 19       	sub	r24, r2
    7d98:	93 09       	sbc	r25, r3
    7d9a:	df 91       	pop	r29
    7d9c:	cf 91       	pop	r28
    7d9e:	1f 91       	pop	r17
    7da0:	0f 91       	pop	r16
    7da2:	ff 90       	pop	r15
    7da4:	ef 90       	pop	r14
    7da6:	cf 90       	pop	r12
    7da8:	bf 90       	pop	r11
    7daa:	af 90       	pop	r10
    7dac:	9f 90       	pop	r9
    7dae:	8f 90       	pop	r8
    7db0:	7f 90       	pop	r7
    7db2:	6f 90       	pop	r6
    7db4:	5f 90       	pop	r5
    7db6:	4f 90       	pop	r4
    7db8:	3f 90       	pop	r3
    7dba:	2f 90       	pop	r2
    7dbc:	08 95       	ret
    7dbe:	20 97       	sbiw	r28, 0x00	; 0
    7dc0:	11 f3       	breq	.-60     	; 0x7d86 <p_ftoa+0x184>
    7dc2:	8e e2       	ldi	r24, 0x2E	; 46
    7dc4:	a5 de       	rcall	.-694    	; 0x7b10 <pch>
    7dc6:	c5 01       	movw	r24, r10
    7dc8:	b4 01       	movw	r22, r8
    7dca:	0e 94 b9 ea 	call	0x1d572	; 0x1d572 <__fixsfsi>
    7dce:	2b 01       	movw	r4, r22
    7dd0:	3c 01       	movw	r6, r24
    7dd2:	07 2e       	mov	r0, r23
    7dd4:	00 0c       	add	r0, r0
    7dd6:	88 0b       	sbc	r24, r24
    7dd8:	99 0b       	sbc	r25, r25
    7dda:	0e 94 ec ea 	call	0x1d5d8	; 0x1d5d8 <__floatsisf>
    7dde:	9b 01       	movw	r18, r22
    7de0:	ac 01       	movw	r20, r24
    7de2:	c5 01       	movw	r24, r10
    7de4:	b4 01       	movw	r22, r8
    7de6:	0e 94 e8 e9 	call	0x1d3d0	; 0x1d3d0 <__subsf3>
    7dea:	4b 01       	movw	r8, r22
    7dec:	5c 01       	movw	r10, r24
    7dee:	80 e3       	ldi	r24, 0x30	; 48
    7df0:	84 0d       	add	r24, r4
    7df2:	8e de       	rcall	.-740    	; 0x7b10 <pch>
    7df4:	21 97       	sbiw	r28, 0x01	; 1
    7df6:	20 e0       	ldi	r18, 0x00	; 0
    7df8:	30 e0       	ldi	r19, 0x00	; 0
    7dfa:	40 e2       	ldi	r20, 0x20	; 32
    7dfc:	51 e4       	ldi	r21, 0x41	; 65
    7dfe:	c5 01       	movw	r24, r10
    7e00:	b4 01       	movw	r22, r8
    7e02:	0e 94 a0 eb 	call	0x1d740	; 0x1d740 <__mulsf3>
    7e06:	4b 01       	movw	r8, r22
    7e08:	5c 01       	movw	r10, r24
    7e0a:	20 97       	sbiw	r28, 0x00	; 0
    7e0c:	e1 f6       	brne	.-72     	; 0x7dc6 <p_ftoa+0x1c4>
    7e0e:	bb cf       	rjmp	.-138    	; 0x7d86 <p_ftoa+0x184>

00007e10 <p_etoa>:
    7e10:	ad e0       	ldi	r26, 0x0D	; 13
    7e12:	b0 e0       	ldi	r27, 0x00	; 0
    7e14:	ee e0       	ldi	r30, 0x0E	; 14
    7e16:	ff e3       	ldi	r31, 0x3F	; 63
    7e18:	0c 94 8f e9 	jmp	0x1d31e	; 0x1d31e <__prologue_saves__>
    7e1c:	4b 01       	movw	r8, r22
    7e1e:	5c 01       	movw	r10, r24
    7e20:	5b 87       	std	Y+11, r21	; 0x0b
    7e22:	4a 87       	std	Y+10, r20	; 0x0a
    7e24:	1d 87       	std	Y+13, r17	; 0x0d
    7e26:	0c 87       	std	Y+12, r16	; 0x0c
    7e28:	3c 2c       	mov	r3, r12
    7e2a:	c6 fa       	bst	r12, 6
    7e2c:	11 27       	eor	r17, r17
    7e2e:	10 f9       	bld	r17, 0
    7e30:	b9 01       	movw	r22, r18
    7e32:	ca 01       	movw	r24, r20
    7e34:	60 de       	rcall	.-832    	; 0x7af6 <pch_init>
    7e36:	20 e0       	ldi	r18, 0x00	; 0
    7e38:	30 e0       	ldi	r19, 0x00	; 0
    7e3a:	a9 01       	movw	r20, r18
    7e3c:	c5 01       	movw	r24, r10
    7e3e:	b4 01       	movw	r22, r8
    7e40:	0e 94 4d ea 	call	0x1d49a	; 0x1d49a <__cmpsf2>
    7e44:	87 ff       	sbrs	r24, 7
    7e46:	05 c0       	rjmp	.+10     	; 0x7e52 <p_etoa+0x42>
    7e48:	b7 fa       	bst	r11, 7
    7e4a:	b0 94       	com	r11
    7e4c:	b7 f8       	bld	r11, 7
    7e4e:	b0 94       	com	r11
    7e50:	11 e0       	ldi	r17, 0x01	; 1
    7e52:	10 fb       	bst	r17, 0
    7e54:	36 f8       	bld	r3, 6
    7e56:	36 fe       	sbrs	r3, 6
    7e58:	02 c0       	rjmp	.+4      	; 0x7e5e <p_etoa+0x4e>
    7e5a:	8d e2       	ldi	r24, 0x2D	; 45
    7e5c:	07 c0       	rjmp	.+14     	; 0x7e6c <p_etoa+0x5c>
    7e5e:	32 fe       	sbrs	r3, 2
    7e60:	02 c0       	rjmp	.+4      	; 0x7e66 <p_etoa+0x56>
    7e62:	8b e2       	ldi	r24, 0x2B	; 43
    7e64:	03 c0       	rjmp	.+6      	; 0x7e6c <p_etoa+0x5c>
    7e66:	34 fe       	sbrs	r3, 4
    7e68:	02 c0       	rjmp	.+4      	; 0x7e6e <p_etoa+0x5e>
    7e6a:	80 e2       	ldi	r24, 0x20	; 32
    7e6c:	51 de       	rcall	.-862    	; 0x7b10 <pch>
    7e6e:	37 01       	movw	r6, r14
    7e70:	f7 fe       	sbrs	r15, 7
    7e72:	02 c0       	rjmp	.+4      	; 0x7e78 <p_etoa+0x68>
    7e74:	61 2c       	mov	r6, r1
    7e76:	71 2c       	mov	r7, r1
    7e78:	19 86       	std	Y+9, r1	; 0x09
    7e7a:	18 86       	std	Y+8, r1	; 0x08
    7e7c:	20 e0       	ldi	r18, 0x00	; 0
    7e7e:	30 e0       	ldi	r19, 0x00	; 0
    7e80:	a9 01       	movw	r20, r18
    7e82:	c5 01       	movw	r24, r10
    7e84:	b4 01       	movw	r22, r8
    7e86:	0e 94 4d ea 	call	0x1d49a	; 0x1d49a <__cmpsf2>
    7e8a:	23 2d       	mov	r18, r3
    7e8c:	22 70       	andi	r18, 0x02	; 2
    7e8e:	22 2e       	mov	r2, r18
    7e90:	88 23       	and	r24, r24
    7e92:	09 f4       	brne	.+2      	; 0x7e96 <p_etoa+0x86>
    7e94:	70 c0       	rjmp	.+224    	; 0x7f76 <p_etoa+0x166>
    7e96:	22 23       	and	r18, r18
    7e98:	b1 f0       	breq	.+44     	; 0x7ec6 <p_etoa+0xb6>
    7e9a:	83 01       	movw	r16, r6
    7e9c:	c1 2c       	mov	r12, r1
    7e9e:	d1 2c       	mov	r13, r1
    7ea0:	e1 2c       	mov	r14, r1
    7ea2:	2f e3       	ldi	r18, 0x3F	; 63
    7ea4:	f2 2e       	mov	r15, r18
    7ea6:	01 15       	cp	r16, r1
    7ea8:	11 05       	cpc	r17, r1
    7eaa:	91 f0       	breq	.+36     	; 0x7ed0 <p_etoa+0xc0>
    7eac:	20 e0       	ldi	r18, 0x00	; 0
    7eae:	30 e0       	ldi	r19, 0x00	; 0
    7eb0:	40 e2       	ldi	r20, 0x20	; 32
    7eb2:	51 e4       	ldi	r21, 0x41	; 65
    7eb4:	c7 01       	movw	r24, r14
    7eb6:	b6 01       	movw	r22, r12
    7eb8:	0e 94 51 ea 	call	0x1d4a2	; 0x1d4a2 <__divsf3>
    7ebc:	6b 01       	movw	r12, r22
    7ebe:	7c 01       	movw	r14, r24
    7ec0:	01 50       	subi	r16, 0x01	; 1
    7ec2:	11 09       	sbc	r17, r1
    7ec4:	f0 cf       	rjmp	.-32     	; 0x7ea6 <p_etoa+0x96>
    7ec6:	c1 2c       	mov	r12, r1
    7ec8:	d1 2c       	mov	r13, r1
    7eca:	e1 2c       	mov	r14, r1
    7ecc:	9f e3       	ldi	r25, 0x3F	; 63
    7ece:	f9 2e       	mov	r15, r25
    7ed0:	41 2c       	mov	r4, r1
    7ed2:	51 2c       	mov	r5, r1
    7ed4:	82 01       	movw	r16, r4
    7ed6:	01 50       	subi	r16, 0x01	; 1
    7ed8:	11 09       	sbc	r17, r1
    7eda:	20 e0       	ldi	r18, 0x00	; 0
    7edc:	30 e0       	ldi	r19, 0x00	; 0
    7ede:	40 e8       	ldi	r20, 0x80	; 128
    7ee0:	5f e3       	ldi	r21, 0x3F	; 63
    7ee2:	c5 01       	movw	r24, r10
    7ee4:	b4 01       	movw	r22, r8
    7ee6:	0e 94 4d ea 	call	0x1d49a	; 0x1d49a <__cmpsf2>
    7eea:	87 ff       	sbrs	r24, 7
    7eec:	0c c0       	rjmp	.+24     	; 0x7f06 <p_etoa+0xf6>
    7eee:	20 e0       	ldi	r18, 0x00	; 0
    7ef0:	30 e0       	ldi	r19, 0x00	; 0
    7ef2:	40 e2       	ldi	r20, 0x20	; 32
    7ef4:	51 e4       	ldi	r21, 0x41	; 65
    7ef6:	c5 01       	movw	r24, r10
    7ef8:	b4 01       	movw	r22, r8
    7efa:	0e 94 a0 eb 	call	0x1d740	; 0x1d740 <__mulsf3>
    7efe:	4b 01       	movw	r8, r22
    7f00:	5c 01       	movw	r10, r24
    7f02:	28 01       	movw	r4, r16
    7f04:	e7 cf       	rjmp	.-50     	; 0x7ed4 <p_etoa+0xc4>
    7f06:	82 01       	movw	r16, r4
    7f08:	0f 5f       	subi	r16, 0xFF	; 255
    7f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    7f0c:	20 e0       	ldi	r18, 0x00	; 0
    7f0e:	30 e0       	ldi	r19, 0x00	; 0
    7f10:	40 e2       	ldi	r20, 0x20	; 32
    7f12:	51 e4       	ldi	r21, 0x41	; 65
    7f14:	c5 01       	movw	r24, r10
    7f16:	b4 01       	movw	r22, r8
    7f18:	0e 94 9c eb 	call	0x1d738	; 0x1d738 <__gesf2>
    7f1c:	87 fd       	sbrc	r24, 7
    7f1e:	0c c0       	rjmp	.+24     	; 0x7f38 <p_etoa+0x128>
    7f20:	20 e0       	ldi	r18, 0x00	; 0
    7f22:	30 e0       	ldi	r19, 0x00	; 0
    7f24:	40 e2       	ldi	r20, 0x20	; 32
    7f26:	51 e4       	ldi	r21, 0x41	; 65
    7f28:	c5 01       	movw	r24, r10
    7f2a:	b4 01       	movw	r22, r8
    7f2c:	0e 94 51 ea 	call	0x1d4a2	; 0x1d4a2 <__divsf3>
    7f30:	4b 01       	movw	r8, r22
    7f32:	5c 01       	movw	r10, r24
    7f34:	28 01       	movw	r4, r16
    7f36:	e7 cf       	rjmp	.-50     	; 0x7f06 <p_etoa+0xf6>
    7f38:	a7 01       	movw	r20, r14
    7f3a:	96 01       	movw	r18, r12
    7f3c:	c5 01       	movw	r24, r10
    7f3e:	b4 01       	movw	r22, r8
    7f40:	0e 94 e9 e9 	call	0x1d3d2	; 0x1d3d2 <__addsf3>
    7f44:	4b 01       	movw	r8, r22
    7f46:	5c 01       	movw	r10, r24
    7f48:	82 01       	movw	r16, r4
    7f4a:	3f ef       	ldi	r19, 0xFF	; 255
    7f4c:	43 1a       	sub	r4, r19
    7f4e:	53 0a       	sbc	r5, r19
    7f50:	20 e0       	ldi	r18, 0x00	; 0
    7f52:	30 e0       	ldi	r19, 0x00	; 0
    7f54:	40 e2       	ldi	r20, 0x20	; 32
    7f56:	51 e4       	ldi	r21, 0x41	; 65
    7f58:	0e 94 9c eb 	call	0x1d738	; 0x1d738 <__gesf2>
    7f5c:	87 fd       	sbrc	r24, 7
    7f5e:	09 c0       	rjmp	.+18     	; 0x7f72 <p_etoa+0x162>
    7f60:	20 e0       	ldi	r18, 0x00	; 0
    7f62:	30 e0       	ldi	r19, 0x00	; 0
    7f64:	40 e2       	ldi	r20, 0x20	; 32
    7f66:	51 e4       	ldi	r21, 0x41	; 65
    7f68:	c5 01       	movw	r24, r10
    7f6a:	b4 01       	movw	r22, r8
    7f6c:	0e 94 51 ea 	call	0x1d4a2	; 0x1d4a2 <__divsf3>
    7f70:	e9 cf       	rjmp	.-46     	; 0x7f44 <p_etoa+0x134>
    7f72:	08 87       	std	Y+8, r16	; 0x08
    7f74:	19 87       	std	Y+9, r17	; 0x09
    7f76:	85 e6       	ldi	r24, 0x65	; 101
    7f78:	89 83       	std	Y+1, r24	; 0x01
    7f7a:	88 85       	ldd	r24, Y+8	; 0x08
    7f7c:	99 85       	ldd	r25, Y+9	; 0x09
    7f7e:	97 ff       	sbrs	r25, 7
    7f80:	08 c0       	rjmp	.+16     	; 0x7f92 <p_etoa+0x182>
    7f82:	91 95       	neg	r25
    7f84:	81 95       	neg	r24
    7f86:	91 09       	sbc	r25, r1
    7f88:	99 87       	std	Y+9, r25	; 0x09
    7f8a:	88 87       	std	Y+8, r24	; 0x08
    7f8c:	8d e2       	ldi	r24, 0x2D	; 45
    7f8e:	90 e0       	ldi	r25, 0x00	; 0
    7f90:	02 c0       	rjmp	.+4      	; 0x7f96 <p_etoa+0x186>
    7f92:	8b e2       	ldi	r24, 0x2B	; 43
    7f94:	90 e0       	ldi	r25, 0x00	; 0
    7f96:	6c 01       	movw	r12, r24
    7f98:	82 e0       	ldi	r24, 0x02	; 2
    7f9a:	e8 2e       	mov	r14, r24
    7f9c:	f1 2c       	mov	r15, r1
    7f9e:	8e 01       	movw	r16, r28
    7fa0:	08 5f       	subi	r16, 0xF8	; 248
    7fa2:	1f 4f       	sbci	r17, 0xFF	; 255
    7fa4:	2a e0       	ldi	r18, 0x0A	; 10
    7fa6:	30 e0       	ldi	r19, 0x00	; 0
    7fa8:	42 e0       	ldi	r20, 0x02	; 2
    7faa:	50 e0       	ldi	r21, 0x00	; 0
    7fac:	65 e0       	ldi	r22, 0x05	; 5
    7fae:	70 e0       	ldi	r23, 0x00	; 0
    7fb0:	ce 01       	movw	r24, r28
    7fb2:	02 96       	adiw	r24, 0x02	; 2
    7fb4:	17 dd       	rcall	.-1490   	; 0x79e4 <bin2num>
    7fb6:	9c 01       	movw	r18, r24
    7fb8:	93 2d       	mov	r25, r3
    7fba:	98 72       	andi	r25, 0x28	; 40
    7fbc:	90 32       	cpi	r25, 0x20	; 32
    7fbe:	61 f0       	breq	.+24     	; 0x7fd8 <p_etoa+0x1c8>
    7fc0:	c5 01       	movw	r24, r10
    7fc2:	b4 01       	movw	r22, r8
    7fc4:	0e 94 b9 ea 	call	0x1d572	; 0x1d572 <__fixsfsi>
    7fc8:	6b 01       	movw	r12, r22
    7fca:	7c 01       	movw	r14, r24
    7fcc:	80 e3       	ldi	r24, 0x30	; 48
    7fce:	8c 0d       	add	r24, r12
    7fd0:	9f dd       	rcall	.-1218   	; 0x7b10 <pch>
    7fd2:	21 10       	cpse	r2, r1
    7fd4:	20 c0       	rjmp	.+64     	; 0x8016 <p_etoa+0x206>
    7fd6:	5e c0       	rjmp	.+188    	; 0x8094 <p_etoa+0x284>
    7fd8:	80 91 c7 1a 	lds	r24, 0x1AC7	; 0x801ac7 <_pch+0x2>
    7fdc:	90 91 c8 1a 	lds	r25, 0x1AC8	; 0x801ac8 <_pch+0x3>
    7fe0:	0c 85       	ldd	r16, Y+12	; 0x0c
    7fe2:	1d 85       	ldd	r17, Y+13	; 0x0d
    7fe4:	08 1b       	sub	r16, r24
    7fe6:	19 0b       	sbc	r17, r25
    7fe8:	22 20       	and	r2, r2
    7fea:	41 f0       	breq	.+16     	; 0x7ffc <p_etoa+0x1ec>
    7fec:	61 14       	cp	r6, r1
    7fee:	71 04       	cpc	r7, r1
    7ff0:	29 f0       	breq	.+10     	; 0x7ffc <p_etoa+0x1ec>
    7ff2:	06 19       	sub	r16, r6
    7ff4:	17 09       	sbc	r17, r7
    7ff6:	06 50       	subi	r16, 0x06	; 6
    7ff8:	11 09       	sbc	r17, r1
    7ffa:	02 c0       	rjmp	.+4      	; 0x8000 <p_etoa+0x1f0>
    7ffc:	05 50       	subi	r16, 0x05	; 5
    7ffe:	11 09       	sbc	r17, r1
    8000:	24 30       	cpi	r18, 0x04	; 4
    8002:	31 05       	cpc	r19, r1
    8004:	14 f0       	brlt	.+4      	; 0x800a <p_etoa+0x1fa>
    8006:	01 50       	subi	r16, 0x01	; 1
    8008:	11 09       	sbc	r17, r1
    800a:	10 16       	cp	r1, r16
    800c:	11 06       	cpc	r1, r17
    800e:	c4 f6       	brge	.-80     	; 0x7fc0 <p_etoa+0x1b0>
    8010:	80 e3       	ldi	r24, 0x30	; 48
    8012:	7e dd       	rcall	.-1284   	; 0x7b10 <pch>
    8014:	f8 cf       	rjmp	.-16     	; 0x8006 <p_etoa+0x1f6>
    8016:	61 14       	cp	r6, r1
    8018:	71 04       	cpc	r7, r1
    801a:	09 f4       	brne	.+2      	; 0x801e <p_etoa+0x20e>
    801c:	3b c0       	rjmp	.+118    	; 0x8094 <p_etoa+0x284>
    801e:	b6 01       	movw	r22, r12
    8020:	dd 0c       	add	r13, r13
    8022:	88 0b       	sbc	r24, r24
    8024:	99 0b       	sbc	r25, r25
    8026:	0e 94 ec ea 	call	0x1d5d8	; 0x1d5d8 <__floatsisf>
    802a:	9b 01       	movw	r18, r22
    802c:	ac 01       	movw	r20, r24
    802e:	c5 01       	movw	r24, r10
    8030:	b4 01       	movw	r22, r8
    8032:	0e 94 e8 e9 	call	0x1d3d0	; 0x1d3d0 <__subsf3>
    8036:	20 e0       	ldi	r18, 0x00	; 0
    8038:	30 e0       	ldi	r19, 0x00	; 0
    803a:	40 e2       	ldi	r20, 0x20	; 32
    803c:	51 e4       	ldi	r21, 0x41	; 65
    803e:	0e 94 a0 eb 	call	0x1d740	; 0x1d740 <__mulsf3>
    8042:	6b 01       	movw	r12, r22
    8044:	7c 01       	movw	r14, r24
    8046:	8e e2       	ldi	r24, 0x2E	; 46
    8048:	63 dd       	rcall	.-1338   	; 0x7b10 <pch>
    804a:	c7 01       	movw	r24, r14
    804c:	b6 01       	movw	r22, r12
    804e:	0e 94 b9 ea 	call	0x1d572	; 0x1d572 <__fixsfsi>
    8052:	4b 01       	movw	r8, r22
    8054:	5c 01       	movw	r10, r24
    8056:	07 2e       	mov	r0, r23
    8058:	00 0c       	add	r0, r0
    805a:	88 0b       	sbc	r24, r24
    805c:	99 0b       	sbc	r25, r25
    805e:	0e 94 ec ea 	call	0x1d5d8	; 0x1d5d8 <__floatsisf>
    8062:	9b 01       	movw	r18, r22
    8064:	ac 01       	movw	r20, r24
    8066:	c7 01       	movw	r24, r14
    8068:	b6 01       	movw	r22, r12
    806a:	0e 94 e8 e9 	call	0x1d3d0	; 0x1d3d0 <__subsf3>
    806e:	6b 01       	movw	r12, r22
    8070:	7c 01       	movw	r14, r24
    8072:	80 e3       	ldi	r24, 0x30	; 48
    8074:	88 0d       	add	r24, r8
    8076:	4c dd       	rcall	.-1384   	; 0x7b10 <pch>
    8078:	20 e0       	ldi	r18, 0x00	; 0
    807a:	30 e0       	ldi	r19, 0x00	; 0
    807c:	40 e2       	ldi	r20, 0x20	; 32
    807e:	51 e4       	ldi	r21, 0x41	; 65
    8080:	c7 01       	movw	r24, r14
    8082:	b6 01       	movw	r22, r12
    8084:	0e 94 a0 eb 	call	0x1d740	; 0x1d740 <__mulsf3>
    8088:	6b 01       	movw	r12, r22
    808a:	7c 01       	movw	r14, r24
    808c:	81 e0       	ldi	r24, 0x01	; 1
    808e:	68 1a       	sub	r6, r24
    8090:	71 08       	sbc	r7, r1
    8092:	d9 f6       	brne	.-74     	; 0x804a <p_etoa+0x23a>
    8094:	8e 01       	movw	r16, r28
    8096:	0f 5f       	subi	r16, 0xFF	; 255
    8098:	1f 4f       	sbci	r17, 0xFF	; 255
    809a:	f8 01       	movw	r30, r16
    809c:	81 91       	ld	r24, Z+
    809e:	8f 01       	movw	r16, r30
    80a0:	88 23       	and	r24, r24
    80a2:	11 f0       	breq	.+4      	; 0x80a8 <p_etoa+0x298>
    80a4:	35 dd       	rcall	.-1430   	; 0x7b10 <pch>
    80a6:	f9 cf       	rjmp	.-14     	; 0x809a <p_etoa+0x28a>
    80a8:	33 dd       	rcall	.-1434   	; 0x7b10 <pch>
    80aa:	ea 85       	ldd	r30, Y+10	; 0x0a
    80ac:	fb 85       	ldd	r31, Y+11	; 0x0b
    80ae:	01 90       	ld	r0, Z+
    80b0:	00 20       	and	r0, r0
    80b2:	e9 f7       	brne	.-6      	; 0x80ae <p_etoa+0x29e>
    80b4:	cf 01       	movw	r24, r30
    80b6:	01 97       	sbiw	r24, 0x01	; 1
    80b8:	2a 85       	ldd	r18, Y+10	; 0x0a
    80ba:	3b 85       	ldd	r19, Y+11	; 0x0b
    80bc:	82 1b       	sub	r24, r18
    80be:	93 0b       	sbc	r25, r19
    80c0:	2d 96       	adiw	r28, 0x0d	; 13
    80c2:	e2 e1       	ldi	r30, 0x12	; 18
    80c4:	0c 94 ab e9 	jmp	0x1d356	; 0x1d356 <__epilogue_restores__>

000080c8 <_puts_pad>:
    80c8:	a0 e0       	ldi	r26, 0x00	; 0
    80ca:	b0 e0       	ldi	r27, 0x00	; 0
    80cc:	ea e6       	ldi	r30, 0x6A	; 106
    80ce:	f0 e4       	ldi	r31, 0x40	; 64
    80d0:	0c 94 95 e9 	jmp	0x1d32a	; 0x1d32a <__prologue_saves__+0xc>
    80d4:	6c 01       	movw	r12, r24
    80d6:	4b 01       	movw	r8, r22
    80d8:	79 01       	movw	r14, r18
    80da:	24 17       	cp	r18, r20
    80dc:	35 07       	cpc	r19, r21
    80de:	24 f4       	brge	.+8      	; 0x80e8 <_puts_pad+0x20>
    80e0:	ea 01       	movw	r28, r20
    80e2:	c2 1b       	sub	r28, r18
    80e4:	d3 0b       	sbc	r29, r19
    80e6:	02 c0       	rjmp	.+4      	; 0x80ec <_puts_pad+0x24>
    80e8:	c0 e0       	ldi	r28, 0x00	; 0
    80ea:	d0 e0       	ldi	r29, 0x00	; 0
    80ec:	01 15       	cp	r16, r1
    80ee:	11 05       	cpc	r17, r1
    80f0:	49 f4       	brne	.+18     	; 0x8104 <_puts_pad+0x3c>
    80f2:	21 97       	sbiw	r28, 0x01	; 1
    80f4:	38 f0       	brcs	.+14     	; 0x8104 <_puts_pad+0x3c>
    80f6:	d6 01       	movw	r26, r12
    80f8:	ed 91       	ld	r30, X+
    80fa:	fc 91       	ld	r31, X
    80fc:	60 e2       	ldi	r22, 0x20	; 32
    80fe:	c6 01       	movw	r24, r12
    8100:	09 95       	icall
    8102:	f7 cf       	rjmp	.-18     	; 0x80f2 <_puts_pad+0x2a>
    8104:	54 01       	movw	r10, r8
    8106:	f5 01       	movw	r30, r10
    8108:	61 91       	ld	r22, Z+
    810a:	5f 01       	movw	r10, r30
    810c:	66 23       	and	r22, r22
    810e:	61 f0       	breq	.+24     	; 0x8128 <_puts_pad+0x60>
    8110:	e1 14       	cp	r14, r1
    8112:	f1 04       	cpc	r15, r1
    8114:	49 f0       	breq	.+18     	; 0x8128 <_puts_pad+0x60>
    8116:	d6 01       	movw	r26, r12
    8118:	ed 91       	ld	r30, X+
    811a:	fc 91       	ld	r31, X
    811c:	c6 01       	movw	r24, r12
    811e:	09 95       	icall
    8120:	b1 e0       	ldi	r27, 0x01	; 1
    8122:	eb 1a       	sub	r14, r27
    8124:	f1 08       	sbc	r15, r1
    8126:	ef cf       	rjmp	.-34     	; 0x8106 <_puts_pad+0x3e>
    8128:	01 15       	cp	r16, r1
    812a:	11 05       	cpc	r17, r1
    812c:	51 f0       	breq	.+20     	; 0x8142 <_puts_pad+0x7a>
    812e:	20 97       	sbiw	r28, 0x00	; 0
    8130:	41 f0       	breq	.+16     	; 0x8142 <_puts_pad+0x7a>
    8132:	d6 01       	movw	r26, r12
    8134:	ed 91       	ld	r30, X+
    8136:	fc 91       	ld	r31, X
    8138:	60 e2       	ldi	r22, 0x20	; 32
    813a:	c6 01       	movw	r24, r12
    813c:	09 95       	icall
    813e:	21 97       	sbiw	r28, 0x01	; 1
    8140:	f6 cf       	rjmp	.-20     	; 0x812e <_puts_pad+0x66>
    8142:	cd b7       	in	r28, 0x3d	; 61
    8144:	de b7       	in	r29, 0x3e	; 62
    8146:	ec e0       	ldi	r30, 0x0C	; 12
    8148:	0c 94 b1 e9 	jmp	0x1d362	; 0x1d362 <__epilogue_restores__+0xc>

0000814c <_printf_fn>:
    814c:	ab e6       	ldi	r26, 0x6B	; 107
    814e:	b0 e0       	ldi	r27, 0x00	; 0
    8150:	ec ea       	ldi	r30, 0xAC	; 172
    8152:	f0 e4       	ldi	r31, 0x40	; 64
    8154:	0c 94 8f e9 	jmp	0x1d31e	; 0x1d31e <__prologue_saves__>
    8158:	a5 96       	adiw	r28, 0x25	; 37
    815a:	9f af       	std	Y+63, r25	; 0x3f
    815c:	8e af       	std	Y+62, r24	; 0x3e
    815e:	a5 97       	sbiw	r28, 0x25	; 37
    8160:	6a 01       	movw	r12, r20
    8162:	e6 2e       	mov	r14, r22
    8164:	19 01       	movw	r2, r18
    8166:	a9 96       	adiw	r28, 0x29	; 41
    8168:	1c ae       	std	Y+60, r1	; 0x3c
    816a:	1d ae       	std	Y+61, r1	; 0x3d
    816c:	1e ae       	std	Y+62, r1	; 0x3e
    816e:	1f ae       	std	Y+63, r1	; 0x3f
    8170:	a9 97       	sbiw	r28, 0x29	; 41
    8172:	9e 01       	movw	r18, r28
    8174:	2f 5a       	subi	r18, 0xAF	; 175
    8176:	3f 4f       	sbci	r19, 0xFF	; 255
    8178:	67 96       	adiw	r28, 0x17	; 23
    817a:	3f af       	std	Y+63, r19	; 0x3f
    817c:	2e af       	std	Y+62, r18	; 0x3e
    817e:	67 97       	sbiw	r28, 0x17	; 23
    8180:	ae 01       	movw	r20, r28
    8182:	4d 5b       	subi	r20, 0xBD	; 189
    8184:	5f 4f       	sbci	r21, 0xFF	; 255
    8186:	69 96       	adiw	r28, 0x19	; 25
    8188:	5f af       	std	Y+63, r21	; 0x3f
    818a:	4e af       	std	Y+62, r20	; 0x3e
    818c:	69 97       	sbiw	r28, 0x19	; 25
    818e:	ce 01       	movw	r24, r28
    8190:	85 5b       	subi	r24, 0xB5	; 181
    8192:	9f 4f       	sbci	r25, 0xFF	; 255
    8194:	6b 96       	adiw	r28, 0x1b	; 27
    8196:	9f af       	std	Y+63, r25	; 0x3f
    8198:	8e af       	std	Y+62, r24	; 0x3e
    819a:	6b 97       	sbiw	r28, 0x1b	; 27
    819c:	de 01       	movw	r26, r28
    819e:	ad 5a       	subi	r26, 0xAD	; 173
    81a0:	bf 4f       	sbci	r27, 0xFF	; 255
    81a2:	6d 96       	adiw	r28, 0x1d	; 29
    81a4:	bf af       	std	Y+63, r27	; 0x3f
    81a6:	ae af       	std	Y+62, r26	; 0x3e
    81a8:	6d 97       	sbiw	r28, 0x1d	; 29
    81aa:	f6 01       	movw	r30, r12
    81ac:	5e 2d       	mov	r21, r14
    81ae:	0e 94 c6 e9 	call	0x1d38c	; 0x1d38c <__xload_1>
    81b2:	66 23       	and	r22, r22
    81b4:	09 f4       	brne	.+2      	; 0x81b8 <_printf_fn+0x6c>
    81b6:	df c3       	rjmp	.+1982   	; 0x8976 <_printf_fn+0x82a>
    81b8:	ae 2d       	mov	r26, r14
    81ba:	c6 01       	movw	r24, r12
    81bc:	01 96       	adiw	r24, 0x01	; 1
    81be:	a1 1d       	adc	r26, r1
    81c0:	3c 01       	movw	r6, r24
    81c2:	8a 2e       	mov	r8, r26
    81c4:	65 32       	cpi	r22, 0x25	; 37
    81c6:	51 f0       	breq	.+20     	; 0x81dc <_printf_fn+0x90>
    81c8:	a5 96       	adiw	r28, 0x25	; 37
    81ca:	ae ad       	ldd	r26, Y+62	; 0x3e
    81cc:	bf ad       	ldd	r27, Y+63	; 0x3f
    81ce:	a5 97       	sbiw	r28, 0x25	; 37
    81d0:	ed 91       	ld	r30, X+
    81d2:	fc 91       	ld	r31, X
    81d4:	11 97       	sbiw	r26, 0x01	; 1
    81d6:	cd 01       	movw	r24, r26
    81d8:	09 95       	icall
    81da:	99 c3       	rjmp	.+1842   	; 0x890e <_printf_fn+0x7c2>
    81dc:	91 2c       	mov	r9, r1
    81de:	f3 01       	movw	r30, r6
    81e0:	58 2d       	mov	r21, r8
    81e2:	0e 94 c6 e9 	call	0x1d38c	; 0x1d38c <__xload_1>
    81e6:	63 32       	cpi	r22, 0x23	; 35
    81e8:	19 f4       	brne	.+6      	; 0x81f0 <_printf_fn+0xa4>
    81ea:	68 94       	set
    81ec:	97 f8       	bld	r9, 7
    81ee:	04 c0       	rjmp	.+8      	; 0x81f8 <_printf_fn+0xac>
    81f0:	6b 32       	cpi	r22, 0x2B	; 43
    81f2:	39 f4       	brne	.+14     	; 0x8202 <_printf_fn+0xb6>
    81f4:	68 94       	set
    81f6:	92 f8       	bld	r9, 2
    81f8:	bf ef       	ldi	r27, 0xFF	; 255
    81fa:	6b 1a       	sub	r6, r27
    81fc:	7b 0a       	sbc	r7, r27
    81fe:	8b 0a       	sbc	r8, r27
    8200:	ee cf       	rjmp	.-36     	; 0x81de <_printf_fn+0x92>
    8202:	6d 32       	cpi	r22, 0x2D	; 45
    8204:	a9 f4       	brne	.+42     	; 0x8230 <_printf_fn+0xe4>
    8206:	93 fc       	sbrc	r9, 3
    8208:	05 c0       	rjmp	.+10     	; 0x8214 <_printf_fn+0xc8>
    820a:	6d 32       	cpi	r22, 0x2D	; 45
    820c:	19 f4       	brne	.+6      	; 0x8214 <_printf_fn+0xc8>
    820e:	68 94       	set
    8210:	93 f8       	bld	r9, 3
    8212:	f2 cf       	rjmp	.-28     	; 0x81f8 <_printf_fn+0xac>
    8214:	94 fc       	sbrc	r9, 4
    8216:	05 c0       	rjmp	.+10     	; 0x8222 <_printf_fn+0xd6>
    8218:	60 32       	cpi	r22, 0x20	; 32
    821a:	19 f4       	brne	.+6      	; 0x8222 <_printf_fn+0xd6>
    821c:	68 94       	set
    821e:	94 f8       	bld	r9, 4
    8220:	eb cf       	rjmp	.-42     	; 0x81f8 <_printf_fn+0xac>
    8222:	95 fc       	sbrc	r9, 5
    8224:	e9 cf       	rjmp	.-46     	; 0x81f8 <_printf_fn+0xac>
    8226:	60 33       	cpi	r22, 0x30	; 48
    8228:	39 f7       	brne	.-50     	; 0x81f8 <_printf_fn+0xac>
    822a:	68 94       	set
    822c:	95 f8       	bld	r9, 5
    822e:	e4 cf       	rjmp	.-56     	; 0x81f8 <_printf_fn+0xac>
    8230:	86 2f       	mov	r24, r22
    8232:	8f 7e       	andi	r24, 0xEF	; 239
    8234:	80 32       	cpi	r24, 0x20	; 32
    8236:	39 f3       	breq	.-50     	; 0x8206 <_printf_fn+0xba>
    8238:	70 e0       	ldi	r23, 0x00	; 0
    823a:	60 53       	subi	r22, 0x30	; 48
    823c:	71 09       	sbc	r23, r1
    823e:	41 2c       	mov	r4, r1
    8240:	51 2c       	mov	r5, r1
    8242:	6a 30       	cpi	r22, 0x0A	; 10
    8244:	71 05       	cpc	r23, r1
    8246:	e0 f4       	brcc	.+56     	; 0x8280 <_printf_fn+0x134>
    8248:	2a e0       	ldi	r18, 0x0A	; 10
    824a:	f3 01       	movw	r30, r6
    824c:	58 2d       	mov	r21, r8
    824e:	0e 94 c6 e9 	call	0x1d38c	; 0x1d38c <__xload_1>
    8252:	70 e0       	ldi	r23, 0x00	; 0
    8254:	cb 01       	movw	r24, r22
    8256:	c0 97       	sbiw	r24, 0x30	; 48
    8258:	0a 97       	sbiw	r24, 0x0a	; 10
    825a:	80 f4       	brcc	.+32     	; 0x827c <_printf_fn+0x130>
    825c:	ef ef       	ldi	r30, 0xFF	; 255
    825e:	6e 1a       	sub	r6, r30
    8260:	7e 0a       	sbc	r7, r30
    8262:	8e 0a       	sbc	r8, r30
    8264:	24 9d       	mul	r18, r4
    8266:	c0 01       	movw	r24, r0
    8268:	25 9d       	mul	r18, r5
    826a:	90 0d       	add	r25, r0
    826c:	11 24       	eor	r1, r1
    826e:	68 0f       	add	r22, r24
    8270:	79 1f       	adc	r23, r25
    8272:	2b 01       	movw	r4, r22
    8274:	f0 e3       	ldi	r31, 0x30	; 48
    8276:	4f 1a       	sub	r4, r31
    8278:	51 08       	sbc	r5, r1
    827a:	e7 cf       	rjmp	.-50     	; 0x824a <_printf_fn+0xfe>
    827c:	68 94       	set
    827e:	90 f8       	bld	r9, 0
    8280:	f3 01       	movw	r30, r6
    8282:	58 2d       	mov	r21, r8
    8284:	0e 94 c6 e9 	call	0x1d38c	; 0x1d38c <__xload_1>
    8288:	6e 32       	cpi	r22, 0x2E	; 46
    828a:	59 f5       	brne	.+86     	; 0x82e2 <_printf_fn+0x196>
    828c:	2f ef       	ldi	r18, 0xFF	; 255
    828e:	62 1a       	sub	r6, r18
    8290:	72 0a       	sbc	r7, r18
    8292:	82 0a       	sbc	r8, r18
    8294:	a1 96       	adiw	r28, 0x21	; 33
    8296:	1f ae       	std	Y+63, r1	; 0x3f
    8298:	1e ae       	std	Y+62, r1	; 0x3e
    829a:	a1 97       	sbiw	r28, 0x21	; 33
    829c:	2a e0       	ldi	r18, 0x0A	; 10
    829e:	f3 01       	movw	r30, r6
    82a0:	58 2d       	mov	r21, r8
    82a2:	0e 94 c6 e9 	call	0x1d38c	; 0x1d38c <__xload_1>
    82a6:	70 e0       	ldi	r23, 0x00	; 0
    82a8:	cb 01       	movw	r24, r22
    82aa:	c0 97       	sbiw	r24, 0x30	; 48
    82ac:	0a 97       	sbiw	r24, 0x0a	; 10
    82ae:	b0 f4       	brcc	.+44     	; 0x82dc <_printf_fn+0x190>
    82b0:	3f ef       	ldi	r19, 0xFF	; 255
    82b2:	63 1a       	sub	r6, r19
    82b4:	73 0a       	sbc	r7, r19
    82b6:	83 0a       	sbc	r8, r19
    82b8:	a1 96       	adiw	r28, 0x21	; 33
    82ba:	4e ad       	ldd	r20, Y+62	; 0x3e
    82bc:	5f ad       	ldd	r21, Y+63	; 0x3f
    82be:	a1 97       	sbiw	r28, 0x21	; 33
    82c0:	24 9f       	mul	r18, r20
    82c2:	c0 01       	movw	r24, r0
    82c4:	25 9f       	mul	r18, r21
    82c6:	90 0d       	add	r25, r0
    82c8:	11 24       	eor	r1, r1
    82ca:	68 0f       	add	r22, r24
    82cc:	79 1f       	adc	r23, r25
    82ce:	cb 01       	movw	r24, r22
    82d0:	c0 97       	sbiw	r24, 0x30	; 48
    82d2:	a1 96       	adiw	r28, 0x21	; 33
    82d4:	9f af       	std	Y+63, r25	; 0x3f
    82d6:	8e af       	std	Y+62, r24	; 0x3e
    82d8:	a1 97       	sbiw	r28, 0x21	; 33
    82da:	e1 cf       	rjmp	.-62     	; 0x829e <_printf_fn+0x152>
    82dc:	68 94       	set
    82de:	91 f8       	bld	r9, 1
    82e0:	04 c0       	rjmp	.+8      	; 0x82ea <_printf_fn+0x19e>
    82e2:	a1 96       	adiw	r28, 0x21	; 33
    82e4:	1f ae       	std	Y+63, r1	; 0x3f
    82e6:	1e ae       	std	Y+62, r1	; 0x3e
    82e8:	a1 97       	sbiw	r28, 0x21	; 33
    82ea:	f3 01       	movw	r30, r6
    82ec:	58 2d       	mov	r21, r8
    82ee:	0e 94 c6 e9 	call	0x1d38c	; 0x1d38c <__xload_1>
    82f2:	69 34       	cpi	r22, 0x49	; 73
    82f4:	09 f0       	breq	.+2      	; 0x82f8 <_printf_fn+0x1ac>
    82f6:	45 c0       	rjmp	.+138    	; 0x8382 <_printf_fn+0x236>
    82f8:	9f ef       	ldi	r25, 0xFF	; 255
    82fa:	69 1a       	sub	r6, r25
    82fc:	79 0a       	sbc	r7, r25
    82fe:	89 0a       	sbc	r8, r25
    8300:	6f 96       	adiw	r28, 0x1f	; 31
    8302:	1f ae       	std	Y+63, r1	; 0x3f
    8304:	1e ae       	std	Y+62, r1	; 0x3e
    8306:	6f 97       	sbiw	r28, 0x1f	; 31
    8308:	2a e0       	ldi	r18, 0x0A	; 10
    830a:	f3 01       	movw	r30, r6
    830c:	58 2d       	mov	r21, r8
    830e:	0e 94 c6 e9 	call	0x1d38c	; 0x1d38c <__xload_1>
    8312:	70 e0       	ldi	r23, 0x00	; 0
    8314:	cb 01       	movw	r24, r22
    8316:	c0 97       	sbiw	r24, 0x30	; 48
    8318:	0a 97       	sbiw	r24, 0x0a	; 10
    831a:	b8 f4       	brcc	.+46     	; 0x834a <_printf_fn+0x1fe>
    831c:	af ef       	ldi	r26, 0xFF	; 255
    831e:	6a 1a       	sub	r6, r26
    8320:	7a 0a       	sbc	r7, r26
    8322:	8a 0a       	sbc	r8, r26
    8324:	6f 96       	adiw	r28, 0x1f	; 31
    8326:	ee ad       	ldd	r30, Y+62	; 0x3e
    8328:	ff ad       	ldd	r31, Y+63	; 0x3f
    832a:	6f 97       	sbiw	r28, 0x1f	; 31
    832c:	2e 9f       	mul	r18, r30
    832e:	c0 01       	movw	r24, r0
    8330:	2f 9f       	mul	r18, r31
    8332:	90 0d       	add	r25, r0
    8334:	11 24       	eor	r1, r1
    8336:	68 0f       	add	r22, r24
    8338:	79 1f       	adc	r23, r25
    833a:	ab 01       	movw	r20, r22
    833c:	40 53       	subi	r20, 0x30	; 48
    833e:	51 09       	sbc	r21, r1
    8340:	6f 96       	adiw	r28, 0x1f	; 31
    8342:	5f af       	std	Y+63, r21	; 0x3f
    8344:	4e af       	std	Y+62, r20	; 0x3e
    8346:	6f 97       	sbiw	r28, 0x1f	; 31
    8348:	e0 cf       	rjmp	.-64     	; 0x830a <_printf_fn+0x1be>
    834a:	6f 96       	adiw	r28, 0x1f	; 31
    834c:	8e ad       	ldd	r24, Y+62	; 0x3e
    834e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8350:	6f 97       	sbiw	r28, 0x1f	; 31
    8352:	00 97       	sbiw	r24, 0x00	; 0
    8354:	09 f4       	brne	.+2      	; 0x8358 <_printf_fn+0x20c>
    8356:	4f c0       	rjmp	.+158    	; 0x83f6 <_printf_fn+0x2aa>
    8358:	87 70       	andi	r24, 0x07	; 7
    835a:	99 27       	eor	r25, r25
    835c:	89 2b       	or	r24, r25
    835e:	09 f0       	breq	.+2      	; 0x8362 <_printf_fn+0x216>
    8360:	46 c0       	rjmp	.+140    	; 0x83ee <_printf_fn+0x2a2>
    8362:	6f 96       	adiw	r28, 0x1f	; 31
    8364:	ae ad       	ldd	r26, Y+62	; 0x3e
    8366:	bf ad       	ldd	r27, Y+63	; 0x3f
    8368:	6f 97       	sbiw	r28, 0x1f	; 31
    836a:	83 e0       	ldi	r24, 0x03	; 3
    836c:	b5 95       	asr	r27
    836e:	a7 95       	ror	r26
    8370:	8a 95       	dec	r24
    8372:	e1 f7       	brne	.-8      	; 0x836c <_printf_fn+0x220>
    8374:	6f 96       	adiw	r28, 0x1f	; 31
    8376:	bf af       	std	Y+63, r27	; 0x3f
    8378:	ae af       	std	Y+62, r26	; 0x3e
    837a:	6f 97       	sbiw	r28, 0x1f	; 31
    837c:	ab 2b       	or	r26, r27
    837e:	d9 f1       	breq	.+118    	; 0x83f6 <_printf_fn+0x2aa>
    8380:	27 c0       	rjmp	.+78     	; 0x83d0 <_printf_fn+0x284>
    8382:	68 36       	cpi	r22, 0x68	; 104
    8384:	29 f4       	brne	.+10     	; 0x8390 <_printf_fn+0x244>
    8386:	bf ef       	ldi	r27, 0xFF	; 255
    8388:	6b 1a       	sub	r6, r27
    838a:	7b 0a       	sbc	r7, r27
    838c:	8b 0a       	sbc	r8, r27
    838e:	c2 c2       	rjmp	.+1412   	; 0x8914 <_printf_fn+0x7c8>
    8390:	6c 36       	cpi	r22, 0x6C	; 108
    8392:	09 f0       	breq	.+2      	; 0x8396 <_printf_fn+0x24a>
    8394:	bf c2       	rjmp	.+1406   	; 0x8914 <_printf_fn+0x7c8>
    8396:	a8 2d       	mov	r26, r8
    8398:	c3 01       	movw	r24, r6
    839a:	01 96       	adiw	r24, 0x01	; 1
    839c:	a1 1d       	adc	r26, r1
    839e:	fc 01       	movw	r30, r24
    83a0:	5a 2f       	mov	r21, r26
    83a2:	0e 94 c6 e9 	call	0x1d38c	; 0x1d38c <__xload_1>
    83a6:	6c 36       	cpi	r22, 0x6C	; 108
    83a8:	49 f0       	breq	.+18     	; 0x83bc <_printf_fn+0x270>
    83aa:	3c 01       	movw	r6, r24
    83ac:	8a 2e       	mov	r8, r26
    83ae:	24 e0       	ldi	r18, 0x04	; 4
    83b0:	30 e0       	ldi	r19, 0x00	; 0
    83b2:	6f 96       	adiw	r28, 0x1f	; 31
    83b4:	3f af       	std	Y+63, r19	; 0x3f
    83b6:	2e af       	std	Y+62, r18	; 0x3e
    83b8:	6f 97       	sbiw	r28, 0x1f	; 31
    83ba:	0a c0       	rjmp	.+20     	; 0x83d0 <_printf_fn+0x284>
    83bc:	32 e0       	ldi	r19, 0x02	; 2
    83be:	63 0e       	add	r6, r19
    83c0:	71 1c       	adc	r7, r1
    83c2:	81 1c       	adc	r8, r1
    83c4:	48 e0       	ldi	r20, 0x08	; 8
    83c6:	50 e0       	ldi	r21, 0x00	; 0
    83c8:	6f 96       	adiw	r28, 0x1f	; 31
    83ca:	5f af       	std	Y+63, r21	; 0x3f
    83cc:	4e af       	std	Y+62, r20	; 0x3e
    83ce:	6f 97       	sbiw	r28, 0x1f	; 31
    83d0:	f3 01       	movw	r30, r6
    83d2:	58 2d       	mov	r21, r8
    83d4:	0e 94 c6 e9 	call	0x1d38c	; 0x1d38c <__xload_1>
    83d8:	86 2f       	mov	r24, r22
    83da:	90 e0       	ldi	r25, 0x00	; 0
    83dc:	a3 96       	adiw	r28, 0x23	; 35
    83de:	9f af       	std	Y+63, r25	; 0x3f
    83e0:	8e af       	std	Y+62, r24	; 0x3e
    83e2:	a3 97       	sbiw	r28, 0x23	; 35
    83e4:	84 36       	cpi	r24, 0x64	; 100
    83e6:	91 05       	cpc	r25, r1
    83e8:	09 f4       	brne	.+2      	; 0x83ec <_printf_fn+0x2a0>
    83ea:	9b c2       	rjmp	.+1334   	; 0x8922 <_printf_fn+0x7d6>
    83ec:	08 c0       	rjmp	.+16     	; 0x83fe <_printf_fn+0x2b2>
    83ee:	6f 96       	adiw	r28, 0x1f	; 31
    83f0:	1f ae       	std	Y+63, r1	; 0x3f
    83f2:	1e ae       	std	Y+62, r1	; 0x3e
    83f4:	6f 97       	sbiw	r28, 0x1f	; 31
    83f6:	a3 96       	adiw	r28, 0x23	; 35
    83f8:	1f ae       	std	Y+63, r1	; 0x3f
    83fa:	1e ae       	std	Y+62, r1	; 0x3e
    83fc:	a3 97       	sbiw	r28, 0x23	; 35
    83fe:	31 e0       	ldi	r19, 0x01	; 1
    8400:	20 e0       	ldi	r18, 0x00	; 0
    8402:	a3 96       	adiw	r28, 0x23	; 35
    8404:	ae ad       	ldd	r26, Y+62	; 0x3e
    8406:	bf ad       	ldd	r27, Y+63	; 0x3f
    8408:	a3 97       	sbiw	r28, 0x23	; 35
    840a:	a4 34       	cpi	r26, 0x44	; 68
    840c:	b1 05       	cpc	r27, r1
    840e:	09 f0       	breq	.+2      	; 0x8412 <_printf_fn+0x2c6>
    8410:	30 e0       	ldi	r19, 0x00	; 0
    8412:	83 2f       	mov	r24, r19
    8414:	92 2f       	mov	r25, r18
    8416:	a3 96       	adiw	r28, 0x23	; 35
    8418:	ee ad       	ldd	r30, Y+62	; 0x3e
    841a:	ff ad       	ldd	r31, Y+63	; 0x3f
    841c:	a3 97       	sbiw	r28, 0x23	; 35
    841e:	e2 54       	subi	r30, 0x42	; 66
    8420:	f1 09       	sbc	r31, r1
    8422:	e7 33       	cpi	r30, 0x37	; 55
    8424:	f1 05       	cpc	r31, r1
    8426:	08 f0       	brcs	.+2      	; 0x842a <_printf_fn+0x2de>
    8428:	65 c1       	rjmp	.+714    	; 0x86f4 <_printf_fn+0x5a8>
    842a:	ea 5b       	subi	r30, 0xBA	; 186
    842c:	ff 4f       	sbci	r31, 0xFF	; 255
    842e:	0c 94 60 e9 	jmp	0x1d2c0	; 0x1d2c0 <__tablejump2__>
    8432:	e2 e0       	ldi	r30, 0x02	; 2
    8434:	f0 e0       	ldi	r31, 0x00	; 0
    8436:	6f 96       	adiw	r28, 0x1f	; 31
    8438:	ff af       	std	Y+63, r31	; 0x3f
    843a:	ee af       	std	Y+62, r30	; 0x3e
    843c:	6f 97       	sbiw	r28, 0x1f	; 31
    843e:	29 2d       	mov	r18, r9
    8440:	28 72       	andi	r18, 0x28	; 40
    8442:	28 32       	cpi	r18, 0x28	; 40
    8444:	11 f4       	brne	.+4      	; 0x844a <_printf_fn+0x2fe>
    8446:	e8 94       	clt
    8448:	95 f8       	bld	r9, 5
    844a:	29 2d       	mov	r18, r9
    844c:	22 72       	andi	r18, 0x22	; 34
    844e:	22 32       	cpi	r18, 0x22	; 34
    8450:	11 f4       	brne	.+4      	; 0x8456 <_printf_fn+0x30a>
    8452:	e8 94       	clt
    8454:	95 f8       	bld	r9, 5
    8456:	29 2d       	mov	r18, r9
    8458:	21 72       	andi	r18, 0x21	; 33
    845a:	21 32       	cpi	r18, 0x21	; 33
    845c:	59 f4       	brne	.+22     	; 0x8474 <_printf_fn+0x328>
    845e:	a1 96       	adiw	r28, 0x21	; 33
    8460:	2e ad       	ldd	r18, Y+62	; 0x3e
    8462:	3f ad       	ldd	r19, Y+63	; 0x3f
    8464:	a1 97       	sbiw	r28, 0x21	; 33
    8466:	24 15       	cp	r18, r4
    8468:	35 05       	cpc	r19, r5
    846a:	24 f4       	brge	.+8      	; 0x8474 <_printf_fn+0x328>
    846c:	a1 96       	adiw	r28, 0x21	; 33
    846e:	5f ae       	std	Y+63, r5	; 0x3f
    8470:	4e ae       	std	Y+62, r4	; 0x3e
    8472:	a1 97       	sbiw	r28, 0x21	; 33
    8474:	29 2d       	mov	r18, r9
    8476:	23 72       	andi	r18, 0x23	; 35
    8478:	23 32       	cpi	r18, 0x23	; 35
    847a:	59 f4       	brne	.+22     	; 0x8492 <_printf_fn+0x346>
    847c:	a1 96       	adiw	r28, 0x21	; 33
    847e:	4e ad       	ldd	r20, Y+62	; 0x3e
    8480:	5f ad       	ldd	r21, Y+63	; 0x3f
    8482:	a1 97       	sbiw	r28, 0x21	; 33
    8484:	44 15       	cp	r20, r4
    8486:	55 05       	cpc	r21, r5
    8488:	24 f4       	brge	.+8      	; 0x8492 <_printf_fn+0x346>
    848a:	a1 96       	adiw	r28, 0x21	; 33
    848c:	5f ae       	std	Y+63, r5	; 0x3f
    848e:	4e ae       	std	Y+62, r4	; 0x3e
    8490:	a1 97       	sbiw	r28, 0x21	; 33
    8492:	e8 94       	clt
    8494:	94 f8       	bld	r9, 4
    8496:	e8 94       	clt
    8498:	92 f8       	bld	r9, 2
    849a:	e8 94       	clt
    849c:	96 f8       	bld	r9, 6
    849e:	6f 96       	adiw	r28, 0x1f	; 31
    84a0:	ae ad       	ldd	r26, Y+62	; 0x3e
    84a2:	bf ad       	ldd	r27, Y+63	; 0x3f
    84a4:	6f 97       	sbiw	r28, 0x1f	; 31
    84a6:	12 97       	sbiw	r26, 0x02	; 2
    84a8:	29 f5       	brne	.+74     	; 0x84f4 <_printf_fn+0x3a8>
    84aa:	51 01       	movw	r10, r2
    84ac:	b2 e0       	ldi	r27, 0x02	; 2
    84ae:	ab 0e       	add	r10, r27
    84b0:	b1 1c       	adc	r11, r1
    84b2:	f1 01       	movw	r30, r2
    84b4:	80 81       	ld	r24, Z
    84b6:	91 81       	ldd	r25, Z+1	; 0x01
    84b8:	65 96       	adiw	r28, 0x15	; 21
    84ba:	9f af       	std	Y+63, r25	; 0x3f
    84bc:	8e af       	std	Y+62, r24	; 0x3e
    84be:	65 97       	sbiw	r28, 0x15	; 21
    84c0:	a3 96       	adiw	r28, 0x23	; 35
    84c2:	2e ad       	ldd	r18, Y+62	; 0x3e
    84c4:	3f ad       	ldd	r19, Y+63	; 0x3f
    84c6:	a3 97       	sbiw	r28, 0x23	; 35
    84c8:	24 34       	cpi	r18, 0x44	; 68
    84ca:	31 05       	cpc	r19, r1
    84cc:	09 f0       	breq	.+2      	; 0x84d0 <_printf_fn+0x384>
    84ce:	c0 c0       	rjmp	.+384    	; 0x8650 <_printf_fn+0x504>
    84d0:	97 ff       	sbrs	r25, 7
    84d2:	b8 c0       	rjmp	.+368    	; 0x8644 <_printf_fn+0x4f8>
    84d4:	68 94       	set
    84d6:	96 f8       	bld	r9, 6
    84d8:	91 95       	neg	r25
    84da:	81 95       	neg	r24
    84dc:	91 09       	sbc	r25, r1
    84de:	65 96       	adiw	r28, 0x15	; 21
    84e0:	9f af       	std	Y+63, r25	; 0x3f
    84e2:	8e af       	std	Y+62, r24	; 0x3e
    84e4:	65 97       	sbiw	r28, 0x15	; 21
    84e6:	42 e0       	ldi	r20, 0x02	; 2
    84e8:	50 e0       	ldi	r21, 0x00	; 0
    84ea:	6f 96       	adiw	r28, 0x1f	; 31
    84ec:	5f af       	std	Y+63, r21	; 0x3f
    84ee:	4e af       	std	Y+62, r20	; 0x3e
    84f0:	6f 97       	sbiw	r28, 0x1f	; 31
    84f2:	ae c0       	rjmp	.+348    	; 0x8650 <_printf_fn+0x504>
    84f4:	6f 96       	adiw	r28, 0x1f	; 31
    84f6:	ae ad       	ldd	r26, Y+62	; 0x3e
    84f8:	bf ad       	ldd	r27, Y+63	; 0x3f
    84fa:	6f 97       	sbiw	r28, 0x1f	; 31
    84fc:	14 97       	sbiw	r26, 0x04	; 4
    84fe:	59 f5       	brne	.+86     	; 0x8556 <_printf_fn+0x40a>
    8500:	51 01       	movw	r10, r2
    8502:	b4 e0       	ldi	r27, 0x04	; 4
    8504:	ab 0e       	add	r10, r27
    8506:	b1 1c       	adc	r11, r1
    8508:	f1 01       	movw	r30, r2
    850a:	80 81       	ld	r24, Z
    850c:	91 81       	ldd	r25, Z+1	; 0x01
    850e:	a2 81       	ldd	r26, Z+2	; 0x02
    8510:	b3 81       	ldd	r27, Z+3	; 0x03
    8512:	2f 96       	adiw	r28, 0x0f	; 15
    8514:	8c af       	std	Y+60, r24	; 0x3c
    8516:	9d af       	std	Y+61, r25	; 0x3d
    8518:	ae af       	std	Y+62, r26	; 0x3e
    851a:	bf af       	std	Y+63, r27	; 0x3f
    851c:	2f 97       	sbiw	r28, 0x0f	; 15
    851e:	a3 96       	adiw	r28, 0x23	; 35
    8520:	2e ad       	ldd	r18, Y+62	; 0x3e
    8522:	3f ad       	ldd	r19, Y+63	; 0x3f
    8524:	a3 97       	sbiw	r28, 0x23	; 35
    8526:	24 34       	cpi	r18, 0x44	; 68
    8528:	31 05       	cpc	r19, r1
    852a:	09 f0       	breq	.+2      	; 0x852e <_printf_fn+0x3e2>
    852c:	9e c0       	rjmp	.+316    	; 0x866a <_printf_fn+0x51e>
    852e:	b7 ff       	sbrs	r27, 7
    8530:	96 c0       	rjmp	.+300    	; 0x865e <_printf_fn+0x512>
    8532:	68 94       	set
    8534:	96 f8       	bld	r9, 6
    8536:	b0 95       	com	r27
    8538:	a0 95       	com	r26
    853a:	90 95       	com	r25
    853c:	81 95       	neg	r24
    853e:	9f 4f       	sbci	r25, 0xFF	; 255
    8540:	af 4f       	sbci	r26, 0xFF	; 255
    8542:	bf 4f       	sbci	r27, 0xFF	; 255
    8544:	2f 96       	adiw	r28, 0x0f	; 15
    8546:	8c af       	std	Y+60, r24	; 0x3c
    8548:	9d af       	std	Y+61, r25	; 0x3d
    854a:	ae af       	std	Y+62, r26	; 0x3e
    854c:	bf af       	std	Y+63, r27	; 0x3f
    854e:	2f 97       	sbiw	r28, 0x0f	; 15
    8550:	86 c0       	rjmp	.+268    	; 0x865e <_printf_fn+0x512>
    8552:	81 e0       	ldi	r24, 0x01	; 1
    8554:	90 e0       	ldi	r25, 0x00	; 0
    8556:	6f 96       	adiw	r28, 0x1f	; 31
    8558:	ae ad       	ldd	r26, Y+62	; 0x3e
    855a:	bf ad       	ldd	r27, Y+63	; 0x3f
    855c:	6f 97       	sbiw	r28, 0x1f	; 31
    855e:	51 01       	movw	r10, r2
    8560:	18 97       	sbiw	r26, 0x08	; 8
    8562:	09 f0       	breq	.+2      	; 0x8566 <_printf_fn+0x41a>
    8564:	89 c0       	rjmp	.+274    	; 0x8678 <_printf_fn+0x52c>
    8566:	b8 e0       	ldi	r27, 0x08	; 8
    8568:	ab 0e       	add	r10, r27
    856a:	b1 1c       	adc	r11, r1
    856c:	f1 01       	movw	r30, r2
    856e:	f0 81       	ld	r31, Z
    8570:	aa 96       	adiw	r28, 0x2a	; 42
    8572:	ff af       	std	Y+63, r31	; 0x3f
    8574:	aa 97       	sbiw	r28, 0x2a	; 42
    8576:	d1 01       	movw	r26, r2
    8578:	11 96       	adiw	r26, 0x01	; 1
    857a:	fc 90       	ld	r15, X
    857c:	11 97       	sbiw	r26, 0x01	; 1
    857e:	12 96       	adiw	r26, 0x02	; 2
    8580:	0c 91       	ld	r16, X
    8582:	12 97       	sbiw	r26, 0x02	; 2
    8584:	13 96       	adiw	r26, 0x03	; 3
    8586:	1c 91       	ld	r17, X
    8588:	13 97       	sbiw	r26, 0x03	; 3
    858a:	14 96       	adiw	r26, 0x04	; 4
    858c:	bc 91       	ld	r27, X
    858e:	f1 01       	movw	r30, r2
    8590:	f5 81       	ldd	r31, Z+5	; 0x05
    8592:	ab 96       	adiw	r28, 0x2b	; 43
    8594:	ff af       	std	Y+63, r31	; 0x3f
    8596:	ab 97       	sbiw	r28, 0x2b	; 43
    8598:	f1 01       	movw	r30, r2
    859a:	f6 81       	ldd	r31, Z+6	; 0x06
    859c:	ac 96       	adiw	r28, 0x2c	; 44
    859e:	ff af       	std	Y+63, r31	; 0x3f
    85a0:	ac 97       	sbiw	r28, 0x2c	; 44
    85a2:	f1 01       	movw	r30, r2
    85a4:	37 80       	ldd	r3, Z+7	; 0x07
    85a6:	aa 96       	adiw	r28, 0x2a	; 42
    85a8:	ff ad       	ldd	r31, Y+63	; 0x3f
    85aa:	aa 97       	sbiw	r28, 0x2a	; 42
    85ac:	24 96       	adiw	r28, 0x04	; 4
    85ae:	ff af       	std	Y+63, r31	; 0x3f
    85b0:	24 97       	sbiw	r28, 0x04	; 4
    85b2:	25 96       	adiw	r28, 0x05	; 5
    85b4:	ff ae       	std	Y+63, r15	; 0x3f
    85b6:	25 97       	sbiw	r28, 0x05	; 5
    85b8:	26 96       	adiw	r28, 0x06	; 6
    85ba:	0f af       	std	Y+63, r16	; 0x3f
    85bc:	26 97       	sbiw	r28, 0x06	; 6
    85be:	27 96       	adiw	r28, 0x07	; 7
    85c0:	1f af       	std	Y+63, r17	; 0x3f
    85c2:	27 97       	sbiw	r28, 0x07	; 7
    85c4:	28 96       	adiw	r28, 0x08	; 8
    85c6:	bf af       	std	Y+63, r27	; 0x3f
    85c8:	28 97       	sbiw	r28, 0x08	; 8
    85ca:	ab 96       	adiw	r28, 0x2b	; 43
    85cc:	ef ad       	ldd	r30, Y+63	; 0x3f
    85ce:	ab 97       	sbiw	r28, 0x2b	; 43
    85d0:	29 96       	adiw	r28, 0x09	; 9
    85d2:	ef af       	std	Y+63, r30	; 0x3f
    85d4:	29 97       	sbiw	r28, 0x09	; 9
    85d6:	ac 96       	adiw	r28, 0x2c	; 44
    85d8:	ff ad       	ldd	r31, Y+63	; 0x3f
    85da:	ac 97       	sbiw	r28, 0x2c	; 44
    85dc:	2a 96       	adiw	r28, 0x0a	; 10
    85de:	ff af       	std	Y+63, r31	; 0x3f
    85e0:	2a 97       	sbiw	r28, 0x0a	; 10
    85e2:	2b 96       	adiw	r28, 0x0b	; 11
    85e4:	3f ae       	std	Y+63, r3	; 0x3f
    85e6:	2b 97       	sbiw	r28, 0x0b	; 11
    85e8:	89 2b       	or	r24, r25
    85ea:	09 f4       	brne	.+2      	; 0x85ee <_printf_fn+0x4a2>
    85ec:	50 c0       	rjmp	.+160    	; 0x868e <_printf_fn+0x542>
    85ee:	aa 96       	adiw	r28, 0x2a	; 42
    85f0:	2f ad       	ldd	r18, Y+63	; 0x3f
    85f2:	aa 97       	sbiw	r28, 0x2a	; 42
    85f4:	3f 2d       	mov	r19, r15
    85f6:	a8 01       	movw	r20, r16
    85f8:	6b 2f       	mov	r22, r27
    85fa:	7e 2f       	mov	r23, r30
    85fc:	8f 2f       	mov	r24, r31
    85fe:	93 2d       	mov	r25, r3
    8600:	a0 e0       	ldi	r26, 0x00	; 0
    8602:	0e 94 cd e9 	call	0x1d39a	; 0x1d39a <__cmpdi2_s8>
    8606:	0c f0       	brlt	.+2      	; 0x860a <_printf_fn+0x4be>
    8608:	42 c0       	rjmp	.+132    	; 0x868e <_printf_fn+0x542>
    860a:	68 94       	set
    860c:	96 f8       	bld	r9, 6
    860e:	0e 94 7f e9 	call	0x1d2fe	; 0x1d2fe <__negdi2>
    8612:	24 96       	adiw	r28, 0x04	; 4
    8614:	2f af       	std	Y+63, r18	; 0x3f
    8616:	24 97       	sbiw	r28, 0x04	; 4
    8618:	25 96       	adiw	r28, 0x05	; 5
    861a:	3f af       	std	Y+63, r19	; 0x3f
    861c:	25 97       	sbiw	r28, 0x05	; 5
    861e:	26 96       	adiw	r28, 0x06	; 6
    8620:	4f af       	std	Y+63, r20	; 0x3f
    8622:	26 97       	sbiw	r28, 0x06	; 6
    8624:	27 96       	adiw	r28, 0x07	; 7
    8626:	5f af       	std	Y+63, r21	; 0x3f
    8628:	27 97       	sbiw	r28, 0x07	; 7
    862a:	28 96       	adiw	r28, 0x08	; 8
    862c:	6f af       	std	Y+63, r22	; 0x3f
    862e:	28 97       	sbiw	r28, 0x08	; 8
    8630:	29 96       	adiw	r28, 0x09	; 9
    8632:	7f af       	std	Y+63, r23	; 0x3f
    8634:	29 97       	sbiw	r28, 0x09	; 9
    8636:	2a 96       	adiw	r28, 0x0a	; 10
    8638:	8f af       	std	Y+63, r24	; 0x3f
    863a:	2a 97       	sbiw	r28, 0x0a	; 10
    863c:	2b 96       	adiw	r28, 0x0b	; 11
    863e:	9f af       	std	Y+63, r25	; 0x3f
    8640:	2b 97       	sbiw	r28, 0x0b	; 11
    8642:	25 c0       	rjmp	.+74     	; 0x868e <_printf_fn+0x542>
    8644:	22 e0       	ldi	r18, 0x02	; 2
    8646:	30 e0       	ldi	r19, 0x00	; 0
    8648:	6f 96       	adiw	r28, 0x1f	; 31
    864a:	3f af       	std	Y+63, r19	; 0x3f
    864c:	2e af       	std	Y+62, r18	; 0x3e
    864e:	6f 97       	sbiw	r28, 0x1f	; 31
    8650:	6c 96       	adiw	r28, 0x1c	; 28
    8652:	8f ad       	ldd	r24, Y+63	; 0x3f
    8654:	6c 97       	sbiw	r28, 0x1c	; 28
    8656:	6d 96       	adiw	r28, 0x1d	; 29
    8658:	9f ad       	ldd	r25, Y+63	; 0x3f
    865a:	6d 97       	sbiw	r28, 0x1d	; 29
    865c:	1e c0       	rjmp	.+60     	; 0x869a <_printf_fn+0x54e>
    865e:	44 e0       	ldi	r20, 0x04	; 4
    8660:	50 e0       	ldi	r21, 0x00	; 0
    8662:	6f 96       	adiw	r28, 0x1f	; 31
    8664:	5f af       	std	Y+63, r21	; 0x3f
    8666:	4e af       	std	Y+62, r20	; 0x3e
    8668:	6f 97       	sbiw	r28, 0x1f	; 31
    866a:	6a 96       	adiw	r28, 0x1a	; 26
    866c:	8f ad       	ldd	r24, Y+63	; 0x3f
    866e:	6a 97       	sbiw	r28, 0x1a	; 26
    8670:	6b 96       	adiw	r28, 0x1b	; 27
    8672:	9f ad       	ldd	r25, Y+63	; 0x3f
    8674:	6b 97       	sbiw	r28, 0x1b	; 27
    8676:	11 c0       	rjmp	.+34     	; 0x869a <_printf_fn+0x54e>
    8678:	66 96       	adiw	r28, 0x16	; 22
    867a:	8f ad       	ldd	r24, Y+63	; 0x3f
    867c:	66 97       	sbiw	r28, 0x16	; 22
    867e:	67 96       	adiw	r28, 0x17	; 23
    8680:	9f ad       	ldd	r25, Y+63	; 0x3f
    8682:	67 97       	sbiw	r28, 0x17	; 23
    8684:	a3 96       	adiw	r28, 0x23	; 35
    8686:	1f ae       	std	Y+63, r1	; 0x3f
    8688:	1e ae       	std	Y+62, r1	; 0x3e
    868a:	a3 97       	sbiw	r28, 0x23	; 35
    868c:	06 c0       	rjmp	.+12     	; 0x869a <_printf_fn+0x54e>
    868e:	68 96       	adiw	r28, 0x18	; 24
    8690:	8f ad       	ldd	r24, Y+63	; 0x3f
    8692:	68 97       	sbiw	r28, 0x18	; 24
    8694:	69 96       	adiw	r28, 0x19	; 25
    8696:	9f ad       	ldd	r25, Y+63	; 0x3f
    8698:	69 97       	sbiw	r28, 0x19	; 25
    869a:	5f ef       	ldi	r21, 0xFF	; 255
    869c:	65 1a       	sub	r6, r21
    869e:	75 0a       	sbc	r7, r21
    86a0:	85 0a       	sbc	r8, r21
    86a2:	15 01       	movw	r2, r10
    86a4:	2d c0       	rjmp	.+90     	; 0x8700 <_printf_fn+0x5b4>
    86a6:	91 fc       	sbrc	r9, 1
    86a8:	08 c0       	rjmp	.+16     	; 0x86ba <_printf_fn+0x56e>
    86aa:	68 94       	set
    86ac:	91 f8       	bld	r9, 1
    86ae:	86 e0       	ldi	r24, 0x06	; 6
    86b0:	90 e0       	ldi	r25, 0x00	; 0
    86b2:	a1 96       	adiw	r28, 0x21	; 33
    86b4:	9f af       	std	Y+63, r25	; 0x3f
    86b6:	8e af       	std	Y+62, r24	; 0x3e
    86b8:	a1 97       	sbiw	r28, 0x21	; 33
    86ba:	d1 01       	movw	r26, r2
    86bc:	2d 91       	ld	r18, X+
    86be:	3d 91       	ld	r19, X+
    86c0:	4d 91       	ld	r20, X+
    86c2:	5c 91       	ld	r21, X
    86c4:	a9 96       	adiw	r28, 0x29	; 41
    86c6:	2c af       	std	Y+60, r18	; 0x3c
    86c8:	3d af       	std	Y+61, r19	; 0x3d
    86ca:	4e af       	std	Y+62, r20	; 0x3e
    86cc:	5f af       	std	Y+63, r21	; 0x3f
    86ce:	a9 97       	sbiw	r28, 0x29	; 41
    86d0:	bf ef       	ldi	r27, 0xFF	; 255
    86d2:	6b 1a       	sub	r6, r27
    86d4:	7b 0a       	sbc	r7, r27
    86d6:	8b 0a       	sbc	r8, r27
    86d8:	f1 01       	movw	r30, r2
    86da:	34 96       	adiw	r30, 0x04	; 4
    86dc:	1f 01       	movw	r2, r30
    86de:	0a c0       	rjmp	.+20     	; 0x86f4 <_printf_fn+0x5a8>
    86e0:	ff ef       	ldi	r31, 0xFF	; 255
    86e2:	6f 1a       	sub	r6, r31
    86e4:	7f 0a       	sbc	r7, r31
    86e6:	8f 0a       	sbc	r8, r31
    86e8:	b0 c0       	rjmp	.+352    	; 0x884a <_printf_fn+0x6fe>
    86ea:	2f ef       	ldi	r18, 0xFF	; 255
    86ec:	62 1a       	sub	r6, r18
    86ee:	72 0a       	sbc	r7, r18
    86f0:	82 0a       	sbc	r8, r18
    86f2:	b8 c0       	rjmp	.+368    	; 0x8864 <_printf_fn+0x718>
    86f4:	66 96       	adiw	r28, 0x16	; 22
    86f6:	8f ad       	ldd	r24, Y+63	; 0x3f
    86f8:	66 97       	sbiw	r28, 0x16	; 22
    86fa:	67 96       	adiw	r28, 0x17	; 23
    86fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    86fe:	67 97       	sbiw	r28, 0x17	; 23
    8700:	a3 96       	adiw	r28, 0x23	; 35
    8702:	ee ad       	ldd	r30, Y+62	; 0x3e
    8704:	ff ad       	ldd	r31, Y+63	; 0x3f
    8706:	a3 97       	sbiw	r28, 0x23	; 35
    8708:	e2 54       	subi	r30, 0x42	; 66
    870a:	f1 09       	sbc	r31, r1
    870c:	e7 33       	cpi	r30, 0x37	; 55
    870e:	f1 05       	cpc	r31, r1
    8710:	08 f0       	brcs	.+2      	; 0x8714 <_printf_fn+0x5c8>
    8712:	f9 c0       	rjmp	.+498    	; 0x8906 <_printf_fn+0x7ba>
    8714:	e3 58       	subi	r30, 0x83	; 131
    8716:	ff 4f       	sbci	r31, 0xFF	; 255
    8718:	0c 94 60 e9 	jmp	0x1d2c0	; 0x1d2c0 <__tablejump2__>
    871c:	e8 94       	clt
    871e:	94 f8       	bld	r9, 4
    8720:	e8 94       	clt
    8722:	92 f8       	bld	r9, 2
    8724:	a9 2c       	mov	r10, r9
    8726:	b1 2c       	mov	r11, r1
    8728:	a1 96       	adiw	r28, 0x21	; 33
    872a:	ce ac       	ldd	r12, Y+62	; 0x3e
    872c:	df ac       	ldd	r13, Y+63	; 0x3f
    872e:	a1 97       	sbiw	r28, 0x21	; 33
    8730:	72 01       	movw	r14, r4
    8732:	0a e0       	ldi	r16, 0x0A	; 10
    8734:	10 e0       	ldi	r17, 0x00	; 0
    8736:	13 c0       	rjmp	.+38     	; 0x875e <_printf_fn+0x612>
    8738:	a9 2c       	mov	r10, r9
    873a:	b1 2c       	mov	r11, r1
    873c:	a1 96       	adiw	r28, 0x21	; 33
    873e:	ce ac       	ldd	r12, Y+62	; 0x3e
    8740:	df ac       	ldd	r13, Y+63	; 0x3f
    8742:	a1 97       	sbiw	r28, 0x21	; 33
    8744:	72 01       	movw	r14, r4
    8746:	02 e0       	ldi	r16, 0x02	; 2
    8748:	10 e0       	ldi	r17, 0x00	; 0
    874a:	09 c0       	rjmp	.+18     	; 0x875e <_printf_fn+0x612>
    874c:	a9 2c       	mov	r10, r9
    874e:	b1 2c       	mov	r11, r1
    8750:	a1 96       	adiw	r28, 0x21	; 33
    8752:	ce ac       	ldd	r12, Y+62	; 0x3e
    8754:	df ac       	ldd	r13, Y+63	; 0x3f
    8756:	a1 97       	sbiw	r28, 0x21	; 33
    8758:	72 01       	movw	r14, r4
    875a:	08 e0       	ldi	r16, 0x08	; 8
    875c:	10 e0       	ldi	r17, 0x00	; 0
    875e:	22 e4       	ldi	r18, 0x42	; 66
    8760:	30 e0       	ldi	r19, 0x00	; 0
    8762:	ae 01       	movw	r20, r28
    8764:	4f 5f       	subi	r20, 0xFF	; 255
    8766:	5f 4f       	sbci	r21, 0xFF	; 255
    8768:	6f 96       	adiw	r28, 0x1f	; 31
    876a:	6e ad       	ldd	r22, Y+62	; 0x3e
    876c:	7f ad       	ldd	r23, Y+63	; 0x3f
    876e:	6f 97       	sbiw	r28, 0x1f	; 31
    8770:	f3 d9       	rcall	.-3098   	; 0x7b58 <p_ntoa>
    8772:	30 c0       	rjmp	.+96     	; 0x87d4 <_printf_fn+0x688>
    8774:	a9 2c       	mov	r10, r9
    8776:	b1 2c       	mov	r11, r1
    8778:	a1 96       	adiw	r28, 0x21	; 33
    877a:	ce ac       	ldd	r12, Y+62	; 0x3e
    877c:	df ac       	ldd	r13, Y+63	; 0x3f
    877e:	a1 97       	sbiw	r28, 0x21	; 33
    8780:	72 01       	movw	r14, r4
    8782:	00 e1       	ldi	r16, 0x10	; 16
    8784:	10 e0       	ldi	r17, 0x00	; 0
    8786:	22 e4       	ldi	r18, 0x42	; 66
    8788:	30 e0       	ldi	r19, 0x00	; 0
    878a:	ae 01       	movw	r20, r28
    878c:	4f 5f       	subi	r20, 0xFF	; 255
    878e:	5f 4f       	sbci	r21, 0xFF	; 255
    8790:	6f 96       	adiw	r28, 0x1f	; 31
    8792:	6e ad       	ldd	r22, Y+62	; 0x3e
    8794:	7f ad       	ldd	r23, Y+63	; 0x3f
    8796:	6f 97       	sbiw	r28, 0x1f	; 31
    8798:	df d9       	rcall	.-3138   	; 0x7b58 <p_ntoa>
    879a:	7c 01       	movw	r14, r24
    879c:	a3 96       	adiw	r28, 0x23	; 35
    879e:	6e ad       	ldd	r22, Y+62	; 0x3e
    87a0:	7f ad       	ldd	r23, Y+63	; 0x3f
    87a2:	a3 97       	sbiw	r28, 0x23	; 35
    87a4:	67 7f       	andi	r22, 0xF7	; 247
    87a6:	60 35       	cpi	r22, 0x50	; 80
    87a8:	71 05       	cpc	r23, r1
    87aa:	c9 f5       	brne	.+114    	; 0x881e <_printf_fn+0x6d2>
    87ac:	34 c0       	rjmp	.+104    	; 0x8816 <_printf_fn+0x6ca>
    87ae:	c9 2c       	mov	r12, r9
    87b0:	d1 2c       	mov	r13, r1
    87b2:	a1 96       	adiw	r28, 0x21	; 33
    87b4:	ee ac       	ldd	r14, Y+62	; 0x3e
    87b6:	ff ac       	ldd	r15, Y+63	; 0x3f
    87b8:	a1 97       	sbiw	r28, 0x21	; 33
    87ba:	82 01       	movw	r16, r4
    87bc:	22 e4       	ldi	r18, 0x42	; 66
    87be:	30 e0       	ldi	r19, 0x00	; 0
    87c0:	ae 01       	movw	r20, r28
    87c2:	4f 5f       	subi	r20, 0xFF	; 255
    87c4:	5f 4f       	sbci	r21, 0xFF	; 255
    87c6:	a9 96       	adiw	r28, 0x29	; 41
    87c8:	6c ad       	ldd	r22, Y+60	; 0x3c
    87ca:	7d ad       	ldd	r23, Y+61	; 0x3d
    87cc:	8e ad       	ldd	r24, Y+62	; 0x3e
    87ce:	9f ad       	ldd	r25, Y+63	; 0x3f
    87d0:	a9 97       	sbiw	r28, 0x29	; 41
    87d2:	17 da       	rcall	.-3026   	; 0x7c02 <p_ftoa>
    87d4:	93 fa       	bst	r9, 3
    87d6:	00 27       	eor	r16, r16
    87d8:	00 f9       	bld	r16, 0
    87da:	10 e0       	ldi	r17, 0x00	; 0
    87dc:	9c 01       	movw	r18, r24
    87de:	24 c0       	rjmp	.+72     	; 0x8828 <_printf_fn+0x6dc>
    87e0:	c9 2c       	mov	r12, r9
    87e2:	d1 2c       	mov	r13, r1
    87e4:	a1 96       	adiw	r28, 0x21	; 33
    87e6:	ee ac       	ldd	r14, Y+62	; 0x3e
    87e8:	ff ac       	ldd	r15, Y+63	; 0x3f
    87ea:	a1 97       	sbiw	r28, 0x21	; 33
    87ec:	82 01       	movw	r16, r4
    87ee:	22 e4       	ldi	r18, 0x42	; 66
    87f0:	30 e0       	ldi	r19, 0x00	; 0
    87f2:	ae 01       	movw	r20, r28
    87f4:	4f 5f       	subi	r20, 0xFF	; 255
    87f6:	5f 4f       	sbci	r21, 0xFF	; 255
    87f8:	a9 96       	adiw	r28, 0x29	; 41
    87fa:	6c ad       	ldd	r22, Y+60	; 0x3c
    87fc:	7d ad       	ldd	r23, Y+61	; 0x3d
    87fe:	8e ad       	ldd	r24, Y+62	; 0x3e
    8800:	9f ad       	ldd	r25, Y+63	; 0x3f
    8802:	a9 97       	sbiw	r28, 0x29	; 41
    8804:	05 db       	rcall	.-2550   	; 0x7e10 <p_etoa>
    8806:	7c 01       	movw	r14, r24
    8808:	a3 96       	adiw	r28, 0x23	; 35
    880a:	4e ad       	ldd	r20, Y+62	; 0x3e
    880c:	5f ad       	ldd	r21, Y+63	; 0x3f
    880e:	a3 97       	sbiw	r28, 0x23	; 35
    8810:	45 34       	cpi	r20, 0x45	; 69
    8812:	51 05       	cpc	r21, r1
    8814:	21 f4       	brne	.+8      	; 0x881e <_printf_fn+0x6d2>
    8816:	ce 01       	movw	r24, r28
    8818:	01 96       	adiw	r24, 0x01	; 1
    881a:	0e 94 a8 30 	call	0x6150	; 0x6150 <strupper>
    881e:	93 fa       	bst	r9, 3
    8820:	00 27       	eor	r16, r16
    8822:	00 f9       	bld	r16, 0
    8824:	10 e0       	ldi	r17, 0x00	; 0
    8826:	97 01       	movw	r18, r14
    8828:	a2 01       	movw	r20, r4
    882a:	be 01       	movw	r22, r28
    882c:	6f 5f       	subi	r22, 0xFF	; 255
    882e:	7f 4f       	sbci	r23, 0xFF	; 255
    8830:	a5 96       	adiw	r28, 0x25	; 37
    8832:	8e ad       	ldd	r24, Y+62	; 0x3e
    8834:	9f ad       	ldd	r25, Y+63	; 0x3f
    8836:	a5 97       	sbiw	r28, 0x25	; 37
    8838:	47 dc       	rcall	.-1906   	; 0x80c8 <_puts_pad>
    883a:	69 c0       	rjmp	.+210    	; 0x890e <_printf_fn+0x7c2>
    883c:	a3 96       	adiw	r28, 0x23	; 35
    883e:	8e ad       	ldd	r24, Y+62	; 0x3e
    8840:	9f ad       	ldd	r25, Y+63	; 0x3f
    8842:	a3 97       	sbiw	r28, 0x23	; 35
    8844:	83 37       	cpi	r24, 0x73	; 115
    8846:	91 05       	cpc	r25, r1
    8848:	69 f4       	brne	.+26     	; 0x8864 <_printf_fn+0x718>
    884a:	71 01       	movw	r14, r2
    884c:	92 e0       	ldi	r25, 0x02	; 2
    884e:	e9 0e       	add	r14, r25
    8850:	f1 1c       	adc	r15, r1
    8852:	d1 01       	movw	r26, r2
    8854:	6d 91       	ld	r22, X+
    8856:	7c 91       	ld	r23, X
    8858:	61 15       	cp	r22, r1
    885a:	71 05       	cpc	r23, r1
    885c:	91 f4       	brne	.+36     	; 0x8882 <_printf_fn+0x736>
    885e:	66 e5       	ldi	r22, 0x56	; 86
    8860:	78 e0       	ldi	r23, 0x08	; 8
    8862:	0f c0       	rjmp	.+30     	; 0x8882 <_printf_fn+0x736>
    8864:	71 01       	movw	r14, r2
    8866:	b2 e0       	ldi	r27, 0x02	; 2
    8868:	eb 0e       	add	r14, r27
    886a:	f1 1c       	adc	r15, r1
    886c:	f1 01       	movw	r30, r2
    886e:	80 81       	ld	r24, Z
    8870:	60 96       	adiw	r28, 0x10	; 16
    8872:	8f af       	std	Y+63, r24	; 0x3f
    8874:	60 97       	sbiw	r28, 0x10	; 16
    8876:	61 96       	adiw	r28, 0x11	; 17
    8878:	1f ae       	std	Y+63, r1	; 0x3f
    887a:	61 97       	sbiw	r28, 0x11	; 17
    887c:	be 01       	movw	r22, r28
    887e:	61 5b       	subi	r22, 0xB1	; 177
    8880:	7f 4f       	sbci	r23, 0xFF	; 255
    8882:	fb 01       	movw	r30, r22
    8884:	01 90       	ld	r0, Z+
    8886:	00 20       	and	r0, r0
    8888:	e9 f7       	brne	.-6      	; 0x8884 <_printf_fn+0x738>
    888a:	31 97       	sbiw	r30, 0x01	; 1
    888c:	e6 1b       	sub	r30, r22
    888e:	f7 0b       	sbc	r31, r23
    8890:	a1 96       	adiw	r28, 0x21	; 33
    8892:	2e ad       	ldd	r18, Y+62	; 0x3e
    8894:	3f ad       	ldd	r19, Y+63	; 0x3f
    8896:	a1 97       	sbiw	r28, 0x21	; 33
    8898:	23 2b       	or	r18, r19
    889a:	21 f4       	brne	.+8      	; 0x88a4 <_printf_fn+0x758>
    889c:	a1 96       	adiw	r28, 0x21	; 33
    889e:	ff af       	std	Y+63, r31	; 0x3f
    88a0:	ee af       	std	Y+62, r30	; 0x3e
    88a2:	a1 97       	sbiw	r28, 0x21	; 33
    88a4:	a1 96       	adiw	r28, 0x21	; 33
    88a6:	4e ad       	ldd	r20, Y+62	; 0x3e
    88a8:	5f ad       	ldd	r21, Y+63	; 0x3f
    88aa:	a1 97       	sbiw	r28, 0x21	; 33
    88ac:	44 16       	cp	r4, r20
    88ae:	55 06       	cpc	r5, r21
    88b0:	3c f4       	brge	.+14     	; 0x88c0 <_printf_fn+0x774>
    88b2:	41 14       	cp	r4, r1
    88b4:	51 04       	cpc	r5, r1
    88b6:	21 f0       	breq	.+8      	; 0x88c0 <_printf_fn+0x774>
    88b8:	a1 96       	adiw	r28, 0x21	; 33
    88ba:	5f ae       	std	Y+63, r5	; 0x3f
    88bc:	4e ae       	std	Y+62, r4	; 0x3e
    88be:	a1 97       	sbiw	r28, 0x21	; 33
    88c0:	93 fa       	bst	r9, 3
    88c2:	00 27       	eor	r16, r16
    88c4:	00 f9       	bld	r16, 0
    88c6:	10 e0       	ldi	r17, 0x00	; 0
    88c8:	a1 96       	adiw	r28, 0x21	; 33
    88ca:	2e ad       	ldd	r18, Y+62	; 0x3e
    88cc:	3f ad       	ldd	r19, Y+63	; 0x3f
    88ce:	a1 97       	sbiw	r28, 0x21	; 33
    88d0:	a2 01       	movw	r20, r4
    88d2:	a5 96       	adiw	r28, 0x25	; 37
    88d4:	8e ad       	ldd	r24, Y+62	; 0x3e
    88d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    88d8:	a5 97       	sbiw	r28, 0x25	; 37
    88da:	f6 db       	rcall	.-2068   	; 0x80c8 <_puts_pad>
    88dc:	17 01       	movw	r2, r14
    88de:	17 c0       	rjmp	.+46     	; 0x890e <_printf_fn+0x7c2>
    88e0:	f6 01       	movw	r30, r12
    88e2:	5e 2d       	mov	r21, r14
    88e4:	0e 94 c6 e9 	call	0x1d38c	; 0x1d38c <__xload_1>
    88e8:	66 23       	and	r22, r22
    88ea:	89 f0       	breq	.+34     	; 0x890e <_printf_fn+0x7c2>
    88ec:	5f ef       	ldi	r21, 0xFF	; 255
    88ee:	c5 1a       	sub	r12, r21
    88f0:	d5 0a       	sbc	r13, r21
    88f2:	e5 0a       	sbc	r14, r21
    88f4:	a5 96       	adiw	r28, 0x25	; 37
    88f6:	ae ad       	ldd	r26, Y+62	; 0x3e
    88f8:	bf ad       	ldd	r27, Y+63	; 0x3f
    88fa:	a5 97       	sbiw	r28, 0x25	; 37
    88fc:	ed 91       	ld	r30, X+
    88fe:	fc 91       	ld	r31, X
    8900:	11 97       	sbiw	r26, 0x01	; 1
    8902:	cd 01       	movw	r24, r26
    8904:	09 95       	icall
    8906:	6c 14       	cp	r6, r12
    8908:	7d 04       	cpc	r7, r13
    890a:	8e 04       	cpc	r8, r14
    890c:	48 f7       	brcc	.-46     	; 0x88e0 <_printf_fn+0x794>
    890e:	e8 2c       	mov	r14, r8
    8910:	63 01       	movw	r12, r6
    8912:	4b cc       	rjmp	.-1898   	; 0x81aa <_printf_fn+0x5e>
    8914:	e2 e0       	ldi	r30, 0x02	; 2
    8916:	f0 e0       	ldi	r31, 0x00	; 0
    8918:	6f 96       	adiw	r28, 0x1f	; 31
    891a:	ff af       	std	Y+63, r31	; 0x3f
    891c:	ee af       	std	Y+62, r30	; 0x3e
    891e:	6f 97       	sbiw	r28, 0x1f	; 31
    8920:	57 cd       	rjmp	.-1362   	; 0x83d0 <_printf_fn+0x284>
    8922:	6f 96       	adiw	r28, 0x1f	; 31
    8924:	ee ad       	ldd	r30, Y+62	; 0x3e
    8926:	ff ad       	ldd	r31, Y+63	; 0x3f
    8928:	6f 97       	sbiw	r28, 0x1f	; 31
    892a:	32 97       	sbiw	r30, 0x02	; 2
    892c:	61 f4       	brne	.+24     	; 0x8946 <_printf_fn+0x7fa>
    892e:	51 01       	movw	r10, r2
    8930:	f2 e0       	ldi	r31, 0x02	; 2
    8932:	af 0e       	add	r10, r31
    8934:	b1 1c       	adc	r11, r1
    8936:	d1 01       	movw	r26, r2
    8938:	8d 91       	ld	r24, X+
    893a:	9c 91       	ld	r25, X
    893c:	65 96       	adiw	r28, 0x15	; 21
    893e:	9f af       	std	Y+63, r25	; 0x3f
    8940:	8e af       	std	Y+62, r24	; 0x3e
    8942:	65 97       	sbiw	r28, 0x15	; 21
    8944:	c5 cd       	rjmp	.-1142   	; 0x84d0 <_printf_fn+0x384>
    8946:	6f 96       	adiw	r28, 0x1f	; 31
    8948:	2e ad       	ldd	r18, Y+62	; 0x3e
    894a:	3f ad       	ldd	r19, Y+63	; 0x3f
    894c:	6f 97       	sbiw	r28, 0x1f	; 31
    894e:	24 30       	cpi	r18, 0x04	; 4
    8950:	31 05       	cpc	r19, r1
    8952:	09 f0       	breq	.+2      	; 0x8956 <_printf_fn+0x80a>
    8954:	fe cd       	rjmp	.-1028   	; 0x8552 <_printf_fn+0x406>
    8956:	51 01       	movw	r10, r2
    8958:	f4 e0       	ldi	r31, 0x04	; 4
    895a:	af 0e       	add	r10, r31
    895c:	b1 1c       	adc	r11, r1
    895e:	f1 01       	movw	r30, r2
    8960:	80 81       	ld	r24, Z
    8962:	91 81       	ldd	r25, Z+1	; 0x01
    8964:	a2 81       	ldd	r26, Z+2	; 0x02
    8966:	b3 81       	ldd	r27, Z+3	; 0x03
    8968:	2f 96       	adiw	r28, 0x0f	; 15
    896a:	8c af       	std	Y+60, r24	; 0x3c
    896c:	9d af       	std	Y+61, r25	; 0x3d
    896e:	ae af       	std	Y+62, r26	; 0x3e
    8970:	bf af       	std	Y+63, r27	; 0x3f
    8972:	2f 97       	sbiw	r28, 0x0f	; 15
    8974:	dc cd       	rjmp	.-1096   	; 0x852e <_printf_fn+0x3e2>
    8976:	c5 59       	subi	r28, 0x95	; 149
    8978:	df 4f       	sbci	r29, 0xFF	; 255
    897a:	e2 e1       	ldi	r30, 0x12	; 18
    897c:	0c 94 ab e9 	jmp	0x1d356	; 0x1d356 <__epilogue_restores__>

00008980 <vsnprintf_P>:
    8980:	a8 e0       	ldi	r26, 0x08	; 8
    8982:	b0 e0       	ldi	r27, 0x00	; 0
    8984:	e6 ec       	ldi	r30, 0xC6	; 198
    8986:	f4 e4       	ldi	r31, 0x44	; 68
    8988:	0c 94 9b e9 	jmp	0x1d336	; 0x1d336 <__prologue_saves__+0x18>
    898c:	7c 01       	movw	r14, r24
    898e:	cb 01       	movw	r24, r22
    8990:	64 2f       	mov	r22, r20
    8992:	a9 01       	movw	r20, r18
    8994:	98 01       	movw	r18, r16
    8996:	f7 01       	movw	r30, r14
    8998:	10 82       	st	Z, r1
    899a:	ed ec       	ldi	r30, 0xCD	; 205
    899c:	fc e3       	ldi	r31, 0x3C	; 60
    899e:	fa 83       	std	Y+2, r31	; 0x02
    89a0:	e9 83       	std	Y+1, r30	; 0x01
    89a2:	9e 83       	std	Y+6, r25	; 0x06
    89a4:	8d 83       	std	Y+5, r24	; 0x05
    89a6:	18 86       	std	Y+8, r1	; 0x08
    89a8:	1f 82       	std	Y+7, r1	; 0x07
    89aa:	fc 82       	std	Y+4, r15	; 0x04
    89ac:	eb 82       	std	Y+3, r14	; 0x03
    89ae:	ce 01       	movw	r24, r28
    89b0:	01 96       	adiw	r24, 0x01	; 1
    89b2:	cc db       	rcall	.-2152   	; 0x814c <_printf_fn>
    89b4:	f7 01       	movw	r30, r14
    89b6:	01 90       	ld	r0, Z+
    89b8:	00 20       	and	r0, r0
    89ba:	e9 f7       	brne	.-6      	; 0x89b6 <vsnprintf_P+0x36>
    89bc:	cf 01       	movw	r24, r30
    89be:	01 97       	sbiw	r24, 0x01	; 1
    89c0:	8e 19       	sub	r24, r14
    89c2:	9f 09       	sbc	r25, r15
    89c4:	28 96       	adiw	r28, 0x08	; 8
    89c6:	e6 e0       	ldi	r30, 0x06	; 6
    89c8:	0c 94 b7 e9 	jmp	0x1d36e	; 0x1d36e <__epilogue_restores__+0x18>

000089cc <snprintf_P>:
    89cc:	a0 e0       	ldi	r26, 0x00	; 0
    89ce:	b0 e0       	ldi	r27, 0x00	; 0
    89d0:	ec ee       	ldi	r30, 0xEC	; 236
    89d2:	f4 e4       	ldi	r31, 0x44	; 68
    89d4:	0c 94 9d e9 	jmp	0x1d33a	; 0x1d33a <__prologue_saves__+0x1c>
    89d8:	8e 01       	movw	r16, r28
    89da:	02 5f       	subi	r16, 0xF2	; 242
    89dc:	1f 4f       	sbci	r17, 0xFF	; 255
    89de:	2b 85       	ldd	r18, Y+11	; 0x0b
    89e0:	3c 85       	ldd	r19, Y+12	; 0x0c
    89e2:	4d 85       	ldd	r20, Y+13	; 0x0d
    89e4:	69 85       	ldd	r22, Y+9	; 0x09
    89e6:	7a 85       	ldd	r23, Y+10	; 0x0a
    89e8:	8f 81       	ldd	r24, Y+7	; 0x07
    89ea:	98 85       	ldd	r25, Y+8	; 0x08
    89ec:	c9 df       	rcall	.-110    	; 0x8980 <vsnprintf_P>
    89ee:	e4 e0       	ldi	r30, 0x04	; 4
    89f0:	0c 94 b9 e9 	jmp	0x1d372	; 0x1d372 <__epilogue_restores__+0x1c>

000089f4 <sprintf_P>:
    89f4:	a0 e0       	ldi	r26, 0x00	; 0
    89f6:	b0 e0       	ldi	r27, 0x00	; 0
    89f8:	e0 e0       	ldi	r30, 0x00	; 0
    89fa:	f5 e4       	ldi	r31, 0x45	; 69
    89fc:	0c 94 9d e9 	jmp	0x1d33a	; 0x1d33a <__prologue_saves__+0x1c>
    8a00:	8e 01       	movw	r16, r28
    8a02:	04 5f       	subi	r16, 0xF4	; 244
    8a04:	1f 4f       	sbci	r17, 0xFF	; 255
    8a06:	29 85       	ldd	r18, Y+9	; 0x09
    8a08:	3a 85       	ldd	r19, Y+10	; 0x0a
    8a0a:	4b 85       	ldd	r20, Y+11	; 0x0b
    8a0c:	60 e0       	ldi	r22, 0x00	; 0
    8a0e:	74 e0       	ldi	r23, 0x04	; 4
    8a10:	8f 81       	ldd	r24, Y+7	; 0x07
    8a12:	98 85       	ldd	r25, Y+8	; 0x08
    8a14:	b5 df       	rcall	.-150    	; 0x8980 <vsnprintf_P>
    8a16:	e4 e0       	ldi	r30, 0x04	; 4
    8a18:	0c 94 b9 e9 	jmp	0x1d372	; 0x1d372 <__epilogue_restores__+0x1c>

00008a1c <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE 
int 
printf_P(__memx const char *format, ...)
{
    8a1c:	a8 e0       	ldi	r26, 0x08	; 8
    8a1e:	b0 e0       	ldi	r27, 0x00	; 0
    8a20:	e4 e1       	ldi	r30, 0x14	; 20
    8a22:	f5 e4       	ldi	r31, 0x45	; 69
    8a24:	0c 94 9f e9 	jmp	0x1d33e	; 0x1d33e <__prologue_saves__+0x20>
    8a28:	9e 01       	movw	r18, r28
    8a2a:	23 5f       	subi	r18, 0xF3	; 243
    8a2c:	3f 4f       	sbci	r19, 0xFF	; 255
    8a2e:	f9 01       	movw	r30, r18
    8a30:	41 91       	ld	r20, Z+
    8a32:	51 91       	ld	r21, Z+
    8a34:	61 91       	ld	r22, Z+
    8a36:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8a38:	86 ee       	ldi	r24, 0xE6	; 230
    8a3a:	9c e3       	ldi	r25, 0x3C	; 60
    8a3c:	9a 83       	std	Y+2, r25	; 0x02
    8a3e:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8a40:	18 86       	std	Y+8, r1	; 0x08
    8a42:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8a44:	ce 01       	movw	r24, r28
    8a46:	01 96       	adiw	r24, 0x01	; 1
    8a48:	81 db       	rcall	.-2302   	; 0x814c <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8a4a:	8f 81       	ldd	r24, Y+7	; 0x07
    8a4c:	98 85       	ldd	r25, Y+8	; 0x08
    8a4e:	28 96       	adiw	r28, 0x08	; 8
    8a50:	e2 e0       	ldi	r30, 0x02	; 2
    8a52:	0c 94 bb e9 	jmp	0x1d376	; 0x1d376 <__epilogue_restores__+0x20>

00008a56 <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8a56:	9c 01       	movw	r18, r24
    8a58:	20 53       	subi	r18, 0x30	; 48
    8a5a:	31 09       	sbc	r19, r1
    8a5c:	2a 30       	cpi	r18, 0x0A	; 10
    8a5e:	31 05       	cpc	r19, r1
    8a60:	10 f4       	brcc	.+4      	; 0x8a66 <atodigit+0x10>
    8a62:	c9 01       	movw	r24, r18
    8a64:	10 c0       	rjmp	.+32     	; 0x8a86 <atodigit+0x30>
    8a66:	9c 01       	movw	r18, r24
    8a68:	21 54       	subi	r18, 0x41	; 65
    8a6a:	31 09       	sbc	r19, r1
    8a6c:	26 30       	cpi	r18, 0x06	; 6
    8a6e:	31 05       	cpc	r19, r1
    8a70:	10 f4       	brcc	.+4      	; 0x8a76 <atodigit+0x20>
    8a72:	c7 97       	sbiw	r24, 0x37	; 55
    8a74:	08 c0       	rjmp	.+16     	; 0x8a86 <atodigit+0x30>
    8a76:	9c 01       	movw	r18, r24
    8a78:	21 56       	subi	r18, 0x61	; 97
    8a7a:	31 09       	sbc	r19, r1
    8a7c:	26 30       	cpi	r18, 0x06	; 6
    8a7e:	31 05       	cpc	r19, r1
    8a80:	28 f4       	brcc	.+10     	; 0x8a8c <atodigit+0x36>
    8a82:	87 55       	subi	r24, 0x57	; 87
    8a84:	91 09       	sbc	r25, r1
    8a86:	86 17       	cp	r24, r22
    8a88:	97 07       	cpc	r25, r23
    8a8a:	14 f0       	brlt	.+4      	; 0x8a90 <atodigit+0x3a>
    8a8c:	8f ef       	ldi	r24, 0xFF	; 255
    8a8e:	9f ef       	ldi	r25, 0xFF	; 255
    8a90:	08 95       	ret

00008a92 <strtol>:
    8a92:	a0 e0       	ldi	r26, 0x00	; 0
    8a94:	b0 e0       	ldi	r27, 0x00	; 0
    8a96:	ef e4       	ldi	r30, 0x4F	; 79
    8a98:	f5 e4       	ldi	r31, 0x45	; 69
    8a9a:	0c 94 8f e9 	jmp	0x1d31e	; 0x1d31e <__prologue_saves__>
    8a9e:	2b 01       	movw	r4, r22
    8aa0:	8a 01       	movw	r16, r20
    8aa2:	ec 01       	movw	r28, r24
    8aa4:	28 81       	ld	r18, Y
    8aa6:	01 96       	adiw	r24, 0x01	; 1
    8aa8:	20 32       	cpi	r18, 0x20	; 32
    8aaa:	d9 f3       	breq	.-10     	; 0x8aa2 <strtol+0x10>
    8aac:	29 30       	cpi	r18, 0x09	; 9
    8aae:	c9 f3       	breq	.-14     	; 0x8aa2 <strtol+0x10>
    8ab0:	2d 32       	cpi	r18, 0x2D	; 45
    8ab2:	29 f4       	brne	.+10     	; 0x8abe <strtol+0x2c>
    8ab4:	ec 01       	movw	r28, r24
    8ab6:	66 24       	eor	r6, r6
    8ab8:	63 94       	inc	r6
    8aba:	71 2c       	mov	r7, r1
    8abc:	05 c0       	rjmp	.+10     	; 0x8ac8 <strtol+0x36>
    8abe:	2b 32       	cpi	r18, 0x2B	; 43
    8ac0:	09 f4       	brne	.+2      	; 0x8ac4 <strtol+0x32>
    8ac2:	ec 01       	movw	r28, r24
    8ac4:	61 2c       	mov	r6, r1
    8ac6:	71 2c       	mov	r7, r1
    8ac8:	9e 01       	movw	r18, r28
    8aca:	2f 5f       	subi	r18, 0xFF	; 255
    8acc:	3f 4f       	sbci	r19, 0xFF	; 255
    8ace:	88 81       	ld	r24, Y
    8ad0:	80 33       	cpi	r24, 0x30	; 48
    8ad2:	11 f4       	brne	.+4      	; 0x8ad8 <strtol+0x46>
    8ad4:	e9 01       	movw	r28, r18
    8ad6:	f8 cf       	rjmp	.-16     	; 0x8ac8 <strtol+0x36>
    8ad8:	c1 2c       	mov	r12, r1
    8ada:	d1 2c       	mov	r13, r1
    8adc:	76 01       	movw	r14, r12
    8ade:	48 01       	movw	r8, r16
    8ae0:	01 2e       	mov	r0, r17
    8ae2:	00 0c       	add	r0, r0
    8ae4:	aa 08       	sbc	r10, r10
    8ae6:	bb 08       	sbc	r11, r11
    8ae8:	3c 2e       	mov	r3, r28
    8aea:	2d 2e       	mov	r2, r29
    8aec:	89 91       	ld	r24, Y+
    8aee:	88 23       	and	r24, r24
    8af0:	31 f0       	breq	.+12     	; 0x8afe <strtol+0x6c>
    8af2:	b8 01       	movw	r22, r16
    8af4:	90 e0       	ldi	r25, 0x00	; 0
    8af6:	af df       	rcall	.-162    	; 0x8a56 <atodigit>
    8af8:	fc 01       	movw	r30, r24
    8afa:	97 ff       	sbrs	r25, 7
    8afc:	0c c0       	rjmp	.+24     	; 0x8b16 <strtol+0x84>
    8afe:	61 14       	cp	r6, r1
    8b00:	71 04       	cpc	r7, r1
    8b02:	c1 f0       	breq	.+48     	; 0x8b34 <strtol+0xa2>
    8b04:	f0 94       	com	r15
    8b06:	e0 94       	com	r14
    8b08:	d0 94       	com	r13
    8b0a:	c0 94       	com	r12
    8b0c:	c1 1c       	adc	r12, r1
    8b0e:	d1 1c       	adc	r13, r1
    8b10:	e1 1c       	adc	r14, r1
    8b12:	f1 1c       	adc	r15, r1
    8b14:	0f c0       	rjmp	.+30     	; 0x8b34 <strtol+0xa2>
    8b16:	a5 01       	movw	r20, r10
    8b18:	94 01       	movw	r18, r8
    8b1a:	c7 01       	movw	r24, r14
    8b1c:	b6 01       	movw	r22, r12
    8b1e:	0e 94 e0 e8 	call	0x1d1c0	; 0x1d1c0 <__mulsi3>
    8b22:	6f 01       	movw	r12, r30
    8b24:	ff 0f       	add	r31, r31
    8b26:	ee 08       	sbc	r14, r14
    8b28:	ff 08       	sbc	r15, r15
    8b2a:	c6 0e       	add	r12, r22
    8b2c:	d7 1e       	adc	r13, r23
    8b2e:	e8 1e       	adc	r14, r24
    8b30:	f9 1e       	adc	r15, r25
    8b32:	da cf       	rjmp	.-76     	; 0x8ae8 <strtol+0x56>
    8b34:	41 14       	cp	r4, r1
    8b36:	51 04       	cpc	r5, r1
    8b38:	19 f0       	breq	.+6      	; 0x8b40 <strtol+0xae>
    8b3a:	f2 01       	movw	r30, r4
    8b3c:	30 82       	st	Z, r3
    8b3e:	21 82       	std	Z+1, r2	; 0x01
    8b40:	c7 01       	movw	r24, r14
    8b42:	b6 01       	movw	r22, r12
    8b44:	cd b7       	in	r28, 0x3d	; 61
    8b46:	de b7       	in	r29, 0x3e	; 62
    8b48:	e2 e1       	ldi	r30, 0x12	; 18
    8b4a:	0c 94 ab e9 	jmp	0x1d356	; 0x1d356 <__epilogue_restores__>

00008b4e <atoh>:
    8b4e:	40 e1       	ldi	r20, 0x10	; 16
    8b50:	50 e0       	ldi	r21, 0x00	; 0
    8b52:	60 e0       	ldi	r22, 0x00	; 0
    8b54:	70 e0       	ldi	r23, 0x00	; 0
    8b56:	9d cf       	rjmp	.-198    	; 0x8a92 <strtol>
    8b58:	08 95       	ret

00008b5a <atoi>:
MEMSPACE 
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8b5a:	4a e0       	ldi	r20, 0x0A	; 10
    8b5c:	50 e0       	ldi	r21, 0x00	; 0
    8b5e:	60 e0       	ldi	r22, 0x00	; 0
    8b60:	70 e0       	ldi	r23, 0x00	; 0
    8b62:	97 df       	rcall	.-210    	; 0x8a92 <strtol>
    return((int)num);
}
    8b64:	cb 01       	movw	r24, r22
    8b66:	08 95       	ret

00008b68 <atol>:
MEMSPACE 
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8b68:	4a e0       	ldi	r20, 0x0A	; 10
    8b6a:	50 e0       	ldi	r21, 0x00	; 0
    8b6c:	60 e0       	ldi	r22, 0x00	; 0
    8b6e:	70 e0       	ldi	r23, 0x00	; 0
    8b70:	90 cf       	rjmp	.-224    	; 0x8a92 <strtol>
    return(num);
}
    8b72:	08 95       	ret

00008b74 <ld_dword>:
			}
		}
	}

	LEAVE_FF(fs, res);
}
    8b74:	fc 01       	movw	r30, r24
    8b76:	62 81       	ldd	r22, Z+2	; 0x02
    8b78:	73 81       	ldd	r23, Z+3	; 0x03
    8b7a:	cb 01       	movw	r24, r22
    8b7c:	a0 e0       	ldi	r26, 0x00	; 0
    8b7e:	b0 e0       	ldi	r27, 0x00	; 0
    8b80:	ba 2f       	mov	r27, r26
    8b82:	a9 2f       	mov	r26, r25
    8b84:	98 2f       	mov	r25, r24
    8b86:	88 27       	eor	r24, r24
    8b88:	21 81       	ldd	r18, Z+1	; 0x01
    8b8a:	82 2b       	or	r24, r18
    8b8c:	ba 2f       	mov	r27, r26
    8b8e:	a9 2f       	mov	r26, r25
    8b90:	98 2f       	mov	r25, r24
    8b92:	88 27       	eor	r24, r24
    8b94:	20 81       	ld	r18, Z
    8b96:	bc 01       	movw	r22, r24
    8b98:	cd 01       	movw	r24, r26
    8b9a:	62 2b       	or	r22, r18
    8b9c:	08 95       	ret

00008b9e <st_dword>:
    8b9e:	fc 01       	movw	r30, r24
    8ba0:	40 83       	st	Z, r20
    8ba2:	51 83       	std	Z+1, r21	; 0x01
    8ba4:	62 83       	std	Z+2, r22	; 0x02
    8ba6:	73 83       	std	Z+3, r23	; 0x03
    8ba8:	08 95       	ret

00008baa <mem_set>:
    8baa:	48 0f       	add	r20, r24
    8bac:	59 1f       	adc	r21, r25
    8bae:	fc 01       	movw	r30, r24
    8bb0:	61 93       	st	Z+, r22
    8bb2:	cf 01       	movw	r24, r30
    8bb4:	e4 17       	cp	r30, r20
    8bb6:	f5 07       	cpc	r31, r21
    8bb8:	d1 f7       	brne	.-12     	; 0x8bae <mem_set+0x4>
    8bba:	08 95       	ret

00008bbc <clust2sect>:
    8bbc:	0f 93       	push	r16
    8bbe:	1f 93       	push	r17
    8bc0:	fc 01       	movw	r30, r24
    8bc2:	9a 01       	movw	r18, r20
    8bc4:	ab 01       	movw	r20, r22
    8bc6:	22 50       	subi	r18, 0x02	; 2
    8bc8:	31 09       	sbc	r19, r1
    8bca:	41 09       	sbc	r20, r1
    8bcc:	51 09       	sbc	r21, r1
    8bce:	81 8d       	ldd	r24, Z+25	; 0x19
    8bd0:	92 8d       	ldd	r25, Z+26	; 0x1a
    8bd2:	a3 8d       	ldd	r26, Z+27	; 0x1b
    8bd4:	b4 8d       	ldd	r27, Z+28	; 0x1c
    8bd6:	02 97       	sbiw	r24, 0x02	; 2
    8bd8:	a1 09       	sbc	r26, r1
    8bda:	b1 09       	sbc	r27, r1
    8bdc:	28 17       	cp	r18, r24
    8bde:	39 07       	cpc	r19, r25
    8be0:	4a 07       	cpc	r20, r26
    8be2:	5b 07       	cpc	r21, r27
    8be4:	68 f4       	brcc	.+26     	; 0x8c00 <clust2sect+0x44>
    8be6:	a1 85       	ldd	r26, Z+9	; 0x09
    8be8:	b2 85       	ldd	r27, Z+10	; 0x0a
    8bea:	0e 94 6f e9 	call	0x1d2de	; 0x1d2de <__muluhisi3>
    8bee:	05 a5       	ldd	r16, Z+45	; 0x2d
    8bf0:	16 a5       	ldd	r17, Z+46	; 0x2e
    8bf2:	27 a5       	ldd	r18, Z+47	; 0x2f
    8bf4:	30 a9       	ldd	r19, Z+48	; 0x30
    8bf6:	60 0f       	add	r22, r16
    8bf8:	71 1f       	adc	r23, r17
    8bfa:	82 1f       	adc	r24, r18
    8bfc:	93 1f       	adc	r25, r19
    8bfe:	03 c0       	rjmp	.+6      	; 0x8c06 <clust2sect+0x4a>
    8c00:	60 e0       	ldi	r22, 0x00	; 0
    8c02:	70 e0       	ldi	r23, 0x00	; 0
    8c04:	cb 01       	movw	r24, r22
    8c06:	1f 91       	pop	r17
    8c08:	0f 91       	pop	r16
    8c0a:	08 95       	ret

00008c0c <clmt_clust>:
    8c0c:	cf 93       	push	r28
    8c0e:	df 93       	push	r29
    8c10:	fc 01       	movw	r30, r24
    8c12:	c2 a1       	ldd	r28, Z+34	; 0x22
    8c14:	d3 a1       	ldd	r29, Z+35	; 0x23
    8c16:	24 96       	adiw	r28, 0x04	; 4
    8c18:	cb 01       	movw	r24, r22
    8c1a:	ba 01       	movw	r22, r20
    8c1c:	29 e0       	ldi	r18, 0x09	; 9
    8c1e:	96 95       	lsr	r25
    8c20:	87 95       	ror	r24
    8c22:	77 95       	ror	r23
    8c24:	67 95       	ror	r22
    8c26:	2a 95       	dec	r18
    8c28:	d1 f7       	brne	.-12     	; 0x8c1e <clmt_clust+0x12>
    8c2a:	01 90       	ld	r0, Z+
    8c2c:	f0 81       	ld	r31, Z
    8c2e:	e0 2d       	mov	r30, r0
    8c30:	21 85       	ldd	r18, Z+9	; 0x09
    8c32:	32 85       	ldd	r19, Z+10	; 0x0a
    8c34:	40 e0       	ldi	r20, 0x00	; 0
    8c36:	50 e0       	ldi	r21, 0x00	; 0
    8c38:	0e 94 22 e9 	call	0x1d244	; 0x1d244 <__udivmodsi4>
    8c3c:	88 81       	ld	r24, Y
    8c3e:	99 81       	ldd	r25, Y+1	; 0x01
    8c40:	aa 81       	ldd	r26, Y+2	; 0x02
    8c42:	bb 81       	ldd	r27, Y+3	; 0x03
    8c44:	00 97       	sbiw	r24, 0x00	; 0
    8c46:	a1 05       	cpc	r26, r1
    8c48:	b1 05       	cpc	r27, r1
    8c4a:	b1 f0       	breq	.+44     	; 0x8c78 <clmt_clust+0x6c>
    8c4c:	28 17       	cp	r18, r24
    8c4e:	39 07       	cpc	r19, r25
    8c50:	4a 07       	cpc	r20, r26
    8c52:	5b 07       	cpc	r21, r27
    8c54:	30 f0       	brcs	.+12     	; 0x8c62 <clmt_clust+0x56>
    8c56:	28 1b       	sub	r18, r24
    8c58:	39 0b       	sbc	r19, r25
    8c5a:	4a 0b       	sbc	r20, r26
    8c5c:	5b 0b       	sbc	r21, r27
    8c5e:	28 96       	adiw	r28, 0x08	; 8
    8c60:	ed cf       	rjmp	.-38     	; 0x8c3c <clmt_clust+0x30>
    8c62:	8c 81       	ldd	r24, Y+4	; 0x04
    8c64:	9d 81       	ldd	r25, Y+5	; 0x05
    8c66:	ae 81       	ldd	r26, Y+6	; 0x06
    8c68:	bf 81       	ldd	r27, Y+7	; 0x07
    8c6a:	bc 01       	movw	r22, r24
    8c6c:	cd 01       	movw	r24, r26
    8c6e:	62 0f       	add	r22, r18
    8c70:	73 1f       	adc	r23, r19
    8c72:	84 1f       	adc	r24, r20
    8c74:	95 1f       	adc	r25, r21
    8c76:	03 c0       	rjmp	.+6      	; 0x8c7e <clmt_clust+0x72>
    8c78:	60 e0       	ldi	r22, 0x00	; 0
    8c7a:	70 e0       	ldi	r23, 0x00	; 0
    8c7c:	cb 01       	movw	r24, r22
    8c7e:	df 91       	pop	r29
    8c80:	cf 91       	pop	r28
    8c82:	08 95       	ret

00008c84 <sum_sfn>:
    8c84:	fc 01       	movw	r30, r24
    8c86:	9c 01       	movw	r18, r24
    8c88:	25 5f       	subi	r18, 0xF5	; 245
    8c8a:	3f 4f       	sbci	r19, 0xFF	; 255
    8c8c:	80 e0       	ldi	r24, 0x00	; 0
    8c8e:	98 2f       	mov	r25, r24
    8c90:	90 fb       	bst	r25, 0
    8c92:	97 95       	ror	r25
    8c94:	97 f9       	bld	r25, 7
    8c96:	81 91       	ld	r24, Z+
    8c98:	89 0f       	add	r24, r25
    8c9a:	e2 17       	cp	r30, r18
    8c9c:	f3 07       	cpc	r31, r19
    8c9e:	b9 f7       	brne	.-18     	; 0x8c8e <sum_sfn+0xa>
    8ca0:	08 95       	ret

00008ca2 <get_ldnumber>:
    8ca2:	dc 01       	movw	r26, r24
    8ca4:	ed 91       	ld	r30, X+
    8ca6:	fc 91       	ld	r31, X
    8ca8:	30 97       	sbiw	r30, 0x00	; 0
    8caa:	c1 f0       	breq	.+48     	; 0x8cdc <get_ldnumber+0x3a>
    8cac:	df 01       	movw	r26, r30
    8cae:	9d 01       	movw	r18, r26
    8cb0:	4d 91       	ld	r20, X+
    8cb2:	40 32       	cpi	r20, 0x20	; 32
    8cb4:	80 f0       	brcs	.+32     	; 0x8cd6 <get_ldnumber+0x34>
    8cb6:	4a 33       	cpi	r20, 0x3A	; 58
    8cb8:	d1 f7       	brne	.-12     	; 0x8cae <get_ldnumber+0xc>
    8cba:	af 01       	movw	r20, r30
    8cbc:	4f 5f       	subi	r20, 0xFF	; 255
    8cbe:	5f 4f       	sbci	r21, 0xFF	; 255
    8cc0:	24 17       	cp	r18, r20
    8cc2:	35 07       	cpc	r19, r21
    8cc4:	59 f4       	brne	.+22     	; 0x8cdc <get_ldnumber+0x3a>
    8cc6:	40 81       	ld	r20, Z
    8cc8:	40 33       	cpi	r20, 0x30	; 48
    8cca:	41 f4       	brne	.+16     	; 0x8cdc <get_ldnumber+0x3a>
    8ccc:	2f 5f       	subi	r18, 0xFF	; 255
    8cce:	3f 4f       	sbci	r19, 0xFF	; 255
    8cd0:	fc 01       	movw	r30, r24
    8cd2:	31 83       	std	Z+1, r19	; 0x01
    8cd4:	20 83       	st	Z, r18
    8cd6:	80 e0       	ldi	r24, 0x00	; 0
    8cd8:	90 e0       	ldi	r25, 0x00	; 0
    8cda:	08 95       	ret
    8cdc:	8f ef       	ldi	r24, 0xFF	; 255
    8cde:	9f ef       	ldi	r25, 0xFF	; 255
    8ce0:	08 95       	ret

00008ce2 <validate>:
    8ce2:	0f 93       	push	r16
    8ce4:	1f 93       	push	r17
    8ce6:	cf 93       	push	r28
    8ce8:	df 93       	push	r29
    8cea:	ec 01       	movw	r28, r24
    8cec:	8b 01       	movw	r16, r22
    8cee:	89 2b       	or	r24, r25
    8cf0:	31 f4       	brne	.+12     	; 0x8cfe <validate+0x1c>
    8cf2:	f8 01       	movw	r30, r16
    8cf4:	11 82       	std	Z+1, r1	; 0x01
    8cf6:	10 82       	st	Z, r1
    8cf8:	89 e0       	ldi	r24, 0x09	; 9
    8cfa:	90 e0       	ldi	r25, 0x00	; 0
    8cfc:	1a c0       	rjmp	.+52     	; 0x8d32 <validate+0x50>
    8cfe:	e8 81       	ld	r30, Y
    8d00:	f9 81       	ldd	r31, Y+1	; 0x01
    8d02:	30 97       	sbiw	r30, 0x00	; 0
    8d04:	b1 f3       	breq	.-20     	; 0x8cf2 <validate+0x10>
    8d06:	80 81       	ld	r24, Z
    8d08:	88 23       	and	r24, r24
    8d0a:	99 f3       	breq	.-26     	; 0x8cf2 <validate+0x10>
    8d0c:	25 81       	ldd	r18, Z+5	; 0x05
    8d0e:	36 81       	ldd	r19, Z+6	; 0x06
    8d10:	8a 81       	ldd	r24, Y+2	; 0x02
    8d12:	9b 81       	ldd	r25, Y+3	; 0x03
    8d14:	28 17       	cp	r18, r24
    8d16:	39 07       	cpc	r19, r25
    8d18:	61 f7       	brne	.-40     	; 0x8cf2 <validate+0x10>
    8d1a:	81 81       	ldd	r24, Z+1	; 0x01
    8d1c:	0e 94 e0 6c 	call	0xd9c0	; 0xd9c0 <disk_status>
    8d20:	80 fd       	sbrc	r24, 0
    8d22:	e7 cf       	rjmp	.-50     	; 0x8cf2 <validate+0x10>
    8d24:	88 81       	ld	r24, Y
    8d26:	99 81       	ldd	r25, Y+1	; 0x01
    8d28:	f8 01       	movw	r30, r16
    8d2a:	91 83       	std	Z+1, r25	; 0x01
    8d2c:	80 83       	st	Z, r24
    8d2e:	80 e0       	ldi	r24, 0x00	; 0
    8d30:	90 e0       	ldi	r25, 0x00	; 0
    8d32:	df 91       	pop	r29
    8d34:	cf 91       	pop	r28
    8d36:	1f 91       	pop	r17
    8d38:	0f 91       	pop	r16
    8d3a:	08 95       	ret

00008d3c <mem_cpy.part.0>:
    8d3c:	fb 01       	movw	r30, r22
    8d3e:	48 0f       	add	r20, r24
    8d40:	59 1f       	adc	r21, r25
    8d42:	21 91       	ld	r18, Z+
    8d44:	dc 01       	movw	r26, r24
    8d46:	2d 93       	st	X+, r18
    8d48:	cd 01       	movw	r24, r26
    8d4a:	a4 17       	cp	r26, r20
    8d4c:	b5 07       	cpc	r27, r21
    8d4e:	c9 f7       	brne	.-14     	; 0x8d42 <mem_cpy.part.0+0x6>
    8d50:	08 95       	ret

00008d52 <ld_clust.isra.1>:
    8d52:	fb 01       	movw	r30, r22
    8d54:	42 8d       	ldd	r20, Z+26	; 0x1a
    8d56:	53 8d       	ldd	r21, Z+27	; 0x1b
    8d58:	60 e0       	ldi	r22, 0x00	; 0
    8d5a:	70 e0       	ldi	r23, 0x00	; 0
    8d5c:	83 30       	cpi	r24, 0x03	; 3
    8d5e:	59 f4       	brne	.+22     	; 0x8d76 <ld_clust.isra.1+0x24>
    8d60:	84 89       	ldd	r24, Z+20	; 0x14
    8d62:	95 89       	ldd	r25, Z+21	; 0x15
    8d64:	a0 e0       	ldi	r26, 0x00	; 0
    8d66:	b0 e0       	ldi	r27, 0x00	; 0
    8d68:	dc 01       	movw	r26, r24
    8d6a:	99 27       	eor	r25, r25
    8d6c:	88 27       	eor	r24, r24
    8d6e:	48 2b       	or	r20, r24
    8d70:	59 2b       	or	r21, r25
    8d72:	6a 2b       	or	r22, r26
    8d74:	7b 2b       	or	r23, r27
    8d76:	cb 01       	movw	r24, r22
    8d78:	ba 01       	movw	r22, r20
    8d7a:	08 95       	ret

00008d7c <st_clust.isra.2>:
    8d7c:	fb 01       	movw	r30, r22
    8d7e:	22 8f       	std	Z+26, r18	; 0x1a
    8d80:	33 8f       	std	Z+27, r19	; 0x1b
    8d82:	dc 01       	movw	r26, r24
    8d84:	8c 91       	ld	r24, X
    8d86:	83 30       	cpi	r24, 0x03	; 3
    8d88:	29 f4       	brne	.+10     	; 0x8d94 <st_clust.isra.2+0x18>
    8d8a:	ca 01       	movw	r24, r20
    8d8c:	aa 27       	eor	r26, r26
    8d8e:	bb 27       	eor	r27, r27
    8d90:	84 8b       	std	Z+20, r24	; 0x14
    8d92:	95 8b       	std	Z+21, r25	; 0x15
    8d94:	08 95       	ret

00008d96 <sync_window.part.3>:
    8d96:	a0 e0       	ldi	r26, 0x00	; 0
    8d98:	b0 e0       	ldi	r27, 0x00	; 0
    8d9a:	e1 ed       	ldi	r30, 0xD1	; 209
    8d9c:	f6 e4       	ldi	r31, 0x46	; 70
    8d9e:	0c 94 95 e9 	jmp	0x1d32a	; 0x1d32a <__prologue_saves__+0xc>
    8da2:	ec 01       	movw	r28, r24
    8da4:	89 a8       	ldd	r8, Y+49	; 0x31
    8da6:	9a a8       	ldd	r9, Y+50	; 0x32
    8da8:	ab a8       	ldd	r10, Y+51	; 0x33
    8daa:	bc a8       	ldd	r11, Y+52	; 0x34
    8dac:	6c 01       	movw	r12, r24
    8dae:	85 e3       	ldi	r24, 0x35	; 53
    8db0:	c8 0e       	add	r12, r24
    8db2:	d1 1c       	adc	r13, r1
    8db4:	01 e0       	ldi	r16, 0x01	; 1
    8db6:	10 e0       	ldi	r17, 0x00	; 0
    8db8:	a5 01       	movw	r20, r10
    8dba:	94 01       	movw	r18, r8
    8dbc:	b6 01       	movw	r22, r12
    8dbe:	89 81       	ldd	r24, Y+1	; 0x01
    8dc0:	0e 94 fc 6c 	call	0xd9f8	; 0xd9f8 <disk_write>
    8dc4:	89 2b       	or	r24, r25
    8dc6:	89 f5       	brne	.+98     	; 0x8e2a <sync_window.part.3+0x94>
    8dc8:	1b 82       	std	Y+3, r1	; 0x03
    8dca:	8d a1       	ldd	r24, Y+37	; 0x25
    8dcc:	9e a1       	ldd	r25, Y+38	; 0x26
    8dce:	af a1       	ldd	r26, Y+39	; 0x27
    8dd0:	b8 a5       	ldd	r27, Y+40	; 0x28
    8dd2:	b5 01       	movw	r22, r10
    8dd4:	a4 01       	movw	r20, r8
    8dd6:	48 1b       	sub	r20, r24
    8dd8:	59 0b       	sbc	r21, r25
    8dda:	6a 0b       	sbc	r22, r26
    8ddc:	7b 0b       	sbc	r23, r27
    8dde:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8de0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    8de2:	af 8d       	ldd	r26, Y+31	; 0x1f
    8de4:	b8 a1       	ldd	r27, Y+32	; 0x20
    8de6:	48 17       	cp	r20, r24
    8de8:	59 07       	cpc	r21, r25
    8dea:	6a 07       	cpc	r22, r26
    8dec:	7b 07       	cpc	r23, r27
    8dee:	18 f0       	brcs	.+6      	; 0x8df6 <sync_window.part.3+0x60>
    8df0:	80 e0       	ldi	r24, 0x00	; 0
    8df2:	90 e0       	ldi	r25, 0x00	; 0
    8df4:	1c c0       	rjmp	.+56     	; 0x8e2e <sync_window.part.3+0x98>
    8df6:	ea 80       	ldd	r14, Y+2	; 0x02
    8df8:	f1 2c       	mov	r15, r1
    8dfa:	82 e0       	ldi	r24, 0x02	; 2
    8dfc:	e8 16       	cp	r14, r24
    8dfe:	f1 04       	cpc	r15, r1
    8e00:	b8 f3       	brcs	.-18     	; 0x8df0 <sync_window.part.3+0x5a>
    8e02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8e04:	9e 8d       	ldd	r25, Y+30	; 0x1e
    8e06:	af 8d       	ldd	r26, Y+31	; 0x1f
    8e08:	b8 a1       	ldd	r27, Y+32	; 0x20
    8e0a:	88 0e       	add	r8, r24
    8e0c:	99 1e       	adc	r9, r25
    8e0e:	aa 1e       	adc	r10, r26
    8e10:	bb 1e       	adc	r11, r27
    8e12:	01 e0       	ldi	r16, 0x01	; 1
    8e14:	10 e0       	ldi	r17, 0x00	; 0
    8e16:	a5 01       	movw	r20, r10
    8e18:	94 01       	movw	r18, r8
    8e1a:	b6 01       	movw	r22, r12
    8e1c:	89 81       	ldd	r24, Y+1	; 0x01
    8e1e:	0e 94 fc 6c 	call	0xd9f8	; 0xd9f8 <disk_write>
    8e22:	81 e0       	ldi	r24, 0x01	; 1
    8e24:	e8 1a       	sub	r14, r24
    8e26:	f1 08       	sbc	r15, r1
    8e28:	e8 cf       	rjmp	.-48     	; 0x8dfa <sync_window.part.3+0x64>
    8e2a:	81 e0       	ldi	r24, 0x01	; 1
    8e2c:	90 e0       	ldi	r25, 0x00	; 0
    8e2e:	cd b7       	in	r28, 0x3d	; 61
    8e30:	de b7       	in	r29, 0x3e	; 62
    8e32:	ec e0       	ldi	r30, 0x0C	; 12
    8e34:	0c 94 b1 e9 	jmp	0x1d362	; 0x1d362 <__epilogue_restores__+0xc>

00008e38 <sync_window>:
    8e38:	fc 01       	movw	r30, r24
    8e3a:	23 81       	ldd	r18, Z+3	; 0x03
    8e3c:	22 23       	and	r18, r18
    8e3e:	11 f0       	breq	.+4      	; 0x8e44 <sync_window+0xc>
    8e40:	aa cf       	rjmp	.-172    	; 0x8d96 <sync_window.part.3>
    8e42:	08 95       	ret
    8e44:	80 e0       	ldi	r24, 0x00	; 0
    8e46:	90 e0       	ldi	r25, 0x00	; 0
    8e48:	08 95       	ret

00008e4a <sync_fs>:
    8e4a:	ef 92       	push	r14
    8e4c:	ff 92       	push	r15
    8e4e:	0f 93       	push	r16
    8e50:	1f 93       	push	r17
    8e52:	cf 93       	push	r28
    8e54:	df 93       	push	r29
    8e56:	ec 01       	movw	r28, r24
    8e58:	ef df       	rcall	.-34     	; 0x8e38 <sync_window>
    8e5a:	00 97       	sbiw	r24, 0x00	; 0
    8e5c:	09 f0       	breq	.+2      	; 0x8e60 <sync_fs+0x16>
    8e5e:	5c c0       	rjmp	.+184    	; 0x8f18 <sync_fs+0xce>
    8e60:	88 81       	ld	r24, Y
    8e62:	83 30       	cpi	r24, 0x03	; 3
    8e64:	09 f0       	breq	.+2      	; 0x8e68 <sync_fs+0x1e>
    8e66:	4b c0       	rjmp	.+150    	; 0x8efe <sync_fs+0xb4>
    8e68:	8c 81       	ldd	r24, Y+4	; 0x04
    8e6a:	81 30       	cpi	r24, 0x01	; 1
    8e6c:	09 f0       	breq	.+2      	; 0x8e70 <sync_fs+0x26>
    8e6e:	47 c0       	rjmp	.+142    	; 0x8efe <sync_fs+0xb4>
    8e70:	40 e0       	ldi	r20, 0x00	; 0
    8e72:	52 e0       	ldi	r21, 0x02	; 2
    8e74:	60 e0       	ldi	r22, 0x00	; 0
    8e76:	70 e0       	ldi	r23, 0x00	; 0
    8e78:	7e 01       	movw	r14, r28
    8e7a:	85 e3       	ldi	r24, 0x35	; 53
    8e7c:	e8 0e       	add	r14, r24
    8e7e:	f1 1c       	adc	r15, r1
    8e80:	c7 01       	movw	r24, r14
    8e82:	93 de       	rcall	.-730    	; 0x8baa <mem_set>
    8e84:	85 e5       	ldi	r24, 0x55	; 85
    8e86:	fe 01       	movw	r30, r28
    8e88:	ed 5c       	subi	r30, 0xCD	; 205
    8e8a:	fd 4f       	sbci	r31, 0xFD	; 253
    8e8c:	80 83       	st	Z, r24
    8e8e:	8a ea       	ldi	r24, 0xAA	; 170
    8e90:	31 96       	adiw	r30, 0x01	; 1
    8e92:	80 83       	st	Z, r24
    8e94:	82 e5       	ldi	r24, 0x52	; 82
    8e96:	8d ab       	std	Y+53, r24	; 0x35
    8e98:	8e ab       	std	Y+54, r24	; 0x36
    8e9a:	81 e6       	ldi	r24, 0x61	; 97
    8e9c:	8f ab       	std	Y+55, r24	; 0x37
    8e9e:	91 e4       	ldi	r25, 0x41	; 65
    8ea0:	98 af       	std	Y+56, r25	; 0x38
    8ea2:	22 e7       	ldi	r18, 0x72	; 114
    8ea4:	7b 97       	sbiw	r30, 0x1b	; 27
    8ea6:	20 83       	st	Z, r18
    8ea8:	31 96       	adiw	r30, 0x01	; 1
    8eaa:	20 83       	st	Z, r18
    8eac:	31 96       	adiw	r30, 0x01	; 1
    8eae:	90 83       	st	Z, r25
    8eb0:	31 96       	adiw	r30, 0x01	; 1
    8eb2:	80 83       	st	Z, r24
    8eb4:	49 89       	ldd	r20, Y+17	; 0x11
    8eb6:	5a 89       	ldd	r21, Y+18	; 0x12
    8eb8:	6b 89       	ldd	r22, Y+19	; 0x13
    8eba:	7c 89       	ldd	r23, Y+20	; 0x14
    8ebc:	ce 01       	movw	r24, r28
    8ebe:	83 5e       	subi	r24, 0xE3	; 227
    8ec0:	9d 4f       	sbci	r25, 0xFD	; 253
    8ec2:	6d de       	rcall	.-806    	; 0x8b9e <st_dword>
    8ec4:	4d 85       	ldd	r20, Y+13	; 0x0d
    8ec6:	5e 85       	ldd	r21, Y+14	; 0x0e
    8ec8:	6f 85       	ldd	r22, Y+15	; 0x0f
    8eca:	78 89       	ldd	r23, Y+16	; 0x10
    8ecc:	ce 01       	movw	r24, r28
    8ece:	8f 5d       	subi	r24, 0xDF	; 223
    8ed0:	9d 4f       	sbci	r25, 0xFD	; 253
    8ed2:	65 de       	rcall	.-822    	; 0x8b9e <st_dword>
    8ed4:	89 a1       	ldd	r24, Y+33	; 0x21
    8ed6:	9a a1       	ldd	r25, Y+34	; 0x22
    8ed8:	ab a1       	ldd	r26, Y+35	; 0x23
    8eda:	bc a1       	ldd	r27, Y+36	; 0x24
    8edc:	9c 01       	movw	r18, r24
    8ede:	ad 01       	movw	r20, r26
    8ee0:	2f 5f       	subi	r18, 0xFF	; 255
    8ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    8ee4:	4f 4f       	sbci	r20, 0xFF	; 255
    8ee6:	5f 4f       	sbci	r21, 0xFF	; 255
    8ee8:	29 ab       	std	Y+49, r18	; 0x31
    8eea:	3a ab       	std	Y+50, r19	; 0x32
    8eec:	4b ab       	std	Y+51, r20	; 0x33
    8eee:	5c ab       	std	Y+52, r21	; 0x34
    8ef0:	01 e0       	ldi	r16, 0x01	; 1
    8ef2:	10 e0       	ldi	r17, 0x00	; 0
    8ef4:	b7 01       	movw	r22, r14
    8ef6:	89 81       	ldd	r24, Y+1	; 0x01
    8ef8:	0e 94 fc 6c 	call	0xd9f8	; 0xd9f8 <disk_write>
    8efc:	1c 82       	std	Y+4, r1	; 0x04
    8efe:	40 e0       	ldi	r20, 0x00	; 0
    8f00:	50 e0       	ldi	r21, 0x00	; 0
    8f02:	60 e0       	ldi	r22, 0x00	; 0
    8f04:	89 81       	ldd	r24, Y+1	; 0x01
    8f06:	0e 94 0c 6d 	call	0xda18	; 0xda18 <disk_ioctl>
    8f0a:	31 e0       	ldi	r19, 0x01	; 1
    8f0c:	20 e0       	ldi	r18, 0x00	; 0
    8f0e:	89 2b       	or	r24, r25
    8f10:	09 f4       	brne	.+2      	; 0x8f14 <sync_fs+0xca>
    8f12:	30 e0       	ldi	r19, 0x00	; 0
    8f14:	83 2f       	mov	r24, r19
    8f16:	92 2f       	mov	r25, r18
    8f18:	cd b7       	in	r28, 0x3d	; 61
    8f1a:	de b7       	in	r29, 0x3e	; 62
    8f1c:	e6 e0       	ldi	r30, 0x06	; 6
    8f1e:	0c 94 b7 e9 	jmp	0x1d36e	; 0x1d36e <__epilogue_restores__+0x18>

00008f22 <move_window>:
    8f22:	8f 92       	push	r8
    8f24:	9f 92       	push	r9
    8f26:	af 92       	push	r10
    8f28:	bf 92       	push	r11
    8f2a:	ef 92       	push	r14
    8f2c:	ff 92       	push	r15
    8f2e:	0f 93       	push	r16
    8f30:	1f 93       	push	r17
    8f32:	cf 93       	push	r28
    8f34:	df 93       	push	r29
    8f36:	ec 01       	movw	r28, r24
    8f38:	4a 01       	movw	r8, r20
    8f3a:	5b 01       	movw	r10, r22
    8f3c:	89 a9       	ldd	r24, Y+49	; 0x31
    8f3e:	9a a9       	ldd	r25, Y+50	; 0x32
    8f40:	ab a9       	ldd	r26, Y+51	; 0x33
    8f42:	bc a9       	ldd	r27, Y+52	; 0x34
    8f44:	84 17       	cp	r24, r20
    8f46:	95 07       	cpc	r25, r21
    8f48:	a6 07       	cpc	r26, r22
    8f4a:	b7 07       	cpc	r27, r23
    8f4c:	e9 f0       	breq	.+58     	; 0x8f88 <move_window+0x66>
    8f4e:	ce 01       	movw	r24, r28
    8f50:	73 df       	rcall	.-282    	; 0x8e38 <sync_window>
    8f52:	7c 01       	movw	r14, r24
    8f54:	89 2b       	or	r24, r25
    8f56:	d1 f4       	brne	.+52     	; 0x8f8c <move_window+0x6a>
    8f58:	01 e0       	ldi	r16, 0x01	; 1
    8f5a:	10 e0       	ldi	r17, 0x00	; 0
    8f5c:	a5 01       	movw	r20, r10
    8f5e:	94 01       	movw	r18, r8
    8f60:	be 01       	movw	r22, r28
    8f62:	6b 5c       	subi	r22, 0xCB	; 203
    8f64:	7f 4f       	sbci	r23, 0xFF	; 255
    8f66:	89 81       	ldd	r24, Y+1	; 0x01
    8f68:	0e 94 ec 6c 	call	0xd9d8	; 0xd9d8 <disk_read>
    8f6c:	89 2b       	or	r24, r25
    8f6e:	39 f0       	breq	.+14     	; 0x8f7e <move_window+0x5c>
    8f70:	ee 24       	eor	r14, r14
    8f72:	e3 94       	inc	r14
    8f74:	f1 2c       	mov	r15, r1
    8f76:	88 24       	eor	r8, r8
    8f78:	8a 94       	dec	r8
    8f7a:	98 2c       	mov	r9, r8
    8f7c:	54 01       	movw	r10, r8
    8f7e:	89 aa       	std	Y+49, r8	; 0x31
    8f80:	9a aa       	std	Y+50, r9	; 0x32
    8f82:	ab aa       	std	Y+51, r10	; 0x33
    8f84:	bc aa       	std	Y+52, r11	; 0x34
    8f86:	02 c0       	rjmp	.+4      	; 0x8f8c <move_window+0x6a>
    8f88:	e1 2c       	mov	r14, r1
    8f8a:	f1 2c       	mov	r15, r1
    8f8c:	c7 01       	movw	r24, r14
    8f8e:	df 91       	pop	r29
    8f90:	cf 91       	pop	r28
    8f92:	1f 91       	pop	r17
    8f94:	0f 91       	pop	r16
    8f96:	ff 90       	pop	r15
    8f98:	ef 90       	pop	r14
    8f9a:	bf 90       	pop	r11
    8f9c:	af 90       	pop	r10
    8f9e:	9f 90       	pop	r9
    8fa0:	8f 90       	pop	r8
    8fa2:	08 95       	ret

00008fa4 <check_fs>:
    8fa4:	cf 93       	push	r28
    8fa6:	df 93       	push	r29
    8fa8:	ec 01       	movw	r28, r24
    8faa:	1b 82       	std	Y+3, r1	; 0x03
    8fac:	8f ef       	ldi	r24, 0xFF	; 255
    8fae:	9f ef       	ldi	r25, 0xFF	; 255
    8fb0:	dc 01       	movw	r26, r24
    8fb2:	89 ab       	std	Y+49, r24	; 0x31
    8fb4:	9a ab       	std	Y+50, r25	; 0x32
    8fb6:	ab ab       	std	Y+51, r26	; 0x33
    8fb8:	bc ab       	std	Y+52, r27	; 0x34
    8fba:	ce 01       	movw	r24, r28
    8fbc:	b2 df       	rcall	.-156    	; 0x8f22 <move_window>
    8fbe:	89 2b       	or	r24, r25
    8fc0:	31 f5       	brne	.+76     	; 0x900e <check_fs+0x6a>
    8fc2:	fe 01       	movw	r30, r28
    8fc4:	ed 5c       	subi	r30, 0xCD	; 205
    8fc6:	fd 4f       	sbci	r31, 0xFD	; 253
    8fc8:	80 81       	ld	r24, Z
    8fca:	91 81       	ldd	r25, Z+1	; 0x01
    8fcc:	85 35       	cpi	r24, 0x55	; 85
    8fce:	9a 4a       	sbci	r25, 0xAA	; 170
    8fd0:	01 f5       	brne	.+64     	; 0x9012 <check_fs+0x6e>
    8fd2:	8d a9       	ldd	r24, Y+53	; 0x35
    8fd4:	89 3e       	cpi	r24, 0xE9	; 233
    8fd6:	29 f0       	breq	.+10     	; 0x8fe2 <check_fs+0x3e>
    8fd8:	8b 3e       	cpi	r24, 0xEB	; 235
    8fda:	f9 f4       	brne	.+62     	; 0x901a <check_fs+0x76>
    8fdc:	8f a9       	ldd	r24, Y+55	; 0x37
    8fde:	80 39       	cpi	r24, 0x90	; 144
    8fe0:	e1 f4       	brne	.+56     	; 0x901a <check_fs+0x76>
    8fe2:	ce 01       	movw	r24, r28
    8fe4:	85 59       	subi	r24, 0x95	; 149
    8fe6:	9f 4f       	sbci	r25, 0xFF	; 255
    8fe8:	c5 dd       	rcall	.-1142   	; 0x8b74 <ld_dword>
    8fea:	dc 01       	movw	r26, r24
    8fec:	cb 01       	movw	r24, r22
    8fee:	bb 27       	eor	r27, r27
    8ff0:	86 34       	cpi	r24, 0x46	; 70
    8ff2:	91 44       	sbci	r25, 0x41	; 65
    8ff4:	a4 45       	sbci	r26, 0x54	; 84
    8ff6:	b1 05       	cpc	r27, r1
    8ff8:	71 f0       	breq	.+28     	; 0x9016 <check_fs+0x72>
    8ffa:	ce 01       	movw	r24, r28
    8ffc:	89 57       	subi	r24, 0x79	; 121
    8ffe:	9f 4f       	sbci	r25, 0xFF	; 255
    9000:	b9 dd       	rcall	.-1166   	; 0x8b74 <ld_dword>
    9002:	66 34       	cpi	r22, 0x46	; 70
    9004:	71 44       	sbci	r23, 0x41	; 65
    9006:	84 45       	sbci	r24, 0x54	; 84
    9008:	93 43       	sbci	r25, 0x33	; 51
    900a:	39 f4       	brne	.+14     	; 0x901a <check_fs+0x76>
    900c:	04 c0       	rjmp	.+8      	; 0x9016 <check_fs+0x72>
    900e:	84 e0       	ldi	r24, 0x04	; 4
    9010:	05 c0       	rjmp	.+10     	; 0x901c <check_fs+0x78>
    9012:	83 e0       	ldi	r24, 0x03	; 3
    9014:	03 c0       	rjmp	.+6      	; 0x901c <check_fs+0x78>
    9016:	80 e0       	ldi	r24, 0x00	; 0
    9018:	01 c0       	rjmp	.+2      	; 0x901c <check_fs+0x78>
    901a:	82 e0       	ldi	r24, 0x02	; 2
    901c:	df 91       	pop	r29
    901e:	cf 91       	pop	r28
    9020:	08 95       	ret

00009022 <find_volume>:
    9022:	ad e1       	ldi	r26, 0x1D	; 29
    9024:	b0 e0       	ldi	r27, 0x00	; 0
    9026:	e7 e1       	ldi	r30, 0x17	; 23
    9028:	f8 e4       	ldi	r31, 0x48	; 72
    902a:	0c 94 8f e9 	jmp	0x1d31e	; 0x1d31e <__prologue_saves__>
    902e:	5b 01       	movw	r10, r22
    9030:	f4 2e       	mov	r15, r20
    9032:	db 01       	movw	r26, r22
    9034:	1d 92       	st	X+, r1
    9036:	1c 92       	st	X, r1
    9038:	34 de       	rcall	.-920    	; 0x8ca2 <get_ldnumber>
    903a:	6c 01       	movw	r12, r24
    903c:	97 fd       	sbrc	r25, 7
    903e:	1b c2       	rjmp	.+1078   	; 0x9476 <find_volume+0x454>
    9040:	fc 01       	movw	r30, r24
    9042:	ee 0f       	add	r30, r30
    9044:	ff 1f       	adc	r31, r31
    9046:	ee 58       	subi	r30, 0x8E	; 142
    9048:	f7 4e       	sbci	r31, 0xE7	; 231
    904a:	00 81       	ld	r16, Z
    904c:	11 81       	ldd	r17, Z+1	; 0x01
    904e:	01 15       	cp	r16, r1
    9050:	11 05       	cpc	r17, r1
    9052:	09 f4       	brne	.+2      	; 0x9056 <find_volume+0x34>
    9054:	13 c2       	rjmp	.+1062   	; 0x947c <find_volume+0x45a>
    9056:	f5 01       	movw	r30, r10
    9058:	11 83       	std	Z+1, r17	; 0x01
    905a:	00 83       	st	Z, r16
    905c:	ff 2d       	mov	r31, r15
    905e:	fe 7f       	andi	r31, 0xFE	; 254
    9060:	ff 2e       	mov	r15, r31
    9062:	d8 01       	movw	r26, r16
    9064:	8c 91       	ld	r24, X
    9066:	88 23       	and	r24, r24
    9068:	71 f0       	breq	.+28     	; 0x9086 <find_volume+0x64>
    906a:	11 96       	adiw	r26, 0x01	; 1
    906c:	8c 91       	ld	r24, X
    906e:	0e 94 e0 6c 	call	0xd9c0	; 0xd9c0 <disk_status>
    9072:	80 fd       	sbrc	r24, 0
    9074:	08 c0       	rjmp	.+16     	; 0x9086 <find_volume+0x64>
    9076:	ff 20       	and	r15, r15
    9078:	09 f4       	brne	.+2      	; 0x907c <find_volume+0x5a>
    907a:	03 c2       	rjmp	.+1030   	; 0x9482 <find_volume+0x460>
    907c:	82 ff       	sbrs	r24, 2
    907e:	01 c2       	rjmp	.+1026   	; 0x9482 <find_volume+0x460>
    9080:	8a e0       	ldi	r24, 0x0A	; 10
    9082:	90 e0       	ldi	r25, 0x00	; 0
    9084:	73 c2       	rjmp	.+1254   	; 0x956c <find_volume+0x54a>
    9086:	f8 01       	movw	r30, r16
    9088:	10 82       	st	Z, r1
    908a:	c1 82       	std	Z+1, r12	; 0x01
    908c:	8c 2d       	mov	r24, r12
    908e:	0e 94 e6 6c 	call	0xd9cc	; 0xd9cc <disk_initialize>
    9092:	80 fd       	sbrc	r24, 0
    9094:	f9 c1       	rjmp	.+1010   	; 0x9488 <find_volume+0x466>
    9096:	ff 20       	and	r15, r15
    9098:	11 f0       	breq	.+4      	; 0x909e <find_volume+0x7c>
    909a:	82 fd       	sbrc	r24, 2
    909c:	f1 cf       	rjmp	.-30     	; 0x9080 <find_volume+0x5e>
    909e:	40 e0       	ldi	r20, 0x00	; 0
    90a0:	50 e0       	ldi	r21, 0x00	; 0
    90a2:	ba 01       	movw	r22, r20
    90a4:	c8 01       	movw	r24, r16
    90a6:	7e df       	rcall	.-260    	; 0x8fa4 <check_fs>
    90a8:	82 30       	cpi	r24, 0x02	; 2
    90aa:	09 f0       	breq	.+2      	; 0x90ae <find_volume+0x8c>
    90ac:	41 c0       	rjmp	.+130    	; 0x9130 <find_volume+0x10e>
    90ae:	9e 01       	movw	r18, r28
    90b0:	2f 5f       	subi	r18, 0xFF	; 255
    90b2:	3f 4f       	sbci	r19, 0xFF	; 255
    90b4:	79 01       	movw	r14, r18
    90b6:	68 01       	movw	r12, r16
    90b8:	35 e0       	ldi	r19, 0x05	; 5
    90ba:	c3 1a       	sub	r12, r19
    90bc:	3e ef       	ldi	r19, 0xFE	; 254
    90be:	d3 0a       	sbc	r13, r19
    90c0:	48 01       	movw	r8, r16
    90c2:	45 ec       	ldi	r20, 0xC5	; 197
    90c4:	84 1a       	sub	r8, r20
    90c6:	4d ef       	ldi	r20, 0xFD	; 253
    90c8:	94 0a       	sbc	r9, r20
    90ca:	57 01       	movw	r10, r14
    90cc:	f6 01       	movw	r30, r12
    90ce:	34 97       	sbiw	r30, 0x04	; 4
    90d0:	80 81       	ld	r24, Z
    90d2:	88 23       	and	r24, r24
    90d4:	19 f0       	breq	.+6      	; 0x90dc <find_volume+0xba>
    90d6:	c6 01       	movw	r24, r12
    90d8:	4d dd       	rcall	.-1382   	; 0x8b74 <ld_dword>
    90da:	03 c0       	rjmp	.+6      	; 0x90e2 <find_volume+0xc0>
    90dc:	60 e0       	ldi	r22, 0x00	; 0
    90de:	70 e0       	ldi	r23, 0x00	; 0
    90e0:	cb 01       	movw	r24, r22
    90e2:	d5 01       	movw	r26, r10
    90e4:	6d 93       	st	X+, r22
    90e6:	7d 93       	st	X+, r23
    90e8:	8d 93       	st	X+, r24
    90ea:	9d 93       	st	X+, r25
    90ec:	5d 01       	movw	r10, r26
    90ee:	b0 e1       	ldi	r27, 0x10	; 16
    90f0:	cb 0e       	add	r12, r27
    90f2:	d1 1c       	adc	r13, r1
    90f4:	c8 14       	cp	r12, r8
    90f6:	d9 04       	cpc	r13, r9
    90f8:	49 f7       	brne	.-46     	; 0x90cc <find_volume+0xaa>
    90fa:	6e 01       	movw	r12, r28
    90fc:	e1 e1       	ldi	r30, 0x11	; 17
    90fe:	ce 0e       	add	r12, r30
    9100:	d1 1c       	adc	r13, r1
    9102:	d7 01       	movw	r26, r14
    9104:	8d 90       	ld	r8, X+
    9106:	9d 90       	ld	r9, X+
    9108:	ad 90       	ld	r10, X+
    910a:	bd 90       	ld	r11, X+
    910c:	7d 01       	movw	r14, r26
    910e:	81 14       	cp	r8, r1
    9110:	91 04       	cpc	r9, r1
    9112:	a1 04       	cpc	r10, r1
    9114:	b1 04       	cpc	r11, r1
    9116:	39 f0       	breq	.+14     	; 0x9126 <find_volume+0x104>
    9118:	b5 01       	movw	r22, r10
    911a:	a4 01       	movw	r20, r8
    911c:	c8 01       	movw	r24, r16
    911e:	42 df       	rcall	.-380    	; 0x8fa4 <check_fs>
    9120:	82 30       	cpi	r24, 0x02	; 2
    9122:	10 f4       	brcc	.+4      	; 0x9128 <find_volume+0x106>
    9124:	10 c0       	rjmp	.+32     	; 0x9146 <find_volume+0x124>
    9126:	83 e0       	ldi	r24, 0x03	; 3
    9128:	ce 14       	cp	r12, r14
    912a:	df 04       	cpc	r13, r15
    912c:	51 f7       	brne	.-44     	; 0x9102 <find_volume+0xe0>
    912e:	af c1       	rjmp	.+862    	; 0x948e <find_volume+0x46c>
    9130:	84 30       	cpi	r24, 0x04	; 4
    9132:	09 f4       	brne	.+2      	; 0x9136 <find_volume+0x114>
    9134:	af c1       	rjmp	.+862    	; 0x9494 <find_volume+0x472>
    9136:	82 30       	cpi	r24, 0x02	; 2
    9138:	18 f0       	brcs	.+6      	; 0x9140 <find_volume+0x11e>
    913a:	8d e0       	ldi	r24, 0x0D	; 13
    913c:	90 e0       	ldi	r25, 0x00	; 0
    913e:	16 c2       	rjmp	.+1068   	; 0x956c <find_volume+0x54a>
    9140:	81 2c       	mov	r8, r1
    9142:	91 2c       	mov	r9, r1
    9144:	54 01       	movw	r10, r8
    9146:	f8 01       	movw	r30, r16
    9148:	e0 5c       	subi	r30, 0xC0	; 192
    914a:	ff 4f       	sbci	r31, 0xFF	; 255
    914c:	80 81       	ld	r24, Z
    914e:	91 81       	ldd	r25, Z+1	; 0x01
    9150:	81 15       	cp	r24, r1
    9152:	92 40       	sbci	r25, 0x02	; 2
    9154:	91 f7       	brne	.-28     	; 0x913a <find_volume+0x118>
    9156:	3b 96       	adiw	r30, 0x0b	; 11
    9158:	80 81       	ld	r24, Z
    915a:	91 81       	ldd	r25, Z+1	; 0x01
    915c:	00 97       	sbiw	r24, 0x00	; 0
    915e:	41 f0       	breq	.+16     	; 0x9170 <find_volume+0x14e>
    9160:	9c 01       	movw	r18, r24
    9162:	40 e0       	ldi	r20, 0x00	; 0
    9164:	50 e0       	ldi	r21, 0x00	; 0
    9166:	2d 8b       	std	Y+21, r18	; 0x15
    9168:	3e 8b       	std	Y+22, r19	; 0x16
    916a:	4f 8b       	std	Y+23, r20	; 0x17
    916c:	58 8f       	std	Y+24, r21	; 0x18
    916e:	08 c0       	rjmp	.+16     	; 0x9180 <find_volume+0x15e>
    9170:	c8 01       	movw	r24, r16
    9172:	87 5a       	subi	r24, 0xA7	; 167
    9174:	9f 4f       	sbci	r25, 0xFF	; 255
    9176:	fe dc       	rcall	.-1540   	; 0x8b74 <ld_dword>
    9178:	6d 8b       	std	Y+21, r22	; 0x15
    917a:	7e 8b       	std	Y+22, r23	; 0x16
    917c:	8f 8b       	std	Y+23, r24	; 0x17
    917e:	98 8f       	std	Y+24, r25	; 0x18
    9180:	8d 89       	ldd	r24, Y+21	; 0x15
    9182:	9e 89       	ldd	r25, Y+22	; 0x16
    9184:	af 89       	ldd	r26, Y+23	; 0x17
    9186:	b8 8d       	ldd	r27, Y+24	; 0x18
    9188:	f8 01       	movw	r30, r16
    918a:	85 8f       	std	Z+29, r24	; 0x1d
    918c:	96 8f       	std	Z+30, r25	; 0x1e
    918e:	a7 8f       	std	Z+31, r26	; 0x1f
    9190:	b0 a3       	std	Z+32, r27	; 0x20
    9192:	eb 5b       	subi	r30, 0xBB	; 187
    9194:	ff 4f       	sbci	r31, 0xFF	; 255
    9196:	70 80       	ld	r7, Z
    9198:	d8 01       	movw	r26, r16
    919a:	12 96       	adiw	r26, 0x02	; 2
    919c:	7c 92       	st	X, r7
    919e:	8f ef       	ldi	r24, 0xFF	; 255
    91a0:	87 0d       	add	r24, r7
    91a2:	82 30       	cpi	r24, 0x02	; 2
    91a4:	50 f6       	brcc	.-108    	; 0x913a <find_volume+0x118>
    91a6:	33 97       	sbiw	r30, 0x03	; 3
    91a8:	b0 81       	ld	r27, Z
    91aa:	b9 8f       	std	Y+25, r27	; 0x19
    91ac:	8b 2f       	mov	r24, r27
    91ae:	90 e0       	ldi	r25, 0x00	; 0
    91b0:	f8 01       	movw	r30, r16
    91b2:	92 87       	std	Z+10, r25	; 0x0a
    91b4:	81 87       	std	Z+9, r24	; 0x09
    91b6:	00 97       	sbiw	r24, 0x00	; 0
    91b8:	09 f4       	brne	.+2      	; 0x91bc <find_volume+0x19a>
    91ba:	bf cf       	rjmp	.-130    	; 0x913a <find_volume+0x118>
    91bc:	9c 01       	movw	r18, r24
    91be:	21 50       	subi	r18, 0x01	; 1
    91c0:	31 09       	sbc	r19, r1
    91c2:	82 23       	and	r24, r18
    91c4:	93 23       	and	r25, r19
    91c6:	89 2b       	or	r24, r25
    91c8:	09 f0       	breq	.+2      	; 0x91cc <find_volume+0x1aa>
    91ca:	b7 cf       	rjmp	.-146    	; 0x913a <find_volume+0x118>
    91cc:	ea 5b       	subi	r30, 0xBA	; 186
    91ce:	ff 4f       	sbci	r31, 0xFF	; 255
    91d0:	20 80       	ld	r2, Z
    91d2:	31 80       	ldd	r3, Z+1	; 0x01
    91d4:	d8 01       	movw	r26, r16
    91d6:	18 96       	adiw	r26, 0x08	; 8
    91d8:	3c 92       	st	X, r3
    91da:	2e 92       	st	-X, r2
    91dc:	17 97       	sbiw	r26, 0x07	; 7
    91de:	c1 01       	movw	r24, r2
    91e0:	8f 70       	andi	r24, 0x0F	; 15
    91e2:	99 27       	eor	r25, r25
    91e4:	89 2b       	or	r24, r25
    91e6:	09 f0       	breq	.+2      	; 0x91ea <find_volume+0x1c8>
    91e8:	a8 cf       	rjmp	.-176    	; 0x913a <find_volume+0x118>
    91ea:	32 96       	adiw	r30, 0x02	; 2
    91ec:	80 81       	ld	r24, Z
    91ee:	91 81       	ldd	r25, Z+1	; 0x01
    91f0:	6c 01       	movw	r12, r24
    91f2:	e1 2c       	mov	r14, r1
    91f4:	f1 2c       	mov	r15, r1
    91f6:	89 2b       	or	r24, r25
    91f8:	31 f4       	brne	.+12     	; 0x9206 <find_volume+0x1e4>
    91fa:	c8 01       	movw	r24, r16
    91fc:	8b 5a       	subi	r24, 0xAB	; 171
    91fe:	9f 4f       	sbci	r25, 0xFF	; 255
    9200:	b9 dc       	rcall	.-1678   	; 0x8b74 <ld_dword>
    9202:	6b 01       	movw	r12, r22
    9204:	7c 01       	movw	r14, r24
    9206:	f8 01       	movw	r30, r16
    9208:	ed 5b       	subi	r30, 0xBD	; 189
    920a:	ff 4f       	sbci	r31, 0xFF	; 255
    920c:	01 90       	ld	r0, Z+
    920e:	f0 81       	ld	r31, Z
    9210:	e0 2d       	mov	r30, r0
    9212:	30 97       	sbiw	r30, 0x00	; 0
    9214:	09 f4       	brne	.+2      	; 0x9218 <find_volume+0x1f6>
    9216:	91 cf       	rjmp	.-222    	; 0x913a <find_volume+0x118>
    9218:	a7 2d       	mov	r26, r7
    921a:	b0 e0       	ldi	r27, 0x00	; 0
    921c:	2d 89       	ldd	r18, Y+21	; 0x15
    921e:	3e 89       	ldd	r19, Y+22	; 0x16
    9220:	4f 89       	ldd	r20, Y+23	; 0x17
    9222:	58 8d       	ldd	r21, Y+24	; 0x18
    9224:	0e 94 6f e9 	call	0x1d2de	; 0x1d2de <__muluhisi3>
    9228:	2b 01       	movw	r4, r22
    922a:	3c 01       	movw	r6, r24
    922c:	9f 01       	movw	r18, r30
    922e:	40 e0       	ldi	r20, 0x00	; 0
    9230:	50 e0       	ldi	r21, 0x00	; 0
    9232:	2a 8f       	std	Y+26, r18	; 0x1a
    9234:	3b 8f       	std	Y+27, r19	; 0x1b
    9236:	4c 8f       	std	Y+28, r20	; 0x1c
    9238:	5d 8f       	std	Y+29, r21	; 0x1d
    923a:	c1 01       	movw	r24, r2
    923c:	e4 e0       	ldi	r30, 0x04	; 4
    923e:	96 95       	lsr	r25
    9240:	87 95       	ror	r24
    9242:	ea 95       	dec	r30
    9244:	e1 f7       	brne	.-8      	; 0x923e <find_volume+0x21c>
    9246:	ba 01       	movw	r22, r20
    9248:	a9 01       	movw	r20, r18
    924a:	48 0f       	add	r20, r24
    924c:	59 1f       	adc	r21, r25
    924e:	61 1d       	adc	r22, r1
    9250:	71 1d       	adc	r23, r1
    9252:	db 01       	movw	r26, r22
    9254:	ca 01       	movw	r24, r20
    9256:	84 0d       	add	r24, r4
    9258:	95 1d       	adc	r25, r5
    925a:	a6 1d       	adc	r26, r6
    925c:	b7 1d       	adc	r27, r7
    925e:	89 8b       	std	Y+17, r24	; 0x11
    9260:	9a 8b       	std	Y+18, r25	; 0x12
    9262:	ab 8b       	std	Y+19, r26	; 0x13
    9264:	bc 8b       	std	Y+20, r27	; 0x14
    9266:	c8 16       	cp	r12, r24
    9268:	d9 06       	cpc	r13, r25
    926a:	ea 06       	cpc	r14, r26
    926c:	fb 06       	cpc	r15, r27
    926e:	08 f4       	brcc	.+2      	; 0x9272 <find_volume+0x250>
    9270:	64 cf       	rjmp	.-312    	; 0x913a <find_volume+0x118>
    9272:	c7 01       	movw	r24, r14
    9274:	b6 01       	movw	r22, r12
    9276:	29 89       	ldd	r18, Y+17	; 0x11
    9278:	3a 89       	ldd	r19, Y+18	; 0x12
    927a:	4b 89       	ldd	r20, Y+19	; 0x13
    927c:	5c 89       	ldd	r21, Y+20	; 0x14
    927e:	62 1b       	sub	r22, r18
    9280:	73 0b       	sbc	r23, r19
    9282:	84 0b       	sbc	r24, r20
    9284:	95 0b       	sbc	r25, r21
    9286:	a9 8d       	ldd	r26, Y+25	; 0x19
    9288:	2a 2f       	mov	r18, r26
    928a:	30 e0       	ldi	r19, 0x00	; 0
    928c:	40 e0       	ldi	r20, 0x00	; 0
    928e:	50 e0       	ldi	r21, 0x00	; 0
    9290:	0e 94 22 e9 	call	0x1d244	; 0x1d244 <__udivmodsi4>
    9294:	21 15       	cp	r18, r1
    9296:	31 05       	cpc	r19, r1
    9298:	41 05       	cpc	r20, r1
    929a:	51 05       	cpc	r21, r1
    929c:	09 f4       	brne	.+2      	; 0x92a0 <find_volume+0x27e>
    929e:	4d cf       	rjmp	.-358    	; 0x913a <find_volume+0x118>
    92a0:	69 01       	movw	r12, r18
    92a2:	7a 01       	movw	r14, r20
    92a4:	b2 e0       	ldi	r27, 0x02	; 2
    92a6:	cb 0e       	add	r12, r27
    92a8:	d1 1c       	adc	r13, r1
    92aa:	e1 1c       	adc	r14, r1
    92ac:	f1 1c       	adc	r15, r1
    92ae:	8a 8d       	ldd	r24, Y+26	; 0x1a
    92b0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    92b2:	ac 8d       	ldd	r26, Y+28	; 0x1c
    92b4:	bd 8d       	ldd	r27, Y+29	; 0x1d
    92b6:	88 0d       	add	r24, r8
    92b8:	99 1d       	adc	r25, r9
    92ba:	aa 1d       	adc	r26, r10
    92bc:	bb 1d       	adc	r27, r11
    92be:	8a 8f       	std	Y+26, r24	; 0x1a
    92c0:	9b 8f       	std	Y+27, r25	; 0x1b
    92c2:	ac 8f       	std	Y+28, r26	; 0x1c
    92c4:	bd 8f       	std	Y+29, r27	; 0x1d
    92c6:	89 89       	ldd	r24, Y+17	; 0x11
    92c8:	9a 89       	ldd	r25, Y+18	; 0x12
    92ca:	ab 89       	ldd	r26, Y+19	; 0x13
    92cc:	bc 89       	ldd	r27, Y+20	; 0x14
    92ce:	88 0d       	add	r24, r8
    92d0:	99 1d       	adc	r25, r9
    92d2:	aa 1d       	adc	r26, r10
    92d4:	bb 1d       	adc	r27, r11
    92d6:	89 8b       	std	Y+17, r24	; 0x11
    92d8:	9a 8b       	std	Y+18, r25	; 0x12
    92da:	ab 8b       	std	Y+19, r26	; 0x13
    92dc:	bc 8b       	std	Y+20, r27	; 0x14
    92de:	26 3f       	cpi	r18, 0xF6	; 246
    92e0:	9f ef       	ldi	r25, 0xFF	; 255
    92e2:	39 07       	cpc	r19, r25
    92e4:	41 05       	cpc	r20, r1
    92e6:	51 05       	cpc	r21, r1
    92e8:	08 f0       	brcs	.+2      	; 0x92ec <find_volume+0x2ca>
    92ea:	d7 c0       	rjmp	.+430    	; 0x949a <find_volume+0x478>
    92ec:	f8 01       	movw	r30, r16
    92ee:	c1 8e       	std	Z+25, r12	; 0x19
    92f0:	d2 8e       	std	Z+26, r13	; 0x1a
    92f2:	e3 8e       	std	Z+27, r14	; 0x1b
    92f4:	f4 8e       	std	Z+28, r15	; 0x1c
    92f6:	26 3f       	cpi	r18, 0xF6	; 246
    92f8:	3f 40       	sbci	r19, 0x0F	; 15
    92fa:	41 05       	cpc	r20, r1
    92fc:	51 05       	cpc	r21, r1
    92fe:	08 f0       	brcs	.+2      	; 0x9302 <find_volume+0x2e0>
    9300:	0a c1       	rjmp	.+532    	; 0x9516 <find_volume+0x4f4>
    9302:	81 a2       	std	Z+33, r8	; 0x21
    9304:	92 a2       	std	Z+34, r9	; 0x22
    9306:	a3 a2       	std	Z+35, r10	; 0x23
    9308:	b4 a2       	std	Z+36, r11	; 0x24
    930a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    930c:	3b 8d       	ldd	r19, Y+27	; 0x1b
    930e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    9310:	5d 8d       	ldd	r21, Y+29	; 0x1d
    9312:	25 a3       	std	Z+37, r18	; 0x25
    9314:	36 a3       	std	Z+38, r19	; 0x26
    9316:	47 a3       	std	Z+39, r20	; 0x27
    9318:	50 a7       	std	Z+40, r21	; 0x28
    931a:	29 89       	ldd	r18, Y+17	; 0x11
    931c:	3a 89       	ldd	r19, Y+18	; 0x12
    931e:	4b 89       	ldd	r20, Y+19	; 0x13
    9320:	5c 89       	ldd	r21, Y+20	; 0x14
    9322:	25 a7       	std	Z+45, r18	; 0x2d
    9324:	36 a7       	std	Z+46, r19	; 0x2e
    9326:	47 a7       	std	Z+47, r20	; 0x2f
    9328:	50 ab       	std	Z+48, r21	; 0x30
    932a:	21 14       	cp	r2, r1
    932c:	31 04       	cpc	r3, r1
    932e:	09 f4       	brne	.+2      	; 0x9332 <find_volume+0x310>
    9330:	04 cf       	rjmp	.-504    	; 0x913a <find_volume+0x118>
    9332:	2a 8d       	ldd	r18, Y+26	; 0x1a
    9334:	3b 8d       	ldd	r19, Y+27	; 0x1b
    9336:	4c 8d       	ldd	r20, Y+28	; 0x1c
    9338:	5d 8d       	ldd	r21, Y+29	; 0x1d
    933a:	42 0e       	add	r4, r18
    933c:	53 1e       	adc	r5, r19
    933e:	64 1e       	adc	r6, r20
    9340:	75 1e       	adc	r7, r21
    9342:	41 a6       	std	Z+41, r4	; 0x29
    9344:	52 a6       	std	Z+42, r5	; 0x2a
    9346:	63 a6       	std	Z+43, r6	; 0x2b
    9348:	74 a6       	std	Z+44, r7	; 0x2c
    934a:	a3 e0       	ldi	r26, 0x03	; 3
    934c:	b0 e0       	ldi	r27, 0x00	; 0
    934e:	a7 01       	movw	r20, r14
    9350:	96 01       	movw	r18, r12
    9352:	0e 94 6f e9 	call	0x1d2de	; 0x1d2de <__muluhisi3>
    9356:	dc 01       	movw	r26, r24
    9358:	cb 01       	movw	r24, r22
    935a:	b6 95       	lsr	r27
    935c:	a7 95       	ror	r26
    935e:	97 95       	ror	r25
    9360:	87 95       	ror	r24
    9362:	e1 e0       	ldi	r30, 0x01	; 1
    9364:	ce 22       	and	r12, r30
    9366:	dd 24       	eor	r13, r13
    9368:	ee 24       	eor	r14, r14
    936a:	ff 24       	eor	r15, r15
    936c:	c8 0e       	add	r12, r24
    936e:	d9 1e       	adc	r13, r25
    9370:	ea 1e       	adc	r14, r26
    9372:	fb 1e       	adc	r15, r27
    9374:	77 24       	eor	r7, r7
    9376:	73 94       	inc	r7
    9378:	ff ef       	ldi	r31, 0xFF	; 255
    937a:	cf 0e       	add	r12, r31
    937c:	f1 e0       	ldi	r31, 0x01	; 1
    937e:	df 1e       	adc	r13, r31
    9380:	e1 1c       	adc	r14, r1
    9382:	f1 1c       	adc	r15, r1
    9384:	59 e0       	ldi	r21, 0x09	; 9
    9386:	f6 94       	lsr	r15
    9388:	e7 94       	ror	r14
    938a:	d7 94       	ror	r13
    938c:	c7 94       	ror	r12
    938e:	5a 95       	dec	r21
    9390:	d1 f7       	brne	.-12     	; 0x9386 <find_volume+0x364>
    9392:	2d 89       	ldd	r18, Y+21	; 0x15
    9394:	3e 89       	ldd	r19, Y+22	; 0x16
    9396:	4f 89       	ldd	r20, Y+23	; 0x17
    9398:	58 8d       	ldd	r21, Y+24	; 0x18
    939a:	2c 15       	cp	r18, r12
    939c:	3d 05       	cpc	r19, r13
    939e:	4e 05       	cpc	r20, r14
    93a0:	5f 05       	cpc	r21, r15
    93a2:	08 f4       	brcc	.+2      	; 0x93a6 <find_volume+0x384>
    93a4:	ca ce       	rjmp	.-620    	; 0x913a <find_volume+0x118>
    93a6:	8f ef       	ldi	r24, 0xFF	; 255
    93a8:	9f ef       	ldi	r25, 0xFF	; 255
    93aa:	dc 01       	movw	r26, r24
    93ac:	f8 01       	movw	r30, r16
    93ae:	81 8b       	std	Z+17, r24	; 0x11
    93b0:	92 8b       	std	Z+18, r25	; 0x12
    93b2:	a3 8b       	std	Z+19, r26	; 0x13
    93b4:	b4 8b       	std	Z+20, r27	; 0x14
    93b6:	85 87       	std	Z+13, r24	; 0x0d
    93b8:	96 87       	std	Z+14, r25	; 0x0e
    93ba:	a7 87       	std	Z+15, r26	; 0x0f
    93bc:	b0 8b       	std	Z+16, r27	; 0x10
    93be:	80 e8       	ldi	r24, 0x80	; 128
    93c0:	84 83       	std	Z+4, r24	; 0x04
    93c2:	f3 e0       	ldi	r31, 0x03	; 3
    93c4:	7f 12       	cpse	r7, r31
    93c6:	42 c0       	rjmp	.+132    	; 0x944c <find_volume+0x42a>
    93c8:	f8 01       	movw	r30, r16
    93ca:	eb 59       	subi	r30, 0x9B	; 155
    93cc:	ff 4f       	sbci	r31, 0xFF	; 255
    93ce:	80 81       	ld	r24, Z
    93d0:	91 81       	ldd	r25, Z+1	; 0x01
    93d2:	01 97       	sbiw	r24, 0x01	; 1
    93d4:	09 f0       	breq	.+2      	; 0x93d8 <find_volume+0x3b6>
    93d6:	3a c0       	rjmp	.+116    	; 0x944c <find_volume+0x42a>
    93d8:	b5 01       	movw	r22, r10
    93da:	a4 01       	movw	r20, r8
    93dc:	4f 5f       	subi	r20, 0xFF	; 255
    93de:	5f 4f       	sbci	r21, 0xFF	; 255
    93e0:	6f 4f       	sbci	r22, 0xFF	; 255
    93e2:	7f 4f       	sbci	r23, 0xFF	; 255
    93e4:	c8 01       	movw	r24, r16
    93e6:	9d dd       	rcall	.-1222   	; 0x8f22 <move_window>
    93e8:	89 2b       	or	r24, r25
    93ea:	81 f5       	brne	.+96     	; 0x944c <find_volume+0x42a>
    93ec:	d8 01       	movw	r26, r16
    93ee:	14 96       	adiw	r26, 0x04	; 4
    93f0:	1c 92       	st	X, r1
    93f2:	f8 01       	movw	r30, r16
    93f4:	ed 5c       	subi	r30, 0xCD	; 205
    93f6:	fd 4f       	sbci	r31, 0xFD	; 253
    93f8:	80 81       	ld	r24, Z
    93fa:	91 81       	ldd	r25, Z+1	; 0x01
    93fc:	85 35       	cpi	r24, 0x55	; 85
    93fe:	9a 4a       	sbci	r25, 0xAA	; 170
    9400:	29 f5       	brne	.+74     	; 0x944c <find_volume+0x42a>
    9402:	c8 01       	movw	r24, r16
    9404:	c5 96       	adiw	r24, 0x35	; 53
    9406:	b6 db       	rcall	.-2196   	; 0x8b74 <ld_dword>
    9408:	62 35       	cpi	r22, 0x52	; 82
    940a:	72 45       	sbci	r23, 0x52	; 82
    940c:	81 46       	sbci	r24, 0x61	; 97
    940e:	91 44       	sbci	r25, 0x41	; 65
    9410:	e9 f4       	brne	.+58     	; 0x944c <find_volume+0x42a>
    9412:	c8 01       	movw	r24, r16
    9414:	87 5e       	subi	r24, 0xE7	; 231
    9416:	9d 4f       	sbci	r25, 0xFD	; 253
    9418:	ad db       	rcall	.-2214   	; 0x8b74 <ld_dword>
    941a:	62 37       	cpi	r22, 0x72	; 114
    941c:	72 47       	sbci	r23, 0x72	; 114
    941e:	81 44       	sbci	r24, 0x41	; 65
    9420:	91 46       	sbci	r25, 0x61	; 97
    9422:	a1 f4       	brne	.+40     	; 0x944c <find_volume+0x42a>
    9424:	c8 01       	movw	r24, r16
    9426:	83 5e       	subi	r24, 0xE3	; 227
    9428:	9d 4f       	sbci	r25, 0xFD	; 253
    942a:	a4 db       	rcall	.-2232   	; 0x8b74 <ld_dword>
    942c:	d8 01       	movw	r26, r16
    942e:	51 96       	adiw	r26, 0x11	; 17
    9430:	6d 93       	st	X+, r22
    9432:	7d 93       	st	X+, r23
    9434:	8d 93       	st	X+, r24
    9436:	9c 93       	st	X, r25
    9438:	54 97       	sbiw	r26, 0x14	; 20
    943a:	c8 01       	movw	r24, r16
    943c:	8f 5d       	subi	r24, 0xDF	; 223
    943e:	9d 4f       	sbci	r25, 0xFD	; 253
    9440:	99 db       	rcall	.-2254   	; 0x8b74 <ld_dword>
    9442:	f8 01       	movw	r30, r16
    9444:	65 87       	std	Z+13, r22	; 0x0d
    9446:	76 87       	std	Z+14, r23	; 0x0e
    9448:	87 87       	std	Z+15, r24	; 0x0f
    944a:	90 8b       	std	Z+16, r25	; 0x10
    944c:	d8 01       	movw	r26, r16
    944e:	7c 92       	st	X, r7
    9450:	80 91 70 18 	lds	r24, 0x1870	; 0x801870 <Fsid>
    9454:	90 91 71 18 	lds	r25, 0x1871	; 0x801871 <Fsid+0x1>
    9458:	01 96       	adiw	r24, 0x01	; 1
    945a:	90 93 71 18 	sts	0x1871, r25	; 0x801871 <Fsid+0x1>
    945e:	80 93 70 18 	sts	0x1870, r24	; 0x801870 <Fsid>
    9462:	16 96       	adiw	r26, 0x06	; 6
    9464:	9c 93       	st	X, r25
    9466:	8e 93       	st	-X, r24
    9468:	15 97       	sbiw	r26, 0x05	; 5
    946a:	f8 01       	movw	r30, r16
    946c:	15 8a       	std	Z+21, r1	; 0x15
    946e:	16 8a       	std	Z+22, r1	; 0x16
    9470:	17 8a       	std	Z+23, r1	; 0x17
    9472:	10 8e       	std	Z+24, r1	; 0x18
    9474:	06 c0       	rjmp	.+12     	; 0x9482 <find_volume+0x460>
    9476:	8b e0       	ldi	r24, 0x0B	; 11
    9478:	90 e0       	ldi	r25, 0x00	; 0
    947a:	78 c0       	rjmp	.+240    	; 0x956c <find_volume+0x54a>
    947c:	8c e0       	ldi	r24, 0x0C	; 12
    947e:	90 e0       	ldi	r25, 0x00	; 0
    9480:	75 c0       	rjmp	.+234    	; 0x956c <find_volume+0x54a>
    9482:	80 e0       	ldi	r24, 0x00	; 0
    9484:	90 e0       	ldi	r25, 0x00	; 0
    9486:	72 c0       	rjmp	.+228    	; 0x956c <find_volume+0x54a>
    9488:	83 e0       	ldi	r24, 0x03	; 3
    948a:	90 e0       	ldi	r25, 0x00	; 0
    948c:	6f c0       	rjmp	.+222    	; 0x956c <find_volume+0x54a>
    948e:	84 30       	cpi	r24, 0x04	; 4
    9490:	09 f0       	breq	.+2      	; 0x9494 <find_volume+0x472>
    9492:	53 ce       	rjmp	.-858    	; 0x913a <find_volume+0x118>
    9494:	81 e0       	ldi	r24, 0x01	; 1
    9496:	90 e0       	ldi	r25, 0x00	; 0
    9498:	69 c0       	rjmp	.+210    	; 0x956c <find_volume+0x54a>
    949a:	d8 01       	movw	r26, r16
    949c:	59 96       	adiw	r26, 0x19	; 25
    949e:	cd 92       	st	X+, r12
    94a0:	dd 92       	st	X+, r13
    94a2:	ed 92       	st	X+, r14
    94a4:	fc 92       	st	X, r15
    94a6:	5c 97       	sbiw	r26, 0x1c	; 28
    94a8:	f8 01       	movw	r30, r16
    94aa:	81 a2       	std	Z+33, r8	; 0x21
    94ac:	92 a2       	std	Z+34, r9	; 0x22
    94ae:	a3 a2       	std	Z+35, r10	; 0x23
    94b0:	b4 a2       	std	Z+36, r11	; 0x24
    94b2:	2a 8d       	ldd	r18, Y+26	; 0x1a
    94b4:	3b 8d       	ldd	r19, Y+27	; 0x1b
    94b6:	4c 8d       	ldd	r20, Y+28	; 0x1c
    94b8:	5d 8d       	ldd	r21, Y+29	; 0x1d
    94ba:	95 96       	adiw	r26, 0x25	; 37
    94bc:	2d 93       	st	X+, r18
    94be:	3d 93       	st	X+, r19
    94c0:	4d 93       	st	X+, r20
    94c2:	5c 93       	st	X, r21
    94c4:	98 97       	sbiw	r26, 0x28	; 40
    94c6:	29 89       	ldd	r18, Y+17	; 0x11
    94c8:	3a 89       	ldd	r19, Y+18	; 0x12
    94ca:	4b 89       	ldd	r20, Y+19	; 0x13
    94cc:	5c 89       	ldd	r21, Y+20	; 0x14
    94ce:	9d 96       	adiw	r26, 0x2d	; 45
    94d0:	2d 93       	st	X+, r18
    94d2:	3d 93       	st	X+, r19
    94d4:	4d 93       	st	X+, r20
    94d6:	5c 93       	st	X, r21
    94d8:	d0 97       	sbiw	r26, 0x30	; 48
    94da:	e1 5a       	subi	r30, 0xA1	; 161
    94dc:	ff 4f       	sbci	r31, 0xFF	; 255
    94de:	80 81       	ld	r24, Z
    94e0:	91 81       	ldd	r25, Z+1	; 0x01
    94e2:	89 2b       	or	r24, r25
    94e4:	09 f0       	breq	.+2      	; 0x94e8 <find_volume+0x4c6>
    94e6:	29 ce       	rjmp	.-942    	; 0x913a <find_volume+0x118>
    94e8:	21 14       	cp	r2, r1
    94ea:	31 04       	cpc	r3, r1
    94ec:	09 f0       	breq	.+2      	; 0x94f0 <find_volume+0x4ce>
    94ee:	25 ce       	rjmp	.-950    	; 0x913a <find_volume+0x118>
    94f0:	c8 01       	movw	r24, r16
    94f2:	8f 59       	subi	r24, 0x9F	; 159
    94f4:	9f 4f       	sbci	r25, 0xFF	; 255
    94f6:	3e db       	rcall	.-2436   	; 0x8b74 <ld_dword>
    94f8:	f8 01       	movw	r30, r16
    94fa:	61 a7       	std	Z+41, r22	; 0x29
    94fc:	72 a7       	std	Z+42, r23	; 0x2a
    94fe:	83 a7       	std	Z+43, r24	; 0x2b
    9500:	94 a7       	std	Z+44, r25	; 0x2c
    9502:	62 e0       	ldi	r22, 0x02	; 2
    9504:	cc 0c       	add	r12, r12
    9506:	dd 1c       	adc	r13, r13
    9508:	ee 1c       	adc	r14, r14
    950a:	ff 1c       	adc	r15, r15
    950c:	6a 95       	dec	r22
    950e:	d1 f7       	brne	.-12     	; 0x9504 <find_volume+0x4e2>
    9510:	73 e0       	ldi	r23, 0x03	; 3
    9512:	77 2e       	mov	r7, r23
    9514:	31 cf       	rjmp	.-414    	; 0x9378 <find_volume+0x356>
    9516:	81 a2       	std	Z+33, r8	; 0x21
    9518:	92 a2       	std	Z+34, r9	; 0x22
    951a:	a3 a2       	std	Z+35, r10	; 0x23
    951c:	b4 a2       	std	Z+36, r11	; 0x24
    951e:	2a 8d       	ldd	r18, Y+26	; 0x1a
    9520:	3b 8d       	ldd	r19, Y+27	; 0x1b
    9522:	4c 8d       	ldd	r20, Y+28	; 0x1c
    9524:	5d 8d       	ldd	r21, Y+29	; 0x1d
    9526:	25 a3       	std	Z+37, r18	; 0x25
    9528:	36 a3       	std	Z+38, r19	; 0x26
    952a:	47 a3       	std	Z+39, r20	; 0x27
    952c:	50 a7       	std	Z+40, r21	; 0x28
    952e:	29 89       	ldd	r18, Y+17	; 0x11
    9530:	3a 89       	ldd	r19, Y+18	; 0x12
    9532:	4b 89       	ldd	r20, Y+19	; 0x13
    9534:	5c 89       	ldd	r21, Y+20	; 0x14
    9536:	25 a7       	std	Z+45, r18	; 0x2d
    9538:	36 a7       	std	Z+46, r19	; 0x2e
    953a:	47 a7       	std	Z+47, r20	; 0x2f
    953c:	50 ab       	std	Z+48, r21	; 0x30
    953e:	21 14       	cp	r2, r1
    9540:	31 04       	cpc	r3, r1
    9542:	09 f4       	brne	.+2      	; 0x9546 <find_volume+0x524>
    9544:	fa cd       	rjmp	.-1036   	; 0x913a <find_volume+0x118>
    9546:	2a 8d       	ldd	r18, Y+26	; 0x1a
    9548:	3b 8d       	ldd	r19, Y+27	; 0x1b
    954a:	4c 8d       	ldd	r20, Y+28	; 0x1c
    954c:	5d 8d       	ldd	r21, Y+29	; 0x1d
    954e:	42 0e       	add	r4, r18
    9550:	53 1e       	adc	r5, r19
    9552:	64 1e       	adc	r6, r20
    9554:	75 1e       	adc	r7, r21
    9556:	41 a6       	std	Z+41, r4	; 0x29
    9558:	52 a6       	std	Z+42, r5	; 0x2a
    955a:	63 a6       	std	Z+43, r6	; 0x2b
    955c:	74 a6       	std	Z+44, r7	; 0x2c
    955e:	cc 0c       	add	r12, r12
    9560:	dd 1c       	adc	r13, r13
    9562:	ee 1c       	adc	r14, r14
    9564:	ff 1c       	adc	r15, r15
    9566:	42 e0       	ldi	r20, 0x02	; 2
    9568:	74 2e       	mov	r7, r20
    956a:	06 cf       	rjmp	.-500    	; 0x9378 <find_volume+0x356>
    956c:	6d 96       	adiw	r28, 0x1d	; 29
    956e:	e2 e1       	ldi	r30, 0x12	; 18
    9570:	0c 94 ab e9 	jmp	0x1d356	; 0x1d356 <__epilogue_restores__>

00009574 <put_fat>:
    9574:	a6 e0       	ldi	r26, 0x06	; 6
    9576:	b0 e0       	ldi	r27, 0x00	; 0
    9578:	e0 ec       	ldi	r30, 0xC0	; 192
    957a:	fa e4       	ldi	r31, 0x4A	; 74
    957c:	0c 94 8f e9 	jmp	0x1d31e	; 0x1d31e <__prologue_saves__>
    9580:	42 30       	cpi	r20, 0x02	; 2
    9582:	51 05       	cpc	r21, r1
    9584:	61 05       	cpc	r22, r1
    9586:	71 05       	cpc	r23, r1
    9588:	08 f4       	brcc	.+2      	; 0x958c <put_fat+0x18>
    958a:	e9 c0       	rjmp	.+466    	; 0x975e <put_fat+0x1ea>
    958c:	dc 01       	movw	r26, r24
    958e:	59 96       	adiw	r26, 0x19	; 25
    9590:	cd 90       	ld	r12, X+
    9592:	dd 90       	ld	r13, X+
    9594:	ed 90       	ld	r14, X+
    9596:	fc 90       	ld	r15, X
    9598:	5c 97       	sbiw	r26, 0x1c	; 28
    959a:	4c 15       	cp	r20, r12
    959c:	5d 05       	cpc	r21, r13
    959e:	6e 05       	cpc	r22, r14
    95a0:	7f 05       	cpc	r23, r15
    95a2:	08 f0       	brcs	.+2      	; 0x95a6 <put_fat+0x32>
    95a4:	dc c0       	rjmp	.+440    	; 0x975e <put_fat+0x1ea>
    95a6:	28 01       	movw	r4, r16
    95a8:	39 01       	movw	r6, r18
    95aa:	6a 01       	movw	r12, r20
    95ac:	7b 01       	movw	r14, r22
    95ae:	9e 83       	std	Y+6, r25	; 0x06
    95b0:	8d 83       	std	Y+5, r24	; 0x05
    95b2:	fc 01       	movw	r30, r24
    95b4:	80 81       	ld	r24, Z
    95b6:	82 30       	cpi	r24, 0x02	; 2
    95b8:	09 f4       	brne	.+2      	; 0x95bc <put_fat+0x48>
    95ba:	73 c0       	rjmp	.+230    	; 0x96a2 <put_fat+0x12e>
    95bc:	83 30       	cpi	r24, 0x03	; 3
    95be:	09 f4       	brne	.+2      	; 0x95c2 <put_fat+0x4e>
    95c0:	92 c0       	rjmp	.+292    	; 0x96e6 <put_fat+0x172>
    95c2:	81 30       	cpi	r24, 0x01	; 1
    95c4:	09 f0       	breq	.+2      	; 0x95c8 <put_fat+0x54>
    95c6:	cb c0       	rjmp	.+406    	; 0x975e <put_fat+0x1ea>
    95c8:	4a 01       	movw	r8, r20
    95ca:	96 94       	lsr	r9
    95cc:	87 94       	ror	r8
    95ce:	84 0e       	add	r8, r20
    95d0:	95 1e       	adc	r9, r21
    95d2:	c4 01       	movw	r24, r8
    95d4:	89 2f       	mov	r24, r25
    95d6:	99 27       	eor	r25, r25
    95d8:	86 95       	lsr	r24
    95da:	45 a1       	ldd	r20, Z+37	; 0x25
    95dc:	56 a1       	ldd	r21, Z+38	; 0x26
    95de:	67 a1       	ldd	r22, Z+39	; 0x27
    95e0:	70 a5       	ldd	r23, Z+40	; 0x28
    95e2:	48 0f       	add	r20, r24
    95e4:	59 1f       	adc	r21, r25
    95e6:	61 1d       	adc	r22, r1
    95e8:	71 1d       	adc	r23, r1
    95ea:	cf 01       	movw	r24, r30
    95ec:	9a dc       	rcall	.-1740   	; 0x8f22 <move_window>
    95ee:	5c 01       	movw	r10, r24
    95f0:	89 2b       	or	r24, r25
    95f2:	09 f0       	breq	.+2      	; 0x95f6 <put_fat+0x82>
    95f4:	b7 c0       	rjmp	.+366    	; 0x9764 <put_fat+0x1f0>
    95f6:	2d 80       	ldd	r2, Y+5	; 0x05
    95f8:	3e 80       	ldd	r3, Y+6	; 0x06
    95fa:	f5 e3       	ldi	r31, 0x35	; 53
    95fc:	2f 0e       	add	r2, r31
    95fe:	31 1c       	adc	r3, r1
    9600:	84 01       	movw	r16, r8
    9602:	0f 5f       	subi	r16, 0xFF	; 255
    9604:	1f 4f       	sbci	r17, 0xFF	; 255
    9606:	21 e0       	ldi	r18, 0x01	; 1
    9608:	92 22       	and	r9, r18
    960a:	f1 01       	movw	r30, r2
    960c:	e8 0d       	add	r30, r8
    960e:	f9 1d       	adc	r31, r9
    9610:	d7 01       	movw	r26, r14
    9612:	c6 01       	movw	r24, r12
    9614:	81 70       	andi	r24, 0x01	; 1
    9616:	99 27       	eor	r25, r25
    9618:	aa 27       	eor	r26, r26
    961a:	bb 27       	eor	r27, r27
    961c:	89 83       	std	Y+1, r24	; 0x01
    961e:	9a 83       	std	Y+2, r25	; 0x02
    9620:	ab 83       	std	Y+3, r26	; 0x03
    9622:	bc 83       	std	Y+4, r27	; 0x04
    9624:	c0 fe       	sbrs	r12, 0
    9626:	09 c0       	rjmp	.+18     	; 0x963a <put_fat+0xc6>
    9628:	80 81       	ld	r24, Z
    962a:	28 2f       	mov	r18, r24
    962c:	2f 70       	andi	r18, 0x0F	; 15
    962e:	a0 e1       	ldi	r26, 0x10	; 16
    9630:	4a 9e       	mul	r4, r26
    9632:	c0 01       	movw	r24, r0
    9634:	11 24       	eor	r1, r1
    9636:	82 2b       	or	r24, r18
    9638:	01 c0       	rjmp	.+2      	; 0x963c <put_fat+0xc8>
    963a:	84 2d       	mov	r24, r4
    963c:	80 83       	st	Z, r24
    963e:	81 e0       	ldi	r24, 0x01	; 1
    9640:	ed 81       	ldd	r30, Y+5	; 0x05
    9642:	fe 81       	ldd	r31, Y+6	; 0x06
    9644:	83 83       	std	Z+3, r24	; 0x03
    9646:	45 a1       	ldd	r20, Z+37	; 0x25
    9648:	56 a1       	ldd	r21, Z+38	; 0x26
    964a:	67 a1       	ldd	r22, Z+39	; 0x27
    964c:	70 a5       	ldd	r23, Z+40	; 0x28
    964e:	c8 01       	movw	r24, r16
    9650:	89 2f       	mov	r24, r25
    9652:	99 27       	eor	r25, r25
    9654:	86 95       	lsr	r24
    9656:	48 0f       	add	r20, r24
    9658:	59 1f       	adc	r21, r25
    965a:	61 1d       	adc	r22, r1
    965c:	71 1d       	adc	r23, r1
    965e:	cf 01       	movw	r24, r30
    9660:	60 dc       	rcall	.-1856   	; 0x8f22 <move_window>
    9662:	5c 01       	movw	r10, r24
    9664:	89 2b       	or	r24, r25
    9666:	09 f0       	breq	.+2      	; 0x966a <put_fat+0xf6>
    9668:	7d c0       	rjmp	.+250    	; 0x9764 <put_fat+0x1f0>
    966a:	11 70       	andi	r17, 0x01	; 1
    966c:	f1 01       	movw	r30, r2
    966e:	e0 0f       	add	r30, r16
    9670:	f1 1f       	adc	r31, r17
    9672:	89 81       	ldd	r24, Y+1	; 0x01
    9674:	9a 81       	ldd	r25, Y+2	; 0x02
    9676:	ab 81       	ldd	r26, Y+3	; 0x03
    9678:	bc 81       	ldd	r27, Y+4	; 0x04
    967a:	89 2b       	or	r24, r25
    967c:	8a 2b       	or	r24, r26
    967e:	8b 2b       	or	r24, r27
    9680:	41 f0       	breq	.+16     	; 0x9692 <put_fat+0x11e>
    9682:	54 e0       	ldi	r21, 0x04	; 4
    9684:	76 94       	lsr	r7
    9686:	67 94       	ror	r6
    9688:	57 94       	ror	r5
    968a:	47 94       	ror	r4
    968c:	5a 95       	dec	r21
    968e:	d1 f7       	brne	.-12     	; 0x9684 <put_fat+0x110>
    9690:	06 c0       	rjmp	.+12     	; 0x969e <put_fat+0x12a>
    9692:	00 81       	ld	r16, Z
    9694:	00 7f       	andi	r16, 0xF0	; 240
    9696:	85 2d       	mov	r24, r5
    9698:	8f 70       	andi	r24, 0x0F	; 15
    969a:	40 2e       	mov	r4, r16
    969c:	48 2a       	or	r4, r24
    969e:	40 82       	st	Z, r4
    96a0:	58 c0       	rjmp	.+176    	; 0x9752 <put_fat+0x1de>
    96a2:	77 27       	eor	r23, r23
    96a4:	6f 2d       	mov	r22, r15
    96a6:	5e 2d       	mov	r21, r14
    96a8:	4d 2d       	mov	r20, r13
    96aa:	ed 81       	ldd	r30, Y+5	; 0x05
    96ac:	fe 81       	ldd	r31, Y+6	; 0x06
    96ae:	85 a1       	ldd	r24, Z+37	; 0x25
    96b0:	96 a1       	ldd	r25, Z+38	; 0x26
    96b2:	a7 a1       	ldd	r26, Z+39	; 0x27
    96b4:	b0 a5       	ldd	r27, Z+40	; 0x28
    96b6:	48 0f       	add	r20, r24
    96b8:	59 1f       	adc	r21, r25
    96ba:	6a 1f       	adc	r22, r26
    96bc:	7b 1f       	adc	r23, r27
    96be:	cf 01       	movw	r24, r30
    96c0:	30 dc       	rcall	.-1952   	; 0x8f22 <move_window>
    96c2:	5c 01       	movw	r10, r24
    96c4:	89 2b       	or	r24, r25
    96c6:	09 f0       	breq	.+2      	; 0x96ca <put_fat+0x156>
    96c8:	4d c0       	rjmp	.+154    	; 0x9764 <put_fat+0x1f0>
    96ca:	ed 81       	ldd	r30, Y+5	; 0x05
    96cc:	fe 81       	ldd	r31, Y+6	; 0x06
    96ce:	f5 96       	adiw	r30, 0x35	; 53
    96d0:	cc 0c       	add	r12, r12
    96d2:	dd 1c       	adc	r13, r13
    96d4:	e8 94       	clt
    96d6:	c0 f8       	bld	r12, 0
    96d8:	21 e0       	ldi	r18, 0x01	; 1
    96da:	d2 22       	and	r13, r18
    96dc:	ec 0d       	add	r30, r12
    96de:	fd 1d       	adc	r31, r13
    96e0:	40 82       	st	Z, r4
    96e2:	51 82       	std	Z+1, r5	; 0x01
    96e4:	36 c0       	rjmp	.+108    	; 0x9752 <put_fat+0x1de>
    96e6:	ed 81       	ldd	r30, Y+5	; 0x05
    96e8:	fe 81       	ldd	r31, Y+6	; 0x06
    96ea:	85 a1       	ldd	r24, Z+37	; 0x25
    96ec:	96 a1       	ldd	r25, Z+38	; 0x26
    96ee:	a7 a1       	ldd	r26, Z+39	; 0x27
    96f0:	b0 a5       	ldd	r27, Z+40	; 0x28
    96f2:	27 e0       	ldi	r18, 0x07	; 7
    96f4:	76 95       	lsr	r23
    96f6:	67 95       	ror	r22
    96f8:	57 95       	ror	r21
    96fa:	47 95       	ror	r20
    96fc:	2a 95       	dec	r18
    96fe:	d1 f7       	brne	.-12     	; 0x96f4 <put_fat+0x180>
    9700:	48 0f       	add	r20, r24
    9702:	59 1f       	adc	r21, r25
    9704:	6a 1f       	adc	r22, r26
    9706:	7b 1f       	adc	r23, r27
    9708:	cf 01       	movw	r24, r30
    970a:	0b dc       	rcall	.-2026   	; 0x8f22 <move_window>
    970c:	5c 01       	movw	r10, r24
    970e:	89 2b       	or	r24, r25
    9710:	49 f5       	brne	.+82     	; 0x9764 <put_fat+0x1f0>
    9712:	4d 81       	ldd	r20, Y+5	; 0x05
    9714:	5e 81       	ldd	r21, Y+6	; 0x06
    9716:	4b 5c       	subi	r20, 0xCB	; 203
    9718:	5f 4f       	sbci	r21, 0xFF	; 255
    971a:	cc 0c       	add	r12, r12
    971c:	dd 1c       	adc	r13, r13
    971e:	cc 0c       	add	r12, r12
    9720:	dd 1c       	adc	r13, r13
    9722:	fc ef       	ldi	r31, 0xFC	; 252
    9724:	cf 22       	and	r12, r31
    9726:	f1 e0       	ldi	r31, 0x01	; 1
    9728:	df 22       	and	r13, r31
    972a:	c4 0e       	add	r12, r20
    972c:	d5 1e       	adc	r13, r21
    972e:	c6 01       	movw	r24, r12
    9730:	21 da       	rcall	.-3006   	; 0x8b74 <ld_dword>
    9732:	2f e0       	ldi	r18, 0x0F	; 15
    9734:	72 22       	and	r7, r18
    9736:	dc 01       	movw	r26, r24
    9738:	cb 01       	movw	r24, r22
    973a:	88 27       	eor	r24, r24
    973c:	99 27       	eor	r25, r25
    973e:	aa 27       	eor	r26, r26
    9740:	b0 7f       	andi	r27, 0xF0	; 240
    9742:	b3 01       	movw	r22, r6
    9744:	a2 01       	movw	r20, r4
    9746:	48 2b       	or	r20, r24
    9748:	59 2b       	or	r21, r25
    974a:	6a 2b       	or	r22, r26
    974c:	7b 2b       	or	r23, r27
    974e:	c6 01       	movw	r24, r12
    9750:	26 da       	rcall	.-2996   	; 0x8b9e <st_dword>
    9752:	81 e0       	ldi	r24, 0x01	; 1
    9754:	ad 81       	ldd	r26, Y+5	; 0x05
    9756:	be 81       	ldd	r27, Y+6	; 0x06
    9758:	13 96       	adiw	r26, 0x03	; 3
    975a:	8c 93       	st	X, r24
    975c:	03 c0       	rjmp	.+6      	; 0x9764 <put_fat+0x1f0>
    975e:	82 e0       	ldi	r24, 0x02	; 2
    9760:	a8 2e       	mov	r10, r24
    9762:	b1 2c       	mov	r11, r1
    9764:	c5 01       	movw	r24, r10
    9766:	26 96       	adiw	r28, 0x06	; 6
    9768:	e2 e1       	ldi	r30, 0x12	; 18
    976a:	0c 94 ab e9 	jmp	0x1d356	; 0x1d356 <__epilogue_restores__>

0000976e <get_fat.isra.7>:
    976e:	a0 e0       	ldi	r26, 0x00	; 0
    9770:	b0 e0       	ldi	r27, 0x00	; 0
    9772:	ed eb       	ldi	r30, 0xBD	; 189
    9774:	fb e4       	ldi	r31, 0x4B	; 75
    9776:	0c 94 97 e9 	jmp	0x1d32e	; 0x1d32e <__prologue_saves__+0x10>
    977a:	42 30       	cpi	r20, 0x02	; 2
    977c:	51 05       	cpc	r21, r1
    977e:	61 05       	cpc	r22, r1
    9780:	71 05       	cpc	r23, r1
    9782:	08 f4       	brcc	.+2      	; 0x9786 <get_fat.isra.7+0x18>
    9784:	9e c0       	rjmp	.+316    	; 0x98c2 <get_fat.isra.7+0x154>
    9786:	fc 01       	movw	r30, r24
    9788:	01 8d       	ldd	r16, Z+25	; 0x19
    978a:	12 8d       	ldd	r17, Z+26	; 0x1a
    978c:	23 8d       	ldd	r18, Z+27	; 0x1b
    978e:	34 8d       	ldd	r19, Z+28	; 0x1c
    9790:	40 17       	cp	r20, r16
    9792:	51 07       	cpc	r21, r17
    9794:	62 07       	cpc	r22, r18
    9796:	73 07       	cpc	r23, r19
    9798:	08 f0       	brcs	.+2      	; 0x979c <get_fat.isra.7+0x2e>
    979a:	93 c0       	rjmp	.+294    	; 0x98c2 <get_fat.isra.7+0x154>
    979c:	6a 01       	movw	r12, r20
    979e:	7b 01       	movw	r14, r22
    97a0:	8c 01       	movw	r16, r24
    97a2:	80 81       	ld	r24, Z
    97a4:	82 30       	cpi	r24, 0x02	; 2
    97a6:	09 f4       	brne	.+2      	; 0x97aa <get_fat.isra.7+0x3c>
    97a8:	4b c0       	rjmp	.+150    	; 0x9840 <get_fat.isra.7+0xd2>
    97aa:	83 30       	cpi	r24, 0x03	; 3
    97ac:	09 f4       	brne	.+2      	; 0x97b0 <get_fat.isra.7+0x42>
    97ae:	67 c0       	rjmp	.+206    	; 0x987e <get_fat.isra.7+0x110>
    97b0:	81 30       	cpi	r24, 0x01	; 1
    97b2:	09 f0       	breq	.+2      	; 0x97b6 <get_fat.isra.7+0x48>
    97b4:	86 c0       	rjmp	.+268    	; 0x98c2 <get_fat.isra.7+0x154>
    97b6:	ea 01       	movw	r28, r20
    97b8:	d6 95       	lsr	r29
    97ba:	c7 95       	ror	r28
    97bc:	cc 0d       	add	r28, r12
    97be:	dd 1d       	adc	r29, r13
    97c0:	ce 01       	movw	r24, r28
    97c2:	89 2f       	mov	r24, r25
    97c4:	99 27       	eor	r25, r25
    97c6:	86 95       	lsr	r24
    97c8:	45 a1       	ldd	r20, Z+37	; 0x25
    97ca:	56 a1       	ldd	r21, Z+38	; 0x26
    97cc:	67 a1       	ldd	r22, Z+39	; 0x27
    97ce:	70 a5       	ldd	r23, Z+40	; 0x28
    97d0:	48 0f       	add	r20, r24
    97d2:	59 1f       	adc	r21, r25
    97d4:	61 1d       	adc	r22, r1
    97d6:	71 1d       	adc	r23, r1
    97d8:	cf 01       	movw	r24, r30
    97da:	a3 db       	rcall	.-2234   	; 0x8f22 <move_window>
    97dc:	89 2b       	or	r24, r25
    97de:	21 f0       	breq	.+8      	; 0x97e8 <get_fat.isra.7+0x7a>
    97e0:	6f ef       	ldi	r22, 0xFF	; 255
    97e2:	7f ef       	ldi	r23, 0xFF	; 255
    97e4:	cb 01       	movw	r24, r22
    97e6:	71 c0       	rjmp	.+226    	; 0x98ca <get_fat.isra.7+0x15c>
    97e8:	5e 01       	movw	r10, r28
    97ea:	ff ef       	ldi	r31, 0xFF	; 255
    97ec:	af 1a       	sub	r10, r31
    97ee:	bf 0a       	sbc	r11, r31
    97f0:	d1 70       	andi	r29, 0x01	; 1
    97f2:	c0 0f       	add	r28, r16
    97f4:	d1 1f       	adc	r29, r17
    97f6:	cd a9       	ldd	r28, Y+53	; 0x35
    97f8:	c5 01       	movw	r24, r10
    97fa:	89 2f       	mov	r24, r25
    97fc:	99 27       	eor	r25, r25
    97fe:	86 95       	lsr	r24
    9800:	f8 01       	movw	r30, r16
    9802:	45 a1       	ldd	r20, Z+37	; 0x25
    9804:	56 a1       	ldd	r21, Z+38	; 0x26
    9806:	67 a1       	ldd	r22, Z+39	; 0x27
    9808:	70 a5       	ldd	r23, Z+40	; 0x28
    980a:	48 0f       	add	r20, r24
    980c:	59 1f       	adc	r21, r25
    980e:	61 1d       	adc	r22, r1
    9810:	71 1d       	adc	r23, r1
    9812:	c8 01       	movw	r24, r16
    9814:	86 db       	rcall	.-2292   	; 0x8f22 <move_window>
    9816:	89 2b       	or	r24, r25
    9818:	19 f7       	brne	.-58     	; 0x97e0 <get_fat.isra.7+0x72>
    981a:	f1 e0       	ldi	r31, 0x01	; 1
    981c:	bf 22       	and	r11, r31
    981e:	f8 01       	movw	r30, r16
    9820:	ea 0d       	add	r30, r10
    9822:	fb 1d       	adc	r31, r11
    9824:	85 a9       	ldd	r24, Z+53	; 0x35
    9826:	6c 2f       	mov	r22, r28
    9828:	70 e0       	ldi	r23, 0x00	; 0
    982a:	78 2b       	or	r23, r24
    982c:	c0 fe       	sbrs	r12, 0
    982e:	06 c0       	rjmp	.+12     	; 0x983c <get_fat.isra.7+0xce>
    9830:	54 e0       	ldi	r21, 0x04	; 4
    9832:	76 95       	lsr	r23
    9834:	67 95       	ror	r22
    9836:	5a 95       	dec	r21
    9838:	e1 f7       	brne	.-8      	; 0x9832 <get_fat.isra.7+0xc4>
    983a:	1e c0       	rjmp	.+60     	; 0x9878 <get_fat.isra.7+0x10a>
    983c:	7f 70       	andi	r23, 0x0F	; 15
    983e:	1c c0       	rjmp	.+56     	; 0x9878 <get_fat.isra.7+0x10a>
    9840:	77 27       	eor	r23, r23
    9842:	6f 2d       	mov	r22, r15
    9844:	5e 2d       	mov	r21, r14
    9846:	4d 2d       	mov	r20, r13
    9848:	85 a1       	ldd	r24, Z+37	; 0x25
    984a:	96 a1       	ldd	r25, Z+38	; 0x26
    984c:	a7 a1       	ldd	r26, Z+39	; 0x27
    984e:	b0 a5       	ldd	r27, Z+40	; 0x28
    9850:	48 0f       	add	r20, r24
    9852:	59 1f       	adc	r21, r25
    9854:	6a 1f       	adc	r22, r26
    9856:	7b 1f       	adc	r23, r27
    9858:	cf 01       	movw	r24, r30
    985a:	63 db       	rcall	.-2362   	; 0x8f22 <move_window>
    985c:	89 2b       	or	r24, r25
    985e:	09 f0       	breq	.+2      	; 0x9862 <get_fat.isra.7+0xf4>
    9860:	bf cf       	rjmp	.-130    	; 0x97e0 <get_fat.isra.7+0x72>
    9862:	cc 0c       	add	r12, r12
    9864:	dd 1c       	adc	r13, r13
    9866:	e8 94       	clt
    9868:	c0 f8       	bld	r12, 0
    986a:	f1 e0       	ldi	r31, 0x01	; 1
    986c:	df 22       	and	r13, r31
    986e:	f8 01       	movw	r30, r16
    9870:	ec 0d       	add	r30, r12
    9872:	fd 1d       	adc	r31, r13
    9874:	65 a9       	ldd	r22, Z+53	; 0x35
    9876:	76 a9       	ldd	r23, Z+54	; 0x36
    9878:	80 e0       	ldi	r24, 0x00	; 0
    987a:	90 e0       	ldi	r25, 0x00	; 0
    987c:	26 c0       	rjmp	.+76     	; 0x98ca <get_fat.isra.7+0x15c>
    987e:	85 a1       	ldd	r24, Z+37	; 0x25
    9880:	96 a1       	ldd	r25, Z+38	; 0x26
    9882:	a7 a1       	ldd	r26, Z+39	; 0x27
    9884:	b0 a5       	ldd	r27, Z+40	; 0x28
    9886:	27 e0       	ldi	r18, 0x07	; 7
    9888:	76 95       	lsr	r23
    988a:	67 95       	ror	r22
    988c:	57 95       	ror	r21
    988e:	47 95       	ror	r20
    9890:	2a 95       	dec	r18
    9892:	d1 f7       	brne	.-12     	; 0x9888 <get_fat.isra.7+0x11a>
    9894:	48 0f       	add	r20, r24
    9896:	59 1f       	adc	r21, r25
    9898:	6a 1f       	adc	r22, r26
    989a:	7b 1f       	adc	r23, r27
    989c:	cf 01       	movw	r24, r30
    989e:	41 db       	rcall	.-2430   	; 0x8f22 <move_window>
    98a0:	89 2b       	or	r24, r25
    98a2:	09 f0       	breq	.+2      	; 0x98a6 <get_fat.isra.7+0x138>
    98a4:	9d cf       	rjmp	.-198    	; 0x97e0 <get_fat.isra.7+0x72>
    98a6:	0b 5c       	subi	r16, 0xCB	; 203
    98a8:	1f 4f       	sbci	r17, 0xFF	; 255
    98aa:	cc 0c       	add	r12, r12
    98ac:	dd 1c       	adc	r13, r13
    98ae:	cc 0c       	add	r12, r12
    98b0:	dd 1c       	adc	r13, r13
    98b2:	c6 01       	movw	r24, r12
    98b4:	8c 7f       	andi	r24, 0xFC	; 252
    98b6:	91 70       	andi	r25, 0x01	; 1
    98b8:	80 0f       	add	r24, r16
    98ba:	91 1f       	adc	r25, r17
    98bc:	5b d9       	rcall	.-3402   	; 0x8b74 <ld_dword>
    98be:	9f 70       	andi	r25, 0x0F	; 15
    98c0:	04 c0       	rjmp	.+8      	; 0x98ca <get_fat.isra.7+0x15c>
    98c2:	61 e0       	ldi	r22, 0x01	; 1
    98c4:	70 e0       	ldi	r23, 0x00	; 0
    98c6:	80 e0       	ldi	r24, 0x00	; 0
    98c8:	90 e0       	ldi	r25, 0x00	; 0
    98ca:	cd b7       	in	r28, 0x3d	; 61
    98cc:	de b7       	in	r29, 0x3e	; 62
    98ce:	ea e0       	ldi	r30, 0x0A	; 10
    98d0:	0c 94 b3 e9 	jmp	0x1d366	; 0x1d366 <__epilogue_restores__+0x10>

000098d4 <dir_sdi>:
    98d4:	a0 e0       	ldi	r26, 0x00	; 0
    98d6:	b0 e0       	ldi	r27, 0x00	; 0
    98d8:	e0 e7       	ldi	r30, 0x70	; 112
    98da:	fc e4       	ldi	r31, 0x4C	; 76
    98dc:	0c 94 91 e9 	jmp	0x1d322	; 0x1d322 <__prologue_saves__+0x4>
    98e0:	ec 01       	movw	r28, r24
    98e2:	6a 01       	movw	r12, r20
    98e4:	7b 01       	movw	r14, r22
    98e6:	41 15       	cp	r20, r1
    98e8:	51 05       	cpc	r21, r1
    98ea:	80 e2       	ldi	r24, 0x20	; 32
    98ec:	68 07       	cpc	r22, r24
    98ee:	71 05       	cpc	r23, r1
    98f0:	18 f0       	brcs	.+6      	; 0x98f8 <dir_sdi+0x24>
    98f2:	82 e0       	ldi	r24, 0x02	; 2
    98f4:	90 e0       	ldi	r25, 0x00	; 0
    98f6:	a9 c0       	rjmp	.+338    	; 0x9a4a <dir_sdi+0x176>
    98f8:	db 01       	movw	r26, r22
    98fa:	ca 01       	movw	r24, r20
    98fc:	8f 71       	andi	r24, 0x1F	; 31
    98fe:	99 27       	eor	r25, r25
    9900:	aa 27       	eor	r26, r26
    9902:	bb 27       	eor	r27, r27
    9904:	89 2b       	or	r24, r25
    9906:	8a 2b       	or	r24, r26
    9908:	8b 2b       	or	r24, r27
    990a:	99 f7       	brne	.-26     	; 0x98f2 <dir_sdi+0x1e>
    990c:	08 81       	ld	r16, Y
    990e:	19 81       	ldd	r17, Y+1	; 0x01
    9910:	4e 87       	std	Y+14, r20	; 0x0e
    9912:	5f 87       	std	Y+15, r21	; 0x0f
    9914:	68 8b       	std	Y+16, r22	; 0x10
    9916:	79 8b       	std	Y+17, r23	; 0x11
    9918:	8e 80       	ldd	r8, Y+6	; 0x06
    991a:	9f 80       	ldd	r9, Y+7	; 0x07
    991c:	a8 84       	ldd	r10, Y+8	; 0x08
    991e:	b9 84       	ldd	r11, Y+9	; 0x09
    9920:	81 14       	cp	r8, r1
    9922:	91 04       	cpc	r9, r1
    9924:	a1 04       	cpc	r10, r1
    9926:	b1 04       	cpc	r11, r1
    9928:	51 f5       	brne	.+84     	; 0x997e <dir_sdi+0xaa>
    992a:	f8 01       	movw	r30, r16
    992c:	80 81       	ld	r24, Z
    992e:	83 30       	cpi	r24, 0x03	; 3
    9930:	40 f0       	brcs	.+16     	; 0x9942 <dir_sdi+0x6e>
    9932:	81 a5       	ldd	r24, Z+41	; 0x29
    9934:	92 a5       	ldd	r25, Z+42	; 0x2a
    9936:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9938:	b4 a5       	ldd	r27, Z+44	; 0x2c
    993a:	00 97       	sbiw	r24, 0x00	; 0
    993c:	a1 05       	cpc	r26, r1
    993e:	b1 05       	cpc	r27, r1
    9940:	e1 f4       	brne	.+56     	; 0x997a <dir_sdi+0xa6>
    9942:	f8 01       	movw	r30, r16
    9944:	87 81       	ldd	r24, Z+7	; 0x07
    9946:	90 85       	ldd	r25, Z+8	; 0x08
    9948:	a0 e0       	ldi	r26, 0x00	; 0
    994a:	b0 e0       	ldi	r27, 0x00	; 0
    994c:	b7 01       	movw	r22, r14
    994e:	a6 01       	movw	r20, r12
    9950:	25 e0       	ldi	r18, 0x05	; 5
    9952:	76 95       	lsr	r23
    9954:	67 95       	ror	r22
    9956:	57 95       	ror	r21
    9958:	47 95       	ror	r20
    995a:	2a 95       	dec	r18
    995c:	d1 f7       	brne	.-12     	; 0x9952 <dir_sdi+0x7e>
    995e:	48 17       	cp	r20, r24
    9960:	59 07       	cpc	r21, r25
    9962:	6a 07       	cpc	r22, r26
    9964:	7b 07       	cpc	r23, r27
    9966:	28 f6       	brcc	.-118    	; 0x98f2 <dir_sdi+0x1e>
    9968:	81 a5       	ldd	r24, Z+41	; 0x29
    996a:	92 a5       	ldd	r25, Z+42	; 0x2a
    996c:	a3 a5       	ldd	r26, Z+43	; 0x2b
    996e:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9970:	8e 8b       	std	Y+22, r24	; 0x16
    9972:	9f 8b       	std	Y+23, r25	; 0x17
    9974:	a8 8f       	std	Y+24, r26	; 0x18
    9976:	b9 8f       	std	Y+25, r27	; 0x19
    9978:	3d c0       	rjmp	.+122    	; 0x99f4 <dir_sdi+0x120>
    997a:	4c 01       	movw	r8, r24
    997c:	5d 01       	movw	r10, r26
    997e:	f8 01       	movw	r30, r16
    9980:	41 84       	ldd	r4, Z+9	; 0x09
    9982:	52 84       	ldd	r5, Z+10	; 0x0a
    9984:	61 2c       	mov	r6, r1
    9986:	71 2c       	mov	r7, r1
    9988:	39 e0       	ldi	r19, 0x09	; 9
    998a:	44 0c       	add	r4, r4
    998c:	55 1c       	adc	r5, r5
    998e:	66 1c       	adc	r6, r6
    9990:	77 1c       	adc	r7, r7
    9992:	3a 95       	dec	r19
    9994:	d1 f7       	brne	.-12     	; 0x998a <dir_sdi+0xb6>
    9996:	b5 01       	movw	r22, r10
    9998:	a4 01       	movw	r20, r8
    999a:	c4 14       	cp	r12, r4
    999c:	d5 04       	cpc	r13, r5
    999e:	e6 04       	cpc	r14, r6
    99a0:	f7 04       	cpc	r15, r7
    99a2:	10 f1       	brcs	.+68     	; 0x99e8 <dir_sdi+0x114>
    99a4:	88 81       	ld	r24, Y
    99a6:	99 81       	ldd	r25, Y+1	; 0x01
    99a8:	e2 de       	rcall	.-572    	; 0x976e <get_fat.isra.7>
    99aa:	4b 01       	movw	r8, r22
    99ac:	5c 01       	movw	r10, r24
    99ae:	6f 3f       	cpi	r22, 0xFF	; 255
    99b0:	7f 4f       	sbci	r23, 0xFF	; 255
    99b2:	8f 4f       	sbci	r24, 0xFF	; 255
    99b4:	9f 4f       	sbci	r25, 0xFF	; 255
    99b6:	09 f4       	brne	.+2      	; 0x99ba <dir_sdi+0xe6>
    99b8:	46 c0       	rjmp	.+140    	; 0x9a46 <dir_sdi+0x172>
    99ba:	82 e0       	ldi	r24, 0x02	; 2
    99bc:	88 16       	cp	r8, r24
    99be:	91 04       	cpc	r9, r1
    99c0:	a1 04       	cpc	r10, r1
    99c2:	b1 04       	cpc	r11, r1
    99c4:	08 f4       	brcc	.+2      	; 0x99c8 <dir_sdi+0xf4>
    99c6:	95 cf       	rjmp	.-214    	; 0x98f2 <dir_sdi+0x1e>
    99c8:	f8 01       	movw	r30, r16
    99ca:	81 8d       	ldd	r24, Z+25	; 0x19
    99cc:	92 8d       	ldd	r25, Z+26	; 0x1a
    99ce:	a3 8d       	ldd	r26, Z+27	; 0x1b
    99d0:	b4 8d       	ldd	r27, Z+28	; 0x1c
    99d2:	88 16       	cp	r8, r24
    99d4:	99 06       	cpc	r9, r25
    99d6:	aa 06       	cpc	r10, r26
    99d8:	bb 06       	cpc	r11, r27
    99da:	08 f0       	brcs	.+2      	; 0x99de <dir_sdi+0x10a>
    99dc:	8a cf       	rjmp	.-236    	; 0x98f2 <dir_sdi+0x1e>
    99de:	c4 18       	sub	r12, r4
    99e0:	d5 08       	sbc	r13, r5
    99e2:	e6 08       	sbc	r14, r6
    99e4:	f7 08       	sbc	r15, r7
    99e6:	d7 cf       	rjmp	.-82     	; 0x9996 <dir_sdi+0xc2>
    99e8:	c8 01       	movw	r24, r16
    99ea:	e8 d8       	rcall	.-3632   	; 0x8bbc <clust2sect>
    99ec:	6e 8b       	std	Y+22, r22	; 0x16
    99ee:	7f 8b       	std	Y+23, r23	; 0x17
    99f0:	88 8f       	std	Y+24, r24	; 0x18
    99f2:	99 8f       	std	Y+25, r25	; 0x19
    99f4:	8a 8a       	std	Y+18, r8	; 0x12
    99f6:	9b 8a       	std	Y+19, r9	; 0x13
    99f8:	ac 8a       	std	Y+20, r10	; 0x14
    99fa:	bd 8a       	std	Y+21, r11	; 0x15
    99fc:	8e 89       	ldd	r24, Y+22	; 0x16
    99fe:	9f 89       	ldd	r25, Y+23	; 0x17
    9a00:	a8 8d       	ldd	r26, Y+24	; 0x18
    9a02:	b9 8d       	ldd	r27, Y+25	; 0x19
    9a04:	00 97       	sbiw	r24, 0x00	; 0
    9a06:	a1 05       	cpc	r26, r1
    9a08:	b1 05       	cpc	r27, r1
    9a0a:	09 f4       	brne	.+2      	; 0x9a0e <dir_sdi+0x13a>
    9a0c:	72 cf       	rjmp	.-284    	; 0x98f2 <dir_sdi+0x1e>
    9a0e:	b7 01       	movw	r22, r14
    9a10:	a6 01       	movw	r20, r12
    9a12:	29 e0       	ldi	r18, 0x09	; 9
    9a14:	76 95       	lsr	r23
    9a16:	67 95       	ror	r22
    9a18:	57 95       	ror	r21
    9a1a:	47 95       	ror	r20
    9a1c:	2a 95       	dec	r18
    9a1e:	d1 f7       	brne	.-12     	; 0x9a14 <dir_sdi+0x140>
    9a20:	84 0f       	add	r24, r20
    9a22:	95 1f       	adc	r25, r21
    9a24:	a6 1f       	adc	r26, r22
    9a26:	b7 1f       	adc	r27, r23
    9a28:	8e 8b       	std	Y+22, r24	; 0x16
    9a2a:	9f 8b       	std	Y+23, r25	; 0x17
    9a2c:	a8 8f       	std	Y+24, r26	; 0x18
    9a2e:	b9 8f       	std	Y+25, r27	; 0x19
    9a30:	0b 5c       	subi	r16, 0xCB	; 203
    9a32:	1f 4f       	sbci	r17, 0xFF	; 255
    9a34:	f1 e0       	ldi	r31, 0x01	; 1
    9a36:	df 22       	and	r13, r31
    9a38:	c0 0e       	add	r12, r16
    9a3a:	d1 1e       	adc	r13, r17
    9a3c:	db 8e       	std	Y+27, r13	; 0x1b
    9a3e:	ca 8e       	std	Y+26, r12	; 0x1a
    9a40:	80 e0       	ldi	r24, 0x00	; 0
    9a42:	90 e0       	ldi	r25, 0x00	; 0
    9a44:	02 c0       	rjmp	.+4      	; 0x9a4a <dir_sdi+0x176>
    9a46:	81 e0       	ldi	r24, 0x01	; 1
    9a48:	90 e0       	ldi	r25, 0x00	; 0
    9a4a:	cd b7       	in	r28, 0x3d	; 61
    9a4c:	de b7       	in	r29, 0x3e	; 62
    9a4e:	e0 e1       	ldi	r30, 0x10	; 16
    9a50:	0c 94 ad e9 	jmp	0x1d35a	; 0x1d35a <__epilogue_restores__+0x4>

00009a54 <create_chain>:
    9a54:	a0 e0       	ldi	r26, 0x00	; 0
    9a56:	b0 e0       	ldi	r27, 0x00	; 0
    9a58:	e0 e3       	ldi	r30, 0x30	; 48
    9a5a:	fd e4       	ldi	r31, 0x4D	; 77
    9a5c:	0c 94 91 e9 	jmp	0x1d322	; 0x1d322 <__prologue_saves__+0x4>
    9a60:	8c 01       	movw	r16, r24
    9a62:	2a 01       	movw	r4, r20
    9a64:	3b 01       	movw	r6, r22
    9a66:	fc 01       	movw	r30, r24
    9a68:	c0 81       	ld	r28, Z
    9a6a:	d1 81       	ldd	r29, Z+1	; 0x01
    9a6c:	41 15       	cp	r20, r1
    9a6e:	51 05       	cpc	r21, r1
    9a70:	61 05       	cpc	r22, r1
    9a72:	71 05       	cpc	r23, r1
    9a74:	99 f4       	brne	.+38     	; 0x9a9c <create_chain+0x48>
    9a76:	8d 84       	ldd	r8, Y+13	; 0x0d
    9a78:	9e 84       	ldd	r9, Y+14	; 0x0e
    9a7a:	af 84       	ldd	r10, Y+15	; 0x0f
    9a7c:	b8 88       	ldd	r11, Y+16	; 0x10
    9a7e:	81 14       	cp	r8, r1
    9a80:	91 04       	cpc	r9, r1
    9a82:	a1 04       	cpc	r10, r1
    9a84:	b1 04       	cpc	r11, r1
    9a86:	51 f1       	breq	.+84     	; 0x9adc <create_chain+0x88>
    9a88:	89 8d       	ldd	r24, Y+25	; 0x19
    9a8a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9a8c:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9a8e:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9a90:	88 16       	cp	r8, r24
    9a92:	99 06       	cpc	r9, r25
    9a94:	aa 06       	cpc	r10, r26
    9a96:	bb 06       	cpc	r11, r27
    9a98:	28 f1       	brcs	.+74     	; 0x9ae4 <create_chain+0x90>
    9a9a:	20 c0       	rjmp	.+64     	; 0x9adc <create_chain+0x88>
    9a9c:	ce 01       	movw	r24, r28
    9a9e:	67 de       	rcall	.-818    	; 0x976e <get_fat.isra.7>
    9aa0:	62 30       	cpi	r22, 0x02	; 2
    9aa2:	71 05       	cpc	r23, r1
    9aa4:	81 05       	cpc	r24, r1
    9aa6:	91 05       	cpc	r25, r1
    9aa8:	08 f4       	brcc	.+2      	; 0x9aac <create_chain+0x58>
    9aaa:	95 c0       	rjmp	.+298    	; 0x9bd6 <create_chain+0x182>
    9aac:	6f 3f       	cpi	r22, 0xFF	; 255
    9aae:	ff ef       	ldi	r31, 0xFF	; 255
    9ab0:	7f 07       	cpc	r23, r31
    9ab2:	8f 07       	cpc	r24, r31
    9ab4:	9f 07       	cpc	r25, r31
    9ab6:	29 f4       	brne	.+10     	; 0x9ac2 <create_chain+0x6e>
    9ab8:	4f ef       	ldi	r20, 0xFF	; 255
    9aba:	3f ef       	ldi	r19, 0xFF	; 255
    9abc:	2f ef       	ldi	r18, 0xFF	; 255
    9abe:	9f ef       	ldi	r25, 0xFF	; 255
    9ac0:	92 c0       	rjmp	.+292    	; 0x9be6 <create_chain+0x192>
    9ac2:	c9 8c       	ldd	r12, Y+25	; 0x19
    9ac4:	da 8c       	ldd	r13, Y+26	; 0x1a
    9ac6:	eb 8c       	ldd	r14, Y+27	; 0x1b
    9ac8:	fc 8c       	ldd	r15, Y+28	; 0x1c
    9aca:	6c 15       	cp	r22, r12
    9acc:	7d 05       	cpc	r23, r13
    9ace:	8e 05       	cpc	r24, r14
    9ad0:	9f 05       	cpc	r25, r15
    9ad2:	08 f4       	brcc	.+2      	; 0x9ad6 <create_chain+0x82>
    9ad4:	85 c0       	rjmp	.+266    	; 0x9be0 <create_chain+0x18c>
    9ad6:	53 01       	movw	r10, r6
    9ad8:	42 01       	movw	r8, r4
    9ada:	04 c0       	rjmp	.+8      	; 0x9ae4 <create_chain+0x90>
    9adc:	81 2c       	mov	r8, r1
    9ade:	91 2c       	mov	r9, r1
    9ae0:	54 01       	movw	r10, r8
    9ae2:	83 94       	inc	r8
    9ae4:	75 01       	movw	r14, r10
    9ae6:	64 01       	movw	r12, r8
    9ae8:	2f ef       	ldi	r18, 0xFF	; 255
    9aea:	c2 1a       	sub	r12, r18
    9aec:	d2 0a       	sbc	r13, r18
    9aee:	e2 0a       	sbc	r14, r18
    9af0:	f2 0a       	sbc	r15, r18
    9af2:	89 8d       	ldd	r24, Y+25	; 0x19
    9af4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9af6:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9af8:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9afa:	c8 16       	cp	r12, r24
    9afc:	d9 06       	cpc	r13, r25
    9afe:	ea 06       	cpc	r14, r26
    9b00:	fb 06       	cpc	r15, r27
    9b02:	68 f0       	brcs	.+26     	; 0x9b1e <create_chain+0xca>
    9b04:	82 e0       	ldi	r24, 0x02	; 2
    9b06:	88 16       	cp	r8, r24
    9b08:	91 04       	cpc	r9, r1
    9b0a:	a1 04       	cpc	r10, r1
    9b0c:	b1 04       	cpc	r11, r1
    9b0e:	10 f4       	brcc	.+4      	; 0x9b14 <create_chain+0xc0>
    9b10:	40 e0       	ldi	r20, 0x00	; 0
    9b12:	62 c0       	rjmp	.+196    	; 0x9bd8 <create_chain+0x184>
    9b14:	82 e0       	ldi	r24, 0x02	; 2
    9b16:	c8 2e       	mov	r12, r24
    9b18:	d1 2c       	mov	r13, r1
    9b1a:	e1 2c       	mov	r14, r1
    9b1c:	f1 2c       	mov	r15, r1
    9b1e:	b7 01       	movw	r22, r14
    9b20:	a6 01       	movw	r20, r12
    9b22:	f8 01       	movw	r30, r16
    9b24:	80 81       	ld	r24, Z
    9b26:	91 81       	ldd	r25, Z+1	; 0x01
    9b28:	22 de       	rcall	.-956    	; 0x976e <get_fat.isra.7>
    9b2a:	61 15       	cp	r22, r1
    9b2c:	71 05       	cpc	r23, r1
    9b2e:	81 05       	cpc	r24, r1
    9b30:	91 05       	cpc	r25, r1
    9b32:	91 f0       	breq	.+36     	; 0x9b58 <create_chain+0x104>
    9b34:	61 30       	cpi	r22, 0x01	; 1
    9b36:	71 05       	cpc	r23, r1
    9b38:	81 05       	cpc	r24, r1
    9b3a:	91 05       	cpc	r25, r1
    9b3c:	09 f4       	brne	.+2      	; 0x9b40 <create_chain+0xec>
    9b3e:	4b c0       	rjmp	.+150    	; 0x9bd6 <create_chain+0x182>
    9b40:	6f 3f       	cpi	r22, 0xFF	; 255
    9b42:	7f 4f       	sbci	r23, 0xFF	; 255
    9b44:	8f 4f       	sbci	r24, 0xFF	; 255
    9b46:	9f 4f       	sbci	r25, 0xFF	; 255
    9b48:	09 f4       	brne	.+2      	; 0x9b4c <create_chain+0xf8>
    9b4a:	b6 cf       	rjmp	.-148    	; 0x9ab8 <create_chain+0x64>
    9b4c:	c8 14       	cp	r12, r8
    9b4e:	d9 04       	cpc	r13, r9
    9b50:	ea 04       	cpc	r14, r10
    9b52:	fb 04       	cpc	r15, r11
    9b54:	49 f6       	brne	.-110    	; 0x9ae8 <create_chain+0x94>
    9b56:	dc cf       	rjmp	.-72     	; 0x9b10 <create_chain+0xbc>
    9b58:	0f ef       	ldi	r16, 0xFF	; 255
    9b5a:	1f ef       	ldi	r17, 0xFF	; 255
    9b5c:	98 01       	movw	r18, r16
    9b5e:	b7 01       	movw	r22, r14
    9b60:	a6 01       	movw	r20, r12
    9b62:	ce 01       	movw	r24, r28
    9b64:	07 dd       	rcall	.-1522   	; 0x9574 <put_fat>
    9b66:	00 97       	sbiw	r24, 0x00	; 0
    9b68:	99 f5       	brne	.+102    	; 0x9bd0 <create_chain+0x17c>
    9b6a:	41 14       	cp	r4, r1
    9b6c:	51 04       	cpc	r5, r1
    9b6e:	61 04       	cpc	r6, r1
    9b70:	71 04       	cpc	r7, r1
    9b72:	e9 f4       	brne	.+58     	; 0x9bae <create_chain+0x15a>
    9b74:	cd 86       	std	Y+13, r12	; 0x0d
    9b76:	de 86       	std	Y+14, r13	; 0x0e
    9b78:	ef 86       	std	Y+15, r14	; 0x0f
    9b7a:	f8 8a       	std	Y+16, r15	; 0x10
    9b7c:	89 89       	ldd	r24, Y+17	; 0x11
    9b7e:	9a 89       	ldd	r25, Y+18	; 0x12
    9b80:	ab 89       	ldd	r26, Y+19	; 0x13
    9b82:	bc 89       	ldd	r27, Y+20	; 0x14
    9b84:	49 8d       	ldd	r20, Y+25	; 0x19
    9b86:	5a 8d       	ldd	r21, Y+26	; 0x1a
    9b88:	6b 8d       	ldd	r22, Y+27	; 0x1b
    9b8a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    9b8c:	42 50       	subi	r20, 0x02	; 2
    9b8e:	51 09       	sbc	r21, r1
    9b90:	61 09       	sbc	r22, r1
    9b92:	71 09       	sbc	r23, r1
    9b94:	84 17       	cp	r24, r20
    9b96:	95 07       	cpc	r25, r21
    9b98:	a6 07       	cpc	r26, r22
    9b9a:	b7 07       	cpc	r27, r23
    9b9c:	88 f4       	brcc	.+34     	; 0x9bc0 <create_chain+0x16c>
    9b9e:	01 97       	sbiw	r24, 0x01	; 1
    9ba0:	a1 09       	sbc	r26, r1
    9ba2:	b1 09       	sbc	r27, r1
    9ba4:	89 8b       	std	Y+17, r24	; 0x11
    9ba6:	9a 8b       	std	Y+18, r25	; 0x12
    9ba8:	ab 8b       	std	Y+19, r26	; 0x13
    9baa:	bc 8b       	std	Y+20, r27	; 0x14
    9bac:	09 c0       	rjmp	.+18     	; 0x9bc0 <create_chain+0x16c>
    9bae:	97 01       	movw	r18, r14
    9bb0:	86 01       	movw	r16, r12
    9bb2:	b3 01       	movw	r22, r6
    9bb4:	a2 01       	movw	r20, r4
    9bb6:	ce 01       	movw	r24, r28
    9bb8:	dd dc       	rcall	.-1606   	; 0x9574 <put_fat>
    9bba:	00 97       	sbiw	r24, 0x00	; 0
    9bbc:	d9 f2       	breq	.-74     	; 0x9b74 <create_chain+0x120>
    9bbe:	08 c0       	rjmp	.+16     	; 0x9bd0 <create_chain+0x17c>
    9bc0:	8c 81       	ldd	r24, Y+4	; 0x04
    9bc2:	81 60       	ori	r24, 0x01	; 1
    9bc4:	8c 83       	std	Y+4, r24	; 0x04
    9bc6:	4c 2d       	mov	r20, r12
    9bc8:	3d 2d       	mov	r19, r13
    9bca:	2e 2d       	mov	r18, r14
    9bcc:	9f 2d       	mov	r25, r15
    9bce:	0b c0       	rjmp	.+22     	; 0x9be6 <create_chain+0x192>
    9bd0:	01 97       	sbiw	r24, 0x01	; 1
    9bd2:	09 f4       	brne	.+2      	; 0x9bd6 <create_chain+0x182>
    9bd4:	71 cf       	rjmp	.-286    	; 0x9ab8 <create_chain+0x64>
    9bd6:	41 e0       	ldi	r20, 0x01	; 1
    9bd8:	30 e0       	ldi	r19, 0x00	; 0
    9bda:	20 e0       	ldi	r18, 0x00	; 0
    9bdc:	90 e0       	ldi	r25, 0x00	; 0
    9bde:	03 c0       	rjmp	.+6      	; 0x9be6 <create_chain+0x192>
    9be0:	46 2f       	mov	r20, r22
    9be2:	37 2f       	mov	r19, r23
    9be4:	28 2f       	mov	r18, r24
    9be6:	64 2f       	mov	r22, r20
    9be8:	73 2f       	mov	r23, r19
    9bea:	82 2f       	mov	r24, r18
    9bec:	cd b7       	in	r28, 0x3d	; 61
    9bee:	de b7       	in	r29, 0x3e	; 62
    9bf0:	e0 e1       	ldi	r30, 0x10	; 16
    9bf2:	0c 94 ad e9 	jmp	0x1d35a	; 0x1d35a <__epilogue_restores__+0x4>

00009bf6 <remove_chain>:
    9bf6:	4f 92       	push	r4
    9bf8:	5f 92       	push	r5
    9bfa:	6f 92       	push	r6
    9bfc:	7f 92       	push	r7
    9bfe:	af 92       	push	r10
    9c00:	bf 92       	push	r11
    9c02:	cf 92       	push	r12
    9c04:	df 92       	push	r13
    9c06:	ef 92       	push	r14
    9c08:	ff 92       	push	r15
    9c0a:	0f 93       	push	r16
    9c0c:	1f 93       	push	r17
    9c0e:	cf 93       	push	r28
    9c10:	df 93       	push	r29
    9c12:	5c 01       	movw	r10, r24
    9c14:	6a 01       	movw	r12, r20
    9c16:	7b 01       	movw	r14, r22
    9c18:	b9 01       	movw	r22, r18
    9c1a:	a8 01       	movw	r20, r16
    9c1c:	22 e0       	ldi	r18, 0x02	; 2
    9c1e:	c2 16       	cp	r12, r18
    9c20:	d1 04       	cpc	r13, r1
    9c22:	e1 04       	cpc	r14, r1
    9c24:	f1 04       	cpc	r15, r1
    9c26:	10 f4       	brcc	.+4      	; 0x9c2c <remove_chain+0x36>
    9c28:	22 e0       	ldi	r18, 0x02	; 2
    9c2a:	27 c0       	rjmp	.+78     	; 0x9c7a <remove_chain+0x84>
    9c2c:	fc 01       	movw	r30, r24
    9c2e:	c0 81       	ld	r28, Z
    9c30:	d1 81       	ldd	r29, Z+1	; 0x01
    9c32:	89 8d       	ldd	r24, Y+25	; 0x19
    9c34:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9c36:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9c38:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9c3a:	c8 16       	cp	r12, r24
    9c3c:	d9 06       	cpc	r13, r25
    9c3e:	ea 06       	cpc	r14, r26
    9c40:	fb 06       	cpc	r15, r27
    9c42:	90 f7       	brcc	.-28     	; 0x9c28 <remove_chain+0x32>
    9c44:	41 15       	cp	r20, r1
    9c46:	51 05       	cpc	r21, r1
    9c48:	61 05       	cpc	r22, r1
    9c4a:	71 05       	cpc	r23, r1
    9c4c:	41 f0       	breq	.+16     	; 0x9c5e <remove_chain+0x68>
    9c4e:	0f ef       	ldi	r16, 0xFF	; 255
    9c50:	1f ef       	ldi	r17, 0xFF	; 255
    9c52:	98 01       	movw	r18, r16
    9c54:	ce 01       	movw	r24, r28
    9c56:	8e dc       	rcall	.-1764   	; 0x9574 <put_fat>
    9c58:	00 97       	sbiw	r24, 0x00	; 0
    9c5a:	09 f0       	breq	.+2      	; 0x9c5e <remove_chain+0x68>
    9c5c:	4c c0       	rjmp	.+152    	; 0x9cf6 <remove_chain+0x100>
    9c5e:	b7 01       	movw	r22, r14
    9c60:	a6 01       	movw	r20, r12
    9c62:	f5 01       	movw	r30, r10
    9c64:	80 81       	ld	r24, Z
    9c66:	91 81       	ldd	r25, Z+1	; 0x01
    9c68:	82 dd       	rcall	.-1276   	; 0x976e <get_fat.isra.7>
    9c6a:	2b 01       	movw	r4, r22
    9c6c:	3c 01       	movw	r6, r24
    9c6e:	61 15       	cp	r22, r1
    9c70:	71 05       	cpc	r23, r1
    9c72:	81 05       	cpc	r24, r1
    9c74:	91 05       	cpc	r25, r1
    9c76:	19 f4       	brne	.+6      	; 0x9c7e <remove_chain+0x88>
    9c78:	20 e0       	ldi	r18, 0x00	; 0
    9c7a:	90 e0       	ldi	r25, 0x00	; 0
    9c7c:	3d c0       	rjmp	.+122    	; 0x9cf8 <remove_chain+0x102>
    9c7e:	61 30       	cpi	r22, 0x01	; 1
    9c80:	71 05       	cpc	r23, r1
    9c82:	81 05       	cpc	r24, r1
    9c84:	91 05       	cpc	r25, r1
    9c86:	81 f2       	breq	.-96     	; 0x9c28 <remove_chain+0x32>
    9c88:	6f 3f       	cpi	r22, 0xFF	; 255
    9c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    9c8c:	8f 4f       	sbci	r24, 0xFF	; 255
    9c8e:	9f 4f       	sbci	r25, 0xFF	; 255
    9c90:	81 f1       	breq	.+96     	; 0x9cf2 <remove_chain+0xfc>
    9c92:	00 e0       	ldi	r16, 0x00	; 0
    9c94:	10 e0       	ldi	r17, 0x00	; 0
    9c96:	98 01       	movw	r18, r16
    9c98:	b7 01       	movw	r22, r14
    9c9a:	a6 01       	movw	r20, r12
    9c9c:	ce 01       	movw	r24, r28
    9c9e:	6a dc       	rcall	.-1836   	; 0x9574 <put_fat>
    9ca0:	00 97       	sbiw	r24, 0x00	; 0
    9ca2:	49 f5       	brne	.+82     	; 0x9cf6 <remove_chain+0x100>
    9ca4:	89 89       	ldd	r24, Y+17	; 0x11
    9ca6:	9a 89       	ldd	r25, Y+18	; 0x12
    9ca8:	ab 89       	ldd	r26, Y+19	; 0x13
    9caa:	bc 89       	ldd	r27, Y+20	; 0x14
    9cac:	49 8d       	ldd	r20, Y+25	; 0x19
    9cae:	5a 8d       	ldd	r21, Y+26	; 0x1a
    9cb0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    9cb2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    9cb4:	6a 01       	movw	r12, r20
    9cb6:	7b 01       	movw	r14, r22
    9cb8:	e2 e0       	ldi	r30, 0x02	; 2
    9cba:	ce 1a       	sub	r12, r30
    9cbc:	d1 08       	sbc	r13, r1
    9cbe:	e1 08       	sbc	r14, r1
    9cc0:	f1 08       	sbc	r15, r1
    9cc2:	8c 15       	cp	r24, r12
    9cc4:	9d 05       	cpc	r25, r13
    9cc6:	ae 05       	cpc	r26, r14
    9cc8:	bf 05       	cpc	r27, r15
    9cca:	50 f4       	brcc	.+20     	; 0x9ce0 <remove_chain+0xea>
    9ccc:	01 96       	adiw	r24, 0x01	; 1
    9cce:	a1 1d       	adc	r26, r1
    9cd0:	b1 1d       	adc	r27, r1
    9cd2:	89 8b       	std	Y+17, r24	; 0x11
    9cd4:	9a 8b       	std	Y+18, r25	; 0x12
    9cd6:	ab 8b       	std	Y+19, r26	; 0x13
    9cd8:	bc 8b       	std	Y+20, r27	; 0x14
    9cda:	8c 81       	ldd	r24, Y+4	; 0x04
    9cdc:	81 60       	ori	r24, 0x01	; 1
    9cde:	8c 83       	std	Y+4, r24	; 0x04
    9ce0:	73 01       	movw	r14, r6
    9ce2:	62 01       	movw	r12, r4
    9ce4:	44 16       	cp	r4, r20
    9ce6:	55 06       	cpc	r5, r21
    9ce8:	66 06       	cpc	r6, r22
    9cea:	77 06       	cpc	r7, r23
    9cec:	08 f4       	brcc	.+2      	; 0x9cf0 <remove_chain+0xfa>
    9cee:	b7 cf       	rjmp	.-146    	; 0x9c5e <remove_chain+0x68>
    9cf0:	c3 cf       	rjmp	.-122    	; 0x9c78 <remove_chain+0x82>
    9cf2:	21 e0       	ldi	r18, 0x01	; 1
    9cf4:	c2 cf       	rjmp	.-124    	; 0x9c7a <remove_chain+0x84>
    9cf6:	28 2f       	mov	r18, r24
    9cf8:	82 2f       	mov	r24, r18
    9cfa:	df 91       	pop	r29
    9cfc:	cf 91       	pop	r28
    9cfe:	1f 91       	pop	r17
    9d00:	0f 91       	pop	r16
    9d02:	ff 90       	pop	r15
    9d04:	ef 90       	pop	r14
    9d06:	df 90       	pop	r13
    9d08:	cf 90       	pop	r12
    9d0a:	bf 90       	pop	r11
    9d0c:	af 90       	pop	r10
    9d0e:	7f 90       	pop	r7
    9d10:	6f 90       	pop	r6
    9d12:	5f 90       	pop	r5
    9d14:	4f 90       	pop	r4
    9d16:	08 95       	ret

00009d18 <get_fileinfo>:
    9d18:	a0 e0       	ldi	r26, 0x00	; 0
    9d1a:	b0 e0       	ldi	r27, 0x00	; 0
    9d1c:	e2 e9       	ldi	r30, 0x92	; 146
    9d1e:	fe e4       	ldi	r31, 0x4E	; 78
    9d20:	0c 94 97 e9 	jmp	0x1d32e	; 0x1d32e <__prologue_saves__+0x10>
    9d24:	dc 01       	movw	r26, r24
    9d26:	cd 90       	ld	r12, X+
    9d28:	dc 90       	ld	r13, X
    9d2a:	11 97       	sbiw	r26, 0x01	; 1
    9d2c:	fb 01       	movw	r30, r22
    9d2e:	16 8a       	std	Z+22, r1	; 0x16
    9d30:	56 96       	adiw	r26, 0x16	; 22
    9d32:	0d 91       	ld	r16, X+
    9d34:	1d 91       	ld	r17, X+
    9d36:	2d 91       	ld	r18, X+
    9d38:	3c 91       	ld	r19, X
    9d3a:	59 97       	sbiw	r26, 0x19	; 25
    9d3c:	01 15       	cp	r16, r1
    9d3e:	11 05       	cpc	r17, r1
    9d40:	21 05       	cpc	r18, r1
    9d42:	31 05       	cpc	r19, r1
    9d44:	09 f4       	brne	.+2      	; 0x9d48 <get_fileinfo+0x30>
    9d46:	bb c0       	rjmp	.+374    	; 0x9ebe <get_fileinfo+0x1a6>
    9d48:	eb 01       	movw	r28, r22
    9d4a:	8c 01       	movw	r16, r24
    9d4c:	fc 01       	movw	r30, r24
    9d4e:	80 a5       	ldd	r24, Z+40	; 0x28
    9d50:	91 a5       	ldd	r25, Z+41	; 0x29
    9d52:	a2 a5       	ldd	r26, Z+42	; 0x2a
    9d54:	b3 a5       	ldd	r27, Z+43	; 0x2b
    9d56:	8f 3f       	cpi	r24, 0xFF	; 255
    9d58:	9f 4f       	sbci	r25, 0xFF	; 255
    9d5a:	af 4f       	sbci	r26, 0xFF	; 255
    9d5c:	bf 4f       	sbci	r27, 0xFF	; 255
    9d5e:	59 f1       	breq	.+86     	; 0x9db6 <get_fileinfo+0x9e>
    9d60:	5b 01       	movw	r10, r22
    9d62:	26 e1       	ldi	r18, 0x16	; 22
    9d64:	a2 0e       	add	r10, r18
    9d66:	b1 1c       	adc	r11, r1
    9d68:	e1 2c       	mov	r14, r1
    9d6a:	f1 2c       	mov	r15, r1
    9d6c:	d6 01       	movw	r26, r12
    9d6e:	1b 96       	adiw	r26, 0x0b	; 11
    9d70:	ed 91       	ld	r30, X+
    9d72:	fc 91       	ld	r31, X
    9d74:	1c 97       	sbiw	r26, 0x0c	; 12
    9d76:	c7 01       	movw	r24, r14
    9d78:	88 0f       	add	r24, r24
    9d7a:	99 1f       	adc	r25, r25
    9d7c:	e8 0f       	add	r30, r24
    9d7e:	f9 1f       	adc	r31, r25
    9d80:	80 81       	ld	r24, Z
    9d82:	91 81       	ldd	r25, Z+1	; 0x01
    9d84:	00 97       	sbiw	r24, 0x00	; 0
    9d86:	99 f0       	breq	.+38     	; 0x9dae <get_fileinfo+0x96>
    9d88:	60 e0       	ldi	r22, 0x00	; 0
    9d8a:	70 e0       	ldi	r23, 0x00	; 0
    9d8c:	0e 94 65 6c 	call	0xd8ca	; 0xd8ca <ff_convert>
    9d90:	00 97       	sbiw	r24, 0x00	; 0
    9d92:	59 f0       	breq	.+22     	; 0x9daa <get_fileinfo+0x92>
    9d94:	af ef       	ldi	r26, 0xFF	; 255
    9d96:	ea 16       	cp	r14, r26
    9d98:	f1 04       	cpc	r15, r1
    9d9a:	39 f0       	breq	.+14     	; 0x9daa <get_fileinfo+0x92>
    9d9c:	bf ef       	ldi	r27, 0xFF	; 255
    9d9e:	eb 1a       	sub	r14, r27
    9da0:	fb 0a       	sbc	r15, r27
    9da2:	f5 01       	movw	r30, r10
    9da4:	81 93       	st	Z+, r24
    9da6:	5f 01       	movw	r10, r30
    9da8:	e1 cf       	rjmp	.-62     	; 0x9d6c <get_fileinfo+0x54>
    9daa:	e1 2c       	mov	r14, r1
    9dac:	f1 2c       	mov	r15, r1
    9dae:	fe 01       	movw	r30, r28
    9db0:	ee 0d       	add	r30, r14
    9db2:	ff 1d       	adc	r31, r15
    9db4:	16 8a       	std	Z+22, r1	; 0x16
    9db6:	4e 89       	ldd	r20, Y+22	; 0x16
    9db8:	50 e0       	ldi	r21, 0x00	; 0
    9dba:	20 e0       	ldi	r18, 0x00	; 0
    9dbc:	30 e0       	ldi	r19, 0x00	; 0
    9dbe:	80 e0       	ldi	r24, 0x00	; 0
    9dc0:	90 e0       	ldi	r25, 0x00	; 0
    9dc2:	6e e2       	ldi	r22, 0x2E	; 46
    9dc4:	d6 2e       	mov	r13, r22
    9dc6:	fc 01       	movw	r30, r24
    9dc8:	31 96       	adiw	r30, 0x01	; 1
    9dca:	d8 01       	movw	r26, r16
    9dcc:	5a 96       	adiw	r26, 0x1a	; 26
    9dce:	6d 91       	ld	r22, X+
    9dd0:	7c 91       	ld	r23, X
    9dd2:	5b 97       	sbiw	r26, 0x1b	; 27
    9dd4:	db 01       	movw	r26, r22
    9dd6:	a8 0f       	add	r26, r24
    9dd8:	b9 1f       	adc	r27, r25
    9dda:	8c 91       	ld	r24, X
    9ddc:	80 32       	cpi	r24, 0x20	; 32
    9dde:	e1 f1       	breq	.+120    	; 0x9e58 <get_fileinfo+0x140>
    9de0:	85 30       	cpi	r24, 0x05	; 5
    9de2:	09 f4       	brne	.+2      	; 0x9de6 <get_fileinfo+0xce>
    9de4:	85 ee       	ldi	r24, 0xE5	; 229
    9de6:	e9 30       	cpi	r30, 0x09	; 9
    9de8:	f1 05       	cpc	r31, r1
    9dea:	69 f4       	brne	.+26     	; 0x9e06 <get_fileinfo+0xee>
    9dec:	de 01       	movw	r26, r28
    9dee:	a2 0f       	add	r26, r18
    9df0:	b3 1f       	adc	r27, r19
    9df2:	41 15       	cp	r20, r1
    9df4:	51 05       	cpc	r21, r1
    9df6:	19 f4       	brne	.+6      	; 0x9dfe <get_fileinfo+0xe6>
    9df8:	56 96       	adiw	r26, 0x16	; 22
    9dfa:	dc 92       	st	X, r13
    9dfc:	56 97       	sbiw	r26, 0x16	; 22
    9dfe:	19 96       	adiw	r26, 0x09	; 9
    9e00:	dc 92       	st	X, r13
    9e02:	2f 5f       	subi	r18, 0xFF	; 255
    9e04:	3f 4f       	sbci	r19, 0xFF	; 255
    9e06:	7e 01       	movw	r14, r28
    9e08:	e2 0e       	add	r14, r18
    9e0a:	f3 1e       	adc	r15, r19
    9e0c:	d7 01       	movw	r26, r14
    9e0e:	19 96       	adiw	r26, 0x09	; 9
    9e10:	8c 93       	st	X, r24
    9e12:	41 15       	cp	r20, r1
    9e14:	51 05       	cpc	r21, r1
    9e16:	f1 f4       	brne	.+60     	; 0x9e54 <get_fileinfo+0x13c>
    9e18:	9f eb       	ldi	r25, 0xBF	; 191
    9e1a:	98 0f       	add	r25, r24
    9e1c:	9a 31       	cpi	r25, 0x1A	; 26
    9e1e:	b8 f4       	brcc	.+46     	; 0x9e4e <get_fileinfo+0x136>
    9e20:	d8 01       	movw	r26, r16
    9e22:	5a 96       	adiw	r26, 0x1a	; 26
    9e24:	6d 91       	ld	r22, X+
    9e26:	7c 91       	ld	r23, X
    9e28:	5b 97       	sbiw	r26, 0x1b	; 27
    9e2a:	db 01       	movw	r26, r22
    9e2c:	1c 96       	adiw	r26, 0x0c	; 12
    9e2e:	6c 91       	ld	r22, X
    9e30:	a6 2f       	mov	r26, r22
    9e32:	b0 e0       	ldi	r27, 0x00	; 0
    9e34:	e9 30       	cpi	r30, 0x09	; 9
    9e36:	f1 05       	cpc	r31, r1
    9e38:	18 f4       	brcc	.+6      	; 0x9e40 <get_fileinfo+0x128>
    9e3a:	68 e0       	ldi	r22, 0x08	; 8
    9e3c:	70 e0       	ldi	r23, 0x00	; 0
    9e3e:	02 c0       	rjmp	.+4      	; 0x9e44 <get_fileinfo+0x12c>
    9e40:	60 e1       	ldi	r22, 0x10	; 16
    9e42:	70 e0       	ldi	r23, 0x00	; 0
    9e44:	6a 23       	and	r22, r26
    9e46:	7b 23       	and	r23, r27
    9e48:	67 2b       	or	r22, r23
    9e4a:	09 f0       	breq	.+2      	; 0x9e4e <get_fileinfo+0x136>
    9e4c:	80 5e       	subi	r24, 0xE0	; 224
    9e4e:	d7 01       	movw	r26, r14
    9e50:	56 96       	adiw	r26, 0x16	; 22
    9e52:	8c 93       	st	X, r24
    9e54:	2f 5f       	subi	r18, 0xFF	; 255
    9e56:	3f 4f       	sbci	r19, 0xFF	; 255
    9e58:	cf 01       	movw	r24, r30
    9e5a:	3b 97       	sbiw	r30, 0x0b	; 11
    9e5c:	09 f0       	breq	.+2      	; 0x9e60 <get_fileinfo+0x148>
    9e5e:	b3 cf       	rjmp	.-154    	; 0x9dc6 <get_fileinfo+0xae>
    9e60:	45 2b       	or	r20, r21
    9e62:	71 f4       	brne	.+28     	; 0x9e80 <get_fileinfo+0x168>
    9e64:	fe 01       	movw	r30, r28
    9e66:	e2 0f       	add	r30, r18
    9e68:	f3 1f       	adc	r31, r19
    9e6a:	16 8a       	std	Z+22, r1	; 0x16
    9e6c:	d8 01       	movw	r26, r16
    9e6e:	5a 96       	adiw	r26, 0x1a	; 26
    9e70:	ed 91       	ld	r30, X+
    9e72:	fc 91       	ld	r31, X
    9e74:	5b 97       	sbiw	r26, 0x1b	; 27
    9e76:	84 85       	ldd	r24, Z+12	; 0x0c
    9e78:	81 11       	cpse	r24, r1
    9e7a:	02 c0       	rjmp	.+4      	; 0x9e80 <get_fileinfo+0x168>
    9e7c:	20 e0       	ldi	r18, 0x00	; 0
    9e7e:	30 e0       	ldi	r19, 0x00	; 0
    9e80:	fe 01       	movw	r30, r28
    9e82:	e2 0f       	add	r30, r18
    9e84:	f3 1f       	adc	r31, r19
    9e86:	11 86       	std	Z+9, r1	; 0x09
    9e88:	d8 01       	movw	r26, r16
    9e8a:	5a 96       	adiw	r26, 0x1a	; 26
    9e8c:	ed 91       	ld	r30, X+
    9e8e:	fc 91       	ld	r31, X
    9e90:	5b 97       	sbiw	r26, 0x1b	; 27
    9e92:	83 85       	ldd	r24, Z+11	; 0x0b
    9e94:	88 87       	std	Y+8, r24	; 0x08
    9e96:	5a 96       	adiw	r26, 0x1a	; 26
    9e98:	0d 91       	ld	r16, X+
    9e9a:	1c 91       	ld	r17, X
    9e9c:	5b 97       	sbiw	r26, 0x1b	; 27
    9e9e:	c8 01       	movw	r24, r16
    9ea0:	4c 96       	adiw	r24, 0x1c	; 28
    9ea2:	0e 94 ba 45 	call	0x8b74	; 0x8b74 <ld_dword>
    9ea6:	68 83       	st	Y, r22
    9ea8:	79 83       	std	Y+1, r23	; 0x01
    9eaa:	8a 83       	std	Y+2, r24	; 0x02
    9eac:	9b 83       	std	Y+3, r25	; 0x03
    9eae:	c8 01       	movw	r24, r16
    9eb0:	46 96       	adiw	r24, 0x16	; 22
    9eb2:	0e 94 ba 45 	call	0x8b74	; 0x8b74 <ld_dword>
    9eb6:	7f 83       	std	Y+7, r23	; 0x07
    9eb8:	6e 83       	std	Y+6, r22	; 0x06
    9eba:	9d 83       	std	Y+5, r25	; 0x05
    9ebc:	8c 83       	std	Y+4, r24	; 0x04
    9ebe:	cd b7       	in	r28, 0x3d	; 61
    9ec0:	de b7       	in	r29, 0x3e	; 62
    9ec2:	ea e0       	ldi	r30, 0x0A	; 10
    9ec4:	0c 94 b3 e9 	jmp	0x1d366	; 0x1d366 <__epilogue_restores__+0x10>

00009ec8 <dir_next>:
    9ec8:	4f 92       	push	r4
    9eca:	5f 92       	push	r5
    9ecc:	6f 92       	push	r6
    9ece:	7f 92       	push	r7
    9ed0:	9f 92       	push	r9
    9ed2:	af 92       	push	r10
    9ed4:	bf 92       	push	r11
    9ed6:	cf 92       	push	r12
    9ed8:	df 92       	push	r13
    9eda:	ef 92       	push	r14
    9edc:	ff 92       	push	r15
    9ede:	0f 93       	push	r16
    9ee0:	1f 93       	push	r17
    9ee2:	cf 93       	push	r28
    9ee4:	df 93       	push	r29
    9ee6:	5b 01       	movw	r10, r22
    9ee8:	fc 01       	movw	r30, r24
    9eea:	46 89       	ldd	r20, Z+22	; 0x16
    9eec:	57 89       	ldd	r21, Z+23	; 0x17
    9eee:	60 8d       	ldd	r22, Z+24	; 0x18
    9ef0:	71 8d       	ldd	r23, Z+25	; 0x19
    9ef2:	41 15       	cp	r20, r1
    9ef4:	51 05       	cpc	r21, r1
    9ef6:	61 05       	cpc	r22, r1
    9ef8:	71 05       	cpc	r23, r1
    9efa:	09 f4       	brne	.+2      	; 0x9efe <dir_next+0x36>
    9efc:	f8 c0       	rjmp	.+496    	; 0xa0ee <dir_next+0x226>
    9efe:	c6 84       	ldd	r12, Z+14	; 0x0e
    9f00:	d7 84       	ldd	r13, Z+15	; 0x0f
    9f02:	e0 88       	ldd	r14, Z+16	; 0x10
    9f04:	f1 88       	ldd	r15, Z+17	; 0x11
    9f06:	f0 e2       	ldi	r31, 0x20	; 32
    9f08:	cf 0e       	add	r12, r31
    9f0a:	d1 1c       	adc	r13, r1
    9f0c:	e1 1c       	adc	r14, r1
    9f0e:	f1 1c       	adc	r15, r1
    9f10:	c1 14       	cp	r12, r1
    9f12:	d1 04       	cpc	r13, r1
    9f14:	20 e2       	ldi	r18, 0x20	; 32
    9f16:	e2 06       	cpc	r14, r18
    9f18:	f1 04       	cpc	r15, r1
    9f1a:	08 f0       	brcs	.+2      	; 0x9f1e <dir_next+0x56>
    9f1c:	e8 c0       	rjmp	.+464    	; 0xa0ee <dir_next+0x226>
    9f1e:	8c 01       	movw	r16, r24
    9f20:	fc 01       	movw	r30, r24
    9f22:	c0 81       	ld	r28, Z
    9f24:	d1 81       	ldd	r29, Z+1	; 0x01
    9f26:	d7 01       	movw	r26, r14
    9f28:	c6 01       	movw	r24, r12
    9f2a:	91 70       	andi	r25, 0x01	; 1
    9f2c:	aa 27       	eor	r26, r26
    9f2e:	bb 27       	eor	r27, r27
    9f30:	89 2b       	or	r24, r25
    9f32:	8a 2b       	or	r24, r26
    9f34:	8b 2b       	or	r24, r27
    9f36:	09 f0       	breq	.+2      	; 0x9f3a <dir_next+0x72>
    9f38:	ca c0       	rjmp	.+404    	; 0xa0ce <dir_next+0x206>
    9f3a:	4f 5f       	subi	r20, 0xFF	; 255
    9f3c:	5f 4f       	sbci	r21, 0xFF	; 255
    9f3e:	6f 4f       	sbci	r22, 0xFF	; 255
    9f40:	7f 4f       	sbci	r23, 0xFF	; 255
    9f42:	46 8b       	std	Z+22, r20	; 0x16
    9f44:	57 8b       	std	Z+23, r21	; 0x17
    9f46:	60 8f       	std	Z+24, r22	; 0x18
    9f48:	71 8f       	std	Z+25, r23	; 0x19
    9f4a:	42 89       	ldd	r20, Z+18	; 0x12
    9f4c:	53 89       	ldd	r21, Z+19	; 0x13
    9f4e:	64 89       	ldd	r22, Z+20	; 0x14
    9f50:	75 89       	ldd	r23, Z+21	; 0x15
    9f52:	41 15       	cp	r20, r1
    9f54:	51 05       	cpc	r21, r1
    9f56:	61 05       	cpc	r22, r1
    9f58:	71 05       	cpc	r23, r1
    9f5a:	c9 f4       	brne	.+50     	; 0x9f8e <dir_next+0xc6>
    9f5c:	8f 81       	ldd	r24, Y+7	; 0x07
    9f5e:	98 85       	ldd	r25, Y+8	; 0x08
    9f60:	a0 e0       	ldi	r26, 0x00	; 0
    9f62:	b0 e0       	ldi	r27, 0x00	; 0
    9f64:	b7 01       	movw	r22, r14
    9f66:	a6 01       	movw	r20, r12
    9f68:	35 e0       	ldi	r19, 0x05	; 5
    9f6a:	76 95       	lsr	r23
    9f6c:	67 95       	ror	r22
    9f6e:	57 95       	ror	r21
    9f70:	47 95       	ror	r20
    9f72:	3a 95       	dec	r19
    9f74:	d1 f7       	brne	.-12     	; 0x9f6a <dir_next+0xa2>
    9f76:	48 17       	cp	r20, r24
    9f78:	59 07       	cpc	r21, r25
    9f7a:	6a 07       	cpc	r22, r26
    9f7c:	7b 07       	cpc	r23, r27
    9f7e:	08 f4       	brcc	.+2      	; 0x9f82 <dir_next+0xba>
    9f80:	a6 c0       	rjmp	.+332    	; 0xa0ce <dir_next+0x206>
    9f82:	f8 01       	movw	r30, r16
    9f84:	16 8a       	std	Z+22, r1	; 0x16
    9f86:	17 8a       	std	Z+23, r1	; 0x17
    9f88:	10 8e       	std	Z+24, r1	; 0x18
    9f8a:	11 8e       	std	Z+25, r1	; 0x19
    9f8c:	b0 c0       	rjmp	.+352    	; 0xa0ee <dir_next+0x226>
    9f8e:	89 85       	ldd	r24, Y+9	; 0x09
    9f90:	9a 85       	ldd	r25, Y+10	; 0x0a
    9f92:	01 97       	sbiw	r24, 0x01	; 1
    9f94:	a0 e0       	ldi	r26, 0x00	; 0
    9f96:	b0 e0       	ldi	r27, 0x00	; 0
    9f98:	26 01       	movw	r4, r12
    9f9a:	37 01       	movw	r6, r14
    9f9c:	29 e0       	ldi	r18, 0x09	; 9
    9f9e:	76 94       	lsr	r7
    9fa0:	67 94       	ror	r6
    9fa2:	57 94       	ror	r5
    9fa4:	47 94       	ror	r4
    9fa6:	2a 95       	dec	r18
    9fa8:	d1 f7       	brne	.-12     	; 0x9f9e <dir_next+0xd6>
    9faa:	84 21       	and	r24, r4
    9fac:	95 21       	and	r25, r5
    9fae:	a6 21       	and	r26, r6
    9fb0:	b7 21       	and	r27, r7
    9fb2:	89 2b       	or	r24, r25
    9fb4:	8a 2b       	or	r24, r26
    9fb6:	8b 2b       	or	r24, r27
    9fb8:	09 f0       	breq	.+2      	; 0x9fbc <dir_next+0xf4>
    9fba:	89 c0       	rjmp	.+274    	; 0xa0ce <dir_next+0x206>
    9fbc:	ce 01       	movw	r24, r28
    9fbe:	d7 db       	rcall	.-2130   	; 0x976e <get_fat.isra.7>
    9fc0:	2b 01       	movw	r4, r22
    9fc2:	3c 01       	movw	r6, r24
    9fc4:	62 30       	cpi	r22, 0x02	; 2
    9fc6:	71 05       	cpc	r23, r1
    9fc8:	81 05       	cpc	r24, r1
    9fca:	91 05       	cpc	r25, r1
    9fcc:	18 f4       	brcc	.+6      	; 0x9fd4 <dir_next+0x10c>
    9fce:	82 e0       	ldi	r24, 0x02	; 2
    9fd0:	90 e0       	ldi	r25, 0x00	; 0
    9fd2:	92 c0       	rjmp	.+292    	; 0xa0f8 <dir_next+0x230>
    9fd4:	6f 3f       	cpi	r22, 0xFF	; 255
    9fd6:	7f 4f       	sbci	r23, 0xFF	; 255
    9fd8:	8f 4f       	sbci	r24, 0xFF	; 255
    9fda:	9f 4f       	sbci	r25, 0xFF	; 255
    9fdc:	19 f4       	brne	.+6      	; 0x9fe4 <dir_next+0x11c>
    9fde:	81 e0       	ldi	r24, 0x01	; 1
    9fe0:	90 e0       	ldi	r25, 0x00	; 0
    9fe2:	8a c0       	rjmp	.+276    	; 0xa0f8 <dir_next+0x230>
    9fe4:	89 8d       	ldd	r24, Y+25	; 0x19
    9fe6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9fe8:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9fea:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9fec:	48 16       	cp	r4, r24
    9fee:	59 06       	cpc	r5, r25
    9ff0:	6a 06       	cpc	r6, r26
    9ff2:	7b 06       	cpc	r7, r27
    9ff4:	08 f4       	brcc	.+2      	; 0x9ff8 <dir_next+0x130>
    9ff6:	5c c0       	rjmp	.+184    	; 0xa0b0 <dir_next+0x1e8>
    9ff8:	ab 28       	or	r10, r11
    9ffa:	19 f2       	breq	.-122    	; 0x9f82 <dir_next+0xba>
    9ffc:	f8 01       	movw	r30, r16
    9ffe:	42 89       	ldd	r20, Z+18	; 0x12
    a000:	53 89       	ldd	r21, Z+19	; 0x13
    a002:	64 89       	ldd	r22, Z+20	; 0x14
    a004:	75 89       	ldd	r23, Z+21	; 0x15
    a006:	c8 01       	movw	r24, r16
    a008:	25 dd       	rcall	.-1462   	; 0x9a54 <create_chain>
    a00a:	2b 01       	movw	r4, r22
    a00c:	3c 01       	movw	r6, r24
    a00e:	61 15       	cp	r22, r1
    a010:	71 05       	cpc	r23, r1
    a012:	81 05       	cpc	r24, r1
    a014:	91 05       	cpc	r25, r1
    a016:	09 f4       	brne	.+2      	; 0xa01a <dir_next+0x152>
    a018:	6d c0       	rjmp	.+218    	; 0xa0f4 <dir_next+0x22c>
    a01a:	61 30       	cpi	r22, 0x01	; 1
    a01c:	71 05       	cpc	r23, r1
    a01e:	81 05       	cpc	r24, r1
    a020:	91 05       	cpc	r25, r1
    a022:	a9 f2       	breq	.-86     	; 0x9fce <dir_next+0x106>
    a024:	6f 3f       	cpi	r22, 0xFF	; 255
    a026:	7f 4f       	sbci	r23, 0xFF	; 255
    a028:	8f 4f       	sbci	r24, 0xFF	; 255
    a02a:	9f 4f       	sbci	r25, 0xFF	; 255
    a02c:	c1 f2       	breq	.-80     	; 0x9fde <dir_next+0x116>
    a02e:	ce 01       	movw	r24, r28
    a030:	0e 94 1c 47 	call	0x8e38	; 0x8e38 <sync_window>
    a034:	89 2b       	or	r24, r25
    a036:	99 f6       	brne	.-90     	; 0x9fde <dir_next+0x116>
    a038:	40 e0       	ldi	r20, 0x00	; 0
    a03a:	52 e0       	ldi	r21, 0x02	; 2
    a03c:	60 e0       	ldi	r22, 0x00	; 0
    a03e:	70 e0       	ldi	r23, 0x00	; 0
    a040:	ce 01       	movw	r24, r28
    a042:	c5 96       	adiw	r24, 0x35	; 53
    a044:	0e 94 d5 45 	call	0x8baa	; 0x8baa <mem_set>
    a048:	b3 01       	movw	r22, r6
    a04a:	a2 01       	movw	r20, r4
    a04c:	ce 01       	movw	r24, r28
    a04e:	0e 94 de 45 	call	0x8bbc	; 0x8bbc <clust2sect>
    a052:	69 ab       	std	Y+49, r22	; 0x31
    a054:	7a ab       	std	Y+50, r23	; 0x32
    a056:	8b ab       	std	Y+51, r24	; 0x33
    a058:	9c ab       	std	Y+52, r25	; 0x34
    a05a:	a1 2c       	mov	r10, r1
    a05c:	b1 2c       	mov	r11, r1
    a05e:	99 24       	eor	r9, r9
    a060:	93 94       	inc	r9
    a062:	89 85       	ldd	r24, Y+9	; 0x09
    a064:	9a 85       	ldd	r25, Y+10	; 0x0a
    a066:	a8 16       	cp	r10, r24
    a068:	b9 06       	cpc	r11, r25
    a06a:	b0 f4       	brcc	.+44     	; 0xa098 <dir_next+0x1d0>
    a06c:	9b 82       	std	Y+3, r9	; 0x03
    a06e:	ce 01       	movw	r24, r28
    a070:	0e 94 cb 46 	call	0x8d96	; 0x8d96 <sync_window.part.3>
    a074:	89 2b       	or	r24, r25
    a076:	09 f0       	breq	.+2      	; 0xa07a <dir_next+0x1b2>
    a078:	b2 cf       	rjmp	.-156    	; 0x9fde <dir_next+0x116>
    a07a:	8f ef       	ldi	r24, 0xFF	; 255
    a07c:	a8 1a       	sub	r10, r24
    a07e:	b8 0a       	sbc	r11, r24
    a080:	89 a9       	ldd	r24, Y+49	; 0x31
    a082:	9a a9       	ldd	r25, Y+50	; 0x32
    a084:	ab a9       	ldd	r26, Y+51	; 0x33
    a086:	bc a9       	ldd	r27, Y+52	; 0x34
    a088:	01 96       	adiw	r24, 0x01	; 1
    a08a:	a1 1d       	adc	r26, r1
    a08c:	b1 1d       	adc	r27, r1
    a08e:	89 ab       	std	Y+49, r24	; 0x31
    a090:	9a ab       	std	Y+50, r25	; 0x32
    a092:	ab ab       	std	Y+51, r26	; 0x33
    a094:	bc ab       	std	Y+52, r27	; 0x34
    a096:	e5 cf       	rjmp	.-54     	; 0xa062 <dir_next+0x19a>
    a098:	89 a9       	ldd	r24, Y+49	; 0x31
    a09a:	9a a9       	ldd	r25, Y+50	; 0x32
    a09c:	ab a9       	ldd	r26, Y+51	; 0x33
    a09e:	bc a9       	ldd	r27, Y+52	; 0x34
    a0a0:	8a 19       	sub	r24, r10
    a0a2:	9b 09       	sbc	r25, r11
    a0a4:	a1 09       	sbc	r26, r1
    a0a6:	b1 09       	sbc	r27, r1
    a0a8:	89 ab       	std	Y+49, r24	; 0x31
    a0aa:	9a ab       	std	Y+50, r25	; 0x32
    a0ac:	ab ab       	std	Y+51, r26	; 0x33
    a0ae:	bc ab       	std	Y+52, r27	; 0x34
    a0b0:	f8 01       	movw	r30, r16
    a0b2:	42 8a       	std	Z+18, r4	; 0x12
    a0b4:	53 8a       	std	Z+19, r5	; 0x13
    a0b6:	64 8a       	std	Z+20, r6	; 0x14
    a0b8:	75 8a       	std	Z+21, r7	; 0x15
    a0ba:	b3 01       	movw	r22, r6
    a0bc:	a2 01       	movw	r20, r4
    a0be:	ce 01       	movw	r24, r28
    a0c0:	0e 94 de 45 	call	0x8bbc	; 0x8bbc <clust2sect>
    a0c4:	f8 01       	movw	r30, r16
    a0c6:	66 8b       	std	Z+22, r22	; 0x16
    a0c8:	77 8b       	std	Z+23, r23	; 0x17
    a0ca:	80 8f       	std	Z+24, r24	; 0x18
    a0cc:	91 8f       	std	Z+25, r25	; 0x19
    a0ce:	f8 01       	movw	r30, r16
    a0d0:	c6 86       	std	Z+14, r12	; 0x0e
    a0d2:	d7 86       	std	Z+15, r13	; 0x0f
    a0d4:	e0 8a       	std	Z+16, r14	; 0x10
    a0d6:	f1 8a       	std	Z+17, r15	; 0x11
    a0d8:	ce 01       	movw	r24, r28
    a0da:	c5 96       	adiw	r24, 0x35	; 53
    a0dc:	e6 01       	movw	r28, r12
    a0de:	d1 70       	andi	r29, 0x01	; 1
    a0e0:	c8 0f       	add	r28, r24
    a0e2:	d9 1f       	adc	r29, r25
    a0e4:	d3 8f       	std	Z+27, r29	; 0x1b
    a0e6:	c2 8f       	std	Z+26, r28	; 0x1a
    a0e8:	80 e0       	ldi	r24, 0x00	; 0
    a0ea:	90 e0       	ldi	r25, 0x00	; 0
    a0ec:	05 c0       	rjmp	.+10     	; 0xa0f8 <dir_next+0x230>
    a0ee:	84 e0       	ldi	r24, 0x04	; 4
    a0f0:	90 e0       	ldi	r25, 0x00	; 0
    a0f2:	02 c0       	rjmp	.+4      	; 0xa0f8 <dir_next+0x230>
    a0f4:	87 e0       	ldi	r24, 0x07	; 7
    a0f6:	90 e0       	ldi	r25, 0x00	; 0
    a0f8:	df 91       	pop	r29
    a0fa:	cf 91       	pop	r28
    a0fc:	1f 91       	pop	r17
    a0fe:	0f 91       	pop	r16
    a100:	ff 90       	pop	r15
    a102:	ef 90       	pop	r14
    a104:	df 90       	pop	r13
    a106:	cf 90       	pop	r12
    a108:	bf 90       	pop	r11
    a10a:	af 90       	pop	r10
    a10c:	9f 90       	pop	r9
    a10e:	7f 90       	pop	r7
    a110:	6f 90       	pop	r6
    a112:	5f 90       	pop	r5
    a114:	4f 90       	pop	r4
    a116:	08 95       	ret

0000a118 <dir_alloc>:
    a118:	a0 e0       	ldi	r26, 0x00	; 0
    a11a:	b0 e0       	ldi	r27, 0x00	; 0
    a11c:	e2 e9       	ldi	r30, 0x92	; 146
    a11e:	f0 e5       	ldi	r31, 0x50	; 80
    a120:	0c 94 99 e9 	jmp	0x1d332	; 0x1d332 <__prologue_saves__+0x14>
    a124:	ec 01       	movw	r28, r24
    a126:	6b 01       	movw	r12, r22
    a128:	e8 80       	ld	r14, Y
    a12a:	f9 80       	ldd	r15, Y+1	; 0x01
    a12c:	40 e0       	ldi	r20, 0x00	; 0
    a12e:	50 e0       	ldi	r21, 0x00	; 0
    a130:	ba 01       	movw	r22, r20
    a132:	d0 db       	rcall	.-2144   	; 0x98d4 <dir_sdi>
    a134:	00 97       	sbiw	r24, 0x00	; 0
    a136:	01 f5       	brne	.+64     	; 0xa178 <dir_alloc+0x60>
    a138:	00 e0       	ldi	r16, 0x00	; 0
    a13a:	10 e0       	ldi	r17, 0x00	; 0
    a13c:	4e 89       	ldd	r20, Y+22	; 0x16
    a13e:	5f 89       	ldd	r21, Y+23	; 0x17
    a140:	68 8d       	ldd	r22, Y+24	; 0x18
    a142:	79 8d       	ldd	r23, Y+25	; 0x19
    a144:	c7 01       	movw	r24, r14
    a146:	0e 94 91 47 	call	0x8f22	; 0x8f22 <move_window>
    a14a:	00 97       	sbiw	r24, 0x00	; 0
    a14c:	a9 f4       	brne	.+42     	; 0xa178 <dir_alloc+0x60>
    a14e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a150:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a152:	20 81       	ld	r18, Z
    a154:	25 3e       	cpi	r18, 0xE5	; 229
    a156:	11 f0       	breq	.+4      	; 0xa15c <dir_alloc+0x44>
    a158:	21 11       	cpse	r18, r1
    a15a:	06 c0       	rjmp	.+12     	; 0xa168 <dir_alloc+0x50>
    a15c:	0f 5f       	subi	r16, 0xFF	; 255
    a15e:	1f 4f       	sbci	r17, 0xFF	; 255
    a160:	0c 15       	cp	r16, r12
    a162:	1d 05       	cpc	r17, r13
    a164:	19 f4       	brne	.+6      	; 0xa16c <dir_alloc+0x54>
    a166:	0d c0       	rjmp	.+26     	; 0xa182 <dir_alloc+0x6a>
    a168:	00 e0       	ldi	r16, 0x00	; 0
    a16a:	10 e0       	ldi	r17, 0x00	; 0
    a16c:	61 e0       	ldi	r22, 0x01	; 1
    a16e:	70 e0       	ldi	r23, 0x00	; 0
    a170:	ce 01       	movw	r24, r28
    a172:	aa de       	rcall	.-684    	; 0x9ec8 <dir_next>
    a174:	00 97       	sbiw	r24, 0x00	; 0
    a176:	11 f3       	breq	.-60     	; 0xa13c <dir_alloc+0x24>
    a178:	84 30       	cpi	r24, 0x04	; 4
    a17a:	91 05       	cpc	r25, r1
    a17c:	11 f4       	brne	.+4      	; 0xa182 <dir_alloc+0x6a>
    a17e:	87 e0       	ldi	r24, 0x07	; 7
    a180:	90 e0       	ldi	r25, 0x00	; 0
    a182:	cd b7       	in	r28, 0x3d	; 61
    a184:	de b7       	in	r29, 0x3e	; 62
    a186:	e8 e0       	ldi	r30, 0x08	; 8
    a188:	0c 94 b5 e9 	jmp	0x1d36a	; 0x1d36a <__epilogue_restores__+0x14>

0000a18c <dir_read>:
    a18c:	a0 e0       	ldi	r26, 0x00	; 0
    a18e:	b0 e0       	ldi	r27, 0x00	; 0
    a190:	ec ec       	ldi	r30, 0xCC	; 204
    a192:	f0 e5       	ldi	r31, 0x50	; 80
    a194:	0c 94 93 e9 	jmp	0x1d326	; 0x1d326 <__prologue_saves__+0x8>
    a198:	ec 01       	movw	r28, r24
    a19a:	7b 01       	movw	r14, r22
    a19c:	a8 80       	ld	r10, Y
    a19e:	b9 80       	ldd	r11, Y+1	; 0x01
    a1a0:	dd 24       	eor	r13, r13
    a1a2:	da 94       	dec	r13
    a1a4:	1f ef       	ldi	r17, 0xFF	; 255
    a1a6:	84 e0       	ldi	r24, 0x04	; 4
    a1a8:	90 e0       	ldi	r25, 0x00	; 0
    a1aa:	ad e0       	ldi	r26, 0x0D	; 13
    a1ac:	ca 2e       	mov	r12, r26
    a1ae:	4e 89       	ldd	r20, Y+22	; 0x16
    a1b0:	5f 89       	ldd	r21, Y+23	; 0x17
    a1b2:	68 8d       	ldd	r22, Y+24	; 0x18
    a1b4:	79 8d       	ldd	r23, Y+25	; 0x19
    a1b6:	41 15       	cp	r20, r1
    a1b8:	51 05       	cpc	r21, r1
    a1ba:	61 05       	cpc	r22, r1
    a1bc:	71 05       	cpc	r23, r1
    a1be:	09 f4       	brne	.+2      	; 0xa1c2 <dir_read+0x36>
    a1c0:	9f c0       	rjmp	.+318    	; 0xa300 <dir_read+0x174>
    a1c2:	c5 01       	movw	r24, r10
    a1c4:	0e 94 91 47 	call	0x8f22	; 0x8f22 <move_window>
    a1c8:	00 97       	sbiw	r24, 0x00	; 0
    a1ca:	09 f0       	breq	.+2      	; 0xa1ce <dir_read+0x42>
    a1cc:	9b c0       	rjmp	.+310    	; 0xa304 <dir_read+0x178>
    a1ce:	aa 8d       	ldd	r26, Y+26	; 0x1a
    a1d0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    a1d2:	0c 91       	ld	r16, X
    a1d4:	00 23       	and	r16, r16
    a1d6:	09 f4       	brne	.+2      	; 0xa1da <dir_read+0x4e>
    a1d8:	9d c0       	rjmp	.+314    	; 0xa314 <dir_read+0x188>
    a1da:	1b 96       	adiw	r26, 0x0b	; 11
    a1dc:	8c 91       	ld	r24, X
    a1de:	1b 97       	sbiw	r26, 0x0b	; 11
    a1e0:	8f 73       	andi	r24, 0x3F	; 63
    a1e2:	8c 83       	std	Y+4, r24	; 0x04
    a1e4:	05 3e       	cpi	r16, 0xE5	; 229
    a1e6:	09 f4       	brne	.+2      	; 0xa1ea <dir_read+0x5e>
    a1e8:	82 c0       	rjmp	.+260    	; 0xa2ee <dir_read+0x162>
    a1ea:	0e 32       	cpi	r16, 0x2E	; 46
    a1ec:	09 f4       	brne	.+2      	; 0xa1f0 <dir_read+0x64>
    a1ee:	7f c0       	rjmp	.+254    	; 0xa2ee <dir_read+0x162>
    a1f0:	21 e0       	ldi	r18, 0x01	; 1
    a1f2:	30 e0       	ldi	r19, 0x00	; 0
    a1f4:	98 2f       	mov	r25, r24
    a1f6:	9f 71       	andi	r25, 0x1F	; 31
    a1f8:	98 30       	cpi	r25, 0x08	; 8
    a1fa:	11 f0       	breq	.+4      	; 0xa200 <dir_read+0x74>
    a1fc:	20 e0       	ldi	r18, 0x00	; 0
    a1fe:	30 e0       	ldi	r19, 0x00	; 0
    a200:	2e 15       	cp	r18, r14
    a202:	3f 05       	cpc	r19, r15
    a204:	09 f0       	breq	.+2      	; 0xa208 <dir_read+0x7c>
    a206:	73 c0       	rjmp	.+230    	; 0xa2ee <dir_read+0x162>
    a208:	8f 30       	cpi	r24, 0x0F	; 15
    a20a:	09 f0       	breq	.+2      	; 0xa20e <dir_read+0x82>
    a20c:	60 c0       	rjmp	.+192    	; 0xa2ce <dir_read+0x142>
    a20e:	06 ff       	sbrs	r16, 6
    a210:	0d c0       	rjmp	.+26     	; 0xa22c <dir_read+0xa0>
    a212:	1d 96       	adiw	r26, 0x0d	; 13
    a214:	8c 91       	ld	r24, X
    a216:	1d 97       	sbiw	r26, 0x0d	; 13
    a218:	0f 7b       	andi	r16, 0xBF	; 191
    a21a:	4e 85       	ldd	r20, Y+14	; 0x0e
    a21c:	5f 85       	ldd	r21, Y+15	; 0x0f
    a21e:	68 89       	ldd	r22, Y+16	; 0x10
    a220:	79 89       	ldd	r23, Y+17	; 0x11
    a222:	48 a7       	std	Y+40, r20	; 0x28
    a224:	59 a7       	std	Y+41, r21	; 0x29
    a226:	6a a7       	std	Y+42, r22	; 0x2a
    a228:	7b a7       	std	Y+43, r23	; 0x2b
    a22a:	03 c0       	rjmp	.+6      	; 0xa232 <dir_read+0xa6>
    a22c:	10 13       	cpse	r17, r16
    a22e:	5f c0       	rjmp	.+190    	; 0xa2ee <dir_read+0x162>
    a230:	8d 2d       	mov	r24, r13
    a232:	1d 96       	adiw	r26, 0x0d	; 13
    a234:	dc 90       	ld	r13, X
    a236:	1d 97       	sbiw	r26, 0x0d	; 13
    a238:	d8 12       	cpse	r13, r24
    a23a:	58 c0       	rjmp	.+176    	; 0xa2ec <dir_read+0x160>
    a23c:	5a 96       	adiw	r26, 0x1a	; 26
    a23e:	8d 91       	ld	r24, X+
    a240:	9c 91       	ld	r25, X
    a242:	5b 97       	sbiw	r26, 0x1b	; 27
    a244:	89 2b       	or	r24, r25
    a246:	09 f0       	breq	.+2      	; 0xa24a <dir_read+0xbe>
    a248:	52 c0       	rjmp	.+164    	; 0xa2ee <dir_read+0x162>
    a24a:	f5 01       	movw	r30, r10
    a24c:	63 85       	ldd	r22, Z+11	; 0x0b
    a24e:	74 85       	ldd	r23, Z+12	; 0x0c
    a250:	8c 91       	ld	r24, X
    a252:	8f 73       	andi	r24, 0x3F	; 63
    a254:	90 e0       	ldi	r25, 0x00	; 0
    a256:	01 97       	sbiw	r24, 0x01	; 1
    a258:	c8 9e       	mul	r12, r24
    a25a:	90 01       	movw	r18, r0
    a25c:	c9 9e       	mul	r12, r25
    a25e:	30 0d       	add	r19, r0
    a260:	11 24       	eor	r1, r1
    a262:	f6 e4       	ldi	r31, 0x46	; 70
    a264:	6f 2e       	mov	r6, r31
    a266:	f3 e0       	ldi	r31, 0x03	; 3
    a268:	7f 2e       	mov	r7, r31
    a26a:	41 e0       	ldi	r20, 0x01	; 1
    a26c:	50 e0       	ldi	r21, 0x00	; 0
    a26e:	f3 01       	movw	r30, r6
    a270:	81 91       	ld	r24, Z+
    a272:	3f 01       	movw	r6, r30
    a274:	4d 01       	movw	r8, r26
    a276:	88 0e       	add	r8, r24
    a278:	91 1c       	adc	r9, r1
    a27a:	f4 01       	movw	r30, r8
    a27c:	80 81       	ld	r24, Z
    a27e:	91 81       	ldd	r25, Z+1	; 0x01
    a280:	41 15       	cp	r20, r1
    a282:	51 05       	cpc	r21, r1
    a284:	79 f0       	breq	.+30     	; 0xa2a4 <dir_read+0x118>
    a286:	2f 3f       	cpi	r18, 0xFF	; 255
    a288:	31 05       	cpc	r19, r1
    a28a:	88 f5       	brcc	.+98     	; 0xa2ee <dir_read+0x162>
    a28c:	a9 01       	movw	r20, r18
    a28e:	44 0f       	add	r20, r20
    a290:	55 1f       	adc	r21, r21
    a292:	46 0f       	add	r20, r22
    a294:	57 1f       	adc	r21, r23
    a296:	fa 01       	movw	r30, r20
    a298:	91 83       	std	Z+1, r25	; 0x01
    a29a:	80 83       	st	Z, r24
    a29c:	ac 01       	movw	r20, r24
    a29e:	2f 5f       	subi	r18, 0xFF	; 255
    a2a0:	3f 4f       	sbci	r19, 0xFF	; 255
    a2a2:	02 c0       	rjmp	.+4      	; 0xa2a8 <dir_read+0x11c>
    a2a4:	01 96       	adiw	r24, 0x01	; 1
    a2a6:	19 f5       	brne	.+70     	; 0xa2ee <dir_read+0x162>
    a2a8:	83 e5       	ldi	r24, 0x53	; 83
    a2aa:	68 16       	cp	r6, r24
    a2ac:	83 e0       	ldi	r24, 0x03	; 3
    a2ae:	78 06       	cpc	r7, r24
    a2b0:	f1 f6       	brne	.-68     	; 0xa26e <dir_read+0xe2>
    a2b2:	8c 91       	ld	r24, X
    a2b4:	86 ff       	sbrs	r24, 6
    a2b6:	2b c0       	rjmp	.+86     	; 0xa30e <dir_read+0x182>
    a2b8:	2f 3f       	cpi	r18, 0xFF	; 255
    a2ba:	31 05       	cpc	r19, r1
    a2bc:	c0 f4       	brcc	.+48     	; 0xa2ee <dir_read+0x162>
    a2be:	22 0f       	add	r18, r18
    a2c0:	33 1f       	adc	r19, r19
    a2c2:	fb 01       	movw	r30, r22
    a2c4:	e2 0f       	add	r30, r18
    a2c6:	f3 1f       	adc	r31, r19
    a2c8:	11 82       	std	Z+1, r1	; 0x01
    a2ca:	10 82       	st	Z, r1
    a2cc:	20 c0       	rjmp	.+64     	; 0xa30e <dir_read+0x182>
    a2ce:	11 11       	cpse	r17, r1
    a2d0:	05 c0       	rjmp	.+10     	; 0xa2dc <dir_read+0x150>
    a2d2:	cd 01       	movw	r24, r26
    a2d4:	0e 94 42 46 	call	0x8c84	; 0x8c84 <sum_sfn>
    a2d8:	d8 16       	cp	r13, r24
    a2da:	f9 f0       	breq	.+62     	; 0xa31a <dir_read+0x18e>
    a2dc:	8f ef       	ldi	r24, 0xFF	; 255
    a2de:	9f ef       	ldi	r25, 0xFF	; 255
    a2e0:	dc 01       	movw	r26, r24
    a2e2:	88 a7       	std	Y+40, r24	; 0x28
    a2e4:	99 a7       	std	Y+41, r25	; 0x29
    a2e6:	aa a7       	std	Y+42, r26	; 0x2a
    a2e8:	bb a7       	std	Y+43, r27	; 0x2b
    a2ea:	17 c0       	rjmp	.+46     	; 0xa31a <dir_read+0x18e>
    a2ec:	d8 2e       	mov	r13, r24
    a2ee:	1f ef       	ldi	r17, 0xFF	; 255
    a2f0:	60 e0       	ldi	r22, 0x00	; 0
    a2f2:	70 e0       	ldi	r23, 0x00	; 0
    a2f4:	ce 01       	movw	r24, r28
    a2f6:	e8 dd       	rcall	.-1072   	; 0x9ec8 <dir_next>
    a2f8:	00 97       	sbiw	r24, 0x00	; 0
    a2fa:	09 f4       	brne	.+2      	; 0xa2fe <dir_read+0x172>
    a2fc:	58 cf       	rjmp	.-336    	; 0xa1ae <dir_read+0x22>
    a2fe:	02 c0       	rjmp	.+4      	; 0xa304 <dir_read+0x178>
    a300:	00 97       	sbiw	r24, 0x00	; 0
    a302:	59 f0       	breq	.+22     	; 0xa31a <dir_read+0x18e>
    a304:	1e 8a       	std	Y+22, r1	; 0x16
    a306:	1f 8a       	std	Y+23, r1	; 0x17
    a308:	18 8e       	std	Y+24, r1	; 0x18
    a30a:	19 8e       	std	Y+25, r1	; 0x19
    a30c:	08 c0       	rjmp	.+16     	; 0xa31e <dir_read+0x192>
    a30e:	1f ef       	ldi	r17, 0xFF	; 255
    a310:	10 0f       	add	r17, r16
    a312:	ee cf       	rjmp	.-36     	; 0xa2f0 <dir_read+0x164>
    a314:	84 e0       	ldi	r24, 0x04	; 4
    a316:	90 e0       	ldi	r25, 0x00	; 0
    a318:	f5 cf       	rjmp	.-22     	; 0xa304 <dir_read+0x178>
    a31a:	80 e0       	ldi	r24, 0x00	; 0
    a31c:	90 e0       	ldi	r25, 0x00	; 0
    a31e:	cd b7       	in	r28, 0x3d	; 61
    a320:	de b7       	in	r29, 0x3e	; 62
    a322:	ee e0       	ldi	r30, 0x0E	; 14
    a324:	0c 94 af e9 	jmp	0x1d35e	; 0x1d35e <__epilogue_restores__+0x8>

0000a328 <dir_remove>:
    a328:	a0 e0       	ldi	r26, 0x00	; 0
    a32a:	b0 e0       	ldi	r27, 0x00	; 0
    a32c:	ea e9       	ldi	r30, 0x9A	; 154
    a32e:	f1 e5       	ldi	r31, 0x51	; 81
    a330:	0c 94 97 e9 	jmp	0x1d32e	; 0x1d32e <__prologue_saves__+0x10>
    a334:	ec 01       	movw	r28, r24
    a336:	08 81       	ld	r16, Y
    a338:	19 81       	ldd	r17, Y+1	; 0x01
    a33a:	ce 84       	ldd	r12, Y+14	; 0x0e
    a33c:	df 84       	ldd	r13, Y+15	; 0x0f
    a33e:	e8 88       	ldd	r14, Y+16	; 0x10
    a340:	f9 88       	ldd	r15, Y+17	; 0x11
    a342:	48 a5       	ldd	r20, Y+40	; 0x28
    a344:	59 a5       	ldd	r21, Y+41	; 0x29
    a346:	6a a5       	ldd	r22, Y+42	; 0x2a
    a348:	7b a5       	ldd	r23, Y+43	; 0x2b
    a34a:	4f 3f       	cpi	r20, 0xFF	; 255
    a34c:	8f ef       	ldi	r24, 0xFF	; 255
    a34e:	58 07       	cpc	r21, r24
    a350:	68 07       	cpc	r22, r24
    a352:	78 07       	cpc	r23, r24
    a354:	29 f4       	brne	.+10     	; 0xa360 <dir_remove+0x38>
    a356:	85 ee       	ldi	r24, 0xE5	; 229
    a358:	b8 2e       	mov	r11, r24
    a35a:	aa 24       	eor	r10, r10
    a35c:	a3 94       	inc	r10
    a35e:	19 c0       	rjmp	.+50     	; 0xa392 <dir_remove+0x6a>
    a360:	ce 01       	movw	r24, r28
    a362:	b8 da       	rcall	.-2704   	; 0x98d4 <dir_sdi>
    a364:	00 97       	sbiw	r24, 0x00	; 0
    a366:	19 f5       	brne	.+70     	; 0xa3ae <dir_remove+0x86>
    a368:	f6 cf       	rjmp	.-20     	; 0xa356 <dir_remove+0x2e>
    a36a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a36c:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a36e:	b0 82       	st	Z, r11
    a370:	f8 01       	movw	r30, r16
    a372:	a3 82       	std	Z+3, r10	; 0x03
    a374:	4e 85       	ldd	r20, Y+14	; 0x0e
    a376:	5f 85       	ldd	r21, Y+15	; 0x0f
    a378:	68 89       	ldd	r22, Y+16	; 0x10
    a37a:	79 89       	ldd	r23, Y+17	; 0x11
    a37c:	4c 15       	cp	r20, r12
    a37e:	5d 05       	cpc	r21, r13
    a380:	6e 05       	cpc	r22, r14
    a382:	7f 05       	cpc	r23, r15
    a384:	a0 f4       	brcc	.+40     	; 0xa3ae <dir_remove+0x86>
    a386:	60 e0       	ldi	r22, 0x00	; 0
    a388:	70 e0       	ldi	r23, 0x00	; 0
    a38a:	ce 01       	movw	r24, r28
    a38c:	9d dd       	rcall	.-1222   	; 0x9ec8 <dir_next>
    a38e:	00 97       	sbiw	r24, 0x00	; 0
    a390:	49 f4       	brne	.+18     	; 0xa3a4 <dir_remove+0x7c>
    a392:	4e 89       	ldd	r20, Y+22	; 0x16
    a394:	5f 89       	ldd	r21, Y+23	; 0x17
    a396:	68 8d       	ldd	r22, Y+24	; 0x18
    a398:	79 8d       	ldd	r23, Y+25	; 0x19
    a39a:	c8 01       	movw	r24, r16
    a39c:	0e 94 91 47 	call	0x8f22	; 0x8f22 <move_window>
    a3a0:	00 97       	sbiw	r24, 0x00	; 0
    a3a2:	19 f3       	breq	.-58     	; 0xa36a <dir_remove+0x42>
    a3a4:	84 30       	cpi	r24, 0x04	; 4
    a3a6:	91 05       	cpc	r25, r1
    a3a8:	11 f4       	brne	.+4      	; 0xa3ae <dir_remove+0x86>
    a3aa:	82 e0       	ldi	r24, 0x02	; 2
    a3ac:	90 e0       	ldi	r25, 0x00	; 0
    a3ae:	cd b7       	in	r28, 0x3d	; 61
    a3b0:	de b7       	in	r29, 0x3e	; 62
    a3b2:	ea e0       	ldi	r30, 0x0A	; 10
    a3b4:	0c 94 b3 e9 	jmp	0x1d366	; 0x1d366 <__epilogue_restores__+0x10>

0000a3b8 <dir_find>:
    a3b8:	a8 e0       	ldi	r26, 0x08	; 8
    a3ba:	b0 e0       	ldi	r27, 0x00	; 0
    a3bc:	e2 ee       	ldi	r30, 0xE2	; 226
    a3be:	f1 e5       	ldi	r31, 0x51	; 81
    a3c0:	0c 94 8f e9 	jmp	0x1d31e	; 0x1d31e <__prologue_saves__>
    a3c4:	8c 01       	movw	r16, r24
    a3c6:	dc 01       	movw	r26, r24
    a3c8:	8d 90       	ld	r8, X+
    a3ca:	9c 90       	ld	r9, X
    a3cc:	40 e0       	ldi	r20, 0x00	; 0
    a3ce:	50 e0       	ldi	r21, 0x00	; 0
    a3d0:	ba 01       	movw	r22, r20
    a3d2:	80 da       	rcall	.-2816   	; 0x98d4 <dir_sdi>
    a3d4:	00 97       	sbiw	r24, 0x00	; 0
    a3d6:	09 f0       	breq	.+2      	; 0xa3da <dir_find+0x22>
    a3d8:	f3 c0       	rjmp	.+486    	; 0xa5c0 <dir_find+0x208>
    a3da:	8f ef       	ldi	r24, 0xFF	; 255
    a3dc:	9f ef       	ldi	r25, 0xFF	; 255
    a3de:	dc 01       	movw	r26, r24
    a3e0:	f8 01       	movw	r30, r16
    a3e2:	80 a7       	std	Z+40, r24	; 0x28
    a3e4:	91 a7       	std	Z+41, r25	; 0x29
    a3e6:	a2 a7       	std	Z+42, r26	; 0x2a
    a3e8:	b3 a7       	std	Z+43, r27	; 0x2b
    a3ea:	ee 24       	eor	r14, r14
    a3ec:	ea 94       	dec	r14
    a3ee:	ff 24       	eor	r15, r15
    a3f0:	fa 94       	dec	r15
    a3f2:	44 24       	eor	r4, r4
    a3f4:	4a 94       	dec	r4
    a3f6:	54 2c       	mov	r5, r4
    a3f8:	32 01       	movw	r6, r4
    a3fa:	d8 01       	movw	r26, r16
    a3fc:	56 96       	adiw	r26, 0x16	; 22
    a3fe:	4d 91       	ld	r20, X+
    a400:	5d 91       	ld	r21, X+
    a402:	6d 91       	ld	r22, X+
    a404:	7c 91       	ld	r23, X
    a406:	59 97       	sbiw	r26, 0x19	; 25
    a408:	c4 01       	movw	r24, r8
    a40a:	0e 94 91 47 	call	0x8f22	; 0x8f22 <move_window>
    a40e:	00 97       	sbiw	r24, 0x00	; 0
    a410:	09 f0       	breq	.+2      	; 0xa414 <dir_find+0x5c>
    a412:	d6 c0       	rjmp	.+428    	; 0xa5c0 <dir_find+0x208>
    a414:	f8 01       	movw	r30, r16
    a416:	02 8c       	ldd	r0, Z+26	; 0x1a
    a418:	f3 8d       	ldd	r31, Z+27	; 0x1b
    a41a:	e0 2d       	mov	r30, r0
    a41c:	f8 87       	std	Y+8, r31	; 0x08
    a41e:	ef 83       	std	Y+7, r30	; 0x07
    a420:	30 80       	ld	r3, Z
    a422:	33 20       	and	r3, r3
    a424:	09 f4       	brne	.+2      	; 0xa428 <dir_find+0x70>
    a426:	ce c0       	rjmp	.+412    	; 0xa5c4 <dir_find+0x20c>
    a428:	93 85       	ldd	r25, Z+11	; 0x0b
    a42a:	89 2f       	mov	r24, r25
    a42c:	8f 73       	andi	r24, 0x3F	; 63
    a42e:	d8 01       	movw	r26, r16
    a430:	14 96       	adiw	r26, 0x04	; 4
    a432:	8c 93       	st	X, r24
    a434:	b5 ee       	ldi	r27, 0xE5	; 229
    a436:	3b 16       	cp	r3, r27
    a438:	09 f4       	brne	.+2      	; 0xa43c <dir_find+0x84>
    a43a:	b4 c0       	rjmp	.+360    	; 0xa5a4 <dir_find+0x1ec>
    a43c:	93 ff       	sbrs	r25, 3
    a43e:	04 c0       	rjmp	.+8      	; 0xa448 <dir_find+0x90>
    a440:	8f 30       	cpi	r24, 0x0F	; 15
    a442:	09 f0       	breq	.+2      	; 0xa446 <dir_find+0x8e>
    a444:	af c0       	rjmp	.+350    	; 0xa5a4 <dir_find+0x1ec>
    a446:	03 c0       	rjmp	.+6      	; 0xa44e <dir_find+0x96>
    a448:	8f 30       	cpi	r24, 0x0F	; 15
    a44a:	09 f0       	breq	.+2      	; 0xa44e <dir_find+0x96>
    a44c:	87 c0       	rjmp	.+270    	; 0xa55c <dir_find+0x1a4>
    a44e:	d8 01       	movw	r26, r16
    a450:	97 96       	adiw	r26, 0x27	; 39
    a452:	8c 91       	ld	r24, X
    a454:	97 97       	sbiw	r26, 0x27	; 39
    a456:	86 fd       	sbrc	r24, 6
    a458:	ac c0       	rjmp	.+344    	; 0xa5b2 <dir_find+0x1fa>
    a45a:	36 fe       	sbrs	r3, 6
    a45c:	12 c0       	rjmp	.+36     	; 0xa482 <dir_find+0xca>
    a45e:	ef 81       	ldd	r30, Y+7	; 0x07
    a460:	f8 85       	ldd	r31, Y+8	; 0x08
    a462:	e5 84       	ldd	r14, Z+13	; 0x0d
    a464:	f3 2d       	mov	r31, r3
    a466:	ff 7b       	andi	r31, 0xBF	; 191
    a468:	3f 2e       	mov	r3, r31
    a46a:	1e 96       	adiw	r26, 0x0e	; 14
    a46c:	8d 91       	ld	r24, X+
    a46e:	9d 91       	ld	r25, X+
    a470:	0d 90       	ld	r0, X+
    a472:	bc 91       	ld	r27, X
    a474:	a0 2d       	mov	r26, r0
    a476:	f8 01       	movw	r30, r16
    a478:	80 a7       	std	Z+40, r24	; 0x28
    a47a:	91 a7       	std	Z+41, r25	; 0x29
    a47c:	a2 a7       	std	Z+42, r26	; 0x2a
    a47e:	b3 a7       	std	Z+43, r27	; 0x2b
    a480:	02 c0       	rjmp	.+4      	; 0xa486 <dir_find+0xce>
    a482:	f3 10       	cpse	r15, r3
    a484:	94 c0       	rjmp	.+296    	; 0xa5ae <dir_find+0x1f6>
    a486:	af 81       	ldd	r26, Y+7	; 0x07
    a488:	b8 85       	ldd	r27, Y+8	; 0x08
    a48a:	1d 96       	adiw	r26, 0x0d	; 13
    a48c:	2c 90       	ld	r2, X
    a48e:	1d 97       	sbiw	r26, 0x0d	; 13
    a490:	2e 10       	cpse	r2, r14
    a492:	8d c0       	rjmp	.+282    	; 0xa5ae <dir_find+0x1f6>
    a494:	5a 96       	adiw	r26, 0x1a	; 26
    a496:	8d 91       	ld	r24, X+
    a498:	9c 91       	ld	r25, X
    a49a:	5b 97       	sbiw	r26, 0x1b	; 27
    a49c:	89 2b       	or	r24, r25
    a49e:	09 f0       	breq	.+2      	; 0xa4a2 <dir_find+0xea>
    a4a0:	9b c0       	rjmp	.+310    	; 0xa5d8 <dir_find+0x220>
    a4a2:	f4 01       	movw	r30, r8
    a4a4:	c3 84       	ldd	r12, Z+11	; 0x0b
    a4a6:	d4 84       	ldd	r13, Z+12	; 0x0c
    a4a8:	8c 91       	ld	r24, X
    a4aa:	8f 73       	andi	r24, 0x3F	; 63
    a4ac:	90 e0       	ldi	r25, 0x00	; 0
    a4ae:	01 97       	sbiw	r24, 0x01	; 1
    a4b0:	fd e0       	ldi	r31, 0x0D	; 13
    a4b2:	f8 9f       	mul	r31, r24
    a4b4:	70 01       	movw	r14, r0
    a4b6:	f9 9f       	mul	r31, r25
    a4b8:	f0 0c       	add	r15, r0
    a4ba:	11 24       	eor	r1, r1
    a4bc:	26 e4       	ldi	r18, 0x46	; 70
    a4be:	33 e0       	ldi	r19, 0x03	; 3
    a4c0:	3a 83       	std	Y+2, r19	; 0x02
    a4c2:	29 83       	std	Y+1, r18	; 0x01
    a4c4:	81 e0       	ldi	r24, 0x01	; 1
    a4c6:	90 e0       	ldi	r25, 0x00	; 0
    a4c8:	a9 81       	ldd	r26, Y+1	; 0x01
    a4ca:	ba 81       	ldd	r27, Y+2	; 0x02
    a4cc:	2d 91       	ld	r18, X+
    a4ce:	ba 83       	std	Y+2, r27	; 0x02
    a4d0:	a9 83       	std	Y+1, r26	; 0x01
    a4d2:	ef 81       	ldd	r30, Y+7	; 0x07
    a4d4:	f8 85       	ldd	r31, Y+8	; 0x08
    a4d6:	e2 0f       	add	r30, r18
    a4d8:	f1 1d       	adc	r31, r1
    a4da:	a0 80       	ld	r10, Z
    a4dc:	b1 80       	ldd	r11, Z+1	; 0x01
    a4de:	00 97       	sbiw	r24, 0x00	; 0
    a4e0:	09 f1       	breq	.+66     	; 0xa524 <dir_find+0x16c>
    a4e2:	bf ef       	ldi	r27, 0xFF	; 255
    a4e4:	eb 16       	cp	r14, r27
    a4e6:	f1 04       	cpc	r15, r1
    a4e8:	08 f0       	brcs	.+2      	; 0xa4ec <dir_find+0x134>
    a4ea:	76 c0       	rjmp	.+236    	; 0xa5d8 <dir_find+0x220>
    a4ec:	c5 01       	movw	r24, r10
    a4ee:	0e 94 8c 6c 	call	0xd918	; 0xd918 <ff_wtoupper>
    a4f2:	9c 83       	std	Y+4, r25	; 0x04
    a4f4:	8b 83       	std	Y+3, r24	; 0x03
    a4f6:	f7 01       	movw	r30, r14
    a4f8:	31 96       	adiw	r30, 0x01	; 1
    a4fa:	fe 83       	std	Y+6, r31	; 0x06
    a4fc:	ed 83       	std	Y+5, r30	; 0x05
    a4fe:	ee 0c       	add	r14, r14
    a500:	ff 1c       	adc	r15, r15
    a502:	f6 01       	movw	r30, r12
    a504:	ee 0d       	add	r30, r14
    a506:	ff 1d       	adc	r31, r15
    a508:	80 81       	ld	r24, Z
    a50a:	91 81       	ldd	r25, Z+1	; 0x01
    a50c:	0e 94 8c 6c 	call	0xd918	; 0xd918 <ff_wtoupper>
    a510:	2b 81       	ldd	r18, Y+3	; 0x03
    a512:	3c 81       	ldd	r19, Y+4	; 0x04
    a514:	28 17       	cp	r18, r24
    a516:	39 07       	cpc	r19, r25
    a518:	09 f0       	breq	.+2      	; 0xa51c <dir_find+0x164>
    a51a:	5e c0       	rjmp	.+188    	; 0xa5d8 <dir_find+0x220>
    a51c:	c5 01       	movw	r24, r10
    a51e:	ed 80       	ldd	r14, Y+5	; 0x05
    a520:	fe 80       	ldd	r15, Y+6	; 0x06
    a522:	05 c0       	rjmp	.+10     	; 0xa52e <dir_find+0x176>
    a524:	3f ef       	ldi	r19, 0xFF	; 255
    a526:	a3 16       	cp	r10, r19
    a528:	b3 06       	cpc	r11, r19
    a52a:	09 f0       	breq	.+2      	; 0xa52e <dir_find+0x176>
    a52c:	55 c0       	rjmp	.+170    	; 0xa5d8 <dir_find+0x220>
    a52e:	49 81       	ldd	r20, Y+1	; 0x01
    a530:	5a 81       	ldd	r21, Y+2	; 0x02
    a532:	43 55       	subi	r20, 0x53	; 83
    a534:	53 40       	sbci	r21, 0x03	; 3
    a536:	41 f6       	brne	.-112    	; 0xa4c8 <dir_find+0x110>
    a538:	ef 81       	ldd	r30, Y+7	; 0x07
    a53a:	f8 85       	ldd	r31, Y+8	; 0x08
    a53c:	20 81       	ld	r18, Z
    a53e:	26 ff       	sbrs	r18, 6
    a540:	46 c0       	rjmp	.+140    	; 0xa5ce <dir_find+0x216>
    a542:	89 2b       	or	r24, r25
    a544:	09 f4       	brne	.+2      	; 0xa548 <dir_find+0x190>
    a546:	43 c0       	rjmp	.+134    	; 0xa5ce <dir_find+0x216>
    a548:	ee 0c       	add	r14, r14
    a54a:	ff 1c       	adc	r15, r15
    a54c:	f6 01       	movw	r30, r12
    a54e:	ee 0d       	add	r30, r14
    a550:	ff 1d       	adc	r31, r15
    a552:	80 81       	ld	r24, Z
    a554:	91 81       	ldd	r25, Z+1	; 0x01
    a556:	89 2b       	or	r24, r25
    a558:	d1 f1       	breq	.+116    	; 0xa5ce <dir_find+0x216>
    a55a:	3e c0       	rjmp	.+124    	; 0xa5d8 <dir_find+0x220>
    a55c:	f1 10       	cpse	r15, r1
    a55e:	06 c0       	rjmp	.+12     	; 0xa56c <dir_find+0x1b4>
    a560:	8f 81       	ldd	r24, Y+7	; 0x07
    a562:	98 85       	ldd	r25, Y+8	; 0x08
    a564:	0e 94 42 46 	call	0x8c84	; 0x8c84 <sum_sfn>
    a568:	e8 16       	cp	r14, r24
    a56a:	71 f1       	breq	.+92     	; 0xa5c8 <dir_find+0x210>
    a56c:	d8 01       	movw	r26, r16
    a56e:	97 96       	adiw	r26, 0x27	; 39
    a570:	8c 91       	ld	r24, X
    a572:	80 fd       	sbrc	r24, 0
    a574:	17 c0       	rjmp	.+46     	; 0xa5a4 <dir_find+0x1ec>
    a576:	f8 01       	movw	r30, r16
    a578:	7c 96       	adiw	r30, 0x1c	; 28
    a57a:	2f 81       	ldd	r18, Y+7	; 0x07
    a57c:	38 85       	ldd	r19, Y+8	; 0x08
    a57e:	25 5f       	subi	r18, 0xF5	; 245
    a580:	3f 4f       	sbci	r19, 0xFF	; 255
    a582:	af 81       	ldd	r26, Y+7	; 0x07
    a584:	b8 85       	ldd	r27, Y+8	; 0x08
    a586:	8d 91       	ld	r24, X+
    a588:	b8 87       	std	Y+8, r27	; 0x08
    a58a:	af 83       	std	Y+7, r26	; 0x07
    a58c:	41 91       	ld	r20, Z+
    a58e:	90 e0       	ldi	r25, 0x00	; 0
    a590:	84 1b       	sub	r24, r20
    a592:	91 09       	sbc	r25, r1
    a594:	2a 17       	cp	r18, r26
    a596:	3b 07       	cpc	r19, r27
    a598:	19 f0       	breq	.+6      	; 0xa5a0 <dir_find+0x1e8>
    a59a:	89 2b       	or	r24, r25
    a59c:	91 f3       	breq	.-28     	; 0xa582 <dir_find+0x1ca>
    a59e:	02 c0       	rjmp	.+4      	; 0xa5a4 <dir_find+0x1ec>
    a5a0:	89 2b       	or	r24, r25
    a5a2:	91 f0       	breq	.+36     	; 0xa5c8 <dir_find+0x210>
    a5a4:	f8 01       	movw	r30, r16
    a5a6:	40 a6       	std	Z+40, r4	; 0x28
    a5a8:	51 a6       	std	Z+41, r5	; 0x29
    a5aa:	62 a6       	std	Z+42, r6	; 0x2a
    a5ac:	73 a6       	std	Z+43, r7	; 0x2b
    a5ae:	ff 24       	eor	r15, r15
    a5b0:	fa 94       	dec	r15
    a5b2:	60 e0       	ldi	r22, 0x00	; 0
    a5b4:	70 e0       	ldi	r23, 0x00	; 0
    a5b6:	c8 01       	movw	r24, r16
    a5b8:	87 dc       	rcall	.-1778   	; 0x9ec8 <dir_next>
    a5ba:	00 97       	sbiw	r24, 0x00	; 0
    a5bc:	09 f4       	brne	.+2      	; 0xa5c0 <dir_find+0x208>
    a5be:	1d cf       	rjmp	.-454    	; 0xa3fa <dir_find+0x42>
    a5c0:	28 2f       	mov	r18, r24
    a5c2:	0c c0       	rjmp	.+24     	; 0xa5dc <dir_find+0x224>
    a5c4:	24 e0       	ldi	r18, 0x04	; 4
    a5c6:	01 c0       	rjmp	.+2      	; 0xa5ca <dir_find+0x212>
    a5c8:	20 e0       	ldi	r18, 0x00	; 0
    a5ca:	90 e0       	ldi	r25, 0x00	; 0
    a5cc:	07 c0       	rjmp	.+14     	; 0xa5dc <dir_find+0x224>
    a5ce:	ff 24       	eor	r15, r15
    a5d0:	fa 94       	dec	r15
    a5d2:	f3 0c       	add	r15, r3
    a5d4:	e2 2c       	mov	r14, r2
    a5d6:	ed cf       	rjmp	.-38     	; 0xa5b2 <dir_find+0x1fa>
    a5d8:	e2 2c       	mov	r14, r2
    a5da:	e9 cf       	rjmp	.-46     	; 0xa5ae <dir_find+0x1f6>
    a5dc:	82 2f       	mov	r24, r18
    a5de:	28 96       	adiw	r28, 0x08	; 8
    a5e0:	e2 e1       	ldi	r30, 0x12	; 18
    a5e2:	0c 94 ab e9 	jmp	0x1d356	; 0x1d356 <__epilogue_restores__>

0000a5e6 <dir_register>:
    a5e6:	a6 e1       	ldi	r26, 0x16	; 22
    a5e8:	b0 e0       	ldi	r27, 0x00	; 0
    a5ea:	e9 ef       	ldi	r30, 0xF9	; 249
    a5ec:	f2 e5       	ldi	r31, 0x52	; 82
    a5ee:	0c 94 8f e9 	jmp	0x1d31e	; 0x1d31e <__prologue_saves__>
    a5f2:	dc 01       	movw	r26, r24
    a5f4:	97 96       	adiw	r26, 0x27	; 39
    a5f6:	2c 91       	ld	r18, X
    a5f8:	97 97       	sbiw	r26, 0x27	; 39
    a5fa:	20 7a       	andi	r18, 0xA0	; 160
    a5fc:	09 f0       	breq	.+2      	; 0xa600 <dir_register+0x1a>
    a5fe:	61 c1       	rjmp	.+706    	; 0xa8c2 <dir_register+0x2dc>
    a600:	cd 90       	ld	r12, X+
    a602:	dc 90       	ld	r13, X
    a604:	d6 01       	movw	r26, r12
    a606:	1b 96       	adiw	r26, 0x0b	; 11
    a608:	ed 91       	ld	r30, X+
    a60a:	fc 91       	ld	r31, X
    a60c:	1c 97       	sbiw	r26, 0x0c	; 12
    a60e:	81 2c       	mov	r8, r1
    a610:	91 2c       	mov	r9, r1
    a612:	21 91       	ld	r18, Z+
    a614:	31 91       	ld	r19, Z+
    a616:	23 2b       	or	r18, r19
    a618:	21 f0       	breq	.+8      	; 0xa622 <dir_register+0x3c>
    a61a:	bf ef       	ldi	r27, 0xFF	; 255
    a61c:	8b 1a       	sub	r8, r27
    a61e:	9b 0a       	sbc	r9, r27
    a620:	f8 cf       	rjmp	.-16     	; 0xa612 <dir_register+0x2c>
    a622:	8c 01       	movw	r16, r24
    a624:	5c 01       	movw	r10, r24
    a626:	ec e1       	ldi	r30, 0x1C	; 28
    a628:	ae 0e       	add	r10, r30
    a62a:	b1 1c       	adc	r11, r1
    a62c:	4c e0       	ldi	r20, 0x0C	; 12
    a62e:	50 e0       	ldi	r21, 0x00	; 0
    a630:	b5 01       	movw	r22, r10
    a632:	ce 01       	movw	r24, r28
    a634:	01 96       	adiw	r24, 0x01	; 1
    a636:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <mem_cpy.part.0>
    a63a:	8c 85       	ldd	r24, Y+12	; 0x0c
    a63c:	80 ff       	sbrs	r24, 0
    a63e:	96 c0       	rjmp	.+300    	; 0xa76c <dir_register+0x186>
    a640:	80 e4       	ldi	r24, 0x40	; 64
    a642:	d8 01       	movw	r26, r16
    a644:	97 96       	adiw	r26, 0x27	; 39
    a646:	8c 93       	st	X, r24
    a648:	41 2c       	mov	r4, r1
    a64a:	51 2c       	mov	r5, r1
    a64c:	32 01       	movw	r6, r4
    a64e:	43 94       	inc	r4
    a650:	72 01       	movw	r14, r4
    a652:	f6 01       	movw	r30, r12
    a654:	23 84       	ldd	r2, Z+11	; 0x0b
    a656:	34 84       	ldd	r3, Z+12	; 0x0c
    a658:	4b e0       	ldi	r20, 0x0B	; 11
    a65a:	50 e0       	ldi	r21, 0x00	; 0
    a65c:	be 01       	movw	r22, r28
    a65e:	6f 5f       	subi	r22, 0xFF	; 255
    a660:	7f 4f       	sbci	r23, 0xFF	; 255
    a662:	c5 01       	movw	r24, r10
    a664:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <mem_cpy.part.0>
    a668:	f6 e0       	ldi	r31, 0x06	; 6
    a66a:	4f 16       	cp	r4, r31
    a66c:	51 04       	cpc	r5, r1
    a66e:	18 f1       	brcs	.+70     	; 0xa6b6 <dir_register+0xd0>
    a670:	f1 01       	movw	r30, r2
    a672:	b3 01       	movw	r22, r6
    a674:	a2 01       	movw	r20, r4
    a676:	81 91       	ld	r24, Z+
    a678:	91 91       	ld	r25, Z+
    a67a:	00 97       	sbiw	r24, 0x00	; 0
    a67c:	d9 f0       	breq	.+54     	; 0xa6b4 <dir_register+0xce>
    a67e:	20 e1       	ldi	r18, 0x10	; 16
    a680:	30 e0       	ldi	r19, 0x00	; 0
    a682:	44 0f       	add	r20, r20
    a684:	55 1f       	adc	r21, r21
    a686:	66 1f       	adc	r22, r22
    a688:	77 1f       	adc	r23, r23
    a68a:	dc 01       	movw	r26, r24
    a68c:	a1 70       	andi	r26, 0x01	; 1
    a68e:	bb 27       	eor	r27, r27
    a690:	4a 0f       	add	r20, r26
    a692:	5b 1f       	adc	r21, r27
    a694:	61 1d       	adc	r22, r1
    a696:	71 1d       	adc	r23, r1
    a698:	96 95       	lsr	r25
    a69a:	87 95       	ror	r24
    a69c:	60 ff       	sbrs	r22, 0
    a69e:	06 c0       	rjmp	.+12     	; 0xa6ac <dir_register+0xc6>
    a6a0:	a1 e2       	ldi	r26, 0x21	; 33
    a6a2:	4a 27       	eor	r20, r26
    a6a4:	a0 e1       	ldi	r26, 0x10	; 16
    a6a6:	5a 27       	eor	r21, r26
    a6a8:	a1 e0       	ldi	r26, 0x01	; 1
    a6aa:	6a 27       	eor	r22, r26
    a6ac:	21 50       	subi	r18, 0x01	; 1
    a6ae:	31 09       	sbc	r19, r1
    a6b0:	41 f7       	brne	.-48     	; 0xa682 <dir_register+0x9c>
    a6b2:	e1 cf       	rjmp	.-62     	; 0xa676 <dir_register+0x90>
    a6b4:	7a 01       	movw	r14, r20
    a6b6:	fe 01       	movw	r30, r28
    a6b8:	75 96       	adiw	r30, 0x15	; 21
    a6ba:	27 e0       	ldi	r18, 0x07	; 7
    a6bc:	30 e0       	ldi	r19, 0x00	; 0
    a6be:	9e 2d       	mov	r25, r14
    a6c0:	9f 70       	andi	r25, 0x0F	; 15
    a6c2:	80 e3       	ldi	r24, 0x30	; 48
    a6c4:	89 0f       	add	r24, r25
    a6c6:	8a 33       	cpi	r24, 0x3A	; 58
    a6c8:	10 f0       	brcs	.+4      	; 0xa6ce <dir_register+0xe8>
    a6ca:	87 e3       	ldi	r24, 0x37	; 55
    a6cc:	89 0f       	add	r24, r25
    a6ce:	21 50       	subi	r18, 0x01	; 1
    a6d0:	31 09       	sbc	r19, r1
    a6d2:	82 93       	st	-Z, r24
    a6d4:	a4 e0       	ldi	r26, 0x04	; 4
    a6d6:	f6 94       	lsr	r15
    a6d8:	e7 94       	ror	r14
    a6da:	aa 95       	dec	r26
    a6dc:	e1 f7       	brne	.-8      	; 0xa6d6 <dir_register+0xf0>
    a6de:	e1 14       	cp	r14, r1
    a6e0:	f1 04       	cpc	r15, r1
    a6e2:	69 f7       	brne	.-38     	; 0xa6be <dir_register+0xd8>
    a6e4:	ed e0       	ldi	r30, 0x0D	; 13
    a6e6:	f0 e0       	ldi	r31, 0x00	; 0
    a6e8:	ec 0f       	add	r30, r28
    a6ea:	fd 1f       	adc	r31, r29
    a6ec:	e2 0f       	add	r30, r18
    a6ee:	f3 1f       	adc	r31, r19
    a6f0:	be e7       	ldi	r27, 0x7E	; 126
    a6f2:	b0 83       	st	Z, r27
    a6f4:	f5 01       	movw	r30, r10
    a6f6:	80 e0       	ldi	r24, 0x00	; 0
    a6f8:	90 e0       	ldi	r25, 0x00	; 0
    a6fa:	28 17       	cp	r18, r24
    a6fc:	39 07       	cpc	r19, r25
    a6fe:	29 f0       	breq	.+10     	; 0xa70a <dir_register+0x124>
    a700:	41 91       	ld	r20, Z+
    a702:	40 32       	cpi	r20, 0x20	; 32
    a704:	11 f0       	breq	.+4      	; 0xa70a <dir_register+0x124>
    a706:	01 96       	adiw	r24, 0x01	; 1
    a708:	f8 cf       	rjmp	.-16     	; 0xa6fa <dir_register+0x114>
    a70a:	f5 01       	movw	r30, r10
    a70c:	e8 0f       	add	r30, r24
    a70e:	f9 1f       	adc	r31, r25
    a710:	28 30       	cpi	r18, 0x08	; 8
    a712:	31 05       	cpc	r19, r1
    a714:	50 f4       	brcc	.+20     	; 0xa72a <dir_register+0x144>
    a716:	ad e0       	ldi	r26, 0x0D	; 13
    a718:	b0 e0       	ldi	r27, 0x00	; 0
    a71a:	ac 0f       	add	r26, r28
    a71c:	bd 1f       	adc	r27, r29
    a71e:	a2 0f       	add	r26, r18
    a720:	b3 1f       	adc	r27, r19
    a722:	8c 91       	ld	r24, X
    a724:	2f 5f       	subi	r18, 0xFF	; 255
    a726:	3f 4f       	sbci	r19, 0xFF	; 255
    a728:	01 c0       	rjmp	.+2      	; 0xa72c <dir_register+0x146>
    a72a:	80 e2       	ldi	r24, 0x20	; 32
    a72c:	81 93       	st	Z+, r24
    a72e:	cf 01       	movw	r24, r30
    a730:	8a 19       	sub	r24, r10
    a732:	9b 09       	sbc	r25, r11
    a734:	08 97       	sbiw	r24, 0x08	; 8
    a736:	60 f3       	brcs	.-40     	; 0xa710 <dir_register+0x12a>
    a738:	c8 01       	movw	r24, r16
    a73a:	3e de       	rcall	.-900    	; 0xa3b8 <dir_find>
    a73c:	00 97       	sbiw	r24, 0x00	; 0
    a73e:	71 f4       	brne	.+28     	; 0xa75c <dir_register+0x176>
    a740:	ef ef       	ldi	r30, 0xFF	; 255
    a742:	4e 1a       	sub	r4, r30
    a744:	5e 0a       	sbc	r5, r30
    a746:	6e 0a       	sbc	r6, r30
    a748:	7e 0a       	sbc	r7, r30
    a74a:	f4 e6       	ldi	r31, 0x64	; 100
    a74c:	4f 16       	cp	r4, r31
    a74e:	51 04       	cpc	r5, r1
    a750:	61 04       	cpc	r6, r1
    a752:	71 04       	cpc	r7, r1
    a754:	09 f0       	breq	.+2      	; 0xa758 <dir_register+0x172>
    a756:	7c cf       	rjmp	.-264    	; 0xa650 <dir_register+0x6a>
    a758:	27 e0       	ldi	r18, 0x07	; 7
    a75a:	b4 c0       	rjmp	.+360    	; 0xa8c4 <dir_register+0x2de>
    a75c:	84 30       	cpi	r24, 0x04	; 4
    a75e:	91 05       	cpc	r25, r1
    a760:	09 f0       	breq	.+2      	; 0xa764 <dir_register+0x17e>
    a762:	df c0       	rjmp	.+446    	; 0xa922 <dir_register+0x33c>
    a764:	8c 85       	ldd	r24, Y+12	; 0x0c
    a766:	d8 01       	movw	r26, r16
    a768:	97 96       	adiw	r26, 0x27	; 39
    a76a:	8c 93       	st	X, r24
    a76c:	8c 85       	ldd	r24, Y+12	; 0x0c
    a76e:	81 ff       	sbrs	r24, 1
    a770:	0b c0       	rjmp	.+22     	; 0xa788 <dir_register+0x1a2>
    a772:	c4 01       	movw	r24, r8
    a774:	0c 96       	adiw	r24, 0x0c	; 12
    a776:	6d e0       	ldi	r22, 0x0D	; 13
    a778:	70 e0       	ldi	r23, 0x00	; 0
    a77a:	0e 94 fb e8 	call	0x1d1f6	; 0x1d1f6 <__udivmodhi4>
    a77e:	7b 01       	movw	r14, r22
    a780:	bf ef       	ldi	r27, 0xFF	; 255
    a782:	eb 1a       	sub	r14, r27
    a784:	fb 0a       	sbc	r15, r27
    a786:	03 c0       	rjmp	.+6      	; 0xa78e <dir_register+0x1a8>
    a788:	ee 24       	eor	r14, r14
    a78a:	e3 94       	inc	r14
    a78c:	f1 2c       	mov	r15, r1
    a78e:	b7 01       	movw	r22, r14
    a790:	c8 01       	movw	r24, r16
    a792:	c2 dc       	rcall	.-1660   	; 0xa118 <dir_alloc>
    a794:	00 97       	sbiw	r24, 0x00	; 0
    a796:	09 f0       	breq	.+2      	; 0xa79a <dir_register+0x1b4>
    a798:	c4 c0       	rjmp	.+392    	; 0xa922 <dir_register+0x33c>
    a79a:	e1 e0       	ldi	r30, 0x01	; 1
    a79c:	ee 1a       	sub	r14, r30
    a79e:	f1 08       	sbc	r15, r1
    a7a0:	09 f4       	brne	.+2      	; 0xa7a4 <dir_register+0x1be>
    a7a2:	92 c0       	rjmp	.+292    	; 0xa8c8 <dir_register+0x2e2>
    a7a4:	d8 01       	movw	r26, r16
    a7a6:	1e 96       	adiw	r26, 0x0e	; 14
    a7a8:	4d 91       	ld	r20, X+
    a7aa:	5d 91       	ld	r21, X+
    a7ac:	6d 91       	ld	r22, X+
    a7ae:	7c 91       	ld	r23, X
    a7b0:	51 97       	sbiw	r26, 0x11	; 17
    a7b2:	c7 01       	movw	r24, r14
    a7b4:	e5 e0       	ldi	r30, 0x05	; 5
    a7b6:	88 0f       	add	r24, r24
    a7b8:	99 1f       	adc	r25, r25
    a7ba:	ea 95       	dec	r30
    a7bc:	e1 f7       	brne	.-8      	; 0xa7b6 <dir_register+0x1d0>
    a7be:	48 1b       	sub	r20, r24
    a7c0:	59 0b       	sbc	r21, r25
    a7c2:	61 09       	sbc	r22, r1
    a7c4:	71 09       	sbc	r23, r1
    a7c6:	c8 01       	movw	r24, r16
    a7c8:	85 d8       	rcall	.-3830   	; 0x98d4 <dir_sdi>
    a7ca:	00 97       	sbiw	r24, 0x00	; 0
    a7cc:	09 f0       	breq	.+2      	; 0xa7d0 <dir_register+0x1ea>
    a7ce:	a9 c0       	rjmp	.+338    	; 0xa922 <dir_register+0x33c>
    a7d0:	c5 01       	movw	r24, r10
    a7d2:	0e 94 42 46 	call	0x8c84	; 0x8c84 <sum_sfn>
    a7d6:	68 2e       	mov	r6, r24
    a7d8:	5f e0       	ldi	r21, 0x0F	; 15
    a7da:	35 2e       	mov	r3, r21
    a7dc:	6d e0       	ldi	r22, 0x0D	; 13
    a7de:	46 2e       	mov	r4, r22
    a7e0:	73 e5       	ldi	r23, 0x53	; 83
    a7e2:	87 2e       	mov	r8, r23
    a7e4:	73 e0       	ldi	r23, 0x03	; 3
    a7e6:	97 2e       	mov	r9, r23
    a7e8:	55 24       	eor	r5, r5
    a7ea:	53 94       	inc	r5
    a7ec:	f8 01       	movw	r30, r16
    a7ee:	46 89       	ldd	r20, Z+22	; 0x16
    a7f0:	57 89       	ldd	r21, Z+23	; 0x17
    a7f2:	60 8d       	ldd	r22, Z+24	; 0x18
    a7f4:	71 8d       	ldd	r23, Z+25	; 0x19
    a7f6:	c6 01       	movw	r24, r12
    a7f8:	0e 94 91 47 	call	0x8f22	; 0x8f22 <move_window>
    a7fc:	00 97       	sbiw	r24, 0x00	; 0
    a7fe:	09 f0       	breq	.+2      	; 0xa802 <dir_register+0x21c>
    a800:	90 c0       	rjmp	.+288    	; 0xa922 <dir_register+0x33c>
    a802:	7e 2c       	mov	r7, r14
    a804:	d8 01       	movw	r26, r16
    a806:	5a 96       	adiw	r26, 0x1a	; 26
    a808:	ed 91       	ld	r30, X+
    a80a:	fc 91       	ld	r31, X
    a80c:	5b 97       	sbiw	r26, 0x1b	; 27
    a80e:	d6 01       	movw	r26, r12
    a810:	1b 96       	adiw	r26, 0x0b	; 11
    a812:	6d 91       	ld	r22, X+
    a814:	7c 91       	ld	r23, X
    a816:	1c 97       	sbiw	r26, 0x0c	; 12
    a818:	65 86       	std	Z+13, r6	; 0x0d
    a81a:	33 86       	std	Z+11, r3	; 0x0b
    a81c:	14 86       	std	Z+12, r1	; 0x0c
    a81e:	12 8e       	std	Z+26, r1	; 0x1a
    a820:	13 8e       	std	Z+27, r1	; 0x1b
    a822:	97 01       	movw	r18, r14
    a824:	33 27       	eor	r19, r19
    a826:	21 50       	subi	r18, 0x01	; 1
    a828:	31 09       	sbc	r19, r1
    a82a:	42 9e       	mul	r4, r18
    a82c:	c0 01       	movw	r24, r0
    a82e:	43 9e       	mul	r4, r19
    a830:	90 0d       	add	r25, r0
    a832:	11 24       	eor	r1, r1
    a834:	26 e4       	ldi	r18, 0x46	; 70
    a836:	33 e0       	ldi	r19, 0x03	; 3
    a838:	3e 8b       	std	Y+22, r19	; 0x16
    a83a:	2d 8b       	std	Y+21, r18	; 0x15
    a83c:	20 e0       	ldi	r18, 0x00	; 0
    a83e:	30 e0       	ldi	r19, 0x00	; 0
    a840:	2f 3f       	cpi	r18, 0xFF	; 255
    a842:	4f ef       	ldi	r20, 0xFF	; 255
    a844:	34 07       	cpc	r19, r20
    a846:	49 f0       	breq	.+18     	; 0xa85a <dir_register+0x274>
    a848:	9c 01       	movw	r18, r24
    a84a:	22 0f       	add	r18, r18
    a84c:	33 1f       	adc	r19, r19
    a84e:	26 0f       	add	r18, r22
    a850:	37 1f       	adc	r19, r23
    a852:	d9 01       	movw	r26, r18
    a854:	2d 91       	ld	r18, X+
    a856:	3c 91       	ld	r19, X
    a858:	01 96       	adiw	r24, 0x01	; 1
    a85a:	ad 89       	ldd	r26, Y+21	; 0x15
    a85c:	be 89       	ldd	r27, Y+22	; 0x16
    a85e:	4d 91       	ld	r20, X+
    a860:	be 8b       	std	Y+22, r27	; 0x16
    a862:	ad 8b       	std	Y+21, r26	; 0x15
    a864:	df 01       	movw	r26, r30
    a866:	a4 0f       	add	r26, r20
    a868:	b1 1d       	adc	r27, r1
    a86a:	2c 93       	st	X, r18
    a86c:	11 96       	adiw	r26, 0x01	; 1
    a86e:	3c 93       	st	X, r19
    a870:	21 15       	cp	r18, r1
    a872:	31 05       	cpc	r19, r1
    a874:	11 f4       	brne	.+4      	; 0xa87a <dir_register+0x294>
    a876:	2f ef       	ldi	r18, 0xFF	; 255
    a878:	3f ef       	ldi	r19, 0xFF	; 255
    a87a:	4d 89       	ldd	r20, Y+21	; 0x15
    a87c:	5e 89       	ldd	r21, Y+22	; 0x16
    a87e:	84 16       	cp	r8, r20
    a880:	95 06       	cpc	r9, r21
    a882:	f1 f6       	brne	.-68     	; 0xa840 <dir_register+0x25a>
    a884:	2f 3f       	cpi	r18, 0xFF	; 255
    a886:	3f 4f       	sbci	r19, 0xFF	; 255
    a888:	49 f0       	breq	.+18     	; 0xa89c <dir_register+0x2b6>
    a88a:	88 0f       	add	r24, r24
    a88c:	99 1f       	adc	r25, r25
    a88e:	db 01       	movw	r26, r22
    a890:	a8 0f       	add	r26, r24
    a892:	b9 1f       	adc	r27, r25
    a894:	8d 91       	ld	r24, X+
    a896:	9c 91       	ld	r25, X
    a898:	89 2b       	or	r24, r25
    a89a:	19 f4       	brne	.+6      	; 0xa8a2 <dir_register+0x2bc>
    a89c:	87 2d       	mov	r24, r7
    a89e:	80 64       	ori	r24, 0x40	; 64
    a8a0:	78 2e       	mov	r7, r24
    a8a2:	70 82       	st	Z, r7
    a8a4:	d6 01       	movw	r26, r12
    a8a6:	13 96       	adiw	r26, 0x03	; 3
    a8a8:	5c 92       	st	X, r5
    a8aa:	60 e0       	ldi	r22, 0x00	; 0
    a8ac:	70 e0       	ldi	r23, 0x00	; 0
    a8ae:	c8 01       	movw	r24, r16
    a8b0:	0b db       	rcall	.-2538   	; 0x9ec8 <dir_next>
    a8b2:	00 97       	sbiw	r24, 0x00	; 0
    a8b4:	b1 f5       	brne	.+108    	; 0xa922 <dir_register+0x33c>
    a8b6:	b1 e0       	ldi	r27, 0x01	; 1
    a8b8:	eb 1a       	sub	r14, r27
    a8ba:	f1 08       	sbc	r15, r1
    a8bc:	09 f0       	breq	.+2      	; 0xa8c0 <dir_register+0x2da>
    a8be:	96 cf       	rjmp	.-212    	; 0xa7ec <dir_register+0x206>
    a8c0:	03 c0       	rjmp	.+6      	; 0xa8c8 <dir_register+0x2e2>
    a8c2:	26 e0       	ldi	r18, 0x06	; 6
    a8c4:	90 e0       	ldi	r25, 0x00	; 0
    a8c6:	2e c0       	rjmp	.+92     	; 0xa924 <dir_register+0x33e>
    a8c8:	d8 01       	movw	r26, r16
    a8ca:	56 96       	adiw	r26, 0x16	; 22
    a8cc:	4d 91       	ld	r20, X+
    a8ce:	5d 91       	ld	r21, X+
    a8d0:	6d 91       	ld	r22, X+
    a8d2:	7c 91       	ld	r23, X
    a8d4:	59 97       	sbiw	r26, 0x19	; 25
    a8d6:	c6 01       	movw	r24, r12
    a8d8:	0e 94 91 47 	call	0x8f22	; 0x8f22 <move_window>
    a8dc:	00 97       	sbiw	r24, 0x00	; 0
    a8de:	09 f5       	brne	.+66     	; 0xa922 <dir_register+0x33c>
    a8e0:	40 e2       	ldi	r20, 0x20	; 32
    a8e2:	50 e0       	ldi	r21, 0x00	; 0
    a8e4:	60 e0       	ldi	r22, 0x00	; 0
    a8e6:	70 e0       	ldi	r23, 0x00	; 0
    a8e8:	f8 01       	movw	r30, r16
    a8ea:	82 8d       	ldd	r24, Z+26	; 0x1a
    a8ec:	93 8d       	ldd	r25, Z+27	; 0x1b
    a8ee:	0e 94 d5 45 	call	0x8baa	; 0x8baa <mem_set>
    a8f2:	4b e0       	ldi	r20, 0x0B	; 11
    a8f4:	50 e0       	ldi	r21, 0x00	; 0
    a8f6:	b5 01       	movw	r22, r10
    a8f8:	d8 01       	movw	r26, r16
    a8fa:	5a 96       	adiw	r26, 0x1a	; 26
    a8fc:	8d 91       	ld	r24, X+
    a8fe:	9c 91       	ld	r25, X
    a900:	5b 97       	sbiw	r26, 0x1b	; 27
    a902:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <mem_cpy.part.0>
    a906:	d8 01       	movw	r26, r16
    a908:	5a 96       	adiw	r26, 0x1a	; 26
    a90a:	ed 91       	ld	r30, X+
    a90c:	fc 91       	ld	r31, X
    a90e:	5b 97       	sbiw	r26, 0x1b	; 27
    a910:	97 96       	adiw	r26, 0x27	; 39
    a912:	8c 91       	ld	r24, X
    a914:	88 71       	andi	r24, 0x18	; 24
    a916:	84 87       	std	Z+12, r24	; 0x0c
    a918:	81 e0       	ldi	r24, 0x01	; 1
    a91a:	f6 01       	movw	r30, r12
    a91c:	83 83       	std	Z+3, r24	; 0x03
    a91e:	20 e0       	ldi	r18, 0x00	; 0
    a920:	d1 cf       	rjmp	.-94     	; 0xa8c4 <dir_register+0x2de>
    a922:	28 2f       	mov	r18, r24
    a924:	82 2f       	mov	r24, r18
    a926:	66 96       	adiw	r28, 0x16	; 22
    a928:	e2 e1       	ldi	r30, 0x12	; 18
    a92a:	0c 94 ab e9 	jmp	0x1d356	; 0x1d356 <__epilogue_restores__>

0000a92e <follow_path>:
    a92e:	a7 e0       	ldi	r26, 0x07	; 7
    a930:	b0 e0       	ldi	r27, 0x00	; 0
    a932:	ed e9       	ldi	r30, 0x9D	; 157
    a934:	f4 e5       	ldi	r31, 0x54	; 84
    a936:	0c 94 8f e9 	jmp	0x1d31e	; 0x1d31e <__prologue_saves__>
    a93a:	8c 01       	movw	r16, r24
    a93c:	7b 01       	movw	r14, r22
    a93e:	dc 01       	movw	r26, r24
    a940:	2d 90       	ld	r2, X+
    a942:	3c 90       	ld	r3, X
    a944:	fb 01       	movw	r30, r22
    a946:	80 81       	ld	r24, Z
    a948:	8f 32       	cpi	r24, 0x2F	; 47
    a94a:	11 f0       	breq	.+4      	; 0xa950 <follow_path+0x22>
    a94c:	8c 35       	cpi	r24, 0x5C	; 92
    a94e:	11 f4       	brne	.+4      	; 0xa954 <follow_path+0x26>
    a950:	97 01       	movw	r18, r14
    a952:	0b c0       	rjmp	.+22     	; 0xa96a <follow_path+0x3c>
    a954:	f1 01       	movw	r30, r2
    a956:	85 89       	ldd	r24, Z+21	; 0x15
    a958:	96 89       	ldd	r25, Z+22	; 0x16
    a95a:	a7 89       	ldd	r26, Z+23	; 0x17
    a95c:	b0 8d       	ldd	r27, Z+24	; 0x18
    a95e:	f8 01       	movw	r30, r16
    a960:	86 83       	std	Z+6, r24	; 0x06
    a962:	97 83       	std	Z+7, r25	; 0x07
    a964:	a0 87       	std	Z+8, r26	; 0x08
    a966:	b1 87       	std	Z+9, r27	; 0x09
    a968:	0e c0       	rjmp	.+28     	; 0xa986 <follow_path+0x58>
    a96a:	79 01       	movw	r14, r18
    a96c:	d9 01       	movw	r26, r18
    a96e:	8c 91       	ld	r24, X
    a970:	2f 5f       	subi	r18, 0xFF	; 255
    a972:	3f 4f       	sbci	r19, 0xFF	; 255
    a974:	8f 32       	cpi	r24, 0x2F	; 47
    a976:	c9 f3       	breq	.-14     	; 0xa96a <follow_path+0x3c>
    a978:	8c 35       	cpi	r24, 0x5C	; 92
    a97a:	b9 f3       	breq	.-18     	; 0xa96a <follow_path+0x3c>
    a97c:	f8 01       	movw	r30, r16
    a97e:	16 82       	std	Z+6, r1	; 0x06
    a980:	17 82       	std	Z+7, r1	; 0x07
    a982:	10 86       	std	Z+8, r1	; 0x08
    a984:	11 86       	std	Z+9, r1	; 0x09
    a986:	d7 01       	movw	r26, r14
    a988:	8c 91       	ld	r24, X
    a98a:	80 32       	cpi	r24, 0x20	; 32
    a98c:	50 f0       	brcs	.+20     	; 0xa9a2 <follow_path+0x74>
    a98e:	f8 01       	movw	r30, r16
    a990:	7c 96       	adiw	r30, 0x1c	; 28
    a992:	fb 83       	std	Y+3, r31	; 0x03
    a994:	ea 83       	std	Y+2, r30	; 0x02
    a996:	91 01       	movw	r18, r2
    a998:	2b 5c       	subi	r18, 0xCB	; 203
    a99a:	3f 4f       	sbci	r19, 0xFF	; 255
    a99c:	3d 83       	std	Y+5, r19	; 0x05
    a99e:	2c 83       	std	Y+4, r18	; 0x04
    a9a0:	87 c0       	rjmp	.+270    	; 0xaab0 <follow_path+0x182>
    a9a2:	80 e8       	ldi	r24, 0x80	; 128
    a9a4:	d8 01       	movw	r26, r16
    a9a6:	97 96       	adiw	r26, 0x27	; 39
    a9a8:	8c 93       	st	X, r24
    a9aa:	40 e0       	ldi	r20, 0x00	; 0
    a9ac:	50 e0       	ldi	r21, 0x00	; 0
    a9ae:	ba 01       	movw	r22, r20
    a9b0:	c8 01       	movw	r24, r16
    a9b2:	0e 94 6a 4c 	call	0x98d4	; 0x98d4 <dir_sdi>
    a9b6:	d8 c1       	rjmp	.+944    	; 0xad68 <follow_path+0x43a>
    a9b8:	8f 32       	cpi	r24, 0x2F	; 47
    a9ba:	91 05       	cpc	r25, r1
    a9bc:	09 f4       	brne	.+2      	; 0xa9c0 <follow_path+0x92>
    a9be:	83 c0       	rjmp	.+262    	; 0xaac6 <follow_path+0x198>
    a9c0:	8c 35       	cpi	r24, 0x5C	; 92
    a9c2:	91 05       	cpc	r25, r1
    a9c4:	09 f4       	brne	.+2      	; 0xa9c8 <follow_path+0x9a>
    a9c6:	7f c0       	rjmp	.+254    	; 0xaac6 <follow_path+0x198>
    a9c8:	a1 14       	cp	r10, r1
    a9ca:	f1 e0       	ldi	r31, 0x01	; 1
    a9cc:	bf 06       	cpc	r11, r31
    a9ce:	09 f4       	brne	.+2      	; 0xa9d2 <follow_path+0xa4>
    a9d0:	ac c1       	rjmp	.+856    	; 0xad2a <follow_path+0x3fc>
    a9d2:	61 e0       	ldi	r22, 0x01	; 1
    a9d4:	70 e0       	ldi	r23, 0x00	; 0
    a9d6:	0e 94 65 6c 	call	0xd8ca	; 0xd8ca <ff_convert>
    a9da:	00 97       	sbiw	r24, 0x00	; 0
    a9dc:	09 f4       	brne	.+2      	; 0xa9e0 <follow_path+0xb2>
    a9de:	a5 c1       	rjmp	.+842    	; 0xad2a <follow_path+0x3fc>
    a9e0:	80 38       	cpi	r24, 0x80	; 128
    a9e2:	91 05       	cpc	r25, r1
    a9e4:	28 f4       	brcc	.+10     	; 0xa9f0 <follow_path+0xc2>
    a9e6:	ed e5       	ldi	r30, 0x5D	; 93
    a9e8:	f8 e0       	ldi	r31, 0x08	; 8
    a9ea:	21 91       	ld	r18, Z+
    a9ec:	21 11       	cpse	r18, r1
    a9ee:	79 c0       	rjmp	.+242    	; 0xaae2 <follow_path+0x1b4>
    a9f0:	d3 01       	movw	r26, r6
    a9f2:	8d 93       	st	X+, r24
    a9f4:	9d 93       	st	X+, r25
    a9f6:	3d 01       	movw	r6, r26
    a9f8:	bf 82       	std	Y+7, r11	; 0x07
    a9fa:	ae 82       	std	Y+6, r10	; 0x06
    a9fc:	ae 80       	ldd	r10, Y+6	; 0x06
    a9fe:	bf 80       	ldd	r11, Y+7	; 0x07
    aa00:	bf ef       	ldi	r27, 0xFF	; 255
    aa02:	ab 1a       	sub	r10, r27
    aa04:	bb 0a       	sbc	r11, r27
    aa06:	f4 01       	movw	r30, r8
    aa08:	81 91       	ld	r24, Z+
    aa0a:	4f 01       	movw	r8, r30
    aa0c:	90 e0       	ldi	r25, 0x00	; 0
    aa0e:	80 32       	cpi	r24, 0x20	; 32
    aa10:	91 05       	cpc	r25, r1
    aa12:	90 f6       	brcc	.-92     	; 0xa9b8 <follow_path+0x8a>
    aa14:	ea 0c       	add	r14, r10
    aa16:	fb 1c       	adc	r15, r11
    aa18:	80 97       	sbiw	r24, 0x20	; 32
    aa1a:	08 f0       	brcs	.+2      	; 0xaa1e <follow_path+0xf0>
    aa1c:	68 c0       	rjmp	.+208    	; 0xaaee <follow_path+0x1c0>
    aa1e:	b4 e0       	ldi	r27, 0x04	; 4
    aa20:	b9 83       	std	Y+1, r27	; 0x01
    aa22:	ee 81       	ldd	r30, Y+6	; 0x06
    aa24:	ff 81       	ldd	r31, Y+7	; 0x07
    aa26:	ee 0f       	add	r30, r30
    aa28:	ff 1f       	adc	r31, r31
    aa2a:	2e 81       	ldd	r18, Y+6	; 0x06
    aa2c:	3f 81       	ldd	r19, Y+7	; 0x07
    aa2e:	21 30       	cpi	r18, 0x01	; 1
    aa30:	31 05       	cpc	r19, r1
    aa32:	09 f0       	breq	.+2      	; 0xaa36 <follow_path+0x108>
    aa34:	5e c0       	rjmp	.+188    	; 0xaaf2 <follow_path+0x1c4>
    aa36:	d6 01       	movw	r26, r12
    aa38:	8d 91       	ld	r24, X+
    aa3a:	9c 91       	ld	r25, X
    aa3c:	8e 97       	sbiw	r24, 0x2e	; 46
    aa3e:	09 f0       	breq	.+2      	; 0xaa42 <follow_path+0x114>
    aa40:	65 c0       	rjmp	.+202    	; 0xab0c <follow_path+0x1de>
    aa42:	ec 0d       	add	r30, r12
    aa44:	fd 1d       	adc	r31, r13
    aa46:	11 82       	std	Z+1, r1	; 0x01
    aa48:	10 82       	st	Z, r1
    aa4a:	f8 01       	movw	r30, r16
    aa4c:	7c 96       	adiw	r30, 0x1c	; 28
    aa4e:	80 e0       	ldi	r24, 0x00	; 0
    aa50:	90 e0       	ldi	r25, 0x00	; 0
    aa52:	2e 81       	ldd	r18, Y+6	; 0x06
    aa54:	3f 81       	ldd	r19, Y+7	; 0x07
    aa56:	82 17       	cp	r24, r18
    aa58:	93 07       	cpc	r25, r19
    aa5a:	08 f0       	brcs	.+2      	; 0xaa5e <follow_path+0x130>
    aa5c:	5a c0       	rjmp	.+180    	; 0xab12 <follow_path+0x1e4>
    aa5e:	2e e2       	ldi	r18, 0x2E	; 46
    aa60:	21 93       	st	Z+, r18
    aa62:	01 96       	adiw	r24, 0x01	; 1
    aa64:	8b 30       	cpi	r24, 0x0B	; 11
    aa66:	91 05       	cpc	r25, r1
    aa68:	a1 f7       	brne	.-24     	; 0xaa52 <follow_path+0x124>
    aa6a:	89 81       	ldd	r24, Y+1	; 0x01
    aa6c:	80 62       	ori	r24, 0x20	; 32
    aa6e:	d8 01       	movw	r26, r16
    aa70:	97 96       	adiw	r26, 0x27	; 39
    aa72:	8c 93       	st	X, r24
    aa74:	c8 01       	movw	r24, r16
    aa76:	a0 dc       	rcall	.-1728   	; 0xa3b8 <dir_find>
    aa78:	d8 01       	movw	r26, r16
    aa7a:	97 96       	adiw	r26, 0x27	; 39
    aa7c:	2c 91       	ld	r18, X
    aa7e:	00 97       	sbiw	r24, 0x00	; 0
    aa80:	09 f0       	breq	.+2      	; 0xaa84 <follow_path+0x156>
    aa82:	56 c1       	rjmp	.+684    	; 0xad30 <follow_path+0x402>
    aa84:	22 fd       	sbrc	r18, 2
    aa86:	70 c1       	rjmp	.+736    	; 0xad68 <follow_path+0x43a>
    aa88:	f8 01       	movw	r30, r16
    aa8a:	84 81       	ldd	r24, Z+4	; 0x04
    aa8c:	84 ff       	sbrs	r24, 4
    aa8e:	63 c1       	rjmp	.+710    	; 0xad56 <follow_path+0x428>
    aa90:	66 85       	ldd	r22, Z+14	; 0x0e
    aa92:	77 85       	ldd	r23, Z+15	; 0x0f
    aa94:	71 70       	andi	r23, 0x01	; 1
    aa96:	2c 81       	ldd	r18, Y+4	; 0x04
    aa98:	3d 81       	ldd	r19, Y+5	; 0x05
    aa9a:	62 0f       	add	r22, r18
    aa9c:	73 1f       	adc	r23, r19
    aa9e:	d1 01       	movw	r26, r2
    aaa0:	8c 91       	ld	r24, X
    aaa2:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <ld_clust.isra.1>
    aaa6:	f8 01       	movw	r30, r16
    aaa8:	66 83       	std	Z+6, r22	; 0x06
    aaaa:	77 83       	std	Z+7, r23	; 0x07
    aaac:	80 87       	std	Z+8, r24	; 0x08
    aaae:	91 87       	std	Z+9, r25	; 0x09
    aab0:	d8 01       	movw	r26, r16
    aab2:	ed 91       	ld	r30, X+
    aab4:	fc 91       	ld	r31, X
    aab6:	c3 84       	ldd	r12, Z+11	; 0x0b
    aab8:	d4 84       	ldd	r13, Z+12	; 0x0c
    aaba:	26 01       	movw	r4, r12
    aabc:	36 01       	movw	r6, r12
    aabe:	47 01       	movw	r8, r14
    aac0:	1f 82       	std	Y+7, r1	; 0x07
    aac2:	1e 82       	std	Y+6, r1	; 0x06
    aac4:	9b cf       	rjmp	.-202    	; 0xa9fc <follow_path+0xce>
    aac6:	f7 01       	movw	r30, r14
    aac8:	ea 0d       	add	r30, r10
    aaca:	fb 1d       	adc	r31, r11
    aacc:	03 c0       	rjmp	.+6      	; 0xaad4 <follow_path+0x1a6>
    aace:	2c 35       	cpi	r18, 0x5C	; 92
    aad0:	09 f0       	breq	.+2      	; 0xaad4 <follow_path+0x1a6>
    aad2:	a0 cf       	rjmp	.-192    	; 0xaa14 <follow_path+0xe6>
    aad4:	5f 01       	movw	r10, r30
    aad6:	ae 18       	sub	r10, r14
    aad8:	bf 08       	sbc	r11, r15
    aada:	21 91       	ld	r18, Z+
    aadc:	2f 32       	cpi	r18, 0x2F	; 47
    aade:	b9 f7       	brne	.-18     	; 0xaace <follow_path+0x1a0>
    aae0:	f9 cf       	rjmp	.-14     	; 0xaad4 <follow_path+0x1a6>
    aae2:	30 e0       	ldi	r19, 0x00	; 0
    aae4:	82 17       	cp	r24, r18
    aae6:	93 07       	cpc	r25, r19
    aae8:	09 f0       	breq	.+2      	; 0xaaec <follow_path+0x1be>
    aaea:	7f cf       	rjmp	.-258    	; 0xa9ea <follow_path+0xbc>
    aaec:	1e c1       	rjmp	.+572    	; 0xad2a <follow_path+0x3fc>
    aaee:	19 82       	std	Y+1, r1	; 0x01
    aaf0:	98 cf       	rjmp	.-208    	; 0xaa22 <follow_path+0xf4>
    aaf2:	2e 81       	ldd	r18, Y+6	; 0x06
    aaf4:	3f 81       	ldd	r19, Y+7	; 0x07
    aaf6:	22 30       	cpi	r18, 0x02	; 2
    aaf8:	31 05       	cpc	r19, r1
    aafa:	41 f4       	brne	.+16     	; 0xab0c <follow_path+0x1de>
    aafc:	d6 01       	movw	r26, r12
    aafe:	12 96       	adiw	r26, 0x02	; 2
    ab00:	8d 91       	ld	r24, X+
    ab02:	9c 91       	ld	r25, X
    ab04:	13 97       	sbiw	r26, 0x03	; 3
    ab06:	8e 97       	sbiw	r24, 0x2e	; 46
    ab08:	09 f4       	brne	.+2      	; 0xab0c <follow_path+0x1de>
    ab0a:	96 cf       	rjmp	.-212    	; 0xaa38 <follow_path+0x10a>
    ab0c:	ec 0d       	add	r30, r12
    ab0e:	fd 1d       	adc	r31, r13
    ab10:	0d c0       	rjmp	.+26     	; 0xab2c <follow_path+0x1fe>
    ab12:	20 e2       	ldi	r18, 0x20	; 32
    ab14:	a5 cf       	rjmp	.-182    	; 0xaa60 <follow_path+0x132>
    ab16:	92 91       	ld	r25, -Z
    ab18:	82 91       	ld	r24, -Z
    ab1a:	80 32       	cpi	r24, 0x20	; 32
    ab1c:	91 05       	cpc	r25, r1
    ab1e:	59 f4       	brne	.+22     	; 0xab36 <follow_path+0x208>
    ab20:	2e 81       	ldd	r18, Y+6	; 0x06
    ab22:	3f 81       	ldd	r19, Y+7	; 0x07
    ab24:	21 50       	subi	r18, 0x01	; 1
    ab26:	31 09       	sbc	r19, r1
    ab28:	3f 83       	std	Y+7, r19	; 0x07
    ab2a:	2e 83       	std	Y+6, r18	; 0x06
    ab2c:	8e 81       	ldd	r24, Y+6	; 0x06
    ab2e:	9f 81       	ldd	r25, Y+7	; 0x07
    ab30:	89 2b       	or	r24, r25
    ab32:	89 f7       	brne	.-30     	; 0xab16 <follow_path+0x1e8>
    ab34:	02 c0       	rjmp	.+4      	; 0xab3a <follow_path+0x20c>
    ab36:	8e 97       	sbiw	r24, 0x2e	; 46
    ab38:	99 f3       	breq	.-26     	; 0xab20 <follow_path+0x1f2>
    ab3a:	ae 80       	ldd	r10, Y+6	; 0x06
    ab3c:	bf 80       	ldd	r11, Y+7	; 0x07
    ab3e:	aa 0c       	add	r10, r10
    ab40:	bb 1c       	adc	r11, r11
    ab42:	ac 0c       	add	r10, r12
    ab44:	bd 1c       	adc	r11, r13
    ab46:	d5 01       	movw	r26, r10
    ab48:	1d 92       	st	X+, r1
    ab4a:	1c 92       	st	X, r1
    ab4c:	ee 81       	ldd	r30, Y+6	; 0x06
    ab4e:	ff 81       	ldd	r31, Y+7	; 0x07
    ab50:	ef 2b       	or	r30, r31
    ab52:	09 f4       	brne	.+2      	; 0xab56 <follow_path+0x228>
    ab54:	ea c0       	rjmp	.+468    	; 0xad2a <follow_path+0x3fc>
    ab56:	4b e0       	ldi	r20, 0x0B	; 11
    ab58:	50 e0       	ldi	r21, 0x00	; 0
    ab5a:	60 e2       	ldi	r22, 0x20	; 32
    ab5c:	70 e0       	ldi	r23, 0x00	; 0
    ab5e:	8a 81       	ldd	r24, Y+2	; 0x02
    ab60:	9b 81       	ldd	r25, Y+3	; 0x03
    ab62:	0e 94 d5 45 	call	0x8baa	; 0x8baa <mem_set>
    ab66:	80 e0       	ldi	r24, 0x00	; 0
    ab68:	90 e0       	ldi	r25, 0x00	; 0
    ab6a:	d2 01       	movw	r26, r4
    ab6c:	2d 91       	ld	r18, X+
    ab6e:	3d 91       	ld	r19, X+
    ab70:	2d 01       	movw	r4, r26
    ab72:	20 32       	cpi	r18, 0x20	; 32
    ab74:	31 05       	cpc	r19, r1
    ab76:	11 f4       	brne	.+4      	; 0xab7c <follow_path+0x24e>
    ab78:	01 96       	adiw	r24, 0x01	; 1
    ab7a:	f7 cf       	rjmp	.-18     	; 0xab6a <follow_path+0x23c>
    ab7c:	2e 32       	cpi	r18, 0x2E	; 46
    ab7e:	31 05       	cpc	r19, r1
    ab80:	d9 f3       	breq	.-10     	; 0xab78 <follow_path+0x24a>
    ab82:	00 97       	sbiw	r24, 0x00	; 0
    ab84:	19 f0       	breq	.+6      	; 0xab8c <follow_path+0x25e>
    ab86:	b9 81       	ldd	r27, Y+1	; 0x01
    ab88:	b3 60       	ori	r27, 0x03	; 3
    ab8a:	b9 83       	std	Y+1, r27	; 0x01
    ab8c:	f5 01       	movw	r30, r10
    ab8e:	32 91       	ld	r19, -Z
    ab90:	22 91       	ld	r18, -Z
    ab92:	2e 32       	cpi	r18, 0x2E	; 46
    ab94:	31 05       	cpc	r19, r1
    ab96:	41 f0       	breq	.+16     	; 0xaba8 <follow_path+0x27a>
    ab98:	2e 81       	ldd	r18, Y+6	; 0x06
    ab9a:	3f 81       	ldd	r19, Y+7	; 0x07
    ab9c:	21 50       	subi	r18, 0x01	; 1
    ab9e:	31 09       	sbc	r19, r1
    aba0:	3f 83       	std	Y+7, r19	; 0x07
    aba2:	2e 83       	std	Y+6, r18	; 0x06
    aba4:	23 2b       	or	r18, r19
    aba6:	99 f7       	brne	.-26     	; 0xab8e <follow_path+0x260>
    aba8:	48 e0       	ldi	r20, 0x08	; 8
    abaa:	a4 2e       	mov	r10, r20
    abac:	b1 2c       	mov	r11, r1
    abae:	81 2c       	mov	r8, r1
    abb0:	91 2c       	mov	r9, r1
    abb2:	41 2c       	mov	r4, r1
    abb4:	3c 01       	movw	r6, r24
    abb6:	3f ef       	ldi	r19, 0xFF	; 255
    abb8:	63 1a       	sub	r6, r19
    abba:	73 0a       	sbc	r7, r19
    abbc:	88 0f       	add	r24, r24
    abbe:	99 1f       	adc	r25, r25
    abc0:	f6 01       	movw	r30, r12
    abc2:	e8 0f       	add	r30, r24
    abc4:	f9 1f       	adc	r31, r25
    abc6:	80 81       	ld	r24, Z
    abc8:	91 81       	ldd	r25, Z+1	; 0x01
    abca:	00 97       	sbiw	r24, 0x00	; 0
    abcc:	09 f4       	brne	.+2      	; 0xabd0 <follow_path+0x2a2>
    abce:	75 c0       	rjmp	.+234    	; 0xacba <follow_path+0x38c>
    abd0:	80 32       	cpi	r24, 0x20	; 32
    abd2:	91 05       	cpc	r25, r1
    abd4:	41 f0       	breq	.+16     	; 0xabe6 <follow_path+0x2b8>
    abd6:	8e 32       	cpi	r24, 0x2E	; 46
    abd8:	91 05       	cpc	r25, r1
    abda:	51 f4       	brne	.+20     	; 0xabf0 <follow_path+0x2c2>
    abdc:	8e 81       	ldd	r24, Y+6	; 0x06
    abde:	9f 81       	ldd	r25, Y+7	; 0x07
    abe0:	68 16       	cp	r6, r24
    abe2:	79 06       	cpc	r7, r25
    abe4:	71 f0       	breq	.+28     	; 0xac02 <follow_path+0x2d4>
    abe6:	99 81       	ldd	r25, Y+1	; 0x01
    abe8:	93 60       	ori	r25, 0x03	; 3
    abea:	99 83       	std	Y+1, r25	; 0x01
    abec:	c3 01       	movw	r24, r6
    abee:	e2 cf       	rjmp	.-60     	; 0xabb4 <follow_path+0x286>
    abf0:	8a 14       	cp	r8, r10
    abf2:	9b 04       	cpc	r9, r11
    abf4:	50 f4       	brcc	.+20     	; 0xac0a <follow_path+0x2dc>
    abf6:	ae 81       	ldd	r26, Y+6	; 0x06
    abf8:	bf 81       	ldd	r27, Y+7	; 0x07
    abfa:	6a 16       	cp	r6, r26
    abfc:	7b 06       	cpc	r7, r27
    abfe:	49 f5       	brne	.+82     	; 0xac52 <follow_path+0x324>
    ac00:	ad c0       	rjmp	.+346    	; 0xad5c <follow_path+0x42e>
    ac02:	8a 14       	cp	r8, r10
    ac04:	9b 04       	cpc	r9, r11
    ac06:	08 f4       	brcc	.+2      	; 0xac0a <follow_path+0x2dc>
    ac08:	a9 c0       	rjmp	.+338    	; 0xad5c <follow_path+0x42e>
    ac0a:	bb e0       	ldi	r27, 0x0B	; 11
    ac0c:	ab 16       	cp	r10, r27
    ac0e:	b1 04       	cpc	r11, r1
    ac10:	39 f4       	brne	.+14     	; 0xac20 <follow_path+0x2f2>
    ac12:	e9 81       	ldd	r30, Y+1	; 0x01
    ac14:	e3 60       	ori	r30, 0x03	; 3
    ac16:	e9 83       	std	Y+1, r30	; 0x01
    ac18:	2b e0       	ldi	r18, 0x0B	; 11
    ac1a:	a2 2e       	mov	r10, r18
    ac1c:	b1 2c       	mov	r11, r1
    ac1e:	4d c0       	rjmp	.+154    	; 0xacba <follow_path+0x38c>
    ac20:	2e 81       	ldd	r18, Y+6	; 0x06
    ac22:	3f 81       	ldd	r19, Y+7	; 0x07
    ac24:	62 16       	cp	r6, r18
    ac26:	73 06       	cpc	r7, r19
    ac28:	49 f0       	breq	.+18     	; 0xac3c <follow_path+0x30e>
    ac2a:	39 81       	ldd	r19, Y+1	; 0x01
    ac2c:	33 60       	ori	r19, 0x03	; 3
    ac2e:	39 83       	std	Y+1, r19	; 0x01
    ac30:	8e 81       	ldd	r24, Y+6	; 0x06
    ac32:	9f 81       	ldd	r25, Y+7	; 0x07
    ac34:	86 15       	cp	r24, r6
    ac36:	97 05       	cpc	r25, r7
    ac38:	08 f4       	brcc	.+2      	; 0xac3c <follow_path+0x30e>
    ac3a:	3f c0       	rjmp	.+126    	; 0xacba <follow_path+0x38c>
    ac3c:	44 0c       	add	r4, r4
    ac3e:	44 0c       	add	r4, r4
    ac40:	6e 80       	ldd	r6, Y+6	; 0x06
    ac42:	7f 80       	ldd	r7, Y+7	; 0x07
    ac44:	8b e0       	ldi	r24, 0x0B	; 11
    ac46:	a8 2e       	mov	r10, r24
    ac48:	b1 2c       	mov	r11, r1
    ac4a:	98 e0       	ldi	r25, 0x08	; 8
    ac4c:	89 2e       	mov	r8, r25
    ac4e:	91 2c       	mov	r9, r1
    ac50:	cd cf       	rjmp	.-102    	; 0xabec <follow_path+0x2be>
    ac52:	80 38       	cpi	r24, 0x80	; 128
    ac54:	91 05       	cpc	r25, r1
    ac56:	80 f0       	brcs	.+32     	; 0xac78 <follow_path+0x34a>
    ac58:	60 e0       	ldi	r22, 0x00	; 0
    ac5a:	70 e0       	ldi	r23, 0x00	; 0
    ac5c:	0e 94 65 6c 	call	0xd8ca	; 0xd8ca <ff_convert>
    ac60:	00 97       	sbiw	r24, 0x00	; 0
    ac62:	29 f0       	breq	.+10     	; 0xac6e <follow_path+0x340>
    ac64:	fc 01       	movw	r30, r24
    ac66:	ed 52       	subi	r30, 0x2D	; 45
    ac68:	fd 4f       	sbci	r31, 0xFD	; 253
    ac6a:	80 81       	ld	r24, Z
    ac6c:	90 e0       	ldi	r25, 0x00	; 0
    ac6e:	a9 81       	ldd	r26, Y+1	; 0x01
    ac70:	a2 60       	ori	r26, 0x02	; 2
    ac72:	a9 83       	std	Y+1, r26	; 0x01
    ac74:	00 97       	sbiw	r24, 0x00	; 0
    ac76:	49 f0       	breq	.+18     	; 0xac8a <follow_path+0x35c>
    ac78:	e6 e6       	ldi	r30, 0x66	; 102
    ac7a:	f8 e0       	ldi	r31, 0x08	; 8
    ac7c:	21 91       	ld	r18, Z+
    ac7e:	22 23       	and	r18, r18
    ac80:	51 f0       	breq	.+20     	; 0xac96 <follow_path+0x368>
    ac82:	30 e0       	ldi	r19, 0x00	; 0
    ac84:	82 17       	cp	r24, r18
    ac86:	93 07       	cpc	r25, r19
    ac88:	c9 f7       	brne	.-14     	; 0xac7c <follow_path+0x34e>
    ac8a:	b9 81       	ldd	r27, Y+1	; 0x01
    ac8c:	b3 60       	ori	r27, 0x03	; 3
    ac8e:	b9 83       	std	Y+1, r27	; 0x01
    ac90:	8f e5       	ldi	r24, 0x5F	; 95
    ac92:	90 e0       	ldi	r25, 0x00	; 0
    ac94:	09 c0       	rjmp	.+18     	; 0xaca8 <follow_path+0x37a>
    ac96:	9c 01       	movw	r18, r24
    ac98:	21 54       	subi	r18, 0x41	; 65
    ac9a:	31 09       	sbc	r19, r1
    ac9c:	2a 31       	cpi	r18, 0x1A	; 26
    ac9e:	31 05       	cpc	r19, r1
    aca0:	c8 f5       	brcc	.+114    	; 0xad14 <follow_path+0x3e6>
    aca2:	e4 2d       	mov	r30, r4
    aca4:	e2 60       	ori	r30, 0x02	; 2
    aca6:	4e 2e       	mov	r4, r30
    aca8:	f8 01       	movw	r30, r16
    acaa:	e8 0d       	add	r30, r8
    acac:	f9 1d       	adc	r31, r9
    acae:	84 8f       	std	Z+28, r24	; 0x1c
    acb0:	94 01       	movw	r18, r8
    acb2:	2f 5f       	subi	r18, 0xFF	; 255
    acb4:	3f 4f       	sbci	r19, 0xFF	; 255
    acb6:	49 01       	movw	r8, r18
    acb8:	99 cf       	rjmp	.-206    	; 0xabec <follow_path+0x2be>
    acba:	d8 01       	movw	r26, r16
    acbc:	5c 96       	adiw	r26, 0x1c	; 28
    acbe:	8c 91       	ld	r24, X
    acc0:	5c 97       	sbiw	r26, 0x1c	; 28
    acc2:	85 3e       	cpi	r24, 0xE5	; 229
    acc4:	19 f4       	brne	.+6      	; 0xaccc <follow_path+0x39e>
    acc6:	e5 e0       	ldi	r30, 0x05	; 5
    acc8:	5c 96       	adiw	r26, 0x1c	; 28
    acca:	ec 93       	st	X, r30
    accc:	f8 e0       	ldi	r31, 0x08	; 8
    acce:	af 16       	cp	r10, r31
    acd0:	b1 04       	cpc	r11, r1
    acd2:	11 f4       	brne	.+4      	; 0xacd8 <follow_path+0x3aa>
    acd4:	44 0c       	add	r4, r4
    acd6:	44 0c       	add	r4, r4
    acd8:	84 2d       	mov	r24, r4
    acda:	8c 70       	andi	r24, 0x0C	; 12
    acdc:	8c 30       	cpi	r24, 0x0C	; 12
    acde:	21 f0       	breq	.+8      	; 0xace8 <follow_path+0x3ba>
    ace0:	94 2d       	mov	r25, r4
    ace2:	93 70       	andi	r25, 0x03	; 3
    ace4:	93 30       	cpi	r25, 0x03	; 3
    ace6:	19 f4       	brne	.+6      	; 0xacee <follow_path+0x3c0>
    ace8:	29 81       	ldd	r18, Y+1	; 0x01
    acea:	22 60       	ori	r18, 0x02	; 2
    acec:	29 83       	std	Y+1, r18	; 0x01
    acee:	39 81       	ldd	r19, Y+1	; 0x01
    acf0:	31 fd       	sbrc	r19, 1
    acf2:	0b c0       	rjmp	.+22     	; 0xad0a <follow_path+0x3dc>
    acf4:	94 2d       	mov	r25, r4
    acf6:	93 70       	andi	r25, 0x03	; 3
    acf8:	91 30       	cpi	r25, 0x01	; 1
    acfa:	11 f4       	brne	.+4      	; 0xad00 <follow_path+0x3d2>
    acfc:	30 61       	ori	r19, 0x10	; 16
    acfe:	39 83       	std	Y+1, r19	; 0x01
    ad00:	84 30       	cpi	r24, 0x04	; 4
    ad02:	19 f4       	brne	.+6      	; 0xad0a <follow_path+0x3dc>
    ad04:	89 81       	ldd	r24, Y+1	; 0x01
    ad06:	88 60       	ori	r24, 0x08	; 8
    ad08:	89 83       	std	Y+1, r24	; 0x01
    ad0a:	e9 81       	ldd	r30, Y+1	; 0x01
    ad0c:	d8 01       	movw	r26, r16
    ad0e:	97 96       	adiw	r26, 0x27	; 39
    ad10:	ec 93       	st	X, r30
    ad12:	b0 ce       	rjmp	.-672    	; 0xaa74 <follow_path+0x146>
    ad14:	9c 01       	movw	r18, r24
    ad16:	21 56       	subi	r18, 0x61	; 97
    ad18:	31 09       	sbc	r19, r1
    ad1a:	2a 31       	cpi	r18, 0x1A	; 26
    ad1c:	31 05       	cpc	r19, r1
    ad1e:	20 f6       	brcc	.-120    	; 0xaca8 <follow_path+0x37a>
    ad20:	f4 2d       	mov	r31, r4
    ad22:	f1 60       	ori	r31, 0x01	; 1
    ad24:	4f 2e       	mov	r4, r31
    ad26:	80 97       	sbiw	r24, 0x20	; 32
    ad28:	bf cf       	rjmp	.-130    	; 0xaca8 <follow_path+0x37a>
    ad2a:	86 e0       	ldi	r24, 0x06	; 6
    ad2c:	90 e0       	ldi	r25, 0x00	; 0
    ad2e:	1c c0       	rjmp	.+56     	; 0xad68 <follow_path+0x43a>
    ad30:	84 30       	cpi	r24, 0x04	; 4
    ad32:	91 05       	cpc	r25, r1
    ad34:	c9 f4       	brne	.+50     	; 0xad68 <follow_path+0x43a>
    ad36:	32 2f       	mov	r19, r18
    ad38:	34 70       	andi	r19, 0x04	; 4
    ad3a:	25 ff       	sbrs	r18, 5
    ad3c:	0a c0       	rjmp	.+20     	; 0xad52 <follow_path+0x424>
    ad3e:	33 23       	and	r19, r19
    ad40:	09 f4       	brne	.+2      	; 0xad44 <follow_path+0x416>
    ad42:	b6 ce       	rjmp	.-660    	; 0xaab0 <follow_path+0x182>
    ad44:	80 e8       	ldi	r24, 0x80	; 128
    ad46:	d8 01       	movw	r26, r16
    ad48:	97 96       	adiw	r26, 0x27	; 39
    ad4a:	8c 93       	st	X, r24
    ad4c:	80 e0       	ldi	r24, 0x00	; 0
    ad4e:	90 e0       	ldi	r25, 0x00	; 0
    ad50:	0b c0       	rjmp	.+22     	; 0xad68 <follow_path+0x43a>
    ad52:	31 11       	cpse	r19, r1
    ad54:	09 c0       	rjmp	.+18     	; 0xad68 <follow_path+0x43a>
    ad56:	85 e0       	ldi	r24, 0x05	; 5
    ad58:	90 e0       	ldi	r25, 0x00	; 0
    ad5a:	06 c0       	rjmp	.+12     	; 0xad68 <follow_path+0x43a>
    ad5c:	bb e0       	ldi	r27, 0x0B	; 11
    ad5e:	ab 16       	cp	r10, r27
    ad60:	b1 04       	cpc	r11, r1
    ad62:	09 f0       	breq	.+2      	; 0xad66 <follow_path+0x438>
    ad64:	6b cf       	rjmp	.-298    	; 0xac3c <follow_path+0x30e>
    ad66:	55 cf       	rjmp	.-342    	; 0xac12 <follow_path+0x2e4>
    ad68:	27 96       	adiw	r28, 0x07	; 7
    ad6a:	e2 e1       	ldi	r30, 0x12	; 18
    ad6c:	0c 94 ab e9 	jmp	0x1d356	; 0x1d356 <__epilogue_restores__>

0000ad70 <f_mount>:
    ad70:	a6 e0       	ldi	r26, 0x06	; 6
    ad72:	b0 e0       	ldi	r27, 0x00	; 0
    ad74:	ee eb       	ldi	r30, 0xBE	; 190
    ad76:	f6 e5       	ldi	r31, 0x56	; 86
    ad78:	0c 94 9e e9 	jmp	0x1d33c	; 0x1d33c <__prologue_saves__+0x1e>
    ad7c:	9c 83       	std	Y+4, r25	; 0x04
    ad7e:	8b 83       	std	Y+3, r24	; 0x03
    ad80:	7e 83       	std	Y+6, r23	; 0x06
    ad82:	6d 83       	std	Y+5, r22	; 0x05
    ad84:	14 2f       	mov	r17, r20
    ad86:	7a 83       	std	Y+2, r23	; 0x02
    ad88:	69 83       	std	Y+1, r22	; 0x01
    ad8a:	ce 01       	movw	r24, r28
    ad8c:	01 96       	adiw	r24, 0x01	; 1
    ad8e:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <get_ldnumber>
    ad92:	97 fd       	sbrc	r25, 7
    ad94:	22 c0       	rjmp	.+68     	; 0xadda <f_mount+0x6a>
    ad96:	88 0f       	add	r24, r24
    ad98:	99 1f       	adc	r25, r25
    ad9a:	fc 01       	movw	r30, r24
    ad9c:	ee 58       	subi	r30, 0x8E	; 142
    ad9e:	f7 4e       	sbci	r31, 0xE7	; 231
    ada0:	01 90       	ld	r0, Z+
    ada2:	f0 81       	ld	r31, Z
    ada4:	e0 2d       	mov	r30, r0
    ada6:	30 97       	sbiw	r30, 0x00	; 0
    ada8:	09 f0       	breq	.+2      	; 0xadac <f_mount+0x3c>
    adaa:	10 82       	st	Z, r1
    adac:	eb 81       	ldd	r30, Y+3	; 0x03
    adae:	fc 81       	ldd	r31, Y+4	; 0x04
    adb0:	30 97       	sbiw	r30, 0x00	; 0
    adb2:	09 f0       	breq	.+2      	; 0xadb6 <f_mount+0x46>
    adb4:	10 82       	st	Z, r1
    adb6:	dc 01       	movw	r26, r24
    adb8:	ae 58       	subi	r26, 0x8E	; 142
    adba:	b7 4e       	sbci	r27, 0xE7	; 231
    adbc:	ed 93       	st	X+, r30
    adbe:	fc 93       	st	X, r31
    adc0:	ef 2b       	or	r30, r31
    adc2:	71 f0       	breq	.+28     	; 0xade0 <f_mount+0x70>
    adc4:	11 30       	cpi	r17, 0x01	; 1
    adc6:	61 f4       	brne	.+24     	; 0xade0 <f_mount+0x70>
    adc8:	40 e0       	ldi	r20, 0x00	; 0
    adca:	be 01       	movw	r22, r28
    adcc:	6d 5f       	subi	r22, 0xFD	; 253
    adce:	7f 4f       	sbci	r23, 0xFF	; 255
    add0:	ce 01       	movw	r24, r28
    add2:	05 96       	adiw	r24, 0x05	; 5
    add4:	0e 94 11 48 	call	0x9022	; 0x9022 <find_volume>
    add8:	05 c0       	rjmp	.+10     	; 0xade4 <f_mount+0x74>
    adda:	8b e0       	ldi	r24, 0x0B	; 11
    addc:	90 e0       	ldi	r25, 0x00	; 0
    adde:	02 c0       	rjmp	.+4      	; 0xade4 <f_mount+0x74>
    ade0:	80 e0       	ldi	r24, 0x00	; 0
    ade2:	90 e0       	ldi	r25, 0x00	; 0
    ade4:	26 96       	adiw	r28, 0x06	; 6
    ade6:	e3 e0       	ldi	r30, 0x03	; 3
    ade8:	0c 94 ba e9 	jmp	0x1d374	; 0x1d374 <__epilogue_restores__+0x1e>

0000adec <f_open>:
    adec:	2f 92       	push	r2
    adee:	3f 92       	push	r3
    adf0:	4f 92       	push	r4
    adf2:	5f 92       	push	r5
    adf4:	6f 92       	push	r6
    adf6:	7f 92       	push	r7
    adf8:	8f 92       	push	r8
    adfa:	9f 92       	push	r9
    adfc:	af 92       	push	r10
    adfe:	bf 92       	push	r11
    ae00:	df 92       	push	r13
    ae02:	ef 92       	push	r14
    ae04:	ff 92       	push	r15
    ae06:	0f 93       	push	r16
    ae08:	1f 93       	push	r17
    ae0a:	cf 93       	push	r28
    ae0c:	df 93       	push	r29
    ae0e:	cd b7       	in	r28, 0x3d	; 61
    ae10:	de b7       	in	r29, 0x3e	; 62
    ae12:	e6 97       	sbiw	r28, 0x36	; 54
    ae14:	0f b6       	in	r0, 0x3f	; 63
    ae16:	f8 94       	cli
    ae18:	de bf       	out	0x3e, r29	; 62
    ae1a:	0f be       	out	0x3f, r0	; 63
    ae1c:	cd bf       	out	0x3d, r28	; 61
    ae1e:	7a ab       	std	Y+50, r23	; 0x32
    ae20:	69 ab       	std	Y+49, r22	; 0x31
    ae22:	00 97       	sbiw	r24, 0x00	; 0
    ae24:	09 f4       	brne	.+2      	; 0xae28 <f_open+0x3c>
    ae26:	b0 c1       	rjmp	.+864    	; 0xb188 <f_open+0x39c>
    ae28:	94 2e       	mov	r9, r20
    ae2a:	7c 01       	movw	r14, r24
    ae2c:	24 2f       	mov	r18, r20
    ae2e:	2f 73       	andi	r18, 0x3F	; 63
    ae30:	d2 2e       	mov	r13, r18
    ae32:	42 2f       	mov	r20, r18
    ae34:	be 01       	movw	r22, r28
    ae36:	61 5d       	subi	r22, 0xD1	; 209
    ae38:	7f 4f       	sbci	r23, 0xFF	; 255
    ae3a:	ce 01       	movw	r24, r28
    ae3c:	c1 96       	adiw	r24, 0x31	; 49
    ae3e:	0e 94 11 48 	call	0x9022	; 0x9022 <find_volume>
    ae42:	00 97       	sbiw	r24, 0x00	; 0
    ae44:	09 f0       	breq	.+2      	; 0xae48 <f_open+0x5c>
    ae46:	9a c1       	rjmp	.+820    	; 0xb17c <f_open+0x390>
    ae48:	8f a5       	ldd	r24, Y+47	; 0x2f
    ae4a:	98 a9       	ldd	r25, Y+48	; 0x30
    ae4c:	9a 83       	std	Y+2, r25	; 0x02
    ae4e:	89 83       	std	Y+1, r24	; 0x01
    ae50:	80 e0       	ldi	r24, 0x00	; 0
    ae52:	92 e0       	ldi	r25, 0x02	; 2
    ae54:	0e 94 5f 6c 	call	0xd8be	; 0xd8be <ff_memalloc>
    ae58:	5c 01       	movw	r10, r24
    ae5a:	00 97       	sbiw	r24, 0x00	; 0
    ae5c:	09 f4       	brne	.+2      	; 0xae60 <f_open+0x74>
    ae5e:	96 c1       	rjmp	.+812    	; 0xb18c <f_open+0x3a0>
    ae60:	ef a5       	ldd	r30, Y+47	; 0x2f
    ae62:	f8 a9       	ldd	r31, Y+48	; 0x30
    ae64:	94 87       	std	Z+12, r25	; 0x0c
    ae66:	83 87       	std	Z+11, r24	; 0x0b
    ae68:	69 a9       	ldd	r22, Y+49	; 0x31
    ae6a:	7a a9       	ldd	r23, Y+50	; 0x32
    ae6c:	ce 01       	movw	r24, r28
    ae6e:	01 96       	adiw	r24, 0x01	; 1
    ae70:	5e dd       	rcall	.-1348   	; 0xa92e <follow_path>
    ae72:	8c 01       	movw	r16, r24
    ae74:	89 2b       	or	r24, r25
    ae76:	29 f4       	brne	.+10     	; 0xae82 <f_open+0x96>
    ae78:	88 a5       	ldd	r24, Y+40	; 0x28
    ae7a:	87 ff       	sbrs	r24, 7
    ae7c:	02 c0       	rjmp	.+4      	; 0xae82 <f_open+0x96>
    ae7e:	06 e0       	ldi	r16, 0x06	; 6
    ae80:	10 e0       	ldi	r17, 0x00	; 0
    ae82:	89 2d       	mov	r24, r9
    ae84:	8c 71       	andi	r24, 0x1C	; 28
    ae86:	09 f4       	brne	.+2      	; 0xae8a <f_open+0x9e>
    ae88:	7e c0       	rjmp	.+252    	; 0xaf86 <f_open+0x19a>
    ae8a:	01 15       	cp	r16, r1
    ae8c:	11 05       	cpc	r17, r1
    ae8e:	79 f0       	breq	.+30     	; 0xaeae <f_open+0xc2>
    ae90:	04 30       	cpi	r16, 0x04	; 4
    ae92:	11 05       	cpc	r17, r1
    ae94:	09 f0       	breq	.+2      	; 0xae98 <f_open+0xac>
    ae96:	8a c1       	rjmp	.+788    	; 0xb1ac <f_open+0x3c0>
    ae98:	ce 01       	movw	r24, r28
    ae9a:	01 96       	adiw	r24, 0x01	; 1
    ae9c:	a4 db       	rcall	.-2232   	; 0xa5e6 <dir_register>
    ae9e:	8c 01       	movw	r16, r24
    aea0:	89 2b       	or	r24, r25
    aea2:	09 f0       	breq	.+2      	; 0xaea6 <f_open+0xba>
    aea4:	83 c1       	rjmp	.+774    	; 0xb1ac <f_open+0x3c0>
    aea6:	8d 2d       	mov	r24, r13
    aea8:	88 60       	ori	r24, 0x08	; 8
    aeaa:	d8 2e       	mov	r13, r24
    aeac:	06 c0       	rjmp	.+12     	; 0xaeba <f_open+0xce>
    aeae:	8d 81       	ldd	r24, Y+5	; 0x05
    aeb0:	81 71       	andi	r24, 0x11	; 17
    aeb2:	09 f0       	breq	.+2      	; 0xaeb6 <f_open+0xca>
    aeb4:	79 c1       	rjmp	.+754    	; 0xb1a8 <f_open+0x3bc>
    aeb6:	92 fc       	sbrc	r9, 2
    aeb8:	6e c1       	rjmp	.+732    	; 0xb196 <f_open+0x3aa>
    aeba:	d3 fe       	sbrs	r13, 3
    aebc:	74 c0       	rjmp	.+232    	; 0xafa6 <f_open+0x1ba>
    aebe:	0e 94 61 73 	call	0xe6c2	; 0xe6c2 <get_fattime>
    aec2:	2b 01       	movw	r4, r22
    aec4:	3c 01       	movw	r6, r24
    aec6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    aec8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    aeca:	b3 01       	movw	r22, r6
    aecc:	a2 01       	movw	r20, r4
    aece:	0e 96       	adiw	r24, 0x0e	; 14
    aed0:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <st_dword>
    aed4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    aed6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    aed8:	b3 01       	movw	r22, r6
    aeda:	a2 01       	movw	r20, r4
    aedc:	46 96       	adiw	r24, 0x16	; 22
    aede:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <st_dword>
    aee2:	eb 8d       	ldd	r30, Y+27	; 0x1b
    aee4:	fc 8d       	ldd	r31, Y+28	; 0x1c
    aee6:	80 e2       	ldi	r24, 0x20	; 32
    aee8:	83 87       	std	Z+11, r24	; 0x0b
    aeea:	0b 8d       	ldd	r16, Y+27	; 0x1b
    aeec:	1c 8d       	ldd	r17, Y+28	; 0x1c
    aeee:	8f a4       	ldd	r8, Y+47	; 0x2f
    aef0:	98 a8       	ldd	r9, Y+48	; 0x30
    aef2:	b8 01       	movw	r22, r16
    aef4:	d4 01       	movw	r26, r8
    aef6:	8c 91       	ld	r24, X
    aef8:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <ld_clust.isra.1>
    aefc:	2b 01       	movw	r4, r22
    aefe:	3c 01       	movw	r6, r24
    af00:	f8 01       	movw	r30, r16
    af02:	12 8e       	std	Z+26, r1	; 0x1a
    af04:	13 8e       	std	Z+27, r1	; 0x1b
    af06:	d4 01       	movw	r26, r8
    af08:	8c 91       	ld	r24, X
    af0a:	83 30       	cpi	r24, 0x03	; 3
    af0c:	11 f4       	brne	.+4      	; 0xaf12 <f_open+0x126>
    af0e:	14 8a       	std	Z+20, r1	; 0x14
    af10:	15 8a       	std	Z+21, r1	; 0x15
    af12:	eb 8d       	ldd	r30, Y+27	; 0x1b
    af14:	fc 8d       	ldd	r31, Y+28	; 0x1c
    af16:	14 8e       	std	Z+28, r1	; 0x1c
    af18:	15 8e       	std	Z+29, r1	; 0x1d
    af1a:	16 8e       	std	Z+30, r1	; 0x1e
    af1c:	17 8e       	std	Z+31, r1	; 0x1f
    af1e:	81 e0       	ldi	r24, 0x01	; 1
    af20:	f4 01       	movw	r30, r8
    af22:	83 83       	std	Z+3, r24	; 0x03
    af24:	41 14       	cp	r4, r1
    af26:	51 04       	cpc	r5, r1
    af28:	61 04       	cpc	r6, r1
    af2a:	71 04       	cpc	r7, r1
    af2c:	c9 f1       	breq	.+114    	; 0xafa0 <f_open+0x1b4>
    af2e:	81 a9       	ldd	r24, Z+49	; 0x31
    af30:	92 a9       	ldd	r25, Z+50	; 0x32
    af32:	a3 a9       	ldd	r26, Z+51	; 0x33
    af34:	b4 a9       	ldd	r27, Z+52	; 0x34
    af36:	8b ab       	std	Y+51, r24	; 0x33
    af38:	9c ab       	std	Y+52, r25	; 0x34
    af3a:	ad ab       	std	Y+53, r26	; 0x35
    af3c:	be ab       	std	Y+54, r27	; 0x36
    af3e:	00 e0       	ldi	r16, 0x00	; 0
    af40:	10 e0       	ldi	r17, 0x00	; 0
    af42:	98 01       	movw	r18, r16
    af44:	b3 01       	movw	r22, r6
    af46:	a2 01       	movw	r20, r4
    af48:	ce 01       	movw	r24, r28
    af4a:	01 96       	adiw	r24, 0x01	; 1
    af4c:	0e 94 fb 4d 	call	0x9bf6	; 0x9bf6 <remove_chain>
    af50:	8c 01       	movw	r16, r24
    af52:	89 2b       	or	r24, r25
    af54:	09 f0       	breq	.+2      	; 0xaf58 <f_open+0x16c>
    af56:	2a c1       	rjmp	.+596    	; 0xb1ac <f_open+0x3c0>
    af58:	4b a9       	ldd	r20, Y+51	; 0x33
    af5a:	5c a9       	ldd	r21, Y+52	; 0x34
    af5c:	6d a9       	ldd	r22, Y+53	; 0x35
    af5e:	7e a9       	ldd	r23, Y+54	; 0x36
    af60:	8f a5       	ldd	r24, Y+47	; 0x2f
    af62:	98 a9       	ldd	r25, Y+48	; 0x30
    af64:	0e 94 91 47 	call	0x8f22	; 0x8f22 <move_window>
    af68:	8c 01       	movw	r16, r24
    af6a:	ef a5       	ldd	r30, Y+47	; 0x2f
    af6c:	f8 a9       	ldd	r31, Y+48	; 0x30
    af6e:	b1 e0       	ldi	r27, 0x01	; 1
    af70:	4b 1a       	sub	r4, r27
    af72:	51 08       	sbc	r5, r1
    af74:	61 08       	sbc	r6, r1
    af76:	71 08       	sbc	r7, r1
    af78:	45 86       	std	Z+13, r4	; 0x0d
    af7a:	56 86       	std	Z+14, r5	; 0x0e
    af7c:	67 86       	std	Z+15, r6	; 0x0f
    af7e:	70 8a       	std	Z+16, r7	; 0x10
    af80:	89 2b       	or	r24, r25
    af82:	61 f0       	breq	.+24     	; 0xaf9c <f_open+0x1b0>
    af84:	13 c1       	rjmp	.+550    	; 0xb1ac <f_open+0x3c0>
    af86:	01 15       	cp	r16, r1
    af88:	11 05       	cpc	r17, r1
    af8a:	09 f0       	breq	.+2      	; 0xaf8e <f_open+0x1a2>
    af8c:	0f c1       	rjmp	.+542    	; 0xb1ac <f_open+0x3c0>
    af8e:	8d 81       	ldd	r24, Y+5	; 0x05
    af90:	84 fd       	sbrc	r24, 4
    af92:	07 c1       	rjmp	.+526    	; 0xb1a2 <f_open+0x3b6>
    af94:	91 fe       	sbrs	r9, 1
    af96:	02 c0       	rjmp	.+4      	; 0xaf9c <f_open+0x1b0>
    af98:	80 fd       	sbrc	r24, 0
    af9a:	06 c1       	rjmp	.+524    	; 0xb1a8 <f_open+0x3bc>
    af9c:	d3 fe       	sbrs	r13, 3
    af9e:	03 c0       	rjmp	.+6      	; 0xafa6 <f_open+0x1ba>
    afa0:	ed 2d       	mov	r30, r13
    afa2:	e0 64       	ori	r30, 0x40	; 64
    afa4:	de 2e       	mov	r13, r30
    afa6:	0f a5       	ldd	r16, Y+47	; 0x2f
    afa8:	18 a9       	ldd	r17, Y+48	; 0x30
    afaa:	f8 01       	movw	r30, r16
    afac:	81 a9       	ldd	r24, Z+49	; 0x31
    afae:	92 a9       	ldd	r25, Z+50	; 0x32
    afb0:	a3 a9       	ldd	r26, Z+51	; 0x33
    afb2:	b4 a9       	ldd	r27, Z+52	; 0x34
    afb4:	f7 01       	movw	r30, r14
    afb6:	84 8f       	std	Z+28, r24	; 0x1c
    afb8:	95 8f       	std	Z+29, r25	; 0x1d
    afba:	a6 8f       	std	Z+30, r26	; 0x1e
    afbc:	b7 8f       	std	Z+31, r27	; 0x1f
    afbe:	8b 8c       	ldd	r8, Y+27	; 0x1b
    afc0:	9c 8c       	ldd	r9, Y+28	; 0x1c
    afc2:	91 a2       	std	Z+33, r9	; 0x21
    afc4:	80 a2       	std	Z+32, r8	; 0x20
    afc6:	b4 01       	movw	r22, r8
    afc8:	d8 01       	movw	r26, r16
    afca:	8c 91       	ld	r24, X
    afcc:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <ld_clust.isra.1>
    afd0:	f7 01       	movw	r30, r14
    afd2:	66 83       	std	Z+6, r22	; 0x06
    afd4:	77 83       	std	Z+7, r23	; 0x07
    afd6:	80 87       	std	Z+8, r24	; 0x08
    afd8:	91 87       	std	Z+9, r25	; 0x09
    afda:	c4 01       	movw	r24, r8
    afdc:	4c 96       	adiw	r24, 0x1c	; 28
    afde:	0e 94 ba 45 	call	0x8b74	; 0x8b74 <ld_dword>
    afe2:	d7 01       	movw	r26, r14
    afe4:	1a 96       	adiw	r26, 0x0a	; 10
    afe6:	6d 93       	st	X+, r22
    afe8:	7d 93       	st	X+, r23
    afea:	8d 93       	st	X+, r24
    afec:	9c 93       	st	X, r25
    afee:	1d 97       	sbiw	r26, 0x0d	; 13
    aff0:	93 96       	adiw	r26, 0x23	; 35
    aff2:	1c 92       	st	X, r1
    aff4:	1e 92       	st	-X, r1
    aff6:	92 97       	sbiw	r26, 0x22	; 34
    aff8:	11 96       	adiw	r26, 0x01	; 1
    affa:	1c 93       	st	X, r17
    affc:	0e 93       	st	-X, r16
    affe:	f8 01       	movw	r30, r16
    b000:	85 81       	ldd	r24, Z+5	; 0x05
    b002:	96 81       	ldd	r25, Z+6	; 0x06
    b004:	13 96       	adiw	r26, 0x03	; 3
    b006:	9c 93       	st	X, r25
    b008:	8e 93       	st	-X, r24
    b00a:	12 97       	sbiw	r26, 0x02	; 2
    b00c:	1e 96       	adiw	r26, 0x0e	; 14
    b00e:	dc 92       	st	X, r13
    b010:	1e 97       	sbiw	r26, 0x0e	; 14
    b012:	1f 96       	adiw	r26, 0x0f	; 15
    b014:	1c 92       	st	X, r1
    b016:	1f 97       	sbiw	r26, 0x0f	; 15
    b018:	58 96       	adiw	r26, 0x18	; 24
    b01a:	1d 92       	st	X+, r1
    b01c:	1d 92       	st	X+, r1
    b01e:	1d 92       	st	X+, r1
    b020:	1c 92       	st	X, r1
    b022:	5b 97       	sbiw	r26, 0x1b	; 27
    b024:	f7 01       	movw	r30, r14
    b026:	10 8a       	std	Z+16, r1	; 0x10
    b028:	11 8a       	std	Z+17, r1	; 0x11
    b02a:	12 8a       	std	Z+18, r1	; 0x12
    b02c:	13 8a       	std	Z+19, r1	; 0x13
    b02e:	c7 01       	movw	r24, r14
    b030:	84 96       	adiw	r24, 0x24	; 36
    b032:	9c ab       	std	Y+52, r25	; 0x34
    b034:	8b ab       	std	Y+51, r24	; 0x33
    b036:	40 e0       	ldi	r20, 0x00	; 0
    b038:	52 e0       	ldi	r21, 0x02	; 2
    b03a:	60 e0       	ldi	r22, 0x00	; 0
    b03c:	70 e0       	ldi	r23, 0x00	; 0
    b03e:	0e 94 d5 45 	call	0x8baa	; 0x8baa <mem_set>
    b042:	d5 fc       	sbrc	r13, 5
    b044:	03 c0       	rjmp	.+6      	; 0xb04c <f_open+0x260>
    b046:	00 e0       	ldi	r16, 0x00	; 0
    b048:	10 e0       	ldi	r17, 0x00	; 0
    b04a:	91 c0       	rjmp	.+290    	; 0xb16e <f_open+0x382>
    b04c:	d7 01       	movw	r26, r14
    b04e:	1a 96       	adiw	r26, 0x0a	; 10
    b050:	2d 90       	ld	r2, X+
    b052:	3d 90       	ld	r3, X+
    b054:	4d 90       	ld	r4, X+
    b056:	5c 90       	ld	r5, X
    b058:	1d 97       	sbiw	r26, 0x0d	; 13
    b05a:	21 14       	cp	r2, r1
    b05c:	31 04       	cpc	r3, r1
    b05e:	41 04       	cpc	r4, r1
    b060:	51 04       	cpc	r5, r1
    b062:	89 f3       	breq	.-30     	; 0xb046 <f_open+0x25a>
    b064:	f7 01       	movw	r30, r14
    b066:	20 8a       	std	Z+16, r2	; 0x10
    b068:	31 8a       	std	Z+17, r3	; 0x11
    b06a:	42 8a       	std	Z+18, r4	; 0x12
    b06c:	53 8a       	std	Z+19, r5	; 0x13
    b06e:	ef a5       	ldd	r30, Y+47	; 0x2f
    b070:	f8 a9       	ldd	r31, Y+48	; 0x30
    b072:	81 85       	ldd	r24, Z+9	; 0x09
    b074:	92 85       	ldd	r25, Z+10	; 0x0a
    b076:	a0 e0       	ldi	r26, 0x00	; 0
    b078:	b0 e0       	ldi	r27, 0x00	; 0
    b07a:	3c 01       	movw	r6, r24
    b07c:	4d 01       	movw	r8, r26
    b07e:	59 e0       	ldi	r21, 0x09	; 9
    b080:	66 0c       	add	r6, r6
    b082:	77 1c       	adc	r7, r7
    b084:	88 1c       	adc	r8, r8
    b086:	99 1c       	adc	r9, r9
    b088:	5a 95       	dec	r21
    b08a:	d1 f7       	brne	.-12     	; 0xb080 <f_open+0x294>
    b08c:	d7 01       	movw	r26, r14
    b08e:	16 96       	adiw	r26, 0x06	; 6
    b090:	4d 91       	ld	r20, X+
    b092:	5d 91       	ld	r21, X+
    b094:	6d 91       	ld	r22, X+
    b096:	7c 91       	ld	r23, X
    b098:	19 97       	sbiw	r26, 0x09	; 9
    b09a:	62 14       	cp	r6, r2
    b09c:	73 04       	cpc	r7, r3
    b09e:	84 04       	cpc	r8, r4
    b0a0:	95 04       	cpc	r9, r5
    b0a2:	f0 f4       	brcc	.+60     	; 0xb0e0 <f_open+0x2f4>
    b0a4:	f7 01       	movw	r30, r14
    b0a6:	80 81       	ld	r24, Z
    b0a8:	91 81       	ldd	r25, Z+1	; 0x01
    b0aa:	0e 94 b7 4b 	call	0x976e	; 0x976e <get_fat.isra.7>
    b0ae:	ab 01       	movw	r20, r22
    b0b0:	bc 01       	movw	r22, r24
    b0b2:	d2 01       	movw	r26, r4
    b0b4:	c1 01       	movw	r24, r2
    b0b6:	86 19       	sub	r24, r6
    b0b8:	97 09       	sbc	r25, r7
    b0ba:	a8 09       	sbc	r26, r8
    b0bc:	b9 09       	sbc	r27, r9
    b0be:	1c 01       	movw	r2, r24
    b0c0:	2d 01       	movw	r4, r26
    b0c2:	42 30       	cpi	r20, 0x02	; 2
    b0c4:	51 05       	cpc	r21, r1
    b0c6:	61 05       	cpc	r22, r1
    b0c8:	71 05       	cpc	r23, r1
    b0ca:	08 f4       	brcc	.+2      	; 0xb0ce <f_open+0x2e2>
    b0cc:	67 c0       	rjmp	.+206    	; 0xb19c <f_open+0x3b0>
    b0ce:	4f 3f       	cpi	r20, 0xFF	; 255
    b0d0:	ff ef       	ldi	r31, 0xFF	; 255
    b0d2:	5f 07       	cpc	r21, r31
    b0d4:	6f 07       	cpc	r22, r31
    b0d6:	7f 07       	cpc	r23, r31
    b0d8:	01 f7       	brne	.-64     	; 0xb09a <f_open+0x2ae>
    b0da:	01 e0       	ldi	r16, 0x01	; 1
    b0dc:	10 e0       	ldi	r17, 0x00	; 0
    b0de:	02 c0       	rjmp	.+4      	; 0xb0e4 <f_open+0x2f8>
    b0e0:	00 e0       	ldi	r16, 0x00	; 0
    b0e2:	10 e0       	ldi	r17, 0x00	; 0
    b0e4:	d7 01       	movw	r26, r14
    b0e6:	54 96       	adiw	r26, 0x14	; 20
    b0e8:	4d 93       	st	X+, r20
    b0ea:	5d 93       	st	X+, r21
    b0ec:	6d 93       	st	X+, r22
    b0ee:	7c 93       	st	X, r23
    b0f0:	57 97       	sbiw	r26, 0x17	; 23
    b0f2:	01 15       	cp	r16, r1
    b0f4:	11 05       	cpc	r17, r1
    b0f6:	d9 f5       	brne	.+118    	; 0xb16e <f_open+0x382>
    b0f8:	d2 01       	movw	r26, r4
    b0fa:	c1 01       	movw	r24, r2
    b0fc:	91 70       	andi	r25, 0x01	; 1
    b0fe:	aa 27       	eor	r26, r26
    b100:	bb 27       	eor	r27, r27
    b102:	89 2b       	or	r24, r25
    b104:	8a 2b       	or	r24, r26
    b106:	8b 2b       	or	r24, r27
    b108:	09 f4       	brne	.+2      	; 0xb10c <f_open+0x320>
    b10a:	9d cf       	rjmp	.-198    	; 0xb046 <f_open+0x25a>
    b10c:	6f a4       	ldd	r6, Y+47	; 0x2f
    b10e:	78 a8       	ldd	r7, Y+48	; 0x30
    b110:	c3 01       	movw	r24, r6
    b112:	0e 94 de 45 	call	0x8bbc	; 0x8bbc <clust2sect>
    b116:	61 15       	cp	r22, r1
    b118:	71 05       	cpc	r23, r1
    b11a:	81 05       	cpc	r24, r1
    b11c:	91 05       	cpc	r25, r1
    b11e:	29 f1       	breq	.+74     	; 0xb16a <f_open+0x37e>
    b120:	92 01       	movw	r18, r4
    b122:	81 01       	movw	r16, r2
    b124:	49 e0       	ldi	r20, 0x09	; 9
    b126:	36 95       	lsr	r19
    b128:	27 95       	ror	r18
    b12a:	17 95       	ror	r17
    b12c:	07 95       	ror	r16
    b12e:	4a 95       	dec	r20
    b130:	d1 f7       	brne	.-12     	; 0xb126 <f_open+0x33a>
    b132:	a9 01       	movw	r20, r18
    b134:	98 01       	movw	r18, r16
    b136:	26 0f       	add	r18, r22
    b138:	37 1f       	adc	r19, r23
    b13a:	48 1f       	adc	r20, r24
    b13c:	59 1f       	adc	r21, r25
    b13e:	f7 01       	movw	r30, r14
    b140:	20 8f       	std	Z+24, r18	; 0x18
    b142:	31 8f       	std	Z+25, r19	; 0x19
    b144:	42 8f       	std	Z+26, r20	; 0x1a
    b146:	53 8f       	std	Z+27, r21	; 0x1b
    b148:	01 e0       	ldi	r16, 0x01	; 1
    b14a:	10 e0       	ldi	r17, 0x00	; 0
    b14c:	6b a9       	ldd	r22, Y+51	; 0x33
    b14e:	7c a9       	ldd	r23, Y+52	; 0x34
    b150:	d3 01       	movw	r26, r6
    b152:	11 96       	adiw	r26, 0x01	; 1
    b154:	8c 91       	ld	r24, X
    b156:	0e 94 ec 6c 	call	0xd9d8	; 0xd9d8 <disk_read>
    b15a:	31 e0       	ldi	r19, 0x01	; 1
    b15c:	20 e0       	ldi	r18, 0x00	; 0
    b15e:	89 2b       	or	r24, r25
    b160:	09 f4       	brne	.+2      	; 0xb164 <f_open+0x378>
    b162:	30 e0       	ldi	r19, 0x00	; 0
    b164:	03 2f       	mov	r16, r19
    b166:	12 2f       	mov	r17, r18
    b168:	02 c0       	rjmp	.+4      	; 0xb16e <f_open+0x382>
    b16a:	02 e0       	ldi	r16, 0x02	; 2
    b16c:	10 e0       	ldi	r17, 0x00	; 0
    b16e:	c5 01       	movw	r24, r10
    b170:	0e 94 62 6c 	call	0xd8c4	; 0xd8c4 <ff_memfree>
    b174:	01 15       	cp	r16, r1
    b176:	11 05       	cpc	r17, r1
    b178:	59 f0       	breq	.+22     	; 0xb190 <f_open+0x3a4>
    b17a:	01 c0       	rjmp	.+2      	; 0xb17e <f_open+0x392>
    b17c:	8c 01       	movw	r16, r24
    b17e:	f7 01       	movw	r30, r14
    b180:	11 82       	std	Z+1, r1	; 0x01
    b182:	10 82       	st	Z, r1
    b184:	c8 01       	movw	r24, r16
    b186:	16 c0       	rjmp	.+44     	; 0xb1b4 <f_open+0x3c8>
    b188:	89 e0       	ldi	r24, 0x09	; 9
    b18a:	03 c0       	rjmp	.+6      	; 0xb192 <f_open+0x3a6>
    b18c:	81 e1       	ldi	r24, 0x11	; 17
    b18e:	01 c0       	rjmp	.+2      	; 0xb192 <f_open+0x3a6>
    b190:	80 e0       	ldi	r24, 0x00	; 0
    b192:	90 e0       	ldi	r25, 0x00	; 0
    b194:	0f c0       	rjmp	.+30     	; 0xb1b4 <f_open+0x3c8>
    b196:	08 e0       	ldi	r16, 0x08	; 8
    b198:	10 e0       	ldi	r17, 0x00	; 0
    b19a:	08 c0       	rjmp	.+16     	; 0xb1ac <f_open+0x3c0>
    b19c:	02 e0       	ldi	r16, 0x02	; 2
    b19e:	10 e0       	ldi	r17, 0x00	; 0
    b1a0:	a1 cf       	rjmp	.-190    	; 0xb0e4 <f_open+0x2f8>
    b1a2:	04 e0       	ldi	r16, 0x04	; 4
    b1a4:	10 e0       	ldi	r17, 0x00	; 0
    b1a6:	02 c0       	rjmp	.+4      	; 0xb1ac <f_open+0x3c0>
    b1a8:	07 e0       	ldi	r16, 0x07	; 7
    b1aa:	10 e0       	ldi	r17, 0x00	; 0
    b1ac:	c5 01       	movw	r24, r10
    b1ae:	0e 94 62 6c 	call	0xd8c4	; 0xd8c4 <ff_memfree>
    b1b2:	e5 cf       	rjmp	.-54     	; 0xb17e <f_open+0x392>
    b1b4:	e6 96       	adiw	r28, 0x36	; 54
    b1b6:	0f b6       	in	r0, 0x3f	; 63
    b1b8:	f8 94       	cli
    b1ba:	de bf       	out	0x3e, r29	; 62
    b1bc:	0f be       	out	0x3f, r0	; 63
    b1be:	cd bf       	out	0x3d, r28	; 61
    b1c0:	df 91       	pop	r29
    b1c2:	cf 91       	pop	r28
    b1c4:	1f 91       	pop	r17
    b1c6:	0f 91       	pop	r16
    b1c8:	ff 90       	pop	r15
    b1ca:	ef 90       	pop	r14
    b1cc:	df 90       	pop	r13
    b1ce:	bf 90       	pop	r11
    b1d0:	af 90       	pop	r10
    b1d2:	9f 90       	pop	r9
    b1d4:	8f 90       	pop	r8
    b1d6:	7f 90       	pop	r7
    b1d8:	6f 90       	pop	r6
    b1da:	5f 90       	pop	r5
    b1dc:	4f 90       	pop	r4
    b1de:	3f 90       	pop	r3
    b1e0:	2f 90       	pop	r2
    b1e2:	08 95       	ret

0000b1e4 <f_read>:
    b1e4:	a6 e0       	ldi	r26, 0x06	; 6
    b1e6:	b0 e0       	ldi	r27, 0x00	; 0
    b1e8:	e8 ef       	ldi	r30, 0xF8	; 248
    b1ea:	f8 e5       	ldi	r31, 0x58	; 88
    b1ec:	0c 94 8f e9 	jmp	0x1d31e	; 0x1d31e <__prologue_saves__>
    b1f0:	7c 01       	movw	r14, r24
    b1f2:	4b 01       	movw	r8, r22
    b1f4:	5a 01       	movw	r10, r20
    b1f6:	3e 83       	std	Y+6, r19	; 0x06
    b1f8:	2d 83       	std	Y+5, r18	; 0x05
    b1fa:	f9 01       	movw	r30, r18
    b1fc:	11 82       	std	Z+1, r1	; 0x01
    b1fe:	10 82       	st	Z, r1
    b200:	be 01       	movw	r22, r28
    b202:	6f 5f       	subi	r22, 0xFF	; 255
    b204:	7f 4f       	sbci	r23, 0xFF	; 255
    b206:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <validate>
    b20a:	00 97       	sbiw	r24, 0x00	; 0
    b20c:	09 f0       	breq	.+2      	; 0xb210 <f_read+0x2c>
    b20e:	31 c1       	rjmp	.+610    	; 0xb472 <f_read+0x28e>
    b210:	f7 01       	movw	r30, r14
    b212:	87 85       	ldd	r24, Z+15	; 0x0f
    b214:	90 e0       	ldi	r25, 0x00	; 0
    b216:	00 97       	sbiw	r24, 0x00	; 0
    b218:	09 f0       	breq	.+2      	; 0xb21c <f_read+0x38>
    b21a:	2b c1       	rjmp	.+598    	; 0xb472 <f_read+0x28e>
    b21c:	86 85       	ldd	r24, Z+14	; 0x0e
    b21e:	80 ff       	sbrs	r24, 0
    b220:	26 c1       	rjmp	.+588    	; 0xb46e <f_read+0x28a>
    b222:	82 85       	ldd	r24, Z+10	; 0x0a
    b224:	93 85       	ldd	r25, Z+11	; 0x0b
    b226:	a4 85       	ldd	r26, Z+12	; 0x0c
    b228:	b5 85       	ldd	r27, Z+13	; 0x0d
    b22a:	40 89       	ldd	r20, Z+16	; 0x10
    b22c:	51 89       	ldd	r21, Z+17	; 0x11
    b22e:	62 89       	ldd	r22, Z+18	; 0x12
    b230:	73 89       	ldd	r23, Z+19	; 0x13
    b232:	84 1b       	sub	r24, r20
    b234:	95 0b       	sbc	r25, r21
    b236:	a6 0b       	sbc	r26, r22
    b238:	b7 0b       	sbc	r27, r23
    b23a:	a5 01       	movw	r20, r10
    b23c:	60 e0       	ldi	r22, 0x00	; 0
    b23e:	70 e0       	ldi	r23, 0x00	; 0
    b240:	84 17       	cp	r24, r20
    b242:	95 07       	cpc	r25, r21
    b244:	a6 07       	cpc	r26, r22
    b246:	b7 07       	cpc	r27, r23
    b248:	08 f4       	brcc	.+2      	; 0xb24c <f_read+0x68>
    b24a:	5c 01       	movw	r10, r24
    b24c:	17 01       	movw	r2, r14
    b24e:	f4 e2       	ldi	r31, 0x24	; 36
    b250:	2f 0e       	add	r2, r31
    b252:	31 1c       	adc	r3, r1
    b254:	a1 14       	cp	r10, r1
    b256:	b1 04       	cpc	r11, r1
    b258:	09 f4       	brne	.+2      	; 0xb25c <f_read+0x78>
    b25a:	07 c1       	rjmp	.+526    	; 0xb46a <f_read+0x286>
    b25c:	f7 01       	movw	r30, r14
    b25e:	40 89       	ldd	r20, Z+16	; 0x10
    b260:	51 89       	ldd	r21, Z+17	; 0x11
    b262:	62 89       	ldd	r22, Z+18	; 0x12
    b264:	73 89       	ldd	r23, Z+19	; 0x13
    b266:	db 01       	movw	r26, r22
    b268:	ca 01       	movw	r24, r20
    b26a:	91 70       	andi	r25, 0x01	; 1
    b26c:	aa 27       	eor	r26, r26
    b26e:	bb 27       	eor	r27, r27
    b270:	89 2b       	or	r24, r25
    b272:	8a 2b       	or	r24, r26
    b274:	8b 2b       	or	r24, r27
    b276:	09 f0       	breq	.+2      	; 0xb27a <f_read+0x96>
    b278:	cb c0       	rjmp	.+406    	; 0xb410 <f_read+0x22c>
    b27a:	e9 81       	ldd	r30, Y+1	; 0x01
    b27c:	fa 81       	ldd	r31, Y+2	; 0x02
    b27e:	01 85       	ldd	r16, Z+9	; 0x09
    b280:	12 85       	ldd	r17, Z+10	; 0x0a
    b282:	01 50       	subi	r16, 0x01	; 1
    b284:	11 09       	sbc	r17, r1
    b286:	db 01       	movw	r26, r22
    b288:	ca 01       	movw	r24, r20
    b28a:	e9 e0       	ldi	r30, 0x09	; 9
    b28c:	b6 95       	lsr	r27
    b28e:	a7 95       	ror	r26
    b290:	97 95       	ror	r25
    b292:	87 95       	ror	r24
    b294:	ea 95       	dec	r30
    b296:	d1 f7       	brne	.-12     	; 0xb28c <f_read+0xa8>
    b298:	08 23       	and	r16, r24
    b29a:	19 23       	and	r17, r25
    b29c:	01 15       	cp	r16, r1
    b29e:	11 05       	cpc	r17, r1
    b2a0:	91 f5       	brne	.+100    	; 0xb306 <f_read+0x122>
    b2a2:	f7 01       	movw	r30, r14
    b2a4:	41 15       	cp	r20, r1
    b2a6:	51 05       	cpc	r21, r1
    b2a8:	61 05       	cpc	r22, r1
    b2aa:	71 05       	cpc	r23, r1
    b2ac:	29 f4       	brne	.+10     	; 0xb2b8 <f_read+0xd4>
    b2ae:	66 81       	ldd	r22, Z+6	; 0x06
    b2b0:	77 81       	ldd	r23, Z+7	; 0x07
    b2b2:	80 85       	ldd	r24, Z+8	; 0x08
    b2b4:	91 85       	ldd	r25, Z+9	; 0x09
    b2b6:	11 c0       	rjmp	.+34     	; 0xb2da <f_read+0xf6>
    b2b8:	82 a1       	ldd	r24, Z+34	; 0x22
    b2ba:	93 a1       	ldd	r25, Z+35	; 0x23
    b2bc:	89 2b       	or	r24, r25
    b2be:	21 f0       	breq	.+8      	; 0xb2c8 <f_read+0xe4>
    b2c0:	c7 01       	movw	r24, r14
    b2c2:	0e 94 06 46 	call	0x8c0c	; 0x8c0c <clmt_clust>
    b2c6:	09 c0       	rjmp	.+18     	; 0xb2da <f_read+0xf6>
    b2c8:	f7 01       	movw	r30, r14
    b2ca:	44 89       	ldd	r20, Z+20	; 0x14
    b2cc:	55 89       	ldd	r21, Z+21	; 0x15
    b2ce:	66 89       	ldd	r22, Z+22	; 0x16
    b2d0:	77 89       	ldd	r23, Z+23	; 0x17
    b2d2:	80 81       	ld	r24, Z
    b2d4:	91 81       	ldd	r25, Z+1	; 0x01
    b2d6:	0e 94 b7 4b 	call	0x976e	; 0x976e <get_fat.isra.7>
    b2da:	62 30       	cpi	r22, 0x02	; 2
    b2dc:	71 05       	cpc	r23, r1
    b2de:	81 05       	cpc	r24, r1
    b2e0:	91 05       	cpc	r25, r1
    b2e2:	10 f4       	brcc	.+4      	; 0xb2e8 <f_read+0x104>
    b2e4:	82 e0       	ldi	r24, 0x02	; 2
    b2e6:	07 c0       	rjmp	.+14     	; 0xb2f6 <f_read+0x112>
    b2e8:	6f 3f       	cpi	r22, 0xFF	; 255
    b2ea:	ff ef       	ldi	r31, 0xFF	; 255
    b2ec:	7f 07       	cpc	r23, r31
    b2ee:	8f 07       	cpc	r24, r31
    b2f0:	9f 07       	cpc	r25, r31
    b2f2:	21 f4       	brne	.+8      	; 0xb2fc <f_read+0x118>
    b2f4:	81 e0       	ldi	r24, 0x01	; 1
    b2f6:	f7 01       	movw	r30, r14
    b2f8:	87 87       	std	Z+15, r24	; 0x0f
    b2fa:	ba c0       	rjmp	.+372    	; 0xb470 <f_read+0x28c>
    b2fc:	f7 01       	movw	r30, r14
    b2fe:	64 8b       	std	Z+20, r22	; 0x14
    b300:	75 8b       	std	Z+21, r23	; 0x15
    b302:	86 8b       	std	Z+22, r24	; 0x16
    b304:	97 8b       	std	Z+23, r25	; 0x17
    b306:	89 81       	ldd	r24, Y+1	; 0x01
    b308:	9a 81       	ldd	r25, Y+2	; 0x02
    b30a:	9c 83       	std	Y+4, r25	; 0x04
    b30c:	8b 83       	std	Y+3, r24	; 0x03
    b30e:	f7 01       	movw	r30, r14
    b310:	44 89       	ldd	r20, Z+20	; 0x14
    b312:	55 89       	ldd	r21, Z+21	; 0x15
    b314:	66 89       	ldd	r22, Z+22	; 0x16
    b316:	77 89       	ldd	r23, Z+23	; 0x17
    b318:	0e 94 de 45 	call	0x8bbc	; 0x8bbc <clust2sect>
    b31c:	61 15       	cp	r22, r1
    b31e:	71 05       	cpc	r23, r1
    b320:	81 05       	cpc	r24, r1
    b322:	91 05       	cpc	r25, r1
    b324:	f9 f2       	breq	.-66     	; 0xb2e4 <f_read+0x100>
    b326:	2b 01       	movw	r4, r22
    b328:	3c 01       	movw	r6, r24
    b32a:	40 0e       	add	r4, r16
    b32c:	51 1e       	adc	r5, r17
    b32e:	61 1c       	adc	r6, r1
    b330:	71 1c       	adc	r7, r1
    b332:	65 01       	movw	r12, r10
    b334:	cd 2c       	mov	r12, r13
    b336:	dd 24       	eor	r13, r13
    b338:	c6 94       	lsr	r12
    b33a:	c1 14       	cp	r12, r1
    b33c:	d1 04       	cpc	r13, r1
    b33e:	d1 f1       	breq	.+116    	; 0xb3b4 <f_read+0x1d0>
    b340:	eb 81       	ldd	r30, Y+3	; 0x03
    b342:	fc 81       	ldd	r31, Y+4	; 0x04
    b344:	81 85       	ldd	r24, Z+9	; 0x09
    b346:	92 85       	ldd	r25, Z+10	; 0x0a
    b348:	98 01       	movw	r18, r16
    b34a:	2c 0d       	add	r18, r12
    b34c:	3d 1d       	adc	r19, r13
    b34e:	82 17       	cp	r24, r18
    b350:	93 07       	cpc	r25, r19
    b352:	18 f4       	brcc	.+6      	; 0xb35a <f_read+0x176>
    b354:	6c 01       	movw	r12, r24
    b356:	c0 1a       	sub	r12, r16
    b358:	d1 0a       	sbc	r13, r17
    b35a:	86 01       	movw	r16, r12
    b35c:	a3 01       	movw	r20, r6
    b35e:	92 01       	movw	r18, r4
    b360:	b4 01       	movw	r22, r8
    b362:	eb 81       	ldd	r30, Y+3	; 0x03
    b364:	fc 81       	ldd	r31, Y+4	; 0x04
    b366:	81 81       	ldd	r24, Z+1	; 0x01
    b368:	0e 94 ec 6c 	call	0xd9d8	; 0xd9d8 <disk_read>
    b36c:	89 2b       	or	r24, r25
    b36e:	11 f6       	brne	.-124    	; 0xb2f4 <f_read+0x110>
    b370:	f7 01       	movw	r30, r14
    b372:	86 85       	ldd	r24, Z+14	; 0x0e
    b374:	87 ff       	sbrs	r24, 7
    b376:	1a c0       	rjmp	.+52     	; 0xb3ac <f_read+0x1c8>
    b378:	80 8d       	ldd	r24, Z+24	; 0x18
    b37a:	91 8d       	ldd	r25, Z+25	; 0x19
    b37c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b37e:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b380:	84 19       	sub	r24, r4
    b382:	95 09       	sbc	r25, r5
    b384:	a6 09       	sbc	r26, r6
    b386:	b7 09       	sbc	r27, r7
    b388:	a6 01       	movw	r20, r12
    b38a:	60 e0       	ldi	r22, 0x00	; 0
    b38c:	70 e0       	ldi	r23, 0x00	; 0
    b38e:	84 17       	cp	r24, r20
    b390:	95 07       	cpc	r25, r21
    b392:	a6 07       	cpc	r26, r22
    b394:	b7 07       	cpc	r27, r23
    b396:	50 f4       	brcc	.+20     	; 0xb3ac <f_read+0x1c8>
    b398:	98 2f       	mov	r25, r24
    b39a:	88 27       	eor	r24, r24
    b39c:	99 0f       	add	r25, r25
    b39e:	40 e0       	ldi	r20, 0x00	; 0
    b3a0:	52 e0       	ldi	r21, 0x02	; 2
    b3a2:	b1 01       	movw	r22, r2
    b3a4:	88 0d       	add	r24, r8
    b3a6:	99 1d       	adc	r25, r9
    b3a8:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <mem_cpy.part.0>
    b3ac:	dc 2c       	mov	r13, r12
    b3ae:	cc 24       	eor	r12, r12
    b3b0:	dd 0c       	add	r13, r13
    b3b2:	41 c0       	rjmp	.+130    	; 0xb436 <f_read+0x252>
    b3b4:	f7 01       	movw	r30, r14
    b3b6:	20 8d       	ldd	r18, Z+24	; 0x18
    b3b8:	31 8d       	ldd	r19, Z+25	; 0x19
    b3ba:	42 8d       	ldd	r20, Z+26	; 0x1a
    b3bc:	53 8d       	ldd	r21, Z+27	; 0x1b
    b3be:	42 16       	cp	r4, r18
    b3c0:	53 06       	cpc	r5, r19
    b3c2:	64 06       	cpc	r6, r20
    b3c4:	75 06       	cpc	r7, r21
    b3c6:	f9 f0       	breq	.+62     	; 0xb406 <f_read+0x222>
    b3c8:	86 85       	ldd	r24, Z+14	; 0x0e
    b3ca:	87 ff       	sbrs	r24, 7
    b3cc:	0f c0       	rjmp	.+30     	; 0xb3ec <f_read+0x208>
    b3ce:	01 e0       	ldi	r16, 0x01	; 1
    b3d0:	10 e0       	ldi	r17, 0x00	; 0
    b3d2:	b1 01       	movw	r22, r2
    b3d4:	eb 81       	ldd	r30, Y+3	; 0x03
    b3d6:	fc 81       	ldd	r31, Y+4	; 0x04
    b3d8:	81 81       	ldd	r24, Z+1	; 0x01
    b3da:	0e 94 fc 6c 	call	0xd9f8	; 0xd9f8 <disk_write>
    b3de:	89 2b       	or	r24, r25
    b3e0:	09 f0       	breq	.+2      	; 0xb3e4 <f_read+0x200>
    b3e2:	88 cf       	rjmp	.-240    	; 0xb2f4 <f_read+0x110>
    b3e4:	f7 01       	movw	r30, r14
    b3e6:	86 85       	ldd	r24, Z+14	; 0x0e
    b3e8:	8f 77       	andi	r24, 0x7F	; 127
    b3ea:	86 87       	std	Z+14, r24	; 0x0e
    b3ec:	e9 81       	ldd	r30, Y+1	; 0x01
    b3ee:	fa 81       	ldd	r31, Y+2	; 0x02
    b3f0:	01 e0       	ldi	r16, 0x01	; 1
    b3f2:	10 e0       	ldi	r17, 0x00	; 0
    b3f4:	a3 01       	movw	r20, r6
    b3f6:	92 01       	movw	r18, r4
    b3f8:	b1 01       	movw	r22, r2
    b3fa:	81 81       	ldd	r24, Z+1	; 0x01
    b3fc:	0e 94 ec 6c 	call	0xd9d8	; 0xd9d8 <disk_read>
    b400:	89 2b       	or	r24, r25
    b402:	09 f0       	breq	.+2      	; 0xb406 <f_read+0x222>
    b404:	77 cf       	rjmp	.-274    	; 0xb2f4 <f_read+0x110>
    b406:	f7 01       	movw	r30, r14
    b408:	40 8e       	std	Z+24, r4	; 0x18
    b40a:	51 8e       	std	Z+25, r5	; 0x19
    b40c:	62 8e       	std	Z+26, r6	; 0x1a
    b40e:	73 8e       	std	Z+27, r7	; 0x1b
    b410:	f7 01       	movw	r30, r14
    b412:	60 89       	ldd	r22, Z+16	; 0x10
    b414:	71 89       	ldd	r23, Z+17	; 0x11
    b416:	71 70       	andi	r23, 0x01	; 1
    b418:	80 e0       	ldi	r24, 0x00	; 0
    b41a:	92 e0       	ldi	r25, 0x02	; 2
    b41c:	86 1b       	sub	r24, r22
    b41e:	97 0b       	sbc	r25, r23
    b420:	65 01       	movw	r12, r10
    b422:	8a 15       	cp	r24, r10
    b424:	9b 05       	cpc	r25, r11
    b426:	08 f4       	brcc	.+2      	; 0xb42a <f_read+0x246>
    b428:	6c 01       	movw	r12, r24
    b42a:	62 0d       	add	r22, r2
    b42c:	73 1d       	adc	r23, r3
    b42e:	a6 01       	movw	r20, r12
    b430:	c4 01       	movw	r24, r8
    b432:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <mem_cpy.part.0>
    b436:	8c 0c       	add	r8, r12
    b438:	9d 1c       	adc	r9, r13
    b43a:	f7 01       	movw	r30, r14
    b43c:	80 89       	ldd	r24, Z+16	; 0x10
    b43e:	91 89       	ldd	r25, Z+17	; 0x11
    b440:	a2 89       	ldd	r26, Z+18	; 0x12
    b442:	b3 89       	ldd	r27, Z+19	; 0x13
    b444:	8c 0d       	add	r24, r12
    b446:	9d 1d       	adc	r25, r13
    b448:	a1 1d       	adc	r26, r1
    b44a:	b1 1d       	adc	r27, r1
    b44c:	80 8b       	std	Z+16, r24	; 0x10
    b44e:	91 8b       	std	Z+17, r25	; 0x11
    b450:	a2 8b       	std	Z+18, r26	; 0x12
    b452:	b3 8b       	std	Z+19, r27	; 0x13
    b454:	ed 81       	ldd	r30, Y+5	; 0x05
    b456:	fe 81       	ldd	r31, Y+6	; 0x06
    b458:	80 81       	ld	r24, Z
    b45a:	91 81       	ldd	r25, Z+1	; 0x01
    b45c:	8c 0d       	add	r24, r12
    b45e:	9d 1d       	adc	r25, r13
    b460:	91 83       	std	Z+1, r25	; 0x01
    b462:	80 83       	st	Z, r24
    b464:	ac 18       	sub	r10, r12
    b466:	bd 08       	sbc	r11, r13
    b468:	f5 ce       	rjmp	.-534    	; 0xb254 <f_read+0x70>
    b46a:	80 e0       	ldi	r24, 0x00	; 0
    b46c:	01 c0       	rjmp	.+2      	; 0xb470 <f_read+0x28c>
    b46e:	87 e0       	ldi	r24, 0x07	; 7
    b470:	90 e0       	ldi	r25, 0x00	; 0
    b472:	26 96       	adiw	r28, 0x06	; 6
    b474:	e2 e1       	ldi	r30, 0x12	; 18
    b476:	0c 94 ab e9 	jmp	0x1d356	; 0x1d356 <__epilogue_restores__>

0000b47a <f_write>:
    b47a:	a8 e0       	ldi	r26, 0x08	; 8
    b47c:	b0 e0       	ldi	r27, 0x00	; 0
    b47e:	e3 e4       	ldi	r30, 0x43	; 67
    b480:	fa e5       	ldi	r31, 0x5A	; 90
    b482:	0c 94 8f e9 	jmp	0x1d31e	; 0x1d31e <__prologue_saves__>
    b486:	7c 01       	movw	r14, r24
    b488:	3b 01       	movw	r6, r22
    b48a:	5a 01       	movw	r10, r20
    b48c:	38 87       	std	Y+8, r19	; 0x08
    b48e:	2f 83       	std	Y+7, r18	; 0x07
    b490:	f9 01       	movw	r30, r18
    b492:	11 82       	std	Z+1, r1	; 0x01
    b494:	10 82       	st	Z, r1
    b496:	be 01       	movw	r22, r28
    b498:	6f 5f       	subi	r22, 0xFF	; 255
    b49a:	7f 4f       	sbci	r23, 0xFF	; 255
    b49c:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <validate>
    b4a0:	00 97       	sbiw	r24, 0x00	; 0
    b4a2:	09 f0       	breq	.+2      	; 0xb4a6 <f_write+0x2c>
    b4a4:	7d c1       	rjmp	.+762    	; 0xb7a0 <f_write+0x326>
    b4a6:	f7 01       	movw	r30, r14
    b4a8:	87 85       	ldd	r24, Z+15	; 0x0f
    b4aa:	90 e0       	ldi	r25, 0x00	; 0
    b4ac:	00 97       	sbiw	r24, 0x00	; 0
    b4ae:	09 f0       	breq	.+2      	; 0xb4b2 <f_write+0x38>
    b4b0:	77 c1       	rjmp	.+750    	; 0xb7a0 <f_write+0x326>
    b4b2:	86 85       	ldd	r24, Z+14	; 0x0e
    b4b4:	81 ff       	sbrs	r24, 1
    b4b6:	72 c1       	rjmp	.+740    	; 0xb79c <f_write+0x322>
    b4b8:	80 89       	ldd	r24, Z+16	; 0x10
    b4ba:	91 89       	ldd	r25, Z+17	; 0x11
    b4bc:	a2 89       	ldd	r26, Z+18	; 0x12
    b4be:	b3 89       	ldd	r27, Z+19	; 0x13
    b4c0:	ac 01       	movw	r20, r24
    b4c2:	bd 01       	movw	r22, r26
    b4c4:	4a 0d       	add	r20, r10
    b4c6:	5b 1d       	adc	r21, r11
    b4c8:	61 1d       	adc	r22, r1
    b4ca:	71 1d       	adc	r23, r1
    b4cc:	48 17       	cp	r20, r24
    b4ce:	59 07       	cpc	r21, r25
    b4d0:	6a 07       	cpc	r22, r26
    b4d2:	7b 07       	cpc	r23, r27
    b4d4:	18 f4       	brcc	.+6      	; 0xb4dc <f_write+0x62>
    b4d6:	5c 01       	movw	r10, r24
    b4d8:	a0 94       	com	r10
    b4da:	b0 94       	com	r11
    b4dc:	97 01       	movw	r18, r14
    b4de:	2c 5d       	subi	r18, 0xDC	; 220
    b4e0:	3f 4f       	sbci	r19, 0xFF	; 255
    b4e2:	3e 83       	std	Y+6, r19	; 0x06
    b4e4:	2d 83       	std	Y+5, r18	; 0x05
    b4e6:	a1 14       	cp	r10, r1
    b4e8:	b1 04       	cpc	r11, r1
    b4ea:	09 f4       	brne	.+2      	; 0xb4ee <f_write+0x74>
    b4ec:	4d c0       	rjmp	.+154    	; 0xb588 <f_write+0x10e>
    b4ee:	f7 01       	movw	r30, r14
    b4f0:	40 89       	ldd	r20, Z+16	; 0x10
    b4f2:	51 89       	ldd	r21, Z+17	; 0x11
    b4f4:	62 89       	ldd	r22, Z+18	; 0x12
    b4f6:	73 89       	ldd	r23, Z+19	; 0x13
    b4f8:	db 01       	movw	r26, r22
    b4fa:	ca 01       	movw	r24, r20
    b4fc:	91 70       	andi	r25, 0x01	; 1
    b4fe:	aa 27       	eor	r26, r26
    b500:	bb 27       	eor	r27, r27
    b502:	89 2b       	or	r24, r25
    b504:	8a 2b       	or	r24, r26
    b506:	8b 2b       	or	r24, r27
    b508:	09 f0       	breq	.+2      	; 0xb50c <f_write+0x92>
    b50a:	05 c1       	rjmp	.+522    	; 0xb716 <f_write+0x29c>
    b50c:	e9 81       	ldd	r30, Y+1	; 0x01
    b50e:	fa 81       	ldd	r31, Y+2	; 0x02
    b510:	81 84       	ldd	r8, Z+9	; 0x09
    b512:	92 84       	ldd	r9, Z+10	; 0x0a
    b514:	f1 e0       	ldi	r31, 0x01	; 1
    b516:	8f 1a       	sub	r8, r31
    b518:	91 08       	sbc	r9, r1
    b51a:	db 01       	movw	r26, r22
    b51c:	ca 01       	movw	r24, r20
    b51e:	e9 e0       	ldi	r30, 0x09	; 9
    b520:	b6 95       	lsr	r27
    b522:	a7 95       	ror	r26
    b524:	97 95       	ror	r25
    b526:	87 95       	ror	r24
    b528:	ea 95       	dec	r30
    b52a:	d1 f7       	brne	.-12     	; 0xb520 <f_write+0xa6>
    b52c:	88 22       	and	r8, r24
    b52e:	99 22       	and	r9, r25
    b530:	81 14       	cp	r8, r1
    b532:	91 04       	cpc	r9, r1
    b534:	09 f0       	breq	.+2      	; 0xb538 <f_write+0xbe>
    b536:	51 c0       	rjmp	.+162    	; 0xb5da <f_write+0x160>
    b538:	f7 01       	movw	r30, r14
    b53a:	41 15       	cp	r20, r1
    b53c:	51 05       	cpc	r21, r1
    b53e:	61 05       	cpc	r22, r1
    b540:	71 05       	cpc	r23, r1
    b542:	69 f4       	brne	.+26     	; 0xb55e <f_write+0xe4>
    b544:	66 81       	ldd	r22, Z+6	; 0x06
    b546:	77 81       	ldd	r23, Z+7	; 0x07
    b548:	80 85       	ldd	r24, Z+8	; 0x08
    b54a:	91 85       	ldd	r25, Z+9	; 0x09
    b54c:	61 15       	cp	r22, r1
    b54e:	71 05       	cpc	r23, r1
    b550:	81 05       	cpc	r24, r1
    b552:	91 05       	cpc	r25, r1
    b554:	f9 f4       	brne	.+62     	; 0xb594 <f_write+0x11a>
    b556:	40 e0       	ldi	r20, 0x00	; 0
    b558:	50 e0       	ldi	r21, 0x00	; 0
    b55a:	ba 01       	movw	r22, r20
    b55c:	0d c0       	rjmp	.+26     	; 0xb578 <f_write+0xfe>
    b55e:	82 a1       	ldd	r24, Z+34	; 0x22
    b560:	93 a1       	ldd	r25, Z+35	; 0x23
    b562:	89 2b       	or	r24, r25
    b564:	21 f0       	breq	.+8      	; 0xb56e <f_write+0xf4>
    b566:	c7 01       	movw	r24, r14
    b568:	0e 94 06 46 	call	0x8c0c	; 0x8c0c <clmt_clust>
    b56c:	08 c0       	rjmp	.+16     	; 0xb57e <f_write+0x104>
    b56e:	f7 01       	movw	r30, r14
    b570:	44 89       	ldd	r20, Z+20	; 0x14
    b572:	55 89       	ldd	r21, Z+21	; 0x15
    b574:	66 89       	ldd	r22, Z+22	; 0x16
    b576:	77 89       	ldd	r23, Z+23	; 0x17
    b578:	c7 01       	movw	r24, r14
    b57a:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <create_chain>
    b57e:	61 15       	cp	r22, r1
    b580:	71 05       	cpc	r23, r1
    b582:	81 05       	cpc	r24, r1
    b584:	91 05       	cpc	r25, r1
    b586:	31 f4       	brne	.+12     	; 0xb594 <f_write+0x11a>
    b588:	f7 01       	movw	r30, r14
    b58a:	86 85       	ldd	r24, Z+14	; 0x0e
    b58c:	80 64       	ori	r24, 0x40	; 64
    b58e:	86 87       	std	Z+14, r24	; 0x0e
    b590:	80 e0       	ldi	r24, 0x00	; 0
    b592:	05 c1       	rjmp	.+522    	; 0xb79e <f_write+0x324>
    b594:	61 30       	cpi	r22, 0x01	; 1
    b596:	71 05       	cpc	r23, r1
    b598:	81 05       	cpc	r24, r1
    b59a:	91 05       	cpc	r25, r1
    b59c:	11 f4       	brne	.+4      	; 0xb5a2 <f_write+0x128>
    b59e:	82 e0       	ldi	r24, 0x02	; 2
    b5a0:	07 c0       	rjmp	.+14     	; 0xb5b0 <f_write+0x136>
    b5a2:	6f 3f       	cpi	r22, 0xFF	; 255
    b5a4:	ff ef       	ldi	r31, 0xFF	; 255
    b5a6:	7f 07       	cpc	r23, r31
    b5a8:	8f 07       	cpc	r24, r31
    b5aa:	9f 07       	cpc	r25, r31
    b5ac:	21 f4       	brne	.+8      	; 0xb5b6 <f_write+0x13c>
    b5ae:	81 e0       	ldi	r24, 0x01	; 1
    b5b0:	f7 01       	movw	r30, r14
    b5b2:	87 87       	std	Z+15, r24	; 0x0f
    b5b4:	f4 c0       	rjmp	.+488    	; 0xb79e <f_write+0x324>
    b5b6:	f7 01       	movw	r30, r14
    b5b8:	64 8b       	std	Z+20, r22	; 0x14
    b5ba:	75 8b       	std	Z+21, r23	; 0x15
    b5bc:	86 8b       	std	Z+22, r24	; 0x16
    b5be:	97 8b       	std	Z+23, r25	; 0x17
    b5c0:	06 81       	ldd	r16, Z+6	; 0x06
    b5c2:	17 81       	ldd	r17, Z+7	; 0x07
    b5c4:	20 85       	ldd	r18, Z+8	; 0x08
    b5c6:	31 85       	ldd	r19, Z+9	; 0x09
    b5c8:	01 15       	cp	r16, r1
    b5ca:	11 05       	cpc	r17, r1
    b5cc:	21 05       	cpc	r18, r1
    b5ce:	31 05       	cpc	r19, r1
    b5d0:	21 f4       	brne	.+8      	; 0xb5da <f_write+0x160>
    b5d2:	66 83       	std	Z+6, r22	; 0x06
    b5d4:	77 83       	std	Z+7, r23	; 0x07
    b5d6:	80 87       	std	Z+8, r24	; 0x08
    b5d8:	91 87       	std	Z+9, r25	; 0x09
    b5da:	f7 01       	movw	r30, r14
    b5dc:	86 85       	ldd	r24, Z+14	; 0x0e
    b5de:	87 ff       	sbrs	r24, 7
    b5e0:	13 c0       	rjmp	.+38     	; 0xb608 <f_write+0x18e>
    b5e2:	20 8d       	ldd	r18, Z+24	; 0x18
    b5e4:	31 8d       	ldd	r19, Z+25	; 0x19
    b5e6:	42 8d       	ldd	r20, Z+26	; 0x1a
    b5e8:	53 8d       	ldd	r21, Z+27	; 0x1b
    b5ea:	e9 81       	ldd	r30, Y+1	; 0x01
    b5ec:	fa 81       	ldd	r31, Y+2	; 0x02
    b5ee:	01 e0       	ldi	r16, 0x01	; 1
    b5f0:	10 e0       	ldi	r17, 0x00	; 0
    b5f2:	6d 81       	ldd	r22, Y+5	; 0x05
    b5f4:	7e 81       	ldd	r23, Y+6	; 0x06
    b5f6:	81 81       	ldd	r24, Z+1	; 0x01
    b5f8:	0e 94 fc 6c 	call	0xd9f8	; 0xd9f8 <disk_write>
    b5fc:	89 2b       	or	r24, r25
    b5fe:	b9 f6       	brne	.-82     	; 0xb5ae <f_write+0x134>
    b600:	f7 01       	movw	r30, r14
    b602:	86 85       	ldd	r24, Z+14	; 0x0e
    b604:	8f 77       	andi	r24, 0x7F	; 127
    b606:	86 87       	std	Z+14, r24	; 0x0e
    b608:	29 81       	ldd	r18, Y+1	; 0x01
    b60a:	3a 81       	ldd	r19, Y+2	; 0x02
    b60c:	3c 83       	std	Y+4, r19	; 0x04
    b60e:	2b 83       	std	Y+3, r18	; 0x03
    b610:	f7 01       	movw	r30, r14
    b612:	44 89       	ldd	r20, Z+20	; 0x14
    b614:	55 89       	ldd	r21, Z+21	; 0x15
    b616:	66 89       	ldd	r22, Z+22	; 0x16
    b618:	77 89       	ldd	r23, Z+23	; 0x17
    b61a:	c9 01       	movw	r24, r18
    b61c:	0e 94 de 45 	call	0x8bbc	; 0x8bbc <clust2sect>
    b620:	61 15       	cp	r22, r1
    b622:	71 05       	cpc	r23, r1
    b624:	81 05       	cpc	r24, r1
    b626:	91 05       	cpc	r25, r1
    b628:	09 f4       	brne	.+2      	; 0xb62c <f_write+0x1b2>
    b62a:	b9 cf       	rjmp	.-142    	; 0xb59e <f_write+0x124>
    b62c:	1b 01       	movw	r2, r22
    b62e:	2c 01       	movw	r4, r24
    b630:	28 0c       	add	r2, r8
    b632:	39 1c       	adc	r3, r9
    b634:	41 1c       	adc	r4, r1
    b636:	51 1c       	adc	r5, r1
    b638:	65 01       	movw	r12, r10
    b63a:	cd 2c       	mov	r12, r13
    b63c:	dd 24       	eor	r13, r13
    b63e:	c6 94       	lsr	r12
    b640:	c1 14       	cp	r12, r1
    b642:	d1 04       	cpc	r13, r1
    b644:	f1 f1       	breq	.+124    	; 0xb6c2 <f_write+0x248>
    b646:	eb 81       	ldd	r30, Y+3	; 0x03
    b648:	fc 81       	ldd	r31, Y+4	; 0x04
    b64a:	81 85       	ldd	r24, Z+9	; 0x09
    b64c:	92 85       	ldd	r25, Z+10	; 0x0a
    b64e:	94 01       	movw	r18, r8
    b650:	2c 0d       	add	r18, r12
    b652:	3d 1d       	adc	r19, r13
    b654:	82 17       	cp	r24, r18
    b656:	93 07       	cpc	r25, r19
    b658:	18 f4       	brcc	.+6      	; 0xb660 <f_write+0x1e6>
    b65a:	6c 01       	movw	r12, r24
    b65c:	c8 18       	sub	r12, r8
    b65e:	d9 08       	sbc	r13, r9
    b660:	86 01       	movw	r16, r12
    b662:	a2 01       	movw	r20, r4
    b664:	91 01       	movw	r18, r2
    b666:	b3 01       	movw	r22, r6
    b668:	eb 81       	ldd	r30, Y+3	; 0x03
    b66a:	fc 81       	ldd	r31, Y+4	; 0x04
    b66c:	81 81       	ldd	r24, Z+1	; 0x01
    b66e:	0e 94 fc 6c 	call	0xd9f8	; 0xd9f8 <disk_write>
    b672:	89 2b       	or	r24, r25
    b674:	09 f0       	breq	.+2      	; 0xb678 <f_write+0x1fe>
    b676:	9b cf       	rjmp	.-202    	; 0xb5ae <f_write+0x134>
    b678:	f7 01       	movw	r30, r14
    b67a:	80 8d       	ldd	r24, Z+24	; 0x18
    b67c:	91 8d       	ldd	r25, Z+25	; 0x19
    b67e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b680:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b682:	82 19       	sub	r24, r2
    b684:	93 09       	sbc	r25, r3
    b686:	a4 09       	sbc	r26, r4
    b688:	b5 09       	sbc	r27, r5
    b68a:	a6 01       	movw	r20, r12
    b68c:	60 e0       	ldi	r22, 0x00	; 0
    b68e:	70 e0       	ldi	r23, 0x00	; 0
    b690:	84 17       	cp	r24, r20
    b692:	95 07       	cpc	r25, r21
    b694:	a6 07       	cpc	r26, r22
    b696:	b7 07       	cpc	r27, r23
    b698:	80 f4       	brcc	.+32     	; 0xb6ba <f_write+0x240>
    b69a:	98 2f       	mov	r25, r24
    b69c:	88 27       	eor	r24, r24
    b69e:	99 0f       	add	r25, r25
    b6a0:	b3 01       	movw	r22, r6
    b6a2:	68 0f       	add	r22, r24
    b6a4:	79 1f       	adc	r23, r25
    b6a6:	40 e0       	ldi	r20, 0x00	; 0
    b6a8:	52 e0       	ldi	r21, 0x02	; 2
    b6aa:	8d 81       	ldd	r24, Y+5	; 0x05
    b6ac:	9e 81       	ldd	r25, Y+6	; 0x06
    b6ae:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <mem_cpy.part.0>
    b6b2:	f7 01       	movw	r30, r14
    b6b4:	86 85       	ldd	r24, Z+14	; 0x0e
    b6b6:	8f 77       	andi	r24, 0x7F	; 127
    b6b8:	86 87       	std	Z+14, r24	; 0x0e
    b6ba:	dc 2c       	mov	r13, r12
    b6bc:	cc 24       	eor	r12, r12
    b6be:	dd 0c       	add	r13, r13
    b6c0:	43 c0       	rjmp	.+134    	; 0xb748 <f_write+0x2ce>
    b6c2:	f7 01       	movw	r30, r14
    b6c4:	80 8d       	ldd	r24, Z+24	; 0x18
    b6c6:	91 8d       	ldd	r25, Z+25	; 0x19
    b6c8:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b6ca:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b6cc:	28 16       	cp	r2, r24
    b6ce:	39 06       	cpc	r3, r25
    b6d0:	4a 06       	cpc	r4, r26
    b6d2:	5b 06       	cpc	r5, r27
    b6d4:	d9 f0       	breq	.+54     	; 0xb70c <f_write+0x292>
    b6d6:	40 89       	ldd	r20, Z+16	; 0x10
    b6d8:	51 89       	ldd	r21, Z+17	; 0x11
    b6da:	62 89       	ldd	r22, Z+18	; 0x12
    b6dc:	73 89       	ldd	r23, Z+19	; 0x13
    b6de:	82 85       	ldd	r24, Z+10	; 0x0a
    b6e0:	93 85       	ldd	r25, Z+11	; 0x0b
    b6e2:	a4 85       	ldd	r26, Z+12	; 0x0c
    b6e4:	b5 85       	ldd	r27, Z+13	; 0x0d
    b6e6:	48 17       	cp	r20, r24
    b6e8:	59 07       	cpc	r21, r25
    b6ea:	6a 07       	cpc	r22, r26
    b6ec:	7b 07       	cpc	r23, r27
    b6ee:	70 f4       	brcc	.+28     	; 0xb70c <f_write+0x292>
    b6f0:	01 e0       	ldi	r16, 0x01	; 1
    b6f2:	10 e0       	ldi	r17, 0x00	; 0
    b6f4:	a2 01       	movw	r20, r4
    b6f6:	91 01       	movw	r18, r2
    b6f8:	6d 81       	ldd	r22, Y+5	; 0x05
    b6fa:	7e 81       	ldd	r23, Y+6	; 0x06
    b6fc:	eb 81       	ldd	r30, Y+3	; 0x03
    b6fe:	fc 81       	ldd	r31, Y+4	; 0x04
    b700:	81 81       	ldd	r24, Z+1	; 0x01
    b702:	0e 94 ec 6c 	call	0xd9d8	; 0xd9d8 <disk_read>
    b706:	89 2b       	or	r24, r25
    b708:	09 f0       	breq	.+2      	; 0xb70c <f_write+0x292>
    b70a:	51 cf       	rjmp	.-350    	; 0xb5ae <f_write+0x134>
    b70c:	f7 01       	movw	r30, r14
    b70e:	20 8e       	std	Z+24, r2	; 0x18
    b710:	31 8e       	std	Z+25, r3	; 0x19
    b712:	42 8e       	std	Z+26, r4	; 0x1a
    b714:	53 8e       	std	Z+27, r5	; 0x1b
    b716:	f7 01       	movw	r30, r14
    b718:	80 89       	ldd	r24, Z+16	; 0x10
    b71a:	91 89       	ldd	r25, Z+17	; 0x11
    b71c:	91 70       	andi	r25, 0x01	; 1
    b71e:	20 e0       	ldi	r18, 0x00	; 0
    b720:	32 e0       	ldi	r19, 0x02	; 2
    b722:	28 1b       	sub	r18, r24
    b724:	39 0b       	sbc	r19, r25
    b726:	65 01       	movw	r12, r10
    b728:	2a 15       	cp	r18, r10
    b72a:	3b 05       	cpc	r19, r11
    b72c:	08 f4       	brcc	.+2      	; 0xb730 <f_write+0x2b6>
    b72e:	69 01       	movw	r12, r18
    b730:	a6 01       	movw	r20, r12
    b732:	b3 01       	movw	r22, r6
    b734:	2d 81       	ldd	r18, Y+5	; 0x05
    b736:	3e 81       	ldd	r19, Y+6	; 0x06
    b738:	82 0f       	add	r24, r18
    b73a:	93 1f       	adc	r25, r19
    b73c:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <mem_cpy.part.0>
    b740:	f7 01       	movw	r30, r14
    b742:	86 85       	ldd	r24, Z+14	; 0x0e
    b744:	80 68       	ori	r24, 0x80	; 128
    b746:	86 87       	std	Z+14, r24	; 0x0e
    b748:	6c 0c       	add	r6, r12
    b74a:	7d 1c       	adc	r7, r13
    b74c:	f7 01       	movw	r30, r14
    b74e:	80 89       	ldd	r24, Z+16	; 0x10
    b750:	91 89       	ldd	r25, Z+17	; 0x11
    b752:	a2 89       	ldd	r26, Z+18	; 0x12
    b754:	b3 89       	ldd	r27, Z+19	; 0x13
    b756:	8c 0d       	add	r24, r12
    b758:	9d 1d       	adc	r25, r13
    b75a:	a1 1d       	adc	r26, r1
    b75c:	b1 1d       	adc	r27, r1
    b75e:	80 8b       	std	Z+16, r24	; 0x10
    b760:	91 8b       	std	Z+17, r25	; 0x11
    b762:	a2 8b       	std	Z+18, r26	; 0x12
    b764:	b3 8b       	std	Z+19, r27	; 0x13
    b766:	42 85       	ldd	r20, Z+10	; 0x0a
    b768:	53 85       	ldd	r21, Z+11	; 0x0b
    b76a:	64 85       	ldd	r22, Z+12	; 0x0c
    b76c:	75 85       	ldd	r23, Z+13	; 0x0d
    b76e:	48 17       	cp	r20, r24
    b770:	59 07       	cpc	r21, r25
    b772:	6a 07       	cpc	r22, r26
    b774:	7b 07       	cpc	r23, r27
    b776:	10 f4       	brcc	.+4      	; 0xb77c <f_write+0x302>
    b778:	ac 01       	movw	r20, r24
    b77a:	bd 01       	movw	r22, r26
    b77c:	f7 01       	movw	r30, r14
    b77e:	42 87       	std	Z+10, r20	; 0x0a
    b780:	53 87       	std	Z+11, r21	; 0x0b
    b782:	64 87       	std	Z+12, r22	; 0x0c
    b784:	75 87       	std	Z+13, r23	; 0x0d
    b786:	ef 81       	ldd	r30, Y+7	; 0x07
    b788:	f8 85       	ldd	r31, Y+8	; 0x08
    b78a:	80 81       	ld	r24, Z
    b78c:	91 81       	ldd	r25, Z+1	; 0x01
    b78e:	8c 0d       	add	r24, r12
    b790:	9d 1d       	adc	r25, r13
    b792:	91 83       	std	Z+1, r25	; 0x01
    b794:	80 83       	st	Z, r24
    b796:	ac 18       	sub	r10, r12
    b798:	bd 08       	sbc	r11, r13
    b79a:	a5 ce       	rjmp	.-694    	; 0xb4e6 <f_write+0x6c>
    b79c:	87 e0       	ldi	r24, 0x07	; 7
    b79e:	90 e0       	ldi	r25, 0x00	; 0
    b7a0:	28 96       	adiw	r28, 0x08	; 8
    b7a2:	e2 e1       	ldi	r30, 0x12	; 18
    b7a4:	0c 94 ab e9 	jmp	0x1d356	; 0x1d356 <__epilogue_restores__>

0000b7a8 <f_sync>:
    b7a8:	8f 92       	push	r8
    b7aa:	9f 92       	push	r9
    b7ac:	af 92       	push	r10
    b7ae:	bf 92       	push	r11
    b7b0:	ef 92       	push	r14
    b7b2:	ff 92       	push	r15
    b7b4:	0f 93       	push	r16
    b7b6:	1f 93       	push	r17
    b7b8:	cf 93       	push	r28
    b7ba:	df 93       	push	r29
    b7bc:	00 d0       	rcall	.+0      	; 0xb7be <f_sync+0x16>
    b7be:	cd b7       	in	r28, 0x3d	; 61
    b7c0:	de b7       	in	r29, 0x3e	; 62
    b7c2:	7c 01       	movw	r14, r24
    b7c4:	be 01       	movw	r22, r28
    b7c6:	6f 5f       	subi	r22, 0xFF	; 255
    b7c8:	7f 4f       	sbci	r23, 0xFF	; 255
    b7ca:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <validate>
    b7ce:	00 97       	sbiw	r24, 0x00	; 0
    b7d0:	09 f0       	breq	.+2      	; 0xb7d4 <f_sync+0x2c>
    b7d2:	5d c0       	rjmp	.+186    	; 0xb88e <f_sync+0xe6>
    b7d4:	f7 01       	movw	r30, r14
    b7d6:	86 85       	ldd	r24, Z+14	; 0x0e
    b7d8:	86 ff       	sbrs	r24, 6
    b7da:	55 c0       	rjmp	.+170    	; 0xb886 <f_sync+0xde>
    b7dc:	87 ff       	sbrs	r24, 7
    b7de:	15 c0       	rjmp	.+42     	; 0xb80a <f_sync+0x62>
    b7e0:	20 8d       	ldd	r18, Z+24	; 0x18
    b7e2:	31 8d       	ldd	r19, Z+25	; 0x19
    b7e4:	42 8d       	ldd	r20, Z+26	; 0x1a
    b7e6:	53 8d       	ldd	r21, Z+27	; 0x1b
    b7e8:	e9 81       	ldd	r30, Y+1	; 0x01
    b7ea:	fa 81       	ldd	r31, Y+2	; 0x02
    b7ec:	01 e0       	ldi	r16, 0x01	; 1
    b7ee:	10 e0       	ldi	r17, 0x00	; 0
    b7f0:	b7 01       	movw	r22, r14
    b7f2:	6c 5d       	subi	r22, 0xDC	; 220
    b7f4:	7f 4f       	sbci	r23, 0xFF	; 255
    b7f6:	81 81       	ldd	r24, Z+1	; 0x01
    b7f8:	0e 94 fc 6c 	call	0xd9f8	; 0xd9f8 <disk_write>
    b7fc:	89 2b       	or	r24, r25
    b7fe:	09 f0       	breq	.+2      	; 0xb802 <f_sync+0x5a>
    b800:	44 c0       	rjmp	.+136    	; 0xb88a <f_sync+0xe2>
    b802:	f7 01       	movw	r30, r14
    b804:	86 85       	ldd	r24, Z+14	; 0x0e
    b806:	8f 77       	andi	r24, 0x7F	; 127
    b808:	86 87       	std	Z+14, r24	; 0x0e
    b80a:	0e 94 61 73 	call	0xe6c2	; 0xe6c2 <get_fattime>
    b80e:	4b 01       	movw	r8, r22
    b810:	5c 01       	movw	r10, r24
    b812:	f7 01       	movw	r30, r14
    b814:	44 8d       	ldd	r20, Z+28	; 0x1c
    b816:	55 8d       	ldd	r21, Z+29	; 0x1d
    b818:	66 8d       	ldd	r22, Z+30	; 0x1e
    b81a:	77 8d       	ldd	r23, Z+31	; 0x1f
    b81c:	89 81       	ldd	r24, Y+1	; 0x01
    b81e:	9a 81       	ldd	r25, Y+2	; 0x02
    b820:	0e 94 91 47 	call	0x8f22	; 0x8f22 <move_window>
    b824:	00 97       	sbiw	r24, 0x00	; 0
    b826:	99 f5       	brne	.+102    	; 0xb88e <f_sync+0xe6>
    b828:	f7 01       	movw	r30, r14
    b82a:	00 a1       	ldd	r16, Z+32	; 0x20
    b82c:	11 a1       	ldd	r17, Z+33	; 0x21
    b82e:	f8 01       	movw	r30, r16
    b830:	83 85       	ldd	r24, Z+11	; 0x0b
    b832:	80 62       	ori	r24, 0x20	; 32
    b834:	83 87       	std	Z+11, r24	; 0x0b
    b836:	f7 01       	movw	r30, r14
    b838:	26 81       	ldd	r18, Z+6	; 0x06
    b83a:	37 81       	ldd	r19, Z+7	; 0x07
    b83c:	40 85       	ldd	r20, Z+8	; 0x08
    b83e:	51 85       	ldd	r21, Z+9	; 0x09
    b840:	b8 01       	movw	r22, r16
    b842:	80 81       	ld	r24, Z
    b844:	91 81       	ldd	r25, Z+1	; 0x01
    b846:	0e 94 be 46 	call	0x8d7c	; 0x8d7c <st_clust.isra.2>
    b84a:	f7 01       	movw	r30, r14
    b84c:	42 85       	ldd	r20, Z+10	; 0x0a
    b84e:	53 85       	ldd	r21, Z+11	; 0x0b
    b850:	64 85       	ldd	r22, Z+12	; 0x0c
    b852:	75 85       	ldd	r23, Z+13	; 0x0d
    b854:	c8 01       	movw	r24, r16
    b856:	4c 96       	adiw	r24, 0x1c	; 28
    b858:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <st_dword>
    b85c:	b5 01       	movw	r22, r10
    b85e:	a4 01       	movw	r20, r8
    b860:	c8 01       	movw	r24, r16
    b862:	46 96       	adiw	r24, 0x16	; 22
    b864:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <st_dword>
    b868:	f8 01       	movw	r30, r16
    b86a:	12 8a       	std	Z+18, r1	; 0x12
    b86c:	13 8a       	std	Z+19, r1	; 0x13
    b86e:	89 81       	ldd	r24, Y+1	; 0x01
    b870:	9a 81       	ldd	r25, Y+2	; 0x02
    b872:	21 e0       	ldi	r18, 0x01	; 1
    b874:	fc 01       	movw	r30, r24
    b876:	23 83       	std	Z+3, r18	; 0x03
    b878:	0e 94 25 47 	call	0x8e4a	; 0x8e4a <sync_fs>
    b87c:	f7 01       	movw	r30, r14
    b87e:	26 85       	ldd	r18, Z+14	; 0x0e
    b880:	2f 7b       	andi	r18, 0xBF	; 191
    b882:	26 87       	std	Z+14, r18	; 0x0e
    b884:	04 c0       	rjmp	.+8      	; 0xb88e <f_sync+0xe6>
    b886:	80 e0       	ldi	r24, 0x00	; 0
    b888:	01 c0       	rjmp	.+2      	; 0xb88c <f_sync+0xe4>
    b88a:	81 e0       	ldi	r24, 0x01	; 1
    b88c:	90 e0       	ldi	r25, 0x00	; 0
    b88e:	0f 90       	pop	r0
    b890:	0f 90       	pop	r0
    b892:	df 91       	pop	r29
    b894:	cf 91       	pop	r28
    b896:	1f 91       	pop	r17
    b898:	0f 91       	pop	r16
    b89a:	ff 90       	pop	r15
    b89c:	ef 90       	pop	r14
    b89e:	bf 90       	pop	r11
    b8a0:	af 90       	pop	r10
    b8a2:	9f 90       	pop	r9
    b8a4:	8f 90       	pop	r8
    b8a6:	08 95       	ret

0000b8a8 <f_close>:
    b8a8:	a2 e0       	ldi	r26, 0x02	; 2
    b8aa:	b0 e0       	ldi	r27, 0x00	; 0
    b8ac:	ea e5       	ldi	r30, 0x5A	; 90
    b8ae:	fc e5       	ldi	r31, 0x5C	; 92
    b8b0:	0c 94 9d e9 	jmp	0x1d33a	; 0x1d33a <__prologue_saves__+0x1c>
    b8b4:	8c 01       	movw	r16, r24
    b8b6:	78 df       	rcall	.-272    	; 0xb7a8 <f_sync>
    b8b8:	00 97       	sbiw	r24, 0x00	; 0
    b8ba:	59 f4       	brne	.+22     	; 0xb8d2 <f_close+0x2a>
    b8bc:	be 01       	movw	r22, r28
    b8be:	6f 5f       	subi	r22, 0xFF	; 255
    b8c0:	7f 4f       	sbci	r23, 0xFF	; 255
    b8c2:	c8 01       	movw	r24, r16
    b8c4:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <validate>
    b8c8:	00 97       	sbiw	r24, 0x00	; 0
    b8ca:	19 f4       	brne	.+6      	; 0xb8d2 <f_close+0x2a>
    b8cc:	f8 01       	movw	r30, r16
    b8ce:	11 82       	std	Z+1, r1	; 0x01
    b8d0:	10 82       	st	Z, r1
    b8d2:	22 96       	adiw	r28, 0x02	; 2
    b8d4:	e4 e0       	ldi	r30, 0x04	; 4
    b8d6:	0c 94 b9 e9 	jmp	0x1d372	; 0x1d372 <__epilogue_restores__+0x1c>

0000b8da <f_chdir>:
    b8da:	a2 e3       	ldi	r26, 0x32	; 50
    b8dc:	b0 e0       	ldi	r27, 0x00	; 0
    b8de:	e3 e7       	ldi	r30, 0x73	; 115
    b8e0:	fc e5       	ldi	r31, 0x5C	; 92
    b8e2:	0c 94 99 e9 	jmp	0x1d332	; 0x1d332 <__prologue_saves__+0x14>
    b8e6:	9a ab       	std	Y+50, r25	; 0x32
    b8e8:	89 ab       	std	Y+49, r24	; 0x31
    b8ea:	40 e0       	ldi	r20, 0x00	; 0
    b8ec:	be 01       	movw	r22, r28
    b8ee:	61 5d       	subi	r22, 0xD1	; 209
    b8f0:	7f 4f       	sbci	r23, 0xFF	; 255
    b8f2:	ce 01       	movw	r24, r28
    b8f4:	c1 96       	adiw	r24, 0x31	; 49
    b8f6:	0e 94 11 48 	call	0x9022	; 0x9022 <find_volume>
    b8fa:	00 97       	sbiw	r24, 0x00	; 0
    b8fc:	09 f0       	breq	.+2      	; 0xb900 <f_chdir+0x26>
    b8fe:	44 c0       	rjmp	.+136    	; 0xb988 <f_chdir+0xae>
    b900:	8f a5       	ldd	r24, Y+47	; 0x2f
    b902:	98 a9       	ldd	r25, Y+48	; 0x30
    b904:	9a 83       	std	Y+2, r25	; 0x02
    b906:	89 83       	std	Y+1, r24	; 0x01
    b908:	80 e0       	ldi	r24, 0x00	; 0
    b90a:	92 e0       	ldi	r25, 0x02	; 2
    b90c:	0e 94 5f 6c 	call	0xd8be	; 0xd8be <ff_memalloc>
    b910:	7c 01       	movw	r14, r24
    b912:	00 97       	sbiw	r24, 0x00	; 0
    b914:	a9 f1       	breq	.+106    	; 0xb980 <f_chdir+0xa6>
    b916:	ef a5       	ldd	r30, Y+47	; 0x2f
    b918:	f8 a9       	ldd	r31, Y+48	; 0x30
    b91a:	94 87       	std	Z+12, r25	; 0x0c
    b91c:	83 87       	std	Z+11, r24	; 0x0b
    b91e:	69 a9       	ldd	r22, Y+49	; 0x31
    b920:	7a a9       	ldd	r23, Y+50	; 0x32
    b922:	ce 01       	movw	r24, r28
    b924:	01 96       	adiw	r24, 0x01	; 1
    b926:	03 d8       	rcall	.-4090   	; 0xa92e <follow_path>
    b928:	8c 01       	movw	r16, r24
    b92a:	89 2b       	or	r24, r25
    b92c:	09 f5       	brne	.+66     	; 0xb970 <f_chdir+0x96>
    b92e:	88 a5       	ldd	r24, Y+40	; 0x28
    b930:	87 ff       	sbrs	r24, 7
    b932:	0b c0       	rjmp	.+22     	; 0xb94a <f_chdir+0x70>
    b934:	ef a5       	ldd	r30, Y+47	; 0x2f
    b936:	f8 a9       	ldd	r31, Y+48	; 0x30
    b938:	8f 81       	ldd	r24, Y+7	; 0x07
    b93a:	98 85       	ldd	r25, Y+8	; 0x08
    b93c:	a9 85       	ldd	r26, Y+9	; 0x09
    b93e:	ba 85       	ldd	r27, Y+10	; 0x0a
    b940:	85 8b       	std	Z+21, r24	; 0x15
    b942:	96 8b       	std	Z+22, r25	; 0x16
    b944:	a7 8b       	std	Z+23, r26	; 0x17
    b946:	b0 8f       	std	Z+24, r27	; 0x18
    b948:	13 c0       	rjmp	.+38     	; 0xb970 <f_chdir+0x96>
    b94a:	8d 81       	ldd	r24, Y+5	; 0x05
    b94c:	84 ff       	sbrs	r24, 4
    b94e:	0e c0       	rjmp	.+28     	; 0xb96c <f_chdir+0x92>
    b950:	cf a4       	ldd	r12, Y+47	; 0x2f
    b952:	d8 a8       	ldd	r13, Y+48	; 0x30
    b954:	6b 8d       	ldd	r22, Y+27	; 0x1b
    b956:	7c 8d       	ldd	r23, Y+28	; 0x1c
    b958:	f6 01       	movw	r30, r12
    b95a:	80 81       	ld	r24, Z
    b95c:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <ld_clust.isra.1>
    b960:	f6 01       	movw	r30, r12
    b962:	65 8b       	std	Z+21, r22	; 0x15
    b964:	76 8b       	std	Z+22, r23	; 0x16
    b966:	87 8b       	std	Z+23, r24	; 0x17
    b968:	90 8f       	std	Z+24, r25	; 0x18
    b96a:	02 c0       	rjmp	.+4      	; 0xb970 <f_chdir+0x96>
    b96c:	05 e0       	ldi	r16, 0x05	; 5
    b96e:	10 e0       	ldi	r17, 0x00	; 0
    b970:	c7 01       	movw	r24, r14
    b972:	0e 94 62 6c 	call	0xd8c4	; 0xd8c4 <ff_memfree>
    b976:	04 30       	cpi	r16, 0x04	; 4
    b978:	11 05       	cpc	r17, r1
    b97a:	29 f4       	brne	.+10     	; 0xb986 <f_chdir+0xac>
    b97c:	85 e0       	ldi	r24, 0x05	; 5
    b97e:	01 c0       	rjmp	.+2      	; 0xb982 <f_chdir+0xa8>
    b980:	81 e1       	ldi	r24, 0x11	; 17
    b982:	90 e0       	ldi	r25, 0x00	; 0
    b984:	01 c0       	rjmp	.+2      	; 0xb988 <f_chdir+0xae>
    b986:	c8 01       	movw	r24, r16
    b988:	e2 96       	adiw	r28, 0x32	; 50
    b98a:	e8 e0       	ldi	r30, 0x08	; 8
    b98c:	0c 94 b5 e9 	jmp	0x1d36a	; 0x1d36a <__epilogue_restores__+0x14>

0000b990 <f_getcwd>:
    b990:	a8 e4       	ldi	r26, 0x48	; 72
    b992:	b1 e0       	ldi	r27, 0x01	; 1
    b994:	ee ec       	ldi	r30, 0xCE	; 206
    b996:	fc e5       	ldi	r31, 0x5C	; 92
    b998:	0c 94 90 e9 	jmp	0x1d320	; 0x1d320 <__prologue_saves__+0x2>
    b99c:	c9 5b       	subi	r28, 0xB9	; 185
    b99e:	de 4f       	sbci	r29, 0xFE	; 254
    b9a0:	99 83       	std	Y+1, r25	; 0x01
    b9a2:	88 83       	st	Y, r24
    b9a4:	c7 54       	subi	r28, 0x47	; 71
    b9a6:	d1 40       	sbci	r29, 0x01	; 1
    b9a8:	5b 01       	movw	r10, r22
    b9aa:	fc 01       	movw	r30, r24
    b9ac:	10 82       	st	Z, r1
    b9ae:	40 e0       	ldi	r20, 0x00	; 0
    b9b0:	be 01       	movw	r22, r28
    b9b2:	6b 5b       	subi	r22, 0xBB	; 187
    b9b4:	7e 4f       	sbci	r23, 0xFE	; 254
    b9b6:	ce 01       	movw	r24, r28
    b9b8:	89 5b       	subi	r24, 0xB9	; 185
    b9ba:	9e 4f       	sbci	r25, 0xFE	; 254
    b9bc:	0e 94 11 48 	call	0x9022	; 0x9022 <find_volume>
    b9c0:	8c 01       	movw	r16, r24
    b9c2:	89 2b       	or	r24, r25
    b9c4:	09 f0       	breq	.+2      	; 0xb9c8 <f_getcwd+0x38>
    b9c6:	08 c1       	rjmp	.+528    	; 0xbbd8 <f_getcwd+0x248>
    b9c8:	cb 5b       	subi	r28, 0xBB	; 187
    b9ca:	de 4f       	sbci	r29, 0xFE	; 254
    b9cc:	88 81       	ld	r24, Y
    b9ce:	99 81       	ldd	r25, Y+1	; 0x01
    b9d0:	c5 54       	subi	r28, 0x45	; 69
    b9d2:	d1 40       	sbci	r29, 0x01	; 1
    b9d4:	c9 5e       	subi	r28, 0xE9	; 233
    b9d6:	de 4f       	sbci	r29, 0xFE	; 254
    b9d8:	99 83       	std	Y+1, r25	; 0x01
    b9da:	88 83       	st	Y, r24
    b9dc:	c7 51       	subi	r28, 0x17	; 23
    b9de:	d1 40       	sbci	r29, 0x01	; 1
    b9e0:	80 e0       	ldi	r24, 0x00	; 0
    b9e2:	92 e0       	ldi	r25, 0x02	; 2
    b9e4:	0e 94 5f 6c 	call	0xd8be	; 0xd8be <ff_memalloc>
    b9e8:	6c 01       	movw	r12, r24
    b9ea:	00 97       	sbiw	r24, 0x00	; 0
    b9ec:	09 f4       	brne	.+2      	; 0xb9f0 <f_getcwd+0x60>
    b9ee:	f6 c0       	rjmp	.+492    	; 0xbbdc <f_getcwd+0x24c>
    b9f0:	cb 5b       	subi	r28, 0xBB	; 187
    b9f2:	de 4f       	sbci	r29, 0xFE	; 254
    b9f4:	e8 81       	ld	r30, Y
    b9f6:	f9 81       	ldd	r31, Y+1	; 0x01
    b9f8:	c5 54       	subi	r28, 0x45	; 69
    b9fa:	d1 40       	sbci	r29, 0x01	; 1
    b9fc:	94 87       	std	Z+12, r25	; 0x0c
    b9fe:	83 87       	std	Z+11, r24	; 0x0b
    ba00:	85 89       	ldd	r24, Z+21	; 0x15
    ba02:	96 89       	ldd	r25, Z+22	; 0x16
    ba04:	a7 89       	ldd	r26, Z+23	; 0x17
    ba06:	b0 8d       	ldd	r27, Z+24	; 0x18
    ba08:	c3 5e       	subi	r28, 0xE3	; 227
    ba0a:	de 4f       	sbci	r29, 0xFE	; 254
    ba0c:	88 83       	st	Y, r24
    ba0e:	99 83       	std	Y+1, r25	; 0x01
    ba10:	aa 83       	std	Y+2, r26	; 0x02
    ba12:	bb 83       	std	Y+3, r27	; 0x03
    ba14:	cd 51       	subi	r28, 0x1D	; 29
    ba16:	d1 40       	sbci	r29, 0x01	; 1
    ba18:	75 01       	movw	r14, r10
    ba1a:	ce 01       	movw	r24, r28
    ba1c:	01 96       	adiw	r24, 0x01	; 1
    ba1e:	4c 01       	movw	r8, r24
    ba20:	8f e2       	ldi	r24, 0x2F	; 47
    ba22:	38 2e       	mov	r3, r24
    ba24:	c3 5e       	subi	r28, 0xE3	; 227
    ba26:	de 4f       	sbci	r29, 0xFE	; 254
    ba28:	48 80       	ld	r4, Y
    ba2a:	59 80       	ldd	r5, Y+1	; 0x01
    ba2c:	6a 80       	ldd	r6, Y+2	; 0x02
    ba2e:	7b 80       	ldd	r7, Y+3	; 0x03
    ba30:	cd 51       	subi	r28, 0x1D	; 29
    ba32:	d1 40       	sbci	r29, 0x01	; 1
    ba34:	41 14       	cp	r4, r1
    ba36:	51 04       	cpc	r5, r1
    ba38:	61 04       	cpc	r6, r1
    ba3a:	71 04       	cpc	r7, r1
    ba3c:	09 f4       	brne	.+2      	; 0xba40 <f_getcwd+0xb0>
    ba3e:	a5 c0       	rjmp	.+330    	; 0xbb8a <f_getcwd+0x1fa>
    ba40:	40 e2       	ldi	r20, 0x20	; 32
    ba42:	50 e0       	ldi	r21, 0x00	; 0
    ba44:	60 e0       	ldi	r22, 0x00	; 0
    ba46:	70 e0       	ldi	r23, 0x00	; 0
    ba48:	ce 01       	movw	r24, r28
    ba4a:	89 5e       	subi	r24, 0xE9	; 233
    ba4c:	9e 4f       	sbci	r25, 0xFE	; 254
    ba4e:	0e 94 6a 4c 	call	0x98d4	; 0x98d4 <dir_sdi>
    ba52:	00 97       	sbiw	r24, 0x00	; 0
    ba54:	09 f0       	breq	.+2      	; 0xba58 <f_getcwd+0xc8>
    ba56:	95 c0       	rjmp	.+298    	; 0xbb82 <f_getcwd+0x1f2>
    ba58:	c3 5d       	subi	r28, 0xD3	; 211
    ba5a:	de 4f       	sbci	r29, 0xFE	; 254
    ba5c:	48 81       	ld	r20, Y
    ba5e:	59 81       	ldd	r21, Y+1	; 0x01
    ba60:	6a 81       	ldd	r22, Y+2	; 0x02
    ba62:	7b 81       	ldd	r23, Y+3	; 0x03
    ba64:	cd 52       	subi	r28, 0x2D	; 45
    ba66:	d1 40       	sbci	r29, 0x01	; 1
    ba68:	cb 5b       	subi	r28, 0xBB	; 187
    ba6a:	de 4f       	sbci	r29, 0xFE	; 254
    ba6c:	88 81       	ld	r24, Y
    ba6e:	99 81       	ldd	r25, Y+1	; 0x01
    ba70:	c5 54       	subi	r28, 0x45	; 69
    ba72:	d1 40       	sbci	r29, 0x01	; 1
    ba74:	0e 94 91 47 	call	0x8f22	; 0x8f22 <move_window>
    ba78:	00 97       	sbiw	r24, 0x00	; 0
    ba7a:	09 f0       	breq	.+2      	; 0xba7e <f_getcwd+0xee>
    ba7c:	82 c0       	rjmp	.+260    	; 0xbb82 <f_getcwd+0x1f2>
    ba7e:	cf 5c       	subi	r28, 0xCF	; 207
    ba80:	de 4f       	sbci	r29, 0xFE	; 254
    ba82:	68 81       	ld	r22, Y
    ba84:	79 81       	ldd	r23, Y+1	; 0x01
    ba86:	c1 53       	subi	r28, 0x31	; 49
    ba88:	d1 40       	sbci	r29, 0x01	; 1
    ba8a:	cb 5b       	subi	r28, 0xBB	; 187
    ba8c:	de 4f       	sbci	r29, 0xFE	; 254
    ba8e:	e8 81       	ld	r30, Y
    ba90:	f9 81       	ldd	r31, Y+1	; 0x01
    ba92:	c5 54       	subi	r28, 0x45	; 69
    ba94:	d1 40       	sbci	r29, 0x01	; 1
    ba96:	80 81       	ld	r24, Z
    ba98:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <ld_clust.isra.1>
    ba9c:	c3 5e       	subi	r28, 0xE3	; 227
    ba9e:	de 4f       	sbci	r29, 0xFE	; 254
    baa0:	68 83       	st	Y, r22
    baa2:	79 83       	std	Y+1, r23	; 0x01
    baa4:	8a 83       	std	Y+2, r24	; 0x02
    baa6:	9b 83       	std	Y+3, r25	; 0x03
    baa8:	cd 51       	subi	r28, 0x1D	; 29
    baaa:	d1 40       	sbci	r29, 0x01	; 1
    baac:	40 e0       	ldi	r20, 0x00	; 0
    baae:	50 e0       	ldi	r21, 0x00	; 0
    bab0:	ba 01       	movw	r22, r20
    bab2:	ce 01       	movw	r24, r28
    bab4:	89 5e       	subi	r24, 0xE9	; 233
    bab6:	9e 4f       	sbci	r25, 0xFE	; 254
    bab8:	0e 94 6a 4c 	call	0x98d4	; 0x98d4 <dir_sdi>
    babc:	00 97       	sbiw	r24, 0x00	; 0
    babe:	09 f0       	breq	.+2      	; 0xbac2 <f_getcwd+0x132>
    bac0:	60 c0       	rjmp	.+192    	; 0xbb82 <f_getcwd+0x1f2>
    bac2:	60 e0       	ldi	r22, 0x00	; 0
    bac4:	70 e0       	ldi	r23, 0x00	; 0
    bac6:	ce 01       	movw	r24, r28
    bac8:	89 5e       	subi	r24, 0xE9	; 233
    baca:	9e 4f       	sbci	r25, 0xFE	; 254
    bacc:	0e 94 c6 50 	call	0xa18c	; 0xa18c <dir_read>
    bad0:	00 97       	sbiw	r24, 0x00	; 0
    bad2:	09 f0       	breq	.+2      	; 0xbad6 <f_getcwd+0x146>
    bad4:	86 c0       	rjmp	.+268    	; 0xbbe2 <f_getcwd+0x252>
    bad6:	cf 5c       	subi	r28, 0xCF	; 207
    bad8:	de 4f       	sbci	r29, 0xFE	; 254
    bada:	68 81       	ld	r22, Y
    badc:	79 81       	ldd	r23, Y+1	; 0x01
    bade:	c1 53       	subi	r28, 0x31	; 49
    bae0:	d1 40       	sbci	r29, 0x01	; 1
    bae2:	cb 5b       	subi	r28, 0xBB	; 187
    bae4:	de 4f       	sbci	r29, 0xFE	; 254
    bae6:	e8 81       	ld	r30, Y
    bae8:	f9 81       	ldd	r31, Y+1	; 0x01
    baea:	c5 54       	subi	r28, 0x45	; 69
    baec:	d1 40       	sbci	r29, 0x01	; 1
    baee:	80 81       	ld	r24, Z
    baf0:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <ld_clust.isra.1>
    baf4:	46 16       	cp	r4, r22
    baf6:	57 06       	cpc	r5, r23
    baf8:	68 06       	cpc	r6, r24
    bafa:	79 06       	cpc	r7, r25
    bafc:	41 f4       	brne	.+16     	; 0xbb0e <f_getcwd+0x17e>
    bafe:	b4 01       	movw	r22, r8
    bb00:	ce 01       	movw	r24, r28
    bb02:	89 5e       	subi	r24, 0xE9	; 233
    bb04:	9e 4f       	sbci	r25, 0xFE	; 254
    bb06:	0e 94 8c 4e 	call	0x9d18	; 0x9d18 <get_fileinfo>
    bb0a:	f4 01       	movw	r30, r8
    bb0c:	0a c0       	rjmp	.+20     	; 0xbb22 <f_getcwd+0x192>
    bb0e:	60 e0       	ldi	r22, 0x00	; 0
    bb10:	70 e0       	ldi	r23, 0x00	; 0
    bb12:	ce 01       	movw	r24, r28
    bb14:	89 5e       	subi	r24, 0xE9	; 233
    bb16:	9e 4f       	sbci	r25, 0xFE	; 254
    bb18:	0e 94 64 4f 	call	0x9ec8	; 0x9ec8 <dir_next>
    bb1c:	00 97       	sbiw	r24, 0x00	; 0
    bb1e:	89 f2       	breq	.-94     	; 0xbac2 <f_getcwd+0x132>
    bb20:	60 c0       	rjmp	.+192    	; 0xbbe2 <f_getcwd+0x252>
    bb22:	cf 01       	movw	r24, r30
    bb24:	88 19       	sub	r24, r8
    bb26:	99 09       	sbc	r25, r9
    bb28:	31 96       	adiw	r30, 0x01	; 1
    bb2a:	25 89       	ldd	r18, Z+21	; 0x15
    bb2c:	21 11       	cpse	r18, r1
    bb2e:	f9 cf       	rjmp	.-14     	; 0xbb22 <f_getcwd+0x192>
    bb30:	9c 01       	movw	r18, r24
    bb32:	2d 5f       	subi	r18, 0xFD	; 253
    bb34:	3f 4f       	sbci	r19, 0xFF	; 255
    bb36:	e2 16       	cp	r14, r18
    bb38:	f3 06       	cpc	r15, r19
    bb3a:	28 f1       	brcs	.+74     	; 0xbb86 <f_getcwd+0x1f6>
    bb3c:	f4 01       	movw	r30, r8
    bb3e:	e8 0f       	add	r30, r24
    bb40:	f9 1f       	adc	r31, r25
    bb42:	97 01       	movw	r18, r14
    bb44:	e8 15       	cp	r30, r8
    bb46:	f9 05       	cpc	r31, r9
    bb48:	71 f0       	breq	.+28     	; 0xbb66 <f_getcwd+0x1d6>
    bb4a:	21 50       	subi	r18, 0x01	; 1
    bb4c:	31 09       	sbc	r19, r1
    bb4e:	45 89       	ldd	r20, Z+21	; 0x15
    bb50:	c9 5b       	subi	r28, 0xB9	; 185
    bb52:	de 4f       	sbci	r29, 0xFE	; 254
    bb54:	a8 81       	ld	r26, Y
    bb56:	b9 81       	ldd	r27, Y+1	; 0x01
    bb58:	c7 54       	subi	r28, 0x47	; 71
    bb5a:	d1 40       	sbci	r29, 0x01	; 1
    bb5c:	a2 0f       	add	r26, r18
    bb5e:	b3 1f       	adc	r27, r19
    bb60:	4c 93       	st	X, r20
    bb62:	31 97       	sbiw	r30, 0x01	; 1
    bb64:	ef cf       	rjmp	.-34     	; 0xbb44 <f_getcwd+0x1b4>
    bb66:	80 95       	com	r24
    bb68:	90 95       	com	r25
    bb6a:	e8 0e       	add	r14, r24
    bb6c:	f9 1e       	adc	r15, r25
    bb6e:	c9 5b       	subi	r28, 0xB9	; 185
    bb70:	de 4f       	sbci	r29, 0xFE	; 254
    bb72:	e8 81       	ld	r30, Y
    bb74:	f9 81       	ldd	r31, Y+1	; 0x01
    bb76:	c7 54       	subi	r28, 0x47	; 71
    bb78:	d1 40       	sbci	r29, 0x01	; 1
    bb7a:	ee 0d       	add	r30, r14
    bb7c:	ff 1d       	adc	r31, r15
    bb7e:	30 82       	st	Z, r3
    bb80:	51 cf       	rjmp	.-350    	; 0xba24 <f_getcwd+0x94>
    bb82:	8c 01       	movw	r16, r24
    bb84:	02 c0       	rjmp	.+4      	; 0xbb8a <f_getcwd+0x1fa>
    bb86:	01 e1       	ldi	r16, 0x11	; 17
    bb88:	10 e0       	ldi	r17, 0x00	; 0
    bb8a:	c9 5b       	subi	r28, 0xB9	; 185
    bb8c:	de 4f       	sbci	r29, 0xFE	; 254
    bb8e:	e8 81       	ld	r30, Y
    bb90:	f9 81       	ldd	r31, Y+1	; 0x01
    bb92:	c7 54       	subi	r28, 0x47	; 71
    bb94:	d1 40       	sbci	r29, 0x01	; 1
    bb96:	01 15       	cp	r16, r1
    bb98:	11 05       	cpc	r17, r1
    bb9a:	d1 f4       	brne	.+52     	; 0xbbd0 <f_getcwd+0x240>
    bb9c:	ea 14       	cp	r14, r10
    bb9e:	fb 04       	cpc	r15, r11
    bba0:	21 f4       	brne	.+8      	; 0xbbaa <f_getcwd+0x21a>
    bba2:	8f e2       	ldi	r24, 0x2F	; 47
    bba4:	80 83       	st	Z, r24
    bba6:	31 96       	adiw	r30, 0x01	; 1
    bba8:	13 c0       	rjmp	.+38     	; 0xbbd0 <f_getcwd+0x240>
    bbaa:	31 96       	adiw	r30, 0x01	; 1
    bbac:	c9 5b       	subi	r28, 0xB9	; 185
    bbae:	de 4f       	sbci	r29, 0xFE	; 254
    bbb0:	a8 81       	ld	r26, Y
    bbb2:	b9 81       	ldd	r27, Y+1	; 0x01
    bbb4:	c7 54       	subi	r28, 0x47	; 71
    bbb6:	d1 40       	sbci	r29, 0x01	; 1
    bbb8:	ae 0d       	add	r26, r14
    bbba:	bf 1d       	adc	r27, r15
    bbbc:	8c 91       	ld	r24, X
    bbbe:	df 01       	movw	r26, r30
    bbc0:	11 97       	sbiw	r26, 0x01	; 1
    bbc2:	8c 93       	st	X, r24
    bbc4:	c7 01       	movw	r24, r14
    bbc6:	01 96       	adiw	r24, 0x01	; 1
    bbc8:	7c 01       	movw	r14, r24
    bbca:	8a 15       	cp	r24, r10
    bbcc:	9b 05       	cpc	r25, r11
    bbce:	68 f3       	brcs	.-38     	; 0xbbaa <f_getcwd+0x21a>
    bbd0:	10 82       	st	Z, r1
    bbd2:	c6 01       	movw	r24, r12
    bbd4:	0e 94 62 6c 	call	0xd8c4	; 0xd8c4 <ff_memfree>
    bbd8:	c8 01       	movw	r24, r16
    bbda:	09 c0       	rjmp	.+18     	; 0xbbee <f_getcwd+0x25e>
    bbdc:	81 e1       	ldi	r24, 0x11	; 17
    bbde:	90 e0       	ldi	r25, 0x00	; 0
    bbe0:	06 c0       	rjmp	.+12     	; 0xbbee <f_getcwd+0x25e>
    bbe2:	8c 01       	movw	r16, r24
    bbe4:	04 97       	sbiw	r24, 0x04	; 4
    bbe6:	89 f6       	brne	.-94     	; 0xbb8a <f_getcwd+0x1fa>
    bbe8:	02 e0       	ldi	r16, 0x02	; 2
    bbea:	10 e0       	ldi	r17, 0x00	; 0
    bbec:	ce cf       	rjmp	.-100    	; 0xbb8a <f_getcwd+0x1fa>
    bbee:	c8 5b       	subi	r28, 0xB8	; 184
    bbf0:	de 4f       	sbci	r29, 0xFE	; 254
    bbf2:	e1 e1       	ldi	r30, 0x11	; 17
    bbf4:	0c 94 ac e9 	jmp	0x1d358	; 0x1d358 <__epilogue_restores__+0x2>

0000bbf8 <f_lseek>:
    bbf8:	aa e0       	ldi	r26, 0x0A	; 10
    bbfa:	b0 e0       	ldi	r27, 0x00	; 0
    bbfc:	e2 e0       	ldi	r30, 0x02	; 2
    bbfe:	fe e5       	ldi	r31, 0x5E	; 94
    bc00:	0c 94 8f e9 	jmp	0x1d31e	; 0x1d31e <__prologue_saves__>
    bc04:	1c 01       	movw	r2, r24
    bc06:	6a 01       	movw	r12, r20
    bc08:	7b 01       	movw	r14, r22
    bc0a:	be 01       	movw	r22, r28
    bc0c:	6f 5f       	subi	r22, 0xFF	; 255
    bc0e:	7f 4f       	sbci	r23, 0xFF	; 255
    bc10:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <validate>
    bc14:	00 97       	sbiw	r24, 0x00	; 0
    bc16:	09 f0       	breq	.+2      	; 0xbc1a <f_lseek+0x22>
    bc18:	c8 c2       	rjmp	.+1424   	; 0xc1aa <f_lseek+0x5b2>
    bc1a:	d1 01       	movw	r26, r2
    bc1c:	1f 96       	adiw	r26, 0x0f	; 15
    bc1e:	8c 91       	ld	r24, X
    bc20:	1f 97       	sbiw	r26, 0x0f	; 15
    bc22:	90 e0       	ldi	r25, 0x00	; 0
    bc24:	00 97       	sbiw	r24, 0x00	; 0
    bc26:	09 f0       	breq	.+2      	; 0xbc2a <f_lseek+0x32>
    bc28:	c0 c2       	rjmp	.+1408   	; 0xc1aa <f_lseek+0x5b2>
    bc2a:	92 96       	adiw	r26, 0x22	; 34
    bc2c:	ed 91       	ld	r30, X+
    bc2e:	fc 91       	ld	r31, X
    bc30:	93 97       	sbiw	r26, 0x23	; 35
    bc32:	30 97       	sbiw	r30, 0x00	; 0
    bc34:	09 f4       	brne	.+2      	; 0xbc38 <f_lseek+0x40>
    bc36:	3a c1       	rjmp	.+628    	; 0xbeac <f_lseek+0x2b4>
    bc38:	bf ef       	ldi	r27, 0xFF	; 255
    bc3a:	cb 16       	cp	r12, r27
    bc3c:	db 06       	cpc	r13, r27
    bc3e:	eb 06       	cpc	r14, r27
    bc40:	fb 06       	cpc	r15, r27
    bc42:	09 f0       	breq	.+2      	; 0xbc46 <f_lseek+0x4e>
    bc44:	9f c0       	rjmp	.+318    	; 0xbd84 <f_lseek+0x18c>
    bc46:	8f 01       	movw	r16, r30
    bc48:	0c 5f       	subi	r16, 0xFC	; 252
    bc4a:	1f 4f       	sbci	r17, 0xFF	; 255
    bc4c:	20 81       	ld	r18, Z
    bc4e:	31 81       	ldd	r19, Z+1	; 0x01
    bc50:	42 81       	ldd	r20, Z+2	; 0x02
    bc52:	53 81       	ldd	r21, Z+3	; 0x03
    bc54:	2f 83       	std	Y+7, r18	; 0x07
    bc56:	38 87       	std	Y+8, r19	; 0x08
    bc58:	49 87       	std	Y+9, r20	; 0x09
    bc5a:	5a 87       	std	Y+10, r21	; 0x0a
    bc5c:	d1 01       	movw	r26, r2
    bc5e:	16 96       	adiw	r26, 0x06	; 6
    bc60:	8d 90       	ld	r8, X+
    bc62:	9d 90       	ld	r9, X+
    bc64:	ad 90       	ld	r10, X+
    bc66:	bc 90       	ld	r11, X
    bc68:	19 97       	sbiw	r26, 0x09	; 9
    bc6a:	52 e0       	ldi	r21, 0x02	; 2
    bc6c:	c5 2e       	mov	r12, r21
    bc6e:	d1 2c       	mov	r13, r1
    bc70:	e1 2c       	mov	r14, r1
    bc72:	f1 2c       	mov	r15, r1
    bc74:	81 14       	cp	r8, r1
    bc76:	91 04       	cpc	r9, r1
    bc78:	a1 04       	cpc	r10, r1
    bc7a:	b1 04       	cpc	r11, r1
    bc7c:	09 f4       	brne	.+2      	; 0xbc80 <f_lseek+0x88>
    bc7e:	68 c0       	rjmp	.+208    	; 0xbd50 <f_lseek+0x158>
    bc80:	24 01       	movw	r4, r8
    bc82:	35 01       	movw	r6, r10
    bc84:	1b 82       	std	Y+3, r1	; 0x03
    bc86:	1c 82       	std	Y+4, r1	; 0x04
    bc88:	1d 82       	std	Y+5, r1	; 0x05
    bc8a:	1e 82       	std	Y+6, r1	; 0x06
    bc8c:	2b 81       	ldd	r18, Y+3	; 0x03
    bc8e:	3c 81       	ldd	r19, Y+4	; 0x04
    bc90:	4d 81       	ldd	r20, Y+5	; 0x05
    bc92:	5e 81       	ldd	r21, Y+6	; 0x06
    bc94:	2f 5f       	subi	r18, 0xFF	; 255
    bc96:	3f 4f       	sbci	r19, 0xFF	; 255
    bc98:	4f 4f       	sbci	r20, 0xFF	; 255
    bc9a:	5f 4f       	sbci	r21, 0xFF	; 255
    bc9c:	2b 83       	std	Y+3, r18	; 0x03
    bc9e:	3c 83       	std	Y+4, r19	; 0x04
    bca0:	4d 83       	std	Y+5, r20	; 0x05
    bca2:	5e 83       	std	Y+6, r21	; 0x06
    bca4:	b3 01       	movw	r22, r6
    bca6:	a2 01       	movw	r20, r4
    bca8:	d1 01       	movw	r26, r2
    bcaa:	8d 91       	ld	r24, X+
    bcac:	9c 91       	ld	r25, X
    bcae:	0e 94 b7 4b 	call	0x976e	; 0x976e <get_fat.isra.7>
    bcb2:	62 30       	cpi	r22, 0x02	; 2
    bcb4:	71 05       	cpc	r23, r1
    bcb6:	81 05       	cpc	r24, r1
    bcb8:	91 05       	cpc	r25, r1
    bcba:	20 f4       	brcc	.+8      	; 0xbcc4 <f_lseek+0xcc>
    bcbc:	82 e0       	ldi	r24, 0x02	; 2
    bcbe:	f1 01       	movw	r30, r2
    bcc0:	87 87       	std	Z+15, r24	; 0x0f
    bcc2:	0a c0       	rjmp	.+20     	; 0xbcd8 <f_lseek+0xe0>
    bcc4:	6f 3f       	cpi	r22, 0xFF	; 255
    bcc6:	ff ef       	ldi	r31, 0xFF	; 255
    bcc8:	7f 07       	cpc	r23, r31
    bcca:	8f 07       	cpc	r24, r31
    bccc:	9f 07       	cpc	r25, r31
    bcce:	31 f4       	brne	.+12     	; 0xbcdc <f_lseek+0xe4>
    bcd0:	81 e0       	ldi	r24, 0x01	; 1
    bcd2:	d1 01       	movw	r26, r2
    bcd4:	1f 96       	adiw	r26, 0x0f	; 15
    bcd6:	8c 93       	st	X, r24
    bcd8:	90 e0       	ldi	r25, 0x00	; 0
    bcda:	67 c2       	rjmp	.+1230   	; 0xc1aa <f_lseek+0x5b2>
    bcdc:	a3 01       	movw	r20, r6
    bcde:	92 01       	movw	r18, r4
    bce0:	2f 5f       	subi	r18, 0xFF	; 255
    bce2:	3f 4f       	sbci	r19, 0xFF	; 255
    bce4:	4f 4f       	sbci	r20, 0xFF	; 255
    bce6:	5f 4f       	sbci	r21, 0xFF	; 255
    bce8:	2b 01       	movw	r4, r22
    bcea:	3c 01       	movw	r6, r24
    bcec:	62 17       	cp	r22, r18
    bcee:	73 07       	cpc	r23, r19
    bcf0:	84 07       	cpc	r24, r20
    bcf2:	95 07       	cpc	r25, r21
    bcf4:	59 f2       	breq	.-106    	; 0xbc8c <f_lseek+0x94>
    bcf6:	b2 e0       	ldi	r27, 0x02	; 2
    bcf8:	cb 0e       	add	r12, r27
    bcfa:	d1 1c       	adc	r13, r1
    bcfc:	e1 1c       	adc	r14, r1
    bcfe:	f1 1c       	adc	r15, r1
    bd00:	2f 81       	ldd	r18, Y+7	; 0x07
    bd02:	38 85       	ldd	r19, Y+8	; 0x08
    bd04:	49 85       	ldd	r20, Y+9	; 0x09
    bd06:	5a 85       	ldd	r21, Y+10	; 0x0a
    bd08:	2c 15       	cp	r18, r12
    bd0a:	3d 05       	cpc	r19, r13
    bd0c:	4e 05       	cpc	r20, r14
    bd0e:	5f 05       	cpc	r21, r15
    bd10:	88 f0       	brcs	.+34     	; 0xbd34 <f_lseek+0x13c>
    bd12:	2b 81       	ldd	r18, Y+3	; 0x03
    bd14:	3c 81       	ldd	r19, Y+4	; 0x04
    bd16:	4d 81       	ldd	r20, Y+5	; 0x05
    bd18:	5e 81       	ldd	r21, Y+6	; 0x06
    bd1a:	d8 01       	movw	r26, r16
    bd1c:	2d 93       	st	X+, r18
    bd1e:	3d 93       	st	X+, r19
    bd20:	4d 93       	st	X+, r20
    bd22:	5c 93       	st	X, r21
    bd24:	13 97       	sbiw	r26, 0x03	; 3
    bd26:	f8 01       	movw	r30, r16
    bd28:	84 82       	std	Z+4, r8	; 0x04
    bd2a:	95 82       	std	Z+5, r9	; 0x05
    bd2c:	a6 82       	std	Z+6, r10	; 0x06
    bd2e:	b7 82       	std	Z+7, r11	; 0x07
    bd30:	08 5f       	subi	r16, 0xF8	; 248
    bd32:	1f 4f       	sbci	r17, 0xFF	; 255
    bd34:	e9 81       	ldd	r30, Y+1	; 0x01
    bd36:	fa 81       	ldd	r31, Y+2	; 0x02
    bd38:	81 8c       	ldd	r8, Z+25	; 0x19
    bd3a:	92 8c       	ldd	r9, Z+26	; 0x1a
    bd3c:	a3 8c       	ldd	r10, Z+27	; 0x1b
    bd3e:	b4 8c       	ldd	r11, Z+28	; 0x1c
    bd40:	68 15       	cp	r22, r8
    bd42:	79 05       	cpc	r23, r9
    bd44:	8a 05       	cpc	r24, r10
    bd46:	9b 05       	cpc	r25, r11
    bd48:	18 f4       	brcc	.+6      	; 0xbd50 <f_lseek+0x158>
    bd4a:	4b 01       	movw	r8, r22
    bd4c:	5c 01       	movw	r10, r24
    bd4e:	98 cf       	rjmp	.-208    	; 0xbc80 <f_lseek+0x88>
    bd50:	d1 01       	movw	r26, r2
    bd52:	92 96       	adiw	r26, 0x22	; 34
    bd54:	ed 91       	ld	r30, X+
    bd56:	fc 91       	ld	r31, X
    bd58:	93 97       	sbiw	r26, 0x23	; 35
    bd5a:	c0 82       	st	Z, r12
    bd5c:	d1 82       	std	Z+1, r13	; 0x01
    bd5e:	e2 82       	std	Z+2, r14	; 0x02
    bd60:	f3 82       	std	Z+3, r15	; 0x03
    bd62:	2f 81       	ldd	r18, Y+7	; 0x07
    bd64:	38 85       	ldd	r19, Y+8	; 0x08
    bd66:	49 85       	ldd	r20, Y+9	; 0x09
    bd68:	5a 85       	ldd	r21, Y+10	; 0x0a
    bd6a:	2c 15       	cp	r18, r12
    bd6c:	3d 05       	cpc	r19, r13
    bd6e:	4e 05       	cpc	r20, r14
    bd70:	5f 05       	cpc	r21, r15
    bd72:	08 f4       	brcc	.+2      	; 0xbd76 <f_lseek+0x17e>
    bd74:	11 c2       	rjmp	.+1058   	; 0xc198 <f_lseek+0x5a0>
    bd76:	d8 01       	movw	r26, r16
    bd78:	1d 92       	st	X+, r1
    bd7a:	1d 92       	st	X+, r1
    bd7c:	1d 92       	st	X+, r1
    bd7e:	1c 92       	st	X, r1
    bd80:	13 97       	sbiw	r26, 0x03	; 3
    bd82:	08 c2       	rjmp	.+1040   	; 0xc194 <f_lseek+0x59c>
    bd84:	f1 01       	movw	r30, r2
    bd86:	82 85       	ldd	r24, Z+10	; 0x0a
    bd88:	93 85       	ldd	r25, Z+11	; 0x0b
    bd8a:	a4 85       	ldd	r26, Z+12	; 0x0c
    bd8c:	b5 85       	ldd	r27, Z+13	; 0x0d
    bd8e:	46 01       	movw	r8, r12
    bd90:	57 01       	movw	r10, r14
    bd92:	8c 15       	cp	r24, r12
    bd94:	9d 05       	cpc	r25, r13
    bd96:	ae 05       	cpc	r26, r14
    bd98:	bf 05       	cpc	r27, r15
    bd9a:	10 f4       	brcc	.+4      	; 0xbda0 <f_lseek+0x1a8>
    bd9c:	4c 01       	movw	r8, r24
    bd9e:	5d 01       	movw	r10, r26
    bda0:	d1 01       	movw	r26, r2
    bda2:	50 96       	adiw	r26, 0x10	; 16
    bda4:	8d 92       	st	X+, r8
    bda6:	9d 92       	st	X+, r9
    bda8:	ad 92       	st	X+, r10
    bdaa:	bc 92       	st	X, r11
    bdac:	53 97       	sbiw	r26, 0x13	; 19
    bdae:	81 14       	cp	r8, r1
    bdb0:	91 04       	cpc	r9, r1
    bdb2:	a1 04       	cpc	r10, r1
    bdb4:	b1 04       	cpc	r11, r1
    bdb6:	09 f4       	brne	.+2      	; 0xbdba <f_lseek+0x1c2>
    bdb8:	ed c1       	rjmp	.+986    	; 0xc194 <f_lseek+0x59c>
    bdba:	24 01       	movw	r4, r8
    bdbc:	35 01       	movw	r6, r10
    bdbe:	b1 e0       	ldi	r27, 0x01	; 1
    bdc0:	4b 1a       	sub	r4, r27
    bdc2:	51 08       	sbc	r5, r1
    bdc4:	61 08       	sbc	r6, r1
    bdc6:	71 08       	sbc	r7, r1
    bdc8:	b3 01       	movw	r22, r6
    bdca:	a2 01       	movw	r20, r4
    bdcc:	c1 01       	movw	r24, r2
    bdce:	0e 94 06 46 	call	0x8c0c	; 0x8c0c <clmt_clust>
    bdd2:	ab 01       	movw	r20, r22
    bdd4:	bc 01       	movw	r22, r24
    bdd6:	f1 01       	movw	r30, r2
    bdd8:	44 8b       	std	Z+20, r20	; 0x14
    bdda:	55 8b       	std	Z+21, r21	; 0x15
    bddc:	66 8b       	std	Z+22, r22	; 0x16
    bdde:	77 8b       	std	Z+23, r23	; 0x17
    bde0:	e9 80       	ldd	r14, Y+1	; 0x01
    bde2:	fa 80       	ldd	r15, Y+2	; 0x02
    bde4:	c7 01       	movw	r24, r14
    bde6:	0e 94 de 45 	call	0x8bbc	; 0x8bbc <clust2sect>
    bdea:	61 15       	cp	r22, r1
    bdec:	71 05       	cpc	r23, r1
    bdee:	81 05       	cpc	r24, r1
    bdf0:	91 05       	cpc	r25, r1
    bdf2:	09 f4       	brne	.+2      	; 0xbdf6 <f_lseek+0x1fe>
    bdf4:	63 cf       	rjmp	.-314    	; 0xbcbc <f_lseek+0xc4>
    bdf6:	95 01       	movw	r18, r10
    bdf8:	84 01       	movw	r16, r8
    bdfa:	11 70       	andi	r17, 0x01	; 1
    bdfc:	22 27       	eor	r18, r18
    bdfe:	33 27       	eor	r19, r19
    be00:	01 15       	cp	r16, r1
    be02:	11 05       	cpc	r17, r1
    be04:	21 05       	cpc	r18, r1
    be06:	31 05       	cpc	r19, r1
    be08:	09 f4       	brne	.+2      	; 0xbe0c <f_lseek+0x214>
    be0a:	c4 c1       	rjmp	.+904    	; 0xc194 <f_lseek+0x59c>
    be0c:	d7 01       	movw	r26, r14
    be0e:	19 96       	adiw	r26, 0x09	; 9
    be10:	8d 90       	ld	r8, X+
    be12:	9c 90       	ld	r9, X
    be14:	1a 97       	sbiw	r26, 0x0a	; 10
    be16:	b1 e0       	ldi	r27, 0x01	; 1
    be18:	8b 1a       	sub	r8, r27
    be1a:	91 08       	sbc	r9, r1
    be1c:	a1 2c       	mov	r10, r1
    be1e:	b1 2c       	mov	r11, r1
    be20:	49 e0       	ldi	r20, 0x09	; 9
    be22:	76 94       	lsr	r7
    be24:	67 94       	ror	r6
    be26:	57 94       	ror	r5
    be28:	47 94       	ror	r4
    be2a:	4a 95       	dec	r20
    be2c:	d1 f7       	brne	.-12     	; 0xbe22 <f_lseek+0x22a>
    be2e:	48 20       	and	r4, r8
    be30:	59 20       	and	r5, r9
    be32:	6a 20       	and	r6, r10
    be34:	7b 20       	and	r7, r11
    be36:	53 01       	movw	r10, r6
    be38:	42 01       	movw	r8, r4
    be3a:	86 0e       	add	r8, r22
    be3c:	97 1e       	adc	r9, r23
    be3e:	a8 1e       	adc	r10, r24
    be40:	b9 1e       	adc	r11, r25
    be42:	f1 01       	movw	r30, r2
    be44:	20 8d       	ldd	r18, Z+24	; 0x18
    be46:	31 8d       	ldd	r19, Z+25	; 0x19
    be48:	42 8d       	ldd	r20, Z+26	; 0x1a
    be4a:	53 8d       	ldd	r21, Z+27	; 0x1b
    be4c:	82 16       	cp	r8, r18
    be4e:	93 06       	cpc	r9, r19
    be50:	a4 06       	cpc	r10, r20
    be52:	b5 06       	cpc	r11, r21
    be54:	09 f4       	brne	.+2      	; 0xbe58 <f_lseek+0x260>
    be56:	9e c1       	rjmp	.+828    	; 0xc194 <f_lseek+0x59c>
    be58:	86 85       	ldd	r24, Z+14	; 0x0e
    be5a:	b1 01       	movw	r22, r2
    be5c:	6c 5d       	subi	r22, 0xDC	; 220
    be5e:	7f 4f       	sbci	r23, 0xFF	; 255
    be60:	6b 01       	movw	r12, r22
    be62:	87 ff       	sbrs	r24, 7
    be64:	0e c0       	rjmp	.+28     	; 0xbe82 <f_lseek+0x28a>
    be66:	01 e0       	ldi	r16, 0x01	; 1
    be68:	10 e0       	ldi	r17, 0x00	; 0
    be6a:	d7 01       	movw	r26, r14
    be6c:	11 96       	adiw	r26, 0x01	; 1
    be6e:	8c 91       	ld	r24, X
    be70:	0e 94 fc 6c 	call	0xd9f8	; 0xd9f8 <disk_write>
    be74:	89 2b       	or	r24, r25
    be76:	09 f0       	breq	.+2      	; 0xbe7a <f_lseek+0x282>
    be78:	2b cf       	rjmp	.-426    	; 0xbcd0 <f_lseek+0xd8>
    be7a:	f1 01       	movw	r30, r2
    be7c:	86 85       	ldd	r24, Z+14	; 0x0e
    be7e:	8f 77       	andi	r24, 0x7F	; 127
    be80:	86 87       	std	Z+14, r24	; 0x0e
    be82:	e9 81       	ldd	r30, Y+1	; 0x01
    be84:	fa 81       	ldd	r31, Y+2	; 0x02
    be86:	01 e0       	ldi	r16, 0x01	; 1
    be88:	10 e0       	ldi	r17, 0x00	; 0
    be8a:	a5 01       	movw	r20, r10
    be8c:	94 01       	movw	r18, r8
    be8e:	b6 01       	movw	r22, r12
    be90:	81 81       	ldd	r24, Z+1	; 0x01
    be92:	0e 94 ec 6c 	call	0xd9d8	; 0xd9d8 <disk_read>
    be96:	89 2b       	or	r24, r25
    be98:	09 f0       	breq	.+2      	; 0xbe9c <f_lseek+0x2a4>
    be9a:	1a cf       	rjmp	.-460    	; 0xbcd0 <f_lseek+0xd8>
    be9c:	d1 01       	movw	r26, r2
    be9e:	58 96       	adiw	r26, 0x18	; 24
    bea0:	8d 92       	st	X+, r8
    bea2:	9d 92       	st	X+, r9
    bea4:	ad 92       	st	X+, r10
    bea6:	bc 92       	st	X, r11
    bea8:	5b 97       	sbiw	r26, 0x1b	; 27
    beaa:	74 c1       	rjmp	.+744    	; 0xc194 <f_lseek+0x59c>
    beac:	f1 01       	movw	r30, r2
    beae:	82 85       	ldd	r24, Z+10	; 0x0a
    beb0:	93 85       	ldd	r25, Z+11	; 0x0b
    beb2:	a4 85       	ldd	r26, Z+12	; 0x0c
    beb4:	b5 85       	ldd	r27, Z+13	; 0x0d
    beb6:	8c 15       	cp	r24, r12
    beb8:	9d 05       	cpc	r25, r13
    beba:	ae 05       	cpc	r26, r14
    bebc:	bf 05       	cpc	r27, r15
    bebe:	28 f4       	brcc	.+10     	; 0xbeca <f_lseek+0x2d2>
    bec0:	26 85       	ldd	r18, Z+14	; 0x0e
    bec2:	21 fd       	sbrc	r18, 1
    bec4:	02 c0       	rjmp	.+4      	; 0xbeca <f_lseek+0x2d2>
    bec6:	6c 01       	movw	r12, r24
    bec8:	7d 01       	movw	r14, r26
    beca:	d1 01       	movw	r26, r2
    becc:	50 96       	adiw	r26, 0x10	; 16
    bece:	4d 90       	ld	r4, X+
    bed0:	5d 90       	ld	r5, X+
    bed2:	6d 90       	ld	r6, X+
    bed4:	7c 90       	ld	r7, X
    bed6:	53 97       	sbiw	r26, 0x13	; 19
    bed8:	f1 01       	movw	r30, r2
    beda:	10 8a       	std	Z+16, r1	; 0x10
    bedc:	11 8a       	std	Z+17, r1	; 0x11
    bede:	12 8a       	std	Z+18, r1	; 0x12
    bee0:	13 8a       	std	Z+19, r1	; 0x13
    bee2:	c1 14       	cp	r12, r1
    bee4:	d1 04       	cpc	r13, r1
    bee6:	e1 04       	cpc	r14, r1
    bee8:	f1 04       	cpc	r15, r1
    beea:	09 f4       	brne	.+2      	; 0xbeee <f_lseek+0x2f6>
    beec:	57 c1       	rjmp	.+686    	; 0xc19c <f_lseek+0x5a4>
    beee:	e9 81       	ldd	r30, Y+1	; 0x01
    bef0:	fa 81       	ldd	r31, Y+2	; 0x02
    bef2:	81 84       	ldd	r8, Z+9	; 0x09
    bef4:	92 84       	ldd	r9, Z+10	; 0x0a
    bef6:	a1 2c       	mov	r10, r1
    bef8:	b1 2c       	mov	r11, r1
    befa:	39 e0       	ldi	r19, 0x09	; 9
    befc:	88 0c       	add	r8, r8
    befe:	99 1c       	adc	r9, r9
    bf00:	aa 1c       	adc	r10, r10
    bf02:	bb 1c       	adc	r11, r11
    bf04:	3a 95       	dec	r19
    bf06:	d1 f7       	brne	.-12     	; 0xbefc <f_lseek+0x304>
    bf08:	41 14       	cp	r4, r1
    bf0a:	51 04       	cpc	r5, r1
    bf0c:	61 04       	cpc	r6, r1
    bf0e:	71 04       	cpc	r7, r1
    bf10:	09 f4       	brne	.+2      	; 0xbf14 <f_lseek+0x31c>
    bf12:	3f c0       	rjmp	.+126    	; 0xbf92 <f_lseek+0x39a>
    bf14:	f1 e0       	ldi	r31, 0x01	; 1
    bf16:	4f 1a       	sub	r4, r31
    bf18:	51 08       	sbc	r5, r1
    bf1a:	61 08       	sbc	r6, r1
    bf1c:	71 08       	sbc	r7, r1
    bf1e:	c7 01       	movw	r24, r14
    bf20:	b6 01       	movw	r22, r12
    bf22:	61 50       	subi	r22, 0x01	; 1
    bf24:	71 09       	sbc	r23, r1
    bf26:	81 09       	sbc	r24, r1
    bf28:	91 09       	sbc	r25, r1
    bf2a:	a5 01       	movw	r20, r10
    bf2c:	94 01       	movw	r18, r8
    bf2e:	0e 94 22 e9 	call	0x1d244	; 0x1d244 <__udivmodsi4>
    bf32:	2b 83       	std	Y+3, r18	; 0x03
    bf34:	3c 83       	std	Y+4, r19	; 0x04
    bf36:	4d 83       	std	Y+5, r20	; 0x05
    bf38:	5e 83       	std	Y+6, r21	; 0x06
    bf3a:	c3 01       	movw	r24, r6
    bf3c:	b2 01       	movw	r22, r4
    bf3e:	a5 01       	movw	r20, r10
    bf40:	94 01       	movw	r18, r8
    bf42:	0e 94 22 e9 	call	0x1d244	; 0x1d244 <__udivmodsi4>
    bf46:	6b 81       	ldd	r22, Y+3	; 0x03
    bf48:	7c 81       	ldd	r23, Y+4	; 0x04
    bf4a:	8d 81       	ldd	r24, Y+5	; 0x05
    bf4c:	9e 81       	ldd	r25, Y+6	; 0x06
    bf4e:	62 17       	cp	r22, r18
    bf50:	73 07       	cpc	r23, r19
    bf52:	84 07       	cpc	r24, r20
    bf54:	95 07       	cpc	r25, r21
    bf56:	e8 f0       	brcs	.+58     	; 0xbf92 <f_lseek+0x39a>
    bf58:	88 27       	eor	r24, r24
    bf5a:	99 27       	eor	r25, r25
    bf5c:	dc 01       	movw	r26, r24
    bf5e:	88 19       	sub	r24, r8
    bf60:	99 09       	sbc	r25, r9
    bf62:	aa 09       	sbc	r26, r10
    bf64:	bb 09       	sbc	r27, r11
    bf66:	48 22       	and	r4, r24
    bf68:	59 22       	and	r5, r25
    bf6a:	6a 22       	and	r6, r26
    bf6c:	7b 22       	and	r7, r27
    bf6e:	d1 01       	movw	r26, r2
    bf70:	50 96       	adiw	r26, 0x10	; 16
    bf72:	4d 92       	st	X+, r4
    bf74:	5d 92       	st	X+, r5
    bf76:	6d 92       	st	X+, r6
    bf78:	7c 92       	st	X, r7
    bf7a:	53 97       	sbiw	r26, 0x13	; 19
    bf7c:	c4 18       	sub	r12, r4
    bf7e:	d5 08       	sbc	r13, r5
    bf80:	e6 08       	sbc	r14, r6
    bf82:	f7 08       	sbc	r15, r7
    bf84:	54 96       	adiw	r26, 0x14	; 20
    bf86:	4d 91       	ld	r20, X+
    bf88:	5d 91       	ld	r21, X+
    bf8a:	6d 91       	ld	r22, X+
    bf8c:	7c 91       	ld	r23, X
    bf8e:	57 97       	sbiw	r26, 0x17	; 23
    bf90:	2b c0       	rjmp	.+86     	; 0xbfe8 <f_lseek+0x3f0>
    bf92:	f1 01       	movw	r30, r2
    bf94:	46 81       	ldd	r20, Z+6	; 0x06
    bf96:	57 81       	ldd	r21, Z+7	; 0x07
    bf98:	60 85       	ldd	r22, Z+8	; 0x08
    bf9a:	71 85       	ldd	r23, Z+9	; 0x09
    bf9c:	41 15       	cp	r20, r1
    bf9e:	51 05       	cpc	r21, r1
    bfa0:	61 05       	cpc	r22, r1
    bfa2:	71 05       	cpc	r23, r1
    bfa4:	e1 f4       	brne	.+56     	; 0xbfde <f_lseek+0x3e6>
    bfa6:	40 e0       	ldi	r20, 0x00	; 0
    bfa8:	50 e0       	ldi	r21, 0x00	; 0
    bfaa:	ba 01       	movw	r22, r20
    bfac:	c1 01       	movw	r24, r2
    bfae:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <create_chain>
    bfb2:	ab 01       	movw	r20, r22
    bfb4:	bc 01       	movw	r22, r24
    bfb6:	41 30       	cpi	r20, 0x01	; 1
    bfb8:	51 05       	cpc	r21, r1
    bfba:	61 05       	cpc	r22, r1
    bfbc:	71 05       	cpc	r23, r1
    bfbe:	09 f4       	brne	.+2      	; 0xbfc2 <f_lseek+0x3ca>
    bfc0:	7d ce       	rjmp	.-774    	; 0xbcbc <f_lseek+0xc4>
    bfc2:	4f 3f       	cpi	r20, 0xFF	; 255
    bfc4:	ff ef       	ldi	r31, 0xFF	; 255
    bfc6:	5f 07       	cpc	r21, r31
    bfc8:	6f 07       	cpc	r22, r31
    bfca:	7f 07       	cpc	r23, r31
    bfcc:	09 f4       	brne	.+2      	; 0xbfd0 <f_lseek+0x3d8>
    bfce:	80 ce       	rjmp	.-768    	; 0xbcd0 <f_lseek+0xd8>
    bfd0:	d1 01       	movw	r26, r2
    bfd2:	16 96       	adiw	r26, 0x06	; 6
    bfd4:	4d 93       	st	X+, r20
    bfd6:	5d 93       	st	X+, r21
    bfd8:	6d 93       	st	X+, r22
    bfda:	7c 93       	st	X, r23
    bfdc:	19 97       	sbiw	r26, 0x09	; 9
    bfde:	f1 01       	movw	r30, r2
    bfe0:	44 8b       	std	Z+20, r20	; 0x14
    bfe2:	55 8b       	std	Z+21, r21	; 0x15
    bfe4:	66 8b       	std	Z+22, r22	; 0x16
    bfe6:	77 8b       	std	Z+23, r23	; 0x17
    bfe8:	41 15       	cp	r20, r1
    bfea:	51 05       	cpc	r21, r1
    bfec:	61 05       	cpc	r22, r1
    bfee:	71 05       	cpc	r23, r1
    bff0:	09 f0       	breq	.+2      	; 0xbff4 <f_lseek+0x3fc>
    bff2:	40 c0       	rjmp	.+128    	; 0xc074 <f_lseek+0x47c>
    bff4:	c1 2c       	mov	r12, r1
    bff6:	d1 2c       	mov	r13, r1
    bff8:	76 01       	movw	r14, r12
    bffa:	79 c0       	rjmp	.+242    	; 0xc0ee <f_lseek+0x4f6>
    bffc:	c8 18       	sub	r12, r8
    bffe:	d9 08       	sbc	r13, r9
    c000:	ea 08       	sbc	r14, r10
    c002:	fb 08       	sbc	r15, r11
    c004:	f1 01       	movw	r30, r2
    c006:	80 89       	ldd	r24, Z+16	; 0x10
    c008:	91 89       	ldd	r25, Z+17	; 0x11
    c00a:	a2 89       	ldd	r26, Z+18	; 0x12
    c00c:	b3 89       	ldd	r27, Z+19	; 0x13
    c00e:	88 0d       	add	r24, r8
    c010:	99 1d       	adc	r25, r9
    c012:	aa 1d       	adc	r26, r10
    c014:	bb 1d       	adc	r27, r11
    c016:	80 8b       	std	Z+16, r24	; 0x10
    c018:	91 8b       	std	Z+17, r25	; 0x11
    c01a:	a2 8b       	std	Z+18, r26	; 0x12
    c01c:	b3 8b       	std	Z+19, r27	; 0x13
    c01e:	86 85       	ldd	r24, Z+14	; 0x0e
    c020:	81 ff       	sbrs	r24, 1
    c022:	2f c0       	rjmp	.+94     	; 0xc082 <f_lseek+0x48a>
    c024:	c1 01       	movw	r24, r2
    c026:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <create_chain>
    c02a:	ab 01       	movw	r20, r22
    c02c:	bc 01       	movw	r22, r24
    c02e:	41 15       	cp	r20, r1
    c030:	51 05       	cpc	r21, r1
    c032:	61 05       	cpc	r22, r1
    c034:	71 05       	cpc	r23, r1
    c036:	61 f1       	breq	.+88     	; 0xc090 <f_lseek+0x498>
    c038:	4f 3f       	cpi	r20, 0xFF	; 255
    c03a:	bf ef       	ldi	r27, 0xFF	; 255
    c03c:	5b 07       	cpc	r21, r27
    c03e:	6b 07       	cpc	r22, r27
    c040:	7b 07       	cpc	r23, r27
    c042:	09 f4       	brne	.+2      	; 0xc046 <f_lseek+0x44e>
    c044:	45 ce       	rjmp	.-886    	; 0xbcd0 <f_lseek+0xd8>
    c046:	42 30       	cpi	r20, 0x02	; 2
    c048:	51 05       	cpc	r21, r1
    c04a:	61 05       	cpc	r22, r1
    c04c:	71 05       	cpc	r23, r1
    c04e:	08 f4       	brcc	.+2      	; 0xc052 <f_lseek+0x45a>
    c050:	35 ce       	rjmp	.-918    	; 0xbcbc <f_lseek+0xc4>
    c052:	e9 81       	ldd	r30, Y+1	; 0x01
    c054:	fa 81       	ldd	r31, Y+2	; 0x02
    c056:	81 8d       	ldd	r24, Z+25	; 0x19
    c058:	92 8d       	ldd	r25, Z+26	; 0x1a
    c05a:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c05c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c05e:	48 17       	cp	r20, r24
    c060:	59 07       	cpc	r21, r25
    c062:	6a 07       	cpc	r22, r26
    c064:	7b 07       	cpc	r23, r27
    c066:	08 f0       	brcs	.+2      	; 0xc06a <f_lseek+0x472>
    c068:	29 ce       	rjmp	.-942    	; 0xbcbc <f_lseek+0xc4>
    c06a:	f1 01       	movw	r30, r2
    c06c:	44 8b       	std	Z+20, r20	; 0x14
    c06e:	55 8b       	std	Z+21, r21	; 0x15
    c070:	66 8b       	std	Z+22, r22	; 0x16
    c072:	77 8b       	std	Z+23, r23	; 0x17
    c074:	8c 14       	cp	r8, r12
    c076:	9d 04       	cpc	r9, r13
    c078:	ae 04       	cpc	r10, r14
    c07a:	bf 04       	cpc	r11, r15
    c07c:	08 f4       	brcc	.+2      	; 0xc080 <f_lseek+0x488>
    c07e:	be cf       	rjmp	.-132    	; 0xbffc <f_lseek+0x404>
    c080:	0a c0       	rjmp	.+20     	; 0xc096 <f_lseek+0x49e>
    c082:	80 81       	ld	r24, Z
    c084:	91 81       	ldd	r25, Z+1	; 0x01
    c086:	0e 94 b7 4b 	call	0x976e	; 0x976e <get_fat.isra.7>
    c08a:	ab 01       	movw	r20, r22
    c08c:	bc 01       	movw	r22, r24
    c08e:	d4 cf       	rjmp	.-88     	; 0xc038 <f_lseek+0x440>
    c090:	c1 2c       	mov	r12, r1
    c092:	d1 2c       	mov	r13, r1
    c094:	76 01       	movw	r14, r12
    c096:	f1 01       	movw	r30, r2
    c098:	80 89       	ldd	r24, Z+16	; 0x10
    c09a:	91 89       	ldd	r25, Z+17	; 0x11
    c09c:	a2 89       	ldd	r26, Z+18	; 0x12
    c09e:	b3 89       	ldd	r27, Z+19	; 0x13
    c0a0:	8c 0d       	add	r24, r12
    c0a2:	9d 1d       	adc	r25, r13
    c0a4:	ae 1d       	adc	r26, r14
    c0a6:	bf 1d       	adc	r27, r15
    c0a8:	80 8b       	std	Z+16, r24	; 0x10
    c0aa:	91 8b       	std	Z+17, r25	; 0x11
    c0ac:	a2 8b       	std	Z+18, r26	; 0x12
    c0ae:	b3 8b       	std	Z+19, r27	; 0x13
    c0b0:	d7 01       	movw	r26, r14
    c0b2:	c6 01       	movw	r24, r12
    c0b4:	91 70       	andi	r25, 0x01	; 1
    c0b6:	aa 27       	eor	r26, r26
    c0b8:	bb 27       	eor	r27, r27
    c0ba:	89 2b       	or	r24, r25
    c0bc:	8a 2b       	or	r24, r26
    c0be:	8b 2b       	or	r24, r27
    c0c0:	09 f4       	brne	.+2      	; 0xc0c4 <f_lseek+0x4cc>
    c0c2:	98 cf       	rjmp	.-208    	; 0xbff4 <f_lseek+0x3fc>
    c0c4:	89 81       	ldd	r24, Y+1	; 0x01
    c0c6:	9a 81       	ldd	r25, Y+2	; 0x02
    c0c8:	0e 94 de 45 	call	0x8bbc	; 0x8bbc <clust2sect>
    c0cc:	61 15       	cp	r22, r1
    c0ce:	71 05       	cpc	r23, r1
    c0d0:	81 05       	cpc	r24, r1
    c0d2:	91 05       	cpc	r25, r1
    c0d4:	09 f4       	brne	.+2      	; 0xc0d8 <f_lseek+0x4e0>
    c0d6:	f2 cd       	rjmp	.-1052   	; 0xbcbc <f_lseek+0xc4>
    c0d8:	29 e0       	ldi	r18, 0x09	; 9
    c0da:	f6 94       	lsr	r15
    c0dc:	e7 94       	ror	r14
    c0de:	d7 94       	ror	r13
    c0e0:	c7 94       	ror	r12
    c0e2:	2a 95       	dec	r18
    c0e4:	d1 f7       	brne	.-12     	; 0xc0da <f_lseek+0x4e2>
    c0e6:	c6 0e       	add	r12, r22
    c0e8:	d7 1e       	adc	r13, r23
    c0ea:	e8 1e       	adc	r14, r24
    c0ec:	f9 1e       	adc	r15, r25
    c0ee:	f1 01       	movw	r30, r2
    c0f0:	80 89       	ldd	r24, Z+16	; 0x10
    c0f2:	91 89       	ldd	r25, Z+17	; 0x11
    c0f4:	a2 89       	ldd	r26, Z+18	; 0x12
    c0f6:	b3 89       	ldd	r27, Z+19	; 0x13
    c0f8:	42 85       	ldd	r20, Z+10	; 0x0a
    c0fa:	53 85       	ldd	r21, Z+11	; 0x0b
    c0fc:	64 85       	ldd	r22, Z+12	; 0x0c
    c0fe:	75 85       	ldd	r23, Z+13	; 0x0d
    c100:	48 17       	cp	r20, r24
    c102:	59 07       	cpc	r21, r25
    c104:	6a 07       	cpc	r22, r26
    c106:	7b 07       	cpc	r23, r27
    c108:	38 f4       	brcc	.+14     	; 0xc118 <f_lseek+0x520>
    c10a:	82 87       	std	Z+10, r24	; 0x0a
    c10c:	93 87       	std	Z+11, r25	; 0x0b
    c10e:	a4 87       	std	Z+12, r26	; 0x0c
    c110:	b5 87       	std	Z+13, r27	; 0x0d
    c112:	26 85       	ldd	r18, Z+14	; 0x0e
    c114:	20 64       	ori	r18, 0x40	; 64
    c116:	26 87       	std	Z+14, r18	; 0x0e
    c118:	91 70       	andi	r25, 0x01	; 1
    c11a:	aa 27       	eor	r26, r26
    c11c:	bb 27       	eor	r27, r27
    c11e:	89 2b       	or	r24, r25
    c120:	8a 2b       	or	r24, r26
    c122:	8b 2b       	or	r24, r27
    c124:	b9 f1       	breq	.+110    	; 0xc194 <f_lseek+0x59c>
    c126:	d1 01       	movw	r26, r2
    c128:	58 96       	adiw	r26, 0x18	; 24
    c12a:	2d 91       	ld	r18, X+
    c12c:	3d 91       	ld	r19, X+
    c12e:	4d 91       	ld	r20, X+
    c130:	5c 91       	ld	r21, X
    c132:	5b 97       	sbiw	r26, 0x1b	; 27
    c134:	2c 15       	cp	r18, r12
    c136:	3d 05       	cpc	r19, r13
    c138:	4e 05       	cpc	r20, r14
    c13a:	5f 05       	cpc	r21, r15
    c13c:	59 f1       	breq	.+86     	; 0xc194 <f_lseek+0x59c>
    c13e:	1e 96       	adiw	r26, 0x0e	; 14
    c140:	8c 91       	ld	r24, X
    c142:	f1 01       	movw	r30, r2
    c144:	b4 96       	adiw	r30, 0x24	; 36
    c146:	5f 01       	movw	r10, r30
    c148:	87 ff       	sbrs	r24, 7
    c14a:	12 c0       	rjmp	.+36     	; 0xc170 <f_lseek+0x578>
    c14c:	e9 81       	ldd	r30, Y+1	; 0x01
    c14e:	fa 81       	ldd	r31, Y+2	; 0x02
    c150:	01 e0       	ldi	r16, 0x01	; 1
    c152:	10 e0       	ldi	r17, 0x00	; 0
    c154:	b5 01       	movw	r22, r10
    c156:	81 81       	ldd	r24, Z+1	; 0x01
    c158:	0e 94 fc 6c 	call	0xd9f8	; 0xd9f8 <disk_write>
    c15c:	89 2b       	or	r24, r25
    c15e:	09 f0       	breq	.+2      	; 0xc162 <f_lseek+0x56a>
    c160:	b7 cd       	rjmp	.-1170   	; 0xbcd0 <f_lseek+0xd8>
    c162:	d1 01       	movw	r26, r2
    c164:	1e 96       	adiw	r26, 0x0e	; 14
    c166:	8c 91       	ld	r24, X
    c168:	1e 97       	sbiw	r26, 0x0e	; 14
    c16a:	8f 77       	andi	r24, 0x7F	; 127
    c16c:	1e 96       	adiw	r26, 0x0e	; 14
    c16e:	8c 93       	st	X, r24
    c170:	e9 81       	ldd	r30, Y+1	; 0x01
    c172:	fa 81       	ldd	r31, Y+2	; 0x02
    c174:	01 e0       	ldi	r16, 0x01	; 1
    c176:	10 e0       	ldi	r17, 0x00	; 0
    c178:	a7 01       	movw	r20, r14
    c17a:	96 01       	movw	r18, r12
    c17c:	b5 01       	movw	r22, r10
    c17e:	81 81       	ldd	r24, Z+1	; 0x01
    c180:	0e 94 ec 6c 	call	0xd9d8	; 0xd9d8 <disk_read>
    c184:	89 2b       	or	r24, r25
    c186:	09 f0       	breq	.+2      	; 0xc18a <f_lseek+0x592>
    c188:	a3 cd       	rjmp	.-1210   	; 0xbcd0 <f_lseek+0xd8>
    c18a:	f1 01       	movw	r30, r2
    c18c:	c0 8e       	std	Z+24, r12	; 0x18
    c18e:	d1 8e       	std	Z+25, r13	; 0x19
    c190:	e2 8e       	std	Z+26, r14	; 0x1a
    c192:	f3 8e       	std	Z+27, r15	; 0x1b
    c194:	80 e0       	ldi	r24, 0x00	; 0
    c196:	a0 cd       	rjmp	.-1216   	; 0xbcd8 <f_lseek+0xe0>
    c198:	81 e1       	ldi	r24, 0x11	; 17
    c19a:	9e cd       	rjmp	.-1220   	; 0xbcd8 <f_lseek+0xe0>
    c19c:	80 e0       	ldi	r24, 0x00	; 0
    c19e:	90 e0       	ldi	r25, 0x00	; 0
    c1a0:	dc 01       	movw	r26, r24
    c1a2:	c1 2c       	mov	r12, r1
    c1a4:	d1 2c       	mov	r13, r1
    c1a6:	76 01       	movw	r14, r12
    c1a8:	b7 cf       	rjmp	.-146    	; 0xc118 <f_lseek+0x520>
    c1aa:	2a 96       	adiw	r28, 0x0a	; 10
    c1ac:	e2 e1       	ldi	r30, 0x12	; 18
    c1ae:	0c 94 ab e9 	jmp	0x1d356	; 0x1d356 <__epilogue_restores__>

0000c1b2 <f_opendir>:
    c1b2:	a4 e0       	ldi	r26, 0x04	; 4
    c1b4:	b0 e0       	ldi	r27, 0x00	; 0
    c1b6:	ef ed       	ldi	r30, 0xDF	; 223
    c1b8:	f0 e6       	ldi	r31, 0x60	; 96
    c1ba:	0c 94 99 e9 	jmp	0x1d332	; 0x1d332 <__prologue_saves__+0x14>
    c1be:	7c 83       	std	Y+4, r23	; 0x04
    c1c0:	6b 83       	std	Y+3, r22	; 0x03
    c1c2:	00 97       	sbiw	r24, 0x00	; 0
    c1c4:	09 f4       	brne	.+2      	; 0xc1c8 <f_opendir+0x16>
    c1c6:	4a c0       	rjmp	.+148    	; 0xc25c <f_opendir+0xaa>
    c1c8:	8c 01       	movw	r16, r24
    c1ca:	40 e0       	ldi	r20, 0x00	; 0
    c1cc:	be 01       	movw	r22, r28
    c1ce:	6f 5f       	subi	r22, 0xFF	; 255
    c1d0:	7f 4f       	sbci	r23, 0xFF	; 255
    c1d2:	ce 01       	movw	r24, r28
    c1d4:	03 96       	adiw	r24, 0x03	; 3
    c1d6:	0e 94 11 48 	call	0x9022	; 0x9022 <find_volume>
    c1da:	7c 01       	movw	r14, r24
    c1dc:	89 2b       	or	r24, r25
    c1de:	c9 f5       	brne	.+114    	; 0xc252 <f_opendir+0xa0>
    c1e0:	89 81       	ldd	r24, Y+1	; 0x01
    c1e2:	9a 81       	ldd	r25, Y+2	; 0x02
    c1e4:	f8 01       	movw	r30, r16
    c1e6:	91 83       	std	Z+1, r25	; 0x01
    c1e8:	80 83       	st	Z, r24
    c1ea:	80 e0       	ldi	r24, 0x00	; 0
    c1ec:	92 e0       	ldi	r25, 0x02	; 2
    c1ee:	0e 94 5f 6c 	call	0xd8be	; 0xd8be <ff_memalloc>
    c1f2:	6c 01       	movw	r12, r24
    c1f4:	00 97       	sbiw	r24, 0x00	; 0
    c1f6:	a1 f1       	breq	.+104    	; 0xc260 <f_opendir+0xae>
    c1f8:	e9 81       	ldd	r30, Y+1	; 0x01
    c1fa:	fa 81       	ldd	r31, Y+2	; 0x02
    c1fc:	94 87       	std	Z+12, r25	; 0x0c
    c1fe:	83 87       	std	Z+11, r24	; 0x0b
    c200:	6b 81       	ldd	r22, Y+3	; 0x03
    c202:	7c 81       	ldd	r23, Y+4	; 0x04
    c204:	c8 01       	movw	r24, r16
    c206:	0e 94 97 54 	call	0xa92e	; 0xa92e <follow_path>
    c20a:	7c 01       	movw	r14, r24
    c20c:	89 2b       	or	r24, r25
    c20e:	b9 f4       	brne	.+46     	; 0xc23e <f_opendir+0x8c>
    c210:	f8 01       	movw	r30, r16
    c212:	87 a1       	ldd	r24, Z+39	; 0x27
    c214:	87 fd       	sbrc	r24, 7
    c216:	29 c0       	rjmp	.+82     	; 0xc26a <f_opendir+0xb8>
    c218:	84 81       	ldd	r24, Z+4	; 0x04
    c21a:	84 ff       	sbrs	r24, 4
    c21c:	0d c0       	rjmp	.+26     	; 0xc238 <f_opendir+0x86>
    c21e:	62 8d       	ldd	r22, Z+26	; 0x1a
    c220:	73 8d       	ldd	r23, Z+27	; 0x1b
    c222:	e9 81       	ldd	r30, Y+1	; 0x01
    c224:	fa 81       	ldd	r31, Y+2	; 0x02
    c226:	80 81       	ld	r24, Z
    c228:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <ld_clust.isra.1>
    c22c:	f8 01       	movw	r30, r16
    c22e:	66 83       	std	Z+6, r22	; 0x06
    c230:	77 83       	std	Z+7, r23	; 0x07
    c232:	80 87       	std	Z+8, r24	; 0x08
    c234:	91 87       	std	Z+9, r25	; 0x09
    c236:	19 c0       	rjmp	.+50     	; 0xc26a <f_opendir+0xb8>
    c238:	95 e0       	ldi	r25, 0x05	; 5
    c23a:	e9 2e       	mov	r14, r25
    c23c:	f1 2c       	mov	r15, r1
    c23e:	c6 01       	movw	r24, r12
    c240:	0e 94 62 6c 	call	0xd8c4	; 0xd8c4 <ff_memfree>
    c244:	f4 e0       	ldi	r31, 0x04	; 4
    c246:	ef 16       	cp	r14, r31
    c248:	f1 04       	cpc	r15, r1
    c24a:	f1 f0       	breq	.+60     	; 0xc288 <f_opendir+0xd6>
    c24c:	e1 14       	cp	r14, r1
    c24e:	f1 04       	cpc	r15, r1
    c250:	49 f0       	breq	.+18     	; 0xc264 <f_opendir+0xb2>
    c252:	f8 01       	movw	r30, r16
    c254:	11 82       	std	Z+1, r1	; 0x01
    c256:	10 82       	st	Z, r1
    c258:	c7 01       	movw	r24, r14
    c25a:	1a c0       	rjmp	.+52     	; 0xc290 <f_opendir+0xde>
    c25c:	89 e0       	ldi	r24, 0x09	; 9
    c25e:	03 c0       	rjmp	.+6      	; 0xc266 <f_opendir+0xb4>
    c260:	81 e1       	ldi	r24, 0x11	; 17
    c262:	01 c0       	rjmp	.+2      	; 0xc266 <f_opendir+0xb4>
    c264:	80 e0       	ldi	r24, 0x00	; 0
    c266:	90 e0       	ldi	r25, 0x00	; 0
    c268:	13 c0       	rjmp	.+38     	; 0xc290 <f_opendir+0xde>
    c26a:	e9 81       	ldd	r30, Y+1	; 0x01
    c26c:	fa 81       	ldd	r31, Y+2	; 0x02
    c26e:	85 81       	ldd	r24, Z+5	; 0x05
    c270:	96 81       	ldd	r25, Z+6	; 0x06
    c272:	f8 01       	movw	r30, r16
    c274:	93 83       	std	Z+3, r25	; 0x03
    c276:	82 83       	std	Z+2, r24	; 0x02
    c278:	40 e0       	ldi	r20, 0x00	; 0
    c27a:	50 e0       	ldi	r21, 0x00	; 0
    c27c:	ba 01       	movw	r22, r20
    c27e:	c8 01       	movw	r24, r16
    c280:	0e 94 6a 4c 	call	0x98d4	; 0x98d4 <dir_sdi>
    c284:	7c 01       	movw	r14, r24
    c286:	db cf       	rjmp	.-74     	; 0xc23e <f_opendir+0x8c>
    c288:	85 e0       	ldi	r24, 0x05	; 5
    c28a:	e8 2e       	mov	r14, r24
    c28c:	f1 2c       	mov	r15, r1
    c28e:	e1 cf       	rjmp	.-62     	; 0xc252 <f_opendir+0xa0>
    c290:	24 96       	adiw	r28, 0x04	; 4
    c292:	e8 e0       	ldi	r30, 0x08	; 8
    c294:	0c 94 b5 e9 	jmp	0x1d36a	; 0x1d36a <__epilogue_restores__+0x14>

0000c298 <f_closedir>:
    c298:	a2 e0       	ldi	r26, 0x02	; 2
    c29a:	b0 e0       	ldi	r27, 0x00	; 0
    c29c:	e2 e5       	ldi	r30, 0x52	; 82
    c29e:	f1 e6       	ldi	r31, 0x61	; 97
    c2a0:	0c 94 9d e9 	jmp	0x1d33a	; 0x1d33a <__prologue_saves__+0x1c>
    c2a4:	8c 01       	movw	r16, r24
    c2a6:	be 01       	movw	r22, r28
    c2a8:	6f 5f       	subi	r22, 0xFF	; 255
    c2aa:	7f 4f       	sbci	r23, 0xFF	; 255
    c2ac:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <validate>
    c2b0:	00 97       	sbiw	r24, 0x00	; 0
    c2b2:	19 f4       	brne	.+6      	; 0xc2ba <f_closedir+0x22>
    c2b4:	f8 01       	movw	r30, r16
    c2b6:	11 82       	std	Z+1, r1	; 0x01
    c2b8:	10 82       	st	Z, r1
    c2ba:	22 96       	adiw	r28, 0x02	; 2
    c2bc:	e4 e0       	ldi	r30, 0x04	; 4
    c2be:	0c 94 b9 e9 	jmp	0x1d372	; 0x1d372 <__epilogue_restores__+0x1c>

0000c2c2 <f_readdir>:
    c2c2:	a2 e0       	ldi	r26, 0x02	; 2
    c2c4:	b0 e0       	ldi	r27, 0x00	; 0
    c2c6:	e7 e6       	ldi	r30, 0x67	; 103
    c2c8:	f1 e6       	ldi	r31, 0x61	; 97
    c2ca:	0c 94 97 e9 	jmp	0x1d32e	; 0x1d32e <__prologue_saves__+0x10>
    c2ce:	7c 01       	movw	r14, r24
    c2d0:	5b 01       	movw	r10, r22
    c2d2:	be 01       	movw	r22, r28
    c2d4:	6f 5f       	subi	r22, 0xFF	; 255
    c2d6:	7f 4f       	sbci	r23, 0xFF	; 255
    c2d8:	0e 94 71 46 	call	0x8ce2	; 0x8ce2 <validate>
    c2dc:	00 97       	sbiw	r24, 0x00	; 0
    c2de:	99 f5       	brne	.+102    	; 0xc346 <f_readdir+0x84>
    c2e0:	a1 14       	cp	r10, r1
    c2e2:	b1 04       	cpc	r11, r1
    c2e4:	39 f4       	brne	.+14     	; 0xc2f4 <f_readdir+0x32>
    c2e6:	40 e0       	ldi	r20, 0x00	; 0
    c2e8:	50 e0       	ldi	r21, 0x00	; 0
    c2ea:	ba 01       	movw	r22, r20
    c2ec:	c7 01       	movw	r24, r14
    c2ee:	0e 94 6a 4c 	call	0x98d4	; 0x98d4 <dir_sdi>
    c2f2:	29 c0       	rjmp	.+82     	; 0xc346 <f_readdir+0x84>
    c2f4:	80 e0       	ldi	r24, 0x00	; 0
    c2f6:	92 e0       	ldi	r25, 0x02	; 2
    c2f8:	0e 94 5f 6c 	call	0xd8be	; 0xd8be <ff_memalloc>
    c2fc:	6c 01       	movw	r12, r24
    c2fe:	00 97       	sbiw	r24, 0x00	; 0
    c300:	01 f1       	breq	.+64     	; 0xc342 <f_readdir+0x80>
    c302:	e9 81       	ldd	r30, Y+1	; 0x01
    c304:	fa 81       	ldd	r31, Y+2	; 0x02
    c306:	94 87       	std	Z+12, r25	; 0x0c
    c308:	83 87       	std	Z+11, r24	; 0x0b
    c30a:	60 e0       	ldi	r22, 0x00	; 0
    c30c:	70 e0       	ldi	r23, 0x00	; 0
    c30e:	c7 01       	movw	r24, r14
    c310:	0e 94 c6 50 	call	0xa18c	; 0xa18c <dir_read>
    c314:	8c 01       	movw	r16, r24
    c316:	8b 7f       	andi	r24, 0xFB	; 251
    c318:	89 2b       	or	r24, r25
    c31a:	71 f4       	brne	.+28     	; 0xc338 <f_readdir+0x76>
    c31c:	b5 01       	movw	r22, r10
    c31e:	c7 01       	movw	r24, r14
    c320:	0e 94 8c 4e 	call	0x9d18	; 0x9d18 <get_fileinfo>
    c324:	60 e0       	ldi	r22, 0x00	; 0
    c326:	70 e0       	ldi	r23, 0x00	; 0
    c328:	c7 01       	movw	r24, r14
    c32a:	0e 94 64 4f 	call	0x9ec8	; 0x9ec8 <dir_next>
    c32e:	8c 01       	movw	r16, r24
    c330:	04 97       	sbiw	r24, 0x04	; 4
    c332:	11 f4       	brne	.+4      	; 0xc338 <f_readdir+0x76>
    c334:	00 e0       	ldi	r16, 0x00	; 0
    c336:	10 e0       	ldi	r17, 0x00	; 0
    c338:	c6 01       	movw	r24, r12
    c33a:	0e 94 62 6c 	call	0xd8c4	; 0xd8c4 <ff_memfree>
    c33e:	c8 01       	movw	r24, r16
    c340:	02 c0       	rjmp	.+4      	; 0xc346 <f_readdir+0x84>
    c342:	81 e1       	ldi	r24, 0x11	; 17
    c344:	90 e0       	ldi	r25, 0x00	; 0
    c346:	22 96       	adiw	r28, 0x02	; 2
    c348:	ea e0       	ldi	r30, 0x0A	; 10
    c34a:	0c 94 b3 e9 	jmp	0x1d366	; 0x1d366 <__epilogue_restores__+0x10>

0000c34e <f_stat>:
    c34e:	a0 e3       	ldi	r26, 0x30	; 48
    c350:	b0 e0       	ldi	r27, 0x00	; 0
    c352:	ed ea       	ldi	r30, 0xAD	; 173
    c354:	f1 e6       	ldi	r31, 0x61	; 97
    c356:	0c 94 99 e9 	jmp	0x1d332	; 0x1d332 <__prologue_saves__+0x14>
    c35a:	98 ab       	std	Y+48, r25	; 0x30
    c35c:	8f a7       	std	Y+47, r24	; 0x2f
    c35e:	6b 01       	movw	r12, r22
    c360:	40 e0       	ldi	r20, 0x00	; 0
    c362:	be 01       	movw	r22, r28
    c364:	6f 5f       	subi	r22, 0xFF	; 255
    c366:	7f 4f       	sbci	r23, 0xFF	; 255
    c368:	ce 01       	movw	r24, r28
    c36a:	8f 96       	adiw	r24, 0x2f	; 47
    c36c:	0e 94 11 48 	call	0x9022	; 0x9022 <find_volume>
    c370:	00 97       	sbiw	r24, 0x00	; 0
    c372:	49 f5       	brne	.+82     	; 0xc3c6 <f_stat+0x78>
    c374:	80 e0       	ldi	r24, 0x00	; 0
    c376:	92 e0       	ldi	r25, 0x02	; 2
    c378:	0e 94 5f 6c 	call	0xd8be	; 0xd8be <ff_memalloc>
    c37c:	7c 01       	movw	r14, r24
    c37e:	00 97       	sbiw	r24, 0x00	; 0
    c380:	01 f1       	breq	.+64     	; 0xc3c2 <f_stat+0x74>
    c382:	e9 81       	ldd	r30, Y+1	; 0x01
    c384:	fa 81       	ldd	r31, Y+2	; 0x02
    c386:	94 87       	std	Z+12, r25	; 0x0c
    c388:	83 87       	std	Z+11, r24	; 0x0b
    c38a:	6f a5       	ldd	r22, Y+47	; 0x2f
    c38c:	78 a9       	ldd	r23, Y+48	; 0x30
    c38e:	ce 01       	movw	r24, r28
    c390:	01 96       	adiw	r24, 0x01	; 1
    c392:	0e 94 97 54 	call	0xa92e	; 0xa92e <follow_path>
    c396:	8c 01       	movw	r16, r24
    c398:	89 2b       	or	r24, r25
    c39a:	71 f4       	brne	.+28     	; 0xc3b8 <f_stat+0x6a>
    c39c:	88 a5       	ldd	r24, Y+40	; 0x28
    c39e:	87 fd       	sbrc	r24, 7
    c3a0:	09 c0       	rjmp	.+18     	; 0xc3b4 <f_stat+0x66>
    c3a2:	c1 14       	cp	r12, r1
    c3a4:	d1 04       	cpc	r13, r1
    c3a6:	41 f0       	breq	.+16     	; 0xc3b8 <f_stat+0x6a>
    c3a8:	b6 01       	movw	r22, r12
    c3aa:	ce 01       	movw	r24, r28
    c3ac:	01 96       	adiw	r24, 0x01	; 1
    c3ae:	0e 94 8c 4e 	call	0x9d18	; 0x9d18 <get_fileinfo>
    c3b2:	02 c0       	rjmp	.+4      	; 0xc3b8 <f_stat+0x6a>
    c3b4:	06 e0       	ldi	r16, 0x06	; 6
    c3b6:	10 e0       	ldi	r17, 0x00	; 0
    c3b8:	c7 01       	movw	r24, r14
    c3ba:	0e 94 62 6c 	call	0xd8c4	; 0xd8c4 <ff_memfree>
    c3be:	c8 01       	movw	r24, r16
    c3c0:	02 c0       	rjmp	.+4      	; 0xc3c6 <f_stat+0x78>
    c3c2:	81 e1       	ldi	r24, 0x11	; 17
    c3c4:	90 e0       	ldi	r25, 0x00	; 0
    c3c6:	e0 96       	adiw	r28, 0x30	; 48
    c3c8:	e8 e0       	ldi	r30, 0x08	; 8
    c3ca:	0c 94 b5 e9 	jmp	0x1d36a	; 0x1d36a <__epilogue_restores__+0x14>

0000c3ce <f_getfree>:
    c3ce:	ac e0       	ldi	r26, 0x0C	; 12
    c3d0:	b0 e0       	ldi	r27, 0x00	; 0
    c3d2:	ed ee       	ldi	r30, 0xED	; 237
    c3d4:	f1 e6       	ldi	r31, 0x61	; 97
    c3d6:	0c 94 8f e9 	jmp	0x1d31e	; 0x1d31e <__prologue_saves__>
    c3da:	9c 83       	std	Y+4, r25	; 0x04
    c3dc:	8b 83       	std	Y+3, r24	; 0x03
    c3de:	78 87       	std	Y+8, r23	; 0x08
    c3e0:	6f 83       	std	Y+7, r22	; 0x07
    c3e2:	7a 01       	movw	r14, r20
    c3e4:	40 e0       	ldi	r20, 0x00	; 0
    c3e6:	be 01       	movw	r22, r28
    c3e8:	6f 5f       	subi	r22, 0xFF	; 255
    c3ea:	7f 4f       	sbci	r23, 0xFF	; 255
    c3ec:	ce 01       	movw	r24, r28
    c3ee:	03 96       	adiw	r24, 0x03	; 3
    c3f0:	0e 94 11 48 	call	0x9022	; 0x9022 <find_volume>
    c3f4:	9e 83       	std	Y+6, r25	; 0x06
    c3f6:	8d 83       	std	Y+5, r24	; 0x05
    c3f8:	89 2b       	or	r24, r25
    c3fa:	09 f0       	breq	.+2      	; 0xc3fe <f_getfree+0x30>
    c3fc:	cf c0       	rjmp	.+414    	; 0xc59c <f_getfree+0x1ce>
    c3fe:	69 80       	ldd	r6, Y+1	; 0x01
    c400:	7a 80       	ldd	r7, Y+2	; 0x02
    c402:	d7 01       	movw	r26, r14
    c404:	6d 92       	st	X+, r6
    c406:	7c 92       	st	X, r7
    c408:	f3 01       	movw	r30, r6
    c40a:	81 89       	ldd	r24, Z+17	; 0x11
    c40c:	92 89       	ldd	r25, Z+18	; 0x12
    c40e:	a3 89       	ldd	r26, Z+19	; 0x13
    c410:	b4 89       	ldd	r27, Z+20	; 0x14
    c412:	81 8c       	ldd	r8, Z+25	; 0x19
    c414:	92 8c       	ldd	r9, Z+26	; 0x1a
    c416:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c418:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c41a:	b5 01       	movw	r22, r10
    c41c:	a4 01       	movw	r20, r8
    c41e:	42 50       	subi	r20, 0x02	; 2
    c420:	51 09       	sbc	r21, r1
    c422:	61 09       	sbc	r22, r1
    c424:	71 09       	sbc	r23, r1
    c426:	48 17       	cp	r20, r24
    c428:	59 07       	cpc	r21, r25
    c42a:	6a 07       	cpc	r22, r26
    c42c:	7b 07       	cpc	r23, r27
    c42e:	38 f0       	brcs	.+14     	; 0xc43e <f_getfree+0x70>
    c430:	ef 81       	ldd	r30, Y+7	; 0x07
    c432:	f8 85       	ldd	r31, Y+8	; 0x08
    c434:	80 83       	st	Z, r24
    c436:	91 83       	std	Z+1, r25	; 0x01
    c438:	a2 83       	std	Z+2, r26	; 0x02
    c43a:	b3 83       	std	Z+3, r27	; 0x03
    c43c:	af c0       	rjmp	.+350    	; 0xc59c <f_getfree+0x1ce>
    c43e:	80 81       	ld	r24, Z
    c440:	81 30       	cpi	r24, 0x01	; 1
    c442:	a1 f5       	brne	.+104    	; 0xc4ac <f_getfree+0xde>
    c444:	82 e0       	ldi	r24, 0x02	; 2
    c446:	88 2e       	mov	r8, r24
    c448:	91 2c       	mov	r9, r1
    c44a:	a1 2c       	mov	r10, r1
    c44c:	b1 2c       	mov	r11, r1
    c44e:	c1 2c       	mov	r12, r1
    c450:	d1 2c       	mov	r13, r1
    c452:	76 01       	movw	r14, r12
    c454:	b5 01       	movw	r22, r10
    c456:	a4 01       	movw	r20, r8
    c458:	c3 01       	movw	r24, r6
    c45a:	0e 94 b7 4b 	call	0x976e	; 0x976e <get_fat.isra.7>
    c45e:	6f 3f       	cpi	r22, 0xFF	; 255
    c460:	bf ef       	ldi	r27, 0xFF	; 255
    c462:	7b 07       	cpc	r23, r27
    c464:	8b 07       	cpc	r24, r27
    c466:	9b 07       	cpc	r25, r27
    c468:	09 f4       	brne	.+2      	; 0xc46c <f_getfree+0x9e>
    c46a:	7c c0       	rjmp	.+248    	; 0xc564 <f_getfree+0x196>
    c46c:	61 30       	cpi	r22, 0x01	; 1
    c46e:	71 05       	cpc	r23, r1
    c470:	81 05       	cpc	r24, r1
    c472:	91 05       	cpc	r25, r1
    c474:	09 f4       	brne	.+2      	; 0xc478 <f_getfree+0xaa>
    c476:	7b c0       	rjmp	.+246    	; 0xc56e <f_getfree+0x1a0>
    c478:	67 2b       	or	r22, r23
    c47a:	68 2b       	or	r22, r24
    c47c:	69 2b       	or	r22, r25
    c47e:	29 f4       	brne	.+10     	; 0xc48a <f_getfree+0xbc>
    c480:	ef ef       	ldi	r30, 0xFF	; 255
    c482:	ce 1a       	sub	r12, r30
    c484:	de 0a       	sbc	r13, r30
    c486:	ee 0a       	sbc	r14, r30
    c488:	fe 0a       	sbc	r15, r30
    c48a:	ff ef       	ldi	r31, 0xFF	; 255
    c48c:	8f 1a       	sub	r8, r31
    c48e:	9f 0a       	sbc	r9, r31
    c490:	af 0a       	sbc	r10, r31
    c492:	bf 0a       	sbc	r11, r31
    c494:	e9 81       	ldd	r30, Y+1	; 0x01
    c496:	fa 81       	ldd	r31, Y+2	; 0x02
    c498:	81 8d       	ldd	r24, Z+25	; 0x19
    c49a:	92 8d       	ldd	r25, Z+26	; 0x1a
    c49c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c49e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c4a0:	88 16       	cp	r8, r24
    c4a2:	99 06       	cpc	r9, r25
    c4a4:	aa 06       	cpc	r10, r26
    c4a6:	bb 06       	cpc	r11, r27
    c4a8:	a8 f2       	brcs	.-86     	; 0xc454 <f_getfree+0x86>
    c4aa:	68 c0       	rjmp	.+208    	; 0xc57c <f_getfree+0x1ae>
    c4ac:	45 a0       	ldd	r4, Z+37	; 0x25
    c4ae:	56 a0       	ldd	r5, Z+38	; 0x26
    c4b0:	67 a0       	ldd	r6, Z+39	; 0x27
    c4b2:	70 a4       	ldd	r7, Z+40	; 0x28
    c4b4:	21 2c       	mov	r2, r1
    c4b6:	31 2c       	mov	r3, r1
    c4b8:	00 e0       	ldi	r16, 0x00	; 0
    c4ba:	10 e0       	ldi	r17, 0x00	; 0
    c4bc:	c1 2c       	mov	r12, r1
    c4be:	d1 2c       	mov	r13, r1
    c4c0:	76 01       	movw	r14, r12
    c4c2:	01 15       	cp	r16, r1
    c4c4:	11 05       	cpc	r17, r1
    c4c6:	e9 f4       	brne	.+58     	; 0xc502 <f_getfree+0x134>
    c4c8:	d3 01       	movw	r26, r6
    c4ca:	c2 01       	movw	r24, r4
    c4cc:	01 96       	adiw	r24, 0x01	; 1
    c4ce:	a1 1d       	adc	r26, r1
    c4d0:	b1 1d       	adc	r27, r1
    c4d2:	89 87       	std	Y+9, r24	; 0x09
    c4d4:	9a 87       	std	Y+10, r25	; 0x0a
    c4d6:	ab 87       	std	Y+11, r26	; 0x0b
    c4d8:	bc 87       	std	Y+12, r27	; 0x0c
    c4da:	b3 01       	movw	r22, r6
    c4dc:	a2 01       	movw	r20, r4
    c4de:	89 81       	ldd	r24, Y+1	; 0x01
    c4e0:	9a 81       	ldd	r25, Y+2	; 0x02
    c4e2:	0e 94 91 47 	call	0x8f22	; 0x8f22 <move_window>
    c4e6:	00 97       	sbiw	r24, 0x00	; 0
    c4e8:	09 f0       	breq	.+2      	; 0xc4ec <f_getfree+0x11e>
    c4ea:	46 c0       	rjmp	.+140    	; 0xc578 <f_getfree+0x1aa>
    c4ec:	29 80       	ldd	r2, Y+1	; 0x01
    c4ee:	3a 80       	ldd	r3, Y+2	; 0x02
    c4f0:	95 e3       	ldi	r25, 0x35	; 53
    c4f2:	29 0e       	add	r2, r25
    c4f4:	31 1c       	adc	r3, r1
    c4f6:	49 84       	ldd	r4, Y+9	; 0x09
    c4f8:	5a 84       	ldd	r5, Y+10	; 0x0a
    c4fa:	6b 84       	ldd	r6, Y+11	; 0x0b
    c4fc:	7c 84       	ldd	r7, Y+12	; 0x0c
    c4fe:	00 e0       	ldi	r16, 0x00	; 0
    c500:	12 e0       	ldi	r17, 0x02	; 2
    c502:	e9 81       	ldd	r30, Y+1	; 0x01
    c504:	fa 81       	ldd	r31, Y+2	; 0x02
    c506:	80 81       	ld	r24, Z
    c508:	82 30       	cpi	r24, 0x02	; 2
    c50a:	81 f4       	brne	.+32     	; 0xc52c <f_getfree+0x15e>
    c50c:	d1 01       	movw	r26, r2
    c50e:	8d 91       	ld	r24, X+
    c510:	9c 91       	ld	r25, X
    c512:	89 2b       	or	r24, r25
    c514:	29 f4       	brne	.+10     	; 0xc520 <f_getfree+0x152>
    c516:	bf ef       	ldi	r27, 0xFF	; 255
    c518:	cb 1a       	sub	r12, r27
    c51a:	db 0a       	sbc	r13, r27
    c51c:	eb 0a       	sbc	r14, r27
    c51e:	fb 0a       	sbc	r15, r27
    c520:	e2 e0       	ldi	r30, 0x02	; 2
    c522:	2e 0e       	add	r2, r30
    c524:	31 1c       	adc	r3, r1
    c526:	02 50       	subi	r16, 0x02	; 2
    c528:	11 09       	sbc	r17, r1
    c52a:	14 c0       	rjmp	.+40     	; 0xc554 <f_getfree+0x186>
    c52c:	c1 01       	movw	r24, r2
    c52e:	0e 94 ba 45 	call	0x8b74	; 0x8b74 <ld_dword>
    c532:	dc 01       	movw	r26, r24
    c534:	cb 01       	movw	r24, r22
    c536:	bf 70       	andi	r27, 0x0F	; 15
    c538:	89 2b       	or	r24, r25
    c53a:	8a 2b       	or	r24, r26
    c53c:	8b 2b       	or	r24, r27
    c53e:	29 f4       	brne	.+10     	; 0xc54a <f_getfree+0x17c>
    c540:	ff ef       	ldi	r31, 0xFF	; 255
    c542:	cf 1a       	sub	r12, r31
    c544:	df 0a       	sbc	r13, r31
    c546:	ef 0a       	sbc	r14, r31
    c548:	ff 0a       	sbc	r15, r31
    c54a:	24 e0       	ldi	r18, 0x04	; 4
    c54c:	22 0e       	add	r2, r18
    c54e:	31 1c       	adc	r3, r1
    c550:	04 50       	subi	r16, 0x04	; 4
    c552:	11 09       	sbc	r17, r1
    c554:	81 e0       	ldi	r24, 0x01	; 1
    c556:	88 1a       	sub	r8, r24
    c558:	91 08       	sbc	r9, r1
    c55a:	a1 08       	sbc	r10, r1
    c55c:	b1 08       	sbc	r11, r1
    c55e:	09 f0       	breq	.+2      	; 0xc562 <f_getfree+0x194>
    c560:	b0 cf       	rjmp	.-160    	; 0xc4c2 <f_getfree+0xf4>
    c562:	0c c0       	rjmp	.+24     	; 0xc57c <f_getfree+0x1ae>
    c564:	a1 e0       	ldi	r26, 0x01	; 1
    c566:	b0 e0       	ldi	r27, 0x00	; 0
    c568:	be 83       	std	Y+6, r27	; 0x06
    c56a:	ad 83       	std	Y+5, r26	; 0x05
    c56c:	07 c0       	rjmp	.+14     	; 0xc57c <f_getfree+0x1ae>
    c56e:	e2 e0       	ldi	r30, 0x02	; 2
    c570:	f0 e0       	ldi	r31, 0x00	; 0
    c572:	fe 83       	std	Y+6, r31	; 0x06
    c574:	ed 83       	std	Y+5, r30	; 0x05
    c576:	02 c0       	rjmp	.+4      	; 0xc57c <f_getfree+0x1ae>
    c578:	9e 83       	std	Y+6, r25	; 0x06
    c57a:	8d 83       	std	Y+5, r24	; 0x05
    c57c:	af 81       	ldd	r26, Y+7	; 0x07
    c57e:	b8 85       	ldd	r27, Y+8	; 0x08
    c580:	cd 92       	st	X+, r12
    c582:	dd 92       	st	X+, r13
    c584:	ed 92       	st	X+, r14
    c586:	fc 92       	st	X, r15
    c588:	13 97       	sbiw	r26, 0x03	; 3
    c58a:	e9 81       	ldd	r30, Y+1	; 0x01
    c58c:	fa 81       	ldd	r31, Y+2	; 0x02
    c58e:	c1 8a       	std	Z+17, r12	; 0x11
    c590:	d2 8a       	std	Z+18, r13	; 0x12
    c592:	e3 8a       	std	Z+19, r14	; 0x13
    c594:	f4 8a       	std	Z+20, r15	; 0x14
    c596:	84 81       	ldd	r24, Z+4	; 0x04
    c598:	81 60       	ori	r24, 0x01	; 1
    c59a:	84 83       	std	Z+4, r24	; 0x04
    c59c:	8d 81       	ldd	r24, Y+5	; 0x05
    c59e:	9e 81       	ldd	r25, Y+6	; 0x06
    c5a0:	2c 96       	adiw	r28, 0x0c	; 12
    c5a2:	e2 e1       	ldi	r30, 0x12	; 18
    c5a4:	0c 94 ab e9 	jmp	0x1d356	; 0x1d356 <__epilogue_restores__>

0000c5a8 <f_unlink>:
    c5a8:	a0 e6       	ldi	r26, 0x60	; 96
    c5aa:	b0 e0       	ldi	r27, 0x00	; 0
    c5ac:	ea ed       	ldi	r30, 0xDA	; 218
    c5ae:	f2 e6       	ldi	r31, 0x62	; 98
    c5b0:	0c 94 96 e9 	jmp	0x1d32c	; 0x1d32c <__prologue_saves__+0xe>
    c5b4:	a1 96       	adiw	r28, 0x21	; 33
    c5b6:	9f af       	std	Y+63, r25	; 0x3f
    c5b8:	8e af       	std	Y+62, r24	; 0x3e
    c5ba:	a1 97       	sbiw	r28, 0x21	; 33
    c5bc:	42 e0       	ldi	r20, 0x02	; 2
    c5be:	be 01       	movw	r22, r28
    c5c0:	63 5a       	subi	r22, 0xA3	; 163
    c5c2:	7f 4f       	sbci	r23, 0xFF	; 255
    c5c4:	ce 01       	movw	r24, r28
    c5c6:	81 5a       	subi	r24, 0xA1	; 161
    c5c8:	9f 4f       	sbci	r25, 0xFF	; 255
    c5ca:	0e 94 11 48 	call	0x9022	; 0x9022 <find_volume>
    c5ce:	6f 96       	adiw	r28, 0x1f	; 31
    c5d0:	2e ad       	ldd	r18, Y+62	; 0x3e
    c5d2:	3f ad       	ldd	r19, Y+63	; 0x3f
    c5d4:	6f 97       	sbiw	r28, 0x1f	; 31
    c5d6:	38 ab       	std	Y+48, r19	; 0x30
    c5d8:	2f a7       	std	Y+47, r18	; 0x2f
    c5da:	00 97       	sbiw	r24, 0x00	; 0
    c5dc:	09 f0       	breq	.+2      	; 0xc5e0 <f_unlink+0x38>
    c5de:	88 c0       	rjmp	.+272    	; 0xc6f0 <f_unlink+0x148>
    c5e0:	80 e0       	ldi	r24, 0x00	; 0
    c5e2:	92 e0       	ldi	r25, 0x02	; 2
    c5e4:	0e 94 5f 6c 	call	0xd8be	; 0xd8be <ff_memalloc>
    c5e8:	5c 01       	movw	r10, r24
    c5ea:	00 97       	sbiw	r24, 0x00	; 0
    c5ec:	09 f4       	brne	.+2      	; 0xc5f0 <f_unlink+0x48>
    c5ee:	4a c0       	rjmp	.+148    	; 0xc684 <f_unlink+0xdc>
    c5f0:	6f 96       	adiw	r28, 0x1f	; 31
    c5f2:	ee ad       	ldd	r30, Y+62	; 0x3e
    c5f4:	ff ad       	ldd	r31, Y+63	; 0x3f
    c5f6:	6f 97       	sbiw	r28, 0x1f	; 31
    c5f8:	94 87       	std	Z+12, r25	; 0x0c
    c5fa:	83 87       	std	Z+11, r24	; 0x0b
    c5fc:	a1 96       	adiw	r28, 0x21	; 33
    c5fe:	6e ad       	ldd	r22, Y+62	; 0x3e
    c600:	7f ad       	ldd	r23, Y+63	; 0x3f
    c602:	a1 97       	sbiw	r28, 0x21	; 33
    c604:	ce 01       	movw	r24, r28
    c606:	8f 96       	adiw	r24, 0x2f	; 47
    c608:	0e 94 97 54 	call	0xa92e	; 0xa92e <follow_path>
    c60c:	8c 01       	movw	r16, r24
    c60e:	89 2b       	or	r24, r25
    c610:	a1 f5       	brne	.+104    	; 0xc67a <f_unlink+0xd2>
    c612:	67 96       	adiw	r28, 0x17	; 23
    c614:	8f ad       	ldd	r24, Y+63	; 0x3f
    c616:	67 97       	sbiw	r28, 0x17	; 23
    c618:	85 fd       	sbrc	r24, 5
    c61a:	37 c0       	rjmp	.+110    	; 0xc68a <f_unlink+0xe2>
    c61c:	87 fd       	sbrc	r24, 7
    c61e:	35 c0       	rjmp	.+106    	; 0xc68a <f_unlink+0xe2>
    c620:	9b a8       	ldd	r9, Y+51	; 0x33
    c622:	90 fc       	sbrc	r9, 0
    c624:	41 c0       	rjmp	.+130    	; 0xc6a8 <f_unlink+0x100>
    c626:	6f 96       	adiw	r28, 0x1f	; 31
    c628:	0e ad       	ldd	r16, Y+62	; 0x3e
    c62a:	1f ad       	ldd	r17, Y+63	; 0x3f
    c62c:	6f 97       	sbiw	r28, 0x1f	; 31
    c62e:	2b 96       	adiw	r28, 0x0b	; 11
    c630:	6e ad       	ldd	r22, Y+62	; 0x3e
    c632:	7f ad       	ldd	r23, Y+63	; 0x3f
    c634:	2b 97       	sbiw	r28, 0x0b	; 11
    c636:	f8 01       	movw	r30, r16
    c638:	80 81       	ld	r24, Z
    c63a:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <ld_clust.isra.1>
    c63e:	6b 01       	movw	r12, r22
    c640:	7c 01       	movw	r14, r24
    c642:	94 fe       	sbrs	r9, 4
    c644:	34 c0       	rjmp	.+104    	; 0xc6ae <f_unlink+0x106>
    c646:	f8 01       	movw	r30, r16
    c648:	85 89       	ldd	r24, Z+21	; 0x15
    c64a:	96 89       	ldd	r25, Z+22	; 0x16
    c64c:	a7 89       	ldd	r26, Z+23	; 0x17
    c64e:	b0 8d       	ldd	r27, Z+24	; 0x18
    c650:	c8 16       	cp	r12, r24
    c652:	d9 06       	cpc	r13, r25
    c654:	ea 06       	cpc	r14, r26
    c656:	fb 06       	cpc	r15, r27
    c658:	39 f1       	breq	.+78     	; 0xc6a8 <f_unlink+0x100>
    c65a:	1a 83       	std	Y+2, r17	; 0x02
    c65c:	09 83       	std	Y+1, r16	; 0x01
    c65e:	cf 82       	std	Y+7, r12	; 0x07
    c660:	d8 86       	std	Y+8, r13	; 0x08
    c662:	e9 86       	std	Y+9, r14	; 0x09
    c664:	fa 86       	std	Y+10, r15	; 0x0a
    c666:	40 e0       	ldi	r20, 0x00	; 0
    c668:	50 e0       	ldi	r21, 0x00	; 0
    c66a:	ba 01       	movw	r22, r20
    c66c:	ce 01       	movw	r24, r28
    c66e:	01 96       	adiw	r24, 0x01	; 1
    c670:	0e 94 6a 4c 	call	0x98d4	; 0x98d4 <dir_sdi>
    c674:	8c 01       	movw	r16, r24
    c676:	89 2b       	or	r24, r25
    c678:	59 f0       	breq	.+22     	; 0xc690 <f_unlink+0xe8>
    c67a:	c5 01       	movw	r24, r10
    c67c:	0e 94 62 6c 	call	0xd8c4	; 0xd8c4 <ff_memfree>
    c680:	c8 01       	movw	r24, r16
    c682:	36 c0       	rjmp	.+108    	; 0xc6f0 <f_unlink+0x148>
    c684:	81 e1       	ldi	r24, 0x11	; 17
    c686:	90 e0       	ldi	r25, 0x00	; 0
    c688:	33 c0       	rjmp	.+102    	; 0xc6f0 <f_unlink+0x148>
    c68a:	06 e0       	ldi	r16, 0x06	; 6
    c68c:	10 e0       	ldi	r17, 0x00	; 0
    c68e:	f5 cf       	rjmp	.-22     	; 0xc67a <f_unlink+0xd2>
    c690:	60 e0       	ldi	r22, 0x00	; 0
    c692:	70 e0       	ldi	r23, 0x00	; 0
    c694:	ce 01       	movw	r24, r28
    c696:	01 96       	adiw	r24, 0x01	; 1
    c698:	0e 94 c6 50 	call	0xa18c	; 0xa18c <dir_read>
    c69c:	8c 01       	movw	r16, r24
    c69e:	00 97       	sbiw	r24, 0x00	; 0
    c6a0:	19 f0       	breq	.+6      	; 0xc6a8 <f_unlink+0x100>
    c6a2:	04 97       	sbiw	r24, 0x04	; 4
    c6a4:	21 f0       	breq	.+8      	; 0xc6ae <f_unlink+0x106>
    c6a6:	e9 cf       	rjmp	.-46     	; 0xc67a <f_unlink+0xd2>
    c6a8:	07 e0       	ldi	r16, 0x07	; 7
    c6aa:	10 e0       	ldi	r17, 0x00	; 0
    c6ac:	e6 cf       	rjmp	.-52     	; 0xc67a <f_unlink+0xd2>
    c6ae:	ce 01       	movw	r24, r28
    c6b0:	8f 96       	adiw	r24, 0x2f	; 47
    c6b2:	0e 94 94 51 	call	0xa328	; 0xa328 <dir_remove>
    c6b6:	8c 01       	movw	r16, r24
    c6b8:	89 2b       	or	r24, r25
    c6ba:	f9 f6       	brne	.-66     	; 0xc67a <f_unlink+0xd2>
    c6bc:	c1 14       	cp	r12, r1
    c6be:	d1 04       	cpc	r13, r1
    c6c0:	e1 04       	cpc	r14, r1
    c6c2:	f1 04       	cpc	r15, r1
    c6c4:	41 f4       	brne	.+16     	; 0xc6d6 <f_unlink+0x12e>
    c6c6:	6f 96       	adiw	r28, 0x1f	; 31
    c6c8:	8e ad       	ldd	r24, Y+62	; 0x3e
    c6ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    c6cc:	6f 97       	sbiw	r28, 0x1f	; 31
    c6ce:	0e 94 25 47 	call	0x8e4a	; 0x8e4a <sync_fs>
    c6d2:	8c 01       	movw	r16, r24
    c6d4:	d2 cf       	rjmp	.-92     	; 0xc67a <f_unlink+0xd2>
    c6d6:	00 e0       	ldi	r16, 0x00	; 0
    c6d8:	10 e0       	ldi	r17, 0x00	; 0
    c6da:	98 01       	movw	r18, r16
    c6dc:	b7 01       	movw	r22, r14
    c6de:	a6 01       	movw	r20, r12
    c6e0:	ce 01       	movw	r24, r28
    c6e2:	8f 96       	adiw	r24, 0x2f	; 47
    c6e4:	0e 94 fb 4d 	call	0x9bf6	; 0x9bf6 <remove_chain>
    c6e8:	8c 01       	movw	r16, r24
    c6ea:	89 2b       	or	r24, r25
    c6ec:	31 f6       	brne	.-116    	; 0xc67a <f_unlink+0xd2>
    c6ee:	eb cf       	rjmp	.-42     	; 0xc6c6 <f_unlink+0x11e>
    c6f0:	c0 5a       	subi	r28, 0xA0	; 160
    c6f2:	df 4f       	sbci	r29, 0xFF	; 255
    c6f4:	eb e0       	ldi	r30, 0x0B	; 11
    c6f6:	0c 94 b2 e9 	jmp	0x1d364	; 0x1d364 <__epilogue_restores__+0xe>

0000c6fa <f_mkdir>:
    c6fa:	ac e3       	ldi	r26, 0x3C	; 60
    c6fc:	b0 e0       	ldi	r27, 0x00	; 0
    c6fe:	e3 e8       	ldi	r30, 0x83	; 131
    c700:	f3 e6       	ldi	r31, 0x63	; 99
    c702:	0c 94 8f e9 	jmp	0x1d31e	; 0x1d31e <__prologue_saves__>
    c706:	9a ab       	std	Y+50, r25	; 0x32
    c708:	89 ab       	std	Y+49, r24	; 0x31
    c70a:	42 e0       	ldi	r20, 0x02	; 2
    c70c:	be 01       	movw	r22, r28
    c70e:	61 5d       	subi	r22, 0xD1	; 209
    c710:	7f 4f       	sbci	r23, 0xFF	; 255
    c712:	ce 01       	movw	r24, r28
    c714:	c1 96       	adiw	r24, 0x31	; 49
    c716:	0e 94 11 48 	call	0x9022	; 0x9022 <find_volume>
    c71a:	2f a5       	ldd	r18, Y+47	; 0x2f
    c71c:	38 a9       	ldd	r19, Y+48	; 0x30
    c71e:	3a 83       	std	Y+2, r19	; 0x02
    c720:	29 83       	std	Y+1, r18	; 0x01
    c722:	00 97       	sbiw	r24, 0x00	; 0
    c724:	09 f0       	breq	.+2      	; 0xc728 <f_mkdir+0x2e>
    c726:	2c c1       	rjmp	.+600    	; 0xc980 <f_mkdir+0x286>
    c728:	80 e0       	ldi	r24, 0x00	; 0
    c72a:	92 e0       	ldi	r25, 0x02	; 2
    c72c:	0e 94 5f 6c 	call	0xd8be	; 0xd8be <ff_memalloc>
    c730:	98 af       	std	Y+56, r25	; 0x38
    c732:	8f ab       	std	Y+55, r24	; 0x37
    c734:	00 97       	sbiw	r24, 0x00	; 0
    c736:	d9 f0       	breq	.+54     	; 0xc76e <f_mkdir+0x74>
    c738:	ef a5       	ldd	r30, Y+47	; 0x2f
    c73a:	f8 a9       	ldd	r31, Y+48	; 0x30
    c73c:	94 87       	std	Z+12, r25	; 0x0c
    c73e:	83 87       	std	Z+11, r24	; 0x0b
    c740:	69 a9       	ldd	r22, Y+49	; 0x31
    c742:	7a a9       	ldd	r23, Y+50	; 0x32
    c744:	ce 01       	movw	r24, r28
    c746:	01 96       	adiw	r24, 0x01	; 1
    c748:	0e 94 97 54 	call	0xa92e	; 0xa92e <follow_path>
    c74c:	7c 01       	movw	r14, r24
    c74e:	00 97       	sbiw	r24, 0x00	; 0
    c750:	89 f0       	breq	.+34     	; 0xc774 <f_mkdir+0x7a>
    c752:	04 97       	sbiw	r24, 0x04	; 4
    c754:	31 f4       	brne	.+12     	; 0xc762 <f_mkdir+0x68>
    c756:	88 a5       	ldd	r24, Y+40	; 0x28
    c758:	85 ff       	sbrs	r24, 5
    c75a:	10 c0       	rjmp	.+32     	; 0xc77c <f_mkdir+0x82>
    c75c:	36 e0       	ldi	r19, 0x06	; 6
    c75e:	e3 2e       	mov	r14, r19
    c760:	f1 2c       	mov	r15, r1
    c762:	8f a9       	ldd	r24, Y+55	; 0x37
    c764:	98 ad       	ldd	r25, Y+56	; 0x38
    c766:	0e 94 62 6c 	call	0xd8c4	; 0xd8c4 <ff_memfree>
    c76a:	c7 01       	movw	r24, r14
    c76c:	09 c1       	rjmp	.+530    	; 0xc980 <f_mkdir+0x286>
    c76e:	81 e1       	ldi	r24, 0x11	; 17
    c770:	90 e0       	ldi	r25, 0x00	; 0
    c772:	06 c1       	rjmp	.+524    	; 0xc980 <f_mkdir+0x286>
    c774:	48 e0       	ldi	r20, 0x08	; 8
    c776:	e4 2e       	mov	r14, r20
    c778:	f1 2c       	mov	r15, r1
    c77a:	f3 cf       	rjmp	.-26     	; 0xc762 <f_mkdir+0x68>
    c77c:	40 e0       	ldi	r20, 0x00	; 0
    c77e:	50 e0       	ldi	r21, 0x00	; 0
    c780:	ba 01       	movw	r22, r20
    c782:	ce 01       	movw	r24, r28
    c784:	01 96       	adiw	r24, 0x01	; 1
    c786:	0e 94 2a 4d 	call	0x9a54	; 0x9a54 <create_chain>
    c78a:	4b 01       	movw	r8, r22
    c78c:	5c 01       	movw	r10, r24
    c78e:	8f a5       	ldd	r24, Y+47	; 0x2f
    c790:	98 a9       	ldd	r25, Y+48	; 0x30
    c792:	dc 01       	movw	r26, r24
    c794:	19 96       	adiw	r26, 0x09	; 9
    c796:	4d 91       	ld	r20, X+
    c798:	5c 91       	ld	r21, X
    c79a:	1a 97       	sbiw	r26, 0x0a	; 10
    c79c:	60 e0       	ldi	r22, 0x00	; 0
    c79e:	70 e0       	ldi	r23, 0x00	; 0
    c7a0:	29 e0       	ldi	r18, 0x09	; 9
    c7a2:	44 0f       	add	r20, r20
    c7a4:	55 1f       	adc	r21, r21
    c7a6:	66 1f       	adc	r22, r22
    c7a8:	77 1f       	adc	r23, r23
    c7aa:	2a 95       	dec	r18
    c7ac:	d1 f7       	brne	.-12     	; 0xc7a2 <f_mkdir+0xa8>
    c7ae:	4b 87       	std	Y+11, r20	; 0x0b
    c7b0:	5c 87       	std	Y+12, r21	; 0x0c
    c7b2:	6d 87       	std	Y+13, r22	; 0x0d
    c7b4:	7e 87       	std	Y+14, r23	; 0x0e
    c7b6:	81 14       	cp	r8, r1
    c7b8:	91 04       	cpc	r9, r1
    c7ba:	a1 04       	cpc	r10, r1
    c7bc:	b1 04       	cpc	r11, r1
    c7be:	a9 f0       	breq	.+42     	; 0xc7ea <f_mkdir+0xf0>
    c7c0:	31 e0       	ldi	r19, 0x01	; 1
    c7c2:	83 16       	cp	r8, r19
    c7c4:	91 04       	cpc	r9, r1
    c7c6:	a1 04       	cpc	r10, r1
    c7c8:	b1 04       	cpc	r11, r1
    c7ca:	59 f0       	breq	.+22     	; 0xc7e2 <f_mkdir+0xe8>
    c7cc:	4f ef       	ldi	r20, 0xFF	; 255
    c7ce:	84 16       	cp	r8, r20
    c7d0:	94 06       	cpc	r9, r20
    c7d2:	a4 06       	cpc	r10, r20
    c7d4:	b4 06       	cpc	r11, r20
    c7d6:	09 f0       	breq	.+2      	; 0xc7da <f_mkdir+0xe0>
    c7d8:	cf c0       	rjmp	.+414    	; 0xc978 <f_mkdir+0x27e>
    c7da:	ee 24       	eor	r14, r14
    c7dc:	e3 94       	inc	r14
    c7de:	f1 2c       	mov	r15, r1
    c7e0:	07 c0       	rjmp	.+14     	; 0xc7f0 <f_mkdir+0xf6>
    c7e2:	62 e0       	ldi	r22, 0x02	; 2
    c7e4:	e6 2e       	mov	r14, r22
    c7e6:	f1 2c       	mov	r15, r1
    c7e8:	03 c0       	rjmp	.+6      	; 0xc7f0 <f_mkdir+0xf6>
    c7ea:	57 e0       	ldi	r21, 0x07	; 7
    c7ec:	e5 2e       	mov	r14, r21
    c7ee:	f1 2c       	mov	r15, r1
    c7f0:	0e 94 61 73 	call	0xe6c2	; 0xe6c2 <get_fattime>
    c7f4:	2b 01       	movw	r4, r22
    c7f6:	3c 01       	movw	r6, r24
    c7f8:	e1 14       	cp	r14, r1
    c7fa:	f1 04       	cpc	r15, r1
    c7fc:	09 f0       	breq	.+2      	; 0xc800 <f_mkdir+0x106>
    c7fe:	8f c0       	rjmp	.+286    	; 0xc91e <f_mkdir+0x224>
    c800:	0f a5       	ldd	r16, Y+47	; 0x2f
    c802:	18 a9       	ldd	r17, Y+48	; 0x30
    c804:	b5 01       	movw	r22, r10
    c806:	a4 01       	movw	r20, r8
    c808:	c8 01       	movw	r24, r16
    c80a:	0e 94 de 45 	call	0x8bbc	; 0x8bbc <clust2sect>
    c80e:	6b 01       	movw	r12, r22
    c810:	7c 01       	movw	r14, r24
    c812:	18 01       	movw	r2, r16
    c814:	55 e3       	ldi	r21, 0x35	; 53
    c816:	25 0e       	add	r2, r21
    c818:	31 1c       	adc	r3, r1
    c81a:	40 e0       	ldi	r20, 0x00	; 0
    c81c:	52 e0       	ldi	r21, 0x02	; 2
    c81e:	60 e0       	ldi	r22, 0x00	; 0
    c820:	70 e0       	ldi	r23, 0x00	; 0
    c822:	c1 01       	movw	r24, r2
    c824:	0e 94 d5 45 	call	0x8baa	; 0x8baa <mem_set>
    c828:	4b e0       	ldi	r20, 0x0B	; 11
    c82a:	50 e0       	ldi	r21, 0x00	; 0
    c82c:	60 e2       	ldi	r22, 0x20	; 32
    c82e:	70 e0       	ldi	r23, 0x00	; 0
    c830:	c1 01       	movw	r24, r2
    c832:	0e 94 d5 45 	call	0x8baa	; 0x8baa <mem_set>
    c836:	ee e2       	ldi	r30, 0x2E	; 46
    c838:	d8 01       	movw	r26, r16
    c83a:	d5 96       	adiw	r26, 0x35	; 53
    c83c:	ec 93       	st	X, r30
    c83e:	f8 01       	movw	r30, r16
    c840:	e0 5c       	subi	r30, 0xC0	; 192
    c842:	ff 4f       	sbci	r31, 0xFF	; 255
    c844:	80 e1       	ldi	r24, 0x10	; 16
    c846:	80 83       	st	Z, r24
    c848:	b3 01       	movw	r22, r6
    c84a:	a2 01       	movw	r20, r4
    c84c:	c8 01       	movw	r24, r16
    c84e:	85 5b       	subi	r24, 0xB5	; 181
    c850:	9f 4f       	sbci	r25, 0xFF	; 255
    c852:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <st_dword>
    c856:	a5 01       	movw	r20, r10
    c858:	94 01       	movw	r18, r8
    c85a:	b1 01       	movw	r22, r2
    c85c:	8f a5       	ldd	r24, Y+47	; 0x2f
    c85e:	98 a9       	ldd	r25, Y+48	; 0x30
    c860:	0e 94 be 46 	call	0x8d7c	; 0x8d7c <st_clust.isra.2>
    c864:	98 01       	movw	r18, r16
    c866:	2b 5a       	subi	r18, 0xAB	; 171
    c868:	3f 4f       	sbci	r19, 0xFF	; 255
    c86a:	3c ab       	std	Y+52, r19	; 0x34
    c86c:	2b ab       	std	Y+51, r18	; 0x33
    c86e:	40 e2       	ldi	r20, 0x20	; 32
    c870:	50 e0       	ldi	r21, 0x00	; 0
    c872:	b1 01       	movw	r22, r2
    c874:	c9 01       	movw	r24, r18
    c876:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <mem_cpy.part.0>
    c87a:	f8 01       	movw	r30, r16
    c87c:	ea 5a       	subi	r30, 0xAA	; 170
    c87e:	ff 4f       	sbci	r31, 0xFF	; 255
    c880:	3e e2       	ldi	r19, 0x2E	; 46
    c882:	30 83       	st	Z, r19
    c884:	2f 81       	ldd	r18, Y+7	; 0x07
    c886:	38 85       	ldd	r19, Y+8	; 0x08
    c888:	49 85       	ldd	r20, Y+9	; 0x09
    c88a:	5a 85       	ldd	r21, Y+10	; 0x0a
    c88c:	0f a5       	ldd	r16, Y+47	; 0x2f
    c88e:	18 a9       	ldd	r17, Y+48	; 0x30
    c890:	d8 01       	movw	r26, r16
    c892:	6c 91       	ld	r22, X
    c894:	63 30       	cpi	r22, 0x03	; 3
    c896:	71 f4       	brne	.+28     	; 0xc8b4 <f_mkdir+0x1ba>
    c898:	99 96       	adiw	r26, 0x29	; 41
    c89a:	8d 91       	ld	r24, X+
    c89c:	9d 91       	ld	r25, X+
    c89e:	0d 90       	ld	r0, X+
    c8a0:	bc 91       	ld	r27, X
    c8a2:	a0 2d       	mov	r26, r0
    c8a4:	28 17       	cp	r18, r24
    c8a6:	39 07       	cpc	r19, r25
    c8a8:	4a 07       	cpc	r20, r26
    c8aa:	5b 07       	cpc	r21, r27
    c8ac:	19 f4       	brne	.+6      	; 0xc8b4 <f_mkdir+0x1ba>
    c8ae:	20 e0       	ldi	r18, 0x00	; 0
    c8b0:	30 e0       	ldi	r19, 0x00	; 0
    c8b2:	a9 01       	movw	r20, r18
    c8b4:	6b a9       	ldd	r22, Y+51	; 0x33
    c8b6:	7c a9       	ldd	r23, Y+52	; 0x34
    c8b8:	c8 01       	movw	r24, r16
    c8ba:	0e 94 be 46 	call	0x8d7c	; 0x8d7c <st_clust.isra.2>
    c8be:	ef a5       	ldd	r30, Y+47	; 0x2f
    c8c0:	f8 a9       	ldd	r31, Y+48	; 0x30
    c8c2:	01 85       	ldd	r16, Z+9	; 0x09
    c8c4:	12 85       	ldd	r17, Z+10	; 0x0a
    c8c6:	01 15       	cp	r16, r1
    c8c8:	11 05       	cpc	r17, r1
    c8ca:	99 f1       	breq	.+102    	; 0xc932 <f_mkdir+0x238>
    c8cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    c8ce:	98 a9       	ldd	r25, Y+48	; 0x30
    c8d0:	a7 01       	movw	r20, r14
    c8d2:	96 01       	movw	r18, r12
    c8d4:	2f 5f       	subi	r18, 0xFF	; 255
    c8d6:	3f 4f       	sbci	r19, 0xFF	; 255
    c8d8:	4f 4f       	sbci	r20, 0xFF	; 255
    c8da:	5f 4f       	sbci	r21, 0xFF	; 255
    c8dc:	2b ab       	std	Y+51, r18	; 0x33
    c8de:	3c ab       	std	Y+52, r19	; 0x34
    c8e0:	4d ab       	std	Y+53, r20	; 0x35
    c8e2:	5e ab       	std	Y+54, r21	; 0x36
    c8e4:	dc 01       	movw	r26, r24
    c8e6:	d1 96       	adiw	r26, 0x31	; 49
    c8e8:	cd 92       	st	X+, r12
    c8ea:	dd 92       	st	X+, r13
    c8ec:	ed 92       	st	X+, r14
    c8ee:	fc 92       	st	X, r15
    c8f0:	d4 97       	sbiw	r26, 0x34	; 52
    c8f2:	e1 e0       	ldi	r30, 0x01	; 1
    c8f4:	13 96       	adiw	r26, 0x03	; 3
    c8f6:	ec 93       	st	X, r30
    c8f8:	0e 94 cb 46 	call	0x8d96	; 0x8d96 <sync_window.part.3>
    c8fc:	7c 01       	movw	r14, r24
    c8fe:	89 2b       	or	r24, r25
    c900:	71 f4       	brne	.+28     	; 0xc91e <f_mkdir+0x224>
    c902:	40 e0       	ldi	r20, 0x00	; 0
    c904:	52 e0       	ldi	r21, 0x02	; 2
    c906:	60 e0       	ldi	r22, 0x00	; 0
    c908:	70 e0       	ldi	r23, 0x00	; 0
    c90a:	c1 01       	movw	r24, r2
    c90c:	0e 94 d5 45 	call	0x8baa	; 0x8baa <mem_set>
    c910:	01 50       	subi	r16, 0x01	; 1
    c912:	11 09       	sbc	r17, r1
    c914:	cb a8       	ldd	r12, Y+51	; 0x33
    c916:	dc a8       	ldd	r13, Y+52	; 0x34
    c918:	ed a8       	ldd	r14, Y+53	; 0x35
    c91a:	fe a8       	ldd	r15, Y+54	; 0x36
    c91c:	d4 cf       	rjmp	.-88     	; 0xc8c6 <f_mkdir+0x1cc>
    c91e:	00 e0       	ldi	r16, 0x00	; 0
    c920:	10 e0       	ldi	r17, 0x00	; 0
    c922:	98 01       	movw	r18, r16
    c924:	b5 01       	movw	r22, r10
    c926:	a4 01       	movw	r20, r8
    c928:	ce 01       	movw	r24, r28
    c92a:	01 96       	adiw	r24, 0x01	; 1
    c92c:	0e 94 fb 4d 	call	0x9bf6	; 0x9bf6 <remove_chain>
    c930:	18 cf       	rjmp	.-464    	; 0xc762 <f_mkdir+0x68>
    c932:	ce 01       	movw	r24, r28
    c934:	01 96       	adiw	r24, 0x01	; 1
    c936:	0e 94 f3 52 	call	0xa5e6	; 0xa5e6 <dir_register>
    c93a:	7c 01       	movw	r14, r24
    c93c:	89 2b       	or	r24, r25
    c93e:	79 f7       	brne	.-34     	; 0xc91e <f_mkdir+0x224>
    c940:	0b 8d       	ldd	r16, Y+27	; 0x1b
    c942:	1c 8d       	ldd	r17, Y+28	; 0x1c
    c944:	b3 01       	movw	r22, r6
    c946:	a2 01       	movw	r20, r4
    c948:	c8 01       	movw	r24, r16
    c94a:	46 96       	adiw	r24, 0x16	; 22
    c94c:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <st_dword>
    c950:	a5 01       	movw	r20, r10
    c952:	94 01       	movw	r18, r8
    c954:	b8 01       	movw	r22, r16
    c956:	8f a5       	ldd	r24, Y+47	; 0x2f
    c958:	98 a9       	ldd	r25, Y+48	; 0x30
    c95a:	0e 94 be 46 	call	0x8d7c	; 0x8d7c <st_clust.isra.2>
    c95e:	80 e1       	ldi	r24, 0x10	; 16
    c960:	f8 01       	movw	r30, r16
    c962:	83 87       	std	Z+11, r24	; 0x0b
    c964:	8f a5       	ldd	r24, Y+47	; 0x2f
    c966:	98 a9       	ldd	r25, Y+48	; 0x30
    c968:	21 e0       	ldi	r18, 0x01	; 1
    c96a:	dc 01       	movw	r26, r24
    c96c:	13 96       	adiw	r26, 0x03	; 3
    c96e:	2c 93       	st	X, r18
    c970:	0e 94 25 47 	call	0x8e4a	; 0x8e4a <sync_fs>
    c974:	7c 01       	movw	r14, r24
    c976:	f5 ce       	rjmp	.-534    	; 0xc762 <f_mkdir+0x68>
    c978:	0e 94 1c 47 	call	0x8e38	; 0x8e38 <sync_window>
    c97c:	7c 01       	movw	r14, r24
    c97e:	38 cf       	rjmp	.-400    	; 0xc7f0 <f_mkdir+0xf6>
    c980:	ec 96       	adiw	r28, 0x3c	; 60
    c982:	e2 e1       	ldi	r30, 0x12	; 18
    c984:	0c 94 ab e9 	jmp	0x1d356	; 0x1d356 <__epilogue_restores__>

0000c988 <f_rename>:
    c988:	aa e7       	ldi	r26, 0x7A	; 122
    c98a:	b0 e0       	ldi	r27, 0x00	; 0
    c98c:	ea ec       	ldi	r30, 0xCA	; 202
    c98e:	f4 e6       	ldi	r31, 0x64	; 100
    c990:	0c 94 98 e9 	jmp	0x1d330	; 0x1d330 <__prologue_saves__+0x12>
    c994:	e9 96       	adiw	r28, 0x39	; 57
    c996:	9f af       	std	Y+63, r25	; 0x3f
    c998:	8e af       	std	Y+62, r24	; 0x3e
    c99a:	e9 97       	sbiw	r28, 0x39	; 57
    c99c:	eb 96       	adiw	r28, 0x3b	; 59
    c99e:	7f af       	std	Y+63, r23	; 0x3f
    c9a0:	6e af       	std	Y+62, r22	; 0x3e
    c9a2:	eb 97       	sbiw	r28, 0x3b	; 59
    c9a4:	ce 01       	movw	r24, r28
    c9a6:	87 58       	subi	r24, 0x87	; 135
    c9a8:	9f 4f       	sbci	r25, 0xFF	; 255
    c9aa:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <get_ldnumber>
    c9ae:	42 e0       	ldi	r20, 0x02	; 2
    c9b0:	be 01       	movw	r22, r28
    c9b2:	6b 58       	subi	r22, 0x8B	; 139
    c9b4:	7f 4f       	sbci	r23, 0xFF	; 255
    c9b6:	ce 01       	movw	r24, r28
    c9b8:	89 58       	subi	r24, 0x89	; 137
    c9ba:	9f 4f       	sbci	r25, 0xFF	; 255
    c9bc:	0e 94 11 48 	call	0x9022	; 0x9022 <find_volume>
    c9c0:	00 97       	sbiw	r24, 0x00	; 0
    c9c2:	09 f0       	breq	.+2      	; 0xc9c6 <f_rename+0x3e>
    c9c4:	eb c0       	rjmp	.+470    	; 0xcb9c <f_rename+0x214>
    c9c6:	e7 96       	adiw	r28, 0x37	; 55
    c9c8:	8e ad       	ldd	r24, Y+62	; 0x3e
    c9ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    c9cc:	e7 97       	sbiw	r28, 0x37	; 55
    c9ce:	98 ab       	std	Y+48, r25	; 0x30
    c9d0:	8f a7       	std	Y+47, r24	; 0x2f
    c9d2:	80 e0       	ldi	r24, 0x00	; 0
    c9d4:	92 e0       	ldi	r25, 0x02	; 2
    c9d6:	73 d7       	rcall	.+3814   	; 0xd8be <ff_memalloc>
    c9d8:	6c 01       	movw	r12, r24
    c9da:	00 97       	sbiw	r24, 0x00	; 0
    c9dc:	09 f4       	brne	.+2      	; 0xc9e0 <f_rename+0x58>
    c9de:	3f c0       	rjmp	.+126    	; 0xca5e <f_rename+0xd6>
    c9e0:	e7 96       	adiw	r28, 0x37	; 55
    c9e2:	ee ad       	ldd	r30, Y+62	; 0x3e
    c9e4:	ff ad       	ldd	r31, Y+63	; 0x3f
    c9e6:	e7 97       	sbiw	r28, 0x37	; 55
    c9e8:	94 87       	std	Z+12, r25	; 0x0c
    c9ea:	83 87       	std	Z+11, r24	; 0x0b
    c9ec:	e9 96       	adiw	r28, 0x39	; 57
    c9ee:	6e ad       	ldd	r22, Y+62	; 0x3e
    c9f0:	7f ad       	ldd	r23, Y+63	; 0x3f
    c9f2:	e9 97       	sbiw	r28, 0x39	; 57
    c9f4:	ce 01       	movw	r24, r28
    c9f6:	8f 96       	adiw	r24, 0x2f	; 47
    c9f8:	0e 94 97 54 	call	0xa92e	; 0xa92e <follow_path>
    c9fc:	8c 01       	movw	r16, r24
    c9fe:	89 2b       	or	r24, r25
    ca00:	51 f5       	brne	.+84     	; 0xca56 <f_rename+0xce>
    ca02:	67 96       	adiw	r28, 0x17	; 23
    ca04:	8f ad       	ldd	r24, Y+63	; 0x3f
    ca06:	67 97       	sbiw	r28, 0x17	; 23
    ca08:	80 7a       	andi	r24, 0xA0	; 160
    ca0a:	09 f0       	breq	.+2      	; 0xca0e <f_rename+0x86>
    ca0c:	ae c0       	rjmp	.+348    	; 0xcb6a <f_rename+0x1e2>
    ca0e:	2b 96       	adiw	r28, 0x0b	; 11
    ca10:	6e ad       	ldd	r22, Y+62	; 0x3e
    ca12:	7f ad       	ldd	r23, Y+63	; 0x3f
    ca14:	2b 97       	sbiw	r28, 0x0b	; 11
    ca16:	65 5f       	subi	r22, 0xF5	; 245
    ca18:	7f 4f       	sbci	r23, 0xFF	; 255
    ca1a:	45 e1       	ldi	r20, 0x15	; 21
    ca1c:	50 e0       	ldi	r21, 0x00	; 0
    ca1e:	ce 01       	movw	r24, r28
    ca20:	83 5a       	subi	r24, 0xA3	; 163
    ca22:	9f 4f       	sbci	r25, 0xFF	; 255
    ca24:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <mem_cpy.part.0>
    ca28:	4e e2       	ldi	r20, 0x2E	; 46
    ca2a:	50 e0       	ldi	r21, 0x00	; 0
    ca2c:	be 01       	movw	r22, r28
    ca2e:	61 5d       	subi	r22, 0xD1	; 209
    ca30:	7f 4f       	sbci	r23, 0xFF	; 255
    ca32:	ce 01       	movw	r24, r28
    ca34:	01 96       	adiw	r24, 0x01	; 1
    ca36:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <mem_cpy.part.0>
    ca3a:	eb 96       	adiw	r28, 0x3b	; 59
    ca3c:	6e ad       	ldd	r22, Y+62	; 0x3e
    ca3e:	7f ad       	ldd	r23, Y+63	; 0x3f
    ca40:	eb 97       	sbiw	r28, 0x3b	; 59
    ca42:	ce 01       	movw	r24, r28
    ca44:	01 96       	adiw	r24, 0x01	; 1
    ca46:	0e 94 97 54 	call	0xa92e	; 0xa92e <follow_path>
    ca4a:	8c 01       	movw	r16, r24
    ca4c:	89 2b       	or	r24, r25
    ca4e:	51 f0       	breq	.+20     	; 0xca64 <f_rename+0xdc>
    ca50:	04 30       	cpi	r16, 0x04	; 4
    ca52:	11 05       	cpc	r17, r1
    ca54:	29 f1       	breq	.+74     	; 0xcaa0 <f_rename+0x118>
    ca56:	c6 01       	movw	r24, r12
    ca58:	35 d7       	rcall	.+3690   	; 0xd8c4 <ff_memfree>
    ca5a:	c8 01       	movw	r24, r16
    ca5c:	9f c0       	rjmp	.+318    	; 0xcb9c <f_rename+0x214>
    ca5e:	81 e1       	ldi	r24, 0x11	; 17
    ca60:	90 e0       	ldi	r25, 0x00	; 0
    ca62:	9c c0       	rjmp	.+312    	; 0xcb9c <f_rename+0x214>
    ca64:	4f 81       	ldd	r20, Y+7	; 0x07
    ca66:	58 85       	ldd	r21, Y+8	; 0x08
    ca68:	69 85       	ldd	r22, Y+9	; 0x09
    ca6a:	7a 85       	ldd	r23, Y+10	; 0x0a
    ca6c:	8d a9       	ldd	r24, Y+53	; 0x35
    ca6e:	9e a9       	ldd	r25, Y+54	; 0x36
    ca70:	af a9       	ldd	r26, Y+55	; 0x37
    ca72:	b8 ad       	ldd	r27, Y+56	; 0x38
    ca74:	48 17       	cp	r20, r24
    ca76:	59 07       	cpc	r21, r25
    ca78:	6a 07       	cpc	r22, r26
    ca7a:	7b 07       	cpc	r23, r27
    ca7c:	09 f0       	breq	.+2      	; 0xca80 <f_rename+0xf8>
    ca7e:	88 c0       	rjmp	.+272    	; 0xcb90 <f_rename+0x208>
    ca80:	4f 85       	ldd	r20, Y+15	; 0x0f
    ca82:	58 89       	ldd	r21, Y+16	; 0x10
    ca84:	69 89       	ldd	r22, Y+17	; 0x11
    ca86:	7a 89       	ldd	r23, Y+18	; 0x12
    ca88:	21 96       	adiw	r28, 0x01	; 1
    ca8a:	8c ad       	ldd	r24, Y+60	; 0x3c
    ca8c:	9d ad       	ldd	r25, Y+61	; 0x3d
    ca8e:	ae ad       	ldd	r26, Y+62	; 0x3e
    ca90:	bf ad       	ldd	r27, Y+63	; 0x3f
    ca92:	21 97       	sbiw	r28, 0x01	; 1
    ca94:	48 17       	cp	r20, r24
    ca96:	59 07       	cpc	r21, r25
    ca98:	6a 07       	cpc	r22, r26
    ca9a:	7b 07       	cpc	r23, r27
    ca9c:	09 f0       	breq	.+2      	; 0xcaa0 <f_rename+0x118>
    ca9e:	78 c0       	rjmp	.+240    	; 0xcb90 <f_rename+0x208>
    caa0:	ce 01       	movw	r24, r28
    caa2:	01 96       	adiw	r24, 0x01	; 1
    caa4:	0e 94 f3 52 	call	0xa5e6	; 0xa5e6 <dir_register>
    caa8:	8c 01       	movw	r16, r24
    caaa:	89 2b       	or	r24, r25
    caac:	a1 f6       	brne	.-88     	; 0xca56 <f_rename+0xce>
    caae:	eb 8c       	ldd	r14, Y+27	; 0x1b
    cab0:	fc 8c       	ldd	r15, Y+28	; 0x1c
    cab2:	6d e5       	ldi	r22, 0x5D	; 93
    cab4:	70 e0       	ldi	r23, 0x00	; 0
    cab6:	6c 0f       	add	r22, r28
    cab8:	7d 1f       	adc	r23, r29
    caba:	6e 5f       	subi	r22, 0xFE	; 254
    cabc:	7f 4f       	sbci	r23, 0xFF	; 255
    cabe:	43 e1       	ldi	r20, 0x13	; 19
    cac0:	50 e0       	ldi	r21, 0x00	; 0
    cac2:	c7 01       	movw	r24, r14
    cac4:	0d 96       	adiw	r24, 0x0d	; 13
    cac6:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <mem_cpy.part.0>
    caca:	6e 96       	adiw	r28, 0x1e	; 30
    cacc:	8f ad       	ldd	r24, Y+63	; 0x3f
    cace:	6e 97       	sbiw	r28, 0x1e	; 30
    cad0:	80 62       	ori	r24, 0x20	; 32
    cad2:	f7 01       	movw	r30, r14
    cad4:	83 87       	std	Z+11, r24	; 0x0b
    cad6:	e7 96       	adiw	r28, 0x37	; 55
    cad8:	0e ad       	ldd	r16, Y+62	; 0x3e
    cada:	1f ad       	ldd	r17, Y+63	; 0x3f
    cadc:	e7 97       	sbiw	r28, 0x37	; 55
    cade:	bb 24       	eor	r11, r11
    cae0:	b3 94       	inc	r11
    cae2:	f8 01       	movw	r30, r16
    cae4:	b3 82       	std	Z+3, r11	; 0x03
    cae6:	f7 01       	movw	r30, r14
    cae8:	83 85       	ldd	r24, Z+11	; 0x0b
    caea:	84 ff       	sbrs	r24, 4
    caec:	41 c0       	rjmp	.+130    	; 0xcb70 <f_rename+0x1e8>
    caee:	4d a9       	ldd	r20, Y+53	; 0x35
    caf0:	5e a9       	ldd	r21, Y+54	; 0x36
    caf2:	6f a9       	ldd	r22, Y+55	; 0x37
    caf4:	78 ad       	ldd	r23, Y+56	; 0x38
    caf6:	8f 81       	ldd	r24, Y+7	; 0x07
    caf8:	98 85       	ldd	r25, Y+8	; 0x08
    cafa:	a9 85       	ldd	r26, Y+9	; 0x09
    cafc:	ba 85       	ldd	r27, Y+10	; 0x0a
    cafe:	48 17       	cp	r20, r24
    cb00:	59 07       	cpc	r21, r25
    cb02:	6a 07       	cpc	r22, r26
    cb04:	7b 07       	cpc	r23, r27
    cb06:	a1 f1       	breq	.+104    	; 0xcb70 <f_rename+0x1e8>
    cb08:	b7 01       	movw	r22, r14
    cb0a:	f8 01       	movw	r30, r16
    cb0c:	80 81       	ld	r24, Z
    cb0e:	0e 94 a9 46 	call	0x8d52	; 0x8d52 <ld_clust.isra.1>
    cb12:	ab 01       	movw	r20, r22
    cb14:	bc 01       	movw	r22, r24
    cb16:	c8 01       	movw	r24, r16
    cb18:	0e 94 de 45 	call	0x8bbc	; 0x8bbc <clust2sect>
    cb1c:	ab 01       	movw	r20, r22
    cb1e:	bc 01       	movw	r22, r24
    cb20:	41 15       	cp	r20, r1
    cb22:	51 05       	cpc	r21, r1
    cb24:	61 05       	cpc	r22, r1
    cb26:	71 05       	cpc	r23, r1
    cb28:	b1 f1       	breq	.+108    	; 0xcb96 <f_rename+0x20e>
    cb2a:	c8 01       	movw	r24, r16
    cb2c:	0e 94 91 47 	call	0x8f22	; 0x8f22 <move_window>
    cb30:	8c 01       	movw	r16, r24
    cb32:	89 2b       	or	r24, r25
    cb34:	09 f0       	breq	.+2      	; 0xcb38 <f_rename+0x1b0>
    cb36:	8f cf       	rjmp	.-226    	; 0xca56 <f_rename+0xce>
    cb38:	e7 96       	adiw	r28, 0x37	; 55
    cb3a:	8e ad       	ldd	r24, Y+62	; 0x3e
    cb3c:	9f ad       	ldd	r25, Y+63	; 0x3f
    cb3e:	e7 97       	sbiw	r28, 0x37	; 55
    cb40:	fc 01       	movw	r30, r24
    cb42:	ea 5a       	subi	r30, 0xAA	; 170
    cb44:	ff 4f       	sbci	r31, 0xFF	; 255
    cb46:	20 81       	ld	r18, Z
    cb48:	2e 32       	cpi	r18, 0x2E	; 46
    cb4a:	91 f4       	brne	.+36     	; 0xcb70 <f_rename+0x1e8>
    cb4c:	2f 81       	ldd	r18, Y+7	; 0x07
    cb4e:	38 85       	ldd	r19, Y+8	; 0x08
    cb50:	49 85       	ldd	r20, Y+9	; 0x09
    cb52:	5a 85       	ldd	r21, Y+10	; 0x0a
    cb54:	bc 01       	movw	r22, r24
    cb56:	6b 5a       	subi	r22, 0xAB	; 171
    cb58:	7f 4f       	sbci	r23, 0xFF	; 255
    cb5a:	0e 94 be 46 	call	0x8d7c	; 0x8d7c <st_clust.isra.2>
    cb5e:	e7 96       	adiw	r28, 0x37	; 55
    cb60:	ee ad       	ldd	r30, Y+62	; 0x3e
    cb62:	ff ad       	ldd	r31, Y+63	; 0x3f
    cb64:	e7 97       	sbiw	r28, 0x37	; 55
    cb66:	b3 82       	std	Z+3, r11	; 0x03
    cb68:	03 c0       	rjmp	.+6      	; 0xcb70 <f_rename+0x1e8>
    cb6a:	06 e0       	ldi	r16, 0x06	; 6
    cb6c:	10 e0       	ldi	r17, 0x00	; 0
    cb6e:	73 cf       	rjmp	.-282    	; 0xca56 <f_rename+0xce>
    cb70:	ce 01       	movw	r24, r28
    cb72:	8f 96       	adiw	r24, 0x2f	; 47
    cb74:	0e 94 94 51 	call	0xa328	; 0xa328 <dir_remove>
    cb78:	8c 01       	movw	r16, r24
    cb7a:	89 2b       	or	r24, r25
    cb7c:	09 f0       	breq	.+2      	; 0xcb80 <f_rename+0x1f8>
    cb7e:	6b cf       	rjmp	.-298    	; 0xca56 <f_rename+0xce>
    cb80:	e7 96       	adiw	r28, 0x37	; 55
    cb82:	8e ad       	ldd	r24, Y+62	; 0x3e
    cb84:	9f ad       	ldd	r25, Y+63	; 0x3f
    cb86:	e7 97       	sbiw	r28, 0x37	; 55
    cb88:	0e 94 25 47 	call	0x8e4a	; 0x8e4a <sync_fs>
    cb8c:	8c 01       	movw	r16, r24
    cb8e:	63 cf       	rjmp	.-314    	; 0xca56 <f_rename+0xce>
    cb90:	08 e0       	ldi	r16, 0x08	; 8
    cb92:	10 e0       	ldi	r17, 0x00	; 0
    cb94:	60 cf       	rjmp	.-320    	; 0xca56 <f_rename+0xce>
    cb96:	02 e0       	ldi	r16, 0x02	; 2
    cb98:	10 e0       	ldi	r17, 0x00	; 0
    cb9a:	5d cf       	rjmp	.-326    	; 0xca56 <f_rename+0xce>
    cb9c:	c6 58       	subi	r28, 0x86	; 134
    cb9e:	df 4f       	sbci	r29, 0xFF	; 255
    cba0:	e9 e0       	ldi	r30, 0x09	; 9
    cba2:	0c 94 b4 e9 	jmp	0x1d368	; 0x1d368 <__epilogue_restores__+0x12>

0000cba6 <f_chmod>:
    cba6:	a2 e3       	ldi	r26, 0x32	; 50
    cba8:	b0 e0       	ldi	r27, 0x00	; 0
    cbaa:	e9 ed       	ldi	r30, 0xD9	; 217
    cbac:	f5 e6       	ldi	r31, 0x65	; 101
    cbae:	0c 94 99 e9 	jmp	0x1d332	; 0x1d332 <__prologue_saves__+0x14>
    cbb2:	9a ab       	std	Y+50, r25	; 0x32
    cbb4:	89 ab       	std	Y+49, r24	; 0x31
    cbb6:	e6 2e       	mov	r14, r22
    cbb8:	f4 2e       	mov	r15, r20
    cbba:	42 e0       	ldi	r20, 0x02	; 2
    cbbc:	be 01       	movw	r22, r28
    cbbe:	61 5d       	subi	r22, 0xD1	; 209
    cbc0:	7f 4f       	sbci	r23, 0xFF	; 255
    cbc2:	ce 01       	movw	r24, r28
    cbc4:	c1 96       	adiw	r24, 0x31	; 49
    cbc6:	0e 94 11 48 	call	0x9022	; 0x9022 <find_volume>
    cbca:	2f a5       	ldd	r18, Y+47	; 0x2f
    cbcc:	38 a9       	ldd	r19, Y+48	; 0x30
    cbce:	3a 83       	std	Y+2, r19	; 0x02
    cbd0:	29 83       	std	Y+1, r18	; 0x01
    cbd2:	00 97       	sbiw	r24, 0x00	; 0
    cbd4:	89 f5       	brne	.+98     	; 0xcc38 <f_chmod+0x92>
    cbd6:	80 e0       	ldi	r24, 0x00	; 0
    cbd8:	92 e0       	ldi	r25, 0x02	; 2
    cbda:	71 d6       	rcall	.+3298   	; 0xd8be <ff_memalloc>
    cbdc:	6c 01       	movw	r12, r24
    cbde:	00 97       	sbiw	r24, 0x00	; 0
    cbe0:	b1 f0       	breq	.+44     	; 0xcc0e <f_chmod+0x68>
    cbe2:	ef a5       	ldd	r30, Y+47	; 0x2f
    cbe4:	f8 a9       	ldd	r31, Y+48	; 0x30
    cbe6:	94 87       	std	Z+12, r25	; 0x0c
    cbe8:	83 87       	std	Z+11, r24	; 0x0b
    cbea:	69 a9       	ldd	r22, Y+49	; 0x31
    cbec:	7a a9       	ldd	r23, Y+50	; 0x32
    cbee:	ce 01       	movw	r24, r28
    cbf0:	01 96       	adiw	r24, 0x01	; 1
    cbf2:	0e 94 97 54 	call	0xa92e	; 0xa92e <follow_path>
    cbf6:	8c 01       	movw	r16, r24
    cbf8:	89 2b       	or	r24, r25
    cbfa:	29 f4       	brne	.+10     	; 0xcc06 <f_chmod+0x60>
    cbfc:	88 a5       	ldd	r24, Y+40	; 0x28
    cbfe:	80 7a       	andi	r24, 0xA0	; 160
    cc00:	49 f0       	breq	.+18     	; 0xcc14 <f_chmod+0x6e>
    cc02:	06 e0       	ldi	r16, 0x06	; 6
    cc04:	10 e0       	ldi	r17, 0x00	; 0
    cc06:	c6 01       	movw	r24, r12
    cc08:	5d d6       	rcall	.+3258   	; 0xd8c4 <ff_memfree>
    cc0a:	c8 01       	movw	r24, r16
    cc0c:	15 c0       	rjmp	.+42     	; 0xcc38 <f_chmod+0x92>
    cc0e:	81 e1       	ldi	r24, 0x11	; 17
    cc10:	90 e0       	ldi	r25, 0x00	; 0
    cc12:	12 c0       	rjmp	.+36     	; 0xcc38 <f_chmod+0x92>
    cc14:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cc16:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cc18:	83 85       	ldd	r24, Z+11	; 0x0b
    cc1a:	6e 2d       	mov	r22, r14
    cc1c:	68 27       	eor	r22, r24
    cc1e:	6f 21       	and	r22, r15
    cc20:	67 72       	andi	r22, 0x27	; 39
    cc22:	68 27       	eor	r22, r24
    cc24:	63 87       	std	Z+11, r22	; 0x0b
    cc26:	8f a5       	ldd	r24, Y+47	; 0x2f
    cc28:	98 a9       	ldd	r25, Y+48	; 0x30
    cc2a:	21 e0       	ldi	r18, 0x01	; 1
    cc2c:	fc 01       	movw	r30, r24
    cc2e:	23 83       	std	Z+3, r18	; 0x03
    cc30:	0e 94 25 47 	call	0x8e4a	; 0x8e4a <sync_fs>
    cc34:	8c 01       	movw	r16, r24
    cc36:	e7 cf       	rjmp	.-50     	; 0xcc06 <f_chmod+0x60>
    cc38:	e2 96       	adiw	r28, 0x32	; 50
    cc3a:	e8 e0       	ldi	r30, 0x08	; 8
    cc3c:	0c 94 b5 e9 	jmp	0x1d36a	; 0x1d36a <__epilogue_restores__+0x14>

0000cc40 <f_utime>:
    cc40:	a2 e3       	ldi	r26, 0x32	; 50
    cc42:	b0 e0       	ldi	r27, 0x00	; 0
    cc44:	e6 e2       	ldi	r30, 0x26	; 38
    cc46:	f6 e6       	ldi	r31, 0x66	; 102
    cc48:	0c 94 99 e9 	jmp	0x1d332	; 0x1d332 <__prologue_saves__+0x14>
    cc4c:	9a ab       	std	Y+50, r25	; 0x32
    cc4e:	89 ab       	std	Y+49, r24	; 0x31
    cc50:	6b 01       	movw	r12, r22
    cc52:	42 e0       	ldi	r20, 0x02	; 2
    cc54:	be 01       	movw	r22, r28
    cc56:	61 5d       	subi	r22, 0xD1	; 209
    cc58:	7f 4f       	sbci	r23, 0xFF	; 255
    cc5a:	ce 01       	movw	r24, r28
    cc5c:	c1 96       	adiw	r24, 0x31	; 49
    cc5e:	0e 94 11 48 	call	0x9022	; 0x9022 <find_volume>
    cc62:	2f a5       	ldd	r18, Y+47	; 0x2f
    cc64:	38 a9       	ldd	r19, Y+48	; 0x30
    cc66:	3a 83       	std	Y+2, r19	; 0x02
    cc68:	29 83       	std	Y+1, r18	; 0x01
    cc6a:	00 97       	sbiw	r24, 0x00	; 0
    cc6c:	09 f0       	breq	.+2      	; 0xcc70 <f_utime+0x30>
    cc6e:	3d c0       	rjmp	.+122    	; 0xccea <f_utime+0xaa>
    cc70:	80 e0       	ldi	r24, 0x00	; 0
    cc72:	92 e0       	ldi	r25, 0x02	; 2
    cc74:	24 d6       	rcall	.+3144   	; 0xd8be <ff_memalloc>
    cc76:	7c 01       	movw	r14, r24
    cc78:	00 97       	sbiw	r24, 0x00	; 0
    cc7a:	b1 f0       	breq	.+44     	; 0xcca8 <f_utime+0x68>
    cc7c:	ef a5       	ldd	r30, Y+47	; 0x2f
    cc7e:	f8 a9       	ldd	r31, Y+48	; 0x30
    cc80:	94 87       	std	Z+12, r25	; 0x0c
    cc82:	83 87       	std	Z+11, r24	; 0x0b
    cc84:	69 a9       	ldd	r22, Y+49	; 0x31
    cc86:	7a a9       	ldd	r23, Y+50	; 0x32
    cc88:	ce 01       	movw	r24, r28
    cc8a:	01 96       	adiw	r24, 0x01	; 1
    cc8c:	0e 94 97 54 	call	0xa92e	; 0xa92e <follow_path>
    cc90:	8c 01       	movw	r16, r24
    cc92:	89 2b       	or	r24, r25
    cc94:	29 f4       	brne	.+10     	; 0xcca0 <f_utime+0x60>
    cc96:	88 a5       	ldd	r24, Y+40	; 0x28
    cc98:	80 7a       	andi	r24, 0xA0	; 160
    cc9a:	49 f0       	breq	.+18     	; 0xccae <f_utime+0x6e>
    cc9c:	06 e0       	ldi	r16, 0x06	; 6
    cc9e:	10 e0       	ldi	r17, 0x00	; 0
    cca0:	c7 01       	movw	r24, r14
    cca2:	10 d6       	rcall	.+3104   	; 0xd8c4 <ff_memfree>
    cca4:	c8 01       	movw	r24, r16
    cca6:	21 c0       	rjmp	.+66     	; 0xccea <f_utime+0xaa>
    cca8:	81 e1       	ldi	r24, 0x11	; 17
    ccaa:	90 e0       	ldi	r25, 0x00	; 0
    ccac:	1e c0       	rjmp	.+60     	; 0xccea <f_utime+0xaa>
    ccae:	f6 01       	movw	r30, r12
    ccb0:	44 81       	ldd	r20, Z+4	; 0x04
    ccb2:	55 81       	ldd	r21, Z+5	; 0x05
    ccb4:	60 e0       	ldi	r22, 0x00	; 0
    ccb6:	70 e0       	ldi	r23, 0x00	; 0
    ccb8:	ba 01       	movw	r22, r20
    ccba:	55 27       	eor	r21, r21
    ccbc:	44 27       	eor	r20, r20
    ccbe:	86 81       	ldd	r24, Z+6	; 0x06
    ccc0:	97 81       	ldd	r25, Z+7	; 0x07
    ccc2:	a0 e0       	ldi	r26, 0x00	; 0
    ccc4:	b0 e0       	ldi	r27, 0x00	; 0
    ccc6:	48 2b       	or	r20, r24
    ccc8:	59 2b       	or	r21, r25
    ccca:	6a 2b       	or	r22, r26
    cccc:	7b 2b       	or	r23, r27
    ccce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ccd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ccd2:	46 96       	adiw	r24, 0x16	; 22
    ccd4:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <st_dword>
    ccd8:	8f a5       	ldd	r24, Y+47	; 0x2f
    ccda:	98 a9       	ldd	r25, Y+48	; 0x30
    ccdc:	21 e0       	ldi	r18, 0x01	; 1
    ccde:	fc 01       	movw	r30, r24
    cce0:	23 83       	std	Z+3, r18	; 0x03
    cce2:	0e 94 25 47 	call	0x8e4a	; 0x8e4a <sync_fs>
    cce6:	8c 01       	movw	r16, r24
    cce8:	db cf       	rjmp	.-74     	; 0xcca0 <f_utime+0x60>
    ccea:	e2 96       	adiw	r28, 0x32	; 50
    ccec:	e8 e0       	ldi	r30, 0x08	; 8
    ccee:	0c 94 b5 e9 	jmp	0x1d36a	; 0x1d36a <__epilogue_restores__+0x14>

0000ccf2 <f_getlabel>:
    ccf2:	a2 e3       	ldi	r26, 0x32	; 50
    ccf4:	b0 e0       	ldi	r27, 0x00	; 0
    ccf6:	ef e7       	ldi	r30, 0x7F	; 127
    ccf8:	f6 e6       	ldi	r31, 0x66	; 102
    ccfa:	0c 94 99 e9 	jmp	0x1d332	; 0x1d332 <__prologue_saves__+0x14>
    ccfe:	9a ab       	std	Y+50, r25	; 0x32
    cd00:	89 ab       	std	Y+49, r24	; 0x31
    cd02:	7b 01       	movw	r14, r22
    cd04:	6a 01       	movw	r12, r20
    cd06:	40 e0       	ldi	r20, 0x00	; 0
    cd08:	be 01       	movw	r22, r28
    cd0a:	61 5d       	subi	r22, 0xD1	; 209
    cd0c:	7f 4f       	sbci	r23, 0xFF	; 255
    cd0e:	ce 01       	movw	r24, r28
    cd10:	c1 96       	adiw	r24, 0x31	; 49
    cd12:	0e 94 11 48 	call	0x9022	; 0x9022 <find_volume>
    cd16:	8c 01       	movw	r16, r24
    cd18:	89 2b       	or	r24, r25
    cd1a:	09 f0       	breq	.+2      	; 0xcd1e <f_getlabel+0x2c>
    cd1c:	5f c0       	rjmp	.+190    	; 0xcddc <f_getlabel+0xea>
    cd1e:	e1 14       	cp	r14, r1
    cd20:	f1 04       	cpc	r15, r1
    cd22:	91 f1       	breq	.+100    	; 0xcd88 <f_getlabel+0x96>
    cd24:	8f a5       	ldd	r24, Y+47	; 0x2f
    cd26:	98 a9       	ldd	r25, Y+48	; 0x30
    cd28:	9a 83       	std	Y+2, r25	; 0x02
    cd2a:	89 83       	std	Y+1, r24	; 0x01
    cd2c:	1f 82       	std	Y+7, r1	; 0x07
    cd2e:	18 86       	std	Y+8, r1	; 0x08
    cd30:	19 86       	std	Y+9, r1	; 0x09
    cd32:	1a 86       	std	Y+10, r1	; 0x0a
    cd34:	40 e0       	ldi	r20, 0x00	; 0
    cd36:	50 e0       	ldi	r21, 0x00	; 0
    cd38:	ba 01       	movw	r22, r20
    cd3a:	ce 01       	movw	r24, r28
    cd3c:	01 96       	adiw	r24, 0x01	; 1
    cd3e:	0e 94 6a 4c 	call	0x98d4	; 0x98d4 <dir_sdi>
    cd42:	00 97       	sbiw	r24, 0x00	; 0
    cd44:	e1 f4       	brne	.+56     	; 0xcd7e <f_getlabel+0x8c>
    cd46:	61 e0       	ldi	r22, 0x01	; 1
    cd48:	70 e0       	ldi	r23, 0x00	; 0
    cd4a:	ce 01       	movw	r24, r28
    cd4c:	01 96       	adiw	r24, 0x01	; 1
    cd4e:	0e 94 c6 50 	call	0xa18c	; 0xa18c <dir_read>
    cd52:	00 97       	sbiw	r24, 0x00	; 0
    cd54:	a1 f4       	brne	.+40     	; 0xcd7e <f_getlabel+0x8c>
    cd56:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cd58:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cd5a:	cf 01       	movw	r24, r30
    cd5c:	0b 96       	adiw	r24, 0x0b	; 11
    cd5e:	d7 01       	movw	r26, r14
    cd60:	21 91       	ld	r18, Z+
    cd62:	2d 93       	st	X+, r18
    cd64:	e8 17       	cp	r30, r24
    cd66:	f9 07       	cpc	r31, r25
    cd68:	d9 f7       	brne	.-10     	; 0xcd60 <f_getlabel+0x6e>
    cd6a:	f7 01       	movw	r30, r14
    cd6c:	3b 96       	adiw	r30, 0x0b	; 11
    cd6e:	10 82       	st	Z, r1
    cd70:	ee 16       	cp	r14, r30
    cd72:	ff 06       	cpc	r15, r31
    cd74:	49 f0       	breq	.+18     	; 0xcd88 <f_getlabel+0x96>
    cd76:	82 91       	ld	r24, -Z
    cd78:	80 32       	cpi	r24, 0x20	; 32
    cd7a:	c9 f3       	breq	.-14     	; 0xcd6e <f_getlabel+0x7c>
    cd7c:	05 c0       	rjmp	.+10     	; 0xcd88 <f_getlabel+0x96>
    cd7e:	84 30       	cpi	r24, 0x04	; 4
    cd80:	91 05       	cpc	r25, r1
    cd82:	59 f5       	brne	.+86     	; 0xcdda <f_getlabel+0xe8>
    cd84:	f7 01       	movw	r30, r14
    cd86:	10 82       	st	Z, r1
    cd88:	c1 14       	cp	r12, r1
    cd8a:	d1 04       	cpc	r13, r1
    cd8c:	39 f1       	breq	.+78     	; 0xcddc <f_getlabel+0xea>
    cd8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    cd90:	98 a9       	ldd	r25, Y+48	; 0x30
    cd92:	fc 01       	movw	r30, r24
    cd94:	41 a1       	ldd	r20, Z+33	; 0x21
    cd96:	52 a1       	ldd	r21, Z+34	; 0x22
    cd98:	63 a1       	ldd	r22, Z+35	; 0x23
    cd9a:	74 a1       	ldd	r23, Z+36	; 0x24
    cd9c:	0e 94 91 47 	call	0x8f22	; 0x8f22 <move_window>
    cda0:	8c 01       	movw	r16, r24
    cda2:	89 2b       	or	r24, r25
    cda4:	d9 f4       	brne	.+54     	; 0xcddc <f_getlabel+0xea>
    cda6:	ef a5       	ldd	r30, Y+47	; 0x2f
    cda8:	f8 a9       	ldd	r31, Y+48	; 0x30
    cdaa:	80 81       	ld	r24, Z
    cdac:	83 30       	cpi	r24, 0x03	; 3
    cdae:	29 f0       	breq	.+10     	; 0xcdba <f_getlabel+0xc8>
    cdb0:	84 30       	cpi	r24, 0x04	; 4
    cdb2:	31 f0       	breq	.+12     	; 0xcdc0 <f_getlabel+0xce>
    cdb4:	87 e2       	ldi	r24, 0x27	; 39
    cdb6:	90 e0       	ldi	r25, 0x00	; 0
    cdb8:	05 c0       	rjmp	.+10     	; 0xcdc4 <f_getlabel+0xd2>
    cdba:	83 e4       	ldi	r24, 0x43	; 67
    cdbc:	90 e0       	ldi	r25, 0x00	; 0
    cdbe:	02 c0       	rjmp	.+4      	; 0xcdc4 <f_getlabel+0xd2>
    cdc0:	84 e6       	ldi	r24, 0x64	; 100
    cdc2:	90 e0       	ldi	r25, 0x00	; 0
    cdc4:	f5 96       	adiw	r30, 0x35	; 53
    cdc6:	8e 0f       	add	r24, r30
    cdc8:	9f 1f       	adc	r25, r31
    cdca:	0e 94 ba 45 	call	0x8b74	; 0x8b74 <ld_dword>
    cdce:	f6 01       	movw	r30, r12
    cdd0:	60 83       	st	Z, r22
    cdd2:	71 83       	std	Z+1, r23	; 0x01
    cdd4:	82 83       	std	Z+2, r24	; 0x02
    cdd6:	93 83       	std	Z+3, r25	; 0x03
    cdd8:	01 c0       	rjmp	.+2      	; 0xcddc <f_getlabel+0xea>
    cdda:	8c 01       	movw	r16, r24
    cddc:	c8 01       	movw	r24, r16
    cdde:	e2 96       	adiw	r28, 0x32	; 50
    cde0:	e8 e0       	ldi	r30, 0x08	; 8
    cde2:	0c 94 b5 e9 	jmp	0x1d36a	; 0x1d36a <__epilogue_restores__+0x14>

0000cde6 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
    cde6:	a2 e4       	ldi	r26, 0x42	; 66
    cde8:	b0 e0       	ldi	r27, 0x00	; 0
    cdea:	e9 ef       	ldi	r30, 0xF9	; 249
    cdec:	f6 e6       	ldi	r31, 0x66	; 102
    cdee:	0c 94 8f e9 	jmp	0x1d31e	; 0x1d31e <__prologue_saves__>
    cdf2:	9a 87       	std	Y+10, r25	; 0x0a
    cdf4:	89 87       	std	Y+9, r24	; 0x09
    cdf6:	e6 2e       	mov	r14, r22
    cdf8:	49 01       	movw	r8, r18
    cdfa:	5a 01       	movw	r10, r20
    cdfc:	68 01       	movw	r12, r16
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
    cdfe:	ce 01       	movw	r24, r28
    ce00:	09 96       	adiw	r24, 0x09	; 9
    ce02:	0e 94 51 46 	call	0x8ca2	; 0x8ca2 <get_ldnumber>
    ce06:	1c 01       	movw	r2, r24
	if (vol < 0) return FR_INVALID_DRIVE;
    ce08:	97 fd       	sbrc	r25, 7
    ce0a:	39 c5       	rjmp	.+2674   	; 0xd87e <f_mkfs+0xa98>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear mounted volume */
    ce0c:	fc 01       	movw	r30, r24
    ce0e:	ee 0f       	add	r30, r30
    ce10:	ff 1f       	adc	r31, r31
    ce12:	ee 58       	subi	r30, 0x8E	; 142
    ce14:	f7 4e       	sbci	r31, 0xE7	; 231
    ce16:	01 90       	ld	r0, Z+
    ce18:	f0 81       	ld	r31, Z
    ce1a:	e0 2d       	mov	r30, r0
    ce1c:	30 97       	sbiw	r30, 0x00	; 0
    ce1e:	09 f0       	breq	.+2      	; 0xce22 <f_mkfs+0x3c>
    ce20:	10 82       	st	Z, r1
	pdrv = LD2PD(vol);	/* Physical drive */
    ce22:	2c a6       	std	Y+44, r2	; 0x2c
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
    ce24:	82 2d       	mov	r24, r2
    ce26:	d2 d5       	rcall	.+2980   	; 0xd9cc <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
    ce28:	80 fd       	sbrc	r24, 0
    ce2a:	2b c5       	rjmp	.+2646   	; 0xd882 <f_mkfs+0xa9c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    ce2c:	82 fd       	sbrc	r24, 2
    ce2e:	2b c5       	rjmp	.+2646   	; 0xd886 <f_mkfs+0xaa0>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
    ce30:	ae 01       	movw	r20, r28
    ce32:	4b 5f       	subi	r20, 0xFB	; 251
    ce34:	5f 4f       	sbci	r21, 0xFF	; 255
    ce36:	63 e0       	ldi	r22, 0x03	; 3
    ce38:	82 2d       	mov	r24, r2
    ce3a:	ee d5       	rcall	.+3036   	; 0xda18 <disk_ioctl>
    ce3c:	89 2b       	or	r24, r25
    ce3e:	b9 f4       	brne	.+46     	; 0xce6e <f_mkfs+0x88>
    ce40:	4d 81       	ldd	r20, Y+5	; 0x05
    ce42:	5e 81       	ldd	r21, Y+6	; 0x06
    ce44:	6f 81       	ldd	r22, Y+7	; 0x07
    ce46:	78 85       	ldd	r23, Y+8	; 0x08
    ce48:	db 01       	movw	r26, r22
    ce4a:	ca 01       	movw	r24, r20
    ce4c:	01 97       	sbiw	r24, 0x01	; 1
    ce4e:	a1 09       	sbc	r26, r1
    ce50:	b1 09       	sbc	r27, r1
    ce52:	81 15       	cp	r24, r1
    ce54:	00 e8       	ldi	r16, 0x80	; 128
    ce56:	90 07       	cpc	r25, r16
    ce58:	a1 05       	cpc	r26, r1
    ce5a:	b1 05       	cpc	r27, r1
    ce5c:	40 f4       	brcc	.+16     	; 0xce6e <f_mkfs+0x88>
    ce5e:	84 23       	and	r24, r20
    ce60:	95 23       	and	r25, r21
    ce62:	a6 23       	and	r26, r22
    ce64:	b7 23       	and	r27, r23
    ce66:	89 2b       	or	r24, r25
    ce68:	8a 2b       	or	r24, r26
    ce6a:	8b 2b       	or	r24, r27
    ce6c:	41 f0       	breq	.+16     	; 0xce7e <f_mkfs+0x98>
    ce6e:	81 e0       	ldi	r24, 0x01	; 1
    ce70:	90 e0       	ldi	r25, 0x00	; 0
    ce72:	a0 e0       	ldi	r26, 0x00	; 0
    ce74:	b0 e0       	ldi	r27, 0x00	; 0
    ce76:	8d 83       	std	Y+5, r24	; 0x05
    ce78:	9e 83       	std	Y+6, r25	; 0x06
    ce7a:	af 83       	std	Y+7, r26	; 0x07
    ce7c:	b8 87       	std	Y+8, r27	; 0x08
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
    ce7e:	81 14       	cp	r8, r1
    ce80:	91 04       	cpc	r9, r1
    ce82:	a1 04       	cpc	r10, r1
    ce84:	b1 04       	cpc	r11, r1
    ce86:	61 f0       	breq	.+24     	; 0xcea0 <f_mkfs+0xba>
    ce88:	d5 01       	movw	r26, r10
    ce8a:	c4 01       	movw	r24, r8
    ce8c:	92 50       	subi	r25, 0x02	; 2
    ce8e:	a1 09       	sbc	r26, r1
    ce90:	b1 09       	sbc	r27, r1
    ce92:	81 30       	cpi	r24, 0x01	; 1
    ce94:	9e 4f       	sbci	r25, 0xFE	; 254
    ce96:	af 4f       	sbci	r26, 0xFF	; 255
    ce98:	b1 05       	cpc	r27, r1
    ce9a:	10 f0       	brcs	.+4      	; 0xcea0 <f_mkfs+0xba>
    ce9c:	83 e1       	ldi	r24, 0x13	; 19
    ce9e:	f6 c4       	rjmp	.+2540   	; 0xd88c <f_mkfs+0xaa6>
    cea0:	d5 01       	movw	r26, r10
    cea2:	c4 01       	movw	r24, r8
    cea4:	01 97       	sbiw	r24, 0x01	; 1
    cea6:	a1 09       	sbc	r26, r1
    cea8:	b1 09       	sbc	r27, r1
    ceaa:	88 21       	and	r24, r8
    ceac:	99 21       	and	r25, r9
    ceae:	aa 21       	and	r26, r10
    ceb0:	bb 21       	and	r27, r11
    ceb2:	89 2b       	or	r24, r25
    ceb4:	8a 2b       	or	r24, r26
    ceb6:	8b 2b       	or	r24, r27
    ceb8:	89 f7       	brne	.-30     	; 0xce9c <f_mkfs+0xb6>
	au /= ss;	/* Cluster size in unit of sector */

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
	sz_buf = len / ss;		/* Size of working buffer (sector) */
    ceba:	8f 2d       	mov	r24, r15
    cebc:	86 95       	lsr	r24
    cebe:	90 e0       	ldi	r25, 0x00	; 0
    cec0:	9c 01       	movw	r18, r24
    cec2:	40 e0       	ldi	r20, 0x00	; 0
    cec4:	50 e0       	ldi	r21, 0x00	; 0
    cec6:	2c a3       	std	Y+36, r18	; 0x24
    cec8:	3d a3       	std	Y+37, r19	; 0x25
    ceca:	4e a3       	std	Y+38, r20	; 0x26
    cecc:	5f a3       	std	Y+39, r21	; 0x27
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
    cece:	69 e0       	ldi	r22, 0x09	; 9
    ced0:	22 0f       	add	r18, r18
    ced2:	33 1f       	adc	r19, r19
    ced4:	44 1f       	adc	r20, r20
    ced6:	55 1f       	adc	r21, r21
    ced8:	6a 95       	dec	r22
    ceda:	d1 f7       	brne	.-12     	; 0xced0 <f_mkfs+0xea>
    cedc:	2d a7       	std	Y+45, r18	; 0x2d
    cede:	3e a7       	std	Y+46, r19	; 0x2e
    cee0:	4f a7       	std	Y+47, r20	; 0x2f
    cee2:	58 ab       	std	Y+48, r21	; 0x30
	if (!szb_buf) return FR_MKFS_ABORTED;
    cee4:	23 2b       	or	r18, r19
    cee6:	24 2b       	or	r18, r20
    cee8:	25 2b       	or	r18, r21
    ceea:	11 f4       	brne	.+4      	; 0xcef0 <f_mkfs+0x10a>
    ceec:	8e e0       	ldi	r24, 0x0E	; 14
    ceee:	ce c4       	rjmp	.+2460   	; 0xd88c <f_mkfs+0xaa6>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
    cef0:	ae 01       	movw	r20, r28
    cef2:	4f 5f       	subi	r20, 0xFF	; 255
    cef4:	5f 4f       	sbci	r21, 0xFF	; 255
    cef6:	61 e0       	ldi	r22, 0x01	; 1
    cef8:	82 2d       	mov	r24, r2
    cefa:	8e d5       	rcall	.+2844   	; 0xda18 <disk_ioctl>
    cefc:	89 2b       	or	r24, r25
    cefe:	09 f0       	breq	.+2      	; 0xcf02 <f_mkfs+0x11c>
    cf00:	c4 c4       	rjmp	.+2440   	; 0xd88a <f_mkfs+0xaa4>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
    cf02:	3e 2d       	mov	r19, r14
    cf04:	38 70       	andi	r19, 0x08	; 8
    cf06:	3a ab       	std	Y+50, r19	; 0x32
    cf08:	e3 fe       	sbrs	r14, 3
    cf0a:	05 c0       	rjmp	.+10     	; 0xcf16 <f_mkfs+0x130>
    cf0c:	1c 8a       	std	Y+20, r1	; 0x14
    cf0e:	1d 8a       	std	Y+21, r1	; 0x15
    cf10:	1e 8a       	std	Y+22, r1	; 0x16
    cf12:	1f 8a       	std	Y+23, r1	; 0x17
    cf14:	08 c0       	rjmp	.+16     	; 0xcf26 <f_mkfs+0x140>
    cf16:	8f e3       	ldi	r24, 0x3F	; 63
    cf18:	90 e0       	ldi	r25, 0x00	; 0
    cf1a:	a0 e0       	ldi	r26, 0x00	; 0
    cf1c:	b0 e0       	ldi	r27, 0x00	; 0
    cf1e:	8c 8b       	std	Y+20, r24	; 0x14
    cf20:	9d 8b       	std	Y+21, r25	; 0x15
    cf22:	ae 8b       	std	Y+22, r26	; 0x16
    cf24:	bf 8b       	std	Y+23, r27	; 0x17
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
    cf26:	49 80       	ldd	r4, Y+1	; 0x01
    cf28:	5a 80       	ldd	r5, Y+2	; 0x02
    cf2a:	6b 80       	ldd	r6, Y+3	; 0x03
    cf2c:	7c 80       	ldd	r7, Y+4	; 0x04
    cf2e:	0c 89       	ldd	r16, Y+20	; 0x14
    cf30:	1d 89       	ldd	r17, Y+21	; 0x15
    cf32:	2e 89       	ldd	r18, Y+22	; 0x16
    cf34:	3f 89       	ldd	r19, Y+23	; 0x17
    cf36:	40 16       	cp	r4, r16
    cf38:	51 06       	cpc	r5, r17
    cf3a:	62 06       	cpc	r6, r18
    cf3c:	73 06       	cpc	r7, r19
    cf3e:	b0 f2       	brcs	.-84     	; 0xceec <f_mkfs+0x106>
		sz_vol -= b_vol;						/* Volume size */
    cf40:	d3 01       	movw	r26, r6
    cf42:	c2 01       	movw	r24, r4
    cf44:	80 1b       	sub	r24, r16
    cf46:	91 0b       	sbc	r25, r17
    cf48:	a2 0b       	sbc	r26, r18
    cf4a:	b3 0b       	sbc	r27, r19
    cf4c:	8b 87       	std	Y+11, r24	; 0x0b
    cf4e:	9c 87       	std	Y+12, r25	; 0x0c
    cf50:	ad 87       	std	Y+13, r26	; 0x0d
    cf52:	be 87       	std	Y+14, r27	; 0x0e
    cf54:	89 83       	std	Y+1, r24	; 0x01
    cf56:	9a 83       	std	Y+2, r25	; 0x02
    cf58:	ab 83       	std	Y+3, r26	; 0x03
    cf5a:	bc 83       	std	Y+4, r27	; 0x04
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
    cf5c:	80 38       	cpi	r24, 0x80	; 128
    cf5e:	91 05       	cpc	r25, r1
    cf60:	a1 05       	cpc	r26, r1
    cf62:	b1 05       	cpc	r27, r1
    cf64:	18 f2       	brcs	.-122    	; 0xceec <f_mkfs+0x106>
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
	au /= ss;	/* Cluster size in unit of sector */
    cf66:	29 e0       	ldi	r18, 0x09	; 9
    cf68:	b6 94       	lsr	r11
    cf6a:	a7 94       	ror	r10
    cf6c:	97 94       	ror	r9
    cf6e:	87 94       	ror	r8
    cf70:	2a 95       	dec	r18
    cf72:	d1 f7       	brne	.-12     	; 0xcf68 <f_mkfs+0x182>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
    cf74:	91 e8       	ldi	r25, 0x81	; 129
    cf76:	89 16       	cp	r8, r25
    cf78:	91 04       	cpc	r9, r1
    cf7a:	a1 04       	cpc	r10, r1
    cf7c:	b1 04       	cpc	r11, r1
    cf7e:	08 f0       	brcs	.+2      	; 0xcf82 <f_mkfs+0x19c>
    cf80:	8d cf       	rjmp	.-230    	; 0xce9c <f_mkfs+0xb6>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
    cf82:	ae 2d       	mov	r26, r14
    cf84:	a2 70       	andi	r26, 0x02	; 2
    cf86:	fa 2e       	mov	r15, r26
    cf88:	e1 fe       	sbrs	r14, 1
    cf8a:	06 c0       	rjmp	.+12     	; 0xcf98 <f_mkfs+0x1b2>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
    cf8c:	8e 2d       	mov	r24, r14
    cf8e:	87 70       	andi	r24, 0x07	; 7
    cf90:	82 30       	cpi	r24, 0x02	; 2
    cf92:	39 f0       	breq	.+14     	; 0xcfa2 <f_mkfs+0x1bc>
    cf94:	e0 fe       	sbrs	r14, 0
    cf96:	08 c0       	rjmp	.+16     	; 0xcfa8 <f_mkfs+0x1c2>
				fmt = FS_FAT32; break;
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
    cf98:	e0 fe       	sbrs	r14, 0
    cf9a:	80 cf       	rjmp	.-256    	; 0xce9c <f_mkfs+0xb6>
		fmt = FS_FAT16;
    cf9c:	b2 e0       	ldi	r27, 0x02	; 2
    cf9e:	bf 87       	std	Y+15, r27	; 0x0f
    cfa0:	05 c0       	rjmp	.+10     	; 0xcfac <f_mkfs+0x1c6>
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
		if (opt & FM_FAT32) {	/* FAT32 possible? */
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
				fmt = FS_FAT32; break;
    cfa2:	e3 e0       	ldi	r30, 0x03	; 3
    cfa4:	ef 87       	std	Y+15, r30	; 0x0f
    cfa6:	02 c0       	rjmp	.+4      	; 0xcfac <f_mkfs+0x1c6>
    cfa8:	f3 e0       	ldi	r31, 0x03	; 3
    cfaa:	ff 87       	std	Y+15, r31	; 0x0f
		do {
			pau = au;
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
				if (!pau) {	/* au auto-selection */
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
    cfac:	0b 85       	ldd	r16, Y+11	; 0x0b
    cfae:	1c 85       	ldd	r17, Y+12	; 0x0c
    cfb0:	2d 85       	ldd	r18, Y+13	; 0x0d
    cfb2:	3e 85       	ldd	r19, Y+14	; 0x0e
    cfb4:	81 e1       	ldi	r24, 0x11	; 17
    cfb6:	36 95       	lsr	r19
    cfb8:	27 95       	ror	r18
    cfba:	17 95       	ror	r17
    cfbc:	07 95       	ror	r16
    cfbe:	8a 95       	dec	r24
    cfc0:	d1 f7       	brne	.-12     	; 0xcfb6 <f_mkfs+0x1d0>
    cfc2:	23 96       	adiw	r28, 0x03	; 3
    cfc4:	0c af       	std	Y+60, r16	; 0x3c
    cfc6:	1d af       	std	Y+61, r17	; 0x3d
    cfc8:	2e af       	std	Y+62, r18	; 0x3e
    cfca:	3f af       	std	Y+63, r19	; 0x3f
    cfcc:	23 97       	sbiw	r28, 0x03	; 3
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
    cfce:	0b 85       	ldd	r16, Y+11	; 0x0b
    cfd0:	1c 85       	ldd	r17, Y+12	; 0x0c
    cfd2:	2d 85       	ldd	r18, Y+13	; 0x0d
    cfd4:	3e 85       	ldd	r19, Y+14	; 0x0e
    cfd6:	9c e0       	ldi	r25, 0x0C	; 12
    cfd8:	36 95       	lsr	r19
    cfda:	27 95       	ror	r18
    cfdc:	17 95       	ror	r17
    cfde:	07 95       	ror	r16
    cfe0:	9a 95       	dec	r25
    cfe2:	d1 f7       	brne	.-12     	; 0xcfd8 <f_mkfs+0x1f2>
    cfe4:	0b ab       	std	Y+51, r16	; 0x33
    cfe6:	1c ab       	std	Y+52, r17	; 0x34
    cfe8:	2d ab       	std	Y+53, r18	; 0x35
    cfea:	3e ab       	std	Y+54, r19	; 0x36
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
    cfec:	8d 81       	ldd	r24, Y+5	; 0x05
    cfee:	9e 81       	ldd	r25, Y+6	; 0x06
    cff0:	af 81       	ldd	r26, Y+7	; 0x07
    cff2:	b8 85       	ldd	r27, Y+8	; 0x08
    cff4:	8c 01       	movw	r16, r24
    cff6:	9d 01       	movw	r18, r26
    cff8:	01 50       	subi	r16, 0x01	; 1
    cffa:	11 09       	sbc	r17, r1
    cffc:	21 09       	sbc	r18, r1
    cffe:	31 09       	sbc	r19, r1
    d000:	0b af       	std	Y+59, r16	; 0x3b
    d002:	1c af       	std	Y+60, r17	; 0x3c
    d004:	2d af       	std	Y+61, r18	; 0x3d
    d006:	3e af       	std	Y+62, r19	; 0x3e
    d008:	00 27       	eor	r16, r16
    d00a:	11 27       	eor	r17, r17
    d00c:	98 01       	movw	r18, r16
    d00e:	08 1b       	sub	r16, r24
    d010:	19 0b       	sbc	r17, r25
    d012:	2a 0b       	sbc	r18, r26
    d014:	3b 0b       	sbc	r19, r27
    d016:	0f ab       	std	Y+55, r16	; 0x37
    d018:	18 af       	std	Y+56, r17	; 0x38
    d01a:	29 af       	std	Y+57, r18	; 0x39
    d01c:	3a af       	std	Y+58, r19	; 0x3a
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
    d01e:	1f 85       	ldd	r17, Y+15	; 0x0f
    d020:	13 30       	cpi	r17, 0x03	; 3
    d022:	09 f0       	breq	.+2      	; 0xd026 <f_mkfs+0x240>
    d024:	67 c1       	rjmp	.+718    	; 0xd2f4 <f_mkfs+0x50e>
				if (!pau) {	/* au auto-selection */
    d026:	81 14       	cp	r8, r1
    d028:	91 04       	cpc	r9, r1
    d02a:	a1 04       	cpc	r10, r1
    d02c:	b1 04       	cpc	r11, r1
    d02e:	e1 f4       	brne	.+56     	; 0xd068 <f_mkfs+0x282>
    d030:	e8 e2       	ldi	r30, 0x28	; 40
    d032:	f3 e0       	ldi	r31, 0x03	; 3
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
    d034:	41 2c       	mov	r4, r1
    d036:	51 2c       	mov	r5, r1
    d038:	32 01       	movw	r6, r4
    d03a:	43 94       	inc	r4
    d03c:	81 91       	ld	r24, Z+
    d03e:	91 91       	ld	r25, Z+
    d040:	00 97       	sbiw	r24, 0x00	; 0
    d042:	a1 f0       	breq	.+40     	; 0xd06c <f_mkfs+0x286>
    d044:	a0 e0       	ldi	r26, 0x00	; 0
    d046:	b0 e0       	ldi	r27, 0x00	; 0
    d048:	23 96       	adiw	r28, 0x03	; 3
    d04a:	0c ad       	ldd	r16, Y+60	; 0x3c
    d04c:	1d ad       	ldd	r17, Y+61	; 0x3d
    d04e:	2e ad       	ldd	r18, Y+62	; 0x3e
    d050:	3f ad       	ldd	r19, Y+63	; 0x3f
    d052:	23 97       	sbiw	r28, 0x03	; 3
    d054:	08 17       	cp	r16, r24
    d056:	19 07       	cpc	r17, r25
    d058:	2a 07       	cpc	r18, r26
    d05a:	3b 07       	cpc	r19, r27
    d05c:	38 f0       	brcs	.+14     	; 0xd06c <f_mkfs+0x286>
    d05e:	44 0c       	add	r4, r4
    d060:	55 1c       	adc	r5, r5
    d062:	66 1c       	adc	r6, r6
    d064:	77 1c       	adc	r7, r7
    d066:	ea cf       	rjmp	.-44     	; 0xd03c <f_mkfs+0x256>
    d068:	24 01       	movw	r4, r8
    d06a:	35 01       	movw	r6, r10
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
    d06c:	6b 85       	ldd	r22, Y+11	; 0x0b
    d06e:	7c 85       	ldd	r23, Y+12	; 0x0c
    d070:	8d 85       	ldd	r24, Y+13	; 0x0d
    d072:	9e 85       	ldd	r25, Y+14	; 0x0e
    d074:	a3 01       	movw	r20, r6
    d076:	92 01       	movw	r18, r4
    d078:	0e 94 22 e9 	call	0x1d244	; 0x1d244 <__udivmodsi4>
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
    d07c:	da 01       	movw	r26, r20
    d07e:	c9 01       	movw	r24, r18
    d080:	62 e0       	ldi	r22, 0x02	; 2
    d082:	88 0f       	add	r24, r24
    d084:	99 1f       	adc	r25, r25
    d086:	aa 1f       	adc	r26, r26
    d088:	bb 1f       	adc	r27, r27
    d08a:	6a 95       	dec	r22
    d08c:	d1 f7       	brne	.-12     	; 0xd082 <f_mkfs+0x29c>
    d08e:	89 5f       	subi	r24, 0xF9	; 249
    d090:	9d 4f       	sbci	r25, 0xFD	; 253
    d092:	af 4f       	sbci	r26, 0xFF	; 255
    d094:	bf 4f       	sbci	r27, 0xFF	; 255
    d096:	79 e0       	ldi	r23, 0x09	; 9
    d098:	b6 95       	lsr	r27
    d09a:	a7 95       	ror	r26
    d09c:	97 95       	ror	r25
    d09e:	87 95       	ror	r24
    d0a0:	7a 95       	dec	r23
    d0a2:	d1 f7       	brne	.-12     	; 0xd098 <f_mkfs+0x2b2>
    d0a4:	88 8b       	std	Y+16, r24	; 0x10
    d0a6:	99 8b       	std	Y+17, r25	; 0x11
    d0a8:	aa 8b       	std	Y+18, r26	; 0x12
    d0aa:	bb 8b       	std	Y+19, r27	; 0x13
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
    d0ac:	da 01       	movw	r26, r20
    d0ae:	c9 01       	movw	r24, r18
    d0b0:	86 5f       	subi	r24, 0xF6	; 246
    d0b2:	9f 4f       	sbci	r25, 0xFF	; 255
    d0b4:	a1 09       	sbc	r26, r1
    d0b6:	b1 09       	sbc	r27, r1
    d0b8:	00 97       	sbiw	r24, 0x00	; 0
    d0ba:	af 4f       	sbci	r26, 0xFF	; 255
    d0bc:	bf 40       	sbci	r27, 0x0F	; 15
    d0be:	08 f0       	brcs	.+2      	; 0xd0c2 <f_mkfs+0x2dc>
    d0c0:	15 cf       	rjmp	.-470    	; 0xceec <f_mkfs+0x106>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
    d0c2:	1c 8e       	std	Y+28, r1	; 0x1c
    d0c4:	1d 8e       	std	Y+29, r1	; 0x1d
    d0c6:	1e 8e       	std	Y+30, r1	; 0x1e
    d0c8:	1f 8e       	std	Y+31, r1	; 0x1f
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
				sz_rsv = 32;	/* Number of reserved sectors */
    d0ca:	00 e2       	ldi	r16, 0x20	; 32
    d0cc:	10 e0       	ldi	r17, 0x00	; 0
    d0ce:	20 e0       	ldi	r18, 0x00	; 0
    d0d0:	30 e0       	ldi	r19, 0x00	; 0
    d0d2:	08 a3       	std	Y+32, r16	; 0x20
    d0d4:	19 a3       	std	Y+33, r17	; 0x21
    d0d6:	2a a3       	std	Y+34, r18	; 0x22
    d0d8:	3b a3       	std	Y+35, r19	; 0x23
    d0da:	4e c0       	rjmp	.+156    	; 0xd178 <f_mkfs+0x392>
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
    d0dc:	a0 e0       	ldi	r26, 0x00	; 0
    d0de:	b0 e0       	ldi	r27, 0x00	; 0
    d0e0:	0b a9       	ldd	r16, Y+51	; 0x33
    d0e2:	1c a9       	ldd	r17, Y+52	; 0x34
    d0e4:	2d a9       	ldd	r18, Y+53	; 0x35
    d0e6:	3e a9       	ldd	r19, Y+54	; 0x36
    d0e8:	08 17       	cp	r16, r24
    d0ea:	19 07       	cpc	r17, r25
    d0ec:	2a 07       	cpc	r18, r26
    d0ee:	3b 07       	cpc	r19, r27
    d0f0:	40 f0       	brcs	.+16     	; 0xd102 <f_mkfs+0x31c>
    d0f2:	44 0c       	add	r4, r4
    d0f4:	55 1c       	adc	r5, r5
    d0f6:	66 1c       	adc	r6, r6
    d0f8:	77 1c       	adc	r7, r7
    d0fa:	81 91       	ld	r24, Z+
    d0fc:	91 91       	ld	r25, Z+
    d0fe:	00 97       	sbiw	r24, 0x00	; 0
    d100:	69 f7       	brne	.-38     	; 0xd0dc <f_mkfs+0x2f6>
				}
				n_clst = sz_vol / pau;
    d102:	6b 85       	ldd	r22, Y+11	; 0x0b
    d104:	7c 85       	ldd	r23, Y+12	; 0x0c
    d106:	8d 85       	ldd	r24, Y+13	; 0x0d
    d108:	9e 85       	ldd	r25, Y+14	; 0x0e
    d10a:	a3 01       	movw	r20, r6
    d10c:	92 01       	movw	r18, r4
    d10e:	0e 94 22 e9 	call	0x1d244	; 0x1d244 <__udivmodsi4>
				if (n_clst > MAX_FAT12) {
    d112:	26 3f       	cpi	r18, 0xF6	; 246
    d114:	1f e0       	ldi	r17, 0x0F	; 15
    d116:	31 07       	cpc	r19, r17
    d118:	41 05       	cpc	r20, r1
    d11a:	51 05       	cpc	r21, r1
    d11c:	08 f4       	brcc	.+2      	; 0xd120 <f_mkfs+0x33a>
    d11e:	f9 c0       	rjmp	.+498    	; 0xd312 <f_mkfs+0x52c>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
    d120:	da 01       	movw	r26, r20
    d122:	c9 01       	movw	r24, r18
    d124:	02 96       	adiw	r24, 0x02	; 2
    d126:	a1 1d       	adc	r26, r1
    d128:	b1 1d       	adc	r27, r1
    d12a:	88 0f       	add	r24, r24
    d12c:	99 1f       	adc	r25, r25
    d12e:	aa 1f       	adc	r26, r26
    d130:	bb 1f       	adc	r27, r27
    d132:	22 e0       	ldi	r18, 0x02	; 2
    d134:	2f 87       	std	Y+15, r18	; 0x0f
				} else {
					fmt = FS_FAT12;
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
    d136:	81 50       	subi	r24, 0x01	; 1
    d138:	9e 4f       	sbci	r25, 0xFE	; 254
    d13a:	af 4f       	sbci	r26, 0xFF	; 255
    d13c:	bf 4f       	sbci	r27, 0xFF	; 255
    d13e:	8c 01       	movw	r16, r24
    d140:	9d 01       	movw	r18, r26
    d142:	a9 e0       	ldi	r26, 0x09	; 9
    d144:	36 95       	lsr	r19
    d146:	27 95       	ror	r18
    d148:	17 95       	ror	r17
    d14a:	07 95       	ror	r16
    d14c:	aa 95       	dec	r26
    d14e:	d1 f7       	brne	.-12     	; 0xd144 <f_mkfs+0x35e>
    d150:	08 8b       	std	Y+16, r16	; 0x10
    d152:	19 8b       	std	Y+17, r17	; 0x11
    d154:	2a 8b       	std	Y+18, r18	; 0x12
    d156:	3b 8b       	std	Y+19, r19	; 0x13
				sz_rsv = 1;						/* Number of reserved sectors */
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
    d158:	20 e2       	ldi	r18, 0x20	; 32
    d15a:	30 e0       	ldi	r19, 0x00	; 0
    d15c:	40 e0       	ldi	r20, 0x00	; 0
    d15e:	50 e0       	ldi	r21, 0x00	; 0
    d160:	2c 8f       	std	Y+28, r18	; 0x1c
    d162:	3d 8f       	std	Y+29, r19	; 0x1d
    d164:	4e 8f       	std	Y+30, r20	; 0x1e
    d166:	5f 8f       	std	Y+31, r21	; 0x1f
				} else {
					fmt = FS_FAT12;
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
				sz_rsv = 1;						/* Number of reserved sectors */
    d168:	81 e0       	ldi	r24, 0x01	; 1
    d16a:	90 e0       	ldi	r25, 0x00	; 0
    d16c:	a0 e0       	ldi	r26, 0x00	; 0
    d16e:	b0 e0       	ldi	r27, 0x00	; 0
    d170:	88 a3       	std	Y+32, r24	; 0x20
    d172:	99 a3       	std	Y+33, r25	; 0x21
    d174:	aa a3       	std	Y+34, r26	; 0x22
    d176:	bb a3       	std	Y+35, r27	; 0x23
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
    d178:	08 a1       	ldd	r16, Y+32	; 0x20
    d17a:	19 a1       	ldd	r17, Y+33	; 0x21
    d17c:	2a a1       	ldd	r18, Y+34	; 0x22
    d17e:	3b a1       	ldd	r19, Y+35	; 0x23
    d180:	8c 89       	ldd	r24, Y+20	; 0x14
    d182:	9d 89       	ldd	r25, Y+21	; 0x15
    d184:	ae 89       	ldd	r26, Y+22	; 0x16
    d186:	bf 89       	ldd	r27, Y+23	; 0x17
    d188:	08 0f       	add	r16, r24
    d18a:	19 1f       	adc	r17, r25
    d18c:	2a 1f       	adc	r18, r26
    d18e:	3b 1f       	adc	r19, r27
    d190:	08 8f       	std	Y+24, r16	; 0x18
    d192:	19 8f       	std	Y+25, r17	; 0x19
    d194:	2a 8f       	std	Y+26, r18	; 0x1a
    d196:	3b 8f       	std	Y+27, r19	; 0x1b
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
    d198:	88 89       	ldd	r24, Y+16	; 0x10
    d19a:	99 89       	ldd	r25, Y+17	; 0x11
    d19c:	aa 89       	ldd	r26, Y+18	; 0x12
    d19e:	bb 89       	ldd	r27, Y+19	; 0x13
    d1a0:	0c 8d       	ldd	r16, Y+28	; 0x1c
    d1a2:	1d 8d       	ldd	r17, Y+29	; 0x1d
    d1a4:	2e 8d       	ldd	r18, Y+30	; 0x1e
    d1a6:	3f 8d       	ldd	r19, Y+31	; 0x1f
    d1a8:	80 0f       	add	r24, r16
    d1aa:	91 1f       	adc	r25, r17
    d1ac:	a2 1f       	adc	r26, r18
    d1ae:	b3 1f       	adc	r27, r19
    d1b0:	28 8d       	ldd	r18, Y+24	; 0x18
    d1b2:	39 8d       	ldd	r19, Y+25	; 0x19
    d1b4:	4a 8d       	ldd	r20, Y+26	; 0x1a
    d1b6:	5b 8d       	ldd	r21, Y+27	; 0x1b
    d1b8:	82 0f       	add	r24, r18
    d1ba:	93 1f       	adc	r25, r19
    d1bc:	a4 1f       	adc	r26, r20
    d1be:	b5 1f       	adc	r27, r21

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
    d1c0:	4b ad       	ldd	r20, Y+59	; 0x3b
    d1c2:	5c ad       	ldd	r21, Y+60	; 0x3c
    d1c4:	6d ad       	ldd	r22, Y+61	; 0x3d
    d1c6:	7e ad       	ldd	r23, Y+62	; 0x3e
    d1c8:	48 0f       	add	r20, r24
    d1ca:	59 1f       	adc	r21, r25
    d1cc:	6a 1f       	adc	r22, r26
    d1ce:	7b 1f       	adc	r23, r27
    d1d0:	0f a9       	ldd	r16, Y+55	; 0x37
    d1d2:	18 ad       	ldd	r17, Y+56	; 0x38
    d1d4:	29 ad       	ldd	r18, Y+57	; 0x39
    d1d6:	3a ad       	ldd	r19, Y+58	; 0x3a
    d1d8:	40 23       	and	r20, r16
    d1da:	51 23       	and	r21, r17
    d1dc:	62 23       	and	r22, r18
    d1de:	73 23       	and	r23, r19
    d1e0:	48 1b       	sub	r20, r24
    d1e2:	59 0b       	sbc	r21, r25
    d1e4:	6a 0b       	sbc	r22, r26
    d1e6:	7b 0b       	sbc	r23, r27
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
    d1e8:	1f 85       	ldd	r17, Y+15	; 0x0f
    d1ea:	13 30       	cpi	r17, 0x03	; 3
    d1ec:	09 f0       	breq	.+2      	; 0xd1f0 <f_mkfs+0x40a>
    d1ee:	a4 c0       	rjmp	.+328    	; 0xd338 <f_mkfs+0x552>
				sz_rsv += n; b_fat += n;
    d1f0:	08 a1       	ldd	r16, Y+32	; 0x20
    d1f2:	19 a1       	ldd	r17, Y+33	; 0x21
    d1f4:	2a a1       	ldd	r18, Y+34	; 0x22
    d1f6:	3b a1       	ldd	r19, Y+35	; 0x23
    d1f8:	04 0f       	add	r16, r20
    d1fa:	15 1f       	adc	r17, r21
    d1fc:	26 1f       	adc	r18, r22
    d1fe:	37 1f       	adc	r19, r23
    d200:	08 a3       	std	Y+32, r16	; 0x20
    d202:	19 a3       	std	Y+33, r17	; 0x21
    d204:	2a a3       	std	Y+34, r18	; 0x22
    d206:	3b a3       	std	Y+35, r19	; 0x23
    d208:	08 8d       	ldd	r16, Y+24	; 0x18
    d20a:	19 8d       	ldd	r17, Y+25	; 0x19
    d20c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    d20e:	3b 8d       	ldd	r19, Y+27	; 0x1b
    d210:	04 0f       	add	r16, r20
    d212:	15 1f       	adc	r17, r21
    d214:	26 1f       	adc	r18, r22
    d216:	37 1f       	adc	r19, r23
    d218:	08 8f       	std	Y+24, r16	; 0x18
    d21a:	19 8f       	std	Y+25, r17	; 0x19
    d21c:	2a 8f       	std	Y+26, r18	; 0x1a
    d21e:	3b 8f       	std	Y+27, r19	; 0x1b
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
    d220:	b3 01       	movw	r22, r6
    d222:	a2 01       	movw	r20, r4
    d224:	f4 e0       	ldi	r31, 0x04	; 4
    d226:	44 0f       	add	r20, r20
    d228:	55 1f       	adc	r21, r21
    d22a:	66 1f       	adc	r22, r22
    d22c:	77 1f       	adc	r23, r23
    d22e:	fa 95       	dec	r31
    d230:	d1 f7       	brne	.-12     	; 0xd226 <f_mkfs+0x440>
    d232:	0c 89       	ldd	r16, Y+20	; 0x14
    d234:	1d 89       	ldd	r17, Y+21	; 0x15
    d236:	2e 89       	ldd	r18, Y+22	; 0x16
    d238:	3f 89       	ldd	r19, Y+23	; 0x17
    d23a:	40 1b       	sub	r20, r16
    d23c:	51 0b       	sbc	r21, r17
    d23e:	62 0b       	sbc	r22, r18
    d240:	73 0b       	sbc	r23, r19
    d242:	84 0f       	add	r24, r20
    d244:	95 1f       	adc	r25, r21
    d246:	a6 1f       	adc	r26, r22
    d248:	b7 1f       	adc	r27, r23
    d24a:	0b 85       	ldd	r16, Y+11	; 0x0b
    d24c:	1c 85       	ldd	r17, Y+12	; 0x0c
    d24e:	2d 85       	ldd	r18, Y+13	; 0x0d
    d250:	3e 85       	ldd	r19, Y+14	; 0x0e
    d252:	08 17       	cp	r16, r24
    d254:	19 07       	cpc	r17, r25
    d256:	2a 07       	cpc	r18, r26
    d258:	3b 07       	cpc	r19, r27
    d25a:	08 f4       	brcc	.+2      	; 0xd25e <f_mkfs+0x478>
    d25c:	47 ce       	rjmp	.-882    	; 0xceec <f_mkfs+0x106>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
    d25e:	d9 01       	movw	r26, r18
    d260:	c8 01       	movw	r24, r16
    d262:	28 a1       	ldd	r18, Y+32	; 0x20
    d264:	39 a1       	ldd	r19, Y+33	; 0x21
    d266:	4a a1       	ldd	r20, Y+34	; 0x22
    d268:	5b a1       	ldd	r21, Y+35	; 0x23
    d26a:	82 1b       	sub	r24, r18
    d26c:	93 0b       	sbc	r25, r19
    d26e:	a4 0b       	sbc	r26, r20
    d270:	b5 0b       	sbc	r27, r21
    d272:	08 89       	ldd	r16, Y+16	; 0x10
    d274:	19 89       	ldd	r17, Y+17	; 0x11
    d276:	2a 89       	ldd	r18, Y+18	; 0x12
    d278:	3b 89       	ldd	r19, Y+19	; 0x13
    d27a:	80 1b       	sub	r24, r16
    d27c:	91 0b       	sbc	r25, r17
    d27e:	a2 0b       	sbc	r26, r18
    d280:	b3 0b       	sbc	r27, r19
    d282:	bc 01       	movw	r22, r24
    d284:	cd 01       	movw	r24, r26
    d286:	2c 8d       	ldd	r18, Y+28	; 0x1c
    d288:	3d 8d       	ldd	r19, Y+29	; 0x1d
    d28a:	4e 8d       	ldd	r20, Y+30	; 0x1e
    d28c:	5f 8d       	ldd	r21, Y+31	; 0x1f
    d28e:	62 1b       	sub	r22, r18
    d290:	73 0b       	sbc	r23, r19
    d292:	84 0b       	sbc	r24, r20
    d294:	95 0b       	sbc	r25, r21
    d296:	a3 01       	movw	r20, r6
    d298:	92 01       	movw	r18, r4
    d29a:	0e 94 22 e9 	call	0x1d244	; 0x1d244 <__udivmodsi4>
    d29e:	28 a7       	std	Y+40, r18	; 0x28
    d2a0:	39 a7       	std	Y+41, r19	; 0x29
    d2a2:	4a a7       	std	Y+42, r20	; 0x2a
    d2a4:	5b a7       	std	Y+43, r21	; 0x2b
			if (fmt == FS_FAT32) {
    d2a6:	3f 85       	ldd	r19, Y+15	; 0x0f
    d2a8:	33 30       	cpi	r19, 0x03	; 3
    d2aa:	09 f4       	brne	.+2      	; 0xd2ae <f_mkfs+0x4c8>
    d2ac:	52 c0       	rjmp	.+164    	; 0xd352 <f_mkfs+0x56c>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
					return FR_MKFS_ABORTED;
				}
			}
			if (fmt == FS_FAT16) {
    d2ae:	ff 85       	ldd	r31, Y+15	; 0x0f
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
    d2b0:	08 a5       	ldd	r16, Y+40	; 0x28
    d2b2:	19 a5       	ldd	r17, Y+41	; 0x29
    d2b4:	2a a5       	ldd	r18, Y+42	; 0x2a
    d2b6:	3b a5       	ldd	r19, Y+43	; 0x2b
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
					return FR_MKFS_ABORTED;
				}
			}
			if (fmt == FS_FAT16) {
    d2b8:	f2 30       	cpi	r31, 0x02	; 2
    d2ba:	09 f0       	breq	.+2      	; 0xd2be <f_mkfs+0x4d8>
    d2bc:	83 c0       	rjmp	.+262    	; 0xd3c4 <f_mkfs+0x5de>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
    d2be:	06 3f       	cpi	r16, 0xF6	; 246
    d2c0:	4f ef       	ldi	r20, 0xFF	; 255
    d2c2:	14 07       	cpc	r17, r20
    d2c4:	21 05       	cpc	r18, r1
    d2c6:	31 05       	cpc	r19, r1
    d2c8:	08 f4       	brcc	.+2      	; 0xd2cc <f_mkfs+0x4e6>
    d2ca:	5f c0       	rjmp	.+190    	; 0xd38a <f_mkfs+0x5a4>
					if (!au && (pau * 2) <= 64) {
    d2cc:	81 14       	cp	r8, r1
    d2ce:	91 04       	cpc	r9, r1
    d2d0:	a1 04       	cpc	r10, r1
    d2d2:	b1 04       	cpc	r11, r1
    d2d4:	09 f0       	breq	.+2      	; 0xd2d8 <f_mkfs+0x4f2>
    d2d6:	e8 c2       	rjmp	.+1488   	; 0xd8a8 <f_mkfs+0xac2>
    d2d8:	d3 01       	movw	r26, r6
    d2da:	c2 01       	movw	r24, r4
    d2dc:	88 0f       	add	r24, r24
    d2de:	99 1f       	adc	r25, r25
    d2e0:	aa 1f       	adc	r26, r26
    d2e2:	bb 1f       	adc	r27, r27
    d2e4:	81 34       	cpi	r24, 0x41	; 65
    d2e6:	91 05       	cpc	r25, r1
    d2e8:	a1 05       	cpc	r26, r1
    d2ea:	b1 05       	cpc	r27, r1
    d2ec:	08 f0       	brcs	.+2      	; 0xd2f0 <f_mkfs+0x50a>
    d2ee:	d0 c2       	rjmp	.+1440   	; 0xd890 <f_mkfs+0xaaa>
    d2f0:	4c 01       	movw	r8, r24
    d2f2:	5d 01       	movw	r10, r26
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
    d2f4:	81 14       	cp	r8, r1
    d2f6:	91 04       	cpc	r9, r1
    d2f8:	a1 04       	cpc	r10, r1
    d2fa:	b1 04       	cpc	r11, r1
    d2fc:	39 f4       	brne	.+14     	; 0xd30c <f_mkfs+0x526>
    d2fe:	ea e1       	ldi	r30, 0x1A	; 26
    d300:	f3 e0       	ldi	r31, 0x03	; 3
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
    d302:	41 2c       	mov	r4, r1
    d304:	51 2c       	mov	r5, r1
    d306:	32 01       	movw	r6, r4
    d308:	43 94       	inc	r4
    d30a:	f7 ce       	rjmp	.-530    	; 0xd0fa <f_mkfs+0x314>
    d30c:	24 01       	movw	r4, r8
    d30e:	35 01       	movw	r6, r10
    d310:	f8 ce       	rjmp	.-528    	; 0xd102 <f_mkfs+0x31c>
				n_clst = sz_vol / pau;
				if (n_clst > MAX_FAT12) {
					n = n_clst * 2 + 4;		/* FAT size [byte] */
				} else {
					fmt = FS_FAT12;
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
    d312:	a3 e0       	ldi	r26, 0x03	; 3
    d314:	b0 e0       	ldi	r27, 0x00	; 0
    d316:	0e 94 6f e9 	call	0x1d2de	; 0x1d2de <__muluhisi3>
    d31a:	dc 01       	movw	r26, r24
    d31c:	cb 01       	movw	r24, r22
    d31e:	01 96       	adiw	r24, 0x01	; 1
    d320:	a1 1d       	adc	r26, r1
    d322:	b1 1d       	adc	r27, r1
    d324:	b6 95       	lsr	r27
    d326:	a7 95       	ror	r26
    d328:	97 95       	ror	r25
    d32a:	87 95       	ror	r24
    d32c:	03 96       	adiw	r24, 0x03	; 3
    d32e:	a1 1d       	adc	r26, r1
    d330:	b1 1d       	adc	r27, r1
				}
				n_clst = sz_vol / pau;
				if (n_clst > MAX_FAT12) {
					n = n_clst * 2 + 4;		/* FAT size [byte] */
				} else {
					fmt = FS_FAT12;
    d332:	31 e0       	ldi	r19, 0x01	; 1
    d334:	3f 87       	std	Y+15, r19	; 0x0f
    d336:	ff ce       	rjmp	.-514    	; 0xd136 <f_mkfs+0x350>
			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
				sz_rsv += n; b_fat += n;
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
    d338:	08 89       	ldd	r16, Y+16	; 0x10
    d33a:	19 89       	ldd	r17, Y+17	; 0x11
    d33c:	2a 89       	ldd	r18, Y+18	; 0x12
    d33e:	3b 89       	ldd	r19, Y+19	; 0x13
    d340:	04 0f       	add	r16, r20
    d342:	15 1f       	adc	r17, r21
    d344:	26 1f       	adc	r18, r22
    d346:	37 1f       	adc	r19, r23
    d348:	08 8b       	std	Y+16, r16	; 0x10
    d34a:	19 8b       	std	Y+17, r17	; 0x11
    d34c:	2a 8b       	std	Y+18, r18	; 0x12
    d34e:	3b 8b       	std	Y+19, r19	; 0x13
    d350:	67 cf       	rjmp	.-306    	; 0xd220 <f_mkfs+0x43a>

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
			if (fmt == FS_FAT32) {
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
    d352:	88 a5       	ldd	r24, Y+40	; 0x28
    d354:	99 a5       	ldd	r25, Y+41	; 0x29
    d356:	aa a5       	ldd	r26, Y+42	; 0x2a
    d358:	bb a5       	ldd	r27, Y+43	; 0x2b
    d35a:	86 3f       	cpi	r24, 0xF6	; 246
    d35c:	9f 4f       	sbci	r25, 0xFF	; 255
    d35e:	a1 05       	cpc	r26, r1
    d360:	b1 05       	cpc	r27, r1
    d362:	c8 f5       	brcc	.+114    	; 0xd3d6 <f_mkfs+0x5f0>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
    d364:	81 14       	cp	r8, r1
    d366:	91 04       	cpc	r9, r1
    d368:	a1 04       	cpc	r10, r1
    d36a:	b1 04       	cpc	r11, r1
    d36c:	09 f0       	breq	.+2      	; 0xd370 <f_mkfs+0x58a>
    d36e:	be cd       	rjmp	.-1156   	; 0xceec <f_mkfs+0x106>
    d370:	53 01       	movw	r10, r6
    d372:	42 01       	movw	r8, r4
    d374:	b6 94       	lsr	r11
    d376:	a7 94       	ror	r10
    d378:	97 94       	ror	r9
    d37a:	87 94       	ror	r8
    d37c:	81 14       	cp	r8, r1
    d37e:	91 04       	cpc	r9, r1
    d380:	a1 04       	cpc	r10, r1
    d382:	b1 04       	cpc	r11, r1
    d384:	09 f4       	brne	.+2      	; 0xd388 <f_mkfs+0x5a2>
    d386:	b2 cd       	rjmp	.-1180   	; 0xceec <f_mkfs+0x106>
    d388:	4e ce       	rjmp	.-868    	; 0xd026 <f_mkfs+0x240>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
					return FR_MKFS_ABORTED;
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
    d38a:	88 a5       	ldd	r24, Y+40	; 0x28
    d38c:	99 a5       	ldd	r25, Y+41	; 0x29
    d38e:	aa a5       	ldd	r26, Y+42	; 0x2a
    d390:	bb a5       	ldd	r27, Y+43	; 0x2b
    d392:	86 3f       	cpi	r24, 0xF6	; 246
    d394:	9f 40       	sbci	r25, 0x0F	; 15
    d396:	a1 05       	cpc	r26, r1
    d398:	b1 05       	cpc	r27, r1
    d39a:	e8 f4       	brcc	.+58     	; 0xd3d6 <f_mkfs+0x5f0>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
    d39c:	81 14       	cp	r8, r1
    d39e:	91 04       	cpc	r9, r1
    d3a0:	a1 04       	cpc	r10, r1
    d3a2:	b1 04       	cpc	r11, r1
    d3a4:	09 f0       	breq	.+2      	; 0xd3a8 <f_mkfs+0x5c2>
    d3a6:	a2 cd       	rjmp	.-1212   	; 0xceec <f_mkfs+0x106>
    d3a8:	53 01       	movw	r10, r6
    d3aa:	42 01       	movw	r8, r4
    d3ac:	88 0c       	add	r8, r8
    d3ae:	99 1c       	adc	r9, r9
    d3b0:	aa 1c       	adc	r10, r10
    d3b2:	bb 1c       	adc	r11, r11
    d3b4:	f1 e8       	ldi	r31, 0x81	; 129
    d3b6:	8f 16       	cp	r8, r31
    d3b8:	91 04       	cpc	r9, r1
    d3ba:	a1 04       	cpc	r10, r1
    d3bc:	b1 04       	cpc	r11, r1
    d3be:	08 f0       	brcs	.+2      	; 0xd3c2 <f_mkfs+0x5dc>
    d3c0:	95 cd       	rjmp	.-1238   	; 0xceec <f_mkfs+0x106>
    d3c2:	98 cf       	rjmp	.-208    	; 0xd2f4 <f_mkfs+0x50e>
					return FR_MKFS_ABORTED;
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
    d3c4:	06 3f       	cpi	r16, 0xF6	; 246
    d3c6:	4f e0       	ldi	r20, 0x0F	; 15
    d3c8:	14 07       	cpc	r17, r20
    d3ca:	21 05       	cpc	r18, r1
    d3cc:	31 05       	cpc	r19, r1
    d3ce:	08 f0       	brcs	.+2      	; 0xd3d2 <f_mkfs+0x5ec>
    d3d0:	8d cd       	rjmp	.-1254   	; 0xceec <f_mkfs+0x106>
    d3d2:	51 e0       	ldi	r21, 0x01	; 1
    d3d4:	5f 87       	std	Y+15, r21	; 0x0f
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
    d3d6:	40 e0       	ldi	r20, 0x00	; 0
    d3d8:	52 e0       	ldi	r21, 0x02	; 2
    d3da:	60 e0       	ldi	r22, 0x00	; 0
    d3dc:	70 e0       	ldi	r23, 0x00	; 0
    d3de:	c6 01       	movw	r24, r12
    d3e0:	0e 94 d5 45 	call	0x8baa	; 0x8baa <mem_set>
    d3e4:	4b e0       	ldi	r20, 0x0B	; 11
    d3e6:	50 e0       	ldi	r21, 0x00	; 0
    d3e8:	6d e6       	ldi	r22, 0x6D	; 109
    d3ea:	78 e0       	ldi	r23, 0x08	; 8
    d3ec:	c6 01       	movw	r24, r12
    d3ee:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <mem_cpy.part.0>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d3f2:	d6 01       	movw	r26, r12
    d3f4:	1b 96       	adiw	r26, 0x0b	; 11
    d3f6:	1c 92       	st	X, r1
    d3f8:	1b 97       	sbiw	r26, 0x0b	; 11
	*ptr++ = (BYTE)val;
    d3fa:	82 e0       	ldi	r24, 0x02	; 2
    d3fc:	1c 96       	adiw	r26, 0x0c	; 12
    d3fe:	8c 93       	st	X, r24
    d400:	1c 97       	sbiw	r26, 0x0c	; 12
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
    d402:	1d 96       	adiw	r26, 0x0d	; 13
    d404:	4c 92       	st	X, r4
    d406:	1d 97       	sbiw	r26, 0x0d	; 13

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d408:	e8 a1       	ldd	r30, Y+32	; 0x20
    d40a:	1e 96       	adiw	r26, 0x0e	; 14
    d40c:	ec 93       	st	X, r30
    d40e:	1e 97       	sbiw	r26, 0x0e	; 14
	*ptr++ = (BYTE)val;
    d410:	f9 a1       	ldd	r31, Y+33	; 0x21
    d412:	1f 96       	adiw	r26, 0x0f	; 15
    d414:	fc 93       	st	X, r31
    d416:	1f 97       	sbiw	r26, 0x0f	; 15
		mem_set(buf, 0, ss);
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
    d418:	81 e0       	ldi	r24, 0x01	; 1
    d41a:	50 96       	adiw	r26, 0x10	; 16
    d41c:	8c 93       	st	X, r24
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
    d41e:	0f 85       	ldd	r16, Y+15	; 0x0f
    d420:	03 30       	cpi	r16, 0x03	; 3
    d422:	11 f0       	breq	.+4      	; 0xd428 <f_mkfs+0x642>
    d424:	82 e0       	ldi	r24, 0x02	; 2
    d426:	01 c0       	rjmp	.+2      	; 0xd42a <f_mkfs+0x644>
    d428:	80 e0       	ldi	r24, 0x00	; 0

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d42a:	d6 01       	movw	r26, r12
    d42c:	51 96       	adiw	r26, 0x11	; 17
    d42e:	1c 92       	st	X, r1
    d430:	51 97       	sbiw	r26, 0x11	; 17
	*ptr++ = (BYTE)val;
    d432:	52 96       	adiw	r26, 0x12	; 18
    d434:	8c 93       	st	X, r24
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
		if (sz_vol < 0x10000) {
    d436:	49 81       	ldd	r20, Y+1	; 0x01
    d438:	5a 81       	ldd	r21, Y+2	; 0x02
    d43a:	6b 81       	ldd	r22, Y+3	; 0x03
    d43c:	7c 81       	ldd	r23, Y+4	; 0x04
    d43e:	41 15       	cp	r20, r1
    d440:	51 05       	cpc	r21, r1
    d442:	b1 e0       	ldi	r27, 0x01	; 1
    d444:	6b 07       	cpc	r22, r27
    d446:	71 05       	cpc	r23, r1
    d448:	20 f4       	brcc	.+8      	; 0xd452 <f_mkfs+0x66c>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d44a:	f6 01       	movw	r30, r12
    d44c:	43 8b       	std	Z+19, r20	; 0x13
	*ptr++ = (BYTE)val;
    d44e:	54 8b       	std	Z+20, r21	; 0x14
    d450:	04 c0       	rjmp	.+8      	; 0xd45a <f_mkfs+0x674>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
		if (sz_vol < 0x10000) {
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
    d452:	c6 01       	movw	r24, r12
    d454:	80 96       	adiw	r24, 0x20	; 32
    d456:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
    d45a:	88 ef       	ldi	r24, 0xF8	; 248
    d45c:	d6 01       	movw	r26, r12
    d45e:	55 96       	adiw	r26, 0x15	; 21
    d460:	8c 93       	st	X, r24
    d462:	55 97       	sbiw	r26, 0x15	; 21

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d464:	8f e3       	ldi	r24, 0x3F	; 63
    d466:	58 96       	adiw	r26, 0x18	; 24
    d468:	8c 93       	st	X, r24
    d46a:	58 97       	sbiw	r26, 0x18	; 24
	*ptr++ = (BYTE)val;
    d46c:	59 96       	adiw	r26, 0x19	; 25
    d46e:	1c 92       	st	X, r1
    d470:	59 97       	sbiw	r26, 0x19	; 25

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d472:	8f ef       	ldi	r24, 0xFF	; 255
    d474:	5a 96       	adiw	r26, 0x1a	; 26
    d476:	8c 93       	st	X, r24
    d478:	5a 97       	sbiw	r26, 0x1a	; 26
	*ptr++ = (BYTE)val;
    d47a:	5b 96       	adiw	r26, 0x1b	; 27
    d47c:	1c 92       	st	X, r1
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
    d47e:	4c 89       	ldd	r20, Y+20	; 0x14
    d480:	5d 89       	ldd	r21, Y+21	; 0x15
    d482:	6e 89       	ldd	r22, Y+22	; 0x16
    d484:	7f 89       	ldd	r23, Y+23	; 0x17
    d486:	c6 01       	movw	r24, r12
    d488:	4c 96       	adiw	r24, 0x1c	; 28
    d48a:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <st_dword>
		if (fmt == FS_FAT32) {
    d48e:	bf 85       	ldd	r27, Y+15	; 0x0f
    d490:	b3 30       	cpi	r27, 0x03	; 3
    d492:	61 f5       	brne	.+88     	; 0xd4ec <f_mkfs+0x706>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
    d494:	0e 94 61 73 	call	0xe6c2	; 0xe6c2 <get_fattime>
    d498:	ab 01       	movw	r20, r22
    d49a:	bc 01       	movw	r22, r24
    d49c:	c6 01       	movw	r24, r12
    d49e:	8d 5b       	subi	r24, 0xBD	; 189
    d4a0:	9f 4f       	sbci	r25, 0xFF	; 255
    d4a2:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
    d4a6:	48 89       	ldd	r20, Y+16	; 0x10
    d4a8:	59 89       	ldd	r21, Y+17	; 0x11
    d4aa:	6a 89       	ldd	r22, Y+18	; 0x12
    d4ac:	7b 89       	ldd	r23, Y+19	; 0x13
    d4ae:	c6 01       	movw	r24, r12
    d4b0:	84 96       	adiw	r24, 0x24	; 36
    d4b2:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <st_dword>
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d4b6:	82 e0       	ldi	r24, 0x02	; 2
    d4b8:	f6 01       	movw	r30, r12
    d4ba:	84 a7       	std	Z+44, r24	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
    d4bc:	15 a6       	std	Z+45, r1	; 0x2d
	*ptr++ = (BYTE)val; val >>= 8;
    d4be:	16 a6       	std	Z+46, r1	; 0x2e
	*ptr++ = (BYTE)val;
    d4c0:	17 a6       	std	Z+47, r1	; 0x2f

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d4c2:	81 e0       	ldi	r24, 0x01	; 1
    d4c4:	80 ab       	std	Z+48, r24	; 0x30
	*ptr++ = (BYTE)val;
    d4c6:	11 aa       	std	Z+49, r1	; 0x31

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d4c8:	86 e0       	ldi	r24, 0x06	; 6
    d4ca:	82 ab       	std	Z+50, r24	; 0x32
	*ptr++ = (BYTE)val;
    d4cc:	13 aa       	std	Z+51, r1	; 0x33
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
    d4ce:	80 e8       	ldi	r24, 0x80	; 128
    d4d0:	e0 5c       	subi	r30, 0xC0	; 192
    d4d2:	ff 4f       	sbci	r31, 0xFF	; 255
    d4d4:	80 83       	st	Z, r24
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
    d4d6:	89 e2       	ldi	r24, 0x29	; 41
    d4d8:	32 96       	adiw	r30, 0x02	; 2
    d4da:	80 83       	st	Z, r24
    d4dc:	43 e1       	ldi	r20, 0x13	; 19
    d4de:	50 e0       	ldi	r21, 0x00	; 0
    d4e0:	69 e7       	ldi	r22, 0x79	; 121
    d4e2:	78 e0       	ldi	r23, 0x08	; 8
    d4e4:	c6 01       	movw	r24, r12
    d4e6:	89 5b       	subi	r24, 0xB9	; 185
    d4e8:	9f 4f       	sbci	r25, 0xFF	; 255
    d4ea:	1e c0       	rjmp	.+60     	; 0xd528 <f_mkfs+0x742>
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
    d4ec:	0e 94 61 73 	call	0xe6c2	; 0xe6c2 <get_fattime>
    d4f0:	ab 01       	movw	r20, r22
    d4f2:	bc 01       	movw	r22, r24
    d4f4:	c6 01       	movw	r24, r12
    d4f6:	87 96       	adiw	r24, 0x27	; 39
    d4f8:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <st_dword>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d4fc:	e8 89       	ldd	r30, Y+16	; 0x10
    d4fe:	d6 01       	movw	r26, r12
    d500:	56 96       	adiw	r26, 0x16	; 22
    d502:	ec 93       	st	X, r30
    d504:	56 97       	sbiw	r26, 0x16	; 22
	*ptr++ = (BYTE)val;
    d506:	f9 89       	ldd	r31, Y+17	; 0x11
    d508:	57 96       	adiw	r26, 0x17	; 23
    d50a:	fc 93       	st	X, r31
    d50c:	57 97       	sbiw	r26, 0x17	; 23
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
    d50e:	80 e8       	ldi	r24, 0x80	; 128
    d510:	94 96       	adiw	r26, 0x24	; 36
    d512:	8c 93       	st	X, r24
    d514:	94 97       	sbiw	r26, 0x24	; 36
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
    d516:	89 e2       	ldi	r24, 0x29	; 41
    d518:	96 96       	adiw	r26, 0x26	; 38
    d51a:	8c 93       	st	X, r24
    d51c:	43 e1       	ldi	r20, 0x13	; 19
    d51e:	50 e0       	ldi	r21, 0x00	; 0
    d520:	6d e8       	ldi	r22, 0x8D	; 141
    d522:	78 e0       	ldi	r23, 0x08	; 8
    d524:	c6 01       	movw	r24, r12
    d526:	8b 96       	adiw	r24, 0x2b	; 43
    d528:	0e 94 9e 46 	call	0x8d3c	; 0x8d3c <mem_cpy.part.0>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d52c:	46 01       	movw	r8, r12
    d52e:	02 e0       	ldi	r16, 0x02	; 2
    d530:	80 1a       	sub	r8, r16
    d532:	0e ef       	ldi	r16, 0xFE	; 254
    d534:	90 0a       	sbc	r9, r16
    d536:	45 e5       	ldi	r20, 0x55	; 85
    d538:	b4 2e       	mov	r11, r20
    d53a:	d4 01       	movw	r26, r8
    d53c:	bc 92       	st	X, r11
	*ptr++ = (BYTE)val;
    d53e:	76 01       	movw	r14, r12
    d540:	b1 e0       	ldi	r27, 0x01	; 1
    d542:	eb 1a       	sub	r14, r27
    d544:	be ef       	ldi	r27, 0xFE	; 254
    d546:	fb 0a       	sbc	r15, r27
    d548:	5a ea       	ldi	r21, 0xAA	; 170
    d54a:	a5 2e       	mov	r10, r21
    d54c:	f7 01       	movw	r30, r14
    d54e:	a0 82       	st	Z, r10
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
    d550:	01 e0       	ldi	r16, 0x01	; 1
    d552:	10 e0       	ldi	r17, 0x00	; 0
    d554:	2c 89       	ldd	r18, Y+20	; 0x14
    d556:	3d 89       	ldd	r19, Y+21	; 0x15
    d558:	4e 89       	ldd	r20, Y+22	; 0x16
    d55a:	5f 89       	ldd	r21, Y+23	; 0x17
    d55c:	b6 01       	movw	r22, r12
    d55e:	82 2d       	mov	r24, r2
    d560:	4b d2       	rcall	.+1174   	; 0xd9f8 <disk_write>
    d562:	89 2b       	or	r24, r25
    d564:	09 f0       	breq	.+2      	; 0xd568 <f_mkfs+0x782>
    d566:	91 c1       	rjmp	.+802    	; 0xd88a <f_mkfs+0xaa4>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
    d568:	ff 85       	ldd	r31, Y+15	; 0x0f
    d56a:	f3 30       	cpi	r31, 0x03	; 3
    d56c:	09 f0       	breq	.+2      	; 0xd570 <f_mkfs+0x78a>
    d56e:	5e c0       	rjmp	.+188    	; 0xd62c <f_mkfs+0x846>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
    d570:	01 e0       	ldi	r16, 0x01	; 1
    d572:	10 e0       	ldi	r17, 0x00	; 0
    d574:	2c 89       	ldd	r18, Y+20	; 0x14
    d576:	3d 89       	ldd	r19, Y+21	; 0x15
    d578:	4e 89       	ldd	r20, Y+22	; 0x16
    d57a:	5f 89       	ldd	r21, Y+23	; 0x17
    d57c:	2a 5f       	subi	r18, 0xFA	; 250
    d57e:	3f 4f       	sbci	r19, 0xFF	; 255
    d580:	4f 4f       	sbci	r20, 0xFF	; 255
    d582:	5f 4f       	sbci	r21, 0xFF	; 255
    d584:	b6 01       	movw	r22, r12
    d586:	82 2d       	mov	r24, r2
    d588:	37 d2       	rcall	.+1134   	; 0xd9f8 <disk_write>
			mem_set(buf, 0, ss);
    d58a:	40 e0       	ldi	r20, 0x00	; 0
    d58c:	52 e0       	ldi	r21, 0x02	; 2
    d58e:	60 e0       	ldi	r22, 0x00	; 0
    d590:	70 e0       	ldi	r23, 0x00	; 0
    d592:	c6 01       	movw	r24, r12
    d594:	0e 94 d5 45 	call	0x8baa	; 0x8baa <mem_set>
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d598:	82 e5       	ldi	r24, 0x52	; 82
    d59a:	d6 01       	movw	r26, r12
    d59c:	8c 93       	st	X, r24
	*ptr++ = (BYTE)val; val >>= 8;
    d59e:	11 96       	adiw	r26, 0x01	; 1
    d5a0:	8c 93       	st	X, r24
    d5a2:	11 97       	sbiw	r26, 0x01	; 1
	*ptr++ = (BYTE)val; val >>= 8;
    d5a4:	81 e6       	ldi	r24, 0x61	; 97
    d5a6:	12 96       	adiw	r26, 0x02	; 2
    d5a8:	8c 93       	st	X, r24
    d5aa:	12 97       	sbiw	r26, 0x02	; 2
	*ptr++ = (BYTE)val;
    d5ac:	91 e4       	ldi	r25, 0x41	; 65
    d5ae:	13 96       	adiw	r26, 0x03	; 3
    d5b0:	9c 93       	st	X, r25
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d5b2:	22 e7       	ldi	r18, 0x72	; 114
    d5b4:	f6 01       	movw	r30, r12
    d5b6:	ec 51       	subi	r30, 0x1C	; 28
    d5b8:	fe 4f       	sbci	r31, 0xFE	; 254
    d5ba:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    d5bc:	31 96       	adiw	r30, 0x01	; 1
    d5be:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    d5c0:	31 96       	adiw	r30, 0x01	; 1
    d5c2:	90 83       	st	Z, r25
	*ptr++ = (BYTE)val;
    d5c4:	31 96       	adiw	r30, 0x01	; 1
    d5c6:	80 83       	st	Z, r24
		if (fmt == FS_FAT32) {
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
			mem_set(buf, 0, ss);
			st_dword(buf + FSI_LeadSig, 0x41615252);
			st_dword(buf + FSI_StrucSig, 0x61417272);
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
    d5c8:	48 a5       	ldd	r20, Y+40	; 0x28
    d5ca:	59 a5       	ldd	r21, Y+41	; 0x29
    d5cc:	6a a5       	ldd	r22, Y+42	; 0x2a
    d5ce:	7b a5       	ldd	r23, Y+43	; 0x2b
    d5d0:	41 50       	subi	r20, 0x01	; 1
    d5d2:	51 09       	sbc	r21, r1
    d5d4:	61 09       	sbc	r22, r1
    d5d6:	71 09       	sbc	r23, r1
    d5d8:	c6 01       	movw	r24, r12
    d5da:	88 51       	subi	r24, 0x18	; 24
    d5dc:	9e 4f       	sbci	r25, 0xFE	; 254
    d5de:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <st_dword>
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d5e2:	82 e0       	ldi	r24, 0x02	; 2
    d5e4:	f6 01       	movw	r30, r12
    d5e6:	e4 51       	subi	r30, 0x14	; 20
    d5e8:	fe 4f       	sbci	r31, 0xFE	; 254
    d5ea:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val; val >>= 8;
    d5ec:	31 96       	adiw	r30, 0x01	; 1
    d5ee:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val; val >>= 8;
    d5f0:	31 96       	adiw	r30, 0x01	; 1
    d5f2:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val;
    d5f4:	31 96       	adiw	r30, 0x01	; 1
    d5f6:	10 82       	st	Z, r1

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d5f8:	f4 01       	movw	r30, r8
    d5fa:	b0 82       	st	Z, r11
	*ptr++ = (BYTE)val;
    d5fc:	d7 01       	movw	r26, r14
    d5fe:	ac 92       	st	X, r10
			st_dword(buf + FSI_LeadSig, 0x41615252);
			st_dword(buf + FSI_StrucSig, 0x61417272);
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
			st_word(buf + BS_55AA, 0xAA55);
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
    d600:	2c 89       	ldd	r18, Y+20	; 0x14
    d602:	3d 89       	ldd	r19, Y+21	; 0x15
    d604:	4e 89       	ldd	r20, Y+22	; 0x16
    d606:	5f 89       	ldd	r21, Y+23	; 0x17
    d608:	29 5f       	subi	r18, 0xF9	; 249
    d60a:	3f 4f       	sbci	r19, 0xFF	; 255
    d60c:	4f 4f       	sbci	r20, 0xFF	; 255
    d60e:	5f 4f       	sbci	r21, 0xFF	; 255
    d610:	b6 01       	movw	r22, r12
    d612:	82 2d       	mov	r24, r2
    d614:	f1 d1       	rcall	.+994    	; 0xd9f8 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
    d616:	2c 89       	ldd	r18, Y+20	; 0x14
    d618:	3d 89       	ldd	r19, Y+21	; 0x15
    d61a:	4e 89       	ldd	r20, Y+22	; 0x16
    d61c:	5f 89       	ldd	r21, Y+23	; 0x17
    d61e:	2f 5f       	subi	r18, 0xFF	; 255
    d620:	3f 4f       	sbci	r19, 0xFF	; 255
    d622:	4f 4f       	sbci	r20, 0xFF	; 255
    d624:	5f 4f       	sbci	r21, 0xFF	; 255
    d626:	b6 01       	movw	r22, r12
    d628:	82 2d       	mov	r24, r2
    d62a:	e6 d1       	rcall	.+972    	; 0xd9f8 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
    d62c:	4d a5       	ldd	r20, Y+45	; 0x2d
    d62e:	5e a5       	ldd	r21, Y+46	; 0x2e
    d630:	60 e0       	ldi	r22, 0x00	; 0
    d632:	70 e0       	ldi	r23, 0x00	; 0
    d634:	c6 01       	movw	r24, r12
    d636:	0e 94 d5 45 	call	0x8baa	; 0x8baa <mem_set>
		sect = b_fat;		/* FAT start sector */
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
			if (fmt == FS_FAT32) {
    d63a:	bf 85       	ldd	r27, Y+15	; 0x0f
    d63c:	b3 30       	cpi	r27, 0x03	; 3
    d63e:	89 f4       	brne	.+34     	; 0xd662 <f_mkfs+0x87c>
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d640:	88 ef       	ldi	r24, 0xF8	; 248
    d642:	f6 01       	movw	r30, r12
    d644:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val; val >>= 8;
    d646:	8f ef       	ldi	r24, 0xFF	; 255
    d648:	81 83       	std	Z+1, r24	; 0x01
	*ptr++ = (BYTE)val; val >>= 8;
    d64a:	82 83       	std	Z+2, r24	; 0x02
	*ptr++ = (BYTE)val;
    d64c:	83 83       	std	Z+3, r24	; 0x03
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d64e:	84 83       	std	Z+4, r24	; 0x04
	*ptr++ = (BYTE)val; val >>= 8;
    d650:	85 83       	std	Z+5, r24	; 0x05
	*ptr++ = (BYTE)val; val >>= 8;
    d652:	86 83       	std	Z+6, r24	; 0x06
	*ptr++ = (BYTE)val;
    d654:	87 83       	std	Z+7, r24	; 0x07
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d656:	80 87       	std	Z+8, r24	; 0x08
	*ptr++ = (BYTE)val; val >>= 8;
    d658:	81 87       	std	Z+9, r24	; 0x09
	*ptr++ = (BYTE)val; val >>= 8;
    d65a:	82 87       	std	Z+10, r24	; 0x0a
	*ptr++ = (BYTE)val;
    d65c:	8f e0       	ldi	r24, 0x0F	; 15
    d65e:	83 87       	std	Z+11, r24	; 0x0b
    d660:	0f c0       	rjmp	.+30     	; 0xd680 <f_mkfs+0x89a>
			if (fmt == FS_FAT32) {
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
    d662:	ff 85       	ldd	r31, Y+15	; 0x0f
    d664:	f1 30       	cpi	r31, 0x01	; 1
    d666:	29 f0       	breq	.+10     	; 0xd672 <f_mkfs+0x88c>
    d668:	48 ef       	ldi	r20, 0xF8	; 248
    d66a:	5f ef       	ldi	r21, 0xFF	; 255
    d66c:	6f ef       	ldi	r22, 0xFF	; 255
    d66e:	7f ef       	ldi	r23, 0xFF	; 255
    d670:	04 c0       	rjmp	.+8      	; 0xd67a <f_mkfs+0x894>
    d672:	48 ef       	ldi	r20, 0xF8	; 248
    d674:	5f ef       	ldi	r21, 0xFF	; 255
    d676:	6f ef       	ldi	r22, 0xFF	; 255
    d678:	70 e0       	ldi	r23, 0x00	; 0
    d67a:	c6 01       	movw	r24, r12
    d67c:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
    d680:	88 88       	ldd	r8, Y+16	; 0x10
    d682:	99 88       	ldd	r9, Y+17	; 0x11
    d684:	aa 88       	ldd	r10, Y+18	; 0x12
    d686:	bb 88       	ldd	r11, Y+19	; 0x13
    d688:	0c a1       	ldd	r16, Y+36	; 0x24
    d68a:	1d a1       	ldd	r17, Y+37	; 0x25
    d68c:	2e a1       	ldd	r18, Y+38	; 0x26
    d68e:	3f a1       	ldd	r19, Y+39	; 0x27
    d690:	08 15       	cp	r16, r8
    d692:	19 05       	cpc	r17, r9
    d694:	2a 05       	cpc	r18, r10
    d696:	3b 05       	cpc	r19, r11
    d698:	10 f4       	brcc	.+4      	; 0xd69e <f_mkfs+0x8b8>
    d69a:	48 01       	movw	r8, r16
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
    d69c:	59 01       	movw	r10, r18
    d69e:	84 01       	movw	r16, r8
    d6a0:	28 8d       	ldd	r18, Y+24	; 0x18
    d6a2:	39 8d       	ldd	r19, Y+25	; 0x19
    d6a4:	4a 8d       	ldd	r20, Y+26	; 0x1a
    d6a6:	5b 8d       	ldd	r21, Y+27	; 0x1b
    d6a8:	b6 01       	movw	r22, r12
    d6aa:	8c a5       	ldd	r24, Y+44	; 0x2c
    d6ac:	a5 d1       	rcall	.+842    	; 0xd9f8 <disk_write>
    d6ae:	89 2b       	or	r24, r25
    d6b0:	09 f0       	breq	.+2      	; 0xd6b4 <f_mkfs+0x8ce>
				mem_set(buf, 0, ss);
    d6b2:	eb c0       	rjmp	.+470    	; 0xd88a <f_mkfs+0xaa4>
    d6b4:	40 e0       	ldi	r20, 0x00	; 0
    d6b6:	52 e0       	ldi	r21, 0x02	; 2
    d6b8:	60 e0       	ldi	r22, 0x00	; 0
    d6ba:	70 e0       	ldi	r23, 0x00	; 0
    d6bc:	c6 01       	movw	r24, r12
    d6be:	0e 94 d5 45 	call	0x8baa	; 0x8baa <mem_set>
				sect += n; nsect -= n;
    d6c2:	28 8d       	ldd	r18, Y+24	; 0x18
    d6c4:	39 8d       	ldd	r19, Y+25	; 0x19
    d6c6:	4a 8d       	ldd	r20, Y+26	; 0x1a
    d6c8:	5b 8d       	ldd	r21, Y+27	; 0x1b
    d6ca:	28 0d       	add	r18, r8
    d6cc:	39 1d       	adc	r19, r9
    d6ce:	4a 1d       	adc	r20, r10
    d6d0:	5b 1d       	adc	r21, r11
    d6d2:	28 8f       	std	Y+24, r18	; 0x18
    d6d4:	39 8f       	std	Y+25, r19	; 0x19
    d6d6:	4a 8f       	std	Y+26, r20	; 0x1a
    d6d8:	5b 8f       	std	Y+27, r21	; 0x1b
    d6da:	88 89       	ldd	r24, Y+16	; 0x10
    d6dc:	99 89       	ldd	r25, Y+17	; 0x11
    d6de:	aa 89       	ldd	r26, Y+18	; 0x12
    d6e0:	bb 89       	ldd	r27, Y+19	; 0x13
    d6e2:	88 19       	sub	r24, r8
    d6e4:	99 09       	sbc	r25, r9
    d6e6:	aa 09       	sbc	r26, r10
    d6e8:	bb 09       	sbc	r27, r11
    d6ea:	88 8b       	std	Y+16, r24	; 0x10
    d6ec:	99 8b       	std	Y+17, r25	; 0x11
    d6ee:	aa 8b       	std	Y+18, r26	; 0x12
			} while (nsect);
    d6f0:	bb 8b       	std	Y+19, r27	; 0x13
    d6f2:	89 2b       	or	r24, r25
    d6f4:	8a 2b       	or	r24, r26
    d6f6:	8b 2b       	or	r24, r27
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
    d6f8:	19 f6       	brne	.-122    	; 0xd680 <f_mkfs+0x89a>
    d6fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    d6fc:	93 30       	cpi	r25, 0x03	; 3
    d6fe:	21 f4       	brne	.+8      	; 0xd708 <f_mkfs+0x922>
    d700:	4c 8e       	std	Y+28, r4	; 0x1c
    d702:	5d 8e       	std	Y+29, r5	; 0x1d
    d704:	6e 8e       	std	Y+30, r6	; 0x1e
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
    d706:	7f 8e       	std	Y+31, r7	; 0x1f
    d708:	8c 8c       	ldd	r8, Y+28	; 0x1c
    d70a:	9d 8c       	ldd	r9, Y+29	; 0x1d
    d70c:	ae 8c       	ldd	r10, Y+30	; 0x1e
    d70e:	bf 8c       	ldd	r11, Y+31	; 0x1f
    d710:	0c a1       	ldd	r16, Y+36	; 0x24
    d712:	1d a1       	ldd	r17, Y+37	; 0x25
    d714:	2e a1       	ldd	r18, Y+38	; 0x26
    d716:	3f a1       	ldd	r19, Y+39	; 0x27
    d718:	08 15       	cp	r16, r8
    d71a:	19 05       	cpc	r17, r9
    d71c:	2a 05       	cpc	r18, r10
    d71e:	3b 05       	cpc	r19, r11
    d720:	10 f4       	brcc	.+4      	; 0xd726 <f_mkfs+0x940>
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
    d722:	48 01       	movw	r8, r16
    d724:	59 01       	movw	r10, r18
    d726:	84 01       	movw	r16, r8
    d728:	28 8d       	ldd	r18, Y+24	; 0x18
    d72a:	39 8d       	ldd	r19, Y+25	; 0x19
    d72c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    d72e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    d730:	b6 01       	movw	r22, r12
    d732:	8c a5       	ldd	r24, Y+44	; 0x2c
    d734:	61 d1       	rcall	.+706    	; 0xd9f8 <disk_write>
    d736:	89 2b       	or	r24, r25
    d738:	09 f0       	breq	.+2      	; 0xd73c <f_mkfs+0x956>
			sect += n; nsect -= n;
    d73a:	a7 c0       	rjmp	.+334    	; 0xd88a <f_mkfs+0xaa4>
    d73c:	28 8d       	ldd	r18, Y+24	; 0x18
    d73e:	39 8d       	ldd	r19, Y+25	; 0x19
    d740:	4a 8d       	ldd	r20, Y+26	; 0x1a
    d742:	5b 8d       	ldd	r21, Y+27	; 0x1b
    d744:	28 0d       	add	r18, r8
    d746:	39 1d       	adc	r19, r9
    d748:	4a 1d       	adc	r20, r10
    d74a:	5b 1d       	adc	r21, r11
    d74c:	28 8f       	std	Y+24, r18	; 0x18
    d74e:	39 8f       	std	Y+25, r19	; 0x19
    d750:	4a 8f       	std	Y+26, r20	; 0x1a
    d752:	5b 8f       	std	Y+27, r21	; 0x1b
    d754:	8c 8d       	ldd	r24, Y+28	; 0x1c
    d756:	9d 8d       	ldd	r25, Y+29	; 0x1d
    d758:	ae 8d       	ldd	r26, Y+30	; 0x1e
    d75a:	bf 8d       	ldd	r27, Y+31	; 0x1f
    d75c:	88 19       	sub	r24, r8
    d75e:	99 09       	sbc	r25, r9
    d760:	aa 09       	sbc	r26, r10
    d762:	bb 09       	sbc	r27, r11
    d764:	8c 8f       	std	Y+28, r24	; 0x1c
    d766:	9d 8f       	std	Y+29, r25	; 0x1d
    d768:	ae 8f       	std	Y+30, r26	; 0x1e
		} while (nsect);
    d76a:	bf 8f       	std	Y+31, r27	; 0x1f
    d76c:	89 2b       	or	r24, r25
    d76e:	8a 2b       	or	r24, r26
    d770:	8b 2b       	or	r24, r27

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
    d772:	51 f6       	brne	.-108    	; 0xd708 <f_mkfs+0x922>
    d774:	9f 85       	ldd	r25, Y+15	; 0x0f
    d776:	93 30       	cpi	r25, 0x03	; 3
			sys = 0x0C;		/* FAT32X */
		} else {
			if (sz_vol >= 0x10000) {
    d778:	69 f0       	breq	.+26     	; 0xd794 <f_mkfs+0x9ae>
    d77a:	89 81       	ldd	r24, Y+1	; 0x01
    d77c:	9a 81       	ldd	r25, Y+2	; 0x02
    d77e:	ab 81       	ldd	r26, Y+3	; 0x03
    d780:	bc 81       	ldd	r27, Y+4	; 0x04
    d782:	00 97       	sbiw	r24, 0x00	; 0
    d784:	a1 40       	sbci	r26, 0x01	; 1
    d786:	b1 05       	cpc	r27, r1
				sys = 0x06;	/* FAT12/16 (>=64KS) */
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
    d788:	38 f4       	brcc	.+14     	; 0xd798 <f_mkfs+0x9b2>
    d78a:	ff 85       	ldd	r31, Y+15	; 0x0f
    d78c:	f2 30       	cpi	r31, 0x02	; 2
    d78e:	31 f4       	brne	.+12     	; 0xd79c <f_mkfs+0x9b6>
    d790:	14 e0       	ldi	r17, 0x04	; 4
	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
			sys = 0x0C;		/* FAT32X */
    d792:	05 c0       	rjmp	.+10     	; 0xd79e <f_mkfs+0x9b8>
    d794:	1c e0       	ldi	r17, 0x0C	; 12
		} else {
			if (sz_vol >= 0x10000) {
				sys = 0x06;	/* FAT12/16 (>=64KS) */
    d796:	03 c0       	rjmp	.+6      	; 0xd79e <f_mkfs+0x9b8>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
    d798:	16 e0       	ldi	r17, 0x06	; 6
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system type */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {
		if (!(opt & FM_SFD)) {
    d79a:	01 c0       	rjmp	.+2      	; 0xd79e <f_mkfs+0x9b8>
    d79c:	11 e0       	ldi	r17, 0x01	; 1
    d79e:	0a a9       	ldd	r16, Y+50	; 0x32
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
    d7a0:	00 23       	and	r16, r16
    d7a2:	69 f0       	breq	.+26     	; 0xd7be <f_mkfs+0x9d8>
    d7a4:	40 e0       	ldi	r20, 0x00	; 0
    d7a6:	50 e0       	ldi	r21, 0x00	; 0
    d7a8:	60 e0       	ldi	r22, 0x00	; 0
    d7aa:	82 2d       	mov	r24, r2
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
	if (vol < 0) return FR_INVALID_DRIVE;
    d7ac:	35 d1       	rcall	.+618    	; 0xda18 <disk_ioctl>
    d7ae:	31 e0       	ldi	r19, 0x01	; 1
    d7b0:	20 e0       	ldi	r18, 0x00	; 0
    d7b2:	89 2b       	or	r24, r25
    d7b4:	09 f4       	brne	.+2      	; 0xd7b8 <f_mkfs+0x9d2>
    d7b6:	30 e0       	ldi	r19, 0x00	; 0
    d7b8:	83 2f       	mov	r24, r19
    d7ba:	92 2f       	mov	r25, r18
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system type */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {
		if (!(opt & FM_SFD)) {
			/* Create partition table in FDISK format */
			mem_set(buf, 0, ss);
    d7bc:	7b c0       	rjmp	.+246    	; 0xd8b4 <f_mkfs+0xace>
    d7be:	40 e0       	ldi	r20, 0x00	; 0
    d7c0:	52 e0       	ldi	r21, 0x02	; 2
    d7c2:	60 e0       	ldi	r22, 0x00	; 0
    d7c4:	70 e0       	ldi	r23, 0x00	; 0
    d7c6:	c6 01       	movw	r24, r12
    d7c8:	0e 94 d5 45 	call	0x8baa	; 0x8baa <mem_set>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d7cc:	f6 01       	movw	r30, r12
    d7ce:	e2 50       	subi	r30, 0x02	; 2
    d7d0:	fe 4f       	sbci	r31, 0xFE	; 254
    d7d2:	85 e5       	ldi	r24, 0x55	; 85
	*ptr++ = (BYTE)val;
    d7d4:	80 83       	st	Z, r24
    d7d6:	31 96       	adiw	r30, 0x01	; 1
    d7d8:	8a ea       	ldi	r24, 0xAA	; 170
		if (!(opt & FM_SFD)) {
			/* Create partition table in FDISK format */
			mem_set(buf, 0, ss);
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
			pte[PTE_Boot] = 0;					/* Boot indicator */
    d7da:	80 83       	st	Z, r24
    d7dc:	e1 54       	subi	r30, 0x41	; 65
    d7de:	f1 09       	sbc	r31, r1
			pte[PTE_StHead] = 1;				/* Start head */
    d7e0:	10 82       	st	Z, r1
    d7e2:	31 96       	adiw	r30, 0x01	; 1
    d7e4:	81 e0       	ldi	r24, 0x01	; 1
			pte[PTE_StSec] = 1;					/* Start sector */
    d7e6:	80 83       	st	Z, r24
    d7e8:	31 96       	adiw	r30, 0x01	; 1
			pte[PTE_StCyl] = 0;					/* Start cylinder */
    d7ea:	80 83       	st	Z, r24
    d7ec:	31 96       	adiw	r30, 0x01	; 1
			pte[PTE_System] = sys;				/* System type */
    d7ee:	10 82       	st	Z, r1
    d7f0:	31 96       	adiw	r30, 0x01	; 1
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS is incorrect) */
    d7f2:	10 83       	st	Z, r17
    d7f4:	89 81       	ldd	r24, Y+1	; 0x01
    d7f6:	9a 81       	ldd	r25, Y+2	; 0x02
    d7f8:	ab 81       	ldd	r26, Y+3	; 0x03
    d7fa:	bc 81       	ldd	r27, Y+4	; 0x04
    d7fc:	2c 89       	ldd	r18, Y+20	; 0x14
    d7fe:	3d 89       	ldd	r19, Y+21	; 0x15
    d800:	4e 89       	ldd	r20, Y+22	; 0x16
    d802:	5f 89       	ldd	r21, Y+23	; 0x17
    d804:	28 0f       	add	r18, r24
    d806:	39 1f       	adc	r19, r25
    d808:	4a 1f       	adc	r20, r26
    d80a:	5b 1f       	adc	r21, r27
    d80c:	ca 01       	movw	r24, r20
    d80e:	b9 01       	movw	r22, r18
    d810:	21 ec       	ldi	r18, 0xC1	; 193
    d812:	3e e3       	ldi	r19, 0x3E	; 62
    d814:	40 e0       	ldi	r20, 0x00	; 0
    d816:	50 e0       	ldi	r21, 0x00	; 0
    d818:	0e 94 22 e9 	call	0x1d244	; 0x1d244 <__udivmodsi4>
			pte[PTE_EdHead] = 254;				/* End head */
    d81c:	f6 01       	movw	r30, r12
    d81e:	ed 53       	subi	r30, 0x3D	; 61
    d820:	fe 4f       	sbci	r31, 0xFE	; 254
    d822:	8e ef       	ldi	r24, 0xFE	; 254
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
    d824:	80 83       	st	Z, r24
    d826:	31 96       	adiw	r30, 0x01	; 1
    d828:	da 01       	movw	r26, r20
    d82a:	c9 01       	movw	r24, r18
    d82c:	32 e0       	ldi	r19, 0x02	; 2
    d82e:	b6 95       	lsr	r27
    d830:	a7 95       	ror	r26
    d832:	97 95       	ror	r25
    d834:	87 95       	ror	r24
    d836:	3a 95       	dec	r19
    d838:	d1 f7       	brne	.-12     	; 0xd82e <f_mkfs+0xa48>
    d83a:	8f 63       	ori	r24, 0x3F	; 63
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
    d83c:	80 83       	st	Z, r24
    d83e:	31 96       	adiw	r30, 0x01	; 1
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
    d840:	20 83       	st	Z, r18
    d842:	4c 89       	ldd	r20, Y+20	; 0x14
    d844:	5d 89       	ldd	r21, Y+21	; 0x15
    d846:	6e 89       	ldd	r22, Y+22	; 0x16
    d848:	7f 89       	ldd	r23, Y+23	; 0x17
    d84a:	c6 01       	movw	r24, r12
    d84c:	8a 53       	subi	r24, 0x3A	; 58
    d84e:	9e 4f       	sbci	r25, 0xFE	; 254
    d850:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
    d854:	49 81       	ldd	r20, Y+1	; 0x01
    d856:	5a 81       	ldd	r21, Y+2	; 0x02
    d858:	6b 81       	ldd	r22, Y+3	; 0x03
    d85a:	7c 81       	ldd	r23, Y+4	; 0x04
    d85c:	c6 01       	movw	r24, r12
    d85e:	86 53       	subi	r24, 0x36	; 54
    d860:	9e 4f       	sbci	r25, 0xFE	; 254
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
    d862:	0e 94 cf 45 	call	0x8b9e	; 0x8b9e <st_dword>
    d866:	01 e0       	ldi	r16, 0x01	; 1
    d868:	10 e0       	ldi	r17, 0x00	; 0
    d86a:	20 e0       	ldi	r18, 0x00	; 0
    d86c:	30 e0       	ldi	r19, 0x00	; 0
    d86e:	a9 01       	movw	r20, r18
    d870:	b6 01       	movw	r22, r12
    d872:	82 2d       	mov	r24, r2
    d874:	c1 d0       	rcall	.+386    	; 0xd9f8 <disk_write>
    d876:	89 2b       	or	r24, r25
    d878:	09 f4       	brne	.+2      	; 0xd87c <f_mkfs+0xa96>
    d87a:	94 cf       	rjmp	.-216    	; 0xd7a4 <f_mkfs+0x9be>
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
	if (vol < 0) return FR_INVALID_DRIVE;
    d87c:	06 c0       	rjmp	.+12     	; 0xd88a <f_mkfs+0xaa4>
    d87e:	8b e0       	ldi	r24, 0x0B	; 11
	pdrv = LD2PD(vol);	/* Physical drive */
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
	if (stat & STA_NOINIT) return FR_NOT_READY;
    d880:	05 c0       	rjmp	.+10     	; 0xd88c <f_mkfs+0xaa6>
    d882:	83 e0       	ldi	r24, 0x03	; 3
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    d884:	03 c0       	rjmp	.+6      	; 0xd88c <f_mkfs+0xaa6>
    d886:	8a e0       	ldi	r24, 0x0A	; 10
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
    d888:	01 c0       	rjmp	.+2      	; 0xd88c <f_mkfs+0xaa6>
    d88a:	81 e0       	ldi	r24, 0x01	; 1
    d88c:	90 e0       	ldi	r25, 0x00	; 0
			if (fmt == FS_FAT16) {
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
					if (!au && (pau * 2) <= 64) {
						au = pau * 2; continue;		/* Adjust cluster size and retry */
					}
					if ((opt & FM_FAT32)) {
    d88e:	12 c0       	rjmp	.+36     	; 0xd8b4 <f_mkfs+0xace>
    d890:	ff 20       	and	r15, r15
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
    d892:	19 f0       	breq	.+6      	; 0xd89a <f_mkfs+0xab4>
    d894:	23 e0       	ldi	r18, 0x03	; 3
    d896:	2f 87       	std	Y+15, r18	; 0x0f
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
    d898:	c6 cb       	rjmp	.-2164   	; 0xd026 <f_mkfs+0x240>
    d89a:	81 38       	cpi	r24, 0x81	; 129
    d89c:	91 05       	cpc	r25, r1
    d89e:	a1 05       	cpc	r26, r1
    d8a0:	b1 05       	cpc	r27, r1
    d8a2:	08 f0       	brcs	.+2      	; 0xd8a6 <f_mkfs+0xac0>
    d8a4:	23 cb       	rjmp	.-2490   	; 0xceec <f_mkfs+0x106>
			if (fmt == FS_FAT16) {
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
					if (!au && (pau * 2) <= 64) {
						au = pau * 2; continue;		/* Adjust cluster size and retry */
					}
					if ((opt & FM_FAT32)) {
    d8a6:	24 cd       	rjmp	.-1464   	; 0xd2f0 <f_mkfs+0x50a>
    d8a8:	ff 20       	and	r15, r15
    d8aa:	09 f4       	brne	.+2      	; 0xd8ae <f_mkfs+0xac8>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
    d8ac:	1f cb       	rjmp	.-2498   	; 0xceec <f_mkfs+0x106>
    d8ae:	33 e0       	ldi	r19, 0x03	; 3
    d8b0:	3f 87       	std	Y+15, r19	; 0x0f
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;

	return FR_OK;
}
    d8b2:	b9 cb       	rjmp	.-2190   	; 0xd026 <f_mkfs+0x240>
    d8b4:	ce 5b       	subi	r28, 0xBE	; 190
    d8b6:	df 4f       	sbci	r29, 0xFF	; 255
    d8b8:	e2 e1       	ldi	r30, 0x12	; 18
    d8ba:	0c 94 ab e9 	jmp	0x1d356	; 0x1d356 <__epilogue_restores__>

0000d8be <ff_memalloc>:
MEMSPACE
void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d8be:	0c 94 f2 29 	jmp	0x53e4	; 0x53e4 <safemalloc>
}
    d8c2:	08 95       	ret

0000d8c4 <ff_memfree>:
MEMSPACE
void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	safefree(mblock);	/* Discard the memory block with POSIX API */
    d8c4:	0c 94 13 2a 	jmp	0x5426	; 0x5426 <safefree>
    d8c8:	08 95       	ret

0000d8ca <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
    d8ca:	80 38       	cpi	r24, 0x80	; 128
    d8cc:	91 05       	cpc	r25, r1
    d8ce:	18 f1       	brcs	.+70     	; 0xd916 <ff_convert+0x4c>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
    d8d0:	67 2b       	or	r22, r23
    d8d2:	61 f0       	breq	.+24     	; 0xd8ec <ff_convert+0x22>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
    d8d4:	8f 3f       	cpi	r24, 0xFF	; 255
    d8d6:	91 05       	cpc	r25, r1
    d8d8:	09 f0       	breq	.+2      	; 0xd8dc <ff_convert+0x12>
    d8da:	d8 f4       	brcc	.+54     	; 0xd912 <ff_convert+0x48>
    d8dc:	88 0f       	add	r24, r24
    d8de:	99 1f       	adc	r25, r25
    d8e0:	fc 01       	movw	r30, r24
    d8e2:	ef 57       	subi	r30, 0x7F	; 127
    d8e4:	fa 4f       	sbci	r31, 0xFA	; 250
    d8e6:	80 81       	ld	r24, Z
    d8e8:	91 81       	ldd	r25, Z+1	; 0x01
    d8ea:	08 95       	ret
    d8ec:	e1 e8       	ldi	r30, 0x81	; 129
    d8ee:	f6 e0       	ldi	r31, 0x06	; 6

	if (chr < 0x80) {	/* ASCII */
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
    d8f0:	20 e0       	ldi	r18, 0x00	; 0
    d8f2:	30 e0       	ldi	r19, 0x00	; 0
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
				if (chr == Tbl[c]) break;
    d8f4:	41 91       	ld	r20, Z+
    d8f6:	51 91       	ld	r21, Z+
    d8f8:	84 17       	cp	r24, r20
    d8fa:	95 07       	cpc	r25, r21
    d8fc:	29 f0       	breq	.+10     	; 0xd908 <ff_convert+0x3e>
	} else {
		if (dir) {		/* OEM code to Unicode */
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
    d8fe:	2f 5f       	subi	r18, 0xFF	; 255
    d900:	3f 4f       	sbci	r19, 0xFF	; 255
    d902:	20 38       	cpi	r18, 0x80	; 128
    d904:	31 05       	cpc	r19, r1
    d906:	b1 f7       	brne	.-20     	; 0xd8f4 <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
			}
			c = (c + 0x80) & 0xFF;
    d908:	c9 01       	movw	r24, r18
    d90a:	80 58       	subi	r24, 0x80	; 128
    d90c:	9f 4f       	sbci	r25, 0xFF	; 255
    d90e:	99 27       	eor	r25, r25
    d910:	08 95       	ret
	if (chr < 0x80) {	/* ASCII */
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
    d912:	80 e0       	ldi	r24, 0x00	; 0
    d914:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d916:	08 95       	ret

0000d918 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
    d918:	81 15       	cp	r24, r1
    d91a:	20 e1       	ldi	r18, 0x10	; 16
    d91c:	92 07       	cpc	r25, r18
    d91e:	18 f0       	brcs	.+6      	; 0xd926 <ff_wtoupper+0xe>
    d920:	a3 ed       	ldi	r26, 0xD3	; 211
    d922:	b3 e0       	ldi	r27, 0x03	; 3
    d924:	02 c0       	rjmp	.+4      	; 0xd92a <ff_wtoupper+0x12>
    d926:	af e8       	ldi	r26, 0x8F	; 143
    d928:	b4 e0       	ldi	r27, 0x04	; 4
	for (;;) {
		bc = *p++;								/* Get block base */
    d92a:	4d 91       	ld	r20, X+
    d92c:	5c 91       	ld	r21, X
    d92e:	11 97       	sbiw	r26, 0x01	; 1
		if (!bc || chr < bc) break;
    d930:	41 15       	cp	r20, r1
    d932:	51 05       	cpc	r21, r1
    d934:	09 f4       	brne	.+2      	; 0xd938 <ff_wtoupper+0x20>
    d936:	43 c0       	rjmp	.+134    	; 0xd9be <ff_wtoupper+0xa6>
    d938:	84 17       	cp	r24, r20
    d93a:	95 07       	cpc	r25, r21
    d93c:	08 f4       	brcc	.+2      	; 0xd940 <ff_wtoupper+0x28>
    d93e:	3f c0       	rjmp	.+126    	; 0xd9be <ff_wtoupper+0xa6>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d940:	14 96       	adiw	r26, 0x04	; 4
    d942:	fd 01       	movw	r30, r26
    d944:	32 97       	sbiw	r30, 0x02	; 2
    d946:	20 81       	ld	r18, Z
    d948:	31 81       	ldd	r19, Z+1	; 0x01
    d94a:	e3 2f       	mov	r30, r19
    d94c:	ff 27       	eor	r31, r31
    d94e:	33 27       	eor	r19, r19
		if (chr < bc + nc) {	/* In the block? */
    d950:	ba 01       	movw	r22, r20
    d952:	62 0f       	add	r22, r18
    d954:	73 1f       	adc	r23, r19
    d956:	86 17       	cp	r24, r22
    d958:	97 07       	cpc	r25, r23
    d95a:	48 f5       	brcc	.+82     	; 0xd9ae <ff_wtoupper+0x96>
			switch (cmd) {
    d95c:	e9 30       	cpi	r30, 0x09	; 9
    d95e:	f1 05       	cpc	r31, r1
    d960:	70 f5       	brcc	.+92     	; 0xd9be <ff_wtoupper+0xa6>
    d962:	ec 54       	subi	r30, 0x4C	; 76
    d964:	ff 4f       	sbci	r31, 0xFF	; 255
    d966:	0c 94 60 e9 	jmp	0x1d2c0	; 0x1d2c0 <__tablejump2__>
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
    d96a:	fc 01       	movw	r30, r24
    d96c:	e4 1b       	sub	r30, r20
    d96e:	f5 0b       	sbc	r31, r21
    d970:	ee 0f       	add	r30, r30
    d972:	ff 1f       	adc	r31, r31
    d974:	ea 0f       	add	r30, r26
    d976:	fb 1f       	adc	r31, r27
    d978:	80 81       	ld	r24, Z
    d97a:	91 81       	ldd	r25, Z+1	; 0x01
    d97c:	08 95       	ret
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
    d97e:	9c 01       	movw	r18, r24
    d980:	24 1b       	sub	r18, r20
    d982:	35 0b       	sbc	r19, r21
    d984:	21 70       	andi	r18, 0x01	; 1
    d986:	33 27       	eor	r19, r19
    d988:	82 1b       	sub	r24, r18
    d98a:	93 0b       	sbc	r25, r19
    d98c:	08 95       	ret
			case 2: chr -= 16; break;				/* Shift -16 */
    d98e:	40 97       	sbiw	r24, 0x10	; 16
    d990:	08 95       	ret
			case 3:	chr -= 32; break;				/* Shift -32 */
    d992:	80 97       	sbiw	r24, 0x20	; 32
    d994:	08 95       	ret
			case 4:	chr -= 48; break;				/* Shift -48 */
    d996:	c0 97       	sbiw	r24, 0x30	; 48
    d998:	08 95       	ret
			case 5:	chr -= 26; break;				/* Shift -26 */
    d99a:	4a 97       	sbiw	r24, 0x1a	; 26
    d99c:	08 95       	ret
			case 6:	chr += 8; break;				/* Shift +8 */
    d99e:	08 96       	adiw	r24, 0x08	; 8
    d9a0:	08 95       	ret
			case 7: chr -= 80; break;				/* Shift -80 */
    d9a2:	80 55       	subi	r24, 0x50	; 80
    d9a4:	91 09       	sbc	r25, r1
    d9a6:	08 95       	ret
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
    d9a8:	80 56       	subi	r24, 0x60	; 96
    d9aa:	9c 41       	sbci	r25, 0x1C	; 28
    d9ac:	08 95       	ret
			}
			break;
		}
		if (!cmd) p += nc;
    d9ae:	ef 2b       	or	r30, r31
    d9b0:	09 f0       	breq	.+2      	; 0xd9b4 <ff_wtoupper+0x9c>
    d9b2:	bb cf       	rjmp	.-138    	; 0xd92a <ff_wtoupper+0x12>
    d9b4:	22 0f       	add	r18, r18
    d9b6:	33 1f       	adc	r19, r19
    d9b8:	a2 0f       	add	r26, r18
    d9ba:	b3 1f       	adc	r27, r19
    d9bc:	b6 cf       	rjmp	.-148    	; 0xd92a <ff_wtoupper+0x12>
	}

	return chr;
}
    d9be:	08 95       	ret

0000d9c0 <disk_status>:

DSTATUS disk_status (
    BYTE pdrv       /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv) {
    d9c0:	81 11       	cpse	r24, r1
    case DRV_CFC :
        return cf_disk_status();
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_status();
    d9c2:	02 c0       	rjmp	.+4      	; 0xd9c8 <disk_status+0x8>
    d9c4:	7f c1       	rjmp	.+766    	; 0xdcc4 <mmc_disk_status>
#endif
    }
    return STA_NOINIT;
    d9c6:	08 95       	ret
}
    d9c8:	81 e0       	ldi	r24, 0x01	; 1
    d9ca:	08 95       	ret

0000d9cc <disk_initialize>:

DSTATUS disk_initialize (
    BYTE pdrv               /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv) {
    d9cc:	81 11       	cpse	r24, r1
    case DRV_CFC :
        return cf_disk_initialize();
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_initialize();
    d9ce:	02 c0       	rjmp	.+4      	; 0xd9d4 <disk_initialize+0x8>
    d9d0:	dc c0       	rjmp	.+440    	; 0xdb8a <mmc_disk_initialize>
#endif
    }
    return STA_NOINIT;
    d9d2:	08 95       	ret
}
    d9d4:	81 e0       	ldi	r24, 0x01	; 1
    d9d6:	08 95       	ret

0000d9d8 <disk_read>:
    BYTE pdrv,      /* Physical drive nmuber to identify the drive */
    BYTE *buff,     /* Data buffer to store read data */
    DWORD sector,   /* Sector address in LBA */
    UINT count      /* Number of sectors to read */
)
{
    d9d8:	0f 93       	push	r16
    d9da:	1f 93       	push	r17
    d9dc:	fb 01       	movw	r30, r22
    switch (pdrv) {
    d9de:	81 11       	cpse	r24, r1
    d9e0:	06 c0       	rjmp	.+12     	; 0xd9ee <disk_read+0x16>
    d9e2:	ba 01       	movw	r22, r20
    d9e4:	a9 01       	movw	r20, r18
    d9e6:	cf 01       	movw	r24, r30
    case DRV_CFC :
        return cf_disk_read(buff, sector, count);
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_read(buff, sector, count);
    d9e8:	98 01       	movw	r18, r16
    d9ea:	6f d1       	rcall	.+734    	; 0xdcca <mmc_disk_read>
    d9ec:	02 c0       	rjmp	.+4      	; 0xd9f2 <disk_read+0x1a>
#endif
    }
    return RES_PARERR;
    d9ee:	84 e0       	ldi	r24, 0x04	; 4
    d9f0:	90 e0       	ldi	r25, 0x00	; 0
}
    d9f2:	1f 91       	pop	r17
    d9f4:	0f 91       	pop	r16
    d9f6:	08 95       	ret

0000d9f8 <disk_write>:
    BYTE pdrv,          /* Physical drive nmuber to identify the drive */
    const BYTE *buff,   /* Data to be written */
    DWORD sector,       /* Sector address in LBA */
    UINT count          /* Number of sectors to write */
)
{
    d9f8:	0f 93       	push	r16
    d9fa:	1f 93       	push	r17
    d9fc:	fb 01       	movw	r30, r22
    switch (pdrv) {
    d9fe:	81 11       	cpse	r24, r1
    da00:	06 c0       	rjmp	.+12     	; 0xda0e <disk_write+0x16>
    da02:	ba 01       	movw	r22, r20
    da04:	a9 01       	movw	r20, r18
    da06:	cf 01       	movw	r24, r30
    case DRV_CFC :
        return cf_disk_write(buff, sector, count);
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_write(buff, sector, count);
    da08:	98 01       	movw	r18, r16
    da0a:	a5 d1       	rcall	.+842    	; 0xdd56 <mmc_disk_write>
    da0c:	02 c0       	rjmp	.+4      	; 0xda12 <disk_write+0x1a>
#endif
    }
    return RES_PARERR;
    da0e:	84 e0       	ldi	r24, 0x04	; 4
    da10:	90 e0       	ldi	r25, 0x00	; 0
}
    da12:	1f 91       	pop	r17
    da14:	0f 91       	pop	r16
    da16:	08 95       	ret

0000da18 <disk_ioctl>:
DRESULT disk_ioctl (
    BYTE pdrv,      /* Physical drive nmuber (0..) */
    BYTE cmd,       /* Control code */
    void *buff      /* Buffer to send/receive control data */
)
{
    da18:	96 2f       	mov	r25, r22
    switch (pdrv) {
    da1a:	81 11       	cpse	r24, r1
    da1c:	04 c0       	rjmp	.+8      	; 0xda26 <disk_ioctl+0xe>
    da1e:	ba 01       	movw	r22, r20
    case DRV_CFC :
        return cf_disk_ioctl(cmd, buff);
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_ioctl(cmd, buff);
    da20:	89 2f       	mov	r24, r25
    da22:	0c c2       	rjmp	.+1048   	; 0xde3c <mmc_disk_ioctl>
#endif
    }
    return RES_PARERR;
    da24:	08 95       	ret
    da26:	84 e0       	ldi	r24, 0x04	; 4
}
    da28:	90 e0       	ldi	r25, 0x00	; 0
    da2a:	08 95       	ret

0000da2c <xchg_spi>:
///@return Data read
static
BYTE xchg_spi (     /* Returns received data */
    BYTE dat        /* Data to be sent */
)
{
    da2c:	09 c5       	rjmp	.+2578   	; 0xe440 <mmc_spi_TXRX>
    da2e:	08 95       	ret

0000da30 <deselect>:
    da30:	de d4       	rcall	.+2492   	; 0xe3ee <mmc_spi_end>
    da32:	8f ef       	ldi	r24, 0xFF	; 255
    da34:	fb df       	rcall	.-10     	; 0xda2c <xchg_spi>
    da36:	8f ef       	ldi	r24, 0xFF	; 255
    da38:	f9 cf       	rjmp	.-14     	; 0xda2c <xchg_spi>
    da3a:	08 95       	ret

0000da3c <rcvr_datablock>:
    da3c:	0f 93       	push	r16
    da3e:	1f 93       	push	r17
    da40:	cf 93       	push	r28
    da42:	df 93       	push	r29
    da44:	ec 01       	movw	r28, r24
    da46:	8b 01       	movw	r16, r22
    da48:	88 ee       	ldi	r24, 0xE8	; 232
    da4a:	93 e0       	ldi	r25, 0x03	; 3
    da4c:	fc d4       	rcall	.+2552   	; 0xe446 <mmc_set_ms_timeout>
    da4e:	8f ef       	ldi	r24, 0xFF	; 255
    da50:	f7 d4       	rcall	.+2542   	; 0xe440 <mmc_spi_TXRX>
    da52:	8f 3f       	cpi	r24, 0xFF	; 255
    da54:	31 f4       	brne	.+12     	; 0xda62 <rcvr_datablock+0x26>
    da56:	fe d4       	rcall	.+2556   	; 0xe454 <mmc_test_timeout>
    da58:	89 2b       	or	r24, r25
    da5a:	c9 f3       	breq	.-14     	; 0xda4e <rcvr_datablock+0x12>
    da5c:	80 e0       	ldi	r24, 0x00	; 0
    da5e:	90 e0       	ldi	r25, 0x00	; 0
    da60:	0b c0       	rjmp	.+22     	; 0xda78 <rcvr_datablock+0x3c>
    da62:	8e 3f       	cpi	r24, 0xFE	; 254
    da64:	d9 f7       	brne	.-10     	; 0xda5c <rcvr_datablock+0x20>
    da66:	b8 01       	movw	r22, r16
    da68:	ce 01       	movw	r24, r28
    da6a:	e7 d4       	rcall	.+2510   	; 0xe43a <mmc_spi_RX_buffer>
    da6c:	8f ef       	ldi	r24, 0xFF	; 255
    da6e:	de df       	rcall	.-68     	; 0xda2c <xchg_spi>
    da70:	8f ef       	ldi	r24, 0xFF	; 255
    da72:	dc df       	rcall	.-72     	; 0xda2c <xchg_spi>
    da74:	81 e0       	ldi	r24, 0x01	; 1
    da76:	90 e0       	ldi	r25, 0x00	; 0
    da78:	df 91       	pop	r29
    da7a:	cf 91       	pop	r28
    da7c:	1f 91       	pop	r17
    da7e:	0f 91       	pop	r16
    da80:	08 95       	ret

0000da82 <xmit_datablock.part.2>:
    da82:	60 e0       	ldi	r22, 0x00	; 0
    da84:	72 e0       	ldi	r23, 0x02	; 2
    da86:	d6 d4       	rcall	.+2476   	; 0xe434 <mmc_spi_TX_buffer>
    da88:	8f ef       	ldi	r24, 0xFF	; 255
    da8a:	d0 df       	rcall	.-96     	; 0xda2c <xchg_spi>
    da8c:	8f ef       	ldi	r24, 0xFF	; 255
    da8e:	ce df       	rcall	.-100    	; 0xda2c <xchg_spi>
    da90:	8f ef       	ldi	r24, 0xFF	; 255
    da92:	d6 d4       	rcall	.+2476   	; 0xe440 <mmc_spi_TXRX>
    da94:	28 2f       	mov	r18, r24
    da96:	2f 71       	andi	r18, 0x1F	; 31
    da98:	81 e0       	ldi	r24, 0x01	; 1
    da9a:	90 e0       	ldi	r25, 0x00	; 0
    da9c:	25 30       	cpi	r18, 0x05	; 5
    da9e:	11 f0       	breq	.+4      	; 0xdaa4 <xmit_datablock.part.2+0x22>
    daa0:	80 e0       	ldi	r24, 0x00	; 0
    daa2:	90 e0       	ldi	r25, 0x00	; 0
    daa4:	08 95       	ret

0000daa6 <wait_ready>:
    daa6:	cf 93       	push	r28
    daa8:	ce d4       	rcall	.+2460   	; 0xe446 <mmc_set_ms_timeout>
    daaa:	8f ef       	ldi	r24, 0xFF	; 255
    daac:	c9 d4       	rcall	.+2450   	; 0xe440 <mmc_spi_TXRX>
    daae:	c8 2f       	mov	r28, r24
    dab0:	8f 3f       	cpi	r24, 0xFF	; 255
    dab2:	19 f0       	breq	.+6      	; 0xdaba <wait_ready+0x14>
    dab4:	cf d4       	rcall	.+2462   	; 0xe454 <mmc_test_timeout>
    dab6:	89 2b       	or	r24, r25
    dab8:	c1 f3       	breq	.-16     	; 0xdaaa <wait_ready+0x4>
    daba:	81 e0       	ldi	r24, 0x01	; 1
    dabc:	90 e0       	ldi	r25, 0x00	; 0
    dabe:	cf 3f       	cpi	r28, 0xFF	; 255
    dac0:	11 f0       	breq	.+4      	; 0xdac6 <wait_ready+0x20>
    dac2:	80 e0       	ldi	r24, 0x00	; 0
    dac4:	90 e0       	ldi	r25, 0x00	; 0
    dac6:	cf 91       	pop	r28
    dac8:	08 95       	ret

0000daca <select>:
    daca:	cf 93       	push	r28
    dacc:	df 93       	push	r29
    dace:	82 d4       	rcall	.+2308   	; 0xe3d4 <mmc_spi_begin>
    dad0:	8f ef       	ldi	r24, 0xFF	; 255
    dad2:	ac df       	rcall	.-168    	; 0xda2c <xchg_spi>
    dad4:	88 ee       	ldi	r24, 0xE8	; 232
    dad6:	93 e0       	ldi	r25, 0x03	; 3
    dad8:	e6 df       	rcall	.-52     	; 0xdaa6 <wait_ready>
    dada:	ec 01       	movw	r28, r24
    dadc:	89 2b       	or	r24, r25
    dade:	61 f4       	brne	.+24     	; 0xdaf8 <select+0x2e>
    dae0:	8c eb       	ldi	r24, 0xBC	; 188
    dae2:	97 e0       	ldi	r25, 0x07	; 7
    dae4:	1f 92       	push	r1
    dae6:	9f 93       	push	r25
    dae8:	8f 93       	push	r24
    daea:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    daee:	a0 df       	rcall	.-192    	; 0xda30 <deselect>
    daf0:	0f 90       	pop	r0
    daf2:	0f 90       	pop	r0
    daf4:	0f 90       	pop	r0
    daf6:	02 c0       	rjmp	.+4      	; 0xdafc <select+0x32>
    daf8:	c1 e0       	ldi	r28, 0x01	; 1
    dafa:	d0 e0       	ldi	r29, 0x00	; 0
    dafc:	ce 01       	movw	r24, r28
    dafe:	df 91       	pop	r29
    db00:	cf 91       	pop	r28
    db02:	08 95       	ret

0000db04 <send_cmd>:
    db04:	ff 92       	push	r15
    db06:	0f 93       	push	r16
    db08:	1f 93       	push	r17
    db0a:	cf 93       	push	r28
    db0c:	df 93       	push	r29
    db0e:	c8 2f       	mov	r28, r24
    db10:	d4 2f       	mov	r29, r20
    db12:	15 2f       	mov	r17, r21
    db14:	06 2f       	mov	r16, r22
    db16:	f7 2e       	mov	r15, r23
    db18:	87 ff       	sbrs	r24, 7
    db1a:	08 c0       	rjmp	.+16     	; 0xdb2c <send_cmd+0x28>
    db1c:	40 e0       	ldi	r20, 0x00	; 0
    db1e:	50 e0       	ldi	r21, 0x00	; 0
    db20:	ba 01       	movw	r22, r20
    db22:	87 e3       	ldi	r24, 0x37	; 55
    db24:	ef df       	rcall	.-34     	; 0xdb04 <send_cmd>
    db26:	82 30       	cpi	r24, 0x02	; 2
    db28:	58 f5       	brcc	.+86     	; 0xdb80 <send_cmd+0x7c>
    db2a:	cf 77       	andi	r28, 0x7F	; 127
    db2c:	cc 30       	cpi	r28, 0x0C	; 12
    db2e:	71 f4       	brne	.+28     	; 0xdb4c <send_cmd+0x48>
    db30:	8c 2f       	mov	r24, r28
    db32:	80 64       	ori	r24, 0x40	; 64
    db34:	7b df       	rcall	.-266    	; 0xda2c <xchg_spi>
    db36:	8f 2d       	mov	r24, r15
    db38:	79 df       	rcall	.-270    	; 0xda2c <xchg_spi>
    db3a:	80 2f       	mov	r24, r16
    db3c:	77 df       	rcall	.-274    	; 0xda2c <xchg_spi>
    db3e:	81 2f       	mov	r24, r17
    db40:	75 df       	rcall	.-278    	; 0xda2c <xchg_spi>
    db42:	8d 2f       	mov	r24, r29
    db44:	73 df       	rcall	.-282    	; 0xda2c <xchg_spi>
    db46:	cc 23       	and	r28, r28
    db48:	c9 f0       	breq	.+50     	; 0xdb7c <send_cmd+0x78>
    db4a:	06 c0       	rjmp	.+12     	; 0xdb58 <send_cmd+0x54>
    db4c:	71 df       	rcall	.-286    	; 0xda30 <deselect>
    db4e:	bd df       	rcall	.-134    	; 0xdaca <select>
    db50:	89 2b       	or	r24, r25
    db52:	71 f7       	brne	.-36     	; 0xdb30 <send_cmd+0x2c>
    db54:	8f ef       	ldi	r24, 0xFF	; 255
    db56:	14 c0       	rjmp	.+40     	; 0xdb80 <send_cmd+0x7c>
    db58:	c8 30       	cpi	r28, 0x08	; 8
    db5a:	11 f4       	brne	.+4      	; 0xdb60 <send_cmd+0x5c>
    db5c:	87 e8       	ldi	r24, 0x87	; 135
    db5e:	01 c0       	rjmp	.+2      	; 0xdb62 <send_cmd+0x5e>
    db60:	81 e0       	ldi	r24, 0x01	; 1
    db62:	64 df       	rcall	.-312    	; 0xda2c <xchg_spi>
    db64:	cc 30       	cpi	r28, 0x0C	; 12
    db66:	11 f4       	brne	.+4      	; 0xdb6c <send_cmd+0x68>
    db68:	8f ef       	ldi	r24, 0xFF	; 255
    db6a:	60 df       	rcall	.-320    	; 0xda2c <xchg_spi>
    db6c:	ca e0       	ldi	r28, 0x0A	; 10
    db6e:	8f ef       	ldi	r24, 0xFF	; 255
    db70:	67 d4       	rcall	.+2254   	; 0xe440 <mmc_spi_TXRX>
    db72:	87 ff       	sbrs	r24, 7
    db74:	05 c0       	rjmp	.+10     	; 0xdb80 <send_cmd+0x7c>
    db76:	c1 50       	subi	r28, 0x01	; 1
    db78:	d1 f7       	brne	.-12     	; 0xdb6e <send_cmd+0x6a>
    db7a:	02 c0       	rjmp	.+4      	; 0xdb80 <send_cmd+0x7c>
    db7c:	85 e9       	ldi	r24, 0x95	; 149
    db7e:	f5 cf       	rjmp	.-22     	; 0xdb6a <send_cmd+0x66>
    db80:	cd b7       	in	r28, 0x3d	; 61
    db82:	de b7       	in	r29, 0x3e	; 62
    db84:	e5 e0       	ldi	r30, 0x05	; 5
    db86:	0c 94 b8 e9 	jmp	0x1d370	; 0x1d370 <__epilogue_restores__+0x1a>

0000db8a <mmc_disk_initialize>:
    db8a:	a4 e0       	ldi	r26, 0x04	; 4
    db8c:	b0 e0       	ldi	r27, 0x00	; 0
    db8e:	eb ec       	ldi	r30, 0xCB	; 203
    db90:	fd e6       	ldi	r31, 0x6D	; 109
    db92:	0c 94 99 e9 	jmp	0x1d332	; 0x1d332 <__prologue_saves__+0x14>
    db96:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Stat>
    db9a:	81 fd       	sbrc	r24, 1
    db9c:	8d c0       	rjmp	.+282    	; 0xdcb8 <mmc_disk_initialize+0x12e>
    db9e:	2b d4       	rcall	.+2134   	; 0xe3f6 <mmc_slow>
    dba0:	1a e0       	ldi	r17, 0x0A	; 10
    dba2:	8f ef       	ldi	r24, 0xFF	; 255
    dba4:	43 df       	rcall	.-378    	; 0xda2c <xchg_spi>
    dba6:	11 50       	subi	r17, 0x01	; 1
    dba8:	e1 f7       	brne	.-8      	; 0xdba2 <mmc_disk_initialize+0x18>
    dbaa:	40 e0       	ldi	r20, 0x00	; 0
    dbac:	50 e0       	ldi	r21, 0x00	; 0
    dbae:	ba 01       	movw	r22, r20
    dbb0:	80 e0       	ldi	r24, 0x00	; 0
    dbb2:	a8 df       	rcall	.-176    	; 0xdb04 <send_cmd>
    dbb4:	81 30       	cpi	r24, 0x01	; 1
    dbb6:	09 f0       	breq	.+2      	; 0xdbba <mmc_disk_initialize+0x30>
    dbb8:	6f c0       	rjmp	.+222    	; 0xdc98 <mmc_disk_initialize+0x10e>
    dbba:	80 ed       	ldi	r24, 0xD0	; 208
    dbbc:	97 e0       	ldi	r25, 0x07	; 7
    dbbe:	43 d4       	rcall	.+2182   	; 0xe446 <mmc_set_ms_timeout>
    dbc0:	4a ea       	ldi	r20, 0xAA	; 170
    dbc2:	51 e0       	ldi	r21, 0x01	; 1
    dbc4:	60 e0       	ldi	r22, 0x00	; 0
    dbc6:	70 e0       	ldi	r23, 0x00	; 0
    dbc8:	88 e0       	ldi	r24, 0x08	; 8
    dbca:	9c df       	rcall	.-200    	; 0xdb04 <send_cmd>
    dbcc:	81 30       	cpi	r24, 0x01	; 1
    dbce:	09 f0       	breq	.+2      	; 0xdbd2 <mmc_disk_initialize+0x48>
    dbd0:	3d c0       	rjmp	.+122    	; 0xdc4c <mmc_disk_initialize+0xc2>
    dbd2:	8e 01       	movw	r16, r28
    dbd4:	0f 5f       	subi	r16, 0xFF	; 255
    dbd6:	1f 4f       	sbci	r17, 0xFF	; 255
    dbd8:	6e 01       	movw	r12, r28
    dbda:	85 e0       	ldi	r24, 0x05	; 5
    dbdc:	c8 0e       	add	r12, r24
    dbde:	d1 1c       	adc	r13, r1
    dbe0:	78 01       	movw	r14, r16
    dbe2:	8f ef       	ldi	r24, 0xFF	; 255
    dbe4:	2d d4       	rcall	.+2138   	; 0xe440 <mmc_spi_TXRX>
    dbe6:	f7 01       	movw	r30, r14
    dbe8:	81 93       	st	Z+, r24
    dbea:	7f 01       	movw	r14, r30
    dbec:	ce 16       	cp	r12, r30
    dbee:	df 06       	cpc	r13, r31
    dbf0:	c1 f7       	brne	.-16     	; 0xdbe2 <mmc_disk_initialize+0x58>
    dbf2:	8b 81       	ldd	r24, Y+3	; 0x03
    dbf4:	81 30       	cpi	r24, 0x01	; 1
    dbf6:	09 f0       	breq	.+2      	; 0xdbfa <mmc_disk_initialize+0x70>
    dbf8:	4f c0       	rjmp	.+158    	; 0xdc98 <mmc_disk_initialize+0x10e>
    dbfa:	8c 81       	ldd	r24, Y+4	; 0x04
    dbfc:	8a 3a       	cpi	r24, 0xAA	; 170
    dbfe:	09 f0       	breq	.+2      	; 0xdc02 <mmc_disk_initialize+0x78>
    dc00:	4b c0       	rjmp	.+150    	; 0xdc98 <mmc_disk_initialize+0x10e>
    dc02:	28 d4       	rcall	.+2128   	; 0xe454 <mmc_test_timeout>
    dc04:	89 2b       	or	r24, r25
    dc06:	29 f0       	breq	.+10     	; 0xdc12 <mmc_disk_initialize+0x88>
    dc08:	25 d4       	rcall	.+2122   	; 0xe454 <mmc_test_timeout>
    dc0a:	89 2b       	or	r24, r25
    dc0c:	09 f0       	breq	.+2      	; 0xdc10 <mmc_disk_initialize+0x86>
    dc0e:	44 c0       	rjmp	.+136    	; 0xdc98 <mmc_disk_initialize+0x10e>
    dc10:	09 c0       	rjmp	.+18     	; 0xdc24 <mmc_disk_initialize+0x9a>
    dc12:	40 e0       	ldi	r20, 0x00	; 0
    dc14:	50 e0       	ldi	r21, 0x00	; 0
    dc16:	60 e0       	ldi	r22, 0x00	; 0
    dc18:	70 e4       	ldi	r23, 0x40	; 64
    dc1a:	89 ea       	ldi	r24, 0xA9	; 169
    dc1c:	73 df       	rcall	.-282    	; 0xdb04 <send_cmd>
    dc1e:	81 11       	cpse	r24, r1
    dc20:	f0 cf       	rjmp	.-32     	; 0xdc02 <mmc_disk_initialize+0x78>
    dc22:	f2 cf       	rjmp	.-28     	; 0xdc08 <mmc_disk_initialize+0x7e>
    dc24:	40 e0       	ldi	r20, 0x00	; 0
    dc26:	50 e0       	ldi	r21, 0x00	; 0
    dc28:	ba 01       	movw	r22, r20
    dc2a:	8a e3       	ldi	r24, 0x3A	; 58
    dc2c:	6b df       	rcall	.-298    	; 0xdb04 <send_cmd>
    dc2e:	81 11       	cpse	r24, r1
    dc30:	33 c0       	rjmp	.+102    	; 0xdc98 <mmc_disk_initialize+0x10e>
    dc32:	8f ef       	ldi	r24, 0xFF	; 255
    dc34:	05 d4       	rcall	.+2058   	; 0xe440 <mmc_spi_TXRX>
    dc36:	f8 01       	movw	r30, r16
    dc38:	81 93       	st	Z+, r24
    dc3a:	8f 01       	movw	r16, r30
    dc3c:	ce 16       	cp	r12, r30
    dc3e:	df 06       	cpc	r13, r31
    dc40:	c1 f7       	brne	.-16     	; 0xdc32 <mmc_disk_initialize+0xa8>
    dc42:	89 81       	ldd	r24, Y+1	; 0x01
    dc44:	86 fd       	sbrc	r24, 6
    dc46:	2a c0       	rjmp	.+84     	; 0xdc9c <mmc_disk_initialize+0x112>
    dc48:	14 e0       	ldi	r17, 0x04	; 4
    dc4a:	29 c0       	rjmp	.+82     	; 0xdc9e <mmc_disk_initialize+0x114>
    dc4c:	80 ed       	ldi	r24, 0xD0	; 208
    dc4e:	97 e0       	ldi	r25, 0x07	; 7
    dc50:	fa d3       	rcall	.+2036   	; 0xe446 <mmc_set_ms_timeout>
    dc52:	40 e0       	ldi	r20, 0x00	; 0
    dc54:	50 e0       	ldi	r21, 0x00	; 0
    dc56:	ba 01       	movw	r22, r20
    dc58:	89 ea       	ldi	r24, 0xA9	; 169
    dc5a:	54 df       	rcall	.-344    	; 0xdb04 <send_cmd>
    dc5c:	82 30       	cpi	r24, 0x02	; 2
    dc5e:	18 f0       	brcs	.+6      	; 0xdc66 <mmc_disk_initialize+0xdc>
    dc60:	11 e0       	ldi	r17, 0x01	; 1
    dc62:	01 e0       	ldi	r16, 0x01	; 1
    dc64:	02 c0       	rjmp	.+4      	; 0xdc6a <mmc_disk_initialize+0xe0>
    dc66:	12 e0       	ldi	r17, 0x02	; 2
    dc68:	09 ea       	ldi	r16, 0xA9	; 169
    dc6a:	f4 d3       	rcall	.+2024   	; 0xe454 <mmc_test_timeout>
    dc6c:	89 2b       	or	r24, r25
    dc6e:	21 f0       	breq	.+8      	; 0xdc78 <mmc_disk_initialize+0xee>
    dc70:	f1 d3       	rcall	.+2018   	; 0xe454 <mmc_test_timeout>
    dc72:	89 2b       	or	r24, r25
    dc74:	89 f4       	brne	.+34     	; 0xdc98 <mmc_disk_initialize+0x10e>
    dc76:	08 c0       	rjmp	.+16     	; 0xdc88 <mmc_disk_initialize+0xfe>
    dc78:	40 e0       	ldi	r20, 0x00	; 0
    dc7a:	50 e0       	ldi	r21, 0x00	; 0
    dc7c:	ba 01       	movw	r22, r20
    dc7e:	80 2f       	mov	r24, r16
    dc80:	41 df       	rcall	.-382    	; 0xdb04 <send_cmd>
    dc82:	81 11       	cpse	r24, r1
    dc84:	f2 cf       	rjmp	.-28     	; 0xdc6a <mmc_disk_initialize+0xe0>
    dc86:	f4 cf       	rjmp	.-24     	; 0xdc70 <mmc_disk_initialize+0xe6>
    dc88:	40 e0       	ldi	r20, 0x00	; 0
    dc8a:	52 e0       	ldi	r21, 0x02	; 2
    dc8c:	60 e0       	ldi	r22, 0x00	; 0
    dc8e:	70 e0       	ldi	r23, 0x00	; 0
    dc90:	80 e1       	ldi	r24, 0x10	; 16
    dc92:	38 df       	rcall	.-400    	; 0xdb04 <send_cmd>
    dc94:	88 23       	and	r24, r24
    dc96:	19 f0       	breq	.+6      	; 0xdc9e <mmc_disk_initialize+0x114>
    dc98:	10 e0       	ldi	r17, 0x00	; 0
    dc9a:	01 c0       	rjmp	.+2      	; 0xdc9e <mmc_disk_initialize+0x114>
    dc9c:	1c e0       	ldi	r17, 0x0C	; 12
    dc9e:	10 93 74 18 	sts	0x1874, r17	; 0x801874 <CardType>
    dca2:	c6 de       	rcall	.-628    	; 0xda30 <deselect>
    dca4:	11 23       	and	r17, r17
    dca6:	39 f0       	breq	.+14     	; 0xdcb6 <mmc_disk_initialize+0x12c>
    dca8:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Stat>
    dcac:	8e 7f       	andi	r24, 0xFE	; 254
    dcae:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <Stat>
    dcb2:	b3 d3       	rcall	.+1894   	; 0xe41a <mmc_fast>
    dcb4:	01 c0       	rjmp	.+2      	; 0xdcb8 <mmc_disk_initialize+0x12e>
    dcb6:	92 d4       	rcall	.+2340   	; 0xe5dc <mmc_power_off>
    dcb8:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Stat>
    dcbc:	24 96       	adiw	r28, 0x04	; 4
    dcbe:	e8 e0       	ldi	r30, 0x08	; 8
    dcc0:	0c 94 b5 e9 	jmp	0x1d36a	; 0x1d36a <__epilogue_restores__+0x14>

0000dcc4 <mmc_disk_status>:
    dcc4:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Stat>
    dcc8:	08 95       	ret

0000dcca <mmc_disk_read>:
    dcca:	ef 92       	push	r14
    dccc:	ff 92       	push	r15
    dcce:	1f 93       	push	r17
    dcd0:	cf 93       	push	r28
    dcd2:	df 93       	push	r29
    dcd4:	7c 01       	movw	r14, r24
    dcd6:	e9 01       	movw	r28, r18
    dcd8:	20 97       	sbiw	r28, 0x00	; 0
    dcda:	19 f4       	brne	.+6      	; 0xdce2 <mmc_disk_read+0x18>
    dcdc:	a9 de       	rcall	.-686    	; 0xda30 <deselect>
    dcde:	84 e0       	ldi	r24, 0x04	; 4
    dce0:	06 c0       	rjmp	.+12     	; 0xdcee <mmc_disk_read+0x24>
    dce2:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Stat>
    dce6:	80 ff       	sbrs	r24, 0
    dce8:	04 c0       	rjmp	.+8      	; 0xdcf2 <mmc_disk_read+0x28>
    dcea:	a2 de       	rcall	.-700    	; 0xda30 <deselect>
    dcec:	83 e0       	ldi	r24, 0x03	; 3
    dcee:	90 e0       	ldi	r25, 0x00	; 0
    dcf0:	2c c0       	rjmp	.+88     	; 0xdd4a <mmc_disk_read+0x80>
    dcf2:	80 91 74 18 	lds	r24, 0x1874	; 0x801874 <CardType>
    dcf6:	83 fd       	sbrc	r24, 3
    dcf8:	07 c0       	rjmp	.+14     	; 0xdd08 <mmc_disk_read+0x3e>
    dcfa:	89 e0       	ldi	r24, 0x09	; 9
    dcfc:	44 0f       	add	r20, r20
    dcfe:	55 1f       	adc	r21, r21
    dd00:	66 1f       	adc	r22, r22
    dd02:	77 1f       	adc	r23, r23
    dd04:	8a 95       	dec	r24
    dd06:	d1 f7       	brne	.-12     	; 0xdcfc <mmc_disk_read+0x32>
    dd08:	c2 30       	cpi	r28, 0x02	; 2
    dd0a:	d1 05       	cpc	r29, r1
    dd0c:	10 f4       	brcc	.+4      	; 0xdd12 <mmc_disk_read+0x48>
    dd0e:	11 e1       	ldi	r17, 0x11	; 17
    dd10:	01 c0       	rjmp	.+2      	; 0xdd14 <mmc_disk_read+0x4a>
    dd12:	12 e1       	ldi	r17, 0x12	; 18
    dd14:	81 2f       	mov	r24, r17
    dd16:	f6 de       	rcall	.-532    	; 0xdb04 <send_cmd>
    dd18:	81 11       	cpse	r24, r1
    dd1a:	11 c0       	rjmp	.+34     	; 0xdd3e <mmc_disk_read+0x74>
    dd1c:	60 e0       	ldi	r22, 0x00	; 0
    dd1e:	72 e0       	ldi	r23, 0x02	; 2
    dd20:	c7 01       	movw	r24, r14
    dd22:	8c de       	rcall	.-744    	; 0xda3c <rcvr_datablock>
    dd24:	89 2b       	or	r24, r25
    dd26:	21 f0       	breq	.+8      	; 0xdd30 <mmc_disk_read+0x66>
    dd28:	8e ef       	ldi	r24, 0xFE	; 254
    dd2a:	f8 1a       	sub	r15, r24
    dd2c:	21 97       	sbiw	r28, 0x01	; 1
    dd2e:	b1 f7       	brne	.-20     	; 0xdd1c <mmc_disk_read+0x52>
    dd30:	12 31       	cpi	r17, 0x12	; 18
    dd32:	29 f4       	brne	.+10     	; 0xdd3e <mmc_disk_read+0x74>
    dd34:	40 e0       	ldi	r20, 0x00	; 0
    dd36:	50 e0       	ldi	r21, 0x00	; 0
    dd38:	ba 01       	movw	r22, r20
    dd3a:	8c e0       	ldi	r24, 0x0C	; 12
    dd3c:	e3 de       	rcall	.-570    	; 0xdb04 <send_cmd>
    dd3e:	78 de       	rcall	.-784    	; 0xda30 <deselect>
    dd40:	81 e0       	ldi	r24, 0x01	; 1
    dd42:	90 e0       	ldi	r25, 0x00	; 0
    dd44:	cd 2b       	or	r28, r29
    dd46:	09 f4       	brne	.+2      	; 0xdd4a <mmc_disk_read+0x80>
    dd48:	80 e0       	ldi	r24, 0x00	; 0
    dd4a:	df 91       	pop	r29
    dd4c:	cf 91       	pop	r28
    dd4e:	1f 91       	pop	r17
    dd50:	ff 90       	pop	r15
    dd52:	ef 90       	pop	r14
    dd54:	08 95       	ret

0000dd56 <mmc_disk_write>:
    dd56:	a0 e0       	ldi	r26, 0x00	; 0
    dd58:	b0 e0       	ldi	r27, 0x00	; 0
    dd5a:	e1 eb       	ldi	r30, 0xB1	; 177
    dd5c:	fe e6       	ldi	r31, 0x6E	; 110
    dd5e:	0c 94 99 e9 	jmp	0x1d332	; 0x1d332 <__prologue_saves__+0x14>
    dd62:	8c 01       	movw	r16, r24
    dd64:	6a 01       	movw	r12, r20
    dd66:	7b 01       	movw	r14, r22
    dd68:	e9 01       	movw	r28, r18
    dd6a:	20 97       	sbiw	r28, 0x00	; 0
    dd6c:	19 f4       	brne	.+6      	; 0xdd74 <mmc_disk_write+0x1e>
    dd6e:	60 de       	rcall	.-832    	; 0xda30 <deselect>
    dd70:	84 e0       	ldi	r24, 0x04	; 4
    dd72:	06 c0       	rjmp	.+12     	; 0xdd80 <mmc_disk_write+0x2a>
    dd74:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Stat>
    dd78:	80 ff       	sbrs	r24, 0
    dd7a:	04 c0       	rjmp	.+8      	; 0xdd84 <mmc_disk_write+0x2e>
    dd7c:	59 de       	rcall	.-846    	; 0xda30 <deselect>
    dd7e:	83 e0       	ldi	r24, 0x03	; 3
    dd80:	90 e0       	ldi	r25, 0x00	; 0
    dd82:	57 c0       	rjmp	.+174    	; 0xde32 <mmc_disk_write+0xdc>
    dd84:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Stat>
    dd88:	82 ff       	sbrs	r24, 2
    dd8a:	03 c0       	rjmp	.+6      	; 0xdd92 <mmc_disk_write+0x3c>
    dd8c:	51 de       	rcall	.-862    	; 0xda30 <deselect>
    dd8e:	82 e0       	ldi	r24, 0x02	; 2
    dd90:	f7 cf       	rjmp	.-18     	; 0xdd80 <mmc_disk_write+0x2a>
    dd92:	80 91 74 18 	lds	r24, 0x1874	; 0x801874 <CardType>
    dd96:	83 fd       	sbrc	r24, 3
    dd98:	07 c0       	rjmp	.+14     	; 0xdda8 <mmc_disk_write+0x52>
    dd9a:	99 e0       	ldi	r25, 0x09	; 9
    dd9c:	cc 0c       	add	r12, r12
    dd9e:	dd 1c       	adc	r13, r13
    dda0:	ee 1c       	adc	r14, r14
    dda2:	ff 1c       	adc	r15, r15
    dda4:	9a 95       	dec	r25
    dda6:	d1 f7       	brne	.-12     	; 0xdd9c <mmc_disk_write+0x46>
    dda8:	c1 30       	cpi	r28, 0x01	; 1
    ddaa:	d1 05       	cpc	r29, r1
    ddac:	d1 f4       	brne	.+52     	; 0xdde2 <mmc_disk_write+0x8c>
    ddae:	b7 01       	movw	r22, r14
    ddb0:	a6 01       	movw	r20, r12
    ddb2:	88 e1       	ldi	r24, 0x18	; 24
    ddb4:	a7 de       	rcall	.-690    	; 0xdb04 <send_cmd>
    ddb6:	88 23       	and	r24, r24
    ddb8:	19 f0       	breq	.+6      	; 0xddc0 <mmc_disk_write+0x6a>
    ddba:	c1 e0       	ldi	r28, 0x01	; 1
    ddbc:	d0 e0       	ldi	r29, 0x00	; 0
    ddbe:	33 c0       	rjmp	.+102    	; 0xde26 <mmc_disk_write+0xd0>
    ddc0:	88 ee       	ldi	r24, 0xE8	; 232
    ddc2:	93 e0       	ldi	r25, 0x03	; 3
    ddc4:	70 de       	rcall	.-800    	; 0xdaa6 <wait_ready>
    ddc6:	89 2b       	or	r24, r25
    ddc8:	c1 f3       	breq	.-16     	; 0xddba <mmc_disk_write+0x64>
    ddca:	8e ef       	ldi	r24, 0xFE	; 254
    ddcc:	2f de       	rcall	.-930    	; 0xda2c <xchg_spi>
    ddce:	c8 01       	movw	r24, r16
    ddd0:	58 de       	rcall	.-848    	; 0xda82 <xmit_datablock.part.2>
    ddd2:	31 e0       	ldi	r19, 0x01	; 1
    ddd4:	20 e0       	ldi	r18, 0x00	; 0
    ddd6:	89 2b       	or	r24, r25
    ddd8:	09 f0       	breq	.+2      	; 0xdddc <mmc_disk_write+0x86>
    ddda:	30 e0       	ldi	r19, 0x00	; 0
    dddc:	c3 2f       	mov	r28, r19
    ddde:	d2 2f       	mov	r29, r18
    dde0:	22 c0       	rjmp	.+68     	; 0xde26 <mmc_disk_write+0xd0>
    dde2:	86 70       	andi	r24, 0x06	; 6
    dde4:	29 f0       	breq	.+10     	; 0xddf0 <mmc_disk_write+0x9a>
    dde6:	ae 01       	movw	r20, r28
    dde8:	60 e0       	ldi	r22, 0x00	; 0
    ddea:	70 e0       	ldi	r23, 0x00	; 0
    ddec:	87 e9       	ldi	r24, 0x97	; 151
    ddee:	8a de       	rcall	.-748    	; 0xdb04 <send_cmd>
    ddf0:	b7 01       	movw	r22, r14
    ddf2:	a6 01       	movw	r20, r12
    ddf4:	89 e1       	ldi	r24, 0x19	; 25
    ddf6:	86 de       	rcall	.-756    	; 0xdb04 <send_cmd>
    ddf8:	81 11       	cpse	r24, r1
    ddfa:	15 c0       	rjmp	.+42     	; 0xde26 <mmc_disk_write+0xd0>
    ddfc:	88 ee       	ldi	r24, 0xE8	; 232
    ddfe:	93 e0       	ldi	r25, 0x03	; 3
    de00:	52 de       	rcall	.-860    	; 0xdaa6 <wait_ready>
    de02:	89 2b       	or	r24, r25
    de04:	49 f0       	breq	.+18     	; 0xde18 <mmc_disk_write+0xc2>
    de06:	8c ef       	ldi	r24, 0xFC	; 252
    de08:	11 de       	rcall	.-990    	; 0xda2c <xchg_spi>
    de0a:	c8 01       	movw	r24, r16
    de0c:	3a de       	rcall	.-908    	; 0xda82 <xmit_datablock.part.2>
    de0e:	89 2b       	or	r24, r25
    de10:	19 f0       	breq	.+6      	; 0xde18 <mmc_disk_write+0xc2>
    de12:	1e 5f       	subi	r17, 0xFE	; 254
    de14:	21 97       	sbiw	r28, 0x01	; 1
    de16:	91 f7       	brne	.-28     	; 0xddfc <mmc_disk_write+0xa6>
    de18:	88 ee       	ldi	r24, 0xE8	; 232
    de1a:	93 e0       	ldi	r25, 0x03	; 3
    de1c:	44 de       	rcall	.-888    	; 0xdaa6 <wait_ready>
    de1e:	89 2b       	or	r24, r25
    de20:	61 f2       	breq	.-104    	; 0xddba <mmc_disk_write+0x64>
    de22:	8d ef       	ldi	r24, 0xFD	; 253
    de24:	03 de       	rcall	.-1018   	; 0xda2c <xchg_spi>
    de26:	04 de       	rcall	.-1016   	; 0xda30 <deselect>
    de28:	81 e0       	ldi	r24, 0x01	; 1
    de2a:	90 e0       	ldi	r25, 0x00	; 0
    de2c:	cd 2b       	or	r28, r29
    de2e:	09 f4       	brne	.+2      	; 0xde32 <mmc_disk_write+0xdc>
    de30:	80 e0       	ldi	r24, 0x00	; 0
    de32:	cd b7       	in	r28, 0x3d	; 61
    de34:	de b7       	in	r29, 0x3e	; 62
    de36:	e8 e0       	ldi	r30, 0x08	; 8
    de38:	0c 94 b5 e9 	jmp	0x1d36a	; 0x1d36a <__epilogue_restores__+0x14>

0000de3c <mmc_disk_ioctl>:
    de3c:	a0 e1       	ldi	r26, 0x10	; 16
    de3e:	b0 e0       	ldi	r27, 0x00	; 0
    de40:	e4 e2       	ldi	r30, 0x24	; 36
    de42:	ff e6       	ldi	r31, 0x6F	; 111
    de44:	0c 94 99 e9 	jmp	0x1d332	; 0x1d332 <__prologue_saves__+0x14>
    de48:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <Stat>
    de4c:	90 fd       	sbrc	r25, 0
    de4e:	75 c2       	rjmp	.+1258   	; 0xe33a <mmc_disk_ioctl+0x4fe>
    de50:	8b 01       	movw	r16, r22
    de52:	83 33       	cpi	r24, 0x33	; 51
    de54:	09 f4       	brne	.+2      	; 0xde58 <mmc_disk_ioctl+0x1c>
    de56:	4b c1       	rjmp	.+662    	; 0xe0ee <mmc_disk_ioctl+0x2b2>
    de58:	98 f4       	brcc	.+38     	; 0xde80 <mmc_disk_ioctl+0x44>
    de5a:	83 30       	cpi	r24, 0x03	; 3
    de5c:	09 f4       	brne	.+2      	; 0xde60 <mmc_disk_ioctl+0x24>
    de5e:	84 c0       	rjmp	.+264    	; 0xdf68 <mmc_disk_ioctl+0x12c>
    de60:	28 f4       	brcc	.+10     	; 0xde6c <mmc_disk_ioctl+0x30>
    de62:	88 23       	and	r24, r24
    de64:	09 f1       	breq	.+66     	; 0xdea8 <mmc_disk_ioctl+0x6c>
    de66:	81 30       	cpi	r24, 0x01	; 1
    de68:	09 f1       	breq	.+66     	; 0xdeac <mmc_disk_ioctl+0x70>
    de6a:	69 c2       	rjmp	.+1234   	; 0xe33e <mmc_disk_ioctl+0x502>
    de6c:	87 30       	cpi	r24, 0x07	; 7
    de6e:	09 f4       	brne	.+2      	; 0xde72 <mmc_disk_ioctl+0x36>
    de70:	74 c1       	rjmp	.+744    	; 0xe15a <mmc_disk_ioctl+0x31e>
    de72:	82 33       	cpi	r24, 0x32	; 50
    de74:	09 f4       	brne	.+2      	; 0xde78 <mmc_disk_ioctl+0x3c>
    de76:	36 c1       	rjmp	.+620    	; 0xe0e4 <mmc_disk_ioctl+0x2a8>
    de78:	84 30       	cpi	r24, 0x04	; 4
    de7a:	09 f0       	breq	.+2      	; 0xde7e <mmc_disk_ioctl+0x42>
    de7c:	60 c2       	rjmp	.+1216   	; 0xe33e <mmc_disk_ioctl+0x502>
    de7e:	ec c0       	rjmp	.+472    	; 0xe058 <mmc_disk_ioctl+0x21c>
    de80:	86 33       	cpi	r24, 0x36	; 54
    de82:	09 f4       	brne	.+2      	; 0xde86 <mmc_disk_ioctl+0x4a>
    de84:	57 c1       	rjmp	.+686    	; 0xe134 <mmc_disk_ioctl+0x2f8>
    de86:	38 f4       	brcc	.+14     	; 0xde96 <mmc_disk_ioctl+0x5a>
    de88:	84 33       	cpi	r24, 0x34	; 52
    de8a:	09 f4       	brne	.+2      	; 0xde8e <mmc_disk_ioctl+0x52>
    de8c:	35 c1       	rjmp	.+618    	; 0xe0f8 <mmc_disk_ioctl+0x2bc>
    de8e:	85 33       	cpi	r24, 0x35	; 53
    de90:	09 f4       	brne	.+2      	; 0xde94 <mmc_disk_ioctl+0x58>
    de92:	3c c1       	rjmp	.+632    	; 0xe10c <mmc_disk_ioctl+0x2d0>
    de94:	54 c2       	rjmp	.+1192   	; 0xe33e <mmc_disk_ioctl+0x502>
    de96:	88 33       	cpi	r24, 0x38	; 56
    de98:	09 f4       	brne	.+2      	; 0xde9c <mmc_disk_ioctl+0x60>
    de9a:	bf c1       	rjmp	.+894    	; 0xe21a <mmc_disk_ioctl+0x3de>
    de9c:	08 f4       	brcc	.+2      	; 0xdea0 <mmc_disk_ioctl+0x64>
    de9e:	65 c1       	rjmp	.+714    	; 0xe16a <mmc_disk_ioctl+0x32e>
    dea0:	89 33       	cpi	r24, 0x39	; 57
    dea2:	09 f4       	brne	.+2      	; 0xdea6 <mmc_disk_ioctl+0x6a>
    dea4:	07 c2       	rjmp	.+1038   	; 0xe2b4 <mmc_disk_ioctl+0x478>
    dea6:	4b c2       	rjmp	.+1174   	; 0xe33e <mmc_disk_ioctl+0x502>
    dea8:	10 de       	rcall	.-992    	; 0xdaca <select>
    deaa:	51 c1       	rjmp	.+674    	; 0xe14e <mmc_disk_ioctl+0x312>
    deac:	40 e0       	ldi	r20, 0x00	; 0
    deae:	50 e0       	ldi	r21, 0x00	; 0
    deb0:	ba 01       	movw	r22, r20
    deb2:	89 e0       	ldi	r24, 0x09	; 9
    deb4:	27 de       	rcall	.-946    	; 0xdb04 <send_cmd>
    deb6:	81 11       	cpse	r24, r1
    deb8:	3c c2       	rjmp	.+1144   	; 0xe332 <mmc_disk_ioctl+0x4f6>
    deba:	60 e1       	ldi	r22, 0x10	; 16
    debc:	70 e0       	ldi	r23, 0x00	; 0
    debe:	ce 01       	movw	r24, r28
    dec0:	01 96       	adiw	r24, 0x01	; 1
    dec2:	bc dd       	rcall	.-1160   	; 0xda3c <rcvr_datablock>
    dec4:	89 2b       	or	r24, r25
    dec6:	09 f4       	brne	.+2      	; 0xdeca <mmc_disk_ioctl+0x8e>
    dec8:	34 c2       	rjmp	.+1128   	; 0xe332 <mmc_disk_ioctl+0x4f6>
    deca:	99 81       	ldd	r25, Y+1	; 0x01
    decc:	92 95       	swap	r25
    dece:	96 95       	lsr	r25
    ded0:	96 95       	lsr	r25
    ded2:	93 70       	andi	r25, 0x03	; 3
    ded4:	29 85       	ldd	r18, Y+9	; 0x09
    ded6:	4a 85       	ldd	r20, Y+10	; 0x0a
    ded8:	88 85       	ldd	r24, Y+8	; 0x08
    deda:	91 30       	cpi	r25, 0x01	; 1
    dedc:	d9 f4       	brne	.+54     	; 0xdf14 <mmc_disk_ioctl+0xd8>
    dede:	30 e0       	ldi	r19, 0x00	; 0
    dee0:	32 2f       	mov	r19, r18
    dee2:	22 27       	eor	r18, r18
    dee4:	24 0f       	add	r18, r20
    dee6:	31 1d       	adc	r19, r1
    dee8:	8f 73       	andi	r24, 0x3F	; 63
    deea:	90 e0       	ldi	r25, 0x00	; 0
    deec:	a0 e0       	ldi	r26, 0x00	; 0
    deee:	b0 e0       	ldi	r27, 0x00	; 0
    def0:	dc 01       	movw	r26, r24
    def2:	99 27       	eor	r25, r25
    def4:	88 27       	eor	r24, r24
    def6:	01 96       	adiw	r24, 0x01	; 1
    def8:	a1 1d       	adc	r26, r1
    defa:	b1 1d       	adc	r27, r1
    defc:	82 0f       	add	r24, r18
    defe:	93 1f       	adc	r25, r19
    df00:	a1 1d       	adc	r26, r1
    df02:	b1 1d       	adc	r27, r1
    df04:	5a e0       	ldi	r21, 0x0A	; 10
    df06:	88 0f       	add	r24, r24
    df08:	99 1f       	adc	r25, r25
    df0a:	aa 1f       	adc	r26, r26
    df0c:	bb 1f       	adc	r27, r27
    df0e:	5a 95       	dec	r21
    df10:	d1 f7       	brne	.-12     	; 0xdf06 <mmc_disk_ioctl+0xca>
    df12:	9b c0       	rjmp	.+310    	; 0xe04a <mmc_disk_ioctl+0x20e>
    df14:	22 95       	swap	r18
    df16:	26 95       	lsr	r18
    df18:	26 95       	lsr	r18
    df1a:	23 70       	andi	r18, 0x03	; 3
    df1c:	f4 e0       	ldi	r31, 0x04	; 4
    df1e:	8f 9f       	mul	r24, r31
    df20:	c0 01       	movw	r24, r0
    df22:	11 24       	eor	r1, r1
    df24:	82 0f       	add	r24, r18
    df26:	91 1d       	adc	r25, r1
    df28:	01 96       	adiw	r24, 0x01	; 1
    df2a:	2f 81       	ldd	r18, Y+7	; 0x07
    df2c:	23 70       	andi	r18, 0x03	; 3
    df2e:	30 e0       	ldi	r19, 0x00	; 0
    df30:	32 2f       	mov	r19, r18
    df32:	22 27       	eor	r18, r18
    df34:	33 0f       	add	r19, r19
    df36:	33 0f       	add	r19, r19
    df38:	82 0f       	add	r24, r18
    df3a:	93 1f       	adc	r25, r19
    df3c:	a0 e0       	ldi	r26, 0x00	; 0
    df3e:	b0 e0       	ldi	r27, 0x00	; 0
    df40:	2e 81       	ldd	r18, Y+6	; 0x06
    df42:	32 2f       	mov	r19, r18
    df44:	3f 70       	andi	r19, 0x0F	; 15
    df46:	2b 85       	ldd	r18, Y+11	; 0x0b
    df48:	22 1f       	adc	r18, r18
    df4a:	22 27       	eor	r18, r18
    df4c:	22 1f       	adc	r18, r18
    df4e:	23 0f       	add	r18, r19
    df50:	43 70       	andi	r20, 0x03	; 3
    df52:	44 0f       	add	r20, r20
    df54:	42 0f       	add	r20, r18
    df56:	47 50       	subi	r20, 0x07	; 7
    df58:	04 c0       	rjmp	.+8      	; 0xdf62 <mmc_disk_ioctl+0x126>
    df5a:	88 0f       	add	r24, r24
    df5c:	99 1f       	adc	r25, r25
    df5e:	aa 1f       	adc	r26, r26
    df60:	bb 1f       	adc	r27, r27
    df62:	4a 95       	dec	r20
    df64:	d2 f7       	brpl	.-12     	; 0xdf5a <mmc_disk_ioctl+0x11e>
    df66:	71 c0       	rjmp	.+226    	; 0xe04a <mmc_disk_ioctl+0x20e>
    df68:	80 91 74 18 	lds	r24, 0x1874	; 0x801874 <CardType>
    df6c:	40 e0       	ldi	r20, 0x00	; 0
    df6e:	50 e0       	ldi	r21, 0x00	; 0
    df70:	ba 01       	movw	r22, r20
    df72:	82 ff       	sbrs	r24, 2
    df74:	24 c0       	rjmp	.+72     	; 0xdfbe <mmc_disk_ioctl+0x182>
    df76:	8d e8       	ldi	r24, 0x8D	; 141
    df78:	c5 dd       	rcall	.-1142   	; 0xdb04 <send_cmd>
    df7a:	81 11       	cpse	r24, r1
    df7c:	da c1       	rjmp	.+948    	; 0xe332 <mmc_disk_ioctl+0x4f6>
    df7e:	8f ef       	ldi	r24, 0xFF	; 255
    df80:	55 dd       	rcall	.-1366   	; 0xda2c <xchg_spi>
    df82:	60 e1       	ldi	r22, 0x10	; 16
    df84:	70 e0       	ldi	r23, 0x00	; 0
    df86:	ce 01       	movw	r24, r28
    df88:	01 96       	adiw	r24, 0x01	; 1
    df8a:	58 dd       	rcall	.-1360   	; 0xda3c <rcvr_datablock>
    df8c:	89 2b       	or	r24, r25
    df8e:	09 f4       	brne	.+2      	; 0xdf92 <mmc_disk_ioctl+0x156>
    df90:	d0 c1       	rjmp	.+928    	; 0xe332 <mmc_disk_ioctl+0x4f6>
    df92:	a0 e3       	ldi	r26, 0x30	; 48
    df94:	fa 2e       	mov	r15, r26
    df96:	8f ef       	ldi	r24, 0xFF	; 255
    df98:	49 dd       	rcall	.-1390   	; 0xda2c <xchg_spi>
    df9a:	fa 94       	dec	r15
    df9c:	f1 10       	cpse	r15, r1
    df9e:	fb cf       	rjmp	.-10     	; 0xdf96 <mmc_disk_ioctl+0x15a>
    dfa0:	2b 85       	ldd	r18, Y+11	; 0x0b
    dfa2:	22 95       	swap	r18
    dfa4:	2f 70       	andi	r18, 0x0F	; 15
    dfa6:	80 e1       	ldi	r24, 0x10	; 16
    dfa8:	90 e0       	ldi	r25, 0x00	; 0
    dfaa:	a0 e0       	ldi	r26, 0x00	; 0
    dfac:	b0 e0       	ldi	r27, 0x00	; 0
    dfae:	04 c0       	rjmp	.+8      	; 0xdfb8 <mmc_disk_ioctl+0x17c>
    dfb0:	88 0f       	add	r24, r24
    dfb2:	99 1f       	adc	r25, r25
    dfb4:	aa 1f       	adc	r26, r26
    dfb6:	bb 1f       	adc	r27, r27
    dfb8:	2a 95       	dec	r18
    dfba:	d2 f7       	brpl	.-12     	; 0xdfb0 <mmc_disk_ioctl+0x174>
    dfbc:	46 c0       	rjmp	.+140    	; 0xe04a <mmc_disk_ioctl+0x20e>
    dfbe:	89 e0       	ldi	r24, 0x09	; 9
    dfc0:	a1 dd       	rcall	.-1214   	; 0xdb04 <send_cmd>
    dfc2:	81 11       	cpse	r24, r1
    dfc4:	b6 c1       	rjmp	.+876    	; 0xe332 <mmc_disk_ioctl+0x4f6>
    dfc6:	60 e1       	ldi	r22, 0x10	; 16
    dfc8:	70 e0       	ldi	r23, 0x00	; 0
    dfca:	ce 01       	movw	r24, r28
    dfcc:	01 96       	adiw	r24, 0x01	; 1
    dfce:	36 dd       	rcall	.-1428   	; 0xda3c <rcvr_datablock>
    dfd0:	89 2b       	or	r24, r25
    dfd2:	09 f4       	brne	.+2      	; 0xdfd6 <mmc_disk_ioctl+0x19a>
    dfd4:	ae c1       	rjmp	.+860    	; 0xe332 <mmc_disk_ioctl+0x4f6>
    dfd6:	90 91 74 18 	lds	r25, 0x1874	; 0x801874 <CardType>
    dfda:	2b 85       	ldd	r18, Y+11	; 0x0b
    dfdc:	8c 85       	ldd	r24, Y+12	; 0x0c
    dfde:	91 ff       	sbrs	r25, 1
    dfe0:	16 c0       	rjmp	.+44     	; 0xe00e <mmc_disk_ioctl+0x1d2>
    dfe2:	2f 73       	andi	r18, 0x3F	; 63
    dfe4:	88 1f       	adc	r24, r24
    dfe6:	88 27       	eor	r24, r24
    dfe8:	88 1f       	adc	r24, r24
    dfea:	90 e0       	ldi	r25, 0x00	; 0
    dfec:	01 96       	adiw	r24, 0x01	; 1
    dfee:	82 0f       	add	r24, r18
    dff0:	91 1d       	adc	r25, r1
    dff2:	82 0f       	add	r24, r18
    dff4:	91 1d       	adc	r25, r1
    dff6:	2e 85       	ldd	r18, Y+14	; 0x0e
    dff8:	22 95       	swap	r18
    dffa:	26 95       	lsr	r18
    dffc:	26 95       	lsr	r18
    dffe:	23 70       	andi	r18, 0x03	; 3
    e000:	21 50       	subi	r18, 0x01	; 1
    e002:	02 c0       	rjmp	.+4      	; 0xe008 <mmc_disk_ioctl+0x1cc>
    e004:	88 0f       	add	r24, r24
    e006:	99 1f       	adc	r25, r25
    e008:	2a 95       	dec	r18
    e00a:	e2 f7       	brpl	.-8      	; 0xe004 <mmc_disk_ioctl+0x1c8>
    e00c:	1c c0       	rjmp	.+56     	; 0xe046 <mmc_disk_ioctl+0x20a>
    e00e:	38 2f       	mov	r19, r24
    e010:	33 70       	andi	r19, 0x03	; 3
    e012:	82 95       	swap	r24
    e014:	86 95       	lsr	r24
    e016:	87 70       	andi	r24, 0x07	; 7
    e018:	90 e0       	ldi	r25, 0x00	; 0
    e01a:	f8 e0       	ldi	r31, 0x08	; 8
    e01c:	3f 9f       	mul	r19, r31
    e01e:	80 0d       	add	r24, r0
    e020:	91 1d       	adc	r25, r1
    e022:	11 24       	eor	r1, r1
    e024:	01 96       	adiw	r24, 0x01	; 1
    e026:	2c 77       	andi	r18, 0x7C	; 124
    e028:	30 e0       	ldi	r19, 0x00	; 0
    e02a:	35 95       	asr	r19
    e02c:	27 95       	ror	r18
    e02e:	35 95       	asr	r19
    e030:	27 95       	ror	r18
    e032:	2f 5f       	subi	r18, 0xFF	; 255
    e034:	3f 4f       	sbci	r19, 0xFF	; 255
    e036:	82 9f       	mul	r24, r18
    e038:	a0 01       	movw	r20, r0
    e03a:	83 9f       	mul	r24, r19
    e03c:	50 0d       	add	r21, r0
    e03e:	92 9f       	mul	r25, r18
    e040:	50 0d       	add	r21, r0
    e042:	11 24       	eor	r1, r1
    e044:	ca 01       	movw	r24, r20
    e046:	a0 e0       	ldi	r26, 0x00	; 0
    e048:	b0 e0       	ldi	r27, 0x00	; 0
    e04a:	f8 01       	movw	r30, r16
    e04c:	80 83       	st	Z, r24
    e04e:	91 83       	std	Z+1, r25	; 0x01
    e050:	a2 83       	std	Z+2, r26	; 0x02
    e052:	b3 83       	std	Z+3, r27	; 0x03
    e054:	00 e0       	ldi	r16, 0x00	; 0
    e056:	6e c1       	rjmp	.+732    	; 0xe334 <mmc_disk_ioctl+0x4f8>
    e058:	80 91 74 18 	lds	r24, 0x1874	; 0x801874 <CardType>
    e05c:	86 70       	andi	r24, 0x06	; 6
    e05e:	11 f4       	brne	.+4      	; 0xe064 <mmc_disk_ioctl+0x228>
    e060:	01 e0       	ldi	r16, 0x01	; 1
    e062:	6e c1       	rjmp	.+732    	; 0xe340 <mmc_disk_ioctl+0x504>
    e064:	be 01       	movw	r22, r28
    e066:	6f 5f       	subi	r22, 0xFF	; 255
    e068:	7f 4f       	sbci	r23, 0xFF	; 255
    e06a:	83 e3       	ldi	r24, 0x33	; 51
    e06c:	e7 de       	rcall	.-562    	; 0xde3c <mmc_disk_ioctl>
    e06e:	89 2b       	or	r24, r25
    e070:	b9 f7       	brne	.-18     	; 0xe060 <mmc_disk_ioctl+0x224>
    e072:	89 81       	ldd	r24, Y+1	; 0x01
    e074:	82 95       	swap	r24
    e076:	86 95       	lsr	r24
    e078:	86 95       	lsr	r24
    e07a:	83 70       	andi	r24, 0x03	; 3
    e07c:	19 f4       	brne	.+6      	; 0xe084 <mmc_disk_ioctl+0x248>
    e07e:	8b 85       	ldd	r24, Y+11	; 0x0b
    e080:	86 ff       	sbrs	r24, 6
    e082:	ee cf       	rjmp	.-36     	; 0xe060 <mmc_disk_ioctl+0x224>
    e084:	f8 01       	movw	r30, r16
    e086:	40 81       	ld	r20, Z
    e088:	51 81       	ldd	r21, Z+1	; 0x01
    e08a:	62 81       	ldd	r22, Z+2	; 0x02
    e08c:	73 81       	ldd	r23, Z+3	; 0x03
    e08e:	c4 80       	ldd	r12, Z+4	; 0x04
    e090:	d5 80       	ldd	r13, Z+5	; 0x05
    e092:	e6 80       	ldd	r14, Z+6	; 0x06
    e094:	f7 80       	ldd	r15, Z+7	; 0x07
    e096:	80 91 74 18 	lds	r24, 0x1874	; 0x801874 <CardType>
    e09a:	83 fd       	sbrc	r24, 3
    e09c:	0e c0       	rjmp	.+28     	; 0xe0ba <mmc_disk_ioctl+0x27e>
    e09e:	39 e0       	ldi	r19, 0x09	; 9
    e0a0:	44 0f       	add	r20, r20
    e0a2:	55 1f       	adc	r21, r21
    e0a4:	66 1f       	adc	r22, r22
    e0a6:	77 1f       	adc	r23, r23
    e0a8:	3a 95       	dec	r19
    e0aa:	d1 f7       	brne	.-12     	; 0xe0a0 <mmc_disk_ioctl+0x264>
    e0ac:	e9 e0       	ldi	r30, 0x09	; 9
    e0ae:	cc 0c       	add	r12, r12
    e0b0:	dd 1c       	adc	r13, r13
    e0b2:	ee 1c       	adc	r14, r14
    e0b4:	ff 1c       	adc	r15, r15
    e0b6:	ea 95       	dec	r30
    e0b8:	d1 f7       	brne	.-12     	; 0xe0ae <mmc_disk_ioctl+0x272>
    e0ba:	80 e2       	ldi	r24, 0x20	; 32
    e0bc:	23 dd       	rcall	.-1466   	; 0xdb04 <send_cmd>
    e0be:	81 11       	cpse	r24, r1
    e0c0:	38 c1       	rjmp	.+624    	; 0xe332 <mmc_disk_ioctl+0x4f6>
    e0c2:	b7 01       	movw	r22, r14
    e0c4:	a6 01       	movw	r20, r12
    e0c6:	81 e2       	ldi	r24, 0x21	; 33
    e0c8:	1d dd       	rcall	.-1478   	; 0xdb04 <send_cmd>
    e0ca:	81 11       	cpse	r24, r1
    e0cc:	32 c1       	rjmp	.+612    	; 0xe332 <mmc_disk_ioctl+0x4f6>
    e0ce:	40 e0       	ldi	r20, 0x00	; 0
    e0d0:	50 e0       	ldi	r21, 0x00	; 0
    e0d2:	ba 01       	movw	r22, r20
    e0d4:	86 e2       	ldi	r24, 0x26	; 38
    e0d6:	16 dd       	rcall	.-1492   	; 0xdb04 <send_cmd>
    e0d8:	81 11       	cpse	r24, r1
    e0da:	2b c1       	rjmp	.+598    	; 0xe332 <mmc_disk_ioctl+0x4f6>
    e0dc:	80 e3       	ldi	r24, 0x30	; 48
    e0de:	95 e7       	ldi	r25, 0x75	; 117
    e0e0:	e2 dc       	rcall	.-1596   	; 0xdaa6 <wait_ready>
    e0e2:	35 c0       	rjmp	.+106    	; 0xe14e <mmc_disk_ioctl+0x312>
    e0e4:	80 91 74 18 	lds	r24, 0x1874	; 0x801874 <CardType>
    e0e8:	fb 01       	movw	r30, r22
    e0ea:	80 83       	st	Z, r24
    e0ec:	3c c0       	rjmp	.+120    	; 0xe166 <mmc_disk_ioctl+0x32a>
    e0ee:	40 e0       	ldi	r20, 0x00	; 0
    e0f0:	50 e0       	ldi	r21, 0x00	; 0
    e0f2:	ba 01       	movw	r22, r20
    e0f4:	89 e0       	ldi	r24, 0x09	; 9
    e0f6:	04 c0       	rjmp	.+8      	; 0xe100 <mmc_disk_ioctl+0x2c4>
    e0f8:	40 e0       	ldi	r20, 0x00	; 0
    e0fa:	50 e0       	ldi	r21, 0x00	; 0
    e0fc:	ba 01       	movw	r22, r20
    e0fe:	8a e0       	ldi	r24, 0x0A	; 10
    e100:	01 dd       	rcall	.-1534   	; 0xdb04 <send_cmd>
    e102:	81 11       	cpse	r24, r1
    e104:	16 c1       	rjmp	.+556    	; 0xe332 <mmc_disk_ioctl+0x4f6>
    e106:	60 e1       	ldi	r22, 0x10	; 16
    e108:	70 e0       	ldi	r23, 0x00	; 0
    e10a:	1f c0       	rjmp	.+62     	; 0xe14a <mmc_disk_ioctl+0x30e>
    e10c:	40 e0       	ldi	r20, 0x00	; 0
    e10e:	50 e0       	ldi	r21, 0x00	; 0
    e110:	ba 01       	movw	r22, r20
    e112:	8a e3       	ldi	r24, 0x3A	; 58
    e114:	f7 dc       	rcall	.-1554   	; 0xdb04 <send_cmd>
    e116:	81 11       	cpse	r24, r1
    e118:	0c c1       	rjmp	.+536    	; 0xe332 <mmc_disk_ioctl+0x4f6>
    e11a:	78 01       	movw	r14, r16
    e11c:	f4 e0       	ldi	r31, 0x04	; 4
    e11e:	ef 0e       	add	r14, r31
    e120:	f1 1c       	adc	r15, r1
    e122:	8f ef       	ldi	r24, 0xFF	; 255
    e124:	8d d1       	rcall	.+794    	; 0xe440 <mmc_spi_TXRX>
    e126:	f8 01       	movw	r30, r16
    e128:	81 93       	st	Z+, r24
    e12a:	8f 01       	movw	r16, r30
    e12c:	ee 15       	cp	r30, r14
    e12e:	ff 05       	cpc	r31, r15
    e130:	c1 f7       	brne	.-16     	; 0xe122 <mmc_disk_ioctl+0x2e6>
    e132:	90 cf       	rjmp	.-224    	; 0xe054 <mmc_disk_ioctl+0x218>
    e134:	40 e0       	ldi	r20, 0x00	; 0
    e136:	50 e0       	ldi	r21, 0x00	; 0
    e138:	ba 01       	movw	r22, r20
    e13a:	8d e8       	ldi	r24, 0x8D	; 141
    e13c:	e3 dc       	rcall	.-1594   	; 0xdb04 <send_cmd>
    e13e:	81 11       	cpse	r24, r1
    e140:	f8 c0       	rjmp	.+496    	; 0xe332 <mmc_disk_ioctl+0x4f6>
    e142:	8f ef       	ldi	r24, 0xFF	; 255
    e144:	73 dc       	rcall	.-1818   	; 0xda2c <xchg_spi>
    e146:	60 e4       	ldi	r22, 0x40	; 64
    e148:	70 e0       	ldi	r23, 0x00	; 0
    e14a:	c8 01       	movw	r24, r16
    e14c:	77 dc       	rcall	.-1810   	; 0xda3c <rcvr_datablock>
    e14e:	01 e0       	ldi	r16, 0x01	; 1
    e150:	10 e0       	ldi	r17, 0x00	; 0
    e152:	89 2b       	or	r24, r25
    e154:	09 f4       	brne	.+2      	; 0xe158 <mmc_disk_ioctl+0x31c>
    e156:	ef c0       	rjmp	.+478    	; 0xe336 <mmc_disk_ioctl+0x4fa>
    e158:	ea c0       	rjmp	.+468    	; 0xe32e <mmc_disk_ioctl+0x4f2>
    e15a:	40 d2       	rcall	.+1152   	; 0xe5dc <mmc_power_off>
    e15c:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Stat>
    e160:	81 60       	ori	r24, 0x01	; 1
    e162:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <Stat>
    e166:	00 e0       	ldi	r16, 0x00	; 0
    e168:	eb c0       	rjmp	.+470    	; 0xe340 <mmc_disk_ioctl+0x504>
    e16a:	fb 01       	movw	r30, r22
    e16c:	43 81       	ldd	r20, Z+3	; 0x03
    e16e:	54 81       	ldd	r21, Z+4	; 0x04
    e170:	65 81       	ldd	r22, Z+5	; 0x05
    e172:	76 81       	ldd	r23, Z+6	; 0x06
    e174:	39 e0       	ldi	r19, 0x09	; 9
    e176:	44 0f       	add	r20, r20
    e178:	55 1f       	adc	r21, r21
    e17a:	66 1f       	adc	r22, r22
    e17c:	77 1f       	adc	r23, r23
    e17e:	3a 95       	dec	r19
    e180:	d1 f7       	brne	.-12     	; 0xe176 <mmc_disk_ioctl+0x33a>
    e182:	70 68       	ori	r23, 0x80	; 128
    e184:	80 81       	ld	r24, Z
    e186:	90 e0       	ldi	r25, 0x00	; 0
    e188:	a0 e0       	ldi	r26, 0x00	; 0
    e18a:	b0 e0       	ldi	r27, 0x00	; 0
    e18c:	2c e1       	ldi	r18, 0x1C	; 28
    e18e:	88 0f       	add	r24, r24
    e190:	99 1f       	adc	r25, r25
    e192:	aa 1f       	adc	r26, r26
    e194:	bb 1f       	adc	r27, r27
    e196:	2a 95       	dec	r18
    e198:	d1 f7       	brne	.-12     	; 0xe18e <mmc_disk_ioctl+0x352>
    e19a:	48 2b       	or	r20, r24
    e19c:	59 2b       	or	r21, r25
    e19e:	6a 2b       	or	r22, r26
    e1a0:	7b 2b       	or	r23, r27
    e1a2:	81 81       	ldd	r24, Z+1	; 0x01
    e1a4:	92 81       	ldd	r25, Z+2	; 0x02
    e1a6:	01 97       	sbiw	r24, 0x01	; 1
    e1a8:	91 70       	andi	r25, 0x01	; 1
    e1aa:	a0 e0       	ldi	r26, 0x00	; 0
    e1ac:	b0 e0       	ldi	r27, 0x00	; 0
    e1ae:	48 2b       	or	r20, r24
    e1b0:	59 2b       	or	r21, r25
    e1b2:	6a 2b       	or	r22, r26
    e1b4:	7b 2b       	or	r23, r27
    e1b6:	80 e3       	ldi	r24, 0x30	; 48
    e1b8:	a5 dc       	rcall	.-1718   	; 0xdb04 <send_cmd>
    e1ba:	81 11       	cpse	r24, r1
    e1bc:	ba c0       	rjmp	.+372    	; 0xe332 <mmc_disk_ioctl+0x4f6>
    e1be:	88 ee       	ldi	r24, 0xE8	; 232
    e1c0:	93 e0       	ldi	r25, 0x03	; 3
    e1c2:	41 d1       	rcall	.+642    	; 0xe446 <mmc_set_ms_timeout>
    e1c4:	8f ef       	ldi	r24, 0xFF	; 255
    e1c6:	3c d1       	rcall	.+632    	; 0xe440 <mmc_spi_TXRX>
    e1c8:	8f 3f       	cpi	r24, 0xFF	; 255
    e1ca:	21 f4       	brne	.+8      	; 0xe1d4 <mmc_disk_ioctl+0x398>
    e1cc:	43 d1       	rcall	.+646    	; 0xe454 <mmc_test_timeout>
    e1ce:	89 2b       	or	r24, r25
    e1d0:	c9 f3       	breq	.-14     	; 0xe1c4 <mmc_disk_ioctl+0x388>
    e1d2:	af c0       	rjmp	.+350    	; 0xe332 <mmc_disk_ioctl+0x4f6>
    e1d4:	8e 3f       	cpi	r24, 0xFE	; 254
    e1d6:	09 f0       	breq	.+2      	; 0xe1da <mmc_disk_ioctl+0x39e>
    e1d8:	ac c0       	rjmp	.+344    	; 0xe332 <mmc_disk_ioctl+0x4f6>
    e1da:	f8 01       	movw	r30, r16
    e1dc:	e7 80       	ldd	r14, Z+7	; 0x07
    e1de:	f0 84       	ldd	r15, Z+8	; 0x08
    e1e0:	c1 80       	ldd	r12, Z+1	; 0x01
    e1e2:	d2 80       	ldd	r13, Z+2	; 0x02
    e1e4:	ce 0c       	add	r12, r14
    e1e6:	df 1c       	adc	r13, r15
    e1e8:	ce 14       	cp	r12, r14
    e1ea:	df 04       	cpc	r13, r15
    e1ec:	31 f0       	breq	.+12     	; 0xe1fa <mmc_disk_ioctl+0x3be>
    e1ee:	8f ef       	ldi	r24, 0xFF	; 255
    e1f0:	27 d1       	rcall	.+590    	; 0xe440 <mmc_spi_TXRX>
    e1f2:	f7 01       	movw	r30, r14
    e1f4:	81 93       	st	Z+, r24
    e1f6:	7f 01       	movw	r14, r30
    e1f8:	f7 cf       	rjmp	.-18     	; 0xe1e8 <mmc_disk_ioctl+0x3ac>
    e1fa:	f8 01       	movw	r30, r16
    e1fc:	81 81       	ldd	r24, Z+1	; 0x01
    e1fe:	92 81       	ldd	r25, Z+2	; 0x02
    e200:	02 e0       	ldi	r16, 0x02	; 2
    e202:	12 e0       	ldi	r17, 0x02	; 2
    e204:	08 1b       	sub	r16, r24
    e206:	19 0b       	sbc	r17, r25
    e208:	01 15       	cp	r16, r1
    e20a:	11 05       	cpc	r17, r1
    e20c:	09 f4       	brne	.+2      	; 0xe210 <mmc_disk_ioctl+0x3d4>
    e20e:	22 cf       	rjmp	.-444    	; 0xe054 <mmc_disk_ioctl+0x218>
    e210:	8f ef       	ldi	r24, 0xFF	; 255
    e212:	0c dc       	rcall	.-2024   	; 0xda2c <xchg_spi>
    e214:	01 50       	subi	r16, 0x01	; 1
    e216:	11 09       	sbc	r17, r1
    e218:	f7 cf       	rjmp	.-18     	; 0xe208 <mmc_disk_ioctl+0x3cc>
    e21a:	fb 01       	movw	r30, r22
    e21c:	43 81       	ldd	r20, Z+3	; 0x03
    e21e:	54 81       	ldd	r21, Z+4	; 0x04
    e220:	65 81       	ldd	r22, Z+5	; 0x05
    e222:	76 81       	ldd	r23, Z+6	; 0x06
    e224:	39 e0       	ldi	r19, 0x09	; 9
    e226:	44 0f       	add	r20, r20
    e228:	55 1f       	adc	r21, r21
    e22a:	66 1f       	adc	r22, r22
    e22c:	77 1f       	adc	r23, r23
    e22e:	3a 95       	dec	r19
    e230:	d1 f7       	brne	.-12     	; 0xe226 <mmc_disk_ioctl+0x3ea>
    e232:	70 68       	ori	r23, 0x80	; 128
    e234:	80 81       	ld	r24, Z
    e236:	90 e0       	ldi	r25, 0x00	; 0
    e238:	a0 e0       	ldi	r26, 0x00	; 0
    e23a:	b0 e0       	ldi	r27, 0x00	; 0
    e23c:	2c e1       	ldi	r18, 0x1C	; 28
    e23e:	88 0f       	add	r24, r24
    e240:	99 1f       	adc	r25, r25
    e242:	aa 1f       	adc	r26, r26
    e244:	bb 1f       	adc	r27, r27
    e246:	2a 95       	dec	r18
    e248:	d1 f7       	brne	.-12     	; 0xe23e <mmc_disk_ioctl+0x402>
    e24a:	48 2b       	or	r20, r24
    e24c:	59 2b       	or	r21, r25
    e24e:	6a 2b       	or	r22, r26
    e250:	7b 2b       	or	r23, r27
    e252:	81 81       	ldd	r24, Z+1	; 0x01
    e254:	92 81       	ldd	r25, Z+2	; 0x02
    e256:	01 97       	sbiw	r24, 0x01	; 1
    e258:	91 70       	andi	r25, 0x01	; 1
    e25a:	a0 e0       	ldi	r26, 0x00	; 0
    e25c:	b0 e0       	ldi	r27, 0x00	; 0
    e25e:	48 2b       	or	r20, r24
    e260:	59 2b       	or	r21, r25
    e262:	6a 2b       	or	r22, r26
    e264:	7b 2b       	or	r23, r27
    e266:	81 e3       	ldi	r24, 0x31	; 49
    e268:	4d dc       	rcall	.-1894   	; 0xdb04 <send_cmd>
    e26a:	81 11       	cpse	r24, r1
    e26c:	62 c0       	rjmp	.+196    	; 0xe332 <mmc_disk_ioctl+0x4f6>
    e26e:	8f ef       	ldi	r24, 0xFF	; 255
    e270:	dd db       	rcall	.-2118   	; 0xda2c <xchg_spi>
    e272:	8e ef       	ldi	r24, 0xFE	; 254
    e274:	db db       	rcall	.-2122   	; 0xda2c <xchg_spi>
    e276:	f8 01       	movw	r30, r16
    e278:	e7 80       	ldd	r14, Z+7	; 0x07
    e27a:	f0 84       	ldd	r15, Z+8	; 0x08
    e27c:	c1 80       	ldd	r12, Z+1	; 0x01
    e27e:	d2 80       	ldd	r13, Z+2	; 0x02
    e280:	ce 0c       	add	r12, r14
    e282:	df 1c       	adc	r13, r15
    e284:	ec 14       	cp	r14, r12
    e286:	fd 04       	cpc	r15, r13
    e288:	29 f0       	breq	.+10     	; 0xe294 <mmc_disk_ioctl+0x458>
    e28a:	f7 01       	movw	r30, r14
    e28c:	81 91       	ld	r24, Z+
    e28e:	7f 01       	movw	r14, r30
    e290:	cd db       	rcall	.-2150   	; 0xda2c <xchg_spi>
    e292:	f8 cf       	rjmp	.-16     	; 0xe284 <mmc_disk_ioctl+0x448>
    e294:	f8 01       	movw	r30, r16
    e296:	81 81       	ldd	r24, Z+1	; 0x01
    e298:	92 81       	ldd	r25, Z+2	; 0x02
    e29a:	02 e0       	ldi	r16, 0x02	; 2
    e29c:	12 e0       	ldi	r17, 0x02	; 2
    e29e:	08 1b       	sub	r16, r24
    e2a0:	19 0b       	sbc	r17, r25
    e2a2:	8f ef       	ldi	r24, 0xFF	; 255
    e2a4:	01 15       	cp	r16, r1
    e2a6:	11 05       	cpc	r17, r1
    e2a8:	09 f4       	brne	.+2      	; 0xe2ac <mmc_disk_ioctl+0x470>
    e2aa:	3b c0       	rjmp	.+118    	; 0xe322 <mmc_disk_ioctl+0x4e6>
    e2ac:	bf db       	rcall	.-2178   	; 0xda2c <xchg_spi>
    e2ae:	01 50       	subi	r16, 0x01	; 1
    e2b0:	11 09       	sbc	r17, r1
    e2b2:	f7 cf       	rjmp	.-18     	; 0xe2a2 <mmc_disk_ioctl+0x466>
    e2b4:	fb 01       	movw	r30, r22
    e2b6:	43 81       	ldd	r20, Z+3	; 0x03
    e2b8:	54 81       	ldd	r21, Z+4	; 0x04
    e2ba:	65 81       	ldd	r22, Z+5	; 0x05
    e2bc:	76 81       	ldd	r23, Z+6	; 0x06
    e2be:	89 e0       	ldi	r24, 0x09	; 9
    e2c0:	44 0f       	add	r20, r20
    e2c2:	55 1f       	adc	r21, r21
    e2c4:	66 1f       	adc	r22, r22
    e2c6:	77 1f       	adc	r23, r23
    e2c8:	8a 95       	dec	r24
    e2ca:	d1 f7       	brne	.-12     	; 0xe2c0 <mmc_disk_ioctl+0x484>
    e2cc:	74 68       	ori	r23, 0x84	; 132
    e2ce:	80 81       	ld	r24, Z
    e2d0:	90 e0       	ldi	r25, 0x00	; 0
    e2d2:	a0 e0       	ldi	r26, 0x00	; 0
    e2d4:	b0 e0       	ldi	r27, 0x00	; 0
    e2d6:	2c e1       	ldi	r18, 0x1C	; 28
    e2d8:	88 0f       	add	r24, r24
    e2da:	99 1f       	adc	r25, r25
    e2dc:	aa 1f       	adc	r26, r26
    e2de:	bb 1f       	adc	r27, r27
    e2e0:	2a 95       	dec	r18
    e2e2:	d1 f7       	brne	.-12     	; 0xe2d8 <mmc_disk_ioctl+0x49c>
    e2e4:	48 2b       	or	r20, r24
    e2e6:	59 2b       	or	r21, r25
    e2e8:	6a 2b       	or	r22, r26
    e2ea:	7b 2b       	or	r23, r27
    e2ec:	82 81       	ldd	r24, Z+2	; 0x02
    e2ee:	90 e0       	ldi	r25, 0x00	; 0
    e2f0:	a0 e0       	ldi	r26, 0x00	; 0
    e2f2:	b0 e0       	ldi	r27, 0x00	; 0
    e2f4:	48 2b       	or	r20, r24
    e2f6:	59 2b       	or	r21, r25
    e2f8:	6a 2b       	or	r22, r26
    e2fa:	7b 2b       	or	r23, r27
    e2fc:	81 e3       	ldi	r24, 0x31	; 49
    e2fe:	02 dc       	rcall	.-2044   	; 0xdb04 <send_cmd>
    e300:	81 11       	cpse	r24, r1
    e302:	17 c0       	rjmp	.+46     	; 0xe332 <mmc_disk_ioctl+0x4f6>
    e304:	8f ef       	ldi	r24, 0xFF	; 255
    e306:	92 db       	rcall	.-2268   	; 0xda2c <xchg_spi>
    e308:	8e ef       	ldi	r24, 0xFE	; 254
    e30a:	90 db       	rcall	.-2272   	; 0xda2c <xchg_spi>
    e30c:	f8 01       	movw	r30, r16
    e30e:	81 81       	ldd	r24, Z+1	; 0x01
    e310:	8d db       	rcall	.-2278   	; 0xda2c <xchg_spi>
    e312:	01 e0       	ldi	r16, 0x01	; 1
    e314:	12 e0       	ldi	r17, 0x02	; 2
    e316:	8f ef       	ldi	r24, 0xFF	; 255
    e318:	89 db       	rcall	.-2286   	; 0xda2c <xchg_spi>
    e31a:	01 50       	subi	r16, 0x01	; 1
    e31c:	11 09       	sbc	r17, r1
    e31e:	d9 f7       	brne	.-10     	; 0xe316 <mmc_disk_ioctl+0x4da>
    e320:	8f ef       	ldi	r24, 0xFF	; 255
    e322:	8e d0       	rcall	.+284    	; 0xe440 <mmc_spi_TXRX>
    e324:	8f 71       	andi	r24, 0x1F	; 31
    e326:	01 e0       	ldi	r16, 0x01	; 1
    e328:	10 e0       	ldi	r17, 0x00	; 0
    e32a:	85 30       	cpi	r24, 0x05	; 5
    e32c:	21 f4       	brne	.+8      	; 0xe336 <mmc_disk_ioctl+0x4fa>
    e32e:	00 e0       	ldi	r16, 0x00	; 0
    e330:	02 c0       	rjmp	.+4      	; 0xe336 <mmc_disk_ioctl+0x4fa>
    e332:	01 e0       	ldi	r16, 0x01	; 1
    e334:	10 e0       	ldi	r17, 0x00	; 0
    e336:	7c db       	rcall	.-2312   	; 0xda30 <deselect>
    e338:	04 c0       	rjmp	.+8      	; 0xe342 <mmc_disk_ioctl+0x506>
    e33a:	03 e0       	ldi	r16, 0x03	; 3
    e33c:	01 c0       	rjmp	.+2      	; 0xe340 <mmc_disk_ioctl+0x504>
    e33e:	04 e0       	ldi	r16, 0x04	; 4
    e340:	10 e0       	ldi	r17, 0x00	; 0
    e342:	c8 01       	movw	r24, r16
    e344:	60 96       	adiw	r28, 0x10	; 16
    e346:	e8 e0       	ldi	r30, 0x08	; 8
    e348:	0c 94 b5 e9 	jmp	0x1d36a	; 0x1d36a <__epilogue_restores__+0x14>

0000e34c <mmc_disk_timerproc>:
    e34c:	80 91 76 18 	lds	r24, 0x1876	; 0x801876 <Timer1>
    e350:	88 23       	and	r24, r24
    e352:	19 f0       	breq	.+6      	; 0xe35a <mmc_disk_timerproc+0xe>
    e354:	81 50       	subi	r24, 0x01	; 1
    e356:	80 93 76 18 	sts	0x1876, r24	; 0x801876 <Timer1>
    e35a:	80 91 75 18 	lds	r24, 0x1875	; 0x801875 <Timer2>
    e35e:	88 23       	and	r24, r24
    e360:	19 f0       	breq	.+6      	; 0xe368 <mmc_disk_timerproc+0x1c>
    e362:	81 50       	subi	r24, 0x01	; 1
    e364:	80 93 75 18 	sts	0x1875, r24	; 0x801875 <Timer2>
    e368:	08 95       	ret

0000e36a <mmc_task>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    e36a:	80 91 7d 18 	lds	r24, 0x187D	; 0x80187d <_mmc_timeout>
    e36e:	90 91 7e 18 	lds	r25, 0x187E	; 0x80187e <_mmc_timeout+0x1>
    e372:	00 97       	sbiw	r24, 0x00	; 0
    e374:	29 f0       	breq	.+10     	; 0xe380 <mmc_task+0x16>
    e376:	01 97       	sbiw	r24, 0x01	; 1
    e378:	90 93 7e 18 	sts	0x187E, r25	; 0x80187e <_mmc_timeout+0x1>
    e37c:	80 93 7d 18 	sts	0x187D, r24	; 0x80187d <_mmc_timeout>
    e380:	80 91 77 18 	lds	r24, 0x1877	; 0x801877 <_mmc_pre>
    e384:	90 91 78 18 	lds	r25, 0x1878	; 0x801878 <_mmc_pre+0x1>
    e388:	8a 30       	cpi	r24, 0x0A	; 10
    e38a:	91 05       	cpc	r25, r1
    e38c:	30 f4       	brcc	.+12     	; 0xe39a <mmc_task+0x30>
    e38e:	01 96       	adiw	r24, 0x01	; 1
    e390:	90 93 78 18 	sts	0x1878, r25	; 0x801878 <_mmc_pre+0x1>
    e394:	80 93 77 18 	sts	0x1877, r24	; 0x801877 <_mmc_pre>
    e398:	08 95       	ret
    e39a:	10 92 78 18 	sts	0x1878, r1	; 0x801878 <_mmc_pre+0x1>
    e39e:	10 92 77 18 	sts	0x1877, r1	; 0x801877 <_mmc_pre>
    e3a2:	d4 cf       	rjmp	.-88     	; 0xe34c <mmc_disk_timerproc>
    e3a4:	08 95       	ret

0000e3a6 <mmc_install_timer>:
    e3a6:	10 92 7e 18 	sts	0x187E, r1	; 0x80187e <_mmc_timeout+0x1>
    e3aa:	10 92 7d 18 	sts	0x187D, r1	; 0x80187d <_mmc_timeout>
    e3ae:	61 e0       	ldi	r22, 0x01	; 1
    e3b0:	70 e0       	ldi	r23, 0x00	; 0
    e3b2:	85 eb       	ldi	r24, 0xB5	; 181
    e3b4:	91 e7       	ldi	r25, 0x71	; 113
    e3b6:	0e 94 8f 33 	call	0x671e	; 0x671e <set_timers>
    e3ba:	01 96       	adiw	r24, 0x01	; 1
    e3bc:	51 f4       	brne	.+20     	; 0xe3d2 <mmc_install_timer+0x2c>
    e3be:	87 e4       	ldi	r24, 0x47	; 71
    e3c0:	98 e0       	ldi	r25, 0x08	; 8
    e3c2:	1f 92       	push	r1
    e3c4:	9f 93       	push	r25
    e3c6:	8f 93       	push	r24
    e3c8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    e3cc:	0f 90       	pop	r0
    e3ce:	0f 90       	pop	r0
    e3d0:	0f 90       	pop	r0
    e3d2:	08 95       	ret

0000e3d4 <mmc_spi_begin>:
    e3d4:	60 91 79 18 	lds	r22, 0x1879	; 0x801879 <_mmc_clock>
    e3d8:	70 91 7a 18 	lds	r23, 0x187A	; 0x80187a <_mmc_clock+0x1>
    e3dc:	80 91 7b 18 	lds	r24, 0x187B	; 0x80187b <_mmc_clock+0x2>
    e3e0:	90 91 7c 18 	lds	r25, 0x187C	; 0x80187c <_mmc_clock+0x3>
    e3e4:	4b e0       	ldi	r20, 0x0B	; 11
    e3e6:	50 e0       	ldi	r21, 0x00	; 0
    e3e8:	0c 94 e3 28 	jmp	0x51c6	; 0x51c6 <spi_begin>
    e3ec:	08 95       	ret

0000e3ee <mmc_spi_end>:
    e3ee:	8b e0       	ldi	r24, 0x0B	; 11
    e3f0:	0c 94 8d 28 	jmp	0x511a	; 0x511a <spi_end>
    e3f4:	08 95       	ret

0000e3f6 <mmc_slow>:
    e3f6:	80 e2       	ldi	r24, 0x20	; 32
    e3f8:	91 ea       	ldi	r25, 0xA1	; 161
    e3fa:	a7 e0       	ldi	r26, 0x07	; 7
    e3fc:	b0 e0       	ldi	r27, 0x00	; 0
    e3fe:	80 93 79 18 	sts	0x1879, r24	; 0x801879 <_mmc_clock>
    e402:	90 93 7a 18 	sts	0x187A, r25	; 0x80187a <_mmc_clock+0x1>
    e406:	a0 93 7b 18 	sts	0x187B, r26	; 0x80187b <_mmc_clock+0x2>
    e40a:	b0 93 7c 18 	sts	0x187C, r27	; 0x80187c <_mmc_clock+0x3>
    e40e:	08 95       	ret

0000e410 <mmc_spi_init>:
    e410:	8b e0       	ldi	r24, 0x0B	; 11
    e412:	0e 94 8b 28 	call	0x5116	; 0x5116 <chip_select_init>
    e416:	ef cf       	rjmp	.-34     	; 0xe3f6 <mmc_slow>
    e418:	08 95       	ret

0000e41a <mmc_fast>:
    e41a:	80 ea       	ldi	r24, 0xA0	; 160
    e41c:	95 e2       	ldi	r25, 0x25	; 37
    e41e:	a6 e2       	ldi	r26, 0x26	; 38
    e420:	b0 e0       	ldi	r27, 0x00	; 0
    e422:	80 93 79 18 	sts	0x1879, r24	; 0x801879 <_mmc_clock>
    e426:	90 93 7a 18 	sts	0x187A, r25	; 0x80187a <_mmc_clock+0x1>
    e42a:	a0 93 7b 18 	sts	0x187B, r26	; 0x80187b <_mmc_clock+0x2>
    e42e:	b0 93 7c 18 	sts	0x187C, r27	; 0x80187c <_mmc_clock+0x3>
    e432:	08 95       	ret

0000e434 <mmc_spi_TX_buffer>:
    e434:	0c 94 af 28 	jmp	0x515e	; 0x515e <spi_TX_buffer>
    e438:	08 95       	ret

0000e43a <mmc_spi_RX_buffer>:
    e43a:	0c 94 b1 28 	jmp	0x5162	; 0x5162 <spi_RX_buffer>
    e43e:	08 95       	ret

0000e440 <mmc_spi_TXRX>:
    e440:	0c 94 1f 29 	jmp	0x523e	; 0x523e <spi_TXRX>
    e444:	08 95       	ret

0000e446 <mmc_set_ms_timeout>:
    e446:	f8 94       	cli
    e448:	90 93 7e 18 	sts	0x187E, r25	; 0x80187e <_mmc_timeout+0x1>
    e44c:	80 93 7d 18 	sts	0x187D, r24	; 0x80187d <_mmc_timeout>
    e450:	78 94       	sei
    e452:	08 95       	ret

0000e454 <mmc_test_timeout>:
    e454:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Stat>
    e458:	81 fd       	sbrc	r24, 1
    e45a:	15 c0       	rjmp	.+42     	; 0xe486 <mmc_test_timeout+0x32>
    e45c:	80 91 7d 18 	lds	r24, 0x187D	; 0x80187d <_mmc_timeout>
    e460:	90 91 7e 18 	lds	r25, 0x187E	; 0x80187e <_mmc_timeout+0x1>
    e464:	89 2b       	or	r24, r25
    e466:	91 f4       	brne	.+36     	; 0xe48c <mmc_test_timeout+0x38>
    e468:	8a e3       	ldi	r24, 0x3A	; 58
    e46a:	98 e0       	ldi	r25, 0x08	; 8
    e46c:	1f 92       	push	r1
    e46e:	9f 93       	push	r25
    e470:	8f 93       	push	r24
    e472:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    e476:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Stat>
    e47a:	83 60       	ori	r24, 0x03	; 3
    e47c:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <Stat>
    e480:	0f 90       	pop	r0
    e482:	0f 90       	pop	r0
    e484:	0f 90       	pop	r0
    e486:	81 e0       	ldi	r24, 0x01	; 1
    e488:	90 e0       	ldi	r25, 0x00	; 0
    e48a:	08 95       	ret
    e48c:	80 e0       	ldi	r24, 0x00	; 0
    e48e:	90 e0       	ldi	r25, 0x00	; 0
    e490:	08 95       	ret

0000e492 <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    e492:	a4 e0       	ldi	r26, 0x04	; 4
    e494:	b0 e0       	ldi	r27, 0x00	; 0
    e496:	ef e4       	ldi	r30, 0x4F	; 79
    e498:	f2 e7       	ldi	r31, 0x72	; 114
    e49a:	0c 94 9b e9 	jmp	0x1d336	; 0x1d336 <__prologue_saves__+0x18>
    e49e:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    e4a0:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <Stat>

    mmc_spi_init();

    if( verbose)
    e4a4:	b5 df       	rcall	.-150    	; 0xe410 <mmc_spi_init>
    e4a6:	e1 14       	cp	r14, r1
    e4a8:	f1 04       	cpc	r15, r1
    {
        printf("START MMC INIT\n");
    e4aa:	51 f0       	breq	.+20     	; 0xe4c0 <mmc_init+0x2e>
    e4ac:	8a e2       	ldi	r24, 0x2A	; 42
    e4ae:	98 e0       	ldi	r25, 0x08	; 8
    e4b0:	1f 92       	push	r1
    e4b2:	9f 93       	push	r25
    e4b4:	8f 93       	push	r24
    e4b6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    e4ba:	0f 90       	pop	r0
    e4bc:	0f 90       	pop	r0
    }
    // we only install timers once!
    if(!mmc_init_flag)
    e4be:	0f 90       	pop	r0
    e4c0:	80 91 7f 18 	lds	r24, 0x187F	; 0x80187f <mmc_init_flag>
    e4c4:	90 91 80 18 	lds	r25, 0x1880	; 0x801880 <mmc_init_flag+0x1>
        mmc_install_timer();
    e4c8:	89 2b       	or	r24, r25
    e4ca:	09 f4       	brne	.+2      	; 0xe4ce <mmc_init+0x3c>

    if( verbose)
    e4cc:	6c df       	rcall	.-296    	; 0xe3a6 <mmc_install_timer>
    e4ce:	e1 14       	cp	r14, r1
    e4d0:	f1 04       	cpc	r15, r1
    {
#if defined (_USE_LFN)
        printf("LFN Enabled");
    e4d2:	b9 f0       	breq	.+46     	; 0xe502 <mmc_init+0x70>
    e4d4:	8e e1       	ldi	r24, 0x1E	; 30
    e4d6:	98 e0       	ldi	r25, 0x08	; 8
    e4d8:	1f 92       	push	r1
    e4da:	9f 93       	push	r25
    e4dc:	8f 93       	push	r24
    e4de:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", _CODE_PAGE);
    e4e2:	81 e0       	ldi	r24, 0x01	; 1
    e4e4:	8f 93       	push	r24
    e4e6:	85 eb       	ldi	r24, 0xB5	; 181
    e4e8:	8f 93       	push	r24
    e4ea:	8d e0       	ldi	r24, 0x0D	; 13
    e4ec:	98 e0       	ldi	r25, 0x08	; 8
    e4ee:	1f 92       	push	r1
    e4f0:	9f 93       	push	r25
    e4f2:	8f 93       	push	r24
    e4f4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    e4f8:	0f b6       	in	r0, 0x3f	; 63
    e4fa:	f8 94       	cli
    e4fc:	de bf       	out	0x3e, r29	; 62
    }

    rc = disk_initialize(0);    // aliased to mmc_disk_initialize()
    e4fe:	0f be       	out	0x3f, r0	; 63
    e500:	cd bf       	out	0x3d, r28	; 61
    e502:	80 e0       	ldi	r24, 0x00	; 0
    e504:	63 da       	rcall	.-2874   	; 0xd9cc <disk_initialize>
    e506:	08 2f       	mov	r16, r24

    if( rc != RES_OK  || verbose )
    e508:	10 e0       	ldi	r17, 0x00	; 0
    e50a:	01 15       	cp	r16, r1
    e50c:	11 05       	cpc	r17, r1
    e50e:	71 f4       	brne	.+28     	; 0xe52c <mmc_init+0x9a>
    e510:	e1 14       	cp	r14, r1
    e512:	f1 04       	cpc	r15, r1
        put_rc(rc);
    }

    if( rc == RES_OK)
    {
        rc = f_mount(&Fatfs[0],"/", 0);
    e514:	59 f4       	brne	.+22     	; 0xe52c <mmc_init+0x9a>
    e516:	40 e0       	ldi	r20, 0x00	; 0
    e518:	61 ea       	ldi	r22, 0xA1	; 161
    e51a:	78 e0       	ldi	r23, 0x08	; 8
    e51c:	8b ec       	ldi	r24, 0xCB	; 203
    e51e:	9a e1       	ldi	r25, 0x1A	; 26
    e520:	0e 94 b8 56 	call	0xad70	; 0xad70 <f_mount>
    }

    if( rc != RES_OK || verbose)
    e524:	8c 01       	movw	r16, r24
    e526:	89 2b       	or	r24, r25

    rc = disk_initialize(0);    // aliased to mmc_disk_initialize()

    if( rc != RES_OK  || verbose )
    {
        put_rc(rc);
    e528:	39 f0       	breq	.+14     	; 0xe538 <mmc_init+0xa6>
    e52a:	0a c0       	rjmp	.+20     	; 0xe540 <mmc_init+0xae>
    e52c:	c8 01       	movw	r24, r16
    }

    if( rc == RES_OK)
    e52e:	dc d0       	rcall	.+440    	; 0xe6e8 <put_rc>
    e530:	01 15       	cp	r16, r1
    e532:	11 05       	cpc	r17, r1
    e534:	29 f4       	brne	.+10     	; 0xe540 <mmc_init+0xae>
    {
        rc = f_mount(&Fatfs[0],"/", 0);
    }

    if( rc != RES_OK || verbose)
    e536:	ef cf       	rjmp	.-34     	; 0xe516 <mmc_init+0x84>
    e538:	e1 14       	cp	r14, r1
    e53a:	f1 04       	cpc	r15, r1
    {
        put_rc( rc );
    e53c:	09 f4       	brne	.+2      	; 0xe540 <mmc_init+0xae>
    e53e:	43 c0       	rjmp	.+134    	; 0xe5c6 <mmc_init+0x134>
    e540:	c8 01       	movw	r24, r16
    }

    if (verbose )
    e542:	d2 d0       	rcall	.+420    	; 0xe6e8 <put_rc>
    e544:	e1 14       	cp	r14, r1
    e546:	f1 04       	cpc	r15, r1
    e548:	09 f4       	brne	.+2      	; 0xe54c <mmc_init+0xba>
    {
        DWORD blksize = 0;
    e54a:	3d c0       	rjmp	.+122    	; 0xe5c6 <mmc_init+0x134>
    e54c:	19 82       	std	Y+1, r1	; 0x01
    e54e:	1a 82       	std	Y+2, r1	; 0x02
    e550:	1b 82       	std	Y+3, r1	; 0x03
        if(rc == RES_OK)
    e552:	1c 82       	std	Y+4, r1	; 0x04
    e554:	01 15       	cp	r16, r1
        {
            rc = disk_ioctl ( 0, GET_BLOCK_SIZE, (void *) &blksize);
    e556:	11 05       	cpc	r17, r1
    e558:	61 f5       	brne	.+88     	; 0xe5b2 <mmc_init+0x120>
    e55a:	ae 01       	movw	r20, r28
    e55c:	4f 5f       	subi	r20, 0xFF	; 255
    e55e:	5f 4f       	sbci	r21, 0xFF	; 255
    e560:	63 e0       	ldi	r22, 0x03	; 3
            if( rc != RES_OK)
    e562:	80 e0       	ldi	r24, 0x00	; 0
    e564:	59 da       	rcall	.-2894   	; 0xda18 <disk_ioctl>
            {
                put_rc( rc );
    e566:	8c 01       	movw	r16, r24
    e568:	00 97       	sbiw	r24, 0x00	; 0
                printf("MMC Block Size - read failed\n");
    e56a:	61 f0       	breq	.+24     	; 0xe584 <mmc_init+0xf2>
    e56c:	bd d0       	rcall	.+378    	; 0xe6e8 <put_rc>
    e56e:	8f ee       	ldi	r24, 0xEF	; 239
    e570:	97 e0       	ldi	r25, 0x07	; 7
    e572:	1f 92       	push	r1
    e574:	9f 93       	push	r25
    e576:	8f 93       	push	r24
    e578:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    e57c:	0f 90       	pop	r0
    e57e:	0f 90       	pop	r0
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    e580:	0f 90       	pop	r0
    e582:	17 c0       	rjmp	.+46     	; 0xe5b2 <mmc_init+0x120>
    e584:	8c 81       	ldd	r24, Y+4	; 0x04
    e586:	8f 93       	push	r24
    e588:	8b 81       	ldd	r24, Y+3	; 0x03
    e58a:	8f 93       	push	r24
    e58c:	8a 81       	ldd	r24, Y+2	; 0x02
    e58e:	8f 93       	push	r24
    e590:	89 81       	ldd	r24, Y+1	; 0x01
    e592:	8f 93       	push	r24
    e594:	8a ed       	ldi	r24, 0xDA	; 218
    e596:	97 e0       	ldi	r25, 0x07	; 7
    e598:	1f 92       	push	r1
    e59a:	9f 93       	push	r25
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    e59c:	8f 93       	push	r24
    e59e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    e5a2:	81 ea       	ldi	r24, 0xA1	; 161
    e5a4:	98 e0       	ldi	r25, 0x08	; 8
    e5a6:	2e d1       	rcall	.+604    	; 0xe804 <fatfs_status>
    e5a8:	0f b6       	in	r0, 0x3f	; 63
    e5aa:	f8 94       	cli
    e5ac:	de bf       	out	0x3e, r29	; 62
            }
        }
        printf("END MMC INIT\n");
    e5ae:	0f be       	out	0x3f, r0	; 63
    e5b0:	cd bf       	out	0x3d, r28	; 61
    e5b2:	8c ec       	ldi	r24, 0xCC	; 204
    e5b4:	97 e0       	ldi	r25, 0x07	; 7
    e5b6:	1f 92       	push	r1
    e5b8:	9f 93       	push	r25
    e5ba:	8f 93       	push	r24
    e5bc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    e5c0:	0f 90       	pop	r0
    }
    mmc_init_flag = 1;
    e5c2:	0f 90       	pop	r0
    e5c4:	0f 90       	pop	r0
    e5c6:	81 e0       	ldi	r24, 0x01	; 1
    e5c8:	90 e0       	ldi	r25, 0x00	; 0
    e5ca:	90 93 80 18 	sts	0x1880, r25	; 0x801880 <mmc_init_flag+0x1>

    return( rc ) ;
}
    e5ce:	80 93 7f 18 	sts	0x187F, r24	; 0x80187f <mmc_init_flag>
    e5d2:	c8 01       	movw	r24, r16
    e5d4:	24 96       	adiw	r28, 0x04	; 4
    e5d6:	e6 e0       	ldi	r30, 0x06	; 6
    e5d8:	0c 94 b7 e9 	jmp	0x1d36e	; 0x1d36e <__epilogue_restores__+0x18>

0000e5dc <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    e5dc:	08 95       	ret

0000e5de <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
    return (1);
}
    e5de:	81 e0       	ldi	r24, 0x01	; 1
    e5e0:	90 e0       	ldi	r25, 0x00	; 0
    e5e2:	08 95       	ret

0000e5e4 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    e5e4:	80 e0       	ldi	r24, 0x00	; 0
    e5e6:	90 e0       	ldi	r25, 0x00	; 0
    e5e8:	08 95       	ret

0000e5ea <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    e5ea:	0f 93       	push	r16
    e5ec:	1f 93       	push	r17
    e5ee:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    e5f0:	46 81       	ldd	r20, Z+6	; 0x06
    e5f2:	57 81       	ldd	r21, Z+7	; 0x07
    e5f4:	05 2e       	mov	r0, r21
    e5f6:	00 0c       	add	r0, r0
    e5f8:	66 0b       	sbc	r22, r22
    e5fa:	77 0b       	sbc	r23, r23
    e5fc:	ba 01       	movw	r22, r20
    e5fe:	55 27       	eor	r21, r21
    e600:	44 27       	eor	r20, r20
    e602:	84 81       	ldd	r24, Z+4	; 0x04
    e604:	95 81       	ldd	r25, Z+5	; 0x05
    e606:	09 2e       	mov	r0, r25
    e608:	00 0c       	add	r0, r0
    e60a:	aa 0b       	sbc	r26, r26
    e60c:	bb 0b       	sbc	r27, r27
    e60e:	2b e0       	ldi	r18, 0x0B	; 11
    e610:	88 0f       	add	r24, r24
    e612:	99 1f       	adc	r25, r25
    e614:	aa 1f       	adc	r26, r26
    e616:	bb 1f       	adc	r27, r27
    e618:	2a 95       	dec	r18
    e61a:	d1 f7       	brne	.-12     	; 0xe610 <tm_to_fat+0x26>
    e61c:	48 2b       	or	r20, r24
    e61e:	59 2b       	or	r21, r25
    e620:	6a 2b       	or	r22, r26
    e622:	7b 2b       	or	r23, r27
    e624:	82 81       	ldd	r24, Z+2	; 0x02
    e626:	93 81       	ldd	r25, Z+3	; 0x03
    e628:	09 2e       	mov	r0, r25
    e62a:	00 0c       	add	r0, r0
    e62c:	aa 0b       	sbc	r26, r26
    e62e:	bb 0b       	sbc	r27, r27
    e630:	35 e0       	ldi	r19, 0x05	; 5
    e632:	88 0f       	add	r24, r24
    e634:	99 1f       	adc	r25, r25
    e636:	aa 1f       	adc	r26, r26
    e638:	bb 1f       	adc	r27, r27
    e63a:	3a 95       	dec	r19
    e63c:	d1 f7       	brne	.-12     	; 0xe632 <tm_to_fat+0x48>
    e63e:	48 2b       	or	r20, r24
    e640:	59 2b       	or	r21, r25
    e642:	6a 2b       	or	r22, r26
    e644:	7b 2b       	or	r23, r27
    e646:	80 81       	ld	r24, Z
    e648:	91 81       	ldd	r25, Z+1	; 0x01
    e64a:	09 2e       	mov	r0, r25
    e64c:	00 0c       	add	r0, r0
    e64e:	aa 0b       	sbc	r26, r26
    e650:	bb 0b       	sbc	r27, r27
    e652:	b6 95       	lsr	r27
    e654:	a7 95       	ror	r26
    e656:	97 95       	ror	r25
    e658:	87 95       	ror	r24
    e65a:	84 2b       	or	r24, r20
    e65c:	95 2b       	or	r25, r21
    e65e:	a6 2b       	or	r26, r22
    e660:	b7 2b       	or	r27, r23
    e662:	02 85       	ldd	r16, Z+10	; 0x0a
    e664:	13 85       	ldd	r17, Z+11	; 0x0b
    e666:	00 55       	subi	r16, 0x50	; 80
    e668:	11 09       	sbc	r17, r1
    e66a:	01 2e       	mov	r0, r17
    e66c:	00 0c       	add	r0, r0
    e66e:	22 0b       	sbc	r18, r18
    e670:	33 0b       	sbc	r19, r19
    e672:	49 e1       	ldi	r20, 0x19	; 25
    e674:	00 0f       	add	r16, r16
    e676:	11 1f       	adc	r17, r17
    e678:	22 1f       	adc	r18, r18
    e67a:	33 1f       	adc	r19, r19
    e67c:	4a 95       	dec	r20
    e67e:	d1 f7       	brne	.-12     	; 0xe674 <tm_to_fat+0x8a>
    e680:	ac 01       	movw	r20, r24
    e682:	bd 01       	movw	r22, r26
    e684:	40 2b       	or	r20, r16
    e686:	51 2b       	or	r21, r17
    e688:	62 2b       	or	r22, r18
    e68a:	73 2b       	or	r23, r19
    e68c:	80 85       	ldd	r24, Z+8	; 0x08
    e68e:	91 85       	ldd	r25, Z+9	; 0x09
    e690:	09 2e       	mov	r0, r25
    e692:	00 0c       	add	r0, r0
    e694:	aa 0b       	sbc	r26, r26
    e696:	bb 0b       	sbc	r27, r27
    e698:	01 96       	adiw	r24, 0x01	; 1
    e69a:	a1 1d       	adc	r26, r1
    e69c:	b1 1d       	adc	r27, r1
    e69e:	e5 e1       	ldi	r30, 0x15	; 21
    e6a0:	88 0f       	add	r24, r24
    e6a2:	99 1f       	adc	r25, r25
    e6a4:	aa 1f       	adc	r26, r26
    e6a6:	bb 1f       	adc	r27, r27
    e6a8:	ea 95       	dec	r30
    e6aa:	d1 f7       	brne	.-12     	; 0xe6a0 <tm_to_fat+0xb6>
    e6ac:	8a 01       	movw	r16, r20
    e6ae:	9b 01       	movw	r18, r22
    e6b0:	08 2b       	or	r16, r24
    e6b2:	19 2b       	or	r17, r25
    e6b4:	2a 2b       	or	r18, r26
    e6b6:	3b 2b       	or	r19, r27
    e6b8:	c9 01       	movw	r24, r18
    e6ba:	b8 01       	movw	r22, r16
}
    e6bc:	1f 91       	pop	r17
    e6be:	0f 91       	pop	r16
    e6c0:	08 95       	ret

0000e6c2 <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    e6c2:	a4 e0       	ldi	r26, 0x04	; 4
    e6c4:	b0 e0       	ldi	r27, 0x00	; 0
    e6c6:	e7 e6       	ldi	r30, 0x67	; 103
    e6c8:	f3 e7       	ldi	r31, 0x73	; 115
    e6ca:	0c 94 9f e9 	jmp	0x1d33e	; 0x1d33e <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    e6ce:	ce 01       	movw	r24, r28
    e6d0:	01 96       	adiw	r24, 0x01	; 1
    e6d2:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <time>
    return( tm_to_fat(localtime(&t)));
    e6d6:	ce 01       	movw	r24, r28
    e6d8:	01 96       	adiw	r24, 0x01	; 1
    e6da:	0e 94 63 37 	call	0x6ec6	; 0x6ec6 <localtime>
    e6de:	85 df       	rcall	.-246    	; 0xe5ea <tm_to_fat>
}
    e6e0:	24 96       	adiw	r28, 0x04	; 4
    e6e2:	e2 e0       	ldi	r30, 0x02	; 2
    e6e4:	0c 94 bb e9 	jmp	0x1d376	; 0x1d376 <__epilogue_restores__+0x20>

0000e6e8 <put_rc>:
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    e6e8:	9f 93       	push	r25
    e6ea:	8f 93       	push	r24
    e6ec:	87 e5       	ldi	r24, 0x57	; 87
    e6ee:	9a e0       	ldi	r25, 0x0A	; 10
    e6f0:	1f 92       	push	r1
    e6f2:	9f 93       	push	r25
    e6f4:	8f 93       	push	r24
    e6f6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
}
    e6fa:	0f 90       	pop	r0
    e6fc:	0f 90       	pop	r0
    e6fe:	0f 90       	pop	r0
    e700:	0f 90       	pop	r0
    e702:	0f 90       	pop	r0
    e704:	08 95       	ret

0000e706 <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    e706:	a4 e4       	ldi	r26, 0x44	; 68
    e708:	b1 e0       	ldi	r27, 0x01	; 1
    e70a:	e9 e8       	ldi	r30, 0x89	; 137
    e70c:	f3 e7       	ldi	r31, 0x73	; 115
    e70e:	0c 94 9a e9 	jmp	0x1d334	; 0x1d334 <__prologue_saves__+0x16>
    e712:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    e714:	bc 01       	movw	r22, r24
    e716:	ce 01       	movw	r24, r28
    e718:	89 5e       	subi	r24, 0xE9	; 233
    e71a:	9e 4f       	sbci	r25, 0xFE	; 254
    e71c:	0e 94 d9 60 	call	0xc1b2	; 0xc1b2 <f_opendir>
    if (fr == FR_OK) {
    e720:	00 97       	sbiw	r24, 0x00	; 0
    e722:	09 f0       	breq	.+2      	; 0xe726 <fatfs_scan_files+0x20>
    e724:	5b c0       	rjmp	.+182    	; 0xe7dc <fatfs_scan_files+0xd6>
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
            if (info.fattrib & AM_DIR) {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e726:	8f e2       	ldi	r24, 0x2F	; 47
    e728:	d8 2e       	mov	r13, r24
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK) {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
    e72a:	be 01       	movw	r22, r28
    e72c:	6f 5f       	subi	r22, 0xFF	; 255
    e72e:	7f 4f       	sbci	r23, 0xFF	; 255
    e730:	ce 01       	movw	r24, r28
    e732:	89 5e       	subi	r24, 0xE9	; 233
    e734:	9e 4f       	sbci	r25, 0xFE	; 254
    e736:	0e 94 61 61 	call	0xc2c2	; 0xc2c2 <f_readdir>
    e73a:	00 97       	sbiw	r24, 0x00	; 0
    e73c:	09 f0       	breq	.+2      	; 0xe740 <fatfs_scan_files+0x3a>
    e73e:	4e c0       	rjmp	.+156    	; 0xe7dc <fatfs_scan_files+0xd6>
    e740:	2f 89       	ldd	r18, Y+23	; 0x17
    e742:	22 23       	and	r18, r18
    e744:	09 f4       	brne	.+2      	; 0xe748 <fatfs_scan_files+0x42>
    e746:	4a c0       	rjmp	.+148    	; 0xe7dc <fatfs_scan_files+0xd6>
            if (info.fattrib & AM_DIR) {
    e748:	89 85       	ldd	r24, Y+9	; 0x09
    e74a:	84 ff       	sbrs	r24, 4
    e74c:	25 c0       	rjmp	.+74     	; 0xe798 <fatfs_scan_files+0x92>
                AccDirs++;
    e74e:	80 91 04 1d 	lds	r24, 0x1D04	; 0x801d04 <AccDirs>
    e752:	90 91 05 1d 	lds	r25, 0x1D05	; 0x801d05 <AccDirs+0x1>
    e756:	01 96       	adiw	r24, 0x01	; 1
    e758:	90 93 05 1d 	sts	0x1D05, r25	; 0x801d05 <AccDirs+0x1>
    e75c:	80 93 04 1d 	sts	0x1D04, r24	; 0x801d04 <AccDirs>
                i = strlen(path);
    e760:	f8 01       	movw	r30, r16
    e762:	01 90       	ld	r0, Z+
    e764:	00 20       	and	r0, r0
    e766:	e9 f7       	brne	.-6      	; 0xe762 <fatfs_scan_files+0x5c>
    e768:	31 97       	sbiw	r30, 0x01	; 1
    e76a:	e0 1b       	sub	r30, r16
    e76c:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e76e:	78 01       	movw	r14, r16
    e770:	ee 0e       	add	r14, r30
    e772:	ff 1e       	adc	r15, r31
    e774:	d7 01       	movw	r26, r14
    e776:	dc 92       	st	X, r13
    e778:	cf 01       	movw	r24, r30
    e77a:	01 96       	adiw	r24, 0x01	; 1
    e77c:	be 01       	movw	r22, r28
    e77e:	69 5e       	subi	r22, 0xE9	; 233
    e780:	7f 4f       	sbci	r23, 0xFF	; 255
    e782:	80 0f       	add	r24, r16
    e784:	91 1f       	adc	r25, r17
    e786:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <strcpy>
                fr = fatfs_scan_files(path);
    e78a:	c8 01       	movw	r24, r16
    e78c:	bc df       	rcall	.-136    	; 0xe706 <fatfs_scan_files>
                path[i] = 0;
    e78e:	f7 01       	movw	r30, r14
    e790:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    e792:	00 97       	sbiw	r24, 0x00	; 0
    e794:	51 f2       	breq	.-108    	; 0xe72a <fatfs_scan_files+0x24>
    e796:	22 c0       	rjmp	.+68     	; 0xe7dc <fatfs_scan_files+0xd6>
            } else {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    e798:	80 91 06 1d 	lds	r24, 0x1D06	; 0x801d06 <AccFiles>
    e79c:	90 91 07 1d 	lds	r25, 0x1D07	; 0x801d07 <AccFiles+0x1>
    e7a0:	01 96       	adiw	r24, 0x01	; 1
    e7a2:	90 93 07 1d 	sts	0x1D07, r25	; 0x801d07 <AccFiles+0x1>
    e7a6:	80 93 06 1d 	sts	0x1D06, r24	; 0x801d06 <AccFiles>
                AccSize += info.fsize;
    e7aa:	40 91 00 1d 	lds	r20, 0x1D00	; 0x801d00 <AccSize>
    e7ae:	50 91 01 1d 	lds	r21, 0x1D01	; 0x801d01 <AccSize+0x1>
    e7b2:	60 91 02 1d 	lds	r22, 0x1D02	; 0x801d02 <AccSize+0x2>
    e7b6:	70 91 03 1d 	lds	r23, 0x1D03	; 0x801d03 <AccSize+0x3>
    e7ba:	89 81       	ldd	r24, Y+1	; 0x01
    e7bc:	9a 81       	ldd	r25, Y+2	; 0x02
    e7be:	ab 81       	ldd	r26, Y+3	; 0x03
    e7c0:	bc 81       	ldd	r27, Y+4	; 0x04
    e7c2:	84 0f       	add	r24, r20
    e7c4:	95 1f       	adc	r25, r21
    e7c6:	a6 1f       	adc	r26, r22
    e7c8:	b7 1f       	adc	r27, r23
    e7ca:	80 93 00 1d 	sts	0x1D00, r24	; 0x801d00 <AccSize>
    e7ce:	90 93 01 1d 	sts	0x1D01, r25	; 0x801d01 <AccSize+0x1>
    e7d2:	a0 93 02 1d 	sts	0x1D02, r26	; 0x801d02 <AccSize+0x2>
    e7d6:	b0 93 03 1d 	sts	0x1D03, r27	; 0x801d03 <AccSize+0x3>
    e7da:	a7 cf       	rjmp	.-178    	; 0xe72a <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e7dc:	cc 5b       	subi	r28, 0xBC	; 188
    e7de:	de 4f       	sbci	r29, 0xFE	; 254
    e7e0:	e7 e0       	ldi	r30, 0x07	; 7
    e7e2:	0c 94 b6 e9 	jmp	0x1d36c	; 0x1d36c <__epilogue_restores__+0x16>

0000e7e6 <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e7e6:	01 97       	sbiw	r24, 0x01	; 1
    e7e8:	84 30       	cpi	r24, 0x04	; 4
    e7ea:	91 05       	cpc	r25, r1
    e7ec:	40 f4       	brcc	.+16     	; 0xe7fe <fatfs_fstype+0x18>
    e7ee:	88 0f       	add	r24, r24
    e7f0:	99 1f       	adc	r25, r25
    e7f2:	fc 01       	movw	r30, r24
    e7f4:	ef 57       	subi	r30, 0x7F	; 127
    e7f6:	f8 4f       	sbci	r31, 0xF8	; 248
    e7f8:	80 81       	ld	r24, Z
    e7fa:	91 81       	ldd	r25, Z+1	; 0x01
    e7fc:	08 95       	ret
    char *ptr;
    switch(type)
    e7fe:	83 ea       	ldi	r24, 0xA3	; 163
    e800:	98 e0       	ldi	r25, 0x08	; 8
        default:
             ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e802:	08 95       	ret

0000e804 <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  void
MEMSPACE
void fatfs_status(char *ptr)
{
    e804:	a4 e2       	ldi	r26, 0x24	; 36
    e806:	b0 e0       	ldi	r27, 0x00	; 0
    e808:	e8 e0       	ldi	r30, 0x08	; 8
    e80a:	f4 e7       	ldi	r31, 0x74	; 116
    e80c:	0c 94 99 e9 	jmp	0x1d332	; 0x1d332 <__prologue_saves__+0x14>
    e810:	8c 01       	movw	r16, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn; // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    e812:	fc 01       	movw	r30, r24
    e814:	21 91       	ld	r18, Z+
    e816:	cf 01       	movw	r24, r30
    e818:	20 32       	cpi	r18, 0x20	; 32
    e81a:	d1 f3       	breq	.-12     	; 0xe810 <fatfs_status+0xc>
    e81c:	29 30       	cpi	r18, 0x09	; 9
    e81e:	c1 f3       	breq	.-16     	; 0xe810 <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    e820:	1f 93       	push	r17
    e822:	0f 93       	push	r16
    e824:	86 e4       	ldi	r24, 0x46	; 70
    e826:	9a e0       	ldi	r25, 0x0A	; 10
    e828:	1f 92       	push	r1
    e82a:	9f 93       	push	r25
    e82c:	8f 93       	push	r24
    e82e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    e832:	ae 01       	movw	r20, r28
    e834:	4d 5d       	subi	r20, 0xDD	; 221
    e836:	5f 4f       	sbci	r21, 0xFF	; 255
    e838:	be 01       	movw	r22, r28
    e83a:	61 5e       	subi	r22, 0xE1	; 225
    e83c:	7f 4f       	sbci	r23, 0xFF	; 255
    e83e:	c8 01       	movw	r24, r16
    e840:	0e 94 e7 61 	call	0xc3ce	; 0xc3ce <f_getfree>
    if (res)
    e844:	0f 90       	pop	r0
    e846:	0f 90       	pop	r0
    e848:	0f 90       	pop	r0
    e84a:	0f 90       	pop	r0
    e84c:	0f 90       	pop	r0
    e84e:	00 97       	sbiw	r24, 0x00	; 0
    e850:	09 f0       	breq	.+2      	; 0xe854 <fatfs_status+0x50>
    e852:	e8 c0       	rjmp	.+464    	; 0xea24 <fatfs_status+0x220>
    {
        put_rc(res);
        return;
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e854:	eb a1       	ldd	r30, Y+35	; 0x23
    e856:	fc a1       	ldd	r31, Y+36	; 0x24
    e858:	80 81       	ld	r24, Z
    e85a:	90 e0       	ldi	r25, 0x00	; 0
    e85c:	c4 df       	rcall	.-120    	; 0xe7e6 <fatfs_fstype>
    e85e:	9f 93       	push	r25
    e860:	8f 93       	push	r24
    e862:	88 e2       	ldi	r24, 0x28	; 40
    e864:	9a e0       	ldi	r25, 0x0A	; 10
    e866:	1f 92       	push	r1
    e868:	9f 93       	push	r25
    e86a:	8f 93       	push	r24
    e86c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e870:	eb a1       	ldd	r30, Y+35	; 0x23
    e872:	fc a1       	ldd	r31, Y+36	; 0x24
    e874:	81 85       	ldd	r24, Z+9	; 0x09
    e876:	92 85       	ldd	r25, Z+10	; 0x0a
    e878:	a0 e0       	ldi	r26, 0x00	; 0
    e87a:	b0 e0       	ldi	r27, 0x00	; 0
    e87c:	49 e0       	ldi	r20, 0x09	; 9
    e87e:	88 0f       	add	r24, r24
    e880:	99 1f       	adc	r25, r25
    e882:	aa 1f       	adc	r26, r26
    e884:	bb 1f       	adc	r27, r27
    e886:	4a 95       	dec	r20
    e888:	d1 f7       	brne	.-12     	; 0xe87e <fatfs_status+0x7a>
    e88a:	bf 93       	push	r27
    e88c:	af 93       	push	r26
    e88e:	9f 93       	push	r25
    e890:	8f 93       	push	r24
    e892:	89 e0       	ldi	r24, 0x09	; 9
    e894:	9a e0       	ldi	r25, 0x0A	; 10
    e896:	1f 92       	push	r1
    e898:	9f 93       	push	r25
    e89a:	8f 93       	push	r24
    e89c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e8a0:	eb a1       	ldd	r30, Y+35	; 0x23
    e8a2:	fc a1       	ldd	r31, Y+36	; 0x24
    e8a4:	82 81       	ldd	r24, Z+2	; 0x02
    e8a6:	1f 92       	push	r1
    e8a8:	8f 93       	push	r24
    e8aa:	8b ee       	ldi	r24, 0xEB	; 235
    e8ac:	99 e0       	ldi	r25, 0x09	; 9
    e8ae:	1f 92       	push	r1
    e8b0:	9f 93       	push	r25
    e8b2:	8f 93       	push	r24
    e8b4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e8b8:	eb a1       	ldd	r30, Y+35	; 0x23
    e8ba:	fc a1       	ldd	r31, Y+36	; 0x24
    e8bc:	80 85       	ldd	r24, Z+8	; 0x08
    e8be:	8f 93       	push	r24
    e8c0:	87 81       	ldd	r24, Z+7	; 0x07
    e8c2:	8f 93       	push	r24
    e8c4:	8d ec       	ldi	r24, 0xCD	; 205
    e8c6:	99 e0       	ldi	r25, 0x09	; 9
    e8c8:	1f 92       	push	r1
    e8ca:	9f 93       	push	r25
    e8cc:	8f 93       	push	r24
    e8ce:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e8d2:	eb a1       	ldd	r30, Y+35	; 0x23
    e8d4:	fc a1       	ldd	r31, Y+36	; 0x24
    e8d6:	80 a1       	ldd	r24, Z+32	; 0x20
    e8d8:	8f 93       	push	r24
    e8da:	87 8d       	ldd	r24, Z+31	; 0x1f
    e8dc:	8f 93       	push	r24
    e8de:	86 8d       	ldd	r24, Z+30	; 0x1e
    e8e0:	8f 93       	push	r24
    e8e2:	85 8d       	ldd	r24, Z+29	; 0x1d
    e8e4:	8f 93       	push	r24
    e8e6:	8e ea       	ldi	r24, 0xAE	; 174
    e8e8:	99 e0       	ldi	r25, 0x09	; 9
    e8ea:	1f 92       	push	r1
    e8ec:	9f 93       	push	r25
    e8ee:	8f 93       	push	r24
    e8f0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e8f4:	eb a1       	ldd	r30, Y+35	; 0x23
    e8f6:	fc a1       	ldd	r31, Y+36	; 0x24
    e8f8:	81 8d       	ldd	r24, Z+25	; 0x19
    e8fa:	92 8d       	ldd	r25, Z+26	; 0x1a
    e8fc:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e8fe:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e900:	02 97       	sbiw	r24, 0x02	; 2
    e902:	a1 09       	sbc	r26, r1
    e904:	b1 09       	sbc	r27, r1
    e906:	bf 93       	push	r27
    e908:	af 93       	push	r26
    e90a:	9f 93       	push	r25
    e90c:	8f 93       	push	r24
    e90e:	8f e8       	ldi	r24, 0x8F	; 143
    e910:	99 e0       	ldi	r25, 0x09	; 9
    e912:	1f 92       	push	r1
    e914:	9f 93       	push	r25
    e916:	8f 93       	push	r24
    e918:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e91c:	0f b6       	in	r0, 0x3f	; 63
    e91e:	f8 94       	cli
    e920:	de bf       	out	0x3e, r29	; 62
    e922:	0f be       	out	0x3f, r0	; 63
    e924:	cd bf       	out	0x3d, r28	; 61
    e926:	eb a1       	ldd	r30, Y+35	; 0x23
    e928:	fc a1       	ldd	r31, Y+36	; 0x24
    e92a:	80 a5       	ldd	r24, Z+40	; 0x28
    e92c:	8f 93       	push	r24
    e92e:	87 a1       	ldd	r24, Z+39	; 0x27
    e930:	8f 93       	push	r24
    e932:	86 a1       	ldd	r24, Z+38	; 0x26
    e934:	8f 93       	push	r24
    e936:	85 a1       	ldd	r24, Z+37	; 0x25
    e938:	8f 93       	push	r24
    e93a:	80 e7       	ldi	r24, 0x70	; 112
    e93c:	99 e0       	ldi	r25, 0x09	; 9
    e93e:	1f 92       	push	r1
    e940:	9f 93       	push	r25
    e942:	8f 93       	push	r24
    e944:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e948:	eb a1       	ldd	r30, Y+35	; 0x23
    e94a:	fc a1       	ldd	r31, Y+36	; 0x24
    e94c:	84 a5       	ldd	r24, Z+44	; 0x2c
    e94e:	8f 93       	push	r24
    e950:	83 a5       	ldd	r24, Z+43	; 0x2b
    e952:	8f 93       	push	r24
    e954:	82 a5       	ldd	r24, Z+42	; 0x2a
    e956:	8f 93       	push	r24
    e958:	81 a5       	ldd	r24, Z+41	; 0x29
    e95a:	8f 93       	push	r24
    e95c:	81 e5       	ldi	r24, 0x51	; 81
    e95e:	99 e0       	ldi	r25, 0x09	; 9
    e960:	1f 92       	push	r1
    e962:	9f 93       	push	r25
    e964:	8f 93       	push	r24
    e966:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e96a:	eb a1       	ldd	r30, Y+35	; 0x23
    e96c:	fc a1       	ldd	r31, Y+36	; 0x24
    e96e:	80 a9       	ldd	r24, Z+48	; 0x30
    e970:	8f 93       	push	r24
    e972:	87 a5       	ldd	r24, Z+47	; 0x2f
    e974:	8f 93       	push	r24
    e976:	86 a5       	ldd	r24, Z+46	; 0x2e
    e978:	8f 93       	push	r24
    e97a:	85 a5       	ldd	r24, Z+45	; 0x2d
    e97c:	8f 93       	push	r24
    e97e:	82 e3       	ldi	r24, 0x32	; 50
    e980:	99 e0       	ldi	r25, 0x09	; 9
    e982:	1f 92       	push	r1
    e984:	9f 93       	push	r25
    e986:	8f 93       	push	r24
    e988:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

#if _USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e98c:	ae 01       	movw	r20, r28
    e98e:	45 5e       	subi	r20, 0xE5	; 229
    e990:	5f 4f       	sbci	r21, 0xFF	; 255
    e992:	be 01       	movw	r22, r28
    e994:	6f 5f       	subi	r22, 0xFF	; 255
    e996:	7f 4f       	sbci	r23, 0xFF	; 255
    e998:	c8 01       	movw	r24, r16
    e99a:	0e 94 79 66 	call	0xccf2	; 0xccf2 <f_getlabel>
    if (res)
    e99e:	0f b6       	in	r0, 0x3f	; 63
    e9a0:	f8 94       	cli
    e9a2:	de bf       	out	0x3e, r29	; 62
    e9a4:	0f be       	out	0x3f, r0	; 63
    e9a6:	cd bf       	out	0x3d, r28	; 61
    e9a8:	00 97       	sbiw	r24, 0x00	; 0
    e9aa:	e1 f5       	brne	.+120    	; 0xea24 <fatfs_status+0x220>
    {
        put_rc(res);
        return;
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e9ac:	89 81       	ldd	r24, Y+1	; 0x01
    e9ae:	81 11       	cpse	r24, r1
    e9b0:	03 c0       	rjmp	.+6      	; 0xe9b8 <fatfs_status+0x1b4>
    e9b2:	8b ea       	ldi	r24, 0xAB	; 171
    e9b4:	98 e0       	ldi	r25, 0x08	; 8
    e9b6:	02 c0       	rjmp	.+4      	; 0xe9bc <fatfs_status+0x1b8>
    e9b8:	ce 01       	movw	r24, r28
    e9ba:	01 96       	adiw	r24, 0x01	; 1
    e9bc:	9f 93       	push	r25
    e9be:	8f 93       	push	r24
    e9c0:	84 e1       	ldi	r24, 0x14	; 20
    e9c2:	99 e0       	ldi	r25, 0x09	; 9
    e9c4:	1f 92       	push	r1
    e9c6:	9f 93       	push	r25
    e9c8:	8f 93       	push	r24
    e9ca:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e9ce:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e9d0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e9d2:	ad 8d       	ldd	r26, Y+29	; 0x1d
    e9d4:	be 8d       	ldd	r27, Y+30	; 0x1e
    e9d6:	9f 93       	push	r25
    e9d8:	8f 93       	push	r24
    e9da:	cd 01       	movw	r24, r26
    e9dc:	aa 27       	eor	r26, r26
    e9de:	bb 27       	eor	r27, r27
    e9e0:	9f 93       	push	r25
    e9e2:	8f 93       	push	r24
    e9e4:	8f ee       	ldi	r24, 0xEF	; 239
    e9e6:	98 e0       	ldi	r25, 0x08	; 8
    e9e8:	1f 92       	push	r1
    e9ea:	9f 93       	push	r25
    e9ec:	8f 93       	push	r24
    e9ee:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e9f2:	10 92 05 1d 	sts	0x1D05, r1	; 0x801d05 <AccDirs+0x1>
    e9f6:	10 92 04 1d 	sts	0x1D04, r1	; 0x801d04 <AccDirs>
    e9fa:	10 92 07 1d 	sts	0x1D07, r1	; 0x801d07 <AccFiles+0x1>
    e9fe:	10 92 06 1d 	sts	0x1D06, r1	; 0x801d06 <AccFiles>
    ea02:	10 92 00 1d 	sts	0x1D00, r1	; 0x801d00 <AccSize>
    ea06:	10 92 01 1d 	sts	0x1D01, r1	; 0x801d01 <AccSize+0x1>
    ea0a:	10 92 02 1d 	sts	0x1D02, r1	; 0x801d02 <AccSize+0x2>
    ea0e:	10 92 03 1d 	sts	0x1D03, r1	; 0x801d03 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    ea12:	c8 01       	movw	r24, r16
    if (res)
    ea14:	78 de       	rcall	.-784    	; 0xe706 <fatfs_scan_files>
    ea16:	0f b6       	in	r0, 0x3f	; 63
    ea18:	f8 94       	cli
    ea1a:	de bf       	out	0x3e, r29	; 62
    ea1c:	0f be       	out	0x3f, r0	; 63
    ea1e:	cd bf       	out	0x3d, r28	; 61
    {
        put_rc(res);
    ea20:	00 97       	sbiw	r24, 0x00	; 0
    ea22:	11 f0       	breq	.+4      	; 0xea28 <fatfs_status+0x224>
        return;
    ea24:	61 de       	rcall	.-830    	; 0xe6e8 <put_rc>
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    ea26:	56 c0       	rjmp	.+172    	; 0xead4 <fatfs_status+0x2d0>
    ea28:	0b a1       	ldd	r16, Y+35	; 0x23
    ea2a:	1c a1       	ldd	r17, Y+36	; 0x24
    ea2c:	f8 01       	movw	r30, r16
    ea2e:	c1 84       	ldd	r12, Z+9	; 0x09
    ea30:	d2 84       	ldd	r13, Z+10	; 0x0a
    ea32:	e1 2c       	mov	r14, r1
    ea34:	f1 2c       	mov	r15, r1
    ea36:	6f 8d       	ldd	r22, Y+31	; 0x1f
    ea38:	78 a1       	ldd	r23, Y+32	; 0x20
    ea3a:	89 a1       	ldd	r24, Y+33	; 0x21
    ea3c:	9a a1       	ldd	r25, Y+34	; 0x22
    ea3e:	a7 01       	movw	r20, r14
    ea40:	96 01       	movw	r18, r12
    ea42:	0e 94 e0 e8 	call	0x1d1c0	; 0x1d1c0 <__mulsi3>
    ea46:	22 e0       	ldi	r18, 0x02	; 2
    ea48:	30 e0       	ldi	r19, 0x00	; 0
    ea4a:	40 e0       	ldi	r20, 0x00	; 0
    ea4c:	50 e0       	ldi	r21, 0x00	; 0
    ea4e:	0e 94 44 e9 	call	0x1d288	; 0x1d288 <__divmodsi4>
    ea52:	5f 93       	push	r21
    ea54:	4f 93       	push	r20
    ea56:	3f 93       	push	r19
    ea58:	2f 93       	push	r18
    ea5a:	f8 01       	movw	r30, r16
    ea5c:	81 8d       	ldd	r24, Z+25	; 0x19
    ea5e:	92 8d       	ldd	r25, Z+26	; 0x1a
    ea60:	a3 8d       	ldd	r26, Z+27	; 0x1b
    ea62:	b4 8d       	ldd	r27, Z+28	; 0x1c
    ea64:	9c 01       	movw	r18, r24
    ea66:	ad 01       	movw	r20, r26
    ea68:	22 50       	subi	r18, 0x02	; 2
    ea6a:	31 09       	sbc	r19, r1
    ea6c:	41 09       	sbc	r20, r1
    ea6e:	51 09       	sbc	r21, r1
    ea70:	c7 01       	movw	r24, r14
    ea72:	b6 01       	movw	r22, r12
    ea74:	0e 94 e0 e8 	call	0x1d1c0	; 0x1d1c0 <__mulsi3>
    ea78:	dc 01       	movw	r26, r24
    ea7a:	cb 01       	movw	r24, r22
    ea7c:	b6 95       	lsr	r27
    ea7e:	a7 95       	ror	r26
    ea80:	97 95       	ror	r25
    ea82:	87 95       	ror	r24
    ea84:	bf 93       	push	r27
    ea86:	af 93       	push	r26
    ea88:	9f 93       	push	r25
    ea8a:	8f 93       	push	r24
    ea8c:	80 91 05 1d 	lds	r24, 0x1D05	; 0x801d05 <AccDirs+0x1>
    ea90:	8f 93       	push	r24
    ea92:	80 91 04 1d 	lds	r24, 0x1D04	; 0x801d04 <AccDirs>
    ea96:	8f 93       	push	r24
    ea98:	80 91 03 1d 	lds	r24, 0x1D03	; 0x801d03 <AccSize+0x3>
    ea9c:	8f 93       	push	r24
    ea9e:	80 91 02 1d 	lds	r24, 0x1D02	; 0x801d02 <AccSize+0x2>
    eaa2:	8f 93       	push	r24
    eaa4:	80 91 01 1d 	lds	r24, 0x1D01	; 0x801d01 <AccSize+0x1>
    eaa8:	8f 93       	push	r24
    eaaa:	80 91 00 1d 	lds	r24, 0x1D00	; 0x801d00 <AccSize>
    eaae:	8f 93       	push	r24
    eab0:	80 91 07 1d 	lds	r24, 0x1D07	; 0x801d07 <AccFiles+0x1>
    eab4:	8f 93       	push	r24
    eab6:	80 91 06 1d 	lds	r24, 0x1D06	; 0x801d06 <AccFiles>
    eaba:	8f 93       	push	r24
    eabc:	82 ea       	ldi	r24, 0xA2	; 162
    eabe:	98 e0       	ldi	r25, 0x08	; 8
    eac0:	1f 92       	push	r1
    eac2:	9f 93       	push	r25
    eac4:	8f 93       	push	r24
    eac6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    eaca:	0f b6       	in	r0, 0x3f	; 63
    eacc:	f8 94       	cli
    eace:	de bf       	out	0x3e, r29	; 62
    ead0:	0f be       	out	0x3f, r0	; 63
                 "%lu KB total disk space.\n%lu KB available.\n",
            AccFiles, AccSize, AccDirs,
            (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
    );

}
    ead2:	cd bf       	out	0x3d, r28	; 61
    ead4:	a4 96       	adiw	r28, 0x24	; 36
    ead6:	e8 e0       	ldi	r30, 0x08	; 8
    ead8:	0c 94 b5 e9 	jmp	0x1d36a	; 0x1d36a <__epilogue_restores__+0x14>

0000eadc <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    eadc:	a6 e0       	ldi	r26, 0x06	; 6
    eade:	b0 e0       	ldi	r27, 0x00	; 0
    eae0:	e4 e7       	ldi	r30, 0x74	; 116
    eae2:	f5 e7       	ldi	r31, 0x75	; 117
    eae4:	0c 94 9f e9 	jmp	0x1d33e	; 0x1d33e <__prologue_saves__+0x20>
    eae8:	fc 01       	movw	r30, r24
    char attrs[6];
    if(info->fname[0] == 0)
    eaea:	86 89       	ldd	r24, Z+22	; 0x16
    eaec:	81 11       	cpse	r24, r1
    eaee:	0b c0       	rjmp	.+22     	; 0xeb06 <fatfs_filinfo_list+0x2a>
    {
        printf("fatfs_filinfo_list: empty\n");
    eaf0:	87 e8       	ldi	r24, 0x87	; 135
    eaf2:	98 e0       	ldi	r25, 0x08	; 8
    eaf4:	1f 92       	push	r1
    eaf6:	9f 93       	push	r25
    eaf8:	8f 93       	push	r24
    eafa:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return;
    eafe:	0f 90       	pop	r0
    eb00:	0f 90       	pop	r0
    eb02:	0f 90       	pop	r0
    eb04:	6e c0       	rjmp	.+220    	; 0xebe2 <fatfs_filinfo_list+0x106>
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    eb06:	80 85       	ldd	r24, Z+8	; 0x08
    eb08:	84 fd       	sbrc	r24, 4
    eb0a:	02 c0       	rjmp	.+4      	; 0xeb10 <fatfs_filinfo_list+0x34>
    eb0c:	9d e2       	ldi	r25, 0x2D	; 45
    eb0e:	01 c0       	rjmp	.+2      	; 0xeb12 <fatfs_filinfo_list+0x36>
    eb10:	94 e4       	ldi	r25, 0x44	; 68
    eb12:	99 83       	std	Y+1, r25	; 0x01
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    eb14:	80 fd       	sbrc	r24, 0
    eb16:	02 c0       	rjmp	.+4      	; 0xeb1c <fatfs_filinfo_list+0x40>
    eb18:	9d e2       	ldi	r25, 0x2D	; 45
    eb1a:	01 c0       	rjmp	.+2      	; 0xeb1e <fatfs_filinfo_list+0x42>
    eb1c:	92 e5       	ldi	r25, 0x52	; 82
    eb1e:	9a 83       	std	Y+2, r25	; 0x02
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    eb20:	81 fd       	sbrc	r24, 1
    eb22:	02 c0       	rjmp	.+4      	; 0xeb28 <fatfs_filinfo_list+0x4c>
    eb24:	9d e2       	ldi	r25, 0x2D	; 45
    eb26:	01 c0       	rjmp	.+2      	; 0xeb2a <fatfs_filinfo_list+0x4e>
    eb28:	98 e4       	ldi	r25, 0x48	; 72
    eb2a:	9b 83       	std	Y+3, r25	; 0x03
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    eb2c:	82 fd       	sbrc	r24, 2
    eb2e:	02 c0       	rjmp	.+4      	; 0xeb34 <fatfs_filinfo_list+0x58>
    eb30:	9d e2       	ldi	r25, 0x2D	; 45
    eb32:	01 c0       	rjmp	.+2      	; 0xeb36 <fatfs_filinfo_list+0x5a>
    eb34:	93 e5       	ldi	r25, 0x53	; 83
    eb36:	9c 83       	std	Y+4, r25	; 0x04
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    eb38:	85 fd       	sbrc	r24, 5
    eb3a:	02 c0       	rjmp	.+4      	; 0xeb40 <fatfs_filinfo_list+0x64>
    eb3c:	8d e2       	ldi	r24, 0x2D	; 45
    eb3e:	01 c0       	rjmp	.+2      	; 0xeb42 <fatfs_filinfo_list+0x66>
    eb40:	81 e4       	ldi	r24, 0x41	; 65
    eb42:	8d 83       	std	Y+5, r24	; 0x05
    attrs[5] = 0;
    eb44:	1e 82       	std	Y+6, r1	; 0x06
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    eb46:	46 81       	ldd	r20, Z+6	; 0x06
    eb48:	57 81       	ldd	r21, Z+7	; 0x07
    eb4a:	84 81       	ldd	r24, Z+4	; 0x04
    eb4c:	95 81       	ldd	r25, Z+5	; 0x05
    eb4e:	9f 01       	movw	r18, r30
    eb50:	2a 5e       	subi	r18, 0xEA	; 234
    eb52:	3f 4f       	sbci	r19, 0xFF	; 255
    eb54:	3f 93       	push	r19
    eb56:	2f 93       	push	r18
    eb58:	23 81       	ldd	r18, Z+3	; 0x03
    eb5a:	2f 93       	push	r18
    eb5c:	22 81       	ldd	r18, Z+2	; 0x02
    eb5e:	2f 93       	push	r18
    eb60:	21 81       	ldd	r18, Z+1	; 0x01
    eb62:	2f 93       	push	r18
    eb64:	20 81       	ld	r18, Z
    eb66:	2f 93       	push	r18
    eb68:	9a 01       	movw	r18, r20
    eb6a:	45 e0       	ldi	r20, 0x05	; 5
    eb6c:	36 95       	lsr	r19
    eb6e:	27 95       	ror	r18
    eb70:	4a 95       	dec	r20
    eb72:	e1 f7       	brne	.-8      	; 0xeb6c <fatfs_filinfo_list+0x90>
    eb74:	2f 73       	andi	r18, 0x3F	; 63
    eb76:	33 27       	eor	r19, r19
    eb78:	3f 93       	push	r19
    eb7a:	2f 93       	push	r18
    eb7c:	25 2f       	mov	r18, r21
    eb7e:	26 95       	lsr	r18
    eb80:	26 95       	lsr	r18
    eb82:	26 95       	lsr	r18
    eb84:	1f 92       	push	r1
    eb86:	2f 93       	push	r18
    eb88:	9c 01       	movw	r18, r24
    eb8a:	2f 71       	andi	r18, 0x1F	; 31
    eb8c:	33 27       	eor	r19, r19
    eb8e:	3f 93       	push	r19
    eb90:	2f 93       	push	r18
    eb92:	9c 01       	movw	r18, r24
    eb94:	55 e0       	ldi	r21, 0x05	; 5
    eb96:	36 95       	lsr	r19
    eb98:	27 95       	ror	r18
    eb9a:	5a 95       	dec	r21
    eb9c:	e1 f7       	brne	.-8      	; 0xeb96 <fatfs_filinfo_list+0xba>
    eb9e:	2f 70       	andi	r18, 0x0F	; 15
    eba0:	33 27       	eor	r19, r19
    eba2:	3f 93       	push	r19
    eba4:	2f 93       	push	r18
    eba6:	89 2f       	mov	r24, r25
    eba8:	99 27       	eor	r25, r25
    ebaa:	86 95       	lsr	r24
    ebac:	84 54       	subi	r24, 0x44	; 68
    ebae:	98 4f       	sbci	r25, 0xF8	; 248
    ebb0:	9f 93       	push	r25
    ebb2:	8f 93       	push	r24
    ebb4:	ce 01       	movw	r24, r28
    ebb6:	01 96       	adiw	r24, 0x01	; 1
    ebb8:	9f 93       	push	r25
    ebba:	8f 93       	push	r24
    ebbc:	85 e6       	ldi	r24, 0x65	; 101
    ebbe:	98 e0       	ldi	r25, 0x08	; 8
    ebc0:	1f 92       	push	r1
    ebc2:	9f 93       	push	r25
    ebc4:	8f 93       	push	r24
    ebc6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    ebca:	83 e6       	ldi	r24, 0x63	; 99
    ebcc:	98 e0       	ldi	r25, 0x08	; 8
    ebce:	1f 92       	push	r1
    ebd0:	9f 93       	push	r25
    ebd2:	8f 93       	push	r24
    ebd4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    ebd8:	0f b6       	in	r0, 0x3f	; 63
    ebda:	f8 94       	cli
    ebdc:	de bf       	out	0x3e, r29	; 62
    ebde:	0f be       	out	0x3f, r0	; 63
    ebe0:	cd bf       	out	0x3d, r28	; 61
}
    ebe2:	26 96       	adiw	r28, 0x06	; 6
    ebe4:	e2 e0       	ldi	r30, 0x02	; 2
    ebe6:	0c 94 bb e9 	jmp	0x1d376	; 0x1d376 <__epilogue_restores__+0x20>

0000ebea <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    ebea:	cf 93       	push	r28
    ebec:	df 93       	push	r29
    ebee:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    ebf0:	88 ea       	ldi	r24, 0xA8	; 168
    ebf2:	9b e0       	ldi	r25, 0x0B	; 11
    ebf4:	1f 92       	push	r1
    ebf6:	9f 93       	push	r25
    ebf8:	8f 93       	push	r24
    ebfa:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    
    if(full)
    ebfe:	0f 90       	pop	r0
    ec00:	0f 90       	pop	r0
    ec02:	0f 90       	pop	r0
    ec04:	cd 2b       	or	r28, r29
    ec06:	51 f0       	breq	.+20     	; 0xec1c <fatfs_help+0x32>
    {
        printf(
    ec08:	8c e2       	ldi	r24, 0x2C	; 44
    ec0a:	9b e0       	ldi	r25, 0x0B	; 11
    ec0c:	1f 92       	push	r1
    ec0e:	9f 93       	push	r25
    ec10:	8f 93       	push	r24
    ec12:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    ec16:	0f 90       	pop	r0
    ec18:	0f 90       	pop	r0
    ec1a:	0f 90       	pop	r0
#endif
        "\n"
        );
    }
        
}
    ec1c:	df 91       	pop	r29
    ec1e:	cf 91       	pop	r28
    ec20:	08 95       	ret

0000ec22 <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  void.
MEMSPACE
void fatfs_ls(char *name)
{
    ec22:	aa e4       	ldi	r26, 0x4A	; 74
    ec24:	b2 e0       	ldi	r27, 0x02	; 2
    ec26:	e7 e1       	ldi	r30, 0x17	; 23
    ec28:	f6 e7       	ldi	r31, 0x76	; 118
    ec2a:	0c 94 99 e9 	jmp	0x1d332	; 0x1d332 <__prologue_saves__+0x14>
    ec2e:	8e 01       	movw	r16, r28
    ec30:	09 5e       	subi	r16, 0xE9	; 233
    ec32:	1e 4f       	sbci	r17, 0xFE	; 254
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[256]; 

    if(!name || !*name)
    ec34:	00 97       	sbiw	r24, 0x00	; 0
    ec36:	21 f0       	breq	.+8      	; 0xec40 <fatfs_ls+0x1e>
    ec38:	fc 01       	movw	r30, r24
    ec3a:	20 81       	ld	r18, Z
    ec3c:	21 11       	cpse	r18, r1
    ec3e:	03 c0       	rjmp	.+6      	; 0xec46 <fatfs_ls+0x24>
    {
        strcpy(buff,".");
    ec40:	60 ee       	ldi	r22, 0xE0	; 224
    ec42:	70 e1       	ldi	r23, 0x10	; 16
    ec44:	01 c0       	rjmp	.+2      	; 0xec48 <fatfs_ls+0x26>
    }
    else
    {
        strcpy(buff,name);
    ec46:	bc 01       	movw	r22, r24
    ec48:	c8 01       	movw	r24, r16
    ec4a:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    ec4e:	1f 93       	push	r17
    ec50:	0f 93       	push	r16
    ec52:	8c e9       	ldi	r24, 0x9C	; 156
    ec54:	9a e0       	ldi	r25, 0x0A	; 10
    ec56:	1f 92       	push	r1
    ec58:	9f 93       	push	r25
    ec5a:	8f 93       	push	r24
    ec5c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    res = f_opendir(&dirs, buff);
    ec60:	b8 01       	movw	r22, r16
    ec62:	ce 01       	movw	r24, r28
    ec64:	89 5e       	subi	r24, 0xE9	; 233
    ec66:	9d 4f       	sbci	r25, 0xFD	; 253
    ec68:	0e 94 d9 60 	call	0xc1b2	; 0xc1b2 <f_opendir>
    if (res) { put_rc(res); return; }
    ec6c:	0f 90       	pop	r0
    ec6e:	0f 90       	pop	r0
    ec70:	0f 90       	pop	r0
    ec72:	0f 90       	pop	r0
    ec74:	0f 90       	pop	r0
    ec76:	00 97       	sbiw	r24, 0x00	; 0
    ec78:	11 f0       	breq	.+4      	; 0xec7e <fatfs_ls+0x5c>
    ec7a:	36 dd       	rcall	.-1428   	; 0xe6e8 <put_rc>
    p1 = s1 = s2 = 0;
    ec7c:	9a c0       	rjmp	.+308    	; 0xedb2 <fatfs_ls+0x190>
    ec7e:	cb 5b       	subi	r28, 0xBB	; 187
    ec80:	dd 4f       	sbci	r29, 0xFD	; 253
    ec82:	18 82       	st	Y, r1
    ec84:	19 82       	std	Y+1, r1	; 0x01
    ec86:	1a 82       	std	Y+2, r1	; 0x02
    ec88:	1b 82       	std	Y+3, r1	; 0x03
    ec8a:	c5 54       	subi	r28, 0x45	; 69
    ec8c:	d2 40       	sbci	r29, 0x02	; 2
    ec8e:	c1 2c       	mov	r12, r1
    ec90:	d1 2c       	mov	r13, r1
    ec92:	e1 2c       	mov	r14, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    ec94:	f1 2c       	mov	r15, r1
    ec96:	be 01       	movw	r22, r28
    ec98:	6f 5f       	subi	r22, 0xFF	; 255
    ec9a:	7f 4f       	sbci	r23, 0xFF	; 255
    ec9c:	ce 01       	movw	r24, r28
    ec9e:	89 5e       	subi	r24, 0xE9	; 233
    eca0:	9d 4f       	sbci	r25, 0xFD	; 253
    eca2:	0e 94 61 61 	call	0xc2c2	; 0xc2c2 <f_readdir>
        if ((res != FR_OK) || !fno.fname[0]) break;
    eca6:	89 2b       	or	r24, r25
    eca8:	49 f5       	brne	.+82     	; 0xecfc <fatfs_ls+0xda>
    ecaa:	8f 89       	ldd	r24, Y+23	; 0x17
    ecac:	88 23       	and	r24, r24
        if (fno.fattrib & AM_DIR)
    ecae:	31 f1       	breq	.+76     	; 0xecfc <fatfs_ls+0xda>
    ecb0:	89 85       	ldd	r24, Y+9	; 0x09
    ecb2:	84 ff       	sbrs	r24, 4
        {
            s2++;
    ecb4:	04 c0       	rjmp	.+8      	; 0xecbe <fatfs_ls+0x9c>
    ecb6:	ff ef       	ldi	r31, 0xFF	; 255
    ecb8:	cf 1a       	sub	r12, r31
    ecba:	df 0a       	sbc	r13, r31
        }
        else
        {
            s1++; p1 += fno.fsize;
    ecbc:	1b c0       	rjmp	.+54     	; 0xecf4 <fatfs_ls+0xd2>
    ecbe:	2f ef       	ldi	r18, 0xFF	; 255
    ecc0:	e2 1a       	sub	r14, r18
    ecc2:	f2 0a       	sbc	r15, r18
    ecc4:	49 81       	ldd	r20, Y+1	; 0x01
    ecc6:	5a 81       	ldd	r21, Y+2	; 0x02
    ecc8:	6b 81       	ldd	r22, Y+3	; 0x03
    ecca:	7c 81       	ldd	r23, Y+4	; 0x04
    eccc:	cb 5b       	subi	r28, 0xBB	; 187
    ecce:	dd 4f       	sbci	r29, 0xFD	; 253
    ecd0:	88 81       	ld	r24, Y
    ecd2:	99 81       	ldd	r25, Y+1	; 0x01
    ecd4:	aa 81       	ldd	r26, Y+2	; 0x02
    ecd6:	bb 81       	ldd	r27, Y+3	; 0x03
    ecd8:	c5 54       	subi	r28, 0x45	; 69
    ecda:	d2 40       	sbci	r29, 0x02	; 2
    ecdc:	84 0f       	add	r24, r20
    ecde:	95 1f       	adc	r25, r21
    ece0:	a6 1f       	adc	r26, r22
    ece2:	b7 1f       	adc	r27, r23
    ece4:	cb 5b       	subi	r28, 0xBB	; 187
    ece6:	dd 4f       	sbci	r29, 0xFD	; 253
    ece8:	88 83       	st	Y, r24
    ecea:	99 83       	std	Y+1, r25	; 0x01
    ecec:	aa 83       	std	Y+2, r26	; 0x02
    ecee:	bb 83       	std	Y+3, r27	; 0x03
    ecf0:	c5 54       	subi	r28, 0x45	; 69
        }
        fatfs_filinfo_list(&fno);
    ecf2:	d2 40       	sbci	r29, 0x02	; 2
    ecf4:	ce 01       	movw	r24, r28
    ecf6:	01 96       	adiw	r24, 0x01	; 1
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    ecf8:	f1 de       	rcall	.-542    	; 0xeadc <fatfs_filinfo_list>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    ecfa:	cd cf       	rjmp	.-102    	; 0xec96 <fatfs_ls+0x74>
    ecfc:	df 92       	push	r13
    ecfe:	cf 92       	push	r12
    ed00:	c8 5b       	subi	r28, 0xB8	; 184
    ed02:	dd 4f       	sbci	r29, 0xFD	; 253
    ed04:	88 81       	ld	r24, Y
    ed06:	c8 54       	subi	r28, 0x48	; 72
    ed08:	d2 40       	sbci	r29, 0x02	; 2
    ed0a:	8f 93       	push	r24
    ed0c:	c9 5b       	subi	r28, 0xB9	; 185
    ed0e:	dd 4f       	sbci	r29, 0xFD	; 253
    ed10:	88 81       	ld	r24, Y
    ed12:	c7 54       	subi	r28, 0x47	; 71
    ed14:	d2 40       	sbci	r29, 0x02	; 2
    ed16:	8f 93       	push	r24
    ed18:	ca 5b       	subi	r28, 0xBA	; 186
    ed1a:	dd 4f       	sbci	r29, 0xFD	; 253
    ed1c:	88 81       	ld	r24, Y
    ed1e:	c6 54       	subi	r28, 0x46	; 70
    ed20:	d2 40       	sbci	r29, 0x02	; 2
    ed22:	8f 93       	push	r24
    ed24:	cb 5b       	subi	r28, 0xBB	; 187
    ed26:	dd 4f       	sbci	r29, 0xFD	; 253
    ed28:	88 81       	ld	r24, Y
    ed2a:	c5 54       	subi	r28, 0x45	; 69
    ed2c:	d2 40       	sbci	r29, 0x02	; 2
    ed2e:	8f 93       	push	r24
    ed30:	ff 92       	push	r15
    ed32:	ef 92       	push	r14
    ed34:	83 e7       	ldi	r24, 0x73	; 115
    ed36:	9a e0       	ldi	r25, 0x0A	; 10
    ed38:	1f 92       	push	r1
    ed3a:	9f 93       	push	r25
    ed3c:	8f 93       	push	r24
    ed3e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    ed42:	ae 01       	movw	r20, r28
    ed44:	47 5b       	subi	r20, 0xB7	; 183
    ed46:	5d 4f       	sbci	r21, 0xFD	; 253
    ed48:	be 01       	movw	r22, r28
    ed4a:	6b 5b       	subi	r22, 0xBB	; 187
    ed4c:	7d 4f       	sbci	r23, 0xFD	; 253
    ed4e:	c8 01       	movw	r24, r16
    ed50:	0e 94 e7 61 	call	0xc3ce	; 0xc3ce <f_getfree>
    ed54:	0f b6       	in	r0, 0x3f	; 63
    ed56:	f8 94       	cli
    ed58:	de bf       	out	0x3e, r29	; 62
    ed5a:	0f be       	out	0x3f, r0	; 63
    ed5c:	cd bf       	out	0x3d, r28	; 61
    ed5e:	89 2b       	or	r24, r25
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    ed60:	41 f5       	brne	.+80     	; 0xedb2 <fatfs_ls+0x190>
    ed62:	c7 5b       	subi	r28, 0xB7	; 183
    ed64:	dd 4f       	sbci	r29, 0xFD	; 253
    ed66:	e8 81       	ld	r30, Y
    ed68:	f9 81       	ldd	r31, Y+1	; 0x01
    ed6a:	c9 54       	subi	r28, 0x49	; 73
    ed6c:	d2 40       	sbci	r29, 0x02	; 2
    ed6e:	a1 85       	ldd	r26, Z+9	; 0x09
    ed70:	b2 85       	ldd	r27, Z+10	; 0x0a
    ed72:	cb 5b       	subi	r28, 0xBB	; 187
    ed74:	dd 4f       	sbci	r29, 0xFD	; 253
    ed76:	28 81       	ld	r18, Y
    ed78:	39 81       	ldd	r19, Y+1	; 0x01
    ed7a:	4a 81       	ldd	r20, Y+2	; 0x02
    ed7c:	5b 81       	ldd	r21, Y+3	; 0x03
    ed7e:	c5 54       	subi	r28, 0x45	; 69
    ed80:	d2 40       	sbci	r29, 0x02	; 2
    ed82:	0e 94 6f e9 	call	0x1d2de	; 0x1d2de <__muluhisi3>
    ed86:	22 e0       	ldi	r18, 0x02	; 2
    ed88:	30 e0       	ldi	r19, 0x00	; 0
    ed8a:	40 e0       	ldi	r20, 0x00	; 0
    ed8c:	50 e0       	ldi	r21, 0x00	; 0
    ed8e:	0e 94 44 e9 	call	0x1d288	; 0x1d288 <__divmodsi4>
    ed92:	5f 93       	push	r21
    ed94:	4f 93       	push	r20
    ed96:	3f 93       	push	r19
    ed98:	2f 93       	push	r18
    ed9a:	8e e5       	ldi	r24, 0x5E	; 94
    ed9c:	9a e0       	ldi	r25, 0x0A	; 10
    ed9e:	1f 92       	push	r1
    eda0:	9f 93       	push	r25
    eda2:	8f 93       	push	r24
    eda4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    eda8:	0f b6       	in	r0, 0x3f	; 63
    edaa:	f8 94       	cli
    edac:	de bf       	out	0x3e, r29	; 62
    edae:	0f be       	out	0x3f, r0	; 63
}
    edb0:	cd bf       	out	0x3d, r28	; 61
    edb2:	c6 5b       	subi	r28, 0xB6	; 182
    edb4:	dd 4f       	sbci	r29, 0xFD	; 253
    edb6:	e8 e0       	ldi	r30, 0x08	; 8
    edb8:	0c 94 b5 e9 	jmp	0x1d36a	; 0x1d36a <__epilogue_restores__+0x14>

0000edbc <mmc_test>:
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    printf("==============================\n");
    edbc:	8c ef       	ldi	r24, 0xFC	; 252
    edbe:	9a e0       	ldi	r25, 0x0A	; 10
    edc0:	1f 92       	push	r1
    edc2:	9f 93       	push	r25
    edc4:	8f 93       	push	r24
    edc6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("START MMC TEST\n");
    edca:	8c ee       	ldi	r24, 0xEC	; 236
    edcc:	9a e0       	ldi	r25, 0x0A	; 10
    edce:	1f 92       	push	r1
    edd0:	9f 93       	push	r25
    edd2:	8f 93       	push	r24
    edd4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    fatfs_status("/");
    edd8:	81 ea       	ldi	r24, 0xA1	; 161
    edda:	98 e0       	ldi	r25, 0x08	; 8
    eddc:	13 dd       	rcall	.-1498   	; 0xe804 <fatfs_status>
    printf("MMC Directory List\n");
    edde:	88 ed       	ldi	r24, 0xD8	; 216
    ede0:	9a e0       	ldi	r25, 0x0A	; 10
    ede2:	1f 92       	push	r1
    ede4:	9f 93       	push	r25
    ede6:	8f 93       	push	r24
    ede8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    fatfs_ls("/");
    edec:	81 ea       	ldi	r24, 0xA1	; 161
    edee:	98 e0       	ldi	r25, 0x08	; 8
    edf0:	18 df       	rcall	.-464    	; 0xec22 <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    edf2:	8a ec       	ldi	r24, 0xCA	; 202
    edf4:	9a e0       	ldi	r25, 0x0A	; 10
    edf6:	1f 92       	push	r1
    edf8:	9f 93       	push	r25
    edfa:	8f 93       	push	r24
    edfc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("==============================\n");
    ee00:	8a ea       	ldi	r24, 0xAA	; 170
    ee02:	9a e0       	ldi	r25, 0x0A	; 10
    ee04:	1f 92       	push	r1
    ee06:	9f 93       	push	r25
    ee08:	8f 93       	push	r24
    ee0a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
}
    ee0e:	8d b7       	in	r24, 0x3d	; 61
    ee10:	9e b7       	in	r25, 0x3e	; 62
    ee12:	0f 96       	adiw	r24, 0x0f	; 15
    ee14:	0f b6       	in	r0, 0x3f	; 63
    ee16:	f8 94       	cli
    ee18:	9e bf       	out	0x3e, r25	; 62
    ee1a:	0f be       	out	0x3f, r0	; 63
    ee1c:	8d bf       	out	0x3d, r24	; 61
    ee1e:	08 95       	ret

0000ee20 <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    ee20:	ef 92       	push	r14
    ee22:	ff 92       	push	r15
    ee24:	0f 93       	push	r16
    ee26:	1f 93       	push	r17
    ee28:	cf 93       	push	r28
    ee2a:	df 93       	push	r29
    char *ptr;
    int ind;


    ind = 0;
    ptr = argv[ind++];
    ee2c:	fb 01       	movw	r30, r22
    ee2e:	20 81       	ld	r18, Z
    ee30:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    ee32:	21 15       	cp	r18, r1
    ee34:	31 05       	cpc	r19, r1
    ee36:	19 f4       	brne	.+6      	; 0xee3e <fatfs_tests+0x1e>
        return(0);
    ee38:	80 e0       	ldi	r24, 0x00	; 0
    ee3a:	90 e0       	ldi	r25, 0x00	; 0
    ee3c:	77 c0       	rjmp	.+238    	; 0xef2c <fatfs_tests+0x10c>
    ee3e:	eb 01       	movw	r28, r22
    ee40:	8c 01       	movw	r16, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    ee42:	6b ec       	ldi	r22, 0xCB	; 203
    ee44:	78 e0       	ldi	r23, 0x08	; 8
    ee46:	c9 01       	movw	r24, r18
    ee48:	0e 94 36 31 	call	0x626c	; 0x626c <MATCH>
    ee4c:	89 2b       	or	r24, r25
    ee4e:	a1 f3       	breq	.-24     	; 0xee38 <fatfs_tests+0x18>
    {
        ptr = argv[ind++];
    ee50:	ea 80       	ldd	r14, Y+2	; 0x02
    ee52:	fb 80       	ldd	r15, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    ee54:	e1 14       	cp	r14, r1
    ee56:	f1 04       	cpc	r15, r1
    ee58:	21 f4       	brne	.+8      	; 0xee62 <fatfs_tests+0x42>
        {
            fatfs_help(1);
    ee5a:	81 e0       	ldi	r24, 0x01	; 1
    ee5c:	90 e0       	ldi	r25, 0x00	; 0
    ee5e:	c5 de       	rcall	.-630    	; 0xebea <fatfs_help>
    ee60:	63 c0       	rjmp	.+198    	; 0xef28 <fatfs_tests+0x108>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    ee62:	63 ea       	ldi	r22, 0xA3	; 163
    ee64:	76 e1       	ldi	r23, 0x16	; 22
    ee66:	c7 01       	movw	r24, r14
    ee68:	0e 94 36 31 	call	0x626c	; 0x626c <MATCH>
    ee6c:	89 2b       	or	r24, r25
    ee6e:	a9 f7       	brne	.-22     	; 0xee5a <fatfs_tests+0x3a>
    {
        return(0);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    ee70:	98 01       	movw	r18, r16
    ee72:	42 e0       	ldi	r20, 0x02	; 2
    ee74:	50 e0       	ldi	r21, 0x00	; 0
    ee76:	61 ed       	ldi	r22, 0xD1	; 209
    ee78:	78 e0       	ldi	r23, 0x08	; 8
    ee7a:	c7 01       	movw	r24, r14
    ee7c:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
    ee80:	89 2b       	or	r24, r25
    ee82:	51 f1       	breq	.+84     	; 0xeed8 <fatfs_tests+0xb8>
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
    ee84:	1f 93       	push	r17
    ee86:	0f 93       	push	r16
    ee88:	1f 92       	push	r1
    ee8a:	82 e0       	ldi	r24, 0x02	; 2
    ee8c:	8f 93       	push	r24
    ee8e:	8c e1       	ldi	r24, 0x1C	; 28
    ee90:	9b e0       	ldi	r25, 0x0B	; 11
    ee92:	1f 92       	push	r1
    ee94:	9f 93       	push	r25
    ee96:	8f 93       	push	r24
    ee98:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    ee9c:	7e 01       	movw	r14, r28
    ee9e:	f4 e0       	ldi	r31, 0x04	; 4
    eea0:	ef 0e       	add	r14, r31
    eea2:	f1 1c       	adc	r15, r1
        for(i=ind;i<argc;++i)
    eea4:	8d b7       	in	r24, 0x3d	; 61
    eea6:	9e b7       	in	r25, 0x3e	; 62
    eea8:	07 96       	adiw	r24, 0x07	; 7
    eeaa:	0f b6       	in	r0, 0x3f	; 63
    eeac:	f8 94       	cli
    eeae:	9e bf       	out	0x3e, r25	; 62
    eeb0:	0f be       	out	0x3f, r0	; 63
    eeb2:	8d bf       	out	0x3d, r24	; 61
    eeb4:	c2 e0       	ldi	r28, 0x02	; 2
    eeb6:	d0 e0       	ldi	r29, 0x00	; 0
    eeb8:	c0 17       	cp	r28, r16
    eeba:	d1 07       	cpc	r29, r17
    eebc:	3c f4       	brge	.+14     	; 0xeecc <fatfs_tests+0xac>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
    eebe:	f7 01       	movw	r30, r14
    eec0:	81 91       	ld	r24, Z+
    eec2:	91 91       	ld	r25, Z+
    eec4:	7f 01       	movw	r14, r30
    eec6:	ad de       	rcall	.-678    	; 0xec22 <fatfs_ls>
    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    eec8:	21 96       	adiw	r28, 0x01	; 1
    eeca:	f6 cf       	rjmp	.-20     	; 0xeeb8 <fatfs_tests+0x98>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
            ++args;
        }
        if(!args)
    eecc:	22 97       	sbiw	r28, 0x02	; 2
        {
            fatfs_ls("");
    eece:	61 f5       	brne	.+88     	; 0xef28 <fatfs_tests+0x108>
    eed0:	87 e3       	ldi	r24, 0x37	; 55
    eed2:	9c e0       	ldi	r25, 0x0C	; 12
    eed4:	a6 de       	rcall	.-692    	; 0xec22 <fatfs_ls>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    eed6:	28 c0       	rjmp	.+80     	; 0xef28 <fatfs_tests+0x108>
    eed8:	98 01       	movw	r18, r16
    eeda:	42 e0       	ldi	r20, 0x02	; 2
    eedc:	50 e0       	ldi	r21, 0x00	; 0
    eede:	64 ed       	ldi	r22, 0xD4	; 212
    eee0:	78 e0       	ldi	r23, 0x08	; 8
    eee2:	c7 01       	movw	r24, r14
    eee4:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
    {
        mmc_test();
    eee8:	89 2b       	or	r24, r25
    eeea:	11 f0       	breq	.+4      	; 0xeef0 <fatfs_tests+0xd0>
    eeec:	67 df       	rcall	.-306    	; 0xedbc <mmc_test>
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    eeee:	1c c0       	rjmp	.+56     	; 0xef28 <fatfs_tests+0x108>
    eef0:	98 01       	movw	r18, r16
    eef2:	42 e0       	ldi	r20, 0x02	; 2
    eef4:	50 e0       	ldi	r21, 0x00	; 0
    eef6:	6d ed       	ldi	r22, 0xDD	; 221
    eef8:	78 e0       	ldi	r23, 0x08	; 8
    eefa:	c7 01       	movw	r24, r14
    eefc:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
    {
        mmc_init(1);
    ef00:	89 2b       	or	r24, r25
    ef02:	21 f0       	breq	.+8      	; 0xef0c <fatfs_tests+0xec>
    ef04:	81 e0       	ldi	r24, 0x01	; 1
    ef06:	90 e0       	ldi	r25, 0x00	; 0
    ef08:	c4 da       	rcall	.-2680   	; 0xe492 <mmc_init>
        return(1);
    }

    if (MATCHARGS(ptr,"status", (ind + 1), argc))
    ef0a:	0e c0       	rjmp	.+28     	; 0xef28 <fatfs_tests+0x108>
    ef0c:	98 01       	movw	r18, r16
    ef0e:	43 e0       	ldi	r20, 0x03	; 3
    ef10:	50 e0       	ldi	r21, 0x00	; 0
    ef12:	66 ee       	ldi	r22, 0xE6	; 230
    ef14:	78 e0       	ldi	r23, 0x08	; 8
    ef16:	c7 01       	movw	r24, r14
    ef18:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
    ef1c:	89 2b       	or	r24, r25
    {
        fatfs_status(argv[ind]);
    ef1e:	09 f4       	brne	.+2      	; 0xef22 <fatfs_tests+0x102>
    ef20:	8b cf       	rjmp	.-234    	; 0xee38 <fatfs_tests+0x18>
    ef22:	8c 81       	ldd	r24, Y+4	; 0x04
    ef24:	9d 81       	ldd	r25, Y+5	; 0x05
        }
        if(!args)
        {
            fatfs_ls("");
        }
        return(1);
    ef26:	6e dc       	rcall	.-1828   	; 0xe804 <fatfs_status>
    ef28:	81 e0       	ldi	r24, 0x01	; 1
        return(1);
    }
#endif

    return(0);
}
    ef2a:	90 e0       	ldi	r25, 0x00	; 0
    ef2c:	cd b7       	in	r28, 0x3d	; 61
    ef2e:	de b7       	in	r29, 0x3e	; 62
    ef30:	e6 e0       	ldi	r30, 0x06	; 6
    ef32:	0c 94 b7 e9 	jmp	0x1d36e	; 0x1d36e <__epilogue_restores__+0x18>

0000ef36 <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    ef36:	8f 92       	push	r8
    ef38:	9f 92       	push	r9
    ef3a:	af 92       	push	r10
    ef3c:	bf 92       	push	r11
    ef3e:	ef 92       	push	r14
    ef40:	ff 92       	push	r15
    ef42:	0f 93       	push	r16
    ef44:	1f 93       	push	r17
    ef46:	cf 93       	push	r28
    ef48:	df 93       	push	r29
    ef4a:	00 d0       	rcall	.+0      	; 0xef4c <fatfs_getc+0x16>
    ef4c:	1f 92       	push	r1
    ef4e:	cd b7       	in	r28, 0x3d	; 61
    ef50:	de b7       	in	r29, 0x3e	; 62
    ef52:	10 92 09 1d 	sts	0x1D09, r1	; 0x801d09 <errno+0x1>
    ef56:	10 92 08 1d 	sts	0x1D08, r1	; 0x801d08 <errno>
    ef5a:	00 97       	sbiw	r24, 0x00	; 0
    ef5c:	39 f4       	brne	.+14     	; 0xef6c <fatfs_getc+0x36>
    ef5e:	89 e0       	ldi	r24, 0x09	; 9
    ef60:	90 e0       	ldi	r25, 0x00	; 0
    ef62:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
    ef66:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
    ef6a:	2f c0       	rjmp	.+94     	; 0xefca <fatfs_getc+0x94>
    ef6c:	fc 01       	movw	r30, r24
    ef6e:	e4 84       	ldd	r14, Z+12	; 0x0c
    ef70:	f5 84       	ldd	r15, Z+13	; 0x0d
    ef72:	e1 14       	cp	r14, r1
    ef74:	f1 04       	cpc	r15, r1
    ef76:	99 f3       	breq	.-26     	; 0xef5e <fatfs_getc+0x28>
    ef78:	8c 01       	movw	r16, r24
    ef7a:	9e 01       	movw	r18, r28
    ef7c:	2f 5f       	subi	r18, 0xFF	; 255
    ef7e:	3f 4f       	sbci	r19, 0xFF	; 255
    ef80:	41 e0       	ldi	r20, 0x01	; 1
    ef82:	50 e0       	ldi	r21, 0x00	; 0
    ef84:	be 01       	movw	r22, r28
    ef86:	6d 5f       	subi	r22, 0xFD	; 253
    ef88:	7f 4f       	sbci	r23, 0xFF	; 255
    ef8a:	c7 01       	movw	r24, r14
    ef8c:	0e 94 f2 58 	call	0xb1e4	; 0xb1e4 <f_read>
    ef90:	00 97       	sbiw	r24, 0x00	; 0
    ef92:	31 f4       	brne	.+12     	; 0xefa0 <fatfs_getc+0x6a>
    ef94:	29 81       	ldd	r18, Y+1	; 0x01
    ef96:	3a 81       	ldd	r19, Y+2	; 0x02
    ef98:	21 30       	cpi	r18, 0x01	; 1
    ef9a:	31 05       	cpc	r19, r1
    ef9c:	c9 f0       	breq	.+50     	; 0xefd0 <fatfs_getc+0x9a>
    ef9e:	03 c0       	rjmp	.+6      	; 0xefa6 <fatfs_getc+0x70>
    efa0:	84 31       	cpi	r24, 0x14	; 20
    efa2:	91 05       	cpc	r25, r1
    efa4:	40 f4       	brcc	.+16     	; 0xefb6 <fatfs_getc+0x80>
    efa6:	fc 01       	movw	r30, r24
    efa8:	e7 57       	subi	r30, 0x77	; 119
    efaa:	f8 4f       	sbci	r31, 0xF8	; 248
    efac:	80 81       	ld	r24, Z
    efae:	08 2e       	mov	r0, r24
    efb0:	00 0c       	add	r0, r0
    efb2:	99 0b       	sbc	r25, r25
    efb4:	02 c0       	rjmp	.+4      	; 0xefba <fatfs_getc+0x84>
    efb6:	83 e2       	ldi	r24, 0x23	; 35
    efb8:	90 e0       	ldi	r25, 0x00	; 0
    efba:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
    efbe:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
    efc2:	f8 01       	movw	r30, r16
    efc4:	83 81       	ldd	r24, Z+3	; 0x03
    efc6:	80 62       	ori	r24, 0x20	; 32
    efc8:	83 83       	std	Z+3, r24	; 0x03
    efca:	8f ef       	ldi	r24, 0xFF	; 255
    efcc:	9f ef       	ldi	r25, 0xFF	; 255
    efce:	28 c0       	rjmp	.+80     	; 0xf020 <fatfs_getc+0xea>
    efd0:	8b 81       	ldd	r24, Y+3	; 0x03
    efd2:	8d 30       	cpi	r24, 0x0D	; 13
    efd4:	01 f5       	brne	.+64     	; 0xf016 <fatfs_getc+0xe0>
    efd6:	f7 01       	movw	r30, r14
    efd8:	80 88       	ldd	r8, Z+16	; 0x10
    efda:	91 88       	ldd	r9, Z+17	; 0x11
    efdc:	a2 88       	ldd	r10, Z+18	; 0x12
    efde:	b3 88       	ldd	r11, Z+19	; 0x13
    efe0:	9e 01       	movw	r18, r28
    efe2:	2f 5f       	subi	r18, 0xFF	; 255
    efe4:	3f 4f       	sbci	r19, 0xFF	; 255
    efe6:	41 e0       	ldi	r20, 0x01	; 1
    efe8:	50 e0       	ldi	r21, 0x00	; 0
    efea:	be 01       	movw	r22, r28
    efec:	6d 5f       	subi	r22, 0xFD	; 253
    efee:	7f 4f       	sbci	r23, 0xFF	; 255
    eff0:	c7 01       	movw	r24, r14
    eff2:	0e 94 f2 58 	call	0xb1e4	; 0xb1e4 <f_read>
    eff6:	89 2b       	or	r24, r25
    eff8:	89 f4       	brne	.+34     	; 0xf01c <fatfs_getc+0xe6>
    effa:	89 81       	ldd	r24, Y+1	; 0x01
    effc:	9a 81       	ldd	r25, Y+2	; 0x02
    effe:	01 97       	sbiw	r24, 0x01	; 1
    f000:	69 f4       	brne	.+26     	; 0xf01c <fatfs_getc+0xe6>
    f002:	8b 81       	ldd	r24, Y+3	; 0x03
    f004:	8a 30       	cpi	r24, 0x0A	; 10
    f006:	31 f0       	breq	.+12     	; 0xf014 <fatfs_getc+0xde>
    f008:	b5 01       	movw	r22, r10
    f00a:	a4 01       	movw	r20, r8
    f00c:	c7 01       	movw	r24, r14
    f00e:	0e 94 fc 5d 	call	0xbbf8	; 0xbbf8 <f_lseek>
    f012:	04 c0       	rjmp	.+8      	; 0xf01c <fatfs_getc+0xe6>
    f014:	8b 83       	std	Y+3, r24	; 0x03
    f016:	8b 81       	ldd	r24, Y+3	; 0x03
    f018:	90 e0       	ldi	r25, 0x00	; 0
    f01a:	02 c0       	rjmp	.+4      	; 0xf020 <fatfs_getc+0xea>
    f01c:	8a e0       	ldi	r24, 0x0A	; 10
    f01e:	90 e0       	ldi	r25, 0x00	; 0
    f020:	0f 90       	pop	r0
    f022:	0f 90       	pop	r0
    f024:	0f 90       	pop	r0
    f026:	df 91       	pop	r29
    f028:	cf 91       	pop	r28
    f02a:	1f 91       	pop	r17
    f02c:	0f 91       	pop	r16
    f02e:	ff 90       	pop	r15
    f030:	ef 90       	pop	r14
    f032:	bf 90       	pop	r11
    f034:	af 90       	pop	r10
    f036:	9f 90       	pop	r9
    f038:	8f 90       	pop	r8
    f03a:	08 95       	ret

0000f03c <fatfs_putc>:
    f03c:	a3 e0       	ldi	r26, 0x03	; 3
    f03e:	b0 e0       	ldi	r27, 0x00	; 0
    f040:	e4 e2       	ldi	r30, 0x24	; 36
    f042:	f8 e7       	ldi	r31, 0x78	; 120
    f044:	0c 94 9d e9 	jmp	0x1d33a	; 0x1d33a <__prologue_saves__+0x1c>
    f048:	8b 83       	std	Y+3, r24	; 0x03
    f04a:	10 92 09 1d 	sts	0x1D09, r1	; 0x801d09 <errno+0x1>
    f04e:	10 92 08 1d 	sts	0x1D08, r1	; 0x801d08 <errno>
    f052:	61 15       	cp	r22, r1
    f054:	71 05       	cpc	r23, r1
    f056:	39 f4       	brne	.+14     	; 0xf066 <fatfs_putc+0x2a>
    f058:	89 e0       	ldi	r24, 0x09	; 9
    f05a:	90 e0       	ldi	r25, 0x00	; 0
    f05c:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
    f060:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
    f064:	2d c0       	rjmp	.+90     	; 0xf0c0 <fatfs_putc+0x84>
    f066:	fb 01       	movw	r30, r22
    f068:	84 85       	ldd	r24, Z+12	; 0x0c
    f06a:	95 85       	ldd	r25, Z+13	; 0x0d
    f06c:	00 97       	sbiw	r24, 0x00	; 0
    f06e:	a1 f3       	breq	.-24     	; 0xf058 <fatfs_putc+0x1c>
    f070:	8b 01       	movw	r16, r22
    f072:	9e 01       	movw	r18, r28
    f074:	2f 5f       	subi	r18, 0xFF	; 255
    f076:	3f 4f       	sbci	r19, 0xFF	; 255
    f078:	41 e0       	ldi	r20, 0x01	; 1
    f07a:	50 e0       	ldi	r21, 0x00	; 0
    f07c:	be 01       	movw	r22, r28
    f07e:	6d 5f       	subi	r22, 0xFD	; 253
    f080:	7f 4f       	sbci	r23, 0xFF	; 255
    f082:	0e 94 3d 5a 	call	0xb47a	; 0xb47a <f_write>
    f086:	00 97       	sbiw	r24, 0x00	; 0
    f088:	31 f4       	brne	.+12     	; 0xf096 <fatfs_putc+0x5a>
    f08a:	29 81       	ldd	r18, Y+1	; 0x01
    f08c:	3a 81       	ldd	r19, Y+2	; 0x02
    f08e:	21 30       	cpi	r18, 0x01	; 1
    f090:	31 05       	cpc	r19, r1
    f092:	c9 f0       	breq	.+50     	; 0xf0c6 <fatfs_putc+0x8a>
    f094:	03 c0       	rjmp	.+6      	; 0xf09c <fatfs_putc+0x60>
    f096:	84 31       	cpi	r24, 0x14	; 20
    f098:	91 05       	cpc	r25, r1
    f09a:	40 f4       	brcc	.+16     	; 0xf0ac <fatfs_putc+0x70>
    f09c:	fc 01       	movw	r30, r24
    f09e:	e7 57       	subi	r30, 0x77	; 119
    f0a0:	f8 4f       	sbci	r31, 0xF8	; 248
    f0a2:	80 81       	ld	r24, Z
    f0a4:	08 2e       	mov	r0, r24
    f0a6:	00 0c       	add	r0, r0
    f0a8:	99 0b       	sbc	r25, r25
    f0aa:	02 c0       	rjmp	.+4      	; 0xf0b0 <fatfs_putc+0x74>
    f0ac:	83 e2       	ldi	r24, 0x23	; 35
    f0ae:	90 e0       	ldi	r25, 0x00	; 0
    f0b0:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
    f0b4:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
    f0b8:	f8 01       	movw	r30, r16
    f0ba:	83 81       	ldd	r24, Z+3	; 0x03
    f0bc:	80 62       	ori	r24, 0x20	; 32
    f0be:	83 83       	std	Z+3, r24	; 0x03
    f0c0:	8f ef       	ldi	r24, 0xFF	; 255
    f0c2:	9f ef       	ldi	r25, 0xFF	; 255
    f0c4:	02 c0       	rjmp	.+4      	; 0xf0ca <fatfs_putc+0x8e>
    f0c6:	8b 81       	ldd	r24, Y+3	; 0x03
    f0c8:	90 e0       	ldi	r25, 0x00	; 0
    f0ca:	23 96       	adiw	r28, 0x03	; 3
    f0cc:	e4 e0       	ldi	r30, 0x04	; 4
    f0ce:	0c 94 b9 e9 	jmp	0x1d372	; 0x1d372 <__epilogue_restores__+0x1c>

0000f0d2 <fgetc>:
    f0d2:	cf 93       	push	r28
    f0d4:	df 93       	push	r29
    f0d6:	ec 01       	movw	r28, r24
    f0d8:	00 97       	sbiw	r24, 0x00	; 0
    f0da:	39 f4       	brne	.+14     	; 0xf0ea <fgetc+0x18>
    f0dc:	89 e0       	ldi	r24, 0x09	; 9
    f0de:	90 e0       	ldi	r25, 0x00	; 0
    f0e0:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
    f0e4:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
    f0e8:	40 c0       	rjmp	.+128    	; 0xf16a <fgetc+0x98>
    f0ea:	2b 81       	ldd	r18, Y+3	; 0x03
    f0ec:	20 ff       	sbrs	r18, 0
    f0ee:	3d c0       	rjmp	.+122    	; 0xf16a <fgetc+0x98>
    f0f0:	26 ff       	sbrs	r18, 6
    f0f2:	0a c0       	rjmp	.+20     	; 0xf108 <fgetc+0x36>
    f0f4:	2f 7b       	andi	r18, 0xBF	; 191
    f0f6:	2b 83       	std	Y+3, r18	; 0x03
    f0f8:	8e 81       	ldd	r24, Y+6	; 0x06
    f0fa:	9f 81       	ldd	r25, Y+7	; 0x07
    f0fc:	01 96       	adiw	r24, 0x01	; 1
    f0fe:	9f 83       	std	Y+7, r25	; 0x07
    f100:	8e 83       	std	Y+6, r24	; 0x06
    f102:	8a 81       	ldd	r24, Y+2	; 0x02
    f104:	90 e0       	ldi	r25, 0x00	; 0
    f106:	33 c0       	rjmp	.+102    	; 0xf16e <fgetc+0x9c>
    f108:	22 ff       	sbrs	r18, 2
    f10a:	0d c0       	rjmp	.+26     	; 0xf126 <fgetc+0x54>
    f10c:	e8 81       	ld	r30, Y
    f10e:	f9 81       	ldd	r31, Y+1	; 0x01
    f110:	80 81       	ld	r24, Z
    f112:	90 e0       	ldi	r25, 0x00	; 0
    f114:	00 97       	sbiw	r24, 0x00	; 0
    f116:	19 f4       	brne	.+6      	; 0xf11e <fgetc+0x4c>
    f118:	20 62       	ori	r18, 0x20	; 32
    f11a:	2b 83       	std	Y+3, r18	; 0x03
    f11c:	26 c0       	rjmp	.+76     	; 0xf16a <fgetc+0x98>
    f11e:	31 96       	adiw	r30, 0x01	; 1
    f120:	f9 83       	std	Y+1, r31	; 0x01
    f122:	e8 83       	st	Y, r30
    f124:	1b c0       	rjmp	.+54     	; 0xf15c <fgetc+0x8a>
    f126:	ea 85       	ldd	r30, Y+10	; 0x0a
    f128:	fb 85       	ldd	r31, Y+11	; 0x0b
    f12a:	30 97       	sbiw	r30, 0x00	; 0
    f12c:	59 f4       	brne	.+22     	; 0xf144 <fgetc+0x72>
    f12e:	88 e7       	ldi	r24, 0x78	; 120
    f130:	9c e0       	ldi	r25, 0x0C	; 12
    f132:	1f 92       	push	r1
    f134:	9f 93       	push	r25
    f136:	8f 93       	push	r24
    f138:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    f13c:	0f 90       	pop	r0
    f13e:	0f 90       	pop	r0
    f140:	0f 90       	pop	r0
    f142:	13 c0       	rjmp	.+38     	; 0xf16a <fgetc+0x98>
    f144:	09 95       	icall
    f146:	97 ff       	sbrs	r25, 7
    f148:	09 c0       	rjmp	.+18     	; 0xf15c <fgetc+0x8a>
    f14a:	2b 81       	ldd	r18, Y+3	; 0x03
    f14c:	02 96       	adiw	r24, 0x02	; 2
    f14e:	11 f0       	breq	.+4      	; 0xf154 <fgetc+0x82>
    f150:	80 e2       	ldi	r24, 0x20	; 32
    f152:	01 c0       	rjmp	.+2      	; 0xf156 <fgetc+0x84>
    f154:	80 e1       	ldi	r24, 0x10	; 16
    f156:	82 2b       	or	r24, r18
    f158:	8b 83       	std	Y+3, r24	; 0x03
    f15a:	07 c0       	rjmp	.+14     	; 0xf16a <fgetc+0x98>
    f15c:	2e 81       	ldd	r18, Y+6	; 0x06
    f15e:	3f 81       	ldd	r19, Y+7	; 0x07
    f160:	2f 5f       	subi	r18, 0xFF	; 255
    f162:	3f 4f       	sbci	r19, 0xFF	; 255
    f164:	3f 83       	std	Y+7, r19	; 0x07
    f166:	2e 83       	std	Y+6, r18	; 0x06
    f168:	02 c0       	rjmp	.+4      	; 0xf16e <fgetc+0x9c>
    f16a:	8f ef       	ldi	r24, 0xFF	; 255
    f16c:	9f ef       	ldi	r25, 0xFF	; 255
    f16e:	df 91       	pop	r29
    f170:	cf 91       	pop	r28
    f172:	08 95       	ret

0000f174 <fputc>:
    f174:	cf 93       	push	r28
    f176:	df 93       	push	r29
    f178:	eb 01       	movw	r28, r22
    f17a:	10 92 09 1d 	sts	0x1D09, r1	; 0x801d09 <errno+0x1>
    f17e:	10 92 08 1d 	sts	0x1D08, r1	; 0x801d08 <errno>
    f182:	20 91 0c 1d 	lds	r18, 0x1D0C	; 0x801d0c <__iob+0x2>
    f186:	30 91 0d 1d 	lds	r19, 0x1D0D	; 0x801d0d <__iob+0x3>
    f18a:	62 17       	cp	r22, r18
    f18c:	73 07       	cpc	r23, r19
    f18e:	49 f0       	breq	.+18     	; 0xf1a2 <fputc+0x2e>
    f190:	20 91 0e 1d 	lds	r18, 0x1D0E	; 0x801d0e <__iob+0x4>
    f194:	30 91 0f 1d 	lds	r19, 0x1D0F	; 0x801d0f <__iob+0x5>
    f198:	62 17       	cp	r22, r18
    f19a:	73 07       	cpc	r23, r19
    f19c:	11 f0       	breq	.+4      	; 0xf1a2 <fputc+0x2e>
    f19e:	4e df       	rcall	.-356    	; 0xf03c <fatfs_putc>
    f1a0:	33 c0       	rjmp	.+102    	; 0xf208 <fputc+0x94>
    f1a2:	2b 81       	ldd	r18, Y+3	; 0x03
    f1a4:	21 ff       	sbrs	r18, 1
    f1a6:	2e c0       	rjmp	.+92     	; 0xf204 <fputc+0x90>
    f1a8:	22 ff       	sbrs	r18, 2
    f1aa:	10 c0       	rjmp	.+32     	; 0xf1cc <fputc+0x58>
    f1ac:	4e 81       	ldd	r20, Y+6	; 0x06
    f1ae:	5f 81       	ldd	r21, Y+7	; 0x07
    f1b0:	2c 81       	ldd	r18, Y+4	; 0x04
    f1b2:	3d 81       	ldd	r19, Y+5	; 0x05
    f1b4:	42 17       	cp	r20, r18
    f1b6:	53 07       	cpc	r21, r19
    f1b8:	f4 f4       	brge	.+60     	; 0xf1f6 <fputc+0x82>
    f1ba:	e8 81       	ld	r30, Y
    f1bc:	f9 81       	ldd	r31, Y+1	; 0x01
    f1be:	9f 01       	movw	r18, r30
    f1c0:	2f 5f       	subi	r18, 0xFF	; 255
    f1c2:	3f 4f       	sbci	r19, 0xFF	; 255
    f1c4:	39 83       	std	Y+1, r19	; 0x01
    f1c6:	28 83       	st	Y, r18
    f1c8:	80 83       	st	Z, r24
    f1ca:	15 c0       	rjmp	.+42     	; 0xf1f6 <fputc+0x82>
    f1cc:	e8 85       	ldd	r30, Y+8	; 0x08
    f1ce:	f9 85       	ldd	r31, Y+9	; 0x09
    f1d0:	30 97       	sbiw	r30, 0x00	; 0
    f1d2:	59 f4       	brne	.+22     	; 0xf1ea <fputc+0x76>
    f1d4:	80 e6       	ldi	r24, 0x60	; 96
    f1d6:	9c e0       	ldi	r25, 0x0C	; 12
    f1d8:	1f 92       	push	r1
    f1da:	9f 93       	push	r25
    f1dc:	8f 93       	push	r24
    f1de:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    f1e2:	0f 90       	pop	r0
    f1e4:	0f 90       	pop	r0
    f1e6:	0f 90       	pop	r0
    f1e8:	0d c0       	rjmp	.+26     	; 0xf204 <fputc+0x90>
    f1ea:	be 01       	movw	r22, r28
    f1ec:	09 95       	icall
    f1ee:	8f 3f       	cpi	r24, 0xFF	; 255
    f1f0:	2f ef       	ldi	r18, 0xFF	; 255
    f1f2:	92 07       	cpc	r25, r18
    f1f4:	39 f0       	breq	.+14     	; 0xf204 <fputc+0x90>
    f1f6:	2e 81       	ldd	r18, Y+6	; 0x06
    f1f8:	3f 81       	ldd	r19, Y+7	; 0x07
    f1fa:	2f 5f       	subi	r18, 0xFF	; 255
    f1fc:	3f 4f       	sbci	r19, 0xFF	; 255
    f1fe:	3f 83       	std	Y+7, r19	; 0x07
    f200:	2e 83       	std	Y+6, r18	; 0x06
    f202:	02 c0       	rjmp	.+4      	; 0xf208 <fputc+0x94>
    f204:	8f ef       	ldi	r24, 0xFF	; 255
    f206:	9f ef       	ldi	r25, 0xFF	; 255
    f208:	df 91       	pop	r29
    f20a:	cf 91       	pop	r28
    f20c:	08 95       	ret

0000f20e <_fprintf_putc>:
    f20e:	fc 01       	movw	r30, r24
    f210:	86 2f       	mov	r24, r22
    f212:	26 81       	ldd	r18, Z+6	; 0x06
    f214:	37 81       	ldd	r19, Z+7	; 0x07
    f216:	2f 5f       	subi	r18, 0xFF	; 255
    f218:	3f 4f       	sbci	r19, 0xFF	; 255
    f21a:	37 83       	std	Z+7, r19	; 0x07
    f21c:	26 83       	std	Z+6, r18	; 0x06
    f21e:	62 81       	ldd	r22, Z+2	; 0x02
    f220:	73 81       	ldd	r23, Z+3	; 0x03
    f222:	90 e0       	ldi	r25, 0x00	; 0
    f224:	a7 cf       	rjmp	.-178    	; 0xf174 <fputc>
    f226:	08 95       	ret

0000f228 <getchar>:
    f228:	80 91 0a 1d 	lds	r24, 0x1D0A	; 0x801d0a <__iob>
    f22c:	90 91 0b 1d 	lds	r25, 0x1D0B	; 0x801d0b <__iob+0x1>
    f230:	50 cf       	rjmp	.-352    	; 0xf0d2 <fgetc>
    f232:	08 95       	ret

0000f234 <putchar>:
    f234:	60 91 0c 1d 	lds	r22, 0x1D0C	; 0x801d0c <__iob+0x2>
    f238:	70 91 0d 1d 	lds	r23, 0x1D0D	; 0x801d0d <__iob+0x3>
    f23c:	9b cf       	rjmp	.-202    	; 0xf174 <fputc>
    f23e:	08 95       	ret

0000f240 <fgets>:
    f240:	a0 e0       	ldi	r26, 0x00	; 0
    f242:	b0 e0       	ldi	r27, 0x00	; 0
    f244:	e6 e2       	ldi	r30, 0x26	; 38
    f246:	f9 e7       	ldi	r31, 0x79	; 121
    f248:	0c 94 99 e9 	jmp	0x1d332	; 0x1d332 <__prologue_saves__+0x14>
    f24c:	7c 01       	movw	r14, r24
    f24e:	6a 01       	movw	r12, r20
    f250:	8b 01       	movw	r16, r22
    f252:	c0 e0       	ldi	r28, 0x00	; 0
    f254:	d0 e0       	ldi	r29, 0x00	; 0
    f256:	01 15       	cp	r16, r1
    f258:	11 05       	cpc	r17, r1
    f25a:	41 f0       	breq	.+16     	; 0xf26c <fgets+0x2c>
    f25c:	c6 01       	movw	r24, r12
    f25e:	39 df       	rcall	.-398    	; 0xf0d2 <fgetc>
    f260:	8f 3f       	cpi	r24, 0xFF	; 255
    f262:	2f ef       	ldi	r18, 0xFF	; 255
    f264:	92 07       	cpc	r25, r18
    f266:	39 f4       	brne	.+14     	; 0xf276 <fgets+0x36>
    f268:	20 97       	sbiw	r28, 0x00	; 0
    f26a:	b9 f0       	breq	.+46     	; 0xf29a <fgets+0x5a>
    f26c:	ce 0d       	add	r28, r14
    f26e:	df 1d       	adc	r29, r15
    f270:	18 82       	st	Y, r1
    f272:	c7 01       	movw	r24, r14
    f274:	14 c0       	rjmp	.+40     	; 0xf29e <fgets+0x5e>
    f276:	8a 30       	cpi	r24, 0x0A	; 10
    f278:	91 05       	cpc	r25, r1
    f27a:	c1 f3       	breq	.-16     	; 0xf26c <fgets+0x2c>
    f27c:	88 30       	cpi	r24, 0x08	; 8
    f27e:	91 05       	cpc	r25, r1
    f280:	21 f4       	brne	.+8      	; 0xf28a <fgets+0x4a>
    f282:	20 97       	sbiw	r28, 0x00	; 0
    f284:	39 f0       	breq	.+14     	; 0xf294 <fgets+0x54>
    f286:	21 97       	sbiw	r28, 0x01	; 1
    f288:	05 c0       	rjmp	.+10     	; 0xf294 <fgets+0x54>
    f28a:	f7 01       	movw	r30, r14
    f28c:	ec 0f       	add	r30, r28
    f28e:	fd 1f       	adc	r31, r29
    f290:	80 83       	st	Z, r24
    f292:	21 96       	adiw	r28, 0x01	; 1
    f294:	01 50       	subi	r16, 0x01	; 1
    f296:	11 09       	sbc	r17, r1
    f298:	de cf       	rjmp	.-68     	; 0xf256 <fgets+0x16>
    f29a:	80 e0       	ldi	r24, 0x00	; 0
    f29c:	90 e0       	ldi	r25, 0x00	; 0
    f29e:	cd b7       	in	r28, 0x3d	; 61
    f2a0:	de b7       	in	r29, 0x3e	; 62
    f2a2:	e8 e0       	ldi	r30, 0x08	; 8
    f2a4:	0c 94 b5 e9 	jmp	0x1d36a	; 0x1d36a <__epilogue_restores__+0x14>

0000f2a8 <fputs>:
    f2a8:	0f 93       	push	r16
    f2aa:	1f 93       	push	r17
    f2ac:	cf 93       	push	r28
    f2ae:	df 93       	push	r29
    f2b0:	8b 01       	movw	r16, r22
    f2b2:	ec 01       	movw	r28, r24
    f2b4:	89 91       	ld	r24, Y+
    f2b6:	88 23       	and	r24, r24
    f2b8:	41 f0       	breq	.+16     	; 0xf2ca <fputs+0x22>
    f2ba:	b8 01       	movw	r22, r16
    f2bc:	90 e0       	ldi	r25, 0x00	; 0
    f2be:	5a df       	rcall	.-332    	; 0xf174 <fputc>
    f2c0:	8f 3f       	cpi	r24, 0xFF	; 255
    f2c2:	2f ef       	ldi	r18, 0xFF	; 255
    f2c4:	92 07       	cpc	r25, r18
    f2c6:	b1 f7       	brne	.-20     	; 0xf2b4 <fputs+0xc>
    f2c8:	02 c0       	rjmp	.+4      	; 0xf2ce <fputs+0x26>
    f2ca:	80 e0       	ldi	r24, 0x00	; 0
    f2cc:	90 e0       	ldi	r25, 0x00	; 0
    f2ce:	df 91       	pop	r29
    f2d0:	cf 91       	pop	r28
    f2d2:	1f 91       	pop	r17
    f2d4:	0f 91       	pop	r16
    f2d6:	08 95       	ret

0000f2d8 <puts>:
    f2d8:	cf 93       	push	r28
    f2da:	df 93       	push	r29
    f2dc:	ec 01       	movw	r28, r24
    f2de:	89 91       	ld	r24, Y+
    f2e0:	60 91 0c 1d 	lds	r22, 0x1D0C	; 0x801d0c <__iob+0x2>
    f2e4:	70 91 0d 1d 	lds	r23, 0x1D0D	; 0x801d0d <__iob+0x3>
    f2e8:	88 23       	and	r24, r24
    f2ea:	39 f0       	breq	.+14     	; 0xf2fa <puts+0x22>
    f2ec:	90 e0       	ldi	r25, 0x00	; 0
    f2ee:	42 df       	rcall	.-380    	; 0xf174 <fputc>
    f2f0:	8f 3f       	cpi	r24, 0xFF	; 255
    f2f2:	2f ef       	ldi	r18, 0xFF	; 255
    f2f4:	92 07       	cpc	r25, r18
    f2f6:	99 f7       	brne	.-26     	; 0xf2de <puts+0x6>
    f2f8:	03 c0       	rjmp	.+6      	; 0xf300 <puts+0x28>
    f2fa:	8a e0       	ldi	r24, 0x0A	; 10
    f2fc:	90 e0       	ldi	r25, 0x00	; 0
    f2fe:	3a df       	rcall	.-396    	; 0xf174 <fputc>
    f300:	df 91       	pop	r29
    f302:	cf 91       	pop	r28
    f304:	08 95       	ret

0000f306 <fileno>:
    f306:	00 97       	sbiw	r24, 0x00	; 0
    f308:	39 f4       	brne	.+14     	; 0xf318 <fileno+0x12>
    f30a:	89 e0       	ldi	r24, 0x09	; 9
    f30c:	90 e0       	ldi	r25, 0x00	; 0
    f30e:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
    f312:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
    f316:	0e c0       	rjmp	.+28     	; 0xf334 <fileno+0x2e>
    f318:	ea e0       	ldi	r30, 0x0A	; 10
    f31a:	fd e1       	ldi	r31, 0x1D	; 29
    f31c:	20 e0       	ldi	r18, 0x00	; 0
    f31e:	30 e0       	ldi	r19, 0x00	; 0
    f320:	41 91       	ld	r20, Z+
    f322:	51 91       	ld	r21, Z+
    f324:	84 17       	cp	r24, r20
    f326:	95 07       	cpc	r25, r21
    f328:	41 f0       	breq	.+16     	; 0xf33a <fileno+0x34>
    f32a:	2f 5f       	subi	r18, 0xFF	; 255
    f32c:	3f 4f       	sbci	r19, 0xFF	; 255
    f32e:	20 31       	cpi	r18, 0x10	; 16
    f330:	31 05       	cpc	r19, r1
    f332:	b1 f7       	brne	.-20     	; 0xf320 <fileno+0x1a>
    f334:	8f ef       	ldi	r24, 0xFF	; 255
    f336:	9f ef       	ldi	r25, 0xFF	; 255
    f338:	08 95       	ret
    f33a:	c9 01       	movw	r24, r18
    f33c:	08 95       	ret

0000f33e <fileno_to_stream>:
    f33e:	80 31       	cpi	r24, 0x10	; 16
    f340:	91 05       	cpc	r25, r1
    f342:	48 f4       	brcc	.+18     	; 0xf356 <fileno_to_stream+0x18>
    f344:	88 0f       	add	r24, r24
    f346:	99 1f       	adc	r25, r25
    f348:	fc 01       	movw	r30, r24
    f34a:	e6 5f       	subi	r30, 0xF6	; 246
    f34c:	f2 4e       	sbci	r31, 0xE2	; 226
    f34e:	80 81       	ld	r24, Z
    f350:	91 81       	ldd	r25, Z+1	; 0x01
    f352:	00 97       	sbiw	r24, 0x00	; 0
    f354:	41 f4       	brne	.+16     	; 0xf366 <fileno_to_stream+0x28>
    f356:	89 e0       	ldi	r24, 0x09	; 9
    f358:	90 e0       	ldi	r25, 0x00	; 0
    f35a:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
    f35e:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
    f362:	80 e0       	ldi	r24, 0x00	; 0
    f364:	90 e0       	ldi	r25, 0x00	; 0
    f366:	08 95       	ret

0000f368 <mctime>:
    f368:	a4 e0       	ldi	r26, 0x04	; 4
    f36a:	b0 e0       	ldi	r27, 0x00	; 0
    f36c:	ea eb       	ldi	r30, 0xBA	; 186
    f36e:	f9 e7       	ldi	r31, 0x79	; 121
    f370:	0c 94 9f e9 	jmp	0x1d33e	; 0x1d33e <__prologue_saves__+0x20>
    f374:	69 83       	std	Y+1, r22	; 0x01
    f376:	7a 83       	std	Y+2, r23	; 0x02
    f378:	8b 83       	std	Y+3, r24	; 0x03
    f37a:	9c 83       	std	Y+4, r25	; 0x04
    f37c:	10 92 09 1d 	sts	0x1D09, r1	; 0x801d09 <errno+0x1>
    f380:	10 92 08 1d 	sts	0x1D08, r1	; 0x801d08 <errno>
    f384:	ce 01       	movw	r24, r28
    f386:	01 96       	adiw	r24, 0x01	; 1
    f388:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <ctime_gm>
    f38c:	fc 01       	movw	r30, r24
    f38e:	01 90       	ld	r0, Z+
    f390:	00 20       	and	r0, r0
    f392:	e9 f7       	brne	.-6      	; 0xf38e <mctime+0x26>
    f394:	31 97       	sbiw	r30, 0x01	; 1
    f396:	e8 1b       	sub	r30, r24
    f398:	f9 0b       	sbc	r31, r25
    f39a:	39 f0       	breq	.+14     	; 0xf3aa <mctime+0x42>
    f39c:	31 97       	sbiw	r30, 0x01	; 1
    f39e:	e8 0f       	add	r30, r24
    f3a0:	f9 1f       	adc	r31, r25
    f3a2:	20 81       	ld	r18, Z
    f3a4:	2a 30       	cpi	r18, 0x0A	; 10
    f3a6:	09 f4       	brne	.+2      	; 0xf3aa <mctime+0x42>
    f3a8:	10 82       	st	Z, r1
    f3aa:	24 96       	adiw	r28, 0x04	; 4
    f3ac:	e2 e0       	ldi	r30, 0x02	; 2
    f3ae:	0c 94 bb e9 	jmp	0x1d376	; 0x1d376 <__epilogue_restores__+0x20>

0000f3b2 <dump_stat>:
    f3b2:	cf 92       	push	r12
    f3b4:	df 92       	push	r13
    f3b6:	ef 92       	push	r14
    f3b8:	ff 92       	push	r15
    f3ba:	cf 93       	push	r28
    f3bc:	df 93       	push	r29
    f3be:	ec 01       	movw	r28, r24
    f3c0:	c8 84       	ldd	r12, Y+8	; 0x08
    f3c2:	d9 84       	ldd	r13, Y+9	; 0x09
    f3c4:	ea 84       	ldd	r14, Y+10	; 0x0a
    f3c6:	fb 84       	ldd	r15, Y+11	; 0x0b
    f3c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    f3ca:	8f 93       	push	r24
    f3cc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    f3ce:	8f 93       	push	r24
    f3d0:	89 8d       	ldd	r24, Y+25	; 0x19
    f3d2:	8f 93       	push	r24
    f3d4:	88 8d       	ldd	r24, Y+24	; 0x18
    f3d6:	8f 93       	push	r24
    f3d8:	87 e4       	ldi	r24, 0x47	; 71
    f3da:	9c e0       	ldi	r25, 0x0C	; 12
    f3dc:	1f 92       	push	r1
    f3de:	9f 93       	push	r25
    f3e0:	8f 93       	push	r24
    f3e2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    f3e6:	8e e3       	ldi	r24, 0x3E	; 62
    f3e8:	9c e0       	ldi	r25, 0x0C	; 12
    f3ea:	1f 92       	push	r1
    f3ec:	9f 93       	push	r25
    f3ee:	8f 93       	push	r24
    f3f0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    f3f4:	d7 01       	movw	r26, r14
    f3f6:	c6 01       	movw	r24, r12
    f3f8:	88 27       	eor	r24, r24
    f3fa:	90 7f       	andi	r25, 0xF0	; 240
    f3fc:	aa 27       	eor	r26, r26
    f3fe:	bb 27       	eor	r27, r27
    f400:	2d b7       	in	r18, 0x3d	; 61
    f402:	3e b7       	in	r19, 0x3e	; 62
    f404:	26 5f       	subi	r18, 0xF6	; 246
    f406:	3f 4f       	sbci	r19, 0xFF	; 255
    f408:	0f b6       	in	r0, 0x3f	; 63
    f40a:	f8 94       	cli
    f40c:	3e bf       	out	0x3e, r19	; 62
    f40e:	0f be       	out	0x3f, r0	; 63
    f410:	2d bf       	out	0x3d, r18	; 61
    f412:	81 15       	cp	r24, r1
    f414:	30 e4       	ldi	r19, 0x40	; 64
    f416:	93 07       	cpc	r25, r19
    f418:	a1 05       	cpc	r26, r1
    f41a:	b1 05       	cpc	r27, r1
    f41c:	19 f4       	brne	.+6      	; 0xf424 <dump_stat+0x72>
    f41e:	89 e3       	ldi	r24, 0x39	; 57
    f420:	9c e0       	ldi	r25, 0x0C	; 12
    f422:	0a c0       	rjmp	.+20     	; 0xf438 <dump_stat+0x86>
    f424:	81 15       	cp	r24, r1
    f426:	90 48       	sbci	r25, 0x80	; 128
    f428:	a1 05       	cpc	r26, r1
    f42a:	b1 05       	cpc	r27, r1
    f42c:	19 f4       	brne	.+6      	; 0xf434 <dump_stat+0x82>
    f42e:	83 e3       	ldi	r24, 0x33	; 51
    f430:	9c e0       	ldi	r25, 0x0C	; 12
    f432:	02 c0       	rjmp	.+4      	; 0xf438 <dump_stat+0x86>
    f434:	8a e2       	ldi	r24, 0x2A	; 42
    f436:	9c e0       	ldi	r25, 0x0C	; 12
    f438:	1f 92       	push	r1
    f43a:	9f 93       	push	r25
    f43c:	8f 93       	push	r24
    f43e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    f442:	0f 90       	pop	r0
    f444:	0f 90       	pop	r0
    f446:	0f 90       	pop	r0
    f448:	8b 85       	ldd	r24, Y+11	; 0x0b
    f44a:	8f 93       	push	r24
    f44c:	8a 85       	ldd	r24, Y+10	; 0x0a
    f44e:	8f 93       	push	r24
    f450:	89 85       	ldd	r24, Y+9	; 0x09
    f452:	8f 93       	push	r24
    f454:	88 85       	ldd	r24, Y+8	; 0x08
    f456:	8f 93       	push	r24
    f458:	8d e1       	ldi	r24, 0x1D	; 29
    f45a:	9c e0       	ldi	r25, 0x0C	; 12
    f45c:	1f 92       	push	r1
    f45e:	9f 93       	push	r25
    f460:	8f 93       	push	r24
    f462:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    f466:	88 89       	ldd	r24, Y+16	; 0x10
    f468:	99 89       	ldd	r25, Y+17	; 0x11
    f46a:	1f 92       	push	r1
    f46c:	1f 92       	push	r1
    f46e:	9f 93       	push	r25
    f470:	8f 93       	push	r24
    f472:	80 e1       	ldi	r24, 0x10	; 16
    f474:	9c e0       	ldi	r25, 0x0C	; 12
    f476:	1f 92       	push	r1
    f478:	9f 93       	push	r25
    f47a:	8f 93       	push	r24
    f47c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    f480:	8a 89       	ldd	r24, Y+18	; 0x12
    f482:	9b 89       	ldd	r25, Y+19	; 0x13
    f484:	1f 92       	push	r1
    f486:	1f 92       	push	r1
    f488:	9f 93       	push	r25
    f48a:	8f 93       	push	r24
    f48c:	83 e0       	ldi	r24, 0x03	; 3
    f48e:	9c e0       	ldi	r25, 0x0C	; 12
    f490:	1f 92       	push	r1
    f492:	9f 93       	push	r25
    f494:	8f 93       	push	r24
    f496:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    f49a:	6c a1       	ldd	r22, Y+36	; 0x24
    f49c:	7d a1       	ldd	r23, Y+37	; 0x25
    f49e:	8e a1       	ldd	r24, Y+38	; 0x26
    f4a0:	9f a1       	ldd	r25, Y+39	; 0x27
    f4a2:	62 df       	rcall	.-316    	; 0xf368 <mctime>
    f4a4:	9f 93       	push	r25
    f4a6:	8f 93       	push	r24
    f4a8:	87 ef       	ldi	r24, 0xF7	; 247
    f4aa:	9b e0       	ldi	r25, 0x0B	; 11
    f4ac:	1f 92       	push	r1
    f4ae:	9f 93       	push	r25
    f4b0:	8f 93       	push	r24
    f4b2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    f4b6:	68 a5       	ldd	r22, Y+40	; 0x28
    f4b8:	79 a5       	ldd	r23, Y+41	; 0x29
    f4ba:	8a a5       	ldd	r24, Y+42	; 0x2a
    f4bc:	9b a5       	ldd	r25, Y+43	; 0x2b
    f4be:	54 df       	rcall	.-344    	; 0xf368 <mctime>
    f4c0:	9f 93       	push	r25
    f4c2:	8f 93       	push	r24
    f4c4:	8b ee       	ldi	r24, 0xEB	; 235
    f4c6:	9b e0       	ldi	r25, 0x0B	; 11
    f4c8:	1f 92       	push	r1
    f4ca:	9f 93       	push	r25
    f4cc:	8f 93       	push	r24
    f4ce:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    f4d2:	6c a5       	ldd	r22, Y+44	; 0x2c
    f4d4:	7d a5       	ldd	r23, Y+45	; 0x2d
    f4d6:	8e a5       	ldd	r24, Y+46	; 0x2e
    f4d8:	9f a5       	ldd	r25, Y+47	; 0x2f
    f4da:	46 df       	rcall	.-372    	; 0xf368 <mctime>
    f4dc:	9f 93       	push	r25
    f4de:	8f 93       	push	r24
    f4e0:	8f ed       	ldi	r24, 0xDF	; 223
    f4e2:	9b e0       	ldi	r25, 0x0B	; 11
    f4e4:	1f 92       	push	r1
    f4e6:	9f 93       	push	r25
    f4e8:	8f 93       	push	r24
    f4ea:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    f4ee:	8d b7       	in	r24, 0x3d	; 61
    f4f0:	9e b7       	in	r25, 0x3e	; 62
    f4f2:	84 96       	adiw	r24, 0x24	; 36
    f4f4:	0f b6       	in	r0, 0x3f	; 63
    f4f6:	f8 94       	cli
    f4f8:	9e bf       	out	0x3e, r25	; 62
    f4fa:	0f be       	out	0x3f, r0	; 63
    f4fc:	8d bf       	out	0x3d, r24	; 61
    f4fe:	df 91       	pop	r29
    f500:	cf 91       	pop	r28
    f502:	ff 90       	pop	r15
    f504:	ef 90       	pop	r14
    f506:	df 90       	pop	r13
    f508:	cf 90       	pop	r12
    f50a:	08 95       	ret

0000f50c <basename>:
    f50c:	00 97       	sbiw	r24, 0x00	; 0
    f50e:	49 f0       	breq	.+18     	; 0xf522 <basename+0x16>
    f510:	fc 01       	movw	r30, r24
    f512:	21 91       	ld	r18, Z+
    f514:	22 23       	and	r18, r18
    f516:	21 f0       	breq	.+8      	; 0xf520 <basename+0x14>
    f518:	2f 32       	cpi	r18, 0x2F	; 47
    f51a:	d9 f7       	brne	.-10     	; 0xf512 <basename+0x6>
    f51c:	cf 01       	movw	r24, r30
    f51e:	f9 cf       	rjmp	.-14     	; 0xf512 <basename+0x6>
    f520:	08 95       	ret
    f522:	87 e3       	ldi	r24, 0x37	; 55
    f524:	9c e0       	ldi	r25, 0x0C	; 12
    f526:	08 95       	ret

0000f528 <chdir>:
    f528:	10 92 09 1d 	sts	0x1D09, r1	; 0x801d09 <errno+0x1>
    f52c:	10 92 08 1d 	sts	0x1D08, r1	; 0x801d08 <errno>
    f530:	0e 94 6d 5c 	call	0xb8da	; 0xb8da <f_chdir>
    f534:	00 97       	sbiw	r24, 0x00	; 0
    f536:	a1 f0       	breq	.+40     	; 0xf560 <chdir+0x38>
    f538:	84 31       	cpi	r24, 0x14	; 20
    f53a:	91 05       	cpc	r25, r1
    f53c:	40 f4       	brcc	.+16     	; 0xf54e <chdir+0x26>
    f53e:	fc 01       	movw	r30, r24
    f540:	e7 57       	subi	r30, 0x77	; 119
    f542:	f8 4f       	sbci	r31, 0xF8	; 248
    f544:	80 81       	ld	r24, Z
    f546:	08 2e       	mov	r0, r24
    f548:	00 0c       	add	r0, r0
    f54a:	99 0b       	sbc	r25, r25
    f54c:	02 c0       	rjmp	.+4      	; 0xf552 <chdir+0x2a>
    f54e:	83 e2       	ldi	r24, 0x23	; 35
    f550:	90 e0       	ldi	r25, 0x00	; 0
    f552:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
    f556:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
    f55a:	8f ef       	ldi	r24, 0xFF	; 255
    f55c:	9f ef       	ldi	r25, 0xFF	; 255
    f55e:	08 95       	ret
    f560:	80 e0       	ldi	r24, 0x00	; 0
    f562:	90 e0       	ldi	r25, 0x00	; 0
    f564:	08 95       	ret

0000f566 <chmod>:
    f566:	10 92 09 1d 	sts	0x1D09, r1	; 0x801d09 <errno+0x1>
    f56a:	10 92 08 1d 	sts	0x1D08, r1	; 0x801d08 <errno>
    f56e:	42 79       	andi	r20, 0x92	; 146
    f570:	55 27       	eor	r21, r21
    f572:	66 27       	eor	r22, r22
    f574:	77 27       	eor	r23, r23
    f576:	45 2b       	or	r20, r21
    f578:	46 2b       	or	r20, r22
    f57a:	47 2b       	or	r20, r23
    f57c:	19 f0       	breq	.+6      	; 0xf584 <chmod+0x1e>
    f57e:	80 e0       	ldi	r24, 0x00	; 0
    f580:	90 e0       	ldi	r25, 0x00	; 0
    f582:	08 95       	ret
    f584:	41 e0       	ldi	r20, 0x01	; 1
    f586:	61 e0       	ldi	r22, 0x01	; 1
    f588:	0e 94 d3 65 	call	0xcba6	; 0xcba6 <f_chmod>
    f58c:	00 97       	sbiw	r24, 0x00	; 0
    f58e:	b9 f3       	breq	.-18     	; 0xf57e <chmod+0x18>
    f590:	84 31       	cpi	r24, 0x14	; 20
    f592:	91 05       	cpc	r25, r1
    f594:	40 f4       	brcc	.+16     	; 0xf5a6 <chmod+0x40>
    f596:	fc 01       	movw	r30, r24
    f598:	e7 57       	subi	r30, 0x77	; 119
    f59a:	f8 4f       	sbci	r31, 0xF8	; 248
    f59c:	80 81       	ld	r24, Z
    f59e:	08 2e       	mov	r0, r24
    f5a0:	00 0c       	add	r0, r0
    f5a2:	99 0b       	sbc	r25, r25
    f5a4:	02 c0       	rjmp	.+4      	; 0xf5aa <chmod+0x44>
    f5a6:	83 e2       	ldi	r24, 0x23	; 35
    f5a8:	90 e0       	ldi	r25, 0x00	; 0
    f5aa:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
    f5ae:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
    f5b2:	8f ef       	ldi	r24, 0xFF	; 255
    f5b4:	9f ef       	ldi	r25, 0xFF	; 255
    f5b6:	08 95       	ret

0000f5b8 <getcwd>:
    f5b8:	cf 93       	push	r28
    f5ba:	df 93       	push	r29
    f5bc:	d8 2f       	mov	r29, r24
    f5be:	c9 2f       	mov	r28, r25
    f5c0:	10 92 09 1d 	sts	0x1D09, r1	; 0x801d09 <errno+0x1>
    f5c4:	10 92 08 1d 	sts	0x1D08, r1	; 0x801d08 <errno>
    f5c8:	0e 94 c8 5c 	call	0xb990	; 0xb990 <f_getcwd>
    f5cc:	00 97       	sbiw	r24, 0x00	; 0
    f5ce:	a1 f0       	breq	.+40     	; 0xf5f8 <getcwd+0x40>
    f5d0:	84 31       	cpi	r24, 0x14	; 20
    f5d2:	91 05       	cpc	r25, r1
    f5d4:	40 f4       	brcc	.+16     	; 0xf5e6 <getcwd+0x2e>
    f5d6:	fc 01       	movw	r30, r24
    f5d8:	e7 57       	subi	r30, 0x77	; 119
    f5da:	f8 4f       	sbci	r31, 0xF8	; 248
    f5dc:	80 81       	ld	r24, Z
    f5de:	08 2e       	mov	r0, r24
    f5e0:	00 0c       	add	r0, r0
    f5e2:	99 0b       	sbc	r25, r25
    f5e4:	02 c0       	rjmp	.+4      	; 0xf5ea <getcwd+0x32>
    f5e6:	83 e2       	ldi	r24, 0x23	; 35
    f5e8:	90 e0       	ldi	r25, 0x00	; 0
    f5ea:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
    f5ee:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
    f5f2:	80 e0       	ldi	r24, 0x00	; 0
    f5f4:	90 e0       	ldi	r25, 0x00	; 0
    f5f6:	02 c0       	rjmp	.+4      	; 0xf5fc <getcwd+0x44>
    f5f8:	8d 2f       	mov	r24, r29
    f5fa:	9c 2f       	mov	r25, r28
    f5fc:	df 91       	pop	r29
    f5fe:	cf 91       	pop	r28
    f600:	08 95       	ret

0000f602 <mkdir>:
    f602:	cf 93       	push	r28
    f604:	df 93       	push	r29
    f606:	ec 01       	movw	r28, r24
    f608:	10 92 09 1d 	sts	0x1D09, r1	; 0x801d09 <errno+0x1>
    f60c:	10 92 08 1d 	sts	0x1D08, r1	; 0x801d08 <errno>
    f610:	41 15       	cp	r20, r1
    f612:	51 05       	cpc	r21, r1
    f614:	61 05       	cpc	r22, r1
    f616:	71 05       	cpc	r23, r1
    f618:	41 f4       	brne	.+16     	; 0xf62a <mkdir+0x28>
    f61a:	ce 01       	movw	r24, r28
    f61c:	0e 94 7d 63 	call	0xc6fa	; 0xc6fa <f_mkdir>
    f620:	00 97       	sbiw	r24, 0x00	; 0
    f622:	39 f4       	brne	.+14     	; 0xf632 <mkdir+0x30>
    f624:	80 e0       	ldi	r24, 0x00	; 0
    f626:	90 e0       	ldi	r25, 0x00	; 0
    f628:	17 c0       	rjmp	.+46     	; 0xf658 <mkdir+0x56>
    f62a:	9d df       	rcall	.-198    	; 0xf566 <chmod>
    f62c:	89 2b       	or	r24, r25
    f62e:	a9 f3       	breq	.-22     	; 0xf61a <mkdir+0x18>
    f630:	11 c0       	rjmp	.+34     	; 0xf654 <mkdir+0x52>
    f632:	84 31       	cpi	r24, 0x14	; 20
    f634:	91 05       	cpc	r25, r1
    f636:	40 f4       	brcc	.+16     	; 0xf648 <mkdir+0x46>
    f638:	fc 01       	movw	r30, r24
    f63a:	e7 57       	subi	r30, 0x77	; 119
    f63c:	f8 4f       	sbci	r31, 0xF8	; 248
    f63e:	80 81       	ld	r24, Z
    f640:	08 2e       	mov	r0, r24
    f642:	00 0c       	add	r0, r0
    f644:	99 0b       	sbc	r25, r25
    f646:	02 c0       	rjmp	.+4      	; 0xf64c <mkdir+0x4a>
    f648:	83 e2       	ldi	r24, 0x23	; 35
    f64a:	90 e0       	ldi	r25, 0x00	; 0
    f64c:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
    f650:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
    f654:	8f ef       	ldi	r24, 0xFF	; 255
    f656:	9f ef       	ldi	r25, 0xFF	; 255
    f658:	df 91       	pop	r29
    f65a:	cf 91       	pop	r28
    f65c:	08 95       	ret

0000f65e <rename>:
    f65e:	10 92 09 1d 	sts	0x1D09, r1	; 0x801d09 <errno+0x1>
    f662:	10 92 08 1d 	sts	0x1D08, r1	; 0x801d08 <errno>
    f666:	0e 94 c4 64 	call	0xc988	; 0xc988 <f_rename>
    f66a:	00 97       	sbiw	r24, 0x00	; 0
    f66c:	a1 f0       	breq	.+40     	; 0xf696 <rename+0x38>
    f66e:	84 31       	cpi	r24, 0x14	; 20
    f670:	91 05       	cpc	r25, r1
    f672:	40 f4       	brcc	.+16     	; 0xf684 <rename+0x26>
    f674:	fc 01       	movw	r30, r24
    f676:	e7 57       	subi	r30, 0x77	; 119
    f678:	f8 4f       	sbci	r31, 0xF8	; 248
    f67a:	80 81       	ld	r24, Z
    f67c:	08 2e       	mov	r0, r24
    f67e:	00 0c       	add	r0, r0
    f680:	99 0b       	sbc	r25, r25
    f682:	02 c0       	rjmp	.+4      	; 0xf688 <rename+0x2a>
    f684:	83 e2       	ldi	r24, 0x23	; 35
    f686:	90 e0       	ldi	r25, 0x00	; 0
    f688:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
    f68c:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
    f690:	8f ef       	ldi	r24, 0xFF	; 255
    f692:	9f ef       	ldi	r25, 0xFF	; 255
    f694:	08 95       	ret
    f696:	80 e0       	ldi	r24, 0x00	; 0
    f698:	90 e0       	ldi	r25, 0x00	; 0
    f69a:	08 95       	ret

0000f69c <unlink>:
    f69c:	10 92 09 1d 	sts	0x1D09, r1	; 0x801d09 <errno+0x1>
    f6a0:	10 92 08 1d 	sts	0x1D08, r1	; 0x801d08 <errno>
    f6a4:	0e 94 d4 62 	call	0xc5a8	; 0xc5a8 <f_unlink>
    f6a8:	00 97       	sbiw	r24, 0x00	; 0
    f6aa:	a1 f0       	breq	.+40     	; 0xf6d4 <unlink+0x38>
    f6ac:	84 31       	cpi	r24, 0x14	; 20
    f6ae:	91 05       	cpc	r25, r1
    f6b0:	40 f4       	brcc	.+16     	; 0xf6c2 <unlink+0x26>
    f6b2:	fc 01       	movw	r30, r24
    f6b4:	e7 57       	subi	r30, 0x77	; 119
    f6b6:	f8 4f       	sbci	r31, 0xF8	; 248
    f6b8:	80 81       	ld	r24, Z
    f6ba:	08 2e       	mov	r0, r24
    f6bc:	00 0c       	add	r0, r0
    f6be:	99 0b       	sbc	r25, r25
    f6c0:	02 c0       	rjmp	.+4      	; 0xf6c6 <unlink+0x2a>
    f6c2:	83 e2       	ldi	r24, 0x23	; 35
    f6c4:	90 e0       	ldi	r25, 0x00	; 0
    f6c6:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
    f6ca:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
    f6ce:	8f ef       	ldi	r24, 0xFF	; 255
    f6d0:	9f ef       	ldi	r25, 0xFF	; 255
    f6d2:	08 95       	ret
    f6d4:	80 e0       	ldi	r24, 0x00	; 0
    f6d6:	90 e0       	ldi	r25, 0x00	; 0
    f6d8:	08 95       	ret

0000f6da <rmdir>:
    f6da:	e0 cf       	rjmp	.-64     	; 0xf69c <unlink>
    f6dc:	08 95       	ret

0000f6de <closedir>:
    f6de:	0e 94 4c 61 	call	0xc298	; 0xc298 <f_closedir>
    f6e2:	00 97       	sbiw	r24, 0x00	; 0
    f6e4:	a1 f0       	breq	.+40     	; 0xf70e <closedir+0x30>
    f6e6:	84 31       	cpi	r24, 0x14	; 20
    f6e8:	91 05       	cpc	r25, r1
    f6ea:	40 f4       	brcc	.+16     	; 0xf6fc <closedir+0x1e>
    f6ec:	fc 01       	movw	r30, r24
    f6ee:	e7 57       	subi	r30, 0x77	; 119
    f6f0:	f8 4f       	sbci	r31, 0xF8	; 248
    f6f2:	80 81       	ld	r24, Z
    f6f4:	08 2e       	mov	r0, r24
    f6f6:	00 0c       	add	r0, r0
    f6f8:	99 0b       	sbc	r25, r25
    f6fa:	02 c0       	rjmp	.+4      	; 0xf700 <closedir+0x22>
    f6fc:	83 e2       	ldi	r24, 0x23	; 35
    f6fe:	90 e0       	ldi	r25, 0x00	; 0
    f700:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
    f704:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
    f708:	8f ef       	ldi	r24, 0xFF	; 255
    f70a:	9f ef       	ldi	r25, 0xFF	; 255
    f70c:	08 95       	ret
    f70e:	80 e0       	ldi	r24, 0x00	; 0
    f710:	90 e0       	ldi	r25, 0x00	; 0
    f712:	08 95       	ret

0000f714 <opendir>:
    f714:	bc 01       	movw	r22, r24
    f716:	80 e8       	ldi	r24, 0x80	; 128
    f718:	99 e1       	ldi	r25, 0x19	; 25
    f71a:	0e 94 d9 60 	call	0xc1b2	; 0xc1b2 <f_opendir>
    f71e:	00 97       	sbiw	r24, 0x00	; 0
    f720:	a1 f0       	breq	.+40     	; 0xf74a <opendir+0x36>
    f722:	84 31       	cpi	r24, 0x14	; 20
    f724:	91 05       	cpc	r25, r1
    f726:	40 f4       	brcc	.+16     	; 0xf738 <opendir+0x24>
    f728:	fc 01       	movw	r30, r24
    f72a:	e7 57       	subi	r30, 0x77	; 119
    f72c:	f8 4f       	sbci	r31, 0xF8	; 248
    f72e:	80 81       	ld	r24, Z
    f730:	08 2e       	mov	r0, r24
    f732:	00 0c       	add	r0, r0
    f734:	99 0b       	sbc	r25, r25
    f736:	02 c0       	rjmp	.+4      	; 0xf73c <opendir+0x28>
    f738:	83 e2       	ldi	r24, 0x23	; 35
    f73a:	90 e0       	ldi	r25, 0x00	; 0
    f73c:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
    f740:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
    f744:	80 e0       	ldi	r24, 0x00	; 0
    f746:	90 e0       	ldi	r25, 0x00	; 0
    f748:	08 95       	ret
    f74a:	80 e8       	ldi	r24, 0x80	; 128
    f74c:	99 e1       	ldi	r25, 0x19	; 25
    f74e:	08 95       	ret

0000f750 <readdir>:
    f750:	a6 e1       	ldi	r26, 0x16	; 22
    f752:	b1 e0       	ldi	r27, 0x01	; 1
    f754:	ee ea       	ldi	r30, 0xAE	; 174
    f756:	fb e7       	ldi	r31, 0x7B	; 123
    f758:	0c 94 9d e9 	jmp	0x1d33a	; 0x1d33a <__prologue_saves__+0x1c>
    f75c:	10 92 81 18 	sts	0x1881, r1	; 0x801881 <_de>
    f760:	be 01       	movw	r22, r28
    f762:	6f 5f       	subi	r22, 0xFF	; 255
    f764:	7f 4f       	sbci	r23, 0xFF	; 255
    f766:	0e 94 61 61 	call	0xc2c2	; 0xc2c2 <f_readdir>
    f76a:	00 97       	sbiw	r24, 0x00	; 0
    f76c:	a1 f0       	breq	.+40     	; 0xf796 <readdir+0x46>
    f76e:	84 31       	cpi	r24, 0x14	; 20
    f770:	91 05       	cpc	r25, r1
    f772:	40 f4       	brcc	.+16     	; 0xf784 <readdir+0x34>
    f774:	fc 01       	movw	r30, r24
    f776:	e7 57       	subi	r30, 0x77	; 119
    f778:	f8 4f       	sbci	r31, 0xF8	; 248
    f77a:	80 81       	ld	r24, Z
    f77c:	08 2e       	mov	r0, r24
    f77e:	00 0c       	add	r0, r0
    f780:	99 0b       	sbc	r25, r25
    f782:	02 c0       	rjmp	.+4      	; 0xf788 <readdir+0x38>
    f784:	83 e2       	ldi	r24, 0x23	; 35
    f786:	90 e0       	ldi	r25, 0x00	; 0
    f788:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
    f78c:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
    f790:	80 e0       	ldi	r24, 0x00	; 0
    f792:	90 e0       	ldi	r25, 0x00	; 0
    f794:	16 c0       	rjmp	.+44     	; 0xf7c2 <readdir+0x72>
    f796:	be 01       	movw	r22, r28
    f798:	69 5e       	subi	r22, 0xE9	; 233
    f79a:	7f 4f       	sbci	r23, 0xFF	; 255
    f79c:	fb 01       	movw	r30, r22
    f79e:	01 90       	ld	r0, Z+
    f7a0:	00 20       	and	r0, r0
    f7a2:	e9 f7       	brne	.-6      	; 0xf79e <readdir+0x4e>
    f7a4:	31 97       	sbiw	r30, 0x01	; 1
    f7a6:	8f 01       	movw	r16, r30
    f7a8:	06 1b       	sub	r16, r22
    f7aa:	17 0b       	sbc	r17, r23
    f7ac:	a8 01       	movw	r20, r16
    f7ae:	81 e8       	ldi	r24, 0x81	; 129
    f7b0:	98 e1       	ldi	r25, 0x18	; 24
    f7b2:	0e 94 66 30 	call	0x60cc	; 0x60cc <strncpy>
    f7b6:	f8 01       	movw	r30, r16
    f7b8:	ef 57       	subi	r30, 0x7F	; 127
    f7ba:	f7 4e       	sbci	r31, 0xE7	; 231
    f7bc:	10 82       	st	Z, r1
    f7be:	81 e8       	ldi	r24, 0x81	; 129
    f7c0:	98 e1       	ldi	r25, 0x18	; 24
    f7c2:	ca 5e       	subi	r28, 0xEA	; 234
    f7c4:	de 4f       	sbci	r29, 0xFE	; 254
    f7c6:	e4 e0       	ldi	r30, 0x04	; 4
    f7c8:	0c 94 b9 e9 	jmp	0x1d372	; 0x1d372 <__epilogue_restores__+0x1c>

0000f7cc <perror>:
    f7cc:	e0 91 08 1d 	lds	r30, 0x1D08	; 0x801d08 <errno>
    f7d0:	f0 91 09 1d 	lds	r31, 0x1D09	; 0x801d09 <errno+0x1>
    f7d4:	e3 32       	cpi	r30, 0x23	; 35
    f7d6:	f1 05       	cpc	r31, r1
    f7d8:	38 f4       	brcc	.+14     	; 0xf7e8 <perror+0x1c>
    f7da:	ee 0f       	add	r30, r30
    f7dc:	ff 1f       	adc	r31, r31
    f7de:	e0 5d       	subi	r30, 0xD0	; 208
    f7e0:	fe 4f       	sbci	r31, 0xFE	; 254
    f7e2:	20 81       	ld	r18, Z
    f7e4:	31 81       	ldd	r19, Z+1	; 0x01
    f7e6:	04 c0       	rjmp	.+8      	; 0xf7f0 <perror+0x24>
    f7e8:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <sys_errlist+0x46>
    f7ec:	30 91 77 01 	lds	r19, 0x0177	; 0x800177 <sys_errlist+0x47>
    f7f0:	00 97       	sbiw	r24, 0x00	; 0
    f7f2:	c1 f0       	breq	.+48     	; 0xf824 <perror+0x58>
    f7f4:	fc 01       	movw	r30, r24
    f7f6:	40 81       	ld	r20, Z
    f7f8:	44 23       	and	r20, r20
    f7fa:	a1 f0       	breq	.+40     	; 0xf824 <perror+0x58>
    f7fc:	3f 93       	push	r19
    f7fe:	2f 93       	push	r18
    f800:	9f 93       	push	r25
    f802:	8f 93       	push	r24
    f804:	87 ed       	ldi	r24, 0xD7	; 215
    f806:	9b e0       	ldi	r25, 0x0B	; 11
    f808:	1f 92       	push	r1
    f80a:	9f 93       	push	r25
    f80c:	8f 93       	push	r24
    f80e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    f812:	8d b7       	in	r24, 0x3d	; 61
    f814:	9e b7       	in	r25, 0x3e	; 62
    f816:	07 96       	adiw	r24, 0x07	; 7
    f818:	0f b6       	in	r0, 0x3f	; 63
    f81a:	f8 94       	cli
    f81c:	9e bf       	out	0x3e, r25	; 62
    f81e:	0f be       	out	0x3f, r0	; 63
    f820:	8d bf       	out	0x3d, r24	; 61
    f822:	08 95       	ret
    f824:	3f 93       	push	r19
    f826:	2f 93       	push	r18
    f828:	83 ed       	ldi	r24, 0xD3	; 211
    f82a:	9b e0       	ldi	r25, 0x0B	; 11
    f82c:	1f 92       	push	r1
    f82e:	9f 93       	push	r25
    f830:	8f 93       	push	r24
    f832:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    f836:	0f 90       	pop	r0
    f838:	0f 90       	pop	r0
    f83a:	0f 90       	pop	r0
    f83c:	0f 90       	pop	r0
    f83e:	0f 90       	pop	r0
    f840:	08 95       	ret

0000f842 <fdevopen>:
    f842:	0f 93       	push	r16
    f844:	1f 93       	push	r17
    f846:	cf 93       	push	r28
    f848:	df 93       	push	r29
    f84a:	00 97       	sbiw	r24, 0x00	; 0
    f84c:	31 f4       	brne	.+12     	; 0xf85a <fdevopen+0x18>
    f84e:	61 15       	cp	r22, r1
    f850:	71 05       	cpc	r23, r1
    f852:	19 f4       	brne	.+6      	; 0xf85a <fdevopen+0x18>
    f854:	80 e0       	ldi	r24, 0x00	; 0
    f856:	90 e0       	ldi	r25, 0x00	; 0
    f858:	3a c0       	rjmp	.+116    	; 0xf8ce <fdevopen+0x8c>
    f85a:	8b 01       	movw	r16, r22
    f85c:	ec 01       	movw	r28, r24
    f85e:	6e e0       	ldi	r22, 0x0E	; 14
    f860:	70 e0       	ldi	r23, 0x00	; 0
    f862:	81 e0       	ldi	r24, 0x01	; 1
    f864:	90 e0       	ldi	r25, 0x00	; 0
    f866:	0e 94 ca 29 	call	0x5394	; 0x5394 <safecalloc>
    f86a:	fc 01       	movw	r30, r24
    f86c:	89 2b       	or	r24, r25
    f86e:	91 f3       	breq	.-28     	; 0xf854 <fdevopen+0x12>
    f870:	80 e8       	ldi	r24, 0x80	; 128
    f872:	83 83       	std	Z+3, r24	; 0x03
    f874:	01 15       	cp	r16, r1
    f876:	11 05       	cpc	r17, r1
    f878:	71 f0       	breq	.+28     	; 0xf896 <fdevopen+0x54>
    f87a:	13 87       	std	Z+11, r17	; 0x0b
    f87c:	02 87       	std	Z+10, r16	; 0x0a
    f87e:	81 e8       	ldi	r24, 0x81	; 129
    f880:	83 83       	std	Z+3, r24	; 0x03
    f882:	80 91 0a 1d 	lds	r24, 0x1D0A	; 0x801d0a <__iob>
    f886:	90 91 0b 1d 	lds	r25, 0x1D0B	; 0x801d0b <__iob+0x1>
    f88a:	89 2b       	or	r24, r25
    f88c:	21 f4       	brne	.+8      	; 0xf896 <fdevopen+0x54>
    f88e:	f0 93 0b 1d 	sts	0x1D0B, r31	; 0x801d0b <__iob+0x1>
    f892:	e0 93 0a 1d 	sts	0x1D0A, r30	; 0x801d0a <__iob>
    f896:	20 97       	sbiw	r28, 0x00	; 0
    f898:	c9 f0       	breq	.+50     	; 0xf8cc <fdevopen+0x8a>
    f89a:	d1 87       	std	Z+9, r29	; 0x09
    f89c:	c0 87       	std	Z+8, r28	; 0x08
    f89e:	83 81       	ldd	r24, Z+3	; 0x03
    f8a0:	82 60       	ori	r24, 0x02	; 2
    f8a2:	83 83       	std	Z+3, r24	; 0x03
    f8a4:	80 91 0c 1d 	lds	r24, 0x1D0C	; 0x801d0c <__iob+0x2>
    f8a8:	90 91 0d 1d 	lds	r25, 0x1D0D	; 0x801d0d <__iob+0x3>
    f8ac:	89 2b       	or	r24, r25
    f8ae:	21 f4       	brne	.+8      	; 0xf8b8 <fdevopen+0x76>
    f8b0:	f0 93 0d 1d 	sts	0x1D0D, r31	; 0x801d0d <__iob+0x3>
    f8b4:	e0 93 0c 1d 	sts	0x1D0C, r30	; 0x801d0c <__iob+0x2>
    f8b8:	80 91 0e 1d 	lds	r24, 0x1D0E	; 0x801d0e <__iob+0x4>
    f8bc:	90 91 0f 1d 	lds	r25, 0x1D0F	; 0x801d0f <__iob+0x5>
    f8c0:	89 2b       	or	r24, r25
    f8c2:	21 f4       	brne	.+8      	; 0xf8cc <fdevopen+0x8a>
    f8c4:	f0 93 0f 1d 	sts	0x1D0F, r31	; 0x801d0f <__iob+0x5>
    f8c8:	e0 93 0e 1d 	sts	0x1D0E, r30	; 0x801d0e <__iob+0x4>
    f8cc:	cf 01       	movw	r24, r30
    f8ce:	df 91       	pop	r29
    f8d0:	cf 91       	pop	r28
    f8d2:	1f 91       	pop	r17
    f8d4:	0f 91       	pop	r16
    f8d6:	08 95       	ret

0000f8d8 <mkfs>:
    f8d8:	a9 e3       	ldi	r26, 0x39	; 57
    f8da:	b2 e0       	ldi	r27, 0x02	; 2
    f8dc:	e2 e7       	ldi	r30, 0x72	; 114
    f8de:	fc e7       	ldi	r31, 0x7C	; 124
    f8e0:	0c 94 99 e9 	jmp	0x1d332	; 0x1d332 <__prologue_saves__+0x14>
    f8e4:	6c 01       	movw	r12, r24
    f8e6:	6d ee       	ldi	r22, 0xED	; 237
    f8e8:	78 e0       	ldi	r23, 0x08	; 8
    f8ea:	0e 94 36 31 	call	0x626c	; 0x626c <MATCH>
    f8ee:	00 97       	sbiw	r24, 0x00	; 0
    f8f0:	59 f4       	brne	.+22     	; 0xf908 <mkfs+0x30>
    f8f2:	84 eb       	ldi	r24, 0xB4	; 180
    f8f4:	9b e0       	ldi	r25, 0x0B	; 11
    f8f6:	1f 92       	push	r1
    f8f8:	9f 93       	push	r25
    f8fa:	8f 93       	push	r24
    f8fc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    f900:	0f 90       	pop	r0
    f902:	0f 90       	pop	r0
    f904:	0f 90       	pop	r0
    f906:	55 c0       	rjmp	.+170    	; 0xf9b2 <mkfs+0xda>
    f908:	2a e3       	ldi	r18, 0x3A	; 58
    f90a:	c9 5c       	subi	r28, 0xC9	; 201
    f90c:	dd 4f       	sbci	r29, 0xFD	; 253
    f90e:	28 83       	st	Y, r18
    f910:	c7 53       	subi	r28, 0x37	; 55
    f912:	d2 40       	sbci	r29, 0x02	; 2
    f914:	c8 5c       	subi	r28, 0xC8	; 200
    f916:	dd 4f       	sbci	r29, 0xFD	; 253
    f918:	18 82       	st	Y, r1
    f91a:	c8 53       	subi	r28, 0x38	; 56
    f91c:	d2 40       	sbci	r29, 0x02	; 2
    f91e:	8c 0d       	add	r24, r12
    f920:	9d 1d       	adc	r25, r13
    f922:	fc 01       	movw	r30, r24
    f924:	31 97       	sbiw	r30, 0x01	; 1
    f926:	80 81       	ld	r24, Z
    f928:	90 e0       	ldi	r25, 0x00	; 0
    f92a:	0e 94 41 30 	call	0x6082	; 0x6082 <tolower>
    f92e:	9c 01       	movw	r18, r24
    f930:	21 56       	subi	r18, 0x61	; 97
    f932:	31 09       	sbc	r19, r1
    f934:	2a 30       	cpi	r18, 0x0A	; 10
    f936:	31 05       	cpc	r19, r1
    f938:	30 f4       	brcc	.+12     	; 0xf946 <mkfs+0x6e>
    f93a:	81 56       	subi	r24, 0x61	; 97
    f93c:	ca 5c       	subi	r28, 0xCA	; 202
    f93e:	dd 4f       	sbci	r29, 0xFD	; 253
    f940:	88 83       	st	Y, r24
    f942:	c6 53       	subi	r28, 0x36	; 54
    f944:	d2 40       	sbci	r29, 0x02	; 2
    f946:	c7 5c       	subi	r28, 0xC7	; 199
    f948:	dd 4f       	sbci	r29, 0xFD	; 253
    f94a:	18 82       	st	Y, r1
    f94c:	c9 53       	subi	r28, 0x39	; 57
    f94e:	d2 40       	sbci	r29, 0x02	; 2
    f950:	40 e0       	ldi	r20, 0x00	; 0
    f952:	be 01       	movw	r22, r28
    f954:	6a 5c       	subi	r22, 0xCA	; 202
    f956:	7d 4f       	sbci	r23, 0xFD	; 253
    f958:	ce 01       	movw	r24, r28
    f95a:	01 96       	adiw	r24, 0x01	; 1
    f95c:	0e 94 b8 56 	call	0xad70	; 0xad70 <f_mount>
    f960:	89 2b       	or	r24, r25
    f962:	29 f4       	brne	.+10     	; 0xf96e <mkfs+0x96>
    f964:	80 e0       	ldi	r24, 0x00	; 0
    f966:	90 e0       	ldi	r25, 0x00	; 0
    f968:	0e 94 74 73 	call	0xe6e8	; 0xe6e8 <put_rc>
    f96c:	22 c0       	rjmp	.+68     	; 0xf9b2 <mkfs+0xda>
    f96e:	80 e0       	ldi	r24, 0x00	; 0
    f970:	94 e0       	ldi	r25, 0x04	; 4
    f972:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <safemalloc>
    f976:	6c 01       	movw	r12, r24
    f978:	89 2b       	or	r24, r25
    f97a:	d9 f0       	breq	.+54     	; 0xf9b2 <mkfs+0xda>
    f97c:	e1 2c       	mov	r14, r1
    f97e:	84 e0       	ldi	r24, 0x04	; 4
    f980:	f8 2e       	mov	r15, r24
    f982:	86 01       	movw	r16, r12
    f984:	20 e0       	ldi	r18, 0x00	; 0
    f986:	30 e0       	ldi	r19, 0x00	; 0
    f988:	a9 01       	movw	r20, r18
    f98a:	62 e0       	ldi	r22, 0x02	; 2
    f98c:	ce 01       	movw	r24, r28
    f98e:	8a 5c       	subi	r24, 0xCA	; 202
    f990:	9d 4f       	sbci	r25, 0xFD	; 253
    f992:	0e 94 f3 66 	call	0xcde6	; 0xcde6 <f_mkfs>
    f996:	00 97       	sbiw	r24, 0x00	; 0
    f998:	31 f0       	breq	.+12     	; 0xf9a6 <mkfs+0xce>
    f99a:	0e 94 74 73 	call	0xe6e8	; 0xe6e8 <put_rc>
    f99e:	c6 01       	movw	r24, r12
    f9a0:	0e 94 13 2a 	call	0x5426	; 0x5426 <safefree>
    f9a4:	06 c0       	rjmp	.+12     	; 0xf9b2 <mkfs+0xda>
    f9a6:	c6 01       	movw	r24, r12
    f9a8:	0e 94 13 2a 	call	0x5426	; 0x5426 <safefree>
    f9ac:	81 e0       	ldi	r24, 0x01	; 1
    f9ae:	90 e0       	ldi	r25, 0x00	; 0
    f9b0:	02 c0       	rjmp	.+4      	; 0xf9b6 <mkfs+0xde>
    f9b2:	80 e0       	ldi	r24, 0x00	; 0
    f9b4:	90 e0       	ldi	r25, 0x00	; 0
    f9b6:	c7 5c       	subi	r28, 0xC7	; 199
    f9b8:	dd 4f       	sbci	r29, 0xFD	; 253
    f9ba:	e8 e0       	ldi	r30, 0x08	; 8
    f9bc:	0c 94 b5 e9 	jmp	0x1d36a	; 0x1d36a <__epilogue_restores__+0x14>

0000f9c0 <fat_time_to_unix>:
    f9c0:	a6 e1       	ldi	r26, 0x16	; 22
    f9c2:	b0 e0       	ldi	r27, 0x00	; 0
    f9c4:	e6 ee       	ldi	r30, 0xE6	; 230
    f9c6:	fc e7       	ldi	r31, 0x7C	; 124
    f9c8:	0c 94 9f e9 	jmp	0x1d33e	; 0x1d33e <__prologue_saves__+0x20>
    f9cc:	fe 01       	movw	r30, r28
    f9ce:	31 96       	adiw	r30, 0x01	; 1
    f9d0:	26 e1       	ldi	r18, 0x16	; 22
    f9d2:	df 01       	movw	r26, r30
    f9d4:	1d 92       	st	X+, r1
    f9d6:	2a 95       	dec	r18
    f9d8:	e9 f7       	brne	.-6      	; 0xf9d4 <fat_time_to_unix+0x14>
    f9da:	9b 01       	movw	r18, r22
    f9dc:	22 0f       	add	r18, r18
    f9de:	33 1f       	adc	r19, r19
    f9e0:	2e 73       	andi	r18, 0x3E	; 62
    f9e2:	33 27       	eor	r19, r19
    f9e4:	3a 83       	std	Y+2, r19	; 0x02
    f9e6:	29 83       	std	Y+1, r18	; 0x01
    f9e8:	9b 01       	movw	r18, r22
    f9ea:	55 e0       	ldi	r21, 0x05	; 5
    f9ec:	36 95       	lsr	r19
    f9ee:	27 95       	ror	r18
    f9f0:	5a 95       	dec	r21
    f9f2:	e1 f7       	brne	.-8      	; 0xf9ec <fat_time_to_unix+0x2c>
    f9f4:	2f 73       	andi	r18, 0x3F	; 63
    f9f6:	33 27       	eor	r19, r19
    f9f8:	3c 83       	std	Y+4, r19	; 0x04
    f9fa:	2b 83       	std	Y+3, r18	; 0x03
    f9fc:	27 2f       	mov	r18, r23
    f9fe:	26 95       	lsr	r18
    fa00:	26 95       	lsr	r18
    fa02:	26 95       	lsr	r18
    fa04:	2d 83       	std	Y+5, r18	; 0x05
    fa06:	1e 82       	std	Y+6, r1	; 0x06
    fa08:	9c 01       	movw	r18, r24
    fa0a:	2f 71       	andi	r18, 0x1F	; 31
    fa0c:	33 27       	eor	r19, r19
    fa0e:	38 87       	std	Y+8, r19	; 0x08
    fa10:	2f 83       	std	Y+7, r18	; 0x07
    fa12:	9c 01       	movw	r18, r24
    fa14:	65 e0       	ldi	r22, 0x05	; 5
    fa16:	36 95       	lsr	r19
    fa18:	27 95       	ror	r18
    fa1a:	6a 95       	dec	r22
    fa1c:	e1 f7       	brne	.-8      	; 0xfa16 <fat_time_to_unix+0x56>
    fa1e:	2f 70       	andi	r18, 0x0F	; 15
    fa20:	33 27       	eor	r19, r19
    fa22:	21 50       	subi	r18, 0x01	; 1
    fa24:	31 09       	sbc	r19, r1
    fa26:	3a 87       	std	Y+10, r19	; 0x0a
    fa28:	29 87       	std	Y+9, r18	; 0x09
    fa2a:	9c 01       	movw	r18, r24
    fa2c:	23 2f       	mov	r18, r19
    fa2e:	33 27       	eor	r19, r19
    fa30:	26 95       	lsr	r18
    fa32:	20 5b       	subi	r18, 0xB0	; 176
    fa34:	3f 4f       	sbci	r19, 0xFF	; 255
    fa36:	3c 87       	std	Y+12, r19	; 0x0c
    fa38:	2b 87       	std	Y+11, r18	; 0x0b
    fa3a:	cf 01       	movw	r24, r30
    fa3c:	0e 94 2f 39 	call	0x725e	; 0x725e <timegm>
    fa40:	66 96       	adiw	r28, 0x16	; 22
    fa42:	e2 e0       	ldi	r30, 0x02	; 2
    fa44:	0c 94 bb e9 	jmp	0x1d376	; 0x1d376 <__epilogue_restores__+0x20>

0000fa48 <stat>:
    fa48:	a6 e1       	ldi	r26, 0x16	; 22
    fa4a:	b1 e0       	ldi	r27, 0x01	; 1
    fa4c:	ea e2       	ldi	r30, 0x2A	; 42
    fa4e:	fd e7       	ldi	r31, 0x7D	; 125
    fa50:	0c 94 9b e9 	jmp	0x1d336	; 0x1d336 <__prologue_saves__+0x18>
    fa54:	7c 01       	movw	r14, r24
    fa56:	8b 01       	movw	r16, r22
    fa58:	10 92 09 1d 	sts	0x1D09, r1	; 0x801d09 <errno+0x1>
    fa5c:	10 92 08 1d 	sts	0x1D08, r1	; 0x801d08 <errno>
    fa60:	61 ea       	ldi	r22, 0xA1	; 161
    fa62:	78 e0       	ldi	r23, 0x08	; 8
    fa64:	0e 94 cd 30 	call	0x619a	; 0x619a <strcmp>
    fa68:	89 2b       	or	r24, r25
    fa6a:	39 f0       	breq	.+14     	; 0xfa7a <stat+0x32>
    fa6c:	60 ee       	ldi	r22, 0xE0	; 224
    fa6e:	70 e1       	ldi	r23, 0x10	; 16
    fa70:	c7 01       	movw	r24, r14
    fa72:	0e 94 cd 30 	call	0x619a	; 0x619a <strcmp>
    fa76:	89 2b       	or	r24, r25
    fa78:	d1 f4       	brne	.+52     	; 0xfaae <stat+0x66>
    fa7a:	f8 01       	movw	r30, r16
    fa7c:	14 a2       	std	Z+36, r1	; 0x24
    fa7e:	15 a2       	std	Z+37, r1	; 0x25
    fa80:	16 a2       	std	Z+38, r1	; 0x26
    fa82:	17 a2       	std	Z+39, r1	; 0x27
    fa84:	10 a6       	std	Z+40, r1	; 0x28
    fa86:	11 a6       	std	Z+41, r1	; 0x29
    fa88:	12 a6       	std	Z+42, r1	; 0x2a
    fa8a:	13 a6       	std	Z+43, r1	; 0x2b
    fa8c:	14 a6       	std	Z+44, r1	; 0x2c
    fa8e:	15 a6       	std	Z+45, r1	; 0x2d
    fa90:	16 a6       	std	Z+46, r1	; 0x2e
    fa92:	17 a6       	std	Z+47, r1	; 0x2f
    fa94:	11 8a       	std	Z+17, r1	; 0x11
    fa96:	10 8a       	std	Z+16, r1	; 0x10
    fa98:	13 8a       	std	Z+19, r1	; 0x13
    fa9a:	12 8a       	std	Z+18, r1	; 0x12
    fa9c:	10 8e       	std	Z+24, r1	; 0x18
    fa9e:	11 8e       	std	Z+25, r1	; 0x19
    faa0:	12 8e       	std	Z+26, r1	; 0x1a
    faa2:	13 8e       	std	Z+27, r1	; 0x1b
    faa4:	80 e0       	ldi	r24, 0x00	; 0
    faa6:	90 e4       	ldi	r25, 0x40	; 64
    faa8:	a0 e0       	ldi	r26, 0x00	; 0
    faaa:	b0 e0       	ldi	r27, 0x00	; 0
    faac:	4e c0       	rjmp	.+156    	; 0xfb4a <stat+0x102>
    faae:	be 01       	movw	r22, r28
    fab0:	6f 5f       	subi	r22, 0xFF	; 255
    fab2:	7f 4f       	sbci	r23, 0xFF	; 255
    fab4:	c7 01       	movw	r24, r14
    fab6:	0e 94 a7 61 	call	0xc34e	; 0xc34e <f_stat>
    faba:	00 97       	sbiw	r24, 0x00	; 0
    fabc:	a1 f0       	breq	.+40     	; 0xfae6 <stat+0x9e>
    fabe:	84 31       	cpi	r24, 0x14	; 20
    fac0:	91 05       	cpc	r25, r1
    fac2:	40 f4       	brcc	.+16     	; 0xfad4 <stat+0x8c>
    fac4:	fc 01       	movw	r30, r24
    fac6:	e7 57       	subi	r30, 0x77	; 119
    fac8:	f8 4f       	sbci	r31, 0xF8	; 248
    faca:	80 81       	ld	r24, Z
    facc:	08 2e       	mov	r0, r24
    face:	00 0c       	add	r0, r0
    fad0:	99 0b       	sbc	r25, r25
    fad2:	02 c0       	rjmp	.+4      	; 0xfad8 <stat+0x90>
    fad4:	83 e2       	ldi	r24, 0x23	; 35
    fad6:	90 e0       	ldi	r25, 0x00	; 0
    fad8:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
    fadc:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
    fae0:	8f ef       	ldi	r24, 0xFF	; 255
    fae2:	9f ef       	ldi	r25, 0xFF	; 255
    fae4:	38 c0       	rjmp	.+112    	; 0xfb56 <stat+0x10e>
    fae6:	89 81       	ldd	r24, Y+1	; 0x01
    fae8:	9a 81       	ldd	r25, Y+2	; 0x02
    faea:	ab 81       	ldd	r26, Y+3	; 0x03
    faec:	bc 81       	ldd	r27, Y+4	; 0x04
    faee:	f8 01       	movw	r30, r16
    faf0:	80 8f       	std	Z+24, r24	; 0x18
    faf2:	91 8f       	std	Z+25, r25	; 0x19
    faf4:	a2 8f       	std	Z+26, r26	; 0x1a
    faf6:	b3 8f       	std	Z+27, r27	; 0x1b
    faf8:	6f 81       	ldd	r22, Y+7	; 0x07
    fafa:	78 85       	ldd	r23, Y+8	; 0x08
    fafc:	8d 81       	ldd	r24, Y+5	; 0x05
    fafe:	9e 81       	ldd	r25, Y+6	; 0x06
    fb00:	5f df       	rcall	.-322    	; 0xf9c0 <fat_time_to_unix>
    fb02:	f8 01       	movw	r30, r16
    fb04:	64 a3       	std	Z+36, r22	; 0x24
    fb06:	75 a3       	std	Z+37, r23	; 0x25
    fb08:	86 a3       	std	Z+38, r24	; 0x26
    fb0a:	97 a3       	std	Z+39, r25	; 0x27
    fb0c:	60 a7       	std	Z+40, r22	; 0x28
    fb0e:	71 a7       	std	Z+41, r23	; 0x29
    fb10:	82 a7       	std	Z+42, r24	; 0x2a
    fb12:	93 a7       	std	Z+43, r25	; 0x2b
    fb14:	64 a7       	std	Z+44, r22	; 0x2c
    fb16:	75 a7       	std	Z+45, r23	; 0x2d
    fb18:	86 a7       	std	Z+46, r24	; 0x2e
    fb1a:	97 a7       	std	Z+47, r25	; 0x2f
    fb1c:	29 85       	ldd	r18, Y+9	; 0x09
    fb1e:	20 fd       	sbrc	r18, 0
    fb20:	03 c0       	rjmp	.+6      	; 0xfb28 <stat+0xe0>
    fb22:	8f ef       	ldi	r24, 0xFF	; 255
    fb24:	91 e0       	ldi	r25, 0x01	; 1
    fb26:	02 c0       	rjmp	.+4      	; 0xfb2c <stat+0xe4>
    fb28:	8d e6       	ldi	r24, 0x6D	; 109
    fb2a:	91 e0       	ldi	r25, 0x01	; 1
    fb2c:	48 ee       	ldi	r20, 0xE8	; 232
    fb2e:	53 e0       	ldi	r21, 0x03	; 3
    fb30:	f8 01       	movw	r30, r16
    fb32:	51 8b       	std	Z+17, r21	; 0x11
    fb34:	40 8b       	std	Z+16, r20	; 0x10
    fb36:	53 8b       	std	Z+19, r21	; 0x13
    fb38:	42 8b       	std	Z+18, r20	; 0x12
    fb3a:	24 ff       	sbrs	r18, 4
    fb3c:	02 c0       	rjmp	.+4      	; 0xfb42 <stat+0xfa>
    fb3e:	90 64       	ori	r25, 0x40	; 64
    fb40:	01 c0       	rjmp	.+2      	; 0xfb44 <stat+0xfc>
    fb42:	90 68       	ori	r25, 0x80	; 128
    fb44:	a0 e0       	ldi	r26, 0x00	; 0
    fb46:	b0 e0       	ldi	r27, 0x00	; 0
    fb48:	f8 01       	movw	r30, r16
    fb4a:	80 87       	std	Z+8, r24	; 0x08
    fb4c:	91 87       	std	Z+9, r25	; 0x09
    fb4e:	a2 87       	std	Z+10, r26	; 0x0a
    fb50:	b3 87       	std	Z+11, r27	; 0x0b
    fb52:	80 e0       	ldi	r24, 0x00	; 0
    fb54:	90 e0       	ldi	r25, 0x00	; 0
    fb56:	ca 5e       	subi	r28, 0xEA	; 234
    fb58:	de 4f       	sbci	r29, 0xFE	; 254
    fb5a:	e6 e0       	ldi	r30, 0x06	; 6
    fb5c:	0c 94 b7 e9 	jmp	0x1d36e	; 0x1d36e <__epilogue_restores__+0x18>

0000fb60 <unix_time_to_fat>:
    fb60:	a4 e0       	ldi	r26, 0x04	; 4
    fb62:	b0 e0       	ldi	r27, 0x00	; 0
    fb64:	e6 eb       	ldi	r30, 0xB6	; 182
    fb66:	fd e7       	ldi	r31, 0x7D	; 125
    fb68:	0c 94 9b e9 	jmp	0x1d336	; 0x1d336 <__prologue_saves__+0x18>
    fb6c:	69 83       	std	Y+1, r22	; 0x01
    fb6e:	7a 83       	std	Y+2, r23	; 0x02
    fb70:	8b 83       	std	Y+3, r24	; 0x03
    fb72:	9c 83       	std	Y+4, r25	; 0x04
    fb74:	7a 01       	movw	r14, r20
    fb76:	89 01       	movw	r16, r18
    fb78:	ce 01       	movw	r24, r28
    fb7a:	01 96       	adiw	r24, 0x01	; 1
    fb7c:	0e 94 6f 36 	call	0x6cde	; 0x6cde <gmtime>
    fb80:	fc 01       	movw	r30, r24
    fb82:	22 85       	ldd	r18, Z+10	; 0x0a
    fb84:	33 85       	ldd	r19, Z+11	; 0x0b
    fb86:	20 55       	subi	r18, 0x50	; 80
    fb88:	31 09       	sbc	r19, r1
    fb8a:	c9 01       	movw	r24, r18
    fb8c:	98 2f       	mov	r25, r24
    fb8e:	88 27       	eor	r24, r24
    fb90:	99 0f       	add	r25, r25
    fb92:	20 85       	ldd	r18, Z+8	; 0x08
    fb94:	31 85       	ldd	r19, Z+9	; 0x09
    fb96:	2f 5f       	subi	r18, 0xFF	; 255
    fb98:	3f 4f       	sbci	r19, 0xFF	; 255
    fb9a:	45 e0       	ldi	r20, 0x05	; 5
    fb9c:	22 0f       	add	r18, r18
    fb9e:	33 1f       	adc	r19, r19
    fba0:	4a 95       	dec	r20
    fba2:	e1 f7       	brne	.-8      	; 0xfb9c <unix_time_to_fat+0x3c>
    fba4:	28 2b       	or	r18, r24
    fba6:	39 2b       	or	r19, r25
    fba8:	86 81       	ldd	r24, Z+6	; 0x06
    fbaa:	97 81       	ldd	r25, Z+7	; 0x07
    fbac:	28 2b       	or	r18, r24
    fbae:	39 2b       	or	r19, r25
    fbb0:	d7 01       	movw	r26, r14
    fbb2:	2d 93       	st	X+, r18
    fbb4:	3c 93       	st	X, r19
    fbb6:	84 81       	ldd	r24, Z+4	; 0x04
    fbb8:	20 e0       	ldi	r18, 0x00	; 0
    fbba:	30 e0       	ldi	r19, 0x00	; 0
    fbbc:	38 2f       	mov	r19, r24
    fbbe:	33 0f       	add	r19, r19
    fbc0:	33 0f       	add	r19, r19
    fbc2:	33 0f       	add	r19, r19
    fbc4:	82 81       	ldd	r24, Z+2	; 0x02
    fbc6:	93 81       	ldd	r25, Z+3	; 0x03
    fbc8:	55 e0       	ldi	r21, 0x05	; 5
    fbca:	88 0f       	add	r24, r24
    fbcc:	99 1f       	adc	r25, r25
    fbce:	5a 95       	dec	r21
    fbd0:	e1 f7       	brne	.-8      	; 0xfbca <unix_time_to_fat+0x6a>
    fbd2:	82 2b       	or	r24, r18
    fbd4:	93 2b       	or	r25, r19
    fbd6:	20 81       	ld	r18, Z
    fbd8:	31 81       	ldd	r19, Z+1	; 0x01
    fbda:	36 95       	lsr	r19
    fbdc:	27 95       	ror	r18
    fbde:	82 2b       	or	r24, r18
    fbe0:	93 2b       	or	r25, r19
    fbe2:	f8 01       	movw	r30, r16
    fbe4:	91 83       	std	Z+1, r25	; 0x01
    fbe6:	80 83       	st	Z, r24
    fbe8:	24 96       	adiw	r28, 0x04	; 4
    fbea:	e6 e0       	ldi	r30, 0x06	; 6
    fbec:	0c 94 b7 e9 	jmp	0x1d36e	; 0x1d36e <__epilogue_restores__+0x18>

0000fbf0 <utime>:
    fbf0:	aa e1       	ldi	r26, 0x1A	; 26
    fbf2:	b1 e0       	ldi	r27, 0x01	; 1
    fbf4:	ee ef       	ldi	r30, 0xFE	; 254
    fbf6:	fd e7       	ldi	r31, 0x7D	; 125
    fbf8:	0c 94 9d e9 	jmp	0x1d33a	; 0x1d33a <__prologue_saves__+0x1c>
    fbfc:	8c 01       	movw	r16, r24
    fbfe:	61 15       	cp	r22, r1
    fc00:	71 05       	cpc	r23, r1
    fc02:	31 f0       	breq	.+12     	; 0xfc10 <utime+0x20>
    fc04:	fb 01       	movw	r30, r22
    fc06:	64 81       	ldd	r22, Z+4	; 0x04
    fc08:	75 81       	ldd	r23, Z+5	; 0x05
    fc0a:	86 81       	ldd	r24, Z+6	; 0x06
    fc0c:	97 81       	ldd	r25, Z+7	; 0x07
    fc0e:	04 c0       	rjmp	.+8      	; 0xfc18 <utime+0x28>
    fc10:	80 e0       	ldi	r24, 0x00	; 0
    fc12:	90 e0       	ldi	r25, 0x00	; 0
    fc14:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <time>
    fc18:	9e 01       	movw	r18, r28
    fc1a:	29 5e       	subi	r18, 0xE9	; 233
    fc1c:	3e 4f       	sbci	r19, 0xFE	; 254
    fc1e:	ae 01       	movw	r20, r28
    fc20:	47 5e       	subi	r20, 0xE7	; 231
    fc22:	5e 4f       	sbci	r21, 0xFE	; 254
    fc24:	9d df       	rcall	.-198    	; 0xfb60 <unix_time_to_fat>
    fc26:	c7 5e       	subi	r28, 0xE7	; 231
    fc28:	de 4f       	sbci	r29, 0xFE	; 254
    fc2a:	88 81       	ld	r24, Y
    fc2c:	99 81       	ldd	r25, Y+1	; 0x01
    fc2e:	c9 51       	subi	r28, 0x19	; 25
    fc30:	d1 40       	sbci	r29, 0x01	; 1
    fc32:	9e 83       	std	Y+6, r25	; 0x06
    fc34:	8d 83       	std	Y+5, r24	; 0x05
    fc36:	c9 5e       	subi	r28, 0xE9	; 233
    fc38:	de 4f       	sbci	r29, 0xFE	; 254
    fc3a:	88 81       	ld	r24, Y
    fc3c:	99 81       	ldd	r25, Y+1	; 0x01
    fc3e:	c7 51       	subi	r28, 0x17	; 23
    fc40:	d1 40       	sbci	r29, 0x01	; 1
    fc42:	98 87       	std	Y+8, r25	; 0x08
    fc44:	8f 83       	std	Y+7, r24	; 0x07
    fc46:	be 01       	movw	r22, r28
    fc48:	6f 5f       	subi	r22, 0xFF	; 255
    fc4a:	7f 4f       	sbci	r23, 0xFF	; 255
    fc4c:	c8 01       	movw	r24, r16
    fc4e:	0e 94 20 66 	call	0xcc40	; 0xcc40 <f_utime>
    fc52:	84 31       	cpi	r24, 0x14	; 20
    fc54:	91 05       	cpc	r25, r1
    fc56:	40 f4       	brcc	.+16     	; 0xfc68 <utime+0x78>
    fc58:	fc 01       	movw	r30, r24
    fc5a:	e7 57       	subi	r30, 0x77	; 119
    fc5c:	f8 4f       	sbci	r31, 0xF8	; 248
    fc5e:	80 81       	ld	r24, Z
    fc60:	08 2e       	mov	r0, r24
    fc62:	00 0c       	add	r0, r0
    fc64:	99 0b       	sbc	r25, r25
    fc66:	02 c0       	rjmp	.+4      	; 0xfc6c <utime+0x7c>
    fc68:	83 e2       	ldi	r24, 0x23	; 35
    fc6a:	90 e0       	ldi	r25, 0x00	; 0
    fc6c:	c6 5e       	subi	r28, 0xE6	; 230
    fc6e:	de 4f       	sbci	r29, 0xFE	; 254
    fc70:	e4 e0       	ldi	r30, 0x04	; 4
    fc72:	0c 94 b9 e9 	jmp	0x1d372	; 0x1d372 <__epilogue_restores__+0x1c>

0000fc76 <fileno_to_fatfs>:
    fc76:	83 30       	cpi	r24, 0x03	; 3
    fc78:	91 05       	cpc	r25, r1
    fc7a:	48 f4       	brcc	.+18     	; 0xfc8e <fileno_to_fatfs+0x18>
    fc7c:	89 e0       	ldi	r24, 0x09	; 9
    fc7e:	90 e0       	ldi	r25, 0x00	; 0
    fc80:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
    fc84:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
    fc88:	80 e0       	ldi	r24, 0x00	; 0
    fc8a:	90 e0       	ldi	r25, 0x00	; 0
    fc8c:	08 95       	ret
    fc8e:	57 db       	rcall	.-2386   	; 0xf33e <fileno_to_stream>
    fc90:	00 97       	sbiw	r24, 0x00	; 0
    fc92:	d1 f3       	breq	.-12     	; 0xfc88 <fileno_to_fatfs+0x12>
    fc94:	fc 01       	movw	r30, r24
    fc96:	84 85       	ldd	r24, Z+12	; 0x0c
    fc98:	95 85       	ldd	r25, Z+13	; 0x0d
    fc9a:	00 97       	sbiw	r24, 0x00	; 0
    fc9c:	79 f3       	breq	.-34     	; 0xfc7c <fileno_to_fatfs+0x6>
    fc9e:	08 95       	ret

0000fca0 <ftell>:
    fca0:	10 92 09 1d 	sts	0x1D09, r1	; 0x801d09 <errno+0x1>
    fca4:	10 92 08 1d 	sts	0x1D08, r1	; 0x801d08 <errno>
    fca8:	2e db       	rcall	.-2468   	; 0xf306 <fileno>
    fcaa:	83 30       	cpi	r24, 0x03	; 3
    fcac:	91 05       	cpc	r25, r1
    fcae:	48 f0       	brcs	.+18     	; 0xfcc2 <ftell+0x22>
    fcb0:	e2 df       	rcall	.-60     	; 0xfc76 <fileno_to_fatfs>
    fcb2:	00 97       	sbiw	r24, 0x00	; 0
    fcb4:	51 f4       	brne	.+20     	; 0xfcca <ftell+0x2a>
    fcb6:	89 e0       	ldi	r24, 0x09	; 9
    fcb8:	90 e0       	ldi	r25, 0x00	; 0
    fcba:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
    fcbe:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
    fcc2:	6f ef       	ldi	r22, 0xFF	; 255
    fcc4:	7f ef       	ldi	r23, 0xFF	; 255
    fcc6:	cb 01       	movw	r24, r22
    fcc8:	08 95       	ret
    fcca:	fc 01       	movw	r30, r24
    fccc:	60 89       	ldd	r22, Z+16	; 0x10
    fcce:	71 89       	ldd	r23, Z+17	; 0x11
    fcd0:	82 89       	ldd	r24, Z+18	; 0x12
    fcd2:	93 89       	ldd	r25, Z+19	; 0x13
    fcd4:	08 95       	ret

0000fcd6 <lseek>:
    fcd6:	a0 e0       	ldi	r26, 0x00	; 0
    fcd8:	b0 e0       	ldi	r27, 0x00	; 0
    fcda:	e1 e7       	ldi	r30, 0x71	; 113
    fcdc:	fe e7       	ldi	r31, 0x7E	; 126
    fcde:	0c 94 97 e9 	jmp	0x1d32e	; 0x1d32e <__prologue_saves__+0x10>
    fce2:	5c 01       	movw	r10, r24
    fce4:	6a 01       	movw	r12, r20
    fce6:	7b 01       	movw	r14, r22
    fce8:	89 01       	movw	r16, r18
    fcea:	10 92 09 1d 	sts	0x1D09, r1	; 0x801d09 <errno+0x1>
    fcee:	10 92 08 1d 	sts	0x1D08, r1	; 0x801d08 <errno>
    fcf2:	c1 df       	rcall	.-126    	; 0xfc76 <fileno_to_fatfs>
    fcf4:	ec 01       	movw	r28, r24
    fcf6:	89 2b       	or	r24, r25
    fcf8:	19 f4       	brne	.+6      	; 0xfd00 <lseek+0x2a>
    fcfa:	88 e1       	ldi	r24, 0x18	; 24
    fcfc:	90 e0       	ldi	r25, 0x00	; 0
    fcfe:	26 c0       	rjmp	.+76     	; 0xfd4c <lseek+0x76>
    fd00:	83 e0       	ldi	r24, 0x03	; 3
    fd02:	a8 16       	cp	r10, r24
    fd04:	b1 04       	cpc	r11, r1
    fd06:	d0 f1       	brcs	.+116    	; 0xfd7c <lseek+0xa6>
    fd08:	c5 01       	movw	r24, r10
    fd0a:	19 db       	rcall	.-2510   	; 0xf33e <fileno_to_stream>
    fd0c:	fc 01       	movw	r30, r24
    fd0e:	93 81       	ldd	r25, Z+3	; 0x03
    fd10:	90 64       	ori	r25, 0x40	; 64
    fd12:	93 83       	std	Z+3, r25	; 0x03
    fd14:	02 30       	cpi	r16, 0x02	; 2
    fd16:	11 05       	cpc	r17, r1
    fd18:	a9 f5       	brne	.+106    	; 0xfd84 <lseek+0xae>
    fd1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    fd1c:	9b 85       	ldd	r25, Y+11	; 0x0b
    fd1e:	ac 85       	ldd	r26, Y+12	; 0x0c
    fd20:	bd 85       	ldd	r27, Y+13	; 0x0d
    fd22:	c8 0e       	add	r12, r24
    fd24:	d9 1e       	adc	r13, r25
    fd26:	ea 1e       	adc	r14, r26
    fd28:	fb 1e       	adc	r15, r27
    fd2a:	b7 01       	movw	r22, r14
    fd2c:	a6 01       	movw	r20, r12
    fd2e:	ce 01       	movw	r24, r28
    fd30:	0e 94 fc 5d 	call	0xbbf8	; 0xbbf8 <f_lseek>
    fd34:	00 97       	sbiw	r24, 0x00	; 0
    fd36:	79 f0       	breq	.+30     	; 0xfd56 <lseek+0x80>
    fd38:	84 31       	cpi	r24, 0x14	; 20
    fd3a:	91 05       	cpc	r25, r1
    fd3c:	58 f5       	brcc	.+86     	; 0xfd94 <lseek+0xbe>
    fd3e:	fc 01       	movw	r30, r24
    fd40:	e7 57       	subi	r30, 0x77	; 119
    fd42:	f8 4f       	sbci	r31, 0xF8	; 248
    fd44:	80 81       	ld	r24, Z
    fd46:	08 2e       	mov	r0, r24
    fd48:	00 0c       	add	r0, r0
    fd4a:	99 0b       	sbc	r25, r25
    fd4c:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
    fd50:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
    fd54:	13 c0       	rjmp	.+38     	; 0xfd7c <lseek+0xa6>
    fd56:	68 89       	ldd	r22, Y+16	; 0x10
    fd58:	79 89       	ldd	r23, Y+17	; 0x11
    fd5a:	8a 89       	ldd	r24, Y+18	; 0x12
    fd5c:	9b 89       	ldd	r25, Y+19	; 0x13
    fd5e:	c6 16       	cp	r12, r22
    fd60:	d7 06       	cpc	r13, r23
    fd62:	e8 06       	cpc	r14, r24
    fd64:	f9 06       	cpc	r15, r25
    fd66:	c9 f0       	breq	.+50     	; 0xfd9a <lseek+0xc4>
    fd68:	84 e5       	ldi	r24, 0x54	; 84
    fd6a:	9c e0       	ldi	r25, 0x0C	; 12
    fd6c:	1f 92       	push	r1
    fd6e:	9f 93       	push	r25
    fd70:	8f 93       	push	r24
    fd72:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    fd76:	0f 90       	pop	r0
    fd78:	0f 90       	pop	r0
    fd7a:	0f 90       	pop	r0
    fd7c:	6f ef       	ldi	r22, 0xFF	; 255
    fd7e:	7f ef       	ldi	r23, 0xFF	; 255
    fd80:	cb 01       	movw	r24, r22
    fd82:	0b c0       	rjmp	.+22     	; 0xfd9a <lseek+0xc4>
    fd84:	01 30       	cpi	r16, 0x01	; 1
    fd86:	11 05       	cpc	r17, r1
    fd88:	81 f6       	brne	.-96     	; 0xfd2a <lseek+0x54>
    fd8a:	88 89       	ldd	r24, Y+16	; 0x10
    fd8c:	99 89       	ldd	r25, Y+17	; 0x11
    fd8e:	aa 89       	ldd	r26, Y+18	; 0x12
    fd90:	bb 89       	ldd	r27, Y+19	; 0x13
    fd92:	c7 cf       	rjmp	.-114    	; 0xfd22 <lseek+0x4c>
    fd94:	83 e2       	ldi	r24, 0x23	; 35
    fd96:	90 e0       	ldi	r25, 0x00	; 0
    fd98:	d9 cf       	rjmp	.-78     	; 0xfd4c <lseek+0x76>
    fd9a:	cd b7       	in	r28, 0x3d	; 61
    fd9c:	de b7       	in	r29, 0x3e	; 62
    fd9e:	ea e0       	ldi	r30, 0x0A	; 10
    fda0:	0c 94 b3 e9 	jmp	0x1d366	; 0x1d366 <__epilogue_restores__+0x10>

0000fda4 <fseek>:
    fda4:	cf 92       	push	r12
    fda6:	df 92       	push	r13
    fda8:	ef 92       	push	r14
    fdaa:	ff 92       	push	r15
    fdac:	cf 93       	push	r28
    fdae:	df 93       	push	r29
    fdb0:	6a 01       	movw	r12, r20
    fdb2:	7b 01       	movw	r14, r22
    fdb4:	e9 01       	movw	r28, r18
    fdb6:	a7 da       	rcall	.-2738   	; 0xf306 <fileno>
    fdb8:	97 fd       	sbrc	r25, 7
    fdba:	12 c0       	rjmp	.+36     	; 0xfde0 <fseek+0x3c>
    fdbc:	9e 01       	movw	r18, r28
    fdbe:	b7 01       	movw	r22, r14
    fdc0:	a6 01       	movw	r20, r12
    fdc2:	89 df       	rcall	.-238    	; 0xfcd6 <lseek>
    fdc4:	21 e0       	ldi	r18, 0x01	; 1
    fdc6:	30 e0       	ldi	r19, 0x00	; 0
    fdc8:	6f 3f       	cpi	r22, 0xFF	; 255
    fdca:	7f 4f       	sbci	r23, 0xFF	; 255
    fdcc:	8f 4f       	sbci	r24, 0xFF	; 255
    fdce:	9f 4f       	sbci	r25, 0xFF	; 255
    fdd0:	11 f0       	breq	.+4      	; 0xfdd6 <fseek+0x32>
    fdd2:	20 e0       	ldi	r18, 0x00	; 0
    fdd4:	30 e0       	ldi	r19, 0x00	; 0
    fdd6:	88 27       	eor	r24, r24
    fdd8:	99 27       	eor	r25, r25
    fdda:	82 1b       	sub	r24, r18
    fddc:	93 0b       	sbc	r25, r19
    fdde:	02 c0       	rjmp	.+4      	; 0xfde4 <fseek+0x40>
    fde0:	8f ef       	ldi	r24, 0xFF	; 255
    fde2:	9f ef       	ldi	r25, 0xFF	; 255
    fde4:	df 91       	pop	r29
    fde6:	cf 91       	pop	r28
    fde8:	ff 90       	pop	r15
    fdea:	ef 90       	pop	r14
    fdec:	df 90       	pop	r13
    fdee:	cf 90       	pop	r12
    fdf0:	08 95       	ret

0000fdf2 <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    fdf2:	a2 e0       	ldi	r26, 0x02	; 2
    fdf4:	b0 e0       	ldi	r27, 0x00	; 0
    fdf6:	ef ef       	ldi	r30, 0xFF	; 255
    fdf8:	fe e7       	ldi	r31, 0x7E	; 126
    fdfa:	0c 94 97 e9 	jmp	0x1d32e	; 0x1d32e <__prologue_saves__+0x10>
    fdfe:	5c 01       	movw	r10, r24
    fe00:	8b 01       	movw	r16, r22
    fe02:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

    //FIXME
    *(char *) buf = 0;
    fe04:	fb 01       	movw	r30, r22
    fe06:	10 82       	st	Z, r1

    errno = 0;
    fe08:	10 92 09 1d 	sts	0x1D09, r1	; 0x801d09 <errno+0x1>
    fe0c:	10 92 08 1d 	sts	0x1D08, r1	; 0x801d08 <errno>

    // TTY read function
    // FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    fe10:	96 da       	rcall	.-2772   	; 0xf33e <fileno_to_stream>
    if(stream == stdin)
    fe12:	7c 01       	movw	r14, r24
    fe14:	80 91 0a 1d 	lds	r24, 0x1D0A	; 0x801d0a <__iob>
    fe18:	90 91 0b 1d 	lds	r25, 0x1D0B	; 0x801d0b <__iob+0x1>
    fe1c:	e8 16       	cp	r14, r24
    fe1e:	f9 06       	cpc	r15, r25
    {
        char *ptr = (char *) buf;
        // ungetc is undefined for read
        stream->flags |= __SUNGET;
    fe20:	c9 f4       	brne	.+50     	; 0xfe54 <read+0x62>
    fe22:	f7 01       	movw	r30, r14
    fe24:	83 81       	ldd	r24, Z+3	; 0x03
    fe26:	80 64       	ori	r24, 0x40	; 64
        size = 0;
    fe28:	83 83       	std	Z+3, r24	; 0x03
    fe2a:	1a 82       	std	Y+2, r1	; 0x02
    fe2c:	19 82       	std	Y+1, r1	; 0x01
    fe2e:	c0 0e       	add	r12, r16
        while(count--)
    fe30:	d1 1e       	adc	r13, r17
    fe32:	0c 15       	cp	r16, r12
    fe34:	1d 05       	cpc	r17, r13
        {
            ret = fgetc(stream);
    fe36:	09 f4       	brne	.+2      	; 0xfe3a <read+0x48>
    fe38:	3d c0       	rjmp	.+122    	; 0xfeb4 <read+0xc2>
            if(ret < 0)
    fe3a:	c7 01       	movw	r24, r14
    fe3c:	4a d9       	rcall	.-3436   	; 0xf0d2 <fgetc>
                break;
            
            *ptr++ = ret;
    fe3e:	97 fd       	sbrc	r25, 7
    fe40:	39 c0       	rjmp	.+114    	; 0xfeb4 <read+0xc2>
    fe42:	f8 01       	movw	r30, r16
            ++size;
    fe44:	81 93       	st	Z+, r24
    fe46:	8f 01       	movw	r16, r30
    fe48:	89 81       	ldd	r24, Y+1	; 0x01
    fe4a:	9a 81       	ldd	r25, Y+2	; 0x02
    fe4c:	01 96       	adiw	r24, 0x01	; 1
    fe4e:	9a 83       	std	Y+2, r25	; 0x02
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    fe50:	89 83       	std	Y+1, r24	; 0x01
    fe52:	ef cf       	rjmp	.-34     	; 0xfe32 <read+0x40>
    fe54:	80 91 0c 1d 	lds	r24, 0x1D0C	; 0x801d0c <__iob+0x2>
    fe58:	90 91 0d 1d 	lds	r25, 0x1D0D	; 0x801d0d <__iob+0x3>
    fe5c:	e8 16       	cp	r14, r24
    fe5e:	f9 06       	cpc	r15, r25
    fe60:	71 f1       	breq	.+92     	; 0xfebe <read+0xcc>
    fe62:	80 91 0e 1d 	lds	r24, 0x1D0E	; 0x801d0e <__iob+0x4>
    fe66:	90 91 0f 1d 	lds	r25, 0x1D0F	; 0x801d0f <__iob+0x5>
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    fe6a:	e8 16       	cp	r14, r24
    fe6c:	f9 06       	cpc	r15, r25
    if ( fh == NULL )
    fe6e:	39 f1       	breq	.+78     	; 0xfebe <read+0xcc>
    fe70:	c5 01       	movw	r24, r10
    {
        errno = EBADF;
    fe72:	01 df       	rcall	.-510    	; 0xfc76 <fileno_to_fatfs>
    fe74:	00 97       	sbiw	r24, 0x00	; 0
    fe76:	19 f4       	brne	.+6      	; 0xfe7e <read+0x8c>
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    fe78:	89 e0       	ldi	r24, 0x09	; 9
    fe7a:	90 e0       	ldi	r25, 0x00	; 0
    fe7c:	16 c0       	rjmp	.+44     	; 0xfeaa <read+0xb8>
    fe7e:	9e 01       	movw	r18, r28
    fe80:	2f 5f       	subi	r18, 0xFF	; 255
    fe82:	3f 4f       	sbci	r19, 0xFF	; 255
    fe84:	a6 01       	movw	r20, r12
    if(res != FR_OK)
    fe86:	b8 01       	movw	r22, r16
    fe88:	0e 94 f2 58 	call	0xb1e4	; 0xb1e4 <f_read>
    fe8c:	00 97       	sbiw	r24, 0x00	; 0
    fe8e:	91 f0       	breq	.+36     	; 0xfeb4 <read+0xc2>
    fe90:	84 31       	cpi	r24, 0x14	; 20
    fe92:	91 05       	cpc	r25, r1
    fe94:	40 f4       	brcc	.+16     	; 0xfea6 <read+0xb4>
    fe96:	fc 01       	movw	r30, r24
    fe98:	e7 57       	subi	r30, 0x77	; 119
    fe9a:	f8 4f       	sbci	r31, 0xF8	; 248
    fe9c:	80 81       	ld	r24, Z
    fe9e:	08 2e       	mov	r0, r24
    fea0:	00 0c       	add	r0, r0
    fea2:	99 0b       	sbc	r25, r25
    {
        errno = fatfs_to_errno(res);
    fea4:	02 c0       	rjmp	.+4      	; 0xfeaa <read+0xb8>
    fea6:	83 e2       	ldi	r24, 0x23	; 35
    fea8:	90 e0       	ldi	r25, 0x00	; 0
    feaa:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
        return(-1);
    }
    return ((ssize_t) size);
    feae:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
    feb2:	05 c0       	rjmp	.+10     	; 0xfebe <read+0xcc>
    feb4:	69 81       	ldd	r22, Y+1	; 0x01
    feb6:	7a 81       	ldd	r23, Y+2	; 0x02
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    feb8:	80 e0       	ldi	r24, 0x00	; 0
    feba:	90 e0       	ldi	r25, 0x00	; 0
    febc:	03 c0       	rjmp	.+6      	; 0xfec4 <read+0xd2>
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    febe:	6f ef       	ldi	r22, 0xFF	; 255
    fec0:	7f ef       	ldi	r23, 0xFF	; 255
    fec2:	cb 01       	movw	r24, r22
    fec4:	22 96       	adiw	r28, 0x02	; 2
    fec6:	ea e0       	ldi	r30, 0x0A	; 10
    fec8:	0c 94 b3 e9 	jmp	0x1d366	; 0x1d366 <__epilogue_restores__+0x10>

0000fecc <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    fecc:	0f 93       	push	r16
    fece:	1f 93       	push	r17
    fed0:	cf 93       	push	r28
    fed2:	df 93       	push	r29
    fed4:	ec 01       	movw	r28, r24
    fed6:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    fed8:	64 9f       	mul	r22, r20
    feda:	80 01       	movw	r16, r0
    fedc:	65 9f       	mul	r22, r21
    fede:	10 0d       	add	r17, r0
    fee0:	74 9f       	mul	r23, r20
    fee2:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    fee4:	11 24       	eor	r1, r1
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    fee6:	0f da       	rcall	.-3042   	; 0xf306 <fileno>
    fee8:	a8 01       	movw	r20, r16
    feea:	be 01       	movw	r22, r28
    if(ret < 0)
    feec:	82 df       	rcall	.-252    	; 0xfdf2 <read>
    feee:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    fef0:	02 c0       	rjmp	.+4      	; 0xfef6 <fread+0x2a>
    fef2:	cb 01       	movw	r24, r22
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    fef4:	02 c0       	rjmp	.+4      	; 0xfefa <fread+0x2e>
    fef6:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    fef8:	90 e0       	ldi	r25, 0x00	; 0
    fefa:	df 91       	pop	r29
    fefc:	cf 91       	pop	r28
    fefe:	1f 91       	pop	r17
    ff00:	0f 91       	pop	r16
    ff02:	08 95       	ret

0000ff04 <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    ff04:	cf 93       	push	r28
    ff06:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    ff08:	10 92 09 1d 	sts	0x1D09, r1	; 0x801d09 <errno+0x1>
    ff0c:	10 92 08 1d 	sts	0x1D08, r1	; 0x801d08 <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    ff10:	83 30       	cpi	r24, 0x03	; 3
    ff12:	91 05       	cpc	r25, r1
    ff14:	18 f4       	brcc	.+6      	; 0xff1c <syncfs+0x18>

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    ff16:	89 e0       	ldi	r24, 0x09	; 9
    ff18:	90 e0       	ldi	r25, 0x00	; 0
    ff1a:	18 c0       	rjmp	.+48     	; 0xff4c <syncfs+0x48>
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    ff1c:	ec 01       	movw	r28, r24
    ff1e:	0f da       	rcall	.-3042   	; 0xf33e <fileno_to_stream>
    // reset unget on sync
    stream->flags |= __SUNGET;
    ff20:	fc 01       	movw	r30, r24
    ff22:	93 81       	ldd	r25, Z+3	; 0x03

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    ff24:	90 64       	ori	r25, 0x40	; 64
    ff26:	93 83       	std	Z+3, r25	; 0x03
    if(fh == NULL)
    ff28:	ce 01       	movw	r24, r28
    ff2a:	a5 de       	rcall	.-694    	; 0xfc76 <fileno_to_fatfs>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    ff2c:	00 97       	sbiw	r24, 0x00	; 0
    ff2e:	99 f3       	breq	.-26     	; 0xff16 <syncfs+0x12>
    if (res != FR_OK)
    ff30:	0e 94 d4 5b 	call	0xb7a8	; 0xb7a8 <f_sync>
    ff34:	00 97       	sbiw	r24, 0x00	; 0
    ff36:	a1 f0       	breq	.+40     	; 0xff60 <syncfs+0x5c>
    ff38:	84 31       	cpi	r24, 0x14	; 20
    ff3a:	91 05       	cpc	r25, r1
    ff3c:	70 f4       	brcc	.+28     	; 0xff5a <syncfs+0x56>
    ff3e:	fc 01       	movw	r30, r24
    ff40:	e7 57       	subi	r30, 0x77	; 119
    ff42:	f8 4f       	sbci	r31, 0xF8	; 248
    ff44:	80 81       	ld	r24, Z
    ff46:	08 2e       	mov	r0, r24
    {
        errno = fatfs_to_errno(res);
    ff48:	00 0c       	add	r0, r0
    ff4a:	99 0b       	sbc	r25, r25
    ff4c:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
        return(-1);
    ff50:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
    ff54:	8f ef       	ldi	r24, 0xFF	; 255
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    ff56:	9f ef       	ldi	r25, 0xFF	; 255
    ff58:	05 c0       	rjmp	.+10     	; 0xff64 <syncfs+0x60>
    ff5a:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    ff5c:	90 e0       	ldi	r25, 0x00	; 0
    ff5e:	f6 cf       	rjmp	.-20     	; 0xff4c <syncfs+0x48>
}
    ff60:	80 e0       	ldi	r24, 0x00	; 0
    ff62:	90 e0       	ldi	r25, 0x00	; 0
    ff64:	df 91       	pop	r29
    ff66:	cf 91       	pop	r28
    ff68:	08 95       	ret

0000ff6a <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    ff6a:	cf 93       	push	r28
    ff6c:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    ff6e:	c0 e0       	ldi	r28, 0x00	; 0
    ff70:	d0 e0       	ldi	r29, 0x00	; 0
    ff72:	21 96       	adiw	r28, 0x01	; 1
    ff74:	c0 31       	cpi	r28, 0x10	; 16
    ff76:	d1 05       	cpc	r29, r1
    ff78:	51 f0       	breq	.+20     	; 0xff8e <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    ff7a:	c3 30       	cpi	r28, 0x03	; 3
    ff7c:	d1 05       	cpc	r29, r1
    ff7e:	cc f3       	brlt	.-14     	; 0xff72 <sync+0x8>
    {
        if(isatty(i))
            continue;

        // fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    ff80:	ce 01       	movw	r24, r28
    ff82:	79 de       	rcall	.-782    	; 0xfc76 <fileno_to_fatfs>
        if(fh == NULL)
    ff84:	89 2b       	or	r24, r25
            continue;

        (void ) syncfs(i);
    ff86:	a9 f3       	breq	.-22     	; 0xff72 <sync+0x8>
    ff88:	ce 01       	movw	r24, r28
    ff8a:	bc df       	rcall	.-136    	; 0xff04 <syncfs>
    }
}
    ff8c:	f2 cf       	rjmp	.-28     	; 0xff72 <sync+0x8>
    ff8e:	df 91       	pop	r29
    ff90:	cf 91       	pop	r28
    ff92:	08 95       	ret

0000ff94 <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    ff94:	a2 e0       	ldi	r26, 0x02	; 2
    ff96:	b0 e0       	ldi	r27, 0x00	; 0
    ff98:	e0 ed       	ldi	r30, 0xD0	; 208
    ff9a:	ff e7       	ldi	r31, 0x7F	; 127
    ff9c:	0c 94 95 e9 	jmp	0x1d32a	; 0x1d32a <__prologue_saves__+0xc>
    ffa0:	8c 01       	movw	r16, r24
    ffa2:	b6 2e       	mov	r11, r22
    ffa4:	f7 2e       	mov	r15, r23
    ffa6:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    ffa8:	10 92 09 1d 	sts	0x1D09, r1	; 0x801d09 <errno+0x1>
    ffac:	10 92 08 1d 	sts	0x1D08, r1	; 0x801d08 <errno>

    // TTY read function
    stream = fileno_to_stream(fd);
    ffb0:	c6 d9       	rcall	.-3188   	; 0xf33e <fileno_to_stream>
    if(stream == stdout || stream == stderr)
    ffb2:	6c 01       	movw	r12, r24
    ffb4:	80 91 0c 1d 	lds	r24, 0x1D0C	; 0x801d0c <__iob+0x2>
    ffb8:	90 91 0d 1d 	lds	r25, 0x1D0D	; 0x801d0d <__iob+0x3>
    ffbc:	c8 16       	cp	r12, r24
    ffbe:	d9 06       	cpc	r13, r25
    ffc0:	39 f0       	breq	.+14     	; 0xffd0 <write+0x3c>
    ffc2:	80 91 0e 1d 	lds	r24, 0x1D0E	; 0x801d0e <__iob+0x4>
    ffc6:	90 91 0f 1d 	lds	r25, 0x1D0F	; 0x801d0f <__iob+0x5>
    ffca:	c8 16       	cp	r12, r24
    ffcc:	d9 06       	cpc	r13, r25
    {
        char *ptr = (char *) buf;   
        size = 0;
    ffce:	d1 f4       	brne	.+52     	; 0x10004 <__EEPROM_REGION_LENGTH__+0x4>
    ffd0:	1a 82       	std	Y+2, r1	; 0x02
    ffd2:	19 82       	std	Y+1, r1	; 0x01
    ffd4:	0b 2d       	mov	r16, r11
    ffd6:	1f 2d       	mov	r17, r15
    ffd8:	78 01       	movw	r14, r16
    ffda:	e8 0c       	add	r14, r8
        while(count--)
    ffdc:	f9 1c       	adc	r15, r9
    ffde:	0e 15       	cp	r16, r14
    ffe0:	1f 05       	cpc	r17, r15
        {
            int c,ret;
            c = *ptr++;
    ffe2:	d1 f1       	breq	.+116    	; 0x10058 <__EEPROM_REGION_LENGTH__+0x58>
    ffe4:	f8 01       	movw	r30, r16
    ffe6:	a1 90       	ld	r10, Z+
    ffe8:	8f 01       	movw	r16, r30
            ret = fputc(c, stream);
    ffea:	b1 2c       	mov	r11, r1
    ffec:	b6 01       	movw	r22, r12
    ffee:	c5 01       	movw	r24, r10
            if(c != ret)
    fff0:	c1 d8       	rcall	.-3710   	; 0xf174 <fputc>
    fff2:	a8 16       	cp	r10, r24
    fff4:	b9 06       	cpc	r11, r25
                break;

            ++size;
    fff6:	81 f5       	brne	.+96     	; 0x10058 <__EEPROM_REGION_LENGTH__+0x58>
    fff8:	89 81       	ldd	r24, Y+1	; 0x01
    fffa:	9a 81       	ldd	r25, Y+2	; 0x02
    fffc:	01 96       	adiw	r24, 0x01	; 1
    fffe:	9a 83       	std	Y+2, r25	; 0x02
   10000:	89 83       	std	Y+1, r24	; 0x01
        }
        return(size);
    }
    if(stream == stdin)
   10002:	ed cf       	rjmp	.-38     	; 0xffde <write+0x4a>
   10004:	80 91 0a 1d 	lds	r24, 0x1D0A	; 0x801d0a <__iob>
   10008:	90 91 0b 1d 	lds	r25, 0x1D0B	; 0x801d0b <__iob+0x1>
   1000c:	c8 16       	cp	r12, r24
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
   1000e:	d9 06       	cpc	r13, r25
   10010:	41 f1       	breq	.+80     	; 0x10062 <__EEPROM_REGION_LENGTH__+0x62>
    if ( fh == NULL )
   10012:	c8 01       	movw	r24, r16
   10014:	30 de       	rcall	.-928    	; 0xfc76 <fileno_to_fatfs>
    {
        errno = EBADF;
   10016:	00 97       	sbiw	r24, 0x00	; 0
   10018:	19 f4       	brne	.+6      	; 0x10020 <__EEPROM_REGION_LENGTH__+0x20>
   1001a:	89 e0       	ldi	r24, 0x09	; 9
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
   1001c:	90 e0       	ldi	r25, 0x00	; 0
   1001e:	17 c0       	rjmp	.+46     	; 0x1004e <__EEPROM_REGION_LENGTH__+0x4e>
   10020:	9e 01       	movw	r18, r28
   10022:	2f 5f       	subi	r18, 0xFF	; 255
   10024:	3f 4f       	sbci	r19, 0xFF	; 255
   10026:	a4 01       	movw	r20, r8
   10028:	6b 2d       	mov	r22, r11
   1002a:	7f 2d       	mov	r23, r15
    if(res != FR_OK)
   1002c:	0e 94 3d 5a 	call	0xb47a	; 0xb47a <f_write>
   10030:	00 97       	sbiw	r24, 0x00	; 0
   10032:	91 f0       	breq	.+36     	; 0x10058 <__EEPROM_REGION_LENGTH__+0x58>
   10034:	84 31       	cpi	r24, 0x14	; 20
   10036:	91 05       	cpc	r25, r1
   10038:	40 f4       	brcc	.+16     	; 0x1004a <__EEPROM_REGION_LENGTH__+0x4a>
   1003a:	fc 01       	movw	r30, r24
   1003c:	e7 57       	subi	r30, 0x77	; 119
   1003e:	f8 4f       	sbci	r31, 0xF8	; 248
   10040:	80 81       	ld	r24, Z
   10042:	08 2e       	mov	r0, r24
   10044:	00 0c       	add	r0, r0
   10046:	99 0b       	sbc	r25, r25
   10048:	02 c0       	rjmp	.+4      	; 0x1004e <__EEPROM_REGION_LENGTH__+0x4e>
    {
        errno = fatfs_to_errno(res);
   1004a:	83 e2       	ldi	r24, 0x23	; 35
   1004c:	90 e0       	ldi	r25, 0x00	; 0
   1004e:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
   10052:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
        return(-1);
    }
    return ((ssize_t) size);
   10056:	05 c0       	rjmp	.+10     	; 0x10062 <__EEPROM_REGION_LENGTH__+0x62>
   10058:	69 81       	ldd	r22, Y+1	; 0x01
   1005a:	7a 81       	ldd	r23, Y+2	; 0x02
   1005c:	80 e0       	ldi	r24, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
   1005e:	90 e0       	ldi	r25, 0x00	; 0
   10060:	03 c0       	rjmp	.+6      	; 0x10068 <__EEPROM_REGION_LENGTH__+0x68>
   10062:	6f ef       	ldi	r22, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
   10064:	7f ef       	ldi	r23, 0xFF	; 255
   10066:	cb 01       	movw	r24, r22
   10068:	22 96       	adiw	r28, 0x02	; 2
   1006a:	ec e0       	ldi	r30, 0x0C	; 12
   1006c:	0c 94 b1 e9 	jmp	0x1d362	; 0x1d362 <__epilogue_restores__+0xc>

00010070 <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
   10070:	0f 93       	push	r16
   10072:	1f 93       	push	r17
   10074:	cf 93       	push	r28
   10076:	df 93       	push	r29
   10078:	ec 01       	movw	r28, r24
   1007a:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
   1007c:	64 9f       	mul	r22, r20
   1007e:	80 01       	movw	r16, r0
   10080:	65 9f       	mul	r22, r21
   10082:	10 0d       	add	r17, r0
   10084:	74 9f       	mul	r23, r20
   10086:	10 0d       	add	r17, r0
    int fn = fileno(stream);
   10088:	11 24       	eor	r1, r1
    ssize_t ret;
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
   1008a:	3d d9       	rcall	.-3462   	; 0xf306 <fileno>
   1008c:	a8 01       	movw	r20, r16
   1008e:	be 01       	movw	r22, r28

    if(ret < 0)
   10090:	81 df       	rcall	.-254    	; 0xff94 <write>
   10092:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
   10094:	02 c0       	rjmp	.+4      	; 0x1009a <fwrite+0x2a>
   10096:	cb 01       	movw	r24, r22
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
   10098:	02 c0       	rjmp	.+4      	; 0x1009e <fwrite+0x2e>
   1009a:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
   1009c:	90 e0       	ldi	r25, 0x00	; 0
   1009e:	df 91       	pop	r29
   100a0:	cf 91       	pop	r28
   100a2:	1f 91       	pop	r17
   100a4:	0f 91       	pop	r16
   100a6:	08 95       	ret

000100a8 <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
   100a8:	0f 93       	push	r16
   100aa:	1f 93       	push	r17
   100ac:	cf 93       	push	r28
   100ae:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
   100b0:	83 30       	cpi	r24, 0x03	; 3
   100b2:	91 05       	cpc	r25, r1
   100b4:	48 f4       	brcc	.+18     	; 0x100c8 <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
   100b6:	89 e0       	ldi	r24, 0x09	; 9
   100b8:	90 e0       	ldi	r25, 0x00	; 0
   100ba:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
   100be:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
        return(-1);
   100c2:	8f ef       	ldi	r24, 0xFF	; 255
   100c4:	9f ef       	ldi	r25, 0xFF	; 255
   100c6:	20 c0       	rjmp	.+64     	; 0x10108 <free_file_descriptor+0x60>
    }

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
   100c8:	ec 01       	movw	r28, r24
   100ca:	39 d9       	rcall	.-3470   	; 0xf33e <fileno_to_stream>
    if(stream == NULL)
   100cc:	8c 01       	movw	r16, r24
   100ce:	89 2b       	or	r24, r25
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
   100d0:	c1 f3       	breq	.-16     	; 0x100c2 <free_file_descriptor+0x1a>
   100d2:	f8 01       	movw	r30, r16
   100d4:	84 85       	ldd	r24, Z+12	; 0x0c

    if(fh != NULL)
   100d6:	95 85       	ldd	r25, Z+13	; 0x0d
   100d8:	00 97       	sbiw	r24, 0x00	; 0
    {
        safefree(fh);
   100da:	11 f0       	breq	.+4      	; 0x100e0 <free_file_descriptor+0x38>
   100dc:	0e 94 13 2a 	call	0x5426	; 0x5426 <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
   100e0:	f8 01       	movw	r30, r16
   100e2:	80 81       	ld	r24, Z
   100e4:	91 81       	ldd	r25, Z+1	; 0x01
   100e6:	00 97       	sbiw	r24, 0x00	; 0
   100e8:	21 f0       	breq	.+8      	; 0x100f2 <free_file_descriptor+0x4a>
   100ea:	23 81       	ldd	r18, Z+3	; 0x03
    {
        safefree(stream->buf);
   100ec:	27 fd       	sbrc	r18, 7
   100ee:	0e 94 13 2a 	call	0x5426	; 0x5426 <safefree>
    }

    __iob[fileno]  = NULL;
   100f2:	fe 01       	movw	r30, r28
   100f4:	ee 0f       	add	r30, r30
   100f6:	ff 1f       	adc	r31, r31
   100f8:	e6 5f       	subi	r30, 0xF6	; 246
   100fa:	f2 4e       	sbci	r31, 0xE2	; 226
   100fc:	11 82       	std	Z+1, r1	; 0x01
    safefree(stream);
   100fe:	10 82       	st	Z, r1
   10100:	c8 01       	movw	r24, r16
   10102:	0e 94 13 2a 	call	0x5426	; 0x5426 <safefree>
    return(fileno);
}
   10106:	ce 01       	movw	r24, r28
   10108:	df 91       	pop	r29
   1010a:	cf 91       	pop	r28
   1010c:	1f 91       	pop	r17
   1010e:	0f 91       	pop	r16
   10110:	08 95       	ret

00010112 <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
   10112:	0f 93       	push	r16
   10114:	1f 93       	push	r17
   10116:	cf 93       	push	r28
   10118:	df 93       	push	r29
   1011a:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
   1011c:	10 92 09 1d 	sts	0x1D09, r1	; 0x801d09 <errno+0x1>
   10120:	10 92 08 1d 	sts	0x1D08, r1	; 0x801d08 <errno>

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
   10124:	0c d9       	rcall	.-3560   	; 0xf33e <fileno_to_stream>
   10126:	89 2b       	or	r24, r25
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
   10128:	d9 f0       	breq	.+54     	; 0x10160 <close+0x4e>
   1012a:	c8 01       	movw	r24, r16
    if(fh == NULL)
   1012c:	a4 dd       	rcall	.-1208   	; 0xfc76 <fileno_to_fatfs>
   1012e:	00 97       	sbiw	r24, 0x00	; 0
    {
        return(-1);
    }
    res = f_close(fh);
   10130:	b9 f0       	breq	.+46     	; 0x10160 <close+0x4e>
   10132:	0e 94 54 5c 	call	0xb8a8	; 0xb8a8 <f_close>
    free_file_descriptor(fileno);
   10136:	ec 01       	movw	r28, r24
    if (res != FR_OK)
   10138:	c8 01       	movw	r24, r16
   1013a:	b6 df       	rcall	.-148    	; 0x100a8 <free_file_descriptor>
   1013c:	20 97       	sbiw	r28, 0x00	; 0
   1013e:	99 f0       	breq	.+38     	; 0x10166 <close+0x54>
   10140:	c4 31       	cpi	r28, 0x14	; 20
   10142:	d1 05       	cpc	r29, r1
   10144:	38 f4       	brcc	.+14     	; 0x10154 <close+0x42>
   10146:	c7 57       	subi	r28, 0x77	; 119
   10148:	d8 4f       	sbci	r29, 0xF8	; 248
   1014a:	88 81       	ld	r24, Y
   1014c:	08 2e       	mov	r0, r24
   1014e:	00 0c       	add	r0, r0
   10150:	99 0b       	sbc	r25, r25
   10152:	02 c0       	rjmp	.+4      	; 0x10158 <close+0x46>
    {
        errno = fatfs_to_errno(res);
   10154:	83 e2       	ldi	r24, 0x23	; 35
   10156:	90 e0       	ldi	r25, 0x00	; 0
   10158:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
        return(-1);
   1015c:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
   10160:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return(0);
   10162:	9f ef       	ldi	r25, 0xFF	; 255
   10164:	02 c0       	rjmp	.+4      	; 0x1016a <close+0x58>
}
   10166:	80 e0       	ldi	r24, 0x00	; 0
   10168:	90 e0       	ldi	r25, 0x00	; 0
   1016a:	df 91       	pop	r29
   1016c:	cf 91       	pop	r28
   1016e:	1f 91       	pop	r17
   10170:	0f 91       	pop	r16
   10172:	08 95       	ret

00010174 <fclose>:
   10174:	c8 d8       	rcall	.-3696   	; 0xf306 <fileno>
   10176:	97 fd       	sbrc	r25, 7
   10178:	02 c0       	rjmp	.+4      	; 0x1017e <fclose+0xa>
   1017a:	cb cf       	rjmp	.-106    	; 0x10112 <close>
   1017c:	08 95       	ret
   1017e:	8f ef       	ldi	r24, 0xFF	; 255
   10180:	9f ef       	ldi	r25, 0xFF	; 255
   10182:	08 95       	ret

00010184 <new_file_descriptor>:
   10184:	0f 93       	push	r16
   10186:	1f 93       	push	r17
   10188:	cf 93       	push	r28
   1018a:	df 93       	push	r29
   1018c:	ea e0       	ldi	r30, 0x0A	; 10
   1018e:	fd e1       	ldi	r31, 0x1D	; 29
   10190:	c0 e0       	ldi	r28, 0x00	; 0
   10192:	d0 e0       	ldi	r29, 0x00	; 0
   10194:	21 96       	adiw	r28, 0x01	; 1
   10196:	c0 31       	cpi	r28, 0x10	; 16
   10198:	d1 05       	cpc	r29, r1
   1019a:	49 f0       	breq	.+18     	; 0x101ae <new_file_descriptor+0x2a>
   1019c:	c3 30       	cpi	r28, 0x03	; 3
   1019e:	d1 05       	cpc	r29, r1
   101a0:	24 f0       	brlt	.+8      	; 0x101aa <new_file_descriptor+0x26>
   101a2:	82 81       	ldd	r24, Z+2	; 0x02
   101a4:	93 81       	ldd	r25, Z+3	; 0x03
   101a6:	89 2b       	or	r24, r25
   101a8:	59 f0       	breq	.+22     	; 0x101c0 <new_file_descriptor+0x3c>
   101aa:	32 96       	adiw	r30, 0x02	; 2
   101ac:	f3 cf       	rjmp	.-26     	; 0x10194 <new_file_descriptor+0x10>
   101ae:	87 e1       	ldi	r24, 0x17	; 23
   101b0:	90 e0       	ldi	r25, 0x00	; 0
   101b2:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
   101b6:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
   101ba:	8f ef       	ldi	r24, 0xFF	; 255
   101bc:	9f ef       	ldi	r25, 0xFF	; 255
   101be:	22 c0       	rjmp	.+68     	; 0x10204 <new_file_descriptor+0x80>
   101c0:	61 e0       	ldi	r22, 0x01	; 1
   101c2:	70 e0       	ldi	r23, 0x00	; 0
   101c4:	8e e0       	ldi	r24, 0x0E	; 14
   101c6:	90 e0       	ldi	r25, 0x00	; 0
   101c8:	0e 94 ca 29 	call	0x5394	; 0x5394 <safecalloc>
   101cc:	8c 01       	movw	r16, r24
   101ce:	89 2b       	or	r24, r25
   101d0:	59 f0       	breq	.+22     	; 0x101e8 <new_file_descriptor+0x64>
   101d2:	61 e0       	ldi	r22, 0x01	; 1
   101d4:	70 e0       	ldi	r23, 0x00	; 0
   101d6:	84 e2       	ldi	r24, 0x24	; 36
   101d8:	92 e0       	ldi	r25, 0x02	; 2
   101da:	0e 94 ca 29 	call	0x5394	; 0x5394 <safecalloc>
   101de:	00 97       	sbiw	r24, 0x00	; 0
   101e0:	31 f4       	brne	.+12     	; 0x101ee <new_file_descriptor+0x6a>
   101e2:	c8 01       	movw	r24, r16
   101e4:	0e 94 13 2a 	call	0x5426	; 0x5426 <safefree>
   101e8:	8c e0       	ldi	r24, 0x0C	; 12
   101ea:	90 e0       	ldi	r25, 0x00	; 0
   101ec:	e2 cf       	rjmp	.-60     	; 0x101b2 <new_file_descriptor+0x2e>
   101ee:	fe 01       	movw	r30, r28
   101f0:	ee 0f       	add	r30, r30
   101f2:	ff 1f       	adc	r31, r31
   101f4:	e6 5f       	subi	r30, 0xF6	; 246
   101f6:	f2 4e       	sbci	r31, 0xE2	; 226
   101f8:	11 83       	std	Z+1, r17	; 0x01
   101fa:	00 83       	st	Z, r16
   101fc:	f8 01       	movw	r30, r16
   101fe:	95 87       	std	Z+13, r25	; 0x0d
   10200:	84 87       	std	Z+12, r24	; 0x0c
   10202:	ce 01       	movw	r24, r28
   10204:	df 91       	pop	r29
   10206:	cf 91       	pop	r28
   10208:	1f 91       	pop	r17
   1020a:	0f 91       	pop	r16
   1020c:	08 95       	ret

0001020e <open>:
   1020e:	a0 e0       	ldi	r26, 0x00	; 0
   10210:	b0 e0       	ldi	r27, 0x00	; 0
   10212:	ed e0       	ldi	r30, 0x0D	; 13
   10214:	f1 e8       	ldi	r31, 0x81	; 129
   10216:	0c 94 93 e9 	jmp	0x1d326	; 0x1d326 <__prologue_saves__+0x8>
   1021a:	5c 01       	movw	r10, r24
   1021c:	6b 01       	movw	r12, r22
   1021e:	10 92 09 1d 	sts	0x1D09, r1	; 0x801d09 <errno+0x1>
   10222:	10 92 08 1d 	sts	0x1D08, r1	; 0x801d08 <errno>
   10226:	7b 01       	movw	r14, r22
   10228:	83 e0       	ldi	r24, 0x03	; 3
   1022a:	e8 22       	and	r14, r24
   1022c:	ff 24       	eor	r15, r15
   1022e:	e2 e0       	ldi	r30, 0x02	; 2
   10230:	ee 16       	cp	r14, r30
   10232:	f1 04       	cpc	r15, r1
   10234:	31 f0       	breq	.+12     	; 0x10242 <open+0x34>
   10236:	e1 14       	cp	r14, r1
   10238:	f1 04       	cpc	r15, r1
   1023a:	31 f0       	breq	.+12     	; 0x10248 <open+0x3a>
   1023c:	02 e0       	ldi	r16, 0x02	; 2
   1023e:	10 e0       	ldi	r17, 0x00	; 0
   10240:	05 c0       	rjmp	.+10     	; 0x1024c <open+0x3e>
   10242:	03 e0       	ldi	r16, 0x03	; 3
   10244:	10 e0       	ldi	r17, 0x00	; 0
   10246:	02 c0       	rjmp	.+4      	; 0x1024c <open+0x3e>
   10248:	01 e0       	ldi	r16, 0x01	; 1
   1024a:	10 e0       	ldi	r17, 0x00	; 0
   1024c:	c6 fe       	sbrs	r12, 6
   1024e:	05 c0       	rjmp	.+10     	; 0x1025a <open+0x4c>
   10250:	d1 fe       	sbrs	r13, 1
   10252:	02 c0       	rjmp	.+4      	; 0x10258 <open+0x4a>
   10254:	08 60       	ori	r16, 0x08	; 8
   10256:	01 c0       	rjmp	.+2      	; 0x1025a <open+0x4c>
   10258:	00 61       	ori	r16, 0x10	; 16
   1025a:	94 df       	rcall	.-216    	; 0x10184 <new_file_descriptor>
   1025c:	3c 01       	movw	r6, r24
   1025e:	6f d8       	rcall	.-3874   	; 0xf33e <fileno_to_stream>
   10260:	ec 01       	movw	r28, r24
   10262:	c3 01       	movw	r24, r6
   10264:	20 97       	sbiw	r28, 0x00	; 0
   10266:	09 f4       	brne	.+2      	; 0x1026a <open+0x5c>
   10268:	48 c0       	rjmp	.+144    	; 0x102fa <open+0xec>
   1026a:	05 dd       	rcall	.-1526   	; 0xfc76 <fileno_to_fatfs>
   1026c:	4c 01       	movw	r8, r24
   1026e:	00 97       	sbiw	r24, 0x00	; 0
   10270:	59 f4       	brne	.+22     	; 0x10288 <open+0x7a>
   10272:	c3 01       	movw	r24, r6
   10274:	19 df       	rcall	.-462    	; 0x100a8 <free_file_descriptor>
   10276:	89 e0       	ldi	r24, 0x09	; 9
   10278:	90 e0       	ldi	r25, 0x00	; 0
   1027a:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
   1027e:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
   10282:	8f ef       	ldi	r24, 0xFF	; 255
   10284:	9f ef       	ldi	r25, 0xFF	; 255
   10286:	5d c0       	rjmp	.+186    	; 0x10342 <open+0x134>
   10288:	40 2f       	mov	r20, r16
   1028a:	b5 01       	movw	r22, r10
   1028c:	0e 94 f6 56 	call	0xadec	; 0xadec <f_open>
   10290:	00 97       	sbiw	r24, 0x00	; 0
   10292:	91 f0       	breq	.+36     	; 0x102b8 <open+0xaa>
   10294:	84 31       	cpi	r24, 0x14	; 20
   10296:	91 05       	cpc	r25, r1
   10298:	40 f4       	brcc	.+16     	; 0x102aa <open+0x9c>
   1029a:	fc 01       	movw	r30, r24
   1029c:	e7 57       	subi	r30, 0x77	; 119
   1029e:	f8 4f       	sbci	r31, 0xF8	; 248
   102a0:	80 81       	ld	r24, Z
   102a2:	08 2e       	mov	r0, r24
   102a4:	00 0c       	add	r0, r0
   102a6:	99 0b       	sbc	r25, r25
   102a8:	02 c0       	rjmp	.+4      	; 0x102ae <open+0xa0>
   102aa:	83 e2       	ldi	r24, 0x23	; 35
   102ac:	90 e0       	ldi	r25, 0x00	; 0
   102ae:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
   102b2:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
   102b6:	20 c0       	rjmp	.+64     	; 0x102f8 <open+0xea>
   102b8:	d2 fe       	sbrs	r13, 2
   102ba:	21 c0       	rjmp	.+66     	; 0x102fe <open+0xf0>
   102bc:	f4 01       	movw	r30, r8
   102be:	42 85       	ldd	r20, Z+10	; 0x0a
   102c0:	53 85       	ldd	r21, Z+11	; 0x0b
   102c2:	64 85       	ldd	r22, Z+12	; 0x0c
   102c4:	75 85       	ldd	r23, Z+13	; 0x0d
   102c6:	c4 01       	movw	r24, r8
   102c8:	0e 94 fc 5d 	call	0xbbf8	; 0xbbf8 <f_lseek>
   102cc:	00 97       	sbiw	r24, 0x00	; 0
   102ce:	b9 f0       	breq	.+46     	; 0x102fe <open+0xf0>
   102d0:	84 31       	cpi	r24, 0x14	; 20
   102d2:	91 05       	cpc	r25, r1
   102d4:	40 f4       	brcc	.+16     	; 0x102e6 <open+0xd8>
   102d6:	fc 01       	movw	r30, r24
   102d8:	e7 57       	subi	r30, 0x77	; 119
   102da:	f8 4f       	sbci	r31, 0xF8	; 248
   102dc:	80 81       	ld	r24, Z
   102de:	08 2e       	mov	r0, r24
   102e0:	00 0c       	add	r0, r0
   102e2:	99 0b       	sbc	r25, r25
   102e4:	02 c0       	rjmp	.+4      	; 0x102ea <open+0xdc>
   102e6:	83 e2       	ldi	r24, 0x23	; 35
   102e8:	90 e0       	ldi	r25, 0x00	; 0
   102ea:	90 93 09 1d 	sts	0x1D09, r25	; 0x801d09 <errno+0x1>
   102ee:	80 93 08 1d 	sts	0x1D08, r24	; 0x801d08 <errno>
   102f2:	c4 01       	movw	r24, r8
   102f4:	0e 94 54 5c 	call	0xb8a8	; 0xb8a8 <f_close>
   102f8:	c3 01       	movw	r24, r6
   102fa:	d6 de       	rcall	.-596    	; 0x100a8 <free_file_descriptor>
   102fc:	c2 cf       	rjmp	.-124    	; 0x10282 <open+0x74>
   102fe:	f2 e0       	ldi	r31, 0x02	; 2
   10300:	ef 16       	cp	r14, r31
   10302:	f1 04       	cpc	r15, r1
   10304:	51 f4       	brne	.+20     	; 0x1031a <open+0x10c>
   10306:	8e e1       	ldi	r24, 0x1E	; 30
   10308:	98 e7       	ldi	r25, 0x78	; 120
   1030a:	99 87       	std	Y+9, r25	; 0x09
   1030c:	88 87       	std	Y+8, r24	; 0x08
   1030e:	8b e9       	ldi	r24, 0x9B	; 155
   10310:	97 e7       	ldi	r25, 0x77	; 119
   10312:	9b 87       	std	Y+11, r25	; 0x0b
   10314:	8a 87       	std	Y+10, r24	; 0x0a
   10316:	83 e0       	ldi	r24, 0x03	; 3
   10318:	12 c0       	rjmp	.+36     	; 0x1033e <open+0x130>
   1031a:	e1 14       	cp	r14, r1
   1031c:	f1 04       	cpc	r15, r1
   1031e:	41 f4       	brne	.+16     	; 0x10330 <open+0x122>
   10320:	19 86       	std	Y+9, r1	; 0x09
   10322:	18 86       	std	Y+8, r1	; 0x08
   10324:	8b e9       	ldi	r24, 0x9B	; 155
   10326:	97 e7       	ldi	r25, 0x77	; 119
   10328:	9b 87       	std	Y+11, r25	; 0x0b
   1032a:	8a 87       	std	Y+10, r24	; 0x0a
   1032c:	81 e0       	ldi	r24, 0x01	; 1
   1032e:	07 c0       	rjmp	.+14     	; 0x1033e <open+0x130>
   10330:	8e e1       	ldi	r24, 0x1E	; 30
   10332:	98 e7       	ldi	r25, 0x78	; 120
   10334:	99 87       	std	Y+9, r25	; 0x09
   10336:	88 87       	std	Y+8, r24	; 0x08
   10338:	1b 86       	std	Y+11, r1	; 0x0b
   1033a:	1a 86       	std	Y+10, r1	; 0x0a
   1033c:	82 e0       	ldi	r24, 0x02	; 2
   1033e:	8b 83       	std	Y+3, r24	; 0x03
   10340:	c3 01       	movw	r24, r6
   10342:	cd b7       	in	r28, 0x3d	; 61
   10344:	de b7       	in	r29, 0x3e	; 62
   10346:	ee e0       	ldi	r30, 0x0E	; 14
   10348:	0c 94 af e9 	jmp	0x1d35e	; 0x1d35e <__epilogue_restores__+0x8>

0001034c <posix_fopen_modes_to_open>:
   1034c:	cf 93       	push	r28
   1034e:	df 93       	push	r29
   10350:	ec 01       	movw	r28, r24
   10352:	60 eb       	ldi	r22, 0xB0	; 176
   10354:	77 e0       	ldi	r23, 0x07	; 7
   10356:	0e 94 cd 30 	call	0x619a	; 0x619a <strcmp>
   1035a:	00 97       	sbiw	r24, 0x00	; 0
   1035c:	09 f4       	brne	.+2      	; 0x10360 <posix_fopen_modes_to_open+0x14>
   1035e:	5d c0       	rjmp	.+186    	; 0x1041a <posix_fopen_modes_to_open+0xce>
   10360:	65 ef       	ldi	r22, 0xF5	; 245
   10362:	78 e0       	ldi	r23, 0x08	; 8
   10364:	ce 01       	movw	r24, r28
   10366:	0e 94 cd 30 	call	0x619a	; 0x619a <strcmp>
   1036a:	00 97       	sbiw	r24, 0x00	; 0
   1036c:	09 f4       	brne	.+2      	; 0x10370 <posix_fopen_modes_to_open+0x24>
   1036e:	55 c0       	rjmp	.+170    	; 0x1041a <posix_fopen_modes_to_open+0xce>
   10370:	68 ef       	ldi	r22, 0xF8	; 248
   10372:	78 e0       	ldi	r23, 0x08	; 8
   10374:	ce 01       	movw	r24, r28
   10376:	0e 94 cd 30 	call	0x619a	; 0x619a <strcmp>
   1037a:	89 2b       	or	r24, r25
   1037c:	09 f4       	brne	.+2      	; 0x10380 <posix_fopen_modes_to_open+0x34>
   1037e:	42 c0       	rjmp	.+132    	; 0x10404 <posix_fopen_modes_to_open+0xb8>
   10380:	6b ef       	ldi	r22, 0xFB	; 251
   10382:	78 e0       	ldi	r23, 0x08	; 8
   10384:	ce 01       	movw	r24, r28
   10386:	0e 94 cd 30 	call	0x619a	; 0x619a <strcmp>
   1038a:	89 2b       	or	r24, r25
   1038c:	d9 f1       	breq	.+118    	; 0x10404 <posix_fopen_modes_to_open+0xb8>
   1038e:	6f ef       	ldi	r22, 0xFF	; 255
   10390:	78 e0       	ldi	r23, 0x08	; 8
   10392:	ce 01       	movw	r24, r28
   10394:	0e 94 cd 30 	call	0x619a	; 0x619a <strcmp>
   10398:	89 2b       	or	r24, r25
   1039a:	a1 f1       	breq	.+104    	; 0x10404 <posix_fopen_modes_to_open+0xb8>
   1039c:	64 eb       	ldi	r22, 0xB4	; 180
   1039e:	7a e0       	ldi	r23, 0x0A	; 10
   103a0:	ce 01       	movw	r24, r28
   103a2:	0e 94 cd 30 	call	0x619a	; 0x619a <strcmp>
   103a6:	89 2b       	or	r24, r25
   103a8:	81 f1       	breq	.+96     	; 0x1040a <posix_fopen_modes_to_open+0xbe>
   103aa:	63 e0       	ldi	r22, 0x03	; 3
   103ac:	79 e0       	ldi	r23, 0x09	; 9
   103ae:	ce 01       	movw	r24, r28
   103b0:	0e 94 cd 30 	call	0x619a	; 0x619a <strcmp>
   103b4:	89 2b       	or	r24, r25
   103b6:	49 f1       	breq	.+82     	; 0x1040a <posix_fopen_modes_to_open+0xbe>
   103b8:	66 e0       	ldi	r22, 0x06	; 6
   103ba:	79 e0       	ldi	r23, 0x09	; 9
   103bc:	ce 01       	movw	r24, r28
   103be:	0e 94 cd 30 	call	0x619a	; 0x619a <strcmp>
   103c2:	89 2b       	or	r24, r25
   103c4:	29 f1       	breq	.+74     	; 0x10410 <posix_fopen_modes_to_open+0xc4>
   103c6:	69 e0       	ldi	r22, 0x09	; 9
   103c8:	79 e0       	ldi	r23, 0x09	; 9
   103ca:	ce 01       	movw	r24, r28
   103cc:	0e 94 cd 30 	call	0x619a	; 0x619a <strcmp>
   103d0:	89 2b       	or	r24, r25
   103d2:	f1 f0       	breq	.+60     	; 0x10410 <posix_fopen_modes_to_open+0xc4>
   103d4:	6d e0       	ldi	r22, 0x0D	; 13
   103d6:	79 e0       	ldi	r23, 0x09	; 9
   103d8:	ce 01       	movw	r24, r28
   103da:	0e 94 cd 30 	call	0x619a	; 0x619a <strcmp>
   103de:	89 2b       	or	r24, r25
   103e0:	b9 f0       	breq	.+46     	; 0x10410 <posix_fopen_modes_to_open+0xc4>
   103e2:	61 e1       	ldi	r22, 0x11	; 17
   103e4:	71 e1       	ldi	r23, 0x11	; 17
   103e6:	ce 01       	movw	r24, r28
   103e8:	0e 94 cd 30 	call	0x619a	; 0x619a <strcmp>
   103ec:	89 2b       	or	r24, r25
   103ee:	99 f0       	breq	.+38     	; 0x10416 <posix_fopen_modes_to_open+0xca>
   103f0:	61 e1       	ldi	r22, 0x11	; 17
   103f2:	79 e0       	ldi	r23, 0x09	; 9
   103f4:	ce 01       	movw	r24, r28
   103f6:	0e 94 cd 30 	call	0x619a	; 0x619a <strcmp>
   103fa:	89 2b       	or	r24, r25
   103fc:	61 f0       	breq	.+24     	; 0x10416 <posix_fopen_modes_to_open+0xca>
   103fe:	8f ef       	ldi	r24, 0xFF	; 255
   10400:	9f ef       	ldi	r25, 0xFF	; 255
   10402:	0b c0       	rjmp	.+22     	; 0x1041a <posix_fopen_modes_to_open+0xce>
   10404:	82 e0       	ldi	r24, 0x02	; 2
   10406:	92 e0       	ldi	r25, 0x02	; 2
   10408:	08 c0       	rjmp	.+16     	; 0x1041a <posix_fopen_modes_to_open+0xce>
   1040a:	81 e4       	ldi	r24, 0x41	; 65
   1040c:	92 e0       	ldi	r25, 0x02	; 2
   1040e:	05 c0       	rjmp	.+10     	; 0x1041a <posix_fopen_modes_to_open+0xce>
   10410:	82 e4       	ldi	r24, 0x42	; 66
   10412:	92 e0       	ldi	r25, 0x02	; 2
   10414:	02 c0       	rjmp	.+4      	; 0x1041a <posix_fopen_modes_to_open+0xce>
   10416:	81 e4       	ldi	r24, 0x41	; 65
   10418:	94 e0       	ldi	r25, 0x04	; 4
   1041a:	df 91       	pop	r29
   1041c:	cf 91       	pop	r28
   1041e:	08 95       	ret

00010420 <fopen>:
   10420:	cf 93       	push	r28
   10422:	df 93       	push	r29
   10424:	ec 01       	movw	r28, r24
   10426:	cb 01       	movw	r24, r22
   10428:	91 df       	rcall	.-222    	; 0x1034c <posix_fopen_modes_to_open>
   1042a:	bc 01       	movw	r22, r24
   1042c:	ce 01       	movw	r24, r28
   1042e:	ef de       	rcall	.-546    	; 0x1020e <open>
   10430:	0e 94 9f 79 	call	0xf33e	; 0xf33e <fileno_to_stream>
   10434:	df 91       	pop	r29
   10436:	cf 91       	pop	r28
   10438:	08 95       	ret

0001043a <fprintf>:
   1043a:	a8 e0       	ldi	r26, 0x08	; 8
   1043c:	b0 e0       	ldi	r27, 0x00	; 0
   1043e:	e3 e2       	ldi	r30, 0x23	; 35
   10440:	f2 e8       	ldi	r31, 0x82	; 130
   10442:	0c 94 9f e9 	jmp	0x1d33e	; 0x1d33e <__prologue_saves__+0x20>
   10446:	87 e0       	ldi	r24, 0x07	; 7
   10448:	99 e7       	ldi	r25, 0x79	; 121
   1044a:	9a 83       	std	Y+2, r25	; 0x02
   1044c:	89 83       	std	Y+1, r24	; 0x01
   1044e:	18 86       	std	Y+8, r1	; 0x08
   10450:	1f 82       	std	Y+7, r1	; 0x07
   10452:	8d 85       	ldd	r24, Y+13	; 0x0d
   10454:	9e 85       	ldd	r25, Y+14	; 0x0e
   10456:	9c 83       	std	Y+4, r25	; 0x04
   10458:	8b 83       	std	Y+3, r24	; 0x03
   1045a:	4f 85       	ldd	r20, Y+15	; 0x0f
   1045c:	58 89       	ldd	r21, Y+16	; 0x10
   1045e:	60 e8       	ldi	r22, 0x80	; 128
   10460:	9e 01       	movw	r18, r28
   10462:	2f 5e       	subi	r18, 0xEF	; 239
   10464:	3f 4f       	sbci	r19, 0xFF	; 255
   10466:	ce 01       	movw	r24, r28
   10468:	01 96       	adiw	r24, 0x01	; 1
   1046a:	0e 94 a6 40 	call	0x814c	; 0x814c <_printf_fn>
   1046e:	8f 81       	ldd	r24, Y+7	; 0x07
   10470:	98 85       	ldd	r25, Y+8	; 0x08
   10472:	28 96       	adiw	r28, 0x08	; 8
   10474:	e2 e0       	ldi	r30, 0x02	; 2
   10476:	0c 94 bb e9 	jmp	0x1d376	; 0x1d376 <__epilogue_restores__+0x20>

0001047a <posix_help>:
   1047a:	cf 93       	push	r28
   1047c:	df 93       	push	r29
   1047e:	ec 01       	movw	r28, r24
   10480:	8f e8       	ldi	r24, 0x8F	; 143
   10482:	9f e0       	ldi	r25, 0x0F	; 15
   10484:	1f 92       	push	r1
   10486:	9f 93       	push	r25
   10488:	8f 93       	push	r24
   1048a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1048e:	0f 90       	pop	r0
   10490:	0f 90       	pop	r0
   10492:	0f 90       	pop	r0
   10494:	cd 2b       	or	r28, r29
   10496:	51 f0       	breq	.+20     	; 0x104ac <posix_help+0x32>
   10498:	88 e5       	ldi	r24, 0x58	; 88
   1049a:	9e e0       	ldi	r25, 0x0E	; 14
   1049c:	1f 92       	push	r1
   1049e:	9f 93       	push	r25
   104a0:	8f 93       	push	r24
   104a2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   104a6:	0f 90       	pop	r0
   104a8:	0f 90       	pop	r0
   104aa:	0f 90       	pop	r0
   104ac:	df 91       	pop	r29
   104ae:	cf 91       	pop	r28
   104b0:	08 95       	ret

000104b2 <copy>:
   104b2:	4f 92       	push	r4
   104b4:	5f 92       	push	r5
   104b6:	6f 92       	push	r6
   104b8:	8f 92       	push	r8
   104ba:	9f 92       	push	r9
   104bc:	af 92       	push	r10
   104be:	bf 92       	push	r11
   104c0:	cf 92       	push	r12
   104c2:	df 92       	push	r13
   104c4:	ef 92       	push	r14
   104c6:	ff 92       	push	r15
   104c8:	0f 93       	push	r16
   104ca:	1f 93       	push	r17
   104cc:	cf 93       	push	r28
   104ce:	df 93       	push	r29
   104d0:	18 2f       	mov	r17, r24
   104d2:	09 2f       	mov	r16, r25
   104d4:	eb 01       	movw	r28, r22
   104d6:	9f 93       	push	r25
   104d8:	8f 93       	push	r24
   104da:	8b e2       	ldi	r24, 0x2B	; 43
   104dc:	9e e0       	ldi	r25, 0x0E	; 14
   104de:	1f 92       	push	r1
   104e0:	9f 93       	push	r25
   104e2:	8f 93       	push	r24
   104e4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   104e8:	65 ef       	ldi	r22, 0xF5	; 245
   104ea:	78 e0       	ldi	r23, 0x08	; 8
   104ec:	81 2f       	mov	r24, r17
   104ee:	90 2f       	mov	r25, r16
   104f0:	97 df       	rcall	.-210    	; 0x10420 <fopen>
   104f2:	7c 01       	movw	r14, r24
   104f4:	0f 90       	pop	r0
   104f6:	0f 90       	pop	r0
   104f8:	0f 90       	pop	r0
   104fa:	0f 90       	pop	r0
   104fc:	0f 90       	pop	r0
   104fe:	89 2b       	or	r24, r25
   10500:	51 f4       	brne	.+20     	; 0x10516 <copy+0x64>
   10502:	0f 93       	push	r16
   10504:	1f 93       	push	r17
   10506:	8b e1       	ldi	r24, 0x1B	; 27
   10508:	9e e0       	ldi	r25, 0x0E	; 14
   1050a:	1f 92       	push	r1
   1050c:	9f 93       	push	r25
   1050e:	8f 93       	push	r24
   10510:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   10514:	21 c0       	rjmp	.+66     	; 0x10558 <copy+0xa6>
   10516:	df 93       	push	r29
   10518:	cf 93       	push	r28
   1051a:	8e e0       	ldi	r24, 0x0E	; 14
   1051c:	9e e0       	ldi	r25, 0x0E	; 14
   1051e:	1f 92       	push	r1
   10520:	9f 93       	push	r25
   10522:	8f 93       	push	r24
   10524:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   10528:	63 e0       	ldi	r22, 0x03	; 3
   1052a:	79 e0       	ldi	r23, 0x09	; 9
   1052c:	ce 01       	movw	r24, r28
   1052e:	78 df       	rcall	.-272    	; 0x10420 <fopen>
   10530:	8c 01       	movw	r16, r24
   10532:	0f 90       	pop	r0
   10534:	0f 90       	pop	r0
   10536:	0f 90       	pop	r0
   10538:	0f 90       	pop	r0
   1053a:	0f 90       	pop	r0
   1053c:	89 2b       	or	r24, r25
   1053e:	b1 f4       	brne	.+44     	; 0x1056c <copy+0xba>
   10540:	df 93       	push	r29
   10542:	cf 93       	push	r28
   10544:	8e ef       	ldi	r24, 0xFE	; 254
   10546:	9d e0       	ldi	r25, 0x0D	; 13
   10548:	1f 92       	push	r1
   1054a:	9f 93       	push	r25
   1054c:	8f 93       	push	r24
   1054e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   10552:	80 e0       	ldi	r24, 0x00	; 0
   10554:	90 e0       	ldi	r25, 0x00	; 0
   10556:	0e de       	rcall	.-996    	; 0x10174 <fclose>
   10558:	0f 90       	pop	r0
   1055a:	0f 90       	pop	r0
   1055c:	0f 90       	pop	r0
   1055e:	0f 90       	pop	r0
   10560:	0f 90       	pop	r0
   10562:	60 e0       	ldi	r22, 0x00	; 0
   10564:	70 e0       	ldi	r23, 0x00	; 0
   10566:	80 e0       	ldi	r24, 0x00	; 0
   10568:	90 e0       	ldi	r25, 0x00	; 0
   1056a:	73 c0       	rjmp	.+230    	; 0x10652 <copy+0x1a0>
   1056c:	61 e0       	ldi	r22, 0x01	; 1
   1056e:	70 e0       	ldi	r23, 0x00	; 0
   10570:	80 e0       	ldi	r24, 0x00	; 0
   10572:	92 e0       	ldi	r25, 0x02	; 2
   10574:	0e 94 ca 29 	call	0x5394	; 0x5394 <safecalloc>
   10578:	6c 01       	movw	r12, r24
   1057a:	89 2b       	or	r24, r25
   1057c:	29 f4       	brne	.+10     	; 0x10588 <copy+0xd6>
   1057e:	c7 01       	movw	r24, r14
   10580:	f9 dd       	rcall	.-1038   	; 0x10174 <fclose>
   10582:	c8 01       	movw	r24, r16
   10584:	f7 dd       	rcall	.-1042   	; 0x10174 <fclose>
   10586:	ed cf       	rjmp	.-38     	; 0x10562 <copy+0xb0>
   10588:	81 ef       	ldi	r24, 0xF1	; 241
   1058a:	9d e0       	ldi	r25, 0x0D	; 13
   1058c:	1f 92       	push	r1
   1058e:	9f 93       	push	r25
   10590:	8f 93       	push	r24
   10592:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   10596:	0f 90       	pop	r0
   10598:	0f 90       	pop	r0
   1059a:	0f 90       	pop	r0
   1059c:	81 2c       	mov	r8, r1
   1059e:	91 2c       	mov	r9, r1
   105a0:	54 01       	movw	r10, r8
   105a2:	85 ed       	ldi	r24, 0xD5	; 213
   105a4:	9d e0       	ldi	r25, 0x0D	; 13
   105a6:	2c 01       	movw	r4, r24
   105a8:	97 01       	movw	r18, r14
   105aa:	40 e0       	ldi	r20, 0x00	; 0
   105ac:	52 e0       	ldi	r21, 0x02	; 2
   105ae:	61 e0       	ldi	r22, 0x01	; 1
   105b0:	70 e0       	ldi	r23, 0x00	; 0
   105b2:	c6 01       	movw	r24, r12
   105b4:	8b dc       	rcall	.-1770   	; 0xfecc <fread>
   105b6:	ec 01       	movw	r28, r24
   105b8:	18 16       	cp	r1, r24
   105ba:	19 06       	cpc	r1, r25
   105bc:	74 f5       	brge	.+92     	; 0x1061a <copy+0x168>
   105be:	98 01       	movw	r18, r16
   105c0:	ae 01       	movw	r20, r28
   105c2:	61 e0       	ldi	r22, 0x01	; 1
   105c4:	70 e0       	ldi	r23, 0x00	; 0
   105c6:	c6 01       	movw	r24, r12
   105c8:	53 dd       	rcall	.-1370   	; 0x10070 <fwrite>
   105ca:	8c 17       	cp	r24, r28
   105cc:	9d 07       	cpc	r25, r29
   105ce:	5c f4       	brge	.+22     	; 0x105e6 <copy+0x134>
   105d0:	84 ee       	ldi	r24, 0xE4	; 228
   105d2:	9d e0       	ldi	r25, 0x0D	; 13
   105d4:	1f 92       	push	r1
   105d6:	9f 93       	push	r25
   105d8:	8f 93       	push	r24
   105da:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   105de:	0f 90       	pop	r0
   105e0:	0f 90       	pop	r0
   105e2:	0f 90       	pop	r0
   105e4:	1a c0       	rjmp	.+52     	; 0x1061a <copy+0x168>
   105e6:	ce 01       	movw	r24, r28
   105e8:	dd 0f       	add	r29, r29
   105ea:	aa 0b       	sbc	r26, r26
   105ec:	bb 0b       	sbc	r27, r27
   105ee:	88 0e       	add	r8, r24
   105f0:	99 1e       	adc	r9, r25
   105f2:	aa 1e       	adc	r10, r26
   105f4:	bb 1e       	adc	r11, r27
   105f6:	bf 92       	push	r11
   105f8:	af 92       	push	r10
   105fa:	9f 92       	push	r9
   105fc:	8f 92       	push	r8
   105fe:	1f 92       	push	r1
   10600:	5f 92       	push	r5
   10602:	4f 92       	push	r4
   10604:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   10608:	8d b7       	in	r24, 0x3d	; 61
   1060a:	9e b7       	in	r25, 0x3e	; 62
   1060c:	07 96       	adiw	r24, 0x07	; 7
   1060e:	0f b6       	in	r0, 0x3f	; 63
   10610:	f8 94       	cli
   10612:	9e bf       	out	0x3e, r25	; 62
   10614:	0f be       	out	0x3f, r0	; 63
   10616:	8d bf       	out	0x3d, r24	; 61
   10618:	c7 cf       	rjmp	.-114    	; 0x105a8 <copy+0xf6>
   1061a:	bf 92       	push	r11
   1061c:	af 92       	push	r10
   1061e:	9f 92       	push	r9
   10620:	8f 92       	push	r8
   10622:	82 ec       	ldi	r24, 0xC2	; 194
   10624:	9d e0       	ldi	r25, 0x0D	; 13
   10626:	1f 92       	push	r1
   10628:	9f 93       	push	r25
   1062a:	8f 93       	push	r24
   1062c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   10630:	c6 01       	movw	r24, r12
   10632:	0e 94 13 2a 	call	0x5426	; 0x5426 <safefree>
   10636:	c7 01       	movw	r24, r14
   10638:	9d dd       	rcall	.-1222   	; 0x10174 <fclose>
   1063a:	c8 01       	movw	r24, r16
   1063c:	9b dd       	rcall	.-1226   	; 0x10174 <fclose>
   1063e:	8d b7       	in	r24, 0x3d	; 61
   10640:	9e b7       	in	r25, 0x3e	; 62
   10642:	07 96       	adiw	r24, 0x07	; 7
   10644:	0f b6       	in	r0, 0x3f	; 63
   10646:	f8 94       	cli
   10648:	9e bf       	out	0x3e, r25	; 62
   1064a:	0f be       	out	0x3f, r0	; 63
   1064c:	8d bf       	out	0x3d, r24	; 61
   1064e:	b4 01       	movw	r22, r8
   10650:	c5 01       	movw	r24, r10
   10652:	df 91       	pop	r29
   10654:	cf 91       	pop	r28
   10656:	1f 91       	pop	r17
   10658:	0f 91       	pop	r16
   1065a:	ff 90       	pop	r15
   1065c:	ef 90       	pop	r14
   1065e:	df 90       	pop	r13
   10660:	cf 90       	pop	r12
   10662:	bf 90       	pop	r11
   10664:	af 90       	pop	r10
   10666:	9f 90       	pop	r9
   10668:	8f 90       	pop	r8
   1066a:	6f 90       	pop	r6
   1066c:	5f 90       	pop	r5
   1066e:	4f 90       	pop	r4
   10670:	08 95       	ret

00010672 <testpage>:
   10672:	cf 93       	push	r28
   10674:	df 93       	push	r29
   10676:	20 91 7a 01 	lds	r18, 0x017A	; 0x80017a <_pagesize>
   1067a:	30 91 7b 01 	lds	r19, 0x017B	; 0x80017b <_pagesize+0x1>
   1067e:	82 17       	cp	r24, r18
   10680:	93 07       	cpc	r25, r19
   10682:	3c f1       	brlt	.+78     	; 0x106d2 <testpage+0x60>
   10684:	81 e9       	ldi	r24, 0x91	; 145
   10686:	9d e0       	ldi	r25, 0x0D	; 13
   10688:	1f 92       	push	r1
   1068a:	9f 93       	push	r25
   1068c:	8f 93       	push	r24
   1068e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   10692:	0e 94 14 79 	call	0xf228	; 0xf228 <getchar>
   10696:	ec 01       	movw	r28, r24
   10698:	8f e8       	ldi	r24, 0x8F	; 143
   1069a:	9d e0       	ldi	r25, 0x0D	; 13
   1069c:	1f 92       	push	r1
   1069e:	9f 93       	push	r25
   106a0:	8f 93       	push	r24
   106a2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   106a6:	0f 90       	pop	r0
   106a8:	0f 90       	pop	r0
   106aa:	0f 90       	pop	r0
   106ac:	0f 90       	pop	r0
   106ae:	0f 90       	pop	r0
   106b0:	0f 90       	pop	r0
   106b2:	c1 37       	cpi	r28, 0x71	; 113
   106b4:	d1 05       	cpc	r29, r1
   106b6:	41 f0       	breq	.+16     	; 0x106c8 <testpage+0x56>
   106b8:	2a 97       	sbiw	r28, 0x0a	; 10
   106ba:	49 f4       	brne	.+18     	; 0x106ce <testpage+0x5c>
   106bc:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <_pagesize>
   106c0:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <_pagesize+0x1>
   106c4:	01 97       	sbiw	r24, 0x01	; 1
   106c6:	05 c0       	rjmp	.+10     	; 0x106d2 <testpage+0x60>
   106c8:	8f ef       	ldi	r24, 0xFF	; 255
   106ca:	9f ef       	ldi	r25, 0xFF	; 255
   106cc:	02 c0       	rjmp	.+4      	; 0x106d2 <testpage+0x60>
   106ce:	80 e0       	ldi	r24, 0x00	; 0
   106d0:	90 e0       	ldi	r25, 0x00	; 0
   106d2:	df 91       	pop	r29
   106d4:	cf 91       	pop	r28
   106d6:	08 95       	ret

000106d8 <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  void.
MEMSPACE
long cat(char *name, int dopage)
{
   106d8:	a0 e0       	ldi	r26, 0x00	; 0
   106da:	b1 e0       	ldi	r27, 0x01	; 1
   106dc:	e2 e7       	ldi	r30, 0x72	; 114
   106de:	f3 e8       	ldi	r31, 0x83	; 131
   106e0:	0c 94 95 e9 	jmp	0x1d32a	; 0x1d32a <__prologue_saves__+0xc>
   106e4:	18 2f       	mov	r17, r24
   106e6:	09 2f       	mov	r16, r25
   106e8:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
   106ea:	65 ef       	ldi	r22, 0xF5	; 245
   106ec:	78 e0       	ldi	r23, 0x08	; 8
   106ee:	98 de       	rcall	.-720    	; 0x10420 <fopen>
   106f0:	7c 01       	movw	r14, r24
    if (!fp)
   106f2:	89 2b       	or	r24, r25
   106f4:	41 f0       	breq	.+16     	; 0x10706 <cat+0x2e>
   106f6:	c1 2c       	mov	r12, r1
   106f8:	d1 2c       	mov	r13, r1
   106fa:	a1 2c       	mov	r10, r1
   106fc:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   106fe:	8e 01       	movw	r16, r28
   10700:	0f 5f       	subi	r16, 0xFF	; 255
   10702:	1f 4f       	sbci	r17, 0xFF	; 255
   10704:	24 c0       	rjmp	.+72     	; 0x1074e <cat+0x76>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
   10706:	0f 93       	push	r16
   10708:	1f 93       	push	r17
   1070a:	84 e4       	ldi	r24, 0x44	; 68
   1070c:	9e e0       	ldi	r25, 0x0E	; 14
   1070e:	1f 92       	push	r1
   10710:	9f 93       	push	r25
   10712:	8f 93       	push	r24
   10714:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return(0);
   10718:	0f 90       	pop	r0
   1071a:	0f 90       	pop	r0
   1071c:	0f 90       	pop	r0
   1071e:	0f 90       	pop	r0
   10720:	0f 90       	pop	r0
   10722:	c1 2c       	mov	r12, r1
   10724:	d1 2c       	mov	r13, r1
   10726:	76 01       	movw	r14, r12
   10728:	3e c0       	rjmp	.+124    	; 0x107a6 <cat+0xce>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
   1072a:	c8 01       	movw	r24, r16
   1072c:	0e 94 b5 30 	call	0x616a	; 0x616a <trim_tail>
        size += strlen(line);
   10730:	f8 01       	movw	r30, r16
   10732:	01 90       	ld	r0, Z+
   10734:	00 20       	and	r0, r0
   10736:	e9 f7       	brne	.-6      	; 0x10732 <cat+0x5a>
   10738:	31 97       	sbiw	r30, 0x01	; 1
   1073a:	e0 1b       	sub	r30, r16
   1073c:	f1 0b       	sbc	r31, r17
   1073e:	ce 0e       	add	r12, r30
   10740:	df 1e       	adc	r13, r31
        puts(line);
   10742:	c8 01       	movw	r24, r16
   10744:	0e 94 6c 79 	call	0xf2d8	; 0xf2d8 <puts>
        if(dopage)
   10748:	81 14       	cp	r8, r1
   1074a:	91 04       	cpc	r9, r1
   1074c:	49 f4       	brne	.+18     	; 0x10760 <cat+0x88>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   1074e:	a7 01       	movw	r20, r14
   10750:	6e ef       	ldi	r22, 0xFE	; 254
   10752:	70 e0       	ldi	r23, 0x00	; 0
   10754:	c8 01       	movw	r24, r16
   10756:	0e 94 20 79 	call	0xf240	; 0xf240 <fgets>
   1075a:	89 2b       	or	r24, r25
   1075c:	31 f7       	brne	.-52     	; 0x1072a <cat+0x52>
   1075e:	06 c0       	rjmp	.+12     	; 0x1076c <cat+0x94>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
   10760:	c5 01       	movw	r24, r10
   10762:	01 96       	adiw	r24, 0x01	; 1
   10764:	86 df       	rcall	.-244    	; 0x10672 <testpage>
   10766:	5c 01       	movw	r10, r24
            if(count < 0)
   10768:	97 ff       	sbrs	r25, 7
   1076a:	f1 cf       	rjmp	.-30     	; 0x1074e <cat+0x76>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
   1076c:	82 e4       	ldi	r24, 0x42	; 66
   1076e:	9e e0       	ldi	r25, 0x0E	; 14
   10770:	1f 92       	push	r1
   10772:	9f 93       	push	r25
   10774:	8f 93       	push	r24
   10776:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    fclose(fp);
   1077a:	c7 01       	movw	r24, r14
   1077c:	fb dc       	rcall	.-1546   	; 0x10174 <fclose>
    printf("%ld bytes\n", (long)size);
   1077e:	0d 2c       	mov	r0, r13
   10780:	00 0c       	add	r0, r0
   10782:	ee 08       	sbc	r14, r14
   10784:	ff 08       	sbc	r15, r15
   10786:	ff 92       	push	r15
   10788:	ef 92       	push	r14
   1078a:	df 92       	push	r13
   1078c:	cf 92       	push	r12
   1078e:	87 e3       	ldi	r24, 0x37	; 55
   10790:	9e e0       	ldi	r25, 0x0E	; 14
   10792:	1f 92       	push	r1
   10794:	9f 93       	push	r25
   10796:	8f 93       	push	r24
   10798:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    return(size);
   1079c:	0f b6       	in	r0, 0x3f	; 63
   1079e:	f8 94       	cli
   107a0:	de bf       	out	0x3e, r29	; 62
   107a2:	0f be       	out	0x3f, r0	; 63
   107a4:	cd bf       	out	0x3d, r28	; 61
}
   107a6:	c7 01       	movw	r24, r14
   107a8:	b6 01       	movw	r22, r12
   107aa:	d3 95       	inc	r29
   107ac:	ec e0       	ldi	r30, 0x0C	; 12
   107ae:	0c 94 b1 e9 	jmp	0x1d362	; 0x1d362 <__epilogue_restores__+0xc>

000107b2 <hexdump>:
/// @brief hex listing of file with paging, "q" exits
/// @param[in] *name: file to hexdump
/// @retrun void
MEMSPACE
int hexdump(char *name, int dopage)
{
   107b2:	2f 92       	push	r2
   107b4:	3f 92       	push	r3
   107b6:	4f 92       	push	r4
   107b8:	5f 92       	push	r5
   107ba:	6f 92       	push	r6
   107bc:	7f 92       	push	r7
   107be:	8f 92       	push	r8
   107c0:	af 92       	push	r10
   107c2:	bf 92       	push	r11
   107c4:	cf 92       	push	r12
   107c6:	df 92       	push	r13
   107c8:	ef 92       	push	r14
   107ca:	ff 92       	push	r15
   107cc:	0f 93       	push	r16
   107ce:	1f 93       	push	r17
   107d0:	cf 93       	push	r28
   107d2:	df 93       	push	r29
   107d4:	cd b7       	in	r28, 0x3d	; 61
   107d6:	de b7       	in	r29, 0x3e	; 62
   107d8:	e0 97       	sbiw	r28, 0x30	; 48
   107da:	0f b6       	in	r0, 0x3f	; 63
   107dc:	f8 94       	cli
   107de:	de bf       	out	0x3e, r29	; 62
   107e0:	0f be       	out	0x3f, r0	; 63
   107e2:	cd bf       	out	0x3d, r28	; 61
   107e4:	18 2f       	mov	r17, r24
   107e6:	09 2f       	mov	r16, r25
   107e8:	78 ab       	std	Y+48, r23	; 0x30
   107ea:	6f a7       	std	Y+47, r22	; 0x2f
    int i,len,count;

    FILE *fi;
    char buf[0x20];

    fi=fopen(name,"rb");
   107ec:	65 ef       	ldi	r22, 0xF5	; 245
   107ee:	78 e0       	ldi	r23, 0x08	; 8
   107f0:	17 de       	rcall	.-978    	; 0x10420 <fopen>
   107f2:	9a a3       	std	Y+34, r25	; 0x22
   107f4:	89 a3       	std	Y+33, r24	; 0x21
    if(fi == NULL) 
   107f6:	89 2b       	or	r24, r25
   107f8:	49 f1       	breq	.+82     	; 0x1084c <hexdump+0x9a>
   107fa:	21 2c       	mov	r2, r1
   107fc:	31 2c       	mov	r3, r1
   107fe:	c1 2c       	mov	r12, r1
   10800:	d1 2c       	mov	r13, r1
   10802:	76 01       	movw	r14, r12
        return(0);
    }

    count = 0;
    addr = 0;
    while( (len = fread(buf,1, 16, fi)) > 0) 
   10804:	9e 01       	movw	r18, r28
   10806:	2f 5f       	subi	r18, 0xFF	; 255
   10808:	3f 4f       	sbci	r19, 0xFF	; 255
   1080a:	29 01       	movw	r4, r18
    {
        printf("%08lx : ", addr);
   1080c:	8a ea       	ldi	r24, 0xAA	; 170
   1080e:	9d e0       	ldi	r25, 0x0D	; 13
   10810:	9c 01       	movw	r18, r24
   10812:	40 e0       	ldi	r20, 0x00	; 0
   10814:	2b a3       	std	Y+35, r18	; 0x23
   10816:	3c a3       	std	Y+36, r19	; 0x24
   10818:	4d a3       	std	Y+37, r20	; 0x25

        for(i=0;i<len;++i) 
            printf("%02x ",0xff & buf[i]);
   1081a:	84 ea       	ldi	r24, 0xA4	; 164
   1081c:	9d e0       	ldi	r25, 0x0D	; 13
   1081e:	9c 01       	movw	r18, r24
   10820:	40 e0       	ldi	r20, 0x00	; 0
   10822:	2e a3       	std	Y+38, r18	; 0x26
   10824:	3f a3       	std	Y+39, r19	; 0x27
   10826:	48 a7       	std	Y+40, r20	; 0x28
        for(;i<16;++i) 
            printf("   ");
   10828:	80 ea       	ldi	r24, 0xA0	; 160
   1082a:	9d e0       	ldi	r25, 0x0D	; 13
   1082c:	9c 01       	movw	r18, r24
   1082e:	40 e0       	ldi	r20, 0x00	; 0
   10830:	29 a7       	std	Y+41, r18	; 0x29
   10832:	3a a7       	std	Y+42, r19	; 0x2a
   10834:	4b a7       	std	Y+43, r20	; 0x2b

        printf(" : ");
   10836:	8c e9       	ldi	r24, 0x9C	; 156
   10838:	9d e0       	ldi	r25, 0x0D	; 13
   1083a:	9c 01       	movw	r18, r24
   1083c:	40 e0       	ldi	r20, 0x00	; 0
   1083e:	2c a7       	std	Y+44, r18	; 0x2c
   10840:	3d a7       	std	Y+45, r19	; 0x2d
   10842:	4e a7       	std	Y+46, r20	; 0x2e
                putchar('.');
        }
        for(;i<16;++i) 
            putchar('.');

        printf("\n");
   10844:	8a e9       	ldi	r24, 0x9A	; 154
   10846:	9d e0       	ldi	r25, 0x0D	; 13
   10848:	3c 01       	movw	r6, r24
   1084a:	26 c0       	rjmp	.+76     	; 0x10898 <hexdump+0xe6>
    char buf[0x20];

    fi=fopen(name,"rb");
    if(fi == NULL) 
    {
        printf("Can' open: %s\n", name);
   1084c:	0f 93       	push	r16
   1084e:	1f 93       	push	r17
   10850:	83 eb       	ldi	r24, 0xB3	; 179
   10852:	9d e0       	ldi	r25, 0x0D	; 13
   10854:	1f 92       	push	r1
   10856:	9f 93       	push	r25
   10858:	8f 93       	push	r24
   1085a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return(0);
   1085e:	0f 90       	pop	r0
   10860:	0f 90       	pop	r0
   10862:	0f 90       	pop	r0
   10864:	0f 90       	pop	r0
   10866:	0f 90       	pop	r0
   10868:	80 e0       	ldi	r24, 0x00	; 0
   1086a:	90 e0       	ldi	r25, 0x00	; 0
   1086c:	9e c0       	rjmp	.+316    	; 0x109aa <hexdump+0x1f8>
                putchar('.');
        }
        for(;i<16;++i) 
            putchar('.');

        printf("\n");
   1086e:	1f 92       	push	r1
   10870:	7f 92       	push	r7
   10872:	6f 92       	push	r6
   10874:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        addr += len;
   10878:	01 2e       	mov	r0, r17
   1087a:	00 0c       	add	r0, r0
   1087c:	22 0b       	sbc	r18, r18
   1087e:	33 0b       	sbc	r19, r19
   10880:	c0 0e       	add	r12, r16
   10882:	d1 1e       	adc	r13, r17
   10884:	e2 1e       	adc	r14, r18
   10886:	f3 1e       	adc	r15, r19
        if(dopage)
   10888:	0f 90       	pop	r0
   1088a:	0f 90       	pop	r0
   1088c:	0f 90       	pop	r0
   1088e:	8f a5       	ldd	r24, Y+47	; 0x2f
   10890:	98 a9       	ldd	r25, Y+48	; 0x30
   10892:	89 2b       	or	r24, r25
   10894:	09 f0       	breq	.+2      	; 0x10898 <hexdump+0xe6>
   10896:	74 c0       	rjmp	.+232    	; 0x10980 <hexdump+0x1ce>
        return(0);
    }

    count = 0;
    addr = 0;
    while( (len = fread(buf,1, 16, fi)) > 0) 
   10898:	29 a1       	ldd	r18, Y+33	; 0x21
   1089a:	3a a1       	ldd	r19, Y+34	; 0x22
   1089c:	40 e1       	ldi	r20, 0x10	; 16
   1089e:	50 e0       	ldi	r21, 0x00	; 0
   108a0:	61 e0       	ldi	r22, 0x01	; 1
   108a2:	70 e0       	ldi	r23, 0x00	; 0
   108a4:	c2 01       	movw	r24, r4
   108a6:	12 db       	rcall	.-2524   	; 0xfecc <fread>
   108a8:	8c 01       	movw	r16, r24
   108aa:	18 16       	cp	r1, r24
   108ac:	19 06       	cpc	r1, r25
   108ae:	0c f0       	brlt	.+2      	; 0x108b2 <hexdump+0x100>
   108b0:	6d c0       	rjmp	.+218    	; 0x1098c <hexdump+0x1da>
    {
        printf("%08lx : ", addr);
   108b2:	ff 92       	push	r15
   108b4:	ef 92       	push	r14
   108b6:	df 92       	push	r13
   108b8:	cf 92       	push	r12
   108ba:	1f 92       	push	r1
   108bc:	3c a1       	ldd	r19, Y+36	; 0x24
   108be:	3f 93       	push	r19
   108c0:	4b a1       	ldd	r20, Y+35	; 0x23
   108c2:	4f 93       	push	r20
   108c4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   108c8:	0f b6       	in	r0, 0x3f	; 63
   108ca:	f8 94       	cli
   108cc:	de bf       	out	0x3e, r29	; 62
   108ce:	0f be       	out	0x3f, r0	; 63
   108d0:	cd bf       	out	0x3d, r28	; 61
   108d2:	52 01       	movw	r10, r4

        for(i=0;i<len;++i) 
            printf("%02x ",0xff & buf[i]);
   108d4:	f5 01       	movw	r30, r10
   108d6:	81 91       	ld	r24, Z+
   108d8:	5f 01       	movw	r10, r30
   108da:	1f 92       	push	r1
   108dc:	8f 93       	push	r24
   108de:	1f 92       	push	r1
   108e0:	ff a1       	ldd	r31, Y+39	; 0x27
   108e2:	ff 93       	push	r31
   108e4:	2e a1       	ldd	r18, Y+38	; 0x26
   108e6:	2f 93       	push	r18
   108e8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    addr = 0;
    while( (len = fread(buf,1, 16, fi)) > 0) 
    {
        printf("%08lx : ", addr);

        for(i=0;i<len;++i) 
   108ec:	c5 01       	movw	r24, r10
   108ee:	84 19       	sub	r24, r4
   108f0:	95 09       	sbc	r25, r5
   108f2:	0f 90       	pop	r0
   108f4:	0f 90       	pop	r0
   108f6:	0f 90       	pop	r0
   108f8:	0f 90       	pop	r0
   108fa:	0f 90       	pop	r0
   108fc:	80 17       	cp	r24, r16
   108fe:	91 07       	cpc	r25, r17
   10900:	4c f3       	brlt	.-46     	; 0x108d4 <hexdump+0x122>
   10902:	58 01       	movw	r10, r16
            printf("%02x ",0xff & buf[i]);
        for(;i<16;++i) 
   10904:	90 e1       	ldi	r25, 0x10	; 16
   10906:	a9 16       	cp	r10, r25
   10908:	b1 04       	cpc	r11, r1
   1090a:	74 f4       	brge	.+28     	; 0x10928 <hexdump+0x176>
            printf("   ");
   1090c:	1f 92       	push	r1
   1090e:	3a a5       	ldd	r19, Y+42	; 0x2a
   10910:	3f 93       	push	r19
   10912:	49 a5       	ldd	r20, Y+41	; 0x29
   10914:	4f 93       	push	r20
   10916:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    {
        printf("%08lx : ", addr);

        for(i=0;i<len;++i) 
            printf("%02x ",0xff & buf[i]);
        for(;i<16;++i) 
   1091a:	8f ef       	ldi	r24, 0xFF	; 255
   1091c:	a8 1a       	sub	r10, r24
   1091e:	b8 0a       	sbc	r11, r24
   10920:	0f 90       	pop	r0
   10922:	0f 90       	pop	r0
   10924:	0f 90       	pop	r0
   10926:	ee cf       	rjmp	.-36     	; 0x10904 <hexdump+0x152>
            printf("   ");

        printf(" : ");
   10928:	1f 92       	push	r1
   1092a:	ed a5       	ldd	r30, Y+45	; 0x2d
   1092c:	ef 93       	push	r30
   1092e:	fc a5       	ldd	r31, Y+44	; 0x2c
   10930:	ff 93       	push	r31
   10932:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   10936:	0f 90       	pop	r0
   10938:	0f 90       	pop	r0
   1093a:	0f 90       	pop	r0
   1093c:	52 01       	movw	r10, r4

        for(i=0;i<len;++i) 
        {
            if(buf[i] >= 0x20 && buf[i] <= 0x7e)
   1093e:	f5 01       	movw	r30, r10
   10940:	81 91       	ld	r24, Z+
   10942:	5f 01       	movw	r10, r30
   10944:	90 ee       	ldi	r25, 0xE0	; 224
   10946:	98 0f       	add	r25, r24
   10948:	9f 35       	cpi	r25, 0x5F	; 95
   1094a:	10 f4       	brcc	.+4      	; 0x10950 <hexdump+0x19e>
                putchar(buf[i]);
   1094c:	90 e0       	ldi	r25, 0x00	; 0
   1094e:	02 c0       	rjmp	.+4      	; 0x10954 <hexdump+0x1a2>
            else
                putchar('.');
   10950:	8e e2       	ldi	r24, 0x2E	; 46
   10952:	90 e0       	ldi	r25, 0x00	; 0
   10954:	0e 94 1a 79 	call	0xf234	; 0xf234 <putchar>
        for(;i<16;++i) 
            printf("   ");

        printf(" : ");

        for(i=0;i<len;++i) 
   10958:	c5 01       	movw	r24, r10
   1095a:	84 19       	sub	r24, r4
   1095c:	95 09       	sbc	r25, r5
   1095e:	80 17       	cp	r24, r16
   10960:	91 07       	cpc	r25, r17
   10962:	6c f3       	brlt	.-38     	; 0x1093e <hexdump+0x18c>
   10964:	58 01       	movw	r10, r16
            if(buf[i] >= 0x20 && buf[i] <= 0x7e)
                putchar(buf[i]);
            else
                putchar('.');
        }
        for(;i<16;++i) 
   10966:	20 e1       	ldi	r18, 0x10	; 16
   10968:	a2 16       	cp	r10, r18
   1096a:	b1 04       	cpc	r11, r1
   1096c:	0c f0       	brlt	.+2      	; 0x10970 <hexdump+0x1be>
   1096e:	7f cf       	rjmp	.-258    	; 0x1086e <hexdump+0xbc>
            putchar('.');
   10970:	8e e2       	ldi	r24, 0x2E	; 46
   10972:	90 e0       	ldi	r25, 0x00	; 0
   10974:	0e 94 1a 79 	call	0xf234	; 0xf234 <putchar>
            if(buf[i] >= 0x20 && buf[i] <= 0x7e)
                putchar(buf[i]);
            else
                putchar('.');
        }
        for(;i<16;++i) 
   10978:	ff ef       	ldi	r31, 0xFF	; 255
   1097a:	af 1a       	sub	r10, r31
   1097c:	bf 0a       	sbc	r11, r31

        printf("\n");
        addr += len;
        if(dopage)
        {
            count = testpage(++count);
   1097e:	f3 cf       	rjmp	.-26     	; 0x10966 <hexdump+0x1b4>
   10980:	c1 01       	movw	r24, r2
   10982:	01 96       	adiw	r24, 0x01	; 1
   10984:	76 de       	rcall	.-788    	; 0x10672 <testpage>
            if(count < 0)
   10986:	1c 01       	movw	r2, r24
   10988:	97 ff       	sbrs	r25, 7
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
   1098a:	86 cf       	rjmp	.-244    	; 0x10898 <hexdump+0xe6>
   1098c:	88 e9       	ldi	r24, 0x98	; 152
   1098e:	9d e0       	ldi	r25, 0x0D	; 13
   10990:	1f 92       	push	r1
   10992:	9f 93       	push	r25
   10994:	8f 93       	push	r24
    fclose(fi);
   10996:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1099a:	89 a1       	ldd	r24, Y+33	; 0x21
   1099c:	9a a1       	ldd	r25, Y+34	; 0x22
    return(1);
   1099e:	ea db       	rcall	.-2092   	; 0x10174 <fclose>
   109a0:	0f 90       	pop	r0
   109a2:	0f 90       	pop	r0
   109a4:	0f 90       	pop	r0
   109a6:	81 e0       	ldi	r24, 0x01	; 1
}
   109a8:	90 e0       	ldi	r25, 0x00	; 0
   109aa:	e0 96       	adiw	r28, 0x30	; 48
   109ac:	0f b6       	in	r0, 0x3f	; 63
   109ae:	f8 94       	cli
   109b0:	de bf       	out	0x3e, r29	; 62
   109b2:	0f be       	out	0x3f, r0	; 63
   109b4:	cd bf       	out	0x3d, r28	; 61
   109b6:	df 91       	pop	r29
   109b8:	cf 91       	pop	r28
   109ba:	1f 91       	pop	r17
   109bc:	0f 91       	pop	r16
   109be:	ff 90       	pop	r15
   109c0:	ef 90       	pop	r14
   109c2:	df 90       	pop	r13
   109c4:	cf 90       	pop	r12
   109c6:	bf 90       	pop	r11
   109c8:	af 90       	pop	r10
   109ca:	8f 90       	pop	r8
   109cc:	7f 90       	pop	r7
   109ce:	6f 90       	pop	r6
   109d0:	5f 90       	pop	r5
   109d2:	4f 90       	pop	r4
   109d4:	3f 90       	pop	r3
   109d6:	2f 90       	pop	r2
   109d8:	08 95       	ret

000109da <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   109da:	4f 92       	push	r4
   109dc:	5f 92       	push	r5
   109de:	6f 92       	push	r6
   109e0:	7f 92       	push	r7
   109e2:	af 92       	push	r10
   109e4:	bf 92       	push	r11
   109e6:	cf 92       	push	r12
   109e8:	df 92       	push	r13
   109ea:	ef 92       	push	r14
   109ec:	ff 92       	push	r15
   109ee:	0f 93       	push	r16
   109f0:	1f 93       	push	r17
   109f2:	cf 93       	push	r28
   109f4:	df 93       	push	r29
   109f6:	cd b7       	in	r28, 0x3d	; 61
   109f8:	de b7       	in	r29, 0x3e	; 62
   109fa:	ec 97       	sbiw	r28, 0x3c	; 60
   109fc:	0f b6       	in	r0, 0x3f	; 63
   109fe:	f8 94       	cli
   10a00:	de bf       	out	0x3e, r29	; 62
   10a02:	0f be       	out	0x3f, r0	; 63
   10a04:	cd bf       	out	0x3d, r28	; 61
   10a06:	8c 01       	movw	r16, r24
   10a08:	7b 01       	movw	r14, r22
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;


    if(stat(name, &sp) == -1) 
   10a0a:	be 01       	movw	r22, r28
   10a0c:	6f 5f       	subi	r22, 0xFF	; 255
   10a0e:	7f 4f       	sbci	r23, 0xFF	; 255
   10a10:	1b d8       	rcall	.-4042   	; 0xfa48 <stat>
   10a12:	01 96       	adiw	r24, 0x01	; 1
   10a14:	89 f4       	brne	.+34     	; 0x10a38 <ls_info+0x5e>
    {
        printf("can not stat: %s\n", name);
   10a16:	1f 93       	push	r17
   10a18:	0f 93       	push	r16
   10a1a:	8d e7       	ldi	r24, 0x7D	; 125
   10a1c:	9d e0       	ldi	r25, 0x0D	; 13
   10a1e:	1f 92       	push	r1
   10a20:	9f 93       	push	r25
   10a22:	8f 93       	push	r24
   10a24:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return(0);
   10a28:	0f 90       	pop	r0
   10a2a:	0f 90       	pop	r0
   10a2c:	0f 90       	pop	r0
   10a2e:	0f 90       	pop	r0
   10a30:	0f 90       	pop	r0
   10a32:	80 e0       	ldi	r24, 0x00	; 0
   10a34:	90 e0       	ldi	r25, 0x00	; 0
   10a36:	79 c0       	rjmp	.+242    	; 0x10b2a <ls_info+0x150>
    }

    if(!verbose)
   10a38:	ef 28       	or	r14, r15
   10a3a:	91 f4       	brne	.+36     	; 0x10a60 <ls_info+0x86>
    {
        printf("%s\n",basename(name));
   10a3c:	c8 01       	movw	r24, r16
   10a3e:	0e 94 86 7a 	call	0xf50c	; 0xf50c <basename>
   10a42:	9f 93       	push	r25
   10a44:	8f 93       	push	r24
   10a46:	89 e7       	ldi	r24, 0x79	; 121
   10a48:	9d e0       	ldi	r25, 0x0D	; 13
   10a4a:	1f 92       	push	r1
   10a4c:	9f 93       	push	r25
   10a4e:	8f 93       	push	r24
   10a50:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return(1);
   10a54:	0f 90       	pop	r0
   10a56:	0f 90       	pop	r0
   10a58:	0f 90       	pop	r0
   10a5a:	0f 90       	pop	r0
   10a5c:	0f 90       	pop	r0
   10a5e:	63 c0       	rjmp	.+198    	; 0x10b26 <ls_info+0x14c>
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
   10a60:	49 84       	ldd	r4, Y+9	; 0x09
   10a62:	5a 84       	ldd	r5, Y+10	; 0x0a
   10a64:	6b 84       	ldd	r6, Y+11	; 0x0b
   10a66:	7c 84       	ldd	r7, Y+12	; 0x0c
   10a68:	d3 01       	movw	r26, r6
   10a6a:	c2 01       	movw	r24, r4
   10a6c:	88 27       	eor	r24, r24
   10a6e:	90 7f       	andi	r25, 0xF0	; 240
   10a70:	aa 27       	eor	r26, r26
   10a72:	bb 27       	eor	r27, r27
   10a74:	81 15       	cp	r24, r1
   10a76:	90 44       	sbci	r25, 0x40	; 64
   10a78:	a1 05       	cpc	r26, r1
   10a7a:	b1 05       	cpc	r27, r1
   10a7c:	11 f4       	brne	.+4      	; 0x10a82 <ls_info+0xa8>
        *p++ = 'd';
   10a7e:	84 e6       	ldi	r24, 0x64	; 100
   10a80:	01 c0       	rjmp	.+2      	; 0x10a84 <ls_info+0xaa>
    else
        *p++ = '-';
   10a82:	8d e2       	ldi	r24, 0x2D	; 45
   10a84:	89 ab       	std	Y+49, r24	; 0x31
   10a86:	fe 01       	movw	r30, r28
   10a88:	f1 96       	adiw	r30, 0x31	; 49
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   10a8a:	e1 2c       	mov	r14, r1
   10a8c:	ff 24       	eor	r15, r15
   10a8e:	f3 94       	inc	r15
   10a90:	20 e0       	ldi	r18, 0x00	; 0
   10a92:	30 e0       	ldi	r19, 0x00	; 0
   10a94:	5f 01       	movw	r10, r30
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
   10a96:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
   10a98:	53 e0       	ldi	r21, 0x03	; 3
   10a9a:	c5 2e       	mov	r12, r21
   10a9c:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
   10a9e:	c7 01       	movw	r24, r14
   10aa0:	a0 e0       	ldi	r26, 0x00	; 0
   10aa2:	b0 e0       	ldi	r27, 0x00	; 0
   10aa4:	84 21       	and	r24, r4
   10aa6:	95 21       	and	r25, r5
   10aa8:	a6 21       	and	r26, r6
   10aaa:	b7 21       	and	r27, r7
   10aac:	89 2b       	or	r24, r25
   10aae:	8a 2b       	or	r24, r26
   10ab0:	8b 2b       	or	r24, r27
   10ab2:	51 f0       	breq	.+20     	; 0x10ac8 <ls_info+0xee>
            *p++ = cm[ i % 3];
   10ab4:	c9 01       	movw	r24, r18
   10ab6:	b6 01       	movw	r22, r12
   10ab8:	0e 94 0f e9 	call	0x1d21e	; 0x1d21e <__divmodhi4>
   10abc:	dc 01       	movw	r26, r24
   10abe:	a3 56       	subi	r26, 0x63	; 99
   10ac0:	b4 4f       	sbci	r27, 0xF4	; 244
   10ac2:	8c 91       	ld	r24, X
   10ac4:	81 83       	std	Z+1, r24	; 0x01
   10ac6:	01 c0       	rjmp	.+2      	; 0x10aca <ls_info+0xf0>
        else
            *p++ = '-';
   10ac8:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
   10aca:	f6 94       	lsr	r15
   10acc:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
   10ace:	2f 5f       	subi	r18, 0xFF	; 255
   10ad0:	3f 4f       	sbci	r19, 0xFF	; 255
   10ad2:	31 96       	adiw	r30, 0x01	; 1
   10ad4:	29 30       	cpi	r18, 0x09	; 9
   10ad6:	31 05       	cpc	r19, r1
   10ad8:	11 f7       	brne	.-60     	; 0x10a9e <ls_info+0xc4>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
   10ada:	1b ae       	std	Y+59, r1	; 0x3b

    printf("%s none none %12ld %s %s\n",
   10adc:	c8 01       	movw	r24, r16
   10ade:	0e 94 86 7a 	call	0xf50c	; 0xf50c <basename>
   10ae2:	18 2f       	mov	r17, r24
   10ae4:	09 2f       	mov	r16, r25
   10ae6:	69 a5       	ldd	r22, Y+41	; 0x29
   10ae8:	7a a5       	ldd	r23, Y+42	; 0x2a
   10aea:	8b a5       	ldd	r24, Y+43	; 0x2b
   10aec:	9c a5       	ldd	r25, Y+44	; 0x2c
   10aee:	0e 94 b4 79 	call	0xf368	; 0xf368 <mctime>
   10af2:	0f 93       	push	r16
   10af4:	1f 93       	push	r17
   10af6:	9f 93       	push	r25
   10af8:	8f 93       	push	r24
   10afa:	8c 8d       	ldd	r24, Y+28	; 0x1c
   10afc:	8f 93       	push	r24
   10afe:	8b 8d       	ldd	r24, Y+27	; 0x1b
   10b00:	8f 93       	push	r24
   10b02:	8a 8d       	ldd	r24, Y+26	; 0x1a
   10b04:	8f 93       	push	r24
   10b06:	89 8d       	ldd	r24, Y+25	; 0x19
   10b08:	8f 93       	push	r24
   10b0a:	bf 92       	push	r11
   10b0c:	af 92       	push	r10
   10b0e:	8f e5       	ldi	r24, 0x5F	; 95
   10b10:	9d e0       	ldi	r25, 0x0D	; 13
   10b12:	1f 92       	push	r1
   10b14:	9f 93       	push	r25
   10b16:	8f 93       	push	r24
   10b18:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        attr, 
        (long) sp.st_size, 
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
   10b1c:	0f b6       	in	r0, 0x3f	; 63
   10b1e:	f8 94       	cli
   10b20:	de bf       	out	0x3e, r29	; 62
   10b22:	0f be       	out	0x3f, r0	; 63
   10b24:	cd bf       	out	0x3d, r28	; 61
   10b26:	81 e0       	ldi	r24, 0x01	; 1
   10b28:	90 e0       	ldi	r25, 0x00	; 0
}
   10b2a:	ec 96       	adiw	r28, 0x3c	; 60
   10b2c:	0f b6       	in	r0, 0x3f	; 63
   10b2e:	f8 94       	cli
   10b30:	de bf       	out	0x3e, r29	; 62
   10b32:	0f be       	out	0x3f, r0	; 63
   10b34:	cd bf       	out	0x3d, r28	; 61
   10b36:	df 91       	pop	r29
   10b38:	cf 91       	pop	r28
   10b3a:	1f 91       	pop	r17
   10b3c:	0f 91       	pop	r16
   10b3e:	ff 90       	pop	r15
   10b40:	ef 90       	pop	r14
   10b42:	df 90       	pop	r13
   10b44:	cf 90       	pop	r12
   10b46:	bf 90       	pop	r11
   10b48:	af 90       	pop	r10
   10b4a:	7f 90       	pop	r7
   10b4c:	6f 90       	pop	r6
   10b4e:	5f 90       	pop	r5
   10b50:	4f 90       	pop	r4
   10b52:	08 95       	ret

00010b54 <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files
MEMSPACE
int ls(char *name, int verbose)
{
   10b54:	2f 92       	push	r2
   10b56:	3f 92       	push	r3
   10b58:	4f 92       	push	r4
   10b5a:	5f 92       	push	r5
   10b5c:	6f 92       	push	r6
   10b5e:	8f 92       	push	r8
   10b60:	9f 92       	push	r9
   10b62:	af 92       	push	r10
   10b64:	bf 92       	push	r11
   10b66:	cf 92       	push	r12
   10b68:	df 92       	push	r13
   10b6a:	ef 92       	push	r14
   10b6c:	ff 92       	push	r15
   10b6e:	0f 93       	push	r16
   10b70:	1f 93       	push	r17
   10b72:	cf 93       	push	r28
   10b74:	df 93       	push	r29
   10b76:	cd b7       	in	r28, 0x3d	; 61
   10b78:	de b7       	in	r29, 0x3e	; 62
   10b7a:	c2 53       	subi	r28, 0x32	; 50
   10b7c:	d1 40       	sbci	r29, 0x01	; 1
   10b7e:	0f b6       	in	r0, 0x3f	; 63
   10b80:	f8 94       	cli
   10b82:	de bf       	out	0x3e, r29	; 62
   10b84:	0f be       	out	0x3f, r0	; 63
   10b86:	cd bf       	out	0x3d, r28	; 61
   10b88:	7c 01       	movw	r14, r24
   10b8a:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   10b8c:	19 82       	std	Y+1, r1	; 0x01
   10b8e:	8e 01       	movw	r16, r28
   10b90:	0f 5f       	subi	r16, 0xFF	; 255
   10b92:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   10b94:	00 97       	sbiw	r24, 0x00	; 0
   10b96:	91 f4       	brne	.+36     	; 0x10bbc <ls+0x68>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   10b98:	6e ef       	ldi	r22, 0xFE	; 254
   10b9a:	70 e0       	ldi	r23, 0x00	; 0
   10b9c:	c8 01       	movw	r24, r16
   10b9e:	0e 94 dc 7a 	call	0xf5b8	; 0xf5b8 <getcwd>
   10ba2:	89 2b       	or	r24, r25
   10ba4:	d1 f4       	brne	.+52     	; 0x10bda <ls+0x86>
        {
            printf("ls: Can't get current directory\n"); 
   10ba6:	8e e3       	ldi	r24, 0x3E	; 62
   10ba8:	9d e0       	ldi	r25, 0x0D	; 13
   10baa:	1f 92       	push	r1
   10bac:	9f 93       	push	r25
   10bae:	8f 93       	push	r24
   10bb0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            return(0); 
   10bb4:	0f 90       	pop	r0
   10bb6:	0f 90       	pop	r0
   10bb8:	0f 90       	pop	r0
   10bba:	3c c0       	rjmp	.+120    	; 0x10c34 <ls+0xe0>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   10bbc:	fc 01       	movw	r30, r24
   10bbe:	80 81       	ld	r24, Z
   10bc0:	88 23       	and	r24, r24
   10bc2:	51 f3       	breq	.-44     	; 0x10b98 <ls+0x44>
   10bc4:	60 ee       	ldi	r22, 0xE0	; 224
   10bc6:	70 e1       	ldi	r23, 0x10	; 16
   10bc8:	c7 01       	movw	r24, r14
   10bca:	0e 94 36 31 	call	0x626c	; 0x626c <MATCH>
   10bce:	89 2b       	or	r24, r25
   10bd0:	19 f7       	brne	.-58     	; 0x10b98 <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   10bd2:	b7 01       	movw	r22, r14
   10bd4:	c8 01       	movw	r24, r16
   10bd6:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <strcpy>
    }
    len = strlen(fullpath);
   10bda:	f8 01       	movw	r30, r16
   10bdc:	01 90       	ld	r0, Z+
   10bde:	00 20       	and	r0, r0
   10be0:	e9 f7       	brne	.-6      	; 0x10bdc <ls+0x88>
   10be2:	31 97       	sbiw	r30, 0x01	; 1
   10be4:	1f 01       	movw	r2, r30
   10be6:	20 1a       	sub	r2, r16
   10be8:	31 0a       	sbc	r3, r17


    printf("Listing:[%s]\n",fullpath);
   10bea:	1f 93       	push	r17
   10bec:	0f 93       	push	r16
   10bee:	80 e3       	ldi	r24, 0x30	; 48
   10bf0:	9d e0       	ldi	r25, 0x0D	; 13
   10bf2:	1f 92       	push	r1
   10bf4:	9f 93       	push	r25
   10bf6:	8f 93       	push	r24
   10bf8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    if (stat(fullpath, &st)) 
   10bfc:	be 01       	movw	r22, r28
   10bfe:	6f 5f       	subi	r22, 0xFF	; 255
   10c00:	7e 4f       	sbci	r23, 0xFE	; 254
   10c02:	c8 01       	movw	r24, r16
   10c04:	0e 94 24 7d 	call	0xfa48	; 0xfa48 <stat>
   10c08:	7c 01       	movw	r14, r24
   10c0a:	0f 90       	pop	r0
   10c0c:	0f 90       	pop	r0
   10c0e:	0f 90       	pop	r0
   10c10:	0f 90       	pop	r0
   10c12:	0f 90       	pop	r0
   10c14:	89 2b       	or	r24, r25
   10c16:	89 f0       	breq	.+34     	; 0x10c3a <ls+0xe6>
    { 
        printf("ls: cannot stat [%s]\n", fullpath); 
   10c18:	1f 93       	push	r17
   10c1a:	0f 93       	push	r16
   10c1c:	8a e1       	ldi	r24, 0x1A	; 26
   10c1e:	9d e0       	ldi	r25, 0x0D	; 13
   10c20:	1f 92       	push	r1
   10c22:	9f 93       	push	r25
   10c24:	8f 93       	push	r24
   10c26:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return(0); 
   10c2a:	0f 90       	pop	r0
   10c2c:	0f 90       	pop	r0
   10c2e:	0f 90       	pop	r0
   10c30:	0f 90       	pop	r0
   10c32:	0f 90       	pop	r0
   10c34:	e1 2c       	mov	r14, r1
   10c36:	f1 2c       	mov	r15, r1
   10c38:	8f c0       	rjmp	.+286    	; 0x10d58 <ls+0x204>
    }

    switch (st.st_mode & S_IFMT) 
   10c3a:	c7 5f       	subi	r28, 0xF7	; 247
   10c3c:	de 4f       	sbci	r29, 0xFE	; 254
   10c3e:	88 81       	ld	r24, Y
   10c40:	99 81       	ldd	r25, Y+1	; 0x01
   10c42:	aa 81       	ldd	r26, Y+2	; 0x02
   10c44:	bb 81       	ldd	r27, Y+3	; 0x03
   10c46:	c9 50       	subi	r28, 0x09	; 9
   10c48:	d1 40       	sbci	r29, 0x01	; 1
   10c4a:	88 27       	eor	r24, r24
   10c4c:	90 7f       	andi	r25, 0xF0	; 240
   10c4e:	aa 27       	eor	r26, r26
   10c50:	bb 27       	eor	r27, r27
   10c52:	81 15       	cp	r24, r1
   10c54:	f0 e4       	ldi	r31, 0x40	; 64
   10c56:	9f 07       	cpc	r25, r31
   10c58:	a1 05       	cpc	r26, r1
   10c5a:	b1 05       	cpc	r27, r1
   10c5c:	51 f0       	breq	.+20     	; 0x10c72 <ls+0x11e>
   10c5e:	81 15       	cp	r24, r1
   10c60:	90 48       	sbci	r25, 0x80	; 128
   10c62:	a1 05       	cpc	r26, r1
   10c64:	b1 05       	cpc	r27, r1
   10c66:	09 f0       	breq	.+2      	; 0x10c6a <ls+0x116>
   10c68:	67 c0       	rjmp	.+206    	; 0x10d38 <ls+0x1e4>
    {
    case S_IFREG:
        ls_info(fullpath,verbose);
   10c6a:	b4 01       	movw	r22, r8
   10c6c:	c8 01       	movw	r24, r16
   10c6e:	b5 de       	rcall	.-662    	; 0x109da <ls_info>
   10c70:	63 c0       	rjmp	.+198    	; 0x10d38 <ls+0x1e4>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
   10c72:	c8 01       	movw	r24, r16
   10c74:	0e 94 8a 7b 	call	0xf714	; 0xf714 <opendir>
   10c78:	5c 01       	movw	r10, r24
        if(!dirp)
   10c7a:	89 2b       	or	r24, r25
   10c7c:	79 f0       	breq	.+30     	; 0x10c9c <ls+0x148>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   10c7e:	e1 2c       	mov	r14, r1
   10c80:	f1 2c       	mov	r15, r1
                strcat(fullpath,"/");
            }
            strcat(fullpath,de->d_name);
            files +=ls_info(fullpath,verbose);
            // restore path
            fullpath[len] = 0;
   10c82:	c8 01       	movw	r24, r16
   10c84:	82 0d       	add	r24, r2
   10c86:	93 1d       	adc	r25, r3
   10c88:	cf 5c       	subi	r28, 0xCF	; 207
   10c8a:	de 4f       	sbci	r29, 0xFE	; 254
   10c8c:	99 83       	std	Y+1, r25	; 0x01
   10c8e:	88 83       	st	Y, r24
   10c90:	c1 53       	subi	r28, 0x31	; 49
   10c92:	d1 40       	sbci	r29, 0x01	; 1
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   10c94:	87 ee       	ldi	r24, 0xE7	; 231
   10c96:	9c e0       	ldi	r25, 0x0C	; 12
   10c98:	2c 01       	movw	r4, r24
   10c9a:	27 c0       	rjmp	.+78     	; 0x10cea <ls+0x196>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
        if(!dirp)
        {
            printf("opendir failed\n");
   10c9c:	8a e0       	ldi	r24, 0x0A	; 10
   10c9e:	9d e0       	ldi	r25, 0x0D	; 13
   10ca0:	1f 92       	push	r1
   10ca2:	9f 93       	push	r25
   10ca4:	8f 93       	push	r24
   10ca6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            return(0);
   10caa:	0f 90       	pop	r0
   10cac:	0f 90       	pop	r0
   10cae:	0f 90       	pop	r0
   10cb0:	53 c0       	rjmp	.+166    	; 0x10d58 <ls+0x204>
        }
        while ( (de = readdir(dirp)) ) 
        {
            if(de->d_name[0] == 0)
   10cb2:	f6 01       	movw	r30, r12
   10cb4:	80 81       	ld	r24, Z
   10cb6:	88 23       	and	r24, r24
   10cb8:	f1 f0       	breq	.+60     	; 0x10cf6 <ls+0x1a2>
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
   10cba:	f6 01       	movw	r30, r12
   10cbc:	01 90       	ld	r0, Z+
   10cbe:	00 20       	and	r0, r0
   10cc0:	e9 f7       	brne	.-6      	; 0x10cbc <ls+0x168>
   10cc2:	31 97       	sbiw	r30, 0x01	; 1
   10cc4:	ec 19       	sub	r30, r12
   10cc6:	fd 09       	sbc	r31, r13
            if(len + len2 >= MAX_NAME_LEN)
   10cc8:	e2 0d       	add	r30, r2
   10cca:	f3 1d       	adc	r31, r3
   10ccc:	ef 3f       	cpi	r30, 0xFF	; 255
   10cce:	f1 05       	cpc	r31, r1
   10cd0:	b4 f0       	brlt	.+44     	; 0x10cfe <ls+0x1aa>
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   10cd2:	df 92       	push	r13
   10cd4:	cf 92       	push	r12
   10cd6:	1f 92       	push	r1
   10cd8:	5f 92       	push	r5
   10cda:	4f 92       	push	r4
   10cdc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
                continue;
   10ce0:	0f 90       	pop	r0
   10ce2:	0f 90       	pop	r0
   10ce4:	0f 90       	pop	r0
   10ce6:	0f 90       	pop	r0
   10ce8:	0f 90       	pop	r0
        if(!dirp)
        {
            printf("opendir failed\n");
            return(0);
        }
        while ( (de = readdir(dirp)) ) 
   10cea:	c5 01       	movw	r24, r10
   10cec:	0e 94 a8 7b 	call	0xf750	; 0xf750 <readdir>
   10cf0:	6c 01       	movw	r12, r24
   10cf2:	89 2b       	or	r24, r25
   10cf4:	f1 f6       	brne	.-68     	; 0x10cb2 <ls+0x15e>
#ifdef ESP8266
            optimistic_yield(1000);
            wdt_reset();
#endif
        }
        closedir(dirp);
   10cf6:	c5 01       	movw	r24, r10
   10cf8:	0e 94 6f 7b 	call	0xf6de	; 0xf6de <closedir>
        break;
   10cfc:	1f c0       	rjmp	.+62     	; 0x10d3c <ls+0x1e8>
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
                continue;
            }
            if(!MATCH(fullpath,"/") )
   10cfe:	61 ea       	ldi	r22, 0xA1	; 161
   10d00:	78 e0       	ldi	r23, 0x08	; 8
   10d02:	c8 01       	movw	r24, r16
   10d04:	0e 94 36 31 	call	0x626c	; 0x626c <MATCH>
   10d08:	89 2b       	or	r24, r25
   10d0a:	29 f4       	brne	.+10     	; 0x10d16 <ls+0x1c2>
            {
                strcat(fullpath,"/");
   10d0c:	61 ea       	ldi	r22, 0xA1	; 161
   10d0e:	78 e0       	ldi	r23, 0x08	; 8
   10d10:	c8 01       	movw	r24, r16
   10d12:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <strcat>
            }
            strcat(fullpath,de->d_name);
   10d16:	b6 01       	movw	r22, r12
   10d18:	c8 01       	movw	r24, r16
   10d1a:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <strcat>
            files +=ls_info(fullpath,verbose);
   10d1e:	b4 01       	movw	r22, r8
   10d20:	c8 01       	movw	r24, r16
   10d22:	5b de       	rcall	.-842    	; 0x109da <ls_info>
   10d24:	e8 0e       	add	r14, r24
   10d26:	f9 1e       	adc	r15, r25
            // restore path
            fullpath[len] = 0;
   10d28:	cf 5c       	subi	r28, 0xCF	; 207
   10d2a:	de 4f       	sbci	r29, 0xFE	; 254
   10d2c:	e8 81       	ld	r30, Y
   10d2e:	f9 81       	ldd	r31, Y+1	; 0x01
   10d30:	c1 53       	subi	r28, 0x31	; 49
   10d32:	d1 40       	sbci	r29, 0x01	; 1
   10d34:	10 82       	st	Z, r1
   10d36:	d9 cf       	rjmp	.-78     	; 0x10cea <ls+0x196>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   10d38:	e1 2c       	mov	r14, r1
   10d3a:	f1 2c       	mov	r15, r1
#endif
        }
        closedir(dirp);
        break;
    }
    printf("Files: %d\n", (int)files);
   10d3c:	ff 92       	push	r15
   10d3e:	ef 92       	push	r14
   10d40:	8c ed       	ldi	r24, 0xDC	; 220
   10d42:	9c e0       	ldi	r25, 0x0C	; 12
   10d44:	1f 92       	push	r1
   10d46:	9f 93       	push	r25
   10d48:	8f 93       	push	r24
   10d4a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    return(files);
   10d4e:	0f 90       	pop	r0
   10d50:	0f 90       	pop	r0
   10d52:	0f 90       	pop	r0
   10d54:	0f 90       	pop	r0
   10d56:	0f 90       	pop	r0
}
   10d58:	c7 01       	movw	r24, r14
   10d5a:	ce 5c       	subi	r28, 0xCE	; 206
   10d5c:	de 4f       	sbci	r29, 0xFE	; 254
   10d5e:	0f b6       	in	r0, 0x3f	; 63
   10d60:	f8 94       	cli
   10d62:	de bf       	out	0x3e, r29	; 62
   10d64:	0f be       	out	0x3f, r0	; 63
   10d66:	cd bf       	out	0x3d, r28	; 61
   10d68:	df 91       	pop	r29
   10d6a:	cf 91       	pop	r28
   10d6c:	1f 91       	pop	r17
   10d6e:	0f 91       	pop	r16
   10d70:	ff 90       	pop	r15
   10d72:	ef 90       	pop	r14
   10d74:	df 90       	pop	r13
   10d76:	cf 90       	pop	r12
   10d78:	bf 90       	pop	r11
   10d7a:	af 90       	pop	r10
   10d7c:	9f 90       	pop	r9
   10d7e:	8f 90       	pop	r8
   10d80:	6f 90       	pop	r6
   10d82:	5f 90       	pop	r5
   10d84:	4f 90       	pop	r4
   10d86:	3f 90       	pop	r3
   10d88:	2f 90       	pop	r2
   10d8a:	08 95       	ret

00010d8c <logfile>:
/// @param[in] name: name of file to create.
/// @param[in] str: string containing file contents.
/// @return  size of string, or 0 on error
MEMSPACE
long logfile(char *name, char *str)
{
   10d8c:	cf 92       	push	r12
   10d8e:	df 92       	push	r13
   10d90:	ef 92       	push	r14
   10d92:	ff 92       	push	r15
   10d94:	cf 93       	push	r28
   10d96:	df 93       	push	r29
   10d98:	f8 2e       	mov	r15, r24
   10d9a:	e9 2e       	mov	r14, r25
   10d9c:	eb 01       	movw	r28, r22
    long size = 0;
    FILE *fo;

    fo = fopen(name,"ab");
   10d9e:	61 e1       	ldi	r22, 0x11	; 17
   10da0:	79 e0       	ldi	r23, 0x09	; 9
   10da2:	3e db       	rcall	.-2436   	; 0x10420 <fopen>
    if (fo)
   10da4:	89 2b       	or	r24, r25
   10da6:	79 f0       	breq	.+30     	; 0x10dc6 <logfile+0x3a>
    {
        printf("Can't open: %s\n", name);
   10da8:	ef 92       	push	r14
   10daa:	ff 92       	push	r15
   10dac:	8c ec       	ldi	r24, 0xCC	; 204
   10dae:	9c e0       	ldi	r25, 0x0C	; 12
   10db0:	1f 92       	push	r1
   10db2:	9f 93       	push	r25
   10db4:	8f 93       	push	r24
   10db6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return(0);
   10dba:	0f 90       	pop	r0
   10dbc:	0f 90       	pop	r0
   10dbe:	0f 90       	pop	r0
   10dc0:	0f 90       	pop	r0
   10dc2:	0f 90       	pop	r0
   10dc4:	22 c0       	rjmp	.+68     	; 0x10e0a <logfile+0x7e>
    }

    size = strlen(str);
   10dc6:	fe 01       	movw	r30, r28
   10dc8:	01 90       	ld	r0, Z+
   10dca:	00 20       	and	r0, r0
   10dcc:	e9 f7       	brne	.-6      	; 0x10dc8 <logfile+0x3c>
   10dce:	31 97       	sbiw	r30, 0x01	; 1
   10dd0:	af 01       	movw	r20, r30
   10dd2:	4c 1b       	sub	r20, r28
   10dd4:	5d 0b       	sbc	r21, r29
   10dd6:	6a 01       	movw	r12, r20
   10dd8:	e1 2c       	mov	r14, r1
   10dda:	f1 2c       	mov	r15, r1
    if( fwrite(str,1,size,fo) < size)
   10ddc:	20 e0       	ldi	r18, 0x00	; 0
   10dde:	30 e0       	ldi	r19, 0x00	; 0
   10de0:	61 e0       	ldi	r22, 0x01	; 1
   10de2:	70 e0       	ldi	r23, 0x00	; 0
   10de4:	ce 01       	movw	r24, r28
   10de6:	44 d9       	rcall	.-3448   	; 0x10070 <fwrite>
   10de8:	a0 e0       	ldi	r26, 0x00	; 0
   10dea:	b0 e0       	ldi	r27, 0x00	; 0
   10dec:	8c 15       	cp	r24, r12
   10dee:	9d 05       	cpc	r25, r13
   10df0:	ae 05       	cpc	r26, r14
   10df2:	bf 05       	cpc	r27, r15
   10df4:	7c f4       	brge	.+30     	; 0x10e14 <logfile+0x88>
    {
        printf("Write error\n");
   10df6:	8f eb       	ldi	r24, 0xBF	; 191
   10df8:	9c e0       	ldi	r25, 0x0C	; 12
   10dfa:	1f 92       	push	r1
   10dfc:	9f 93       	push	r25
   10dfe:	8f 93       	push	r24
   10e00:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   10e04:	0f 90       	pop	r0
   10e06:	0f 90       	pop	r0
   10e08:	0f 90       	pop	r0
   10e0a:	60 e0       	ldi	r22, 0x00	; 0
   10e0c:	70 e0       	ldi	r23, 0x00	; 0
   10e0e:	80 e0       	ldi	r24, 0x00	; 0
   10e10:	90 e0       	ldi	r25, 0x00	; 0
        return(0);
    }
    fclose(fo);
   10e12:	05 c0       	rjmp	.+10     	; 0x10e1e <logfile+0x92>
   10e14:	80 e0       	ldi	r24, 0x00	; 0
   10e16:	90 e0       	ldi	r25, 0x00	; 0
    return(size);
   10e18:	ad d9       	rcall	.-3238   	; 0x10174 <fclose>
   10e1a:	b6 01       	movw	r22, r12
}
   10e1c:	c7 01       	movw	r24, r14
   10e1e:	df 91       	pop	r29
   10e20:	cf 91       	pop	r28
   10e22:	ff 90       	pop	r15
   10e24:	ef 90       	pop	r14
   10e26:	df 90       	pop	r13
   10e28:	cf 90       	pop	r12
   10e2a:	08 95       	ret

00010e2c <sum>:
/// @brief sum of a file with 16bit hex and integer results
/// @param[in] *name: file to sum
/// @retrun void
MEMSPACE
uint16_t sum(char *name)
{
   10e2c:	a0 e0       	ldi	r26, 0x00	; 0
   10e2e:	b1 e0       	ldi	r27, 0x01	; 1
   10e30:	ec e1       	ldi	r30, 0x1C	; 28
   10e32:	f7 e8       	ldi	r31, 0x87	; 135
   10e34:	0c 94 99 e9 	jmp	0x1d332	; 0x1d332 <__prologue_saves__+0x14>
   10e38:	18 2f       	mov	r17, r24
   10e3a:	09 2f       	mov	r16, r25
    FILE *fi;
    uint16_t sum;
    int i,len;
    uint8_t buffer[256];

    fi=fopen(name,"rb");
   10e3c:	65 ef       	ldi	r22, 0xF5	; 245
   10e3e:	78 e0       	ldi	r23, 0x08	; 8
   10e40:	ef da       	rcall	.-2594   	; 0x10420 <fopen>
   10e42:	7c 01       	movw	r14, r24
    if(fi == NULL) 
   10e44:	89 2b       	or	r24, r25
   10e46:	89 f4       	brne	.+34     	; 0x10e6a <sum+0x3e>
    {
        printf("Can' open: %s\n", name);
   10e48:	0f 93       	push	r16
   10e4a:	1f 93       	push	r17
   10e4c:	80 eb       	ldi	r24, 0xB0	; 176
   10e4e:	9c e0       	ldi	r25, 0x0C	; 12
   10e50:	1f 92       	push	r1
   10e52:	9f 93       	push	r25
   10e54:	8f 93       	push	r24
   10e56:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   10e5a:	0f 90       	pop	r0
   10e5c:	0f 90       	pop	r0
   10e5e:	0f 90       	pop	r0
   10e60:	0f 90       	pop	r0
   10e62:	0f 90       	pop	r0
   10e64:	80 e0       	ldi	r24, 0x00	; 0
   10e66:	90 e0       	ldi	r25, 0x00	; 0
   10e68:	2d c0       	rjmp	.+90     	; 0x10ec4 <sum+0x98>
   10e6a:	00 e0       	ldi	r16, 0x00	; 0
   10e6c:	10 e0       	ldi	r17, 0x00	; 0
        return(0);
    }
    sum = 0;
    while( (len = fread(buffer,1, 256, fi)) > 0) 
   10e6e:	ce 01       	movw	r24, r28
   10e70:	01 96       	adiw	r24, 0x01	; 1
   10e72:	6c 01       	movw	r12, r24
   10e74:	97 01       	movw	r18, r14
   10e76:	40 e0       	ldi	r20, 0x00	; 0
   10e78:	51 e0       	ldi	r21, 0x01	; 1
   10e7a:	61 e0       	ldi	r22, 0x01	; 1
   10e7c:	70 e0       	ldi	r23, 0x00	; 0
   10e7e:	c6 01       	movw	r24, r12
   10e80:	25 d8       	rcall	.-4022   	; 0xfecc <fread>
   10e82:	18 16       	cp	r1, r24
   10e84:	19 06       	cpc	r1, r25
   10e86:	5c f4       	brge	.+22     	; 0x10e9e <sum+0x72>
   10e88:	f6 01       	movw	r30, r12
    {
        for(i=0;i<len;++i) 
            sum += (0xff & buffer[i]);
   10e8a:	21 91       	ld	r18, Z+
   10e8c:	02 0f       	add	r16, r18
   10e8e:	11 1d       	adc	r17, r1
        return(0);
    }
    sum = 0;
    while( (len = fread(buffer,1, 256, fi)) > 0) 
    {
        for(i=0;i<len;++i) 
   10e90:	9f 01       	movw	r18, r30
   10e92:	2c 19       	sub	r18, r12
   10e94:	3d 09       	sbc	r19, r13
   10e96:	28 17       	cp	r18, r24
   10e98:	39 07       	cpc	r19, r25
   10e9a:	bc f3       	brlt	.-18     	; 0x10e8a <sum+0x5e>
#ifdef ESP8266
            optimistic_yield(1000);
            wdt_reset();
#endif
    }
    fclose(fi);
   10e9c:	eb cf       	rjmp	.-42     	; 0x10e74 <sum+0x48>
   10e9e:	c7 01       	movw	r24, r14
   10ea0:	69 d9       	rcall	.-3374   	; 0x10174 <fclose>
    printf("Sum: %04Xh, %5u\n", (int) sum, (unsigned int) sum);
   10ea2:	1f 93       	push	r17
   10ea4:	0f 93       	push	r16
   10ea6:	1f 93       	push	r17
   10ea8:	0f 93       	push	r16
   10eaa:	8f e9       	ldi	r24, 0x9F	; 159
   10eac:	9c e0       	ldi	r25, 0x0C	; 12
   10eae:	1f 92       	push	r1
   10eb0:	9f 93       	push	r25
   10eb2:	8f 93       	push	r24
   10eb4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    return(sum);
   10eb8:	0f b6       	in	r0, 0x3f	; 63
   10eba:	f8 94       	cli
   10ebc:	de bf       	out	0x3e, r29	; 62
   10ebe:	0f be       	out	0x3f, r0	; 63
   10ec0:	cd bf       	out	0x3d, r28	; 61
   10ec2:	c8 01       	movw	r24, r16
}
   10ec4:	d3 95       	inc	r29
   10ec6:	e8 e0       	ldi	r30, 0x08	; 8
   10ec8:	0c 94 b5 e9 	jmp	0x1d36a	; 0x1d36a <__epilogue_restores__+0x14>

00010ecc <upload>:
/// First blank line exits capture
/// @param[in] *name: file to save on sdcard
/// @retrun void
MEMSPACE
long upload(char *name)
{
   10ecc:	a0 e0       	ldi	r26, 0x00	; 0
   10ece:	b1 e0       	ldi	r27, 0x01	; 1
   10ed0:	ec e6       	ldi	r30, 0x6C	; 108
   10ed2:	f7 e8       	ldi	r31, 0x87	; 135
   10ed4:	0c 94 95 e9 	jmp	0x1d32a	; 0x1d32a <__prologue_saves__+0xc>
   10ed8:	18 2f       	mov	r17, r24
   10eda:	09 2f       	mov	r16, r25
    int len,len2;
    long size = 0;
    FILE *fp;
    char buffer[256];

    fp = fopen(name, "wb");
   10edc:	63 e0       	ldi	r22, 0x03	; 3
   10ede:	79 e0       	ldi	r23, 0x09	; 9
   10ee0:	9f da       	rcall	.-2754   	; 0x10420 <fopen>
   10ee2:	6c 01       	movw	r12, r24
    if( fp == NULL)
   10ee4:	89 2b       	or	r24, r25
   10ee6:	39 f0       	breq	.+14     	; 0x10ef6 <upload+0x2a>
   10ee8:	81 2c       	mov	r8, r1
   10eea:	91 2c       	mov	r9, r1
   10eec:	54 01       	movw	r10, r8
        return(0);
    }

    while(1)
    {
        if(fgets(buffer,254,stdin) == NULL)
   10eee:	ce 01       	movw	r24, r28
   10ef0:	01 96       	adiw	r24, 0x01	; 1
   10ef2:	7c 01       	movw	r14, r24
   10ef4:	3c c0       	rjmp	.+120    	; 0x10f6e <upload+0xa2>
    char buffer[256];

    fp = fopen(name, "wb");
    if( fp == NULL)
    {
        printf("Can' open: %s\n", name);
   10ef6:	0f 93       	push	r16
   10ef8:	1f 93       	push	r17
   10efa:	80 e9       	ldi	r24, 0x90	; 144
   10efc:	9c e0       	ldi	r25, 0x0C	; 12
   10efe:	1f 92       	push	r1
   10f00:	9f 93       	push	r25
   10f02:	8f 93       	push	r24
   10f04:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return(0);
   10f08:	0f 90       	pop	r0
   10f0a:	0f 90       	pop	r0
   10f0c:	0f 90       	pop	r0
   10f0e:	0f 90       	pop	r0
   10f10:	0f 90       	pop	r0
   10f12:	60 e0       	ldi	r22, 0x00	; 0
   10f14:	70 e0       	ldi	r23, 0x00	; 0
   10f16:	80 e0       	ldi	r24, 0x00	; 0
   10f18:	90 e0       	ldi	r25, 0x00	; 0
   10f1a:	3a c0       	rjmp	.+116    	; 0x10f90 <upload+0xc4>

    while(1)
    {
        if(fgets(buffer,254,stdin) == NULL)
            break;
        len = strlen(buffer);
   10f1c:	f7 01       	movw	r30, r14
   10f1e:	01 90       	ld	r0, Z+
   10f20:	00 20       	and	r0, r0
   10f22:	e9 f7       	brne	.-6      	; 0x10f1e <upload+0x52>
   10f24:	31 97       	sbiw	r30, 0x01	; 1
   10f26:	ee 19       	sub	r30, r14
   10f28:	ff 09       	sbc	r31, r15
        if(len < 1)
   10f2a:	1e 16       	cp	r1, r30
   10f2c:	1f 06       	cpc	r1, r31
   10f2e:	54 f5       	brge	.+84     	; 0x10f84 <upload+0xb8>
            break;
        strcat(buffer,"\n");
   10f30:	66 e3       	ldi	r22, 0x36	; 54
   10f32:	7c e0       	ldi	r23, 0x0C	; 12
   10f34:	c7 01       	movw	r24, r14
   10f36:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <strcat>
        len = strlen(buffer);
   10f3a:	f7 01       	movw	r30, r14
   10f3c:	01 90       	ld	r0, Z+
   10f3e:	00 20       	and	r0, r0
   10f40:	e9 f7       	brne	.-6      	; 0x10f3c <upload+0x70>
   10f42:	31 97       	sbiw	r30, 0x01	; 1
   10f44:	8f 01       	movw	r16, r30
   10f46:	0e 19       	sub	r16, r14
   10f48:	1f 09       	sbc	r17, r15
        len2 = fwrite(buffer, 1, len,fp);
   10f4a:	96 01       	movw	r18, r12
   10f4c:	a8 01       	movw	r20, r16
   10f4e:	61 e0       	ldi	r22, 0x01	; 1
   10f50:	70 e0       	ldi	r23, 0x00	; 0
   10f52:	c7 01       	movw	r24, r14
   10f54:	8d d8       	rcall	.-3814   	; 0x10070 <fwrite>
        if(len != len2)
   10f56:	08 17       	cp	r16, r24
   10f58:	19 07       	cpc	r17, r25
   10f5a:	a1 f4       	brne	.+40     	; 0x10f84 <upload+0xb8>
            break;
        size += len;
   10f5c:	a8 01       	movw	r20, r16
   10f5e:	01 2e       	mov	r0, r17
   10f60:	00 0c       	add	r0, r0
   10f62:	66 0b       	sbc	r22, r22
   10f64:	77 0b       	sbc	r23, r23
   10f66:	84 0e       	add	r8, r20
   10f68:	95 1e       	adc	r9, r21
   10f6a:	a6 1e       	adc	r10, r22
   10f6c:	b7 1e       	adc	r11, r23
        return(0);
    }

    while(1)
    {
        if(fgets(buffer,254,stdin) == NULL)
   10f6e:	40 91 0a 1d 	lds	r20, 0x1D0A	; 0x801d0a <__iob>
   10f72:	50 91 0b 1d 	lds	r21, 0x1D0B	; 0x801d0b <__iob+0x1>
   10f76:	6e ef       	ldi	r22, 0xFE	; 254
   10f78:	70 e0       	ldi	r23, 0x00	; 0
   10f7a:	c7 01       	movw	r24, r14
   10f7c:	0e 94 20 79 	call	0xf240	; 0xf240 <fgets>
   10f80:	89 2b       	or	r24, r25
        if(len != len2)
            break;
        size += len;
    }

    fclose(fp);
   10f82:	61 f6       	brne	.-104    	; 0x10f1c <upload+0x50>
   10f84:	c6 01       	movw	r24, r12
   10f86:	f6 d8       	rcall	.-3604   	; 0x10174 <fclose>
    sync();
   10f88:	0e 94 b5 7f 	call	0xff6a	; 0xff6a <sync>
    return(size);
   10f8c:	b4 01       	movw	r22, r8
   10f8e:	c5 01       	movw	r24, r10
}
   10f90:	d3 95       	inc	r29
   10f92:	ec e0       	ldi	r30, 0x0C	; 12
   10f94:	0c 94 b1 e9 	jmp	0x1d362	; 0x1d362 <__epilogue_restores__+0xc>

00010f98 <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   10f98:	a0 e0       	ldi	r26, 0x00	; 0
   10f9a:	b1 e0       	ldi	r27, 0x01	; 1
   10f9c:	e2 ed       	ldi	r30, 0xD2	; 210
   10f9e:	f7 e8       	ldi	r31, 0x87	; 135
   10fa0:	0c 94 91 e9 	jmp	0x1d322	; 0x1d322 <__prologue_saves__+0x4>
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   10fa4:	fb 01       	movw	r30, r22
   10fa6:	c0 80       	ld	r12, Z
   10fa8:	d1 80       	ldd	r13, Z+1	; 0x01

    if(!ptr)
   10faa:	c1 14       	cp	r12, r1
   10fac:	d1 04       	cpc	r13, r1
   10fae:	19 f4       	brne	.+6      	; 0x10fb6 <posix_tests+0x1e>
        return(0);
   10fb0:	80 e0       	ldi	r24, 0x00	; 0
   10fb2:	90 e0       	ldi	r25, 0x00	; 0
   10fb4:	2d c2       	rjmp	.+1114   	; 0x11410 <posix_tests+0x478>
   10fb6:	4b 01       	movw	r8, r22
   10fb8:	8c 01       	movw	r16, r24

    if( MATCH(ptr,"posix") )
   10fba:	61 ea       	ldi	r22, 0xA1	; 161
   10fbc:	7b e0       	ldi	r23, 0x0B	; 11
   10fbe:	c6 01       	movw	r24, r12
   10fc0:	0e 94 36 31 	call	0x626c	; 0x626c <MATCH>
   10fc4:	89 2b       	or	r24, r25
   10fc6:	a9 f0       	breq	.+42     	; 0x10ff2 <posix_tests+0x5a>
    {
        ptr = argv[ind++];
   10fc8:	f4 01       	movw	r30, r8
   10fca:	c2 80       	ldd	r12, Z+2	; 0x02
   10fcc:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   10fce:	c1 14       	cp	r12, r1
   10fd0:	d1 04       	cpc	r13, r1
   10fd2:	21 f4       	brne	.+8      	; 0x10fdc <posix_tests+0x44>
        {
            posix_help(1);
   10fd4:	81 e0       	ldi	r24, 0x01	; 1
   10fd6:	90 e0       	ldi	r25, 0x00	; 0
   10fd8:	50 da       	rcall	.-2912   	; 0x1047a <posix_help>
   10fda:	18 c2       	rjmp	.+1072   	; 0x1140c <posix_tests+0x474>
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   10fdc:	63 ea       	ldi	r22, 0xA3	; 163
   10fde:	76 e1       	ldi	r23, 0x16	; 22
   10fe0:	c6 01       	movw	r24, r12
   10fe2:	0e 94 36 31 	call	0x626c	; 0x626c <MATCH>
   10fe6:	89 2b       	or	r24, r25
   10fe8:	a9 f7       	brne	.-22     	; 0x10fd4 <posix_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   10fea:	f2 e0       	ldi	r31, 0x02	; 2
   10fec:	6f 2e       	mov	r6, r31
   10fee:	71 2c       	mov	r7, r1
   10ff0:	03 c0       	rjmp	.+6      	; 0x10ff8 <posix_tests+0x60>
{
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   10ff2:	66 24       	eor	r6, r6
   10ff4:	63 94       	inc	r6
   10ff6:	71 2c       	mov	r7, r1
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   10ff8:	73 01       	movw	r14, r6
   10ffa:	ff ef       	ldi	r31, 0xFF	; 255
   10ffc:	ef 1a       	sub	r14, r31
   10ffe:	ff 0a       	sbc	r15, r31
   11000:	98 01       	movw	r18, r16
   11002:	a7 01       	movw	r20, r14
   11004:	67 ea       	ldi	r22, 0xA7	; 167
   11006:	7b e0       	ldi	r23, 0x0B	; 11
   11008:	c6 01       	movw	r24, r12
   1100a:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   1100e:	89 2b       	or	r24, r25
   11010:	a1 f1       	breq	.+104    	; 0x1107a <posix_tests+0xe2>
   11012:	73 01       	movw	r14, r6
   11014:	ee 0c       	add	r14, r14
   11016:	ff 1c       	adc	r15, r15
   11018:	e8 0c       	add	r14, r8
   1101a:	f9 1c       	adc	r15, r9
   1101c:	57 01       	movw	r10, r14
   1101e:	47 01       	movw	r8, r14
   11020:	63 01       	movw	r12, r6
   11022:	41 2c       	mov	r4, r1
   11024:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   11026:	c0 16       	cp	r12, r16
   11028:	d1 06       	cpc	r13, r17
   1102a:	1c f5       	brge	.+70     	; 0x11072 <posix_tests+0xda>
        {
            if(MATCH(argv[i],"-p"))
   1102c:	6b ea       	ldi	r22, 0xAB	; 171
   1102e:	7b e0       	ldi	r23, 0x0B	; 11
   11030:	f4 01       	movw	r30, r8
   11032:	81 91       	ld	r24, Z+
   11034:	91 91       	ld	r25, Z+
   11036:	4f 01       	movw	r8, r30
   11038:	0e 94 36 31 	call	0x626c	; 0x626c <MATCH>
   1103c:	89 2b       	or	r24, r25
   1103e:	19 f0       	breq	.+6      	; 0x11046 <posix_tests+0xae>
                page = 1;
   11040:	44 24       	eor	r4, r4
   11042:	43 94       	inc	r4
   11044:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   11046:	ff ef       	ldi	r31, 0xFF	; 255
   11048:	cf 1a       	sub	r12, r31
   1104a:	df 0a       	sbc	r13, r31
   1104c:	ec cf       	rjmp	.-40     	; 0x11026 <posix_tests+0x8e>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   1104e:	6b ea       	ldi	r22, 0xAB	; 171
   11050:	7b e0       	ldi	r23, 0x0B	; 11
   11052:	f5 01       	movw	r30, r10
   11054:	81 91       	ld	r24, Z+
   11056:	91 91       	ld	r25, Z+
   11058:	5f 01       	movw	r10, r30
   1105a:	0e 94 36 31 	call	0x626c	; 0x626c <MATCH>
   1105e:	89 2b       	or	r24, r25
   11060:	29 f4       	brne	.+10     	; 0x1106c <posix_tests+0xd4>
                cat(argv[ind], page);
   11062:	b2 01       	movw	r22, r4
   11064:	f7 01       	movw	r30, r14
   11066:	80 81       	ld	r24, Z
   11068:	91 81       	ldd	r25, Z+1	; 0x01
   1106a:	36 db       	rcall	.-2452   	; 0x106d8 <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   1106c:	ff ef       	ldi	r31, 0xFF	; 255
   1106e:	6f 1a       	sub	r6, r31
   11070:	7f 0a       	sbc	r7, r31
   11072:	60 16       	cp	r6, r16
   11074:	71 06       	cpc	r7, r17
   11076:	5c f3       	brlt	.-42     	; 0x1104e <posix_tests+0xb6>
   11078:	c9 c1       	rjmp	.+914    	; 0x1140c <posix_tests+0x474>
                cat(argv[ind], page);
        }
        return(1);
    }

    if (MATCHARGS(ptr,"chmod",(ind+2),argc))
   1107a:	53 01       	movw	r10, r6
   1107c:	82 e0       	ldi	r24, 0x02	; 2
   1107e:	a8 0e       	add	r10, r24
   11080:	b1 1c       	adc	r11, r1
   11082:	98 01       	movw	r18, r16
   11084:	a5 01       	movw	r20, r10
   11086:	6e ea       	ldi	r22, 0xAE	; 174
   11088:	7b e0       	ldi	r23, 0x0B	; 11
   1108a:	c6 01       	movw	r24, r12
   1108c:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   11090:	89 2b       	or	r24, r25
   11092:	b1 f0       	breq	.+44     	; 0x110c0 <posix_tests+0x128>
    {
        chmod( argv[ind],strtol(argv[ind+1],NULL,8));
   11094:	ee 0c       	add	r14, r14
   11096:	ff 1c       	adc	r15, r15
   11098:	e8 0c       	add	r14, r8
   1109a:	f9 1c       	adc	r15, r9
   1109c:	48 e0       	ldi	r20, 0x08	; 8
   1109e:	50 e0       	ldi	r21, 0x00	; 0
   110a0:	60 e0       	ldi	r22, 0x00	; 0
   110a2:	70 e0       	ldi	r23, 0x00	; 0
   110a4:	f7 01       	movw	r30, r14
   110a6:	80 81       	ld	r24, Z
   110a8:	91 81       	ldd	r25, Z+1	; 0x01
   110aa:	0e 94 49 45 	call	0x8a92	; 0x8a92 <strtol>
   110ae:	ab 01       	movw	r20, r22
   110b0:	bc 01       	movw	r22, r24
   110b2:	f7 01       	movw	r30, r14
   110b4:	32 97       	sbiw	r30, 0x02	; 2
   110b6:	80 81       	ld	r24, Z
   110b8:	91 81       	ldd	r25, Z+1	; 0x01
   110ba:	0e 94 b3 7a 	call	0xf566	; 0xf566 <chmod>
   110be:	a6 c1       	rjmp	.+844    	; 0x1140c <posix_tests+0x474>
        return(1);
    }


    if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   110c0:	98 01       	movw	r18, r16
   110c2:	a5 01       	movw	r20, r10
   110c4:	64 eb       	ldi	r22, 0xB4	; 180
   110c6:	7b e0       	ldi	r23, 0x0B	; 11
   110c8:	c6 01       	movw	r24, r12
   110ca:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   110ce:	89 2b       	or	r24, r25
   110d0:	61 f0       	breq	.+24     	; 0x110ea <posix_tests+0x152>
    {
        copy(argv[ind],argv[ind+1]);
   110d2:	ee 0c       	add	r14, r14
   110d4:	ff 1c       	adc	r15, r15
   110d6:	f4 01       	movw	r30, r8
   110d8:	ee 0d       	add	r30, r14
   110da:	ff 1d       	adc	r31, r15
   110dc:	60 81       	ld	r22, Z
   110de:	71 81       	ldd	r23, Z+1	; 0x01
   110e0:	32 97       	sbiw	r30, 0x02	; 2
   110e2:	80 81       	ld	r24, Z
   110e4:	91 81       	ldd	r25, Z+1	; 0x01
   110e6:	e5 d9       	rcall	.-3126   	; 0x104b2 <copy>
   110e8:	91 c1       	rjmp	.+802    	; 0x1140c <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   110ea:	98 01       	movw	r18, r16
   110ec:	a7 01       	movw	r20, r14
   110ee:	69 eb       	ldi	r22, 0xB9	; 185
   110f0:	7b e0       	ldi	r23, 0x0B	; 11
   110f2:	c6 01       	movw	r24, r12
   110f4:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   110f8:	89 2b       	or	r24, r25
   110fa:	59 f0       	breq	.+22     	; 0x11112 <posix_tests+0x17a>
    {
        chdir(argv[ind]);
   110fc:	73 01       	movw	r14, r6
   110fe:	ee 0c       	add	r14, r14
   11100:	ff 1c       	adc	r15, r15
   11102:	f4 01       	movw	r30, r8
   11104:	ee 0d       	add	r30, r14
   11106:	ff 1d       	adc	r31, r15
   11108:	80 81       	ld	r24, Z
   1110a:	91 81       	ldd	r25, Z+1	; 0x01
   1110c:	0e 94 94 7a 	call	0xf528	; 0xf528 <chdir>
   11110:	7d c1       	rjmp	.+762    	; 0x1140c <posix_tests+0x474>
        return(1);
    }


    if (MATCHARGS(ptr,"hexdump", (ind + 1), argc))
   11112:	98 01       	movw	r18, r16
   11114:	a7 01       	movw	r20, r14
   11116:	6c eb       	ldi	r22, 0xBC	; 188
   11118:	7b e0       	ldi	r23, 0x0B	; 11
   1111a:	c6 01       	movw	r24, r12
   1111c:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   11120:	89 2b       	or	r24, r25
   11122:	a1 f1       	breq	.+104    	; 0x1118c <posix_tests+0x1f4>
   11124:	73 01       	movw	r14, r6
   11126:	ee 0c       	add	r14, r14
   11128:	ff 1c       	adc	r15, r15
   1112a:	e8 0c       	add	r14, r8
   1112c:	f9 1c       	adc	r15, r9
   1112e:	57 01       	movw	r10, r14
   11130:	47 01       	movw	r8, r14
   11132:	63 01       	movw	r12, r6
   11134:	41 2c       	mov	r4, r1
   11136:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   11138:	c0 16       	cp	r12, r16
   1113a:	d1 06       	cpc	r13, r17
   1113c:	1c f5       	brge	.+70     	; 0x11184 <posix_tests+0x1ec>
        {
            if(MATCH(argv[i],"-p"))
   1113e:	6b ea       	ldi	r22, 0xAB	; 171
   11140:	7b e0       	ldi	r23, 0x0B	; 11
   11142:	f4 01       	movw	r30, r8
   11144:	81 91       	ld	r24, Z+
   11146:	91 91       	ld	r25, Z+
   11148:	4f 01       	movw	r8, r30
   1114a:	0e 94 36 31 	call	0x626c	; 0x626c <MATCH>
   1114e:	89 2b       	or	r24, r25
   11150:	19 f0       	breq	.+6      	; 0x11158 <posix_tests+0x1c0>
                page = 1;
   11152:	44 24       	eor	r4, r4
   11154:	43 94       	inc	r4
   11156:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"hexdump", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   11158:	ff ef       	ldi	r31, 0xFF	; 255
   1115a:	cf 1a       	sub	r12, r31
   1115c:	df 0a       	sbc	r13, r31
   1115e:	ec cf       	rjmp	.-40     	; 0x11138 <posix_tests+0x1a0>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   11160:	6b ea       	ldi	r22, 0xAB	; 171
   11162:	7b e0       	ldi	r23, 0x0B	; 11
   11164:	f5 01       	movw	r30, r10
   11166:	81 91       	ld	r24, Z+
   11168:	91 91       	ld	r25, Z+
   1116a:	5f 01       	movw	r10, r30
   1116c:	0e 94 36 31 	call	0x626c	; 0x626c <MATCH>
   11170:	89 2b       	or	r24, r25
   11172:	29 f4       	brne	.+10     	; 0x1117e <posix_tests+0x1e6>
                hexdump(argv[ind], page);
   11174:	b2 01       	movw	r22, r4
   11176:	f7 01       	movw	r30, r14
   11178:	80 81       	ld	r24, Z
   1117a:	91 81       	ldd	r25, Z+1	; 0x01
   1117c:	1a db       	rcall	.-2508   	; 0x107b2 <hexdump>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   1117e:	ff ef       	ldi	r31, 0xFF	; 255
   11180:	6f 1a       	sub	r6, r31
   11182:	7f 0a       	sbc	r7, r31
   11184:	60 16       	cp	r6, r16
   11186:	71 06       	cpc	r7, r17
   11188:	5c f3       	brlt	.-42     	; 0x11160 <posix_tests+0x1c8>
   1118a:	40 c1       	rjmp	.+640    	; 0x1140c <posix_tests+0x474>
                hexdump(argv[ind], page);
        }
        return(1);
    }

    if (MATCHARGS(ptr,"log", (ind + 2), argc))
   1118c:	98 01       	movw	r18, r16
   1118e:	a5 01       	movw	r20, r10
   11190:	64 ec       	ldi	r22, 0xC4	; 196
   11192:	7b e0       	ldi	r23, 0x0B	; 11
   11194:	c6 01       	movw	r24, r12
   11196:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   1119a:	89 2b       	or	r24, r25
   1119c:	61 f0       	breq	.+24     	; 0x111b6 <posix_tests+0x21e>
    {
        logfile(argv[ind],argv[ind+1]);
   1119e:	ee 0c       	add	r14, r14
   111a0:	ff 1c       	adc	r15, r15
   111a2:	f4 01       	movw	r30, r8
   111a4:	ee 0d       	add	r30, r14
   111a6:	ff 1d       	adc	r31, r15
   111a8:	60 81       	ld	r22, Z
   111aa:	71 81       	ldd	r23, Z+1	; 0x01
   111ac:	32 97       	sbiw	r30, 0x02	; 2
   111ae:	80 81       	ld	r24, Z
   111b0:	91 81       	ldd	r25, Z+1	; 0x01
   111b2:	ec dd       	rcall	.-1064   	; 0x10d8c <logfile>
   111b4:	2b c1       	rjmp	.+598    	; 0x1140c <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
   111b6:	98 01       	movw	r18, r16
   111b8:	a3 01       	movw	r20, r6
   111ba:	61 ed       	ldi	r22, 0xD1	; 209
   111bc:	78 e0       	ldi	r23, 0x08	; 8
   111be:	c6 01       	movw	r24, r12
   111c0:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   111c4:	89 2b       	or	r24, r25
   111c6:	69 f1       	breq	.+90     	; 0x11222 <posix_tests+0x28a>
   111c8:	73 01       	movw	r14, r6
   111ca:	ee 0c       	add	r14, r14
   111cc:	ff 1c       	adc	r15, r15
   111ce:	e8 0c       	add	r14, r8
   111d0:	f9 1c       	adc	r15, r9
   111d2:	c1 2c       	mov	r12, r1
   111d4:	d1 2c       	mov	r13, r1
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   111d6:	c6 01       	movw	r24, r12
   111d8:	86 0d       	add	r24, r6
   111da:	97 1d       	adc	r25, r7
   111dc:	80 17       	cp	r24, r16
   111de:	91 07       	cpc	r25, r17
   111e0:	b4 f4       	brge	.+44     	; 0x1120e <posix_tests+0x276>
        {
            if(!MATCH(argv[i],"-l"))
   111e2:	68 ec       	ldi	r22, 0xC8	; 200
   111e4:	7b e0       	ldi	r23, 0x0B	; 11
   111e6:	f7 01       	movw	r30, r14
   111e8:	80 81       	ld	r24, Z
   111ea:	91 81       	ldd	r25, Z+1	; 0x01
   111ec:	0e 94 36 31 	call	0x626c	; 0x626c <MATCH>
   111f0:	89 2b       	or	r24, r25
                ls(argv[i],1);
   111f2:	31 f4       	brne	.+12     	; 0x11200 <posix_tests+0x268>
   111f4:	61 e0       	ldi	r22, 0x01	; 1
   111f6:	70 e0       	ldi	r23, 0x00	; 0
   111f8:	f7 01       	movw	r30, r14
   111fa:	80 81       	ld	r24, Z
   111fc:	91 81       	ldd	r25, Z+1	; 0x01
            ++args;
   111fe:	aa dc       	rcall	.-1708   	; 0x10b54 <ls>
   11200:	ff ef       	ldi	r31, 0xFF	; 255
   11202:	cf 1a       	sub	r12, r31
   11204:	df 0a       	sbc	r13, r31
   11206:	82 e0       	ldi	r24, 0x02	; 2
   11208:	e8 0e       	add	r14, r24
   1120a:	f1 1c       	adc	r15, r1
        }
        if(!args)
   1120c:	e4 cf       	rjmp	.-56     	; 0x111d6 <posix_tests+0x23e>
   1120e:	c1 14       	cp	r12, r1
   11210:	d1 04       	cpc	r13, r1
        {
            ls("",1);
   11212:	09 f0       	breq	.+2      	; 0x11216 <posix_tests+0x27e>
   11214:	fb c0       	rjmp	.+502    	; 0x1140c <posix_tests+0x474>
   11216:	61 e0       	ldi	r22, 0x01	; 1
   11218:	70 e0       	ldi	r23, 0x00	; 0
   1121a:	87 e3       	ldi	r24, 0x37	; 55
   1121c:	9c e0       	ldi	r25, 0x0C	; 12
   1121e:	9a dc       	rcall	.-1740   	; 0x10b54 <ls>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mkfs", (ind + 1), argc))
   11220:	f5 c0       	rjmp	.+490    	; 0x1140c <posix_tests+0x474>
   11222:	98 01       	movw	r18, r16
   11224:	a7 01       	movw	r20, r14
   11226:	6b ec       	ldi	r22, 0xCB	; 203
   11228:	7b e0       	ldi	r23, 0x0B	; 11
   1122a:	c6 01       	movw	r24, r12
   1122c:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   11230:	89 2b       	or	r24, r25
    {

        mkfs(argv[ind++]);
   11232:	59 f0       	breq	.+22     	; 0x1124a <posix_tests+0x2b2>
   11234:	73 01       	movw	r14, r6
   11236:	ee 0c       	add	r14, r14
   11238:	ff 1c       	adc	r15, r15
   1123a:	f4 01       	movw	r30, r8
   1123c:	ee 0d       	add	r30, r14
   1123e:	ff 1d       	adc	r31, r15
   11240:	80 81       	ld	r24, Z
   11242:	91 81       	ldd	r25, Z+1	; 0x01
   11244:	0e 94 6c 7c 	call	0xf8d8	; 0xf8d8 <mkfs>
        return(1);
    }

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   11248:	e1 c0       	rjmp	.+450    	; 0x1140c <posix_tests+0x474>
   1124a:	98 01       	movw	r18, r16
   1124c:	a7 01       	movw	r20, r14
   1124e:	60 ed       	ldi	r22, 0xD0	; 208
   11250:	7b e0       	ldi	r23, 0x0B	; 11
   11252:	c6 01       	movw	r24, r12
   11254:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   11258:	89 2b       	or	r24, r25
    {
        int mode = 0777;
        if((ind+2) <= argc)
   1125a:	19 f1       	breq	.+70     	; 0x112a2 <posix_tests+0x30a>
   1125c:	e0 16       	cp	r14, r16
   1125e:	f1 06       	cpc	r15, r17
        {
            mode = strtol(argv[ind+1],NULL,8);
   11260:	7c f4       	brge	.+30     	; 0x11280 <posix_tests+0x2e8>
   11262:	ee 0c       	add	r14, r14
   11264:	ff 1c       	adc	r15, r15
   11266:	f4 01       	movw	r30, r8
   11268:	ee 0d       	add	r30, r14
   1126a:	ff 1d       	adc	r31, r15
   1126c:	48 e0       	ldi	r20, 0x08	; 8
   1126e:	50 e0       	ldi	r21, 0x00	; 0
   11270:	60 e0       	ldi	r22, 0x00	; 0
   11272:	70 e0       	ldi	r23, 0x00	; 0
   11274:	80 81       	ld	r24, Z
   11276:	91 81       	ldd	r25, Z+1	; 0x01
   11278:	0e 94 49 45 	call	0x8a92	; 0x8a92 <strtol>
   1127c:	ab 01       	movw	r20, r22
        return(1);
    }

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   1127e:	02 c0       	rjmp	.+4      	; 0x11284 <posix_tests+0x2ec>
   11280:	4f ef       	ldi	r20, 0xFF	; 255
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        mkdir(argv[ind],mode);
   11282:	51 e0       	ldi	r21, 0x01	; 1
   11284:	05 2e       	mov	r0, r21
   11286:	00 0c       	add	r0, r0
   11288:	66 0b       	sbc	r22, r22
   1128a:	77 0b       	sbc	r23, r23
   1128c:	73 01       	movw	r14, r6
   1128e:	ee 0c       	add	r14, r14
   11290:	ff 1c       	adc	r15, r15
   11292:	f4 01       	movw	r30, r8
   11294:	ee 0d       	add	r30, r14
   11296:	ff 1d       	adc	r31, r15
   11298:	80 81       	ld	r24, Z
   1129a:	91 81       	ldd	r25, Z+1	; 0x01
   1129c:	0e 94 01 7b 	call	0xf602	; 0xf602 <mkdir>
        return(1);
    }

    if (MATCHARGS(ptr,"page", (ind + 1), argc))
   112a0:	b5 c0       	rjmp	.+362    	; 0x1140c <posix_tests+0x474>
   112a2:	98 01       	movw	r18, r16
   112a4:	a7 01       	movw	r20, r14
   112a6:	66 ed       	ldi	r22, 0xD6	; 214
   112a8:	7b e0       	ldi	r23, 0x0B	; 11
   112aa:	c6 01       	movw	r24, r12
   112ac:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   112b0:	89 2b       	or	r24, r25
    {
        setpage(atoi(argv[ind]));
   112b2:	79 f0       	breq	.+30     	; 0x112d2 <posix_tests+0x33a>
   112b4:	73 01       	movw	r14, r6
   112b6:	ee 0c       	add	r14, r14
   112b8:	ff 1c       	adc	r15, r15
   112ba:	f4 01       	movw	r30, r8
   112bc:	ee 0d       	add	r30, r14
   112be:	ff 1d       	adc	r31, r15
   112c0:	80 81       	ld	r24, Z
   112c2:	91 81       	ldd	r25, Z+1	; 0x01
   112c4:	0e 94 ad 45 	call	0x8b5a	; 0x8b5a <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   112c8:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <_pagesize+0x1>
   112cc:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <_pagesize>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   112d0:	9d c0       	rjmp	.+314    	; 0x1140c <posix_tests+0x474>
   112d2:	98 01       	movw	r18, r16
   112d4:	a3 01       	movw	r20, r6
   112d6:	6b ed       	ldi	r22, 0xDB	; 219
   112d8:	7b e0       	ldi	r23, 0x0B	; 11
   112da:	c6 01       	movw	r24, r12
   112dc:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   112e0:	89 2b       	or	r24, r25
    {
        char path[256];
        printf("%s\n", getcwd(path, sizeof(path)-2));
   112e2:	a9 f0       	breq	.+42     	; 0x1130e <posix_tests+0x376>
   112e4:	6e ef       	ldi	r22, 0xFE	; 254
   112e6:	70 e0       	ldi	r23, 0x00	; 0
   112e8:	ce 01       	movw	r24, r28
   112ea:	01 96       	adiw	r24, 0x01	; 1
   112ec:	0e 94 dc 7a 	call	0xf5b8	; 0xf5b8 <getcwd>
   112f0:	9f 93       	push	r25
   112f2:	8f 93       	push	r24
   112f4:	84 e5       	ldi	r24, 0x54	; 84
   112f6:	9e e0       	ldi	r25, 0x0E	; 14
   112f8:	1f 92       	push	r1
   112fa:	9f 93       	push	r25
   112fc:	8f 93       	push	r24
   112fe:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   11302:	0f 90       	pop	r0
   11304:	0f 90       	pop	r0
   11306:	0f 90       	pop	r0
   11308:	0f 90       	pop	r0
   1130a:	0f 90       	pop	r0
        return(1);
    }

    if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   1130c:	7f c0       	rjmp	.+254    	; 0x1140c <posix_tests+0x474>
   1130e:	98 01       	movw	r18, r16
   11310:	a5 01       	movw	r20, r10
   11312:	6f ed       	ldi	r22, 0xDF	; 223
   11314:	7b e0       	ldi	r23, 0x0B	; 11
   11316:	c6 01       	movw	r24, r12
   11318:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   1131c:	89 2b       	or	r24, r25
    {
        rename(argv[ind],argv[ind+1]);
   1131e:	69 f0       	breq	.+26     	; 0x1133a <posix_tests+0x3a2>
   11320:	ee 0c       	add	r14, r14
   11322:	ff 1c       	adc	r15, r15
   11324:	f4 01       	movw	r30, r8
   11326:	ee 0d       	add	r30, r14
   11328:	ff 1d       	adc	r31, r15
   1132a:	60 81       	ld	r22, Z
   1132c:	71 81       	ldd	r23, Z+1	; 0x01
   1132e:	32 97       	sbiw	r30, 0x02	; 2
   11330:	80 81       	ld	r24, Z
   11332:	91 81       	ldd	r25, Z+1	; 0x01
   11334:	0e 94 2f 7b 	call	0xf65e	; 0xf65e <rename>
        return(1);
    }

    if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   11338:	69 c0       	rjmp	.+210    	; 0x1140c <posix_tests+0x474>
   1133a:	98 01       	movw	r18, r16
   1133c:	a7 01       	movw	r20, r14
   1133e:	66 ee       	ldi	r22, 0xE6	; 230
   11340:	7b e0       	ldi	r23, 0x0B	; 11
   11342:	c6 01       	movw	r24, r12
   11344:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   11348:	89 2b       	or	r24, r25
    {
        unlink(argv[ind]);
   1134a:	59 f0       	breq	.+22     	; 0x11362 <posix_tests+0x3ca>
   1134c:	73 01       	movw	r14, r6
   1134e:	ee 0c       	add	r14, r14
   11350:	ff 1c       	adc	r15, r15
   11352:	f4 01       	movw	r30, r8
   11354:	ee 0d       	add	r30, r14
   11356:	ff 1d       	adc	r31, r15
   11358:	80 81       	ld	r24, Z
   1135a:	91 81       	ldd	r25, Z+1	; 0x01
   1135c:	0e 94 4e 7b 	call	0xf69c	; 0xf69c <unlink>
        return(1);
    }

    if (MATCHARGS(ptr,"sum", (ind + 1), argc))
   11360:	55 c0       	rjmp	.+170    	; 0x1140c <posix_tests+0x474>
   11362:	98 01       	movw	r18, r16
   11364:	a7 01       	movw	r20, r14
   11366:	69 ee       	ldi	r22, 0xE9	; 233
   11368:	7b e0       	ldi	r23, 0x0B	; 11
   1136a:	c6 01       	movw	r24, r12
   1136c:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   11370:	89 2b       	or	r24, r25
    {
        sum(argv[ind]);
   11372:	51 f0       	breq	.+20     	; 0x11388 <posix_tests+0x3f0>
   11374:	73 01       	movw	r14, r6
   11376:	ee 0c       	add	r14, r14
   11378:	ff 1c       	adc	r15, r15
   1137a:	f4 01       	movw	r30, r8
   1137c:	ee 0d       	add	r30, r14
   1137e:	ff 1d       	adc	r31, r15
   11380:	80 81       	ld	r24, Z
   11382:	91 81       	ldd	r25, Z+1	; 0x01
   11384:	53 dd       	rcall	.-1370   	; 0x10e2c <sum>
        return(1);
    }

    if (MATCHARGS(ptr,"stat", (ind + 1), argc))
   11386:	42 c0       	rjmp	.+132    	; 0x1140c <posix_tests+0x474>
   11388:	98 01       	movw	r18, r16
   1138a:	a7 01       	movw	r20, r14
   1138c:	6d ee       	ldi	r22, 0xED	; 237
   1138e:	7b e0       	ldi	r23, 0x0B	; 11
   11390:	c6 01       	movw	r24, r12
   11392:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   11396:	89 2b       	or	r24, r25
    {
        struct stat p;  
        stat(argv[ind], &p);                        // POSIX test
   11398:	91 f0       	breq	.+36     	; 0x113be <posix_tests+0x426>
   1139a:	73 01       	movw	r14, r6
   1139c:	ee 0c       	add	r14, r14
   1139e:	ff 1c       	adc	r15, r15
   113a0:	f4 01       	movw	r30, r8
   113a2:	ee 0d       	add	r30, r14
   113a4:	ff 1d       	adc	r31, r15
   113a6:	be 01       	movw	r22, r28
   113a8:	6f 5f       	subi	r22, 0xFF	; 255
   113aa:	7f 4f       	sbci	r23, 0xFF	; 255
   113ac:	80 81       	ld	r24, Z
   113ae:	91 81       	ldd	r25, Z+1	; 0x01
   113b0:	0e 94 24 7d 	call	0xfa48	; 0xfa48 <stat>
        dump_stat(&p);
   113b4:	ce 01       	movw	r24, r28
   113b6:	01 96       	adiw	r24, 0x01	; 1
   113b8:	0e 94 d9 79 	call	0xf3b2	; 0xf3b2 <dump_stat>
        return(1);
    }

    if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   113bc:	27 c0       	rjmp	.+78     	; 0x1140c <posix_tests+0x474>
   113be:	98 01       	movw	r18, r16
   113c0:	a7 01       	movw	r20, r14
   113c2:	62 ef       	ldi	r22, 0xF2	; 242
   113c4:	7b e0       	ldi	r23, 0x0B	; 11
   113c6:	c6 01       	movw	r24, r12
   113c8:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   113cc:	89 2b       	or	r24, r25
    {
        rmdir(argv[ind]);
   113ce:	59 f0       	breq	.+22     	; 0x113e6 <posix_tests+0x44e>
   113d0:	73 01       	movw	r14, r6
   113d2:	ee 0c       	add	r14, r14
   113d4:	ff 1c       	adc	r15, r15
   113d6:	f4 01       	movw	r30, r8
   113d8:	ee 0d       	add	r30, r14
   113da:	ff 1d       	adc	r31, r15
   113dc:	80 81       	ld	r24, Z
   113de:	91 81       	ldd	r25, Z+1	; 0x01
   113e0:	0e 94 6d 7b 	call	0xf6da	; 0xf6da <rmdir>
        return(1);
    }

    if (MATCHARGS(ptr,"upload", (ind + 1), argc))
   113e4:	13 c0       	rjmp	.+38     	; 0x1140c <posix_tests+0x474>
   113e6:	98 01       	movw	r18, r16
   113e8:	a7 01       	movw	r20, r14
   113ea:	68 ef       	ldi	r22, 0xF8	; 248
   113ec:	7b e0       	ldi	r23, 0x0B	; 11
   113ee:	c6 01       	movw	r24, r12
   113f0:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   113f4:	89 2b       	or	r24, r25
    {
        upload(argv[ind]);
   113f6:	09 f4       	brne	.+2      	; 0x113fa <posix_tests+0x462>
   113f8:	db cd       	rjmp	.-1098   	; 0x10fb0 <posix_tests+0x18>
   113fa:	73 01       	movw	r14, r6
   113fc:	ee 0c       	add	r14, r14
   113fe:	ff 1c       	adc	r15, r15
   11400:	f4 01       	movw	r30, r8
   11402:	ee 0d       	add	r30, r14
   11404:	ff 1d       	adc	r31, r15
   11406:	80 81       	ld	r24, Z
        return(1);
   11408:	91 81       	ldd	r25, Z+1	; 0x01
   1140a:	60 dd       	rcall	.-1344   	; 0x10ecc <upload>
    }

    return(0);
}
   1140c:	81 e0       	ldi	r24, 0x01	; 1
   1140e:	90 e0       	ldi	r25, 0x00	; 0
   11410:	d3 95       	inc	r29
   11412:	e0 e1       	ldi	r30, 0x10	; 16
   11414:	0c 94 ad e9 	jmp	0x1d35a	; 0x1d35a <__epilogue_restores__+0x4>

00011418 <gpib_timer_init>:
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   11418:	61 e0       	ldi	r22, 0x01	; 1
   1141a:	70 e0       	ldi	r23, 0x00	; 0
   1141c:	89 ea       	ldi	r24, 0xA9	; 169
   1141e:	9b e8       	ldi	r25, 0x8B	; 139
   11420:	0e 94 8f 33 	call	0x671e	; 0x671e <set_timers>
   11424:	01 96       	adiw	r24, 0x01	; 1
   11426:	51 f4       	brne	.+20     	; 0x1143c <gpib_timer_init+0x24>
        printf("GPIB Clock task init failed\n");
   11428:	85 ef       	ldi	r24, 0xF5	; 245
   1142a:	9f e0       	ldi	r25, 0x0F	; 15
   1142c:	1f 92       	push	r1
   1142e:	9f 93       	push	r25
   11430:	8f 93       	push	r24
   11432:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   11436:	0f 90       	pop	r0
   11438:	0f 90       	pop	r0

    gpib_timer_reset();
   1143a:	0f 90       	pop	r0
   1143c:	78 c1       	rjmp	.+752    	; 0x1172e <gpib_timer_reset>
   1143e:	08 95       	ret

00011440 <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   11440:	28 2f       	mov	r18, r24
   11442:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   11444:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   11446:	88 0f       	add	r24, r24
        if(mask & 1)
   11448:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   1144a:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   1144c:	26 95       	lsr	r18
   1144e:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   11450:	d1 f7       	brne	.-12     	; 0x11446 <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   11452:	08 95       	ret

00011454 <ppr_set>:
   11454:	f5 df       	rcall	.-22     	; 0x11440 <reverse_8bits>
   11456:	80 93 ae 19 	sts	0x19AE, r24	; 0x8019ae <_ppr_reg>
   1145a:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <SPI0_TXRX_Byte>
   1145e:	2a 9a       	sbi	0x05, 2	; 5
   11460:	22 9a       	sbi	0x04, 2	; 4
   11462:	2a 98       	cbi	0x05, 2	; 5
   11464:	22 9a       	sbi	0x04, 2	; 4
   11466:	08 95       	ret

00011468 <ppr_reg>:
   11468:	80 91 ae 19 	lds	r24, 0x19AE	; 0x8019ae <_ppr_reg>
   1146c:	e9 cf       	rjmp	.-46     	; 0x11440 <reverse_8bits>
   1146e:	08 95       	ret

00011470 <ppr_init>:
   11470:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   11474:	81 ff       	sbrs	r24, 1
   11476:	0a c0       	rjmp	.+20     	; 0x1148c <ppr_init+0x1c>
   11478:	82 ee       	ldi	r24, 0xE2	; 226
   1147a:	9f e0       	ldi	r25, 0x0F	; 15
   1147c:	1f 92       	push	r1
   1147e:	9f 93       	push	r25
   11480:	8f 93       	push	r24
   11482:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   11486:	0f 90       	pop	r0
   11488:	0f 90       	pop	r0
   1148a:	0f 90       	pop	r0
   1148c:	80 e0       	ldi	r24, 0x00	; 0
   1148e:	e2 cf       	rjmp	.-60     	; 0x11454 <ppr_set>
   11490:	08 95       	ret

00011492 <ppr_bit_set>:
   11492:	21 e0       	ldi	r18, 0x01	; 1
   11494:	30 e0       	ldi	r19, 0x00	; 0
   11496:	01 c0       	rjmp	.+2      	; 0x1149a <ppr_bit_set+0x8>
   11498:	22 0f       	add	r18, r18
   1149a:	8a 95       	dec	r24
   1149c:	ea f7       	brpl	.-6      	; 0x11498 <ppr_bit_set+0x6>
   1149e:	80 91 ae 19 	lds	r24, 0x19AE	; 0x8019ae <_ppr_reg>
   114a2:	82 2b       	or	r24, r18
   114a4:	80 93 ae 19 	sts	0x19AE, r24	; 0x8019ae <_ppr_reg>
   114a8:	d5 cf       	rjmp	.-86     	; 0x11454 <ppr_set>
   114aa:	08 95       	ret

000114ac <ppr_bit_clr>:
   114ac:	21 e0       	ldi	r18, 0x01	; 1
   114ae:	30 e0       	ldi	r19, 0x00	; 0
   114b0:	01 c0       	rjmp	.+2      	; 0x114b4 <ppr_bit_clr+0x8>
   114b2:	22 0f       	add	r18, r18
   114b4:	8a 95       	dec	r24
   114b6:	ea f7       	brpl	.-6      	; 0x114b2 <ppr_bit_clr+0x6>
   114b8:	20 95       	com	r18
   114ba:	80 91 ae 19 	lds	r24, 0x19AE	; 0x8019ae <_ppr_reg>
   114be:	82 23       	and	r24, r18
   114c0:	80 93 ae 19 	sts	0x19AE, r24	; 0x8019ae <_ppr_reg>
   114c4:	c7 cf       	rjmp	.-114    	; 0x11454 <ppr_set>
   114c6:	08 95       	ret

000114c8 <dbf_open>:
   114c8:	0f 93       	push	r16
   114ca:	1f 93       	push	r17
   114cc:	cf 93       	push	r28
   114ce:	df 93       	push	r29
   114d0:	16 2f       	mov	r17, r22
   114d2:	07 2f       	mov	r16, r23
   114d4:	0e 94 f6 56 	call	0xadec	; 0xadec <f_open>
   114d8:	ec 01       	movw	r28, r24
   114da:	89 2b       	or	r24, r25
   114dc:	89 f0       	breq	.+34     	; 0x11500 <dbf_open+0x38>
   114de:	0f 93       	push	r16
   114e0:	1f 93       	push	r17
   114e2:	81 ed       	ldi	r24, 0xD1	; 209
   114e4:	9f e0       	ldi	r25, 0x0F	; 15
   114e6:	1f 92       	push	r1
   114e8:	9f 93       	push	r25
   114ea:	8f 93       	push	r24
   114ec:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   114f0:	ce 01       	movw	r24, r28
   114f2:	0e 94 74 73 	call	0xe6e8	; 0xe6e8 <put_rc>
   114f6:	0f 90       	pop	r0
   114f8:	0f 90       	pop	r0
   114fa:	0f 90       	pop	r0
   114fc:	0f 90       	pop	r0
   114fe:	0f 90       	pop	r0
   11500:	ce 01       	movw	r24, r28
   11502:	df 91       	pop	r29
   11504:	cf 91       	pop	r28
   11506:	1f 91       	pop	r17
   11508:	0f 91       	pop	r16
   1150a:	08 95       	ret

0001150c <dbf_read>:
   1150c:	cf 93       	push	r28
   1150e:	df 93       	push	r29
   11510:	0e 94 f2 58 	call	0xb1e4	; 0xb1e4 <f_read>
   11514:	ec 01       	movw	r28, r24
   11516:	89 2b       	or	r24, r25
   11518:	69 f0       	breq	.+26     	; 0x11534 <dbf_read+0x28>
   1151a:	84 ec       	ldi	r24, 0xC4	; 196
   1151c:	9f e0       	ldi	r25, 0x0F	; 15
   1151e:	1f 92       	push	r1
   11520:	9f 93       	push	r25
   11522:	8f 93       	push	r24
   11524:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   11528:	ce 01       	movw	r24, r28
   1152a:	0e 94 74 73 	call	0xe6e8	; 0xe6e8 <put_rc>
   1152e:	0f 90       	pop	r0
   11530:	0f 90       	pop	r0
   11532:	0f 90       	pop	r0
   11534:	ce 01       	movw	r24, r28
   11536:	df 91       	pop	r29
   11538:	cf 91       	pop	r28
   1153a:	08 95       	ret

0001153c <dbf_write>:
   1153c:	cf 93       	push	r28
   1153e:	df 93       	push	r29
   11540:	0e 94 3d 5a 	call	0xb47a	; 0xb47a <f_write>
   11544:	ec 01       	movw	r28, r24
   11546:	89 2b       	or	r24, r25
   11548:	69 f0       	breq	.+26     	; 0x11564 <dbf_write+0x28>
   1154a:	86 eb       	ldi	r24, 0xB6	; 182
   1154c:	9f e0       	ldi	r25, 0x0F	; 15
   1154e:	1f 92       	push	r1
   11550:	9f 93       	push	r25
   11552:	8f 93       	push	r24
   11554:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   11558:	ce 01       	movw	r24, r28
   1155a:	0e 94 74 73 	call	0xe6e8	; 0xe6e8 <put_rc>
   1155e:	0f 90       	pop	r0
   11560:	0f 90       	pop	r0
   11562:	0f 90       	pop	r0
   11564:	ce 01       	movw	r24, r28
   11566:	df 91       	pop	r29
   11568:	cf 91       	pop	r28
   1156a:	08 95       	ret

0001156c <dbf_lseek>:
   1156c:	cf 93       	push	r28
   1156e:	df 93       	push	r29
   11570:	0e 94 fc 5d 	call	0xbbf8	; 0xbbf8 <f_lseek>
   11574:	ec 01       	movw	r28, r24
   11576:	89 2b       	or	r24, r25
   11578:	69 f0       	breq	.+26     	; 0x11594 <dbf_lseek+0x28>
   1157a:	89 ea       	ldi	r24, 0xA9	; 169
   1157c:	9f e0       	ldi	r25, 0x0F	; 15
   1157e:	1f 92       	push	r1
   11580:	9f 93       	push	r25
   11582:	8f 93       	push	r24
   11584:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   11588:	ce 01       	movw	r24, r28
   1158a:	0e 94 74 73 	call	0xe6e8	; 0xe6e8 <put_rc>
   1158e:	0f 90       	pop	r0
   11590:	0f 90       	pop	r0
   11592:	0f 90       	pop	r0
   11594:	ce 01       	movw	r24, r28
   11596:	df 91       	pop	r29
   11598:	cf 91       	pop	r28
   1159a:	08 95       	ret

0001159c <dbf_close>:
   1159c:	cf 93       	push	r28
   1159e:	df 93       	push	r29
   115a0:	0e 94 54 5c 	call	0xb8a8	; 0xb8a8 <f_close>
   115a4:	ec 01       	movw	r28, r24
   115a6:	89 2b       	or	r24, r25
   115a8:	69 f0       	breq	.+26     	; 0x115c4 <dbf_close+0x28>
   115aa:	8b e9       	ldi	r24, 0x9B	; 155
   115ac:	9f e0       	ldi	r25, 0x0F	; 15
   115ae:	1f 92       	push	r1
   115b0:	9f 93       	push	r25
   115b2:	8f 93       	push	r24
   115b4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   115b8:	ce 01       	movw	r24, r28
   115ba:	0e 94 74 73 	call	0xe6e8	; 0xe6e8 <put_rc>
   115be:	0f 90       	pop	r0
   115c0:	0f 90       	pop	r0
   115c2:	0f 90       	pop	r0
   115c4:	ce 01       	movw	r24, r28
   115c6:	df 91       	pop	r29
   115c8:	cf 91       	pop	r28
   115ca:	08 95       	ret

000115cc <dbf_open_read>:
   115cc:	a6 e2       	ldi	r26, 0x26	; 38
   115ce:	b2 e0       	ldi	r27, 0x02	; 2
   115d0:	ec ee       	ldi	r30, 0xEC	; 236
   115d2:	fa e8       	ldi	r31, 0x8A	; 138
   115d4:	0c 94 95 e9 	jmp	0x1d32a	; 0x1d32a <__prologue_saves__+0xc>
   115d8:	4a 01       	movw	r8, r20
   115da:	5b 01       	movw	r10, r22
   115dc:	69 01       	movw	r12, r18
   115de:	cb 5d       	subi	r28, 0xDB	; 219
   115e0:	dd 4f       	sbci	r29, 0xFD	; 253
   115e2:	19 82       	std	Y+1, r1	; 0x01
   115e4:	18 82       	st	Y, r1
   115e6:	c5 52       	subi	r28, 0x25	; 37
   115e8:	d2 40       	sbci	r29, 0x02	; 2
   115ea:	43 e0       	ldi	r20, 0x03	; 3
   115ec:	bc 01       	movw	r22, r24
   115ee:	ce 01       	movw	r24, r28
   115f0:	01 96       	adiw	r24, 0x01	; 1
   115f2:	6a df       	rcall	.-300    	; 0x114c8 <dbf_open>
   115f4:	89 2b       	or	r24, r25
   115f6:	19 f0       	breq	.+6      	; 0x115fe <dbf_open_read+0x32>
   115f8:	81 e1       	ldi	r24, 0x11	; 17
   115fa:	90 e0       	ldi	r25, 0x00	; 0
   115fc:	2f c0       	rjmp	.+94     	; 0x1165c <dbf_open_read+0x90>
   115fe:	b5 01       	movw	r22, r10
   11600:	a4 01       	movw	r20, r8
   11602:	ce 01       	movw	r24, r28
   11604:	01 96       	adiw	r24, 0x01	; 1
   11606:	b2 df       	rcall	.-156    	; 0x1156c <dbf_lseek>
   11608:	89 2b       	or	r24, r25
   1160a:	59 f0       	breq	.+22     	; 0x11622 <dbf_open_read+0x56>
   1160c:	85 e0       	ldi	r24, 0x05	; 5
   1160e:	90 e0       	ldi	r25, 0x00	; 0
   11610:	f7 01       	movw	r30, r14
   11612:	91 83       	std	Z+1, r25	; 0x01
   11614:	80 83       	st	Z, r24
   11616:	ce 01       	movw	r24, r28
   11618:	01 96       	adiw	r24, 0x01	; 1
   1161a:	c0 df       	rcall	.-128    	; 0x1159c <dbf_close>
   1161c:	8f ef       	ldi	r24, 0xFF	; 255
   1161e:	9f ef       	ldi	r25, 0xFF	; 255
   11620:	27 c0       	rjmp	.+78     	; 0x11670 <dbf_open_read+0xa4>
   11622:	9e 01       	movw	r18, r28
   11624:	2b 5d       	subi	r18, 0xDB	; 219
   11626:	3d 4f       	sbci	r19, 0xFD	; 253
   11628:	a8 01       	movw	r20, r16
   1162a:	b6 01       	movw	r22, r12
   1162c:	ce 01       	movw	r24, r28
   1162e:	01 96       	adiw	r24, 0x01	; 1
   11630:	6d df       	rcall	.-294    	; 0x1150c <dbf_read>
   11632:	89 2b       	or	r24, r25
   11634:	49 f4       	brne	.+18     	; 0x11648 <dbf_open_read+0x7c>
   11636:	cb 5d       	subi	r28, 0xDB	; 219
   11638:	dd 4f       	sbci	r29, 0xFD	; 253
   1163a:	88 81       	ld	r24, Y
   1163c:	99 81       	ldd	r25, Y+1	; 0x01
   1163e:	c5 52       	subi	r28, 0x25	; 37
   11640:	d2 40       	sbci	r29, 0x02	; 2
   11642:	08 17       	cp	r16, r24
   11644:	19 07       	cpc	r17, r25
   11646:	19 f0       	breq	.+6      	; 0x1164e <dbf_open_read+0x82>
   11648:	81 e0       	ldi	r24, 0x01	; 1
   1164a:	90 e0       	ldi	r25, 0x00	; 0
   1164c:	e1 cf       	rjmp	.-62     	; 0x11610 <dbf_open_read+0x44>
   1164e:	ce 01       	movw	r24, r28
   11650:	01 96       	adiw	r24, 0x01	; 1
   11652:	a4 df       	rcall	.-184    	; 0x1159c <dbf_close>
   11654:	89 2b       	or	r24, r25
   11656:	31 f0       	breq	.+12     	; 0x11664 <dbf_open_read+0x98>
   11658:	80 e1       	ldi	r24, 0x10	; 16
   1165a:	90 e0       	ldi	r25, 0x00	; 0
   1165c:	f7 01       	movw	r30, r14
   1165e:	91 83       	std	Z+1, r25	; 0x01
   11660:	80 83       	st	Z, r24
   11662:	dc cf       	rjmp	.-72     	; 0x1161c <dbf_open_read+0x50>
   11664:	cb 5d       	subi	r28, 0xDB	; 219
   11666:	dd 4f       	sbci	r29, 0xFD	; 253
   11668:	88 81       	ld	r24, Y
   1166a:	99 81       	ldd	r25, Y+1	; 0x01
   1166c:	c5 52       	subi	r28, 0x25	; 37
   1166e:	d2 40       	sbci	r29, 0x02	; 2
   11670:	ca 5d       	subi	r28, 0xDA	; 218
   11672:	dd 4f       	sbci	r29, 0xFD	; 253
   11674:	ec e0       	ldi	r30, 0x0C	; 12
   11676:	0c 94 b1 e9 	jmp	0x1d362	; 0x1d362 <__epilogue_restores__+0xc>

0001167a <dbf_open_write>:
   1167a:	a6 e2       	ldi	r26, 0x26	; 38
   1167c:	b2 e0       	ldi	r27, 0x02	; 2
   1167e:	e3 e4       	ldi	r30, 0x43	; 67
   11680:	fb e8       	ldi	r31, 0x8B	; 139
   11682:	0c 94 95 e9 	jmp	0x1d32a	; 0x1d32a <__prologue_saves__+0xc>
   11686:	4a 01       	movw	r8, r20
   11688:	5b 01       	movw	r10, r22
   1168a:	69 01       	movw	r12, r18
   1168c:	cb 5d       	subi	r28, 0xDB	; 219
   1168e:	dd 4f       	sbci	r29, 0xFD	; 253
   11690:	19 82       	std	Y+1, r1	; 0x01
   11692:	18 82       	st	Y, r1
   11694:	c5 52       	subi	r28, 0x25	; 37
   11696:	d2 40       	sbci	r29, 0x02	; 2
   11698:	43 e0       	ldi	r20, 0x03	; 3
   1169a:	bc 01       	movw	r22, r24
   1169c:	ce 01       	movw	r24, r28
   1169e:	01 96       	adiw	r24, 0x01	; 1
   116a0:	13 df       	rcall	.-474    	; 0x114c8 <dbf_open>
   116a2:	89 2b       	or	r24, r25
   116a4:	19 f0       	breq	.+6      	; 0x116ac <dbf_open_write+0x32>
   116a6:	81 e1       	ldi	r24, 0x11	; 17
   116a8:	90 e0       	ldi	r25, 0x00	; 0
   116aa:	2f c0       	rjmp	.+94     	; 0x1170a <dbf_open_write+0x90>
   116ac:	b5 01       	movw	r22, r10
   116ae:	a4 01       	movw	r20, r8
   116b0:	ce 01       	movw	r24, r28
   116b2:	01 96       	adiw	r24, 0x01	; 1
   116b4:	5b df       	rcall	.-330    	; 0x1156c <dbf_lseek>
   116b6:	89 2b       	or	r24, r25
   116b8:	59 f0       	breq	.+22     	; 0x116d0 <dbf_open_write+0x56>
   116ba:	85 e0       	ldi	r24, 0x05	; 5
   116bc:	90 e0       	ldi	r25, 0x00	; 0
   116be:	f7 01       	movw	r30, r14
   116c0:	91 83       	std	Z+1, r25	; 0x01
   116c2:	80 83       	st	Z, r24
   116c4:	ce 01       	movw	r24, r28
   116c6:	01 96       	adiw	r24, 0x01	; 1
   116c8:	69 df       	rcall	.-302    	; 0x1159c <dbf_close>
   116ca:	8f ef       	ldi	r24, 0xFF	; 255
   116cc:	9f ef       	ldi	r25, 0xFF	; 255
   116ce:	27 c0       	rjmp	.+78     	; 0x1171e <dbf_open_write+0xa4>
   116d0:	9e 01       	movw	r18, r28
   116d2:	2b 5d       	subi	r18, 0xDB	; 219
   116d4:	3d 4f       	sbci	r19, 0xFD	; 253
   116d6:	a8 01       	movw	r20, r16
   116d8:	b6 01       	movw	r22, r12
   116da:	ce 01       	movw	r24, r28
   116dc:	01 96       	adiw	r24, 0x01	; 1
   116de:	2e df       	rcall	.-420    	; 0x1153c <dbf_write>
   116e0:	89 2b       	or	r24, r25
   116e2:	49 f4       	brne	.+18     	; 0x116f6 <dbf_open_write+0x7c>
   116e4:	cb 5d       	subi	r28, 0xDB	; 219
   116e6:	dd 4f       	sbci	r29, 0xFD	; 253
   116e8:	88 81       	ld	r24, Y
   116ea:	99 81       	ldd	r25, Y+1	; 0x01
   116ec:	c5 52       	subi	r28, 0x25	; 37
   116ee:	d2 40       	sbci	r29, 0x02	; 2
   116f0:	08 17       	cp	r16, r24
   116f2:	19 07       	cpc	r17, r25
   116f4:	19 f0       	breq	.+6      	; 0x116fc <dbf_open_write+0x82>
   116f6:	81 e0       	ldi	r24, 0x01	; 1
   116f8:	90 e0       	ldi	r25, 0x00	; 0
   116fa:	e1 cf       	rjmp	.-62     	; 0x116be <dbf_open_write+0x44>
   116fc:	ce 01       	movw	r24, r28
   116fe:	01 96       	adiw	r24, 0x01	; 1
   11700:	4d df       	rcall	.-358    	; 0x1159c <dbf_close>
   11702:	89 2b       	or	r24, r25
   11704:	31 f0       	breq	.+12     	; 0x11712 <dbf_open_write+0x98>
   11706:	80 e1       	ldi	r24, 0x10	; 16
   11708:	90 e0       	ldi	r25, 0x00	; 0
   1170a:	f7 01       	movw	r30, r14
   1170c:	91 83       	std	Z+1, r25	; 0x01
   1170e:	80 83       	st	Z, r24
   11710:	dc cf       	rjmp	.-72     	; 0x116ca <dbf_open_write+0x50>
   11712:	cb 5d       	subi	r28, 0xDB	; 219
   11714:	dd 4f       	sbci	r29, 0xFD	; 253
   11716:	88 81       	ld	r24, Y
   11718:	99 81       	ldd	r25, Y+1	; 0x01
   1171a:	c5 52       	subi	r28, 0x25	; 37
   1171c:	d2 40       	sbci	r29, 0x02	; 2
   1171e:	ca 5d       	subi	r28, 0xDA	; 218
   11720:	dd 4f       	sbci	r29, 0xFD	; 253
   11722:	ec e0       	ldi	r30, 0x0C	; 12
   11724:	0c 94 b1 e9 	jmp	0x1d362	; 0x1d362 <__epilogue_restores__+0xc>

00011728 <gpib_timer_elapsed_begin>:
   11728:	0c 94 3b 34 	jmp	0x6876	; 0x6876 <clock_elapsed_begin>
   1172c:	08 95       	ret

0001172e <gpib_timer_reset>:
   1172e:	f8 94       	cli
   11730:	ea e2       	ldi	r30, 0x2A	; 42
   11732:	fd e1       	ldi	r31, 0x1D	; 29
   11734:	10 82       	st	Z, r1
   11736:	11 82       	std	Z+1, r1	; 0x01
   11738:	12 82       	std	Z+2, r1	; 0x02
   1173a:	13 82       	std	Z+3, r1	; 0x03
   1173c:	14 82       	std	Z+4, r1	; 0x04
   1173e:	15 82       	std	Z+5, r1	; 0x05
   11740:	16 82       	std	Z+6, r1	; 0x06
   11742:	17 82       	std	Z+7, r1	; 0x07
   11744:	81 e0       	ldi	r24, 0x01	; 1
   11746:	80 87       	std	Z+8, r24	; 0x08
   11748:	78 94       	sei
   1174a:	08 95       	ret

0001174c <gpib_timer_elapsed_end>:
   1174c:	0c 94 41 34 	jmp	0x6882	; 0x6882 <clock_elapsed_end>
   11750:	08 95       	ret

00011752 <gpib_timer_task>:
   11752:	f8 94       	cli
   11754:	80 91 2e 1d 	lds	r24, 0x1D2E	; 0x801d2e <gpib_timer+0x4>
   11758:	90 91 2f 1d 	lds	r25, 0x1D2F	; 0x801d2f <gpib_timer+0x5>
   1175c:	a0 91 30 1d 	lds	r26, 0x1D30	; 0x801d30 <gpib_timer+0x6>
   11760:	b0 91 31 1d 	lds	r27, 0x1D31	; 0x801d31 <gpib_timer+0x7>
   11764:	89 2b       	or	r24, r25
   11766:	8a 2b       	or	r24, r26
   11768:	8b 2b       	or	r24, r27
   1176a:	a1 f0       	breq	.+40     	; 0x11794 <gpib_timer_task+0x42>
   1176c:	80 91 2e 1d 	lds	r24, 0x1D2E	; 0x801d2e <gpib_timer+0x4>
   11770:	90 91 2f 1d 	lds	r25, 0x1D2F	; 0x801d2f <gpib_timer+0x5>
   11774:	a0 91 30 1d 	lds	r26, 0x1D30	; 0x801d30 <gpib_timer+0x6>
   11778:	b0 91 31 1d 	lds	r27, 0x1D31	; 0x801d31 <gpib_timer+0x7>
   1177c:	01 97       	sbiw	r24, 0x01	; 1
   1177e:	a1 09       	sbc	r26, r1
   11780:	b1 09       	sbc	r27, r1
   11782:	80 93 2e 1d 	sts	0x1D2E, r24	; 0x801d2e <gpib_timer+0x4>
   11786:	90 93 2f 1d 	sts	0x1D2F, r25	; 0x801d2f <gpib_timer+0x5>
   1178a:	a0 93 30 1d 	sts	0x1D30, r26	; 0x801d30 <gpib_timer+0x6>
   1178e:	b0 93 31 1d 	sts	0x1D31, r27	; 0x801d31 <gpib_timer+0x7>
   11792:	03 c0       	rjmp	.+6      	; 0x1179a <gpib_timer_task+0x48>
   11794:	81 e0       	ldi	r24, 0x01	; 1
   11796:	80 93 32 1d 	sts	0x1D32, r24	; 0x801d32 <gpib_timer+0x8>
   1179a:	78 94       	sei
   1179c:	08 95       	ret

0001179e <gpib_timeout_set>:
   1179e:	f8 94       	cli
   117a0:	ea e2       	ldi	r30, 0x2A	; 42
   117a2:	fd e1       	ldi	r31, 0x1D	; 29
   117a4:	64 83       	std	Z+4, r22	; 0x04
   117a6:	75 83       	std	Z+5, r23	; 0x05
   117a8:	86 83       	std	Z+6, r24	; 0x06
   117aa:	97 83       	std	Z+7, r25	; 0x07
   117ac:	10 86       	std	Z+8, r1	; 0x08
   117ae:	78 94       	sei
   117b0:	08 95       	ret

000117b2 <gpib_bus_read_init>:
   117b2:	54 98       	cbi	0x0a, 4	; 10
   117b4:	57 98       	cbi	0x0a, 7	; 10
   117b6:	45 98       	cbi	0x08, 5	; 8
   117b8:	3d 9a       	sbi	0x07, 5	; 7
   117ba:	11 b8       	out	0x01, r1	; 1
   117bc:	2f ef       	ldi	r18, 0xFF	; 255
   117be:	22 b9       	out	0x02, r18	; 2
   117c0:	43 98       	cbi	0x08, 3	; 8
   117c2:	3b 9a       	sbi	0x07, 3	; 7
   117c4:	21 98       	cbi	0x04, 1	; 4
   117c6:	56 98       	cbi	0x0a, 6	; 10
   117c8:	20 98       	cbi	0x04, 0	; 4
   117ca:	55 98       	cbi	0x0a, 5	; 10
   117cc:	89 2b       	or	r24, r25
   117ce:	39 f4       	brne	.+14     	; 0x117de <gpib_bus_read_init+0x2c>
   117d0:	52 98       	cbi	0x0a, 2	; 10
   117d2:	53 98       	cbi	0x0a, 3	; 10
   117d4:	8d e0       	ldi	r24, 0x0D	; 13
   117d6:	8a 95       	dec	r24
   117d8:	f1 f7       	brne	.-4      	; 0x117d6 <gpib_bus_read_init+0x24>
   117da:	00 00       	nop
   117dc:	04 c0       	rjmp	.+8      	; 0x117e6 <gpib_bus_read_init+0x34>
   117de:	5b 98       	cbi	0x0b, 3	; 11
   117e0:	53 9a       	sbi	0x0a, 3	; 10
   117e2:	5a 98       	cbi	0x0b, 2	; 11
   117e4:	52 9a       	sbi	0x0a, 2	; 10
   117e6:	42 98       	cbi	0x08, 2	; 8
   117e8:	3a 9a       	sbi	0x07, 2	; 7
   117ea:	44 9a       	sbi	0x08, 4	; 8
   117ec:	3c 9a       	sbi	0x07, 4	; 7
   117ee:	8d e0       	ldi	r24, 0x0D	; 13
   117f0:	8a 95       	dec	r24
   117f2:	f1 f7       	brne	.-4      	; 0x117f0 <gpib_bus_read_init+0x3e>
   117f4:	00 00       	nop
   117f6:	08 95       	ret

000117f8 <gpib_bus_init>:
   117f8:	10 92 af 19 	sts	0x19AF, r1	; 0x8019af <gpib_unread_f>
   117fc:	11 b8       	out	0x01, r1	; 1
   117fe:	8f ef       	ldi	r24, 0xFF	; 255
   11800:	82 b9       	out	0x02, r24	; 2
   11802:	21 98       	cbi	0x04, 1	; 4
   11804:	52 98       	cbi	0x0a, 2	; 10
   11806:	53 98       	cbi	0x0a, 3	; 10
   11808:	54 98       	cbi	0x0a, 4	; 10
   1180a:	57 98       	cbi	0x0a, 7	; 10
   1180c:	56 98       	cbi	0x0a, 6	; 10
   1180e:	20 98       	cbi	0x04, 0	; 4
   11810:	55 98       	cbi	0x0a, 5	; 10
   11812:	45 98       	cbi	0x08, 5	; 8
   11814:	3d 9a       	sbi	0x07, 5	; 7
   11816:	43 98       	cbi	0x08, 3	; 8
   11818:	3b 9a       	sbi	0x07, 3	; 7
   1181a:	42 98       	cbi	0x08, 2	; 8
   1181c:	3a 9a       	sbi	0x07, 2	; 7
   1181e:	44 9a       	sbi	0x08, 4	; 8
   11820:	3c 9a       	sbi	0x07, 4	; 7
   11822:	8d e0       	ldi	r24, 0x0D	; 13
   11824:	8a 95       	dec	r24
   11826:	f1 f7       	brne	.-4      	; 0x11824 <gpib_bus_init+0x2c>
   11828:	00 00       	nop
   1182a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1182e:	82 ff       	sbrs	r24, 2
   11830:	0a c0       	rjmp	.+20     	; 0x11846 <gpib_bus_init+0x4e>
   11832:	8e e9       	ldi	r24, 0x9E	; 158
   11834:	92 e1       	ldi	r25, 0x12	; 18
   11836:	1f 92       	push	r1
   11838:	9f 93       	push	r25
   1183a:	8f 93       	push	r24
   1183c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   11840:	0f 90       	pop	r0
   11842:	0f 90       	pop	r0
   11844:	0f 90       	pop	r0
   11846:	08 95       	ret

00011848 <gpib_state_init>:
   11848:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1184c:	82 ff       	sbrs	r24, 2
   1184e:	0a c0       	rjmp	.+20     	; 0x11864 <gpib_state_init+0x1c>
   11850:	8b e8       	ldi	r24, 0x8B	; 139
   11852:	92 e1       	ldi	r25, 0x12	; 18
   11854:	1f 92       	push	r1
   11856:	9f 93       	push	r25
   11858:	8f 93       	push	r24
   1185a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1185e:	0f 90       	pop	r0
   11860:	0f 90       	pop	r0
   11862:	0f 90       	pop	r0
   11864:	05 de       	rcall	.-1014   	; 0x11470 <ppr_init>
   11866:	0e 94 52 96 	call	0x12ca4	; 0x12ca4 <listen_cleanup>
   1186a:	0e 94 63 97 	call	0x12ec6	; 0x12ec6 <talk_cleanup>
   1186e:	10 92 36 1f 	sts	0x1F36, r1	; 0x801f36 <spoll>
   11872:	10 92 39 1f 	sts	0x1F39, r1	; 0x801f39 <talking>
   11876:	10 92 3c 1f 	sts	0x1F3C, r1	; 0x801f3c <talking_last>
   1187a:	10 92 3b 1f 	sts	0x1F3B, r1	; 0x801f3b <listening>
   1187e:	10 92 35 1f 	sts	0x1F35, r1	; 0x801f35 <listening_last>
   11882:	10 92 34 1d 	sts	0x1D34, r1	; 0x801d34 <lastcmd+0x1>
   11886:	10 92 33 1d 	sts	0x1D33, r1	; 0x801d33 <lastcmd>
   1188a:	10 92 38 1f 	sts	0x1F38, r1	; 0x801f38 <current+0x1>
   1188e:	10 92 37 1f 	sts	0x1F37, r1	; 0x801f37 <current>
   11892:	10 92 3a 1f 	sts	0x1F3A, r1	; 0x801f3a <secondary>
   11896:	08 95       	ret

00011898 <gpib_enable_PPR>:
   11898:	cf 93       	push	r28
   1189a:	df 93       	push	r29
   1189c:	ec 01       	movw	r28, r24
   1189e:	88 30       	cpi	r24, 0x08	; 8
   118a0:	91 05       	cpc	r25, r1
   118a2:	78 f0       	brcs	.+30     	; 0x118c2 <gpib_enable_PPR+0x2a>
   118a4:	df 93       	push	r29
   118a6:	cf 93       	push	r28
   118a8:	85 e6       	ldi	r24, 0x65	; 101
   118aa:	92 e1       	ldi	r25, 0x12	; 18
   118ac:	1f 92       	push	r1
   118ae:	9f 93       	push	r25
   118b0:	8f 93       	push	r24
   118b2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   118b6:	0f 90       	pop	r0
   118b8:	0f 90       	pop	r0
   118ba:	0f 90       	pop	r0
   118bc:	0f 90       	pop	r0
   118be:	0f 90       	pop	r0
   118c0:	19 c0       	rjmp	.+50     	; 0x118f4 <gpib_enable_PPR+0x5c>
   118c2:	e7 dd       	rcall	.-1074   	; 0x11492 <ppr_bit_set>
   118c4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   118c8:	81 ff       	sbrs	r24, 1
   118ca:	14 c0       	rjmp	.+40     	; 0x118f4 <gpib_enable_PPR+0x5c>
   118cc:	cd dd       	rcall	.-1126   	; 0x11468 <ppr_reg>
   118ce:	1f 92       	push	r1
   118d0:	8f 93       	push	r24
   118d2:	df 93       	push	r29
   118d4:	cf 93       	push	r28
   118d6:	8a e4       	ldi	r24, 0x4A	; 74
   118d8:	92 e1       	ldi	r25, 0x12	; 18
   118da:	1f 92       	push	r1
   118dc:	9f 93       	push	r25
   118de:	8f 93       	push	r24
   118e0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   118e4:	8d b7       	in	r24, 0x3d	; 61
   118e6:	9e b7       	in	r25, 0x3e	; 62
   118e8:	07 96       	adiw	r24, 0x07	; 7
   118ea:	0f b6       	in	r0, 0x3f	; 63
   118ec:	f8 94       	cli
   118ee:	9e bf       	out	0x3e, r25	; 62
   118f0:	0f be       	out	0x3f, r0	; 63
   118f2:	8d bf       	out	0x3d, r24	; 61
   118f4:	df 91       	pop	r29
   118f6:	cf 91       	pop	r28
   118f8:	08 95       	ret

000118fa <gpib_disable_PPR>:
   118fa:	cf 93       	push	r28
   118fc:	df 93       	push	r29
   118fe:	ec 01       	movw	r28, r24
   11900:	88 30       	cpi	r24, 0x08	; 8
   11902:	91 05       	cpc	r25, r1
   11904:	78 f0       	brcs	.+30     	; 0x11924 <gpib_disable_PPR+0x2a>
   11906:	df 93       	push	r29
   11908:	cf 93       	push	r28
   1190a:	83 e2       	ldi	r24, 0x23	; 35
   1190c:	92 e1       	ldi	r25, 0x12	; 18
   1190e:	1f 92       	push	r1
   11910:	9f 93       	push	r25
   11912:	8f 93       	push	r24
   11914:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   11918:	0f 90       	pop	r0
   1191a:	0f 90       	pop	r0
   1191c:	0f 90       	pop	r0
   1191e:	0f 90       	pop	r0
   11920:	0f 90       	pop	r0
   11922:	19 c0       	rjmp	.+50     	; 0x11956 <gpib_disable_PPR+0x5c>
   11924:	c3 dd       	rcall	.-1146   	; 0x114ac <ppr_bit_clr>
   11926:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1192a:	81 ff       	sbrs	r24, 1
   1192c:	14 c0       	rjmp	.+40     	; 0x11956 <gpib_disable_PPR+0x5c>
   1192e:	9c dd       	rcall	.-1224   	; 0x11468 <ppr_reg>
   11930:	1f 92       	push	r1
   11932:	8f 93       	push	r24
   11934:	df 93       	push	r29
   11936:	cf 93       	push	r28
   11938:	88 e0       	ldi	r24, 0x08	; 8
   1193a:	92 e1       	ldi	r25, 0x12	; 18
   1193c:	1f 92       	push	r1
   1193e:	9f 93       	push	r25
   11940:	8f 93       	push	r24
   11942:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   11946:	8d b7       	in	r24, 0x3d	; 61
   11948:	9e b7       	in	r25, 0x3e	; 62
   1194a:	07 96       	adiw	r24, 0x07	; 7
   1194c:	0f b6       	in	r0, 0x3f	; 63
   1194e:	f8 94       	cli
   11950:	9e bf       	out	0x3e, r25	; 62
   11952:	0f be       	out	0x3f, r0	; 63
   11954:	8d bf       	out	0x3d, r24	; 61
   11956:	df 91       	pop	r29
   11958:	cf 91       	pop	r28
   1195a:	08 95       	ret

0001195c <gpib_assert_ifc>:
   1195c:	5c 98       	cbi	0x0b, 4	; 11
   1195e:	54 9a       	sbi	0x0a, 4	; 10
   11960:	6a ef       	ldi	r22, 0xFA	; 250
   11962:	70 e0       	ldi	r23, 0x00	; 0
   11964:	80 e0       	ldi	r24, 0x00	; 0
   11966:	90 e0       	ldi	r25, 0x00	; 0
   11968:	0e 94 3d 2a 	call	0x547a	; 0x547a <delayus>
   1196c:	54 98       	cbi	0x0a, 4	; 10
   1196e:	6a ef       	ldi	r22, 0xFA	; 250
   11970:	70 e0       	ldi	r23, 0x00	; 0
   11972:	80 e0       	ldi	r24, 0x00	; 0
   11974:	90 e0       	ldi	r25, 0x00	; 0
   11976:	0e 94 3d 2a 	call	0x547a	; 0x547a <delayus>
   1197a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1197e:	82 ff       	sbrs	r24, 2
   11980:	0a c0       	rjmp	.+20     	; 0x11996 <gpib_assert_ifc+0x3a>
   11982:	89 ed       	ldi	r24, 0xD9	; 217
   11984:	91 e1       	ldi	r25, 0x11	; 17
   11986:	1f 92       	push	r1
   11988:	9f 93       	push	r25
   1198a:	8f 93       	push	r24
   1198c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   11990:	0f 90       	pop	r0
   11992:	0f 90       	pop	r0
   11994:	0f 90       	pop	r0
   11996:	08 95       	ret

00011998 <gpib_unread>:
   11998:	cf 93       	push	r28
   1199a:	df 93       	push	r29
   1199c:	ec 01       	movw	r28, r24
   1199e:	80 91 af 19 	lds	r24, 0x19AF	; 0x8019af <gpib_unread_f>
   119a2:	81 11       	cpse	r24, r1
   119a4:	08 c0       	rjmp	.+16     	; 0x119b6 <gpib_unread+0x1e>
   119a6:	d0 93 3e 1f 	sts	0x1F3E, r29	; 0x801f3e <gpib_unread_data+0x1>
   119aa:	c0 93 3d 1f 	sts	0x1F3D, r28	; 0x801f3d <gpib_unread_data>
   119ae:	81 e0       	ldi	r24, 0x01	; 1
   119b0:	80 93 af 19 	sts	0x19AF, r24	; 0x8019af <gpib_unread_f>
   119b4:	12 c0       	rjmp	.+36     	; 0x119da <gpib_unread+0x42>
   119b6:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   119ba:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   119be:	85 70       	andi	r24, 0x05	; 5
   119c0:	99 27       	eor	r25, r25
   119c2:	89 2b       	or	r24, r25
   119c4:	51 f0       	breq	.+20     	; 0x119da <gpib_unread+0x42>
   119c6:	86 e9       	ldi	r24, 0x96	; 150
   119c8:	91 e1       	ldi	r25, 0x11	; 17
   119ca:	1f 92       	push	r1
   119cc:	9f 93       	push	r25
   119ce:	8f 93       	push	r24
   119d0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   119d4:	0f 90       	pop	r0
   119d6:	0f 90       	pop	r0
   119d8:	0f 90       	pop	r0
   119da:	ce 01       	movw	r24, r28
   119dc:	df 91       	pop	r29
   119de:	cf 91       	pop	r28
   119e0:	08 95       	ret

000119e2 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   119e2:	11 b8       	out	0x01, r1	; 1
   119e4:	80 b1       	in	r24, 0x00	; 0
   119e6:	80 95       	com	r24

    ///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   119e8:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   119ea:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   119ec:	08 95       	ret

000119ee <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   119ee:	4e 99       	sbic	0x09, 6	; 9
   119f0:	03 c0       	rjmp	.+6      	; 0x119f8 <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   119f2:	80 e0       	ldi	r24, 0x00	; 0
   119f4:	94 e0       	ldi	r25, 0x04	; 4
   119f6:	02 c0       	rjmp	.+4      	; 0x119fc <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   119f8:	80 e0       	ldi	r24, 0x00	; 0
   119fa:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   119fc:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   119fe:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   11a00:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   11a02:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   11a04:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   11a06:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   11a08:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   11a0a:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   11a0c:	08 95       	ret

00011a0e <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   11a0e:	19 99       	sbic	0x03, 1	; 3
   11a10:	03 c0       	rjmp	.+6      	; 0x11a18 <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   11a12:	80 e0       	ldi	r24, 0x00	; 0
   11a14:	90 e2       	ldi	r25, 0x20	; 32
   11a16:	02 c0       	rjmp	.+4      	; 0x11a1c <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   11a18:	80 e0       	ldi	r24, 0x00	; 0
   11a1a:	90 e0       	ldi	r25, 0x00	; 0
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   11a1c:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   11a1e:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   11a20:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   11a22:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   11a24:	08 95       	ret

00011a26 <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   11a26:	2f 92       	push	r2
   11a28:	3f 92       	push	r3
   11a2a:	4f 92       	push	r4
   11a2c:	6f 92       	push	r6
   11a2e:	7f 92       	push	r7
   11a30:	8f 92       	push	r8
   11a32:	cf 92       	push	r12
   11a34:	df 92       	push	r13
   11a36:	ef 92       	push	r14
   11a38:	1f 93       	push	r17
   11a3a:	cf 93       	push	r28
   11a3c:	df 93       	push	r29
   11a3e:	cd b7       	in	r28, 0x3d	; 61
   11a40:	de b7       	in	r29, 0x3e	; 62
   11a42:	28 97       	sbiw	r28, 0x08	; 8
   11a44:	0f b6       	in	r0, 0x3f	; 63
   11a46:	f8 94       	cli
   11a48:	de bf       	out	0x3e, r29	; 62
   11a4a:	0f be       	out	0x3f, r0	; 63
   11a4c:	cd bf       	out	0x3d, r28	; 61
   11a4e:	98 87       	std	Y+8, r25	; 0x08
   11a50:	8f 83       	std	Y+7, r24	; 0x07
    uint8_t tx_state;

	// Wait for DAV to be released before starting
	// Read state for DAV
	gpib_bus_read_init(0);
   11a52:	80 e0       	ldi	r24, 0x00	; 0
   11a54:	90 e0       	ldi	r25, 0x00	; 0
   11a56:	ad de       	rcall	.-678    	; 0x117b2 <gpib_bus_read_init>
	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   11a58:	64 ef       	ldi	r22, 0xF4	; 244
   11a5a:	71 e0       	ldi	r23, 0x01	; 1
   11a5c:	80 e0       	ldi	r24, 0x00	; 0
   11a5e:	90 e0       	ldi	r25, 0x00	; 0
   11a60:	9e de       	rcall	.-708    	; 0x1179e <gpib_timeout_set>

	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
   11a62:	10 e0       	ldi	r17, 0x00	; 0
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   11a64:	84 e0       	ldi	r24, 0x04	; 4
   11a66:	91 e1       	ldi	r25, 0x11	; 17
   11a68:	6c 01       	movw	r12, r24
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NDAC==1>\n");
   11a6a:	8e e1       	ldi	r24, 0x1E	; 30
   11a6c:	91 e1       	ldi	r25, 0x11	; 17
   11a6e:	3c 01       	movw	r6, r24
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==0>\n");
   11a70:	89 e3       	ldi	r24, 0x39	; 57
   11a72:	91 e1       	ldi	r25, 0x11	; 17
   11a74:	1c 01       	movw	r2, r24
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   11a76:	84 e5       	ldi	r24, 0x54	; 84
   11a78:	91 e1       	ldi	r25, 0x11	; 17
   11a7a:	9c 01       	movw	r18, r24
   11a7c:	40 e0       	ldi	r20, 0x00	; 0
   11a7e:	29 83       	std	Y+1, r18	; 0x01
   11a80:	3a 83       	std	Y+2, r19	; 0x02
   11a82:	4b 83       	std	Y+3, r20	; 0x03
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   11a84:	8c e7       	ldi	r24, 0x7C	; 124
   11a86:	91 e1       	ldi	r25, 0x11	; 17
   11a88:	9c 01       	movw	r18, r24
   11a8a:	40 e0       	ldi	r20, 0x00	; 0
   11a8c:	2c 83       	std	Y+4, r18	; 0x04
   11a8e:	3d 83       	std	Y+5, r19	; 0x05
   11a90:	4e 83       	std	Y+6, r20	; 0x06
    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
    {
        if(uart_keyhit(0))
   11a92:	80 e0       	ldi	r24, 0x00	; 0
   11a94:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <uart_keyhit>
   11a98:	89 2b       	or	r24, r25
   11a9a:	09 f0       	breq	.+2      	; 0x11a9e <gpib_write_byte+0x78>
   11a9c:	17 c1       	rjmp	.+558    	; 0x11ccc <gpib_write_byte+0x2a6>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   11a9e:	4c 99       	sbic	0x09, 4	; 9
   11aa0:	07 c0       	rjmp	.+14     	; 0x11ab0 <gpib_write_byte+0x8a>
        {
            ch |= IFC_FLAG;
   11aa2:	8f 81       	ldd	r24, Y+7	; 0x07
   11aa4:	98 85       	ldd	r25, Y+8	; 0x08
   11aa6:	90 61       	ori	r25, 0x10	; 16
   11aa8:	98 87       	std	Y+8, r25	; 0x08
			gpib_bus_init();
   11aaa:	8f 83       	std	Y+7, r24	; 0x07
   11aac:	a5 de       	rcall	.-694    	; 0x117f8 <gpib_bus_init>
            break;
   11aae:	0e c1       	rjmp	.+540    	; 0x11ccc <gpib_write_byte+0x2a6>
        }

        switch(tx_state)
   11ab0:	81 2f       	mov	r24, r17
   11ab2:	90 e0       	ldi	r25, 0x00	; 0
   11ab4:	8a 30       	cpi	r24, 0x0A	; 10
   11ab6:	91 05       	cpc	r25, r1
   11ab8:	08 f0       	brcs	.+2      	; 0x11abc <gpib_write_byte+0x96>
   11aba:	fe c0       	rjmp	.+508    	; 0x11cb8 <gpib_write_byte+0x292>
   11abc:	fc 01       	movw	r30, r24
   11abe:	e3 54       	subi	r30, 0x43	; 67
   11ac0:	ff 4f       	sbci	r31, 0xFF	; 255
   11ac2:	0c 94 60 e9 	jmp	0x1d2c0	; 0x1d2c0 <__tablejump2__>
        {
            case GPIB_TX_START:
                // Wait for release of DAV and EOI before starting
				// IF DAV = 0 the bus is busy
                if(GPIB_PIN_TST(DAV) == 1)
   11ac6:	19 9b       	sbis	0x03, 1	; 3
   11ac8:	12 c0       	rjmp	.+36     	; 0x11aee <gpib_write_byte+0xc8>
					// We arive here in Read Mode - see gpib_bus_read_init(0);

					// Switch GBIB driver direction to Write
					// CPU has BUS already set IN with pullups = 0xff - see gpib_bus_read_init(0);
					// When we switch the GPIB drivers will be in OC mode and off the bus (0xff)
					GPIB_IO_HI(TE); // BUS OUT, DAV OUT, NRFD and NDAC IN
   11aca:	42 9a       	sbi	0x08, 2	; 8
   11acc:	3a 9a       	sbi	0x07, 2	; 7
					GPIB_IO_LOW(DC);// ATN OUT, EOI OUT, SRQ IN
   11ace:	44 98       	cbi	0x08, 4	; 8
   11ad0:	3c 9a       	sbi	0x07, 4	; 7
#endif
                    // My testing with various GPIB devices shows that we MUST assert ATN EARLY!
                    if(ch & ATN_FLAG)
   11ad2:	2f 81       	ldd	r18, Y+7	; 0x07
   11ad4:	38 85       	ldd	r19, Y+8	; 0x08
   11ad6:	32 ff       	sbrs	r19, 2
   11ad8:	03 c0       	rjmp	.+6      	; 0x11ae0 <gpib_write_byte+0xba>
                        GPIB_IO_LOW(ATN);   // FYI: SS80 never sends ATN from a device
   11ada:	5e 98       	cbi	0x0b, 6	; 11
   11adc:	56 9a       	sbi	0x0a, 6	; 10
   11ade:	01 c0       	rjmp	.+2      	; 0x11ae2 <gpib_write_byte+0xbc>
                    else
                        GPIB_PIN_FLOAT_UP(ATN);
   11ae0:	56 98       	cbi	0x0a, 6	; 10

                    gpib_timeout_set(HTIMEOUT);
   11ae2:	64 ef       	ldi	r22, 0xF4	; 244
   11ae4:	71 e0       	ldi	r23, 0x01	; 1
   11ae6:	80 e0       	ldi	r24, 0x00	; 0
   11ae8:	90 e0       	ldi	r25, 0x00	; 0
   11aea:	59 de       	rcall	.-846    	; 0x1179e <gpib_timeout_set>
                    tx_state = GPIB_TX_WAIT_READY;
   11aec:	11 e0       	ldi	r17, 0x01	; 1
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11aee:	80 91 32 1d 	lds	r24, 0x1D32	; 0x801d32 <gpib_timer+0x8>
                        GPIB_PIN_FLOAT_UP(ATN);

                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_READY;
                }
                if (gpib_timeout_test())
   11af2:	88 23       	and	r24, r24
   11af4:	71 f2       	breq	.-100    	; 0x11a92 <gpib_write_byte+0x6c>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   11af6:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   11afa:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   11afe:	85 70       	andi	r24, 0x05	; 5
   11b00:	99 27       	eor	r25, r25
   11b02:	89 2b       	or	r24, r25
   11b04:	39 f1       	breq	.+78     	; 0x11b54 <gpib_write_byte+0x12e>
                        printf("<BUS waiting for DAV==1>\n");
   11b06:	1f 92       	push	r1
   11b08:	3d 81       	ldd	r19, Y+5	; 0x05
   11b0a:	3f 93       	push	r19
   11b0c:	4c 81       	ldd	r20, Y+4	; 0x04
   11b0e:	4f 93       	push	r20
   11b10:	1c c0       	rjmp	.+56     	; 0x11b4a <gpib_write_byte+0x124>
                }
                break;

            case GPIB_TX_WAIT_READY:
                // Wait for ready condition
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
   11b12:	4a 9b       	sbis	0x09, 2	; 9
   11b14:	08 c0       	rjmp	.+16     	; 0x11b26 <gpib_write_byte+0x100>
   11b16:	4b 99       	sbic	0x09, 3	; 9
                {
                    gpib_timeout_set(HTIMEOUT);
   11b18:	06 c0       	rjmp	.+12     	; 0x11b26 <gpib_write_byte+0x100>
   11b1a:	64 ef       	ldi	r22, 0xF4	; 244
   11b1c:	71 e0       	ldi	r23, 0x01	; 1
   11b1e:	80 e0       	ldi	r24, 0x00	; 0
   11b20:	90 e0       	ldi	r25, 0x00	; 0
                    tx_state = GPIB_TX_PUT_DATA;
   11b22:	3d de       	rcall	.-902    	; 0x1179e <gpib_timeout_set>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11b24:	12 e0       	ldi	r17, 0x02	; 2
   11b26:	80 91 32 1d 	lds	r24, 0x1D32	; 0x801d32 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_PUT_DATA;
                }
                if (gpib_timeout_test())
   11b2a:	88 23       	and	r24, r24
   11b2c:	09 f4       	brne	.+2      	; 0x11b30 <gpib_write_byte+0x10a>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   11b2e:	b1 cf       	rjmp	.-158    	; 0x11a92 <gpib_write_byte+0x6c>
   11b30:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   11b34:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   11b38:	85 70       	andi	r24, 0x05	; 5
   11b3a:	99 27       	eor	r25, r25
   11b3c:	89 2b       	or	r24, r25
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   11b3e:	51 f0       	breq	.+20     	; 0x11b54 <gpib_write_byte+0x12e>
   11b40:	1f 92       	push	r1
   11b42:	9a 81       	ldd	r25, Y+2	; 0x02
   11b44:	9f 93       	push	r25
   11b46:	29 81       	ldd	r18, Y+1	; 0x01
   11b48:	2f 93       	push	r18
   11b4a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   11b4e:	0f 90       	pop	r0
   11b50:	0f 90       	pop	r0
#endif
                    ch |= TIMEOUT_FLAG;
   11b52:	0f 90       	pop	r0
   11b54:	8f 81       	ldd	r24, Y+7	; 0x07
   11b56:	98 85       	ldd	r25, Y+8	; 0x08
   11b58:	90 64       	ori	r25, 0x40	; 64
   11b5a:	98 87       	std	Y+8, r25	; 0x08
   11b5c:	8f 83       	std	Y+7, r24	; 0x07
                }
                break;

            case GPIB_TX_PUT_DATA:

                if(ch & EOI_FLAG)
   11b5e:	b4 c0       	rjmp	.+360    	; 0x11cc8 <gpib_write_byte+0x2a2>
   11b60:	2f 81       	ldd	r18, Y+7	; 0x07
   11b62:	38 85       	ldd	r19, Y+8	; 0x08
   11b64:	30 ff       	sbrs	r19, 0
                    GPIB_IO_LOW(EOI);
   11b66:	03 c0       	rjmp	.+6      	; 0x11b6e <gpib_write_byte+0x148>
   11b68:	28 98       	cbi	0x05, 0	; 5
   11b6a:	20 9a       	sbi	0x04, 0	; 4
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   11b6c:	01 c0       	rjmp	.+2      	; 0x11b70 <gpib_write_byte+0x14a>

                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   11b6e:	20 98       	cbi	0x04, 0	; 4
   11b70:	8f ef       	ldi	r24, 0xFF	; 255
   11b72:	81 b9       	out	0x01, r24	; 1
   11b74:	8f 81       	ldd	r24, Y+7	; 0x07
   11b76:	80 95       	com	r24
#if BOARD == 2
				// Switch to Tristate mode to soeed up Write
                GPIB_IO_HI(PE); 
   11b78:	82 b9       	out	0x02, r24	; 2
   11b7a:	43 9a       	sbi	0x08, 3	; 8
   11b7c:	3b 9a       	sbi	0x07, 3	; 7
   11b7e:	3d e0       	ldi	r19, 0x0D	; 13
   11b80:	3a 95       	dec	r19
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   11b82:	f1 f7       	brne	.-4      	; 0x11b80 <gpib_write_byte+0x15a>
   11b84:	00 00       	nop
   11b86:	64 ef       	ldi	r22, 0xF4	; 244
   11b88:	71 e0       	ldi	r23, 0x01	; 1
   11b8a:	80 e0       	ldi	r24, 0x00	; 0
   11b8c:	90 e0       	ldi	r25, 0x00	; 0
                tx_state = GPIB_TX_SET_DAV_LOW;
   11b8e:	07 de       	rcall	.-1010   	; 0x1179e <gpib_timeout_set>
                break;


            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   11b90:	13 e0       	ldi	r17, 0x03	; 3
                gpib_timeout_set(HTIMEOUT);
   11b92:	7f cf       	rjmp	.-258    	; 0x11a92 <gpib_write_byte+0x6c>
   11b94:	29 98       	cbi	0x05, 1	; 5
   11b96:	21 9a       	sbi	0x04, 1	; 4
   11b98:	64 ef       	ldi	r22, 0xF4	; 244
   11b9a:	71 e0       	ldi	r23, 0x01	; 1
   11b9c:	80 e0       	ldi	r24, 0x00	; 0
                tx_state = GPIB_TX_WAIT_FOR_NRFD_LOW;
                break;

            ///@brief first device is ready
            case GPIB_TX_WAIT_FOR_NRFD_LOW:
                if (GPIB_PIN_TST(NRFD) == 0)
   11b9e:	90 e0       	ldi	r25, 0x00	; 0
   11ba0:	fe dd       	rcall	.-1028   	; 0x1179e <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   11ba2:	14 e0       	ldi	r17, 0x04	; 4
   11ba4:	76 cf       	rjmp	.-276    	; 0x11a92 <gpib_write_byte+0x6c>
   11ba6:	4a 99       	sbic	0x09, 2	; 9
   11ba8:	07 c0       	rjmp	.+14     	; 0x11bb8 <gpib_write_byte+0x192>
   11baa:	64 ef       	ldi	r22, 0xF4	; 244
   11bac:	71 e0       	ldi	r23, 0x01	; 1
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   11bae:	80 e0       	ldi	r24, 0x00	; 0
                    break;
   11bb0:	90 e0       	ldi	r25, 0x00	; 0
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11bb2:	f5 dd       	rcall	.-1046   	; 0x1179e <gpib_timeout_set>
   11bb4:	15 e0       	ldi	r17, 0x05	; 5
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
                    break;
                }
                if (gpib_timeout_test())
   11bb6:	6d cf       	rjmp	.-294    	; 0x11a92 <gpib_write_byte+0x6c>
   11bb8:	80 91 32 1d 	lds	r24, 0x1D32	; 0x801d32 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11bbc:	88 23       	and	r24, r24
   11bbe:	09 f4       	brne	.+2      	; 0x11bc2 <gpib_write_byte+0x19c>
   11bc0:	68 cf       	rjmp	.-304    	; 0x11a92 <gpib_write_byte+0x6c>
   11bc2:	8f 81       	ldd	r24, Y+7	; 0x07
   11bc4:	98 85       	ldd	r25, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   11bc6:	90 64       	ori	r25, 0x40	; 64
   11bc8:	98 87       	std	Y+8, r25	; 0x08
   11bca:	8f 83       	std	Y+7, r24	; 0x07
   11bcc:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   11bd0:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   11bd4:	85 70       	andi	r24, 0x05	; 5
   11bd6:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NRFD==0>\n");
   11bd8:	89 2b       	or	r24, r25
   11bda:	09 f4       	brne	.+2      	; 0x11bde <gpib_write_byte+0x1b8>
   11bdc:	75 c0       	rjmp	.+234    	; 0x11cc8 <gpib_write_byte+0x2a2>
   11bde:	1f 92       	push	r1
                }
                break;

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
   11be0:	3f 92       	push	r3
   11be2:	2f 92       	push	r2
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11be4:	3f c0       	rjmp	.+126    	; 0x11c64 <gpib_write_byte+0x23e>
   11be6:	4b 99       	sbic	0x09, 3	; 9
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   11be8:	6b c0       	rjmp	.+214    	; 0x11cc0 <gpib_write_byte+0x29a>
   11bea:	80 91 32 1d 	lds	r24, 0x1D32	; 0x801d32 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11bee:	88 23       	and	r24, r24
   11bf0:	09 f4       	brne	.+2      	; 0x11bf4 <gpib_write_byte+0x1ce>
   11bf2:	4f cf       	rjmp	.-354    	; 0x11a92 <gpib_write_byte+0x6c>
   11bf4:	2f 81       	ldd	r18, Y+7	; 0x07
   11bf6:	38 85       	ldd	r19, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   11bf8:	30 64       	ori	r19, 0x40	; 64
   11bfa:	38 87       	std	Y+8, r19	; 0x08
   11bfc:	2f 83       	std	Y+7, r18	; 0x07
   11bfe:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   11c02:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   11c06:	85 70       	andi	r24, 0x05	; 5
   11c08:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NDAC==1>\n");
   11c0a:	89 2b       	or	r24, r25
   11c0c:	09 f4       	brne	.+2      	; 0x11c10 <gpib_write_byte+0x1ea>
   11c0e:	5c c0       	rjmp	.+184    	; 0x11cc8 <gpib_write_byte+0x2a2>
                }
                break;

            ///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   11c10:	1f 92       	push	r1
   11c12:	7f 92       	push	r7
   11c14:	6f 92       	push	r6
   11c16:	26 c0       	rjmp	.+76     	; 0x11c64 <gpib_write_byte+0x23e>
				GPIB_BUS_SETTLE();			// give some time

				gpib_bus_read_init(0);		// Free BUS, NOT busy
   11c18:	21 98       	cbi	0x04, 1	; 4
   11c1a:	3d e0       	ldi	r19, 0x0D	; 13
   11c1c:	3a 95       	dec	r19
   11c1e:	f1 f7       	brne	.-4      	; 0x11c1c <gpib_write_byte+0x1f6>

                gpib_timeout_set(HTIMEOUT);
   11c20:	00 00       	nop
   11c22:	80 e0       	ldi	r24, 0x00	; 0
   11c24:	90 e0       	ldi	r25, 0x00	; 0
   11c26:	c5 dd       	rcall	.-1142   	; 0x117b2 <gpib_bus_read_init>
   11c28:	64 ef       	ldi	r22, 0xF4	; 244
   11c2a:	71 e0       	ldi	r23, 0x01	; 1
                tx_state = GPIB_TX_WAIT_FOR_DAV_HI;
   11c2c:	80 e0       	ldi	r24, 0x00	; 0
                break;
   11c2e:	90 e0       	ldi	r25, 0x00	; 0

			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
   11c30:	b6 dd       	rcall	.-1172   	; 0x1179e <gpib_timeout_set>
   11c32:	17 e0       	ldi	r17, 0x07	; 7
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11c34:	2e cf       	rjmp	.-420    	; 0x11a92 <gpib_write_byte+0x6c>
   11c36:	19 99       	sbic	0x03, 1	; 3
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
                    break;
                }
                if (gpib_timeout_test())
   11c38:	45 c0       	rjmp	.+138    	; 0x11cc4 <gpib_write_byte+0x29e>
   11c3a:	80 91 32 1d 	lds	r24, 0x1D32	; 0x801d32 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11c3e:	88 23       	and	r24, r24
   11c40:	09 f4       	brne	.+2      	; 0x11c44 <gpib_write_byte+0x21e>
   11c42:	27 cf       	rjmp	.-434    	; 0x11a92 <gpib_write_byte+0x6c>
   11c44:	8f 81       	ldd	r24, Y+7	; 0x07
   11c46:	98 85       	ldd	r25, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   11c48:	90 64       	ori	r25, 0x40	; 64
   11c4a:	98 87       	std	Y+8, r25	; 0x08
   11c4c:	8f 83       	std	Y+7, r24	; 0x07
   11c4e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   11c52:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   11c56:	85 70       	andi	r24, 0x05	; 5
                        printf("<BUS waiting for DAV==1>\n");
   11c58:	99 27       	eor	r25, r25
   11c5a:	89 2b       	or	r24, r25
   11c5c:	a9 f1       	breq	.+106    	; 0x11cc8 <gpib_write_byte+0x2a2>
   11c5e:	1f 92       	push	r1
   11c60:	df 92       	push	r13
   11c62:	cf 92       	push	r12
   11c64:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   11c68:	0f 90       	pop	r0
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
#if SDEBUG
                if(debuglevel & (1+4))
   11c6a:	0f 90       	pop	r0
   11c6c:	0f 90       	pop	r0
   11c6e:	2c c0       	rjmp	.+88     	; 0x11cc8 <gpib_write_byte+0x2a2>
   11c70:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   11c74:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   11c78:	85 70       	andi	r24, 0x05	; 5
                    printf("<NRFD=%d,NDAV=%d>\n", GPIB_PIN_TST(NRFD),GPIB_PIN_TST(NDAC));
   11c7a:	99 27       	eor	r25, r25
   11c7c:	89 2b       	or	r24, r25
   11c7e:	c1 f0       	breq	.+48     	; 0x11cb0 <gpib_write_byte+0x28a>
   11c80:	99 b1       	in	r25, 0x09	; 9
   11c82:	89 b1       	in	r24, 0x09	; 9
   11c84:	93 fb       	bst	r25, 3
   11c86:	99 27       	eor	r25, r25
   11c88:	90 f9       	bld	r25, 0
   11c8a:	1f 92       	push	r1
   11c8c:	9f 93       	push	r25
   11c8e:	82 fb       	bst	r24, 2
   11c90:	88 27       	eor	r24, r24
   11c92:	80 f9       	bld	r24, 0
   11c94:	1f 92       	push	r1
   11c96:	8f 93       	push	r24
   11c98:	81 ef       	ldi	r24, 0xF1	; 241
   11c9a:	90 e1       	ldi	r25, 0x10	; 16
   11c9c:	1f 92       	push	r1
   11c9e:	9f 93       	push	r25
   11ca0:	8f 93       	push	r24
   11ca2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   11ca6:	0f b6       	in	r0, 0x3f	; 63
#endif
// Free BUS, BUSY on error
				gpib_bus_read_init(1);		
   11ca8:	f8 94       	cli
   11caa:	de bf       	out	0x3e, r29	; 62
   11cac:	0f be       	out	0x3f, r0	; 63
   11cae:	cd bf       	out	0x3d, r28	; 61
                tx_state = GPIB_TX_DONE;
                break;
   11cb0:	81 e0       	ldi	r24, 0x01	; 1
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
   11cb2:	90 e0       	ldi	r25, 0x00	; 0
   11cb4:	7e dd       	rcall	.-1284   	; 0x117b2 <gpib_bus_read_init>
   11cb6:	0a c0       	rjmp	.+20     	; 0x11ccc <gpib_write_byte+0x2a6>
   11cb8:	1a 30       	cpi	r17, 0x0A	; 10

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   11cba:	09 f0       	breq	.+2      	; 0x11cbe <gpib_write_byte+0x298>
   11cbc:	ea ce       	rjmp	.-556    	; 0x11a92 <gpib_write_byte+0x6c>
			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
   11cbe:	06 c0       	rjmp	.+12     	; 0x11ccc <gpib_write_byte+0x2a6>
   11cc0:	16 e0       	ldi	r17, 0x06	; 6
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   11cc2:	e7 ce       	rjmp	.-562    	; 0x11a92 <gpib_write_byte+0x6c>
   11cc4:	18 e0       	ldi	r17, 0x08	; 8
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   11cc6:	e5 ce       	rjmp	.-566    	; 0x11a92 <gpib_write_byte+0x6c>
   11cc8:	19 e0       	ldi	r17, 0x09	; 9
   11cca:	e3 ce       	rjmp	.-570    	; 0x11a92 <gpib_write_byte+0x6c>
   11ccc:	8f 81       	ldd	r24, Y+7	; 0x07
   11cce:	98 85       	ldd	r25, Y+8	; 0x08
   11cd0:	28 96       	adiw	r28, 0x08	; 8
   11cd2:	0f b6       	in	r0, 0x3f	; 63
   11cd4:	f8 94       	cli
   11cd6:	de bf       	out	0x3e, r29	; 62
   11cd8:	0f be       	out	0x3f, r0	; 63
   11cda:	cd bf       	out	0x3d, r28	; 61
   11cdc:	df 91       	pop	r29
   11cde:	cf 91       	pop	r28
   11ce0:	1f 91       	pop	r17
   11ce2:	ef 90       	pop	r14
   11ce4:	df 90       	pop	r13
   11ce6:	cf 90       	pop	r12
   11ce8:	8f 90       	pop	r8
   11cea:	7f 90       	pop	r7
   11cec:	6f 90       	pop	r6
   11cee:	4f 90       	pop	r4
   11cf0:	3f 90       	pop	r3
   11cf2:	2f 90       	pop	r2
   11cf4:	08 95       	ret

00011cf6 <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   11cf6:	cf 93       	push	r28
   11cf8:	df 93       	push	r29
   11cfa:	ec 01       	movw	r28, r24
    if(fo == NULL)
   11cfc:	89 2b       	or	r24, r25
   11cfe:	21 f4       	brne	.+8      	; 0x11d08 <gpib_decode_header+0x12>
        fo = stdout;
   11d00:	c0 91 0c 1d 	lds	r28, 0x1D0C	; 0x801d0c <__iob+0x2>
   11d04:	d0 91 0d 1d 	lds	r29, 0x1D0D	; 0x801d0d <__iob+0x3>
        
    fprintf(fo,"===========================================\n");
   11d08:	be 01       	movw	r22, r28
   11d0a:	8b e0       	ldi	r24, 0x0B	; 11
   11d0c:	9c e0       	ldi	r25, 0x0C	; 12
   11d0e:	0e 94 54 79 	call	0xf2a8	; 0xf2a8 <fputs>
    fprintf(fo,"GPIB bus state\n");
   11d12:	be 01       	movw	r22, r28
   11d14:	88 e3       	ldi	r24, 0x38	; 56
   11d16:	9c e0       	ldi	r25, 0x0C	; 12
   11d18:	0e 94 54 79 	call	0xf2a8	; 0xf2a8 <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   11d1c:	be 01       	movw	r22, r28
   11d1e:	88 e4       	ldi	r24, 0x48	; 72
   11d20:	9c e0       	ldi	r25, 0x0C	; 12
   11d22:	0e 94 54 79 	call	0xf2a8	; 0xf2a8 <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   11d26:	be 01       	movw	r22, r28
   11d28:	8c e5       	ldi	r24, 0x5C	; 92
   11d2a:	9c e0       	ldi	r25, 0x0C	; 12
   11d2c:	0e 94 54 79 	call	0xf2a8	; 0xf2a8 <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   11d30:	be 01       	movw	r22, r28
   11d32:	8f e7       	ldi	r24, 0x7F	; 127
   11d34:	9c e0       	ldi	r25, 0x0C	; 12
   11d36:	0e 94 54 79 	call	0xf2a8	; 0xf2a8 <fputs>
    fprintf(fo,"     A = ATN\n");
   11d3a:	be 01       	movw	r22, r28
   11d3c:	89 ea       	ldi	r24, 0xA9	; 169
   11d3e:	9c e0       	ldi	r25, 0x0C	; 12
   11d40:	0e 94 54 79 	call	0xf2a8	; 0xf2a8 <fputs>
    fprintf(fo,"      E = EOI\n");
   11d44:	be 01       	movw	r22, r28
   11d46:	87 eb       	ldi	r24, 0xB7	; 183
   11d48:	9c e0       	ldi	r25, 0x0C	; 12
   11d4a:	0e 94 54 79 	call	0xf2a8	; 0xf2a8 <fputs>
    fprintf(fo,"       S = SRQ\n");
   11d4e:	be 01       	movw	r22, r28
   11d50:	86 ec       	ldi	r24, 0xC6	; 198
   11d52:	9c e0       	ldi	r25, 0x0C	; 12
   11d54:	0e 94 54 79 	call	0xf2a8	; 0xf2a8 <fputs>
    fprintf(fo,"        R = REN\n");
   11d58:	be 01       	movw	r22, r28
   11d5a:	86 ed       	ldi	r24, 0xD6	; 214
   11d5c:	9c e0       	ldi	r25, 0x0C	; 12
   11d5e:	0e 94 54 79 	call	0xf2a8	; 0xf2a8 <fputs>
    fprintf(fo,"         I = IFC\n");
   11d62:	be 01       	movw	r22, r28
   11d64:	87 ee       	ldi	r24, 0xE7	; 231
   11d66:	9c e0       	ldi	r25, 0x0C	; 12
   11d68:	0e 94 54 79 	call	0xf2a8	; 0xf2a8 <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   11d6c:	be 01       	movw	r22, r28
   11d6e:	89 ef       	ldi	r24, 0xF9	; 249
   11d70:	9c e0       	ldi	r25, 0x0C	; 12
   11d72:	0e 94 54 79 	call	0xf2a8	; 0xf2a8 <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   11d76:	be 01       	movw	r22, r28
   11d78:	8b e1       	ldi	r24, 0x1B	; 27
   11d7a:	9d e0       	ldi	r25, 0x0D	; 13
   11d7c:	0e 94 54 79 	call	0xf2a8	; 0xf2a8 <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   11d80:	be 01       	movw	r22, r28
   11d82:	83 e3       	ldi	r24, 0x33	; 51
   11d84:	9d e0       	ldi	r25, 0x0D	; 13
   11d86:	0e 94 54 79 	call	0xf2a8	; 0xf2a8 <fputs>
    fprintf(fo,"              GPIB commands\n");
   11d8a:	be 01       	movw	r22, r28
   11d8c:	8e e4       	ldi	r24, 0x4E	; 78
   11d8e:	9d e0       	ldi	r25, 0x0D	; 13
   11d90:	0e 94 54 79 	call	0xf2a8	; 0xf2a8 <fputs>
}
   11d94:	df 91       	pop	r29
   11d96:	cf 91       	pop	r28
   11d98:	08 95       	ret

00011d9a <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   11d9a:	a0 e8       	ldi	r26, 0x80	; 128
   11d9c:	b0 e0       	ldi	r27, 0x00	; 0
   11d9e:	e3 ed       	ldi	r30, 0xD3	; 211
   11da0:	fe e8       	ldi	r31, 0x8E	; 142
   11da2:	0c 94 95 e9 	jmp	0x1d32a	; 0x1d32a <__prologue_saves__+0xc>
   11da6:	8c 01       	movw	r16, r24
   11da8:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   11daa:	19 82       	std	Y+1, r1	; 0x01
   11dac:	4c 01       	movw	r8, r24
   11dae:	88 24       	eor	r8, r8
   11db0:	44 e0       	ldi	r20, 0x04	; 4
   11db2:	94 22       	and	r9, r20
   11db4:	ce 01       	movw	r24, r28
   11db6:	01 96       	adiw	r24, 0x01	; 1
   11db8:	6c 01       	movw	r12, r24

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   11dba:	62 30       	cpi	r22, 0x02	; 2
   11dbc:	71 05       	cpc	r23, r1
   11dbe:	f0 f4       	brcc	.+60     	; 0x11dfc <gpib_trace_display+0x62>
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   11dc0:	81 14       	cp	r8, r1
   11dc2:	91 04       	cpc	r9, r1
   11dc4:	29 f4       	brne	.+10     	; 0x11dd0 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   11dc6:	80 2f       	mov	r24, r16

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   11dc8:	90 ee       	ldi	r25, 0xE0	; 224
   11dca:	90 0f       	add	r25, r16
   11dcc:	9f 35       	cpi	r25, 0x5F	; 95
   11dce:	08 f0       	brcs	.+2      	; 0x11dd2 <gpib_trace_display+0x38>
    str[0] = 0;

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
   11dd0:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   11dd2:	1f 92       	push	r1
   11dd4:	8f 93       	push	r24
   11dd6:	c8 01       	movw	r24, r16
   11dd8:	99 27       	eor	r25, r25
   11dda:	9f 93       	push	r25
   11ddc:	8f 93       	push	r24
   11dde:	88 ee       	ldi	r24, 0xE8	; 232
   11de0:	90 e1       	ldi	r25, 0x10	; 16
   11de2:	1f 92       	push	r1
   11de4:	9f 93       	push	r25
   11de6:	8f 93       	push	r24
   11de8:	df 92       	push	r13
   11dea:	cf 92       	push	r12
   11dec:	0e 94 fa 44 	call	0x89f4	; 0x89f4 <sprintf_P>
   11df0:	0f b6       	in	r0, 0x3f	; 63
   11df2:	f8 94       	cli
   11df4:	de bf       	out	0x3e, r29	; 62
   11df6:	0f be       	out	0x3f, r0	; 63
   11df8:	cd bf       	out	0x3d, r28	; 61
   11dfa:	0e c0       	rjmp	.+28     	; 0x11e18 <gpib_trace_display+0x7e>
    }
    else
    {
        sprintf(str, "     ");
   11dfc:	82 ee       	ldi	r24, 0xE2	; 226
   11dfe:	90 e1       	ldi	r25, 0x10	; 16
   11e00:	1f 92       	push	r1
   11e02:	9f 93       	push	r25
   11e04:	8f 93       	push	r24
   11e06:	df 92       	push	r13
   11e08:	cf 92       	push	r12
   11e0a:	0e 94 fa 44 	call	0x89f4	; 0x89f4 <sprintf_P>
   11e0e:	0f 90       	pop	r0
   11e10:	0f 90       	pop	r0
   11e12:	0f 90       	pop	r0
   11e14:	0f 90       	pop	r0
   11e16:	0f 90       	pop	r0
    }

    tmp = str + strlen(str);
   11e18:	f6 01       	movw	r30, r12
   11e1a:	01 90       	ld	r0, Z+
   11e1c:	00 20       	and	r0, r0
   11e1e:	e9 f7       	brne	.-6      	; 0x11e1a <gpib_trace_display+0x80>
   11e20:	31 97       	sbiw	r30, 0x01	; 1
   11e22:	cf 01       	movw	r24, r30
   11e24:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   11e26:	81 14       	cp	r8, r1
   11e28:	91 04       	cpc	r9, r1
   11e2a:	11 f0       	breq	.+4      	; 0x11e30 <gpib_trace_display+0x96>
        *tmp++ = 'A';
   11e2c:	21 e4       	ldi	r18, 0x41	; 65
   11e2e:	01 c0       	rjmp	.+2      	; 0x11e32 <gpib_trace_display+0x98>
    else
        *tmp++ = '-';
   11e30:	2d e2       	ldi	r18, 0x2D	; 45
   11e32:	20 83       	st	Z, r18
   11e34:	dc 01       	movw	r26, r24
   11e36:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   11e38:	10 ff       	sbrs	r17, 0
   11e3a:	02 c0       	rjmp	.+4      	; 0x11e40 <gpib_trace_display+0xa6>
        *tmp++ = 'E';
   11e3c:	25 e4       	ldi	r18, 0x45	; 69
   11e3e:	01 c0       	rjmp	.+2      	; 0x11e42 <gpib_trace_display+0xa8>
    else
        *tmp++ = '-';
   11e40:	2d e2       	ldi	r18, 0x2D	; 45
   11e42:	fc 01       	movw	r30, r24
   11e44:	20 83       	st	Z, r18
   11e46:	fd 01       	movw	r30, r26
   11e48:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   11e4a:	11 ff       	sbrs	r17, 1
   11e4c:	02 c0       	rjmp	.+4      	; 0x11e52 <gpib_trace_display+0xb8>
        *tmp++ = 'S';
   11e4e:	83 e5       	ldi	r24, 0x53	; 83
   11e50:	01 c0       	rjmp	.+2      	; 0x11e54 <gpib_trace_display+0xba>
    else
        *tmp++ = '-';
   11e52:	8d e2       	ldi	r24, 0x2D	; 45
   11e54:	8c 93       	st	X, r24
   11e56:	df 01       	movw	r26, r30
   11e58:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   11e5a:	13 ff       	sbrs	r17, 3
   11e5c:	02 c0       	rjmp	.+4      	; 0x11e62 <gpib_trace_display+0xc8>
        *tmp++ = 'R';
   11e5e:	82 e5       	ldi	r24, 0x52	; 82
   11e60:	01 c0       	rjmp	.+2      	; 0x11e64 <gpib_trace_display+0xca>
    else
        *tmp++ = '-';
   11e62:	8d e2       	ldi	r24, 0x2D	; 45
   11e64:	80 83       	st	Z, r24
   11e66:	fd 01       	movw	r30, r26
   11e68:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   11e6a:	14 ff       	sbrs	r17, 4
   11e6c:	02 c0       	rjmp	.+4      	; 0x11e72 <gpib_trace_display+0xd8>
        *tmp++ = 'I';
   11e6e:	89 e4       	ldi	r24, 0x49	; 73
   11e70:	01 c0       	rjmp	.+2      	; 0x11e74 <gpib_trace_display+0xda>
    else
        *tmp++ = '-';
   11e72:	8d e2       	ldi	r24, 0x2D	; 45
   11e74:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   11e76:	a1 14       	cp	r10, r1
   11e78:	b1 04       	cpc	r11, r1
   11e7a:	d1 f4       	brne	.+52     	; 0x11eb0 <gpib_trace_display+0x116>
   11e7c:	df 01       	movw	r26, r30
   11e7e:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   11e80:	15 ff       	sbrs	r17, 5
   11e82:	02 c0       	rjmp	.+4      	; 0x11e88 <gpib_trace_display+0xee>
            *tmp++ = 'P';
   11e84:	80 e5       	ldi	r24, 0x50	; 80
   11e86:	01 c0       	rjmp	.+2      	; 0x11e8a <gpib_trace_display+0xf0>
        else
            *tmp++ = '-';
   11e88:	8d e2       	ldi	r24, 0x2D	; 45
   11e8a:	80 83       	st	Z, r24
   11e8c:	fd 01       	movw	r30, r26
   11e8e:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   11e90:	16 ff       	sbrs	r17, 6
   11e92:	02 c0       	rjmp	.+4      	; 0x11e98 <gpib_trace_display+0xfe>
            *tmp++ = 'T';
   11e94:	84 e5       	ldi	r24, 0x54	; 84
   11e96:	01 c0       	rjmp	.+2      	; 0x11e9a <gpib_trace_display+0x100>
        else
            *tmp++ = '-';
   11e98:	8d e2       	ldi	r24, 0x2D	; 45
   11e9a:	8c 93       	st	X, r24
   11e9c:	cf 01       	movw	r24, r30
   11e9e:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   11ea0:	7c 01       	movw	r14, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   11ea2:	17 ff       	sbrs	r17, 7
   11ea4:	02 c0       	rjmp	.+4      	; 0x11eaa <gpib_trace_display+0x110>
            *tmp++ = 'B';
   11ea6:	82 e4       	ldi	r24, 0x42	; 66
   11ea8:	01 c0       	rjmp	.+2      	; 0x11eac <gpib_trace_display+0x112>
        else
            *tmp++ = '-';
   11eaa:	8d e2       	ldi	r24, 0x2D	; 45
   11eac:	80 83       	st	Z, r24
   11eae:	08 c0       	rjmp	.+16     	; 0x11ec0 <gpib_trace_display+0x126>
    }
    else
    {
        // not used when tracing
        *tmp++ = '-';
   11eb0:	8d e2       	ldi	r24, 0x2D	; 45
   11eb2:	80 83       	st	Z, r24
        *tmp++ = '-';
   11eb4:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   11eb6:	7f 01       	movw	r14, r30
   11eb8:	43 e0       	ldi	r20, 0x03	; 3
   11eba:	e4 0e       	add	r14, r20
   11ebc:	f1 1c       	adc	r15, r1
   11ebe:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   11ec0:	f7 01       	movw	r30, r14
   11ec2:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   11ec4:	f1 e0       	ldi	r31, 0x01	; 1
   11ec6:	af 1a       	sub	r10, r31
   11ec8:	b1 08       	sbc	r11, r1
   11eca:	42 e0       	ldi	r20, 0x02	; 2
   11ecc:	a4 16       	cp	r10, r20
   11ece:	b1 04       	cpc	r11, r1
   11ed0:	f0 f4       	brcc	.+60     	; 0x11f0e <gpib_trace_display+0x174>
    {
        if(status & DAV_FLAG)
   11ed2:	15 ff       	sbrs	r17, 5
   11ed4:	03 c0       	rjmp	.+6      	; 0x11edc <gpib_trace_display+0x142>
            strcat(str,"  DAV");
   11ed6:	6b e6       	ldi	r22, 0x6B	; 107
   11ed8:	7d e0       	ldi	r23, 0x0D	; 13
   11eda:	02 c0       	rjmp	.+4      	; 0x11ee0 <gpib_trace_display+0x146>
        else
            strcat(str,"     ");
   11edc:	6b e9       	ldi	r22, 0x9B	; 155
   11ede:	78 e0       	ldi	r23, 0x08	; 8
   11ee0:	c6 01       	movw	r24, r12
   11ee2:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <strcat>
        if(status & NRFD_FLAG)
   11ee6:	16 ff       	sbrs	r17, 6
   11ee8:	03 c0       	rjmp	.+6      	; 0x11ef0 <gpib_trace_display+0x156>
            strcat(str," NRFD");
   11eea:	61 e7       	ldi	r22, 0x71	; 113
   11eec:	7d e0       	ldi	r23, 0x0D	; 13
   11eee:	02 c0       	rjmp	.+4      	; 0x11ef4 <gpib_trace_display+0x15a>
        else
            strcat(str,"     ");
   11ef0:	6b e9       	ldi	r22, 0x9B	; 155
   11ef2:	78 e0       	ldi	r23, 0x08	; 8
   11ef4:	c6 01       	movw	r24, r12
   11ef6:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <strcat>
        if(status & NDAC_FLAG)
   11efa:	17 ff       	sbrs	r17, 7
   11efc:	03 c0       	rjmp	.+6      	; 0x11f04 <gpib_trace_display+0x16a>
            strcat(str," NDAC");
   11efe:	67 e7       	ldi	r22, 0x77	; 119
   11f00:	7d e0       	ldi	r23, 0x0D	; 13
   11f02:	02 c0       	rjmp	.+4      	; 0x11f08 <gpib_trace_display+0x16e>
        else
            strcat(str,"     ");
   11f04:	6b e9       	ldi	r22, 0x9B	; 155
   11f06:	78 e0       	ldi	r23, 0x08	; 8
   11f08:	c6 01       	movw	r24, r12
   11f0a:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <strcat>
    }

    if( (status & ATN_FLAG) )
   11f0e:	81 14       	cp	r8, r1
   11f10:	91 04       	cpc	r9, r1
   11f12:	09 f4       	brne	.+2      	; 0x11f16 <gpib_trace_display+0x17c>
   11f14:	58 c0       	rjmp	.+176    	; 0x11fc6 <gpib_trace_display+0x22c>
    {
        int i;
        int cmd = status & CMD_MASK;
   11f16:	c8 01       	movw	r24, r16
   11f18:	8f 77       	andi	r24, 0x7F	; 127
   11f1a:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   11f1c:	9c 01       	movw	r18, r24
   11f1e:	20 52       	subi	r18, 0x20	; 32
   11f20:	31 09       	sbc	r19, r1
   11f22:	2f 31       	cpi	r18, 0x1F	; 31
   11f24:	31 05       	cpc	r19, r1
   11f26:	38 f4       	brcc	.+14     	; 0x11f36 <gpib_trace_display+0x19c>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   11f28:	0f 71       	andi	r16, 0x1F	; 31
   11f2a:	11 27       	eor	r17, r17
   11f2c:	1f 93       	push	r17
   11f2e:	0f 93       	push	r16
   11f30:	87 ed       	ldi	r24, 0xD7	; 215
   11f32:	90 e1       	ldi	r25, 0x10	; 16
   11f34:	0c c0       	rjmp	.+24     	; 0x11f4e <gpib_trace_display+0x1b4>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   11f36:	9c 01       	movw	r18, r24
   11f38:	20 54       	subi	r18, 0x40	; 64
   11f3a:	31 09       	sbc	r19, r1
   11f3c:	2f 30       	cpi	r18, 0x0F	; 15
   11f3e:	31 05       	cpc	r19, r1
   11f40:	98 f4       	brcc	.+38     	; 0x11f68 <gpib_trace_display+0x1ce>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   11f42:	0f 71       	andi	r16, 0x1F	; 31
   11f44:	11 27       	eor	r17, r17
   11f46:	1f 93       	push	r17
   11f48:	0f 93       	push	r16
   11f4a:	8c ec       	ldi	r24, 0xCC	; 204
   11f4c:	90 e1       	ldi	r25, 0x10	; 16
   11f4e:	1f 92       	push	r1
   11f50:	9f 93       	push	r25
   11f52:	8f 93       	push	r24
   11f54:	ff 92       	push	r15
   11f56:	ef 92       	push	r14
   11f58:	0e 94 fa 44 	call	0x89f4	; 0x89f4 <sprintf_P>
   11f5c:	0f b6       	in	r0, 0x3f	; 63
   11f5e:	f8 94       	cli
   11f60:	de bf       	out	0x3e, r29	; 62
   11f62:	0f be       	out	0x3f, r0	; 63
   11f64:	cd bf       	out	0x3d, r28	; 61
   11f66:	2f c0       	rjmp	.+94     	; 0x11fc6 <gpib_trace_display+0x22c>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   11f68:	9c 01       	movw	r18, r24
   11f6a:	20 56       	subi	r18, 0x60	; 96
   11f6c:	31 09       	sbc	r19, r1
   11f6e:	20 31       	cpi	r18, 0x10	; 16
   11f70:	31 05       	cpc	r19, r1
   11f72:	28 f0       	brcs	.+10     	; 0x11f7e <gpib_trace_display+0x1e4>
   11f74:	ec e7       	ldi	r30, 0x7C	; 124
   11f76:	f1 e0       	ldi	r31, 0x01	; 1
   11f78:	00 e0       	ldi	r16, 0x00	; 0
   11f7a:	10 e0       	ldi	r17, 0x00	; 0
   11f7c:	09 c0       	rjmp	.+18     	; 0x11f90 <gpib_trace_display+0x1f6>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   11f7e:	0f 71       	andi	r16, 0x1F	; 31
   11f80:	11 27       	eor	r17, r17
   11f82:	1f 93       	push	r17
   11f84:	0f 93       	push	r16
   11f86:	81 ec       	ldi	r24, 0xC1	; 193
   11f88:	90 e1       	ldi	r25, 0x10	; 16
   11f8a:	e1 cf       	rjmp	.-62     	; 0x11f4e <gpib_trace_display+0x1b4>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   11f8c:	0f 5f       	subi	r16, 0xFF	; 255
   11f8e:	1f 4f       	sbci	r17, 0xFF	; 255
   11f90:	20 81       	ld	r18, Z
   11f92:	31 81       	ldd	r19, Z+1	; 0x01
   11f94:	2f 3f       	cpi	r18, 0xFF	; 255
   11f96:	4f ef       	ldi	r20, 0xFF	; 255
   11f98:	34 07       	cpc	r19, r20
   11f9a:	a9 f0       	breq	.+42     	; 0x11fc6 <gpib_trace_display+0x22c>
   11f9c:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   11f9e:	82 17       	cp	r24, r18
   11fa0:	93 07       	cpc	r25, r19
   11fa2:	a1 f7       	brne	.-24     	; 0x11f8c <gpib_trace_display+0x1f2>
                {
                    strcat(tmp," ");
   11fa4:	6f e9       	ldi	r22, 0x9F	; 159
   11fa6:	78 e0       	ldi	r23, 0x08	; 8
   11fa8:	c7 01       	movw	r24, r14
   11faa:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   11fae:	00 0f       	add	r16, r16
   11fb0:	11 1f       	adc	r17, r17
   11fb2:	00 0f       	add	r16, r16
   11fb4:	11 1f       	adc	r17, r17
   11fb6:	f8 01       	movw	r30, r16
   11fb8:	e4 58       	subi	r30, 0x84	; 132
   11fba:	fe 4f       	sbci	r31, 0xFE	; 254
   11fbc:	62 81       	ldd	r22, Z+2	; 0x02
   11fbe:	73 81       	ldd	r23, Z+3	; 0x03
   11fc0:	c7 01       	movw	r24, r14
   11fc2:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   11fc6:	20 91 b0 19 	lds	r18, 0x19B0	; 0x8019b0 <gpib_log_fp>
   11fca:	30 91 b1 19 	lds	r19, 0x19B1	; 0x8019b1 <gpib_log_fp+0x1>
   11fce:	80 91 0c 1d 	lds	r24, 0x1D0C	; 0x801d0c <__iob+0x2>
   11fd2:	90 91 0d 1d 	lds	r25, 0x1D0D	; 0x801d0d <__iob+0x3>
   11fd6:	23 2b       	or	r18, r19
   11fd8:	21 f4       	brne	.+8      	; 0x11fe2 <gpib_trace_display+0x248>
        gpib_log_fp = stdout;
   11fda:	90 93 b1 19 	sts	0x19B1, r25	; 0x8019b1 <gpib_log_fp+0x1>
   11fde:	80 93 b0 19 	sts	0x19B0, r24	; 0x8019b0 <gpib_log_fp>

    // Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   11fe2:	20 91 b0 19 	lds	r18, 0x19B0	; 0x8019b0 <gpib_log_fp>
   11fe6:	30 91 b1 19 	lds	r19, 0x19B1	; 0x8019b1 <gpib_log_fp+0x1>
   11fea:	82 17       	cp	r24, r18
   11fec:	93 07       	cpc	r25, r19
   11fee:	19 f0       	breq	.+6      	; 0x11ff6 <gpib_trace_display+0x25c>
        puts(str);
   11ff0:	c6 01       	movw	r24, r12
   11ff2:	0e 94 6c 79 	call	0xf2d8	; 0xf2d8 <puts>

    // Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   11ff6:	df 92       	push	r13
   11ff8:	cf 92       	push	r12
   11ffa:	8d e7       	ldi	r24, 0x7D	; 125
   11ffc:	9d e0       	ldi	r25, 0x0D	; 13
   11ffe:	9f 93       	push	r25
   12000:	8f 93       	push	r24
   12002:	80 91 b1 19 	lds	r24, 0x19B1	; 0x8019b1 <gpib_log_fp+0x1>
   12006:	8f 93       	push	r24
   12008:	80 91 b0 19 	lds	r24, 0x19B0	; 0x8019b0 <gpib_log_fp>
   1200c:	8f 93       	push	r24
   1200e:	0e 94 1d 82 	call	0x1043a	; 0x1043a <fprintf>
}
   12012:	0f 90       	pop	r0
   12014:	0f 90       	pop	r0
   12016:	0f 90       	pop	r0
   12018:	0f 90       	pop	r0
   1201a:	0f 90       	pop	r0
   1201c:	0f 90       	pop	r0
   1201e:	c0 58       	subi	r28, 0x80	; 128
   12020:	df 4f       	sbci	r29, 0xFF	; 255
   12022:	ec e0       	ldi	r30, 0x0C	; 12
   12024:	0c 94 b1 e9 	jmp	0x1d362	; 0x1d362 <__epilogue_restores__+0xc>

00012028 <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   12028:	af 92       	push	r10
   1202a:	bf 92       	push	r11
   1202c:	cf 92       	push	r12
   1202e:	df 92       	push	r13
   12030:	ff 92       	push	r15
   12032:	0f 93       	push	r16
   12034:	1f 93       	push	r17
   12036:	cf 93       	push	r28
   12038:	df 93       	push	r29

    ch = 0;
    control_last = 0;

    // If we have an unread state it has already been traced!
    if(gpib_unread_f)
   1203a:	20 91 af 19 	lds	r18, 0x19AF	; 0x8019af <gpib_unread_f>
   1203e:	22 23       	and	r18, r18
   12040:	39 f0       	breq	.+14     	; 0x12050 <gpib_read_byte+0x28>
    {
        gpib_unread_f = 0;
   12042:	10 92 af 19 	sts	0x19AF, r1	; 0x8019af <gpib_unread_f>
        return(gpib_unread_data);
   12046:	80 91 3d 1f 	lds	r24, 0x1F3D	; 0x801f3d <gpib_unread_data>
   1204a:	90 91 3e 1f 	lds	r25, 0x1F3E	; 0x801f3e <gpib_unread_data+0x1>
   1204e:	b8 c0       	rjmp	.+368    	; 0x121c0 <gpib_read_byte+0x198>
   12050:	6c 01       	movw	r12, r24
    }

	gpib_bus_read_init(1); // Busy until we are ready
   12052:	81 e0       	ldi	r24, 0x01	; 1
   12054:	90 e0       	ldi	r25, 0x00	; 0
   12056:	ad db       	rcall	.-2214   	; 0x117b2 <gpib_bus_read_init>


///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
    if(trace)
   12058:	c1 14       	cp	r12, r1
   1205a:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   1205c:	51 f0       	breq	.+20     	; 0x12072 <gpib_read_byte+0x4a>
   1205e:	c7 dc       	rcall	.-1650   	; 0x119ee <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   12060:	8c 01       	movw	r16, r24
   12062:	d5 dc       	rcall	.-1622   	; 0x11a0e <gpib_handshake_pin_read>
   12064:	08 2b       	or	r16, r24
        gpib_trace_display(control_last, TRACE_BUS);
   12066:	19 2b       	or	r17, r25
   12068:	62 e0       	ldi	r22, 0x02	; 2
   1206a:	70 e0       	ldi	r23, 0x00	; 0
   1206c:	c8 01       	movw	r24, r16
   1206e:	95 de       	rcall	.-726    	; 0x11d9a <gpib_trace_display>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   12070:	02 c0       	rjmp	.+4      	; 0x12076 <gpib_read_byte+0x4e>
   12072:	00 e0       	ldi	r16, 0x00	; 0
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   12074:	10 e0       	ldi	r17, 0x00	; 0
   12076:	f1 2c       	mov	r15, r1
   12078:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(uart_keyhit(0))
   1207a:	d0 e0       	ldi	r29, 0x00	; 0
   1207c:	80 e0       	ldi	r24, 0x00	; 0
   1207e:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <uart_keyhit>
   12082:	89 2b       	or	r24, r25
		if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   12084:	09 f0       	breq	.+2      	; 0x12088 <gpib_read_byte+0x60>
   12086:	78 c0       	rjmp	.+240    	; 0x12178 <gpib_read_byte+0x150>
        {
            ch |= IFC_FLAG;
   12088:	4c 99       	sbic	0x09, 4	; 9
			gpib_bus_init();
   1208a:	03 c0       	rjmp	.+6      	; 0x12092 <gpib_read_byte+0x6a>
   1208c:	d0 61       	ori	r29, 0x10	; 16
   1208e:	b4 db       	rcall	.-2200   	; 0x117f8 <gpib_bus_init>
            break;
        }


        switch(rx_state)
   12090:	73 c0       	rjmp	.+230    	; 0x12178 <gpib_read_byte+0x150>
   12092:	8f 2d       	mov	r24, r15
   12094:	90 e0       	ldi	r25, 0x00	; 0
   12096:	89 30       	cpi	r24, 0x09	; 9
   12098:	91 05       	cpc	r25, r1
   1209a:	08 f0       	brcs	.+2      	; 0x1209e <gpib_read_byte+0x76>
   1209c:	51 c0       	rjmp	.+162    	; 0x12140 <gpib_read_byte+0x118>
   1209e:	fc 01       	movw	r30, r24
   120a0:	e9 53       	subi	r30, 0x39	; 57
   120a2:	ff 4f       	sbci	r31, 0xFF	; 255
   120a4:	0c 94 60 e9 	jmp	0x1d2c0	; 0x1d2c0 <__tablejump2__>
   120a8:	52 98       	cbi	0x0a, 2	; 10
   120aa:	8d e0       	ldi	r24, 0x0D	; 13
   120ac:	8a 95       	dec	r24
   120ae:	f1 f7       	brne	.-4      	; 0x120ac <gpib_read_byte+0x84>
        {
            case GPIB_RX_START:
                ///@brief Signal that we are ready to ready
                GPIB_PIN_FLOAT_UP(NRFD);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   120b0:	00 00       	nop
   120b2:	ff 24       	eor	r15, r15
   120b4:	f3 94       	inc	r15
                break;

            case GPIB_RX_WAIT_FOR_DAV_LOW:
                ///@brief Wait for Ready acknowledge
                if ( GPIB_PIN_TST(DAV) == 0 )
   120b6:	7f c0       	rjmp	.+254    	; 0x121b6 <gpib_read_byte+0x18e>
                    rx_state = GPIB_RX_DAV_IS_LOW;
   120b8:	19 99       	sbic	0x03, 1	; 3
                break;

// Accept Data
            case GPIB_RX_DAV_IS_LOW:
                GPIB_IO_LOW(NRFD);                // BUSY
   120ba:	7d c0       	rjmp	.+250    	; 0x121b6 <gpib_read_byte+0x18e>

                ///@brief gpib_bus_read strips command parity if ATN is low at read time
                bus = gpib_bus_read();
   120bc:	62 e0       	ldi	r22, 0x02	; 2
   120be:	f6 2e       	mov	r15, r22
   120c0:	7a c0       	rjmp	.+244    	; 0x121b6 <gpib_read_byte+0x18e>
   120c2:	5a 98       	cbi	0x0b, 2	; 11
                ch |= bus;
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                control_last = gpib_control_pin_read();
   120c4:	52 9a       	sbi	0x0a, 2	; 10
   120c6:	8d dc       	rcall	.-1766   	; 0x119e2 <gpib_bus_read>
   120c8:	a8 2e       	mov	r10, r24
   120ca:	b1 2c       	mov	r11, r1
                ch |= control_last;
   120cc:	90 dc       	rcall	.-1760   	; 0x119ee <gpib_control_pin_read>
   120ce:	8c 01       	movw	r16, r24

                if(trace)
   120d0:	c8 2b       	or	r28, r24
   120d2:	d9 2b       	or	r29, r25
   120d4:	ca 29       	or	r28, r10
                {
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                    control_last |= gpib_handshake_pin_read();
   120d6:	db 29       	or	r29, r11
   120d8:	c1 14       	cp	r12, r1
   120da:	d1 04       	cpc	r13, r1
                    gpib_trace_display(bus | control_last, TRACE_READ);
   120dc:	49 f0       	breq	.+18     	; 0x120f0 <gpib_read_byte+0xc8>
   120de:	97 dc       	rcall	.-1746   	; 0x11a0e <gpib_handshake_pin_read>
   120e0:	08 2b       	or	r16, r24
   120e2:	19 2b       	or	r17, r25
   120e4:	61 e0       	ldi	r22, 0x01	; 1
   120e6:	70 e0       	ldi	r23, 0x00	; 0
   120e8:	c5 01       	movw	r24, r10
   120ea:	80 2b       	or	r24, r16
   120ec:	91 2b       	or	r25, r17
   120ee:	55 de       	rcall	.-854    	; 0x11d9a <gpib_trace_display>
                }

                GPIB_PIN_FLOAT_UP(NDAC);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                gpib_timeout_set(HTIMEOUT);
   120f0:	53 98       	cbi	0x0a, 3	; 10
   120f2:	8d e0       	ldi	r24, 0x0D	; 13
   120f4:	8a 95       	dec	r24
   120f6:	f1 f7       	brne	.-4      	; 0x120f4 <gpib_read_byte+0xcc>
   120f8:	00 00       	nop
#if BOARD == 2
				/// FIXME do we want to keep the next state ?
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   120fa:	64 ef       	ldi	r22, 0xF4	; 244
   120fc:	71 e0       	ldi	r23, 0x01	; 1
   120fe:	80 e0       	ldi	r24, 0x00	; 0
/// FIXME We clould add a test for read/write state ??
///@brief V2 boards we can't - not a big deal as the DAV test works anyway
            ///@brief Wait for NDAC float HI

            case GPIB_RX_WAIT_FOR_NDAC_HI:
                if (GPIB_PIN_TST(NDAC) == 1)
   12100:	90 e0       	ldi	r25, 0x00	; 0
   12102:	4d db       	rcall	.-2406   	; 0x1179e <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   12104:	54 e0       	ldi	r21, 0x04	; 4
   12106:	f5 2e       	mov	r15, r21
   12108:	56 c0       	rjmp	.+172    	; 0x121b6 <gpib_read_byte+0x18e>
   1210a:	4b 9b       	sbis	0x09, 3	; 9
   1210c:	0c c0       	rjmp	.+24     	; 0x12126 <gpib_read_byte+0xfe>
   1210e:	64 ef       	ldi	r22, 0xF4	; 244
                    rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   12110:	71 e0       	ldi	r23, 0x01	; 1
   12112:	80 e0       	ldi	r24, 0x00	; 0
   12114:	90 e0       	ldi	r25, 0x00	; 0
                }
                break;

            ///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   12116:	43 db       	rcall	.-2426   	; 0x1179e <gpib_timeout_set>
   12118:	44 e0       	ldi	r20, 0x04	; 4
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
   1211a:	f4 2e       	mov	r15, r20
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   1211c:	04 c0       	rjmp	.+8      	; 0x12126 <gpib_read_byte+0xfe>
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
				}
                if (gpib_timeout_test())
   1211e:	19 9b       	sbis	0x03, 1	; 3
   12120:	02 c0       	rjmp	.+4      	; 0x12126 <gpib_read_byte+0xfe>
   12122:	35 e0       	ldi	r19, 0x05	; 5
                {
                    ch |= TIMEOUT_FLAG;
   12124:	f3 2e       	mov	r15, r19
                    rx_state = GPIB_RX_ERROR;
   12126:	80 91 32 1d 	lds	r24, 0x1D32	; 0x801d32 <gpib_timer+0x8>
   1212a:	88 23       	and	r24, r24
            case GPIB_RX_ERROR:
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
   1212c:	09 f4       	brne	.+2      	; 0x12130 <gpib_read_byte+0x108>
   1212e:	43 c0       	rjmp	.+134    	; 0x121b6 <gpib_read_byte+0x18e>
   12130:	d0 64       	ori	r29, 0x40	; 64
                break;
        }

        if(trace)
   12132:	27 e0       	ldi	r18, 0x07	; 7
   12134:	f2 2e       	mov	r15, r18
   12136:	3f c0       	rjmp	.+126    	; 0x121b6 <gpib_read_byte+0x18e>
   12138:	81 e0       	ldi	r24, 0x01	; 1
   1213a:	90 e0       	ldi	r25, 0x00	; 0
   1213c:	3a db       	rcall	.-2444   	; 0x117b2 <gpib_bus_read_init>
   1213e:	04 c0       	rjmp	.+8      	; 0x12148 <gpib_read_byte+0x120>
   12140:	c1 14       	cp	r12, r1
        {
			/// V2 boards can not read all control and handshake bits at once
			/// FIXME We could add a test for read/write state ??
			/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   12142:	d1 04       	cpc	r13, r1
   12144:	99 f0       	breq	.+38     	; 0x1216c <gpib_read_byte+0x144>
   12146:	05 c0       	rjmp	.+10     	; 0x12152 <gpib_read_byte+0x12a>
            control |= gpib_handshake_pin_read();
   12148:	c1 14       	cp	r12, r1
   1214a:	d1 04       	cpc	r13, r1
   1214c:	a9 f0       	breq	.+42     	; 0x12178 <gpib_read_byte+0x150>
   1214e:	98 e0       	ldi	r25, 0x08	; 8
            if(control_last != control)
   12150:	f9 2e       	mov	r15, r25
   12152:	4d dc       	rcall	.-1894   	; 0x119ee <gpib_control_pin_read>
   12154:	5c 01       	movw	r10, r24
            {
                gpib_trace_display(control, TRACE_BUS);
   12156:	5b dc       	rcall	.-1866   	; 0x11a0e <gpib_handshake_pin_read>
   12158:	a8 2a       	or	r10, r24
   1215a:	b9 2a       	or	r11, r25
   1215c:	a0 16       	cp	r10, r16
   1215e:	b1 06       	cpc	r11, r17
   12160:	31 f0       	breq	.+12     	; 0x1216e <gpib_read_byte+0x146>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   12162:	62 e0       	ldi	r22, 0x02	; 2
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   12164:	70 e0       	ldi	r23, 0x00	; 0
   12166:	c5 01       	movw	r24, r10
   12168:	18 de       	rcall	.-976    	; 0x11d9a <gpib_trace_display>
   1216a:	01 c0       	rjmp	.+2      	; 0x1216e <gpib_read_byte+0x146>
   1216c:	58 01       	movw	r10, r16
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   1216e:	88 e0       	ldi	r24, 0x08	; 8
   12170:	f8 16       	cp	r15, r24
   12172:	11 f0       	breq	.+4      	; 0x12178 <gpib_read_byte+0x150>
   12174:	85 01       	movw	r16, r10
   12176:	82 cf       	rjmp	.-252    	; 0x1207c <gpib_read_byte+0x54>
   12178:	80 91 37 1f 	lds	r24, 0x1F37	; 0x801f37 <current>
   1217c:	90 91 38 1f 	lds	r25, 0x1F38	; 0x801f38 <current+0x1>

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   12180:	90 93 34 1d 	sts	0x1D34, r25	; 0x801d34 <lastcmd+0x1>
   12184:	80 93 33 1d 	sts	0x1D33, r24	; 0x801d33 <lastcmd>
   12188:	ce 01       	movw	r24, r28
   1218a:	88 27       	eor	r24, r24
        current = 0;
   1218c:	90 7d       	andi	r25, 0xD0	; 208
   1218e:	89 2b       	or	r24, r25
   12190:	11 f4       	brne	.+4      	; 0x12196 <gpib_read_byte+0x16e>
   12192:	d2 fd       	sbrc	r29, 2
   12194:	05 c0       	rjmp	.+10     	; 0x121a0 <gpib_read_byte+0x178>
    else
        current = ch & CMD_MASK;
   12196:	10 92 38 1f 	sts	0x1F38, r1	; 0x801f38 <current+0x1>
   1219a:	10 92 37 1f 	sts	0x1F37, r1	; 0x801f37 <current>
   1219e:	07 c0       	rjmp	.+14     	; 0x121ae <gpib_read_byte+0x186>
   121a0:	ce 01       	movw	r24, r28
   121a2:	8f 77       	andi	r24, 0x7F	; 127
   121a4:	99 27       	eor	r25, r25
   121a6:	90 93 38 1f 	sts	0x1F38, r25	; 0x801f38 <current+0x1>
                }
                break;

            ///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
                rx_state = GPIB_RX_FINISH;        // DONE
   121aa:	80 93 37 1f 	sts	0x1F37, r24	; 0x801f37 <current>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   121ae:	ce 01       	movw	r24, r28
   121b0:	07 c0       	rjmp	.+14     	; 0x121c0 <gpib_read_byte+0x198>
   121b2:	86 e0       	ldi	r24, 0x06	; 6
   121b4:	f8 2e       	mov	r15, r24
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   121b6:	c1 14       	cp	r12, r1
   121b8:	d1 04       	cpc	r13, r1
   121ba:	09 f4       	brne	.+2      	; 0x121be <gpib_read_byte+0x196>
   121bc:	5f cf       	rjmp	.-322    	; 0x1207c <gpib_read_byte+0x54>
   121be:	c9 cf       	rjmp	.-110    	; 0x12152 <gpib_read_byte+0x12a>
   121c0:	df 91       	pop	r29
   121c2:	cf 91       	pop	r28
   121c4:	1f 91       	pop	r17
   121c6:	0f 91       	pop	r16
   121c8:	ff 90       	pop	r15
   121ca:	df 90       	pop	r13
   121cc:	cf 90       	pop	r12
   121ce:	bf 90       	pop	r11
   121d0:	af 90       	pop	r10
   121d2:	08 95       	ret

000121d4 <gpib_decode>:
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   121d4:	60 e0       	ldi	r22, 0x00	; 0
   121d6:	70 e0       	ldi	r23, 0x00	; 0
   121d8:	e0 cd       	rjmp	.-1088   	; 0x11d9a <gpib_trace_display>
   121da:	08 95       	ret

000121dc <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   121dc:	a0 e0       	ldi	r26, 0x00	; 0
   121de:	b0 e0       	ldi	r27, 0x00	; 0
   121e0:	e4 ef       	ldi	r30, 0xF4	; 244
   121e2:	f0 e9       	ldi	r31, 0x90	; 144
   121e4:	0c 94 97 e9 	jmp	0x1d32e	; 0x1d32e <__prologue_saves__+0x10>
   121e8:	5b 01       	movw	r10, r22
   121ea:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   121ec:	fa 01       	movw	r30, r20
   121ee:	20 81       	ld	r18, Z
   121f0:	31 81       	ldd	r19, Z+1	; 0x01
   121f2:	22 27       	eor	r18, r18
   121f4:	31 83       	std	Z+1, r19	; 0x01
   121f6:	20 83       	st	Z, r18

    if(!size)
   121f8:	67 2b       	or	r22, r23
   121fa:	21 f0       	breq	.+8      	; 0x12204 <gpib_read_str+0x28>
   121fc:	7c 01       	movw	r14, r24
   121fe:	c0 e0       	ldi	r28, 0x00	; 0
   12200:	d0 e0       	ldi	r29, 0x00	; 0
   12202:	28 c0       	rjmp	.+80     	; 0x12254 <gpib_read_str+0x78>
    {
        if(debuglevel & (1+4))
   12204:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12208:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1220c:	85 70       	andi	r24, 0x05	; 5
   1220e:	99 27       	eor	r25, r25
   12210:	89 2b       	or	r24, r25
   12212:	09 f4       	brne	.+2      	; 0x12216 <gpib_read_str+0x3a>
   12214:	89 c0       	rjmp	.+274    	; 0x12328 <gpib_read_str+0x14c>
            printf("gpib_read_str: size = 0\n");
   12216:	88 ea       	ldi	r24, 0xA8	; 168
   12218:	90 e1       	ldi	r25, 0x10	; 16
   1221a:	1f 92       	push	r1
   1221c:	9f 93       	push	r25
   1221e:	8f 93       	push	r24
   12220:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12224:	0f 90       	pop	r0
   12226:	0f 90       	pop	r0
   12228:	0f 90       	pop	r0
   1222a:	7e c0       	rjmp	.+252    	; 0x12328 <gpib_read_str+0x14c>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   1222c:	80 27       	eor	r24, r16
   1222e:	91 27       	eor	r25, r17
   12230:	92 fd       	sbrc	r25, 2
   12232:	2e c0       	rjmp	.+92     	; 0x12290 <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   12234:	c8 01       	movw	r24, r16
   12236:	88 27       	eor	r24, r24
   12238:	94 70       	andi	r25, 0x04	; 4
   1223a:	12 ff       	sbrs	r17, 2
   1223c:	49 c0       	rjmp	.+146    	; 0x122d0 <gpib_read_str+0xf4>
            buf[ind] = (val & CMD_MASK);
   1223e:	20 2f       	mov	r18, r16
   12240:	2f 77       	andi	r18, 0x7F	; 127
   12242:	f7 01       	movw	r30, r14
   12244:	20 83       	st	Z, r18
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;
   12246:	21 96       	adiw	r28, 0x01	; 1

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   12248:	89 2b       	or	r24, r25
   1224a:	09 f4       	brne	.+2      	; 0x1224e <gpib_read_str+0x72>
   1224c:	44 c0       	rjmp	.+136    	; 0x122d6 <gpib_read_str+0xfa>
   1224e:	ff ef       	ldi	r31, 0xFF	; 255
   12250:	ef 1a       	sub	r14, r31
   12252:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (1+4))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   12254:	ca 15       	cp	r28, r10
   12256:	db 05       	cpc	r29, r11
   12258:	0c f0       	brlt	.+2      	; 0x1225c <gpib_read_str+0x80>
   1225a:	47 c0       	rjmp	.+142    	; 0x122ea <gpib_read_str+0x10e>
    {
        val = gpib_read_byte(NO_TRACE);
   1225c:	80 e0       	ldi	r24, 0x00	; 0
   1225e:	90 e0       	ldi	r25, 0x00	; 0
   12260:	e3 de       	rcall	.-570    	; 0x12028 <gpib_read_byte>
   12262:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & 256)
   12264:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12268:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1226c:	90 ff       	sbrs	r25, 0
            gpib_decode(val);
   1226e:	02 c0       	rjmp	.+4      	; 0x12274 <gpib_read_str+0x98>
   12270:	c8 01       	movw	r24, r16
#endif
        if(val & ERROR_MASK)
   12272:	b0 df       	rcall	.-160    	; 0x121d4 <gpib_decode>
   12274:	98 01       	movw	r18, r16
   12276:	22 27       	eor	r18, r18
   12278:	30 7d       	andi	r19, 0xD0	; 208
   1227a:	f6 01       	movw	r30, r12
   1227c:	80 81       	ld	r24, Z
   1227e:	91 81       	ldd	r25, Z+1	; 0x01
   12280:	21 15       	cp	r18, r1
   12282:	31 05       	cpc	r19, r1
        {
            *status |= (val & ERROR_MASK);
   12284:	99 f2       	breq	.-90     	; 0x1222c <gpib_read_str+0x50>
   12286:	82 2b       	or	r24, r18
   12288:	93 2b       	or	r25, r19
   1228a:	91 83       	std	Z+1, r25	; 0x01
            break;
   1228c:	80 83       	st	Z, r24
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (1+4))
   1228e:	30 c0       	rjmp	.+96     	; 0x122f0 <gpib_read_str+0x114>
   12290:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12294:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   12298:	85 70       	andi	r24, 0x05	; 5
   1229a:	99 27       	eor	r25, r25
   1229c:	89 2b       	or	r24, r25
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   1229e:	a9 f0       	breq	.+42     	; 0x122ca <gpib_read_str+0xee>
   122a0:	c8 01       	movw	r24, r16
   122a2:	99 27       	eor	r25, r25
   122a4:	9f 93       	push	r25
   122a6:	8f 93       	push	r24
   122a8:	df 93       	push	r29
   122aa:	cf 93       	push	r28
   122ac:	8b e7       	ldi	r24, 0x7B	; 123
   122ae:	90 e1       	ldi	r25, 0x10	; 16
   122b0:	1f 92       	push	r1
   122b2:	9f 93       	push	r25
   122b4:	8f 93       	push	r24
   122b6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   122ba:	ed b7       	in	r30, 0x3d	; 61
   122bc:	fe b7       	in	r31, 0x3e	; 62
   122be:	37 96       	adiw	r30, 0x07	; 7
   122c0:	0f b6       	in	r0, 0x3f	; 63
   122c2:	f8 94       	cli
   122c4:	fe bf       	out	0x3e, r31	; 62
            gpib_unread(val);
   122c6:	0f be       	out	0x3f, r0	; 63
   122c8:	ed bf       	out	0x3d, r30	; 61
   122ca:	c8 01       	movw	r24, r16
            break;
   122cc:	65 db       	rcall	.-2358   	; 0x11998 <gpib_unread>
        }

        if(val & ATN_FLAG)
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
   122ce:	10 c0       	rjmp	.+32     	; 0x122f0 <gpib_read_str+0x114>
   122d0:	f7 01       	movw	r30, r14
   122d2:	00 83       	st	Z, r16
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   122d4:	b8 cf       	rjmp	.-144    	; 0x12246 <gpib_read_str+0x6a>
   122d6:	10 ff       	sbrs	r17, 0
        {

            if(*status & EOI_FLAG)
   122d8:	ba cf       	rjmp	.-140    	; 0x1224e <gpib_read_str+0x72>
   122da:	f6 01       	movw	r30, r12
   122dc:	80 81       	ld	r24, Z
   122de:	91 81       	ldd	r25, Z+1	; 0x01
   122e0:	90 fd       	sbrc	r25, 0
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   122e2:	24 c0       	rjmp	.+72     	; 0x1232c <gpib_read_str+0x150>
   122e4:	91 60       	ori	r25, 0x01	; 1
   122e6:	91 83       	std	Z+1, r25	; 0x01
            break;
        }
    }
    if ( ind != size )
   122e8:	80 83       	st	Z, r24
   122ea:	ca 15       	cp	r28, r10
   122ec:	db 05       	cpc	r29, r11
    {
        if(debuglevel & (1+4))
   122ee:	f1 f0       	breq	.+60     	; 0x1232c <gpib_read_str+0x150>
   122f0:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   122f4:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   122f8:	85 70       	andi	r24, 0x05	; 5
   122fa:	99 27       	eor	r25, r25
   122fc:	89 2b       	or	r24, r25
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   122fe:	b1 f0       	breq	.+44     	; 0x1232c <gpib_read_str+0x150>
   12300:	bf 92       	push	r11
   12302:	af 92       	push	r10
   12304:	df 93       	push	r29
   12306:	cf 93       	push	r28
   12308:	84 e5       	ldi	r24, 0x54	; 84
   1230a:	90 e1       	ldi	r25, 0x10	; 16
   1230c:	1f 92       	push	r1
   1230e:	9f 93       	push	r25
   12310:	8f 93       	push	r24
   12312:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12316:	ed b7       	in	r30, 0x3d	; 61
   12318:	fe b7       	in	r31, 0x3e	; 62
   1231a:	37 96       	adiw	r30, 0x07	; 7
   1231c:	0f b6       	in	r0, 0x3f	; 63
   1231e:	f8 94       	cli
   12320:	fe bf       	out	0x3e, r31	; 62
   12322:	0f be       	out	0x3f, r0	; 63
   12324:	ed bf       	out	0x3d, r30	; 61
   12326:	02 c0       	rjmp	.+4      	; 0x1232c <gpib_read_str+0x150>
   12328:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return(ind);
}
   1232a:	d0 e0       	ldi	r29, 0x00	; 0
   1232c:	ce 01       	movw	r24, r28
   1232e:	cd b7       	in	r28, 0x3d	; 61
   12330:	de b7       	in	r29, 0x3e	; 62
   12332:	ea e0       	ldi	r30, 0x0A	; 10
   12334:	0c 94 b3 e9 	jmp	0x1d366	; 0x1d366 <__epilogue_restores__+0x10>

00012338 <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   12338:	a0 e0       	ldi	r26, 0x00	; 0
   1233a:	b0 e0       	ldi	r27, 0x00	; 0
   1233c:	e2 ea       	ldi	r30, 0xA2	; 162
   1233e:	f1 e9       	ldi	r31, 0x91	; 145
   12340:	0c 94 97 e9 	jmp	0x1d32e	; 0x1d32e <__prologue_saves__+0x10>
   12344:	8b 01       	movw	r16, r22
   12346:	7a 01       	movw	r14, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   12348:	fa 01       	movw	r30, r20
   1234a:	20 81       	ld	r18, Z
   1234c:	31 81       	ldd	r19, Z+1	; 0x01
   1234e:	22 27       	eor	r18, r18
   12350:	31 83       	std	Z+1, r19	; 0x01
   12352:	20 83       	st	Z, r18

    if(!size)
   12354:	67 2b       	or	r22, r23
   12356:	21 f0       	breq	.+8      	; 0x12360 <gpib_write_str+0x28>
   12358:	6c 01       	movw	r12, r24
   1235a:	c0 e0       	ldi	r28, 0x00	; 0
   1235c:	d0 e0       	ldi	r29, 0x00	; 0
   1235e:	35 c0       	rjmp	.+106    	; 0x123ca <gpib_write_str+0x92>
    {
        if(debuglevel & (1+4))
   12360:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12364:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   12368:	85 70       	andi	r24, 0x05	; 5
   1236a:	99 27       	eor	r25, r25
   1236c:	89 2b       	or	r24, r25
   1236e:	09 f4       	brne	.+2      	; 0x12372 <gpib_write_str+0x3a>
   12370:	54 c0       	rjmp	.+168    	; 0x1241a <gpib_write_str+0xe2>
            printf("gpib_write_str: size = 0\n");
   12372:	8a e3       	ldi	r24, 0x3A	; 58
   12374:	90 e1       	ldi	r25, 0x10	; 16
   12376:	1f 92       	push	r1
   12378:	9f 93       	push	r25
   1237a:	8f 93       	push	r24
   1237c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12380:	0f 90       	pop	r0
   12382:	0f 90       	pop	r0
   12384:	0f 90       	pop	r0
   12386:	49 c0       	rjmp	.+146    	; 0x1241a <gpib_write_str+0xe2>
    }

    while(ind < size)
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   12388:	21 96       	adiw	r28, 0x01	; 1
   1238a:	f6 01       	movw	r30, r12
   1238c:	81 91       	ld	r24, Z+
   1238e:	6f 01       	movw	r12, r30
   12390:	90 e0       	ldi	r25, 0x00	; 0

        if(*status & ATN_FLAG)
   12392:	f7 01       	movw	r30, r14
   12394:	20 81       	ld	r18, Z
   12396:	31 81       	ldd	r19, Z+1	; 0x01
   12398:	32 fd       	sbrc	r19, 2
        {
            ch |= ATN_FLAG;
   1239a:	94 60       	ori	r25, 0x04	; 4
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   1239c:	30 fd       	sbrc	r19, 0
            ch |= EOI_FLAG;

/// @return Returns

        val = gpib_write_byte(ch);
   1239e:	19 c0       	rjmp	.+50     	; 0x123d2 <gpib_write_str+0x9a>
        *status |= (val & ERROR_MASK);
   123a0:	42 db       	rcall	.-2428   	; 0x11a26 <gpib_write_byte>
   123a2:	5c 01       	movw	r10, r24
   123a4:	aa 24       	eor	r10, r10
   123a6:	f0 ed       	ldi	r31, 0xD0	; 208
   123a8:	bf 22       	and	r11, r31
   123aa:	f7 01       	movw	r30, r14
   123ac:	20 81       	ld	r18, Z
   123ae:	31 81       	ldd	r19, Z+1	; 0x01
   123b0:	2a 29       	or	r18, r10
   123b2:	3b 29       	or	r19, r11
   123b4:	31 83       	std	Z+1, r19	; 0x01

#if SDEBUG
        if(debuglevel & 256)
   123b6:	20 83       	st	Z, r18
   123b8:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   123bc:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <debuglevel+0x1>
            gpib_decode(val);
   123c0:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   123c2:	08 df       	rcall	.-496    	; 0x121d4 <gpib_decode>
   123c4:	a1 14       	cp	r10, r1
   123c6:	b1 04       	cpc	r11, r1
    {
        if(debuglevel & (1+4))
            printf("gpib_write_str: size = 0\n");
    }

    while(ind < size)
   123c8:	49 f4       	brne	.+18     	; 0x123dc <gpib_write_str+0xa4>
   123ca:	c0 17       	cp	r28, r16
   123cc:	d1 07       	cpc	r29, r17
   123ce:	e4 f2       	brlt	.-72     	; 0x12388 <gpib_write_str+0x50>
        if(*status & ATN_FLAG)
        {
            ch |= ATN_FLAG;
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   123d0:	05 c0       	rjmp	.+10     	; 0x123dc <gpib_write_str+0xa4>
   123d2:	0c 17       	cp	r16, r28
   123d4:	1d 07       	cpc	r17, r29
            ch |= EOI_FLAG;
   123d6:	21 f7       	brne	.-56     	; 0x123a0 <gpib_write_str+0x68>
   123d8:	91 60       	ori	r25, 0x01	; 1
        {
            break;
        }

    }                                             // while(ind < size)
    if ( ind != size )
   123da:	e2 cf       	rjmp	.-60     	; 0x123a0 <gpib_write_str+0x68>
   123dc:	c0 17       	cp	r28, r16
   123de:	d1 07       	cpc	r29, r17
    {
        if(debuglevel & (1+4))
   123e0:	f1 f0       	breq	.+60     	; 0x1241e <gpib_write_str+0xe6>
   123e2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   123e6:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   123ea:	85 70       	andi	r24, 0x05	; 5
   123ec:	99 27       	eor	r25, r25
   123ee:	89 2b       	or	r24, r25
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   123f0:	b1 f0       	breq	.+44     	; 0x1241e <gpib_write_str+0xe6>
   123f2:	1f 93       	push	r17
   123f4:	0f 93       	push	r16
   123f6:	df 93       	push	r29
   123f8:	cf 93       	push	r28
   123fa:	82 e1       	ldi	r24, 0x12	; 18
   123fc:	90 e1       	ldi	r25, 0x10	; 16
   123fe:	1f 92       	push	r1
   12400:	9f 93       	push	r25
   12402:	8f 93       	push	r24
   12404:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12408:	8d b7       	in	r24, 0x3d	; 61
   1240a:	9e b7       	in	r25, 0x3e	; 62
   1240c:	07 96       	adiw	r24, 0x07	; 7
   1240e:	0f b6       	in	r0, 0x3f	; 63
   12410:	f8 94       	cli
   12412:	9e bf       	out	0x3e, r25	; 62
   12414:	0f be       	out	0x3f, r0	; 63
   12416:	8d bf       	out	0x3d, r24	; 61
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;

    if(!size)
   12418:	02 c0       	rjmp	.+4      	; 0x1241e <gpib_write_str+0xe6>
   1241a:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(debuglevel & (1+4))
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
    }
    return(ind);
}
   1241c:	d0 e0       	ldi	r29, 0x00	; 0
   1241e:	ce 01       	movw	r24, r28
   12420:	cd b7       	in	r28, 0x3d	; 61
   12422:	de b7       	in	r29, 0x3e	; 62
   12424:	ea e0       	ldi	r30, 0x0A	; 10
   12426:	0c 94 b3 e9 	jmp	0x1d366	; 0x1d366 <__epilogue_restores__+0x10>

0001242a <gpib_file_init>:
   1242a:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <debuglevel+0x1>
   1242e:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <debuglevel>
   12432:	82 eb       	ldi	r24, 0xB2	; 178
   12434:	91 e0       	ldi	r25, 0x01	; 1
   12436:	0e 94 e6 b8 	call	0x171cc	; 0x171cc <POSIX_Read_Config>
   1243a:	9f 93       	push	r25
   1243c:	8f 93       	push	r24
   1243e:	82 eb       	ldi	r24, 0xB2	; 178
   12440:	91 e0       	ldi	r25, 0x01	; 1
   12442:	9f 93       	push	r25
   12444:	8f 93       	push	r24
   12446:	80 e5       	ldi	r24, 0x50	; 80
   12448:	95 e1       	ldi	r25, 0x15	; 21
   1244a:	1f 92       	push	r1
   1244c:	9f 93       	push	r25
   1244e:	8f 93       	push	r24
   12450:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12454:	0e 94 58 b8 	call	0x170b0	; 0x170b0 <set_Config_Defaults>
   12458:	0e 94 f2 72 	call	0xe5e4	; 0xe5e4 <mmc_wp_status>
   1245c:	2d b7       	in	r18, 0x3d	; 61
   1245e:	3e b7       	in	r19, 0x3e	; 62
   12460:	29 5f       	subi	r18, 0xF9	; 249
   12462:	3f 4f       	sbci	r19, 0xFF	; 255
   12464:	0f b6       	in	r0, 0x3f	; 63
   12466:	f8 94       	cli
   12468:	3e bf       	out	0x3e, r19	; 62
   1246a:	0f be       	out	0x3f, r0	; 63
   1246c:	2d bf       	out	0x3d, r18	; 61
   1246e:	89 2b       	or	r24, r25
   12470:	51 f0       	breq	.+20     	; 0x12486 <gpib_file_init+0x5c>
   12472:	87 e3       	ldi	r24, 0x37	; 55
   12474:	95 e1       	ldi	r25, 0x15	; 21
   12476:	1f 92       	push	r1
   12478:	9f 93       	push	r25
   1247a:	8f 93       	push	r24
   1247c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12480:	0f 90       	pop	r0
   12482:	0f 90       	pop	r0
   12484:	0f 90       	pop	r0
   12486:	08 95       	ret

00012488 <SS80_is_MLA>:
   12488:	40 e2       	ldi	r20, 0x20	; 32
   1248a:	50 e0       	ldi	r21, 0x00	; 0
   1248c:	bc 01       	movw	r22, r24
   1248e:	82 e0       	ldi	r24, 0x02	; 2
   12490:	90 e0       	ldi	r25, 0x00	; 0
   12492:	0e 94 b0 b5 	call	0x16b60	; 0x16b60 <find_device>
   12496:	8f 3f       	cpi	r24, 0xFF	; 255
   12498:	2f ef       	ldi	r18, 0xFF	; 255
   1249a:	92 07       	cpc	r25, r18
   1249c:	19 f0       	breq	.+6      	; 0x124a4 <SS80_is_MLA+0x1c>
   1249e:	0c 94 da b5 	jmp	0x16bb4	; 0x16bb4 <set_active_device>
   124a2:	08 95       	ret
   124a4:	80 e0       	ldi	r24, 0x00	; 0
   124a6:	90 e0       	ldi	r25, 0x00	; 0
   124a8:	08 95       	ret

000124aa <SS80_is_MTA>:
   124aa:	40 e4       	ldi	r20, 0x40	; 64
   124ac:	50 e0       	ldi	r21, 0x00	; 0
   124ae:	bc 01       	movw	r22, r24
   124b0:	82 e0       	ldi	r24, 0x02	; 2
   124b2:	90 e0       	ldi	r25, 0x00	; 0
   124b4:	0e 94 b0 b5 	call	0x16b60	; 0x16b60 <find_device>
   124b8:	8f 3f       	cpi	r24, 0xFF	; 255
   124ba:	2f ef       	ldi	r18, 0xFF	; 255
   124bc:	92 07       	cpc	r25, r18
   124be:	19 f0       	breq	.+6      	; 0x124c6 <SS80_is_MTA+0x1c>
   124c0:	0c 94 da b5 	jmp	0x16bb4	; 0x16bb4 <set_active_device>
   124c4:	08 95       	ret
   124c6:	80 e0       	ldi	r24, 0x00	; 0
   124c8:	90 e0       	ldi	r25, 0x00	; 0
   124ca:	08 95       	ret

000124cc <SS80_is_MSA>:
   124cc:	40 e6       	ldi	r20, 0x60	; 96
   124ce:	50 e0       	ldi	r21, 0x00	; 0
   124d0:	bc 01       	movw	r22, r24
   124d2:	82 e0       	ldi	r24, 0x02	; 2
   124d4:	90 e0       	ldi	r25, 0x00	; 0
   124d6:	0e 94 b0 b5 	call	0x16b60	; 0x16b60 <find_device>
   124da:	8f 3f       	cpi	r24, 0xFF	; 255
   124dc:	2f ef       	ldi	r18, 0xFF	; 255
   124de:	92 07       	cpc	r25, r18
   124e0:	19 f0       	breq	.+6      	; 0x124e8 <SS80_is_MSA+0x1c>
   124e2:	0c 94 da b5 	jmp	0x16bb4	; 0x16bb4 <set_active_device>
   124e6:	08 95       	ret
   124e8:	80 e0       	ldi	r24, 0x00	; 0
   124ea:	90 e0       	ldi	r25, 0x00	; 0
   124ec:	08 95       	ret

000124ee <AMIGO_is_MLA>:
   124ee:	40 e2       	ldi	r20, 0x20	; 32
   124f0:	50 e0       	ldi	r21, 0x00	; 0
   124f2:	bc 01       	movw	r22, r24
   124f4:	81 e0       	ldi	r24, 0x01	; 1
   124f6:	90 e0       	ldi	r25, 0x00	; 0
   124f8:	0e 94 b0 b5 	call	0x16b60	; 0x16b60 <find_device>
   124fc:	8f 3f       	cpi	r24, 0xFF	; 255
   124fe:	2f ef       	ldi	r18, 0xFF	; 255
   12500:	92 07       	cpc	r25, r18
   12502:	19 f0       	breq	.+6      	; 0x1250a <AMIGO_is_MLA+0x1c>
   12504:	0c 94 da b5 	jmp	0x16bb4	; 0x16bb4 <set_active_device>
   12508:	08 95       	ret
   1250a:	80 e0       	ldi	r24, 0x00	; 0
   1250c:	90 e0       	ldi	r25, 0x00	; 0
   1250e:	08 95       	ret

00012510 <AMIGO_is_MTA>:
   12510:	40 e4       	ldi	r20, 0x40	; 64
   12512:	50 e0       	ldi	r21, 0x00	; 0
   12514:	bc 01       	movw	r22, r24
   12516:	81 e0       	ldi	r24, 0x01	; 1
   12518:	90 e0       	ldi	r25, 0x00	; 0
   1251a:	0e 94 b0 b5 	call	0x16b60	; 0x16b60 <find_device>
   1251e:	8f 3f       	cpi	r24, 0xFF	; 255
   12520:	2f ef       	ldi	r18, 0xFF	; 255
   12522:	92 07       	cpc	r25, r18
   12524:	19 f0       	breq	.+6      	; 0x1252c <AMIGO_is_MTA+0x1c>
   12526:	0c 94 da b5 	jmp	0x16bb4	; 0x16bb4 <set_active_device>
   1252a:	08 95       	ret
   1252c:	80 e0       	ldi	r24, 0x00	; 0
   1252e:	90 e0       	ldi	r25, 0x00	; 0
   12530:	08 95       	ret

00012532 <AMIGO_is_MSA>:
   12532:	40 e6       	ldi	r20, 0x60	; 96
   12534:	50 e0       	ldi	r21, 0x00	; 0
   12536:	bc 01       	movw	r22, r24
   12538:	81 e0       	ldi	r24, 0x01	; 1
   1253a:	90 e0       	ldi	r25, 0x00	; 0
   1253c:	0e 94 b0 b5 	call	0x16b60	; 0x16b60 <find_device>
   12540:	8f 3f       	cpi	r24, 0xFF	; 255
   12542:	2f ef       	ldi	r18, 0xFF	; 255
   12544:	92 07       	cpc	r25, r18
   12546:	19 f0       	breq	.+6      	; 0x1254e <AMIGO_is_MSA+0x1c>
   12548:	0c 94 da b5 	jmp	0x16bb4	; 0x16bb4 <set_active_device>
   1254c:	08 95       	ret
   1254e:	80 e0       	ldi	r24, 0x00	; 0
   12550:	90 e0       	ldi	r25, 0x00	; 0
   12552:	08 95       	ret

00012554 <PRINTER_is_MLA>:
   12554:	40 e2       	ldi	r20, 0x20	; 32
   12556:	50 e0       	ldi	r21, 0x00	; 0
   12558:	bc 01       	movw	r22, r24
   1255a:	83 e0       	ldi	r24, 0x03	; 3
   1255c:	90 e0       	ldi	r25, 0x00	; 0
   1255e:	0e 94 b0 b5 	call	0x16b60	; 0x16b60 <find_device>
   12562:	8f 3f       	cpi	r24, 0xFF	; 255
   12564:	2f ef       	ldi	r18, 0xFF	; 255
   12566:	92 07       	cpc	r25, r18
   12568:	19 f0       	breq	.+6      	; 0x12570 <PRINTER_is_MLA+0x1c>
   1256a:	0c 94 da b5 	jmp	0x16bb4	; 0x16bb4 <set_active_device>
   1256e:	08 95       	ret
   12570:	80 e0       	ldi	r24, 0x00	; 0
   12572:	90 e0       	ldi	r25, 0x00	; 0
   12574:	08 95       	ret

00012576 <PRINTER_is_MTA>:
   12576:	40 e4       	ldi	r20, 0x40	; 64
   12578:	50 e0       	ldi	r21, 0x00	; 0
   1257a:	bc 01       	movw	r22, r24
   1257c:	83 e0       	ldi	r24, 0x03	; 3
   1257e:	90 e0       	ldi	r25, 0x00	; 0
   12580:	0e 94 b0 b5 	call	0x16b60	; 0x16b60 <find_device>
   12584:	8f 3f       	cpi	r24, 0xFF	; 255
   12586:	2f ef       	ldi	r18, 0xFF	; 255
   12588:	92 07       	cpc	r25, r18
   1258a:	19 f0       	breq	.+6      	; 0x12592 <PRINTER_is_MTA+0x1c>
   1258c:	0c 94 da b5 	jmp	0x16bb4	; 0x16bb4 <set_active_device>
   12590:	08 95       	ret
   12592:	80 e0       	ldi	r24, 0x00	; 0
   12594:	90 e0       	ldi	r25, 0x00	; 0
   12596:	08 95       	ret

00012598 <gpib_init_devices>:
   12598:	2f d9       	rcall	.-3490   	; 0x117f8 <gpib_bus_init>
   1259a:	0e 94 87 a2 	call	0x1450e	; 0x1450e <SS80_init>
   1259e:	0e 94 0b a8 	call	0x15016	; 0x15016 <amigo_init>
   125a2:	0c 94 f3 b2 	jmp	0x165e6	; 0x165e6 <printer_close>
   125a6:	08 95       	ret

000125a8 <gpib_trace_task>:
   125a8:	0f 93       	push	r16
   125aa:	1f 93       	push	r17
   125ac:	cf 93       	push	r28
   125ae:	df 93       	push	r29
   125b0:	eb 01       	movw	r28, r22
   125b2:	00 97       	sbiw	r24, 0x00	; 0
   125b4:	09 f4       	brne	.+2      	; 0x125b8 <gpib_trace_task+0x10>
   125b6:	42 c0       	rjmp	.+132    	; 0x1263c <gpib_trace_task+0x94>
   125b8:	fc 01       	movw	r30, r24
   125ba:	20 81       	ld	r18, Z
   125bc:	22 23       	and	r18, r18
   125be:	f1 f1       	breq	.+124    	; 0x1263c <gpib_trace_task+0x94>
   125c0:	0e 94 c3 30 	call	0x6186	; 0x6186 <skipspaces>
   125c4:	8c 01       	movw	r16, r24
   125c6:	1f 93       	push	r17
   125c8:	8f 93       	push	r24
   125ca:	8d e1       	ldi	r24, 0x1D	; 29
   125cc:	95 e1       	ldi	r25, 0x15	; 21
   125ce:	1f 92       	push	r1
   125d0:	9f 93       	push	r25
   125d2:	8f 93       	push	r24
   125d4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   125d8:	0f 90       	pop	r0
   125da:	0f 90       	pop	r0
   125dc:	0f 90       	pop	r0
   125de:	0f 90       	pop	r0
   125e0:	0f 90       	pop	r0
   125e2:	20 97       	sbiw	r28, 0x00	; 0
   125e4:	51 f0       	breq	.+20     	; 0x125fa <gpib_trace_task+0x52>
   125e6:	82 ef       	ldi	r24, 0xF2	; 242
   125e8:	94 e1       	ldi	r25, 0x14	; 20
   125ea:	1f 92       	push	r1
   125ec:	9f 93       	push	r25
   125ee:	8f 93       	push	r24
   125f0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   125f4:	0f 90       	pop	r0
   125f6:	0f 90       	pop	r0
   125f8:	0f 90       	pop	r0
   125fa:	8b ed       	ldi	r24, 0xDB	; 219
   125fc:	94 e1       	ldi	r25, 0x14	; 20
   125fe:	1f 92       	push	r1
   12600:	9f 93       	push	r25
   12602:	8f 93       	push	r24
   12604:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12608:	63 e0       	ldi	r22, 0x03	; 3
   1260a:	79 e0       	ldi	r23, 0x09	; 9
   1260c:	c8 01       	movw	r24, r16
   1260e:	0e 94 10 82 	call	0x10420	; 0x10420 <fopen>
   12612:	90 93 b1 19 	sts	0x19B1, r25	; 0x8019b1 <gpib_log_fp+0x1>
   12616:	80 93 b0 19 	sts	0x19B0, r24	; 0x8019b0 <gpib_log_fp>
   1261a:	0f 90       	pop	r0
   1261c:	0f 90       	pop	r0
   1261e:	0f 90       	pop	r0
   12620:	89 2b       	or	r24, r25
   12622:	a1 f4       	brne	.+40     	; 0x1264c <gpib_trace_task+0xa4>
   12624:	81 eb       	ldi	r24, 0xB1	; 177
   12626:	9d e0       	ldi	r25, 0x0D	; 13
   12628:	0e 94 e6 7b 	call	0xf7cc	; 0xf7cc <perror>
   1262c:	8f ec       	ldi	r24, 0xCF	; 207
   1262e:	94 e1       	ldi	r25, 0x14	; 20
   12630:	1f 92       	push	r1
   12632:	9f 93       	push	r25
   12634:	8f 93       	push	r24
   12636:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1263a:	3b c0       	rjmp	.+118    	; 0x126b2 <gpib_trace_task+0x10a>
   1263c:	80 91 0c 1d 	lds	r24, 0x1D0C	; 0x801d0c <__iob+0x2>
   12640:	90 91 0d 1d 	lds	r25, 0x1D0D	; 0x801d0d <__iob+0x3>
   12644:	90 93 b1 19 	sts	0x19B1, r25	; 0x8019b1 <gpib_log_fp+0x1>
   12648:	80 93 b0 19 	sts	0x19B0, r24	; 0x8019b0 <gpib_log_fp>
   1264c:	fd d8       	rcall	.-3590   	; 0x11848 <gpib_state_init>
   1264e:	a4 df       	rcall	.-184    	; 0x12598 <gpib_init_devices>
   12650:	80 91 b0 19 	lds	r24, 0x19B0	; 0x8019b0 <gpib_log_fp>
   12654:	90 91 b1 19 	lds	r25, 0x19B1	; 0x8019b1 <gpib_log_fp+0x1>
   12658:	4e db       	rcall	.-2404   	; 0x11cf6 <gpib_decode_header>
   1265a:	80 e0       	ldi	r24, 0x00	; 0
   1265c:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <uart_keyhit>
   12660:	89 2b       	or	r24, r25
   12662:	31 f4       	brne	.+12     	; 0x12670 <gpib_trace_task+0xc8>
   12664:	ce 01       	movw	r24, r28
   12666:	e0 dc       	rcall	.-1600   	; 0x12028 <gpib_read_byte>
   12668:	20 97       	sbiw	r28, 0x00	; 0
   1266a:	b9 f7       	brne	.-18     	; 0x1265a <gpib_trace_task+0xb2>
   1266c:	b3 dd       	rcall	.-1178   	; 0x121d4 <gpib_decode>
   1266e:	f5 cf       	rjmp	.-22     	; 0x1265a <gpib_trace_task+0xb2>
   12670:	89 ec       	ldi	r24, 0xC9	; 201
   12672:	94 e1       	ldi	r25, 0x14	; 20
   12674:	1f 92       	push	r1
   12676:	9f 93       	push	r25
   12678:	8f 93       	push	r24
   1267a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1267e:	80 91 b0 19 	lds	r24, 0x19B0	; 0x8019b0 <gpib_log_fp>
   12682:	90 91 b1 19 	lds	r25, 0x19B1	; 0x8019b1 <gpib_log_fp+0x1>
   12686:	0f 90       	pop	r0
   12688:	0f 90       	pop	r0
   1268a:	0f 90       	pop	r0
   1268c:	00 97       	sbiw	r24, 0x00	; 0
   1268e:	a1 f0       	breq	.+40     	; 0x126b8 <gpib_trace_task+0x110>
   12690:	0e 94 ba 80 	call	0x10174	; 0x10174 <fclose>
   12694:	87 eb       	ldi	r24, 0xB7	; 183
   12696:	94 e1       	ldi	r25, 0x14	; 20
   12698:	1f 92       	push	r1
   1269a:	9f 93       	push	r25
   1269c:	8f 93       	push	r24
   1269e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   126a2:	80 91 0c 1d 	lds	r24, 0x1D0C	; 0x801d0c <__iob+0x2>
   126a6:	90 91 0d 1d 	lds	r25, 0x1D0D	; 0x801d0d <__iob+0x3>
   126aa:	90 93 b1 19 	sts	0x19B1, r25	; 0x8019b1 <gpib_log_fp+0x1>
   126ae:	80 93 b0 19 	sts	0x19B0, r24	; 0x8019b0 <gpib_log_fp>
   126b2:	0f 90       	pop	r0
   126b4:	0f 90       	pop	r0
   126b6:	0f 90       	pop	r0
   126b8:	df 91       	pop	r29
   126ba:	cf 91       	pop	r28
   126bc:	1f 91       	pop	r17
   126be:	0f 91       	pop	r16
   126c0:	08 95       	ret

000126c2 <gpib_error_test>:
   126c2:	ef 92       	push	r14
   126c4:	ff 92       	push	r15
   126c6:	0f 93       	push	r16
   126c8:	1f 93       	push	r17
   126ca:	cf 93       	push	r28
   126cc:	df 93       	push	r29
   126ce:	7c 01       	movw	r14, r24
   126d0:	ec 01       	movw	r28, r24
   126d2:	cc 27       	eor	r28, r28
   126d4:	d0 7d       	andi	r29, 0xD0	; 208
   126d6:	20 97       	sbiw	r28, 0x00	; 0
   126d8:	61 f0       	breq	.+24     	; 0x126f2 <gpib_error_test+0x30>
   126da:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   126de:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   126e2:	8e 72       	andi	r24, 0x2E	; 46
   126e4:	99 27       	eor	r25, r25
   126e6:	87 01       	movw	r16, r14
   126e8:	00 27       	eor	r16, r16
   126ea:	10 71       	andi	r17, 0x10	; 16
   126ec:	89 2b       	or	r24, r25
   126ee:	59 f4       	brne	.+22     	; 0x12706 <gpib_error_test+0x44>
   126f0:	17 c0       	rjmp	.+46     	; 0x12720 <gpib_error_test+0x5e>
   126f2:	80 e0       	ldi	r24, 0x00	; 0
   126f4:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <uart_keyhit>
   126f8:	89 2b       	or	r24, r25
   126fa:	79 f7       	brne	.-34     	; 0x126da <gpib_error_test+0x18>
   126fc:	0e 94 ef 72 	call	0xe5de	; 0xe5de <mmc_ins_status>
   12700:	01 97       	sbiw	r24, 0x01	; 1
   12702:	59 f7       	brne	.-42     	; 0x126da <gpib_error_test+0x18>
   12704:	62 c0       	rjmp	.+196    	; 0x127ca <gpib_error_test+0x108>
   12706:	01 15       	cp	r16, r1
   12708:	11 05       	cpc	r17, r1
   1270a:	51 f0       	breq	.+20     	; 0x12720 <gpib_error_test+0x5e>
   1270c:	80 eb       	ldi	r24, 0xB0	; 176
   1270e:	94 e1       	ldi	r25, 0x14	; 20
   12710:	1f 92       	push	r1
   12712:	9f 93       	push	r25
   12714:	8f 93       	push	r24
   12716:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1271a:	0f 90       	pop	r0
   1271c:	0f 90       	pop	r0
   1271e:	0f 90       	pop	r0
   12720:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12724:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   12728:	85 70       	andi	r24, 0x05	; 5
   1272a:	99 27       	eor	r25, r25
   1272c:	89 2b       	or	r24, r25
   1272e:	c1 f0       	breq	.+48     	; 0x12760 <gpib_error_test+0x9e>
   12730:	f6 fe       	sbrs	r15, 6
   12732:	0a c0       	rjmp	.+20     	; 0x12748 <gpib_error_test+0x86>
   12734:	85 ea       	ldi	r24, 0xA5	; 165
   12736:	94 e1       	ldi	r25, 0x14	; 20
   12738:	1f 92       	push	r1
   1273a:	9f 93       	push	r25
   1273c:	8f 93       	push	r24
   1273e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12742:	0f 90       	pop	r0
   12744:	0f 90       	pop	r0
   12746:	0f 90       	pop	r0
   12748:	d7 ff       	sbrs	r29, 7
   1274a:	0a c0       	rjmp	.+20     	; 0x12760 <gpib_error_test+0x9e>
   1274c:	8e e9       	ldi	r24, 0x9E	; 158
   1274e:	94 e1       	ldi	r25, 0x14	; 20
   12750:	1f 92       	push	r1
   12752:	9f 93       	push	r25
   12754:	8f 93       	push	r24
   12756:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1275a:	0f 90       	pop	r0
   1275c:	0f 90       	pop	r0
   1275e:	0f 90       	pop	r0
   12760:	80 e0       	ldi	r24, 0x00	; 0
   12762:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <uart_keyhit>
   12766:	89 2b       	or	r24, r25
   12768:	51 f0       	breq	.+20     	; 0x1277e <gpib_error_test+0xbc>
   1276a:	81 e9       	ldi	r24, 0x91	; 145
   1276c:	94 e1       	ldi	r25, 0x14	; 20
   1276e:	1f 92       	push	r1
   12770:	9f 93       	push	r25
   12772:	8f 93       	push	r24
   12774:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12778:	0f 90       	pop	r0
   1277a:	0f 90       	pop	r0
   1277c:	0f 90       	pop	r0
   1277e:	0e 94 ef 72 	call	0xe5de	; 0xe5de <mmc_ins_status>
   12782:	01 97       	sbiw	r24, 0x01	; 1
   12784:	51 f0       	breq	.+20     	; 0x1279a <gpib_error_test+0xd8>
   12786:	80 e8       	ldi	r24, 0x80	; 128
   12788:	94 e1       	ldi	r25, 0x14	; 20
   1278a:	1f 92       	push	r1
   1278c:	9f 93       	push	r25
   1278e:	8f 93       	push	r24
   12790:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12794:	0f 90       	pop	r0
   12796:	0f 90       	pop	r0
   12798:	0f 90       	pop	r0
   1279a:	01 15       	cp	r16, r1
   1279c:	11 05       	cpc	r17, r1
   1279e:	09 f0       	breq	.+2      	; 0x127a2 <gpib_error_test+0xe0>
   127a0:	fb de       	rcall	.-522    	; 0x12598 <gpib_init_devices>
   127a2:	80 e0       	ldi	r24, 0x00	; 0
   127a4:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <uart_keyhit>
   127a8:	89 2b       	or	r24, r25
   127aa:	11 f0       	breq	.+4      	; 0x127b0 <gpib_error_test+0xee>
   127ac:	f5 de       	rcall	.-534    	; 0x12598 <gpib_init_devices>
   127ae:	0b c0       	rjmp	.+22     	; 0x127c6 <gpib_error_test+0x104>
   127b0:	0e 94 ef 72 	call	0xe5de	; 0xe5de <mmc_ins_status>
   127b4:	01 97       	sbiw	r24, 0x01	; 1
   127b6:	39 f4       	brne	.+14     	; 0x127c6 <gpib_error_test+0x104>
   127b8:	01 15       	cp	r16, r1
   127ba:	11 05       	cpc	r17, r1
   127bc:	31 f0       	breq	.+12     	; 0x127ca <gpib_error_test+0x108>
   127be:	54 98       	cbi	0x0a, 4	; 10
   127c0:	4c 9b       	sbis	0x09, 4	; 9
   127c2:	fd cf       	rjmp	.-6      	; 0x127be <gpib_error_test+0xfc>
   127c4:	02 c0       	rjmp	.+4      	; 0x127ca <gpib_error_test+0x108>
   127c6:	c1 e0       	ldi	r28, 0x01	; 1
   127c8:	d0 e0       	ldi	r29, 0x00	; 0
   127ca:	ce 01       	movw	r24, r28
   127cc:	cd b7       	in	r28, 0x3d	; 61
   127ce:	de b7       	in	r29, 0x3e	; 62
   127d0:	e6 e0       	ldi	r30, 0x06	; 6
   127d2:	0c 94 b7 e9 	jmp	0x1d36e	; 0x1d36e <__epilogue_restores__+0x18>

000127d6 <GPIB_COMMANDS>:
   127d6:	1f 93       	push	r17
   127d8:	cf 93       	push	r28
   127da:	df 93       	push	r29
   127dc:	ec 01       	movw	r28, r24
   127de:	16 2f       	mov	r17, r22
   127e0:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <talking>
   127e4:	8f 35       	cpi	r24, 0x5F	; 95
   127e6:	91 f0       	breq	.+36     	; 0x1280c <GPIB_COMMANDS+0x36>
   127e8:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   127ec:	90 e0       	ldi	r25, 0x00	; 0
   127ee:	7f de       	rcall	.-770    	; 0x124ee <AMIGO_is_MLA>
   127f0:	89 2b       	or	r24, r25
   127f2:	c9 f4       	brne	.+50     	; 0x12826 <GPIB_COMMANDS+0x50>
   127f4:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   127f8:	90 e0       	ldi	r25, 0x00	; 0
   127fa:	46 de       	rcall	.-884    	; 0x12488 <SS80_is_MLA>
   127fc:	89 2b       	or	r24, r25
   127fe:	11 f5       	brne	.+68     	; 0x12844 <GPIB_COMMANDS+0x6e>
   12800:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   12804:	90 e0       	ldi	r25, 0x00	; 0
   12806:	a6 de       	rcall	.-692    	; 0x12554 <PRINTER_is_MLA>
   12808:	89 2b       	or	r24, r25
   1280a:	59 f5       	brne	.+86     	; 0x12862 <GPIB_COMMANDS+0x8c>
   1280c:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   12810:	8f 33       	cpi	r24, 0x3F	; 63
   12812:	19 f4       	brne	.+6      	; 0x1281a <GPIB_COMMANDS+0x44>
   12814:	80 e0       	ldi	r24, 0x00	; 0
   12816:	90 e0       	ldi	r25, 0x00	; 0
   12818:	2e c0       	rjmp	.+92     	; 0x12876 <GPIB_COMMANDS+0xa0>
   1281a:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <talking>
   1281e:	90 e0       	ldi	r25, 0x00	; 0
   12820:	77 de       	rcall	.-786    	; 0x12510 <AMIGO_is_MTA>
   12822:	89 2b       	or	r24, r25
   12824:	49 f0       	breq	.+18     	; 0x12838 <GPIB_COMMANDS+0x62>
   12826:	11 23       	and	r17, r17
   12828:	11 f0       	breq	.+4      	; 0x1282e <GPIB_COMMANDS+0x58>
   1282a:	ce 01       	movw	r24, r28
   1282c:	b5 d8       	rcall	.-3734   	; 0x11998 <gpib_unread>
   1282e:	80 91 3a 1f 	lds	r24, 0x1F3A	; 0x801f3a <secondary>
   12832:	0e 94 f4 b1 	call	0x163e8	; 0x163e8 <AMIGO_COMMANDS>
   12836:	1d c0       	rjmp	.+58     	; 0x12872 <GPIB_COMMANDS+0x9c>
   12838:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <talking>
   1283c:	90 e0       	ldi	r25, 0x00	; 0
   1283e:	35 de       	rcall	.-918    	; 0x124aa <SS80_is_MTA>
   12840:	89 2b       	or	r24, r25
   12842:	49 f0       	breq	.+18     	; 0x12856 <GPIB_COMMANDS+0x80>
   12844:	11 23       	and	r17, r17
   12846:	11 f0       	breq	.+4      	; 0x1284c <GPIB_COMMANDS+0x76>
   12848:	ce 01       	movw	r24, r28
   1284a:	a6 d8       	rcall	.-3764   	; 0x11998 <gpib_unread>
   1284c:	80 91 3a 1f 	lds	r24, 0x1F3A	; 0x801f3a <secondary>
   12850:	0e 94 65 a6 	call	0x14cca	; 0x14cca <SS80_COMMANDS>
   12854:	0e c0       	rjmp	.+28     	; 0x12872 <GPIB_COMMANDS+0x9c>
   12856:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <talking>
   1285a:	90 e0       	ldi	r25, 0x00	; 0
   1285c:	8c de       	rcall	.-744    	; 0x12576 <PRINTER_is_MTA>
   1285e:	89 2b       	or	r24, r25
   12860:	c9 f2       	breq	.-78     	; 0x12814 <GPIB_COMMANDS+0x3e>
   12862:	11 23       	and	r17, r17
   12864:	11 f0       	breq	.+4      	; 0x1286a <GPIB_COMMANDS+0x94>
   12866:	ce 01       	movw	r24, r28
   12868:	97 d8       	rcall	.-3794   	; 0x11998 <gpib_unread>
   1286a:	80 91 3a 1f 	lds	r24, 0x1F3A	; 0x801f3a <secondary>
   1286e:	0e 94 54 b4 	call	0x168a8	; 0x168a8 <PRINTER_COMMANDS>
   12872:	10 92 3a 1f 	sts	0x1F3A, r1	; 0x801f3a <secondary>
   12876:	df 91       	pop	r29
   12878:	cf 91       	pop	r28
   1287a:	1f 91       	pop	r17
   1287c:	08 95       	ret

0001287e <Send_Identify>:
   1287e:	a4 e0       	ldi	r26, 0x04	; 4
   12880:	b0 e0       	ldi	r27, 0x00	; 0
   12882:	e5 e4       	ldi	r30, 0x45	; 69
   12884:	f4 e9       	ldi	r31, 0x94	; 148
   12886:	0c 94 9a e9 	jmp	0x1d334	; 0x1d334 <__prologue_saves__+0x16>
   1288a:	d8 2e       	mov	r13, r24
   1288c:	7b 01       	movw	r14, r22
   1288e:	80 e0       	ldi	r24, 0x00	; 0
   12890:	91 e0       	ldi	r25, 0x01	; 1
   12892:	9c 83       	std	Y+4, r25	; 0x04
   12894:	8b 83       	std	Y+3, r24	; 0x03
   12896:	8b 01       	movw	r16, r22
   12898:	20 e0       	ldi	r18, 0x00	; 0
   1289a:	30 e0       	ldi	r19, 0x00	; 0
   1289c:	42 e0       	ldi	r20, 0x02	; 2
   1289e:	50 e0       	ldi	r21, 0x00	; 0
   128a0:	60 e0       	ldi	r22, 0x00	; 0
   128a2:	70 e0       	ldi	r23, 0x00	; 0
   128a4:	ce 01       	movw	r24, r28
   128a6:	01 96       	adiw	r24, 0x01	; 1
   128a8:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   128ac:	ae 01       	movw	r20, r28
   128ae:	4d 5f       	subi	r20, 0xFD	; 253
   128b0:	5f 4f       	sbci	r21, 0xFF	; 255
   128b2:	62 e0       	ldi	r22, 0x02	; 2
   128b4:	70 e0       	ldi	r23, 0x00	; 0
   128b6:	ce 01       	movw	r24, r28
   128b8:	01 96       	adiw	r24, 0x01	; 1
   128ba:	3e dd       	rcall	.-1412   	; 0x12338 <gpib_write_str>
   128bc:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   128c0:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   128c4:	02 97       	sbiw	r24, 0x02	; 2
   128c6:	59 f0       	breq	.+22     	; 0x128de <Send_Identify+0x60>
   128c8:	25 70       	andi	r18, 0x05	; 5
   128ca:	33 27       	eor	r19, r19
   128cc:	23 2b       	or	r18, r19
   128ce:	c9 f0       	breq	.+50     	; 0x12902 <Send_Identify+0x84>
   128d0:	ff 92       	push	r15
   128d2:	ef 92       	push	r14
   128d4:	1f 92       	push	r1
   128d6:	df 92       	push	r13
   128d8:	8f e5       	ldi	r24, 0x5F	; 95
   128da:	94 e1       	ldi	r25, 0x14	; 20
   128dc:	08 c0       	rjmp	.+16     	; 0x128ee <Send_Identify+0x70>
   128de:	22 ff       	sbrs	r18, 2
   128e0:	10 c0       	rjmp	.+32     	; 0x12902 <Send_Identify+0x84>
   128e2:	ff 92       	push	r15
   128e4:	ef 92       	push	r14
   128e6:	1f 92       	push	r1
   128e8:	df 92       	push	r13
   128ea:	85 e4       	ldi	r24, 0x45	; 69
   128ec:	94 e1       	ldi	r25, 0x14	; 20
   128ee:	1f 92       	push	r1
   128f0:	9f 93       	push	r25
   128f2:	8f 93       	push	r24
   128f4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   128f8:	0f b6       	in	r0, 0x3f	; 63
   128fa:	f8 94       	cli
   128fc:	de bf       	out	0x3e, r29	; 62
   128fe:	0f be       	out	0x3f, r0	; 63
   12900:	cd bf       	out	0x3d, r28	; 61
   12902:	8b 81       	ldd	r24, Y+3	; 0x03
   12904:	9c 81       	ldd	r25, Y+4	; 0x04
   12906:	88 27       	eor	r24, r24
   12908:	90 7d       	andi	r25, 0xD0	; 208
   1290a:	24 96       	adiw	r28, 0x04	; 4
   1290c:	e7 e0       	ldi	r30, 0x07	; 7
   1290e:	0c 94 b6 e9 	jmp	0x1d36c	; 0x1d36c <__epilogue_restores__+0x16>

00012912 <GPIB>:
   12912:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   12916:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1291a:	85 30       	cpi	r24, 0x05	; 5
   1291c:	89 f4       	brne	.+34     	; 0x12940 <GPIB+0x2e>
   1291e:	24 71       	andi	r18, 0x14	; 20
   12920:	33 27       	eor	r19, r19
   12922:	23 2b       	or	r18, r19
   12924:	51 f0       	breq	.+20     	; 0x1293a <GPIB+0x28>
   12926:	82 e3       	ldi	r24, 0x32	; 50
   12928:	94 e1       	ldi	r25, 0x14	; 20
   1292a:	1f 92       	push	r1
   1292c:	9f 93       	push	r25
   1292e:	8f 93       	push	r24
   12930:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12934:	0f 90       	pop	r0
   12936:	0f 90       	pop	r0
   12938:	0f 90       	pop	r0
   1293a:	10 92 36 1f 	sts	0x1F36, r1	; 0x801f36 <spoll>
   1293e:	9d c0       	rjmp	.+314    	; 0x12a7a <GPIB+0x168>
   12940:	85 31       	cpi	r24, 0x15	; 21
   12942:	39 f4       	brne	.+14     	; 0x12952 <GPIB+0x40>
   12944:	24 71       	andi	r18, 0x14	; 20
   12946:	33 27       	eor	r19, r19
   12948:	23 2b       	or	r18, r19
   1294a:	b9 f3       	breq	.-18     	; 0x1293a <GPIB+0x28>
   1294c:	8f e1       	ldi	r24, 0x1F	; 31
   1294e:	94 e1       	ldi	r25, 0x14	; 20
   12950:	ec cf       	rjmp	.-40     	; 0x1292a <GPIB+0x18>
   12952:	88 31       	cpi	r24, 0x18	; 24
   12954:	c9 f4       	brne	.+50     	; 0x12988 <GPIB+0x76>
   12956:	22 ff       	sbrs	r18, 2
   12958:	0a c0       	rjmp	.+20     	; 0x1296e <GPIB+0x5c>
   1295a:	88 e1       	ldi	r24, 0x18	; 24
   1295c:	94 e1       	ldi	r25, 0x14	; 20
   1295e:	1f 92       	push	r1
   12960:	9f 93       	push	r25
   12962:	8f 93       	push	r24
   12964:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12968:	0f 90       	pop	r0
   1296a:	0f 90       	pop	r0
   1296c:	0f 90       	pop	r0
   1296e:	81 e0       	ldi	r24, 0x01	; 1
   12970:	80 93 36 1f 	sts	0x1F36, r24	; 0x801f36 <spoll>
   12974:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <talking>
   12978:	90 e0       	ldi	r25, 0x00	; 0
   1297a:	97 dd       	rcall	.-1234   	; 0x124aa <SS80_is_MTA>
   1297c:	89 2b       	or	r24, r25
   1297e:	09 f4       	brne	.+2      	; 0x12982 <GPIB+0x70>
   12980:	7c c0       	rjmp	.+248    	; 0x12a7a <GPIB+0x168>
   12982:	0c 94 1a a2 	jmp	0x14434	; 0x14434 <SS80_Report>
   12986:	08 95       	ret
   12988:	89 31       	cpi	r24, 0x19	; 25
   1298a:	29 f4       	brne	.+10     	; 0x12996 <GPIB+0x84>
   1298c:	22 ff       	sbrs	r18, 2
   1298e:	d5 cf       	rjmp	.-86     	; 0x1293a <GPIB+0x28>
   12990:	81 e1       	ldi	r24, 0x11	; 17
   12992:	94 e1       	ldi	r25, 0x14	; 20
   12994:	ca cf       	rjmp	.-108    	; 0x1292a <GPIB+0x18>
   12996:	84 30       	cpi	r24, 0x04	; 4
   12998:	09 f0       	breq	.+2      	; 0x1299c <GPIB+0x8a>
   1299a:	48 c0       	rjmp	.+144    	; 0x12a2c <GPIB+0x11a>
   1299c:	22 ff       	sbrs	r18, 2
   1299e:	0a c0       	rjmp	.+20     	; 0x129b4 <GPIB+0xa2>
   129a0:	8a e0       	ldi	r24, 0x0A	; 10
   129a2:	94 e1       	ldi	r25, 0x14	; 20
   129a4:	1f 92       	push	r1
   129a6:	9f 93       	push	r25
   129a8:	8f 93       	push	r24
   129aa:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   129ae:	0f 90       	pop	r0
   129b0:	0f 90       	pop	r0
   129b2:	0f 90       	pop	r0
   129b4:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   129b8:	90 e0       	ldi	r25, 0x00	; 0
   129ba:	66 dd       	rcall	.-1332   	; 0x12488 <SS80_is_MLA>
   129bc:	89 2b       	or	r24, r25
   129be:	d9 f0       	breq	.+54     	; 0x129f6 <GPIB+0xe4>
   129c0:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   129c4:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   129c8:	84 72       	andi	r24, 0x24	; 36
   129ca:	99 27       	eor	r25, r25
   129cc:	89 2b       	or	r24, r25
   129ce:	51 f0       	breq	.+20     	; 0x129e4 <GPIB+0xd2>
   129d0:	8e ef       	ldi	r24, 0xFE	; 254
   129d2:	93 e1       	ldi	r25, 0x13	; 19
   129d4:	1f 92       	push	r1
   129d6:	9f 93       	push	r25
   129d8:	8f 93       	push	r24
   129da:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   129de:	0f 90       	pop	r0
   129e0:	0f 90       	pop	r0
   129e2:	0f 90       	pop	r0
   129e4:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   129e8:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   129ec:	85 81       	ldd	r24, Z+5	; 0x05
   129ee:	90 e0       	ldi	r25, 0x00	; 0
   129f0:	0c 94 e7 a2 	jmp	0x145ce	; 0x145ce <SS80_Selected_Device_Clear>
   129f4:	08 95       	ret
   129f6:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   129fa:	90 e0       	ldi	r25, 0x00	; 0
   129fc:	78 dd       	rcall	.-1296   	; 0x124ee <AMIGO_is_MLA>
   129fe:	89 2b       	or	r24, r25
   12a00:	e1 f1       	breq	.+120    	; 0x12a7a <GPIB+0x168>
   12a02:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12a06:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   12a0a:	84 72       	andi	r24, 0x24	; 36
   12a0c:	99 27       	eor	r25, r25
   12a0e:	89 2b       	or	r24, r25
   12a10:	51 f0       	breq	.+20     	; 0x12a26 <GPIB+0x114>
   12a12:	81 ef       	ldi	r24, 0xF1	; 241
   12a14:	93 e1       	ldi	r25, 0x13	; 19
   12a16:	1f 92       	push	r1
   12a18:	9f 93       	push	r25
   12a1a:	8f 93       	push	r24
   12a1c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12a20:	0f 90       	pop	r0
   12a22:	0f 90       	pop	r0
   12a24:	0f 90       	pop	r0
   12a26:	0c 94 c7 ac 	jmp	0x1598e	; 0x1598e <amigo_cmd_clear>
   12a2a:	08 95       	ret
   12a2c:	84 31       	cpi	r24, 0x14	; 20
   12a2e:	99 f4       	brne	.+38     	; 0x12a56 <GPIB+0x144>
   12a30:	22 ff       	sbrs	r18, 2
   12a32:	0a c0       	rjmp	.+20     	; 0x12a48 <GPIB+0x136>
   12a34:	8a ee       	ldi	r24, 0xEA	; 234
   12a36:	93 e1       	ldi	r25, 0x13	; 19
   12a38:	1f 92       	push	r1
   12a3a:	9f 93       	push	r25
   12a3c:	8f 93       	push	r24
   12a3e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12a42:	0f 90       	pop	r0
   12a44:	0f 90       	pop	r0
   12a46:	0f 90       	pop	r0
   12a48:	0e 94 d9 a2 	call	0x145b2	; 0x145b2 <SS80_Universal_Device_Clear>
   12a4c:	0e 94 c7 ac 	call	0x1598e	; 0x1598e <amigo_cmd_clear>
   12a50:	0e 94 f3 b2 	call	0x165e6	; 0x165e6 <printer_close>
   12a54:	12 c0       	rjmp	.+36     	; 0x12a7a <GPIB+0x168>
   12a56:	25 71       	andi	r18, 0x15	; 21
   12a58:	33 27       	eor	r19, r19
   12a5a:	23 2b       	or	r18, r19
   12a5c:	71 f0       	breq	.+28     	; 0x12a7a <GPIB+0x168>
   12a5e:	1f 92       	push	r1
   12a60:	8f 93       	push	r24
   12a62:	8e ec       	ldi	r24, 0xCE	; 206
   12a64:	93 e1       	ldi	r25, 0x13	; 19
   12a66:	1f 92       	push	r1
   12a68:	9f 93       	push	r25
   12a6a:	8f 93       	push	r24
   12a6c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12a70:	0f 90       	pop	r0
   12a72:	0f 90       	pop	r0
   12a74:	0f 90       	pop	r0
   12a76:	0f 90       	pop	r0
   12a78:	0f 90       	pop	r0
   12a7a:	80 e0       	ldi	r24, 0x00	; 0
   12a7c:	90 e0       	ldi	r25, 0x00	; 0
   12a7e:	08 95       	ret

00012a80 <GPIB_TALK>:
   12a80:	0f 93       	push	r16
   12a82:	1f 93       	push	r17
   12a84:	cf 93       	push	r28
   12a86:	c8 2f       	mov	r28, r24
   12a88:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <talking>
   12a8c:	80 93 3c 1f 	sts	0x1F3C, r24	; 0x801f3c <talking_last>
   12a90:	c0 93 39 1f 	sts	0x1F39, r28	; 0x801f39 <talking>
   12a94:	cf 35       	cpi	r28, 0x5F	; 95
   12a96:	79 f4       	brne	.+30     	; 0x12ab6 <GPIB_TALK+0x36>
   12a98:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12a9c:	82 ff       	sbrs	r24, 2
   12a9e:	7f c0       	rjmp	.+254    	; 0x12b9e <GPIB_TALK+0x11e>
   12aa0:	8b e7       	ldi	r24, 0x7B	; 123
   12aa2:	93 e1       	ldi	r25, 0x13	; 19
   12aa4:	1f 92       	push	r1
   12aa6:	9f 93       	push	r25
   12aa8:	8f 93       	push	r24
   12aaa:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12aae:	0f 90       	pop	r0
   12ab0:	0f 90       	pop	r0
   12ab2:	0f 90       	pop	r0
   12ab4:	74 c0       	rjmp	.+232    	; 0x12b9e <GPIB_TALK+0x11e>
   12ab6:	0c 2f       	mov	r16, r28
   12ab8:	10 e0       	ldi	r17, 0x00	; 0
   12aba:	c8 01       	movw	r24, r16
   12abc:	f6 dc       	rcall	.-1556   	; 0x124aa <SS80_is_MTA>
   12abe:	89 2b       	or	r24, r25
   12ac0:	f1 f0       	breq	.+60     	; 0x12afe <GPIB_TALK+0x7e>
   12ac2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12ac6:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   12aca:	84 72       	andi	r24, 0x24	; 36
   12acc:	99 27       	eor	r25, r25
   12ace:	89 2b       	or	r24, r25
   12ad0:	71 f0       	breq	.+28     	; 0x12aee <GPIB_TALK+0x6e>
   12ad2:	1f 92       	push	r1
   12ad4:	cf 93       	push	r28
   12ad6:	8a e6       	ldi	r24, 0x6A	; 106
   12ad8:	93 e1       	ldi	r25, 0x13	; 19
   12ada:	1f 92       	push	r1
   12adc:	9f 93       	push	r25
   12ade:	8f 93       	push	r24
   12ae0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12ae4:	0f 90       	pop	r0
   12ae6:	0f 90       	pop	r0
   12ae8:	0f 90       	pop	r0
   12aea:	0f 90       	pop	r0
   12aec:	0f 90       	pop	r0
   12aee:	80 91 36 1f 	lds	r24, 0x1F36	; 0x801f36 <spoll>
   12af2:	88 23       	and	r24, r24
   12af4:	09 f4       	brne	.+2      	; 0x12af8 <GPIB_TALK+0x78>
   12af6:	53 c0       	rjmp	.+166    	; 0x12b9e <GPIB_TALK+0x11e>
   12af8:	0e 94 1a a2 	call	0x14434	; 0x14434 <SS80_Report>
   12afc:	50 c0       	rjmp	.+160    	; 0x12b9e <GPIB_TALK+0x11e>
   12afe:	c8 01       	movw	r24, r16
   12b00:	07 dd       	rcall	.-1522   	; 0x12510 <AMIGO_is_MTA>
   12b02:	89 2b       	or	r24, r25
   12b04:	71 f0       	breq	.+28     	; 0x12b22 <GPIB_TALK+0xa2>
   12b06:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12b0a:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   12b0e:	84 72       	andi	r24, 0x24	; 36
   12b10:	99 27       	eor	r25, r25
   12b12:	89 2b       	or	r24, r25
   12b14:	09 f4       	brne	.+2      	; 0x12b18 <GPIB_TALK+0x98>
   12b16:	43 c0       	rjmp	.+134    	; 0x12b9e <GPIB_TALK+0x11e>
   12b18:	1f 92       	push	r1
   12b1a:	cf 93       	push	r28
   12b1c:	88 e5       	ldi	r24, 0x58	; 88
   12b1e:	93 e1       	ldi	r25, 0x13	; 19
   12b20:	34 c0       	rjmp	.+104    	; 0x12b8a <GPIB_TALK+0x10a>
   12b22:	c8 01       	movw	r24, r16
   12b24:	28 dd       	rcall	.-1456   	; 0x12576 <PRINTER_is_MTA>
   12b26:	89 2b       	or	r24, r25
   12b28:	69 f0       	breq	.+26     	; 0x12b44 <GPIB_TALK+0xc4>
   12b2a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12b2e:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   12b32:	84 72       	andi	r24, 0x24	; 36
   12b34:	99 27       	eor	r25, r25
   12b36:	89 2b       	or	r24, r25
   12b38:	91 f1       	breq	.+100    	; 0x12b9e <GPIB_TALK+0x11e>
   12b3a:	1f 92       	push	r1
   12b3c:	cf 93       	push	r28
   12b3e:	84 e4       	ldi	r24, 0x44	; 68
   12b40:	93 e1       	ldi	r25, 0x13	; 19
   12b42:	23 c0       	rjmp	.+70     	; 0x12b8a <GPIB_TALK+0x10a>
   12b44:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   12b48:	90 e0       	ldi	r25, 0x00	; 0
   12b4a:	04 dd       	rcall	.-1528   	; 0x12554 <PRINTER_is_MLA>
   12b4c:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   12b50:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   12b54:	89 2b       	or	r24, r25
   12b56:	99 f0       	breq	.+38     	; 0x12b7e <GPIB_TALK+0xfe>
   12b58:	24 72       	andi	r18, 0x24	; 36
   12b5a:	33 27       	eor	r19, r19
   12b5c:	23 2b       	or	r18, r19
   12b5e:	51 f0       	breq	.+20     	; 0x12b74 <GPIB_TALK+0xf4>
   12b60:	84 e3       	ldi	r24, 0x34	; 52
   12b62:	93 e1       	ldi	r25, 0x13	; 19
   12b64:	1f 92       	push	r1
   12b66:	9f 93       	push	r25
   12b68:	8f 93       	push	r24
   12b6a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12b6e:	0f 90       	pop	r0
   12b70:	0f 90       	pop	r0
   12b72:	0f 90       	pop	r0
   12b74:	80 e0       	ldi	r24, 0x00	; 0
   12b76:	90 e0       	ldi	r25, 0x00	; 0
   12b78:	0e 94 40 b3 	call	0x16680	; 0x16680 <printer_open>
   12b7c:	10 c0       	rjmp	.+32     	; 0x12b9e <GPIB_TALK+0x11e>
   12b7e:	22 ff       	sbrs	r18, 2
   12b80:	0e c0       	rjmp	.+28     	; 0x12b9e <GPIB_TALK+0x11e>
   12b82:	1f 92       	push	r1
   12b84:	cf 93       	push	r28
   12b86:	88 e2       	ldi	r24, 0x28	; 40
   12b88:	93 e1       	ldi	r25, 0x13	; 19
   12b8a:	1f 92       	push	r1
   12b8c:	9f 93       	push	r25
   12b8e:	8f 93       	push	r24
   12b90:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12b94:	0f 90       	pop	r0
   12b96:	0f 90       	pop	r0
   12b98:	0f 90       	pop	r0
   12b9a:	0f 90       	pop	r0
   12b9c:	0f 90       	pop	r0
   12b9e:	80 e0       	ldi	r24, 0x00	; 0
   12ba0:	90 e0       	ldi	r25, 0x00	; 0
   12ba2:	cf 91       	pop	r28
   12ba4:	1f 91       	pop	r17
   12ba6:	0f 91       	pop	r16
   12ba8:	08 95       	ret

00012baa <GPIB_SECONDARY_ADDRESS>:
   12baa:	0f 93       	push	r16
   12bac:	1f 93       	push	r17
   12bae:	cf 93       	push	r28
   12bb0:	c8 2f       	mov	r28, r24
   12bb2:	08 2f       	mov	r16, r24
   12bb4:	10 e0       	ldi	r17, 0x00	; 0
   12bb6:	c8 01       	movw	r24, r16
   12bb8:	89 dc       	rcall	.-1774   	; 0x124cc <SS80_is_MSA>
   12bba:	89 2b       	or	r24, r25
   12bbc:	19 f1       	breq	.+70     	; 0x12c04 <GPIB_SECONDARY_ADDRESS+0x5a>
   12bbe:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12bc2:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   12bc6:	84 72       	andi	r24, 0x24	; 36
   12bc8:	99 27       	eor	r25, r25
   12bca:	89 2b       	or	r24, r25
   12bcc:	71 f0       	breq	.+28     	; 0x12bea <GPIB_SECONDARY_ADDRESS+0x40>
   12bce:	1f 92       	push	r1
   12bd0:	cf 93       	push	r28
   12bd2:	87 e1       	ldi	r24, 0x17	; 23
   12bd4:	93 e1       	ldi	r25, 0x13	; 19
   12bd6:	1f 92       	push	r1
   12bd8:	9f 93       	push	r25
   12bda:	8f 93       	push	r24
   12bdc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12be0:	0f 90       	pop	r0
   12be2:	0f 90       	pop	r0
   12be4:	0f 90       	pop	r0
   12be6:	0f 90       	pop	r0
   12be8:	0f 90       	pop	r0
   12bea:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   12bee:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   12bf2:	81 81       	ldd	r24, Z+1	; 0x01
   12bf4:	90 e0       	ldi	r25, 0x00	; 0
   12bf6:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_disable_PPR>
   12bfa:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   12bfe:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   12c02:	27 c0       	rjmp	.+78     	; 0x12c52 <GPIB_SECONDARY_ADDRESS+0xa8>
   12c04:	c8 01       	movw	r24, r16
   12c06:	95 dc       	rcall	.-1750   	; 0x12532 <AMIGO_is_MSA>
   12c08:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   12c0c:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   12c10:	89 2b       	or	r24, r25
   12c12:	21 f1       	breq	.+72     	; 0x12c5c <GPIB_SECONDARY_ADDRESS+0xb2>
   12c14:	c9 01       	movw	r24, r18
   12c16:	84 72       	andi	r24, 0x24	; 36
   12c18:	99 27       	eor	r25, r25
   12c1a:	89 2b       	or	r24, r25
   12c1c:	71 f0       	breq	.+28     	; 0x12c3a <GPIB_SECONDARY_ADDRESS+0x90>
   12c1e:	1f 92       	push	r1
   12c20:	cf 93       	push	r28
   12c22:	85 e0       	ldi	r24, 0x05	; 5
   12c24:	93 e1       	ldi	r25, 0x13	; 19
   12c26:	1f 92       	push	r1
   12c28:	9f 93       	push	r25
   12c2a:	8f 93       	push	r24
   12c2c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12c30:	0f 90       	pop	r0
   12c32:	0f 90       	pop	r0
   12c34:	0f 90       	pop	r0
   12c36:	0f 90       	pop	r0
   12c38:	0f 90       	pop	r0
   12c3a:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   12c3e:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   12c42:	81 81       	ldd	r24, Z+1	; 0x01
   12c44:	90 e0       	ldi	r25, 0x00	; 0
   12c46:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_disable_PPR>
   12c4a:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   12c4e:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   12c52:	63 a1       	ldd	r22, Z+35	; 0x23
   12c54:	74 a1       	ldd	r23, Z+36	; 0x24
   12c56:	8c 2f       	mov	r24, r28
   12c58:	12 de       	rcall	.-988    	; 0x1287e <Send_Identify>
   12c5a:	20 c0       	rjmp	.+64     	; 0x12c9c <GPIB_SECONDARY_ADDRESS+0xf2>
   12c5c:	c9 01       	movw	r24, r18
   12c5e:	84 72       	andi	r24, 0x24	; 36
   12c60:	99 27       	eor	r25, r25
   12c62:	00 97       	sbiw	r24, 0x00	; 0
   12c64:	d9 f0       	breq	.+54     	; 0x12c9c <GPIB_SECONDARY_ADDRESS+0xf2>
   12c66:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <talking>
   12c6a:	1f 92       	push	r1
   12c6c:	8f 93       	push	r24
   12c6e:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   12c72:	1f 92       	push	r1
   12c74:	8f 93       	push	r24
   12c76:	1f 92       	push	r1
   12c78:	cf 93       	push	r28
   12c7a:	8f ed       	ldi	r24, 0xDF	; 223
   12c7c:	92 e1       	ldi	r25, 0x12	; 18
   12c7e:	1f 92       	push	r1
   12c80:	9f 93       	push	r25
   12c82:	8f 93       	push	r24
   12c84:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12c88:	8d b7       	in	r24, 0x3d	; 61
   12c8a:	9e b7       	in	r25, 0x3e	; 62
   12c8c:	09 96       	adiw	r24, 0x09	; 9
   12c8e:	0f b6       	in	r0, 0x3f	; 63
   12c90:	f8 94       	cli
   12c92:	9e bf       	out	0x3e, r25	; 62
   12c94:	0f be       	out	0x3f, r0	; 63
   12c96:	8d bf       	out	0x3d, r24	; 61
   12c98:	80 e0       	ldi	r24, 0x00	; 0
   12c9a:	90 e0       	ldi	r25, 0x00	; 0
   12c9c:	cf 91       	pop	r28
   12c9e:	1f 91       	pop	r17
   12ca0:	0f 91       	pop	r16
   12ca2:	08 95       	ret

00012ca4 <listen_cleanup>:
   12ca4:	60 91 35 1f 	lds	r22, 0x1F35	; 0x801f35 <listening_last>
   12ca8:	66 23       	and	r22, r22
   12caa:	e9 f0       	breq	.+58     	; 0x12ce6 <listen_cleanup+0x42>
   12cac:	70 e0       	ldi	r23, 0x00	; 0
   12cae:	40 e2       	ldi	r20, 0x20	; 32
   12cb0:	50 e0       	ldi	r21, 0x00	; 0
   12cb2:	83 e0       	ldi	r24, 0x03	; 3
   12cb4:	90 e0       	ldi	r25, 0x00	; 0
   12cb6:	0e 94 b0 b5 	call	0x16b60	; 0x16b60 <find_device>
   12cba:	01 96       	adiw	r24, 0x01	; 1
   12cbc:	a1 f0       	breq	.+40     	; 0x12ce6 <listen_cleanup+0x42>
   12cbe:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12cc2:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   12cc6:	84 72       	andi	r24, 0x24	; 36
   12cc8:	99 27       	eor	r25, r25
   12cca:	89 2b       	or	r24, r25
   12ccc:	51 f0       	breq	.+20     	; 0x12ce2 <listen_cleanup+0x3e>
   12cce:	8e ec       	ldi	r24, 0xCE	; 206
   12cd0:	92 e1       	ldi	r25, 0x12	; 18
   12cd2:	1f 92       	push	r1
   12cd4:	9f 93       	push	r25
   12cd6:	8f 93       	push	r24
   12cd8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12cdc:	0f 90       	pop	r0
   12cde:	0f 90       	pop	r0
   12ce0:	0f 90       	pop	r0
   12ce2:	0c 94 f3 b2 	jmp	0x165e6	; 0x165e6 <printer_close>
   12ce6:	08 95       	ret

00012ce8 <GPIB_LISTEN>:
   12ce8:	0f 93       	push	r16
   12cea:	1f 93       	push	r17
   12cec:	cf 93       	push	r28
   12cee:	c8 2f       	mov	r28, r24
   12cf0:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   12cf4:	80 93 35 1f 	sts	0x1F35, r24	; 0x801f35 <listening_last>
   12cf8:	c0 93 3b 1f 	sts	0x1F3B, r28	; 0x801f3b <listening>
   12cfc:	d3 df       	rcall	.-90     	; 0x12ca4 <listen_cleanup>
   12cfe:	cf 33       	cpi	r28, 0x3F	; 63
   12d00:	19 f5       	brne	.+70     	; 0x12d48 <GPIB_LISTEN+0x60>
   12d02:	10 92 3b 1f 	sts	0x1F3B, r1	; 0x801f3b <listening>
   12d06:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12d0a:	82 ff       	sbrs	r24, 2
   12d0c:	75 c0       	rjmp	.+234    	; 0x12df8 <GPIB_LISTEN+0x110>
   12d0e:	87 ec       	ldi	r24, 0xC7	; 199
   12d10:	93 e1       	ldi	r25, 0x13	; 19
   12d12:	1f 92       	push	r1
   12d14:	9f 93       	push	r25
   12d16:	8f 93       	push	r24
   12d18:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12d1c:	0f 90       	pop	r0
   12d1e:	0f 90       	pop	r0
   12d20:	0f 90       	pop	r0
   12d22:	80 91 33 1d 	lds	r24, 0x1D33	; 0x801d33 <lastcmd>
   12d26:	90 91 34 1d 	lds	r25, 0x1D34	; 0x801d34 <lastcmd+0x1>
   12d2a:	8f 35       	cpi	r24, 0x5F	; 95
   12d2c:	91 05       	cpc	r25, r1
   12d2e:	09 f0       	breq	.+2      	; 0x12d32 <GPIB_LISTEN+0x4a>
   12d30:	63 c0       	rjmp	.+198    	; 0x12df8 <GPIB_LISTEN+0x110>
   12d32:	85 ec       	ldi	r24, 0xC5	; 197
   12d34:	93 e1       	ldi	r25, 0x13	; 19
   12d36:	1f 92       	push	r1
   12d38:	9f 93       	push	r25
   12d3a:	8f 93       	push	r24
   12d3c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12d40:	0f 90       	pop	r0
   12d42:	0f 90       	pop	r0
   12d44:	0f 90       	pop	r0
   12d46:	58 c0       	rjmp	.+176    	; 0x12df8 <GPIB_LISTEN+0x110>
   12d48:	0c 2f       	mov	r16, r28
   12d4a:	10 e0       	ldi	r17, 0x00	; 0
   12d4c:	c8 01       	movw	r24, r16
   12d4e:	cf db       	rcall	.-2146   	; 0x124ee <AMIGO_is_MLA>
   12d50:	89 2b       	or	r24, r25
   12d52:	71 f0       	breq	.+28     	; 0x12d70 <GPIB_LISTEN+0x88>
   12d54:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12d58:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   12d5c:	84 72       	andi	r24, 0x24	; 36
   12d5e:	99 27       	eor	r25, r25
   12d60:	89 2b       	or	r24, r25
   12d62:	09 f4       	brne	.+2      	; 0x12d66 <GPIB_LISTEN+0x7e>
   12d64:	49 c0       	rjmp	.+146    	; 0x12df8 <GPIB_LISTEN+0x110>
   12d66:	1f 92       	push	r1
   12d68:	cf 93       	push	r28
   12d6a:	83 eb       	ldi	r24, 0xB3	; 179
   12d6c:	93 e1       	ldi	r25, 0x13	; 19
   12d6e:	3a c0       	rjmp	.+116    	; 0x12de4 <GPIB_LISTEN+0xfc>
   12d70:	c8 01       	movw	r24, r16
   12d72:	8a db       	rcall	.-2284   	; 0x12488 <SS80_is_MLA>
   12d74:	89 2b       	or	r24, r25
   12d76:	69 f0       	breq	.+26     	; 0x12d92 <GPIB_LISTEN+0xaa>
   12d78:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12d7c:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   12d80:	84 72       	andi	r24, 0x24	; 36
   12d82:	99 27       	eor	r25, r25
   12d84:	89 2b       	or	r24, r25
   12d86:	c1 f1       	breq	.+112    	; 0x12df8 <GPIB_LISTEN+0x110>
   12d88:	1f 92       	push	r1
   12d8a:	cf 93       	push	r28
   12d8c:	82 ea       	ldi	r24, 0xA2	; 162
   12d8e:	93 e1       	ldi	r25, 0x13	; 19
   12d90:	29 c0       	rjmp	.+82     	; 0x12de4 <GPIB_LISTEN+0xfc>
   12d92:	c8 01       	movw	r24, r16
   12d94:	df db       	rcall	.-2114   	; 0x12554 <PRINTER_is_MLA>
   12d96:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   12d9a:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   12d9e:	89 2b       	or	r24, r25
   12da0:	d9 f0       	breq	.+54     	; 0x12dd8 <GPIB_LISTEN+0xf0>
   12da2:	24 72       	andi	r18, 0x24	; 36
   12da4:	33 27       	eor	r19, r19
   12da6:	23 2b       	or	r18, r19
   12da8:	71 f0       	breq	.+28     	; 0x12dc6 <GPIB_LISTEN+0xde>
   12daa:	1f 92       	push	r1
   12dac:	cf 93       	push	r28
   12dae:	8e e8       	ldi	r24, 0x8E	; 142
   12db0:	93 e1       	ldi	r25, 0x13	; 19
   12db2:	1f 92       	push	r1
   12db4:	9f 93       	push	r25
   12db6:	8f 93       	push	r24
   12db8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12dbc:	0f 90       	pop	r0
   12dbe:	0f 90       	pop	r0
   12dc0:	0f 90       	pop	r0
   12dc2:	0f 90       	pop	r0
   12dc4:	0f 90       	pop	r0
   12dc6:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <talking>
   12dca:	8f 35       	cpi	r24, 0x5F	; 95
   12dcc:	a9 f0       	breq	.+42     	; 0x12df8 <GPIB_LISTEN+0x110>
   12dce:	80 e0       	ldi	r24, 0x00	; 0
   12dd0:	90 e0       	ldi	r25, 0x00	; 0
   12dd2:	0e 94 40 b3 	call	0x16680	; 0x16680 <printer_open>
   12dd6:	10 c0       	rjmp	.+32     	; 0x12df8 <GPIB_LISTEN+0x110>
   12dd8:	22 ff       	sbrs	r18, 2
   12dda:	0e c0       	rjmp	.+28     	; 0x12df8 <GPIB_LISTEN+0x110>
   12ddc:	1f 92       	push	r1
   12dde:	cf 93       	push	r28
   12de0:	82 e8       	ldi	r24, 0x82	; 130
   12de2:	93 e1       	ldi	r25, 0x13	; 19
   12de4:	1f 92       	push	r1
   12de6:	9f 93       	push	r25
   12de8:	8f 93       	push	r24
   12dea:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12dee:	0f 90       	pop	r0
   12df0:	0f 90       	pop	r0
   12df2:	0f 90       	pop	r0
   12df4:	0f 90       	pop	r0
   12df6:	0f 90       	pop	r0
   12df8:	80 e0       	ldi	r24, 0x00	; 0
   12dfa:	90 e0       	ldi	r25, 0x00	; 0
   12dfc:	cf 91       	pop	r28
   12dfe:	1f 91       	pop	r17
   12e00:	0f 91       	pop	r16
   12e02:	08 95       	ret

00012e04 <gpib_task>:
   12e04:	cf 93       	push	r28
   12e06:	df 93       	push	r29
   12e08:	0e 94 24 8c 	call	0x11848	; 0x11848 <gpib_state_init>
   12e0c:	c5 db       	rcall	.-2166   	; 0x12598 <gpib_init_devices>
   12e0e:	10 92 b1 19 	sts	0x19B1, r1	; 0x8019b1 <gpib_log_fp+0x1>
   12e12:	10 92 b0 19 	sts	0x19B0, r1	; 0x8019b0 <gpib_log_fp>
   12e16:	80 e0       	ldi	r24, 0x00	; 0
   12e18:	90 e0       	ldi	r25, 0x00	; 0
   12e1a:	06 d9       	rcall	.-3572   	; 0x12028 <gpib_read_byte>
   12e1c:	ec 01       	movw	r28, r24
   12e1e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12e22:	83 ff       	sbrs	r24, 3
   12e24:	02 c0       	rjmp	.+4      	; 0x12e2a <gpib_task+0x26>
   12e26:	ce 01       	movw	r24, r28
   12e28:	d5 d9       	rcall	.-3158   	; 0x121d4 <gpib_decode>
   12e2a:	ce 01       	movw	r24, r28
   12e2c:	4a dc       	rcall	.-1900   	; 0x126c2 <gpib_error_test>
   12e2e:	9c 01       	movw	r18, r24
   12e30:	23 70       	andi	r18, 0x03	; 3
   12e32:	33 27       	eor	r19, r19
   12e34:	23 2b       	or	r18, r19
   12e36:	09 f0       	breq	.+2      	; 0x12e3a <gpib_task+0x36>
   12e38:	43 c0       	rjmp	.+134    	; 0x12ec0 <gpib_task+0xbc>
   12e3a:	89 2b       	or	r24, r25
   12e3c:	61 f7       	brne	.-40     	; 0x12e16 <gpib_task+0x12>
   12e3e:	d2 ff       	sbrs	r29, 2
   12e40:	26 c0       	rjmp	.+76     	; 0x12e8e <gpib_task+0x8a>
   12e42:	8c 2f       	mov	r24, r28
   12e44:	8f 77       	andi	r24, 0x7F	; 127
   12e46:	80 32       	cpi	r24, 0x20	; 32
   12e48:	10 f4       	brcc	.+4      	; 0x12e4e <gpib_task+0x4a>
   12e4a:	63 dd       	rcall	.-1338   	; 0x12912 <GPIB>
   12e4c:	e4 cf       	rjmp	.-56     	; 0x12e16 <gpib_task+0x12>
   12e4e:	90 ee       	ldi	r25, 0xE0	; 224
   12e50:	98 0f       	add	r25, r24
   12e52:	90 32       	cpi	r25, 0x20	; 32
   12e54:	10 f4       	brcc	.+4      	; 0x12e5a <gpib_task+0x56>
   12e56:	48 df       	rcall	.-368    	; 0x12ce8 <GPIB_LISTEN>
   12e58:	de cf       	rjmp	.-68     	; 0x12e16 <gpib_task+0x12>
   12e5a:	90 ec       	ldi	r25, 0xC0	; 192
   12e5c:	98 0f       	add	r25, r24
   12e5e:	90 32       	cpi	r25, 0x20	; 32
   12e60:	10 f4       	brcc	.+4      	; 0x12e66 <gpib_task+0x62>
   12e62:	0e de       	rcall	.-996    	; 0x12a80 <GPIB_TALK>
   12e64:	d8 cf       	rjmp	.-80     	; 0x12e16 <gpib_task+0x12>
   12e66:	90 91 3b 1f 	lds	r25, 0x1F3B	; 0x801f3b <listening>
   12e6a:	99 23       	and	r25, r25
   12e6c:	59 f0       	breq	.+22     	; 0x12e84 <gpib_task+0x80>
   12e6e:	20 91 33 1d 	lds	r18, 0x1D33	; 0x801d33 <lastcmd>
   12e72:	30 91 34 1d 	lds	r19, 0x1D34	; 0x801d34 <lastcmd+0x1>
   12e76:	2f 35       	cpi	r18, 0x5F	; 95
   12e78:	31 05       	cpc	r19, r1
   12e7a:	21 f4       	brne	.+8      	; 0x12e84 <gpib_task+0x80>
   12e7c:	10 92 3a 1f 	sts	0x1F3A, r1	; 0x801f3a <secondary>
   12e80:	94 de       	rcall	.-728    	; 0x12baa <GPIB_SECONDARY_ADDRESS>
   12e82:	c9 cf       	rjmp	.-110    	; 0x12e16 <gpib_task+0x12>
   12e84:	80 93 3a 1f 	sts	0x1F3A, r24	; 0x801f3a <secondary>
   12e88:	60 e0       	ldi	r22, 0x00	; 0
   12e8a:	90 e0       	ldi	r25, 0x00	; 0
   12e8c:	12 c0       	rjmp	.+36     	; 0x12eb2 <gpib_task+0xae>
   12e8e:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   12e92:	90 e0       	ldi	r25, 0x00	; 0
   12e94:	5f db       	rcall	.-2370   	; 0x12554 <PRINTER_is_MLA>
   12e96:	89 2b       	or	r24, r25
   12e98:	29 f0       	breq	.+10     	; 0x12ea4 <gpib_task+0xa0>
   12e9a:	ce 01       	movw	r24, r28
   12e9c:	99 27       	eor	r25, r25
   12e9e:	0e 94 e1 b3 	call	0x167c2	; 0x167c2 <printer_buffer>
   12ea2:	b9 cf       	rjmp	.-142    	; 0x12e16 <gpib_task+0x12>
   12ea4:	80 91 3a 1f 	lds	r24, 0x1F3A	; 0x801f3a <secondary>
   12ea8:	88 23       	and	r24, r24
   12eaa:	09 f4       	brne	.+2      	; 0x12eae <gpib_task+0xaa>
   12eac:	b4 cf       	rjmp	.-152    	; 0x12e16 <gpib_task+0x12>
   12eae:	61 e0       	ldi	r22, 0x01	; 1
   12eb0:	ce 01       	movw	r24, r28
   12eb2:	91 dc       	rcall	.-1758   	; 0x127d6 <GPIB_COMMANDS>
   12eb4:	06 dc       	rcall	.-2036   	; 0x126c2 <gpib_error_test>
   12eb6:	83 70       	andi	r24, 0x03	; 3
   12eb8:	99 27       	eor	r25, r25
   12eba:	89 2b       	or	r24, r25
   12ebc:	09 f4       	brne	.+2      	; 0x12ec0 <gpib_task+0xbc>
   12ebe:	ab cf       	rjmp	.-170    	; 0x12e16 <gpib_task+0x12>
   12ec0:	df 91       	pop	r29
   12ec2:	cf 91       	pop	r28
   12ec4:	08 95       	ret

00012ec6 <talk_cleanup>:
   12ec6:	08 95       	ret

00012ec8 <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   12ec8:	cf 93       	push	r28
   12eca:	df 93       	push	r29
   12ecc:	ec 01       	movw	r28, r24
    printf("gpib help\n");
   12ece:	80 e1       	ldi	r24, 0x10	; 16
   12ed0:	98 e1       	ldi	r25, 0x18	; 24
   12ed2:	1f 92       	push	r1
   12ed4:	9f 93       	push	r25
   12ed6:	8f 93       	push	r24
   12ed8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    if(full)
   12edc:	0f 90       	pop	r0
   12ede:	0f 90       	pop	r0
   12ee0:	0f 90       	pop	r0
   12ee2:	cd 2b       	or	r28, r29
   12ee4:	51 f0       	breq	.+20     	; 0x12efa <gpib_help+0x32>
    {
        printf("gpib prefix is optional\n"
   12ee6:	8f e8       	ldi	r24, 0x8F	; 143
   12ee8:	96 e1       	ldi	r25, 0x16	; 22
   12eea:	1f 92       	push	r1
   12eec:	9f 93       	push	r25
   12eee:	8f 93       	push	r24
   12ef0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   12ef4:	0f 90       	pop	r0
   12ef6:	0f 90       	pop	r0
   12ef8:	0f 90       	pop	r0
			"gpib port write latch [A-D] val\n"
			"gpib port write pins  [A-D] val\n"
            "\n"
            );
    }
}
   12efa:	df 91       	pop	r29
   12efc:	cf 91       	pop	r28
   12efe:	08 95       	ret

00012f00 <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   12f00:	ef 92       	push	r14
   12f02:	ff 92       	push	r15
   12f04:	0f 93       	push	r16
   12f06:	1f 93       	push	r17
   12f08:	cf 93       	push	r28
   12f0a:	df 93       	push	r29
   12f0c:	7c 01       	movw	r14, r24

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   12f0e:	fb 01       	movw	r30, r22
   12f10:	80 81       	ld	r24, Z
   12f12:	91 81       	ldd	r25, Z+1	; 0x01

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   12f14:	00 97       	sbiw	r24, 0x00	; 0
   12f16:	19 f4       	brne	.+6      	; 0x12f1e <gpib_tests+0x1e>
        return(0);
   12f18:	80 e0       	ldi	r24, 0x00	; 0
   12f1a:	90 e0       	ldi	r25, 0x00	; 0
   12f1c:	e5 c2       	rjmp	.+1482   	; 0x134e8 <gpib_tests+0x5e8>
   12f1e:	eb 01       	movw	r28, r22

    ind = 0;
    ptr = argv[ind++];

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   12f20:	6d eb       	ldi	r22, 0xBD	; 189
   12f22:	7d e0       	ldi	r23, 0x0D	; 13
   12f24:	0e 94 36 31 	call	0x626c	; 0x626c <MATCH>
   12f28:	89 2b       	or	r24, r25
   12f2a:	b1 f3       	breq	.-20     	; 0x12f18 <gpib_tests+0x18>
        return(0);

    ptr = argv[ind++];
   12f2c:	0a 81       	ldd	r16, Y+2	; 0x02
   12f2e:	1b 81       	ldd	r17, Y+3	; 0x03
    if ( !ptr || MATCH(ptr,"help") )
   12f30:	01 15       	cp	r16, r1
   12f32:	11 05       	cpc	r17, r1
   12f34:	21 f4       	brne	.+8      	; 0x12f3e <gpib_tests+0x3e>
    {
        gpib_help(1);
   12f36:	81 e0       	ldi	r24, 0x01	; 1
   12f38:	90 e0       	ldi	r25, 0x00	; 0
   12f3a:	c6 df       	rcall	.-116    	; 0x12ec8 <gpib_help>
   12f3c:	d3 c2       	rjmp	.+1446   	; 0x134e4 <gpib_tests+0x5e4>
    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
        return(0);

    ptr = argv[ind++];
    if ( !ptr || MATCH(ptr,"help") )
   12f3e:	63 ea       	ldi	r22, 0xA3	; 163
   12f40:	76 e1       	ldi	r23, 0x16	; 22
   12f42:	c8 01       	movw	r24, r16
   12f44:	0e 94 36 31 	call	0x626c	; 0x626c <MATCH>
   12f48:	89 2b       	or	r24, r25
   12f4a:	a9 f7       	brne	.-22     	; 0x12f36 <gpib_tests+0x36>
    {
        gpib_help(1);
        return(1);
    }

    if (MATCHARGS(ptr,"addresses",(ind+0),argc))
   12f4c:	97 01       	movw	r18, r14
   12f4e:	42 e0       	ldi	r20, 0x02	; 2
   12f50:	50 e0       	ldi	r21, 0x00	; 0
   12f52:	62 ec       	ldi	r22, 0xC2	; 194
   12f54:	7d e0       	ldi	r23, 0x0D	; 13
   12f56:	c8 01       	movw	r24, r16
   12f58:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   12f5c:	89 2b       	or	r24, r25
   12f5e:	19 f0       	breq	.+6      	; 0x12f66 <gpib_tests+0x66>
    {
        display_Addresses();
   12f60:	0e 94 f3 c1 	call	0x183e6	; 0x183e6 <display_Addresses>
   12f64:	bf c2       	rjmp	.+1406   	; 0x134e4 <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"config",(ind+0),argc))
   12f66:	97 01       	movw	r18, r14
   12f68:	42 e0       	ldi	r20, 0x02	; 2
   12f6a:	50 e0       	ldi	r21, 0x00	; 0
   12f6c:	6c ec       	ldi	r22, 0xCC	; 204
   12f6e:	7d e0       	ldi	r23, 0x0D	; 13
   12f70:	c8 01       	movw	r24, r16
   12f72:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   12f76:	89 2b       	or	r24, r25
   12f78:	19 f0       	breq	.+6      	; 0x12f80 <gpib_tests+0x80>
    {
        display_Config();
   12f7a:	0e 94 ee c2 	call	0x185dc	; 0x185dc <display_Config>
   12f7e:	b2 c2       	rjmp	.+1380   	; 0x134e4 <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"debug", (ind+1) ,argc))
   12f80:	97 01       	movw	r18, r14
   12f82:	43 e0       	ldi	r20, 0x03	; 3
   12f84:	50 e0       	ldi	r21, 0x00	; 0
   12f86:	63 ed       	ldi	r22, 0xD3	; 211
   12f88:	7d e0       	ldi	r23, 0x0D	; 13
   12f8a:	c8 01       	movw	r24, r16
   12f8c:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   12f90:	89 2b       	or	r24, r25
   12f92:	69 f0       	breq	.+26     	; 0x12fae <gpib_tests+0xae>
    {
        debuglevel = get_value(argv[ind]);
   12f94:	8c 81       	ldd	r24, Y+4	; 0x04
   12f96:	9d 81       	ldd	r25, Y+5	; 0x05
   12f98:	0e 94 2f 32 	call	0x645e	; 0x645e <get_value>
   12f9c:	60 93 b0 01 	sts	0x01B0, r22	; 0x8001b0 <debuglevel>
   12fa0:	70 93 b1 01 	sts	0x01B1, r23	; 0x8001b1 <debuglevel+0x1>
        printf("debug=%04XH\n", debuglevel);
   12fa4:	7f 93       	push	r23
   12fa6:	6f 93       	push	r22
   12fa8:	82 e8       	ldi	r24, 0x82	; 130
   12faa:	96 e1       	ldi	r25, 0x16	; 22
   12fac:	b9 c1       	rjmp	.+882    	; 0x13320 <gpib_tests+0x420>
        return(1);
    }

    if (MATCHARGS(ptr,"elapsed_reset",(ind+0),argc))
   12fae:	97 01       	movw	r18, r14
   12fb0:	42 e0       	ldi	r20, 0x02	; 2
   12fb2:	50 e0       	ldi	r21, 0x00	; 0
   12fb4:	69 ed       	ldi	r22, 0xD9	; 217
   12fb6:	7d e0       	ldi	r23, 0x0D	; 13
   12fb8:	c8 01       	movw	r24, r16
   12fba:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   12fbe:	89 2b       	or	r24, r25
   12fc0:	19 f0       	breq	.+6      	; 0x12fc8 <gpib_tests+0xc8>
    {
        gpib_timer_elapsed_begin();
   12fc2:	0e 94 94 8b 	call	0x11728	; 0x11728 <gpib_timer_elapsed_begin>
   12fc6:	8e c2       	rjmp	.+1308   	; 0x134e4 <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"elapsed",(ind+0),argc))
   12fc8:	97 01       	movw	r18, r14
   12fca:	42 e0       	ldi	r20, 0x02	; 2
   12fcc:	50 e0       	ldi	r21, 0x00	; 0
   12fce:	67 ee       	ldi	r22, 0xE7	; 231
   12fd0:	7d e0       	ldi	r23, 0x0D	; 13
   12fd2:	c8 01       	movw	r24, r16
   12fd4:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   12fd8:	89 2b       	or	r24, r25
   12fda:	29 f0       	breq	.+10     	; 0x12fe6 <gpib_tests+0xe6>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   12fdc:	8f ee       	ldi	r24, 0xEF	; 239
   12fde:	9d e0       	ldi	r25, 0x0D	; 13
   12fe0:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <gpib_timer_elapsed_end>
   12fe4:	7f c2       	rjmp	.+1278   	; 0x134e4 <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"task",(ind+0),argc))
   12fe6:	97 01       	movw	r18, r14
   12fe8:	42 e0       	ldi	r20, 0x02	; 2
   12fea:	50 e0       	ldi	r21, 0x00	; 0
   12fec:	6d ef       	ldi	r22, 0xFD	; 253
   12fee:	7d e0       	ldi	r23, 0x0D	; 13
   12ff0:	c8 01       	movw	r24, r16
   12ff2:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   12ff6:	89 2b       	or	r24, r25
    {
        gpib_task();
   12ff8:	11 f0       	breq	.+4      	; 0x12ffe <gpib_tests+0xfe>
   12ffa:	04 df       	rcall	.-504    	; 0x12e04 <gpib_task>
   12ffc:	73 c2       	rjmp	.+1254   	; 0x134e4 <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   12ffe:	97 01       	movw	r18, r14
   13000:	43 e0       	ldi	r20, 0x03	; 3
   13002:	50 e0       	ldi	r21, 0x00	; 0
   13004:	62 e0       	ldi	r22, 0x02	; 2
   13006:	7e e0       	ldi	r23, 0x0E	; 14
   13008:	c8 01       	movw	r24, r16
   1300a:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   1300e:	89 2b       	or	r24, r25
   13010:	a1 f0       	breq	.+40     	; 0x1303a <gpib_tests+0x13a>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   13012:	8e 81       	ldd	r24, Y+6	; 0x06
   13014:	9f 81       	ldd	r25, Y+7	; 0x07
   13016:	00 97       	sbiw	r24, 0x00	; 0
   13018:	51 f0       	breq	.+20     	; 0x1302e <gpib_tests+0x12e>
   1301a:	68 e0       	ldi	r22, 0x08	; 8
   1301c:	7e e0       	ldi	r23, 0x0E	; 14
   1301e:	0e 94 36 31 	call	0x626c	; 0x626c <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   13022:	61 e0       	ldi	r22, 0x01	; 1
   13024:	70 e0       	ldi	r23, 0x00	; 0
   13026:	89 2b       	or	r24, r25
   13028:	21 f4       	brne	.+8      	; 0x13032 <gpib_tests+0x132>
   1302a:	60 e0       	ldi	r22, 0x00	; 0
   1302c:	02 c0       	rjmp	.+4      	; 0x13032 <gpib_tests+0x132>
   1302e:	60 e0       	ldi	r22, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   13030:	70 e0       	ldi	r23, 0x00	; 0
   13032:	8c 81       	ldd	r24, Y+4	; 0x04
   13034:	9d 81       	ldd	r25, Y+5	; 0x05
   13036:	b8 da       	rcall	.-2704   	; 0x125a8 <gpib_trace_task>
        return(1);
    }

    if ( MATCHARGS(ptr, "ifc",(ind+0),argc))
   13038:	55 c2       	rjmp	.+1194   	; 0x134e4 <gpib_tests+0x5e4>
   1303a:	97 01       	movw	r18, r14
   1303c:	42 e0       	ldi	r20, 0x02	; 2
   1303e:	50 e0       	ldi	r21, 0x00	; 0
   13040:	6c e0       	ldi	r22, 0x0C	; 12
   13042:	7e e0       	ldi	r23, 0x0E	; 14
   13044:	c8 01       	movw	r24, r16
   13046:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   1304a:	89 2b       	or	r24, r25
    {
        gpib_assert_ifc();
   1304c:	19 f0       	breq	.+6      	; 0x13054 <gpib_tests+0x154>
   1304e:	0e 94 ae 8c 	call	0x1195c	; 0x1195c <gpib_assert_ifc>
        return(1);

    }

    if (MATCHARGS(ptr,"plot_echo", (ind+1) ,argc))
   13052:	48 c2       	rjmp	.+1168   	; 0x134e4 <gpib_tests+0x5e4>
   13054:	97 01       	movw	r18, r14
   13056:	43 e0       	ldi	r20, 0x03	; 3
   13058:	50 e0       	ldi	r21, 0x00	; 0
   1305a:	60 e1       	ldi	r22, 0x10	; 16
   1305c:	7e e0       	ldi	r23, 0x0E	; 14
   1305e:	c8 01       	movw	r24, r16
   13060:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   13064:	89 2b       	or	r24, r25
    {
        plot_echo(atoi(argv[ind]) );
   13066:	39 f0       	breq	.+14     	; 0x13076 <gpib_tests+0x176>
   13068:	8c 81       	ldd	r24, Y+4	; 0x04
   1306a:	9d 81       	ldd	r25, Y+5	; 0x05
   1306c:	0e 94 ad 45 	call	0x8b5a	; 0x8b5a <atoi>
   13070:	0e 94 83 b4 	call	0x16906	; 0x16906 <plot_echo>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_bit_clr", (ind+1) ,argc))
   13074:	37 c2       	rjmp	.+1134   	; 0x134e4 <gpib_tests+0x5e4>
   13076:	97 01       	movw	r18, r14
   13078:	43 e0       	ldi	r20, 0x03	; 3
   1307a:	50 e0       	ldi	r21, 0x00	; 0
   1307c:	6a e1       	ldi	r22, 0x1A	; 26
   1307e:	7e e0       	ldi	r23, 0x0E	; 14
   13080:	c8 01       	movw	r24, r16
   13082:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   13086:	89 2b       	or	r24, r25
    {
        ppr_bit_clr(atoh(argv[ind] ));
   13088:	41 f0       	breq	.+16     	; 0x1309a <gpib_tests+0x19a>
   1308a:	8c 81       	ldd	r24, Y+4	; 0x04
   1308c:	9d 81       	ldd	r25, Y+5	; 0x05
   1308e:	0e 94 a7 45 	call	0x8b4e	; 0x8b4e <atoh>
   13092:	86 2f       	mov	r24, r22
   13094:	0e 94 56 8a 	call	0x114ac	; 0x114ac <ppr_bit_clr>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_bit_set", (ind+1) ,argc))
   13098:	25 c2       	rjmp	.+1098   	; 0x134e4 <gpib_tests+0x5e4>
   1309a:	97 01       	movw	r18, r14
   1309c:	43 e0       	ldi	r20, 0x03	; 3
   1309e:	50 e0       	ldi	r21, 0x00	; 0
   130a0:	66 e2       	ldi	r22, 0x26	; 38
   130a2:	7e e0       	ldi	r23, 0x0E	; 14
   130a4:	c8 01       	movw	r24, r16
   130a6:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   130aa:	89 2b       	or	r24, r25
    {
        ppr_bit_set(atoh(argv[ind]) );
   130ac:	41 f0       	breq	.+16     	; 0x130be <gpib_tests+0x1be>
   130ae:	8c 81       	ldd	r24, Y+4	; 0x04
   130b0:	9d 81       	ldd	r25, Y+5	; 0x05
   130b2:	0e 94 a7 45 	call	0x8b4e	; 0x8b4e <atoh>
   130b6:	86 2f       	mov	r24, r22
   130b8:	0e 94 49 8a 	call	0x11492	; 0x11492 <ppr_bit_set>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_set", (ind+1) ,argc))
   130bc:	13 c2       	rjmp	.+1062   	; 0x134e4 <gpib_tests+0x5e4>
   130be:	97 01       	movw	r18, r14
   130c0:	43 e0       	ldi	r20, 0x03	; 3
   130c2:	50 e0       	ldi	r21, 0x00	; 0
   130c4:	62 e3       	ldi	r22, 0x32	; 50
   130c6:	7e e0       	ldi	r23, 0x0E	; 14
   130c8:	c8 01       	movw	r24, r16
   130ca:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   130ce:	89 2b       	or	r24, r25
    {
        ppr_set(atoh(argv[ind]) );
   130d0:	41 f0       	breq	.+16     	; 0x130e2 <gpib_tests+0x1e2>
   130d2:	8c 81       	ldd	r24, Y+4	; 0x04
   130d4:	9d 81       	ldd	r25, Y+5	; 0x05
   130d6:	0e 94 a7 45 	call	0x8b4e	; 0x8b4e <atoh>
   130da:	86 2f       	mov	r24, r22
   130dc:	0e 94 2a 8a 	call	0x11454	; 0x11454 <ppr_set>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_init",(ind+0),argc))
   130e0:	01 c2       	rjmp	.+1026   	; 0x134e4 <gpib_tests+0x5e4>
   130e2:	97 01       	movw	r18, r14
   130e4:	42 e0       	ldi	r20, 0x02	; 2
   130e6:	50 e0       	ldi	r21, 0x00	; 0
   130e8:	6a e3       	ldi	r22, 0x3A	; 58
   130ea:	7e e0       	ldi	r23, 0x0E	; 14
   130ec:	c8 01       	movw	r24, r16
   130ee:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   130f2:	89 2b       	or	r24, r25
    {
        ppr_init();
   130f4:	19 f0       	breq	.+6      	; 0x130fc <gpib_tests+0x1fc>
   130f6:	0e 94 38 8a 	call	0x11470	; 0x11470 <ppr_init>
        return(1);
    }


	// port read
    if (MATCHARGS(ptr,"port",(ind+3),argc))
   130fa:	f4 c1       	rjmp	.+1000   	; 0x134e4 <gpib_tests+0x5e4>
   130fc:	97 01       	movw	r18, r14
   130fe:	45 e0       	ldi	r20, 0x05	; 5
   13100:	50 e0       	ldi	r21, 0x00	; 0
   13102:	63 e4       	ldi	r22, 0x43	; 67
   13104:	7e e0       	ldi	r23, 0x0E	; 14
   13106:	c8 01       	movw	r24, r16
   13108:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   1310c:	89 2b       	or	r24, r25
   1310e:	09 f4       	brne	.+2      	; 0x13112 <gpib_tests+0x212>
    {
        if( MATCHI(argv[ind],"read") )
   13110:	12 c1       	rjmp	.+548    	; 0x13336 <gpib_tests+0x436>
   13112:	68 e4       	ldi	r22, 0x48	; 72
   13114:	7e e0       	ldi	r23, 0x0E	; 14
   13116:	8c 81       	ldd	r24, Y+4	; 0x04
   13118:	9d 81       	ldd	r25, Y+5	; 0x05
   1311a:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   1311e:	89 2b       	or	r24, r25
   13120:	09 f4       	brne	.+2      	; 0x13124 <gpib_tests+0x224>
		{
			if( MATCHI(argv[ind+1],"pins") )
   13122:	09 c1       	rjmp	.+530    	; 0x13336 <gpib_tests+0x436>
   13124:	6d e4       	ldi	r22, 0x4D	; 77
   13126:	7e e0       	ldi	r23, 0x0E	; 14
   13128:	8e 81       	ldd	r24, Y+6	; 0x06
   1312a:	9f 81       	ldd	r25, Y+7	; 0x07
   1312c:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   13130:	89 2b       	or	r24, r25
   13132:	09 f4       	brne	.+2      	; 0x13136 <gpib_tests+0x236>
			{   
				if( MATCHI(argv[ind+2],"A")) 
   13134:	4c c0       	rjmp	.+152    	; 0x131ce <gpib_tests+0x2ce>
   13136:	65 e4       	ldi	r22, 0x45	; 69
   13138:	74 e1       	ldi	r23, 0x14	; 20
   1313a:	88 85       	ldd	r24, Y+8	; 0x08
   1313c:	99 85       	ldd	r25, Y+9	; 0x09
   1313e:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   13142:	89 2b       	or	r24, r25
				{
					printf("Port pins A RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTA) );
   13144:	59 f0       	breq	.+22     	; 0x1315c <gpib_tests+0x25c>
   13146:	e2 b1       	in	r30, 0x02	; 2
   13148:	83 e0       	ldi	r24, 0x03	; 3
   1314a:	e8 9f       	mul	r30, r24
   1314c:	f0 01       	movw	r30, r0
   1314e:	11 24       	eor	r1, r1
   13150:	80 a1       	ldd	r24, Z+32	; 0x20
   13152:	1f 92       	push	r1
   13154:	8f 93       	push	r24
   13156:	8a e6       	ldi	r24, 0x6A	; 106
   13158:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   1315a:	e2 c0       	rjmp	.+452    	; 0x13320 <gpib_tests+0x420>
   1315c:	62 e5       	ldi	r22, 0x52	; 82
   1315e:	7e e0       	ldi	r23, 0x0E	; 14
   13160:	88 85       	ldd	r24, Y+8	; 0x08
   13162:	99 85       	ldd	r25, Y+9	; 0x09
   13164:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   13168:	89 2b       	or	r24, r25
				{
					printf("Port pins B RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTB) );
   1316a:	59 f0       	breq	.+22     	; 0x13182 <gpib_tests+0x282>
   1316c:	e5 b1       	in	r30, 0x05	; 5
   1316e:	83 e0       	ldi	r24, 0x03	; 3
   13170:	e8 9f       	mul	r30, r24
   13172:	f0 01       	movw	r30, r0
   13174:	11 24       	eor	r1, r1
   13176:	80 a1       	ldd	r24, Z+32	; 0x20
   13178:	1f 92       	push	r1
   1317a:	8f 93       	push	r24
   1317c:	82 e5       	ldi	r24, 0x52	; 82
   1317e:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   13180:	cf c0       	rjmp	.+414    	; 0x13320 <gpib_tests+0x420>
   13182:	6b e7       	ldi	r22, 0x7B	; 123
   13184:	7d e0       	ldi	r23, 0x0D	; 13
   13186:	88 85       	ldd	r24, Y+8	; 0x08
   13188:	99 85       	ldd	r25, Y+9	; 0x09
   1318a:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   1318e:	89 2b       	or	r24, r25
				{
					printf("Port pins C RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTC) );
   13190:	59 f0       	breq	.+22     	; 0x131a8 <gpib_tests+0x2a8>
   13192:	e8 b1       	in	r30, 0x08	; 8
   13194:	83 e0       	ldi	r24, 0x03	; 3
   13196:	e8 9f       	mul	r30, r24
   13198:	f0 01       	movw	r30, r0
   1319a:	11 24       	eor	r1, r1
   1319c:	80 a1       	ldd	r24, Z+32	; 0x20
   1319e:	1f 92       	push	r1
   131a0:	8f 93       	push	r24
   131a2:	8a e3       	ldi	r24, 0x3A	; 58
   131a4:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   131a6:	bc c0       	rjmp	.+376    	; 0x13320 <gpib_tests+0x420>
   131a8:	68 ed       	ldi	r22, 0xD8	; 216
   131aa:	77 e0       	ldi	r23, 0x07	; 7
   131ac:	88 85       	ldd	r24, Y+8	; 0x08
   131ae:	99 85       	ldd	r25, Y+9	; 0x09
   131b0:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   131b4:	89 2b       	or	r24, r25
				{
					printf("Port pins D RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTD) );
   131b6:	59 f0       	breq	.+22     	; 0x131ce <gpib_tests+0x2ce>
   131b8:	eb b1       	in	r30, 0x0b	; 11
   131ba:	83 e0       	ldi	r24, 0x03	; 3
   131bc:	e8 9f       	mul	r30, r24
   131be:	f0 01       	movw	r30, r0
   131c0:	11 24       	eor	r1, r1
   131c2:	80 a1       	ldd	r24, Z+32	; 0x20
   131c4:	1f 92       	push	r1
   131c6:	8f 93       	push	r24
   131c8:	82 e2       	ldi	r24, 0x22	; 34
   131ca:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"latch") )
   131cc:	a9 c0       	rjmp	.+338    	; 0x13320 <gpib_tests+0x420>
   131ce:	64 e5       	ldi	r22, 0x54	; 84
   131d0:	7e e0       	ldi	r23, 0x0E	; 14
   131d2:	8e 81       	ldd	r24, Y+6	; 0x06
   131d4:	9f 81       	ldd	r25, Y+7	; 0x07
   131d6:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   131da:	89 2b       	or	r24, r25
   131dc:	09 f4       	brne	.+2      	; 0x131e0 <gpib_tests+0x2e0>
			{   
				if( MATCHI(argv[ind+2],"A"))
   131de:	4c c0       	rjmp	.+152    	; 0x13278 <gpib_tests+0x378>
   131e0:	65 e4       	ldi	r22, 0x45	; 69
   131e2:	74 e1       	ldi	r23, 0x14	; 20
   131e4:	88 85       	ldd	r24, Y+8	; 0x08
   131e6:	99 85       	ldd	r25, Y+9	; 0x09
   131e8:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   131ec:	89 2b       	or	r24, r25
				{
					printf("Port latch A RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTA) );
   131ee:	59 f0       	breq	.+22     	; 0x13206 <gpib_tests+0x306>
   131f0:	e2 b1       	in	r30, 0x02	; 2
   131f2:	83 e0       	ldi	r24, 0x03	; 3
   131f4:	e8 9f       	mul	r30, r24
   131f6:	f0 01       	movw	r30, r0
   131f8:	11 24       	eor	r1, r1
   131fa:	82 a1       	ldd	r24, Z+34	; 0x22
   131fc:	1f 92       	push	r1
   131fe:	8f 93       	push	r24
   13200:	89 e0       	ldi	r24, 0x09	; 9
   13202:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   13204:	8d c0       	rjmp	.+282    	; 0x13320 <gpib_tests+0x420>
   13206:	62 e5       	ldi	r22, 0x52	; 82
   13208:	7e e0       	ldi	r23, 0x0E	; 14
   1320a:	88 85       	ldd	r24, Y+8	; 0x08
   1320c:	99 85       	ldd	r25, Y+9	; 0x09
   1320e:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   13212:	89 2b       	or	r24, r25
				{
					printf("Port latch B RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTB) );
   13214:	59 f0       	breq	.+22     	; 0x1322c <gpib_tests+0x32c>
   13216:	e5 b1       	in	r30, 0x05	; 5
   13218:	83 e0       	ldi	r24, 0x03	; 3
   1321a:	e8 9f       	mul	r30, r24
   1321c:	f0 01       	movw	r30, r0
   1321e:	11 24       	eor	r1, r1
   13220:	82 a1       	ldd	r24, Z+34	; 0x22
   13222:	1f 92       	push	r1
   13224:	8f 93       	push	r24
   13226:	80 ef       	ldi	r24, 0xF0	; 240
   13228:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   1322a:	7a c0       	rjmp	.+244    	; 0x13320 <gpib_tests+0x420>
   1322c:	6b e7       	ldi	r22, 0x7B	; 123
   1322e:	7d e0       	ldi	r23, 0x0D	; 13
   13230:	88 85       	ldd	r24, Y+8	; 0x08
   13232:	99 85       	ldd	r25, Y+9	; 0x09
   13234:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   13238:	89 2b       	or	r24, r25
				{
					printf("Port latch C RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTC) );
   1323a:	59 f0       	breq	.+22     	; 0x13252 <gpib_tests+0x352>
   1323c:	e8 b1       	in	r30, 0x08	; 8
   1323e:	83 e0       	ldi	r24, 0x03	; 3
   13240:	e8 9f       	mul	r30, r24
   13242:	f0 01       	movw	r30, r0
   13244:	11 24       	eor	r1, r1
   13246:	82 a1       	ldd	r24, Z+34	; 0x22
   13248:	1f 92       	push	r1
   1324a:	8f 93       	push	r24
   1324c:	87 ed       	ldi	r24, 0xD7	; 215
   1324e:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   13250:	67 c0       	rjmp	.+206    	; 0x13320 <gpib_tests+0x420>
   13252:	68 ed       	ldi	r22, 0xD8	; 216
   13254:	77 e0       	ldi	r23, 0x07	; 7
   13256:	88 85       	ldd	r24, Y+8	; 0x08
   13258:	99 85       	ldd	r25, Y+9	; 0x09
   1325a:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   1325e:	89 2b       	or	r24, r25
				{
					printf("Port latch D RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTD) );
   13260:	59 f0       	breq	.+22     	; 0x13278 <gpib_tests+0x378>
   13262:	eb b1       	in	r30, 0x0b	; 11
   13264:	83 e0       	ldi	r24, 0x03	; 3
   13266:	e8 9f       	mul	r30, r24
   13268:	f0 01       	movw	r30, r0
   1326a:	11 24       	eor	r1, r1
   1326c:	82 a1       	ldd	r24, Z+34	; 0x22
   1326e:	1f 92       	push	r1
   13270:	8f 93       	push	r24
   13272:	8e eb       	ldi	r24, 0xBE	; 190
   13274:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"ddr") )
   13276:	54 c0       	rjmp	.+168    	; 0x13320 <gpib_tests+0x420>
   13278:	6a e5       	ldi	r22, 0x5A	; 90
   1327a:	7e e0       	ldi	r23, 0x0E	; 14
   1327c:	8e 81       	ldd	r24, Y+6	; 0x06
   1327e:	9f 81       	ldd	r25, Y+7	; 0x07
   13280:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   13284:	89 2b       	or	r24, r25
   13286:	09 f4       	brne	.+2      	; 0x1328a <gpib_tests+0x38a>
			{   
				if( MATCHI(argv[ind+2],"A"))
   13288:	56 c0       	rjmp	.+172    	; 0x13336 <gpib_tests+0x436>
   1328a:	65 e4       	ldi	r22, 0x45	; 69
   1328c:	74 e1       	ldi	r23, 0x14	; 20
   1328e:	88 85       	ldd	r24, Y+8	; 0x08
   13290:	99 85       	ldd	r25, Y+9	; 0x09
   13292:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   13296:	89 2b       	or	r24, r25
				{
					printf("Port ddr A RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTA) );
   13298:	59 f0       	breq	.+22     	; 0x132b0 <gpib_tests+0x3b0>
   1329a:	e2 b1       	in	r30, 0x02	; 2
   1329c:	83 e0       	ldi	r24, 0x03	; 3
   1329e:	e8 9f       	mul	r30, r24
   132a0:	f0 01       	movw	r30, r0
   132a2:	11 24       	eor	r1, r1
   132a4:	81 a1       	ldd	r24, Z+33	; 0x21
   132a6:	1f 92       	push	r1
   132a8:	8f 93       	push	r24
   132aa:	87 ea       	ldi	r24, 0xA7	; 167
   132ac:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   132ae:	38 c0       	rjmp	.+112    	; 0x13320 <gpib_tests+0x420>
   132b0:	62 e5       	ldi	r22, 0x52	; 82
   132b2:	7e e0       	ldi	r23, 0x0E	; 14
   132b4:	88 85       	ldd	r24, Y+8	; 0x08
   132b6:	99 85       	ldd	r25, Y+9	; 0x09
   132b8:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   132bc:	89 2b       	or	r24, r25
				{
					printf("Port ddr B RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTB) );
   132be:	59 f0       	breq	.+22     	; 0x132d6 <gpib_tests+0x3d6>
   132c0:	e5 b1       	in	r30, 0x05	; 5
   132c2:	83 e0       	ldi	r24, 0x03	; 3
   132c4:	e8 9f       	mul	r30, r24
   132c6:	f0 01       	movw	r30, r0
   132c8:	11 24       	eor	r1, r1
   132ca:	81 a1       	ldd	r24, Z+33	; 0x21
   132cc:	1f 92       	push	r1
   132ce:	8f 93       	push	r24
   132d0:	80 e9       	ldi	r24, 0x90	; 144
   132d2:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   132d4:	25 c0       	rjmp	.+74     	; 0x13320 <gpib_tests+0x420>
   132d6:	6b e7       	ldi	r22, 0x7B	; 123
   132d8:	7d e0       	ldi	r23, 0x0D	; 13
   132da:	88 85       	ldd	r24, Y+8	; 0x08
   132dc:	99 85       	ldd	r25, Y+9	; 0x09
   132de:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   132e2:	89 2b       	or	r24, r25
				{
					printf("Port ddr C RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTC) );
   132e4:	59 f0       	breq	.+22     	; 0x132fc <gpib_tests+0x3fc>
   132e6:	e8 b1       	in	r30, 0x08	; 8
   132e8:	83 e0       	ldi	r24, 0x03	; 3
   132ea:	e8 9f       	mul	r30, r24
   132ec:	f0 01       	movw	r30, r0
   132ee:	11 24       	eor	r1, r1
   132f0:	81 a1       	ldd	r24, Z+33	; 0x21
   132f2:	1f 92       	push	r1
   132f4:	8f 93       	push	r24
   132f6:	89 e7       	ldi	r24, 0x79	; 121
   132f8:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   132fa:	12 c0       	rjmp	.+36     	; 0x13320 <gpib_tests+0x420>
   132fc:	68 ed       	ldi	r22, 0xD8	; 216
   132fe:	77 e0       	ldi	r23, 0x07	; 7
   13300:	88 85       	ldd	r24, Y+8	; 0x08
   13302:	99 85       	ldd	r25, Y+9	; 0x09
   13304:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   13308:	89 2b       	or	r24, r25
				{
					printf("Port ddr D RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTD) );
   1330a:	a9 f0       	breq	.+42     	; 0x13336 <gpib_tests+0x436>
   1330c:	eb b1       	in	r30, 0x0b	; 11
   1330e:	83 e0       	ldi	r24, 0x03	; 3
   13310:	e8 9f       	mul	r30, r24
   13312:	f0 01       	movw	r30, r0
   13314:	11 24       	eor	r1, r1
   13316:	81 a1       	ldd	r24, Z+33	; 0x21
   13318:	1f 92       	push	r1
   1331a:	8f 93       	push	r24
   1331c:	82 e6       	ldi	r24, 0x62	; 98
   1331e:	95 e1       	ldi	r25, 0x15	; 21
   13320:	1f 92       	push	r1
   13322:	9f 93       	push	r25
   13324:	8f 93       	push	r24
   13326:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
					return (1);
   1332a:	0f 90       	pop	r0
   1332c:	0f 90       	pop	r0
   1332e:	0f 90       	pop	r0
   13330:	0f 90       	pop	r0
   13332:	0f 90       	pop	r0
			}
		}
	} // port read 

	// port write
    if (MATCHARGS(ptr,"port",(ind+4),argc))
   13334:	d7 c0       	rjmp	.+430    	; 0x134e4 <gpib_tests+0x5e4>
   13336:	97 01       	movw	r18, r14
   13338:	46 e0       	ldi	r20, 0x06	; 6
   1333a:	50 e0       	ldi	r21, 0x00	; 0
   1333c:	63 e4       	ldi	r22, 0x43	; 67
   1333e:	7e e0       	ldi	r23, 0x0E	; 14
   13340:	c8 01       	movw	r24, r16
   13342:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   13346:	89 2b       	or	r24, r25
   13348:	09 f4       	brne	.+2      	; 0x1334c <gpib_tests+0x44c>
    {
		if( MATCHI(argv[ind],"write") )
   1334a:	e6 cd       	rjmp	.-1076   	; 0x12f18 <gpib_tests+0x18>
   1334c:	60 eb       	ldi	r22, 0xB0	; 176
   1334e:	73 e1       	ldi	r23, 0x13	; 19
   13350:	8c 81       	ldd	r24, Y+4	; 0x04
   13352:	9d 81       	ldd	r25, Y+5	; 0x05
   13354:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   13358:	89 2b       	or	r24, r25
   1335a:	09 f4       	brne	.+2      	; 0x1335e <gpib_tests+0x45e>
		{
			uint8_t val;
			if( MATCHI(argv[ind+1],"pins") )
   1335c:	dd cd       	rjmp	.-1094   	; 0x12f18 <gpib_tests+0x18>
   1335e:	6d e4       	ldi	r22, 0x4D	; 77
   13360:	7e e0       	ldi	r23, 0x0E	; 14
   13362:	8e 81       	ldd	r24, Y+6	; 0x06
   13364:	9f 81       	ldd	r25, Y+7	; 0x07
   13366:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   1336a:	89 2b       	or	r24, r25
   1336c:	09 f4       	brne	.+2      	; 0x13370 <gpib_tests+0x470>
			{   
				val = get_value(argv[ind+3]);
   1336e:	45 c0       	rjmp	.+138    	; 0x133fa <gpib_tests+0x4fa>
   13370:	8a 85       	ldd	r24, Y+10	; 0x0a
   13372:	9b 85       	ldd	r25, Y+11	; 0x0b
   13374:	0e 94 2f 32 	call	0x645e	; 0x645e <get_value>

				if( MATCHI(argv[ind+2],"A"))
   13378:	16 2f       	mov	r17, r22
   1337a:	65 e4       	ldi	r22, 0x45	; 69
   1337c:	74 e1       	ldi	r23, 0x14	; 20
   1337e:	88 85       	ldd	r24, Y+8	; 0x08
   13380:	99 85       	ldd	r25, Y+9	; 0x09
   13382:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   13386:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTA,val);
   13388:	41 f0       	breq	.+16     	; 0x1339a <gpib_tests+0x49a>
   1338a:	e2 b1       	in	r30, 0x02	; 2
   1338c:	83 e0       	ldi	r24, 0x03	; 3
   1338e:	e8 9f       	mul	r30, r24
   13390:	f0 01       	movw	r30, r0
   13392:	11 24       	eor	r1, r1
   13394:	8f ef       	ldi	r24, 0xFF	; 255
   13396:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   13398:	45 c0       	rjmp	.+138    	; 0x13424 <gpib_tests+0x524>
   1339a:	62 e5       	ldi	r22, 0x52	; 82
   1339c:	7e e0       	ldi	r23, 0x0E	; 14
   1339e:	88 85       	ldd	r24, Y+8	; 0x08
   133a0:	99 85       	ldd	r25, Y+9	; 0x09
   133a2:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   133a6:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTB,val);
   133a8:	41 f0       	breq	.+16     	; 0x133ba <gpib_tests+0x4ba>
   133aa:	e5 b1       	in	r30, 0x05	; 5
   133ac:	83 e0       	ldi	r24, 0x03	; 3
   133ae:	e8 9f       	mul	r30, r24
   133b0:	f0 01       	movw	r30, r0
   133b2:	11 24       	eor	r1, r1
   133b4:	8f ef       	ldi	r24, 0xFF	; 255
   133b6:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   133b8:	3f c0       	rjmp	.+126    	; 0x13438 <gpib_tests+0x538>
   133ba:	6b e7       	ldi	r22, 0x7B	; 123
   133bc:	7d e0       	ldi	r23, 0x0D	; 13
   133be:	88 85       	ldd	r24, Y+8	; 0x08
   133c0:	99 85       	ldd	r25, Y+9	; 0x09
   133c2:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   133c6:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTC,val);
   133c8:	41 f0       	breq	.+16     	; 0x133da <gpib_tests+0x4da>
   133ca:	e8 b1       	in	r30, 0x08	; 8
   133cc:	83 e0       	ldi	r24, 0x03	; 3
   133ce:	e8 9f       	mul	r30, r24
   133d0:	f0 01       	movw	r30, r0
   133d2:	11 24       	eor	r1, r1
   133d4:	8f ef       	ldi	r24, 0xFF	; 255
   133d6:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   133d8:	39 c0       	rjmp	.+114    	; 0x1344c <gpib_tests+0x54c>
   133da:	68 ed       	ldi	r22, 0xD8	; 216
   133dc:	77 e0       	ldi	r23, 0x07	; 7
   133de:	88 85       	ldd	r24, Y+8	; 0x08
   133e0:	99 85       	ldd	r25, Y+9	; 0x09
   133e2:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   133e6:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTD,val);
   133e8:	41 f0       	breq	.+16     	; 0x133fa <gpib_tests+0x4fa>
   133ea:	eb b1       	in	r30, 0x0b	; 11
   133ec:	83 e0       	ldi	r24, 0x03	; 3
   133ee:	e8 9f       	mul	r30, r24
   133f0:	f0 01       	movw	r30, r0
   133f2:	11 24       	eor	r1, r1
   133f4:	8f ef       	ldi	r24, 0xFF	; 255
   133f6:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"latch") )
   133f8:	33 c0       	rjmp	.+102    	; 0x13460 <gpib_tests+0x560>
   133fa:	64 e5       	ldi	r22, 0x54	; 84
   133fc:	7e e0       	ldi	r23, 0x0E	; 14
   133fe:	8e 81       	ldd	r24, Y+6	; 0x06
   13400:	9f 81       	ldd	r25, Y+7	; 0x07
   13402:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   13406:	89 2b       	or	r24, r25
			{   

				val = get_value(argv[ind+3]);
   13408:	91 f1       	breq	.+100    	; 0x1346e <gpib_tests+0x56e>
   1340a:	8a 85       	ldd	r24, Y+10	; 0x0a
   1340c:	9b 85       	ldd	r25, Y+11	; 0x0b
   1340e:	0e 94 2f 32 	call	0x645e	; 0x645e <get_value>

				if( MATCHI(argv[ind+2],"A"))
   13412:	16 2f       	mov	r17, r22
   13414:	65 e4       	ldi	r22, 0x45	; 69
   13416:	74 e1       	ldi	r23, 0x14	; 20
   13418:	88 85       	ldd	r24, Y+8	; 0x08
   1341a:	99 85       	ldd	r25, Y+9	; 0x09
   1341c:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   13420:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTA,val);
   13422:	11 f0       	breq	.+4      	; 0x13428 <gpib_tests+0x528>
   13424:	e2 b1       	in	r30, 0x02	; 2
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   13426:	1d c0       	rjmp	.+58     	; 0x13462 <gpib_tests+0x562>
   13428:	62 e5       	ldi	r22, 0x52	; 82
   1342a:	7e e0       	ldi	r23, 0x0E	; 14
   1342c:	88 85       	ldd	r24, Y+8	; 0x08
   1342e:	99 85       	ldd	r25, Y+9	; 0x09
   13430:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   13434:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTB,val);
   13436:	11 f0       	breq	.+4      	; 0x1343c <gpib_tests+0x53c>
   13438:	e5 b1       	in	r30, 0x05	; 5
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   1343a:	13 c0       	rjmp	.+38     	; 0x13462 <gpib_tests+0x562>
   1343c:	6b e7       	ldi	r22, 0x7B	; 123
   1343e:	7d e0       	ldi	r23, 0x0D	; 13
   13440:	88 85       	ldd	r24, Y+8	; 0x08
   13442:	99 85       	ldd	r25, Y+9	; 0x09
   13444:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   13448:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTC,val);
   1344a:	11 f0       	breq	.+4      	; 0x13450 <gpib_tests+0x550>
   1344c:	e8 b1       	in	r30, 0x08	; 8
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   1344e:	09 c0       	rjmp	.+18     	; 0x13462 <gpib_tests+0x562>
   13450:	68 ed       	ldi	r22, 0xD8	; 216
   13452:	77 e0       	ldi	r23, 0x07	; 7
   13454:	88 85       	ldd	r24, Y+8	; 0x08
   13456:	99 85       	ldd	r25, Y+9	; 0x09
   13458:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   1345c:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTD,val);
   1345e:	39 f0       	breq	.+14     	; 0x1346e <gpib_tests+0x56e>
   13460:	eb b1       	in	r30, 0x0b	; 11
   13462:	83 e0       	ldi	r24, 0x03	; 3
   13464:	e8 9f       	mul	r30, r24
   13466:	f0 01       	movw	r30, r0
   13468:	11 24       	eor	r1, r1
   1346a:	12 a3       	std	Z+34, r17	; 0x22
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"ddr") )
   1346c:	3b c0       	rjmp	.+118    	; 0x134e4 <gpib_tests+0x5e4>
   1346e:	6a e5       	ldi	r22, 0x5A	; 90
   13470:	7e e0       	ldi	r23, 0x0E	; 14
   13472:	8e 81       	ldd	r24, Y+6	; 0x06
   13474:	9f 81       	ldd	r25, Y+7	; 0x07
   13476:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   1347a:	89 2b       	or	r24, r25
   1347c:	09 f4       	brne	.+2      	; 0x13480 <gpib_tests+0x580>
			{   

				val = get_value(argv[ind+3]);
   1347e:	4c cd       	rjmp	.-1384   	; 0x12f18 <gpib_tests+0x18>
   13480:	8a 85       	ldd	r24, Y+10	; 0x0a
   13482:	9b 85       	ldd	r25, Y+11	; 0x0b
   13484:	0e 94 2f 32 	call	0x645e	; 0x645e <get_value>

				if( MATCHI(argv[ind+2],"A"))
   13488:	16 2f       	mov	r17, r22
   1348a:	65 e4       	ldi	r22, 0x45	; 69
   1348c:	74 e1       	ldi	r23, 0x14	; 20
   1348e:	88 85       	ldd	r24, Y+8	; 0x08
   13490:	99 85       	ldd	r25, Y+9	; 0x09
   13492:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   13496:	89 2b       	or	r24, r25
				{
					GPIO_PORT_DDR_WR(PORTA,val);
   13498:	11 f0       	breq	.+4      	; 0x1349e <gpib_tests+0x59e>
   1349a:	e2 b1       	in	r30, 0x02	; 2
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   1349c:	1e c0       	rjmp	.+60     	; 0x134da <gpib_tests+0x5da>
   1349e:	62 e5       	ldi	r22, 0x52	; 82
   134a0:	7e e0       	ldi	r23, 0x0E	; 14
   134a2:	88 85       	ldd	r24, Y+8	; 0x08
   134a4:	99 85       	ldd	r25, Y+9	; 0x09
   134a6:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   134aa:	89 2b       	or	r24, r25
				{
					GPIO_PORT_DDR_WR(PORTB,val);
   134ac:	11 f0       	breq	.+4      	; 0x134b2 <gpib_tests+0x5b2>
   134ae:	e5 b1       	in	r30, 0x05	; 5
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   134b0:	14 c0       	rjmp	.+40     	; 0x134da <gpib_tests+0x5da>
   134b2:	6b e7       	ldi	r22, 0x7B	; 123
   134b4:	7d e0       	ldi	r23, 0x0D	; 13
   134b6:	88 85       	ldd	r24, Y+8	; 0x08
   134b8:	99 85       	ldd	r25, Y+9	; 0x09
   134ba:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   134be:	89 2b       	or	r24, r25
				{
					GPIO_PORT_DDR_WR(PORTC,val);
   134c0:	11 f0       	breq	.+4      	; 0x134c6 <gpib_tests+0x5c6>
   134c2:	e8 b1       	in	r30, 0x08	; 8
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   134c4:	0a c0       	rjmp	.+20     	; 0x134da <gpib_tests+0x5da>
   134c6:	68 ed       	ldi	r22, 0xD8	; 216
   134c8:	77 e0       	ldi	r23, 0x07	; 7
   134ca:	88 85       	ldd	r24, Y+8	; 0x08
   134cc:	99 85       	ldd	r25, Y+9	; 0x09
   134ce:	0e 94 79 31 	call	0x62f2	; 0x62f2 <MATCHI>
   134d2:	89 2b       	or	r24, r25
   134d4:	09 f4       	brne	.+2      	; 0x134d8 <gpib_tests+0x5d8>
				{
					GPIO_PORT_DDR_WR(PORTD,val);
   134d6:	20 cd       	rjmp	.-1472   	; 0x12f18 <gpib_tests+0x18>
   134d8:	eb b1       	in	r30, 0x0b	; 11
   134da:	83 e0       	ldi	r24, 0x03	; 3
   134dc:	e8 9f       	mul	r30, r24
   134de:	f0 01       	movw	r30, r0
   134e0:	11 24       	eor	r1, r1
					return (1);
   134e2:	11 a3       	std	Z+33, r17	; 0x21
   134e4:	81 e0       	ldi	r24, 0x01	; 1
		}

	} // port write 

    return(0);
}
   134e6:	90 e0       	ldi	r25, 0x00	; 0
   134e8:	cd b7       	in	r28, 0x3d	; 61
   134ea:	de b7       	in	r29, 0x3e	; 62
   134ec:	e6 e0       	ldi	r30, 0x06	; 6
   134ee:	0c 94 b7 e9 	jmp	0x1d36e	; 0x1d36e <__epilogue_restores__+0x18>

000134f2 <SS80ControllerPack>:
   134f2:	0f 93       	push	r16
   134f4:	1f 93       	push	r17
   134f6:	25 e0       	ldi	r18, 0x05	; 5
   134f8:	30 e0       	ldi	r19, 0x00	; 0
   134fa:	fc 01       	movw	r30, r24
   134fc:	31 83       	std	Z+1, r19	; 0x01
   134fe:	20 83       	st	Z, r18
   13500:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   13504:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   13508:	05 a1       	ldd	r16, Z+37	; 0x25
   1350a:	16 a1       	ldd	r17, Z+38	; 0x26
   1350c:	20 e0       	ldi	r18, 0x00	; 0
   1350e:	30 e0       	ldi	r19, 0x00	; 0
   13510:	42 e0       	ldi	r20, 0x02	; 2
   13512:	50 e0       	ldi	r21, 0x00	; 0
   13514:	60 e0       	ldi	r22, 0x00	; 0
   13516:	70 e0       	ldi	r23, 0x00	; 0
   13518:	82 ed       	ldi	r24, 0xD2	; 210
   1351a:	99 e1       	ldi	r25, 0x19	; 25
   1351c:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   13520:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   13524:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   13528:	07 a1       	ldd	r16, Z+39	; 0x27
   1352a:	10 a5       	ldd	r17, Z+40	; 0x28
   1352c:	20 e0       	ldi	r18, 0x00	; 0
   1352e:	30 e0       	ldi	r19, 0x00	; 0
   13530:	42 e0       	ldi	r20, 0x02	; 2
   13532:	50 e0       	ldi	r21, 0x00	; 0
   13534:	61 e0       	ldi	r22, 0x01	; 1
   13536:	70 e0       	ldi	r23, 0x00	; 0
   13538:	82 ed       	ldi	r24, 0xD2	; 210
   1353a:	99 e1       	ldi	r25, 0x19	; 25
   1353c:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   13540:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   13544:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   13548:	01 a5       	ldd	r16, Z+41	; 0x29
   1354a:	10 e0       	ldi	r17, 0x00	; 0
   1354c:	20 e0       	ldi	r18, 0x00	; 0
   1354e:	30 e0       	ldi	r19, 0x00	; 0
   13550:	41 e0       	ldi	r20, 0x01	; 1
   13552:	50 e0       	ldi	r21, 0x00	; 0
   13554:	64 e0       	ldi	r22, 0x04	; 4
   13556:	70 e0       	ldi	r23, 0x00	; 0
   13558:	82 ed       	ldi	r24, 0xD2	; 210
   1355a:	99 e1       	ldi	r25, 0x19	; 25
   1355c:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   13560:	82 ed       	ldi	r24, 0xD2	; 210
   13562:	99 e1       	ldi	r25, 0x19	; 25
   13564:	1f 91       	pop	r17
   13566:	0f 91       	pop	r16
   13568:	08 95       	ret

0001356a <SS80UnitPack>:
   1356a:	0f 93       	push	r16
   1356c:	1f 93       	push	r17
   1356e:	23 e1       	ldi	r18, 0x13	; 19
   13570:	30 e0       	ldi	r19, 0x00	; 0
   13572:	fc 01       	movw	r30, r24
   13574:	31 83       	std	Z+1, r19	; 0x01
   13576:	20 83       	st	Z, r18
   13578:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   1357c:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   13580:	02 a5       	ldd	r16, Z+42	; 0x2a
   13582:	10 e0       	ldi	r17, 0x00	; 0
   13584:	20 e0       	ldi	r18, 0x00	; 0
   13586:	30 e0       	ldi	r19, 0x00	; 0
   13588:	41 e0       	ldi	r20, 0x01	; 1
   1358a:	50 e0       	ldi	r21, 0x00	; 0
   1358c:	60 e0       	ldi	r22, 0x00	; 0
   1358e:	70 e0       	ldi	r23, 0x00	; 0
   13590:	8f eb       	ldi	r24, 0xBF	; 191
   13592:	99 e1       	ldi	r25, 0x19	; 25
   13594:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   13598:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   1359c:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   135a0:	03 a5       	ldd	r16, Z+43	; 0x2b
   135a2:	14 a5       	ldd	r17, Z+44	; 0x2c
   135a4:	25 a5       	ldd	r18, Z+45	; 0x2d
   135a6:	36 a5       	ldd	r19, Z+46	; 0x2e
   135a8:	43 e0       	ldi	r20, 0x03	; 3
   135aa:	50 e0       	ldi	r21, 0x00	; 0
   135ac:	61 e0       	ldi	r22, 0x01	; 1
   135ae:	70 e0       	ldi	r23, 0x00	; 0
   135b0:	8f eb       	ldi	r24, 0xBF	; 191
   135b2:	99 e1       	ldi	r25, 0x19	; 25
   135b4:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   135b8:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   135bc:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   135c0:	07 a5       	ldd	r16, Z+47	; 0x2f
   135c2:	10 a9       	ldd	r17, Z+48	; 0x30
   135c4:	20 e0       	ldi	r18, 0x00	; 0
   135c6:	30 e0       	ldi	r19, 0x00	; 0
   135c8:	42 e0       	ldi	r20, 0x02	; 2
   135ca:	50 e0       	ldi	r21, 0x00	; 0
   135cc:	64 e0       	ldi	r22, 0x04	; 4
   135ce:	70 e0       	ldi	r23, 0x00	; 0
   135d0:	8f eb       	ldi	r24, 0xBF	; 191
   135d2:	99 e1       	ldi	r25, 0x19	; 25
   135d4:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   135d8:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   135dc:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   135e0:	01 a9       	ldd	r16, Z+49	; 0x31
   135e2:	10 e0       	ldi	r17, 0x00	; 0
   135e4:	20 e0       	ldi	r18, 0x00	; 0
   135e6:	30 e0       	ldi	r19, 0x00	; 0
   135e8:	41 e0       	ldi	r20, 0x01	; 1
   135ea:	50 e0       	ldi	r21, 0x00	; 0
   135ec:	66 e0       	ldi	r22, 0x06	; 6
   135ee:	70 e0       	ldi	r23, 0x00	; 0
   135f0:	8f eb       	ldi	r24, 0xBF	; 191
   135f2:	99 e1       	ldi	r25, 0x19	; 25
   135f4:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   135f8:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   135fc:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   13600:	02 a9       	ldd	r16, Z+50	; 0x32
   13602:	10 e0       	ldi	r17, 0x00	; 0
   13604:	20 e0       	ldi	r18, 0x00	; 0
   13606:	30 e0       	ldi	r19, 0x00	; 0
   13608:	41 e0       	ldi	r20, 0x01	; 1
   1360a:	50 e0       	ldi	r21, 0x00	; 0
   1360c:	67 e0       	ldi	r22, 0x07	; 7
   1360e:	70 e0       	ldi	r23, 0x00	; 0
   13610:	8f eb       	ldi	r24, 0xBF	; 191
   13612:	99 e1       	ldi	r25, 0x19	; 25
   13614:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   13618:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   1361c:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   13620:	03 a9       	ldd	r16, Z+51	; 0x33
   13622:	14 a9       	ldd	r17, Z+52	; 0x34
   13624:	20 e0       	ldi	r18, 0x00	; 0
   13626:	30 e0       	ldi	r19, 0x00	; 0
   13628:	42 e0       	ldi	r20, 0x02	; 2
   1362a:	50 e0       	ldi	r21, 0x00	; 0
   1362c:	68 e0       	ldi	r22, 0x08	; 8
   1362e:	70 e0       	ldi	r23, 0x00	; 0
   13630:	8f eb       	ldi	r24, 0xBF	; 191
   13632:	99 e1       	ldi	r25, 0x19	; 25
   13634:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   13638:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   1363c:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   13640:	05 a9       	ldd	r16, Z+53	; 0x35
   13642:	16 a9       	ldd	r17, Z+54	; 0x36
   13644:	20 e0       	ldi	r18, 0x00	; 0
   13646:	30 e0       	ldi	r19, 0x00	; 0
   13648:	42 e0       	ldi	r20, 0x02	; 2
   1364a:	50 e0       	ldi	r21, 0x00	; 0
   1364c:	6a e0       	ldi	r22, 0x0A	; 10
   1364e:	70 e0       	ldi	r23, 0x00	; 0
   13650:	8f eb       	ldi	r24, 0xBF	; 191
   13652:	99 e1       	ldi	r25, 0x19	; 25
   13654:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   13658:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   1365c:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   13660:	07 a9       	ldd	r16, Z+55	; 0x37
   13662:	10 ad       	ldd	r17, Z+56	; 0x38
   13664:	20 e0       	ldi	r18, 0x00	; 0
   13666:	30 e0       	ldi	r19, 0x00	; 0
   13668:	42 e0       	ldi	r20, 0x02	; 2
   1366a:	50 e0       	ldi	r21, 0x00	; 0
   1366c:	6c e0       	ldi	r22, 0x0C	; 12
   1366e:	70 e0       	ldi	r23, 0x00	; 0
   13670:	8f eb       	ldi	r24, 0xBF	; 191
   13672:	99 e1       	ldi	r25, 0x19	; 25
   13674:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   13678:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   1367c:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   13680:	01 ad       	ldd	r16, Z+57	; 0x39
   13682:	12 ad       	ldd	r17, Z+58	; 0x3a
   13684:	20 e0       	ldi	r18, 0x00	; 0
   13686:	30 e0       	ldi	r19, 0x00	; 0
   13688:	42 e0       	ldi	r20, 0x02	; 2
   1368a:	50 e0       	ldi	r21, 0x00	; 0
   1368c:	6e e0       	ldi	r22, 0x0E	; 14
   1368e:	70 e0       	ldi	r23, 0x00	; 0
   13690:	8f eb       	ldi	r24, 0xBF	; 191
   13692:	99 e1       	ldi	r25, 0x19	; 25
   13694:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   13698:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   1369c:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   136a0:	03 ad       	ldd	r16, Z+59	; 0x3b
   136a2:	10 e0       	ldi	r17, 0x00	; 0
   136a4:	20 e0       	ldi	r18, 0x00	; 0
   136a6:	30 e0       	ldi	r19, 0x00	; 0
   136a8:	41 e0       	ldi	r20, 0x01	; 1
   136aa:	50 e0       	ldi	r21, 0x00	; 0
   136ac:	60 e1       	ldi	r22, 0x10	; 16
   136ae:	70 e0       	ldi	r23, 0x00	; 0
   136b0:	8f eb       	ldi	r24, 0xBF	; 191
   136b2:	99 e1       	ldi	r25, 0x19	; 25
   136b4:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   136b8:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   136bc:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   136c0:	04 ad       	ldd	r16, Z+60	; 0x3c
   136c2:	10 e0       	ldi	r17, 0x00	; 0
   136c4:	20 e0       	ldi	r18, 0x00	; 0
   136c6:	30 e0       	ldi	r19, 0x00	; 0
   136c8:	41 e0       	ldi	r20, 0x01	; 1
   136ca:	50 e0       	ldi	r21, 0x00	; 0
   136cc:	61 e1       	ldi	r22, 0x11	; 17
   136ce:	70 e0       	ldi	r23, 0x00	; 0
   136d0:	8f eb       	ldi	r24, 0xBF	; 191
   136d2:	99 e1       	ldi	r25, 0x19	; 25
   136d4:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   136d8:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   136dc:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   136e0:	05 ad       	ldd	r16, Z+61	; 0x3d
   136e2:	10 e0       	ldi	r17, 0x00	; 0
   136e4:	20 e0       	ldi	r18, 0x00	; 0
   136e6:	30 e0       	ldi	r19, 0x00	; 0
   136e8:	41 e0       	ldi	r20, 0x01	; 1
   136ea:	50 e0       	ldi	r21, 0x00	; 0
   136ec:	62 e1       	ldi	r22, 0x12	; 18
   136ee:	70 e0       	ldi	r23, 0x00	; 0
   136f0:	8f eb       	ldi	r24, 0xBF	; 191
   136f2:	99 e1       	ldi	r25, 0x19	; 25
   136f4:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   136f8:	8f eb       	ldi	r24, 0xBF	; 191
   136fa:	99 e1       	ldi	r25, 0x19	; 25
   136fc:	1f 91       	pop	r17
   136fe:	0f 91       	pop	r16
   13700:	08 95       	ret

00013702 <SS80VolumePack>:
   13702:	0f 93       	push	r16
   13704:	1f 93       	push	r17
   13706:	2d e0       	ldi	r18, 0x0D	; 13
   13708:	30 e0       	ldi	r19, 0x00	; 0
   1370a:	fc 01       	movw	r30, r24
   1370c:	31 83       	std	Z+1, r19	; 0x01
   1370e:	20 83       	st	Z, r18
   13710:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   13714:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   13718:	fe 96       	adiw	r30, 0x3e	; 62
   1371a:	00 81       	ld	r16, Z
   1371c:	11 81       	ldd	r17, Z+1	; 0x01
   1371e:	22 81       	ldd	r18, Z+2	; 0x02
   13720:	33 81       	ldd	r19, Z+3	; 0x03
   13722:	43 e0       	ldi	r20, 0x03	; 3
   13724:	50 e0       	ldi	r21, 0x00	; 0
   13726:	60 e0       	ldi	r22, 0x00	; 0
   13728:	70 e0       	ldi	r23, 0x00	; 0
   1372a:	82 eb       	ldi	r24, 0xB2	; 178
   1372c:	99 e1       	ldi	r25, 0x19	; 25
   1372e:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   13732:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   13736:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   1373a:	ee 5b       	subi	r30, 0xBE	; 190
   1373c:	ff 4f       	sbci	r31, 0xFF	; 255
   1373e:	00 81       	ld	r16, Z
   13740:	10 e0       	ldi	r17, 0x00	; 0
   13742:	20 e0       	ldi	r18, 0x00	; 0
   13744:	30 e0       	ldi	r19, 0x00	; 0
   13746:	41 e0       	ldi	r20, 0x01	; 1
   13748:	50 e0       	ldi	r21, 0x00	; 0
   1374a:	63 e0       	ldi	r22, 0x03	; 3
   1374c:	70 e0       	ldi	r23, 0x00	; 0
   1374e:	82 eb       	ldi	r24, 0xB2	; 178
   13750:	99 e1       	ldi	r25, 0x19	; 25
   13752:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   13756:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   1375a:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   1375e:	ed 5b       	subi	r30, 0xBD	; 189
   13760:	ff 4f       	sbci	r31, 0xFF	; 255
   13762:	00 81       	ld	r16, Z
   13764:	11 81       	ldd	r17, Z+1	; 0x01
   13766:	20 e0       	ldi	r18, 0x00	; 0
   13768:	30 e0       	ldi	r19, 0x00	; 0
   1376a:	42 e0       	ldi	r20, 0x02	; 2
   1376c:	50 e0       	ldi	r21, 0x00	; 0
   1376e:	64 e0       	ldi	r22, 0x04	; 4
   13770:	70 e0       	ldi	r23, 0x00	; 0
   13772:	82 eb       	ldi	r24, 0xB2	; 178
   13774:	99 e1       	ldi	r25, 0x19	; 25
   13776:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   1377a:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   1377e:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   13782:	eb 5b       	subi	r30, 0xBB	; 187
   13784:	ff 4f       	sbci	r31, 0xFF	; 255
   13786:	00 81       	ld	r16, Z
   13788:	11 81       	ldd	r17, Z+1	; 0x01
   1378a:	22 81       	ldd	r18, Z+2	; 0x02
   1378c:	33 81       	ldd	r19, Z+3	; 0x03
   1378e:	46 e0       	ldi	r20, 0x06	; 6
   13790:	50 e0       	ldi	r21, 0x00	; 0
   13792:	66 e0       	ldi	r22, 0x06	; 6
   13794:	70 e0       	ldi	r23, 0x00	; 0
   13796:	82 eb       	ldi	r24, 0xB2	; 178
   13798:	99 e1       	ldi	r25, 0x19	; 25
   1379a:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   1379e:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   137a2:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   137a6:	e7 5b       	subi	r30, 0xB7	; 183
   137a8:	ff 4f       	sbci	r31, 0xFF	; 255
   137aa:	00 81       	ld	r16, Z
   137ac:	10 e0       	ldi	r17, 0x00	; 0
   137ae:	20 e0       	ldi	r18, 0x00	; 0
   137b0:	30 e0       	ldi	r19, 0x00	; 0
   137b2:	41 e0       	ldi	r20, 0x01	; 1
   137b4:	50 e0       	ldi	r21, 0x00	; 0
   137b6:	6c e0       	ldi	r22, 0x0C	; 12
   137b8:	70 e0       	ldi	r23, 0x00	; 0
   137ba:	82 eb       	ldi	r24, 0xB2	; 178
   137bc:	99 e1       	ldi	r25, 0x19	; 25
   137be:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   137c2:	82 eb       	ldi	r24, 0xB2	; 178
   137c4:	99 e1       	ldi	r25, 0x19	; 25
   137c6:	1f 91       	pop	r17
   137c8:	0f 91       	pop	r16
   137ca:	08 95       	ret

000137cc <SS80_test_extended_status>:
   137cc:	9b 01       	movw	r18, r22
   137ce:	43 e0       	ldi	r20, 0x03	; 3
   137d0:	35 95       	asr	r19
   137d2:	27 95       	ror	r18
   137d4:	4a 95       	dec	r20
   137d6:	e1 f7       	brne	.-8      	; 0x137d0 <SS80_test_extended_status+0x4>
   137d8:	82 0f       	add	r24, r18
   137da:	93 1f       	adc	r25, r19
   137dc:	67 70       	andi	r22, 0x07	; 7
   137de:	77 27       	eor	r23, r23
   137e0:	20 e8       	ldi	r18, 0x80	; 128
   137e2:	30 e0       	ldi	r19, 0x00	; 0
   137e4:	02 c0       	rjmp	.+4      	; 0x137ea <SS80_test_extended_status+0x1e>
   137e6:	35 95       	asr	r19
   137e8:	27 95       	ror	r18
   137ea:	6a 95       	dec	r22
   137ec:	e2 f7       	brpl	.-8      	; 0x137e6 <SS80_test_extended_status+0x1a>
   137ee:	fc 01       	movw	r30, r24
   137f0:	80 81       	ld	r24, Z
   137f2:	28 23       	and	r18, r24
   137f4:	81 e0       	ldi	r24, 0x01	; 1
   137f6:	90 e0       	ldi	r25, 0x00	; 0
   137f8:	11 f4       	brne	.+4      	; 0x137fe <SS80_test_extended_status+0x32>
   137fa:	80 e0       	ldi	r24, 0x00	; 0
   137fc:	90 e0       	ldi	r25, 0x00	; 0
   137fe:	08 95       	ret

00013800 <SS80_display_extended_status>:
   13800:	6f 92       	push	r6
   13802:	7f 92       	push	r7
   13804:	8f 92       	push	r8
   13806:	ef 92       	push	r14
   13808:	ff 92       	push	r15
   1380a:	0f 93       	push	r16
   1380c:	1f 93       	push	r17
   1380e:	cf 93       	push	r28
   13810:	df 93       	push	r29
   13812:	fc 01       	movw	r30, r24
   13814:	ac 01       	movw	r20, r24
   13816:	48 5f       	subi	r20, 0xF8	; 248
   13818:	5f 4f       	sbci	r21, 0xFF	; 255
   1381a:	20 e0       	ldi	r18, 0x00	; 0
   1381c:	30 e0       	ldi	r19, 0x00	; 0
   1381e:	a1 91       	ld	r26, Z+
   13820:	aa 23       	and	r26, r26
   13822:	11 f0       	breq	.+4      	; 0x13828 <SS80_display_extended_status+0x28>
   13824:	21 e0       	ldi	r18, 0x01	; 1
   13826:	30 e0       	ldi	r19, 0x00	; 0
   13828:	e4 17       	cp	r30, r20
   1382a:	f5 07       	cpc	r31, r21
   1382c:	c1 f7       	brne	.-16     	; 0x1381e <SS80_display_extended_status+0x1e>
   1382e:	23 2b       	or	r18, r19
   13830:	a1 f1       	breq	.+104    	; 0x1389a <SS80_display_extended_status+0x9a>
   13832:	8c 01       	movw	r16, r24
   13834:	7f 93       	push	r23
   13836:	6f 93       	push	r22
   13838:	81 e7       	ldi	r24, 0x71	; 113
   1383a:	9e e1       	ldi	r25, 0x1E	; 30
   1383c:	1f 92       	push	r1
   1383e:	9f 93       	push	r25
   13840:	8f 93       	push	r24
   13842:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   13846:	ce eb       	ldi	r28, 0xBE	; 190
   13848:	d1 e0       	ldi	r29, 0x01	; 1
   1384a:	0f 90       	pop	r0
   1384c:	0f 90       	pop	r0
   1384e:	0f 90       	pop	r0
   13850:	0f 90       	pop	r0
   13852:	0f 90       	pop	r0
   13854:	86 e6       	ldi	r24, 0x66	; 102
   13856:	9e e1       	ldi	r25, 0x1E	; 30
   13858:	3c 01       	movw	r6, r24
   1385a:	e8 80       	ld	r14, Y
   1385c:	f9 80       	ldd	r15, Y+1	; 0x01
   1385e:	9f ef       	ldi	r25, 0xFF	; 255
   13860:	e9 16       	cp	r14, r25
   13862:	f9 06       	cpc	r15, r25
   13864:	d1 f0       	breq	.+52     	; 0x1389a <SS80_display_extended_status+0x9a>
   13866:	b7 01       	movw	r22, r14
   13868:	c8 01       	movw	r24, r16
   1386a:	b0 df       	rcall	.-160    	; 0x137cc <SS80_test_extended_status>
   1386c:	89 2b       	or	r24, r25
   1386e:	99 f0       	breq	.+38     	; 0x13896 <SS80_display_extended_status+0x96>
   13870:	8b 81       	ldd	r24, Y+3	; 0x03
   13872:	8f 93       	push	r24
   13874:	8a 81       	ldd	r24, Y+2	; 0x02
   13876:	8f 93       	push	r24
   13878:	ff 92       	push	r15
   1387a:	ef 92       	push	r14
   1387c:	1f 92       	push	r1
   1387e:	7f 92       	push	r7
   13880:	6f 92       	push	r6
   13882:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   13886:	8d b7       	in	r24, 0x3d	; 61
   13888:	9e b7       	in	r25, 0x3e	; 62
   1388a:	07 96       	adiw	r24, 0x07	; 7
   1388c:	0f b6       	in	r0, 0x3f	; 63
   1388e:	f8 94       	cli
   13890:	9e bf       	out	0x3e, r25	; 62
   13892:	0f be       	out	0x3f, r0	; 63
   13894:	8d bf       	out	0x3d, r24	; 61
   13896:	24 96       	adiw	r28, 0x04	; 4
   13898:	e0 cf       	rjmp	.-64     	; 0x1385a <SS80_display_extended_status+0x5a>
   1389a:	df 91       	pop	r29
   1389c:	cf 91       	pop	r28
   1389e:	1f 91       	pop	r17
   138a0:	0f 91       	pop	r16
   138a2:	ff 90       	pop	r15
   138a4:	ef 90       	pop	r14
   138a6:	8f 90       	pop	r8
   138a8:	7f 90       	pop	r7
   138aa:	6f 90       	pop	r6
   138ac:	08 95       	ret

000138ae <SS80_send_status>:
   138ae:	a6 e1       	ldi	r26, 0x16	; 22
   138b0:	b0 e0       	ldi	r27, 0x00	; 0
   138b2:	ed e5       	ldi	r30, 0x5D	; 93
   138b4:	fc e9       	ldi	r31, 0x9C	; 156
   138b6:	0c 94 9b e9 	jmp	0x1d336	; 0x1d336 <__prologue_saves__+0x18>
   138ba:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   138be:	85 ff       	sbrs	r24, 5
   138c0:	0a c0       	rjmp	.+20     	; 0x138d6 <SS80_send_status+0x28>
   138c2:	82 e5       	ldi	r24, 0x52	; 82
   138c4:	9e e1       	ldi	r25, 0x1E	; 30
   138c6:	1f 92       	push	r1
   138c8:	9f 93       	push	r25
   138ca:	8f 93       	push	r24
   138cc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   138d0:	0f 90       	pop	r0
   138d2:	0f 90       	pop	r0
   138d4:	0f 90       	pop	r0
   138d6:	ce 01       	movw	r24, r28
   138d8:	01 96       	adiw	r24, 0x01	; 1
   138da:	7c 01       	movw	r14, r24
   138dc:	84 e1       	ldi	r24, 0x14	; 20
   138de:	f7 01       	movw	r30, r14
   138e0:	11 92       	st	Z+, r1
   138e2:	8a 95       	dec	r24
   138e4:	e9 f7       	brne	.-6      	; 0x138e0 <SS80_send_status+0x32>
   138e6:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   138ea:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   138ee:	86 81       	ldd	r24, Z+6	; 0x06
   138f0:	20 e1       	ldi	r18, 0x10	; 16
   138f2:	82 9f       	mul	r24, r18
   138f4:	c0 01       	movw	r24, r0
   138f6:	11 24       	eor	r1, r1
   138f8:	95 81       	ldd	r25, Z+5	; 0x05
   138fa:	9f 70       	andi	r25, 0x0F	; 15
   138fc:	89 2b       	or	r24, r25
   138fe:	89 83       	std	Y+1, r24	; 0x01
   13900:	8f ef       	ldi	r24, 0xFF	; 255
   13902:	8a 83       	std	Y+2, r24	; 0x02
   13904:	83 81       	ldd	r24, Z+3	; 0x03
   13906:	86 ff       	sbrs	r24, 6
   13908:	02 c0       	rjmp	.+4      	; 0x1390e <SS80_send_status+0x60>
   1390a:	92 e0       	ldi	r25, 0x02	; 2
   1390c:	9b 83       	std	Y+3, r25	; 0x03
   1390e:	82 ff       	sbrs	r24, 2
   13910:	03 c0       	rjmp	.+6      	; 0x13918 <SS80_send_status+0x6a>
   13912:	9b 81       	ldd	r25, Y+3	; 0x03
   13914:	91 60       	ori	r25, 0x01	; 1
   13916:	9b 83       	std	Y+3, r25	; 0x03
   13918:	80 ff       	sbrs	r24, 0
   1391a:	02 c0       	rjmp	.+4      	; 0x13920 <SS80_send_status+0x72>
   1391c:	82 e0       	ldi	r24, 0x02	; 2
   1391e:	8d 83       	std	Y+5, r24	; 0x05
   13920:	83 81       	ldd	r24, Z+3	; 0x03
   13922:	81 ff       	sbrs	r24, 1
   13924:	03 c0       	rjmp	.+6      	; 0x1392c <SS80_send_status+0x7e>
   13926:	8d 81       	ldd	r24, Y+5	; 0x05
   13928:	82 60       	ori	r24, 0x02	; 2
   1392a:	8d 83       	std	Y+5, r24	; 0x05
   1392c:	83 81       	ldd	r24, Z+3	; 0x03
   1392e:	83 ff       	sbrs	r24, 3
   13930:	02 c0       	rjmp	.+4      	; 0x13936 <SS80_send_status+0x88>
   13932:	88 e0       	ldi	r24, 0x08	; 8
   13934:	8f 83       	std	Y+7, r24	; 0x07
   13936:	83 81       	ldd	r24, Z+3	; 0x03
   13938:	94 81       	ldd	r25, Z+4	; 0x04
   1393a:	89 2b       	or	r24, r25
   1393c:	59 f4       	brne	.+22     	; 0x13954 <SS80_send_status+0xa6>
   1393e:	07 81       	ldd	r16, Z+7	; 0x07
   13940:	10 85       	ldd	r17, Z+8	; 0x08
   13942:	21 85       	ldd	r18, Z+9	; 0x09
   13944:	32 85       	ldd	r19, Z+10	; 0x0a
   13946:	46 e0       	ldi	r20, 0x06	; 6
   13948:	50 e0       	ldi	r21, 0x00	; 0
   1394a:	6a e0       	ldi	r22, 0x0A	; 10
   1394c:	70 e0       	ldi	r23, 0x00	; 0
   1394e:	c7 01       	movw	r24, r14
   13950:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   13954:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   13958:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   1395c:	83 81       	ldd	r24, Z+3	; 0x03
   1395e:	94 81       	ldd	r25, Z+4	; 0x04
   13960:	89 2b       	or	r24, r25
   13962:	11 f0       	breq	.+4      	; 0x13968 <SS80_send_status+0xba>
   13964:	81 e0       	ldi	r24, 0x01	; 1
   13966:	82 83       	std	Z+2, r24	; 0x02
   13968:	80 e0       	ldi	r24, 0x00	; 0
   1396a:	91 e0       	ldi	r25, 0x01	; 1
   1396c:	9e 8b       	std	Y+22, r25	; 0x16
   1396e:	8d 8b       	std	Y+21, r24	; 0x15
   13970:	ae 01       	movw	r20, r28
   13972:	4b 5e       	subi	r20, 0xEB	; 235
   13974:	5f 4f       	sbci	r21, 0xFF	; 255
   13976:	64 e1       	ldi	r22, 0x14	; 20
   13978:	70 e0       	ldi	r23, 0x00	; 0
   1397a:	c7 01       	movw	r24, r14
   1397c:	0e 94 9c 91 	call	0x12338	; 0x12338 <gpib_write_str>
   13980:	44 97       	sbiw	r24, 0x14	; 20
   13982:	71 f0       	breq	.+28     	; 0x139a0 <SS80_send_status+0xf2>
   13984:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   13988:	80 ff       	sbrs	r24, 0
   1398a:	0a c0       	rjmp	.+20     	; 0x139a0 <SS80_send_status+0xf2>
   1398c:	87 e3       	ldi	r24, 0x37	; 55
   1398e:	9e e1       	ldi	r25, 0x1E	; 30
   13990:	1f 92       	push	r1
   13992:	9f 93       	push	r25
   13994:	8f 93       	push	r24
   13996:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1399a:	0f 90       	pop	r0
   1399c:	0f 90       	pop	r0
   1399e:	0f 90       	pop	r0
   139a0:	8d 89       	ldd	r24, Y+21	; 0x15
   139a2:	9e 89       	ldd	r25, Y+22	; 0x16
   139a4:	88 27       	eor	r24, r24
   139a6:	90 7d       	andi	r25, 0xD0	; 208
   139a8:	66 96       	adiw	r28, 0x16	; 22
   139aa:	e6 e0       	ldi	r30, 0x06	; 6
   139ac:	0c 94 b7 e9 	jmp	0x1d36e	; 0x1d36e <__epilogue_restores__+0x18>

000139b0 <SS80_describe>:
   139b0:	a4 e0       	ldi	r26, 0x04	; 4
   139b2:	b0 e0       	ldi	r27, 0x00	; 0
   139b4:	ee ed       	ldi	r30, 0xDE	; 222
   139b6:	fc e9       	ldi	r31, 0x9C	; 156
   139b8:	0c 94 9f e9 	jmp	0x1d33e	; 0x1d33e <__prologue_saves__+0x20>
   139bc:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   139c0:	85 ff       	sbrs	r24, 5
   139c2:	0a c0       	rjmp	.+20     	; 0x139d8 <SS80_describe+0x28>
   139c4:	86 e2       	ldi	r24, 0x26	; 38
   139c6:	9e e1       	ldi	r25, 0x1E	; 30
   139c8:	1f 92       	push	r1
   139ca:	9f 93       	push	r25
   139cc:	8f 93       	push	r24
   139ce:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   139d2:	0f 90       	pop	r0
   139d4:	0f 90       	pop	r0
   139d6:	0f 90       	pop	r0
   139d8:	1c 82       	std	Y+4, r1	; 0x04
   139da:	1b 82       	std	Y+3, r1	; 0x03
   139dc:	ce 01       	movw	r24, r28
   139de:	01 96       	adiw	r24, 0x01	; 1
   139e0:	88 dd       	rcall	.-1264   	; 0x134f2 <SS80ControllerPack>
   139e2:	69 81       	ldd	r22, Y+1	; 0x01
   139e4:	7a 81       	ldd	r23, Y+2	; 0x02
   139e6:	ae 01       	movw	r20, r28
   139e8:	4d 5f       	subi	r20, 0xFD	; 253
   139ea:	5f 4f       	sbci	r21, 0xFF	; 255
   139ec:	0e 94 9c 91 	call	0x12338	; 0x12338 <gpib_write_str>
   139f0:	29 81       	ldd	r18, Y+1	; 0x01
   139f2:	3a 81       	ldd	r19, Y+2	; 0x02
   139f4:	82 17       	cp	r24, r18
   139f6:	93 07       	cpc	r25, r19
   139f8:	39 f0       	breq	.+14     	; 0x13a08 <SS80_describe+0x58>
   139fa:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   139fe:	80 ff       	sbrs	r24, 0
   13a00:	3c c0       	rjmp	.+120    	; 0x13a7a <SS80_describe+0xca>
   13a02:	83 e0       	ldi	r24, 0x03	; 3
   13a04:	9e e1       	ldi	r25, 0x1E	; 30
   13a06:	31 c0       	rjmp	.+98     	; 0x13a6a <SS80_describe+0xba>
   13a08:	1c 82       	std	Y+4, r1	; 0x04
   13a0a:	1b 82       	std	Y+3, r1	; 0x03
   13a0c:	ce 01       	movw	r24, r28
   13a0e:	01 96       	adiw	r24, 0x01	; 1
   13a10:	ac dd       	rcall	.-1192   	; 0x1356a <SS80UnitPack>
   13a12:	69 81       	ldd	r22, Y+1	; 0x01
   13a14:	7a 81       	ldd	r23, Y+2	; 0x02
   13a16:	ae 01       	movw	r20, r28
   13a18:	4d 5f       	subi	r20, 0xFD	; 253
   13a1a:	5f 4f       	sbci	r21, 0xFF	; 255
   13a1c:	0e 94 9c 91 	call	0x12338	; 0x12338 <gpib_write_str>
   13a20:	29 81       	ldd	r18, Y+1	; 0x01
   13a22:	3a 81       	ldd	r19, Y+2	; 0x02
   13a24:	82 17       	cp	r24, r18
   13a26:	93 07       	cpc	r25, r19
   13a28:	39 f0       	breq	.+14     	; 0x13a38 <SS80_describe+0x88>
   13a2a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   13a2e:	80 ff       	sbrs	r24, 0
   13a30:	24 c0       	rjmp	.+72     	; 0x13a7a <SS80_describe+0xca>
   13a32:	86 ee       	ldi	r24, 0xE6	; 230
   13a34:	9d e1       	ldi	r25, 0x1D	; 29
   13a36:	19 c0       	rjmp	.+50     	; 0x13a6a <SS80_describe+0xba>
   13a38:	80 e0       	ldi	r24, 0x00	; 0
   13a3a:	91 e0       	ldi	r25, 0x01	; 1
   13a3c:	9c 83       	std	Y+4, r25	; 0x04
   13a3e:	8b 83       	std	Y+3, r24	; 0x03
   13a40:	ce 01       	movw	r24, r28
   13a42:	01 96       	adiw	r24, 0x01	; 1
   13a44:	5e de       	rcall	.-836    	; 0x13702 <SS80VolumePack>
   13a46:	69 81       	ldd	r22, Y+1	; 0x01
   13a48:	7a 81       	ldd	r23, Y+2	; 0x02
   13a4a:	ae 01       	movw	r20, r28
   13a4c:	4d 5f       	subi	r20, 0xFD	; 253
   13a4e:	5f 4f       	sbci	r21, 0xFF	; 255
   13a50:	0e 94 9c 91 	call	0x12338	; 0x12338 <gpib_write_str>
   13a54:	29 81       	ldd	r18, Y+1	; 0x01
   13a56:	3a 81       	ldd	r19, Y+2	; 0x02
   13a58:	82 17       	cp	r24, r18
   13a5a:	93 07       	cpc	r25, r19
   13a5c:	99 f0       	breq	.+38     	; 0x13a84 <SS80_describe+0xd4>
   13a5e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   13a62:	80 ff       	sbrs	r24, 0
   13a64:	0a c0       	rjmp	.+20     	; 0x13a7a <SS80_describe+0xca>
   13a66:	87 ec       	ldi	r24, 0xC7	; 199
   13a68:	9d e1       	ldi	r25, 0x1D	; 29
   13a6a:	1f 92       	push	r1
   13a6c:	9f 93       	push	r25
   13a6e:	8f 93       	push	r24
   13a70:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   13a74:	0f 90       	pop	r0
   13a76:	0f 90       	pop	r0
   13a78:	0f 90       	pop	r0
   13a7a:	8b 81       	ldd	r24, Y+3	; 0x03
   13a7c:	9c 81       	ldd	r25, Y+4	; 0x04
   13a7e:	88 27       	eor	r24, r24
   13a80:	90 7d       	andi	r25, 0xD0	; 208
   13a82:	02 c0       	rjmp	.+4      	; 0x13a88 <SS80_describe+0xd8>
   13a84:	80 e0       	ldi	r24, 0x00	; 0
   13a86:	90 e0       	ldi	r25, 0x00	; 0
   13a88:	24 96       	adiw	r28, 0x04	; 4
   13a8a:	e2 e0       	ldi	r30, 0x02	; 2
   13a8c:	0c 94 bb e9 	jmp	0x1d376	; 0x1d376 <__epilogue_restores__+0x20>

00013a90 <SS80_Check_Unit>:
   13a90:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   13a94:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   13a98:	88 23       	and	r24, r24
   13a9a:	d1 f0       	breq	.+52     	; 0x13ad0 <SS80_Check_Unit+0x40>
   13a9c:	8f 30       	cpi	r24, 0x0F	; 15
   13a9e:	c1 f0       	breq	.+48     	; 0x13ad0 <SS80_Check_Unit+0x40>
   13aa0:	23 81       	ldd	r18, Z+3	; 0x03
   13aa2:	34 81       	ldd	r19, Z+4	; 0x04
   13aa4:	20 64       	ori	r18, 0x40	; 64
   13aa6:	34 83       	std	Z+4, r19	; 0x04
   13aa8:	23 83       	std	Z+3, r18	; 0x03
   13aaa:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <debuglevel>
   13aae:	90 ff       	sbrs	r25, 0
   13ab0:	10 c0       	rjmp	.+32     	; 0x13ad2 <SS80_Check_Unit+0x42>
   13ab2:	1f 92       	push	r1
   13ab4:	8f 93       	push	r24
   13ab6:	8f ea       	ldi	r24, 0xAF	; 175
   13ab8:	9d e1       	ldi	r25, 0x1D	; 29
   13aba:	1f 92       	push	r1
   13abc:	9f 93       	push	r25
   13abe:	8f 93       	push	r24
   13ac0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   13ac4:	0f 90       	pop	r0
   13ac6:	0f 90       	pop	r0
   13ac8:	0f 90       	pop	r0
   13aca:	0f 90       	pop	r0
   13acc:	0f 90       	pop	r0
   13ace:	08 95       	ret
   13ad0:	85 83       	std	Z+5, r24	; 0x05
   13ad2:	08 95       	ret

00013ad4 <SS80_Check_Volume>:
   13ad4:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   13ad8:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   13adc:	88 23       	and	r24, r24
   13ade:	c1 f0       	breq	.+48     	; 0x13b10 <SS80_Check_Volume+0x3c>
   13ae0:	23 81       	ldd	r18, Z+3	; 0x03
   13ae2:	34 81       	ldd	r19, Z+4	; 0x04
   13ae4:	20 64       	ori	r18, 0x40	; 64
   13ae6:	34 83       	std	Z+4, r19	; 0x04
   13ae8:	23 83       	std	Z+3, r18	; 0x03
   13aea:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <debuglevel>
   13aee:	90 ff       	sbrs	r25, 0
   13af0:	10 c0       	rjmp	.+32     	; 0x13b12 <SS80_Check_Volume+0x3e>
   13af2:	1f 92       	push	r1
   13af4:	8f 93       	push	r24
   13af6:	85 e9       	ldi	r24, 0x95	; 149
   13af8:	9d e1       	ldi	r25, 0x1D	; 29
   13afa:	1f 92       	push	r1
   13afc:	9f 93       	push	r25
   13afe:	8f 93       	push	r24
   13b00:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   13b04:	0f 90       	pop	r0
   13b06:	0f 90       	pop	r0
   13b08:	0f 90       	pop	r0
   13b0a:	0f 90       	pop	r0
   13b0c:	0f 90       	pop	r0
   13b0e:	08 95       	ret
   13b10:	16 82       	std	Z+6, r1	; 0x06
   13b12:	08 95       	ret

00013b14 <SS80_Command_State>:
   13b14:	2f 92       	push	r2
   13b16:	3f 92       	push	r3
   13b18:	4f 92       	push	r4
   13b1a:	6f 92       	push	r6
   13b1c:	7f 92       	push	r7
   13b1e:	8f 92       	push	r8
   13b20:	af 92       	push	r10
   13b22:	bf 92       	push	r11
   13b24:	cf 92       	push	r12
   13b26:	df 92       	push	r13
   13b28:	ef 92       	push	r14
   13b2a:	ff 92       	push	r15
   13b2c:	0f 93       	push	r16
   13b2e:	1f 93       	push	r17
   13b30:	cf 93       	push	r28
   13b32:	df 93       	push	r29
   13b34:	cd b7       	in	r28, 0x3d	; 61
   13b36:	de b7       	in	r29, 0x3e	; 62
   13b38:	60 97       	sbiw	r28, 0x10	; 16
   13b3a:	0f b6       	in	r0, 0x3f	; 63
   13b3c:	f8 94       	cli
   13b3e:	de bf       	out	0x3e, r29	; 62
   13b40:	0f be       	out	0x3f, r0	; 63
   13b42:	cd bf       	out	0x3d, r28	; 61
   13b44:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   13b48:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   13b4c:	81 81       	ldd	r24, Z+1	; 0x01
   13b4e:	90 e0       	ldi	r25, 0x00	; 0
   13b50:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_disable_PPR>
   13b54:	80 e0       	ldi	r24, 0x00	; 0
   13b56:	91 e0       	ldi	r25, 0x01	; 1
   13b58:	9a 83       	std	Y+2, r25	; 0x02
   13b5a:	89 83       	std	Y+1, r24	; 0x01
   13b5c:	ae 01       	movw	r20, r28
   13b5e:	4f 5f       	subi	r20, 0xFF	; 255
   13b60:	5f 4f       	sbci	r21, 0xFF	; 255
   13b62:	60 e0       	ldi	r22, 0x00	; 0
   13b64:	72 e0       	ldi	r23, 0x02	; 2
   13b66:	85 e3       	ldi	r24, 0x35	; 53
   13b68:	9d e1       	ldi	r25, 0x1D	; 29
   13b6a:	0e 94 ee 90 	call	0x121dc	; 0x121dc <gpib_read_str>
   13b6e:	6c 01       	movw	r12, r24
   13b70:	89 81       	ldd	r24, Y+1	; 0x01
   13b72:	9a 81       	ldd	r25, Y+2	; 0x02
   13b74:	9c 01       	movw	r18, r24
   13b76:	22 27       	eor	r18, r18
   13b78:	30 7d       	andi	r19, 0xD0	; 208
   13b7a:	23 2b       	or	r18, r19
   13b7c:	79 f0       	breq	.+30     	; 0x13b9c <SS80_Command_State+0x88>
   13b7e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   13b82:	80 ff       	sbrs	r24, 0
   13b84:	21 c2       	rjmp	.+1090   	; 0x13fc8 <SS80_Command_State+0x4b4>
   13b86:	8f e6       	ldi	r24, 0x6F	; 111
   13b88:	9d e1       	ldi	r25, 0x1D	; 29
   13b8a:	1f 92       	push	r1
   13b8c:	9f 93       	push	r25
   13b8e:	8f 93       	push	r24
   13b90:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   13b94:	0f 90       	pop	r0
   13b96:	0f 90       	pop	r0
   13b98:	0f 90       	pop	r0
   13b9a:	16 c2       	rjmp	.+1068   	; 0x13fc8 <SS80_Command_State+0x4b4>
   13b9c:	c1 14       	cp	r12, r1
   13b9e:	d1 04       	cpc	r13, r1
   13ba0:	09 f4       	brne	.+2      	; 0x13ba4 <SS80_Command_State+0x90>
   13ba2:	17 c2       	rjmp	.+1070   	; 0x13fd2 <SS80_Command_State+0x4be>
   13ba4:	90 fd       	sbrc	r25, 0
   13ba6:	0e c0       	rjmp	.+28     	; 0x13bc4 <SS80_Command_State+0xb0>
   13ba8:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   13bac:	80 ff       	sbrs	r24, 0
   13bae:	0a c0       	rjmp	.+20     	; 0x13bc4 <SS80_Command_State+0xb0>
   13bb0:	86 e5       	ldi	r24, 0x56	; 86
   13bb2:	9d e1       	ldi	r25, 0x1D	; 29
   13bb4:	1f 92       	push	r1
   13bb6:	9f 93       	push	r25
   13bb8:	8f 93       	push	r24
   13bba:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   13bbe:	0f 90       	pop	r0
   13bc0:	0f 90       	pop	r0
   13bc2:	0f 90       	pop	r0
   13bc4:	e1 2c       	mov	r14, r1
   13bc6:	f1 2c       	mov	r15, r1
   13bc8:	8a e5       	ldi	r24, 0x5A	; 90
   13bca:	9c e1       	ldi	r25, 0x1C	; 28
   13bcc:	9c 01       	movw	r18, r24
   13bce:	40 e0       	ldi	r20, 0x00	; 0
   13bd0:	2d 83       	std	Y+5, r18	; 0x05
   13bd2:	3e 83       	std	Y+6, r19	; 0x06
   13bd4:	4f 83       	std	Y+7, r20	; 0x07
   13bd6:	8f e7       	ldi	r24, 0x7F	; 127
   13bd8:	9c e1       	ldi	r25, 0x1C	; 28
   13bda:	9c 01       	movw	r18, r24
   13bdc:	40 e0       	ldi	r20, 0x00	; 0
   13bde:	28 87       	std	Y+8, r18	; 0x08
   13be0:	39 87       	std	Y+9, r19	; 0x09
   13be2:	4a 87       	std	Y+10, r20	; 0x0a
   13be4:	89 e9       	ldi	r24, 0x99	; 153
   13be6:	9c e1       	ldi	r25, 0x1C	; 28
   13be8:	9c 01       	movw	r18, r24
   13bea:	40 e0       	ldi	r20, 0x00	; 0
   13bec:	2b 87       	std	Y+11, r18	; 0x0b
   13bee:	3c 87       	std	Y+12, r19	; 0x0c
   13bf0:	4d 87       	std	Y+13, r20	; 0x0d
   13bf2:	8f ea       	ldi	r24, 0xAF	; 175
   13bf4:	9c e1       	ldi	r25, 0x1C	; 28
   13bf6:	3c 01       	movw	r6, r24
   13bf8:	8d eb       	ldi	r24, 0xBD	; 189
   13bfa:	9c e1       	ldi	r25, 0x1C	; 28
   13bfc:	9c 01       	movw	r18, r24
   13bfe:	40 e0       	ldi	r20, 0x00	; 0
   13c00:	2e 87       	std	Y+14, r18	; 0x0e
   13c02:	3f 87       	std	Y+15, r19	; 0x0f
   13c04:	48 8b       	std	Y+16, r20	; 0x10
   13c06:	89 ed       	ldi	r24, 0xD9	; 217
   13c08:	9c e1       	ldi	r25, 0x1C	; 28
   13c0a:	1c 01       	movw	r2, r24
   13c0c:	87 e2       	ldi	r24, 0x27	; 39
   13c0e:	a8 2e       	mov	r10, r24
   13c10:	8d e1       	ldi	r24, 0x1D	; 29
   13c12:	b8 2e       	mov	r11, r24
   13c14:	87 01       	movw	r16, r14
   13c16:	ec 14       	cp	r14, r12
   13c18:	fd 04       	cpc	r15, r13
   13c1a:	0c f0       	brlt	.+2      	; 0x13c1e <SS80_Command_State+0x10a>
   13c1c:	b6 c1       	rjmp	.+876    	; 0x13f8a <SS80_Command_State+0x476>
   13c1e:	0f 5f       	subi	r16, 0xFF	; 255
   13c20:	1f 4f       	sbci	r17, 0xFF	; 255
   13c22:	f7 01       	movw	r30, r14
   13c24:	eb 5c       	subi	r30, 0xCB	; 203
   13c26:	f2 4e       	sbci	r31, 0xE2	; 226
   13c28:	80 81       	ld	r24, Z
   13c2a:	28 2f       	mov	r18, r24
   13c2c:	30 e0       	ldi	r19, 0x00	; 0
   13c2e:	a9 01       	movw	r20, r18
   13c30:	40 52       	subi	r20, 0x20	; 32
   13c32:	51 09       	sbc	r21, r1
   13c34:	40 31       	cpi	r20, 0x10	; 16
   13c36:	51 05       	cpc	r21, r1
   13c38:	80 f4       	brcc	.+32     	; 0x13c5a <SS80_Command_State+0x146>
   13c3a:	80 52       	subi	r24, 0x20	; 32
   13c3c:	29 df       	rcall	.-430    	; 0x13a90 <SS80_Check_Unit>
   13c3e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   13c42:	85 ff       	sbrs	r24, 5
   13c44:	a0 c1       	rjmp	.+832    	; 0x13f86 <SS80_Command_State+0x472>
   13c46:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   13c4a:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   13c4e:	85 81       	ldd	r24, Z+5	; 0x05
   13c50:	1f 92       	push	r1
   13c52:	8f 93       	push	r24
   13c54:	80 e4       	ldi	r24, 0x40	; 64
   13c56:	9d e1       	ldi	r25, 0x1D	; 29
   13c58:	14 c0       	rjmp	.+40     	; 0x13c82 <SS80_Command_State+0x16e>
   13c5a:	a9 01       	movw	r20, r18
   13c5c:	40 54       	subi	r20, 0x40	; 64
   13c5e:	51 09       	sbc	r21, r1
   13c60:	40 31       	cpi	r20, 0x10	; 16
   13c62:	51 05       	cpc	r21, r1
   13c64:	c8 f4       	brcc	.+50     	; 0x13c98 <SS80_Command_State+0x184>
   13c66:	80 54       	subi	r24, 0x40	; 64
   13c68:	35 df       	rcall	.-406    	; 0x13ad4 <SS80_Check_Volume>
   13c6a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   13c6e:	85 ff       	sbrs	r24, 5
   13c70:	8a c1       	rjmp	.+788    	; 0x13f86 <SS80_Command_State+0x472>
   13c72:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   13c76:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   13c7a:	86 81       	ldd	r24, Z+6	; 0x06
   13c7c:	1f 92       	push	r1
   13c7e:	8f 93       	push	r24
   13c80:	c5 01       	movw	r24, r10
   13c82:	1f 92       	push	r1
   13c84:	9f 93       	push	r25
   13c86:	8f 93       	push	r24
   13c88:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   13c8c:	0f 90       	pop	r0
   13c8e:	0f 90       	pop	r0
   13c90:	0f 90       	pop	r0
   13c92:	0f 90       	pop	r0
   13c94:	0f 90       	pop	r0
   13c96:	77 c1       	rjmp	.+750    	; 0x13f86 <SS80_Command_State+0x472>
   13c98:	21 15       	cp	r18, r1
   13c9a:	31 05       	cpc	r19, r1
   13c9c:	79 f4       	brne	.+30     	; 0x13cbc <SS80_Command_State+0x1a8>
   13c9e:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   13ca2:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   13ca6:	81 e0       	ldi	r24, 0x01	; 1
   13ca8:	90 e0       	ldi	r25, 0x00	; 0
   13caa:	91 83       	std	Z+1, r25	; 0x01
   13cac:	80 83       	st	Z, r24
   13cae:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   13cb2:	85 ff       	sbrs	r24, 5
   13cb4:	6a c1       	rjmp	.+724    	; 0x13f8a <SS80_Command_State+0x476>
   13cb6:	8f e0       	ldi	r24, 0x0F	; 15
   13cb8:	9d e1       	ldi	r25, 0x1D	; 29
   13cba:	0f c0       	rjmp	.+30     	; 0x13cda <SS80_Command_State+0x1c6>
   13cbc:	22 30       	cpi	r18, 0x02	; 2
   13cbe:	31 05       	cpc	r19, r1
   13cc0:	a9 f4       	brne	.+42     	; 0x13cec <SS80_Command_State+0x1d8>
   13cc2:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   13cc6:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   13cca:	31 83       	std	Z+1, r19	; 0x01
   13ccc:	20 83       	st	Z, r18
   13cce:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   13cd2:	85 ff       	sbrs	r24, 5
   13cd4:	5a c1       	rjmp	.+692    	; 0x13f8a <SS80_Command_State+0x476>
   13cd6:	86 ef       	ldi	r24, 0xF6	; 246
   13cd8:	9c e1       	ldi	r25, 0x1C	; 28
   13cda:	1f 92       	push	r1
   13cdc:	9f 93       	push	r25
   13cde:	8f 93       	push	r24
   13ce0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   13ce4:	0f 90       	pop	r0
   13ce6:	0f 90       	pop	r0
   13ce8:	0f 90       	pop	r0
   13cea:	4f c1       	rjmp	.+670    	; 0x13f8a <SS80_Command_State+0x476>
   13cec:	20 31       	cpi	r18, 0x10	; 16
   13cee:	31 05       	cpc	r19, r1
   13cf0:	a1 f5       	brne	.+104    	; 0x13d5a <SS80_Command_State+0x246>
   13cf2:	80 91 ea 19 	lds	r24, 0x19EA	; 0x8019ea <SS80s>
   13cf6:	90 91 eb 19 	lds	r25, 0x19EB	; 0x8019eb <SS80s+0x1>
   13cfa:	9c 83       	std	Y+4, r25	; 0x04
   13cfc:	8b 83       	std	Y+3, r24	; 0x03
   13cfe:	46 e0       	ldi	r20, 0x06	; 6
   13d00:	50 e0       	ldi	r21, 0x00	; 0
   13d02:	b8 01       	movw	r22, r16
   13d04:	85 e3       	ldi	r24, 0x35	; 53
   13d06:	9d e1       	ldi	r25, 0x1D	; 29
   13d08:	0e 94 40 b5 	call	0x16a80	; 0x16a80 <B2V_MSB>
   13d0c:	eb 81       	ldd	r30, Y+3	; 0x03
   13d0e:	fc 81       	ldd	r31, Y+4	; 0x04
   13d10:	67 83       	std	Z+7, r22	; 0x07
   13d12:	70 87       	std	Z+8, r23	; 0x08
   13d14:	81 87       	std	Z+9, r24	; 0x09
   13d16:	92 87       	std	Z+10, r25	; 0x0a
   13d18:	87 01       	movw	r16, r14
   13d1a:	09 5f       	subi	r16, 0xF9	; 249
   13d1c:	1f 4f       	sbci	r17, 0xFF	; 255
   13d1e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   13d22:	85 ff       	sbrs	r24, 5
   13d24:	30 c1       	rjmp	.+608    	; 0x13f86 <SS80_Command_State+0x472>
   13d26:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   13d2a:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   13d2e:	a0 91 ec 19 	lds	r26, 0x19EC	; 0x8019ec <SS80p>
   13d32:	b0 91 ed 19 	lds	r27, 0x19ED	; 0x8019ed <SS80p+0x1>
   13d36:	9f 96       	adiw	r26, 0x2f	; 47
   13d38:	0d 90       	ld	r0, X+
   13d3a:	bc 91       	ld	r27, X
   13d3c:	a0 2d       	mov	r26, r0
   13d3e:	27 81       	ldd	r18, Z+7	; 0x07
   13d40:	30 85       	ldd	r19, Z+8	; 0x08
   13d42:	41 85       	ldd	r20, Z+9	; 0x09
   13d44:	52 85       	ldd	r21, Z+10	; 0x0a
   13d46:	0e 94 6f e9 	call	0x1d2de	; 0x1d2de <__muluhisi3>
   13d4a:	9f 93       	push	r25
   13d4c:	8f 93       	push	r24
   13d4e:	7f 93       	push	r23
   13d50:	6f 93       	push	r22
   13d52:	1f 92       	push	r1
   13d54:	3f 92       	push	r3
   13d56:	2f 92       	push	r2
   13d58:	2e c0       	rjmp	.+92     	; 0x13db6 <SS80_Command_State+0x2a2>
   13d5a:	28 31       	cpi	r18, 0x18	; 24
   13d5c:	31 05       	cpc	r19, r1
   13d5e:	99 f5       	brne	.+102    	; 0x13dc6 <SS80_Command_State+0x2b2>
   13d60:	80 91 ea 19 	lds	r24, 0x19EA	; 0x8019ea <SS80s>
   13d64:	90 91 eb 19 	lds	r25, 0x19EB	; 0x8019eb <SS80s+0x1>
   13d68:	9c 83       	std	Y+4, r25	; 0x04
   13d6a:	8b 83       	std	Y+3, r24	; 0x03
   13d6c:	44 e0       	ldi	r20, 0x04	; 4
   13d6e:	50 e0       	ldi	r21, 0x00	; 0
   13d70:	b8 01       	movw	r22, r16
   13d72:	85 e3       	ldi	r24, 0x35	; 53
   13d74:	9d e1       	ldi	r25, 0x1D	; 29
   13d76:	0e 94 40 b5 	call	0x16a80	; 0x16a80 <B2V_MSB>
   13d7a:	eb 81       	ldd	r30, Y+3	; 0x03
   13d7c:	fc 81       	ldd	r31, Y+4	; 0x04
   13d7e:	63 87       	std	Z+11, r22	; 0x0b
   13d80:	74 87       	std	Z+12, r23	; 0x0c
   13d82:	85 87       	std	Z+13, r24	; 0x0d
   13d84:	96 87       	std	Z+14, r25	; 0x0e
   13d86:	87 01       	movw	r16, r14
   13d88:	0b 5f       	subi	r16, 0xFB	; 251
   13d8a:	1f 4f       	sbci	r17, 0xFF	; 255
   13d8c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   13d90:	85 ff       	sbrs	r24, 5
   13d92:	f9 c0       	rjmp	.+498    	; 0x13f86 <SS80_Command_State+0x472>
   13d94:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   13d98:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   13d9c:	86 85       	ldd	r24, Z+14	; 0x0e
   13d9e:	8f 93       	push	r24
   13da0:	85 85       	ldd	r24, Z+13	; 0x0d
   13da2:	8f 93       	push	r24
   13da4:	84 85       	ldd	r24, Z+12	; 0x0c
   13da6:	8f 93       	push	r24
   13da8:	83 85       	ldd	r24, Z+11	; 0x0b
   13daa:	8f 93       	push	r24
   13dac:	1f 92       	push	r1
   13dae:	ff 85       	ldd	r31, Y+15	; 0x0f
   13db0:	ff 93       	push	r31
   13db2:	2e 85       	ldd	r18, Y+14	; 0x0e
   13db4:	2f 93       	push	r18
   13db6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   13dba:	0f b6       	in	r0, 0x3f	; 63
   13dbc:	f8 94       	cli
   13dbe:	de bf       	out	0x3e, r29	; 62
   13dc0:	0f be       	out	0x3f, r0	; 63
   13dc2:	cd bf       	out	0x3d, r28	; 61
   13dc4:	e0 c0       	rjmp	.+448    	; 0x13f86 <SS80_Command_State+0x472>
   13dc6:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   13dca:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   13dce:	24 33       	cpi	r18, 0x34	; 52
   13dd0:	31 05       	cpc	r19, r1
   13dd2:	31 f4       	brne	.+12     	; 0x13de0 <SS80_Command_State+0x2cc>
   13dd4:	85 ff       	sbrs	r24, 5
   13dd6:	d7 c0       	rjmp	.+430    	; 0x13f86 <SS80_Command_State+0x472>
   13dd8:	1f 92       	push	r1
   13dda:	7f 92       	push	r7
   13ddc:	6f 92       	push	r6
   13dde:	2c c0       	rjmp	.+88     	; 0x13e38 <SS80_Command_State+0x324>
   13de0:	29 33       	cpi	r18, 0x39	; 57
   13de2:	31 05       	cpc	r19, r1
   13de4:	59 f4       	brne	.+22     	; 0x13dfc <SS80_Command_State+0x2e8>
   13de6:	87 01       	movw	r16, r14
   13de8:	0d 5f       	subi	r16, 0xFD	; 253
   13dea:	1f 4f       	sbci	r17, 0xFF	; 255
   13dec:	85 ff       	sbrs	r24, 5
   13dee:	cb c0       	rjmp	.+406    	; 0x13f86 <SS80_Command_State+0x472>
   13df0:	1f 92       	push	r1
   13df2:	9c 85       	ldd	r25, Y+12	; 0x0c
   13df4:	9f 93       	push	r25
   13df6:	eb 85       	ldd	r30, Y+11	; 0x0b
   13df8:	ef 93       	push	r30
   13dfa:	1e c0       	rjmp	.+60     	; 0x13e38 <SS80_Command_State+0x324>
   13dfc:	2b 33       	cpi	r18, 0x3B	; 59
   13dfe:	31 05       	cpc	r19, r1
   13e00:	59 f4       	brne	.+22     	; 0x13e18 <SS80_Command_State+0x304>
   13e02:	87 01       	movw	r16, r14
   13e04:	0e 5f       	subi	r16, 0xFE	; 254
   13e06:	1f 4f       	sbci	r17, 0xFF	; 255
   13e08:	85 ff       	sbrs	r24, 5
   13e0a:	bd c0       	rjmp	.+378    	; 0x13f86 <SS80_Command_State+0x472>
   13e0c:	1f 92       	push	r1
   13e0e:	f9 85       	ldd	r31, Y+9	; 0x09
   13e10:	ff 93       	push	r31
   13e12:	28 85       	ldd	r18, Y+8	; 0x08
   13e14:	2f 93       	push	r18
   13e16:	10 c0       	rjmp	.+32     	; 0x13e38 <SS80_Command_State+0x324>
   13e18:	28 34       	cpi	r18, 0x48	; 72
   13e1a:	31 05       	cpc	r19, r1
   13e1c:	99 f4       	brne	.+38     	; 0x13e44 <SS80_Command_State+0x330>
   13e1e:	87 01       	movw	r16, r14
   13e20:	0e 5f       	subi	r16, 0xFE	; 254
   13e22:	1f 4f       	sbci	r17, 0xFF	; 255
   13e24:	80 73       	andi	r24, 0x30	; 48
   13e26:	99 27       	eor	r25, r25
   13e28:	89 2b       	or	r24, r25
   13e2a:	09 f4       	brne	.+2      	; 0x13e2e <SS80_Command_State+0x31a>
   13e2c:	ac c0       	rjmp	.+344    	; 0x13f86 <SS80_Command_State+0x472>
   13e2e:	1f 92       	push	r1
   13e30:	3e 81       	ldd	r19, Y+6	; 0x06
   13e32:	3f 93       	push	r19
   13e34:	4d 81       	ldd	r20, Y+5	; 0x05
   13e36:	4f 93       	push	r20
   13e38:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   13e3c:	0f 90       	pop	r0
   13e3e:	0f 90       	pop	r0
   13e40:	0f 90       	pop	r0
   13e42:	a1 c0       	rjmp	.+322    	; 0x13f86 <SS80_Command_State+0x472>
   13e44:	24 30       	cpi	r18, 0x04	; 4
   13e46:	31 05       	cpc	r19, r1
   13e48:	41 f4       	brne	.+16     	; 0x13e5a <SS80_Command_State+0x346>
   13e4a:	80 73       	andi	r24, 0x30	; 48
   13e4c:	99 27       	eor	r25, r25
   13e4e:	89 2b       	or	r24, r25
   13e50:	09 f4       	brne	.+2      	; 0x13e54 <SS80_Command_State+0x340>
   13e52:	9b c0       	rjmp	.+310    	; 0x13f8a <SS80_Command_State+0x476>
   13e54:	89 e3       	ldi	r24, 0x39	; 57
   13e56:	9c e1       	ldi	r25, 0x1C	; 28
   13e58:	40 cf       	rjmp	.-384    	; 0x13cda <SS80_Command_State+0x1c6>
   13e5a:	2e 30       	cpi	r18, 0x0E	; 14
   13e5c:	31 05       	cpc	r19, r1
   13e5e:	29 f4       	brne	.+10     	; 0x13e6a <SS80_Command_State+0x356>
   13e60:	85 ff       	sbrs	r24, 5
   13e62:	93 c0       	rjmp	.+294    	; 0x13f8a <SS80_Command_State+0x476>
   13e64:	83 e2       	ldi	r24, 0x23	; 35
   13e66:	9c e1       	ldi	r25, 0x1C	; 28
   13e68:	38 cf       	rjmp	.-400    	; 0x13cda <SS80_Command_State+0x1c6>
   13e6a:	2f 30       	cpi	r18, 0x0F	; 15
   13e6c:	31 05       	cpc	r19, r1
   13e6e:	29 f4       	brne	.+10     	; 0x13e7a <SS80_Command_State+0x366>
   13e70:	85 ff       	sbrs	r24, 5
   13e72:	8b c0       	rjmp	.+278    	; 0x13f8a <SS80_Command_State+0x476>
   13e74:	86 e0       	ldi	r24, 0x06	; 6
   13e76:	9c e1       	ldi	r25, 0x1C	; 28
   13e78:	30 cf       	rjmp	.-416    	; 0x13cda <SS80_Command_State+0x1c6>
   13e7a:	21 33       	cpi	r18, 0x31	; 49
   13e7c:	31 05       	cpc	r19, r1
   13e7e:	41 f4       	brne	.+16     	; 0x13e90 <SS80_Command_State+0x37c>
   13e80:	87 01       	movw	r16, r14
   13e82:	0d 5f       	subi	r16, 0xFD	; 253
   13e84:	1f 4f       	sbci	r17, 0xFF	; 255
   13e86:	85 ff       	sbrs	r24, 5
   13e88:	80 c0       	rjmp	.+256    	; 0x13f8a <SS80_Command_State+0x476>
   13e8a:	8a ee       	ldi	r24, 0xEA	; 234
   13e8c:	9b e1       	ldi	r25, 0x1B	; 27
   13e8e:	25 cf       	rjmp	.-438    	; 0x13cda <SS80_Command_State+0x1c6>
   13e90:	25 33       	cpi	r18, 0x35	; 53
   13e92:	31 05       	cpc	r19, r1
   13e94:	69 f4       	brne	.+26     	; 0x13eb0 <SS80_Command_State+0x39c>
   13e96:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   13e9a:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   13e9e:	24 e0       	ldi	r18, 0x04	; 4
   13ea0:	30 e0       	ldi	r19, 0x00	; 0
   13ea2:	31 83       	std	Z+1, r19	; 0x01
   13ea4:	20 83       	st	Z, r18
   13ea6:	85 ff       	sbrs	r24, 5
   13ea8:	70 c0       	rjmp	.+224    	; 0x13f8a <SS80_Command_State+0x476>
   13eaa:	89 ed       	ldi	r24, 0xD9	; 217
   13eac:	9b e1       	ldi	r25, 0x1B	; 27
   13eae:	15 cf       	rjmp	.-470    	; 0x13cda <SS80_Command_State+0x1c6>
   13eb0:	27 33       	cpi	r18, 0x37	; 55
   13eb2:	31 05       	cpc	r19, r1
   13eb4:	59 f4       	brne	.+22     	; 0x13ecc <SS80_Command_State+0x3b8>
   13eb6:	87 01       	movw	r16, r14
   13eb8:	0d 5f       	subi	r16, 0xFD	; 253
   13eba:	1f 4f       	sbci	r17, 0xFF	; 255
   13ebc:	80 73       	andi	r24, 0x30	; 48
   13ebe:	99 27       	eor	r25, r25
   13ec0:	89 2b       	or	r24, r25
   13ec2:	09 f4       	brne	.+2      	; 0x13ec6 <SS80_Command_State+0x3b2>
   13ec4:	62 c0       	rjmp	.+196    	; 0x13f8a <SS80_Command_State+0x476>
   13ec6:	8b eb       	ldi	r24, 0xBB	; 187
   13ec8:	9b e1       	ldi	r25, 0x1B	; 27
   13eca:	07 cf       	rjmp	.-498    	; 0x13cda <SS80_Command_State+0x1c6>
   13ecc:	2e 33       	cpi	r18, 0x3E	; 62
   13ece:	31 05       	cpc	r19, r1
   13ed0:	c1 f4       	brne	.+48     	; 0x13f02 <SS80_Command_State+0x3ee>
   13ed2:	80 73       	andi	r24, 0x30	; 48
   13ed4:	99 27       	eor	r25, r25
   13ed6:	89 2b       	or	r24, r25
   13ed8:	81 f0       	breq	.+32     	; 0x13efa <SS80_Command_State+0x3e6>
   13eda:	8c e9       	ldi	r24, 0x9C	; 156
   13edc:	9b e1       	ldi	r25, 0x1B	; 27
   13ede:	1f 92       	push	r1
   13ee0:	9f 93       	push	r25
   13ee2:	8f 93       	push	r24
   13ee4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   13ee8:	6e e5       	ldi	r22, 0x5E	; 94
   13eea:	7e e0       	ldi	r23, 0x0E	; 14
   13eec:	c8 01       	movw	r24, r16
   13eee:	8b 5c       	subi	r24, 0xCB	; 203
   13ef0:	92 4e       	sbci	r25, 0xE2	; 226
   13ef2:	86 dc       	rcall	.-1780   	; 0x13800 <SS80_display_extended_status>
   13ef4:	0f 90       	pop	r0
   13ef6:	0f 90       	pop	r0
   13ef8:	0f 90       	pop	r0
   13efa:	87 01       	movw	r16, r14
   13efc:	07 5f       	subi	r16, 0xF7	; 247
   13efe:	1f 4f       	sbci	r17, 0xFF	; 255
   13f00:	44 c0       	rjmp	.+136    	; 0x13f8a <SS80_Command_State+0x476>
   13f02:	2c 34       	cpi	r18, 0x4C	; 76
   13f04:	31 05       	cpc	r19, r1
   13f06:	39 f4       	brne	.+14     	; 0x13f16 <SS80_Command_State+0x402>
   13f08:	80 73       	andi	r24, 0x30	; 48
   13f0a:	99 27       	eor	r25, r25
   13f0c:	89 2b       	or	r24, r25
   13f0e:	e9 f1       	breq	.+122    	; 0x13f8a <SS80_Command_State+0x476>
   13f10:	81 e8       	ldi	r24, 0x81	; 129
   13f12:	9b e1       	ldi	r25, 0x1B	; 27
   13f14:	e2 ce       	rjmp	.-572    	; 0x13cda <SS80_Command_State+0x1c6>
   13f16:	2d 34       	cpi	r18, 0x4D	; 77
   13f18:	31 05       	cpc	r19, r1
   13f1a:	39 f4       	brne	.+14     	; 0x13f2a <SS80_Command_State+0x416>
   13f1c:	80 73       	andi	r24, 0x30	; 48
   13f1e:	99 27       	eor	r25, r25
   13f20:	89 2b       	or	r24, r25
   13f22:	99 f1       	breq	.+102    	; 0x13f8a <SS80_Command_State+0x476>
   13f24:	88 e6       	ldi	r24, 0x68	; 104
   13f26:	9b e1       	ldi	r25, 0x1B	; 27
   13f28:	d8 ce       	rjmp	.-592    	; 0x13cda <SS80_Command_State+0x1c6>
   13f2a:	2d 30       	cpi	r18, 0x0D	; 13
   13f2c:	31 05       	cpc	r19, r1
   13f2e:	69 f4       	brne	.+26     	; 0x13f4a <SS80_Command_State+0x436>
   13f30:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   13f34:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   13f38:	23 e0       	ldi	r18, 0x03	; 3
   13f3a:	30 e0       	ldi	r19, 0x00	; 0
   13f3c:	31 83       	std	Z+1, r19	; 0x01
   13f3e:	20 83       	st	Z, r18
   13f40:	85 ff       	sbrs	r24, 5
   13f42:	23 c0       	rjmp	.+70     	; 0x13f8a <SS80_Command_State+0x476>
   13f44:	81 e5       	ldi	r24, 0x51	; 81
   13f46:	9b e1       	ldi	r25, 0x1B	; 27
   13f48:	c8 ce       	rjmp	.-624    	; 0x13cda <SS80_Command_State+0x1c6>
   13f4a:	23 33       	cpi	r18, 0x33	; 51
   13f4c:	31 05       	cpc	r19, r1
   13f4e:	51 f4       	brne	.+20     	; 0x13f64 <SS80_Command_State+0x450>
   13f50:	87 01       	movw	r16, r14
   13f52:	0c 5f       	subi	r16, 0xFC	; 252
   13f54:	1f 4f       	sbci	r17, 0xFF	; 255
   13f56:	80 73       	andi	r24, 0x30	; 48
   13f58:	99 27       	eor	r25, r25
   13f5a:	89 2b       	or	r24, r25
   13f5c:	b1 f0       	breq	.+44     	; 0x13f8a <SS80_Command_State+0x476>
   13f5e:	80 e3       	ldi	r24, 0x30	; 48
   13f60:	9b e1       	ldi	r25, 0x1B	; 27
   13f62:	bb ce       	rjmp	.-650    	; 0x13cda <SS80_Command_State+0x1c6>
   13f64:	80 ff       	sbrs	r24, 0
   13f66:	28 c0       	rjmp	.+80     	; 0x13fb8 <SS80_Command_State+0x4a4>
   13f68:	3f 93       	push	r19
   13f6a:	2f 93       	push	r18
   13f6c:	80 e1       	ldi	r24, 0x10	; 16
   13f6e:	9b e1       	ldi	r25, 0x1B	; 27
   13f70:	1f 92       	push	r1
   13f72:	9f 93       	push	r25
   13f74:	8f 93       	push	r24
   13f76:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   13f7a:	0f 90       	pop	r0
   13f7c:	0f 90       	pop	r0
   13f7e:	0f 90       	pop	r0
   13f80:	0f 90       	pop	r0
   13f82:	0f 90       	pop	r0
   13f84:	02 c0       	rjmp	.+4      	; 0x13f8a <SS80_Command_State+0x476>
   13f86:	78 01       	movw	r14, r16
   13f88:	45 ce       	rjmp	.-886    	; 0x13c14 <SS80_Command_State+0x100>
   13f8a:	0c 15       	cp	r16, r12
   13f8c:	1d 05       	cpc	r17, r13
   13f8e:	a1 f0       	breq	.+40     	; 0x13fb8 <SS80_Command_State+0x4a4>
   13f90:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   13f94:	80 ff       	sbrs	r24, 0
   13f96:	10 c0       	rjmp	.+32     	; 0x13fb8 <SS80_Command_State+0x4a4>
   13f98:	df 92       	push	r13
   13f9a:	cf 92       	push	r12
   13f9c:	1f 93       	push	r17
   13f9e:	0f 93       	push	r16
   13fa0:	88 ed       	ldi	r24, 0xD8	; 216
   13fa2:	9a e1       	ldi	r25, 0x1A	; 26
   13fa4:	1f 92       	push	r1
   13fa6:	9f 93       	push	r25
   13fa8:	8f 93       	push	r24
   13faa:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   13fae:	0f b6       	in	r0, 0x3f	; 63
   13fb0:	f8 94       	cli
   13fb2:	de bf       	out	0x3e, r29	; 62
   13fb4:	0f be       	out	0x3f, r0	; 63
   13fb6:	cd bf       	out	0x3d, r28	; 61
   13fb8:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   13fbc:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   13fc0:	81 81       	ldd	r24, Z+1	; 0x01
   13fc2:	90 e0       	ldi	r25, 0x00	; 0
   13fc4:	0e 94 4c 8c 	call	0x11898	; 0x11898 <gpib_enable_PPR>
   13fc8:	89 81       	ldd	r24, Y+1	; 0x01
   13fca:	9a 81       	ldd	r25, Y+2	; 0x02
   13fcc:	88 27       	eor	r24, r24
   13fce:	90 7d       	andi	r25, 0xD0	; 208
   13fd0:	02 c0       	rjmp	.+4      	; 0x13fd6 <SS80_Command_State+0x4c2>
   13fd2:	80 e0       	ldi	r24, 0x00	; 0
   13fd4:	90 e0       	ldi	r25, 0x00	; 0
   13fd6:	60 96       	adiw	r28, 0x10	; 16
   13fd8:	0f b6       	in	r0, 0x3f	; 63
   13fda:	f8 94       	cli
   13fdc:	de bf       	out	0x3e, r29	; 62
   13fde:	0f be       	out	0x3f, r0	; 63
   13fe0:	cd bf       	out	0x3d, r28	; 61
   13fe2:	df 91       	pop	r29
   13fe4:	cf 91       	pop	r28
   13fe6:	1f 91       	pop	r17
   13fe8:	0f 91       	pop	r16
   13fea:	ff 90       	pop	r15
   13fec:	ef 90       	pop	r14
   13fee:	df 90       	pop	r13
   13ff0:	cf 90       	pop	r12
   13ff2:	bf 90       	pop	r11
   13ff4:	af 90       	pop	r10
   13ff6:	8f 90       	pop	r8
   13ff8:	7f 90       	pop	r7
   13ffa:	6f 90       	pop	r6
   13ffc:	4f 90       	pop	r4
   13ffe:	3f 90       	pop	r3
   14000:	2f 90       	pop	r2
   14002:	08 95       	ret

00014004 <SS80_cmd_seek>:
   14004:	a0 e0       	ldi	r26, 0x00	; 0
   14006:	b0 e0       	ldi	r27, 0x00	; 0
   14008:	e8 e0       	ldi	r30, 0x08	; 8
   1400a:	f0 ea       	ldi	r31, 0xA0	; 160
   1400c:	0c 94 91 e9 	jmp	0x1d322	; 0x1d322 <__prologue_saves__+0x4>
   14010:	c0 91 ea 19 	lds	r28, 0x19EA	; 0x8019ea <SS80s>
   14014:	d0 91 eb 19 	lds	r29, 0x19EB	; 0x8019eb <SS80s+0x1>
   14018:	8f 80       	ldd	r8, Y+7	; 0x07
   1401a:	98 84       	ldd	r9, Y+8	; 0x08
   1401c:	a9 84       	ldd	r10, Y+9	; 0x09
   1401e:	ba 84       	ldd	r11, Y+10	; 0x0a
   14020:	00 91 ec 19 	lds	r16, 0x19EC	; 0x8019ec <SS80p>
   14024:	10 91 ed 19 	lds	r17, 0x19ED	; 0x8019ed <SS80p+0x1>
   14028:	f8 01       	movw	r30, r16
   1402a:	c7 a4       	ldd	r12, Z+47	; 0x2f
   1402c:	d0 a8       	ldd	r13, Z+48	; 0x30
   1402e:	e1 2c       	mov	r14, r1
   14030:	f1 2c       	mov	r15, r1
   14032:	6b 85       	ldd	r22, Y+11	; 0x0b
   14034:	7c 85       	ldd	r23, Y+12	; 0x0c
   14036:	8d 85       	ldd	r24, Y+13	; 0x0d
   14038:	9e 85       	ldd	r25, Y+14	; 0x0e
   1403a:	a7 01       	movw	r20, r14
   1403c:	96 01       	movw	r18, r12
   1403e:	0e 94 22 e9 	call	0x1d244	; 0x1d244 <__udivmodsi4>
   14042:	da 01       	movw	r26, r20
   14044:	c9 01       	movw	r24, r18
   14046:	88 0d       	add	r24, r8
   14048:	99 1d       	adc	r25, r9
   1404a:	aa 1d       	adc	r26, r10
   1404c:	bb 1d       	adc	r27, r11
   1404e:	f8 01       	movw	r30, r16
   14050:	eb 5b       	subi	r30, 0xBB	; 187
   14052:	ff 4f       	sbci	r31, 0xFF	; 255
   14054:	40 80       	ld	r4, Z
   14056:	51 80       	ldd	r5, Z+1	; 0x01
   14058:	62 80       	ldd	r6, Z+2	; 0x02
   1405a:	73 80       	ldd	r7, Z+3	; 0x03
   1405c:	40 91 b0 01 	lds	r20, 0x01B0	; 0x8001b0 <debuglevel>
   14060:	50 91 b1 01 	lds	r21, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   14064:	48 16       	cp	r4, r24
   14066:	59 06       	cpc	r5, r25
   14068:	6a 06       	cpc	r6, r26
   1406a:	7b 06       	cpc	r7, r27
   1406c:	20 f5       	brcc	.+72     	; 0x140b6 <SS80_cmd_seek+0xb2>
   1406e:	81 e0       	ldi	r24, 0x01	; 1
   14070:	8a 83       	std	Y+2, r24	; 0x02
   14072:	8b 81       	ldd	r24, Y+3	; 0x03
   14074:	9c 81       	ldd	r25, Y+4	; 0x04
   14076:	84 60       	ori	r24, 0x04	; 4
   14078:	9c 83       	std	Y+4, r25	; 0x04
   1407a:	8b 83       	std	Y+3, r24	; 0x03
   1407c:	40 ff       	sbrs	r20, 0
   1407e:	3c c0       	rjmp	.+120    	; 0x140f8 <SS80_cmd_seek+0xf4>
   14080:	f8 01       	movw	r30, r16
   14082:	a7 a5       	ldd	r26, Z+47	; 0x2f
   14084:	b0 a9       	ldd	r27, Z+48	; 0x30
   14086:	a5 01       	movw	r20, r10
   14088:	94 01       	movw	r18, r8
   1408a:	0e 94 6f e9 	call	0x1d2de	; 0x1d2de <__muluhisi3>
   1408e:	9f 93       	push	r25
   14090:	8f 93       	push	r24
   14092:	7f 93       	push	r23
   14094:	6f 93       	push	r22
   14096:	85 e9       	ldi	r24, 0x95	; 149
   14098:	99 e1       	ldi	r25, 0x19	; 25
   1409a:	1f 92       	push	r1
   1409c:	9f 93       	push	r25
   1409e:	8f 93       	push	r24
   140a0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   140a4:	8d b7       	in	r24, 0x3d	; 61
   140a6:	9e b7       	in	r25, 0x3e	; 62
   140a8:	07 96       	adiw	r24, 0x07	; 7
   140aa:	0f b6       	in	r0, 0x3f	; 63
   140ac:	f8 94       	cli
   140ae:	9e bf       	out	0x3e, r25	; 62
   140b0:	0f be       	out	0x3f, r0	; 63
   140b2:	8d bf       	out	0x3d, r24	; 61
   140b4:	21 c0       	rjmp	.+66     	; 0x140f8 <SS80_cmd_seek+0xf4>
   140b6:	ca 01       	movw	r24, r20
   140b8:	80 72       	andi	r24, 0x20	; 32
   140ba:	99 27       	eor	r25, r25
   140bc:	45 ff       	sbrs	r20, 5
   140be:	1e c0       	rjmp	.+60     	; 0x140fc <SS80_cmd_seek+0xf8>
   140c0:	a5 01       	movw	r20, r10
   140c2:	94 01       	movw	r18, r8
   140c4:	c7 01       	movw	r24, r14
   140c6:	b6 01       	movw	r22, r12
   140c8:	0e 94 e0 e8 	call	0x1d1c0	; 0x1d1c0 <__mulsi3>
   140cc:	9f 93       	push	r25
   140ce:	8f 93       	push	r24
   140d0:	7f 93       	push	r23
   140d2:	6f 93       	push	r22
   140d4:	81 e8       	ldi	r24, 0x81	; 129
   140d6:	99 e1       	ldi	r25, 0x19	; 25
   140d8:	1f 92       	push	r1
   140da:	9f 93       	push	r25
   140dc:	8f 93       	push	r24
   140de:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   140e2:	ed b7       	in	r30, 0x3d	; 61
   140e4:	fe b7       	in	r31, 0x3e	; 62
   140e6:	37 96       	adiw	r30, 0x07	; 7
   140e8:	0f b6       	in	r0, 0x3f	; 63
   140ea:	f8 94       	cli
   140ec:	fe bf       	out	0x3e, r31	; 62
   140ee:	0f be       	out	0x3f, r0	; 63
   140f0:	ed bf       	out	0x3d, r30	; 61
   140f2:	80 e0       	ldi	r24, 0x00	; 0
   140f4:	90 e0       	ldi	r25, 0x00	; 0
   140f6:	02 c0       	rjmp	.+4      	; 0x140fc <SS80_cmd_seek+0xf8>
   140f8:	81 e0       	ldi	r24, 0x01	; 1
   140fa:	90 e0       	ldi	r25, 0x00	; 0
   140fc:	cd b7       	in	r28, 0x3d	; 61
   140fe:	de b7       	in	r29, 0x3e	; 62
   14100:	e0 e1       	ldi	r30, 0x10	; 16
   14102:	0c 94 ad e9 	jmp	0x1d35a	; 0x1d35a <__epilogue_restores__+0x4>

00014106 <SS80_locate_and_write>:
   14106:	a8 e0       	ldi	r26, 0x08	; 8
   14108:	b0 e0       	ldi	r27, 0x00	; 0
   1410a:	e9 e8       	ldi	r30, 0x89	; 137
   1410c:	f0 ea       	ldi	r31, 0xA0	; 160
   1410e:	0c 94 8f e9 	jmp	0x1d31e	; 0x1d31e <__prologue_saves__>
   14112:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   14116:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   1411a:	a0 91 ec 19 	lds	r26, 0x19EC	; 0x8019ec <SS80p>
   1411e:	b0 91 ed 19 	lds	r27, 0x19ED	; 0x8019ed <SS80p+0x1>
   14122:	9f 96       	adiw	r26, 0x2f	; 47
   14124:	0d 90       	ld	r0, X+
   14126:	bc 91       	ld	r27, X
   14128:	a0 2d       	mov	r26, r0
   1412a:	27 81       	ldd	r18, Z+7	; 0x07
   1412c:	30 85       	ldd	r19, Z+8	; 0x08
   1412e:	41 85       	ldd	r20, Z+9	; 0x09
   14130:	52 85       	ldd	r21, Z+10	; 0x0a
   14132:	0e 94 6f e9 	call	0x1d2de	; 0x1d2de <__muluhisi3>
   14136:	4b 01       	movw	r8, r22
   14138:	5c 01       	movw	r10, r24
   1413a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1413e:	85 ff       	sbrs	r24, 5
   14140:	18 c0       	rjmp	.+48     	; 0x14172 <SS80_locate_and_write+0x6c>
   14142:	86 85       	ldd	r24, Z+14	; 0x0e
   14144:	8f 93       	push	r24
   14146:	85 85       	ldd	r24, Z+13	; 0x0d
   14148:	8f 93       	push	r24
   1414a:	84 85       	ldd	r24, Z+12	; 0x0c
   1414c:	8f 93       	push	r24
   1414e:	83 85       	ldd	r24, Z+11	; 0x0b
   14150:	8f 93       	push	r24
   14152:	bf 92       	push	r11
   14154:	af 92       	push	r10
   14156:	9f 92       	push	r9
   14158:	8f 92       	push	r8
   1415a:	86 e1       	ldi	r24, 0x16	; 22
   1415c:	9f e1       	ldi	r25, 0x1F	; 31
   1415e:	1f 92       	push	r1
   14160:	9f 93       	push	r25
   14162:	8f 93       	push	r24
   14164:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14168:	0f b6       	in	r0, 0x3f	; 63
   1416a:	f8 94       	cli
   1416c:	de bf       	out	0x3e, r29	; 62
   1416e:	0f be       	out	0x3f, r0	; 63
   14170:	cd bf       	out	0x3d, r28	; 61
   14172:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   14176:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   1417a:	12 82       	std	Z+2, r1	; 0x02
   1417c:	54 98       	cbi	0x0a, 4	; 10
   1417e:	4c 99       	sbic	0x09, 4	; 9
   14180:	03 c0       	rjmp	.+6      	; 0x14188 <SS80_locate_and_write+0x82>
   14182:	80 e0       	ldi	r24, 0x00	; 0
   14184:	90 e1       	ldi	r25, 0x10	; 16
   14186:	52 c1       	rjmp	.+676    	; 0x1442c <SS80_locate_and_write+0x326>
   14188:	3d df       	rcall	.-390    	; 0x14004 <SS80_cmd_seek>
   1418a:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   1418e:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   14192:	89 2b       	or	r24, r25
   14194:	41 f0       	breq	.+16     	; 0x141a6 <SS80_locate_and_write+0xa0>
   14196:	83 81       	ldd	r24, Z+3	; 0x03
   14198:	94 81       	ldd	r25, Z+4	; 0x04
   1419a:	82 60       	ori	r24, 0x02	; 2
   1419c:	94 83       	std	Z+4, r25	; 0x04
   1419e:	83 83       	std	Z+3, r24	; 0x03
   141a0:	01 e0       	ldi	r16, 0x01	; 1
   141a2:	10 e0       	ldi	r17, 0x00	; 0
   141a4:	02 c0       	rjmp	.+4      	; 0x141aa <SS80_locate_and_write+0xa4>
   141a6:	00 e0       	ldi	r16, 0x00	; 0
   141a8:	10 e0       	ldi	r17, 0x00	; 0
   141aa:	23 84       	ldd	r2, Z+11	; 0x0b
   141ac:	34 84       	ldd	r3, Z+12	; 0x0c
   141ae:	1a 82       	std	Y+2, r1	; 0x02
   141b0:	19 82       	std	Y+1, r1	; 0x01
   141b2:	41 2c       	mov	r4, r1
   141b4:	51 2c       	mov	r5, r1
   141b6:	32 01       	movw	r6, r4
   141b8:	89 ec       	ldi	r24, 0xC9	; 201
   141ba:	9e e1       	ldi	r25, 0x1E	; 30
   141bc:	9c 01       	movw	r18, r24
   141be:	40 e0       	ldi	r20, 0x00	; 0
   141c0:	2b 83       	std	Y+3, r18	; 0x03
   141c2:	3c 83       	std	Y+4, r19	; 0x04
   141c4:	4d 83       	std	Y+5, r20	; 0x05
   141c6:	8f ee       	ldi	r24, 0xEF	; 239
   141c8:	9e e1       	ldi	r25, 0x1E	; 30
   141ca:	9c 01       	movw	r18, r24
   141cc:	40 e0       	ldi	r20, 0x00	; 0
   141ce:	2e 83       	std	Y+6, r18	; 0x06
   141d0:	3f 83       	std	Y+7, r19	; 0x07
   141d2:	48 87       	std	Y+8, r20	; 0x08
   141d4:	12 14       	cp	r1, r2
   141d6:	13 04       	cpc	r1, r3
   141d8:	0c f0       	brlt	.+2      	; 0x141dc <SS80_locate_and_write+0xd6>
   141da:	f6 c0       	rjmp	.+492    	; 0x143c8 <SS80_locate_and_write+0x2c2>
   141dc:	54 98       	cbi	0x0a, 4	; 10
   141de:	4c 9b       	sbis	0x09, 4	; 9
   141e0:	d0 cf       	rjmp	.-96     	; 0x14182 <SS80_locate_and_write+0x7c>
   141e2:	71 01       	movw	r14, r2
   141e4:	31 e0       	ldi	r19, 0x01	; 1
   141e6:	23 16       	cp	r2, r19
   141e8:	33 06       	cpc	r3, r19
   141ea:	1c f0       	brlt	.+6      	; 0x141f2 <SS80_locate_and_write+0xec>
   141ec:	e1 2c       	mov	r14, r1
   141ee:	ff 24       	eor	r15, r15
   141f0:	f3 94       	inc	r15
   141f2:	e5 e3       	ldi	r30, 0x35	; 53
   141f4:	fd e1       	ldi	r31, 0x1D	; 29
   141f6:	20 e0       	ldi	r18, 0x00	; 0
   141f8:	32 e0       	ldi	r19, 0x02	; 2
   141fa:	11 92       	st	Z+, r1
   141fc:	21 50       	subi	r18, 0x01	; 1
   141fe:	30 40       	sbci	r19, 0x00	; 0
   14200:	e1 f7       	brne	.-8      	; 0x141fa <SS80_locate_and_write+0xf4>
   14202:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14206:	87 fd       	sbrc	r24, 7
   14208:	0e 94 94 8b 	call	0x11728	; 0x11728 <gpib_timer_elapsed_begin>
   1420c:	ae 01       	movw	r20, r28
   1420e:	4f 5f       	subi	r20, 0xFF	; 255
   14210:	5f 4f       	sbci	r21, 0xFF	; 255
   14212:	b7 01       	movw	r22, r14
   14214:	85 e3       	ldi	r24, 0x35	; 53
   14216:	9d e1       	ldi	r25, 0x1D	; 29
   14218:	0e 94 ee 90 	call	0x121dc	; 0x121dc <gpib_read_str>
   1421c:	6c 01       	movw	r12, r24
   1421e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14222:	87 ff       	sbrs	r24, 7
   14224:	04 c0       	rjmp	.+8      	; 0x1422e <SS80_locate_and_write+0x128>
   14226:	8a e7       	ldi	r24, 0x7A	; 122
   14228:	9e e0       	ldi	r25, 0x0E	; 14
   1422a:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <gpib_timer_elapsed_end>
   1422e:	ce 14       	cp	r12, r14
   14230:	df 04       	cpc	r13, r15
   14232:	39 f1       	breq	.+78     	; 0x14282 <SS80_locate_and_write+0x17c>
   14234:	89 81       	ldd	r24, Y+1	; 0x01
   14236:	9a 81       	ldd	r25, Y+2	; 0x02
   14238:	9c 01       	movw	r18, r24
   1423a:	22 27       	eor	r18, r18
   1423c:	30 7d       	andi	r19, 0xD0	; 208
   1423e:	23 2b       	or	r18, r19
   14240:	d1 f0       	breq	.+52     	; 0x14276 <SS80_locate_and_write+0x170>
   14242:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14246:	80 ff       	sbrs	r24, 0
   14248:	0a c0       	rjmp	.+20     	; 0x1425e <SS80_locate_and_write+0x158>
   1424a:	83 e0       	ldi	r24, 0x03	; 3
   1424c:	9f e1       	ldi	r25, 0x1F	; 31
   1424e:	1f 92       	push	r1
   14250:	9f 93       	push	r25
   14252:	8f 93       	push	r24
   14254:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14258:	0f 90       	pop	r0
   1425a:	0f 90       	pop	r0
   1425c:	0f 90       	pop	r0
   1425e:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   14262:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   14266:	83 81       	ldd	r24, Z+3	; 0x03
   14268:	94 81       	ldd	r25, Z+4	; 0x04
   1426a:	82 60       	ori	r24, 0x02	; 2
   1426c:	94 83       	std	Z+4, r25	; 0x04
   1426e:	83 83       	std	Z+3, r24	; 0x03
   14270:	81 e0       	ldi	r24, 0x01	; 1
   14272:	82 83       	std	Z+2, r24	; 0x02
   14274:	9a c0       	rjmp	.+308    	; 0x143aa <SS80_locate_and_write+0x2a4>
   14276:	c1 14       	cp	r12, r1
   14278:	d1 04       	cpc	r13, r1
   1427a:	09 f0       	breq	.+2      	; 0x1427e <SS80_locate_and_write+0x178>
   1427c:	d3 c0       	rjmp	.+422    	; 0x14424 <SS80_locate_and_write+0x31e>
   1427e:	90 fd       	sbrc	r25, 0
   14280:	94 c0       	rjmp	.+296    	; 0x143aa <SS80_locate_and_write+0x2a4>
   14282:	01 15       	cp	r16, r1
   14284:	11 05       	cpc	r17, r1
   14286:	09 f0       	breq	.+2      	; 0x1428a <SS80_locate_and_write+0x184>
   14288:	85 c0       	rjmp	.+266    	; 0x14394 <SS80_locate_and_write+0x28e>
   1428a:	c1 14       	cp	r12, r1
   1428c:	d1 04       	cpc	r13, r1
   1428e:	09 f4       	brne	.+2      	; 0x14292 <SS80_locate_and_write+0x18c>
   14290:	83 c0       	rjmp	.+262    	; 0x14398 <SS80_locate_and_write+0x292>
   14292:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14296:	86 fd       	sbrc	r24, 6
   14298:	0e 94 94 8b 	call	0x11728	; 0x11728 <gpib_timer_elapsed_begin>
   1429c:	e0 90 ea 19 	lds	r14, 0x19EA	; 0x8019ea <SS80s>
   142a0:	f0 90 eb 19 	lds	r15, 0x19EB	; 0x8019eb <SS80s+0x1>
   142a4:	33 e0       	ldi	r19, 0x03	; 3
   142a6:	e3 0e       	add	r14, r19
   142a8:	f1 1c       	adc	r15, r1
   142aa:	80 91 ec 19 	lds	r24, 0x19EC	; 0x8019ec <SS80p>
   142ae:	90 91 ed 19 	lds	r25, 0x19ED	; 0x8019ed <SS80p+0x1>
   142b2:	86 01       	movw	r16, r12
   142b4:	25 e3       	ldi	r18, 0x35	; 53
   142b6:	3d e1       	ldi	r19, 0x1D	; 29
   142b8:	b5 01       	movw	r22, r10
   142ba:	a4 01       	movw	r20, r8
   142bc:	02 96       	adiw	r24, 0x02	; 2
   142be:	0e 94 3d 8b 	call	0x1167a	; 0x1167a <dbf_open_write>
   142c2:	7c 01       	movw	r14, r24
   142c4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   142c8:	86 ff       	sbrs	r24, 6
   142ca:	04 c0       	rjmp	.+8      	; 0x142d4 <SS80_locate_and_write+0x1ce>
   142cc:	84 e8       	ldi	r24, 0x84	; 132
   142ce:	9e e0       	ldi	r25, 0x0E	; 14
   142d0:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <gpib_timer_elapsed_end>
   142d4:	ce 14       	cp	r12, r14
   142d6:	df 04       	cpc	r13, r15
   142d8:	39 f1       	breq	.+78     	; 0x14328 <SS80_locate_and_write+0x222>
   142da:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   142de:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   142e2:	83 81       	ldd	r24, Z+3	; 0x03
   142e4:	94 81       	ldd	r25, Z+4	; 0x04
   142e6:	82 60       	ori	r24, 0x02	; 2
   142e8:	94 83       	std	Z+4, r25	; 0x04
   142ea:	83 83       	std	Z+3, r24	; 0x03
   142ec:	0e 94 f2 72 	call	0xe5e4	; 0xe5e4 <mmc_wp_status>
   142f0:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   142f4:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   142f8:	89 2b       	or	r24, r25
   142fa:	29 f0       	breq	.+10     	; 0x14306 <SS80_locate_and_write+0x200>
   142fc:	83 81       	ldd	r24, Z+3	; 0x03
   142fe:	94 81       	ldd	r25, Z+4	; 0x04
   14300:	88 60       	ori	r24, 0x08	; 8
   14302:	94 83       	std	Z+4, r25	; 0x04
   14304:	83 83       	std	Z+3, r24	; 0x03
   14306:	41 e0       	ldi	r20, 0x01	; 1
   14308:	42 83       	std	Z+2, r20	; 0x02
   1430a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1430e:	80 ff       	sbrs	r24, 0
   14310:	29 c0       	rjmp	.+82     	; 0x14364 <SS80_locate_and_write+0x25e>
   14312:	1f 92       	push	r1
   14314:	8f 81       	ldd	r24, Y+7	; 0x07
   14316:	8f 93       	push	r24
   14318:	9e 81       	ldd	r25, Y+6	; 0x06
   1431a:	9f 93       	push	r25
   1431c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14320:	0f 90       	pop	r0
   14322:	0f 90       	pop	r0
   14324:	0f 90       	pop	r0
   14326:	1e c0       	rjmp	.+60     	; 0x14364 <SS80_locate_and_write+0x25e>
   14328:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1432c:	85 ff       	sbrs	r24, 5
   1432e:	0e c0       	rjmp	.+28     	; 0x1434c <SS80_locate_and_write+0x246>
   14330:	df 92       	push	r13
   14332:	cf 92       	push	r12
   14334:	1f 92       	push	r1
   14336:	ec 81       	ldd	r30, Y+4	; 0x04
   14338:	ef 93       	push	r30
   1433a:	fb 81       	ldd	r31, Y+3	; 0x03
   1433c:	ff 93       	push	r31
   1433e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14342:	0f 90       	pop	r0
   14344:	0f 90       	pop	r0
   14346:	0f 90       	pop	r0
   14348:	0f 90       	pop	r0
   1434a:	0f 90       	pop	r0
   1434c:	c6 01       	movw	r24, r12
   1434e:	0d 2c       	mov	r0, r13
   14350:	00 0c       	add	r0, r0
   14352:	aa 0b       	sbc	r26, r26
   14354:	bb 0b       	sbc	r27, r27
   14356:	88 0e       	add	r8, r24
   14358:	99 1e       	adc	r9, r25
   1435a:	aa 1e       	adc	r10, r26
   1435c:	bb 1e       	adc	r11, r27
   1435e:	00 e0       	ldi	r16, 0x00	; 0
   14360:	10 e0       	ldi	r17, 0x00	; 0
   14362:	05 c0       	rjmp	.+10     	; 0x1436e <SS80_locate_and_write+0x268>
   14364:	ec 14       	cp	r14, r12
   14366:	fd 04       	cpc	r15, r13
   14368:	64 f0       	brlt	.+24     	; 0x14382 <SS80_locate_and_write+0x27c>
   1436a:	01 e0       	ldi	r16, 0x01	; 1
   1436c:	10 e0       	ldi	r17, 0x00	; 0
   1436e:	c7 01       	movw	r24, r14
   14370:	0f 2c       	mov	r0, r15
   14372:	00 0c       	add	r0, r0
   14374:	aa 0b       	sbc	r26, r26
   14376:	bb 0b       	sbc	r27, r27
   14378:	48 0e       	add	r4, r24
   1437a:	59 1e       	adc	r5, r25
   1437c:	6a 1e       	adc	r6, r26
   1437e:	7b 1e       	adc	r7, r27
   14380:	0b c0       	rjmp	.+22     	; 0x14398 <SS80_locate_and_write+0x292>
   14382:	c6 01       	movw	r24, r12
   14384:	0d 2c       	mov	r0, r13
   14386:	00 0c       	add	r0, r0
   14388:	aa 0b       	sbc	r26, r26
   1438a:	bb 0b       	sbc	r27, r27
   1438c:	48 0e       	add	r4, r24
   1438e:	59 1e       	adc	r5, r25
   14390:	6a 1e       	adc	r6, r26
   14392:	7b 1e       	adc	r7, r27
   14394:	01 e0       	ldi	r16, 0x01	; 1
   14396:	10 e0       	ldi	r17, 0x00	; 0
   14398:	2c 18       	sub	r2, r12
   1439a:	3d 08       	sbc	r3, r13
   1439c:	89 81       	ldd	r24, Y+1	; 0x01
   1439e:	9a 81       	ldd	r25, Y+2	; 0x02
   143a0:	90 ff       	sbrs	r25, 0
   143a2:	18 cf       	rjmp	.-464    	; 0x141d4 <SS80_locate_and_write+0xce>
   143a4:	12 14       	cp	r1, r2
   143a6:	13 04       	cpc	r1, r3
   143a8:	7c f4       	brge	.+30     	; 0x143c8 <SS80_locate_and_write+0x2c2>
   143aa:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   143ae:	80 ff       	sbrs	r24, 0
   143b0:	1f c0       	rjmp	.+62     	; 0x143f0 <SS80_locate_and_write+0x2ea>
   143b2:	81 ea       	ldi	r24, 0xA1	; 161
   143b4:	9e e1       	ldi	r25, 0x1E	; 30
   143b6:	1f 92       	push	r1
   143b8:	9f 93       	push	r25
   143ba:	8f 93       	push	r24
   143bc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   143c0:	0f 90       	pop	r0
   143c2:	0f 90       	pop	r0
   143c4:	0f 90       	pop	r0
   143c6:	14 c0       	rjmp	.+40     	; 0x143f0 <SS80_locate_and_write+0x2ea>
   143c8:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   143cc:	85 ff       	sbrs	r24, 5
   143ce:	10 c0       	rjmp	.+32     	; 0x143f0 <SS80_locate_and_write+0x2ea>
   143d0:	7f 92       	push	r7
   143d2:	6f 92       	push	r6
   143d4:	5f 92       	push	r5
   143d6:	4f 92       	push	r4
   143d8:	86 e7       	ldi	r24, 0x76	; 118
   143da:	9e e1       	ldi	r25, 0x1E	; 30
   143dc:	1f 92       	push	r1
   143de:	9f 93       	push	r25
   143e0:	8f 93       	push	r24
   143e2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   143e6:	0f b6       	in	r0, 0x3f	; 63
   143e8:	f8 94       	cli
   143ea:	de bf       	out	0x3e, r29	; 62
   143ec:	0f be       	out	0x3f, r0	; 63
   143ee:	cd bf       	out	0x3d, r28	; 61
   143f0:	00 91 ea 19 	lds	r16, 0x19EA	; 0x8019ea <SS80s>
   143f4:	10 91 eb 19 	lds	r17, 0x19EB	; 0x8019eb <SS80s+0x1>
   143f8:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   143fc:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   14400:	27 a5       	ldd	r18, Z+47	; 0x2f
   14402:	30 a9       	ldd	r19, Z+48	; 0x30
   14404:	40 e0       	ldi	r20, 0x00	; 0
   14406:	50 e0       	ldi	r21, 0x00	; 0
   14408:	c5 01       	movw	r24, r10
   1440a:	b4 01       	movw	r22, r8
   1440c:	0e 94 22 e9 	call	0x1d244	; 0x1d244 <__udivmodsi4>
   14410:	f8 01       	movw	r30, r16
   14412:	27 83       	std	Z+7, r18	; 0x07
   14414:	30 87       	std	Z+8, r19	; 0x08
   14416:	41 87       	std	Z+9, r20	; 0x09
   14418:	52 87       	std	Z+10, r21	; 0x0a
   1441a:	89 81       	ldd	r24, Y+1	; 0x01
   1441c:	9a 81       	ldd	r25, Y+2	; 0x02
   1441e:	88 27       	eor	r24, r24
   14420:	90 7d       	andi	r25, 0xD0	; 208
   14422:	04 c0       	rjmp	.+8      	; 0x1442c <SS80_locate_and_write+0x326>
   14424:	01 2b       	or	r16, r17
   14426:	09 f4       	brne	.+2      	; 0x1442a <SS80_locate_and_write+0x324>
   14428:	34 cf       	rjmp	.-408    	; 0x14292 <SS80_locate_and_write+0x18c>
   1442a:	b4 cf       	rjmp	.-152    	; 0x14394 <SS80_locate_and_write+0x28e>
   1442c:	28 96       	adiw	r28, 0x08	; 8
   1442e:	e2 e1       	ldi	r30, 0x12	; 18
   14430:	0c 94 ab e9 	jmp	0x1d356	; 0x1d356 <__epilogue_restores__>

00014434 <SS80_Report>:
   14434:	a3 e0       	ldi	r26, 0x03	; 3
   14436:	b0 e0       	ldi	r27, 0x00	; 0
   14438:	e0 e2       	ldi	r30, 0x20	; 32
   1443a:	f2 ea       	ldi	r31, 0xA2	; 162
   1443c:	0c 94 9f e9 	jmp	0x1d33e	; 0x1d33e <__prologue_saves__+0x20>
   14440:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   14444:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   14448:	82 81       	ldd	r24, Z+2	; 0x02
   1444a:	8b 83       	std	Y+3, r24	; 0x03
   1444c:	80 e0       	ldi	r24, 0x00	; 0
   1444e:	91 e0       	ldi	r25, 0x01	; 1
   14450:	9a 83       	std	Y+2, r25	; 0x02
   14452:	89 83       	std	Y+1, r24	; 0x01
   14454:	ae 01       	movw	r20, r28
   14456:	4f 5f       	subi	r20, 0xFF	; 255
   14458:	5f 4f       	sbci	r21, 0xFF	; 255
   1445a:	61 e0       	ldi	r22, 0x01	; 1
   1445c:	70 e0       	ldi	r23, 0x00	; 0
   1445e:	ce 01       	movw	r24, r28
   14460:	03 96       	adiw	r24, 0x03	; 3
   14462:	0e 94 9c 91 	call	0x12338	; 0x12338 <gpib_write_str>
   14466:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   1446a:	01 97       	sbiw	r24, 0x01	; 1
   1446c:	89 f0       	breq	.+34     	; 0x14490 <SS80_Report+0x5c>
   1446e:	20 ff       	sbrs	r18, 0
   14470:	0a c0       	rjmp	.+20     	; 0x14486 <SS80_Report+0x52>
   14472:	87 e6       	ldi	r24, 0x67	; 103
   14474:	99 e1       	ldi	r25, 0x19	; 25
   14476:	1f 92       	push	r1
   14478:	9f 93       	push	r25
   1447a:	8f 93       	push	r24
   1447c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14480:	0f 90       	pop	r0
   14482:	0f 90       	pop	r0
   14484:	0f 90       	pop	r0
   14486:	89 81       	ldd	r24, Y+1	; 0x01
   14488:	9a 81       	ldd	r25, Y+2	; 0x02
   1448a:	88 27       	eor	r24, r24
   1448c:	90 7d       	andi	r25, 0xD0	; 208
   1448e:	1c c0       	rjmp	.+56     	; 0x144c8 <SS80_Report+0x94>
   14490:	25 ff       	sbrs	r18, 5
   14492:	13 c0       	rjmp	.+38     	; 0x144ba <SS80_Report+0x86>
   14494:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   14498:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   1449c:	82 81       	ldd	r24, Z+2	; 0x02
   1449e:	1f 92       	push	r1
   144a0:	8f 93       	push	r24
   144a2:	84 e5       	ldi	r24, 0x54	; 84
   144a4:	99 e1       	ldi	r25, 0x19	; 25
   144a6:	1f 92       	push	r1
   144a8:	9f 93       	push	r25
   144aa:	8f 93       	push	r24
   144ac:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   144b0:	0f 90       	pop	r0
   144b2:	0f 90       	pop	r0
   144b4:	0f 90       	pop	r0
   144b6:	0f 90       	pop	r0
   144b8:	0f 90       	pop	r0
   144ba:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   144be:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   144c2:	12 82       	std	Z+2, r1	; 0x02
   144c4:	80 e0       	ldi	r24, 0x00	; 0
   144c6:	90 e0       	ldi	r25, 0x00	; 0
   144c8:	23 96       	adiw	r28, 0x03	; 3
   144ca:	e2 e0       	ldi	r30, 0x02	; 2
   144cc:	0c 94 bb e9 	jmp	0x1d376	; 0x1d376 <__epilogue_restores__+0x20>

000144d0 <Clear_Common>:
   144d0:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   144d4:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   144d8:	25 81       	ldd	r18, Z+5	; 0x05
   144da:	30 e0       	ldi	r19, 0x00	; 0
   144dc:	28 17       	cp	r18, r24
   144de:	39 07       	cpc	r19, r25
   144e0:	19 f0       	breq	.+6      	; 0x144e8 <Clear_Common+0x18>
   144e2:	0f 97       	sbiw	r24, 0x0f	; 15
   144e4:	99 f4       	brne	.+38     	; 0x1450c <Clear_Common+0x3c>
   144e6:	03 c0       	rjmp	.+6      	; 0x144ee <Clear_Common+0x1e>
   144e8:	2f 30       	cpi	r18, 0x0F	; 15
   144ea:	31 05       	cpc	r19, r1
   144ec:	09 f4       	brne	.+2      	; 0x144f0 <Clear_Common+0x20>
   144ee:	15 82       	std	Z+5, r1	; 0x05
   144f0:	16 82       	std	Z+6, r1	; 0x06
   144f2:	17 82       	std	Z+7, r1	; 0x07
   144f4:	10 86       	std	Z+8, r1	; 0x08
   144f6:	11 86       	std	Z+9, r1	; 0x09
   144f8:	12 86       	std	Z+10, r1	; 0x0a
   144fa:	13 86       	std	Z+11, r1	; 0x0b
   144fc:	14 86       	std	Z+12, r1	; 0x0c
   144fe:	15 86       	std	Z+13, r1	; 0x0d
   14500:	16 86       	std	Z+14, r1	; 0x0e
   14502:	11 82       	std	Z+1, r1	; 0x01
   14504:	10 82       	st	Z, r1
   14506:	14 82       	std	Z+4, r1	; 0x04
   14508:	13 82       	std	Z+3, r1	; 0x03
   1450a:	12 82       	std	Z+2, r1	; 0x02
   1450c:	08 95       	ret

0001450e <SS80_init>:
   1450e:	a0 e0       	ldi	r26, 0x00	; 0
   14510:	b0 e0       	ldi	r27, 0x00	; 0
   14512:	ed e8       	ldi	r30, 0x8D	; 141
   14514:	f2 ea       	ldi	r31, 0xA2	; 162
   14516:	0c 94 99 e9 	jmp	0x1d332	; 0x1d332 <__prologue_saves__+0x14>
   1451a:	0f e3       	ldi	r16, 0x3F	; 63
   1451c:	1f e1       	ldi	r17, 0x1F	; 31
   1451e:	c7 e0       	ldi	r28, 0x07	; 7
   14520:	d0 e0       	ldi	r29, 0x00	; 0
   14522:	8f e1       	ldi	r24, 0x1F	; 31
   14524:	90 e2       	ldi	r25, 0x20	; 32
   14526:	6c 01       	movw	r12, r24
   14528:	e1 2c       	mov	r14, r1
   1452a:	f8 01       	movw	r30, r16
   1452c:	f1 a8       	ldd	r15, Z+49	; 0x31
   1452e:	f2 e0       	ldi	r31, 0x02	; 2
   14530:	ff 12       	cpse	r15, r31
   14532:	27 c0       	rjmp	.+78     	; 0x14582 <SS80_init+0x74>
   14534:	ce 01       	movw	r24, r28
   14536:	0e 94 da b5 	call	0x16bb4	; 0x16bb4 <set_active_device>
   1453a:	89 2b       	or	r24, r25
   1453c:	11 f1       	breq	.+68     	; 0x14582 <SS80_init+0x74>
   1453e:	8f e0       	ldi	r24, 0x0F	; 15
   14540:	90 e0       	ldi	r25, 0x00	; 0
   14542:	c6 df       	rcall	.-116    	; 0x144d0 <Clear_Common>
   14544:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   14548:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   1454c:	f2 82       	std	Z+2, r15	; 0x02
   1454e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14552:	85 ff       	sbrs	r24, 5
   14554:	0e c0       	rjmp	.+28     	; 0x14572 <SS80_init+0x64>
   14556:	f8 01       	movw	r30, r16
   14558:	82 a9       	ldd	r24, Z+50	; 0x32
   1455a:	1f 92       	push	r1
   1455c:	8f 93       	push	r24
   1455e:	1f 92       	push	r1
   14560:	df 92       	push	r13
   14562:	cf 92       	push	r12
   14564:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14568:	0f 90       	pop	r0
   1456a:	0f 90       	pop	r0
   1456c:	0f 90       	pop	r0
   1456e:	0f 90       	pop	r0
   14570:	0f 90       	pop	r0
   14572:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   14576:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   1457a:	81 81       	ldd	r24, Z+1	; 0x01
   1457c:	90 e0       	ldi	r25, 0x00	; 0
   1457e:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_disable_PPR>
   14582:	21 97       	sbiw	r28, 0x01	; 1
   14584:	07 50       	subi	r16, 0x07	; 7
   14586:	11 09       	sbc	r17, r1
   14588:	cf 3f       	cpi	r28, 0xFF	; 255
   1458a:	ff ef       	ldi	r31, 0xFF	; 255
   1458c:	df 07       	cpc	r29, r31
   1458e:	69 f6       	brne	.-102    	; 0x1452a <SS80_init+0x1c>
   14590:	cd b7       	in	r28, 0x3d	; 61
   14592:	de b7       	in	r29, 0x3e	; 62
   14594:	e8 e0       	ldi	r30, 0x08	; 8
   14596:	0c 94 b5 e9 	jmp	0x1d36a	; 0x1d36a <__epilogue_restores__+0x14>

0001459a <SS80_Channel_Independent_Clear>:
   1459a:	9a df       	rcall	.-204    	; 0x144d0 <Clear_Common>
   1459c:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   145a0:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   145a4:	81 81       	ldd	r24, Z+1	; 0x01
   145a6:	90 e0       	ldi	r25, 0x00	; 0
   145a8:	0e 94 4c 8c 	call	0x11898	; 0x11898 <gpib_enable_PPR>
   145ac:	80 e0       	ldi	r24, 0x00	; 0
   145ae:	90 e0       	ldi	r25, 0x00	; 0
   145b0:	08 95       	ret

000145b2 <SS80_Universal_Device_Clear>:
   145b2:	8f e0       	ldi	r24, 0x0F	; 15
   145b4:	90 e0       	ldi	r25, 0x00	; 0
   145b6:	8c df       	rcall	.-232    	; 0x144d0 <Clear_Common>
   145b8:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   145bc:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   145c0:	81 81       	ldd	r24, Z+1	; 0x01
   145c2:	90 e0       	ldi	r25, 0x00	; 0
   145c4:	0e 94 4c 8c 	call	0x11898	; 0x11898 <gpib_enable_PPR>
   145c8:	80 e0       	ldi	r24, 0x00	; 0
   145ca:	90 e0       	ldi	r25, 0x00	; 0
   145cc:	08 95       	ret

000145ce <SS80_Selected_Device_Clear>:
   145ce:	cf 93       	push	r28
   145d0:	df 93       	push	r29
   145d2:	ec 01       	movw	r28, r24
   145d4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   145d8:	85 ff       	sbrs	r24, 5
   145da:	0a c0       	rjmp	.+20     	; 0x145f0 <SS80_Selected_Device_Clear+0x22>
   145dc:	88 e4       	ldi	r24, 0x48	; 72
   145de:	99 e1       	ldi	r25, 0x19	; 25
   145e0:	1f 92       	push	r1
   145e2:	9f 93       	push	r25
   145e4:	8f 93       	push	r24
   145e6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   145ea:	0f 90       	pop	r0
   145ec:	0f 90       	pop	r0
   145ee:	0f 90       	pop	r0
   145f0:	ce 01       	movw	r24, r28
   145f2:	6e df       	rcall	.-292    	; 0x144d0 <Clear_Common>
   145f4:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   145f8:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   145fc:	81 81       	ldd	r24, Z+1	; 0x01
   145fe:	90 e0       	ldi	r25, 0x00	; 0
   14600:	0e 94 4c 8c 	call	0x11898	; 0x11898 <gpib_enable_PPR>
   14604:	80 e0       	ldi	r24, 0x00	; 0
   14606:	90 e0       	ldi	r25, 0x00	; 0
   14608:	df 91       	pop	r29
   1460a:	cf 91       	pop	r28
   1460c:	08 95       	ret

0001460e <SS80_Amigo_Clear>:
   1460e:	a3 e0       	ldi	r26, 0x03	; 3
   14610:	b0 e0       	ldi	r27, 0x00	; 0
   14612:	ed e0       	ldi	r30, 0x0D	; 13
   14614:	f3 ea       	ldi	r31, 0xA3	; 163
   14616:	0c 94 9f e9 	jmp	0x1d33e	; 0x1d33e <__prologue_saves__+0x20>
   1461a:	1a 82       	std	Y+2, r1	; 0x02
   1461c:	19 82       	std	Y+1, r1	; 0x01
   1461e:	ae 01       	movw	r20, r28
   14620:	4f 5f       	subi	r20, 0xFF	; 255
   14622:	5f 4f       	sbci	r21, 0xFF	; 255
   14624:	61 e0       	ldi	r22, 0x01	; 1
   14626:	70 e0       	ldi	r23, 0x00	; 0
   14628:	ce 01       	movw	r24, r28
   1462a:	03 96       	adiw	r24, 0x03	; 3
   1462c:	0e 94 ee 90 	call	0x121dc	; 0x121dc <gpib_read_str>
   14630:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   14634:	01 97       	sbiw	r24, 0x01	; 1
   14636:	89 f0       	breq	.+34     	; 0x1465a <SS80_Amigo_Clear+0x4c>
   14638:	20 ff       	sbrs	r18, 0
   1463a:	0a c0       	rjmp	.+20     	; 0x14650 <SS80_Amigo_Clear+0x42>
   1463c:	85 e3       	ldi	r24, 0x35	; 53
   1463e:	99 e1       	ldi	r25, 0x19	; 25
   14640:	1f 92       	push	r1
   14642:	9f 93       	push	r25
   14644:	8f 93       	push	r24
   14646:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1464a:	0f 90       	pop	r0
   1464c:	0f 90       	pop	r0
   1464e:	0f 90       	pop	r0
   14650:	89 81       	ldd	r24, Y+1	; 0x01
   14652:	9a 81       	ldd	r25, Y+2	; 0x02
   14654:	88 27       	eor	r24, r24
   14656:	90 7d       	andi	r25, 0xD0	; 208
   14658:	19 c0       	rjmp	.+50     	; 0x1468c <SS80_Amigo_Clear+0x7e>
   1465a:	25 ff       	sbrs	r18, 5
   1465c:	0a c0       	rjmp	.+20     	; 0x14672 <SS80_Amigo_Clear+0x64>
   1465e:	86 e2       	ldi	r24, 0x26	; 38
   14660:	99 e1       	ldi	r25, 0x19	; 25
   14662:	1f 92       	push	r1
   14664:	9f 93       	push	r25
   14666:	8f 93       	push	r24
   14668:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1466c:	0f 90       	pop	r0
   1466e:	0f 90       	pop	r0
   14670:	0f 90       	pop	r0
   14672:	8f e0       	ldi	r24, 0x0F	; 15
   14674:	90 e0       	ldi	r25, 0x00	; 0
   14676:	2c df       	rcall	.-424    	; 0x144d0 <Clear_Common>
   14678:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   1467c:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   14680:	81 81       	ldd	r24, Z+1	; 0x01
   14682:	90 e0       	ldi	r25, 0x00	; 0
   14684:	0e 94 4c 8c 	call	0x11898	; 0x11898 <gpib_enable_PPR>
   14688:	80 e0       	ldi	r24, 0x00	; 0
   1468a:	90 e0       	ldi	r25, 0x00	; 0
   1468c:	23 96       	adiw	r28, 0x03	; 3
   1468e:	e2 e0       	ldi	r30, 0x02	; 2
   14690:	0c 94 bb e9 	jmp	0x1d376	; 0x1d376 <__epilogue_restores__+0x20>

00014694 <SS80_Cancel>:
   14694:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   14698:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   1469c:	11 82       	std	Z+1, r1	; 0x01
   1469e:	10 82       	st	Z, r1
   146a0:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   146a4:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   146a8:	81 81       	ldd	r24, Z+1	; 0x01
   146aa:	90 e0       	ldi	r25, 0x00	; 0
   146ac:	0e 94 4c 8c 	call	0x11898	; 0x11898 <gpib_enable_PPR>
   146b0:	80 e0       	ldi	r24, 0x00	; 0
   146b2:	90 e0       	ldi	r25, 0x00	; 0
   146b4:	08 95       	ret

000146b6 <SS80_Transparent_State>:
   146b6:	a2 e0       	ldi	r26, 0x02	; 2
   146b8:	b0 e0       	ldi	r27, 0x00	; 0
   146ba:	e1 e6       	ldi	r30, 0x61	; 97
   146bc:	f3 ea       	ldi	r31, 0xA3	; 163
   146be:	0c 94 97 e9 	jmp	0x1d32e	; 0x1d32e <__prologue_saves__+0x10>
   146c2:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   146c6:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   146ca:	81 81       	ldd	r24, Z+1	; 0x01
   146cc:	90 e0       	ldi	r25, 0x00	; 0
   146ce:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_disable_PPR>
   146d2:	80 e0       	ldi	r24, 0x00	; 0
   146d4:	91 e0       	ldi	r25, 0x01	; 1
   146d6:	9a 83       	std	Y+2, r25	; 0x02
   146d8:	89 83       	std	Y+1, r24	; 0x01
   146da:	ae 01       	movw	r20, r28
   146dc:	4f 5f       	subi	r20, 0xFF	; 255
   146de:	5f 4f       	sbci	r21, 0xFF	; 255
   146e0:	60 e0       	ldi	r22, 0x00	; 0
   146e2:	72 e0       	ldi	r23, 0x02	; 2
   146e4:	85 e3       	ldi	r24, 0x35	; 53
   146e6:	9d e1       	ldi	r25, 0x1D	; 29
   146e8:	0e 94 ee 90 	call	0x121dc	; 0x121dc <gpib_read_str>
   146ec:	7c 01       	movw	r14, r24
   146ee:	89 81       	ldd	r24, Y+1	; 0x01
   146f0:	9a 81       	ldd	r25, Y+2	; 0x02
   146f2:	9c 01       	movw	r18, r24
   146f4:	22 27       	eor	r18, r18
   146f6:	30 7d       	andi	r19, 0xD0	; 208
   146f8:	23 2b       	or	r18, r19
   146fa:	79 f0       	breq	.+30     	; 0x1471a <SS80_Transparent_State+0x64>
   146fc:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14700:	80 ff       	sbrs	r24, 0
   14702:	e0 c0       	rjmp	.+448    	; 0x148c4 <SS80_Transparent_State+0x20e>
   14704:	85 ec       	ldi	r24, 0xC5	; 197
   14706:	9a e1       	ldi	r25, 0x1A	; 26
   14708:	1f 92       	push	r1
   1470a:	9f 93       	push	r25
   1470c:	8f 93       	push	r24
   1470e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14712:	0f 90       	pop	r0
   14714:	0f 90       	pop	r0
   14716:	0f 90       	pop	r0
   14718:	d5 c0       	rjmp	.+426    	; 0x148c4 <SS80_Transparent_State+0x20e>
   1471a:	e1 14       	cp	r14, r1
   1471c:	f1 04       	cpc	r15, r1
   1471e:	09 f4       	brne	.+2      	; 0x14722 <SS80_Transparent_State+0x6c>
   14720:	d6 c0       	rjmp	.+428    	; 0x148ce <SS80_Transparent_State+0x218>
   14722:	90 fd       	sbrc	r25, 0
   14724:	0e c0       	rjmp	.+28     	; 0x14742 <SS80_Transparent_State+0x8c>
   14726:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1472a:	80 ff       	sbrs	r24, 0
   1472c:	0a c0       	rjmp	.+20     	; 0x14742 <SS80_Transparent_State+0x8c>
   1472e:	8c ea       	ldi	r24, 0xAC	; 172
   14730:	9a e1       	ldi	r25, 0x1A	; 26
   14732:	1f 92       	push	r1
   14734:	9f 93       	push	r25
   14736:	8f 93       	push	r24
   14738:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1473c:	0f 90       	pop	r0
   1473e:	0f 90       	pop	r0
   14740:	0f 90       	pop	r0
   14742:	85 e3       	ldi	r24, 0x35	; 53
   14744:	a8 2e       	mov	r10, r24
   14746:	8d e1       	ldi	r24, 0x1D	; 29
   14748:	b8 2e       	mov	r11, r24
   1474a:	00 e0       	ldi	r16, 0x00	; 0
   1474c:	10 e0       	ldi	r17, 0x00	; 0
   1474e:	0e 15       	cp	r16, r14
   14750:	1f 05       	cpc	r17, r15
   14752:	0c f0       	brlt	.+2      	; 0x14756 <SS80_Transparent_State+0xa0>
   14754:	a0 c0       	rjmp	.+320    	; 0x14896 <SS80_Transparent_State+0x1e0>
   14756:	68 01       	movw	r12, r16
   14758:	8f ef       	ldi	r24, 0xFF	; 255
   1475a:	c8 1a       	sub	r12, r24
   1475c:	d8 0a       	sbc	r13, r24
   1475e:	f5 01       	movw	r30, r10
   14760:	81 91       	ld	r24, Z+
   14762:	5f 01       	movw	r10, r30
   14764:	28 2f       	mov	r18, r24
   14766:	30 e0       	ldi	r19, 0x00	; 0
   14768:	a9 01       	movw	r20, r18
   1476a:	40 52       	subi	r20, 0x20	; 32
   1476c:	51 09       	sbc	r21, r1
   1476e:	40 31       	cpi	r20, 0x10	; 16
   14770:	51 05       	cpc	r21, r1
   14772:	20 f4       	brcc	.+8      	; 0x1477c <SS80_Transparent_State+0xc6>
   14774:	80 52       	subi	r24, 0x20	; 32
   14776:	8c d9       	rcall	.-3304   	; 0x13a90 <SS80_Check_Unit>
   14778:	86 01       	movw	r16, r12
   1477a:	e9 cf       	rjmp	.-46     	; 0x1474e <SS80_Transparent_State+0x98>
   1477c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14780:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   14784:	21 30       	cpi	r18, 0x01	; 1
   14786:	31 05       	cpc	r19, r1
   14788:	c9 f4       	brne	.+50     	; 0x147bc <SS80_Transparent_State+0x106>
   1478a:	0e 5f       	subi	r16, 0xFE	; 254
   1478c:	1f 4f       	sbci	r17, 0xFF	; 255
   1478e:	80 73       	andi	r24, 0x30	; 48
   14790:	99 27       	eor	r25, r25
   14792:	89 2b       	or	r24, r25
   14794:	51 f0       	breq	.+20     	; 0x147aa <SS80_Transparent_State+0xf4>
   14796:	87 e8       	ldi	r24, 0x87	; 135
   14798:	9a e1       	ldi	r25, 0x1A	; 26
   1479a:	1f 92       	push	r1
   1479c:	9f 93       	push	r25
   1479e:	8f 93       	push	r24
   147a0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   147a4:	0f 90       	pop	r0
   147a6:	0f 90       	pop	r0
   147a8:	0f 90       	pop	r0
   147aa:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   147ae:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   147b2:	81 81       	ldd	r24, Z+1	; 0x01
   147b4:	90 e0       	ldi	r25, 0x00	; 0
   147b6:	0e 94 4c 8c 	call	0x11898	; 0x11898 <gpib_enable_PPR>
   147ba:	6d c0       	rjmp	.+218    	; 0x14896 <SS80_Transparent_State+0x1e0>
   147bc:	22 30       	cpi	r18, 0x02	; 2
   147be:	31 05       	cpc	r19, r1
   147c0:	51 f4       	brne	.+20     	; 0x147d6 <SS80_Transparent_State+0x120>
   147c2:	0b 5f       	subi	r16, 0xFB	; 251
   147c4:	1f 4f       	sbci	r17, 0xFF	; 255
   147c6:	80 73       	andi	r24, 0x30	; 48
   147c8:	99 27       	eor	r25, r25
   147ca:	89 2b       	or	r24, r25
   147cc:	09 f4       	brne	.+2      	; 0x147d0 <SS80_Transparent_State+0x11a>
   147ce:	63 c0       	rjmp	.+198    	; 0x14896 <SS80_Transparent_State+0x1e0>
   147d0:	8a e6       	ldi	r24, 0x6A	; 106
   147d2:	9a e1       	ldi	r25, 0x1A	; 26
   147d4:	0c c0       	rjmp	.+24     	; 0x147ee <SS80_Transparent_State+0x138>
   147d6:	23 30       	cpi	r18, 0x03	; 3
   147d8:	31 05       	cpc	r19, r1
   147da:	91 f4       	brne	.+36     	; 0x14800 <SS80_Transparent_State+0x14a>
   147dc:	0b 5f       	subi	r16, 0xFB	; 251
   147de:	1f 4f       	sbci	r17, 0xFF	; 255
   147e0:	80 73       	andi	r24, 0x30	; 48
   147e2:	99 27       	eor	r25, r25
   147e4:	89 2b       	or	r24, r25
   147e6:	09 f4       	brne	.+2      	; 0x147ea <SS80_Transparent_State+0x134>
   147e8:	56 c0       	rjmp	.+172    	; 0x14896 <SS80_Transparent_State+0x1e0>
   147ea:	8c e4       	ldi	r24, 0x4C	; 76
   147ec:	9a e1       	ldi	r25, 0x1A	; 26
   147ee:	1f 92       	push	r1
   147f0:	9f 93       	push	r25
   147f2:	8f 93       	push	r24
   147f4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   147f8:	0f 90       	pop	r0
   147fa:	0f 90       	pop	r0
   147fc:	0f 90       	pop	r0
   147fe:	4b c0       	rjmp	.+150    	; 0x14896 <SS80_Transparent_State+0x1e0>
   14800:	28 30       	cpi	r18, 0x08	; 8
   14802:	31 05       	cpc	r19, r1
   14804:	e9 f4       	brne	.+58     	; 0x14840 <SS80_Transparent_State+0x18a>
   14806:	85 ff       	sbrs	r24, 5
   14808:	13 c0       	rjmp	.+38     	; 0x14830 <SS80_Transparent_State+0x17a>
   1480a:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   1480e:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   14812:	85 81       	ldd	r24, Z+5	; 0x05
   14814:	1f 92       	push	r1
   14816:	8f 93       	push	r24
   14818:	85 e2       	ldi	r24, 0x25	; 37
   1481a:	9a e1       	ldi	r25, 0x1A	; 26
   1481c:	1f 92       	push	r1
   1481e:	9f 93       	push	r25
   14820:	8f 93       	push	r24
   14822:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14826:	0f 90       	pop	r0
   14828:	0f 90       	pop	r0
   1482a:	0f 90       	pop	r0
   1482c:	0f 90       	pop	r0
   1482e:	0f 90       	pop	r0
   14830:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   14834:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   14838:	85 81       	ldd	r24, Z+5	; 0x05
   1483a:	90 e0       	ldi	r25, 0x00	; 0
   1483c:	ae de       	rcall	.-676    	; 0x1459a <SS80_Channel_Independent_Clear>
   1483e:	49 c0       	rjmp	.+146    	; 0x148d2 <SS80_Transparent_State+0x21c>
   14840:	29 30       	cpi	r18, 0x09	; 9
   14842:	31 05       	cpc	r19, r1
   14844:	b9 f4       	brne	.+46     	; 0x14874 <SS80_Transparent_State+0x1be>
   14846:	85 ff       	sbrs	r24, 5
   14848:	13 c0       	rjmp	.+38     	; 0x14870 <SS80_Transparent_State+0x1ba>
   1484a:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   1484e:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   14852:	85 81       	ldd	r24, Z+5	; 0x05
   14854:	1f 92       	push	r1
   14856:	8f 93       	push	r24
   14858:	81 e1       	ldi	r24, 0x11	; 17
   1485a:	9a e1       	ldi	r25, 0x1A	; 26
   1485c:	1f 92       	push	r1
   1485e:	9f 93       	push	r25
   14860:	8f 93       	push	r24
   14862:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14866:	0f 90       	pop	r0
   14868:	0f 90       	pop	r0
   1486a:	0f 90       	pop	r0
   1486c:	0f 90       	pop	r0
   1486e:	0f 90       	pop	r0
   14870:	11 df       	rcall	.-478    	; 0x14694 <SS80_Cancel>
   14872:	2f c0       	rjmp	.+94     	; 0x148d2 <SS80_Transparent_State+0x21c>
   14874:	80 ff       	sbrs	r24, 0
   14876:	26 c0       	rjmp	.+76     	; 0x148c4 <SS80_Transparent_State+0x20e>
   14878:	3f 93       	push	r19
   1487a:	2f 93       	push	r18
   1487c:	81 ef       	ldi	r24, 0xF1	; 241
   1487e:	99 e1       	ldi	r25, 0x19	; 25
   14880:	1f 92       	push	r1
   14882:	9f 93       	push	r25
   14884:	8f 93       	push	r24
   14886:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1488a:	0f 90       	pop	r0
   1488c:	0f 90       	pop	r0
   1488e:	0f 90       	pop	r0
   14890:	0f 90       	pop	r0
   14892:	0f 90       	pop	r0
   14894:	86 01       	movw	r16, r12
   14896:	0e 15       	cp	r16, r14
   14898:	1f 05       	cpc	r17, r15
   1489a:	a1 f0       	breq	.+40     	; 0x148c4 <SS80_Transparent_State+0x20e>
   1489c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   148a0:	80 ff       	sbrs	r24, 0
   148a2:	10 c0       	rjmp	.+32     	; 0x148c4 <SS80_Transparent_State+0x20e>
   148a4:	ff 92       	push	r15
   148a6:	ef 92       	push	r14
   148a8:	1f 93       	push	r17
   148aa:	0f 93       	push	r16
   148ac:	85 eb       	ldi	r24, 0xB5	; 181
   148ae:	99 e1       	ldi	r25, 0x19	; 25
   148b0:	1f 92       	push	r1
   148b2:	9f 93       	push	r25
   148b4:	8f 93       	push	r24
   148b6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   148ba:	0f b6       	in	r0, 0x3f	; 63
   148bc:	f8 94       	cli
   148be:	de bf       	out	0x3e, r29	; 62
   148c0:	0f be       	out	0x3f, r0	; 63
   148c2:	cd bf       	out	0x3d, r28	; 61
   148c4:	89 81       	ldd	r24, Y+1	; 0x01
   148c6:	9a 81       	ldd	r25, Y+2	; 0x02
   148c8:	88 27       	eor	r24, r24
   148ca:	90 7d       	andi	r25, 0xD0	; 208
   148cc:	02 c0       	rjmp	.+4      	; 0x148d2 <SS80_Transparent_State+0x21c>
   148ce:	80 e0       	ldi	r24, 0x00	; 0
   148d0:	90 e0       	ldi	r25, 0x00	; 0
   148d2:	22 96       	adiw	r28, 0x02	; 2
   148d4:	ea e0       	ldi	r30, 0x0A	; 10
   148d6:	0c 94 b3 e9 	jmp	0x1d366	; 0x1d366 <__epilogue_restores__+0x10>

000148da <SS80_error_return>:
   148da:	a3 e0       	ldi	r26, 0x03	; 3
   148dc:	b0 e0       	ldi	r27, 0x00	; 0
   148de:	e3 e7       	ldi	r30, 0x73	; 115
   148e0:	f4 ea       	ldi	r31, 0xA4	; 164
   148e2:	0c 94 9f e9 	jmp	0x1d33e	; 0x1d33e <__prologue_saves__+0x20>
   148e6:	80 e0       	ldi	r24, 0x00	; 0
   148e8:	91 e0       	ldi	r25, 0x01	; 1
   148ea:	9a 83       	std	Y+2, r25	; 0x02
   148ec:	89 83       	std	Y+1, r24	; 0x01
   148ee:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   148f2:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   148f6:	81 e0       	ldi	r24, 0x01	; 1
   148f8:	82 83       	std	Z+2, r24	; 0x02
   148fa:	8b 83       	std	Y+3, r24	; 0x03
   148fc:	ae 01       	movw	r20, r28
   148fe:	4f 5f       	subi	r20, 0xFF	; 255
   14900:	5f 4f       	sbci	r21, 0xFF	; 255
   14902:	61 e0       	ldi	r22, 0x01	; 1
   14904:	70 e0       	ldi	r23, 0x00	; 0
   14906:	ce 01       	movw	r24, r28
   14908:	03 96       	adiw	r24, 0x03	; 3
   1490a:	0e 94 9c 91 	call	0x12338	; 0x12338 <gpib_write_str>
   1490e:	01 97       	sbiw	r24, 0x01	; 1
   14910:	99 f0       	breq	.+38     	; 0x14938 <SS80_error_return+0x5e>
   14912:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14916:	80 ff       	sbrs	r24, 0
   14918:	0a c0       	rjmp	.+20     	; 0x1492e <SS80_error_return+0x54>
   1491a:	87 ee       	ldi	r24, 0xE7	; 231
   1491c:	98 e1       	ldi	r25, 0x18	; 24
   1491e:	1f 92       	push	r1
   14920:	9f 93       	push	r25
   14922:	8f 93       	push	r24
   14924:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14928:	0f 90       	pop	r0
   1492a:	0f 90       	pop	r0
   1492c:	0f 90       	pop	r0
   1492e:	89 81       	ldd	r24, Y+1	; 0x01
   14930:	9a 81       	ldd	r25, Y+2	; 0x02
   14932:	88 27       	eor	r24, r24
   14934:	90 7d       	andi	r25, 0xD0	; 208
   14936:	07 c0       	rjmp	.+14     	; 0x14946 <SS80_error_return+0x6c>
   14938:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   1493c:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   14940:	12 82       	std	Z+2, r1	; 0x02
   14942:	80 e0       	ldi	r24, 0x00	; 0
   14944:	90 e0       	ldi	r25, 0x00	; 0
   14946:	23 96       	adiw	r28, 0x03	; 3
   14948:	e2 e0       	ldi	r30, 0x02	; 2
   1494a:	0c 94 bb e9 	jmp	0x1d376	; 0x1d376 <__epilogue_restores__+0x20>

0001494e <SS80_locate_and_read>:
/// - Phases: Command, Report
/// @param[in] u: Unit
/// @return  0

int SS80_Channel_Independent_Clear( int u )
{
   1494e:	ac e0       	ldi	r26, 0x0C	; 12
   14950:	b0 e0       	ldi	r27, 0x00	; 0
   14952:	ed ea       	ldi	r30, 0xAD	; 173
   14954:	f4 ea       	ldi	r31, 0xA4	; 164
   14956:	0c 94 90 e9 	jmp	0x1d320	; 0x1d320 <__prologue_saves__+0x2>
   1495a:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   1495e:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   14962:	27 81       	ldd	r18, Z+7	; 0x07
   14964:	30 85       	ldd	r19, Z+8	; 0x08
   14966:	41 85       	ldd	r20, Z+9	; 0x09
   14968:	52 85       	ldd	r21, Z+10	; 0x0a
   1496a:	a0 91 ec 19 	lds	r26, 0x19EC	; 0x8019ec <SS80p>
   1496e:	b0 91 ed 19 	lds	r27, 0x19ED	; 0x8019ed <SS80p+0x1>
   14972:	9f 96       	adiw	r26, 0x2f	; 47
   14974:	0d 90       	ld	r0, X+
   14976:	bc 91       	ld	r27, X
   14978:	a0 2d       	mov	r26, r0
   1497a:	12 82       	std	Z+2, r1	; 0x02
   1497c:	1a 82       	std	Y+2, r1	; 0x02
   1497e:	19 82       	std	Y+1, r1	; 0x01
   14980:	54 98       	cbi	0x0a, 4	; 10
   14982:	4c 99       	sbic	0x09, 4	; 9
   14984:	03 c0       	rjmp	.+6      	; 0x1498c <SS80_locate_and_read+0x3e>
   14986:	80 e0       	ldi	r24, 0x00	; 0
   14988:	90 e1       	ldi	r25, 0x10	; 16
   1498a:	45 c1       	rjmp	.+650    	; 0x14c16 <SS80_locate_and_read+0x2c8>
   1498c:	0e 94 6f e9 	call	0x1d2de	; 0x1d2de <__muluhisi3>
   14990:	4b 01       	movw	r8, r22
   14992:	5c 01       	movw	r10, r24
   14994:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14998:	85 ff       	sbrs	r24, 5
   1499a:	1c c0       	rjmp	.+56     	; 0x149d4 <SS80_locate_and_read+0x86>
   1499c:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   149a0:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   149a4:	86 85       	ldd	r24, Z+14	; 0x0e
   149a6:	8f 93       	push	r24
   149a8:	85 85       	ldd	r24, Z+13	; 0x0d
   149aa:	8f 93       	push	r24
   149ac:	84 85       	ldd	r24, Z+12	; 0x0c
   149ae:	8f 93       	push	r24
   149b0:	83 85       	ldd	r24, Z+11	; 0x0b
   149b2:	8f 93       	push	r24
   149b4:	bf 92       	push	r11
   149b6:	af 92       	push	r10
   149b8:	9f 92       	push	r9
   149ba:	8f 92       	push	r8
   149bc:	8b ed       	ldi	r24, 0xDB	; 219
   149be:	9f e1       	ldi	r25, 0x1F	; 31
   149c0:	1f 92       	push	r1
   149c2:	9f 93       	push	r25
   149c4:	8f 93       	push	r24
   149c6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   149ca:	0f b6       	in	r0, 0x3f	; 63
   149cc:	f8 94       	cli
   149ce:	de bf       	out	0x3e, r29	; 62
   149d0:	0f be       	out	0x3f, r0	; 63
   149d2:	cd bf       	out	0x3d, r28	; 61
   149d4:	17 db       	rcall	.-2514   	; 0x14004 <SS80_cmd_seek>
   149d6:	89 2b       	or	r24, r25
   149d8:	09 f0       	breq	.+2      	; 0x149dc <SS80_locate_and_read+0x8e>
   149da:	af c0       	rjmp	.+350    	; 0x14b3a <SS80_locate_and_read+0x1ec>
   149dc:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   149e0:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   149e4:	43 84       	ldd	r4, Z+11	; 0x0b
   149e6:	54 84       	ldd	r5, Z+12	; 0x0c
   149e8:	65 84       	ldd	r6, Z+13	; 0x0d
   149ea:	76 84       	ldd	r7, Z+14	; 0x0e
   149ec:	1b 82       	std	Y+3, r1	; 0x03
   149ee:	1c 82       	std	Y+4, r1	; 0x04
   149f0:	1d 82       	std	Y+5, r1	; 0x05
   149f2:	1e 82       	std	Y+6, r1	; 0x06
   149f4:	8d eb       	ldi	r24, 0xBD	; 189
   149f6:	9f e1       	ldi	r25, 0x1F	; 31
   149f8:	9c 01       	movw	r18, r24
   149fa:	40 e0       	ldi	r20, 0x00	; 0
   149fc:	2f 83       	std	Y+7, r18	; 0x07
   149fe:	38 87       	std	Y+8, r19	; 0x08
   14a00:	49 87       	std	Y+9, r20	; 0x09
   14a02:	33 24       	eor	r3, r3
   14a04:	33 94       	inc	r3
   14a06:	8c e8       	ldi	r24, 0x8C	; 140
   14a08:	9f e1       	ldi	r25, 0x1F	; 31
   14a0a:	9c 01       	movw	r18, r24
   14a0c:	40 e0       	ldi	r20, 0x00	; 0
   14a0e:	2a 87       	std	Y+10, r18	; 0x0a
   14a10:	3b 87       	std	Y+11, r19	; 0x0b
   14a12:	4c 87       	std	Y+12, r20	; 0x0c
   14a14:	34 c0       	rjmp	.+104    	; 0x14a7e <SS80_locate_and_read+0x130>
   14a16:	86 fd       	sbrc	r24, 6
   14a18:	0e 94 94 8b 	call	0x11728	; 0x11728 <gpib_timer_elapsed_begin>
   14a1c:	ae 01       	movw	r20, r28
   14a1e:	4f 5f       	subi	r20, 0xFF	; 255
   14a20:	5f 4f       	sbci	r21, 0xFF	; 255
   14a22:	b6 01       	movw	r22, r12
   14a24:	85 e3       	ldi	r24, 0x35	; 53
   14a26:	9d e1       	ldi	r25, 0x1D	; 29
   14a28:	0e 94 9c 91 	call	0x12338	; 0x12338 <gpib_write_str>
   14a2c:	8c 01       	movw	r16, r24
   14a2e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14a32:	86 ff       	sbrs	r24, 6
   14a34:	04 c0       	rjmp	.+8      	; 0x14a3e <SS80_locate_and_read+0xf0>
   14a36:	89 e9       	ldi	r24, 0x99	; 153
   14a38:	9e e0       	ldi	r25, 0x0E	; 14
   14a3a:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <gpib_timer_elapsed_end>
   14a3e:	c0 16       	cp	r12, r16
   14a40:	d1 06       	cpc	r13, r17
   14a42:	09 f0       	breq	.+2      	; 0x14a46 <SS80_locate_and_read+0xf8>
   14a44:	83 c0       	rjmp	.+262    	; 0x14b4c <SS80_locate_and_read+0x1fe>
   14a46:	0d 2c       	mov	r0, r13
   14a48:	00 0c       	add	r0, r0
   14a4a:	ee 08       	sbc	r14, r14
   14a4c:	ff 08       	sbc	r15, r15
   14a4e:	8c 0c       	add	r8, r12
   14a50:	9d 1c       	adc	r9, r13
   14a52:	ae 1c       	adc	r10, r14
   14a54:	bf 1c       	adc	r11, r15
   14a56:	01 2e       	mov	r0, r17
   14a58:	00 0c       	add	r0, r0
   14a5a:	22 0b       	sbc	r18, r18
   14a5c:	33 0b       	sbc	r19, r19
   14a5e:	8b 81       	ldd	r24, Y+3	; 0x03
   14a60:	9c 81       	ldd	r25, Y+4	; 0x04
   14a62:	ad 81       	ldd	r26, Y+5	; 0x05
   14a64:	be 81       	ldd	r27, Y+6	; 0x06
   14a66:	80 0f       	add	r24, r16
   14a68:	91 1f       	adc	r25, r17
   14a6a:	a2 1f       	adc	r26, r18
   14a6c:	b3 1f       	adc	r27, r19
   14a6e:	8b 83       	std	Y+3, r24	; 0x03
   14a70:	9c 83       	std	Y+4, r25	; 0x04
   14a72:	ad 83       	std	Y+5, r26	; 0x05
   14a74:	be 83       	std	Y+6, r27	; 0x06
   14a76:	40 1a       	sub	r4, r16
   14a78:	51 0a       	sbc	r5, r17
   14a7a:	62 0a       	sbc	r6, r18
   14a7c:	73 0a       	sbc	r7, r19
   14a7e:	41 14       	cp	r4, r1
   14a80:	51 04       	cpc	r5, r1
   14a82:	61 04       	cpc	r6, r1
   14a84:	71 04       	cpc	r7, r1
   14a86:	09 f4       	brne	.+2      	; 0x14a8a <SS80_locate_and_read+0x13c>
   14a88:	93 c0       	rjmp	.+294    	; 0x14bb0 <SS80_locate_and_read+0x262>
   14a8a:	54 98       	cbi	0x0a, 4	; 10
   14a8c:	4c 9b       	sbis	0x09, 4	; 9
   14a8e:	7b cf       	rjmp	.-266    	; 0x14986 <SS80_locate_and_read+0x38>
   14a90:	31 e0       	ldi	r19, 0x01	; 1
   14a92:	43 16       	cp	r4, r19
   14a94:	53 06       	cpc	r5, r19
   14a96:	61 04       	cpc	r6, r1
   14a98:	71 04       	cpc	r7, r1
   14a9a:	08 f4       	brcc	.+2      	; 0x14a9e <SS80_locate_and_read+0x150>
   14a9c:	50 c0       	rjmp	.+160    	; 0x14b3e <SS80_locate_and_read+0x1f0>
   14a9e:	1a 82       	std	Y+2, r1	; 0x02
   14aa0:	19 82       	std	Y+1, r1	; 0x01
   14aa2:	c1 2c       	mov	r12, r1
   14aa4:	dd 24       	eor	r13, r13
   14aa6:	d3 94       	inc	r13
   14aa8:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14aac:	86 fd       	sbrc	r24, 6
   14aae:	0e 94 94 8b 	call	0x11728	; 0x11728 <gpib_timer_elapsed_begin>
   14ab2:	e0 90 ea 19 	lds	r14, 0x19EA	; 0x8019ea <SS80s>
   14ab6:	f0 90 eb 19 	lds	r15, 0x19EB	; 0x8019eb <SS80s+0x1>
   14aba:	43 e0       	ldi	r20, 0x03	; 3
   14abc:	e4 0e       	add	r14, r20
   14abe:	f1 1c       	adc	r15, r1
   14ac0:	80 91 ec 19 	lds	r24, 0x19EC	; 0x8019ec <SS80p>
   14ac4:	90 91 ed 19 	lds	r25, 0x19ED	; 0x8019ed <SS80p+0x1>
   14ac8:	86 01       	movw	r16, r12
   14aca:	25 e3       	ldi	r18, 0x35	; 53
   14acc:	3d e1       	ldi	r19, 0x1D	; 29
   14ace:	b5 01       	movw	r22, r10
   14ad0:	a4 01       	movw	r20, r8
   14ad2:	02 96       	adiw	r24, 0x02	; 2
   14ad4:	0e 94 e6 8a 	call	0x115cc	; 0x115cc <dbf_open_read>
   14ad8:	8c 01       	movw	r16, r24
   14ada:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14ade:	86 ff       	sbrs	r24, 6
   14ae0:	04 c0       	rjmp	.+8      	; 0x14aea <SS80_locate_and_read+0x19c>
   14ae2:	8f e8       	ldi	r24, 0x8F	; 143
   14ae4:	9e e0       	ldi	r25, 0x0E	; 14
   14ae6:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <gpib_timer_elapsed_end>
   14aea:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14aee:	85 ff       	sbrs	r24, 5
   14af0:	0e c0       	rjmp	.+28     	; 0x14b0e <SS80_locate_and_read+0x1c0>
   14af2:	1f 93       	push	r17
   14af4:	0f 93       	push	r16
   14af6:	1f 92       	push	r1
   14af8:	88 85       	ldd	r24, Y+8	; 0x08
   14afa:	8f 93       	push	r24
   14afc:	9f 81       	ldd	r25, Y+7	; 0x07
   14afe:	9f 93       	push	r25
   14b00:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14b04:	0f 90       	pop	r0
   14b06:	0f 90       	pop	r0
   14b08:	0f 90       	pop	r0
   14b0a:	0f 90       	pop	r0
   14b0c:	0f 90       	pop	r0
   14b0e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14b12:	17 ff       	sbrs	r17, 7
   14b14:	80 cf       	rjmp	.-256    	; 0x14a16 <SS80_locate_and_read+0xc8>
   14b16:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   14b1a:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   14b1e:	91 e0       	ldi	r25, 0x01	; 1
   14b20:	92 83       	std	Z+2, r25	; 0x02
   14b22:	80 ff       	sbrs	r24, 0
   14b24:	0a c0       	rjmp	.+20     	; 0x14b3a <SS80_locate_and_read+0x1ec>
   14b26:	85 ea       	ldi	r24, 0xA5	; 165
   14b28:	9f e1       	ldi	r25, 0x1F	; 31
   14b2a:	1f 92       	push	r1
   14b2c:	9f 93       	push	r25
   14b2e:	8f 93       	push	r24
   14b30:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14b34:	0f 90       	pop	r0
   14b36:	0f 90       	pop	r0
   14b38:	0f 90       	pop	r0
   14b3a:	cf de       	rcall	.-610    	; 0x148da <SS80_error_return>
   14b3c:	6c c0       	rjmp	.+216    	; 0x14c16 <SS80_locate_and_read+0x2c8>
   14b3e:	62 01       	movw	r12, r4
   14b40:	89 81       	ldd	r24, Y+1	; 0x01
   14b42:	9a 81       	ldd	r25, Y+2	; 0x02
   14b44:	91 60       	ori	r25, 0x01	; 1
   14b46:	9a 83       	std	Y+2, r25	; 0x02
   14b48:	89 83       	std	Y+1, r24	; 0x01
   14b4a:	ae cf       	rjmp	.-164    	; 0x14aa8 <SS80_locate_and_read+0x15a>
   14b4c:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   14b50:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   14b54:	32 82       	std	Z+2, r3	; 0x02
   14b56:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14b5a:	80 ff       	sbrs	r24, 0
   14b5c:	0a c0       	rjmp	.+20     	; 0x14b72 <SS80_locate_and_read+0x224>
   14b5e:	1f 92       	push	r1
   14b60:	ab 85       	ldd	r26, Y+11	; 0x0b
   14b62:	af 93       	push	r26
   14b64:	ba 85       	ldd	r27, Y+10	; 0x0a
   14b66:	bf 93       	push	r27
   14b68:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14b6c:	0f 90       	pop	r0
   14b6e:	0f 90       	pop	r0
   14b70:	0f 90       	pop	r0
   14b72:	89 81       	ldd	r24, Y+1	; 0x01
   14b74:	9a 81       	ldd	r25, Y+2	; 0x02
   14b76:	88 27       	eor	r24, r24
   14b78:	90 7d       	andi	r25, 0xD0	; 208
   14b7a:	89 2b       	or	r24, r25
   14b7c:	09 f4       	brne	.+2      	; 0x14b80 <SS80_locate_and_read+0x232>
   14b7e:	63 cf       	rjmp	.-314    	; 0x14a46 <SS80_locate_and_read+0xf8>
   14b80:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   14b84:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   14b88:	83 81       	ldd	r24, Z+3	; 0x03
   14b8a:	94 81       	ldd	r25, Z+4	; 0x04
   14b8c:	80 62       	ori	r24, 0x20	; 32
   14b8e:	94 83       	std	Z+4, r25	; 0x04
   14b90:	83 83       	std	Z+3, r24	; 0x03
   14b92:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14b96:	80 ff       	sbrs	r24, 0
   14b98:	23 c0       	rjmp	.+70     	; 0x14be0 <SS80_locate_and_read+0x292>
   14b9a:	87 e6       	ldi	r24, 0x67	; 103
   14b9c:	9f e1       	ldi	r25, 0x1F	; 31
   14b9e:	1f 92       	push	r1
   14ba0:	9f 93       	push	r25
   14ba2:	8f 93       	push	r24
   14ba4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14ba8:	0f 90       	pop	r0
   14baa:	0f 90       	pop	r0
   14bac:	0f 90       	pop	r0
   14bae:	18 c0       	rjmp	.+48     	; 0x14be0 <SS80_locate_and_read+0x292>
   14bb0:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14bb4:	85 ff       	sbrs	r24, 5
   14bb6:	14 c0       	rjmp	.+40     	; 0x14be0 <SS80_locate_and_read+0x292>
   14bb8:	9e 81       	ldd	r25, Y+6	; 0x06
   14bba:	9f 93       	push	r25
   14bbc:	ad 81       	ldd	r26, Y+5	; 0x05
   14bbe:	af 93       	push	r26
   14bc0:	bc 81       	ldd	r27, Y+4	; 0x04
   14bc2:	bf 93       	push	r27
   14bc4:	eb 81       	ldd	r30, Y+3	; 0x03
   14bc6:	ef 93       	push	r30
   14bc8:	8f e3       	ldi	r24, 0x3F	; 63
   14bca:	9f e1       	ldi	r25, 0x1F	; 31
   14bcc:	1f 92       	push	r1
   14bce:	9f 93       	push	r25
   14bd0:	8f 93       	push	r24
   14bd2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14bd6:	0f b6       	in	r0, 0x3f	; 63
   14bd8:	f8 94       	cli
   14bda:	de bf       	out	0x3e, r29	; 62
   14bdc:	0f be       	out	0x3f, r0	; 63
   14bde:	cd bf       	out	0x3d, r28	; 61
   14be0:	00 91 ea 19 	lds	r16, 0x19EA	; 0x8019ea <SS80s>
   14be4:	10 91 eb 19 	lds	r17, 0x19EB	; 0x8019eb <SS80s+0x1>
   14be8:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   14bec:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   14bf0:	27 a5       	ldd	r18, Z+47	; 0x2f
   14bf2:	30 a9       	ldd	r19, Z+48	; 0x30
   14bf4:	40 e0       	ldi	r20, 0x00	; 0
   14bf6:	50 e0       	ldi	r21, 0x00	; 0
   14bf8:	c5 01       	movw	r24, r10
   14bfa:	b4 01       	movw	r22, r8
   14bfc:	0e 94 22 e9 	call	0x1d244	; 0x1d244 <__udivmodsi4>
   14c00:	d8 01       	movw	r26, r16
   14c02:	17 96       	adiw	r26, 0x07	; 7
   14c04:	2d 93       	st	X+, r18
   14c06:	3d 93       	st	X+, r19
   14c08:	4d 93       	st	X+, r20
   14c0a:	5c 93       	st	X, r21
   14c0c:	1a 97       	sbiw	r26, 0x0a	; 10
   14c0e:	89 81       	ldd	r24, Y+1	; 0x01
   14c10:	9a 81       	ldd	r25, Y+2	; 0x02
   14c12:	88 27       	eor	r24, r24
   14c14:	90 7d       	andi	r25, 0xD0	; 208
   14c16:	2c 96       	adiw	r28, 0x0c	; 12
   14c18:	e1 e1       	ldi	r30, 0x11	; 17
   14c1a:	0c 94 ac e9 	jmp	0x1d358	; 0x1d358 <__epilogue_restores__+0x2>

00014c1e <SS80_Execute_State>:
   14c1e:	cf 93       	push	r28
   14c20:	df 93       	push	r29
   14c22:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   14c26:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   14c2a:	81 81       	ldd	r24, Z+1	; 0x01
   14c2c:	90 e0       	ldi	r25, 0x00	; 0
   14c2e:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_disable_PPR>
   14c32:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   14c36:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   14c3a:	80 81       	ld	r24, Z
   14c3c:	91 81       	ldd	r25, Z+1	; 0x01
   14c3e:	82 30       	cpi	r24, 0x02	; 2
   14c40:	91 05       	cpc	r25, r1
   14c42:	89 f0       	breq	.+34     	; 0x14c66 <SS80_Execute_State+0x48>
   14c44:	3c f4       	brge	.+14     	; 0x14c54 <SS80_Execute_State+0x36>
   14c46:	00 97       	sbiw	r24, 0x00	; 0
   14c48:	91 f1       	breq	.+100    	; 0x14cae <SS80_Execute_State+0x90>
   14c4a:	81 30       	cpi	r24, 0x01	; 1
   14c4c:	91 05       	cpc	r25, r1
   14c4e:	b9 f4       	brne	.+46     	; 0x14c7e <SS80_Execute_State+0x60>
   14c50:	7e de       	rcall	.-772    	; 0x1494e <SS80_locate_and_read>
   14c52:	0d c0       	rjmp	.+26     	; 0x14c6e <SS80_Execute_State+0x50>
   14c54:	83 30       	cpi	r24, 0x03	; 3
   14c56:	91 05       	cpc	r25, r1
   14c58:	41 f0       	breq	.+16     	; 0x14c6a <SS80_Execute_State+0x4c>
   14c5a:	84 30       	cpi	r24, 0x04	; 4
   14c5c:	91 05       	cpc	r25, r1
   14c5e:	79 f4       	brne	.+30     	; 0x14c7e <SS80_Execute_State+0x60>
   14c60:	0e 94 d8 9c 	call	0x139b0	; 0x139b0 <SS80_describe>
   14c64:	04 c0       	rjmp	.+8      	; 0x14c6e <SS80_Execute_State+0x50>
   14c66:	4f da       	rcall	.-2914   	; 0x14106 <SS80_locate_and_write>
   14c68:	02 c0       	rjmp	.+4      	; 0x14c6e <SS80_Execute_State+0x50>
   14c6a:	0e 94 57 9c 	call	0x138ae	; 0x138ae <SS80_send_status>
   14c6e:	ec 01       	movw	r28, r24
   14c70:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   14c74:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   14c78:	11 82       	std	Z+1, r1	; 0x01
   14c7a:	10 82       	st	Z, r1
   14c7c:	1a c0       	rjmp	.+52     	; 0x14cb2 <SS80_Execute_State+0x94>
   14c7e:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   14c82:	20 ff       	sbrs	r18, 0
   14c84:	0e c0       	rjmp	.+28     	; 0x14ca2 <SS80_Execute_State+0x84>
   14c86:	9f 93       	push	r25
   14c88:	8f 93       	push	r24
   14c8a:	83 e0       	ldi	r24, 0x03	; 3
   14c8c:	90 e2       	ldi	r25, 0x20	; 32
   14c8e:	1f 92       	push	r1
   14c90:	9f 93       	push	r25
   14c92:	8f 93       	push	r24
   14c94:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14c98:	0f 90       	pop	r0
   14c9a:	0f 90       	pop	r0
   14c9c:	0f 90       	pop	r0
   14c9e:	0f 90       	pop	r0
   14ca0:	0f 90       	pop	r0
   14ca2:	e0 91 ea 19 	lds	r30, 0x19EA	; 0x8019ea <SS80s>
   14ca6:	f0 91 eb 19 	lds	r31, 0x19EB	; 0x8019eb <SS80s+0x1>
   14caa:	11 82       	std	Z+1, r1	; 0x01
   14cac:	10 82       	st	Z, r1
   14cae:	c0 e0       	ldi	r28, 0x00	; 0
   14cb0:	d0 e0       	ldi	r29, 0x00	; 0
   14cb2:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   14cb6:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   14cba:	81 81       	ldd	r24, Z+1	; 0x01
   14cbc:	90 e0       	ldi	r25, 0x00	; 0
   14cbe:	0e 94 4c 8c 	call	0x11898	; 0x11898 <gpib_enable_PPR>
   14cc2:	ce 01       	movw	r24, r28
   14cc4:	df 91       	pop	r29
   14cc6:	cf 91       	pop	r28
   14cc8:	08 95       	ret

00014cca <SS80_COMMANDS>:
   14cca:	1f 93       	push	r17
   14ccc:	cf 93       	push	r28
   14cce:	df 93       	push	r29
   14cd0:	18 2f       	mov	r17, r24
   14cd2:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <talking>
   14cd6:	90 e0       	ldi	r25, 0x00	; 0
   14cd8:	0e 94 55 92 	call	0x124aa	; 0x124aa <SS80_is_MTA>
   14cdc:	89 2b       	or	r24, r25
   14cde:	19 f0       	breq	.+6      	; 0x14ce6 <SS80_COMMANDS+0x1c>
   14ce0:	15 36       	cpi	r17, 0x65	; 101
   14ce2:	19 f5       	brne	.+70     	; 0x14d2a <SS80_COMMANDS+0x60>
   14ce4:	09 c0       	rjmp	.+18     	; 0x14cf8 <SS80_COMMANDS+0x2e>
   14ce6:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   14cea:	90 e0       	ldi	r25, 0x00	; 0
   14cec:	0e 94 44 92 	call	0x12488	; 0x12488 <SS80_is_MLA>
   14cf0:	ec 01       	movw	r28, r24
   14cf2:	89 2b       	or	r24, r25
   14cf4:	a9 f7       	brne	.-22     	; 0x14ce0 <SS80_COMMANDS+0x16>
   14cf6:	ae c0       	rjmp	.+348    	; 0x14e54 <SS80_COMMANDS+0x18a>
   14cf8:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   14cfc:	90 e0       	ldi	r25, 0x00	; 0
   14cfe:	0e 94 44 92 	call	0x12488	; 0x12488 <SS80_is_MLA>
   14d02:	89 2b       	or	r24, r25
   14d04:	09 f4       	brne	.+2      	; 0x14d08 <SS80_COMMANDS+0x3e>
   14d06:	a3 c0       	rjmp	.+326    	; 0x14e4e <SS80_COMMANDS+0x184>
   14d08:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14d0c:	85 ff       	sbrs	r24, 5
   14d0e:	0a c0       	rjmp	.+20     	; 0x14d24 <SS80_COMMANDS+0x5a>
   14d10:	81 ed       	ldi	r24, 0xD1	; 209
   14d12:	98 e1       	ldi	r25, 0x18	; 24
   14d14:	1f 92       	push	r1
   14d16:	9f 93       	push	r25
   14d18:	8f 93       	push	r24
   14d1a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14d1e:	0f 90       	pop	r0
   14d20:	0f 90       	pop	r0
   14d22:	0f 90       	pop	r0
   14d24:	0e 94 8a 9d 	call	0x13b14	; 0x13b14 <SS80_Command_State>
   14d28:	73 c0       	rjmp	.+230    	; 0x14e10 <SS80_COMMANDS+0x146>
   14d2a:	1e 36       	cpi	r17, 0x6E	; 110
   14d2c:	01 f5       	brne	.+64     	; 0x14d6e <SS80_COMMANDS+0xa4>
   14d2e:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   14d32:	90 e0       	ldi	r25, 0x00	; 0
   14d34:	0e 94 44 92 	call	0x12488	; 0x12488 <SS80_is_MLA>
   14d38:	89 2b       	or	r24, r25
   14d3a:	79 f0       	breq	.+30     	; 0x14d5a <SS80_COMMANDS+0x90>
   14d3c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14d40:	85 ff       	sbrs	r24, 5
   14d42:	13 c0       	rjmp	.+38     	; 0x14d6a <SS80_COMMANDS+0xa0>
   14d44:	8b eb       	ldi	r24, 0xBB	; 187
   14d46:	98 e1       	ldi	r25, 0x18	; 24
   14d48:	1f 92       	push	r1
   14d4a:	9f 93       	push	r25
   14d4c:	8f 93       	push	r24
   14d4e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14d52:	0f 90       	pop	r0
   14d54:	0f 90       	pop	r0
   14d56:	0f 90       	pop	r0
   14d58:	08 c0       	rjmp	.+16     	; 0x14d6a <SS80_COMMANDS+0xa0>
   14d5a:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <talking>
   14d5e:	90 e0       	ldi	r25, 0x00	; 0
   14d60:	0e 94 55 92 	call	0x124aa	; 0x124aa <SS80_is_MTA>
   14d64:	89 2b       	or	r24, r25
   14d66:	51 f7       	brne	.-44     	; 0x14d3c <SS80_COMMANDS+0x72>
   14d68:	72 c0       	rjmp	.+228    	; 0x14e4e <SS80_COMMANDS+0x184>
   14d6a:	59 df       	rcall	.-334    	; 0x14c1e <SS80_Execute_State>
   14d6c:	51 c0       	rjmp	.+162    	; 0x14e10 <SS80_COMMANDS+0x146>
   14d6e:	10 37       	cpi	r17, 0x70	; 112
   14d70:	b9 f5       	brne	.+110    	; 0x14de0 <SS80_COMMANDS+0x116>
   14d72:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <talking>
   14d76:	90 e0       	ldi	r25, 0x00	; 0
   14d78:	0e 94 55 92 	call	0x124aa	; 0x124aa <SS80_is_MTA>
   14d7c:	89 2b       	or	r24, r25
   14d7e:	81 f0       	breq	.+32     	; 0x14da0 <SS80_COMMANDS+0xd6>
   14d80:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14d84:	85 ff       	sbrs	r24, 5
   14d86:	0a c0       	rjmp	.+20     	; 0x14d9c <SS80_COMMANDS+0xd2>
   14d88:	86 ea       	ldi	r24, 0xA6	; 166
   14d8a:	98 e1       	ldi	r25, 0x18	; 24
   14d8c:	1f 92       	push	r1
   14d8e:	9f 93       	push	r25
   14d90:	8f 93       	push	r24
   14d92:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14d96:	0f 90       	pop	r0
   14d98:	0f 90       	pop	r0
   14d9a:	0f 90       	pop	r0
   14d9c:	4b db       	rcall	.-2410   	; 0x14434 <SS80_Report>
   14d9e:	38 c0       	rjmp	.+112    	; 0x14e10 <SS80_COMMANDS+0x146>
   14da0:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   14da4:	90 e0       	ldi	r25, 0x00	; 0
   14da6:	0e 94 44 92 	call	0x12488	; 0x12488 <SS80_is_MLA>
   14daa:	89 2b       	or	r24, r25
   14dac:	09 f4       	brne	.+2      	; 0x14db0 <SS80_COMMANDS+0xe6>
   14dae:	4f c0       	rjmp	.+158    	; 0x14e4e <SS80_COMMANDS+0x184>
   14db0:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14db4:	85 ff       	sbrs	r24, 5
   14db6:	0a c0       	rjmp	.+20     	; 0x14dcc <SS80_COMMANDS+0x102>
   14db8:	87 e9       	ldi	r24, 0x97	; 151
   14dba:	98 e1       	ldi	r25, 0x18	; 24
   14dbc:	1f 92       	push	r1
   14dbe:	9f 93       	push	r25
   14dc0:	8f 93       	push	r24
   14dc2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14dc6:	0f 90       	pop	r0
   14dc8:	0f 90       	pop	r0
   14dca:	0f 90       	pop	r0
   14dcc:	e0 91 ec 19 	lds	r30, 0x19EC	; 0x8019ec <SS80p>
   14dd0:	f0 91 ed 19 	lds	r31, 0x19ED	; 0x8019ed <SS80p+0x1>
   14dd4:	81 81       	ldd	r24, Z+1	; 0x01
   14dd6:	90 e0       	ldi	r25, 0x00	; 0
   14dd8:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_disable_PPR>
   14ddc:	18 dc       	rcall	.-2000   	; 0x1460e <SS80_Amigo_Clear>
   14dde:	18 c0       	rjmp	.+48     	; 0x14e10 <SS80_COMMANDS+0x146>
   14de0:	12 37       	cpi	r17, 0x72	; 114
   14de2:	c1 f4       	brne	.+48     	; 0x14e14 <SS80_COMMANDS+0x14a>
   14de4:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   14de8:	90 e0       	ldi	r25, 0x00	; 0
   14dea:	0e 94 44 92 	call	0x12488	; 0x12488 <SS80_is_MLA>
   14dee:	89 2b       	or	r24, r25
   14df0:	89 f0       	breq	.+34     	; 0x14e14 <SS80_COMMANDS+0x14a>
   14df2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14df6:	85 ff       	sbrs	r24, 5
   14df8:	0a c0       	rjmp	.+20     	; 0x14e0e <SS80_COMMANDS+0x144>
   14dfa:	83 e8       	ldi	r24, 0x83	; 131
   14dfc:	98 e1       	ldi	r25, 0x18	; 24
   14dfe:	1f 92       	push	r1
   14e00:	9f 93       	push	r25
   14e02:	8f 93       	push	r24
   14e04:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14e08:	0f 90       	pop	r0
   14e0a:	0f 90       	pop	r0
   14e0c:	0f 90       	pop	r0
   14e0e:	53 dc       	rcall	.-1882   	; 0x146b6 <SS80_Transparent_State>
   14e10:	ec 01       	movw	r28, r24
   14e12:	3d c0       	rjmp	.+122    	; 0x14e8e <SS80_COMMANDS+0x1c4>
   14e14:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14e18:	80 ff       	sbrs	r24, 0
   14e1a:	19 c0       	rjmp	.+50     	; 0x14e4e <SS80_COMMANDS+0x184>
   14e1c:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <talking>
   14e20:	1f 92       	push	r1
   14e22:	8f 93       	push	r24
   14e24:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   14e28:	1f 92       	push	r1
   14e2a:	8f 93       	push	r24
   14e2c:	1f 92       	push	r1
   14e2e:	1f 93       	push	r17
   14e30:	8f e4       	ldi	r24, 0x4F	; 79
   14e32:	98 e1       	ldi	r25, 0x18	; 24
   14e34:	1f 92       	push	r1
   14e36:	9f 93       	push	r25
   14e38:	8f 93       	push	r24
   14e3a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14e3e:	8d b7       	in	r24, 0x3d	; 61
   14e40:	9e b7       	in	r25, 0x3e	; 62
   14e42:	09 96       	adiw	r24, 0x09	; 9
   14e44:	0f b6       	in	r0, 0x3f	; 63
   14e46:	f8 94       	cli
   14e48:	9e bf       	out	0x3e, r25	; 62
   14e4a:	0f be       	out	0x3f, r0	; 63
   14e4c:	8d bf       	out	0x3d, r24	; 61
   14e4e:	c0 e0       	ldi	r28, 0x00	; 0
   14e50:	d0 e0       	ldi	r29, 0x00	; 0
   14e52:	1d c0       	rjmp	.+58     	; 0x14e8e <SS80_COMMANDS+0x1c4>
   14e54:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14e58:	80 ff       	sbrs	r24, 0
   14e5a:	f9 cf       	rjmp	.-14     	; 0x14e4e <SS80_COMMANDS+0x184>
   14e5c:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <talking>
   14e60:	1f 92       	push	r1
   14e62:	8f 93       	push	r24
   14e64:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   14e68:	1f 92       	push	r1
   14e6a:	8f 93       	push	r24
   14e6c:	1f 92       	push	r1
   14e6e:	1f 93       	push	r17
   14e70:	8b e1       	ldi	r24, 0x1B	; 27
   14e72:	98 e1       	ldi	r25, 0x18	; 24
   14e74:	1f 92       	push	r1
   14e76:	9f 93       	push	r25
   14e78:	8f 93       	push	r24
   14e7a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14e7e:	8d b7       	in	r24, 0x3d	; 61
   14e80:	9e b7       	in	r25, 0x3e	; 62
   14e82:	09 96       	adiw	r24, 0x09	; 9
   14e84:	0f b6       	in	r0, 0x3f	; 63
   14e86:	f8 94       	cli
   14e88:	9e bf       	out	0x3e, r25	; 62
   14e8a:	0f be       	out	0x3f, r0	; 63
   14e8c:	8d bf       	out	0x3d, r24	; 61
   14e8e:	ce 01       	movw	r24, r28
   14e90:	df 91       	pop	r29
   14e92:	cf 91       	pop	r28
   14e94:	1f 91       	pop	r17
   14e96:	08 95       	ret

00014e98 <amigo_overflow_check>:
   14e98:	cf 92       	push	r12
   14e9a:	df 92       	push	r13
   14e9c:	ef 92       	push	r14
   14e9e:	0f 93       	push	r16
   14ea0:	1f 93       	push	r17
   14ea2:	cf 93       	push	r28
   14ea4:	df 93       	push	r29
   14ea6:	ec 01       	movw	r28, r24
   14ea8:	8b 01       	movw	r16, r22
   14eaa:	80 e0       	ldi	r24, 0x00	; 0
   14eac:	90 e0       	ldi	r25, 0x00	; 0
   14eae:	22 ef       	ldi	r18, 0xF2	; 242
   14eb0:	37 e2       	ldi	r19, 0x27	; 39
   14eb2:	69 01       	movw	r12, r18
   14eb4:	2d 81       	ldd	r18, Y+5	; 0x05
   14eb6:	30 e0       	ldi	r19, 0x00	; 0
   14eb8:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   14ebc:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   14ec0:	47 a1       	ldd	r20, Z+39	; 0x27
   14ec2:	50 a5       	ldd	r21, Z+40	; 0x28
   14ec4:	24 17       	cp	r18, r20
   14ec6:	35 07       	cpc	r19, r21
   14ec8:	7c f1       	brlt	.+94     	; 0x14f28 <amigo_overflow_check+0x90>
   14eca:	1d 82       	std	Y+5, r1	; 0x05
   14ecc:	2c 81       	ldd	r18, Y+4	; 0x04
   14ece:	2f 5f       	subi	r18, 0xFF	; 255
   14ed0:	2c 83       	std	Y+4, r18	; 0x04
   14ed2:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   14ed6:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   14eda:	2c 81       	ldd	r18, Y+4	; 0x04
   14edc:	30 e0       	ldi	r19, 0x00	; 0
   14ede:	41 a5       	ldd	r20, Z+41	; 0x29
   14ee0:	52 a5       	ldd	r21, Z+42	; 0x2a
   14ee2:	24 17       	cp	r18, r20
   14ee4:	35 07       	cpc	r19, r21
   14ee6:	34 f3       	brlt	.-52     	; 0x14eb4 <amigo_overflow_check+0x1c>
   14ee8:	1c 82       	std	Y+4, r1	; 0x04
   14eea:	2b 81       	ldd	r18, Y+3	; 0x03
   14eec:	2f 5f       	subi	r18, 0xFF	; 255
   14eee:	2b 83       	std	Y+3, r18	; 0x03
   14ef0:	30 e0       	ldi	r19, 0x00	; 0
   14ef2:	43 a5       	ldd	r20, Z+43	; 0x2b
   14ef4:	54 a5       	ldd	r21, Z+44	; 0x2c
   14ef6:	24 17       	cp	r18, r20
   14ef8:	35 07       	cpc	r19, r21
   14efa:	5c f3       	brlt	.-42     	; 0x14ed2 <amigo_overflow_check+0x3a>
   14efc:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14f00:	80 ff       	sbrs	r24, 0
   14f02:	0f c0       	rjmp	.+30     	; 0x14f22 <amigo_overflow_check+0x8a>
   14f04:	01 15       	cp	r16, r1
   14f06:	11 05       	cpc	r17, r1
   14f08:	61 f0       	breq	.+24     	; 0x14f22 <amigo_overflow_check+0x8a>
   14f0a:	1f 93       	push	r17
   14f0c:	0f 93       	push	r16
   14f0e:	1f 92       	push	r1
   14f10:	df 92       	push	r13
   14f12:	cf 92       	push	r12
   14f14:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14f18:	0f 90       	pop	r0
   14f1a:	0f 90       	pop	r0
   14f1c:	0f 90       	pop	r0
   14f1e:	0f 90       	pop	r0
   14f20:	0f 90       	pop	r0
   14f22:	81 e0       	ldi	r24, 0x01	; 1
   14f24:	90 e0       	ldi	r25, 0x00	; 0
   14f26:	d5 cf       	rjmp	.-86     	; 0x14ed2 <amigo_overflow_check+0x3a>
   14f28:	df 91       	pop	r29
   14f2a:	cf 91       	pop	r28
   14f2c:	1f 91       	pop	r17
   14f2e:	0f 91       	pop	r16
   14f30:	ef 90       	pop	r14
   14f32:	df 90       	pop	r13
   14f34:	cf 90       	pop	r12
   14f36:	08 95       	ret

00014f38 <amigo_chs_to_logical>:
   14f38:	a0 e0       	ldi	r26, 0x00	; 0
   14f3a:	b0 e0       	ldi	r27, 0x00	; 0
   14f3c:	e2 ea       	ldi	r30, 0xA2	; 162
   14f3e:	f7 ea       	ldi	r31, 0xA7	; 167
   14f40:	0c 94 98 e9 	jmp	0x1d330	; 0x1d330 <__prologue_saves__+0x12>
   14f44:	dc 01       	movw	r26, r24
   14f46:	d6 2f       	mov	r29, r22
   14f48:	17 2f       	mov	r17, r23
   14f4a:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   14f4e:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   14f52:	87 a1       	ldd	r24, Z+39	; 0x27
   14f54:	90 a5       	ldd	r25, Z+40	; 0x28
   14f56:	14 96       	adiw	r26, 0x04	; 4
   14f58:	cc 91       	ld	r28, X
   14f5a:	14 97       	sbiw	r26, 0x04	; 4
   14f5c:	c8 9f       	mul	r28, r24
   14f5e:	90 01       	movw	r18, r0
   14f60:	c9 9f       	mul	r28, r25
   14f62:	30 0d       	add	r19, r0
   14f64:	11 24       	eor	r1, r1
   14f66:	a9 01       	movw	r20, r18
   14f68:	33 0f       	add	r19, r19
   14f6a:	66 0b       	sbc	r22, r22
   14f6c:	77 0b       	sbc	r23, r23
   14f6e:	13 96       	adiw	r26, 0x03	; 3
   14f70:	0c 91       	ld	r16, X
   14f72:	13 97       	sbiw	r26, 0x03	; 3
   14f74:	21 a5       	ldd	r18, Z+41	; 0x29
   14f76:	32 a5       	ldd	r19, Z+42	; 0x2a
   14f78:	82 9f       	mul	r24, r18
   14f7a:	70 01       	movw	r14, r0
   14f7c:	83 9f       	mul	r24, r19
   14f7e:	f0 0c       	add	r15, r0
   14f80:	92 9f       	mul	r25, r18
   14f82:	f0 0c       	add	r15, r0
   14f84:	11 24       	eor	r1, r1
   14f86:	0e 9d       	mul	r16, r14
   14f88:	90 01       	movw	r18, r0
   14f8a:	0f 9d       	mul	r16, r15
   14f8c:	30 0d       	add	r19, r0
   14f8e:	11 24       	eor	r1, r1
   14f90:	69 01       	movw	r12, r18
   14f92:	33 0f       	add	r19, r19
   14f94:	ee 08       	sbc	r14, r14
   14f96:	ff 08       	sbc	r15, r15
   14f98:	4c 0d       	add	r20, r12
   14f9a:	5d 1d       	adc	r21, r13
   14f9c:	6e 1d       	adc	r22, r14
   14f9e:	7f 1d       	adc	r23, r15
   14fa0:	15 96       	adiw	r26, 0x05	; 5
   14fa2:	bc 90       	ld	r11, X
   14fa4:	9a 01       	movw	r18, r20
   14fa6:	ab 01       	movw	r20, r22
   14fa8:	2b 0d       	add	r18, r11
   14faa:	31 1d       	adc	r19, r1
   14fac:	41 1d       	adc	r20, r1
   14fae:	51 1d       	adc	r21, r1
   14fb0:	a5 a1       	ldd	r26, Z+37	; 0x25
   14fb2:	b6 a1       	ldd	r27, Z+38	; 0x26
   14fb4:	0e 94 79 e9 	call	0x1d2f2	; 0x1d2f2 <__mulshisi3>
   14fb8:	6b 01       	movw	r12, r22
   14fba:	7c 01       	movw	r14, r24
   14fbc:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14fc0:	85 ff       	sbrs	r24, 5
   14fc2:	22 c0       	rjmp	.+68     	; 0x15008 <amigo_chs_to_logical+0xd0>
   14fc4:	1f 92       	push	r1
   14fc6:	bf 92       	push	r11
   14fc8:	1f 92       	push	r1
   14fca:	cf 93       	push	r28
   14fcc:	1f 92       	push	r1
   14fce:	0f 93       	push	r16
   14fd0:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   14fd4:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   14fd8:	81 81       	ldd	r24, Z+1	; 0x01
   14fda:	1f 92       	push	r1
   14fdc:	8f 93       	push	r24
   14fde:	ff 92       	push	r15
   14fe0:	ef 92       	push	r14
   14fe2:	df 92       	push	r13
   14fe4:	cf 92       	push	r12
   14fe6:	1f 93       	push	r17
   14fe8:	df 93       	push	r29
   14fea:	8f e9       	ldi	r24, 0x9F	; 159
   14fec:	97 e2       	ldi	r25, 0x27	; 39
   14fee:	1f 92       	push	r1
   14ff0:	9f 93       	push	r25
   14ff2:	8f 93       	push	r24
   14ff4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   14ff8:	8d b7       	in	r24, 0x3d	; 61
   14ffa:	9e b7       	in	r25, 0x3e	; 62
   14ffc:	41 96       	adiw	r24, 0x11	; 17
   14ffe:	0f b6       	in	r0, 0x3f	; 63
   15000:	f8 94       	cli
   15002:	9e bf       	out	0x3e, r25	; 62
   15004:	0f be       	out	0x3f, r0	; 63
   15006:	8d bf       	out	0x3d, r24	; 61
   15008:	b6 01       	movw	r22, r12
   1500a:	c7 01       	movw	r24, r14
   1500c:	cd b7       	in	r28, 0x3d	; 61
   1500e:	de b7       	in	r29, 0x3e	; 62
   15010:	e9 e0       	ldi	r30, 0x09	; 9
   15012:	0c 94 b4 e9 	jmp	0x1d368	; 0x1d368 <__epilogue_restores__+0x12>

00015016 <amigo_init>:
   15016:	ef 92       	push	r14
   15018:	ff 92       	push	r15
   1501a:	0f 93       	push	r16
   1501c:	1f 93       	push	r17
   1501e:	cf 93       	push	r28
   15020:	df 93       	push	r29
   15022:	0f e3       	ldi	r16, 0x3F	; 63
   15024:	1f e1       	ldi	r17, 0x1F	; 31
   15026:	c7 e0       	ldi	r28, 0x07	; 7
   15028:	d0 e0       	ldi	r29, 0x00	; 0
   1502a:	84 e0       	ldi	r24, 0x04	; 4
   1502c:	f8 2e       	mov	r15, r24
   1502e:	92 e0       	ldi	r25, 0x02	; 2
   15030:	e9 2e       	mov	r14, r25
   15032:	d8 01       	movw	r26, r16
   15034:	d1 96       	adiw	r26, 0x31	; 49
   15036:	8c 91       	ld	r24, X
   15038:	81 30       	cpi	r24, 0x01	; 1
   1503a:	31 f5       	brne	.+76     	; 0x15088 <amigo_init+0x72>
   1503c:	ce 01       	movw	r24, r28
   1503e:	0e 94 da b5 	call	0x16bb4	; 0x16bb4 <set_active_device>
   15042:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   15046:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   1504a:	10 82       	st	Z, r1
   1504c:	9f 01       	movw	r18, r30
   1504e:	27 5f       	subi	r18, 0xF7	; 247
   15050:	3f 4f       	sbci	r19, 0xFF	; 255
   15052:	d9 01       	movw	r26, r18
   15054:	8f 2d       	mov	r24, r15
   15056:	1d 92       	st	X+, r1
   15058:	8a 95       	dec	r24
   1505a:	e9 f7       	brne	.-6      	; 0x15056 <amigo_init+0x40>
   1505c:	2c 5f       	subi	r18, 0xFC	; 252
   1505e:	3f 4f       	sbci	r19, 0xFF	; 255
   15060:	d9 01       	movw	r26, r18
   15062:	8f 2d       	mov	r24, r15
   15064:	1d 92       	st	X+, r1
   15066:	8a 95       	dec	r24
   15068:	e9 f7       	brne	.-6      	; 0x15064 <amigo_init+0x4e>
   1506a:	11 82       	std	Z+1, r1	; 0x01
   1506c:	15 82       	std	Z+5, r1	; 0x05
   1506e:	14 82       	std	Z+4, r1	; 0x04
   15070:	13 82       	std	Z+3, r1	; 0x03
   15072:	e6 82       	std	Z+6, r14	; 0x06
   15074:	10 86       	std	Z+8, r1	; 0x08
   15076:	17 82       	std	Z+7, r1	; 0x07
   15078:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   1507c:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   15080:	81 81       	ldd	r24, Z+1	; 0x01
   15082:	90 e0       	ldi	r25, 0x00	; 0
   15084:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_disable_PPR>
   15088:	21 97       	sbiw	r28, 0x01	; 1
   1508a:	07 50       	subi	r16, 0x07	; 7
   1508c:	11 09       	sbc	r17, r1
   1508e:	cf 3f       	cpi	r28, 0xFF	; 255
   15090:	af ef       	ldi	r26, 0xFF	; 255
   15092:	da 07       	cpc	r29, r26
   15094:	71 f6       	brne	.-100    	; 0x15032 <amigo_init+0x1c>
   15096:	cd b7       	in	r28, 0x3d	; 61
   15098:	de b7       	in	r29, 0x3e	; 62
   1509a:	e6 e0       	ldi	r30, 0x06	; 6
   1509c:	0c 94 b7 e9 	jmp	0x1d36e	; 0x1d36e <__epilogue_restores__+0x18>

000150a0 <amigo_request_logical_address>:
   150a0:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   150a4:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   150a8:	15 86       	std	Z+13, r1	; 0x0d
   150aa:	83 81       	ldd	r24, Z+3	; 0x03
   150ac:	86 87       	std	Z+14, r24	; 0x0e
   150ae:	84 81       	ldd	r24, Z+4	; 0x04
   150b0:	87 87       	std	Z+15, r24	; 0x0f
   150b2:	85 81       	ldd	r24, Z+5	; 0x05
   150b4:	80 8b       	std	Z+16, r24	; 0x10
   150b6:	80 e0       	ldi	r24, 0x00	; 0
   150b8:	90 e0       	ldi	r25, 0x00	; 0
   150ba:	08 95       	ret

000150bc <amigo_request_status>:
   150bc:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   150c0:	85 ff       	sbrs	r24, 5
   150c2:	0a c0       	rjmp	.+20     	; 0x150d8 <amigo_request_status+0x1c>
   150c4:	82 e7       	ldi	r24, 0x72	; 114
   150c6:	98 e2       	ldi	r25, 0x28	; 40
   150c8:	1f 92       	push	r1
   150ca:	9f 93       	push	r25
   150cc:	8f 93       	push	r24
   150ce:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   150d2:	0f 90       	pop	r0
   150d4:	0f 90       	pop	r0
   150d6:	0f 90       	pop	r0
   150d8:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   150dc:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   150e0:	11 86       	std	Z+9, r1	; 0x09
   150e2:	81 81       	ldd	r24, Z+1	; 0x01
   150e4:	82 87       	std	Z+10, r24	; 0x0a
   150e6:	8d e0       	ldi	r24, 0x0D	; 13
   150e8:	83 87       	std	Z+11, r24	; 0x0b
   150ea:	14 86       	std	Z+12, r1	; 0x0c
   150ec:	0e 94 f2 72 	call	0xe5e4	; 0xe5e4 <mmc_wp_status>
   150f0:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   150f4:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   150f8:	89 2b       	or	r24, r25
   150fa:	19 f0       	breq	.+6      	; 0x15102 <amigo_request_status+0x46>
   150fc:	84 85       	ldd	r24, Z+12	; 0x0c
   150fe:	80 66       	ori	r24, 0x60	; 96
   15100:	84 87       	std	Z+12, r24	; 0x0c
   15102:	86 81       	ldd	r24, Z+6	; 0x06
   15104:	82 30       	cpi	r24, 0x02	; 2
   15106:	31 f4       	brne	.+12     	; 0x15114 <amigo_request_status+0x58>
   15108:	83 e1       	ldi	r24, 0x13	; 19
   1510a:	81 87       	std	Z+9, r24	; 0x09
   1510c:	84 85       	ldd	r24, Z+12	; 0x0c
   1510e:	88 60       	ori	r24, 0x08	; 8
   15110:	84 87       	std	Z+12, r24	; 0x0c
   15112:	21 c0       	rjmp	.+66     	; 0x15156 <amigo_request_status+0x9a>
   15114:	27 81       	ldd	r18, Z+7	; 0x07
   15116:	30 85       	ldd	r19, Z+8	; 0x08
   15118:	21 15       	cp	r18, r1
   1511a:	31 05       	cpc	r19, r1
   1511c:	11 f4       	brne	.+4      	; 0x15122 <amigo_request_status+0x66>
   1511e:	81 30       	cpi	r24, 0x01	; 1
   15120:	d1 f4       	brne	.+52     	; 0x15156 <amigo_request_status+0x9a>
   15122:	26 fd       	sbrc	r18, 6
   15124:	0c c0       	rjmp	.+24     	; 0x1513e <amigo_request_status+0x82>
   15126:	25 ff       	sbrs	r18, 5
   15128:	03 c0       	rjmp	.+6      	; 0x15130 <amigo_request_status+0x74>
   1512a:	8a e0       	ldi	r24, 0x0A	; 10
   1512c:	81 87       	std	Z+9, r24	; 0x09
   1512e:	0d c0       	rjmp	.+26     	; 0x1514a <amigo_request_status+0x8e>
   15130:	84 85       	ldd	r24, Z+12	; 0x0c
   15132:	24 ff       	sbrs	r18, 4
   15134:	02 c0       	rjmp	.+4      	; 0x1513a <amigo_request_status+0x7e>
   15136:	83 60       	ori	r24, 0x03	; 3
   15138:	07 c0       	rjmp	.+14     	; 0x15148 <amigo_request_status+0x8c>
   1513a:	21 ff       	sbrs	r18, 1
   1513c:	02 c0       	rjmp	.+4      	; 0x15142 <amigo_request_status+0x86>
   1513e:	83 e1       	ldi	r24, 0x13	; 19
   15140:	f5 cf       	rjmp	.-22     	; 0x1512c <amigo_request_status+0x70>
   15142:	22 ff       	sbrs	r18, 2
   15144:	02 c0       	rjmp	.+4      	; 0x1514a <amigo_request_status+0x8e>
   15146:	84 60       	ori	r24, 0x04	; 4
   15148:	84 87       	std	Z+12, r24	; 0x0c
   1514a:	84 85       	ldd	r24, Z+12	; 0x0c
   1514c:	80 61       	ori	r24, 0x10	; 16
   1514e:	84 87       	std	Z+12, r24	; 0x0c
   15150:	83 85       	ldd	r24, Z+11	; 0x0b
   15152:	80 68       	ori	r24, 0x80	; 128
   15154:	83 87       	std	Z+11, r24	; 0x0b
   15156:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   1515a:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   1515e:	81 81       	ldd	r24, Z+1	; 0x01
{
#ifdef ESP8266
    hspi_RX((uint8_t *) data,count);
#endif
#ifdef AVR
    SPI0_RX((uint8_t *)data,count);
   15160:	90 e0       	ldi	r25, 0x00	; 0
   15162:	0e 94 4c 8c 	call	0x11898	; 0x11898 <gpib_enable_PPR>
   15166:	80 e0       	ldi	r24, 0x00	; 0
   15168:	90 e0       	ldi	r25, 0x00	; 0
   1516a:	08 95       	ret

0001516c <amigo_send_logical_address>:
   1516c:	a2 e0       	ldi	r26, 0x02	; 2
   1516e:	b0 e0       	ldi	r27, 0x00	; 0
   15170:	ec eb       	ldi	r30, 0xBC	; 188
   15172:	f8 ea       	ldi	r31, 0xA8	; 168
   15174:	0c 94 9f e9 	jmp	0x1d33e	; 0x1d33e <__prologue_saves__+0x20>
   15178:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1517c:	85 ff       	sbrs	r24, 5
   1517e:	0a c0       	rjmp	.+20     	; 0x15194 <amigo_send_logical_address+0x28>
   15180:	84 e5       	ldi	r24, 0x54	; 84
   15182:	98 e2       	ldi	r25, 0x28	; 40
   15184:	1f 92       	push	r1
   15186:	9f 93       	push	r25
   15188:	8f 93       	push	r24
   1518a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1518e:	0f 90       	pop	r0
   15190:	0f 90       	pop	r0
   15192:	0f 90       	pop	r0
   15194:	80 e0       	ldi	r24, 0x00	; 0
   15196:	91 e0       	ldi	r25, 0x01	; 1
   15198:	9a 83       	std	Y+2, r25	; 0x02
   1519a:	89 83       	std	Y+1, r24	; 0x01
   1519c:	80 91 e6 19 	lds	r24, 0x19E6	; 0x8019e6 <AMIGOs>
   151a0:	90 91 e7 19 	lds	r25, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   151a4:	ae 01       	movw	r20, r28
   151a6:	4f 5f       	subi	r20, 0xFF	; 255
   151a8:	5f 4f       	sbci	r21, 0xFF	; 255
   151aa:	64 e0       	ldi	r22, 0x04	; 4
   151ac:	70 e0       	ldi	r23, 0x00	; 0
   151ae:	0d 96       	adiw	r24, 0x0d	; 13
   151b0:	0e 94 9c 91 	call	0x12338	; 0x12338 <gpib_write_str>
   151b4:	29 81       	ldd	r18, Y+1	; 0x01
   151b6:	3a 81       	ldd	r19, Y+2	; 0x02
   151b8:	22 27       	eor	r18, r18
   151ba:	30 7d       	andi	r19, 0xD0	; 208
   151bc:	23 2b       	or	r18, r19
   151be:	49 f0       	breq	.+18     	; 0x151d2 <amigo_send_logical_address+0x66>
   151c0:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   151c4:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   151c8:	27 81       	ldd	r18, Z+7	; 0x07
   151ca:	30 85       	ldd	r19, Z+8	; 0x08
   151cc:	20 62       	ori	r18, 0x20	; 32
   151ce:	30 87       	std	Z+8, r19	; 0x08
   151d0:	27 83       	std	Z+7, r18	; 0x07
   151d2:	04 97       	sbiw	r24, 0x04	; 4
   151d4:	c9 f0       	breq	.+50     	; 0x15208 <amigo_send_logical_address+0x9c>
   151d6:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   151da:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   151de:	87 81       	ldd	r24, Z+7	; 0x07
   151e0:	90 85       	ldd	r25, Z+8	; 0x08
   151e2:	80 62       	ori	r24, 0x20	; 32
   151e4:	90 87       	std	Z+8, r25	; 0x08
   151e6:	87 83       	std	Z+7, r24	; 0x07
   151e8:	81 e0       	ldi	r24, 0x01	; 1
   151ea:	86 83       	std	Z+6, r24	; 0x06
   151ec:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   151f0:	80 ff       	sbrs	r24, 0
   151f2:	0a c0       	rjmp	.+20     	; 0x15208 <amigo_send_logical_address+0x9c>
   151f4:	8a e3       	ldi	r24, 0x3A	; 58
   151f6:	98 e2       	ldi	r25, 0x28	; 40
   151f8:	1f 92       	push	r1
   151fa:	9f 93       	push	r25
   151fc:	8f 93       	push	r24
   151fe:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15202:	0f 90       	pop	r0
   15204:	0f 90       	pop	r0
   15206:	0f 90       	pop	r0
   15208:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   1520c:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   15210:	81 81       	ldd	r24, Z+1	; 0x01
   15212:	90 e0       	ldi	r25, 0x00	; 0
   15214:	0e 94 4c 8c 	call	0x11898	; 0x11898 <gpib_enable_PPR>
   15218:	89 81       	ldd	r24, Y+1	; 0x01
   1521a:	9a 81       	ldd	r25, Y+2	; 0x02
   1521c:	88 27       	eor	r24, r24
   1521e:	90 7d       	andi	r25, 0xD0	; 208
   15220:	22 96       	adiw	r28, 0x02	; 2
   15222:	e2 e0       	ldi	r30, 0x02	; 2
   15224:	0c 94 bb e9 	jmp	0x1d376	; 0x1d376 <__epilogue_restores__+0x20>

00015228 <amigo_send_status>:
   15228:	a2 e0       	ldi	r26, 0x02	; 2
   1522a:	b0 e0       	ldi	r27, 0x00	; 0
   1522c:	ea e1       	ldi	r30, 0x1A	; 26
   1522e:	f9 ea       	ldi	r31, 0xA9	; 169
   15230:	0c 94 9f e9 	jmp	0x1d33e	; 0x1d33e <__prologue_saves__+0x20>
   15234:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15238:	85 ff       	sbrs	r24, 5
   1523a:	0a c0       	rjmp	.+20     	; 0x15250 <amigo_send_status+0x28>
   1523c:	85 e2       	ldi	r24, 0x25	; 37
   1523e:	98 e2       	ldi	r25, 0x28	; 40
   15240:	1f 92       	push	r1
   15242:	9f 93       	push	r25
   15244:	8f 93       	push	r24
   15246:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1524a:	0f 90       	pop	r0
   1524c:	0f 90       	pop	r0
   1524e:	0f 90       	pop	r0
   15250:	80 e0       	ldi	r24, 0x00	; 0
   15252:	91 e0       	ldi	r25, 0x01	; 1
   15254:	9a 83       	std	Y+2, r25	; 0x02
   15256:	89 83       	std	Y+1, r24	; 0x01
   15258:	80 91 e6 19 	lds	r24, 0x19E6	; 0x8019e6 <AMIGOs>
   1525c:	90 91 e7 19 	lds	r25, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   15260:	ae 01       	movw	r20, r28
   15262:	4f 5f       	subi	r20, 0xFF	; 255
   15264:	5f 4f       	sbci	r21, 0xFF	; 255
   15266:	64 e0       	ldi	r22, 0x04	; 4
   15268:	70 e0       	ldi	r23, 0x00	; 0
   1526a:	09 96       	adiw	r24, 0x09	; 9
   1526c:	0e 94 9c 91 	call	0x12338	; 0x12338 <gpib_write_str>
   15270:	29 81       	ldd	r18, Y+1	; 0x01
   15272:	3a 81       	ldd	r19, Y+2	; 0x02
   15274:	22 27       	eor	r18, r18
   15276:	30 7d       	andi	r19, 0xD0	; 208
   15278:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   1527c:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   15280:	23 2b       	or	r18, r19
   15282:	29 f0       	breq	.+10     	; 0x1528e <amigo_send_status+0x66>
   15284:	27 81       	ldd	r18, Z+7	; 0x07
   15286:	30 85       	ldd	r19, Z+8	; 0x08
   15288:	20 62       	ori	r18, 0x20	; 32
   1528a:	30 87       	std	Z+8, r19	; 0x08
   1528c:	27 83       	std	Z+7, r18	; 0x07
   1528e:	04 97       	sbiw	r24, 0x04	; 4
   15290:	b1 f0       	breq	.+44     	; 0x152be <amigo_send_status+0x96>
   15292:	87 81       	ldd	r24, Z+7	; 0x07
   15294:	90 85       	ldd	r25, Z+8	; 0x08
   15296:	80 62       	ori	r24, 0x20	; 32
   15298:	90 87       	std	Z+8, r25	; 0x08
   1529a:	87 83       	std	Z+7, r24	; 0x07
   1529c:	81 e0       	ldi	r24, 0x01	; 1
   1529e:	86 83       	std	Z+6, r24	; 0x06
   152a0:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   152a4:	80 ff       	sbrs	r24, 0
   152a6:	0e c0       	rjmp	.+28     	; 0x152c4 <amigo_send_status+0x9c>
   152a8:	8b e0       	ldi	r24, 0x0B	; 11
   152aa:	98 e2       	ldi	r25, 0x28	; 40
   152ac:	1f 92       	push	r1
   152ae:	9f 93       	push	r25
   152b0:	8f 93       	push	r24
   152b2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   152b6:	0f 90       	pop	r0
   152b8:	0f 90       	pop	r0
   152ba:	0f 90       	pop	r0
   152bc:	03 c0       	rjmp	.+6      	; 0x152c4 <amigo_send_status+0x9c>
   152be:	10 86       	std	Z+8, r1	; 0x08
   152c0:	17 82       	std	Z+7, r1	; 0x07
   152c2:	16 82       	std	Z+6, r1	; 0x06
   152c4:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   152c8:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   152cc:	81 81       	ldd	r24, Z+1	; 0x01
   152ce:	90 e0       	ldi	r25, 0x00	; 0
   152d0:	0e 94 4c 8c 	call	0x11898	; 0x11898 <gpib_enable_PPR>
   152d4:	89 81       	ldd	r24, Y+1	; 0x01
   152d6:	9a 81       	ldd	r25, Y+2	; 0x02
   152d8:	88 27       	eor	r24, r24
   152da:	90 7d       	andi	r25, 0xD0	; 208
   152dc:	22 96       	adiw	r28, 0x02	; 2
   152de:	e2 e0       	ldi	r30, 0x02	; 2
   152e0:	0c 94 bb e9 	jmp	0x1d376	; 0x1d376 <__epilogue_restores__+0x20>

000152e4 <amigo_increment>:
   152e4:	a1 e1       	ldi	r26, 0x11	; 17
   152e6:	b0 e0       	ldi	r27, 0x00	; 0
   152e8:	e8 e7       	ldi	r30, 0x78	; 120
   152ea:	f9 ea       	ldi	r31, 0xA9	; 169
   152ec:	0c 94 9f e9 	jmp	0x1d33e	; 0x1d33e <__prologue_saves__+0x20>
   152f0:	bc 01       	movw	r22, r24
   152f2:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   152f6:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   152fa:	91 e1       	ldi	r25, 0x11	; 17
   152fc:	de 01       	movw	r26, r28
   152fe:	11 96       	adiw	r26, 0x01	; 1
   15300:	01 90       	ld	r0, Z+
   15302:	0d 92       	st	X+, r0
   15304:	9a 95       	dec	r25
   15306:	e1 f7       	brne	.-8      	; 0x15300 <amigo_increment+0x1c>
   15308:	9e 81       	ldd	r25, Y+6	; 0x06
   1530a:	9f 5f       	subi	r25, 0xFF	; 255
   1530c:	9e 83       	std	Y+6, r25	; 0x06
   1530e:	ce 01       	movw	r24, r28
   15310:	01 96       	adiw	r24, 0x01	; 1
   15312:	c2 dd       	rcall	.-1148   	; 0x14e98 <amigo_overflow_check>
   15314:	00 97       	sbiw	r24, 0x00	; 0
   15316:	59 f4       	brne	.+22     	; 0x1532e <amigo_increment+0x4a>
   15318:	a0 91 e6 19 	lds	r26, 0x19E6	; 0x8019e6 <AMIGOs>
   1531c:	b0 91 e7 19 	lds	r27, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   15320:	21 e1       	ldi	r18, 0x11	; 17
   15322:	fe 01       	movw	r30, r28
   15324:	31 96       	adiw	r30, 0x01	; 1
   15326:	01 90       	ld	r0, Z+
   15328:	0d 92       	st	X+, r0
   1532a:	2a 95       	dec	r18
   1532c:	e1 f7       	brne	.-8      	; 0x15326 <amigo_increment+0x42>
   1532e:	61 96       	adiw	r28, 0x11	; 17
   15330:	e2 e0       	ldi	r30, 0x02	; 2
   15332:	0c 94 bb e9 	jmp	0x1d376	; 0x1d376 <__epilogue_restores__+0x20>

00015336 <amigo_seek>:
   15336:	0f 93       	push	r16
   15338:	1f 93       	push	r17
   1533a:	cf 93       	push	r28
   1533c:	df 93       	push	r29
   1533e:	ec 01       	movw	r28, r24
   15340:	65 e7       	ldi	r22, 0x75	; 117
   15342:	73 e1       	ldi	r23, 0x13	; 19
   15344:	a9 dd       	rcall	.-1198   	; 0x14e98 <amigo_overflow_check>
   15346:	8c 01       	movw	r16, r24
   15348:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   1534c:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   15350:	89 2b       	or	r24, r25
   15352:	41 f0       	breq	.+16     	; 0x15364 <amigo_seek+0x2e>
   15354:	81 e0       	ldi	r24, 0x01	; 1
   15356:	86 83       	std	Z+6, r24	; 0x06
   15358:	87 81       	ldd	r24, Z+7	; 0x07
   1535a:	90 85       	ldd	r25, Z+8	; 0x08
   1535c:	84 60       	ori	r24, 0x04	; 4
   1535e:	90 87       	std	Z+8, r25	; 0x08
   15360:	87 83       	std	Z+7, r24	; 0x07
   15362:	06 c0       	rjmp	.+12     	; 0x15370 <amigo_seek+0x3a>
   15364:	8d 81       	ldd	r24, Y+5	; 0x05
   15366:	85 83       	std	Z+5, r24	; 0x05
   15368:	8c 81       	ldd	r24, Y+4	; 0x04
   1536a:	84 83       	std	Z+4, r24	; 0x04
   1536c:	8b 81       	ldd	r24, Y+3	; 0x03
   1536e:	83 83       	std	Z+3, r24	; 0x03
   15370:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   15374:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   15378:	81 81       	ldd	r24, Z+1	; 0x01
   1537a:	90 e0       	ldi	r25, 0x00	; 0
   1537c:	0e 94 4c 8c 	call	0x11898	; 0x11898 <gpib_enable_PPR>
   15380:	c8 01       	movw	r24, r16
   15382:	df 91       	pop	r29
   15384:	cf 91       	pop	r28
   15386:	1f 91       	pop	r17
   15388:	0f 91       	pop	r16
   1538a:	08 95       	ret

0001538c <amigo_verify>:
   1538c:	8f 92       	push	r8
   1538e:	9f 92       	push	r9
   15390:	af 92       	push	r10
   15392:	bf 92       	push	r11
   15394:	ef 92       	push	r14
   15396:	ff 92       	push	r15
   15398:	0f 93       	push	r16
   1539a:	1f 93       	push	r17
   1539c:	cf 93       	push	r28
   1539e:	df 93       	push	r29
   153a0:	7c 01       	movw	r14, r24
   153a2:	6a e7       	ldi	r22, 0x7A	; 122
   153a4:	73 e1       	ldi	r23, 0x13	; 19
   153a6:	80 91 e6 19 	lds	r24, 0x19E6	; 0x8019e6 <AMIGOs>
   153aa:	90 91 e7 19 	lds	r25, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   153ae:	c4 dd       	rcall	.-1144   	; 0x14f38 <amigo_chs_to_logical>
   153b0:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   153b4:	25 ff       	sbrs	r18, 5
   153b6:	15 c0       	rjmp	.+42     	; 0x153e2 <amigo_verify+0x56>
   153b8:	ff 92       	push	r15
   153ba:	ef 92       	push	r14
   153bc:	9f 93       	push	r25
   153be:	8f 93       	push	r24
   153c0:	7f 93       	push	r23
   153c2:	6f 93       	push	r22
   153c4:	8a ec       	ldi	r24, 0xCA	; 202
   153c6:	97 e2       	ldi	r25, 0x27	; 39
   153c8:	1f 92       	push	r1
   153ca:	9f 93       	push	r25
   153cc:	8f 93       	push	r24
   153ce:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   153d2:	8d b7       	in	r24, 0x3d	; 61
   153d4:	9e b7       	in	r25, 0x3e	; 62
   153d6:	09 96       	adiw	r24, 0x09	; 9
   153d8:	0f b6       	in	r0, 0x3f	; 63
   153da:	f8 94       	cli
   153dc:	9e bf       	out	0x3e, r25	; 62
   153de:	0f be       	out	0x3f, r0	; 63
   153e0:	8d bf       	out	0x3d, r24	; 61
   153e2:	e7 01       	movw	r28, r14
   153e4:	20 97       	sbiw	r28, 0x00	; 0
   153e6:	09 f4       	brne	.+2      	; 0x153ea <amigo_verify+0x5e>
   153e8:	49 c0       	rjmp	.+146    	; 0x1547c <amigo_verify+0xf0>
   153ea:	67 e8       	ldi	r22, 0x87	; 135
   153ec:	73 e1       	ldi	r23, 0x13	; 19
   153ee:	80 91 e6 19 	lds	r24, 0x19E6	; 0x8019e6 <AMIGOs>
   153f2:	90 91 e7 19 	lds	r25, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   153f6:	a0 dd       	rcall	.-1216   	; 0x14f38 <amigo_chs_to_logical>
   153f8:	4b 01       	movw	r8, r22
   153fa:	5c 01       	movw	r10, r24
   153fc:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15400:	86 fd       	sbrc	r24, 6
   15402:	0e 94 94 8b 	call	0x11728	; 0x11728 <gpib_timer_elapsed_begin>
   15406:	80 91 e8 19 	lds	r24, 0x19E8	; 0x8019e8 <AMIGOp>
   1540a:	90 91 e9 19 	lds	r25, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   1540e:	e0 90 e6 19 	lds	r14, 0x19E6	; 0x8019e6 <AMIGOs>
   15412:	f0 90 e7 19 	lds	r15, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   15416:	e7 e0       	ldi	r30, 0x07	; 7
   15418:	ee 0e       	add	r14, r30
   1541a:	f1 1c       	adc	r15, r1
   1541c:	fc 01       	movw	r30, r24
   1541e:	05 a1       	ldd	r16, Z+37	; 0x25
   15420:	16 a1       	ldd	r17, Z+38	; 0x26
   15422:	25 e3       	ldi	r18, 0x35	; 53
   15424:	3d e1       	ldi	r19, 0x1D	; 29
   15426:	b5 01       	movw	r22, r10
   15428:	a4 01       	movw	r20, r8
   1542a:	02 96       	adiw	r24, 0x02	; 2
   1542c:	0e 94 e6 8a 	call	0x115cc	; 0x115cc <dbf_open_read>
   15430:	7c 01       	movw	r14, r24
   15432:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15436:	86 ff       	sbrs	r24, 6
   15438:	04 c0       	rjmp	.+8      	; 0x15442 <amigo_verify+0xb6>
   1543a:	8f e8       	ldi	r24, 0x8F	; 143
   1543c:	9e e0       	ldi	r25, 0x0E	; 14
   1543e:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <gpib_timer_elapsed_end>
   15442:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   15446:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   1544a:	85 a1       	ldd	r24, Z+37	; 0x25
   1544c:	96 a1       	ldd	r25, Z+38	; 0x26
   1544e:	e8 16       	cp	r14, r24
   15450:	f9 06       	cpc	r15, r25
   15452:	61 f0       	breq	.+24     	; 0x1546c <amigo_verify+0xe0>
   15454:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   15458:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   1545c:	81 e0       	ldi	r24, 0x01	; 1
   1545e:	86 83       	std	Z+6, r24	; 0x06
   15460:	87 81       	ldd	r24, Z+7	; 0x07
   15462:	90 85       	ldd	r25, Z+8	; 0x08
   15464:	81 60       	ori	r24, 0x01	; 1
   15466:	90 87       	std	Z+8, r25	; 0x08
   15468:	87 83       	std	Z+7, r24	; 0x07
   1546a:	0b c0       	rjmp	.+22     	; 0x15482 <amigo_verify+0xf6>
   1546c:	8f e8       	ldi	r24, 0x8F	; 143
   1546e:	93 e1       	ldi	r25, 0x13	; 19
   15470:	39 df       	rcall	.-398    	; 0x152e4 <amigo_increment>
   15472:	21 97       	sbiw	r28, 0x01	; 1
   15474:	89 2b       	or	r24, r25
   15476:	09 f4       	brne	.+2      	; 0x1547a <amigo_verify+0xee>
   15478:	b5 cf       	rjmp	.-150    	; 0x153e4 <amigo_verify+0x58>
   1547a:	03 c0       	rjmp	.+6      	; 0x15482 <amigo_verify+0xf6>
   1547c:	c0 e0       	ldi	r28, 0x00	; 0
   1547e:	d0 e0       	ldi	r29, 0x00	; 0
   15480:	02 c0       	rjmp	.+4      	; 0x15486 <amigo_verify+0xfa>
   15482:	c1 e0       	ldi	r28, 0x01	; 1
   15484:	d0 e0       	ldi	r29, 0x00	; 0
   15486:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   1548a:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   1548e:	81 81       	ldd	r24, Z+1	; 0x01
   15490:	90 e0       	ldi	r25, 0x00	; 0
   15492:	0e 94 4c 8c 	call	0x11898	; 0x11898 <gpib_enable_PPR>
   15496:	ce 01       	movw	r24, r28
   15498:	df 91       	pop	r29
   1549a:	cf 91       	pop	r28
   1549c:	1f 91       	pop	r17
   1549e:	0f 91       	pop	r16
   154a0:	ff 90       	pop	r15
   154a2:	ef 90       	pop	r14
   154a4:	bf 90       	pop	r11
   154a6:	af 90       	pop	r10
   154a8:	9f 90       	pop	r9
   154aa:	8f 90       	pop	r8
   154ac:	08 95       	ret

000154ae <amigo_format>:
   154ae:	ef 92       	push	r14
   154b0:	ff 92       	push	r15
   154b2:	0f 93       	push	r16
   154b4:	1f 93       	push	r17
   154b6:	cf 93       	push	r28
   154b8:	df 93       	push	r29
   154ba:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   154be:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   154c2:	15 82       	std	Z+5, r1	; 0x05
   154c4:	14 82       	std	Z+4, r1	; 0x04
   154c6:	13 82       	std	Z+3, r1	; 0x03
   154c8:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   154cc:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   154d0:	45 a1       	ldd	r20, Z+37	; 0x25
   154d2:	56 a1       	ldd	r21, Z+38	; 0x26
   154d4:	68 2f       	mov	r22, r24
   154d6:	70 e0       	ldi	r23, 0x00	; 0
   154d8:	85 e3       	ldi	r24, 0x35	; 53
   154da:	9d e1       	ldi	r25, 0x1D	; 29
   154dc:	0e 94 6a ee 	call	0x1dcd4	; 0x1dcd4 <memset>
   154e0:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   154e4:	85 ff       	sbrs	r24, 5
   154e6:	0a c0       	rjmp	.+20     	; 0x154fc <amigo_format+0x4e>
   154e8:	8f e8       	ldi	r24, 0x8F	; 143
   154ea:	97 e2       	ldi	r25, 0x27	; 39
   154ec:	1f 92       	push	r1
   154ee:	9f 93       	push	r25
   154f0:	8f 93       	push	r24
   154f2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   154f6:	0f 90       	pop	r0
   154f8:	0f 90       	pop	r0
   154fa:	0f 90       	pop	r0
   154fc:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15500:	86 fd       	sbrc	r24, 6
   15502:	0e 94 94 8b 	call	0x11728	; 0x11728 <gpib_timer_elapsed_begin>
   15506:	66 e9       	ldi	r22, 0x96	; 150
   15508:	73 e1       	ldi	r23, 0x13	; 19
   1550a:	80 91 e6 19 	lds	r24, 0x19E6	; 0x8019e6 <AMIGOs>
   1550e:	90 91 e7 19 	lds	r25, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   15512:	12 dd       	rcall	.-1500   	; 0x14f38 <amigo_chs_to_logical>
   15514:	ab 01       	movw	r20, r22
   15516:	bc 01       	movw	r22, r24
   15518:	80 91 e8 19 	lds	r24, 0x19E8	; 0x8019e8 <AMIGOp>
   1551c:	90 91 e9 19 	lds	r25, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   15520:	e0 90 e6 19 	lds	r14, 0x19E6	; 0x8019e6 <AMIGOs>
   15524:	f0 90 e7 19 	lds	r15, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   15528:	27 e0       	ldi	r18, 0x07	; 7
   1552a:	e2 0e       	add	r14, r18
   1552c:	f1 1c       	adc	r15, r1
   1552e:	fc 01       	movw	r30, r24
   15530:	05 a1       	ldd	r16, Z+37	; 0x25
   15532:	16 a1       	ldd	r17, Z+38	; 0x26
   15534:	25 e3       	ldi	r18, 0x35	; 53
   15536:	3d e1       	ldi	r19, 0x1D	; 29
   15538:	02 96       	adiw	r24, 0x02	; 2
   1553a:	0e 94 3d 8b 	call	0x1167a	; 0x1167a <dbf_open_write>
   1553e:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   15542:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   15546:	25 a1       	ldd	r18, Z+37	; 0x25
   15548:	36 a1       	ldd	r19, Z+38	; 0x26
   1554a:	82 17       	cp	r24, r18
   1554c:	93 07       	cpc	r25, r19
   1554e:	71 f0       	breq	.+28     	; 0x1556c <amigo_format+0xbe>
   15550:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   15554:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   15558:	87 81       	ldd	r24, Z+7	; 0x07
   1555a:	90 85       	ldd	r25, Z+8	; 0x08
   1555c:	82 60       	ori	r24, 0x02	; 2
   1555e:	90 87       	std	Z+8, r25	; 0x08
   15560:	87 83       	std	Z+7, r24	; 0x07
   15562:	81 e0       	ldi	r24, 0x01	; 1
   15564:	86 83       	std	Z+6, r24	; 0x06
   15566:	c1 e0       	ldi	r28, 0x01	; 1
   15568:	d0 e0       	ldi	r29, 0x00	; 0
   1556a:	0f c0       	rjmp	.+30     	; 0x1558a <amigo_format+0xdc>
   1556c:	80 e0       	ldi	r24, 0x00	; 0
   1556e:	90 e0       	ldi	r25, 0x00	; 0
   15570:	b9 de       	rcall	.-654    	; 0x152e4 <amigo_increment>
   15572:	89 2b       	or	r24, r25
   15574:	41 f2       	breq	.-112    	; 0x15506 <amigo_format+0x58>
   15576:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   1557a:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   1557e:	15 82       	std	Z+5, r1	; 0x05
   15580:	14 82       	std	Z+4, r1	; 0x04
   15582:	13 82       	std	Z+3, r1	; 0x03
   15584:	16 82       	std	Z+6, r1	; 0x06
   15586:	c0 e0       	ldi	r28, 0x00	; 0
   15588:	d0 e0       	ldi	r29, 0x00	; 0
   1558a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1558e:	86 ff       	sbrs	r24, 6
   15590:	04 c0       	rjmp	.+8      	; 0x1559a <amigo_format+0xec>
   15592:	86 e9       	ldi	r24, 0x96	; 150
   15594:	93 e1       	ldi	r25, 0x13	; 19
   15596:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <gpib_timer_elapsed_end>
   1559a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1559e:	85 ff       	sbrs	r24, 5
   155a0:	0a c0       	rjmp	.+20     	; 0x155b6 <amigo_format+0x108>
   155a2:	8a e7       	ldi	r24, 0x7A	; 122
   155a4:	97 e2       	ldi	r25, 0x27	; 39
   155a6:	1f 92       	push	r1
   155a8:	9f 93       	push	r25
   155aa:	8f 93       	push	r24
   155ac:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   155b0:	0f 90       	pop	r0
   155b2:	0f 90       	pop	r0
   155b4:	0f 90       	pop	r0
   155b6:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   155ba:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   155be:	81 81       	ldd	r24, Z+1	; 0x01
   155c0:	90 e0       	ldi	r25, 0x00	; 0
   155c2:	0e 94 4c 8c 	call	0x11898	; 0x11898 <gpib_enable_PPR>
   155c6:	ce 01       	movw	r24, r28
   155c8:	cd b7       	in	r28, 0x3d	; 61
   155ca:	de b7       	in	r29, 0x3e	; 62
   155cc:	e6 e0       	ldi	r30, 0x06	; 6
   155ce:	0c 94 b7 e9 	jmp	0x1d36e	; 0x1d36e <__epilogue_restores__+0x18>

000155d2 <amigo_buffered_read>:
   155d2:	8f 92       	push	r8
   155d4:	9f 92       	push	r9
   155d6:	af 92       	push	r10
   155d8:	bf 92       	push	r11
   155da:	ef 92       	push	r14
   155dc:	ff 92       	push	r15
   155de:	0f 93       	push	r16
   155e0:	1f 93       	push	r17
   155e2:	cf 93       	push	r28
   155e4:	df 93       	push	r29
   155e6:	00 d0       	rcall	.+0      	; 0x155e8 <amigo_buffered_read+0x16>
   155e8:	cd b7       	in	r28, 0x3d	; 61
   155ea:	de b7       	in	r29, 0x3e	; 62
   155ec:	6d e9       	ldi	r22, 0x9D	; 157
   155ee:	73 e1       	ldi	r23, 0x13	; 19
   155f0:	80 91 e6 19 	lds	r24, 0x19E6	; 0x8019e6 <AMIGOs>
   155f4:	90 91 e7 19 	lds	r25, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   155f8:	9f dc       	rcall	.-1730   	; 0x14f38 <amigo_chs_to_logical>
   155fa:	4b 01       	movw	r8, r22
   155fc:	5c 01       	movw	r10, r24
   155fe:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15602:	86 fd       	sbrc	r24, 6
   15604:	0e 94 94 8b 	call	0x11728	; 0x11728 <gpib_timer_elapsed_begin>
   15608:	80 91 e8 19 	lds	r24, 0x19E8	; 0x8019e8 <AMIGOp>
   1560c:	90 91 e9 19 	lds	r25, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   15610:	e0 90 e6 19 	lds	r14, 0x19E6	; 0x8019e6 <AMIGOs>
   15614:	f0 90 e7 19 	lds	r15, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   15618:	27 e0       	ldi	r18, 0x07	; 7
   1561a:	e2 0e       	add	r14, r18
   1561c:	f1 1c       	adc	r15, r1
   1561e:	fc 01       	movw	r30, r24
   15620:	05 a1       	ldd	r16, Z+37	; 0x25
   15622:	16 a1       	ldd	r17, Z+38	; 0x26
   15624:	25 e3       	ldi	r18, 0x35	; 53
   15626:	3d e1       	ldi	r19, 0x1D	; 29
   15628:	b5 01       	movw	r22, r10
   1562a:	a4 01       	movw	r20, r8
   1562c:	02 96       	adiw	r24, 0x02	; 2
   1562e:	0e 94 e6 8a 	call	0x115cc	; 0x115cc <dbf_open_read>
   15632:	7c 01       	movw	r14, r24
   15634:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15638:	86 ff       	sbrs	r24, 6
   1563a:	04 c0       	rjmp	.+8      	; 0x15644 <amigo_buffered_read+0x72>
   1563c:	8f e8       	ldi	r24, 0x8F	; 143
   1563e:	9e e0       	ldi	r25, 0x0E	; 14
   15640:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <gpib_timer_elapsed_end>
   15644:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   15648:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   1564c:	85 a1       	ldd	r24, Z+37	; 0x25
   1564e:	96 a1       	ldd	r25, Z+38	; 0x26
   15650:	e8 16       	cp	r14, r24
   15652:	f9 06       	cpc	r15, r25
   15654:	39 f0       	breq	.+14     	; 0x15664 <amigo_buffered_read+0x92>
   15656:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   1565a:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   1565e:	81 e0       	ldi	r24, 0x01	; 1
   15660:	86 83       	std	Z+6, r24	; 0x06
   15662:	6c c0       	rjmp	.+216    	; 0x1573c <amigo_buffered_read+0x16a>
   15664:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15668:	87 fd       	sbrc	r24, 7
   1566a:	0e 94 94 8b 	call	0x11728	; 0x11728 <gpib_timer_elapsed_begin>
   1566e:	80 e0       	ldi	r24, 0x00	; 0
   15670:	91 e0       	ldi	r25, 0x01	; 1
   15672:	9a 83       	std	Y+2, r25	; 0x02
   15674:	89 83       	std	Y+1, r24	; 0x01
   15676:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   1567a:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   1567e:	65 a1       	ldd	r22, Z+37	; 0x25
   15680:	76 a1       	ldd	r23, Z+38	; 0x26
   15682:	ae 01       	movw	r20, r28
   15684:	4f 5f       	subi	r20, 0xFF	; 255
   15686:	5f 4f       	sbci	r21, 0xFF	; 255
   15688:	85 e3       	ldi	r24, 0x35	; 53
   1568a:	9d e1       	ldi	r25, 0x1D	; 29
   1568c:	0e 94 9c 91 	call	0x12338	; 0x12338 <gpib_write_str>
   15690:	7c 01       	movw	r14, r24
   15692:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15696:	87 ff       	sbrs	r24, 7
   15698:	04 c0       	rjmp	.+8      	; 0x156a2 <amigo_buffered_read+0xd0>
   1569a:	8b ea       	ldi	r24, 0xAB	; 171
   1569c:	93 e1       	ldi	r25, 0x13	; 19
   1569e:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <gpib_timer_elapsed_end>
   156a2:	89 81       	ldd	r24, Y+1	; 0x01
   156a4:	9a 81       	ldd	r25, Y+2	; 0x02
   156a6:	88 27       	eor	r24, r24
   156a8:	90 7d       	andi	r25, 0xD0	; 208
   156aa:	89 2b       	or	r24, r25
   156ac:	49 f4       	brne	.+18     	; 0x156c0 <amigo_buffered_read+0xee>
   156ae:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   156b2:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   156b6:	85 a1       	ldd	r24, Z+37	; 0x25
   156b8:	96 a1       	ldd	r25, Z+38	; 0x26
   156ba:	e8 16       	cp	r14, r24
   156bc:	f9 06       	cpc	r15, r25
   156be:	31 f1       	breq	.+76     	; 0x1570c <amigo_buffered_read+0x13a>
   156c0:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   156c4:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   156c8:	81 e0       	ldi	r24, 0x01	; 1
   156ca:	86 83       	std	Z+6, r24	; 0x06
   156cc:	87 81       	ldd	r24, Z+7	; 0x07
   156ce:	90 85       	ldd	r25, Z+8	; 0x08
   156d0:	80 62       	ori	r24, 0x20	; 32
   156d2:	90 87       	std	Z+8, r25	; 0x08
   156d4:	87 83       	std	Z+7, r24	; 0x07
   156d6:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   156da:	80 ff       	sbrs	r24, 0
   156dc:	0a c0       	rjmp	.+20     	; 0x156f2 <amigo_buffered_read+0x120>
   156de:	80 e6       	ldi	r24, 0x60	; 96
   156e0:	97 e2       	ldi	r25, 0x27	; 39
   156e2:	1f 92       	push	r1
   156e4:	9f 93       	push	r25
   156e6:	8f 93       	push	r24
   156e8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   156ec:	0f 90       	pop	r0
   156ee:	0f 90       	pop	r0
   156f0:	0f 90       	pop	r0
   156f2:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   156f6:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   156fa:	81 81       	ldd	r24, Z+1	; 0x01
   156fc:	90 e0       	ldi	r25, 0x00	; 0
   156fe:	0e 94 4c 8c 	call	0x11898	; 0x11898 <gpib_enable_PPR>
   15702:	89 81       	ldd	r24, Y+1	; 0x01
   15704:	9a 81       	ldd	r25, Y+2	; 0x02
   15706:	88 27       	eor	r24, r24
   15708:	90 7d       	andi	r25, 0xD0	; 208
   1570a:	1a c0       	rjmp	.+52     	; 0x15740 <amigo_buffered_read+0x16e>
   1570c:	8d e9       	ldi	r24, 0x9D	; 157
   1570e:	93 e1       	ldi	r25, 0x13	; 19
   15710:	e9 dd       	rcall	.-1070   	; 0x152e4 <amigo_increment>
   15712:	89 2b       	or	r24, r25
   15714:	59 f0       	breq	.+22     	; 0x1572c <amigo_buffered_read+0x15a>
   15716:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   1571a:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   1571e:	81 e0       	ldi	r24, 0x01	; 1
   15720:	86 83       	std	Z+6, r24	; 0x06
   15722:	87 81       	ldd	r24, Z+7	; 0x07
   15724:	90 85       	ldd	r25, Z+8	; 0x08
   15726:	84 60       	ori	r24, 0x04	; 4
   15728:	90 87       	std	Z+8, r25	; 0x08
   1572a:	87 83       	std	Z+7, r24	; 0x07
   1572c:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   15730:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   15734:	81 81       	ldd	r24, Z+1	; 0x01
   15736:	90 e0       	ldi	r25, 0x00	; 0
   15738:	0e 94 4c 8c 	call	0x11898	; 0x11898 <gpib_enable_PPR>
   1573c:	80 e0       	ldi	r24, 0x00	; 0
   1573e:	90 e0       	ldi	r25, 0x00	; 0
   15740:	0f 90       	pop	r0
   15742:	0f 90       	pop	r0
   15744:	df 91       	pop	r29
   15746:	cf 91       	pop	r28
   15748:	1f 91       	pop	r17
   1574a:	0f 91       	pop	r16
   1574c:	ff 90       	pop	r15
   1574e:	ef 90       	pop	r14
   15750:	bf 90       	pop	r11
   15752:	af 90       	pop	r10
   15754:	9f 90       	pop	r9
   15756:	8f 90       	pop	r8
   15758:	08 95       	ret

0001575a <amigo_buffered_write>:
   1575a:	8f 92       	push	r8
   1575c:	9f 92       	push	r9
   1575e:	af 92       	push	r10
   15760:	bf 92       	push	r11
   15762:	ef 92       	push	r14
   15764:	ff 92       	push	r15
   15766:	0f 93       	push	r16
   15768:	1f 93       	push	r17
   1576a:	cf 93       	push	r28
   1576c:	df 93       	push	r29
   1576e:	00 d0       	rcall	.+0      	; 0x15770 <amigo_buffered_write+0x16>
   15770:	cd b7       	in	r28, 0x3d	; 61
   15772:	de b7       	in	r29, 0x3e	; 62
   15774:	66 eb       	ldi	r22, 0xB6	; 182
   15776:	73 e1       	ldi	r23, 0x13	; 19
   15778:	80 91 e6 19 	lds	r24, 0x19E6	; 0x8019e6 <AMIGOs>
   1577c:	90 91 e7 19 	lds	r25, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   15780:	db db       	rcall	.-2122   	; 0x14f38 <amigo_chs_to_logical>
   15782:	4b 01       	movw	r8, r22
   15784:	5c 01       	movw	r10, r24
   15786:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1578a:	87 fd       	sbrc	r24, 7
   1578c:	0e 94 94 8b 	call	0x11728	; 0x11728 <gpib_timer_elapsed_begin>
   15790:	1a 82       	std	Y+2, r1	; 0x02
   15792:	19 82       	std	Y+1, r1	; 0x01
   15794:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   15798:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   1579c:	65 a1       	ldd	r22, Z+37	; 0x25
   1579e:	76 a1       	ldd	r23, Z+38	; 0x26
   157a0:	ae 01       	movw	r20, r28
   157a2:	4f 5f       	subi	r20, 0xFF	; 255
   157a4:	5f 4f       	sbci	r21, 0xFF	; 255
   157a6:	85 e3       	ldi	r24, 0x35	; 53
   157a8:	9d e1       	ldi	r25, 0x1D	; 29
   157aa:	0e 94 ee 90 	call	0x121dc	; 0x121dc <gpib_read_str>
   157ae:	7c 01       	movw	r14, r24
   157b0:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   157b4:	87 ff       	sbrs	r24, 7
   157b6:	04 c0       	rjmp	.+8      	; 0x157c0 <amigo_buffered_write+0x66>
   157b8:	85 ec       	ldi	r24, 0xC5	; 197
   157ba:	93 e1       	ldi	r25, 0x13	; 19
   157bc:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <gpib_timer_elapsed_end>
   157c0:	89 81       	ldd	r24, Y+1	; 0x01
   157c2:	9a 81       	ldd	r25, Y+2	; 0x02
   157c4:	88 27       	eor	r24, r24
   157c6:	90 7d       	andi	r25, 0xD0	; 208
   157c8:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   157cc:	89 2b       	or	r24, r25
   157ce:	49 f4       	brne	.+18     	; 0x157e2 <amigo_buffered_write+0x88>
   157d0:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   157d4:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   157d8:	85 a1       	ldd	r24, Z+37	; 0x25
   157da:	96 a1       	ldd	r25, Z+38	; 0x26
   157dc:	e8 16       	cp	r14, r24
   157de:	f9 06       	cpc	r15, r25
   157e0:	c1 f0       	breq	.+48     	; 0x15812 <amigo_buffered_write+0xb8>
   157e2:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   157e6:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   157ea:	81 e0       	ldi	r24, 0x01	; 1
   157ec:	86 83       	std	Z+6, r24	; 0x06
   157ee:	87 81       	ldd	r24, Z+7	; 0x07
   157f0:	90 85       	ldd	r25, Z+8	; 0x08
   157f2:	80 62       	ori	r24, 0x20	; 32
   157f4:	90 87       	std	Z+8, r25	; 0x08
   157f6:	87 83       	std	Z+7, r24	; 0x07
   157f8:	20 ff       	sbrs	r18, 0
   157fa:	4e c0       	rjmp	.+156    	; 0x15898 <amigo_buffered_write+0x13e>
   157fc:	81 e4       	ldi	r24, 0x41	; 65
   157fe:	97 e2       	ldi	r25, 0x27	; 39
   15800:	1f 92       	push	r1
   15802:	9f 93       	push	r25
   15804:	8f 93       	push	r24
   15806:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1580a:	0f 90       	pop	r0
   1580c:	0f 90       	pop	r0
   1580e:	0f 90       	pop	r0
   15810:	43 c0       	rjmp	.+134    	; 0x15898 <amigo_buffered_write+0x13e>
   15812:	26 fd       	sbrc	r18, 6
   15814:	0e 94 94 8b 	call	0x11728	; 0x11728 <gpib_timer_elapsed_begin>
   15818:	80 91 e8 19 	lds	r24, 0x19E8	; 0x8019e8 <AMIGOp>
   1581c:	90 91 e9 19 	lds	r25, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   15820:	e0 90 e6 19 	lds	r14, 0x19E6	; 0x8019e6 <AMIGOs>
///
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
   15824:	f0 90 e7 19 	lds	r15, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   15828:	27 e0       	ldi	r18, 0x07	; 7
   1582a:	e2 0e       	add	r14, r18
   1582c:	f1 1c       	adc	r15, r1
   1582e:	fc 01       	movw	r30, r24
   15830:	05 a1       	ldd	r16, Z+37	; 0x25
   15832:	16 a1       	ldd	r17, Z+38	; 0x26
   15834:	25 e3       	ldi	r18, 0x35	; 53
   15836:	3d e1       	ldi	r19, 0x1D	; 29
   15838:	b5 01       	movw	r22, r10
   1583a:	a4 01       	movw	r20, r8
   1583c:	02 96       	adiw	r24, 0x02	; 2
   1583e:	0e 94 3d 8b 	call	0x1167a	; 0x1167a <dbf_open_write>
   15842:	7c 01       	movw	r14, r24
   15844:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15848:	86 ff       	sbrs	r24, 6
   1584a:	04 c0       	rjmp	.+8      	; 0x15854 <amigo_buffered_write+0xfa>
   1584c:	84 e8       	ldi	r24, 0x84	; 132
   1584e:	9e e0       	ldi	r25, 0x0E	; 14
   15850:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <gpib_timer_elapsed_end>
   15854:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   15858:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   1585c:	85 a1       	ldd	r24, Z+37	; 0x25
   1585e:	96 a1       	ldd	r25, Z+38	; 0x26
   15860:	e8 16       	cp	r14, r24
   15862:	f9 06       	cpc	r15, r25
   15864:	49 f0       	breq	.+18     	; 0x15878 <amigo_buffered_write+0x11e>
   15866:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   1586a:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   1586e:	81 e0       	ldi	r24, 0x01	; 1
   15870:	86 83       	std	Z+6, r24	; 0x06
   15872:	80 e0       	ldi	r24, 0x00	; 0
   15874:	90 e0       	ldi	r25, 0x00	; 0
   15876:	1c c0       	rjmp	.+56     	; 0x158b0 <amigo_buffered_write+0x156>
   15878:	86 eb       	ldi	r24, 0xB6	; 182
   1587a:	93 e1       	ldi	r25, 0x13	; 19
   1587c:	33 dd       	rcall	.-1434   	; 0x152e4 <amigo_increment>
   1587e:	89 2b       	or	r24, r25
   15880:	59 f0       	breq	.+22     	; 0x15898 <amigo_buffered_write+0x13e>
   15882:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   15886:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   1588a:	81 e0       	ldi	r24, 0x01	; 1
   1588c:	86 83       	std	Z+6, r24	; 0x06
   1588e:	87 81       	ldd	r24, Z+7	; 0x07
   15890:	90 85       	ldd	r25, Z+8	; 0x08
   15892:	84 60       	ori	r24, 0x04	; 4
   15894:	90 87       	std	Z+8, r25	; 0x08
   15896:	87 83       	std	Z+7, r24	; 0x07
   15898:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   1589c:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   158a0:	81 81       	ldd	r24, Z+1	; 0x01
   158a2:	90 e0       	ldi	r25, 0x00	; 0
   158a4:	0e 94 4c 8c 	call	0x11898	; 0x11898 <gpib_enable_PPR>
   158a8:	89 81       	ldd	r24, Y+1	; 0x01
   158aa:	9a 81       	ldd	r25, Y+2	; 0x02
   158ac:	88 27       	eor	r24, r24
   158ae:	90 7d       	andi	r25, 0xD0	; 208
   158b0:	0f 90       	pop	r0
   158b2:	0f 90       	pop	r0
   158b4:	df 91       	pop	r29
   158b6:	cf 91       	pop	r28
   158b8:	1f 91       	pop	r17
   158ba:	0f 91       	pop	r16
   158bc:	ff 90       	pop	r15
    return ( uart_rx_count( uart ) );
   158be:	ef 90       	pop	r14
}
   158c0:	bf 90       	pop	r11
   158c2:	af 90       	pop	r10
   158c4:	9f 90       	pop	r9
   158c6:	8f 90       	pop	r8
   158c8:	08 95       	ret

000158ca <amigo_cmd_dsj>:
   158ca:	a3 e0       	ldi	r26, 0x03	; 3
   158cc:	b0 e0       	ldi	r27, 0x00	; 0
   158ce:	eb e6       	ldi	r30, 0x6B	; 107
   158d0:	fc ea       	ldi	r31, 0xAC	; 172
   158d2:	0c 94 9f e9 	jmp	0x1d33e	; 0x1d33e <__prologue_saves__+0x20>
   158d6:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   158da:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   158de:	86 81       	ldd	r24, Z+6	; 0x06
   158e0:	8b 83       	std	Y+3, r24	; 0x03
   158e2:	80 e0       	ldi	r24, 0x00	; 0
   158e4:	91 e0       	ldi	r25, 0x01	; 1
   158e6:	9a 83       	std	Y+2, r25	; 0x02
   158e8:	89 83       	std	Y+1, r24	; 0x01
   158ea:	ae 01       	movw	r20, r28
   158ec:	4f 5f       	subi	r20, 0xFF	; 255
   158ee:	5f 4f       	sbci	r21, 0xFF	; 255
   158f0:	61 e0       	ldi	r22, 0x01	; 1
   158f2:	70 e0       	ldi	r23, 0x00	; 0
   158f4:	ce 01       	movw	r24, r28
   158f6:	03 96       	adiw	r24, 0x03	; 3
   158f8:	0e 94 9c 91 	call	0x12338	; 0x12338 <gpib_write_str>
   158fc:	29 81       	ldd	r18, Y+1	; 0x01
   158fe:	3a 81       	ldd	r19, Y+2	; 0x02
   15900:	22 27       	eor	r18, r18
   15902:	30 7d       	andi	r19, 0xD0	; 208
   15904:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   15908:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   1590c:	23 2b       	or	r18, r19
   1590e:	29 f0       	breq	.+10     	; 0x1591a <amigo_cmd_dsj+0x50>
   15910:	27 81       	ldd	r18, Z+7	; 0x07
   15912:	30 85       	ldd	r19, Z+8	; 0x08
   15914:	20 62       	ori	r18, 0x20	; 32
   15916:	30 87       	std	Z+8, r19	; 0x08
   15918:	27 83       	std	Z+7, r18	; 0x07
   1591a:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   1591e:	01 97       	sbiw	r24, 0x01	; 1
   15920:	c1 f0       	breq	.+48     	; 0x15952 <amigo_cmd_dsj+0x88>
   15922:	81 e0       	ldi	r24, 0x01	; 1
   15924:	86 83       	std	Z+6, r24	; 0x06
   15926:	87 81       	ldd	r24, Z+7	; 0x07
   15928:	90 85       	ldd	r25, Z+8	; 0x08
   1592a:	80 62       	ori	r24, 0x20	; 32
   1592c:	90 87       	std	Z+8, r25	; 0x08
   1592e:	87 83       	std	Z+7, r24	; 0x07
   15930:	20 ff       	sbrs	r18, 0
   15932:	0a c0       	rjmp	.+20     	; 0x15948 <amigo_cmd_dsj+0x7e>
   15934:	87 e2       	ldi	r24, 0x27	; 39
   15936:	97 e2       	ldi	r25, 0x27	; 39
   15938:	1f 92       	push	r1
   1593a:	9f 93       	push	r25
   1593c:	8f 93       	push	r24
   1593e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15942:	0f 90       	pop	r0
   15944:	0f 90       	pop	r0
   15946:	0f 90       	pop	r0
   15948:	89 81       	ldd	r24, Y+1	; 0x01
   1594a:	9a 81       	ldd	r25, Y+2	; 0x02
   1594c:	88 27       	eor	r24, r24
   1594e:	90 7d       	andi	r25, 0xD0	; 208
   15950:	1a c0       	rjmp	.+52     	; 0x15986 <amigo_cmd_dsj+0xbc>
   15952:	25 ff       	sbrs	r18, 5
   15954:	0f c0       	rjmp	.+30     	; 0x15974 <amigo_cmd_dsj+0xaa>
   15956:	86 81       	ldd	r24, Z+6	; 0x06
   15958:	1f 92       	push	r1
   1595a:	8f 93       	push	r24
   1595c:	8a e1       	ldi	r24, 0x1A	; 26
   1595e:	97 e2       	ldi	r25, 0x27	; 39
   15960:	1f 92       	push	r1
   15962:	9f 93       	push	r25
   15964:	8f 93       	push	r24
   15966:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1596a:	0f 90       	pop	r0
   1596c:	0f 90       	pop	r0
   1596e:	0f 90       	pop	r0
   15970:	0f 90       	pop	r0
   15972:	0f 90       	pop	r0
   15974:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   15978:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   1597c:	16 82       	std	Z+6, r1	; 0x06
   1597e:	10 86       	std	Z+8, r1	; 0x08
   15980:	17 82       	std	Z+7, r1	; 0x07
   15982:	80 e0       	ldi	r24, 0x00	; 0
   15984:	90 e0       	ldi	r25, 0x00	; 0
   15986:	23 96       	adiw	r28, 0x03	; 3
   15988:	e2 e0       	ldi	r30, 0x02	; 2
   1598a:	0c 94 bb e9 	jmp	0x1d376	; 0x1d376 <__epilogue_restores__+0x20>

0001598e <amigo_cmd_clear>:
   1598e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15992:	85 ff       	sbrs	r24, 5
   15994:	0a c0       	rjmp	.+20     	; 0x159aa <amigo_cmd_clear+0x1c>
   15996:	81 ee       	ldi	r24, 0xE1	; 225
   15998:	96 e2       	ldi	r25, 0x26	; 38
   1599a:	1f 92       	push	r1
   1599c:	9f 93       	push	r25
   1599e:	8f 93       	push	r24
   159a0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   159a4:	0f 90       	pop	r0
   159a6:	0f 90       	pop	r0
   159a8:	0f 90       	pop	r0
   159aa:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   159ae:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   159b2:	15 82       	std	Z+5, r1	; 0x05
   159b4:	14 82       	std	Z+4, r1	; 0x04
   159b6:	13 82       	std	Z+3, r1	; 0x03
   159b8:	16 82       	std	Z+6, r1	; 0x06
   159ba:	10 86       	std	Z+8, r1	; 0x08
   159bc:	17 82       	std	Z+7, r1	; 0x07
   159be:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   159c2:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   159c6:	81 81       	ldd	r24, Z+1	; 0x01
   159c8:	90 e0       	ldi	r25, 0x00	; 0
   159ca:	0e 94 4c 8c 	call	0x11898	; 0x11898 <gpib_enable_PPR>
   159ce:	80 e0       	ldi	r24, 0x00	; 0
   159d0:	90 e0       	ldi	r25, 0x00	; 0
   159d2:	08 95       	ret

000159d4 <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   159d4:	0f 93       	push	r16
   159d6:	1f 93       	push	r17
   159d8:	cf 93       	push	r28
   159da:	df 93       	push	r29
   159dc:	c8 2f       	mov	r28, r24
   159de:	d6 2f       	mov	r29, r22
   159e0:	14 2f       	mov	r17, r20
   159e2:	05 2f       	mov	r16, r21
    if(AMIGO_is_MLA(listening))
   159e4:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   159e8:	90 e0       	ldi	r25, 0x00	; 0
   159ea:	0e 94 77 92 	call	0x124ee	; 0x124ee <AMIGO_is_MLA>
   159ee:	20 91 39 1f 	lds	r18, 0x1F39	; 0x801f39 <talking>
   159f2:	89 2b       	or	r24, r25
   159f4:	19 f1       	breq	.+70     	; 0x15a3c <amigo_todo_op+0x68>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   159f6:	1f 92       	push	r1
   159f8:	2f 93       	push	r18
   159fa:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   159fe:	1f 92       	push	r1
   15a00:	8f 93       	push	r24
   15a02:	0f 93       	push	r16
   15a04:	1f 93       	push	r17
   15a06:	1f 92       	push	r1
   15a08:	df 93       	push	r29
   15a0a:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   15a0e:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   15a12:	80 81       	ld	r24, Z
   15a14:	1f 92       	push	r1
   15a16:	8f 93       	push	r24
   15a18:	1f 92       	push	r1
   15a1a:	cf 93       	push	r28
   15a1c:	8a e7       	ldi	r24, 0x7A	; 122
   15a1e:	96 e2       	ldi	r25, 0x26	; 38
   15a20:	1f 92       	push	r1
   15a22:	9f 93       	push	r25
   15a24:	8f 93       	push	r24
   15a26:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15a2a:	8d b7       	in	r24, 0x3d	; 61
   15a2c:	9e b7       	in	r25, 0x3e	; 62
   15a2e:	0f 96       	adiw	r24, 0x0f	; 15
   15a30:	0f b6       	in	r0, 0x3f	; 63
   15a32:	f8 94       	cli
   15a34:	9e bf       	out	0x3e, r25	; 62
   15a36:	0f be       	out	0x3f, r0	; 63
   15a38:	8d bf       	out	0x3d, r24	; 61
   15a3a:	66 c0       	rjmp	.+204    	; 0x15b08 <amigo_todo_op+0x134>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   15a3c:	82 2f       	mov	r24, r18
   15a3e:	90 e0       	ldi	r25, 0x00	; 0
   15a40:	0e 94 88 92 	call	0x12510	; 0x12510 <AMIGO_is_MTA>
   15a44:	30 91 3b 1f 	lds	r19, 0x1F3B	; 0x801f3b <listening>
   15a48:	20 91 39 1f 	lds	r18, 0x1F39	; 0x801f39 <talking>
   15a4c:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   15a50:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   15a54:	89 2b       	or	r24, r25
   15a56:	e9 f0       	breq	.+58     	; 0x15a92 <amigo_todo_op+0xbe>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   15a58:	1f 92       	push	r1
   15a5a:	2f 93       	push	r18
   15a5c:	1f 92       	push	r1
   15a5e:	3f 93       	push	r19
   15a60:	0f 93       	push	r16
   15a62:	1f 93       	push	r17
   15a64:	1f 92       	push	r1
   15a66:	df 93       	push	r29
   15a68:	80 81       	ld	r24, Z
   15a6a:	1f 92       	push	r1
   15a6c:	8f 93       	push	r24
   15a6e:	1f 92       	push	r1
   15a70:	cf 93       	push	r28
   15a72:	83 e1       	ldi	r24, 0x13	; 19
   15a74:	96 e2       	ldi	r25, 0x26	; 38
   15a76:	1f 92       	push	r1
   15a78:	9f 93       	push	r25
   15a7a:	8f 93       	push	r24
   15a7c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15a80:	8d b7       	in	r24, 0x3d	; 61
   15a82:	9e b7       	in	r25, 0x3e	; 62
   15a84:	0f 96       	adiw	r24, 0x0f	; 15
   15a86:	0f b6       	in	r0, 0x3f	; 63
   15a88:	f8 94       	cli
   15a8a:	9e bf       	out	0x3e, r25	; 62
   15a8c:	0f be       	out	0x3f, r0	; 63
   15a8e:	8d bf       	out	0x3d, r24	; 61
   15a90:	3b c0       	rjmp	.+118    	; 0x15b08 <amigo_todo_op+0x134>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   15a92:	2f 35       	cpi	r18, 0x5F	; 95
   15a94:	e9 f4       	brne	.+58     	; 0x15ad0 <amigo_todo_op+0xfc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   15a96:	1f 92       	push	r1
   15a98:	2f 93       	push	r18
   15a9a:	1f 92       	push	r1
   15a9c:	3f 93       	push	r19
   15a9e:	0f 93       	push	r16
   15aa0:	1f 93       	push	r17
   15aa2:	1f 92       	push	r1
   15aa4:	df 93       	push	r29
   15aa6:	80 81       	ld	r24, Z
   15aa8:	1f 92       	push	r1
   15aaa:	8f 93       	push	r24
   15aac:	1f 92       	push	r1
   15aae:	cf 93       	push	r28
   15ab0:	8c ea       	ldi	r24, 0xAC	; 172
   15ab2:	95 e2       	ldi	r25, 0x25	; 37
   15ab4:	1f 92       	push	r1
   15ab6:	9f 93       	push	r25
   15ab8:	8f 93       	push	r24
   15aba:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15abe:	8d b7       	in	r24, 0x3d	; 61
   15ac0:	9e b7       	in	r25, 0x3e	; 62
   15ac2:	0f 96       	adiw	r24, 0x0f	; 15
   15ac4:	0f b6       	in	r0, 0x3f	; 63
   15ac6:	f8 94       	cli
   15ac8:	9e bf       	out	0x3e, r25	; 62
   15aca:	0f be       	out	0x3f, r0	; 63
   15acc:	8d bf       	out	0x3d, r24	; 61
   15ace:	1c c0       	rjmp	.+56     	; 0x15b08 <amigo_todo_op+0x134>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   15ad0:	1f 92       	push	r1
   15ad2:	2f 93       	push	r18
   15ad4:	1f 92       	push	r1
   15ad6:	3f 93       	push	r19
   15ad8:	0f 93       	push	r16
   15ada:	1f 93       	push	r17
   15adc:	1f 92       	push	r1
   15ade:	df 93       	push	r29
   15ae0:	80 81       	ld	r24, Z
   15ae2:	1f 92       	push	r1
   15ae4:	8f 93       	push	r24
   15ae6:	1f 92       	push	r1
   15ae8:	cf 93       	push	r28
   15aea:	87 e4       	ldi	r24, 0x47	; 71
   15aec:	95 e2       	ldi	r25, 0x25	; 37
   15aee:	1f 92       	push	r1
   15af0:	9f 93       	push	r25
   15af2:	8f 93       	push	r24
   15af4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15af8:	8d b7       	in	r24, 0x3d	; 61
   15afa:	9e b7       	in	r25, 0x3e	; 62
   15afc:	0f 96       	adiw	r24, 0x0f	; 15
   15afe:	0f b6       	in	r0, 0x3f	; 63
   15b00:	f8 94       	cli
   15b02:	9e bf       	out	0x3e, r25	; 62
   15b04:	0f be       	out	0x3f, r0	; 63
   15b06:	8d bf       	out	0x3d, r24	; 61
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   15b08:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   15b0c:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   15b10:	81 81       	ldd	r24, Z+1	; 0x01
   15b12:	90 e0       	ldi	r25, 0x00	; 0
   15b14:	0e 94 4c 8c 	call	0x11898	; 0x11898 <gpib_enable_PPR>
    return(0);
}
   15b18:	80 e0       	ldi	r24, 0x00	; 0
   15b1a:	90 e0       	ldi	r25, 0x00	; 0
   15b1c:	df 91       	pop	r29
   15b1e:	cf 91       	pop	r28
   15b20:	1f 91       	pop	r17
   15b22:	0f 91       	pop	r16
   15b24:	08 95       	ret

00015b26 <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   15b26:	cf 93       	push	r28
   15b28:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   15b2a:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   15b2e:	90 e0       	ldi	r25, 0x00	; 0
   15b30:	0e 94 77 92 	call	0x124ee	; 0x124ee <AMIGO_is_MLA>
   15b34:	20 91 39 1f 	lds	r18, 0x1F39	; 0x801f39 <talking>
   15b38:	89 2b       	or	r24, r25
   15b3a:	f9 f0       	breq	.+62     	; 0x15b7a <amigo_todo+0x54>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   15b3c:	1f 92       	push	r1
   15b3e:	2f 93       	push	r18
   15b40:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   15b44:	1f 92       	push	r1
   15b46:	8f 93       	push	r24
   15b48:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   15b4c:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   15b50:	80 81       	ld	r24, Z
   15b52:	1f 92       	push	r1
   15b54:	8f 93       	push	r24
   15b56:	1f 92       	push	r1
   15b58:	cf 93       	push	r28
   15b5a:	87 ef       	ldi	r24, 0xF7	; 247
   15b5c:	94 e2       	ldi	r25, 0x24	; 36
   15b5e:	1f 92       	push	r1
   15b60:	9f 93       	push	r25
   15b62:	8f 93       	push	r24
   15b64:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15b68:	8d b7       	in	r24, 0x3d	; 61
   15b6a:	9e b7       	in	r25, 0x3e	; 62
   15b6c:	0b 96       	adiw	r24, 0x0b	; 11
   15b6e:	0f b6       	in	r0, 0x3f	; 63
   15b70:	f8 94       	cli
   15b72:	9e bf       	out	0x3e, r25	; 62
   15b74:	0f be       	out	0x3f, r0	; 63
   15b76:	8d bf       	out	0x3d, r24	; 61
   15b78:	5a c0       	rjmp	.+180    	; 0x15c2e <amigo_todo+0x108>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   15b7a:	82 2f       	mov	r24, r18
   15b7c:	90 e0       	ldi	r25, 0x00	; 0
   15b7e:	0e 94 88 92 	call	0x12510	; 0x12510 <AMIGO_is_MTA>
   15b82:	30 91 3b 1f 	lds	r19, 0x1F3B	; 0x801f3b <listening>
   15b86:	20 91 39 1f 	lds	r18, 0x1F39	; 0x801f39 <talking>
   15b8a:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   15b8e:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   15b92:	89 2b       	or	r24, r25
   15b94:	c9 f0       	breq	.+50     	; 0x15bc8 <amigo_todo+0xa2>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   15b96:	1f 92       	push	r1
   15b98:	2f 93       	push	r18
   15b9a:	1f 92       	push	r1
   15b9c:	3f 93       	push	r19
   15b9e:	80 81       	ld	r24, Z
   15ba0:	1f 92       	push	r1
   15ba2:	8f 93       	push	r24
   15ba4:	1f 92       	push	r1
   15ba6:	cf 93       	push	r28
   15ba8:	87 ea       	ldi	r24, 0xA7	; 167
   15baa:	94 e2       	ldi	r25, 0x24	; 36
   15bac:	1f 92       	push	r1
   15bae:	9f 93       	push	r25
   15bb0:	8f 93       	push	r24
   15bb2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15bb6:	8d b7       	in	r24, 0x3d	; 61
   15bb8:	9e b7       	in	r25, 0x3e	; 62
   15bba:	0b 96       	adiw	r24, 0x0b	; 11
   15bbc:	0f b6       	in	r0, 0x3f	; 63
   15bbe:	f8 94       	cli
   15bc0:	9e bf       	out	0x3e, r25	; 62
   15bc2:	0f be       	out	0x3f, r0	; 63
   15bc4:	8d bf       	out	0x3d, r24	; 61
   15bc6:	33 c0       	rjmp	.+102    	; 0x15c2e <amigo_todo+0x108>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   15bc8:	2f 35       	cpi	r18, 0x5F	; 95
   15bca:	c9 f4       	brne	.+50     	; 0x15bfe <amigo_todo+0xd8>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   15bcc:	1f 92       	push	r1
   15bce:	2f 93       	push	r18
   15bd0:	1f 92       	push	r1
   15bd2:	3f 93       	push	r19
   15bd4:	80 81       	ld	r24, Z
   15bd6:	1f 92       	push	r1
   15bd8:	8f 93       	push	r24
   15bda:	1f 92       	push	r1
   15bdc:	cf 93       	push	r28
   15bde:	87 e5       	ldi	r24, 0x57	; 87
   15be0:	94 e2       	ldi	r25, 0x24	; 36
   15be2:	1f 92       	push	r1
   15be4:	9f 93       	push	r25
   15be6:	8f 93       	push	r24
   15be8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15bec:	8d b7       	in	r24, 0x3d	; 61
   15bee:	9e b7       	in	r25, 0x3e	; 62
   15bf0:	0b 96       	adiw	r24, 0x0b	; 11
   15bf2:	0f b6       	in	r0, 0x3f	; 63
   15bf4:	f8 94       	cli
   15bf6:	9e bf       	out	0x3e, r25	; 62
   15bf8:	0f be       	out	0x3f, r0	; 63
   15bfa:	8d bf       	out	0x3d, r24	; 61
   15bfc:	18 c0       	rjmp	.+48     	; 0x15c2e <amigo_todo+0x108>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   15bfe:	1f 92       	push	r1
   15c00:	2f 93       	push	r18
   15c02:	1f 92       	push	r1
   15c04:	3f 93       	push	r19
   15c06:	80 81       	ld	r24, Z
   15c08:	1f 92       	push	r1
   15c0a:	8f 93       	push	r24
   15c0c:	1f 92       	push	r1
   15c0e:	cf 93       	push	r28
   15c10:	86 e0       	ldi	r24, 0x06	; 6
   15c12:	94 e2       	ldi	r25, 0x24	; 36
   15c14:	1f 92       	push	r1
   15c16:	9f 93       	push	r25
   15c18:	8f 93       	push	r24
   15c1a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15c1e:	8d b7       	in	r24, 0x3d	; 61
   15c20:	9e b7       	in	r25, 0x3e	; 62
   15c22:	0b 96       	adiw	r24, 0x0b	; 11
   15c24:	0f b6       	in	r0, 0x3f	; 63
   15c26:	f8 94       	cli
   15c28:	9e bf       	out	0x3e, r25	; 62
   15c2a:	0f be       	out	0x3f, r0	; 63
   15c2c:	8d bf       	out	0x3d, r24	; 61
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   15c2e:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   15c32:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   15c36:	81 81       	ldd	r24, Z+1	; 0x01
   15c38:	90 e0       	ldi	r25, 0x00	; 0
   15c3a:	0e 94 4c 8c 	call	0x11898	; 0x11898 <gpib_enable_PPR>
    return(0);
}
   15c3e:	80 e0       	ldi	r24, 0x00	; 0
   15c40:	90 e0       	ldi	r25, 0x00	; 0
   15c42:	cf 91       	pop	r28
   15c44:	08 95       	ret

00015c46 <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   15c46:	8f 30       	cpi	r24, 0x0F	; 15
   15c48:	29 f0       	breq	.+10     	; 0x15c54 <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   15c4a:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   15c4e:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   15c52:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   15c54:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   15c58:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   15c5c:	81 81       	ldd	r24, Z+1	; 0x01
   15c5e:	88 23       	and	r24, r24
   15c60:	29 f0       	breq	.+10     	; 0x15c6c <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   15c62:	87 81       	ldd	r24, Z+7	; 0x07
   15c64:	90 85       	ldd	r25, Z+8	; 0x08
   15c66:	80 64       	ori	r24, 0x40	; 64
   15c68:	90 87       	std	Z+8, r25	; 0x08
   15c6a:	87 83       	std	Z+7, r24	; 0x07
   15c6c:	08 95       	ret

00015c6e <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   15c6e:	a3 e1       	ldi	r26, 0x13	; 19
   15c70:	b0 e0       	ldi	r27, 0x00	; 0
   15c72:	ed e3       	ldi	r30, 0x3D	; 61
   15c74:	fe ea       	ldi	r31, 0xAE	; 174
   15c76:	0c 94 9b e9 	jmp	0x1d336	; 0x1d336 <__prologue_saves__+0x18>
   15c7a:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & 32)
   15c7c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15c80:	85 ff       	sbrs	r24, 5
   15c82:	16 c0       	rjmp	.+44     	; 0x15cb0 <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   15c84:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <talking>
   15c88:	1f 92       	push	r1
   15c8a:	8f 93       	push	r24
   15c8c:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   15c90:	1f 92       	push	r1
   15c92:	8f 93       	push	r24
   15c94:	ff 92       	push	r15
   15c96:	ef 92       	push	r14
   15c98:	84 ed       	ldi	r24, 0xD4	; 212
   15c9a:	93 e2       	ldi	r25, 0x23	; 35
   15c9c:	1f 92       	push	r1
   15c9e:	9f 93       	push	r25
   15ca0:	8f 93       	push	r24
   15ca2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15ca6:	0f b6       	in	r0, 0x3f	; 63
   15ca8:	f8 94       	cli
   15caa:	de bf       	out	0x3e, r29	; 62
   15cac:	0f be       	out	0x3f, r0	; 63
   15cae:	cd bf       	out	0x3d, r28	; 61
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   15cb0:	9e e7       	ldi	r25, 0x7E	; 126
   15cb2:	e9 16       	cp	r14, r25
   15cb4:	f1 04       	cpc	r15, r1
   15cb6:	f1 f5       	brne	.+124    	; 0x15d34 <Amigo_Command+0xc6>
   15cb8:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <talking>
   15cbc:	90 e0       	ldi	r25, 0x00	; 0
   15cbe:	0e 94 88 92 	call	0x12510	; 0x12510 <AMIGO_is_MTA>
   15cc2:	89 2b       	or	r24, r25
   15cc4:	09 f4       	brne	.+2      	; 0x15cc8 <Amigo_Command+0x5a>
   15cc6:	86 c0       	rjmp	.+268    	; 0x15dd4 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   15cc8:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   15ccc:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   15cd0:	81 81       	ldd	r24, Z+1	; 0x01
   15cd2:	90 e0       	ldi	r25, 0x00	; 0
   15cd4:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_disable_PPR>
        status = EOI_FLAG;
   15cd8:	80 e0       	ldi	r24, 0x00	; 0
   15cda:	91 e0       	ldi	r25, 0x01	; 1
   15cdc:	9b 8b       	std	Y+19, r25	; 0x13
   15cde:	8a 8b       	std	Y+18, r24	; 0x12
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   15ce0:	ae 01       	movw	r20, r28
   15ce2:	4e 5e       	subi	r20, 0xEE	; 238
   15ce4:	5f 4f       	sbci	r21, 0xFF	; 255
   15ce6:	60 e0       	ldi	r22, 0x00	; 0
   15ce8:	72 e0       	ldi	r23, 0x02	; 2
   15cea:	85 e3       	ldi	r24, 0x35	; 53
   15cec:	9d e1       	ldi	r25, 0x1D	; 29
   15cee:	0e 94 9c 91 	call	0x12338	; 0x12338 <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   15cf2:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   15cf6:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   15cfa:	81 81       	ldd	r24, Z+1	; 0x01
   15cfc:	90 e0       	ldi	r25, 0x00	; 0
   15cfe:	0e 94 4c 8c 	call	0x11898	; 0x11898 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   15d02:	8a 89       	ldd	r24, Y+18	; 0x12
   15d04:	9b 89       	ldd	r25, Y+19	; 0x13
   15d06:	88 27       	eor	r24, r24
   15d08:	90 7d       	andi	r25, 0xD0	; 208
   15d0a:	89 2b       	or	r24, r25
   15d0c:	09 f4       	brne	.+2      	; 0x15d10 <Amigo_Command+0xa2>
   15d0e:	89 c2       	rjmp	.+1298   	; 0x16222 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   15d10:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   15d14:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   15d18:	81 e0       	ldi	r24, 0x01	; 1
   15d1a:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   15d1c:	87 81       	ldd	r24, Z+7	; 0x07
   15d1e:	90 85       	ldd	r25, Z+8	; 0x08
   15d20:	80 62       	ori	r24, 0x20	; 32
   15d22:	90 87       	std	Z+8, r25	; 0x08
   15d24:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   15d26:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15d2a:	80 ff       	sbrs	r24, 0
   15d2c:	7a c2       	rjmp	.+1268   	; 0x16222 <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   15d2e:	82 eb       	ldi	r24, 0xB2	; 178
   15d30:	93 e2       	ldi	r25, 0x23	; 35
   15d32:	8e c0       	rjmp	.+284    	; 0x15e50 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   15d34:	8f e7       	ldi	r24, 0x7F	; 127
   15d36:	e8 16       	cp	r14, r24
   15d38:	f1 04       	cpc	r15, r1
   15d3a:	09 f0       	breq	.+2      	; 0x15d3e <Amigo_Command+0xd0>
   15d3c:	4b c0       	rjmp	.+150    	; 0x15dd4 <Amigo_Command+0x166>
   15d3e:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   15d42:	90 e0       	ldi	r25, 0x00	; 0
   15d44:	0e 94 77 92 	call	0x124ee	; 0x124ee <AMIGO_is_MLA>
   15d48:	89 2b       	or	r24, r25
   15d4a:	09 f4       	brne	.+2      	; 0x15d4e <Amigo_Command+0xe0>
   15d4c:	43 c0       	rjmp	.+134    	; 0x15dd4 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   15d4e:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   15d52:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   15d56:	81 81       	ldd	r24, Z+1	; 0x01
   15d58:	90 e0       	ldi	r25, 0x00	; 0
   15d5a:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & 128)
   15d5e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15d62:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   15d64:	0e 94 94 8b 	call	0x11728	; 0x11728 <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   15d68:	80 e0       	ldi	r24, 0x00	; 0
   15d6a:	91 e0       	ldi	r25, 0x01	; 1
   15d6c:	9b 8b       	std	Y+19, r25	; 0x13
   15d6e:	8a 8b       	std	Y+18, r24	; 0x12
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   15d70:	ae 01       	movw	r20, r28
   15d72:	4e 5e       	subi	r20, 0xEE	; 238
   15d74:	5f 4f       	sbci	r21, 0xFF	; 255
   15d76:	60 e0       	ldi	r22, 0x00	; 0
   15d78:	72 e0       	ldi	r23, 0x02	; 2
   15d7a:	85 e3       	ldi	r24, 0x35	; 53
   15d7c:	9d e1       	ldi	r25, 0x1D	; 29
   15d7e:	0e 94 ee 90 	call	0x121dc	; 0x121dc <gpib_read_str>
#if SDEBUG
        if(debuglevel & 128)
   15d82:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15d86:	87 ff       	sbrs	r24, 7
   15d88:	04 c0       	rjmp	.+8      	; 0x15d92 <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read str");
   15d8a:	85 ec       	ldi	r24, 0xC5	; 197
   15d8c:	93 e1       	ldi	r25, 0x13	; 19
   15d8e:	0e 94 a6 8b 	call	0x1174c	; 0x1174c <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   15d92:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   15d96:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   15d9a:	81 81       	ldd	r24, Z+1	; 0x01
   15d9c:	90 e0       	ldi	r25, 0x00	; 0
   15d9e:	0e 94 4c 8c 	call	0x11898	; 0x11898 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   15da2:	8a 89       	ldd	r24, Y+18	; 0x12
   15da4:	9b 89       	ldd	r25, Y+19	; 0x13
   15da6:	88 27       	eor	r24, r24
   15da8:	90 7d       	andi	r25, 0xD0	; 208
   15daa:	89 2b       	or	r24, r25
   15dac:	09 f4       	brne	.+2      	; 0x15db0 <Amigo_Command+0x142>
   15dae:	39 c2       	rjmp	.+1138   	; 0x16222 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   15db0:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   15db4:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   15db8:	81 e0       	ldi	r24, 0x01	; 1
   15dba:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   15dbc:	87 81       	ldd	r24, Z+7	; 0x07
   15dbe:	90 85       	ldd	r25, Z+8	; 0x08
   15dc0:	80 62       	ori	r24, 0x20	; 32
   15dc2:	90 87       	std	Z+8, r25	; 0x08
   15dc4:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   15dc6:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15dca:	80 ff       	sbrs	r24, 0
   15dcc:	2a c2       	rjmp	.+1108   	; 0x16222 <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   15dce:	81 e9       	ldi	r24, 0x91	; 145
   15dd0:	93 e2       	ldi	r25, 0x23	; 35
   15dd2:	3e c0       	rjmp	.+124    	; 0x15e50 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   15dd4:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   15dd8:	90 e0       	ldi	r25, 0x00	; 0
   15dda:	0e 94 77 92 	call	0x124ee	; 0x124ee <AMIGO_is_MLA>
   15dde:	89 2b       	or	r24, r25
   15de0:	19 f4       	brne	.+6      	; 0x15de8 <Amigo_Command+0x17a>
        return(0);
   15de2:	80 e0       	ldi	r24, 0x00	; 0
   15de4:	90 e0       	ldi	r25, 0x00	; 0
   15de6:	25 c2       	rjmp	.+1098   	; 0x16232 <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   15de8:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <talking>
   15dec:	90 e0       	ldi	r25, 0x00	; 0
   15dee:	0e 94 88 92 	call	0x12510	; 0x12510 <AMIGO_is_MTA>
   15df2:	89 2b       	or	r24, r25
   15df4:	b1 f7       	brne	.-20     	; 0x15de2 <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   15df6:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   15dfa:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   15dfe:	81 81       	ldd	r24, Z+1	; 0x01
   15e00:	90 e0       	ldi	r25, 0x00	; 0
   15e02:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_disable_PPR>


///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   15e06:	80 e0       	ldi	r24, 0x00	; 0
   15e08:	91 e0       	ldi	r25, 0x01	; 1
   15e0a:	9b 8b       	std	Y+19, r25	; 0x13
   15e0c:	8a 8b       	std	Y+18, r24	; 0x12
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   15e0e:	ae 01       	movw	r20, r28
   15e10:	4e 5e       	subi	r20, 0xEE	; 238
   15e12:	5f 4f       	sbci	r21, 0xFF	; 255
   15e14:	60 e0       	ldi	r22, 0x00	; 0
   15e16:	72 e0       	ldi	r23, 0x02	; 2
   15e18:	85 e3       	ldi	r24, 0x35	; 53
   15e1a:	9d e1       	ldi	r25, 0x1D	; 29
   15e1c:	0e 94 ee 90 	call	0x121dc	; 0x121dc <gpib_read_str>
   15e20:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   15e22:	8a 89       	ldd	r24, Y+18	; 0x12
   15e24:	9b 89       	ldd	r25, Y+19	; 0x13
   15e26:	88 27       	eor	r24, r24
   15e28:	90 7d       	andi	r25, 0xD0	; 208
   15e2a:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   15e2e:	89 2b       	or	r24, r25
   15e30:	c1 f0       	breq	.+48     	; 0x15e62 <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   15e32:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   15e36:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   15e3a:	81 e0       	ldi	r24, 0x01	; 1
   15e3c:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   15e3e:	87 81       	ldd	r24, Z+7	; 0x07
   15e40:	90 85       	ldd	r25, Z+8	; 0x08
   15e42:	80 62       	ori	r24, 0x20	; 32
   15e44:	90 87       	std	Z+8, r25	; 0x08
   15e46:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & 1)
   15e48:	20 ff       	sbrs	r18, 0
   15e4a:	eb c1       	rjmp	.+982    	; 0x16222 <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   15e4c:	80 e7       	ldi	r24, 0x70	; 112
   15e4e:	93 e2       	ldi	r25, 0x23	; 35
   15e50:	1f 92       	push	r1
   15e52:	9f 93       	push	r25
   15e54:	8f 93       	push	r24
   15e56:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15e5a:	0f 90       	pop	r0
   15e5c:	0f 90       	pop	r0
   15e5e:	0f 90       	pop	r0
   15e60:	e0 c1       	rjmp	.+960    	; 0x16222 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & 32)
   15e62:	25 ff       	sbrs	r18, 5
   15e64:	10 c0       	rjmp	.+32     	; 0x15e86 <Amigo_Command+0x218>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   15e66:	1f 93       	push	r17
   15e68:	0f 93       	push	r16
   15e6a:	ff 92       	push	r15
   15e6c:	ef 92       	push	r14
   15e6e:	81 e4       	ldi	r24, 0x41	; 65
   15e70:	93 e2       	ldi	r25, 0x23	; 35
   15e72:	1f 92       	push	r1
   15e74:	9f 93       	push	r25
   15e76:	8f 93       	push	r24
   15e78:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15e7c:	0f b6       	in	r0, 0x3f	; 63
   15e7e:	f8 94       	cli
   15e80:	de bf       	out	0x3e, r29	; 62
   15e82:	0f be       	out	0x3f, r0	; 63
   15e84:	cd bf       	out	0x3d, r28	; 61
            secondary, len);
#endif
    if(!len)
   15e86:	01 15       	cp	r16, r1
   15e88:	11 05       	cpc	r17, r1
   15e8a:	61 f4       	brne	.+24     	; 0x15ea4 <Amigo_Command+0x236>
    {
        AMIGOs->dsj = 1;
   15e8c:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   15e90:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   15e94:	81 e0       	ldi	r24, 0x01	; 1
   15e96:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   15e98:	87 81       	ldd	r24, Z+7	; 0x07
   15e9a:	90 85       	ldd	r25, Z+8	; 0x08
   15e9c:	80 62       	ori	r24, 0x20	; 32
   15e9e:	90 87       	std	Z+8, r25	; 0x08
   15ea0:	87 83       	std	Z+7, r24	; 0x07
   15ea2:	bf c1       	rjmp	.+894    	; 0x16222 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   15ea4:	60 91 35 1d 	lds	r22, 0x1D35	; 0x801d35 <gpib_iobuff>

    if (secondary == 0x68)
   15ea8:	98 e6       	ldi	r25, 0x68	; 104
   15eaa:	e9 16       	cp	r14, r25
   15eac:	f1 04       	cpc	r15, r1
   15eae:	09 f0       	breq	.+2      	; 0x15eb2 <Amigo_Command+0x244>
   15eb0:	28 c1       	rjmp	.+592    	; 0x16102 <Amigo_Command+0x494>
    {
        if(op == 0x00 && len == 2)
   15eb2:	61 11       	cpse	r22, r1
   15eb4:	2e c0       	rjmp	.+92     	; 0x15f12 <Amigo_Command+0x2a4>
   15eb6:	02 30       	cpi	r16, 0x02	; 2
   15eb8:	11 05       	cpc	r17, r1
   15eba:	09 f0       	breq	.+2      	; 0x15ebe <Amigo_Command+0x250>
   15ebc:	b7 c1       	rjmp	.+878    	; 0x1622c <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   15ebe:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15ec2:	85 ff       	sbrs	r24, 5
   15ec4:	0a c0       	rjmp	.+20     	; 0x15eda <Amigo_Command+0x26c>
                printf("[AMIGO Cold Load Read Command]\n");
   15ec6:	81 e2       	ldi	r24, 0x21	; 33
   15ec8:	93 e2       	ldi	r25, 0x23	; 35
   15eca:	1f 92       	push	r1
   15ecc:	9f 93       	push	r25
   15ece:	8f 93       	push	r24
   15ed0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15ed4:	0f 90       	pop	r0
   15ed6:	0f 90       	pop	r0
   15ed8:	0f 90       	pop	r0
#endif
            ///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   15eda:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   15ede:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   15ee2:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   15ee4:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   15ee6:	10 86       	std	Z+8, r1	; 0x08
   15ee8:	17 82       	std	Z+7, r1	; 0x07
            /// Fill in temparary address
            tmp.cyl = 0;
   15eea:	1c 82       	std	Y+4, r1	; 0x04
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   15eec:	80 91 36 1d 	lds	r24, 0x1D36	; 0x801d36 <gpib_iobuff+0x1>
   15ef0:	98 2f       	mov	r25, r24
   15ef2:	92 95       	swap	r25
   15ef4:	96 95       	lsr	r25
   15ef6:	96 95       	lsr	r25
   15ef8:	93 70       	andi	r25, 0x03	; 3
   15efa:	9d 83       	std	Y+5, r25	; 0x05
            tmp.sector = 0x3f & *ptr;
   15efc:	8f 73       	andi	r24, 0x3F	; 63
   15efe:	8e 83       	std	Y+6, r24	; 0x06
            ++ptr;
            //update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   15f00:	ce 01       	movw	r24, r28
   15f02:	01 96       	adiw	r24, 0x01	; 1
   15f04:	18 da       	rcall	.-3024   	; 0x15336 <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   15f06:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   15f0a:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   15f0e:	85 e0       	ldi	r24, 0x05	; 5
   15f10:	5c c1       	rjmp	.+696    	; 0x161ca <Amigo_Command+0x55c>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   15f12:	62 30       	cpi	r22, 0x02	; 2
   15f14:	09 f0       	breq	.+2      	; 0x15f18 <Amigo_Command+0x2aa>
   15f16:	3f c0       	rjmp	.+126    	; 0x15f96 <Amigo_Command+0x328>
   15f18:	05 30       	cpi	r16, 0x05	; 5
   15f1a:	11 05       	cpc	r17, r1
   15f1c:	d1 f4       	brne	.+52     	; 0x15f52 <Amigo_Command+0x2e4>
/// @brief 
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   15f1e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15f22:	85 ff       	sbrs	r24, 5
   15f24:	0a c0       	rjmp	.+20     	; 0x15f3a <Amigo_Command+0x2cc>
                printf("[AMIGO Seek len=5]\n");
   15f26:	8d e0       	ldi	r24, 0x0D	; 13
   15f28:	93 e2       	ldi	r25, 0x23	; 35
   15f2a:	1f 92       	push	r1
   15f2c:	9f 93       	push	r25
   15f2e:	8f 93       	push	r24
   15f30:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15f34:	0f 90       	pop	r0
   15f36:	0f 90       	pop	r0
   15f38:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   15f3a:	80 91 36 1d 	lds	r24, 0x1D36	; 0x801d36 <gpib_iobuff+0x1>
   15f3e:	83 de       	rcall	.-762    	; 0x15c46 <amigo_check_unit>

            /// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   15f40:	80 91 37 1d 	lds	r24, 0x1D37	; 0x801d37 <gpib_iobuff+0x2>
   15f44:	8c 83       	std	Y+4, r24	; 0x04
            tmp.head = 0xff & *ptr++;
   15f46:	80 91 38 1d 	lds	r24, 0x1D38	; 0x801d38 <gpib_iobuff+0x3>
   15f4a:	8d 83       	std	Y+5, r24	; 0x05
            tmp.sector = 0xff & *ptr++;
   15f4c:	80 91 39 1d 	lds	r24, 0x1D39	; 0x801d39 <gpib_iobuff+0x4>
   15f50:	1d c0       	rjmp	.+58     	; 0x15f8c <Amigo_Command+0x31e>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   15f52:	06 30       	cpi	r16, 0x06	; 6
   15f54:	11 05       	cpc	r17, r1
   15f56:	09 f0       	breq	.+2      	; 0x15f5a <Amigo_Command+0x2ec>
   15f58:	69 c1       	rjmp	.+722    	; 0x1622c <Amigo_Command+0x5be>
/// @brief 
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   15f5a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15f5e:	85 ff       	sbrs	r24, 5
   15f60:	0a c0       	rjmp	.+20     	; 0x15f76 <Amigo_Command+0x308>
                printf("[AMIGO Seek len=6]\n");
   15f62:	89 ef       	ldi	r24, 0xF9	; 249
   15f64:	92 e2       	ldi	r25, 0x22	; 34
   15f66:	1f 92       	push	r1
   15f68:	9f 93       	push	r25
   15f6a:	8f 93       	push	r24
   15f6c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15f70:	0f 90       	pop	r0
   15f72:	0f 90       	pop	r0
   15f74:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   15f76:	80 91 36 1d 	lds	r24, 0x1D36	; 0x801d36 <gpib_iobuff+0x1>
   15f7a:	65 de       	rcall	.-822    	; 0x15c46 <amigo_check_unit>
            /// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   15f7c:	80 91 38 1d 	lds	r24, 0x1D38	; 0x801d38 <gpib_iobuff+0x3>
   15f80:	8c 83       	std	Y+4, r24	; 0x04
            tmp.head = 0xff & *ptr++;
   15f82:	80 91 39 1d 	lds	r24, 0x1D39	; 0x801d39 <gpib_iobuff+0x4>
   15f86:	8d 83       	std	Y+5, r24	; 0x05
            tmp.sector = 0xff & *ptr++;
   15f88:	80 91 3a 1d 	lds	r24, 0x1D3A	; 0x801d3a <gpib_iobuff+0x5>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   15f8c:	8e 83       	std	Y+6, r24	; 0x06
   15f8e:	ce 01       	movw	r24, r28
   15f90:	01 96       	adiw	r24, 0x01	; 1
   15f92:	d1 d9       	rcall	.-3166   	; 0x15336 <amigo_seek>
   15f94:	1b c1       	rjmp	.+566    	; 0x161cc <Amigo_Command+0x55e>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   15f96:	63 30       	cpi	r22, 0x03	; 3
   15f98:	e9 f4       	brne	.+58     	; 0x15fd4 <Amigo_Command+0x366>
   15f9a:	02 30       	cpi	r16, 0x02	; 2
   15f9c:	11 05       	cpc	r17, r1
   15f9e:	09 f0       	breq	.+2      	; 0x15fa2 <Amigo_Command+0x334>
   15fa0:	45 c1       	rjmp	.+650    	; 0x1622c <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & 32)
   15fa2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15fa6:	85 ff       	sbrs	r24, 5
   15fa8:	0a c0       	rjmp	.+20     	; 0x15fbe <Amigo_Command+0x350>
                printf("[AMIGO Request Status Buffered Command]\n");
   15faa:	80 ed       	ldi	r24, 0xD0	; 208
   15fac:	92 e2       	ldi	r25, 0x22	; 34
   15fae:	1f 92       	push	r1
   15fb0:	9f 93       	push	r25
   15fb2:	8f 93       	push	r24
   15fb4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15fb8:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   15fba:	0f 90       	pop	r0
   15fbc:	0f 90       	pop	r0
   15fbe:	80 91 36 1d 	lds	r24, 0x1D36	; 0x801d36 <gpib_iobuff+0x1>
            amigo_request_status();
   15fc2:	41 de       	rcall	.-894    	; 0x15c46 <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   15fc4:	7b d8       	rcall	.-3850   	; 0x150bc <amigo_request_status>
   15fc6:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   15fca:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   15fce:	83 e0       	ldi	r24, 0x03	; 3
   15fd0:	80 83       	st	Z, r24
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   15fd2:	27 c1       	rjmp	.+590    	; 0x16222 <Amigo_Command+0x5b4>
   15fd4:	65 30       	cpi	r22, 0x05	; 5
   15fd6:	d9 f4       	brne	.+54     	; 0x1600e <Amigo_Command+0x3a0>
   15fd8:	02 30       	cpi	r16, 0x02	; 2
   15fda:	11 05       	cpc	r17, r1
   15fdc:	09 f0       	breq	.+2      	; 0x15fe0 <Amigo_Command+0x372>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & 32)
   15fde:	26 c1       	rjmp	.+588    	; 0x1622c <Amigo_Command+0x5be>
   15fe0:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15fe4:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Read Unbuffered Command]\n");
   15fe6:	0a c0       	rjmp	.+20     	; 0x15ffc <Amigo_Command+0x38e>
   15fe8:	8f ea       	ldi	r24, 0xAF	; 175
   15fea:	92 e2       	ldi	r25, 0x22	; 34
   15fec:	1f 92       	push	r1
   15fee:	9f 93       	push	r25
   15ff0:	8f 93       	push	r24
   15ff2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   15ff6:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   15ff8:	0f 90       	pop	r0
   15ffa:	0f 90       	pop	r0
   15ffc:	80 91 36 1d 	lds	r24, 0x1D36	; 0x801d36 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   16000:	22 de       	rcall	.-956    	; 0x15c46 <amigo_check_unit>
   16002:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   16006:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   1600a:	86 e0       	ldi	r24, 0x06	; 6
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x07 && len == 4)
   1600c:	de c0       	rjmp	.+444    	; 0x161ca <Amigo_Command+0x55c>
   1600e:	67 30       	cpi	r22, 0x07	; 7
   16010:	f9 f4       	brne	.+62     	; 0x16050 <Amigo_Command+0x3e2>
   16012:	04 30       	cpi	r16, 0x04	; 4
   16014:	11 05       	cpc	r17, r1
   16016:	09 f0       	breq	.+2      	; 0x1601a <Amigo_Command+0x3ac>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & 32)
   16018:	09 c1       	rjmp	.+530    	; 0x1622c <Amigo_Command+0x5be>
   1601a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1601e:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Verify]\n");
   16020:	0a c0       	rjmp	.+20     	; 0x16036 <Amigo_Command+0x3c8>
   16022:	8f e9       	ldi	r24, 0x9F	; 159
   16024:	92 e2       	ldi	r25, 0x22	; 34
   16026:	1f 92       	push	r1
   16028:	9f 93       	push	r25
   1602a:	8f 93       	push	r24
   1602c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   16030:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16032:	0f 90       	pop	r0
   16034:	0f 90       	pop	r0
   16036:	80 91 36 1d 	lds	r24, 0x1D36	; 0x801d36 <gpib_iobuff+0x1>
            sectors = (0xff & *ptr++) << 8;
   1603a:	05 de       	rcall	.-1014   	; 0x15c46 <amigo_check_unit>
   1603c:	80 91 37 1d 	lds	r24, 0x1D37	; 0x801d37 <gpib_iobuff+0x2>
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   16040:	90 e0       	ldi	r25, 0x00	; 0
   16042:	98 2f       	mov	r25, r24
   16044:	88 27       	eor	r24, r24
   16046:	20 91 38 1d 	lds	r18, 0x1D38	; 0x801d38 <gpib_iobuff+0x3>
   1604a:	82 2b       	or	r24, r18
        }
        else if(op == 0x08 && len == 2)
   1604c:	9f d9       	rcall	.-3266   	; 0x1538c <amigo_verify>
   1604e:	f1 c0       	rjmp	.+482    	; 0x16232 <Amigo_Command+0x5c4>
   16050:	68 30       	cpi	r22, 0x08	; 8
   16052:	d9 f4       	brne	.+54     	; 0x1608a <Amigo_Command+0x41c>
   16054:	02 30       	cpi	r16, 0x02	; 2
   16056:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   16058:	09 f0       	breq	.+2      	; 0x1605c <Amigo_Command+0x3ee>
   1605a:	e8 c0       	rjmp	.+464    	; 0x1622c <Amigo_Command+0x5be>
   1605c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
                printf("[AMIGO Write Unbuffered Command]\n");
   16060:	85 ff       	sbrs	r24, 5
   16062:	0a c0       	rjmp	.+20     	; 0x16078 <Amigo_Command+0x40a>
   16064:	8d e7       	ldi	r24, 0x7D	; 125
   16066:	92 e2       	ldi	r25, 0x22	; 34
   16068:	1f 92       	push	r1
   1606a:	9f 93       	push	r25
   1606c:	8f 93       	push	r24
   1606e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16072:	0f 90       	pop	r0
   16074:	0f 90       	pop	r0
   16076:	0f 90       	pop	r0
   16078:	80 91 36 1d 	lds	r24, 0x1D36	; 0x801d36 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   1607c:	e4 dd       	rcall	.-1080   	; 0x15c46 <amigo_check_unit>
   1607e:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   16082:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   16086:	88 e0       	ldi	r24, 0x08	; 8
   16088:	a0 c0       	rjmp	.+320    	; 0x161ca <Amigo_Command+0x55c>
   1608a:	86 2f       	mov	r24, r22
   1608c:	8f 7d       	andi	r24, 0xDF	; 223
   1608e:	8b 30       	cpi	r24, 0x0B	; 11
   16090:	d9 f4       	brne	.+54     	; 0x160c8 <Amigo_Command+0x45a>
   16092:	02 30       	cpi	r16, 0x02	; 2
   16094:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   16096:	09 f0       	breq	.+2      	; 0x1609a <Amigo_Command+0x42c>
   16098:	c9 c0       	rjmp	.+402    	; 0x1622c <Amigo_Command+0x5be>
   1609a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
                printf("[AMIGO Initialize Command]\n");
   1609e:	85 ff       	sbrs	r24, 5
   160a0:	0a c0       	rjmp	.+20     	; 0x160b6 <Amigo_Command+0x448>
   160a2:	81 e6       	ldi	r24, 0x61	; 97
   160a4:	92 e2       	ldi	r25, 0x22	; 34
   160a6:	1f 92       	push	r1
   160a8:	9f 93       	push	r25
   160aa:	8f 93       	push	r24
   160ac:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   160b0:	0f 90       	pop	r0
   160b2:	0f 90       	pop	r0
   160b4:	0f 90       	pop	r0
   160b6:	80 91 36 1d 	lds	r24, 0x1D36	; 0x801d36 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_INITIALIZE;
   160ba:	c5 dd       	rcall	.-1142   	; 0x15c46 <amigo_check_unit>
   160bc:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   160c0:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   160c4:	8a e0       	ldi	r24, 0x0A	; 10
   160c6:	81 c0       	rjmp	.+258    	; 0x161ca <Amigo_Command+0x55c>
   160c8:	64 31       	cpi	r22, 0x14	; 20
   160ca:	09 f0       	breq	.+2      	; 0x160ce <Amigo_Command+0x460>
   160cc:	af c0       	rjmp	.+350    	; 0x1622c <Amigo_Command+0x5be>
   160ce:	02 30       	cpi	r16, 0x02	; 2
   160d0:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   160d2:	09 f0       	breq	.+2      	; 0x160d6 <Amigo_Command+0x468>
   160d4:	ab c0       	rjmp	.+342    	; 0x1622c <Amigo_Command+0x5be>
   160d6:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
                printf("[AMIGO Request Logical Address Command]\n");
   160da:	85 ff       	sbrs	r24, 5
   160dc:	0a c0       	rjmp	.+20     	; 0x160f2 <Amigo_Command+0x484>
   160de:	88 e3       	ldi	r24, 0x38	; 56
   160e0:	92 e2       	ldi	r25, 0x22	; 34
   160e2:	1f 92       	push	r1
   160e4:	9f 93       	push	r25
   160e6:	8f 93       	push	r24
   160e8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   160ec:	0f 90       	pop	r0
#endif
            amigo_request_logical_address();
   160ee:	0f 90       	pop	r0
   160f0:	0f 90       	pop	r0
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   160f2:	0e 94 50 a8 	call	0x150a0	; 0x150a0 <amigo_request_logical_address>
   160f6:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   160fa:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   160fe:	84 e0       	ldi	r24, 0x04	; 4
   16100:	64 c0       	rjmp	.+200    	; 0x161ca <Amigo_Command+0x55c>
   16102:	89 e6       	ldi	r24, 0x69	; 105
   16104:	e8 16       	cp	r14, r24
    {
        if(op == 0x08 && len == 2)
   16106:	f1 04       	cpc	r15, r1
   16108:	f1 f4       	brne	.+60     	; 0x16146 <Amigo_Command+0x4d8>
   1610a:	68 30       	cpi	r22, 0x08	; 8
   1610c:	09 f0       	breq	.+2      	; 0x16110 <Amigo_Command+0x4a2>
   1610e:	8e c0       	rjmp	.+284    	; 0x1622c <Amigo_Command+0x5be>
   16110:	02 30       	cpi	r16, 0x02	; 2
   16112:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   16114:	09 f0       	breq	.+2      	; 0x16118 <Amigo_Command+0x4aa>
   16116:	8a c0       	rjmp	.+276    	; 0x1622c <Amigo_Command+0x5be>
   16118:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
                printf("[AMIGO Write Buffered Command]\n");
   1611c:	85 ff       	sbrs	r24, 5
   1611e:	0a c0       	rjmp	.+20     	; 0x16134 <Amigo_Command+0x4c6>
   16120:	88 e1       	ldi	r24, 0x18	; 24
   16122:	92 e2       	ldi	r25, 0x22	; 34
   16124:	1f 92       	push	r1
   16126:	9f 93       	push	r25
   16128:	8f 93       	push	r24
   1612a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1612e:	0f 90       	pop	r0
   16130:	0f 90       	pop	r0
   16132:	0f 90       	pop	r0
   16134:	80 91 36 1d 	lds	r24, 0x1D36	; 0x801d36 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   16138:	86 dd       	rcall	.-1268   	; 0x15c46 <amigo_check_unit>
   1613a:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   1613e:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   16142:	89 e0       	ldi	r24, 0x09	; 9
   16144:	42 c0       	rjmp	.+132    	; 0x161ca <Amigo_Command+0x55c>
   16146:	9a e6       	ldi	r25, 0x6A	; 106
   16148:	e9 16       	cp	r14, r25
   1614a:	f1 04       	cpc	r15, r1
    {
        if(op == 0x08 && len == 2)
   1614c:	09 f0       	breq	.+2      	; 0x16150 <Amigo_Command+0x4e2>
   1614e:	47 c0       	rjmp	.+142    	; 0x161de <Amigo_Command+0x570>
   16150:	68 30       	cpi	r22, 0x08	; 8
   16152:	f1 f4       	brne	.+60     	; 0x16190 <Amigo_Command+0x522>
   16154:	02 30       	cpi	r16, 0x02	; 2
   16156:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   16158:	09 f0       	breq	.+2      	; 0x1615c <Amigo_Command+0x4ee>
   1615a:	68 c0       	rjmp	.+208    	; 0x1622c <Amigo_Command+0x5be>
   1615c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   16160:	85 ff       	sbrs	r24, 5
   16162:	0a c0       	rjmp	.+20     	; 0x16178 <Amigo_Command+0x50a>
   16164:	8d ee       	ldi	r24, 0xED	; 237
   16166:	91 e2       	ldi	r25, 0x21	; 33
   16168:	1f 92       	push	r1
   1616a:	9f 93       	push	r25
   1616c:	8f 93       	push	r24
   1616e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16172:	0f 90       	pop	r0
   16174:	0f 90       	pop	r0
   16176:	0f 90       	pop	r0
   16178:	80 91 36 1d 	lds	r24, 0x1D36	; 0x801d36 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   1617c:	64 dd       	rcall	.-1336   	; 0x15c46 <amigo_check_unit>
   1617e:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   16182:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
            amigo_request_status();
   16186:	82 e0       	ldi	r24, 0x02	; 2
   16188:	80 83       	st	Z, r24
   1618a:	0e 94 5e a8 	call	0x150bc	; 0x150bc <amigo_request_status>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   1618e:	49 c0       	rjmp	.+146    	; 0x16222 <Amigo_Command+0x5b4>
   16190:	65 30       	cpi	r22, 0x05	; 5
   16192:	09 f0       	breq	.+2      	; 0x16196 <Amigo_Command+0x528>
   16194:	4b c0       	rjmp	.+150    	; 0x1622c <Amigo_Command+0x5be>
   16196:	02 30       	cpi	r16, 0x02	; 2
   16198:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   1619a:	09 f0       	breq	.+2      	; 0x1619e <Amigo_Command+0x530>
   1619c:	47 c0       	rjmp	.+142    	; 0x1622c <Amigo_Command+0x5be>
   1619e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
                printf("[AMIGO Read Buffered Command]\n");
   161a2:	85 ff       	sbrs	r24, 5
   161a4:	0a c0       	rjmp	.+20     	; 0x161ba <Amigo_Command+0x54c>
   161a6:	8e ec       	ldi	r24, 0xCE	; 206
   161a8:	91 e2       	ldi	r25, 0x21	; 33
   161aa:	1f 92       	push	r1
   161ac:	9f 93       	push	r25
   161ae:	8f 93       	push	r24
   161b0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   161b4:	0f 90       	pop	r0
   161b6:	0f 90       	pop	r0
   161b8:	0f 90       	pop	r0
   161ba:	80 91 36 1d 	lds	r24, 0x1D36	; 0x801d36 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   161be:	43 dd       	rcall	.-1402   	; 0x15c46 <amigo_check_unit>
   161c0:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   161c4:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   161c8:	87 e0       	ldi	r24, 0x07	; 7
   161ca:	80 83       	st	Z, r24
   161cc:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   161d0:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   161d4:	81 81       	ldd	r24, Z+1	; 0x01
   161d6:	90 e0       	ldi	r25, 0x00	; 0
   161d8:	0e 94 4c 8c 	call	0x11898	; 0x11898 <gpib_enable_PPR>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6C)
   161dc:	22 c0       	rjmp	.+68     	; 0x16222 <Amigo_Command+0x5b4>
   161de:	8c e6       	ldi	r24, 0x6C	; 108
   161e0:	e8 16       	cp	r14, r24
    {
        if(op == 0x18 && len == 5)
   161e2:	f1 04       	cpc	r15, r1
   161e4:	d1 f4       	brne	.+52     	; 0x1621a <Amigo_Command+0x5ac>
   161e6:	68 31       	cpi	r22, 0x18	; 24
   161e8:	09 f5       	brne	.+66     	; 0x1622c <Amigo_Command+0x5be>
   161ea:	05 30       	cpi	r16, 0x05	; 5
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & 32)
   161ec:	11 05       	cpc	r17, r1
   161ee:	f1 f4       	brne	.+60     	; 0x1622c <Amigo_Command+0x5be>
   161f0:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
                printf("[AMIGO Format]\n");
   161f4:	85 ff       	sbrs	r24, 5
   161f6:	0a c0       	rjmp	.+20     	; 0x1620c <Amigo_Command+0x59e>
   161f8:	8e eb       	ldi	r24, 0xBE	; 190
   161fa:	91 e2       	ldi	r25, 0x21	; 33
   161fc:	1f 92       	push	r1
   161fe:	9f 93       	push	r25
   16200:	8f 93       	push	r24
   16202:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16206:	0f 90       	pop	r0
   16208:	0f 90       	pop	r0
   1620a:	0f 90       	pop	r0
            ++ptr; // override not used
            ++ptr; // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   1620c:	80 91 36 1d 	lds	r24, 0x1D36	; 0x801d36 <gpib_iobuff+0x1>
   16210:	1a dd       	rcall	.-1484   	; 0x15c46 <amigo_check_unit>
   16212:	80 91 39 1d 	lds	r24, 0x1D39	; 0x801d39 <gpib_iobuff+0x4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   16216:	4b d9       	rcall	.-3434   	; 0x154ae <amigo_format>
   16218:	04 c0       	rjmp	.+8      	; 0x16222 <Amigo_Command+0x5b4>
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   1621a:	90 e7       	ldi	r25, 0x70	; 112
   1621c:	e9 16       	cp	r14, r25
   1621e:	f1 04       	cpc	r15, r1
   16220:	29 f4       	brne	.+10     	; 0x1622c <Amigo_Command+0x5be>
   16222:	8a 89       	ldd	r24, Y+18	; 0x12
    }
    return ( amigo_todo_op(secondary, op, len) );
   16224:	9b 89       	ldd	r25, Y+19	; 0x13
   16226:	88 27       	eor	r24, r24
   16228:	90 7d       	andi	r25, 0xD0	; 208
   1622a:	03 c0       	rjmp	.+6      	; 0x16232 <Amigo_Command+0x5c4>
}
   1622c:	a8 01       	movw	r20, r16
   1622e:	8e 2d       	mov	r24, r14
   16230:	d1 db       	rcall	.-2142   	; 0x159d4 <amigo_todo_op>
   16232:	63 96       	adiw	r28, 0x13	; 19
   16234:	e6 e0       	ldi	r30, 0x06	; 6
   16236:	0c 94 b7 e9 	jmp	0x1d36e	; 0x1d36e <__epilogue_restores__+0x18>

0001623a <Amigo_Execute>:
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)


int Amigo_Execute( int secondary )
{
   1623a:	cf 93       	push	r28
   1623c:	df 93       	push	r29
   1623e:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & 32)
   16240:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   16244:	85 ff       	sbrs	r24, 5
   16246:	19 c0       	rjmp	.+50     	; 0x1627a <Amigo_Execute+0x40>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   16248:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <talking>
   1624c:	1f 92       	push	r1
   1624e:	8f 93       	push	r24
   16250:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   16254:	1f 92       	push	r1
   16256:	8f 93       	push	r24
   16258:	df 93       	push	r29
   1625a:	cf 93       	push	r28
   1625c:	8c e8       	ldi	r24, 0x8C	; 140
   1625e:	91 e2       	ldi	r25, 0x21	; 33
   16260:	1f 92       	push	r1
   16262:	9f 93       	push	r25
   16264:	8f 93       	push	r24
   16266:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1626a:	8d b7       	in	r24, 0x3d	; 61
   1626c:	9e b7       	in	r25, 0x3e	; 62
   1626e:	09 96       	adiw	r24, 0x09	; 9
   16270:	0f b6       	in	r0, 0x3f	; 63
   16272:	f8 94       	cli
   16274:	9e bf       	out	0x3e, r25	; 62
   16276:	0f be       	out	0x3f, r0	; 63
   16278:	8d bf       	out	0x3d, r24	; 61
            secondary, listening, talking);
#endif

    if(talking == UNT)
   1627a:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <talking>
   1627e:	8f 35       	cpi	r24, 0x5F	; 95
   16280:	09 f4       	brne	.+2      	; 0x16284 <Amigo_Execute+0x4a>
   16282:	ad c0       	rjmp	.+346    	; 0x163de <Amigo_Execute+0x1a4>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   16284:	90 e0       	ldi	r25, 0x00	; 0
   16286:	0e 94 88 92 	call	0x12510	; 0x12510 <AMIGO_is_MTA>
   1628a:	89 2b       	or	r24, r25
   1628c:	39 f0       	breq	.+14     	; 0x1629c <Amigo_Execute+0x62>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   1628e:	ce 01       	movw	r24, r28
   16290:	87 7f       	andi	r24, 0xF7	; 247
   16292:	80 36       	cpi	r24, 0x60	; 96
   16294:	91 05       	cpc	r25, r1
   16296:	09 f0       	breq	.+2      	; 0x1629a <Amigo_Execute+0x60>
   16298:	a2 c0       	rjmp	.+324    	; 0x163de <Amigo_Execute+0x1a4>
   1629a:	08 c0       	rjmp	.+16     	; 0x162ac <Amigo_Execute+0x72>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   1629c:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   162a0:	90 e0       	ldi	r25, 0x00	; 0
   162a2:	0e 94 77 92 	call	0x124ee	; 0x124ee <AMIGO_is_MLA>
   162a6:	89 2b       	or	r24, r25
   162a8:	91 f7       	brne	.-28     	; 0x1628e <Amigo_Execute+0x54>
   162aa:	99 c0       	rjmp	.+306    	; 0x163de <Amigo_Execute+0x1a4>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   162ac:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   162b0:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   162b4:	81 81       	ldd	r24, Z+1	; 0x01
   162b6:	90 e0       	ldi	r25, 0x00	; 0
   162b8:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_disable_PPR>

    if(secondary == 0x60)
   162bc:	c0 36       	cpi	r28, 0x60	; 96
   162be:	d1 05       	cpc	r29, r1
   162c0:	09 f0       	breq	.+2      	; 0x162c4 <Amigo_Execute+0x8a>
   162c2:	4e c0       	rjmp	.+156    	; 0x16360 <Amigo_Execute+0x126>
    {
        switch(AMIGOs->state)
   162c4:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   162c8:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   162cc:	e0 81       	ld	r30, Z
   162ce:	8e 2f       	mov	r24, r30
   162d0:	90 e0       	ldi	r25, 0x00	; 0
   162d2:	8b 30       	cpi	r24, 0x0B	; 11
   162d4:	91 05       	cpc	r25, r1
   162d6:	08 f0       	brcs	.+2      	; 0x162da <Amigo_Execute+0xa0>
   162d8:	41 c0       	rjmp	.+130    	; 0x1635c <Amigo_Execute+0x122>
   162da:	fc 01       	movw	r30, r24
   162dc:	e0 53       	subi	r30, 0x30	; 48
   162de:	ff 4f       	sbci	r31, 0xFF	; 255
   162e0:	0c 94 60 e9 	jmp	0x1d2c0	; 0x1d2c0 <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & 32)
   162e4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   162e8:	85 ff       	sbrs	r24, 5
   162ea:	18 c0       	rjmp	.+48     	; 0x1631c <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Cold Load Read]\n");
   162ec:	8c e6       	ldi	r24, 0x6C	; 108
   162ee:	91 e2       	ldi	r25, 0x21	; 33
   162f0:	0d c0       	rjmp	.+26     	; 0x1630c <Amigo_Execute+0xd2>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   162f2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   162f6:	85 ff       	sbrs	r24, 5
   162f8:	11 c0       	rjmp	.+34     	; 0x1631c <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   162fa:	8b e4       	ldi	r24, 0x4B	; 75
   162fc:	91 e2       	ldi	r25, 0x21	; 33
   162fe:	06 c0       	rjmp	.+12     	; 0x1630c <Amigo_Execute+0xd2>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   16300:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   16304:	85 ff       	sbrs	r24, 5
   16306:	0a c0       	rjmp	.+20     	; 0x1631c <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Read Buffered]\n");
   16308:	8c e2       	ldi	r24, 0x2C	; 44
   1630a:	91 e2       	ldi	r25, 0x21	; 33
   1630c:	1f 92       	push	r1
   1630e:	9f 93       	push	r25
   16310:	8f 93       	push	r24
   16312:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   16316:	0f 90       	pop	r0
   16318:	0f 90       	pop	r0
#endif
                return ( amigo_buffered_read() );
   1631a:	0f 90       	pop	r0
   1631c:	5a d9       	rcall	.-3404   	; 0x155d2 <amigo_buffered_read>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   1631e:	61 c0       	rjmp	.+194    	; 0x163e2 <Amigo_Execute+0x1a8>
   16320:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   16324:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Unbuffered]\n");
   16326:	18 c0       	rjmp	.+48     	; 0x16358 <Amigo_Execute+0x11e>
   16328:	8a e0       	ldi	r24, 0x0A	; 10
   1632a:	91 e2       	ldi	r25, 0x21	; 33
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & 32)
   1632c:	0d c0       	rjmp	.+26     	; 0x16348 <Amigo_Execute+0x10e>
   1632e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   16332:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Initialize]\n");
   16334:	11 c0       	rjmp	.+34     	; 0x16358 <Amigo_Execute+0x11e>
   16336:	8e ee       	ldi	r24, 0xEE	; 238
   16338:	90 e2       	ldi	r25, 0x20	; 32
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   1633a:	06 c0       	rjmp	.+12     	; 0x16348 <Amigo_Execute+0x10e>
   1633c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   16340:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Buffered]\n");
   16342:	0a c0       	rjmp	.+20     	; 0x16358 <Amigo_Execute+0x11e>
   16344:	8e ec       	ldi	r24, 0xCE	; 206
   16346:	90 e2       	ldi	r25, 0x20	; 32
   16348:	1f 92       	push	r1
   1634a:	9f 93       	push	r25
   1634c:	8f 93       	push	r24
   1634e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   16352:	0f 90       	pop	r0
#endif
                return ( amigo_buffered_write() );
   16354:	0f 90       	pop	r0
   16356:	0f 90       	pop	r0
   16358:	00 da       	rcall	.-3072   	; 0x1575a <amigo_buffered_write>
            default:
                return ( amigo_todo(secondary) );
   1635a:	43 c0       	rjmp	.+134    	; 0x163e2 <Amigo_Execute+0x1a8>
   1635c:	80 e6       	ldi	r24, 0x60	; 96
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   1635e:	3d c0       	rjmp	.+122    	; 0x163da <Amigo_Execute+0x1a0>
   16360:	c8 36       	cpi	r28, 0x68	; 104
   16362:	d1 05       	cpc	r29, r1
    {
        switch(AMIGOs->state)
   16364:	e1 f5       	brne	.+120    	; 0x163de <Amigo_Execute+0x1a4>
   16366:	e0 91 e6 19 	lds	r30, 0x19E6	; 0x8019e6 <AMIGOs>
   1636a:	f0 91 e7 19 	lds	r31, 0x19E7	; 0x8019e7 <AMIGOs+0x1>
   1636e:	80 81       	ld	r24, Z
   16370:	82 30       	cpi	r24, 0x02	; 2
   16372:	81 f0       	breq	.+32     	; 0x16394 <Amigo_Execute+0x15a>
   16374:	18 f4       	brcc	.+6      	; 0x1637c <Amigo_Execute+0x142>
   16376:	88 23       	and	r24, r24
   16378:	91 f1       	breq	.+100    	; 0x163de <Amigo_Execute+0x1a4>
   1637a:	2e c0       	rjmp	.+92     	; 0x163d8 <Amigo_Execute+0x19e>
   1637c:	83 30       	cpi	r24, 0x03	; 3
   1637e:	19 f0       	breq	.+6      	; 0x16386 <Amigo_Execute+0x14c>
   16380:	84 30       	cpi	r24, 0x04	; 4
   16382:	c9 f0       	breq	.+50     	; 0x163b6 <Amigo_Execute+0x17c>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   16384:	29 c0       	rjmp	.+82     	; 0x163d8 <Amigo_Execute+0x19e>
   16386:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1638a:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Status Buffered]\n");
   1638c:	11 c0       	rjmp	.+34     	; 0x163b0 <Amigo_Execute+0x176>
   1638e:	85 ea       	ldi	r24, 0xA5	; 165
   16390:	90 e2       	ldi	r25, 0x20	; 32
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   16392:	06 c0       	rjmp	.+12     	; 0x163a0 <Amigo_Execute+0x166>
   16394:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   16398:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   1639a:	0a c0       	rjmp	.+20     	; 0x163b0 <Amigo_Execute+0x176>
   1639c:	8a e7       	ldi	r24, 0x7A	; 122
   1639e:	90 e2       	ldi	r25, 0x20	; 32
   163a0:	1f 92       	push	r1
   163a2:	9f 93       	push	r25
   163a4:	8f 93       	push	r24
   163a6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   163aa:	0f 90       	pop	r0
   163ac:	0f 90       	pop	r0
#endif
                return ( amigo_send_status() );
   163ae:	0f 90       	pop	r0
   163b0:	0e 94 14 a9 	call	0x15228	; 0x15228 <amigo_send_status>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & 32)
   163b4:	16 c0       	rjmp	.+44     	; 0x163e2 <Amigo_Execute+0x1a8>
   163b6:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   163ba:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Logical Address]\n");
   163bc:	0a c0       	rjmp	.+20     	; 0x163d2 <Amigo_Execute+0x198>
   163be:	81 e5       	ldi	r24, 0x51	; 81
   163c0:	90 e2       	ldi	r25, 0x20	; 32
   163c2:	1f 92       	push	r1
   163c4:	9f 93       	push	r25
   163c6:	8f 93       	push	r24
   163c8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   163cc:	0f 90       	pop	r0
   163ce:	0f 90       	pop	r0
#endif
                return ( amigo_send_logical_address() );
   163d0:	0f 90       	pop	r0
   163d2:	0e 94 b6 a8 	call	0x1516c	; 0x1516c <amigo_send_logical_address>
            default:
                return ( amigo_todo(secondary) );
   163d6:	05 c0       	rjmp	.+10     	; 0x163e2 <Amigo_Execute+0x1a8>
   163d8:	88 e6       	ldi	r24, 0x68	; 104
   163da:	a5 db       	rcall	.-2230   	; 0x15b26 <amigo_todo>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   163dc:	02 c0       	rjmp	.+4      	; 0x163e2 <Amigo_Execute+0x1a8>
   163de:	80 e0       	ldi	r24, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   163e0:	90 e0       	ldi	r25, 0x00	; 0
   163e2:	df 91       	pop	r29
   163e4:	cf 91       	pop	r28
   163e6:	08 95       	ret

000163e8 <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   163e8:	cf 93       	push	r28
   163ea:	df 93       	push	r29
   163ec:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   163ee:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <talking>
   163f2:	90 e0       	ldi	r25, 0x00	; 0
   163f4:	0e 94 88 92 	call	0x12510	; 0x12510 <AMIGO_is_MTA>
   163f8:	89 2b       	or	r24, r25
   163fa:	51 f0       	breq	.+20     	; 0x16410 <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   163fc:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <talking>
   16400:	8f 35       	cpi	r24, 0x5F	; 95
   16402:	71 f4       	brne	.+28     	; 0x16420 <AMIGO_COMMANDS+0x38>
   16404:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   16408:	90 e0       	ldi	r25, 0x00	; 0
   1640a:	0e 94 77 92 	call	0x124ee	; 0x124ee <AMIGO_is_MLA>
   1640e:	08 c0       	rjmp	.+16     	; 0x16420 <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   16410:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   16414:	90 e0       	ldi	r25, 0x00	; 0
   16416:	0e 94 77 92 	call	0x124ee	; 0x124ee <AMIGO_is_MLA>
   1641a:	89 2b       	or	r24, r25
   1641c:	79 f7       	brne	.-34     	; 0x163fc <AMIGO_COMMANDS+0x14>
   1641e:	76 c0       	rjmp	.+236    	; 0x1650c <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
            // printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   16420:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   16424:	81 11       	cpse	r24, r1
   16426:	05 c0       	rjmp	.+10     	; 0x16432 <AMIGO_COMMANDS+0x4a>
   16428:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <talking>
   1642c:	90 e0       	ldi	r25, 0x00	; 0
   1642e:	0e 94 88 92 	call	0x12510	; 0x12510 <AMIGO_is_MTA>
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   16432:	c0 36       	cpi	r28, 0x60	; 96
   16434:	99 f4       	brne	.+38     	; 0x1645c <AMIGO_COMMANDS+0x74>
   16436:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <talking>
   1643a:	90 e0       	ldi	r25, 0x00	; 0
   1643c:	0e 94 88 92 	call	0x12510	; 0x12510 <AMIGO_is_MTA>
   16440:	89 2b       	or	r24, r25
   16442:	19 f0       	breq	.+6      	; 0x1644a <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   16444:	80 e6       	ldi	r24, 0x60	; 96
   16446:	90 e0       	ldi	r25, 0x00	; 0
   16448:	14 c0       	rjmp	.+40     	; 0x16472 <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   1644a:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   1644e:	90 e0       	ldi	r25, 0x00	; 0
   16450:	0e 94 77 92 	call	0x124ee	; 0x124ee <AMIGO_is_MLA>
   16454:	89 2b       	or	r24, r25
   16456:	09 f4       	brne	.+2      	; 0x1645a <AMIGO_COMMANDS+0x72>
   16458:	59 c0       	rjmp	.+178    	; 0x1650c <AMIGO_COMMANDS+0x124>
   1645a:	f4 cf       	rjmp	.-24     	; 0x16444 <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   1645c:	c8 36       	cpi	r28, 0x68	; 104
   1645e:	c1 f4       	brne	.+48     	; 0x16490 <AMIGO_COMMANDS+0xa8>
   16460:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <talking>
   16464:	90 e0       	ldi	r25, 0x00	; 0
   16466:	0e 94 88 92 	call	0x12510	; 0x12510 <AMIGO_is_MTA>
   1646a:	89 2b       	or	r24, r25
   1646c:	21 f0       	breq	.+8      	; 0x16476 <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   1646e:	88 e6       	ldi	r24, 0x68	; 104
   16470:	90 e0       	ldi	r25, 0x00	; 0
   16472:	e3 de       	rcall	.-570    	; 0x1623a <Amigo_Execute>
   16474:	0b c0       	rjmp	.+22     	; 0x1648c <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
   16476:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   1647a:	90 e0       	ldi	r25, 0x00	; 0
   1647c:	0e 94 77 92 	call	0x124ee	; 0x124ee <AMIGO_is_MLA>
   16480:	89 2b       	or	r24, r25
   16482:	09 f4       	brne	.+2      	; 0x16486 <AMIGO_COMMANDS+0x9e>
   16484:	43 c0       	rjmp	.+134    	; 0x1650c <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   16486:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
   16488:	90 e0       	ldi	r25, 0x00	; 0
   1648a:	f1 db       	rcall	.-2078   	; 0x15c6e <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   1648c:	ec 01       	movw	r28, r24
   1648e:	40 c0       	rjmp	.+128    	; 0x16510 <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) ) // Single byte command
   16490:	c9 36       	cpi	r28, 0x69	; 105
   16492:	51 f4       	brne	.+20     	; 0x164a8 <AMIGO_COMMANDS+0xc0>
   16494:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   16498:	90 e0       	ldi	r25, 0x00	; 0
   1649a:	0e 94 77 92 	call	0x124ee	; 0x124ee <AMIGO_is_MLA>
   1649e:	89 2b       	or	r24, r25
   164a0:	a9 f1       	breq	.+106    	; 0x1650c <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   164a2:	89 e6       	ldi	r24, 0x69	; 105
   164a4:	90 e0       	ldi	r25, 0x00	; 0
   164a6:	f1 cf       	rjmp	.-30     	; 0x1648a <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) ) // Single byte command
   164a8:	ca 36       	cpi	r28, 0x6A	; 106
   164aa:	51 f4       	brne	.+20     	; 0x164c0 <AMIGO_COMMANDS+0xd8>
   164ac:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   164b0:	90 e0       	ldi	r25, 0x00	; 0
   164b2:	0e 94 77 92 	call	0x124ee	; 0x124ee <AMIGO_is_MLA>
   164b6:	89 2b       	or	r24, r25
   164b8:	49 f1       	breq	.+82     	; 0x1650c <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   164ba:	8a e6       	ldi	r24, 0x6A	; 106
   164bc:	90 e0       	ldi	r25, 0x00	; 0
   164be:	e5 cf       	rjmp	.-54     	; 0x1648a <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
   164c0:	cc 36       	cpi	r28, 0x6C	; 108
   164c2:	51 f4       	brne	.+20     	; 0x164d8 <AMIGO_COMMANDS+0xf0>
   164c4:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   164c8:	90 e0       	ldi	r25, 0x00	; 0
   164ca:	0e 94 77 92 	call	0x124ee	; 0x124ee <AMIGO_is_MLA>
   164ce:	89 2b       	or	r24, r25
   164d0:	e9 f0       	breq	.+58     	; 0x1650c <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   164d2:	8c e6       	ldi	r24, 0x6C	; 108
   164d4:	90 e0       	ldi	r25, 0x00	; 0
   164d6:	d9 cf       	rjmp	.-78     	; 0x1648a <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   164d8:	c0 37       	cpi	r28, 0x70	; 112
   164da:	c1 f4       	brne	.+48     	; 0x1650c <AMIGO_COMMANDS+0x124>
   164dc:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <talking>
   164e0:	90 e0       	ldi	r25, 0x00	; 0
   164e2:	0e 94 88 92 	call	0x12510	; 0x12510 <AMIGO_is_MTA>
   164e6:	ec 01       	movw	r28, r24
   164e8:	89 2b       	or	r24, r25
   164ea:	51 f0       	breq	.+20     	; 0x16500 <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   164ec:	e0 91 e8 19 	lds	r30, 0x19E8	; 0x8019e8 <AMIGOp>
   164f0:	f0 91 e9 19 	lds	r31, 0x19E9	; 0x8019e9 <AMIGOp+0x1>
   164f4:	81 81       	ldd	r24, Z+1	; 0x01
   164f6:	90 e0       	ldi	r25, 0x00	; 0
   164f8:	0e 94 7d 8c 	call	0x118fa	; 0x118fa <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   164fc:	e6 d9       	rcall	.-3124   	; 0x158ca <amigo_cmd_dsj>
   164fe:	c6 cf       	rjmp	.-116    	; 0x1648c <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   16500:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   16504:	90 e0       	ldi	r25, 0x00	; 0
   16506:	0e 94 77 92 	call	0x124ee	; 0x124ee <AMIGO_is_MLA>
   1650a:	02 c0       	rjmp	.+4      	; 0x16510 <AMIGO_COMMANDS+0x128>
        {
            // NOP
        }
    }
    return(0);
   1650c:	c0 e0       	ldi	r28, 0x00	; 0
   1650e:	d0 e0       	ldi	r29, 0x00	; 0
}
   16510:	ce 01       	movw	r24, r28
   16512:	df 91       	pop	r29
   16514:	cf 91       	pop	r28
   16516:	08 95       	ret

00016518 <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   16518:	e7 ed       	ldi	r30, 0xD7	; 215
   1651a:	f9 e1       	ldi	r31, 0x19	; 25
   1651c:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   1651e:	10 82       	st	Z, r1
   16520:	11 82       	std	Z+1, r1	; 0x01
   16522:	12 82       	std	Z+2, r1	; 0x02
   16524:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   16526:	15 82       	std	Z+5, r1	; 0x05
   16528:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   1652a:	12 86       	std	Z+10, r1	; 0x0a
   1652c:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   1652e:	14 86       	std	Z+12, r1	; 0x0c
   16530:	13 86       	std	Z+11, r1	; 0x0b
   16532:	08 95       	ret

00016534 <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   16534:	cf 93       	push	r28
   16536:	df 93       	push	r29
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   16538:	20 91 e0 19 	lds	r18, 0x19E0	; 0x8019e0 <plot+0x9>
   1653c:	30 91 e1 19 	lds	r19, 0x19E1	; 0x8019e1 <plot+0xa>
   16540:	21 15       	cp	r18, r1
   16542:	31 05       	cpc	r19, r1
   16544:	09 f4       	brne	.+2      	; 0x16548 <receive_plot_flush+0x14>
   16546:	4a c0       	rjmp	.+148    	; 0x165dc <receive_plot_flush+0xa8>
   16548:	80 91 db 19 	lds	r24, 0x19DB	; 0x8019db <plot+0x4>
   1654c:	90 91 dc 19 	lds	r25, 0x19DC	; 0x8019dc <plot+0x5>
   16550:	00 97       	sbiw	r24, 0x00	; 0
   16552:	09 f4       	brne	.+2      	; 0x16556 <receive_plot_flush+0x22>
   16554:	45 c0       	rjmp	.+138    	; 0x165e0 <receive_plot_flush+0xac>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   16556:	ac 01       	movw	r20, r24
   16558:	61 e0       	ldi	r22, 0x01	; 1
   1655a:	70 e0       	ldi	r23, 0x00	; 0
   1655c:	80 91 e2 19 	lds	r24, 0x19E2	; 0x8019e2 <plot+0xb>
   16560:	90 91 e3 19 	lds	r25, 0x19E3	; 0x8019e3 <plot+0xc>
   16564:	0e 94 38 80 	call	0x10070	; 0x10070 <fwrite>
   16568:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   1656a:	80 91 db 19 	lds	r24, 0x19DB	; 0x8019db <plot+0x4>
   1656e:	90 91 dc 19 	lds	r25, 0x19DC	; 0x8019dc <plot+0x5>
   16572:	c8 17       	cp	r28, r24
   16574:	d9 07       	cpc	r29, r25
   16576:	31 f1       	breq	.+76     	; 0x165c4 <receive_plot_flush+0x90>
    {
        if(debuglevel & (1+32))
   16578:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1657c:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   16580:	81 72       	andi	r24, 0x21	; 33
   16582:	99 27       	eor	r25, r25
   16584:	89 2b       	or	r24, r25
   16586:	d9 f0       	breq	.+54     	; 0x165be <receive_plot_flush+0x8a>
        {
            perror("receive_plot_flush");
   16588:	83 ed       	ldi	r24, 0xD3	; 211
   1658a:	93 e1       	ldi	r25, 0x13	; 19
   1658c:	0e 94 e6 7b 	call	0xf7cc	; 0xf7cc <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   16590:	df 93       	push	r29
   16592:	cf 93       	push	r28
   16594:	80 91 dc 19 	lds	r24, 0x19DC	; 0x8019dc <plot+0x5>
   16598:	8f 93       	push	r24
   1659a:	80 91 db 19 	lds	r24, 0x19DB	; 0x8019db <plot+0x4>
   1659e:	8f 93       	push	r24
   165a0:	85 e1       	ldi	r24, 0x15	; 21
   165a2:	99 e2       	ldi	r25, 0x29	; 41
   165a4:	1f 92       	push	r1
   165a6:	9f 93       	push	r25
   165a8:	8f 93       	push	r24
   165aa:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   165ae:	8d b7       	in	r24, 0x3d	; 61
   165b0:	9e b7       	in	r25, 0x3e	; 62
   165b2:	07 96       	adiw	r24, 0x07	; 7
   165b4:	0f b6       	in	r0, 0x3f	; 63
   165b6:	f8 94       	cli
   165b8:	9e bf       	out	0x3e, r25	; 62
   165ba:	0f be       	out	0x3f, r0	; 63
   165bc:	8d bf       	out	0x3d, r24	; 61
        }
        return(-1);
   165be:	8f ef       	ldi	r24, 0xFF	; 255
   165c0:	9f ef       	ldi	r25, 0xFF	; 255
   165c2:	0e c0       	rjmp	.+28     	; 0x165e0 <receive_plot_flush+0xac>
    }

    fno = fileno( plot.fp );
   165c4:	80 91 e0 19 	lds	r24, 0x19E0	; 0x8019e0 <plot+0x9>
   165c8:	90 91 e1 19 	lds	r25, 0x19E1	; 0x8019e1 <plot+0xa>
   165cc:	0e 94 83 79 	call	0xf306	; 0xf306 <fileno>
    if(fno < 0)
   165d0:	97 fd       	sbrc	r25, 7
   165d2:	f5 cf       	rjmp	.-22     	; 0x165be <receive_plot_flush+0x8a>
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
   165d4:	0e 94 82 7f 	call	0xff04	; 0xff04 <syncfs>
    return (ret);
   165d8:	ce 01       	movw	r24, r28
   165da:	02 c0       	rjmp	.+4      	; 0x165e0 <receive_plot_flush+0xac>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   165dc:	80 e0       	ldi	r24, 0x00	; 0
   165de:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
    return (ret);
}
   165e0:	df 91       	pop	r29
   165e2:	cf 91       	pop	r28
   165e4:	08 95       	ret

000165e6 <printer_close>:
   165e6:	a6 df       	rcall	.-180    	; 0x16534 <receive_plot_flush>
   165e8:	97 ff       	sbrs	r25, 7
   165ea:	03 c0       	rjmp	.+6      	; 0x165f2 <printer_close+0xc>
   165ec:	81 e0       	ldi	r24, 0x01	; 1
   165ee:	80 93 df 19 	sts	0x19DF, r24	; 0x8019df <plot+0x8>
   165f2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   165f6:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   165fa:	81 72       	andi	r24, 0x21	; 33
   165fc:	99 27       	eor	r25, r25
   165fe:	89 2b       	or	r24, r25
   16600:	71 f0       	breq	.+28     	; 0x1661e <printer_close+0x38>
   16602:	80 91 df 19 	lds	r24, 0x19DF	; 0x8019df <plot+0x8>
   16606:	88 23       	and	r24, r24
   16608:	51 f0       	breq	.+20     	; 0x1661e <printer_close+0x38>
   1660a:	84 e4       	ldi	r24, 0x44	; 68
   1660c:	99 e2       	ldi	r25, 0x29	; 41
   1660e:	1f 92       	push	r1
   16610:	9f 93       	push	r25
   16612:	8f 93       	push	r24
   16614:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   16618:	0f 90       	pop	r0
   1661a:	0f 90       	pop	r0
   1661c:	0f 90       	pop	r0
   1661e:	80 91 e0 19 	lds	r24, 0x19E0	; 0x8019e0 <plot+0x9>
   16622:	90 91 e1 19 	lds	r25, 0x19E1	; 0x8019e1 <plot+0xa>
   16626:	00 97       	sbiw	r24, 0x00	; 0
   16628:	09 f1       	breq	.+66     	; 0x1666c <printer_close+0x86>
   1662a:	0e 94 ba 80 	call	0x10174	; 0x10174 <fclose>
   1662e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   16632:	85 ff       	sbrs	r24, 5
   16634:	1b c0       	rjmp	.+54     	; 0x1666c <printer_close+0x86>
   16636:	80 91 da 19 	lds	r24, 0x19DA	; 0x8019da <plot+0x3>
   1663a:	8f 93       	push	r24
   1663c:	80 91 d9 19 	lds	r24, 0x19D9	; 0x8019d9 <plot+0x2>
   16640:	8f 93       	push	r24
   16642:	80 91 d8 19 	lds	r24, 0x19D8	; 0x8019d8 <plot+0x1>
   16646:	8f 93       	push	r24
   16648:	80 91 d7 19 	lds	r24, 0x19D7	; 0x8019d7 <plot>
   1664c:	8f 93       	push	r24
   1664e:	86 e3       	ldi	r24, 0x36	; 54
   16650:	99 e2       	ldi	r25, 0x29	; 41
   16652:	1f 92       	push	r1
   16654:	9f 93       	push	r25
   16656:	8f 93       	push	r24
   16658:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1665c:	8d b7       	in	r24, 0x3d	; 61
   1665e:	9e b7       	in	r25, 0x3e	; 62
   16660:	07 96       	adiw	r24, 0x07	; 7
   16662:	0f b6       	in	r0, 0x3f	; 63
   16664:	f8 94       	cli
   16666:	9e bf       	out	0x3e, r25	; 62
   16668:	0f be       	out	0x3f, r0	; 63
   1666a:	8d bf       	out	0x3d, r24	; 61
   1666c:	80 91 e2 19 	lds	r24, 0x19E2	; 0x8019e2 <plot+0xb>
   16670:	90 91 e3 19 	lds	r25, 0x19E3	; 0x8019e3 <plot+0xc>
   16674:	00 97       	sbiw	r24, 0x00	; 0
   16676:	11 f0       	breq	.+4      	; 0x1667c <printer_close+0x96>
   16678:	0e 94 13 2a 	call	0x5426	; 0x5426 <safefree>
   1667c:	4d cf       	rjmp	.-358    	; 0x16518 <printer_init>
   1667e:	08 95       	ret

00016680 <printer_open>:
   16680:	ac e4       	ldi	r26, 0x4C	; 76
   16682:	b0 e0       	ldi	r27, 0x00	; 0
   16684:	e6 e4       	ldi	r30, 0x46	; 70
   16686:	f3 eb       	ldi	r31, 0xB3	; 179
   16688:	0c 94 95 e9 	jmp	0x1d32a	; 0x1d32a <__prologue_saves__+0xc>
   1668c:	8c 01       	movw	r16, r24
   1668e:	89 2b       	or	r24, r25
   16690:	09 f0       	breq	.+2      	; 0x16694 <printer_open+0x14>
   16692:	4b c0       	rjmp	.+150    	; 0x1672a <printer_open+0xaa>
   16694:	be 01       	movw	r22, r28
   16696:	6f 5b       	subi	r22, 0xBF	; 191
   16698:	7f 4f       	sbci	r23, 0xFF	; 255
   1669a:	80 e0       	ldi	r24, 0x00	; 0
   1669c:	90 e0       	ldi	r25, 0x00	; 0
   1669e:	0e 94 9f 32 	call	0x653e	; 0x653e <clock_gettime>
   166a2:	25 96       	adiw	r28, 0x05	; 5
   166a4:	8c ad       	ldd	r24, Y+60	; 0x3c
   166a6:	9d ad       	ldd	r25, Y+61	; 0x3d
   166a8:	ae ad       	ldd	r26, Y+62	; 0x3e
   166aa:	bf ad       	ldd	r27, Y+63	; 0x3f
   166ac:	25 97       	sbiw	r28, 0x05	; 5
   166ae:	2d 96       	adiw	r28, 0x0d	; 13
   166b0:	8c af       	std	Y+60, r24	; 0x3c
   166b2:	9d af       	std	Y+61, r25	; 0x3d
   166b4:	ae af       	std	Y+62, r26	; 0x3e
   166b6:	bf af       	std	Y+63, r27	; 0x3f
   166b8:	2d 97       	sbiw	r28, 0x0d	; 13
   166ba:	ce 01       	movw	r24, r28
   166bc:	87 5b       	subi	r24, 0xB7	; 183
   166be:	9f 4f       	sbci	r25, 0xFF	; 255
   166c0:	0e 94 6f 36 	call	0x6cde	; 0x6cde <gmtime>
   166c4:	8c 01       	movw	r16, r24
   166c6:	fc 01       	movw	r30, r24
   166c8:	90 80       	ld	r9, Z
   166ca:	81 80       	ldd	r8, Z+1	; 0x01
   166cc:	b2 80       	ldd	r11, Z+2	; 0x02
   166ce:	a3 80       	ldd	r10, Z+3	; 0x03
   166d0:	d4 80       	ldd	r13, Z+4	; 0x04
   166d2:	c5 80       	ldd	r12, Z+5	; 0x05
   166d4:	e2 84       	ldd	r14, Z+10	; 0x0a
   166d6:	f3 84       	ldd	r15, Z+11	; 0x0b
   166d8:	f4 e9       	ldi	r31, 0x94	; 148
   166da:	ef 1a       	sub	r14, r31
   166dc:	f8 ef       	ldi	r31, 0xF8	; 248
   166de:	ff 0a       	sbc	r15, r31
   166e0:	fc 01       	movw	r30, r24
   166e2:	80 85       	ldd	r24, Z+8	; 0x08
   166e4:	91 85       	ldd	r25, Z+9	; 0x09
   166e6:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <tm_mon_to_ascii>
   166ea:	8f 92       	push	r8
   166ec:	9f 92       	push	r9
   166ee:	af 92       	push	r10
   166f0:	bf 92       	push	r11
   166f2:	cf 92       	push	r12
   166f4:	df 92       	push	r13
   166f6:	ff 92       	push	r15
   166f8:	ef 92       	push	r14
   166fa:	9f 93       	push	r25
   166fc:	8f 93       	push	r24
   166fe:	f8 01       	movw	r30, r16
   16700:	87 81       	ldd	r24, Z+7	; 0x07
   16702:	8f 93       	push	r24
   16704:	86 81       	ldd	r24, Z+6	; 0x06
   16706:	8f 93       	push	r24
   16708:	8b e7       	ldi	r24, 0x7B	; 123
   1670a:	99 e2       	ldi	r25, 0x29	; 41
   1670c:	1f 92       	push	r1
   1670e:	9f 93       	push	r25
   16710:	8f 93       	push	r24
   16712:	8e 01       	movw	r16, r28
   16714:	0f 5f       	subi	r16, 0xFF	; 255
   16716:	1f 4f       	sbci	r17, 0xFF	; 255
   16718:	1f 93       	push	r17
   1671a:	0f 93       	push	r16
   1671c:	0e 94 fa 44 	call	0x89f4	; 0x89f4 <sprintf_P>
   16720:	0f b6       	in	r0, 0x3f	; 63
   16722:	f8 94       	cli
   16724:	de bf       	out	0x3e, r29	; 62
   16726:	0f be       	out	0x3f, r0	; 63
   16728:	cd bf       	out	0x3d, r28	; 61
   1672a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1672e:	85 ff       	sbrs	r24, 5
   16730:	0e c0       	rjmp	.+28     	; 0x1674e <printer_open+0xce>
   16732:	1f 93       	push	r17
   16734:	0f 93       	push	r16
   16736:	85 e6       	ldi	r24, 0x65	; 101
   16738:	99 e2       	ldi	r25, 0x29	; 41
   1673a:	1f 92       	push	r1
   1673c:	9f 93       	push	r25
   1673e:	8f 93       	push	r24
   16740:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   16744:	0f 90       	pop	r0
   16746:	0f 90       	pop	r0
   16748:	0f 90       	pop	r0
   1674a:	0f 90       	pop	r0
   1674c:	0f 90       	pop	r0
   1674e:	63 e0       	ldi	r22, 0x03	; 3
   16750:	79 e0       	ldi	r23, 0x09	; 9
   16752:	c8 01       	movw	r24, r16
   16754:	0e 94 10 82 	call	0x10420	; 0x10420 <fopen>
   16758:	90 93 e1 19 	sts	0x19E1, r25	; 0x8019e1 <plot+0xa>
   1675c:	80 93 e0 19 	sts	0x19E0, r24	; 0x8019e0 <plot+0x9>
   16760:	89 2b       	or	r24, r25
   16762:	b9 f4       	brne	.+46     	; 0x16792 <printer_open+0x112>
   16764:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   16768:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1676c:	81 72       	andi	r24, 0x21	; 33
   1676e:	99 27       	eor	r25, r25
   16770:	89 2b       	or	r24, r25
   16772:	11 f1       	breq	.+68     	; 0x167b8 <printer_open+0x138>
   16774:	81 eb       	ldi	r24, 0xB1	; 177
   16776:	9d e0       	ldi	r25, 0x0D	; 13
   16778:	0e 94 e6 7b 	call	0xf7cc	; 0xf7cc <perror>
   1677c:	89 e5       	ldi	r24, 0x59	; 89
   1677e:	99 e2       	ldi	r25, 0x29	; 41
   16780:	1f 92       	push	r1
   16782:	9f 93       	push	r25
   16784:	8f 93       	push	r24
   16786:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1678a:	0f 90       	pop	r0
   1678c:	0f 90       	pop	r0
   1678e:	0f 90       	pop	r0
   16790:	13 c0       	rjmp	.+38     	; 0x167b8 <printer_open+0x138>
   16792:	61 e0       	ldi	r22, 0x01	; 1
   16794:	70 e0       	ldi	r23, 0x00	; 0
   16796:	81 e0       	ldi	r24, 0x01	; 1
   16798:	92 e0       	ldi	r25, 0x02	; 2
   1679a:	0e 94 ca 29 	call	0x5394	; 0x5394 <safecalloc>
   1679e:	90 93 e3 19 	sts	0x19E3, r25	; 0x8019e3 <plot+0xc>
   167a2:	80 93 e2 19 	sts	0x19E2, r24	; 0x8019e2 <plot+0xb>
   167a6:	89 2b       	or	r24, r25
   167a8:	09 f4       	brne	.+2      	; 0x167ac <printer_open+0x12c>
   167aa:	1d df       	rcall	.-454    	; 0x165e6 <printer_close>
   167ac:	80 e0       	ldi	r24, 0x00	; 0
   167ae:	92 e0       	ldi	r25, 0x02	; 2
   167b0:	90 93 de 19 	sts	0x19DE, r25	; 0x8019de <plot+0x7>
   167b4:	80 93 dd 19 	sts	0x19DD, r24	; 0x8019dd <plot+0x6>
   167b8:	c4 5b       	subi	r28, 0xB4	; 180
   167ba:	df 4f       	sbci	r29, 0xFF	; 255
   167bc:	ec e0       	ldi	r30, 0x0C	; 12
   167be:	0c 94 b1 e9 	jmp	0x1d362	; 0x1d362 <__epilogue_restores__+0xc>

000167c2 <printer_buffer>:
   167c2:	cf 93       	push	r28
   167c4:	df 93       	push	r29
   167c6:	ec 01       	movw	r28, r24
   167c8:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   167cc:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   167d0:	81 72       	andi	r24, 0x21	; 33
   167d2:	99 27       	eor	r25, r25
   167d4:	89 2b       	or	r24, r25
   167d6:	e9 f0       	breq	.+58     	; 0x16812 <printer_buffer+0x50>
   167d8:	80 91 d7 19 	lds	r24, 0x19D7	; 0x8019d7 <plot>
   167dc:	90 91 d8 19 	lds	r25, 0x19D8	; 0x8019d8 <plot+0x1>
   167e0:	20 91 d9 19 	lds	r18, 0x19D9	; 0x8019d9 <plot+0x2>
   167e4:	30 91 da 19 	lds	r19, 0x19DA	; 0x8019da <plot+0x3>
   167e8:	81 11       	cpse	r24, r1
   167ea:	13 c0       	rjmp	.+38     	; 0x16812 <printer_buffer+0x50>
   167ec:	3f 93       	push	r19
   167ee:	2f 93       	push	r18
   167f0:	9f 93       	push	r25
   167f2:	8f 93       	push	r24
   167f4:	8e e0       	ldi	r24, 0x0E	; 14
   167f6:	99 e2       	ldi	r25, 0x29	; 41
   167f8:	1f 92       	push	r1
   167fa:	9f 93       	push	r25
   167fc:	8f 93       	push	r24
   167fe:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   16802:	8d b7       	in	r24, 0x3d	; 61
   16804:	9e b7       	in	r25, 0x3e	; 62
   16806:	07 96       	adiw	r24, 0x07	; 7
   16808:	0f b6       	in	r0, 0x3f	; 63
   1680a:	f8 94       	cli
   1680c:	9e bf       	out	0x3e, r25	; 62
   1680e:	0f be       	out	0x3f, r0	; 63
   16810:	8d bf       	out	0x3d, r24	; 61
   16812:	ce 01       	movw	r24, r28
   16814:	88 27       	eor	r24, r24
   16816:	97 7f       	andi	r25, 0xF7	; 247
   16818:	89 2b       	or	r24, r25
   1681a:	41 f0       	breq	.+16     	; 0x1682c <printer_buffer+0x6a>
   1681c:	8b de       	rcall	.-746    	; 0x16534 <receive_plot_flush>
   1681e:	89 2b       	or	r24, r25
   16820:	09 f4       	brne	.+2      	; 0x16824 <printer_buffer+0x62>
   16822:	3f c0       	rjmp	.+126    	; 0x168a2 <printer_buffer+0xe0>
   16824:	81 e0       	ldi	r24, 0x01	; 1
   16826:	80 93 df 19 	sts	0x19DF, r24	; 0x8019df <plot+0x8>
   1682a:	3b c0       	rjmp	.+118    	; 0x168a2 <printer_buffer+0xe0>
   1682c:	20 91 e2 19 	lds	r18, 0x19E2	; 0x8019e2 <plot+0xb>
   16830:	30 91 e3 19 	lds	r19, 0x19E3	; 0x8019e3 <plot+0xc>
   16834:	80 91 db 19 	lds	r24, 0x19DB	; 0x8019db <plot+0x4>
   16838:	90 91 dc 19 	lds	r25, 0x19DC	; 0x8019dc <plot+0x5>
   1683c:	ac 01       	movw	r20, r24
   1683e:	4f 5f       	subi	r20, 0xFF	; 255
   16840:	5f 4f       	sbci	r21, 0xFF	; 255
   16842:	50 93 dc 19 	sts	0x19DC, r21	; 0x8019dc <plot+0x5>
   16846:	40 93 db 19 	sts	0x19DB, r20	; 0x8019db <plot+0x4>
   1684a:	f9 01       	movw	r30, r18
   1684c:	e8 0f       	add	r30, r24
   1684e:	f9 1f       	adc	r31, r25
   16850:	c0 83       	st	Z, r28
   16852:	80 91 d7 19 	lds	r24, 0x19D7	; 0x8019d7 <plot>
   16856:	90 91 d8 19 	lds	r25, 0x19D8	; 0x8019d8 <plot+0x1>
   1685a:	a0 91 d9 19 	lds	r26, 0x19D9	; 0x8019d9 <plot+0x2>
   1685e:	b0 91 da 19 	lds	r27, 0x19DA	; 0x8019da <plot+0x3>
   16862:	01 96       	adiw	r24, 0x01	; 1
   16864:	a1 1d       	adc	r26, r1
   16866:	b1 1d       	adc	r27, r1
   16868:	80 93 d7 19 	sts	0x19D7, r24	; 0x8019d7 <plot>
   1686c:	90 93 d8 19 	sts	0x19D8, r25	; 0x8019d8 <plot+0x1>
   16870:	a0 93 d9 19 	sts	0x19D9, r26	; 0x8019d9 <plot+0x2>
   16874:	b0 93 da 19 	sts	0x19DA, r27	; 0x8019da <plot+0x3>
   16878:	20 91 db 19 	lds	r18, 0x19DB	; 0x8019db <plot+0x4>
   1687c:	30 91 dc 19 	lds	r19, 0x19DC	; 0x8019dc <plot+0x5>
   16880:	80 91 dd 19 	lds	r24, 0x19DD	; 0x8019dd <plot+0x6>
   16884:	90 91 de 19 	lds	r25, 0x19DE	; 0x8019de <plot+0x7>
   16888:	28 17       	cp	r18, r24
   1688a:	39 07       	cpc	r19, r25
   1688c:	54 f0       	brlt	.+20     	; 0x168a2 <printer_buffer+0xe0>
   1688e:	52 de       	rcall	.-860    	; 0x16534 <receive_plot_flush>
   16890:	97 ff       	sbrs	r25, 7
   16892:	03 c0       	rjmp	.+6      	; 0x1689a <printer_buffer+0xd8>
   16894:	81 e0       	ldi	r24, 0x01	; 1
   16896:	80 93 df 19 	sts	0x19DF, r24	; 0x8019df <plot+0x8>
   1689a:	10 92 dc 19 	sts	0x19DC, r1	; 0x8019dc <plot+0x5>
   1689e:	10 92 db 19 	sts	0x19DB, r1	; 0x8019db <plot+0x4>
   168a2:	df 91       	pop	r29
   168a4:	cf 91       	pop	r28
   168a6:	08 95       	ret

000168a8 <PRINTER_COMMANDS>:
   168a8:	cf 93       	push	r28
   168aa:	c8 2f       	mov	r28, r24
   168ac:	80 91 3b 1f 	lds	r24, 0x1F3B	; 0x801f3b <listening>
   168b0:	90 e0       	ldi	r25, 0x00	; 0
   168b2:	0e 94 aa 92 	call	0x12554	; 0x12554 <PRINTER_is_MLA>
   168b6:	89 2b       	or	r24, r25
   168b8:	49 f0       	breq	.+18     	; 0x168cc <PRINTER_COMMANDS+0x24>
   168ba:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   168be:	85 ff       	sbrs	r24, 5
   168c0:	1e c0       	rjmp	.+60     	; 0x168fe <PRINTER_COMMANDS+0x56>
   168c2:	1f 92       	push	r1
   168c4:	cf 93       	push	r28
   168c6:	82 ef       	ldi	r24, 0xF2	; 242
   168c8:	98 e2       	ldi	r25, 0x28	; 40
   168ca:	0f c0       	rjmp	.+30     	; 0x168ea <PRINTER_COMMANDS+0x42>
   168cc:	80 91 39 1f 	lds	r24, 0x1F39	; 0x801f39 <talking>
   168d0:	90 e0       	ldi	r25, 0x00	; 0
   168d2:	0e 94 bb 92 	call	0x12576	; 0x12576 <PRINTER_is_MTA>
   168d6:	89 2b       	or	r24, r25
   168d8:	91 f0       	breq	.+36     	; 0x168fe <PRINTER_COMMANDS+0x56>
   168da:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   168de:	85 ff       	sbrs	r24, 5
   168e0:	0e c0       	rjmp	.+28     	; 0x168fe <PRINTER_COMMANDS+0x56>
   168e2:	1f 92       	push	r1
   168e4:	cf 93       	push	r28
   168e6:	88 ed       	ldi	r24, 0xD8	; 216
   168e8:	98 e2       	ldi	r25, 0x28	; 40
   168ea:	1f 92       	push	r1
   168ec:	9f 93       	push	r25
   168ee:	8f 93       	push	r24
   168f0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   168f4:	0f 90       	pop	r0
   168f6:	0f 90       	pop	r0
   168f8:	0f 90       	pop	r0
   168fa:	0f 90       	pop	r0
   168fc:	0f 90       	pop	r0
   168fe:	80 e0       	ldi	r24, 0x00	; 0
   16900:	90 e0       	ldi	r25, 0x00	; 0
   16902:	cf 91       	pop	r28
   16904:	08 95       	ret

00016906 <plot_echo>:
   16906:	cf 92       	push	r12
   16908:	df 92       	push	r13
   1690a:	ff 92       	push	r15
   1690c:	0f 93       	push	r16
   1690e:	1f 93       	push	r17
   16910:	cf 93       	push	r28
   16912:	df 93       	push	r29
   16914:	cd b7       	in	r28, 0x3d	; 61
   16916:	de b7       	in	r29, 0x3e	; 62
   16918:	da 95       	dec	r29
   1691a:	0f b6       	in	r0, 0x3f	; 63
   1691c:	f8 94       	cli
   1691e:	de bf       	out	0x3e, r29	; 62
   16920:	0f be       	out	0x3f, r0	; 63
   16922:	cd bf       	out	0x3d, r28	; 61
   16924:	f8 2e       	mov	r15, r24
   16926:	83 e0       	ldi	r24, 0x03	; 3
   16928:	90 e0       	ldi	r25, 0x00	; 0
   1692a:	e9 d0       	rcall	.+466    	; 0x16afe <find_type>
   1692c:	8c 01       	movw	r16, r24
   1692e:	0f 3f       	cpi	r16, 0xFF	; 255
   16930:	8f ef       	ldi	r24, 0xFF	; 255
   16932:	18 07       	cpc	r17, r24
   16934:	59 f4       	brne	.+22     	; 0x1694c <plot_echo+0x46>
   16936:	83 ec       	ldi	r24, 0xC3	; 195
   16938:	98 e2       	ldi	r25, 0x28	; 40
   1693a:	1f 92       	push	r1
   1693c:	9f 93       	push	r25
   1693e:	8f 93       	push	r24
   16940:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   16944:	0f 90       	pop	r0
   16946:	0f 90       	pop	r0
   16948:	0f 90       	pop	r0
   1694a:	63 c0       	rjmp	.+198    	; 0x16a12 <plot_echo+0x10c>
   1694c:	4c de       	rcall	.-872    	; 0x165e6 <printer_close>
   1694e:	80 e0       	ldi	r24, 0x00	; 0
   16950:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <uart_keyhit>
   16954:	89 2b       	or	r24, r25
   16956:	31 f0       	breq	.+12     	; 0x16964 <plot_echo+0x5e>
   16958:	80 e0       	ldi	r24, 0x00	; 0
   1695a:	0e 94 0f 2c 	call	0x581e	; 0x581e <uart_rx_byte>
   1695e:	0e 94 1a 79 	call	0xf234	; 0xf234 <putchar>
   16962:	f5 cf       	rjmp	.-22     	; 0x1694e <plot_echo+0x48>
   16964:	80 91 0c 1d 	lds	r24, 0x1D0C	; 0x801d0c <__iob+0x2>
   16968:	90 91 0d 1d 	lds	r25, 0x1D0D	; 0x801d0d <__iob+0x3>
   1696c:	0e 94 7b 8e 	call	0x11cf6	; 0x11cf6 <gpib_decode_header>
   16970:	20 e0       	ldi	r18, 0x00	; 0
   16972:	30 e0       	ldi	r19, 0x00	; 0
   16974:	46 ee       	ldi	r20, 0xE6	; 230
   16976:	53 e1       	ldi	r21, 0x13	; 19
   16978:	6f 2d       	mov	r22, r15
   1697a:	80 2f       	mov	r24, r16
   1697c:	0e 94 81 c6 	call	0x18d02	; 0x18d02 <controller_send_str>
   16980:	20 e0       	ldi	r18, 0x00	; 0
   16982:	31 e0       	ldi	r19, 0x01	; 1
   16984:	ce 01       	movw	r24, r28
   16986:	01 96       	adiw	r24, 0x01	; 1
   16988:	6c 01       	movw	r12, r24
   1698a:	ac 01       	movw	r20, r24
   1698c:	60 2f       	mov	r22, r16
   1698e:	8f 2d       	mov	r24, r15
   16990:	0e 94 c4 c6 	call	0x18d88	; 0x18d88 <controller_read_str>
   16994:	df 92       	push	r13
   16996:	cf 92       	push	r12
   16998:	9f 93       	push	r25
   1699a:	8f 93       	push	r24
   1699c:	81 eb       	ldi	r24, 0xB1	; 177
   1699e:	98 e2       	ldi	r25, 0x28	; 40
   169a0:	1f 92       	push	r1
   169a2:	9f 93       	push	r25
   169a4:	8f 93       	push	r24
   169a6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   169aa:	20 e0       	ldi	r18, 0x00	; 0
   169ac:	30 e0       	ldi	r19, 0x00	; 0
   169ae:	4d ee       	ldi	r20, 0xED	; 237
   169b0:	53 e1       	ldi	r21, 0x13	; 19
   169b2:	6f 2d       	mov	r22, r15
   169b4:	80 2f       	mov	r24, r16
   169b6:	0e 94 81 c6 	call	0x18d02	; 0x18d02 <controller_send_str>
   169ba:	20 e0       	ldi	r18, 0x00	; 0
   169bc:	31 e0       	ldi	r19, 0x01	; 1
   169be:	a6 01       	movw	r20, r12
   169c0:	60 2f       	mov	r22, r16
   169c2:	8f 2d       	mov	r24, r15
   169c4:	0e 94 c4 c6 	call	0x18d88	; 0x18d88 <controller_read_str>
   169c8:	df 92       	push	r13
   169ca:	cf 92       	push	r12
   169cc:	9f 93       	push	r25
   169ce:	8f 93       	push	r24
   169d0:	8f e9       	ldi	r24, 0x9F	; 159
   169d2:	98 e2       	ldi	r25, 0x28	; 40
   169d4:	1f 92       	push	r1
   169d6:	9f 93       	push	r25
   169d8:	8f 93       	push	r24
   169da:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   169de:	20 e0       	ldi	r18, 0x00	; 0
   169e0:	30 e0       	ldi	r19, 0x00	; 0
   169e2:	40 e0       	ldi	r20, 0x00	; 0
   169e4:	54 e1       	ldi	r21, 0x14	; 20
   169e6:	6f 2d       	mov	r22, r15
   169e8:	80 2f       	mov	r24, r16
   169ea:	0e 94 81 c6 	call	0x18d02	; 0x18d02 <controller_send_str>
   169ee:	60 2f       	mov	r22, r16
   169f0:	8f 2d       	mov	r24, r15
   169f2:	0e 94 0a c7 	call	0x18e14	; 0x18e14 <controller_read_trace>
   169f6:	9f 93       	push	r25
   169f8:	8f 93       	push	r24
   169fa:	8a e8       	ldi	r24, 0x8A	; 138
   169fc:	98 e2       	ldi	r25, 0x28	; 40
   169fe:	1f 92       	push	r1
   16a00:	9f 93       	push	r25
   16a02:	8f 93       	push	r24
   16a04:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   16a08:	0f b6       	in	r0, 0x3f	; 63
   16a0a:	f8 94       	cli
   16a0c:	de bf       	out	0x3e, r29	; 62
   16a0e:	0f be       	out	0x3f, r0	; 63
   16a10:	cd bf       	out	0x3d, r28	; 61
   16a12:	d3 95       	inc	r29
   16a14:	0f b6       	in	r0, 0x3f	; 63
   16a16:	f8 94       	cli
   16a18:	de bf       	out	0x3e, r29	; 62
   16a1a:	0f be       	out	0x3f, r0	; 63
   16a1c:	cd bf       	out	0x3d, r28	; 61
   16a1e:	df 91       	pop	r29
   16a20:	cf 91       	pop	r28
   16a22:	1f 91       	pop	r17
   16a24:	0f 91       	pop	r16
   16a26:	ff 90       	pop	r15
   16a28:	df 90       	pop	r13
   16a2a:	cf 90       	pop	r12
   16a2c:	08 95       	ret

00016a2e <V2B_MSB>:
   16a2e:	0f 93       	push	r16
   16a30:	1f 93       	push	r17
   16a32:	da 01       	movw	r26, r20
   16a34:	11 97       	sbiw	r26, 0x01	; 1
   16a36:	b7 fd       	sbrc	r27, 7
   16a38:	0b c0       	rjmp	.+22     	; 0x16a50 <V2B_MSB+0x22>
   16a3a:	fd 01       	movw	r30, r26
   16a3c:	e6 0f       	add	r30, r22
   16a3e:	f7 1f       	adc	r31, r23
   16a40:	e8 0f       	add	r30, r24
   16a42:	f9 1f       	adc	r31, r25
   16a44:	00 83       	st	Z, r16
   16a46:	01 2f       	mov	r16, r17
   16a48:	12 2f       	mov	r17, r18
   16a4a:	23 2f       	mov	r18, r19
   16a4c:	33 27       	eor	r19, r19
   16a4e:	f2 cf       	rjmp	.-28     	; 0x16a34 <V2B_MSB+0x6>
   16a50:	1f 91       	pop	r17
   16a52:	0f 91       	pop	r16
   16a54:	08 95       	ret

00016a56 <V2B_LSB>:
   16a56:	0f 93       	push	r16
   16a58:	1f 93       	push	r17
   16a5a:	fc 01       	movw	r30, r24
   16a5c:	e6 0f       	add	r30, r22
   16a5e:	f7 1f       	adc	r31, r23
   16a60:	bf 01       	movw	r22, r30
   16a62:	cf 01       	movw	r24, r30
   16a64:	86 1b       	sub	r24, r22
   16a66:	97 0b       	sbc	r25, r23
   16a68:	84 17       	cp	r24, r20
   16a6a:	95 07       	cpc	r25, r21
   16a6c:	34 f4       	brge	.+12     	; 0x16a7a <V2B_LSB+0x24>
   16a6e:	01 93       	st	Z+, r16
   16a70:	01 2f       	mov	r16, r17
   16a72:	12 2f       	mov	r17, r18
   16a74:	23 2f       	mov	r18, r19
   16a76:	33 27       	eor	r19, r19
   16a78:	f4 cf       	rjmp	.-24     	; 0x16a62 <V2B_LSB+0xc>
   16a7a:	1f 91       	pop	r17
   16a7c:	0f 91       	pop	r16
   16a7e:	08 95       	ret

00016a80 <B2V_MSB>:
   16a80:	cf 92       	push	r12
   16a82:	df 92       	push	r13
   16a84:	ef 92       	push	r14
   16a86:	ff 92       	push	r15
   16a88:	fc 01       	movw	r30, r24
   16a8a:	e6 0f       	add	r30, r22
   16a8c:	f7 1f       	adc	r31, r23
   16a8e:	60 e0       	ldi	r22, 0x00	; 0
   16a90:	70 e0       	ldi	r23, 0x00	; 0
   16a92:	cb 01       	movw	r24, r22
   16a94:	df 01       	movw	r26, r30
   16a96:	9f 01       	movw	r18, r30
   16a98:	2a 1b       	sub	r18, r26
   16a9a:	3b 0b       	sbc	r19, r27
   16a9c:	24 17       	cp	r18, r20
   16a9e:	35 07       	cpc	r19, r21
   16aa0:	4c f4       	brge	.+18     	; 0x16ab4 <B2V_MSB+0x34>
   16aa2:	cc 24       	eor	r12, r12
   16aa4:	d6 2e       	mov	r13, r22
   16aa6:	e7 2e       	mov	r14, r23
   16aa8:	f8 2e       	mov	r15, r24
   16aaa:	21 91       	ld	r18, Z+
   16aac:	c7 01       	movw	r24, r14
   16aae:	b6 01       	movw	r22, r12
   16ab0:	62 2b       	or	r22, r18
   16ab2:	f1 cf       	rjmp	.-30     	; 0x16a96 <B2V_MSB+0x16>
   16ab4:	ff 90       	pop	r15
   16ab6:	ef 90       	pop	r14
   16ab8:	df 90       	pop	r13
   16aba:	cf 90       	pop	r12
   16abc:	08 95       	ret

00016abe <B2V_LSB>:
   16abe:	cf 92       	push	r12
   16ac0:	df 92       	push	r13
   16ac2:	ef 92       	push	r14
   16ac4:	ff 92       	push	r15
   16ac6:	9c 01       	movw	r18, r24
   16ac8:	db 01       	movw	r26, r22
   16aca:	60 e0       	ldi	r22, 0x00	; 0
   16acc:	70 e0       	ldi	r23, 0x00	; 0
   16ace:	cb 01       	movw	r24, r22
   16ad0:	41 50       	subi	r20, 0x01	; 1
   16ad2:	51 09       	sbc	r21, r1
   16ad4:	57 fd       	sbrc	r21, 7
   16ad6:	0e c0       	rjmp	.+28     	; 0x16af4 <B2V_LSB+0x36>
   16ad8:	cc 24       	eor	r12, r12
   16ada:	d6 2e       	mov	r13, r22
   16adc:	e7 2e       	mov	r14, r23
   16ade:	f8 2e       	mov	r15, r24
   16ae0:	fa 01       	movw	r30, r20
   16ae2:	ea 0f       	add	r30, r26
   16ae4:	fb 1f       	adc	r31, r27
   16ae6:	e2 0f       	add	r30, r18
   16ae8:	f3 1f       	adc	r31, r19
   16aea:	e0 81       	ld	r30, Z
   16aec:	c7 01       	movw	r24, r14
   16aee:	b6 01       	movw	r22, r12
   16af0:	6e 2b       	or	r22, r30
   16af2:	ee cf       	rjmp	.-36     	; 0x16ad0 <B2V_LSB+0x12>
   16af4:	ff 90       	pop	r15
   16af6:	ef 90       	pop	r14
   16af8:	df 90       	pop	r13
   16afa:	cf 90       	pop	r12
   16afc:	08 95       	ret

00016afe <find_type>:
   16afe:	ef e3       	ldi	r30, 0x3F	; 63
   16b00:	ff e1       	ldi	r31, 0x1F	; 31
   16b02:	20 e0       	ldi	r18, 0x00	; 0
   16b04:	30 e0       	ldi	r19, 0x00	; 0
   16b06:	40 81       	ld	r20, Z
   16b08:	50 e0       	ldi	r21, 0x00	; 0
   16b0a:	48 17       	cp	r20, r24
   16b0c:	59 07       	cpc	r21, r25
   16b0e:	49 f0       	breq	.+18     	; 0x16b22 <find_type+0x24>
   16b10:	2f 5f       	subi	r18, 0xFF	; 255
   16b12:	3f 4f       	sbci	r19, 0xFF	; 255
   16b14:	37 96       	adiw	r30, 0x07	; 7
   16b16:	28 30       	cpi	r18, 0x08	; 8
   16b18:	31 05       	cpc	r19, r1
   16b1a:	a9 f7       	brne	.-22     	; 0x16b06 <find_type+0x8>
   16b1c:	8f ef       	ldi	r24, 0xFF	; 255
   16b1e:	9f ef       	ldi	r25, 0xFF	; 255
   16b20:	08 95       	ret
   16b22:	c9 01       	movw	r24, r18
   16b24:	08 95       	ret

00016b26 <type_to_str>:
   16b26:	00 97       	sbiw	r24, 0x00	; 0
   16b28:	59 f0       	breq	.+22     	; 0x16b40 <type_to_str+0x1a>
   16b2a:	81 30       	cpi	r24, 0x01	; 1
   16b2c:	91 05       	cpc	r25, r1
   16b2e:	59 f0       	breq	.+22     	; 0x16b46 <type_to_str+0x20>
   16b30:	82 30       	cpi	r24, 0x02	; 2
   16b32:	91 05       	cpc	r25, r1
   16b34:	59 f0       	breq	.+22     	; 0x16b4c <type_to_str+0x26>
   16b36:	03 97       	sbiw	r24, 0x03	; 3
   16b38:	61 f0       	breq	.+24     	; 0x16b52 <type_to_str+0x2c>
   16b3a:	86 e3       	ldi	r24, 0x36	; 54
   16b3c:	94 e1       	ldi	r25, 0x14	; 20
   16b3e:	08 95       	ret
   16b40:	8c e0       	ldi	r24, 0x0C	; 12
   16b42:	94 e1       	ldi	r25, 0x14	; 20
   16b44:	08 95       	ret
   16b46:	84 e1       	ldi	r24, 0x14	; 20
   16b48:	94 e1       	ldi	r25, 0x14	; 20
   16b4a:	08 95       	ret
   16b4c:	8c e2       	ldi	r24, 0x2C	; 44
   16b4e:	94 e1       	ldi	r25, 0x14	; 20
   16b50:	08 95       	ret
   16b52:	8f e1       	ldi	r24, 0x1F	; 31
   16b54:	94 e1       	ldi	r25, 0x14	; 20
   16b56:	08 95       	ret

00016b58 <find_free>:
   16b58:	80 e0       	ldi	r24, 0x00	; 0
   16b5a:	90 e0       	ldi	r25, 0x00	; 0
   16b5c:	d0 cf       	rjmp	.-96     	; 0x16afe <find_type>
   16b5e:	08 95       	ret

00016b60 <find_device>:
int find_device(int type, int address, int base)
{
    int i;

    ///@skip Only interested in device addresses
    if(address < BASE_MLA || address >(BASE_MSA+30))
   16b60:	9b 01       	movw	r18, r22
   16b62:	20 52       	subi	r18, 0x20	; 32
   16b64:	31 09       	sbc	r19, r1
   16b66:	2f 35       	cpi	r18, 0x5F	; 95
   16b68:	31 05       	cpc	r19, r1
   16b6a:	f8 f4       	brcc	.+62     	; 0x16baa <find_device+0x4a>
        return(-1);

    ///@brief Make sure address is in expected range
    if(address < base || address > (base+30))
   16b6c:	64 17       	cp	r22, r20
   16b6e:	75 07       	cpc	r23, r21
   16b70:	e4 f0       	brlt	.+56     	; 0x16baa <find_device+0x4a>
   16b72:	9a 01       	movw	r18, r20
   16b74:	22 5e       	subi	r18, 0xE2	; 226
   16b76:	3f 4f       	sbci	r19, 0xFF	; 255
   16b78:	26 17       	cp	r18, r22
   16b7a:	37 07       	cpc	r19, r23
   16b7c:	b4 f0       	brlt	.+44     	; 0x16baa <find_device+0x4a>
        return(-1);

    ///@brief convert to device address
    address -= base;
   16b7e:	64 1b       	sub	r22, r20
   16b80:	75 0b       	sbc	r23, r21
   16b82:	ef e3       	ldi	r30, 0x3F	; 63
   16b84:	ff e1       	ldi	r31, 0x1F	; 31

    ///@brief search for device address
    for(i=0;i<MAX_DEVICES;++i)
   16b86:	20 e0       	ldi	r18, 0x00	; 0
   16b88:	30 e0       	ldi	r19, 0x00	; 0
    {
        if(Devices[i].TYPE == type && Devices[i].ADDRESS == address)
   16b8a:	40 81       	ld	r20, Z
   16b8c:	50 e0       	ldi	r21, 0x00	; 0
   16b8e:	48 17       	cp	r20, r24
   16b90:	59 07       	cpc	r21, r25
   16b92:	29 f4       	brne	.+10     	; 0x16b9e <find_device+0x3e>
   16b94:	41 81       	ldd	r20, Z+1	; 0x01
   16b96:	50 e0       	ldi	r21, 0x00	; 0
   16b98:	64 17       	cp	r22, r20
   16b9a:	75 07       	cpc	r23, r21
   16b9c:	49 f0       	breq	.+18     	; 0x16bb0 <find_device+0x50>

    ///@brief convert to device address
    address -= base;

    ///@brief search for device address
    for(i=0;i<MAX_DEVICES;++i)
   16b9e:	2f 5f       	subi	r18, 0xFF	; 255
   16ba0:	3f 4f       	sbci	r19, 0xFF	; 255
   16ba2:	37 96       	adiw	r30, 0x07	; 7
   16ba4:	28 30       	cpi	r18, 0x08	; 8
   16ba6:	31 05       	cpc	r19, r1
   16ba8:	81 f7       	brne	.-32     	; 0x16b8a <find_device+0x2a>
{
    int i;

    ///@skip Only interested in device addresses
    if(address < BASE_MLA || address >(BASE_MSA+30))
        return(-1);
   16baa:	8f ef       	ldi	r24, 0xFF	; 255
   16bac:	9f ef       	ldi	r25, 0xFF	; 255
   16bae:	08 95       	ret
   16bb0:	c9 01       	movw	r24, r18
    {
        if(Devices[i].TYPE == type && Devices[i].ADDRESS == address)
            return(i);
    }
    return(-1);
}
   16bb2:	08 95       	ret

00016bb4 <set_active_device>:
/// Since we can be called multiple times per single GPIB state we do not
/// display state changes here. Other code displays the active state.
///@param index: Devices[] index
///@return 1 on success or 0 on fail
int set_active_device(int index)
{
   16bb4:	1f 93       	push	r17
   16bb6:	cf 93       	push	r28
   16bb8:	df 93       	push	r29
    int type,address;

    ///@brief We also check for -1 
    /// So the result of find_device() can be used without additional tests
    if(index == -1)
   16bba:	8f 3f       	cpi	r24, 0xFF	; 255
   16bbc:	2f ef       	ldi	r18, 0xFF	; 255
   16bbe:	92 07       	cpc	r25, r18
   16bc0:	09 f4       	brne	.+2      	; 0x16bc4 <set_active_device+0x10>
   16bc2:	fc c0       	rjmp	.+504    	; 0x16dbc <set_active_device+0x208>
   16bc4:	ec 01       	movw	r28, r24
    {
        return(0);
    }

    if(index < 0 || index >= MAX_DEVICES)
   16bc6:	08 97       	sbiw	r24, 0x08	; 8
   16bc8:	c0 f0       	brcs	.+48     	; 0x16bfa <set_active_device+0x46>
    {
        if(debuglevel & 1)
   16bca:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   16bce:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   16bd2:	9c 01       	movw	r18, r24
   16bd4:	21 70       	andi	r18, 0x01	; 1
   16bd6:	33 27       	eor	r19, r19
   16bd8:	80 ff       	sbrs	r24, 0
   16bda:	f2 c0       	rjmp	.+484    	; 0x16dc0 <set_active_device+0x20c>
            printf("set_active_device:(%d) out of range\n", index);
   16bdc:	df 93       	push	r29
   16bde:	cf 93       	push	r28
   16be0:	8e e9       	ldi	r24, 0x9E	; 158
   16be2:	92 e3       	ldi	r25, 0x32	; 50
   16be4:	1f 92       	push	r1
   16be6:	9f 93       	push	r25
   16be8:	8f 93       	push	r24
   16bea:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   16bee:	0f 90       	pop	r0
   16bf0:	0f 90       	pop	r0
   16bf2:	0f 90       	pop	r0
   16bf4:	0f 90       	pop	r0
   16bf6:	0f 90       	pop	r0
   16bf8:	e1 c0       	rjmp	.+450    	; 0x16dbc <set_active_device+0x208>
        return(0);
    }

    type = Devices[index].TYPE;
    address = Devices[index].ADDRESS;
   16bfa:	87 e0       	ldi	r24, 0x07	; 7
   16bfc:	8c 9f       	mul	r24, r28
   16bfe:	f0 01       	movw	r30, r0
   16c00:	8d 9f       	mul	r24, r29
   16c02:	f0 0d       	add	r31, r0
   16c04:	11 24       	eor	r1, r1
   16c06:	e1 5c       	subi	r30, 0xC1	; 193
   16c08:	f0 4e       	sbci	r31, 0xE0	; 224
   16c0a:	81 81       	ldd	r24, Z+1	; 0x01
    if(address < 0 || address > 30)
   16c0c:	8f 31       	cpi	r24, 0x1F	; 31
   16c0e:	e8 f0       	brcs	.+58     	; 0x16c4a <set_active_device+0x96>
    {
        if(debuglevel & 1)
   16c10:	40 91 b0 01 	lds	r20, 0x01B0	; 0x8001b0 <debuglevel>
   16c14:	50 91 b1 01 	lds	r21, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   16c18:	9a 01       	movw	r18, r20
   16c1a:	21 70       	andi	r18, 0x01	; 1
   16c1c:	33 27       	eor	r19, r19
   16c1e:	40 ff       	sbrs	r20, 0
   16c20:	cf c0       	rjmp	.+414    	; 0x16dc0 <set_active_device+0x20c>
            printf("set_active_device: index:%d address: %02XH out of range\n", index,address);
   16c22:	1f 92       	push	r1
   16c24:	8f 93       	push	r24
   16c26:	df 93       	push	r29
   16c28:	cf 93       	push	r28
   16c2a:	85 e6       	ldi	r24, 0x65	; 101
   16c2c:	92 e3       	ldi	r25, 0x32	; 50
   16c2e:	1f 92       	push	r1
   16c30:	9f 93       	push	r25
   16c32:	8f 93       	push	r24
   16c34:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   16c38:	8d b7       	in	r24, 0x3d	; 61
   16c3a:	9e b7       	in	r25, 0x3e	; 62
   16c3c:	07 96       	adiw	r24, 0x07	; 7
   16c3e:	0f b6       	in	r0, 0x3f	; 63
   16c40:	f8 94       	cli
   16c42:	9e bf       	out	0x3e, r25	; 62
   16c44:	0f be       	out	0x3f, r0	; 63
   16c46:	8d bf       	out	0x3d, r24	; 61
   16c48:	b9 c0       	rjmp	.+370    	; 0x16dbc <set_active_device+0x208>
        if(debuglevel & 1)
            printf("set_active_device:(%d) out of range\n", index);
        return(0);
    }

    type = Devices[index].TYPE;
   16c4a:	10 81       	ld	r17, Z
   16c4c:	81 2f       	mov	r24, r17
   16c4e:	90 e0       	ldi	r25, 0x00	; 0
        if(debuglevel & 1)
            printf("set_active_device: index:%d address: %02XH out of range\n", index,address);
        return(0);
    }

    if(Devices[index].dev == NULL)
   16c50:	23 81       	ldd	r18, Z+3	; 0x03
   16c52:	34 81       	ldd	r19, Z+4	; 0x04
   16c54:	21 15       	cp	r18, r1
   16c56:	31 05       	cpc	r19, r1
   16c58:	01 f5       	brne	.+64     	; 0x16c9a <set_active_device+0xe6>
    {
        if(debuglevel & 1)
   16c5a:	40 91 b0 01 	lds	r20, 0x01B0	; 0x8001b0 <debuglevel>
   16c5e:	50 91 b1 01 	lds	r21, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   16c62:	9a 01       	movw	r18, r20
   16c64:	21 70       	andi	r18, 0x01	; 1
   16c66:	33 27       	eor	r19, r19
   16c68:	40 ff       	sbrs	r20, 0
            printf("set_active_device: index:%d type:%d:%s, dev == NULL\n", 
   16c6a:	aa c0       	rjmp	.+340    	; 0x16dc0 <set_active_device+0x20c>
   16c6c:	5c df       	rcall	.-328    	; 0x16b26 <type_to_str>
   16c6e:	9f 93       	push	r25
   16c70:	8f 93       	push	r24
   16c72:	1f 92       	push	r1
   16c74:	1f 93       	push	r17
   16c76:	df 93       	push	r29
   16c78:	cf 93       	push	r28
   16c7a:	80 e3       	ldi	r24, 0x30	; 48
   16c7c:	92 e3       	ldi	r25, 0x32	; 50
   16c7e:	1f 92       	push	r1
   16c80:	9f 93       	push	r25
   16c82:	8f 93       	push	r24
   16c84:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   16c88:	8d b7       	in	r24, 0x3d	; 61
   16c8a:	9e b7       	in	r25, 0x3e	; 62
   16c8c:	09 96       	adiw	r24, 0x09	; 9
   16c8e:	0f b6       	in	r0, 0x3f	; 63
   16c90:	f8 94       	cli
   16c92:	9e bf       	out	0x3e, r25	; 62
   16c94:	0f be       	out	0x3f, r0	; 63
   16c96:	8d bf       	out	0x3d, r24	; 61
                index,type,type_to_str(type));
        return(0);
    }

    if(type == NO_TYPE)
   16c98:	91 c0       	rjmp	.+290    	; 0x16dbc <set_active_device+0x208>
   16c9a:	00 97       	sbiw	r24, 0x00	; 0
    {
        if(debuglevel & 1)
   16c9c:	11 f5       	brne	.+68     	; 0x16ce2 <set_active_device+0x12e>
   16c9e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   16ca2:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   16ca6:	9c 01       	movw	r18, r24
   16ca8:	21 70       	andi	r18, 0x01	; 1
   16caa:	33 27       	eor	r19, r19
   16cac:	80 ff       	sbrs	r24, 0
            printf("set_active_device: index %d uninitalized type:%d:%s\n", 
   16cae:	88 c0       	rjmp	.+272    	; 0x16dc0 <set_active_device+0x20c>
   16cb0:	80 e0       	ldi	r24, 0x00	; 0
   16cb2:	90 e0       	ldi	r25, 0x00	; 0
   16cb4:	38 df       	rcall	.-400    	; 0x16b26 <type_to_str>
   16cb6:	9f 93       	push	r25
   16cb8:	8f 93       	push	r24
   16cba:	1f 92       	push	r1
   16cbc:	1f 92       	push	r1
   16cbe:	df 93       	push	r29
   16cc0:	cf 93       	push	r28
   16cc2:	8b ef       	ldi	r24, 0xFB	; 251
   16cc4:	91 e3       	ldi	r25, 0x31	; 49
   16cc6:	1f 92       	push	r1
   16cc8:	9f 93       	push	r25
   16cca:	8f 93       	push	r24
   16ccc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   16cd0:	8d b7       	in	r24, 0x3d	; 61
   16cd2:	9e b7       	in	r25, 0x3e	; 62
   16cd4:	09 96       	adiw	r24, 0x09	; 9
   16cd6:	0f b6       	in	r0, 0x3f	; 63
   16cd8:	f8 94       	cli
   16cda:	9e bf       	out	0x3e, r25	; 62
   16cdc:	0f be       	out	0x3f, r0	; 63
   16cde:	8d bf       	out	0x3d, r24	; 61
                index,type,type_to_str(type));
        return(0);
    }

    if(type == PRINTER_TYPE)
   16ce0:	6d c0       	rjmp	.+218    	; 0x16dbc <set_active_device+0x208>
   16ce2:	83 30       	cpi	r24, 0x03	; 3
   16ce4:	91 05       	cpc	r25, r1
    {
        PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   16ce6:	29 f4       	brne	.+10     	; 0x16cf2 <set_active_device+0x13e>
   16ce8:	30 93 ef 19 	sts	0x19EF, r19	; 0x8019ef <PRINTERp+0x1>
   16cec:	20 93 ee 19 	sts	0x19EE, r18	; 0x8019ee <PRINTERp>
        return(1);
    }

    if(type == AMIGO_TYPE || type == SS80_TYPE) 
   16cf0:	43 c0       	rjmp	.+134    	; 0x16d78 <set_active_device+0x1c4>
   16cf2:	ac 01       	movw	r20, r24
   16cf4:	41 50       	subi	r20, 0x01	; 1
   16cf6:	51 09       	sbc	r21, r1
   16cf8:	42 30       	cpi	r20, 0x02	; 2
   16cfa:	51 05       	cpc	r21, r1
   16cfc:	08 f0       	brcs	.+2      	; 0x16d00 <set_active_device+0x14c>
    {
        if(Devices[index].state == NULL)
   16cfe:	3f c0       	rjmp	.+126    	; 0x16d7e <set_active_device+0x1ca>
   16d00:	45 81       	ldd	r20, Z+5	; 0x05
   16d02:	56 81       	ldd	r21, Z+6	; 0x06
   16d04:	41 15       	cp	r20, r1
   16d06:	51 05       	cpc	r21, r1
        {
            if(debuglevel & 1)
   16d08:	01 f5       	brne	.+64     	; 0x16d4a <set_active_device+0x196>
   16d0a:	40 91 b0 01 	lds	r20, 0x01B0	; 0x8001b0 <debuglevel>
   16d0e:	50 91 b1 01 	lds	r21, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   16d12:	9a 01       	movw	r18, r20
   16d14:	21 70       	andi	r18, 0x01	; 1
   16d16:	33 27       	eor	r19, r19
                printf("set_active_device: index: %d type:%d:%s, state == NULL\n",
   16d18:	40 ff       	sbrs	r20, 0
   16d1a:	52 c0       	rjmp	.+164    	; 0x16dc0 <set_active_device+0x20c>
   16d1c:	04 df       	rcall	.-504    	; 0x16b26 <type_to_str>
   16d1e:	9f 93       	push	r25
   16d20:	8f 93       	push	r24
   16d22:	1f 92       	push	r1
   16d24:	1f 93       	push	r17
   16d26:	df 93       	push	r29
   16d28:	cf 93       	push	r28
   16d2a:	83 ec       	ldi	r24, 0xC3	; 195
   16d2c:	91 e3       	ldi	r25, 0x31	; 49
   16d2e:	1f 92       	push	r1
   16d30:	9f 93       	push	r25
   16d32:	8f 93       	push	r24
   16d34:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   16d38:	8d b7       	in	r24, 0x3d	; 61
   16d3a:	9e b7       	in	r25, 0x3e	; 62
   16d3c:	09 96       	adiw	r24, 0x09	; 9
   16d3e:	0f b6       	in	r0, 0x3f	; 63
   16d40:	f8 94       	cli
   16d42:	9e bf       	out	0x3e, r25	; 62
   16d44:	0f be       	out	0x3f, r0	; 63
   16d46:	8d bf       	out	0x3d, r24	; 61
                     index,type,type_to_str(type));
            return(0);
        }
#ifdef AMIGO
        if(type == AMIGO_TYPE)
   16d48:	39 c0       	rjmp	.+114    	; 0x16dbc <set_active_device+0x208>
   16d4a:	81 30       	cpi	r24, 0x01	; 1
   16d4c:	91 05       	cpc	r25, r1
        {
            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   16d4e:	49 f4       	brne	.+18     	; 0x16d62 <set_active_device+0x1ae>
   16d50:	30 93 e9 19 	sts	0x19E9, r19	; 0x8019e9 <AMIGOp+0x1>
   16d54:	20 93 e8 19 	sts	0x19E8, r18	; 0x8019e8 <AMIGOp>
            AMIGOs = (AMIGOStateType *) Devices[index].state;
   16d58:	50 93 e7 19 	sts	0x19E7, r21	; 0x8019e7 <AMIGOs+0x1>
   16d5c:	40 93 e6 19 	sts	0x19E6, r20	; 0x8019e6 <AMIGOs>
            return(1);
        }
#endif
        if(type == SS80_TYPE)
   16d60:	0b c0       	rjmp	.+22     	; 0x16d78 <set_active_device+0x1c4>
   16d62:	82 30       	cpi	r24, 0x02	; 2
   16d64:	91 05       	cpc	r25, r1
        {
            SS80p = (SS80DiskType *) Devices[index].dev;
   16d66:	59 f4       	brne	.+22     	; 0x16d7e <set_active_device+0x1ca>
   16d68:	30 93 ed 19 	sts	0x19ED, r19	; 0x8019ed <SS80p+0x1>
   16d6c:	20 93 ec 19 	sts	0x19EC, r18	; 0x8019ec <SS80p>
            SS80s = (SS80StateType *) Devices[index].state;
   16d70:	50 93 eb 19 	sts	0x19EB, r21	; 0x8019eb <SS80s+0x1>
   16d74:	40 93 ea 19 	sts	0x19EA, r20	; 0x8019ea <SS80s>
            return(1);
   16d78:	21 e0       	ldi	r18, 0x01	; 1
   16d7a:	30 e0       	ldi	r19, 0x00	; 0
        }
    }
    if(debuglevel & 1)
   16d7c:	21 c0       	rjmp	.+66     	; 0x16dc0 <set_active_device+0x20c>
   16d7e:	40 91 b0 01 	lds	r20, 0x01B0	; 0x8001b0 <debuglevel>
   16d82:	50 91 b1 01 	lds	r21, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   16d86:	9a 01       	movw	r18, r20
   16d88:	21 70       	andi	r18, 0x01	; 1
   16d8a:	33 27       	eor	r19, r19
        printf("set_active_device:(%d) invalid type:%d:%s\n", 
   16d8c:	40 ff       	sbrs	r20, 0
   16d8e:	18 c0       	rjmp	.+48     	; 0x16dc0 <set_active_device+0x20c>
   16d90:	ca de       	rcall	.-620    	; 0x16b26 <type_to_str>
   16d92:	9f 93       	push	r25
   16d94:	8f 93       	push	r24
   16d96:	1f 92       	push	r1
   16d98:	1f 93       	push	r17
   16d9a:	df 93       	push	r29
   16d9c:	cf 93       	push	r28
   16d9e:	88 e9       	ldi	r24, 0x98	; 152
   16da0:	91 e3       	ldi	r25, 0x31	; 49
   16da2:	1f 92       	push	r1
   16da4:	9f 93       	push	r25
   16da6:	8f 93       	push	r24
   16da8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   16dac:	8d b7       	in	r24, 0x3d	; 61
   16dae:	9e b7       	in	r25, 0x3e	; 62
   16db0:	09 96       	adiw	r24, 0x09	; 9
   16db2:	0f b6       	in	r0, 0x3f	; 63
   16db4:	f8 94       	cli
   16db6:	9e bf       	out	0x3e, r25	; 62
   16db8:	0f be       	out	0x3f, r0	; 63

    ///@brief We also check for -1 
    /// So the result of find_device() can be used without additional tests
    if(index == -1)
    {
        return(0);
   16dba:	8d bf       	out	0x3d, r24	; 61
   16dbc:	20 e0       	ldi	r18, 0x00	; 0
    }
    if(debuglevel & 1)
        printf("set_active_device:(%d) invalid type:%d:%s\n", 
            index,type,type_to_str(type));
    return(0);
}
   16dbe:	30 e0       	ldi	r19, 0x00	; 0
   16dc0:	c9 01       	movw	r24, r18
   16dc2:	df 91       	pop	r29
   16dc4:	cf 91       	pop	r28
   16dc6:	1f 91       	pop	r17
   16dc8:	08 95       	ret

00016dca <alloc_device>:

///@brief Allocate a Device structure for a disk or printer
///@param type: disk type
///@return Devices[] index on sucess or -1
int alloc_device(int type)
{
   16dca:	0f 93       	push	r16
   16dcc:	1f 93       	push	r17
   16dce:	cf 93       	push	r28
   16dd0:	df 93       	push	r29
    int ind;
    int index = -1;

    // Find a free slot
    ind = find_free();
   16dd2:	ec 01       	movw	r28, r24
   16dd4:	c1 de       	rcall	.-638    	; 0x16b58 <find_free>
    if(ind == -1)
   16dd6:	8c 01       	movw	r16, r24
   16dd8:	0f 3f       	cpi	r16, 0xFF	; 255
   16dda:	8f ef       	ldi	r24, 0xFF	; 255
   16ddc:	18 07       	cpc	r17, r24
    {
        if(debuglevel & 1)
   16dde:	99 f4       	brne	.+38     	; 0x16e06 <alloc_device+0x3c>
   16de0:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   16de4:	80 ff       	sbrs	r24, 0
            printf("alloc_device: Device table is full\n", type);
   16de6:	7b c0       	rjmp	.+246    	; 0x16ede <alloc_device+0x114>
   16de8:	df 93       	push	r29
   16dea:	cf 93       	push	r28
   16dec:	84 e7       	ldi	r24, 0x74	; 116
   16dee:	91 e3       	ldi	r25, 0x31	; 49
   16df0:	1f 92       	push	r1
   16df2:	9f 93       	push	r25
   16df4:	8f 93       	push	r24
   16df6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   16dfa:	0f 90       	pop	r0
   16dfc:	0f 90       	pop	r0
   16dfe:	0f 90       	pop	r0
   16e00:	0f 90       	pop	r0
   16e02:	0f 90       	pop	r0
        return(ind);
    }

    switch(type)
   16e04:	6c c0       	rjmp	.+216    	; 0x16ede <alloc_device+0x114>
   16e06:	c2 30       	cpi	r28, 0x02	; 2
   16e08:	d1 05       	cpc	r29, r1
   16e0a:	f1 f0       	breq	.+60     	; 0x16e48 <alloc_device+0x7e>
   16e0c:	c3 30       	cpi	r28, 0x03	; 3
   16e0e:	d1 05       	cpc	r29, r1
   16e10:	b1 f1       	breq	.+108    	; 0x16e7e <alloc_device+0xb4>
   16e12:	c1 30       	cpi	r28, 0x01	; 1
   16e14:	d1 05       	cpc	r29, r1
   16e16:	09 f0       	breq	.+2      	; 0x16e1a <alloc_device+0x50>
            Devices[ind].state = safecalloc(sizeof(SS80StateType)+7,1);
            index = ind;
            break;
#ifdef AMIGO
        case AMIGO_TYPE:
            Devices[ind].TYPE = type;
   16e18:	47 c0       	rjmp	.+142    	; 0x16ea8 <alloc_device+0xde>
   16e1a:	87 e0       	ldi	r24, 0x07	; 7
   16e1c:	80 9f       	mul	r24, r16
   16e1e:	e0 01       	movw	r28, r0
   16e20:	81 9f       	mul	r24, r17
   16e22:	d0 0d       	add	r29, r0
   16e24:	11 24       	eor	r1, r1
   16e26:	c1 5c       	subi	r28, 0xC1	; 193
   16e28:	d0 4e       	sbci	r29, 0xE0	; 224
   16e2a:	81 e0       	ldi	r24, 0x01	; 1
            Devices[ind].dev = safecalloc(sizeof(AMIGODiskType)+7,1);
   16e2c:	88 83       	st	Y, r24
   16e2e:	61 e0       	ldi	r22, 0x01	; 1
   16e30:	70 e0       	ldi	r23, 0x00	; 0
   16e32:	84 e3       	ldi	r24, 0x34	; 52
   16e34:	90 e0       	ldi	r25, 0x00	; 0
   16e36:	0e 94 ca 29 	call	0x5394	; 0x5394 <safecalloc>
   16e3a:	9c 83       	std	Y+4, r25	; 0x04
            Devices[ind].state = safecalloc(sizeof(AMIGOStateType)+7,1);
   16e3c:	8b 83       	std	Y+3, r24	; 0x03
   16e3e:	61 e0       	ldi	r22, 0x01	; 1
   16e40:	70 e0       	ldi	r23, 0x00	; 0
   16e42:	88 e1       	ldi	r24, 0x18	; 24
   16e44:	90 e0       	ldi	r25, 0x00	; 0
    }

    switch(type)
    {
        case SS80_TYPE:
            Devices[ind].TYPE = type;
   16e46:	16 c0       	rjmp	.+44     	; 0x16e74 <alloc_device+0xaa>
   16e48:	87 e0       	ldi	r24, 0x07	; 7
   16e4a:	80 9f       	mul	r24, r16
   16e4c:	e0 01       	movw	r28, r0
   16e4e:	81 9f       	mul	r24, r17
   16e50:	d0 0d       	add	r29, r0
   16e52:	11 24       	eor	r1, r1
   16e54:	c1 5c       	subi	r28, 0xC1	; 193
   16e56:	d0 4e       	sbci	r29, 0xE0	; 224
   16e58:	82 e0       	ldi	r24, 0x02	; 2
            Devices[ind].dev = safecalloc(sizeof(SS80DiskType)+7,1);
   16e5a:	88 83       	st	Y, r24
   16e5c:	61 e0       	ldi	r22, 0x01	; 1
   16e5e:	70 e0       	ldi	r23, 0x00	; 0
   16e60:	81 e5       	ldi	r24, 0x51	; 81
   16e62:	90 e0       	ldi	r25, 0x00	; 0
   16e64:	0e 94 ca 29 	call	0x5394	; 0x5394 <safecalloc>
   16e68:	9c 83       	std	Y+4, r25	; 0x04
            Devices[ind].state = safecalloc(sizeof(SS80StateType)+7,1);
   16e6a:	8b 83       	std	Y+3, r24	; 0x03
   16e6c:	61 e0       	ldi	r22, 0x01	; 1
   16e6e:	70 e0       	ldi	r23, 0x00	; 0
   16e70:	86 e1       	ldi	r24, 0x16	; 22
            break;
#ifdef AMIGO
        case AMIGO_TYPE:
            Devices[ind].TYPE = type;
            Devices[ind].dev = safecalloc(sizeof(AMIGODiskType)+7,1);
            Devices[ind].state = safecalloc(sizeof(AMIGOStateType)+7,1);
   16e72:	90 e0       	ldi	r25, 0x00	; 0
   16e74:	0e 94 ca 29 	call	0x5394	; 0x5394 <safecalloc>
   16e78:	9e 83       	std	Y+6, r25	; 0x06
            index = ind;
            break;
   16e7a:	8d 83       	std	Y+5, r24	; 0x05
#endif
        case PRINTER_TYPE:
            Devices[ind].TYPE = type;
   16e7c:	30 c0       	rjmp	.+96     	; 0x16ede <alloc_device+0x114>
   16e7e:	87 e0       	ldi	r24, 0x07	; 7
   16e80:	80 9f       	mul	r24, r16
   16e82:	e0 01       	movw	r28, r0
   16e84:	81 9f       	mul	r24, r17
   16e86:	d0 0d       	add	r29, r0
   16e88:	11 24       	eor	r1, r1
   16e8a:	c1 5c       	subi	r28, 0xC1	; 193
   16e8c:	d0 4e       	sbci	r29, 0xE0	; 224
   16e8e:	83 e0       	ldi	r24, 0x03	; 3
            Devices[ind].dev = safecalloc(sizeof(PRINTERDeviceType)+7,1);
   16e90:	88 83       	st	Y, r24
   16e92:	61 e0       	ldi	r22, 0x01	; 1
   16e94:	70 e0       	ldi	r23, 0x00	; 0
   16e96:	8a e2       	ldi	r24, 0x2A	; 42
   16e98:	90 e0       	ldi	r25, 0x00	; 0
   16e9a:	0e 94 ca 29 	call	0x5394	; 0x5394 <safecalloc>
   16e9e:	9c 83       	std	Y+4, r25	; 0x04
            Devices[ind].state = NULL;
   16ea0:	8b 83       	std	Y+3, r24	; 0x03
   16ea2:	1e 82       	std	Y+6, r1	; 0x06
            index = ind;
            break;
   16ea4:	1d 82       	std	Y+5, r1	; 0x05
        default:
            if(debuglevel & 1)
   16ea6:	1b c0       	rjmp	.+54     	; 0x16ede <alloc_device+0x114>
   16ea8:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
                printf("alloc_device: invalid type:%d:%s\n", type,type_to_str(type));
   16eac:	80 ff       	sbrs	r24, 0
   16eae:	15 c0       	rjmp	.+42     	; 0x16eda <alloc_device+0x110>
   16eb0:	ce 01       	movw	r24, r28
   16eb2:	39 de       	rcall	.-910    	; 0x16b26 <type_to_str>
   16eb4:	9f 93       	push	r25
   16eb6:	8f 93       	push	r24
   16eb8:	df 93       	push	r29
   16eba:	cf 93       	push	r28
   16ebc:	82 e5       	ldi	r24, 0x52	; 82
   16ebe:	91 e3       	ldi	r25, 0x31	; 49
   16ec0:	1f 92       	push	r1
   16ec2:	9f 93       	push	r25
   16ec4:	8f 93       	push	r24
   16ec6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   16eca:	8d b7       	in	r24, 0x3d	; 61
   16ecc:	9e b7       	in	r25, 0x3e	; 62
   16ece:	07 96       	adiw	r24, 0x07	; 7
   16ed0:	0f b6       	in	r0, 0x3f	; 63
   16ed2:	f8 94       	cli
   16ed4:	9e bf       	out	0x3e, r25	; 62
   16ed6:	0f be       	out	0x3f, r0	; 63
   16ed8:	8d bf       	out	0x3d, r24	; 61
            break;
    }
    return(index);
}
   16eda:	0f ef       	ldi	r16, 0xFF	; 255
   16edc:	1f ef       	ldi	r17, 0xFF	; 255
   16ede:	c8 01       	movw	r24, r16
   16ee0:	df 91       	pop	r29
   16ee2:	cf 91       	pop	r28
   16ee4:	1f 91       	pop	r17
   16ee6:	0f 91       	pop	r16
   16ee8:	08 95       	ret

00016eea <init_Devices>:
/// @brief Init Config Parser Stack
/// Called only durring power up so we do not have to free memory
void init_Devices()
{
    int i;
    stack_ind = 0;
   16eea:	10 92 fb 19 	sts	0x19FB, r1	; 0x8019fb <stack_ind+0x1>
   16eee:	10 92 fa 19 	sts	0x19FA, r1	; 0x8019fa <stack_ind>
   16ef2:	ef e3       	ldi	r30, 0x3F	; 63
   16ef4:	ff e1       	ldi	r31, 0x1F	; 31
    for(i=0;i<MAX_DEVICES;++i)
    {
        Devices[i].TYPE = NO_TYPE;
        Devices[i].ADDRESS = 0;
        Devices[i].PPR = 0xff;
   16ef6:	8f ef       	ldi	r24, 0xFF	; 255
{
    int i;
    stack_ind = 0;
    for(i=0;i<MAX_DEVICES;++i)
    {
        Devices[i].TYPE = NO_TYPE;
   16ef8:	10 82       	st	Z, r1
        Devices[i].ADDRESS = 0;
   16efa:	11 82       	std	Z+1, r1	; 0x01
        Devices[i].PPR = 0xff;
   16efc:	82 83       	std	Z+2, r24	; 0x02
        Devices[i].dev = NULL;
   16efe:	14 82       	std	Z+4, r1	; 0x04
   16f00:	13 82       	std	Z+3, r1	; 0x03
        Devices[i].state = NULL;
   16f02:	16 82       	std	Z+6, r1	; 0x06
   16f04:	15 82       	std	Z+5, r1	; 0x05
   16f06:	37 96       	adiw	r30, 0x07	; 7
/// Called only durring power up so we do not have to free memory
void init_Devices()
{
    int i;
    stack_ind = 0;
    for(i=0;i<MAX_DEVICES;++i)
   16f08:	9f e1       	ldi	r25, 0x1F	; 31
   16f0a:	e7 37       	cpi	r30, 0x77	; 119
   16f0c:	f9 07       	cpc	r31, r25
   16f0e:	a1 f7       	brne	.-24     	; 0x16ef8 <init_Devices+0xe>
        Devices[i].ADDRESS = 0;
        Devices[i].PPR = 0xff;
        Devices[i].dev = NULL;
        Devices[i].state = NULL;
    }
}
   16f10:	08 95       	ret

00016f12 <push_state>:
/// @brief Push Parser State
/// @param state: parser state
/// @return state
int push_state(int state)
{
    if(stack_ind < MAX_STACK)
   16f12:	20 91 fa 19 	lds	r18, 0x19FA	; 0x8019fa <stack_ind>
   16f16:	30 91 fb 19 	lds	r19, 0x19FB	; 0x8019fb <stack_ind+0x1>
   16f1a:	25 30       	cpi	r18, 0x05	; 5
   16f1c:	31 05       	cpc	r19, r1
   16f1e:	7c f4       	brge	.+30     	; 0x16f3e <push_state+0x2c>
        stack_p[stack_ind++] = state;
   16f20:	a9 01       	movw	r20, r18
   16f22:	4f 5f       	subi	r20, 0xFF	; 255
   16f24:	5f 4f       	sbci	r21, 0xFF	; 255
   16f26:	50 93 fb 19 	sts	0x19FB, r21	; 0x8019fb <stack_ind+0x1>
   16f2a:	40 93 fa 19 	sts	0x19FA, r20	; 0x8019fa <stack_ind>
   16f2e:	22 0f       	add	r18, r18
   16f30:	33 1f       	adc	r19, r19
   16f32:	f9 01       	movw	r30, r18
   16f34:	e0 51       	subi	r30, 0x10	; 16
   16f36:	f6 4e       	sbci	r31, 0xE6	; 230
   16f38:	80 83       	st	Z, r24
   16f3a:	91 83       	std	Z+1, r25	; 0x01
    else
        return(START_STATE);
    return(state);
   16f3c:	08 95       	ret
int push_state(int state)
{
    if(stack_ind < MAX_STACK)
        stack_p[stack_ind++] = state;
    else
        return(START_STATE);
   16f3e:	80 e0       	ldi	r24, 0x00	; 0
   16f40:	90 e0       	ldi	r25, 0x00	; 0
    return(state);
}
   16f42:	08 95       	ret

00016f44 <pop_state>:

/// @brief Pop Parser State
/// @return state
int pop_state()
{
    if(stack_ind > 0)
   16f44:	80 91 fa 19 	lds	r24, 0x19FA	; 0x8019fa <stack_ind>
   16f48:	90 91 fb 19 	lds	r25, 0x19FB	; 0x8019fb <stack_ind+0x1>
   16f4c:	18 16       	cp	r1, r24
   16f4e:	19 06       	cpc	r1, r25
   16f50:	6c f4       	brge	.+26     	; 0x16f6c <pop_state+0x28>
        return(stack_p[--stack_ind]);
   16f52:	01 97       	sbiw	r24, 0x01	; 1
   16f54:	90 93 fb 19 	sts	0x19FB, r25	; 0x8019fb <stack_ind+0x1>
   16f58:	80 93 fa 19 	sts	0x19FA, r24	; 0x8019fa <stack_ind>
   16f5c:	88 0f       	add	r24, r24
   16f5e:	99 1f       	adc	r25, r25
   16f60:	fc 01       	movw	r30, r24
   16f62:	e0 51       	subi	r30, 0x10	; 16
   16f64:	f6 4e       	sbci	r31, 0xE6	; 230
   16f66:	80 81       	ld	r24, Z
   16f68:	91 81       	ldd	r25, Z+1	; 0x01
   16f6a:	08 95       	ret
    else
        return(START_STATE);
   16f6c:	80 e0       	ldi	r24, 0x00	; 0
   16f6e:	90 e0       	ldi	r25, 0x00	; 0
}
   16f70:	08 95       	ret

00016f72 <assign_value>:
/// @param[in] maxval: maximum value
/// @param[in] *val: value to set
///
/// @return  1 is matched and value in range, 0 not matched or out of range
uint32_t assign_value(char *str, uint32_t minval, uint32_t maxval, uint32_t *val)
{
   16f72:	a0 e0       	ldi	r26, 0x00	; 0
   16f74:	b0 e0       	ldi	r27, 0x00	; 0
   16f76:	ef eb       	ldi	r30, 0xBF	; 191
   16f78:	f7 eb       	ldi	r31, 0xB7	; 183
   16f7a:	0c 94 91 e9 	jmp	0x1d322	; 0x1d322 <__prologue_saves__+0x4>
   16f7e:	2a 01       	movw	r4, r20
   16f80:	3b 01       	movw	r6, r22
   16f82:	48 01       	movw	r8, r16
   16f84:	59 01       	movw	r10, r18
   16f86:	87 01       	movw	r16, r14
    uint32_t tmp;
    int bad = 0;
    char *ptr;

    // Skip spaces before assignment
    ptr = skipspaces(str);
   16f88:	0e 94 c3 30 	call	0x6186	; 0x6186 <skipspaces>
   16f8c:	ec 01       	movw	r28, r24
    // Skip optional '='
    if(*ptr == '=')
   16f8e:	88 81       	ld	r24, Y
   16f90:	8d 33       	cpi	r24, 0x3D	; 61
   16f92:	29 f4       	brne	.+10     	; 0x16f9e <assign_value+0x2c>
    {
        ++ptr;
        // skip spaces after assignment
        ptr = skipspaces(ptr);
   16f94:	ce 01       	movw	r24, r28
   16f96:	01 96       	adiw	r24, 0x01	; 1
   16f98:	0e 94 c3 30 	call	0x6186	; 0x6186 <skipspaces>
   16f9c:	ec 01       	movw	r28, r24
    }
    if(!*ptr)
   16f9e:	88 81       	ld	r24, Y
   16fa0:	81 11       	cpse	r24, r1
   16fa2:	17 c0       	rjmp	.+46     	; 0x16fd2 <assign_value+0x60>
    {
        if(debuglevel & 1)
   16fa4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   16fa8:	80 ff       	sbrs	r24, 0
   16faa:	7a c0       	rjmp	.+244    	; 0x170a0 <assign_value+0x12e>
            printf("line:%d, missing value\n", lines);
   16fac:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <lines+0x1>
   16fb0:	8f 93       	push	r24
   16fb2:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <lines>
   16fb6:	8f 93       	push	r24
   16fb8:	8a e3       	ldi	r24, 0x3A	; 58
   16fba:	91 e3       	ldi	r25, 0x31	; 49
   16fbc:	1f 92       	push	r1
   16fbe:	9f 93       	push	r25
   16fc0:	8f 93       	push	r24
   16fc2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   16fc6:	0f 90       	pop	r0
   16fc8:	0f 90       	pop	r0
   16fca:	0f 90       	pop	r0
   16fcc:	0f 90       	pop	r0
   16fce:	0f 90       	pop	r0
   16fd0:	67 c0       	rjmp	.+206    	; 0x170a0 <assign_value+0x12e>
        bad = 1;
    }
    if(!bad)
    {
        // FIXME detect bad numbers
        tmp = get_value(ptr);
   16fd2:	ce 01       	movw	r24, r28
   16fd4:	0e 94 2f 32 	call	0x645e	; 0x645e <get_value>
   16fd8:	6b 01       	movw	r12, r22
   16fda:	7c 01       	movw	r14, r24
        *val = tmp;
   16fdc:	f8 01       	movw	r30, r16
   16fde:	60 83       	st	Z, r22
   16fe0:	71 83       	std	Z+1, r23	; 0x01
   16fe2:	82 83       	std	Z+2, r24	; 0x02
   16fe4:	93 83       	std	Z+3, r25	; 0x03
        if((minval && (tmp < minval)))
   16fe6:	41 14       	cp	r4, r1
   16fe8:	51 04       	cpc	r5, r1
   16fea:	61 04       	cpc	r6, r1
   16fec:	71 04       	cpc	r7, r1
   16fee:	39 f1       	breq	.+78     	; 0x1703e <assign_value+0xcc>
   16ff0:	c4 14       	cp	r12, r4
   16ff2:	d5 04       	cpc	r13, r5
   16ff4:	e6 04       	cpc	r14, r6
   16ff6:	f7 04       	cpc	r15, r7
   16ff8:	10 f5       	brcc	.+68     	; 0x1703e <assign_value+0xcc>
        {
            printf("line:%d, %s is below range %d\n", lines, ptr,(int)minval);
   16ffa:	5f 92       	push	r5
   16ffc:	4f 92       	push	r4
   16ffe:	df 93       	push	r29
   17000:	cf 93       	push	r28
   17002:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <lines+0x1>
   17006:	8f 93       	push	r24
   17008:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <lines>
   1700c:	8f 93       	push	r24
   1700e:	8b e1       	ldi	r24, 0x1B	; 27
   17010:	91 e3       	ldi	r25, 0x31	; 49
   17012:	1f 92       	push	r1
   17014:	9f 93       	push	r25
   17016:	8f 93       	push	r24
   17018:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            bad = 1;
        }
        if((maxval != 0xffffffffUL) && (tmp > maxval))
   1701c:	ed b7       	in	r30, 0x3d	; 61
   1701e:	fe b7       	in	r31, 0x3e	; 62
   17020:	39 96       	adiw	r30, 0x09	; 9
   17022:	0f b6       	in	r0, 0x3f	; 63
   17024:	f8 94       	cli
   17026:	fe bf       	out	0x3e, r31	; 62
   17028:	0f be       	out	0x3f, r0	; 63
   1702a:	ed bf       	out	0x3d, r30	; 61
   1702c:	ff ef       	ldi	r31, 0xFF	; 255
   1702e:	8f 16       	cp	r8, r31
   17030:	9f 06       	cpc	r9, r31
   17032:	af 06       	cpc	r10, r31
   17034:	bf 06       	cpc	r11, r31
   17036:	a1 f1       	breq	.+104    	; 0x170a0 <assign_value+0x12e>
        tmp = get_value(ptr);
        *val = tmp;
        if((minval && (tmp < minval)))
        {
            printf("line:%d, %s is below range %d\n", lines, ptr,(int)minval);
            bad = 1;
   17038:	61 e0       	ldi	r22, 0x01	; 1
   1703a:	70 e0       	ldi	r23, 0x00	; 0
   1703c:	08 c0       	rjmp	.+16     	; 0x1704e <assign_value+0xdc>
        }
        if((maxval != 0xffffffffUL) && (tmp > maxval))
   1703e:	ff ef       	ldi	r31, 0xFF	; 255
   17040:	8f 16       	cp	r8, r31
   17042:	9f 06       	cpc	r9, r31
   17044:	af 06       	cpc	r10, r31
   17046:	bf 06       	cpc	r11, r31
   17048:	31 f1       	breq	.+76     	; 0x17096 <assign_value+0x124>
   1704a:	60 e0       	ldi	r22, 0x00	; 0
   1704c:	70 e0       	ldi	r23, 0x00	; 0
   1704e:	8c 14       	cp	r8, r12
   17050:	9d 04       	cpc	r9, r13
   17052:	ae 04       	cpc	r10, r14
   17054:	bf 04       	cpc	r11, r15
   17056:	d0 f4       	brcc	.+52     	; 0x1708c <assign_value+0x11a>
        {
            printf("line:%d, %s is above range %d\n", lines, ptr,(int)maxval);
   17058:	9f 92       	push	r9
   1705a:	8f 92       	push	r8
   1705c:	df 93       	push	r29
   1705e:	cf 93       	push	r28
   17060:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <lines+0x1>
   17064:	8f 93       	push	r24
   17066:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <lines>
   1706a:	8f 93       	push	r24
   1706c:	8c ef       	ldi	r24, 0xFC	; 252
   1706e:	90 e3       	ldi	r25, 0x30	; 48
   17070:	1f 92       	push	r1
   17072:	9f 93       	push	r25
   17074:	8f 93       	push	r24
   17076:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1707a:	ed b7       	in	r30, 0x3d	; 61
   1707c:	fe b7       	in	r31, 0x3e	; 62
   1707e:	39 96       	adiw	r30, 0x09	; 9
   17080:	0f b6       	in	r0, 0x3f	; 63
   17082:	f8 94       	cli
   17084:	fe bf       	out	0x3e, r31	; 62
   17086:	0f be       	out	0x3f, r0	; 63
   17088:	ed bf       	out	0x3d, r30	; 61
   1708a:	0a c0       	rjmp	.+20     	; 0x170a0 <assign_value+0x12e>
            bad = 1;
        }
    }
    if(bad)
        return(0);
   1708c:	f1 e0       	ldi	r31, 0x01	; 1
   1708e:	6f 27       	eor	r22, r31
   17090:	80 e0       	ldi	r24, 0x00	; 0
   17092:	90 e0       	ldi	r25, 0x00	; 0
   17094:	08 c0       	rjmp	.+16     	; 0x170a6 <assign_value+0x134>
    return(1);
   17096:	61 e0       	ldi	r22, 0x01	; 1
   17098:	70 e0       	ldi	r23, 0x00	; 0
   1709a:	80 e0       	ldi	r24, 0x00	; 0
   1709c:	90 e0       	ldi	r25, 0x00	; 0
   1709e:	03 c0       	rjmp	.+6      	; 0x170a6 <assign_value+0x134>
            printf("line:%d, %s is above range %d\n", lines, ptr,(int)maxval);
            bad = 1;
        }
    }
    if(bad)
        return(0);
   170a0:	60 e0       	ldi	r22, 0x00	; 0
   170a2:	70 e0       	ldi	r23, 0x00	; 0
   170a4:	cb 01       	movw	r24, r22
    return(1);
}
   170a6:	cd b7       	in	r28, 0x3d	; 61
   170a8:	de b7       	in	r29, 0x3e	; 62
   170aa:	e0 e1       	ldi	r30, 0x10	; 16
   170ac:	0c 94 ad e9 	jmp	0x1d35a	; 0x1d35a <__epilogue_restores__+0x4>

000170b0 <set_Config_Defaults>:

///@brief Set Defaults for any missing disk or printer devices
/// These are only used if the Config file omits them or is empty
/// @return  void
void set_Config_Defaults()
{
   170b0:	cf 93       	push	r28
   170b2:	df 93       	push	r29
    int index;

    ///@brief Add optional hard coded devices for any that are missing
    if(find_type(SS80_TYPE) == -1)
   170b4:	82 e0       	ldi	r24, 0x02	; 2
   170b6:	90 e0       	ldi	r25, 0x00	; 0
   170b8:	22 dd       	rcall	.-1468   	; 0x16afe <find_type>
   170ba:	01 96       	adiw	r24, 0x01	; 1
   170bc:	59 f5       	brne	.+86     	; 0x17114 <set_Config_Defaults+0x64>
    {
#if defined(HP9122D)
        printf("set_Config_Defaults: Using default SS/80 9122D\n");
#endif
#if defined(HP9134L)
        printf("set_Config_Defaults: Using default SS/80 9134L\n");
   170be:	8c ec       	ldi	r24, 0xCC	; 204
   170c0:	90 e3       	ldi	r25, 0x30	; 48
   170c2:	1f 92       	push	r1
   170c4:	9f 93       	push	r25
   170c6:	8f 93       	push	r24
   170c8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
#endif
        index = find_free();
   170cc:	45 dd       	rcall	.-1398   	; 0x16b58 <find_free>
        if(index != -1)
   170ce:	0f 90       	pop	r0
   170d0:	0f 90       	pop	r0
   170d2:	0f 90       	pop	r0
   170d4:	8f 3f       	cpi	r24, 0xFF	; 255
   170d6:	2f ef       	ldi	r18, 0xFF	; 255
   170d8:	92 07       	cpc	r25, r18
   170da:	e1 f0       	breq	.+56     	; 0x17114 <set_Config_Defaults+0x64>
        {
            Devices[index].TYPE  = SS80_TYPE;
   170dc:	27 e0       	ldi	r18, 0x07	; 7
   170de:	28 9f       	mul	r18, r24
   170e0:	e0 01       	movw	r28, r0
   170e2:	29 9f       	mul	r18, r25
   170e4:	d0 0d       	add	r29, r0
   170e6:	11 24       	eor	r1, r1
   170e8:	c1 5c       	subi	r28, 0xC1	; 193
   170ea:	d0 4e       	sbci	r29, 0xE0	; 224
   170ec:	82 e0       	ldi	r24, 0x02	; 2
   170ee:	88 83       	st	Y, r24
            Devices[index].ADDRESS = SS80DiskDefault.HEADER.ADDRESS;
   170f0:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <SS80DiskDefault>
   170f4:	89 83       	std	Y+1, r24	; 0x01
            Devices[index].PPR = SS80DiskDefault.HEADER.PPR;
   170f6:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <SS80DiskDefault+0x1>
   170fa:	8a 83       	std	Y+2, r24	; 0x02
            Devices[index].dev = (void *)&SS80DiskDefault;
   170fc:	85 e7       	ldi	r24, 0x75	; 117
   170fe:	92 e0       	ldi	r25, 0x02	; 2
   17100:	9c 83       	std	Y+4, r25	; 0x04
   17102:	8b 83       	std	Y+3, r24	; 0x03
            Devices[index].state = calloc(sizeof(SS80StateType)+7,1);
   17104:	61 e0       	ldi	r22, 0x01	; 1
   17106:	70 e0       	ldi	r23, 0x00	; 0
   17108:	86 e1       	ldi	r24, 0x16	; 22
   1710a:	90 e0       	ldi	r25, 0x00	; 0
   1710c:	0e 94 ca 29 	call	0x5394	; 0x5394 <safecalloc>
   17110:	9e 83       	std	Y+6, r25	; 0x06
        }
    }
#ifdef AMIGO
    // Make sure we have a AMIGO defined
    if(find_type(AMIGO_TYPE) == -1)
   17112:	8d 83       	std	Y+5, r24	; 0x05
   17114:	81 e0       	ldi	r24, 0x01	; 1
   17116:	90 e0       	ldi	r25, 0x00	; 0
   17118:	f2 dc       	rcall	.-1564   	; 0x16afe <find_type>
   1711a:	01 96       	adiw	r24, 0x01	; 1
    {
#if defined(HP9121D)
        printf("set_Config_Defaults:  Using default Amigo 9121D\n");
   1711c:	59 f5       	brne	.+86     	; 0x17174 <set_Config_Defaults+0xc4>
   1711e:	8b e9       	ldi	r24, 0x9B	; 155
   17120:	90 e3       	ldi	r25, 0x30	; 48
   17122:	1f 92       	push	r1
   17124:	9f 93       	push	r25
   17126:	8f 93       	push	r24
#endif
        index = find_free();
   17128:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        if(index != -1)
   1712c:	15 dd       	rcall	.-1494   	; 0x16b58 <find_free>
   1712e:	0f 90       	pop	r0
   17130:	0f 90       	pop	r0
   17132:	0f 90       	pop	r0
   17134:	8f 3f       	cpi	r24, 0xFF	; 255
   17136:	2f ef       	ldi	r18, 0xFF	; 255
   17138:	92 07       	cpc	r25, r18
        {
            Devices[index].TYPE  = AMIGO_TYPE;
   1713a:	e1 f0       	breq	.+56     	; 0x17174 <set_Config_Defaults+0xc4>
   1713c:	27 e0       	ldi	r18, 0x07	; 7
   1713e:	28 9f       	mul	r18, r24
   17140:	e0 01       	movw	r28, r0
   17142:	29 9f       	mul	r18, r25
   17144:	d0 0d       	add	r29, r0
   17146:	11 24       	eor	r1, r1
   17148:	c1 5c       	subi	r28, 0xC1	; 193
   1714a:	d0 4e       	sbci	r29, 0xE0	; 224
   1714c:	81 e0       	ldi	r24, 0x01	; 1
            Devices[index].ADDRESS = AMIGODiskDefault.HEADER.ADDRESS;
   1714e:	88 83       	st	Y, r24
   17150:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <AMIGODiskDefault>
            Devices[index].PPR = AMIGODiskDefault.HEADER.PPR;
   17154:	89 83       	std	Y+1, r24	; 0x01
   17156:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <AMIGODiskDefault+0x1>
            Devices[index].dev = (void *) &AMIGODiskDefault;
   1715a:	8a 83       	std	Y+2, r24	; 0x02
   1715c:	88 e4       	ldi	r24, 0x48	; 72
   1715e:	92 e0       	ldi	r25, 0x02	; 2
   17160:	9c 83       	std	Y+4, r25	; 0x04
            Devices[index].state = calloc(sizeof(AMIGOStateType)+7,1);
   17162:	8b 83       	std	Y+3, r24	; 0x03
   17164:	61 e0       	ldi	r22, 0x01	; 1
   17166:	70 e0       	ldi	r23, 0x00	; 0
   17168:	88 e1       	ldi	r24, 0x18	; 24
   1716a:	90 e0       	ldi	r25, 0x00	; 0
   1716c:	0e 94 ca 29 	call	0x5394	; 0x5394 <safecalloc>
        }
    }
#endif //#ifdef AMIGO
    // Make sure we have a PRINTER defined
    if(find_type(PRINTER_TYPE) == -1)
   17170:	9e 83       	std	Y+6, r25	; 0x06
   17172:	8d 83       	std	Y+5, r24	; 0x05
   17174:	83 e0       	ldi	r24, 0x03	; 3
   17176:	90 e0       	ldi	r25, 0x00	; 0
   17178:	c2 dc       	rcall	.-1660   	; 0x16afe <find_type>
   1717a:	01 96       	adiw	r24, 0x01	; 1
    {
        printf("set_Config_Defaults:  Using default PRINTER settings\n");
   1717c:	21 f5       	brne	.+72     	; 0x171c6 <set_Config_Defaults+0x116>
   1717e:	85 e6       	ldi	r24, 0x65	; 101
   17180:	90 e3       	ldi	r25, 0x30	; 48
   17182:	1f 92       	push	r1
   17184:	9f 93       	push	r25
   17186:	8f 93       	push	r24
        index = find_free();
   17188:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        if(index != -1)
   1718c:	e5 dc       	rcall	.-1590   	; 0x16b58 <find_free>
   1718e:	0f 90       	pop	r0
   17190:	0f 90       	pop	r0
   17192:	0f 90       	pop	r0
   17194:	8f 3f       	cpi	r24, 0xFF	; 255
   17196:	2f ef       	ldi	r18, 0xFF	; 255
   17198:	92 07       	cpc	r25, r18
        {
            Devices[index].TYPE  = PRINTER_TYPE;
   1719a:	a9 f0       	breq	.+42     	; 0x171c6 <set_Config_Defaults+0x116>
   1719c:	27 e0       	ldi	r18, 0x07	; 7
   1719e:	28 9f       	mul	r18, r24
   171a0:	f0 01       	movw	r30, r0
   171a2:	29 9f       	mul	r18, r25
   171a4:	f0 0d       	add	r31, r0
   171a6:	11 24       	eor	r1, r1
   171a8:	e1 5c       	subi	r30, 0xC1	; 193
   171aa:	f0 4e       	sbci	r31, 0xE0	; 224
   171ac:	83 e0       	ldi	r24, 0x03	; 3
            Devices[index].ADDRESS = PRINTERDeviceDefault.HEADER.ADDRESS;
   171ae:	80 83       	st	Z, r24
   171b0:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <PRINTERDeviceDefault>
            Devices[index].PPR = 0xff;
   171b4:	81 83       	std	Z+1, r24	; 0x01
   171b6:	8f ef       	ldi	r24, 0xFF	; 255
            Devices[index].dev = (void *) &PRINTERDeviceDefault;
   171b8:	82 83       	std	Z+2, r24	; 0x02
   171ba:	8f eb       	ldi	r24, 0xBF	; 191
   171bc:	92 e0       	ldi	r25, 0x02	; 2
   171be:	94 83       	std	Z+4, r25	; 0x04
            Devices[index].state = NULL;
   171c0:	83 83       	std	Z+3, r24	; 0x03
   171c2:	16 82       	std	Z+6, r1	; 0x06
        }
    }
}
   171c4:	15 82       	std	Z+5, r1	; 0x05
   171c6:	df 91       	pop	r29
   171c8:	cf 91       	pop	r28
   171ca:	08 95       	ret

000171cc <POSIX_Read_Config>:
/// Set all drive parameters and debuglevel 
///
/// @param name: config file name to process
/// @return  number of parse errors
int POSIX_Read_Config(char *name)
{
   171cc:	aa e9       	ldi	r26, 0x9A	; 154
   171ce:	b0 e0       	ldi	r27, 0x00	; 0
   171d0:	ec ee       	ldi	r30, 0xEC	; 236
   171d2:	f8 eb       	ldi	r31, 0xB8	; 184
   171d4:	0c 94 8f e9 	jmp	0x1d31e	; 0x1d31e <__prologue_saves__>
   171d8:	d8 2e       	mov	r13, r24
#endif

    char *ptr;
    char str[128];

    init_Devices();
   171da:	c9 2e       	mov	r12, r25

    lines = 0;
   171dc:	86 de       	rcall	.-756    	; 0x16eea <init_Devices>
   171de:	10 92 e5 19 	sts	0x19E5, r1	; 0x8019e5 <lines+0x1>
   171e2:	10 92 e4 19 	sts	0x19E4, r1	; 0x8019e4 <lines>

    printf("Reading: %s\n", name);
   171e6:	cf 92       	push	r12
   171e8:	df 92       	push	r13
   171ea:	88 e5       	ldi	r24, 0x58	; 88
   171ec:	90 e3       	ldi	r25, 0x30	; 48
   171ee:	1f 92       	push	r1
   171f0:	9f 93       	push	r25
   171f2:	8f 93       	push	r24
   171f4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    cfg = fopen(name, "rb");
   171f8:	65 ef       	ldi	r22, 0xF5	; 245
   171fa:	78 e0       	ldi	r23, 0x08	; 8
   171fc:	8d 2d       	mov	r24, r13
   171fe:	9c 2d       	mov	r25, r12
   17200:	0e 94 10 82 	call	0x10420	; 0x10420 <fopen>
   17204:	c9 57       	subi	r28, 0x79	; 121
   17206:	df 4f       	sbci	r29, 0xFF	; 255
   17208:	99 83       	std	Y+1, r25	; 0x01
   1720a:	88 83       	st	Y, r24
   1720c:	c7 58       	subi	r28, 0x87	; 135
    if(cfg == NULL)
   1720e:	d0 40       	sbci	r29, 0x00	; 0
   17210:	0f 90       	pop	r0
   17212:	0f 90       	pop	r0
   17214:	0f 90       	pop	r0
   17216:	0f 90       	pop	r0
   17218:	0f 90       	pop	r0
   1721a:	89 2b       	or	r24, r25
   1721c:	09 f4       	brne	.+2      	; 0x17220 <POSIX_Read_Config+0x54>
   1721e:	53 c0       	rjmp	.+166    	; 0x172c6 <POSIX_Read_Config+0xfa>
   17220:	21 2c       	mov	r2, r1
   17222:	31 2c       	mov	r3, r1
   17224:	41 2c       	mov	r4, r1
   17226:	51 2c       	mov	r5, r1
   17228:	cb 57       	subi	r28, 0x7B	; 123
   1722a:	df 4f       	sbci	r29, 0xFF	; 255
   1722c:	19 82       	std	Y+1, r1	; 0x01
   1722e:	18 82       	st	Y, r1
   17230:	c5 58       	subi	r28, 0x85	; 133
   17232:	d0 40       	sbci	r29, 0x00	; 0
   17234:	61 2c       	mov	r6, r1
   17236:	71 2c       	mov	r7, r1
   17238:	a1 2c       	mov	r10, r1
   1723a:	b1 2c       	mov	r11, r1
   1723c:	81 2c       	mov	r8, r1
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   1723e:	91 2c       	mov	r9, r1
   17240:	81 e9       	ldi	r24, 0x91	; 145
   17242:	9d e2       	ldi	r25, 0x2D	; 45
   17244:	9c 01       	movw	r18, r24
   17246:	40 e0       	ldi	r20, 0x00	; 0
   17248:	c7 57       	subi	r28, 0x77	; 119
   1724a:	df 4f       	sbci	r29, 0xFF	; 255
   1724c:	28 83       	st	Y, r18
   1724e:	39 83       	std	Y+1, r19	; 0x01
   17250:	4a 83       	std	Y+2, r20	; 0x02
   17252:	c9 58       	subi	r28, 0x89	; 137
                    ++errors;
                AMIGOp->GEOMETRY.CYLINDERS = val;
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   17254:	d0 40       	sbci	r29, 0x00	; 0
   17256:	83 eb       	ldi	r24, 0xB3	; 179
   17258:	9d e2       	ldi	r25, 0x2D	; 45
   1725a:	9c 01       	movw	r18, r24
   1725c:	40 e0       	ldi	r20, 0x00	; 0
   1725e:	c4 57       	subi	r28, 0x74	; 116
   17260:	df 4f       	sbci	r29, 0xFF	; 255
   17262:	28 83       	st	Y, r18
   17264:	39 83       	std	Y+1, r19	; 0x01
   17266:	4a 83       	std	Y+2, r20	; 0x02
   17268:	cc 58       	subi	r28, 0x8C	; 140
                    ++errors;
                AMIGOp->CONFIG.ID = val;
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   1726a:	d0 40       	sbci	r29, 0x00	; 0
   1726c:	83 ee       	ldi	r24, 0xE3	; 227
   1726e:	9d e2       	ldi	r25, 0x2D	; 45
   17270:	9c 01       	movw	r18, r24
   17272:	40 e0       	ldi	r20, 0x00	; 0
   17274:	c1 57       	subi	r28, 0x71	; 113
   17276:	df 4f       	sbci	r29, 0xFF	; 255
   17278:	28 83       	st	Y, r18
   1727a:	39 83       	std	Y+1, r19	; 0x01
   1727c:	4a 83       	std	Y+2, r20	; 0x02
   1727e:	cf 58       	subi	r28, 0x8F	; 143
                strncpy(AMIGOp->HEADER.NAME,ptr, MAX_NAME_LEN-1);
                AMIGOp->HEADER.NAME[MAX_FILE_NAME_LEN-1] = 0;
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   17280:	d0 40       	sbci	r29, 0x00	; 0
   17282:	82 e1       	ldi	r24, 0x12	; 18
   17284:	9e e2       	ldi	r25, 0x2E	; 46
   17286:	9c 01       	movw	r18, r24
   17288:	40 e0       	ldi	r20, 0x00	; 0
   1728a:	ce 56       	subi	r28, 0x6E	; 110
   1728c:	df 4f       	sbci	r29, 0xFF	; 255
   1728e:	28 83       	st	Y, r18
   17290:	39 83       	std	Y+1, r19	; 0x01
   17292:	4a 83       	std	Y+2, r20	; 0x02
   17294:	c2 59       	subi	r28, 0x92	; 146

        case AMIGO_HEADER:
            if( (ind = token(ptr,"DRIVE")) )
            {
                ptr += ind;
                printf("Skipping %s, at line:%d\n", ptr,lines);
   17296:	d0 40       	sbci	r29, 0x00	; 0
   17298:	82 e4       	ldi	r24, 0x42	; 66
   1729a:	9e e2       	ldi	r25, 0x2E	; 46
   1729c:	9c 01       	movw	r18, r24
   1729e:	40 e0       	ldi	r20, 0x00	; 0
   172a0:	cb 56       	subi	r28, 0x6B	; 107
   172a2:	df 4f       	sbci	r29, 0xFF	; 255
   172a4:	28 83       	st	Y, r18
   172a6:	39 83       	std	Y+1, r19	; 0x01
   172a8:	4a 83       	std	Y+2, r20	; 0x02
   172aa:	c5 59       	subi	r28, 0x95	; 149
                push_state(state);
                state = AMIGO_GEOMETRY;
            }
            else
            {
                printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   172ac:	d0 40       	sbci	r29, 0x00	; 0
   172ae:	8b e5       	ldi	r24, 0x5B	; 91
   172b0:	9e e2       	ldi	r25, 0x2E	; 46
   172b2:	9c 01       	movw	r18, r24
   172b4:	40 e0       	ldi	r20, 0x00	; 0
   172b6:	c8 56       	subi	r28, 0x68	; 104
   172b8:	df 4f       	sbci	r29, 0xFF	; 255
   172ba:	28 83       	st	Y, r18
   172bc:	39 83       	std	Y+1, r19	; 0x01
   172be:	4a 83       	std	Y+2, r20	; 0x02
   172c0:	c8 59       	subi	r28, 0x98	; 152
   172c2:	d0 40       	sbci	r29, 0x00	; 0
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
        //FIXME
        perror("Read_Config - open");
   172c4:	30 c0       	rjmp	.+96     	; 0x17326 <POSIX_Read_Config+0x15a>
   172c6:	8e e5       	ldi	r24, 0x5E	; 94
   172c8:	94 e1       	ldi	r25, 0x14	; 20
   172ca:	0e 94 e6 7b 	call	0xf7cc	; 0xf7cc <perror>
        printf("Read_Config: open(%s) failed\n", name);
   172ce:	cf 92       	push	r12
   172d0:	df 92       	push	r13
   172d2:	8a e3       	ldi	r24, 0x3A	; 58
   172d4:	90 e3       	ldi	r25, 0x30	; 48
   172d6:	1f 92       	push	r1
   172d8:	9f 93       	push	r25
   172da:	8f 93       	push	r24
        set_Config_Defaults();
   172dc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return(errors);
   172e0:	e7 de       	rcall	.-562    	; 0x170b0 <set_Config_Defaults>
   172e2:	0f 90       	pop	r0
   172e4:	0f 90       	pop	r0
   172e6:	0f 90       	pop	r0
   172e8:	0f 90       	pop	r0
   172ea:	0f 90       	pop	r0
   172ec:	81 e0       	ldi	r24, 0x01	; 1
   172ee:	90 e0       	ldi	r25, 0x00	; 0
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   172f0:	dd c7       	rjmp	.+4026   	; 0x182ac <POSIX_Read_Config+0x10e0>
   172f2:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <lines>
   172f6:	90 91 e5 19 	lds	r25, 0x19E5	; 0x8019e5 <lines+0x1>
   172fa:	01 96       	adiw	r24, 0x01	; 1
   172fc:	90 93 e5 19 	sts	0x19E5, r25	; 0x8019e5 <lines+0x1>
   17300:	80 93 e4 19 	sts	0x19E4, r24	; 0x8019e4 <lines>

        ptr = str;

        trim_tail(ptr);
   17304:	ce 01       	movw	r24, r28
   17306:	01 96       	adiw	r24, 0x01	; 1
   17308:	0e 94 b5 30 	call	0x616a	; 0x616a <trim_tail>
        ptr = skipspaces(ptr);
   1730c:	ce 01       	movw	r24, r28
   1730e:	01 96       	adiw	r24, 0x01	; 1
   17310:	0e 94 c3 30 	call	0x6186	; 0x6186 <skipspaces>
        len = strlen(ptr);
   17314:	6c 01       	movw	r12, r24
   17316:	fc 01       	movw	r30, r24
   17318:	01 90       	ld	r0, Z+
   1731a:	00 20       	and	r0, r0
   1731c:	e9 f7       	brne	.-6      	; 0x17318 <POSIX_Read_Config+0x14c>
        if(!len)
   1731e:	31 97       	sbiw	r30, 0x01	; 1
   17320:	8e 17       	cp	r24, r30
   17322:	9f 07       	cpc	r25, r31
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   17324:	79 f4       	brne	.+30     	; 0x17344 <POSIX_Read_Config+0x178>
   17326:	c9 57       	subi	r28, 0x79	; 121
   17328:	df 4f       	sbci	r29, 0xFF	; 255
   1732a:	48 81       	ld	r20, Y
   1732c:	59 81       	ldd	r21, Y+1	; 0x01
   1732e:	c7 58       	subi	r28, 0x87	; 135
   17330:	d0 40       	sbci	r29, 0x00	; 0
   17332:	6e e7       	ldi	r22, 0x7E	; 126
   17334:	70 e0       	ldi	r23, 0x00	; 0
   17336:	ce 01       	movw	r24, r28
   17338:	01 96       	adiw	r24, 0x01	; 1
   1733a:	0e 94 20 79 	call	0xf240	; 0xf240 <fgets>
   1733e:	89 2b       	or	r24, r25
   17340:	c1 f6       	brne	.-80     	; 0x172f2 <POSIX_Read_Config+0x126>
        ptr = skipspaces(ptr);
        len = strlen(ptr);
        if(!len)
            continue;
        // Skip comments
        if(*ptr == '#')
   17342:	67 c7       	rjmp	.+3790   	; 0x18212 <POSIX_Read_Config+0x1046>
   17344:	dc 01       	movw	r26, r24
   17346:	8c 91       	ld	r24, X
   17348:	83 32       	cpi	r24, 0x23	; 35
            continue;

        //FIXME check for state and last state
        if(token(ptr,"END"))
   1734a:	69 f3       	breq	.-38     	; 0x17326 <POSIX_Read_Config+0x15a>
   1734c:	61 e7       	ldi	r22, 0x71	; 113
   1734e:	74 e1       	ldi	r23, 0x14	; 20
   17350:	c6 01       	movw	r24, r12
   17352:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
        {
            state = pop_state();
   17356:	89 2b       	or	r24, r25
   17358:	19 f0       	breq	.+6      	; 0x17360 <POSIX_Read_Config+0x194>
   1735a:	f4 dd       	rcall	.-1048   	; 0x16f44 <pop_state>
            continue;
   1735c:	4c 01       	movw	r8, r24
        }

        switch(state)
   1735e:	e3 cf       	rjmp	.-58     	; 0x17326 <POSIX_Read_Config+0x15a>
   17360:	bd e0       	ldi	r27, 0x0D	; 13
   17362:	8b 16       	cp	r8, r27
   17364:	91 04       	cpc	r9, r1
   17366:	08 f0       	brcs	.+2      	; 0x1736a <POSIX_Read_Config+0x19e>
   17368:	34 c7       	rjmp	.+3688   	; 0x181d2 <POSIX_Read_Config+0x1006>
   1736a:	f4 01       	movw	r30, r8
   1736c:	e5 52       	subi	r30, 0x25	; 37
   1736e:	ff 4f       	sbci	r31, 0xFF	; 255
   17370:	0c 94 60 e9 	jmp	0x1d2c0	; 0x1d2c0 <__tablejump2__>
        {
        case START_STATE:
            if(token(ptr,"SS80"))
   17374:	65 e7       	ldi	r22, 0x75	; 117
   17376:	74 e1       	ldi	r23, 0x14	; 20
   17378:	c6 01       	movw	r24, r12
   1737a:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
            {
                push_state(state);
   1737e:	89 2b       	or	r24, r25
   17380:	b9 f0       	breq	.+46     	; 0x173b0 <POSIX_Read_Config+0x1e4>
   17382:	80 e0       	ldi	r24, 0x00	; 0
                state = SS80_STATE;
                index = alloc_device(SS80_TYPE);
   17384:	90 e0       	ldi	r25, 0x00	; 0
   17386:	c5 dd       	rcall	.-1142   	; 0x16f12 <push_state>
   17388:	82 e0       	ldi	r24, 0x02	; 2
   1738a:	90 e0       	ldi	r25, 0x00	; 0
   1738c:	1e dd       	rcall	.-1476   	; 0x16dca <alloc_device>
                if(index == -1)
   1738e:	3c 01       	movw	r6, r24
   17390:	01 96       	adiw	r24, 0x01	; 1
                    state = START_STATE;
                else
                    SS80p = (SS80DiskType *) Devices[index].dev;
   17392:	49 f2       	breq	.-110    	; 0x17326 <POSIX_Read_Config+0x15a>
   17394:	87 e0       	ldi	r24, 0x07	; 7
   17396:	86 9d       	mul	r24, r6
   17398:	f0 01       	movw	r30, r0
   1739a:	87 9d       	mul	r24, r7
   1739c:	f0 0d       	add	r31, r0
   1739e:	11 24       	eor	r1, r1
   173a0:	e1 5c       	subi	r30, 0xC1	; 193
   173a2:	f0 4e       	sbci	r31, 0xE0	; 224
   173a4:	43 80       	ldd	r4, Z+3	; 0x03
        {
        case START_STATE:
            if(token(ptr,"SS80"))
            {
                push_state(state);
                state = SS80_STATE;
   173a6:	54 80       	ldd	r5, Z+4	; 0x04
   173a8:	88 24       	eor	r8, r8
   173aa:	83 94       	inc	r8
   173ac:	91 2c       	mov	r9, r1
                    state = START_STATE;
                else
                    SS80p = (SS80DiskType *) Devices[index].dev;
            }
#ifdef AMIGO
            else if(token(ptr,"AMIGO"))
   173ae:	bb cf       	rjmp	.-138    	; 0x17326 <POSIX_Read_Config+0x15a>
   173b0:	6a e7       	ldi	r22, 0x7A	; 122
   173b2:	74 e1       	ldi	r23, 0x14	; 20
   173b4:	c6 01       	movw	r24, r12
   173b6:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
            {
                push_state(state);
   173ba:	89 2b       	or	r24, r25
   173bc:	c1 f0       	breq	.+48     	; 0x173ee <POSIX_Read_Config+0x222>
                state = AMIGO_STATE;
                index = alloc_device(AMIGO_TYPE);
   173be:	80 e0       	ldi	r24, 0x00	; 0
   173c0:	90 e0       	ldi	r25, 0x00	; 0
   173c2:	a7 dd       	rcall	.-1202   	; 0x16f12 <push_state>
   173c4:	81 e0       	ldi	r24, 0x01	; 1
   173c6:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   173c8:	00 dd       	rcall	.-1536   	; 0x16dca <alloc_device>
   173ca:	3c 01       	movw	r6, r24
   173cc:	01 96       	adiw	r24, 0x01	; 1
                    state = START_STATE;
                else
                    AMIGOp = (AMIGODiskType *) Devices[index].dev;
   173ce:	09 f4       	brne	.+2      	; 0x173d2 <POSIX_Read_Config+0x206>
   173d0:	aa cf       	rjmp	.-172    	; 0x17326 <POSIX_Read_Config+0x15a>
   173d2:	87 e0       	ldi	r24, 0x07	; 7
   173d4:	86 9d       	mul	r24, r6
   173d6:	f0 01       	movw	r30, r0
   173d8:	87 9d       	mul	r24, r7
   173da:	f0 0d       	add	r31, r0
   173dc:	11 24       	eor	r1, r1
   173de:	e1 5c       	subi	r30, 0xC1	; 193
   173e0:	f0 4e       	sbci	r31, 0xE0	; 224
            }
#ifdef AMIGO
            else if(token(ptr,"AMIGO"))
            {
                push_state(state);
                state = AMIGO_STATE;
   173e2:	23 80       	ldd	r2, Z+3	; 0x03
   173e4:	34 80       	ldd	r3, Z+4	; 0x04
   173e6:	a7 e0       	ldi	r26, 0x07	; 7
   173e8:	8a 2e       	mov	r8, r26
                else
                    AMIGOp = (AMIGODiskType *) Devices[index].dev;

            }
#endif
            else if(token(ptr,"PRINTER"))
   173ea:	91 2c       	mov	r9, r1
   173ec:	9c cf       	rjmp	.-200    	; 0x17326 <POSIX_Read_Config+0x15a>
   173ee:	60 e8       	ldi	r22, 0x80	; 128
   173f0:	74 e1       	ldi	r23, 0x14	; 20
   173f2:	c6 01       	movw	r24, r12
            {
                push_state(state);
   173f4:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   173f8:	89 2b       	or	r24, r25
   173fa:	f1 f0       	breq	.+60     	; 0x17438 <POSIX_Read_Config+0x26c>
                state = PRINTER_STATE;
                index = alloc_device(PRINTER_TYPE);
   173fc:	80 e0       	ldi	r24, 0x00	; 0
   173fe:	90 e0       	ldi	r25, 0x00	; 0
   17400:	88 dd       	rcall	.-1264   	; 0x16f12 <push_state>
   17402:	83 e0       	ldi	r24, 0x03	; 3
   17404:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   17406:	e1 dc       	rcall	.-1598   	; 0x16dca <alloc_device>
   17408:	3c 01       	movw	r6, r24
   1740a:	01 96       	adiw	r24, 0x01	; 1
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   1740c:	09 f4       	brne	.+2      	; 0x17410 <POSIX_Read_Config+0x244>
   1740e:	8b cf       	rjmp	.-234    	; 0x17326 <POSIX_Read_Config+0x15a>
   17410:	87 e0       	ldi	r24, 0x07	; 7
   17412:	86 9d       	mul	r24, r6
   17414:	f0 01       	movw	r30, r0
   17416:	87 9d       	mul	r24, r7
   17418:	f0 0d       	add	r31, r0
   1741a:	11 24       	eor	r1, r1
   1741c:	e1 5c       	subi	r30, 0xC1	; 193
   1741e:	f0 4e       	sbci	r31, 0xE0	; 224
   17420:	83 81       	ldd	r24, Z+3	; 0x03
   17422:	94 81       	ldd	r25, Z+4	; 0x04
   17424:	cb 57       	subi	r28, 0x7B	; 123
   17426:	df 4f       	sbci	r29, 0xFF	; 255
   17428:	99 83       	std	Y+1, r25	; 0x01
   1742a:	88 83       	st	Y, r24
            }
#endif
            else if(token(ptr,"PRINTER"))
            {
                push_state(state);
                state = PRINTER_STATE;
   1742c:	c5 58       	subi	r28, 0x85	; 133
   1742e:	d0 40       	sbci	r29, 0x00	; 0
   17430:	fb e0       	ldi	r31, 0x0B	; 11
   17432:	8f 2e       	mov	r8, r31
                if(index == -1)
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
            }
            else if( (ind = token(ptr,"DEBUG")) )
   17434:	91 2c       	mov	r9, r1
   17436:	77 cf       	rjmp	.-274    	; 0x17326 <POSIX_Read_Config+0x15a>
   17438:	68 e8       	ldi	r22, 0x88	; 136
   1743a:	74 e1       	ldi	r23, 0x14	; 20
   1743c:	c6 01       	movw	r24, r12
   1743e:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
            {
                ptr += ind;
                if ( assign_value(ptr, 0, 65535, &val) )
   17442:	00 97       	sbiw	r24, 0x00	; 0
   17444:	f1 f0       	breq	.+60     	; 0x17482 <POSIX_Read_Config+0x2b6>
   17446:	de 01       	movw	r26, r28
   17448:	af 57       	subi	r26, 0x7F	; 127
   1744a:	bf 4f       	sbci	r27, 0xFF	; 255
   1744c:	7d 01       	movw	r14, r26
   1744e:	0f ef       	ldi	r16, 0xFF	; 255
   17450:	1f ef       	ldi	r17, 0xFF	; 255
   17452:	20 e0       	ldi	r18, 0x00	; 0
   17454:	30 e0       	ldi	r19, 0x00	; 0
   17456:	40 e0       	ldi	r20, 0x00	; 0
   17458:	50 e0       	ldi	r21, 0x00	; 0
   1745a:	ba 01       	movw	r22, r20
   1745c:	8c 0d       	add	r24, r12
   1745e:	9d 1d       	adc	r25, r13
   17460:	88 dd       	rcall	.-1264   	; 0x16f72 <assign_value>
   17462:	67 2b       	or	r22, r23
   17464:	68 2b       	or	r22, r24
   17466:	69 2b       	or	r22, r25
                    debuglevel = val;
   17468:	09 f4       	brne	.+2      	; 0x1746c <POSIX_Read_Config+0x2a0>
   1746a:	5d cf       	rjmp	.-326    	; 0x17326 <POSIX_Read_Config+0x15a>
   1746c:	cf 57       	subi	r28, 0x7F	; 127
   1746e:	df 4f       	sbci	r29, 0xFF	; 255
   17470:	88 81       	ld	r24, Y
   17472:	99 81       	ldd	r25, Y+1	; 0x01
   17474:	c1 58       	subi	r28, 0x81	; 129
   17476:	d0 40       	sbci	r29, 0x00	; 0
   17478:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <debuglevel+0x1>
   1747c:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <debuglevel>
            }
            else if( (ind = token(ptr,"PRINTER_DEFAULT_ADDRESS")) )
   17480:	52 cf       	rjmp	.-348    	; 0x17326 <POSIX_Read_Config+0x15a>
   17482:	6e e8       	ldi	r22, 0x8E	; 142
   17484:	74 e1       	ldi	r23, 0x14	; 20
   17486:	c6 01       	movw	r24, r12
   17488:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   1748c:	30 91 e5 19 	lds	r19, 0x19E5	; 0x8019e5 <lines+0x1>
   17490:	20 91 e4 19 	lds	r18, 0x19E4	; 0x8019e4 <lines>
            {
                ptr += ind;
                //FIXME REMOVE from config
                printf("Skipping %s, at line:%d\n", ptr,lines);
   17494:	00 97       	sbiw	r24, 0x00	; 0
   17496:	61 f0       	breq	.+24     	; 0x174b0 <POSIX_Read_Config+0x2e4>
   17498:	3f 93       	push	r19
   1749a:	2f 93       	push	r18
   1749c:	c8 0e       	add	r12, r24
   1749e:	d9 1e       	adc	r13, r25
   174a0:	df 92       	push	r13
   174a2:	cf 92       	push	r12
   174a4:	81 e2       	ldi	r24, 0x21	; 33
   174a6:	90 e3       	ldi	r25, 0x30	; 48
   174a8:	1f 92       	push	r1
   174aa:	9f 93       	push	r25
            }
            else
            {
                printf("Unexpected START token: %s, at line:%d\n", ptr,lines);
   174ac:	8f 93       	push	r24
   174ae:	00 c5       	rjmp	.+2560   	; 0x17eb0 <POSIX_Read_Config+0xce4>
   174b0:	3f 93       	push	r19
   174b2:	2f 93       	push	r18
   174b4:	df 92       	push	r13
   174b6:	cf 92       	push	r12
                ++errors;
            }
            break;

        case PRINTER_STATE:
            if(token(ptr,"CONFIG"))
   174b8:	89 ef       	ldi	r24, 0xF9	; 249
   174ba:	9f e2       	ldi	r25, 0x2F	; 47
   174bc:	b5 c0       	rjmp	.+362    	; 0x17628 <POSIX_Read_Config+0x45c>
   174be:	66 ea       	ldi	r22, 0xA6	; 166
   174c0:	74 e1       	ldi	r23, 0x14	; 20
   174c2:	c6 01       	movw	r24, r12
   174c4:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
            {
                push_state(state);
   174c8:	89 2b       	or	r24, r25
   174ca:	39 f0       	breq	.+14     	; 0x174da <POSIX_Read_Config+0x30e>
   174cc:	8b e0       	ldi	r24, 0x0B	; 11
                state = PRINTER_CONFIG;
   174ce:	90 e0       	ldi	r25, 0x00	; 0
   174d0:	20 dd       	rcall	.-1472   	; 0x16f12 <push_state>
   174d2:	ec e0       	ldi	r30, 0x0C	; 12
   174d4:	8e 2e       	mov	r8, r30
            }
            else
            {
                printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   174d6:	91 2c       	mov	r9, r1
   174d8:	26 cf       	rjmp	.-436    	; 0x17326 <POSIX_Read_Config+0x15a>
   174da:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <lines+0x1>
   174de:	8f 93       	push	r24
   174e0:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <lines>
   174e4:	8f 93       	push	r24
   174e6:	df 92       	push	r13
   174e8:	cf 92       	push	r12
   174ea:	8f ec       	ldi	r24, 0xCF	; 207
   174ec:	9f e2       	ldi	r25, 0x2F	; 47
   174ee:	1f 92       	push	r1
   174f0:	9f 93       	push	r25
                ++errors;
            }
            break;

        case PRINTER_CONFIG:
            if( (ind = token(ptr,"ADDRESS")) )
   174f2:	8f 93       	push	r24
   174f4:	ab c5       	rjmp	.+2902   	; 0x1804c <POSIX_Read_Config+0xe80>
   174f6:	6e e9       	ldi	r22, 0x9E	; 158
   174f8:	74 e1       	ldi	r23, 0x14	; 20
   174fa:	c6 01       	movw	r24, r12
   174fc:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
            {
                ptr += ind;
                
                tmp = 0xff;
                if (!assign_value(ptr, 0, 14, &val) )
   17500:	00 97       	sbiw	r24, 0x00	; 0
   17502:	79 f1       	breq	.+94     	; 0x17562 <POSIX_Read_Config+0x396>
   17504:	de 01       	movw	r26, r28
   17506:	af 57       	subi	r26, 0x7F	; 127
   17508:	bf 4f       	sbci	r27, 0xFF	; 255
   1750a:	7d 01       	movw	r14, r26
   1750c:	0e e0       	ldi	r16, 0x0E	; 14
   1750e:	10 e0       	ldi	r17, 0x00	; 0
   17510:	20 e0       	ldi	r18, 0x00	; 0
   17512:	30 e0       	ldi	r19, 0x00	; 0
   17514:	40 e0       	ldi	r20, 0x00	; 0
   17516:	50 e0       	ldi	r21, 0x00	; 0
   17518:	ba 01       	movw	r22, r20
   1751a:	8c 0d       	add	r24, r12
   1751c:	9d 1d       	adc	r25, r13
   1751e:	29 dd       	rcall	.-1454   	; 0x16f72 <assign_value>
   17520:	67 2b       	or	r22, r23
   17522:	68 2b       	or	r22, r24
                    ++errors;
   17524:	69 2b       	or	r22, r25
   17526:	29 f4       	brne	.+10     	; 0x17532 <POSIX_Read_Config+0x366>
   17528:	bf ef       	ldi	r27, 0xFF	; 255
        case PRINTER_CONFIG:
            if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                
                tmp = 0xff;
   1752a:	ab 1a       	sub	r10, r27
   1752c:	bb 0a       	sbc	r11, r27
                if (!assign_value(ptr, 0, 14, &val) )
                    ++errors;
                else
                    tmp = val;
   1752e:	8f ef       	ldi	r24, 0xFF	; 255
   17530:	05 c0       	rjmp	.+10     	; 0x1753c <POSIX_Read_Config+0x370>
   17532:	cf 57       	subi	r28, 0x7F	; 127
   17534:	df 4f       	sbci	r29, 0xFF	; 255
   17536:	88 81       	ld	r24, Y
                Devices[index].ADDRESS = tmp;
   17538:	c1 58       	subi	r28, 0x81	; 129
   1753a:	d0 40       	sbci	r29, 0x00	; 0
   1753c:	97 e0       	ldi	r25, 0x07	; 7
   1753e:	96 9d       	mul	r25, r6
   17540:	f0 01       	movw	r30, r0
   17542:	97 9d       	mul	r25, r7
   17544:	f0 0d       	add	r31, r0
   17546:	11 24       	eor	r1, r1
   17548:	e1 5c       	subi	r30, 0xC1	; 193
                PRINTERp->HEADER.ADDRESS  = tmp;
   1754a:	f0 4e       	sbci	r31, 0xE0	; 224
   1754c:	81 83       	std	Z+1, r24	; 0x01
   1754e:	cb 57       	subi	r28, 0x7B	; 123
   17550:	df 4f       	sbci	r29, 0xFF	; 255
   17552:	a8 81       	ld	r26, Y
   17554:	b9 81       	ldd	r27, Y+1	; 0x01
   17556:	c5 58       	subi	r28, 0x85	; 133
                // NO PPR
                Devices[index].PPR = 0xff;
   17558:	d0 40       	sbci	r29, 0x00	; 0
   1755a:	8c 93       	st	X, r24
   1755c:	8f ef       	ldi	r24, 0xFF	; 255
                PRINTERp->HEADER.PPR = 0xff;
            }
            else
            {
                printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   1755e:	82 83       	std	Z+2, r24	; 0x02
   17560:	c2 c0       	rjmp	.+388    	; 0x176e6 <POSIX_Read_Config+0x51a>
   17562:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <lines+0x1>
   17566:	8f 93       	push	r24
   17568:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <lines>
   1756c:	8f 93       	push	r24
   1756e:	df 92       	push	r13
   17570:	cf 92       	push	r12
   17572:	8e e9       	ldi	r24, 0x9E	; 158
   17574:	9f e2       	ldi	r25, 0x2F	; 47
   17576:	1f 92       	push	r1
   17578:	9f 93       	push	r25
   1757a:	8f 93       	push	r24
                ++errors;
   1757c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   17580:	bf ef       	ldi	r27, 0xFF	; 255
            }
            break;

        case SS80_STATE:
            if(token(ptr,"HEADER"))
   17582:	ab 1a       	sub	r10, r27
   17584:	bb 0a       	sbc	r11, r27
   17586:	3f c6       	rjmp	.+3198   	; 0x18206 <POSIX_Read_Config+0x103a>
   17588:	6d ea       	ldi	r22, 0xAD	; 173
   1758a:	74 e1       	ldi	r23, 0x14	; 20
   1758c:	c6 01       	movw	r24, r12
   1758e:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
            {
                push_state(state);
   17592:	89 2b       	or	r24, r25
   17594:	39 f0       	breq	.+14     	; 0x175a4 <POSIX_Read_Config+0x3d8>
                state = SS80_HEADER;
   17596:	81 e0       	ldi	r24, 0x01	; 1
   17598:	90 e0       	ldi	r25, 0x00	; 0
   1759a:	bb dc       	rcall	.-1674   	; 0x16f12 <push_state>
            }
            else if(token(ptr,"CONFIG"))
   1759c:	72 e0       	ldi	r23, 0x02	; 2
   1759e:	87 2e       	mov	r8, r23
   175a0:	91 2c       	mov	r9, r1
   175a2:	c1 ce       	rjmp	.-638    	; 0x17326 <POSIX_Read_Config+0x15a>
   175a4:	66 ea       	ldi	r22, 0xA6	; 166
   175a6:	74 e1       	ldi	r23, 0x14	; 20
   175a8:	c6 01       	movw	r24, r12
            {
                push_state(state);
   175aa:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   175ae:	89 2b       	or	r24, r25
                state = SS80_CONFIG;
   175b0:	39 f0       	breq	.+14     	; 0x175c0 <POSIX_Read_Config+0x3f4>
   175b2:	81 e0       	ldi	r24, 0x01	; 1
   175b4:	90 e0       	ldi	r25, 0x00	; 0
   175b6:	ad dc       	rcall	.-1702   	; 0x16f12 <push_state>
            }
            else if(token(ptr,"CONTROLLER"))
   175b8:	63 e0       	ldi	r22, 0x03	; 3
   175ba:	86 2e       	mov	r8, r22
   175bc:	91 2c       	mov	r9, r1
   175be:	b3 ce       	rjmp	.-666    	; 0x17326 <POSIX_Read_Config+0x15a>
   175c0:	64 eb       	ldi	r22, 0xB4	; 180
   175c2:	74 e1       	ldi	r23, 0x14	; 20
   175c4:	c6 01       	movw	r24, r12
            {
                push_state(state);
   175c6:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   175ca:	89 2b       	or	r24, r25
                state = SS80_CONTROLLER;
   175cc:	39 f0       	breq	.+14     	; 0x175dc <POSIX_Read_Config+0x410>
   175ce:	81 e0       	ldi	r24, 0x01	; 1
   175d0:	90 e0       	ldi	r25, 0x00	; 0
   175d2:	9f dc       	rcall	.-1730   	; 0x16f12 <push_state>
            }
            else if(token(ptr,"UNIT"))
   175d4:	54 e0       	ldi	r21, 0x04	; 4
   175d6:	85 2e       	mov	r8, r21
   175d8:	91 2c       	mov	r9, r1
   175da:	a5 ce       	rjmp	.-694    	; 0x17326 <POSIX_Read_Config+0x15a>
   175dc:	6f eb       	ldi	r22, 0xBF	; 191
   175de:	74 e1       	ldi	r23, 0x14	; 20
   175e0:	c6 01       	movw	r24, r12
            {
                push_state(state);
   175e2:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   175e6:	89 2b       	or	r24, r25
                state = SS80_UNIT;
   175e8:	39 f0       	breq	.+14     	; 0x175f8 <POSIX_Read_Config+0x42c>
   175ea:	81 e0       	ldi	r24, 0x01	; 1
   175ec:	90 e0       	ldi	r25, 0x00	; 0
   175ee:	91 dc       	rcall	.-1758   	; 0x16f12 <push_state>
            }
            else if(token(ptr,"VOLUME"))
   175f0:	45 e0       	ldi	r20, 0x05	; 5
   175f2:	84 2e       	mov	r8, r20
   175f4:	91 2c       	mov	r9, r1
   175f6:	97 ce       	rjmp	.-722    	; 0x17326 <POSIX_Read_Config+0x15a>
   175f8:	64 ec       	ldi	r22, 0xC4	; 196
   175fa:	74 e1       	ldi	r23, 0x14	; 20
   175fc:	c6 01       	movw	r24, r12
            {
                push_state(state);
   175fe:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   17602:	89 2b       	or	r24, r25
   17604:	39 f0       	breq	.+14     	; 0x17614 <POSIX_Read_Config+0x448>
                state = SS80_VOLUME;
   17606:	81 e0       	ldi	r24, 0x01	; 1
   17608:	90 e0       	ldi	r25, 0x00	; 0
   1760a:	83 dc       	rcall	.-1786   	; 0x16f12 <push_state>
   1760c:	36 e0       	ldi	r19, 0x06	; 6
            }
            else
            {
                printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   1760e:	83 2e       	mov	r8, r19
   17610:	91 2c       	mov	r9, r1
   17612:	89 ce       	rjmp	.-750    	; 0x17326 <POSIX_Read_Config+0x15a>
   17614:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <lines+0x1>
   17618:	8f 93       	push	r24
   1761a:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <lines>
   1761e:	8f 93       	push	r24
   17620:	df 92       	push	r13
   17622:	cf 92       	push	r12
   17624:	81 e7       	ldi	r24, 0x71	; 113
   17626:	9f e2       	ldi	r25, 0x2F	; 47
   17628:	1f 92       	push	r1
                ++errors;
            }
            break;

        case SS80_HEADER:
            if( (ind = token(ptr,"ADDRESS")) )
   1762a:	9f 93       	push	r25
   1762c:	8f 93       	push	r24
   1762e:	cb c5       	rjmp	.+2966   	; 0x181c6 <POSIX_Read_Config+0xffa>
   17630:	6e e9       	ldi	r22, 0x9E	; 158
   17632:	74 e1       	ldi	r23, 0x14	; 20
   17634:	c6 01       	movw	r24, r12
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 30, &val) )
   17636:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   1763a:	00 97       	sbiw	r24, 0x00	; 0
   1763c:	39 f1       	breq	.+78     	; 0x1768c <POSIX_Read_Config+0x4c0>
   1763e:	de 01       	movw	r26, r28
   17640:	af 57       	subi	r26, 0x7F	; 127
   17642:	bf 4f       	sbci	r27, 0xFF	; 255
   17644:	7d 01       	movw	r14, r26
   17646:	0e e1       	ldi	r16, 0x1E	; 30
   17648:	10 e0       	ldi	r17, 0x00	; 0
   1764a:	20 e0       	ldi	r18, 0x00	; 0
   1764c:	30 e0       	ldi	r19, 0x00	; 0
   1764e:	40 e0       	ldi	r20, 0x00	; 0
   17650:	50 e0       	ldi	r21, 0x00	; 0
   17652:	ba 01       	movw	r22, r20
   17654:	8c 0d       	add	r24, r12
   17656:	9d 1d       	adc	r25, r13
   17658:	8c dc       	rcall	.-1768   	; 0x16f72 <assign_value>
   1765a:	67 2b       	or	r22, r23
                    ++errors;
   1765c:	68 2b       	or	r22, r24
   1765e:	69 2b       	or	r22, r25
   17660:	29 f4       	brne	.+10     	; 0x1766c <POSIX_Read_Config+0x4a0>

        case SS80_HEADER:
            if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                tmp = 0xff;
   17662:	bf ef       	ldi	r27, 0xFF	; 255
   17664:	ab 1a       	sub	r10, r27
                if (!assign_value(ptr, 0, 30, &val) )
                    ++errors;
                else
                    tmp = val;
   17666:	bb 0a       	sbc	r11, r27
   17668:	8f ef       	ldi	r24, 0xFF	; 255
   1766a:	05 c0       	rjmp	.+10     	; 0x17676 <POSIX_Read_Config+0x4aa>
   1766c:	cf 57       	subi	r28, 0x7F	; 127
   1766e:	df 4f       	sbci	r29, 0xFF	; 255
                Devices[index].ADDRESS = tmp;
   17670:	88 81       	ld	r24, Y
   17672:	c1 58       	subi	r28, 0x81	; 129
   17674:	d0 40       	sbci	r29, 0x00	; 0
   17676:	97 e0       	ldi	r25, 0x07	; 7
   17678:	96 9d       	mul	r25, r6
   1767a:	f0 01       	movw	r30, r0
   1767c:	97 9d       	mul	r25, r7
   1767e:	f0 0d       	add	r31, r0
   17680:	11 24       	eor	r1, r1
                SS80p->HEADER.ADDRESS  = tmp;
   17682:	e1 5c       	subi	r30, 0xC1	; 193
   17684:	f0 4e       	sbci	r31, 0xE0	; 224
            }
            else if( (ind = token(ptr,"PPR")) )
   17686:	81 83       	std	Z+1, r24	; 0x01
   17688:	f2 01       	movw	r30, r4
   1768a:	42 c4       	rjmp	.+2180   	; 0x17f10 <POSIX_Read_Config+0xd44>
   1768c:	6b ec       	ldi	r22, 0xCB	; 203
   1768e:	74 e1       	ldi	r23, 0x14	; 20
   17690:	c6 01       	movw	r24, r12
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 7, &val) )
   17692:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   17696:	00 97       	sbiw	r24, 0x00	; 0
   17698:	49 f1       	breq	.+82     	; 0x176ec <POSIX_Read_Config+0x520>
   1769a:	9e 01       	movw	r18, r28
   1769c:	2f 57       	subi	r18, 0x7F	; 127
   1769e:	3f 4f       	sbci	r19, 0xFF	; 255
   176a0:	79 01       	movw	r14, r18
   176a2:	07 e0       	ldi	r16, 0x07	; 7
   176a4:	10 e0       	ldi	r17, 0x00	; 0
   176a6:	20 e0       	ldi	r18, 0x00	; 0
   176a8:	30 e0       	ldi	r19, 0x00	; 0
   176aa:	40 e0       	ldi	r20, 0x00	; 0
   176ac:	50 e0       	ldi	r21, 0x00	; 0
   176ae:	ba 01       	movw	r22, r20
   176b0:	8c 0d       	add	r24, r12
   176b2:	9d 1d       	adc	r25, r13
   176b4:	5e dc       	rcall	.-1860   	; 0x16f72 <assign_value>
   176b6:	67 2b       	or	r22, r23
                    ++errors;
   176b8:	68 2b       	or	r22, r24
   176ba:	69 2b       	or	r22, r25
   176bc:	29 f4       	brne	.+10     	; 0x176c8 <POSIX_Read_Config+0x4fc>
                SS80p->HEADER.ADDRESS  = tmp;
            }
            else if( (ind = token(ptr,"PPR")) )
            {
                ptr += ind;
                tmp = 0xff;
   176be:	3f ef       	ldi	r19, 0xFF	; 255
   176c0:	a3 1a       	sub	r10, r19
                if (!assign_value(ptr, 0, 7, &val) )
                    ++errors;
                else
                    tmp = val;
   176c2:	b3 0a       	sbc	r11, r19
   176c4:	8f ef       	ldi	r24, 0xFF	; 255
   176c6:	05 c0       	rjmp	.+10     	; 0x176d2 <POSIX_Read_Config+0x506>
   176c8:	cf 57       	subi	r28, 0x7F	; 127
   176ca:	df 4f       	sbci	r29, 0xFF	; 255
                Devices[index].PPR = tmp;
   176cc:	88 81       	ld	r24, Y
   176ce:	c1 58       	subi	r28, 0x81	; 129
   176d0:	d0 40       	sbci	r29, 0x00	; 0
   176d2:	97 e0       	ldi	r25, 0x07	; 7
   176d4:	96 9d       	mul	r25, r6
   176d6:	f0 01       	movw	r30, r0
   176d8:	97 9d       	mul	r25, r7
   176da:	f0 0d       	add	r31, r0
   176dc:	11 24       	eor	r1, r1
                SS80p->HEADER.PPR = tmp;
   176de:	e1 5c       	subi	r30, 0xC1	; 193
   176e0:	f0 4e       	sbci	r31, 0xE0	; 224
   176e2:	82 83       	std	Z+2, r24	; 0x02
   176e4:	d2 01       	movw	r26, r4
            }
            else if( (ind = token(ptr,"FILE")) )
   176e6:	11 96       	adiw	r26, 0x01	; 1
   176e8:	8c 93       	st	X, r24
   176ea:	1d ce       	rjmp	.-966    	; 0x17326 <POSIX_Read_Config+0x15a>
   176ec:	6f ec       	ldi	r22, 0xCF	; 207
   176ee:	74 e1       	ldi	r23, 0x14	; 20
   176f0:	c6 01       	movw	r24, r12
   176f2:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
            {
                ptr += ind;
                ptr = skipspaces(ptr);
   176f6:	00 97       	sbiw	r24, 0x00	; 0
   176f8:	a1 f0       	breq	.+40     	; 0x17722 <POSIX_Read_Config+0x556>
   176fa:	8c 0d       	add	r24, r12
                if(*ptr == '=')
   176fc:	9d 1d       	adc	r25, r13
   176fe:	0e 94 c3 30 	call	0x6186	; 0x6186 <skipspaces>
   17702:	fc 01       	movw	r30, r24
                {
                    ++ptr;
                    ptr = skipspaces(ptr);
   17704:	20 81       	ld	r18, Z
   17706:	2d 33       	cpi	r18, 0x3D	; 61
   17708:	19 f4       	brne	.+6      	; 0x17710 <POSIX_Read_Config+0x544>
                }
                strncpy(SS80p->HEADER.NAME,ptr, MAX_FILE_NAME_LEN-1);
   1770a:	01 96       	adiw	r24, 0x01	; 1
   1770c:	0e 94 c3 30 	call	0x6186	; 0x6186 <skipspaces>
   17710:	4f e1       	ldi	r20, 0x1F	; 31
   17712:	50 e0       	ldi	r21, 0x00	; 0
   17714:	bc 01       	movw	r22, r24
   17716:	c2 01       	movw	r24, r4
                SS80p->HEADER.NAME[MAX_FILE_NAME_LEN-1] = 0;
   17718:	02 96       	adiw	r24, 0x02	; 2
   1771a:	0e 94 66 30 	call	0x60cc	; 0x60cc <strncpy>
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   1771e:	d2 01       	movw	r26, r4
   17720:	41 c4       	rjmp	.+2178   	; 0x17fa4 <POSIX_Read_Config+0xdd8>
   17722:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <lines+0x1>
   17726:	8f 93       	push	r24
   17728:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <lines>
   1772c:	8f 93       	push	r24
   1772e:	df 92       	push	r13
   17730:	cf 92       	push	r12
                ++errors;
            }
            break;
        case SS80_CONFIG:
            if( (ind = token(ptr,"ID")) )
   17732:	83 e4       	ldi	r24, 0x43	; 67
   17734:	9f e2       	ldi	r25, 0x2F	; 47
   17736:	1f cf       	rjmp	.-450    	; 0x17576 <POSIX_Read_Config+0x3aa>
   17738:	64 ed       	ldi	r22, 0xD4	; 212
   1773a:	74 e1       	ldi	r23, 0x14	; 20
   1773c:	c6 01       	movw	r24, r12
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   1773e:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   17742:	00 97       	sbiw	r24, 0x00	; 0
   17744:	09 f1       	breq	.+66     	; 0x17788 <POSIX_Read_Config+0x5bc>
   17746:	9e 01       	movw	r18, r28
   17748:	2f 57       	subi	r18, 0x7F	; 127
   1774a:	3f 4f       	sbci	r19, 0xFF	; 255
   1774c:	79 01       	movw	r14, r18
   1774e:	0f ef       	ldi	r16, 0xFF	; 255
   17750:	1f ef       	ldi	r17, 0xFF	; 255
   17752:	20 e0       	ldi	r18, 0x00	; 0
   17754:	30 e0       	ldi	r19, 0x00	; 0
   17756:	40 e0       	ldi	r20, 0x00	; 0
   17758:	50 e0       	ldi	r21, 0x00	; 0
   1775a:	ba 01       	movw	r22, r20
   1775c:	8c 0d       	add	r24, r12
   1775e:	9d 1d       	adc	r25, r13
   17760:	08 dc       	rcall	.-2032   	; 0x16f72 <assign_value>
   17762:	67 2b       	or	r22, r23
                    ++errors;
   17764:	68 2b       	or	r22, r24
   17766:	69 2b       	or	r22, r25
   17768:	19 f4       	brne	.+6      	; 0x17770 <POSIX_Read_Config+0x5a4>
                SS80p->CONFIG.ID = val;
   1776a:	3f ef       	ldi	r19, 0xFF	; 255
   1776c:	a3 1a       	sub	r10, r19
   1776e:	b3 0a       	sbc	r11, r19
   17770:	cf 57       	subi	r28, 0x7F	; 127
   17772:	df 4f       	sbci	r29, 0xFF	; 255
   17774:	88 81       	ld	r24, Y
   17776:	99 81       	ldd	r25, Y+1	; 0x01
   17778:	c1 58       	subi	r28, 0x81	; 129
   1777a:	d0 40       	sbci	r29, 0x00	; 0
   1777c:	d2 01       	movw	r26, r4
   1777e:	94 96       	adiw	r26, 0x24	; 36
   17780:	9c 93       	st	X, r25
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   17782:	8e 93       	st	-X, r24
   17784:	93 97       	sbiw	r26, 0x23	; 35
   17786:	cf cd       	rjmp	.-1122   	; 0x17326 <POSIX_Read_Config+0x15a>
   17788:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <lines+0x1>
   1778c:	8f 93       	push	r24
   1778e:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <lines>
   17792:	8f 93       	push	r24
   17794:	df 92       	push	r13
                ++errors;
            }
            break;

        case SS80_CONTROLLER:
            if( (ind = token(ptr,"UNITS_INSTALLED")) )
   17796:	cf 92       	push	r12
   17798:	85 e1       	ldi	r24, 0x15	; 21
   1779a:	9f e2       	ldi	r25, 0x2F	; 47
   1779c:	ec ce       	rjmp	.-552    	; 0x17576 <POSIX_Read_Config+0x3aa>
   1779e:	67 ed       	ldi	r22, 0xD7	; 215
   177a0:	74 e1       	ldi	r23, 0x14	; 20
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   177a2:	c6 01       	movw	r24, r12
   177a4:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   177a8:	00 97       	sbiw	r24, 0x00	; 0
   177aa:	09 f1       	breq	.+66     	; 0x177ee <POSIX_Read_Config+0x622>
   177ac:	9e 01       	movw	r18, r28
   177ae:	2f 57       	subi	r18, 0x7F	; 127
   177b0:	3f 4f       	sbci	r19, 0xFF	; 255
   177b2:	79 01       	movw	r14, r18
   177b4:	0f ef       	ldi	r16, 0xFF	; 255
   177b6:	1f ef       	ldi	r17, 0xFF	; 255
   177b8:	20 e0       	ldi	r18, 0x00	; 0
   177ba:	30 e0       	ldi	r19, 0x00	; 0
   177bc:	40 e0       	ldi	r20, 0x00	; 0
   177be:	50 e0       	ldi	r21, 0x00	; 0
   177c0:	ba 01       	movw	r22, r20
   177c2:	8c 0d       	add	r24, r12
   177c4:	9d 1d       	adc	r25, r13
   177c6:	d5 db       	rcall	.-2134   	; 0x16f72 <assign_value>
                    ++errors;
   177c8:	67 2b       	or	r22, r23
   177ca:	68 2b       	or	r22, r24
   177cc:	69 2b       	or	r22, r25
                SS80p->CONTROLLER.UNITS_INSTALLED = val;
   177ce:	19 f4       	brne	.+6      	; 0x177d6 <POSIX_Read_Config+0x60a>
   177d0:	3f ef       	ldi	r19, 0xFF	; 255
   177d2:	a3 1a       	sub	r10, r19
   177d4:	b3 0a       	sbc	r11, r19
   177d6:	cf 57       	subi	r28, 0x7F	; 127
   177d8:	df 4f       	sbci	r29, 0xFF	; 255
   177da:	88 81       	ld	r24, Y
   177dc:	99 81       	ldd	r25, Y+1	; 0x01
   177de:	c1 58       	subi	r28, 0x81	; 129
   177e0:	d0 40       	sbci	r29, 0x00	; 0
   177e2:	d2 01       	movw	r26, r4
            }
            else if( (ind = token(ptr,"TRANSFER_RATE")) )
   177e4:	96 96       	adiw	r26, 0x26	; 38
   177e6:	9c 93       	st	X, r25
   177e8:	8e 93       	st	-X, r24
   177ea:	95 97       	sbiw	r26, 0x25	; 37
   177ec:	9c cd       	rjmp	.-1224   	; 0x17326 <POSIX_Read_Config+0x15a>
   177ee:	6f e3       	ldi	r22, 0x3F	; 63
   177f0:	75 e1       	ldi	r23, 0x15	; 21
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   177f2:	c6 01       	movw	r24, r12
   177f4:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   177f8:	00 97       	sbiw	r24, 0x00	; 0
   177fa:	e9 f0       	breq	.+58     	; 0x17836 <POSIX_Read_Config+0x66a>
   177fc:	fe 01       	movw	r30, r28
   177fe:	ef 57       	subi	r30, 0x7F	; 127
   17800:	ff 4f       	sbci	r31, 0xFF	; 255
   17802:	7f 01       	movw	r14, r30
   17804:	0f ef       	ldi	r16, 0xFF	; 255
   17806:	1f ef       	ldi	r17, 0xFF	; 255
   17808:	20 e0       	ldi	r18, 0x00	; 0
   1780a:	30 e0       	ldi	r19, 0x00	; 0
   1780c:	40 e0       	ldi	r20, 0x00	; 0
   1780e:	50 e0       	ldi	r21, 0x00	; 0
   17810:	ba 01       	movw	r22, r20
   17812:	8c 0d       	add	r24, r12
   17814:	9d 1d       	adc	r25, r13
   17816:	ad db       	rcall	.-2214   	; 0x16f72 <assign_value>
                    ++errors;
   17818:	67 2b       	or	r22, r23
   1781a:	68 2b       	or	r22, r24
   1781c:	69 2b       	or	r22, r25
                SS80p->CONTROLLER.TRANSFER_RATE = val;
   1781e:	19 f4       	brne	.+6      	; 0x17826 <POSIX_Read_Config+0x65a>
   17820:	ff ef       	ldi	r31, 0xFF	; 255
   17822:	af 1a       	sub	r10, r31
   17824:	bf 0a       	sbc	r11, r31
   17826:	cf 57       	subi	r28, 0x7F	; 127
   17828:	df 4f       	sbci	r29, 0xFF	; 255
   1782a:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"TYPE")) )
   1782c:	99 81       	ldd	r25, Y+1	; 0x01
   1782e:	c1 58       	subi	r28, 0x81	; 129
   17830:	d0 40       	sbci	r29, 0x00	; 0
   17832:	d2 01       	movw	r26, r4
   17834:	5c c4       	rjmp	.+2232   	; 0x180ee <POSIX_Read_Config+0xf22>
   17836:	6e e3       	ldi	r22, 0x3E	; 62
   17838:	74 e1       	ldi	r23, 0x14	; 20
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   1783a:	c6 01       	movw	r24, r12
   1783c:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   17840:	00 97       	sbiw	r24, 0x00	; 0
   17842:	f1 f0       	breq	.+60     	; 0x17880 <POSIX_Read_Config+0x6b4>
   17844:	fe 01       	movw	r30, r28
   17846:	ef 57       	subi	r30, 0x7F	; 127
   17848:	ff 4f       	sbci	r31, 0xFF	; 255
   1784a:	7f 01       	movw	r14, r30
   1784c:	0f ef       	ldi	r16, 0xFF	; 255
   1784e:	1f ef       	ldi	r17, 0xFF	; 255
   17850:	20 e0       	ldi	r18, 0x00	; 0
   17852:	30 e0       	ldi	r19, 0x00	; 0
   17854:	40 e0       	ldi	r20, 0x00	; 0
   17856:	50 e0       	ldi	r21, 0x00	; 0
   17858:	ba 01       	movw	r22, r20
   1785a:	8c 0d       	add	r24, r12
   1785c:	9d 1d       	adc	r25, r13
   1785e:	89 db       	rcall	.-2286   	; 0x16f72 <assign_value>
                    ++errors;
   17860:	67 2b       	or	r22, r23
   17862:	68 2b       	or	r22, r24
   17864:	69 2b       	or	r22, r25
                SS80p->CONTROLLER.TYPE = val;
   17866:	19 f4       	brne	.+6      	; 0x1786e <POSIX_Read_Config+0x6a2>
   17868:	ff ef       	ldi	r31, 0xFF	; 255
   1786a:	af 1a       	sub	r10, r31
   1786c:	bf 0a       	sbc	r11, r31
   1786e:	cf 57       	subi	r28, 0x7F	; 127
   17870:	df 4f       	sbci	r29, 0xFF	; 255
   17872:	88 81       	ld	r24, Y
   17874:	c1 58       	subi	r28, 0x81	; 129
   17876:	d0 40       	sbci	r29, 0x00	; 0
            }
            else
            {
                printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   17878:	d2 01       	movw	r26, r4
   1787a:	99 96       	adiw	r26, 0x29	; 41
   1787c:	8c 93       	st	X, r24
   1787e:	53 cd       	rjmp	.-1370   	; 0x17326 <POSIX_Read_Config+0x15a>
   17880:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <lines+0x1>
   17884:	8f 93       	push	r24
   17886:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <lines>
   1788a:	8f 93       	push	r24
                ++errors;
            }
            break;

        case SS80_UNIT:
            if( (ind = token(ptr,"UNIT_TYPE")) )
   1788c:	df 92       	push	r13
   1788e:	cf 92       	push	r12
   17890:	83 ee       	ldi	r24, 0xE3	; 227
   17892:	9e e2       	ldi	r25, 0x2E	; 46
   17894:	70 ce       	rjmp	.-800    	; 0x17576 <POSIX_Read_Config+0x3aa>
   17896:	67 ee       	ldi	r22, 0xE7	; 231
   17898:	74 e1       	ldi	r23, 0x14	; 20
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   1789a:	c6 01       	movw	r24, r12
   1789c:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   178a0:	00 97       	sbiw	r24, 0x00	; 0
   178a2:	f1 f0       	breq	.+60     	; 0x178e0 <POSIX_Read_Config+0x714>
   178a4:	9e 01       	movw	r18, r28
   178a6:	2f 57       	subi	r18, 0x7F	; 127
   178a8:	3f 4f       	sbci	r19, 0xFF	; 255
   178aa:	79 01       	movw	r14, r18
   178ac:	0f ef       	ldi	r16, 0xFF	; 255
   178ae:	1f ef       	ldi	r17, 0xFF	; 255
   178b0:	20 e0       	ldi	r18, 0x00	; 0
   178b2:	30 e0       	ldi	r19, 0x00	; 0
   178b4:	40 e0       	ldi	r20, 0x00	; 0
   178b6:	50 e0       	ldi	r21, 0x00	; 0
   178b8:	ba 01       	movw	r22, r20
   178ba:	8c 0d       	add	r24, r12
   178bc:	9d 1d       	adc	r25, r13
   178be:	59 db       	rcall	.-2382   	; 0x16f72 <assign_value>
                    ++errors;
   178c0:	67 2b       	or	r22, r23
   178c2:	68 2b       	or	r22, r24
   178c4:	69 2b       	or	r22, r25
                SS80p->UNIT.UNIT_TYPE = val;
   178c6:	19 f4       	brne	.+6      	; 0x178ce <POSIX_Read_Config+0x702>
   178c8:	3f ef       	ldi	r19, 0xFF	; 255
   178ca:	a3 1a       	sub	r10, r19
   178cc:	b3 0a       	sbc	r11, r19
   178ce:	cf 57       	subi	r28, 0x7F	; 127
   178d0:	df 4f       	sbci	r29, 0xFF	; 255
   178d2:	88 81       	ld	r24, Y
   178d4:	c1 58       	subi	r28, 0x81	; 129
            }
            else if( (ind = token(ptr,"DEVICE_NUMBER")) )
   178d6:	d0 40       	sbci	r29, 0x00	; 0
   178d8:	d2 01       	movw	r26, r4
   178da:	9a 96       	adiw	r26, 0x2a	; 42
   178dc:	8c 93       	st	X, r24
   178de:	23 cd       	rjmp	.-1466   	; 0x17326 <POSIX_Read_Config+0x15a>
   178e0:	61 ef       	ldi	r22, 0xF1	; 241
   178e2:	74 e1       	ldi	r23, 0x14	; 20
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val))
   178e4:	c6 01       	movw	r24, r12
   178e6:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   178ea:	00 97       	sbiw	r24, 0x00	; 0
   178ec:	11 f1       	breq	.+68     	; 0x17932 <POSIX_Read_Config+0x766>
   178ee:	fe 01       	movw	r30, r28
   178f0:	ef 57       	subi	r30, 0x7F	; 127
   178f2:	ff 4f       	sbci	r31, 0xFF	; 255
   178f4:	7f 01       	movw	r14, r30
   178f6:	0f ef       	ldi	r16, 0xFF	; 255
   178f8:	1f ef       	ldi	r17, 0xFF	; 255
   178fa:	98 01       	movw	r18, r16
   178fc:	40 e0       	ldi	r20, 0x00	; 0
   178fe:	50 e0       	ldi	r21, 0x00	; 0
   17900:	ba 01       	movw	r22, r20
   17902:	8c 0d       	add	r24, r12
   17904:	9d 1d       	adc	r25, r13
   17906:	35 db       	rcall	.-2454   	; 0x16f72 <assign_value>
                    ++errors;
   17908:	67 2b       	or	r22, r23
   1790a:	68 2b       	or	r22, r24
   1790c:	69 2b       	or	r22, r25
                SS80p->UNIT.DEVICE_NUMBER = val;
   1790e:	19 f4       	brne	.+6      	; 0x17916 <POSIX_Read_Config+0x74a>
   17910:	ff ef       	ldi	r31, 0xFF	; 255
   17912:	af 1a       	sub	r10, r31
   17914:	bf 0a       	sbc	r11, r31
   17916:	cf 57       	subi	r28, 0x7F	; 127
   17918:	df 4f       	sbci	r29, 0xFF	; 255
   1791a:	88 81       	ld	r24, Y
   1791c:	99 81       	ldd	r25, Y+1	; 0x01
   1791e:	aa 81       	ldd	r26, Y+2	; 0x02
   17920:	bb 81       	ldd	r27, Y+3	; 0x03
   17922:	c1 58       	subi	r28, 0x81	; 129
   17924:	d0 40       	sbci	r29, 0x00	; 0
   17926:	f2 01       	movw	r30, r4
            }
            else if( (ind = token(ptr,"BYTES_PER_BLOCK")) )
   17928:	83 a7       	std	Z+43, r24	; 0x2b
   1792a:	94 a7       	std	Z+44, r25	; 0x2c
   1792c:	a5 a7       	std	Z+45, r26	; 0x2d
   1792e:	b6 a7       	std	Z+46, r27	; 0x2e
   17930:	fa cc       	rjmp	.-1548   	; 0x17326 <POSIX_Read_Config+0x15a>
   17932:	6f ef       	ldi	r22, 0xFF	; 255
   17934:	74 e1       	ldi	r23, 0x14	; 20
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0x1000UL, &val) )
   17936:	c6 01       	movw	r24, r12
   17938:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   1793c:	00 97       	sbiw	r24, 0x00	; 0
   1793e:	09 f1       	breq	.+66     	; 0x17982 <POSIX_Read_Config+0x7b6>
   17940:	9e 01       	movw	r18, r28
   17942:	2f 57       	subi	r18, 0x7F	; 127
   17944:	3f 4f       	sbci	r19, 0xFF	; 255
   17946:	79 01       	movw	r14, r18
   17948:	00 e0       	ldi	r16, 0x00	; 0
   1794a:	10 e1       	ldi	r17, 0x10	; 16
   1794c:	20 e0       	ldi	r18, 0x00	; 0
   1794e:	30 e0       	ldi	r19, 0x00	; 0
   17950:	40 e0       	ldi	r20, 0x00	; 0
   17952:	50 e0       	ldi	r21, 0x00	; 0
   17954:	ba 01       	movw	r22, r20
   17956:	8c 0d       	add	r24, r12
   17958:	9d 1d       	adc	r25, r13
   1795a:	0b db       	rcall	.-2538   	; 0x16f72 <assign_value>
                    ++errors;
   1795c:	67 2b       	or	r22, r23
   1795e:	68 2b       	or	r22, r24
   17960:	69 2b       	or	r22, r25
                SS80p->UNIT.BYTES_PER_BLOCK = val;
   17962:	19 f4       	brne	.+6      	; 0x1796a <POSIX_Read_Config+0x79e>
   17964:	3f ef       	ldi	r19, 0xFF	; 255
   17966:	a3 1a       	sub	r10, r19
   17968:	b3 0a       	sbc	r11, r19
   1796a:	cf 57       	subi	r28, 0x7F	; 127
   1796c:	df 4f       	sbci	r29, 0xFF	; 255
   1796e:	88 81       	ld	r24, Y
   17970:	99 81       	ldd	r25, Y+1	; 0x01
   17972:	c1 58       	subi	r28, 0x81	; 129
   17974:	d0 40       	sbci	r29, 0x00	; 0
   17976:	d2 01       	movw	r26, r4
            }
            else if( (ind = token(ptr,"BUFFERED_BLOCKS")) )
   17978:	d0 96       	adiw	r26, 0x30	; 48
   1797a:	9c 93       	st	X, r25
   1797c:	8e 93       	st	-X, r24
   1797e:	9f 97       	sbiw	r26, 0x2f	; 47
   17980:	d2 cc       	rjmp	.-1628   	; 0x17326 <POSIX_Read_Config+0x15a>
   17982:	6f e0       	ldi	r22, 0x0F	; 15
   17984:	75 e1       	ldi	r23, 0x15	; 21
            {
                ptr += ind;
                if (!assign_value(ptr, 1UL, 1UL, &val) )
   17986:	c6 01       	movw	r24, r12
   17988:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   1798c:	00 97       	sbiw	r24, 0x00	; 0
   1798e:	f9 f0       	breq	.+62     	; 0x179ce <POSIX_Read_Config+0x802>
   17990:	fe 01       	movw	r30, r28
   17992:	ef 57       	subi	r30, 0x7F	; 127
   17994:	ff 4f       	sbci	r31, 0xFF	; 255
   17996:	7f 01       	movw	r14, r30
   17998:	01 e0       	ldi	r16, 0x01	; 1
   1799a:	10 e0       	ldi	r17, 0x00	; 0
   1799c:	20 e0       	ldi	r18, 0x00	; 0
   1799e:	30 e0       	ldi	r19, 0x00	; 0
   179a0:	41 e0       	ldi	r20, 0x01	; 1
   179a2:	50 e0       	ldi	r21, 0x00	; 0
   179a4:	60 e0       	ldi	r22, 0x00	; 0
   179a6:	70 e0       	ldi	r23, 0x00	; 0
   179a8:	8c 0d       	add	r24, r12
   179aa:	9d 1d       	adc	r25, r13
   179ac:	e2 da       	rcall	.-2620   	; 0x16f72 <assign_value>
                    ++errors;
   179ae:	67 2b       	or	r22, r23
   179b0:	68 2b       	or	r22, r24
   179b2:	69 2b       	or	r22, r25
                SS80p->UNIT.BUFFERED_BLOCKS = val;
   179b4:	19 f4       	brne	.+6      	; 0x179bc <POSIX_Read_Config+0x7f0>
   179b6:	ff ef       	ldi	r31, 0xFF	; 255
   179b8:	af 1a       	sub	r10, r31
   179ba:	bf 0a       	sbc	r11, r31
   179bc:	cf 57       	subi	r28, 0x7F	; 127
   179be:	df 4f       	sbci	r29, 0xFF	; 255
   179c0:	88 81       	ld	r24, Y
   179c2:	c1 58       	subi	r28, 0x81	; 129
            }
            else if( (ind = token(ptr,"BURST_SIZE")) )
   179c4:	d0 40       	sbci	r29, 0x00	; 0
   179c6:	d2 01       	movw	r26, r4
   179c8:	d1 96       	adiw	r26, 0x31	; 49
   179ca:	8c 93       	st	X, r24
   179cc:	ac cc       	rjmp	.-1704   	; 0x17326 <POSIX_Read_Config+0x15a>
   179ce:	6f e1       	ldi	r22, 0x1F	; 31
   179d0:	75 e1       	ldi	r23, 0x15	; 21
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0, &val) )
   179d2:	c6 01       	movw	r24, r12
   179d4:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   179d8:	00 97       	sbiw	r24, 0x00	; 0
   179da:	e9 f0       	breq	.+58     	; 0x17a16 <POSIX_Read_Config+0x84a>
   179dc:	fe 01       	movw	r30, r28
   179de:	ef 57       	subi	r30, 0x7F	; 127
   179e0:	ff 4f       	sbci	r31, 0xFF	; 255
   179e2:	7f 01       	movw	r14, r30
   179e4:	00 e0       	ldi	r16, 0x00	; 0
   179e6:	10 e0       	ldi	r17, 0x00	; 0
   179e8:	98 01       	movw	r18, r16
   179ea:	40 e0       	ldi	r20, 0x00	; 0
   179ec:	50 e0       	ldi	r21, 0x00	; 0
   179ee:	ba 01       	movw	r22, r20
   179f0:	8c 0d       	add	r24, r12
   179f2:	9d 1d       	adc	r25, r13
   179f4:	be da       	rcall	.-2692   	; 0x16f72 <assign_value>
                    ++errors;
   179f6:	67 2b       	or	r22, r23
   179f8:	68 2b       	or	r22, r24
   179fa:	69 2b       	or	r22, r25
                SS80p->UNIT.BURST_SIZE = val;
   179fc:	19 f4       	brne	.+6      	; 0x17a04 <POSIX_Read_Config+0x838>
   179fe:	ff ef       	ldi	r31, 0xFF	; 255
   17a00:	af 1a       	sub	r10, r31
   17a02:	bf 0a       	sbc	r11, r31
   17a04:	cf 57       	subi	r28, 0x7F	; 127
   17a06:	df 4f       	sbci	r29, 0xFF	; 255
   17a08:	88 81       	ld	r24, Y
   17a0a:	c1 58       	subi	r28, 0x81	; 129
            }
            else if( (ind = token(ptr,"BLOCK_TIME")) )
   17a0c:	d0 40       	sbci	r29, 0x00	; 0
   17a0e:	d2 01       	movw	r26, r4
   17a10:	d2 96       	adiw	r26, 0x32	; 50
   17a12:	8c 93       	st	X, r24
   17a14:	88 cc       	rjmp	.-1776   	; 0x17326 <POSIX_Read_Config+0x15a>
   17a16:	6a e2       	ldi	r22, 0x2A	; 42
   17a18:	75 e1       	ldi	r23, 0x15	; 21
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   17a1a:	c6 01       	movw	r24, r12
   17a1c:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   17a20:	00 97       	sbiw	r24, 0x00	; 0
   17a22:	09 f1       	breq	.+66     	; 0x17a66 <POSIX_Read_Config+0x89a>
   17a24:	fe 01       	movw	r30, r28
   17a26:	ef 57       	subi	r30, 0x7F	; 127
   17a28:	ff 4f       	sbci	r31, 0xFF	; 255
   17a2a:	7f 01       	movw	r14, r30
   17a2c:	0f ef       	ldi	r16, 0xFF	; 255
   17a2e:	1f ef       	ldi	r17, 0xFF	; 255
   17a30:	20 e0       	ldi	r18, 0x00	; 0
   17a32:	30 e0       	ldi	r19, 0x00	; 0
   17a34:	40 e0       	ldi	r20, 0x00	; 0
   17a36:	50 e0       	ldi	r21, 0x00	; 0
   17a38:	ba 01       	movw	r22, r20
   17a3a:	8c 0d       	add	r24, r12
   17a3c:	9d 1d       	adc	r25, r13
   17a3e:	99 da       	rcall	.-2766   	; 0x16f72 <assign_value>
                    ++errors;
   17a40:	67 2b       	or	r22, r23
   17a42:	68 2b       	or	r22, r24
   17a44:	69 2b       	or	r22, r25
                SS80p->UNIT.BLOCK_TIME = val;
   17a46:	19 f4       	brne	.+6      	; 0x17a4e <POSIX_Read_Config+0x882>
   17a48:	ff ef       	ldi	r31, 0xFF	; 255
   17a4a:	af 1a       	sub	r10, r31
   17a4c:	bf 0a       	sbc	r11, r31
   17a4e:	cf 57       	subi	r28, 0x7F	; 127
   17a50:	df 4f       	sbci	r29, 0xFF	; 255
   17a52:	88 81       	ld	r24, Y
   17a54:	99 81       	ldd	r25, Y+1	; 0x01
   17a56:	c1 58       	subi	r28, 0x81	; 129
   17a58:	d0 40       	sbci	r29, 0x00	; 0
   17a5a:	d2 01       	movw	r26, r4
            }
            else if( (ind = token(ptr,"CONTINOUS_TRANSFER_RATE")) )
   17a5c:	d4 96       	adiw	r26, 0x34	; 52
   17a5e:	9c 93       	st	X, r25
   17a60:	8e 93       	st	-X, r24
   17a62:	d3 97       	sbiw	r26, 0x33	; 51
   17a64:	60 cc       	rjmp	.-1856   	; 0x17326 <POSIX_Read_Config+0x15a>
   17a66:	65 e3       	ldi	r22, 0x35	; 53
   17a68:	75 e1       	ldi	r23, 0x15	; 21
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   17a6a:	c6 01       	movw	r24, r12
   17a6c:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   17a70:	00 97       	sbiw	r24, 0x00	; 0
   17a72:	09 f1       	breq	.+66     	; 0x17ab6 <POSIX_Read_Config+0x8ea>
   17a74:	fe 01       	movw	r30, r28
   17a76:	ef 57       	subi	r30, 0x7F	; 127
   17a78:	ff 4f       	sbci	r31, 0xFF	; 255
   17a7a:	7f 01       	movw	r14, r30
   17a7c:	0f ef       	ldi	r16, 0xFF	; 255
   17a7e:	1f ef       	ldi	r17, 0xFF	; 255
   17a80:	20 e0       	ldi	r18, 0x00	; 0
   17a82:	30 e0       	ldi	r19, 0x00	; 0
   17a84:	40 e0       	ldi	r20, 0x00	; 0
   17a86:	50 e0       	ldi	r21, 0x00	; 0
   17a88:	ba 01       	movw	r22, r20
   17a8a:	8c 0d       	add	r24, r12
   17a8c:	9d 1d       	adc	r25, r13
   17a8e:	71 da       	rcall	.-2846   	; 0x16f72 <assign_value>
                    ++errors;
   17a90:	67 2b       	or	r22, r23
   17a92:	68 2b       	or	r22, r24
   17a94:	69 2b       	or	r22, r25
                SS80p->UNIT.CONTINOUS_TRANSFER_RATE = val;
   17a96:	19 f4       	brne	.+6      	; 0x17a9e <POSIX_Read_Config+0x8d2>
   17a98:	ff ef       	ldi	r31, 0xFF	; 255
   17a9a:	af 1a       	sub	r10, r31
   17a9c:	bf 0a       	sbc	r11, r31
   17a9e:	cf 57       	subi	r28, 0x7F	; 127
   17aa0:	df 4f       	sbci	r29, 0xFF	; 255
   17aa2:	88 81       	ld	r24, Y
   17aa4:	99 81       	ldd	r25, Y+1	; 0x01
   17aa6:	c1 58       	subi	r28, 0x81	; 129
   17aa8:	d0 40       	sbci	r29, 0x00	; 0
   17aaa:	d2 01       	movw	r26, r4
            }
            else if( (ind = token(ptr,"OPTIMAL_RETRY_TIME")) )
   17aac:	d6 96       	adiw	r26, 0x36	; 54
   17aae:	9c 93       	st	X, r25
   17ab0:	8e 93       	st	-X, r24
   17ab2:	d5 97       	sbiw	r26, 0x35	; 53
   17ab4:	38 cc       	rjmp	.-1936   	; 0x17326 <POSIX_Read_Config+0x15a>
   17ab6:	6d e4       	ldi	r22, 0x4D	; 77
   17ab8:	75 e1       	ldi	r23, 0x15	; 21
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   17aba:	c6 01       	movw	r24, r12
   17abc:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   17ac0:	00 97       	sbiw	r24, 0x00	; 0
   17ac2:	09 f1       	breq	.+66     	; 0x17b06 <POSIX_Read_Config+0x93a>
   17ac4:	fe 01       	movw	r30, r28
   17ac6:	ef 57       	subi	r30, 0x7F	; 127
   17ac8:	ff 4f       	sbci	r31, 0xFF	; 255
   17aca:	7f 01       	movw	r14, r30
   17acc:	0f ef       	ldi	r16, 0xFF	; 255
   17ace:	1f ef       	ldi	r17, 0xFF	; 255
   17ad0:	20 e0       	ldi	r18, 0x00	; 0
   17ad2:	30 e0       	ldi	r19, 0x00	; 0
   17ad4:	40 e0       	ldi	r20, 0x00	; 0
   17ad6:	50 e0       	ldi	r21, 0x00	; 0
   17ad8:	ba 01       	movw	r22, r20
   17ada:	8c 0d       	add	r24, r12
   17adc:	9d 1d       	adc	r25, r13
   17ade:	49 da       	rcall	.-2926   	; 0x16f72 <assign_value>
                    ++errors;
   17ae0:	67 2b       	or	r22, r23
   17ae2:	68 2b       	or	r22, r24
                SS80p->UNIT.OPTIMAL_RETRY_TIME = val;
   17ae4:	69 2b       	or	r22, r25
   17ae6:	19 f4       	brne	.+6      	; 0x17aee <POSIX_Read_Config+0x922>
   17ae8:	ff ef       	ldi	r31, 0xFF	; 255
   17aea:	af 1a       	sub	r10, r31
   17aec:	bf 0a       	sbc	r11, r31
   17aee:	cf 57       	subi	r28, 0x7F	; 127
   17af0:	df 4f       	sbci	r29, 0xFF	; 255
   17af2:	88 81       	ld	r24, Y
   17af4:	99 81       	ldd	r25, Y+1	; 0x01
   17af6:	c1 58       	subi	r28, 0x81	; 129
   17af8:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"ACCESS_TIME")) )
   17afa:	d2 01       	movw	r26, r4
   17afc:	d8 96       	adiw	r26, 0x38	; 56
   17afe:	9c 93       	st	X, r25
   17b00:	8e 93       	st	-X, r24
   17b02:	d7 97       	sbiw	r26, 0x37	; 55
   17b04:	10 cc       	rjmp	.-2016   	; 0x17326 <POSIX_Read_Config+0x15a>
   17b06:	60 e6       	ldi	r22, 0x60	; 96
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   17b08:	75 e1       	ldi	r23, 0x15	; 21
   17b0a:	c6 01       	movw	r24, r12
   17b0c:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   17b10:	00 97       	sbiw	r24, 0x00	; 0
   17b12:	09 f1       	breq	.+66     	; 0x17b56 <POSIX_Read_Config+0x98a>
   17b14:	fe 01       	movw	r30, r28
   17b16:	ef 57       	subi	r30, 0x7F	; 127
   17b18:	ff 4f       	sbci	r31, 0xFF	; 255
   17b1a:	7f 01       	movw	r14, r30
   17b1c:	0f ef       	ldi	r16, 0xFF	; 255
   17b1e:	1f ef       	ldi	r17, 0xFF	; 255
   17b20:	20 e0       	ldi	r18, 0x00	; 0
   17b22:	30 e0       	ldi	r19, 0x00	; 0
   17b24:	40 e0       	ldi	r20, 0x00	; 0
   17b26:	50 e0       	ldi	r21, 0x00	; 0
   17b28:	ba 01       	movw	r22, r20
   17b2a:	8c 0d       	add	r24, r12
   17b2c:	9d 1d       	adc	r25, r13
                    ++errors;
   17b2e:	21 da       	rcall	.-3006   	; 0x16f72 <assign_value>
   17b30:	67 2b       	or	r22, r23
                SS80p->UNIT.ACCESS_TIME = val;
   17b32:	68 2b       	or	r22, r24
   17b34:	69 2b       	or	r22, r25
   17b36:	19 f4       	brne	.+6      	; 0x17b3e <POSIX_Read_Config+0x972>
   17b38:	ff ef       	ldi	r31, 0xFF	; 255
   17b3a:	af 1a       	sub	r10, r31
   17b3c:	bf 0a       	sbc	r11, r31
   17b3e:	cf 57       	subi	r28, 0x7F	; 127
   17b40:	df 4f       	sbci	r29, 0xFF	; 255
   17b42:	88 81       	ld	r24, Y
   17b44:	99 81       	ldd	r25, Y+1	; 0x01
   17b46:	c1 58       	subi	r28, 0x81	; 129
   17b48:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"MAXIMUM_INTERLEAVE")) )
   17b4a:	d2 01       	movw	r26, r4
   17b4c:	da 96       	adiw	r26, 0x3a	; 58
   17b4e:	9c 93       	st	X, r25
   17b50:	8e 93       	st	-X, r24
   17b52:	d9 97       	sbiw	r26, 0x39	; 57
   17b54:	e8 cb       	rjmp	.-2096   	; 0x17326 <POSIX_Read_Config+0x15a>
   17b56:	6c e6       	ldi	r22, 0x6C	; 108
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   17b58:	75 e1       	ldi	r23, 0x15	; 21
   17b5a:	c6 01       	movw	r24, r12
   17b5c:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   17b60:	00 97       	sbiw	r24, 0x00	; 0
   17b62:	f1 f0       	breq	.+60     	; 0x17ba0 <POSIX_Read_Config+0x9d4>
   17b64:	fe 01       	movw	r30, r28
   17b66:	ef 57       	subi	r30, 0x7F	; 127
   17b68:	ff 4f       	sbci	r31, 0xFF	; 255
   17b6a:	7f 01       	movw	r14, r30
   17b6c:	0f ef       	ldi	r16, 0xFF	; 255
   17b6e:	10 e0       	ldi	r17, 0x00	; 0
   17b70:	20 e0       	ldi	r18, 0x00	; 0
   17b72:	30 e0       	ldi	r19, 0x00	; 0
   17b74:	40 e0       	ldi	r20, 0x00	; 0
   17b76:	50 e0       	ldi	r21, 0x00	; 0
   17b78:	ba 01       	movw	r22, r20
   17b7a:	8c 0d       	add	r24, r12
                    ++errors;
   17b7c:	9d 1d       	adc	r25, r13
   17b7e:	f9 d9       	rcall	.-3086   	; 0x16f72 <assign_value>
   17b80:	67 2b       	or	r22, r23
                SS80p->UNIT.MAXIMUM_INTERLEAVE = val;
   17b82:	68 2b       	or	r22, r24
   17b84:	69 2b       	or	r22, r25
   17b86:	19 f4       	brne	.+6      	; 0x17b8e <POSIX_Read_Config+0x9c2>
   17b88:	ff ef       	ldi	r31, 0xFF	; 255
   17b8a:	af 1a       	sub	r10, r31
   17b8c:	bf 0a       	sbc	r11, r31
   17b8e:	cf 57       	subi	r28, 0x7F	; 127
   17b90:	df 4f       	sbci	r29, 0xFF	; 255
   17b92:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"FIXED_VOLUMES")) )
   17b94:	c1 58       	subi	r28, 0x81	; 129
   17b96:	d0 40       	sbci	r29, 0x00	; 0
   17b98:	d2 01       	movw	r26, r4
   17b9a:	db 96       	adiw	r26, 0x3b	; 59
   17b9c:	8c 93       	st	X, r24
   17b9e:	c3 cb       	rjmp	.-2170   	; 0x17326 <POSIX_Read_Config+0x15a>
   17ba0:	6f e7       	ldi	r22, 0x7F	; 127
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   17ba2:	75 e1       	ldi	r23, 0x15	; 21
   17ba4:	c6 01       	movw	r24, r12
   17ba6:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   17baa:	00 97       	sbiw	r24, 0x00	; 0
   17bac:	f1 f0       	breq	.+60     	; 0x17bea <POSIX_Read_Config+0xa1e>
   17bae:	fe 01       	movw	r30, r28
   17bb0:	ef 57       	subi	r30, 0x7F	; 127
   17bb2:	ff 4f       	sbci	r31, 0xFF	; 255
   17bb4:	7f 01       	movw	r14, r30
   17bb6:	0f ef       	ldi	r16, 0xFF	; 255
   17bb8:	10 e0       	ldi	r17, 0x00	; 0
   17bba:	20 e0       	ldi	r18, 0x00	; 0
   17bbc:	30 e0       	ldi	r19, 0x00	; 0
   17bbe:	40 e0       	ldi	r20, 0x00	; 0
   17bc0:	50 e0       	ldi	r21, 0x00	; 0
   17bc2:	ba 01       	movw	r22, r20
   17bc4:	8c 0d       	add	r24, r12
                    ++errors;
   17bc6:	9d 1d       	adc	r25, r13
   17bc8:	d4 d9       	rcall	.-3160   	; 0x16f72 <assign_value>
   17bca:	67 2b       	or	r22, r23
                SS80p->UNIT.FIXED_VOLUMES = val;
   17bcc:	68 2b       	or	r22, r24
   17bce:	69 2b       	or	r22, r25
   17bd0:	19 f4       	brne	.+6      	; 0x17bd8 <POSIX_Read_Config+0xa0c>
   17bd2:	ff ef       	ldi	r31, 0xFF	; 255
   17bd4:	af 1a       	sub	r10, r31
   17bd6:	bf 0a       	sbc	r11, r31
   17bd8:	cf 57       	subi	r28, 0x7F	; 127
   17bda:	df 4f       	sbci	r29, 0xFF	; 255
   17bdc:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"REMOVABLE_VOLUMES")) )
   17bde:	c1 58       	subi	r28, 0x81	; 129
   17be0:	d0 40       	sbci	r29, 0x00	; 0
   17be2:	d2 01       	movw	r26, r4
   17be4:	dc 96       	adiw	r26, 0x3c	; 60
   17be6:	8c 93       	st	X, r24
   17be8:	9e cb       	rjmp	.-2244   	; 0x17326 <POSIX_Read_Config+0x15a>
   17bea:	6d e8       	ldi	r22, 0x8D	; 141
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   17bec:	75 e1       	ldi	r23, 0x15	; 21
   17bee:	c6 01       	movw	r24, r12
   17bf0:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   17bf4:	00 97       	sbiw	r24, 0x00	; 0
   17bf6:	f1 f0       	breq	.+60     	; 0x17c34 <POSIX_Read_Config+0xa68>
   17bf8:	fe 01       	movw	r30, r28
   17bfa:	ef 57       	subi	r30, 0x7F	; 127
   17bfc:	ff 4f       	sbci	r31, 0xFF	; 255
   17bfe:	7f 01       	movw	r14, r30
   17c00:	0f ef       	ldi	r16, 0xFF	; 255
   17c02:	10 e0       	ldi	r17, 0x00	; 0
   17c04:	20 e0       	ldi	r18, 0x00	; 0
   17c06:	30 e0       	ldi	r19, 0x00	; 0
   17c08:	40 e0       	ldi	r20, 0x00	; 0
   17c0a:	50 e0       	ldi	r21, 0x00	; 0
   17c0c:	ba 01       	movw	r22, r20
   17c0e:	8c 0d       	add	r24, r12
   17c10:	9d 1d       	adc	r25, r13
                    ++errors;
   17c12:	af d9       	rcall	.-3234   	; 0x16f72 <assign_value>
   17c14:	67 2b       	or	r22, r23
   17c16:	68 2b       	or	r22, r24
                SS80p->UNIT.REMOVABLE_VOLUMES = val;
   17c18:	69 2b       	or	r22, r25
   17c1a:	19 f4       	brne	.+6      	; 0x17c22 <POSIX_Read_Config+0xa56>
   17c1c:	ff ef       	ldi	r31, 0xFF	; 255
   17c1e:	af 1a       	sub	r10, r31
   17c20:	bf 0a       	sbc	r11, r31
   17c22:	cf 57       	subi	r28, 0x7F	; 127
   17c24:	df 4f       	sbci	r29, 0xFF	; 255
   17c26:	88 81       	ld	r24, Y
            }
            else
            {
                printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   17c28:	c1 58       	subi	r28, 0x81	; 129
   17c2a:	d0 40       	sbci	r29, 0x00	; 0
   17c2c:	d2 01       	movw	r26, r4
   17c2e:	dd 96       	adiw	r26, 0x3d	; 61
   17c30:	8c 93       	st	X, r24
   17c32:	79 cb       	rjmp	.-2318   	; 0x17326 <POSIX_Read_Config+0x15a>
   17c34:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <lines+0x1>
   17c38:	8f 93       	push	r24
   17c3a:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <lines>
                ++errors;
            }
            break;

        case SS80_VOLUME:
            if( (ind = token(ptr,"MAX_CYLINDER")) )
   17c3e:	8f 93       	push	r24
   17c40:	df 92       	push	r13
   17c42:	cf 92       	push	r12
   17c44:	87 eb       	ldi	r24, 0xB7	; 183
   17c46:	9e e2       	ldi	r25, 0x2E	; 46
   17c48:	96 cc       	rjmp	.-1748   	; 0x17576 <POSIX_Read_Config+0x3aa>
   17c4a:	6f e9       	ldi	r22, 0x9F	; 159
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val) )
   17c4c:	75 e1       	ldi	r23, 0x15	; 21
   17c4e:	c6 01       	movw	r24, r12
   17c50:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   17c54:	00 97       	sbiw	r24, 0x00	; 0
   17c56:	f9 f0       	breq	.+62     	; 0x17c96 <POSIX_Read_Config+0xaca>
   17c58:	9e 01       	movw	r18, r28
   17c5a:	2f 57       	subi	r18, 0x7F	; 127
   17c5c:	3f 4f       	sbci	r19, 0xFF	; 255
   17c5e:	79 01       	movw	r14, r18
   17c60:	0f ef       	ldi	r16, 0xFF	; 255
   17c62:	1f ef       	ldi	r17, 0xFF	; 255
   17c64:	98 01       	movw	r18, r16
   17c66:	40 e0       	ldi	r20, 0x00	; 0
   17c68:	50 e0       	ldi	r21, 0x00	; 0
   17c6a:	ba 01       	movw	r22, r20
   17c6c:	8c 0d       	add	r24, r12
                    ++errors;
   17c6e:	9d 1d       	adc	r25, r13
   17c70:	80 d9       	rcall	.-3328   	; 0x16f72 <assign_value>
   17c72:	67 2b       	or	r22, r23
                SS80p->VOLUME.MAX_CYLINDER = val;
   17c74:	68 2b       	or	r22, r24
   17c76:	69 2b       	or	r22, r25
   17c78:	19 f4       	brne	.+6      	; 0x17c80 <POSIX_Read_Config+0xab4>
   17c7a:	3f ef       	ldi	r19, 0xFF	; 255
   17c7c:	a3 1a       	sub	r10, r19
   17c7e:	b3 0a       	sbc	r11, r19
   17c80:	cf 57       	subi	r28, 0x7F	; 127
   17c82:	df 4f       	sbci	r29, 0xFF	; 255
   17c84:	88 81       	ld	r24, Y
   17c86:	99 81       	ldd	r25, Y+1	; 0x01
   17c88:	aa 81       	ldd	r26, Y+2	; 0x02
            }
            else if( (ind = token(ptr,"MAX_HEAD")) )
   17c8a:	bb 81       	ldd	r27, Y+3	; 0x03
   17c8c:	c1 58       	subi	r28, 0x81	; 129
   17c8e:	d0 40       	sbci	r29, 0x00	; 0
   17c90:	f2 01       	movw	r30, r4
   17c92:	fe 96       	adiw	r30, 0x3e	; 62
   17c94:	73 c0       	rjmp	.+230    	; 0x17d7c <POSIX_Read_Config+0xbb0>
   17c96:	6c ea       	ldi	r22, 0xAC	; 172
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   17c98:	75 e1       	ldi	r23, 0x15	; 21
   17c9a:	c6 01       	movw	r24, r12
   17c9c:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   17ca0:	00 97       	sbiw	r24, 0x00	; 0
   17ca2:	f1 f0       	breq	.+60     	; 0x17ce0 <POSIX_Read_Config+0xb14>
   17ca4:	de 01       	movw	r26, r28
   17ca6:	af 57       	subi	r26, 0x7F	; 127
   17ca8:	bf 4f       	sbci	r27, 0xFF	; 255
   17caa:	7d 01       	movw	r14, r26
   17cac:	0f ef       	ldi	r16, 0xFF	; 255
   17cae:	10 e0       	ldi	r17, 0x00	; 0
   17cb0:	20 e0       	ldi	r18, 0x00	; 0
   17cb2:	30 e0       	ldi	r19, 0x00	; 0
   17cb4:	40 e0       	ldi	r20, 0x00	; 0
   17cb6:	50 e0       	ldi	r21, 0x00	; 0
   17cb8:	ba 01       	movw	r22, r20
   17cba:	8c 0d       	add	r24, r12
                    ++errors;
   17cbc:	9d 1d       	adc	r25, r13
   17cbe:	59 d9       	rcall	.-3406   	; 0x16f72 <assign_value>
   17cc0:	67 2b       	or	r22, r23
                SS80p->VOLUME.MAX_HEAD = val;
   17cc2:	68 2b       	or	r22, r24
   17cc4:	69 2b       	or	r22, r25
   17cc6:	19 f4       	brne	.+6      	; 0x17cce <POSIX_Read_Config+0xb02>
   17cc8:	bf ef       	ldi	r27, 0xFF	; 255
   17cca:	ab 1a       	sub	r10, r27
   17ccc:	bb 0a       	sbc	r11, r27
   17cce:	cf 57       	subi	r28, 0x7F	; 127
   17cd0:	df 4f       	sbci	r29, 0xFF	; 255
   17cd2:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"MAX_SECTOR")) )
   17cd4:	c1 58       	subi	r28, 0x81	; 129
   17cd6:	d0 40       	sbci	r29, 0x00	; 0
   17cd8:	f2 01       	movw	r30, r4
   17cda:	ee 5b       	subi	r30, 0xBE	; 190
   17cdc:	ff 4f       	sbci	r31, 0xFF	; 255
   17cde:	18 c1       	rjmp	.+560    	; 0x17f10 <POSIX_Read_Config+0xd44>
   17ce0:	65 eb       	ldi	r22, 0xB5	; 181
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   17ce2:	75 e1       	ldi	r23, 0x15	; 21
   17ce4:	c6 01       	movw	r24, r12
   17ce6:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   17cea:	00 97       	sbiw	r24, 0x00	; 0
   17cec:	09 f1       	breq	.+66     	; 0x17d30 <POSIX_Read_Config+0xb64>
   17cee:	fe 01       	movw	r30, r28
   17cf0:	ef 57       	subi	r30, 0x7F	; 127
   17cf2:	ff 4f       	sbci	r31, 0xFF	; 255
   17cf4:	7f 01       	movw	r14, r30
   17cf6:	0f ef       	ldi	r16, 0xFF	; 255
   17cf8:	1f ef       	ldi	r17, 0xFF	; 255
   17cfa:	20 e0       	ldi	r18, 0x00	; 0
   17cfc:	30 e0       	ldi	r19, 0x00	; 0
   17cfe:	40 e0       	ldi	r20, 0x00	; 0
   17d00:	50 e0       	ldi	r21, 0x00	; 0
   17d02:	ba 01       	movw	r22, r20
   17d04:	8c 0d       	add	r24, r12
                    ++errors;
   17d06:	9d 1d       	adc	r25, r13
   17d08:	34 d9       	rcall	.-3480   	; 0x16f72 <assign_value>
   17d0a:	67 2b       	or	r22, r23
                SS80p->VOLUME.MAX_SECTOR = val;
   17d0c:	68 2b       	or	r22, r24
   17d0e:	69 2b       	or	r22, r25
   17d10:	19 f4       	brne	.+6      	; 0x17d18 <POSIX_Read_Config+0xb4c>
   17d12:	ff ef       	ldi	r31, 0xFF	; 255
   17d14:	af 1a       	sub	r10, r31
   17d16:	bf 0a       	sbc	r11, r31
   17d18:	cf 57       	subi	r28, 0x7F	; 127
   17d1a:	df 4f       	sbci	r29, 0xFF	; 255
   17d1c:	88 81       	ld	r24, Y
   17d1e:	99 81       	ldd	r25, Y+1	; 0x01
   17d20:	c1 58       	subi	r28, 0x81	; 129
   17d22:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"MAX_BLOCK_NUMBER")) )
   17d24:	f2 01       	movw	r30, r4
   17d26:	ed 5b       	subi	r30, 0xBD	; 189
   17d28:	ff 4f       	sbci	r31, 0xFF	; 255
   17d2a:	91 83       	std	Z+1, r25	; 0x01
   17d2c:	80 83       	st	Z, r24
   17d2e:	fb ca       	rjmp	.-2570   	; 0x17326 <POSIX_Read_Config+0x15a>
   17d30:	60 ec       	ldi	r22, 0xC0	; 192
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val) )
   17d32:	75 e1       	ldi	r23, 0x15	; 21
   17d34:	c6 01       	movw	r24, r12
   17d36:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   17d3a:	00 97       	sbiw	r24, 0x00	; 0
   17d3c:	21 f1       	breq	.+72     	; 0x17d86 <POSIX_Read_Config+0xbba>
   17d3e:	9e 01       	movw	r18, r28
   17d40:	2f 57       	subi	r18, 0x7F	; 127
   17d42:	3f 4f       	sbci	r19, 0xFF	; 255
   17d44:	79 01       	movw	r14, r18
   17d46:	0f ef       	ldi	r16, 0xFF	; 255
   17d48:	1f ef       	ldi	r17, 0xFF	; 255
   17d4a:	98 01       	movw	r18, r16
   17d4c:	40 e0       	ldi	r20, 0x00	; 0
   17d4e:	50 e0       	ldi	r21, 0x00	; 0
   17d50:	ba 01       	movw	r22, r20
   17d52:	8c 0d       	add	r24, r12
                    ++errors;
   17d54:	9d 1d       	adc	r25, r13
   17d56:	0d d9       	rcall	.-3558   	; 0x16f72 <assign_value>
   17d58:	67 2b       	or	r22, r23
                SS80p->VOLUME.MAX_BLOCK_NUMBER = val;
   17d5a:	68 2b       	or	r22, r24
   17d5c:	69 2b       	or	r22, r25
   17d5e:	19 f4       	brne	.+6      	; 0x17d66 <POSIX_Read_Config+0xb9a>
   17d60:	3f ef       	ldi	r19, 0xFF	; 255
   17d62:	a3 1a       	sub	r10, r19
   17d64:	b3 0a       	sbc	r11, r19
   17d66:	cf 57       	subi	r28, 0x7F	; 127
   17d68:	df 4f       	sbci	r29, 0xFF	; 255
   17d6a:	88 81       	ld	r24, Y
   17d6c:	99 81       	ldd	r25, Y+1	; 0x01
   17d6e:	aa 81       	ldd	r26, Y+2	; 0x02
   17d70:	bb 81       	ldd	r27, Y+3	; 0x03
   17d72:	c1 58       	subi	r28, 0x81	; 129
   17d74:	d0 40       	sbci	r29, 0x00	; 0
   17d76:	f2 01       	movw	r30, r4
   17d78:	eb 5b       	subi	r30, 0xBB	; 187
            }
            else if( (ind = token(ptr,"INTERLEAVE")) )
   17d7a:	ff 4f       	sbci	r31, 0xFF	; 255
   17d7c:	80 83       	st	Z, r24
   17d7e:	91 83       	std	Z+1, r25	; 0x01
   17d80:	a2 83       	std	Z+2, r26	; 0x02
   17d82:	b3 83       	std	Z+3, r27	; 0x03
   17d84:	d0 ca       	rjmp	.-2656   	; 0x17326 <POSIX_Read_Config+0x15a>
   17d86:	64 e7       	ldi	r22, 0x74	; 116
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   17d88:	75 e1       	ldi	r23, 0x15	; 21
   17d8a:	c6 01       	movw	r24, r12
   17d8c:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   17d90:	00 97       	sbiw	r24, 0x00	; 0
   17d92:	f1 f0       	breq	.+60     	; 0x17dd0 <POSIX_Read_Config+0xc04>
   17d94:	de 01       	movw	r26, r28
   17d96:	af 57       	subi	r26, 0x7F	; 127
   17d98:	bf 4f       	sbci	r27, 0xFF	; 255
   17d9a:	7d 01       	movw	r14, r26
   17d9c:	0f ef       	ldi	r16, 0xFF	; 255
   17d9e:	10 e0       	ldi	r17, 0x00	; 0
   17da0:	20 e0       	ldi	r18, 0x00	; 0
   17da2:	30 e0       	ldi	r19, 0x00	; 0
   17da4:	40 e0       	ldi	r20, 0x00	; 0
   17da6:	50 e0       	ldi	r21, 0x00	; 0
   17da8:	ba 01       	movw	r22, r20
   17daa:	8c 0d       	add	r24, r12
                    ++errors;
   17dac:	9d 1d       	adc	r25, r13
   17dae:	e1 d8       	rcall	.-3646   	; 0x16f72 <assign_value>
   17db0:	67 2b       	or	r22, r23
                SS80p->VOLUME.INTERLEAVE = val;
   17db2:	68 2b       	or	r22, r24
   17db4:	69 2b       	or	r22, r25
   17db6:	19 f4       	brne	.+6      	; 0x17dbe <POSIX_Read_Config+0xbf2>
   17db8:	bf ef       	ldi	r27, 0xFF	; 255
   17dba:	ab 1a       	sub	r10, r27
   17dbc:	bb 0a       	sbc	r11, r27
   17dbe:	cf 57       	subi	r28, 0x7F	; 127
   17dc0:	df 4f       	sbci	r29, 0xFF	; 255
   17dc2:	88 81       	ld	r24, Y
            }
            else
            {
                printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   17dc4:	c1 58       	subi	r28, 0x81	; 129
   17dc6:	d0 40       	sbci	r29, 0x00	; 0
   17dc8:	f2 01       	movw	r30, r4
   17dca:	e7 5b       	subi	r30, 0xB7	; 183
   17dcc:	ff 4f       	sbci	r31, 0xFF	; 255
   17dce:	a0 c0       	rjmp	.+320    	; 0x17f10 <POSIX_Read_Config+0xd44>
   17dd0:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <lines+0x1>
   17dd4:	8f 93       	push	r24
   17dd6:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <lines>
   17dda:	8f 93       	push	r24
   17ddc:	df 92       	push	r13
                ++errors;
   17dde:	cf 92       	push	r12
   17de0:	89 e8       	ldi	r24, 0x89	; 137
   17de2:	9e e2       	ldi	r25, 0x2E	; 46
            }
            break;

#ifdef AMIGO
        case AMIGO_STATE:
            if(token(ptr,"HEADER"))
   17de4:	1f 92       	push	r1
   17de6:	9f 93       	push	r25
   17de8:	8f 93       	push	r24
   17dea:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   17dee:	ef ef       	ldi	r30, 0xFF	; 255
   17df0:	ae 1a       	sub	r10, r30
            {
                push_state(state);
   17df2:	be 0a       	sbc	r11, r30
   17df4:	08 c2       	rjmp	.+1040   	; 0x18206 <POSIX_Read_Config+0x103a>
   17df6:	6d ea       	ldi	r22, 0xAD	; 173
   17df8:	74 e1       	ldi	r23, 0x14	; 20
                state = AMIGO_HEADER;
   17dfa:	c6 01       	movw	r24, r12
   17dfc:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   17e00:	89 2b       	or	r24, r25
            }
            else if(token(ptr,"CONFIG"))
   17e02:	39 f0       	breq	.+14     	; 0x17e12 <POSIX_Read_Config+0xc46>
   17e04:	87 e0       	ldi	r24, 0x07	; 7
   17e06:	90 e0       	ldi	r25, 0x00	; 0
   17e08:	84 d8       	rcall	.-3832   	; 0x16f12 <push_state>
   17e0a:	28 e0       	ldi	r18, 0x08	; 8
   17e0c:	82 2e       	mov	r8, r18
   17e0e:	91 2c       	mov	r9, r1
            {
                push_state(state);
   17e10:	8a ca       	rjmp	.-2796   	; 0x17326 <POSIX_Read_Config+0x15a>
   17e12:	66 ea       	ldi	r22, 0xA6	; 166
   17e14:	74 e1       	ldi	r23, 0x14	; 20
   17e16:	c6 01       	movw	r24, r12
                state = AMIGO_CONFIG;
   17e18:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   17e1c:	89 2b       	or	r24, r25
   17e1e:	39 f0       	breq	.+14     	; 0x17e2e <POSIX_Read_Config+0xc62>
            }
            else if(token(ptr,"GEOMETRY"))
   17e20:	87 e0       	ldi	r24, 0x07	; 7
   17e22:	90 e0       	ldi	r25, 0x00	; 0
   17e24:	76 d8       	rcall	.-3860   	; 0x16f12 <push_state>
   17e26:	99 e0       	ldi	r25, 0x09	; 9
   17e28:	89 2e       	mov	r8, r25
   17e2a:	91 2c       	mov	r9, r1
   17e2c:	7c ca       	rjmp	.-2824   	; 0x17326 <POSIX_Read_Config+0x15a>
            {
                push_state(state);
   17e2e:	61 ed       	ldi	r22, 0xD1	; 209
   17e30:	75 e1       	ldi	r23, 0x15	; 21
   17e32:	c6 01       	movw	r24, r12
   17e34:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
                state = AMIGO_GEOMETRY;
   17e38:	89 2b       	or	r24, r25
   17e3a:	39 f0       	breq	.+14     	; 0x17e4a <POSIX_Read_Config+0xc7e>
   17e3c:	87 e0       	ldi	r24, 0x07	; 7
            }
            else
            {
                printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   17e3e:	90 e0       	ldi	r25, 0x00	; 0
   17e40:	68 d8       	rcall	.-3888   	; 0x16f12 <push_state>
   17e42:	8a e0       	ldi	r24, 0x0A	; 10
   17e44:	88 2e       	mov	r8, r24
   17e46:	91 2c       	mov	r9, r1
   17e48:	6e ca       	rjmp	.-2852   	; 0x17326 <POSIX_Read_Config+0x15a>
   17e4a:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <lines+0x1>
   17e4e:	8f 93       	push	r24
   17e50:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <lines>
   17e54:	8f 93       	push	r24
   17e56:	df 92       	push	r13
   17e58:	cf 92       	push	r12
   17e5a:	1f 92       	push	r1
   17e5c:	c7 56       	subi	r28, 0x67	; 103
   17e5e:	df 4f       	sbci	r29, 0xFF	; 255
   17e60:	38 81       	ld	r19, Y
   17e62:	c9 59       	subi	r28, 0x99	; 153
   17e64:	d0 40       	sbci	r29, 0x00	; 0
   17e66:	3f 93       	push	r19
                ++errors;
            }
            break;

        case AMIGO_HEADER:
            if( (ind = token(ptr,"DRIVE")) )
   17e68:	c8 56       	subi	r28, 0x68	; 104
   17e6a:	df 4f       	sbci	r29, 0xFF	; 255
   17e6c:	48 81       	ld	r20, Y
   17e6e:	c8 59       	subi	r28, 0x98	; 152
   17e70:	d0 40       	sbci	r29, 0x00	; 0
   17e72:	c3 c1       	rjmp	.+902    	; 0x181fa <POSIX_Read_Config+0x102e>
   17e74:	6a ed       	ldi	r22, 0xDA	; 218
            {
                ptr += ind;
                printf("Skipping %s, at line:%d\n", ptr,lines);
   17e76:	75 e1       	ldi	r23, 0x15	; 21
   17e78:	c6 01       	movw	r24, r12
   17e7a:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   17e7e:	00 97       	sbiw	r24, 0x00	; 0
   17e80:	d1 f0       	breq	.+52     	; 0x17eb6 <POSIX_Read_Config+0xcea>
   17e82:	20 91 e5 19 	lds	r18, 0x19E5	; 0x8019e5 <lines+0x1>
   17e86:	2f 93       	push	r18
   17e88:	20 91 e4 19 	lds	r18, 0x19E4	; 0x8019e4 <lines>
   17e8c:	2f 93       	push	r18
   17e8e:	c8 0e       	add	r12, r24
   17e90:	d9 1e       	adc	r13, r25
   17e92:	df 92       	push	r13
   17e94:	cf 92       	push	r12
   17e96:	1f 92       	push	r1
   17e98:	ca 56       	subi	r28, 0x6A	; 106
   17e9a:	df 4f       	sbci	r29, 0xFF	; 255
   17e9c:	b8 81       	ld	r27, Y
   17e9e:	c6 59       	subi	r28, 0x96	; 150
   17ea0:	d0 40       	sbci	r29, 0x00	; 0
   17ea2:	bf 93       	push	r27
   17ea4:	cb 56       	subi	r28, 0x6B	; 107
   17ea6:	df 4f       	sbci	r29, 0xFF	; 255
                //skip this
            }
            else if( (ind = token(ptr,"ADDRESS")) )
   17ea8:	e8 81       	ld	r30, Y
   17eaa:	c5 59       	subi	r28, 0x95	; 149
   17eac:	d0 40       	sbci	r29, 0x00	; 0
   17eae:	ef 93       	push	r30
   17eb0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   17eb4:	a8 c1       	rjmp	.+848    	; 0x18206 <POSIX_Read_Config+0x103a>
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 14UL, &val) )
   17eb6:	6e e9       	ldi	r22, 0x9E	; 158
   17eb8:	74 e1       	ldi	r23, 0x14	; 20
   17eba:	c6 01       	movw	r24, r12
   17ebc:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   17ec0:	00 97       	sbiw	r24, 0x00	; 0
   17ec2:	41 f1       	breq	.+80     	; 0x17f14 <POSIX_Read_Config+0xd48>
   17ec4:	de 01       	movw	r26, r28
   17ec6:	af 57       	subi	r26, 0x7F	; 127
   17ec8:	bf 4f       	sbci	r27, 0xFF	; 255
   17eca:	7d 01       	movw	r14, r26
   17ecc:	0e e0       	ldi	r16, 0x0E	; 14
   17ece:	10 e0       	ldi	r17, 0x00	; 0
   17ed0:	20 e0       	ldi	r18, 0x00	; 0
   17ed2:	30 e0       	ldi	r19, 0x00	; 0
   17ed4:	40 e0       	ldi	r20, 0x00	; 0
   17ed6:	50 e0       	ldi	r21, 0x00	; 0
   17ed8:	ba 01       	movw	r22, r20
                    ++errors;
   17eda:	8c 0d       	add	r24, r12
   17edc:	9d 1d       	adc	r25, r13
   17ede:	49 d8       	rcall	.-3950   	; 0x16f72 <assign_value>
                //skip this
            }
            else if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                tmp = 0xff;
   17ee0:	67 2b       	or	r22, r23
   17ee2:	68 2b       	or	r22, r24
                if (!assign_value(ptr, 0, 14UL, &val) )
                    ++errors;
                else
                    tmp = val;
   17ee4:	69 2b       	or	r22, r25
   17ee6:	29 f4       	brne	.+10     	; 0x17ef2 <POSIX_Read_Config+0xd26>
   17ee8:	bf ef       	ldi	r27, 0xFF	; 255
   17eea:	ab 1a       	sub	r10, r27
   17eec:	bb 0a       	sbc	r11, r27
                Devices[index].ADDRESS = tmp;
   17eee:	8f ef       	ldi	r24, 0xFF	; 255
   17ef0:	05 c0       	rjmp	.+10     	; 0x17efc <POSIX_Read_Config+0xd30>
   17ef2:	cf 57       	subi	r28, 0x7F	; 127
   17ef4:	df 4f       	sbci	r29, 0xFF	; 255
   17ef6:	88 81       	ld	r24, Y
   17ef8:	c1 58       	subi	r28, 0x81	; 129
   17efa:	d0 40       	sbci	r29, 0x00	; 0
   17efc:	97 e0       	ldi	r25, 0x07	; 7
   17efe:	96 9d       	mul	r25, r6
                AMIGOp->HEADER.ADDRESS = tmp;
   17f00:	f0 01       	movw	r30, r0
   17f02:	97 9d       	mul	r25, r7
   17f04:	f0 0d       	add	r31, r0
            }
            else if( (ind = token(ptr,"PPR")) )
   17f06:	11 24       	eor	r1, r1
   17f08:	e1 5c       	subi	r30, 0xC1	; 193
   17f0a:	f0 4e       	sbci	r31, 0xE0	; 224
   17f0c:	81 83       	std	Z+1, r24	; 0x01
   17f0e:	f1 01       	movw	r30, r2
   17f10:	80 83       	st	Z, r24
   17f12:	09 ca       	rjmp	.-3054   	; 0x17326 <POSIX_Read_Config+0x15a>
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 7UL, &val) )
   17f14:	6b ec       	ldi	r22, 0xCB	; 203
   17f16:	74 e1       	ldi	r23, 0x14	; 20
   17f18:	c6 01       	movw	r24, r12
   17f1a:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   17f1e:	00 97       	sbiw	r24, 0x00	; 0
   17f20:	39 f1       	breq	.+78     	; 0x17f70 <POSIX_Read_Config+0xda4>
   17f22:	9e 01       	movw	r18, r28
   17f24:	2f 57       	subi	r18, 0x7F	; 127
   17f26:	3f 4f       	sbci	r19, 0xFF	; 255
   17f28:	79 01       	movw	r14, r18
   17f2a:	07 e0       	ldi	r16, 0x07	; 7
   17f2c:	10 e0       	ldi	r17, 0x00	; 0
   17f2e:	20 e0       	ldi	r18, 0x00	; 0
   17f30:	30 e0       	ldi	r19, 0x00	; 0
   17f32:	40 e0       	ldi	r20, 0x00	; 0
   17f34:	50 e0       	ldi	r21, 0x00	; 0
   17f36:	ba 01       	movw	r22, r20
   17f38:	8c 0d       	add	r24, r12
                    ++errors;
   17f3a:	9d 1d       	adc	r25, r13
   17f3c:	1a d8       	rcall	.-4044   	; 0x16f72 <assign_value>
   17f3e:	67 2b       	or	r22, r23
                AMIGOp->HEADER.ADDRESS = tmp;
            }
            else if( (ind = token(ptr,"PPR")) )
            {
                ptr += ind;
                tmp = 0xff;
   17f40:	68 2b       	or	r22, r24
   17f42:	69 2b       	or	r22, r25
                if (!assign_value(ptr, 0, 7UL, &val) )
                    ++errors;
                else
                    tmp = val;
   17f44:	29 f4       	brne	.+10     	; 0x17f50 <POSIX_Read_Config+0xd84>
   17f46:	3f ef       	ldi	r19, 0xFF	; 255
   17f48:	a3 1a       	sub	r10, r19
   17f4a:	b3 0a       	sbc	r11, r19
   17f4c:	8f ef       	ldi	r24, 0xFF	; 255
                Devices[index].PPR = tmp;
   17f4e:	05 c0       	rjmp	.+10     	; 0x17f5a <POSIX_Read_Config+0xd8e>
   17f50:	cf 57       	subi	r28, 0x7F	; 127
   17f52:	df 4f       	sbci	r29, 0xFF	; 255
   17f54:	88 81       	ld	r24, Y
   17f56:	c1 58       	subi	r28, 0x81	; 129
   17f58:	d0 40       	sbci	r29, 0x00	; 0
   17f5a:	97 e0       	ldi	r25, 0x07	; 7
   17f5c:	96 9d       	mul	r25, r6
   17f5e:	f0 01       	movw	r30, r0
                AMIGOp->HEADER.PPR = tmp;
   17f60:	97 9d       	mul	r25, r7
   17f62:	f0 0d       	add	r31, r0
            }
            else if( (ind = token(ptr,"FILE")) )
   17f64:	11 24       	eor	r1, r1
   17f66:	e1 5c       	subi	r30, 0xC1	; 193
   17f68:	f0 4e       	sbci	r31, 0xE0	; 224
   17f6a:	82 83       	std	Z+2, r24	; 0x02
   17f6c:	d1 01       	movw	r26, r2
   17f6e:	bb cb       	rjmp	.-2186   	; 0x176e6 <POSIX_Read_Config+0x51a>
   17f70:	6f ec       	ldi	r22, 0xCF	; 207
            {
                ptr += ind;
                ptr = skipspaces(ptr);
   17f72:	74 e1       	ldi	r23, 0x14	; 20
   17f74:	c6 01       	movw	r24, r12
   17f76:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
                if(*ptr == '=')
   17f7a:	00 97       	sbiw	r24, 0x00	; 0
   17f7c:	b1 f0       	breq	.+44     	; 0x17faa <POSIX_Read_Config+0xdde>
   17f7e:	8c 0d       	add	r24, r12
   17f80:	9d 1d       	adc	r25, r13
                {
                    ++ptr;
                    ptr = skipspaces(ptr);
   17f82:	0e 94 c3 30 	call	0x6186	; 0x6186 <skipspaces>
   17f86:	fc 01       	movw	r30, r24
                }
                strncpy(AMIGOp->HEADER.NAME,ptr, MAX_NAME_LEN-1);
   17f88:	20 81       	ld	r18, Z
   17f8a:	2d 33       	cpi	r18, 0x3D	; 61
   17f8c:	19 f4       	brne	.+6      	; 0x17f94 <POSIX_Read_Config+0xdc8>
   17f8e:	01 96       	adiw	r24, 0x01	; 1
   17f90:	0e 94 c3 30 	call	0x6186	; 0x6186 <skipspaces>
   17f94:	4e ef       	ldi	r20, 0xFE	; 254
                AMIGOp->HEADER.NAME[MAX_FILE_NAME_LEN-1] = 0;
   17f96:	50 e0       	ldi	r21, 0x00	; 0
   17f98:	bc 01       	movw	r22, r24
   17f9a:	c1 01       	movw	r24, r2
   17f9c:	02 96       	adiw	r24, 0x02	; 2
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   17f9e:	0e 94 66 30 	call	0x60cc	; 0x60cc <strncpy>
   17fa2:	d1 01       	movw	r26, r2
   17fa4:	91 96       	adiw	r26, 0x21	; 33
   17fa6:	1c 92       	st	X, r1
   17fa8:	be c9       	rjmp	.-3204   	; 0x17326 <POSIX_Read_Config+0x15a>
   17faa:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <lines+0x1>
   17fae:	8f 93       	push	r24
   17fb0:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <lines>
   17fb4:	8f 93       	push	r24
   17fb6:	df 92       	push	r13
   17fb8:	cf 92       	push	r12
   17fba:	1f 92       	push	r1
   17fbc:	cd 56       	subi	r28, 0x6D	; 109
   17fbe:	df 4f       	sbci	r29, 0xFF	; 255
   17fc0:	b8 81       	ld	r27, Y
   17fc2:	c3 59       	subi	r28, 0x93	; 147
   17fc4:	d0 40       	sbci	r29, 0x00	; 0
   17fc6:	bf 93       	push	r27
                ++errors;
            }
            break;

        case AMIGO_CONFIG:
            if( (ind = token(ptr,"ID")) )
   17fc8:	ce 56       	subi	r28, 0x6E	; 110
   17fca:	df 4f       	sbci	r29, 0xFF	; 255
   17fcc:	e8 81       	ld	r30, Y
   17fce:	c2 59       	subi	r28, 0x92	; 146
   17fd0:	d0 40       	sbci	r29, 0x00	; 0
   17fd2:	f8 c0       	rjmp	.+496    	; 0x181c4 <POSIX_Read_Config+0xff8>
   17fd4:	64 ed       	ldi	r22, 0xD4	; 212
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   17fd6:	74 e1       	ldi	r23, 0x14	; 20
   17fd8:	c6 01       	movw	r24, r12
   17fda:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   17fde:	00 97       	sbiw	r24, 0x00	; 0
   17fe0:	01 f1       	breq	.+64     	; 0x18022 <POSIX_Read_Config+0xe56>
   17fe2:	de 01       	movw	r26, r28
   17fe4:	af 57       	subi	r26, 0x7F	; 127
   17fe6:	bf 4f       	sbci	r27, 0xFF	; 255
   17fe8:	7d 01       	movw	r14, r26
   17fea:	0f ef       	ldi	r16, 0xFF	; 255
   17fec:	1f ef       	ldi	r17, 0xFF	; 255
   17fee:	20 e0       	ldi	r18, 0x00	; 0
   17ff0:	30 e0       	ldi	r19, 0x00	; 0
   17ff2:	40 e0       	ldi	r20, 0x00	; 0
   17ff4:	50 e0       	ldi	r21, 0x00	; 0
   17ff6:	ba 01       	movw	r22, r20
   17ff8:	8c 0d       	add	r24, r12
   17ffa:	9d 1d       	adc	r25, r13
                    ++errors;
   17ffc:	0e 94 b9 b7 	call	0x16f72	; 0x16f72 <assign_value>
   18000:	67 2b       	or	r22, r23
                AMIGOp->CONFIG.ID = val;
   18002:	68 2b       	or	r22, r24
   18004:	69 2b       	or	r22, r25
   18006:	19 f4       	brne	.+6      	; 0x1800e <POSIX_Read_Config+0xe42>
   18008:	bf ef       	ldi	r27, 0xFF	; 255
   1800a:	ab 1a       	sub	r10, r27
   1800c:	bb 0a       	sbc	r11, r27
   1800e:	cf 57       	subi	r28, 0x7F	; 127
   18010:	df 4f       	sbci	r29, 0xFF	; 255
   18012:	88 81       	ld	r24, Y
   18014:	99 81       	ldd	r25, Y+1	; 0x01
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   18016:	c1 58       	subi	r28, 0x81	; 129
   18018:	d0 40       	sbci	r29, 0x00	; 0
   1801a:	f1 01       	movw	r30, r2
   1801c:	94 a3       	std	Z+36, r25	; 0x24
   1801e:	83 a3       	std	Z+35, r24	; 0x23
   18020:	82 c9       	rjmp	.-3324   	; 0x17326 <POSIX_Read_Config+0x15a>
   18022:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <lines+0x1>
   18026:	8f 93       	push	r24
   18028:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <lines>
   1802c:	8f 93       	push	r24
   1802e:	df 92       	push	r13
   18030:	cf 92       	push	r12
   18032:	1f 92       	push	r1
   18034:	c0 57       	subi	r28, 0x70	; 112
   18036:	df 4f       	sbci	r29, 0xFF	; 255
   18038:	f8 81       	ld	r31, Y
   1803a:	c0 59       	subi	r28, 0x90	; 144
   1803c:	d0 40       	sbci	r29, 0x00	; 0
   1803e:	ff 93       	push	r31
   18040:	c1 57       	subi	r28, 0x71	; 113
   18042:	df 4f       	sbci	r29, 0xFF	; 255
                ++errors;
   18044:	28 81       	ld	r18, Y
   18046:	cf 58       	subi	r28, 0x8F	; 143
   18048:	d0 40       	sbci	r29, 0x00	; 0
   1804a:	2f 93       	push	r18
            }
            break;

        case AMIGO_GEOMETRY:
            if( (ind = token(ptr,"BYTES_PER_SECTOR")) )
   1804c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18050:	3f ef       	ldi	r19, 0xFF	; 255
   18052:	a3 1a       	sub	r10, r19
   18054:	b3 0a       	sbc	r11, r19
   18056:	d7 c0       	rjmp	.+430    	; 0x18206 <POSIX_Read_Config+0x103a>
   18058:	60 ee       	ldi	r22, 0xE0	; 224
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0x1000UL, &val) )
   1805a:	75 e1       	ldi	r23, 0x15	; 21
   1805c:	c6 01       	movw	r24, r12
   1805e:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   18062:	00 97       	sbiw	r24, 0x00	; 0
   18064:	01 f1       	breq	.+64     	; 0x180a6 <POSIX_Read_Config+0xeda>
   18066:	de 01       	movw	r26, r28
   18068:	af 57       	subi	r26, 0x7F	; 127
   1806a:	bf 4f       	sbci	r27, 0xFF	; 255
   1806c:	7d 01       	movw	r14, r26
   1806e:	00 e0       	ldi	r16, 0x00	; 0
   18070:	10 e1       	ldi	r17, 0x10	; 16
   18072:	20 e0       	ldi	r18, 0x00	; 0
   18074:	30 e0       	ldi	r19, 0x00	; 0
   18076:	40 e0       	ldi	r20, 0x00	; 0
   18078:	50 e0       	ldi	r21, 0x00	; 0
   1807a:	ba 01       	movw	r22, r20
   1807c:	8c 0d       	add	r24, r12
   1807e:	9d 1d       	adc	r25, r13
                    ++errors;
   18080:	0e 94 b9 b7 	call	0x16f72	; 0x16f72 <assign_value>
   18084:	67 2b       	or	r22, r23
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val;
   18086:	68 2b       	or	r22, r24
   18088:	69 2b       	or	r22, r25
   1808a:	19 f4       	brne	.+6      	; 0x18092 <POSIX_Read_Config+0xec6>
   1808c:	bf ef       	ldi	r27, 0xFF	; 255
   1808e:	ab 1a       	sub	r10, r27
   18090:	bb 0a       	sbc	r11, r27
   18092:	cf 57       	subi	r28, 0x7F	; 127
   18094:	df 4f       	sbci	r29, 0xFF	; 255
   18096:	88 81       	ld	r24, Y
   18098:	99 81       	ldd	r25, Y+1	; 0x01
            }
            else if( (ind = token(ptr,"SECTORS_PER_TRACK")) )
   1809a:	c1 58       	subi	r28, 0x81	; 129
   1809c:	d0 40       	sbci	r29, 0x00	; 0
   1809e:	f1 01       	movw	r30, r2
   180a0:	96 a3       	std	Z+38, r25	; 0x26
   180a2:	85 a3       	std	Z+37, r24	; 0x25
   180a4:	40 c9       	rjmp	.-3456   	; 0x17326 <POSIX_Read_Config+0x15a>
   180a6:	61 ef       	ldi	r22, 0xF1	; 241
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   180a8:	75 e1       	ldi	r23, 0x15	; 21
   180aa:	c6 01       	movw	r24, r12
   180ac:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   180b0:	00 97       	sbiw	r24, 0x00	; 0
   180b2:	11 f1       	breq	.+68     	; 0x180f8 <POSIX_Read_Config+0xf2c>
   180b4:	9e 01       	movw	r18, r28
   180b6:	2f 57       	subi	r18, 0x7F	; 127
   180b8:	3f 4f       	sbci	r19, 0xFF	; 255
   180ba:	79 01       	movw	r14, r18
   180bc:	0f ef       	ldi	r16, 0xFF	; 255
   180be:	10 e0       	ldi	r17, 0x00	; 0
   180c0:	20 e0       	ldi	r18, 0x00	; 0
   180c2:	30 e0       	ldi	r19, 0x00	; 0
   180c4:	40 e0       	ldi	r20, 0x00	; 0
   180c6:	50 e0       	ldi	r21, 0x00	; 0
   180c8:	ba 01       	movw	r22, r20
   180ca:	8c 0d       	add	r24, r12
   180cc:	9d 1d       	adc	r25, r13
                    ++errors;
   180ce:	0e 94 b9 b7 	call	0x16f72	; 0x16f72 <assign_value>
   180d2:	67 2b       	or	r22, r23
                AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val;
   180d4:	68 2b       	or	r22, r24
   180d6:	69 2b       	or	r22, r25
   180d8:	19 f4       	brne	.+6      	; 0x180e0 <POSIX_Read_Config+0xf14>
   180da:	3f ef       	ldi	r19, 0xFF	; 255
   180dc:	a3 1a       	sub	r10, r19
   180de:	b3 0a       	sbc	r11, r19
   180e0:	cf 57       	subi	r28, 0x7F	; 127
   180e2:	df 4f       	sbci	r29, 0xFF	; 255
   180e4:	88 81       	ld	r24, Y
   180e6:	99 81       	ldd	r25, Y+1	; 0x01
   180e8:	c1 58       	subi	r28, 0x81	; 129
   180ea:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"HEADS")) )
   180ec:	d1 01       	movw	r26, r2
   180ee:	98 96       	adiw	r26, 0x28	; 40
   180f0:	9c 93       	st	X, r25
   180f2:	8e 93       	st	-X, r24
   180f4:	97 97       	sbiw	r26, 0x27	; 39
   180f6:	17 c9       	rjmp	.-3538   	; 0x17326 <POSIX_Read_Config+0x15a>
   180f8:	63 e0       	ldi	r22, 0x03	; 3
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   180fa:	76 e1       	ldi	r23, 0x16	; 22
   180fc:	c6 01       	movw	r24, r12
   180fe:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   18102:	00 97       	sbiw	r24, 0x00	; 0
   18104:	11 f1       	breq	.+68     	; 0x1814a <POSIX_Read_Config+0xf7e>
   18106:	fe 01       	movw	r30, r28
   18108:	ef 57       	subi	r30, 0x7F	; 127
   1810a:	ff 4f       	sbci	r31, 0xFF	; 255
   1810c:	7f 01       	movw	r14, r30
   1810e:	0f ef       	ldi	r16, 0xFF	; 255
   18110:	10 e0       	ldi	r17, 0x00	; 0
   18112:	20 e0       	ldi	r18, 0x00	; 0
   18114:	30 e0       	ldi	r19, 0x00	; 0
   18116:	40 e0       	ldi	r20, 0x00	; 0
   18118:	50 e0       	ldi	r21, 0x00	; 0
   1811a:	ba 01       	movw	r22, r20
   1811c:	8c 0d       	add	r24, r12
   1811e:	9d 1d       	adc	r25, r13
                    ++errors;
   18120:	0e 94 b9 b7 	call	0x16f72	; 0x16f72 <assign_value>
   18124:	67 2b       	or	r22, r23
                AMIGOp->GEOMETRY.HEADS = val;
   18126:	68 2b       	or	r22, r24
   18128:	69 2b       	or	r22, r25
   1812a:	19 f4       	brne	.+6      	; 0x18132 <POSIX_Read_Config+0xf66>
   1812c:	ff ef       	ldi	r31, 0xFF	; 255
   1812e:	af 1a       	sub	r10, r31
   18130:	bf 0a       	sbc	r11, r31
   18132:	cf 57       	subi	r28, 0x7F	; 127
   18134:	df 4f       	sbci	r29, 0xFF	; 255
   18136:	88 81       	ld	r24, Y
   18138:	99 81       	ldd	r25, Y+1	; 0x01
   1813a:	c1 58       	subi	r28, 0x81	; 129
   1813c:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"CYLINDERS")) )
   1813e:	d1 01       	movw	r26, r2
   18140:	9a 96       	adiw	r26, 0x2a	; 42
   18142:	9c 93       	st	X, r25
   18144:	8e 93       	st	-X, r24
   18146:	99 97       	sbiw	r26, 0x29	; 41
   18148:	ee c8       	rjmp	.-3620   	; 0x17326 <POSIX_Read_Config+0x15a>
   1814a:	69 e0       	ldi	r22, 0x09	; 9
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   1814c:	76 e1       	ldi	r23, 0x16	; 22
   1814e:	c6 01       	movw	r24, r12
   18150:	0e 94 03 32 	call	0x6406	; 0x6406 <token>
   18154:	00 97       	sbiw	r24, 0x00	; 0
   18156:	11 f1       	breq	.+68     	; 0x1819c <POSIX_Read_Config+0xfd0>
   18158:	fe 01       	movw	r30, r28
   1815a:	ef 57       	subi	r30, 0x7F	; 127
   1815c:	ff 4f       	sbci	r31, 0xFF	; 255
   1815e:	7f 01       	movw	r14, r30
   18160:	0f ef       	ldi	r16, 0xFF	; 255
   18162:	10 e0       	ldi	r17, 0x00	; 0
   18164:	20 e0       	ldi	r18, 0x00	; 0
   18166:	30 e0       	ldi	r19, 0x00	; 0
   18168:	40 e0       	ldi	r20, 0x00	; 0
   1816a:	50 e0       	ldi	r21, 0x00	; 0
   1816c:	ba 01       	movw	r22, r20
   1816e:	8c 0d       	add	r24, r12
   18170:	9d 1d       	adc	r25, r13
                    ++errors;
   18172:	0e 94 b9 b7 	call	0x16f72	; 0x16f72 <assign_value>
   18176:	67 2b       	or	r22, r23
                AMIGOp->GEOMETRY.CYLINDERS = val;
   18178:	68 2b       	or	r22, r24
   1817a:	69 2b       	or	r22, r25
   1817c:	19 f4       	brne	.+6      	; 0x18184 <POSIX_Read_Config+0xfb8>
   1817e:	ff ef       	ldi	r31, 0xFF	; 255
   18180:	af 1a       	sub	r10, r31
   18182:	bf 0a       	sbc	r11, r31
   18184:	cf 57       	subi	r28, 0x7F	; 127
   18186:	df 4f       	sbci	r29, 0xFF	; 255
   18188:	88 81       	ld	r24, Y
   1818a:	99 81       	ldd	r25, Y+1	; 0x01
   1818c:	c1 58       	subi	r28, 0x81	; 129
   1818e:	d0 40       	sbci	r29, 0x00	; 0
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   18190:	d1 01       	movw	r26, r2
   18192:	9c 96       	adiw	r26, 0x2c	; 44
   18194:	9c 93       	st	X, r25
   18196:	8e 93       	st	-X, r24
   18198:	9b 97       	sbiw	r26, 0x2b	; 43
   1819a:	c5 c8       	rjmp	.-3702   	; 0x17326 <POSIX_Read_Config+0x15a>
   1819c:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <lines+0x1>
   181a0:	8f 93       	push	r24
   181a2:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <lines>
   181a6:	8f 93       	push	r24
   181a8:	df 92       	push	r13
   181aa:	cf 92       	push	r12
   181ac:	1f 92       	push	r1
   181ae:	c3 57       	subi	r28, 0x73	; 115
   181b0:	df 4f       	sbci	r29, 0xFF	; 255
   181b2:	b8 81       	ld	r27, Y
   181b4:	cd 58       	subi	r28, 0x8D	; 141
   181b6:	d0 40       	sbci	r29, 0x00	; 0
   181b8:	bf 93       	push	r27
   181ba:	c4 57       	subi	r28, 0x74	; 116
   181bc:	df 4f       	sbci	r29, 0xFF	; 255
                ++errors;
   181be:	e8 81       	ld	r30, Y
   181c0:	cc 58       	subi	r28, 0x8C	; 140
   181c2:	d0 40       	sbci	r29, 0x00	; 0
   181c4:	ef 93       	push	r30
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   181c6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   181ca:	ff ef       	ldi	r31, 0xFF	; 255
   181cc:	af 1a       	sub	r10, r31
   181ce:	bf 0a       	sbc	r11, r31
   181d0:	1a c0       	rjmp	.+52     	; 0x18206 <POSIX_Read_Config+0x103a>
   181d2:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <lines+0x1>
   181d6:	8f 93       	push	r24
   181d8:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <lines>
   181dc:	8f 93       	push	r24
   181de:	df 92       	push	r13
   181e0:	cf 92       	push	r12
   181e2:	1f 92       	push	r1
   181e4:	c6 57       	subi	r28, 0x76	; 118
   181e6:	df 4f       	sbci	r29, 0xFF	; 255
   181e8:	38 81       	ld	r19, Y
   181ea:	ca 58       	subi	r28, 0x8A	; 138
   181ec:	d0 40       	sbci	r29, 0x00	; 0
   181ee:	3f 93       	push	r19
   181f0:	c7 57       	subi	r28, 0x77	; 119
   181f2:	df 4f       	sbci	r29, 0xFF	; 255
            ++errors;
   181f4:	48 81       	ld	r20, Y
   181f6:	c9 58       	subi	r28, 0x89	; 137
   181f8:	d0 40       	sbci	r29, 0x00	; 0
            break;
   181fa:	4f 93       	push	r20
   181fc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18200:	8f ef       	ldi	r24, 0xFF	; 255
   18202:	a8 1a       	sub	r10, r24
   18204:	b8 0a       	sbc	r11, r24

        } // switch
    } //while
    if(state != START_STATE)
   18206:	0f b6       	in	r0, 0x3f	; 63
   18208:	f8 94       	cli
   1820a:	de bf       	out	0x3e, r29	; 62
    {
        printf("Missing END statement at line:%d\n", lines);
   1820c:	0f be       	out	0x3f, r0	; 63
   1820e:	cd bf       	out	0x3d, r28	; 61
   18210:	8a c8       	rjmp	.-3820   	; 0x17326 <POSIX_Read_Config+0x15a>
   18212:	81 14       	cp	r8, r1
   18214:	91 04       	cpc	r9, r1
   18216:	a9 f0       	breq	.+42     	; 0x18242 <POSIX_Read_Config+0x1076>
   18218:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <lines+0x1>
   1821c:	8f 93       	push	r24
   1821e:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <lines>
   18222:	8f 93       	push	r24
   18224:	8f e6       	ldi	r24, 0x6F	; 111
        ++errors;
   18226:	9d e2       	ldi	r25, 0x2D	; 45
   18228:	1f 92       	push	r1
   1822a:	9f 93       	push	r25
   1822c:	8f 93       	push	r24
   1822e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18232:	bf ef       	ldi	r27, 0xFF	; 255
   18234:	ab 1a       	sub	r10, r27
    }
    printf("Read_Config: read(%d) lines\n", lines);
   18236:	bb 0a       	sbc	r11, r27
   18238:	0f 90       	pop	r0
   1823a:	0f 90       	pop	r0
   1823c:	0f 90       	pop	r0
   1823e:	0f 90       	pop	r0
   18240:	0f 90       	pop	r0
   18242:	80 91 e5 19 	lds	r24, 0x19E5	; 0x8019e5 <lines+0x1>
   18246:	8f 93       	push	r24
   18248:	80 91 e4 19 	lds	r24, 0x19E4	; 0x8019e4 <lines>
   1824c:	8f 93       	push	r24
   1824e:	82 e5       	ldi	r24, 0x52	; 82
    if(errors)
   18250:	9d e2       	ldi	r25, 0x2D	; 45
   18252:	1f 92       	push	r1
   18254:	9f 93       	push	r25
   18256:	8f 93       	push	r24
   18258:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1825c:	0f 90       	pop	r0
   1825e:	0f 90       	pop	r0
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   18260:	0f 90       	pop	r0
   18262:	0f 90       	pop	r0
   18264:	0f 90       	pop	r0
   18266:	a1 14       	cp	r10, r1
   18268:	b1 04       	cpc	r11, r1
   1826a:	71 f0       	breq	.+28     	; 0x18288 <POSIX_Read_Config+0x10bc>
   1826c:	bf 92       	push	r11
   1826e:	af 92       	push	r10
   18270:	8b e2       	ldi	r24, 0x2B	; 43
   18272:	9d e2       	ldi	r25, 0x2D	; 45
   18274:	1f 92       	push	r1
   18276:	9f 93       	push	r25
   18278:	8f 93       	push	r24
   1827a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    ret = fclose(cfg);
   1827e:	0f 90       	pop	r0
   18280:	0f 90       	pop	r0
   18282:	0f 90       	pop	r0
   18284:	0f 90       	pop	r0
   18286:	0f 90       	pop	r0
   18288:	c9 57       	subi	r28, 0x79	; 121
   1828a:	df 4f       	sbci	r29, 0xFF	; 255
    if(ret == EOF)
   1828c:	88 81       	ld	r24, Y
   1828e:	99 81       	ldd	r25, Y+1	; 0x01
    {
        perror("Read_Config - close error");
   18290:	c7 58       	subi	r28, 0x87	; 135
   18292:	d0 40       	sbci	r29, 0x00	; 0
   18294:	0e 94 ba 80 	call	0x10174	; 0x10174 <fclose>
        ++errors;
   18298:	01 96       	adiw	r24, 0x01	; 1
   1829a:	39 f4       	brne	.+14     	; 0x182aa <POSIX_Read_Config+0x10de>
   1829c:	83 e1       	ldi	r24, 0x13	; 19
   1829e:	96 e1       	ldi	r25, 0x16	; 22
    }

    return(errors);
}
   182a0:	0e 94 e6 7b 	call	0xf7cc	; 0xf7cc <perror>
   182a4:	c5 01       	movw	r24, r10
   182a6:	01 96       	adiw	r24, 0x01	; 1
   182a8:	01 c0       	rjmp	.+2      	; 0x182ac <POSIX_Read_Config+0x10e0>
   182aa:	c5 01       	movw	r24, r10
   182ac:	c6 56       	subi	r28, 0x66	; 102
   182ae:	df 4f       	sbci	r29, 0xFF	; 255
   182b0:	e2 e1       	ldi	r30, 0x12	; 18
   182b2:	0c 94 ab e9 	jmp	0x1d356	; 0x1d356 <__epilogue_restores__>

000182b6 <print_var_P>:
/// @brief Display Configuration File variable
/// @param str: title
/// @param val: variable value
/// @return  void
void print_var_P(__memx const char *str, uint32_t val)
{
   182b6:	cf 92       	push	r12
   182b8:	df 92       	push	r13
   182ba:	ef 92       	push	r14
   182bc:	0f 93       	push	r16
   182be:	1f 93       	push	r17
   182c0:	cf 93       	push	r28
   182c2:	df 93       	push	r29
   182c4:	cd b7       	in	r28, 0x3d	; 61
   182c6:	de b7       	in	r29, 0x3e	; 62
   182c8:	c0 54       	subi	r28, 0x40	; 64
   182ca:	d1 09       	sbc	r29, r1
   182cc:	0f b6       	in	r0, 0x3f	; 63
   182ce:	f8 94       	cli
   182d0:	de bf       	out	0x3e, r29	; 62
   182d2:	0f be       	out	0x3f, r0	; 63
   182d4:	cd bf       	out	0x3d, r28	; 61
   182d6:	6b 01       	movw	r12, r22
   182d8:	e8 2e       	mov	r14, r24
   182da:	75 2f       	mov	r23, r21
   182dc:	de 01       	movw	r26, r28
   182de:	11 96       	adiw	r26, 0x01	; 1
    char tmp[64];
    int i=0;
   182e0:	80 e0       	ldi	r24, 0x00	; 0
   182e2:	90 e0       	ldi	r25, 0x00	; 0
   182e4:	8d 01       	movw	r16, r26
    while( *str && i < 62)
   182e6:	f6 01       	movw	r30, r12
   182e8:	5e 2d       	mov	r21, r14
   182ea:	0e 94 c6 e9 	call	0x1d38c	; 0x1d38c <__xload_1>
   182ee:	66 23       	and	r22, r22
   182f0:	51 f0       	breq	.+20     	; 0x18306 <print_var_P+0x50>
   182f2:	8e 33       	cpi	r24, 0x3E	; 62
   182f4:	91 05       	cpc	r25, r1
   182f6:	39 f0       	breq	.+14     	; 0x18306 <print_var_P+0x50>
        tmp[i++] = *str++;
   182f8:	01 96       	adiw	r24, 0x01	; 1
   182fa:	5f ef       	ldi	r21, 0xFF	; 255
   182fc:	c5 1a       	sub	r12, r21
   182fe:	d5 0a       	sbc	r13, r21
   18300:	e5 0a       	sbc	r14, r21
   18302:	6d 93       	st	X+, r22
   18304:	f0 cf       	rjmp	.-32     	; 0x182e6 <print_var_P+0x30>
    tmp[i++] = 0;
   18306:	f8 01       	movw	r30, r16
   18308:	e8 0f       	add	r30, r24
   1830a:	f9 1f       	adc	r31, r25
   1830c:	10 82       	st	Z, r1

    printf("    %-25s = %8lxH (%ld)\n", tmp, val, val); 
   1830e:	7f 93       	push	r23
   18310:	4f 93       	push	r20
   18312:	3f 93       	push	r19
   18314:	2f 93       	push	r18
   18316:	7f 93       	push	r23
   18318:	4f 93       	push	r20
   1831a:	3f 93       	push	r19
   1831c:	2f 93       	push	r18
   1831e:	1f 93       	push	r17
   18320:	0f 93       	push	r16
   18322:	82 e1       	ldi	r24, 0x12	; 18
   18324:	9d e2       	ldi	r25, 0x2D	; 45
   18326:	1f 92       	push	r1
   18328:	9f 93       	push	r25
   1832a:	8f 93       	push	r24
   1832c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
}
   18330:	0f b6       	in	r0, 0x3f	; 63
   18332:	f8 94       	cli
   18334:	de bf       	out	0x3e, r29	; 62
   18336:	0f be       	out	0x3f, r0	; 63
   18338:	cd bf       	out	0x3d, r28	; 61
   1833a:	c0 5c       	subi	r28, 0xC0	; 192
   1833c:	df 4f       	sbci	r29, 0xFF	; 255
   1833e:	0f b6       	in	r0, 0x3f	; 63
   18340:	f8 94       	cli
   18342:	de bf       	out	0x3e, r29	; 62
   18344:	0f be       	out	0x3f, r0	; 63
   18346:	cd bf       	out	0x3d, r28	; 61
   18348:	df 91       	pop	r29
   1834a:	cf 91       	pop	r28
   1834c:	1f 91       	pop	r17
   1834e:	0f 91       	pop	r16
   18350:	ef 90       	pop	r14
   18352:	df 90       	pop	r13
   18354:	cf 90       	pop	r12
   18356:	08 95       	ret

00018358 <print_str_P>:
/// @brief Display Configuration File string
/// @param *str: title
/// @param *arg: string
/// @return  void
void print_str_P(__memx const char *str, char *arg)
{
   18358:	cf 92       	push	r12
   1835a:	df 92       	push	r13
   1835c:	ef 92       	push	r14
   1835e:	cf 93       	push	r28
   18360:	df 93       	push	r29
   18362:	cd b7       	in	r28, 0x3d	; 61
   18364:	de b7       	in	r29, 0x3e	; 62
   18366:	c0 54       	subi	r28, 0x40	; 64
   18368:	d1 09       	sbc	r29, r1
   1836a:	0f b6       	in	r0, 0x3f	; 63
   1836c:	f8 94       	cli
   1836e:	de bf       	out	0x3e, r29	; 62
   18370:	0f be       	out	0x3f, r0	; 63
   18372:	cd bf       	out	0x3d, r28	; 61
   18374:	6b 01       	movw	r12, r22
   18376:	e8 2e       	mov	r14, r24
   18378:	75 2f       	mov	r23, r21
   1837a:	de 01       	movw	r26, r28
   1837c:	11 96       	adiw	r26, 0x01	; 1
    char tmp[64];
    int i=0;
   1837e:	80 e0       	ldi	r24, 0x00	; 0
   18380:	90 e0       	ldi	r25, 0x00	; 0
   18382:	9d 01       	movw	r18, r26
    while( *str && i < 62)
   18384:	f6 01       	movw	r30, r12
   18386:	5e 2d       	mov	r21, r14
   18388:	0e 94 c6 e9 	call	0x1d38c	; 0x1d38c <__xload_1>
   1838c:	66 23       	and	r22, r22
   1838e:	51 f0       	breq	.+20     	; 0x183a4 <print_str_P+0x4c>
   18390:	8e 33       	cpi	r24, 0x3E	; 62
   18392:	91 05       	cpc	r25, r1
   18394:	39 f0       	breq	.+14     	; 0x183a4 <print_str_P+0x4c>
        tmp[i++] = *str++;
   18396:	01 96       	adiw	r24, 0x01	; 1
   18398:	5f ef       	ldi	r21, 0xFF	; 255
   1839a:	c5 1a       	sub	r12, r21
   1839c:	d5 0a       	sbc	r13, r21
   1839e:	e5 0a       	sbc	r14, r21
   183a0:	6d 93       	st	X+, r22
   183a2:	f0 cf       	rjmp	.-32     	; 0x18384 <print_str_P+0x2c>
    tmp[i++] = 0;
   183a4:	f9 01       	movw	r30, r18
   183a6:	e8 0f       	add	r30, r24
   183a8:	f9 1f       	adc	r31, r25
   183aa:	10 82       	st	Z, r1
    printf("    %-25s = \"%s\"\n", tmp, arg);   
   183ac:	7f 93       	push	r23
   183ae:	4f 93       	push	r20
   183b0:	3f 93       	push	r19
   183b2:	2f 93       	push	r18
   183b4:	80 e0       	ldi	r24, 0x00	; 0
   183b6:	9d e2       	ldi	r25, 0x2D	; 45
   183b8:	1f 92       	push	r1
   183ba:	9f 93       	push	r25
   183bc:	8f 93       	push	r24
   183be:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
}
   183c2:	0f b6       	in	r0, 0x3f	; 63
   183c4:	f8 94       	cli
   183c6:	de bf       	out	0x3e, r29	; 62
   183c8:	0f be       	out	0x3f, r0	; 63
   183ca:	cd bf       	out	0x3d, r28	; 61
   183cc:	c0 5c       	subi	r28, 0xC0	; 192
   183ce:	df 4f       	sbci	r29, 0xFF	; 255
   183d0:	0f b6       	in	r0, 0x3f	; 63
   183d2:	f8 94       	cli
   183d4:	de bf       	out	0x3e, r29	; 62
   183d6:	0f be       	out	0x3f, r0	; 63
   183d8:	cd bf       	out	0x3d, r28	; 61
   183da:	df 91       	pop	r29
   183dc:	cf 91       	pop	r28
   183de:	ef 90       	pop	r14
   183e0:	df 90       	pop	r13
   183e2:	cf 90       	pop	r12
   183e4:	08 95       	ret

000183e6 <display_Addresses>:

/// @brief Display Configuration device address saummary
/// @return  void
void display_Addresses()
{
   183e6:	2f 92       	push	r2
   183e8:	3f 92       	push	r3
   183ea:	4f 92       	push	r4
   183ec:	6f 92       	push	r6
   183ee:	7f 92       	push	r7
   183f0:	8f 92       	push	r8
   183f2:	af 92       	push	r10
   183f4:	bf 92       	push	r11
   183f6:	cf 92       	push	r12
   183f8:	df 92       	push	r13
   183fa:	ef 92       	push	r14
   183fc:	0f 93       	push	r16
   183fe:	1f 93       	push	r17
   18400:	cf 93       	push	r28
   18402:	df 93       	push	r29
   18404:	cd b7       	in	r28, 0x3d	; 61
   18406:	de b7       	in	r29, 0x3e	; 62
   18408:	2b 97       	sbiw	r28, 0x0b	; 11
   1840a:	0f b6       	in	r0, 0x3f	; 63
   1840c:	f8 94       	cli
   1840e:	de bf       	out	0x3e, r29	; 62
   18410:	0f be       	out	0x3f, r0	; 63
   18412:	cd bf       	out	0x3d, r28	; 61
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
   18414:	8e ed       	ldi	r24, 0xDE	; 222
   18416:	9c e2       	ldi	r25, 0x2C	; 44
   18418:	1f 92       	push	r1
   1841a:	9f 93       	push	r25
   1841c:	8f 93       	push	r24
   1841e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18422:	0f e3       	ldi	r16, 0x3F	; 63
   18424:	1f e1       	ldi	r17, 0x1F	; 31
   18426:	0f 90       	pop	r0
   18428:	0f 90       	pop	r0
   1842a:	0f 90       	pop	r0
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   1842c:	8d e3       	ldi	r24, 0x3D	; 61
   1842e:	9c e2       	ldi	r25, 0x2C	; 44
   18430:	9c 01       	movw	r18, r24
   18432:	40 e0       	ldi	r20, 0x00	; 0
   18434:	29 83       	std	Y+1, r18	; 0x01
   18436:	3a 83       	std	Y+2, r19	; 0x02
   18438:	4b 83       	std	Y+3, r20	; 0x03
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   1843a:	86 e2       	ldi	r24, 0x26	; 38
   1843c:	9c e2       	ldi	r25, 0x2C	; 44
   1843e:	9c 01       	movw	r18, r24
   18440:	40 e0       	ldi	r20, 0x00	; 0
   18442:	2c 83       	std	Y+4, r18	; 0x04
   18444:	3d 83       	std	Y+5, r19	; 0x05
   18446:	4e 83       	std	Y+6, r20	; 0x06
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   18448:	8f e0       	ldi	r24, 0x0F	; 15
   1844a:	9c e2       	ldi	r25, 0x2C	; 44
   1844c:	9c 01       	movw	r18, r24
   1844e:	40 e0       	ldi	r20, 0x00	; 0
   18450:	2f 83       	std	Y+7, r18	; 0x07
   18452:	38 87       	std	Y+8, r19	; 0x08
   18454:	49 87       	std	Y+9, r20	; 0x09
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   18456:	82 e8       	ldi	r24, 0x82	; 130
   18458:	9c e2       	ldi	r25, 0x2C	; 44
   1845a:	6c 01       	movw	r12, r24
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   1845c:	8b e6       	ldi	r24, 0x6B	; 107
   1845e:	9c e2       	ldi	r25, 0x2C	; 44
   18460:	3c 01       	movw	r6, r24
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   18462:	84 e5       	ldi	r24, 0x54	; 84
   18464:	9c e2       	ldi	r25, 0x2C	; 44
   18466:	1c 01       	movw	r2, r24
            continue;
        address = Devices[i].ADDRESS;

        if(Devices[i].TYPE == SS80_TYPE)
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   18468:	87 ec       	ldi	r24, 0xC7	; 199
   1846a:	a8 2e       	mov	r10, r24
   1846c:	8c e2       	ldi	r24, 0x2C	; 44
   1846e:	b8 2e       	mov	r11, r24
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   18470:	f8 01       	movw	r30, r16
   18472:	80 81       	ld	r24, Z
   18474:	88 23       	and	r24, r24
   18476:	09 f4       	brne	.+2      	; 0x1847a <display_Addresses+0x94>
   18478:	8a c0       	rjmp	.+276    	; 0x1858e <display_Addresses+0x1a8>
            continue;
        address = Devices[i].ADDRESS;
   1847a:	f1 81       	ldd	r31, Z+1	; 0x01
   1847c:	2f 2f       	mov	r18, r31
   1847e:	30 e0       	ldi	r19, 0x00	; 0
   18480:	3b 87       	std	Y+11, r19	; 0x0b
   18482:	2a 87       	std	Y+10, r18	; 0x0a

        if(Devices[i].TYPE == SS80_TYPE)
   18484:	82 30       	cpi	r24, 0x02	; 2
   18486:	49 f5       	brne	.+82     	; 0x184da <display_Addresses+0xf4>
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   18488:	c9 01       	movw	r24, r18
   1848a:	80 96       	adiw	r24, 0x20	; 32
   1848c:	9f 93       	push	r25
   1848e:	8f 93       	push	r24
   18490:	c5 01       	movw	r24, r10
   18492:	1f 92       	push	r1
   18494:	9f 93       	push	r25
   18496:	af 92       	push	r10
   18498:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            printf("  SS80_MTA    = %02XH\n",BASE_MTA + address );
   1849c:	8a 85       	ldd	r24, Y+10	; 0x0a
   1849e:	9b 85       	ldd	r25, Y+11	; 0x0b
   184a0:	80 5c       	subi	r24, 0xC0	; 192
   184a2:	9f 4f       	sbci	r25, 0xFF	; 255
   184a4:	9f 93       	push	r25
   184a6:	8f 93       	push	r24
   184a8:	80 eb       	ldi	r24, 0xB0	; 176
   184aa:	9c e2       	ldi	r25, 0x2C	; 44
   184ac:	1f 92       	push	r1
   184ae:	9f 93       	push	r25
   184b0:	8f 93       	push	r24
   184b2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
   184b6:	8a 85       	ldd	r24, Y+10	; 0x0a
   184b8:	9b 85       	ldd	r25, Y+11	; 0x0b
   184ba:	80 5a       	subi	r24, 0xA0	; 160
   184bc:	9f 4f       	sbci	r25, 0xFF	; 255
   184be:	9f 93       	push	r25
   184c0:	8f 93       	push	r24
   184c2:	89 e9       	ldi	r24, 0x99	; 153
   184c4:	9c e2       	ldi	r25, 0x2C	; 44
   184c6:	1f 92       	push	r1
   184c8:	9f 93       	push	r25
   184ca:	8f 93       	push	r24
   184cc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   184d0:	0f b6       	in	r0, 0x3f	; 63
   184d2:	f8 94       	cli
   184d4:	de bf       	out	0x3e, r29	; 62
   184d6:	0f be       	out	0x3f, r0	; 63
   184d8:	cd bf       	out	0x3d, r28	; 61
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   184da:	f8 01       	movw	r30, r16
   184dc:	80 81       	ld	r24, Z
   184de:	81 30       	cpi	r24, 0x01	; 1
   184e0:	29 f5       	brne	.+74     	; 0x1852c <display_Addresses+0x146>
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   184e2:	8a 85       	ldd	r24, Y+10	; 0x0a
   184e4:	9b 85       	ldd	r25, Y+11	; 0x0b
   184e6:	80 96       	adiw	r24, 0x20	; 32
   184e8:	9f 93       	push	r25
   184ea:	8f 93       	push	r24
   184ec:	1f 92       	push	r1
   184ee:	df 92       	push	r13
   184f0:	cf 92       	push	r12
   184f2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   184f6:	8a 85       	ldd	r24, Y+10	; 0x0a
   184f8:	9b 85       	ldd	r25, Y+11	; 0x0b
   184fa:	80 5c       	subi	r24, 0xC0	; 192
   184fc:	9f 4f       	sbci	r25, 0xFF	; 255
   184fe:	9f 93       	push	r25
   18500:	8f 93       	push	r24
   18502:	1f 92       	push	r1
   18504:	7f 92       	push	r7
   18506:	6f 92       	push	r6
   18508:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   1850c:	8a 85       	ldd	r24, Y+10	; 0x0a
   1850e:	9b 85       	ldd	r25, Y+11	; 0x0b
   18510:	80 5a       	subi	r24, 0xA0	; 160
   18512:	9f 4f       	sbci	r25, 0xFF	; 255
   18514:	9f 93       	push	r25
   18516:	8f 93       	push	r24
   18518:	1f 92       	push	r1
   1851a:	3f 92       	push	r3
   1851c:	2f 92       	push	r2
   1851e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18522:	0f b6       	in	r0, 0x3f	; 63
   18524:	f8 94       	cli
   18526:	de bf       	out	0x3e, r29	; 62
   18528:	0f be       	out	0x3f, r0	; 63
   1852a:	cd bf       	out	0x3d, r28	; 61
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
   1852c:	f8 01       	movw	r30, r16
   1852e:	80 81       	ld	r24, Z
   18530:	83 30       	cpi	r24, 0x03	; 3
   18532:	69 f5       	brne	.+90     	; 0x1858e <display_Addresses+0x1a8>
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   18534:	8a 85       	ldd	r24, Y+10	; 0x0a
   18536:	9b 85       	ldd	r25, Y+11	; 0x0b
   18538:	80 96       	adiw	r24, 0x20	; 32
   1853a:	9f 93       	push	r25
   1853c:	8f 93       	push	r24
   1853e:	1f 92       	push	r1
   18540:	fa 81       	ldd	r31, Y+2	; 0x02
   18542:	ff 93       	push	r31
   18544:	29 81       	ldd	r18, Y+1	; 0x01
   18546:	2f 93       	push	r18
   18548:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   1854c:	8a 85       	ldd	r24, Y+10	; 0x0a
   1854e:	9b 85       	ldd	r25, Y+11	; 0x0b
   18550:	80 5c       	subi	r24, 0xC0	; 192
   18552:	9f 4f       	sbci	r25, 0xFF	; 255
   18554:	9f 93       	push	r25
   18556:	8f 93       	push	r24
   18558:	1f 92       	push	r1
   1855a:	3d 81       	ldd	r19, Y+5	; 0x05
   1855c:	3f 93       	push	r19
   1855e:	4c 81       	ldd	r20, Y+4	; 0x04
   18560:	4f 93       	push	r20
   18562:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   18566:	8a 85       	ldd	r24, Y+10	; 0x0a
   18568:	9b 85       	ldd	r25, Y+11	; 0x0b
   1856a:	80 5a       	subi	r24, 0xA0	; 160
   1856c:	9f 4f       	sbci	r25, 0xFF	; 255
   1856e:	9b 87       	std	Y+11, r25	; 0x0b
   18570:	8a 87       	std	Y+10, r24	; 0x0a
   18572:	9f 93       	push	r25
   18574:	8f 93       	push	r24
   18576:	1f 92       	push	r1
   18578:	98 85       	ldd	r25, Y+8	; 0x08
   1857a:	9f 93       	push	r25
   1857c:	ef 81       	ldd	r30, Y+7	; 0x07
   1857e:	ef 93       	push	r30
   18580:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18584:	0f b6       	in	r0, 0x3f	; 63
   18586:	f8 94       	cli
   18588:	de bf       	out	0x3e, r29	; 62
   1858a:	0f be       	out	0x3f, r0	; 63
   1858c:	cd bf       	out	0x3d, r28	; 61
   1858e:	09 5f       	subi	r16, 0xF9	; 249
   18590:	1f 4f       	sbci	r17, 0xFF	; 255
void display_Addresses()
{
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   18592:	3f e1       	ldi	r19, 0x1F	; 31
   18594:	07 37       	cpi	r16, 0x77	; 119
   18596:	13 07       	cpc	r17, r19
   18598:	09 f0       	breq	.+2      	; 0x1859c <display_Addresses+0x1b6>
   1859a:	6a cf       	rjmp	.-300    	; 0x18470 <display_Addresses+0x8a>
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
        }
    }
    printf("\n");
   1859c:	8d e0       	ldi	r24, 0x0D	; 13
   1859e:	9c e2       	ldi	r25, 0x2C	; 44
   185a0:	1f 92       	push	r1
   185a2:	9f 93       	push	r25
   185a4:	8f 93       	push	r24
   185a6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
}
   185aa:	0f 90       	pop	r0
   185ac:	0f 90       	pop	r0
   185ae:	0f 90       	pop	r0
   185b0:	2b 96       	adiw	r28, 0x0b	; 11
   185b2:	0f b6       	in	r0, 0x3f	; 63
   185b4:	f8 94       	cli
   185b6:	de bf       	out	0x3e, r29	; 62
   185b8:	0f be       	out	0x3f, r0	; 63
   185ba:	cd bf       	out	0x3d, r28	; 61
   185bc:	df 91       	pop	r29
   185be:	cf 91       	pop	r28
   185c0:	1f 91       	pop	r17
   185c2:	0f 91       	pop	r16
   185c4:	ef 90       	pop	r14
   185c6:	df 90       	pop	r13
   185c8:	cf 90       	pop	r12
   185ca:	bf 90       	pop	r11
   185cc:	af 90       	pop	r10
   185ce:	8f 90       	pop	r8
   185d0:	7f 90       	pop	r7
   185d2:	6f 90       	pop	r6
   185d4:	4f 90       	pop	r4
   185d6:	3f 90       	pop	r3
   185d8:	2f 90       	pop	r2
   185da:	08 95       	ret

000185dc <display_Config>:

/// @brief Display current Configuration File values
/// @return  void
void display_Config()
{
   185dc:	2f 92       	push	r2
   185de:	3f 92       	push	r3
   185e0:	4f 92       	push	r4
   185e2:	6f 92       	push	r6
   185e4:	7f 92       	push	r7
   185e6:	8f 92       	push	r8
   185e8:	af 92       	push	r10
   185ea:	bf 92       	push	r11
   185ec:	cf 92       	push	r12
   185ee:	df 92       	push	r13
   185f0:	ef 92       	push	r14
   185f2:	0f 93       	push	r16
   185f4:	1f 93       	push	r17
   185f6:	cf 93       	push	r28
   185f8:	df 93       	push	r29
   185fa:	cd b7       	in	r28, 0x3d	; 61
   185fc:	de b7       	in	r29, 0x3e	; 62
   185fe:	2b 97       	sbiw	r28, 0x0b	; 11
   18600:	0f b6       	in	r0, 0x3f	; 63
   18602:	f8 94       	cli
   18604:	de bf       	out	0x3e, r29	; 62
   18606:	0f be       	out	0x3f, r0	; 63
   18608:	cd bf       	out	0x3d, r28	; 61
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
   1860a:	8d ee       	ldi	r24, 0xED	; 237
   1860c:	9b e2       	ldi	r25, 0x2B	; 43
   1860e:	1f 92       	push	r1
   18610:	9f 93       	push	r25
   18612:	8f 93       	push	r24
   18614:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18618:	0f e3       	ldi	r16, 0x3F	; 63
   1861a:	1f e1       	ldi	r17, 0x1F	; 31
   1861c:	0f 90       	pop	r0
   1861e:	0f 90       	pop	r0
   18620:	0f 90       	pop	r0

            printf("PRINTER\n");
            printf("  CONFIG\n");
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
        }
        printf("\n");
   18622:	8c ef       	ldi	r24, 0xFC	; 252
   18624:	99 e2       	ldi	r25, 0x29	; 41
   18626:	9c 01       	movw	r18, r24
   18628:	40 e0       	ldi	r20, 0x00	; 0
   1862a:	29 83       	std	Y+1, r18	; 0x01
   1862c:	3a 83       	std	Y+2, r19	; 0x02
   1862e:	4b 83       	std	Y+3, r20	; 0x03

        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;

            printf("PRINTER\n");
   18630:	80 e1       	ldi	r24, 0x10	; 16
   18632:	9a e2       	ldi	r25, 0x2A	; 42
   18634:	9c 01       	movw	r18, r24
   18636:	40 e0       	ldi	r20, 0x00	; 0
   18638:	2c 83       	std	Y+4, r18	; 0x04
   1863a:	3d 83       	std	Y+5, r19	; 0x05
   1863c:	4e 83       	std	Y+6, r20	; 0x06
            printf("  CONFIG\n");
   1863e:	86 e0       	ldi	r24, 0x06	; 6
   18640:	9a e2       	ldi	r25, 0x2A	; 42
   18642:	9c 01       	movw	r18, r24
   18644:	40 e0       	ldi	r20, 0x00	; 0
   18646:	2f 83       	std	Y+7, r18	; 0x07
   18648:	38 87       	std	Y+8, r19	; 0x08
   1864a:	49 87       	std	Y+9, r20	; 0x09
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   1864c:	8e ef       	ldi	r24, 0xFE	; 254
   1864e:	99 e2       	ldi	r25, 0x29	; 41
   18650:	3c 01       	movw	r6, r24
   18652:	81 2c       	mov	r8, r1
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;

            printf("AMIGO\n");
   18654:	80 e8       	ldi	r24, 0x80	; 128
   18656:	9a e2       	ldi	r25, 0x2A	; 42
   18658:	1c 01       	movw	r2, r24
            printf("  HEADER\n");
   1865a:	86 e7       	ldi	r24, 0x76	; 118
   1865c:	9a e2       	ldi	r25, 0x2A	; 42
   1865e:	6c 01       	movw	r12, r24
                print_var("ADDRESS", (uint32_t) AMIGOp->HEADER.ADDRESS);
   18660:	8e e6       	ldi	r24, 0x6E	; 110
   18662:	a8 2e       	mov	r10, r24
   18664:	8a e2       	ldi	r24, 0x2A	; 42
   18666:	b8 2e       	mov	r11, r24
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   18668:	f8 01       	movw	r30, r16
   1866a:	80 81       	ld	r24, Z
   1866c:	88 23       	and	r24, r24
   1866e:	09 f4       	brne	.+2      	; 0x18672 <display_Config+0x96>
   18670:	d8 c1       	rjmp	.+944    	; 0x18a22 <display_Config+0x446>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   18672:	82 30       	cpi	r24, 0x02	; 2
   18674:	09 f0       	breq	.+2      	; 0x18678 <display_Config+0x9c>
   18676:	2b c1       	rjmp	.+598    	; 0x188ce <display_Config+0x2f2>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   18678:	23 81       	ldd	r18, Z+3	; 0x03
   1867a:	34 81       	ldd	r19, Z+4	; 0x04
   1867c:	3b 87       	std	Y+11, r19	; 0x0b
   1867e:	2a 87       	std	Y+10, r18	; 0x0a

            printf("SS80\n");
   18680:	87 ee       	ldi	r24, 0xE7	; 231
   18682:	9b e2       	ldi	r25, 0x2B	; 43
   18684:	1f 92       	push	r1
   18686:	9f 93       	push	r25
   18688:	8f 93       	push	r24
   1868a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            printf("  CONFIG\n");
   1868e:	8d ed       	ldi	r24, 0xDD	; 221
   18690:	9b e2       	ldi	r25, 0x2B	; 43
   18692:	1f 92       	push	r1
   18694:	9f 93       	push	r25
   18696:	8f 93       	push	r24
   18698:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
                print_var("ADDRESS", (uint32_t) SS80p->HEADER.ADDRESS);
   1869c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1869e:	fb 85       	ldd	r31, Y+11	; 0x0b
   186a0:	20 81       	ld	r18, Z
   186a2:	30 e0       	ldi	r19, 0x00	; 0
   186a4:	40 e0       	ldi	r20, 0x00	; 0
   186a6:	50 e0       	ldi	r21, 0x00	; 0
   186a8:	65 ed       	ldi	r22, 0xD5	; 213
   186aa:	7b e2       	ldi	r23, 0x2B	; 43
   186ac:	80 e0       	ldi	r24, 0x00	; 0
   186ae:	03 de       	rcall	.-1018   	; 0x182b6 <print_var_P>
                print_var("PPR", (uint32_t) SS80p->HEADER.PPR);
   186b0:	ea 85       	ldd	r30, Y+10	; 0x0a
   186b2:	fb 85       	ldd	r31, Y+11	; 0x0b
   186b4:	21 81       	ldd	r18, Z+1	; 0x01
   186b6:	30 e0       	ldi	r19, 0x00	; 0
   186b8:	40 e0       	ldi	r20, 0x00	; 0
   186ba:	50 e0       	ldi	r21, 0x00	; 0
   186bc:	61 ed       	ldi	r22, 0xD1	; 209
   186be:	7b e2       	ldi	r23, 0x2B	; 43
   186c0:	80 e0       	ldi	r24, 0x00	; 0
   186c2:	f9 dd       	rcall	.-1038   	; 0x182b6 <print_var_P>
                print_str("FILE", SS80p->HEADER.NAME);
   186c4:	4a 85       	ldd	r20, Y+10	; 0x0a
   186c6:	5b 85       	ldd	r21, Y+11	; 0x0b
   186c8:	4e 5f       	subi	r20, 0xFE	; 254
   186ca:	5f 4f       	sbci	r21, 0xFF	; 255
   186cc:	6c ec       	ldi	r22, 0xCC	; 204
   186ce:	7b e2       	ldi	r23, 0x2B	; 43
   186d0:	80 e0       	ldi	r24, 0x00	; 0
   186d2:	42 de       	rcall	.-892    	; 0x18358 <print_str_P>
            printf("  HEADER\n");
   186d4:	82 ec       	ldi	r24, 0xC2	; 194
   186d6:	9b e2       	ldi	r25, 0x2B	; 43
   186d8:	1f 92       	push	r1
   186da:	9f 93       	push	r25
   186dc:	8f 93       	push	r24
   186de:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
                print_var("ID", (uint32_t) SS80p->CONFIG.ID);
   186e2:	ea 85       	ldd	r30, Y+10	; 0x0a
   186e4:	fb 85       	ldd	r31, Y+11	; 0x0b
   186e6:	23 a1       	ldd	r18, Z+35	; 0x23
   186e8:	34 a1       	ldd	r19, Z+36	; 0x24
   186ea:	40 e0       	ldi	r20, 0x00	; 0
   186ec:	50 e0       	ldi	r21, 0x00	; 0
   186ee:	6f eb       	ldi	r22, 0xBF	; 191
   186f0:	7b e2       	ldi	r23, 0x2B	; 43
   186f2:	80 e0       	ldi	r24, 0x00	; 0
   186f4:	e0 dd       	rcall	.-1088   	; 0x182b6 <print_var_P>
            printf("  CONTROLLER\n");
   186f6:	81 eb       	ldi	r24, 0xB1	; 177
   186f8:	9b e2       	ldi	r25, 0x2B	; 43
   186fa:	1f 92       	push	r1
   186fc:	9f 93       	push	r25
   186fe:	8f 93       	push	r24
   18700:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
                print_var("UNITS_INSTALLED", (uint32_t) SS80p->CONTROLLER.UNITS_INSTALLED);
   18704:	ea 85       	ldd	r30, Y+10	; 0x0a
   18706:	fb 85       	ldd	r31, Y+11	; 0x0b
   18708:	25 a1       	ldd	r18, Z+37	; 0x25
   1870a:	36 a1       	ldd	r19, Z+38	; 0x26
   1870c:	40 e0       	ldi	r20, 0x00	; 0
   1870e:	50 e0       	ldi	r21, 0x00	; 0
   18710:	61 ea       	ldi	r22, 0xA1	; 161
   18712:	7b e2       	ldi	r23, 0x2B	; 43
   18714:	80 e0       	ldi	r24, 0x00	; 0
   18716:	cf dd       	rcall	.-1122   	; 0x182b6 <print_var_P>
                print_var("TRANSFER_RATE", (uint32_t)  SS80p->CONTROLLER.TRANSFER_RATE);
   18718:	ea 85       	ldd	r30, Y+10	; 0x0a
   1871a:	fb 85       	ldd	r31, Y+11	; 0x0b
   1871c:	27 a1       	ldd	r18, Z+39	; 0x27
   1871e:	30 a5       	ldd	r19, Z+40	; 0x28
   18720:	40 e0       	ldi	r20, 0x00	; 0
   18722:	50 e0       	ldi	r21, 0x00	; 0
   18724:	63 e9       	ldi	r22, 0x93	; 147
   18726:	7b e2       	ldi	r23, 0x2B	; 43
   18728:	80 e0       	ldi	r24, 0x00	; 0
   1872a:	c5 dd       	rcall	.-1142   	; 0x182b6 <print_var_P>
                print_var("TYPE", (uint32_t)  SS80p->CONTROLLER.TYPE);
   1872c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1872e:	fb 85       	ldd	r31, Y+11	; 0x0b
   18730:	21 a5       	ldd	r18, Z+41	; 0x29
   18732:	30 e0       	ldi	r19, 0x00	; 0
   18734:	40 e0       	ldi	r20, 0x00	; 0
   18736:	50 e0       	ldi	r21, 0x00	; 0
   18738:	6e e8       	ldi	r22, 0x8E	; 142
   1873a:	7b e2       	ldi	r23, 0x2B	; 43
   1873c:	80 e0       	ldi	r24, 0x00	; 0
   1873e:	bb dd       	rcall	.-1162   	; 0x182b6 <print_var_P>
            printf("  UNIT\n");
   18740:	86 e8       	ldi	r24, 0x86	; 134
   18742:	9b e2       	ldi	r25, 0x2B	; 43
   18744:	1f 92       	push	r1
   18746:	9f 93       	push	r25
   18748:	8f 93       	push	r24
   1874a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
                print_var("UNIT_TYPE", (uint32_t)SS80p->UNIT.UNIT_TYPE);
   1874e:	ea 85       	ldd	r30, Y+10	; 0x0a
   18750:	fb 85       	ldd	r31, Y+11	; 0x0b
   18752:	22 a5       	ldd	r18, Z+42	; 0x2a
   18754:	30 e0       	ldi	r19, 0x00	; 0
   18756:	40 e0       	ldi	r20, 0x00	; 0
   18758:	50 e0       	ldi	r21, 0x00	; 0
   1875a:	6c e7       	ldi	r22, 0x7C	; 124
   1875c:	7b e2       	ldi	r23, 0x2B	; 43
   1875e:	80 e0       	ldi	r24, 0x00	; 0
   18760:	aa dd       	rcall	.-1196   	; 0x182b6 <print_var_P>
                print_var("DEVICE_NUMBER", (uint32_t)SS80p->UNIT.DEVICE_NUMBER);
   18762:	ea 85       	ldd	r30, Y+10	; 0x0a
   18764:	fb 85       	ldd	r31, Y+11	; 0x0b
   18766:	23 a5       	ldd	r18, Z+43	; 0x2b
   18768:	34 a5       	ldd	r19, Z+44	; 0x2c
   1876a:	45 a5       	ldd	r20, Z+45	; 0x2d
   1876c:	56 a5       	ldd	r21, Z+46	; 0x2e
   1876e:	6e e6       	ldi	r22, 0x6E	; 110
   18770:	7b e2       	ldi	r23, 0x2B	; 43
   18772:	80 e0       	ldi	r24, 0x00	; 0
                print_var("BYTES_PER_BLOCK", (uint32_t)SS80p->UNIT.BYTES_PER_BLOCK);
   18774:	a0 dd       	rcall	.-1216   	; 0x182b6 <print_var_P>
   18776:	ea 85       	ldd	r30, Y+10	; 0x0a
   18778:	fb 85       	ldd	r31, Y+11	; 0x0b
   1877a:	27 a5       	ldd	r18, Z+47	; 0x2f
   1877c:	30 a9       	ldd	r19, Z+48	; 0x30
   1877e:	40 e0       	ldi	r20, 0x00	; 0
   18780:	50 e0       	ldi	r21, 0x00	; 0
   18782:	6e e5       	ldi	r22, 0x5E	; 94
   18784:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("BUFFERED_BLOCKS", (uint32_t)SS80p->UNIT.BUFFERED_BLOCKS);
   18786:	80 e0       	ldi	r24, 0x00	; 0
   18788:	96 dd       	rcall	.-1236   	; 0x182b6 <print_var_P>
   1878a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1878c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1878e:	21 a9       	ldd	r18, Z+49	; 0x31
   18790:	30 e0       	ldi	r19, 0x00	; 0
   18792:	40 e0       	ldi	r20, 0x00	; 0
   18794:	50 e0       	ldi	r21, 0x00	; 0
   18796:	6e e4       	ldi	r22, 0x4E	; 78
   18798:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("BURST_SIZE", (uint32_t)SS80p->UNIT.BURST_SIZE);
   1879a:	80 e0       	ldi	r24, 0x00	; 0
   1879c:	8c dd       	rcall	.-1256   	; 0x182b6 <print_var_P>
   1879e:	ea 85       	ldd	r30, Y+10	; 0x0a
   187a0:	fb 85       	ldd	r31, Y+11	; 0x0b
   187a2:	22 a9       	ldd	r18, Z+50	; 0x32
   187a4:	30 e0       	ldi	r19, 0x00	; 0
   187a6:	40 e0       	ldi	r20, 0x00	; 0
   187a8:	50 e0       	ldi	r21, 0x00	; 0
   187aa:	63 e4       	ldi	r22, 0x43	; 67
   187ac:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("BLOCK_TIME", (uint32_t)SS80p->UNIT.BLOCK_TIME);
   187ae:	80 e0       	ldi	r24, 0x00	; 0
   187b0:	82 dd       	rcall	.-1276   	; 0x182b6 <print_var_P>
   187b2:	ea 85       	ldd	r30, Y+10	; 0x0a
   187b4:	fb 85       	ldd	r31, Y+11	; 0x0b
   187b6:	23 a9       	ldd	r18, Z+51	; 0x33
   187b8:	34 a9       	ldd	r19, Z+52	; 0x34
   187ba:	40 e0       	ldi	r20, 0x00	; 0
   187bc:	50 e0       	ldi	r21, 0x00	; 0
   187be:	68 e3       	ldi	r22, 0x38	; 56
   187c0:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("CONTINOUS_TRANSFER_RATE", (uint32_t)SS80p->UNIT.CONTINOUS_TRANSFER_RATE);
   187c2:	80 e0       	ldi	r24, 0x00	; 0
   187c4:	78 dd       	rcall	.-1296   	; 0x182b6 <print_var_P>
   187c6:	ea 85       	ldd	r30, Y+10	; 0x0a
   187c8:	fb 85       	ldd	r31, Y+11	; 0x0b
   187ca:	25 a9       	ldd	r18, Z+53	; 0x35
   187cc:	36 a9       	ldd	r19, Z+54	; 0x36
   187ce:	40 e0       	ldi	r20, 0x00	; 0
   187d0:	50 e0       	ldi	r21, 0x00	; 0
   187d2:	60 e2       	ldi	r22, 0x20	; 32
   187d4:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("OPTIMAL_RETRY_TIME", (uint32_t)SS80p->UNIT.OPTIMAL_RETRY_TIME);
   187d6:	80 e0       	ldi	r24, 0x00	; 0
   187d8:	6e dd       	rcall	.-1316   	; 0x182b6 <print_var_P>
   187da:	ea 85       	ldd	r30, Y+10	; 0x0a
   187dc:	fb 85       	ldd	r31, Y+11	; 0x0b
   187de:	27 a9       	ldd	r18, Z+55	; 0x37
   187e0:	30 ad       	ldd	r19, Z+56	; 0x38
   187e2:	40 e0       	ldi	r20, 0x00	; 0
   187e4:	50 e0       	ldi	r21, 0x00	; 0
   187e6:	6d e0       	ldi	r22, 0x0D	; 13
   187e8:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("ACCESS_TIME", (uint32_t)SS80p->UNIT.ACCESS_TIME);
   187ea:	80 e0       	ldi	r24, 0x00	; 0
   187ec:	64 dd       	rcall	.-1336   	; 0x182b6 <print_var_P>
   187ee:	ea 85       	ldd	r30, Y+10	; 0x0a
   187f0:	fb 85       	ldd	r31, Y+11	; 0x0b
   187f2:	21 ad       	ldd	r18, Z+57	; 0x39
   187f4:	32 ad       	ldd	r19, Z+58	; 0x3a
   187f6:	40 e0       	ldi	r20, 0x00	; 0
   187f8:	50 e0       	ldi	r21, 0x00	; 0
   187fa:	61 e0       	ldi	r22, 0x01	; 1
   187fc:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("MAXIMUM_INTERLEAVE", (uint32_t)SS80p->UNIT.MAXIMUM_INTERLEAVE);
   187fe:	80 e0       	ldi	r24, 0x00	; 0
   18800:	5a dd       	rcall	.-1356   	; 0x182b6 <print_var_P>
   18802:	ea 85       	ldd	r30, Y+10	; 0x0a
   18804:	fb 85       	ldd	r31, Y+11	; 0x0b
   18806:	23 ad       	ldd	r18, Z+59	; 0x3b
   18808:	30 e0       	ldi	r19, 0x00	; 0
   1880a:	40 e0       	ldi	r20, 0x00	; 0
   1880c:	50 e0       	ldi	r21, 0x00	; 0
   1880e:	6e ee       	ldi	r22, 0xEE	; 238
   18810:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("FIXED_VOLUMES", (uint32_t)SS80p->UNIT.FIXED_VOLUMES);
   18812:	80 e0       	ldi	r24, 0x00	; 0
   18814:	50 dd       	rcall	.-1376   	; 0x182b6 <print_var_P>
   18816:	ea 85       	ldd	r30, Y+10	; 0x0a
   18818:	fb 85       	ldd	r31, Y+11	; 0x0b
   1881a:	24 ad       	ldd	r18, Z+60	; 0x3c
   1881c:	30 e0       	ldi	r19, 0x00	; 0
   1881e:	40 e0       	ldi	r20, 0x00	; 0
   18820:	50 e0       	ldi	r21, 0x00	; 0
   18822:	60 ee       	ldi	r22, 0xE0	; 224
   18824:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("REMOVABLE_VOLUMES", (uint32_t)SS80p->UNIT.REMOVABLE_VOLUMES);
   18826:	80 e0       	ldi	r24, 0x00	; 0
   18828:	46 dd       	rcall	.-1396   	; 0x182b6 <print_var_P>
   1882a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1882c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1882e:	25 ad       	ldd	r18, Z+61	; 0x3d
   18830:	30 e0       	ldi	r19, 0x00	; 0
   18832:	40 e0       	ldi	r20, 0x00	; 0
   18834:	50 e0       	ldi	r21, 0x00	; 0
   18836:	6e ec       	ldi	r22, 0xCE	; 206
   18838:	7a e2       	ldi	r23, 0x2A	; 42
            printf("  VOLUME\n");
   1883a:	80 e0       	ldi	r24, 0x00	; 0
   1883c:	3c dd       	rcall	.-1416   	; 0x182b6 <print_var_P>
   1883e:	84 ec       	ldi	r24, 0xC4	; 196
   18840:	9a e2       	ldi	r25, 0x2A	; 42
   18842:	1f 92       	push	r1
   18844:	9f 93       	push	r25
   18846:	8f 93       	push	r24
                print_var("MAX_CYLINDER", (uint32_t)SS80p->VOLUME.MAX_CYLINDER);
   18848:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1884c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1884e:	fb 85       	ldd	r31, Y+11	; 0x0b
   18850:	fe 96       	adiw	r30, 0x3e	; 62
   18852:	20 81       	ld	r18, Z
   18854:	31 81       	ldd	r19, Z+1	; 0x01
   18856:	42 81       	ldd	r20, Z+2	; 0x02
   18858:	53 81       	ldd	r21, Z+3	; 0x03
   1885a:	67 eb       	ldi	r22, 0xB7	; 183
   1885c:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("MAX_HEAD", (uint32_t)SS80p->VOLUME.MAX_HEAD);
   1885e:	80 e0       	ldi	r24, 0x00	; 0
   18860:	2a dd       	rcall	.-1452   	; 0x182b6 <print_var_P>
   18862:	ea 85       	ldd	r30, Y+10	; 0x0a
   18864:	fb 85       	ldd	r31, Y+11	; 0x0b
   18866:	ee 5b       	subi	r30, 0xBE	; 190
   18868:	ff 4f       	sbci	r31, 0xFF	; 255
   1886a:	20 81       	ld	r18, Z
   1886c:	30 e0       	ldi	r19, 0x00	; 0
   1886e:	40 e0       	ldi	r20, 0x00	; 0
   18870:	50 e0       	ldi	r21, 0x00	; 0
   18872:	6e ea       	ldi	r22, 0xAE	; 174
   18874:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("MAX_SECTOR", (uint32_t)SS80p->VOLUME.MAX_SECTOR);
   18876:	80 e0       	ldi	r24, 0x00	; 0
   18878:	1e dd       	rcall	.-1476   	; 0x182b6 <print_var_P>
   1887a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1887c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1887e:	ed 5b       	subi	r30, 0xBD	; 189
   18880:	ff 4f       	sbci	r31, 0xFF	; 255
   18882:	20 81       	ld	r18, Z
   18884:	31 81       	ldd	r19, Z+1	; 0x01
   18886:	40 e0       	ldi	r20, 0x00	; 0
   18888:	50 e0       	ldi	r21, 0x00	; 0
   1888a:	63 ea       	ldi	r22, 0xA3	; 163
   1888c:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("MAX_BLOCK_NUMBER", (uint32_t)SS80p->VOLUME.MAX_BLOCK_NUMBER);
   1888e:	80 e0       	ldi	r24, 0x00	; 0
   18890:	12 dd       	rcall	.-1500   	; 0x182b6 <print_var_P>
   18892:	ea 85       	ldd	r30, Y+10	; 0x0a
   18894:	fb 85       	ldd	r31, Y+11	; 0x0b
   18896:	eb 5b       	subi	r30, 0xBB	; 187
   18898:	ff 4f       	sbci	r31, 0xFF	; 255
   1889a:	20 81       	ld	r18, Z
   1889c:	31 81       	ldd	r19, Z+1	; 0x01
   1889e:	42 81       	ldd	r20, Z+2	; 0x02
   188a0:	53 81       	ldd	r21, Z+3	; 0x03
   188a2:	62 e9       	ldi	r22, 0x92	; 146
   188a4:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("INTERLEAVE", (uint32_t)SS80p->VOLUME.INTERLEAVE);
   188a6:	80 e0       	ldi	r24, 0x00	; 0
   188a8:	06 dd       	rcall	.-1524   	; 0x182b6 <print_var_P>
   188aa:	2a 85       	ldd	r18, Y+10	; 0x0a
   188ac:	3b 85       	ldd	r19, Y+11	; 0x0b
   188ae:	27 5b       	subi	r18, 0xB7	; 183
   188b0:	3f 4f       	sbci	r19, 0xFF	; 255
   188b2:	f9 01       	movw	r30, r18
   188b4:	20 81       	ld	r18, Z
   188b6:	30 e0       	ldi	r19, 0x00	; 0
   188b8:	40 e0       	ldi	r20, 0x00	; 0
   188ba:	50 e0       	ldi	r21, 0x00	; 0
   188bc:	67 e8       	ldi	r22, 0x87	; 135
   188be:	7a e2       	ldi	r23, 0x2A	; 42
   188c0:	80 e0       	ldi	r24, 0x00	; 0
   188c2:	f9 dc       	rcall	.-1550   	; 0x182b6 <print_var_P>
   188c4:	0f b6       	in	r0, 0x3f	; 63
   188c6:	f8 94       	cli
   188c8:	de bf       	out	0x3e, r29	; 62
   188ca:	0f be       	out	0x3f, r0	; 63
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   188cc:	cd bf       	out	0x3d, r28	; 61
   188ce:	f8 01       	movw	r30, r16
   188d0:	80 81       	ld	r24, Z
   188d2:	81 30       	cpi	r24, 0x01	; 1
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   188d4:	09 f0       	breq	.+2      	; 0x188d8 <display_Config+0x2fc>
   188d6:	76 c0       	rjmp	.+236    	; 0x189c4 <display_Config+0x3e8>
   188d8:	23 81       	ldd	r18, Z+3	; 0x03
   188da:	34 81       	ldd	r19, Z+4	; 0x04

            printf("AMIGO\n");
   188dc:	3b 87       	std	Y+11, r19	; 0x0b
   188de:	2a 87       	std	Y+10, r18	; 0x0a
   188e0:	1f 92       	push	r1
   188e2:	3f 92       	push	r3
            printf("  HEADER\n");
   188e4:	2f 92       	push	r2
   188e6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   188ea:	1f 92       	push	r1
   188ec:	df 92       	push	r13
                print_var("ADDRESS", (uint32_t) AMIGOp->HEADER.ADDRESS);
   188ee:	cf 92       	push	r12
   188f0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   188f4:	ea 85       	ldd	r30, Y+10	; 0x0a
   188f6:	fb 85       	ldd	r31, Y+11	; 0x0b
   188f8:	20 81       	ld	r18, Z
   188fa:	30 e0       	ldi	r19, 0x00	; 0
   188fc:	40 e0       	ldi	r20, 0x00	; 0
   188fe:	50 e0       	ldi	r21, 0x00	; 0
                print_var("PPR", (uint32_t) AMIGOp->HEADER.PPR);
   18900:	b5 01       	movw	r22, r10
   18902:	80 e0       	ldi	r24, 0x00	; 0
   18904:	d8 dc       	rcall	.-1616   	; 0x182b6 <print_var_P>
   18906:	ea 85       	ldd	r30, Y+10	; 0x0a
   18908:	fb 85       	ldd	r31, Y+11	; 0x0b
   1890a:	21 81       	ldd	r18, Z+1	; 0x01
   1890c:	30 e0       	ldi	r19, 0x00	; 0
   1890e:	40 e0       	ldi	r20, 0x00	; 0
   18910:	50 e0       	ldi	r21, 0x00	; 0
   18912:	6a e6       	ldi	r22, 0x6A	; 106
                print_str("FILE", AMIGOp->HEADER.NAME);
   18914:	7a e2       	ldi	r23, 0x2A	; 42
   18916:	80 e0       	ldi	r24, 0x00	; 0
   18918:	ce dc       	rcall	.-1636   	; 0x182b6 <print_var_P>
   1891a:	4a 85       	ldd	r20, Y+10	; 0x0a
   1891c:	5b 85       	ldd	r21, Y+11	; 0x0b
   1891e:	4e 5f       	subi	r20, 0xFE	; 254
   18920:	5f 4f       	sbci	r21, 0xFF	; 255
   18922:	65 e6       	ldi	r22, 0x65	; 101
   18924:	7a e2       	ldi	r23, 0x2A	; 42
            printf("  CONFIG\n");
   18926:	80 e0       	ldi	r24, 0x00	; 0
   18928:	17 dd       	rcall	.-1490   	; 0x18358 <print_str_P>
   1892a:	8b e5       	ldi	r24, 0x5B	; 91
   1892c:	9a e2       	ldi	r25, 0x2A	; 42
   1892e:	1f 92       	push	r1
   18930:	9f 93       	push	r25
   18932:	8f 93       	push	r24
                print_var("ID", (uint32_t) AMIGOp->CONFIG.ID);
   18934:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18938:	ea 85       	ldd	r30, Y+10	; 0x0a
   1893a:	fb 85       	ldd	r31, Y+11	; 0x0b
   1893c:	23 a1       	ldd	r18, Z+35	; 0x23
   1893e:	34 a1       	ldd	r19, Z+36	; 0x24
   18940:	40 e0       	ldi	r20, 0x00	; 0
   18942:	50 e0       	ldi	r21, 0x00	; 0
   18944:	68 e5       	ldi	r22, 0x58	; 88
   18946:	7a e2       	ldi	r23, 0x2A	; 42
            printf("  GEOMETRY\n");
   18948:	80 e0       	ldi	r24, 0x00	; 0
   1894a:	b5 dc       	rcall	.-1686   	; 0x182b6 <print_var_P>
   1894c:	8c e4       	ldi	r24, 0x4C	; 76
   1894e:	9a e2       	ldi	r25, 0x2A	; 42
   18950:	1f 92       	push	r1
   18952:	9f 93       	push	r25
                print_var("BYTES_PER_SECTOR", (uint32_t) AMIGOp->GEOMETRY.BYTES_PER_SECTOR);
   18954:	8f 93       	push	r24
   18956:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1895a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1895c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1895e:	25 a1       	ldd	r18, Z+37	; 0x25
   18960:	36 a1       	ldd	r19, Z+38	; 0x26
   18962:	03 2e       	mov	r0, r19
   18964:	00 0c       	add	r0, r0
   18966:	44 0b       	sbc	r20, r20
   18968:	55 0b       	sbc	r21, r21
   1896a:	6b e3       	ldi	r22, 0x3B	; 59
                print_var("SECTORS_PER_TRACK", (uint32_t) AMIGOp->GEOMETRY.SECTORS_PER_TRACK);
   1896c:	7a e2       	ldi	r23, 0x2A	; 42
   1896e:	80 e0       	ldi	r24, 0x00	; 0
   18970:	a2 dc       	rcall	.-1724   	; 0x182b6 <print_var_P>
   18972:	ea 85       	ldd	r30, Y+10	; 0x0a
   18974:	fb 85       	ldd	r31, Y+11	; 0x0b
   18976:	27 a1       	ldd	r18, Z+39	; 0x27
   18978:	30 a5       	ldd	r19, Z+40	; 0x28
   1897a:	03 2e       	mov	r0, r19
   1897c:	00 0c       	add	r0, r0
   1897e:	44 0b       	sbc	r20, r20
   18980:	55 0b       	sbc	r21, r21
   18982:	69 e2       	ldi	r22, 0x29	; 41
                print_var("HEADS", (uint32_t) AMIGOp->GEOMETRY.HEADS);
   18984:	7a e2       	ldi	r23, 0x2A	; 42
   18986:	80 e0       	ldi	r24, 0x00	; 0
   18988:	96 dc       	rcall	.-1748   	; 0x182b6 <print_var_P>
   1898a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1898c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1898e:	21 a5       	ldd	r18, Z+41	; 0x29
   18990:	32 a5       	ldd	r19, Z+42	; 0x2a
   18992:	03 2e       	mov	r0, r19
   18994:	00 0c       	add	r0, r0
   18996:	44 0b       	sbc	r20, r20
   18998:	55 0b       	sbc	r21, r21
   1899a:	63 e2       	ldi	r22, 0x23	; 35
   1899c:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("CYLINDERS", (uint32_t) AMIGOp->GEOMETRY.CYLINDERS);
   1899e:	80 e0       	ldi	r24, 0x00	; 0
   189a0:	8a dc       	rcall	.-1772   	; 0x182b6 <print_var_P>
   189a2:	ea 85       	ldd	r30, Y+10	; 0x0a
   189a4:	fb 85       	ldd	r31, Y+11	; 0x0b
   189a6:	23 a5       	ldd	r18, Z+43	; 0x2b
   189a8:	34 a5       	ldd	r19, Z+44	; 0x2c
   189aa:	03 2e       	mov	r0, r19
   189ac:	00 0c       	add	r0, r0
   189ae:	44 0b       	sbc	r20, r20
   189b0:	55 0b       	sbc	r21, r21
   189b2:	69 e1       	ldi	r22, 0x19	; 25
   189b4:	7a e2       	ldi	r23, 0x2A	; 42
   189b6:	80 e0       	ldi	r24, 0x00	; 0
   189b8:	7e dc       	rcall	.-1796   	; 0x182b6 <print_var_P>
   189ba:	0f b6       	in	r0, 0x3f	; 63
   189bc:	f8 94       	cli
   189be:	de bf       	out	0x3e, r29	; 62
        } 
#endif // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
   189c0:	0f be       	out	0x3f, r0	; 63
   189c2:	cd bf       	out	0x3d, r28	; 61
   189c4:	f8 01       	movw	r30, r16
   189c6:	80 81       	ld	r24, Z
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
   189c8:	83 30       	cpi	r24, 0x03	; 3
   189ca:	09 f5       	brne	.+66     	; 0x18a0e <display_Config+0x432>
   189cc:	23 81       	ldd	r18, Z+3	; 0x03
   189ce:	34 81       	ldd	r19, Z+4	; 0x04

            printf("PRINTER\n");
   189d0:	3b 87       	std	Y+11, r19	; 0x0b
   189d2:	2a 87       	std	Y+10, r18	; 0x0a
   189d4:	1f 92       	push	r1
   189d6:	3d 81       	ldd	r19, Y+5	; 0x05
   189d8:	3f 93       	push	r19
   189da:	4c 81       	ldd	r20, Y+4	; 0x04
   189dc:	4f 93       	push	r20
            printf("  CONFIG\n");
   189de:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   189e2:	1f 92       	push	r1
   189e4:	88 85       	ldd	r24, Y+8	; 0x08
   189e6:	8f 93       	push	r24
   189e8:	9f 81       	ldd	r25, Y+7	; 0x07
   189ea:	9f 93       	push	r25
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   189ec:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   189f0:	ea 85       	ldd	r30, Y+10	; 0x0a
   189f2:	fb 85       	ldd	r31, Y+11	; 0x0b
   189f4:	20 81       	ld	r18, Z
   189f6:	30 e0       	ldi	r19, 0x00	; 0
   189f8:	40 e0       	ldi	r20, 0x00	; 0
   189fa:	50 e0       	ldi	r21, 0x00	; 0
   189fc:	88 2d       	mov	r24, r8
   189fe:	b3 01       	movw	r22, r6
   18a00:	5a dc       	rcall	.-1868   	; 0x182b6 <print_var_P>
   18a02:	0f 90       	pop	r0
   18a04:	0f 90       	pop	r0
   18a06:	0f 90       	pop	r0
   18a08:	0f 90       	pop	r0
   18a0a:	0f 90       	pop	r0
        }
        printf("\n");
   18a0c:	0f 90       	pop	r0
   18a0e:	1f 92       	push	r1
   18a10:	fa 81       	ldd	r31, Y+2	; 0x02
   18a12:	ff 93       	push	r31
   18a14:	29 81       	ldd	r18, Y+1	; 0x01
   18a16:	2f 93       	push	r18
   18a18:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18a1c:	0f 90       	pop	r0
   18a1e:	0f 90       	pop	r0
   18a20:	0f 90       	pop	r0
   18a22:	09 5f       	subi	r16, 0xF9	; 249
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   18a24:	1f 4f       	sbci	r17, 0xFF	; 255
   18a26:	3f e1       	ldi	r19, 0x1F	; 31
   18a28:	07 37       	cpi	r16, 0x77	; 119
   18a2a:	13 07       	cpc	r17, r19
   18a2c:	09 f0       	breq	.+2      	; 0x18a30 <display_Config+0x454>
            printf("  CONFIG\n");
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
        }
        printf("\n");
    }
    printf("END\n");
   18a2e:	1c ce       	rjmp	.-968    	; 0x18668 <display_Config+0x8c>
   18a30:	87 ef       	ldi	r24, 0xF7	; 247
   18a32:	99 e2       	ldi	r25, 0x29	; 41
   18a34:	1f 92       	push	r1
   18a36:	9f 93       	push	r25
   18a38:	8f 93       	push	r24
   18a3a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("\n");
   18a3e:	85 ef       	ldi	r24, 0xF5	; 245
   18a40:	99 e2       	ldi	r25, 0x29	; 41
   18a42:	1f 92       	push	r1
   18a44:	9f 93       	push	r25
   18a46:	8f 93       	push	r24
   18a48:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("\n");
   18a4c:	83 ef       	ldi	r24, 0xF3	; 243
   18a4e:	99 e2       	ldi	r25, 0x29	; 41
   18a50:	1f 92       	push	r1
   18a52:	9f 93       	push	r25
   18a54:	8f 93       	push	r24
   18a56:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
}
   18a5a:	0f b6       	in	r0, 0x3f	; 63
   18a5c:	f8 94       	cli
   18a5e:	de bf       	out	0x3e, r29	; 62
   18a60:	0f be       	out	0x3f, r0	; 63
   18a62:	cd bf       	out	0x3d, r28	; 61
   18a64:	2b 96       	adiw	r28, 0x0b	; 11
   18a66:	0f b6       	in	r0, 0x3f	; 63
   18a68:	f8 94       	cli
   18a6a:	de bf       	out	0x3e, r29	; 62
   18a6c:	0f be       	out	0x3f, r0	; 63
   18a6e:	cd bf       	out	0x3d, r28	; 61
   18a70:	df 91       	pop	r29
   18a72:	cf 91       	pop	r28
   18a74:	1f 91       	pop	r17
   18a76:	0f 91       	pop	r16
   18a78:	ef 90       	pop	r14
   18a7a:	df 90       	pop	r13
   18a7c:	cf 90       	pop	r12
   18a7e:	bf 90       	pop	r11
   18a80:	af 90       	pop	r10
   18a82:	8f 90       	pop	r8
   18a84:	7f 90       	pop	r7
   18a86:	6f 90       	pop	r6
   18a88:	4f 90       	pop	r4
   18a8a:	3f 90       	pop	r3
   18a8c:	2f 90       	pop	r2
   18a8e:	08 95       	ret

00018a90 <format_drives>:

/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   18a90:	2f 92       	push	r2
   18a92:	3f 92       	push	r3
   18a94:	4f 92       	push	r4
   18a96:	5f 92       	push	r5
   18a98:	6f 92       	push	r6
   18a9a:	7f 92       	push	r7
   18a9c:	8f 92       	push	r8
   18a9e:	af 92       	push	r10
   18aa0:	bf 92       	push	r11
   18aa2:	cf 92       	push	r12
   18aa4:	df 92       	push	r13
   18aa6:	ef 92       	push	r14
   18aa8:	ff 92       	push	r15
   18aaa:	0f 93       	push	r16
   18aac:	1f 93       	push	r17
   18aae:	cf 93       	push	r28
   18ab0:	df 93       	push	r29
   18ab2:	cd b7       	in	r28, 0x3d	; 61
   18ab4:	de b7       	in	r29, 0x3e	; 62
   18ab6:	cd 55       	subi	r28, 0x5D	; 93
   18ab8:	d1 09       	sbc	r29, r1
   18aba:	0f b6       	in	r0, 0x3f	; 63
   18abc:	f8 94       	cli
   18abe:	de bf       	out	0x3e, r29	; 62
   18ac0:	0f be       	out	0x3f, r0	; 63
   18ac2:	cd bf       	out	0x3d, r28	; 61
   18ac4:	8f e3       	ldi	r24, 0x3F	; 63
   18ac6:	a8 2e       	mov	r10, r24
   18ac8:	8f e1       	ldi	r24, 0x1F	; 31
   18aca:	b8 2e       	mov	r11, r24
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
    int amigo = 1;
   18acc:	21 e0       	ldi	r18, 0x01	; 1
   18ace:	30 e0       	ldi	r19, 0x00	; 0
   18ad0:	65 96       	adiw	r28, 0x15	; 21
   18ad2:	3f af       	std	Y+63, r19	; 0x3f
   18ad4:	2e af       	std	Y+62, r18	; 0x3e
   18ad6:	65 97       	sbiw	r28, 0x15	; 21
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
   18ad8:	81 e0       	ldi	r24, 0x01	; 1
   18ada:	90 e0       	ldi	r25, 0x00	; 0
   18adc:	63 96       	adiw	r28, 0x13	; 19
   18ade:	9f af       	std	Y+63, r25	; 0x3f
   18ae0:	8e af       	std	Y+62, r24	; 0x3e
   18ae2:	63 97       	sbiw	r28, 0x13	; 19
                }
                sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
                 * AMIGOp->GEOMETRY.HEADS
                 * AMIGOp->GEOMETRY.CYLINDERS;

                sprintf(label,"AMIGO%d", amigo);
   18ae4:	8f e9       	ldi	r24, 0x9F	; 159
   18ae6:	99 e2       	ldi	r25, 0x29	; 41
   18ae8:	9c 01       	movw	r18, r24
   18aea:	40 e0       	ldi	r20, 0x00	; 0
   18aec:	68 96       	adiw	r28, 0x18	; 24
   18aee:	2d af       	std	Y+61, r18	; 0x3d
   18af0:	3e af       	std	Y+62, r19	; 0x3e
   18af2:	4f af       	std	Y+63, r20	; 0x3f
   18af4:	68 97       	sbiw	r28, 0x18	; 24
   18af6:	2e 01       	movw	r4, r28
   18af8:	31 e3       	ldi	r19, 0x31	; 49
   18afa:	43 0e       	add	r4, r19
   18afc:	51 1c       	adc	r5, r1
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   18afe:	87 ea       	ldi	r24, 0xA7	; 167
   18b00:	99 e2       	ldi	r25, 0x29	; 41
   18b02:	9c 01       	movw	r18, r24
   18b04:	40 e0       	ldi	r20, 0x00	; 0
   18b06:	6b 96       	adiw	r28, 0x1b	; 27
   18b08:	2d af       	std	Y+61, r18	; 0x3d
   18b0a:	3e af       	std	Y+62, r19	; 0x3e
   18b0c:	4f af       	std	Y+63, r20	; 0x3f
   18b0e:	6b 97       	sbiw	r28, 0x1b	; 27
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER;
                sprintf(label,"SS80-%d", ss80);
   18b10:	89 ec       	ldi	r24, 0xC9	; 201
   18b12:	99 e2       	ldi	r25, 0x29	; 41
   18b14:	3c 01       	movw	r6, r24

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   18b16:	81 ed       	ldi	r24, 0xD1	; 209
   18b18:	99 e2       	ldi	r25, 0x29	; 41
   18b1a:	9c 01       	movw	r18, r24
   18b1c:	40 e0       	ldi	r20, 0x00	; 0
   18b1e:	6e 96       	adiw	r28, 0x1e	; 30
   18b20:	2d af       	std	Y+61, r18	; 0x3d
   18b22:	3e af       	std	Y+62, r19	; 0x3e
   18b24:	4f af       	std	Y+63, r20	; 0x3f
   18b26:	6e 97       	sbiw	r28, 0x1e	; 30
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   18b28:	f5 01       	movw	r30, r10
   18b2a:	80 81       	ld	r24, Z
   18b2c:	88 23       	and	r24, r24
   18b2e:	09 f4       	brne	.+2      	; 0x18b32 <format_drives+0xa2>
   18b30:	bc c0       	rjmp	.+376    	; 0x18caa <format_drives+0x21a>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   18b32:	82 30       	cpi	r24, 0x02	; 2
   18b34:	09 f0       	breq	.+2      	; 0x18b38 <format_drives+0xa8>
   18b36:	4c c0       	rjmp	.+152    	; 0x18bd0 <format_drives+0x140>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   18b38:	03 81       	ldd	r16, Z+3	; 0x03
   18b3a:	14 81       	ldd	r17, Z+4	; 0x04

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
   18b3c:	18 01       	movw	r2, r16
   18b3e:	f2 e0       	ldi	r31, 0x02	; 2
   18b40:	2f 0e       	add	r2, r31
   18b42:	31 1c       	adc	r3, r1
   18b44:	be 01       	movw	r22, r28
   18b46:	6f 5f       	subi	r22, 0xFF	; 255
   18b48:	7f 4f       	sbci	r23, 0xFF	; 255
   18b4a:	c1 01       	movw	r24, r2
   18b4c:	0e 94 24 7d 	call	0xfa48	; 0xfa48 <stat>
   18b50:	01 96       	adiw	r24, 0x01	; 1
   18b52:	a1 f5       	brne	.+104    	; 0x18bbc <format_drives+0x12c>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   18b54:	f8 01       	movw	r30, r16
   18b56:	87 a5       	ldd	r24, Z+47	; 0x2f
   18b58:	90 a9       	ldd	r25, Z+48	; 0x30
   18b5a:	81 15       	cp	r24, r1
   18b5c:	91 40       	sbci	r25, 0x01	; 1
   18b5e:	49 f0       	breq	.+18     	; 0x18b72 <format_drives+0xe2>
                {
                    printf("Can not use non 256 byte sectors\n");
   18b60:	1f 92       	push	r1
   18b62:	6d 96       	adiw	r28, 0x1d	; 29
   18b64:	2f ad       	ldd	r18, Y+63	; 0x3f
   18b66:	6d 97       	sbiw	r28, 0x1d	; 29
   18b68:	2f 93       	push	r18
   18b6a:	6c 96       	adiw	r28, 0x1c	; 28
   18b6c:	3f ad       	ldd	r19, Y+63	; 0x3f
   18b6e:	6c 97       	sbiw	r28, 0x1c	; 28
   18b70:	51 c0       	rjmp	.+162    	; 0x18c14 <format_drives+0x184>
                    continue;
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER;
   18b72:	f8 01       	movw	r30, r16
   18b74:	eb 5b       	subi	r30, 0xBB	; 187
   18b76:	ff 4f       	sbci	r31, 0xFF	; 255
   18b78:	c0 80       	ld	r12, Z
   18b7a:	d1 80       	ldd	r13, Z+1	; 0x01
   18b7c:	e2 80       	ldd	r14, Z+2	; 0x02
   18b7e:	f3 80       	ldd	r15, Z+3	; 0x03
                sprintf(label,"SS80-%d", ss80);
   18b80:	63 96       	adiw	r28, 0x13	; 19
   18b82:	4f ad       	ldd	r20, Y+63	; 0x3f
   18b84:	63 97       	sbiw	r28, 0x13	; 19
   18b86:	4f 93       	push	r20
   18b88:	62 96       	adiw	r28, 0x12	; 18
   18b8a:	8f ad       	ldd	r24, Y+63	; 0x3f
   18b8c:	62 97       	sbiw	r28, 0x12	; 18
   18b8e:	8f 93       	push	r24
   18b90:	1f 92       	push	r1
   18b92:	7f 92       	push	r7
   18b94:	6f 92       	push	r6
   18b96:	5f 92       	push	r5
   18b98:	4f 92       	push	r4
   18b9a:	0e 94 fa 44 	call	0x89f4	; 0x89f4 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   18b9e:	87 01       	movw	r16, r14
   18ba0:	76 01       	movw	r14, r12
   18ba2:	20 e8       	ldi	r18, 0x80	; 128
   18ba4:	30 e0       	ldi	r19, 0x00	; 0
   18ba6:	40 e0       	ldi	r20, 0x00	; 0
   18ba8:	50 e0       	ldi	r21, 0x00	; 0
   18baa:	b2 01       	movw	r22, r4
   18bac:	c1 01       	movw	r24, r2
   18bae:	0e 94 90 e4 	call	0x1c920	; 0x1c920 <lif_create_image>
   18bb2:	0f b6       	in	r0, 0x3f	; 63
   18bb4:	f8 94       	cli
   18bb6:	de bf       	out	0x3e, r29	; 62
   18bb8:	0f be       	out	0x3f, r0	; 63
   18bba:	cd bf       	out	0x3d, r28	; 61
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif

            }
            ss80++;
   18bbc:	63 96       	adiw	r28, 0x13	; 19
   18bbe:	2e ad       	ldd	r18, Y+62	; 0x3e
   18bc0:	3f ad       	ldd	r19, Y+63	; 0x3f
   18bc2:	63 97       	sbiw	r28, 0x13	; 19
   18bc4:	2f 5f       	subi	r18, 0xFF	; 255
   18bc6:	3f 4f       	sbci	r19, 0xFF	; 255
   18bc8:	63 96       	adiw	r28, 0x13	; 19
   18bca:	3f af       	std	Y+63, r19	; 0x3f
   18bcc:	2e af       	std	Y+62, r18	; 0x3e
   18bce:	63 97       	sbiw	r28, 0x13	; 19
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   18bd0:	f5 01       	movw	r30, r10
   18bd2:	80 81       	ld	r24, Z
   18bd4:	81 30       	cpi	r24, 0x01	; 1
   18bd6:	09 f0       	breq	.+2      	; 0x18bda <format_drives+0x14a>
   18bd8:	68 c0       	rjmp	.+208    	; 0x18caa <format_drives+0x21a>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   18bda:	03 81       	ldd	r16, Z+3	; 0x03
   18bdc:	14 81       	ldd	r17, Z+4	; 0x04
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
   18bde:	68 01       	movw	r12, r16
   18be0:	f2 e0       	ldi	r31, 0x02	; 2
   18be2:	cf 0e       	add	r12, r31
   18be4:	d1 1c       	adc	r13, r1
   18be6:	be 01       	movw	r22, r28
   18be8:	6f 5f       	subi	r22, 0xFF	; 255
   18bea:	7f 4f       	sbci	r23, 0xFF	; 255
   18bec:	c6 01       	movw	r24, r12
   18bee:	0e 94 24 7d 	call	0xfa48	; 0xfa48 <stat>
   18bf2:	01 96       	adiw	r24, 0x01	; 1
   18bf4:	09 f0       	breq	.+2      	; 0x18bf8 <format_drives+0x168>
   18bf6:	50 c0       	rjmp	.+160    	; 0x18c98 <format_drives+0x208>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   18bf8:	f8 01       	movw	r30, r16
   18bfa:	85 a1       	ldd	r24, Z+37	; 0x25
   18bfc:	96 a1       	ldd	r25, Z+38	; 0x26
   18bfe:	81 15       	cp	r24, r1
   18c00:	91 40       	sbci	r25, 0x01	; 1
   18c02:	79 f0       	breq	.+30     	; 0x18c22 <format_drives+0x192>
                {
                    printf("Can not use non 256 byte sectors\n");
   18c04:	1f 92       	push	r1
   18c06:	6a 96       	adiw	r28, 0x1a	; 26
   18c08:	2f ad       	ldd	r18, Y+63	; 0x3f
   18c0a:	6a 97       	sbiw	r28, 0x1a	; 26
   18c0c:	2f 93       	push	r18
   18c0e:	69 96       	adiw	r28, 0x19	; 25
   18c10:	3f ad       	ldd	r19, Y+63	; 0x3f
   18c12:	69 97       	sbiw	r28, 0x19	; 25
   18c14:	3f 93       	push	r19
   18c16:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
                    continue;
   18c1a:	0f 90       	pop	r0
   18c1c:	0f 90       	pop	r0
   18c1e:	0f 90       	pop	r0
   18c20:	44 c0       	rjmp	.+136    	; 0x18caa <format_drives+0x21a>
                }
                sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
                 * AMIGOp->GEOMETRY.HEADS
                 * AMIGOp->GEOMETRY.CYLINDERS;
   18c22:	f8 01       	movw	r30, r16
   18c24:	47 a1       	ldd	r20, Z+39	; 0x27
   18c26:	50 a5       	ldd	r21, Z+40	; 0x28
   18c28:	81 a5       	ldd	r24, Z+41	; 0x29
   18c2a:	92 a5       	ldd	r25, Z+42	; 0x2a
   18c2c:	48 9f       	mul	r20, r24
   18c2e:	90 01       	movw	r18, r0
   18c30:	49 9f       	mul	r20, r25
   18c32:	30 0d       	add	r19, r0
   18c34:	58 9f       	mul	r21, r24
   18c36:	30 0d       	add	r19, r0
   18c38:	11 24       	eor	r1, r1
   18c3a:	83 a5       	ldd	r24, Z+43	; 0x2b
   18c3c:	94 a5       	ldd	r25, Z+44	; 0x2c
   18c3e:	28 9f       	mul	r18, r24
   18c40:	70 01       	movw	r14, r0
   18c42:	29 9f       	mul	r18, r25
   18c44:	f0 0c       	add	r15, r0
   18c46:	38 9f       	mul	r19, r24
   18c48:	f0 0c       	add	r15, r0
   18c4a:	11 24       	eor	r1, r1

                sprintf(label,"AMIGO%d", amigo);
   18c4c:	65 96       	adiw	r28, 0x15	; 21
   18c4e:	ff ad       	ldd	r31, Y+63	; 0x3f
   18c50:	65 97       	sbiw	r28, 0x15	; 21
   18c52:	ff 93       	push	r31
   18c54:	64 96       	adiw	r28, 0x14	; 20
   18c56:	2f ad       	ldd	r18, Y+63	; 0x3f
   18c58:	64 97       	sbiw	r28, 0x14	; 20
   18c5a:	2f 93       	push	r18
   18c5c:	1f 92       	push	r1
   18c5e:	67 96       	adiw	r28, 0x17	; 23
   18c60:	3f ad       	ldd	r19, Y+63	; 0x3f
   18c62:	67 97       	sbiw	r28, 0x17	; 23
   18c64:	3f 93       	push	r19
   18c66:	66 96       	adiw	r28, 0x16	; 22
   18c68:	4f ad       	ldd	r20, Y+63	; 0x3f
   18c6a:	66 97       	sbiw	r28, 0x16	; 22
   18c6c:	4f 93       	push	r20
   18c6e:	5f 92       	push	r5
   18c70:	4f 92       	push	r4
   18c72:	0e 94 fa 44 	call	0x89f4	; 0x89f4 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   18c76:	0f 2c       	mov	r0, r15
   18c78:	00 0c       	add	r0, r0
   18c7a:	00 0b       	sbc	r16, r16
   18c7c:	11 0b       	sbc	r17, r17
   18c7e:	2f e0       	ldi	r18, 0x0F	; 15
   18c80:	30 e0       	ldi	r19, 0x00	; 0
   18c82:	40 e0       	ldi	r20, 0x00	; 0
   18c84:	50 e0       	ldi	r21, 0x00	; 0
   18c86:	b2 01       	movw	r22, r4
   18c88:	c6 01       	movw	r24, r12
   18c8a:	0e 94 90 e4 	call	0x1c920	; 0x1c920 <lif_create_image>
   18c8e:	0f b6       	in	r0, 0x3f	; 63
   18c90:	f8 94       	cli
   18c92:	de bf       	out	0x3e, r29	; 62
   18c94:	0f be       	out	0x3f, r0	; 63
   18c96:	cd bf       	out	0x3d, r28	; 61
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
            }
            amigo++;
   18c98:	65 96       	adiw	r28, 0x15	; 21
   18c9a:	ee ad       	ldd	r30, Y+62	; 0x3e
   18c9c:	ff ad       	ldd	r31, Y+63	; 0x3f
   18c9e:	65 97       	sbiw	r28, 0x15	; 21
   18ca0:	31 96       	adiw	r30, 0x01	; 1
   18ca2:	65 96       	adiw	r28, 0x15	; 21
   18ca4:	ff af       	std	Y+63, r31	; 0x3f
   18ca6:	ee af       	std	Y+62, r30	; 0x3e
   18ca8:	65 97       	sbiw	r28, 0x15	; 21
   18caa:	f7 e0       	ldi	r31, 0x07	; 7
   18cac:	af 0e       	add	r10, r31
   18cae:	b1 1c       	adc	r11, r1
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   18cb0:	27 e7       	ldi	r18, 0x77	; 119
   18cb2:	3f e1       	ldi	r19, 0x1F	; 31
   18cb4:	2a 15       	cp	r18, r10
   18cb6:	3b 05       	cpc	r19, r11
   18cb8:	09 f0       	breq	.+2      	; 0x18cbc <format_drives+0x22c>
   18cba:	36 cf       	rjmp	.-404    	; 0x18b28 <format_drives+0x98>
            }
            amigo++;
        } 
#endif // #ifdef AMIGO
    }
    printf("\n");
   18cbc:	8d e9       	ldi	r24, 0x9D	; 157
   18cbe:	99 e2       	ldi	r25, 0x29	; 41
   18cc0:	1f 92       	push	r1
   18cc2:	9f 93       	push	r25
   18cc4:	8f 93       	push	r24
   18cc6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
}
   18cca:	0f 90       	pop	r0
   18ccc:	0f 90       	pop	r0
   18cce:	0f 90       	pop	r0
   18cd0:	c3 5a       	subi	r28, 0xA3	; 163
   18cd2:	df 4f       	sbci	r29, 0xFF	; 255
   18cd4:	0f b6       	in	r0, 0x3f	; 63
   18cd6:	f8 94       	cli
   18cd8:	de bf       	out	0x3e, r29	; 62
   18cda:	0f be       	out	0x3f, r0	; 63
   18cdc:	cd bf       	out	0x3d, r28	; 61
   18cde:	df 91       	pop	r29
   18ce0:	cf 91       	pop	r28
   18ce2:	1f 91       	pop	r17
   18ce4:	0f 91       	pop	r16
   18ce6:	ff 90       	pop	r15
   18ce8:	ef 90       	pop	r14
   18cea:	df 90       	pop	r13
   18cec:	cf 90       	pop	r12
   18cee:	bf 90       	pop	r11
   18cf0:	af 90       	pop	r10
   18cf2:	8f 90       	pop	r8
   18cf4:	7f 90       	pop	r7
   18cf6:	6f 90       	pop	r6
   18cf8:	5f 90       	pop	r5
   18cfa:	4f 90       	pop	r4
   18cfc:	3f 90       	pop	r3
   18cfe:	2f 90       	pop	r2
   18d00:	08 95       	ret

00018d02 <controller_send_str>:
/// @param[in] to:      GPIB listener
/// @param[in] str: string to send
/// @param[in] len: number of bytes to send (if 0 then length of string)
/// @return  number of bytes sent
int controller_send_str(uint8_t from, uint8_t to, char *str, int len)
{
   18d02:	a2 e0       	ldi	r26, 0x02	; 2
   18d04:	b0 e0       	ldi	r27, 0x00	; 0
   18d06:	e7 e8       	ldi	r30, 0x87	; 135
   18d08:	f6 ec       	ldi	r31, 0xC6	; 198
   18d0a:	0c 94 99 e9 	jmp	0x1d332	; 0x1d332 <__prologue_saves__+0x14>
   18d0e:	e8 2e       	mov	r14, r24
   18d10:	f6 2e       	mov	r15, r22
   18d12:	6a 01       	movw	r12, r20
   18d14:	89 01       	movw	r16, r18
    uint16_t status = 0;
   18d16:	1a 82       	std	Y+2, r1	; 0x02
   18d18:	19 82       	std	Y+1, r1	; 0x01
    int size;
    if(len == 0)
   18d1a:	23 2b       	or	r18, r19
   18d1c:	41 f4       	brne	.+16     	; 0x18d2e <controller_send_str+0x2c>
        len = strlen((char *)str);
   18d1e:	fa 01       	movw	r30, r20
   18d20:	01 90       	ld	r0, Z+
   18d22:	00 20       	and	r0, r0
   18d24:	e9 f7       	brne	.-6      	; 0x18d20 <controller_send_str+0x1e>
   18d26:	31 97       	sbiw	r30, 0x01	; 1
   18d28:	8f 01       	movw	r16, r30
   18d2a:	04 1b       	sub	r16, r20
   18d2c:	15 0b       	sbc	r17, r21

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   18d2e:	8f e5       	ldi	r24, 0x5F	; 95
   18d30:	94 e0       	ldi	r25, 0x04	; 4
   18d32:	0e 94 13 8d 	call	0x11a26	; 0x11a26 <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   18d36:	8f e3       	ldi	r24, 0x3F	; 63
   18d38:	94 e0       	ldi	r25, 0x04	; 4
   18d3a:	0e 94 13 8d 	call	0x11a26	; 0x11a26 <gpib_write_byte>

    gpib_write_byte(0x40 | from | ATN_FLAG);// GPIB talker
   18d3e:	8e 2d       	mov	r24, r14
   18d40:	80 64       	ori	r24, 0x40	; 64
   18d42:	90 e0       	ldi	r25, 0x00	; 0
   18d44:	94 60       	ori	r25, 0x04	; 4
   18d46:	0e 94 13 8d 	call	0x11a26	; 0x11a26 <gpib_write_byte>
    gpib_write_byte(0x20 | to | ATN_FLAG);  // GPIB listener
   18d4a:	8f 2d       	mov	r24, r15
   18d4c:	80 62       	ori	r24, 0x20	; 32
   18d4e:	90 e0       	ldi	r25, 0x00	; 0
   18d50:	94 60       	ori	r25, 0x04	; 4
   18d52:	0e 94 13 8d 	call	0x11a26	; 0x11a26 <gpib_write_byte>

    status = EOI_FLAG;
   18d56:	80 e0       	ldi	r24, 0x00	; 0
   18d58:	91 e0       	ldi	r25, 0x01	; 1
   18d5a:	9a 83       	std	Y+2, r25	; 0x02
   18d5c:	89 83       	std	Y+1, r24	; 0x01
    size = gpib_write_str((uint8_t *)str, len, &status);
   18d5e:	ae 01       	movw	r20, r28
   18d60:	4f 5f       	subi	r20, 0xFF	; 255
   18d62:	5f 4f       	sbci	r21, 0xFF	; 255
   18d64:	b8 01       	movw	r22, r16
   18d66:	c6 01       	movw	r24, r12
   18d68:	0e 94 9c 91 	call	0x12338	; 0x12338 <gpib_write_str>
   18d6c:	8c 01       	movw	r16, r24

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   18d6e:	8f e5       	ldi	r24, 0x5F	; 95
   18d70:	94 e0       	ldi	r25, 0x04	; 4
   18d72:	0e 94 13 8d 	call	0x11a26	; 0x11a26 <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   18d76:	8f e3       	ldi	r24, 0x3F	; 63
   18d78:	94 e0       	ldi	r25, 0x04	; 4
   18d7a:	0e 94 13 8d 	call	0x11a26	; 0x11a26 <gpib_write_byte>
    return(size);
}
   18d7e:	c8 01       	movw	r24, r16
   18d80:	22 96       	adiw	r28, 0x02	; 2
   18d82:	e8 e0       	ldi	r30, 0x08	; 8
   18d84:	0c 94 b5 e9 	jmp	0x1d36a	; 0x1d36a <__epilogue_restores__+0x14>

00018d88 <controller_read_str>:
/// @param[in] to:      GPIB listener
/// @param[in] str: string to read
/// @param[in] len: maximum number of bytes to read
/// @return  number of bytes read
int controller_read_str(uint8_t from, uint8_t to, char *str, int len)
{
   18d88:	a2 e0       	ldi	r26, 0x02	; 2
   18d8a:	b0 e0       	ldi	r27, 0x00	; 0
   18d8c:	ea ec       	ldi	r30, 0xCA	; 202
   18d8e:	f6 ec       	ldi	r31, 0xC6	; 198
   18d90:	0c 94 99 e9 	jmp	0x1d332	; 0x1d332 <__prologue_saves__+0x14>
   18d94:	c8 2e       	mov	r12, r24
   18d96:	d6 2e       	mov	r13, r22
   18d98:	7a 01       	movw	r14, r20
   18d9a:	89 01       	movw	r16, r18
    uint16_t status;
    int size;

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   18d9c:	8f e5       	ldi	r24, 0x5F	; 95
   18d9e:	94 e0       	ldi	r25, 0x04	; 4
   18da0:	0e 94 13 8d 	call	0x11a26	; 0x11a26 <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   18da4:	8f e3       	ldi	r24, 0x3F	; 63
   18da6:	94 e0       	ldi	r25, 0x04	; 4
   18da8:	0e 94 13 8d 	call	0x11a26	; 0x11a26 <gpib_write_byte>

    gpib_write_byte(0x40 | from | ATN_FLAG);    // GPIB talker
   18dac:	8c 2d       	mov	r24, r12
   18dae:	80 64       	ori	r24, 0x40	; 64
   18db0:	90 e0       	ldi	r25, 0x00	; 0
   18db2:	94 60       	ori	r25, 0x04	; 4
   18db4:	0e 94 13 8d 	call	0x11a26	; 0x11a26 <gpib_write_byte>
    gpib_write_byte(0x20 | to | ATN_FLAG);      // GPIB listener
   18db8:	8d 2d       	mov	r24, r13
   18dba:	80 62       	ori	r24, 0x20	; 32
   18dbc:	90 e0       	ldi	r25, 0x00	; 0
   18dbe:	94 60       	ori	r25, 0x04	; 4
   18dc0:	0e 94 13 8d 	call	0x11a26	; 0x11a26 <gpib_write_byte>

    status = EOI_FLAG;
   18dc4:	80 e0       	ldi	r24, 0x00	; 0
   18dc6:	91 e0       	ldi	r25, 0x01	; 1
   18dc8:	9a 83       	std	Y+2, r25	; 0x02
   18dca:	89 83       	std	Y+1, r24	; 0x01
    size = gpib_read_str((uint8_t *)str,len, &status);
   18dcc:	ae 01       	movw	r20, r28
   18dce:	4f 5f       	subi	r20, 0xFF	; 255
   18dd0:	5f 4f       	sbci	r21, 0xFF	; 255
   18dd2:	b8 01       	movw	r22, r16
   18dd4:	c7 01       	movw	r24, r14
   18dd6:	0e 94 ee 90 	call	0x121dc	; 0x121dc <gpib_read_str>
   18dda:	6c 01       	movw	r12, r24
    if(size > 0)
   18ddc:	18 16       	cp	r1, r24
   18dde:	19 06       	cpc	r1, r25
   18de0:	64 f4       	brge	.+24     	; 0x18dfa <controller_read_str+0x72>
    {
        if(size < len)
   18de2:	80 17       	cp	r24, r16
   18de4:	91 07       	cpc	r25, r17
   18de6:	24 f4       	brge	.+8      	; 0x18df0 <controller_read_str+0x68>
            str[size] = 0;
   18de8:	f7 01       	movw	r30, r14
   18dea:	e8 0f       	add	r30, r24
   18dec:	f9 1f       	adc	r31, r25
   18dee:	04 c0       	rjmp	.+8      	; 0x18df8 <controller_read_str+0x70>
        else
            str[len-1] = 0;
   18df0:	0e 0d       	add	r16, r14
   18df2:	1f 1d       	adc	r17, r15
   18df4:	f8 01       	movw	r30, r16
   18df6:	31 97       	sbiw	r30, 0x01	; 1
   18df8:	10 82       	st	Z, r1
    }

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   18dfa:	8f e5       	ldi	r24, 0x5F	; 95
   18dfc:	94 e0       	ldi	r25, 0x04	; 4
   18dfe:	0e 94 13 8d 	call	0x11a26	; 0x11a26 <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   18e02:	8f e3       	ldi	r24, 0x3F	; 63
   18e04:	94 e0       	ldi	r25, 0x04	; 4
   18e06:	0e 94 13 8d 	call	0x11a26	; 0x11a26 <gpib_write_byte>
    return(size);
}
   18e0a:	c6 01       	movw	r24, r12
   18e0c:	22 96       	adiw	r28, 0x02	; 2
   18e0e:	e8 e0       	ldi	r30, 0x08	; 8
   18e10:	0c 94 b5 e9 	jmp	0x1d36a	; 0x1d36a <__epilogue_restores__+0x14>

00018e14 <controller_read_trace>:
/// Stops reading at EOI
/// @param[in] from:    GPIB talker
/// @param[in] to:      GPIB listener
/// @return  number of bytes read
int controller_read_trace(uint8_t from, uint8_t to)
{
   18e14:	cf 92       	push	r12
   18e16:	df 92       	push	r13
   18e18:	ef 92       	push	r14
   18e1a:	ff 92       	push	r15
   18e1c:	cf 93       	push	r28
   18e1e:	df 93       	push	r29
   18e20:	d8 2f       	mov	r29, r24
   18e22:	c6 2f       	mov	r28, r22
    uint16_t ch;
    long len =0;

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   18e24:	8f e5       	ldi	r24, 0x5F	; 95
   18e26:	94 e0       	ldi	r25, 0x04	; 4
   18e28:	0e 94 13 8d 	call	0x11a26	; 0x11a26 <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   18e2c:	8f e3       	ldi	r24, 0x3F	; 63
   18e2e:	94 e0       	ldi	r25, 0x04	; 4
   18e30:	0e 94 13 8d 	call	0x11a26	; 0x11a26 <gpib_write_byte>

    gpib_write_byte(0x40 | from | ATN_FLAG);    // GPIB talker
   18e34:	d0 64       	ori	r29, 0x40	; 64
   18e36:	8d 2f       	mov	r24, r29
   18e38:	90 e0       	ldi	r25, 0x00	; 0
   18e3a:	94 60       	ori	r25, 0x04	; 4
   18e3c:	0e 94 13 8d 	call	0x11a26	; 0x11a26 <gpib_write_byte>
    gpib_write_byte(0x20 | to | ATN_FLAG);      // GPIB listener
   18e40:	c0 62       	ori	r28, 0x20	; 32
   18e42:	8c 2f       	mov	r24, r28
   18e44:	90 e0       	ldi	r25, 0x00	; 0
   18e46:	94 60       	ori	r25, 0x04	; 4
   18e48:	0e 94 13 8d 	call	0x11a26	; 0x11a26 <gpib_write_byte>
/// @param[in] to:      GPIB listener
/// @return  number of bytes read
int controller_read_trace(uint8_t from, uint8_t to)
{
    uint16_t ch;
    long len =0;
   18e4c:	c1 2c       	mov	r12, r1
   18e4e:	d1 2c       	mov	r13, r1
   18e50:	76 01       	movw	r14, r12
    gpib_write_byte(0x40 | from | ATN_FLAG);    // GPIB talker
    gpib_write_byte(0x20 | to | ATN_FLAG);      // GPIB listener

    while(1) // loop until EOI or user ABORT
    {
        if(uart_keyhit(0))
   18e52:	80 e0       	ldi	r24, 0x00	; 0
   18e54:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <uart_keyhit>
   18e58:	89 2b       	or	r24, r25
   18e5a:	79 f4       	brne	.+30     	; 0x18e7a <controller_read_trace+0x66>
            break;
        ch = gpib_read_byte(0);
   18e5c:	80 e0       	ldi	r24, 0x00	; 0
   18e5e:	90 e0       	ldi	r25, 0x00	; 0
   18e60:	0e 94 14 90 	call	0x12028	; 0x12028 <gpib_read_byte>
   18e64:	ec 01       	movw	r28, r24
        gpib_decode(ch);
   18e66:	0e 94 ea 90 	call	0x121d4	; 0x121d4 <gpib_decode>
       if(ch & EOI_FLAG)
   18e6a:	d0 fd       	sbrc	r29, 0
   18e6c:	06 c0       	rjmp	.+12     	; 0x18e7a <controller_read_trace+0x66>
            break;
        ++len;
   18e6e:	8f ef       	ldi	r24, 0xFF	; 255
   18e70:	c8 1a       	sub	r12, r24
   18e72:	d8 0a       	sbc	r13, r24
   18e74:	e8 0a       	sbc	r14, r24
   18e76:	f8 0a       	sbc	r15, r24
    }
   18e78:	ec cf       	rjmp	.-40     	; 0x18e52 <controller_read_trace+0x3e>

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   18e7a:	8f e5       	ldi	r24, 0x5F	; 95
   18e7c:	94 e0       	ldi	r25, 0x04	; 4
   18e7e:	0e 94 13 8d 	call	0x11a26	; 0x11a26 <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   18e82:	8f e3       	ldi	r24, 0x3F	; 63
   18e84:	94 e0       	ldi	r25, 0x04	; 4
   18e86:	0e 94 13 8d 	call	0x11a26	; 0x11a26 <gpib_write_byte>
    return(len);
}
   18e8a:	c6 01       	movw	r24, r12
   18e8c:	df 91       	pop	r29
   18e8e:	cf 91       	pop	r28
   18e90:	ff 90       	pop	r15
   18e92:	ef 90       	pop	r14
   18e94:	df 90       	pop	r13
   18e96:	cf 90       	pop	r12
   18e98:	08 95       	ret

00018e9a <lif_help>:
   18e9a:	cf 93       	push	r28
   18e9c:	df 93       	push	r29
   18e9e:	ec 01       	movw	r28, r24
   18ea0:	85 e1       	ldi	r24, 0x15	; 21
   18ea2:	96 e4       	ldi	r25, 0x46	; 70
   18ea4:	1f 92       	push	r1
   18ea6:	9f 93       	push	r25
   18ea8:	8f 93       	push	r24
   18eaa:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18eae:	0f 90       	pop	r0
   18eb0:	0f 90       	pop	r0
   18eb2:	0f 90       	pop	r0
   18eb4:	cd 2b       	or	r28, r29
   18eb6:	51 f0       	breq	.+20     	; 0x18ecc <lif_help+0x32>
   18eb8:	80 e7       	ldi	r24, 0x70	; 112
   18eba:	94 e4       	ldi	r25, 0x44	; 68
   18ebc:	1f 92       	push	r1
   18ebe:	9f 93       	push	r25
   18ec0:	8f 93       	push	r24
   18ec2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18ec6:	0f 90       	pop	r0
   18ec8:	0f 90       	pop	r0
   18eca:	0f 90       	pop	r0
   18ecc:	df 91       	pop	r29
   18ece:	cf 91       	pop	r28
   18ed0:	08 95       	ret

00018ed2 <lif_calloc>:
   18ed2:	ef 92       	push	r14
   18ed4:	ff 92       	push	r15
   18ed6:	0f 93       	push	r16
   18ed8:	1f 93       	push	r17
   18eda:	cf 93       	push	r28
   18edc:	df 93       	push	r29
   18ede:	16 2f       	mov	r17, r22
   18ee0:	07 2f       	mov	r16, r23
   18ee2:	f8 2e       	mov	r15, r24
   18ee4:	e9 2e       	mov	r14, r25
   18ee6:	61 e0       	ldi	r22, 0x01	; 1
   18ee8:	70 e0       	ldi	r23, 0x00	; 0
   18eea:	81 2f       	mov	r24, r17
   18eec:	90 2f       	mov	r25, r16
   18eee:	0e 94 ca 29 	call	0x5394	; 0x5394 <safecalloc>
   18ef2:	ec 01       	movw	r28, r24
   18ef4:	89 2b       	or	r24, r25
   18ef6:	99 f4       	brne	.+38     	; 0x18f1e <lif_calloc+0x4c>
   18ef8:	ef 92       	push	r14
   18efa:	ff 92       	push	r15
   18efc:	0f 93       	push	r16
   18efe:	1f 93       	push	r17
   18f00:	87 e4       	ldi	r24, 0x47	; 71
   18f02:	94 e4       	ldi	r25, 0x44	; 68
   18f04:	1f 92       	push	r1
   18f06:	9f 93       	push	r25
   18f08:	8f 93       	push	r24
   18f0a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18f0e:	8d b7       	in	r24, 0x3d	; 61
   18f10:	9e b7       	in	r25, 0x3e	; 62
   18f12:	07 96       	adiw	r24, 0x07	; 7
   18f14:	0f b6       	in	r0, 0x3f	; 63
   18f16:	f8 94       	cli
   18f18:	9e bf       	out	0x3e, r25	; 62
   18f1a:	0f be       	out	0x3f, r0	; 63
   18f1c:	8d bf       	out	0x3d, r24	; 61
   18f1e:	ce 01       	movw	r24, r28
   18f20:	cd b7       	in	r28, 0x3d	; 61
   18f22:	de b7       	in	r29, 0x3e	; 62
   18f24:	e6 e0       	ldi	r30, 0x06	; 6
   18f26:	0c 94 b7 e9 	jmp	0x1d36e	; 0x1d36e <__epilogue_restores__+0x18>

00018f2a <lif_free>:
   18f2a:	00 97       	sbiw	r24, 0x00	; 0
   18f2c:	59 f4       	brne	.+22     	; 0x18f44 <lif_free+0x1a>
   18f2e:	8f e2       	ldi	r24, 0x2F	; 47
   18f30:	94 e4       	ldi	r25, 0x44	; 68
   18f32:	1f 92       	push	r1
   18f34:	9f 93       	push	r25
   18f36:	8f 93       	push	r24
   18f38:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18f3c:	0f 90       	pop	r0
   18f3e:	0f 90       	pop	r0
   18f40:	0f 90       	pop	r0
   18f42:	08 95       	ret
   18f44:	0c 94 13 2a 	jmp	0x5426	; 0x5426 <safefree>
   18f48:	08 95       	ret

00018f4a <lif_stralloc>:
   18f4a:	0f 93       	push	r16
   18f4c:	1f 93       	push	r17
   18f4e:	cf 93       	push	r28
   18f50:	df 93       	push	r29
   18f52:	ec 01       	movw	r28, r24
   18f54:	fc 01       	movw	r30, r24
   18f56:	01 90       	ld	r0, Z+
   18f58:	00 20       	and	r0, r0
   18f5a:	e9 f7       	brne	.-6      	; 0x18f56 <lif_stralloc+0xc>
   18f5c:	bf 01       	movw	r22, r30
   18f5e:	68 1b       	sub	r22, r24
   18f60:	79 0b       	sbc	r23, r25
   18f62:	6d 5f       	subi	r22, 0xFD	; 253
   18f64:	7f 4f       	sbci	r23, 0xFF	; 255
   18f66:	07 2e       	mov	r0, r23
   18f68:	00 0c       	add	r0, r0
   18f6a:	88 0b       	sbc	r24, r24
   18f6c:	99 0b       	sbc	r25, r25
   18f6e:	b1 df       	rcall	.-158    	; 0x18ed2 <lif_calloc>
   18f70:	8c 01       	movw	r16, r24
   18f72:	00 97       	sbiw	r24, 0x00	; 0
   18f74:	19 f0       	breq	.+6      	; 0x18f7c <lif_stralloc+0x32>
   18f76:	be 01       	movw	r22, r28
   18f78:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <strcpy>
   18f7c:	c8 01       	movw	r24, r16
   18f7e:	df 91       	pop	r29
   18f80:	cf 91       	pop	r28
   18f82:	1f 91       	pop	r17
   18f84:	0f 91       	pop	r16
   18f86:	08 95       	ret

00018f88 <lif_open>:
   18f88:	ef 92       	push	r14
   18f8a:	ff 92       	push	r15
   18f8c:	0f 93       	push	r16
   18f8e:	1f 93       	push	r17
   18f90:	cf 93       	push	r28
   18f92:	df 93       	push	r29
   18f94:	18 2f       	mov	r17, r24
   18f96:	09 2f       	mov	r16, r25
   18f98:	f6 2e       	mov	r15, r22
   18f9a:	e7 2e       	mov	r14, r23
   18f9c:	0e 94 10 82 	call	0x10420	; 0x10420 <fopen>
   18fa0:	ec 01       	movw	r28, r24
   18fa2:	89 2b       	or	r24, r25
   18fa4:	99 f4       	brne	.+38     	; 0x18fcc <lif_open+0x44>
   18fa6:	ef 92       	push	r14
   18fa8:	ff 92       	push	r15
   18faa:	0f 93       	push	r16
   18fac:	1f 93       	push	r17
   18fae:	8a e0       	ldi	r24, 0x0A	; 10
   18fb0:	94 e4       	ldi	r25, 0x44	; 68
   18fb2:	1f 92       	push	r1
   18fb4:	9f 93       	push	r25
   18fb6:	8f 93       	push	r24
   18fb8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   18fbc:	8d b7       	in	r24, 0x3d	; 61
   18fbe:	9e b7       	in	r25, 0x3e	; 62
   18fc0:	07 96       	adiw	r24, 0x07	; 7
   18fc2:	0f b6       	in	r0, 0x3f	; 63
   18fc4:	f8 94       	cli
   18fc6:	9e bf       	out	0x3e, r25	; 62
   18fc8:	0f be       	out	0x3f, r0	; 63
   18fca:	8d bf       	out	0x3d, r24	; 61
   18fcc:	ce 01       	movw	r24, r28
   18fce:	cd b7       	in	r28, 0x3d	; 61
   18fd0:	de b7       	in	r29, 0x3e	; 62
   18fd2:	e6 e0       	ldi	r30, 0x06	; 6
   18fd4:	0c 94 b7 e9 	jmp	0x1d36e	; 0x1d36e <__epilogue_restores__+0x18>

00018fd8 <lif_stat>:
   18fd8:	0f 93       	push	r16
   18fda:	1f 93       	push	r17
   18fdc:	cf 93       	push	r28
   18fde:	df 93       	push	r29
   18fe0:	18 2f       	mov	r17, r24
   18fe2:	09 2f       	mov	r16, r25
   18fe4:	d6 2f       	mov	r29, r22
   18fe6:	c7 2f       	mov	r28, r23
   18fe8:	0e 94 24 7d 	call	0xfa48	; 0xfa48 <stat>
   18fec:	97 ff       	sbrs	r25, 7
   18fee:	11 c0       	rjmp	.+34     	; 0x19012 <lif_stat+0x3a>
   18ff0:	0f 93       	push	r16
   18ff2:	1f 93       	push	r17
   18ff4:	81 ef       	ldi	r24, 0xF1	; 241
   18ff6:	93 e4       	ldi	r25, 0x43	; 67
   18ff8:	1f 92       	push	r1
   18ffa:	9f 93       	push	r25
   18ffc:	8f 93       	push	r24
   18ffe:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19002:	0f 90       	pop	r0
   19004:	0f 90       	pop	r0
   19006:	0f 90       	pop	r0
   19008:	0f 90       	pop	r0
   1900a:	0f 90       	pop	r0
   1900c:	80 e0       	ldi	r24, 0x00	; 0
   1900e:	90 e0       	ldi	r25, 0x00	; 0
   19010:	02 c0       	rjmp	.+4      	; 0x19016 <lif_stat+0x3e>
   19012:	8d 2f       	mov	r24, r29
   19014:	9c 2f       	mov	r25, r28
   19016:	df 91       	pop	r29
   19018:	cf 91       	pop	r28
   1901a:	1f 91       	pop	r17
   1901c:	0f 91       	pop	r16
   1901e:	08 95       	ret

00019020 <lif_seek_msg>:
   19020:	a0 e0       	ldi	r26, 0x00	; 0
   19022:	b0 e0       	ldi	r27, 0x00	; 0
   19024:	e6 e1       	ldi	r30, 0x16	; 22
   19026:	f8 ec       	ldi	r31, 0xC8	; 200
   19028:	0c 94 99 e9 	jmp	0x1d332	; 0x1d332 <__prologue_saves__+0x14>
   1902c:	ec 01       	movw	r28, r24
   1902e:	6a 01       	movw	r12, r20
   19030:	7b 01       	movw	r14, r22
   19032:	12 2f       	mov	r17, r18
   19034:	03 2f       	mov	r16, r19
   19036:	0e 94 50 7e 	call	0xfca0	; 0xfca0 <ftell>
   1903a:	6c 15       	cp	r22, r12
   1903c:	7d 05       	cpc	r23, r13
   1903e:	8e 05       	cpc	r24, r14
   19040:	9f 05       	cpc	r25, r15
   19042:	19 f4       	brne	.+6      	; 0x1904a <lif_seek_msg+0x2a>
   19044:	81 e0       	ldi	r24, 0x01	; 1
   19046:	90 e0       	ldi	r25, 0x00	; 0
   19048:	20 c0       	rjmp	.+64     	; 0x1908a <lif_seek_msg+0x6a>
   1904a:	20 e0       	ldi	r18, 0x00	; 0
   1904c:	30 e0       	ldi	r19, 0x00	; 0
   1904e:	b7 01       	movw	r22, r14
   19050:	a6 01       	movw	r20, r12
   19052:	ce 01       	movw	r24, r28
   19054:	0e 94 d2 7e 	call	0xfda4	; 0xfda4 <fseek>
   19058:	97 ff       	sbrs	r25, 7
   1905a:	f4 cf       	rjmp	.-24     	; 0x19044 <lif_seek_msg+0x24>
   1905c:	ff 92       	push	r15
   1905e:	ef 92       	push	r14
   19060:	df 92       	push	r13
   19062:	cf 92       	push	r12
   19064:	0f 93       	push	r16
   19066:	1f 93       	push	r17
   19068:	80 ed       	ldi	r24, 0xD0	; 208
   1906a:	93 e4       	ldi	r25, 0x43	; 67
   1906c:	1f 92       	push	r1
   1906e:	9f 93       	push	r25
   19070:	8f 93       	push	r24
   19072:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19076:	8d b7       	in	r24, 0x3d	; 61
   19078:	9e b7       	in	r25, 0x3e	; 62
   1907a:	09 96       	adiw	r24, 0x09	; 9
   1907c:	0f b6       	in	r0, 0x3f	; 63
   1907e:	f8 94       	cli
   19080:	9e bf       	out	0x3e, r25	; 62
   19082:	0f be       	out	0x3f, r0	; 63
   19084:	8d bf       	out	0x3d, r24	; 61
   19086:	80 e0       	ldi	r24, 0x00	; 0
   19088:	90 e0       	ldi	r25, 0x00	; 0
   1908a:	cd b7       	in	r28, 0x3d	; 61
   1908c:	de b7       	in	r29, 0x3e	; 62
   1908e:	e8 e0       	ldi	r30, 0x08	; 8
   19090:	0c 94 b5 e9 	jmp	0x1d36a	; 0x1d36a <__epilogue_restores__+0x14>

00019094 <lif_read>:
   19094:	a0 e0       	ldi	r26, 0x00	; 0
   19096:	b0 e0       	ldi	r27, 0x00	; 0
   19098:	e0 e5       	ldi	r30, 0x50	; 80
   1909a:	f8 ec       	ldi	r31, 0xC8	; 200
   1909c:	0c 94 95 e9 	jmp	0x1d32a	; 0x1d32a <__prologue_saves__+0xc>
   190a0:	ec 01       	movw	r28, r24
   190a2:	7b 01       	movw	r14, r22
   190a4:	b2 2e       	mov	r11, r18
   190a6:	a3 2e       	mov	r10, r19
   190a8:	94 2e       	mov	r9, r20
   190aa:	85 2e       	mov	r8, r21
   190ac:	28 81       	ld	r18, Y
   190ae:	39 81       	ldd	r19, Y+1	; 0x01
   190b0:	4b 2d       	mov	r20, r11
   190b2:	5a 2d       	mov	r21, r10
   190b4:	69 2d       	mov	r22, r9
   190b6:	78 2d       	mov	r23, r8
   190b8:	8a 81       	ldd	r24, Y+2	; 0x02
   190ba:	9b 81       	ldd	r25, Y+3	; 0x03
   190bc:	b1 df       	rcall	.-158    	; 0x19020 <lif_seek_msg>
   190be:	89 2b       	or	r24, r25
   190c0:	b9 f1       	breq	.+110    	; 0x19130 <lif_read+0x9c>
   190c2:	2a 81       	ldd	r18, Y+2	; 0x02
   190c4:	3b 81       	ldd	r19, Y+3	; 0x03
   190c6:	a8 01       	movw	r20, r16
   190c8:	61 e0       	ldi	r22, 0x01	; 1
   190ca:	70 e0       	ldi	r23, 0x00	; 0
   190cc:	c7 01       	movw	r24, r14
   190ce:	0e 94 66 7f 	call	0xfecc	; 0xfecc <fread>
   190d2:	6c 01       	movw	r12, r24
   190d4:	e1 2c       	mov	r14, r1
   190d6:	f1 2c       	mov	r15, r1
   190d8:	b8 01       	movw	r22, r16
   190da:	01 2e       	mov	r0, r17
   190dc:	00 0c       	add	r0, r0
   190de:	88 0b       	sbc	r24, r24
   190e0:	99 0b       	sbc	r25, r25
   190e2:	c6 16       	cp	r12, r22
   190e4:	d7 06       	cpc	r13, r23
   190e6:	e8 06       	cpc	r14, r24
   190e8:	f9 06       	cpc	r15, r25
   190ea:	41 f1       	breq	.+80     	; 0x1913c <lif_read+0xa8>
   190ec:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   190f0:	80 ff       	sbrs	r24, 0
   190f2:	22 c0       	rjmp	.+68     	; 0x19138 <lif_read+0xa4>
   190f4:	1f 93       	push	r17
   190f6:	0f 93       	push	r16
   190f8:	1f 92       	push	r1
   190fa:	1f 92       	push	r1
   190fc:	df 92       	push	r13
   190fe:	cf 92       	push	r12
   19100:	8f 92       	push	r8
   19102:	9f 92       	push	r9
   19104:	af 92       	push	r10
   19106:	bf 92       	push	r11
   19108:	89 81       	ldd	r24, Y+1	; 0x01
   1910a:	8f 93       	push	r24
   1910c:	88 81       	ld	r24, Y
   1910e:	8f 93       	push	r24
   19110:	84 e9       	ldi	r24, 0x94	; 148
   19112:	93 e4       	ldi	r25, 0x43	; 67
   19114:	1f 92       	push	r1
   19116:	9f 93       	push	r25
   19118:	8f 93       	push	r24
   1911a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1911e:	8d b7       	in	r24, 0x3d	; 61
   19120:	9e b7       	in	r25, 0x3e	; 62
   19122:	0f 96       	adiw	r24, 0x0f	; 15
   19124:	0f b6       	in	r0, 0x3f	; 63
   19126:	f8 94       	cli
   19128:	9e bf       	out	0x3e, r25	; 62
   1912a:	0f be       	out	0x3f, r0	; 63
   1912c:	8d bf       	out	0x3d, r24	; 61
   1912e:	04 c0       	rjmp	.+8      	; 0x19138 <lif_read+0xa4>
   19130:	60 e0       	ldi	r22, 0x00	; 0
   19132:	70 e0       	ldi	r23, 0x00	; 0
   19134:	cb 01       	movw	r24, r22
   19136:	02 c0       	rjmp	.+4      	; 0x1913c <lif_read+0xa8>
   19138:	c7 01       	movw	r24, r14
   1913a:	b6 01       	movw	r22, r12
   1913c:	cd b7       	in	r28, 0x3d	; 61
   1913e:	de b7       	in	r29, 0x3e	; 62
   19140:	ec e0       	ldi	r30, 0x0C	; 12
   19142:	0c 94 b1 e9 	jmp	0x1d362	; 0x1d362 <__epilogue_restores__+0xc>

00019146 <lif_write>:
   19146:	a0 e0       	ldi	r26, 0x00	; 0
   19148:	b0 e0       	ldi	r27, 0x00	; 0
   1914a:	e9 ea       	ldi	r30, 0xA9	; 169
   1914c:	f8 ec       	ldi	r31, 0xC8	; 200
   1914e:	0c 94 97 e9 	jmp	0x1d32e	; 0x1d32e <__prologue_saves__+0x10>
   19152:	7c 01       	movw	r14, r24
   19154:	eb 01       	movw	r28, r22
   19156:	d2 2e       	mov	r13, r18
   19158:	c3 2e       	mov	r12, r19
   1915a:	b4 2e       	mov	r11, r20
   1915c:	a5 2e       	mov	r10, r21
   1915e:	fc 01       	movw	r30, r24
   19160:	20 81       	ld	r18, Z
   19162:	31 81       	ldd	r19, Z+1	; 0x01
   19164:	4d 2d       	mov	r20, r13
   19166:	5c 2d       	mov	r21, r12
   19168:	6b 2d       	mov	r22, r11
   1916a:	7a 2d       	mov	r23, r10
   1916c:	82 81       	ldd	r24, Z+2	; 0x02
   1916e:	93 81       	ldd	r25, Z+3	; 0x03
   19170:	57 df       	rcall	.-338    	; 0x19020 <lif_seek_msg>
   19172:	00 97       	sbiw	r24, 0x00	; 0
   19174:	89 f1       	breq	.+98     	; 0x191d8 <lif_write+0x92>
   19176:	f7 01       	movw	r30, r14
   19178:	22 81       	ldd	r18, Z+2	; 0x02
   1917a:	33 81       	ldd	r19, Z+3	; 0x03
   1917c:	a8 01       	movw	r20, r16
   1917e:	61 e0       	ldi	r22, 0x01	; 1
   19180:	70 e0       	ldi	r23, 0x00	; 0
   19182:	ce 01       	movw	r24, r28
   19184:	0e 94 38 80 	call	0x10070	; 0x10070 <fwrite>
   19188:	ec 01       	movw	r28, r24
   1918a:	08 17       	cp	r16, r24
   1918c:	19 07       	cpc	r17, r25
   1918e:	09 f1       	breq	.+66     	; 0x191d2 <lif_write+0x8c>
   19190:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   19194:	80 ff       	sbrs	r24, 0
   19196:	1f c0       	rjmp	.+62     	; 0x191d6 <lif_write+0x90>
   19198:	1f 93       	push	r17
   1919a:	0f 93       	push	r16
   1919c:	df 93       	push	r29
   1919e:	cf 93       	push	r28
   191a0:	af 92       	push	r10
   191a2:	bf 92       	push	r11
   191a4:	cf 92       	push	r12
   191a6:	df 92       	push	r13
   191a8:	f7 01       	movw	r30, r14
   191aa:	81 81       	ldd	r24, Z+1	; 0x01
   191ac:	8f 93       	push	r24
   191ae:	80 81       	ld	r24, Z
   191b0:	8f 93       	push	r24
   191b2:	87 e5       	ldi	r24, 0x57	; 87
   191b4:	93 e4       	ldi	r25, 0x43	; 67
   191b6:	1f 92       	push	r1
   191b8:	9f 93       	push	r25
   191ba:	8f 93       	push	r24
   191bc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   191c0:	8d b7       	in	r24, 0x3d	; 61
   191c2:	9e b7       	in	r25, 0x3e	; 62
   191c4:	0d 96       	adiw	r24, 0x0d	; 13
   191c6:	0f b6       	in	r0, 0x3f	; 63
   191c8:	f8 94       	cli
   191ca:	9e bf       	out	0x3e, r25	; 62
   191cc:	0f be       	out	0x3f, r0	; 63
   191ce:	8d bf       	out	0x3d, r24	; 61
   191d0:	02 c0       	rjmp	.+4      	; 0x191d6 <lif_write+0x90>
   191d2:	c8 01       	movw	r24, r16
   191d4:	01 c0       	rjmp	.+2      	; 0x191d8 <lif_write+0x92>
   191d6:	ce 01       	movw	r24, r28
   191d8:	cd b7       	in	r28, 0x3d	; 61
   191da:	de b7       	in	r29, 0x3e	; 62
   191dc:	ea e0       	ldi	r30, 0x0A	; 10
   191de:	0c 94 b3 e9 	jmp	0x1d366	; 0x1d366 <__epilogue_restores__+0x10>

000191e2 <lif_chars>:
   191e2:	80 32       	cpi	r24, 0x20	; 32
   191e4:	91 05       	cpc	r25, r1
   191e6:	e1 f0       	breq	.+56     	; 0x19220 <lif_chars+0x3e>
   191e8:	9c 01       	movw	r18, r24
   191ea:	21 56       	subi	r18, 0x61	; 97
   191ec:	31 09       	sbc	r19, r1
   191ee:	2a 31       	cpi	r18, 0x1A	; 26
   191f0:	31 05       	cpc	r19, r1
   191f2:	10 f4       	brcc	.+4      	; 0x191f8 <lif_chars+0x16>
   191f4:	80 97       	sbiw	r24, 0x20	; 32
   191f6:	08 95       	ret
   191f8:	9c 01       	movw	r18, r24
   191fa:	21 54       	subi	r18, 0x41	; 65
   191fc:	31 09       	sbc	r19, r1
   191fe:	2a 31       	cpi	r18, 0x1A	; 26
   19200:	31 05       	cpc	r19, r1
   19202:	c8 f0       	brcs	.+50     	; 0x19236 <lif_chars+0x54>
   19204:	16 16       	cp	r1, r22
   19206:	17 06       	cpc	r1, r23
   19208:	74 f4       	brge	.+28     	; 0x19226 <lif_chars+0x44>
   1920a:	2f 5e       	subi	r18, 0xEF	; 239
   1920c:	3f 4f       	sbci	r19, 0xFF	; 255
   1920e:	2a 30       	cpi	r18, 0x0A	; 10
   19210:	31 05       	cpc	r19, r1
   19212:	88 f0       	brcs	.+34     	; 0x19236 <lif_chars+0x54>
   19214:	8f 35       	cpi	r24, 0x5F	; 95
   19216:	91 05       	cpc	r25, r1
   19218:	49 f0       	breq	.+18     	; 0x1922c <lif_chars+0x4a>
   1921a:	8d 97       	sbiw	r24, 0x2d	; 45
   1921c:	21 f4       	brne	.+8      	; 0x19226 <lif_chars+0x44>
   1921e:	09 c0       	rjmp	.+18     	; 0x19232 <lif_chars+0x50>
   19220:	80 e2       	ldi	r24, 0x20	; 32
   19222:	90 e0       	ldi	r25, 0x00	; 0
   19224:	08 95       	ret
   19226:	80 e0       	ldi	r24, 0x00	; 0
   19228:	90 e0       	ldi	r25, 0x00	; 0
   1922a:	08 95       	ret
   1922c:	8f e5       	ldi	r24, 0x5F	; 95
   1922e:	90 e0       	ldi	r25, 0x00	; 0
   19230:	08 95       	ret
   19232:	8d e2       	ldi	r24, 0x2D	; 45
   19234:	90 e0       	ldi	r25, 0x00	; 0
   19236:	08 95       	ret

00019238 <lif_B2S>:
   19238:	a0 e0       	ldi	r26, 0x00	; 0
   1923a:	b0 e0       	ldi	r27, 0x00	; 0
   1923c:	e2 e2       	ldi	r30, 0x22	; 34
   1923e:	f9 ec       	ldi	r31, 0xC9	; 201
   19240:	0c 94 95 e9 	jmp	0x1d32a	; 0x1d32a <__prologue_saves__+0xc>
   19244:	5c 01       	movw	r10, r24
   19246:	6b 01       	movw	r12, r22
   19248:	ea 01       	movw	r28, r20
   1924a:	4c 01       	movw	r8, r24
   1924c:	ee 24       	eor	r14, r14
   1924e:	e3 94       	inc	r14
   19250:	f1 2c       	mov	r15, r1
   19252:	00 e0       	ldi	r16, 0x00	; 0
   19254:	10 e0       	ldi	r17, 0x00	; 0
   19256:	0c 17       	cp	r16, r28
   19258:	1d 07       	cpc	r17, r29
   1925a:	6c f4       	brge	.+26     	; 0x19276 <lif_B2S+0x3e>
   1925c:	f4 01       	movw	r30, r8
   1925e:	81 91       	ld	r24, Z+
   19260:	4f 01       	movw	r8, r30
   19262:	b8 01       	movw	r22, r16
   19264:	90 e0       	ldi	r25, 0x00	; 0
   19266:	bd df       	rcall	.-134    	; 0x191e2 <lif_chars>
   19268:	89 2b       	or	r24, r25
   1926a:	11 f4       	brne	.+4      	; 0x19270 <lif_B2S+0x38>
   1926c:	e1 2c       	mov	r14, r1
   1926e:	f1 2c       	mov	r15, r1
   19270:	0f 5f       	subi	r16, 0xFF	; 255
   19272:	1f 4f       	sbci	r17, 0xFF	; 255
   19274:	f0 cf       	rjmp	.-32     	; 0x19256 <lif_B2S+0x1e>
   19276:	d6 01       	movw	r26, r12
   19278:	f5 01       	movw	r30, r10
   1927a:	cf 01       	movw	r24, r30
   1927c:	8a 19       	sub	r24, r10
   1927e:	9b 09       	sbc	r25, r11
   19280:	8c 17       	cp	r24, r28
   19282:	9d 07       	cpc	r25, r29
   19284:	1c f4       	brge	.+6      	; 0x1928c <lif_B2S+0x54>
   19286:	81 91       	ld	r24, Z+
   19288:	8d 93       	st	X+, r24
   1928a:	f7 cf       	rjmp	.-18     	; 0x1927a <lif_B2S+0x42>
   1928c:	d7 ff       	sbrs	r29, 7
   1928e:	02 c0       	rjmp	.+4      	; 0x19294 <lif_B2S+0x5c>
   19290:	c0 e0       	ldi	r28, 0x00	; 0
   19292:	d0 e0       	ldi	r29, 0x00	; 0
   19294:	cc 0d       	add	r28, r12
   19296:	dd 1d       	adc	r29, r13
   19298:	18 82       	st	Y, r1
   1929a:	c6 01       	movw	r24, r12
   1929c:	0e 94 b5 30 	call	0x616a	; 0x616a <trim_tail>
   192a0:	c7 01       	movw	r24, r14
   192a2:	cd b7       	in	r28, 0x3d	; 61
   192a4:	de b7       	in	r29, 0x3e	; 62
   192a6:	ec e0       	ldi	r30, 0x0C	; 12
   192a8:	0c 94 b1 e9 	jmp	0x1d362	; 0x1d362 <__epilogue_restores__+0xc>

000192ac <lif_checkname>:
   192ac:	ef 92       	push	r14
   192ae:	ff 92       	push	r15
   192b0:	0f 93       	push	r16
   192b2:	1f 93       	push	r17
   192b4:	cf 93       	push	r28
   192b6:	df 93       	push	r29
   192b8:	7c 01       	movw	r14, r24
   192ba:	ec 01       	movw	r28, r24
   192bc:	01 e0       	ldi	r16, 0x01	; 1
   192be:	10 e0       	ldi	r17, 0x00	; 0
   192c0:	be 01       	movw	r22, r28
   192c2:	6e 19       	sub	r22, r14
   192c4:	7f 09       	sbc	r23, r15
   192c6:	89 91       	ld	r24, Y+
   192c8:	88 23       	and	r24, r24
   192ca:	39 f0       	breq	.+14     	; 0x192da <lif_checkname+0x2e>
   192cc:	90 e0       	ldi	r25, 0x00	; 0
   192ce:	89 df       	rcall	.-238    	; 0x191e2 <lif_chars>
   192d0:	89 2b       	or	r24, r25
   192d2:	b1 f7       	brne	.-20     	; 0x192c0 <lif_checkname+0x14>
   192d4:	00 e0       	ldi	r16, 0x00	; 0
   192d6:	10 e0       	ldi	r17, 0x00	; 0
   192d8:	f3 cf       	rjmp	.-26     	; 0x192c0 <lif_checkname+0x14>
   192da:	c8 01       	movw	r24, r16
   192dc:	cd b7       	in	r28, 0x3d	; 61
   192de:	de b7       	in	r29, 0x3e	; 62
   192e0:	e6 e0       	ldi	r30, 0x06	; 6
   192e2:	0c 94 b7 e9 	jmp	0x1d36e	; 0x1d36e <__epilogue_restores__+0x18>

000192e6 <lif_S2B>:
   192e6:	fb 01       	movw	r30, r22
   192e8:	dc 01       	movw	r26, r24
   192ea:	20 e0       	ldi	r18, 0x00	; 0
   192ec:	30 e0       	ldi	r19, 0x00	; 0
   192ee:	61 91       	ld	r22, Z+
   192f0:	61 11       	cpse	r22, r1
   192f2:	05 c0       	rjmp	.+10     	; 0x192fe <lif_S2B+0x18>
   192f4:	fc 01       	movw	r30, r24
   192f6:	e2 0f       	add	r30, r18
   192f8:	f3 1f       	adc	r31, r19
   192fa:	60 e2       	ldi	r22, 0x20	; 32
   192fc:	08 c0       	rjmp	.+16     	; 0x1930e <lif_S2B+0x28>
   192fe:	24 17       	cp	r18, r20
   19300:	35 07       	cpc	r19, r21
   19302:	24 f4       	brge	.+8      	; 0x1930c <lif_S2B+0x26>
   19304:	6d 93       	st	X+, r22
   19306:	2f 5f       	subi	r18, 0xFF	; 255
   19308:	3f 4f       	sbci	r19, 0xFF	; 255
   1930a:	f1 cf       	rjmp	.-30     	; 0x192ee <lif_S2B+0x8>
   1930c:	08 95       	ret
   1930e:	9f 01       	movw	r18, r30
   19310:	28 1b       	sub	r18, r24
   19312:	39 0b       	sbc	r19, r25
   19314:	24 17       	cp	r18, r20
   19316:	35 07       	cpc	r19, r21
   19318:	14 f4       	brge	.+4      	; 0x1931e <lif_S2B+0x38>
   1931a:	61 93       	st	Z+, r22
   1931c:	f8 cf       	rjmp	.-16     	; 0x1930e <lif_S2B+0x28>
   1931e:	08 95       	ret

00019320 <lif_fixname>:
   19320:	a0 e0       	ldi	r26, 0x00	; 0
   19322:	b0 e0       	ldi	r27, 0x00	; 0
   19324:	e6 e9       	ldi	r30, 0x96	; 150
   19326:	f9 ec       	ldi	r31, 0xC9	; 201
   19328:	0c 94 98 e9 	jmp	0x1d330	; 0x1d330 <__prologue_saves__+0x12>
   1932c:	8c 01       	movw	r16, r24
   1932e:	cb 01       	movw	r24, r22
   19330:	7a 01       	movw	r14, r20
   19332:	0e 94 86 7a 	call	0xf50c	; 0xf50c <basename>
   19336:	6c 01       	movw	r12, r24
   19338:	e8 01       	movw	r28, r16
   1933a:	80 e2       	ldi	r24, 0x20	; 32
   1933c:	b8 2e       	mov	r11, r24
   1933e:	be 01       	movw	r22, r28
   19340:	60 1b       	sub	r22, r16
   19342:	71 0b       	sbc	r23, r17
   19344:	f6 01       	movw	r30, r12
   19346:	81 91       	ld	r24, Z+
   19348:	6f 01       	movw	r12, r30
   1934a:	81 11       	cpse	r24, r1
   1934c:	02 c0       	rjmp	.+4      	; 0x19352 <lif_fixname+0x32>
   1934e:	20 e2       	ldi	r18, 0x20	; 32
   19350:	0e c0       	rjmp	.+28     	; 0x1936e <lif_fixname+0x4e>
   19352:	1e 14       	cp	r1, r14
   19354:	1f 04       	cpc	r1, r15
   19356:	dc f7       	brge	.-10     	; 0x1934e <lif_fixname+0x2e>
   19358:	8e 32       	cpi	r24, 0x2E	; 46
   1935a:	c9 f3       	breq	.-14     	; 0x1934e <lif_fixname+0x2e>
   1935c:	90 e0       	ldi	r25, 0x00	; 0
   1935e:	41 df       	rcall	.-382    	; 0x191e2 <lif_chars>
   19360:	88 23       	and	r24, r24
   19362:	11 f0       	breq	.+4      	; 0x19368 <lif_fixname+0x48>
   19364:	88 83       	st	Y, r24
   19366:	01 c0       	rjmp	.+2      	; 0x1936a <lif_fixname+0x4a>
   19368:	b8 82       	st	Y, r11
   1936a:	21 96       	adiw	r28, 0x01	; 1
   1936c:	e8 cf       	rjmp	.-48     	; 0x1933e <lif_fixname+0x1e>
   1936e:	ce 01       	movw	r24, r28
   19370:	80 1b       	sub	r24, r16
   19372:	91 0b       	sbc	r25, r17
   19374:	8e 15       	cp	r24, r14
   19376:	9f 05       	cpc	r25, r15
   19378:	14 f4       	brge	.+4      	; 0x1937e <lif_fixname+0x5e>
   1937a:	29 93       	st	Y+, r18
   1937c:	f8 cf       	rjmp	.-16     	; 0x1936e <lif_fixname+0x4e>
   1937e:	18 82       	st	Y, r1
   19380:	f8 01       	movw	r30, r16
   19382:	01 90       	ld	r0, Z+
   19384:	00 20       	and	r0, r0
   19386:	e9 f7       	brne	.-6      	; 0x19382 <lif_fixname+0x62>
   19388:	cf 01       	movw	r24, r30
   1938a:	01 97       	sbiw	r24, 0x01	; 1
   1938c:	80 1b       	sub	r24, r16
   1938e:	91 0b       	sbc	r25, r17
   19390:	cd b7       	in	r28, 0x3d	; 61
   19392:	de b7       	in	r29, 0x3e	; 62
   19394:	e9 e0       	ldi	r30, 0x09	; 9
   19396:	0c 94 b4 e9 	jmp	0x1d368	; 0x1d368 <__epilogue_restores__+0x12>

0001939a <lif_vol2str>:
   1939a:	ef 92       	push	r14
   1939c:	ff 92       	push	r15
   1939e:	0f 93       	push	r16
   193a0:	1f 93       	push	r17
   193a2:	cf 93       	push	r28
   193a4:	df 93       	push	r29
   193a6:	7c 01       	movw	r14, r24
   193a8:	eb 01       	movw	r28, r22
   193aa:	fc 01       	movw	r30, r24
   193ac:	04 a1       	ldd	r16, Z+36	; 0x24
   193ae:	15 a1       	ldd	r17, Z+37	; 0x25
   193b0:	20 e0       	ldi	r18, 0x00	; 0
   193b2:	30 e0       	ldi	r19, 0x00	; 0
   193b4:	42 e0       	ldi	r20, 0x02	; 2
   193b6:	50 e0       	ldi	r21, 0x00	; 0
   193b8:	60 e0       	ldi	r22, 0x00	; 0
   193ba:	70 e0       	ldi	r23, 0x00	; 0
   193bc:	ce 01       	movw	r24, r28
   193be:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   193c2:	b7 01       	movw	r22, r14
   193c4:	6a 5d       	subi	r22, 0xDA	; 218
   193c6:	7f 4f       	sbci	r23, 0xFF	; 255
   193c8:	46 e0       	ldi	r20, 0x06	; 6
   193ca:	50 e0       	ldi	r21, 0x00	; 0
   193cc:	ce 01       	movw	r24, r28
   193ce:	02 96       	adiw	r24, 0x02	; 2
   193d0:	8a df       	rcall	.-236    	; 0x192e6 <lif_S2B>
   193d2:	f7 01       	movw	r30, r14
   193d4:	05 a5       	ldd	r16, Z+45	; 0x2d
   193d6:	16 a5       	ldd	r17, Z+46	; 0x2e
   193d8:	27 a5       	ldd	r18, Z+47	; 0x2f
   193da:	30 a9       	ldd	r19, Z+48	; 0x30
   193dc:	44 e0       	ldi	r20, 0x04	; 4
   193de:	50 e0       	ldi	r21, 0x00	; 0
   193e0:	68 e0       	ldi	r22, 0x08	; 8
   193e2:	70 e0       	ldi	r23, 0x00	; 0
   193e4:	ce 01       	movw	r24, r28
   193e6:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   193ea:	f7 01       	movw	r30, r14
   193ec:	01 a9       	ldd	r16, Z+49	; 0x31
   193ee:	12 a9       	ldd	r17, Z+50	; 0x32
   193f0:	20 e0       	ldi	r18, 0x00	; 0
   193f2:	30 e0       	ldi	r19, 0x00	; 0
   193f4:	42 e0       	ldi	r20, 0x02	; 2
   193f6:	50 e0       	ldi	r21, 0x00	; 0
   193f8:	6c e0       	ldi	r22, 0x0C	; 12
   193fa:	70 e0       	ldi	r23, 0x00	; 0
   193fc:	ce 01       	movw	r24, r28
   193fe:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   19402:	00 e0       	ldi	r16, 0x00	; 0
   19404:	10 e0       	ldi	r17, 0x00	; 0
   19406:	98 01       	movw	r18, r16
   19408:	42 e0       	ldi	r20, 0x02	; 2
   1940a:	50 e0       	ldi	r21, 0x00	; 0
   1940c:	6e e0       	ldi	r22, 0x0E	; 14
   1940e:	70 e0       	ldi	r23, 0x00	; 0
   19410:	ce 01       	movw	r24, r28
   19412:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   19416:	f7 01       	movw	r30, r14
   19418:	05 a9       	ldd	r16, Z+53	; 0x35
   1941a:	16 a9       	ldd	r17, Z+54	; 0x36
   1941c:	27 a9       	ldd	r18, Z+55	; 0x37
   1941e:	30 ad       	ldd	r19, Z+56	; 0x38
   19420:	44 e0       	ldi	r20, 0x04	; 4
   19422:	50 e0       	ldi	r21, 0x00	; 0
   19424:	60 e1       	ldi	r22, 0x10	; 16
   19426:	70 e0       	ldi	r23, 0x00	; 0
   19428:	ce 01       	movw	r24, r28
   1942a:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   1942e:	f7 01       	movw	r30, r14
   19430:	01 ad       	ldd	r16, Z+57	; 0x39
   19432:	12 ad       	ldd	r17, Z+58	; 0x3a
   19434:	20 e0       	ldi	r18, 0x00	; 0
   19436:	30 e0       	ldi	r19, 0x00	; 0
   19438:	42 e0       	ldi	r20, 0x02	; 2
   1943a:	50 e0       	ldi	r21, 0x00	; 0
   1943c:	64 e1       	ldi	r22, 0x14	; 20
   1943e:	70 e0       	ldi	r23, 0x00	; 0
   19440:	ce 01       	movw	r24, r28
   19442:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   19446:	00 e0       	ldi	r16, 0x00	; 0
   19448:	10 e0       	ldi	r17, 0x00	; 0
   1944a:	98 01       	movw	r18, r16
   1944c:	42 e0       	ldi	r20, 0x02	; 2
   1944e:	50 e0       	ldi	r21, 0x00	; 0
   19450:	66 e1       	ldi	r22, 0x16	; 22
   19452:	70 e0       	ldi	r23, 0x00	; 0
   19454:	ce 01       	movw	r24, r28
   19456:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   1945a:	f7 01       	movw	r30, r14
   1945c:	fd 96       	adiw	r30, 0x3d	; 61
   1945e:	00 81       	ld	r16, Z
   19460:	11 81       	ldd	r17, Z+1	; 0x01
   19462:	22 81       	ldd	r18, Z+2	; 0x02
   19464:	33 81       	ldd	r19, Z+3	; 0x03
   19466:	44 e0       	ldi	r20, 0x04	; 4
   19468:	50 e0       	ldi	r21, 0x00	; 0
   1946a:	68 e1       	ldi	r22, 0x18	; 24
   1946c:	70 e0       	ldi	r23, 0x00	; 0
   1946e:	ce 01       	movw	r24, r28
   19470:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   19474:	f7 01       	movw	r30, r14
   19476:	ef 5b       	subi	r30, 0xBF	; 191
   19478:	ff 4f       	sbci	r31, 0xFF	; 255
   1947a:	00 81       	ld	r16, Z
   1947c:	11 81       	ldd	r17, Z+1	; 0x01
   1947e:	22 81       	ldd	r18, Z+2	; 0x02
   19480:	33 81       	ldd	r19, Z+3	; 0x03
   19482:	44 e0       	ldi	r20, 0x04	; 4
   19484:	50 e0       	ldi	r21, 0x00	; 0
   19486:	6c e1       	ldi	r22, 0x1C	; 28
   19488:	70 e0       	ldi	r23, 0x00	; 0
   1948a:	ce 01       	movw	r24, r28
   1948c:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   19490:	f7 01       	movw	r30, r14
   19492:	eb 5b       	subi	r30, 0xBB	; 187
   19494:	ff 4f       	sbci	r31, 0xFF	; 255
   19496:	00 81       	ld	r16, Z
   19498:	11 81       	ldd	r17, Z+1	; 0x01
   1949a:	22 81       	ldd	r18, Z+2	; 0x02
   1949c:	33 81       	ldd	r19, Z+3	; 0x03
   1949e:	44 e0       	ldi	r20, 0x04	; 4
   194a0:	50 e0       	ldi	r21, 0x00	; 0
   194a2:	60 e2       	ldi	r22, 0x20	; 32
   194a4:	70 e0       	ldi	r23, 0x00	; 0
   194a6:	ce 01       	movw	r24, r28
   194a8:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   194ac:	de 01       	movw	r26, r28
   194ae:	94 96       	adiw	r26, 0x24	; 36
   194b0:	f7 01       	movw	r30, r14
   194b2:	e7 5b       	subi	r30, 0xB7	; 183
   194b4:	ff 4f       	sbci	r31, 0xFF	; 255
   194b6:	86 e0       	ldi	r24, 0x06	; 6
   194b8:	01 90       	ld	r0, Z+
   194ba:	0d 92       	st	X+, r0
   194bc:	8a 95       	dec	r24
   194be:	e1 f7       	brne	.-8      	; 0x194b8 <lif_vol2str+0x11e>
   194c0:	cd b7       	in	r28, 0x3d	; 61
   194c2:	de b7       	in	r29, 0x3e	; 62
   194c4:	e6 e0       	ldi	r30, 0x06	; 6
   194c6:	0c 94 b7 e9 	jmp	0x1d36e	; 0x1d36e <__epilogue_restores__+0x18>

000194ca <lif_str2vol>:
   194ca:	0f 93       	push	r16
   194cc:	1f 93       	push	r17
   194ce:	cf 93       	push	r28
   194d0:	df 93       	push	r29
   194d2:	8c 01       	movw	r16, r24
   194d4:	eb 01       	movw	r28, r22
   194d6:	42 e0       	ldi	r20, 0x02	; 2
   194d8:	50 e0       	ldi	r21, 0x00	; 0
   194da:	60 e0       	ldi	r22, 0x00	; 0
   194dc:	70 e0       	ldi	r23, 0x00	; 0
   194de:	0e 94 40 b5 	call	0x16a80	; 0x16a80 <B2V_MSB>
   194e2:	7d a3       	std	Y+37, r23	; 0x25
   194e4:	6c a3       	std	Y+36, r22	; 0x24
   194e6:	be 01       	movw	r22, r28
   194e8:	6a 5d       	subi	r22, 0xDA	; 218
   194ea:	7f 4f       	sbci	r23, 0xFF	; 255
   194ec:	46 e0       	ldi	r20, 0x06	; 6
   194ee:	50 e0       	ldi	r21, 0x00	; 0
   194f0:	c8 01       	movw	r24, r16
   194f2:	02 96       	adiw	r24, 0x02	; 2
   194f4:	a1 de       	rcall	.-702    	; 0x19238 <lif_B2S>
   194f6:	44 e0       	ldi	r20, 0x04	; 4
   194f8:	50 e0       	ldi	r21, 0x00	; 0
   194fa:	68 e0       	ldi	r22, 0x08	; 8
   194fc:	70 e0       	ldi	r23, 0x00	; 0
   194fe:	c8 01       	movw	r24, r16
   19500:	0e 94 40 b5 	call	0x16a80	; 0x16a80 <B2V_MSB>
   19504:	6d a7       	std	Y+45, r22	; 0x2d
   19506:	7e a7       	std	Y+46, r23	; 0x2e
   19508:	8f a7       	std	Y+47, r24	; 0x2f
   1950a:	98 ab       	std	Y+48, r25	; 0x30
   1950c:	42 e0       	ldi	r20, 0x02	; 2
   1950e:	50 e0       	ldi	r21, 0x00	; 0
   19510:	6c e0       	ldi	r22, 0x0C	; 12
   19512:	70 e0       	ldi	r23, 0x00	; 0
   19514:	c8 01       	movw	r24, r16
   19516:	0e 94 40 b5 	call	0x16a80	; 0x16a80 <B2V_MSB>
   1951a:	7a ab       	std	Y+50, r23	; 0x32
   1951c:	69 ab       	std	Y+49, r22	; 0x31
   1951e:	42 e0       	ldi	r20, 0x02	; 2
   19520:	50 e0       	ldi	r21, 0x00	; 0
   19522:	6e e0       	ldi	r22, 0x0E	; 14
   19524:	70 e0       	ldi	r23, 0x00	; 0
   19526:	c8 01       	movw	r24, r16
   19528:	0e 94 40 b5 	call	0x16a80	; 0x16a80 <B2V_MSB>
   1952c:	7c ab       	std	Y+52, r23	; 0x34
   1952e:	6b ab       	std	Y+51, r22	; 0x33
   19530:	44 e0       	ldi	r20, 0x04	; 4
   19532:	50 e0       	ldi	r21, 0x00	; 0
   19534:	60 e1       	ldi	r22, 0x10	; 16
   19536:	70 e0       	ldi	r23, 0x00	; 0
   19538:	c8 01       	movw	r24, r16
   1953a:	0e 94 40 b5 	call	0x16a80	; 0x16a80 <B2V_MSB>
   1953e:	6d ab       	std	Y+53, r22	; 0x35
   19540:	7e ab       	std	Y+54, r23	; 0x36
   19542:	8f ab       	std	Y+55, r24	; 0x37
   19544:	98 af       	std	Y+56, r25	; 0x38
   19546:	42 e0       	ldi	r20, 0x02	; 2
   19548:	50 e0       	ldi	r21, 0x00	; 0
   1954a:	64 e1       	ldi	r22, 0x14	; 20
   1954c:	70 e0       	ldi	r23, 0x00	; 0
   1954e:	c8 01       	movw	r24, r16
   19550:	0e 94 40 b5 	call	0x16a80	; 0x16a80 <B2V_MSB>
   19554:	7a af       	std	Y+58, r23	; 0x3a
   19556:	69 af       	std	Y+57, r22	; 0x39
   19558:	42 e0       	ldi	r20, 0x02	; 2
   1955a:	50 e0       	ldi	r21, 0x00	; 0
   1955c:	66 e1       	ldi	r22, 0x16	; 22
   1955e:	70 e0       	ldi	r23, 0x00	; 0
   19560:	c8 01       	movw	r24, r16
   19562:	0e 94 40 b5 	call	0x16a80	; 0x16a80 <B2V_MSB>
   19566:	7c af       	std	Y+60, r23	; 0x3c
   19568:	6b af       	std	Y+59, r22	; 0x3b
   1956a:	44 e0       	ldi	r20, 0x04	; 4
   1956c:	50 e0       	ldi	r21, 0x00	; 0
   1956e:	68 e1       	ldi	r22, 0x18	; 24
   19570:	70 e0       	ldi	r23, 0x00	; 0
   19572:	c8 01       	movw	r24, r16
   19574:	0e 94 40 b5 	call	0x16a80	; 0x16a80 <B2V_MSB>
   19578:	fe 01       	movw	r30, r28
   1957a:	fd 96       	adiw	r30, 0x3d	; 61
   1957c:	60 83       	st	Z, r22
   1957e:	71 83       	std	Z+1, r23	; 0x01
   19580:	82 83       	std	Z+2, r24	; 0x02
   19582:	93 83       	std	Z+3, r25	; 0x03
   19584:	44 e0       	ldi	r20, 0x04	; 4
   19586:	50 e0       	ldi	r21, 0x00	; 0
   19588:	6c e1       	ldi	r22, 0x1C	; 28
   1958a:	70 e0       	ldi	r23, 0x00	; 0
   1958c:	c8 01       	movw	r24, r16
   1958e:	0e 94 40 b5 	call	0x16a80	; 0x16a80 <B2V_MSB>
   19592:	fe 01       	movw	r30, r28
   19594:	ef 5b       	subi	r30, 0xBF	; 191
   19596:	ff 4f       	sbci	r31, 0xFF	; 255
   19598:	60 83       	st	Z, r22
   1959a:	71 83       	std	Z+1, r23	; 0x01
   1959c:	82 83       	std	Z+2, r24	; 0x02
   1959e:	93 83       	std	Z+3, r25	; 0x03
   195a0:	44 e0       	ldi	r20, 0x04	; 4
   195a2:	50 e0       	ldi	r21, 0x00	; 0
   195a4:	60 e2       	ldi	r22, 0x20	; 32
   195a6:	70 e0       	ldi	r23, 0x00	; 0
   195a8:	c8 01       	movw	r24, r16
   195aa:	0e 94 40 b5 	call	0x16a80	; 0x16a80 <B2V_MSB>
   195ae:	fe 01       	movw	r30, r28
   195b0:	eb 5b       	subi	r30, 0xBB	; 187
   195b2:	ff 4f       	sbci	r31, 0xFF	; 255
   195b4:	60 83       	st	Z, r22
   195b6:	71 83       	std	Z+1, r23	; 0x01
   195b8:	82 83       	std	Z+2, r24	; 0x02
   195ba:	93 83       	std	Z+3, r25	; 0x03
   195bc:	de 01       	movw	r26, r28
   195be:	a7 5b       	subi	r26, 0xB7	; 183
   195c0:	bf 4f       	sbci	r27, 0xFF	; 255
   195c2:	f8 01       	movw	r30, r16
   195c4:	b4 96       	adiw	r30, 0x24	; 36
   195c6:	86 e0       	ldi	r24, 0x06	; 6
   195c8:	01 90       	ld	r0, Z+
   195ca:	0d 92       	st	X+, r0
   195cc:	8a 95       	dec	r24
   195ce:	e1 f7       	brne	.-8      	; 0x195c8 <lif_str2vol+0xfe>
   195d0:	df 91       	pop	r29
   195d2:	cf 91       	pop	r28
   195d4:	1f 91       	pop	r17
   195d6:	0f 91       	pop	r16
   195d8:	08 95       	ret

000195da <lif_dir2str>:
   195da:	ef 92       	push	r14
   195dc:	ff 92       	push	r15
   195de:	0f 93       	push	r16
   195e0:	1f 93       	push	r17
   195e2:	cf 93       	push	r28
   195e4:	df 93       	push	r29
   195e6:	ec 01       	movw	r28, r24
   195e8:	7b 01       	movw	r14, r22
   195ea:	bc 01       	movw	r22, r24
   195ec:	61 5b       	subi	r22, 0xB1	; 177
   195ee:	7f 4f       	sbci	r23, 0xFF	; 255
   195f0:	4a e0       	ldi	r20, 0x0A	; 10
   195f2:	50 e0       	ldi	r21, 0x00	; 0
   195f4:	c7 01       	movw	r24, r14
   195f6:	77 de       	rcall	.-786    	; 0x192e6 <lif_S2B>
   195f8:	fe 01       	movw	r30, r28
   195fa:	e6 5a       	subi	r30, 0xA6	; 166
   195fc:	ff 4f       	sbci	r31, 0xFF	; 255
   195fe:	00 81       	ld	r16, Z
   19600:	11 81       	ldd	r17, Z+1	; 0x01
   19602:	20 e0       	ldi	r18, 0x00	; 0
   19604:	30 e0       	ldi	r19, 0x00	; 0
   19606:	42 e0       	ldi	r20, 0x02	; 2
   19608:	50 e0       	ldi	r21, 0x00	; 0
   1960a:	6a e0       	ldi	r22, 0x0A	; 10
   1960c:	70 e0       	ldi	r23, 0x00	; 0
   1960e:	c7 01       	movw	r24, r14
   19610:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   19614:	fe 01       	movw	r30, r28
   19616:	e4 5a       	subi	r30, 0xA4	; 164
   19618:	ff 4f       	sbci	r31, 0xFF	; 255
   1961a:	00 81       	ld	r16, Z
   1961c:	11 81       	ldd	r17, Z+1	; 0x01
   1961e:	22 81       	ldd	r18, Z+2	; 0x02
   19620:	33 81       	ldd	r19, Z+3	; 0x03
   19622:	44 e0       	ldi	r20, 0x04	; 4
   19624:	50 e0       	ldi	r21, 0x00	; 0
   19626:	6c e0       	ldi	r22, 0x0C	; 12
   19628:	70 e0       	ldi	r23, 0x00	; 0
   1962a:	c7 01       	movw	r24, r14
   1962c:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   19630:	fe 01       	movw	r30, r28
   19632:	e0 5a       	subi	r30, 0xA0	; 160
   19634:	ff 4f       	sbci	r31, 0xFF	; 255
   19636:	00 81       	ld	r16, Z
   19638:	11 81       	ldd	r17, Z+1	; 0x01
   1963a:	22 81       	ldd	r18, Z+2	; 0x02
   1963c:	33 81       	ldd	r19, Z+3	; 0x03
   1963e:	44 e0       	ldi	r20, 0x04	; 4
   19640:	50 e0       	ldi	r21, 0x00	; 0
   19642:	60 e1       	ldi	r22, 0x10	; 16
   19644:	70 e0       	ldi	r23, 0x00	; 0
   19646:	c7 01       	movw	r24, r14
   19648:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   1964c:	d7 01       	movw	r26, r14
   1964e:	54 96       	adiw	r26, 0x14	; 20
   19650:	fe 01       	movw	r30, r28
   19652:	ec 59       	subi	r30, 0x9C	; 156
   19654:	ff 4f       	sbci	r31, 0xFF	; 255
   19656:	86 e0       	ldi	r24, 0x06	; 6
   19658:	01 90       	ld	r0, Z+
   1965a:	0d 92       	st	X+, r0
   1965c:	8a 95       	dec	r24
   1965e:	e1 f7       	brne	.-8      	; 0x19658 <lif_dir2str+0x7e>
   19660:	fe 01       	movw	r30, r28
   19662:	e6 59       	subi	r30, 0x96	; 150
   19664:	ff 4f       	sbci	r31, 0xFF	; 255
   19666:	00 81       	ld	r16, Z
   19668:	11 81       	ldd	r17, Z+1	; 0x01
   1966a:	20 e0       	ldi	r18, 0x00	; 0
   1966c:	30 e0       	ldi	r19, 0x00	; 0
   1966e:	42 e0       	ldi	r20, 0x02	; 2
   19670:	50 e0       	ldi	r21, 0x00	; 0
   19672:	6a e1       	ldi	r22, 0x1A	; 26
   19674:	70 e0       	ldi	r23, 0x00	; 0
   19676:	c7 01       	movw	r24, r14
   19678:	0e 94 17 b5 	call	0x16a2e	; 0x16a2e <V2B_MSB>
   1967c:	fe 01       	movw	r30, r28
   1967e:	e4 59       	subi	r30, 0x94	; 148
   19680:	ff 4f       	sbci	r31, 0xFF	; 255
   19682:	00 81       	ld	r16, Z
   19684:	11 81       	ldd	r17, Z+1	; 0x01
   19686:	20 e0       	ldi	r18, 0x00	; 0
   19688:	30 e0       	ldi	r19, 0x00	; 0
   1968a:	42 e0       	ldi	r20, 0x02	; 2
   1968c:	50 e0       	ldi	r21, 0x00	; 0
   1968e:	6c e1       	ldi	r22, 0x1C	; 28
   19690:	70 e0       	ldi	r23, 0x00	; 0
   19692:	c7 01       	movw	r24, r14
   19694:	0e 94 2b b5 	call	0x16a56	; 0x16a56 <V2B_LSB>
   19698:	c2 59       	subi	r28, 0x92	; 146
   1969a:	df 4f       	sbci	r29, 0xFF	; 255
   1969c:	08 81       	ld	r16, Y
   1969e:	19 81       	ldd	r17, Y+1	; 0x01
   196a0:	20 e0       	ldi	r18, 0x00	; 0
   196a2:	30 e0       	ldi	r19, 0x00	; 0
   196a4:	42 e0       	ldi	r20, 0x02	; 2
   196a6:	50 e0       	ldi	r21, 0x00	; 0
   196a8:	6e e1       	ldi	r22, 0x1E	; 30
   196aa:	70 e0       	ldi	r23, 0x00	; 0
   196ac:	c7 01       	movw	r24, r14
   196ae:	0e 94 2b b5 	call	0x16a56	; 0x16a56 <V2B_LSB>
   196b2:	cd b7       	in	r28, 0x3d	; 61
   196b4:	de b7       	in	r29, 0x3e	; 62
   196b6:	e6 e0       	ldi	r30, 0x06	; 6
   196b8:	0c 94 b7 e9 	jmp	0x1d36e	; 0x1d36e <__epilogue_restores__+0x18>

000196bc <lif_str2dir>:
   196bc:	0f 93       	push	r16
   196be:	1f 93       	push	r17
   196c0:	cf 93       	push	r28
   196c2:	df 93       	push	r29
   196c4:	8c 01       	movw	r16, r24
   196c6:	eb 01       	movw	r28, r22
   196c8:	61 5b       	subi	r22, 0xB1	; 177
   196ca:	7f 4f       	sbci	r23, 0xFF	; 255
   196cc:	4a e0       	ldi	r20, 0x0A	; 10
   196ce:	50 e0       	ldi	r21, 0x00	; 0
   196d0:	b3 dd       	rcall	.-1178   	; 0x19238 <lif_B2S>
   196d2:	42 e0       	ldi	r20, 0x02	; 2
   196d4:	50 e0       	ldi	r21, 0x00	; 0
   196d6:	6a e0       	ldi	r22, 0x0A	; 10
   196d8:	70 e0       	ldi	r23, 0x00	; 0
   196da:	c8 01       	movw	r24, r16
   196dc:	0e 94 40 b5 	call	0x16a80	; 0x16a80 <B2V_MSB>
   196e0:	fe 01       	movw	r30, r28
   196e2:	e6 5a       	subi	r30, 0xA6	; 166
   196e4:	ff 4f       	sbci	r31, 0xFF	; 255
   196e6:	71 83       	std	Z+1, r23	; 0x01
   196e8:	60 83       	st	Z, r22
   196ea:	44 e0       	ldi	r20, 0x04	; 4
   196ec:	50 e0       	ldi	r21, 0x00	; 0
   196ee:	6c e0       	ldi	r22, 0x0C	; 12
   196f0:	70 e0       	ldi	r23, 0x00	; 0
   196f2:	c8 01       	movw	r24, r16
   196f4:	0e 94 40 b5 	call	0x16a80	; 0x16a80 <B2V_MSB>
   196f8:	fe 01       	movw	r30, r28
   196fa:	e4 5a       	subi	r30, 0xA4	; 164
   196fc:	ff 4f       	sbci	r31, 0xFF	; 255
   196fe:	60 83       	st	Z, r22
   19700:	71 83       	std	Z+1, r23	; 0x01
   19702:	82 83       	std	Z+2, r24	; 0x02
   19704:	93 83       	std	Z+3, r25	; 0x03
   19706:	44 e0       	ldi	r20, 0x04	; 4
   19708:	50 e0       	ldi	r21, 0x00	; 0
   1970a:	60 e1       	ldi	r22, 0x10	; 16
   1970c:	70 e0       	ldi	r23, 0x00	; 0
   1970e:	c8 01       	movw	r24, r16
   19710:	0e 94 40 b5 	call	0x16a80	; 0x16a80 <B2V_MSB>
   19714:	fe 01       	movw	r30, r28
   19716:	e0 5a       	subi	r30, 0xA0	; 160
   19718:	ff 4f       	sbci	r31, 0xFF	; 255
   1971a:	60 83       	st	Z, r22
   1971c:	71 83       	std	Z+1, r23	; 0x01
   1971e:	82 83       	std	Z+2, r24	; 0x02
   19720:	93 83       	std	Z+3, r25	; 0x03
   19722:	de 01       	movw	r26, r28
   19724:	ac 59       	subi	r26, 0x9C	; 156
   19726:	bf 4f       	sbci	r27, 0xFF	; 255
   19728:	f8 01       	movw	r30, r16
   1972a:	74 96       	adiw	r30, 0x14	; 20
   1972c:	86 e0       	ldi	r24, 0x06	; 6
   1972e:	01 90       	ld	r0, Z+
   19730:	0d 92       	st	X+, r0
   19732:	8a 95       	dec	r24
   19734:	e1 f7       	brne	.-8      	; 0x1972e <lif_str2dir+0x72>
   19736:	42 e0       	ldi	r20, 0x02	; 2
   19738:	50 e0       	ldi	r21, 0x00	; 0
   1973a:	6a e1       	ldi	r22, 0x1A	; 26
   1973c:	70 e0       	ldi	r23, 0x00	; 0
   1973e:	c8 01       	movw	r24, r16
   19740:	0e 94 40 b5 	call	0x16a80	; 0x16a80 <B2V_MSB>
   19744:	fe 01       	movw	r30, r28
   19746:	e6 59       	subi	r30, 0x96	; 150
   19748:	ff 4f       	sbci	r31, 0xFF	; 255
   1974a:	71 83       	std	Z+1, r23	; 0x01
   1974c:	60 83       	st	Z, r22
   1974e:	42 e0       	ldi	r20, 0x02	; 2
   19750:	50 e0       	ldi	r21, 0x00	; 0
   19752:	6c e1       	ldi	r22, 0x1C	; 28
   19754:	70 e0       	ldi	r23, 0x00	; 0
   19756:	c8 01       	movw	r24, r16
   19758:	0e 94 5f b5 	call	0x16abe	; 0x16abe <B2V_LSB>
   1975c:	fe 01       	movw	r30, r28
   1975e:	e4 59       	subi	r30, 0x94	; 148
   19760:	ff 4f       	sbci	r31, 0xFF	; 255
   19762:	71 83       	std	Z+1, r23	; 0x01
   19764:	60 83       	st	Z, r22
   19766:	42 e0       	ldi	r20, 0x02	; 2
   19768:	50 e0       	ldi	r21, 0x00	; 0
   1976a:	6e e1       	ldi	r22, 0x1E	; 30
   1976c:	70 e0       	ldi	r23, 0x00	; 0
   1976e:	c8 01       	movw	r24, r16
   19770:	0e 94 5f b5 	call	0x16abe	; 0x16abe <B2V_LSB>
   19774:	c2 59       	subi	r28, 0x92	; 146
   19776:	df 4f       	sbci	r29, 0xFF	; 255
   19778:	79 83       	std	Y+1, r23	; 0x01
   1977a:	68 83       	st	Y, r22
   1977c:	df 91       	pop	r29
   1977e:	cf 91       	pop	r28
   19780:	1f 91       	pop	r17
   19782:	0f 91       	pop	r16
   19784:	08 95       	ret

00019786 <lif_BIN2BCD>:
   19786:	6a e0       	ldi	r22, 0x0A	; 10
   19788:	0e 94 ef e8 	call	0x1d1de	; 0x1d1de <__udivmodqi4>
   1978c:	82 95       	swap	r24
   1978e:	80 7f       	andi	r24, 0xF0	; 240
   19790:	89 2b       	or	r24, r25
   19792:	08 95       	ret

00019794 <lif_BCD2BIN>:
   19794:	28 2f       	mov	r18, r24
   19796:	22 95       	swap	r18
   19798:	2f 70       	andi	r18, 0x0F	; 15
   1979a:	8f 70       	andi	r24, 0x0F	; 15
   1979c:	90 e0       	ldi	r25, 0x00	; 0
   1979e:	3a e0       	ldi	r19, 0x0A	; 10
   197a0:	23 9f       	mul	r18, r19
   197a2:	80 0d       	add	r24, r0
   197a4:	91 1d       	adc	r25, r1
   197a6:	11 24       	eor	r1, r1
   197a8:	08 95       	ret

000197aa <lif_time2lifbcd>:
   197aa:	aa e1       	ldi	r26, 0x1A	; 26
   197ac:	b0 e0       	ldi	r27, 0x00	; 0
   197ae:	eb ed       	ldi	r30, 0xDB	; 219
   197b0:	fb ec       	ldi	r31, 0xCB	; 203
   197b2:	0c 94 9d e9 	jmp	0x1d33a	; 0x1d33a <__prologue_saves__+0x1c>
   197b6:	8b 01       	movw	r16, r22
   197b8:	9c 01       	movw	r18, r24
   197ba:	6f 8b       	std	Y+23, r22	; 0x17
   197bc:	78 8f       	std	Y+24, r23	; 0x18
   197be:	89 8f       	std	Y+25, r24	; 0x19
   197c0:	9a 8f       	std	Y+26, r25	; 0x1a
   197c2:	67 2b       	or	r22, r23
   197c4:	68 2b       	or	r22, r24
   197c6:	69 2b       	or	r22, r25
   197c8:	41 f4       	brne	.+16     	; 0x197da <lif_time2lifbcd+0x30>
   197ca:	fa 01       	movw	r30, r20
   197cc:	ca 01       	movw	r24, r20
   197ce:	06 96       	adiw	r24, 0x06	; 6
   197d0:	11 92       	st	Z+, r1
   197d2:	e8 17       	cp	r30, r24
   197d4:	f9 07       	cpc	r31, r25
   197d6:	e1 f7       	brne	.-8      	; 0x197d0 <lif_time2lifbcd+0x26>
   197d8:	26 c0       	rjmp	.+76     	; 0x19826 <lif_time2lifbcd+0x7c>
   197da:	8a 01       	movw	r16, r20
   197dc:	be 01       	movw	r22, r28
   197de:	6f 5f       	subi	r22, 0xFF	; 255
   197e0:	7f 4f       	sbci	r23, 0xFF	; 255
   197e2:	ce 01       	movw	r24, r28
   197e4:	47 96       	adiw	r24, 0x17	; 23
   197e6:	0e 94 5a 36 	call	0x6cb4	; 0x6cb4 <gmtime_r>
   197ea:	8b 85       	ldd	r24, Y+11	; 0x0b
   197ec:	9c 85       	ldd	r25, Y+12	; 0x0c
   197ee:	64 e6       	ldi	r22, 0x64	; 100
   197f0:	70 e0       	ldi	r23, 0x00	; 0
   197f2:	0e 94 0f e9 	call	0x1d21e	; 0x1d21e <__divmodhi4>
   197f6:	c7 df       	rcall	.-114    	; 0x19786 <lif_BIN2BCD>
   197f8:	f8 01       	movw	r30, r16
   197fa:	80 83       	st	Z, r24
   197fc:	89 85       	ldd	r24, Y+9	; 0x09
   197fe:	8f 5f       	subi	r24, 0xFF	; 255
   19800:	c2 df       	rcall	.-124    	; 0x19786 <lif_BIN2BCD>
   19802:	f8 01       	movw	r30, r16
   19804:	81 83       	std	Z+1, r24	; 0x01
   19806:	8f 81       	ldd	r24, Y+7	; 0x07
   19808:	be df       	rcall	.-132    	; 0x19786 <lif_BIN2BCD>
   1980a:	f8 01       	movw	r30, r16
   1980c:	82 83       	std	Z+2, r24	; 0x02
   1980e:	8d 81       	ldd	r24, Y+5	; 0x05
   19810:	ba df       	rcall	.-140    	; 0x19786 <lif_BIN2BCD>
   19812:	f8 01       	movw	r30, r16
   19814:	83 83       	std	Z+3, r24	; 0x03
   19816:	8b 81       	ldd	r24, Y+3	; 0x03
   19818:	b6 df       	rcall	.-148    	; 0x19786 <lif_BIN2BCD>
   1981a:	f8 01       	movw	r30, r16
   1981c:	84 83       	std	Z+4, r24	; 0x04
   1981e:	89 81       	ldd	r24, Y+1	; 0x01
   19820:	b2 df       	rcall	.-156    	; 0x19786 <lif_BIN2BCD>
   19822:	f8 01       	movw	r30, r16
   19824:	85 83       	std	Z+5, r24	; 0x05
   19826:	6a 96       	adiw	r28, 0x1a	; 26
   19828:	e4 e0       	ldi	r30, 0x04	; 4
   1982a:	0c 94 b9 e9 	jmp	0x1d372	; 0x1d372 <__epilogue_restores__+0x1c>

0001982e <lif_lifbcd2time>:
   1982e:	a6 e1       	ldi	r26, 0x16	; 22
   19830:	b0 e0       	ldi	r27, 0x00	; 0
   19832:	ed e1       	ldi	r30, 0x1D	; 29
   19834:	fc ec       	ldi	r31, 0xCC	; 204
   19836:	0c 94 97 e9 	jmp	0x1d32e	; 0x1d32e <__prologue_saves__+0x10>
   1983a:	8c 01       	movw	r16, r24
   1983c:	7c 01       	movw	r14, r24
   1983e:	5c 01       	movw	r10, r24
   19840:	26 e0       	ldi	r18, 0x06	; 6
   19842:	a2 0e       	add	r10, r18
   19844:	b1 1c       	adc	r11, r1
   19846:	cc 24       	eor	r12, r12
   19848:	c3 94       	inc	r12
   1984a:	d1 2c       	mov	r13, r1
   1984c:	f7 01       	movw	r30, r14
   1984e:	81 91       	ld	r24, Z+
   19850:	7f 01       	movw	r14, r30
   19852:	a0 df       	rcall	.-192    	; 0x19794 <lif_BCD2BIN>
   19854:	89 2b       	or	r24, r25
   19856:	11 f0       	breq	.+4      	; 0x1985c <lif_lifbcd2time+0x2e>
   19858:	c1 2c       	mov	r12, r1
   1985a:	d1 2c       	mov	r13, r1
   1985c:	ea 14       	cp	r14, r10
   1985e:	fb 04       	cpc	r15, r11
   19860:	a9 f7       	brne	.-22     	; 0x1984c <lif_lifbcd2time+0x1e>
   19862:	c1 14       	cp	r12, r1
   19864:	d1 04       	cpc	r13, r1
   19866:	61 f5       	brne	.+88     	; 0x198c0 <lif_lifbcd2time+0x92>
   19868:	f8 01       	movw	r30, r16
   1986a:	80 81       	ld	r24, Z
   1986c:	93 df       	rcall	.-218    	; 0x19794 <lif_BCD2BIN>
   1986e:	7c 01       	movw	r14, r24
   19870:	f8 01       	movw	r30, r16
   19872:	81 81       	ldd	r24, Z+1	; 0x01
   19874:	8f df       	rcall	.-226    	; 0x19794 <lif_BCD2BIN>
   19876:	01 97       	sbiw	r24, 0x01	; 1
   19878:	f6 e4       	ldi	r31, 0x46	; 70
   1987a:	ef 16       	cp	r14, r31
   1987c:	f1 04       	cpc	r15, r1
   1987e:	1c f4       	brge	.+6      	; 0x19886 <lif_lifbcd2time+0x58>
   19880:	24 e6       	ldi	r18, 0x64	; 100
   19882:	e2 0e       	add	r14, r18
   19884:	f1 1c       	adc	r15, r1
   19886:	fc 86       	std	Y+12, r15	; 0x0c
   19888:	eb 86       	std	Y+11, r14	; 0x0b
   1988a:	9a 87       	std	Y+10, r25	; 0x0a
   1988c:	89 87       	std	Y+9, r24	; 0x09
   1988e:	f8 01       	movw	r30, r16
   19890:	82 81       	ldd	r24, Z+2	; 0x02
   19892:	80 df       	rcall	.-256    	; 0x19794 <lif_BCD2BIN>
   19894:	98 87       	std	Y+8, r25	; 0x08
   19896:	8f 83       	std	Y+7, r24	; 0x07
   19898:	f8 01       	movw	r30, r16
   1989a:	83 81       	ldd	r24, Z+3	; 0x03
   1989c:	7b df       	rcall	.-266    	; 0x19794 <lif_BCD2BIN>
   1989e:	9e 83       	std	Y+6, r25	; 0x06
   198a0:	8d 83       	std	Y+5, r24	; 0x05
   198a2:	f8 01       	movw	r30, r16
   198a4:	84 81       	ldd	r24, Z+4	; 0x04
   198a6:	76 df       	rcall	.-276    	; 0x19794 <lif_BCD2BIN>
   198a8:	9c 83       	std	Y+4, r25	; 0x04
   198aa:	8b 83       	std	Y+3, r24	; 0x03
   198ac:	f8 01       	movw	r30, r16
   198ae:	85 81       	ldd	r24, Z+5	; 0x05
   198b0:	71 df       	rcall	.-286    	; 0x19794 <lif_BCD2BIN>
   198b2:	9a 83       	std	Y+2, r25	; 0x02
   198b4:	89 83       	std	Y+1, r24	; 0x01
   198b6:	ce 01       	movw	r24, r28
   198b8:	01 96       	adiw	r24, 0x01	; 1
   198ba:	0e 94 2f 39 	call	0x725e	; 0x725e <timegm>
   198be:	03 c0       	rjmp	.+6      	; 0x198c6 <lif_lifbcd2time+0x98>
   198c0:	60 e0       	ldi	r22, 0x00	; 0
   198c2:	70 e0       	ldi	r23, 0x00	; 0
   198c4:	cb 01       	movw	r24, r22
   198c6:	66 96       	adiw	r28, 0x16	; 22
   198c8:	ea e0       	ldi	r30, 0x0A	; 10
   198ca:	0c 94 b3 e9 	jmp	0x1d366	; 0x1d366 <__epilogue_restores__+0x10>

000198ce <lif_ctime_gmt>:
   198ce:	a6 e1       	ldi	r26, 0x16	; 22
   198d0:	b0 e0       	ldi	r27, 0x00	; 0
   198d2:	ed e6       	ldi	r30, 0x6D	; 109
   198d4:	fc ec       	ldi	r31, 0xCC	; 204
   198d6:	0c 94 9d e9 	jmp	0x1d33a	; 0x1d33a <__prologue_saves__+0x1c>
   198da:	20 e2       	ldi	r18, 0x20	; 32
   198dc:	ec e1       	ldi	r30, 0x1C	; 28
   198de:	fa e1       	ldi	r31, 0x1A	; 26
   198e0:	df 01       	movw	r26, r30
   198e2:	1d 92       	st	X+, r1
   198e4:	2a 95       	dec	r18
   198e6:	e9 f7       	brne	.-6      	; 0x198e2 <lif_ctime_gmt+0x14>
   198e8:	be 01       	movw	r22, r28
   198ea:	6f 5f       	subi	r22, 0xFF	; 255
   198ec:	7f 4f       	sbci	r23, 0xFF	; 255
   198ee:	0e 94 5a 36 	call	0x6cb4	; 0x6cb4 <gmtime_r>
   198f2:	6c e1       	ldi	r22, 0x1C	; 28
   198f4:	7a e1       	ldi	r23, 0x1A	; 26
   198f6:	0e 94 85 3b 	call	0x770a	; 0x770a <asctime_r>
   198fa:	8c 01       	movw	r16, r24
   198fc:	0e 94 b5 30 	call	0x616a	; 0x616a <trim_tail>
   19900:	c8 01       	movw	r24, r16
   19902:	66 96       	adiw	r28, 0x16	; 22
   19904:	e4 e0       	ldi	r30, 0x04	; 4
   19906:	0c 94 b9 e9 	jmp	0x1d372	; 0x1d372 <__epilogue_restores__+0x1c>

0001990a <lif_lifbcd2timestr>:
   1990a:	a4 e0       	ldi	r26, 0x04	; 4
   1990c:	b0 e0       	ldi	r27, 0x00	; 0
   1990e:	eb e8       	ldi	r30, 0x8B	; 139
   19910:	fc ec       	ldi	r31, 0xCC	; 204
   19912:	0c 94 9f e9 	jmp	0x1d33e	; 0x1d33e <__prologue_saves__+0x20>
   19916:	20 e2       	ldi	r18, 0x20	; 32
   19918:	ec ef       	ldi	r30, 0xFC	; 252
   1991a:	f9 e1       	ldi	r31, 0x19	; 25
   1991c:	df 01       	movw	r26, r30
   1991e:	1d 92       	st	X+, r1
   19920:	2a 95       	dec	r18
   19922:	e9 f7       	brne	.-6      	; 0x1991e <lif_lifbcd2timestr+0x14>
   19924:	84 df       	rcall	.-248    	; 0x1982e <lif_lifbcd2time>
   19926:	69 83       	std	Y+1, r22	; 0x01
   19928:	7a 83       	std	Y+2, r23	; 0x02
   1992a:	8b 83       	std	Y+3, r24	; 0x03
   1992c:	9c 83       	std	Y+4, r25	; 0x04
   1992e:	67 2b       	or	r22, r23
   19930:	68 2b       	or	r22, r24
   19932:	69 2b       	or	r22, r25
   19934:	29 f0       	breq	.+10     	; 0x19940 <lif_lifbcd2timestr+0x36>
   19936:	ce 01       	movw	r24, r28
   19938:	01 96       	adiw	r24, 0x01	; 1
   1993a:	c9 df       	rcall	.-110    	; 0x198ce <lif_ctime_gmt>
   1993c:	bc 01       	movw	r22, r24
   1993e:	02 c0       	rjmp	.+4      	; 0x19944 <lif_lifbcd2timestr+0x3a>
   19940:	6d e2       	ldi	r22, 0x2D	; 45
   19942:	76 e1       	ldi	r23, 0x16	; 22
   19944:	8c ef       	ldi	r24, 0xFC	; 252
   19946:	99 e1       	ldi	r25, 0x19	; 25
   19948:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <strcpy>
   1994c:	8c ef       	ldi	r24, 0xFC	; 252
   1994e:	99 e1       	ldi	r25, 0x19	; 25
   19950:	24 96       	adiw	r28, 0x04	; 4
   19952:	e2 e0       	ldi	r30, 0x02	; 2
   19954:	0c 94 bb e9 	jmp	0x1d376	; 0x1d376 <__epilogue_restores__+0x20>

00019958 <lif_image_clear>:
   19958:	20 e7       	ldi	r18, 0x70	; 112
   1995a:	fc 01       	movw	r30, r24
   1995c:	11 92       	st	Z+, r1
   1995e:	2a 95       	dec	r18
   19960:	e9 f7       	brne	.-6      	; 0x1995c <lif_image_clear+0x4>
   19962:	08 95       	ret

00019964 <lif_dir_clear>:
   19964:	81 5b       	subi	r24, 0xB1	; 177
   19966:	9f 4f       	sbci	r25, 0xFF	; 255
   19968:	21 e2       	ldi	r18, 0x21	; 33
   1996a:	fc 01       	movw	r30, r24
   1996c:	11 92       	st	Z+, r1
   1996e:	2a 95       	dec	r18
   19970:	e9 f7       	brne	.-6      	; 0x1996c <lif_dir_clear+0x8>
   19972:	08 95       	ret

00019974 <lif_vol_clear>:
   19974:	84 96       	adiw	r24, 0x24	; 36
   19976:	2b e2       	ldi	r18, 0x2B	; 43
   19978:	fc 01       	movw	r30, r24
   1997a:	11 92       	st	Z+, r1
   1997c:	2a 95       	dec	r18
   1997e:	e9 f7       	brne	.-6      	; 0x1997a <lif_vol_clear+0x6>
   19980:	08 95       	ret

00019982 <lif_dump_vol>:
   19982:	cf 93       	push	r28
   19984:	df 93       	push	r29
   19986:	ec 01       	movw	r28, r24
   19988:	7f 93       	push	r23
   1998a:	6f 93       	push	r22
   1998c:	82 e5       	ldi	r24, 0x52	; 82
   1998e:	93 e4       	ldi	r25, 0x43	; 67
   19990:	1f 92       	push	r1
   19992:	9f 93       	push	r25
   19994:	8f 93       	push	r24
   19996:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1999a:	89 81       	ldd	r24, Y+1	; 0x01
   1999c:	8f 93       	push	r24
   1999e:	88 81       	ld	r24, Y
   199a0:	8f 93       	push	r24
   199a2:	88 e3       	ldi	r24, 0x38	; 56
   199a4:	93 e4       	ldi	r25, 0x43	; 67
   199a6:	1f 92       	push	r1
   199a8:	9f 93       	push	r25
   199aa:	8f 93       	push	r24
   199ac:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   199b0:	8f 81       	ldd	r24, Y+7	; 0x07
   199b2:	8f 93       	push	r24
   199b4:	8e 81       	ldd	r24, Y+6	; 0x06
   199b6:	8f 93       	push	r24
   199b8:	8d 81       	ldd	r24, Y+5	; 0x05
   199ba:	8f 93       	push	r24
   199bc:	8c 81       	ldd	r24, Y+4	; 0x04
   199be:	8f 93       	push	r24
   199c0:	8b e1       	ldi	r24, 0x1B	; 27
   199c2:	93 e4       	ldi	r25, 0x43	; 67
   199c4:	1f 92       	push	r1
   199c6:	9f 93       	push	r25
   199c8:	8f 93       	push	r24
   199ca:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   199ce:	8b 85       	ldd	r24, Y+11	; 0x0b
   199d0:	8f 93       	push	r24
   199d2:	8a 85       	ldd	r24, Y+10	; 0x0a
   199d4:	8f 93       	push	r24
   199d6:	89 85       	ldd	r24, Y+9	; 0x09
   199d8:	8f 93       	push	r24
   199da:	88 85       	ldd	r24, Y+8	; 0x08
   199dc:	8f 93       	push	r24
   199de:	8e ef       	ldi	r24, 0xFE	; 254
   199e0:	92 e4       	ldi	r25, 0x42	; 66
   199e2:	1f 92       	push	r1
   199e4:	9f 93       	push	r25
   199e6:	8f 93       	push	r24
   199e8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   199ec:	8f 85       	ldd	r24, Y+15	; 0x0f
   199ee:	8f 93       	push	r24
   199f0:	8e 85       	ldd	r24, Y+14	; 0x0e
   199f2:	8f 93       	push	r24
   199f4:	8d 85       	ldd	r24, Y+13	; 0x0d
   199f6:	8f 93       	push	r24
   199f8:	8c 85       	ldd	r24, Y+12	; 0x0c
   199fa:	8f 93       	push	r24
   199fc:	81 ee       	ldi	r24, 0xE1	; 225
   199fe:	92 e4       	ldi	r25, 0x42	; 66
   19a00:	1f 92       	push	r1
   19a02:	9f 93       	push	r25
   19a04:	8f 93       	push	r24
   19a06:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19a0a:	8b 89       	ldd	r24, Y+19	; 0x13
   19a0c:	8f 93       	push	r24
   19a0e:	8a 89       	ldd	r24, Y+18	; 0x12
   19a10:	8f 93       	push	r24
   19a12:	89 89       	ldd	r24, Y+17	; 0x11
   19a14:	8f 93       	push	r24
   19a16:	88 89       	ldd	r24, Y+16	; 0x10
   19a18:	8f 93       	push	r24
   19a1a:	84 ec       	ldi	r24, 0xC4	; 196
   19a1c:	92 e4       	ldi	r25, 0x42	; 66
   19a1e:	1f 92       	push	r1
   19a20:	9f 93       	push	r25
   19a22:	8f 93       	push	r24
   19a24:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19a28:	8d b7       	in	r24, 0x3d	; 61
   19a2a:	9e b7       	in	r25, 0x3e	; 62
   19a2c:	86 96       	adiw	r24, 0x26	; 38
   19a2e:	0f b6       	in	r0, 0x3f	; 63
   19a30:	f8 94       	cli
   19a32:	9e bf       	out	0x3e, r25	; 62
   19a34:	0f be       	out	0x3f, r0	; 63
   19a36:	8d bf       	out	0x3d, r24	; 61
   19a38:	8f 89       	ldd	r24, Y+23	; 0x17
   19a3a:	8f 93       	push	r24
   19a3c:	8e 89       	ldd	r24, Y+22	; 0x16
   19a3e:	8f 93       	push	r24
   19a40:	8d 89       	ldd	r24, Y+21	; 0x15
   19a42:	8f 93       	push	r24
   19a44:	8c 89       	ldd	r24, Y+20	; 0x14
   19a46:	8f 93       	push	r24
   19a48:	87 ea       	ldi	r24, 0xA7	; 167
   19a4a:	92 e4       	ldi	r25, 0x42	; 66
   19a4c:	1f 92       	push	r1
   19a4e:	9f 93       	push	r25
   19a50:	8f 93       	push	r24
   19a52:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19a56:	8b 8d       	ldd	r24, Y+27	; 0x1b
   19a58:	8f 93       	push	r24
   19a5a:	8a 8d       	ldd	r24, Y+26	; 0x1a
   19a5c:	8f 93       	push	r24
   19a5e:	89 8d       	ldd	r24, Y+25	; 0x19
   19a60:	8f 93       	push	r24
   19a62:	88 8d       	ldd	r24, Y+24	; 0x18
   19a64:	8f 93       	push	r24
   19a66:	8a e8       	ldi	r24, 0x8A	; 138
   19a68:	92 e4       	ldi	r25, 0x42	; 66
   19a6a:	1f 92       	push	r1
   19a6c:	9f 93       	push	r25
   19a6e:	8f 93       	push	r24
   19a70:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19a74:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19a76:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19a78:	09 2e       	mov	r0, r25
   19a7a:	00 0c       	add	r0, r0
   19a7c:	aa 0b       	sbc	r26, r26
   19a7e:	bb 0b       	sbc	r27, r27
   19a80:	bf 93       	push	r27
   19a82:	af 93       	push	r26
   19a84:	9f 93       	push	r25
   19a86:	8f 93       	push	r24
   19a88:	8d e6       	ldi	r24, 0x6D	; 109
   19a8a:	92 e4       	ldi	r25, 0x42	; 66
   19a8c:	1f 92       	push	r1
   19a8e:	9f 93       	push	r25
   19a90:	8f 93       	push	r24
   19a92:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19a96:	8e 8d       	ldd	r24, Y+30	; 0x1e
   19a98:	9f 8d       	ldd	r25, Y+31	; 0x1f
   19a9a:	09 2e       	mov	r0, r25
   19a9c:	00 0c       	add	r0, r0
   19a9e:	aa 0b       	sbc	r26, r26
   19aa0:	bb 0b       	sbc	r27, r27
   19aa2:	bf 93       	push	r27
   19aa4:	af 93       	push	r26
   19aa6:	9f 93       	push	r25
   19aa8:	8f 93       	push	r24
   19aaa:	80 e5       	ldi	r24, 0x50	; 80
   19aac:	92 e4       	ldi	r25, 0x42	; 66
   19aae:	1f 92       	push	r1
   19ab0:	9f 93       	push	r25
   19ab2:	8f 93       	push	r24
   19ab4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19ab8:	ce 01       	movw	r24, r28
   19aba:	86 96       	adiw	r24, 0x26	; 38
   19abc:	9f 93       	push	r25
   19abe:	8f 93       	push	r24
   19ac0:	86 e3       	ldi	r24, 0x36	; 54
   19ac2:	92 e4       	ldi	r25, 0x42	; 66
   19ac4:	1f 92       	push	r1
   19ac6:	9f 93       	push	r25
   19ac8:	8f 93       	push	r24
   19aca:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19ace:	8d b7       	in	r24, 0x3d	; 61
   19ad0:	9e b7       	in	r25, 0x3e	; 62
   19ad2:	81 96       	adiw	r24, 0x21	; 33
   19ad4:	0f b6       	in	r0, 0x3f	; 63
   19ad6:	f8 94       	cli
   19ad8:	9e bf       	out	0x3e, r25	; 62
   19ada:	0f be       	out	0x3f, r0	; 63
   19adc:	8d bf       	out	0x3d, r24	; 61
   19ade:	8d a1       	ldd	r24, Y+37	; 0x25
   19ae0:	8f 93       	push	r24
   19ae2:	8c a1       	ldd	r24, Y+36	; 0x24
   19ae4:	8f 93       	push	r24
   19ae6:	8a e1       	ldi	r24, 0x1A	; 26
   19ae8:	92 e4       	ldi	r25, 0x42	; 66
   19aea:	1f 92       	push	r1
   19aec:	9f 93       	push	r25
   19aee:	8f 93       	push	r24
   19af0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19af4:	88 a9       	ldd	r24, Y+48	; 0x30
   19af6:	8f 93       	push	r24
   19af8:	8f a5       	ldd	r24, Y+47	; 0x2f
   19afa:	8f 93       	push	r24
   19afc:	8e a5       	ldd	r24, Y+46	; 0x2e
   19afe:	8f 93       	push	r24
   19b00:	8d a5       	ldd	r24, Y+45	; 0x2d
   19b02:	8f 93       	push	r24
   19b04:	8d ef       	ldi	r24, 0xFD	; 253
   19b06:	91 e4       	ldi	r25, 0x41	; 65
   19b08:	1f 92       	push	r1
   19b0a:	9f 93       	push	r25
   19b0c:	8f 93       	push	r24
   19b0e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19b12:	88 ad       	ldd	r24, Y+56	; 0x38
   19b14:	8f 93       	push	r24
   19b16:	8f a9       	ldd	r24, Y+55	; 0x37
   19b18:	8f 93       	push	r24
   19b1a:	8e a9       	ldd	r24, Y+54	; 0x36
   19b1c:	8f 93       	push	r24
   19b1e:	8d a9       	ldd	r24, Y+53	; 0x35
   19b20:	8f 93       	push	r24
   19b22:	80 ee       	ldi	r24, 0xE0	; 224
   19b24:	91 e4       	ldi	r25, 0x41	; 65
   19b26:	1f 92       	push	r1
   19b28:	9f 93       	push	r25
   19b2a:	8f 93       	push	r24
   19b2c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19b30:	8a a9       	ldd	r24, Y+50	; 0x32
   19b32:	8f 93       	push	r24
   19b34:	89 a9       	ldd	r24, Y+49	; 0x31
   19b36:	8f 93       	push	r24
   19b38:	84 ec       	ldi	r24, 0xC4	; 196
   19b3a:	91 e4       	ldi	r25, 0x41	; 65
   19b3c:	1f 92       	push	r1
   19b3e:	9f 93       	push	r25
   19b40:	8f 93       	push	r24
   19b42:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19b46:	8a ad       	ldd	r24, Y+58	; 0x3a
   19b48:	8f 93       	push	r24
   19b4a:	89 ad       	ldd	r24, Y+57	; 0x39
   19b4c:	8f 93       	push	r24
   19b4e:	88 ea       	ldi	r24, 0xA8	; 168
   19b50:	91 e4       	ldi	r25, 0x41	; 65
   19b52:	1f 92       	push	r1
   19b54:	9f 93       	push	r25
   19b56:	8f 93       	push	r24
   19b58:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19b5c:	ce 01       	movw	r24, r28
   19b5e:	87 5b       	subi	r24, 0xB7	; 183
   19b60:	9f 4f       	sbci	r25, 0xFF	; 255
   19b62:	d3 de       	rcall	.-602    	; 0x1990a <lif_lifbcd2timestr>
   19b64:	9f 93       	push	r25
   19b66:	8f 93       	push	r24
   19b68:	8e e8       	ldi	r24, 0x8E	; 142
   19b6a:	91 e4       	ldi	r25, 0x41	; 65
   19b6c:	1f 92       	push	r1
   19b6e:	9f 93       	push	r25
   19b70:	8f 93       	push	r24
   19b72:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19b76:	8d b7       	in	r24, 0x3d	; 61
   19b78:	9e b7       	in	r25, 0x3e	; 62
   19b7a:	82 96       	adiw	r24, 0x22	; 34
   19b7c:	0f b6       	in	r0, 0x3f	; 63
   19b7e:	f8 94       	cli
   19b80:	9e bf       	out	0x3e, r25	; 62
   19b82:	0f be       	out	0x3f, r0	; 63
   19b84:	8d bf       	out	0x3d, r24	; 61
   19b86:	ce 01       	movw	r24, r28
   19b88:	81 5b       	subi	r24, 0xB1	; 177
   19b8a:	9f 4f       	sbci	r25, 0xFF	; 255
   19b8c:	9f 93       	push	r25
   19b8e:	8f 93       	push	r24
   19b90:	84 e7       	ldi	r24, 0x74	; 116
   19b92:	91 e4       	ldi	r25, 0x41	; 65
   19b94:	1f 92       	push	r1
   19b96:	9f 93       	push	r25
   19b98:	8f 93       	push	r24
   19b9a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19b9e:	fe 01       	movw	r30, r28
   19ba0:	e6 5a       	subi	r30, 0xA6	; 166
   19ba2:	ff 4f       	sbci	r31, 0xFF	; 255
   19ba4:	81 81       	ldd	r24, Z+1	; 0x01
   19ba6:	8f 93       	push	r24
   19ba8:	80 81       	ld	r24, Z
   19baa:	8f 93       	push	r24
   19bac:	88 e5       	ldi	r24, 0x58	; 88
   19bae:	91 e4       	ldi	r25, 0x41	; 65
   19bb0:	1f 92       	push	r1
   19bb2:	9f 93       	push	r25
   19bb4:	8f 93       	push	r24
   19bb6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19bba:	fe 01       	movw	r30, r28
   19bbc:	e6 59       	subi	r30, 0x96	; 150
   19bbe:	ff 4f       	sbci	r31, 0xFF	; 255
   19bc0:	81 81       	ldd	r24, Z+1	; 0x01
   19bc2:	8f 93       	push	r24
   19bc4:	80 81       	ld	r24, Z
   19bc6:	8f 93       	push	r24
   19bc8:	8c e3       	ldi	r24, 0x3C	; 60
   19bca:	91 e4       	ldi	r25, 0x41	; 65
   19bcc:	1f 92       	push	r1
   19bce:	9f 93       	push	r25
   19bd0:	8f 93       	push	r24
   19bd2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19bd6:	fe 01       	movw	r30, r28
   19bd8:	e4 5a       	subi	r30, 0xA4	; 164
   19bda:	ff 4f       	sbci	r31, 0xFF	; 255
   19bdc:	83 81       	ldd	r24, Z+3	; 0x03
   19bde:	8f 93       	push	r24
   19be0:	82 81       	ldd	r24, Z+2	; 0x02
   19be2:	8f 93       	push	r24
   19be4:	81 81       	ldd	r24, Z+1	; 0x01
   19be6:	8f 93       	push	r24
   19be8:	80 81       	ld	r24, Z
   19bea:	8f 93       	push	r24
   19bec:	8f e1       	ldi	r24, 0x1F	; 31
   19bee:	91 e4       	ldi	r25, 0x41	; 65
   19bf0:	1f 92       	push	r1
   19bf2:	9f 93       	push	r25
   19bf4:	8f 93       	push	r24
   19bf6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19bfa:	fe 01       	movw	r30, r28
   19bfc:	e0 5a       	subi	r30, 0xA0	; 160
   19bfe:	ff 4f       	sbci	r31, 0xFF	; 255
   19c00:	83 81       	ldd	r24, Z+3	; 0x03
   19c02:	8f 93       	push	r24
   19c04:	82 81       	ldd	r24, Z+2	; 0x02
   19c06:	8f 93       	push	r24
   19c08:	81 81       	ldd	r24, Z+1	; 0x01
   19c0a:	8f 93       	push	r24
   19c0c:	80 81       	ld	r24, Z
   19c0e:	8f 93       	push	r24
   19c10:	82 e0       	ldi	r24, 0x02	; 2
   19c12:	91 e4       	ldi	r25, 0x41	; 65
   19c14:	1f 92       	push	r1
   19c16:	9f 93       	push	r25
   19c18:	8f 93       	push	r24
   19c1a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19c1e:	fe 01       	movw	r30, r28
   19c20:	e4 59       	subi	r30, 0x94	; 148
   19c22:	ff 4f       	sbci	r31, 0xFF	; 255
   19c24:	80 81       	ld	r24, Z
   19c26:	91 81       	ldd	r25, Z+1	; 0x01
   19c28:	1f 92       	push	r1
   19c2a:	1f 92       	push	r1
   19c2c:	9f 93       	push	r25
   19c2e:	8f 93       	push	r24
   19c30:	85 ee       	ldi	r24, 0xE5	; 229
   19c32:	90 e4       	ldi	r25, 0x40	; 64
   19c34:	1f 92       	push	r1
   19c36:	9f 93       	push	r25
   19c38:	8f 93       	push	r24
   19c3a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19c3e:	8d b7       	in	r24, 0x3d	; 61
   19c40:	9e b7       	in	r25, 0x3e	; 62
   19c42:	84 96       	adiw	r24, 0x24	; 36
   19c44:	0f b6       	in	r0, 0x3f	; 63
   19c46:	f8 94       	cli
   19c48:	9e bf       	out	0x3e, r25	; 62
   19c4a:	0f be       	out	0x3f, r0	; 63
   19c4c:	8d bf       	out	0x3d, r24	; 61
   19c4e:	fe 01       	movw	r30, r28
   19c50:	e2 59       	subi	r30, 0x92	; 146
   19c52:	ff 4f       	sbci	r31, 0xFF	; 255
   19c54:	81 81       	ldd	r24, Z+1	; 0x01
   19c56:	8f 93       	push	r24
   19c58:	80 81       	ld	r24, Z
   19c5a:	8f 93       	push	r24
   19c5c:	89 ec       	ldi	r24, 0xC9	; 201
   19c5e:	90 e4       	ldi	r25, 0x40	; 64
   19c60:	1f 92       	push	r1
   19c62:	9f 93       	push	r25
   19c64:	8f 93       	push	r24
   19c66:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19c6a:	ce 01       	movw	r24, r28
   19c6c:	8c 59       	subi	r24, 0x9C	; 156
   19c6e:	9f 4f       	sbci	r25, 0xFF	; 255
   19c70:	4c de       	rcall	.-872    	; 0x1990a <lif_lifbcd2timestr>
   19c72:	9f 93       	push	r25
   19c74:	8f 93       	push	r24
   19c76:	8f ea       	ldi	r24, 0xAF	; 175
   19c78:	90 e4       	ldi	r25, 0x40	; 64
   19c7a:	1f 92       	push	r1
   19c7c:	9f 93       	push	r25
   19c7e:	8f 93       	push	r24
   19c80:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19c84:	8d ea       	ldi	r24, 0xAD	; 173
   19c86:	90 e4       	ldi	r25, 0x40	; 64
   19c88:	1f 92       	push	r1
   19c8a:	9f 93       	push	r25
   19c8c:	8f 93       	push	r24
   19c8e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19c92:	8d b7       	in	r24, 0x3d	; 61
   19c94:	9e b7       	in	r25, 0x3e	; 62
   19c96:	0d 96       	adiw	r24, 0x0d	; 13
   19c98:	0f b6       	in	r0, 0x3f	; 63
   19c9a:	f8 94       	cli
   19c9c:	9e bf       	out	0x3e, r25	; 62
   19c9e:	0f be       	out	0x3f, r0	; 63
   19ca0:	8d bf       	out	0x3d, r24	; 61
   19ca2:	df 91       	pop	r29
   19ca4:	cf 91       	pop	r28
   19ca6:	08 95       	ret

00019ca8 <lif_check_volume>:
   19ca8:	0f 93       	push	r16
   19caa:	1f 93       	push	r17
   19cac:	cf 93       	push	r28
   19cae:	df 93       	push	r29
   19cb0:	ec 01       	movw	r28, r24
   19cb2:	86 96       	adiw	r24, 0x26	; 38
   19cb4:	fb da       	rcall	.-2570   	; 0x192ac <lif_checkname>
   19cb6:	89 2b       	or	r24, r25
   19cb8:	79 f4       	brne	.+30     	; 0x19cd8 <lif_check_volume+0x30>
   19cba:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   19cbe:	80 ff       	sbrs	r24, 0
   19cc0:	0e c0       	rjmp	.+28     	; 0x19cde <lif_check_volume+0x36>
   19cc2:	8e e8       	ldi	r24, 0x8E	; 142
   19cc4:	90 e4       	ldi	r25, 0x40	; 64
   19cc6:	1f 92       	push	r1
   19cc8:	9f 93       	push	r25
   19cca:	8f 93       	push	r24
   19ccc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19cd0:	0f 90       	pop	r0
   19cd2:	0f 90       	pop	r0
   19cd4:	0f 90       	pop	r0
   19cd6:	03 c0       	rjmp	.+6      	; 0x19cde <lif_check_volume+0x36>
   19cd8:	81 e0       	ldi	r24, 0x01	; 1
   19cda:	90 e0       	ldi	r25, 0x00	; 0
   19cdc:	02 c0       	rjmp	.+4      	; 0x19ce2 <lif_check_volume+0x3a>
   19cde:	80 e0       	ldi	r24, 0x00	; 0
   19ce0:	90 e0       	ldi	r25, 0x00	; 0
   19ce2:	29 a9       	ldd	r18, Y+49	; 0x31
   19ce4:	3a a9       	ldd	r19, Y+50	; 0x32
   19ce6:	21 15       	cp	r18, r1
   19ce8:	40 e1       	ldi	r20, 0x10	; 16
   19cea:	34 07       	cpc	r19, r20
   19cec:	a1 f0       	breq	.+40     	; 0x19d16 <lif_check_volume+0x6e>
   19cee:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   19cf2:	80 ff       	sbrs	r24, 0
   19cf4:	0e c0       	rjmp	.+28     	; 0x19d12 <lif_check_volume+0x6a>
   19cf6:	3f 93       	push	r19
   19cf8:	2f 93       	push	r18
   19cfa:	85 e5       	ldi	r24, 0x55	; 85
   19cfc:	90 e4       	ldi	r25, 0x40	; 64
   19cfe:	1f 92       	push	r1
   19d00:	9f 93       	push	r25
   19d02:	8f 93       	push	r24
   19d04:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19d08:	0f 90       	pop	r0
   19d0a:	0f 90       	pop	r0
   19d0c:	0f 90       	pop	r0
   19d0e:	0f 90       	pop	r0
   19d10:	0f 90       	pop	r0
   19d12:	80 e0       	ldi	r24, 0x00	; 0
   19d14:	90 e0       	ldi	r25, 0x00	; 0
   19d16:	29 ad       	ldd	r18, Y+57	; 0x39
   19d18:	3a ad       	ldd	r19, Y+58	; 0x3a
   19d1a:	22 30       	cpi	r18, 0x02	; 2
   19d1c:	31 05       	cpc	r19, r1
   19d1e:	a0 f0       	brcs	.+40     	; 0x19d48 <lif_check_volume+0xa0>
   19d20:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   19d24:	80 ff       	sbrs	r24, 0
   19d26:	0e c0       	rjmp	.+28     	; 0x19d44 <lif_check_volume+0x9c>
   19d28:	3f 93       	push	r19
   19d2a:	2f 93       	push	r18
   19d2c:	8d e3       	ldi	r24, 0x3D	; 61
   19d2e:	90 e4       	ldi	r25, 0x40	; 64
   19d30:	1f 92       	push	r1
   19d32:	9f 93       	push	r25
   19d34:	8f 93       	push	r24
   19d36:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19d3a:	0f 90       	pop	r0
   19d3c:	0f 90       	pop	r0
   19d3e:	0f 90       	pop	r0
   19d40:	0f 90       	pop	r0
   19d42:	0f 90       	pop	r0
   19d44:	80 e0       	ldi	r24, 0x00	; 0
   19d46:	90 e0       	ldi	r25, 0x00	; 0
   19d48:	2b a9       	ldd	r18, Y+51	; 0x33
   19d4a:	3c a9       	ldd	r19, Y+52	; 0x34
   19d4c:	23 2b       	or	r18, r19
   19d4e:	81 f0       	breq	.+32     	; 0x19d70 <lif_check_volume+0xc8>
   19d50:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   19d54:	80 ff       	sbrs	r24, 0
   19d56:	0a c0       	rjmp	.+20     	; 0x19d6c <lif_check_volume+0xc4>
   19d58:	84 e0       	ldi	r24, 0x04	; 4
   19d5a:	90 e4       	ldi	r25, 0x40	; 64
   19d5c:	1f 92       	push	r1
   19d5e:	9f 93       	push	r25
   19d60:	8f 93       	push	r24
   19d62:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19d66:	0f 90       	pop	r0
   19d68:	0f 90       	pop	r0
   19d6a:	0f 90       	pop	r0
   19d6c:	80 e0       	ldi	r24, 0x00	; 0
   19d6e:	90 e0       	ldi	r25, 0x00	; 0
   19d70:	2b ad       	ldd	r18, Y+59	; 0x3b
   19d72:	3c ad       	ldd	r19, Y+60	; 0x3c
   19d74:	23 2b       	or	r18, r19
   19d76:	81 f0       	breq	.+32     	; 0x19d98 <lif_check_volume+0xf0>
   19d78:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   19d7c:	80 ff       	sbrs	r24, 0
   19d7e:	0a c0       	rjmp	.+20     	; 0x19d94 <lif_check_volume+0xec>
   19d80:	8b ec       	ldi	r24, 0xCB	; 203
   19d82:	9f e3       	ldi	r25, 0x3F	; 63
   19d84:	1f 92       	push	r1
   19d86:	9f 93       	push	r25
   19d88:	8f 93       	push	r24
   19d8a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19d8e:	0f 90       	pop	r0
   19d90:	0f 90       	pop	r0
   19d92:	0f 90       	pop	r0
   19d94:	80 e0       	ldi	r24, 0x00	; 0
   19d96:	90 e0       	ldi	r25, 0x00	; 0
   19d98:	4d a5       	ldd	r20, Y+45	; 0x2d
   19d9a:	5e a5       	ldd	r21, Y+46	; 0x2e
   19d9c:	6f a5       	ldd	r22, Y+47	; 0x2f
   19d9e:	78 a9       	ldd	r23, Y+48	; 0x30
   19da0:	45 2b       	or	r20, r21
   19da2:	46 2b       	or	r20, r22
   19da4:	47 2b       	or	r20, r23
   19da6:	c9 f4       	brne	.+50     	; 0x19dda <lif_check_volume+0x132>
   19da8:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   19dac:	80 ff       	sbrs	r24, 0
   19dae:	13 c0       	rjmp	.+38     	; 0x19dd6 <lif_check_volume+0x12e>
   19db0:	1f 92       	push	r1
   19db2:	1f 92       	push	r1
   19db4:	1f 92       	push	r1
   19db6:	1f 92       	push	r1
   19db8:	86 ea       	ldi	r24, 0xA6	; 166
   19dba:	9f e3       	ldi	r25, 0x3F	; 63
   19dbc:	1f 92       	push	r1
   19dbe:	9f 93       	push	r25
   19dc0:	8f 93       	push	r24
   19dc2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19dc6:	8d b7       	in	r24, 0x3d	; 61
   19dc8:	9e b7       	in	r25, 0x3e	; 62
   19dca:	07 96       	adiw	r24, 0x07	; 7
   19dcc:	0f b6       	in	r0, 0x3f	; 63
   19dce:	f8 94       	cli
   19dd0:	9e bf       	out	0x3e, r25	; 62
   19dd2:	0f be       	out	0x3f, r0	; 63
   19dd4:	8d bf       	out	0x3d, r24	; 61
   19dd6:	80 e0       	ldi	r24, 0x00	; 0
   19dd8:	90 e0       	ldi	r25, 0x00	; 0
   19dda:	4d a9       	ldd	r20, Y+53	; 0x35
   19ddc:	5e a9       	ldd	r21, Y+54	; 0x36
   19dde:	6f a9       	ldd	r22, Y+55	; 0x37
   19de0:	78 ad       	ldd	r23, Y+56	; 0x38
   19de2:	45 2b       	or	r20, r21
   19de4:	46 2b       	or	r20, r22
   19de6:	47 2b       	or	r20, r23
   19de8:	81 f4       	brne	.+32     	; 0x19e0a <lif_check_volume+0x162>
   19dea:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   19dee:	80 ff       	sbrs	r24, 0
   19df0:	0a c0       	rjmp	.+20     	; 0x19e06 <lif_check_volume+0x15e>
   19df2:	87 e7       	ldi	r24, 0x77	; 119
   19df4:	9f e3       	ldi	r25, 0x3F	; 63
   19df6:	1f 92       	push	r1
   19df8:	9f 93       	push	r25
   19dfa:	8f 93       	push	r24
   19dfc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19e00:	0f 90       	pop	r0
   19e02:	0f 90       	pop	r0
   19e04:	0f 90       	pop	r0
   19e06:	80 e0       	ldi	r24, 0x00	; 0
   19e08:	90 e0       	ldi	r25, 0x00	; 0
   19e0a:	0d a5       	ldd	r16, Y+45	; 0x2d
   19e0c:	1e a5       	ldd	r17, Y+46	; 0x2e
   19e0e:	2f a5       	ldd	r18, Y+47	; 0x2f
   19e10:	38 a9       	ldd	r19, Y+48	; 0x30
   19e12:	4d a9       	ldd	r20, Y+53	; 0x35
   19e14:	5e a9       	ldd	r21, Y+54	; 0x36
   19e16:	6f a9       	ldd	r22, Y+55	; 0x37
   19e18:	78 ad       	ldd	r23, Y+56	; 0x38
   19e1a:	40 0f       	add	r20, r16
   19e1c:	51 1f       	adc	r21, r17
   19e1e:	62 1f       	adc	r22, r18
   19e20:	73 1f       	adc	r23, r19
   19e22:	0c 81       	ldd	r16, Y+4	; 0x04
   19e24:	1d 81       	ldd	r17, Y+5	; 0x05
   19e26:	2e 81       	ldd	r18, Y+6	; 0x06
   19e28:	3f 81       	ldd	r19, Y+7	; 0x07
   19e2a:	04 17       	cp	r16, r20
   19e2c:	15 07       	cpc	r17, r21
   19e2e:	26 07       	cpc	r18, r22
   19e30:	37 07       	cpc	r19, r23
   19e32:	80 f4       	brcc	.+32     	; 0x19e54 <lif_check_volume+0x1ac>
   19e34:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   19e38:	80 ff       	sbrs	r24, 0
   19e3a:	0a c0       	rjmp	.+20     	; 0x19e50 <lif_check_volume+0x1a8>
   19e3c:	8b e4       	ldi	r24, 0x4B	; 75
   19e3e:	9f e3       	ldi	r25, 0x3F	; 63
   19e40:	1f 92       	push	r1
   19e42:	9f 93       	push	r25
   19e44:	8f 93       	push	r24
   19e46:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19e4a:	0f 90       	pop	r0
   19e4c:	0f 90       	pop	r0
   19e4e:	0f 90       	pop	r0
   19e50:	80 e0       	ldi	r24, 0x00	; 0
   19e52:	90 e0       	ldi	r25, 0x00	; 0
   19e54:	df 91       	pop	r29
   19e56:	cf 91       	pop	r28
   19e58:	1f 91       	pop	r17
   19e5a:	0f 91       	pop	r16
   19e5c:	08 95       	ret

00019e5e <lif_check_dir>:
   19e5e:	a4 e0       	ldi	r26, 0x04	; 4
   19e60:	b0 e0       	ldi	r27, 0x00	; 0
   19e62:	e5 e3       	ldi	r30, 0x35	; 53
   19e64:	ff ec       	ldi	r31, 0xCF	; 207
   19e66:	0c 94 8f e9 	jmp	0x1d31e	; 0x1d31e <__prologue_saves__>
   19e6a:	6c 01       	movw	r12, r24
   19e6c:	2a e5       	ldi	r18, 0x5A	; 90
   19e6e:	c2 0e       	add	r12, r18
   19e70:	d1 1c       	adc	r13, r1
   19e72:	f6 01       	movw	r30, r12
   19e74:	20 81       	ld	r18, Z
   19e76:	31 81       	ldd	r19, Z+1	; 0x01
   19e78:	21 50       	subi	r18, 0x01	; 1
   19e7a:	31 09       	sbc	r19, r1
   19e7c:	2e 3f       	cpi	r18, 0xFE	; 254
   19e7e:	3f 4f       	sbci	r19, 0xFF	; 255
   19e80:	08 f0       	brcs	.+2      	; 0x19e84 <lif_check_dir+0x26>
   19e82:	98 c1       	rjmp	.+816    	; 0x1a1b4 <lif_check_dir+0x356>
   19e84:	9c 83       	std	Y+4, r25	; 0x04
   19e86:	8b 83       	std	Y+3, r24	; 0x03
   19e88:	8c 01       	movw	r16, r24
   19e8a:	01 5b       	subi	r16, 0xB1	; 177
   19e8c:	1f 4f       	sbci	r17, 0xFF	; 255
   19e8e:	c8 01       	movw	r24, r16
   19e90:	0d da       	rcall	.-3046   	; 0x192ac <lif_checkname>
   19e92:	89 2b       	or	r24, r25
   19e94:	99 f4       	brne	.+38     	; 0x19ebc <lif_check_dir+0x5e>
   19e96:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   19e9a:	80 ff       	sbrs	r24, 0
   19e9c:	12 c0       	rjmp	.+36     	; 0x19ec2 <lif_check_dir+0x64>
   19e9e:	1f 93       	push	r17
   19ea0:	0f 93       	push	r16
   19ea2:	8a e2       	ldi	r24, 0x2A	; 42
   19ea4:	9f e3       	ldi	r25, 0x3F	; 63
   19ea6:	1f 92       	push	r1
   19ea8:	9f 93       	push	r25
   19eaa:	8f 93       	push	r24
   19eac:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19eb0:	0f 90       	pop	r0
   19eb2:	0f 90       	pop	r0
   19eb4:	0f 90       	pop	r0
   19eb6:	0f 90       	pop	r0
   19eb8:	0f 90       	pop	r0
   19eba:	03 c0       	rjmp	.+6      	; 0x19ec2 <lif_check_dir+0x64>
   19ebc:	ee 24       	eor	r14, r14
   19ebe:	e3 94       	inc	r14
   19ec0:	01 c0       	rjmp	.+2      	; 0x19ec4 <lif_check_dir+0x66>
   19ec2:	e1 2c       	mov	r14, r1
   19ec4:	f1 2c       	mov	r15, r1
   19ec6:	eb 81       	ldd	r30, Y+3	; 0x03
   19ec8:	fc 81       	ldd	r31, Y+4	; 0x04
   19eca:	84 85       	ldd	r24, Z+12	; 0x0c
   19ecc:	95 85       	ldd	r25, Z+13	; 0x0d
   19ece:	a6 85       	ldd	r26, Z+14	; 0x0e
   19ed0:	b7 85       	ldd	r27, Z+15	; 0x0f
   19ed2:	00 97       	sbiw	r24, 0x00	; 0
   19ed4:	a1 05       	cpc	r26, r1
   19ed6:	b1 05       	cpc	r27, r1
   19ed8:	39 f1       	breq	.+78     	; 0x19f28 <lif_check_dir+0xca>
   19eda:	e4 5a       	subi	r30, 0xA4	; 164
   19edc:	ff 4f       	sbci	r31, 0xFF	; 255
   19ede:	40 81       	ld	r20, Z
   19ee0:	51 81       	ldd	r21, Z+1	; 0x01
   19ee2:	62 81       	ldd	r22, Z+2	; 0x02
   19ee4:	73 81       	ldd	r23, Z+3	; 0x03
   19ee6:	48 17       	cp	r20, r24
   19ee8:	59 07       	cpc	r21, r25
   19eea:	6a 07       	cpc	r22, r26
   19eec:	7b 07       	cpc	r23, r27
   19eee:	e0 f4       	brcc	.+56     	; 0x19f28 <lif_check_dir+0xca>
   19ef0:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   19ef4:	20 ff       	sbrs	r18, 0
   19ef6:	16 c0       	rjmp	.+44     	; 0x19f24 <lif_check_dir+0xc6>
   19ef8:	bf 93       	push	r27
   19efa:	af 93       	push	r26
   19efc:	9f 93       	push	r25
   19efe:	8f 93       	push	r24
   19f00:	7f 93       	push	r23
   19f02:	6f 93       	push	r22
   19f04:	5f 93       	push	r21
   19f06:	4f 93       	push	r20
   19f08:	1f 93       	push	r17
   19f0a:	0f 93       	push	r16
   19f0c:	86 ee       	ldi	r24, 0xE6	; 230
   19f0e:	9e e3       	ldi	r25, 0x3E	; 62
   19f10:	1f 92       	push	r1
   19f12:	9f 93       	push	r25
   19f14:	8f 93       	push	r24
   19f16:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19f1a:	0f b6       	in	r0, 0x3f	; 63
   19f1c:	f8 94       	cli
   19f1e:	de bf       	out	0x3e, r29	; 62
   19f20:	0f be       	out	0x3f, r0	; 63
   19f22:	cd bf       	out	0x3d, r28	; 61
   19f24:	e1 2c       	mov	r14, r1
   19f26:	f1 2c       	mov	r15, r1
   19f28:	eb 81       	ldd	r30, Y+3	; 0x03
   19f2a:	fc 81       	ldd	r31, Y+4	; 0x04
   19f2c:	44 81       	ldd	r20, Z+4	; 0x04
   19f2e:	55 81       	ldd	r21, Z+5	; 0x05
   19f30:	66 81       	ldd	r22, Z+6	; 0x06
   19f32:	77 81       	ldd	r23, Z+7	; 0x07
   19f34:	41 15       	cp	r20, r1
   19f36:	51 05       	cpc	r21, r1
   19f38:	61 05       	cpc	r22, r1
   19f3a:	71 05       	cpc	r23, r1
   19f3c:	99 f1       	breq	.+102    	; 0x19fa4 <lif_check_dir+0x146>
   19f3e:	e4 5a       	subi	r30, 0xA4	; 164
   19f40:	ff 4f       	sbci	r31, 0xFF	; 255
   19f42:	80 80       	ld	r8, Z
   19f44:	91 80       	ldd	r9, Z+1	; 0x01
   19f46:	a2 80       	ldd	r10, Z+2	; 0x02
   19f48:	b3 80       	ldd	r11, Z+3	; 0x03
   19f4a:	eb 81       	ldd	r30, Y+3	; 0x03
   19f4c:	fc 81       	ldd	r31, Y+4	; 0x04
   19f4e:	e0 5a       	subi	r30, 0xA0	; 160
   19f50:	ff 4f       	sbci	r31, 0xFF	; 255
   19f52:	80 81       	ld	r24, Z
   19f54:	91 81       	ldd	r25, Z+1	; 0x01
   19f56:	a2 81       	ldd	r26, Z+2	; 0x02
   19f58:	b3 81       	ldd	r27, Z+3	; 0x03
   19f5a:	88 0d       	add	r24, r8
   19f5c:	99 1d       	adc	r25, r9
   19f5e:	aa 1d       	adc	r26, r10
   19f60:	bb 1d       	adc	r27, r11
   19f62:	48 17       	cp	r20, r24
   19f64:	59 07       	cpc	r21, r25
   19f66:	6a 07       	cpc	r22, r26
   19f68:	7b 07       	cpc	r23, r27
   19f6a:	e0 f4       	brcc	.+56     	; 0x19fa4 <lif_check_dir+0x146>
   19f6c:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   19f70:	20 ff       	sbrs	r18, 0
   19f72:	16 c0       	rjmp	.+44     	; 0x19fa0 <lif_check_dir+0x142>
   19f74:	7f 93       	push	r23
   19f76:	6f 93       	push	r22
   19f78:	5f 93       	push	r21
   19f7a:	4f 93       	push	r20
   19f7c:	bf 93       	push	r27
   19f7e:	af 93       	push	r26
   19f80:	9f 93       	push	r25
   19f82:	8f 93       	push	r24
   19f84:	1f 93       	push	r17
   19f86:	0f 93       	push	r16
   19f88:	85 ea       	ldi	r24, 0xA5	; 165
   19f8a:	9e e3       	ldi	r25, 0x3E	; 62
   19f8c:	1f 92       	push	r1
   19f8e:	9f 93       	push	r25
   19f90:	8f 93       	push	r24
   19f92:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19f96:	0f b6       	in	r0, 0x3f	; 63
   19f98:	f8 94       	cli
   19f9a:	de bf       	out	0x3e, r29	; 62
   19f9c:	0f be       	out	0x3f, r0	; 63
   19f9e:	cd bf       	out	0x3d, r28	; 61
   19fa0:	e1 2c       	mov	r14, r1
   19fa2:	f1 2c       	mov	r15, r1
   19fa4:	eb 81       	ldd	r30, Y+3	; 0x03
   19fa6:	fc 81       	ldd	r31, Y+4	; 0x04
   19fa8:	e6 59       	subi	r30, 0x96	; 150
   19faa:	ff 4f       	sbci	r31, 0xFF	; 255
   19fac:	80 81       	ld	r24, Z
   19fae:	91 81       	ldd	r25, Z+1	; 0x01
   19fb0:	81 30       	cpi	r24, 0x01	; 1
   19fb2:	30 e8       	ldi	r19, 0x80	; 128
   19fb4:	93 07       	cpc	r25, r19
   19fb6:	b1 f0       	breq	.+44     	; 0x19fe4 <lif_check_dir+0x186>
   19fb8:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   19fbc:	20 ff       	sbrs	r18, 0
   19fbe:	10 c0       	rjmp	.+32     	; 0x19fe0 <lif_check_dir+0x182>
   19fc0:	9f 93       	push	r25
   19fc2:	8f 93       	push	r24
   19fc4:	1f 93       	push	r17
   19fc6:	0f 93       	push	r16
   19fc8:	87 e7       	ldi	r24, 0x77	; 119
   19fca:	9e e3       	ldi	r25, 0x3E	; 62
   19fcc:	1f 92       	push	r1
   19fce:	9f 93       	push	r25
   19fd0:	8f 93       	push	r24
   19fd2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   19fd6:	0f b6       	in	r0, 0x3f	; 63
   19fd8:	f8 94       	cli
   19fda:	de bf       	out	0x3e, r29	; 62
   19fdc:	0f be       	out	0x3f, r0	; 63
   19fde:	cd bf       	out	0x3d, r28	; 61
   19fe0:	e1 2c       	mov	r14, r1
   19fe2:	f1 2c       	mov	r15, r1
   19fe4:	f6 01       	movw	r30, r12
   19fe6:	80 81       	ld	r24, Z
   19fe8:	91 81       	ldd	r25, Z+1	; 0x01
   19fea:	8c 7f       	andi	r24, 0xFC	; 252
   19fec:	80 31       	cpi	r24, 0x10	; 16
   19fee:	90 4e       	sbci	r25, 0xE0	; 224
   19ff0:	09 f0       	breq	.+2      	; 0x19ff4 <lif_check_dir+0x196>
   19ff2:	b3 c0       	rjmp	.+358    	; 0x1a15a <lif_check_dir+0x2fc>
   19ff4:	cb 80       	ldd	r12, Y+3	; 0x03
   19ff6:	dc 80       	ldd	r13, Y+4	; 0x04
   19ff8:	2c e6       	ldi	r18, 0x6C	; 108
   19ffa:	c2 0e       	add	r12, r18
   19ffc:	d1 1c       	adc	r13, r1
   19ffe:	f6 01       	movw	r30, r12
   1a000:	20 81       	ld	r18, Z
   1a002:	31 81       	ldd	r19, Z+1	; 0x01
   1a004:	21 15       	cp	r18, r1
   1a006:	31 05       	cpc	r19, r1
   1a008:	09 f4       	brne	.+2      	; 0x1a00c <lif_check_dir+0x1ae>
   1a00a:	a7 c0       	rjmp	.+334    	; 0x1a15a <lif_check_dir+0x2fc>
   1a00c:	49 01       	movw	r8, r18
   1a00e:	a1 2c       	mov	r10, r1
   1a010:	b1 2c       	mov	r11, r1
   1a012:	bb 27       	eor	r27, r27
   1a014:	ab 2d       	mov	r26, r11
   1a016:	9a 2d       	mov	r25, r10
   1a018:	89 2d       	mov	r24, r9
   1a01a:	33 27       	eor	r19, r19
   1a01c:	2c 01       	movw	r4, r24
   1a01e:	3d 01       	movw	r6, r26
   1a020:	21 15       	cp	r18, r1
   1a022:	31 05       	cpc	r19, r1
   1a024:	29 f0       	breq	.+10     	; 0x1a030 <lif_check_dir+0x1d2>
   1a026:	ff ef       	ldi	r31, 0xFF	; 255
   1a028:	4f 1a       	sub	r4, r31
   1a02a:	5f 0a       	sbc	r5, r31
   1a02c:	6f 0a       	sbc	r6, r31
   1a02e:	7f 0a       	sbc	r7, r31
   1a030:	2b 80       	ldd	r2, Y+3	; 0x03
   1a032:	3c 80       	ldd	r3, Y+4	; 0x04
   1a034:	40 e6       	ldi	r20, 0x60	; 96
   1a036:	24 0e       	add	r2, r20
   1a038:	31 1c       	adc	r3, r1
   1a03a:	f1 01       	movw	r30, r2
   1a03c:	40 81       	ld	r20, Z
   1a03e:	51 81       	ldd	r21, Z+1	; 0x01
   1a040:	62 81       	ldd	r22, Z+2	; 0x02
   1a042:	73 81       	ldd	r23, Z+3	; 0x03
   1a044:	44 15       	cp	r20, r4
   1a046:	55 05       	cpc	r21, r5
   1a048:	66 05       	cpc	r22, r6
   1a04a:	77 05       	cpc	r23, r7
   1a04c:	28 f5       	brcc	.+74     	; 0x1a098 <lif_check_dir+0x23a>
   1a04e:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <debuglevel>
   1a052:	e0 ff       	sbrs	r30, 0
   1a054:	1f c0       	rjmp	.+62     	; 0x1a094 <lif_check_dir+0x236>
   1a056:	23 2b       	or	r18, r19
   1a058:	19 f0       	breq	.+6      	; 0x1a060 <lif_check_dir+0x202>
   1a05a:	01 96       	adiw	r24, 0x01	; 1
   1a05c:	a1 1d       	adc	r26, r1
   1a05e:	b1 1d       	adc	r27, r1
   1a060:	7f 93       	push	r23
   1a062:	6f 93       	push	r22
   1a064:	5f 93       	push	r21
   1a066:	4f 93       	push	r20
   1a068:	bf 93       	push	r27
   1a06a:	af 93       	push	r26
   1a06c:	9f 93       	push	r25
   1a06e:	8f 93       	push	r24
   1a070:	1f 92       	push	r1
   1a072:	1f 92       	push	r1
   1a074:	9f 92       	push	r9
   1a076:	8f 92       	push	r8
   1a078:	1f 93       	push	r17
   1a07a:	0f 93       	push	r16
   1a07c:	8c e2       	ldi	r24, 0x2C	; 44
   1a07e:	9e e3       	ldi	r25, 0x3E	; 62
   1a080:	1f 92       	push	r1
   1a082:	9f 93       	push	r25
   1a084:	8f 93       	push	r24
   1a086:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1a08a:	0f b6       	in	r0, 0x3f	; 63
   1a08c:	f8 94       	cli
   1a08e:	de bf       	out	0x3e, r29	; 62
   1a090:	0f be       	out	0x3f, r0	; 63
   1a092:	cd bf       	out	0x3d, r28	; 61
   1a094:	e1 2c       	mov	r14, r1
   1a096:	f1 2c       	mov	r15, r1
   1a098:	f6 01       	movw	r30, r12
   1a09a:	20 81       	ld	r18, Z
   1a09c:	31 81       	ldd	r19, Z+1	; 0x01
   1a09e:	49 01       	movw	r8, r18
   1a0a0:	a1 2c       	mov	r10, r1
   1a0a2:	b1 2c       	mov	r11, r1
   1a0a4:	bb 27       	eor	r27, r27
   1a0a6:	ab 2d       	mov	r26, r11
   1a0a8:	9a 2d       	mov	r25, r10
   1a0aa:	89 2d       	mov	r24, r9
   1a0ac:	a9 01       	movw	r20, r18
   1a0ae:	55 27       	eor	r21, r21
   1a0b0:	5a 83       	std	Y+2, r21	; 0x02
   1a0b2:	49 83       	std	Y+1, r20	; 0x01
   1a0b4:	2c 01       	movw	r4, r24
   1a0b6:	3d 01       	movw	r6, r26
   1a0b8:	45 2b       	or	r20, r21
   1a0ba:	29 f0       	breq	.+10     	; 0x1a0c6 <lif_check_dir+0x268>
   1a0bc:	5f ef       	ldi	r21, 0xFF	; 255
   1a0be:	45 1a       	sub	r4, r21
   1a0c0:	55 0a       	sbc	r5, r21
   1a0c2:	65 0a       	sbc	r6, r21
   1a0c4:	75 0a       	sbc	r7, r21
   1a0c6:	f1 01       	movw	r30, r2
   1a0c8:	40 81       	ld	r20, Z
   1a0ca:	51 81       	ldd	r21, Z+1	; 0x01
   1a0cc:	62 81       	ldd	r22, Z+2	; 0x02
   1a0ce:	73 81       	ldd	r23, Z+3	; 0x03
   1a0d0:	44 16       	cp	r4, r20
   1a0d2:	55 06       	cpc	r5, r21
   1a0d4:	66 06       	cpc	r6, r22
   1a0d6:	77 06       	cpc	r7, r23
   1a0d8:	38 f5       	brcc	.+78     	; 0x1a128 <lif_check_dir+0x2ca>
   1a0da:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   1a0de:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1a0e2:	32 ff       	sbrs	r19, 2
   1a0e4:	21 c0       	rjmp	.+66     	; 0x1a128 <lif_check_dir+0x2ca>
   1a0e6:	29 81       	ldd	r18, Y+1	; 0x01
   1a0e8:	3a 81       	ldd	r19, Y+2	; 0x02
   1a0ea:	23 2b       	or	r18, r19
   1a0ec:	19 f0       	breq	.+6      	; 0x1a0f4 <lif_check_dir+0x296>
   1a0ee:	01 96       	adiw	r24, 0x01	; 1
   1a0f0:	a1 1d       	adc	r26, r1
   1a0f2:	b1 1d       	adc	r27, r1
   1a0f4:	7f 93       	push	r23
   1a0f6:	6f 93       	push	r22
   1a0f8:	5f 93       	push	r21
   1a0fa:	4f 93       	push	r20
   1a0fc:	bf 93       	push	r27
   1a0fe:	af 93       	push	r26
   1a100:	9f 93       	push	r25
   1a102:	8f 93       	push	r24
   1a104:	1f 92       	push	r1
   1a106:	1f 92       	push	r1
   1a108:	9f 92       	push	r9
   1a10a:	8f 92       	push	r8
   1a10c:	1f 93       	push	r17
   1a10e:	0f 93       	push	r16
   1a110:	81 ee       	ldi	r24, 0xE1	; 225
   1a112:	9d e3       	ldi	r25, 0x3D	; 61
   1a114:	1f 92       	push	r1
   1a116:	9f 93       	push	r25
   1a118:	8f 93       	push	r24
   1a11a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1a11e:	0f b6       	in	r0, 0x3f	; 63
   1a120:	f8 94       	cli
   1a122:	de bf       	out	0x3e, r29	; 62
   1a124:	0f be       	out	0x3f, r0	; 63
   1a126:	cd bf       	out	0x3d, r28	; 61
   1a128:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1a12c:	80 ff       	sbrs	r24, 0
   1a12e:	15 c0       	rjmp	.+42     	; 0x1a15a <lif_check_dir+0x2fc>
   1a130:	f6 01       	movw	r30, r12
   1a132:	80 81       	ld	r24, Z
   1a134:	91 81       	ldd	r25, Z+1	; 0x01
   1a136:	89 2b       	or	r24, r25
   1a138:	81 f4       	brne	.+32     	; 0x1a15a <lif_check_dir+0x2fc>
   1a13a:	1f 93       	push	r17
   1a13c:	0f 93       	push	r16
   1a13e:	86 eb       	ldi	r24, 0xB6	; 182
   1a140:	9d e3       	ldi	r25, 0x3D	; 61
   1a142:	1f 92       	push	r1
   1a144:	9f 93       	push	r25
   1a146:	8f 93       	push	r24
   1a148:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1a14c:	0f 90       	pop	r0
   1a14e:	0f 90       	pop	r0
   1a150:	0f 90       	pop	r0
   1a152:	0f 90       	pop	r0
   1a154:	0f 90       	pop	r0
   1a156:	e1 2c       	mov	r14, r1
   1a158:	f1 2c       	mov	r15, r1
   1a15a:	eb 81       	ldd	r30, Y+3	; 0x03
   1a15c:	fc 81       	ldd	r31, Y+4	; 0x04
   1a15e:	e2 59       	subi	r30, 0x92	; 146
   1a160:	ff 4f       	sbci	r31, 0xFF	; 255
   1a162:	20 81       	ld	r18, Z
   1a164:	31 81       	ldd	r19, Z+1	; 0x01
   1a166:	21 15       	cp	r18, r1
   1a168:	f1 e0       	ldi	r31, 0x01	; 1
   1a16a:	3f 07       	cpc	r19, r31
   1a16c:	31 f1       	breq	.+76     	; 0x1a1ba <lif_check_dir+0x35c>
   1a16e:	40 91 b0 01 	lds	r20, 0x01B0	; 0x8001b0 <debuglevel>
   1a172:	50 91 b1 01 	lds	r21, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1a176:	ca 01       	movw	r24, r20
   1a178:	81 70       	andi	r24, 0x01	; 1
   1a17a:	99 27       	eor	r25, r25
   1a17c:	40 ff       	sbrs	r20, 0
   1a17e:	1e c0       	rjmp	.+60     	; 0x1a1bc <lif_check_dir+0x35e>
   1a180:	c9 01       	movw	r24, r18
   1a182:	1f 92       	push	r1
   1a184:	1f 92       	push	r1
   1a186:	9f 93       	push	r25
   1a188:	2f 93       	push	r18
   1a18a:	eb 81       	ldd	r30, Y+3	; 0x03
   1a18c:	fc 81       	ldd	r31, Y+4	; 0x04
   1a18e:	81 81       	ldd	r24, Z+1	; 0x01
   1a190:	8f 93       	push	r24
   1a192:	80 81       	ld	r24, Z
   1a194:	8f 93       	push	r24
   1a196:	8a e8       	ldi	r24, 0x8A	; 138
   1a198:	9d e3       	ldi	r25, 0x3D	; 61
   1a19a:	1f 92       	push	r1
   1a19c:	9f 93       	push	r25
   1a19e:	8f 93       	push	r24
   1a1a0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1a1a4:	0f b6       	in	r0, 0x3f	; 63
   1a1a6:	f8 94       	cli
   1a1a8:	de bf       	out	0x3e, r29	; 62
   1a1aa:	0f be       	out	0x3f, r0	; 63
   1a1ac:	cd bf       	out	0x3d, r28	; 61
   1a1ae:	80 e0       	ldi	r24, 0x00	; 0
   1a1b0:	90 e0       	ldi	r25, 0x00	; 0
   1a1b2:	04 c0       	rjmp	.+8      	; 0x1a1bc <lif_check_dir+0x35e>
   1a1b4:	81 e0       	ldi	r24, 0x01	; 1
   1a1b6:	90 e0       	ldi	r25, 0x00	; 0
   1a1b8:	01 c0       	rjmp	.+2      	; 0x1a1bc <lif_check_dir+0x35e>
   1a1ba:	c7 01       	movw	r24, r14
   1a1bc:	24 96       	adiw	r28, 0x04	; 4
   1a1be:	e2 e1       	ldi	r30, 0x12	; 18
   1a1c0:	0c 94 ab e9 	jmp	0x1d356	; 0x1d356 <__epilogue_restores__>

0001a1c4 <lif_close_volume>:
   1a1c4:	cf 93       	push	r28
   1a1c6:	df 93       	push	r29
   1a1c8:	00 97       	sbiw	r24, 0x00	; 0
   1a1ca:	f9 f0       	breq	.+62     	; 0x1a20a <lif_close_volume+0x46>
   1a1cc:	ec 01       	movw	r28, r24
   1a1ce:	8a 81       	ldd	r24, Y+2	; 0x02
   1a1d0:	9b 81       	ldd	r25, Y+3	; 0x03
   1a1d2:	00 97       	sbiw	r24, 0x00	; 0
   1a1d4:	79 f0       	breq	.+30     	; 0x1a1f4 <lif_close_volume+0x30>
   1a1d6:	22 e0       	ldi	r18, 0x02	; 2
   1a1d8:	30 e0       	ldi	r19, 0x00	; 0
   1a1da:	40 e0       	ldi	r20, 0x00	; 0
   1a1dc:	50 e0       	ldi	r21, 0x00	; 0
   1a1de:	ba 01       	movw	r22, r20
   1a1e0:	0e 94 d2 7e 	call	0xfda4	; 0xfda4 <fseek>
   1a1e4:	8a 81       	ldd	r24, Y+2	; 0x02
   1a1e6:	9b 81       	ldd	r25, Y+3	; 0x03
   1a1e8:	0e 94 ba 80 	call	0x10174	; 0x10174 <fclose>
   1a1ec:	1b 82       	std	Y+3, r1	; 0x03
   1a1ee:	1a 82       	std	Y+2, r1	; 0x02
   1a1f0:	0e 94 b5 7f 	call	0xff6a	; 0xff6a <sync>
   1a1f4:	88 81       	ld	r24, Y
   1a1f6:	99 81       	ldd	r25, Y+1	; 0x01
   1a1f8:	00 97       	sbiw	r24, 0x00	; 0
   1a1fa:	11 f0       	breq	.+4      	; 0x1a200 <lif_close_volume+0x3c>
   1a1fc:	0e 94 95 c7 	call	0x18f2a	; 0x18f2a <lif_free>
   1a200:	ce 01       	movw	r24, r28
   1a202:	b8 db       	rcall	.-2192   	; 0x19974 <lif_vol_clear>
   1a204:	ce 01       	movw	r24, r28
   1a206:	0e 94 95 c7 	call	0x18f2a	; 0x18f2a <lif_free>
   1a20a:	df 91       	pop	r29
   1a20c:	cf 91       	pop	r28
   1a20e:	08 95       	ret

0001a210 <lif_checkdirindex>:
   1a210:	a0 e0       	ldi	r26, 0x00	; 0
   1a212:	b0 e0       	ldi	r27, 0x00	; 0
   1a214:	ee e0       	ldi	r30, 0x0E	; 14
   1a216:	f1 ed       	ldi	r31, 0xD1	; 209
   1a218:	0c 94 99 e9 	jmp	0x1d332	; 0x1d332 <__prologue_saves__+0x14>
   1a21c:	77 fd       	sbrc	r23, 7
   1a21e:	26 c0       	rjmp	.+76     	; 0x1a26c <lif_checkdirindex+0x5c>
   1a220:	8b 01       	movw	r16, r22
   1a222:	07 2e       	mov	r0, r23
   1a224:	00 0c       	add	r0, r0
   1a226:	22 0b       	sbc	r18, r18
   1a228:	33 0b       	sbc	r19, r19
   1a22a:	45 e0       	ldi	r20, 0x05	; 5
   1a22c:	00 0f       	add	r16, r16
   1a22e:	11 1f       	adc	r17, r17
   1a230:	22 1f       	adc	r18, r18
   1a232:	33 1f       	adc	r19, r19
   1a234:	4a 95       	dec	r20
   1a236:	d1 f7       	brne	.-12     	; 0x1a22c <lif_checkdirindex+0x1c>
   1a238:	c1 2e       	mov	r12, r17
   1a23a:	d2 2e       	mov	r13, r18
   1a23c:	e3 2e       	mov	r14, r19
   1a23e:	ff 24       	eor	r15, r15
   1a240:	11 27       	eor	r17, r17
   1a242:	22 27       	eor	r18, r18
   1a244:	33 27       	eor	r19, r19
   1a246:	01 2b       	or	r16, r17
   1a248:	02 2b       	or	r16, r18
   1a24a:	03 2b       	or	r16, r19
   1a24c:	29 f0       	breq	.+10     	; 0x1a258 <lif_checkdirindex+0x48>
   1a24e:	2f ef       	ldi	r18, 0xFF	; 255
   1a250:	c2 1a       	sub	r12, r18
   1a252:	d2 0a       	sbc	r13, r18
   1a254:	e2 0a       	sbc	r14, r18
   1a256:	f2 0a       	sbc	r15, r18
   1a258:	fc 01       	movw	r30, r24
   1a25a:	05 a9       	ldd	r16, Z+53	; 0x35
   1a25c:	16 a9       	ldd	r17, Z+54	; 0x36
   1a25e:	27 a9       	ldd	r18, Z+55	; 0x37
   1a260:	30 ad       	ldd	r19, Z+56	; 0x38
   1a262:	0c 15       	cp	r16, r12
   1a264:	1d 05       	cpc	r17, r13
   1a266:	2e 05       	cpc	r18, r14
   1a268:	3f 05       	cpc	r19, r15
   1a26a:	30 f5       	brcc	.+76     	; 0x1a2b8 <lif_checkdirindex+0xa8>
   1a26c:	ec 01       	movw	r28, r24
   1a26e:	7f 93       	push	r23
   1a270:	6f 93       	push	r22
   1a272:	89 81       	ldd	r24, Y+1	; 0x01
   1a274:	8f 93       	push	r24
   1a276:	88 81       	ld	r24, Y
   1a278:	8f 93       	push	r24
   1a27a:	80 e2       	ldi	r24, 0x20	; 32
   1a27c:	9d e3       	ldi	r25, 0x3D	; 61
   1a27e:	1f 92       	push	r1
   1a280:	9f 93       	push	r25
   1a282:	8f 93       	push	r24
   1a284:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1a288:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   1a28c:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1a290:	8d b7       	in	r24, 0x3d	; 61
   1a292:	9e b7       	in	r25, 0x3e	; 62
   1a294:	07 96       	adiw	r24, 0x07	; 7
   1a296:	0f b6       	in	r0, 0x3f	; 63
   1a298:	f8 94       	cli
   1a29a:	9e bf       	out	0x3e, r25	; 62
   1a29c:	0f be       	out	0x3f, r0	; 63
   1a29e:	8d bf       	out	0x3d, r24	; 61
   1a2a0:	c9 01       	movw	r24, r18
   1a2a2:	88 27       	eor	r24, r24
   1a2a4:	94 70       	andi	r25, 0x04	; 4
   1a2a6:	32 ff       	sbrs	r19, 2
   1a2a8:	09 c0       	rjmp	.+18     	; 0x1a2bc <lif_checkdirindex+0xac>
   1a2aa:	65 e3       	ldi	r22, 0x35	; 53
   1a2ac:	76 e1       	ldi	r23, 0x16	; 22
   1a2ae:	ce 01       	movw	r24, r28
   1a2b0:	68 db       	rcall	.-2352   	; 0x19982 <lif_dump_vol>
   1a2b2:	80 e0       	ldi	r24, 0x00	; 0
   1a2b4:	90 e0       	ldi	r25, 0x00	; 0
   1a2b6:	02 c0       	rjmp	.+4      	; 0x1a2bc <lif_checkdirindex+0xac>
   1a2b8:	81 e0       	ldi	r24, 0x01	; 1
   1a2ba:	90 e0       	ldi	r25, 0x00	; 0
   1a2bc:	cd b7       	in	r28, 0x3d	; 61
   1a2be:	de b7       	in	r29, 0x3e	; 62
   1a2c0:	e8 e0       	ldi	r30, 0x08	; 8
   1a2c2:	0c 94 b5 e9 	jmp	0x1d36a	; 0x1d36a <__epilogue_restores__+0x14>

0001a2c6 <lif_readdirindex>:
   1a2c6:	a0 e2       	ldi	r26, 0x20	; 32
   1a2c8:	b0 e0       	ldi	r27, 0x00	; 0
   1a2ca:	e9 e6       	ldi	r30, 0x69	; 105
   1a2cc:	f1 ed       	ldi	r31, 0xD1	; 209
   1a2ce:	0c 94 99 e9 	jmp	0x1d332	; 0x1d332 <__prologue_saves__+0x14>
   1a2d2:	7c 01       	movw	r14, r24
   1a2d4:	6b 01       	movw	r12, r22
   1a2d6:	9c df       	rcall	.-200    	; 0x1a210 <lif_checkdirindex>
   1a2d8:	89 2b       	or	r24, r25
   1a2da:	19 f4       	brne	.+6      	; 0x1a2e2 <lif_readdirindex+0x1c>
   1a2dc:	00 e0       	ldi	r16, 0x00	; 0
   1a2de:	10 e0       	ldi	r17, 0x00	; 0
   1a2e0:	56 c0       	rjmp	.+172    	; 0x1a38e <lif_readdirindex+0xc8>
   1a2e2:	f7 01       	movw	r30, r14
   1a2e4:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a2e6:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a2e8:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a2ea:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a2ec:	44 27       	eor	r20, r20
   1a2ee:	58 2f       	mov	r21, r24
   1a2f0:	69 2f       	mov	r22, r25
   1a2f2:	7a 2f       	mov	r23, r26
   1a2f4:	c6 01       	movw	r24, r12
   1a2f6:	0d 2c       	mov	r0, r13
   1a2f8:	00 0c       	add	r0, r0
   1a2fa:	aa 0b       	sbc	r26, r26
   1a2fc:	bb 0b       	sbc	r27, r27
   1a2fe:	35 e0       	ldi	r19, 0x05	; 5
   1a300:	88 0f       	add	r24, r24
   1a302:	99 1f       	adc	r25, r25
   1a304:	aa 1f       	adc	r26, r26
   1a306:	bb 1f       	adc	r27, r27
   1a308:	3a 95       	dec	r19
   1a30a:	d1 f7       	brne	.-12     	; 0x1a300 <lif_readdirindex+0x3a>
   1a30c:	9a 01       	movw	r18, r20
   1a30e:	ab 01       	movw	r20, r22
   1a310:	28 0f       	add	r18, r24
   1a312:	39 1f       	adc	r19, r25
   1a314:	4a 1f       	adc	r20, r26
   1a316:	5b 1f       	adc	r21, r27
   1a318:	00 e2       	ldi	r16, 0x20	; 32
   1a31a:	10 e0       	ldi	r17, 0x00	; 0
   1a31c:	be 01       	movw	r22, r28
   1a31e:	6f 5f       	subi	r22, 0xFF	; 255
   1a320:	7f 4f       	sbci	r23, 0xFF	; 255
   1a322:	c7 01       	movw	r24, r14
   1a324:	0e 94 4a c8 	call	0x19094	; 0x19094 <lif_read>
   1a328:	60 32       	cpi	r22, 0x20	; 32
   1a32a:	71 05       	cpc	r23, r1
   1a32c:	81 05       	cpc	r24, r1
   1a32e:	91 05       	cpc	r25, r1
   1a330:	a8 f2       	brcs	.-86     	; 0x1a2dc <lif_readdirindex+0x16>
   1a332:	b7 01       	movw	r22, r14
   1a334:	ce 01       	movw	r24, r28
   1a336:	01 96       	adiw	r24, 0x01	; 1
   1a338:	c1 d9       	rcall	.-3198   	; 0x196bc <lif_str2dir>
   1a33a:	f7 01       	movw	r30, r14
   1a33c:	e6 5a       	subi	r30, 0xA6	; 166
   1a33e:	ff 4f       	sbci	r31, 0xFF	; 255
   1a340:	80 81       	ld	r24, Z
   1a342:	91 81       	ldd	r25, Z+1	; 0x01
   1a344:	01 96       	adiw	r24, 0x01	; 1
   1a346:	19 f4       	brne	.+6      	; 0x1a34e <lif_readdirindex+0x88>
   1a348:	f7 01       	movw	r30, r14
   1a34a:	d3 a2       	std	Z+35, r13	; 0x23
   1a34c:	c2 a2       	std	Z+34, r12	; 0x22
   1a34e:	c7 01       	movw	r24, r14
   1a350:	86 dd       	rcall	.-1268   	; 0x19e5e <lif_check_dir>
   1a352:	8c 01       	movw	r16, r24
   1a354:	89 2b       	or	r24, r25
   1a356:	c9 f4       	brne	.+50     	; 0x1a38a <lif_readdirindex+0xc4>
   1a358:	df 92       	push	r13
   1a35a:	cf 92       	push	r12
   1a35c:	80 e0       	ldi	r24, 0x00	; 0
   1a35e:	9d e3       	ldi	r25, 0x3D	; 61
   1a360:	1f 92       	push	r1
   1a362:	9f 93       	push	r25
   1a364:	8f 93       	push	r24
   1a366:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1a36a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1a36e:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1a372:	0f 90       	pop	r0
   1a374:	0f 90       	pop	r0
   1a376:	0f 90       	pop	r0
   1a378:	0f 90       	pop	r0
   1a37a:	0f 90       	pop	r0
   1a37c:	92 ff       	sbrs	r25, 2
   1a37e:	ae cf       	rjmp	.-164    	; 0x1a2dc <lif_readdirindex+0x16>
   1a380:	66 e4       	ldi	r22, 0x46	; 70
   1a382:	76 e1       	ldi	r23, 0x16	; 22
   1a384:	c7 01       	movw	r24, r14
   1a386:	fd da       	rcall	.-2566   	; 0x19982 <lif_dump_vol>
   1a388:	02 c0       	rjmp	.+4      	; 0x1a38e <lif_readdirindex+0xc8>
   1a38a:	01 e0       	ldi	r16, 0x01	; 1
   1a38c:	10 e0       	ldi	r17, 0x00	; 0
   1a38e:	c8 01       	movw	r24, r16
   1a390:	a0 96       	adiw	r28, 0x20	; 32
   1a392:	e8 e0       	ldi	r30, 0x08	; 8
   1a394:	0c 94 b5 e9 	jmp	0x1d36a	; 0x1d36a <__epilogue_restores__+0x14>

0001a398 <lif_writedirindex>:
   1a398:	a0 e2       	ldi	r26, 0x20	; 32
   1a39a:	b0 e0       	ldi	r27, 0x00	; 0
   1a39c:	e2 ed       	ldi	r30, 0xD2	; 210
   1a39e:	f1 ed       	ldi	r31, 0xD1	; 209
   1a3a0:	0c 94 97 e9 	jmp	0x1d32e	; 0x1d32e <__prologue_saves__+0x10>
   1a3a4:	5c 01       	movw	r10, r24
   1a3a6:	6b 01       	movw	r12, r22
   1a3a8:	5a dd       	rcall	.-1356   	; 0x19e5e <lif_check_dir>
   1a3aa:	7c 01       	movw	r14, r24
   1a3ac:	89 2b       	or	r24, r25
   1a3ae:	71 f4       	brne	.+28     	; 0x1a3cc <lif_writedirindex+0x34>
   1a3b0:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1a3b4:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1a3b8:	92 fd       	sbrc	r25, 2
   1a3ba:	03 c0       	rjmp	.+6      	; 0x1a3c2 <lif_writedirindex+0x2a>
   1a3bc:	e1 2c       	mov	r14, r1
   1a3be:	f1 2c       	mov	r15, r1
   1a3c0:	42 c0       	rjmp	.+132    	; 0x1a446 <lif_writedirindex+0xae>
   1a3c2:	67 e5       	ldi	r22, 0x57	; 87
   1a3c4:	76 e1       	ldi	r23, 0x16	; 22
   1a3c6:	c5 01       	movw	r24, r10
   1a3c8:	dc da       	rcall	.-2632   	; 0x19982 <lif_dump_vol>
   1a3ca:	3d c0       	rjmp	.+122    	; 0x1a446 <lif_writedirindex+0xae>
   1a3cc:	b6 01       	movw	r22, r12
   1a3ce:	c5 01       	movw	r24, r10
   1a3d0:	1f df       	rcall	.-450    	; 0x1a210 <lif_checkdirindex>
   1a3d2:	89 2b       	or	r24, r25
   1a3d4:	99 f3       	breq	.-26     	; 0x1a3bc <lif_writedirindex+0x24>
   1a3d6:	f5 01       	movw	r30, r10
   1a3d8:	e6 5a       	subi	r30, 0xA6	; 166
   1a3da:	ff 4f       	sbci	r31, 0xFF	; 255
   1a3dc:	80 81       	ld	r24, Z
   1a3de:	91 81       	ldd	r25, Z+1	; 0x01
   1a3e0:	01 96       	adiw	r24, 0x01	; 1
   1a3e2:	19 f4       	brne	.+6      	; 0x1a3ea <lif_writedirindex+0x52>
   1a3e4:	f5 01       	movw	r30, r10
   1a3e6:	d3 a2       	std	Z+35, r13	; 0x23
   1a3e8:	c2 a2       	std	Z+34, r12	; 0x22
   1a3ea:	f5 01       	movw	r30, r10
   1a3ec:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a3ee:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a3f0:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a3f2:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a3f4:	ba 2f       	mov	r27, r26
   1a3f6:	a9 2f       	mov	r26, r25
   1a3f8:	98 2f       	mov	r25, r24
   1a3fa:	88 27       	eor	r24, r24
   1a3fc:	0d 2c       	mov	r0, r13
   1a3fe:	00 0c       	add	r0, r0
   1a400:	ee 08       	sbc	r14, r14
   1a402:	ff 08       	sbc	r15, r15
   1a404:	35 e0       	ldi	r19, 0x05	; 5
   1a406:	cc 0c       	add	r12, r12
   1a408:	dd 1c       	adc	r13, r13
   1a40a:	ee 1c       	adc	r14, r14
   1a40c:	ff 1c       	adc	r15, r15
   1a40e:	3a 95       	dec	r19
   1a410:	d1 f7       	brne	.-12     	; 0x1a406 <lif_writedirindex+0x6e>
   1a412:	c8 0e       	add	r12, r24
   1a414:	d9 1e       	adc	r13, r25
   1a416:	ea 1e       	adc	r14, r26
   1a418:	fb 1e       	adc	r15, r27
   1a41a:	be 01       	movw	r22, r28
   1a41c:	6f 5f       	subi	r22, 0xFF	; 255
   1a41e:	7f 4f       	sbci	r23, 0xFF	; 255
   1a420:	c5 01       	movw	r24, r10
   1a422:	db d8       	rcall	.-3658   	; 0x195da <lif_dir2str>
   1a424:	00 e2       	ldi	r16, 0x20	; 32
   1a426:	10 e0       	ldi	r17, 0x00	; 0
   1a428:	a7 01       	movw	r20, r14
   1a42a:	96 01       	movw	r18, r12
   1a42c:	be 01       	movw	r22, r28
   1a42e:	6f 5f       	subi	r22, 0xFF	; 255
   1a430:	7f 4f       	sbci	r23, 0xFF	; 255
   1a432:	c5 01       	movw	r24, r10
   1a434:	0e 94 a3 c8 	call	0x19146	; 0x19146 <lif_write>
   1a438:	31 e0       	ldi	r19, 0x01	; 1
   1a43a:	20 e0       	ldi	r18, 0x00	; 0
   1a43c:	80 97       	sbiw	r24, 0x20	; 32
   1a43e:	0c f4       	brge	.+2      	; 0x1a442 <lif_writedirindex+0xaa>
   1a440:	30 e0       	ldi	r19, 0x00	; 0
   1a442:	e3 2e       	mov	r14, r19
   1a444:	f2 2e       	mov	r15, r18
   1a446:	c7 01       	movw	r24, r14
   1a448:	a0 96       	adiw	r28, 0x20	; 32
   1a44a:	ea e0       	ldi	r30, 0x0A	; 10
   1a44c:	0c 94 b3 e9 	jmp	0x1d366	; 0x1d366 <__epilogue_restores__+0x10>

0001a450 <lif_writedirEOF>:
   1a450:	0f 93       	push	r16
   1a452:	1f 93       	push	r17
   1a454:	cf 93       	push	r28
   1a456:	df 93       	push	r29
   1a458:	ec 01       	movw	r28, r24
   1a45a:	8b 01       	movw	r16, r22
   1a45c:	83 da       	rcall	.-2810   	; 0x19964 <lif_dir_clear>
   1a45e:	fe 01       	movw	r30, r28
   1a460:	e6 5a       	subi	r30, 0xA6	; 166
   1a462:	ff 4f       	sbci	r31, 0xFF	; 255
   1a464:	8f ef       	ldi	r24, 0xFF	; 255
   1a466:	9f ef       	ldi	r25, 0xFF	; 255
   1a468:	91 83       	std	Z+1, r25	; 0x01
   1a46a:	80 83       	st	Z, r24
   1a46c:	1b a3       	std	Y+35, r17	; 0x23
   1a46e:	0a a3       	std	Y+34, r16	; 0x22
   1a470:	b8 01       	movw	r22, r16
   1a472:	ce 01       	movw	r24, r28
   1a474:	91 df       	rcall	.-222    	; 0x1a398 <lif_writedirindex>
   1a476:	df 91       	pop	r29
   1a478:	cf 91       	pop	r28
   1a47a:	1f 91       	pop	r17
   1a47c:	0f 91       	pop	r16
   1a47e:	08 95       	ret

0001a480 <lif_updatefree>:
   1a480:	2f 92       	push	r2
   1a482:	3f 92       	push	r3
   1a484:	4f 92       	push	r4
   1a486:	5f 92       	push	r5
   1a488:	6f 92       	push	r6
   1a48a:	7f 92       	push	r7
   1a48c:	8f 92       	push	r8
   1a48e:	af 92       	push	r10
   1a490:	bf 92       	push	r11
   1a492:	cf 92       	push	r12
   1a494:	df 92       	push	r13
   1a496:	ef 92       	push	r14
   1a498:	ff 92       	push	r15
   1a49a:	0f 93       	push	r16
   1a49c:	1f 93       	push	r17
   1a49e:	cf 93       	push	r28
   1a4a0:	df 93       	push	r29
   1a4a2:	cd b7       	in	r28, 0x3d	; 61
   1a4a4:	de b7       	in	r29, 0x3e	; 62
   1a4a6:	28 97       	sbiw	r28, 0x08	; 8
   1a4a8:	0f b6       	in	r0, 0x3f	; 63
   1a4aa:	f8 94       	cli
   1a4ac:	de bf       	out	0x3e, r29	; 62
   1a4ae:	0f be       	out	0x3f, r0	; 63
   1a4b0:	cd bf       	out	0x3d, r28	; 61
   1a4b2:	98 87       	std	Y+8, r25	; 0x08
   1a4b4:	8f 83       	std	Y+7, r24	; 0x07
   1a4b6:	fc 01       	movw	r30, r24
   1a4b8:	24 84       	ldd	r2, Z+12	; 0x0c
   1a4ba:	35 84       	ldd	r3, Z+13	; 0x0d
   1a4bc:	46 84       	ldd	r4, Z+14	; 0x0e
   1a4be:	57 84       	ldd	r5, Z+15	; 0x0f
   1a4c0:	80 89       	ldd	r24, Z+16	; 0x10
   1a4c2:	91 89       	ldd	r25, Z+17	; 0x11
   1a4c4:	a2 89       	ldd	r26, Z+18	; 0x12
   1a4c6:	b3 89       	ldd	r27, Z+19	; 0x13
   1a4c8:	80 8f       	std	Z+24, r24	; 0x18
   1a4ca:	91 8f       	std	Z+25, r25	; 0x19
   1a4cc:	a2 8f       	std	Z+26, r26	; 0x1a
   1a4ce:	b3 8f       	std	Z+27, r27	; 0x1b
   1a4d0:	14 8a       	std	Z+20, r1	; 0x14
   1a4d2:	15 8a       	std	Z+21, r1	; 0x15
   1a4d4:	16 8a       	std	Z+22, r1	; 0x16
   1a4d6:	17 8a       	std	Z+23, r1	; 0x17
   1a4d8:	17 8e       	std	Z+31, r1	; 0x1f
   1a4da:	16 8e       	std	Z+30, r1	; 0x1e
   1a4dc:	15 8e       	std	Z+29, r1	; 0x1d
   1a4de:	14 8e       	std	Z+28, r1	; 0x1c
   1a4e0:	11 a2       	std	Z+33, r1	; 0x21
   1a4e2:	10 a2       	std	Z+32, r1	; 0x20
   1a4e4:	13 a2       	std	Z+35, r1	; 0x23
   1a4e6:	12 a2       	std	Z+34, r1	; 0x22
   1a4e8:	cc 24       	eor	r12, r12
   1a4ea:	c3 94       	inc	r12
   1a4ec:	d1 2c       	mov	r13, r1
   1a4ee:	0f ef       	ldi	r16, 0xFF	; 255
   1a4f0:	1f ef       	ldi	r17, 0xFF	; 255
   1a4f2:	e6 5a       	subi	r30, 0xA6	; 166
   1a4f4:	ff 4f       	sbci	r31, 0xFF	; 255
   1a4f6:	fc 83       	std	Y+4, r31	; 0x04
   1a4f8:	eb 83       	std	Y+3, r30	; 0x03
   1a4fa:	af 80       	ldd	r10, Y+7	; 0x07
   1a4fc:	b8 84       	ldd	r11, Y+8	; 0x08
   1a4fe:	fc e5       	ldi	r31, 0x5C	; 92
   1a500:	af 0e       	add	r10, r31
   1a502:	b1 1c       	adc	r11, r1
   1a504:	8f 81       	ldd	r24, Y+7	; 0x07
   1a506:	98 85       	ldd	r25, Y+8	; 0x08
   1a508:	80 5a       	subi	r24, 0xA0	; 160
   1a50a:	9f 4f       	sbci	r25, 0xFF	; 255
   1a50c:	9e 83       	std	Y+6, r25	; 0x06
   1a50e:	8d 83       	std	Y+5, r24	; 0x05
   1a510:	ef 81       	ldd	r30, Y+7	; 0x07
   1a512:	f8 85       	ldd	r31, Y+8	; 0x08
   1a514:	e1 5b       	subi	r30, 0xB1	; 177
   1a516:	ff 4f       	sbci	r31, 0xFF	; 255
   1a518:	fa 83       	std	Y+2, r31	; 0x02
   1a51a:	e9 83       	std	Y+1, r30	; 0x01
   1a51c:	83 eb       	ldi	r24, 0xB3	; 179
   1a51e:	9c e3       	ldi	r25, 0x3C	; 60
   1a520:	3c 01       	movw	r6, r24
   1a522:	76 01       	movw	r14, r12
   1a524:	21 e0       	ldi	r18, 0x01	; 1
   1a526:	e2 1a       	sub	r14, r18
   1a528:	f1 08       	sbc	r15, r1
   1a52a:	b7 01       	movw	r22, r14
   1a52c:	8f 81       	ldd	r24, Y+7	; 0x07
   1a52e:	98 85       	ldd	r25, Y+8	; 0x08
   1a530:	ca de       	rcall	.-620    	; 0x1a2c6 <lif_readdirindex>
   1a532:	89 2b       	or	r24, r25
   1a534:	19 f4       	brne	.+6      	; 0x1a53c <lif_updatefree+0xbc>
   1a536:	80 e0       	ldi	r24, 0x00	; 0
   1a538:	90 e0       	ldi	r25, 0x00	; 0
   1a53a:	92 c0       	rjmp	.+292    	; 0x1a660 <lif_updatefree+0x1e0>
   1a53c:	eb 81       	ldd	r30, Y+3	; 0x03
   1a53e:	fc 81       	ldd	r31, Y+4	; 0x04
   1a540:	80 81       	ld	r24, Z
   1a542:	91 81       	ldd	r25, Z+1	; 0x01
   1a544:	8f 3f       	cpi	r24, 0xFF	; 255
   1a546:	ff ef       	ldi	r31, 0xFF	; 255
   1a548:	9f 07       	cpc	r25, r31
   1a54a:	c1 f4       	brne	.+48     	; 0x1a57c <lif_updatefree+0xfc>
   1a54c:	ef 81       	ldd	r30, Y+7	; 0x07
   1a54e:	f8 85       	ldd	r31, Y+8	; 0x08
   1a550:	0f 3f       	cpi	r16, 0xFF	; 255
   1a552:	2f ef       	ldi	r18, 0xFF	; 255
   1a554:	12 07       	cpc	r17, r18
   1a556:	09 f4       	brne	.+2      	; 0x1a55a <lif_updatefree+0xda>
   1a558:	79 c0       	rjmp	.+242    	; 0x1a64c <lif_updatefree+0x1cc>
   1a55a:	13 a3       	std	Z+35, r17	; 0x23
   1a55c:	02 a3       	std	Z+34, r16	; 0x22
   1a55e:	e0 1a       	sub	r14, r16
   1a560:	f1 0a       	sbc	r15, r17
   1a562:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a564:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a566:	8e 19       	sub	r24, r14
   1a568:	9f 09       	sbc	r25, r15
   1a56a:	97 8f       	std	Z+31, r25	; 0x1f
   1a56c:	86 8f       	std	Z+30, r24	; 0x1e
   1a56e:	b8 01       	movw	r22, r16
   1a570:	cf 01       	movw	r24, r30
   1a572:	6e df       	rcall	.-292    	; 0x1a450 <lif_writedirEOF>
   1a574:	89 2b       	or	r24, r25
   1a576:	09 f0       	breq	.+2      	; 0x1a57a <lif_updatefree+0xfa>
   1a578:	6b c0       	rjmp	.+214    	; 0x1a650 <lif_updatefree+0x1d0>
   1a57a:	dd cf       	rjmp	.-70     	; 0x1a536 <lif_updatefree+0xb6>
   1a57c:	89 2b       	or	r24, r25
   1a57e:	81 f4       	brne	.+32     	; 0x1a5a0 <lif_updatefree+0x120>
   1a580:	0f 3f       	cpi	r16, 0xFF	; 255
   1a582:	ff ef       	ldi	r31, 0xFF	; 255
   1a584:	1f 07       	cpc	r17, r31
   1a586:	09 f4       	brne	.+2      	; 0x1a58a <lif_updatefree+0x10a>
   1a588:	87 01       	movw	r16, r14
   1a58a:	ef 81       	ldd	r30, Y+7	; 0x07
   1a58c:	f8 85       	ldd	r31, Y+8	; 0x08
   1a58e:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a590:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a592:	01 96       	adiw	r24, 0x01	; 1
   1a594:	97 8f       	std	Z+31, r25	; 0x1f
   1a596:	86 8f       	std	Z+30, r24	; 0x1e
   1a598:	ff ef       	ldi	r31, 0xFF	; 255
   1a59a:	cf 1a       	sub	r12, r31
   1a59c:	df 0a       	sbc	r13, r31
   1a59e:	c1 cf       	rjmp	.-126    	; 0x1a522 <lif_updatefree+0xa2>
   1a5a0:	f5 01       	movw	r30, r10
   1a5a2:	80 81       	ld	r24, Z
   1a5a4:	91 81       	ldd	r25, Z+1	; 0x01
   1a5a6:	a2 81       	ldd	r26, Z+2	; 0x02
   1a5a8:	b3 81       	ldd	r27, Z+3	; 0x03
   1a5aa:	82 15       	cp	r24, r2
   1a5ac:	93 05       	cpc	r25, r3
   1a5ae:	a4 05       	cpc	r26, r4
   1a5b0:	b5 05       	cpc	r27, r5
   1a5b2:	c0 f4       	brcc	.+48     	; 0x1a5e4 <lif_updatefree+0x164>
   1a5b4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1a5b8:	80 ff       	sbrs	r24, 0
   1a5ba:	14 c0       	rjmp	.+40     	; 0x1a5e4 <lif_updatefree+0x164>
   1a5bc:	fa 81       	ldd	r31, Y+2	; 0x02
   1a5be:	ff 93       	push	r31
   1a5c0:	29 81       	ldd	r18, Y+1	; 0x01
   1a5c2:	2f 93       	push	r18
   1a5c4:	ef 81       	ldd	r30, Y+7	; 0x07
   1a5c6:	f8 85       	ldd	r31, Y+8	; 0x08
   1a5c8:	81 81       	ldd	r24, Z+1	; 0x01
   1a5ca:	8f 93       	push	r24
   1a5cc:	80 81       	ld	r24, Z
   1a5ce:	8f 93       	push	r24
   1a5d0:	1f 92       	push	r1
   1a5d2:	7f 92       	push	r7
   1a5d4:	6f 92       	push	r6
   1a5d6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1a5da:	0f b6       	in	r0, 0x3f	; 63
   1a5dc:	f8 94       	cli
   1a5de:	de bf       	out	0x3e, r29	; 62
   1a5e0:	0f be       	out	0x3f, r0	; 63
   1a5e2:	cd bf       	out	0x3d, r28	; 61
   1a5e4:	ed 81       	ldd	r30, Y+5	; 0x05
   1a5e6:	fe 81       	ldd	r31, Y+6	; 0x06
   1a5e8:	80 81       	ld	r24, Z
   1a5ea:	91 81       	ldd	r25, Z+1	; 0x01
   1a5ec:	a2 81       	ldd	r26, Z+2	; 0x02
   1a5ee:	b3 81       	ldd	r27, Z+3	; 0x03
   1a5f0:	ef 81       	ldd	r30, Y+7	; 0x07
   1a5f2:	f8 85       	ldd	r31, Y+8	; 0x08
   1a5f4:	44 89       	ldd	r20, Z+20	; 0x14
   1a5f6:	55 89       	ldd	r21, Z+21	; 0x15
   1a5f8:	66 89       	ldd	r22, Z+22	; 0x16
   1a5fa:	77 89       	ldd	r23, Z+23	; 0x17
   1a5fc:	48 0f       	add	r20, r24
   1a5fe:	59 1f       	adc	r21, r25
   1a600:	6a 1f       	adc	r22, r26
   1a602:	7b 1f       	adc	r23, r27
   1a604:	44 8b       	std	Z+20, r20	; 0x14
   1a606:	55 8b       	std	Z+21, r21	; 0x15
   1a608:	66 8b       	std	Z+22, r22	; 0x16
   1a60a:	77 8b       	std	Z+23, r23	; 0x17
   1a60c:	40 8d       	ldd	r20, Z+24	; 0x18
   1a60e:	51 8d       	ldd	r21, Z+25	; 0x19
   1a610:	62 8d       	ldd	r22, Z+26	; 0x1a
   1a612:	73 8d       	ldd	r23, Z+27	; 0x1b
   1a614:	48 1b       	sub	r20, r24
   1a616:	59 0b       	sbc	r21, r25
   1a618:	6a 0b       	sbc	r22, r26
   1a61a:	7b 0b       	sbc	r23, r27
   1a61c:	40 8f       	std	Z+24, r20	; 0x18
   1a61e:	51 8f       	std	Z+25, r21	; 0x19
   1a620:	62 8f       	std	Z+26, r22	; 0x1a
   1a622:	73 8f       	std	Z+27, r23	; 0x1b
   1a624:	24 8d       	ldd	r18, Z+28	; 0x1c
   1a626:	35 8d       	ldd	r19, Z+29	; 0x1d
   1a628:	2f 5f       	subi	r18, 0xFF	; 255
   1a62a:	3f 4f       	sbci	r19, 0xFF	; 255
   1a62c:	35 8f       	std	Z+29, r19	; 0x1d
   1a62e:	24 8f       	std	Z+28, r18	; 0x1c
   1a630:	f5 01       	movw	r30, r10
   1a632:	40 81       	ld	r20, Z
   1a634:	51 81       	ldd	r21, Z+1	; 0x01
   1a636:	62 81       	ldd	r22, Z+2	; 0x02
   1a638:	73 81       	ldd	r23, Z+3	; 0x03
   1a63a:	1c 01       	movw	r2, r24
   1a63c:	2d 01       	movw	r4, r26
   1a63e:	24 0e       	add	r2, r20
   1a640:	35 1e       	adc	r3, r21
   1a642:	46 1e       	adc	r4, r22
   1a644:	57 1e       	adc	r5, r23
   1a646:	0f ef       	ldi	r16, 0xFF	; 255
   1a648:	1f ef       	ldi	r17, 0xFF	; 255
   1a64a:	a6 cf       	rjmp	.-180    	; 0x1a598 <lif_updatefree+0x118>
   1a64c:	f3 a2       	std	Z+35, r15	; 0x23
   1a64e:	e2 a2       	std	Z+34, r14	; 0x22
   1a650:	8f ef       	ldi	r24, 0xFF	; 255
   1a652:	9f ef       	ldi	r25, 0xFF	; 255
   1a654:	ef 81       	ldd	r30, Y+7	; 0x07
   1a656:	f8 85       	ldd	r31, Y+8	; 0x08
   1a658:	91 a3       	std	Z+33, r25	; 0x21
   1a65a:	80 a3       	std	Z+32, r24	; 0x20
   1a65c:	8f 81       	ldd	r24, Y+7	; 0x07
   1a65e:	98 85       	ldd	r25, Y+8	; 0x08
   1a660:	28 96       	adiw	r28, 0x08	; 8
   1a662:	0f b6       	in	r0, 0x3f	; 63
   1a664:	f8 94       	cli
   1a666:	de bf       	out	0x3e, r29	; 62
   1a668:	0f be       	out	0x3f, r0	; 63
   1a66a:	cd bf       	out	0x3d, r28	; 61
   1a66c:	df 91       	pop	r29
   1a66e:	cf 91       	pop	r28
   1a670:	1f 91       	pop	r17
   1a672:	0f 91       	pop	r16
   1a674:	ff 90       	pop	r15
   1a676:	ef 90       	pop	r14
   1a678:	df 90       	pop	r13
   1a67a:	cf 90       	pop	r12
   1a67c:	bf 90       	pop	r11
   1a67e:	af 90       	pop	r10
   1a680:	8f 90       	pop	r8
   1a682:	7f 90       	pop	r7
   1a684:	6f 90       	pop	r6
   1a686:	5f 90       	pop	r5
   1a688:	4f 90       	pop	r4
   1a68a:	3f 90       	pop	r3
   1a68c:	2f 90       	pop	r2
   1a68e:	08 95       	ret

0001a690 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   1a690:	a4 e1       	ldi	r26, 0x14	; 20
   1a692:	b1 e0       	ldi	r27, 0x01	; 1
   1a694:	ee e4       	ldi	r30, 0x4E	; 78
   1a696:	f3 ed       	ldi	r31, 0xD3	; 211
   1a698:	0c 94 8f e9 	jmp	0x1d31e	; 0x1d31e <__prologue_saves__>
   1a69c:	4c 01       	movw	r8, r24
   1a69e:	3b 01       	movw	r6, r22
   1a6a0:	19 01       	movw	r2, r18
   1a6a2:	2a 01       	movw	r4, r20
   1a6a4:	cf 5e       	subi	r28, 0xEF	; 239
   1a6a6:	de 4f       	sbci	r29, 0xFE	; 254
   1a6a8:	e8 82       	st	Y, r14
   1a6aa:	f9 82       	std	Y+1, r15	; 0x01
   1a6ac:	0a 83       	std	Y+2, r16	; 0x02
   1a6ae:	1b 83       	std	Y+3, r17	; 0x03
   1a6b0:	c1 51       	subi	r28, 0x11	; 17
   1a6b2:	d1 40       	sbci	r29, 0x01	; 1
   1a6b4:	c3 5f       	subi	r28, 0xF3	; 243
   1a6b6:	de 4f       	sbci	r29, 0xFE	; 254
   1a6b8:	a8 82       	st	Y, r10
   1a6ba:	b9 82       	std	Y+1, r11	; 0x01
   1a6bc:	ca 82       	std	Y+2, r12	; 0x02
   1a6be:	db 82       	std	Y+3, r13	; 0x03
   1a6c0:	cd 50       	subi	r28, 0x0D	; 13
   1a6c2:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   1a6c4:	80 e0       	ldi	r24, 0x00	; 0
   1a6c6:	90 e0       	ldi	r25, 0x00	; 0
   1a6c8:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <time>
   1a6cc:	5b 01       	movw	r10, r22
   1a6ce:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   1a6d0:	64 e7       	ldi	r22, 0x74	; 116
   1a6d2:	70 e0       	ldi	r23, 0x00	; 0
   1a6d4:	80 e0       	ldi	r24, 0x00	; 0
   1a6d6:	90 e0       	ldi	r25, 0x00	; 0
   1a6d8:	0e 94 69 c7 	call	0x18ed2	; 0x18ed2 <lif_calloc>
   1a6dc:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1a6de:	00 97       	sbiw	r24, 0x00	; 0
   1a6e0:	09 f4       	brne	.+2      	; 0x1a6e4 <lif_create_volume+0x54>
        return(NULL);
    
    lif_image_clear(LIF);
   1a6e2:	a5 c2       	rjmp	.+1354   	; 0x1ac2e <lif_create_volume+0x59e>

    // Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   1a6e4:	39 d9       	rcall	.-3470   	; 0x19958 <lif_image_clear>
   1a6e6:	80 e0       	ldi	r24, 0x00	; 0
   1a6e8:	90 e8       	ldi	r25, 0x80	; 128
   1a6ea:	d7 01       	movw	r26, r14
   1a6ec:	95 96       	adiw	r26, 0x25	; 37
   1a6ee:	9c 93       	st	X, r25
   1a6f0:	8e 93       	st	-X, r24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   1a6f2:	94 97       	sbiw	r26, 0x24	; 36
   1a6f4:	46 e0       	ldi	r20, 0x06	; 6
   1a6f6:	50 e0       	ldi	r21, 0x00	; 0
   1a6f8:	b3 01       	movw	r22, r6
   1a6fa:	c7 01       	movw	r24, r14
   1a6fc:	86 96       	adiw	r24, 0x26	; 38
   1a6fe:	0e 94 90 c9 	call	0x19320	; 0x19320 <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   1a702:	f7 01       	movw	r30, r14
   1a704:	25 a6       	std	Z+45, r2	; 0x2d
   1a706:	36 a6       	std	Z+46, r3	; 0x2e
   1a708:	47 a6       	std	Z+47, r4	; 0x2f
    LIF->VOL.DirSectors = dirsectors;
   1a70a:	50 aa       	std	Z+48, r5	; 0x30
   1a70c:	cf 5e       	subi	r28, 0xEF	; 239
   1a70e:	de 4f       	sbci	r29, 0xFE	; 254
   1a710:	28 81       	ld	r18, Y
   1a712:	39 81       	ldd	r19, Y+1	; 0x01
   1a714:	4a 81       	ldd	r20, Y+2	; 0x02
   1a716:	5b 81       	ldd	r21, Y+3	; 0x03
   1a718:	c1 51       	subi	r28, 0x11	; 17
   1a71a:	d1 40       	sbci	r29, 0x01	; 1
   1a71c:	25 ab       	std	Z+53, r18	; 0x35
   1a71e:	36 ab       	std	Z+54, r19	; 0x36
   1a720:	47 ab       	std	Z+55, r20	; 0x37
    LIF->VOL.System3000LIFid = 0x1000;
   1a722:	50 af       	std	Z+56, r21	; 0x38
   1a724:	80 e0       	ldi	r24, 0x00	; 0
   1a726:	90 e1       	ldi	r25, 0x10	; 16
   1a728:	92 ab       	std	Z+50, r25	; 0x32
    LIF->VOL.tracks_per_side = 0;
   1a72a:	81 ab       	std	Z+49, r24	; 0x31
   1a72c:	fd 96       	adiw	r30, 0x3d	; 61
   1a72e:	10 82       	st	Z, r1
   1a730:	11 82       	std	Z+1, r1	; 0x01
   1a732:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sides = 0;
   1a734:	13 82       	std	Z+3, r1	; 0x03
   1a736:	34 96       	adiw	r30, 0x04	; 4
   1a738:	10 82       	st	Z, r1
   1a73a:	11 82       	std	Z+1, r1	; 0x01
   1a73c:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sectors_per_track = 0;
   1a73e:	13 82       	std	Z+3, r1	; 0x03
   1a740:	34 96       	adiw	r30, 0x04	; 4
   1a742:	10 82       	st	Z, r1
   1a744:	11 82       	std	Z+1, r1	; 0x01
   1a746:	12 82       	std	Z+2, r1	; 0x02
    ///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   1a748:	13 82       	std	Z+3, r1	; 0x03
   1a74a:	a7 01       	movw	r20, r14
   1a74c:	47 5b       	subi	r20, 0xB7	; 183
   1a74e:	5f 4f       	sbci	r21, 0xFF	; 255
   1a750:	c6 01       	movw	r24, r12
   1a752:	b5 01       	movw	r22, r10

    // update LIF headers
    LIF->name = lif_stralloc(imagename);
   1a754:	2a d8       	rcall	.-4012   	; 0x197aa <lif_time2lifbcd>
   1a756:	c4 01       	movw	r24, r8
   1a758:	0e 94 a5 c7 	call	0x18f4a	; 0x18f4a <lif_stralloc>
   1a75c:	f7 01       	movw	r30, r14
   1a75e:	91 83       	std	Z+1, r25	; 0x01
    if(LIF->name == NULL)
   1a760:	80 83       	st	Z, r24
   1a762:	89 2b       	or	r24, r25
   1a764:	09 f4       	brne	.+2      	; 0x1a768 <lif_create_volume+0xd8>
        lif_close_volume(LIF);
        return(NULL);
    }

    // Initilize all LIF headers
    LIF->filesectors = filesectors;
   1a766:	58 c2       	rjmp	.+1200   	; 0x1ac18 <lif_create_volume+0x588>
   1a768:	c3 5f       	subi	r28, 0xF3	; 243
   1a76a:	de 4f       	sbci	r29, 0xFE	; 254
   1a76c:	28 81       	ld	r18, Y
   1a76e:	39 81       	ldd	r19, Y+1	; 0x01
   1a770:	4a 81       	ldd	r20, Y+2	; 0x02
   1a772:	5b 81       	ldd	r21, Y+3	; 0x03
   1a774:	cd 50       	subi	r28, 0x0D	; 13
   1a776:	d1 40       	sbci	r29, 0x01	; 1
   1a778:	20 8b       	std	Z+16, r18	; 0x10
   1a77a:	31 8b       	std	Z+17, r19	; 0x11
   1a77c:	42 8b       	std	Z+18, r20	; 0x12
    LIF->filestart = dirstart + dirsectors;
   1a77e:	53 8b       	std	Z+19, r21	; 0x13
   1a780:	cf 5e       	subi	r28, 0xEF	; 239
   1a782:	de 4f       	sbci	r29, 0xFE	; 254
   1a784:	88 81       	ld	r24, Y
   1a786:	99 81       	ldd	r25, Y+1	; 0x01
   1a788:	aa 81       	ldd	r26, Y+2	; 0x02
   1a78a:	bb 81       	ldd	r27, Y+3	; 0x03
   1a78c:	c1 51       	subi	r28, 0x11	; 17
   1a78e:	d1 40       	sbci	r29, 0x01	; 1
   1a790:	82 0d       	add	r24, r2
   1a792:	93 1d       	adc	r25, r3
   1a794:	a4 1d       	adc	r26, r4
   1a796:	b5 1d       	adc	r27, r5
   1a798:	f7 01       	movw	r30, r14
   1a79a:	84 87       	std	Z+12, r24	; 0x0c
   1a79c:	95 87       	std	Z+13, r25	; 0x0d
   1a79e:	a6 87       	std	Z+14, r26	; 0x0e
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   1a7a0:	b7 87       	std	Z+15, r27	; 0x0f
   1a7a2:	82 0f       	add	r24, r18
   1a7a4:	93 1f       	adc	r25, r19
   1a7a6:	a4 1f       	adc	r26, r20
   1a7a8:	b5 1f       	adc	r27, r21
   1a7aa:	84 83       	std	Z+4, r24	; 0x04
   1a7ac:	95 83       	std	Z+5, r25	; 0x05
   1a7ae:	a6 83       	std	Z+6, r26	; 0x06
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   1a7b0:	b7 83       	std	Z+7, r27	; 0x07
   1a7b2:	ba 2f       	mov	r27, r26
   1a7b4:	a9 2f       	mov	r26, r25
   1a7b6:	98 2f       	mov	r25, r24
   1a7b8:	88 27       	eor	r24, r24
   1a7ba:	80 87       	std	Z+8, r24	; 0x08
   1a7bc:	91 87       	std	Z+9, r25	; 0x09
   1a7be:	a2 87       	std	Z+10, r26	; 0x0a
    LIF->freesectors = LIF->filesectors;
   1a7c0:	b3 87       	std	Z+11, r27	; 0x0b
   1a7c2:	20 8f       	std	Z+24, r18	; 0x18
   1a7c4:	31 8f       	std	Z+25, r19	; 0x19
   1a7c6:	42 8f       	std	Z+26, r20	; 0x1a
    LIF->usedsectors = 0;
   1a7c8:	53 8f       	std	Z+27, r21	; 0x1b
   1a7ca:	14 8a       	std	Z+20, r1	; 0x14
   1a7cc:	15 8a       	std	Z+21, r1	; 0x15
   1a7ce:	16 8a       	std	Z+22, r1	; 0x16
    LIF->files = 0;
   1a7d0:	17 8a       	std	Z+23, r1	; 0x17
   1a7d2:	15 8e       	std	Z+29, r1	; 0x1d
    LIF->purged = 0;
   1a7d4:	14 8e       	std	Z+28, r1	; 0x1c
   1a7d6:	17 8e       	std	Z+31, r1	; 0x1f
    LIF->dirindex = 0;
   1a7d8:	16 8e       	std	Z+30, r1	; 0x1e
   1a7da:	11 a2       	std	Z+33, r1	; 0x21
    LIF->EOFindex = 0;
   1a7dc:	10 a2       	std	Z+32, r1	; 0x20
   1a7de:	13 a2       	std	Z+35, r1	; 0x23

    memset(buffer,0,LIF_SECTOR_SIZE);
   1a7e0:	12 a2       	std	Z+34, r1	; 0x22
   1a7e2:	61 2c       	mov	r6, r1
   1a7e4:	77 24       	eor	r7, r7
   1a7e6:	73 94       	inc	r7
   1a7e8:	9e 01       	movw	r18, r28
   1a7ea:	2f 5f       	subi	r18, 0xFF	; 255
   1a7ec:	3f 4f       	sbci	r19, 0xFF	; 255
   1a7ee:	49 01       	movw	r8, r18
   1a7f0:	d9 01       	movw	r26, r18
   1a7f2:	f3 01       	movw	r30, r6
   1a7f4:	1d 92       	st	X+, r1
   1a7f6:	31 97       	sbiw	r30, 0x01	; 1

    lif_vol2str(LIF,buffer);
   1a7f8:	e9 f7       	brne	.-6      	; 0x1a7f4 <lif_create_volume+0x164>
   1a7fa:	b9 01       	movw	r22, r18
   1a7fc:	c7 01       	movw	r24, r14
   1a7fe:	0e 94 cd c9 	call	0x1939a	; 0x1939a <lif_vol2str>

    // Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   1a802:	6d e0       	ldi	r22, 0x0D	; 13
   1a804:	79 e0       	ldi	r23, 0x09	; 9
   1a806:	d7 01       	movw	r26, r14
   1a808:	8d 91       	ld	r24, X+
   1a80a:	9c 91       	ld	r25, X
   1a80c:	0e 94 c4 c7 	call	0x18f88	; 0x18f88 <lif_open>
   1a810:	f7 01       	movw	r30, r14
   1a812:	93 83       	std	Z+3, r25	; 0x03
    if(LIF->fp == NULL)
   1a814:	82 83       	std	Z+2, r24	; 0x02
   1a816:	89 2b       	or	r24, r25
   1a818:	09 f4       	brne	.+2      	; 0x1a81c <lif_create_volume+0x18c>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1a81a:	fe c1       	rjmp	.+1020   	; 0x1ac18 <lif_create_volume+0x588>
   1a81c:	00 e0       	ldi	r16, 0x00	; 0
   1a81e:	11 e0       	ldi	r17, 0x01	; 1
   1a820:	20 e0       	ldi	r18, 0x00	; 0
   1a822:	30 e0       	ldi	r19, 0x00	; 0
   1a824:	a9 01       	movw	r20, r18
   1a826:	b4 01       	movw	r22, r8
   1a828:	c7 01       	movw	r24, r14
   1a82a:	0e 94 a3 c8 	call	0x19146	; 0x19146 <lif_write>
   1a82e:	9c 01       	movw	r18, r24
   1a830:	99 0f       	add	r25, r25
   1a832:	44 0b       	sbc	r20, r20
   1a834:	55 0b       	sbc	r21, r21
   1a836:	cb 5f       	subi	r28, 0xFB	; 251
   1a838:	de 4f       	sbci	r29, 0xFE	; 254
   1a83a:	28 83       	st	Y, r18
   1a83c:	39 83       	std	Y+1, r19	; 0x01
   1a83e:	4a 83       	std	Y+2, r20	; 0x02
   1a840:	5b 83       	std	Y+3, r21	; 0x03
   1a842:	c5 50       	subi	r28, 0x05	; 5

    if(size < LIF_SECTOR_SIZE)
   1a844:	d1 40       	sbci	r29, 0x01	; 1
   1a846:	2f 3f       	cpi	r18, 0xFF	; 255
   1a848:	31 05       	cpc	r19, r1
   1a84a:	41 05       	cpc	r20, r1
   1a84c:	51 05       	cpc	r21, r1
   1a84e:	09 f0       	breq	.+2      	; 0x1a852 <lif_create_volume+0x1c2>
   1a850:	0c f4       	brge	.+2      	; 0x1a854 <lif_create_volume+0x1c4>
    }
    offset += size;
    ++count;


    memset(buffer,0,LIF_SECTOR_SIZE);
   1a852:	e2 c1       	rjmp	.+964    	; 0x1ac18 <lif_create_volume+0x588>
   1a854:	d4 01       	movw	r26, r8
   1a856:	f3 01       	movw	r30, r6
   1a858:	1d 92       	st	X+, r1
   1a85a:	31 97       	sbiw	r30, 0x01	; 1

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1a85c:	e9 f7       	brne	.-6      	; 0x1a858 <lif_create_volume+0x1c8>
   1a85e:	21 e0       	ldi	r18, 0x01	; 1
   1a860:	30 e0       	ldi	r19, 0x00	; 0
   1a862:	40 e0       	ldi	r20, 0x00	; 0
   1a864:	50 e0       	ldi	r21, 0x00	; 0
   1a866:	cf 5f       	subi	r28, 0xFF	; 255
   1a868:	de 4f       	sbci	r29, 0xFE	; 254
   1a86a:	28 83       	st	Y, r18
   1a86c:	39 83       	std	Y+1, r19	; 0x01
   1a86e:	4a 83       	std	Y+2, r20	; 0x02
   1a870:	5b 83       	std	Y+3, r21	; 0x03
   1a872:	c1 50       	subi	r28, 0x01	; 1
   1a874:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
            printf("Wrote: %ld\r", count);
   1a876:	64 01       	movw	r12, r8
   1a878:	8e e7       	ldi	r24, 0x7E	; 126
   1a87a:	9d e3       	ldi	r25, 0x3D	; 61
   1a87c:	3c 01       	movw	r6, r24


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1a87e:	81 2c       	mov	r8, r1
   1a880:	cf 5f       	subi	r28, 0xFF	; 255
   1a882:	de 4f       	sbci	r29, 0xFE	; 254
   1a884:	88 81       	ld	r24, Y
   1a886:	99 81       	ldd	r25, Y+1	; 0x01
   1a888:	aa 81       	ldd	r26, Y+2	; 0x02
   1a88a:	bb 81       	ldd	r27, Y+3	; 0x03
   1a88c:	c1 50       	subi	r28, 0x01	; 1
   1a88e:	d1 40       	sbci	r29, 0x01	; 1
   1a890:	82 15       	cp	r24, r2
   1a892:	93 05       	cpc	r25, r3
   1a894:	a4 05       	cpc	r26, r4
   1a896:	b5 05       	cpc	r27, r5
   1a898:	0c f0       	brlt	.+2      	; 0x1a89c <lif_create_volume+0x20c>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1a89a:	64 c0       	rjmp	.+200    	; 0x1a964 <lif_create_volume+0x2d4>
   1a89c:	00 e0       	ldi	r16, 0x00	; 0
   1a89e:	11 e0       	ldi	r17, 0x01	; 1
   1a8a0:	cb 5f       	subi	r28, 0xFB	; 251
   1a8a2:	de 4f       	sbci	r29, 0xFE	; 254
   1a8a4:	28 81       	ld	r18, Y
   1a8a6:	39 81       	ldd	r19, Y+1	; 0x01
   1a8a8:	4a 81       	ldd	r20, Y+2	; 0x02
   1a8aa:	5b 81       	ldd	r21, Y+3	; 0x03
   1a8ac:	c5 50       	subi	r28, 0x05	; 5
   1a8ae:	d1 40       	sbci	r29, 0x01	; 1
   1a8b0:	b6 01       	movw	r22, r12
   1a8b2:	c7 01       	movw	r24, r14
   1a8b4:	0e 94 a3 c8 	call	0x19146	; 0x19146 <lif_write>
   1a8b8:	09 2e       	mov	r0, r25
   1a8ba:	00 0c       	add	r0, r0
   1a8bc:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1a8be:	bb 0b       	sbc	r27, r27
   1a8c0:	8f 3f       	cpi	r24, 0xFF	; 255
   1a8c2:	91 05       	cpc	r25, r1
   1a8c4:	a1 05       	cpc	r26, r1
   1a8c6:	b1 05       	cpc	r27, r1
   1a8c8:	09 f0       	breq	.+2      	; 0x1a8cc <lif_create_volume+0x23c>
   1a8ca:	0c f4       	brge	.+2      	; 0x1a8ce <lif_create_volume+0x23e>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1a8cc:	a5 c1       	rjmp	.+842    	; 0x1ac18 <lif_create_volume+0x588>
   1a8ce:	cb 5f       	subi	r28, 0xFB	; 251
   1a8d0:	de 4f       	sbci	r29, 0xFE	; 254
   1a8d2:	28 81       	ld	r18, Y
   1a8d4:	39 81       	ldd	r19, Y+1	; 0x01
   1a8d6:	4a 81       	ldd	r20, Y+2	; 0x02
   1a8d8:	5b 81       	ldd	r21, Y+3	; 0x03
   1a8da:	c5 50       	subi	r28, 0x05	; 5
   1a8dc:	d1 40       	sbci	r29, 0x01	; 1
   1a8de:	28 0f       	add	r18, r24
   1a8e0:	39 1f       	adc	r19, r25
   1a8e2:	4a 1f       	adc	r20, r26
   1a8e4:	5b 1f       	adc	r21, r27
   1a8e6:	cb 5f       	subi	r28, 0xFB	; 251
   1a8e8:	de 4f       	sbci	r29, 0xFE	; 254
   1a8ea:	28 83       	st	Y, r18
   1a8ec:	39 83       	std	Y+1, r19	; 0x01
   1a8ee:	4a 83       	std	Y+2, r20	; 0x02
   1a8f0:	5b 83       	std	Y+3, r21	; 0x03
   1a8f2:	c5 50       	subi	r28, 0x05	; 5
            printf("Wrote: %ld\r", count);
   1a8f4:	d1 40       	sbci	r29, 0x01	; 1
   1a8f6:	cc 5f       	subi	r28, 0xFC	; 252
   1a8f8:	de 4f       	sbci	r29, 0xFE	; 254
   1a8fa:	38 81       	ld	r19, Y
   1a8fc:	c4 50       	subi	r28, 0x04	; 4
   1a8fe:	d1 40       	sbci	r29, 0x01	; 1
   1a900:	3f 93       	push	r19
   1a902:	cd 5f       	subi	r28, 0xFD	; 253
   1a904:	de 4f       	sbci	r29, 0xFE	; 254
   1a906:	48 81       	ld	r20, Y
   1a908:	c3 50       	subi	r28, 0x03	; 3
   1a90a:	d1 40       	sbci	r29, 0x01	; 1
   1a90c:	4f 93       	push	r20
   1a90e:	ce 5f       	subi	r28, 0xFE	; 254
   1a910:	de 4f       	sbci	r29, 0xFE	; 254
   1a912:	58 81       	ld	r21, Y
   1a914:	c2 50       	subi	r28, 0x02	; 2
   1a916:	d1 40       	sbci	r29, 0x01	; 1
   1a918:	5f 93       	push	r21
   1a91a:	cf 5f       	subi	r28, 0xFF	; 255
   1a91c:	de 4f       	sbci	r29, 0xFE	; 254
   1a91e:	88 81       	ld	r24, Y
   1a920:	c1 50       	subi	r28, 0x01	; 1
   1a922:	d1 40       	sbci	r29, 0x01	; 1
   1a924:	8f 93       	push	r24
   1a926:	1f 92       	push	r1
   1a928:	7f 92       	push	r7
   1a92a:	6f 92       	push	r6
   1a92c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1a930:	cf 5f       	subi	r28, 0xFF	; 255
   1a932:	de 4f       	sbci	r29, 0xFE	; 254
   1a934:	28 81       	ld	r18, Y
   1a936:	39 81       	ldd	r19, Y+1	; 0x01
   1a938:	4a 81       	ldd	r20, Y+2	; 0x02
   1a93a:	5b 81       	ldd	r21, Y+3	; 0x03
   1a93c:	c1 50       	subi	r28, 0x01	; 1
   1a93e:	d1 40       	sbci	r29, 0x01	; 1
   1a940:	2f 5f       	subi	r18, 0xFF	; 255
   1a942:	3f 4f       	sbci	r19, 0xFF	; 255
   1a944:	4f 4f       	sbci	r20, 0xFF	; 255
   1a946:	5f 4f       	sbci	r21, 0xFF	; 255
   1a948:	cf 5f       	subi	r28, 0xFF	; 255
   1a94a:	de 4f       	sbci	r29, 0xFE	; 254
   1a94c:	28 83       	st	Y, r18
   1a94e:	39 83       	std	Y+1, r19	; 0x01
   1a950:	4a 83       	std	Y+2, r20	; 0x02
   1a952:	5b 83       	std	Y+3, r21	; 0x03
   1a954:	c1 50       	subi	r28, 0x01	; 1
   1a956:	d1 40       	sbci	r29, 0x01	; 1
   1a958:	0f b6       	in	r0, 0x3f	; 63
   1a95a:	f8 94       	cli
   1a95c:	de bf       	out	0x3e, r29	; 62
   1a95e:	0f be       	out	0x3f, r0	; 63
   1a960:	cd bf       	out	0x3d, r28	; 61
            printf("Wrote: %ld\r", count);
        ++count;
    }

    // Write Directory sectors
    lif_dir_clear(LIF);
   1a962:	8e cf       	rjmp	.-228    	; 0x1a880 <lif_create_volume+0x1f0>
   1a964:	c7 01       	movw	r24, r14
   1a966:	0e 94 b2 cc 	call	0x19964	; 0x19964 <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   1a96a:	8f ef       	ldi	r24, 0xFF	; 255
   1a96c:	9f ef       	ldi	r25, 0xFF	; 255
   1a96e:	f7 01       	movw	r30, r14
   1a970:	e6 5a       	subi	r30, 0xA6	; 166
   1a972:	ff 4f       	sbci	r31, 0xFF	; 255
   1a974:	91 83       	std	Z+1, r25	; 0x01
   1a976:	80 83       	st	Z, r24
   1a978:	46 01       	movw	r8, r12
   1a97a:	6e 01       	movw	r12, r28
   1a97c:	91 e0       	ldi	r25, 0x01	; 1
   1a97e:	c9 0e       	add	r12, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   1a980:	d9 1e       	adc	r13, r25
   1a982:	b4 01       	movw	r22, r8
   1a984:	c7 01       	movw	r24, r14
   1a986:	0e 94 ed ca 	call	0x195da	; 0x195da <lif_dir2str>
   1a98a:	a0 e2       	ldi	r26, 0x20	; 32
   1a98c:	8a 0e       	add	r8, r26

    // Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   1a98e:	91 1c       	adc	r9, r1
   1a990:	c8 14       	cp	r12, r8
   1a992:	d9 04       	cpc	r13, r9
   1a994:	b1 f7       	brne	.-20     	; 0x1a982 <lif_create_volume+0x2f2>
   1a996:	81 2c       	mov	r8, r1
   1a998:	91 2c       	mov	r9, r1
   1a99a:	54 01       	movw	r10, r8
   1a99c:	fe 01       	movw	r30, r28
   1a99e:	31 96       	adiw	r30, 0x01	; 1
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("Wrote: %ld\r", count);
   1a9a0:	6f 01       	movw	r12, r30
   1a9a2:	82 e7       	ldi	r24, 0x72	; 114
   1a9a4:	9d e3       	ldi	r25, 0x3D	; 61
   1a9a6:	2c 01       	movw	r4, r24
   1a9a8:	61 2c       	mov	r6, r1
   1a9aa:	cf 5f       	subi	r28, 0xFF	; 255
   1a9ac:	de 4f       	sbci	r29, 0xFE	; 254
   1a9ae:	28 81       	ld	r18, Y
   1a9b0:	39 81       	ldd	r19, Y+1	; 0x01
   1a9b2:	4a 81       	ldd	r20, Y+2	; 0x02
   1a9b4:	5b 81       	ldd	r21, Y+3	; 0x03
   1a9b6:	c1 50       	subi	r28, 0x01	; 1
   1a9b8:	d1 40       	sbci	r29, 0x01	; 1
   1a9ba:	28 0d       	add	r18, r8
   1a9bc:	39 1d       	adc	r19, r9
   1a9be:	4a 1d       	adc	r20, r10
   1a9c0:	5b 1d       	adc	r21, r11
   1a9c2:	c7 5f       	subi	r28, 0xF7	; 247
   1a9c4:	de 4f       	sbci	r29, 0xFE	; 254
   1a9c6:	28 83       	st	Y, r18
   1a9c8:	39 83       	std	Y+1, r19	; 0x01
   1a9ca:	4a 83       	std	Y+2, r20	; 0x02
   1a9cc:	5b 83       	std	Y+3, r21	; 0x03
   1a9ce:	c9 50       	subi	r28, 0x09	; 9
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   1a9d0:	d1 40       	sbci	r29, 0x01	; 1
   1a9d2:	cf 5e       	subi	r28, 0xEF	; 239
   1a9d4:	de 4f       	sbci	r29, 0xFE	; 254
   1a9d6:	88 81       	ld	r24, Y
   1a9d8:	99 81       	ldd	r25, Y+1	; 0x01
   1a9da:	aa 81       	ldd	r26, Y+2	; 0x02
   1a9dc:	bb 81       	ldd	r27, Y+3	; 0x03
   1a9de:	c1 51       	subi	r28, 0x11	; 17
   1a9e0:	d1 40       	sbci	r29, 0x01	; 1
   1a9e2:	88 16       	cp	r8, r24
   1a9e4:	99 06       	cpc	r9, r25
   1a9e6:	aa 06       	cpc	r10, r26
   1a9e8:	bb 06       	cpc	r11, r27
   1a9ea:	0c f0       	brlt	.+2      	; 0x1a9ee <lif_create_volume+0x35e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1a9ec:	67 c0       	rjmp	.+206    	; 0x1aabc <lif_create_volume+0x42c>
   1a9ee:	00 e0       	ldi	r16, 0x00	; 0
   1a9f0:	11 e0       	ldi	r17, 0x01	; 1
   1a9f2:	cb 5f       	subi	r28, 0xFB	; 251
   1a9f4:	de 4f       	sbci	r29, 0xFE	; 254
   1a9f6:	28 81       	ld	r18, Y
   1a9f8:	39 81       	ldd	r19, Y+1	; 0x01
   1a9fa:	4a 81       	ldd	r20, Y+2	; 0x02
   1a9fc:	5b 81       	ldd	r21, Y+3	; 0x03
   1a9fe:	c5 50       	subi	r28, 0x05	; 5
   1aa00:	d1 40       	sbci	r29, 0x01	; 1
   1aa02:	b6 01       	movw	r22, r12
   1aa04:	c7 01       	movw	r24, r14
   1aa06:	0e 94 a3 c8 	call	0x19146	; 0x19146 <lif_write>
   1aa0a:	09 2e       	mov	r0, r25
   1aa0c:	00 0c       	add	r0, r0
   1aa0e:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1aa10:	bb 0b       	sbc	r27, r27
   1aa12:	8f 3f       	cpi	r24, 0xFF	; 255
   1aa14:	91 05       	cpc	r25, r1
   1aa16:	a1 05       	cpc	r26, r1
   1aa18:	b1 05       	cpc	r27, r1
   1aa1a:	09 f0       	breq	.+2      	; 0x1aa1e <lif_create_volume+0x38e>
   1aa1c:	0c f4       	brge	.+2      	; 0x1aa20 <lif_create_volume+0x390>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1aa1e:	fc c0       	rjmp	.+504    	; 0x1ac18 <lif_create_volume+0x588>
   1aa20:	cb 5f       	subi	r28, 0xFB	; 251
   1aa22:	de 4f       	sbci	r29, 0xFE	; 254
   1aa24:	28 81       	ld	r18, Y
   1aa26:	39 81       	ldd	r19, Y+1	; 0x01
   1aa28:	4a 81       	ldd	r20, Y+2	; 0x02
   1aa2a:	5b 81       	ldd	r21, Y+3	; 0x03
   1aa2c:	c5 50       	subi	r28, 0x05	; 5
   1aa2e:	d1 40       	sbci	r29, 0x01	; 1
   1aa30:	28 0f       	add	r18, r24
   1aa32:	39 1f       	adc	r19, r25
   1aa34:	4a 1f       	adc	r20, r26
   1aa36:	5b 1f       	adc	r21, r27
   1aa38:	cb 5f       	subi	r28, 0xFB	; 251
   1aa3a:	de 4f       	sbci	r29, 0xFE	; 254
   1aa3c:	28 83       	st	Y, r18
   1aa3e:	39 83       	std	Y+1, r19	; 0x01
   1aa40:	4a 83       	std	Y+2, r20	; 0x02
   1aa42:	5b 83       	std	Y+3, r21	; 0x03
   1aa44:	c5 50       	subi	r28, 0x05	; 5
        if((count % 100) == 0)
   1aa46:	d1 40       	sbci	r29, 0x01	; 1
   1aa48:	c7 5f       	subi	r28, 0xF7	; 247
   1aa4a:	de 4f       	sbci	r29, 0xFE	; 254
   1aa4c:	68 81       	ld	r22, Y
   1aa4e:	79 81       	ldd	r23, Y+1	; 0x01
   1aa50:	8a 81       	ldd	r24, Y+2	; 0x02
   1aa52:	9b 81       	ldd	r25, Y+3	; 0x03
   1aa54:	c9 50       	subi	r28, 0x09	; 9
   1aa56:	d1 40       	sbci	r29, 0x01	; 1
   1aa58:	24 e6       	ldi	r18, 0x64	; 100
   1aa5a:	30 e0       	ldi	r19, 0x00	; 0
   1aa5c:	40 e0       	ldi	r20, 0x00	; 0
   1aa5e:	50 e0       	ldi	r21, 0x00	; 0
   1aa60:	0e 94 44 e9 	call	0x1d288	; 0x1d288 <__divmodsi4>
   1aa64:	67 2b       	or	r22, r23
   1aa66:	68 2b       	or	r22, r24
   1aa68:	69 2b       	or	r22, r25
            printf("Wrote: %ld\r", count);
   1aa6a:	11 f5       	brne	.+68     	; 0x1aab0 <lif_create_volume+0x420>
   1aa6c:	c4 5f       	subi	r28, 0xF4	; 244
   1aa6e:	de 4f       	sbci	r29, 0xFE	; 254
   1aa70:	38 81       	ld	r19, Y
   1aa72:	cc 50       	subi	r28, 0x0C	; 12
   1aa74:	d1 40       	sbci	r29, 0x01	; 1
   1aa76:	3f 93       	push	r19
   1aa78:	c5 5f       	subi	r28, 0xF5	; 245
   1aa7a:	de 4f       	sbci	r29, 0xFE	; 254
   1aa7c:	48 81       	ld	r20, Y
   1aa7e:	cb 50       	subi	r28, 0x0B	; 11
   1aa80:	d1 40       	sbci	r29, 0x01	; 1
   1aa82:	4f 93       	push	r20
   1aa84:	c6 5f       	subi	r28, 0xF6	; 246
   1aa86:	de 4f       	sbci	r29, 0xFE	; 254
   1aa88:	58 81       	ld	r21, Y
   1aa8a:	ca 50       	subi	r28, 0x0A	; 10
   1aa8c:	d1 40       	sbci	r29, 0x01	; 1
   1aa8e:	5f 93       	push	r21
   1aa90:	c7 5f       	subi	r28, 0xF7	; 247
   1aa92:	de 4f       	sbci	r29, 0xFE	; 254
   1aa94:	88 81       	ld	r24, Y
   1aa96:	c9 50       	subi	r28, 0x09	; 9
   1aa98:	d1 40       	sbci	r29, 0x01	; 1
   1aa9a:	8f 93       	push	r24
   1aa9c:	1f 92       	push	r1
   1aa9e:	5f 92       	push	r5
   1aaa0:	4f 92       	push	r4
   1aaa2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1aaa6:	0f b6       	in	r0, 0x3f	; 63
   1aaa8:	f8 94       	cli
   1aaaa:	de bf       	out	0x3e, r29	; 62
   1aaac:	0f be       	out	0x3f, r0	; 63
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   1aaae:	cd bf       	out	0x3d, r28	; 61
   1aab0:	bf ef       	ldi	r27, 0xFF	; 255
   1aab2:	8b 1a       	sub	r8, r27
   1aab4:	9b 0a       	sbc	r9, r27
   1aab6:	ab 0a       	sbc	r10, r27
   1aab8:	bb 0a       	sbc	r11, r27
            printf("Wrote: %ld\r", count);
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   1aaba:	77 cf       	rjmp	.-274    	; 0x1a9aa <lif_create_volume+0x31a>
   1aabc:	80 e0       	ldi	r24, 0x00	; 0
   1aabe:	91 e0       	ldi	r25, 0x01	; 1
   1aac0:	d6 01       	movw	r26, r12
   1aac2:	fc 01       	movw	r30, r24
   1aac4:	1d 92       	st	X+, r1
   1aac6:	31 97       	sbiw	r30, 0x01	; 1
    for(i=0;i<filesectors;++i)
   1aac8:	e9 f7       	brne	.-6      	; 0x1aac4 <lif_create_volume+0x434>
   1aaca:	41 2c       	mov	r4, r1
   1aacc:	51 2c       	mov	r5, r1
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("Wrote: %ld\r", count);
   1aace:	32 01       	movw	r6, r4
   1aad0:	86 e6       	ldi	r24, 0x66	; 102
   1aad2:	9d e3       	ldi	r25, 0x3D	; 61
   1aad4:	9c 01       	movw	r18, r24
   1aad6:	40 e0       	ldi	r20, 0x00	; 0
   1aad8:	cf 5f       	subi	r28, 0xFF	; 255
   1aada:	de 4f       	sbci	r29, 0xFE	; 254
   1aadc:	28 83       	st	Y, r18
   1aade:	39 83       	std	Y+1, r19	; 0x01
   1aae0:	4a 83       	std	Y+2, r20	; 0x02
   1aae2:	c1 50       	subi	r28, 0x01	; 1
   1aae4:	d1 40       	sbci	r29, 0x01	; 1
   1aae6:	c7 5f       	subi	r28, 0xF7	; 247
   1aae8:	de 4f       	sbci	r29, 0xFE	; 254
   1aaea:	88 80       	ld	r8, Y
   1aaec:	99 80       	ldd	r9, Y+1	; 0x01
   1aaee:	aa 80       	ldd	r10, Y+2	; 0x02
   1aaf0:	bb 80       	ldd	r11, Y+3	; 0x03
   1aaf2:	c9 50       	subi	r28, 0x09	; 9
   1aaf4:	d1 40       	sbci	r29, 0x01	; 1
   1aaf6:	84 0c       	add	r8, r4
   1aaf8:	95 1c       	adc	r9, r5
   1aafa:	a6 1c       	adc	r10, r6
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1aafc:	b7 1c       	adc	r11, r7
   1aafe:	c3 5f       	subi	r28, 0xF3	; 243
   1ab00:	de 4f       	sbci	r29, 0xFE	; 254
   1ab02:	28 81       	ld	r18, Y
   1ab04:	39 81       	ldd	r19, Y+1	; 0x01
   1ab06:	4a 81       	ldd	r20, Y+2	; 0x02
   1ab08:	5b 81       	ldd	r21, Y+3	; 0x03
   1ab0a:	cd 50       	subi	r28, 0x0D	; 13
   1ab0c:	d1 40       	sbci	r29, 0x01	; 1
   1ab0e:	42 16       	cp	r4, r18
   1ab10:	53 06       	cpc	r5, r19
   1ab12:	64 06       	cpc	r6, r20
   1ab14:	75 06       	cpc	r7, r21
   1ab16:	0c f0       	brlt	.+2      	; 0x1ab1a <lif_create_volume+0x48a>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1ab18:	59 c0       	rjmp	.+178    	; 0x1abcc <lif_create_volume+0x53c>
   1ab1a:	00 e0       	ldi	r16, 0x00	; 0
   1ab1c:	11 e0       	ldi	r17, 0x01	; 1
   1ab1e:	cb 5f       	subi	r28, 0xFB	; 251
   1ab20:	de 4f       	sbci	r29, 0xFE	; 254
   1ab22:	28 81       	ld	r18, Y
   1ab24:	39 81       	ldd	r19, Y+1	; 0x01
   1ab26:	4a 81       	ldd	r20, Y+2	; 0x02
   1ab28:	5b 81       	ldd	r21, Y+3	; 0x03
   1ab2a:	c5 50       	subi	r28, 0x05	; 5
   1ab2c:	d1 40       	sbci	r29, 0x01	; 1
   1ab2e:	be 01       	movw	r22, r28
   1ab30:	6f 5f       	subi	r22, 0xFF	; 255
   1ab32:	7f 4f       	sbci	r23, 0xFF	; 255
   1ab34:	c7 01       	movw	r24, r14
   1ab36:	0e 94 a3 c8 	call	0x19146	; 0x19146 <lif_write>
   1ab3a:	09 2e       	mov	r0, r25
   1ab3c:	00 0c       	add	r0, r0
   1ab3e:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1ab40:	bb 0b       	sbc	r27, r27
   1ab42:	8f 3f       	cpi	r24, 0xFF	; 255
   1ab44:	91 05       	cpc	r25, r1
   1ab46:	a1 05       	cpc	r26, r1
   1ab48:	b1 05       	cpc	r27, r1
   1ab4a:	09 f0       	breq	.+2      	; 0x1ab4e <lif_create_volume+0x4be>
   1ab4c:	0c f4       	brge	.+2      	; 0x1ab50 <lif_create_volume+0x4c0>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1ab4e:	64 c0       	rjmp	.+200    	; 0x1ac18 <lif_create_volume+0x588>
   1ab50:	cb 5f       	subi	r28, 0xFB	; 251
   1ab52:	de 4f       	sbci	r29, 0xFE	; 254
   1ab54:	28 81       	ld	r18, Y
   1ab56:	39 81       	ldd	r19, Y+1	; 0x01
   1ab58:	4a 81       	ldd	r20, Y+2	; 0x02
   1ab5a:	5b 81       	ldd	r21, Y+3	; 0x03
   1ab5c:	c5 50       	subi	r28, 0x05	; 5
   1ab5e:	d1 40       	sbci	r29, 0x01	; 1
   1ab60:	28 0f       	add	r18, r24
   1ab62:	39 1f       	adc	r19, r25
   1ab64:	4a 1f       	adc	r20, r26
   1ab66:	5b 1f       	adc	r21, r27
   1ab68:	cb 5f       	subi	r28, 0xFB	; 251
   1ab6a:	de 4f       	sbci	r29, 0xFE	; 254
   1ab6c:	28 83       	st	Y, r18
   1ab6e:	39 83       	std	Y+1, r19	; 0x01
   1ab70:	4a 83       	std	Y+2, r20	; 0x02
   1ab72:	5b 83       	std	Y+3, r21	; 0x03
   1ab74:	c5 50       	subi	r28, 0x05	; 5
        if((count % 100) == 0)
   1ab76:	d1 40       	sbci	r29, 0x01	; 1
   1ab78:	c5 01       	movw	r24, r10
   1ab7a:	b4 01       	movw	r22, r8
   1ab7c:	24 e6       	ldi	r18, 0x64	; 100
   1ab7e:	30 e0       	ldi	r19, 0x00	; 0
   1ab80:	40 e0       	ldi	r20, 0x00	; 0
   1ab82:	50 e0       	ldi	r21, 0x00	; 0
   1ab84:	0e 94 44 e9 	call	0x1d288	; 0x1d288 <__divmodsi4>
   1ab88:	67 2b       	or	r22, r23
   1ab8a:	68 2b       	or	r22, r24
   1ab8c:	69 2b       	or	r22, r25
            printf("Wrote: %ld\r", count);
   1ab8e:	c1 f4       	brne	.+48     	; 0x1abc0 <lif_create_volume+0x530>
   1ab90:	bf 92       	push	r11
   1ab92:	af 92       	push	r10
   1ab94:	9f 92       	push	r9
   1ab96:	8f 92       	push	r8
   1ab98:	1f 92       	push	r1
   1ab9a:	ce 5f       	subi	r28, 0xFE	; 254
   1ab9c:	de 4f       	sbci	r29, 0xFE	; 254
   1ab9e:	38 81       	ld	r19, Y
   1aba0:	c2 50       	subi	r28, 0x02	; 2
   1aba2:	d1 40       	sbci	r29, 0x01	; 1
   1aba4:	3f 93       	push	r19
   1aba6:	cf 5f       	subi	r28, 0xFF	; 255
   1aba8:	de 4f       	sbci	r29, 0xFE	; 254
   1abaa:	48 81       	ld	r20, Y
   1abac:	c1 50       	subi	r28, 0x01	; 1
   1abae:	d1 40       	sbci	r29, 0x01	; 1
   1abb0:	4f 93       	push	r20
   1abb2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1abb6:	0f b6       	in	r0, 0x3f	; 63
   1abb8:	f8 94       	cli
   1abba:	de bf       	out	0x3e, r29	; 62
   1abbc:	0f be       	out	0x3f, r0	; 63
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1abbe:	cd bf       	out	0x3d, r28	; 61
   1abc0:	9f ef       	ldi	r25, 0xFF	; 255
   1abc2:	49 1a       	sub	r4, r25
   1abc4:	59 0a       	sbc	r5, r25
   1abc6:	69 0a       	sbc	r6, r25
   1abc8:	79 0a       	sbc	r7, r25
        offset += size;
        if((count % 100) == 0)
            printf("Wrote: %ld\r", count);
        ++count;
    }
    if(debuglevel & 0x400)
   1abca:	8d cf       	rjmp	.-230    	; 0x1aae6 <lif_create_volume+0x456>
   1abcc:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1abd0:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1abd4:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF,"lif_create_volume");
   1abd6:	05 c0       	rjmp	.+10     	; 0x1abe2 <lif_create_volume+0x552>
   1abd8:	69 e6       	ldi	r22, 0x69	; 105
   1abda:	76 e1       	ldi	r23, 0x16	; 22
   1abdc:	c7 01       	movw	r24, r14
   1abde:	0e 94 c1 cc 	call	0x19982	; 0x19982 <lif_dump_vol>
    printf("Wrote: %ld\n", count);
   1abe2:	bf 92       	push	r11
   1abe4:	af 92       	push	r10
   1abe6:	9f 92       	push	r9
   1abe8:	8f 92       	push	r8
   1abea:	8a e5       	ldi	r24, 0x5A	; 90
   1abec:	9d e3       	ldi	r25, 0x3D	; 61
   1abee:	1f 92       	push	r1
   1abf0:	9f 93       	push	r25
   1abf2:	8f 93       	push	r24
   1abf4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
    // Directory index
    LIF->dirindex = -1;
   1abf8:	8f ef       	ldi	r24, 0xFF	; 255
   1abfa:	9f ef       	ldi	r25, 0xFF	; 255
   1abfc:	d7 01       	movw	r26, r14
   1abfe:	91 96       	adiw	r26, 0x21	; 33
   1ac00:	9c 93       	st	X, r25
    printf("Wrote: %ld\n", count);

    lif_rewinddir(LIF);

    // As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   1ac02:	8e 93       	st	-X, r24
   1ac04:	90 97       	sbiw	r26, 0x20	; 32
   1ac06:	c7 01       	movw	r24, r14
   1ac08:	4f d8       	rcall	.-3938   	; 0x19ca8 <lif_check_volume>
   1ac0a:	0f b6       	in	r0, 0x3f	; 63
   1ac0c:	f8 94       	cli
   1ac0e:	de bf       	out	0x3e, r29	; 62
   1ac10:	0f be       	out	0x3f, r0	; 63
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ac12:	cd bf       	out	0x3d, r28	; 61
   1ac14:	89 2b       	or	r24, r25
   1ac16:	19 f4       	brne	.+6      	; 0x1ac1e <lif_create_volume+0x58e>
   1ac18:	c7 01       	movw	r24, r14
        lif_closedir(LIF);
        return(NULL);
    }

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
   1ac1a:	d4 da       	rcall	.-2648   	; 0x1a1c4 <lif_close_volume>
   1ac1c:	08 c0       	rjmp	.+16     	; 0x1ac2e <lif_create_volume+0x59e>
   1ac1e:	c7 01       	movw	r24, r14
   1ac20:	2f dc       	rcall	.-1954   	; 0x1a480 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ac22:	6c 01       	movw	r12, r24
   1ac24:	89 2b       	or	r24, r25
   1ac26:	31 f4       	brne	.+12     	; 0x1ac34 <lif_create_volume+0x5a4>

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   1ac28:	c7 01       	movw	r24, r14

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   1ac2a:	cc da       	rcall	.-2664   	; 0x1a1c4 <lif_close_volume>
   1ac2c:	04 c0       	rjmp	.+8      	; 0x1ac36 <lif_create_volume+0x5a6>
   1ac2e:	c1 2c       	mov	r12, r1
   1ac30:	d1 2c       	mov	r13, r1
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   1ac32:	01 c0       	rjmp	.+2      	; 0x1ac36 <lif_create_volume+0x5a6>
   1ac34:	67 01       	movw	r12, r14
   1ac36:	c6 01       	movw	r24, r12
   1ac38:	cc 5e       	subi	r28, 0xEC	; 236
   1ac3a:	de 4f       	sbci	r29, 0xFE	; 254
   1ac3c:	e2 e1       	ldi	r30, 0x12	; 18
   1ac3e:	0c 94 ab e9 	jmp	0x1d356	; 0x1d356 <__epilogue_restores__>

0001ac42 <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   1ac42:	ac e0       	ldi	r26, 0x0C	; 12
   1ac44:	b0 e0       	ldi	r27, 0x00	; 0
   1ac46:	e7 e2       	ldi	r30, 0x27	; 39
   1ac48:	f6 ed       	ldi	r31, 0xD6	; 214
   1ac4a:	0c 94 8f e9 	jmp	0x1d31e	; 0x1d31e <__prologue_saves__>
   1ac4e:	9c 87       	std	Y+12, r25	; 0x0c
   1ac50:	8b 87       	std	Y+11, r24	; 0x0b
   1ac52:	6a 01       	movw	r12, r20
   1ac54:	7b 01       	movw	r14, r22

    // Directory index
    index = 0;

    // Start of free space
    start = LIF->filestart;
   1ac56:	fc 01       	movw	r30, r24
   1ac58:	84 84       	ldd	r8, Z+12	; 0x0c
   1ac5a:	95 84       	ldd	r9, Z+13	; 0x0d
   1ac5c:	a6 84       	ldd	r10, Z+14	; 0x0e

    // Update all file information
    if(lif_updatefree(LIF) == NULL)
   1ac5e:	b7 84       	ldd	r11, Z+15	; 0x0f
   1ac60:	0f dc       	rcall	.-2018   	; 0x1a480 <lif_updatefree>
   1ac62:	89 2b       	or	r24, r25
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   1ac64:	b1 f4       	brne	.+44     	; 0x1ac92 <lif_newdir+0x50>
   1ac66:	ff 92       	push	r15
   1ac68:	ef 92       	push	r14
   1ac6a:	df 92       	push	r13
   1ac6c:	cf 92       	push	r12
   1ac6e:	eb 85       	ldd	r30, Y+11	; 0x0b
   1ac70:	fc 85       	ldd	r31, Y+12	; 0x0c
   1ac72:	83 8d       	ldd	r24, Z+27	; 0x1b
   1ac74:	8f 93       	push	r24
   1ac76:	82 8d       	ldd	r24, Z+26	; 0x1a
   1ac78:	8f 93       	push	r24
   1ac7a:	81 8d       	ldd	r24, Z+25	; 0x19
   1ac7c:	8f 93       	push	r24
   1ac7e:	80 8d       	ldd	r24, Z+24	; 0x18
   1ac80:	8f 93       	push	r24
   1ac82:	8b e7       	ldi	r24, 0x7B	; 123
   1ac84:	9c e3       	ldi	r25, 0x3C	; 60
   1ac86:	1f 92       	push	r1
   1ac88:	9f 93       	push	r25
   1ac8a:	8f 93       	push	r24
   1ac8c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return(-1);
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
   1ac90:	2c c0       	rjmp	.+88     	; 0x1acea <lif_newdir+0xa8>
   1ac92:	eb 85       	ldd	r30, Y+11	; 0x0b
   1ac94:	fc 85       	ldd	r31, Y+12	; 0x0c
   1ac96:	80 8d       	ldd	r24, Z+24	; 0x18
   1ac98:	91 8d       	ldd	r25, Z+25	; 0x19
   1ac9a:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1ac9c:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1ac9e:	8c 15       	cp	r24, r12
   1aca0:	9d 05       	cpc	r25, r13
   1aca2:	ae 05       	cpc	r26, r14
   1aca4:	bf 05       	cpc	r27, r15
   1aca6:	b4 f0       	brlt	.+44     	; 0x1acd4 <lif_newdir+0x92>
   1aca8:	44 24       	eor	r4, r4
   1acaa:	43 94       	inc	r4
   1acac:	51 2c       	mov	r5, r1
   1acae:	61 2c       	mov	r6, r1
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1acb0:	71 2c       	mov	r7, r1
   1acb2:	e6 5a       	subi	r30, 0xA6	; 166
   1acb4:	ff 4f       	sbci	r31, 0xFF	; 255
   1acb6:	fc 83       	std	Y+4, r31	; 0x04
   1acb8:	eb 83       	std	Y+3, r30	; 0x03
   1acba:	8b 85       	ldd	r24, Y+11	; 0x0b
   1acbc:	9c 85       	ldd	r25, Y+12	; 0x0c
   1acbe:	84 5a       	subi	r24, 0xA4	; 164
   1acc0:	9f 4f       	sbci	r25, 0xFF	; 255
   1acc2:	9a 83       	std	Y+2, r25	; 0x02
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1acc4:	89 83       	std	Y+1, r24	; 0x01
   1acc6:	eb 85       	ldd	r30, Y+11	; 0x0b
   1acc8:	fc 85       	ldd	r31, Y+12	; 0x0c
   1acca:	e0 5a       	subi	r30, 0xA0	; 160
   1accc:	ff 4f       	sbci	r31, 0xFF	; 255
   1acce:	fe 83       	std	Y+6, r31	; 0x06
   1acd0:	ed 83       	std	Y+5, r30	; 0x05
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   1acd2:	23 c0       	rjmp	.+70     	; 0x1ad1a <lif_newdir+0xd8>
   1acd4:	bf 93       	push	r27
   1acd6:	af 93       	push	r26
   1acd8:	9f 93       	push	r25
   1acda:	8f 93       	push	r24
   1acdc:	82 e5       	ldi	r24, 0x52	; 82
   1acde:	9c e3       	ldi	r25, 0x3C	; 60
   1ace0:	1f 92       	push	r1
   1ace2:	9f 93       	push	r25
   1ace4:	8f 93       	push	r24
   1ace6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return(-1);
   1acea:	0f b6       	in	r0, 0x3f	; 63
   1acec:	f8 94       	cli
   1acee:	de bf       	out	0x3e, r29	; 62
   1acf0:	0f be       	out	0x3f, r0	; 63
   1acf2:	cd bf       	out	0x3d, r28	; 61
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1acf4:	05 c1       	rjmp	.+522    	; 0x1af00 <lif_newdir+0x2be>
   1acf6:	eb 81       	ldd	r30, Y+3	; 0x03
   1acf8:	fc 81       	ldd	r31, Y+4	; 0x04
   1acfa:	80 81       	ld	r24, Z
   1acfc:	91 81       	ldd	r25, Z+1	; 0x01
   1acfe:	8f 3f       	cpi	r24, 0xFF	; 255
   1ad00:	ff ef       	ldi	r31, 0xFF	; 255
   1ad02:	9f 07       	cpc	r25, r31
            return(index);
        }


        // PURGED records
        if(LIF->DIR.FileType == 0)
   1ad04:	a1 f0       	breq	.+40     	; 0x1ad2e <lif_newdir+0xec>
   1ad06:	89 2b       	or	r24, r25
   1ad08:	09 f0       	breq	.+2      	; 0x1ad0c <lif_newdir+0xca>
        {
            if(freestate == 0)
   1ad0a:	d0 c0       	rjmp	.+416    	; 0x1aeac <lif_newdir+0x26a>
   1ad0c:	61 14       	cp	r6, r1
   1ad0e:	71 04       	cpc	r7, r1
   1ad10:	09 f4       	brne	.+2      	; 0x1ad14 <lif_newdir+0xd2>
   1ad12:	c3 c0       	rjmp	.+390    	; 0x1ae9a <lif_newdir+0x258>
   1ad14:	9f ef       	ldi	r25, 0xFF	; 255
   1ad16:	49 1a       	sub	r4, r25
   1ad18:	59 0a       	sbc	r5, r25
   1ad1a:	82 01       	movw	r16, r4
   1ad1c:	01 50       	subi	r16, 0x01	; 1

    // Update free space and EOF pointers
    while(1)
    {
        // Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   1ad1e:	11 09       	sbc	r17, r1
   1ad20:	b8 01       	movw	r22, r16
   1ad22:	8b 85       	ldd	r24, Y+11	; 0x0b
   1ad24:	9c 85       	ldd	r25, Y+12	; 0x0c
   1ad26:	cf da       	rcall	.-2658   	; 0x1a2c6 <lif_readdirindex>
   1ad28:	89 2b       	or	r24, r25
   1ad2a:	29 f7       	brne	.-54     	; 0x1acf6 <lif_newdir+0xb4>
        if(LIF->DIR.FileType == 0xffff)
        {

            // Was enough free space found in purged area ?
            // Do NOT need to update EOF!
            if(freestate == 2)
   1ad2c:	e9 c0       	rjmp	.+466    	; 0x1af00 <lif_newdir+0x2be>
   1ad2e:	22 e0       	ldi	r18, 0x02	; 2
   1ad30:	62 16       	cp	r6, r18
   1ad32:	71 04       	cpc	r7, r1
   1ad34:	09 f0       	breq	.+2      	; 0x1ad38 <lif_newdir+0xf6>
            {
                // Update free pace for new file
                lif_dir_clear(LIF);
   1ad36:	46 c0       	rjmp	.+140    	; 0x1adc4 <lif_newdir+0x182>
   1ad38:	8b 85       	ldd	r24, Y+11	; 0x0b
   1ad3a:	9c 85       	ldd	r25, Y+12	; 0x0c
   1ad3c:	0e 94 b2 cc 	call	0x19964	; 0x19964 <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   1ad40:	eb 85       	ldd	r30, Y+11	; 0x0b
   1ad42:	fc 85       	ldd	r31, Y+12	; 0x0c
   1ad44:	e4 5a       	subi	r30, 0xA4	; 164
   1ad46:	ff 4f       	sbci	r31, 0xFF	; 255
   1ad48:	8f 81       	ldd	r24, Y+7	; 0x07
   1ad4a:	80 83       	st	Z, r24
   1ad4c:	98 85       	ldd	r25, Y+8	; 0x08
   1ad4e:	91 83       	std	Z+1, r25	; 0x01
   1ad50:	29 85       	ldd	r18, Y+9	; 0x09
   1ad52:	22 83       	std	Z+2, r18	; 0x02
   1ad54:	8a 85       	ldd	r24, Y+10	; 0x0a
                LIF->DIR.FileSectors = sectors;
   1ad56:	83 83       	std	Z+3, r24	; 0x03
   1ad58:	eb 85       	ldd	r30, Y+11	; 0x0b
   1ad5a:	fc 85       	ldd	r31, Y+12	; 0x0c
   1ad5c:	e0 5a       	subi	r30, 0xA0	; 160
   1ad5e:	ff 4f       	sbci	r31, 0xFF	; 255
   1ad60:	c0 82       	st	Z, r12
   1ad62:	d1 82       	std	Z+1, r13	; 0x01
   1ad64:	e2 82       	std	Z+2, r14	; 0x02
                LIF->usedsectors += sectors;
   1ad66:	f3 82       	std	Z+3, r15	; 0x03
   1ad68:	eb 85       	ldd	r30, Y+11	; 0x0b
   1ad6a:	fc 85       	ldd	r31, Y+12	; 0x0c
   1ad6c:	84 89       	ldd	r24, Z+20	; 0x14
   1ad6e:	95 89       	ldd	r25, Z+21	; 0x15
   1ad70:	a6 89       	ldd	r26, Z+22	; 0x16
   1ad72:	b7 89       	ldd	r27, Z+23	; 0x17
   1ad74:	8c 0d       	add	r24, r12
   1ad76:	9d 1d       	adc	r25, r13
   1ad78:	ae 1d       	adc	r26, r14
   1ad7a:	bf 1d       	adc	r27, r15
   1ad7c:	84 8b       	std	Z+20, r24	; 0x14
   1ad7e:	95 8b       	std	Z+21, r25	; 0x15
   1ad80:	a6 8b       	std	Z+22, r26	; 0x16
                LIF->freesectors -= sectors;
   1ad82:	b7 8b       	std	Z+23, r27	; 0x17
   1ad84:	80 8d       	ldd	r24, Z+24	; 0x18
   1ad86:	91 8d       	ldd	r25, Z+25	; 0x19
   1ad88:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1ad8a:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1ad8c:	8c 19       	sub	r24, r12
   1ad8e:	9d 09       	sbc	r25, r13
   1ad90:	ae 09       	sbc	r26, r14
   1ad92:	bf 09       	sbc	r27, r15
   1ad94:	80 8f       	std	Z+24, r24	; 0x18
   1ad96:	91 8f       	std	Z+25, r25	; 0x19
   1ad98:	a2 8f       	std	Z+26, r26	; 0x1a
                LIF->files++;
   1ad9a:	b3 8f       	std	Z+27, r27	; 0x1b
   1ad9c:	84 8d       	ldd	r24, Z+28	; 0x1c
   1ad9e:	95 8d       	ldd	r25, Z+29	; 0x1d
   1ada0:	01 96       	adiw	r24, 0x01	; 1
   1ada2:	95 8f       	std	Z+29, r25	; 0x1d
                LIF->purged--;
   1ada4:	84 8f       	std	Z+28, r24	; 0x1c
   1ada6:	86 8d       	ldd	r24, Z+30	; 0x1e
   1ada8:	97 8d       	ldd	r25, Z+31	; 0x1f
   1adaa:	01 97       	sbiw	r24, 0x01	; 1
   1adac:	97 8f       	std	Z+31, r25	; 0x1f
                LIF->dirindex = freeindex;
   1adae:	86 8f       	std	Z+30, r24	; 0x1e
   1adb0:	20 a2       	std	Z+32, r2	; 0x20
                // Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   1adb2:	31 a2       	std	Z+33, r3	; 0x21
   1adb4:	b1 01       	movw	r22, r2
   1adb6:	cf 01       	movw	r24, r30
   1adb8:	ef da       	rcall	.-2594   	; 0x1a398 <lif_writedirindex>
   1adba:	89 2b       	or	r24, r25
   1adbc:	09 f4       	brne	.+2      	; 0x1adc0 <lif_newdir+0x17e>
   1adbe:	a0 c0       	rjmp	.+320    	; 0x1af00 <lif_newdir+0x2be>
   1adc0:	c1 01       	movw	r24, r2
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & 0x400)
   1adc2:	a0 c0       	rjmp	.+320    	; 0x1af04 <lif_newdir+0x2c2>
   1adc4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1adc8:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1adcc:	92 ff       	sbrs	r25, 2
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n", 
   1adce:	20 c0       	rjmp	.+64     	; 0x1ae10 <lif_newdir+0x1ce>
   1add0:	eb 85       	ldd	r30, Y+11	; 0x0b
   1add2:	fc 85       	ldd	r31, Y+12	; 0x0c
   1add4:	83 8d       	ldd	r24, Z+27	; 0x1b
   1add6:	8f 93       	push	r24
   1add8:	82 8d       	ldd	r24, Z+26	; 0x1a
   1adda:	8f 93       	push	r24
   1addc:	81 8d       	ldd	r24, Z+25	; 0x19
   1adde:	8f 93       	push	r24
   1ade0:	80 8d       	ldd	r24, Z+24	; 0x18
   1ade2:	8f 93       	push	r24
   1ade4:	ff 92       	push	r15
   1ade6:	ef 92       	push	r14
   1ade8:	df 92       	push	r13
   1adea:	cf 92       	push	r12
   1adec:	bf 92       	push	r11
   1adee:	af 92       	push	r10
   1adf0:	9f 92       	push	r9
   1adf2:	8f 92       	push	r8
   1adf4:	1f 93       	push	r17
   1adf6:	0f 93       	push	r16
   1adf8:	81 e0       	ldi	r24, 0x01	; 1
   1adfa:	9c e3       	ldi	r25, 0x3C	; 60
   1adfc:	1f 92       	push	r1
   1adfe:	9f 93       	push	r25
   1ae00:	8f 93       	push	r24
   1ae02:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1ae06:	0f b6       	in	r0, 0x3f	; 63
   1ae08:	f8 94       	cli
   1ae0a:	de bf       	out	0x3e, r29	; 62
   1ae0c:	0f be       	out	0x3f, r0	; 63
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

            // Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   1ae0e:	cd bf       	out	0x3d, r28	; 61
   1ae10:	b8 01       	movw	r22, r16
   1ae12:	6f 5f       	subi	r22, 0xFF	; 255
   1ae14:	7f 4f       	sbci	r23, 0xFF	; 255
   1ae16:	8b 85       	ldd	r24, Y+11	; 0x0b
   1ae18:	9c 85       	ldd	r25, Y+12	; 0x0c
   1ae1a:	1a db       	rcall	.-2508   	; 0x1a450 <lif_writedirEOF>
   1ae1c:	89 2b       	or	r24, r25
   1ae1e:	09 f4       	brne	.+2      	; 0x1ae22 <lif_newdir+0x1e0>
            {
                break;
            }

            lif_dir_clear(LIF);
   1ae20:	6f c0       	rjmp	.+222    	; 0x1af00 <lif_newdir+0x2be>
   1ae22:	8b 85       	ldd	r24, Y+11	; 0x0b
   1ae24:	9c 85       	ldd	r25, Y+12	; 0x0c
   1ae26:	0e 94 b2 cc 	call	0x19964	; 0x19964 <lif_dir_clear>
            LIF->DIR.FileStartSector = start;
   1ae2a:	eb 85       	ldd	r30, Y+11	; 0x0b
   1ae2c:	fc 85       	ldd	r31, Y+12	; 0x0c
   1ae2e:	e4 5a       	subi	r30, 0xA4	; 164
   1ae30:	ff 4f       	sbci	r31, 0xFF	; 255
   1ae32:	80 82       	st	Z, r8
   1ae34:	91 82       	std	Z+1, r9	; 0x01
   1ae36:	a2 82       	std	Z+2, r10	; 0x02
            LIF->DIR.FileSectors = sectors;
   1ae38:	b3 82       	std	Z+3, r11	; 0x03
   1ae3a:	eb 85       	ldd	r30, Y+11	; 0x0b
   1ae3c:	fc 85       	ldd	r31, Y+12	; 0x0c
   1ae3e:	e0 5a       	subi	r30, 0xA0	; 160
   1ae40:	ff 4f       	sbci	r31, 0xFF	; 255
   1ae42:	c0 82       	st	Z, r12
   1ae44:	d1 82       	std	Z+1, r13	; 0x01
   1ae46:	e2 82       	std	Z+2, r14	; 0x02
            LIF->usedsectors += sectors;
   1ae48:	f3 82       	std	Z+3, r15	; 0x03
   1ae4a:	eb 85       	ldd	r30, Y+11	; 0x0b
   1ae4c:	fc 85       	ldd	r31, Y+12	; 0x0c
   1ae4e:	84 89       	ldd	r24, Z+20	; 0x14
   1ae50:	95 89       	ldd	r25, Z+21	; 0x15
   1ae52:	a6 89       	ldd	r26, Z+22	; 0x16
   1ae54:	b7 89       	ldd	r27, Z+23	; 0x17
   1ae56:	8c 0d       	add	r24, r12
   1ae58:	9d 1d       	adc	r25, r13
   1ae5a:	ae 1d       	adc	r26, r14
   1ae5c:	bf 1d       	adc	r27, r15
   1ae5e:	84 8b       	std	Z+20, r24	; 0x14
   1ae60:	95 8b       	std	Z+21, r25	; 0x15
   1ae62:	a6 8b       	std	Z+22, r26	; 0x16
            LIF->freesectors -= sectors;
   1ae64:	b7 8b       	std	Z+23, r27	; 0x17
   1ae66:	80 8d       	ldd	r24, Z+24	; 0x18
   1ae68:	91 8d       	ldd	r25, Z+25	; 0x19
   1ae6a:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1ae6c:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1ae6e:	8c 19       	sub	r24, r12
   1ae70:	9d 09       	sbc	r25, r13
   1ae72:	ae 09       	sbc	r26, r14
   1ae74:	bf 09       	sbc	r27, r15
   1ae76:	80 8f       	std	Z+24, r24	; 0x18
   1ae78:	91 8f       	std	Z+25, r25	; 0x19
   1ae7a:	a2 8f       	std	Z+26, r26	; 0x1a
            LIF->files++;
   1ae7c:	b3 8f       	std	Z+27, r27	; 0x1b
   1ae7e:	84 8d       	ldd	r24, Z+28	; 0x1c
   1ae80:	95 8d       	ldd	r25, Z+29	; 0x1d
   1ae82:	01 96       	adiw	r24, 0x01	; 1
            LIF->dirindex = index;
   1ae84:	95 8f       	std	Z+29, r25	; 0x1d
            // Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   1ae86:	84 8f       	std	Z+28, r24	; 0x1c
   1ae88:	11 a3       	std	Z+33, r17	; 0x21
   1ae8a:	00 a3       	std	Z+32, r16	; 0x20
   1ae8c:	b8 01       	movw	r22, r16
   1ae8e:	cf 01       	movw	r24, r30
   1ae90:	83 da       	rcall	.-2810   	; 0x1a398 <lif_writedirindex>
   1ae92:	89 2b       	or	r24, r25
   1ae94:	a9 f1       	breq	.+106    	; 0x1af00 <lif_newdir+0x2be>


        // PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   1ae96:	c8 01       	movw	r24, r16
   1ae98:	35 c0       	rjmp	.+106    	; 0x1af04 <lif_newdir+0x2c2>
   1ae9a:	8f 82       	std	Y+7, r8	; 0x07
   1ae9c:	98 86       	std	Y+8, r9	; 0x08
   1ae9e:	a9 86       	std	Y+9, r10	; 0x09
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   1aea0:	ba 86       	std	Y+10, r11	; 0x0a
   1aea2:	18 01       	movw	r2, r16
   1aea4:	66 24       	eor	r6, r6
            }
            ++index;
            continue;
   1aea6:	63 94       	inc	r6
        }
        

        // VALID record
        if(freestate == 1)
   1aea8:	71 2c       	mov	r7, r1
   1aeaa:	34 cf       	rjmp	.-408    	; 0x1ad14 <lif_newdir+0xd2>
   1aeac:	f1 e0       	ldi	r31, 0x01	; 1
   1aeae:	6f 16       	cp	r6, r31
        {
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   1aeb0:	71 04       	cpc	r7, r1
   1aeb2:	a9 f4       	brne	.+42     	; 0x1aede <lif_newdir+0x29c>
   1aeb4:	e9 81       	ldd	r30, Y+1	; 0x01
   1aeb6:	fa 81       	ldd	r31, Y+2	; 0x02
   1aeb8:	80 81       	ld	r24, Z
   1aeba:	91 81       	ldd	r25, Z+1	; 0x01
   1aebc:	a2 81       	ldd	r26, Z+2	; 0x02
   1aebe:	b3 81       	ldd	r27, Z+3	; 0x03
   1aec0:	88 19       	sub	r24, r8
   1aec2:	99 09       	sbc	r25, r9
   1aec4:	aa 09       	sbc	r26, r10
   1aec6:	bb 09       	sbc	r27, r11
   1aec8:	8c 15       	cp	r24, r12
   1aeca:	9d 05       	cpc	r25, r13
   1aecc:	ae 05       	cpc	r26, r14
                freestate = 2;      // Found free space in purged record
            else
                freestate = 0;  // Try again
   1aece:	bf 05       	cpc	r27, r15
   1aed0:	1c f4       	brge	.+6      	; 0x1aed8 <lif_newdir+0x296>
   1aed2:	61 2c       	mov	r6, r1
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;      // Found free space in purged record
   1aed4:	71 2c       	mov	r7, r1
   1aed6:	03 c0       	rjmp	.+6      	; 0x1aede <lif_newdir+0x29c>
   1aed8:	82 e0       	ldi	r24, 0x02	; 2
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1aeda:	68 2e       	mov	r6, r24
   1aedc:	71 2c       	mov	r7, r1
   1aede:	e9 81       	ldd	r30, Y+1	; 0x01
   1aee0:	fa 81       	ldd	r31, Y+2	; 0x02
   1aee2:	80 80       	ld	r8, Z
   1aee4:	91 80       	ldd	r9, Z+1	; 0x01
   1aee6:	a2 80       	ldd	r10, Z+2	; 0x02
   1aee8:	b3 80       	ldd	r11, Z+3	; 0x03
   1aeea:	ed 81       	ldd	r30, Y+5	; 0x05
   1aeec:	fe 81       	ldd	r31, Y+6	; 0x06
   1aeee:	80 81       	ld	r24, Z
   1aef0:	91 81       	ldd	r25, Z+1	; 0x01
   1aef2:	a2 81       	ldd	r26, Z+2	; 0x02
   1aef4:	b3 81       	ldd	r27, Z+3	; 0x03
   1aef6:	88 0e       	add	r8, r24
   1aef8:	99 1e       	adc	r9, r25
   1aefa:	aa 1e       	adc	r10, r26
        ++index;
    }
    // ERROR
    return(-1);
   1aefc:	bb 1e       	adc	r11, r27
   1aefe:	0a cf       	rjmp	.-492    	; 0x1ad14 <lif_newdir+0xd2>
}
   1af00:	8f ef       	ldi	r24, 0xFF	; 255
   1af02:	9f ef       	ldi	r25, 0xFF	; 255
   1af04:	2c 96       	adiw	r28, 0x0c	; 12
   1af06:	e2 e1       	ldi	r30, 0x12	; 18
   1af08:	0c 94 ab e9 	jmp	0x1d356	; 0x1d356 <__epilogue_restores__>

0001af0c <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   1af0c:	a0 e3       	ldi	r26, 0x30	; 48
   1af0e:	b1 e0       	ldi	r27, 0x01	; 1
   1af10:	ec e8       	ldi	r30, 0x8C	; 140
   1af12:	f7 ed       	ldi	r31, 0xD7	; 215
   1af14:	0c 94 97 e9 	jmp	0x1d32e	; 0x1d32e <__prologue_saves__+0x10>
   1af18:	b8 2e       	mov	r11, r24
   1af1a:	a9 2e       	mov	r10, r25
   1af1c:	6b 01       	movw	r12, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];


    sp = lif_stat(name, (stat_t *)&sb);
   1af1e:	be 01       	movw	r22, r28
   1af20:	6f 5f       	subi	r22, 0xFF	; 255
   1af22:	7e 4f       	sbci	r23, 0xFE	; 254
   1af24:	0e 94 ec c7 	call	0x18fd8	; 0x18fd8 <lif_stat>
   1af28:	8c 01       	movw	r16, r24
    if(sp == NULL)
   1af2a:	00 97       	sbiw	r24, 0x00	; 0
   1af2c:	09 f4       	brne	.+2      	; 0x1af30 <lif_open_volume+0x24>
   1af2e:	92 c0       	rjmp	.+292    	; 0x1b054 <lif_open_volume+0x148>
        return(NULL);


    // To read LIF volume we must have at minimum two sectors
    // volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   1af30:	fc 01       	movw	r30, r24
   1af32:	80 8d       	ldd	r24, Z+24	; 0x18
   1af34:	91 8d       	ldd	r25, Z+25	; 0x19
   1af36:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1af38:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1af3a:	81 15       	cp	r24, r1
   1af3c:	f2 e0       	ldi	r31, 0x02	; 2
   1af3e:	9f 07       	cpc	r25, r31
   1af40:	a1 05       	cpc	r26, r1
   1af42:	b1 05       	cpc	r27, r1
   1af44:	b8 f4       	brcc	.+46     	; 0x1af74 <lif_open_volume+0x68>
    {
        if(debuglevel & 1)
   1af46:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   1af4a:	20 ff       	sbrs	r18, 0
   1af4c:	83 c0       	rjmp	.+262    	; 0x1b054 <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   1af4e:	bf 93       	push	r27
   1af50:	af 93       	push	r26
   1af52:	9f 93       	push	r25
   1af54:	8f 93       	push	r24
   1af56:	af 92       	push	r10
   1af58:	bf 92       	push	r11
   1af5a:	82 ec       	ldi	r24, 0xC2	; 194
   1af5c:	9b e3       	ldi	r25, 0x3B	; 59
   1af5e:	1f 92       	push	r1
   1af60:	9f 93       	push	r25
   1af62:	8f 93       	push	r24
   1af64:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1af68:	0f b6       	in	r0, 0x3f	; 63
   1af6a:	f8 94       	cli
   1af6c:	de bf       	out	0x3e, r29	; 62
   1af6e:	0f be       	out	0x3f, r0	; 63
   1af70:	cd bf       	out	0x3d, r28	; 61
   1af72:	70 c0       	rjmp	.+224    	; 0x1b054 <lif_open_volume+0x148>
        return(NULL);
    }


    // Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   1af74:	64 e7       	ldi	r22, 0x74	; 116
   1af76:	70 e0       	ldi	r23, 0x00	; 0
   1af78:	80 e0       	ldi	r24, 0x00	; 0
   1af7a:	90 e0       	ldi	r25, 0x00	; 0
   1af7c:	0e 94 69 c7 	call	0x18ed2	; 0x18ed2 <lif_calloc>
   1af80:	7c 01       	movw	r14, r24
    if(!LIF)
   1af82:	89 2b       	or	r24, r25
   1af84:	09 f4       	brne	.+2      	; 0x1af88 <lif_open_volume+0x7c>
   1af86:	66 c0       	rjmp	.+204    	; 0x1b054 <lif_open_volume+0x148>
        return(NULL);

    LIF->name = lif_stralloc(name);
   1af88:	8b 2d       	mov	r24, r11
   1af8a:	9a 2d       	mov	r25, r10
   1af8c:	0e 94 a5 c7 	call	0x18f4a	; 0x18f4a <lif_stralloc>
   1af90:	f7 01       	movw	r30, r14
   1af92:	91 83       	std	Z+1, r25	; 0x01
   1af94:	80 83       	st	Z, r24
    if(!LIF->name)
   1af96:	00 97       	sbiw	r24, 0x00	; 0
   1af98:	09 f4       	brne	.+2      	; 0x1af9c <lif_open_volume+0x90>
   1af9a:	5a c0       	rjmp	.+180    	; 0x1b050 <lif_open_volume+0x144>
    {
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
   1af9c:	f8 01       	movw	r30, r16
   1af9e:	00 8d       	ldd	r16, Z+24	; 0x18
   1afa0:	11 8d       	ldd	r17, Z+25	; 0x19
   1afa2:	22 8d       	ldd	r18, Z+26	; 0x1a
   1afa4:	33 8d       	ldd	r19, Z+27	; 0x1b
   1afa6:	f7 01       	movw	r30, r14
   1afa8:	00 87       	std	Z+8, r16	; 0x08
   1afaa:	11 87       	std	Z+9, r17	; 0x09
   1afac:	22 87       	std	Z+10, r18	; 0x0a
   1afae:	33 87       	std	Z+11, r19	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1afb0:	77 27       	eor	r23, r23
   1afb2:	63 2f       	mov	r22, r19
   1afb4:	52 2f       	mov	r21, r18
   1afb6:	41 2f       	mov	r20, r17
    if(bytes % (long)LIF_SECTOR_SIZE)
   1afb8:	00 23       	and	r16, r16
   1afba:	21 f0       	breq	.+8      	; 0x1afc4 <lif_open_volume+0xb8>
        ++sectors;
   1afbc:	4f 5f       	subi	r20, 0xFF	; 255
   1afbe:	5f 4f       	sbci	r21, 0xFF	; 255
   1afc0:	6f 4f       	sbci	r22, 0xFF	; 255
   1afc2:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   1afc4:	f7 01       	movw	r30, r14
   1afc6:	44 83       	std	Z+4, r20	; 0x04
   1afc8:	55 83       	std	Z+5, r21	; 0x05
   1afca:	66 83       	std	Z+6, r22	; 0x06
   1afcc:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   1afce:	b6 01       	movw	r22, r12
   1afd0:	0e 94 c4 c7 	call	0x18f88	; 0x18f88 <lif_open>
   1afd4:	f7 01       	movw	r30, r14
   1afd6:	93 83       	std	Z+3, r25	; 0x03
   1afd8:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   1afda:	89 2b       	or	r24, r25
   1afdc:	c9 f1       	breq	.+114    	; 0x1b050 <lif_open_volume+0x144>
        return(NULL);
    }
        
        
    // Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   1afde:	00 e0       	ldi	r16, 0x00	; 0
   1afe0:	11 e0       	ldi	r17, 0x01	; 1
   1afe2:	20 e0       	ldi	r18, 0x00	; 0
   1afe4:	30 e0       	ldi	r19, 0x00	; 0
   1afe6:	a9 01       	movw	r20, r18
   1afe8:	be 01       	movw	r22, r28
   1afea:	6f 5f       	subi	r22, 0xFF	; 255
   1afec:	7f 4f       	sbci	r23, 0xFF	; 255
   1afee:	c7 01       	movw	r24, r14
   1aff0:	0e 94 4a c8 	call	0x19094	; 0x19094 <lif_read>
   1aff4:	6f 3f       	cpi	r22, 0xFF	; 255
   1aff6:	71 05       	cpc	r23, r1
   1aff8:	81 05       	cpc	r24, r1
   1affa:	91 05       	cpc	r25, r1
   1affc:	09 f0       	breq	.+2      	; 0x1b000 <lif_open_volume+0xf4>
   1affe:	4c f4       	brge	.+18     	; 0x1b012 <lif_open_volume+0x106>
    {
        if(debuglevel & 1)
   1b000:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1b004:	80 ff       	sbrs	r24, 0
   1b006:	24 c0       	rjmp	.+72     	; 0x1b050 <lif_open_volume+0x144>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   1b008:	af 92       	push	r10
   1b00a:	bf 92       	push	r11
   1b00c:	8c e8       	ldi	r24, 0x8C	; 140
   1b00e:	9b e3       	ldi	r25, 0x3B	; 59
   1b010:	15 c0       	rjmp	.+42     	; 0x1b03c <lif_open_volume+0x130>
        lif_closedir(LIF);
        return(NULL);
    }

    // Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   1b012:	b7 01       	movw	r22, r14
   1b014:	ce 01       	movw	r24, r28
   1b016:	01 96       	adiw	r24, 0x01	; 1
   1b018:	0e 94 65 ca 	call	0x194ca	; 0x194ca <lif_str2vol>

    // Validate basic Volume headers 
    if( !lif_check_volume(LIF) )
   1b01c:	c7 01       	movw	r24, r14
   1b01e:	0e 94 54 ce 	call	0x19ca8	; 0x19ca8 <lif_check_volume>
   1b022:	89 2b       	or	r24, r25
   1b024:	d1 f4       	brne	.+52     	; 0x1b05a <lif_open_volume+0x14e>
    {
        if(debuglevel & 1)
   1b026:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1b02a:	80 ff       	sbrs	r24, 0
   1b02c:	11 c0       	rjmp	.+34     	; 0x1b050 <lif_open_volume+0x144>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   1b02e:	f7 01       	movw	r30, r14
   1b030:	81 81       	ldd	r24, Z+1	; 0x01
   1b032:	8f 93       	push	r24
   1b034:	80 81       	ld	r24, Z
   1b036:	8f 93       	push	r24
   1b038:	89 e5       	ldi	r24, 0x59	; 89
   1b03a:	9b e3       	ldi	r25, 0x3B	; 59
   1b03c:	1f 92       	push	r1
   1b03e:	9f 93       	push	r25
   1b040:	8f 93       	push	r24
   1b042:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1b046:	0f 90       	pop	r0
   1b048:	0f 90       	pop	r0
   1b04a:	0f 90       	pop	r0
   1b04c:	0f 90       	pop	r0
   1b04e:	0f 90       	pop	r0
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b050:	c7 01       	movw	r24, r14
   1b052:	b8 d8       	rcall	.-3728   	; 0x1a1c4 <lif_close_volume>
    if( !lif_check_volume(LIF) )
    {
        if(debuglevel & 1)
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1b054:	00 e0       	ldi	r16, 0x00	; 0
   1b056:	10 e0       	ldi	r17, 0x00	; 0
   1b058:	4b c0       	rjmp	.+150    	; 0x1b0f0 <lif_open_volume+0x1e4>
    }

    // Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   1b05a:	f7 01       	movw	r30, r14
   1b05c:	45 a5       	ldd	r20, Z+45	; 0x2d
   1b05e:	56 a5       	ldd	r21, Z+46	; 0x2e
   1b060:	67 a5       	ldd	r22, Z+47	; 0x2f
   1b062:	70 a9       	ldd	r23, Z+48	; 0x30
   1b064:	85 a9       	ldd	r24, Z+53	; 0x35
   1b066:	96 a9       	ldd	r25, Z+54	; 0x36
   1b068:	a7 a9       	ldd	r26, Z+55	; 0x37
   1b06a:	b0 ad       	ldd	r27, Z+56	; 0x38
   1b06c:	48 0f       	add	r20, r24
   1b06e:	59 1f       	adc	r21, r25
   1b070:	6a 1f       	adc	r22, r26
   1b072:	7b 1f       	adc	r23, r27
   1b074:	44 87       	std	Z+12, r20	; 0x0c
   1b076:	55 87       	std	Z+13, r21	; 0x0d
   1b078:	66 87       	std	Z+14, r22	; 0x0e
   1b07a:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   1b07c:	84 81       	ldd	r24, Z+4	; 0x04
   1b07e:	95 81       	ldd	r25, Z+5	; 0x05
   1b080:	a6 81       	ldd	r26, Z+6	; 0x06
   1b082:	b7 81       	ldd	r27, Z+7	; 0x07
   1b084:	84 1b       	sub	r24, r20
   1b086:	95 0b       	sbc	r25, r21
   1b088:	a6 0b       	sbc	r26, r22
   1b08a:	b7 0b       	sbc	r27, r23
   1b08c:	80 8b       	std	Z+16, r24	; 0x10
   1b08e:	91 8b       	std	Z+17, r25	; 0x11
   1b090:	a2 8b       	std	Z+18, r26	; 0x12
   1b092:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   1b094:	80 8f       	std	Z+24, r24	; 0x18
   1b096:	91 8f       	std	Z+25, r25	; 0x19
   1b098:	a2 8f       	std	Z+26, r26	; 0x1a
   1b09a:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   1b09c:	14 8a       	std	Z+20, r1	; 0x14
   1b09e:	15 8a       	std	Z+21, r1	; 0x15
   1b0a0:	16 8a       	std	Z+22, r1	; 0x16
   1b0a2:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   1b0a4:	17 8e       	std	Z+31, r1	; 0x1f
   1b0a6:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   1b0a8:	15 8e       	std	Z+29, r1	; 0x1d
   1b0aa:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   1b0ac:	11 a2       	std	Z+33, r1	; 0x21
   1b0ae:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   1b0b0:	13 a2       	std	Z+35, r1	; 0x23

    if( lif_updatefree(LIF) == NULL)
   1b0b2:	12 a2       	std	Z+34, r1	; 0x22
   1b0b4:	c7 01       	movw	r24, r14
   1b0b6:	e4 d9       	rcall	.-3128   	; 0x1a480 <lif_updatefree>
   1b0b8:	8c 01       	movw	r16, r24
   1b0ba:	89 2b       	or	r24, r25
    {
        if(debuglevel & 1)
   1b0bc:	c1 f4       	brne	.+48     	; 0x1b0ee <lif_open_volume+0x1e2>
   1b0be:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1b0c2:	80 ff       	sbrs	r24, 0
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   1b0c4:	11 c0       	rjmp	.+34     	; 0x1b0e8 <lif_open_volume+0x1dc>
   1b0c6:	f7 01       	movw	r30, r14
   1b0c8:	81 81       	ldd	r24, Z+1	; 0x01
   1b0ca:	8f 93       	push	r24
   1b0cc:	80 81       	ld	r24, Z
   1b0ce:	8f 93       	push	r24
   1b0d0:	86 e2       	ldi	r24, 0x26	; 38
   1b0d2:	9b e3       	ldi	r25, 0x3B	; 59
   1b0d4:	1f 92       	push	r1
   1b0d6:	9f 93       	push	r25
   1b0d8:	8f 93       	push	r24
   1b0da:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1b0de:	0f 90       	pop	r0
   1b0e0:	0f 90       	pop	r0
   1b0e2:	0f 90       	pop	r0
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b0e4:	0f 90       	pop	r0
   1b0e6:	0f 90       	pop	r0
   1b0e8:	c7 01       	movw	r24, r14
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & 1)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1b0ea:	6c d8       	rcall	.-3880   	; 0x1a1c4 <lif_close_volume>
   1b0ec:	01 c0       	rjmp	.+2      	; 0x1b0f0 <lif_open_volume+0x1e4>
    }

    return( LIF );
}
   1b0ee:	87 01       	movw	r16, r14
   1b0f0:	c8 01       	movw	r24, r16
   1b0f2:	c0 5d       	subi	r28, 0xD0	; 208
   1b0f4:	de 4f       	sbci	r29, 0xFE	; 254
   1b0f6:	ea e0       	ldi	r30, 0x0A	; 10
   1b0f8:	0c 94 b3 e9 	jmp	0x1d366	; 0x1d366 <__epilogue_restores__+0x10>

0001b0fc <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   1b0fc:	a1 e1       	ldi	r26, 0x11	; 17
   1b0fe:	b0 e0       	ldi	r27, 0x00	; 0
   1b100:	e4 e8       	ldi	r30, 0x84	; 132
   1b102:	f8 ed       	ldi	r31, 0xD8	; 216
   1b104:	0c 94 8f e9 	jmp	0x1d31e	; 0x1d31e <__prologue_saves__>
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   1b108:	6f ef       	ldi	r22, 0xFF	; 255
   1b10a:	78 e0       	ldi	r23, 0x08	; 8
   1b10c:	ff de       	rcall	.-514    	; 0x1af0c <lif_open_volume>
   1b10e:	99 8b       	std	Y+17, r25	; 0x11
   1b110:	88 8b       	std	Y+16, r24	; 0x10
    if(LIF == NULL)
   1b112:	00 97       	sbiw	r24, 0x00	; 0
   1b114:	09 f4       	brne	.+2      	; 0x1b118 <lif_dir+0x1c>
   1b116:	5b c1       	rjmp	.+694    	; 0x1b3ce <lif_dir+0x2d2>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   1b118:	fc 01       	movw	r30, r24
   1b11a:	86 a1       	ldd	r24, Z+38	; 0x26
   1b11c:	88 23       	and	r24, r24
   1b11e:	21 f0       	breq	.+8      	; 0x1b128 <lif_dir+0x2c>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   1b120:	8f 01       	movw	r16, r30
   1b122:	0a 5d       	subi	r16, 0xDA	; 218
   1b124:	1f 4f       	sbci	r17, 0xFF	; 255
   1b126:	02 c0       	rjmp	.+4      	; 0x1b12c <lif_dir+0x30>
    if(!vol[0])
        vol = "<EMPTY>";
   1b128:	0d e2       	ldi	r16, 0x2D	; 45
   1b12a:	16 e1       	ldi	r17, 0x16	; 22

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   1b12c:	88 89       	ldd	r24, Y+16	; 0x10
   1b12e:	99 89       	ldd	r25, Y+17	; 0x11
   1b130:	87 5b       	subi	r24, 0xB7	; 183
   1b132:	9f 4f       	sbci	r25, 0xFF	; 255
   1b134:	0e 94 85 cc 	call	0x1990a	; 0x1990a <lif_lifbcd2timestr>
   1b138:	9f 93       	push	r25
   1b13a:	8f 93       	push	r24
   1b13c:	1f 93       	push	r17
   1b13e:	0f 93       	push	r16
   1b140:	8f e0       	ldi	r24, 0x0F	; 15
   1b142:	9b e3       	ldi	r25, 0x3B	; 59
   1b144:	1f 92       	push	r1
   1b146:	9f 93       	push	r25
   1b148:	8f 93       	push	r24
   1b14a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   1b14e:	8f ec       	ldi	r24, 0xCF	; 207
   1b150:	9a e3       	ldi	r25, 0x3A	; 58
   1b152:	1f 92       	push	r1
   1b154:	9f 93       	push	r25
   1b156:	8f 93       	push	r24
   1b158:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1b15c:	0f b6       	in	r0, 0x3f	; 63
   1b15e:	f8 94       	cli
   1b160:	de bf       	out	0x3e, r29	; 62
   1b162:	0f be       	out	0x3f, r0	; 63
   1b164:	cd bf       	out	0x3d, r28	; 61
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   1b166:	60 e2       	ldi	r22, 0x20	; 32
   1b168:	96 2e       	mov	r9, r22
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   1b16a:	00 e0       	ldi	r16, 0x00	; 0
   1b16c:	10 e0       	ldi	r17, 0x00	; 0

        if(!lif_readdirindex(LIF,index))
            break;


        if(LIF->DIR.FileType == 0xffff)
   1b16e:	88 89       	ldd	r24, Y+16	; 0x10
   1b170:	99 89       	ldd	r25, Y+17	; 0x11
   1b172:	86 5a       	subi	r24, 0xA6	; 166
   1b174:	9f 4f       	sbci	r25, 0xFF	; 255
   1b176:	9c 83       	std	Y+4, r25	; 0x04
   1b178:	8b 83       	std	Y+3, r24	; 0x03
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1b17a:	e8 89       	ldd	r30, Y+16	; 0x10
   1b17c:	f9 89       	ldd	r31, Y+17	; 0x11
   1b17e:	e0 5a       	subi	r30, 0xA0	; 160
   1b180:	ff 4f       	sbci	r31, 0xFF	; 255
   1b182:	fb 87       	std	Y+11, r31	; 0x0b
   1b184:	ea 87       	std	Y+10, r30	; 0x0a

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1b186:	28 89       	ldd	r18, Y+16	; 0x10
   1b188:	39 89       	ldd	r19, Y+17	; 0x11
   1b18a:	24 59       	subi	r18, 0x94	; 148
   1b18c:	3f 4f       	sbci	r19, 0xFF	; 255
   1b18e:	3d 87       	std	Y+13, r19	; 0x0d
   1b190:	2c 87       	std	Y+12, r18	; 0x0c
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1b192:	88 89       	ldd	r24, Y+16	; 0x10
   1b194:	99 89       	ldd	r25, Y+17	; 0x11
   1b196:	81 5b       	subi	r24, 0xB1	; 177
   1b198:	9f 4f       	sbci	r25, 0xFF	; 255
   1b19a:	9a 83       	std	Y+2, r25	; 0x02
   1b19c:	89 83       	std	Y+1, r24	; 0x01
   1b19e:	83 e8       	ldi	r24, 0x83	; 131
   1b1a0:	9a e3       	ldi	r25, 0x3A	; 58
   1b1a2:	3c 01       	movw	r6, r24
   1b1a4:	81 2c       	mov	r8, r1
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1b1a6:	e8 89       	ldd	r30, Y+16	; 0x10
   1b1a8:	f9 89       	ldd	r31, Y+17	; 0x11
   1b1aa:	ec 59       	subi	r30, 0x9C	; 156
   1b1ac:	ff 4f       	sbci	r31, 0xFF	; 255
   1b1ae:	ff 87       	std	Y+15, r31	; 0x0f
   1b1b0:	ee 87       	std	Y+14, r30	; 0x0e
   1b1b2:	28 89       	ldd	r18, Y+16	; 0x10
   1b1b4:	39 89       	ldd	r19, Y+17	; 0x11
   1b1b6:	22 59       	subi	r18, 0x92	; 146
   1b1b8:	3f 4f       	sbci	r19, 0xFF	; 255
   1b1ba:	3e 83       	std	Y+6, r19	; 0x06
   1b1bc:	2d 83       	std	Y+5, r18	; 0x05
   1b1be:	a8 88       	ldd	r10, Y+16	; 0x10
   1b1c0:	b9 88       	ldd	r11, Y+17	; 0x11
   1b1c2:	3c e5       	ldi	r19, 0x5C	; 92
   1b1c4:	a3 0e       	add	r10, r19
   1b1c6:	b1 1c       	adc	r11, r1
   1b1c8:	83 e5       	ldi	r24, 0x53	; 83
   1b1ca:	9a e3       	ldi	r25, 0x3A	; 58
   1b1cc:	9c 01       	movw	r18, r24
   1b1ce:	40 e0       	ldi	r20, 0x00	; 0
   1b1d0:	2f 83       	std	Y+7, r18	; 0x07
   1b1d2:	38 87       	std	Y+8, r19	; 0x08
   1b1d4:	49 87       	std	Y+9, r20	; 0x09
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1b1d6:	b8 01       	movw	r22, r16
   1b1d8:	88 89       	ldd	r24, Y+16	; 0x10
   1b1da:	99 89       	ldd	r25, Y+17	; 0x11
   1b1dc:	74 d8       	rcall	.-3864   	; 0x1a2c6 <lif_readdirindex>
   1b1de:	89 2b       	or	r24, r25
   1b1e0:	09 f4       	brne	.+2      	; 0x1b1e4 <lif_dir+0xe8>
   1b1e2:	9d c0       	rjmp	.+314    	; 0x1b31e <lif_dir+0x222>
            break;


        if(LIF->DIR.FileType == 0xffff)
   1b1e4:	eb 81       	ldd	r30, Y+3	; 0x03
   1b1e6:	fc 81       	ldd	r31, Y+4	; 0x04
   1b1e8:	20 81       	ld	r18, Z
   1b1ea:	31 81       	ldd	r19, Z+1	; 0x01
   1b1ec:	2f 3f       	cpi	r18, 0xFF	; 255
   1b1ee:	ff ef       	ldi	r31, 0xFF	; 255
   1b1f0:	3f 07       	cpc	r19, r31
   1b1f2:	09 f4       	brne	.+2      	; 0x1b1f6 <lif_dir+0xfa>
   1b1f4:	94 c0       	rjmp	.+296    	; 0x1b31e <lif_dir+0x222>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1b1f6:	ea 85       	ldd	r30, Y+10	; 0x0a
   1b1f8:	fb 85       	ldd	r31, Y+11	; 0x0b
   1b1fa:	80 81       	ld	r24, Z
   1b1fc:	91 81       	ldd	r25, Z+1	; 0x01
   1b1fe:	a2 81       	ldd	r26, Z+2	; 0x02
   1b200:	b3 81       	ldd	r27, Z+3	; 0x03
   1b202:	cc 24       	eor	r12, r12
   1b204:	d8 2e       	mov	r13, r24
   1b206:	e9 2e       	mov	r14, r25
   1b208:	fa 2e       	mov	r15, r26

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1b20a:	2c 7f       	andi	r18, 0xFC	; 252
   1b20c:	20 31       	cpi	r18, 0x10	; 16
   1b20e:	30 4e       	sbci	r19, 0xE0	; 224
   1b210:	09 f0       	breq	.+2      	; 0x1b214 <lif_dir+0x118>
   1b212:	4b c0       	rjmp	.+150    	; 0x1b2aa <lif_dir+0x1ae>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1b214:	ec 85       	ldd	r30, Y+12	; 0x0c
   1b216:	fd 85       	ldd	r31, Y+13	; 0x0d
   1b218:	20 81       	ld	r18, Z
   1b21a:	31 81       	ldd	r19, Z+1	; 0x01
   1b21c:	21 15       	cp	r18, r1
   1b21e:	31 05       	cpc	r19, r1
   1b220:	a9 f0       	breq	.+42     	; 0x1b24c <lif_dir+0x150>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1b222:	19 01       	movw	r2, r18
   1b224:	41 2c       	mov	r4, r1
   1b226:	51 2c       	mov	r5, r1
   1b228:	77 27       	eor	r23, r23
   1b22a:	65 2d       	mov	r22, r5
   1b22c:	54 2d       	mov	r21, r4
   1b22e:	43 2d       	mov	r20, r3
    if(bytes % (long)LIF_SECTOR_SIZE)
   1b230:	22 23       	and	r18, r18
   1b232:	21 f0       	breq	.+8      	; 0x1b23c <lif_dir+0x140>
        ++sectors;
   1b234:	4f 5f       	subi	r20, 0xFF	; 255
   1b236:	5f 4f       	sbci	r21, 0xFF	; 255
   1b238:	6f 4f       	sbci	r22, 0xFF	; 255
   1b23a:	7f 4f       	sbci	r23, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1b23c:	84 17       	cp	r24, r20
   1b23e:	95 07       	cpc	r25, r21
   1b240:	a6 07       	cpc	r26, r22
   1b242:	b7 07       	cpc	r27, r23
   1b244:	19 f4       	brne	.+6      	; 0x1b24c <lif_dir+0x150>
            {
                bytes = LIF->DIR.FileBytes;
   1b246:	72 01       	movw	r14, r4
   1b248:	61 01       	movw	r12, r2
   1b24a:	2f c0       	rjmp	.+94     	; 0x1b2aa <lif_dir+0x1ae>
            }
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
   1b24c:	40 91 b0 01 	lds	r20, 0x01B0	; 0x8001b0 <debuglevel>
   1b250:	50 91 b1 01 	lds	r21, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1b254:	52 ff       	sbrs	r21, 2
   1b256:	27 c0       	rjmp	.+78     	; 0x1b2a6 <lif_dir+0x1aa>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1b258:	19 01       	movw	r2, r18
   1b25a:	41 2c       	mov	r4, r1
   1b25c:	51 2c       	mov	r5, r1
   1b25e:	77 27       	eor	r23, r23
   1b260:	65 2d       	mov	r22, r5
   1b262:	54 2d       	mov	r21, r4
   1b264:	43 2d       	mov	r20, r3
    if(bytes % (long)LIF_SECTOR_SIZE)
   1b266:	22 23       	and	r18, r18
   1b268:	21 f0       	breq	.+8      	; 0x1b272 <lif_dir+0x176>
        ++sectors;
   1b26a:	4f 5f       	subi	r20, 0xFF	; 255
   1b26c:	5f 4f       	sbci	r21, 0xFF	; 255
   1b26e:	6f 4f       	sbci	r22, 0xFF	; 255
   1b270:	7f 4f       	sbci	r23, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1b272:	bf 93       	push	r27
   1b274:	af 93       	push	r26
   1b276:	9f 93       	push	r25
   1b278:	8f 93       	push	r24
   1b27a:	7f 93       	push	r23
   1b27c:	6f 93       	push	r22
   1b27e:	5f 93       	push	r21
   1b280:	4f 93       	push	r20
   1b282:	1f 92       	push	r1
   1b284:	1f 92       	push	r1
   1b286:	3f 92       	push	r3
   1b288:	2f 92       	push	r2
   1b28a:	fa 81       	ldd	r31, Y+2	; 0x02
   1b28c:	ff 93       	push	r31
   1b28e:	29 81       	ldd	r18, Y+1	; 0x01
   1b290:	2f 93       	push	r18
   1b292:	1f 92       	push	r1
   1b294:	7f 92       	push	r7
   1b296:	6f 92       	push	r6
   1b298:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1b29c:	0f b6       	in	r0, 0x3f	; 63
   1b29e:	f8 94       	cli
   1b2a0:	de bf       	out	0x3e, r29	; 62
   1b2a2:	0f be       	out	0x3f, r0	; 63
   1b2a4:	cd bf       	out	0x3d, r28	; 61
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1b2a6:	81 e2       	ldi	r24, 0x21	; 33
   1b2a8:	98 2e       	mov	r9, r24
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1b2aa:	8e 85       	ldd	r24, Y+14	; 0x0e
   1b2ac:	9f 85       	ldd	r25, Y+15	; 0x0f
   1b2ae:	0e 94 85 cc 	call	0x1990a	; 0x1990a <lif_lifbcd2timestr>
   1b2b2:	ed 81       	ldd	r30, Y+5	; 0x05
   1b2b4:	fe 81       	ldd	r31, Y+6	; 0x06
   1b2b6:	a0 81       	ld	r26, Z
   1b2b8:	b1 81       	ldd	r27, Z+1	; 0x01
   1b2ba:	f5 01       	movw	r30, r10
   1b2bc:	60 81       	ld	r22, Z
   1b2be:	71 81       	ldd	r23, Z+1	; 0x01
   1b2c0:	52 80       	ldd	r5, Z+2	; 0x02
   1b2c2:	43 80       	ldd	r4, Z+3	; 0x03
   1b2c4:	eb 81       	ldd	r30, Y+3	; 0x03
   1b2c6:	fc 81       	ldd	r31, Y+4	; 0x04
   1b2c8:	40 81       	ld	r20, Z
   1b2ca:	51 81       	ldd	r21, Z+1	; 0x01
   1b2cc:	41 15       	cp	r20, r1
   1b2ce:	51 05       	cpc	r21, r1
   1b2d0:	19 f0       	breq	.+6      	; 0x1b2d8 <lif_dir+0x1dc>
   1b2d2:	29 81       	ldd	r18, Y+1	; 0x01
   1b2d4:	3a 81       	ldd	r19, Y+2	; 0x02
   1b2d6:	02 c0       	rjmp	.+4      	; 0x1b2dc <lif_dir+0x1e0>
   1b2d8:	2b e7       	ldi	r18, 0x7B	; 123
   1b2da:	36 e1       	ldi	r19, 0x16	; 22
   1b2dc:	9f 93       	push	r25
   1b2de:	8f 93       	push	r24
   1b2e0:	bf 93       	push	r27
   1b2e2:	af 93       	push	r26
   1b2e4:	1f 92       	push	r1
   1b2e6:	9f 92       	push	r9
   1b2e8:	ff 92       	push	r15
   1b2ea:	ef 92       	push	r14
   1b2ec:	df 92       	push	r13
   1b2ee:	cf 92       	push	r12
   1b2f0:	4f 92       	push	r4
   1b2f2:	5f 92       	push	r5
   1b2f4:	7f 93       	push	r23
   1b2f6:	6f 93       	push	r22
   1b2f8:	5f 93       	push	r21
   1b2fa:	4f 93       	push	r20
   1b2fc:	3f 93       	push	r19
   1b2fe:	2f 93       	push	r18
   1b300:	1f 92       	push	r1
   1b302:	f8 85       	ldd	r31, Y+8	; 0x08
   1b304:	ff 93       	push	r31
   1b306:	2f 81       	ldd	r18, Y+7	; 0x07
   1b308:	2f 93       	push	r18
   1b30a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
            (long)bytes, 
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1b30e:	0f 5f       	subi	r16, 0xFF	; 255
   1b310:	1f 4f       	sbci	r17, 0xFF	; 255
    }   
   1b312:	0f b6       	in	r0, 0x3f	; 63
   1b314:	f8 94       	cli
   1b316:	de bf       	out	0x3e, r29	; 62
   1b318:	0f be       	out	0x3f, r0	; 63
   1b31a:	cd bf       	out	0x3d, r28	; 61
   1b31c:	5c cf       	rjmp	.-328    	; 0x1b1d6 <lif_dir+0xda>

    printf("\n");
   1b31e:	81 e5       	ldi	r24, 0x51	; 81
   1b320:	9a e3       	ldi	r25, 0x3A	; 58
   1b322:	1f 92       	push	r1
   1b324:	9f 93       	push	r25
   1b326:	8f 93       	push	r24
   1b328:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1b32c:	e8 89       	ldd	r30, Y+16	; 0x10
   1b32e:	f9 89       	ldd	r31, Y+17	; 0x11
   1b330:	84 8d       	ldd	r24, Z+28	; 0x1c
   1b332:	95 8d       	ldd	r25, Z+29	; 0x1d
   1b334:	09 2e       	mov	r0, r25
   1b336:	00 0c       	add	r0, r0
   1b338:	aa 0b       	sbc	r26, r26
   1b33a:	bb 0b       	sbc	r27, r27
   1b33c:	bf 93       	push	r27
   1b33e:	af 93       	push	r26
   1b340:	9f 93       	push	r25
   1b342:	8f 93       	push	r24
   1b344:	85 e4       	ldi	r24, 0x45	; 69
   1b346:	9a e3       	ldi	r25, 0x3A	; 58
   1b348:	1f 92       	push	r1
   1b34a:	9f 93       	push	r25
   1b34c:	8f 93       	push	r24
   1b34e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1b352:	e8 89       	ldd	r30, Y+16	; 0x10
   1b354:	f9 89       	ldd	r31, Y+17	; 0x11
   1b356:	86 8d       	ldd	r24, Z+30	; 0x1e
   1b358:	97 8d       	ldd	r25, Z+31	; 0x1f
   1b35a:	09 2e       	mov	r0, r25
   1b35c:	00 0c       	add	r0, r0
   1b35e:	aa 0b       	sbc	r26, r26
   1b360:	bb 0b       	sbc	r27, r27
   1b362:	bf 93       	push	r27
   1b364:	af 93       	push	r26
   1b366:	9f 93       	push	r25
   1b368:	8f 93       	push	r24
   1b36a:	88 e3       	ldi	r24, 0x38	; 56
   1b36c:	9a e3       	ldi	r25, 0x3A	; 58
   1b36e:	1f 92       	push	r1
   1b370:	9f 93       	push	r25
   1b372:	8f 93       	push	r24
   1b374:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1b378:	e8 89       	ldd	r30, Y+16	; 0x10
   1b37a:	f9 89       	ldd	r31, Y+17	; 0x11
   1b37c:	87 89       	ldd	r24, Z+23	; 0x17
   1b37e:	8f 93       	push	r24
   1b380:	86 89       	ldd	r24, Z+22	; 0x16
   1b382:	8f 93       	push	r24
   1b384:	85 89       	ldd	r24, Z+21	; 0x15
   1b386:	8f 93       	push	r24
   1b388:	84 89       	ldd	r24, Z+20	; 0x14
   1b38a:	8f 93       	push	r24
   1b38c:	85 e2       	ldi	r24, 0x25	; 37
   1b38e:	9a e3       	ldi	r25, 0x3A	; 58
   1b390:	1f 92       	push	r1
   1b392:	9f 93       	push	r25
   1b394:	8f 93       	push	r24
   1b396:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1b39a:	e8 89       	ldd	r30, Y+16	; 0x10
   1b39c:	f9 89       	ldd	r31, Y+17	; 0x11
   1b39e:	83 8d       	ldd	r24, Z+27	; 0x1b
   1b3a0:	8f 93       	push	r24
   1b3a2:	82 8d       	ldd	r24, Z+26	; 0x1a
   1b3a4:	8f 93       	push	r24
   1b3a6:	81 8d       	ldd	r24, Z+25	; 0x19
   1b3a8:	8f 93       	push	r24
   1b3aa:	80 8d       	ldd	r24, Z+24	; 0x18
   1b3ac:	8f 93       	push	r24
   1b3ae:	82 e1       	ldi	r24, 0x12	; 18
   1b3b0:	9a e3       	ldi	r25, 0x3A	; 58
   1b3b2:	1f 92       	push	r1
   1b3b4:	9f 93       	push	r25
   1b3b6:	8f 93       	push	r24
   1b3b8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b3bc:	88 89       	ldd	r24, Y+16	; 0x10
   1b3be:	99 89       	ldd	r25, Y+17	; 0x11
   1b3c0:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>
   1b3c4:	0f b6       	in	r0, 0x3f	; 63
   1b3c6:	f8 94       	cli
   1b3c8:	de bf       	out	0x3e, r29	; 62
   1b3ca:	0f be       	out	0x3f, r0	; 63
   1b3cc:	cd bf       	out	0x3d, r28	; 61
    printf("%8ld Purged\n", (long)LIF->purged);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1b3ce:	61 96       	adiw	r28, 0x11	; 17
   1b3d0:	e2 e1       	ldi	r30, 0x12	; 18
   1b3d2:	0c 94 ab e9 	jmp	0x1d356	; 0x1d356 <__epilogue_restores__>

0001b3d6 <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1b3d6:	a0 e0       	ldi	r26, 0x00	; 0
   1b3d8:	b0 e0       	ldi	r27, 0x00	; 0
   1b3da:	e1 ef       	ldi	r30, 0xF1	; 241
   1b3dc:	f9 ed       	ldi	r31, 0xD9	; 217
   1b3de:	0c 94 97 e9 	jmp	0x1d32e	; 0x1d32e <__prologue_saves__+0x10>
   1b3e2:	7c 01       	movw	r14, r24
   1b3e4:	16 2f       	mov	r17, r22
   1b3e6:	07 2f       	mov	r16, r23
    int index;

    if( !lif_checkname(liflabel) )
   1b3e8:	86 2f       	mov	r24, r22
   1b3ea:	97 2f       	mov	r25, r23
   1b3ec:	0e 94 56 c9 	call	0x192ac	; 0x192ac <lif_checkname>
   1b3f0:	89 2b       	or	r24, r25
   1b3f2:	49 f4       	brne	.+18     	; 0x1b406 <lif_find_file+0x30>
    {
        if(debuglevel & 1)
   1b3f4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1b3f8:	80 ff       	sbrs	r24, 0
   1b3fa:	48 c0       	rjmp	.+144    	; 0x1b48c <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1b3fc:	0f 93       	push	r16
   1b3fe:	1f 93       	push	r17
   1b400:	8b ee       	ldi	r24, 0xEB	; 235
   1b402:	99 e3       	ldi	r25, 0x39	; 57
   1b404:	13 c0       	rjmp	.+38     	; 0x1b42c <lif_find_file+0x56>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1b406:	a1 2f       	mov	r26, r17
   1b408:	b0 2f       	mov	r27, r16
   1b40a:	fd 01       	movw	r30, r26
   1b40c:	01 90       	ld	r0, Z+
   1b40e:	00 20       	and	r0, r0
   1b410:	e9 f7       	brne	.-6      	; 0x1b40c <lif_find_file+0x36>
   1b412:	31 97       	sbiw	r30, 0x01	; 1
   1b414:	ea 1b       	sub	r30, r26
   1b416:	fb 0b       	sbc	r31, r27
   1b418:	3b 97       	sbiw	r30, 0x0b	; 11
   1b41a:	98 f0       	brcs	.+38     	; 0x1b442 <lif_find_file+0x6c>
    {
        if(debuglevel & 1)
   1b41c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1b420:	80 ff       	sbrs	r24, 0
   1b422:	34 c0       	rjmp	.+104    	; 0x1b48c <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1b424:	0f 93       	push	r16
   1b426:	1f 93       	push	r17
   1b428:	86 ec       	ldi	r24, 0xC6	; 198
   1b42a:	99 e3       	ldi	r25, 0x39	; 57
   1b42c:	1f 92       	push	r1
   1b42e:	9f 93       	push	r25
   1b430:	8f 93       	push	r24
   1b432:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1b436:	0f 90       	pop	r0
   1b438:	0f 90       	pop	r0
   1b43a:	0f 90       	pop	r0
   1b43c:	0f 90       	pop	r0
   1b43e:	0f 90       	pop	r0
   1b440:	25 c0       	rjmp	.+74     	; 0x1b48c <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1b442:	e1 14       	cp	r14, r1
   1b444:	f1 04       	cpc	r15, r1
   1b446:	11 f1       	breq	.+68     	; 0x1b48c <lif_find_file+0xb6>
   1b448:	c0 e0       	ldi	r28, 0x00	; 0
   1b44a:	d0 e0       	ldi	r29, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1b44c:	67 01       	movw	r12, r14
   1b44e:	2a e5       	ldi	r18, 0x5A	; 90
   1b450:	c2 0e       	add	r12, r18
   1b452:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1b454:	57 01       	movw	r10, r14
   1b456:	8f e4       	ldi	r24, 0x4F	; 79
   1b458:	a8 0e       	add	r10, r24
   1b45a:	b1 1c       	adc	r11, r1
        return(-1);
    
    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1b45c:	be 01       	movw	r22, r28
   1b45e:	c7 01       	movw	r24, r14
   1b460:	0e 94 63 d1 	call	0x1a2c6	; 0x1a2c6 <lif_readdirindex>
   1b464:	89 2b       	or	r24, r25
   1b466:	91 f0       	breq	.+36     	; 0x1b48c <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1b468:	f6 01       	movw	r30, r12
   1b46a:	80 81       	ld	r24, Z
   1b46c:	91 81       	ldd	r25, Z+1	; 0x01
   1b46e:	8f 3f       	cpi	r24, 0xFF	; 255
   1b470:	ff ef       	ldi	r31, 0xFF	; 255
   1b472:	9f 07       	cpc	r25, r31
   1b474:	59 f0       	breq	.+22     	; 0x1b48c <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1b476:	89 2b       	or	r24, r25
   1b478:	39 f0       	breq	.+14     	; 0x1b488 <lif_find_file+0xb2>
   1b47a:	61 2f       	mov	r22, r17
   1b47c:	70 2f       	mov	r23, r16
   1b47e:	c5 01       	movw	r24, r10
   1b480:	0e 94 ef 30 	call	0x61de	; 0x61de <strcasecmp>
   1b484:	89 2b       	or	r24, r25
   1b486:	29 f0       	breq	.+10     	; 0x1b492 <lif_find_file+0xbc>
            break;
        ++index;
   1b488:	21 96       	adiw	r28, 0x01	; 1
   1b48a:	e8 cf       	rjmp	.-48     	; 0x1b45c <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & 1)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1b48c:	8f ef       	ldi	r24, 0xFF	; 255
   1b48e:	9f ef       	ldi	r25, 0xFF	; 255
   1b490:	01 c0       	rjmp	.+2      	; 0x1b494 <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1b492:	ce 01       	movw	r24, r28
            break;
        ++index;
    }
    return(index);
}
   1b494:	cd b7       	in	r28, 0x3d	; 61
   1b496:	de b7       	in	r29, 0x3e	; 62
   1b498:	ea e0       	ldi	r30, 0x0A	; 10
   1b49a:	0c 94 b3 e9 	jmp	0x1d366	; 0x1d366 <__epilogue_restores__+0x10>

0001b49e <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1b49e:	a0 e0       	ldi	r26, 0x00	; 0
   1b4a0:	b0 e0       	ldi	r27, 0x00	; 0
   1b4a2:	e5 e5       	ldi	r30, 0x55	; 85
   1b4a4:	fa ed       	ldi	r31, 0xDA	; 218
   1b4a6:	0c 94 99 e9 	jmp	0x1d332	; 0x1d332 <__prologue_saves__+0x14>
   1b4aa:	6b 01       	movw	r12, r22
   1b4ac:	7c 01       	movw	r14, r24
   1b4ae:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1b4b0:	20 e0       	ldi	r18, 0x00	; 0
   1b4b2:	31 e0       	ldi	r19, 0x01	; 1
   1b4b4:	40 e0       	ldi	r20, 0x00	; 0
   1b4b6:	50 e0       	ldi	r21, 0x00	; 0
   1b4b8:	0e 94 44 e9 	call	0x1d288	; 0x1d288 <__divmodsi4>
    if(!pos)
   1b4bc:	61 15       	cp	r22, r1
   1b4be:	71 05       	cpc	r23, r1
   1b4c0:	e1 f1       	breq	.+120    	; 0x1b53a <lif_e010_pad_sector+0x9c>
        return(0);

    // Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1b4c2:	c0 e0       	ldi	r28, 0x00	; 0
   1b4c4:	d1 e0       	ldi	r29, 0x01	; 1
   1b4c6:	c6 1b       	sub	r28, r22
   1b4c8:	d7 0b       	sbc	r29, r23

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
   1b4ca:	f8 01       	movw	r30, r16
   1b4cc:	8f ee       	ldi	r24, 0xEF	; 239
   1b4ce:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1b4d0:	2f ef       	ldi	r18, 0xFF	; 255

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1b4d2:	cf 01       	movw	r24, r30
   1b4d4:	80 1b       	sub	r24, r16
   1b4d6:	91 0b       	sbc	r25, r17
   1b4d8:	8c 17       	cp	r24, r28
   1b4da:	9d 07       	cpc	r25, r29
   1b4dc:	14 f4       	brge	.+4      	; 0x1b4e2 <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1b4de:	21 93       	st	Z+, r18
   1b4e0:	f8 cf       	rjmp	.-16     	; 0x1b4d2 <lif_e010_pad_sector+0x34>
   1b4e2:	1c 16       	cp	r1, r28
   1b4e4:	1d 06       	cpc	r1, r29
   1b4e6:	14 f0       	brlt	.+4      	; 0x1b4ec <lif_e010_pad_sector+0x4e>
   1b4e8:	c1 e0       	ldi	r28, 0x01	; 1
   1b4ea:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1b4ec:	ce 01       	movw	r24, r28
   1b4ee:	0d 2e       	mov	r0, r29
   1b4f0:	00 0c       	add	r0, r0
   1b4f2:	aa 0b       	sbc	r26, r26
   1b4f4:	bb 0b       	sbc	r27, r27
   1b4f6:	bc 01       	movw	r22, r24
   1b4f8:	cd 01       	movw	r24, r26
   1b4fa:	6c 0d       	add	r22, r12
   1b4fc:	7d 1d       	adc	r23, r13
   1b4fe:	8e 1d       	adc	r24, r14
   1b500:	9f 1d       	adc	r25, r15
   1b502:	20 e0       	ldi	r18, 0x00	; 0
   1b504:	31 e0       	ldi	r19, 0x01	; 1
   1b506:	40 e0       	ldi	r20, 0x00	; 0
   1b508:	50 e0       	ldi	r21, 0x00	; 0
   1b50a:	0e 94 44 e9 	call	0x1d288	; 0x1d288 <__divmodsi4>
    // NEW SECTOR
    // Debugging make sure we are at sector boundry
    if(pos)
   1b50e:	61 15       	cp	r22, r1
   1b510:	71 05       	cpc	r23, r1
   1b512:	b1 f0       	breq	.+44     	; 0x1b540 <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & 1)
   1b514:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   1b518:	20 ff       	sbrs	r18, 0
   1b51a:	14 c0       	rjmp	.+40     	; 0x1b544 <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1b51c:	7f 93       	push	r23
   1b51e:	6f 93       	push	r22
   1b520:	8d e8       	ldi	r24, 0x8D	; 141
   1b522:	99 e3       	ldi	r25, 0x39	; 57
   1b524:	1f 92       	push	r1
   1b526:	9f 93       	push	r25
   1b528:	8f 93       	push	r24
   1b52a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1b52e:	0f 90       	pop	r0
   1b530:	0f 90       	pop	r0
   1b532:	0f 90       	pop	r0
   1b534:	0f 90       	pop	r0
   1b536:	0f 90       	pop	r0
   1b538:	05 c0       	rjmp	.+10     	; 0x1b544 <lif_e010_pad_sector+0xa6>
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1b53a:	80 e0       	ldi	r24, 0x00	; 0
   1b53c:	90 e0       	ldi	r25, 0x00	; 0
   1b53e:	04 c0       	rjmp	.+8      	; 0x1b548 <lif_e010_pad_sector+0xaa>
   1b540:	ce 01       	movw	r24, r28
   1b542:	02 c0       	rjmp	.+4      	; 0x1b548 <lif_e010_pad_sector+0xaa>
    // Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & 1)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1b544:	8f ef       	ldi	r24, 0xFF	; 255
   1b546:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1b548:	cd b7       	in	r28, 0x3d	; 61
   1b54a:	de b7       	in	r29, 0x3e	; 62
   1b54c:	e8 e0       	ldi	r30, 0x08	; 8
   1b54e:	0c 94 b5 e9 	jmp	0x1d36a	; 0x1d36a <__epilogue_restores__+0x14>

0001b552 <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1b552:	a0 e0       	ldi	r26, 0x00	; 0
   1b554:	b0 e0       	ldi	r27, 0x00	; 0
   1b556:	ef ea       	ldi	r30, 0xAF	; 175
   1b558:	fa ed       	ldi	r31, 0xDA	; 218
   1b55a:	0c 94 8f e9 	jmp	0x1d31e	; 0x1d31e <__prologue_saves__>
   1b55e:	ec 01       	movw	r28, r24
   1b560:	4a 01       	movw	r8, r20
   1b562:	5b 01       	movw	r10, r22
   1b564:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;
    
    // String size
    len = strlen(str);
   1b566:	fc 01       	movw	r30, r24
   1b568:	01 90       	ld	r0, Z+
   1b56a:	00 20       	and	r0, r0
   1b56c:	e9 f7       	brne	.-6      	; 0x1b568 <lif_ascii_string_to_e010+0x16>
   1b56e:	31 97       	sbiw	r30, 0x01	; 1
   1b570:	6f 01       	movw	r12, r30
   1b572:	c8 1a       	sub	r12, r24
   1b574:	d9 0a       	sbc	r13, r25
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1b576:	41 2c       	mov	r4, r1
   1b578:	51 2c       	mov	r5, r1
   1b57a:	32 01       	movw	r6, r4
   1b57c:	53 94       	inc	r5
   1b57e:	cb 01       	movw	r24, r22
   1b580:	ba 01       	movw	r22, r20
   1b582:	a3 01       	movw	r20, r6
   1b584:	92 01       	movw	r18, r4
   1b586:	0e 94 44 e9 	call	0x1d288	; 0x1d288 <__divmodsi4>
   1b58a:	21 2c       	mov	r2, r1
   1b58c:	33 24       	eor	r3, r3
   1b58e:	33 94       	inc	r3
   1b590:	c1 01       	movw	r24, r2
   1b592:	86 1b       	sub	r24, r22
   1b594:	97 0b       	sbc	r25, r23

    /// We ALWAYS pad a sector if:
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1b596:	86 30       	cpi	r24, 0x06	; 6
   1b598:	91 05       	cpc	r25, r1
   1b59a:	20 f0       	brcs	.+8      	; 0x1b5a4 <lif_ascii_string_to_e010+0x52>
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1b59c:	1c 01       	movw	r2, r24
    
    // String size
    len = strlen(str);

    // Output buffer index
    ind = 0;
   1b59e:	00 e0       	ldi	r16, 0x00	; 0
   1b5a0:	10 e0       	ldi	r17, 0x00	; 0
   1b5a2:	17 c0       	rjmp	.+46     	; 0x1b5d2 <lif_ascii_string_to_e010+0x80>
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1b5a4:	a7 01       	movw	r20, r14
   1b5a6:	c5 01       	movw	r24, r10
   1b5a8:	b4 01       	movw	r22, r8
   1b5aa:	79 df       	rcall	.-270    	; 0x1b49e <lif_e010_pad_sector>
   1b5ac:	8c 01       	movw	r16, r24
        if(ind < 0)
   1b5ae:	97 fd       	sbrc	r25, 7
   1b5b0:	84 c0       	rjmp	.+264    	; 0x1b6ba <lif_ascii_string_to_e010+0x168>
            return(ind);

        // Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
        // Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1b5b2:	09 2e       	mov	r0, r25
   1b5b4:	00 0c       	add	r0, r0
   1b5b6:	aa 0b       	sbc	r26, r26
   1b5b8:	bb 0b       	sbc	r27, r27
   1b5ba:	bc 01       	movw	r22, r24
   1b5bc:	cd 01       	movw	r24, r26
   1b5be:	68 0d       	add	r22, r8
   1b5c0:	79 1d       	adc	r23, r9
   1b5c2:	8a 1d       	adc	r24, r10
   1b5c4:	9b 1d       	adc	r25, r11
   1b5c6:	a3 01       	movw	r20, r6
   1b5c8:	92 01       	movw	r18, r4
   1b5ca:	0e 94 44 e9 	call	0x1d288	; 0x1d288 <__divmodsi4>
   1b5ce:	26 1a       	sub	r2, r22
   1b5d0:	37 0a       	sbc	r3, r23
   1b5d2:	f7 01       	movw	r30, r14
   1b5d4:	e0 0f       	add	r30, r16
   1b5d6:	f1 1f       	adc	r31, r17
   1b5d8:	0d 5f       	subi	r16, 0xFD	; 253
   1b5da:	1f 4f       	sbci	r17, 0xFF	; 255
    }

    // Note: IMPORTANT we have >= 6 bytes!!!

    // Do not have to split, there is enough room
    if(rem >= (3 + len)) 
   1b5dc:	c6 01       	movw	r24, r12
   1b5de:	02 96       	adiw	r24, 0x02	; 2
   1b5e0:	82 15       	cp	r24, r2
   1b5e2:	93 05       	cpc	r25, r3
   1b5e4:	84 f4       	brge	.+32     	; 0x1b606 <lif_ascii_string_to_e010+0xb4>
    {

        // Write string in new sector
        // The full string + header will fit
        wbuf[ind++] = 0xDF;
   1b5e6:	8f ed       	ldi	r24, 0xDF	; 223
   1b5e8:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1b5ea:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1b5ec:	d2 82       	std	Z+2, r13	; 0x02
   1b5ee:	f7 01       	movw	r30, r14
   1b5f0:	e0 0f       	add	r30, r16
   1b5f2:	f1 1f       	adc	r31, r17
   1b5f4:	cf 01       	movw	r24, r30
   1b5f6:	8e 19       	sub	r24, r14
   1b5f8:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1b5fa:	29 91       	ld	r18, Y+
   1b5fc:	22 23       	and	r18, r18
   1b5fe:	09 f4       	brne	.+2      	; 0x1b602 <lif_ascii_string_to_e010+0xb0>
   1b600:	5c c0       	rjmp	.+184    	; 0x1b6ba <lif_ascii_string_to_e010+0x168>
            wbuf[ind++] = *str++;
   1b602:	21 93       	st	Z+, r18
   1b604:	f7 cf       	rjmp	.-18     	; 0x1b5f4 <lif_ascii_string_to_e010+0xa2>

        // CURRENT SECTOR
        // String spans a sector , so split the string

        // 1st Split string header
        wbuf[ind++] = 0xCF;
   1b606:	8f ec       	ldi	r24, 0xCF	; 207
   1b608:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1b60a:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1b60c:	d2 82       	std	Z+2, r13	; 0x02
   1b60e:	d7 01       	movw	r26, r14
   1b610:	a0 0f       	add	r26, r16
   1b612:	b1 1f       	adc	r27, r17
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1b614:	fe 01       	movw	r30, r28
   1b616:	81 91       	ld	r24, Z+
   1b618:	81 11       	cpse	r24, r1
   1b61a:	0e c0       	rjmp	.+28     	; 0x1b638 <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1b61c:	c8 01       	movw	r24, r16
   1b61e:	01 2e       	mov	r0, r17
   1b620:	00 0c       	add	r0, r0
   1b622:	aa 0b       	sbc	r26, r26
   1b624:	bb 0b       	sbc	r27, r27
   1b626:	bc 01       	movw	r22, r24
   1b628:	cd 01       	movw	r24, r26
   1b62a:	68 0d       	add	r22, r8
   1b62c:	79 1d       	adc	r23, r9
   1b62e:	8a 1d       	adc	r24, r10
   1b630:	9b 1d       	adc	r25, r11
   1b632:	61 11       	cpse	r22, r1
   1b634:	09 c0       	rjmp	.+18     	; 0x1b648 <lif_ascii_string_to_e010+0xf6>
   1b636:	21 c0       	rjmp	.+66     	; 0x1b67a <lif_ascii_string_to_e010+0x128>
        // 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1b638:	02 15       	cp	r16, r2
   1b63a:	13 05       	cpc	r17, r3
   1b63c:	7c f7       	brge	.-34     	; 0x1b61c <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1b63e:	0f 5f       	subi	r16, 0xFF	; 255
   1b640:	1f 4f       	sbci	r17, 0xFF	; 255
   1b642:	8d 93       	st	X+, r24
   1b644:	ef 01       	movw	r28, r30
   1b646:	e6 cf       	rjmp	.-52     	; 0x1b614 <lif_ascii_string_to_e010+0xc2>

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
   1b648:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   1b64c:	20 ff       	sbrs	r18, 0
   1b64e:	33 c0       	rjmp	.+102    	; 0x1b6b6 <lif_ascii_string_to_e010+0x164>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1b650:	20 e0       	ldi	r18, 0x00	; 0
   1b652:	31 e0       	ldi	r19, 0x01	; 1
   1b654:	40 e0       	ldi	r20, 0x00	; 0
   1b656:	50 e0       	ldi	r21, 0x00	; 0
   1b658:	0e 94 44 e9 	call	0x1d288	; 0x1d288 <__divmodsi4>
   1b65c:	7f 93       	push	r23
   1b65e:	6f 93       	push	r22
   1b660:	89 e6       	ldi	r24, 0x69	; 105
   1b662:	99 e3       	ldi	r25, 0x39	; 57
   1b664:	1f 92       	push	r1
   1b666:	9f 93       	push	r25
   1b668:	8f 93       	push	r24
   1b66a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1b66e:	0f 90       	pop	r0
   1b670:	0f 90       	pop	r0
   1b672:	0f 90       	pop	r0
   1b674:	0f 90       	pop	r0
   1b676:	0f 90       	pop	r0
   1b678:	1e c0       	rjmp	.+60     	; 0x1b6b6 <lif_ascii_string_to_e010+0x164>
            return(-1);
        }

        // Update remining string length
        len = strlen(str);
   1b67a:	fe 01       	movw	r30, r28
   1b67c:	01 90       	ld	r0, Z+
   1b67e:	00 20       	and	r0, r0
   1b680:	e9 f7       	brne	.-6      	; 0x1b67c <lif_ascii_string_to_e010+0x12a>
   1b682:	31 97       	sbiw	r30, 0x01	; 1
   1b684:	ec 1b       	sub	r30, r28
   1b686:	fd 0b       	sbc	r31, r29
        // 2nd Split string header 
        wbuf[ind++] = 0x6F;
   1b688:	d7 01       	movw	r26, r14
   1b68a:	a0 0f       	add	r26, r16
   1b68c:	b1 1f       	adc	r27, r17
   1b68e:	8f e6       	ldi	r24, 0x6F	; 111
   1b690:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1b692:	11 96       	adiw	r26, 0x01	; 1
   1b694:	ec 93       	st	X, r30
   1b696:	11 97       	sbiw	r26, 0x01	; 1
        wbuf[ind++] = (len>>8) & 0xff;
   1b698:	12 96       	adiw	r26, 0x02	; 2
   1b69a:	fc 93       	st	X, r31
   1b69c:	0d 5f       	subi	r16, 0xFD	; 253
   1b69e:	1f 4f       	sbci	r17, 0xFF	; 255
   1b6a0:	f7 01       	movw	r30, r14
   1b6a2:	e0 0f       	add	r30, r16
   1b6a4:	f1 1f       	adc	r31, r17
   1b6a6:	cf 01       	movw	r24, r30
   1b6a8:	8e 19       	sub	r24, r14
   1b6aa:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1b6ac:	29 91       	ld	r18, Y+
   1b6ae:	22 23       	and	r18, r18
   1b6b0:	21 f0       	breq	.+8      	; 0x1b6ba <lif_ascii_string_to_e010+0x168>
            wbuf[ind++] = *str++;
   1b6b2:	21 93       	st	Z+, r18
   1b6b4:	f8 cf       	rjmp	.-16     	; 0x1b6a6 <lif_ascii_string_to_e010+0x154>
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1b6b6:	8f ef       	ldi	r24, 0xFF	; 255
   1b6b8:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1b6ba:	cd b7       	in	r28, 0x3d	; 61
   1b6bc:	de b7       	in	r29, 0x3e	; 62
   1b6be:	e2 e1       	ldi	r30, 0x12	; 18
   1b6c0:	0c 94 ab e9 	jmp	0x1d356	; 0x1d356 <__epilogue_restores__>

0001b6c4 <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1b6c4:	a6 e0       	ldi	r26, 0x06	; 6
   1b6c6:	b3 e0       	ldi	r27, 0x03	; 3
   1b6c8:	e8 e6       	ldi	r30, 0x68	; 104
   1b6ca:	fb ed       	ldi	r31, 0xDB	; 219
   1b6cc:	0c 94 8f e9 	jmp	0x1d31e	; 0x1d31e <__prologue_saves__>
   1b6d0:	7c 01       	movw	r14, r24
   1b6d2:	4a 01       	movw	r8, r20
   1b6d4:	5b 01       	movw	r10, r22
   1b6d6:	c9 01       	movw	r24, r18
    // strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
    // output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1b6d8:	65 ef       	ldi	r22, 0xF5	; 245
   1b6da:	78 e0       	ldi	r23, 0x08	; 8
   1b6dc:	0e 94 c4 c7 	call	0x18f88	; 0x18f88 <lif_open>
   1b6e0:	6c 01       	movw	r12, r24
    if(fi == NULL)
   1b6e2:	89 2b       	or	r24, r25
   1b6e4:	09 f4       	brne	.+2      	; 0x1b6e8 <lif_add_ascii_file_as_e010_wrapper+0x24>
   1b6e6:	6b c0       	rjmp	.+214    	; 0x1b7be <lif_add_ascii_file_as_e010_wrapper+0xfa>
   1b6e8:	21 2c       	mov	r2, r1
   1b6ea:	31 2c       	mov	r3, r1
   1b6ec:	41 2c       	mov	r4, r1
   1b6ee:	51 2c       	mov	r5, r1
   1b6f0:	32 01       	movw	r6, r4

        if(count > 256)
        {       
            count = 0;
            if(LIF)
                printf("Wrote: %8ld\r", (long)bytes);
   1b6f2:	8c e5       	ldi	r24, 0x5C	; 92
   1b6f4:	99 e3       	ldi	r25, 0x39	; 57
   1b6f6:	9c 01       	movw	r18, r24
   1b6f8:	40 e0       	ldi	r20, 0x00	; 0
   1b6fa:	cc 5f       	subi	r28, 0xFC	; 252
   1b6fc:	dc 4f       	sbci	r29, 0xFC	; 252
   1b6fe:	28 83       	st	Y, r18
   1b700:	39 83       	std	Y+1, r19	; 0x01
   1b702:	4a 83       	std	Y+2, r20	; 0x02
   1b704:	c4 50       	subi	r28, 0x04	; 4
   1b706:	d3 40       	sbci	r29, 0x03	; 3
   1b708:	1a c0       	rjmp	.+52     	; 0x1b73e <lif_add_ascii_file_as_e010_wrapper+0x7a>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1b70a:	ce 5f       	subi	r28, 0xFE	; 254
   1b70c:	dc 4f       	sbci	r29, 0xFC	; 252
   1b70e:	28 81       	ld	r18, Y
   1b710:	39 81       	ldd	r19, Y+1	; 0x01
   1b712:	c2 50       	subi	r28, 0x02	; 2
   1b714:	d3 40       	sbci	r29, 0x03	; 3
   1b716:	c9 01       	movw	r24, r18
   1b718:	03 2e       	mov	r0, r19
   1b71a:	00 0c       	add	r0, r0
   1b71c:	aa 0b       	sbc	r26, r26
   1b71e:	bb 0b       	sbc	r27, r27
   1b720:	88 0e       	add	r8, r24
   1b722:	99 1e       	adc	r9, r25
   1b724:	aa 1e       	adc	r10, r26
   1b726:	bb 1e       	adc	r11, r27
        bytes += size;
   1b728:	48 0e       	add	r4, r24
   1b72a:	59 1e       	adc	r5, r25
   1b72c:	6a 1e       	adc	r6, r26
   1b72e:	7b 1e       	adc	r7, r27
        count += size;
   1b730:	22 0e       	add	r2, r18
   1b732:	33 1e       	adc	r3, r19

        if(count > 256)
   1b734:	31 e0       	ldi	r19, 0x01	; 1
   1b736:	23 16       	cp	r2, r19
   1b738:	33 06       	cpc	r3, r19
   1b73a:	0c f0       	brlt	.+2      	; 0x1b73e <lif_add_ascii_file_as_e010_wrapper+0x7a>
   1b73c:	45 c0       	rjmp	.+138    	; 0x1b7c8 <lif_add_ascii_file_as_e010_wrapper+0x104>
    bytes = 0;
    count = 0;

    // Read user file and write LIF records
    // reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1b73e:	a6 01       	movw	r20, r12
   1b740:	6d ef       	ldi	r22, 0xFD	; 253
   1b742:	70 e0       	ldi	r23, 0x00	; 0
   1b744:	ce 01       	movw	r24, r28
   1b746:	8f 5f       	subi	r24, 0xFF	; 255
   1b748:	9d 4f       	sbci	r25, 0xFD	; 253
   1b74a:	0e 94 20 79 	call	0xf240	; 0xf240 <fgets>
   1b74e:	89 2b       	or	r24, r25
   1b750:	09 f4       	brne	.+2      	; 0x1b754 <lif_add_ascii_file_as_e010_wrapper+0x90>
   1b752:	58 c0       	rjmp	.+176    	; 0x1b804 <lif_add_ascii_file_as_e010_wrapper+0x140>
    {
        trim_tail((char *)str);
   1b754:	ce 01       	movw	r24, r28
   1b756:	8f 5f       	subi	r24, 0xFF	; 255
   1b758:	9d 4f       	sbci	r25, 0xFD	; 253
   1b75a:	0e 94 b5 30 	call	0x616a	; 0x616a <trim_tail>

        strcat((char *)str,"\r"); // HP85 lines end with "\r"
   1b75e:	64 e8       	ldi	r22, 0x84	; 132
   1b760:	76 e1       	ldi	r23, 0x16	; 22
   1b762:	ce 01       	movw	r24, r28
   1b764:	8f 5f       	subi	r24, 0xFF	; 255
   1b766:	9d 4f       	sbci	r25, 0xFD	; 253
   1b768:	0e 94 7c 30 	call	0x60f8	; 0x60f8 <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1b76c:	9e 01       	movw	r18, r28
   1b76e:	2f 5f       	subi	r18, 0xFF	; 255
   1b770:	3f 4f       	sbci	r19, 0xFF	; 255
   1b772:	b5 01       	movw	r22, r10
   1b774:	a4 01       	movw	r20, r8
   1b776:	ce 01       	movw	r24, r28
   1b778:	8f 5f       	subi	r24, 0xFF	; 255
   1b77a:	9d 4f       	sbci	r25, 0xFD	; 253
   1b77c:	ea de       	rcall	.-556    	; 0x1b552 <lif_ascii_string_to_e010>
   1b77e:	ce 5f       	subi	r28, 0xFE	; 254
   1b780:	dc 4f       	sbci	r29, 0xFC	; 252
   1b782:	99 83       	std	Y+1, r25	; 0x01
   1b784:	88 83       	st	Y, r24
   1b786:	c2 50       	subi	r28, 0x02	; 2
   1b788:	d3 40       	sbci	r29, 0x03	; 3
        // Write string
        // Now Write string
        if(LIF)
   1b78a:	e1 14       	cp	r14, r1
   1b78c:	f1 04       	cpc	r15, r1
   1b78e:	09 f4       	brne	.+2      	; 0x1b792 <lif_add_ascii_file_as_e010_wrapper+0xce>
   1b790:	bc cf       	rjmp	.-136    	; 0x1b70a <lif_add_ascii_file_as_e010_wrapper+0x46>
        {
            len = lif_write(LIF, obuf, offset, size);
   1b792:	8c 01       	movw	r16, r24
   1b794:	a5 01       	movw	r20, r10
   1b796:	94 01       	movw	r18, r8
   1b798:	be 01       	movw	r22, r28
   1b79a:	6f 5f       	subi	r22, 0xFF	; 255
   1b79c:	7f 4f       	sbci	r23, 0xFF	; 255
   1b79e:	c7 01       	movw	r24, r14
   1b7a0:	0e 94 a3 c8 	call	0x19146	; 0x19146 <lif_write>
            if(len < size)
   1b7a4:	ce 5f       	subi	r28, 0xFE	; 254
   1b7a6:	dc 4f       	sbci	r29, 0xFC	; 252
   1b7a8:	08 81       	ld	r16, Y
   1b7aa:	19 81       	ldd	r17, Y+1	; 0x01
   1b7ac:	c2 50       	subi	r28, 0x02	; 2
   1b7ae:	d3 40       	sbci	r29, 0x03	; 3
   1b7b0:	80 17       	cp	r24, r16
   1b7b2:	91 07       	cpc	r25, r17
   1b7b4:	0c f0       	brlt	.+2      	; 0x1b7b8 <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1b7b6:	a9 cf       	rjmp	.-174    	; 0x1b70a <lif_add_ascii_file_as_e010_wrapper+0x46>
            {
                fclose(fi);
   1b7b8:	c6 01       	movw	r24, r12
   1b7ba:	0e 94 ba 80 	call	0x10174	; 0x10174 <fclose>
                return(-1);
   1b7be:	6f ef       	ldi	r22, 0xFF	; 255
   1b7c0:	7f ef       	ldi	r23, 0xFF	; 255
   1b7c2:	8f ef       	ldi	r24, 0xFF	; 255
   1b7c4:	9f ef       	ldi	r25, 0xFF	; 255
   1b7c6:	86 c0       	rjmp	.+268    	; 0x1b8d4 <lif_add_ascii_file_as_e010_wrapper+0x210>
        count += size;

        if(count > 256)
        {       
            count = 0;
            if(LIF)
   1b7c8:	e1 14       	cp	r14, r1
   1b7ca:	f1 04       	cpc	r15, r1
   1b7cc:	c1 f0       	breq	.+48     	; 0x1b7fe <lif_add_ascii_file_as_e010_wrapper+0x13a>
                printf("Wrote: %8ld\r", (long)bytes);
   1b7ce:	7f 92       	push	r7
   1b7d0:	6f 92       	push	r6
   1b7d2:	5f 92       	push	r5
   1b7d4:	4f 92       	push	r4
   1b7d6:	1f 92       	push	r1
   1b7d8:	cb 5f       	subi	r28, 0xFB	; 251
   1b7da:	dc 4f       	sbci	r29, 0xFC	; 252
   1b7dc:	48 81       	ld	r20, Y
   1b7de:	c5 50       	subi	r28, 0x05	; 5
   1b7e0:	d3 40       	sbci	r29, 0x03	; 3
   1b7e2:	4f 93       	push	r20
   1b7e4:	cc 5f       	subi	r28, 0xFC	; 252
   1b7e6:	dc 4f       	sbci	r29, 0xFC	; 252
   1b7e8:	88 81       	ld	r24, Y
   1b7ea:	c4 50       	subi	r28, 0x04	; 4
   1b7ec:	d3 40       	sbci	r29, 0x03	; 3
   1b7ee:	8f 93       	push	r24
   1b7f0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1b7f4:	0f b6       	in	r0, 0x3f	; 63
   1b7f6:	f8 94       	cli
   1b7f8:	de bf       	out	0x3e, r29	; 62
   1b7fa:	0f be       	out	0x3f, r0	; 63
   1b7fc:	cd bf       	out	0x3d, r28	; 61
        bytes += size;
        count += size;

        if(count > 256)
        {       
            count = 0;
   1b7fe:	21 2c       	mov	r2, r1
   1b800:	31 2c       	mov	r3, r1
   1b802:	9d cf       	rjmp	.-198    	; 0x1b73e <lif_add_ascii_file_as_e010_wrapper+0x7a>
            if(LIF)
                printf("Wrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1b804:	c6 01       	movw	r24, r12
   1b806:	0e 94 ba 80 	call	0x10174	; 0x10174 <fclose>

    // Write EOF
    str[0] = 0;
   1b80a:	cf 5f       	subi	r28, 0xFF	; 255
   1b80c:	dd 4f       	sbci	r29, 0xFD	; 253
   1b80e:	18 82       	st	Y, r1
   1b810:	c1 50       	subi	r28, 0x01	; 1
   1b812:	d2 40       	sbci	r29, 0x02	; 2
    // We only want to return the count of bytes in the file NOT the padding at the end
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1b814:	9e 01       	movw	r18, r28
   1b816:	2f 5f       	subi	r18, 0xFF	; 255
   1b818:	3f 4f       	sbci	r19, 0xFF	; 255
   1b81a:	b5 01       	movw	r22, r10
   1b81c:	a4 01       	movw	r20, r8
   1b81e:	ce 01       	movw	r24, r28
   1b820:	8f 5f       	subi	r24, 0xFF	; 255
   1b822:	9d 4f       	sbci	r25, 0xFD	; 253
   1b824:	96 de       	rcall	.-724    	; 0x1b552 <lif_ascii_string_to_e010>
   1b826:	6c 01       	movw	r12, r24

    if(LIF)
   1b828:	e1 14       	cp	r14, r1
   1b82a:	f1 04       	cpc	r15, r1
   1b82c:	b9 f4       	brne	.+46     	; 0x1b85c <lif_add_ascii_file_as_e010_wrapper+0x198>
            return(-1);

    }

    offset += size;
    bytes += size;
   1b82e:	c6 01       	movw	r24, r12
   1b830:	dd 0c       	add	r13, r13
   1b832:	aa 0b       	sbc	r26, r26
   1b834:	bb 0b       	sbc	r27, r27
   1b836:	48 0e       	add	r4, r24
   1b838:	59 1e       	adc	r5, r25
   1b83a:	6a 1e       	adc	r6, r26
   1b83c:	7b 1e       	adc	r7, r27

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
   1b83e:	88 0e       	add	r8, r24
   1b840:	99 1e       	adc	r9, r25
   1b842:	aa 1e       	adc	r10, r26
   1b844:	bb 1e       	adc	r11, r27
   1b846:	ae 01       	movw	r20, r28
   1b848:	4f 5f       	subi	r20, 0xFF	; 255
   1b84a:	5f 4f       	sbci	r21, 0xFF	; 255
   1b84c:	c5 01       	movw	r24, r10
   1b84e:	b4 01       	movw	r22, r8
   1b850:	26 de       	rcall	.-948    	; 0x1b49e <lif_e010_pad_sector>
   1b852:	6c 01       	movw	r12, r24
    if(LIF)
   1b854:	e1 14       	cp	r14, r1
   1b856:	f1 04       	cpc	r15, r1
   1b858:	f1 f4       	brne	.+60     	; 0x1b896 <lif_add_ascii_file_as_e010_wrapper+0x1d2>
   1b85a:	3a c0       	rjmp	.+116    	; 0x1b8d0 <lif_add_ascii_file_as_e010_wrapper+0x20c>
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("Wrote: %8ld\r", (long)bytes);
   1b85c:	7f 92       	push	r7
   1b85e:	6f 92       	push	r6
   1b860:	5f 92       	push	r5
   1b862:	4f 92       	push	r4
   1b864:	8f e4       	ldi	r24, 0x4F	; 79
   1b866:	99 e3       	ldi	r25, 0x39	; 57
   1b868:	1f 92       	push	r1
   1b86a:	9f 93       	push	r25
   1b86c:	8f 93       	push	r24
   1b86e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1b872:	86 01       	movw	r16, r12
   1b874:	a5 01       	movw	r20, r10
   1b876:	94 01       	movw	r18, r8
   1b878:	be 01       	movw	r22, r28
   1b87a:	6f 5f       	subi	r22, 0xFF	; 255
   1b87c:	7f 4f       	sbci	r23, 0xFF	; 255
   1b87e:	c7 01       	movw	r24, r14
   1b880:	0e 94 a3 c8 	call	0x19146	; 0x19146 <lif_write>
        if(len < size)
   1b884:	0f b6       	in	r0, 0x3f	; 63
   1b886:	f8 94       	cli
   1b888:	de bf       	out	0x3e, r29	; 62
   1b88a:	0f be       	out	0x3f, r0	; 63
   1b88c:	cd bf       	out	0x3d, r28	; 61
   1b88e:	8c 15       	cp	r24, r12
   1b890:	9d 05       	cpc	r25, r13
   1b892:	6c f6       	brge	.-102    	; 0x1b82e <lif_add_ascii_file_as_e010_wrapper+0x16a>
   1b894:	94 cf       	rjmp	.-216    	; 0x1b7be <lif_add_ascii_file_as_e010_wrapper+0xfa>

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1b896:	8c 01       	movw	r16, r24
   1b898:	a5 01       	movw	r20, r10
   1b89a:	94 01       	movw	r18, r8
   1b89c:	be 01       	movw	r22, r28
   1b89e:	6f 5f       	subi	r22, 0xFF	; 255
   1b8a0:	7f 4f       	sbci	r23, 0xFF	; 255
   1b8a2:	c7 01       	movw	r24, r14
   1b8a4:	0e 94 a3 c8 	call	0x19146	; 0x19146 <lif_write>
        if(len < size)
   1b8a8:	8c 15       	cp	r24, r12
   1b8aa:	9d 05       	cpc	r25, r13
   1b8ac:	0c f4       	brge	.+2      	; 0x1b8b0 <lif_add_ascii_file_as_e010_wrapper+0x1ec>
   1b8ae:	87 cf       	rjmp	.-242    	; 0x1b7be <lif_add_ascii_file_as_e010_wrapper+0xfa>
            return(-1);
    }

    if(LIF)
        printf("Wrote: %8ld\r",(long)bytes);
   1b8b0:	7f 92       	push	r7
   1b8b2:	6f 92       	push	r6
   1b8b4:	5f 92       	push	r5
   1b8b6:	4f 92       	push	r4
   1b8b8:	82 e4       	ldi	r24, 0x42	; 66
   1b8ba:	99 e3       	ldi	r25, 0x39	; 57
   1b8bc:	1f 92       	push	r1
   1b8be:	9f 93       	push	r25
   1b8c0:	8f 93       	push	r24
   1b8c2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1b8c6:	0f b6       	in	r0, 0x3f	; 63
   1b8c8:	f8 94       	cli
   1b8ca:	de bf       	out	0x3e, r29	; 62
   1b8cc:	0f be       	out	0x3f, r0	; 63
   1b8ce:	cd bf       	out	0x3d, r28	; 61

    return(bytes);
   1b8d0:	b2 01       	movw	r22, r4
   1b8d2:	c3 01       	movw	r24, r6
}
   1b8d4:	ca 5f       	subi	r28, 0xFA	; 250
   1b8d6:	dc 4f       	sbci	r29, 0xFC	; 252
   1b8d8:	e2 e1       	ldi	r30, 0x12	; 18
   1b8da:	0c 94 ab e9 	jmp	0x1d356	; 0x1d356 <__epilogue_restores__>

0001b8de <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1b8de:	a2 e3       	ldi	r26, 0x32	; 50
   1b8e0:	b0 e0       	ldi	r27, 0x00	; 0
   1b8e2:	e5 e7       	ldi	r30, 0x75	; 117
   1b8e4:	fc ed       	ldi	r31, 0xDC	; 220
   1b8e6:	0c 94 8f e9 	jmp	0x1d31e	; 0x1d31e <__prologue_saves__>
   1b8ea:	6c 01       	movw	r12, r24
   1b8ec:	1b 01       	movw	r2, r22
   1b8ee:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;
    stat_t st, *sp;


    if(!*lifimagename)
   1b8f0:	fc 01       	movw	r30, r24
   1b8f2:	80 81       	ld	r24, Z
   1b8f4:	81 11       	cpse	r24, r1
   1b8f6:	03 c0       	rjmp	.+6      	; 0x1b8fe <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1b8f8:	8f e0       	ldi	r24, 0x0F	; 15
   1b8fa:	99 e3       	ldi	r25, 0x39	; 57
   1b8fc:	1a c0       	rjmp	.+52     	; 0x1b932 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1b8fe:	fb 01       	movw	r30, r22
   1b900:	80 81       	ld	r24, Z
   1b902:	81 11       	cpse	r24, r1
   1b904:	03 c0       	rjmp	.+6      	; 0x1b90c <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1b906:	81 ee       	ldi	r24, 0xE1	; 225
   1b908:	98 e3       	ldi	r25, 0x38	; 56
   1b90a:	13 c0       	rjmp	.+38     	; 0x1b932 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1b90c:	fa 01       	movw	r30, r20
   1b90e:	80 81       	ld	r24, Z
   1b910:	81 11       	cpse	r24, r1
   1b912:	03 c0       	rjmp	.+6      	; 0x1b91a <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1b914:	82 eb       	ldi	r24, 0xB2	; 178
   1b916:	98 e3       	ldi	r25, 0x38	; 56
   1b918:	0c c0       	rjmp	.+24     	; 0x1b932 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

    //Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1b91a:	be 01       	movw	r22, r28
   1b91c:	6f 5f       	subi	r22, 0xFF	; 255
   1b91e:	7f 4f       	sbci	r23, 0xFF	; 255
   1b920:	ca 01       	movw	r24, r20
   1b922:	0e 94 ec c7 	call	0x18fd8	; 0x18fd8 <lif_stat>
   1b926:	9a ab       	std	Y+50, r25	; 0x32
   1b928:	89 ab       	std	Y+49, r24	; 0x31
    if(!sp)
   1b92a:	89 2b       	or	r24, r25
   1b92c:	59 f4       	brne	.+22     	; 0x1b944 <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1b92e:	82 e8       	ldi	r24, 0x82	; 130
   1b930:	98 e3       	ldi	r25, 0x38	; 56
   1b932:	1f 92       	push	r1
   1b934:	9f 93       	push	r25
   1b936:	8f 93       	push	r24
   1b938:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return(-1);
   1b93c:	0f 90       	pop	r0
   1b93e:	0f 90       	pop	r0
   1b940:	0f 90       	pop	r0
   1b942:	fe c0       	rjmp	.+508    	; 0x1bb40 <lif_add_ascii_file_as_e010+0x262>
    }

    if(debuglevel & 0x400)
   1b944:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1b948:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1b94c:	92 ff       	sbrs	r25, 2
   1b94e:	12 c0       	rjmp	.+36     	; 0x1b974 <lif_add_ascii_file_as_e010+0x96>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1b950:	ff 92       	push	r15
   1b952:	ef 92       	push	r14
   1b954:	3f 92       	push	r3
   1b956:	2f 92       	push	r2
   1b958:	df 92       	push	r13
   1b95a:	cf 92       	push	r12
   1b95c:	83 e5       	ldi	r24, 0x53	; 83
   1b95e:	98 e3       	ldi	r25, 0x38	; 56
   1b960:	1f 92       	push	r1
   1b962:	9f 93       	push	r25
   1b964:	8f 93       	push	r24
   1b966:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1b96a:	0f b6       	in	r0, 0x3f	; 63
   1b96c:	f8 94       	cli
   1b96e:	de bf       	out	0x3e, r29	; 62
   1b970:	0f be       	out	0x3f, r0	; 63
   1b972:	cd bf       	out	0x3d, r28	; 61
            lifimagename, lifname, userfile);

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1b974:	97 01       	movw	r18, r14
   1b976:	40 e0       	ldi	r20, 0x00	; 0
   1b978:	50 e0       	ldi	r21, 0x00	; 0
   1b97a:	ba 01       	movw	r22, r20
   1b97c:	80 e0       	ldi	r24, 0x00	; 0
   1b97e:	90 e0       	ldi	r25, 0x00	; 0
   1b980:	a1 de       	rcall	.-702    	; 0x1b6c4 <lif_add_ascii_file_as_e010_wrapper>
   1b982:	4b 01       	movw	r8, r22
   1b984:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1b986:	47 2e       	mov	r4, r23
   1b988:	58 2e       	mov	r5, r24
   1b98a:	69 2e       	mov	r6, r25
   1b98c:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1b98e:	66 23       	and	r22, r22
   1b990:	29 f0       	breq	.+10     	; 0x1b99c <lif_add_ascii_file_as_e010+0xbe>
        ++sectors;
   1b992:	9f ef       	ldi	r25, 0xFF	; 255
   1b994:	49 1a       	sub	r4, r25
   1b996:	59 0a       	sbc	r5, r25
   1b998:	69 0a       	sbc	r6, r25
   1b99a:	79 0a       	sbc	r7, r25

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1b99c:	68 ef       	ldi	r22, 0xF8	; 248
   1b99e:	78 e0       	ldi	r23, 0x08	; 8
   1b9a0:	c6 01       	movw	r24, r12
   1b9a2:	b4 da       	rcall	.-2712   	; 0x1af0c <lif_open_volume>
   1b9a4:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1b9a6:	00 97       	sbiw	r24, 0x00	; 0
   1b9a8:	09 f4       	brne	.+2      	; 0x1b9ac <lif_add_ascii_file_as_e010+0xce>
        return(-1); 

    // Now find free record
    index = lif_newdir(LIF, sectors);
   1b9aa:	ca c0       	rjmp	.+404    	; 0x1bb40 <lif_add_ascii_file_as_e010+0x262>
   1b9ac:	b3 01       	movw	r22, r6
   1b9ae:	a2 01       	movw	r20, r4
   1b9b0:	48 d9       	rcall	.-3440   	; 0x1ac42 <lif_newdir>
    if(index == -1)
   1b9b2:	3c 01       	movw	r6, r24
   1b9b4:	01 96       	adiw	r24, 0x01	; 1
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1b9b6:	a1 f4       	brne	.+40     	; 0x1b9e0 <lif_add_ascii_file_as_e010+0x102>
   1b9b8:	ff 92       	push	r15
   1b9ba:	ef 92       	push	r14
   1b9bc:	df 92       	push	r13
   1b9be:	cf 92       	push	r12
   1b9c0:	83 e2       	ldi	r24, 0x23	; 35
   1b9c2:	98 e3       	ldi	r25, 0x38	; 56
   1b9c4:	1f 92       	push	r1
   1b9c6:	9f 93       	push	r25
   1b9c8:	8f 93       	push	r24
   1b9ca:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b9ce:	c8 01       	movw	r24, r16
   1b9d0:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>
    if(index == -1)
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
            lifimagename, userfile);
            lif_closedir(LIF);
            return(-1);
   1b9d4:	0f b6       	in	r0, 0x3f	; 63
   1b9d6:	f8 94       	cli
   1b9d8:	de bf       	out	0x3e, r29	; 62
   1b9da:	0f be       	out	0x3f, r0	; 63
   1b9dc:	cd bf       	out	0x3d, r28	; 61
    }

    // Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1b9de:	b0 c0       	rjmp	.+352    	; 0x1bb40 <lif_add_ascii_file_as_e010+0x262>
   1b9e0:	68 01       	movw	r12, r16
   1b9e2:	9f e4       	ldi	r25, 0x4F	; 79
   1b9e4:	c9 0e       	add	r12, r25
   1b9e6:	d1 1c       	adc	r13, r1
   1b9e8:	4a e0       	ldi	r20, 0x0A	; 10
   1b9ea:	50 e0       	ldi	r21, 0x00	; 0
   1b9ec:	b1 01       	movw	r22, r2
   1b9ee:	c6 01       	movw	r24, r12
   1b9f0:	0e 94 90 c9 	call	0x19320	; 0x19320 <lif_fixname>
    LIF->DIR.FileType = 0xe010;             // 10
   1b9f4:	80 e1       	ldi	r24, 0x10	; 16
   1b9f6:	90 ee       	ldi	r25, 0xE0	; 224
   1b9f8:	f8 01       	movw	r30, r16
   1b9fa:	e6 5a       	subi	r30, 0xA6	; 166
   1b9fc:	ff 4f       	sbci	r31, 0xFF	; 255
   1b9fe:	91 83       	std	Z+1, r25	; 0x01
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1ba00:	80 83       	st	Z, r24
   1ba02:	e9 a9       	ldd	r30, Y+49	; 0x31
   1ba04:	fa a9       	ldd	r31, Y+50	; 0x32
   1ba06:	60 a5       	ldd	r22, Z+40	; 0x28
   1ba08:	71 a5       	ldd	r23, Z+41	; 0x29
   1ba0a:	82 a5       	ldd	r24, Z+42	; 0x2a
   1ba0c:	93 a5       	ldd	r25, Z+43	; 0x2b
   1ba0e:	a8 01       	movw	r20, r16
   1ba10:	4c 59       	subi	r20, 0x9C	; 156
   1ba12:	5f 4f       	sbci	r21, 0xFF	; 255
   1ba14:	0e 94 d5 cb 	call	0x197aa	; 0x197aa <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;            // 26
   1ba18:	81 e0       	ldi	r24, 0x01	; 1
   1ba1a:	90 e8       	ldi	r25, 0x80	; 128
   1ba1c:	f8 01       	movw	r30, r16
   1ba1e:	e6 59       	subi	r30, 0x96	; 150
   1ba20:	ff 4f       	sbci	r31, 0xFF	; 255
   1ba22:	91 83       	std	Z+1, r25	; 0x01
    LIF->DIR.FileBytes = bytes;                 // 28
   1ba24:	80 83       	st	Z, r24
   1ba26:	32 96       	adiw	r30, 0x02	; 2
   1ba28:	91 82       	std	Z+1, r9	; 0x01
    LIF->DIR.SectorSize  = 0x100;           // 30
   1ba2a:	80 82       	st	Z, r8
   1ba2c:	80 e0       	ldi	r24, 0x00	; 0
   1ba2e:	91 e0       	ldi	r25, 0x01	; 1
   1ba30:	32 96       	adiw	r30, 0x02	; 2
   1ba32:	91 83       	std	Z+1, r25	; 0x01
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1ba34:	80 83       	st	Z, r24
   1ba36:	58 01       	movw	r10, r16
   1ba38:	fc e5       	ldi	r31, 0x5C	; 92
   1ba3a:	af 0e       	add	r10, r31
   1ba3c:	b1 1c       	adc	r11, r1
   1ba3e:	f5 01       	movw	r30, r10
   1ba40:	80 81       	ld	r24, Z
   1ba42:	91 81       	ldd	r25, Z+1	; 0x01
   1ba44:	a2 81       	ldd	r26, Z+2	; 0x02
   1ba46:	b3 81       	ldd	r27, Z+3	; 0x03
   1ba48:	22 24       	eor	r2, r2
   1ba4a:	38 2e       	mov	r3, r24
   1ba4c:	49 2e       	mov	r4, r25

    if(debuglevel & 0x400)
   1ba4e:	5a 2e       	mov	r5, r26
   1ba50:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1ba54:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1ba58:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1ba5a:	05 c0       	rjmp	.+10     	; 0x1ba66 <lif_add_ascii_file_as_e010+0x188>
   1ba5c:	66 e8       	ldi	r22, 0x86	; 134
   1ba5e:	76 e1       	ldi	r23, 0x16	; 22
   1ba60:	c8 01       	movw	r24, r16
   1ba62:	0e 94 c1 cc 	call	0x19982	; 0x19982 <lif_dump_vol>

    // Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1ba66:	97 01       	movw	r18, r14
   1ba68:	b2 01       	movw	r22, r4
   1ba6a:	a1 01       	movw	r20, r2
   1ba6c:	c8 01       	movw	r24, r16
   1ba6e:	2a de       	rcall	.-940    	; 0x1b6c4 <lif_add_ascii_file_as_e010_wrapper>
   1ba70:	4b 01       	movw	r8, r22

    if(debuglevel & 0x400)
   1ba72:	7c 01       	movw	r14, r24
   1ba74:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1ba78:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1ba7c:	92 ff       	sbrs	r25, 2
    {
        printf("New Directory Information AFTER write\n");
   1ba7e:	40 c0       	rjmp	.+128    	; 0x1bb00 <lif_add_ascii_file_as_e010+0x222>
   1ba80:	8c ef       	ldi	r24, 0xFC	; 252
   1ba82:	97 e3       	ldi	r25, 0x37	; 55
   1ba84:	1f 92       	push	r1
   1ba86:	9f 93       	push	r25
   1ba88:	8f 93       	push	r24
   1ba8a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1ba8e:	df 92       	push	r13
   1ba90:	cf 92       	push	r12
   1ba92:	85 ee       	ldi	r24, 0xE5	; 229
   1ba94:	97 e3       	ldi	r25, 0x37	; 55
   1ba96:	1f 92       	push	r1
   1ba98:	9f 93       	push	r25
   1ba9a:	8f 93       	push	r24
   1ba9c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        printf("Index:            %4d\n", (int)index);
   1baa0:	7f 92       	push	r7
   1baa2:	6f 92       	push	r6
   1baa4:	8e ec       	ldi	r24, 0xCE	; 206
   1baa6:	97 e3       	ldi	r25, 0x37	; 55
   1baa8:	1f 92       	push	r1
   1baaa:	9f 93       	push	r25
   1baac:	8f 93       	push	r24
   1baae:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1bab2:	f5 01       	movw	r30, r10
   1bab4:	83 81       	ldd	r24, Z+3	; 0x03
   1bab6:	8f 93       	push	r24
   1bab8:	82 81       	ldd	r24, Z+2	; 0x02
   1baba:	8f 93       	push	r24
   1babc:	81 81       	ldd	r24, Z+1	; 0x01
   1babe:	8f 93       	push	r24
   1bac0:	80 81       	ld	r24, Z
   1bac2:	8f 93       	push	r24
   1bac4:	85 eb       	ldi	r24, 0xB5	; 181
   1bac6:	97 e3       	ldi	r25, 0x37	; 55
   1bac8:	1f 92       	push	r1
   1baca:	9f 93       	push	r25
   1bacc:	8f 93       	push	r24
   1bace:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1bad2:	f8 01       	movw	r30, r16
   1bad4:	e0 5a       	subi	r30, 0xA0	; 160
   1bad6:	ff 4f       	sbci	r31, 0xFF	; 255
   1bad8:	83 81       	ldd	r24, Z+3	; 0x03
   1bada:	8f 93       	push	r24
   1badc:	82 81       	ldd	r24, Z+2	; 0x02
   1bade:	8f 93       	push	r24
   1bae0:	81 81       	ldd	r24, Z+1	; 0x01
   1bae2:	8f 93       	push	r24
   1bae4:	80 81       	ld	r24, Z
   1bae6:	8f 93       	push	r24
   1bae8:	8c e9       	ldi	r24, 0x9C	; 156
   1baea:	97 e3       	ldi	r25, 0x37	; 55
   1baec:	1f 92       	push	r1
   1baee:	9f 93       	push	r25
   1baf0:	8f 93       	push	r24
   1baf2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1baf6:	0f b6       	in	r0, 0x3f	; 63
   1baf8:	f8 94       	cli
   1bafa:	de bf       	out	0x3e, r29	; 62
   1bafc:	0f be       	out	0x3f, r0	; 63
    }

    // Write directory record
    // Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1bafe:	cd bf       	out	0x3d, r28	; 61
   1bb00:	b3 01       	movw	r22, r6
   1bb02:	c8 01       	movw	r24, r16
   1bb04:	0e 94 cc d1 	call	0x1a398	; 0x1a398 <lif_writedirindex>
   1bb08:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bb0a:	21 f4       	brne	.+8      	; 0x1bb14 <lif_add_ascii_file_as_e010+0x236>
   1bb0c:	c8 01       	movw	r24, r16
   1bb0e:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>
   1bb12:	16 c0       	rjmp	.+44     	; 0x1bb40 <lif_add_ascii_file_as_e010+0x262>
   1bb14:	c8 01       	movw	r24, r16
   1bb16:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("Wrote: %8ld\n", bytes);
   1bb1a:	ff 92       	push	r15
   1bb1c:	ef 92       	push	r14
   1bb1e:	9f 92       	push	r9
   1bb20:	8f 92       	push	r8
   1bb22:	8f e8       	ldi	r24, 0x8F	; 143
   1bb24:	97 e3       	ldi	r25, 0x37	; 55
   1bb26:	1f 92       	push	r1
   1bb28:	9f 93       	push	r25
   1bb2a:	8f 93       	push	r24
   1bb2c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    // Return file size
    return(bytes);
   1bb30:	0f b6       	in	r0, 0x3f	; 63
   1bb32:	f8 94       	cli
   1bb34:	de bf       	out	0x3e, r29	; 62
   1bb36:	0f be       	out	0x3f, r0	; 63
   1bb38:	cd bf       	out	0x3d, r28	; 61
   1bb3a:	b4 01       	movw	r22, r8
   1bb3c:	c7 01       	movw	r24, r14
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1); 
   1bb3e:	04 c0       	rjmp	.+8      	; 0x1bb48 <lif_add_ascii_file_as_e010+0x26a>
   1bb40:	6f ef       	ldi	r22, 0xFF	; 255
   1bb42:	7f ef       	ldi	r23, 0xFF	; 255
   1bb44:	8f ef       	ldi	r24, 0xFF	; 255

    printf("Wrote: %8ld\n", bytes);

    // Return file size
    return(bytes);
}
   1bb46:	9f ef       	ldi	r25, 0xFF	; 255
   1bb48:	e2 96       	adiw	r28, 0x32	; 50
   1bb4a:	e2 e1       	ldi	r30, 0x12	; 18
   1bb4c:	0c 94 ab e9 	jmp	0x1d356	; 0x1d356 <__epilogue_restores__>

0001bb50 <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1bb50:	ac e2       	ldi	r26, 0x2C	; 44
   1bb52:	b2 e0       	ldi	r27, 0x02	; 2
   1bb54:	ee ea       	ldi	r30, 0xAE	; 174
   1bb56:	fd ed       	ldi	r31, 0xDD	; 221
   1bb58:	0c 94 8f e9 	jmp	0x1d31e	; 0x1d31e <__prologue_saves__>
   1bb5c:	f8 2e       	mov	r15, r24
   1bb5e:	b9 2e       	mov	r11, r25
   1bb60:	16 2f       	mov	r17, r22
   1bb62:	07 2f       	mov	r16, r23
   1bb64:	c4 5e       	subi	r28, 0xE4	; 228
   1bb66:	dd 4f       	sbci	r29, 0xFD	; 253
   1bb68:	48 83       	st	Y, r20
   1bb6a:	cc 51       	subi	r28, 0x1C	; 28
   1bb6c:	d2 40       	sbci	r29, 0x02	; 2
   1bb6e:	e5 2e       	mov	r14, r21
    uint8_t buf[LIF_SECTOR_SIZE+4];
    // Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];


    LIF = lif_open_volume(lifimagename,"r");
   1bb70:	60 eb       	ldi	r22, 0xB0	; 176
   1bb72:	77 e0       	ldi	r23, 0x07	; 7
   1bb74:	cb d9       	rcall	.-3178   	; 0x1af0c <lif_open_volume>
   1bb76:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1bb78:	00 97       	sbiw	r24, 0x00	; 0
   1bb7a:	51 f4       	brne	.+20     	; 0x1bb90 <lif_extract_e010_as_ascii+0x40>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1bb7c:	bf 92       	push	r11
   1bb7e:	ff 92       	push	r15
   1bb80:	87 e7       	ldi	r24, 0x77	; 119
   1bb82:	97 e3       	ldi	r25, 0x37	; 55
   1bb84:	1f 92       	push	r1
   1bb86:	9f 93       	push	r25
   1bb88:	8f 93       	push	r24
   1bb8a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1bb8e:	11 c0       	rjmp	.+34     	; 0x1bbb2 <lif_extract_e010_as_ascii+0x62>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1bb90:	61 2f       	mov	r22, r17
   1bb92:	70 2f       	mov	r23, r16
   1bb94:	20 dc       	rcall	.-1984   	; 0x1b3d6 <lif_find_file>
    if(index == -1)
   1bb96:	01 96       	adiw	r24, 0x01	; 1
   1bb98:	a1 f4       	brne	.+40     	; 0x1bbc2 <lif_extract_e010_as_ascii+0x72>
    {
        printf("LIF File not found:%s\n", lifname);
   1bb9a:	0f 93       	push	r16
   1bb9c:	1f 93       	push	r17
   1bb9e:	80 e6       	ldi	r24, 0x60	; 96
   1bba0:	97 e3       	ldi	r25, 0x37	; 55
   1bba2:	1f 92       	push	r1
   1bba4:	9f 93       	push	r25
   1bba6:	8f 93       	push	r24
   1bba8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bbac:	c6 01       	movw	r24, r12
   1bbae:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1bbb2:	0f 90       	pop	r0
   1bbb4:	0f 90       	pop	r0
   1bbb6:	0f 90       	pop	r0
   1bbb8:	0f 90       	pop	r0
   1bbba:	0f 90       	pop	r0
   1bbbc:	80 e0       	ldi	r24, 0x00	; 0
   1bbbe:	90 e0       	ldi	r25, 0x00	; 0
   1bbc0:	ae c2       	rjmp	.+1372   	; 0x1c11e <lif_extract_e010_as_ascii+0x5ce>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1bbc2:	f6 01       	movw	r30, r12
   1bbc4:	e6 5a       	subi	r30, 0xA6	; 166
   1bbc6:	ff 4f       	sbci	r31, 0xFF	; 255
   1bbc8:	80 81       	ld	r24, Z
   1bbca:	91 81       	ldd	r25, Z+1	; 0x01
   1bbcc:	9c 01       	movw	r18, r24
   1bbce:	2c 7f       	andi	r18, 0xFC	; 252
   1bbd0:	20 31       	cpi	r18, 0x10	; 16
   1bbd2:	30 4e       	sbci	r19, 0xE0	; 224
   1bbd4:	c9 f0       	breq	.+50     	; 0x1bc08 <lif_extract_e010_as_ascii+0xb8>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1bbd6:	9f 93       	push	r25
   1bbd8:	8f 93       	push	r24
   1bbda:	ef 92       	push	r14
   1bbdc:	c4 5e       	subi	r28, 0xE4	; 228
   1bbde:	dd 4f       	sbci	r29, 0xFD	; 253
   1bbe0:	58 81       	ld	r21, Y
   1bbe2:	cc 51       	subi	r28, 0x1C	; 28
   1bbe4:	d2 40       	sbci	r29, 0x02	; 2
   1bbe6:	5f 93       	push	r21
   1bbe8:	88 e2       	ldi	r24, 0x28	; 40
   1bbea:	97 e3       	ldi	r25, 0x37	; 55
   1bbec:	1f 92       	push	r1
   1bbee:	9f 93       	push	r25
   1bbf0:	8f 93       	push	r24
   1bbf2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bbf6:	c6 01       	movw	r24, r12
   1bbf8:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
        lif_closedir(LIF);
        return(0);
   1bbfc:	0f b6       	in	r0, 0x3f	; 63
   1bbfe:	f8 94       	cli
   1bc00:	de bf       	out	0x3e, r29	; 62
   1bc02:	0f be       	out	0x3f, r0	; 63
   1bc04:	cd bf       	out	0x3d, r28	; 61
   1bc06:	da cf       	rjmp	.-76     	; 0x1bbbc <lif_extract_e010_as_ascii+0x6c>
    }

    start = LIF->DIR.FileStartSector;
   1bc08:	f6 01       	movw	r30, r12
   1bc0a:	e4 5a       	subi	r30, 0xA4	; 164
   1bc0c:	ff 4f       	sbci	r31, 0xFF	; 255
   1bc0e:	80 80       	ld	r8, Z
   1bc10:	91 80       	ldd	r9, Z+1	; 0x01
   1bc12:	a2 80       	ldd	r10, Z+2	; 0x02
   1bc14:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1bc16:	34 96       	adiw	r30, 0x04	; 4
   1bc18:	80 81       	ld	r24, Z
   1bc1a:	91 81       	ldd	r25, Z+1	; 0x01
   1bc1c:	a2 81       	ldd	r26, Z+2	; 0x02
   1bc1e:	b3 81       	ldd	r27, Z+3	; 0x03
   1bc20:	a5 01       	movw	r20, r10
   1bc22:	94 01       	movw	r18, r8
   1bc24:	28 0f       	add	r18, r24
   1bc26:	39 1f       	adc	r19, r25
   1bc28:	4a 1f       	adc	r20, r26
   1bc2a:	5b 1f       	adc	r21, r27
   1bc2c:	c9 5d       	subi	r28, 0xD9	; 217
   1bc2e:	dd 4f       	sbci	r29, 0xFD	; 253
   1bc30:	28 83       	st	Y, r18
   1bc32:	39 83       	std	Y+1, r19	; 0x01
   1bc34:	4a 83       	std	Y+2, r20	; 0x02
   1bc36:	5b 83       	std	Y+3, r21	; 0x03
   1bc38:	c7 52       	subi	r28, 0x27	; 39
   1bc3a:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1bc3c:	c6 01       	movw	r24, r12
   1bc3e:	8c 59       	subi	r24, 0x9C	; 156
   1bc40:	9f 4f       	sbci	r25, 0xFF	; 255
   1bc42:	0e 94 17 cc 	call	0x1982e	; 0x1982e <lif_lifbcd2time>
   1bc46:	c3 5e       	subi	r28, 0xE3	; 227
   1bc48:	dd 4f       	sbci	r29, 0xFD	; 253
   1bc4a:	68 83       	st	Y, r22
   1bc4c:	79 83       	std	Y+1, r23	; 0x01
   1bc4e:	8a 83       	std	Y+2, r24	; 0x02
   1bc50:	9b 83       	std	Y+3, r25	; 0x03
   1bc52:	cd 51       	subi	r28, 0x1D	; 29
   1bc54:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1bc56:	ba 2d       	mov	r27, r10
   1bc58:	a9 2d       	mov	r26, r9
   1bc5a:	98 2d       	mov	r25, r8
   1bc5c:	88 27       	eor	r24, r24
   1bc5e:	cf 5e       	subi	r28, 0xEF	; 239
   1bc60:	dd 4f       	sbci	r29, 0xFD	; 253
   1bc62:	88 83       	st	Y, r24
   1bc64:	99 83       	std	Y+1, r25	; 0x01
   1bc66:	aa 83       	std	Y+2, r26	; 0x02
   1bc68:	bb 83       	std	Y+3, r27	; 0x03
   1bc6a:	c1 51       	subi	r28, 0x11	; 17
   1bc6c:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1bc6e:	63 e0       	ldi	r22, 0x03	; 3
   1bc70:	79 e0       	ldi	r23, 0x09	; 9
   1bc72:	c4 5e       	subi	r28, 0xE4	; 228
   1bc74:	dd 4f       	sbci	r29, 0xFD	; 253
   1bc76:	88 81       	ld	r24, Y
   1bc78:	cc 51       	subi	r28, 0x1C	; 28
   1bc7a:	d2 40       	sbci	r29, 0x02	; 2
   1bc7c:	9e 2d       	mov	r25, r14
   1bc7e:	0e 94 c4 c7 	call	0x18f88	; 0x18f88 <lif_open>
   1bc82:	c6 5e       	subi	r28, 0xE6	; 230
   1bc84:	dd 4f       	sbci	r29, 0xFD	; 253
   1bc86:	99 83       	std	Y+1, r25	; 0x01
   1bc88:	88 83       	st	Y, r24
   1bc8a:	ca 51       	subi	r28, 0x1A	; 26
   1bc8c:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1bc8e:	89 2b       	or	r24, r25
   1bc90:	21 f4       	brne	.+8      	; 0x1bc9a <lif_extract_e010_as_ascii+0x14a>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bc92:	c6 01       	movw	r24, r12
   1bc94:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>
   1bc98:	91 cf       	rjmp	.-222    	; 0x1bbbc <lif_extract_e010_as_ascii+0x6c>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1bc9a:	ef 92       	push	r14
   1bc9c:	c4 5e       	subi	r28, 0xE4	; 228
   1bc9e:	dd 4f       	sbci	r29, 0xFD	; 253
   1bca0:	98 81       	ld	r25, Y
   1bca2:	cc 51       	subi	r28, 0x1C	; 28
   1bca4:	d2 40       	sbci	r29, 0x02	; 2
   1bca6:	9f 93       	push	r25
   1bca8:	88 e1       	ldi	r24, 0x18	; 24
   1bcaa:	97 e3       	ldi	r25, 0x37	; 55
   1bcac:	1f 92       	push	r1
   1bcae:	9f 93       	push	r25
   1bcb0:	8f 93       	push	r24
   1bcb2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1bcb6:	0f 90       	pop	r0
   1bcb8:	0f 90       	pop	r0
   1bcba:	0f 90       	pop	r0
   1bcbc:	0f 90       	pop	r0
   1bcbe:	0f 90       	pop	r0
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
    wind = 0;
   1bcc0:	81 2c       	mov	r8, r1
   1bcc2:	91 2c       	mov	r9, r1
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1bcc4:	c8 5e       	subi	r28, 0xE8	; 232
   1bcc6:	dd 4f       	sbci	r29, 0xFD	; 253
   1bcc8:	19 82       	std	Y+1, r1	; 0x01
   1bcca:	18 82       	st	Y, r1
   1bccc:	c8 51       	subi	r28, 0x18	; 24
   1bcce:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
   1bcd0:	a1 e0       	ldi	r26, 0x01	; 1
   1bcd2:	cb 5e       	subi	r28, 0xEB	; 235
   1bcd4:	dd 4f       	sbci	r29, 0xFD	; 253
   1bcd6:	a8 83       	st	Y, r26
   1bcd8:	c5 51       	subi	r28, 0x15	; 21
   1bcda:	d2 40       	sbci	r29, 0x02	; 2
   1bcdc:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1bcde:	41 2c       	mov	r4, r1
   1bce0:	51 2c       	mov	r5, r1
   1bce2:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("Wrote: %8ld\r", bytes);
   1bce4:	88 e5       	ldi	r24, 0x58	; 88
   1bce6:	96 e3       	ldi	r25, 0x36	; 54
   1bce8:	9c 01       	movw	r18, r24
   1bcea:	40 e0       	ldi	r20, 0x00	; 0
   1bcec:	cf 5d       	subi	r28, 0xDF	; 223
   1bcee:	dd 4f       	sbci	r29, 0xFD	; 253
   1bcf0:	28 83       	st	Y, r18
   1bcf2:	39 83       	std	Y+1, r19	; 0x01
   1bcf4:	4a 83       	std	Y+2, r20	; 0x02
   1bcf6:	c1 52       	subi	r28, 0x21	; 33
   1bcf8:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1bcfa:	85 e6       	ldi	r24, 0x65	; 101
   1bcfc:	96 e3       	ldi	r25, 0x36	; 54
   1bcfe:	9c 01       	movw	r18, r24
   1bd00:	40 e0       	ldi	r20, 0x00	; 0
   1bd02:	cc 5d       	subi	r28, 0xDC	; 220
   1bd04:	dd 4f       	sbci	r29, 0xFD	; 253
   1bd06:	28 83       	st	Y, r18
   1bd08:	39 83       	std	Y+1, r19	; 0x01
   1bd0a:	4a 83       	std	Y+2, r20	; 0x02
   1bd0c:	c4 52       	subi	r28, 0x24	; 36
   1bd0e:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1bd10:	cf 5e       	subi	r28, 0xEF	; 239
   1bd12:	dd 4f       	sbci	r29, 0xFD	; 253
   1bd14:	28 81       	ld	r18, Y
   1bd16:	39 81       	ldd	r19, Y+1	; 0x01
   1bd18:	4a 81       	ldd	r20, Y+2	; 0x02
   1bd1a:	5b 81       	ldd	r21, Y+3	; 0x03
   1bd1c:	c1 51       	subi	r28, 0x11	; 17
   1bd1e:	d2 40       	sbci	r29, 0x02	; 2
   1bd20:	bb 27       	eor	r27, r27
   1bd22:	a5 2f       	mov	r26, r21
   1bd24:	94 2f       	mov	r25, r20
   1bd26:	83 2f       	mov	r24, r19
   1bd28:	c9 5d       	subi	r28, 0xD9	; 217
   1bd2a:	dd 4f       	sbci	r29, 0xFD	; 253
   1bd2c:	28 81       	ld	r18, Y
   1bd2e:	39 81       	ldd	r19, Y+1	; 0x01
   1bd30:	4a 81       	ldd	r20, Y+2	; 0x02
   1bd32:	5b 81       	ldd	r21, Y+3	; 0x03
   1bd34:	c7 52       	subi	r28, 0x27	; 39
   1bd36:	d2 40       	sbci	r29, 0x02	; 2
   1bd38:	28 17       	cp	r18, r24
   1bd3a:	39 07       	cpc	r19, r25
   1bd3c:	4a 07       	cpc	r20, r26
   1bd3e:	5b 07       	cpc	r21, r27
   1bd40:	08 f4       	brcc	.+2      	; 0x1bd44 <lif_extract_e010_as_ascii+0x1f4>
   1bd42:	76 c1       	rjmp	.+748    	; 0x1c030 <lif_extract_e010_as_ascii+0x4e0>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1bd44:	00 e0       	ldi	r16, 0x00	; 0
   1bd46:	11 e0       	ldi	r17, 0x01	; 1
   1bd48:	cf 5e       	subi	r28, 0xEF	; 239
   1bd4a:	dd 4f       	sbci	r29, 0xFD	; 253
   1bd4c:	28 81       	ld	r18, Y
   1bd4e:	39 81       	ldd	r19, Y+1	; 0x01
   1bd50:	4a 81       	ldd	r20, Y+2	; 0x02
   1bd52:	5b 81       	ldd	r21, Y+3	; 0x03
   1bd54:	c1 51       	subi	r28, 0x11	; 17
   1bd56:	d2 40       	sbci	r29, 0x02	; 2
   1bd58:	be 01       	movw	r22, r28
   1bd5a:	6b 5f       	subi	r22, 0xFB	; 251
   1bd5c:	7e 4f       	sbci	r23, 0xFE	; 254
   1bd5e:	c6 01       	movw	r24, r12
   1bd60:	0e 94 4a c8 	call	0x19094	; 0x19094 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1bd64:	6f 3f       	cpi	r22, 0xFF	; 255
   1bd66:	71 05       	cpc	r23, r1
   1bd68:	09 f0       	breq	.+2      	; 0x1bd6c <lif_extract_e010_as_ascii+0x21c>
   1bd6a:	0c f4       	brge	.+2      	; 0x1bd6e <lif_extract_e010_as_ascii+0x21e>
   1bd6c:	5b c1       	rjmp	.+694    	; 0x1c024 <lif_extract_e010_as_ascii+0x4d4>
   1bd6e:	00 e0       	ldi	r16, 0x00	; 0
   1bd70:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1bd72:	c8 5e       	subi	r28, 0xE8	; 232
   1bd74:	dd 4f       	sbci	r29, 0xFD	; 253
   1bd76:	a8 81       	ld	r26, Y
   1bd78:	b9 81       	ldd	r27, Y+1	; 0x01
   1bd7a:	c8 51       	subi	r28, 0x18	; 24
   1bd7c:	d2 40       	sbci	r29, 0x02	; 2
   1bd7e:	ab 2b       	or	r26, r27
   1bd80:	09 f0       	breq	.+2      	; 0x1bd84 <lif_extract_e010_as_ascii+0x234>
   1bd82:	3c c1       	rjmp	.+632    	; 0x1bffc <lif_extract_e010_as_ascii+0x4ac>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1bd84:	e5 e0       	ldi	r30, 0x05	; 5
   1bd86:	f1 e0       	ldi	r31, 0x01	; 1
   1bd88:	ec 0f       	add	r30, r28
   1bd8a:	fd 1f       	adc	r31, r29
   1bd8c:	e0 0f       	add	r30, r16
   1bd8e:	f1 1f       	adc	r31, r17
   1bd90:	80 81       	ld	r24, Z
   1bd92:	98 2f       	mov	r25, r24
   1bd94:	9f 7e       	andi	r25, 0xEF	; 239
   1bd96:	9f 3c       	cpi	r25, 0xCF	; 207
   1bd98:	11 f0       	breq	.+4      	; 0x1bd9e <lif_extract_e010_as_ascii+0x24e>
   1bd9a:	8f 36       	cpi	r24, 0x6F	; 111
   1bd9c:	d9 f5       	brne	.+118    	; 0x1be14 <lif_extract_e010_as_ascii+0x2c4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1bd9e:	e5 e0       	ldi	r30, 0x05	; 5
   1bda0:	f1 e0       	ldi	r31, 0x01	; 1
   1bda2:	ec 0f       	add	r30, r28
   1bda4:	fd 1f       	adc	r31, r29
   1bda6:	e0 0f       	add	r30, r16
   1bda8:	f1 1f       	adc	r31, r17
   1bdaa:	21 80       	ldd	r2, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8); 
   1bdac:	f8 01       	movw	r30, r16
   1bdae:	32 96       	adiw	r30, 0x02	; 2
   1bdb0:	45 e0       	ldi	r20, 0x05	; 5
   1bdb2:	51 e0       	ldi	r21, 0x01	; 1
   1bdb4:	4c 0f       	add	r20, r28
   1bdb6:	5d 1f       	adc	r21, r29
   1bdb8:	e4 0f       	add	r30, r20
   1bdba:	f5 1f       	adc	r31, r21
   1bdbc:	0d 5f       	subi	r16, 0xFD	; 253
   1bdbe:	1f 4f       	sbci	r17, 0xFF	; 255
   1bdc0:	80 81       	ld	r24, Z
   1bdc2:	31 2c       	mov	r3, r1
   1bdc4:	38 2a       	or	r3, r24
                // EOF ?
                if(len == 0)
   1bdc6:	21 14       	cp	r2, r1
   1bdc8:	31 04       	cpc	r3, r1
   1bdca:	09 f4       	brne	.+2      	; 0x1bdce <lif_extract_e010_as_ascii+0x27e>
   1bdcc:	0f c1       	rjmp	.+542    	; 0x1bfec <lif_extract_e010_as_ascii+0x49c>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1bdce:	5f ef       	ldi	r21, 0xFF	; 255
   1bdd0:	25 16       	cp	r2, r21
   1bdd2:	31 04       	cpc	r3, r1
   1bdd4:	09 f0       	breq	.+2      	; 0x1bdd8 <lif_extract_e010_as_ascii+0x288>
   1bdd6:	7c f4       	brge	.+30     	; 0x1bdf6 <lif_extract_e010_as_ascii+0x2a6>
   1bdd8:	ca 5e       	subi	r28, 0xEA	; 234
   1bdda:	dd 4f       	sbci	r29, 0xFD	; 253
   1bddc:	19 82       	std	Y+1, r1	; 0x01
   1bdde:	18 82       	st	Y, r1
   1bde0:	c6 51       	subi	r28, 0x16	; 22
   1bde2:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1bde4:	c1 01       	movw	r24, r2
   1bde6:	01 97       	sbiw	r24, 0x01	; 1
   1bde8:	c5 5d       	subi	r28, 0xD5	; 213
   1bdea:	dd 4f       	sbci	r29, 0xFD	; 253
   1bdec:	99 83       	std	Y+1, r25	; 0x01
   1bdee:	88 83       	st	Y, r24
   1bdf0:	cb 52       	subi	r28, 0x2B	; 43
   1bdf2:	d2 40       	sbci	r29, 0x02	; 2
   1bdf4:	7b c0       	rjmp	.+246    	; 0x1beec <lif_extract_e010_as_ascii+0x39c>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1bdf6:	3f 92       	push	r3
   1bdf8:	2f 92       	push	r2
   1bdfa:	83 ee       	ldi	r24, 0xE3	; 227
   1bdfc:	96 e3       	ldi	r25, 0x36	; 54
   1bdfe:	1f 92       	push	r1
   1be00:	9f 93       	push	r25
   1be02:	8f 93       	push	r24
   1be04:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
                    status = 0;
                    done = 1;
                    break;
   1be08:	0f 90       	pop	r0
   1be0a:	0f 90       	pop	r0
   1be0c:	0f 90       	pop	r0
   1be0e:	0f 90       	pop	r0
   1be10:	0f 90       	pop	r0
   1be12:	2b c0       	rjmp	.+86     	; 0x1be6a <lif_extract_e010_as_ascii+0x31a>
                }
            }
            else if(buf[ind] == 0xEF)
   1be14:	8f 3e       	cpi	r24, 0xEF	; 239
   1be16:	09 f4       	brne	.+2      	; 0x1be1a <lif_extract_e010_as_ascii+0x2ca>
   1be18:	f1 c0       	rjmp	.+482    	; 0x1bffc <lif_extract_e010_as_ascii+0x4ac>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1be1a:	1f 93       	push	r17
   1be1c:	0f 93       	push	r16
   1be1e:	cc 5e       	subi	r28, 0xEC	; 236
   1be20:	dd 4f       	sbci	r29, 0xFD	; 253
   1be22:	b8 81       	ld	r27, Y
   1be24:	c4 51       	subi	r28, 0x14	; 20
   1be26:	d2 40       	sbci	r29, 0x02	; 2
   1be28:	bf 93       	push	r27
   1be2a:	cd 5e       	subi	r28, 0xED	; 237
   1be2c:	dd 4f       	sbci	r29, 0xFD	; 253
   1be2e:	28 81       	ld	r18, Y
   1be30:	c3 51       	subi	r28, 0x13	; 19
   1be32:	d2 40       	sbci	r29, 0x02	; 2
   1be34:	2f 93       	push	r18
   1be36:	ce 5e       	subi	r28, 0xEE	; 238
   1be38:	dd 4f       	sbci	r29, 0xFD	; 253
   1be3a:	38 81       	ld	r19, Y
   1be3c:	c2 51       	subi	r28, 0x12	; 18
   1be3e:	d2 40       	sbci	r29, 0x02	; 2
   1be40:	3f 93       	push	r19
   1be42:	cf 5e       	subi	r28, 0xEF	; 239
   1be44:	dd 4f       	sbci	r29, 0xFD	; 253
   1be46:	48 81       	ld	r20, Y
   1be48:	c1 51       	subi	r28, 0x11	; 17
   1be4a:	d2 40       	sbci	r29, 0x02	; 2
   1be4c:	4f 93       	push	r20
   1be4e:	1f 92       	push	r1
   1be50:	8f 93       	push	r24
   1be52:	8d e8       	ldi	r24, 0x8D	; 141
   1be54:	96 e3       	ldi	r25, 0x36	; 54
   1be56:	1f 92       	push	r1
   1be58:	9f 93       	push	r25
   1be5a:	8f 93       	push	r24
   1be5c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
                status = 0;
                done = 1;
                break;
   1be60:	0f b6       	in	r0, 0x3f	; 63
   1be62:	f8 94       	cli
   1be64:	de bf       	out	0x3e, r29	; 62
   1be66:	0f be       	out	0x3f, r0	; 63
   1be68:	cd bf       	out	0x3d, r28	; 61
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
                done = 1;
   1be6a:	a1 e0       	ldi	r26, 0x01	; 1
   1be6c:	b0 e0       	ldi	r27, 0x00	; 0
   1be6e:	c8 5e       	subi	r28, 0xE8	; 232
   1be70:	dd 4f       	sbci	r29, 0xFD	; 253
   1be72:	b9 83       	std	Y+1, r27	; 0x01
   1be74:	a8 83       	st	Y, r26
   1be76:	c8 51       	subi	r28, 0x18	; 24
   1be78:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1be7a:	cb 5e       	subi	r28, 0xEB	; 235
   1be7c:	dd 4f       	sbci	r29, 0xFD	; 253
   1be7e:	18 82       	st	Y, r1
   1be80:	c5 51       	subi	r28, 0x15	; 21
   1be82:	d2 40       	sbci	r29, 0x02	; 2
   1be84:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1be86:	ba c0       	rjmp	.+372    	; 0x1bffc <lif_extract_e010_as_ascii+0x4ac>
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1be88:	0f 3f       	cpi	r16, 0xFF	; 255
   1be8a:	11 05       	cpc	r17, r1
   1be8c:	11 f0       	breq	.+4      	; 0x1be92 <lif_extract_e010_as_ascii+0x342>
   1be8e:	0c f0       	brlt	.+2      	; 0x1be92 <lif_extract_e010_as_ascii+0x342>
   1be90:	b5 c0       	rjmp	.+362    	; 0x1bffc <lif_extract_e010_as_ascii+0x4ac>
            {
                if(buf[ind] == '\r' && i == len-1)
   1be92:	e5 e0       	ldi	r30, 0x05	; 5
   1be94:	f1 e0       	ldi	r31, 0x01	; 1
   1be96:	ec 0f       	add	r30, r28
   1be98:	fd 1f       	adc	r31, r29
   1be9a:	e0 0f       	add	r30, r16
   1be9c:	f1 1f       	adc	r31, r17
   1be9e:	20 81       	ld	r18, Z
   1bea0:	a4 01       	movw	r20, r8
   1bea2:	4f 5f       	subi	r20, 0xFF	; 255
   1bea4:	5f 4f       	sbci	r21, 0xFF	; 255
   1bea6:	5a 01       	movw	r10, r20
   1bea8:	2d 30       	cpi	r18, 0x0D	; 13
   1beaa:	51 f1       	breq	.+84     	; 0x1bf00 <lif_extract_e010_as_ascii+0x3b0>
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1beac:	9a 2d       	mov	r25, r10
   1beae:	8b 2d       	mov	r24, r11
   1beb0:	0f 5f       	subi	r16, 0xFF	; 255
   1beb2:	1f 4f       	sbci	r17, 0xFF	; 255
   1beb4:	e1 e0       	ldi	r30, 0x01	; 1
   1beb6:	f0 e0       	ldi	r31, 0x00	; 0
   1beb8:	ec 0f       	add	r30, r28
   1beba:	fd 1f       	adc	r31, r29
   1bebc:	e8 0d       	add	r30, r8
   1bebe:	f9 1d       	adc	r31, r9
   1bec0:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1bec2:	2f ef       	ldi	r18, 0xFF	; 255
   1bec4:	a2 16       	cp	r10, r18
   1bec6:	b1 04       	cpc	r11, r1
   1bec8:	09 f0       	breq	.+2      	; 0x1becc <lif_extract_e010_as_ascii+0x37c>
   1beca:	ac f5       	brge	.+106    	; 0x1bf36 <lif_extract_e010_as_ascii+0x3e6>
                status = 0;
                done = 1;
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1becc:	ca 5e       	subi	r28, 0xEA	; 234
   1bece:	dd 4f       	sbci	r29, 0xFD	; 253
   1bed0:	48 81       	ld	r20, Y
   1bed2:	59 81       	ldd	r21, Y+1	; 0x01
   1bed4:	c6 51       	subi	r28, 0x16	; 22
   1bed6:	d2 40       	sbci	r29, 0x02	; 2
   1bed8:	4f 5f       	subi	r20, 0xFF	; 255
   1beda:	5f 4f       	sbci	r21, 0xFF	; 255
   1bedc:	ca 5e       	subi	r28, 0xEA	; 234
   1bede:	dd 4f       	sbci	r29, 0xFD	; 253
   1bee0:	59 83       	std	Y+1, r21	; 0x01
   1bee2:	48 83       	st	Y, r20
   1bee4:	c6 51       	subi	r28, 0x16	; 22
   1bee6:	d2 40       	sbci	r29, 0x02	; 2
   1bee8:	89 2e       	mov	r8, r25
   1beea:	98 2e       	mov	r9, r24
   1beec:	ca 5e       	subi	r28, 0xEA	; 234
   1beee:	dd 4f       	sbci	r29, 0xFD	; 253
   1bef0:	88 81       	ld	r24, Y
   1bef2:	99 81       	ldd	r25, Y+1	; 0x01
   1bef4:	c6 51       	subi	r28, 0x16	; 22
   1bef6:	d2 40       	sbci	r29, 0x02	; 2
   1bef8:	82 15       	cp	r24, r2
   1befa:	93 05       	cpc	r25, r3
   1befc:	2c f2       	brlt	.-118    	; 0x1be88 <lif_extract_e010_as_ascii+0x338>
   1befe:	70 c0       	rjmp	.+224    	; 0x1bfe0 <lif_extract_e010_as_ascii+0x490>
            {
                if(buf[ind] == '\r' && i == len-1)
   1bf00:	ca 5e       	subi	r28, 0xEA	; 234
   1bf02:	dd 4f       	sbci	r29, 0xFD	; 253
   1bf04:	88 81       	ld	r24, Y
   1bf06:	99 81       	ldd	r25, Y+1	; 0x01
   1bf08:	c6 51       	subi	r28, 0x16	; 22
   1bf0a:	d2 40       	sbci	r29, 0x02	; 2
   1bf0c:	c5 5d       	subi	r28, 0xD5	; 213
   1bf0e:	dd 4f       	sbci	r29, 0xFD	; 253
   1bf10:	a8 81       	ld	r26, Y
   1bf12:	b9 81       	ldd	r27, Y+1	; 0x01
   1bf14:	cb 52       	subi	r28, 0x2B	; 43
   1bf16:	d2 40       	sbci	r29, 0x02	; 2
   1bf18:	8a 17       	cp	r24, r26
   1bf1a:	9b 07       	cpc	r25, r27
   1bf1c:	39 f6       	brne	.-114    	; 0x1beac <lif_extract_e010_as_ascii+0x35c>
                {
                    wbuf[wind++] = '\n';
   1bf1e:	e1 e0       	ldi	r30, 0x01	; 1
   1bf20:	f0 e0       	ldi	r31, 0x00	; 0
   1bf22:	ec 0f       	add	r30, r28
   1bf24:	fd 1f       	adc	r31, r29
   1bf26:	e8 0d       	add	r30, r8
   1bf28:	f9 1d       	adc	r31, r9
   1bf2a:	ba e0       	ldi	r27, 0x0A	; 10
   1bf2c:	b0 83       	st	Z, r27
                    ++ind;
   1bf2e:	0f 5f       	subi	r16, 0xFF	; 255
   1bf30:	1f 4f       	sbci	r17, 0xFF	; 255
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1bf32:	4a 01       	movw	r8, r20
                    ++ind;
                    break;
   1bf34:	55 c0       	rjmp	.+170    	; 0x1bfe0 <lif_extract_e010_as_ascii+0x490>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1bf36:	c6 5e       	subi	r28, 0xE6	; 230
   1bf38:	dd 4f       	sbci	r29, 0xFD	; 253
   1bf3a:	28 81       	ld	r18, Y
   1bf3c:	39 81       	ldd	r19, Y+1	; 0x01
   1bf3e:	ca 51       	subi	r28, 0x1A	; 26
   1bf40:	d2 40       	sbci	r29, 0x02	; 2
   1bf42:	a5 01       	movw	r20, r10
   1bf44:	61 e0       	ldi	r22, 0x01	; 1
   1bf46:	70 e0       	ldi	r23, 0x00	; 0
   1bf48:	ce 01       	movw	r24, r28
   1bf4a:	01 96       	adiw	r24, 0x01	; 1
   1bf4c:	0e 94 38 80 	call	0x10070	; 0x10070 <fwrite>
                    if(size < wind)
   1bf50:	8a 15       	cp	r24, r10
   1bf52:	9b 05       	cpc	r25, r11
   1bf54:	14 f5       	brge	.+68     	; 0x1bf9a <lif_extract_e010_as_ascii+0x44a>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1bf56:	1f 92       	push	r1
   1bf58:	cb 5d       	subi	r28, 0xDB	; 219
   1bf5a:	dd 4f       	sbci	r29, 0xFD	; 253
   1bf5c:	38 81       	ld	r19, Y
   1bf5e:	c5 52       	subi	r28, 0x25	; 37
   1bf60:	d2 40       	sbci	r29, 0x02	; 2
   1bf62:	3f 93       	push	r19
   1bf64:	cc 5d       	subi	r28, 0xDC	; 220
   1bf66:	dd 4f       	sbci	r29, 0xFD	; 253
   1bf68:	48 81       	ld	r20, Y
   1bf6a:	c4 52       	subi	r28, 0x24	; 36
   1bf6c:	d2 40       	sbci	r29, 0x02	; 2
   1bf6e:	4f 93       	push	r20
   1bf70:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
                        status = 0;
                        done = 1;
                        break;
   1bf74:	0f 90       	pop	r0
   1bf76:	0f 90       	pop	r0
   1bf78:	0f 90       	pop	r0
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1bf7a:	45 01       	movw	r8, r10
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1bf7c:	81 e0       	ldi	r24, 0x01	; 1
   1bf7e:	90 e0       	ldi	r25, 0x00	; 0
   1bf80:	c8 5e       	subi	r28, 0xE8	; 232
   1bf82:	dd 4f       	sbci	r29, 0xFD	; 253
   1bf84:	99 83       	std	Y+1, r25	; 0x01
   1bf86:	88 83       	st	Y, r24
   1bf88:	c8 51       	subi	r28, 0x18	; 24
   1bf8a:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1bf8c:	cb 5e       	subi	r28, 0xEB	; 235
   1bf8e:	dd 4f       	sbci	r29, 0xFD	; 253
   1bf90:	18 82       	st	Y, r1
   1bf92:	c5 51       	subi	r28, 0x15	; 21
   1bf94:	d2 40       	sbci	r29, 0x02	; 2
   1bf96:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1bf98:	23 c0       	rjmp	.+70     	; 0x1bfe0 <lif_extract_e010_as_ascii+0x490>
                    }
                    bytes += size;
   1bf9a:	09 2e       	mov	r0, r25
   1bf9c:	00 0c       	add	r0, r0
   1bf9e:	aa 0b       	sbc	r26, r26
   1bfa0:	bb 0b       	sbc	r27, r27
   1bfa2:	48 0e       	add	r4, r24
   1bfa4:	59 1e       	adc	r5, r25
   1bfa6:	6a 1e       	adc	r6, r26
   1bfa8:	7b 1e       	adc	r7, r27
                    printf("Wrote: %8ld\r", bytes);
   1bfaa:	7f 92       	push	r7
   1bfac:	6f 92       	push	r6
   1bfae:	5f 92       	push	r5
   1bfb0:	4f 92       	push	r4
   1bfb2:	1f 92       	push	r1
   1bfb4:	ce 5d       	subi	r28, 0xDE	; 222
   1bfb6:	dd 4f       	sbci	r29, 0xFD	; 253
   1bfb8:	98 81       	ld	r25, Y
   1bfba:	c2 52       	subi	r28, 0x22	; 34
   1bfbc:	d2 40       	sbci	r29, 0x02	; 2
   1bfbe:	9f 93       	push	r25
   1bfc0:	cf 5d       	subi	r28, 0xDF	; 223
   1bfc2:	dd 4f       	sbci	r29, 0xFD	; 253
   1bfc4:	a8 81       	ld	r26, Y
   1bfc6:	c1 52       	subi	r28, 0x21	; 33
   1bfc8:	d2 40       	sbci	r29, 0x02	; 2
   1bfca:	af 93       	push	r26
   1bfcc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1bfd0:	0f b6       	in	r0, 0x3f	; 63
   1bfd2:	f8 94       	cli
   1bfd4:	de bf       	out	0x3e, r29	; 62
   1bfd6:	0f be       	out	0x3f, r0	; 63
   1bfd8:	cd bf       	out	0x3d, r28	; 61
                    wind = 0;
   1bfda:	90 e0       	ldi	r25, 0x00	; 0
   1bfdc:	80 e0       	ldi	r24, 0x00	; 0
   1bfde:	76 cf       	rjmp	.-276    	; 0x1becc <lif_extract_e010_as_ascii+0x37c>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1bfe0:	0f 3f       	cpi	r16, 0xFF	; 255
   1bfe2:	11 05       	cpc	r17, r1
   1bfe4:	09 f0       	breq	.+2      	; 0x1bfe8 <lif_extract_e010_as_ascii+0x498>
   1bfe6:	0c f4       	brge	.+2      	; 0x1bfea <lif_extract_e010_as_ascii+0x49a>
   1bfe8:	c4 ce       	rjmp	.-632    	; 0x1bd72 <lif_extract_e010_as_ascii+0x222>
   1bfea:	08 c0       	rjmp	.+16     	; 0x1bffc <lif_extract_e010_as_ascii+0x4ac>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8); 
                // EOF ?
                if(len == 0)
                {
                    done = 1;
   1bfec:	21 e0       	ldi	r18, 0x01	; 1
   1bfee:	30 e0       	ldi	r19, 0x00	; 0
   1bff0:	c8 5e       	subi	r28, 0xE8	; 232
   1bff2:	dd 4f       	sbci	r29, 0xFD	; 253
   1bff4:	39 83       	std	Y+1, r19	; 0x01
   1bff6:	28 83       	st	Y, r18
   1bff8:	c8 51       	subi	r28, 0x18	; 24
   1bffa:	d2 40       	sbci	r29, 0x02	; 2

            }   // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }   // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1bffc:	cf 5e       	subi	r28, 0xEF	; 239
   1bffe:	dd 4f       	sbci	r29, 0xFD	; 253
   1c000:	88 81       	ld	r24, Y
   1c002:	99 81       	ldd	r25, Y+1	; 0x01
   1c004:	aa 81       	ldd	r26, Y+2	; 0x02
   1c006:	bb 81       	ldd	r27, Y+3	; 0x03
   1c008:	c1 51       	subi	r28, 0x11	; 17
   1c00a:	d2 40       	sbci	r29, 0x02	; 2
   1c00c:	9f 5f       	subi	r25, 0xFF	; 255
   1c00e:	af 4f       	sbci	r26, 0xFF	; 255
   1c010:	bf 4f       	sbci	r27, 0xFF	; 255
   1c012:	cf 5e       	subi	r28, 0xEF	; 239
   1c014:	dd 4f       	sbci	r29, 0xFD	; 253
   1c016:	88 83       	st	Y, r24
   1c018:	99 83       	std	Y+1, r25	; 0x01
   1c01a:	aa 83       	std	Y+2, r26	; 0x02
   1c01c:	bb 83       	std	Y+3, r27	; 0x03
   1c01e:	c1 51       	subi	r28, 0x11	; 17
   1c020:	d2 40       	sbci	r29, 0x02	; 2
   1c022:	76 ce       	rjmp	.-788    	; 0x1bd10 <lif_extract_e010_as_ascii+0x1c0>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1c024:	cb 5e       	subi	r28, 0xEB	; 235
   1c026:	dd 4f       	sbci	r29, 0xFD	; 253
   1c028:	18 82       	st	Y, r1
   1c02a:	c5 51       	subi	r28, 0x15	; 21
   1c02c:	d2 40       	sbci	r29, 0x02	; 2
   1c02e:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c030:	c6 01       	movw	r24, r12
   1c032:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>

    }   // while(offset <= end)

    lif_closedir(LIF);
    // Flush any remaining bytes
    if(wind)
   1c036:	81 14       	cp	r8, r1
   1c038:	91 04       	cpc	r9, r1
   1c03a:	51 f1       	breq	.+84     	; 0x1c090 <lif_extract_e010_as_ascii+0x540>
    {
        size = fwrite(wbuf,1,wind,fo);
   1c03c:	c6 5e       	subi	r28, 0xE6	; 230
   1c03e:	dd 4f       	sbci	r29, 0xFD	; 253
   1c040:	28 81       	ld	r18, Y
   1c042:	39 81       	ldd	r19, Y+1	; 0x01
   1c044:	ca 51       	subi	r28, 0x1A	; 26
   1c046:	d2 40       	sbci	r29, 0x02	; 2
   1c048:	a4 01       	movw	r20, r8
   1c04a:	61 e0       	ldi	r22, 0x01	; 1
   1c04c:	70 e0       	ldi	r23, 0x00	; 0
   1c04e:	ce 01       	movw	r24, r28
   1c050:	01 96       	adiw	r24, 0x01	; 1
   1c052:	0e 94 38 80 	call	0x10070	; 0x10070 <fwrite>
   1c056:	8c 01       	movw	r16, r24
        if(size < wind)
   1c058:	88 15       	cp	r24, r8
   1c05a:	99 05       	cpc	r25, r9
   1c05c:	84 f4       	brge	.+32     	; 0x1c07e <lif_extract_e010_as_ascii+0x52e>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1c05e:	80 e3       	ldi	r24, 0x30	; 48
   1c060:	96 e3       	ldi	r25, 0x36	; 54
   1c062:	1f 92       	push	r1
   1c064:	9f 93       	push	r25
   1c066:	8f 93       	push	r24
   1c068:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1c06c:	0f 90       	pop	r0
   1c06e:	0f 90       	pop	r0
   1c070:	0f 90       	pop	r0
            status = 0;
   1c072:	cb 5e       	subi	r28, 0xEB	; 235
   1c074:	dd 4f       	sbci	r29, 0xFD	; 253
   1c076:	18 82       	st	Y, r1
   1c078:	c5 51       	subi	r28, 0x15	; 21
   1c07a:	d2 40       	sbci	r29, 0x02	; 2
   1c07c:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1c07e:	c8 01       	movw	r24, r16
   1c080:	01 2e       	mov	r0, r17
   1c082:	00 0c       	add	r0, r0
   1c084:	aa 0b       	sbc	r26, r26
   1c086:	bb 0b       	sbc	r27, r27
   1c088:	48 0e       	add	r4, r24
   1c08a:	59 1e       	adc	r5, r25
   1c08c:	6a 1e       	adc	r6, r26
   1c08e:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1c090:	c6 5e       	subi	r28, 0xE6	; 230
   1c092:	dd 4f       	sbci	r29, 0xFD	; 253
   1c094:	88 81       	ld	r24, Y
   1c096:	99 81       	ldd	r25, Y+1	; 0x01
   1c098:	ca 51       	subi	r28, 0x1A	; 26
   1c09a:	d2 40       	sbci	r29, 0x02	; 2
   1c09c:	0e 94 ba 80 	call	0x10174	; 0x10174 <fclose>
    if(t)
   1c0a0:	c3 5e       	subi	r28, 0xE3	; 227
   1c0a2:	dd 4f       	sbci	r29, 0xFD	; 253
   1c0a4:	88 81       	ld	r24, Y
   1c0a6:	99 81       	ldd	r25, Y+1	; 0x01
   1c0a8:	aa 81       	ldd	r26, Y+2	; 0x02
   1c0aa:	bb 81       	ldd	r27, Y+3	; 0x03
   1c0ac:	cd 51       	subi	r28, 0x1D	; 29
   1c0ae:	d2 40       	sbci	r29, 0x02	; 2
   1c0b0:	00 97       	sbiw	r24, 0x00	; 0
   1c0b2:	a1 05       	cpc	r26, r1
   1c0b4:	b1 05       	cpc	r27, r1
   1c0b6:	d9 f0       	breq	.+54     	; 0x1c0ee <lif_extract_e010_as_ascii+0x59e>
    {
        struct utimbuf times;
        times.modtime = t;
   1c0b8:	c3 5f       	subi	r28, 0xF3	; 243
   1c0ba:	dd 4f       	sbci	r29, 0xFD	; 253
   1c0bc:	88 83       	st	Y, r24
   1c0be:	99 83       	std	Y+1, r25	; 0x01
   1c0c0:	aa 83       	std	Y+2, r26	; 0x02
   1c0c2:	bb 83       	std	Y+3, r27	; 0x03
   1c0c4:	cd 50       	subi	r28, 0x0D	; 13
   1c0c6:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1c0c8:	c7 5f       	subi	r28, 0xF7	; 247
   1c0ca:	dd 4f       	sbci	r29, 0xFD	; 253
   1c0cc:	88 83       	st	Y, r24
   1c0ce:	99 83       	std	Y+1, r25	; 0x01
   1c0d0:	aa 83       	std	Y+2, r26	; 0x02
   1c0d2:	bb 83       	std	Y+3, r27	; 0x03
   1c0d4:	c9 50       	subi	r28, 0x09	; 9
   1c0d6:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1c0d8:	be 01       	movw	r22, r28
   1c0da:	67 5f       	subi	r22, 0xF7	; 247
   1c0dc:	7d 4f       	sbci	r23, 0xFD	; 253
   1c0de:	c4 5e       	subi	r28, 0xE4	; 228
   1c0e0:	dd 4f       	sbci	r29, 0xFD	; 253
   1c0e2:	88 81       	ld	r24, Y
   1c0e4:	cc 51       	subi	r28, 0x1C	; 28
   1c0e6:	d2 40       	sbci	r29, 0x02	; 2
   1c0e8:	9e 2d       	mov	r25, r14
   1c0ea:	0e 94 f8 7d 	call	0xfbf0	; 0xfbf0 <utime>
    }
    sync();
   1c0ee:	0e 94 b5 7f 	call	0xff6a	; 0xff6a <sync>
    printf("Wrote: %8ld\n", bytes);
   1c0f2:	7f 92       	push	r7
   1c0f4:	6f 92       	push	r6
   1c0f6:	5f 92       	push	r5
   1c0f8:	4f 92       	push	r4
   1c0fa:	83 e2       	ldi	r24, 0x23	; 35
   1c0fc:	96 e3       	ldi	r25, 0x36	; 54
   1c0fe:	1f 92       	push	r1
   1c100:	9f 93       	push	r25
   1c102:	8f 93       	push	r24
   1c104:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    return(status);
   1c108:	0f b6       	in	r0, 0x3f	; 63
   1c10a:	f8 94       	cli
   1c10c:	de bf       	out	0x3e, r29	; 62
   1c10e:	0f be       	out	0x3f, r0	; 63
   1c110:	cd bf       	out	0x3d, r28	; 61
   1c112:	cb 5e       	subi	r28, 0xEB	; 235
   1c114:	dd 4f       	sbci	r29, 0xFD	; 253
   1c116:	88 81       	ld	r24, Y
   1c118:	c5 51       	subi	r28, 0x15	; 21
   1c11a:	d2 40       	sbci	r29, 0x02	; 2
   1c11c:	9f 2d       	mov	r25, r15
}
   1c11e:	c4 5d       	subi	r28, 0xD4	; 212
   1c120:	dd 4f       	sbci	r29, 0xFD	; 253
   1c122:	e2 e1       	ldi	r30, 0x12	; 18
   1c124:	0c 94 ab e9 	jmp	0x1d356	; 0x1d356 <__epilogue_restores__>

0001c128 <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1c128:	ad e0       	ldi	r26, 0x0D	; 13
   1c12a:	b1 e0       	ldi	r27, 0x01	; 1
   1c12c:	ea e9       	ldi	r30, 0x9A	; 154
   1c12e:	f0 ee       	ldi	r31, 0xE0	; 224
   1c130:	0c 94 8f e9 	jmp	0x1d31e	; 0x1d31e <__prologue_saves__>
   1c134:	f8 2e       	mov	r15, r24
   1c136:	e9 2e       	mov	r14, r25
   1c138:	16 2f       	mov	r17, r22
   1c13a:	07 2f       	mov	r16, r23
   1c13c:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1c13e:	60 eb       	ldi	r22, 0xB0	; 176
   1c140:	77 e0       	ldi	r23, 0x07	; 7
   1c142:	0e 94 86 d7 	call	0x1af0c	; 0x1af0c <lif_open_volume>
   1c146:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1c148:	00 97       	sbiw	r24, 0x00	; 0
   1c14a:	51 f4       	brne	.+20     	; 0x1c160 <lif_extract_lif_as_lif+0x38>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1c14c:	ef 92       	push	r14
   1c14e:	ff 92       	push	r15
   1c150:	8b e0       	ldi	r24, 0x0B	; 11
   1c152:	96 e3       	ldi	r25, 0x36	; 54
   1c154:	1f 92       	push	r1
   1c156:	9f 93       	push	r25
   1c158:	8f 93       	push	r24
   1c15a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1c15e:	11 c0       	rjmp	.+34     	; 0x1c182 <lif_extract_lif_as_lif+0x5a>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1c160:	61 2f       	mov	r22, r17
   1c162:	70 2f       	mov	r23, r16
   1c164:	38 d9       	rcall	.-3472   	; 0x1b3d6 <lif_find_file>
    if(index == -1)
   1c166:	01 96       	adiw	r24, 0x01	; 1
   1c168:	a1 f4       	brne	.+40     	; 0x1c192 <lif_extract_lif_as_lif+0x6a>
    {
        printf("File not found:%s\n", lifname);
   1c16a:	0f 93       	push	r16
   1c16c:	1f 93       	push	r17
   1c16e:	88 ef       	ldi	r24, 0xF8	; 248
   1c170:	95 e3       	ldi	r25, 0x35	; 53
   1c172:	1f 92       	push	r1
   1c174:	9f 93       	push	r25
   1c176:	8f 93       	push	r24
   1c178:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c17c:	c4 01       	movw	r24, r8
   1c17e:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1c182:	0f 90       	pop	r0
   1c184:	0f 90       	pop	r0
   1c186:	0f 90       	pop	r0
   1c188:	0f 90       	pop	r0
   1c18a:	0f 90       	pop	r0
   1c18c:	00 e0       	ldi	r16, 0x00	; 0
   1c18e:	10 e0       	ldi	r17, 0x00	; 0
   1c190:	0c c1       	rjmp	.+536    	; 0x1c3aa <lif_extract_lif_as_lif+0x282>
    }

    sectors = LIF->DIR.FileSectors;
   1c192:	a4 01       	movw	r20, r8
   1c194:	40 5a       	subi	r20, 0xA0	; 160
   1c196:	5f 4f       	sbci	r21, 0xFF	; 255
   1c198:	c4 5f       	subi	r28, 0xF4	; 244
   1c19a:	de 4f       	sbci	r29, 0xFE	; 254
   1c19c:	59 83       	std	Y+1, r21	; 0x01
   1c19e:	48 83       	st	Y, r20
   1c1a0:	cc 50       	subi	r28, 0x0C	; 12
   1c1a2:	d1 40       	sbci	r29, 0x01	; 1

    //Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1c1a4:	da 01       	movw	r26, r20
   1c1a6:	ad 90       	ld	r10, X+
   1c1a8:	bc 90       	ld	r11, X
   1c1aa:	0b 2c       	mov	r0, r11
   1c1ac:	00 0c       	add	r0, r0
   1c1ae:	cc 08       	sbc	r12, r12
   1c1b0:	dd 08       	sbc	r13, r13
   1c1b2:	e1 2c       	mov	r14, r1
   1c1b4:	f1 2c       	mov	r15, r1
   1c1b6:	87 01       	movw	r16, r14
   1c1b8:	e3 94       	inc	r14
   1c1ba:	21 e0       	ldi	r18, 0x01	; 1
   1c1bc:	30 e0       	ldi	r19, 0x00	; 0
   1c1be:	40 e0       	ldi	r20, 0x00	; 0
   1c1c0:	50 e0       	ldi	r21, 0x00	; 0
   1c1c2:	6b e9       	ldi	r22, 0x9B	; 155
   1c1c4:	76 e1       	ldi	r23, 0x16	; 22
   1c1c6:	c3 01       	movw	r24, r6
   1c1c8:	0e 94 48 d3 	call	0x1a690	; 0x1a690 <lif_create_volume>
   1c1cc:	5c 01       	movw	r10, r24
    if(ULIF == NULL)
   1c1ce:	89 2b       	or	r24, r25
   1c1d0:	11 f4       	brne	.+4      	; 0x1c1d6 <lif_extract_lif_as_lif+0xae>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c1d2:	c4 01       	movw	r24, r8
   1c1d4:	cf c0       	rjmp	.+414    	; 0x1c374 <lif_extract_lif_as_lif+0x24c>
    }

    // Only the start sector changes

    // Copy directory record
    ULIF->DIR = LIF->DIR;
   1c1d6:	81 e2       	ldi	r24, 0x21	; 33
   1c1d8:	f4 01       	movw	r30, r8
   1c1da:	e1 5b       	subi	r30, 0xB1	; 177
   1c1dc:	ff 4f       	sbci	r31, 0xFF	; 255
   1c1de:	d5 01       	movw	r26, r10
   1c1e0:	a1 5b       	subi	r26, 0xB1	; 177
   1c1e2:	bf 4f       	sbci	r27, 0xFF	; 255
   1c1e4:	01 90       	ld	r0, Z+
   1c1e6:	0d 92       	st	X+, r0
   1c1e8:	8a 95       	dec	r24
   1c1ea:	e1 f7       	brne	.-8      	; 0x1c1e4 <lif_extract_lif_as_lif+0xbc>

    ULIF->DIR.FileStartSector = 2;
   1c1ec:	82 e0       	ldi	r24, 0x02	; 2
   1c1ee:	90 e0       	ldi	r25, 0x00	; 0
   1c1f0:	a0 e0       	ldi	r26, 0x00	; 0
   1c1f2:	b0 e0       	ldi	r27, 0x00	; 0
   1c1f4:	f5 01       	movw	r30, r10
   1c1f6:	e4 5a       	subi	r30, 0xA4	; 164
   1c1f8:	ff 4f       	sbci	r31, 0xFF	; 255
   1c1fa:	80 83       	st	Z, r24
   1c1fc:	91 83       	std	Z+1, r25	; 0x01
   1c1fe:	a2 83       	std	Z+2, r26	; 0x02
   1c200:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1c202:	c4 5f       	subi	r28, 0xF4	; 244
   1c204:	de 4f       	sbci	r29, 0xFE	; 254
   1c206:	e8 81       	ld	r30, Y
   1c208:	f9 81       	ldd	r31, Y+1	; 0x01
   1c20a:	cc 50       	subi	r28, 0x0C	; 12
   1c20c:	d1 40       	sbci	r29, 0x01	; 1
   1c20e:	80 81       	ld	r24, Z
   1c210:	91 81       	ldd	r25, Z+1	; 0x01
   1c212:	a2 81       	ldd	r26, Z+2	; 0x02
   1c214:	b3 81       	ldd	r27, Z+3	; 0x03
   1c216:	f5 01       	movw	r30, r10
   1c218:	80 8b       	std	Z+16, r24	; 0x10
   1c21a:	91 8b       	std	Z+17, r25	; 0x11
   1c21c:	a2 8b       	std	Z+18, r26	; 0x12
   1c21e:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1c220:	60 e0       	ldi	r22, 0x00	; 0
   1c222:	70 e0       	ldi	r23, 0x00	; 0
   1c224:	c5 01       	movw	r24, r10
   1c226:	0e 94 cc d1 	call	0x1a398	; 0x1a398 <lif_writedirindex>
   1c22a:	8c 01       	movw	r16, r24
   1c22c:	89 2b       	or	r24, r25
   1c22e:	41 f0       	breq	.+16     	; 0x1c240 <lif_extract_lif_as_lif+0x118>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1c230:	61 e0       	ldi	r22, 0x01	; 1
   1c232:	70 e0       	ldi	r23, 0x00	; 0
   1c234:	c5 01       	movw	r24, r10
   1c236:	0e 94 28 d2 	call	0x1a450	; 0x1a450 <lif_writedirEOF>
   1c23a:	8c 01       	movw	r16, r24
   1c23c:	89 2b       	or	r24, r25
   1c23e:	39 f4       	brne	.+14     	; 0x1c24e <lif_extract_lif_as_lif+0x126>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c240:	c4 01       	movw	r24, r8
   1c242:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>
   1c246:	c5 01       	movw	r24, r10
   1c248:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1c24c:	ae c0       	rjmp	.+348    	; 0x1c3aa <lif_extract_lif_as_lif+0x282>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1c24e:	d5 01       	movw	r26, r10
   1c250:	1c 96       	adiw	r26, 0x0c	; 12
   1c252:	cd 90       	ld	r12, X+
   1c254:	dd 90       	ld	r13, X+
   1c256:	ed 90       	ld	r14, X+
   1c258:	fc 90       	ld	r15, X
   1c25a:	1f 97       	sbiw	r26, 0x0f	; 15
   1c25c:	fe 2c       	mov	r15, r14
   1c25e:	ed 2c       	mov	r14, r13
   1c260:	dc 2c       	mov	r13, r12
   1c262:	cc 24       	eor	r12, r12

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1c264:	f4 01       	movw	r30, r8
   1c266:	e4 5a       	subi	r30, 0xA4	; 164
   1c268:	ff 4f       	sbci	r31, 0xFF	; 255
   1c26a:	80 81       	ld	r24, Z
   1c26c:	91 81       	ldd	r25, Z+1	; 0x01
   1c26e:	a2 81       	ldd	r26, Z+2	; 0x02
   1c270:	b3 81       	ldd	r27, Z+3	; 0x03
   1c272:	22 27       	eor	r18, r18
   1c274:	38 2f       	mov	r19, r24
   1c276:	49 2f       	mov	r20, r25
   1c278:	5a 2f       	mov	r21, r26
   1c27a:	cb 5f       	subi	r28, 0xFB	; 251
   1c27c:	de 4f       	sbci	r29, 0xFE	; 254
   1c27e:	28 83       	st	Y, r18
   1c280:	39 83       	std	Y+1, r19	; 0x01
   1c282:	4a 83       	std	Y+2, r20	; 0x02
   1c284:	5b 83       	std	Y+3, r21	; 0x03
   1c286:	c5 50       	subi	r28, 0x05	; 5
   1c288:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c28a:	21 2c       	mov	r2, r1
   1c28c:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("Wrote: %8ld\r", bytes);
   1c28e:	8b ee       	ldi	r24, 0xEB	; 235
   1c290:	95 e3       	ldi	r25, 0x35	; 53
   1c292:	9c 01       	movw	r18, r24
   1c294:	40 e0       	ldi	r20, 0x00	; 0
   1c296:	c7 5f       	subi	r28, 0xF7	; 247
   1c298:	de 4f       	sbci	r29, 0xFE	; 254
   1c29a:	28 83       	st	Y, r18
   1c29c:	39 83       	std	Y+1, r19	; 0x01
   1c29e:	4a 83       	std	Y+2, r20	; 0x02
   1c2a0:	c9 50       	subi	r28, 0x09	; 9
   1c2a2:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c2a4:	41 c0       	rjmp	.+130    	; 0x1c328 <lif_extract_lif_as_lif+0x200>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1c2a6:	00 e0       	ldi	r16, 0x00	; 0
   1c2a8:	11 e0       	ldi	r17, 0x01	; 1
   1c2aa:	a7 01       	movw	r20, r14
   1c2ac:	96 01       	movw	r18, r12
   1c2ae:	be 01       	movw	r22, r28
   1c2b0:	6f 5f       	subi	r22, 0xFF	; 255
   1c2b2:	7f 4f       	sbci	r23, 0xFF	; 255
   1c2b4:	c5 01       	movw	r24, r10
   1c2b6:	0e 94 a3 c8 	call	0x19146	; 0x19146 <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1c2ba:	05 2c       	mov	r0, r5
   1c2bc:	00 0c       	add	r0, r0
   1c2be:	66 08       	sbc	r6, r6
   1c2c0:	77 08       	sbc	r7, r7
   1c2c2:	c4 0c       	add	r12, r4
   1c2c4:	d5 1c       	adc	r13, r5
   1c2c6:	e6 1c       	adc	r14, r6
   1c2c8:	f7 1c       	adc	r15, r7
        offset += size;
   1c2ca:	cb 5f       	subi	r28, 0xFB	; 251
   1c2cc:	de 4f       	sbci	r29, 0xFE	; 254
   1c2ce:	88 81       	ld	r24, Y
   1c2d0:	99 81       	ldd	r25, Y+1	; 0x01
   1c2d2:	aa 81       	ldd	r26, Y+2	; 0x02
   1c2d4:	bb 81       	ldd	r27, Y+3	; 0x03
   1c2d6:	c5 50       	subi	r28, 0x05	; 5
   1c2d8:	d1 40       	sbci	r29, 0x01	; 1
   1c2da:	84 0d       	add	r24, r4
   1c2dc:	95 1d       	adc	r25, r5
   1c2de:	a6 1d       	adc	r26, r6
   1c2e0:	b7 1d       	adc	r27, r7
   1c2e2:	cb 5f       	subi	r28, 0xFB	; 251
   1c2e4:	de 4f       	sbci	r29, 0xFE	; 254
   1c2e6:	88 83       	st	Y, r24
   1c2e8:	99 83       	std	Y+1, r25	; 0x01
   1c2ea:	aa 83       	std	Y+2, r26	; 0x02
   1c2ec:	bb 83       	std	Y+3, r27	; 0x03
   1c2ee:	c5 50       	subi	r28, 0x05	; 5
   1c2f0:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("Wrote: %8ld\r", bytes);
   1c2f2:	ff 92       	push	r15
   1c2f4:	ef 92       	push	r14
   1c2f6:	df 92       	push	r13
   1c2f8:	cf 92       	push	r12
   1c2fa:	1f 92       	push	r1
   1c2fc:	c6 5f       	subi	r28, 0xF6	; 246
   1c2fe:	de 4f       	sbci	r29, 0xFE	; 254
   1c300:	98 81       	ld	r25, Y
   1c302:	ca 50       	subi	r28, 0x0A	; 10
   1c304:	d1 40       	sbci	r29, 0x01	; 1
   1c306:	9f 93       	push	r25
   1c308:	c7 5f       	subi	r28, 0xF7	; 247
   1c30a:	de 4f       	sbci	r29, 0xFE	; 254
   1c30c:	a8 81       	ld	r26, Y
   1c30e:	c9 50       	subi	r28, 0x09	; 9
   1c310:	d1 40       	sbci	r29, 0x01	; 1
   1c312:	af 93       	push	r26
   1c314:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c318:	bf ef       	ldi	r27, 0xFF	; 255
   1c31a:	2b 1a       	sub	r2, r27
   1c31c:	3b 0a       	sbc	r3, r27
   1c31e:	0f b6       	in	r0, 0x3f	; 63
   1c320:	f8 94       	cli
   1c322:	de bf       	out	0x3e, r29	; 62
   1c324:	0f be       	out	0x3f, r0	; 63
   1c326:	cd bf       	out	0x3d, r28	; 61
   1c328:	c4 5f       	subi	r28, 0xF4	; 244
   1c32a:	de 4f       	sbci	r29, 0xFE	; 254
   1c32c:	a8 81       	ld	r26, Y
   1c32e:	b9 81       	ldd	r27, Y+1	; 0x01
   1c330:	cc 50       	subi	r28, 0x0C	; 12
   1c332:	d1 40       	sbci	r29, 0x01	; 1
   1c334:	8d 91       	ld	r24, X+
   1c336:	9c 91       	ld	r25, X
   1c338:	28 16       	cp	r2, r24
   1c33a:	39 06       	cpc	r3, r25
   1c33c:	f4 f4       	brge	.+60     	; 0x1c37a <lif_extract_lif_as_lif+0x252>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1c33e:	00 e0       	ldi	r16, 0x00	; 0
   1c340:	11 e0       	ldi	r17, 0x01	; 1
   1c342:	cb 5f       	subi	r28, 0xFB	; 251
   1c344:	de 4f       	sbci	r29, 0xFE	; 254
   1c346:	28 81       	ld	r18, Y
   1c348:	39 81       	ldd	r19, Y+1	; 0x01
   1c34a:	4a 81       	ldd	r20, Y+2	; 0x02
   1c34c:	5b 81       	ldd	r21, Y+3	; 0x03
   1c34e:	c5 50       	subi	r28, 0x05	; 5
   1c350:	d1 40       	sbci	r29, 0x01	; 1
   1c352:	be 01       	movw	r22, r28
   1c354:	6f 5f       	subi	r22, 0xFF	; 255
   1c356:	7f 4f       	sbci	r23, 0xFF	; 255
   1c358:	c4 01       	movw	r24, r8
   1c35a:	0e 94 4a c8 	call	0x19094	; 0x19094 <lif_read>
   1c35e:	2b 01       	movw	r4, r22
   1c360:	3c 01       	movw	r6, r24
        if(size < LIF_SECTOR_SIZE)
   1c362:	6f 3f       	cpi	r22, 0xFF	; 255
   1c364:	71 05       	cpc	r23, r1
   1c366:	11 f0       	breq	.+4      	; 0x1c36c <lif_extract_lif_as_lif+0x244>
   1c368:	0c f0       	brlt	.+2      	; 0x1c36c <lif_extract_lif_as_lif+0x244>
   1c36a:	9d cf       	rjmp	.-198    	; 0x1c2a6 <lif_extract_lif_as_lif+0x17e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c36c:	c4 01       	movw	r24, r8
   1c36e:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>
   1c372:	c5 01       	movw	r24, r10
   1c374:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>
   1c378:	09 cf       	rjmp	.-494    	; 0x1c18c <lif_extract_lif_as_lif+0x64>
   1c37a:	c4 01       	movw	r24, r8
   1c37c:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>
   1c380:	c5 01       	movw	r24, r10
   1c382:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>
        uoffset += size;
        printf("Wrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("Wrote: %8ld\n", bytes);
   1c386:	ff 92       	push	r15
   1c388:	ef 92       	push	r14
   1c38a:	df 92       	push	r13
   1c38c:	cf 92       	push	r12
   1c38e:	8e ed       	ldi	r24, 0xDE	; 222
   1c390:	95 e3       	ldi	r25, 0x35	; 53
   1c392:	1f 92       	push	r1
   1c394:	9f 93       	push	r25
   1c396:	8f 93       	push	r24
   1c398:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    return(1);
   1c39c:	0f b6       	in	r0, 0x3f	; 63
   1c39e:	f8 94       	cli
   1c3a0:	de bf       	out	0x3e, r29	; 62
   1c3a2:	0f be       	out	0x3f, r0	; 63
   1c3a4:	cd bf       	out	0x3d, r28	; 61
   1c3a6:	01 e0       	ldi	r16, 0x01	; 1
   1c3a8:	10 e0       	ldi	r17, 0x00	; 0
}
   1c3aa:	c8 01       	movw	r24, r16
   1c3ac:	c3 5f       	subi	r28, 0xF3	; 243
   1c3ae:	de 4f       	sbci	r29, 0xFE	; 254
   1c3b0:	e2 e1       	ldi	r30, 0x12	; 18
   1c3b2:	d1 c7       	rjmp	.+4002   	; 0x1d356 <__epilogue_restores__>

0001c3b4 <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from 
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1c3b4:	2f 92       	push	r2
   1c3b6:	3f 92       	push	r3
   1c3b8:	4f 92       	push	r4
   1c3ba:	5f 92       	push	r5
   1c3bc:	6f 92       	push	r6
   1c3be:	8f 92       	push	r8
   1c3c0:	9f 92       	push	r9
   1c3c2:	af 92       	push	r10
   1c3c4:	bf 92       	push	r11
   1c3c6:	cf 92       	push	r12
   1c3c8:	df 92       	push	r13
   1c3ca:	ef 92       	push	r14
   1c3cc:	ff 92       	push	r15
   1c3ce:	0f 93       	push	r16
   1c3d0:	1f 93       	push	r17
   1c3d2:	cf 93       	push	r28
   1c3d4:	df 93       	push	r29
   1c3d6:	cd b7       	in	r28, 0x3d	; 61
   1c3d8:	de b7       	in	r29, 0x3e	; 62
   1c3da:	c4 51       	subi	r28, 0x14	; 20
   1c3dc:	d1 40       	sbci	r29, 0x01	; 1
   1c3de:	0f b6       	in	r0, 0x3f	; 63
   1c3e0:	f8 94       	cli
   1c3e2:	de bf       	out	0x3e, r29	; 62
   1c3e4:	0f be       	out	0x3f, r0	; 63
   1c3e6:	cd bf       	out	0x3d, r28	; 61
   1c3e8:	7c 01       	movw	r14, r24
   1c3ea:	5b 01       	movw	r10, r22
   1c3ec:	6a 01       	movw	r12, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1c3ee:	dc 01       	movw	r26, r24
   1c3f0:	8c 91       	ld	r24, X
   1c3f2:	81 11       	cpse	r24, r1
   1c3f4:	03 c0       	rjmp	.+6      	; 0x1c3fc <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1c3f6:	8e eb       	ldi	r24, 0xBE	; 190
   1c3f8:	95 e3       	ldi	r25, 0x35	; 53
   1c3fa:	06 c0       	rjmp	.+12     	; 0x1c408 <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1c3fc:	fb 01       	movw	r30, r22
   1c3fe:	80 81       	ld	r24, Z
   1c400:	81 11       	cpse	r24, r1
   1c402:	0b c0       	rjmp	.+22     	; 0x1c41a <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1c404:	83 ea       	ldi	r24, 0xA3	; 163
   1c406:	95 e3       	ldi	r25, 0x35	; 53
   1c408:	1f 92       	push	r1
   1c40a:	9f 93       	push	r25
   1c40c:	8f 93       	push	r24
   1c40e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return(-1);
   1c412:	0f 90       	pop	r0
   1c414:	0f 90       	pop	r0
   1c416:	0f 90       	pop	r0
   1c418:	32 c1       	rjmp	.+612    	; 0x1c67e <lif_add_lif_file+0x2ca>
    }
    if(!*userfile)
   1c41a:	da 01       	movw	r26, r20
   1c41c:	8c 91       	ld	r24, X
   1c41e:	81 11       	cpse	r24, r1
   1c420:	03 c0       	rjmp	.+6      	; 0x1c428 <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1c422:	87 e8       	ldi	r24, 0x87	; 135
   1c424:	95 e3       	ldi	r25, 0x35	; 53
   1c426:	f0 cf       	rjmp	.-32     	; 0x1c408 <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & 0x400)
   1c428:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1c42c:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1c430:	92 ff       	sbrs	r25, 2
   1c432:	12 c0       	rjmp	.+36     	; 0x1c458 <lif_add_lif_file+0xa4>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1c434:	df 92       	push	r13
   1c436:	4f 93       	push	r20
   1c438:	bf 92       	push	r11
   1c43a:	6f 93       	push	r22
   1c43c:	ff 92       	push	r15
   1c43e:	ef 92       	push	r14
   1c440:	88 e5       	ldi	r24, 0x58	; 88
   1c442:	95 e3       	ldi	r25, 0x35	; 53
   1c444:	1f 92       	push	r1
   1c446:	9f 93       	push	r25
   1c448:	8f 93       	push	r24
   1c44a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1c44e:	0f b6       	in	r0, 0x3f	; 63
   1c450:	f8 94       	cli
   1c452:	de bf       	out	0x3e, r29	; 62
   1c454:	0f be       	out	0x3f, r0	; 63
   1c456:	cd bf       	out	0x3d, r28	; 61
            lifimagename, lifname, userfile);

    // open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1c458:	6f ef       	ldi	r22, 0xFF	; 255
   1c45a:	78 e0       	ldi	r23, 0x08	; 8
   1c45c:	c6 01       	movw	r24, r12
   1c45e:	0e 94 86 d7 	call	0x1af0c	; 0x1af0c <lif_open_volume>
   1c462:	4c 01       	movw	r8, r24
    if(ULIF == NULL)
   1c464:	00 97       	sbiw	r24, 0x00	; 0
   1c466:	09 f4       	brne	.+2      	; 0x1c46a <lif_add_lif_file+0xb6>
   1c468:	0a c1       	rjmp	.+532    	; 0x1c67e <lif_add_lif_file+0x2ca>
        return(-1); 

    // find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1c46a:	b5 01       	movw	r22, r10
   1c46c:	0e 94 eb d9 	call	0x1b3d6	; 0x1b3d6 <lif_find_file>
    if(index == -1)
   1c470:	01 96       	adiw	r24, 0x01	; 1
   1c472:	b1 f4       	brne	.+44     	; 0x1c4a0 <lif_add_lif_file+0xec>
    {
        printf("File not found:%s\n", lifname);
   1c474:	bf 92       	push	r11
   1c476:	af 92       	push	r10
   1c478:	85 e4       	ldi	r24, 0x45	; 69
   1c47a:	95 e3       	ldi	r25, 0x35	; 53
   1c47c:	1f 92       	push	r1
   1c47e:	9f 93       	push	r25
   1c480:	8f 93       	push	r24
   1c482:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c486:	c4 01       	movw	r24, r8
   1c488:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1c48c:	0f 90       	pop	r0
   1c48e:	0f 90       	pop	r0
   1c490:	0f 90       	pop	r0
   1c492:	0f 90       	pop	r0
   1c494:	0f 90       	pop	r0
   1c496:	60 e0       	ldi	r22, 0x00	; 0
   1c498:	70 e0       	ldi	r23, 0x00	; 0
   1c49a:	80 e0       	ldi	r24, 0x00	; 0
   1c49c:	90 e0       	ldi	r25, 0x00	; 0
   1c49e:	09 c1       	rjmp	.+530    	; 0x1c6b2 <lif_add_lif_file+0x2fe>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1c4a0:	6f ef       	ldi	r22, 0xFF	; 255
   1c4a2:	78 e0       	ldi	r23, 0x08	; 8
   1c4a4:	c7 01       	movw	r24, r14
   1c4a6:	0e 94 86 d7 	call	0x1af0c	; 0x1af0c <lif_open_volume>
   1c4aa:	5c 01       	movw	r10, r24
    if(LIF == NULL)
   1c4ac:	00 97       	sbiw	r24, 0x00	; 0
   1c4ae:	09 f4       	brne	.+2      	; 0x1c4b2 <lif_add_lif_file+0xfe>
   1c4b0:	e6 c0       	rjmp	.+460    	; 0x1c67e <lif_add_lif_file+0x2ca>
        return(-1); 

    // Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1c4b2:	f4 01       	movw	r30, r8
   1c4b4:	e0 5a       	subi	r30, 0xA0	; 160
   1c4b6:	ff 4f       	sbci	r31, 0xFF	; 255
   1c4b8:	40 81       	ld	r20, Z
   1c4ba:	51 81       	ldd	r21, Z+1	; 0x01
   1c4bc:	62 81       	ldd	r22, Z+2	; 0x02
   1c4be:	73 81       	ldd	r23, Z+3	; 0x03
   1c4c0:	0e 94 21 d6 	call	0x1ac42	; 0x1ac42 <lif_newdir>
   1c4c4:	c3 5f       	subi	r28, 0xF3	; 243
   1c4c6:	de 4f       	sbci	r29, 0xFE	; 254
   1c4c8:	99 83       	std	Y+1, r25	; 0x01
   1c4ca:	88 83       	st	Y, r24
   1c4cc:	cd 50       	subi	r28, 0x0D	; 13
   1c4ce:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1c4d0:	01 96       	adiw	r24, 0x01	; 1
   1c4d2:	b9 f4       	brne	.+46     	; 0x1c502 <lif_add_lif_file+0x14e>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1c4d4:	df 92       	push	r13
   1c4d6:	cf 92       	push	r12
   1c4d8:	ff 92       	push	r15
   1c4da:	ef 92       	push	r14
   1c4dc:	85 e1       	ldi	r24, 0x15	; 21
   1c4de:	95 e3       	ldi	r25, 0x35	; 53
   1c4e0:	1f 92       	push	r1
   1c4e2:	9f 93       	push	r25
   1c4e4:	8f 93       	push	r24
   1c4e6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c4ea:	c5 01       	movw	r24, r10
   1c4ec:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>
   1c4f0:	c4 01       	movw	r24, r8
   1c4f2:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
            lifimagename, userfile);
            lif_closedir(LIF);
            lif_closedir(ULIF);
        return(-1);
   1c4f6:	0f b6       	in	r0, 0x3f	; 63
   1c4f8:	f8 94       	cli
   1c4fa:	de bf       	out	0x3e, r29	; 62
   1c4fc:	0f be       	out	0x3f, r0	; 63
   1c4fe:	cd bf       	out	0x3d, r28	; 61
   1c500:	be c0       	rjmp	.+380    	; 0x1c67e <lif_add_lif_file+0x2ca>
    }

    // Save start sector
    start = LIF->DIR.FileStartSector;
   1c502:	c5 01       	movw	r24, r10
   1c504:	84 5a       	subi	r24, 0xA4	; 164
   1c506:	9f 4f       	sbci	r25, 0xFF	; 255
   1c508:	dc 01       	movw	r26, r24
   1c50a:	4d 91       	ld	r20, X+
   1c50c:	5d 91       	ld	r21, X+
   1c50e:	6d 91       	ld	r22, X+
   1c510:	7c 91       	ld	r23, X
   1c512:	13 97       	sbiw	r26, 0x03	; 3

    // Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1c514:	21 e2       	ldi	r18, 0x21	; 33
   1c516:	f4 01       	movw	r30, r8
   1c518:	e1 5b       	subi	r30, 0xB1	; 177
   1c51a:	ff 4f       	sbci	r31, 0xFF	; 255
   1c51c:	1d 97       	sbiw	r26, 0x0d	; 13
   1c51e:	01 90       	ld	r0, Z+
   1c520:	0d 92       	st	X+, r0
   1c522:	2a 95       	dec	r18
   1c524:	e1 f7       	brne	.-8      	; 0x1c51e <lif_add_lif_file+0x16a>

    // Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1c526:	fc 01       	movw	r30, r24
   1c528:	40 83       	st	Z, r20
   1c52a:	51 83       	std	Z+1, r21	; 0x01
   1c52c:	62 83       	std	Z+2, r22	; 0x02
   1c52e:	73 83       	std	Z+3, r23	; 0x03

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1c530:	b6 2f       	mov	r27, r22
   1c532:	a5 2f       	mov	r26, r21
   1c534:	94 2f       	mov	r25, r20
   1c536:	88 27       	eor	r24, r24
   1c538:	cb 5f       	subi	r28, 0xFB	; 251
   1c53a:	de 4f       	sbci	r29, 0xFE	; 254
   1c53c:	88 83       	st	Y, r24
   1c53e:	99 83       	std	Y+1, r25	; 0x01
   1c540:	aa 83       	std	Y+2, r26	; 0x02
   1c542:	bb 83       	std	Y+3, r27	; 0x03
   1c544:	c5 50       	subi	r28, 0x05	; 5
   1c546:	d1 40       	sbci	r29, 0x01	; 1
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1c548:	f4 01       	movw	r30, r8
   1c54a:	e4 5a       	subi	r30, 0xA4	; 164
   1c54c:	ff 4f       	sbci	r31, 0xFF	; 255
   1c54e:	80 81       	ld	r24, Z
   1c550:	91 81       	ldd	r25, Z+1	; 0x01
   1c552:	a2 81       	ldd	r26, Z+2	; 0x02
   1c554:	b3 81       	ldd	r27, Z+3	; 0x03
   1c556:	22 27       	eor	r18, r18
   1c558:	38 2f       	mov	r19, r24
   1c55a:	49 2f       	mov	r20, r25
   1c55c:	5a 2f       	mov	r21, r26
   1c55e:	c7 5f       	subi	r28, 0xF7	; 247
   1c560:	de 4f       	sbci	r29, 0xFE	; 254
   1c562:	28 83       	st	Y, r18
   1c564:	39 83       	std	Y+1, r19	; 0x01
   1c566:	4a 83       	std	Y+2, r20	; 0x02
   1c568:	5b 83       	std	Y+3, r21	; 0x03
   1c56a:	c9 50       	subi	r28, 0x09	; 9
   1c56c:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c56e:	21 2c       	mov	r2, r1
   1c570:	31 2c       	mov	r3, r1

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1c572:	c1 2c       	mov	r12, r1
   1c574:	d1 2c       	mov	r13, r1
   1c576:	76 01       	movw	r14, r12
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c578:	a5 01       	movw	r20, r10
   1c57a:	40 5a       	subi	r20, 0xA0	; 160
   1c57c:	5f 4f       	sbci	r21, 0xFF	; 255
   1c57e:	cd 5e       	subi	r28, 0xED	; 237
   1c580:	de 4f       	sbci	r29, 0xFE	; 254
   1c582:	59 83       	std	Y+1, r21	; 0x01
   1c584:	48 83       	st	Y, r20
   1c586:	c3 51       	subi	r28, 0x13	; 19
   1c588:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("Wrote: %8ld\r", bytes);
   1c58a:	88 e0       	ldi	r24, 0x08	; 8
   1c58c:	95 e3       	ldi	r25, 0x35	; 53
   1c58e:	2c 01       	movw	r4, r24
   1c590:	c7 5f       	subi	r28, 0xF7	; 247
   1c592:	de 4f       	sbci	r29, 0xFE	; 254
   1c594:	28 81       	ld	r18, Y
   1c596:	39 81       	ldd	r19, Y+1	; 0x01
   1c598:	4a 81       	ldd	r20, Y+2	; 0x02
   1c59a:	5b 81       	ldd	r21, Y+3	; 0x03
   1c59c:	c9 50       	subi	r28, 0x09	; 9
   1c59e:	d1 40       	sbci	r29, 0x01	; 1
   1c5a0:	2c 0d       	add	r18, r12
   1c5a2:	3d 1d       	adc	r19, r13
   1c5a4:	4e 1d       	adc	r20, r14
   1c5a6:	5f 1d       	adc	r21, r15
   1c5a8:	cb 5f       	subi	r28, 0xFB	; 251
   1c5aa:	de 4f       	sbci	r29, 0xFE	; 254
   1c5ac:	88 81       	ld	r24, Y
   1c5ae:	99 81       	ldd	r25, Y+1	; 0x01
   1c5b0:	aa 81       	ldd	r26, Y+2	; 0x02
   1c5b2:	bb 81       	ldd	r27, Y+3	; 0x03
   1c5b4:	c5 50       	subi	r28, 0x05	; 5
   1c5b6:	d1 40       	sbci	r29, 0x01	; 1
   1c5b8:	8c 0d       	add	r24, r12
   1c5ba:	9d 1d       	adc	r25, r13
   1c5bc:	ae 1d       	adc	r26, r14
   1c5be:	bf 1d       	adc	r27, r15
   1c5c0:	c1 5f       	subi	r28, 0xF1	; 241
   1c5c2:	de 4f       	sbci	r29, 0xFE	; 254
   1c5c4:	88 83       	st	Y, r24
   1c5c6:	99 83       	std	Y+1, r25	; 0x01
   1c5c8:	aa 83       	std	Y+2, r26	; 0x02
   1c5ca:	bb 83       	std	Y+3, r27	; 0x03
   1c5cc:	cf 50       	subi	r28, 0x0F	; 15
   1c5ce:	d1 40       	sbci	r29, 0x01	; 1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c5d0:	cd 5e       	subi	r28, 0xED	; 237
   1c5d2:	de 4f       	sbci	r29, 0xFE	; 254
   1c5d4:	a8 81       	ld	r26, Y
   1c5d6:	b9 81       	ldd	r27, Y+1	; 0x01
   1c5d8:	c3 51       	subi	r28, 0x13	; 19
   1c5da:	d1 40       	sbci	r29, 0x01	; 1
   1c5dc:	8d 91       	ld	r24, X+
   1c5de:	9c 91       	ld	r25, X
   1c5e0:	28 16       	cp	r2, r24
   1c5e2:	39 06       	cpc	r3, r25
   1c5e4:	dc f5       	brge	.+118    	; 0x1c65c <lif_add_lif_file+0x2a8>
    {
        // Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1c5e6:	00 e0       	ldi	r16, 0x00	; 0
   1c5e8:	11 e0       	ldi	r17, 0x01	; 1
   1c5ea:	be 01       	movw	r22, r28
   1c5ec:	6f 5f       	subi	r22, 0xFF	; 255
   1c5ee:	7f 4f       	sbci	r23, 0xFF	; 255
   1c5f0:	c4 01       	movw	r24, r8
   1c5f2:	0e 94 4a c8 	call	0x19094	; 0x19094 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1c5f6:	6f 3f       	cpi	r22, 0xFF	; 255
   1c5f8:	71 05       	cpc	r23, r1
   1c5fa:	a9 f0       	breq	.+42     	; 0x1c626 <lif_add_lif_file+0x272>
   1c5fc:	a4 f0       	brlt	.+40     	; 0x1c626 <lif_add_lif_file+0x272>
            lif_closedir(ULIF);
            return(-1);
        }

        // Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1c5fe:	00 e0       	ldi	r16, 0x00	; 0
   1c600:	11 e0       	ldi	r17, 0x01	; 1
   1c602:	c1 5f       	subi	r28, 0xF1	; 241
   1c604:	de 4f       	sbci	r29, 0xFE	; 254
   1c606:	28 81       	ld	r18, Y
   1c608:	39 81       	ldd	r19, Y+1	; 0x01
   1c60a:	4a 81       	ldd	r20, Y+2	; 0x02
   1c60c:	5b 81       	ldd	r21, Y+3	; 0x03
   1c60e:	cf 50       	subi	r28, 0x0F	; 15
   1c610:	d1 40       	sbci	r29, 0x01	; 1
   1c612:	be 01       	movw	r22, r28
   1c614:	6f 5f       	subi	r22, 0xFF	; 255
   1c616:	7f 4f       	sbci	r23, 0xFF	; 255
   1c618:	c5 01       	movw	r24, r10
   1c61a:	0e 94 a3 c8 	call	0x19146	; 0x19146 <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1c61e:	8f 3f       	cpi	r24, 0xFF	; 255
   1c620:	91 05       	cpc	r25, r1
   1c622:	09 f0       	breq	.+2      	; 0x1c626 <lif_add_lif_file+0x272>
   1c624:	2c f4       	brge	.+10     	; 0x1c630 <lif_add_lif_file+0x27c>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c626:	c5 01       	movw	r24, r10
   1c628:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>
   1c62c:	c4 01       	movw	r24, r8
   1c62e:	25 c0       	rjmp	.+74     	; 0x1c67a <lif_add_lif_file+0x2c6>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1c630:	5f ef       	ldi	r21, 0xFF	; 255
   1c632:	d5 1a       	sub	r13, r21
   1c634:	e5 0a       	sbc	r14, r21
   1c636:	f5 0a       	sbc	r15, r21
        printf("Wrote: %8ld\r", bytes);
   1c638:	ff 92       	push	r15
   1c63a:	ef 92       	push	r14
   1c63c:	df 92       	push	r13
   1c63e:	cf 92       	push	r12
   1c640:	1f 92       	push	r1
   1c642:	5f 92       	push	r5
   1c644:	4f 92       	push	r4
   1c646:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c64a:	8f ef       	ldi	r24, 0xFF	; 255
   1c64c:	28 1a       	sub	r2, r24
   1c64e:	38 0a       	sbc	r3, r24
   1c650:	0f b6       	in	r0, 0x3f	; 63
   1c652:	f8 94       	cli
   1c654:	de bf       	out	0x3e, r29	; 62
   1c656:	0f be       	out	0x3f, r0	; 63
   1c658:	cd bf       	out	0x3d, r28	; 61
   1c65a:	9a cf       	rjmp	.-204    	; 0x1c590 <lif_add_lif_file+0x1dc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c65c:	c4 01       	movw	r24, r8
   1c65e:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>
        printf("Wrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

    // Write directory record
    if( !lif_writedirindex(LIF,index))
   1c662:	c3 5f       	subi	r28, 0xF3	; 243
   1c664:	de 4f       	sbci	r29, 0xFE	; 254
   1c666:	68 81       	ld	r22, Y
   1c668:	79 81       	ldd	r23, Y+1	; 0x01
   1c66a:	cd 50       	subi	r28, 0x0D	; 13
   1c66c:	d1 40       	sbci	r29, 0x01	; 1
   1c66e:	c5 01       	movw	r24, r10
   1c670:	0e 94 cc d1 	call	0x1a398	; 0x1a398 <lif_writedirindex>
   1c674:	89 2b       	or	r24, r25
   1c676:	41 f4       	brne	.+16     	; 0x1c688 <lif_add_lif_file+0x2d4>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c678:	c5 01       	movw	r24, r10
   1c67a:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>

    // Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1c67e:	6f ef       	ldi	r22, 0xFF	; 255
   1c680:	7f ef       	ldi	r23, 0xFF	; 255
   1c682:	8f ef       	ldi	r24, 0xFF	; 255
   1c684:	9f ef       	ldi	r25, 0xFF	; 255
   1c686:	15 c0       	rjmp	.+42     	; 0x1c6b2 <lif_add_lif_file+0x2fe>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c688:	c5 01       	movw	r24, r10
   1c68a:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("Wrote: %8ld\n", bytes);
   1c68e:	ff 92       	push	r15
   1c690:	ef 92       	push	r14
   1c692:	df 92       	push	r13
   1c694:	cf 92       	push	r12
   1c696:	8b ef       	ldi	r24, 0xFB	; 251
   1c698:	94 e3       	ldi	r25, 0x34	; 52
   1c69a:	1f 92       	push	r1
   1c69c:	9f 93       	push	r25
   1c69e:	8f 93       	push	r24
   1c6a0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    return(bytes);
   1c6a4:	0f b6       	in	r0, 0x3f	; 63
   1c6a6:	f8 94       	cli
   1c6a8:	de bf       	out	0x3e, r29	; 62
   1c6aa:	0f be       	out	0x3f, r0	; 63
   1c6ac:	cd bf       	out	0x3d, r28	; 61
   1c6ae:	b6 01       	movw	r22, r12
   1c6b0:	c7 01       	movw	r24, r14
}
   1c6b2:	cc 5e       	subi	r28, 0xEC	; 236
   1c6b4:	de 4f       	sbci	r29, 0xFE	; 254
   1c6b6:	0f b6       	in	r0, 0x3f	; 63
   1c6b8:	f8 94       	cli
   1c6ba:	de bf       	out	0x3e, r29	; 62
   1c6bc:	0f be       	out	0x3f, r0	; 63
   1c6be:	cd bf       	out	0x3d, r28	; 61
   1c6c0:	df 91       	pop	r29
   1c6c2:	cf 91       	pop	r28
   1c6c4:	1f 91       	pop	r17
   1c6c6:	0f 91       	pop	r16
   1c6c8:	ff 90       	pop	r15
   1c6ca:	ef 90       	pop	r14
   1c6cc:	df 90       	pop	r13
   1c6ce:	cf 90       	pop	r12
   1c6d0:	bf 90       	pop	r11
   1c6d2:	af 90       	pop	r10
   1c6d4:	9f 90       	pop	r9
   1c6d6:	8f 90       	pop	r8
   1c6d8:	6f 90       	pop	r6
   1c6da:	5f 90       	pop	r5
   1c6dc:	4f 90       	pop	r4
   1c6de:	3f 90       	pop	r3
   1c6e0:	2f 90       	pop	r2
   1c6e2:	08 95       	ret

0001c6e4 <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1c6e4:	ef 92       	push	r14
   1c6e6:	ff 92       	push	r15
   1c6e8:	0f 93       	push	r16
   1c6ea:	1f 93       	push	r17
   1c6ec:	cf 93       	push	r28
   1c6ee:	df 93       	push	r29
   1c6f0:	7c 01       	movw	r14, r24
   1c6f2:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1c6f4:	fc 01       	movw	r30, r24
   1c6f6:	80 81       	ld	r24, Z
   1c6f8:	81 11       	cpse	r24, r1
   1c6fa:	03 c0       	rjmp	.+6      	; 0x1c702 <lif_del_file+0x1e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1c6fc:	86 ed       	ldi	r24, 0xD6	; 214
   1c6fe:	94 e3       	ldi	r25, 0x34	; 52
   1c700:	06 c0       	rjmp	.+12     	; 0x1c70e <lif_del_file+0x2a>
        return(-1);
    }
    if(!*lifname)
   1c702:	fb 01       	movw	r30, r22
   1c704:	80 81       	ld	r24, Z
   1c706:	81 11       	cpse	r24, r1
   1c708:	0b c0       	rjmp	.+22     	; 0x1c720 <lif_del_file+0x3c>
    {
        printf("lif_del_file: lifname is empty\n");
   1c70a:	86 eb       	ldi	r24, 0xB6	; 182
   1c70c:	94 e3       	ldi	r25, 0x34	; 52
   1c70e:	1f 92       	push	r1
   1c710:	9f 93       	push	r25
   1c712:	8f 93       	push	r24
   1c714:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return(-1);
   1c718:	0f 90       	pop	r0
   1c71a:	0f 90       	pop	r0
   1c71c:	0f 90       	pop	r0
   1c71e:	74 c0       	rjmp	.+232    	; 0x1c808 <lif_del_file+0x124>
    }
    if(debuglevel & 0x400)
   1c720:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1c724:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1c728:	92 ff       	sbrs	r25, 2
   1c72a:	13 c0       	rjmp	.+38     	; 0x1c752 <lif_del_file+0x6e>
        printf("LIF image:[%s], LIF name:[%s]\n", 
   1c72c:	1f 93       	push	r17
   1c72e:	6f 93       	push	r22
   1c730:	ff 92       	push	r15
   1c732:	ef 92       	push	r14
   1c734:	87 e9       	ldi	r24, 0x97	; 151
   1c736:	94 e3       	ldi	r25, 0x34	; 52
   1c738:	1f 92       	push	r1
   1c73a:	9f 93       	push	r25
   1c73c:	8f 93       	push	r24
   1c73e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1c742:	8d b7       	in	r24, 0x3d	; 61
   1c744:	9e b7       	in	r25, 0x3e	; 62
   1c746:	07 96       	adiw	r24, 0x07	; 7
   1c748:	0f b6       	in	r0, 0x3f	; 63
   1c74a:	f8 94       	cli
   1c74c:	9e bf       	out	0x3e, r25	; 62
   1c74e:	0f be       	out	0x3f, r0	; 63
   1c750:	8d bf       	out	0x3d, r24	; 61
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
   1c752:	6f ef       	ldi	r22, 0xFF	; 255
   1c754:	78 e0       	ldi	r23, 0x08	; 8
   1c756:	c7 01       	movw	r24, r14
   1c758:	0e 94 86 d7 	call	0x1af0c	; 0x1af0c <lif_open_volume>
   1c75c:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1c75e:	00 97       	sbiw	r24, 0x00	; 0
   1c760:	09 f4       	brne	.+2      	; 0x1c764 <lif_del_file+0x80>
   1c762:	52 c0       	rjmp	.+164    	; 0x1c808 <lif_del_file+0x124>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, lifname);
   1c764:	b8 01       	movw	r22, r16
   1c766:	0e 94 eb d9 	call	0x1b3d6	; 0x1b3d6 <lif_find_file>
    if(index == -1)
   1c76a:	8f 3f       	cpi	r24, 0xFF	; 255
   1c76c:	ef ef       	ldi	r30, 0xFF	; 255
   1c76e:	9e 07       	cpc	r25, r30
   1c770:	c9 f4       	brne	.+50     	; 0x1c7a4 <lif_del_file+0xc0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c772:	ce 01       	movw	r24, r28
   1c774:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>
    // Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1c778:	1f 93       	push	r17
   1c77a:	0f 93       	push	r16
   1c77c:	ff 92       	push	r15
   1c77e:	ef 92       	push	r14
   1c780:	8f e6       	ldi	r24, 0x6F	; 111
   1c782:	94 e3       	ldi	r25, 0x34	; 52
   1c784:	1f 92       	push	r1
   1c786:	9f 93       	push	r25
   1c788:	8f 93       	push	r24
   1c78a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return(0);
   1c78e:	8d b7       	in	r24, 0x3d	; 61
   1c790:	9e b7       	in	r25, 0x3e	; 62
   1c792:	07 96       	adiw	r24, 0x07	; 7
   1c794:	0f b6       	in	r0, 0x3f	; 63
   1c796:	f8 94       	cli
   1c798:	9e bf       	out	0x3e, r25	; 62
   1c79a:	0f be       	out	0x3f, r0	; 63
   1c79c:	8d bf       	out	0x3d, r24	; 61
   1c79e:	80 e0       	ldi	r24, 0x00	; 0
   1c7a0:	90 e0       	ldi	r25, 0x00	; 0
   1c7a2:	34 c0       	rjmp	.+104    	; 0x1c80c <lif_del_file+0x128>
    }


// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1c7a4:	2a a1       	ldd	r18, Y+34	; 0x22
   1c7a6:	3b a1       	ldd	r19, Y+35	; 0x23
   1c7a8:	21 50       	subi	r18, 0x01	; 1
   1c7aa:	31 09       	sbc	r19, r1
   1c7ac:	fe 01       	movw	r30, r28
   1c7ae:	e6 5a       	subi	r30, 0xA6	; 166
   1c7b0:	ff 4f       	sbci	r31, 0xFF	; 255
   1c7b2:	82 17       	cp	r24, r18
   1c7b4:	93 07       	cpc	r25, r19
   1c7b6:	2c f0       	brlt	.+10     	; 0x1c7c2 <lif_del_file+0xde>
        LIF->DIR.FileType = 0xffff;
   1c7b8:	2f ef       	ldi	r18, 0xFF	; 255
   1c7ba:	3f ef       	ldi	r19, 0xFF	; 255
   1c7bc:	31 83       	std	Z+1, r19	; 0x01
   1c7be:	20 83       	st	Z, r18
   1c7c0:	02 c0       	rjmp	.+4      	; 0x1c7c6 <lif_del_file+0xe2>
    else
        LIF->DIR.FileType = 0;
   1c7c2:	11 82       	std	Z+1, r1	; 0x01
   1c7c4:	10 82       	st	Z, r1

    // re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1c7c6:	bc 01       	movw	r22, r24
   1c7c8:	ce 01       	movw	r24, r28
   1c7ca:	0e 94 cc d1 	call	0x1a398	; 0x1a398 <lif_writedirindex>
   1c7ce:	89 2b       	or	r24, r25
   1c7d0:	21 f4       	brne	.+8      	; 0x1c7da <lif_del_file+0xf6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c7d2:	ce 01       	movw	r24, r28
   1c7d4:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>
   1c7d8:	17 c0       	rjmp	.+46     	; 0x1c808 <lif_del_file+0x124>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1c7da:	ce 01       	movw	r24, r28
   1c7dc:	0e 94 40 d2 	call	0x1a480	; 0x1a480 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c7e0:	ce 01       	movw	r24, r28
   1c7e2:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1c7e6:	1f 93       	push	r17
   1c7e8:	0f 93       	push	r16
   1c7ea:	80 e6       	ldi	r24, 0x60	; 96
   1c7ec:	94 e3       	ldi	r25, 0x34	; 52
   1c7ee:	1f 92       	push	r1
   1c7f0:	9f 93       	push	r25
   1c7f2:	8f 93       	push	r24
   1c7f4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    return(1);
   1c7f8:	0f 90       	pop	r0
   1c7fa:	0f 90       	pop	r0
   1c7fc:	0f 90       	pop	r0
   1c7fe:	0f 90       	pop	r0
   1c800:	0f 90       	pop	r0
   1c802:	81 e0       	ldi	r24, 0x01	; 1
   1c804:	90 e0       	ldi	r25, 0x00	; 0
   1c806:	02 c0       	rjmp	.+4      	; 0x1c80c <lif_del_file+0x128>
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1c808:	8f ef       	ldi	r24, 0xFF	; 255
   1c80a:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1c80c:	cd b7       	in	r28, 0x3d	; 61
   1c80e:	de b7       	in	r29, 0x3e	; 62
   1c810:	e6 e0       	ldi	r30, 0x06	; 6
   1c812:	ad c5       	rjmp	.+2906   	; 0x1d36e <__epilogue_restores__+0x18>

0001c814 <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1c814:	a0 e0       	ldi	r26, 0x00	; 0
   1c816:	b0 e0       	ldi	r27, 0x00	; 0
   1c818:	ef e0       	ldi	r30, 0x0F	; 15
   1c81a:	f4 ee       	ldi	r31, 0xE4	; 228
   1c81c:	88 c5       	rjmp	.+2832   	; 0x1d32e <__prologue_saves__+0x10>
   1c81e:	6c 01       	movw	r12, r24
   1c820:	8b 01       	movw	r16, r22
   1c822:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1c824:	fc 01       	movw	r30, r24
   1c826:	80 81       	ld	r24, Z
   1c828:	81 11       	cpse	r24, r1
   1c82a:	03 c0       	rjmp	.+6      	; 0x1c832 <lif_rename_file+0x1e>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1c82c:	88 e3       	ldi	r24, 0x38	; 56
   1c82e:	94 e3       	ldi	r25, 0x34	; 52
   1c830:	06 c0       	rjmp	.+12     	; 0x1c83e <lif_rename_file+0x2a>
        return(-1);
    }
    if(!*oldlifname)
   1c832:	fb 01       	movw	r30, r22
   1c834:	80 81       	ld	r24, Z
   1c836:	81 11       	cpse	r24, r1
   1c838:	0b c0       	rjmp	.+22     	; 0x1c850 <lif_rename_file+0x3c>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1c83a:	81 e1       	ldi	r24, 0x11	; 17
   1c83c:	94 e3       	ldi	r25, 0x34	; 52
   1c83e:	1f 92       	push	r1
   1c840:	9f 93       	push	r25
   1c842:	8f 93       	push	r24
   1c844:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return(-1);
   1c848:	0f 90       	pop	r0
   1c84a:	0f 90       	pop	r0
   1c84c:	0f 90       	pop	r0
   1c84e:	62 c0       	rjmp	.+196    	; 0x1c914 <lif_rename_file+0x100>
    }
    if(!*newlifname)
   1c850:	fa 01       	movw	r30, r20
   1c852:	80 81       	ld	r24, Z
   1c854:	81 11       	cpse	r24, r1
   1c856:	03 c0       	rjmp	.+6      	; 0x1c85e <lif_rename_file+0x4a>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1c858:	8a ee       	ldi	r24, 0xEA	; 234
   1c85a:	93 e3       	ldi	r25, 0x33	; 51
   1c85c:	f0 cf       	rjmp	.-32     	; 0x1c83e <lif_rename_file+0x2a>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1c85e:	ca 01       	movw	r24, r20
   1c860:	0e 94 56 c9 	call	0x192ac	; 0x192ac <lif_checkname>
   1c864:	89 2b       	or	r24, r25
   1c866:	19 f4       	brne	.+6      	; 0x1c86e <lif_rename_file+0x5a>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1c868:	84 eb       	ldi	r24, 0xB4	; 180
   1c86a:	93 e3       	ldi	r25, 0x33	; 51
   1c86c:	e8 cf       	rjmp	.-48     	; 0x1c83e <lif_rename_file+0x2a>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1c86e:	6f ef       	ldi	r22, 0xFF	; 255
   1c870:	78 e0       	ldi	r23, 0x08	; 8
   1c872:	c6 01       	movw	r24, r12
   1c874:	0e 94 86 d7 	call	0x1af0c	; 0x1af0c <lif_open_volume>
   1c878:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1c87a:	00 97       	sbiw	r24, 0x00	; 0
   1c87c:	09 f4       	brne	.+2      	; 0x1c880 <lif_rename_file+0x6c>
   1c87e:	4a c0       	rjmp	.+148    	; 0x1c914 <lif_rename_file+0x100>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, oldlifname);
   1c880:	b8 01       	movw	r22, r16
   1c882:	0e 94 eb d9 	call	0x1b3d6	; 0x1b3d6 <lif_find_file>
   1c886:	5c 01       	movw	r10, r24
    if(index == -1)
   1c888:	01 96       	adiw	r24, 0x01	; 1
   1c88a:	c9 f4       	brne	.+50     	; 0x1c8be <lif_rename_file+0xaa>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1c88c:	1f 93       	push	r17
   1c88e:	0f 93       	push	r16
   1c890:	df 92       	push	r13
   1c892:	cf 92       	push	r12
   1c894:	8b e8       	ldi	r24, 0x8B	; 139
   1c896:	93 e3       	ldi	r25, 0x33	; 51
   1c898:	1f 92       	push	r1
   1c89a:	9f 93       	push	r25
   1c89c:	8f 93       	push	r24
   1c89e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c8a2:	ce 01       	movw	r24, r28
   1c8a4:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1c8a8:	8d b7       	in	r24, 0x3d	; 61
   1c8aa:	9e b7       	in	r25, 0x3e	; 62
   1c8ac:	07 96       	adiw	r24, 0x07	; 7
   1c8ae:	0f b6       	in	r0, 0x3f	; 63
   1c8b0:	f8 94       	cli
   1c8b2:	9e bf       	out	0x3e, r25	; 62
   1c8b4:	0f be       	out	0x3f, r0	; 63
   1c8b6:	8d bf       	out	0x3d, r24	; 61
   1c8b8:	80 e0       	ldi	r24, 0x00	; 0
   1c8ba:	90 e0       	ldi	r25, 0x00	; 0
   1c8bc:	2d c0       	rjmp	.+90     	; 0x1c918 <lif_rename_file+0x104>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1c8be:	4a e0       	ldi	r20, 0x0A	; 10
   1c8c0:	50 e0       	ldi	r21, 0x00	; 0
   1c8c2:	b7 01       	movw	r22, r14
   1c8c4:	ce 01       	movw	r24, r28
   1c8c6:	81 5b       	subi	r24, 0xB1	; 177
   1c8c8:	9f 4f       	sbci	r25, 0xFF	; 255
   1c8ca:	0e 94 90 c9 	call	0x19320	; 0x19320 <lif_fixname>

    // re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1c8ce:	b5 01       	movw	r22, r10
   1c8d0:	ce 01       	movw	r24, r28
   1c8d2:	0e 94 cc d1 	call	0x1a398	; 0x1a398 <lif_writedirindex>
   1c8d6:	89 2b       	or	r24, r25
   1c8d8:	21 f4       	brne	.+8      	; 0x1c8e2 <lif_rename_file+0xce>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c8da:	ce 01       	movw	r24, r28
   1c8dc:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>
   1c8e0:	19 c0       	rjmp	.+50     	; 0x1c914 <lif_rename_file+0x100>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1c8e2:	ff 92       	push	r15
   1c8e4:	ef 92       	push	r14
   1c8e6:	1f 93       	push	r17
   1c8e8:	0f 93       	push	r16
   1c8ea:	84 e7       	ldi	r24, 0x74	; 116
   1c8ec:	93 e3       	ldi	r25, 0x33	; 51
   1c8ee:	1f 92       	push	r1
   1c8f0:	9f 93       	push	r25
   1c8f2:	8f 93       	push	r24
   1c8f4:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c8f8:	ce 01       	movw	r24, r28
   1c8fa:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1c8fe:	ed b7       	in	r30, 0x3d	; 61
   1c900:	fe b7       	in	r31, 0x3e	; 62
   1c902:	37 96       	adiw	r30, 0x07	; 7
   1c904:	0f b6       	in	r0, 0x3f	; 63
   1c906:	f8 94       	cli
   1c908:	fe bf       	out	0x3e, r31	; 62
   1c90a:	0f be       	out	0x3f, r0	; 63
   1c90c:	ed bf       	out	0x3d, r30	; 61
   1c90e:	81 e0       	ldi	r24, 0x01	; 1
   1c910:	90 e0       	ldi	r25, 0x00	; 0
   1c912:	02 c0       	rjmp	.+4      	; 0x1c918 <lif_rename_file+0x104>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1c914:	8f ef       	ldi	r24, 0xFF	; 255
   1c916:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1c918:	cd b7       	in	r28, 0x3d	; 61
   1c91a:	de b7       	in	r29, 0x3e	; 62
   1c91c:	ea e0       	ldi	r30, 0x0A	; 10
   1c91e:	23 c5       	rjmp	.+2630   	; 0x1d366 <__epilogue_restores__+0x10>

0001c920 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1c920:	4f 92       	push	r4
   1c922:	5f 92       	push	r5
   1c924:	6f 92       	push	r6
   1c926:	7f 92       	push	r7
   1c928:	af 92       	push	r10
   1c92a:	bf 92       	push	r11
   1c92c:	cf 92       	push	r12
   1c92e:	df 92       	push	r13
   1c930:	ef 92       	push	r14
   1c932:	ff 92       	push	r15
   1c934:	0f 93       	push	r16
   1c936:	1f 93       	push	r17
   1c938:	cf 93       	push	r28
   1c93a:	df 93       	push	r29
   1c93c:	27 01       	movw	r4, r14
   1c93e:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1c940:	dc 01       	movw	r26, r24
   1c942:	ec 91       	ld	r30, X
   1c944:	e1 11       	cpse	r30, r1
   1c946:	03 c0       	rjmp	.+6      	; 0x1c94e <lif_create_image+0x2e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1c948:	8b e4       	ldi	r24, 0x4B	; 75
   1c94a:	93 e3       	ldi	r25, 0x33	; 51
   1c94c:	16 c0       	rjmp	.+44     	; 0x1c97a <lif_create_image+0x5a>
        return(-1);
    }
    if(!*liflabel)
   1c94e:	db 01       	movw	r26, r22
   1c950:	ec 91       	ld	r30, X
   1c952:	e1 11       	cpse	r30, r1
   1c954:	03 c0       	rjmp	.+6      	; 0x1c95c <lif_create_image+0x3c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1c956:	86 e2       	ldi	r24, 0x26	; 38
   1c958:	93 e3       	ldi	r25, 0x33	; 51
   1c95a:	0f c0       	rjmp	.+30     	; 0x1c97a <lif_create_image+0x5a>
        return(-1);
    }
    if(!dirsectors)
   1c95c:	21 15       	cp	r18, r1
   1c95e:	31 05       	cpc	r19, r1
   1c960:	41 05       	cpc	r20, r1
   1c962:	51 05       	cpc	r21, r1
   1c964:	19 f4       	brne	.+6      	; 0x1c96c <lif_create_image+0x4c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1c966:	83 e0       	ldi	r24, 0x03	; 3
   1c968:	93 e3       	ldi	r25, 0x33	; 51
   1c96a:	07 c0       	rjmp	.+14     	; 0x1c97a <lif_create_image+0x5a>
        return(-1);
    }
    if(!sectors)
   1c96c:	e1 14       	cp	r14, r1
   1c96e:	f1 04       	cpc	r15, r1
   1c970:	01 05       	cpc	r16, r1
   1c972:	11 05       	cpc	r17, r1
   1c974:	59 f4       	brne	.+22     	; 0x1c98c <lif_create_image+0x6c>
    {
        printf("lif_create_image: sectors is 0\n");
   1c976:	83 ee       	ldi	r24, 0xE3	; 227
   1c978:	92 e3       	ldi	r25, 0x32	; 50
   1c97a:	1f 92       	push	r1
   1c97c:	9f 93       	push	r25
   1c97e:	8f 93       	push	r24
   1c980:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
        return(-1);
   1c984:	0f 90       	pop	r0
   1c986:	0f 90       	pop	r0
   1c988:	0f 90       	pop	r0
   1c98a:	30 c0       	rjmp	.+96     	; 0x1c9ec <lif_create_image+0xcc>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1c98c:	67 01       	movw	r12, r14
   1c98e:	78 01       	movw	r14, r16
   1c990:	b2 e0       	ldi	r27, 0x02	; 2
   1c992:	cb 1a       	sub	r12, r27
   1c994:	d1 08       	sbc	r13, r1
   1c996:	e1 08       	sbc	r14, r1
   1c998:	f1 08       	sbc	r15, r1
   1c99a:	56 01       	movw	r10, r12
   1c99c:	67 01       	movw	r12, r14
   1c99e:	a2 1a       	sub	r10, r18
   1c9a0:	b3 0a       	sbc	r11, r19
   1c9a2:	c4 0a       	sbc	r12, r20
   1c9a4:	d5 0a       	sbc	r13, r21
   1c9a6:	79 01       	movw	r14, r18
   1c9a8:	8a 01       	movw	r16, r20
   1c9aa:	22 e0       	ldi	r18, 0x02	; 2
   1c9ac:	30 e0       	ldi	r19, 0x00	; 0
   1c9ae:	40 e0       	ldi	r20, 0x00	; 0
   1c9b0:	50 e0       	ldi	r21, 0x00	; 0
   1c9b2:	0e 94 48 d3 	call	0x1a690	; 0x1a690 <lif_create_volume>
    if(LIF == NULL)
   1c9b6:	00 97       	sbiw	r24, 0x00	; 0
   1c9b8:	c9 f0       	breq	.+50     	; 0x1c9ec <lif_create_image+0xcc>
        return(-1);
    lif_close_volume(LIF);
   1c9ba:	0e 94 e2 d0 	call	0x1a1c4	; 0x1a1c4 <lif_close_volume>

    printf("Formating: wrote:[%ld] sectors\n", (long)end);
   1c9be:	82 01       	movw	r16, r4
   1c9c0:	d6 2d       	mov	r29, r6
   1c9c2:	c7 2d       	mov	r28, r7
   1c9c4:	7f 92       	push	r7
   1c9c6:	6f 92       	push	r6
   1c9c8:	5f 92       	push	r5
   1c9ca:	4f 92       	push	r4
   1c9cc:	83 ec       	ldi	r24, 0xC3	; 195
   1c9ce:	92 e3       	ldi	r25, 0x32	; 50
   1c9d0:	1f 92       	push	r1
   1c9d2:	9f 93       	push	r25
   1c9d4:	8f 93       	push	r24
   1c9d6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    return(end);
   1c9da:	8d b7       	in	r24, 0x3d	; 61
   1c9dc:	9e b7       	in	r25, 0x3e	; 62
   1c9de:	07 96       	adiw	r24, 0x07	; 7
   1c9e0:	0f b6       	in	r0, 0x3f	; 63
   1c9e2:	f8 94       	cli
   1c9e4:	9e bf       	out	0x3e, r25	; 62
   1c9e6:	0f be       	out	0x3f, r0	; 63
   1c9e8:	8d bf       	out	0x3d, r24	; 61
   1c9ea:	04 c0       	rjmp	.+8      	; 0x1c9f4 <lif_create_image+0xd4>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1c9ec:	0f ef       	ldi	r16, 0xFF	; 255
   1c9ee:	1f ef       	ldi	r17, 0xFF	; 255
   1c9f0:	df ef       	ldi	r29, 0xFF	; 255
   1c9f2:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("Formating: wrote:[%ld] sectors\n", (long)end);
    return(end);
}
   1c9f4:	b8 01       	movw	r22, r16
   1c9f6:	8d 2f       	mov	r24, r29
   1c9f8:	9c 2f       	mov	r25, r28
   1c9fa:	df 91       	pop	r29
   1c9fc:	cf 91       	pop	r28
   1c9fe:	1f 91       	pop	r17
   1ca00:	0f 91       	pop	r16
   1ca02:	ff 90       	pop	r15
   1ca04:	ef 90       	pop	r14
   1ca06:	df 90       	pop	r13
   1ca08:	cf 90       	pop	r12
   1ca0a:	bf 90       	pop	r11
   1ca0c:	af 90       	pop	r10
   1ca0e:	7f 90       	pop	r7
   1ca10:	6f 90       	pop	r6
   1ca12:	5f 90       	pop	r5
   1ca14:	4f 90       	pop	r4
   1ca16:	08 95       	ret

0001ca18 <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1ca18:	a0 e0       	ldi	r26, 0x00	; 0
   1ca1a:	b0 e0       	ldi	r27, 0x00	; 0
   1ca1c:	e1 e1       	ldi	r30, 0x11	; 17
   1ca1e:	f5 ee       	ldi	r31, 0xE5	; 229
   1ca20:	84 c4       	rjmp	.+2312   	; 0x1d32a <__prologue_saves__+0xc>
    // NAME
    ind = 0;
	// Skip program name
    ptr = argv[ind++];

    if(!ptr )
   1ca22:	fb 01       	movw	r30, r22
   1ca24:	20 81       	ld	r18, Z
   1ca26:	31 81       	ldd	r19, Z+1	; 0x01
   1ca28:	23 2b       	or	r18, r19
   1ca2a:	59 f0       	breq	.+22     	; 0x1ca42 <lif_tests+0x2a>
   1ca2c:	8b 01       	movw	r16, r22
   1ca2e:	4c 01       	movw	r8, r24
        return(0);

	// Next Argument after program name
    ptr = argv[ind++];
   1ca30:	fb 01       	movw	r30, r22
   1ca32:	a2 80       	ldd	r10, Z+2	; 0x02
   1ca34:	b3 80       	ldd	r11, Z+3	; 0x03



    if(argc <= 1 || !ptr || MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1ca36:	02 97       	sbiw	r24, 0x02	; 2
   1ca38:	3c f4       	brge	.+14     	; 0x1ca48 <lif_tests+0x30>
    {
        lif_help(1);
   1ca3a:	81 e0       	ldi	r24, 0x01	; 1
   1ca3c:	90 e0       	ldi	r25, 0x00	; 0
   1ca3e:	0e 94 4d c7 	call	0x18e9a	; 0x18e9a <lif_help>
#ifdef TELEDISK
        td0_help(1);
#endif
        return(0);
   1ca42:	80 e0       	ldi	r24, 0x00	; 0
   1ca44:	90 e0       	ldi	r25, 0x00	; 0
   1ca46:	0a c1       	rjmp	.+532    	; 0x1cc5c <lif_tests+0x244>
	// Next Argument after program name
    ptr = argv[ind++];



    if(argc <= 1 || !ptr || MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1ca48:	a1 14       	cp	r10, r1
   1ca4a:	b1 04       	cpc	r11, r1
   1ca4c:	b1 f3       	breq	.-20     	; 0x1ca3a <lif_tests+0x22>
   1ca4e:	63 ea       	ldi	r22, 0xA3	; 163
   1ca50:	76 e1       	ldi	r23, 0x16	; 22
   1ca52:	c5 01       	movw	r24, r10
   1ca54:	0e 94 36 31 	call	0x626c	; 0x626c <MATCH>
   1ca58:	89 2b       	or	r24, r25
   1ca5a:	79 f7       	brne	.-34     	; 0x1ca3a <lif_tests+0x22>
   1ca5c:	62 ea       	ldi	r22, 0xA2	; 162
   1ca5e:	76 e1       	ldi	r23, 0x16	; 22
   1ca60:	c5 01       	movw	r24, r10
   1ca62:	0e 94 36 31 	call	0x626c	; 0x626c <MATCH>
   1ca66:	89 2b       	or	r24, r25
   1ca68:	41 f7       	brne	.-48     	; 0x1ca3a <lif_tests+0x22>
   1ca6a:	68 ea       	ldi	r22, 0xA8	; 168
   1ca6c:	76 e1       	ldi	r23, 0x16	; 22
   1ca6e:	c5 01       	movw	r24, r10
   1ca70:	0e 94 36 31 	call	0x626c	; 0x626c <MATCH>
   1ca74:	89 2b       	or	r24, r25
   1ca76:	09 f7       	brne	.-62     	; 0x1ca3a <lif_tests+0x22>
        return(0);
    }

	// Turn one debugging
	// in the future we can add tests for specific messages
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1ca78:	94 01       	movw	r18, r8
   1ca7a:	42 e0       	ldi	r20, 0x02	; 2
   1ca7c:	50 e0       	ldi	r21, 0x00	; 0
   1ca7e:	6b ea       	ldi	r22, 0xAB	; 171
   1ca80:	76 e1       	ldi	r23, 0x16	; 22
   1ca82:	c5 01       	movw	r24, r10
   1ca84:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   1ca88:	89 2b       	or	r24, r25
   1ca8a:	69 f0       	breq	.+26     	; 0x1caa6 <lif_tests+0x8e>
    {
		debuglevel = 0xffff;
   1ca8c:	8f ef       	ldi	r24, 0xFF	; 255
   1ca8e:	9f ef       	ldi	r25, 0xFF	; 255
   1ca90:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <debuglevel+0x1>
   1ca94:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <debuglevel>
		ptr = argv[ind++];
   1ca98:	f8 01       	movw	r30, r16
   1ca9a:	a4 80       	ldd	r10, Z+4	; 0x04
   1ca9c:	b5 80       	ldd	r11, Z+5	; 0x05
   1ca9e:	f3 e0       	ldi	r31, 0x03	; 3
   1caa0:	ef 2e       	mov	r14, r31
   1caa2:	f1 2c       	mov	r15, r1
   1caa4:	03 c0       	rjmp	.+6      	; 0x1caac <lif_tests+0x94>

    if(!ptr )
        return(0);

	// Next Argument after program name
    ptr = argv[ind++];
   1caa6:	e2 e0       	ldi	r30, 0x02	; 2
   1caa8:	ee 2e       	mov	r14, r30
   1caaa:	f1 2c       	mov	r15, r1
    {
		debuglevel = 0xffff;
		ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1caac:	67 01       	movw	r12, r14
   1caae:	f3 e0       	ldi	r31, 0x03	; 3
   1cab0:	cf 0e       	add	r12, r31
   1cab2:	d1 1c       	adc	r13, r1
   1cab4:	94 01       	movw	r18, r8
   1cab6:	a6 01       	movw	r20, r12
   1cab8:	6e ea       	ldi	r22, 0xAE	; 174
   1caba:	76 e1       	ldi	r23, 0x16	; 22
   1cabc:	c5 01       	movw	r24, r10
   1cabe:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   1cac2:	e7 01       	movw	r28, r14
   1cac4:	22 96       	adiw	r28, 0x02	; 2
   1cac6:	89 2b       	or	r24, r25
   1cac8:	79 f0       	breq	.+30     	; 0x1cae8 <lif_tests+0xd0>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1caca:	cc 0f       	add	r28, r28
   1cacc:	dd 1f       	adc	r29, r29
   1cace:	c0 0f       	add	r28, r16
   1cad0:	d1 1f       	adc	r29, r17
   1cad2:	48 81       	ld	r20, Y
   1cad4:	59 81       	ldd	r21, Y+1	; 0x01
   1cad6:	fe 01       	movw	r30, r28
   1cad8:	32 97       	sbiw	r30, 0x02	; 2
   1cada:	60 81       	ld	r22, Z
   1cadc:	71 81       	ldd	r23, Z+1	; 0x01
   1cade:	24 97       	sbiw	r28, 0x04	; 4
   1cae0:	88 81       	ld	r24, Y
   1cae2:	99 81       	ldd	r25, Y+1	; 0x01
   1cae4:	67 dc       	rcall	.-1842   	; 0x1c3b4 <lif_add_lif_file>
   1cae6:	b8 c0       	rjmp	.+368    	; 0x1cc58 <lif_tests+0x240>

        return(1);
    }
    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1cae8:	94 01       	movw	r18, r8
   1caea:	a6 01       	movw	r20, r12
   1caec:	65 eb       	ldi	r22, 0xB5	; 181
   1caee:	76 e1       	ldi	r23, 0x16	; 22
   1caf0:	c5 01       	movw	r24, r10
   1caf2:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   1caf6:	89 2b       	or	r24, r25
   1caf8:	81 f0       	breq	.+32     	; 0x1cb1a <lif_tests+0x102>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1cafa:	cc 0f       	add	r28, r28
   1cafc:	dd 1f       	adc	r29, r29
   1cafe:	c0 0f       	add	r28, r16
   1cb00:	d1 1f       	adc	r29, r17
   1cb02:	48 81       	ld	r20, Y
   1cb04:	59 81       	ldd	r21, Y+1	; 0x01
   1cb06:	fe 01       	movw	r30, r28
   1cb08:	32 97       	sbiw	r30, 0x02	; 2
   1cb0a:	60 81       	ld	r22, Z
   1cb0c:	71 81       	ldd	r23, Z+1	; 0x01
   1cb0e:	24 97       	sbiw	r28, 0x04	; 4
   1cb10:	88 81       	ld	r24, Y
   1cb12:	99 81       	ldd	r25, Y+1	; 0x01
   1cb14:	0e 94 6f dc 	call	0x1b8de	; 0x1b8de <lif_add_ascii_file_as_e010>
   1cb18:	9f c0       	rjmp	.+318    	; 0x1cc58 <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1cb1a:	94 01       	movw	r18, r8
   1cb1c:	ae 01       	movw	r20, r28
   1cb1e:	69 eb       	ldi	r22, 0xB9	; 185
   1cb20:	76 e1       	ldi	r23, 0x16	; 22
   1cb22:	c5 01       	movw	r24, r10
   1cb24:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   1cb28:	89 2b       	or	r24, r25
   1cb2a:	71 f0       	breq	.+28     	; 0x1cb48 <lif_tests+0x130>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1cb2c:	c7 01       	movw	r24, r14
   1cb2e:	01 96       	adiw	r24, 0x01	; 1
   1cb30:	88 0f       	add	r24, r24
   1cb32:	99 1f       	adc	r25, r25
   1cb34:	e8 01       	movw	r28, r16
   1cb36:	c8 0f       	add	r28, r24
   1cb38:	d9 1f       	adc	r29, r25
   1cb3a:	68 81       	ld	r22, Y
   1cb3c:	79 81       	ldd	r23, Y+1	; 0x01
   1cb3e:	22 97       	sbiw	r28, 0x02	; 2
   1cb40:	88 81       	ld	r24, Y
   1cb42:	99 81       	ldd	r25, Y+1	; 0x01
   1cb44:	cf dd       	rcall	.-1122   	; 0x1c6e4 <lif_del_file>
   1cb46:	88 c0       	rjmp	.+272    	; 0x1cc58 <lif_tests+0x240>

        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1cb48:	94 01       	movw	r18, r8
   1cb4a:	a7 01       	movw	r20, r14
   1cb4c:	4c 5f       	subi	r20, 0xFC	; 252
   1cb4e:	5f 4f       	sbci	r21, 0xFF	; 255
   1cb50:	6d eb       	ldi	r22, 0xBD	; 189
   1cb52:	76 e1       	ldi	r23, 0x16	; 22
   1cb54:	c5 01       	movw	r24, r10
   1cb56:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   1cb5a:	89 2b       	or	r24, r25
   1cb5c:	f1 f0       	breq	.+60     	; 0x1cb9a <lif_tests+0x182>
    {
        ///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1cb5e:	e6 01       	movw	r28, r12
   1cb60:	cc 0f       	add	r28, r28
   1cb62:	dd 1f       	adc	r29, r29
   1cb64:	c0 0f       	add	r28, r16
   1cb66:	d1 1f       	adc	r29, r17
   1cb68:	88 81       	ld	r24, Y
   1cb6a:	99 81       	ldd	r25, Y+1	; 0x01
   1cb6c:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <atol>
   1cb70:	6b 01       	movw	r12, r22
   1cb72:	7c 01       	movw	r14, r24
   1cb74:	fe 01       	movw	r30, r28
   1cb76:	32 97       	sbiw	r30, 0x02	; 2
   1cb78:	80 81       	ld	r24, Z
   1cb7a:	91 81       	ldd	r25, Z+1	; 0x01
   1cb7c:	0e 94 b4 45 	call	0x8b68	; 0x8b68 <atol>
   1cb80:	9b 01       	movw	r18, r22
   1cb82:	ac 01       	movw	r20, r24
   1cb84:	fe 01       	movw	r30, r28
   1cb86:	34 97       	sbiw	r30, 0x04	; 4
   1cb88:	60 81       	ld	r22, Z
   1cb8a:	71 81       	ldd	r23, Z+1	; 0x01
   1cb8c:	26 97       	sbiw	r28, 0x06	; 6
   1cb8e:	87 01       	movw	r16, r14
   1cb90:	76 01       	movw	r14, r12
   1cb92:	88 81       	ld	r24, Y
   1cb94:	99 81       	ldd	r25, Y+1	; 0x01
   1cb96:	c4 de       	rcall	.-632    	; 0x1c920 <lif_create_image>
   1cb98:	5f c0       	rjmp	.+190    	; 0x1cc58 <lif_tests+0x240>
        return(1);
    }
    else if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1cb9a:	94 01       	movw	r18, r8
   1cb9c:	a7 01       	movw	r20, r14
   1cb9e:	4f 5f       	subi	r20, 0xFF	; 255
   1cba0:	5f 4f       	sbci	r21, 0xFF	; 255
   1cba2:	62 ed       	ldi	r22, 0xD2	; 210
   1cba4:	7b e0       	ldi	r23, 0x0B	; 11
   1cba6:	c5 01       	movw	r24, r10
   1cba8:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   1cbac:	89 2b       	or	r24, r25
   1cbae:	59 f0       	breq	.+22     	; 0x1cbc6 <lif_tests+0x1ae>
    {
        lif_dir(argv[ind]);
   1cbb0:	c7 01       	movw	r24, r14
   1cbb2:	88 0f       	add	r24, r24
   1cbb4:	99 1f       	adc	r25, r25
   1cbb6:	e8 01       	movw	r28, r16
   1cbb8:	c8 0f       	add	r28, r24
   1cbba:	d9 1f       	adc	r29, r25
   1cbbc:	88 81       	ld	r24, Y
   1cbbe:	99 81       	ldd	r25, Y+1	; 0x01
   1cbc0:	0e 94 7e d8 	call	0x1b0fc	; 0x1b0fc <lif_dir>
   1cbc4:	49 c0       	rjmp	.+146    	; 0x1cc58 <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1cbc6:	94 01       	movw	r18, r8
   1cbc8:	a6 01       	movw	r20, r12
   1cbca:	64 ec       	ldi	r22, 0xC4	; 196
   1cbcc:	76 e1       	ldi	r23, 0x16	; 22
   1cbce:	c5 01       	movw	r24, r10
   1cbd0:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   1cbd4:	89 2b       	or	r24, r25
   1cbd6:	79 f0       	breq	.+30     	; 0x1cbf6 <lif_tests+0x1de>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1cbd8:	cc 0f       	add	r28, r28
   1cbda:	dd 1f       	adc	r29, r29
   1cbdc:	c0 0f       	add	r28, r16
   1cbde:	d1 1f       	adc	r29, r17
   1cbe0:	48 81       	ld	r20, Y
   1cbe2:	59 81       	ldd	r21, Y+1	; 0x01
   1cbe4:	fe 01       	movw	r30, r28
   1cbe6:	32 97       	sbiw	r30, 0x02	; 2
   1cbe8:	60 81       	ld	r22, Z
   1cbea:	71 81       	ldd	r23, Z+1	; 0x01
   1cbec:	24 97       	sbiw	r28, 0x04	; 4
   1cbee:	88 81       	ld	r24, Y
   1cbf0:	99 81       	ldd	r25, Y+1	; 0x01
   1cbf2:	9a da       	rcall	.-2764   	; 0x1c128 <lif_extract_lif_as_lif>
   1cbf4:	31 c0       	rjmp	.+98     	; 0x1cc58 <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1cbf6:	94 01       	movw	r18, r8
   1cbf8:	a6 01       	movw	r20, r12
   1cbfa:	6f ec       	ldi	r22, 0xCF	; 207
   1cbfc:	76 e1       	ldi	r23, 0x16	; 22
   1cbfe:	c5 01       	movw	r24, r10
   1cc00:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   1cc04:	89 2b       	or	r24, r25
   1cc06:	81 f0       	breq	.+32     	; 0x1cc28 <lif_tests+0x210>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1cc08:	cc 0f       	add	r28, r28
   1cc0a:	dd 1f       	adc	r29, r29
   1cc0c:	c0 0f       	add	r28, r16
   1cc0e:	d1 1f       	adc	r29, r17
   1cc10:	48 81       	ld	r20, Y
   1cc12:	59 81       	ldd	r21, Y+1	; 0x01
   1cc14:	fe 01       	movw	r30, r28
   1cc16:	32 97       	sbiw	r30, 0x02	; 2
   1cc18:	60 81       	ld	r22, Z
   1cc1a:	71 81       	ldd	r23, Z+1	; 0x01
   1cc1c:	24 97       	sbiw	r28, 0x04	; 4
   1cc1e:	88 81       	ld	r24, Y
   1cc20:	99 81       	ldd	r25, Y+1	; 0x01
   1cc22:	0e 94 a8 dd 	call	0x1bb50	; 0x1bb50 <lif_extract_e010_as_ascii>
   1cc26:	18 c0       	rjmp	.+48     	; 0x1cc58 <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1cc28:	94 01       	movw	r18, r8
   1cc2a:	a6 01       	movw	r20, r12
   1cc2c:	6f ed       	ldi	r22, 0xDF	; 223
   1cc2e:	7b e0       	ldi	r23, 0x0B	; 11
   1cc30:	c5 01       	movw	r24, r10
   1cc32:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   1cc36:	89 2b       	or	r24, r25
   1cc38:	09 f4       	brne	.+2      	; 0x1cc3c <lif_tests+0x224>
   1cc3a:	03 cf       	rjmp	.-506    	; 0x1ca42 <lif_tests+0x2a>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1cc3c:	cc 0f       	add	r28, r28
   1cc3e:	dd 1f       	adc	r29, r29
   1cc40:	c0 0f       	add	r28, r16
   1cc42:	d1 1f       	adc	r29, r17
   1cc44:	48 81       	ld	r20, Y
   1cc46:	59 81       	ldd	r21, Y+1	; 0x01
   1cc48:	fe 01       	movw	r30, r28
   1cc4a:	32 97       	sbiw	r30, 0x02	; 2
   1cc4c:	60 81       	ld	r22, Z
   1cc4e:	71 81       	ldd	r23, Z+1	; 0x01
   1cc50:	24 97       	sbiw	r28, 0x04	; 4
   1cc52:	88 81       	ld	r24, Y
   1cc54:	99 81       	ldd	r25, Y+1	; 0x01
        return(1);
   1cc56:	de dd       	rcall	.-1092   	; 0x1c814 <lif_rename_file>
        td02lif(argc,argv);
        return(1);
    }
#endif
    return(0);
}
   1cc58:	81 e0       	ldi	r24, 0x01	; 1
   1cc5a:	90 e0       	ldi	r25, 0x00	; 0
   1cc5c:	cd b7       	in	r28, 0x3d	; 61
   1cc5e:	de b7       	in	r29, 0x3e	; 62
   1cc60:	ec e0       	ldi	r30, 0x0C	; 12
   1cc62:	7f c3       	rjmp	.+1790   	; 0x1d362 <__epilogue_restores__+0xc>

0001cc64 <copyright>:

///@brief Display Copyright
///@return void
void copyright()
{
    printf("Stand alone version of LIF utilities for linux\n");
   1cc64:	85 ef       	ldi	r24, 0xF5	; 245
   1cc66:	98 e4       	ldi	r25, 0x48	; 72
   1cc68:	1f 92       	push	r1
   1cc6a:	9f 93       	push	r25
   1cc6c:	8f 93       	push	r24
   1cc6e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1cc72:	86 ed       	ldi	r24, 0xD6	; 214
   1cc74:	98 e4       	ldi	r25, 0x48	; 72
   1cc76:	1f 92       	push	r1
   1cc78:	9f 93       	push	r25
   1cc7a:	8f 93       	push	r24
   1cc7c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1cc80:	89 eb       	ldi	r24, 0xB9	; 185
   1cc82:	98 e4       	ldi	r25, 0x48	; 72
   1cc84:	1f 92       	push	r1
   1cc86:	9f 93       	push	r25
   1cc88:	8f 93       	push	r24
   1cc8a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf(" GNU version 3\n");
   1cc8e:	89 ea       	ldi	r24, 0xA9	; 169
   1cc90:	98 e4       	ldi	r25, 0x48	; 72
   1cc92:	1f 92       	push	r1
   1cc94:	9f 93       	push	r25
   1cc96:	8f 93       	push	r24
   1cc98:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1cc9c:	82 e8       	ldi	r24, 0x82	; 130
   1cc9e:	98 e4       	ldi	r25, 0x48	; 72
   1cca0:	1f 92       	push	r1
   1cca2:	9f 93       	push	r25
   1cca4:	8f 93       	push	r24
   1cca6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1ccaa:	87 ed       	ldi	r24, 0xD7	; 215
   1ccac:	96 e1       	ldi	r25, 0x16	; 22
   1ccae:	9f 93       	push	r25
   1ccb0:	8f 93       	push	r24
   1ccb2:	88 e6       	ldi	r24, 0x68	; 104
   1ccb4:	98 e4       	ldi	r25, 0x48	; 72
   1ccb6:	1f 92       	push	r1
   1ccb8:	9f 93       	push	r25
   1ccba:	8f 93       	push	r24
   1ccbc:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1ccc0:	8b ef       	ldi	r24, 0xFB	; 251
   1ccc2:	96 e1       	ldi	r25, 0x16	; 22
   1ccc4:	9f 93       	push	r25
   1ccc6:	8f 93       	push	r24
   1ccc8:	8e e4       	ldi	r24, 0x4E	; 78
   1ccca:	98 e4       	ldi	r25, 0x48	; 72
   1cccc:	1f 92       	push	r1
   1ccce:	9f 93       	push	r25
   1ccd0:	8f 93       	push	r24
   1ccd2:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
    printf("\n");
   1ccd6:	8c e4       	ldi	r24, 0x4C	; 76
   1ccd8:	98 e4       	ldi	r25, 0x48	; 72
   1ccda:	1f 92       	push	r1
   1ccdc:	9f 93       	push	r25
   1ccde:	8f 93       	push	r24
   1cce0:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
}
   1cce4:	8d b7       	in	r24, 0x3d	; 61
   1cce6:	9e b7       	in	r25, 0x3e	; 62
   1cce8:	4c 96       	adiw	r24, 0x1c	; 28
   1ccea:	0f b6       	in	r0, 0x3f	; 63
   1ccec:	f8 94       	cli
   1ccee:	9e bf       	out	0x3e, r25	; 62
   1ccf0:	0f be       	out	0x3f, r0	; 63
   1ccf2:	8d bf       	out	0x3d, r24	; 61
   1ccf4:	08 95       	ret

0001ccf6 <delay_tests>:
///
/// This included measurement of avr-libc delays
/// @return  void
void delay_tests()
{
    printf("System delays\n");
   1ccf6:	8d e3       	ldi	r24, 0x3D	; 61
   1ccf8:	98 e4       	ldi	r25, 0x48	; 72
   1ccfa:	1f 92       	push	r1
   1ccfc:	9f 93       	push	r25
   1ccfe:	8f 93       	push	r24
   1cd00:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    clock_elapsed_begin();
   1cd04:	0e 94 3b 34 	call	0x6876	; 0x6876 <clock_elapsed_begin>
    clock_elapsed_end("elapsed timer overhead");
   1cd08:	8f e1       	ldi	r24, 0x1F	; 31
   1cd0a:	97 e1       	ldi	r25, 0x17	; 23
   1cd0c:	0e 94 41 34 	call	0x6882	; 0x6882 <clock_elapsed_end>

    clock_elapsed_begin();
   1cd10:	0e 94 3b 34 	call	0x6876	; 0x6876 <clock_elapsed_begin>
   1cd14:	83 ef       	ldi	r24, 0xF3	; 243
   1cd16:	91 e0       	ldi	r25, 0x01	; 1
   1cd18:	01 97       	sbiw	r24, 0x01	; 1
   1cd1a:	f1 f7       	brne	.-4      	; 0x1cd18 <delay_tests+0x22>
   1cd1c:	00 c0       	rjmp	.+0      	; 0x1cd1e <delay_tests+0x28>
   1cd1e:	00 00       	nop
    _delay_us(100);
    clock_elapsed_end("_delay_us(100)");
   1cd20:	86 e3       	ldi	r24, 0x36	; 54
   1cd22:	97 e1       	ldi	r25, 0x17	; 23
   1cd24:	0e 94 41 34 	call	0x6882	; 0x6882 <clock_elapsed_end>

    clock_elapsed_begin();
   1cd28:	0e 94 3b 34 	call	0x6876	; 0x6876 <clock_elapsed_begin>
   1cd2c:	83 ec       	ldi	r24, 0xC3	; 195
   1cd2e:	99 e0       	ldi	r25, 0x09	; 9
   1cd30:	01 97       	sbiw	r24, 0x01	; 1
   1cd32:	f1 f7       	brne	.-4      	; 0x1cd30 <delay_tests+0x3a>
   1cd34:	00 c0       	rjmp	.+0      	; 0x1cd36 <delay_tests+0x40>
   1cd36:	00 00       	nop
    _delay_us(500);
    clock_elapsed_end("_delay_us(500)");
   1cd38:	85 e4       	ldi	r24, 0x45	; 69
   1cd3a:	97 e1       	ldi	r25, 0x17	; 23
   1cd3c:	0e 94 41 34 	call	0x6882	; 0x6882 <clock_elapsed_end>

    printf("My delays\n");
   1cd40:	82 e3       	ldi	r24, 0x32	; 50
   1cd42:	98 e4       	ldi	r25, 0x48	; 72
   1cd44:	1f 92       	push	r1
   1cd46:	9f 93       	push	r25
   1cd48:	8f 93       	push	r24
   1cd4a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>

    clock_elapsed_begin();
   1cd4e:	0e 94 3b 34 	call	0x6876	; 0x6876 <clock_elapsed_begin>
    delayus(100U);
   1cd52:	64 e6       	ldi	r22, 0x64	; 100
   1cd54:	70 e0       	ldi	r23, 0x00	; 0
   1cd56:	80 e0       	ldi	r24, 0x00	; 0
   1cd58:	90 e0       	ldi	r25, 0x00	; 0
   1cd5a:	0e 94 3d 2a 	call	0x547a	; 0x547a <delayus>
    clock_elapsed_end("delayus(100)");
   1cd5e:	84 e5       	ldi	r24, 0x54	; 84
   1cd60:	97 e1       	ldi	r25, 0x17	; 23
   1cd62:	0e 94 41 34 	call	0x6882	; 0x6882 <clock_elapsed_end>

    clock_elapsed_begin();
   1cd66:	0e 94 3b 34 	call	0x6876	; 0x6876 <clock_elapsed_begin>
    delayus(500U);
   1cd6a:	64 ef       	ldi	r22, 0xF4	; 244
   1cd6c:	71 e0       	ldi	r23, 0x01	; 1
   1cd6e:	80 e0       	ldi	r24, 0x00	; 0
   1cd70:	90 e0       	ldi	r25, 0x00	; 0
   1cd72:	0e 94 3d 2a 	call	0x547a	; 0x547a <delayus>
    clock_elapsed_end("delayus(500)");
   1cd76:	81 e6       	ldi	r24, 0x61	; 97
   1cd78:	97 e1       	ldi	r25, 0x17	; 23
   1cd7a:	0e 94 41 34 	call	0x6882	; 0x6882 <clock_elapsed_end>

    clock_elapsed_begin();
   1cd7e:	0e 94 3b 34 	call	0x6876	; 0x6876 <clock_elapsed_begin>
    delayus(1100);
   1cd82:	6c e4       	ldi	r22, 0x4C	; 76
   1cd84:	74 e0       	ldi	r23, 0x04	; 4
   1cd86:	80 e0       	ldi	r24, 0x00	; 0
   1cd88:	90 e0       	ldi	r25, 0x00	; 0
   1cd8a:	0e 94 3d 2a 	call	0x547a	; 0x547a <delayus>
    clock_elapsed_end("delayus(1100)");
   1cd8e:	8e e6       	ldi	r24, 0x6E	; 110
   1cd90:	97 e1       	ldi	r25, 0x17	; 23
   1cd92:	0e 94 41 34 	call	0x6882	; 0x6882 <clock_elapsed_end>

    clock_elapsed_begin();
   1cd96:	0e 94 3b 34 	call	0x6876	; 0x6876 <clock_elapsed_begin>
    delayms(1000);
   1cd9a:	68 ee       	ldi	r22, 0xE8	; 232
   1cd9c:	73 e0       	ldi	r23, 0x03	; 3
   1cd9e:	80 e0       	ldi	r24, 0x00	; 0
   1cda0:	90 e0       	ldi	r25, 0x00	; 0
   1cda2:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <delayms>
    clock_elapsed_end("delayms(1100)");
   1cda6:	8c e7       	ldi	r24, 0x7C	; 124
   1cda8:	97 e1       	ldi	r25, 0x17	; 23
   1cdaa:	0e 94 41 34 	call	0x6882	; 0x6882 <clock_elapsed_end>
}
   1cdae:	0f 90       	pop	r0
   1cdb0:	0f 90       	pop	r0
   1cdb2:	0f 90       	pop	r0
   1cdb4:	0f 90       	pop	r0
   1cdb6:	0f 90       	pop	r0
   1cdb8:	0f 90       	pop	r0
   1cdba:	08 95       	ret

0001cdbc <help>:
   1cdbc:	53 df       	rcall	.-346    	; 0x1cc64 <copyright>
   1cdbe:	80 e0       	ldi	r24, 0x00	; 0
   1cdc0:	90 e0       	ldi	r25, 0x00	; 0
   1cdc2:	0e 94 f5 75 	call	0xebea	; 0xebea <fatfs_help>
   1cdc6:	80 e0       	ldi	r24, 0x00	; 0
   1cdc8:	90 e0       	ldi	r25, 0x00	; 0
   1cdca:	0e 94 3d 82 	call	0x1047a	; 0x1047a <posix_help>
   1cdce:	80 e0       	ldi	r24, 0x00	; 0
   1cdd0:	90 e0       	ldi	r25, 0x00	; 0
   1cdd2:	0e 94 4d c7 	call	0x18e9a	; 0x18e9a <lif_help>
   1cdd6:	80 e0       	ldi	r24, 0x00	; 0
   1cdd8:	90 e0       	ldi	r25, 0x00	; 0
   1cdda:	0e 94 64 97 	call	0x12ec8	; 0x12ec8 <gpib_help>
   1cdde:	83 e1       	ldi	r24, 0x13	; 19
   1cde0:	98 e4       	ldi	r25, 0x48	; 72
   1cde2:	1f 92       	push	r1
   1cde4:	9f 93       	push	r25
   1cde6:	8f 93       	push	r24
   1cde8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1cdec:	0f 90       	pop	r0
   1cdee:	0f 90       	pop	r0
   1cdf0:	0f 90       	pop	r0
   1cdf2:	08 95       	ret

0001cdf4 <task>:
   1cdf4:	a4 ee       	ldi	r26, 0xE4	; 228
   1cdf6:	b0 e0       	ldi	r27, 0x00	; 0
   1cdf8:	ef ef       	ldi	r30, 0xFF	; 255
   1cdfa:	f6 ee       	ldi	r31, 0xE6	; 230
   1cdfc:	9c c2       	rjmp	.+1336   	; 0x1d336 <__prologue_saves__+0x18>
   1cdfe:	81 11       	cpse	r24, r1
   1ce00:	0e 94 02 97 	call	0x12e04	; 0x12e04 <gpib_task>
   1ce04:	80 e0       	ldi	r24, 0x00	; 0
   1ce06:	0e 94 dd 2b 	call	0x57ba	; 0x57ba <uart_rx_count>
   1ce0a:	89 2b       	or	r24, r25
   1ce0c:	09 f4       	brne	.+2      	; 0x1ce10 <task+0x1c>
   1ce0e:	a0 c0       	rjmp	.+320    	; 0x1cf50 <task+0x15c>
   1ce10:	80 e1       	ldi	r24, 0x10	; 16
   1ce12:	98 e4       	ldi	r25, 0x48	; 72
   1ce14:	1f 92       	push	r1
   1ce16:	9f 93       	push	r25
   1ce18:	8f 93       	push	r24
   1ce1a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1ce1e:	40 91 0a 1d 	lds	r20, 0x1D0A	; 0x801d0a <__iob>
   1ce22:	50 91 0b 1d 	lds	r21, 0x1D0B	; 0x801d0b <__iob+0x1>
   1ce26:	6e e7       	ldi	r22, 0x7E	; 126
   1ce28:	70 e0       	ldi	r23, 0x00	; 0
   1ce2a:	ce 01       	movw	r24, r28
   1ce2c:	01 96       	adiw	r24, 0x01	; 1
   1ce2e:	0e 94 20 79 	call	0xf240	; 0xf240 <fgets>
   1ce32:	42 e3       	ldi	r20, 0x32	; 50
   1ce34:	50 e0       	ldi	r21, 0x00	; 0
   1ce36:	be 01       	movw	r22, r28
   1ce38:	6f 57       	subi	r22, 0x7F	; 127
   1ce3a:	7f 4f       	sbci	r23, 0xFF	; 255
   1ce3c:	ce 01       	movw	r24, r28
   1ce3e:	01 96       	adiw	r24, 0x01	; 1
   1ce40:	0e 94 a7 31 	call	0x634e	; 0x634e <split_args>
   1ce44:	8c 01       	movw	r16, r24
   1ce46:	cf 57       	subi	r28, 0x7F	; 127
   1ce48:	df 4f       	sbci	r29, 0xFF	; 255
   1ce4a:	e8 80       	ld	r14, Y
   1ce4c:	f9 80       	ldd	r15, Y+1	; 0x01
   1ce4e:	c1 58       	subi	r28, 0x81	; 129
   1ce50:	d0 40       	sbci	r29, 0x00	; 0
   1ce52:	0f 90       	pop	r0
   1ce54:	0f 90       	pop	r0
   1ce56:	0f 90       	pop	r0
   1ce58:	e1 14       	cp	r14, r1
   1ce5a:	f1 04       	cpc	r15, r1
   1ce5c:	09 f4       	brne	.+2      	; 0x1ce60 <task+0x6c>
   1ce5e:	78 c0       	rjmp	.+240    	; 0x1cf50 <task+0x15c>
   1ce60:	9c 01       	movw	r18, r24
   1ce62:	41 e0       	ldi	r20, 0x01	; 1
   1ce64:	50 e0       	ldi	r21, 0x00	; 0
   1ce66:	6a e8       	ldi	r22, 0x8A	; 138
   1ce68:	77 e1       	ldi	r23, 0x17	; 23
   1ce6a:	c7 01       	movw	r24, r14
   1ce6c:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   1ce70:	89 2b       	or	r24, r25
   1ce72:	11 f0       	breq	.+4      	; 0x1ce78 <task+0x84>
   1ce74:	40 df       	rcall	.-384    	; 0x1ccf6 <delay_tests>
   1ce76:	6c c0       	rjmp	.+216    	; 0x1cf50 <task+0x15c>
   1ce78:	98 01       	movw	r18, r16
   1ce7a:	41 e0       	ldi	r20, 0x01	; 1
   1ce7c:	50 e0       	ldi	r21, 0x00	; 0
   1ce7e:	66 e9       	ldi	r22, 0x96	; 150
   1ce80:	77 e1       	ldi	r23, 0x17	; 23
   1ce82:	c7 01       	movw	r24, r14
   1ce84:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   1ce88:	89 2b       	or	r24, r25
   1ce8a:	61 f4       	brne	.+24     	; 0x1cea4 <task+0xb0>
   1ce8c:	98 01       	movw	r18, r16
   1ce8e:	41 e0       	ldi	r20, 0x01	; 1
   1ce90:	50 e0       	ldi	r21, 0x00	; 0
   1ce92:	6b e9       	ldi	r22, 0x9B	; 155
   1ce94:	77 e1       	ldi	r23, 0x17	; 23
   1ce96:	c7 01       	movw	r24, r14
   1ce98:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   1ce9c:	89 2b       	or	r24, r25
   1ce9e:	29 f0       	breq	.+10     	; 0x1ceaa <task+0xb6>
   1cea0:	0e 94 4a 3a 	call	0x7494	; 0x7494 <setdate>
   1cea4:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <display_clock>
   1cea8:	53 c0       	rjmp	.+166    	; 0x1cf50 <task+0x15c>
   1ceaa:	98 01       	movw	r18, r16
   1ceac:	41 e0       	ldi	r20, 0x01	; 1
   1ceae:	50 e0       	ldi	r21, 0x00	; 0
   1ceb0:	63 ea       	ldi	r22, 0xA3	; 163
   1ceb2:	77 e1       	ldi	r23, 0x17	; 23
   1ceb4:	c7 01       	movw	r24, r14
   1ceb6:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   1ceba:	89 2b       	or	r24, r25
   1cebc:	19 f0       	breq	.+6      	; 0x1cec4 <task+0xd0>
   1cebe:	0e 94 47 29 	call	0x528e	; 0x528e <PrintFree>
   1cec2:	46 c0       	rjmp	.+140    	; 0x1cf50 <task+0x15c>
   1cec4:	98 01       	movw	r18, r16
   1cec6:	41 e0       	ldi	r20, 0x01	; 1
   1cec8:	50 e0       	ldi	r21, 0x00	; 0
   1ceca:	63 ea       	ldi	r22, 0xA3	; 163
   1cecc:	76 e1       	ldi	r23, 0x16	; 22
   1cece:	c7 01       	movw	r24, r14
   1ced0:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   1ced4:	89 2b       	or	r24, r25
   1ced6:	11 f0       	breq	.+4      	; 0x1cedc <task+0xe8>
   1ced8:	71 df       	rcall	.-286    	; 0x1cdbc <help>
   1ceda:	3a c0       	rjmp	.+116    	; 0x1cf50 <task+0x15c>
   1cedc:	98 01       	movw	r18, r16
   1cede:	41 e0       	ldi	r20, 0x01	; 1
   1cee0:	50 e0       	ldi	r21, 0x00	; 0
   1cee2:	69 ea       	ldi	r22, 0xA9	; 169
   1cee4:	76 e1       	ldi	r23, 0x16	; 22
   1cee6:	c7 01       	movw	r24, r14
   1cee8:	0e 94 4a 31 	call	0x6294	; 0x6294 <MATCHARGS>
   1ceec:	89 2b       	or	r24, r25
   1ceee:	a1 f7       	brne	.-24     	; 0x1ced8 <task+0xe4>
   1cef0:	be 01       	movw	r22, r28
   1cef2:	6f 57       	subi	r22, 0x7F	; 127
   1cef4:	7f 4f       	sbci	r23, 0xFF	; 255
   1cef6:	c8 01       	movw	r24, r16
   1cef8:	0e 94 80 97 	call	0x12f00	; 0x12f00 <gpib_tests>
   1cefc:	89 2b       	or	r24, r25
   1cefe:	19 f0       	breq	.+6      	; 0x1cf06 <task+0x112>
   1cf00:	0e 94 cc 92 	call	0x12598	; 0x12598 <gpib_init_devices>
   1cf04:	25 c0       	rjmp	.+74     	; 0x1cf50 <task+0x15c>
   1cf06:	be 01       	movw	r22, r28
   1cf08:	6f 57       	subi	r22, 0x7F	; 127
   1cf0a:	7f 4f       	sbci	r23, 0xFF	; 255
   1cf0c:	c8 01       	movw	r24, r16
   1cf0e:	0e 94 cc 87 	call	0x10f98	; 0x10f98 <posix_tests>
   1cf12:	89 2b       	or	r24, r25
   1cf14:	e9 f4       	brne	.+58     	; 0x1cf50 <task+0x15c>
   1cf16:	be 01       	movw	r22, r28
   1cf18:	6f 57       	subi	r22, 0x7F	; 127
   1cf1a:	7f 4f       	sbci	r23, 0xFF	; 255
   1cf1c:	c8 01       	movw	r24, r16
   1cf1e:	0e 94 10 77 	call	0xee20	; 0xee20 <fatfs_tests>
   1cf22:	89 2b       	or	r24, r25
   1cf24:	a9 f4       	brne	.+42     	; 0x1cf50 <task+0x15c>
   1cf26:	be 01       	movw	r22, r28
   1cf28:	6f 57       	subi	r22, 0x7F	; 127
   1cf2a:	7f 4f       	sbci	r23, 0xFF	; 255
   1cf2c:	c8 01       	movw	r24, r16
   1cf2e:	74 dd       	rcall	.-1304   	; 0x1ca18 <lif_tests>
   1cf30:	89 2b       	or	r24, r25
   1cf32:	71 f4       	brne	.+28     	; 0x1cf50 <task+0x15c>
   1cf34:	ff 92       	push	r15
   1cf36:	ef 92       	push	r14
   1cf38:	84 e0       	ldi	r24, 0x04	; 4
   1cf3a:	98 e4       	ldi	r25, 0x48	; 72
   1cf3c:	1f 92       	push	r1
   1cf3e:	9f 93       	push	r25
   1cf40:	8f 93       	push	r24
   1cf42:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1cf46:	0f 90       	pop	r0
   1cf48:	0f 90       	pop	r0
   1cf4a:	0f 90       	pop	r0
   1cf4c:	0f 90       	pop	r0
   1cf4e:	0f 90       	pop	r0
   1cf50:	cc 51       	subi	r28, 0x1C	; 28
   1cf52:	df 4f       	sbci	r29, 0xFF	; 255
   1cf54:	e6 e0       	ldi	r30, 0x06	; 6
   1cf56:	0b c2       	rjmp	.+1046   	; 0x1d36e <__epilogue_restores__+0x18>

0001cf58 <main>:
   1cf58:	a8 e0       	ldi	r26, 0x08	; 8
   1cf5a:	b0 e0       	ldi	r27, 0x00	; 0
   1cf5c:	e1 eb       	ldi	r30, 0xB1	; 177
   1cf5e:	f7 ee       	ldi	r31, 0xE7	; 231
   1cf60:	e9 c1       	rjmp	.+978    	; 0x1d334 <__prologue_saves__+0x16>
   1cf62:	0e 94 fc 8b 	call	0x117f8	; 0x117f8 <gpib_bus_init>
   1cf66:	0e 94 c6 34 	call	0x698c	; 0x698c <init_timers>
   1cf6a:	40 e0       	ldi	r20, 0x00	; 0
   1cf6c:	52 ec       	ldi	r21, 0xC2	; 194
   1cf6e:	61 e0       	ldi	r22, 0x01	; 1
   1cf70:	70 e0       	ldi	r23, 0x00	; 0
   1cf72:	80 e0       	ldi	r24, 0x00	; 0
   1cf74:	0e 94 4c 2b 	call	0x5698	; 0x5698 <uart_init>
   1cf78:	06 2f       	mov	r16, r22
   1cf7a:	f7 2e       	mov	r15, r23
   1cf7c:	e8 2e       	mov	r14, r24
   1cf7e:	d9 2e       	mov	r13, r25
   1cf80:	68 ec       	ldi	r22, 0xC8	; 200
   1cf82:	70 e0       	ldi	r23, 0x00	; 0
   1cf84:	80 e0       	ldi	r24, 0x00	; 0
   1cf86:	90 e0       	ldi	r25, 0x00	; 0
   1cf88:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <delayms>
   1cf8c:	0e 94 20 30 	call	0x6040	; 0x6040 <sep>
   1cf90:	8d ef       	ldi	r24, 0xFD	; 253
   1cf92:	97 e4       	ldi	r25, 0x47	; 71
   1cf94:	1f 92       	push	r1
   1cf96:	9f 93       	push	r25
   1cf98:	8f 93       	push	r24
   1cf9a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1cf9e:	11 e0       	ldi	r17, 0x01	; 1
   1cfa0:	1f 93       	push	r17
   1cfa2:	81 e3       	ldi	r24, 0x31	; 49
   1cfa4:	8f 93       	push	r24
   1cfa6:	8d e2       	ldi	r24, 0x2D	; 45
   1cfa8:	8f 93       	push	r24
   1cfaa:	1f 92       	push	r1
   1cfac:	8c ee       	ldi	r24, 0xEC	; 236
   1cfae:	97 e4       	ldi	r25, 0x47	; 71
   1cfb0:	1f 92       	push	r1
   1cfb2:	9f 93       	push	r25
   1cfb4:	8f 93       	push	r24
   1cfb6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1cfba:	df 92       	push	r13
   1cfbc:	ef 92       	push	r14
   1cfbe:	ff 92       	push	r15
   1cfc0:	0f 93       	push	r16
   1cfc2:	1f 92       	push	r1
   1cfc4:	1f 93       	push	r17
   1cfc6:	82 ec       	ldi	r24, 0xC2	; 194
   1cfc8:	8f 93       	push	r24
   1cfca:	1f 92       	push	r1
   1cfcc:	85 ec       	ldi	r24, 0xC5	; 197
   1cfce:	97 e4       	ldi	r25, 0x47	; 71
   1cfd0:	1f 92       	push	r1
   1cfd2:	9f 93       	push	r25
   1cfd4:	8f 93       	push	r24
   1cfd6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1cfda:	0e 94 20 30 	call	0x6040	; 0x6040 <sep>
   1cfde:	86 ea       	ldi	r24, 0xA6	; 166
   1cfe0:	97 e4       	ldi	r25, 0x47	; 71
   1cfe2:	1f 92       	push	r1
   1cfe4:	9f 93       	push	r25
   1cfe6:	8f 93       	push	r24
   1cfe8:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1cfec:	89 e8       	ldi	r24, 0x89	; 137
   1cfee:	97 e4       	ldi	r25, 0x47	; 71
   1cff0:	1f 92       	push	r1
   1cff2:	9f 93       	push	r25
   1cff4:	8f 93       	push	r24
   1cff6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1cffa:	89 e7       	ldi	r24, 0x79	; 121
   1cffc:	97 e4       	ldi	r25, 0x47	; 71
   1cffe:	1f 92       	push	r1
   1d000:	9f 93       	push	r25
   1d002:	8f 93       	push	r24
   1d004:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1d008:	82 e5       	ldi	r24, 0x52	; 82
   1d00a:	97 e4       	ldi	r25, 0x47	; 71
   1d00c:	1f 92       	push	r1
   1d00e:	9f 93       	push	r25
   1d010:	8f 93       	push	r24
   1d012:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1d016:	0f b6       	in	r0, 0x3f	; 63
   1d018:	f8 94       	cli
   1d01a:	de bf       	out	0x3e, r29	; 62
   1d01c:	0f be       	out	0x3f, r0	; 63
   1d01e:	cd bf       	out	0x3d, r28	; 61
   1d020:	87 ed       	ldi	r24, 0xD7	; 215
   1d022:	96 e1       	ldi	r25, 0x16	; 22
   1d024:	9f 93       	push	r25
   1d026:	8f 93       	push	r24
   1d028:	88 e3       	ldi	r24, 0x38	; 56
   1d02a:	97 e4       	ldi	r25, 0x47	; 71
   1d02c:	1f 92       	push	r1
   1d02e:	9f 93       	push	r25
   1d030:	8f 93       	push	r24
   1d032:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1d036:	8b ef       	ldi	r24, 0xFB	; 251
   1d038:	96 e1       	ldi	r25, 0x16	; 22
   1d03a:	9f 93       	push	r25
   1d03c:	8f 93       	push	r24
   1d03e:	8e e1       	ldi	r24, 0x1E	; 30
   1d040:	97 e4       	ldi	r25, 0x47	; 71
   1d042:	1f 92       	push	r1
   1d044:	9f 93       	push	r25
   1d046:	8f 93       	push	r24
   1d048:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1d04c:	0e 94 20 30 	call	0x6040	; 0x6040 <sep>
   1d050:	0e 94 47 29 	call	0x528e	; 0x528e <PrintFree>
   1d054:	0e 94 20 30 	call	0x6040	; 0x6040 <sep>
   1d058:	68 ec       	ldi	r22, 0xC8	; 200
   1d05a:	70 e0       	ldi	r23, 0x00	; 0
   1d05c:	80 e0       	ldi	r24, 0x00	; 0
   1d05e:	90 e0       	ldi	r25, 0x00	; 0
   1d060:	0e 94 6a 2a 	call	0x54d4	; 0x54d4 <delayms>
   1d064:	88 e0       	ldi	r24, 0x08	; 8
   1d066:	97 e4       	ldi	r25, 0x47	; 71
   1d068:	1f 92       	push	r1
   1d06a:	9f 93       	push	r25
   1d06c:	8f 93       	push	r24
   1d06e:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1d072:	4b e0       	ldi	r20, 0x0B	; 11
   1d074:	50 e0       	ldi	r21, 0x00	; 0
   1d076:	60 e2       	ldi	r22, 0x20	; 32
   1d078:	71 ea       	ldi	r23, 0xA1	; 161
   1d07a:	87 e0       	ldi	r24, 0x07	; 7
   1d07c:	90 e0       	ldi	r25, 0x00	; 0
   1d07e:	0e 94 c3 28 	call	0x5186	; 0x5186 <spi_init>
   1d082:	82 ef       	ldi	r24, 0xF2	; 242
   1d084:	96 e4       	ldi	r25, 0x46	; 70
   1d086:	1f 92       	push	r1
   1d088:	9f 93       	push	r25
   1d08a:	8f 93       	push	r24
   1d08c:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1d090:	6a e2       	ldi	r22, 0x2A	; 42
   1d092:	81 e0       	ldi	r24, 0x01	; 1
   1d094:	0e 94 69 2d 	call	0x5ad2	; 0x5ad2 <TWI_Init>
   1d098:	0e 94 20 30 	call	0x6040	; 0x6040 <sep>
   1d09c:	0e 94 83 34 	call	0x6906	; 0x6906 <clock_clear>
   1d0a0:	83 ee       	ldi	r24, 0xE3	; 227
   1d0a2:	96 e4       	ldi	r25, 0x46	; 70
   1d0a4:	1f 92       	push	r1
   1d0a6:	9f 93       	push	r25
   1d0a8:	8f 93       	push	r24
   1d0aa:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1d0ae:	be 01       	movw	r22, r28
   1d0b0:	6f 5f       	subi	r22, 0xFF	; 255
   1d0b2:	7f 4f       	sbci	r23, 0xFF	; 255
   1d0b4:	80 e0       	ldi	r24, 0x00	; 0
   1d0b6:	90 e0       	ldi	r25, 0x00	; 0
   1d0b8:	0e 94 1e 35 	call	0x6a3c	; 0x6a3c <clock_getres>
   1d0bc:	88 85       	ldd	r24, Y+8	; 0x08
   1d0be:	8f 93       	push	r24
   1d0c0:	8f 81       	ldd	r24, Y+7	; 0x07
   1d0c2:	8f 93       	push	r24
   1d0c4:	8e 81       	ldd	r24, Y+6	; 0x06
   1d0c6:	8f 93       	push	r24
   1d0c8:	8d 81       	ldd	r24, Y+5	; 0x05
   1d0ca:	8f 93       	push	r24
   1d0cc:	86 ec       	ldi	r24, 0xC6	; 198
   1d0ce:	96 e4       	ldi	r25, 0x46	; 70
   1d0d0:	1f 92       	push	r1
   1d0d2:	9f 93       	push	r25
   1d0d4:	8f 93       	push	r24
   1d0d6:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1d0da:	8c e2       	ldi	r24, 0x2C	; 44
   1d0dc:	91 e0       	ldi	r25, 0x01	; 1
   1d0de:	0e 94 ec 3b 	call	0x77d8	; 0x77d8 <initialize_clock>
   1d0e2:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <display_clock>
   1d0e6:	0e 94 20 30 	call	0x6040	; 0x6040 <sep>
   1d0ea:	81 e0       	ldi	r24, 0x01	; 1
   1d0ec:	90 e0       	ldi	r25, 0x00	; 0
   1d0ee:	0e 94 49 72 	call	0xe492	; 0xe492 <mmc_init>
   1d0f2:	0e 94 fc 8b 	call	0x117f8	; 0x117f8 <gpib_bus_init>
   1d0f6:	8f ea       	ldi	r24, 0xAF	; 175
   1d0f8:	96 e4       	ldi	r25, 0x46	; 70
   1d0fa:	1f 92       	push	r1
   1d0fc:	9f 93       	push	r25
   1d0fe:	8f 93       	push	r24
   1d100:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1d104:	0e 94 20 30 	call	0x6040	; 0x6040 <sep>
   1d108:	0e 94 8c b2 	call	0x16518	; 0x16518 <printer_init>
   1d10c:	8c e9       	ldi	r24, 0x9C	; 156
   1d10e:	96 e4       	ldi	r25, 0x46	; 70
   1d110:	1f 92       	push	r1
   1d112:	9f 93       	push	r25
   1d114:	8f 93       	push	r24
   1d116:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1d11a:	0f b6       	in	r0, 0x3f	; 63
   1d11c:	f8 94       	cli
   1d11e:	de bf       	out	0x3e, r29	; 62
   1d120:	0f be       	out	0x3f, r0	; 63
   1d122:	cd bf       	out	0x3d, r28	; 61
   1d124:	0e 94 20 30 	call	0x6040	; 0x6040 <sep>
   1d128:	8a e8       	ldi	r24, 0x8A	; 138
   1d12a:	96 e4       	ldi	r25, 0x46	; 70
   1d12c:	1f 92       	push	r1
   1d12e:	9f 93       	push	r25
   1d130:	8f 93       	push	r24
   1d132:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1d136:	0e 94 0c 8a 	call	0x11418	; 0x11418 <gpib_timer_init>
   1d13a:	84 e7       	ldi	r24, 0x74	; 116
   1d13c:	96 e4       	ldi	r25, 0x46	; 70
   1d13e:	1f 92       	push	r1
   1d140:	9f 93       	push	r25
   1d142:	8f 93       	push	r24
   1d144:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1d148:	0e 94 15 92 	call	0x1242a	; 0x1242a <gpib_file_init>
   1d14c:	8f e5       	ldi	r24, 0x5F	; 95
   1d14e:	96 e4       	ldi	r25, 0x46	; 70
   1d150:	1f 92       	push	r1
   1d152:	9f 93       	push	r25
   1d154:	8f 93       	push	r24
   1d156:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1d15a:	0e 94 24 8c 	call	0x11848	; 0x11848 <gpib_state_init>
   1d15e:	89 e4       	ldi	r24, 0x49	; 73
   1d160:	96 e4       	ldi	r25, 0x46	; 70
   1d162:	1f 92       	push	r1
   1d164:	9f 93       	push	r25
   1d166:	8f 93       	push	r24
   1d168:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1d16c:	0e 94 20 30 	call	0x6040	; 0x6040 <sep>
   1d170:	0e 94 ee c2 	call	0x185dc	; 0x185dc <display_Config>
   1d174:	0e 94 48 c5 	call	0x18a90	; 0x18a90 <format_drives>
   1d178:	0e 94 20 30 	call	0x6040	; 0x6040 <sep>
   1d17c:	0e 94 f3 c1 	call	0x183e6	; 0x183e6 <display_Addresses>
   1d180:	0e 94 20 30 	call	0x6040	; 0x6040 <sep>
   1d184:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1d188:	8f 93       	push	r24
   1d18a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1d18e:	8f 93       	push	r24
   1d190:	83 e3       	ldi	r24, 0x33	; 51
   1d192:	96 e4       	ldi	r25, 0x46	; 70
   1d194:	1f 92       	push	r1
   1d196:	9f 93       	push	r25
   1d198:	8f 93       	push	r24
   1d19a:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1d19e:	0e 94 20 30 	call	0x6040	; 0x6040 <sep>
   1d1a2:	8f e1       	ldi	r24, 0x1F	; 31
   1d1a4:	96 e4       	ldi	r25, 0x46	; 70
   1d1a6:	1f 92       	push	r1
   1d1a8:	9f 93       	push	r25
   1d1aa:	8f 93       	push	r24
   1d1ac:	0e 94 0e 45 	call	0x8a1c	; 0x8a1c <printf_P>
   1d1b0:	0f b6       	in	r0, 0x3f	; 63
   1d1b2:	f8 94       	cli
   1d1b4:	de bf       	out	0x3e, r29	; 62
   1d1b6:	0f be       	out	0x3f, r0	; 63
   1d1b8:	cd bf       	out	0x3d, r28	; 61
   1d1ba:	81 e0       	ldi	r24, 0x01	; 1
   1d1bc:	1b de       	rcall	.-970    	; 0x1cdf4 <task>
   1d1be:	fd cf       	rjmp	.-6      	; 0x1d1ba <main+0x262>

0001d1c0 <__mulsi3>:
   1d1c0:	db 01       	movw	r26, r22
   1d1c2:	8f 93       	push	r24
   1d1c4:	9f 93       	push	r25
   1d1c6:	8b d0       	rcall	.+278    	; 0x1d2de <__muluhisi3>
   1d1c8:	bf 91       	pop	r27
   1d1ca:	af 91       	pop	r26
   1d1cc:	a2 9f       	mul	r26, r18
   1d1ce:	80 0d       	add	r24, r0
   1d1d0:	91 1d       	adc	r25, r1
   1d1d2:	a3 9f       	mul	r26, r19
   1d1d4:	90 0d       	add	r25, r0
   1d1d6:	b2 9f       	mul	r27, r18
   1d1d8:	90 0d       	add	r25, r0
   1d1da:	11 24       	eor	r1, r1
   1d1dc:	08 95       	ret

0001d1de <__udivmodqi4>:
   1d1de:	99 1b       	sub	r25, r25
   1d1e0:	79 e0       	ldi	r23, 0x09	; 9
   1d1e2:	04 c0       	rjmp	.+8      	; 0x1d1ec <__udivmodqi4_ep>

0001d1e4 <__udivmodqi4_loop>:
   1d1e4:	99 1f       	adc	r25, r25
   1d1e6:	96 17       	cp	r25, r22
   1d1e8:	08 f0       	brcs	.+2      	; 0x1d1ec <__udivmodqi4_ep>
   1d1ea:	96 1b       	sub	r25, r22

0001d1ec <__udivmodqi4_ep>:
   1d1ec:	88 1f       	adc	r24, r24
   1d1ee:	7a 95       	dec	r23
   1d1f0:	c9 f7       	brne	.-14     	; 0x1d1e4 <__udivmodqi4_loop>
   1d1f2:	80 95       	com	r24
   1d1f4:	08 95       	ret

0001d1f6 <__udivmodhi4>:
   1d1f6:	aa 1b       	sub	r26, r26
   1d1f8:	bb 1b       	sub	r27, r27
   1d1fa:	51 e1       	ldi	r21, 0x11	; 17
   1d1fc:	07 c0       	rjmp	.+14     	; 0x1d20c <__udivmodhi4_ep>

0001d1fe <__udivmodhi4_loop>:
   1d1fe:	aa 1f       	adc	r26, r26
   1d200:	bb 1f       	adc	r27, r27
   1d202:	a6 17       	cp	r26, r22
   1d204:	b7 07       	cpc	r27, r23
   1d206:	10 f0       	brcs	.+4      	; 0x1d20c <__udivmodhi4_ep>
   1d208:	a6 1b       	sub	r26, r22
   1d20a:	b7 0b       	sbc	r27, r23

0001d20c <__udivmodhi4_ep>:
   1d20c:	88 1f       	adc	r24, r24
   1d20e:	99 1f       	adc	r25, r25
   1d210:	5a 95       	dec	r21
   1d212:	a9 f7       	brne	.-22     	; 0x1d1fe <__udivmodhi4_loop>
   1d214:	80 95       	com	r24
   1d216:	90 95       	com	r25
   1d218:	bc 01       	movw	r22, r24
   1d21a:	cd 01       	movw	r24, r26
   1d21c:	08 95       	ret

0001d21e <__divmodhi4>:
   1d21e:	97 fb       	bst	r25, 7
   1d220:	07 2e       	mov	r0, r23
   1d222:	16 f4       	brtc	.+4      	; 0x1d228 <__divmodhi4+0xa>
   1d224:	00 94       	com	r0
   1d226:	06 d0       	rcall	.+12     	; 0x1d234 <__divmodhi4_neg1>
   1d228:	77 fd       	sbrc	r23, 7
   1d22a:	08 d0       	rcall	.+16     	; 0x1d23c <__divmodhi4_neg2>
   1d22c:	e4 df       	rcall	.-56     	; 0x1d1f6 <__udivmodhi4>
   1d22e:	07 fc       	sbrc	r0, 7
   1d230:	05 d0       	rcall	.+10     	; 0x1d23c <__divmodhi4_neg2>
   1d232:	3e f4       	brtc	.+14     	; 0x1d242 <__divmodhi4_exit>

0001d234 <__divmodhi4_neg1>:
   1d234:	90 95       	com	r25
   1d236:	81 95       	neg	r24
   1d238:	9f 4f       	sbci	r25, 0xFF	; 255
   1d23a:	08 95       	ret

0001d23c <__divmodhi4_neg2>:
   1d23c:	70 95       	com	r23
   1d23e:	61 95       	neg	r22
   1d240:	7f 4f       	sbci	r23, 0xFF	; 255

0001d242 <__divmodhi4_exit>:
   1d242:	08 95       	ret

0001d244 <__udivmodsi4>:
   1d244:	a1 e2       	ldi	r26, 0x21	; 33
   1d246:	1a 2e       	mov	r1, r26
   1d248:	aa 1b       	sub	r26, r26
   1d24a:	bb 1b       	sub	r27, r27
   1d24c:	fd 01       	movw	r30, r26
   1d24e:	0d c0       	rjmp	.+26     	; 0x1d26a <__udivmodsi4_ep>

0001d250 <__udivmodsi4_loop>:
   1d250:	aa 1f       	adc	r26, r26
   1d252:	bb 1f       	adc	r27, r27
   1d254:	ee 1f       	adc	r30, r30
   1d256:	ff 1f       	adc	r31, r31
   1d258:	a2 17       	cp	r26, r18
   1d25a:	b3 07       	cpc	r27, r19
   1d25c:	e4 07       	cpc	r30, r20
   1d25e:	f5 07       	cpc	r31, r21
   1d260:	20 f0       	brcs	.+8      	; 0x1d26a <__udivmodsi4_ep>
   1d262:	a2 1b       	sub	r26, r18
   1d264:	b3 0b       	sbc	r27, r19
   1d266:	e4 0b       	sbc	r30, r20
   1d268:	f5 0b       	sbc	r31, r21

0001d26a <__udivmodsi4_ep>:
   1d26a:	66 1f       	adc	r22, r22
   1d26c:	77 1f       	adc	r23, r23
   1d26e:	88 1f       	adc	r24, r24
   1d270:	99 1f       	adc	r25, r25
   1d272:	1a 94       	dec	r1
   1d274:	69 f7       	brne	.-38     	; 0x1d250 <__udivmodsi4_loop>
   1d276:	60 95       	com	r22
   1d278:	70 95       	com	r23
   1d27a:	80 95       	com	r24
   1d27c:	90 95       	com	r25
   1d27e:	9b 01       	movw	r18, r22
   1d280:	ac 01       	movw	r20, r24
   1d282:	bd 01       	movw	r22, r26
   1d284:	cf 01       	movw	r24, r30
   1d286:	08 95       	ret

0001d288 <__divmodsi4>:
   1d288:	05 2e       	mov	r0, r21
   1d28a:	97 fb       	bst	r25, 7
   1d28c:	16 f4       	brtc	.+4      	; 0x1d292 <__divmodsi4+0xa>
   1d28e:	00 94       	com	r0
   1d290:	0f d0       	rcall	.+30     	; 0x1d2b0 <__negsi2>
   1d292:	57 fd       	sbrc	r21, 7
   1d294:	05 d0       	rcall	.+10     	; 0x1d2a0 <__divmodsi4_neg2>
   1d296:	d6 df       	rcall	.-84     	; 0x1d244 <__udivmodsi4>
   1d298:	07 fc       	sbrc	r0, 7
   1d29a:	02 d0       	rcall	.+4      	; 0x1d2a0 <__divmodsi4_neg2>
   1d29c:	46 f4       	brtc	.+16     	; 0x1d2ae <__divmodsi4_exit>
   1d29e:	08 c0       	rjmp	.+16     	; 0x1d2b0 <__negsi2>

0001d2a0 <__divmodsi4_neg2>:
   1d2a0:	50 95       	com	r21
   1d2a2:	40 95       	com	r20
   1d2a4:	30 95       	com	r19
   1d2a6:	21 95       	neg	r18
   1d2a8:	3f 4f       	sbci	r19, 0xFF	; 255
   1d2aa:	4f 4f       	sbci	r20, 0xFF	; 255
   1d2ac:	5f 4f       	sbci	r21, 0xFF	; 255

0001d2ae <__divmodsi4_exit>:
   1d2ae:	08 95       	ret

0001d2b0 <__negsi2>:
   1d2b0:	90 95       	com	r25
   1d2b2:	80 95       	com	r24
   1d2b4:	70 95       	com	r23
   1d2b6:	61 95       	neg	r22
   1d2b8:	7f 4f       	sbci	r23, 0xFF	; 255
   1d2ba:	8f 4f       	sbci	r24, 0xFF	; 255
   1d2bc:	9f 4f       	sbci	r25, 0xFF	; 255
   1d2be:	08 95       	ret

0001d2c0 <__tablejump2__>:
   1d2c0:	ee 0f       	add	r30, r30
   1d2c2:	ff 1f       	adc	r31, r31
   1d2c4:	00 24       	eor	r0, r0
   1d2c6:	00 1c       	adc	r0, r0
   1d2c8:	0b be       	out	0x3b, r0	; 59
   1d2ca:	07 90       	elpm	r0, Z+
   1d2cc:	f6 91       	elpm	r31, Z
   1d2ce:	e0 2d       	mov	r30, r0
   1d2d0:	09 94       	ijmp

0001d2d2 <__usmulhisi3>:
   1d2d2:	6f d0       	rcall	.+222    	; 0x1d3b2 <__umulhisi3>

0001d2d4 <__usmulhisi3_tail>:
   1d2d4:	b7 ff       	sbrs	r27, 7
   1d2d6:	08 95       	ret
   1d2d8:	82 1b       	sub	r24, r18
   1d2da:	93 0b       	sbc	r25, r19
   1d2dc:	08 95       	ret

0001d2de <__muluhisi3>:
   1d2de:	69 d0       	rcall	.+210    	; 0x1d3b2 <__umulhisi3>
   1d2e0:	a5 9f       	mul	r26, r21
   1d2e2:	90 0d       	add	r25, r0
   1d2e4:	b4 9f       	mul	r27, r20
   1d2e6:	90 0d       	add	r25, r0
   1d2e8:	a4 9f       	mul	r26, r20
   1d2ea:	80 0d       	add	r24, r0
   1d2ec:	91 1d       	adc	r25, r1
   1d2ee:	11 24       	eor	r1, r1
   1d2f0:	08 95       	ret

0001d2f2 <__mulshisi3>:
   1d2f2:	b7 ff       	sbrs	r27, 7
   1d2f4:	f4 cf       	rjmp	.-24     	; 0x1d2de <__muluhisi3>

0001d2f6 <__mulohisi3>:
   1d2f6:	f3 df       	rcall	.-26     	; 0x1d2de <__muluhisi3>
   1d2f8:	82 1b       	sub	r24, r18
   1d2fa:	93 0b       	sbc	r25, r19
   1d2fc:	08 95       	ret

0001d2fe <__negdi2>:
   1d2fe:	60 95       	com	r22
   1d300:	70 95       	com	r23
   1d302:	80 95       	com	r24
   1d304:	90 95       	com	r25
   1d306:	30 95       	com	r19
   1d308:	40 95       	com	r20
   1d30a:	50 95       	com	r21
   1d30c:	21 95       	neg	r18
   1d30e:	3f 4f       	sbci	r19, 0xFF	; 255
   1d310:	4f 4f       	sbci	r20, 0xFF	; 255
   1d312:	5f 4f       	sbci	r21, 0xFF	; 255
   1d314:	6f 4f       	sbci	r22, 0xFF	; 255
   1d316:	7f 4f       	sbci	r23, 0xFF	; 255
   1d318:	8f 4f       	sbci	r24, 0xFF	; 255
   1d31a:	9f 4f       	sbci	r25, 0xFF	; 255
   1d31c:	08 95       	ret

0001d31e <__prologue_saves__>:
   1d31e:	2f 92       	push	r2
   1d320:	3f 92       	push	r3
   1d322:	4f 92       	push	r4
   1d324:	5f 92       	push	r5
   1d326:	6f 92       	push	r6
   1d328:	7f 92       	push	r7
   1d32a:	8f 92       	push	r8
   1d32c:	9f 92       	push	r9
   1d32e:	af 92       	push	r10
   1d330:	bf 92       	push	r11
   1d332:	cf 92       	push	r12
   1d334:	df 92       	push	r13
   1d336:	ef 92       	push	r14
   1d338:	ff 92       	push	r15
   1d33a:	0f 93       	push	r16
   1d33c:	1f 93       	push	r17
   1d33e:	cf 93       	push	r28
   1d340:	df 93       	push	r29
   1d342:	cd b7       	in	r28, 0x3d	; 61
   1d344:	de b7       	in	r29, 0x3e	; 62
   1d346:	ca 1b       	sub	r28, r26
   1d348:	db 0b       	sbc	r29, r27
   1d34a:	0f b6       	in	r0, 0x3f	; 63
   1d34c:	f8 94       	cli
   1d34e:	de bf       	out	0x3e, r29	; 62
   1d350:	0f be       	out	0x3f, r0	; 63
   1d352:	cd bf       	out	0x3d, r28	; 61
   1d354:	09 94       	ijmp

0001d356 <__epilogue_restores__>:
   1d356:	2a 88       	ldd	r2, Y+18	; 0x12
   1d358:	39 88       	ldd	r3, Y+17	; 0x11
   1d35a:	48 88       	ldd	r4, Y+16	; 0x10
   1d35c:	5f 84       	ldd	r5, Y+15	; 0x0f
   1d35e:	6e 84       	ldd	r6, Y+14	; 0x0e
   1d360:	7d 84       	ldd	r7, Y+13	; 0x0d
   1d362:	8c 84       	ldd	r8, Y+12	; 0x0c
   1d364:	9b 84       	ldd	r9, Y+11	; 0x0b
   1d366:	aa 84       	ldd	r10, Y+10	; 0x0a
   1d368:	b9 84       	ldd	r11, Y+9	; 0x09
   1d36a:	c8 84       	ldd	r12, Y+8	; 0x08
   1d36c:	df 80       	ldd	r13, Y+7	; 0x07
   1d36e:	ee 80       	ldd	r14, Y+6	; 0x06
   1d370:	fd 80       	ldd	r15, Y+5	; 0x05
   1d372:	0c 81       	ldd	r16, Y+4	; 0x04
   1d374:	1b 81       	ldd	r17, Y+3	; 0x03
   1d376:	aa 81       	ldd	r26, Y+2	; 0x02
   1d378:	b9 81       	ldd	r27, Y+1	; 0x01
   1d37a:	ce 0f       	add	r28, r30
   1d37c:	d1 1d       	adc	r29, r1
   1d37e:	0f b6       	in	r0, 0x3f	; 63
   1d380:	f8 94       	cli
   1d382:	de bf       	out	0x3e, r29	; 62
   1d384:	0f be       	out	0x3f, r0	; 63
   1d386:	cd bf       	out	0x3d, r28	; 61
   1d388:	ed 01       	movw	r28, r26
   1d38a:	08 95       	ret

0001d38c <__xload_1>:
   1d38c:	57 fd       	sbrc	r21, 7
   1d38e:	03 c0       	rjmp	.+6      	; 0x1d396 <__xload_1+0xa>
   1d390:	5b bf       	out	0x3b, r21	; 59
   1d392:	67 91       	elpm	r22, Z+
   1d394:	08 95       	ret
   1d396:	60 81       	ld	r22, Z
   1d398:	08 95       	ret

0001d39a <__cmpdi2_s8>:
   1d39a:	00 24       	eor	r0, r0
   1d39c:	a7 fd       	sbrc	r26, 7
   1d39e:	00 94       	com	r0
   1d3a0:	2a 17       	cp	r18, r26
   1d3a2:	30 05       	cpc	r19, r0
   1d3a4:	40 05       	cpc	r20, r0
   1d3a6:	50 05       	cpc	r21, r0
   1d3a8:	60 05       	cpc	r22, r0
   1d3aa:	70 05       	cpc	r23, r0
   1d3ac:	80 05       	cpc	r24, r0
   1d3ae:	90 05       	cpc	r25, r0
   1d3b0:	08 95       	ret

0001d3b2 <__umulhisi3>:
   1d3b2:	a2 9f       	mul	r26, r18
   1d3b4:	b0 01       	movw	r22, r0
   1d3b6:	b3 9f       	mul	r27, r19
   1d3b8:	c0 01       	movw	r24, r0
   1d3ba:	a3 9f       	mul	r26, r19
   1d3bc:	70 0d       	add	r23, r0
   1d3be:	81 1d       	adc	r24, r1
   1d3c0:	11 24       	eor	r1, r1
   1d3c2:	91 1d       	adc	r25, r1
   1d3c4:	b2 9f       	mul	r27, r18
   1d3c6:	70 0d       	add	r23, r0
   1d3c8:	81 1d       	adc	r24, r1
   1d3ca:	11 24       	eor	r1, r1
   1d3cc:	91 1d       	adc	r25, r1
   1d3ce:	08 95       	ret

0001d3d0 <__subsf3>:
   1d3d0:	50 58       	subi	r21, 0x80	; 128

0001d3d2 <__addsf3>:
   1d3d2:	bb 27       	eor	r27, r27
   1d3d4:	aa 27       	eor	r26, r26
   1d3d6:	0e d0       	rcall	.+28     	; 0x1d3f4 <__addsf3x>
   1d3d8:	75 c1       	rjmp	.+746    	; 0x1d6c4 <__fp_round>
   1d3da:	66 d1       	rcall	.+716    	; 0x1d6a8 <__fp_pscA>
   1d3dc:	30 f0       	brcs	.+12     	; 0x1d3ea <__addsf3+0x18>
   1d3de:	6b d1       	rcall	.+726    	; 0x1d6b6 <__fp_pscB>
   1d3e0:	20 f0       	brcs	.+8      	; 0x1d3ea <__addsf3+0x18>
   1d3e2:	31 f4       	brne	.+12     	; 0x1d3f0 <__addsf3+0x1e>
   1d3e4:	9f 3f       	cpi	r25, 0xFF	; 255
   1d3e6:	11 f4       	brne	.+4      	; 0x1d3ec <__addsf3+0x1a>
   1d3e8:	1e f4       	brtc	.+6      	; 0x1d3f0 <__addsf3+0x1e>
   1d3ea:	5b c1       	rjmp	.+694    	; 0x1d6a2 <__fp_nan>
   1d3ec:	0e f4       	brtc	.+2      	; 0x1d3f0 <__addsf3+0x1e>
   1d3ee:	e0 95       	com	r30
   1d3f0:	e7 fb       	bst	r30, 7
   1d3f2:	51 c1       	rjmp	.+674    	; 0x1d696 <__fp_inf>

0001d3f4 <__addsf3x>:
   1d3f4:	e9 2f       	mov	r30, r25
   1d3f6:	77 d1       	rcall	.+750    	; 0x1d6e6 <__fp_split3>
   1d3f8:	80 f3       	brcs	.-32     	; 0x1d3da <__addsf3+0x8>
   1d3fa:	ba 17       	cp	r27, r26
   1d3fc:	62 07       	cpc	r22, r18
   1d3fe:	73 07       	cpc	r23, r19
   1d400:	84 07       	cpc	r24, r20
   1d402:	95 07       	cpc	r25, r21
   1d404:	18 f0       	brcs	.+6      	; 0x1d40c <__addsf3x+0x18>
   1d406:	71 f4       	brne	.+28     	; 0x1d424 <__addsf3x+0x30>
   1d408:	9e f5       	brtc	.+102    	; 0x1d470 <__addsf3x+0x7c>
   1d40a:	8f c1       	rjmp	.+798    	; 0x1d72a <__fp_zero>
   1d40c:	0e f4       	brtc	.+2      	; 0x1d410 <__addsf3x+0x1c>
   1d40e:	e0 95       	com	r30
   1d410:	0b 2e       	mov	r0, r27
   1d412:	ba 2f       	mov	r27, r26
   1d414:	a0 2d       	mov	r26, r0
   1d416:	0b 01       	movw	r0, r22
   1d418:	b9 01       	movw	r22, r18
   1d41a:	90 01       	movw	r18, r0
   1d41c:	0c 01       	movw	r0, r24
   1d41e:	ca 01       	movw	r24, r20
   1d420:	a0 01       	movw	r20, r0
   1d422:	11 24       	eor	r1, r1
   1d424:	ff 27       	eor	r31, r31
   1d426:	59 1b       	sub	r21, r25
   1d428:	99 f0       	breq	.+38     	; 0x1d450 <__addsf3x+0x5c>
   1d42a:	59 3f       	cpi	r21, 0xF9	; 249
   1d42c:	50 f4       	brcc	.+20     	; 0x1d442 <__addsf3x+0x4e>
   1d42e:	50 3e       	cpi	r21, 0xE0	; 224
   1d430:	68 f1       	brcs	.+90     	; 0x1d48c <__addsf3x+0x98>
   1d432:	1a 16       	cp	r1, r26
   1d434:	f0 40       	sbci	r31, 0x00	; 0
   1d436:	a2 2f       	mov	r26, r18
   1d438:	23 2f       	mov	r18, r19
   1d43a:	34 2f       	mov	r19, r20
   1d43c:	44 27       	eor	r20, r20
   1d43e:	58 5f       	subi	r21, 0xF8	; 248
   1d440:	f3 cf       	rjmp	.-26     	; 0x1d428 <__addsf3x+0x34>
   1d442:	46 95       	lsr	r20
   1d444:	37 95       	ror	r19
   1d446:	27 95       	ror	r18
   1d448:	a7 95       	ror	r26
   1d44a:	f0 40       	sbci	r31, 0x00	; 0
   1d44c:	53 95       	inc	r21
   1d44e:	c9 f7       	brne	.-14     	; 0x1d442 <__addsf3x+0x4e>
   1d450:	7e f4       	brtc	.+30     	; 0x1d470 <__addsf3x+0x7c>
   1d452:	1f 16       	cp	r1, r31
   1d454:	ba 0b       	sbc	r27, r26
   1d456:	62 0b       	sbc	r22, r18
   1d458:	73 0b       	sbc	r23, r19
   1d45a:	84 0b       	sbc	r24, r20
   1d45c:	ba f0       	brmi	.+46     	; 0x1d48c <__addsf3x+0x98>
   1d45e:	91 50       	subi	r25, 0x01	; 1
   1d460:	a1 f0       	breq	.+40     	; 0x1d48a <__addsf3x+0x96>
   1d462:	ff 0f       	add	r31, r31
   1d464:	bb 1f       	adc	r27, r27
   1d466:	66 1f       	adc	r22, r22
   1d468:	77 1f       	adc	r23, r23
   1d46a:	88 1f       	adc	r24, r24
   1d46c:	c2 f7       	brpl	.-16     	; 0x1d45e <__addsf3x+0x6a>
   1d46e:	0e c0       	rjmp	.+28     	; 0x1d48c <__addsf3x+0x98>
   1d470:	ba 0f       	add	r27, r26
   1d472:	62 1f       	adc	r22, r18
   1d474:	73 1f       	adc	r23, r19
   1d476:	84 1f       	adc	r24, r20
   1d478:	48 f4       	brcc	.+18     	; 0x1d48c <__addsf3x+0x98>
   1d47a:	87 95       	ror	r24
   1d47c:	77 95       	ror	r23
   1d47e:	67 95       	ror	r22
   1d480:	b7 95       	ror	r27
   1d482:	f7 95       	ror	r31
   1d484:	9e 3f       	cpi	r25, 0xFE	; 254
   1d486:	08 f0       	brcs	.+2      	; 0x1d48a <__addsf3x+0x96>
   1d488:	b3 cf       	rjmp	.-154    	; 0x1d3f0 <__addsf3+0x1e>
   1d48a:	93 95       	inc	r25
   1d48c:	88 0f       	add	r24, r24
   1d48e:	08 f0       	brcs	.+2      	; 0x1d492 <__addsf3x+0x9e>
   1d490:	99 27       	eor	r25, r25
   1d492:	ee 0f       	add	r30, r30
   1d494:	97 95       	ror	r25
   1d496:	87 95       	ror	r24
   1d498:	08 95       	ret

0001d49a <__cmpsf2>:
   1d49a:	d9 d0       	rcall	.+434    	; 0x1d64e <__fp_cmp>
   1d49c:	08 f4       	brcc	.+2      	; 0x1d4a0 <__cmpsf2+0x6>
   1d49e:	81 e0       	ldi	r24, 0x01	; 1
   1d4a0:	08 95       	ret

0001d4a2 <__divsf3>:
   1d4a2:	0c d0       	rcall	.+24     	; 0x1d4bc <__divsf3x>
   1d4a4:	0f c1       	rjmp	.+542    	; 0x1d6c4 <__fp_round>
   1d4a6:	07 d1       	rcall	.+526    	; 0x1d6b6 <__fp_pscB>
   1d4a8:	40 f0       	brcs	.+16     	; 0x1d4ba <__divsf3+0x18>
   1d4aa:	fe d0       	rcall	.+508    	; 0x1d6a8 <__fp_pscA>
   1d4ac:	30 f0       	brcs	.+12     	; 0x1d4ba <__divsf3+0x18>
   1d4ae:	21 f4       	brne	.+8      	; 0x1d4b8 <__divsf3+0x16>
   1d4b0:	5f 3f       	cpi	r21, 0xFF	; 255
   1d4b2:	19 f0       	breq	.+6      	; 0x1d4ba <__divsf3+0x18>
   1d4b4:	f0 c0       	rjmp	.+480    	; 0x1d696 <__fp_inf>
   1d4b6:	51 11       	cpse	r21, r1
   1d4b8:	39 c1       	rjmp	.+626    	; 0x1d72c <__fp_szero>
   1d4ba:	f3 c0       	rjmp	.+486    	; 0x1d6a2 <__fp_nan>

0001d4bc <__divsf3x>:
   1d4bc:	14 d1       	rcall	.+552    	; 0x1d6e6 <__fp_split3>
   1d4be:	98 f3       	brcs	.-26     	; 0x1d4a6 <__divsf3+0x4>

0001d4c0 <__divsf3_pse>:
   1d4c0:	99 23       	and	r25, r25
   1d4c2:	c9 f3       	breq	.-14     	; 0x1d4b6 <__divsf3+0x14>
   1d4c4:	55 23       	and	r21, r21
   1d4c6:	b1 f3       	breq	.-20     	; 0x1d4b4 <__divsf3+0x12>
   1d4c8:	95 1b       	sub	r25, r21
   1d4ca:	55 0b       	sbc	r21, r21
   1d4cc:	bb 27       	eor	r27, r27
   1d4ce:	aa 27       	eor	r26, r26
   1d4d0:	62 17       	cp	r22, r18
   1d4d2:	73 07       	cpc	r23, r19
   1d4d4:	84 07       	cpc	r24, r20
   1d4d6:	38 f0       	brcs	.+14     	; 0x1d4e6 <__divsf3_pse+0x26>
   1d4d8:	9f 5f       	subi	r25, 0xFF	; 255
   1d4da:	5f 4f       	sbci	r21, 0xFF	; 255
   1d4dc:	22 0f       	add	r18, r18
   1d4de:	33 1f       	adc	r19, r19
   1d4e0:	44 1f       	adc	r20, r20
   1d4e2:	aa 1f       	adc	r26, r26
   1d4e4:	a9 f3       	breq	.-22     	; 0x1d4d0 <__divsf3_pse+0x10>
   1d4e6:	33 d0       	rcall	.+102    	; 0x1d54e <__divsf3_pse+0x8e>
   1d4e8:	0e 2e       	mov	r0, r30
   1d4ea:	3a f0       	brmi	.+14     	; 0x1d4fa <__divsf3_pse+0x3a>
   1d4ec:	e0 e8       	ldi	r30, 0x80	; 128
   1d4ee:	30 d0       	rcall	.+96     	; 0x1d550 <__divsf3_pse+0x90>
   1d4f0:	91 50       	subi	r25, 0x01	; 1
   1d4f2:	50 40       	sbci	r21, 0x00	; 0
   1d4f4:	e6 95       	lsr	r30
   1d4f6:	00 1c       	adc	r0, r0
   1d4f8:	ca f7       	brpl	.-14     	; 0x1d4ec <__divsf3_pse+0x2c>
   1d4fa:	29 d0       	rcall	.+82     	; 0x1d54e <__divsf3_pse+0x8e>
   1d4fc:	fe 2f       	mov	r31, r30
   1d4fe:	27 d0       	rcall	.+78     	; 0x1d54e <__divsf3_pse+0x8e>
   1d500:	66 0f       	add	r22, r22
   1d502:	77 1f       	adc	r23, r23
   1d504:	88 1f       	adc	r24, r24
   1d506:	bb 1f       	adc	r27, r27
   1d508:	26 17       	cp	r18, r22
   1d50a:	37 07       	cpc	r19, r23
   1d50c:	48 07       	cpc	r20, r24
   1d50e:	ab 07       	cpc	r26, r27
   1d510:	b0 e8       	ldi	r27, 0x80	; 128
   1d512:	09 f0       	breq	.+2      	; 0x1d516 <__divsf3_pse+0x56>
   1d514:	bb 0b       	sbc	r27, r27
   1d516:	80 2d       	mov	r24, r0
   1d518:	bf 01       	movw	r22, r30
   1d51a:	ff 27       	eor	r31, r31
   1d51c:	93 58       	subi	r25, 0x83	; 131
   1d51e:	5f 4f       	sbci	r21, 0xFF	; 255
   1d520:	2a f0       	brmi	.+10     	; 0x1d52c <__divsf3_pse+0x6c>
   1d522:	9e 3f       	cpi	r25, 0xFE	; 254
   1d524:	51 05       	cpc	r21, r1
   1d526:	68 f0       	brcs	.+26     	; 0x1d542 <__divsf3_pse+0x82>
   1d528:	b6 c0       	rjmp	.+364    	; 0x1d696 <__fp_inf>
   1d52a:	00 c1       	rjmp	.+512    	; 0x1d72c <__fp_szero>
   1d52c:	5f 3f       	cpi	r21, 0xFF	; 255
   1d52e:	ec f3       	brlt	.-6      	; 0x1d52a <__divsf3_pse+0x6a>
   1d530:	98 3e       	cpi	r25, 0xE8	; 232
   1d532:	dc f3       	brlt	.-10     	; 0x1d52a <__divsf3_pse+0x6a>
   1d534:	86 95       	lsr	r24
   1d536:	77 95       	ror	r23
   1d538:	67 95       	ror	r22
   1d53a:	b7 95       	ror	r27
   1d53c:	f7 95       	ror	r31
   1d53e:	9f 5f       	subi	r25, 0xFF	; 255
   1d540:	c9 f7       	brne	.-14     	; 0x1d534 <__divsf3_pse+0x74>
   1d542:	88 0f       	add	r24, r24
   1d544:	91 1d       	adc	r25, r1
   1d546:	96 95       	lsr	r25
   1d548:	87 95       	ror	r24
   1d54a:	97 f9       	bld	r25, 7
   1d54c:	08 95       	ret
   1d54e:	e1 e0       	ldi	r30, 0x01	; 1
   1d550:	66 0f       	add	r22, r22
   1d552:	77 1f       	adc	r23, r23
   1d554:	88 1f       	adc	r24, r24
   1d556:	bb 1f       	adc	r27, r27
   1d558:	62 17       	cp	r22, r18
   1d55a:	73 07       	cpc	r23, r19
   1d55c:	84 07       	cpc	r24, r20
   1d55e:	ba 07       	cpc	r27, r26
   1d560:	20 f0       	brcs	.+8      	; 0x1d56a <__divsf3_pse+0xaa>
   1d562:	62 1b       	sub	r22, r18
   1d564:	73 0b       	sbc	r23, r19
   1d566:	84 0b       	sbc	r24, r20
   1d568:	ba 0b       	sbc	r27, r26
   1d56a:	ee 1f       	adc	r30, r30
   1d56c:	88 f7       	brcc	.-30     	; 0x1d550 <__divsf3_pse+0x90>
   1d56e:	e0 95       	com	r30
   1d570:	08 95       	ret

0001d572 <__fixsfsi>:
   1d572:	04 d0       	rcall	.+8      	; 0x1d57c <__fixunssfsi>
   1d574:	68 94       	set
   1d576:	b1 11       	cpse	r27, r1
   1d578:	d9 c0       	rjmp	.+434    	; 0x1d72c <__fp_szero>
   1d57a:	08 95       	ret

0001d57c <__fixunssfsi>:
   1d57c:	bc d0       	rcall	.+376    	; 0x1d6f6 <__fp_splitA>
   1d57e:	88 f0       	brcs	.+34     	; 0x1d5a2 <__fixunssfsi+0x26>
   1d580:	9f 57       	subi	r25, 0x7F	; 127
   1d582:	90 f0       	brcs	.+36     	; 0x1d5a8 <__fixunssfsi+0x2c>
   1d584:	b9 2f       	mov	r27, r25
   1d586:	99 27       	eor	r25, r25
   1d588:	b7 51       	subi	r27, 0x17	; 23
   1d58a:	a0 f0       	brcs	.+40     	; 0x1d5b4 <__fixunssfsi+0x38>
   1d58c:	d1 f0       	breq	.+52     	; 0x1d5c2 <__fixunssfsi+0x46>
   1d58e:	66 0f       	add	r22, r22
   1d590:	77 1f       	adc	r23, r23
   1d592:	88 1f       	adc	r24, r24
   1d594:	99 1f       	adc	r25, r25
   1d596:	1a f0       	brmi	.+6      	; 0x1d59e <__fixunssfsi+0x22>
   1d598:	ba 95       	dec	r27
   1d59a:	c9 f7       	brne	.-14     	; 0x1d58e <__fixunssfsi+0x12>
   1d59c:	12 c0       	rjmp	.+36     	; 0x1d5c2 <__fixunssfsi+0x46>
   1d59e:	b1 30       	cpi	r27, 0x01	; 1
   1d5a0:	81 f0       	breq	.+32     	; 0x1d5c2 <__fixunssfsi+0x46>
   1d5a2:	c3 d0       	rcall	.+390    	; 0x1d72a <__fp_zero>
   1d5a4:	b1 e0       	ldi	r27, 0x01	; 1
   1d5a6:	08 95       	ret
   1d5a8:	c0 c0       	rjmp	.+384    	; 0x1d72a <__fp_zero>
   1d5aa:	67 2f       	mov	r22, r23
   1d5ac:	78 2f       	mov	r23, r24
   1d5ae:	88 27       	eor	r24, r24
   1d5b0:	b8 5f       	subi	r27, 0xF8	; 248
   1d5b2:	39 f0       	breq	.+14     	; 0x1d5c2 <__fixunssfsi+0x46>
   1d5b4:	b9 3f       	cpi	r27, 0xF9	; 249
   1d5b6:	cc f3       	brlt	.-14     	; 0x1d5aa <__fixunssfsi+0x2e>
   1d5b8:	86 95       	lsr	r24
   1d5ba:	77 95       	ror	r23
   1d5bc:	67 95       	ror	r22
   1d5be:	b3 95       	inc	r27
   1d5c0:	d9 f7       	brne	.-10     	; 0x1d5b8 <__fixunssfsi+0x3c>
   1d5c2:	3e f4       	brtc	.+14     	; 0x1d5d2 <__fixunssfsi+0x56>
   1d5c4:	90 95       	com	r25
   1d5c6:	80 95       	com	r24
   1d5c8:	70 95       	com	r23
   1d5ca:	61 95       	neg	r22
   1d5cc:	7f 4f       	sbci	r23, 0xFF	; 255
   1d5ce:	8f 4f       	sbci	r24, 0xFF	; 255
   1d5d0:	9f 4f       	sbci	r25, 0xFF	; 255
   1d5d2:	08 95       	ret

0001d5d4 <__floatunsisf>:
   1d5d4:	e8 94       	clt
   1d5d6:	09 c0       	rjmp	.+18     	; 0x1d5ea <__floatsisf+0x12>

0001d5d8 <__floatsisf>:
   1d5d8:	97 fb       	bst	r25, 7
   1d5da:	3e f4       	brtc	.+14     	; 0x1d5ea <__floatsisf+0x12>
   1d5dc:	90 95       	com	r25
   1d5de:	80 95       	com	r24
   1d5e0:	70 95       	com	r23
   1d5e2:	61 95       	neg	r22
   1d5e4:	7f 4f       	sbci	r23, 0xFF	; 255
   1d5e6:	8f 4f       	sbci	r24, 0xFF	; 255
   1d5e8:	9f 4f       	sbci	r25, 0xFF	; 255
   1d5ea:	99 23       	and	r25, r25
   1d5ec:	a9 f0       	breq	.+42     	; 0x1d618 <__floatsisf+0x40>
   1d5ee:	f9 2f       	mov	r31, r25
   1d5f0:	96 e9       	ldi	r25, 0x96	; 150
   1d5f2:	bb 27       	eor	r27, r27
   1d5f4:	93 95       	inc	r25
   1d5f6:	f6 95       	lsr	r31
   1d5f8:	87 95       	ror	r24
   1d5fa:	77 95       	ror	r23
   1d5fc:	67 95       	ror	r22
   1d5fe:	b7 95       	ror	r27
   1d600:	f1 11       	cpse	r31, r1
   1d602:	f8 cf       	rjmp	.-16     	; 0x1d5f4 <__floatsisf+0x1c>
   1d604:	fa f4       	brpl	.+62     	; 0x1d644 <__floatsisf+0x6c>
   1d606:	bb 0f       	add	r27, r27
   1d608:	11 f4       	brne	.+4      	; 0x1d60e <__floatsisf+0x36>
   1d60a:	60 ff       	sbrs	r22, 0
   1d60c:	1b c0       	rjmp	.+54     	; 0x1d644 <__floatsisf+0x6c>
   1d60e:	6f 5f       	subi	r22, 0xFF	; 255
   1d610:	7f 4f       	sbci	r23, 0xFF	; 255
   1d612:	8f 4f       	sbci	r24, 0xFF	; 255
   1d614:	9f 4f       	sbci	r25, 0xFF	; 255
   1d616:	16 c0       	rjmp	.+44     	; 0x1d644 <__floatsisf+0x6c>
   1d618:	88 23       	and	r24, r24
   1d61a:	11 f0       	breq	.+4      	; 0x1d620 <__floatsisf+0x48>
   1d61c:	96 e9       	ldi	r25, 0x96	; 150
   1d61e:	11 c0       	rjmp	.+34     	; 0x1d642 <__floatsisf+0x6a>
   1d620:	77 23       	and	r23, r23
   1d622:	21 f0       	breq	.+8      	; 0x1d62c <__floatsisf+0x54>
   1d624:	9e e8       	ldi	r25, 0x8E	; 142
   1d626:	87 2f       	mov	r24, r23
   1d628:	76 2f       	mov	r23, r22
   1d62a:	05 c0       	rjmp	.+10     	; 0x1d636 <__floatsisf+0x5e>
   1d62c:	66 23       	and	r22, r22
   1d62e:	71 f0       	breq	.+28     	; 0x1d64c <__floatsisf+0x74>
   1d630:	96 e8       	ldi	r25, 0x86	; 134
   1d632:	86 2f       	mov	r24, r22
   1d634:	70 e0       	ldi	r23, 0x00	; 0
   1d636:	60 e0       	ldi	r22, 0x00	; 0
   1d638:	2a f0       	brmi	.+10     	; 0x1d644 <__floatsisf+0x6c>
   1d63a:	9a 95       	dec	r25
   1d63c:	66 0f       	add	r22, r22
   1d63e:	77 1f       	adc	r23, r23
   1d640:	88 1f       	adc	r24, r24
   1d642:	da f7       	brpl	.-10     	; 0x1d63a <__floatsisf+0x62>
   1d644:	88 0f       	add	r24, r24
   1d646:	96 95       	lsr	r25
   1d648:	87 95       	ror	r24
   1d64a:	97 f9       	bld	r25, 7
   1d64c:	08 95       	ret

0001d64e <__fp_cmp>:
   1d64e:	99 0f       	add	r25, r25
   1d650:	00 08       	sbc	r0, r0
   1d652:	55 0f       	add	r21, r21
   1d654:	aa 0b       	sbc	r26, r26
   1d656:	e0 e8       	ldi	r30, 0x80	; 128
   1d658:	fe ef       	ldi	r31, 0xFE	; 254
   1d65a:	16 16       	cp	r1, r22
   1d65c:	17 06       	cpc	r1, r23
   1d65e:	e8 07       	cpc	r30, r24
   1d660:	f9 07       	cpc	r31, r25
   1d662:	c0 f0       	brcs	.+48     	; 0x1d694 <__fp_cmp+0x46>
   1d664:	12 16       	cp	r1, r18
   1d666:	13 06       	cpc	r1, r19
   1d668:	e4 07       	cpc	r30, r20
   1d66a:	f5 07       	cpc	r31, r21
   1d66c:	98 f0       	brcs	.+38     	; 0x1d694 <__fp_cmp+0x46>
   1d66e:	62 1b       	sub	r22, r18
   1d670:	73 0b       	sbc	r23, r19
   1d672:	84 0b       	sbc	r24, r20
   1d674:	95 0b       	sbc	r25, r21
   1d676:	39 f4       	brne	.+14     	; 0x1d686 <__fp_cmp+0x38>
   1d678:	0a 26       	eor	r0, r26
   1d67a:	61 f0       	breq	.+24     	; 0x1d694 <__fp_cmp+0x46>
   1d67c:	23 2b       	or	r18, r19
   1d67e:	24 2b       	or	r18, r20
   1d680:	25 2b       	or	r18, r21
   1d682:	21 f4       	brne	.+8      	; 0x1d68c <__fp_cmp+0x3e>
   1d684:	08 95       	ret
   1d686:	0a 26       	eor	r0, r26
   1d688:	09 f4       	brne	.+2      	; 0x1d68c <__fp_cmp+0x3e>
   1d68a:	a1 40       	sbci	r26, 0x01	; 1
   1d68c:	a6 95       	lsr	r26
   1d68e:	8f ef       	ldi	r24, 0xFF	; 255
   1d690:	81 1d       	adc	r24, r1
   1d692:	81 1d       	adc	r24, r1
   1d694:	08 95       	ret

0001d696 <__fp_inf>:
   1d696:	97 f9       	bld	r25, 7
   1d698:	9f 67       	ori	r25, 0x7F	; 127
   1d69a:	80 e8       	ldi	r24, 0x80	; 128
   1d69c:	70 e0       	ldi	r23, 0x00	; 0
   1d69e:	60 e0       	ldi	r22, 0x00	; 0
   1d6a0:	08 95       	ret

0001d6a2 <__fp_nan>:
   1d6a2:	9f ef       	ldi	r25, 0xFF	; 255
   1d6a4:	80 ec       	ldi	r24, 0xC0	; 192
   1d6a6:	08 95       	ret

0001d6a8 <__fp_pscA>:
   1d6a8:	00 24       	eor	r0, r0
   1d6aa:	0a 94       	dec	r0
   1d6ac:	16 16       	cp	r1, r22
   1d6ae:	17 06       	cpc	r1, r23
   1d6b0:	18 06       	cpc	r1, r24
   1d6b2:	09 06       	cpc	r0, r25
   1d6b4:	08 95       	ret

0001d6b6 <__fp_pscB>:
   1d6b6:	00 24       	eor	r0, r0
   1d6b8:	0a 94       	dec	r0
   1d6ba:	12 16       	cp	r1, r18
   1d6bc:	13 06       	cpc	r1, r19
   1d6be:	14 06       	cpc	r1, r20
   1d6c0:	05 06       	cpc	r0, r21
   1d6c2:	08 95       	ret

0001d6c4 <__fp_round>:
   1d6c4:	09 2e       	mov	r0, r25
   1d6c6:	03 94       	inc	r0
   1d6c8:	00 0c       	add	r0, r0
   1d6ca:	11 f4       	brne	.+4      	; 0x1d6d0 <__fp_round+0xc>
   1d6cc:	88 23       	and	r24, r24
   1d6ce:	52 f0       	brmi	.+20     	; 0x1d6e4 <__fp_round+0x20>
   1d6d0:	bb 0f       	add	r27, r27
   1d6d2:	40 f4       	brcc	.+16     	; 0x1d6e4 <__fp_round+0x20>
   1d6d4:	bf 2b       	or	r27, r31
   1d6d6:	11 f4       	brne	.+4      	; 0x1d6dc <__fp_round+0x18>
   1d6d8:	60 ff       	sbrs	r22, 0
   1d6da:	04 c0       	rjmp	.+8      	; 0x1d6e4 <__fp_round+0x20>
   1d6dc:	6f 5f       	subi	r22, 0xFF	; 255
   1d6de:	7f 4f       	sbci	r23, 0xFF	; 255
   1d6e0:	8f 4f       	sbci	r24, 0xFF	; 255
   1d6e2:	9f 4f       	sbci	r25, 0xFF	; 255
   1d6e4:	08 95       	ret

0001d6e6 <__fp_split3>:
   1d6e6:	57 fd       	sbrc	r21, 7
   1d6e8:	90 58       	subi	r25, 0x80	; 128
   1d6ea:	44 0f       	add	r20, r20
   1d6ec:	55 1f       	adc	r21, r21
   1d6ee:	59 f0       	breq	.+22     	; 0x1d706 <__fp_splitA+0x10>
   1d6f0:	5f 3f       	cpi	r21, 0xFF	; 255
   1d6f2:	71 f0       	breq	.+28     	; 0x1d710 <__fp_splitA+0x1a>
   1d6f4:	47 95       	ror	r20

0001d6f6 <__fp_splitA>:
   1d6f6:	88 0f       	add	r24, r24
   1d6f8:	97 fb       	bst	r25, 7
   1d6fa:	99 1f       	adc	r25, r25
   1d6fc:	61 f0       	breq	.+24     	; 0x1d716 <__fp_splitA+0x20>
   1d6fe:	9f 3f       	cpi	r25, 0xFF	; 255
   1d700:	79 f0       	breq	.+30     	; 0x1d720 <__fp_splitA+0x2a>
   1d702:	87 95       	ror	r24
   1d704:	08 95       	ret
   1d706:	12 16       	cp	r1, r18
   1d708:	13 06       	cpc	r1, r19
   1d70a:	14 06       	cpc	r1, r20
   1d70c:	55 1f       	adc	r21, r21
   1d70e:	f2 cf       	rjmp	.-28     	; 0x1d6f4 <__fp_split3+0xe>
   1d710:	46 95       	lsr	r20
   1d712:	f1 df       	rcall	.-30     	; 0x1d6f6 <__fp_splitA>
   1d714:	08 c0       	rjmp	.+16     	; 0x1d726 <__fp_splitA+0x30>
   1d716:	16 16       	cp	r1, r22
   1d718:	17 06       	cpc	r1, r23
   1d71a:	18 06       	cpc	r1, r24
   1d71c:	99 1f       	adc	r25, r25
   1d71e:	f1 cf       	rjmp	.-30     	; 0x1d702 <__fp_splitA+0xc>
   1d720:	86 95       	lsr	r24
   1d722:	71 05       	cpc	r23, r1
   1d724:	61 05       	cpc	r22, r1
   1d726:	08 94       	sec
   1d728:	08 95       	ret

0001d72a <__fp_zero>:
   1d72a:	e8 94       	clt

0001d72c <__fp_szero>:
   1d72c:	bb 27       	eor	r27, r27
   1d72e:	66 27       	eor	r22, r22
   1d730:	77 27       	eor	r23, r23
   1d732:	cb 01       	movw	r24, r22
   1d734:	97 f9       	bld	r25, 7
   1d736:	08 95       	ret

0001d738 <__gesf2>:
   1d738:	8a df       	rcall	.-236    	; 0x1d64e <__fp_cmp>
   1d73a:	08 f4       	brcc	.+2      	; 0x1d73e <__gesf2+0x6>
   1d73c:	8f ef       	ldi	r24, 0xFF	; 255
   1d73e:	08 95       	ret

0001d740 <__mulsf3>:
   1d740:	0b d0       	rcall	.+22     	; 0x1d758 <__mulsf3x>
   1d742:	c0 cf       	rjmp	.-128    	; 0x1d6c4 <__fp_round>
   1d744:	b1 df       	rcall	.-158    	; 0x1d6a8 <__fp_pscA>
   1d746:	28 f0       	brcs	.+10     	; 0x1d752 <__mulsf3+0x12>
   1d748:	b6 df       	rcall	.-148    	; 0x1d6b6 <__fp_pscB>
   1d74a:	18 f0       	brcs	.+6      	; 0x1d752 <__mulsf3+0x12>
   1d74c:	95 23       	and	r25, r21
   1d74e:	09 f0       	breq	.+2      	; 0x1d752 <__mulsf3+0x12>
   1d750:	a2 cf       	rjmp	.-188    	; 0x1d696 <__fp_inf>
   1d752:	a7 cf       	rjmp	.-178    	; 0x1d6a2 <__fp_nan>
   1d754:	11 24       	eor	r1, r1
   1d756:	ea cf       	rjmp	.-44     	; 0x1d72c <__fp_szero>

0001d758 <__mulsf3x>:
   1d758:	c6 df       	rcall	.-116    	; 0x1d6e6 <__fp_split3>
   1d75a:	a0 f3       	brcs	.-24     	; 0x1d744 <__mulsf3+0x4>

0001d75c <__mulsf3_pse>:
   1d75c:	95 9f       	mul	r25, r21
   1d75e:	d1 f3       	breq	.-12     	; 0x1d754 <__mulsf3+0x14>
   1d760:	95 0f       	add	r25, r21
   1d762:	50 e0       	ldi	r21, 0x00	; 0
   1d764:	55 1f       	adc	r21, r21
   1d766:	62 9f       	mul	r22, r18
   1d768:	f0 01       	movw	r30, r0
   1d76a:	72 9f       	mul	r23, r18
   1d76c:	bb 27       	eor	r27, r27
   1d76e:	f0 0d       	add	r31, r0
   1d770:	b1 1d       	adc	r27, r1
   1d772:	63 9f       	mul	r22, r19
   1d774:	aa 27       	eor	r26, r26
   1d776:	f0 0d       	add	r31, r0
   1d778:	b1 1d       	adc	r27, r1
   1d77a:	aa 1f       	adc	r26, r26
   1d77c:	64 9f       	mul	r22, r20
   1d77e:	66 27       	eor	r22, r22
   1d780:	b0 0d       	add	r27, r0
   1d782:	a1 1d       	adc	r26, r1
   1d784:	66 1f       	adc	r22, r22
   1d786:	82 9f       	mul	r24, r18
   1d788:	22 27       	eor	r18, r18
   1d78a:	b0 0d       	add	r27, r0
   1d78c:	a1 1d       	adc	r26, r1
   1d78e:	62 1f       	adc	r22, r18
   1d790:	73 9f       	mul	r23, r19
   1d792:	b0 0d       	add	r27, r0
   1d794:	a1 1d       	adc	r26, r1
   1d796:	62 1f       	adc	r22, r18
   1d798:	83 9f       	mul	r24, r19
   1d79a:	a0 0d       	add	r26, r0
   1d79c:	61 1d       	adc	r22, r1
   1d79e:	22 1f       	adc	r18, r18
   1d7a0:	74 9f       	mul	r23, r20
   1d7a2:	33 27       	eor	r19, r19
   1d7a4:	a0 0d       	add	r26, r0
   1d7a6:	61 1d       	adc	r22, r1
   1d7a8:	23 1f       	adc	r18, r19
   1d7aa:	84 9f       	mul	r24, r20
   1d7ac:	60 0d       	add	r22, r0
   1d7ae:	21 1d       	adc	r18, r1
   1d7b0:	82 2f       	mov	r24, r18
   1d7b2:	76 2f       	mov	r23, r22
   1d7b4:	6a 2f       	mov	r22, r26
   1d7b6:	11 24       	eor	r1, r1
   1d7b8:	9f 57       	subi	r25, 0x7F	; 127
   1d7ba:	50 40       	sbci	r21, 0x00	; 0
   1d7bc:	8a f0       	brmi	.+34     	; 0x1d7e0 <__mulsf3_pse+0x84>
   1d7be:	e1 f0       	breq	.+56     	; 0x1d7f8 <__mulsf3_pse+0x9c>
   1d7c0:	88 23       	and	r24, r24
   1d7c2:	4a f0       	brmi	.+18     	; 0x1d7d6 <__mulsf3_pse+0x7a>
   1d7c4:	ee 0f       	add	r30, r30
   1d7c6:	ff 1f       	adc	r31, r31
   1d7c8:	bb 1f       	adc	r27, r27
   1d7ca:	66 1f       	adc	r22, r22
   1d7cc:	77 1f       	adc	r23, r23
   1d7ce:	88 1f       	adc	r24, r24
   1d7d0:	91 50       	subi	r25, 0x01	; 1
   1d7d2:	50 40       	sbci	r21, 0x00	; 0
   1d7d4:	a9 f7       	brne	.-22     	; 0x1d7c0 <__mulsf3_pse+0x64>
   1d7d6:	9e 3f       	cpi	r25, 0xFE	; 254
   1d7d8:	51 05       	cpc	r21, r1
   1d7da:	70 f0       	brcs	.+28     	; 0x1d7f8 <__mulsf3_pse+0x9c>
   1d7dc:	5c cf       	rjmp	.-328    	; 0x1d696 <__fp_inf>
   1d7de:	a6 cf       	rjmp	.-180    	; 0x1d72c <__fp_szero>
   1d7e0:	5f 3f       	cpi	r21, 0xFF	; 255
   1d7e2:	ec f3       	brlt	.-6      	; 0x1d7de <__mulsf3_pse+0x82>
   1d7e4:	98 3e       	cpi	r25, 0xE8	; 232
   1d7e6:	dc f3       	brlt	.-10     	; 0x1d7de <__mulsf3_pse+0x82>
   1d7e8:	86 95       	lsr	r24
   1d7ea:	77 95       	ror	r23
   1d7ec:	67 95       	ror	r22
   1d7ee:	b7 95       	ror	r27
   1d7f0:	f7 95       	ror	r31
   1d7f2:	e7 95       	ror	r30
   1d7f4:	9f 5f       	subi	r25, 0xFF	; 255
   1d7f6:	c1 f7       	brne	.-16     	; 0x1d7e8 <__mulsf3_pse+0x8c>
   1d7f8:	fe 2b       	or	r31, r30
   1d7fa:	88 0f       	add	r24, r24
   1d7fc:	91 1d       	adc	r25, r1
   1d7fe:	96 95       	lsr	r25
   1d800:	87 95       	ror	r24
   1d802:	97 f9       	bld	r25, 7
   1d804:	08 95       	ret

0001d806 <round>:
   1d806:	77 df       	rcall	.-274    	; 0x1d6f6 <__fp_splitA>
   1d808:	e0 f0       	brcs	.+56     	; 0x1d842 <round+0x3c>
   1d80a:	9e 37       	cpi	r25, 0x7E	; 126
   1d80c:	d8 f0       	brcs	.+54     	; 0x1d844 <round+0x3e>
   1d80e:	96 39       	cpi	r25, 0x96	; 150
   1d810:	b8 f4       	brcc	.+46     	; 0x1d840 <round+0x3a>
   1d812:	9e 38       	cpi	r25, 0x8E	; 142
   1d814:	48 f4       	brcc	.+18     	; 0x1d828 <round+0x22>
   1d816:	67 2f       	mov	r22, r23
   1d818:	78 2f       	mov	r23, r24
   1d81a:	88 27       	eor	r24, r24
   1d81c:	98 5f       	subi	r25, 0xF8	; 248
   1d81e:	f9 cf       	rjmp	.-14     	; 0x1d812 <round+0xc>
   1d820:	86 95       	lsr	r24
   1d822:	77 95       	ror	r23
   1d824:	67 95       	ror	r22
   1d826:	93 95       	inc	r25
   1d828:	95 39       	cpi	r25, 0x95	; 149
   1d82a:	d0 f3       	brcs	.-12     	; 0x1d820 <round+0x1a>
   1d82c:	b6 2f       	mov	r27, r22
   1d82e:	b1 70       	andi	r27, 0x01	; 1
   1d830:	6b 0f       	add	r22, r27
   1d832:	71 1d       	adc	r23, r1
   1d834:	81 1d       	adc	r24, r1
   1d836:	20 f4       	brcc	.+8      	; 0x1d840 <round+0x3a>
   1d838:	87 95       	ror	r24
   1d83a:	77 95       	ror	r23
   1d83c:	67 95       	ror	r22
   1d83e:	93 95       	inc	r25
   1d840:	02 c0       	rjmp	.+4      	; 0x1d846 <__fp_mintl>
   1d842:	1c c0       	rjmp	.+56     	; 0x1d87c <__fp_mpack>
   1d844:	73 cf       	rjmp	.-282    	; 0x1d72c <__fp_szero>

0001d846 <__fp_mintl>:
   1d846:	88 23       	and	r24, r24
   1d848:	71 f4       	brne	.+28     	; 0x1d866 <__fp_mintl+0x20>
   1d84a:	77 23       	and	r23, r23
   1d84c:	21 f0       	breq	.+8      	; 0x1d856 <__fp_mintl+0x10>
   1d84e:	98 50       	subi	r25, 0x08	; 8
   1d850:	87 2b       	or	r24, r23
   1d852:	76 2f       	mov	r23, r22
   1d854:	07 c0       	rjmp	.+14     	; 0x1d864 <__fp_mintl+0x1e>
   1d856:	66 23       	and	r22, r22
   1d858:	11 f4       	brne	.+4      	; 0x1d85e <__fp_mintl+0x18>
   1d85a:	99 27       	eor	r25, r25
   1d85c:	0d c0       	rjmp	.+26     	; 0x1d878 <__fp_mintl+0x32>
   1d85e:	90 51       	subi	r25, 0x10	; 16
   1d860:	86 2b       	or	r24, r22
   1d862:	70 e0       	ldi	r23, 0x00	; 0
   1d864:	60 e0       	ldi	r22, 0x00	; 0
   1d866:	2a f0       	brmi	.+10     	; 0x1d872 <__fp_mintl+0x2c>
   1d868:	9a 95       	dec	r25
   1d86a:	66 0f       	add	r22, r22
   1d86c:	77 1f       	adc	r23, r23
   1d86e:	88 1f       	adc	r24, r24
   1d870:	da f7       	brpl	.-10     	; 0x1d868 <__fp_mintl+0x22>
   1d872:	88 0f       	add	r24, r24
   1d874:	96 95       	lsr	r25
   1d876:	87 95       	ror	r24
   1d878:	97 f9       	bld	r25, 7
   1d87a:	08 95       	ret

0001d87c <__fp_mpack>:
   1d87c:	9f 3f       	cpi	r25, 0xFF	; 255
   1d87e:	31 f0       	breq	.+12     	; 0x1d88c <__fp_mpack_finite+0xc>

0001d880 <__fp_mpack_finite>:
   1d880:	91 50       	subi	r25, 0x01	; 1
   1d882:	20 f4       	brcc	.+8      	; 0x1d88c <__fp_mpack_finite+0xc>
   1d884:	87 95       	ror	r24
   1d886:	77 95       	ror	r23
   1d888:	67 95       	ror	r22
   1d88a:	b7 95       	ror	r27
   1d88c:	88 0f       	add	r24, r24
   1d88e:	91 1d       	adc	r25, r1
   1d890:	96 95       	lsr	r25
   1d892:	87 95       	ror	r24
   1d894:	97 f9       	bld	r25, 7
   1d896:	08 95       	ret

0001d898 <calloc>:
   1d898:	0f 93       	push	r16
   1d89a:	1f 93       	push	r17
   1d89c:	cf 93       	push	r28
   1d89e:	df 93       	push	r29
   1d8a0:	86 9f       	mul	r24, r22
   1d8a2:	80 01       	movw	r16, r0
   1d8a4:	87 9f       	mul	r24, r23
   1d8a6:	10 0d       	add	r17, r0
   1d8a8:	96 9f       	mul	r25, r22
   1d8aa:	10 0d       	add	r17, r0
   1d8ac:	11 24       	eor	r1, r1
   1d8ae:	c8 01       	movw	r24, r16
   1d8b0:	0d d0       	rcall	.+26     	; 0x1d8cc <malloc>
   1d8b2:	ec 01       	movw	r28, r24
   1d8b4:	00 97       	sbiw	r24, 0x00	; 0
   1d8b6:	21 f0       	breq	.+8      	; 0x1d8c0 <calloc+0x28>
   1d8b8:	a8 01       	movw	r20, r16
   1d8ba:	60 e0       	ldi	r22, 0x00	; 0
   1d8bc:	70 e0       	ldi	r23, 0x00	; 0
   1d8be:	0a d2       	rcall	.+1044   	; 0x1dcd4 <memset>
   1d8c0:	ce 01       	movw	r24, r28
   1d8c2:	df 91       	pop	r29
   1d8c4:	cf 91       	pop	r28
   1d8c6:	1f 91       	pop	r17
   1d8c8:	0f 91       	pop	r16
   1d8ca:	08 95       	ret

0001d8cc <malloc>:
   1d8cc:	0f 93       	push	r16
   1d8ce:	1f 93       	push	r17
   1d8d0:	cf 93       	push	r28
   1d8d2:	df 93       	push	r29
   1d8d4:	82 30       	cpi	r24, 0x02	; 2
   1d8d6:	91 05       	cpc	r25, r1
   1d8d8:	10 f4       	brcc	.+4      	; 0x1d8de <malloc+0x12>
   1d8da:	82 e0       	ldi	r24, 0x02	; 2
   1d8dc:	90 e0       	ldi	r25, 0x00	; 0
   1d8de:	e0 91 79 1f 	lds	r30, 0x1F79	; 0x801f79 <__flp>
   1d8e2:	f0 91 7a 1f 	lds	r31, 0x1F7A	; 0x801f7a <__flp+0x1>
   1d8e6:	20 e0       	ldi	r18, 0x00	; 0
   1d8e8:	30 e0       	ldi	r19, 0x00	; 0
   1d8ea:	a0 e0       	ldi	r26, 0x00	; 0
   1d8ec:	b0 e0       	ldi	r27, 0x00	; 0
   1d8ee:	30 97       	sbiw	r30, 0x00	; 0
   1d8f0:	19 f1       	breq	.+70     	; 0x1d938 <malloc+0x6c>
   1d8f2:	40 81       	ld	r20, Z
   1d8f4:	51 81       	ldd	r21, Z+1	; 0x01
   1d8f6:	02 81       	ldd	r16, Z+2	; 0x02
   1d8f8:	13 81       	ldd	r17, Z+3	; 0x03
   1d8fa:	48 17       	cp	r20, r24
   1d8fc:	59 07       	cpc	r21, r25
   1d8fe:	c8 f0       	brcs	.+50     	; 0x1d932 <malloc+0x66>
   1d900:	84 17       	cp	r24, r20
   1d902:	95 07       	cpc	r25, r21
   1d904:	69 f4       	brne	.+26     	; 0x1d920 <malloc+0x54>
   1d906:	10 97       	sbiw	r26, 0x00	; 0
   1d908:	31 f0       	breq	.+12     	; 0x1d916 <malloc+0x4a>
   1d90a:	12 96       	adiw	r26, 0x02	; 2
   1d90c:	0c 93       	st	X, r16
   1d90e:	12 97       	sbiw	r26, 0x02	; 2
   1d910:	13 96       	adiw	r26, 0x03	; 3
   1d912:	1c 93       	st	X, r17
   1d914:	27 c0       	rjmp	.+78     	; 0x1d964 <malloc+0x98>
   1d916:	00 93 79 1f 	sts	0x1F79, r16	; 0x801f79 <__flp>
   1d91a:	10 93 7a 1f 	sts	0x1F7A, r17	; 0x801f7a <__flp+0x1>
   1d91e:	22 c0       	rjmp	.+68     	; 0x1d964 <malloc+0x98>
   1d920:	21 15       	cp	r18, r1
   1d922:	31 05       	cpc	r19, r1
   1d924:	19 f0       	breq	.+6      	; 0x1d92c <malloc+0x60>
   1d926:	42 17       	cp	r20, r18
   1d928:	53 07       	cpc	r21, r19
   1d92a:	18 f4       	brcc	.+6      	; 0x1d932 <malloc+0x66>
   1d92c:	9a 01       	movw	r18, r20
   1d92e:	bd 01       	movw	r22, r26
   1d930:	ef 01       	movw	r28, r30
   1d932:	df 01       	movw	r26, r30
   1d934:	f8 01       	movw	r30, r16
   1d936:	db cf       	rjmp	.-74     	; 0x1d8ee <malloc+0x22>
   1d938:	21 15       	cp	r18, r1
   1d93a:	31 05       	cpc	r19, r1
   1d93c:	f9 f0       	breq	.+62     	; 0x1d97c <malloc+0xb0>
   1d93e:	28 1b       	sub	r18, r24
   1d940:	39 0b       	sbc	r19, r25
   1d942:	24 30       	cpi	r18, 0x04	; 4
   1d944:	31 05       	cpc	r19, r1
   1d946:	80 f4       	brcc	.+32     	; 0x1d968 <malloc+0x9c>
   1d948:	8a 81       	ldd	r24, Y+2	; 0x02
   1d94a:	9b 81       	ldd	r25, Y+3	; 0x03
   1d94c:	61 15       	cp	r22, r1
   1d94e:	71 05       	cpc	r23, r1
   1d950:	21 f0       	breq	.+8      	; 0x1d95a <malloc+0x8e>
   1d952:	fb 01       	movw	r30, r22
   1d954:	93 83       	std	Z+3, r25	; 0x03
   1d956:	82 83       	std	Z+2, r24	; 0x02
   1d958:	04 c0       	rjmp	.+8      	; 0x1d962 <malloc+0x96>
   1d95a:	90 93 7a 1f 	sts	0x1F7A, r25	; 0x801f7a <__flp+0x1>
   1d95e:	80 93 79 1f 	sts	0x1F79, r24	; 0x801f79 <__flp>
   1d962:	fe 01       	movw	r30, r28
   1d964:	32 96       	adiw	r30, 0x02	; 2
   1d966:	44 c0       	rjmp	.+136    	; 0x1d9f0 <malloc+0x124>
   1d968:	fe 01       	movw	r30, r28
   1d96a:	e2 0f       	add	r30, r18
   1d96c:	f3 1f       	adc	r31, r19
   1d96e:	81 93       	st	Z+, r24
   1d970:	91 93       	st	Z+, r25
   1d972:	22 50       	subi	r18, 0x02	; 2
   1d974:	31 09       	sbc	r19, r1
   1d976:	39 83       	std	Y+1, r19	; 0x01
   1d978:	28 83       	st	Y, r18
   1d97a:	3a c0       	rjmp	.+116    	; 0x1d9f0 <malloc+0x124>
   1d97c:	20 91 77 1f 	lds	r18, 0x1F77	; 0x801f77 <__brkval>
   1d980:	30 91 78 1f 	lds	r19, 0x1F78	; 0x801f78 <__brkval+0x1>
   1d984:	23 2b       	or	r18, r19
   1d986:	41 f4       	brne	.+16     	; 0x1d998 <malloc+0xcc>
   1d988:	20 91 e4 02 	lds	r18, 0x02E4	; 0x8002e4 <__malloc_heap_start>
   1d98c:	30 91 e5 02 	lds	r19, 0x02E5	; 0x8002e5 <__malloc_heap_start+0x1>
   1d990:	30 93 78 1f 	sts	0x1F78, r19	; 0x801f78 <__brkval+0x1>
   1d994:	20 93 77 1f 	sts	0x1F77, r18	; 0x801f77 <__brkval>
   1d998:	20 91 e2 02 	lds	r18, 0x02E2	; 0x8002e2 <__malloc_heap_end>
   1d99c:	30 91 e3 02 	lds	r19, 0x02E3	; 0x8002e3 <__malloc_heap_end+0x1>
   1d9a0:	21 15       	cp	r18, r1
   1d9a2:	31 05       	cpc	r19, r1
   1d9a4:	41 f4       	brne	.+16     	; 0x1d9b6 <malloc+0xea>
   1d9a6:	2d b7       	in	r18, 0x3d	; 61
   1d9a8:	3e b7       	in	r19, 0x3e	; 62
   1d9aa:	40 91 e6 02 	lds	r20, 0x02E6	; 0x8002e6 <__malloc_margin>
   1d9ae:	50 91 e7 02 	lds	r21, 0x02E7	; 0x8002e7 <__malloc_margin+0x1>
   1d9b2:	24 1b       	sub	r18, r20
   1d9b4:	35 0b       	sbc	r19, r21
   1d9b6:	e0 91 77 1f 	lds	r30, 0x1F77	; 0x801f77 <__brkval>
   1d9ba:	f0 91 78 1f 	lds	r31, 0x1F78	; 0x801f78 <__brkval+0x1>
   1d9be:	e2 17       	cp	r30, r18
   1d9c0:	f3 07       	cpc	r31, r19
   1d9c2:	a0 f4       	brcc	.+40     	; 0x1d9ec <malloc+0x120>
   1d9c4:	2e 1b       	sub	r18, r30
   1d9c6:	3f 0b       	sbc	r19, r31
   1d9c8:	28 17       	cp	r18, r24
   1d9ca:	39 07       	cpc	r19, r25
   1d9cc:	78 f0       	brcs	.+30     	; 0x1d9ec <malloc+0x120>
   1d9ce:	ac 01       	movw	r20, r24
   1d9d0:	4e 5f       	subi	r20, 0xFE	; 254
   1d9d2:	5f 4f       	sbci	r21, 0xFF	; 255
   1d9d4:	24 17       	cp	r18, r20
   1d9d6:	35 07       	cpc	r19, r21
   1d9d8:	48 f0       	brcs	.+18     	; 0x1d9ec <malloc+0x120>
   1d9da:	4e 0f       	add	r20, r30
   1d9dc:	5f 1f       	adc	r21, r31
   1d9de:	50 93 78 1f 	sts	0x1F78, r21	; 0x801f78 <__brkval+0x1>
   1d9e2:	40 93 77 1f 	sts	0x1F77, r20	; 0x801f77 <__brkval>
   1d9e6:	81 93       	st	Z+, r24
   1d9e8:	91 93       	st	Z+, r25
   1d9ea:	02 c0       	rjmp	.+4      	; 0x1d9f0 <malloc+0x124>
   1d9ec:	e0 e0       	ldi	r30, 0x00	; 0
   1d9ee:	f0 e0       	ldi	r31, 0x00	; 0
   1d9f0:	cf 01       	movw	r24, r30
   1d9f2:	df 91       	pop	r29
   1d9f4:	cf 91       	pop	r28
   1d9f6:	1f 91       	pop	r17
   1d9f8:	0f 91       	pop	r16
   1d9fa:	08 95       	ret

0001d9fc <free>:
   1d9fc:	cf 93       	push	r28
   1d9fe:	df 93       	push	r29
   1da00:	00 97       	sbiw	r24, 0x00	; 0
   1da02:	09 f4       	brne	.+2      	; 0x1da06 <free+0xa>
   1da04:	81 c0       	rjmp	.+258    	; 0x1db08 <free+0x10c>
   1da06:	fc 01       	movw	r30, r24
   1da08:	32 97       	sbiw	r30, 0x02	; 2
   1da0a:	13 82       	std	Z+3, r1	; 0x03
   1da0c:	12 82       	std	Z+2, r1	; 0x02
   1da0e:	a0 91 79 1f 	lds	r26, 0x1F79	; 0x801f79 <__flp>
   1da12:	b0 91 7a 1f 	lds	r27, 0x1F7A	; 0x801f7a <__flp+0x1>
   1da16:	10 97       	sbiw	r26, 0x00	; 0
   1da18:	81 f4       	brne	.+32     	; 0x1da3a <free+0x3e>
   1da1a:	20 81       	ld	r18, Z
   1da1c:	31 81       	ldd	r19, Z+1	; 0x01
   1da1e:	82 0f       	add	r24, r18
   1da20:	93 1f       	adc	r25, r19
   1da22:	20 91 77 1f 	lds	r18, 0x1F77	; 0x801f77 <__brkval>
   1da26:	30 91 78 1f 	lds	r19, 0x1F78	; 0x801f78 <__brkval+0x1>
   1da2a:	28 17       	cp	r18, r24
   1da2c:	39 07       	cpc	r19, r25
MEMSPACE
static
void deselect (void)
{
    CS_HIGH();
    xchg_spi(0xFF);   /*< Dummy clock (force DO hi-z for multiple slave SPI) */
   1da2e:	51 f5       	brne	.+84     	; 0x1da84 <free+0x88>
    xchg_spi(0xFF);   /*< Dummy clock (force DO hi-z for multiple slave SPI) */
   1da30:	f0 93 78 1f 	sts	0x1F78, r31	; 0x801f78 <__brkval+0x1>
   1da34:	e0 93 77 1f 	sts	0x1F77, r30	; 0x801f77 <__brkval>
   1da38:	67 c0       	rjmp	.+206    	; 0x1db08 <free+0x10c>
   1da3a:	ed 01       	movw	r28, r26
   1da3c:	20 e0       	ldi	r18, 0x00	; 0
   1da3e:	30 e0       	ldi	r19, 0x00	; 0
   1da40:	ce 17       	cp	r28, r30
   1da42:	df 07       	cpc	r29, r31
   1da44:	40 f4       	brcc	.+16     	; 0x1da56 <free+0x5a>
   1da46:	4a 81       	ldd	r20, Y+2	; 0x02
   1da48:	5b 81       	ldd	r21, Y+3	; 0x03
   1da4a:	9e 01       	movw	r18, r28
   1da4c:	41 15       	cp	r20, r1
   1da4e:	51 05       	cpc	r21, r1
   1da50:	f1 f0       	breq	.+60     	; 0x1da8e <free+0x92>
   1da52:	ea 01       	movw	r28, r20
   1da54:	f5 cf       	rjmp	.-22     	; 0x1da40 <free+0x44>
   1da56:	d3 83       	std	Z+3, r29	; 0x03
   1da58:	c2 83       	std	Z+2, r28	; 0x02
   1da5a:	40 81       	ld	r20, Z
   1da5c:	51 81       	ldd	r21, Z+1	; 0x01
   1da5e:	84 0f       	add	r24, r20
   1da60:	95 1f       	adc	r25, r21
   1da62:	c8 17       	cp	r28, r24
   1da64:	d9 07       	cpc	r29, r25
   1da66:	59 f4       	brne	.+22     	; 0x1da7e <free+0x82>
   1da68:	88 81       	ld	r24, Y
   1da6a:	99 81       	ldd	r25, Y+1	; 0x01
   1da6c:	84 0f       	add	r24, r20
   1da6e:	95 1f       	adc	r25, r21
   1da70:	02 96       	adiw	r24, 0x02	; 2
   1da72:	91 83       	std	Z+1, r25	; 0x01
   1da74:	80 83       	st	Z, r24
   1da76:	8a 81       	ldd	r24, Y+2	; 0x02
   1da78:	9b 81       	ldd	r25, Y+3	; 0x03
   1da7a:	93 83       	std	Z+3, r25	; 0x03
   1da7c:	82 83       	std	Z+2, r24	; 0x02
   1da7e:	21 15       	cp	r18, r1
   1da80:	31 05       	cpc	r19, r1
   1da82:	29 f4       	brne	.+10     	; 0x1da8e <free+0x92>
   1da84:	f0 93 7a 1f 	sts	0x1F7A, r31	; 0x801f7a <__flp+0x1>
   1da88:	e0 93 79 1f 	sts	0x1F79, r30	; 0x801f79 <__flp>
   1da8c:	3d c0       	rjmp	.+122    	; 0x1db08 <free+0x10c>
   1da8e:	e9 01       	movw	r28, r18
   1da90:	fb 83       	std	Y+3, r31	; 0x03
   1da92:	ea 83       	std	Y+2, r30	; 0x02
   1da94:	49 91       	ld	r20, Y+
   1da96:	59 91       	ld	r21, Y+
   1da98:	c4 0f       	add	r28, r20
   1da9a:	d5 1f       	adc	r29, r21
   1da9c:	ec 17       	cp	r30, r28
   1da9e:	fd 07       	cpc	r31, r29
   1daa0:	61 f4       	brne	.+24     	; 0x1daba <free+0xbe>
   1daa2:	80 81       	ld	r24, Z
   1daa4:	91 81       	ldd	r25, Z+1	; 0x01
   1daa6:	84 0f       	add	r24, r20
   1daa8:	95 1f       	adc	r25, r21
   1daaa:	02 96       	adiw	r24, 0x02	; 2
   1daac:	e9 01       	movw	r28, r18
   1daae:	99 83       	std	Y+1, r25	; 0x01
   1dab0:	88 83       	st	Y, r24
   1dab2:	82 81       	ldd	r24, Z+2	; 0x02
   1dab4:	93 81       	ldd	r25, Z+3	; 0x03
   1dab6:	9b 83       	std	Y+3, r25	; 0x03
   1dab8:	8a 83       	std	Y+2, r24	; 0x02
   1daba:	e0 e0       	ldi	r30, 0x00	; 0
   1dabc:	f0 e0       	ldi	r31, 0x00	; 0
   1dabe:	12 96       	adiw	r26, 0x02	; 2
   1dac0:	8d 91       	ld	r24, X+
   1dac2:	9c 91       	ld	r25, X
   1dac4:	13 97       	sbiw	r26, 0x03	; 3
   1dac6:	00 97       	sbiw	r24, 0x00	; 0
   1dac8:	19 f0       	breq	.+6      	; 0x1dad0 <free+0xd4>
   1daca:	fd 01       	movw	r30, r26
   1dacc:	dc 01       	movw	r26, r24
   1dace:	f7 cf       	rjmp	.-18     	; 0x1dabe <free+0xc2>
   1dad0:	8d 91       	ld	r24, X+
   1dad2:	9c 91       	ld	r25, X
   1dad4:	11 97       	sbiw	r26, 0x01	; 1
   1dad6:	9d 01       	movw	r18, r26
   1dad8:	2e 5f       	subi	r18, 0xFE	; 254
   1dada:	3f 4f       	sbci	r19, 0xFF	; 255
   1dadc:	82 0f       	add	r24, r18
   1dade:	93 1f       	adc	r25, r19
   1dae0:	20 91 77 1f 	lds	r18, 0x1F77	; 0x801f77 <__brkval>
   1dae4:	30 91 78 1f 	lds	r19, 0x1F78	; 0x801f78 <__brkval+0x1>
   1dae8:	28 17       	cp	r18, r24
   1daea:	39 07       	cpc	r19, r25
   1daec:	69 f4       	brne	.+26     	; 0x1db08 <free+0x10c>
   1daee:	30 97       	sbiw	r30, 0x00	; 0
   1daf0:	29 f4       	brne	.+10     	; 0x1dafc <free+0x100>
   1daf2:	10 92 7a 1f 	sts	0x1F7A, r1	; 0x801f7a <__flp+0x1>
   1daf6:	10 92 79 1f 	sts	0x1F79, r1	; 0x801f79 <__flp>
   1dafa:	02 c0       	rjmp	.+4      	; 0x1db00 <free+0x104>
   1dafc:	13 82       	std	Z+3, r1	; 0x03
   1dafe:	12 82       	std	Z+2, r1	; 0x02
   1db00:	b0 93 78 1f 	sts	0x1F78, r27	; 0x801f78 <__brkval+0x1>
   1db04:	a0 93 77 1f 	sts	0x1F77, r26	; 0x801f77 <__brkval>
   1db08:	df 91       	pop	r29
   1db0a:	cf 91       	pop	r28
   1db0c:	08 95       	ret

0001db0e <__ftoa_engine>:
   1db0e:	28 30       	cpi	r18, 0x08	; 8
   1db10:	08 f0       	brcs	.+2      	; 0x1db14 <__ftoa_engine+0x6>
   1db12:	27 e0       	ldi	r18, 0x07	; 7
   1db14:	33 27       	eor	r19, r19
   1db16:	da 01       	movw	r26, r20
   1db18:	99 0f       	add	r25, r25
   1db1a:	31 1d       	adc	r19, r1
   1db1c:	87 fd       	sbrc	r24, 7
   1db1e:	91 60       	ori	r25, 0x01	; 1
   1db20:	00 96       	adiw	r24, 0x00	; 0
   1db22:	61 05       	cpc	r22, r1
   1db24:	71 05       	cpc	r23, r1
   1db26:	39 f4       	brne	.+14     	; 0x1db36 <__ftoa_engine+0x28>
   1db28:	32 60       	ori	r19, 0x02	; 2
   1db2a:	2e 5f       	subi	r18, 0xFE	; 254
   1db2c:	3d 93       	st	X+, r19
   1db2e:	30 e3       	ldi	r19, 0x30	; 48
   1db30:	2a 95       	dec	r18
   1db32:	e1 f7       	brne	.-8      	; 0x1db2c <__ftoa_engine+0x1e>
   1db34:	08 95       	ret
   1db36:	9f 3f       	cpi	r25, 0xFF	; 255
   1db38:	30 f0       	brcs	.+12     	; 0x1db46 <__ftoa_engine+0x38>
   1db3a:	80 38       	cpi	r24, 0x80	; 128
   1db3c:	71 05       	cpc	r23, r1
   1db3e:	61 05       	cpc	r22, r1
   1db40:	09 f0       	breq	.+2      	; 0x1db44 <__ftoa_engine+0x36>
   1db42:	3c 5f       	subi	r19, 0xFC	; 252
   1db44:	3c 5f       	subi	r19, 0xFC	; 252
   1db46:	3d 93       	st	X+, r19
   1db48:	91 30       	cpi	r25, 0x01	; 1
   1db4a:	08 f0       	brcs	.+2      	; 0x1db4e <__ftoa_engine+0x40>
   1db4c:	80 68       	ori	r24, 0x80	; 128
   1db4e:	91 1d       	adc	r25, r1
   1db50:	df 93       	push	r29
   1db52:	cf 93       	push	r28
   1db54:	1f 93       	push	r17
   1db56:	0f 93       	push	r16
   1db58:	ff 92       	push	r15
   1db5a:	ef 92       	push	r14
   1db5c:	19 2f       	mov	r17, r25
   1db5e:	98 7f       	andi	r25, 0xF8	; 248
   1db60:	96 95       	lsr	r25
   1db62:	e9 2f       	mov	r30, r25
   1db64:	96 95       	lsr	r25
   1db66:	96 95       	lsr	r25
   1db68:	e9 0f       	add	r30, r25
   1db6a:	ff 27       	eor	r31, r31
   1db6c:	ee 5c       	subi	r30, 0xCE	; 206
   1db6e:	fd 4f       	sbci	r31, 0xFD	; 253
   1db70:	99 27       	eor	r25, r25
   1db72:	33 27       	eor	r19, r19
   1db74:	ee 24       	eor	r14, r14
   1db76:	ff 24       	eor	r15, r15
   1db78:	a7 01       	movw	r20, r14
   1db7a:	e7 01       	movw	r28, r14
   1db7c:	05 90       	lpm	r0, Z+
   1db7e:	08 94       	sec
   1db80:	07 94       	ror	r0
   1db82:	28 f4       	brcc	.+10     	; 0x1db8e <__ftoa_engine+0x80>
   1db84:	36 0f       	add	r19, r22
   1db86:	e7 1e       	adc	r14, r23
   1db88:	f8 1e       	adc	r15, r24
   1db8a:	49 1f       	adc	r20, r25
   1db8c:	51 1d       	adc	r21, r1
   1db8e:	66 0f       	add	r22, r22
   1db90:	77 1f       	adc	r23, r23
   1db92:	88 1f       	adc	r24, r24
   1db94:	99 1f       	adc	r25, r25
   1db96:	06 94       	lsr	r0
   1db98:	a1 f7       	brne	.-24     	; 0x1db82 <__ftoa_engine+0x74>
   1db9a:	05 90       	lpm	r0, Z+
   1db9c:	07 94       	ror	r0
   1db9e:	28 f4       	brcc	.+10     	; 0x1dbaa <__ftoa_engine+0x9c>
   1dba0:	e7 0e       	add	r14, r23
   1dba2:	f8 1e       	adc	r15, r24
   1dba4:	49 1f       	adc	r20, r25
   1dba6:	56 1f       	adc	r21, r22
   1dba8:	c1 1d       	adc	r28, r1
   1dbaa:	77 0f       	add	r23, r23
   1dbac:	88 1f       	adc	r24, r24
   1dbae:	99 1f       	adc	r25, r25
   1dbb0:	66 1f       	adc	r22, r22
   1dbb2:	06 94       	lsr	r0
   1dbb4:	a1 f7       	brne	.-24     	; 0x1db9e <__ftoa_engine+0x90>
   1dbb6:	05 90       	lpm	r0, Z+
   1dbb8:	07 94       	ror	r0
   1dbba:	28 f4       	brcc	.+10     	; 0x1dbc6 <__ftoa_engine+0xb8>
   1dbbc:	f8 0e       	add	r15, r24
   1dbbe:	49 1f       	adc	r20, r25
   1dbc0:	56 1f       	adc	r21, r22
   1dbc2:	c7 1f       	adc	r28, r23
   1dbc4:	d1 1d       	adc	r29, r1
   1dbc6:	88 0f       	add	r24, r24
   1dbc8:	99 1f       	adc	r25, r25
   1dbca:	66 1f       	adc	r22, r22
   1dbcc:	77 1f       	adc	r23, r23
   1dbce:	06 94       	lsr	r0
   1dbd0:	a1 f7       	brne	.-24     	; 0x1dbba <__ftoa_engine+0xac>
   1dbd2:	05 90       	lpm	r0, Z+
   1dbd4:	07 94       	ror	r0
   1dbd6:	20 f4       	brcc	.+8      	; 0x1dbe0 <__ftoa_engine+0xd2>
   1dbd8:	49 0f       	add	r20, r25
   1dbda:	56 1f       	adc	r21, r22
   1dbdc:	c7 1f       	adc	r28, r23
   1dbde:	d8 1f       	adc	r29, r24
   1dbe0:	99 0f       	add	r25, r25
   1dbe2:	66 1f       	adc	r22, r22
   1dbe4:	77 1f       	adc	r23, r23
   1dbe6:	88 1f       	adc	r24, r24
   1dbe8:	06 94       	lsr	r0
   1dbea:	a9 f7       	brne	.-22     	; 0x1dbd6 <__ftoa_engine+0xc8>
   1dbec:	84 91       	lpm	r24, Z
   1dbee:	10 95       	com	r17
   1dbf0:	17 70       	andi	r17, 0x07	; 7
   1dbf2:	41 f0       	breq	.+16     	; 0x1dc04 <__ftoa_engine+0xf6>
   1dbf4:	d6 95       	lsr	r29
   1dbf6:	c7 95       	ror	r28
   1dbf8:	57 95       	ror	r21
   1dbfa:	47 95       	ror	r20
   1dbfc:	f7 94       	ror	r15
   1dbfe:	e7 94       	ror	r14
   1dc00:	1a 95       	dec	r17
   1dc02:	c1 f7       	brne	.-16     	; 0x1dbf4 <__ftoa_engine+0xe6>
   1dc04:	e8 ed       	ldi	r30, 0xD8	; 216
   1dc06:	f1 e0       	ldi	r31, 0x01	; 1
   1dc08:	68 94       	set
   1dc0a:	15 90       	lpm	r1, Z+
   1dc0c:	15 91       	lpm	r17, Z+
   1dc0e:	35 91       	lpm	r19, Z+
   1dc10:	65 91       	lpm	r22, Z+
   1dc12:	95 91       	lpm	r25, Z+
   1dc14:	05 90       	lpm	r0, Z+
   1dc16:	7f e2       	ldi	r23, 0x2F	; 47
   1dc18:	73 95       	inc	r23
   1dc1a:	e1 18       	sub	r14, r1
   1dc1c:	f1 0a       	sbc	r15, r17
   1dc1e:	43 0b       	sbc	r20, r19
   1dc20:	56 0b       	sbc	r21, r22
   1dc22:	c9 0b       	sbc	r28, r25
   1dc24:	d0 09       	sbc	r29, r0
   1dc26:	c0 f7       	brcc	.-16     	; 0x1dc18 <__ftoa_engine+0x10a>
   1dc28:	e1 0c       	add	r14, r1
   1dc2a:	f1 1e       	adc	r15, r17
   1dc2c:	43 1f       	adc	r20, r19
   1dc2e:	56 1f       	adc	r21, r22
   1dc30:	c9 1f       	adc	r28, r25
   1dc32:	d0 1d       	adc	r29, r0
   1dc34:	7e f4       	brtc	.+30     	; 0x1dc54 <__ftoa_engine+0x146>
   1dc36:	70 33       	cpi	r23, 0x30	; 48
   1dc38:	11 f4       	brne	.+4      	; 0x1dc3e <__ftoa_engine+0x130>
   1dc3a:	8a 95       	dec	r24
   1dc3c:	e6 cf       	rjmp	.-52     	; 0x1dc0a <__ftoa_engine+0xfc>
   1dc3e:	e8 94       	clt
   1dc40:	01 50       	subi	r16, 0x01	; 1
   1dc42:	30 f0       	brcs	.+12     	; 0x1dc50 <__ftoa_engine+0x142>
   1dc44:	08 0f       	add	r16, r24
   1dc46:	0a f4       	brpl	.+2      	; 0x1dc4a <__ftoa_engine+0x13c>
   1dc48:	00 27       	eor	r16, r16
   1dc4a:	02 17       	cp	r16, r18
   1dc4c:	08 f4       	brcc	.+2      	; 0x1dc50 <__ftoa_engine+0x142>
   1dc4e:	20 2f       	mov	r18, r16
   1dc50:	23 95       	inc	r18
   1dc52:	02 2f       	mov	r16, r18
   1dc54:	7a 33       	cpi	r23, 0x3A	; 58
   1dc56:	28 f0       	brcs	.+10     	; 0x1dc62 <__ftoa_engine+0x154>
   1dc58:	79 e3       	ldi	r23, 0x39	; 57
   1dc5a:	7d 93       	st	X+, r23
   1dc5c:	2a 95       	dec	r18
   1dc5e:	e9 f7       	brne	.-6      	; 0x1dc5a <__ftoa_engine+0x14c>
   1dc60:	10 c0       	rjmp	.+32     	; 0x1dc82 <__ftoa_engine+0x174>
   1dc62:	7d 93       	st	X+, r23
   1dc64:	2a 95       	dec	r18
   1dc66:	89 f6       	brne	.-94     	; 0x1dc0a <__ftoa_engine+0xfc>
   1dc68:	06 94       	lsr	r0
   1dc6a:	97 95       	ror	r25
   1dc6c:	67 95       	ror	r22
   1dc6e:	37 95       	ror	r19
   1dc70:	17 95       	ror	r17
   1dc72:	17 94       	ror	r1
   1dc74:	e1 18       	sub	r14, r1
   1dc76:	f1 0a       	sbc	r15, r17
   1dc78:	43 0b       	sbc	r20, r19
   1dc7a:	56 0b       	sbc	r21, r22
   1dc7c:	c9 0b       	sbc	r28, r25
   1dc7e:	d0 09       	sbc	r29, r0
   1dc80:	98 f0       	brcs	.+38     	; 0x1dca8 <__ftoa_engine+0x19a>
   1dc82:	23 95       	inc	r18
   1dc84:	7e 91       	ld	r23, -X
   1dc86:	73 95       	inc	r23
   1dc88:	7a 33       	cpi	r23, 0x3A	; 58
   1dc8a:	08 f0       	brcs	.+2      	; 0x1dc8e <__ftoa_engine+0x180>
   1dc8c:	70 e3       	ldi	r23, 0x30	; 48
   1dc8e:	7c 93       	st	X, r23
   1dc90:	20 13       	cpse	r18, r16
   1dc92:	b8 f7       	brcc	.-18     	; 0x1dc82 <__ftoa_engine+0x174>
   1dc94:	7e 91       	ld	r23, -X
   1dc96:	70 61       	ori	r23, 0x10	; 16
   1dc98:	7d 93       	st	X+, r23
   1dc9a:	30 f0       	brcs	.+12     	; 0x1dca8 <__ftoa_engine+0x19a>
   1dc9c:	83 95       	inc	r24
   1dc9e:	71 e3       	ldi	r23, 0x31	; 49
   1dca0:	7d 93       	st	X+, r23
   1dca2:	70 e3       	ldi	r23, 0x30	; 48
   1dca4:	2a 95       	dec	r18
   1dca6:	e1 f7       	brne	.-8      	; 0x1dca0 <__ftoa_engine+0x192>
   1dca8:	11 24       	eor	r1, r1
   1dcaa:	ef 90       	pop	r14
   1dcac:	ff 90       	pop	r15
   1dcae:	0f 91       	pop	r16
   1dcb0:	1f 91       	pop	r17
   1dcb2:	cf 91       	pop	r28
   1dcb4:	df 91       	pop	r29
   1dcb6:	99 27       	eor	r25, r25
   1dcb8:	87 fd       	sbrc	r24, 7
   1dcba:	90 95       	com	r25
   1dcbc:	08 95       	ret

0001dcbe <strnlen_P>:
   1dcbe:	fc 01       	movw	r30, r24
   1dcc0:	05 90       	lpm	r0, Z+
   1dcc2:	61 50       	subi	r22, 0x01	; 1
   1dcc4:	70 40       	sbci	r23, 0x00	; 0
   1dcc6:	01 10       	cpse	r0, r1
   1dcc8:	d8 f7       	brcc	.-10     	; 0x1dcc0 <strnlen_P+0x2>
   1dcca:	80 95       	com	r24
   1dccc:	90 95       	com	r25
   1dcce:	8e 0f       	add	r24, r30
   1dcd0:	9f 1f       	adc	r25, r31
   1dcd2:	08 95       	ret

0001dcd4 <memset>:
   1dcd4:	dc 01       	movw	r26, r24
   1dcd6:	01 c0       	rjmp	.+2      	; 0x1dcda <memset+0x6>
   1dcd8:	6d 93       	st	X+, r22
   1dcda:	41 50       	subi	r20, 0x01	; 1
   1dcdc:	50 40       	sbci	r21, 0x00	; 0
   1dcde:	e0 f7       	brcc	.-8      	; 0x1dcd8 <memset+0x4>
   1dce0:	08 95       	ret

0001dce2 <strnlen>:
   1dce2:	fc 01       	movw	r30, r24
   1dce4:	61 50       	subi	r22, 0x01	; 1
   1dce6:	70 40       	sbci	r23, 0x00	; 0
   1dce8:	01 90       	ld	r0, Z+
   1dcea:	01 10       	cpse	r0, r1
   1dcec:	d8 f7       	brcc	.-10     	; 0x1dce4 <strnlen+0x2>
   1dcee:	80 95       	com	r24
   1dcf0:	90 95       	com	r25
   1dcf2:	8e 0f       	add	r24, r30
   1dcf4:	9f 1f       	adc	r25, r31
   1dcf6:	08 95       	ret

0001dcf8 <__ultoa_invert>:
   1dcf8:	fa 01       	movw	r30, r20
   1dcfa:	aa 27       	eor	r26, r26
   1dcfc:	28 30       	cpi	r18, 0x08	; 8
   1dcfe:	51 f1       	breq	.+84     	; 0x1dd54 <__ultoa_invert+0x5c>
   1dd00:	20 31       	cpi	r18, 0x10	; 16
   1dd02:	81 f1       	breq	.+96     	; 0x1dd64 <__ultoa_invert+0x6c>
   1dd04:	e8 94       	clt
   1dd06:	6f 93       	push	r22
   1dd08:	6e 7f       	andi	r22, 0xFE	; 254
   1dd0a:	6e 5f       	subi	r22, 0xFE	; 254
   1dd0c:	7f 4f       	sbci	r23, 0xFF	; 255
   1dd0e:	8f 4f       	sbci	r24, 0xFF	; 255
   1dd10:	9f 4f       	sbci	r25, 0xFF	; 255
   1dd12:	af 4f       	sbci	r26, 0xFF	; 255
   1dd14:	b1 e0       	ldi	r27, 0x01	; 1
   1dd16:	3e d0       	rcall	.+124    	; 0x1dd94 <__ultoa_invert+0x9c>
   1dd18:	b4 e0       	ldi	r27, 0x04	; 4
   1dd1a:	3c d0       	rcall	.+120    	; 0x1dd94 <__ultoa_invert+0x9c>
   1dd1c:	67 0f       	add	r22, r23
   1dd1e:	78 1f       	adc	r23, r24
   1dd20:	89 1f       	adc	r24, r25
   1dd22:	9a 1f       	adc	r25, r26
   1dd24:	a1 1d       	adc	r26, r1
   1dd26:	68 0f       	add	r22, r24
   1dd28:	79 1f       	adc	r23, r25
   1dd2a:	8a 1f       	adc	r24, r26
   1dd2c:	91 1d       	adc	r25, r1
   1dd2e:	a1 1d       	adc	r26, r1
   1dd30:	6a 0f       	add	r22, r26
   1dd32:	71 1d       	adc	r23, r1
   1dd34:	81 1d       	adc	r24, r1
   1dd36:	91 1d       	adc	r25, r1
   1dd38:	a1 1d       	adc	r26, r1
   1dd3a:	20 d0       	rcall	.+64     	; 0x1dd7c <__ultoa_invert+0x84>
   1dd3c:	09 f4       	brne	.+2      	; 0x1dd40 <__ultoa_invert+0x48>
   1dd3e:	68 94       	set
   1dd40:	3f 91       	pop	r19
   1dd42:	2a e0       	ldi	r18, 0x0A	; 10
   1dd44:	26 9f       	mul	r18, r22
   1dd46:	11 24       	eor	r1, r1
   1dd48:	30 19       	sub	r19, r0
   1dd4a:	30 5d       	subi	r19, 0xD0	; 208
   1dd4c:	31 93       	st	Z+, r19
   1dd4e:	de f6       	brtc	.-74     	; 0x1dd06 <__ultoa_invert+0xe>
   1dd50:	cf 01       	movw	r24, r30
   1dd52:	08 95       	ret
   1dd54:	46 2f       	mov	r20, r22
   1dd56:	47 70       	andi	r20, 0x07	; 7
   1dd58:	40 5d       	subi	r20, 0xD0	; 208
   1dd5a:	41 93       	st	Z+, r20
   1dd5c:	b3 e0       	ldi	r27, 0x03	; 3
   1dd5e:	0f d0       	rcall	.+30     	; 0x1dd7e <__ultoa_invert+0x86>
   1dd60:	c9 f7       	brne	.-14     	; 0x1dd54 <__ultoa_invert+0x5c>
   1dd62:	f6 cf       	rjmp	.-20     	; 0x1dd50 <__ultoa_invert+0x58>
   1dd64:	46 2f       	mov	r20, r22
   1dd66:	4f 70       	andi	r20, 0x0F	; 15
   1dd68:	40 5d       	subi	r20, 0xD0	; 208
   1dd6a:	4a 33       	cpi	r20, 0x3A	; 58
   1dd6c:	18 f0       	brcs	.+6      	; 0x1dd74 <__ultoa_invert+0x7c>
   1dd6e:	49 5d       	subi	r20, 0xD9	; 217
   1dd70:	31 fd       	sbrc	r19, 1
   1dd72:	40 52       	subi	r20, 0x20	; 32
   1dd74:	41 93       	st	Z+, r20
   1dd76:	02 d0       	rcall	.+4      	; 0x1dd7c <__ultoa_invert+0x84>
   1dd78:	a9 f7       	brne	.-22     	; 0x1dd64 <__ultoa_invert+0x6c>
   1dd7a:	ea cf       	rjmp	.-44     	; 0x1dd50 <__ultoa_invert+0x58>
   1dd7c:	b4 e0       	ldi	r27, 0x04	; 4
   1dd7e:	a6 95       	lsr	r26
   1dd80:	97 95       	ror	r25
   1dd82:	87 95       	ror	r24
   1dd84:	77 95       	ror	r23
   1dd86:	67 95       	ror	r22
   1dd88:	ba 95       	dec	r27
   1dd8a:	c9 f7       	brne	.-14     	; 0x1dd7e <__ultoa_invert+0x86>
   1dd8c:	00 97       	sbiw	r24, 0x00	; 0
   1dd8e:	61 05       	cpc	r22, r1
   1dd90:	71 05       	cpc	r23, r1
   1dd92:	08 95       	ret
   1dd94:	9b 01       	movw	r18, r22
   1dd96:	ac 01       	movw	r20, r24
   1dd98:	0a 2e       	mov	r0, r26
   1dd9a:	06 94       	lsr	r0
   1dd9c:	57 95       	ror	r21
   1dd9e:	47 95       	ror	r20
   1dda0:	37 95       	ror	r19
   1dda2:	27 95       	ror	r18
   1dda4:	ba 95       	dec	r27
   1dda6:	c9 f7       	brne	.-14     	; 0x1dd9a <__ultoa_invert+0xa2>
   1dda8:	62 0f       	add	r22, r18
   1ddaa:	73 1f       	adc	r23, r19
   1ddac:	84 1f       	adc	r24, r20
   1ddae:	95 1f       	adc	r25, r21
   1ddb0:	a0 1d       	adc	r26, r0
   1ddb2:	08 95       	ret

0001ddb4 <_exit>:
   1ddb4:	f8 94       	cli

0001ddb6 <__stop_program>:
   1ddb6:	ff cf       	rjmp	.-2      	; 0x1ddb6 <__stop_program>
