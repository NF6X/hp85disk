
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000016b8  00800100  0001e302  0001e396  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001e302  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007d3  008017b8  008017b8  0001fa4e  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001fa4e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001fa60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00001780  00000000  00000000  0001faa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00028040  00000000  00000000  00021220  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000614d  00000000  00000000  00049260  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0001210b  00000000  00000000  0004f3ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000061d8  00000000  00000000  000614b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000473d  00000000  00000000  00067690  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00026bba  00000000  00000000  0006bdcd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001720  00000000  00000000  00092987  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 bb 24 	jmp	0x4976	; 0x4976 <__ctors_end>
       4:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
       8:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
       c:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      10:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      14:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      18:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      1c:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      20:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      24:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      28:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      2c:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      30:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      34:	0c 94 37 34 	jmp	0x686e	; 0x686e <__vector_13>
      38:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      3c:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      40:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      44:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      48:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      4c:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      50:	0c 94 db 2b 	jmp	0x57b6	; 0x57b6 <__vector_20>
      54:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      58:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      5c:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      60:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      64:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      68:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      6c:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      70:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      74:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      78:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      7c:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      80:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      84:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      88:	0c 94 da 24 	jmp	0x49b4	; 0x49b4 <__bad_interrupt>
      8c:	de 43       	sbci	r29, 0x3E	; 62
      8e:	39 45       	sbci	r19, 0x59	; 89
      90:	0e 44       	sbci	r16, 0x4E	; 78
      92:	12 45       	sbci	r17, 0x52	; 82
      94:	12 45       	sbci	r17, 0x52	; 82
      96:	39 45       	sbci	r19, 0x59	; 89
      98:	39 45       	sbci	r19, 0x59	; 89
      9a:	39 45       	sbci	r19, 0x59	; 89
      9c:	39 45       	sbci	r19, 0x59	; 89
      9e:	39 45       	sbci	r19, 0x59	; 89
      a0:	39 45       	sbci	r19, 0x59	; 89
      a2:	39 45       	sbci	r19, 0x59	; 89
      a4:	39 45       	sbci	r19, 0x59	; 89
      a6:	de 43       	sbci	r29, 0x3E	; 62
      a8:	d8 43       	sbci	r29, 0x38	; 56
      aa:	39 45       	sbci	r19, 0x59	; 89
      ac:	39 45       	sbci	r19, 0x59	; 89
      ae:	39 45       	sbci	r19, 0x59	; 89
      b0:	39 45       	sbci	r19, 0x59	; 89
      b2:	08 44       	sbci	r16, 0x48	; 72
      b4:	39 45       	sbci	r19, 0x59	; 89
      b6:	39 45       	sbci	r19, 0x59	; 89
      b8:	de 43       	sbci	r29, 0x3E	; 62
      ba:	39 45       	sbci	r19, 0x59	; 89
      bc:	39 45       	sbci	r19, 0x59	; 89
      be:	39 45       	sbci	r19, 0x59	; 89
      c0:	39 45       	sbci	r19, 0x59	; 89
      c2:	39 45       	sbci	r19, 0x59	; 89
      c4:	39 45       	sbci	r19, 0x59	; 89
      c6:	39 45       	sbci	r19, 0x59	; 89
      c8:	39 45       	sbci	r19, 0x59	; 89
      ca:	39 45       	sbci	r19, 0x59	; 89
      cc:	de 43       	sbci	r29, 0x3E	; 62
      ce:	34 45       	sbci	r19, 0x54	; 84
      d0:	0e 44       	sbci	r16, 0x4E	; 78
      d2:	12 45       	sbci	r17, 0x52	; 82
      d4:	12 45       	sbci	r17, 0x52	; 82
      d6:	39 45       	sbci	r19, 0x59	; 89
      d8:	39 45       	sbci	r19, 0x59	; 89
      da:	39 45       	sbci	r19, 0x59	; 89
      dc:	39 45       	sbci	r19, 0x59	; 89
      de:	39 45       	sbci	r19, 0x59	; 89
      e0:	39 45       	sbci	r19, 0x59	; 89
      e2:	39 45       	sbci	r19, 0x59	; 89
      e4:	39 45       	sbci	r19, 0x59	; 89
      e6:	de 43       	sbci	r29, 0x3E	; 62
      e8:	d8 43       	sbci	r29, 0x38	; 56
      ea:	39 45       	sbci	r19, 0x59	; 89
      ec:	39 45       	sbci	r19, 0x59	; 89
      ee:	2f 45       	sbci	r18, 0x5F	; 95
      f0:	39 45       	sbci	r19, 0x59	; 89
      f2:	08 44       	sbci	r16, 0x48	; 72
      f4:	39 45       	sbci	r19, 0x59	; 89
      f6:	39 45       	sbci	r19, 0x59	; 89
      f8:	de 43       	sbci	r29, 0x3E	; 62
      fa:	5b 45       	sbci	r21, 0x5B	; 91
      fc:	42 46       	sbci	r20, 0x62	; 98
      fe:	51 45       	sbci	r21, 0x51	; 81
     100:	af 45       	sbci	r26, 0x5F	; 95
     102:	96 45       	sbci	r25, 0x56	; 86
     104:	42 46       	sbci	r20, 0x62	; 98
     106:	42 46       	sbci	r20, 0x62	; 98
     108:	42 46       	sbci	r20, 0x62	; 98
     10a:	42 46       	sbci	r20, 0x62	; 98
     10c:	42 46       	sbci	r20, 0x62	; 98
     10e:	42 46       	sbci	r20, 0x62	; 98
     110:	42 46       	sbci	r20, 0x62	; 98
     112:	42 46       	sbci	r20, 0x62	; 98
     114:	65 45       	sbci	r22, 0x55	; 85
     116:	79 45       	sbci	r23, 0x59	; 89
     118:	42 46       	sbci	r20, 0x62	; 98
     11a:	42 46       	sbci	r20, 0x62	; 98
     11c:	42 46       	sbci	r20, 0x62	; 98
     11e:	42 46       	sbci	r20, 0x62	; 98
     120:	4d 45       	sbci	r20, 0x5D	; 93
     122:	42 46       	sbci	r20, 0x62	; 98
     124:	42 46       	sbci	r20, 0x62	; 98
     126:	79 45       	sbci	r23, 0x59	; 89
     128:	42 46       	sbci	r20, 0x62	; 98
     12a:	42 46       	sbci	r20, 0x62	; 98
     12c:	42 46       	sbci	r20, 0x62	; 98
     12e:	42 46       	sbci	r20, 0x62	; 98
     130:	42 46       	sbci	r20, 0x62	; 98
     132:	42 46       	sbci	r20, 0x62	; 98
     134:	42 46       	sbci	r20, 0x62	; 98
     136:	42 46       	sbci	r20, 0x62	; 98
     138:	42 46       	sbci	r20, 0x62	; 98
     13a:	5b 45       	sbci	r21, 0x5B	; 91
     13c:	dd 45       	sbci	r29, 0x5D	; 93
     13e:	51 45       	sbci	r21, 0x51	; 81
     140:	af 45       	sbci	r26, 0x5F	; 95
     142:	96 45       	sbci	r25, 0x56	; 86
     144:	42 46       	sbci	r20, 0x62	; 98
     146:	42 46       	sbci	r20, 0x62	; 98
     148:	42 46       	sbci	r20, 0x62	; 98
     14a:	42 46       	sbci	r20, 0x62	; 98
     14c:	42 46       	sbci	r20, 0x62	; 98
     14e:	42 46       	sbci	r20, 0x62	; 98
     150:	42 46       	sbci	r20, 0x62	; 98
     152:	42 46       	sbci	r20, 0x62	; 98
     154:	65 45       	sbci	r22, 0x55	; 85
     156:	79 45       	sbci	r23, 0x59	; 89
     158:	42 46       	sbci	r20, 0x62	; 98
     15a:	42 46       	sbci	r20, 0x62	; 98
     15c:	dd 45       	sbci	r29, 0x5D	; 93
     15e:	42 46       	sbci	r20, 0x62	; 98
     160:	4d 45       	sbci	r20, 0x5D	; 93
     162:	42 46       	sbci	r20, 0x62	; 98
     164:	42 46       	sbci	r20, 0x62	; 98
     166:	79 45       	sbci	r23, 0x59	; 89
     168:	74 6e       	ori	r23, 0xE4	; 228
     16a:	7e 6e       	ori	r23, 0xEE	; 238
     16c:	86 6e       	ori	r24, 0xE6	; 230
     16e:	88 6e       	ori	r24, 0xE8	; 232
     170:	8a 6e       	ori	r24, 0xEA	; 234
     172:	8c 6e       	ori	r24, 0xEC	; 236
     174:	8e 6e       	ori	r24, 0xEE	; 238
     176:	90 6e       	ori	r25, 0xE0	; 224
     178:	93 6e       	ori	r25, 0xE3	; 227
     17a:	30 8f       	std	Z+24, r19	; 0x18
     17c:	56 8f       	std	Z+30, r21	; 0x1e
     17e:	7d 8f       	std	Y+29, r23	; 0x1d
     180:	97 8f       	std	Z+31, r25	; 0x1f
     182:	a0 8f       	std	Z+24, r26	; 0x18
     184:	c0 8f       	std	Z+24, r28	; 0x18
     186:	d9 8f       	std	Y+25, r29	; 0x19
     188:	e8 8f       	std	Y+24, r30	; 0x18
     18a:	33 90       	.word	0x9033	; ????
     18c:	05 90       	lpm	r0, Z+
     18e:	21 92       	st	Z+, r2
     190:	29 92       	st	Y+, r2
     192:	2e 92       	st	-X, r2
     194:	52 92       	st	-Z, r5
     196:	5c 92       	st	X, r5
     198:	a6 92       	lac	Z, r10
     19a:	71 92       	st	Z+, r7
     19c:	71 92       	st	Z+, r7
     19e:	69 92       	st	Y+, r6
     1a0:	bc b3       	in	r27, 0x1c	; 28
     1a2:	7b b3       	in	r23, 0x1b	; 27
     1a4:	7b b3       	in	r23, 0x1b	; 27
     1a6:	7b b3       	in	r23, 0x1b	; 27
     1a8:	7b b3       	in	r23, 0x1b	; 27
     1aa:	3f b3       	in	r19, 0x1f	; 31
     1ac:	46 b3       	in	r20, 0x16	; 22
     1ae:	4d b3       	in	r20, 0x1d	; 29
     1b0:	5d b3       	in	r21, 0x1d	; 29
     1b2:	6b b3       	in	r22, 0x1b	; 27
     1b4:	64 b3       	in	r22, 0x14	; 20
     1b6:	9b bb       	out	0x1b, r25	; 27
     1b8:	a5 bc       	out	0x25, r10	; 37
     1ba:	f9 bc       	out	0x29, r15	; 41
     1bc:	7d bd       	out	0x2d, r23	; 45
     1be:	b0 bd       	out	0x20, r27	; 32
     1c0:	2c be       	out	0x3c, r2	; 60
     1c2:	06 c0       	rjmp	.+12     	; 0x1d0 <__trampolines_end>
     1c4:	dc c0       	rjmp	.+440    	; 0x37e <__c.3684+0x5>
     1c6:	1b c1       	rjmp	.+566    	; 0x3fe <__c.3676+0xd>
     1c8:	cb c1       	rjmp	.+918    	; 0x560 <__c.3727+0x9>
     1ca:	0c c2       	rjmp	.+1048   	; 0x5e4 <__c.3942+0xb>
     1cc:	40 bc       	out	0x20, r4	; 32
     1ce:	5c bc       	out	0x2c, r5	; 44

000001d0 <__trampolines_end>:
     1d0:	6e 61       	ori	r22, 0x1E	; 30
     1d2:	6e 00       	.word	0x006e	; ????

000001d4 <__c.2332>:
     1d4:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1e4:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1f4:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     204:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     214:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     224:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     234:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     244:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     254:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     264:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     274:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     284:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     294:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2a4:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2b4:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2c4:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002d2 <__c.3690>:
     2d2:	63 73 5f 64 69 73 61 62 6c 65 20 77 61 73 3a 20     cs_disable was: 
     2e2:	25 64 2c 20 77 61 6e 74 3a 20 25 64 0a 00           %d, want: %d..

000002f0 <__c.3685>:
     2f0:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     300:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

0000030d <__c.3716>:
     30d:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     31d:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     32d:	25 75 29 0a 00                                      %u)..

00000332 <__c.3707>:
     332:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     342:	61 69 6c 65 64 21 0a 00                             ailed!..

0000034a <__c.3701>:
     34a:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     35a:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

00000365 <__c.3686>:
     365:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     375:	35 75 0a 00                                         5u..

00000379 <__c.3684>:
     379:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     389:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

00000397 <__c.3682>:
     397:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     3a7:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003b5 <__c.3680>:
     3b5:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     3c5:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003d3 <__c.3678>:
     3d3:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     3e3:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003f1 <__c.3676>:
     3f1:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     401:	75 0a 00                                            u..

00000404 <__c.3674>:
     404:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     414:	75 0a 00                                            u..

00000417 <__c.3672>:
     417:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

00000424 <__c.3670>:
     424:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     434:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000441 <__c.3702>:
     441:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000451 <__c.3695>:
     451:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

00000462 <__c.3685>:
     462:	72 74 63 5f 69 6e 69 74 20 72 61 6d 20 2d 20 77     rtc_init ram - w
     472:	72 69 74 65 20 65 72 72 6f 72 0a 00                 rite error..

0000047e <__c.3683>:
     47e:	72 74 63 20 5f 77 72 69 74 65 20 65 70 6f 63 68     rtc _write epoch
     48e:	20 66 61 69 6c 65 64 0a 00                           failed..

00000497 <__c.3672>:
     497:	72 74 63 5f 72 75 6e 20 2d 20 77 72 69 74 65 20     rtc_run - write 
     4a7:	65 72 72 6f 72 0a 00                                error..

000004ae <__c.3670>:
     4ae:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     4be:	6f 72 0a 00                                         or..

000004c2 <__c.3662>:
     4c2:	72 74 63 5f 73 74 61 74 65 20 72 65 61 64 20 65     rtc_state read e
     4d2:	72 72 6f 72 0a 00                                   rror..

000004d8 <__c.3820>:
     4d8:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     4e8:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     4f8:	74 20 25 64 0a 00                                   t %d..

000004fe <__c.3654>:
     4fe:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     50e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

0000051e <__c.3733>:
     51e:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

0000052e <__c.3731>:
     52e:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

0000053f <__c.3729>:
     53f:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     54f:	66 61 69 6c 65 64 0a 00                             failed..

00000557 <__c.3727>:
     557:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000563 <__c.3725>:
     563:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     573:	64 0a 00                                            d..

00000576 <__c.3723>:
     576:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     586:	65 64 0a 00                                         ed..

0000058a <__c.3703>:
     58a:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

00000595 <__c.3701>:
     595:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005a3 <__c.3692>:
     5a3:	5b 53 65 63 6f 6e 64 73 3a 20 25 73 5d 0a 00        [Seconds: %s]..

000005b2 <__c.3687>:
     5b2:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005bc <__c.3667>:
     5bc:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5cc:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005d9 <__c.3942>:
     5d9:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005ea <__c.3940>:
     5ea:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     5fa:	0a 00                                               ..

000005fc <__c.3938>:
     5fc:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

0000060d <__c.3936>:
     60d:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

0000061e <__c.3934>:
     61e:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     62e:	0a 00                                               ..

00000630 <__c.3927>:
     630:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     640:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     650:	6d 65 0a 00                                         me..

00000654 <__c.3925>:
     654:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     664:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

0000066e <__c.3923>:
     66e:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     67e:	61 69 6c 65 64 0a 00                                ailed..

00000685 <__c.3921>:
     685:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     695:	6e 69 74 0a 00                                      nit..

0000069a <__c.3919>:
     69a:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6aa:	0a 00                                               ..

000006ac <__c.3910>:
     6ac:	44 53 54 20 45 4e 44 20 20 20 20 20 20 20 20 20     DST END         
     6bc:	47 4d 54 3a 20 25 73 0a 00                          GMT: %s..

000006c5 <__c.3908>:
     6c5:	44 53 54 20 53 54 41 52 54 20 20 20 20 20 20 20     DST START       
     6d5:	47 4d 54 3a 20 25 73 0a 00                          GMT: %s..

000006de <__c.3904>:
     6de:	44 53 54 20 45 4e 44 20 20 20 6c 6f 63 61 6c 74     DST END   localt
     6ee:	69 6d 65 3a 20 25 73 0a 00                          ime: %s..

000006f7 <__c.3902>:
     6f7:	44 53 54 20 53 54 41 52 54 20 6c 6f 63 61 6c 74     DST START localt
     707:	69 6d 65 3a 20 25 73 0a 00                          ime: %s..

00000710 <__c.3873>:
     710:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     720:	61 69 6c 65 64 0a 00                                ailed..

00000727 <__c.3871>:
     727:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

00000738 <__c.3869>:
     738:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     748:	0a 00                                               ..

0000074a <__c.3867>:
     74a:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

0000075b <__c.3865>:
     75b:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

0000076c <__c.3863>:
     76c:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     77c:	0a 00                                               ..

0000077e <__c.3842>:
     77e:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     78e:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

0000079f <__c.3717>:
     79f:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     7af:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

000007bc <__c.3685>:
     7bc:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

000007cc <__c.3714>:
     7cc:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

000007da <__c.3712>:
     7da:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     7ea:	25 6c 64 0a 00                                      %ld..

000007ef <__c.3710>:
     7ef:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7ff:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

0000080d <__c.3707>:
     80d:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

0000081e <__c.3705>:
     81e:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

0000082a <__c.3703>:
     82a:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000083a <__c.3690>:
     83a:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

00000847 <__c.3662>:
     847:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     857:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000863 <__c.3734>:
     863:	0a 00                                               ..

00000865 <__c.3732>:
     865:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     875:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     885:	73 00                                               s.

00000887 <__c.3730>:
     887:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     897:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

000008a2 <__c.3724>:
     8a2:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     8b2:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8c2:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8d2:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8e2:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008ef <__c.3722>:
     8ef:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     8ff:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     90f:	30 34 58 0a 00                                      04X..

00000914 <__c.3720>:
     914:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     924:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000932 <__c.3718>:
     932:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     942:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000951 <__c.3716>:
     951:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     961:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000970 <__c.3714>:
     970:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     980:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

0000098f <__c.3712>:
     98f:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     99f:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

000009ae <__c.3710>:
     9ae:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     9be:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009cd <__c.3708>:
     9cd:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     9dd:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

000009eb <__c.3706>:
     9eb:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     9fb:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a09 <__c.3704>:
     a09:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     a19:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a28 <__c.3702>:
     a28:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a38:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a46 <__c.3700>:
     a46:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a57 <__c.3664>:
     a57:	72 63 3d 25 75 0a 00                                rc=%u..

00000a5e <__c.3702>:
     a5e:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     a6e:	72 65 65 0a 00                                      ree..

00000a73 <__c.3700>:
     a73:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     a83:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     a93:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000a9c <__c.3696>:
     a9c:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000aaa <__c.3683>:
     aaa:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     aba:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000aca <__c.3681>:
     aca:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000ad8 <__c.3679>:
     ad8:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     ae8:	73 74 0a 00                                         st..

00000aec <__c.3677>:
     aec:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000afc <__c.3675>:
     afc:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     b0c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000b1c <__c.3667>:
     b1c:	69 6e 64 3a 25 64 2c 61 72 67 63 3a 25 64 0a 00     ind:%d,argc:%d..

00000b2c <__c.3657>:
     b2c:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b3c:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b4c:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b5c:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b6c:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b7c:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b8c:	20 6c 73 20 64 69 72 0a 66 61 74 66 73 20 73 74      ls dir.fatfs st
     b9c:	61 74 75 73 20 66 69 6c 65 0a 0a 00                 atus file...

00000ba8 <__c.3655>:
     ba8:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000bb4 <__c.4014>:
     bb4:	45 78 70 65 63 74 65 64 20 2f 64 65 76 2f 73 64     Expected /dev/sd
     bc4:	61 20 2e 2e 20 2f 64 65 76 2f 73 64 6a 0a 00        a .. /dev/sdj..

00000bd3 <__c.3987>:
     bd3:	25 73 0a 00                                         %s..

00000bd7 <__c.3985>:
     bd7:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000bdf <__c.3881>:
     bdf:	09 63 74 69 6d 65 3a 20 25 73 0a 00                 .ctime: %s..

00000beb <__c.3879>:
     beb:	09 6d 74 69 6d 65 3a 20 25 73 0a 00                 .mtime: %s..

00000bf7 <__c.3877>:
     bf7:	09 61 74 69 6d 65 3a 20 25 73 0a 00                 .atime: %s..

00000c03 <__c.3875>:
     c03:	09 47 49 44 3a 20 20 20 25 6c 75 0a 00              .GID:   %lu..

00000c10 <__c.3873>:
     c10:	09 55 49 44 3a 20 20 20 25 6c 75 0a 00              .UID:   %lu..

00000c1d <__c.3871>:
     c1d:	09 4d 6f 64 65 3a 20 20 25 6c 6f 0a 00              .Mode:  %lo..

00000c2a <__c.3869>:
     c2a:	55 6e 6b 6e 6f 77 6e 0a 00                          Unknown..

00000c33 <__c.3867>:
     c33:	46 69 6c 65 0a 00                                   File..

00000c39 <__c.3865>:
     c39:	44 49 52 0a 00                                      DIR..

00000c3e <__c.3863>:
     c3e:	09 54 79 70 65 3a 20 20 00                          .Type:  .

00000c47 <__c.3861>:
     c47:	09 53 69 7a 65 3a 20 20 25 6c 75 0a 00              .Size:  %lu..

00000c54 <__c.3740>:
     c54:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000c60 <__c.3669>:
     c60:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     c70:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c78 <__c.3662>:
     c78:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     c88:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c90 <__c.3902>:
     c90:	43 61 6e 27 20 6f 70 65 6e 3a 20 25 73 0a 00        Can' open: %s..

00000c9f <__c.3892>:
     c9f:	53 75 6d 3a 20 25 30 34 58 68 2c 20 25 35 75 0a     Sum: %04Xh, %5u.
	...

00000cb0 <__c.3884>:
     cb0:	43 61 6e 27 20 6f 70 65 6e 3a 20 25 73 0a 00        Can' open: %s..

00000cbf <__c.3874>:
     cbf:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000ccc <__c.3872>:
     ccc:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cdc <__c.3864>:
     cdc:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000ce7 <__c.3860>:
     ce7:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     cf7:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     d07:	68 0a 00                                            h..

00000d0a <__c.3857>:
     d0a:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000d1a <__c.3852>:
     d1a:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     d2a:	5b 25 73 5d 0a 00                                   [%s]..

00000d30 <__c.3850>:
     d30:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000d3e <__c.3848>:
     d3e:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     d4e:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000d5f <__c.3835>:
     d5f:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     d6f:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000d79 <__c.3830>:
     d79:	25 73 0a 00                                         %s..

00000d7d <__c.3828>:
     d7d:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     d8d:	0a 00                                               ..

00000d8f <__c.3816>:
     d8f:	0d 00                                               ..

00000d91 <__c.3814>:
     d91:	4d 6f 72 65 2e 2e 00                                More...

00000d98 <__c.3804>:
     d98:	0a 00                                               ..

00000d9a <__c.3799>:
     d9a:	0a 00                                               ..

00000d9c <__c.3791>:
     d9c:	20 3a 20 00                                          : .

00000da0 <__c.3786>:
     da0:	20 20 20 00                                            .

00000da4 <__c.3781>:
     da4:	25 30 32 78 20 00                                   %02x .

00000daa <__c.3779>:
     daa:	25 30 38 6c 78 20 3a 20 00                          %08lx : .

00000db3 <__c.3777>:
     db3:	43 61 6e 27 20 6f 70 65 6e 3a 20 25 73 0a 00        Can' open: %s..

00000dc2 <__c.3765>:
     dc2:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     dd2:	2e 0a 00                                            ...

00000dd5 <__c.3761>:
     dd5:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000de4 <__c.3758>:
     de4:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000df1 <__c.3756>:
     df1:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000dfe <__c.3754>:
     dfe:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000e0e <__c.3752>:
     e0e:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000e1b <__c.3750>:
     e1b:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000e2b <__c.3748>:
     e2b:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000e37 <__c.3737>:
     e37:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000e42 <__c.3735>:
     e42:	0a 00                                               ..

00000e44 <__c.3730>:
     e44:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000e54 <__c.3719>:
     e54:	25 73 0a 00                                         %s..

00000e58 <__c.3688>:
     e58:	70 6f 73 69 78 20 70 72 65 66 69 78 20 69 73 20     posix prefix is 
     e68:	6f 70 74 69 6f 6e 61 6c 0a 70 6f 73 69 78 20 63     optional.posix c
     e78:	68 6d 6f 64 20 66 69 6c 65 20 4e 4e 4e 0a 70 6f     hmod file NNN.po
     e88:	73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d 70     six cat file [-p
     e98:	5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a 70     ].posix cd dir.p
     ea8:	6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31 20     osix copy file1 
     eb8:	66 69 6c 65 32 0a 70 6f 73 69 78 20 68 65 78 64     file2.posix hexd
     ec8:	75 6d 70 20 66 69 6c 65 20 5b 2d 70 5d 0a 70 6f     ump file [-p].po
     ed8:	73 69 78 20 6c 6f 67 20 73 74 72 0a 70 6f 73 69     six log str.posi
     ee8:	78 20 6c 73 20 64 69 72 20 5b 2d 6c 5d 0a 70 6f     x ls dir [-l].po
     ef8:	73 69 78 20 6d 6b 64 69 72 20 64 69 72 0a 70 6f     six mkdir dir.po
     f08:	73 69 78 20 6d 6b 66 73 0a 70 6f 73 69 78 20 70     six mkfs.posix p
     f18:	61 67 65 20 4e 4e 0a 70 6f 73 69 78 20 70 77 64     age NN.posix pwd
     f28:	0a 70 6f 73 69 78 20 73 74 61 74 20 66 69 6c 65     .posix stat file
     f38:	0a 70 6f 73 69 78 20 73 75 6d 20 66 69 6c 65 0a     .posix sum file.
     f48:	70 6f 73 69 78 20 72 6d 20 66 69 6c 65 0a 70 6f     posix rm file.po
     f58:	73 69 78 20 72 6d 64 69 72 20 64 69 72 0a 70 6f     six rmdir dir.po
     f68:	73 69 78 20 72 65 6e 61 6d 65 20 6f 6c 64 20 6e     six rename old n
     f78:	65 77 0a 70 6f 73 69 78 20 75 70 6c 6f 61 64 20     ew.posix upload 
     f88:	66 69 6c 65 0a 0a 00                                file...

00000f8f <__c.3686>:
     f8f:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000f9b <__c.3877>:
     f9b:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000fa9 <__c.3871>:
     fa9:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000fb6 <__c.3864>:
     fb6:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000fc4 <__c.3855>:
     fc4:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000fd1 <__c.3846>:
     fd1:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000fe2 <__c.3832>:
     fe2:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     ff2:	5d 0a 00                                            ]..

00000ff5 <__c.3814>:
     ff5:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
    1005:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00001012 <__c.4363>:
    1012:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
    1022:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
    1032:	64 28 25 64 29 5d 0a 00                             d(%d)]..

0000103a <__c.4358>:
    103a:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
    104a:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00001054 <__c.4348>:
    1054:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
    1064:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
    1074:	28 25 64 29 5d 0a 00                                (%d)]..

0000107b <__c.4344>:
    107b:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
    108b:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
    109b:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

000010a8 <__c.4341>:
    10a8:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
    10b8:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

000010c1 <__c.4325>:
    10c1:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

000010cc <__c.4323>:
    10cc:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

000010d7 <__c.4321>:
    10d7:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

000010e2 <__c.4317>:
    10e2:	20 20 20 20 20 00                                        .

000010e8 <__c.4315>:
    10e8:	25 30 32 58 20 25 63 20 00                          %02X %c .

000010f1 <__c.4273>:
    10f1:	3c 4e 52 46 44 3d 25 64 2c 4e 44 41 56 3d 25 64     <NRFD=%d,NDAV=%d
    1101:	3e 0a 00                                            >..

00001104 <__c.4269>:
    1104:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1114:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

0000111e <__c.4265>:
    111e:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    112e:	20 4e 44 41 43 3d 3d 31 3e 0a 00                     NDAC==1>..

00001139 <__c.4262>:
    1139:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1149:	20 4e 52 46 44 3d 3d 30 3e 0a 00                     NRFD==0>..

00001154 <__c.4257>:
    1154:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1164:	20 4e 52 46 44 3d 3d 31 20 26 26 20 4e 44 41 43      NRFD==1 && NDAC
    1174:	20 3d 3d 20 30 3e 0a 00                              == 0>..

0000117c <__c.4253>:
    117c:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    118c:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00001196 <__c.4236>:
    1196:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    11a6:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    11b6:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

000011c4 <__c.4231>:
    11c4:	5b 52 45 4e 20 48 49 5d 0a 00                       [REN HI]..

000011ce <__c.4229>:
    11ce:	5b 52 45 4e 20 4c 4f 57 5d 0a 00                    [REN LOW]..

000011d9 <__c.4224>:
    11d9:	5b 49 46 43 20 53 45 4e 54 5d 0a 00                 [IFC SENT]..

000011e5 <__c.4216>:
    11e5:	5b 50 50 52 3a 25 30 32 58 48 2c 20 50 49 4e 3a     [PPR:%02XH, PIN:
    11f5:	25 30 32 58 48 2c 20 44 44 52 3a 25 30 32 58 48     %02XH, DDR:%02XH
    1205:	5d 0a 00                                            ]..

00001208 <__c.4210>:
    1208:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    1218:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001223 <__c.4208>:
    1223:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    1233:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    1243:	72 61 6e 67 65 0a 00                                range..

0000124a <__c.4203>:
    124a:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    125a:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001265 <__c.4201>:
    1265:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    1275:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    1285:	61 6e 67 65 0a 00                                   ange..

0000128b <__c.4196>:
    128b:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    129b:	5d 0a 00                                            ]..

0000129e <__c.4191>:
    129e:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

000012af <__c.4374>:
    12af:	0a 00                                               ..

000012b1 <__c.4366>:
    12b1:	2e 00                                               ..

000012b3 <__c.4364>:
    12b3:	25 63 00                                            %c.

000012b6 <__c.4362>:
    12b6:	20 7c 20 00                                          | .

000012ba <__c.4357>:
    12ba:	20 25 30 32 58 00                                    %02X.

000012c0 <__c.4355>:
    12c0:	0a 00                                               ..

000012c2 <__c.4353>:
    12c2:	5b 44 75 6d 70 3a 20 25 64 5d 0a 00                 [Dump: %d]..

000012ce <__c.4342>:
    12ce:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

000012df <__c.4337>:
    12df:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    12ef:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    12ff:	32 58 48 5d 0a 00                                   2XH]..

00001305 <__c.4335>:
    1305:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    1315:	0a 00                                               ..

00001317 <__c.4333>:
    1317:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

00001328 <__c.4328>:
    1328:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

00001334 <__c.4326>:
    1334:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

00001344 <__c.4324>:
    1344:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    1354:	52 5d 0a 00                                         R]..

00001358 <__c.4322>:
    1358:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    1368:	0a 00                                               ..

0000136a <__c.4320>:
    136a:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

0000137b <__c.4318>:
    137b:	5b 55 4e 54 5d 0a 00                                [UNT]..

00001382 <__c.4313>:
    1382:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

0000138e <__c.4311>:
    138e:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    139e:	52 5d 0a 00                                         R]..

000013a2 <__c.4309>:
    13a2:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

000013b3 <__c.4307>:
    13b3:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    13c3:	0a 00                                               ..

000013c5 <__c.4305>:
    13c5:	0a 00                                               ..

000013c7 <__c.4303>:
    13c7:	5b 55 4e 4c 5d 0a 00                                [UNL]..

000013ce <__c.4298>:
    13ce:	5b 48 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [HPIB (%02XH) no
    13de:	74 20 64 65 66 69 6e 65 64 5d 0a 00                 t defined]..

000013ea <__c.4296>:
    13ea:	5b 44 43 4c 5d 0a 00                                [DCL]..

000013f1 <__c.4294>:
    13f1:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

000013fe <__c.4292>:
    13fe:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

0000140a <__c.4290>:
    140a:	5b 53 44 43 5d 0a 00                                [SDC]..

00001411 <__c.4288>:
    1411:	5b 53 50 44 5d 0a 00                                [SPD]..

00001418 <__c.4286>:
    1418:	5b 53 50 45 5d 0a 00                                [SPE]..

0000141f <__c.4284>:
    141f:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    142f:	5d 0a 00                                            ]..

00001432 <__c.4282>:
    1432:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    1442:	5d 0a 00                                            ]..

00001445 <__c.4277>:
    1445:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    1455:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

0000145f <__c.4275>:
    145f:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    146f:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

00001480 <__c.4248>:
    1480:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

00001491 <__c.4246>:
    1491:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

0000149e <__c.4244>:
    149e:	3c 42 55 53 3e 0a 00                                <BUS>..

000014a5 <__c.4242>:
    14a5:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

000014b0 <__c.4240>:
    14b0:	3c 49 46 43 3e 0a 00                                <IFC>..

000014b7 <__c.4235>:
    14b7:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    14c7:	0a 00                                               ..

000014c9 <__c.4233>:
    14c9:	44 6f 6e 65 0a 00                                   Done..

000014cf <__c.4229>:
    14cf:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

000014db <__c.4227>:
    14db:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    14eb:	20 65 78 69 74 0a 00                                 exit..

000014f2 <__c.4225>:
    14f2:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    1502:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    1512:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

0000151d <__c.4223>:
    151d:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    152d:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

00001537 <__c.4177>:
    1537:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    1547:	6f 74 65 63 74 65 64 0a 00                          otected..

00001550 <__c.4175>:
    1550:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    1560:	0a 00                                               ..

00001562 <__c.4419>:
    1562:	50 6f 72 74 20 64 64 72 20 44 20 52 44 3a 5b 25     Port ddr D RD:[%
    1572:	30 32 58 48 5d 0a 00                                02XH]..

00001579 <__c.4417>:
    1579:	50 6f 72 74 20 64 64 72 20 43 20 52 44 3a 5b 25     Port ddr C RD:[%
    1589:	30 32 58 48 5d 0a 00                                02XH]..

00001590 <__c.4415>:
    1590:	50 6f 72 74 20 64 64 72 20 42 20 52 44 3a 5b 25     Port ddr B RD:[%
    15a0:	30 32 58 48 5d 0a 00                                02XH]..

000015a7 <__c.4413>:
    15a7:	50 6f 72 74 20 64 64 72 20 41 20 52 44 3a 5b 25     Port ddr A RD:[%
    15b7:	30 32 58 48 5d 0a 00                                02XH]..

000015be <__c.4411>:
    15be:	50 6f 72 74 20 6c 61 74 63 68 20 44 20 52 44 3a     Port latch D RD:
    15ce:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

000015d7 <__c.4409>:
    15d7:	50 6f 72 74 20 6c 61 74 63 68 20 43 20 52 44 3a     Port latch C RD:
    15e7:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

000015f0 <__c.4407>:
    15f0:	50 6f 72 74 20 6c 61 74 63 68 20 42 20 52 44 3a     Port latch B RD:
    1600:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

00001609 <__c.4405>:
    1609:	50 6f 72 74 20 6c 61 74 63 68 20 41 20 52 44 3a     Port latch A RD:
    1619:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

00001622 <__c.4403>:
    1622:	50 6f 72 74 20 70 69 6e 73 20 44 20 52 44 3a 5b     Port pins D RD:[
    1632:	25 30 32 58 48 5d 0a 00                             %02XH]..

0000163a <__c.4401>:
    163a:	50 6f 72 74 20 70 69 6e 73 20 43 20 52 44 3a 5b     Port pins C RD:[
    164a:	25 30 32 58 48 5d 0a 00                             %02XH]..

00001652 <__c.4399>:
    1652:	50 6f 72 74 20 70 69 6e 73 20 42 20 52 44 3a 5b     Port pins B RD:[
    1662:	25 30 32 58 48 5d 0a 00                             %02XH]..

0000166a <__c.4397>:
    166a:	50 6f 72 74 20 70 69 6e 73 20 41 20 52 44 3a 5b     Port pins A RD:[
    167a:	25 30 32 58 48 5d 0a 00                             %02XH]..

00001682 <__c.4394>:
    1682:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

0000168f <__c.4386>:
    168f:	67 70 69 62 20 70 72 65 66 69 78 20 69 73 20 6f     gpib prefix is o
    169f:	70 74 69 6f 6e 61 6c 0a 67 70 69 62 20 61 64 64     ptional.gpib add
    16af:	72 65 73 73 65 73 0a 67 70 69 62 20 63 6f 6e 66     resses.gpib conf
    16bf:	69 67 0a 67 70 69 62 20 64 65 62 75 67 20 4e 0a     ig.gpib debug N.
    16cf:	67 70 69 62 20 65 6c 61 70 73 65 64 0a 67 70 69     gpib elapsed.gpi
    16df:	62 20 65 6c 61 70 73 65 64 5f 72 65 73 65 74 0a     b elapsed_reset.
    16ef:	67 70 69 62 20 74 61 73 6b 0a 67 70 69 62 20 74     gpib task.gpib t
    16ff:	72 61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74 78     race filename.tx
    170f:	74 20 5b 42 55 53 5d 0a 67 70 69 62 20 69 66 63     t [BUS].gpib ifc
    171f:	0a 67 70 69 62 20 70 6c 6f 74 20 66 69 6c 65 6e     .gpib plot filen
    172f:	61 6d 65 2e 74 78 74 0a 67 70 69 62 20 70 70 72     ame.txt.gpib ppr
    173f:	5f 62 69 74 5f 6f 6e 20 4e 0a 67 70 69 62 20 70     _bit_on N.gpib p
    174f:	70 72 5f 62 69 74 5f 6f 66 66 20 4e 0a 67 70 69     pr_bit_off N.gpi
    175f:	62 20 70 70 72 5f 73 65 74 20 58 58 0a 67 70 69     b ppr_set XX.gpi
    176f:	62 20 70 70 72 5f 69 6e 69 74 0a 67 70 69 62 20     b ppr_init.gpib 
    177f:	70 6f 72 74 20 72 65 61 64 20 70 69 6e 73 20 20     port read pins  
    178f:	20 5b 41 2d 44 5d 0a 67 70 69 62 20 70 6f 72 74      [A-D].gpib port
    179f:	20 72 65 61 64 20 6c 61 74 63 68 20 20 5b 41 2d      read latch  [A-
    17af:	44 5d 0a 67 70 69 62 20 70 6f 72 74 20 72 65 61     D].gpib port rea
    17bf:	64 20 64 64 72 20 20 20 20 5b 41 2d 44 5d 0a 67     d ddr    [A-D].g
    17cf:	70 69 62 20 70 6f 72 74 20 77 72 69 74 65 20 6c     pib port write l
    17df:	61 74 63 68 20 5b 41 2d 44 5d 20 76 61 6c 0a 67     atch [A-D] val.g
    17ef:	70 69 62 20 70 6f 72 74 20 77 72 69 74 65 20 70     pib port write p
    17ff:	69 6e 73 20 20 5b 41 2d 44 5d 20 76 61 6c 0a 0a     ins  [A-D] val..
	...

00001810 <__c.4384>:
    1810:	67 70 69 62 20 68 65 6c 70 0a 00                    gpib help..

0000181b <__c.4487>:
    181b:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    182b:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    183b:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    184b:	48 5d 0a 00                                         H]..

0000184f <__c.4485>:
    184f:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    185f:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    186f:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    187f:	48 5d 0a 00                                         H]..

00001883 <__c.4483>:
    1883:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1893:	74 5d 0a 00                                         t]..

00001897 <__c.4481>:
    1897:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

000018a6 <__c.4479>:
    18a6:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    18b6:	74 65 5d 0a 00                                      te]..

000018bb <__c.4477>:
    18bb:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    18cb:	61 74 65 5d 0a 00                                   ate]..

000018d1 <__c.4475>:
    18d1:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    18e1:	61 74 65 5d 0a 00                                   ate]..

000018e7 <__c.4470>:
    18e7:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    18f7:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    1907:	5d 0a 00                                            ]..

0000190a <__c.4463>:
    190a:	5b 53 53 38 30 20 49 6e 63 72 65 6d 65 6e 74 20     [SS80 Increment 
    191a:	74 6f 20 28 25 6c 58 48 29 5d 0a 00                 to (%lXH)]..

00001926 <__c.4456>:
    1926:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001935 <__c.4454>:
    1935:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    1945:	5d 0a 00                                            ]..

00001948 <__c.4447>:
    1948:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

00001954 <__c.4433>:
    1954:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    1964:	5d 0a 00                                            ]..

00001967 <__c.4431>:
    1967:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    1977:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

00001981 <__c.4424>:
    1981:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    1991:	48 5d 0a 00                                         H]..

00001995 <__c.4422>:
    1995:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    19a5:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

000019b5 <__c.4417>:
    19b5:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    19c5:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    19d5:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    19e5:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

000019f1 <__c.4414>:
    19f1:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1a01:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00001a11 <__c.4412>:
    1a11:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    1a21:	29 5d 0a 00                                         )]..

00001a25 <__c.4410>:
    1a25:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    1a35:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    1a45:	28 25 64 29 5d 0a 00                                (%d)]..

00001a4c <__c.4408>:
    1a4c:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    1a5c:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

00001a6a <__c.4406>:
    1a6a:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    1a7a:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00001a87 <__c.4403>:
    1a87:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    1a97:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    1aa7:	44 4f 5d 0a 00                                      DO]..

00001aac <__c.4400>:
    1aac:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    1abc:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00001ac5 <__c.4398>:
    1ac5:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    1ad5:	5d 0a 00                                            ]..

00001ad8 <__c.4389>:
    1ad8:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    1ae8:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    1af8:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    1b08:	43 6f 64 65 73 5d 0a 00                             Codes]..

00001b10 <__c.4386>:
    1b10:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1b20:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00001b30 <__c.4384>:
    1b30:	5b 53 53 38 30 20 49 6e 69 61 74 65 20 44 69 61     [SS80 Iniate Dia
    1b40:	67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f 5d 0a     gnostic - TODO].
	...

00001b51 <__c.4382>:
    1b51:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    1b61:	61 74 75 73 5d 0a 00                                atus]..

00001b68 <__c.4380>:
    1b68:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    1b78:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

00001b81 <__c.4378>:
    1b81:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    1b91:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

00001b9c <__c.4376>:
    1b9c:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    1bac:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

00001bbb <__c.4374>:
    1bbb:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    1bcb:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

00001bd9 <__c.4372>:
    1bd9:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00001bea <__c.4370>:
    1bea:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    1bfa:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

00001c06 <__c.4368>:
    1c06:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    1c16:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

00001c23 <__c.4366>:
    1c23:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    1c33:	2d 4f 50 5d 0a 00                                   -OP]..

00001c39 <__c.4364>:
    1c39:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1c49:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

00001c5a <__c.4362>:
    1c5a:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    1c6a:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    1c7a:	44 4f 5d 0a 00                                      DO]..

00001c7f <__c.4360>:
    1c7f:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    1c8f:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

00001c99 <__c.4358>:
    1c99:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    1ca9:	2d 4f 50 5d 0a 00                                   -OP]..

00001caf <__c.4356>:
    1caf:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

00001cbd <__c.4354>:
    1cbd:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    1ccd:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

00001cd9 <__c.4352>:
    1cd9:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    1ce9:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

00001cf6 <__c.4350>:
    1cf6:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1d06:	20 57 72 69 74 65 5d 0a 00                           Write]..

00001d0f <__c.4347>:
    1d0f:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1d1f:	20 52 65 61 64 5d 0a 00                              Read]..

00001d27 <__c.4345>:
    1d27:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    1d37:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

00001d40 <__c.4342>:
    1d40:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    1d50:	25 64 29 5d 0a 00                                   %d)]..

00001d56 <__c.4340>:
    1d56:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    1d66:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00001d6f <__c.4338>:
    1d6f:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    1d7f:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    1d8f:	52 4f 52 5d 0a 00                                   ROR]..

00001d95 <__c.4329>:
    1d95:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    1da5:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

00001daf <__c.4324>:
    1daf:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    1dbf:	76 61 6c 69 64 5d 0a 00                             valid]..

00001dc7 <__c.4319>:
    1dc7:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    1dd7:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

00001de6 <__c.4317>:
    1de6:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    1df6:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

00001e03 <__c.4315>:
    1e03:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    1e13:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    1e23:	5d 0a 00                                            ]..

00001e26 <__c.4313>:
    1e26:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00001e37 <__c.4305>:
    1e37:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    1e47:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

00001e52 <__c.4303>:
    1e52:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    1e62:	73 5d 0a 00                                         s]..

00001e66 <__c.4293>:
    1e66:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

00001e71 <__c.4291>:
    1e71:	25 73 3a 0a 00                                      %s:..

00001e76 <__c.4266>:
    1e76:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1e86:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    1e96:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

00001ea1 <__c.4264>:
    1ea1:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1eb1:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    1ec1:	49 4e 49 53 48 5d 0a 00                             INISH]..

00001ec9 <__c.4260>:
    1ec9:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1ed9:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    1ee9:	58 48 29 5d 0a 00                                   XH)]..

00001eef <__c.4258>:
    1eef:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    1eff:	72 5d 0a 00                                         r]..

00001f03 <__c.4254>:
    1f03:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    1f13:	5d 0a 00                                            ]..

00001f16 <__c.4252>:
    1f16:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1f26:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    1f36:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

00001f3f <__c.4240>:
    1f3f:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    1f4f:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    1f5f:	62 79 74 65 73 5d 0a 00                             bytes]..

00001f67 <__c.4238>:
    1f67:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    1f77:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    1f87:	53 48 5d 0a 00                                      SH]..

00001f8c <__c.4233>:
    1f8c:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    1f9c:	20 57 72 72 6f 72 5d 0a 00                           Wrror]..

00001fa5 <__c.4231>:
    1fa5:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    1fb5:	45 72 72 6f 72 5d 0a 00                             Error]..

00001fbd <__c.4229>:
    1fbd:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    1fcd:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

00001fdb <__c.4227>:
    1fdb:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1feb:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    1ffb:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

00002003 <__c.4210>:
    2003:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    2013:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

0000201f <__c.4194>:
    201f:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    202f:	5d 0a 00                                            ]..

00002032 <__c.4169>:
    2032:	5b 53 53 38 30 20 54 65 73 74 20 44 6f 6e 65 5d     [SS80 Test Done]
    2042:	0a 00                                               ..

00002044 <__c.4167>:
    2044:	5b 53 53 38 30 20 54 65 73 74 5d 0a 00              [SS80 Test]..

00002051 <__c.4324>:
    2051:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2061:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    2071:	64 64 72 65 73 73 5d 0a 00                          ddress]..

0000207a <__c.4321>:
    207a:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    208a:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    209a:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

000020a5 <__c.4318>:
    20a5:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    20b5:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    20c5:	66 66 65 72 65 64 5d 0a 00                          ffered]..

000020ce <__c.4313>:
    20ce:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    20de:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

000020ee <__c.4310>:
    20ee:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    20fe:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

0000210a <__c.4307>:
    210a:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    211a:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    212a:	0a 00                                               ..

0000212c <__c.4304>:
    212c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    213c:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

0000214b <__c.4301>:
    214b:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    215b:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

0000216c <__c.4298>:
    216c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    217c:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

0000218c <__c.4294>:
    218c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    219c:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    21ac:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    21bc:	0a 00                                               ..

000021be <__c.4289>:
    21be:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

000021ce <__c.4286>:
    21ce:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    21de:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

000021ed <__c.4284>:
    21ed:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    21fd:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    220d:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

00002218 <__c.4282>:
    2218:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    2228:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

00002238 <__c.4280>:
    2238:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    2248:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    2258:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002261 <__c.4278>:
    2261:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    2271:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

0000227d <__c.4276>:
    227d:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    228d:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    229d:	0a 00                                               ..

0000229f <__c.4274>:
    229f:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

000022af <__c.4271>:
    22af:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    22bf:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

000022d0 <__c.4269>:
    22d0:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    22e0:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    22f0:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

000022f9 <__c.4267>:
    22f9:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2309:	36 5d 0a 00                                         6]..

0000230d <__c.4264>:
    230d:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    231d:	35 5d 0a 00                                         5]..

00002321 <__c.4261>:
    2321:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2331:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002341 <__c.4258>:
    2341:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2351:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2361:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002370 <__c.4256>:
    2370:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2380:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002391 <__c.4254>:
    2391:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    23a1:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

000023b2 <__c.4252>:
    23b2:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    23c2:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    23d2:	0a 00                                               ..

000023d4 <__c.4250>:
    23d4:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    23e4:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    23f4:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2404:	0a 00                                               ..

00002406 <__c.4238>:
    2406:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    2416:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    2426:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2436:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2446:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002457 <__c.4236>:
    2457:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2467:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2477:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2487:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2497:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

000024a7 <__c.4234>:
    24a7:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    24b7:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    24c7:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    24d7:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    24e7:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

000024f7 <__c.4232>:
    24f7:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2507:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2517:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2527:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2537:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002547 <__c.4227>:
    2547:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2557:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2567:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2577:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2587:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2597:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    25a7:	58 48 5d 0a 00                                      XH]..

000025ac <__c.4225>:
    25ac:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    25bc:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    25cc:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    25dc:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    25ec:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    25fc:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    260c:	30 32 58 48 5d 0a 00                                02XH]..

00002613 <__c.4223>:
    2613:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2623:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2633:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2643:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2653:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2663:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2673:	30 32 58 48 5d 0a 00                                02XH]..

0000267a <__c.4221>:
    267a:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    268a:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    269a:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    26aa:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    26ba:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    26ca:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    26da:	30 32 58 48 5d 0a 00                                02XH]..

000026e1 <__c.4214>:
    26e1:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

000026f0 <__c.4210>:
    26f0:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2700:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

0000270a <__c.4208>:
    270a:	5b 41 4d 49 47 4f 20 57 61 6b 65 75 70 5d 0a 00     [AMIGO Wakeup]..

0000271a <__c.4201>:
    271a:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002727 <__c.4199>:
    2727:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2737:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002741 <__c.4192>:
    2741:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2751:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002760 <__c.4185>:
    2760:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2770:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

0000277a <__c.4178>:
    277a:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    278a:	6e 65 5d 0a 00                                      ne]..

0000278f <__c.4174>:
    278f:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

0000279f <__c.4133>:
    279f:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    27af:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    27bf:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

000027ca <__c.4163>:
    27ca:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    27da:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    27ea:	25 30 34 58 48 5d 0a 00                             %04XH]..

000027f2 <__c.4140>:
    27f2:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    2802:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

0000280b <__c.4126>:
    280b:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    281b:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002825 <__c.4124>:
    2825:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    2835:	75 73 5d 0a 00                                      us]..

0000283a <__c.4118>:
    283a:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    284a:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002854 <__c.4116>:
    2854:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    2864:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00002872 <__c.4110>:
    2872:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    2882:	74 61 74 75 73 5d 0a 00                             tatus]..

0000288a <__c.4132>:
    288a:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 62 79     received:[%d] by
    289a:	74 65 73 0a 00                                      tes..

0000289f <__c.4130>:
    289f:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 25 73     received:[%d] %s
    28af:	0a 00                                               ..

000028b1 <__c.4128>:
    28b1:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 25 73     received:[%d] %s
    28c1:	0a 00                                               ..

000028c3 <__c.4123>:
    28c3:	70 72 69 6e 74 65 72 20 6e 6f 74 20 64 65 66 69     printer not defi
    28d3:	6e 65 64 0a 00                                      ned..

000028d8 <__c.4114>:
    28d8:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    28e8:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

000028f2 <__c.4112>:
    28f2:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    2902:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

0000290e <__c.4107>:
    290e:	25 30 38 6c 64 0d 00                                %08ld..

00002915 <__c.4101>:
    2915:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    2925:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00002936 <__c.4095>:
    2936:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00002944 <__c.4093>:
    2944:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    2954:	69 74 65 0a 00                                      ite..

00002959 <__c.4087>:
    2959:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00002965 <__c.4085>:
    2965:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    2975:	6f 3a 25 73 0a 00                                   o:%s..

0000297b <__c.4083>:
    297b:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    298b:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    299b:	74 00                                               t.

0000299d <__c.4768>:
    299d:	0a 00                                               ..

0000299f <__c.4763>:
    299f:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

000029a7 <__c.4761>:
    29a7:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    29b7:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    29c7:	0a 00                                               ..

000029c9 <__c.4759>:
    29c9:	53 53 38 30 2d 25 64 00                             SS80-%d.

000029d1 <__c.4757>:
    29d1:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    29e1:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    29f1:	0a 00                                               ..

000029f3 <__c.4744>:
    29f3:	0a 00                                               ..

000029f5 <__c.4742>:
    29f5:	0a 00                                               ..

000029f7 <__c.4740>:
    29f7:	45 4e 44 0a 00                                      END..

000029fc <__c.4735>:
    29fc:	0a 00                                               ..

000029fe <__c.4733>:
    29fe:	41 44 44 52 45 53 53 00                             ADDRESS.

00002a06 <__c.4731>:
    2a06:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00002a10 <__c.4729>:
    2a10:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

00002a19 <__c.4727>:
    2a19:	43 59 4c 49 4e 44 45 52 53 00                       CYLINDERS.

00002a23 <__c.4725>:
    2a23:	48 45 41 44 53 00                                   HEADS.

00002a29 <__c.4723>:
    2a29:	53 45 43 54 4f 52 53 5f 50 45 52 5f 54 52 41 43     SECTORS_PER_TRAC
    2a39:	4b 00                                               K.

00002a3b <__c.4721>:
    2a3b:	42 59 54 45 53 5f 50 45 52 5f 53 45 43 54 4f 52     BYTES_PER_SECTOR
	...

00002a4c <__c.4719>:
    2a4c:	20 20 47 45 4f 4d 45 54 52 59 0a 00                   GEOMETRY..

00002a58 <__c.4717>:
    2a58:	49 44 00                                            ID.

00002a5b <__c.4715>:
    2a5b:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00002a65 <__c.4713>:
    2a65:	46 49 4c 45 00                                      FILE.

00002a6a <__c.4711>:
    2a6a:	50 50 52 00                                         PPR.

00002a6e <__c.4709>:
    2a6e:	41 44 44 52 45 53 53 00                             ADDRESS.

00002a76 <__c.4707>:
    2a76:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

00002a80 <__c.4705>:
    2a80:	41 4d 49 47 4f 0a 00                                AMIGO..

00002a87 <__c.4703>:
    2a87:	49 4e 54 45 52 4c 45 41 56 45 00                    INTERLEAVE.

00002a92 <__c.4701>:
    2a92:	4d 41 58 5f 42 4c 4f 43 4b 5f 4e 55 4d 42 45 52     MAX_BLOCK_NUMBER
	...

00002aa3 <__c.4699>:
    2aa3:	4d 41 58 5f 53 45 43 54 4f 52 00                    MAX_SECTOR.

00002aae <__c.4697>:
    2aae:	4d 41 58 5f 48 45 41 44 00                          MAX_HEAD.

00002ab7 <__c.4695>:
    2ab7:	4d 41 58 5f 43 59 4c 49 4e 44 45 52 00              MAX_CYLINDER.

00002ac4 <__c.4693>:
    2ac4:	20 20 56 4f 4c 55 4d 45 0a 00                         VOLUME..

00002ace <__c.4691>:
    2ace:	52 45 4d 4f 56 41 42 4c 45 5f 56 4f 4c 55 4d 45     REMOVABLE_VOLUME
    2ade:	53 00                                               S.

00002ae0 <__c.4689>:
    2ae0:	46 49 58 45 44 5f 56 4f 4c 55 4d 45 53 00           FIXED_VOLUMES.

00002aee <__c.4687>:
    2aee:	4d 41 58 49 4d 55 4d 5f 49 4e 54 45 52 4c 45 41     MAXIMUM_INTERLEA
    2afe:	56 45 00                                            VE.

00002b01 <__c.4685>:
    2b01:	41 43 43 45 53 53 5f 54 49 4d 45 00                 ACCESS_TIME.

00002b0d <__c.4683>:
    2b0d:	4f 50 54 49 4d 41 4c 5f 52 45 54 52 59 5f 54 49     OPTIMAL_RETRY_TI
    2b1d:	4d 45 00                                            ME.

00002b20 <__c.4681>:
    2b20:	43 4f 4e 54 49 4e 4f 55 53 5f 54 52 41 4e 53 46     CONTINOUS_TRANSF
    2b30:	45 52 5f 52 41 54 45 00                             ER_RATE.

00002b38 <__c.4679>:
    2b38:	42 4c 4f 43 4b 5f 54 49 4d 45 00                    BLOCK_TIME.

00002b43 <__c.4677>:
    2b43:	42 55 52 53 54 5f 53 49 5a 45 00                    BURST_SIZE.

00002b4e <__c.4675>:
    2b4e:	42 55 46 46 45 52 45 44 5f 42 4c 4f 43 4b 53 00     BUFFERED_BLOCKS.

00002b5e <__c.4673>:
    2b5e:	42 59 54 45 53 5f 50 45 52 5f 42 4c 4f 43 4b 00     BYTES_PER_BLOCK.

00002b6e <__c.4671>:
    2b6e:	44 45 56 49 43 45 5f 4e 55 4d 42 45 52 00           DEVICE_NUMBER.

00002b7c <__c.4669>:
    2b7c:	55 4e 49 54 5f 54 59 50 45 00                       UNIT_TYPE.

00002b86 <__c.4667>:
    2b86:	20 20 55 4e 49 54 0a 00                               UNIT..

00002b8e <__c.4665>:
    2b8e:	54 59 50 45 00                                      TYPE.

00002b93 <__c.4663>:
    2b93:	54 52 41 4e 53 46 45 52 5f 52 41 54 45 00           TRANSFER_RATE.

00002ba1 <__c.4661>:
    2ba1:	55 4e 49 54 53 5f 49 4e 53 54 41 4c 4c 45 44 00     UNITS_INSTALLED.

00002bb1 <__c.4659>:
    2bb1:	20 20 43 4f 4e 54 52 4f 4c 4c 45 52 0a 00             CONTROLLER..

00002bbf <__c.4657>:
    2bbf:	49 44 00                                            ID.

00002bc2 <__c.4655>:
    2bc2:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

00002bcc <__c.4653>:
    2bcc:	46 49 4c 45 00                                      FILE.

00002bd1 <__c.4651>:
    2bd1:	50 50 52 00                                         PPR.

00002bd5 <__c.4649>:
    2bd5:	41 44 44 52 45 53 53 00                             ADDRESS.

00002bdd <__c.4647>:
    2bdd:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00002be7 <__c.4645>:
    2be7:	53 53 38 30 0a 00                                   SS80..

00002bed <__c.4642>:
    2bed:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    2bfd:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00002c0d <__c.4634>:
    2c0d:	0a 00                                               ..

00002c0f <__c.4629>:
    2c0f:	20 20 50 52 49 4e 54 45 52 5f 4d 53 41 20 3d 20       PRINTER_MSA = 
    2c1f:	25 30 32 58 48 0a 00                                %02XH..

00002c26 <__c.4627>:
    2c26:	20 20 50 52 49 4e 54 45 52 5f 4d 54 41 20 3d 20       PRINTER_MTA = 
    2c36:	25 30 32 58 48 0a 00                                %02XH..

00002c3d <__c.4625>:
    2c3d:	20 20 50 52 49 4e 54 45 52 5f 4d 4c 41 20 3d 20       PRINTER_MLA = 
    2c4d:	25 30 32 58 48 0a 00                                %02XH..

00002c54 <__c.4623>:
    2c54:	20 20 41 4d 49 47 4f 5f 4d 53 41 20 20 20 3d 20       AMIGO_MSA   = 
    2c64:	25 30 32 58 48 0a 00                                %02XH..

00002c6b <__c.4621>:
    2c6b:	20 20 41 4d 49 47 4f 5f 4d 54 41 20 20 20 3d 20       AMIGO_MTA   = 
    2c7b:	25 30 32 58 48 0a 00                                %02XH..

00002c82 <__c.4619>:
    2c82:	20 20 41 4d 49 47 4f 5f 4d 4c 41 20 20 20 3d 20       AMIGO_MLA   = 
    2c92:	25 30 32 58 48 0a 00                                %02XH..

00002c99 <__c.4617>:
    2c99:	20 20 53 53 38 30 5f 4d 53 41 20 20 20 20 3d 20       SS80_MSA    = 
    2ca9:	25 30 32 58 48 0a 00                                %02XH..

00002cb0 <__c.4615>:
    2cb0:	20 20 53 53 38 30 5f 4d 54 41 20 20 20 20 3d 20       SS80_MTA    = 
    2cc0:	25 30 32 58 48 0a 00                                %02XH..

00002cc7 <__c.4613>:
    2cc7:	20 20 53 53 38 30 5f 4d 4c 41 20 20 20 20 3d 20       SS80_MLA    = 
    2cd7:	25 30 32 58 48 0a 00                                %02XH..

00002cde <__c.4610>:
    2cde:	4c 69 73 74 65 6e 20 61 6e 64 20 54 61 6c 6b 20     Listen and Talk 
    2cee:	41 64 64 72 65 73 73 20 53 65 74 74 69 6e 67 73     Address Settings
    2cfe:	0a 00                                               ..

00002d00 <__c.4604>:
    2d00:	20 20 20 20 25 2d 32 35 73 20 3d 20 22 25 73 22         %-25s = "%s"
    2d10:	0a 00                                               ..

00002d12 <__c.4593>:
    2d12:	20 20 20 20 25 2d 32 35 73 20 3d 20 25 38 6c 78         %-25s = %8lx
    2d22:	48 20 28 25 6c 64 29 0a 00                          H (%ld)..

00002d2b <__c.4582>:
    2d2b:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    2d3b:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    2d4b:	2a 2a 2a 2a 2a 0a 00                                *****..

00002d52 <__c.4580>:
    2d52:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    2d62:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

00002d6f <__c.4578>:
    2d6f:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    2d7f:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    2d8f:	0a 00                                               ..

00002d91 <__c.4574>:
    2d91:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    2da1:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    2db1:	0a 00                                               ..

00002db3 <__c.4571>:
    2db3:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    2dc3:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    2dd3:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00002de3 <__c.4568>:
    2de3:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    2df3:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    2e03:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00002e12 <__c.4565>:
    2e12:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    2e22:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    2e32:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00002e42 <__c.4563>:
    2e42:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    2e52:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

00002e5b <__c.4560>:
    2e5b:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    2e6b:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    2e7b:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002e89 <__c.4557>:
    2e89:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2e99:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    2ea9:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002eb7 <__c.4554>:
    2eb7:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2ec7:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    2ed7:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00002ee3 <__c.4551>:
    2ee3:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2ef3:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    2f03:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    2f13:	0a 00                                               ..

00002f15 <__c.4548>:
    2f15:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2f25:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    2f35:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002f43 <__c.4545>:
    2f43:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2f53:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    2f63:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002f71 <__c.4542>:
    2f71:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2f81:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    2f91:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00002f9e <__c.4539>:
    2f9e:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    2fae:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    2fbe:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00002fcf <__c.4536>:
    2fcf:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    2fdf:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    2fef:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00002ff9 <__c.4532>:
    2ff9:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 52 54     Unexpected START
    3009:	20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74 20 6c      token: %s, at l
    3019:	69 6e 65 3a 25 64 0a 00                             ine:%d..

00003021 <__c.4530>:
    3021:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    3031:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

0000303a <__c.4526>:
    303a:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    304a:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00003058 <__c.4524>:
    3058:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00003065 <__c.4503>:
    3065:	6c 69 6e 65 3a 25 64 2c 20 25 73 20 69 73 20 61     line:%d, %s is a
    3075:	62 6f 76 65 20 72 61 6e 67 65 20 25 64 0a 00        bove range %d..

00003084 <__c.4501>:
    3084:	6c 69 6e 65 3a 25 64 2c 20 25 73 20 69 73 20 62     line:%d, %s is b
    3094:	65 6c 6f 77 20 72 61 6e 67 65 20 25 64 0a 00        elow range %d..

000030a3 <__c.4499>:
    30a3:	6c 69 6e 65 3a 25 64 2c 20 6d 69 73 73 69 6e 67     line:%d, missing
    30b3:	20 76 61 6c 75 65 0a 00                              value..

000030bb <__c.4476>:
    30bb:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    30cb:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    30db:	0a 00                                               ..

000030dd <__c.4469>:
    30dd:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    30ed:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    30fd:	6c 6c 0a 00                                         ll..

00003101 <__c.4458>:
    3101:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    3111:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    3121:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

0000312c <__c.4456>:
    312c:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    313c:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    314c:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    315c:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

00003164 <__c.4454>:
    3164:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    3174:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    3184:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    3194:	3a 25 73 0a 00                                      :%s..

00003199 <__c.4452>:
    3199:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    31a9:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    31b9:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    31c9:	55 4c 4c 0a 00                                      ULL..

000031ce <__c.4450>:
    31ce:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    31de:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    31ee:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    31fe:	66 20 72 61 6e 67 65 0a 00                          f range..

00003207 <__c.4448>:
    3207:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    3217:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    3227:	6e 67 65 0a 00                                      nge..

0000322c <__c.4745>:
    322c:	46 6f 72 6d 61 74 69 6e 67 3a 20 77 72 6f 74 65     Formating: wrote
    323c:	3a 5b 25 6c 64 5d 20 73 65 63 74 6f 72 73 0a 00     :[%ld] sectors..

0000324c <__c.4743>:
    324c:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    325c:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

0000326c <__c.4741>:
    326c:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    327c:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    328c:	30 0a 00                                            0..

0000328f <__c.4739>:
    328f:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    329f:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    32af:	70 74 79 0a 00                                      pty..

000032b4 <__c.4737>:
    32b4:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    32c4:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    32d4:	73 20 65 6d 70 74 79 0a 00                          s empty..

000032dd <__c.4724>:
    32dd:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    32ed:	20 25 31 30 73 0a 00                                 %10s..

000032f4 <__c.4722>:
    32f4:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    3304:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    3314:	74 20 66 6f 75 6e 64 0a 00                          t found..

0000331d <__c.4720>:
    331d:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    332d:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    333d:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    334d:	74 65 72 73 0a 00                                   ters..

00003353 <__c.4718>:
    3353:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3363:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    3373:	65 6d 70 74 79 0a 00                                empty..

0000337a <__c.4716>:
    337a:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    338a:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    339a:	65 6d 70 74 79 0a 00                                empty..

000033a1 <__c.4714>:
    33a1:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    33b1:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    33c1:	20 65 6d 70 74 79 0a 00                              empty..

000033c9 <__c.4705>:
    33c9:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

000033d8 <__c.4703>:
    33d8:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    33e8:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    33f8:	20 66 6f 75 6e 64 0a 00                              found..

00003400 <__c.4701>:
    3400:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3410:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

0000341f <__c.4699>:
    341f:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    342f:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

0000343f <__c.4697>:
    343f:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    344f:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    345f:	70 74 79 0a 00                                      pty..

00003464 <__c.4689>:
    3464:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

00003471 <__c.4684>:
    3471:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

0000347e <__c.4682>:
    347e:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    348e:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    349e:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000034ae <__c.4680>:
    34ae:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    34be:	73 0a 00                                            s..

000034c1 <__c.4678>:
    34c1:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    34d1:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    34e1:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000034f0 <__c.4676>:
    34f0:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    3500:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

0000350c <__c.4674>:
    350c:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    351c:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

00003527 <__c.4672>:
    3527:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    3537:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

00003547 <__c.4655>:
    3547:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

00003554 <__c.4650>:
    3554:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

00003561 <__c.4648>:
    3561:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3571:	73 0a 00                                            s..

00003574 <__c.4646>:
    3574:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3584:	75 6e 64 3a 25 73 0a 00                             und:%s..

0000358c <__c.4629>:
    358c:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

00003599 <__c.4626>:
    3599:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    35a9:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    35b9:	20 65 72 72 6f 72 0a 00                              error..

000035c1 <__c.4618>:
    35c1:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

000035ce <__c.4616>:
    35ce:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    35de:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    35ee:	20 65 72 72 6f 72 0a 00                              error..

000035f6 <__c.4613>:
    35f6:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3606:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    3616:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    3626:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    3636:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    3646:	30 32 58 48 0a 00                                   02XH..

0000364c <__c.4611>:
    364c:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    365c:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    366c:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    367c:	20 25 64 0a 00                                       %d..

00003681 <__c.4607>:
    3681:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

00003691 <__c.4605>:
    3691:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    36a1:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    36b1:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    36c1:	30 78 45 30 31 33 0a 00                             0xE013..

000036c9 <__c.4603>:
    36c9:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    36d9:	6e 64 3a 25 73 0a 00                                nd:%s..

000036e0 <__c.4601>:
    36e0:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    36f0:	75 6e 64 3a 25 73 0a 00                             und:%s..

000036f8 <__c.4577>:
    36f8:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

00003705 <__c.4575>:
    3705:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    3715:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

0000371e <__c.4573>:
    371e:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    372e:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

00003737 <__c.4571>:
    3737:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    3747:	20 20 25 34 64 0a 00                                  %4d..

0000374e <__c.4569>:
    374e:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    375e:	20 20 20 25 73 0a 00                                   %s..

00003765 <__c.4567>:
    3765:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    3775:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    3785:	77 72 69 74 65 0a 00                                write..

0000378c <__c.4565>:
    378c:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    379c:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    37ac:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000037bc <__c.4563>:
    37bc:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    37cc:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    37dc:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000037eb <__c.4561>:
    37eb:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    37fb:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    380b:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

0000381b <__c.4559>:
    381b:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    382b:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    383b:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

0000384a <__c.4557>:
    384a:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    385a:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    386a:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

00003878 <__c.4555>:
    3878:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3888:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    3898:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    38a8:	79 0a 00                                            y..

000038ab <__c.4541>:
    38ab:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

000038b8 <__c.4539>:
    38b8:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

000038c5 <__c.4534>:
    38c5:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

000038d2 <__c.4517>:
    38d2:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    38e2:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    38f2:	25 64 0a 00                                         %d..

000038f6 <__c.4500>:
    38f6:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    3906:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    3916:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    3926:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

0000392f <__c.4486>:
    392f:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    393f:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    394f:	62 69 67 0a 00                                      big..

00003954 <__c.4484>:
    3954:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3964:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    3974:	63 74 65 72 73 0a 00                                cters..

0000397b <__c.4477>:
    397b:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    398b:	73 0a 00                                            s..

0000398e <__c.4475>:
    398e:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    399e:	73 0a 00                                            s..

000039a1 <__c.4473>:
    39a1:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

000039ae <__c.4471>:
    39ae:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

000039ba <__c.4469>:
    39ba:	0a 00                                               ..

000039bc <__c.4466>:
    39bc:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    39cc:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    39dc:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

000039ec <__c.4464>:
    39ec:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    39fc:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3a0c:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3a1c:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    3a2c:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003a38 <__c.4461>:
    3a38:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3a48:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3a58:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3a68:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003a78 <__c.4459>:
    3a78:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    3a88:	3a 5b 25 73 5d 0a 00                                :[%s]..

00003a8f <__c.4449>:
    3a8f:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3a9f:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    3aaf:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    3abf:	64 0a 00                                            d..

00003ac2 <__c.4447>:
    3ac2:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3ad2:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3ae2:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    3af2:	64 0a 00                                            d..

00003af5 <__c.4445>:
    3af5:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b05:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3b15:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3b25:	69 6c 65 64 0a 00                                   iled..

00003b2b <__c.4443>:
    3b2b:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b3b:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3b4b:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3b5b:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003b6a <__c.4430>:
    3b6a:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3b7a:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3b8a:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    3b9a:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    3baa:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

00003bbb <__c.4427>:
    3bbb:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3bcb:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3bdb:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003be4 <__c.4425>:
    3be4:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3bf4:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3c04:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3c14:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003c1c <__c.4413>:
    3c1c:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3c2c:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3c3c:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3c4c:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3c5c:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003c69 <__c.4388>:
    3c69:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3c79:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003c89 <__c.4379>:
    3c89:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3c99:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    3ca9:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    3cb9:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003cc3 <__c.4360>:
    3cc3:	57 72 6f 74 65 3a 20 25 6c 64 0a 00                 Wrote: %ld..

00003ccf <__c.4355>:
    3ccf:	57 72 6f 74 65 3a 20 25 6c 64 0d 00                 Wrote: %ld..

00003cdb <__c.4350>:
    3cdb:	57 72 6f 74 65 3a 20 25 6c 64 0d 00                 Wrote: %ld..

00003ce7 <__c.4342>:
    3ce7:	57 72 6f 74 65 3a 20 25 6c 64 0d 00                 Wrote: %ld..

00003cf3 <__c.4340>:
    3cf3:	43 72 65 61 74 69 6e 67 3a 25 73 2c 20 4c 61 62     Creating:%s, Lab
    3d03:	65 6c 3a 25 31 30 73 2c 20 44 69 72 65 63 74 6f     el:%10s, Directo
    3d13:	72 79 20 53 74 61 72 74 20 25 6c 64 2c 20 44 69     ry Start %ld, Di
    3d23:	72 65 63 74 6f 72 79 20 53 69 7a 65 3a 20 25 6c     rectory Size: %l
    3d33:	64 2c 20 46 69 6c 65 20 53 65 63 74 6f 72 73 3a     d, File Sectors:
    3d43:	25 6c 64 0a 00                                      %ld..

00003d48 <__c.4324>:
    3d48:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d58:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3d68:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003d74 <__c.4322>:
    3d74:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d84:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3d94:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003d9f <__c.4320>:
    3d9f:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3daf:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3dbf:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3dcf:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3ddf:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003dea <__c.4318>:
    3dea:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3dfa:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3e0a:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3e1a:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3e2a:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003e35 <__c.4316>:
    3e35:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e45:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3e55:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003e63 <__c.4314>:
    3e63:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e73:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3e83:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3e93:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003ea4 <__c.4312>:
    3ea4:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3eb4:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3ec4:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3ed4:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3ee4:	58 68 0a 00                                         Xh..

00003ee8 <__c.4310>:
    3ee8:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ef8:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003f09 <__c.4304>:
    3f09:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f19:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3f29:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003f35 <__c.4302>:
    3f35:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f45:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3f55:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003f64 <__c.4300>:
    3f64:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f74:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3f84:	25 6c 64 0a 00                                      %ld..

00003f89 <__c.4298>:
    3f89:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f99:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3fa9:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3fb9:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003fc2 <__c.4296>:
    3fc2:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3fd2:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3fe2:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    3ff2:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003ffb <__c.4294>:
    3ffb:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    400b:	58 48 20 3e 20 31 0a 00                             XH > 1..

00004013 <__c.4292>:
    4013:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4023:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    4033:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    4043:	64 20 31 30 30 30 48 0a 00                          d 1000H..

0000404c <__c.4290>:
    404c:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    405c:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

0000406b <__c.4283>:
    406b:	0a 00                                               ..

0000406d <__c.4281>:
    406d:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    407d:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004087 <__c.4279>:
    4087:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    4097:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

000040a3 <__c.4277>:
    40a3:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    40b3:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000040c0 <__c.4275>:
    40c0:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    40d0:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

000040dd <__c.4273>:
    40dd:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    40ed:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000040fa <__c.4271>:
    40fa:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    410a:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

00004116 <__c.4269>:
    4116:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    4126:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004132 <__c.4267>:
    4132:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    4142:	20 20 20 20 20 20 25 73 0a 00                             %s..

0000414c <__c.4265>:
    414c:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    415c:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004166 <__c.4263>:
    4166:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    4176:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004182 <__c.4261>:
    4182:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    4192:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

0000419e <__c.4259>:
    419e:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    41ae:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041bb <__c.4257>:
    41bb:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    41cb:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041d8 <__c.4255>:
    41d8:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    41e8:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000041f4 <__c.4253>:
    41f4:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    4204:	20 20 20 20 20 20 25 73 0a 00                             %s..

0000420e <__c.4251>:
    420e:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    421e:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000422b <__c.4249>:
    422b:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    423b:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004248 <__c.4247>:
    4248:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    4258:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004265 <__c.4245>:
    4265:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    4275:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004282 <__c.4243>:
    4282:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    4292:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

0000429f <__c.4241>:
    429f:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    42af:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042bc <__c.4239>:
    42bc:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    42cc:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042d9 <__c.4237>:
    42d9:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    42e9:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042f6 <__c.4235>:
    42f6:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    4306:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004310 <__c.4233>:
    4310:	0a 25 73 0a 00                                      .%s..

00004315 <__c.4110>:
    4315:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    4325:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    4335:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    4345:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

00004352 <__c.4101>:
    4352:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    4362:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    4372:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    4382:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

0000438e <__c.4092>:
    438e:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    439e:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

000043af <__c.4085>:
    43af:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    43bf:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

000043c8 <__c.4079>:
    43c8:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    43d8:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    43e8:	25 73 5d 0a 00                                      %s]..

000043ed <__c.4067>:
    43ed:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    43fd:	6f 69 6e 74 65 72 0a 00                             ointer..

00004405 <__c.4062>:
    4405:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    4415:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    4425:	20 6d 65 6d 6f 72 79 0a 00                           memory..

0000442e <__c.4050>:
    442e:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    443e:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    444e:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    445e:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    446e:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    447e:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    448e:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    449e:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    44ae:	65 63 74 6f 72 73 0a 6c 69 66 20 64 65 6c 20 6c     ectors.lif del l
    44be:	69 66 69 6d 61 67 65 20 6e 61 6d 65 0a 6c 69 66     ifimage name.lif
    44ce:	20 64 69 72 20 6c 69 66 69 6d 61 67 65 0a 6c 69      dir lifimage.li
    44de:	66 20 65 78 74 72 61 63 74 20 6c 69 66 69 6d 61     f extract lifima
    44ee:	67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f 61 73     ge lifname to_as
    44fe:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 65 78 74     cii_file.lif ext
    450e:	72 61 63 74 62 69 6e 20 6c 69 66 69 6d 61 67 65     ractbin lifimage
    451e:	20 6c 69 66 6e 61 6d 65 20 74 6f 5f 6c 69 66 5f      lifname to_lif_
    452e:	66 69 6c 65 0a 20 20 20 20 65 78 74 72 61 63 74     file.    extract
    453e:	73 20 61 20 66 69 6c 65 20 69 6e 74 6f 20 61 20     s a file into a 
    454e:	73 69 67 6c 65 20 66 69 6c 65 20 4c 49 46 20 69     sigle file LIF i
    455e:	6d 61 67 65 0a 6c 69 66 20 72 65 6e 61 6d 65 20     mage.lif rename 
    456e:	6c 69 66 69 6d 61 67 65 20 6f 6c 64 6c 69 66 6e     lifimage oldlifn
    457e:	61 6d 65 20 6e 65 77 6c 69 66 6e 61 6d 65 0a 55     ame newlifname.U
    458e:	73 65 20 2d 64 20 61 66 74 65 72 20 66 69 72 73     se -d after firs
    459e:	74 20 6b 65 79 77 6f 72 64 20 27 6c 69 66 27 20     t keyword 'lif' 
    45ae:	61 62 6f 76 65 20 66 6f 72 20 4c 49 46 20 66 69     above for LIF fi
    45be:	6c 65 73 79 73 74 65 6d 20 64 65 62 75 67 67 69     lesystem debuggi
    45ce:	6e 67 0a 0a 00                                      ng...

000045d3 <__c.4048>:
    45d3:	6c 69 66 20 68 65 6c 70 0a 00                       lif help..

000045dd <__c.4510>:
    45dd:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    45ed:	53 4b 0a 00                                         SK..

000045f1 <__c.4508>:
    45f1:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    4601:	30 34 78 48 0a 00                                   04xH..

00004607 <__c.4506>:
    4607:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    4617:	64 6f 6e 65 0a 00                                   done..

0000461d <__c.4504>:
    461d:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    462d:	6f 6e 65 0a 00                                      one..

00004632 <__c.4502>:
    4632:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 69     GPIB Timer initi
    4642:	61 6c 69 7a 65 64 0a 00                             alized..

0000464a <__c.4500>:
    464a:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    465a:	0a 00                                               ..

0000465c <__c.4498>:
    465c:	50 72 69 6e 74 65 72 20 69 6e 69 74 69 61 6c 69     Printer initiali
    466c:	7a 65 64 0a 00                                      zed..

00004671 <__c.4496>:
    4671:	47 50 49 42 20 62 75 73 20 69 6e 69 74 69 61 6c     GPIB bus initial
    4681:	69 7a 65 64 0a 00                                   ized..

00004687 <__c.4494>:
    4687:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 65 64 0a     MMC initialized.
	...

00004698 <__c.4492>:
    4698:	4d 4d 43 20 69 6e 69 74 69 61 6c 69 7a 69 6e 67     MMC initializing
    46a8:	20 73 74 61 72 74 0a 00                              start..

000046b0 <__c.4490>:
    46b0:	49 32 43 20 4c 43 44 20 69 73 20 4e 4f 54 20 61     I2C LCD is NOT a
    46c0:	74 74 61 63 68 65 64 21 0a 00                       ttached!..

000046ca <__c.4488>:
    46ca:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    46da:	7a 61 74 69 6f 6e 20 44 6f 6e 65 0a 00              zation Done..

000046e7 <__c.4486>:
    46e7:	49 32 43 20 4c 43 44 20 69 6e 69 74 69 61 6c 69     I2C LCD initiali
    46f7:	7a 61 74 69 6f 6e 20 73 74 61 72 74 0a 00           zation start..

00004705 <__c.4484>:
    4705:	53 59 53 54 45 4d 5f 54 41 53 4b 5f 43 4f 55 4e     SYSTEM_TASK_COUN
    4715:	54 45 52 5f 52 45 53 3a 25 6c 64 0a 00              TER_RES:%ld..

00004722 <__c.4482>:
    4722:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

00004731 <__c.4480>:
    4731:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 52 54 43     initializing RTC
    4741:	0a 00                                               ..

00004743 <__c.4478>:
    4743:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     initializing I2C
    4753:	20 62 75 73 0a 00                                    bus..

00004759 <__c.4476>:
    4759:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     initializing SPI
    4769:	20 62 75 73 0a 00                                    bus..

0000476f <__c.4474>:
    476f:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    477f:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

00004789 <__c.4472>:
    4789:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    4799:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000047a3 <__c.4470>:
    47a3:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    47b3:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    47c3:	35 64 69 73 6b 0a 00                                5disk..

000047ca <__c.4468>:
    47ca:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

000047da <__c.4466>:
    47da:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    47ea:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

000047f7 <__c.4464>:
    47f7:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4807:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004816 <__c.4462>:
    4816:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    4826:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    4836:	3a 20 25 6c 64 0a 00                                : %ld..

0000483d <__c.4460>:
    483d:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

0000484e <__c.4458>:
    484e:	53 74 61 72 74 0a 00                                Start..

00004855 <__c.4450>:
    4855:	45 72 72 6f 72 3a 5b 25 73 5d 0a 00                 Error:[%s]..

00004861 <__c.4448>:
    4861:	0a 3e 00                                            .>.

00004864 <__c.4438>:
    4864:	64 65 6c 61 79 5f 74 65 73 74 73 0a 74 69 6d 65     delay_tests.time
    4874:	0a 73 65 74 64 61 74 65 0a 6d 65 6d 0a 0a 00        .setdate.mem...

00004883 <__c.4434>:
    4883:	4d 79 20 64 65 6c 61 79 73 0a 00                    My delays..

0000488e <__c.4432>:
    488e:	53 79 73 74 65 6d 20 64 65 6c 61 79 73 0a 00        System delays..

0000489d <__c.4428>:
    489d:	0a 00                                               ..

0000489f <__c.4426>:
    489f:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    48af:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000048b9 <__c.4424>:
    48b9:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    48c9:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000048d3 <__c.4422>:
    48d3:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    48e3:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    48f3:	35 64 69 73 6b 0a 00                                5disk..

000048fa <__c.4420>:
    48fa:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

0000490a <__c.4418>:
    490a:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    491a:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

00004927 <__c.4416>:
    4927:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    4937:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

00004946 <__c.4414>:
    4946:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    4956:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    4966:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..

00004976 <__ctors_end>:
    4976:	11 24       	eor	r1, r1
    4978:	1f be       	out	0x3f, r1	; 63
    497a:	cf ef       	ldi	r28, 0xFF	; 255
    497c:	d0 e4       	ldi	r29, 0x40	; 64
    497e:	de bf       	out	0x3e, r29	; 62
    4980:	cd bf       	out	0x3d, r28	; 61

00004982 <__do_copy_data>:
    4982:	17 e1       	ldi	r17, 0x17	; 23
    4984:	a0 e0       	ldi	r26, 0x00	; 0
    4986:	b1 e0       	ldi	r27, 0x01	; 1
    4988:	e2 e0       	ldi	r30, 0x02	; 2
    498a:	f3 ee       	ldi	r31, 0xE3	; 227
    498c:	01 e0       	ldi	r16, 0x01	; 1
    498e:	0b bf       	out	0x3b, r16	; 59
    4990:	02 c0       	rjmp	.+4      	; 0x4996 <__do_copy_data+0x14>
    4992:	07 90       	elpm	r0, Z+
    4994:	0d 92       	st	X+, r0
    4996:	a8 3b       	cpi	r26, 0xB8	; 184
    4998:	b1 07       	cpc	r27, r17
    499a:	d9 f7       	brne	.-10     	; 0x4992 <__do_copy_data+0x10>

0000499c <__do_clear_bss>:
    499c:	2f e1       	ldi	r18, 0x1F	; 31
    499e:	a8 eb       	ldi	r26, 0xB8	; 184
    49a0:	b7 e1       	ldi	r27, 0x17	; 23
    49a2:	01 c0       	rjmp	.+2      	; 0x49a6 <.do_clear_bss_start>

000049a4 <.do_clear_bss_loop>:
    49a4:	1d 92       	st	X+, r1

000049a6 <.do_clear_bss_start>:
    49a6:	ab 38       	cpi	r26, 0x8B	; 139
    49a8:	b2 07       	cpc	r27, r18
    49aa:	e1 f7       	brne	.-8      	; 0x49a4 <.do_clear_bss_loop>
    49ac:	0e 94 e8 e9 	call	0x1d3d0	; 0x1d3d0 <main>
    49b0:	0c 94 7f f1 	jmp	0x1e2fe	; 0x1e2fe <_exit>

000049b4 <__bad_interrupt>:
    49b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000049b8 <vfprintf>:
    49b8:	2f 92       	push	r2
    49ba:	3f 92       	push	r3
    49bc:	4f 92       	push	r4
    49be:	5f 92       	push	r5
    49c0:	6f 92       	push	r6
    49c2:	7f 92       	push	r7
    49c4:	8f 92       	push	r8
    49c6:	9f 92       	push	r9
    49c8:	af 92       	push	r10
    49ca:	bf 92       	push	r11
    49cc:	cf 92       	push	r12
    49ce:	df 92       	push	r13
    49d0:	ef 92       	push	r14
    49d2:	ff 92       	push	r15
    49d4:	0f 93       	push	r16
    49d6:	1f 93       	push	r17
    49d8:	cf 93       	push	r28
    49da:	df 93       	push	r29
    49dc:	cd b7       	in	r28, 0x3d	; 61
    49de:	de b7       	in	r29, 0x3e	; 62
    49e0:	60 97       	sbiw	r28, 0x10	; 16
    49e2:	0f b6       	in	r0, 0x3f	; 63
    49e4:	f8 94       	cli
    49e6:	de bf       	out	0x3e, r29	; 62
    49e8:	0f be       	out	0x3f, r0	; 63
    49ea:	cd bf       	out	0x3d, r28	; 61
    49ec:	7c 01       	movw	r14, r24
    49ee:	1b 01       	movw	r2, r22
    49f0:	6a 01       	movw	r12, r20
    49f2:	fc 01       	movw	r30, r24
    49f4:	17 82       	std	Z+7, r1	; 0x07
    49f6:	16 82       	std	Z+6, r1	; 0x06
    49f8:	83 81       	ldd	r24, Z+3	; 0x03
    49fa:	81 ff       	sbrs	r24, 1
    49fc:	44 c3       	rjmp	.+1672   	; 0x5086 <vfprintf+0x6ce>
    49fe:	9e 01       	movw	r18, r28
    4a00:	2f 5f       	subi	r18, 0xFF	; 255
    4a02:	3f 4f       	sbci	r19, 0xFF	; 255
    4a04:	39 01       	movw	r6, r18
    4a06:	f7 01       	movw	r30, r14
    4a08:	93 81       	ldd	r25, Z+3	; 0x03
    4a0a:	f1 01       	movw	r30, r2
    4a0c:	93 fd       	sbrc	r25, 3
    4a0e:	85 91       	lpm	r24, Z+
    4a10:	93 ff       	sbrs	r25, 3
    4a12:	81 91       	ld	r24, Z+
    4a14:	1f 01       	movw	r2, r30
    4a16:	88 23       	and	r24, r24
    4a18:	09 f4       	brne	.+2      	; 0x4a1c <vfprintf+0x64>
    4a1a:	31 c3       	rjmp	.+1634   	; 0x507e <vfprintf+0x6c6>
    4a1c:	85 32       	cpi	r24, 0x25	; 37
    4a1e:	39 f4       	brne	.+14     	; 0x4a2e <vfprintf+0x76>
    4a20:	93 fd       	sbrc	r25, 3
    4a22:	85 91       	lpm	r24, Z+
    4a24:	93 ff       	sbrs	r25, 3
    4a26:	81 91       	ld	r24, Z+
    4a28:	1f 01       	movw	r2, r30
    4a2a:	85 32       	cpi	r24, 0x25	; 37
    4a2c:	39 f4       	brne	.+14     	; 0x4a3c <vfprintf+0x84>
    4a2e:	b7 01       	movw	r22, r14
    4a30:	90 e0       	ldi	r25, 0x00	; 0
    4a32:	0e 94 87 7a 	call	0xf50e	; 0xf50e <fputc>
    4a36:	56 01       	movw	r10, r12
    4a38:	65 01       	movw	r12, r10
    4a3a:	e5 cf       	rjmp	.-54     	; 0x4a06 <vfprintf+0x4e>
    4a3c:	10 e0       	ldi	r17, 0x00	; 0
    4a3e:	51 2c       	mov	r5, r1
    4a40:	91 2c       	mov	r9, r1
    4a42:	ff e1       	ldi	r31, 0x1F	; 31
    4a44:	f9 15       	cp	r31, r9
    4a46:	d8 f0       	brcs	.+54     	; 0x4a7e <vfprintf+0xc6>
    4a48:	8b 32       	cpi	r24, 0x2B	; 43
    4a4a:	79 f0       	breq	.+30     	; 0x4a6a <vfprintf+0xb2>
    4a4c:	38 f4       	brcc	.+14     	; 0x4a5c <vfprintf+0xa4>
    4a4e:	80 32       	cpi	r24, 0x20	; 32
    4a50:	79 f0       	breq	.+30     	; 0x4a70 <vfprintf+0xb8>
    4a52:	83 32       	cpi	r24, 0x23	; 35
    4a54:	a1 f4       	brne	.+40     	; 0x4a7e <vfprintf+0xc6>
    4a56:	f9 2d       	mov	r31, r9
    4a58:	f0 61       	ori	r31, 0x10	; 16
    4a5a:	2e c0       	rjmp	.+92     	; 0x4ab8 <vfprintf+0x100>
    4a5c:	8d 32       	cpi	r24, 0x2D	; 45
    4a5e:	61 f0       	breq	.+24     	; 0x4a78 <vfprintf+0xc0>
    4a60:	80 33       	cpi	r24, 0x30	; 48
    4a62:	69 f4       	brne	.+26     	; 0x4a7e <vfprintf+0xc6>
    4a64:	29 2d       	mov	r18, r9
    4a66:	21 60       	ori	r18, 0x01	; 1
    4a68:	2d c0       	rjmp	.+90     	; 0x4ac4 <vfprintf+0x10c>
    4a6a:	39 2d       	mov	r19, r9
    4a6c:	32 60       	ori	r19, 0x02	; 2
    4a6e:	93 2e       	mov	r9, r19
    4a70:	89 2d       	mov	r24, r9
    4a72:	84 60       	ori	r24, 0x04	; 4
    4a74:	98 2e       	mov	r9, r24
    4a76:	2a c0       	rjmp	.+84     	; 0x4acc <vfprintf+0x114>
    4a78:	e9 2d       	mov	r30, r9
    4a7a:	e8 60       	ori	r30, 0x08	; 8
    4a7c:	15 c0       	rjmp	.+42     	; 0x4aa8 <vfprintf+0xf0>
    4a7e:	97 fc       	sbrc	r9, 7
    4a80:	2d c0       	rjmp	.+90     	; 0x4adc <vfprintf+0x124>
    4a82:	20 ed       	ldi	r18, 0xD0	; 208
    4a84:	28 0f       	add	r18, r24
    4a86:	2a 30       	cpi	r18, 0x0A	; 10
    4a88:	88 f4       	brcc	.+34     	; 0x4aac <vfprintf+0xf4>
    4a8a:	96 fe       	sbrs	r9, 6
    4a8c:	06 c0       	rjmp	.+12     	; 0x4a9a <vfprintf+0xe2>
    4a8e:	3a e0       	ldi	r19, 0x0A	; 10
    4a90:	13 9f       	mul	r17, r19
    4a92:	20 0d       	add	r18, r0
    4a94:	11 24       	eor	r1, r1
    4a96:	12 2f       	mov	r17, r18
    4a98:	19 c0       	rjmp	.+50     	; 0x4acc <vfprintf+0x114>
    4a9a:	8a e0       	ldi	r24, 0x0A	; 10
    4a9c:	58 9e       	mul	r5, r24
    4a9e:	20 0d       	add	r18, r0
    4aa0:	11 24       	eor	r1, r1
    4aa2:	52 2e       	mov	r5, r18
    4aa4:	e9 2d       	mov	r30, r9
    4aa6:	e0 62       	ori	r30, 0x20	; 32
    4aa8:	9e 2e       	mov	r9, r30
    4aaa:	10 c0       	rjmp	.+32     	; 0x4acc <vfprintf+0x114>
    4aac:	8e 32       	cpi	r24, 0x2E	; 46
    4aae:	31 f4       	brne	.+12     	; 0x4abc <vfprintf+0x104>
    4ab0:	96 fc       	sbrc	r9, 6
    4ab2:	e5 c2       	rjmp	.+1482   	; 0x507e <vfprintf+0x6c6>
    4ab4:	f9 2d       	mov	r31, r9
    4ab6:	f0 64       	ori	r31, 0x40	; 64
    4ab8:	9f 2e       	mov	r9, r31
    4aba:	08 c0       	rjmp	.+16     	; 0x4acc <vfprintf+0x114>
    4abc:	8c 36       	cpi	r24, 0x6C	; 108
    4abe:	21 f4       	brne	.+8      	; 0x4ac8 <vfprintf+0x110>
    4ac0:	29 2d       	mov	r18, r9
    4ac2:	20 68       	ori	r18, 0x80	; 128
    4ac4:	92 2e       	mov	r9, r18
    4ac6:	02 c0       	rjmp	.+4      	; 0x4acc <vfprintf+0x114>
    4ac8:	88 36       	cpi	r24, 0x68	; 104
    4aca:	41 f4       	brne	.+16     	; 0x4adc <vfprintf+0x124>
    4acc:	f1 01       	movw	r30, r2
    4ace:	93 fd       	sbrc	r25, 3
    4ad0:	85 91       	lpm	r24, Z+
    4ad2:	93 ff       	sbrs	r25, 3
    4ad4:	81 91       	ld	r24, Z+
    4ad6:	1f 01       	movw	r2, r30
    4ad8:	81 11       	cpse	r24, r1
    4ada:	b3 cf       	rjmp	.-154    	; 0x4a42 <vfprintf+0x8a>
    4adc:	9b eb       	ldi	r25, 0xBB	; 187
    4ade:	98 0f       	add	r25, r24
    4ae0:	93 30       	cpi	r25, 0x03	; 3
    4ae2:	20 f4       	brcc	.+8      	; 0x4aec <vfprintf+0x134>
    4ae4:	99 2d       	mov	r25, r9
    4ae6:	90 61       	ori	r25, 0x10	; 16
    4ae8:	80 5e       	subi	r24, 0xE0	; 224
    4aea:	07 c0       	rjmp	.+14     	; 0x4afa <vfprintf+0x142>
    4aec:	9b e9       	ldi	r25, 0x9B	; 155
    4aee:	98 0f       	add	r25, r24
    4af0:	93 30       	cpi	r25, 0x03	; 3
    4af2:	08 f0       	brcs	.+2      	; 0x4af6 <vfprintf+0x13e>
    4af4:	66 c1       	rjmp	.+716    	; 0x4dc2 <vfprintf+0x40a>
    4af6:	99 2d       	mov	r25, r9
    4af8:	9f 7e       	andi	r25, 0xEF	; 239
    4afa:	96 ff       	sbrs	r25, 6
    4afc:	16 e0       	ldi	r17, 0x06	; 6
    4afe:	9f 73       	andi	r25, 0x3F	; 63
    4b00:	99 2e       	mov	r9, r25
    4b02:	85 36       	cpi	r24, 0x65	; 101
    4b04:	19 f4       	brne	.+6      	; 0x4b0c <vfprintf+0x154>
    4b06:	90 64       	ori	r25, 0x40	; 64
    4b08:	99 2e       	mov	r9, r25
    4b0a:	08 c0       	rjmp	.+16     	; 0x4b1c <vfprintf+0x164>
    4b0c:	86 36       	cpi	r24, 0x66	; 102
    4b0e:	21 f4       	brne	.+8      	; 0x4b18 <vfprintf+0x160>
    4b10:	39 2f       	mov	r19, r25
    4b12:	30 68       	ori	r19, 0x80	; 128
    4b14:	93 2e       	mov	r9, r19
    4b16:	02 c0       	rjmp	.+4      	; 0x4b1c <vfprintf+0x164>
    4b18:	11 11       	cpse	r17, r1
    4b1a:	11 50       	subi	r17, 0x01	; 1
    4b1c:	97 fe       	sbrs	r9, 7
    4b1e:	07 c0       	rjmp	.+14     	; 0x4b2e <vfprintf+0x176>
    4b20:	1c 33       	cpi	r17, 0x3C	; 60
    4b22:	50 f4       	brcc	.+20     	; 0x4b38 <vfprintf+0x180>
    4b24:	44 24       	eor	r4, r4
    4b26:	43 94       	inc	r4
    4b28:	41 0e       	add	r4, r17
    4b2a:	27 e0       	ldi	r18, 0x07	; 7
    4b2c:	0b c0       	rjmp	.+22     	; 0x4b44 <vfprintf+0x18c>
    4b2e:	18 30       	cpi	r17, 0x08	; 8
    4b30:	38 f0       	brcs	.+14     	; 0x4b40 <vfprintf+0x188>
    4b32:	27 e0       	ldi	r18, 0x07	; 7
    4b34:	17 e0       	ldi	r17, 0x07	; 7
    4b36:	05 c0       	rjmp	.+10     	; 0x4b42 <vfprintf+0x18a>
    4b38:	27 e0       	ldi	r18, 0x07	; 7
    4b3a:	9c e3       	ldi	r25, 0x3C	; 60
    4b3c:	49 2e       	mov	r4, r25
    4b3e:	02 c0       	rjmp	.+4      	; 0x4b44 <vfprintf+0x18c>
    4b40:	21 2f       	mov	r18, r17
    4b42:	41 2c       	mov	r4, r1
    4b44:	56 01       	movw	r10, r12
    4b46:	84 e0       	ldi	r24, 0x04	; 4
    4b48:	a8 0e       	add	r10, r24
    4b4a:	b1 1c       	adc	r11, r1
    4b4c:	f6 01       	movw	r30, r12
    4b4e:	60 81       	ld	r22, Z
    4b50:	71 81       	ldd	r23, Z+1	; 0x01
    4b52:	82 81       	ldd	r24, Z+2	; 0x02
    4b54:	93 81       	ldd	r25, Z+3	; 0x03
    4b56:	04 2d       	mov	r16, r4
    4b58:	a3 01       	movw	r20, r6
    4b5a:	0e 94 2c f0 	call	0x1e058	; 0x1e058 <__ftoa_engine>
    4b5e:	6c 01       	movw	r12, r24
    4b60:	f9 81       	ldd	r31, Y+1	; 0x01
    4b62:	fc 87       	std	Y+12, r31	; 0x0c
    4b64:	f0 ff       	sbrs	r31, 0
    4b66:	02 c0       	rjmp	.+4      	; 0x4b6c <vfprintf+0x1b4>
    4b68:	f3 ff       	sbrs	r31, 3
    4b6a:	06 c0       	rjmp	.+12     	; 0x4b78 <vfprintf+0x1c0>
    4b6c:	91 fc       	sbrc	r9, 1
    4b6e:	06 c0       	rjmp	.+12     	; 0x4b7c <vfprintf+0x1c4>
    4b70:	92 fe       	sbrs	r9, 2
    4b72:	06 c0       	rjmp	.+12     	; 0x4b80 <vfprintf+0x1c8>
    4b74:	00 e2       	ldi	r16, 0x20	; 32
    4b76:	05 c0       	rjmp	.+10     	; 0x4b82 <vfprintf+0x1ca>
    4b78:	0d e2       	ldi	r16, 0x2D	; 45
    4b7a:	03 c0       	rjmp	.+6      	; 0x4b82 <vfprintf+0x1ca>
    4b7c:	0b e2       	ldi	r16, 0x2B	; 43
    4b7e:	01 c0       	rjmp	.+2      	; 0x4b82 <vfprintf+0x1ca>
    4b80:	00 e0       	ldi	r16, 0x00	; 0
    4b82:	8c 85       	ldd	r24, Y+12	; 0x0c
    4b84:	8c 70       	andi	r24, 0x0C	; 12
    4b86:	19 f0       	breq	.+6      	; 0x4b8e <vfprintf+0x1d6>
    4b88:	01 11       	cpse	r16, r1
    4b8a:	5a c2       	rjmp	.+1204   	; 0x5040 <vfprintf+0x688>
    4b8c:	9b c2       	rjmp	.+1334   	; 0x50c4 <vfprintf+0x70c>
    4b8e:	97 fe       	sbrs	r9, 7
    4b90:	10 c0       	rjmp	.+32     	; 0x4bb2 <vfprintf+0x1fa>
    4b92:	4c 0c       	add	r4, r12
    4b94:	fc 85       	ldd	r31, Y+12	; 0x0c
    4b96:	f4 ff       	sbrs	r31, 4
    4b98:	04 c0       	rjmp	.+8      	; 0x4ba2 <vfprintf+0x1ea>
    4b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b9c:	81 33       	cpi	r24, 0x31	; 49
    4b9e:	09 f4       	brne	.+2      	; 0x4ba2 <vfprintf+0x1ea>
    4ba0:	4a 94       	dec	r4
    4ba2:	14 14       	cp	r1, r4
    4ba4:	74 f5       	brge	.+92     	; 0x4c02 <vfprintf+0x24a>
    4ba6:	28 e0       	ldi	r18, 0x08	; 8
    4ba8:	24 15       	cp	r18, r4
    4baa:	78 f5       	brcc	.+94     	; 0x4c0a <vfprintf+0x252>
    4bac:	88 e0       	ldi	r24, 0x08	; 8
    4bae:	48 2e       	mov	r4, r24
    4bb0:	2c c0       	rjmp	.+88     	; 0x4c0a <vfprintf+0x252>
    4bb2:	96 fc       	sbrc	r9, 6
    4bb4:	2a c0       	rjmp	.+84     	; 0x4c0a <vfprintf+0x252>
    4bb6:	81 2f       	mov	r24, r17
    4bb8:	90 e0       	ldi	r25, 0x00	; 0
    4bba:	8c 15       	cp	r24, r12
    4bbc:	9d 05       	cpc	r25, r13
    4bbe:	9c f0       	brlt	.+38     	; 0x4be6 <vfprintf+0x22e>
    4bc0:	3c ef       	ldi	r19, 0xFC	; 252
    4bc2:	c3 16       	cp	r12, r19
    4bc4:	3f ef       	ldi	r19, 0xFF	; 255
    4bc6:	d3 06       	cpc	r13, r19
    4bc8:	74 f0       	brlt	.+28     	; 0x4be6 <vfprintf+0x22e>
    4bca:	89 2d       	mov	r24, r9
    4bcc:	80 68       	ori	r24, 0x80	; 128
    4bce:	98 2e       	mov	r9, r24
    4bd0:	0a c0       	rjmp	.+20     	; 0x4be6 <vfprintf+0x22e>
    4bd2:	e2 e0       	ldi	r30, 0x02	; 2
    4bd4:	f0 e0       	ldi	r31, 0x00	; 0
    4bd6:	ec 0f       	add	r30, r28
    4bd8:	fd 1f       	adc	r31, r29
    4bda:	e1 0f       	add	r30, r17
    4bdc:	f1 1d       	adc	r31, r1
    4bde:	80 81       	ld	r24, Z
    4be0:	80 33       	cpi	r24, 0x30	; 48
    4be2:	19 f4       	brne	.+6      	; 0x4bea <vfprintf+0x232>
    4be4:	11 50       	subi	r17, 0x01	; 1
    4be6:	11 11       	cpse	r17, r1
    4be8:	f4 cf       	rjmp	.-24     	; 0x4bd2 <vfprintf+0x21a>
    4bea:	97 fe       	sbrs	r9, 7
    4bec:	0e c0       	rjmp	.+28     	; 0x4c0a <vfprintf+0x252>
    4bee:	44 24       	eor	r4, r4
    4bf0:	43 94       	inc	r4
    4bf2:	41 0e       	add	r4, r17
    4bf4:	81 2f       	mov	r24, r17
    4bf6:	90 e0       	ldi	r25, 0x00	; 0
    4bf8:	c8 16       	cp	r12, r24
    4bfa:	d9 06       	cpc	r13, r25
    4bfc:	2c f4       	brge	.+10     	; 0x4c08 <vfprintf+0x250>
    4bfe:	1c 19       	sub	r17, r12
    4c00:	04 c0       	rjmp	.+8      	; 0x4c0a <vfprintf+0x252>
    4c02:	44 24       	eor	r4, r4
    4c04:	43 94       	inc	r4
    4c06:	01 c0       	rjmp	.+2      	; 0x4c0a <vfprintf+0x252>
    4c08:	10 e0       	ldi	r17, 0x00	; 0
    4c0a:	97 fe       	sbrs	r9, 7
    4c0c:	06 c0       	rjmp	.+12     	; 0x4c1a <vfprintf+0x262>
    4c0e:	1c 14       	cp	r1, r12
    4c10:	1d 04       	cpc	r1, r13
    4c12:	34 f4       	brge	.+12     	; 0x4c20 <vfprintf+0x268>
    4c14:	c6 01       	movw	r24, r12
    4c16:	01 96       	adiw	r24, 0x01	; 1
    4c18:	05 c0       	rjmp	.+10     	; 0x4c24 <vfprintf+0x26c>
    4c1a:	85 e0       	ldi	r24, 0x05	; 5
    4c1c:	90 e0       	ldi	r25, 0x00	; 0
    4c1e:	02 c0       	rjmp	.+4      	; 0x4c24 <vfprintf+0x26c>
    4c20:	81 e0       	ldi	r24, 0x01	; 1
    4c22:	90 e0       	ldi	r25, 0x00	; 0
    4c24:	01 11       	cpse	r16, r1
    4c26:	01 96       	adiw	r24, 0x01	; 1
    4c28:	11 23       	and	r17, r17
    4c2a:	31 f0       	breq	.+12     	; 0x4c38 <vfprintf+0x280>
    4c2c:	21 2f       	mov	r18, r17
    4c2e:	30 e0       	ldi	r19, 0x00	; 0
    4c30:	2f 5f       	subi	r18, 0xFF	; 255
    4c32:	3f 4f       	sbci	r19, 0xFF	; 255
    4c34:	82 0f       	add	r24, r18
    4c36:	93 1f       	adc	r25, r19
    4c38:	25 2d       	mov	r18, r5
    4c3a:	30 e0       	ldi	r19, 0x00	; 0
    4c3c:	82 17       	cp	r24, r18
    4c3e:	93 07       	cpc	r25, r19
    4c40:	14 f4       	brge	.+4      	; 0x4c46 <vfprintf+0x28e>
    4c42:	58 1a       	sub	r5, r24
    4c44:	01 c0       	rjmp	.+2      	; 0x4c48 <vfprintf+0x290>
    4c46:	51 2c       	mov	r5, r1
    4c48:	89 2d       	mov	r24, r9
    4c4a:	89 70       	andi	r24, 0x09	; 9
    4c4c:	49 f4       	brne	.+18     	; 0x4c60 <vfprintf+0x2a8>
    4c4e:	55 20       	and	r5, r5
    4c50:	39 f0       	breq	.+14     	; 0x4c60 <vfprintf+0x2a8>
    4c52:	b7 01       	movw	r22, r14
    4c54:	80 e2       	ldi	r24, 0x20	; 32
    4c56:	90 e0       	ldi	r25, 0x00	; 0
    4c58:	0e 94 87 7a 	call	0xf50e	; 0xf50e <fputc>
    4c5c:	5a 94       	dec	r5
    4c5e:	f7 cf       	rjmp	.-18     	; 0x4c4e <vfprintf+0x296>
    4c60:	00 23       	and	r16, r16
    4c62:	29 f0       	breq	.+10     	; 0x4c6e <vfprintf+0x2b6>
    4c64:	b7 01       	movw	r22, r14
    4c66:	80 2f       	mov	r24, r16
    4c68:	90 e0       	ldi	r25, 0x00	; 0
    4c6a:	0e 94 87 7a 	call	0xf50e	; 0xf50e <fputc>
    4c6e:	93 fc       	sbrc	r9, 3
    4c70:	09 c0       	rjmp	.+18     	; 0x4c84 <vfprintf+0x2cc>
    4c72:	55 20       	and	r5, r5
    4c74:	39 f0       	breq	.+14     	; 0x4c84 <vfprintf+0x2cc>
    4c76:	b7 01       	movw	r22, r14
    4c78:	80 e3       	ldi	r24, 0x30	; 48
    4c7a:	90 e0       	ldi	r25, 0x00	; 0
    4c7c:	0e 94 87 7a 	call	0xf50e	; 0xf50e <fputc>
    4c80:	5a 94       	dec	r5
    4c82:	f7 cf       	rjmp	.-18     	; 0x4c72 <vfprintf+0x2ba>
    4c84:	97 fe       	sbrs	r9, 7
    4c86:	4c c0       	rjmp	.+152    	; 0x4d20 <vfprintf+0x368>
    4c88:	46 01       	movw	r8, r12
    4c8a:	d7 fe       	sbrs	r13, 7
    4c8c:	02 c0       	rjmp	.+4      	; 0x4c92 <vfprintf+0x2da>
    4c8e:	81 2c       	mov	r8, r1
    4c90:	91 2c       	mov	r9, r1
    4c92:	c6 01       	movw	r24, r12
    4c94:	88 19       	sub	r24, r8
    4c96:	99 09       	sbc	r25, r9
    4c98:	f3 01       	movw	r30, r6
    4c9a:	e8 0f       	add	r30, r24
    4c9c:	f9 1f       	adc	r31, r25
    4c9e:	fe 87       	std	Y+14, r31	; 0x0e
    4ca0:	ed 87       	std	Y+13, r30	; 0x0d
    4ca2:	96 01       	movw	r18, r12
    4ca4:	24 19       	sub	r18, r4
    4ca6:	31 09       	sbc	r19, r1
    4ca8:	38 8b       	std	Y+16, r19	; 0x10
    4caa:	2f 87       	std	Y+15, r18	; 0x0f
    4cac:	01 2f       	mov	r16, r17
    4cae:	10 e0       	ldi	r17, 0x00	; 0
    4cb0:	11 95       	neg	r17
    4cb2:	01 95       	neg	r16
    4cb4:	11 09       	sbc	r17, r1
    4cb6:	3f ef       	ldi	r19, 0xFF	; 255
    4cb8:	83 16       	cp	r8, r19
    4cba:	93 06       	cpc	r9, r19
    4cbc:	29 f4       	brne	.+10     	; 0x4cc8 <vfprintf+0x310>
    4cbe:	b7 01       	movw	r22, r14
    4cc0:	8e e2       	ldi	r24, 0x2E	; 46
    4cc2:	90 e0       	ldi	r25, 0x00	; 0
    4cc4:	0e 94 87 7a 	call	0xf50e	; 0xf50e <fputc>
    4cc8:	c8 14       	cp	r12, r8
    4cca:	d9 04       	cpc	r13, r9
    4ccc:	4c f0       	brlt	.+18     	; 0x4ce0 <vfprintf+0x328>
    4cce:	8f 85       	ldd	r24, Y+15	; 0x0f
    4cd0:	98 89       	ldd	r25, Y+16	; 0x10
    4cd2:	88 15       	cp	r24, r8
    4cd4:	99 05       	cpc	r25, r9
    4cd6:	24 f4       	brge	.+8      	; 0x4ce0 <vfprintf+0x328>
    4cd8:	ed 85       	ldd	r30, Y+13	; 0x0d
    4cda:	fe 85       	ldd	r31, Y+14	; 0x0e
    4cdc:	81 81       	ldd	r24, Z+1	; 0x01
    4cde:	01 c0       	rjmp	.+2      	; 0x4ce2 <vfprintf+0x32a>
    4ce0:	80 e3       	ldi	r24, 0x30	; 48
    4ce2:	f1 e0       	ldi	r31, 0x01	; 1
    4ce4:	8f 1a       	sub	r8, r31
    4ce6:	91 08       	sbc	r9, r1
    4ce8:	2d 85       	ldd	r18, Y+13	; 0x0d
    4cea:	3e 85       	ldd	r19, Y+14	; 0x0e
    4cec:	2f 5f       	subi	r18, 0xFF	; 255
    4cee:	3f 4f       	sbci	r19, 0xFF	; 255
    4cf0:	3e 87       	std	Y+14, r19	; 0x0e
    4cf2:	2d 87       	std	Y+13, r18	; 0x0d
    4cf4:	80 16       	cp	r8, r16
    4cf6:	91 06       	cpc	r9, r17
    4cf8:	2c f0       	brlt	.+10     	; 0x4d04 <vfprintf+0x34c>
    4cfa:	b7 01       	movw	r22, r14
    4cfc:	90 e0       	ldi	r25, 0x00	; 0
    4cfe:	0e 94 87 7a 	call	0xf50e	; 0xf50e <fputc>
    4d02:	d9 cf       	rjmp	.-78     	; 0x4cb6 <vfprintf+0x2fe>
    4d04:	c8 14       	cp	r12, r8
    4d06:	d9 04       	cpc	r13, r9
    4d08:	41 f4       	brne	.+16     	; 0x4d1a <vfprintf+0x362>
    4d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    4d0c:	96 33       	cpi	r25, 0x36	; 54
    4d0e:	20 f4       	brcc	.+8      	; 0x4d18 <vfprintf+0x360>
    4d10:	95 33       	cpi	r25, 0x35	; 53
    4d12:	19 f4       	brne	.+6      	; 0x4d1a <vfprintf+0x362>
    4d14:	3c 85       	ldd	r19, Y+12	; 0x0c
    4d16:	34 ff       	sbrs	r19, 4
    4d18:	81 e3       	ldi	r24, 0x31	; 49
    4d1a:	b7 01       	movw	r22, r14
    4d1c:	90 e0       	ldi	r25, 0x00	; 0
    4d1e:	4e c0       	rjmp	.+156    	; 0x4dbc <vfprintf+0x404>
    4d20:	8a 81       	ldd	r24, Y+2	; 0x02
    4d22:	81 33       	cpi	r24, 0x31	; 49
    4d24:	19 f0       	breq	.+6      	; 0x4d2c <vfprintf+0x374>
    4d26:	9c 85       	ldd	r25, Y+12	; 0x0c
    4d28:	9f 7e       	andi	r25, 0xEF	; 239
    4d2a:	9c 87       	std	Y+12, r25	; 0x0c
    4d2c:	b7 01       	movw	r22, r14
    4d2e:	90 e0       	ldi	r25, 0x00	; 0
    4d30:	0e 94 87 7a 	call	0xf50e	; 0xf50e <fputc>
    4d34:	11 11       	cpse	r17, r1
    4d36:	05 c0       	rjmp	.+10     	; 0x4d42 <vfprintf+0x38a>
    4d38:	94 fc       	sbrc	r9, 4
    4d3a:	18 c0       	rjmp	.+48     	; 0x4d6c <vfprintf+0x3b4>
    4d3c:	85 e6       	ldi	r24, 0x65	; 101
    4d3e:	90 e0       	ldi	r25, 0x00	; 0
    4d40:	17 c0       	rjmp	.+46     	; 0x4d70 <vfprintf+0x3b8>
    4d42:	b7 01       	movw	r22, r14
    4d44:	8e e2       	ldi	r24, 0x2E	; 46
    4d46:	90 e0       	ldi	r25, 0x00	; 0
    4d48:	0e 94 87 7a 	call	0xf50e	; 0xf50e <fputc>
    4d4c:	1e 5f       	subi	r17, 0xFE	; 254
    4d4e:	82 e0       	ldi	r24, 0x02	; 2
    4d50:	01 e0       	ldi	r16, 0x01	; 1
    4d52:	08 0f       	add	r16, r24
    4d54:	f3 01       	movw	r30, r6
    4d56:	e8 0f       	add	r30, r24
    4d58:	f1 1d       	adc	r31, r1
    4d5a:	80 81       	ld	r24, Z
    4d5c:	b7 01       	movw	r22, r14
    4d5e:	90 e0       	ldi	r25, 0x00	; 0
    4d60:	0e 94 87 7a 	call	0xf50e	; 0xf50e <fputc>
    4d64:	80 2f       	mov	r24, r16
    4d66:	01 13       	cpse	r16, r17
    4d68:	f3 cf       	rjmp	.-26     	; 0x4d50 <vfprintf+0x398>
    4d6a:	e6 cf       	rjmp	.-52     	; 0x4d38 <vfprintf+0x380>
    4d6c:	85 e4       	ldi	r24, 0x45	; 69
    4d6e:	90 e0       	ldi	r25, 0x00	; 0
    4d70:	b7 01       	movw	r22, r14
    4d72:	0e 94 87 7a 	call	0xf50e	; 0xf50e <fputc>
    4d76:	d7 fc       	sbrc	r13, 7
    4d78:	06 c0       	rjmp	.+12     	; 0x4d86 <vfprintf+0x3ce>
    4d7a:	c1 14       	cp	r12, r1
    4d7c:	d1 04       	cpc	r13, r1
    4d7e:	41 f4       	brne	.+16     	; 0x4d90 <vfprintf+0x3d8>
    4d80:	ec 85       	ldd	r30, Y+12	; 0x0c
    4d82:	e4 ff       	sbrs	r30, 4
    4d84:	05 c0       	rjmp	.+10     	; 0x4d90 <vfprintf+0x3d8>
    4d86:	d1 94       	neg	r13
    4d88:	c1 94       	neg	r12
    4d8a:	d1 08       	sbc	r13, r1
    4d8c:	8d e2       	ldi	r24, 0x2D	; 45
    4d8e:	01 c0       	rjmp	.+2      	; 0x4d92 <vfprintf+0x3da>
    4d90:	8b e2       	ldi	r24, 0x2B	; 43
    4d92:	b7 01       	movw	r22, r14
    4d94:	90 e0       	ldi	r25, 0x00	; 0
    4d96:	0e 94 87 7a 	call	0xf50e	; 0xf50e <fputc>
    4d9a:	80 e3       	ldi	r24, 0x30	; 48
    4d9c:	2a e0       	ldi	r18, 0x0A	; 10
    4d9e:	c2 16       	cp	r12, r18
    4da0:	d1 04       	cpc	r13, r1
    4da2:	2c f0       	brlt	.+10     	; 0x4dae <vfprintf+0x3f6>
    4da4:	8f 5f       	subi	r24, 0xFF	; 255
    4da6:	fa e0       	ldi	r31, 0x0A	; 10
    4da8:	cf 1a       	sub	r12, r31
    4daa:	d1 08       	sbc	r13, r1
    4dac:	f7 cf       	rjmp	.-18     	; 0x4d9c <vfprintf+0x3e4>
    4dae:	b7 01       	movw	r22, r14
    4db0:	90 e0       	ldi	r25, 0x00	; 0
    4db2:	0e 94 87 7a 	call	0xf50e	; 0xf50e <fputc>
    4db6:	b7 01       	movw	r22, r14
    4db8:	c6 01       	movw	r24, r12
    4dba:	c0 96       	adiw	r24, 0x30	; 48
    4dbc:	0e 94 87 7a 	call	0xf50e	; 0xf50e <fputc>
    4dc0:	54 c1       	rjmp	.+680    	; 0x506a <vfprintf+0x6b2>
    4dc2:	83 36       	cpi	r24, 0x63	; 99
    4dc4:	31 f0       	breq	.+12     	; 0x4dd2 <vfprintf+0x41a>
    4dc6:	83 37       	cpi	r24, 0x73	; 115
    4dc8:	79 f0       	breq	.+30     	; 0x4de8 <vfprintf+0x430>
    4dca:	83 35       	cpi	r24, 0x53	; 83
    4dcc:	09 f0       	breq	.+2      	; 0x4dd0 <vfprintf+0x418>
    4dce:	56 c0       	rjmp	.+172    	; 0x4e7c <vfprintf+0x4c4>
    4dd0:	20 c0       	rjmp	.+64     	; 0x4e12 <vfprintf+0x45a>
    4dd2:	56 01       	movw	r10, r12
    4dd4:	32 e0       	ldi	r19, 0x02	; 2
    4dd6:	a3 0e       	add	r10, r19
    4dd8:	b1 1c       	adc	r11, r1
    4dda:	f6 01       	movw	r30, r12
    4ddc:	80 81       	ld	r24, Z
    4dde:	89 83       	std	Y+1, r24	; 0x01
    4de0:	01 e0       	ldi	r16, 0x01	; 1
    4de2:	10 e0       	ldi	r17, 0x00	; 0
    4de4:	63 01       	movw	r12, r6
    4de6:	12 c0       	rjmp	.+36     	; 0x4e0c <vfprintf+0x454>
    4de8:	56 01       	movw	r10, r12
    4dea:	f2 e0       	ldi	r31, 0x02	; 2
    4dec:	af 0e       	add	r10, r31
    4dee:	b1 1c       	adc	r11, r1
    4df0:	f6 01       	movw	r30, r12
    4df2:	c0 80       	ld	r12, Z
    4df4:	d1 80       	ldd	r13, Z+1	; 0x01
    4df6:	96 fe       	sbrs	r9, 6
    4df8:	03 c0       	rjmp	.+6      	; 0x4e00 <vfprintf+0x448>
    4dfa:	61 2f       	mov	r22, r17
    4dfc:	70 e0       	ldi	r23, 0x00	; 0
    4dfe:	02 c0       	rjmp	.+4      	; 0x4e04 <vfprintf+0x44c>
    4e00:	6f ef       	ldi	r22, 0xFF	; 255
    4e02:	7f ef       	ldi	r23, 0xFF	; 255
    4e04:	c6 01       	movw	r24, r12
    4e06:	0e 94 16 f1 	call	0x1e22c	; 0x1e22c <strnlen>
    4e0a:	8c 01       	movw	r16, r24
    4e0c:	f9 2d       	mov	r31, r9
    4e0e:	ff 77       	andi	r31, 0x7F	; 127
    4e10:	14 c0       	rjmp	.+40     	; 0x4e3a <vfprintf+0x482>
    4e12:	56 01       	movw	r10, r12
    4e14:	22 e0       	ldi	r18, 0x02	; 2
    4e16:	a2 0e       	add	r10, r18
    4e18:	b1 1c       	adc	r11, r1
    4e1a:	f6 01       	movw	r30, r12
    4e1c:	c0 80       	ld	r12, Z
    4e1e:	d1 80       	ldd	r13, Z+1	; 0x01
    4e20:	96 fe       	sbrs	r9, 6
    4e22:	03 c0       	rjmp	.+6      	; 0x4e2a <vfprintf+0x472>
    4e24:	61 2f       	mov	r22, r17
    4e26:	70 e0       	ldi	r23, 0x00	; 0
    4e28:	02 c0       	rjmp	.+4      	; 0x4e2e <vfprintf+0x476>
    4e2a:	6f ef       	ldi	r22, 0xFF	; 255
    4e2c:	7f ef       	ldi	r23, 0xFF	; 255
    4e2e:	c6 01       	movw	r24, r12
    4e30:	0e 94 04 f1 	call	0x1e208	; 0x1e208 <strnlen_P>
    4e34:	8c 01       	movw	r16, r24
    4e36:	f9 2d       	mov	r31, r9
    4e38:	f0 68       	ori	r31, 0x80	; 128
    4e3a:	9f 2e       	mov	r9, r31
    4e3c:	f3 fd       	sbrc	r31, 3
    4e3e:	1a c0       	rjmp	.+52     	; 0x4e74 <vfprintf+0x4bc>
    4e40:	85 2d       	mov	r24, r5
    4e42:	90 e0       	ldi	r25, 0x00	; 0
    4e44:	08 17       	cp	r16, r24
    4e46:	19 07       	cpc	r17, r25
    4e48:	a8 f4       	brcc	.+42     	; 0x4e74 <vfprintf+0x4bc>
    4e4a:	b7 01       	movw	r22, r14
    4e4c:	80 e2       	ldi	r24, 0x20	; 32
    4e4e:	90 e0       	ldi	r25, 0x00	; 0
    4e50:	0e 94 87 7a 	call	0xf50e	; 0xf50e <fputc>
    4e54:	5a 94       	dec	r5
    4e56:	f4 cf       	rjmp	.-24     	; 0x4e40 <vfprintf+0x488>
    4e58:	f6 01       	movw	r30, r12
    4e5a:	97 fc       	sbrc	r9, 7
    4e5c:	85 91       	lpm	r24, Z+
    4e5e:	97 fe       	sbrs	r9, 7
    4e60:	81 91       	ld	r24, Z+
    4e62:	6f 01       	movw	r12, r30
    4e64:	b7 01       	movw	r22, r14
    4e66:	90 e0       	ldi	r25, 0x00	; 0
    4e68:	0e 94 87 7a 	call	0xf50e	; 0xf50e <fputc>
    4e6c:	51 10       	cpse	r5, r1
    4e6e:	5a 94       	dec	r5
    4e70:	01 50       	subi	r16, 0x01	; 1
    4e72:	11 09       	sbc	r17, r1
    4e74:	01 15       	cp	r16, r1
    4e76:	11 05       	cpc	r17, r1
    4e78:	79 f7       	brne	.-34     	; 0x4e58 <vfprintf+0x4a0>
    4e7a:	f7 c0       	rjmp	.+494    	; 0x506a <vfprintf+0x6b2>
    4e7c:	84 36       	cpi	r24, 0x64	; 100
    4e7e:	11 f0       	breq	.+4      	; 0x4e84 <vfprintf+0x4cc>
    4e80:	89 36       	cpi	r24, 0x69	; 105
    4e82:	61 f5       	brne	.+88     	; 0x4edc <vfprintf+0x524>
    4e84:	56 01       	movw	r10, r12
    4e86:	97 fe       	sbrs	r9, 7
    4e88:	09 c0       	rjmp	.+18     	; 0x4e9c <vfprintf+0x4e4>
    4e8a:	24 e0       	ldi	r18, 0x04	; 4
    4e8c:	a2 0e       	add	r10, r18
    4e8e:	b1 1c       	adc	r11, r1
    4e90:	f6 01       	movw	r30, r12
    4e92:	60 81       	ld	r22, Z
    4e94:	71 81       	ldd	r23, Z+1	; 0x01
    4e96:	82 81       	ldd	r24, Z+2	; 0x02
    4e98:	93 81       	ldd	r25, Z+3	; 0x03
    4e9a:	0a c0       	rjmp	.+20     	; 0x4eb0 <vfprintf+0x4f8>
    4e9c:	f2 e0       	ldi	r31, 0x02	; 2
    4e9e:	af 0e       	add	r10, r31
    4ea0:	b1 1c       	adc	r11, r1
    4ea2:	f6 01       	movw	r30, r12
    4ea4:	60 81       	ld	r22, Z
    4ea6:	71 81       	ldd	r23, Z+1	; 0x01
    4ea8:	07 2e       	mov	r0, r23
    4eaa:	00 0c       	add	r0, r0
    4eac:	88 0b       	sbc	r24, r24
    4eae:	99 0b       	sbc	r25, r25
    4eb0:	f9 2d       	mov	r31, r9
    4eb2:	ff 76       	andi	r31, 0x6F	; 111
    4eb4:	9f 2e       	mov	r9, r31
    4eb6:	97 ff       	sbrs	r25, 7
    4eb8:	09 c0       	rjmp	.+18     	; 0x4ecc <vfprintf+0x514>
    4eba:	90 95       	com	r25
    4ebc:	80 95       	com	r24
    4ebe:	70 95       	com	r23
    4ec0:	61 95       	neg	r22
    4ec2:	7f 4f       	sbci	r23, 0xFF	; 255
    4ec4:	8f 4f       	sbci	r24, 0xFF	; 255
    4ec6:	9f 4f       	sbci	r25, 0xFF	; 255
    4ec8:	f0 68       	ori	r31, 0x80	; 128
    4eca:	9f 2e       	mov	r9, r31
    4ecc:	2a e0       	ldi	r18, 0x0A	; 10
    4ece:	30 e0       	ldi	r19, 0x00	; 0
    4ed0:	a3 01       	movw	r20, r6
    4ed2:	0e 94 21 f1 	call	0x1e242	; 0x1e242 <__ultoa_invert>
    4ed6:	c8 2e       	mov	r12, r24
    4ed8:	c6 18       	sub	r12, r6
    4eda:	3f c0       	rjmp	.+126    	; 0x4f5a <vfprintf+0x5a2>
    4edc:	09 2d       	mov	r16, r9
    4ede:	85 37       	cpi	r24, 0x75	; 117
    4ee0:	21 f4       	brne	.+8      	; 0x4eea <vfprintf+0x532>
    4ee2:	0f 7e       	andi	r16, 0xEF	; 239
    4ee4:	2a e0       	ldi	r18, 0x0A	; 10
    4ee6:	30 e0       	ldi	r19, 0x00	; 0
    4ee8:	1d c0       	rjmp	.+58     	; 0x4f24 <vfprintf+0x56c>
    4eea:	09 7f       	andi	r16, 0xF9	; 249
    4eec:	8f 36       	cpi	r24, 0x6F	; 111
    4eee:	91 f0       	breq	.+36     	; 0x4f14 <vfprintf+0x55c>
    4ef0:	18 f4       	brcc	.+6      	; 0x4ef8 <vfprintf+0x540>
    4ef2:	88 35       	cpi	r24, 0x58	; 88
    4ef4:	59 f0       	breq	.+22     	; 0x4f0c <vfprintf+0x554>
    4ef6:	c3 c0       	rjmp	.+390    	; 0x507e <vfprintf+0x6c6>
    4ef8:	80 37       	cpi	r24, 0x70	; 112
    4efa:	19 f0       	breq	.+6      	; 0x4f02 <vfprintf+0x54a>
    4efc:	88 37       	cpi	r24, 0x78	; 120
    4efe:	11 f0       	breq	.+4      	; 0x4f04 <vfprintf+0x54c>
    4f00:	be c0       	rjmp	.+380    	; 0x507e <vfprintf+0x6c6>
    4f02:	00 61       	ori	r16, 0x10	; 16
    4f04:	04 ff       	sbrs	r16, 4
    4f06:	09 c0       	rjmp	.+18     	; 0x4f1a <vfprintf+0x562>
    4f08:	04 60       	ori	r16, 0x04	; 4
    4f0a:	07 c0       	rjmp	.+14     	; 0x4f1a <vfprintf+0x562>
    4f0c:	94 fe       	sbrs	r9, 4
    4f0e:	08 c0       	rjmp	.+16     	; 0x4f20 <vfprintf+0x568>
    4f10:	06 60       	ori	r16, 0x06	; 6
    4f12:	06 c0       	rjmp	.+12     	; 0x4f20 <vfprintf+0x568>
    4f14:	28 e0       	ldi	r18, 0x08	; 8
    4f16:	30 e0       	ldi	r19, 0x00	; 0
    4f18:	05 c0       	rjmp	.+10     	; 0x4f24 <vfprintf+0x56c>
    4f1a:	20 e1       	ldi	r18, 0x10	; 16
    4f1c:	30 e0       	ldi	r19, 0x00	; 0
    4f1e:	02 c0       	rjmp	.+4      	; 0x4f24 <vfprintf+0x56c>
    4f20:	20 e1       	ldi	r18, 0x10	; 16
    4f22:	32 e0       	ldi	r19, 0x02	; 2
    4f24:	56 01       	movw	r10, r12
    4f26:	07 ff       	sbrs	r16, 7
    4f28:	09 c0       	rjmp	.+18     	; 0x4f3c <vfprintf+0x584>
    4f2a:	84 e0       	ldi	r24, 0x04	; 4
    4f2c:	a8 0e       	add	r10, r24
    4f2e:	b1 1c       	adc	r11, r1
    4f30:	f6 01       	movw	r30, r12
    4f32:	60 81       	ld	r22, Z
    4f34:	71 81       	ldd	r23, Z+1	; 0x01
    4f36:	82 81       	ldd	r24, Z+2	; 0x02
    4f38:	93 81       	ldd	r25, Z+3	; 0x03
    4f3a:	08 c0       	rjmp	.+16     	; 0x4f4c <vfprintf+0x594>
    4f3c:	f2 e0       	ldi	r31, 0x02	; 2
    4f3e:	af 0e       	add	r10, r31
    4f40:	b1 1c       	adc	r11, r1
    4f42:	f6 01       	movw	r30, r12
    4f44:	60 81       	ld	r22, Z
    4f46:	71 81       	ldd	r23, Z+1	; 0x01
    4f48:	80 e0       	ldi	r24, 0x00	; 0
    4f4a:	90 e0       	ldi	r25, 0x00	; 0
    4f4c:	a3 01       	movw	r20, r6
    4f4e:	0e 94 21 f1 	call	0x1e242	; 0x1e242 <__ultoa_invert>
    4f52:	c8 2e       	mov	r12, r24
    4f54:	c6 18       	sub	r12, r6
    4f56:	0f 77       	andi	r16, 0x7F	; 127
    4f58:	90 2e       	mov	r9, r16
    4f5a:	96 fe       	sbrs	r9, 6
    4f5c:	0b c0       	rjmp	.+22     	; 0x4f74 <vfprintf+0x5bc>
    4f5e:	09 2d       	mov	r16, r9
    4f60:	0e 7f       	andi	r16, 0xFE	; 254
    4f62:	c1 16       	cp	r12, r17
    4f64:	50 f4       	brcc	.+20     	; 0x4f7a <vfprintf+0x5c2>
    4f66:	94 fe       	sbrs	r9, 4
    4f68:	0a c0       	rjmp	.+20     	; 0x4f7e <vfprintf+0x5c6>
    4f6a:	92 fc       	sbrc	r9, 2
    4f6c:	08 c0       	rjmp	.+16     	; 0x4f7e <vfprintf+0x5c6>
    4f6e:	09 2d       	mov	r16, r9
    4f70:	0e 7e       	andi	r16, 0xEE	; 238
    4f72:	05 c0       	rjmp	.+10     	; 0x4f7e <vfprintf+0x5c6>
    4f74:	dc 2c       	mov	r13, r12
    4f76:	09 2d       	mov	r16, r9
    4f78:	03 c0       	rjmp	.+6      	; 0x4f80 <vfprintf+0x5c8>
    4f7a:	dc 2c       	mov	r13, r12
    4f7c:	01 c0       	rjmp	.+2      	; 0x4f80 <vfprintf+0x5c8>
    4f7e:	d1 2e       	mov	r13, r17
    4f80:	04 ff       	sbrs	r16, 4
    4f82:	0d c0       	rjmp	.+26     	; 0x4f9e <vfprintf+0x5e6>
    4f84:	fe 01       	movw	r30, r28
    4f86:	ec 0d       	add	r30, r12
    4f88:	f1 1d       	adc	r31, r1
    4f8a:	80 81       	ld	r24, Z
    4f8c:	80 33       	cpi	r24, 0x30	; 48
    4f8e:	11 f4       	brne	.+4      	; 0x4f94 <vfprintf+0x5dc>
    4f90:	09 7e       	andi	r16, 0xE9	; 233
    4f92:	09 c0       	rjmp	.+18     	; 0x4fa6 <vfprintf+0x5ee>
    4f94:	02 ff       	sbrs	r16, 2
    4f96:	06 c0       	rjmp	.+12     	; 0x4fa4 <vfprintf+0x5ec>
    4f98:	d3 94       	inc	r13
    4f9a:	d3 94       	inc	r13
    4f9c:	04 c0       	rjmp	.+8      	; 0x4fa6 <vfprintf+0x5ee>
    4f9e:	80 2f       	mov	r24, r16
    4fa0:	86 78       	andi	r24, 0x86	; 134
    4fa2:	09 f0       	breq	.+2      	; 0x4fa6 <vfprintf+0x5ee>
    4fa4:	d3 94       	inc	r13
    4fa6:	03 fd       	sbrc	r16, 3
    4fa8:	11 c0       	rjmp	.+34     	; 0x4fcc <vfprintf+0x614>
    4faa:	00 ff       	sbrs	r16, 0
    4fac:	06 c0       	rjmp	.+12     	; 0x4fba <vfprintf+0x602>
    4fae:	1c 2d       	mov	r17, r12
    4fb0:	d5 14       	cp	r13, r5
    4fb2:	80 f4       	brcc	.+32     	; 0x4fd4 <vfprintf+0x61c>
    4fb4:	15 0d       	add	r17, r5
    4fb6:	1d 19       	sub	r17, r13
    4fb8:	0d c0       	rjmp	.+26     	; 0x4fd4 <vfprintf+0x61c>
    4fba:	d5 14       	cp	r13, r5
    4fbc:	58 f4       	brcc	.+22     	; 0x4fd4 <vfprintf+0x61c>
    4fbe:	b7 01       	movw	r22, r14
    4fc0:	80 e2       	ldi	r24, 0x20	; 32
    4fc2:	90 e0       	ldi	r25, 0x00	; 0
    4fc4:	0e 94 87 7a 	call	0xf50e	; 0xf50e <fputc>
    4fc8:	d3 94       	inc	r13
    4fca:	f7 cf       	rjmp	.-18     	; 0x4fba <vfprintf+0x602>
    4fcc:	d5 14       	cp	r13, r5
    4fce:	10 f4       	brcc	.+4      	; 0x4fd4 <vfprintf+0x61c>
    4fd0:	5d 18       	sub	r5, r13
    4fd2:	01 c0       	rjmp	.+2      	; 0x4fd6 <vfprintf+0x61e>
    4fd4:	51 2c       	mov	r5, r1
    4fd6:	04 ff       	sbrs	r16, 4
    4fd8:	10 c0       	rjmp	.+32     	; 0x4ffa <vfprintf+0x642>
    4fda:	b7 01       	movw	r22, r14
    4fdc:	80 e3       	ldi	r24, 0x30	; 48
    4fde:	90 e0       	ldi	r25, 0x00	; 0
    4fe0:	0e 94 87 7a 	call	0xf50e	; 0xf50e <fputc>
    4fe4:	02 ff       	sbrs	r16, 2
    4fe6:	17 c0       	rjmp	.+46     	; 0x5016 <vfprintf+0x65e>
    4fe8:	01 fd       	sbrc	r16, 1
    4fea:	03 c0       	rjmp	.+6      	; 0x4ff2 <vfprintf+0x63a>
    4fec:	88 e7       	ldi	r24, 0x78	; 120
    4fee:	90 e0       	ldi	r25, 0x00	; 0
    4ff0:	02 c0       	rjmp	.+4      	; 0x4ff6 <vfprintf+0x63e>
    4ff2:	88 e5       	ldi	r24, 0x58	; 88
    4ff4:	90 e0       	ldi	r25, 0x00	; 0
    4ff6:	b7 01       	movw	r22, r14
    4ff8:	0c c0       	rjmp	.+24     	; 0x5012 <vfprintf+0x65a>
    4ffa:	80 2f       	mov	r24, r16
    4ffc:	86 78       	andi	r24, 0x86	; 134
    4ffe:	59 f0       	breq	.+22     	; 0x5016 <vfprintf+0x65e>
    5000:	01 ff       	sbrs	r16, 1
    5002:	02 c0       	rjmp	.+4      	; 0x5008 <vfprintf+0x650>
    5004:	8b e2       	ldi	r24, 0x2B	; 43
    5006:	01 c0       	rjmp	.+2      	; 0x500a <vfprintf+0x652>
    5008:	80 e2       	ldi	r24, 0x20	; 32
    500a:	07 fd       	sbrc	r16, 7
    500c:	8d e2       	ldi	r24, 0x2D	; 45
    500e:	b7 01       	movw	r22, r14
    5010:	90 e0       	ldi	r25, 0x00	; 0
    5012:	0e 94 87 7a 	call	0xf50e	; 0xf50e <fputc>
    5016:	c1 16       	cp	r12, r17
    5018:	38 f4       	brcc	.+14     	; 0x5028 <vfprintf+0x670>
    501a:	b7 01       	movw	r22, r14
    501c:	80 e3       	ldi	r24, 0x30	; 48
    501e:	90 e0       	ldi	r25, 0x00	; 0
    5020:	0e 94 87 7a 	call	0xf50e	; 0xf50e <fputc>
    5024:	11 50       	subi	r17, 0x01	; 1
    5026:	f7 cf       	rjmp	.-18     	; 0x5016 <vfprintf+0x65e>
    5028:	ca 94       	dec	r12
    502a:	f3 01       	movw	r30, r6
    502c:	ec 0d       	add	r30, r12
    502e:	f1 1d       	adc	r31, r1
    5030:	80 81       	ld	r24, Z
    5032:	b7 01       	movw	r22, r14
    5034:	90 e0       	ldi	r25, 0x00	; 0
    5036:	0e 94 87 7a 	call	0xf50e	; 0xf50e <fputc>
    503a:	c1 10       	cpse	r12, r1
    503c:	f5 cf       	rjmp	.-22     	; 0x5028 <vfprintf+0x670>
    503e:	15 c0       	rjmp	.+42     	; 0x506a <vfprintf+0x6b2>
    5040:	f4 e0       	ldi	r31, 0x04	; 4
    5042:	f5 15       	cp	r31, r5
    5044:	60 f5       	brcc	.+88     	; 0x509e <vfprintf+0x6e6>
    5046:	84 e0       	ldi	r24, 0x04	; 4
    5048:	58 1a       	sub	r5, r24
    504a:	93 fe       	sbrs	r9, 3
    504c:	1f c0       	rjmp	.+62     	; 0x508c <vfprintf+0x6d4>
    504e:	01 11       	cpse	r16, r1
    5050:	27 c0       	rjmp	.+78     	; 0x50a0 <vfprintf+0x6e8>
    5052:	2c 85       	ldd	r18, Y+12	; 0x0c
    5054:	23 ff       	sbrs	r18, 3
    5056:	2a c0       	rjmp	.+84     	; 0x50ac <vfprintf+0x6f4>
    5058:	00 ed       	ldi	r16, 0xD0	; 208
    505a:	11 e0       	ldi	r17, 0x01	; 1
    505c:	39 2d       	mov	r19, r9
    505e:	30 71       	andi	r19, 0x10	; 16
    5060:	93 2e       	mov	r9, r19
    5062:	f8 01       	movw	r30, r16
    5064:	84 91       	lpm	r24, Z
    5066:	81 11       	cpse	r24, r1
    5068:	24 c0       	rjmp	.+72     	; 0x50b2 <vfprintf+0x6fa>
    506a:	55 20       	and	r5, r5
    506c:	09 f4       	brne	.+2      	; 0x5070 <vfprintf+0x6b8>
    506e:	e4 cc       	rjmp	.-1592   	; 0x4a38 <vfprintf+0x80>
    5070:	b7 01       	movw	r22, r14
    5072:	80 e2       	ldi	r24, 0x20	; 32
    5074:	90 e0       	ldi	r25, 0x00	; 0
    5076:	0e 94 87 7a 	call	0xf50e	; 0xf50e <fputc>
    507a:	5a 94       	dec	r5
    507c:	f6 cf       	rjmp	.-20     	; 0x506a <vfprintf+0x6b2>
    507e:	f7 01       	movw	r30, r14
    5080:	86 81       	ldd	r24, Z+6	; 0x06
    5082:	97 81       	ldd	r25, Z+7	; 0x07
    5084:	26 c0       	rjmp	.+76     	; 0x50d2 <vfprintf+0x71a>
    5086:	8f ef       	ldi	r24, 0xFF	; 255
    5088:	9f ef       	ldi	r25, 0xFF	; 255
    508a:	23 c0       	rjmp	.+70     	; 0x50d2 <vfprintf+0x71a>
    508c:	b7 01       	movw	r22, r14
    508e:	80 e2       	ldi	r24, 0x20	; 32
    5090:	90 e0       	ldi	r25, 0x00	; 0
    5092:	0e 94 87 7a 	call	0xf50e	; 0xf50e <fputc>
    5096:	5a 94       	dec	r5
    5098:	51 10       	cpse	r5, r1
    509a:	f8 cf       	rjmp	.-16     	; 0x508c <vfprintf+0x6d4>
    509c:	d8 cf       	rjmp	.-80     	; 0x504e <vfprintf+0x696>
    509e:	51 2c       	mov	r5, r1
    50a0:	b7 01       	movw	r22, r14
    50a2:	80 2f       	mov	r24, r16
    50a4:	90 e0       	ldi	r25, 0x00	; 0
    50a6:	0e 94 87 7a 	call	0xf50e	; 0xf50e <fputc>
    50aa:	d3 cf       	rjmp	.-90     	; 0x5052 <vfprintf+0x69a>
    50ac:	04 ed       	ldi	r16, 0xD4	; 212
    50ae:	11 e0       	ldi	r17, 0x01	; 1
    50b0:	d5 cf       	rjmp	.-86     	; 0x505c <vfprintf+0x6a4>
    50b2:	91 10       	cpse	r9, r1
    50b4:	80 52       	subi	r24, 0x20	; 32
    50b6:	b7 01       	movw	r22, r14
    50b8:	90 e0       	ldi	r25, 0x00	; 0
    50ba:	0e 94 87 7a 	call	0xf50e	; 0xf50e <fputc>
    50be:	0f 5f       	subi	r16, 0xFF	; 255
    50c0:	1f 4f       	sbci	r17, 0xFF	; 255
    50c2:	cf cf       	rjmp	.-98     	; 0x5062 <vfprintf+0x6aa>
    50c4:	23 e0       	ldi	r18, 0x03	; 3
    50c6:	25 15       	cp	r18, r5
    50c8:	10 f4       	brcc	.+4      	; 0x50ce <vfprintf+0x716>
    50ca:	83 e0       	ldi	r24, 0x03	; 3
    50cc:	bd cf       	rjmp	.-134    	; 0x5048 <vfprintf+0x690>
    50ce:	51 2c       	mov	r5, r1
    50d0:	c0 cf       	rjmp	.-128    	; 0x5052 <vfprintf+0x69a>
    50d2:	60 96       	adiw	r28, 0x10	; 16
    50d4:	0f b6       	in	r0, 0x3f	; 63
    50d6:	f8 94       	cli
    50d8:	de bf       	out	0x3e, r29	; 62
    50da:	0f be       	out	0x3f, r0	; 63
    50dc:	cd bf       	out	0x3d, r28	; 61
    50de:	df 91       	pop	r29
    50e0:	cf 91       	pop	r28
    50e2:	1f 91       	pop	r17
    50e4:	0f 91       	pop	r16
    50e6:	ff 90       	pop	r15
    50e8:	ef 90       	pop	r14
    50ea:	df 90       	pop	r13
    50ec:	cf 90       	pop	r12
    50ee:	bf 90       	pop	r11
    50f0:	af 90       	pop	r10
    50f2:	9f 90       	pop	r9
    50f4:	8f 90       	pop	r8
    50f6:	7f 90       	pop	r7
    50f8:	6f 90       	pop	r6
    50fa:	5f 90       	pop	r5
    50fc:	4f 90       	pop	r4
    50fe:	3f 90       	pop	r3
    5100:	2f 90       	pop	r2
    5102:	08 95       	ret

00005104 <chip_select>:
/// @brief SPI CS pin status
/// return CS GPIO pin number or 0xff
uint8_t spi_chip_select_status()
{
    return(_cs_pin);
}
    5104:	e8 2f       	mov	r30, r24
    5106:	e6 95       	lsr	r30
    5108:	e6 95       	lsr	r30
    510a:	e6 95       	lsr	r30
    510c:	93 e0       	ldi	r25, 0x03	; 3
    510e:	e9 9f       	mul	r30, r25
    5110:	f0 01       	movw	r30, r0
    5112:	11 24       	eor	r1, r1
    5114:	32 a1       	ldd	r19, Z+34	; 0x22
    5116:	28 2f       	mov	r18, r24
    5118:	27 70       	andi	r18, 0x07	; 7
    511a:	81 e0       	ldi	r24, 0x01	; 1
    511c:	90 e0       	ldi	r25, 0x00	; 0
    511e:	01 c0       	rjmp	.+2      	; 0x5122 <chip_select+0x1e>
    5120:	88 0f       	add	r24, r24
    5122:	2a 95       	dec	r18
    5124:	ea f7       	brpl	.-6      	; 0x5120 <chip_select+0x1c>
    5126:	98 2f       	mov	r25, r24
    5128:	90 95       	com	r25
    512a:	93 23       	and	r25, r19
    512c:	92 a3       	std	Z+34, r25	; 0x22
    512e:	91 a1       	ldd	r25, Z+33	; 0x21
    5130:	89 2b       	or	r24, r25
    5132:	81 a3       	std	Z+33, r24	; 0x21
    5134:	08 95       	ret

00005136 <chip_deselect>:
    5136:	e8 2f       	mov	r30, r24
    5138:	e6 95       	lsr	r30
    513a:	e6 95       	lsr	r30
    513c:	e6 95       	lsr	r30
    513e:	93 e0       	ldi	r25, 0x03	; 3
    5140:	e9 9f       	mul	r30, r25
    5142:	f0 01       	movw	r30, r0
    5144:	11 24       	eor	r1, r1
    5146:	32 a1       	ldd	r19, Z+34	; 0x22
    5148:	28 2f       	mov	r18, r24
    514a:	27 70       	andi	r18, 0x07	; 7
    514c:	81 e0       	ldi	r24, 0x01	; 1
    514e:	90 e0       	ldi	r25, 0x00	; 0
    5150:	01 c0       	rjmp	.+2      	; 0x5154 <chip_deselect+0x1e>
    5152:	88 0f       	add	r24, r24
    5154:	2a 95       	dec	r18
    5156:	ea f7       	brpl	.-6      	; 0x5152 <chip_deselect+0x1c>
    5158:	93 2f       	mov	r25, r19
    515a:	98 2b       	or	r25, r24
    515c:	92 a3       	std	Z+34, r25	; 0x22
    515e:	91 a1       	ldd	r25, Z+33	; 0x21
    5160:	89 2b       	or	r24, r25
    5162:	81 a3       	std	Z+33, r24	; 0x21
    5164:	08 95       	ret

00005166 <chip_select_init>:
    5166:	e7 cf       	rjmp	.-50     	; 0x5136 <chip_deselect>
    5168:	08 95       	ret

0000516a <spi_end>:
    516a:	cf 93       	push	r28
    516c:	c8 2f       	mov	r28, r24
    516e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_cs_pin>
    5172:	8c 17       	cp	r24, r28
    5174:	a9 f0       	breq	.+42     	; 0x51a0 <spi_end+0x36>
    5176:	8f 3f       	cpi	r24, 0xFF	; 255
    5178:	99 f0       	breq	.+38     	; 0x51a0 <spi_end+0x36>
    517a:	1f 92       	push	r1
    517c:	cf 93       	push	r28
    517e:	1f 92       	push	r1
    5180:	8f 93       	push	r24
    5182:	82 ed       	ldi	r24, 0xD2	; 210
    5184:	92 e0       	ldi	r25, 0x02	; 2
    5186:	1f 92       	push	r1
    5188:	9f 93       	push	r25
    518a:	8f 93       	push	r24
    518c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    5190:	8d b7       	in	r24, 0x3d	; 61
    5192:	9e b7       	in	r25, 0x3e	; 62
    5194:	07 96       	adiw	r24, 0x07	; 7
    5196:	0f b6       	in	r0, 0x3f	; 63
    5198:	f8 94       	cli
    519a:	9e bf       	out	0x3e, r25	; 62
    519c:	0f be       	out	0x3f, r0	; 63
    519e:	8d bf       	out	0x3d, r24	; 61
    51a0:	8c 2f       	mov	r24, r28
    51a2:	c9 df       	rcall	.-110    	; 0x5136 <chip_deselect>
    51a4:	8f ef       	ldi	r24, 0xFF	; 255
    51a6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_cs_pin>
    51aa:	cf 91       	pop	r28
    51ac:	08 95       	ret

000051ae <spi_TX_buffer>:
/// @brief SPI write buffer
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void spi_TX_buffer(const uint8_t *data, int count)
{
    51ae:	7a c4       	rjmp	.+2292   	; 0x5aa4 <SPI0_TX>
    51b0:	08 95       	ret

000051b2 <spi_RX_buffer>:
    51b2:	a2 c4       	rjmp	.+2372   	; 0x5af8 <SPI0_RX>
    51b4:	08 95       	ret

000051b6 <spi_TX>:
    51b6:	a1 e0       	ldi	r26, 0x01	; 1
    51b8:	b0 e0       	ldi	r27, 0x00	; 0
    51ba:	e1 ee       	ldi	r30, 0xE1	; 225
    51bc:	f8 e2       	ldi	r31, 0x28	; 40
    51be:	0c 94 44 ec 	jmp	0x1d888	; 0x1d888 <__prologue_saves__+0x20>
    51c2:	89 83       	std	Y+1, r24	; 0x01
    51c4:	61 e0       	ldi	r22, 0x01	; 1
    51c6:	70 e0       	ldi	r23, 0x00	; 0
    51c8:	ce 01       	movw	r24, r28
    51ca:	01 96       	adiw	r24, 0x01	; 1
    51cc:	6b d4       	rcall	.+2262   	; 0x5aa4 <SPI0_TX>
    51ce:	21 96       	adiw	r28, 0x01	; 1
    51d0:	e2 e0       	ldi	r30, 0x02	; 2
    51d2:	0c 94 60 ec 	jmp	0x1d8c0	; 0x1d8c0 <__epilogue_restores__+0x20>

000051d6 <spi_init>:
    51d6:	cf 92       	push	r12
    51d8:	df 92       	push	r13
    51da:	ef 92       	push	r14
    51dc:	ff 92       	push	r15
    51de:	6b 01       	movw	r12, r22
    51e0:	7c 01       	movw	r14, r24
    51e2:	84 2f       	mov	r24, r20
    51e4:	a8 df       	rcall	.-176    	; 0x5136 <chip_deselect>
    51e6:	8f ef       	ldi	r24, 0xFF	; 255
    51e8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_cs_pin>
    51ec:	c7 01       	movw	r24, r14
    51ee:	b6 01       	movw	r22, r12
    51f0:	34 d4       	rcall	.+2152   	; 0x5a5a <SPI0_Init>
    51f2:	80 e0       	ldi	r24, 0x00	; 0
    51f4:	90 e0       	ldi	r25, 0x00	; 0
    51f6:	f5 d3       	rcall	.+2026   	; 0x59e2 <SPI0_Mode>
    51f8:	8f ef       	ldi	r24, 0xFF	; 255
    51fa:	dd df       	rcall	.-70     	; 0x51b6 <spi_TX>
    51fc:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
    5200:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
    5204:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__data_start+0x2>
    5208:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__data_start+0x3>
    520c:	ff 90       	pop	r15
    520e:	ef 90       	pop	r14
    5210:	df 90       	pop	r13
    5212:	cf 90       	pop	r12
    5214:	08 95       	ret

00005216 <spi_begin>:
    5216:	cf 92       	push	r12
    5218:	df 92       	push	r13
    521a:	ef 92       	push	r14
    521c:	ff 92       	push	r15
    521e:	cf 93       	push	r28
    5220:	df 93       	push	r29
    5222:	6b 01       	movw	r12, r22
    5224:	7c 01       	movw	r14, r24
    5226:	ea 01       	movw	r28, r20
    5228:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_cs_pin>
    522c:	8f 3f       	cpi	r24, 0xFF	; 255
    522e:	99 f0       	breq	.+38     	; 0x5256 <spi_begin+0x40>
    5230:	df 93       	push	r29
    5232:	4f 93       	push	r20
    5234:	1f 92       	push	r1
    5236:	8f 93       	push	r24
    5238:	80 ef       	ldi	r24, 0xF0	; 240
    523a:	92 e0       	ldi	r25, 0x02	; 2
    523c:	1f 92       	push	r1
    523e:	9f 93       	push	r25
    5240:	8f 93       	push	r24
    5242:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    5246:	8d b7       	in	r24, 0x3d	; 61
    5248:	9e b7       	in	r25, 0x3e	; 62
    524a:	07 96       	adiw	r24, 0x07	; 7
    524c:	0f b6       	in	r0, 0x3f	; 63
    524e:	f8 94       	cli
    5250:	9e bf       	out	0x3e, r25	; 62
    5252:	0f be       	out	0x3f, r0	; 63
    5254:	8d bf       	out	0x3d, r24	; 61
    5256:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    525a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    525e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
    5262:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
    5266:	8c 15       	cp	r24, r12
    5268:	9d 05       	cpc	r25, r13
    526a:	ae 05       	cpc	r26, r14
    526c:	bf 05       	cpc	r27, r15
    526e:	21 f0       	breq	.+8      	; 0x5278 <spi_begin+0x62>
    5270:	ae 01       	movw	r20, r28
    5272:	c7 01       	movw	r24, r14
    5274:	b6 01       	movw	r22, r12
    5276:	af df       	rcall	.-162    	; 0x51d6 <spi_init>
    5278:	8c 2f       	mov	r24, r28
    527a:	44 df       	rcall	.-376    	; 0x5104 <chip_select>
    527c:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <_cs_pin>
    5280:	df 91       	pop	r29
    5282:	cf 91       	pop	r28
    5284:	ff 90       	pop	r15
    5286:	ef 90       	pop	r14
    5288:	df 90       	pop	r13
    528a:	cf 90       	pop	r12
    528c:	08 95       	ret

0000528e <spi_TXRX>:
    528e:	a1 e0       	ldi	r26, 0x01	; 1
    5290:	b0 e0       	ldi	r27, 0x00	; 0
    5292:	ed e4       	ldi	r30, 0x4D	; 77
    5294:	f9 e2       	ldi	r31, 0x29	; 41
    5296:	0c 94 44 ec 	jmp	0x1d888	; 0x1d888 <__prologue_saves__+0x20>
    529a:	89 83       	std	Y+1, r24	; 0x01
    529c:	61 e0       	ldi	r22, 0x01	; 1
    529e:	70 e0       	ldi	r23, 0x00	; 0
    52a0:	ce 01       	movw	r24, r28
    52a2:	01 96       	adiw	r24, 0x01	; 1
    52a4:	13 d4       	rcall	.+2086   	; 0x5acc <SPI0_TXRX>
    52a6:	89 81       	ldd	r24, Y+1	; 0x01
    52a8:	21 96       	adiw	r28, 0x01	; 1
    52aa:	e2 e0       	ldi	r30, 0x02	; 2
    52ac:	0c 94 60 ec 	jmp	0x1d8c0	; 0x1d8c0 <__epilogue_restores__+0x20>

000052b0 <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    52b0:	a2 e0       	ldi	r26, 0x02	; 2
    52b2:	b0 e0       	ldi	r27, 0x00	; 0
    52b4:	ee e5       	ldi	r30, 0x5E	; 94
    52b6:	f9 e2       	ldi	r31, 0x29	; 41
    52b8:	0c 94 44 ec 	jmp	0x1d888	; 0x1d888 <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    52bc:	20 91 87 1f 	lds	r18, 0x1F87	; 0x801f87 <__brkval>
    52c0:	30 91 88 1f 	lds	r19, 0x1F88	; 0x801f88 <__brkval+0x1>
    52c4:	21 15       	cp	r18, r1
    52c6:	31 05       	cpc	r19, r1
    52c8:	11 f4       	brne	.+4      	; 0x52ce <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    52ca:	2b e8       	ldi	r18, 0x8B	; 139
    52cc:	3f e1       	ldi	r19, 0x1F	; 31

    ret = (uint16_t) &v - top;
    return ( ret );
}
    52ce:	ce 01       	movw	r24, r28
    52d0:	01 96       	adiw	r24, 0x01	; 1
    52d2:	82 1b       	sub	r24, r18
    52d4:	93 0b       	sbc	r25, r19
    52d6:	22 96       	adiw	r28, 0x02	; 2
    52d8:	e2 e0       	ldi	r30, 0x02	; 2
    52da:	0c 94 60 ec 	jmp	0x1d8c0	; 0x1d8c0 <__epilogue_restores__+0x20>

000052de <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    52de:	a2 e0       	ldi	r26, 0x02	; 2
    52e0:	b0 e0       	ldi	r27, 0x00	; 0
    52e2:	e5 e7       	ldi	r30, 0x75	; 117
    52e4:	f9 e2       	ldi	r31, 0x29	; 41
    52e6:	0c 94 44 ec 	jmp	0x1d888	; 0x1d888 <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    52ea:	e2 df       	rcall	.-60     	; 0x52b0 <freeRam>
    52ec:	89 83       	std	Y+1, r24	; 0x01

    printf("Free Ram:%u\n", ram);
    52ee:	9a 83       	std	Y+2, r25	; 0x02
    52f0:	9f 93       	push	r25
    52f2:	8f 93       	push	r24
    52f4:	87 e1       	ldi	r24, 0x17	; 23
    52f6:	94 e0       	ldi	r25, 0x04	; 4
    52f8:	1f 92       	push	r1
    52fa:	9f 93       	push	r25
    52fc:	8f 93       	push	r24
    52fe:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    5302:	8f ef       	ldi	r24, 0xFF	; 255
    5304:	90 e4       	ldi	r25, 0x40	; 64
    5306:	9f 93       	push	r25
    5308:	8f 93       	push	r24
    530a:	84 e0       	ldi	r24, 0x04	; 4
    530c:	94 e0       	ldi	r25, 0x04	; 4
    530e:	1f 92       	push	r1
    5310:	9f 93       	push	r25
    5312:	8f 93       	push	r24
    5314:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    5318:	ce 01       	movw	r24, r28
    531a:	01 96       	adiw	r24, 0x01	; 1
    531c:	9f 93       	push	r25
    531e:	8f 93       	push	r24
    5320:	81 ef       	ldi	r24, 0xF1	; 241
    5322:	93 e0       	ldi	r25, 0x03	; 3
    5324:	1f 92       	push	r1
    5326:	9f 93       	push	r25
    5328:	8f 93       	push	r24
    532a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    532e:	8b e8       	ldi	r24, 0x8B	; 139
    5330:	9f e1       	ldi	r25, 0x1F	; 31
    5332:	9f 93       	push	r25
    5334:	8f 93       	push	r24
    5336:	88 eb       	ldi	r24, 0xB8	; 184
    5338:	97 e1       	ldi	r25, 0x17	; 23
    533a:	9f 93       	push	r25
    533c:	8f 93       	push	r24
    533e:	83 ed       	ldi	r24, 0xD3	; 211
    5340:	93 e0       	ldi	r25, 0x03	; 3
    5342:	1f 92       	push	r1
    5344:	9f 93       	push	r25
    5346:	8f 93       	push	r24
    5348:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    534c:	88 eb       	ldi	r24, 0xB8	; 184
    534e:	97 e1       	ldi	r25, 0x17	; 23
    5350:	9f 93       	push	r25
    5352:	8f 93       	push	r24
    5354:	80 e0       	ldi	r24, 0x00	; 0
    5356:	91 e0       	ldi	r25, 0x01	; 1
    5358:	9f 93       	push	r25
    535a:	8f 93       	push	r24
    535c:	85 eb       	ldi	r24, 0xB5	; 181
    535e:	93 e0       	ldi	r25, 0x03	; 3
    5360:	1f 92       	push	r1
    5362:	9f 93       	push	r25
    5364:	8f 93       	push	r24
    5366:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    536a:	80 e0       	ldi	r24, 0x00	; 0
    536c:	90 e0       	ldi	r25, 0x00	; 0
    536e:	9f 93       	push	r25
    5370:	8f 93       	push	r24
    5372:	8b e8       	ldi	r24, 0x8B	; 139
    5374:	9f e1       	ldi	r25, 0x1F	; 31
    5376:	9f 93       	push	r25
    5378:	8f 93       	push	r24
    537a:	87 e9       	ldi	r24, 0x97	; 151
    537c:	93 e0       	ldi	r25, 0x03	; 3
    537e:	1f 92       	push	r1
    5380:	9f 93       	push	r25
    5382:	8f 93       	push	r24
    5384:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    5388:	0f b6       	in	r0, 0x3f	; 63
    538a:	f8 94       	cli
    538c:	de bf       	out	0x3e, r29	; 62
    538e:	0f be       	out	0x3f, r0	; 63
    5390:	cd bf       	out	0x3d, r28	; 61
    5392:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <__malloc_heap_end+0x1>
    5396:	8f 93       	push	r24
    5398:	80 91 9f 02 	lds	r24, 0x029F	; 0x80029f <__malloc_heap_end>
    539c:	8f 93       	push	r24
    539e:	80 91 a2 02 	lds	r24, 0x02A2	; 0x8002a2 <__malloc_heap_start+0x1>
    53a2:	8f 93       	push	r24
    53a4:	80 91 a1 02 	lds	r24, 0x02A1	; 0x8002a1 <__malloc_heap_start>
    53a8:	8f 93       	push	r24
    53aa:	89 e7       	ldi	r24, 0x79	; 121
    53ac:	93 e0       	ldi	r25, 0x03	; 3
    53ae:	1f 92       	push	r1
    53b0:	9f 93       	push	r25
    53b2:	8f 93       	push	r24
    53b4:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    53b8:	80 91 88 1f 	lds	r24, 0x1F88	; 0x801f88 <__brkval+0x1>
    53bc:	8f 93       	push	r24
    53be:	80 91 87 1f 	lds	r24, 0x1F87	; 0x801f87 <__brkval>
    53c2:	8f 93       	push	r24
    53c4:	85 e6       	ldi	r24, 0x65	; 101
    53c6:	93 e0       	ldi	r25, 0x03	; 3
    53c8:	1f 92       	push	r1
    53ca:	9f 93       	push	r25
    53cc:	8f 93       	push	r24
    53ce:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>

}
    53d2:	0f b6       	in	r0, 0x3f	; 63
    53d4:	f8 94       	cli
    53d6:	de bf       	out	0x3e, r29	; 62
    53d8:	0f be       	out	0x3f, r0	; 63
    53da:	cd bf       	out	0x3d, r28	; 61
    53dc:	22 96       	adiw	r28, 0x02	; 2
    53de:	e2 e0       	ldi	r30, 0x02	; 2
    53e0:	0c 94 60 ec 	jmp	0x1d8c0	; 0x1d8c0 <__epilogue_restores__+0x20>

000053e4 <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    53e4:	ef 92       	push	r14
    53e6:	ff 92       	push	r15
    53e8:	0f 93       	push	r16
    53ea:	1f 93       	push	r17
    53ec:	cf 93       	push	r28
    53ee:	df 93       	push	r29
    53f0:	18 2f       	mov	r17, r24
    53f2:	09 2f       	mov	r16, r25
    53f4:	f6 2e       	mov	r15, r22
    53f6:	e7 2e       	mov	r14, r23
	void *p = calloc(size, elements);
    53f8:	0e 94 f1 ee 	call	0x1dde2	; 0x1dde2 <calloc>
    53fc:	ec 01       	movw	r28, r24
	if(!p)
    53fe:	89 2b       	or	r24, r25
    5400:	99 f4       	brne	.+38     	; 0x5428 <safecalloc+0x44>
	{
		printf("safecalloc(%d,%d) failed!\n", size, elements);
    5402:	ef 92       	push	r14
    5404:	ff 92       	push	r15
    5406:	0f 93       	push	r16
    5408:	1f 93       	push	r17
    540a:	8a e4       	ldi	r24, 0x4A	; 74
    540c:	93 e0       	ldi	r25, 0x03	; 3
    540e:	1f 92       	push	r1
    5410:	9f 93       	push	r25
    5412:	8f 93       	push	r24
    5414:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    5418:	8d b7       	in	r24, 0x3d	; 61
    541a:	9e b7       	in	r25, 0x3e	; 62
    541c:	07 96       	adiw	r24, 0x07	; 7
    541e:	0f b6       	in	r0, 0x3f	; 63
    5420:	f8 94       	cli
    5422:	9e bf       	out	0x3e, r25	; 62
    5424:	0f be       	out	0x3f, r0	; 63
    5426:	8d bf       	out	0x3d, r24	; 61
	}
	return(p);
}
    5428:	ce 01       	movw	r24, r28
    542a:	cd b7       	in	r28, 0x3d	; 61
    542c:	de b7       	in	r29, 0x3e	; 62
    542e:	e6 e0       	ldi	r30, 0x06	; 6
    5430:	0c 94 5c ec 	jmp	0x1d8b8	; 0x1d8b8 <__epilogue_restores__+0x18>

00005434 <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    5434:	0f 93       	push	r16
    5436:	1f 93       	push	r17
    5438:	cf 93       	push	r28
    543a:	df 93       	push	r29
    543c:	18 2f       	mov	r17, r24
    543e:	09 2f       	mov	r16, r25
    void *p = calloc(size, 1);
    5440:	61 e0       	ldi	r22, 0x01	; 1
    5442:	70 e0       	ldi	r23, 0x00	; 0
    5444:	0e 94 f1 ee 	call	0x1dde2	; 0x1dde2 <calloc>
    5448:	ec 01       	movw	r28, r24
    if(!p)
    544a:	89 2b       	or	r24, r25
    544c:	71 f4       	brne	.+28     	; 0x546a <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    544e:	0f 93       	push	r16
    5450:	1f 93       	push	r17
    5452:	82 e3       	ldi	r24, 0x32	; 50
    5454:	93 e0       	ldi	r25, 0x03	; 3
    5456:	1f 92       	push	r1
    5458:	9f 93       	push	r25
    545a:	8f 93       	push	r24
    545c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    5460:	0f 90       	pop	r0
    5462:	0f 90       	pop	r0
    5464:	0f 90       	pop	r0
    5466:	0f 90       	pop	r0
    5468:	0f 90       	pop	r0
    }
    return(p);
}
    546a:	ce 01       	movw	r24, r28
    546c:	df 91       	pop	r29
    546e:	cf 91       	pop	r28
    5470:	1f 91       	pop	r17
    5472:	0f 91       	pop	r16
    5474:	08 95       	ret

00005476 <safefree>:
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    5476:	00 97       	sbiw	r24, 0x00	; 0
    5478:	39 f1       	breq	.+78     	; 0x54c8 <safefree+0x52>
        return;

    if(__brkval)
    547a:	20 91 87 1f 	lds	r18, 0x1F87	; 0x801f87 <__brkval>
    547e:	30 91 88 1f 	lds	r19, 0x1F88	; 0x801f88 <__brkval+0x1>
    5482:	21 15       	cp	r18, r1
    5484:	31 05       	cpc	r19, r1
    5486:	11 f4       	brne	.+4      	; 0x548c <safefree+0x16>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    5488:	2b e8       	ldi	r18, 0x8B	; 139
    548a:	3f e1       	ldi	r19, 0x1F	; 31

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    548c:	4f e1       	ldi	r20, 0x1F	; 31
    548e:	8b 38       	cpi	r24, 0x8B	; 139
    5490:	94 07       	cpc	r25, r20
    5492:	30 f0       	brcs	.+12     	; 0x54a0 <safefree+0x2a>
    5494:	28 17       	cp	r18, r24
    5496:	39 07       	cpc	r19, r25
    5498:	18 f0       	brcs	.+6      	; 0x54a0 <safefree+0x2a>
        ((uint16_t) p <= top) )
    {
        free(p);
    549a:	0c 94 a3 ef 	jmp	0x1df46	; 0x1df46 <free>
        return;
    549e:	08 95       	ret
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    54a0:	3f 93       	push	r19
    54a2:	2f 93       	push	r18
    54a4:	9f 93       	push	r25
    54a6:	8f 93       	push	r24
    54a8:	8d e0       	ldi	r24, 0x0D	; 13
    54aa:	93 e0       	ldi	r25, 0x03	; 3
    54ac:	1f 92       	push	r1
    54ae:	9f 93       	push	r25
    54b0:	8f 93       	push	r24
    54b2:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    PrintFree();
    54b6:	13 df       	rcall	.-474    	; 0x52de <PrintFree>
    54b8:	8d b7       	in	r24, 0x3d	; 61
    54ba:	9e b7       	in	r25, 0x3e	; 62
    54bc:	07 96       	adiw	r24, 0x07	; 7
    54be:	0f b6       	in	r0, 0x3f	; 63
    54c0:	f8 94       	cli
    54c2:	9e bf       	out	0x3e, r25	; 62
    54c4:	0f be       	out	0x3f, r0	; 63
    54c6:	8d bf       	out	0x3d, r24	; 61
    54c8:	08 95       	ret

000054ca <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    54ca:	64 36       	cpi	r22, 0x64	; 100
    54cc:	71 05       	cpc	r23, r1
    54ce:	81 05       	cpc	r24, r1
    54d0:	91 05       	cpc	r25, r1
    54d2:	58 f0       	brcs	.+22     	; 0x54ea <delayus+0x20>
    {
        us -= 100U;
    54d4:	64 56       	subi	r22, 0x64	; 100
    54d6:	71 09       	sbc	r23, r1
    54d8:	81 09       	sbc	r24, r1
    54da:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    54dc:	e3 ef       	ldi	r30, 0xF3	; 243
    54de:	f1 e0       	ldi	r31, 0x01	; 1
    54e0:	31 97       	sbiw	r30, 0x01	; 1
    54e2:	f1 f7       	brne	.-4      	; 0x54e0 <delayus+0x16>
    54e4:	00 c0       	rjmp	.+0      	; 0x54e6 <delayus+0x1c>
    54e6:	00 00       	nop
    54e8:	f0 cf       	rjmp	.-32     	; 0x54ca <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    54ea:	6a 30       	cpi	r22, 0x0A	; 10
    54ec:	71 05       	cpc	r23, r1
    54ee:	81 05       	cpc	r24, r1
    54f0:	91 05       	cpc	r25, r1
    54f2:	48 f0       	brcs	.+18     	; 0x5506 <delayus+0x3c>
    {
        us -= 10U;
    54f4:	6a 50       	subi	r22, 0x0A	; 10
    54f6:	71 09       	sbc	r23, r1
    54f8:	81 09       	sbc	r24, r1
    54fa:	91 09       	sbc	r25, r1
    54fc:	f2 e4       	ldi	r31, 0x42	; 66
    54fe:	fa 95       	dec	r31
    5500:	f1 f7       	brne	.-4      	; 0x54fe <delayus+0x34>
    5502:	00 c0       	rjmp	.+0      	; 0x5504 <delayus+0x3a>
    5504:	f2 cf       	rjmp	.-28     	; 0x54ea <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    5506:	61 15       	cp	r22, r1
    5508:	71 05       	cpc	r23, r1
    550a:	81 05       	cpc	r24, r1
    550c:	91 05       	cpc	r25, r1
    550e:	49 f0       	breq	.+18     	; 0x5522 <delayus+0x58>
    {
        --us;
    5510:	61 50       	subi	r22, 0x01	; 1
    5512:	71 09       	sbc	r23, r1
    5514:	81 09       	sbc	r24, r1
    5516:	91 09       	sbc	r25, r1
    5518:	26 e0       	ldi	r18, 0x06	; 6
    551a:	2a 95       	dec	r18
    551c:	f1 f7       	brne	.-4      	; 0x551a <delayus+0x50>
    551e:	00 c0       	rjmp	.+0      	; 0x5520 <delayus+0x56>
    5520:	f2 cf       	rjmp	.-28     	; 0x5506 <delayus+0x3c>
        _delay_us(1);
    }
}
    5522:	08 95       	ret

00005524 <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    5524:	61 15       	cp	r22, r1
    5526:	71 05       	cpc	r23, r1
    5528:	81 05       	cpc	r24, r1
    552a:	91 05       	cpc	r25, r1
    552c:	09 f4       	brne	.+2      	; 0x5530 <delayms+0xc>
    552e:	41 c0       	rjmp	.+130    	; 0x55b2 <delayms+0x8e>
    5530:	e3 ef       	ldi	r30, 0xF3	; 243
    5532:	f1 e0       	ldi	r31, 0x01	; 1
    5534:	31 97       	sbiw	r30, 0x01	; 1
    5536:	f1 f7       	brne	.-4      	; 0x5534 <delayms+0x10>
    5538:	00 c0       	rjmp	.+0      	; 0x553a <delayms+0x16>
    553a:	00 00       	nop
    553c:	e3 ef       	ldi	r30, 0xF3	; 243
    553e:	f1 e0       	ldi	r31, 0x01	; 1
    5540:	31 97       	sbiw	r30, 0x01	; 1
    5542:	f1 f7       	brne	.-4      	; 0x5540 <delayms+0x1c>
    5544:	00 c0       	rjmp	.+0      	; 0x5546 <delayms+0x22>
    5546:	00 00       	nop
    5548:	e3 ef       	ldi	r30, 0xF3	; 243
    554a:	f1 e0       	ldi	r31, 0x01	; 1
    554c:	31 97       	sbiw	r30, 0x01	; 1
    554e:	f1 f7       	brne	.-4      	; 0x554c <delayms+0x28>
    5550:	00 c0       	rjmp	.+0      	; 0x5552 <delayms+0x2e>
    5552:	00 00       	nop
    5554:	e3 ef       	ldi	r30, 0xF3	; 243
    5556:	f1 e0       	ldi	r31, 0x01	; 1
    5558:	31 97       	sbiw	r30, 0x01	; 1
    555a:	f1 f7       	brne	.-4      	; 0x5558 <delayms+0x34>
    555c:	00 c0       	rjmp	.+0      	; 0x555e <delayms+0x3a>
    555e:	00 00       	nop
    5560:	e3 ef       	ldi	r30, 0xF3	; 243
    5562:	f1 e0       	ldi	r31, 0x01	; 1
    5564:	31 97       	sbiw	r30, 0x01	; 1
    5566:	f1 f7       	brne	.-4      	; 0x5564 <delayms+0x40>
    5568:	00 c0       	rjmp	.+0      	; 0x556a <delayms+0x46>
    556a:	00 00       	nop
    556c:	e3 ef       	ldi	r30, 0xF3	; 243
    556e:	f1 e0       	ldi	r31, 0x01	; 1
    5570:	31 97       	sbiw	r30, 0x01	; 1
    5572:	f1 f7       	brne	.-4      	; 0x5570 <delayms+0x4c>
    5574:	00 c0       	rjmp	.+0      	; 0x5576 <delayms+0x52>
    5576:	00 00       	nop
    5578:	e3 ef       	ldi	r30, 0xF3	; 243
    557a:	f1 e0       	ldi	r31, 0x01	; 1
    557c:	31 97       	sbiw	r30, 0x01	; 1
    557e:	f1 f7       	brne	.-4      	; 0x557c <delayms+0x58>
    5580:	00 c0       	rjmp	.+0      	; 0x5582 <delayms+0x5e>
    5582:	00 00       	nop
    5584:	e3 ef       	ldi	r30, 0xF3	; 243
    5586:	f1 e0       	ldi	r31, 0x01	; 1
    5588:	31 97       	sbiw	r30, 0x01	; 1
    558a:	f1 f7       	brne	.-4      	; 0x5588 <delayms+0x64>
    558c:	00 c0       	rjmp	.+0      	; 0x558e <delayms+0x6a>
    558e:	00 00       	nop
    5590:	e3 ef       	ldi	r30, 0xF3	; 243
    5592:	f1 e0       	ldi	r31, 0x01	; 1
    5594:	31 97       	sbiw	r30, 0x01	; 1
    5596:	f1 f7       	brne	.-4      	; 0x5594 <delayms+0x70>
    5598:	00 c0       	rjmp	.+0      	; 0x559a <delayms+0x76>
    559a:	00 00       	nop
    559c:	e3 ef       	ldi	r30, 0xF3	; 243
    559e:	f1 e0       	ldi	r31, 0x01	; 1
    55a0:	31 97       	sbiw	r30, 0x01	; 1
    55a2:	f1 f7       	brne	.-4      	; 0x55a0 <delayms+0x7c>
    55a4:	00 c0       	rjmp	.+0      	; 0x55a6 <delayms+0x82>
    55a6:	00 00       	nop
    55a8:	61 50       	subi	r22, 0x01	; 1
    55aa:	71 09       	sbc	r23, r1
    55ac:	81 09       	sbc	r24, r1
    55ae:	91 09       	sbc	r25, r1
    55b0:	b9 cf       	rjmp	.-142    	; 0x5524 <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    55b2:	08 95       	ret

000055b4 <uart_ubr>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    55b4:	4f 92       	push	r4
    55b6:	5f 92       	push	r5
    55b8:	6f 92       	push	r6
    55ba:	7f 92       	push	r7
    55bc:	8f 92       	push	r8
    55be:	9f 92       	push	r9
    55c0:	af 92       	push	r10
    55c2:	bf 92       	push	r11
    55c4:	cf 92       	push	r12
    55c6:	df 92       	push	r13
    55c8:	ef 92       	push	r14
    55ca:	ff 92       	push	r15
    55cc:	cf 93       	push	r28
    55ce:	df 93       	push	r29
    55d0:	5a 01       	movw	r10, r20
    55d2:	e9 01       	movw	r28, r18
    55d4:	0e 94 8f ed 	call	0x1db1e	; 0x1db1e <__floatunsisf>
    55d8:	2b 01       	movw	r4, r22
    55da:	3c 01       	movw	r6, r24
    55dc:	20 e0       	ldi	r18, 0x00	; 0
    55de:	30 e0       	ldi	r19, 0x00	; 0
    55e0:	40 e0       	ldi	r20, 0x00	; 0
    55e2:	51 e4       	ldi	r21, 0x41	; 65
    55e4:	0e 94 45 ee 	call	0x1dc8a	; 0x1dc8a <__mulsf3>
    55e8:	9b 01       	movw	r18, r22
    55ea:	ac 01       	movw	r20, r24
    55ec:	60 e8       	ldi	r22, 0x80	; 128
    55ee:	76 e9       	ldi	r23, 0x96	; 150
    55f0:	88 e9       	ldi	r24, 0x98	; 152
    55f2:	9b e4       	ldi	r25, 0x4B	; 75
    55f4:	0e 94 f6 ec 	call	0x1d9ec	; 0x1d9ec <__divsf3>
    55f8:	20 e0       	ldi	r18, 0x00	; 0
    55fa:	30 e0       	ldi	r19, 0x00	; 0
    55fc:	40 e8       	ldi	r20, 0x80	; 128
    55fe:	5f e3       	ldi	r21, 0x3F	; 63
    5600:	0e 94 8d ec 	call	0x1d91a	; 0x1d91a <__subsf3>
    5604:	0e 94 a8 ee 	call	0x1dd50	; 0x1dd50 <round>
    5608:	0e 94 63 ed 	call	0x1dac6	; 0x1dac6 <__fixunssfsi>
    560c:	6b 01       	movw	r12, r22
    560e:	7c 01       	movw	r14, r24
    5610:	c1 14       	cp	r12, r1
    5612:	80 e1       	ldi	r24, 0x10	; 16
    5614:	d8 06       	cpc	r13, r24
    5616:	e1 04       	cpc	r14, r1
    5618:	f1 04       	cpc	r15, r1
    561a:	58 f4       	brcc	.+22     	; 0x5632 <uart_ubr+0x7e>
    561c:	81 e0       	ldi	r24, 0x01	; 1
    561e:	90 e0       	ldi	r25, 0x00	; 0
    5620:	f5 01       	movw	r30, r10
    5622:	91 83       	std	Z+1, r25	; 0x01
    5624:	80 83       	st	Z, r24
    5626:	81 2c       	mov	r8, r1
    5628:	91 2c       	mov	r9, r1
    562a:	a1 2c       	mov	r10, r1
    562c:	21 e4       	ldi	r18, 0x41	; 65
    562e:	b2 2e       	mov	r11, r18
    5630:	31 c0       	rjmp	.+98     	; 0x5694 <uart_ubr+0xe0>
    5632:	f5 01       	movw	r30, r10
    5634:	11 82       	std	Z+1, r1	; 0x01
    5636:	10 82       	st	Z, r1
    5638:	20 e0       	ldi	r18, 0x00	; 0
    563a:	30 e0       	ldi	r19, 0x00	; 0
    563c:	40 e8       	ldi	r20, 0x80	; 128
    563e:	51 e4       	ldi	r21, 0x41	; 65
    5640:	c3 01       	movw	r24, r6
    5642:	b2 01       	movw	r22, r4
    5644:	0e 94 45 ee 	call	0x1dc8a	; 0x1dc8a <__mulsf3>
    5648:	9b 01       	movw	r18, r22
    564a:	ac 01       	movw	r20, r24
    564c:	60 e8       	ldi	r22, 0x80	; 128
    564e:	76 e9       	ldi	r23, 0x96	; 150
    5650:	88 e9       	ldi	r24, 0x98	; 152
    5652:	9b e4       	ldi	r25, 0x4B	; 75
    5654:	0e 94 f6 ec 	call	0x1d9ec	; 0x1d9ec <__divsf3>
    5658:	20 e0       	ldi	r18, 0x00	; 0
    565a:	30 e0       	ldi	r19, 0x00	; 0
    565c:	40 e8       	ldi	r20, 0x80	; 128
    565e:	5f e3       	ldi	r21, 0x3F	; 63
    5660:	0e 94 8d ec 	call	0x1d91a	; 0x1d91a <__subsf3>
    5664:	0e 94 a8 ee 	call	0x1dd50	; 0x1dd50 <round>
    5668:	0e 94 63 ed 	call	0x1dac6	; 0x1dac6 <__fixunssfsi>
    566c:	6b 01       	movw	r12, r22
    566e:	7c 01       	movw	r14, r24
    5670:	81 2c       	mov	r8, r1
    5672:	91 2c       	mov	r9, r1
    5674:	90 e8       	ldi	r25, 0x80	; 128
    5676:	a9 2e       	mov	r10, r25
    5678:	91 e4       	ldi	r25, 0x41	; 65
    567a:	b9 2e       	mov	r11, r25
    567c:	c1 14       	cp	r12, r1
    567e:	f0 e1       	ldi	r31, 0x10	; 16
    5680:	df 06       	cpc	r13, r31
    5682:	e1 04       	cpc	r14, r1
    5684:	f1 04       	cpc	r15, r1
    5686:	30 f0       	brcs	.+12     	; 0x5694 <uart_ubr+0xe0>
    5688:	cc 24       	eor	r12, r12
    568a:	ca 94       	dec	r12
    568c:	8f e0       	ldi	r24, 0x0F	; 15
    568e:	d8 2e       	mov	r13, r24
    5690:	e1 2c       	mov	r14, r1
    5692:	f1 2c       	mov	r15, r1
    5694:	c7 01       	movw	r24, r14
    5696:	b6 01       	movw	r22, r12
    5698:	6f 5f       	subi	r22, 0xFF	; 255
    569a:	7f 4f       	sbci	r23, 0xFF	; 255
    569c:	8f 4f       	sbci	r24, 0xFF	; 255
    569e:	9f 4f       	sbci	r25, 0xFF	; 255
    56a0:	0e 94 8f ed 	call	0x1db1e	; 0x1db1e <__floatunsisf>
    56a4:	a5 01       	movw	r20, r10
    56a6:	94 01       	movw	r18, r8
    56a8:	0e 94 45 ee 	call	0x1dc8a	; 0x1dc8a <__mulsf3>
    56ac:	9b 01       	movw	r18, r22
    56ae:	ac 01       	movw	r20, r24
    56b0:	60 e8       	ldi	r22, 0x80	; 128
    56b2:	76 e9       	ldi	r23, 0x96	; 150
    56b4:	88 e9       	ldi	r24, 0x98	; 152
    56b6:	9b e4       	ldi	r25, 0x4B	; 75
    56b8:	0e 94 f6 ec 	call	0x1d9ec	; 0x1d9ec <__divsf3>
    56bc:	0e 94 63 ed 	call	0x1dac6	; 0x1dac6 <__fixunssfsi>
    56c0:	68 83       	st	Y, r22
    56c2:	79 83       	std	Y+1, r23	; 0x01
    56c4:	8a 83       	std	Y+2, r24	; 0x02
    56c6:	9b 83       	std	Y+3, r25	; 0x03
    56c8:	c6 01       	movw	r24, r12
    56ca:	df 91       	pop	r29
    56cc:	cf 91       	pop	r28
    56ce:	ff 90       	pop	r15
    56d0:	ef 90       	pop	r14
    56d2:	df 90       	pop	r13
    56d4:	cf 90       	pop	r12
    56d6:	bf 90       	pop	r11
    56d8:	af 90       	pop	r10
    56da:	9f 90       	pop	r9
    56dc:	8f 90       	pop	r8
    56de:	7f 90       	pop	r7
    56e0:	6f 90       	pop	r6
    56e2:	5f 90       	pop	r5
    56e4:	4f 90       	pop	r4
    56e6:	08 95       	ret

000056e8 <uart_init>:
    56e8:	a6 e0       	ldi	r26, 0x06	; 6
    56ea:	b0 e0       	ldi	r27, 0x00	; 0
    56ec:	ea e7       	ldi	r30, 0x7A	; 122
    56ee:	fb e2       	ldi	r31, 0x2B	; 43
    56f0:	0c 94 44 ec 	jmp	0x1d888	; 0x1d888 <__prologue_saves__+0x20>
    56f4:	1e 82       	std	Y+6, r1	; 0x06
    56f6:	1d 82       	std	Y+5, r1	; 0x05
    56f8:	81 11       	cpse	r24, r1
    56fa:	36 c0       	rjmp	.+108    	; 0x5768 <uart_init+0x80>
    56fc:	cb 01       	movw	r24, r22
    56fe:	ba 01       	movw	r22, r20
    5700:	9e 01       	movw	r18, r28
    5702:	2f 5f       	subi	r18, 0xFF	; 255
    5704:	3f 4f       	sbci	r19, 0xFF	; 255
    5706:	ae 01       	movw	r20, r28
    5708:	4b 5f       	subi	r20, 0xFB	; 251
    570a:	5f 4f       	sbci	r21, 0xFF	; 255
    570c:	53 df       	rcall	.-346    	; 0x55b4 <uart_ubr>
    570e:	f8 94       	cli
    5710:	10 92 52 1a 	sts	0x1A52, r1	; 0x801a52 <uarts+0x4>
    5714:	10 92 51 1a 	sts	0x1A51, r1	; 0x801a51 <uarts+0x3>
    5718:	10 92 4e 1a 	sts	0x1A4E, r1	; 0x801a4e <uarts>
    571c:	10 92 4f 1a 	sts	0x1A4F, r1	; 0x801a4f <uarts+0x1>
    5720:	10 92 50 1a 	sts	0x1A50, r1	; 0x801a50 <uarts+0x2>
    5724:	10 92 53 1a 	sts	0x1A53, r1	; 0x801a53 <uarts+0x5>
    5728:	78 94       	sei
    572a:	f8 94       	cli
    572c:	58 9a       	sbi	0x0b, 0	; 11
    572e:	59 9a       	sbi	0x0b, 1	; 11
    5730:	50 98       	cbi	0x0a, 0	; 10
    5732:	51 9a       	sbi	0x0a, 1	; 10
    5734:	28 e9       	ldi	r18, 0x98	; 152
    5736:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    573a:	2d 81       	ldd	r18, Y+5	; 0x05
    573c:	3e 81       	ldd	r19, Y+6	; 0x06
    573e:	23 2b       	or	r18, r19
    5740:	19 f0       	breq	.+6      	; 0x5748 <uart_init+0x60>
    5742:	22 e0       	ldi	r18, 0x02	; 2
    5744:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5748:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    574c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    5750:	78 94       	sei
    5752:	69 e6       	ldi	r22, 0x69	; 105
    5754:	7c e2       	ldi	r23, 0x2C	; 44
    5756:	8e e7       	ldi	r24, 0x7E	; 126
    5758:	9c e2       	ldi	r25, 0x2C	; 44
    575a:	0e 94 ee 7d 	call	0xfbdc	; 0xfbdc <fdevopen>
    575e:	69 81       	ldd	r22, Y+1	; 0x01
    5760:	7a 81       	ldd	r23, Y+2	; 0x02
    5762:	8b 81       	ldd	r24, Y+3	; 0x03
    5764:	9c 81       	ldd	r25, Y+4	; 0x04
    5766:	03 c0       	rjmp	.+6      	; 0x576e <uart_init+0x86>
    5768:	60 e0       	ldi	r22, 0x00	; 0
    576a:	70 e0       	ldi	r23, 0x00	; 0
    576c:	cb 01       	movw	r24, r22
    576e:	26 96       	adiw	r28, 0x06	; 6
    5770:	e2 e0       	ldi	r30, 0x02	; 2
    5772:	0c 94 60 ec 	jmp	0x1d8c0	; 0x1d8c0 <__epilogue_restores__+0x20>

00005776 <uart_rx_interrupt>:
    5776:	27 e5       	ldi	r18, 0x57	; 87
    5778:	82 9f       	mul	r24, r18
    577a:	c0 01       	movw	r24, r0
    577c:	11 24       	eor	r1, r1
    577e:	fc 01       	movw	r30, r24
    5780:	e2 5b       	subi	r30, 0xB2	; 178
    5782:	f5 4e       	sbci	r31, 0xE5	; 229
    5784:	83 81       	ldd	r24, Z+3	; 0x03
    5786:	94 81       	ldd	r25, Z+4	; 0x04
    5788:	80 35       	cpi	r24, 0x50	; 80
    578a:	91 05       	cpc	r25, r1
    578c:	84 f4       	brge	.+32     	; 0x57ae <uart_rx_interrupt+0x38>
    578e:	30 81       	ld	r19, Z
    5790:	21 e0       	ldi	r18, 0x01	; 1
    5792:	23 0f       	add	r18, r19
    5794:	20 83       	st	Z, r18
    5796:	df 01       	movw	r26, r30
    5798:	a3 0f       	add	r26, r19
    579a:	b1 1d       	adc	r27, r1
    579c:	16 96       	adiw	r26, 0x06	; 6
    579e:	6c 93       	st	X, r22
    57a0:	01 96       	adiw	r24, 0x01	; 1
    57a2:	94 83       	std	Z+4, r25	; 0x04
    57a4:	83 83       	std	Z+3, r24	; 0x03
    57a6:	20 35       	cpi	r18, 0x50	; 80
    57a8:	28 f0       	brcs	.+10     	; 0x57b4 <uart_rx_interrupt+0x3e>
    57aa:	10 82       	st	Z, r1
    57ac:	08 95       	ret
    57ae:	85 81       	ldd	r24, Z+5	; 0x05
    57b0:	81 60       	ori	r24, 0x01	; 1
    57b2:	85 83       	std	Z+5, r24	; 0x05
    57b4:	08 95       	ret

000057b6 <__vector_20>:
    57b6:	1f 92       	push	r1
    57b8:	0f 92       	push	r0
    57ba:	0f b6       	in	r0, 0x3f	; 63
    57bc:	0f 92       	push	r0
    57be:	11 24       	eor	r1, r1
    57c0:	0b b6       	in	r0, 0x3b	; 59
    57c2:	0f 92       	push	r0
    57c4:	2f 93       	push	r18
    57c6:	3f 93       	push	r19
    57c8:	4f 93       	push	r20
    57ca:	5f 93       	push	r21
    57cc:	6f 93       	push	r22
    57ce:	7f 93       	push	r23
    57d0:	8f 93       	push	r24
    57d2:	9f 93       	push	r25
    57d4:	af 93       	push	r26
    57d6:	bf 93       	push	r27
    57d8:	ef 93       	push	r30
    57da:	ff 93       	push	r31
    57dc:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    57e0:	80 e0       	ldi	r24, 0x00	; 0
    57e2:	c9 df       	rcall	.-110    	; 0x5776 <uart_rx_interrupt>
    57e4:	ff 91       	pop	r31
    57e6:	ef 91       	pop	r30
    57e8:	bf 91       	pop	r27
    57ea:	af 91       	pop	r26
    57ec:	9f 91       	pop	r25
    57ee:	8f 91       	pop	r24
    57f0:	7f 91       	pop	r23
    57f2:	6f 91       	pop	r22
    57f4:	5f 91       	pop	r21
    57f6:	4f 91       	pop	r20
    57f8:	3f 91       	pop	r19
    57fa:	2f 91       	pop	r18
    57fc:	0f 90       	pop	r0
    57fe:	0b be       	out	0x3b, r0	; 59
    5800:	0f 90       	pop	r0
    5802:	0f be       	out	0x3f, r0	; 63
    5804:	0f 90       	pop	r0
    5806:	1f 90       	pop	r1
    5808:	18 95       	reti

0000580a <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    580a:	81 11       	cpse	r24, r1
    580c:	07 c0       	rjmp	.+14     	; 0x581c <uart_rx_count+0x12>
        return(EOF);

    cli();
    580e:	f8 94       	cli

    count = uarts[uart].rx_count;
    5810:	80 91 51 1a 	lds	r24, 0x1A51	; 0x801a51 <uarts+0x3>
    5814:	90 91 52 1a 	lds	r25, 0x1A52	; 0x801a52 <uarts+0x4>

    sei();
    5818:	78 94       	sei

    return (count );
    581a:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    581c:	8f ef       	ldi	r24, 0xFF	; 255
    581e:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    5820:	08 95       	ret

00005822 <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    5822:	81 11       	cpse	r24, r1
    5824:	21 c0       	rjmp	.+66     	; 0x5868 <uart_get_tail+0x46>
	{
        return(EOF);
	}

	while(uart_rx_count(uart) < 1)
    5826:	80 e0       	ldi	r24, 0x00	; 0
    5828:	f0 df       	rcall	.-32     	; 0x580a <uart_rx_count>
    582a:	18 16       	cp	r1, r24
    582c:	19 06       	cpc	r1, r25
    582e:	dc f7       	brge	.-10     	; 0x5826 <uart_get_tail+0x4>
		;

    cli();
    5830:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    5832:	e0 91 4f 1a 	lds	r30, 0x1A4F	; 0x801a4f <uarts+0x1>
    5836:	91 e0       	ldi	r25, 0x01	; 1
    5838:	9e 0f       	add	r25, r30
    583a:	90 93 4f 1a 	sts	0x1A4F, r25	; 0x801a4f <uarts+0x1>
    583e:	f0 e0       	ldi	r31, 0x00	; 0
    5840:	e2 5b       	subi	r30, 0xB2	; 178
    5842:	f5 4e       	sbci	r31, 0xE5	; 229
    5844:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    5846:	90 35       	cpi	r25, 0x50	; 80
    5848:	10 f0       	brcs	.+4      	; 0x584e <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    584a:	10 92 4f 1a 	sts	0x1A4F, r1	; 0x801a4f <uarts+0x1>
    uarts[uart].rx_count--;
    584e:	20 91 51 1a 	lds	r18, 0x1A51	; 0x801a51 <uarts+0x3>
    5852:	30 91 52 1a 	lds	r19, 0x1A52	; 0x801a52 <uarts+0x4>
    5856:	21 50       	subi	r18, 0x01	; 1
    5858:	31 09       	sbc	r19, r1
    585a:	30 93 52 1a 	sts	0x1A52, r19	; 0x801a52 <uarts+0x4>
    585e:	20 93 51 1a 	sts	0x1A51, r18	; 0x801a51 <uarts+0x3>
    sei();
    5862:	78 94       	sei

    return (c & 0xff);
    5864:	90 e0       	ldi	r25, 0x00	; 0
    5866:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
	{
        return(EOF);
    5868:	8f ef       	ldi	r24, 0xFF	; 255
    586a:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    586c:	08 95       	ret

0000586e <uart_rx_byte>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    586e:	d9 df       	rcall	.-78     	; 0x5822 <uart_get_tail>
    5870:	99 27       	eor	r25, r25
    5872:	08 95       	ret

00005874 <uart_tx_byte>:
    5874:	61 11       	cpse	r22, r1
    5876:	09 c0       	rjmp	.+18     	; 0x588a <uart_tx_byte+0x16>
    5878:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    587c:	25 ff       	sbrs	r18, 5
    587e:	fc cf       	rjmp	.-8      	; 0x5878 <uart_tx_byte+0x4>
    5880:	28 2f       	mov	r18, r24
    5882:	2f 77       	andi	r18, 0x7F	; 127
    5884:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    5888:	08 95       	ret
    588a:	61 30       	cpi	r22, 0x01	; 1
    588c:	49 f4       	brne	.+18     	; 0x58a0 <uart_tx_byte+0x2c>
    588e:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    5892:	25 ff       	sbrs	r18, 5
    5894:	fc cf       	rjmp	.-8      	; 0x588e <uart_tx_byte+0x1a>
    5896:	28 2f       	mov	r18, r24
    5898:	2f 77       	andi	r18, 0x7F	; 127
    589a:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    589e:	08 95       	ret
    58a0:	8f ef       	ldi	r24, 0xFF	; 255
    58a2:	9f ef       	ldi	r25, 0xFF	; 255
    58a4:	08 95       	ret

000058a6 <uart_getchar>:
    58a6:	cf 93       	push	r28
    58a8:	81 11       	cpse	r24, r1
    58aa:	0f c0       	rjmp	.+30     	; 0x58ca <uart_getchar+0x24>
    58ac:	e0 df       	rcall	.-64     	; 0x586e <uart_rx_byte>
    58ae:	c8 2f       	mov	r28, r24
    58b0:	60 e0       	ldi	r22, 0x00	; 0
    58b2:	90 e0       	ldi	r25, 0x00	; 0
    58b4:	df df       	rcall	.-66     	; 0x5874 <uart_tx_byte>
    58b6:	cd 30       	cpi	r28, 0x0D	; 13
    58b8:	29 f4       	brne	.+10     	; 0x58c4 <uart_getchar+0x1e>
    58ba:	60 e0       	ldi	r22, 0x00	; 0
    58bc:	8a e0       	ldi	r24, 0x0A	; 10
    58be:	90 e0       	ldi	r25, 0x00	; 0
    58c0:	d9 df       	rcall	.-78     	; 0x5874 <uart_tx_byte>
    58c2:	ca e0       	ldi	r28, 0x0A	; 10
    58c4:	8c 2f       	mov	r24, r28
    58c6:	90 e0       	ldi	r25, 0x00	; 0
    58c8:	02 c0       	rjmp	.+4      	; 0x58ce <uart_getchar+0x28>
    58ca:	8f ef       	ldi	r24, 0xFF	; 255
    58cc:	9f ef       	ldi	r25, 0xFF	; 255
    58ce:	cf 91       	pop	r28
    58d0:	08 95       	ret

000058d2 <uart0_getchar>:
    58d2:	80 e0       	ldi	r24, 0x00	; 0
    58d4:	e8 cf       	rjmp	.-48     	; 0x58a6 <uart_getchar>
    58d6:	08 95       	ret

000058d8 <uart_putchar>:
    58d8:	1f 93       	push	r17
    58da:	cf 93       	push	r28
    58dc:	df 93       	push	r29
    58de:	ec 01       	movw	r28, r24
    58e0:	16 2f       	mov	r17, r22
    58e2:	c8 df       	rcall	.-112    	; 0x5874 <uart_tx_byte>
    58e4:	ca 30       	cpi	r28, 0x0A	; 10
    58e6:	d1 05       	cpc	r29, r1
    58e8:	21 f4       	brne	.+8      	; 0x58f2 <uart_putchar+0x1a>
    58ea:	61 2f       	mov	r22, r17
    58ec:	8d e0       	ldi	r24, 0x0D	; 13
    58ee:	90 e0       	ldi	r25, 0x00	; 0
    58f0:	c1 df       	rcall	.-126    	; 0x5874 <uart_tx_byte>
    58f2:	ce 01       	movw	r24, r28
    58f4:	df 91       	pop	r29
    58f6:	cf 91       	pop	r28
    58f8:	1f 91       	pop	r17
    58fa:	08 95       	ret

000058fc <uart0_putchar>:
    58fc:	cf 93       	push	r28
    58fe:	df 93       	push	r29
    5900:	ec 01       	movw	r28, r24
    5902:	60 e0       	ldi	r22, 0x00	; 0
    5904:	70 e0       	ldi	r23, 0x00	; 0
    5906:	e8 df       	rcall	.-48     	; 0x58d8 <uart_putchar>
    5908:	ce 01       	movw	r24, r28
    590a:	df 91       	pop	r29
    590c:	cf 91       	pop	r28
    590e:	08 95       	ret

00005910 <uart_keyhit>:
    5910:	7c cf       	rjmp	.-264    	; 0x580a <uart_rx_count>
    5912:	08 95       	ret

00005914 <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    5914:	cf 92       	push	r12
    5916:	df 92       	push	r13
    5918:	ef 92       	push	r14
    591a:	ff 92       	push	r15
    591c:	6b 01       	movw	r12, r22
    591e:	7c 01       	movw	r14, r24
    5920:	80 91 ba 17 	lds	r24, 0x17BA	; 0x8017ba <SPI0_Speed_value>
    5924:	90 91 bb 17 	lds	r25, 0x17BB	; 0x8017bb <SPI0_Speed_value+0x1>
    5928:	a0 91 bc 17 	lds	r26, 0x17BC	; 0x8017bc <SPI0_Speed_value+0x2>
    592c:	b0 91 bd 17 	lds	r27, 0x17BD	; 0x8017bd <SPI0_Speed_value+0x3>
    5930:	8c 15       	cp	r24, r12
    5932:	9d 05       	cpc	r25, r13
    5934:	ae 05       	cpc	r26, r14
    5936:	bf 05       	cpc	r27, r15
    5938:	09 f4       	brne	.+2      	; 0x593c <SPI0_Speed+0x28>
    593a:	4e c0       	rjmp	.+156    	; 0x59d8 <SPI0_Speed+0xc4>
    593c:	60 e0       	ldi	r22, 0x00	; 0
    593e:	7d e2       	ldi	r23, 0x2D	; 45
    5940:	81 e3       	ldi	r24, 0x31	; 49
    5942:	91 e0       	ldi	r25, 0x01	; 1
    5944:	a7 01       	movw	r20, r14
    5946:	96 01       	movw	r18, r12
    5948:	0e 94 c7 eb 	call	0x1d78e	; 0x1d78e <__udivmodsi4>
    594c:	20 38       	cpi	r18, 0x80	; 128
    594e:	31 05       	cpc	r19, r1
    5950:	41 05       	cpc	r20, r1
    5952:	51 05       	cpc	r21, r1
    5954:	28 f4       	brcc	.+10     	; 0x5960 <SPI0_Speed+0x4c>
    5956:	20 34       	cpi	r18, 0x40	; 64
    5958:	31 05       	cpc	r19, r1
    595a:	41 05       	cpc	r20, r1
    595c:	51 05       	cpc	r21, r1
    595e:	30 f0       	brcs	.+12     	; 0x596c <SPI0_Speed+0x58>
    5960:	8d b5       	in	r24, 0x2d	; 45
    5962:	8e 7f       	andi	r24, 0xFE	; 254
    5964:	8d bd       	out	0x2d, r24	; 45
    5966:	8c b5       	in	r24, 0x2c	; 44
    5968:	82 60       	ori	r24, 0x02	; 2
    596a:	1b c0       	rjmp	.+54     	; 0x59a2 <SPI0_Speed+0x8e>
    596c:	8d b5       	in	r24, 0x2d	; 45
    596e:	20 32       	cpi	r18, 0x20	; 32
    5970:	31 05       	cpc	r19, r1
    5972:	41 05       	cpc	r20, r1
    5974:	51 05       	cpc	r21, r1
    5976:	28 f0       	brcs	.+10     	; 0x5982 <SPI0_Speed+0x6e>
    5978:	81 60       	ori	r24, 0x01	; 1
    597a:	8d bd       	out	0x2d, r24	; 45
    597c:	8c b5       	in	r24, 0x2c	; 44
    597e:	82 60       	ori	r24, 0x02	; 2
    5980:	1f c0       	rjmp	.+62     	; 0x59c0 <SPI0_Speed+0xac>
    5982:	20 31       	cpi	r18, 0x10	; 16
    5984:	31 05       	cpc	r19, r1
    5986:	41 05       	cpc	r20, r1
    5988:	51 05       	cpc	r21, r1
    598a:	10 f0       	brcs	.+4      	; 0x5990 <SPI0_Speed+0x7c>
    598c:	8e 7f       	andi	r24, 0xFE	; 254
    598e:	06 c0       	rjmp	.+12     	; 0x599c <SPI0_Speed+0x88>
    5990:	28 30       	cpi	r18, 0x08	; 8
    5992:	31 05       	cpc	r19, r1
    5994:	41 05       	cpc	r20, r1
    5996:	51 05       	cpc	r21, r1
    5998:	40 f0       	brcs	.+16     	; 0x59aa <SPI0_Speed+0x96>
    599a:	81 60       	ori	r24, 0x01	; 1
    599c:	8d bd       	out	0x2d, r24	; 45
    599e:	8c b5       	in	r24, 0x2c	; 44
    59a0:	8d 7f       	andi	r24, 0xFD	; 253
    59a2:	8c bd       	out	0x2c, r24	; 44
    59a4:	8c b5       	in	r24, 0x2c	; 44
    59a6:	81 60       	ori	r24, 0x01	; 1
    59a8:	0e c0       	rjmp	.+28     	; 0x59c6 <SPI0_Speed+0xb2>
    59aa:	24 30       	cpi	r18, 0x04	; 4
    59ac:	31 05       	cpc	r19, r1
    59ae:	41 05       	cpc	r20, r1
    59b0:	51 05       	cpc	r21, r1
    59b2:	10 f0       	brcs	.+4      	; 0x59b8 <SPI0_Speed+0xa4>
    59b4:	8e 7f       	andi	r24, 0xFE	; 254
    59b6:	01 c0       	rjmp	.+2      	; 0x59ba <SPI0_Speed+0xa6>
    59b8:	81 60       	ori	r24, 0x01	; 1
    59ba:	8d bd       	out	0x2d, r24	; 45
    59bc:	8c b5       	in	r24, 0x2c	; 44
    59be:	8d 7f       	andi	r24, 0xFD	; 253
    59c0:	8c bd       	out	0x2c, r24	; 44
    59c2:	8c b5       	in	r24, 0x2c	; 44
    59c4:	8e 7f       	andi	r24, 0xFE	; 254
    59c6:	8c bd       	out	0x2c, r24	; 44
    59c8:	c0 92 ba 17 	sts	0x17BA, r12	; 0x8017ba <SPI0_Speed_value>
    59cc:	d0 92 bb 17 	sts	0x17BB, r13	; 0x8017bb <SPI0_Speed_value+0x1>
    59d0:	e0 92 bc 17 	sts	0x17BC, r14	; 0x8017bc <SPI0_Speed_value+0x2>
    59d4:	f0 92 bd 17 	sts	0x17BD, r15	; 0x8017bd <SPI0_Speed_value+0x3>
    59d8:	ff 90       	pop	r15
    59da:	ef 90       	pop	r14
    59dc:	df 90       	pop	r13
    59de:	cf 90       	pop	r12
    59e0:	08 95       	ret

000059e2 <SPI0_Mode>:
    59e2:	cf 93       	push	r28
    59e4:	df 93       	push	r29
    59e6:	ec 01       	movw	r28, r24
    59e8:	81 30       	cpi	r24, 0x01	; 1
    59ea:	91 05       	cpc	r25, r1
    59ec:	71 f0       	breq	.+28     	; 0x5a0a <SPI0_Mode+0x28>
    59ee:	2c f4       	brge	.+10     	; 0x59fa <SPI0_Mode+0x18>
    59f0:	89 2b       	or	r24, r25
    59f2:	c1 f4       	brne	.+48     	; 0x5a24 <SPI0_Mode+0x42>
    59f4:	8c b5       	in	r24, 0x2c	; 44
    59f6:	87 7f       	andi	r24, 0xF7	; 247
    59f8:	11 c0       	rjmp	.+34     	; 0x5a1c <SPI0_Mode+0x3a>
    59fa:	82 30       	cpi	r24, 0x02	; 2
    59fc:	91 05       	cpc	r25, r1
    59fe:	61 f0       	breq	.+24     	; 0x5a18 <SPI0_Mode+0x36>
    5a00:	03 97       	sbiw	r24, 0x03	; 3
    5a02:	81 f4       	brne	.+32     	; 0x5a24 <SPI0_Mode+0x42>
    5a04:	8c b5       	in	r24, 0x2c	; 44
    5a06:	88 60       	ori	r24, 0x08	; 8
    5a08:	02 c0       	rjmp	.+4      	; 0x5a0e <SPI0_Mode+0x2c>
    5a0a:	8c b5       	in	r24, 0x2c	; 44
    5a0c:	87 7f       	andi	r24, 0xF7	; 247
    5a0e:	8c bd       	out	0x2c, r24	; 44
    5a10:	8c b5       	in	r24, 0x2c	; 44
    5a12:	84 60       	ori	r24, 0x04	; 4
    5a14:	8c bd       	out	0x2c, r24	; 44
    5a16:	14 c0       	rjmp	.+40     	; 0x5a40 <SPI0_Mode+0x5e>
    5a18:	8c b5       	in	r24, 0x2c	; 44
    5a1a:	88 60       	ori	r24, 0x08	; 8
    5a1c:	8c bd       	out	0x2c, r24	; 44
    5a1e:	8c b5       	in	r24, 0x2c	; 44
    5a20:	8b 7f       	andi	r24, 0xFB	; 251
    5a22:	f8 cf       	rjmp	.-16     	; 0x5a14 <SPI0_Mode+0x32>
    5a24:	df 93       	push	r29
    5a26:	cf 93       	push	r28
    5a28:	84 e2       	ldi	r24, 0x24	; 36
    5a2a:	94 e0       	ldi	r25, 0x04	; 4
    5a2c:	1f 92       	push	r1
    5a2e:	9f 93       	push	r25
    5a30:	8f 93       	push	r24
    5a32:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    5a36:	0f 90       	pop	r0
    5a38:	0f 90       	pop	r0
    5a3a:	0f 90       	pop	r0
    5a3c:	0f 90       	pop	r0
    5a3e:	0f 90       	pop	r0
    5a40:	d0 93 b9 17 	sts	0x17B9, r29	; 0x8017b9 <__data_end+0x1>
    5a44:	c0 93 b8 17 	sts	0x17B8, r28	; 0x8017b8 <__data_end>
    5a48:	df 91       	pop	r29
    5a4a:	cf 91       	pop	r28
    5a4c:	08 95       	ret

00005a4e <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    5a4e:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    5a50:	0d b4       	in	r0, 0x2d	; 45
    5a52:	07 fe       	sbrs	r0, 7
    5a54:	fd cf       	rjmp	.-6      	; 0x5a50 <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    5a56:	8e b5       	in	r24, 0x2e	; 46
}
    5a58:	08 95       	ret

00005a5a <SPI0_Init>:

///@brief Initialize SPI0 device.
///
/// - Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    5a5a:	cf 92       	push	r12
    5a5c:	df 92       	push	r13
    5a5e:	ef 92       	push	r14
    5a60:	ff 92       	push	r15
    5a62:	6b 01       	movw	r12, r22
    5a64:	7c 01       	movw	r14, r24

    GPIO_PIN_HI(SS);                                    // SS Output HI
    5a66:	2c 9a       	sbi	0x05, 4	; 5
    5a68:	24 9a       	sbi	0x04, 4	; 4

    delayus(10);
    5a6a:	6a e0       	ldi	r22, 0x0A	; 10
    5a6c:	70 e0       	ldi	r23, 0x00	; 0
    5a6e:	80 e0       	ldi	r24, 0x00	; 0
    5a70:	90 e0       	ldi	r25, 0x00	; 0
    5a72:	2b dd       	rcall	.-1450   	; 0x54ca <delayus>

    GPIO_PIN_HI(SCK);                                   // SCK Output
    5a74:	2f 9a       	sbi	0x05, 7	; 5
    5a76:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                                  // MOSI Output
    5a78:	2d 9a       	sbi	0x05, 5	; 5
    5a7a:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                               // MISO Input, no pull-up
    5a7c:	26 98       	cbi	0x04, 6	; 4

    BIT_SET(SPCR, SPE);                           // Enable SPI
    5a7e:	8c b5       	in	r24, 0x2c	; 44
    5a80:	80 64       	ori	r24, 0x40	; 64
    5a82:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, MSTR);                          // Master Mode
    5a84:	8c b5       	in	r24, 0x2c	; 44
    5a86:	80 61       	ori	r24, 0x10	; 16
    5a88:	8c bd       	out	0x2c, r24	; 44

    SPI0_Mode(0);
    5a8a:	80 e0       	ldi	r24, 0x00	; 0
    5a8c:	90 e0       	ldi	r25, 0x00	; 0
    SPI0_Speed(speed);
    5a8e:	a9 df       	rcall	.-174    	; 0x59e2 <SPI0_Mode>
    5a90:	c7 01       	movw	r24, r14
    SPI0_TXRX_Byte(0xff);
    5a92:	b6 01       	movw	r22, r12
    5a94:	3f df       	rcall	.-386    	; 0x5914 <SPI0_Speed>
    5a96:	8f ef       	ldi	r24, 0xFF	; 255
	SPI0_Init_state = 1;
}
    5a98:	da df       	rcall	.-76     	; 0x5a4e <SPI0_TXRX_Byte>
    5a9a:	ff 90       	pop	r15
    5a9c:	ef 90       	pop	r14
    5a9e:	df 90       	pop	r13
    5aa0:	cf 90       	pop	r12
    5aa2:	08 95       	ret

00005aa4 <SPI0_TX>:
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    5aa4:	0f 93       	push	r16
    5aa6:	1f 93       	push	r17
    5aa8:	cf 93       	push	r28
    5aaa:	df 93       	push	r29
    5aac:	8c 01       	movw	r16, r24
    5aae:	eb 01       	movw	r28, r22

    while(count > 0)
    5ab0:	1c 16       	cp	r1, r28
    5ab2:	1d 06       	cpc	r1, r29
    5ab4:	34 f4       	brge	.+12     	; 0x5ac2 <SPI0_TX+0x1e>
    {
		SPI0_TXRX_Byte(*data);
    5ab6:	f8 01       	movw	r30, r16
    5ab8:	81 91       	ld	r24, Z+
    5aba:	8f 01       	movw	r16, r30
    5abc:	c8 df       	rcall	.-112    	; 0x5a4e <SPI0_TXRX_Byte>
		++data;
		--count;
    5abe:	21 97       	sbiw	r28, 0x01	; 1
    5ac0:	f7 cf       	rjmp	.-18     	; 0x5ab0 <SPI0_TX+0xc>
	}
}
    5ac2:	df 91       	pop	r29
    5ac4:	cf 91       	pop	r28
    5ac6:	1f 91       	pop	r17
    5ac8:	0f 91       	pop	r16
    5aca:	08 95       	ret

00005acc <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    5acc:	0f 93       	push	r16
    5ace:	1f 93       	push	r17
    5ad0:	cf 93       	push	r28
    5ad2:	df 93       	push	r29
    5ad4:	8c 01       	movw	r16, r24
    5ad6:	eb 01       	movw	r28, r22

    while(count > 0)
    5ad8:	1c 16       	cp	r1, r28
    5ada:	1d 06       	cpc	r1, r29
    5adc:	44 f4       	brge	.+16     	; 0x5aee <SPI0_TXRX+0x22>
    {
		*data = SPI0_TXRX_Byte(*data);
    5ade:	f8 01       	movw	r30, r16
    5ae0:	80 81       	ld	r24, Z
    5ae2:	b5 df       	rcall	.-150    	; 0x5a4e <SPI0_TXRX_Byte>
    5ae4:	f8 01       	movw	r30, r16
    5ae6:	81 93       	st	Z+, r24
    5ae8:	8f 01       	movw	r16, r30
		++data;
		--count;
    5aea:	21 97       	sbiw	r28, 0x01	; 1
    5aec:	f5 cf       	rjmp	.-22     	; 0x5ad8 <SPI0_TXRX+0xc>
	}
}
    5aee:	df 91       	pop	r29
    5af0:	cf 91       	pop	r28
    5af2:	1f 91       	pop	r17
    5af4:	0f 91       	pop	r16
    5af6:	08 95       	ret

00005af8 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    5af8:	0f 93       	push	r16
    5afa:	1f 93       	push	r17
    5afc:	cf 93       	push	r28
    5afe:	df 93       	push	r29
    5b00:	8c 01       	movw	r16, r24
    5b02:	eb 01       	movw	r28, r22

    while(count > 0)
    5b04:	1c 16       	cp	r1, r28
    5b06:	1d 06       	cpc	r1, r29
    5b08:	3c f4       	brge	.+14     	; 0x5b18 <SPI0_RX+0x20>
    {
		*data = SPI0_TXRX_Byte(0xff);
    5b0a:	8f ef       	ldi	r24, 0xFF	; 255
    5b0c:	a0 df       	rcall	.-192    	; 0x5a4e <SPI0_TXRX_Byte>
    5b0e:	f8 01       	movw	r30, r16
    5b10:	81 93       	st	Z+, r24
    5b12:	8f 01       	movw	r16, r30
		++data;
		--count;
    5b14:	21 97       	sbiw	r28, 0x01	; 1
    5b16:	f6 cf       	rjmp	.-20     	; 0x5b04 <SPI0_RX+0xc>
	}
}
    5b18:	df 91       	pop	r29
    5b1a:	cf 91       	pop	r28
    5b1c:	1f 91       	pop	r17
    5b1e:	0f 91       	pop	r16
    5b20:	08 95       	ret

00005b22 <TWI_Init>:
///
///@return void.
void TWI_Init(const uint8_t Prescale, const uint8_t BitLength)
{

    GPIO_PIN_LATCH_HI(SCL);                   // Pull Up on
    5b22:	40 9a       	sbi	0x08, 0	; 8
    GPIO_PIN_LATCH_HI(SDA);                   // Pull Up on
    5b24:	41 9a       	sbi	0x08, 1	; 8

    BIT_SET(TWCR,TWEN);
    5b26:	ec eb       	ldi	r30, 0xBC	; 188
    5b28:	f0 e0       	ldi	r31, 0x00	; 0
    5b2a:	90 81       	ld	r25, Z
    5b2c:	94 60       	ori	r25, 0x04	; 4
    5b2e:	90 83       	st	Z, r25

    TWSR  = Prescale;
    5b30:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR  = BitLength;
    5b34:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5b38:	08 95       	ret

00005b3a <TWI_StopTransmission>:


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5b3a:	84 e9       	ldi	r24, 0x94	; 148
    5b3c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b40:	08 95       	ret

00005b42 <TWI_StartTransmission>:
    for (;;)
    {
        bool     BusCaptured = false;
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5b42:	94 ea       	ldi	r25, 0xA4	; 164
    5b44:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b48:	24 e6       	ldi	r18, 0x64	; 100
    5b4a:	62 9f       	mul	r22, r18
    5b4c:	b0 01       	movw	r22, r0
    5b4e:	11 24       	eor	r1, r1
    5b50:	61 50       	subi	r22, 0x01	; 1
    5b52:	71 09       	sbc	r23, r1

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5b54:	9b 01       	movw	r18, r22
///@return TWI error value on fail.
uint8_t TWI_StartTransmission(const uint8_t SlaveAddress, const uint8_t TimeoutMS)
{
    for (;;)
    {
        bool     BusCaptured = false;
    5b56:	40 e0       	ldi	r20, 0x00	; 0
    5b58:	50 e0       	ldi	r21, 0x00	; 0
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5b5a:	e4 ea       	ldi	r30, 0xA4	; 164
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5b5c:	2f 3f       	cpi	r18, 0xFF	; 255
    5b5e:	9f ef       	ldi	r25, 0xFF	; 255
    5b60:	39 07       	cpc	r19, r25
    5b62:	41 f1       	breq	.+80     	; 0x5bb4 <TWI_StartTransmission+0x72>
    5b64:	41 15       	cp	r20, r1
    5b66:	51 05       	cpc	r21, r1
    5b68:	f1 f4       	brne	.+60     	; 0x5ba6 <TWI_StartTransmission+0x64>
        {
            if (TWCR & (1 << TWINT))
    5b6a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b6e:	97 ff       	sbrs	r25, 7
    5b70:	13 c0       	rjmp	.+38     	; 0x5b98 <TWI_StartTransmission+0x56>
            {
                switch (TWSR & TW_STATUS_MASK)
    5b72:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b76:	98 7f       	andi	r25, 0xF8	; 248
    5b78:	90 31       	cpi	r25, 0x10	; 16
    5b7a:	61 f0       	breq	.+24     	; 0x5b94 <TWI_StartTransmission+0x52>
    5b7c:	98 33       	cpi	r25, 0x38	; 56
    5b7e:	39 f0       	breq	.+14     	; 0x5b8e <TWI_StartTransmission+0x4c>
    5b80:	98 30       	cpi	r25, 0x08	; 8
    5b82:	41 f0       	breq	.+16     	; 0x5b94 <TWI_StartTransmission+0x52>
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
                        continue;
                    default:
                        TWCR = (1 << TWEN);
    5b84:	84 e0       	ldi	r24, 0x04	; 4
    5b86:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        return TWI_ERROR_BusFault;
    5b8a:	81 e0       	ldi	r24, 0x01	; 1
    5b8c:	08 95       	ret
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5b8e:	e0 93 bc 00 	sts	0x00BC, r30	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        continue;
    5b92:	06 c0       	rjmp	.+12     	; 0x5ba0 <TWI_StartTransmission+0x5e>
            {
                switch (TWSR & TW_STATUS_MASK)
                {
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
    5b94:	41 e0       	ldi	r20, 0x01	; 1
    5b96:	50 e0       	ldi	r21, 0x00	; 0
    5b98:	92 e4       	ldi	r25, 0x42	; 66
    5b9a:	9a 95       	dec	r25
    5b9c:	f1 f7       	brne	.-4      	; 0x5b9a <TWI_StartTransmission+0x58>
    5b9e:	00 c0       	rjmp	.+0      	; 0x5ba0 <TWI_StartTransmission+0x5e>
    5ba0:	21 50       	subi	r18, 0x01	; 1
    5ba2:	31 09       	sbc	r19, r1
    5ba4:	db cf       	rjmp	.-74     	; 0x5b5c <TWI_StartTransmission+0x1a>
            }

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5ba6:	23 2b       	or	r18, r19
    5ba8:	29 f4       	brne	.+10     	; 0x5bb4 <TWI_StartTransmission+0x72>
        {
            TWCR = (1 << TWEN);
    5baa:	84 e0       	ldi	r24, 0x04	; 4
    5bac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            return TWI_ERROR_BusCaptureTimeout;
    5bb0:	82 e0       	ldi	r24, 0x02	; 2
    5bb2:	08 95       	ret
        }

        TWDR = SlaveAddress;
    5bb4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = ((1 << TWINT) | (1 << TWEN));
    5bb8:	84 e8       	ldi	r24, 0x84	; 132
    5bba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining--)
    5bbe:	6f 3f       	cpi	r22, 0xFF	; 255
    5bc0:	8f ef       	ldi	r24, 0xFF	; 255
    5bc2:	78 07       	cpc	r23, r24
    5bc4:	71 f0       	breq	.+28     	; 0x5be2 <TWI_StartTransmission+0xa0>
        {
            if (TWCR & (1 << TWINT))
    5bc6:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5bca:	cb 01       	movw	r24, r22
    5bcc:	01 97       	sbiw	r24, 0x01	; 1
    5bce:	27 fd       	sbrc	r18, 7
    5bd0:	06 c0       	rjmp	.+12     	; 0x5bde <TWI_StartTransmission+0x9c>
    5bd2:	22 e4       	ldi	r18, 0x42	; 66
    5bd4:	2a 95       	dec	r18
    5bd6:	f1 f7       	brne	.-4      	; 0x5bd4 <TWI_StartTransmission+0x92>
    5bd8:	00 c0       	rjmp	.+0      	; 0x5bda <TWI_StartTransmission+0x98>
    5bda:	bc 01       	movw	r22, r24
    5bdc:	f0 cf       	rjmp	.-32     	; 0x5bbe <TWI_StartTransmission+0x7c>
                break;

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5bde:	67 2b       	or	r22, r23
    5be0:	61 f0       	breq	.+24     	; 0x5bfa <TWI_StartTransmission+0xb8>
            return TWI_ERROR_SlaveResponseTimeout;

        switch (TWSR & TW_STATUS_MASK)
    5be2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5be6:	88 7f       	andi	r24, 0xF8	; 248
    5be8:	88 31       	cpi	r24, 0x18	; 24
    5bea:	49 f0       	breq	.+18     	; 0x5bfe <TWI_StartTransmission+0xbc>
    5bec:	80 34       	cpi	r24, 0x40	; 64
    5bee:	39 f0       	breq	.+14     	; 0x5bfe <TWI_StartTransmission+0xbc>
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5bf0:	84 e9       	ldi	r24, 0x94	; 148
    5bf2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                return TWI_ERROR_SlaveNotReady;
    5bf6:	84 e0       	ldi	r24, 0x04	; 4
    5bf8:	08 95       	ret

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
            return TWI_ERROR_SlaveResponseTimeout;
    5bfa:	83 e0       	ldi	r24, 0x03	; 3
    5bfc:	08 95       	ret

        switch (TWSR & TW_STATUS_MASK)
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
    5bfe:	80 e0       	ldi	r24, 0x00	; 0
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
                return TWI_ERROR_SlaveNotReady;
        }
    }
}
    5c00:	08 95       	ret

00005c02 <TWI_SendByte>:
///
///@return 1 if Acknowledge.
///@return 0 on fail.
bool TWI_SendByte(const uint8_t Byte)
{
    TWDR = Byte;
    5c02:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = ((1 << TWINT) | (1 << TWEN));
    5c06:	84 e8       	ldi	r24, 0x84	; 132
    5c08:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!(TWCR & (1 << TWINT)));
    5c0c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5c10:	87 ff       	sbrs	r24, 7
    5c12:	fc cf       	rjmp	.-8      	; 0x5c0c <TWI_SendByte+0xa>

    return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    5c14:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5c18:	98 7f       	andi	r25, 0xF8	; 248
    5c1a:	21 e0       	ldi	r18, 0x01	; 1
    5c1c:	30 e0       	ldi	r19, 0x00	; 0
    5c1e:	98 32       	cpi	r25, 0x28	; 40
    5c20:	11 f0       	breq	.+4      	; 0x5c26 <TWI_SendByte+0x24>
    5c22:	20 e0       	ldi	r18, 0x00	; 0
    5c24:	30 e0       	ldi	r19, 0x00	; 0
}
    5c26:	c9 01       	movw	r24, r18
    5c28:	08 95       	ret

00005c2a <TWI_ReceiveByte>:


bool TWI_ReceiveByte(uint8_t* const Byte,
const bool LastByte)
{
    5c2a:	fc 01       	movw	r30, r24
    uint8_t TWCRMask;

    if (LastByte)
    5c2c:	61 15       	cp	r22, r1
    5c2e:	71 05       	cpc	r23, r1
    5c30:	11 f4       	brne	.+4      	; 0x5c36 <TWI_ReceiveByte+0xc>
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
    5c32:	94 ec       	ldi	r25, 0xC4	; 196
    5c34:	01 c0       	rjmp	.+2      	; 0x5c38 <TWI_ReceiveByte+0xe>
const bool LastByte)
{
    uint8_t TWCRMask;

    if (LastByte)
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    5c36:	94 e8       	ldi	r25, 0x84	; 132
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));

    TWCR = TWCRMask;
    5c38:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!BIT_TST(TWCR, TWINT))
    5c3c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5c40:	87 ff       	sbrs	r24, 7
    5c42:	fc cf       	rjmp	.-8      	; 0x5c3c <TWI_ReceiveByte+0x12>
        ;
    *Byte = TWDR;
    5c44:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5c48:	80 83       	st	Z, r24

    uint8_t Status = (TWSR & TW_STATUS_MASK);
    5c4a:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5c4e:	28 7f       	andi	r18, 0xF8	; 248

    return ((LastByte) ? (Status == TW_MR_DATA_NACK) : (Status == TW_MR_DATA_ACK));
    5c50:	81 e0       	ldi	r24, 0x01	; 1
    5c52:	90 e0       	ldi	r25, 0x00	; 0
    5c54:	67 2b       	or	r22, r23
    5c56:	19 f0       	breq	.+6      	; 0x5c5e <TWI_ReceiveByte+0x34>
    5c58:	28 35       	cpi	r18, 0x58	; 88
    5c5a:	19 f4       	brne	.+6      	; 0x5c62 <TWI_ReceiveByte+0x38>
    5c5c:	03 c0       	rjmp	.+6      	; 0x5c64 <TWI_ReceiveByte+0x3a>
    5c5e:	20 35       	cpi	r18, 0x50	; 80
    5c60:	09 f0       	breq	.+2      	; 0x5c64 <TWI_ReceiveByte+0x3a>
    5c62:	80 e0       	ldi	r24, 0x00	; 0
}
    5c64:	08 95       	ret

00005c66 <TWI_ReadPacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
uint8_t* Buffer,
uint8_t Length)
{
    5c66:	a0 e0       	ldi	r26, 0x00	; 0
    5c68:	b0 e0       	ldi	r27, 0x00	; 0
    5c6a:	e9 e3       	ldi	r30, 0x39	; 57
    5c6c:	fe e2       	ldi	r31, 0x2E	; 46
    5c6e:	0c 94 3b ec 	jmp	0x1d876	; 0x1d876 <__prologue_saves__+0xe>
    5c72:	f8 2e       	mov	r15, r24
    5c74:	b6 2e       	mov	r11, r22
    5c76:	94 2e       	mov	r9, r20
    5c78:	a5 2e       	mov	r10, r21
    5c7a:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5c7c:	8e 7f       	andi	r24, 0xFE	; 254
    5c7e:	61 df       	rcall	.-318    	; 0x5b42 <TWI_StartTransmission>
    5c80:	d8 2f       	mov	r29, r24
    5c82:	81 11       	cpse	r24, r1
    5c84:	2b c0       	rjmp	.+86     	; 0x5cdc <TWI_ReadPacket+0x76>
    5c86:	c9 2c       	mov	r12, r9
    5c88:	da 2c       	mov	r13, r10
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5c8a:	cc 23       	and	r28, r28
    5c8c:	39 f0       	breq	.+14     	; 0x5c9c <TWI_ReadPacket+0x36>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5c8e:	f6 01       	movw	r30, r12
    5c90:	81 91       	ld	r24, Z+
    5c92:	6f 01       	movw	r12, r30
    5c94:	b6 df       	rcall	.-148    	; 0x5c02 <TWI_SendByte>
    5c96:	c1 50       	subi	r28, 0x01	; 1
    5c98:	89 2b       	or	r24, r25
    5c9a:	b9 f7       	brne	.-18     	; 0x5c8a <TWI_ReadPacket+0x24>
                ErrorCode = TWI_ERROR_SlaveNAK;
                break;
            }
        }

        if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
    5c9c:	6b 2d       	mov	r22, r11
    5c9e:	8f 2d       	mov	r24, r15
    5ca0:	81 60       	ori	r24, 0x01	; 1
    5ca2:	4f df       	rcall	.-354    	; 0x5b42 <TWI_StartTransmission>
    5ca4:	d8 2f       	mov	r29, r24
    5ca6:	81 11       	cpse	r24, r1
    5ca8:	19 c0       	rjmp	.+50     	; 0x5cdc <TWI_ReadPacket+0x76>
    5caa:	cf ef       	ldi	r28, 0xFF	; 255
    5cac:	ce 0d       	add	r28, r14
            TimeoutMS)) == TWI_ERROR_NoError)
        {
            while (Length--)
    5cae:	cf 3f       	cpi	r28, 0xFF	; 255
    5cb0:	91 f0       	breq	.+36     	; 0x5cd6 <TWI_ReadPacket+0x70>
            {
                if (!(TWI_ReceiveByte(Buffer++, (Length == 0))))
    5cb2:	78 01       	movw	r14, r16
    5cb4:	ff ef       	ldi	r31, 0xFF	; 255
    5cb6:	ef 1a       	sub	r14, r31
    5cb8:	ff 0a       	sbc	r15, r31
    5cba:	61 e0       	ldi	r22, 0x01	; 1
    5cbc:	70 e0       	ldi	r23, 0x00	; 0
    5cbe:	cc 23       	and	r28, r28
    5cc0:	11 f0       	breq	.+4      	; 0x5cc6 <TWI_ReadPacket+0x60>
    5cc2:	60 e0       	ldi	r22, 0x00	; 0
    5cc4:	70 e0       	ldi	r23, 0x00	; 0
    5cc6:	c8 01       	movw	r24, r16
    5cc8:	b0 df       	rcall	.-160    	; 0x5c2a <TWI_ReceiveByte>
    5cca:	c1 50       	subi	r28, 0x01	; 1
    5ccc:	89 2b       	or	r24, r25
    5cce:	11 f0       	breq	.+4      	; 0x5cd4 <TWI_ReadPacket+0x6e>
    5cd0:	87 01       	movw	r16, r14
    5cd2:	ed cf       	rjmp	.-38     	; 0x5cae <TWI_ReadPacket+0x48>
                {
                    ErrorCode = TWI_ERROR_SlaveNAK;
    5cd4:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5cd6:	84 e9       	ldi	r24, 0x94	; 148
    5cd8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            TWI_StopTransmission();
        }
    }

    return ErrorCode;
}
    5cdc:	8d 2f       	mov	r24, r29
    5cde:	cd b7       	in	r28, 0x3d	; 61
    5ce0:	de b7       	in	r29, 0x3e	; 62
    5ce2:	eb e0       	ldi	r30, 0x0B	; 11
    5ce4:	0c 94 57 ec 	jmp	0x1d8ae	; 0x1d8ae <__epilogue_restores__+0xe>

00005ce8 <TWI_WritePacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
const uint8_t* Buffer,
uint8_t Length)
{
    5ce8:	a0 e0       	ldi	r26, 0x00	; 0
    5cea:	b0 e0       	ldi	r27, 0x00	; 0
    5cec:	ea e7       	ldi	r30, 0x7A	; 122
    5cee:	fe e2       	ldi	r31, 0x2E	; 46
    5cf0:	0c 94 3d ec 	jmp	0x1d87a	; 0x1d87a <__prologue_saves__+0x12>
    5cf4:	b4 2e       	mov	r11, r20
    5cf6:	f5 2e       	mov	r15, r21
    5cf8:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5cfa:	8e 7f       	andi	r24, 0xFE	; 254
    5cfc:	22 df       	rcall	.-444    	; 0x5b42 <TWI_StartTransmission>
    5cfe:	d8 2f       	mov	r29, r24
    5d00:	81 11       	cpse	r24, r1
    5d02:	1a c0       	rjmp	.+52     	; 0x5d38 <TWI_WritePacket+0x50>
    5d04:	cb 2c       	mov	r12, r11
    5d06:	df 2c       	mov	r13, r15
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5d08:	cc 23       	and	r28, r28
    5d0a:	41 f0       	breq	.+16     	; 0x5d1c <TWI_WritePacket+0x34>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5d0c:	f6 01       	movw	r30, r12
    5d0e:	81 91       	ld	r24, Z+
    5d10:	6f 01       	movw	r12, r30
    5d12:	77 df       	rcall	.-274    	; 0x5c02 <TWI_SendByte>
    5d14:	c1 50       	subi	r28, 0x01	; 1
    5d16:	89 2b       	or	r24, r25
    5d18:	b9 f7       	brne	.-18     	; 0x5d08 <TWI_WritePacket+0x20>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5d1a:	d5 e0       	ldi	r29, 0x05	; 5
    5d1c:	68 01       	movw	r12, r16
                break;
            }
        }

        while (Length--)
    5d1e:	ee 20       	and	r14, r14
    5d20:	41 f0       	breq	.+16     	; 0x5d32 <TWI_WritePacket+0x4a>
        {
            if (!(TWI_SendByte(*(Buffer++))))
    5d22:	f6 01       	movw	r30, r12
    5d24:	81 91       	ld	r24, Z+
    5d26:	6f 01       	movw	r12, r30
    5d28:	6c df       	rcall	.-296    	; 0x5c02 <TWI_SendByte>
    5d2a:	ea 94       	dec	r14
    5d2c:	89 2b       	or	r24, r25
    5d2e:	b9 f7       	brne	.-18     	; 0x5d1e <TWI_WritePacket+0x36>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5d30:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5d32:	84 e9       	ldi	r24, 0x94	; 148
    5d34:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TWI_StopTransmission();
    }

    return ErrorCode;
}
    5d38:	8d 2f       	mov	r24, r29
    5d3a:	cd b7       	in	r28, 0x3d	; 61
    5d3c:	de b7       	in	r29, 0x3e	; 62
    5d3e:	e9 e0       	ldi	r30, 0x09	; 9
    5d40:	0c 94 59 ec 	jmp	0x1d8b2	; 0x1d8b2 <__epilogue_restores__+0x12>

00005d44 <BINtoBCD>:
        return -1;
    }
    if(b & 8)
        return 0;
    return 1;
}
    5d44:	6a e0       	ldi	r22, 0x0A	; 10
    5d46:	0e 94 94 eb 	call	0x1d728	; 0x1d728 <__udivmodqi4>
    5d4a:	82 95       	swap	r24
    5d4c:	80 7f       	andi	r24, 0xF0	; 240
    5d4e:	89 2b       	or	r24, r25
    5d50:	08 95       	ret

00005d52 <BCDtoBIN>:
    5d52:	98 2f       	mov	r25, r24
    5d54:	92 95       	swap	r25
    5d56:	9f 70       	andi	r25, 0x0F	; 15
    5d58:	8f 70       	andi	r24, 0x0F	; 15
    5d5a:	2a e0       	ldi	r18, 0x0A	; 10
    5d5c:	92 9f       	mul	r25, r18
    5d5e:	80 0d       	add	r24, r0
    5d60:	11 24       	eor	r1, r1
    5d62:	08 95       	ret

00005d64 <rtc_run>:
///  - -1 = check run state.
///
/// @return  run state 0/1 on success.
/// @return -1 on error.
int rtc_run(int run)
{
    5d64:	cf 92       	push	r12
    5d66:	df 92       	push	r13
    5d68:	ef 92       	push	r14
    5d6a:	0f 93       	push	r16
    5d6c:	1f 93       	push	r17
    5d6e:	cf 93       	push	r28
    5d70:	df 93       	push	r29
    5d72:	00 d0       	rcall	.+0      	; 0x5d74 <rtc_run+0x10>
    5d74:	1f 92       	push	r1
    5d76:	cd b7       	in	r28, 0x3d	; 61
    5d78:	de b7       	in	r29, 0x3e	; 62
    5d7a:	6c 01       	movw	r12, r24
    uint8_t  WriteAddress;
    uint8_t  ReadAddress;
    uint8_t b = 0;
    5d7c:	19 82       	std	Y+1, r1	; 0x01

    ReadAddress = 0;
    5d7e:	1a 82       	std	Y+2, r1	; 0x02
    if (TWI_ReadPacket(DS1307_R, 20, &ReadAddress, sizeof(ReadAddress),
    5d80:	ee 24       	eor	r14, r14
    5d82:	e3 94       	inc	r14
    5d84:	8e 01       	movw	r16, r28
    5d86:	0f 5f       	subi	r16, 0xFF	; 255
    5d88:	1f 4f       	sbci	r17, 0xFF	; 255
    5d8a:	21 e0       	ldi	r18, 0x01	; 1
    5d8c:	ae 01       	movw	r20, r28
    5d8e:	4e 5f       	subi	r20, 0xFE	; 254
    5d90:	5f 4f       	sbci	r21, 0xFF	; 255
    5d92:	64 e1       	ldi	r22, 0x14	; 20
    5d94:	81 ed       	ldi	r24, 0xD1	; 209
    5d96:	67 df       	rcall	.-306    	; 0x5c66 <TWI_ReadPacket>
    5d98:	88 23       	and	r24, r24
    5d9a:	19 f0       	breq	.+6      	; 0x5da2 <rtc_run+0x3e>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run read error\n");
    5d9c:	8e ea       	ldi	r24, 0xAE	; 174
    5d9e:	94 e0       	ldi	r25, 0x04	; 4
    5da0:	2a c0       	rjmp	.+84     	; 0x5df6 <rtc_run+0x92>
    5da2:	89 81       	ldd	r24, Y+1	; 0x01
        return -1;
    }

    if(run == -1)
    5da4:	9f ef       	ldi	r25, 0xFF	; 255
    5da6:	c9 16       	cp	r12, r25
    5da8:	d9 06       	cpc	r13, r25
    5daa:	59 f4       	brne	.+22     	; 0x5dc2 <rtc_run+0x5e>
        return ((b & 0x80) ? 0 : 1);
    5dac:	08 2e       	mov	r0, r24
    5dae:	00 0c       	add	r0, r0
    5db0:	99 0b       	sbc	r25, r25
    5db2:	80 95       	com	r24
    5db4:	90 95       	com	r25
    5db6:	89 2f       	mov	r24, r25
    5db8:	88 1f       	adc	r24, r24
    5dba:	88 27       	eor	r24, r24
    5dbc:	88 1f       	adc	r24, r24
    5dbe:	90 e0       	ldi	r25, 0x00	; 0
    5dc0:	26 c0       	rjmp	.+76     	; 0x5e0e <rtc_run+0xaa>

    b = ( b  & 0x7f) | (run ? 0 : 0x80);
    5dc2:	8f 77       	andi	r24, 0x7F	; 127
    5dc4:	c1 14       	cp	r12, r1
    5dc6:	d1 04       	cpc	r13, r1
    5dc8:	11 f4       	brne	.+4      	; 0x5dce <rtc_run+0x6a>
    5dca:	90 e8       	ldi	r25, 0x80	; 128
    5dcc:	01 c0       	rjmp	.+2      	; 0x5dd0 <rtc_run+0x6c>
    5dce:	90 e0       	ldi	r25, 0x00	; 0
    5dd0:	89 2b       	or	r24, r25
    5dd2:	89 83       	std	Y+1, r24	; 0x01

    WriteAddress = 0;
    5dd4:	1b 82       	std	Y+3, r1	; 0x03
    if (TWI_WritePacket(DS1307_W, 20, &WriteAddress, sizeof(WriteAddress),
    5dd6:	ee 24       	eor	r14, r14
    5dd8:	e3 94       	inc	r14
    5dda:	8e 01       	movw	r16, r28
    5ddc:	0f 5f       	subi	r16, 0xFF	; 255
    5dde:	1f 4f       	sbci	r17, 0xFF	; 255
    5de0:	21 e0       	ldi	r18, 0x01	; 1
    5de2:	ae 01       	movw	r20, r28
    5de4:	4d 5f       	subi	r20, 0xFD	; 253
    5de6:	5f 4f       	sbci	r21, 0xFF	; 255
    5de8:	64 e1       	ldi	r22, 0x14	; 20
    5dea:	80 ed       	ldi	r24, 0xD0	; 208
    5dec:	7d df       	rcall	.-262    	; 0x5ce8 <TWI_WritePacket>
    5dee:	88 23       	and	r24, r24
    5df0:	69 f0       	breq	.+26     	; 0x5e0c <rtc_run+0xa8>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run - write error\n");
    5df2:	87 e9       	ldi	r24, 0x97	; 151
    5df4:	94 e0       	ldi	r25, 0x04	; 4
    5df6:	1f 92       	push	r1
    5df8:	9f 93       	push	r25
    5dfa:	8f 93       	push	r24
    5dfc:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        return(-1);
    5e00:	0f 90       	pop	r0
    5e02:	0f 90       	pop	r0
    5e04:	0f 90       	pop	r0
    5e06:	8f ef       	ldi	r24, 0xFF	; 255
    5e08:	9f ef       	ldi	r25, 0xFF	; 255
    5e0a:	01 c0       	rjmp	.+2      	; 0x5e0e <rtc_run+0xaa>
    5e0c:	c6 01       	movw	r24, r12
    }
    return(run);
}
    5e0e:	0f 90       	pop	r0
    5e10:	0f 90       	pop	r0
    5e12:	0f 90       	pop	r0
    5e14:	df 91       	pop	r29
    5e16:	cf 91       	pop	r28
    5e18:	1f 91       	pop	r17
    5e1a:	0f 91       	pop	r16
    5e1c:	ef 90       	pop	r14
    5e1e:	df 90       	pop	r13
    5e20:	cf 90       	pop	r12
    5e22:	08 95       	ret

00005e24 <rtc_write>:
/// @param[in] t: POSIX struct tm * time to set.
///
/// @return 1 on sucess.
/// @return 0 on fail.
uint8_t rtc_write(tm_t *t)
{
    5e24:	ef 92       	push	r14
    5e26:	0f 93       	push	r16
    5e28:	1f 93       	push	r17
    5e2a:	cf 93       	push	r28
    5e2c:	df 93       	push	r29
    5e2e:	cd b7       	in	r28, 0x3d	; 61
    5e30:	de b7       	in	r29, 0x3e	; 62
    5e32:	29 97       	sbiw	r28, 0x09	; 9
    5e34:	0f b6       	in	r0, 0x3f	; 63
    5e36:	f8 94       	cli
    5e38:	de bf       	out	0x3e, r29	; 62
    5e3a:	0f be       	out	0x3f, r0	; 63
    5e3c:	cd bf       	out	0x3d, r28	; 61
    5e3e:	8c 01       	movw	r16, r24
    uint8_t buf[8];
    uint8_t WriteAddress;

    buf[0] =  BINtoBCD(t->tm_sec) & 0x7f;
    5e40:	fc 01       	movw	r30, r24
    5e42:	80 81       	ld	r24, Z
    5e44:	7f df       	rcall	.-258    	; 0x5d44 <BINtoBCD>
    5e46:	8f 77       	andi	r24, 0x7F	; 127
    5e48:	89 83       	std	Y+1, r24	; 0x01
    buf[1] =  BINtoBCD(t->tm_min) & 0x7f;
    5e4a:	f8 01       	movw	r30, r16
    5e4c:	82 81       	ldd	r24, Z+2	; 0x02
    5e4e:	7a df       	rcall	.-268    	; 0x5d44 <BINtoBCD>
    5e50:	8f 77       	andi	r24, 0x7F	; 127
    buf[2] =  BINtoBCD(t->tm_hour) & 0x3f;
    5e52:	8a 83       	std	Y+2, r24	; 0x02
    5e54:	f8 01       	movw	r30, r16
    5e56:	84 81       	ldd	r24, Z+4	; 0x04
    5e58:	75 df       	rcall	.-278    	; 0x5d44 <BINtoBCD>
    5e5a:	8f 73       	andi	r24, 0x3F	; 63
    buf[3] =  ((t->tm_wday & 7) + 1) & 0x0f;
    5e5c:	8b 83       	std	Y+3, r24	; 0x03
    5e5e:	f8 01       	movw	r30, r16
    5e60:	84 85       	ldd	r24, Z+12	; 0x0c
    5e62:	87 70       	andi	r24, 0x07	; 7
    buf[4] =  BINtoBCD(t->tm_mday ) & 0x3f;
    5e64:	8f 5f       	subi	r24, 0xFF	; 255
    5e66:	8c 83       	std	Y+4, r24	; 0x04
    5e68:	86 81       	ldd	r24, Z+6	; 0x06
    5e6a:	6c df       	rcall	.-296    	; 0x5d44 <BINtoBCD>
    buf[5] =  BINtoBCD(t->tm_mon + 1) & 0x1f;
    5e6c:	8f 73       	andi	r24, 0x3F	; 63
    5e6e:	8d 83       	std	Y+5, r24	; 0x05
    5e70:	f8 01       	movw	r30, r16
    5e72:	80 85       	ldd	r24, Z+8	; 0x08
    5e74:	8f 5f       	subi	r24, 0xFF	; 255
    5e76:	66 df       	rcall	.-308    	; 0x5d44 <BINtoBCD>
    buf[6] =  BINtoBCD(t->tm_year - 100) & 0xff;  // 2000 = 0
    5e78:	8f 71       	andi	r24, 0x1F	; 31
    5e7a:	8e 83       	std	Y+6, r24	; 0x06
    5e7c:	f8 01       	movw	r30, r16
    5e7e:	82 85       	ldd	r24, Z+10	; 0x0a
    5e80:	84 56       	subi	r24, 0x64	; 100
    5e82:	60 df       	rcall	.-320    	; 0x5d44 <BINtoBCD>
    buf[7] = 0x93;                                // 32khz, out square wave
    5e84:	8f 83       	std	Y+7, r24	; 0x07
    5e86:	83 e9       	ldi	r24, 0x93	; 147
	for(i=0;i<7;++i)
		printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    WriteAddress = 0;
    5e88:	88 87       	std	Y+8, r24	; 0x08
    if (TWI_WritePacket(DS1307_W, 20, &WriteAddress, sizeof(WriteAddress),
    5e8a:	19 86       	std	Y+9, r1	; 0x09
    5e8c:	88 e0       	ldi	r24, 0x08	; 8
    5e8e:	e8 2e       	mov	r14, r24
    5e90:	8e 01       	movw	r16, r28
    5e92:	0f 5f       	subi	r16, 0xFF	; 255
    5e94:	1f 4f       	sbci	r17, 0xFF	; 255
    5e96:	21 e0       	ldi	r18, 0x01	; 1
    5e98:	ae 01       	movw	r20, r28
    5e9a:	47 5f       	subi	r20, 0xF7	; 247
    5e9c:	5f 4f       	sbci	r21, 0xFF	; 255
    5e9e:	64 e1       	ldi	r22, 0x14	; 20
    5ea0:	80 ed       	ldi	r24, 0xD0	; 208
    5ea2:	22 df       	rcall	.-444    	; 0x5ce8 <TWI_WritePacket>
    5ea4:	88 23       	and	r24, r24
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_write error\n");
    5ea6:	61 f0       	breq	.+24     	; 0x5ec0 <rtc_write+0x9c>
    5ea8:	81 e5       	ldi	r24, 0x51	; 81
    5eaa:	94 e0       	ldi	r25, 0x04	; 4
    5eac:	1f 92       	push	r1
    5eae:	9f 93       	push	r25
    5eb0:	8f 93       	push	r24
    5eb2:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        return(0);
    5eb6:	0f 90       	pop	r0
    5eb8:	0f 90       	pop	r0
    5eba:	0f 90       	pop	r0
    5ebc:	80 e0       	ldi	r24, 0x00	; 0
    }

    return(1);
    5ebe:	01 c0       	rjmp	.+2      	; 0x5ec2 <rtc_write+0x9e>
}
    5ec0:	81 e0       	ldi	r24, 0x01	; 1
    5ec2:	29 96       	adiw	r28, 0x09	; 9
    5ec4:	0f b6       	in	r0, 0x3f	; 63
    5ec6:	f8 94       	cli
    5ec8:	de bf       	out	0x3e, r29	; 62
    5eca:	0f be       	out	0x3f, r0	; 63
    5ecc:	cd bf       	out	0x3d, r28	; 61
    5ece:	df 91       	pop	r29
    5ed0:	cf 91       	pop	r28
    5ed2:	1f 91       	pop	r17
    5ed4:	0f 91       	pop	r16
    5ed6:	ef 90       	pop	r14
    5ed8:	08 95       	ret

00005eda <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  1 on success.
/// @return 0 on fail.
uint8_t rtc_init (int force, time_t seconds)
{
    5eda:	ad e0       	ldi	r26, 0x0D	; 13
    5edc:	b0 e0       	ldi	r27, 0x00	; 0
    5ede:	e3 e7       	ldi	r30, 0x73	; 115
    5ee0:	ff e2       	ldi	r31, 0x2F	; 47
    5ee2:	0c 94 3e ec 	jmp	0x1d87c	; 0x1d87c <__prologue_saves__+0x14>
    5ee6:	6c 01       	movw	r12, r24
    5ee8:	4a 87       	std	Y+10, r20	; 0x0a
    5eea:	5b 87       	std	Y+11, r21	; 0x0b
    5eec:	6c 87       	std	Y+12, r22	; 0x0c
    5eee:	7d 87       	std	Y+13, r23	; 0x0d
    uint8_t  WriteAddress;
    int8_t    state;

    tm_t *tmp;

    TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 50000));
    5ef0:	6a e2       	ldi	r22, 0x2A	; 42
    5ef2:	81 e0       	ldi	r24, 0x01	; 1
    5ef4:	16 de       	rcall	.-980    	; 0x5b22 <TWI_Init>

    if(!force)
    5ef6:	c1 14       	cp	r12, r1
    5ef8:	d1 04       	cpc	r13, r1
    5efa:	09 f0       	breq	.+2      	; 0x5efe <rtc_init+0x24>
    5efc:	42 c0       	rjmp	.+132    	; 0x5f82 <rtc_init+0xa8>
    {
        state = rtc_run(-1);
    5efe:	8f ef       	ldi	r24, 0xFF	; 255
    5f00:	9f ef       	ldi	r25, 0xFF	; 255
    5f02:	30 df       	rcall	.-416    	; 0x5d64 <rtc_run>
        if(state < 0)
    5f04:	87 ff       	sbrs	r24, 7
    5f06:	05 c0       	rjmp	.+10     	; 0x5f12 <rtc_init+0x38>
        {
            rtc_ok = 0;
    5f08:	10 92 4d 1a 	sts	0x1A4D, r1	; 0x801a4d <rtc_ok+0x1>
    5f0c:	10 92 4c 1a 	sts	0x1A4C, r1	; 0x801a4c <rtc_ok>
    5f10:	24 c0       	rjmp	.+72     	; 0x5f5a <rtc_init+0x80>
            return 0;
        }
        if(state == 0)                            // stopped
    5f12:	88 23       	and	r24, r24
    5f14:	b1 f1       	breq	.+108    	; 0x5f82 <rtc_init+0xa8>
    5f16:	2d c0       	rjmp	.+90     	; 0x5f72 <rtc_init+0x98>
            printf("rtc _write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        memset(buf, 0, 8);
    5f18:	ce 01       	movw	r24, r28
    5f1a:	01 96       	adiw	r24, 0x01	; 1
    5f1c:	6c 01       	movw	r12, r24
    5f1e:	88 e0       	ldi	r24, 0x08	; 8
    5f20:	f6 01       	movw	r30, r12
    5f22:	11 92       	st	Z+, r1
    5f24:	8a 95       	dec	r24
    5f26:	e9 f7       	brne	.-6      	; 0x5f22 <rtc_init+0x48>
        for (addr = 8; addr < 0x3f; addr += 8)
    5f28:	98 e0       	ldi	r25, 0x08	; 8
    5f2a:	f9 2e       	mov	r15, r25
        {
            WriteAddress = addr;
    5f2c:	f9 86       	std	Y+9, r15	; 0x09
            if (TWI_WritePacket(DS1307_W, 20, &WriteAddress, sizeof(WriteAddress),
    5f2e:	88 e0       	ldi	r24, 0x08	; 8
    5f30:	e8 2e       	mov	r14, r24
    5f32:	86 01       	movw	r16, r12
    5f34:	21 e0       	ldi	r18, 0x01	; 1
    5f36:	ae 01       	movw	r20, r28
    5f38:	47 5f       	subi	r20, 0xF7	; 247
    5f3a:	5f 4f       	sbci	r21, 0xFF	; 255
    5f3c:	64 e1       	ldi	r22, 0x14	; 20
    5f3e:	80 ed       	ldi	r24, 0xD0	; 208
    5f40:	d3 de       	rcall	.-602    	; 0x5ce8 <TWI_WritePacket>
    5f42:	88 23       	and	r24, r24
    5f44:	61 f0       	breq	.+24     	; 0x5f5e <rtc_init+0x84>
                (uint8_t*)buf, 8) != TWI_ERROR_NoError)
            {
                printf("rtc_init ram - write error\n");
    5f46:	82 e6       	ldi	r24, 0x62	; 98
    5f48:	94 e0       	ldi	r25, 0x04	; 4
    5f4a:	1f 92       	push	r1
    5f4c:	9f 93       	push	r25
    5f4e:	8f 93       	push	r24
    5f50:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
                return(0);
    5f54:	0f 90       	pop	r0
    5f56:	0f 90       	pop	r0
    5f58:	0f 90       	pop	r0
    5f5a:	10 e0       	ldi	r17, 0x00	; 0
    5f5c:	2d c0       	rjmp	.+90     	; 0x5fb8 <rtc_init+0xde>
            rtc_ok = 0;
            return 0;
        }

        memset(buf, 0, 8);
        for (addr = 8; addr < 0x3f; addr += 8)
    5f5e:	f8 e0       	ldi	r31, 0x08	; 8
    5f60:	ff 0e       	add	r15, r31
    5f62:	80 e4       	ldi	r24, 0x40	; 64
    5f64:	f8 12       	cpse	r15, r24
                printf("rtc_init ram - write error\n");
                return(0);
            }
        }

        if(rtc_run(1) < 0)                        // START RTC
    5f66:	e2 cf       	rjmp	.-60     	; 0x5f2c <rtc_init+0x52>
    5f68:	81 e0       	ldi	r24, 0x01	; 1
    5f6a:	90 e0       	ldi	r25, 0x00	; 0
    5f6c:	fb de       	rcall	.-522    	; 0x5d64 <rtc_run>
    5f6e:	97 fd       	sbrc	r25, 7
    5f70:	cb cf       	rjmp	.-106    	; 0x5f08 <rtc_init+0x2e>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    5f72:	81 e0       	ldi	r24, 0x01	; 1
    5f74:	90 e0       	ldi	r25, 0x00	; 0
    5f76:	90 93 4d 1a 	sts	0x1A4D, r25	; 0x801a4d <rtc_ok+0x1>
    5f7a:	80 93 4c 1a 	sts	0x1A4C, r24	; 0x801a4c <rtc_ok>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    5f7e:	11 e0       	ldi	r17, 0x01	; 1
    5f80:	1b c0       	rjmp	.+54     	; 0x5fb8 <rtc_init+0xde>
    5f82:	80 e0       	ldi	r24, 0x00	; 0
    5f84:	90 e0       	ldi	r25, 0x00	; 0
    5f86:	ee de       	rcall	.-548    	; 0x5d64 <rtc_run>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
        tmp = gmtime(&seconds);
    5f88:	97 fd       	sbrc	r25, 7
    5f8a:	be cf       	rjmp	.-132    	; 0x5f08 <rtc_init+0x2e>
    5f8c:	ce 01       	movw	r24, r28
    5f8e:	0a 96       	adiw	r24, 0x0a	; 10
        if(!rtc_write(tmp))
    5f90:	0e 94 2e 38 	call	0x705c	; 0x705c <gmtime>
    5f94:	47 df       	rcall	.-370    	; 0x5e24 <rtc_write>
    5f96:	18 2f       	mov	r17, r24
    5f98:	81 11       	cpse	r24, r1
        {
            printf("rtc _write epoch failed\n");
    5f9a:	be cf       	rjmp	.-132    	; 0x5f18 <rtc_init+0x3e>
    5f9c:	8e e7       	ldi	r24, 0x7E	; 126
    5f9e:	94 e0       	ldi	r25, 0x04	; 4
    5fa0:	1f 92       	push	r1
    5fa2:	9f 93       	push	r25
    5fa4:	8f 93       	push	r24
    5fa6:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
            rtc_ok = 0;
    5faa:	10 92 4d 1a 	sts	0x1A4D, r1	; 0x801a4d <rtc_ok+0x1>
    5fae:	10 92 4c 1a 	sts	0x1A4C, r1	; 0x801a4c <rtc_ok>
            return 0;
    5fb2:	0f 90       	pop	r0
    5fb4:	0f 90       	pop	r0
            return 0;
        }
    }
    rtc_ok = 1;
    return 1;
}
    5fb6:	0f 90       	pop	r0
    5fb8:	81 2f       	mov	r24, r17
    5fba:	2d 96       	adiw	r28, 0x0d	; 13
    5fbc:	e8 e0       	ldi	r30, 0x08	; 8
    5fbe:	0c 94 5a ec 	jmp	0x1d8b4	; 0x1d8b4 <__epilogue_restores__+0x14>

00005fc2 <rtc_read>:
///
/// @param[out] t: struct tm * POSIX time returned.
/// @return  1 on sucess.
/// @return 0 on fail.
uint8_t rtc_read(tm_t *t)
{
    5fc2:	cf 92       	push	r12
    5fc4:	df 92       	push	r13
    5fc6:	ef 92       	push	r14
    5fc8:	0f 93       	push	r16
    5fca:	1f 93       	push	r17
    5fcc:	cf 93       	push	r28
    5fce:	df 93       	push	r29
    5fd0:	cd b7       	in	r28, 0x3d	; 61
    5fd2:	de b7       	in	r29, 0x3e	; 62
    5fd4:	29 97       	sbiw	r28, 0x09	; 9
    5fd6:	0f b6       	in	r0, 0x3f	; 63
    5fd8:	f8 94       	cli
    5fda:	de bf       	out	0x3e, r29	; 62
    5fdc:	0f be       	out	0x3f, r0	; 63
    5fde:	cd bf       	out	0x3d, r28	; 61
    5fe0:	6c 01       	movw	r12, r24
    uint8_t buf[8];

    uint8_t ReadAddress = 0;
    5fe2:	19 86       	std	Y+9, r1	; 0x09

    ReadAddress = 0;
    if (TWI_ReadPacket(DS1307_R, 20, &ReadAddress, sizeof(ReadAddress),
    5fe4:	88 e0       	ldi	r24, 0x08	; 8
    5fe6:	e8 2e       	mov	r14, r24
    5fe8:	8e 01       	movw	r16, r28
    5fea:	0f 5f       	subi	r16, 0xFF	; 255
    5fec:	1f 4f       	sbci	r17, 0xFF	; 255
    5fee:	21 e0       	ldi	r18, 0x01	; 1
    5ff0:	ae 01       	movw	r20, r28
    5ff2:	47 5f       	subi	r20, 0xF7	; 247
    5ff4:	5f 4f       	sbci	r21, 0xFF	; 255
    5ff6:	64 e1       	ldi	r22, 0x14	; 20
    5ff8:	81 ed       	ldi	r24, 0xD1	; 209
    5ffa:	35 de       	rcall	.-918    	; 0x5c66 <TWI_ReadPacket>
    5ffc:	88 23       	and	r24, r24
    5ffe:	61 f0       	breq	.+24     	; 0x6018 <rtc_read+0x56>
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_read error\n");
    6000:	81 e4       	ldi	r24, 0x41	; 65
    6002:	94 e0       	ldi	r25, 0x04	; 4
    6004:	1f 92       	push	r1
    6006:	9f 93       	push	r25
    6008:	8f 93       	push	r24
    600a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        return 0;
    600e:	0f 90       	pop	r0
    6010:	0f 90       	pop	r0
    6012:	0f 90       	pop	r0
    6014:	80 e0       	ldi	r24, 0x00	; 0
    6016:	33 c0       	rjmp	.+102    	; 0x607e <rtc_read+0xbc>
    for(i=0;i<7;++i)
        printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    t->tm_sec =   BCDtoBIN( buf[0] & 0x7f);
    6018:	89 81       	ldd	r24, Y+1	; 0x01
    601a:	8f 77       	andi	r24, 0x7F	; 127
    601c:	9a de       	rcall	.-716    	; 0x5d52 <BCDtoBIN>
    601e:	90 e0       	ldi	r25, 0x00	; 0
    6020:	f6 01       	movw	r30, r12
    6022:	91 83       	std	Z+1, r25	; 0x01
    t->tm_min =   BCDtoBIN( buf[1] & 0x7f);
    6024:	80 83       	st	Z, r24
    6026:	8a 81       	ldd	r24, Y+2	; 0x02
    6028:	8f 77       	andi	r24, 0x7F	; 127
    602a:	93 de       	rcall	.-730    	; 0x5d52 <BCDtoBIN>
    602c:	90 e0       	ldi	r25, 0x00	; 0
    602e:	f6 01       	movw	r30, r12
    t->tm_hour =  BCDtoBIN( buf[2] & 0x3f);
    6030:	93 83       	std	Z+3, r25	; 0x03
    6032:	82 83       	std	Z+2, r24	; 0x02
    6034:	8b 81       	ldd	r24, Y+3	; 0x03
    6036:	8f 73       	andi	r24, 0x3F	; 63
    6038:	8c de       	rcall	.-744    	; 0x5d52 <BCDtoBIN>
    603a:	90 e0       	ldi	r25, 0x00	; 0
    603c:	f6 01       	movw	r30, r12
    603e:	95 83       	std	Z+5, r25	; 0x05
    t->tm_wday =  ( buf[3] & 0x07) - 1;
    6040:	84 83       	std	Z+4, r24	; 0x04
    6042:	8c 81       	ldd	r24, Y+4	; 0x04
    6044:	87 70       	andi	r24, 0x07	; 7
    6046:	90 e0       	ldi	r25, 0x00	; 0
    6048:	01 97       	sbiw	r24, 0x01	; 1
    t->tm_mday =  BCDtoBIN( buf[4] & 0x3f) ;
    604a:	95 87       	std	Z+13, r25	; 0x0d
    604c:	84 87       	std	Z+12, r24	; 0x0c
    604e:	8d 81       	ldd	r24, Y+5	; 0x05
    6050:	8f 73       	andi	r24, 0x3F	; 63
    6052:	7f de       	rcall	.-770    	; 0x5d52 <BCDtoBIN>
    6054:	90 e0       	ldi	r25, 0x00	; 0
    6056:	f6 01       	movw	r30, r12
    t->tm_mon=    BCDtoBIN( buf[5] & 0x1f) - 1;
    6058:	97 83       	std	Z+7, r25	; 0x07
    605a:	86 83       	std	Z+6, r24	; 0x06
    605c:	8e 81       	ldd	r24, Y+6	; 0x06
    605e:	8f 71       	andi	r24, 0x1F	; 31
    6060:	78 de       	rcall	.-784    	; 0x5d52 <BCDtoBIN>
    6062:	90 e0       	ldi	r25, 0x00	; 0
    6064:	01 97       	sbiw	r24, 0x01	; 1
    6066:	f6 01       	movw	r30, r12
    t->tm_year =  BCDtoBIN( buf[6] & 0xff) + 100;
    6068:	91 87       	std	Z+9, r25	; 0x09
    606a:	80 87       	std	Z+8, r24	; 0x08
    606c:	8f 81       	ldd	r24, Y+7	; 0x07
    606e:	71 de       	rcall	.-798    	; 0x5d52 <BCDtoBIN>
    6070:	90 e0       	ldi	r25, 0x00	; 0
    6072:	8c 59       	subi	r24, 0x9C	; 156
    6074:	9f 4f       	sbci	r25, 0xFF	; 255
    6076:	f6 01       	movw	r30, r12
    6078:	93 87       	std	Z+11, r25	; 0x0b
        t->tm_min,
        t->tm_sec,
        t->tm_wday);
#endif

    return 1;
    607a:	82 87       	std	Z+10, r24	; 0x0a
}
    607c:	81 e0       	ldi	r24, 0x01	; 1
    607e:	29 96       	adiw	r28, 0x09	; 9
    6080:	0f b6       	in	r0, 0x3f	; 63
    6082:	f8 94       	cli
    6084:	de bf       	out	0x3e, r29	; 62
    6086:	0f be       	out	0x3f, r0	; 63
    6088:	cd bf       	out	0x3d, r28	; 61
    608a:	df 91       	pop	r29
    608c:	cf 91       	pop	r28
    608e:	1f 91       	pop	r17
    6090:	0f 91       	pop	r16
    6092:	ef 90       	pop	r14
    6094:	df 90       	pop	r13
    6096:	cf 90       	pop	r12
    6098:	08 95       	ret

0000609a <I2C_Start>:
/*
 *  Move the cursor one character to the right.
 */
void LCD_moveCursorRight()
{
	LCD_moveCursorRightCount(1);
    609a:	64 e1       	ldi	r22, 0x14	; 20
    609c:	52 dd       	rcall	.-1372   	; 0x5b42 <TWI_StartTransmission>
    609e:	81 11       	cpse	r24, r1
    60a0:	07 c0       	rjmp	.+14     	; 0x60b0 <I2C_Start+0x16>
    60a2:	81 e0       	ldi	r24, 0x01	; 1
    60a4:	90 e0       	ldi	r25, 0x00	; 0
    60a6:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <LCD_ok+0x1>
    60aa:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <LCD_ok>
    60ae:	04 c0       	rjmp	.+8      	; 0x60b8 <I2C_Start+0x1e>
    60b0:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <LCD_ok+0x1>
    60b4:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <LCD_ok>
    60b8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <LCD_ok>
    60bc:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <LCD_ok+0x1>
    60c0:	08 95       	ret

000060c2 <I2C_Stop>:
    60c2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <LCD_ok>
    60c6:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <LCD_ok+0x1>
    60ca:	89 2b       	or	r24, r25
    60cc:	09 f0       	breq	.+2      	; 0x60d0 <I2C_Stop+0xe>
    60ce:	35 cd       	rjmp	.-1430   	; 0x5b3a <TWI_StopTransmission>
    60d0:	08 95       	ret

000060d2 <I2C_Send>:
    60d2:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <LCD_ok>
    60d6:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <LCD_ok+0x1>
    60da:	21 15       	cp	r18, r1
    60dc:	31 05       	cpc	r19, r1
    60de:	41 f0       	breq	.+16     	; 0x60f0 <I2C_Send+0x1e>
    60e0:	90 dd       	rcall	.-1248   	; 0x5c02 <TWI_SendByte>
    60e2:	51 e0       	ldi	r21, 0x01	; 1
    60e4:	40 e0       	ldi	r20, 0x00	; 0
    60e6:	89 2b       	or	r24, r25
    60e8:	09 f0       	breq	.+2      	; 0x60ec <I2C_Send+0x1a>
    60ea:	50 e0       	ldi	r21, 0x00	; 0
    60ec:	25 2f       	mov	r18, r21
    60ee:	34 2f       	mov	r19, r20
    60f0:	c9 01       	movw	r24, r18
    60f2:	08 95       	ret

000060f4 <LCD_putb>:
    60f4:	cf 93       	push	r28
    60f6:	c8 2f       	mov	r28, r24
    60f8:	84 ee       	ldi	r24, 0xE4	; 228
    60fa:	cf df       	rcall	.-98     	; 0x609a <I2C_Start>
    60fc:	89 2b       	or	r24, r25
    60fe:	19 f4       	brne	.+6      	; 0x6106 <LCD_putb+0x12>
    6100:	80 e0       	ldi	r24, 0x00	; 0
    6102:	90 e0       	ldi	r25, 0x00	; 0
    6104:	07 c0       	rjmp	.+14     	; 0x6114 <LCD_putb+0x20>
    6106:	8c 2f       	mov	r24, r28
    6108:	e4 df       	rcall	.-56     	; 0x60d2 <I2C_Send>
    610a:	89 2b       	or	r24, r25
    610c:	c9 f3       	breq	.-14     	; 0x6100 <LCD_putb+0xc>
    610e:	d9 df       	rcall	.-78     	; 0x60c2 <I2C_Stop>
    6110:	81 e0       	ldi	r24, 0x01	; 1
    6112:	90 e0       	ldi	r25, 0x00	; 0
    6114:	cf 91       	pop	r28
    6116:	08 95       	ret

00006118 <LCD_command>:
    6118:	cf 93       	push	r28
    611a:	c8 2f       	mov	r28, r24
    611c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcd_address>
    6120:	bc df       	rcall	.-136    	; 0x609a <I2C_Start>
    6122:	89 2b       	or	r24, r25
    6124:	51 f0       	breq	.+20     	; 0x613a <LCD_command+0x22>
    6126:	8c e7       	ldi	r24, 0x7C	; 124
    6128:	d4 df       	rcall	.-88     	; 0x60d2 <I2C_Send>
    612a:	8c 2f       	mov	r24, r28
    612c:	d2 df       	rcall	.-92     	; 0x60d2 <I2C_Send>
    612e:	c9 df       	rcall	.-110    	; 0x60c2 <I2C_Stop>
    6130:	6a e0       	ldi	r22, 0x0A	; 10
    6132:	70 e0       	ldi	r23, 0x00	; 0
    6134:	80 e0       	ldi	r24, 0x00	; 0
    6136:	90 e0       	ldi	r25, 0x00	; 0
    6138:	f5 d9       	rcall	.-3094   	; 0x5524 <delayms>
    613a:	cf 91       	pop	r28
    613c:	08 95       	ret

0000613e <LCD_specialCommand>:
    613e:	cf 93       	push	r28
    6140:	c8 2f       	mov	r28, r24
    6142:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcd_address>
    6146:	a9 df       	rcall	.-174    	; 0x609a <I2C_Start>
    6148:	89 2b       	or	r24, r25
    614a:	51 f0       	breq	.+20     	; 0x6160 <LCD_specialCommand+0x22>
    614c:	8e ef       	ldi	r24, 0xFE	; 254
    614e:	c1 df       	rcall	.-126    	; 0x60d2 <I2C_Send>
    6150:	8c 2f       	mov	r24, r28
    6152:	bf df       	rcall	.-130    	; 0x60d2 <I2C_Send>
    6154:	b6 df       	rcall	.-148    	; 0x60c2 <I2C_Stop>
    6156:	62 e3       	ldi	r22, 0x32	; 50
    6158:	70 e0       	ldi	r23, 0x00	; 0
    615a:	80 e0       	ldi	r24, 0x00	; 0
    615c:	90 e0       	ldi	r25, 0x00	; 0
    615e:	e2 d9       	rcall	.-3132   	; 0x5524 <delayms>
    6160:	cf 91       	pop	r28
    6162:	08 95       	ret

00006164 <LCD_setCursor>:
    6164:	a8 e0       	ldi	r26, 0x08	; 8
    6166:	b0 e0       	ldi	r27, 0x00	; 0
    6168:	e8 eb       	ldi	r30, 0xB8	; 184
    616a:	f0 e3       	ldi	r31, 0x30	; 48
    616c:	0c 94 44 ec 	jmp	0x1d888	; 0x1d888 <__prologue_saves__+0x20>
    6170:	98 e0       	ldi	r25, 0x08	; 8
    6172:	e5 ea       	ldi	r30, 0xA5	; 165
    6174:	f2 e0       	ldi	r31, 0x02	; 2
    6176:	de 01       	movw	r26, r28
    6178:	11 96       	adiw	r26, 0x01	; 1
    617a:	01 90       	ld	r0, Z+
    617c:	0d 92       	st	X+, r0
    617e:	9a 95       	dec	r25
    6180:	e1 f7       	brne	.-8      	; 0x617a <LCD_setCursor+0x16>
    6182:	64 30       	cpi	r22, 0x04	; 4
    6184:	08 f0       	brcs	.+2      	; 0x6188 <LCD_setCursor+0x24>
    6186:	63 e0       	ldi	r22, 0x03	; 3
    6188:	fe 01       	movw	r30, r28
    618a:	31 96       	adiw	r30, 0x01	; 1
    618c:	e6 0f       	add	r30, r22
    618e:	f1 1d       	adc	r31, r1
    6190:	e6 0f       	add	r30, r22
    6192:	f1 1d       	adc	r31, r1
    6194:	90 81       	ld	r25, Z
    6196:	89 0f       	add	r24, r25
    6198:	80 68       	ori	r24, 0x80	; 128
    619a:	d1 df       	rcall	.-94     	; 0x613e <LCD_specialCommand>
    619c:	28 96       	adiw	r28, 0x08	; 8
    619e:	e2 e0       	ldi	r30, 0x02	; 2
    61a0:	0c 94 60 ec 	jmp	0x1d8c0	; 0x1d8c0 <__epilogue_restores__+0x20>

000061a4 <LCD_pos>:
    61a4:	ea e0       	ldi	r30, 0x0A	; 10
    61a6:	f1 e0       	ldi	r31, 0x01	; 1
    61a8:	28 2f       	mov	r18, r24
    61aa:	30 e0       	ldi	r19, 0x00	; 0
    61ac:	31 83       	std	Z+1, r19	; 0x01
    61ae:	20 83       	st	Z, r18
    61b0:	26 2f       	mov	r18, r22
    61b2:	30 e0       	ldi	r19, 0x00	; 0
    61b4:	33 83       	std	Z+3, r19	; 0x03
    61b6:	22 83       	std	Z+2, r18	; 0x02
    61b8:	d5 cf       	rjmp	.-86     	; 0x6164 <LCD_setCursor>
    61ba:	08 95       	ret

000061bc <LCD_clear>:
    61bc:	8d e2       	ldi	r24, 0x2D	; 45
    61be:	ac df       	rcall	.-168    	; 0x6118 <LCD_command>
    61c0:	60 e0       	ldi	r22, 0x00	; 0
    61c2:	80 e0       	ldi	r24, 0x00	; 0
    61c4:	ef df       	rcall	.-34     	; 0x61a4 <LCD_pos>
    61c6:	6a e0       	ldi	r22, 0x0A	; 10
    61c8:	70 e0       	ldi	r23, 0x00	; 0
    61ca:	80 e0       	ldi	r24, 0x00	; 0
    61cc:	90 e0       	ldi	r25, 0x00	; 0
    61ce:	aa c9       	rjmp	.-3244   	; 0x5524 <delayms>
    61d0:	08 95       	ret

000061d2 <LCD_setFastBacklightRGB>:
} // moveCursorRight


//New command - set backlight with LCD messages or delaymss
void LCD_setFastBacklightRGB(byte r, byte g, byte b)
{
    61d2:	1f 93       	push	r17
    61d4:	cf 93       	push	r28
    61d6:	df 93       	push	r29
    61d8:	18 2f       	mov	r17, r24
    61da:	d6 2f       	mov	r29, r22
    61dc:	c4 2f       	mov	r28, r20
  //send commands to the display to set backlights
  if( !I2C_Start(lcd_address) )
    61de:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <lcd_address>
    61e2:	5b df       	rcall	.-330    	; 0x609a <I2C_Start>
    61e4:	89 2b       	or	r24, r25
	return;
  I2C_Send(SETTING_COMMAND); //Send special command character
    61e6:	81 f0       	breq	.+32     	; 0x6208 <LCD_setFastBacklightRGB+0x36>
  I2C_Send(SET_RGB_COMMAND); //Send the set RGB character '+' or plus
    61e8:	8c e7       	ldi	r24, 0x7C	; 124
  I2C_Send(r);               //Send the red value
  I2C_Send(g);               //Send the green value
    61ea:	73 df       	rcall	.-282    	; 0x60d2 <I2C_Send>
    61ec:	8b e2       	ldi	r24, 0x2B	; 43
  I2C_Send(b);               //Send the blue value
    61ee:	71 df       	rcall	.-286    	; 0x60d2 <I2C_Send>
    61f0:	81 2f       	mov	r24, r17
  I2C_Stop();         //Stop transmission
    61f2:	6f df       	rcall	.-290    	; 0x60d2 <I2C_Send>
    61f4:	8d 2f       	mov	r24, r29
  delayms(10);
    61f6:	6d df       	rcall	.-294    	; 0x60d2 <I2C_Send>
    61f8:	8c 2f       	mov	r24, r28
    61fa:	6b df       	rcall	.-298    	; 0x60d2 <I2C_Send>
    61fc:	62 df       	rcall	.-316    	; 0x60c2 <I2C_Stop>
    61fe:	6a e0       	ldi	r22, 0x0A	; 10
    6200:	70 e0       	ldi	r23, 0x00	; 0
} // setFastBacklight
    6202:	80 e0       	ldi	r24, 0x00	; 0
    6204:	90 e0       	ldi	r25, 0x00	; 0
    6206:	8e d9       	rcall	.-3300   	; 0x5524 <delayms>
    6208:	df 91       	pop	r29
    620a:	cf 91       	pop	r28
    620c:	1f 91       	pop	r17
    620e:	08 95       	ret

00006210 <LCD_init>:
 *
 */
bool LCD_init(uint8_t addr)
{
  
  if( !I2C_Start(lcd_address = addr) )
    6210:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <lcd_address>
    6214:	42 df       	rcall	.-380    	; 0x609a <I2C_Start>
    6216:	00 97       	sbiw	r24, 0x00	; 0
	return 0;

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    6218:	61 f1       	breq	.+88     	; 0x6272 <LCD_init+0x62>
    621a:	8e ef       	ldi	r24, 0xFE	; 254
  I2C_Send(LCD_DISPLAYCONTROL | _displayControl); //Send the display command
    621c:	5a df       	rcall	.-332    	; 0x60d2 <I2C_Send>
    621e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <_displayControl>

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    6222:	88 60       	ori	r24, 0x08	; 8
    6224:	56 df       	rcall	.-340    	; 0x60d2 <I2C_Send>
  I2C_Send(LCD_ENTRYMODESET | _displayMode);      //Send the entry mode command
    6226:	8e ef       	ldi	r24, 0xFE	; 254
    6228:	54 df       	rcall	.-344    	; 0x60d2 <I2C_Send>

  I2C_Send(SETTING_COMMAND);                      //Put LCD into setting mode
    622a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <_displayMode>
  I2C_Send(CLEAR_COMMAND);                        //Send clear display command

  I2C_Send(SETTING_COMMAND);                      //Send special command character
    622e:	84 60       	ori	r24, 0x04	; 4
  I2C_Send(DISABLE_SYSTEM_MESSAGE_DISPLAY);       //Send the set '.' character
    6230:	50 df       	rcall	.-352    	; 0x60d2 <I2C_Send>
    6232:	8c e7       	ldi	r24, 0x7C	; 124

  I2C_Send(SPECIAL_COMMAND);                      //Send special command character
    6234:	4e df       	rcall	.-356    	; 0x60d2 <I2C_Send>
    6236:	8d e2       	ldi	r24, 0x2D	; 45
  I2C_Send(LCD_SETDDRAMADDR | 0);				// HOME 0,0
    6238:	4c df       	rcall	.-360    	; 0x60d2 <I2C_Send>
    623a:	8c e7       	ldi	r24, 0x7C	; 124

  I2C_Stop();
    623c:	4a df       	rcall	.-364    	; 0x60d2 <I2C_Send>
    623e:	8f e2       	ldi	r24, 0x2F	; 47
  delayms(50);                                      //let things settle a bit
    6240:	48 df       	rcall	.-368    	; 0x60d2 <I2C_Send>
    6242:	8e ef       	ldi	r24, 0xFE	; 254
    6244:	46 df       	rcall	.-372    	; 0x60d2 <I2C_Send>
    6246:	80 e8       	ldi	r24, 0x80	; 128
    6248:	44 df       	rcall	.-376    	; 0x60d2 <I2C_Send>
    624a:	3b df       	rcall	.-394    	; 0x60c2 <I2C_Stop>

  LCD_setFastBacklightRGB ( 0xC0, 0xC0, 0xC0 );
    624c:	62 e3       	ldi	r22, 0x32	; 50
    624e:	70 e0       	ldi	r23, 0x00	; 0
    6250:	80 e0       	ldi	r24, 0x00	; 0
    6252:	90 e0       	ldi	r25, 0x00	; 0
    6254:	67 d9       	rcall	.-3378   	; 0x5524 <delayms>

  lcd.xpos = 0;
    6256:	40 ec       	ldi	r20, 0xC0	; 192
    6258:	60 ec       	ldi	r22, 0xC0	; 192
    625a:	80 ec       	ldi	r24, 0xC0	; 192
    625c:	ba df       	rcall	.-140    	; 0x61d2 <LCD_setFastBacklightRGB>
  lcd.ypos = 0;
    625e:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    6262:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>

  return(1);
    6266:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <lcd+0x3>
} //init
    626a:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <lcd+0x2>
    626e:	81 e0       	ldi	r24, 0x01	; 1
    6270:	90 e0       	ldi	r25, 0x00	; 0
    6272:	08 95       	ret

00006274 <lcd_cleareol>:
	{
		LCD_putb(' ');
		rem--;
	}
	LCD_pos(lcd.xpos = 0,lcd.ypos);
}
    6274:	cf 93       	push	r28
    6276:	df 93       	push	r29
    6278:	c0 91 0e 01 	lds	r28, 0x010E	; 0x80010e <lcd+0x4>
    627c:	d0 91 0f 01 	lds	r29, 0x010F	; 0x80010f <lcd+0x5>
    6280:	21 97       	sbiw	r28, 0x01	; 1
    6282:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lcd>
    6286:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lcd+0x1>
    628a:	c8 1b       	sub	r28, r24
    628c:	d9 0b       	sbc	r29, r25
    628e:	1c 16       	cp	r1, r28
    6290:	1d 06       	cpc	r1, r29
    6292:	24 f4       	brge	.+8      	; 0x629c <lcd_cleareol+0x28>
    6294:	80 e2       	ldi	r24, 0x20	; 32
    6296:	2e df       	rcall	.-420    	; 0x60f4 <LCD_putb>
    6298:	21 97       	sbiw	r28, 0x01	; 1
    629a:	f9 cf       	rjmp	.-14     	; 0x628e <lcd_cleareol+0x1a>
    629c:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <lcd+0x2>
    62a0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lcd+0x4>
    62a4:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lcd+0x5>
    62a8:	01 97       	sbiw	r24, 0x01	; 1
    62aa:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lcd+0x1>
    62ae:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lcd>
    62b2:	78 df       	rcall	.-272    	; 0x61a4 <LCD_pos>
    62b4:	df 91       	pop	r29
    62b6:	cf 91       	pop	r28
    62b8:	08 95       	ret

000062ba <lcd_putch>:

/// @brief  put character 
/// @param[in] c: character
/// return: void
void lcd_putch(int c)
{
    62ba:	cf 93       	push	r28
    62bc:	df 93       	push	r29
	int rem;

	if(c < 0 || c > 0x7e)
    62be:	8f 37       	cpi	r24, 0x7F	; 127
    62c0:	91 05       	cpc	r25, r1
    62c2:	08 f0       	brcs	.+2      	; 0x62c6 <lcd_putch+0xc>
    62c4:	50 c0       	rjmp	.+160    	; 0x6366 <lcd_putch+0xac>
    62c6:	ec 01       	movw	r28, r24
		return;

	// Normal visible characters
	if(c >= ' ')
    62c8:	80 32       	cpi	r24, 0x20	; 32
    62ca:	91 05       	cpc	r25, r1
    62cc:	4c f1       	brlt	.+82     	; 0x6320 <lcd_putch+0x66>
	{
		rem = (lcd.w - 1 - lcd.xpos);
		if( rem <= 0 )
    62ce:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <lcd+0x4>
    62d2:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <lcd+0x5>
    62d6:	01 97       	sbiw	r24, 0x01	; 1
    62d8:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <lcd>
    62dc:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <lcd+0x1>
    62e0:	82 1b       	sub	r24, r18
    62e2:	93 0b       	sbc	r25, r19
    62e4:	18 16       	cp	r1, r24
    62e6:	19 06       	cpc	r1, r25
    62e8:	7c f0       	brlt	.+30     	; 0x6308 <lcd_putch+0x4e>
		{
			LCD_pos(++lcd.ypos,lcd.xpos=0);
    62ea:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    62ee:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>
    62f2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <lcd+0x2>
    62f6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <lcd+0x3>
    62fa:	01 96       	adiw	r24, 0x01	; 1
    62fc:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <lcd+0x3>
    6300:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <lcd+0x2>
    6304:	60 e0       	ldi	r22, 0x00	; 0
		}
		(void) LCD_putb(c);
    6306:	4e df       	rcall	.-356    	; 0x61a4 <LCD_pos>
    6308:	8c 2f       	mov	r24, r28
		// uart_putchar(c,0);
		lcd.xpos++;
    630a:	f4 de       	rcall	.-536    	; 0x60f4 <LCD_putb>
    630c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <lcd>
    6310:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <lcd+0x1>
    6314:	01 96       	adiw	r24, 0x01	; 1
    6316:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <lcd+0x1>
    631a:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <lcd>
		return;
	}

	// Control characters
	if(c == '\n')
    631e:	23 c0       	rjmp	.+70     	; 0x6366 <lcd_putch+0xac>
    6320:	8a 30       	cpi	r24, 0x0A	; 10
	{
		// uart_putchar(c,0);
		lcd_cleareol();
    6322:	91 05       	cpc	r25, r1
    6324:	91 f4       	brne	.+36     	; 0x634a <lcd_putch+0x90>
		++lcd.ypos;
		lcd.ypos &= 3;
    6326:	a6 df       	rcall	.-180    	; 0x6274 <lcd_cleareol>
    6328:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <lcd+0x2>
    632c:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <lcd+0x3>
    6330:	6f 5f       	subi	r22, 0xFF	; 255
    6332:	7f 4f       	sbci	r23, 0xFF	; 255
    6334:	63 70       	andi	r22, 0x03	; 3
    6336:	77 27       	eor	r23, r23
    6338:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <lcd+0x3>
    633c:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <lcd+0x2>
		LCD_pos(lcd.xpos=0,lcd.ypos);
    6340:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    6344:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>
	}

	if(c == '\f')
    6348:	0c c0       	rjmp	.+24     	; 0x6362 <lcd_putch+0xa8>
	{
		LCD_clear();
    634a:	0c 97       	sbiw	r24, 0x0c	; 12
    634c:	61 f4       	brne	.+24     	; 0x6366 <lcd_putch+0xac>
		LCD_pos(lcd.xpos=0,lcd.ypos=0);
    634e:	36 df       	rcall	.-404    	; 0x61bc <LCD_clear>
    6350:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <lcd+0x3>
    6354:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <lcd+0x2>
    6358:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <lcd+0x1>
    635c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <lcd>
    6360:	60 e0       	ldi	r22, 0x00	; 0
    6362:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    6364:	1f df       	rcall	.-450    	; 0x61a4 <LCD_pos>
    6366:	df 91       	pop	r29
    6368:	cf 91       	pop	r28
    636a:	08 95       	ret

0000636c <_putc_win>:


// We do not use the printf structure
static void _putc_win(struct _printf_t *p, char ch)
{
    636c:	fc 01       	movw	r30, r24
	p->sent++;
    636e:	26 81       	ldd	r18, Z+6	; 0x06
    6370:	37 81       	ldd	r19, Z+7	; 0x07
    6372:	2f 5f       	subi	r18, 0xFF	; 255
    6374:	3f 4f       	sbci	r19, 0xFF	; 255
    6376:	37 83       	std	Z+7, r19	; 0x07
    6378:	26 83       	std	Z+6, r18	; 0x06
	lcd_putch(ch);
    637a:	86 2f       	mov	r24, r22
    637c:	90 e0       	ldi	r25, 0x00	; 0
    637e:	9d cf       	rjmp	.-198    	; 0x62ba <lcd_putch>
    6380:	08 95       	ret

00006382 <lcd_printf>:
/// @param[in] fmt: printf forat string
/// @param[in] ...: vararg list or arguments
/// @return size of string
MEMSPACE
int lcd_printf(const char *fmt, ... )
{
    6382:	a8 e0       	ldi	r26, 0x08	; 8
    6384:	b0 e0       	ldi	r27, 0x00	; 0
    6386:	e7 ec       	ldi	r30, 0xC7	; 199
    6388:	f1 e3       	ldi	r31, 0x31	; 49
    638a:	0c 94 44 ec 	jmp	0x1d888	; 0x1d888 <__prologue_saves__+0x20>
    638e:	9e 01       	movw	r18, r28
    6390:	23 5f       	subi	r18, 0xF3	; 243
    6392:	3f 4f       	sbci	r19, 0xFF	; 255
    6394:	f9 01       	movw	r30, r18
    6396:	41 91       	ld	r20, Z+
    6398:	51 91       	ld	r21, Z+
    639a:	9f 01       	movw	r18, r30
    printf_t fn;

    fn.put = _putc_win;
    639c:	86 eb       	ldi	r24, 0xB6	; 182
    639e:	91 e3       	ldi	r25, 0x31	; 49
    63a0:	9a 83       	std	Y+2, r25	; 0x02
    63a2:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    63a4:	18 86       	std	Y+8, r1	; 0x08
    63a6:	1f 82       	std	Y+7, r1	; 0x07

    va_list va;
    va_start(va, fmt);

    _printf_fn(&fn, fmt, va);
    63a8:	60 e8       	ldi	r22, 0x80	; 128
    63aa:	ce 01       	movw	r24, r28
    63ac:	01 96       	adiw	r24, 0x01	; 1
    63ae:	0e 94 65 42 	call	0x84ca	; 0x84ca <_printf_fn>

    va_end(va);

	return(fn.sent);

}
    63b2:	8f 81       	ldd	r24, Y+7	; 0x07
    63b4:	98 85       	ldd	r25, Y+8	; 0x08
    63b6:	28 96       	adiw	r28, 0x08	; 8
    63b8:	e2 e0       	ldi	r30, 0x02	; 2
    63ba:	0c 94 60 ec 	jmp	0x1d8c0	; 0x1d8c0 <__epilogue_restores__+0x20>

000063be <sep>:
    if(*str == ',' )
        ++str;

    *token = 0;
    return(str);
}
    63be:	8e ef       	ldi	r24, 0xFE	; 254
    63c0:	94 e0       	ldi	r25, 0x04	; 4
    63c2:	1f 92       	push	r1
    63c4:	9f 93       	push	r25
    63c6:	8f 93       	push	r24
    63c8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    63cc:	0f 90       	pop	r0
    63ce:	0f 90       	pop	r0
    63d0:	0f 90       	pop	r0
    63d2:	08 95       	ret

000063d4 <isupper>:
    63d4:	9c 01       	movw	r18, r24
    63d6:	21 54       	subi	r18, 0x41	; 65
    63d8:	31 09       	sbc	r19, r1
    63da:	81 e0       	ldi	r24, 0x01	; 1
    63dc:	90 e0       	ldi	r25, 0x00	; 0
    63de:	2a 31       	cpi	r18, 0x1A	; 26
    63e0:	31 05       	cpc	r19, r1
    63e2:	10 f0       	brcs	.+4      	; 0x63e8 <isupper+0x14>
    63e4:	80 e0       	ldi	r24, 0x00	; 0
    63e6:	90 e0       	ldi	r25, 0x00	; 0
    63e8:	08 95       	ret

000063ea <islower>:
    63ea:	9c 01       	movw	r18, r24
    63ec:	21 56       	subi	r18, 0x61	; 97
    63ee:	31 09       	sbc	r19, r1
    63f0:	81 e0       	ldi	r24, 0x01	; 1
    63f2:	90 e0       	ldi	r25, 0x00	; 0
    63f4:	2a 31       	cpi	r18, 0x1A	; 26
    63f6:	31 05       	cpc	r19, r1
    63f8:	10 f0       	brcs	.+4      	; 0x63fe <islower+0x14>
    63fa:	80 e0       	ldi	r24, 0x00	; 0
    63fc:	90 e0       	ldi	r25, 0x00	; 0
    63fe:	08 95       	ret

00006400 <tolower>:
    6400:	cf 93       	push	r28
    6402:	df 93       	push	r29
    6404:	ec 01       	movw	r28, r24
    6406:	e6 df       	rcall	.-52     	; 0x63d4 <isupper>
    6408:	89 2b       	or	r24, r25
    640a:	19 f0       	breq	.+6      	; 0x6412 <tolower+0x12>
    640c:	ce 01       	movw	r24, r28
    640e:	80 96       	adiw	r24, 0x20	; 32
    6410:	01 c0       	rjmp	.+2      	; 0x6414 <tolower+0x14>
    6412:	ce 01       	movw	r24, r28
    6414:	df 91       	pop	r29
    6416:	cf 91       	pop	r28
    6418:	08 95       	ret

0000641a <toupper>:
    641a:	cf 93       	push	r28
    641c:	df 93       	push	r29
    641e:	ec 01       	movw	r28, r24
    6420:	e4 df       	rcall	.-56     	; 0x63ea <islower>
    6422:	89 2b       	or	r24, r25
    6424:	19 f0       	breq	.+6      	; 0x642c <toupper+0x12>
    6426:	ce 01       	movw	r24, r28
    6428:	80 97       	sbiw	r24, 0x20	; 32
    642a:	01 c0       	rjmp	.+2      	; 0x642e <toupper+0x14>
    642c:	ce 01       	movw	r24, r28
    642e:	df 91       	pop	r29
    6430:	cf 91       	pop	r28
    6432:	08 95       	ret

00006434 <strcpy>:
    6434:	fc 01       	movw	r30, r24
    6436:	db 01       	movw	r26, r22
    6438:	2d 91       	ld	r18, X+
    643a:	bd 01       	movw	r22, r26
    643c:	01 96       	adiw	r24, 0x01	; 1
    643e:	22 23       	and	r18, r18
    6440:	11 f0       	breq	.+4      	; 0x6446 <strcpy+0x12>
    6442:	20 83       	st	Z, r18
    6444:	f7 cf       	rjmp	.-18     	; 0x6434 <strcpy>
    6446:	10 82       	st	Z, r1
    6448:	08 95       	ret

0000644a <strncpy>:
    644a:	db 01       	movw	r26, r22
    644c:	fc 01       	movw	r30, r24
    644e:	2d 91       	ld	r18, X+
    6450:	21 11       	cpse	r18, r1
    6452:	03 c0       	rjmp	.+6      	; 0x645a <strncpy+0x10>
    6454:	4e 0f       	add	r20, r30
    6456:	5f 1f       	adc	r21, r31
    6458:	08 c0       	rjmp	.+16     	; 0x646a <strncpy+0x20>
    645a:	41 15       	cp	r20, r1
    645c:	51 05       	cpc	r21, r1
    645e:	21 f0       	breq	.+8      	; 0x6468 <strncpy+0x1e>
    6460:	21 93       	st	Z+, r18
    6462:	41 50       	subi	r20, 0x01	; 1
    6464:	51 09       	sbc	r21, r1
    6466:	f3 cf       	rjmp	.-26     	; 0x644e <strncpy+0x4>
    6468:	08 95       	ret
    646a:	4e 17       	cp	r20, r30
    646c:	5f 07       	cpc	r21, r31
    646e:	11 f0       	breq	.+4      	; 0x6474 <strncpy+0x2a>
    6470:	11 92       	st	Z+, r1
    6472:	fb cf       	rjmp	.-10     	; 0x646a <strncpy+0x20>
    6474:	08 95       	ret

00006476 <strcat>:
    6476:	cf 93       	push	r28
    6478:	df 93       	push	r29
    647a:	d8 2f       	mov	r29, r24
    647c:	c9 2f       	mov	r28, r25
    647e:	28 2f       	mov	r18, r24
    6480:	39 2f       	mov	r19, r25
    6482:	c9 01       	movw	r24, r18
    6484:	2f 5f       	subi	r18, 0xFF	; 255
    6486:	3f 4f       	sbci	r19, 0xFF	; 255
    6488:	fc 01       	movw	r30, r24
    648a:	40 81       	ld	r20, Z
    648c:	41 11       	cpse	r20, r1
    648e:	f9 cf       	rjmp	.-14     	; 0x6482 <strcat+0xc>
    6490:	d1 df       	rcall	.-94     	; 0x6434 <strcpy>
    6492:	8d 2f       	mov	r24, r29
    6494:	9c 2f       	mov	r25, r28
    6496:	df 91       	pop	r29
    6498:	cf 91       	pop	r28
    649a:	08 95       	ret

0000649c <reverse>:
    649c:	fc 01       	movw	r30, r24
    649e:	01 90       	ld	r0, Z+
    64a0:	00 20       	and	r0, r0
    64a2:	e9 f7       	brne	.-6      	; 0x649e <reverse+0x2>
    64a4:	31 97       	sbiw	r30, 0x01	; 1
    64a6:	e8 1b       	sub	r30, r24
    64a8:	f9 0b       	sbc	r31, r25
    64aa:	af 01       	movw	r20, r30
    64ac:	55 95       	asr	r21
    64ae:	47 95       	ror	r20
    64b0:	e8 0f       	add	r30, r24
    64b2:	f9 1f       	adc	r31, r25
    64b4:	dc 01       	movw	r26, r24
    64b6:	9d 01       	movw	r18, r26
    64b8:	28 1b       	sub	r18, r24
    64ba:	39 0b       	sbc	r19, r25
    64bc:	24 17       	cp	r18, r20
    64be:	35 07       	cpc	r19, r21
    64c0:	2c f4       	brge	.+10     	; 0x64cc <reverse+0x30>
    64c2:	22 91       	ld	r18, -Z
    64c4:	3c 91       	ld	r19, X
    64c6:	30 83       	st	Z, r19
    64c8:	2d 93       	st	X+, r18
    64ca:	f5 cf       	rjmp	.-22     	; 0x64b6 <reverse+0x1a>
    64cc:	08 95       	ret

000064ce <strupper>:
    64ce:	cf 93       	push	r28
    64d0:	df 93       	push	r29
    64d2:	ec 01       	movw	r28, r24
    64d4:	88 81       	ld	r24, Y
    64d6:	88 23       	and	r24, r24
    64d8:	21 f0       	breq	.+8      	; 0x64e2 <strupper+0x14>
    64da:	90 e0       	ldi	r25, 0x00	; 0
    64dc:	9e df       	rcall	.-196    	; 0x641a <toupper>
    64de:	89 93       	st	Y+, r24
    64e0:	f9 cf       	rjmp	.-14     	; 0x64d4 <strupper+0x6>
    64e2:	df 91       	pop	r29
    64e4:	cf 91       	pop	r28
    64e6:	08 95       	ret

000064e8 <trim_tail>:
    64e8:	fc 01       	movw	r30, r24
    64ea:	01 90       	ld	r0, Z+
    64ec:	00 20       	and	r0, r0
    64ee:	e9 f7       	brne	.-6      	; 0x64ea <trim_tail+0x2>
    64f0:	31 97       	sbiw	r30, 0x01	; 1
    64f2:	e8 17       	cp	r30, r24
    64f4:	f9 07       	cpc	r31, r25
    64f6:	29 f0       	breq	.+10     	; 0x6502 <trim_tail+0x1a>
    64f8:	22 91       	ld	r18, -Z
    64fa:	21 32       	cpi	r18, 0x21	; 33
    64fc:	10 f4       	brcc	.+4      	; 0x6502 <trim_tail+0x1a>
    64fe:	10 82       	st	Z, r1
    6500:	f8 cf       	rjmp	.-16     	; 0x64f2 <trim_tail+0xa>
    6502:	08 95       	ret

00006504 <skipspaces>:
    6504:	00 97       	sbiw	r24, 0x00	; 0
    6506:	39 f0       	breq	.+14     	; 0x6516 <skipspaces+0x12>
    6508:	fc 01       	movw	r30, r24
    650a:	cf 01       	movw	r24, r30
    650c:	21 91       	ld	r18, Z+
    650e:	20 32       	cpi	r18, 0x20	; 32
    6510:	e1 f3       	breq	.-8      	; 0x650a <skipspaces+0x6>
    6512:	29 30       	cpi	r18, 0x09	; 9
    6514:	d1 f3       	breq	.-12     	; 0x650a <skipspaces+0x6>
    6516:	08 95       	ret

00006518 <strcmp>:
    6518:	dc 01       	movw	r26, r24
    651a:	fb 01       	movw	r30, r22
    651c:	2d 91       	ld	r18, X+
    651e:	41 91       	ld	r20, Z+
    6520:	50 e0       	ldi	r21, 0x00	; 0
    6522:	30 e0       	ldi	r19, 0x00	; 0
    6524:	c9 01       	movw	r24, r18
    6526:	84 1b       	sub	r24, r20
    6528:	95 0b       	sbc	r25, r21
    652a:	11 f4       	brne	.+4      	; 0x6530 <strcmp+0x18>
    652c:	45 2b       	or	r20, r21
    652e:	b1 f7       	brne	.-20     	; 0x651c <strcmp+0x4>
    6530:	08 95       	ret

00006532 <strncmp>:
    6532:	fc 01       	movw	r30, r24
    6534:	db 01       	movw	r26, r22
    6536:	48 0f       	add	r20, r24
    6538:	59 1f       	adc	r21, r25
    653a:	e4 17       	cp	r30, r20
    653c:	f5 07       	cpc	r31, r21
    653e:	59 f0       	breq	.+22     	; 0x6556 <strncmp+0x24>
    6540:	21 91       	ld	r18, Z+
    6542:	6d 91       	ld	r22, X+
    6544:	70 e0       	ldi	r23, 0x00	; 0
    6546:	30 e0       	ldi	r19, 0x00	; 0
    6548:	c9 01       	movw	r24, r18
    654a:	86 1b       	sub	r24, r22
    654c:	97 0b       	sbc	r25, r23
    654e:	29 f4       	brne	.+10     	; 0x655a <strncmp+0x28>
    6550:	67 2b       	or	r22, r23
    6552:	99 f7       	brne	.-26     	; 0x653a <strncmp+0x8>
    6554:	02 c0       	rjmp	.+4      	; 0x655a <strncmp+0x28>
    6556:	80 e0       	ldi	r24, 0x00	; 0
    6558:	90 e0       	ldi	r25, 0x00	; 0
    655a:	08 95       	ret

0000655c <strcasecmp>:
    655c:	ef 92       	push	r14
    655e:	ff 92       	push	r15
    6560:	0f 93       	push	r16
    6562:	1f 93       	push	r17
    6564:	cf 93       	push	r28
    6566:	df 93       	push	r29
    6568:	7c 01       	movw	r14, r24
    656a:	8b 01       	movw	r16, r22
    656c:	f7 01       	movw	r30, r14
    656e:	81 91       	ld	r24, Z+
    6570:	7f 01       	movw	r14, r30
    6572:	90 e0       	ldi	r25, 0x00	; 0
    6574:	52 df       	rcall	.-348    	; 0x641a <toupper>
    6576:	ec 01       	movw	r28, r24
    6578:	f8 01       	movw	r30, r16
    657a:	81 91       	ld	r24, Z+
    657c:	8f 01       	movw	r16, r30
    657e:	90 e0       	ldi	r25, 0x00	; 0
    6580:	4c df       	rcall	.-360    	; 0x641a <toupper>
    6582:	9c 01       	movw	r18, r24
    6584:	ce 01       	movw	r24, r28
    6586:	82 1b       	sub	r24, r18
    6588:	93 0b       	sbc	r25, r19
    658a:	11 f4       	brne	.+4      	; 0x6590 <strcasecmp+0x34>
    658c:	23 2b       	or	r18, r19
    658e:	71 f7       	brne	.-36     	; 0x656c <strcasecmp+0x10>
    6590:	cd b7       	in	r28, 0x3d	; 61
    6592:	de b7       	in	r29, 0x3e	; 62
    6594:	e6 e0       	ldi	r30, 0x06	; 6
    6596:	0c 94 5c ec 	jmp	0x1d8b8	; 0x1d8b8 <__epilogue_restores__+0x18>

0000659a <strncasecmp>:
    659a:	a0 e0       	ldi	r26, 0x00	; 0
    659c:	b0 e0       	ldi	r27, 0x00	; 0
    659e:	e3 ed       	ldi	r30, 0xD3	; 211
    65a0:	f2 e3       	ldi	r31, 0x32	; 50
    65a2:	0c 94 3e ec 	jmp	0x1d87c	; 0x1d87c <__prologue_saves__+0x14>
    65a6:	8c 01       	movw	r16, r24
    65a8:	7b 01       	movw	r14, r22
    65aa:	6c 01       	movw	r12, r24
    65ac:	c4 0e       	add	r12, r20
    65ae:	d5 1e       	adc	r13, r21
    65b0:	0c 15       	cp	r16, r12
    65b2:	1d 05       	cpc	r17, r13
    65b4:	99 f0       	breq	.+38     	; 0x65dc <strncasecmp+0x42>
    65b6:	f8 01       	movw	r30, r16
    65b8:	81 91       	ld	r24, Z+
    65ba:	8f 01       	movw	r16, r30
    65bc:	90 e0       	ldi	r25, 0x00	; 0
    65be:	2d df       	rcall	.-422    	; 0x641a <toupper>
    65c0:	ec 01       	movw	r28, r24
    65c2:	f7 01       	movw	r30, r14
    65c4:	81 91       	ld	r24, Z+
    65c6:	7f 01       	movw	r14, r30
    65c8:	90 e0       	ldi	r25, 0x00	; 0
    65ca:	27 df       	rcall	.-434    	; 0x641a <toupper>
    65cc:	9c 01       	movw	r18, r24
    65ce:	ce 01       	movw	r24, r28
    65d0:	82 1b       	sub	r24, r18
    65d2:	93 0b       	sbc	r25, r19
    65d4:	29 f4       	brne	.+10     	; 0x65e0 <strncasecmp+0x46>
    65d6:	23 2b       	or	r18, r19
    65d8:	59 f7       	brne	.-42     	; 0x65b0 <strncasecmp+0x16>
    65da:	02 c0       	rjmp	.+4      	; 0x65e0 <strncasecmp+0x46>
    65dc:	80 e0       	ldi	r24, 0x00	; 0
    65de:	90 e0       	ldi	r25, 0x00	; 0
    65e0:	cd b7       	in	r28, 0x3d	; 61
    65e2:	de b7       	in	r29, 0x3e	; 62
    65e4:	e8 e0       	ldi	r30, 0x08	; 8
    65e6:	0c 94 5a ec 	jmp	0x1d8b4	; 0x1d8b4 <__epilogue_restores__+0x14>

000065ea <MATCH>:
    65ea:	cf 93       	push	r28
    65ec:	df 93       	push	r29
    65ee:	fb 01       	movw	r30, r22
    65f0:	01 90       	ld	r0, Z+
    65f2:	00 20       	and	r0, r0
    65f4:	e9 f7       	brne	.-6      	; 0x65f0 <MATCH+0x6>
    65f6:	31 97       	sbiw	r30, 0x01	; 1
    65f8:	ef 01       	movw	r28, r30
    65fa:	c6 1b       	sub	r28, r22
    65fc:	d7 0b       	sbc	r29, r23
    65fe:	8c df       	rcall	.-232    	; 0x6518 <strcmp>
    6600:	89 2b       	or	r24, r25
    6602:	11 f4       	brne	.+4      	; 0x6608 <MATCH+0x1e>
    6604:	ce 01       	movw	r24, r28
    6606:	02 c0       	rjmp	.+4      	; 0x660c <MATCH+0x22>
    6608:	80 e0       	ldi	r24, 0x00	; 0
    660a:	90 e0       	ldi	r25, 0x00	; 0
    660c:	df 91       	pop	r29
    660e:	cf 91       	pop	r28
    6610:	08 95       	ret

00006612 <MATCHARGS>:
    6612:	ef 92       	push	r14
    6614:	ff 92       	push	r15
    6616:	0f 93       	push	r16
    6618:	1f 93       	push	r17
    661a:	cf 93       	push	r28
    661c:	df 93       	push	r29
    661e:	f6 2e       	mov	r15, r22
    6620:	e7 2e       	mov	r14, r23
    6622:	ea 01       	movw	r28, r20
    6624:	89 01       	movw	r16, r18
    6626:	e1 df       	rcall	.-62     	; 0x65ea <MATCH>
    6628:	00 97       	sbiw	r24, 0x00	; 0
    662a:	e9 f0       	breq	.+58     	; 0x6666 <MATCHARGS+0x54>
    662c:	0c 17       	cp	r16, r28
    662e:	1d 07       	cpc	r17, r29
    6630:	c4 f4       	brge	.+48     	; 0x6662 <MATCHARGS+0x50>
    6632:	1f 93       	push	r17
    6634:	0f 93       	push	r16
    6636:	df 93       	push	r29
    6638:	cf 93       	push	r28
    663a:	ef 92       	push	r14
    663c:	ff 92       	push	r15
    663e:	88 ed       	ldi	r24, 0xD8	; 216
    6640:	94 e0       	ldi	r25, 0x04	; 4
    6642:	1f 92       	push	r1
    6644:	9f 93       	push	r25
    6646:	8f 93       	push	r24
    6648:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    664c:	8d b7       	in	r24, 0x3d	; 61
    664e:	9e b7       	in	r25, 0x3e	; 62
    6650:	09 96       	adiw	r24, 0x09	; 9
    6652:	0f b6       	in	r0, 0x3f	; 63
    6654:	f8 94       	cli
    6656:	9e bf       	out	0x3e, r25	; 62
    6658:	0f be       	out	0x3f, r0	; 63
    665a:	8d bf       	out	0x3d, r24	; 61
    665c:	80 e0       	ldi	r24, 0x00	; 0
    665e:	90 e0       	ldi	r25, 0x00	; 0
    6660:	02 c0       	rjmp	.+4      	; 0x6666 <MATCHARGS+0x54>
    6662:	81 e0       	ldi	r24, 0x01	; 1
    6664:	90 e0       	ldi	r25, 0x00	; 0
    6666:	cd b7       	in	r28, 0x3d	; 61
    6668:	de b7       	in	r29, 0x3e	; 62
    666a:	e6 e0       	ldi	r30, 0x06	; 6
    666c:	0c 94 5c ec 	jmp	0x1d8b8	; 0x1d8b8 <__epilogue_restores__+0x18>

00006670 <MATCHI>:
    6670:	cf 93       	push	r28
    6672:	df 93       	push	r29
    6674:	fb 01       	movw	r30, r22
    6676:	01 90       	ld	r0, Z+
    6678:	00 20       	and	r0, r0
    667a:	e9 f7       	brne	.-6      	; 0x6676 <MATCHI+0x6>
    667c:	31 97       	sbiw	r30, 0x01	; 1
    667e:	ef 01       	movw	r28, r30
    6680:	c6 1b       	sub	r28, r22
    6682:	d7 0b       	sbc	r29, r23
    6684:	6b df       	rcall	.-298    	; 0x655c <strcasecmp>
    6686:	89 2b       	or	r24, r25
    6688:	11 f4       	brne	.+4      	; 0x668e <MATCHI+0x1e>
    668a:	ce 01       	movw	r24, r28
    668c:	02 c0       	rjmp	.+4      	; 0x6692 <MATCHI+0x22>
    668e:	80 e0       	ldi	r24, 0x00	; 0
    6690:	90 e0       	ldi	r25, 0x00	; 0
    6692:	df 91       	pop	r29
    6694:	cf 91       	pop	r28
    6696:	08 95       	ret

00006698 <MATCHI_LEN>:
    6698:	cf 93       	push	r28
    669a:	df 93       	push	r29
    669c:	00 97       	sbiw	r24, 0x00	; 0
    669e:	89 f0       	breq	.+34     	; 0x66c2 <MATCHI_LEN+0x2a>
    66a0:	61 15       	cp	r22, r1
    66a2:	71 05       	cpc	r23, r1
    66a4:	71 f0       	breq	.+28     	; 0x66c2 <MATCHI_LEN+0x2a>
    66a6:	eb 01       	movw	r28, r22
    66a8:	09 90       	ld	r0, Y+
    66aa:	00 20       	and	r0, r0
    66ac:	e9 f7       	brne	.-6      	; 0x66a8 <MATCHI_LEN+0x10>
    66ae:	21 97       	sbiw	r28, 0x01	; 1
    66b0:	c6 1b       	sub	r28, r22
    66b2:	d7 0b       	sbc	r29, r23
    66b4:	31 f0       	breq	.+12     	; 0x66c2 <MATCHI_LEN+0x2a>
    66b6:	ae 01       	movw	r20, r28
    66b8:	70 df       	rcall	.-288    	; 0x659a <strncasecmp>
    66ba:	89 2b       	or	r24, r25
    66bc:	11 f4       	brne	.+4      	; 0x66c2 <MATCHI_LEN+0x2a>
    66be:	ce 01       	movw	r24, r28
    66c0:	02 c0       	rjmp	.+4      	; 0x66c6 <MATCHI_LEN+0x2e>
    66c2:	80 e0       	ldi	r24, 0x00	; 0
    66c4:	90 e0       	ldi	r25, 0x00	; 0
    66c6:	df 91       	pop	r29
    66c8:	cf 91       	pop	r28
    66ca:	08 95       	ret

000066cc <split_args>:
    66cc:	a0 e0       	ldi	r26, 0x00	; 0
    66ce:	b0 e0       	ldi	r27, 0x00	; 0
    66d0:	ec e6       	ldi	r30, 0x6C	; 108
    66d2:	f3 e3       	ldi	r31, 0x33	; 51
    66d4:	0c 94 3e ec 	jmp	0x1d87c	; 0x1d87c <__prologue_saves__+0x14>
    66d8:	dc 01       	movw	r26, r24
    66da:	6a 01       	movw	r12, r20
    66dc:	8b 01       	movw	r16, r22
    66de:	fb 01       	movw	r30, r22
    66e0:	80 e0       	ldi	r24, 0x00	; 0
    66e2:	90 e0       	ldi	r25, 0x00	; 0
    66e4:	8c 15       	cp	r24, r12
    66e6:	9d 05       	cpc	r25, r13
    66e8:	24 f4       	brge	.+8      	; 0x66f2 <split_args+0x26>
    66ea:	11 92       	st	Z+, r1
    66ec:	11 92       	st	Z+, r1
    66ee:	01 96       	adiw	r24, 0x01	; 1
    66f0:	f9 cf       	rjmp	.-14     	; 0x66e4 <split_args+0x18>
    66f2:	c1 14       	cp	r12, r1
    66f4:	d1 04       	cpc	r13, r1
    66f6:	d9 f1       	breq	.+118    	; 0x676e <split_args+0xa2>
    66f8:	10 97       	sbiw	r26, 0x00	; 0
    66fa:	c9 f1       	breq	.+114    	; 0x676e <split_args+0xa2>
    66fc:	ee 24       	eor	r14, r14
    66fe:	e3 94       	inc	r14
    6700:	f1 2c       	mov	r15, r1
    6702:	c0 e0       	ldi	r28, 0x00	; 0
    6704:	d0 e0       	ldi	r29, 0x00	; 0
    6706:	8c 91       	ld	r24, X
    6708:	88 23       	and	r24, r24
    670a:	b1 f1       	breq	.+108    	; 0x6778 <split_args+0xac>
    670c:	cc 15       	cp	r28, r12
    670e:	dd 05       	cpc	r29, r13
    6710:	9c f5       	brge	.+102    	; 0x6778 <split_args+0xac>
    6712:	cd 01       	movw	r24, r26
    6714:	f7 de       	rcall	.-530    	; 0x6504 <skipspaces>
    6716:	dc 01       	movw	r26, r24
    6718:	2c 91       	ld	r18, X
    671a:	22 23       	and	r18, r18
    671c:	69 f1       	breq	.+90     	; 0x6778 <split_args+0xac>
    671e:	22 32       	cpi	r18, 0x22	; 34
    6720:	79 f4       	brne	.+30     	; 0x6740 <split_args+0x74>
    6722:	fc 01       	movw	r30, r24
    6724:	31 96       	adiw	r30, 0x01	; 1
    6726:	d8 01       	movw	r26, r16
    6728:	ed 93       	st	X+, r30
    672a:	fc 93       	st	X, r31
    672c:	df 01       	movw	r26, r30
    672e:	80 81       	ld	r24, Z
    6730:	31 96       	adiw	r30, 0x01	; 1
    6732:	88 23       	and	r24, r24
    6734:	a9 f0       	breq	.+42     	; 0x6760 <split_args+0x94>
    6736:	82 32       	cpi	r24, 0x22	; 34
    6738:	c9 f7       	brne	.-14     	; 0x672c <split_args+0x60>
    673a:	1c 92       	st	X, r1
    673c:	df 01       	movw	r26, r30
    673e:	10 c0       	rjmp	.+32     	; 0x6760 <split_args+0x94>
    6740:	f8 01       	movw	r30, r16
    6742:	91 83       	std	Z+1, r25	; 0x01
    6744:	80 83       	st	Z, r24
    6746:	fc 01       	movw	r30, r24
    6748:	2e 2f       	mov	r18, r30
    674a:	9f 2f       	mov	r25, r31
    674c:	81 91       	ld	r24, Z+
    674e:	3f ed       	ldi	r19, 0xDF	; 223
    6750:	38 0f       	add	r19, r24
    6752:	3e 35       	cpi	r19, 0x5E	; 94
    6754:	c8 f3       	brcs	.-14     	; 0x6748 <split_args+0x7c>
    6756:	88 23       	and	r24, r24
    6758:	69 f0       	breq	.+26     	; 0x6774 <split_args+0xa8>
    675a:	a2 2f       	mov	r26, r18
    675c:	b9 2f       	mov	r27, r25
    675e:	1d 92       	st	X+, r1
    6760:	21 96       	adiw	r28, 0x01	; 1
    6762:	ff ef       	ldi	r31, 0xFF	; 255
    6764:	ef 1a       	sub	r14, r31
    6766:	ff 0a       	sbc	r15, r31
    6768:	0e 5f       	subi	r16, 0xFE	; 254
    676a:	1f 4f       	sbci	r17, 0xFF	; 255
    676c:	cc cf       	rjmp	.-104    	; 0x6706 <split_args+0x3a>
    676e:	80 e0       	ldi	r24, 0x00	; 0
    6770:	90 e0       	ldi	r25, 0x00	; 0
    6772:	03 c0       	rjmp	.+6      	; 0x677a <split_args+0xae>
    6774:	c7 01       	movw	r24, r14
    6776:	01 c0       	rjmp	.+2      	; 0x677a <split_args+0xae>
    6778:	ce 01       	movw	r24, r28
    677a:	cd b7       	in	r28, 0x3d	; 61
    677c:	de b7       	in	r29, 0x3e	; 62
    677e:	e8 e0       	ldi	r30, 0x08	; 8
    6780:	0c 94 5a ec 	jmp	0x1d8b4	; 0x1d8b4 <__epilogue_restores__+0x14>

00006784 <token>:
///@return string lenth on match.
///@return 0 on no match.

MEMSPACE
int token(char *str, char *pat)
{
    6784:	ef 92       	push	r14
    6786:	ff 92       	push	r15
    6788:	0f 93       	push	r16
    678a:	1f 93       	push	r17
    678c:	cf 93       	push	r28
    678e:	df 93       	push	r29
    6790:	7c 01       	movw	r14, r24
    int patlen;
    int len;
    char *ptr;

    ptr = skipspaces(str);
    6792:	8b 01       	movw	r16, r22
    6794:	b7 de       	rcall	.-658    	; 0x6504 <skipspaces>
    len = 0;
    while(*ptr > ' ' && *ptr <= 0x7e )
    6796:	9c 01       	movw	r18, r24
    6798:	fc 01       	movw	r30, r24
    679a:	ef 01       	movw	r28, r30
    679c:	c2 1b       	sub	r28, r18
    679e:	d3 0b       	sbc	r29, r19
    67a0:	91 91       	ld	r25, Z+
    67a2:	91 52       	subi	r25, 0x21	; 33
    67a4:	9e 35       	cpi	r25, 0x5E	; 94
    {
        ++len;
        ++ptr;
    }

    if(!len)
    67a6:	c8 f3       	brcs	.-14     	; 0x679a <token+0x16>
    67a8:	20 97       	sbiw	r28, 0x00	; 0
        return(0);

    patlen = strlen(pat);
    67aa:	91 f0       	breq	.+36     	; 0x67d0 <token+0x4c>
    67ac:	f8 01       	movw	r30, r16
    67ae:	01 90       	ld	r0, Z+
    67b0:	00 20       	and	r0, r0
    67b2:	e9 f7       	brne	.-6      	; 0x67ae <token+0x2a>
    67b4:	31 97       	sbiw	r30, 0x01	; 1
    67b6:	e0 1b       	sub	r30, r16

    if(len != patlen)
    67b8:	f1 0b       	sbc	r31, r17
    67ba:	ec 17       	cp	r30, r28
    67bc:	fd 07       	cpc	r31, r29
        return(0);

    if(strncmp(str,pat,patlen) == 0)
    67be:	31 f4       	brne	.+12     	; 0x67cc <token+0x48>
    67c0:	ae 01       	movw	r20, r28
    67c2:	b8 01       	movw	r22, r16
    67c4:	c7 01       	movw	r24, r14
    67c6:	b5 de       	rcall	.-662    	; 0x6532 <strncmp>
    67c8:	89 2b       	or	r24, r25
        ++len;
        ++ptr;
    }

    if(!len)
        return(0);
    67ca:	11 f0       	breq	.+4      	; 0x67d0 <token+0x4c>
    67cc:	c0 e0       	ldi	r28, 0x00	; 0
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    67ce:	d0 e0       	ldi	r29, 0x00	; 0
    67d0:	ce 01       	movw	r24, r28
    67d2:	cd b7       	in	r28, 0x3d	; 61
    67d4:	de b7       	in	r29, 0x3e	; 62
    67d6:	e6 e0       	ldi	r30, 0x06	; 6
    67d8:	0c 94 5c ec 	jmp	0x1d8b8	; 0x1d8b8 <__epilogue_restores__+0x18>

000067dc <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{ 
    67dc:	a2 e0       	ldi	r26, 0x02	; 2
    67de:	b0 e0       	ldi	r27, 0x00	; 0
    67e0:	e4 ef       	ldi	r30, 0xF4	; 244
    67e2:	f3 e3       	ldi	r31, 0x33	; 51
    67e4:	0c 94 42 ec 	jmp	0x1d884	; 0x1d884 <__prologue_saves__+0x1c>
    int ret;
    char *ptr;
    char *endptr;


    ptr = skipspaces(str);
    67e8:	8d de       	rcall	.-742    	; 0x6504 <skipspaces>
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    67ea:	8c 01       	movw	r16, r24
    67ec:	62 e6       	ldi	r22, 0x62	; 98
    67ee:	77 e0       	ldi	r23, 0x07	; 7
    67f0:	53 df       	rcall	.-346    	; 0x6698 <MATCHI_LEN>
    67f2:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 16;
        ptr += ret;
    67f4:	29 f0       	breq	.+10     	; 0x6800 <get_value+0x24>
    67f6:	08 0f       	add	r16, r24
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    67f8:	19 1f       	adc	r17, r25
    67fa:	40 e1       	ldi	r20, 0x10	; 16
    67fc:	50 e0       	ldi	r21, 0x00	; 0
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    67fe:	18 c0       	rjmp	.+48     	; 0x6830 <get_value+0x54>
    6800:	65 e6       	ldi	r22, 0x65	; 101
    6802:	77 e0       	ldi	r23, 0x07	; 7
    6804:	c8 01       	movw	r24, r16
    6806:	48 df       	rcall	.-368    	; 0x6698 <MATCHI_LEN>
    6808:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 8;
        ptr += ret;
    680a:	29 f0       	breq	.+10     	; 0x6816 <get_value+0x3a>
    680c:	08 0f       	add	r16, r24
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    680e:	19 1f       	adc	r17, r25
    6810:	48 e0       	ldi	r20, 0x08	; 8
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    6812:	50 e0       	ldi	r21, 0x00	; 0
    6814:	0d c0       	rjmp	.+26     	; 0x6830 <get_value+0x54>
    6816:	68 e6       	ldi	r22, 0x68	; 104
    6818:	77 e0       	ldi	r23, 0x07	; 7
    681a:	c8 01       	movw	r24, r16
    681c:	3d df       	rcall	.-390    	; 0x6698 <MATCHI_LEN>
    {
        base = 2;
        ptr += ret;
    681e:	00 97       	sbiw	r24, 0x00	; 0
    6820:	29 f0       	breq	.+10     	; 0x682c <get_value+0x50>
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    6822:	08 0f       	add	r16, r24
    6824:	19 1f       	adc	r17, r25
    6826:	42 e0       	ldi	r20, 0x02	; 2
    char *ptr;
    char *endptr;


    ptr = skipspaces(str);
    base = 10;
    6828:	50 e0       	ldi	r21, 0x00	; 0
    682a:	02 c0       	rjmp	.+4      	; 0x6830 <get_value+0x54>
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    682c:	4a e0       	ldi	r20, 0x0A	; 10
    682e:	50 e0       	ldi	r21, 0x00	; 0
    6830:	be 01       	movw	r22, r28
    6832:	6f 5f       	subi	r22, 0xFF	; 255
    6834:	7f 4f       	sbci	r23, 0xFF	; 255
    6836:	c8 01       	movw	r24, r16
}
    6838:	0e 94 08 47 	call	0x8e10	; 0x8e10 <strtol>
    683c:	22 96       	adiw	r28, 0x02	; 2
    683e:	e4 e0       	ldi	r30, 0x04	; 4
    6840:	0c 94 5e ec 	jmp	0x1d8bc	; 0x1d8bc <__epilogue_restores__+0x1c>

00006844 <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    6844:	78 94       	sei
    6846:	08 95       	ret

00006848 <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    6848:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;   // No Prescale
    684a:	89 e0       	ldi	r24, 0x09	; 9
    684c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    6850:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);    // 0 .. count
    6854:	8f e1       	ldi	r24, 0x1F	; 31
    6856:	9e e4       	ldi	r25, 0x4E	; 78
    6858:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    685c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);              //Enable the Output Compare A interrupt
    6860:	ef e6       	ldi	r30, 0x6F	; 111
    6862:	f0 e0       	ldi	r31, 0x00	; 0
    6864:	80 81       	ld	r24, Z
    6866:	82 60       	ori	r24, 0x02	; 2
    6868:	80 83       	st	Z, r24
    sei();
    686a:	78 94       	sei
    686c:	08 95       	ret

0000686e <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    686e:	1f 92       	push	r1
    6870:	0f 92       	push	r0
    6872:	0f b6       	in	r0, 0x3f	; 63
    6874:	0f 92       	push	r0
    6876:	11 24       	eor	r1, r1
    6878:	0b b6       	in	r0, 0x3b	; 59
    687a:	0f 92       	push	r0
    687c:	2f 93       	push	r18
    687e:	3f 93       	push	r19
    6880:	4f 93       	push	r20
    6882:	5f 93       	push	r21
    6884:	6f 93       	push	r22
    6886:	7f 93       	push	r23
    6888:	8f 93       	push	r24
    688a:	9f 93       	push	r25
    688c:	af 93       	push	r26
    688e:	bf 93       	push	r27
    6890:	ef 93       	push	r30
    execute_timers();
    6892:	ff 93       	push	r31
}
    6894:	26 d2       	rcall	.+1100   	; 0x6ce2 <execute_timers>
    6896:	ff 91       	pop	r31
    6898:	ef 91       	pop	r30
    689a:	bf 91       	pop	r27
    689c:	af 91       	pop	r26
    689e:	9f 91       	pop	r25
    68a0:	8f 91       	pop	r24
    68a2:	7f 91       	pop	r23
    68a4:	6f 91       	pop	r22
    68a6:	5f 91       	pop	r21
    68a8:	4f 91       	pop	r20
    68aa:	3f 91       	pop	r19
    68ac:	2f 91       	pop	r18
    68ae:	0f 90       	pop	r0
    68b0:	0b be       	out	0x3b, r0	; 59
    68b2:	0f 90       	pop	r0
    68b4:	0f be       	out	0x3f, r0	; 63
    68b6:	0f 90       	pop	r0
    68b8:	1f 90       	pop	r1
    68ba:	18 95       	reti

000068bc <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    68bc:	0f 93       	push	r16
    68be:	1f 93       	push	r17
    68c0:	cf 93       	push	r28
    68c2:	df 93       	push	r29
    68c4:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

    // disable interrupts
    cli();
    68c6:	f8 94       	cli

    count1 = TCNT1;
    68c8:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    68cc:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    68d0:	80 91 a5 1a 	lds	r24, 0x1AA5	; 0x801aa5 <__clock>
    68d4:	90 91 a6 1a 	lds	r25, 0x1AA6	; 0x801aa6 <__clock+0x1>
    68d8:	a0 91 a7 1a 	lds	r26, 0x1AA7	; 0x801aa7 <__clock+0x2>
    68dc:	b0 91 a8 1a 	lds	r27, 0x1AA8	; 0x801aa8 <__clock+0x3>
    68e0:	80 83       	st	Z, r24
    68e2:	91 83       	std	Z+1, r25	; 0x01
    68e4:	a2 83       	std	Z+2, r26	; 0x02
    68e6:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    68e8:	80 91 a9 1a 	lds	r24, 0x1AA9	; 0x801aa9 <__clock+0x4>
    68ec:	90 91 aa 1a 	lds	r25, 0x1AAA	; 0x801aaa <__clock+0x5>
    68f0:	a0 91 ab 1a 	lds	r26, 0x1AAB	; 0x801aab <__clock+0x6>
    68f4:	b0 91 ac 1a 	lds	r27, 0x1AAC	; 0x801aac <__clock+0x7>
    68f8:	84 83       	std	Z+4, r24	; 0x04
    68fa:	95 83       	std	Z+5, r25	; 0x05
    68fc:	a6 83       	std	Z+6, r26	; 0x06
    68fe:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    6900:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    6904:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    6908:	b1 9b       	sbis	0x16, 1	; 22
    690a:	03 c0       	rjmp	.+6      	; 0x6912 <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    690c:	c0 e0       	ldi	r28, 0x00	; 0
    690e:	d0 e0       	ldi	r29, 0x00	; 0
    6910:	3f c0       	rjmp	.+126    	; 0x6990 <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    6912:	82 17       	cp	r24, r18
    6914:	93 07       	cpc	r25, r19
    6916:	d0 f1       	brcs	.+116    	; 0x698c <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6918:	c0 e0       	ldi	r28, 0x00	; 0
    691a:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    691c:	40 e0       	ldi	r20, 0x00	; 0
    691e:	50 e0       	ldi	r21, 0x00	; 0
    6920:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    6922:	9a 01       	movw	r18, r20
    6924:	ab 01       	movw	r20, r22
    6926:	28 0f       	add	r18, r24
    6928:	39 1f       	adc	r19, r25
    692a:	41 1d       	adc	r20, r1
    692c:	51 1d       	adc	r21, r1

    // enable interrupts
    sei();
    692e:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6930:	a2 e3       	ldi	r26, 0x32	; 50
    6932:	b0 e0       	ldi	r27, 0x00	; 0
    6934:	0e 94 14 ec 	call	0x1d828	; 0x1d828 <__muluhisi3>
    6938:	04 81       	ldd	r16, Z+4	; 0x04
    693a:	15 81       	ldd	r17, Z+5	; 0x05
    693c:	26 81       	ldd	r18, Z+6	; 0x06
    693e:	37 81       	ldd	r19, Z+7	; 0x07
    6940:	dc 01       	movw	r26, r24
    6942:	cb 01       	movw	r24, r22
    6944:	80 0f       	add	r24, r16
    6946:	91 1f       	adc	r25, r17
    6948:	a2 1f       	adc	r26, r18
    694a:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    694c:	81 15       	cp	r24, r1
    694e:	2a ec       	ldi	r18, 0xCA	; 202
    6950:	92 07       	cpc	r25, r18
    6952:	2a e9       	ldi	r18, 0x9A	; 154
    6954:	a2 07       	cpc	r26, r18
    6956:	2b e3       	ldi	r18, 0x3B	; 59
    6958:	b2 07       	cpc	r27, r18
    695a:	2c f4       	brge	.+10     	; 0x6966 <clock_gettime+0xaa>
    // enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    695c:	84 83       	std	Z+4, r24	; 0x04
    695e:	95 83       	std	Z+5, r25	; 0x05
    6960:	a6 83       	std	Z+6, r26	; 0x06
    6962:	b7 83       	std	Z+7, r27	; 0x07
    6964:	1a c0       	rjmp	.+52     	; 0x699a <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    6966:	9a 5c       	subi	r25, 0xCA	; 202
    6968:	aa 49       	sbci	r26, 0x9A	; 154
    696a:	bb 43       	sbci	r27, 0x3B	; 59
    696c:	84 83       	std	Z+4, r24	; 0x04
    696e:	95 83       	std	Z+5, r25	; 0x05
    6970:	a6 83       	std	Z+6, r26	; 0x06
    6972:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    6974:	80 81       	ld	r24, Z
    6976:	91 81       	ldd	r25, Z+1	; 0x01
    6978:	a2 81       	ldd	r26, Z+2	; 0x02
    697a:	b3 81       	ldd	r27, Z+3	; 0x03
    697c:	01 96       	adiw	r24, 0x01	; 1
    697e:	a1 1d       	adc	r26, r1
    6980:	b1 1d       	adc	r27, r1
    6982:	80 83       	st	Z, r24
    6984:	91 83       	std	Z+1, r25	; 0x01
    6986:	a2 83       	std	Z+2, r26	; 0x02
    6988:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    698a:	07 c0       	rjmp	.+14     	; 0x699a <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;    // counter overflow and NO pending is an error!
    698c:	cf ef       	ldi	r28, 0xFF	; 255
    698e:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    6990:	40 e2       	ldi	r20, 0x20	; 32
    6992:	5e e4       	ldi	r21, 0x4E	; 78
    6994:	60 e0       	ldi	r22, 0x00	; 0
    6996:	70 e0       	ldi	r23, 0x00	; 0
    6998:	c4 cf       	rjmp	.-120    	; 0x6922 <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    699a:	ce 01       	movw	r24, r28
    699c:	df 91       	pop	r29
    699e:	cf 91       	pop	r28
    69a0:	1f 91       	pop	r17
    69a2:	0f 91       	pop	r16
    69a4:	08 95       	ret

000069a6 <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    69a6:	80 91 a9 1a 	lds	r24, 0x1AA9	; 0x801aa9 <__clock+0x4>
    69aa:	90 91 aa 1a 	lds	r25, 0x1AAA	; 0x801aaa <__clock+0x5>
    69ae:	a0 91 ab 1a 	lds	r26, 0x1AAB	; 0x801aab <__clock+0x6>
    69b2:	b0 91 ac 1a 	lds	r27, 0x1AAC	; 0x801aac <__clock+0x7>
    69b6:	80 5c       	subi	r24, 0xC0	; 192
    69b8:	9d 4b       	sbci	r25, 0xBD	; 189
    69ba:	a0 4f       	sbci	r26, 0xF0	; 240
    69bc:	bf 4f       	sbci	r27, 0xFF	; 255
    69be:	80 93 a9 1a 	sts	0x1AA9, r24	; 0x801aa9 <__clock+0x4>
    69c2:	90 93 aa 1a 	sts	0x1AAA, r25	; 0x801aaa <__clock+0x5>
    69c6:	a0 93 ab 1a 	sts	0x1AAB, r26	; 0x801aab <__clock+0x6>
    69ca:	b0 93 ac 1a 	sts	0x1AAC, r27	; 0x801aac <__clock+0x7>
    69ce:	80 91 a9 1a 	lds	r24, 0x1AA9	; 0x801aa9 <__clock+0x4>
    69d2:	90 91 aa 1a 	lds	r25, 0x1AAA	; 0x801aaa <__clock+0x5>
    69d6:	a0 91 ab 1a 	lds	r26, 0x1AAB	; 0x801aab <__clock+0x6>
    69da:	b0 91 ac 1a 	lds	r27, 0x1AAC	; 0x801aac <__clock+0x7>
    69de:	81 15       	cp	r24, r1
    69e0:	9a 4c       	sbci	r25, 0xCA	; 202
    69e2:	aa 49       	sbci	r26, 0x9A	; 154
    69e4:	bb 43       	sbci	r27, 0x3B	; 59
    69e6:	dc f0       	brlt	.+54     	; 0x6a1e <clock_task+0x78>
    69e8:	80 91 a5 1a 	lds	r24, 0x1AA5	; 0x801aa5 <__clock>
    69ec:	90 91 a6 1a 	lds	r25, 0x1AA6	; 0x801aa6 <__clock+0x1>
    69f0:	a0 91 a7 1a 	lds	r26, 0x1AA7	; 0x801aa7 <__clock+0x2>
    69f4:	b0 91 a8 1a 	lds	r27, 0x1AA8	; 0x801aa8 <__clock+0x3>
    69f8:	01 96       	adiw	r24, 0x01	; 1
    69fa:	a1 1d       	adc	r26, r1
    69fc:	b1 1d       	adc	r27, r1
    69fe:	80 93 a5 1a 	sts	0x1AA5, r24	; 0x801aa5 <__clock>
    6a02:	90 93 a6 1a 	sts	0x1AA6, r25	; 0x801aa6 <__clock+0x1>
    6a06:	a0 93 a7 1a 	sts	0x1AA7, r26	; 0x801aa7 <__clock+0x2>
    6a0a:	b0 93 a8 1a 	sts	0x1AA8, r27	; 0x801aa8 <__clock+0x3>
    6a0e:	10 92 a9 1a 	sts	0x1AA9, r1	; 0x801aa9 <__clock+0x4>
    6a12:	10 92 aa 1a 	sts	0x1AAA, r1	; 0x801aaa <__clock+0x5>
    6a16:	10 92 ab 1a 	sts	0x1AAB, r1	; 0x801aab <__clock+0x6>
    6a1a:	10 92 ac 1a 	sts	0x1AAC, r1	; 0x801aac <__clock+0x7>
    6a1e:	08 95       	ret

00006a20 <clock_settime.part.2>:
    6a20:	fc 01       	movw	r30, r24
    6a22:	84 81       	ldd	r24, Z+4	; 0x04
    6a24:	95 81       	ldd	r25, Z+5	; 0x05
    6a26:	a6 81       	ldd	r26, Z+6	; 0x06
    6a28:	b7 81       	ldd	r27, Z+7	; 0x07
    6a2a:	80 93 a9 1a 	sts	0x1AA9, r24	; 0x801aa9 <__clock+0x4>
    6a2e:	90 93 aa 1a 	sts	0x1AAA, r25	; 0x801aaa <__clock+0x5>
    6a32:	a0 93 ab 1a 	sts	0x1AAB, r26	; 0x801aab <__clock+0x6>
    6a36:	b0 93 ac 1a 	sts	0x1AAC, r27	; 0x801aac <__clock+0x7>
    6a3a:	80 81       	ld	r24, Z
    6a3c:	91 81       	ldd	r25, Z+1	; 0x01
    6a3e:	a2 81       	ldd	r26, Z+2	; 0x02
    6a40:	b3 81       	ldd	r27, Z+3	; 0x03
    6a42:	80 93 a5 1a 	sts	0x1AA5, r24	; 0x801aa5 <__clock>
    6a46:	90 93 a6 1a 	sts	0x1AA6, r25	; 0x801aa6 <__clock+0x1>
    6a4a:	a0 93 a7 1a 	sts	0x1AA7, r26	; 0x801aa7 <__clock+0x2>
    6a4e:	b0 93 a8 1a 	sts	0x1AA8, r27	; 0x801aa8 <__clock+0x3>
    6a52:	80 91 a9 1a 	lds	r24, 0x1AA9	; 0x801aa9 <__clock+0x4>
    6a56:	90 91 aa 1a 	lds	r25, 0x1AAA	; 0x801aaa <__clock+0x5>
    6a5a:	a0 91 ab 1a 	lds	r26, 0x1AAB	; 0x801aab <__clock+0x6>
    6a5e:	b0 91 ac 1a 	lds	r27, 0x1AAC	; 0x801aac <__clock+0x7>
    6a62:	44 81       	ldd	r20, Z+4	; 0x04
    6a64:	55 81       	ldd	r21, Z+5	; 0x05
    6a66:	66 81       	ldd	r22, Z+6	; 0x06
    6a68:	77 81       	ldd	r23, Z+7	; 0x07
    6a6a:	48 17       	cp	r20, r24
    6a6c:	59 07       	cpc	r21, r25
    6a6e:	6a 07       	cpc	r22, r26
    6a70:	7b 07       	cpc	r23, r27
    6a72:	b9 f6       	brne	.-82     	; 0x6a22 <clock_settime.part.2+0x2>
    6a74:	80 91 a5 1a 	lds	r24, 0x1AA5	; 0x801aa5 <__clock>
    6a78:	90 91 a6 1a 	lds	r25, 0x1AA6	; 0x801aa6 <__clock+0x1>
    6a7c:	a0 91 a7 1a 	lds	r26, 0x1AA7	; 0x801aa7 <__clock+0x2>
    6a80:	b0 91 a8 1a 	lds	r27, 0x1AA8	; 0x801aa8 <__clock+0x3>
    6a84:	40 81       	ld	r20, Z
    6a86:	51 81       	ldd	r21, Z+1	; 0x01
    6a88:	62 81       	ldd	r22, Z+2	; 0x02
    6a8a:	73 81       	ldd	r23, Z+3	; 0x03
    6a8c:	48 17       	cp	r20, r24
    6a8e:	59 07       	cpc	r21, r25
    6a90:	6a 07       	cpc	r22, r26
    6a92:	7b 07       	cpc	r23, r27
    6a94:	31 f6       	brne	.-116    	; 0x6a22 <clock_settime.part.2+0x2>
    6a96:	80 e0       	ldi	r24, 0x00	; 0
    6a98:	90 e0       	ldi	r25, 0x00	; 0
    6a9a:	08 95       	ret

00006a9c <set_timers>:
    6a9c:	00 97       	sbiw	r24, 0x00	; 0
    6a9e:	79 f1       	breq	.+94     	; 0x6afe <set_timers+0x62>
    6aa0:	ed ea       	ldi	r30, 0xAD	; 173
    6aa2:	fa e1       	ldi	r31, 0x1A	; 26
    6aa4:	4f ef       	ldi	r20, 0xFF	; 255
    6aa6:	5f ef       	ldi	r21, 0xFF	; 255
    6aa8:	20 e0       	ldi	r18, 0x00	; 0
    6aaa:	30 e0       	ldi	r19, 0x00	; 0
    6aac:	60 81       	ld	r22, Z
    6aae:	71 81       	ldd	r23, Z+1	; 0x01
    6ab0:	86 17       	cp	r24, r22
    6ab2:	97 07       	cpc	r25, r23
    6ab4:	79 f0       	breq	.+30     	; 0x6ad4 <set_timers+0x38>
    6ab6:	67 2b       	or	r22, r23
    6ab8:	71 f4       	brne	.+28     	; 0x6ad6 <set_timers+0x3a>
    6aba:	f9 01       	movw	r30, r18
    6abc:	ee 0f       	add	r30, r30
    6abe:	ff 1f       	adc	r31, r31
    6ac0:	e2 0f       	add	r30, r18
    6ac2:	f3 1f       	adc	r31, r19
    6ac4:	e3 55       	subi	r30, 0x53	; 83
    6ac6:	f5 4e       	sbci	r31, 0xE5	; 229
    6ac8:	91 83       	std	Z+1, r25	; 0x01
    6aca:	80 83       	st	Z, r24
    6acc:	81 e0       	ldi	r24, 0x01	; 1
    6ace:	82 83       	std	Z+2, r24	; 0x02
    6ad0:	c9 01       	movw	r24, r18
    6ad2:	08 95       	ret
    6ad4:	a9 01       	movw	r20, r18
    6ad6:	2f 5f       	subi	r18, 0xFF	; 255
    6ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    6ada:	33 96       	adiw	r30, 0x03	; 3
    6adc:	28 30       	cpi	r18, 0x08	; 8
    6ade:	31 05       	cpc	r19, r1
    6ae0:	29 f7       	brne	.-54     	; 0x6aac <set_timers+0x10>
    6ae2:	4f 3f       	cpi	r20, 0xFF	; 255
    6ae4:	8f ef       	ldi	r24, 0xFF	; 255
    6ae6:	58 07       	cpc	r21, r24
    6ae8:	69 f4       	brne	.+26     	; 0x6b04 <set_timers+0x68>
    6aea:	8c eb       	ldi	r24, 0xBC	; 188
    6aec:	95 e0       	ldi	r25, 0x05	; 5
    6aee:	1f 92       	push	r1
    6af0:	9f 93       	push	r25
    6af2:	8f 93       	push	r24
    6af4:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    6af8:	0f 90       	pop	r0
    6afa:	0f 90       	pop	r0
    6afc:	0f 90       	pop	r0
    6afe:	8f ef       	ldi	r24, 0xFF	; 255
    6b00:	9f ef       	ldi	r25, 0xFF	; 255
    6b02:	08 95       	ret
    6b04:	ca 01       	movw	r24, r20
    6b06:	08 95       	ret

00006b08 <delete_all_timers>:
    6b08:	ed ea       	ldi	r30, 0xAD	; 173
    6b0a:	fa e1       	ldi	r31, 0x1A	; 26
    6b0c:	12 82       	std	Z+2, r1	; 0x02
    6b0e:	11 82       	std	Z+1, r1	; 0x01
    6b10:	10 82       	st	Z, r1
    6b12:	33 96       	adiw	r30, 0x03	; 3
    6b14:	8a e1       	ldi	r24, 0x1A	; 26
    6b16:	e5 3c       	cpi	r30, 0xC5	; 197
    6b18:	f8 07       	cpc	r31, r24
    6b1a:	c1 f7       	brne	.-16     	; 0x6b0c <delete_all_timers+0x4>
    6b1c:	08 95       	ret

00006b1e <subtract_timespec>:
    6b1e:	0f 93       	push	r16
    6b20:	1f 93       	push	r17
    6b22:	cf 93       	push	r28
    6b24:	df 93       	push	r29
    6b26:	fc 01       	movw	r30, r24
    6b28:	84 81       	ldd	r24, Z+4	; 0x04
    6b2a:	95 81       	ldd	r25, Z+5	; 0x05
    6b2c:	a6 81       	ldd	r26, Z+6	; 0x06
    6b2e:	b7 81       	ldd	r27, Z+7	; 0x07
    6b30:	eb 01       	movw	r28, r22
    6b32:	0c 81       	ldd	r16, Y+4	; 0x04
    6b34:	1d 81       	ldd	r17, Y+5	; 0x05
    6b36:	2e 81       	ldd	r18, Y+6	; 0x06
    6b38:	3f 81       	ldd	r19, Y+7	; 0x07
    6b3a:	80 1b       	sub	r24, r16
    6b3c:	91 0b       	sbc	r25, r17
    6b3e:	a2 0b       	sbc	r26, r18
    6b40:	b3 0b       	sbc	r27, r19
    6b42:	b7 fd       	sbrc	r27, 7
    6b44:	05 c0       	rjmp	.+10     	; 0x6b50 <subtract_timespec+0x32>
    6b46:	84 83       	std	Z+4, r24	; 0x04
    6b48:	95 83       	std	Z+5, r25	; 0x05
    6b4a:	a6 83       	std	Z+6, r26	; 0x06
    6b4c:	b7 83       	std	Z+7, r27	; 0x07
    6b4e:	12 c0       	rjmp	.+36     	; 0x6b74 <subtract_timespec+0x56>
    6b50:	96 53       	subi	r25, 0x36	; 54
    6b52:	a5 46       	sbci	r26, 0x65	; 101
    6b54:	b4 4c       	sbci	r27, 0xC4	; 196
    6b56:	84 83       	std	Z+4, r24	; 0x04
    6b58:	95 83       	std	Z+5, r25	; 0x05
    6b5a:	a6 83       	std	Z+6, r26	; 0x06
    6b5c:	b7 83       	std	Z+7, r27	; 0x07
    6b5e:	80 81       	ld	r24, Z
    6b60:	91 81       	ldd	r25, Z+1	; 0x01
    6b62:	a2 81       	ldd	r26, Z+2	; 0x02
    6b64:	b3 81       	ldd	r27, Z+3	; 0x03
    6b66:	01 97       	sbiw	r24, 0x01	; 1
    6b68:	a1 09       	sbc	r26, r1
    6b6a:	b1 09       	sbc	r27, r1
    6b6c:	80 83       	st	Z, r24
    6b6e:	91 83       	std	Z+1, r25	; 0x01
    6b70:	a2 83       	std	Z+2, r26	; 0x02
    6b72:	b3 83       	std	Z+3, r27	; 0x03
    6b74:	80 81       	ld	r24, Z
    6b76:	91 81       	ldd	r25, Z+1	; 0x01
    6b78:	a2 81       	ldd	r26, Z+2	; 0x02
    6b7a:	b3 81       	ldd	r27, Z+3	; 0x03
    6b7c:	eb 01       	movw	r28, r22
    6b7e:	48 81       	ld	r20, Y
    6b80:	59 81       	ldd	r21, Y+1	; 0x01
    6b82:	6a 81       	ldd	r22, Y+2	; 0x02
    6b84:	7b 81       	ldd	r23, Y+3	; 0x03
    6b86:	84 1b       	sub	r24, r20
    6b88:	95 0b       	sbc	r25, r21
    6b8a:	a6 0b       	sbc	r26, r22
    6b8c:	b7 0b       	sbc	r27, r23
    6b8e:	80 83       	st	Z, r24
    6b90:	91 83       	std	Z+1, r25	; 0x01
    6b92:	a2 83       	std	Z+2, r26	; 0x02
    6b94:	b3 83       	std	Z+3, r27	; 0x03
    6b96:	df 91       	pop	r29
    6b98:	cf 91       	pop	r28
    6b9a:	1f 91       	pop	r17
    6b9c:	0f 91       	pop	r16
    6b9e:	08 95       	ret

00006ba0 <ts_to_str>:
    6ba0:	fc 01       	movw	r30, r24
    6ba2:	87 81       	ldd	r24, Z+7	; 0x07
    6ba4:	8f 93       	push	r24
    6ba6:	86 81       	ldd	r24, Z+6	; 0x06
    6ba8:	8f 93       	push	r24
    6baa:	85 81       	ldd	r24, Z+5	; 0x05
    6bac:	8f 93       	push	r24
    6bae:	84 81       	ldd	r24, Z+4	; 0x04
    6bb0:	8f 93       	push	r24
    6bb2:	83 81       	ldd	r24, Z+3	; 0x03
    6bb4:	8f 93       	push	r24
    6bb6:	82 81       	ldd	r24, Z+2	; 0x02
    6bb8:	8f 93       	push	r24
    6bba:	81 81       	ldd	r24, Z+1	; 0x01
    6bbc:	8f 93       	push	r24
    6bbe:	80 81       	ld	r24, Z
    6bc0:	8f 93       	push	r24
    6bc2:	82 eb       	ldi	r24, 0xB2	; 178
    6bc4:	95 e0       	ldi	r25, 0x05	; 5
    6bc6:	1f 92       	push	r1
    6bc8:	9f 93       	push	r25
    6bca:	8f 93       	push	r24
    6bcc:	1f 92       	push	r1
    6bce:	8f e1       	ldi	r24, 0x1F	; 31
    6bd0:	8f 93       	push	r24
    6bd2:	86 ec       	ldi	r24, 0xC6	; 198
    6bd4:	97 e1       	ldi	r25, 0x17	; 23
    6bd6:	9f 93       	push	r25
    6bd8:	8f 93       	push	r24
    6bda:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <snprintf_P>
    6bde:	8d b7       	in	r24, 0x3d	; 61
    6be0:	9e b7       	in	r25, 0x3e	; 62
    6be2:	0f 96       	adiw	r24, 0x0f	; 15
    6be4:	0f b6       	in	r0, 0x3f	; 63
    6be6:	f8 94       	cli
    6be8:	9e bf       	out	0x3e, r25	; 62
    6bea:	0f be       	out	0x3f, r0	; 63
    6bec:	8d bf       	out	0x3d, r24	; 61
    6bee:	86 ec       	ldi	r24, 0xC6	; 198
    6bf0:	97 e1       	ldi	r25, 0x17	; 23
    6bf2:	08 95       	ret

00006bf4 <clock_elapsed_begin>:
    6bf4:	6e eb       	ldi	r22, 0xBE	; 190
    6bf6:	77 e1       	ldi	r23, 0x17	; 23
    6bf8:	80 e0       	ldi	r24, 0x00	; 0
    6bfa:	90 e0       	ldi	r25, 0x00	; 0
    6bfc:	5f ce       	rjmp	.-834    	; 0x68bc <clock_gettime>
    6bfe:	08 95       	ret

00006c00 <clock_elapsed_end>:
    6c00:	a8 e0       	ldi	r26, 0x08	; 8
    6c02:	b0 e0       	ldi	r27, 0x00	; 0
    6c04:	e6 e0       	ldi	r30, 0x06	; 6
    6c06:	f6 e3       	ldi	r31, 0x36	; 54
    6c08:	0c 94 42 ec 	jmp	0x1d884	; 0x1d884 <__prologue_saves__+0x1c>
    6c0c:	8c 01       	movw	r16, r24
    6c0e:	be 01       	movw	r22, r28
    6c10:	6f 5f       	subi	r22, 0xFF	; 255
    6c12:	7f 4f       	sbci	r23, 0xFF	; 255
    6c14:	80 e0       	ldi	r24, 0x00	; 0
    6c16:	90 e0       	ldi	r25, 0x00	; 0
    6c18:	51 de       	rcall	.-862    	; 0x68bc <clock_gettime>
    6c1a:	6e eb       	ldi	r22, 0xBE	; 190
    6c1c:	77 e1       	ldi	r23, 0x17	; 23
    6c1e:	ce 01       	movw	r24, r28
    6c20:	01 96       	adiw	r24, 0x01	; 1
    6c22:	7d df       	rcall	.-262    	; 0x6b1e <subtract_timespec>
    6c24:	01 15       	cp	r16, r1
    6c26:	11 05       	cpc	r17, r1
    6c28:	c1 f0       	breq	.+48     	; 0x6c5a <clock_elapsed_end+0x5a>
    6c2a:	f8 01       	movw	r30, r16
    6c2c:	80 81       	ld	r24, Z
    6c2e:	88 23       	and	r24, r24
    6c30:	a1 f0       	breq	.+40     	; 0x6c5a <clock_elapsed_end+0x5a>
    6c32:	ce 01       	movw	r24, r28
    6c34:	01 96       	adiw	r24, 0x01	; 1
    6c36:	b4 df       	rcall	.-152    	; 0x6ba0 <ts_to_str>
    6c38:	9f 93       	push	r25
    6c3a:	8f 93       	push	r24
    6c3c:	1f 93       	push	r17
    6c3e:	0f 93       	push	r16
    6c40:	85 e9       	ldi	r24, 0x95	; 149
    6c42:	95 e0       	ldi	r25, 0x05	; 5
    6c44:	1f 92       	push	r1
    6c46:	9f 93       	push	r25
    6c48:	8f 93       	push	r24
    6c4a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    6c4e:	0f b6       	in	r0, 0x3f	; 63
    6c50:	f8 94       	cli
    6c52:	de bf       	out	0x3e, r29	; 62
    6c54:	0f be       	out	0x3f, r0	; 63
    6c56:	cd bf       	out	0x3d, r28	; 61
    6c58:	11 c0       	rjmp	.+34     	; 0x6c7c <clock_elapsed_end+0x7c>
    6c5a:	ce 01       	movw	r24, r28
    6c5c:	01 96       	adiw	r24, 0x01	; 1
    6c5e:	a0 df       	rcall	.-192    	; 0x6ba0 <ts_to_str>
    6c60:	9f 93       	push	r25
    6c62:	8f 93       	push	r24
    6c64:	8a e8       	ldi	r24, 0x8A	; 138
    6c66:	95 e0       	ldi	r25, 0x05	; 5
    6c68:	1f 92       	push	r1
    6c6a:	9f 93       	push	r25
    6c6c:	8f 93       	push	r24
    6c6e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    6c72:	0f 90       	pop	r0
    6c74:	0f 90       	pop	r0
    6c76:	0f 90       	pop	r0
    6c78:	0f 90       	pop	r0
    6c7a:	0f 90       	pop	r0
    6c7c:	28 96       	adiw	r28, 0x08	; 8
    6c7e:	e4 e0       	ldi	r30, 0x04	; 4
    6c80:	0c 94 5e ec 	jmp	0x1d8bc	; 0x1d8bc <__epilogue_restores__+0x1c>

00006c84 <clock_clear>:
    6c84:	a8 e0       	ldi	r26, 0x08	; 8
    6c86:	b0 e0       	ldi	r27, 0x00	; 0
    6c88:	e8 e4       	ldi	r30, 0x48	; 72
    6c8a:	f6 e3       	ldi	r31, 0x36	; 54
    6c8c:	0c 94 44 ec 	jmp	0x1d888	; 0x1d888 <__prologue_saves__+0x20>
    6c90:	1d 82       	std	Y+5, r1	; 0x05
    6c92:	1e 82       	std	Y+6, r1	; 0x06
    6c94:	1f 82       	std	Y+7, r1	; 0x07
    6c96:	18 86       	std	Y+8, r1	; 0x08
    6c98:	19 82       	std	Y+1, r1	; 0x01
    6c9a:	1a 82       	std	Y+2, r1	; 0x02
    6c9c:	1b 82       	std	Y+3, r1	; 0x03
    6c9e:	1c 82       	std	Y+4, r1	; 0x04
    6ca0:	ce 01       	movw	r24, r28
    6ca2:	01 96       	adiw	r24, 0x01	; 1
    6ca4:	bd de       	rcall	.-646    	; 0x6a20 <clock_settime.part.2>
    6ca6:	e5 ec       	ldi	r30, 0xC5	; 197
    6ca8:	fa e1       	ldi	r31, 0x1A	; 26
    6caa:	11 82       	std	Z+1, r1	; 0x01
    6cac:	10 82       	st	Z, r1
    6cae:	13 82       	std	Z+3, r1	; 0x03
    6cb0:	12 82       	std	Z+2, r1	; 0x02
    6cb2:	28 96       	adiw	r28, 0x08	; 8
    6cb4:	e2 e0       	ldi	r30, 0x02	; 2
    6cb6:	0c 94 60 ec 	jmp	0x1d8c0	; 0x1d8c0 <__epilogue_restores__+0x20>

00006cba <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    6cba:	80 91 e6 17 	lds	r24, 0x17E6	; 0x8017e6 <timers_configured>
    6cbe:	90 91 e7 17 	lds	r25, 0x17E7	; 0x8017e7 <timers_configured+0x1>
    6cc2:	89 2b       	or	r24, r25
    6cc4:	69 f0       	breq	.+26     	; 0x6ce0 <enable_timers+0x26>
    6cc6:	80 91 e8 17 	lds	r24, 0x17E8	; 0x8017e8 <timers_enabled>
    6cca:	90 91 e9 17 	lds	r25, 0x17E9	; 0x8017e9 <timers_enabled+0x1>
    6cce:	89 2b       	or	r24, r25
    {
        enable_system_task();
    6cd0:	39 f4       	brne	.+14     	; 0x6ce0 <enable_timers+0x26>
        timers_enabled = 1;
    6cd2:	b8 dd       	rcall	.-1168   	; 0x6844 <enable_system_task>
    6cd4:	81 e0       	ldi	r24, 0x01	; 1
    6cd6:	90 e0       	ldi	r25, 0x00	; 0
    6cd8:	90 93 e9 17 	sts	0x17E9, r25	; 0x8017e9 <timers_enabled+0x1>
    6cdc:	80 93 e8 17 	sts	0x17E8, r24	; 0x8017e8 <timers_enabled>
    6ce0:	08 95       	ret

00006ce2 <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    6ce2:	cf 93       	push	r28
    6ce4:	df 93       	push	r29
    6ce6:	cd ea       	ldi	r28, 0xAD	; 173
    6ce8:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    6cea:	8a 81       	ldd	r24, Y+2	; 0x02
    6cec:	88 23       	and	r24, r24
    6cee:	29 f0       	breq	.+10     	; 0x6cfa <execute_timers+0x18>
    6cf0:	e8 81       	ld	r30, Y
    6cf2:	f9 81       	ldd	r31, Y+1	; 0x01
    6cf4:	30 97       	sbiw	r30, 0x00	; 0
    6cf6:	09 f0       	breq	.+2      	; 0x6cfa <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    6cf8:	09 95       	icall
    6cfa:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    6cfc:	8a e1       	ldi	r24, 0x1A	; 26
    6cfe:	c5 3c       	cpi	r28, 0xC5	; 197
    6d00:	d8 07       	cpc	r29, r24
    6d02:	99 f7       	brne	.-26     	; 0x6cea <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    6d04:	df 91       	pop	r29
    6d06:	cf 91       	pop	r28
    6d08:	08 95       	ret

00006d0a <init_timers>:
//
/// @return  void
MEMSPACE
void init_timers()
{
    printf("Timers init called\n");
    6d0a:	86 e7       	ldi	r24, 0x76	; 118
    6d0c:	95 e0       	ldi	r25, 0x05	; 5
    6d0e:	1f 92       	push	r1
    6d10:	9f 93       	push	r25
    6d12:	8f 93       	push	r24
    6d14:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>

    if(!timers_configured)
    6d18:	0f 90       	pop	r0
    6d1a:	0f 90       	pop	r0
    6d1c:	0f 90       	pop	r0
    6d1e:	80 91 e6 17 	lds	r24, 0x17E6	; 0x8017e6 <timers_configured>
    6d22:	90 91 e7 17 	lds	r25, 0x17E7	; 0x8017e7 <timers_configured+0x1>
    6d26:	89 2b       	or	r24, r25
    {
        install_timers_isr();
    6d28:	a9 f4       	brne	.+42     	; 0x6d54 <init_timers+0x4a>
        timers_configured = 1;
    6d2a:	8e dd       	rcall	.-1252   	; 0x6848 <install_timers_isr>
    6d2c:	81 e0       	ldi	r24, 0x01	; 1
    6d2e:	90 e0       	ldi	r25, 0x00	; 0
    6d30:	90 93 e7 17 	sts	0x17E7, r25	; 0x8017e7 <timers_configured+0x1>
    6d34:	80 93 e6 17 	sts	0x17E6, r24	; 0x8017e6 <timers_configured>
        timers_enabled = 0;
    6d38:	10 92 e9 17 	sts	0x17E9, r1	; 0x8017e9 <timers_enabled+0x1>
    6d3c:	10 92 e8 17 	sts	0x17E8, r1	; 0x8017e8 <timers_enabled>
        printf("Timers configured\n");
    6d40:	83 e6       	ldi	r24, 0x63	; 99
    6d42:	95 e0       	ldi	r25, 0x05	; 5
    6d44:	1f 92       	push	r1
    6d46:	9f 93       	push	r25
    6d48:	8f 93       	push	r24
    6d4a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    }

    delete_all_timers();
    6d4e:	0f 90       	pop	r0

    clock_clear();
    6d50:	0f 90       	pop	r0
    6d52:	0f 90       	pop	r0
    printf("Clock Init\n");
    6d54:	d9 de       	rcall	.-590    	; 0x6b08 <delete_all_timers>
    6d56:	96 df       	rcall	.-212    	; 0x6c84 <clock_clear>
    6d58:	87 e5       	ldi	r24, 0x57	; 87
    6d5a:	95 e0       	ldi	r25, 0x05	; 5
    6d5c:	1f 92       	push	r1
    6d5e:	9f 93       	push	r25
    6d60:	8f 93       	push	r24

///  See time.c
    if(set_timers(clock_task,1) == -1)
    6d62:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    6d66:	61 e0       	ldi	r22, 0x01	; 1
    6d68:	70 e0       	ldi	r23, 0x00	; 0
    6d6a:	83 ed       	ldi	r24, 0xD3	; 211
    6d6c:	94 e3       	ldi	r25, 0x34	; 52
    6d6e:	96 de       	rcall	.-724    	; 0x6a9c <set_timers>
    6d70:	0f 90       	pop	r0
    6d72:	0f 90       	pop	r0
    6d74:	0f 90       	pop	r0
        printf("Clock task init failed\n");
    6d76:	01 96       	adiw	r24, 0x01	; 1
    6d78:	51 f4       	brne	.+20     	; 0x6d8e <init_timers+0x84>
    6d7a:	8f e3       	ldi	r24, 0x3F	; 63
    6d7c:	95 e0       	ldi	r25, 0x05	; 5
    6d7e:	1f 92       	push	r1
    6d80:	9f 93       	push	r25
    6d82:	8f 93       	push	r24
    6d84:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    6d88:	0f 90       	pop	r0
    printf("Clock Installed\n");
    6d8a:	0f 90       	pop	r0
    6d8c:	0f 90       	pop	r0
    6d8e:	8e e2       	ldi	r24, 0x2E	; 46
    6d90:	95 e0       	ldi	r25, 0x05	; 5
    6d92:	1f 92       	push	r1
    6d94:	9f 93       	push	r25

    enable_timers();
    6d96:	8f 93       	push	r24
    6d98:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>

    printf("Timers enabled\n");
    6d9c:	8e df       	rcall	.-228    	; 0x6cba <enable_timers>
    6d9e:	8e e1       	ldi	r24, 0x1E	; 30
    6da0:	95 e0       	ldi	r25, 0x05	; 5
    6da2:	1f 92       	push	r1
    6da4:	9f 93       	push	r25
    6da6:	8f 93       	push	r24
}
    6da8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    6dac:	0f 90       	pop	r0
    6dae:	0f 90       	pop	r0
    6db0:	0f 90       	pop	r0
    6db2:	0f 90       	pop	r0
    6db4:	0f 90       	pop	r0
    6db6:	0f 90       	pop	r0
    6db8:	08 95       	ret

00006dba <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id, struct timespec *res)
{
    res->tv_sec = 0;
    6dba:	fb 01       	movw	r30, r22
    6dbc:	10 82       	st	Z, r1
    6dbe:	11 82       	std	Z+1, r1	; 0x01
    6dc0:	12 82       	std	Z+2, r1	; 0x02
    6dc2:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    6dc4:	80 e4       	ldi	r24, 0x40	; 64
    6dc6:	92 e4       	ldi	r25, 0x42	; 66
    6dc8:	af e0       	ldi	r26, 0x0F	; 15
    6dca:	b0 e0       	ldi	r27, 0x00	; 0
    6dcc:	84 83       	std	Z+4, r24	; 0x04
    6dce:	95 83       	std	Z+5, r25	; 0x05
    6dd0:	a6 83       	std	Z+6, r26	; 0x06
    6dd2:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
}
    6dd4:	80 e0       	ldi	r24, 0x00	; 0
    6dd6:	90 e0       	ldi	r25, 0x00	; 0
    6dd8:	08 95       	ret

00006dda <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id, const struct timespec *ts)
{
    if(clk_id)
    6dda:	89 2b       	or	r24, r25
    6ddc:	19 f4       	brne	.+6      	; 0x6de4 <clock_settime+0xa>
    6dde:	cb 01       	movw	r24, r22
    6de0:	1f ce       	rjmp	.-962    	; 0x6a20 <clock_settime.part.2>
    6de2:	08 95       	ret
        return(-1);
    6de4:	8f ef       	ldi	r24, 0xFF	; 255
    6de6:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    6de8:	08 95       	ret

00006dea <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    6dea:	9c 01       	movw	r18, r24
    6dec:	83 70       	andi	r24, 0x03	; 3
    6dee:	99 27       	eor	r25, r25
    6df0:	00 97       	sbiw	r24, 0x00	; 0
    6df2:	69 f4       	brne	.+26     	; 0x6e0e <IS_Leap+0x24>
    6df4:	2c 36       	cpi	r18, 0x6C	; 108
    6df6:	47 e0       	ldi	r20, 0x07	; 7
    6df8:	34 07       	cpc	r19, r20
    6dfa:	59 f0       	breq	.+22     	; 0x6e12 <IS_Leap+0x28>
    6dfc:	51 e0       	ldi	r21, 0x01	; 1
    6dfe:	40 e0       	ldi	r20, 0x00	; 0
    6e00:	24 33       	cpi	r18, 0x34	; 52
    6e02:	38 40       	sbci	r19, 0x08	; 8
    6e04:	09 f4       	brne	.+2      	; 0x6e08 <IS_Leap+0x1e>
    6e06:	50 e0       	ldi	r21, 0x00	; 0
    6e08:	85 2f       	mov	r24, r21
    6e0a:	94 2f       	mov	r25, r20
    6e0c:	08 95       	ret
    6e0e:	80 e0       	ldi	r24, 0x00	; 0
    6e10:	90 e0       	ldi	r25, 0x00	; 0
    6e12:	08 95       	ret

00006e14 <tm_mon_to_ascii>:
    6e14:	8c 30       	cpi	r24, 0x0C	; 12
    6e16:	91 05       	cpc	r25, r1
    6e18:	40 f4       	brcc	.+16     	; 0x6e2a <tm_mon_to_ascii+0x16>
    6e1a:	88 0f       	add	r24, r24
    6e1c:	99 1f       	adc	r25, r25
    6e1e:	fc 01       	movw	r30, r24
    6e20:	ee 5e       	subi	r30, 0xEE	; 238
    6e22:	fe 4f       	sbci	r31, 0xFE	; 254
    6e24:	80 81       	ld	r24, Z
    6e26:	91 81       	ldd	r25, Z+1	; 0x01
    6e28:	08 95       	ret
    6e2a:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <__Month+0x18>
    6e2e:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <__Month+0x19>
    6e32:	08 95       	ret

00006e34 <Days_Per_Month>:
    6e34:	cf 93       	push	r28
    6e36:	df 93       	push	r29
    6e38:	8c 30       	cpi	r24, 0x0C	; 12
    6e3a:	91 05       	cpc	r25, r1
    6e3c:	24 f0       	brlt	.+8      	; 0x6e46 <Days_Per_Month+0x12>
    6e3e:	6f 5f       	subi	r22, 0xFF	; 255
    6e40:	7f 4f       	sbci	r23, 0xFF	; 255
    6e42:	0c 97       	sbiw	r24, 0x0c	; 12
    6e44:	f9 cf       	rjmp	.-14     	; 0x6e38 <Days_Per_Month+0x4>
    6e46:	97 ff       	sbrs	r25, 7
    6e48:	04 c0       	rjmp	.+8      	; 0x6e52 <Days_Per_Month+0x1e>
    6e4a:	61 50       	subi	r22, 0x01	; 1
    6e4c:	71 09       	sbc	r23, r1
    6e4e:	0c 96       	adiw	r24, 0x0c	; 12
    6e50:	fa cf       	rjmp	.-12     	; 0x6e46 <Days_Per_Month+0x12>
    6e52:	fc 01       	movw	r30, r24
    6e54:	ee 0f       	add	r30, r30
    6e56:	ff 1f       	adc	r31, r31
    6e58:	e3 55       	subi	r30, 0x53	; 83
    6e5a:	fd 4f       	sbci	r31, 0xFD	; 253
    6e5c:	c0 81       	ld	r28, Z
    6e5e:	d1 81       	ldd	r29, Z+1	; 0x01
    6e60:	01 97       	sbiw	r24, 0x01	; 1
    6e62:	29 f4       	brne	.+10     	; 0x6e6e <Days_Per_Month+0x3a>
    6e64:	cb 01       	movw	r24, r22
    6e66:	c1 df       	rcall	.-126    	; 0x6dea <IS_Leap>
    6e68:	89 2b       	or	r24, r25
    6e6a:	09 f0       	breq	.+2      	; 0x6e6e <Days_Per_Month+0x3a>
    6e6c:	21 96       	adiw	r28, 0x01	; 1
    6e6e:	ce 01       	movw	r24, r28
    6e70:	df 91       	pop	r29
    6e72:	cf 91       	pop	r28
    6e74:	08 95       	ret

00006e76 <time_to_tm>:
    6e76:	a0 e0       	ldi	r26, 0x00	; 0
    6e78:	b0 e0       	ldi	r27, 0x00	; 0
    6e7a:	e1 e4       	ldi	r30, 0x41	; 65
    6e7c:	f7 e3       	ldi	r31, 0x37	; 55
    6e7e:	0c 94 36 ec 	jmp	0x1d86c	; 0x1d86c <__prologue_saves__+0x4>
    6e82:	e8 01       	movw	r28, r16
    6e84:	e6 e1       	ldi	r30, 0x16	; 22
    6e86:	d8 01       	movw	r26, r16
    6e88:	1d 92       	st	X+, r1
    6e8a:	ea 95       	dec	r30
    6e8c:	e9 f7       	brne	.-6      	; 0x6e88 <time_to_tm+0x12>
    6e8e:	61 15       	cp	r22, r1
    6e90:	bd e5       	ldi	r27, 0x5D	; 93
    6e92:	7b 07       	cpc	r23, r27
    6e94:	bd ef       	ldi	r27, 0xFD	; 253
    6e96:	8b 07       	cpc	r24, r27
    6e98:	bf ef       	ldi	r27, 0xFF	; 255
    6e9a:	9b 07       	cpc	r25, r27
    6e9c:	08 f0       	brcs	.+2      	; 0x6ea0 <time_to_tm+0x2a>
    6e9e:	c0 c0       	rjmp	.+384    	; 0x7020 <time_to_tm+0x1aa>
    6ea0:	6b 01       	movw	r12, r22
    6ea2:	7c 01       	movw	r14, r24
    6ea4:	c2 1a       	sub	r12, r18
    6ea6:	d3 0a       	sbc	r13, r19
    6ea8:	e4 0a       	sbc	r14, r20
    6eaa:	f5 0a       	sbc	r15, r21
    6eac:	46 01       	movw	r8, r12
    6eae:	57 01       	movw	r10, r14
    6eb0:	e0 e8       	ldi	r30, 0x80	; 128
    6eb2:	ce 16       	cp	r12, r30
    6eb4:	ee ea       	ldi	r30, 0xAE	; 174
    6eb6:	de 06       	cpc	r13, r30
    6eb8:	ee ef       	ldi	r30, 0xFE	; 254
    6eba:	ee 06       	cpc	r14, r30
    6ebc:	ef ef       	ldi	r30, 0xFF	; 255
    6ebe:	fe 06       	cpc	r15, r30
    6ec0:	50 f0       	brcs	.+20     	; 0x6ed6 <time_to_tm+0x60>
    6ec2:	80 e8       	ldi	r24, 0x80	; 128
    6ec4:	88 0e       	add	r8, r24
    6ec6:	81 e5       	ldi	r24, 0x51	; 81
    6ec8:	98 1e       	adc	r9, r24
    6eca:	81 e0       	ldi	r24, 0x01	; 1
    6ecc:	a8 1e       	adc	r10, r24
    6ece:	b1 1c       	adc	r11, r1
    6ed0:	01 e0       	ldi	r16, 0x01	; 1
    6ed2:	10 e0       	ldi	r17, 0x00	; 0
    6ed4:	02 c0       	rjmp	.+4      	; 0x6eda <time_to_tm+0x64>
    6ed6:	00 e0       	ldi	r16, 0x00	; 0
    6ed8:	10 e0       	ldi	r17, 0x00	; 0
    6eda:	8c e3       	ldi	r24, 0x3C	; 60
    6edc:	48 2e       	mov	r4, r24
    6ede:	51 2c       	mov	r5, r1
    6ee0:	61 2c       	mov	r6, r1
    6ee2:	71 2c       	mov	r7, r1
    6ee4:	c5 01       	movw	r24, r10
    6ee6:	b4 01       	movw	r22, r8
    6ee8:	a3 01       	movw	r20, r6
    6eea:	92 01       	movw	r18, r4
    6eec:	0e 94 c7 eb 	call	0x1d78e	; 0x1d78e <__udivmodsi4>
    6ef0:	79 83       	std	Y+1, r23	; 0x01
    6ef2:	68 83       	st	Y, r22
    6ef4:	ca 01       	movw	r24, r20
    6ef6:	b9 01       	movw	r22, r18
    6ef8:	a3 01       	movw	r20, r6
    6efa:	92 01       	movw	r18, r4
    6efc:	0e 94 c7 eb 	call	0x1d78e	; 0x1d78e <__udivmodsi4>
    6f00:	7b 83       	std	Y+3, r23	; 0x03
    6f02:	6a 83       	std	Y+2, r22	; 0x02
    6f04:	c5 01       	movw	r24, r10
    6f06:	b4 01       	movw	r22, r8
    6f08:	20 e1       	ldi	r18, 0x10	; 16
    6f0a:	3e e0       	ldi	r19, 0x0E	; 14
    6f0c:	40 e0       	ldi	r20, 0x00	; 0
    6f0e:	50 e0       	ldi	r21, 0x00	; 0
    6f10:	0e 94 c7 eb 	call	0x1d78e	; 0x1d78e <__udivmodsi4>
    6f14:	ca 01       	movw	r24, r20
    6f16:	b9 01       	movw	r22, r18
    6f18:	28 e1       	ldi	r18, 0x18	; 24
    6f1a:	30 e0       	ldi	r19, 0x00	; 0
    6f1c:	40 e0       	ldi	r20, 0x00	; 0
    6f1e:	50 e0       	ldi	r21, 0x00	; 0
    6f20:	0e 94 c7 eb 	call	0x1d78e	; 0x1d78e <__udivmodsi4>
    6f24:	7d 83       	std	Y+5, r23	; 0x05
    6f26:	6c 83       	std	Y+4, r22	; 0x04
    6f28:	01 15       	cp	r16, r1
    6f2a:	11 05       	cpc	r17, r1
    6f2c:	89 f0       	breq	.+34     	; 0x6f50 <time_to_tm+0xda>
    6f2e:	85 e4       	ldi	r24, 0x45	; 69
    6f30:	90 e0       	ldi	r25, 0x00	; 0
    6f32:	9b 87       	std	Y+11, r25	; 0x0b
    6f34:	8a 87       	std	Y+10, r24	; 0x0a
    6f36:	8b e0       	ldi	r24, 0x0B	; 11
    6f38:	90 e0       	ldi	r25, 0x00	; 0
    6f3a:	99 87       	std	Y+9, r25	; 0x09
    6f3c:	88 87       	std	Y+8, r24	; 0x08
    6f3e:	8f e1       	ldi	r24, 0x1F	; 31
    6f40:	90 e0       	ldi	r25, 0x00	; 0
    6f42:	9f 83       	std	Y+7, r25	; 0x07
    6f44:	8e 83       	std	Y+6, r24	; 0x06
    6f46:	83 e0       	ldi	r24, 0x03	; 3
    6f48:	90 e0       	ldi	r25, 0x00	; 0
    6f4a:	9d 87       	std	Y+13, r25	; 0x0d
    6f4c:	8c 87       	std	Y+12, r24	; 0x0c
    6f4e:	65 c0       	rjmp	.+202    	; 0x701a <time_to_tm+0x1a4>
    6f50:	c5 01       	movw	r24, r10
    6f52:	b4 01       	movw	r22, r8
    6f54:	20 e8       	ldi	r18, 0x80	; 128
    6f56:	31 e5       	ldi	r19, 0x51	; 81
    6f58:	41 e0       	ldi	r20, 0x01	; 1
    6f5a:	50 e0       	ldi	r21, 0x00	; 0
    6f5c:	0e 94 c7 eb 	call	0x1d78e	; 0x1d78e <__udivmodsi4>
    6f60:	49 01       	movw	r8, r18
    6f62:	5a 01       	movw	r10, r20
    6f64:	ca 01       	movw	r24, r20
    6f66:	b9 01       	movw	r22, r18
    6f68:	6c 5f       	subi	r22, 0xFC	; 252
    6f6a:	7f 4f       	sbci	r23, 0xFF	; 255
    6f6c:	8f 4f       	sbci	r24, 0xFF	; 255
    6f6e:	9f 4f       	sbci	r25, 0xFF	; 255
    6f70:	27 e0       	ldi	r18, 0x07	; 7
    6f72:	30 e0       	ldi	r19, 0x00	; 0
    6f74:	40 e0       	ldi	r20, 0x00	; 0
    6f76:	50 e0       	ldi	r21, 0x00	; 0
    6f78:	0e 94 e9 eb 	call	0x1d7d2	; 0x1d7d2 <__divmodsi4>
    6f7c:	7d 87       	std	Y+13, r23	; 0x0d
    6f7e:	6c 87       	std	Y+12, r22	; 0x0c
    6f80:	02 eb       	ldi	r16, 0xB2	; 178
    6f82:	17 e0       	ldi	r17, 0x07	; 7
    6f84:	c8 01       	movw	r24, r16
    6f86:	31 df       	rcall	.-414    	; 0x6dea <IS_Leap>
    6f88:	00 97       	sbiw	r24, 0x00	; 0
    6f8a:	19 f4       	brne	.+6      	; 0x6f92 <time_to_tm+0x11c>
    6f8c:	4d e6       	ldi	r20, 0x6D	; 109
    6f8e:	51 e0       	ldi	r21, 0x01	; 1
    6f90:	02 c0       	rjmp	.+4      	; 0x6f96 <time_to_tm+0x120>
    6f92:	4e e6       	ldi	r20, 0x6E	; 110
    6f94:	51 e0       	ldi	r21, 0x01	; 1
    6f96:	05 2e       	mov	r0, r21
    6f98:	00 0c       	add	r0, r0
    6f9a:	66 0b       	sbc	r22, r22
    6f9c:	77 0b       	sbc	r23, r23
    6f9e:	84 16       	cp	r8, r20
    6fa0:	95 06       	cpc	r9, r21
    6fa2:	a6 06       	cpc	r10, r22
    6fa4:	b7 06       	cpc	r11, r23
    6fa6:	3c f0       	brlt	.+14     	; 0x6fb6 <time_to_tm+0x140>
    6fa8:	0f 5f       	subi	r16, 0xFF	; 255
    6faa:	1f 4f       	sbci	r17, 0xFF	; 255
    6fac:	84 1a       	sub	r8, r20
    6fae:	95 0a       	sbc	r9, r21
    6fb0:	a6 0a       	sbc	r10, r22
    6fb2:	b7 0a       	sbc	r11, r23
    6fb4:	e7 cf       	rjmp	.-50     	; 0x6f84 <time_to_tm+0x10e>
    6fb6:	0c 56       	subi	r16, 0x6C	; 108
    6fb8:	17 40       	sbci	r17, 0x07	; 7
    6fba:	1b 87       	std	Y+11, r17	; 0x0b
    6fbc:	0a 87       	std	Y+10, r16	; 0x0a
    6fbe:	9f 86       	std	Y+15, r9	; 0x0f
    6fc0:	8e 86       	std	Y+14, r8	; 0x0e
    6fc2:	ed ea       	ldi	r30, 0xAD	; 173
    6fc4:	f2 e0       	ldi	r31, 0x02	; 2
    6fc6:	20 e0       	ldi	r18, 0x00	; 0
    6fc8:	30 e0       	ldi	r19, 0x00	; 0
    6fca:	18 14       	cp	r1, r8
    6fcc:	19 04       	cpc	r1, r9
    6fce:	1a 04       	cpc	r1, r10
    6fd0:	1b 04       	cpc	r1, r11
    6fd2:	e4 f4       	brge	.+56     	; 0x700c <time_to_tm+0x196>
    6fd4:	2c 30       	cpi	r18, 0x0C	; 12
    6fd6:	31 05       	cpc	r19, r1
    6fd8:	c9 f0       	breq	.+50     	; 0x700c <time_to_tm+0x196>
    6fda:	41 91       	ld	r20, Z+
    6fdc:	51 91       	ld	r21, Z+
    6fde:	21 30       	cpi	r18, 0x01	; 1
    6fe0:	31 05       	cpc	r19, r1
    6fe2:	21 f4       	brne	.+8      	; 0x6fec <time_to_tm+0x176>
    6fe4:	00 97       	sbiw	r24, 0x00	; 0
    6fe6:	11 f0       	breq	.+4      	; 0x6fec <time_to_tm+0x176>
    6fe8:	4f 5f       	subi	r20, 0xFF	; 255
    6fea:	5f 4f       	sbci	r21, 0xFF	; 255
    6fec:	05 2e       	mov	r0, r21
    6fee:	00 0c       	add	r0, r0
    6ff0:	66 0b       	sbc	r22, r22
    6ff2:	77 0b       	sbc	r23, r23
    6ff4:	84 16       	cp	r8, r20
    6ff6:	95 06       	cpc	r9, r21
    6ff8:	a6 06       	cpc	r10, r22
    6ffa:	b7 06       	cpc	r11, r23
    6ffc:	3c f0       	brlt	.+14     	; 0x700c <time_to_tm+0x196>
    6ffe:	84 1a       	sub	r8, r20
    7000:	95 0a       	sbc	r9, r21
    7002:	a6 0a       	sbc	r10, r22
    7004:	b7 0a       	sbc	r11, r23
    7006:	2f 5f       	subi	r18, 0xFF	; 255
    7008:	3f 4f       	sbci	r19, 0xFF	; 255
    700a:	df cf       	rjmp	.-66     	; 0x6fca <time_to_tm+0x154>
    700c:	39 87       	std	Y+9, r19	; 0x09
    700e:	28 87       	std	Y+8, r18	; 0x08
    7010:	af ef       	ldi	r26, 0xFF	; 255
    7012:	8a 1a       	sub	r8, r26
    7014:	9a 0a       	sbc	r9, r26
    7016:	9f 82       	std	Y+7, r9	; 0x07
    7018:	8e 82       	std	Y+6, r8	; 0x06
    701a:	b6 01       	movw	r22, r12
    701c:	c7 01       	movw	r24, r14
    701e:	04 c0       	rjmp	.+8      	; 0x7028 <time_to_tm+0x1b2>
    7020:	6f ef       	ldi	r22, 0xFF	; 255
    7022:	7f ef       	ldi	r23, 0xFF	; 255
    7024:	8f ef       	ldi	r24, 0xFF	; 255
    7026:	9f ef       	ldi	r25, 0xFF	; 255
    7028:	cd b7       	in	r28, 0x3d	; 61
    702a:	de b7       	in	r29, 0x3e	; 62
    702c:	e0 e1       	ldi	r30, 0x10	; 16
    702e:	0c 94 52 ec 	jmp	0x1d8a4	; 0x1d8a4 <__epilogue_restores__+0x4>

00007032 <gmtime_r>:
    7032:	0f 93       	push	r16
    7034:	1f 93       	push	r17
    7036:	cf 93       	push	r28
    7038:	df 93       	push	r29
    703a:	eb 01       	movw	r28, r22
    703c:	fc 01       	movw	r30, r24
    703e:	60 81       	ld	r22, Z
    7040:	71 81       	ldd	r23, Z+1	; 0x01
    7042:	82 81       	ldd	r24, Z+2	; 0x02
    7044:	93 81       	ldd	r25, Z+3	; 0x03
    7046:	8e 01       	movw	r16, r28
    7048:	20 e0       	ldi	r18, 0x00	; 0
    704a:	30 e0       	ldi	r19, 0x00	; 0
    704c:	a9 01       	movw	r20, r18
    704e:	13 df       	rcall	.-474    	; 0x6e76 <time_to_tm>
    7050:	ce 01       	movw	r24, r28
    7052:	df 91       	pop	r29
    7054:	cf 91       	pop	r28
    7056:	1f 91       	pop	r17
    7058:	0f 91       	pop	r16
    705a:	08 95       	ret

0000705c <gmtime>:
    705c:	28 e0       	ldi	r18, 0x08	; 8
    705e:	38 e1       	ldi	r19, 0x18	; 24
    7060:	30 93 1f 18 	sts	0x181F, r19	; 0x80181f <p.3745+0x1>
    7064:	20 93 1e 18 	sts	0x181E, r18	; 0x80181e <p.3745>
    7068:	b9 01       	movw	r22, r18
    706a:	e3 df       	rcall	.-58     	; 0x7032 <gmtime_r>
    706c:	88 e0       	ldi	r24, 0x08	; 8
    706e:	98 e1       	ldi	r25, 0x18	; 24
    7070:	08 95       	ret

00007072 <gettimezone>:
    7072:	e5 ec       	ldi	r30, 0xC5	; 197
    7074:	fa e1       	ldi	r31, 0x1A	; 26
    7076:	20 81       	ld	r18, Z
    7078:	31 81       	ldd	r19, Z+1	; 0x01
    707a:	dc 01       	movw	r26, r24
    707c:	11 96       	adiw	r26, 0x01	; 1
    707e:	3c 93       	st	X, r19
    7080:	2e 93       	st	-X, r18
    7082:	22 81       	ldd	r18, Z+2	; 0x02
    7084:	33 81       	ldd	r19, Z+3	; 0x03
    7086:	13 96       	adiw	r26, 0x03	; 3
    7088:	3c 93       	st	X, r19
    708a:	2e 93       	st	-X, r18
    708c:	12 97       	sbiw	r26, 0x02	; 2
    708e:	80 e0       	ldi	r24, 0x00	; 0
    7090:	90 e0       	ldi	r25, 0x00	; 0
    7092:	08 95       	ret

00007094 <settimezone>:
    7094:	dc 01       	movw	r26, r24
    7096:	2d 91       	ld	r18, X+
    7098:	3c 91       	ld	r19, X
    709a:	11 97       	sbiw	r26, 0x01	; 1
    709c:	e5 ec       	ldi	r30, 0xC5	; 197
    709e:	fa e1       	ldi	r31, 0x1A	; 26
    70a0:	31 83       	std	Z+1, r19	; 0x01
    70a2:	20 83       	st	Z, r18
    70a4:	12 96       	adiw	r26, 0x02	; 2
    70a6:	8d 91       	ld	r24, X+
    70a8:	9c 91       	ld	r25, X
    70aa:	13 97       	sbiw	r26, 0x03	; 3
    70ac:	93 83       	std	Z+3, r25	; 0x03
    70ae:	82 83       	std	Z+2, r24	; 0x02
    70b0:	80 e0       	ldi	r24, 0x00	; 0
    70b2:	90 e0       	ldi	r25, 0x00	; 0
    70b4:	08 95       	ret

000070b6 <gettimeofday>:
    70b6:	a8 e0       	ldi	r26, 0x08	; 8
    70b8:	b0 e0       	ldi	r27, 0x00	; 0
    70ba:	e1 e6       	ldi	r30, 0x61	; 97
    70bc:	f8 e3       	ldi	r31, 0x38	; 56
    70be:	0c 94 40 ec 	jmp	0x1d880	; 0x1d880 <__prologue_saves__+0x18>
    70c2:	8c 01       	movw	r16, r24
    70c4:	7b 01       	movw	r14, r22
    70c6:	be 01       	movw	r22, r28
    70c8:	6f 5f       	subi	r22, 0xFF	; 255
    70ca:	7f 4f       	sbci	r23, 0xFF	; 255
    70cc:	80 e0       	ldi	r24, 0x00	; 0
    70ce:	90 e0       	ldi	r25, 0x00	; 0
    70d0:	f5 db       	rcall	.-2070   	; 0x68bc <clock_gettime>
    70d2:	89 81       	ldd	r24, Y+1	; 0x01
    70d4:	9a 81       	ldd	r25, Y+2	; 0x02
    70d6:	ab 81       	ldd	r26, Y+3	; 0x03
    70d8:	bc 81       	ldd	r27, Y+4	; 0x04
    70da:	f8 01       	movw	r30, r16
    70dc:	80 83       	st	Z, r24
    70de:	91 83       	std	Z+1, r25	; 0x01
    70e0:	a2 83       	std	Z+2, r26	; 0x02
    70e2:	b3 83       	std	Z+3, r27	; 0x03
    70e4:	6d 81       	ldd	r22, Y+5	; 0x05
    70e6:	7e 81       	ldd	r23, Y+6	; 0x06
    70e8:	8f 81       	ldd	r24, Y+7	; 0x07
    70ea:	98 85       	ldd	r25, Y+8	; 0x08
    70ec:	28 ee       	ldi	r18, 0xE8	; 232
    70ee:	33 e0       	ldi	r19, 0x03	; 3
    70f0:	40 e0       	ldi	r20, 0x00	; 0
    70f2:	50 e0       	ldi	r21, 0x00	; 0
    70f4:	0e 94 e9 eb 	call	0x1d7d2	; 0x1d7d2 <__divmodsi4>
    70f8:	f8 01       	movw	r30, r16
    70fa:	24 83       	std	Z+4, r18	; 0x04
    70fc:	35 83       	std	Z+5, r19	; 0x05
    70fe:	46 83       	std	Z+6, r20	; 0x06
    7100:	57 83       	std	Z+7, r21	; 0x07
    7102:	c7 01       	movw	r24, r14
    7104:	b6 df       	rcall	.-148    	; 0x7072 <gettimezone>
    7106:	80 e0       	ldi	r24, 0x00	; 0
    7108:	90 e0       	ldi	r25, 0x00	; 0
    710a:	28 96       	adiw	r28, 0x08	; 8
    710c:	e6 e0       	ldi	r30, 0x06	; 6
    710e:	0c 94 5c ec 	jmp	0x1d8b8	; 0x1d8b8 <__epilogue_restores__+0x18>

00007112 <time>:
    7112:	cf 93       	push	r28
    7114:	df 93       	push	r29
    7116:	ec 01       	movw	r28, r24
    7118:	6a ee       	ldi	r22, 0xEA	; 234
    711a:	77 e1       	ldi	r23, 0x17	; 23
    711c:	80 e0       	ldi	r24, 0x00	; 0
    711e:	90 e0       	ldi	r25, 0x00	; 0
    7120:	cd db       	rcall	.-2150   	; 0x68bc <clock_gettime>
    7122:	20 97       	sbiw	r28, 0x00	; 0
    7124:	61 f0       	breq	.+24     	; 0x713e <time+0x2c>
    7126:	80 91 ea 17 	lds	r24, 0x17EA	; 0x8017ea <ts.3823>
    712a:	90 91 eb 17 	lds	r25, 0x17EB	; 0x8017eb <ts.3823+0x1>
    712e:	a0 91 ec 17 	lds	r26, 0x17EC	; 0x8017ec <ts.3823+0x2>
    7132:	b0 91 ed 17 	lds	r27, 0x17ED	; 0x8017ed <ts.3823+0x3>
    7136:	88 83       	st	Y, r24
    7138:	99 83       	std	Y+1, r25	; 0x01
    713a:	aa 83       	std	Y+2, r26	; 0x02
    713c:	bb 83       	std	Y+3, r27	; 0x03
    713e:	60 91 ea 17 	lds	r22, 0x17EA	; 0x8017ea <ts.3823>
    7142:	70 91 eb 17 	lds	r23, 0x17EB	; 0x8017eb <ts.3823+0x1>
    7146:	80 91 ec 17 	lds	r24, 0x17EC	; 0x8017ec <ts.3823+0x2>
    714a:	90 91 ed 17 	lds	r25, 0x17ED	; 0x8017ed <ts.3823+0x3>
    714e:	df 91       	pop	r29
    7150:	cf 91       	pop	r28
    7152:	08 95       	ret

00007154 <is_dst>:
    7154:	cf 92       	push	r12
    7156:	df 92       	push	r13
    7158:	ef 92       	push	r14
    715a:	ff 92       	push	r15
    715c:	6b 01       	movw	r12, r22
    715e:	7c 01       	movw	r14, r24
    7160:	ff d3       	rcall	.+2046   	; 0x7960 <set_dst>
    7162:	80 91 c9 1a 	lds	r24, 0x1AC9	; 0x801ac9 <dst>
    7166:	90 91 ca 1a 	lds	r25, 0x1ACA	; 0x801aca <dst+0x1>
    716a:	a0 91 cb 1a 	lds	r26, 0x1ACB	; 0x801acb <dst+0x2>
    716e:	b0 91 cc 1a 	lds	r27, 0x1ACC	; 0x801acc <dst+0x3>
    7172:	c8 16       	cp	r12, r24
    7174:	d9 06       	cpc	r13, r25
    7176:	ea 06       	cpc	r14, r26
    7178:	fb 06       	cpc	r15, r27
    717a:	88 f0       	brcs	.+34     	; 0x719e <is_dst+0x4a>
    717c:	81 e0       	ldi	r24, 0x01	; 1
    717e:	90 e0       	ldi	r25, 0x00	; 0
    7180:	40 91 cd 1a 	lds	r20, 0x1ACD	; 0x801acd <dst+0x4>
    7184:	50 91 ce 1a 	lds	r21, 0x1ACE	; 0x801ace <dst+0x5>
    7188:	60 91 cf 1a 	lds	r22, 0x1ACF	; 0x801acf <dst+0x6>
    718c:	70 91 d0 1a 	lds	r23, 0x1AD0	; 0x801ad0 <dst+0x7>
    7190:	4c 15       	cp	r20, r12
    7192:	5d 05       	cpc	r21, r13
    7194:	6e 05       	cpc	r22, r14
    7196:	7f 05       	cpc	r23, r15
    7198:	20 f4       	brcc	.+8      	; 0x71a2 <is_dst+0x4e>
    719a:	80 e0       	ldi	r24, 0x00	; 0
    719c:	02 c0       	rjmp	.+4      	; 0x71a2 <is_dst+0x4e>
    719e:	80 e0       	ldi	r24, 0x00	; 0
    71a0:	90 e0       	ldi	r25, 0x00	; 0
    71a2:	ff 90       	pop	r15
    71a4:	ef 90       	pop	r14
    71a6:	df 90       	pop	r13
    71a8:	cf 90       	pop	r12
    71aa:	08 95       	ret

000071ac <localtime_r>:
    71ac:	4f 92       	push	r4
    71ae:	5f 92       	push	r5
    71b0:	6f 92       	push	r6
    71b2:	7f 92       	push	r7
    71b4:	af 92       	push	r10
    71b6:	bf 92       	push	r11
    71b8:	cf 92       	push	r12
    71ba:	df 92       	push	r13
    71bc:	ef 92       	push	r14
    71be:	ff 92       	push	r15
    71c0:	0f 93       	push	r16
    71c2:	1f 93       	push	r17
    71c4:	cf 93       	push	r28
    71c6:	df 93       	push	r29
    71c8:	00 d0       	rcall	.+0      	; 0x71ca <localtime_r+0x1e>
    71ca:	00 d0       	rcall	.+0      	; 0x71cc <localtime_r+0x20>
    71cc:	cd b7       	in	r28, 0x3d	; 61
    71ce:	de b7       	in	r29, 0x3e	; 62
    71d0:	5b 01       	movw	r10, r22
    71d2:	fc 01       	movw	r30, r24
    71d4:	40 80       	ld	r4, Z
    71d6:	51 80       	ldd	r5, Z+1	; 0x01
    71d8:	62 80       	ldd	r6, Z+2	; 0x02
    71da:	73 80       	ldd	r7, Z+3	; 0x03
    71dc:	ce 01       	movw	r24, r28
    71de:	01 96       	adiw	r24, 0x01	; 1
    71e0:	48 df       	rcall	.-368    	; 0x7072 <gettimezone>
    71e2:	a9 81       	ldd	r26, Y+1	; 0x01
    71e4:	ba 81       	ldd	r27, Y+2	; 0x02
    71e6:	2c e3       	ldi	r18, 0x3C	; 60
    71e8:	30 e0       	ldi	r19, 0x00	; 0
    71ea:	0e 94 0e ec 	call	0x1d81c	; 0x1d81c <__usmulhisi3>
    71ee:	6b 01       	movw	r12, r22
    71f0:	7c 01       	movw	r14, r24
    71f2:	c3 01       	movw	r24, r6
    71f4:	b2 01       	movw	r22, r4
    71f6:	6c 19       	sub	r22, r12
    71f8:	7d 09       	sbc	r23, r13
    71fa:	8e 09       	sbc	r24, r14
    71fc:	9f 09       	sbc	r25, r15
    71fe:	aa df       	rcall	.-172    	; 0x7154 <is_dst>
    7200:	89 2b       	or	r24, r25
    7202:	31 f0       	breq	.+12     	; 0x7210 <localtime_r+0x64>
    7204:	f0 e1       	ldi	r31, 0x10	; 16
    7206:	cf 1a       	sub	r12, r31
    7208:	fe e0       	ldi	r31, 0x0E	; 14
    720a:	df 0a       	sbc	r13, r31
    720c:	e1 08       	sbc	r14, r1
    720e:	f1 08       	sbc	r15, r1
    7210:	85 01       	movw	r16, r10
    7212:	a7 01       	movw	r20, r14
    7214:	96 01       	movw	r18, r12
    7216:	c3 01       	movw	r24, r6
    7218:	b2 01       	movw	r22, r4
    721a:	2d de       	rcall	.-934    	; 0x6e76 <time_to_tm>
    721c:	c5 01       	movw	r24, r10
    721e:	0f 90       	pop	r0
    7220:	0f 90       	pop	r0
    7222:	0f 90       	pop	r0
    7224:	0f 90       	pop	r0
    7226:	df 91       	pop	r29
    7228:	cf 91       	pop	r28
    722a:	1f 91       	pop	r17
    722c:	0f 91       	pop	r16
    722e:	ff 90       	pop	r15
    7230:	ef 90       	pop	r14
    7232:	df 90       	pop	r13
    7234:	cf 90       	pop	r12
    7236:	bf 90       	pop	r11
    7238:	af 90       	pop	r10
    723a:	7f 90       	pop	r7
    723c:	6f 90       	pop	r6
    723e:	5f 90       	pop	r5
    7240:	4f 90       	pop	r4
    7242:	08 95       	ret

00007244 <localtime>:
    7244:	62 ef       	ldi	r22, 0xF2	; 242
    7246:	77 e1       	ldi	r23, 0x17	; 23
    7248:	b1 cf       	rjmp	.-158    	; 0x71ac <localtime_r>
    724a:	08 95       	ret

0000724c <normalize>:
    724c:	aa e0       	ldi	r26, 0x0A	; 10
    724e:	b0 e0       	ldi	r27, 0x00	; 0
    7250:	ec e2       	ldi	r30, 0x2C	; 44
    7252:	f9 e3       	ldi	r31, 0x39	; 57
    7254:	0c 94 34 ec 	jmp	0x1d868	; 0x1d868 <__prologue_saves__>
    7258:	7c 01       	movw	r14, r24
    725a:	7a 87       	std	Y+10, r23	; 0x0a
    725c:	69 87       	std	Y+9, r22	; 0x09
    725e:	f7 01       	movw	r30, r14
    7260:	80 81       	ld	r24, Z
    7262:	91 81       	ldd	r25, Z+1	; 0x01
    7264:	8c 33       	cpi	r24, 0x3C	; 60
    7266:	91 05       	cpc	r25, r1
    7268:	5c f0       	brlt	.+22     	; 0x7280 <normalize+0x34>
    726a:	f7 01       	movw	r30, r14
    726c:	22 81       	ldd	r18, Z+2	; 0x02
    726e:	33 81       	ldd	r19, Z+3	; 0x03
    7270:	2f 5f       	subi	r18, 0xFF	; 255
    7272:	3f 4f       	sbci	r19, 0xFF	; 255
    7274:	33 83       	std	Z+3, r19	; 0x03
    7276:	22 83       	std	Z+2, r18	; 0x02
    7278:	cc 97       	sbiw	r24, 0x3c	; 60
    727a:	91 83       	std	Z+1, r25	; 0x01
    727c:	80 83       	st	Z, r24
    727e:	ef cf       	rjmp	.-34     	; 0x725e <normalize+0x12>
    7280:	f7 01       	movw	r30, r14
    7282:	01 90       	ld	r0, Z+
    7284:	f0 81       	ld	r31, Z
    7286:	e0 2d       	mov	r30, r0
    7288:	fe 83       	std	Y+6, r31	; 0x06
    728a:	ed 83       	std	Y+5, r30	; 0x05
    728c:	f7 ff       	sbrs	r31, 7
    728e:	0d c0       	rjmp	.+26     	; 0x72aa <normalize+0x5e>
    7290:	f7 01       	movw	r30, r14
    7292:	82 81       	ldd	r24, Z+2	; 0x02
    7294:	93 81       	ldd	r25, Z+3	; 0x03
    7296:	01 97       	sbiw	r24, 0x01	; 1
    7298:	93 83       	std	Z+3, r25	; 0x03
    729a:	82 83       	std	Z+2, r24	; 0x02
    729c:	6d 81       	ldd	r22, Y+5	; 0x05
    729e:	7e 81       	ldd	r23, Y+6	; 0x06
    72a0:	64 5c       	subi	r22, 0xC4	; 196
    72a2:	7f 4f       	sbci	r23, 0xFF	; 255
    72a4:	71 83       	std	Z+1, r23	; 0x01
    72a6:	60 83       	st	Z, r22
    72a8:	eb cf       	rjmp	.-42     	; 0x7280 <normalize+0x34>
    72aa:	f7 01       	movw	r30, r14
    72ac:	82 81       	ldd	r24, Z+2	; 0x02
    72ae:	93 81       	ldd	r25, Z+3	; 0x03
    72b0:	8c 33       	cpi	r24, 0x3C	; 60
    72b2:	91 05       	cpc	r25, r1
    72b4:	5c f0       	brlt	.+22     	; 0x72cc <normalize+0x80>
    72b6:	f7 01       	movw	r30, r14
    72b8:	24 81       	ldd	r18, Z+4	; 0x04
    72ba:	35 81       	ldd	r19, Z+5	; 0x05
    72bc:	2f 5f       	subi	r18, 0xFF	; 255
    72be:	3f 4f       	sbci	r19, 0xFF	; 255
    72c0:	35 83       	std	Z+5, r19	; 0x05
    72c2:	24 83       	std	Z+4, r18	; 0x04
    72c4:	cc 97       	sbiw	r24, 0x3c	; 60
    72c6:	93 83       	std	Z+3, r25	; 0x03
    72c8:	82 83       	std	Z+2, r24	; 0x02
    72ca:	ef cf       	rjmp	.-34     	; 0x72aa <normalize+0x5e>
    72cc:	f7 01       	movw	r30, r14
    72ce:	22 80       	ldd	r2, Z+2	; 0x02
    72d0:	33 80       	ldd	r3, Z+3	; 0x03
    72d2:	37 fe       	sbrs	r3, 7
    72d4:	0d c0       	rjmp	.+26     	; 0x72f0 <normalize+0xa4>
    72d6:	f7 01       	movw	r30, r14
    72d8:	84 81       	ldd	r24, Z+4	; 0x04
    72da:	95 81       	ldd	r25, Z+5	; 0x05
    72dc:	01 97       	sbiw	r24, 0x01	; 1
    72de:	95 83       	std	Z+5, r25	; 0x05
    72e0:	84 83       	std	Z+4, r24	; 0x04
    72e2:	fc e3       	ldi	r31, 0x3C	; 60
    72e4:	2f 0e       	add	r2, r31
    72e6:	31 1c       	adc	r3, r1
    72e8:	f7 01       	movw	r30, r14
    72ea:	33 82       	std	Z+3, r3	; 0x03
    72ec:	22 82       	std	Z+2, r2	; 0x02
    72ee:	ee cf       	rjmp	.-36     	; 0x72cc <normalize+0x80>
    72f0:	f7 01       	movw	r30, r14
    72f2:	84 81       	ldd	r24, Z+4	; 0x04
    72f4:	95 81       	ldd	r25, Z+5	; 0x05
    72f6:	88 31       	cpi	r24, 0x18	; 24
    72f8:	91 05       	cpc	r25, r1
    72fa:	5c f0       	brlt	.+22     	; 0x7312 <normalize+0xc6>
    72fc:	f7 01       	movw	r30, r14
    72fe:	26 81       	ldd	r18, Z+6	; 0x06
    7300:	37 81       	ldd	r19, Z+7	; 0x07
    7302:	2f 5f       	subi	r18, 0xFF	; 255
    7304:	3f 4f       	sbci	r19, 0xFF	; 255
    7306:	37 83       	std	Z+7, r19	; 0x07
    7308:	26 83       	std	Z+6, r18	; 0x06
    730a:	48 97       	sbiw	r24, 0x18	; 24
    730c:	95 83       	std	Z+5, r25	; 0x05
    730e:	84 83       	std	Z+4, r24	; 0x04
    7310:	ef cf       	rjmp	.-34     	; 0x72f0 <normalize+0xa4>
    7312:	f7 01       	movw	r30, r14
    7314:	04 81       	ldd	r16, Z+4	; 0x04
    7316:	15 81       	ldd	r17, Z+5	; 0x05
    7318:	17 ff       	sbrs	r17, 7
    731a:	0b c0       	rjmp	.+22     	; 0x7332 <normalize+0xe6>
    731c:	f7 01       	movw	r30, r14
    731e:	86 81       	ldd	r24, Z+6	; 0x06
    7320:	97 81       	ldd	r25, Z+7	; 0x07
    7322:	01 97       	sbiw	r24, 0x01	; 1
    7324:	97 83       	std	Z+7, r25	; 0x07
    7326:	86 83       	std	Z+6, r24	; 0x06
    7328:	08 5e       	subi	r16, 0xE8	; 232
    732a:	1f 4f       	sbci	r17, 0xFF	; 255
    732c:	15 83       	std	Z+5, r17	; 0x05
    732e:	04 83       	std	Z+4, r16	; 0x04
    7330:	f0 cf       	rjmp	.-32     	; 0x7312 <normalize+0xc6>
    7332:	f7 01       	movw	r30, r14
    7334:	80 85       	ldd	r24, Z+8	; 0x08
    7336:	91 85       	ldd	r25, Z+9	; 0x09
    7338:	8c 30       	cpi	r24, 0x0C	; 12
    733a:	91 05       	cpc	r25, r1
    733c:	5c f0       	brlt	.+22     	; 0x7354 <normalize+0x108>
    733e:	f7 01       	movw	r30, r14
    7340:	22 85       	ldd	r18, Z+10	; 0x0a
    7342:	33 85       	ldd	r19, Z+11	; 0x0b
    7344:	2f 5f       	subi	r18, 0xFF	; 255
    7346:	3f 4f       	sbci	r19, 0xFF	; 255
    7348:	33 87       	std	Z+11, r19	; 0x0b
    734a:	22 87       	std	Z+10, r18	; 0x0a
    734c:	0c 97       	sbiw	r24, 0x0c	; 12
    734e:	91 87       	std	Z+9, r25	; 0x09
    7350:	80 87       	std	Z+8, r24	; 0x08
    7352:	ef cf       	rjmp	.-34     	; 0x7332 <normalize+0xe6>
    7354:	f7 01       	movw	r30, r14
    7356:	80 85       	ldd	r24, Z+8	; 0x08
    7358:	91 85       	ldd	r25, Z+9	; 0x09
    735a:	97 ff       	sbrs	r25, 7
    735c:	2d c0       	rjmp	.+90     	; 0x73b8 <normalize+0x16c>
    735e:	f7 01       	movw	r30, r14
    7360:	22 85       	ldd	r18, Z+10	; 0x0a
    7362:	33 85       	ldd	r19, Z+11	; 0x0b
    7364:	21 50       	subi	r18, 0x01	; 1
    7366:	31 09       	sbc	r19, r1
    7368:	33 87       	std	Z+11, r19	; 0x0b
    736a:	22 87       	std	Z+10, r18	; 0x0a
    736c:	0c 96       	adiw	r24, 0x0c	; 12
    736e:	91 87       	std	Z+9, r25	; 0x09
    7370:	80 87       	std	Z+8, r24	; 0x08
    7372:	f0 cf       	rjmp	.-32     	; 0x7354 <normalize+0x108>
    7374:	f7 01       	movw	r30, r14
    7376:	c6 80       	ldd	r12, Z+6	; 0x06
    7378:	d7 80       	ldd	r13, Z+7	; 0x07
    737a:	a0 84       	ldd	r10, Z+8	; 0x08
    737c:	b1 84       	ldd	r11, Z+9	; 0x09
    737e:	b4 01       	movw	r22, r8
    7380:	c5 01       	movw	r24, r10
    7382:	58 dd       	rcall	.-1360   	; 0x6e34 <Days_Per_Month>
    7384:	8c 15       	cp	r24, r12
    7386:	9d 05       	cpc	r25, r13
    7388:	84 f5       	brge	.+96     	; 0x73ea <normalize+0x19e>
    738a:	c8 1a       	sub	r12, r24
    738c:	d9 0a       	sbc	r13, r25
    738e:	f7 01       	movw	r30, r14
    7390:	d7 82       	std	Z+7, r13	; 0x07
    7392:	c6 82       	std	Z+6, r12	; 0x06
    7394:	c5 01       	movw	r24, r10
    7396:	01 96       	adiw	r24, 0x01	; 1
    7398:	91 87       	std	Z+9, r25	; 0x09
    739a:	80 87       	std	Z+8, r24	; 0x08
    739c:	0c 97       	sbiw	r24, 0x0c	; 12
    739e:	54 f3       	brlt	.-44     	; 0x7374 <normalize+0x128>
    73a0:	fb e0       	ldi	r31, 0x0B	; 11
    73a2:	af 1a       	sub	r10, r31
    73a4:	b1 08       	sbc	r11, r1
    73a6:	f7 01       	movw	r30, r14
    73a8:	b1 86       	std	Z+9, r11	; 0x09
    73aa:	a0 86       	std	Z+8, r10	; 0x08
    73ac:	ff ef       	ldi	r31, 0xFF	; 255
    73ae:	8f 1a       	sub	r8, r31
    73b0:	9f 0a       	sbc	r9, r31
    73b2:	f7 01       	movw	r30, r14
    73b4:	93 86       	std	Z+11, r9	; 0x0b
    73b6:	82 86       	std	Z+10, r8	; 0x0a
    73b8:	f7 01       	movw	r30, r14
    73ba:	82 84       	ldd	r8, Z+10	; 0x0a
    73bc:	93 84       	ldd	r9, Z+11	; 0x0b
    73be:	da cf       	rjmp	.-76     	; 0x7374 <normalize+0x128>
    73c0:	f7 01       	movw	r30, r14
    73c2:	80 85       	ldd	r24, Z+8	; 0x08
    73c4:	91 85       	ldd	r25, Z+9	; 0x09
    73c6:	9c 01       	movw	r18, r24
    73c8:	21 50       	subi	r18, 0x01	; 1
    73ca:	31 09       	sbc	r19, r1
    73cc:	37 fd       	sbrc	r19, 7
    73ce:	16 c0       	rjmp	.+44     	; 0x73fc <normalize+0x1b0>
    73d0:	31 87       	std	Z+9, r19	; 0x09
    73d2:	20 87       	std	Z+8, r18	; 0x08
    73d4:	f7 01       	movw	r30, r14
    73d6:	62 85       	ldd	r22, Z+10	; 0x0a
    73d8:	73 85       	ldd	r23, Z+11	; 0x0b
    73da:	80 85       	ldd	r24, Z+8	; 0x08
    73dc:	91 85       	ldd	r25, Z+9	; 0x09
    73de:	2a dd       	rcall	.-1452   	; 0x6e34 <Days_Per_Month>
    73e0:	88 0d       	add	r24, r8
    73e2:	99 1d       	adc	r25, r9
    73e4:	f7 01       	movw	r30, r14
    73e6:	97 83       	std	Z+7, r25	; 0x07
    73e8:	86 83       	std	Z+6, r24	; 0x06
    73ea:	f7 01       	movw	r30, r14
    73ec:	86 80       	ldd	r8, Z+6	; 0x06
    73ee:	97 80       	ldd	r9, Z+7	; 0x07
    73f0:	a2 84       	ldd	r10, Z+10	; 0x0a
    73f2:	b3 84       	ldd	r11, Z+11	; 0x0b
    73f4:	18 14       	cp	r1, r8
    73f6:	19 04       	cpc	r1, r9
    73f8:	1c f7       	brge	.-58     	; 0x73c0 <normalize+0x174>
    73fa:	0b c0       	rjmp	.+22     	; 0x7412 <normalize+0x1c6>
    73fc:	0b 96       	adiw	r24, 0x0b	; 11
    73fe:	f7 01       	movw	r30, r14
    7400:	91 87       	std	Z+9, r25	; 0x09
    7402:	80 87       	std	Z+8, r24	; 0x08
    7404:	f1 e0       	ldi	r31, 0x01	; 1
    7406:	af 1a       	sub	r10, r31
    7408:	b1 08       	sbc	r11, r1
    740a:	f7 01       	movw	r30, r14
    740c:	b3 86       	std	Z+11, r11	; 0x0b
    740e:	a2 86       	std	Z+10, r10	; 0x0a
    7410:	e1 cf       	rjmp	.-62     	; 0x73d4 <normalize+0x188>
    7412:	a5 01       	movw	r20, r10
    7414:	44 59       	subi	r20, 0x94	; 148
    7416:	58 4f       	sbci	r21, 0xF8	; 248
    7418:	58 87       	std	Y+8, r21	; 0x08
    741a:	4f 83       	std	Y+7, r20	; 0x07
    741c:	35 01       	movw	r6, r10
    741e:	56 e4       	ldi	r21, 0x46	; 70
    7420:	65 1a       	sub	r6, r21
    7422:	71 08       	sbc	r7, r1
    7424:	89 e8       	ldi	r24, 0x89	; 137
    7426:	68 16       	cp	r6, r24
    7428:	71 04       	cpc	r7, r1
    742a:	08 f0       	brcs	.+2      	; 0x742e <normalize+0x1e2>
    742c:	9b c0       	rjmp	.+310    	; 0x7564 <normalize+0x318>
    742e:	c0 84       	ldd	r12, Z+8	; 0x08
    7430:	d1 84       	ldd	r13, Z+9	; 0x09
    7432:	9c e0       	ldi	r25, 0x0C	; 12
    7434:	c9 16       	cp	r12, r25
    7436:	d1 04       	cpc	r13, r1
    7438:	08 f0       	brcs	.+2      	; 0x743c <normalize+0x1f0>
    743a:	94 c0       	rjmp	.+296    	; 0x7564 <normalize+0x318>
    743c:	24 01       	movw	r4, r8
    743e:	e1 e0       	ldi	r30, 0x01	; 1
    7440:	4e 1a       	sub	r4, r30
    7442:	51 08       	sbc	r5, r1
    7444:	6f 81       	ldd	r22, Y+7	; 0x07
    7446:	78 85       	ldd	r23, Y+8	; 0x08
    7448:	c6 01       	movw	r24, r12
    744a:	f4 dc       	rcall	.-1560   	; 0x6e34 <Days_Per_Month>
    744c:	48 16       	cp	r4, r24
    744e:	59 06       	cpc	r5, r25
    7450:	0c f0       	brlt	.+2      	; 0x7454 <normalize+0x208>
    7452:	88 c0       	rjmp	.+272    	; 0x7564 <normalize+0x318>
    7454:	08 31       	cpi	r16, 0x18	; 24
    7456:	11 05       	cpc	r17, r1
    7458:	0c f0       	brlt	.+2      	; 0x745c <normalize+0x210>
    745a:	84 c0       	rjmp	.+264    	; 0x7564 <normalize+0x318>
    745c:	fc e3       	ldi	r31, 0x3C	; 60
    745e:	2f 16       	cp	r2, r31
    7460:	31 04       	cpc	r3, r1
    7462:	0c f0       	brlt	.+2      	; 0x7466 <normalize+0x21a>
    7464:	7f c0       	rjmp	.+254    	; 0x7564 <normalize+0x318>
    7466:	4d 81       	ldd	r20, Y+5	; 0x05
    7468:	5e 81       	ldd	r21, Y+6	; 0x06
    746a:	4c 33       	cpi	r20, 0x3C	; 60
    746c:	51 05       	cpc	r21, r1
    746e:	0c f0       	brlt	.+2      	; 0x7472 <normalize+0x226>
    7470:	79 c0       	rjmp	.+242    	; 0x7564 <normalize+0x318>
    7472:	2d e6       	ldi	r18, 0x6D	; 109
    7474:	31 e0       	ldi	r19, 0x01	; 1
    7476:	d3 01       	movw	r26, r6
    7478:	0e 94 0e ec 	call	0x1d81c	; 0x1d81c <__usmulhisi3>
    747c:	f6 01       	movw	r30, r12
    747e:	ee 0f       	add	r30, r30
    7480:	ff 1f       	adc	r31, r31
    7482:	eb 53       	subi	r30, 0x3B	; 59
    7484:	fd 4f       	sbci	r31, 0xFD	; 253
    7486:	20 81       	ld	r18, Z
    7488:	31 81       	ldd	r19, Z+1	; 0x01
    748a:	dc 01       	movw	r26, r24
    748c:	cb 01       	movw	r24, r22
    748e:	82 0f       	add	r24, r18
    7490:	93 1f       	adc	r25, r19
    7492:	a1 1d       	adc	r26, r1
    7494:	b1 1d       	adc	r27, r1
    7496:	05 2c       	mov	r0, r5
    7498:	00 0c       	add	r0, r0
    749a:	66 08       	sbc	r6, r6
    749c:	77 08       	sbc	r7, r7
    749e:	48 0e       	add	r4, r24
    74a0:	59 1e       	adc	r5, r25
    74a2:	6a 1e       	adc	r6, r26
    74a4:	7b 1e       	adc	r7, r27
    74a6:	1a 14       	cp	r1, r10
    74a8:	1b 04       	cpc	r1, r11
    74aa:	1c f4       	brge	.+6      	; 0x74b2 <normalize+0x266>
    74ac:	51 e0       	ldi	r21, 0x01	; 1
    74ae:	a5 1a       	sub	r10, r21
    74b0:	b1 08       	sbc	r11, r1
    74b2:	45 01       	movw	r8, r10
    74b4:	95 94       	asr	r9
    74b6:	87 94       	ror	r8
    74b8:	95 94       	asr	r9
    74ba:	87 94       	ror	r8
    74bc:	88 ec       	ldi	r24, 0xC8	; 200
    74be:	a8 16       	cp	r10, r24
    74c0:	b1 04       	cpc	r11, r1
    74c2:	1c f0       	brlt	.+6      	; 0x74ca <normalize+0x27e>
    74c4:	91 e0       	ldi	r25, 0x01	; 1
    74c6:	89 1a       	sub	r8, r25
    74c8:	91 08       	sbc	r9, r1
    74ca:	09 2c       	mov	r0, r9
    74cc:	00 0c       	add	r0, r0
    74ce:	aa 08       	sbc	r10, r10
    74d0:	bb 08       	sbc	r11, r11
    74d2:	84 0c       	add	r8, r4
    74d4:	95 1c       	adc	r9, r5
    74d6:	a6 1c       	adc	r10, r6
    74d8:	b7 1c       	adc	r11, r7
    74da:	24 01       	movw	r4, r8
    74dc:	35 01       	movw	r6, r10
    74de:	e1 e1       	ldi	r30, 0x11	; 17
    74e0:	4e 1a       	sub	r4, r30
    74e2:	51 08       	sbc	r5, r1
    74e4:	61 08       	sbc	r6, r1
    74e6:	71 08       	sbc	r7, r1
    74e8:	f2 e0       	ldi	r31, 0x02	; 2
    74ea:	cf 16       	cp	r12, r31
    74ec:	d1 04       	cpc	r13, r1
    74ee:	64 f0       	brlt	.+24     	; 0x7508 <normalize+0x2bc>
    74f0:	8f 81       	ldd	r24, Y+7	; 0x07
    74f2:	98 85       	ldd	r25, Y+8	; 0x08
    74f4:	7a dc       	rcall	.-1804   	; 0x6dea <IS_Leap>
    74f6:	89 2b       	or	r24, r25
    74f8:	39 f0       	breq	.+14     	; 0x7508 <normalize+0x2bc>
    74fa:	24 01       	movw	r4, r8
    74fc:	35 01       	movw	r6, r10
    74fe:	40 e1       	ldi	r20, 0x10	; 16
    7500:	44 1a       	sub	r4, r20
    7502:	51 08       	sbc	r5, r1
    7504:	61 08       	sbc	r6, r1
    7506:	71 08       	sbc	r7, r1
    7508:	a8 e1       	ldi	r26, 0x18	; 24
    750a:	b0 e0       	ldi	r27, 0x00	; 0
    750c:	a3 01       	movw	r20, r6
    750e:	92 01       	movw	r18, r4
    7510:	0e 94 14 ec 	call	0x1d828	; 0x1d828 <__muluhisi3>
    7514:	01 2e       	mov	r0, r17
    7516:	00 0c       	add	r0, r0
    7518:	22 0b       	sbc	r18, r18
    751a:	33 0b       	sbc	r19, r19
    751c:	a9 01       	movw	r20, r18
    751e:	98 01       	movw	r18, r16
    7520:	26 0f       	add	r18, r22
    7522:	37 1f       	adc	r19, r23
    7524:	48 1f       	adc	r20, r24
    7526:	59 1f       	adc	r21, r25
    7528:	ac e3       	ldi	r26, 0x3C	; 60
    752a:	b0 e0       	ldi	r27, 0x00	; 0
    752c:	0e 94 14 ec 	call	0x1d828	; 0x1d828 <__muluhisi3>
    7530:	81 01       	movw	r16, r2
    7532:	03 2c       	mov	r0, r3
    7534:	00 0c       	add	r0, r0
    7536:	22 0b       	sbc	r18, r18
    7538:	33 0b       	sbc	r19, r19
    753a:	a9 01       	movw	r20, r18
    753c:	98 01       	movw	r18, r16
    753e:	26 0f       	add	r18, r22
    7540:	37 1f       	adc	r19, r23
    7542:	48 1f       	adc	r20, r24
    7544:	59 1f       	adc	r21, r25
    7546:	0e 94 14 ec 	call	0x1d828	; 0x1d828 <__muluhisi3>
    754a:	ed 81       	ldd	r30, Y+5	; 0x05
    754c:	fe 81       	ldd	r31, Y+6	; 0x06
    754e:	8f 01       	movw	r16, r30
    7550:	ff 0f       	add	r31, r31
    7552:	22 0b       	sbc	r18, r18
    7554:	33 0b       	sbc	r19, r19
    7556:	48 01       	movw	r8, r16
    7558:	59 01       	movw	r10, r18
    755a:	86 0e       	add	r8, r22
    755c:	97 1e       	adc	r9, r23
    755e:	a8 1e       	adc	r10, r24
    7560:	b9 1e       	adc	r11, r25
    7562:	04 c0       	rjmp	.+8      	; 0x756c <normalize+0x320>
    7564:	88 24       	eor	r8, r8
    7566:	8a 94       	dec	r8
    7568:	98 2c       	mov	r9, r8
    756a:	54 01       	movw	r10, r8
    756c:	49 85       	ldd	r20, Y+9	; 0x09
    756e:	5a 85       	ldd	r21, Y+10	; 0x0a
    7570:	45 2b       	or	r20, r21
    7572:	e9 f0       	breq	.+58     	; 0x75ae <normalize+0x362>
    7574:	ce 01       	movw	r24, r28
    7576:	01 96       	adiw	r24, 0x01	; 1
    7578:	7c dd       	rcall	.-1288   	; 0x7072 <gettimezone>
    757a:	a9 81       	ldd	r26, Y+1	; 0x01
    757c:	ba 81       	ldd	r27, Y+2	; 0x02
    757e:	2c e3       	ldi	r18, 0x3C	; 60
    7580:	30 e0       	ldi	r19, 0x00	; 0
    7582:	0e 94 0e ec 	call	0x1d81c	; 0x1d81c <__usmulhisi3>
    7586:	2b 01       	movw	r4, r22
    7588:	3c 01       	movw	r6, r24
    758a:	c5 01       	movw	r24, r10
    758c:	b4 01       	movw	r22, r8
    758e:	e2 dd       	rcall	.-1084   	; 0x7154 <is_dst>
    7590:	89 2b       	or	r24, r25
    7592:	51 f0       	breq	.+20     	; 0x75a8 <normalize+0x35c>
    7594:	50 e1       	ldi	r21, 0x10	; 16
    7596:	45 1a       	sub	r4, r21
    7598:	5e e0       	ldi	r21, 0x0E	; 14
    759a:	55 0a       	sbc	r5, r21
    759c:	61 08       	sbc	r6, r1
    759e:	71 08       	sbc	r7, r1
    75a0:	cc 24       	eor	r12, r12
    75a2:	c3 94       	inc	r12
    75a4:	d1 2c       	mov	r13, r1
    75a6:	08 c0       	rjmp	.+16     	; 0x75b8 <normalize+0x36c>
    75a8:	c1 2c       	mov	r12, r1
    75aa:	d1 2c       	mov	r13, r1
    75ac:	05 c0       	rjmp	.+10     	; 0x75b8 <normalize+0x36c>
    75ae:	c1 2c       	mov	r12, r1
    75b0:	d1 2c       	mov	r13, r1
    75b2:	41 2c       	mov	r4, r1
    75b4:	51 2c       	mov	r5, r1
    75b6:	32 01       	movw	r6, r4
    75b8:	87 01       	movw	r16, r14
    75ba:	a3 01       	movw	r20, r6
    75bc:	92 01       	movw	r18, r4
    75be:	c5 01       	movw	r24, r10
    75c0:	b4 01       	movw	r22, r8
    75c2:	59 dc       	rcall	.-1870   	; 0x6e76 <time_to_tm>
    75c4:	c1 14       	cp	r12, r1
    75c6:	d1 04       	cpc	r13, r1
    75c8:	29 f0       	breq	.+10     	; 0x75d4 <normalize+0x388>
    75ca:	21 e0       	ldi	r18, 0x01	; 1
    75cc:	30 e0       	ldi	r19, 0x00	; 0
    75ce:	f7 01       	movw	r30, r14
    75d0:	31 8b       	std	Z+17, r19	; 0x11
    75d2:	20 8b       	std	Z+16, r18	; 0x10
    75d4:	2a 96       	adiw	r28, 0x0a	; 10
    75d6:	e2 e1       	ldi	r30, 0x12	; 18
    75d8:	0c 94 50 ec 	jmp	0x1d8a0	; 0x1d8a0 <__epilogue_restores__>

000075dc <timegm>:
    75dc:	60 e0       	ldi	r22, 0x00	; 0
    75de:	70 e0       	ldi	r23, 0x00	; 0
    75e0:	35 ce       	rjmp	.-918    	; 0x724c <normalize>
    75e2:	08 95       	ret

000075e4 <setdate_r>:
    75e4:	cf 92       	push	r12
    75e6:	df 92       	push	r13
    75e8:	ef 92       	push	r14
    75ea:	ff 92       	push	r15
    75ec:	cf 93       	push	r28
    75ee:	df 93       	push	r29
    75f0:	cd b7       	in	r28, 0x3d	; 61
    75f2:	de b7       	in	r29, 0x3e	; 62
    75f4:	a0 97       	sbiw	r28, 0x20	; 32
    75f6:	0f b6       	in	r0, 0x3f	; 63
    75f8:	f8 94       	cli
    75fa:	de bf       	out	0x3e, r29	; 62
    75fc:	0f be       	out	0x3f, r0	; 63
    75fe:	cd bf       	out	0x3d, r28	; 61
    7600:	98 a3       	std	Y+32, r25	; 0x20
    7602:	8f 8f       	std	Y+31, r24	; 0x1f
    7604:	1a 82       	std	Y+2, r1	; 0x02
    7606:	19 82       	std	Y+1, r1	; 0x01
    7608:	1c 82       	std	Y+4, r1	; 0x04
    760a:	1b 82       	std	Y+3, r1	; 0x03
    760c:	1e 82       	std	Y+6, r1	; 0x06
    760e:	1d 82       	std	Y+5, r1	; 0x05
    7610:	18 86       	std	Y+8, r1	; 0x08
    7612:	1f 82       	std	Y+7, r1	; 0x07
    7614:	1a 86       	std	Y+10, r1	; 0x0a
    7616:	19 86       	std	Y+9, r1	; 0x09
    7618:	1c 86       	std	Y+12, r1	; 0x0c
    761a:	1b 86       	std	Y+11, r1	; 0x0b
    761c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    761e:	98 a1       	ldd	r25, Y+32	; 0x20
    7620:	fc 01       	movw	r30, r24
    7622:	20 81       	ld	r18, Z
    7624:	20 32       	cpi	r18, 0x20	; 32
    7626:	21 f4       	brne	.+8      	; 0x7630 <setdate_r+0x4c>
    7628:	01 96       	adiw	r24, 0x01	; 1
    762a:	98 a3       	std	Y+32, r25	; 0x20
    762c:	8f 8f       	std	Y+31, r24	; 0x1f
    762e:	f6 cf       	rjmp	.-20     	; 0x761c <setdate_r+0x38>
    7630:	4a e0       	ldi	r20, 0x0A	; 10
    7632:	50 e0       	ldi	r21, 0x00	; 0
    7634:	be 01       	movw	r22, r28
    7636:	61 5e       	subi	r22, 0xE1	; 225
    7638:	7f 4f       	sbci	r23, 0xFF	; 255
    763a:	0e 94 08 47 	call	0x8e10	; 0x8e10 <strtol>
    763e:	7c 87       	std	Y+12, r23	; 0x0c
    7640:	6b 87       	std	Y+11, r22	; 0x0b
    7642:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7644:	98 a1       	ldd	r25, Y+32	; 0x20
    7646:	fc 01       	movw	r30, r24
    7648:	20 81       	ld	r18, Z
    764a:	20 32       	cpi	r18, 0x20	; 32
    764c:	21 f4       	brne	.+8      	; 0x7656 <setdate_r+0x72>
    764e:	01 96       	adiw	r24, 0x01	; 1
    7650:	98 a3       	std	Y+32, r25	; 0x20
    7652:	8f 8f       	std	Y+31, r24	; 0x1f
    7654:	f6 cf       	rjmp	.-20     	; 0x7642 <setdate_r+0x5e>
    7656:	4a e0       	ldi	r20, 0x0A	; 10
    7658:	50 e0       	ldi	r21, 0x00	; 0
    765a:	be 01       	movw	r22, r28
    765c:	61 5e       	subi	r22, 0xE1	; 225
    765e:	7f 4f       	sbci	r23, 0xFF	; 255
    7660:	0e 94 08 47 	call	0x8e10	; 0x8e10 <strtol>
    7664:	7a 87       	std	Y+10, r23	; 0x0a
    7666:	69 87       	std	Y+9, r22	; 0x09
    7668:	8f 8d       	ldd	r24, Y+31	; 0x1f
    766a:	98 a1       	ldd	r25, Y+32	; 0x20
    766c:	fc 01       	movw	r30, r24
    766e:	20 81       	ld	r18, Z
    7670:	20 32       	cpi	r18, 0x20	; 32
    7672:	21 f4       	brne	.+8      	; 0x767c <setdate_r+0x98>
    7674:	01 96       	adiw	r24, 0x01	; 1
    7676:	98 a3       	std	Y+32, r25	; 0x20
    7678:	8f 8f       	std	Y+31, r24	; 0x1f
    767a:	f6 cf       	rjmp	.-20     	; 0x7668 <setdate_r+0x84>
    767c:	4a e0       	ldi	r20, 0x0A	; 10
    767e:	50 e0       	ldi	r21, 0x00	; 0
    7680:	be 01       	movw	r22, r28
    7682:	61 5e       	subi	r22, 0xE1	; 225
    7684:	7f 4f       	sbci	r23, 0xFF	; 255
    7686:	0e 94 08 47 	call	0x8e10	; 0x8e10 <strtol>
    768a:	78 87       	std	Y+8, r23	; 0x08
    768c:	6f 83       	std	Y+7, r22	; 0x07
    768e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7690:	98 a1       	ldd	r25, Y+32	; 0x20
    7692:	fc 01       	movw	r30, r24
    7694:	20 81       	ld	r18, Z
    7696:	20 32       	cpi	r18, 0x20	; 32
    7698:	21 f4       	brne	.+8      	; 0x76a2 <setdate_r+0xbe>
    769a:	01 96       	adiw	r24, 0x01	; 1
    769c:	98 a3       	std	Y+32, r25	; 0x20
    769e:	8f 8f       	std	Y+31, r24	; 0x1f
    76a0:	f6 cf       	rjmp	.-20     	; 0x768e <setdate_r+0xaa>
    76a2:	4a e0       	ldi	r20, 0x0A	; 10
    76a4:	50 e0       	ldi	r21, 0x00	; 0
    76a6:	be 01       	movw	r22, r28
    76a8:	61 5e       	subi	r22, 0xE1	; 225
    76aa:	7f 4f       	sbci	r23, 0xFF	; 255
    76ac:	0e 94 08 47 	call	0x8e10	; 0x8e10 <strtol>
    76b0:	7e 83       	std	Y+6, r23	; 0x06
    76b2:	6d 83       	std	Y+5, r22	; 0x05
    76b4:	ef 8d       	ldd	r30, Y+31	; 0x1f
    76b6:	f8 a1       	ldd	r31, Y+32	; 0x20
    76b8:	80 81       	ld	r24, Z
    76ba:	88 23       	and	r24, r24
    76bc:	39 f0       	breq	.+14     	; 0x76cc <setdate_r+0xe8>
    76be:	80 32       	cpi	r24, 0x20	; 32
    76c0:	11 f0       	breq	.+4      	; 0x76c6 <setdate_r+0xe2>
    76c2:	8a 33       	cpi	r24, 0x3A	; 58
    76c4:	19 f4       	brne	.+6      	; 0x76cc <setdate_r+0xe8>
    76c6:	31 96       	adiw	r30, 0x01	; 1
    76c8:	f8 a3       	std	Y+32, r31	; 0x20
    76ca:	ef 8f       	std	Y+31, r30	; 0x1f
    76cc:	4a e0       	ldi	r20, 0x0A	; 10
    76ce:	50 e0       	ldi	r21, 0x00	; 0
    76d0:	be 01       	movw	r22, r28
    76d2:	61 5e       	subi	r22, 0xE1	; 225
    76d4:	7f 4f       	sbci	r23, 0xFF	; 255
    76d6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    76d8:	98 a1       	ldd	r25, Y+32	; 0x20
    76da:	0e 94 08 47 	call	0x8e10	; 0x8e10 <strtol>
    76de:	7c 83       	std	Y+4, r23	; 0x04
    76e0:	6b 83       	std	Y+3, r22	; 0x03
    76e2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    76e4:	f8 a1       	ldd	r31, Y+32	; 0x20
    76e6:	80 81       	ld	r24, Z
    76e8:	88 23       	and	r24, r24
    76ea:	39 f0       	breq	.+14     	; 0x76fa <setdate_r+0x116>
    76ec:	80 32       	cpi	r24, 0x20	; 32
    76ee:	11 f0       	breq	.+4      	; 0x76f4 <setdate_r+0x110>
    76f0:	8a 33       	cpi	r24, 0x3A	; 58
    76f2:	19 f4       	brne	.+6      	; 0x76fa <setdate_r+0x116>
    76f4:	31 96       	adiw	r30, 0x01	; 1
    76f6:	f8 a3       	std	Y+32, r31	; 0x20
    76f8:	ef 8f       	std	Y+31, r30	; 0x1f
    76fa:	4a e0       	ldi	r20, 0x0A	; 10
    76fc:	50 e0       	ldi	r21, 0x00	; 0
    76fe:	be 01       	movw	r22, r28
    7700:	61 5e       	subi	r22, 0xE1	; 225
    7702:	7f 4f       	sbci	r23, 0xFF	; 255
    7704:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7706:	98 a1       	ldd	r25, Y+32	; 0x20
    7708:	0e 94 08 47 	call	0x8e10	; 0x8e10 <strtol>
    770c:	7a 83       	std	Y+2, r23	; 0x02
    770e:	69 83       	std	Y+1, r22	; 0x01
    7710:	29 85       	ldd	r18, Y+9	; 0x09
    7712:	3a 85       	ldd	r19, Y+10	; 0x0a
    7714:	21 50       	subi	r18, 0x01	; 1
    7716:	31 09       	sbc	r19, r1
    7718:	3a 87       	std	Y+10, r19	; 0x0a
    771a:	29 87       	std	Y+9, r18	; 0x09
    771c:	8b 85       	ldd	r24, Y+11	; 0x0b
    771e:	9c 85       	ldd	r25, Y+12	; 0x0c
    7720:	ac 01       	movw	r20, r24
    7722:	42 5b       	subi	r20, 0xB2	; 178
    7724:	57 40       	sbci	r21, 0x07	; 7
    7726:	45 34       	cpi	r20, 0x45	; 69
    7728:	51 05       	cpc	r21, r1
    772a:	28 f0       	brcs	.+10     	; 0x7736 <setdate_r+0x152>
    772c:	9f 93       	push	r25
    772e:	8f 93       	push	r24
    7730:	8c e6       	ldi	r24, 0x6C	; 108
    7732:	97 e0       	ldi	r25, 0x07	; 7
    7734:	2c c0       	rjmp	.+88     	; 0x778e <setdate_r+0x1aa>
    7736:	8c 56       	subi	r24, 0x6C	; 108
    7738:	97 40       	sbci	r25, 0x07	; 7
    773a:	9c 87       	std	Y+12, r25	; 0x0c
    773c:	8b 87       	std	Y+11, r24	; 0x0b
    773e:	2c 30       	cpi	r18, 0x0C	; 12
    7740:	31 05       	cpc	r19, r1
    7742:	28 f0       	brcs	.+10     	; 0x774e <setdate_r+0x16a>
    7744:	9f 93       	push	r25
    7746:	8f 93       	push	r24
    7748:	8b e5       	ldi	r24, 0x5B	; 91
    774a:	97 e0       	ldi	r25, 0x07	; 7
    774c:	20 c0       	rjmp	.+64     	; 0x778e <setdate_r+0x1aa>
    774e:	8f 81       	ldd	r24, Y+7	; 0x07
    7750:	98 85       	ldd	r25, Y+8	; 0x08
    7752:	9c 01       	movw	r18, r24
    7754:	21 50       	subi	r18, 0x01	; 1
    7756:	31 09       	sbc	r19, r1
    7758:	2f 31       	cpi	r18, 0x1F	; 31
    775a:	31 05       	cpc	r19, r1
    775c:	28 f0       	brcs	.+10     	; 0x7768 <setdate_r+0x184>
    775e:	9f 93       	push	r25
    7760:	8f 93       	push	r24
    7762:	8a e4       	ldi	r24, 0x4A	; 74
    7764:	97 e0       	ldi	r25, 0x07	; 7
    7766:	13 c0       	rjmp	.+38     	; 0x778e <setdate_r+0x1aa>
    7768:	8d 81       	ldd	r24, Y+5	; 0x05
    776a:	9e 81       	ldd	r25, Y+6	; 0x06
    776c:	88 31       	cpi	r24, 0x18	; 24
    776e:	91 05       	cpc	r25, r1
    7770:	28 f0       	brcs	.+10     	; 0x777c <setdate_r+0x198>
    7772:	9f 93       	push	r25
    7774:	8f 93       	push	r24
    7776:	88 e3       	ldi	r24, 0x38	; 56
    7778:	97 e0       	ldi	r25, 0x07	; 7
    777a:	09 c0       	rjmp	.+18     	; 0x778e <setdate_r+0x1aa>
    777c:	8b 81       	ldd	r24, Y+3	; 0x03
    777e:	9c 81       	ldd	r25, Y+4	; 0x04
    7780:	8c 33       	cpi	r24, 0x3C	; 60
    7782:	91 05       	cpc	r25, r1
    7784:	78 f0       	brcs	.+30     	; 0x77a4 <setdate_r+0x1c0>
    7786:	9f 93       	push	r25
    7788:	8f 93       	push	r24
    778a:	87 e2       	ldi	r24, 0x27	; 39
    778c:	97 e0       	ldi	r25, 0x07	; 7
    778e:	1f 92       	push	r1
    7790:	9f 93       	push	r25
    7792:	8f 93       	push	r24
    7794:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    7798:	0f 90       	pop	r0
    779a:	0f 90       	pop	r0
    779c:	0f 90       	pop	r0
    779e:	0f 90       	pop	r0
    77a0:	0f 90       	pop	r0
    77a2:	25 c0       	rjmp	.+74     	; 0x77ee <setdate_r+0x20a>
    77a4:	ce 01       	movw	r24, r28
    77a6:	01 96       	adiw	r24, 0x01	; 1
    77a8:	19 df       	rcall	.-462    	; 0x75dc <timegm>
    77aa:	6b 01       	movw	r12, r22
    77ac:	7c 01       	movw	r14, r24
    77ae:	6f 8b       	std	Y+23, r22	; 0x17
    77b0:	78 8f       	std	Y+24, r23	; 0x18
    77b2:	89 8f       	std	Y+25, r24	; 0x19
    77b4:	9a 8f       	std	Y+26, r25	; 0x1a
    77b6:	1b 8e       	std	Y+27, r1	; 0x1b
    77b8:	1c 8e       	std	Y+28, r1	; 0x1c
    77ba:	1d 8e       	std	Y+29, r1	; 0x1d
    77bc:	1e 8e       	std	Y+30, r1	; 0x1e
    77be:	be 01       	movw	r22, r28
    77c0:	69 5e       	subi	r22, 0xE9	; 233
    77c2:	7f 4f       	sbci	r23, 0xFF	; 255
    77c4:	80 e0       	ldi	r24, 0x00	; 0
    77c6:	90 e0       	ldi	r25, 0x00	; 0
    77c8:	08 db       	rcall	.-2544   	; 0x6dda <clock_settime>
    77ca:	b7 01       	movw	r22, r14
    77cc:	a6 01       	movw	r20, r12
    77ce:	81 e0       	ldi	r24, 0x01	; 1
    77d0:	90 e0       	ldi	r25, 0x00	; 0
    77d2:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <rtc_init>
    77d6:	81 11       	cpse	r24, r1
    77d8:	0d c0       	rjmp	.+26     	; 0x77f4 <setdate_r+0x210>
    77da:	80 e1       	ldi	r24, 0x10	; 16
    77dc:	97 e0       	ldi	r25, 0x07	; 7
    77de:	1f 92       	push	r1
    77e0:	9f 93       	push	r25
    77e2:	8f 93       	push	r24
    77e4:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    77e8:	0f 90       	pop	r0
    77ea:	0f 90       	pop	r0
    77ec:	0f 90       	pop	r0
    77ee:	8f ef       	ldi	r24, 0xFF	; 255
    77f0:	9f ef       	ldi	r25, 0xFF	; 255
    77f2:	02 c0       	rjmp	.+4      	; 0x77f8 <setdate_r+0x214>
    77f4:	80 e0       	ldi	r24, 0x00	; 0
    77f6:	90 e0       	ldi	r25, 0x00	; 0
    77f8:	a0 96       	adiw	r28, 0x20	; 32
    77fa:	0f b6       	in	r0, 0x3f	; 63
    77fc:	f8 94       	cli
    77fe:	de bf       	out	0x3e, r29	; 62
    7800:	0f be       	out	0x3f, r0	; 63
    7802:	cd bf       	out	0x3d, r28	; 61
    7804:	df 91       	pop	r29
    7806:	cf 91       	pop	r28
    7808:	ff 90       	pop	r15
    780a:	ef 90       	pop	r14
    780c:	df 90       	pop	r13
    780e:	cf 90       	pop	r12
    7810:	08 95       	ret

00007812 <setdate>:
    7812:	a8 e2       	ldi	r26, 0x28	; 40
    7814:	b0 e0       	ldi	r27, 0x00	; 0
    7816:	ef e0       	ldi	r30, 0x0F	; 15
    7818:	fc e3       	ldi	r31, 0x3C	; 60
    781a:	0c 94 44 ec 	jmp	0x1d888	; 0x1d888 <__prologue_saves__+0x20>
    781e:	8e e7       	ldi	r24, 0x7E	; 126
    7820:	97 e0       	ldi	r25, 0x07	; 7
    7822:	1f 92       	push	r1
    7824:	9f 93       	push	r25
    7826:	8f 93       	push	r24
    7828:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    782c:	40 91 1a 1d 	lds	r20, 0x1D1A	; 0x801d1a <__iob>
    7830:	50 91 1b 1d 	lds	r21, 0x1D1B	; 0x801d1b <__iob+0x1>
    7834:	67 e2       	ldi	r22, 0x27	; 39
    7836:	70 e0       	ldi	r23, 0x00	; 0
    7838:	ce 01       	movw	r24, r28
    783a:	01 96       	adiw	r24, 0x01	; 1
    783c:	0e 94 ed 7a 	call	0xf5da	; 0xf5da <fgets>
    7840:	ce 01       	movw	r24, r28
    7842:	01 96       	adiw	r24, 0x01	; 1
    7844:	cf de       	rcall	.-610    	; 0x75e4 <setdate_r>
    7846:	0f 90       	pop	r0
    7848:	0f 90       	pop	r0
    784a:	0f 90       	pop	r0
    784c:	a8 96       	adiw	r28, 0x28	; 40
    784e:	e2 e0       	ldi	r30, 0x02	; 2
    7850:	0c 94 60 ec 	jmp	0x1d8c0	; 0x1d8c0 <__epilogue_restores__+0x20>

00007854 <find_dst>:
    7854:	a8 e2       	ldi	r26, 0x28	; 40
    7856:	b0 e0       	ldi	r27, 0x00	; 0
    7858:	e0 e3       	ldi	r30, 0x30	; 48
    785a:	fc e3       	ldi	r31, 0x3C	; 60
    785c:	0c 94 34 ec 	jmp	0x1d868	; 0x1d868 <__prologue_saves__>
    7860:	3c 01       	movw	r6, r24
    7862:	1a 01       	movw	r2, r20
    7864:	2b 01       	movw	r4, r22
    7866:	49 01       	movw	r8, r18
    7868:	1c a3       	std	Y+36, r17	; 0x24
    786a:	0b a3       	std	Y+35, r16	; 0x23
    786c:	de a2       	std	Y+38, r13	; 0x26
    786e:	cd a2       	std	Y+37, r12	; 0x25
    7870:	b8 a6       	std	Y+40, r11	; 0x28
    7872:	af a2       	std	Y+39, r10	; 0x27
    7874:	be 01       	movw	r22, r28
    7876:	61 5e       	subi	r22, 0xE1	; 225
    7878:	7f 4f       	sbci	r23, 0xFF	; 255
    787a:	ce 01       	movw	r24, r28
    787c:	47 96       	adiw	r24, 0x17	; 23
    787e:	1b dc       	rcall	.-1994   	; 0x70b6 <gettimeofday>
    7880:	af 8d       	ldd	r26, Y+31	; 0x1f
    7882:	b8 a1       	ldd	r27, Y+32	; 0x20
    7884:	2c e3       	ldi	r18, 0x3C	; 60
    7886:	30 e0       	ldi	r19, 0x00	; 0
    7888:	0e 94 0e ec 	call	0x1d81c	; 0x1d81c <__usmulhisi3>
    788c:	5b 01       	movw	r10, r22
    788e:	6c 01       	movw	r12, r24
    7890:	61 14       	cp	r6, r1
    7892:	71 04       	cpc	r7, r1
    7894:	31 f0       	breq	.+12     	; 0x78a2 <find_dst+0x4e>
    7896:	20 e1       	ldi	r18, 0x10	; 16
    7898:	a2 1a       	sub	r10, r18
    789a:	2e e0       	ldi	r18, 0x0E	; 14
    789c:	b2 0a       	sbc	r11, r18
    789e:	c1 08       	sbc	r12, r1
    78a0:	d1 08       	sbc	r13, r1
    78a2:	81 14       	cp	r8, r1
    78a4:	91 04       	cpc	r9, r1
    78a6:	39 f0       	breq	.+14     	; 0x78b6 <find_dst+0x62>
    78a8:	4c e6       	ldi	r20, 0x6C	; 108
    78aa:	84 1a       	sub	r8, r20
    78ac:	47 e0       	ldi	r20, 0x07	; 7
    78ae:	94 0a       	sbc	r9, r20
    78b0:	9c 86       	std	Y+12, r9	; 0x0c
    78b2:	8b 86       	std	Y+11, r8	; 0x0b
    78b4:	11 c0       	rjmp	.+34     	; 0x78d8 <find_dst+0x84>
    78b6:	21 14       	cp	r2, r1
    78b8:	31 04       	cpc	r3, r1
    78ba:	41 04       	cpc	r4, r1
    78bc:	51 04       	cpc	r5, r1
    78be:	21 f4       	brne	.+8      	; 0x78c8 <find_dst+0x74>
    78c0:	2f 88       	ldd	r2, Y+23	; 0x17
    78c2:	38 8c       	ldd	r3, Y+24	; 0x18
    78c4:	49 8c       	ldd	r4, Y+25	; 0x19
    78c6:	5a 8c       	ldd	r5, Y+26	; 0x1a
    78c8:	8e 01       	movw	r16, r28
    78ca:	0f 5f       	subi	r16, 0xFF	; 255
    78cc:	1f 4f       	sbci	r17, 0xFF	; 255
    78ce:	a6 01       	movw	r20, r12
    78d0:	95 01       	movw	r18, r10
    78d2:	c2 01       	movw	r24, r4
    78d4:	b1 01       	movw	r22, r2
    78d6:	cf da       	rcall	.-2658   	; 0x6e76 <time_to_tm>
    78d8:	8b a1       	ldd	r24, Y+35	; 0x23
    78da:	9c a1       	ldd	r25, Y+36	; 0x24
    78dc:	01 97       	sbiw	r24, 0x01	; 1
    78de:	9a 87       	std	Y+10, r25	; 0x0a
    78e0:	89 87       	std	Y+9, r24	; 0x09
    78e2:	81 e0       	ldi	r24, 0x01	; 1
    78e4:	90 e0       	ldi	r25, 0x00	; 0
    78e6:	98 87       	std	Y+8, r25	; 0x08
    78e8:	8f 83       	std	Y+7, r24	; 0x07
    78ea:	8f a1       	ldd	r24, Y+39	; 0x27
    78ec:	98 a5       	ldd	r25, Y+40	; 0x28
    78ee:	9e 83       	std	Y+6, r25	; 0x06
    78f0:	8d 83       	std	Y+5, r24	; 0x05
    78f2:	1c 82       	std	Y+4, r1	; 0x04
    78f4:	1b 82       	std	Y+3, r1	; 0x03
    78f6:	1a 82       	std	Y+2, r1	; 0x02
    78f8:	19 82       	std	Y+1, r1	; 0x01
    78fa:	ce 01       	movw	r24, r28
    78fc:	01 96       	adiw	r24, 0x01	; 1
    78fe:	6e de       	rcall	.-804    	; 0x75dc <timegm>
    7900:	45 01       	movw	r8, r10
    7902:	56 01       	movw	r10, r12
    7904:	86 0e       	add	r8, r22
    7906:	97 1e       	adc	r9, r23
    7908:	a8 1e       	adc	r10, r24
    790a:	b9 1e       	adc	r11, r25
    790c:	8e 01       	movw	r16, r28
    790e:	0f 5f       	subi	r16, 0xFF	; 255
    7910:	1f 4f       	sbci	r17, 0xFF	; 255
    7912:	20 e0       	ldi	r18, 0x00	; 0
    7914:	30 e0       	ldi	r19, 0x00	; 0
    7916:	a9 01       	movw	r20, r18
    7918:	c5 01       	movw	r24, r10
    791a:	b4 01       	movw	r22, r8
    791c:	ac da       	rcall	.-2728   	; 0x6e76 <time_to_tm>
    791e:	2d 85       	ldd	r18, Y+13	; 0x0d
    7920:	3e 85       	ldd	r19, Y+14	; 0x0e
    7922:	e7 e0       	ldi	r30, 0x07	; 7
    7924:	f0 e0       	ldi	r31, 0x00	; 0
    7926:	c9 01       	movw	r24, r18
    7928:	bf 01       	movw	r22, r30
    792a:	0e 94 b4 eb 	call	0x1d768	; 0x1d768 <__divmodhi4>
    792e:	4d a1       	ldd	r20, Y+37	; 0x25
    7930:	5e a1       	ldd	r21, Y+38	; 0x26
    7932:	48 17       	cp	r20, r24
    7934:	59 07       	cpc	r21, r25
    7936:	21 f4       	brne	.+8      	; 0x7940 <find_dst+0xec>
    7938:	51 e0       	ldi	r21, 0x01	; 1
    793a:	e5 1a       	sub	r14, r21
    793c:	f1 08       	sbc	r15, r1
    793e:	51 f0       	breq	.+20     	; 0x7954 <find_dst+0x100>
    7940:	80 e8       	ldi	r24, 0x80	; 128
    7942:	88 0e       	add	r8, r24
    7944:	81 e5       	ldi	r24, 0x51	; 81
    7946:	98 1e       	adc	r9, r24
    7948:	81 e0       	ldi	r24, 0x01	; 1
    794a:	a8 1e       	adc	r10, r24
    794c:	b1 1c       	adc	r11, r1
    794e:	2f 5f       	subi	r18, 0xFF	; 255
    7950:	3f 4f       	sbci	r19, 0xFF	; 255
    7952:	e9 cf       	rjmp	.-46     	; 0x7926 <find_dst+0xd2>
    7954:	c5 01       	movw	r24, r10
    7956:	b4 01       	movw	r22, r8
    7958:	a8 96       	adiw	r28, 0x28	; 40
    795a:	e2 e1       	ldi	r30, 0x12	; 18
    795c:	0c 94 50 ec 	jmp	0x1d8a0	; 0x1d8a0 <__epilogue_restores__>

00007960 <set_dst>:
    7960:	4f 92       	push	r4
    7962:	5f 92       	push	r5
    7964:	6f 92       	push	r6
    7966:	7f 92       	push	r7
    7968:	af 92       	push	r10
    796a:	bf 92       	push	r11
    796c:	cf 92       	push	r12
    796e:	df 92       	push	r13
    7970:	ef 92       	push	r14
    7972:	ff 92       	push	r15
    7974:	0f 93       	push	r16
    7976:	1f 93       	push	r17
    7978:	cf 93       	push	r28
    797a:	df 93       	push	r29
    797c:	cd b7       	in	r28, 0x3d	; 61
    797e:	de b7       	in	r29, 0x3e	; 62
    7980:	2c 97       	sbiw	r28, 0x0c	; 12
    7982:	0f b6       	in	r0, 0x3f	; 63
    7984:	f8 94       	cli
    7986:	de bf       	out	0x3e, r29	; 62
    7988:	0f be       	out	0x3f, r0	; 63
    798a:	cd bf       	out	0x3d, r28	; 61
    798c:	2b 01       	movw	r4, r22
    798e:	3c 01       	movw	r6, r24
    7990:	67 2b       	or	r22, r23
    7992:	68 2b       	or	r22, r24
    7994:	69 2b       	or	r22, r25
    7996:	51 f4       	brne	.+20     	; 0x79ac <set_dst+0x4c>
    7998:	be 01       	movw	r22, r28
    799a:	67 5f       	subi	r22, 0xF7	; 247
    799c:	7f 4f       	sbci	r23, 0xFF	; 255
    799e:	ce 01       	movw	r24, r28
    79a0:	01 96       	adiw	r24, 0x01	; 1
    79a2:	89 db       	rcall	.-2286   	; 0x70b6 <gettimeofday>
    79a4:	49 80       	ldd	r4, Y+1	; 0x01
    79a6:	5a 80       	ldd	r5, Y+2	; 0x02
    79a8:	6b 80       	ldd	r6, Y+3	; 0x03
    79aa:	7c 80       	ldd	r7, Y+4	; 0x04
    79ac:	80 91 d1 1a 	lds	r24, 0x1AD1	; 0x801ad1 <dst+0x8>
    79b0:	90 91 d2 1a 	lds	r25, 0x1AD2	; 0x801ad2 <dst+0x9>
    79b4:	a0 91 d3 1a 	lds	r26, 0x1AD3	; 0x801ad3 <dst+0xa>
    79b8:	b0 91 d4 1a 	lds	r27, 0x1AD4	; 0x801ad4 <dst+0xb>
    79bc:	84 15       	cp	r24, r4
    79be:	95 05       	cpc	r25, r5
    79c0:	a6 05       	cpc	r26, r6
    79c2:	b7 05       	cpc	r27, r7
    79c4:	50 f0       	brcs	.+20     	; 0x79da <set_dst+0x7a>
    79c6:	84 19       	sub	r24, r4
    79c8:	95 09       	sbc	r25, r5
    79ca:	a6 09       	sbc	r26, r6
    79cc:	b7 09       	sbc	r27, r7
    79ce:	80 38       	cpi	r24, 0x80	; 128
    79d0:	91 45       	sbci	r25, 0x51	; 81
    79d2:	a1 40       	sbci	r26, 0x01	; 1
    79d4:	b1 05       	cpc	r27, r1
    79d6:	70 f4       	brcc	.+28     	; 0x79f4 <set_dst+0x94>
    79d8:	42 c0       	rjmp	.+132    	; 0x7a5e <set_dst+0xfe>
    79da:	a3 01       	movw	r20, r6
    79dc:	92 01       	movw	r18, r4
    79de:	28 1b       	sub	r18, r24
    79e0:	39 0b       	sbc	r19, r25
    79e2:	4a 0b       	sbc	r20, r26
    79e4:	5b 0b       	sbc	r21, r27
    79e6:	da 01       	movw	r26, r20
    79e8:	c9 01       	movw	r24, r18
    79ea:	80 38       	cpi	r24, 0x80	; 128
    79ec:	91 45       	sbci	r25, 0x51	; 81
    79ee:	a1 40       	sbci	r26, 0x01	; 1
    79f0:	b1 05       	cpc	r27, r1
    79f2:	a8 f1       	brcs	.+106    	; 0x7a5e <set_dst+0xfe>
    79f4:	40 92 d1 1a 	sts	0x1AD1, r4	; 0x801ad1 <dst+0x8>
    79f8:	50 92 d2 1a 	sts	0x1AD2, r5	; 0x801ad2 <dst+0x9>
    79fc:	60 92 d3 1a 	sts	0x1AD3, r6	; 0x801ad3 <dst+0xa>
    7a00:	70 92 d4 1a 	sts	0x1AD4, r7	; 0x801ad4 <dst+0xb>
    7a04:	82 e0       	ldi	r24, 0x02	; 2
    7a06:	a8 2e       	mov	r10, r24
    7a08:	b1 2c       	mov	r11, r1
    7a0a:	c1 2c       	mov	r12, r1
    7a0c:	d1 2c       	mov	r13, r1
    7a0e:	92 e0       	ldi	r25, 0x02	; 2
    7a10:	e9 2e       	mov	r14, r25
    7a12:	f1 2c       	mov	r15, r1
    7a14:	03 e0       	ldi	r16, 0x03	; 3
    7a16:	10 e0       	ldi	r17, 0x00	; 0
    7a18:	20 e0       	ldi	r18, 0x00	; 0
    7a1a:	30 e0       	ldi	r19, 0x00	; 0
    7a1c:	b3 01       	movw	r22, r6
    7a1e:	a2 01       	movw	r20, r4
    7a20:	80 e0       	ldi	r24, 0x00	; 0
    7a22:	90 e0       	ldi	r25, 0x00	; 0
    7a24:	17 df       	rcall	.-466    	; 0x7854 <find_dst>
    7a26:	60 93 c9 1a 	sts	0x1AC9, r22	; 0x801ac9 <dst>
    7a2a:	70 93 ca 1a 	sts	0x1ACA, r23	; 0x801aca <dst+0x1>
    7a2e:	80 93 cb 1a 	sts	0x1ACB, r24	; 0x801acb <dst+0x2>
    7a32:	90 93 cc 1a 	sts	0x1ACC, r25	; 0x801acc <dst+0x3>
    7a36:	ee 24       	eor	r14, r14
    7a38:	e3 94       	inc	r14
    7a3a:	f1 2c       	mov	r15, r1
    7a3c:	0b e0       	ldi	r16, 0x0B	; 11
    7a3e:	10 e0       	ldi	r17, 0x00	; 0
    7a40:	20 e0       	ldi	r18, 0x00	; 0
    7a42:	30 e0       	ldi	r19, 0x00	; 0
    7a44:	b3 01       	movw	r22, r6
    7a46:	a2 01       	movw	r20, r4
    7a48:	81 e0       	ldi	r24, 0x01	; 1
    7a4a:	90 e0       	ldi	r25, 0x00	; 0
    7a4c:	03 df       	rcall	.-506    	; 0x7854 <find_dst>
    7a4e:	60 93 cd 1a 	sts	0x1ACD, r22	; 0x801acd <dst+0x4>
    7a52:	70 93 ce 1a 	sts	0x1ACE, r23	; 0x801ace <dst+0x5>
    7a56:	80 93 cf 1a 	sts	0x1ACF, r24	; 0x801acf <dst+0x6>
    7a5a:	90 93 d0 1a 	sts	0x1AD0, r25	; 0x801ad0 <dst+0x7>
    7a5e:	2c 96       	adiw	r28, 0x0c	; 12
    7a60:	0f b6       	in	r0, 0x3f	; 63
    7a62:	f8 94       	cli
    7a64:	de bf       	out	0x3e, r29	; 62
    7a66:	0f be       	out	0x3f, r0	; 63
    7a68:	cd bf       	out	0x3d, r28	; 61
    7a6a:	df 91       	pop	r29
    7a6c:	cf 91       	pop	r28
    7a6e:	1f 91       	pop	r17
    7a70:	0f 91       	pop	r16
    7a72:	ff 90       	pop	r15
    7a74:	ef 90       	pop	r14
    7a76:	df 90       	pop	r13
    7a78:	cf 90       	pop	r12
    7a7a:	bf 90       	pop	r11
    7a7c:	af 90       	pop	r10
    7a7e:	7f 90       	pop	r7
    7a80:	6f 90       	pop	r6
    7a82:	5f 90       	pop	r5
    7a84:	4f 90       	pop	r4
    7a86:	08 95       	ret

00007a88 <asctime_r>:
    7a88:	0f 93       	push	r16
    7a8a:	1f 93       	push	r17
    7a8c:	cf 93       	push	r28
    7a8e:	df 93       	push	r29
    7a90:	ec 01       	movw	r28, r24
    7a92:	8b 01       	movw	r16, r22
    7a94:	60 e0       	ldi	r22, 0x00	; 0
    7a96:	70 e0       	ldi	r23, 0x00	; 0
    7a98:	d9 db       	rcall	.-2126   	; 0x724c <normalize>
    7a9a:	20 e2       	ldi	r18, 0x20	; 32
    7a9c:	d8 01       	movw	r26, r16
    7a9e:	82 2f       	mov	r24, r18
    7aa0:	1d 92       	st	X+, r1
    7aa2:	8a 95       	dec	r24
    7aa4:	e9 f7       	brne	.-6      	; 0x7aa0 <asctime_r+0x18>
    7aa6:	8a 85       	ldd	r24, Y+10	; 0x0a
    7aa8:	9b 85       	ldd	r25, Y+11	; 0x0b
    7aaa:	84 59       	subi	r24, 0x94	; 148
    7aac:	98 4f       	sbci	r25, 0xF8	; 248
    7aae:	9f 93       	push	r25
    7ab0:	8f 93       	push	r24
    7ab2:	89 81       	ldd	r24, Y+1	; 0x01
    7ab4:	8f 93       	push	r24
    7ab6:	88 81       	ld	r24, Y
    7ab8:	8f 93       	push	r24
    7aba:	8b 81       	ldd	r24, Y+3	; 0x03
    7abc:	8f 93       	push	r24
    7abe:	8a 81       	ldd	r24, Y+2	; 0x02
    7ac0:	8f 93       	push	r24
    7ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    7ac4:	8f 93       	push	r24
    7ac6:	8c 81       	ldd	r24, Y+4	; 0x04
    7ac8:	8f 93       	push	r24
    7aca:	8f 81       	ldd	r24, Y+7	; 0x07
    7acc:	8f 93       	push	r24
    7ace:	8e 81       	ldd	r24, Y+6	; 0x06
    7ad0:	8f 93       	push	r24
    7ad2:	e8 85       	ldd	r30, Y+8	; 0x08
    7ad4:	f9 85       	ldd	r31, Y+9	; 0x09
    7ad6:	ee 0f       	add	r30, r30
    7ad8:	ff 1f       	adc	r31, r31
    7ada:	ee 5e       	subi	r30, 0xEE	; 238
    7adc:	fe 4f       	sbci	r31, 0xFE	; 254
    7ade:	81 81       	ldd	r24, Z+1	; 0x01
    7ae0:	8f 93       	push	r24
    7ae2:	80 81       	ld	r24, Z
    7ae4:	8f 93       	push	r24
    7ae6:	ec 85       	ldd	r30, Y+12	; 0x0c
    7ae8:	fd 85       	ldd	r31, Y+13	; 0x0d
    7aea:	ee 0f       	add	r30, r30
    7aec:	ff 1f       	adc	r31, r31
    7aee:	e4 5d       	subi	r30, 0xD4	; 212
    7af0:	fe 4f       	sbci	r31, 0xFE	; 254
    7af2:	81 81       	ldd	r24, Z+1	; 0x01
    7af4:	8f 93       	push	r24
    7af6:	80 81       	ld	r24, Z
    7af8:	8f 93       	push	r24
    7afa:	8f e9       	ldi	r24, 0x9F	; 159
    7afc:	97 e0       	ldi	r25, 0x07	; 7
    7afe:	1f 92       	push	r1
    7b00:	9f 93       	push	r25
    7b02:	8f 93       	push	r24
    7b04:	1f 92       	push	r1
    7b06:	2f 93       	push	r18
    7b08:	1f 93       	push	r17
    7b0a:	0f 93       	push	r16
    7b0c:	0e 94 a5 46 	call	0x8d4a	; 0x8d4a <snprintf_P>
    7b10:	ad b7       	in	r26, 0x3d	; 61
    7b12:	be b7       	in	r27, 0x3e	; 62
    7b14:	55 96       	adiw	r26, 0x15	; 21
    7b16:	0f b6       	in	r0, 0x3f	; 63
    7b18:	f8 94       	cli
    7b1a:	be bf       	out	0x3e, r27	; 62
    7b1c:	0f be       	out	0x3f, r0	; 63
    7b1e:	ad bf       	out	0x3d, r26	; 61
    7b20:	c8 01       	movw	r24, r16
    7b22:	df 91       	pop	r29
    7b24:	cf 91       	pop	r28
    7b26:	1f 91       	pop	r17
    7b28:	0f 91       	pop	r16
    7b2a:	08 95       	ret

00007b2c <asctime>:
    7b2c:	60 e6       	ldi	r22, 0x60	; 96
    7b2e:	78 e1       	ldi	r23, 0x18	; 24
    7b30:	ab cf       	rjmp	.-170    	; 0x7a88 <asctime_r>
    7b32:	08 95       	ret

00007b34 <ctime_gm>:
    7b34:	a6 e1       	ldi	r26, 0x16	; 22
    7b36:	b0 e0       	ldi	r27, 0x00	; 0
    7b38:	e0 ea       	ldi	r30, 0xA0	; 160
    7b3a:	fd e3       	ldi	r31, 0x3D	; 61
    7b3c:	0c 94 44 ec 	jmp	0x1d888	; 0x1d888 <__prologue_saves__+0x20>
    7b40:	be 01       	movw	r22, r28
    7b42:	6f 5f       	subi	r22, 0xFF	; 255
    7b44:	7f 4f       	sbci	r23, 0xFF	; 255
    7b46:	75 da       	rcall	.-2838   	; 0x7032 <gmtime_r>
    7b48:	60 e2       	ldi	r22, 0x20	; 32
    7b4a:	78 e1       	ldi	r23, 0x18	; 24
    7b4c:	9d df       	rcall	.-198    	; 0x7a88 <asctime_r>
    7b4e:	66 96       	adiw	r28, 0x16	; 22
    7b50:	e2 e0       	ldi	r30, 0x02	; 2
    7b52:	0c 94 60 ec 	jmp	0x1d8c0	; 0x1d8c0 <__epilogue_restores__+0x20>

00007b56 <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7b56:	a2 e2       	ldi	r26, 0x22	; 34
    7b58:	b0 e0       	ldi	r27, 0x00	; 0
    7b5a:	e1 eb       	ldi	r30, 0xB1	; 177
    7b5c:	fd e3       	ldi	r31, 0x3D	; 61
    7b5e:	0c 94 3e ec 	jmp	0x1d87c	; 0x1d87c <__prologue_saves__+0x14>
    7b62:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    7b64:	40 e0       	ldi	r20, 0x00	; 0
    7b66:	50 e0       	ldi	r21, 0x00	; 0
    7b68:	ba 01       	movw	r22, r20
    7b6a:	80 e0       	ldi	r24, 0x00	; 0
    7b6c:	90 e0       	ldi	r25, 0x00	; 0
    7b6e:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <rtc_init>
    7b72:	81 11       	cpse	r24, r1
    7b74:	27 c0       	rjmp	.+78     	; 0x7bc4 <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7b76:	8a e9       	ldi	r24, 0x9A	; 154
    7b78:	96 e0       	ldi	r25, 0x06	; 6
    7b7a:	1f 92       	push	r1
    7b7c:	9f 93       	push	r25
    7b7e:	8f 93       	push	r24
    7b80:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        printf("attempting rtc init\n");
    7b84:	85 e8       	ldi	r24, 0x85	; 133
    7b86:	96 e0       	ldi	r25, 0x06	; 6
    7b88:	1f 92       	push	r1
    7b8a:	9f 93       	push	r25
    7b8c:	8f 93       	push	r24
    7b8e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    7b92:	40 e0       	ldi	r20, 0x00	; 0
    7b94:	50 e0       	ldi	r21, 0x00	; 0
    7b96:	ba 01       	movw	r22, r20
    7b98:	81 e0       	ldi	r24, 0x01	; 1
    7b9a:	90 e0       	ldi	r25, 0x00	; 0
    7b9c:	0e 94 6d 2f 	call	0x5eda	; 0x5eda <rtc_init>
    7ba0:	0f 90       	pop	r0
    7ba2:	0f 90       	pop	r0
    7ba4:	0f 90       	pop	r0
    7ba6:	0f 90       	pop	r0
    7ba8:	0f 90       	pop	r0
    7baa:	0f 90       	pop	r0
    7bac:	81 11       	cpse	r24, r1
    7bae:	0a c0       	rjmp	.+20     	; 0x7bc4 <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    7bb0:	8e e6       	ldi	r24, 0x6E	; 110
    7bb2:	96 e0       	ldi	r25, 0x06	; 6
    7bb4:	1f 92       	push	r1
    7bb6:	9f 93       	push	r25
    7bb8:	8f 93       	push	r24
    7bba:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    7bbe:	0f 90       	pop	r0
    7bc0:	0f 90       	pop	r0
    7bc2:	0f 90       	pop	r0
        }
    }

    if(rtc_read(&tc))
    7bc4:	ce 01       	movw	r24, r28
    7bc6:	01 96       	adiw	r24, 0x01	; 1
    7bc8:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <rtc_read>
    7bcc:	88 23       	and	r24, r24
    7bce:	51 f0       	breq	.+20     	; 0x7be4 <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    7bd0:	ce 01       	movw	r24, r28
    7bd2:	01 96       	adiw	r24, 0x01	; 1
    7bd4:	03 dd       	rcall	.-1530   	; 0x75dc <timegm>
    7bd6:	6b 01       	movw	r12, r22
    7bd8:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
    7bda:	67 2b       	or	r22, r23
    7bdc:	68 2b       	or	r22, r24
    7bde:	69 2b       	or	r22, r25
    7be0:	c1 f4       	brne	.+48     	; 0x7c12 <initialize_clock+0xbc>
    7be2:	0a c0       	rjmp	.+20     	; 0x7bf8 <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    7be4:	84 e5       	ldi	r24, 0x54	; 84
    7be6:	96 e0       	ldi	r25, 0x06	; 6
    7be8:	1f 92       	push	r1
    7bea:	9f 93       	push	r25
    7bec:	8f 93       	push	r24
    7bee:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    7bf2:	0f 90       	pop	r0
    7bf4:	0f 90       	pop	r0
    7bf6:	0f 90       	pop	r0
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    7bf8:	80 e3       	ldi	r24, 0x30	; 48
    7bfa:	96 e0       	ldi	r25, 0x06	; 6
    7bfc:	1f 92       	push	r1
    7bfe:	9f 93       	push	r25
    7c00:	8f 93       	push	r24
    7c02:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    7c06:	0f 90       	pop	r0
    7c08:	0f 90       	pop	r0
    7c0a:	0f 90       	pop	r0
    7c0c:	c1 2c       	mov	r12, r1
    7c0e:	d1 2c       	mov	r13, r1
    7c10:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    7c12:	18 a3       	std	Y+32, r17	; 0x20
    7c14:	0f 8f       	std	Y+31, r16	; 0x1f
    tz.tz_dsttime = 0;
    7c16:	1a a2       	std	Y+34, r1	; 0x22
    7c18:	19 a2       	std	Y+33, r1	; 0x21
    settimezone( &tz );
    7c1a:	ce 01       	movw	r24, r28
    7c1c:	4f 96       	adiw	r24, 0x1f	; 31
    7c1e:	3a da       	rcall	.-2956   	; 0x7094 <settimezone>

    ts.tv_sec = seconds;
    7c20:	cf 8a       	std	Y+23, r12	; 0x17
    7c22:	d8 8e       	std	Y+24, r13	; 0x18
    7c24:	e9 8e       	std	Y+25, r14	; 0x19
    7c26:	fa 8e       	std	Y+26, r15	; 0x1a
    ts.tv_nsec = 0L;
    7c28:	1b 8e       	std	Y+27, r1	; 0x1b
    7c2a:	1c 8e       	std	Y+28, r1	; 0x1c
    7c2c:	1d 8e       	std	Y+29, r1	; 0x1d
    7c2e:	1e 8e       	std	Y+30, r1	; 0x1e
    clock_settime(0, (ts_t *) &ts);
    7c30:	be 01       	movw	r22, r28
    7c32:	69 5e       	subi	r22, 0xE9	; 233
    7c34:	7f 4f       	sbci	r23, 0xFF	; 255
    7c36:	80 e0       	ldi	r24, 0x00	; 0
    7c38:	90 e0       	ldi	r25, 0x00	; 0
    7c3a:	cf d8       	rcall	.-3682   	; 0x6dda <clock_settime>
}
    7c3c:	a2 96       	adiw	r28, 0x22	; 34
    7c3e:	e8 e0       	ldi	r30, 0x08	; 8
    7c40:	0c 94 5a ec 	jmp	0x1d8b4	; 0x1d8b4 <__epilogue_restores__+0x14>

00007c44 <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    7c44:	a2 e2       	ldi	r26, 0x22	; 34
    7c46:	b0 e0       	ldi	r27, 0x00	; 0
    7c48:	e8 e2       	ldi	r30, 0x28	; 40
    7c4a:	fe e3       	ldi	r31, 0x3E	; 62
    7c4c:	0c 94 44 ec 	jmp	0x1d888	; 0x1d888 <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    7c50:	ce 01       	movw	r24, r28
    7c52:	01 96       	adiw	r24, 0x01	; 1
    7c54:	0e 94 e1 2f 	call	0x5fc2	; 0x5fc2 <rtc_read>
    7c58:	88 23       	and	r24, r24
    7c5a:	21 f1       	breq	.+72     	; 0x7ca4 <display_clock+0x60>
    {
        seconds = timegm(&tc);
    7c5c:	ce 01       	movw	r24, r28
    7c5e:	01 96       	adiw	r24, 0x01	; 1
    7c60:	bd dc       	rcall	.-1670   	; 0x75dc <timegm>
    7c62:	6f 8f       	std	Y+31, r22	; 0x1f
    7c64:	78 a3       	std	Y+32, r23	; 0x20
    7c66:	89 a3       	std	Y+33, r24	; 0x21
    7c68:	9a a3       	std	Y+34, r25	; 0x22
        printf("rtc seconds: %lu\n",seconds);
    7c6a:	9f 93       	push	r25
    7c6c:	8f 93       	push	r24
    7c6e:	7f 93       	push	r23
    7c70:	6f 93       	push	r22
    7c72:	8e e1       	ldi	r24, 0x1E	; 30
    7c74:	96 e0       	ldi	r25, 0x06	; 6
    7c76:	1f 92       	push	r1
    7c78:	9f 93       	push	r25
    7c7a:	8f 93       	push	r24
    7c7c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    7c80:	ce 01       	movw	r24, r28
    7c82:	01 96       	adiw	r24, 0x01	; 1
    7c84:	53 df       	rcall	.-346    	; 0x7b2c <asctime>
    7c86:	9f 93       	push	r25
    7c88:	8f 93       	push	r24
    7c8a:	8d e0       	ldi	r24, 0x0D	; 13
    7c8c:	96 e0       	ldi	r25, 0x06	; 6
    7c8e:	1f 92       	push	r1
    7c90:	9f 93       	push	r25
    7c92:	8f 93       	push	r24
    7c94:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    7c98:	0f b6       	in	r0, 0x3f	; 63
    7c9a:	f8 94       	cli
    7c9c:	de bf       	out	0x3e, r29	; 62
    7c9e:	0f be       	out	0x3f, r0	; 63
    7ca0:	cd bf       	out	0x3d, r28	; 61
    7ca2:	0a c0       	rjmp	.+20     	; 0x7cb8 <display_clock+0x74>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    7ca4:	8c ef       	ldi	r24, 0xFC	; 252
    7ca6:	95 e0       	ldi	r25, 0x05	; 5
    7ca8:	1f 92       	push	r1
    7caa:	9f 93       	push	r25
    7cac:	8f 93       	push	r24
    7cae:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    7cb2:	0f 90       	pop	r0
    7cb4:	0f 90       	pop	r0
    7cb6:	0f 90       	pop	r0
    }
#endif  // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    7cb8:	be 01       	movw	r22, r28
    7cba:	69 5e       	subi	r22, 0xE9	; 233
    7cbc:	7f 4f       	sbci	r23, 0xFF	; 255
    7cbe:	80 e0       	ldi	r24, 0x00	; 0
    7cc0:	90 e0       	ldi	r25, 0x00	; 0
    7cc2:	0e 94 5e 34 	call	0x68bc	; 0x68bc <clock_gettime>
    seconds = ts.tv_sec;
    7cc6:	8f 89       	ldd	r24, Y+23	; 0x17
    7cc8:	98 8d       	ldd	r25, Y+24	; 0x18
    7cca:	29 8d       	ldd	r18, Y+25	; 0x19
    7ccc:	3a 8d       	ldd	r19, Y+26	; 0x1a
    7cce:	8f 8f       	std	Y+31, r24	; 0x1f
    7cd0:	98 a3       	std	Y+32, r25	; 0x20
    7cd2:	29 a3       	std	Y+33, r18	; 0x21
    7cd4:	3a a3       	std	Y+34, r19	; 0x22
    printf("clk seconds: %lu\n",seconds);
    7cd6:	3f 93       	push	r19
    7cd8:	2f 93       	push	r18
    7cda:	9f 93       	push	r25
    7cdc:	8f 93       	push	r24
    7cde:	8a ee       	ldi	r24, 0xEA	; 234
    7ce0:	95 e0       	ldi	r25, 0x05	; 5
    7ce2:	1f 92       	push	r1
    7ce4:	9f 93       	push	r25
    7ce6:	8f 93       	push	r24
    7ce8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    7cec:	ce 01       	movw	r24, r28
    7cee:	4f 96       	adiw	r24, 0x1f	; 31
    7cf0:	b5 d9       	rcall	.-3222   	; 0x705c <gmtime>
    7cf2:	1c df       	rcall	.-456    	; 0x7b2c <asctime>
    7cf4:	9f 93       	push	r25
    7cf6:	8f 93       	push	r24
    7cf8:	89 ed       	ldi	r24, 0xD9	; 217
    7cfa:	95 e0       	ldi	r25, 0x05	; 5
    7cfc:	1f 92       	push	r1
    7cfe:	9f 93       	push	r25
    7d00:	8f 93       	push	r24
    7d02:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
}
    7d06:	0f b6       	in	r0, 0x3f	; 63
    7d08:	f8 94       	cli
    7d0a:	de bf       	out	0x3e, r29	; 62
    7d0c:	0f be       	out	0x3f, r0	; 63
    7d0e:	cd bf       	out	0x3d, r28	; 61
    7d10:	a2 96       	adiw	r28, 0x22	; 34
    7d12:	e2 e0       	ldi	r30, 0x02	; 2
    7d14:	0c 94 60 ec 	jmp	0x1d8c0	; 0x1d8c0 <__epilogue_restores__+0x20>

00007d18 <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7d18:	fc 01       	movw	r30, r24
    7d1a:	84 81       	ldd	r24, Z+4	; 0x04
    7d1c:	95 81       	ldd	r25, Z+5	; 0x05
    7d1e:	00 97       	sbiw	r24, 0x00	; 0
    7d20:	79 f0       	breq	.+30     	; 0x7d40 <_putc_buffer_fn+0x28>
    7d22:	66 23       	and	r22, r22
    7d24:	69 f0       	breq	.+26     	; 0x7d40 <_putc_buffer_fn+0x28>
    7d26:	01 97       	sbiw	r24, 0x01	; 1
    7d28:	95 83       	std	Z+5, r25	; 0x05
    7d2a:	84 83       	std	Z+4, r24	; 0x04
    7d2c:	86 81       	ldd	r24, Z+6	; 0x06
    7d2e:	97 81       	ldd	r25, Z+7	; 0x07
    7d30:	01 96       	adiw	r24, 0x01	; 1
    7d32:	97 83       	std	Z+7, r25	; 0x07
    7d34:	86 83       	std	Z+6, r24	; 0x06
    7d36:	a2 81       	ldd	r26, Z+2	; 0x02
    7d38:	b3 81       	ldd	r27, Z+3	; 0x03
    7d3a:	6d 93       	st	X+, r22
    7d3c:	b3 83       	std	Z+3, r27	; 0x03
    7d3e:	a2 83       	std	Z+2, r26	; 0x02
    7d40:	02 80       	ldd	r0, Z+2	; 0x02
    7d42:	f3 81       	ldd	r31, Z+3	; 0x03
    7d44:	e0 2d       	mov	r30, r0
    7d46:	10 82       	st	Z, r1
    7d48:	08 95       	ret

00007d4a <_putc_fn>:
    7d4a:	fc 01       	movw	r30, r24
    7d4c:	26 81       	ldd	r18, Z+6	; 0x06
    7d4e:	37 81       	ldd	r19, Z+7	; 0x07
    7d50:	2f 5f       	subi	r18, 0xFF	; 255
    7d52:	3f 4f       	sbci	r19, 0xFF	; 255
    7d54:	37 83       	std	Z+7, r19	; 0x07
    7d56:	26 83       	std	Z+6, r18	; 0x06
    7d58:	86 2f       	mov	r24, r22
    7d5a:	90 e0       	ldi	r25, 0x00	; 0
    7d5c:	0c 94 e7 7a 	jmp	0xf5ce	; 0xf5ce <putchar>
    7d60:	08 95       	ret

00007d62 <bin2num>:
    7d62:	a0 e0       	ldi	r26, 0x00	; 0
    7d64:	b0 e0       	ldi	r27, 0x00	; 0
    7d66:	e7 eb       	ldi	r30, 0xB7	; 183
    7d68:	fe e3       	ldi	r31, 0x3E	; 62
    7d6a:	0c 94 3b ec 	jmp	0x1d876	; 0x1d876 <__prologue_saves__+0xe>
    7d6e:	ea 01       	movw	r28, r20
    7d70:	53 e0       	ldi	r21, 0x03	; 3
    7d72:	ee 0c       	add	r14, r14
    7d74:	ff 1c       	adc	r15, r15
    7d76:	5a 95       	dec	r21
    7d78:	e1 f7       	brne	.-8      	; 0x7d72 <bin2num+0x10>
    7d7a:	fc 01       	movw	r30, r24
    7d7c:	af 01       	movw	r20, r30
    7d7e:	48 1b       	sub	r20, r24
    7d80:	59 0b       	sbc	r21, r25
    7d82:	c4 17       	cp	r28, r20
    7d84:	d5 07       	cpc	r29, r21
    7d86:	14 f0       	brlt	.+4      	; 0x7d8c <bin2num+0x2a>
    7d88:	11 92       	st	Z+, r1
    7d8a:	f8 cf       	rjmp	.-16     	; 0x7d7c <bin2num+0x1a>
    7d8c:	41 e0       	ldi	r20, 0x01	; 1
    7d8e:	e4 1a       	sub	r14, r20
    7d90:	f1 08       	sbc	r15, r1
    7d92:	5b 01       	movw	r10, r22
    7d94:	42 e0       	ldi	r20, 0x02	; 2
    7d96:	a4 1a       	sub	r10, r20
    7d98:	b1 08       	sbc	r11, r1
    7d9a:	f7 fc       	sbrc	r15, 7
    7d9c:	3b c0       	rjmp	.+118    	; 0x7e14 <bin2num+0xb2>
    7d9e:	f7 01       	movw	r30, r14
    7da0:	43 e0       	ldi	r20, 0x03	; 3
    7da2:	f5 95       	asr	r31
    7da4:	e7 95       	ror	r30
    7da6:	4a 95       	dec	r20
    7da8:	e1 f7       	brne	.-8      	; 0x7da2 <bin2num+0x40>
    7daa:	e0 0f       	add	r30, r16
    7dac:	f1 1f       	adc	r31, r17
    7dae:	40 81       	ld	r20, Z
    7db0:	50 e0       	ldi	r21, 0x00	; 0
    7db2:	f7 01       	movw	r30, r14
    7db4:	e7 70       	andi	r30, 0x07	; 7
    7db6:	ff 27       	eor	r31, r31
    7db8:	02 c0       	rjmp	.+4      	; 0x7dbe <bin2num+0x5c>
    7dba:	55 95       	asr	r21
    7dbc:	47 95       	ror	r20
    7dbe:	ea 95       	dec	r30
    7dc0:	e2 f7       	brpl	.-8      	; 0x7dba <bin2num+0x58>
    7dc2:	41 70       	andi	r20, 0x01	; 1
    7dc4:	55 27       	eor	r21, r21
    7dc6:	dc 01       	movw	r26, r24
    7dc8:	e0 e0       	ldi	r30, 0x00	; 0
    7dca:	f0 e0       	ldi	r31, 0x00	; 0
    7dcc:	ec 17       	cp	r30, r28
    7dce:	fd 07       	cpc	r31, r29
    7dd0:	ec f4       	brge	.+58     	; 0x7e0c <bin2num+0xaa>
    7dd2:	ea 15       	cp	r30, r10
    7dd4:	fb 05       	cpc	r31, r11
    7dd6:	4c f0       	brlt	.+18     	; 0x7dea <bin2num+0x88>
    7dd8:	dc 01       	movw	r26, r24
    7dda:	ae 0f       	add	r26, r30
    7ddc:	bf 1f       	adc	r27, r31
    7dde:	1c 92       	st	X, r1
    7de0:	41 e0       	ldi	r20, 0x01	; 1
    7de2:	e4 1a       	sub	r14, r20
    7de4:	f1 08       	sbc	r15, r1
    7de6:	ef 01       	movw	r28, r30
    7de8:	d8 cf       	rjmp	.-80     	; 0x7d9a <bin2num+0x38>
    7dea:	9c 90       	ld	r9, X
    7dec:	99 0c       	add	r9, r9
    7dee:	94 2a       	or	r9, r20
    7df0:	49 2d       	mov	r20, r9
    7df2:	50 e0       	ldi	r21, 0x00	; 0
    7df4:	42 17       	cp	r20, r18
    7df6:	53 07       	cpc	r21, r19
    7df8:	24 f0       	brlt	.+8      	; 0x7e02 <bin2num+0xa0>
    7dfa:	92 1a       	sub	r9, r18
    7dfc:	41 e0       	ldi	r20, 0x01	; 1
    7dfe:	50 e0       	ldi	r21, 0x00	; 0
    7e00:	02 c0       	rjmp	.+4      	; 0x7e06 <bin2num+0xa4>
    7e02:	40 e0       	ldi	r20, 0x00	; 0
    7e04:	50 e0       	ldi	r21, 0x00	; 0
    7e06:	9d 92       	st	X+, r9
    7e08:	31 96       	adiw	r30, 0x01	; 1
    7e0a:	e0 cf       	rjmp	.-64     	; 0x7dcc <bin2num+0x6a>
    7e0c:	41 15       	cp	r20, r1
    7e0e:	51 05       	cpc	r21, r1
    7e10:	01 f7       	brne	.-64     	; 0x7dd2 <bin2num+0x70>
    7e12:	e2 cf       	rjmp	.-60     	; 0x7dd8 <bin2num+0x76>
    7e14:	fc 01       	movw	r30, r24
    7e16:	9f 01       	movw	r18, r30
    7e18:	28 1b       	sub	r18, r24
    7e1a:	39 0b       	sbc	r19, r25
    7e1c:	2c 17       	cp	r18, r28
    7e1e:	3d 07       	cpc	r19, r29
    7e20:	4c f4       	brge	.+18     	; 0x7e34 <bin2num+0xd2>
    7e22:	20 81       	ld	r18, Z
    7e24:	2a 30       	cpi	r18, 0x0A	; 10
    7e26:	10 f4       	brcc	.+4      	; 0x7e2c <bin2num+0xca>
    7e28:	20 5d       	subi	r18, 0xD0	; 208
    7e2a:	01 c0       	rjmp	.+2      	; 0x7e2e <bin2num+0xcc>
    7e2c:	29 5a       	subi	r18, 0xA9	; 169
    7e2e:	20 83       	st	Z, r18
    7e30:	31 96       	adiw	r30, 0x01	; 1
    7e32:	f1 cf       	rjmp	.-30     	; 0x7e16 <bin2num+0xb4>
    7e34:	9e 01       	movw	r18, r28
    7e36:	d7 ff       	sbrs	r29, 7
    7e38:	02 c0       	rjmp	.+4      	; 0x7e3e <bin2num+0xdc>
    7e3a:	20 e0       	ldi	r18, 0x00	; 0
    7e3c:	30 e0       	ldi	r19, 0x00	; 0
    7e3e:	c1 14       	cp	r12, r1
    7e40:	d1 04       	cpc	r13, r1
    7e42:	61 f0       	breq	.+24     	; 0x7e5c <bin2num+0xfa>
    7e44:	61 50       	subi	r22, 0x01	; 1
    7e46:	71 09       	sbc	r23, r1
    7e48:	26 17       	cp	r18, r22
    7e4a:	37 07       	cpc	r19, r23
    7e4c:	3c f4       	brge	.+14     	; 0x7e5c <bin2num+0xfa>
    7e4e:	fc 01       	movw	r30, r24
    7e50:	e2 0f       	add	r30, r18
    7e52:	f3 1f       	adc	r31, r19
    7e54:	c0 82       	st	Z, r12
    7e56:	21 96       	adiw	r28, 0x01	; 1
    7e58:	2f 5f       	subi	r18, 0xFF	; 255
    7e5a:	3f 4f       	sbci	r19, 0xFF	; 255
    7e5c:	fc 01       	movw	r30, r24
    7e5e:	e2 0f       	add	r30, r18
    7e60:	f3 1f       	adc	r31, r19
    7e62:	10 82       	st	Z, r1
    7e64:	0e 94 4e 32 	call	0x649c	; 0x649c <reverse>
    7e68:	ce 01       	movw	r24, r28
    7e6a:	cd b7       	in	r28, 0x3d	; 61
    7e6c:	de b7       	in	r29, 0x3e	; 62
    7e6e:	eb e0       	ldi	r30, 0x0B	; 11
    7e70:	0c 94 57 ec 	jmp	0x1d8ae	; 0x1d8ae <__epilogue_restores__+0xe>

00007e74 <pch_init>:
    7e74:	e5 ed       	ldi	r30, 0xD5	; 213
    7e76:	fa e1       	ldi	r31, 0x1A	; 26
    7e78:	91 83       	std	Z+1, r25	; 0x01
    7e7a:	80 83       	st	Z, r24
    7e7c:	13 82       	std	Z+3, r1	; 0x03
    7e7e:	12 82       	std	Z+2, r1	; 0x02
    7e80:	61 50       	subi	r22, 0x01	; 1
    7e82:	71 09       	sbc	r23, r1
    7e84:	75 83       	std	Z+5, r23	; 0x05
    7e86:	64 83       	std	Z+4, r22	; 0x04
    7e88:	fc 01       	movw	r30, r24
    7e8a:	10 82       	st	Z, r1
    7e8c:	08 95       	ret

00007e8e <pch>:
    7e8e:	20 91 d7 1a 	lds	r18, 0x1AD7	; 0x801ad7 <_pch+0x2>
    7e92:	30 91 d8 1a 	lds	r19, 0x1AD8	; 0x801ad8 <_pch+0x3>
    7e96:	60 91 d9 1a 	lds	r22, 0x1AD9	; 0x801ad9 <_pch+0x4>
    7e9a:	70 91 da 1a 	lds	r23, 0x1ADA	; 0x801ada <_pch+0x5>
    7e9e:	40 91 d5 1a 	lds	r20, 0x1AD5	; 0x801ad5 <_pch>
    7ea2:	50 91 d6 1a 	lds	r21, 0x1AD6	; 0x801ad6 <_pch+0x1>
    7ea6:	26 17       	cp	r18, r22
    7ea8:	37 07       	cpc	r19, r23
    7eaa:	64 f4       	brge	.+24     	; 0x7ec4 <pch+0x36>
    7eac:	b9 01       	movw	r22, r18
    7eae:	6f 5f       	subi	r22, 0xFF	; 255
    7eb0:	7f 4f       	sbci	r23, 0xFF	; 255
    7eb2:	70 93 d8 1a 	sts	0x1AD8, r23	; 0x801ad8 <_pch+0x3>
    7eb6:	60 93 d7 1a 	sts	0x1AD7, r22	; 0x801ad7 <_pch+0x2>
    7eba:	fa 01       	movw	r30, r20
    7ebc:	e2 0f       	add	r30, r18
    7ebe:	f3 1f       	adc	r31, r19
    7ec0:	80 83       	st	Z, r24
    7ec2:	04 c0       	rjmp	.+8      	; 0x7ecc <pch+0x3e>
    7ec4:	fa 01       	movw	r30, r20
    7ec6:	e2 0f       	add	r30, r18
    7ec8:	f3 1f       	adc	r31, r19
    7eca:	10 82       	st	Z, r1
    7ecc:	80 91 d7 1a 	lds	r24, 0x1AD7	; 0x801ad7 <_pch+0x2>
    7ed0:	90 91 d8 1a 	lds	r25, 0x1AD8	; 0x801ad8 <_pch+0x3>
    7ed4:	08 95       	ret

00007ed6 <p_ntoa>:
    7ed6:	af 92       	push	r10
    7ed8:	cf 92       	push	r12
    7eda:	df 92       	push	r13
    7edc:	ef 92       	push	r14
    7ede:	ff 92       	push	r15
    7ee0:	0f 93       	push	r16
    7ee2:	1f 93       	push	r17
    7ee4:	cf 93       	push	r28
    7ee6:	df 93       	push	r29
    7ee8:	dc 01       	movw	r26, r24
    7eea:	eb 01       	movw	r28, r22
    7eec:	fa 01       	movw	r30, r20
    7eee:	b9 01       	movw	r22, r18
    7ef0:	98 01       	movw	r18, r16
    7ef2:	a6 01       	movw	r20, r12
    7ef4:	9a 2d       	mov	r25, r10
    7ef6:	a5 fa       	bst	r10, 5
    7ef8:	cc 24       	eor	r12, r12
    7efa:	c0 f8       	bld	r12, 0
    7efc:	a6 fc       	sbrc	r10, 6
    7efe:	07 c0       	rjmp	.+14     	; 0x7f0e <p_ntoa+0x38>
    7f00:	a2 fc       	sbrc	r10, 2
    7f02:	08 c0       	rjmp	.+16     	; 0x7f14 <p_ntoa+0x3e>
    7f04:	a4 fe       	sbrs	r10, 4
    7f06:	09 c0       	rjmp	.+18     	; 0x7f1a <p_ntoa+0x44>
    7f08:	00 e2       	ldi	r16, 0x20	; 32
    7f0a:	10 e0       	ldi	r17, 0x00	; 0
    7f0c:	08 c0       	rjmp	.+16     	; 0x7f1e <p_ntoa+0x48>
    7f0e:	0d e2       	ldi	r16, 0x2D	; 45
    7f10:	10 e0       	ldi	r17, 0x00	; 0
    7f12:	05 c0       	rjmp	.+10     	; 0x7f1e <p_ntoa+0x48>
    7f14:	0b e2       	ldi	r16, 0x2B	; 43
    7f16:	10 e0       	ldi	r17, 0x00	; 0
    7f18:	02 c0       	rjmp	.+4      	; 0x7f1e <p_ntoa+0x48>
    7f1a:	00 e0       	ldi	r16, 0x00	; 0
    7f1c:	10 e0       	ldi	r17, 0x00	; 0
    7f1e:	95 ff       	sbrs	r25, 5
    7f20:	04 c0       	rjmp	.+8      	; 0x7f2a <p_ntoa+0x54>
    7f22:	89 2f       	mov	r24, r25
    7f24:	8a 70       	andi	r24, 0x0A	; 10
    7f26:	09 f0       	breq	.+2      	; 0x7f2a <p_ntoa+0x54>
    7f28:	c1 2c       	mov	r12, r1
    7f2a:	c0 fa       	bst	r12, 0
    7f2c:	95 f9       	bld	r25, 5
    7f2e:	89 2f       	mov	r24, r25
    7f30:	82 70       	andi	r24, 0x02	; 2
    7f32:	c8 2e       	mov	r12, r24
    7f34:	91 fd       	sbrc	r25, 1
    7f36:	02 c0       	rjmp	.+4      	; 0x7f3c <p_ntoa+0x66>
    7f38:	40 e0       	ldi	r20, 0x00	; 0
    7f3a:	50 e0       	ldi	r21, 0x00	; 0
    7f3c:	89 2f       	mov	r24, r25
    7f3e:	83 70       	andi	r24, 0x03	; 3
    7f40:	11 f4       	brne	.+4      	; 0x7f46 <p_ntoa+0x70>
    7f42:	41 e0       	ldi	r20, 0x01	; 1
    7f44:	50 e0       	ldi	r21, 0x00	; 0
    7f46:	90 ff       	sbrs	r25, 0
    7f48:	0c c0       	rjmp	.+24     	; 0x7f62 <p_ntoa+0x8c>
    7f4a:	95 fd       	sbrc	r25, 5
    7f4c:	05 c0       	rjmp	.+10     	; 0x7f58 <p_ntoa+0x82>
    7f4e:	c1 10       	cpse	r12, r1
    7f50:	08 c0       	rjmp	.+16     	; 0x7f62 <p_ntoa+0x8c>
    7f52:	41 e0       	ldi	r20, 0x01	; 1
    7f54:	50 e0       	ldi	r21, 0x00	; 0
    7f56:	05 c0       	rjmp	.+10     	; 0x7f62 <p_ntoa+0x8c>
    7f58:	94 75       	andi	r25, 0x54	; 84
    7f5a:	a7 01       	movw	r20, r14
    7f5c:	11 f0       	breq	.+4      	; 0x7f62 <p_ntoa+0x8c>
    7f5e:	41 50       	subi	r20, 0x01	; 1
    7f60:	51 09       	sbc	r21, r1
    7f62:	68 01       	movw	r12, r16
    7f64:	7e 01       	movw	r14, r28
    7f66:	8d 01       	movw	r16, r26
    7f68:	cf 01       	movw	r24, r30
    7f6a:	fb de       	rcall	.-522    	; 0x7d62 <bin2num>
    7f6c:	df 91       	pop	r29
    7f6e:	cf 91       	pop	r28
    7f70:	1f 91       	pop	r17
    7f72:	0f 91       	pop	r16
    7f74:	ff 90       	pop	r15
    7f76:	ef 90       	pop	r14
    7f78:	df 90       	pop	r13
    7f7a:	cf 90       	pop	r12
    7f7c:	af 90       	pop	r10
    7f7e:	08 95       	ret

00007f80 <p_ftoa>:
    7f80:	2f 92       	push	r2
    7f82:	3f 92       	push	r3
    7f84:	4f 92       	push	r4
    7f86:	5f 92       	push	r5
    7f88:	6f 92       	push	r6
    7f8a:	7f 92       	push	r7
    7f8c:	8f 92       	push	r8
    7f8e:	9f 92       	push	r9
    7f90:	af 92       	push	r10
    7f92:	bf 92       	push	r11
    7f94:	cf 92       	push	r12
    7f96:	ef 92       	push	r14
    7f98:	ff 92       	push	r15
    7f9a:	0f 93       	push	r16
    7f9c:	1f 93       	push	r17
    7f9e:	cf 93       	push	r28
    7fa0:	df 93       	push	r29
    7fa2:	4b 01       	movw	r8, r22
    7fa4:	5c 01       	movw	r10, r24
    7fa6:	1a 01       	movw	r2, r20
    7fa8:	38 01       	movw	r6, r16
    7faa:	c6 fa       	bst	r12, 6
    7fac:	cc 27       	eor	r28, r28
    7fae:	c0 f9       	bld	r28, 0
    7fb0:	b9 01       	movw	r22, r18
    7fb2:	ca 01       	movw	r24, r20
    7fb4:	5f df       	rcall	.-322    	; 0x7e74 <pch_init>
    7fb6:	20 e0       	ldi	r18, 0x00	; 0
    7fb8:	30 e0       	ldi	r19, 0x00	; 0
    7fba:	a9 01       	movw	r20, r18
    7fbc:	c5 01       	movw	r24, r10
    7fbe:	b4 01       	movw	r22, r8
    7fc0:	0e 94 f2 ec 	call	0x1d9e4	; 0x1d9e4 <__cmpsf2>
    7fc4:	87 ff       	sbrs	r24, 7
    7fc6:	05 c0       	rjmp	.+10     	; 0x7fd2 <p_ftoa+0x52>
    7fc8:	b7 fa       	bst	r11, 7
    7fca:	b0 94       	com	r11
    7fcc:	b7 f8       	bld	r11, 7
    7fce:	b0 94       	com	r11
    7fd0:	c1 e0       	ldi	r28, 0x01	; 1
    7fd2:	c0 fb       	bst	r28, 0
    7fd4:	c6 f8       	bld	r12, 6
    7fd6:	c6 fe       	sbrs	r12, 6
    7fd8:	02 c0       	rjmp	.+4      	; 0x7fde <p_ftoa+0x5e>
    7fda:	8d e2       	ldi	r24, 0x2D	; 45
    7fdc:	07 c0       	rjmp	.+14     	; 0x7fec <p_ftoa+0x6c>
    7fde:	c2 fe       	sbrs	r12, 2
    7fe0:	02 c0       	rjmp	.+4      	; 0x7fe6 <p_ftoa+0x66>
    7fe2:	8b e2       	ldi	r24, 0x2B	; 43
    7fe4:	03 c0       	rjmp	.+6      	; 0x7fec <p_ftoa+0x6c>
    7fe6:	c4 fe       	sbrs	r12, 4
    7fe8:	02 c0       	rjmp	.+4      	; 0x7fee <p_ftoa+0x6e>
    7fea:	80 e2       	ldi	r24, 0x20	; 32
    7fec:	50 df       	rcall	.-352    	; 0x7e8e <pch>
    7fee:	e7 01       	movw	r28, r14
    7ff0:	f7 fe       	sbrs	r15, 7
    7ff2:	02 c0       	rjmp	.+4      	; 0x7ff8 <p_ftoa+0x78>
    7ff4:	c0 e0       	ldi	r28, 0x00	; 0
    7ff6:	d0 e0       	ldi	r29, 0x00	; 0
    7ff8:	20 e0       	ldi	r18, 0x00	; 0
    7ffa:	30 e0       	ldi	r19, 0x00	; 0
    7ffc:	a9 01       	movw	r20, r18
    7ffe:	c5 01       	movw	r24, r10
    8000:	b4 01       	movw	r22, r8
    8002:	0e 94 f2 ec 	call	0x1d9e4	; 0x1d9e4 <__cmpsf2>
    8006:	88 23       	and	r24, r24
    8008:	d1 f1       	breq	.+116    	; 0x807e <p_ftoa+0xfe>
    800a:	c1 fe       	sbrs	r12, 1
    800c:	11 c0       	rjmp	.+34     	; 0x8030 <p_ftoa+0xb0>
    800e:	8e 01       	movw	r16, r28
    8010:	60 e0       	ldi	r22, 0x00	; 0
    8012:	70 e0       	ldi	r23, 0x00	; 0
    8014:	80 e0       	ldi	r24, 0x00	; 0
    8016:	9f e3       	ldi	r25, 0x3F	; 63
    8018:	01 15       	cp	r16, r1
    801a:	11 05       	cpc	r17, r1
    801c:	69 f0       	breq	.+26     	; 0x8038 <p_ftoa+0xb8>
    801e:	20 e0       	ldi	r18, 0x00	; 0
    8020:	30 e0       	ldi	r19, 0x00	; 0
    8022:	40 e2       	ldi	r20, 0x20	; 32
    8024:	51 e4       	ldi	r21, 0x41	; 65
    8026:	0e 94 f6 ec 	call	0x1d9ec	; 0x1d9ec <__divsf3>
    802a:	01 50       	subi	r16, 0x01	; 1
    802c:	11 09       	sbc	r17, r1
    802e:	f4 cf       	rjmp	.-24     	; 0x8018 <p_ftoa+0x98>
    8030:	60 e0       	ldi	r22, 0x00	; 0
    8032:	70 e0       	ldi	r23, 0x00	; 0
    8034:	80 e0       	ldi	r24, 0x00	; 0
    8036:	9f e3       	ldi	r25, 0x3F	; 63
    8038:	9b 01       	movw	r18, r22
    803a:	ac 01       	movw	r20, r24
    803c:	c5 01       	movw	r24, r10
    803e:	b4 01       	movw	r22, r8
    8040:	0e 94 8e ec 	call	0x1d91c	; 0x1d91c <__addsf3>
    8044:	4b 01       	movw	r8, r22
    8046:	5c 01       	movw	r10, r24
    8048:	ee 24       	eor	r14, r14
    804a:	e3 94       	inc	r14
    804c:	f1 2c       	mov	r15, r1
    804e:	20 e0       	ldi	r18, 0x00	; 0
    8050:	30 e0       	ldi	r19, 0x00	; 0
    8052:	40 e2       	ldi	r20, 0x20	; 32
    8054:	51 e4       	ldi	r21, 0x41	; 65
    8056:	c5 01       	movw	r24, r10
    8058:	b4 01       	movw	r22, r8
    805a:	0e 94 41 ee 	call	0x1dc82	; 0x1dc82 <__gesf2>
    805e:	87 fd       	sbrc	r24, 7
    8060:	11 c0       	rjmp	.+34     	; 0x8084 <p_ftoa+0x104>
    8062:	2f ef       	ldi	r18, 0xFF	; 255
    8064:	e2 1a       	sub	r14, r18
    8066:	f2 0a       	sbc	r15, r18
    8068:	20 e0       	ldi	r18, 0x00	; 0
    806a:	30 e0       	ldi	r19, 0x00	; 0
    806c:	40 e2       	ldi	r20, 0x20	; 32
    806e:	51 e4       	ldi	r21, 0x41	; 65
    8070:	c5 01       	movw	r24, r10
    8072:	b4 01       	movw	r22, r8
    8074:	0e 94 f6 ec 	call	0x1d9ec	; 0x1d9ec <__divsf3>
    8078:	4b 01       	movw	r8, r22
    807a:	5c 01       	movw	r10, r24
    807c:	e8 cf       	rjmp	.-48     	; 0x804e <p_ftoa+0xce>
    807e:	ee 24       	eor	r14, r14
    8080:	e3 94       	inc	r14
    8082:	f1 2c       	mov	r15, r1
    8084:	8c 2d       	mov	r24, r12
    8086:	88 72       	andi	r24, 0x28	; 40
    8088:	80 32       	cpi	r24, 0x20	; 32
    808a:	b9 f4       	brne	.+46     	; 0x80ba <p_ftoa+0x13a>
    808c:	83 01       	movw	r16, r6
    808e:	0e 19       	sub	r16, r14
    8090:	1f 09       	sbc	r17, r15
    8092:	80 91 d7 1a 	lds	r24, 0x1AD7	; 0x801ad7 <_pch+0x2>
    8096:	90 91 d8 1a 	lds	r25, 0x1AD8	; 0x801ad8 <_pch+0x3>
    809a:	08 1b       	sub	r16, r24
    809c:	19 0b       	sbc	r17, r25
    809e:	c1 fe       	sbrs	r12, 1
    80a0:	06 c0       	rjmp	.+12     	; 0x80ae <p_ftoa+0x12e>
    80a2:	20 97       	sbiw	r28, 0x00	; 0
    80a4:	21 f0       	breq	.+8      	; 0x80ae <p_ftoa+0x12e>
    80a6:	0c 1b       	sub	r16, r28
    80a8:	1d 0b       	sbc	r17, r29
    80aa:	01 50       	subi	r16, 0x01	; 1
    80ac:	11 09       	sbc	r17, r1
    80ae:	10 16       	cp	r1, r16
    80b0:	11 06       	cpc	r1, r17
    80b2:	1c f4       	brge	.+6      	; 0x80ba <p_ftoa+0x13a>
    80b4:	80 e3       	ldi	r24, 0x30	; 48
    80b6:	eb de       	rcall	.-554    	; 0x7e8e <pch>
    80b8:	f8 cf       	rjmp	.-16     	; 0x80aa <p_ftoa+0x12a>
    80ba:	c5 01       	movw	r24, r10
    80bc:	b4 01       	movw	r22, r8
    80be:	0e 94 5e ed 	call	0x1dabc	; 0x1dabc <__fixsfsi>
    80c2:	2b 01       	movw	r4, r22
    80c4:	3c 01       	movw	r6, r24
    80c6:	80 e3       	ldi	r24, 0x30	; 48
    80c8:	84 0d       	add	r24, r4
    80ca:	e1 de       	rcall	.-574    	; 0x7e8e <pch>
    80cc:	b2 01       	movw	r22, r4
    80ce:	55 0c       	add	r5, r5
    80d0:	88 0b       	sbc	r24, r24
    80d2:	99 0b       	sbc	r25, r25
    80d4:	0e 94 91 ed 	call	0x1db22	; 0x1db22 <__floatsisf>
    80d8:	9b 01       	movw	r18, r22
    80da:	ac 01       	movw	r20, r24
    80dc:	c5 01       	movw	r24, r10
    80de:	b4 01       	movw	r22, r8
    80e0:	0e 94 8d ec 	call	0x1d91a	; 0x1d91a <__subsf3>
    80e4:	21 e0       	ldi	r18, 0x01	; 1
    80e6:	e2 1a       	sub	r14, r18
    80e8:	f1 08       	sbc	r15, r1
    80ea:	20 e0       	ldi	r18, 0x00	; 0
    80ec:	30 e0       	ldi	r19, 0x00	; 0
    80ee:	40 e2       	ldi	r20, 0x20	; 32
    80f0:	51 e4       	ldi	r21, 0x41	; 65
    80f2:	0e 94 45 ee 	call	0x1dc8a	; 0x1dc8a <__mulsf3>
    80f6:	4b 01       	movw	r8, r22
    80f8:	5c 01       	movw	r10, r24
    80fa:	e1 14       	cp	r14, r1
    80fc:	f1 04       	cpc	r15, r1
    80fe:	e9 f6       	brne	.-70     	; 0x80ba <p_ftoa+0x13a>
    8100:	c1 fc       	sbrc	r12, 1
    8102:	1c c0       	rjmp	.+56     	; 0x813c <p_ftoa+0x1bc>
    8104:	80 e0       	ldi	r24, 0x00	; 0
    8106:	c3 de       	rcall	.-634    	; 0x7e8e <pch>
    8108:	f1 01       	movw	r30, r2
    810a:	01 90       	ld	r0, Z+
    810c:	00 20       	and	r0, r0
    810e:	e9 f7       	brne	.-6      	; 0x810a <p_ftoa+0x18a>
    8110:	31 97       	sbiw	r30, 0x01	; 1
    8112:	cf 01       	movw	r24, r30
    8114:	82 19       	sub	r24, r2
    8116:	93 09       	sbc	r25, r3
    8118:	df 91       	pop	r29
    811a:	cf 91       	pop	r28
    811c:	1f 91       	pop	r17
    811e:	0f 91       	pop	r16
    8120:	ff 90       	pop	r15
    8122:	ef 90       	pop	r14
    8124:	cf 90       	pop	r12
    8126:	bf 90       	pop	r11
    8128:	af 90       	pop	r10
    812a:	9f 90       	pop	r9
    812c:	8f 90       	pop	r8
    812e:	7f 90       	pop	r7
    8130:	6f 90       	pop	r6
    8132:	5f 90       	pop	r5
    8134:	4f 90       	pop	r4
    8136:	3f 90       	pop	r3
    8138:	2f 90       	pop	r2
    813a:	08 95       	ret
    813c:	20 97       	sbiw	r28, 0x00	; 0
    813e:	11 f3       	breq	.-60     	; 0x8104 <p_ftoa+0x184>
    8140:	8e e2       	ldi	r24, 0x2E	; 46
    8142:	a5 de       	rcall	.-694    	; 0x7e8e <pch>
    8144:	c5 01       	movw	r24, r10
    8146:	b4 01       	movw	r22, r8
    8148:	0e 94 5e ed 	call	0x1dabc	; 0x1dabc <__fixsfsi>
    814c:	2b 01       	movw	r4, r22
    814e:	3c 01       	movw	r6, r24
    8150:	07 2e       	mov	r0, r23
    8152:	00 0c       	add	r0, r0
    8154:	88 0b       	sbc	r24, r24
    8156:	99 0b       	sbc	r25, r25
    8158:	0e 94 91 ed 	call	0x1db22	; 0x1db22 <__floatsisf>
    815c:	9b 01       	movw	r18, r22
    815e:	ac 01       	movw	r20, r24
    8160:	c5 01       	movw	r24, r10
    8162:	b4 01       	movw	r22, r8
    8164:	0e 94 8d ec 	call	0x1d91a	; 0x1d91a <__subsf3>
    8168:	4b 01       	movw	r8, r22
    816a:	5c 01       	movw	r10, r24
    816c:	80 e3       	ldi	r24, 0x30	; 48
    816e:	84 0d       	add	r24, r4
    8170:	8e de       	rcall	.-740    	; 0x7e8e <pch>
    8172:	21 97       	sbiw	r28, 0x01	; 1
    8174:	20 e0       	ldi	r18, 0x00	; 0
    8176:	30 e0       	ldi	r19, 0x00	; 0
    8178:	40 e2       	ldi	r20, 0x20	; 32
    817a:	51 e4       	ldi	r21, 0x41	; 65
    817c:	c5 01       	movw	r24, r10
    817e:	b4 01       	movw	r22, r8
    8180:	0e 94 45 ee 	call	0x1dc8a	; 0x1dc8a <__mulsf3>
    8184:	4b 01       	movw	r8, r22
    8186:	5c 01       	movw	r10, r24
    8188:	20 97       	sbiw	r28, 0x00	; 0
    818a:	e1 f6       	brne	.-72     	; 0x8144 <p_ftoa+0x1c4>
    818c:	bb cf       	rjmp	.-138    	; 0x8104 <p_ftoa+0x184>

0000818e <p_etoa>:
    818e:	ad e0       	ldi	r26, 0x0D	; 13
    8190:	b0 e0       	ldi	r27, 0x00	; 0
    8192:	ed ec       	ldi	r30, 0xCD	; 205
    8194:	f0 e4       	ldi	r31, 0x40	; 64
    8196:	0c 94 34 ec 	jmp	0x1d868	; 0x1d868 <__prologue_saves__>
    819a:	4b 01       	movw	r8, r22
    819c:	5c 01       	movw	r10, r24
    819e:	5b 87       	std	Y+11, r21	; 0x0b
    81a0:	4a 87       	std	Y+10, r20	; 0x0a
    81a2:	1d 87       	std	Y+13, r17	; 0x0d
    81a4:	0c 87       	std	Y+12, r16	; 0x0c
    81a6:	3c 2c       	mov	r3, r12
    81a8:	c6 fa       	bst	r12, 6
    81aa:	11 27       	eor	r17, r17
    81ac:	10 f9       	bld	r17, 0
    81ae:	b9 01       	movw	r22, r18
    81b0:	ca 01       	movw	r24, r20
    81b2:	60 de       	rcall	.-832    	; 0x7e74 <pch_init>
    81b4:	20 e0       	ldi	r18, 0x00	; 0
    81b6:	30 e0       	ldi	r19, 0x00	; 0
    81b8:	a9 01       	movw	r20, r18
    81ba:	c5 01       	movw	r24, r10
    81bc:	b4 01       	movw	r22, r8
    81be:	0e 94 f2 ec 	call	0x1d9e4	; 0x1d9e4 <__cmpsf2>
    81c2:	87 ff       	sbrs	r24, 7
    81c4:	05 c0       	rjmp	.+10     	; 0x81d0 <p_etoa+0x42>
    81c6:	b7 fa       	bst	r11, 7
    81c8:	b0 94       	com	r11
    81ca:	b7 f8       	bld	r11, 7
    81cc:	b0 94       	com	r11
    81ce:	11 e0       	ldi	r17, 0x01	; 1
    81d0:	10 fb       	bst	r17, 0
    81d2:	36 f8       	bld	r3, 6
    81d4:	36 fe       	sbrs	r3, 6
    81d6:	02 c0       	rjmp	.+4      	; 0x81dc <p_etoa+0x4e>
    81d8:	8d e2       	ldi	r24, 0x2D	; 45
    81da:	07 c0       	rjmp	.+14     	; 0x81ea <p_etoa+0x5c>
    81dc:	32 fe       	sbrs	r3, 2
    81de:	02 c0       	rjmp	.+4      	; 0x81e4 <p_etoa+0x56>
    81e0:	8b e2       	ldi	r24, 0x2B	; 43
    81e2:	03 c0       	rjmp	.+6      	; 0x81ea <p_etoa+0x5c>
    81e4:	34 fe       	sbrs	r3, 4
    81e6:	02 c0       	rjmp	.+4      	; 0x81ec <p_etoa+0x5e>
    81e8:	80 e2       	ldi	r24, 0x20	; 32
    81ea:	51 de       	rcall	.-862    	; 0x7e8e <pch>
    81ec:	37 01       	movw	r6, r14
    81ee:	f7 fe       	sbrs	r15, 7
    81f0:	02 c0       	rjmp	.+4      	; 0x81f6 <p_etoa+0x68>
    81f2:	61 2c       	mov	r6, r1
    81f4:	71 2c       	mov	r7, r1
    81f6:	19 86       	std	Y+9, r1	; 0x09
    81f8:	18 86       	std	Y+8, r1	; 0x08
    81fa:	20 e0       	ldi	r18, 0x00	; 0
    81fc:	30 e0       	ldi	r19, 0x00	; 0
    81fe:	a9 01       	movw	r20, r18
    8200:	c5 01       	movw	r24, r10
    8202:	b4 01       	movw	r22, r8
    8204:	0e 94 f2 ec 	call	0x1d9e4	; 0x1d9e4 <__cmpsf2>
    8208:	23 2d       	mov	r18, r3
    820a:	22 70       	andi	r18, 0x02	; 2
    820c:	22 2e       	mov	r2, r18
    820e:	88 23       	and	r24, r24
    8210:	09 f4       	brne	.+2      	; 0x8214 <p_etoa+0x86>
    8212:	70 c0       	rjmp	.+224    	; 0x82f4 <p_etoa+0x166>
    8214:	22 23       	and	r18, r18
    8216:	b1 f0       	breq	.+44     	; 0x8244 <p_etoa+0xb6>
    8218:	83 01       	movw	r16, r6
    821a:	c1 2c       	mov	r12, r1
    821c:	d1 2c       	mov	r13, r1
    821e:	e1 2c       	mov	r14, r1
    8220:	2f e3       	ldi	r18, 0x3F	; 63
    8222:	f2 2e       	mov	r15, r18
    8224:	01 15       	cp	r16, r1
    8226:	11 05       	cpc	r17, r1
    8228:	91 f0       	breq	.+36     	; 0x824e <p_etoa+0xc0>
    822a:	20 e0       	ldi	r18, 0x00	; 0
    822c:	30 e0       	ldi	r19, 0x00	; 0
    822e:	40 e2       	ldi	r20, 0x20	; 32
    8230:	51 e4       	ldi	r21, 0x41	; 65
    8232:	c7 01       	movw	r24, r14
    8234:	b6 01       	movw	r22, r12
    8236:	0e 94 f6 ec 	call	0x1d9ec	; 0x1d9ec <__divsf3>
    823a:	6b 01       	movw	r12, r22
    823c:	7c 01       	movw	r14, r24
    823e:	01 50       	subi	r16, 0x01	; 1
    8240:	11 09       	sbc	r17, r1
    8242:	f0 cf       	rjmp	.-32     	; 0x8224 <p_etoa+0x96>
    8244:	c1 2c       	mov	r12, r1
    8246:	d1 2c       	mov	r13, r1
    8248:	e1 2c       	mov	r14, r1
    824a:	9f e3       	ldi	r25, 0x3F	; 63
    824c:	f9 2e       	mov	r15, r25
    824e:	41 2c       	mov	r4, r1
    8250:	51 2c       	mov	r5, r1
    8252:	82 01       	movw	r16, r4
    8254:	01 50       	subi	r16, 0x01	; 1
    8256:	11 09       	sbc	r17, r1
    8258:	20 e0       	ldi	r18, 0x00	; 0
    825a:	30 e0       	ldi	r19, 0x00	; 0
    825c:	40 e8       	ldi	r20, 0x80	; 128
    825e:	5f e3       	ldi	r21, 0x3F	; 63
    8260:	c5 01       	movw	r24, r10
    8262:	b4 01       	movw	r22, r8
    8264:	0e 94 f2 ec 	call	0x1d9e4	; 0x1d9e4 <__cmpsf2>
    8268:	87 ff       	sbrs	r24, 7
    826a:	0c c0       	rjmp	.+24     	; 0x8284 <p_etoa+0xf6>
    826c:	20 e0       	ldi	r18, 0x00	; 0
    826e:	30 e0       	ldi	r19, 0x00	; 0
    8270:	40 e2       	ldi	r20, 0x20	; 32
    8272:	51 e4       	ldi	r21, 0x41	; 65
    8274:	c5 01       	movw	r24, r10
    8276:	b4 01       	movw	r22, r8
    8278:	0e 94 45 ee 	call	0x1dc8a	; 0x1dc8a <__mulsf3>
    827c:	4b 01       	movw	r8, r22
    827e:	5c 01       	movw	r10, r24
    8280:	28 01       	movw	r4, r16
    8282:	e7 cf       	rjmp	.-50     	; 0x8252 <p_etoa+0xc4>
    8284:	82 01       	movw	r16, r4
    8286:	0f 5f       	subi	r16, 0xFF	; 255
    8288:	1f 4f       	sbci	r17, 0xFF	; 255
    828a:	20 e0       	ldi	r18, 0x00	; 0
    828c:	30 e0       	ldi	r19, 0x00	; 0
    828e:	40 e2       	ldi	r20, 0x20	; 32
    8290:	51 e4       	ldi	r21, 0x41	; 65
    8292:	c5 01       	movw	r24, r10
    8294:	b4 01       	movw	r22, r8
    8296:	0e 94 41 ee 	call	0x1dc82	; 0x1dc82 <__gesf2>
    829a:	87 fd       	sbrc	r24, 7
    829c:	0c c0       	rjmp	.+24     	; 0x82b6 <p_etoa+0x128>
    829e:	20 e0       	ldi	r18, 0x00	; 0
    82a0:	30 e0       	ldi	r19, 0x00	; 0
    82a2:	40 e2       	ldi	r20, 0x20	; 32
    82a4:	51 e4       	ldi	r21, 0x41	; 65
    82a6:	c5 01       	movw	r24, r10
    82a8:	b4 01       	movw	r22, r8
    82aa:	0e 94 f6 ec 	call	0x1d9ec	; 0x1d9ec <__divsf3>
    82ae:	4b 01       	movw	r8, r22
    82b0:	5c 01       	movw	r10, r24
    82b2:	28 01       	movw	r4, r16
    82b4:	e7 cf       	rjmp	.-50     	; 0x8284 <p_etoa+0xf6>
    82b6:	a7 01       	movw	r20, r14
    82b8:	96 01       	movw	r18, r12
    82ba:	c5 01       	movw	r24, r10
    82bc:	b4 01       	movw	r22, r8
    82be:	0e 94 8e ec 	call	0x1d91c	; 0x1d91c <__addsf3>
    82c2:	4b 01       	movw	r8, r22
    82c4:	5c 01       	movw	r10, r24
    82c6:	82 01       	movw	r16, r4
    82c8:	3f ef       	ldi	r19, 0xFF	; 255
    82ca:	43 1a       	sub	r4, r19
    82cc:	53 0a       	sbc	r5, r19
    82ce:	20 e0       	ldi	r18, 0x00	; 0
    82d0:	30 e0       	ldi	r19, 0x00	; 0
    82d2:	40 e2       	ldi	r20, 0x20	; 32
    82d4:	51 e4       	ldi	r21, 0x41	; 65
    82d6:	0e 94 41 ee 	call	0x1dc82	; 0x1dc82 <__gesf2>
    82da:	87 fd       	sbrc	r24, 7
    82dc:	09 c0       	rjmp	.+18     	; 0x82f0 <p_etoa+0x162>
    82de:	20 e0       	ldi	r18, 0x00	; 0
    82e0:	30 e0       	ldi	r19, 0x00	; 0
    82e2:	40 e2       	ldi	r20, 0x20	; 32
    82e4:	51 e4       	ldi	r21, 0x41	; 65
    82e6:	c5 01       	movw	r24, r10
    82e8:	b4 01       	movw	r22, r8
    82ea:	0e 94 f6 ec 	call	0x1d9ec	; 0x1d9ec <__divsf3>
    82ee:	e9 cf       	rjmp	.-46     	; 0x82c2 <p_etoa+0x134>
    82f0:	08 87       	std	Y+8, r16	; 0x08
    82f2:	19 87       	std	Y+9, r17	; 0x09
    82f4:	85 e6       	ldi	r24, 0x65	; 101
    82f6:	89 83       	std	Y+1, r24	; 0x01
    82f8:	88 85       	ldd	r24, Y+8	; 0x08
    82fa:	99 85       	ldd	r25, Y+9	; 0x09
    82fc:	97 ff       	sbrs	r25, 7
    82fe:	08 c0       	rjmp	.+16     	; 0x8310 <p_etoa+0x182>
    8300:	91 95       	neg	r25
    8302:	81 95       	neg	r24
    8304:	91 09       	sbc	r25, r1
    8306:	99 87       	std	Y+9, r25	; 0x09
    8308:	88 87       	std	Y+8, r24	; 0x08
    830a:	8d e2       	ldi	r24, 0x2D	; 45
    830c:	90 e0       	ldi	r25, 0x00	; 0
    830e:	02 c0       	rjmp	.+4      	; 0x8314 <p_etoa+0x186>
    8310:	8b e2       	ldi	r24, 0x2B	; 43
    8312:	90 e0       	ldi	r25, 0x00	; 0
    8314:	6c 01       	movw	r12, r24
    8316:	82 e0       	ldi	r24, 0x02	; 2
    8318:	e8 2e       	mov	r14, r24
    831a:	f1 2c       	mov	r15, r1
    831c:	8e 01       	movw	r16, r28
    831e:	08 5f       	subi	r16, 0xF8	; 248
    8320:	1f 4f       	sbci	r17, 0xFF	; 255
    8322:	2a e0       	ldi	r18, 0x0A	; 10
    8324:	30 e0       	ldi	r19, 0x00	; 0
    8326:	42 e0       	ldi	r20, 0x02	; 2
    8328:	50 e0       	ldi	r21, 0x00	; 0
    832a:	65 e0       	ldi	r22, 0x05	; 5
    832c:	70 e0       	ldi	r23, 0x00	; 0
    832e:	ce 01       	movw	r24, r28
    8330:	02 96       	adiw	r24, 0x02	; 2
    8332:	17 dd       	rcall	.-1490   	; 0x7d62 <bin2num>
    8334:	9c 01       	movw	r18, r24
    8336:	93 2d       	mov	r25, r3
    8338:	98 72       	andi	r25, 0x28	; 40
    833a:	90 32       	cpi	r25, 0x20	; 32
    833c:	61 f0       	breq	.+24     	; 0x8356 <p_etoa+0x1c8>
    833e:	c5 01       	movw	r24, r10
    8340:	b4 01       	movw	r22, r8
    8342:	0e 94 5e ed 	call	0x1dabc	; 0x1dabc <__fixsfsi>
    8346:	6b 01       	movw	r12, r22
    8348:	7c 01       	movw	r14, r24
    834a:	80 e3       	ldi	r24, 0x30	; 48
    834c:	8c 0d       	add	r24, r12
    834e:	9f dd       	rcall	.-1218   	; 0x7e8e <pch>
    8350:	21 10       	cpse	r2, r1
    8352:	20 c0       	rjmp	.+64     	; 0x8394 <p_etoa+0x206>
    8354:	5e c0       	rjmp	.+188    	; 0x8412 <p_etoa+0x284>
    8356:	80 91 d7 1a 	lds	r24, 0x1AD7	; 0x801ad7 <_pch+0x2>
    835a:	90 91 d8 1a 	lds	r25, 0x1AD8	; 0x801ad8 <_pch+0x3>
    835e:	0c 85       	ldd	r16, Y+12	; 0x0c
    8360:	1d 85       	ldd	r17, Y+13	; 0x0d
    8362:	08 1b       	sub	r16, r24
    8364:	19 0b       	sbc	r17, r25
    8366:	22 20       	and	r2, r2
    8368:	41 f0       	breq	.+16     	; 0x837a <p_etoa+0x1ec>
    836a:	61 14       	cp	r6, r1
    836c:	71 04       	cpc	r7, r1
    836e:	29 f0       	breq	.+10     	; 0x837a <p_etoa+0x1ec>
    8370:	06 19       	sub	r16, r6
    8372:	17 09       	sbc	r17, r7
    8374:	06 50       	subi	r16, 0x06	; 6
    8376:	11 09       	sbc	r17, r1
    8378:	02 c0       	rjmp	.+4      	; 0x837e <p_etoa+0x1f0>
    837a:	05 50       	subi	r16, 0x05	; 5
    837c:	11 09       	sbc	r17, r1
    837e:	24 30       	cpi	r18, 0x04	; 4
    8380:	31 05       	cpc	r19, r1
    8382:	14 f0       	brlt	.+4      	; 0x8388 <p_etoa+0x1fa>
    8384:	01 50       	subi	r16, 0x01	; 1
    8386:	11 09       	sbc	r17, r1
    8388:	10 16       	cp	r1, r16
    838a:	11 06       	cpc	r1, r17
    838c:	c4 f6       	brge	.-80     	; 0x833e <p_etoa+0x1b0>
    838e:	80 e3       	ldi	r24, 0x30	; 48
    8390:	7e dd       	rcall	.-1284   	; 0x7e8e <pch>
    8392:	f8 cf       	rjmp	.-16     	; 0x8384 <p_etoa+0x1f6>
    8394:	61 14       	cp	r6, r1
    8396:	71 04       	cpc	r7, r1
    8398:	09 f4       	brne	.+2      	; 0x839c <p_etoa+0x20e>
    839a:	3b c0       	rjmp	.+118    	; 0x8412 <p_etoa+0x284>
    839c:	b6 01       	movw	r22, r12
    839e:	dd 0c       	add	r13, r13
    83a0:	88 0b       	sbc	r24, r24
    83a2:	99 0b       	sbc	r25, r25
    83a4:	0e 94 91 ed 	call	0x1db22	; 0x1db22 <__floatsisf>
    83a8:	9b 01       	movw	r18, r22
    83aa:	ac 01       	movw	r20, r24
    83ac:	c5 01       	movw	r24, r10
    83ae:	b4 01       	movw	r22, r8
    83b0:	0e 94 8d ec 	call	0x1d91a	; 0x1d91a <__subsf3>
    83b4:	20 e0       	ldi	r18, 0x00	; 0
    83b6:	30 e0       	ldi	r19, 0x00	; 0
    83b8:	40 e2       	ldi	r20, 0x20	; 32
    83ba:	51 e4       	ldi	r21, 0x41	; 65
    83bc:	0e 94 45 ee 	call	0x1dc8a	; 0x1dc8a <__mulsf3>
    83c0:	6b 01       	movw	r12, r22
    83c2:	7c 01       	movw	r14, r24
    83c4:	8e e2       	ldi	r24, 0x2E	; 46
    83c6:	63 dd       	rcall	.-1338   	; 0x7e8e <pch>
    83c8:	c7 01       	movw	r24, r14
    83ca:	b6 01       	movw	r22, r12
    83cc:	0e 94 5e ed 	call	0x1dabc	; 0x1dabc <__fixsfsi>
    83d0:	4b 01       	movw	r8, r22
    83d2:	5c 01       	movw	r10, r24
    83d4:	07 2e       	mov	r0, r23
    83d6:	00 0c       	add	r0, r0
    83d8:	88 0b       	sbc	r24, r24
    83da:	99 0b       	sbc	r25, r25
    83dc:	0e 94 91 ed 	call	0x1db22	; 0x1db22 <__floatsisf>
    83e0:	9b 01       	movw	r18, r22
    83e2:	ac 01       	movw	r20, r24
    83e4:	c7 01       	movw	r24, r14
    83e6:	b6 01       	movw	r22, r12
    83e8:	0e 94 8d ec 	call	0x1d91a	; 0x1d91a <__subsf3>
    83ec:	6b 01       	movw	r12, r22
    83ee:	7c 01       	movw	r14, r24
    83f0:	80 e3       	ldi	r24, 0x30	; 48
    83f2:	88 0d       	add	r24, r8
    83f4:	4c dd       	rcall	.-1384   	; 0x7e8e <pch>
    83f6:	20 e0       	ldi	r18, 0x00	; 0
    83f8:	30 e0       	ldi	r19, 0x00	; 0
    83fa:	40 e2       	ldi	r20, 0x20	; 32
    83fc:	51 e4       	ldi	r21, 0x41	; 65
    83fe:	c7 01       	movw	r24, r14
    8400:	b6 01       	movw	r22, r12
    8402:	0e 94 45 ee 	call	0x1dc8a	; 0x1dc8a <__mulsf3>
    8406:	6b 01       	movw	r12, r22
    8408:	7c 01       	movw	r14, r24
    840a:	81 e0       	ldi	r24, 0x01	; 1
    840c:	68 1a       	sub	r6, r24
    840e:	71 08       	sbc	r7, r1
    8410:	d9 f6       	brne	.-74     	; 0x83c8 <p_etoa+0x23a>
    8412:	8e 01       	movw	r16, r28
    8414:	0f 5f       	subi	r16, 0xFF	; 255
    8416:	1f 4f       	sbci	r17, 0xFF	; 255
    8418:	f8 01       	movw	r30, r16
    841a:	81 91       	ld	r24, Z+
    841c:	8f 01       	movw	r16, r30
    841e:	88 23       	and	r24, r24
    8420:	11 f0       	breq	.+4      	; 0x8426 <p_etoa+0x298>
    8422:	35 dd       	rcall	.-1430   	; 0x7e8e <pch>
    8424:	f9 cf       	rjmp	.-14     	; 0x8418 <p_etoa+0x28a>
    8426:	33 dd       	rcall	.-1434   	; 0x7e8e <pch>
    8428:	ea 85       	ldd	r30, Y+10	; 0x0a
    842a:	fb 85       	ldd	r31, Y+11	; 0x0b
    842c:	01 90       	ld	r0, Z+
    842e:	00 20       	and	r0, r0
    8430:	e9 f7       	brne	.-6      	; 0x842c <p_etoa+0x29e>
    8432:	cf 01       	movw	r24, r30
    8434:	01 97       	sbiw	r24, 0x01	; 1
    8436:	2a 85       	ldd	r18, Y+10	; 0x0a
    8438:	3b 85       	ldd	r19, Y+11	; 0x0b
    843a:	82 1b       	sub	r24, r18
    843c:	93 0b       	sbc	r25, r19
    843e:	2d 96       	adiw	r28, 0x0d	; 13
    8440:	e2 e1       	ldi	r30, 0x12	; 18
    8442:	0c 94 50 ec 	jmp	0x1d8a0	; 0x1d8a0 <__epilogue_restores__>

00008446 <_puts_pad>:
    8446:	a0 e0       	ldi	r26, 0x00	; 0
    8448:	b0 e0       	ldi	r27, 0x00	; 0
    844a:	e9 e2       	ldi	r30, 0x29	; 41
    844c:	f2 e4       	ldi	r31, 0x42	; 66
    844e:	0c 94 3a ec 	jmp	0x1d874	; 0x1d874 <__prologue_saves__+0xc>
    8452:	6c 01       	movw	r12, r24
    8454:	4b 01       	movw	r8, r22
    8456:	79 01       	movw	r14, r18
    8458:	24 17       	cp	r18, r20
    845a:	35 07       	cpc	r19, r21
    845c:	24 f4       	brge	.+8      	; 0x8466 <_puts_pad+0x20>
    845e:	ea 01       	movw	r28, r20
    8460:	c2 1b       	sub	r28, r18
    8462:	d3 0b       	sbc	r29, r19
    8464:	02 c0       	rjmp	.+4      	; 0x846a <_puts_pad+0x24>
    8466:	c0 e0       	ldi	r28, 0x00	; 0
    8468:	d0 e0       	ldi	r29, 0x00	; 0
    846a:	01 15       	cp	r16, r1
    846c:	11 05       	cpc	r17, r1
    846e:	49 f4       	brne	.+18     	; 0x8482 <_puts_pad+0x3c>
    8470:	21 97       	sbiw	r28, 0x01	; 1
    8472:	38 f0       	brcs	.+14     	; 0x8482 <_puts_pad+0x3c>
    8474:	d6 01       	movw	r26, r12
    8476:	ed 91       	ld	r30, X+
    8478:	fc 91       	ld	r31, X
    847a:	60 e2       	ldi	r22, 0x20	; 32
    847c:	c6 01       	movw	r24, r12
    847e:	09 95       	icall
    8480:	f7 cf       	rjmp	.-18     	; 0x8470 <_puts_pad+0x2a>
    8482:	54 01       	movw	r10, r8
    8484:	f5 01       	movw	r30, r10
    8486:	61 91       	ld	r22, Z+
    8488:	5f 01       	movw	r10, r30
    848a:	66 23       	and	r22, r22
    848c:	61 f0       	breq	.+24     	; 0x84a6 <_puts_pad+0x60>
    848e:	e1 14       	cp	r14, r1
    8490:	f1 04       	cpc	r15, r1
    8492:	49 f0       	breq	.+18     	; 0x84a6 <_puts_pad+0x60>
    8494:	d6 01       	movw	r26, r12
    8496:	ed 91       	ld	r30, X+
    8498:	fc 91       	ld	r31, X
    849a:	c6 01       	movw	r24, r12
    849c:	09 95       	icall
    849e:	b1 e0       	ldi	r27, 0x01	; 1
    84a0:	eb 1a       	sub	r14, r27
    84a2:	f1 08       	sbc	r15, r1
    84a4:	ef cf       	rjmp	.-34     	; 0x8484 <_puts_pad+0x3e>
    84a6:	01 15       	cp	r16, r1
    84a8:	11 05       	cpc	r17, r1
    84aa:	51 f0       	breq	.+20     	; 0x84c0 <_puts_pad+0x7a>
    84ac:	20 97       	sbiw	r28, 0x00	; 0
    84ae:	41 f0       	breq	.+16     	; 0x84c0 <_puts_pad+0x7a>
    84b0:	d6 01       	movw	r26, r12
    84b2:	ed 91       	ld	r30, X+
    84b4:	fc 91       	ld	r31, X
    84b6:	60 e2       	ldi	r22, 0x20	; 32
    84b8:	c6 01       	movw	r24, r12
    84ba:	09 95       	icall
    84bc:	21 97       	sbiw	r28, 0x01	; 1
    84be:	f6 cf       	rjmp	.-20     	; 0x84ac <_puts_pad+0x66>
    84c0:	cd b7       	in	r28, 0x3d	; 61
    84c2:	de b7       	in	r29, 0x3e	; 62
    84c4:	ec e0       	ldi	r30, 0x0C	; 12
    84c6:	0c 94 56 ec 	jmp	0x1d8ac	; 0x1d8ac <__epilogue_restores__+0xc>

000084ca <_printf_fn>:
    84ca:	ab e6       	ldi	r26, 0x6B	; 107
    84cc:	b0 e0       	ldi	r27, 0x00	; 0
    84ce:	eb e6       	ldi	r30, 0x6B	; 107
    84d0:	f2 e4       	ldi	r31, 0x42	; 66
    84d2:	0c 94 34 ec 	jmp	0x1d868	; 0x1d868 <__prologue_saves__>
    84d6:	a5 96       	adiw	r28, 0x25	; 37
    84d8:	9f af       	std	Y+63, r25	; 0x3f
    84da:	8e af       	std	Y+62, r24	; 0x3e
    84dc:	a5 97       	sbiw	r28, 0x25	; 37
    84de:	6a 01       	movw	r12, r20
    84e0:	e6 2e       	mov	r14, r22
    84e2:	19 01       	movw	r2, r18
    84e4:	a9 96       	adiw	r28, 0x29	; 41
    84e6:	1c ae       	std	Y+60, r1	; 0x3c
    84e8:	1d ae       	std	Y+61, r1	; 0x3d
    84ea:	1e ae       	std	Y+62, r1	; 0x3e
    84ec:	1f ae       	std	Y+63, r1	; 0x3f
    84ee:	a9 97       	sbiw	r28, 0x29	; 41
    84f0:	9e 01       	movw	r18, r28
    84f2:	2f 5a       	subi	r18, 0xAF	; 175
    84f4:	3f 4f       	sbci	r19, 0xFF	; 255
    84f6:	67 96       	adiw	r28, 0x17	; 23
    84f8:	3f af       	std	Y+63, r19	; 0x3f
    84fa:	2e af       	std	Y+62, r18	; 0x3e
    84fc:	67 97       	sbiw	r28, 0x17	; 23
    84fe:	ae 01       	movw	r20, r28
    8500:	4d 5b       	subi	r20, 0xBD	; 189
    8502:	5f 4f       	sbci	r21, 0xFF	; 255
    8504:	69 96       	adiw	r28, 0x19	; 25
    8506:	5f af       	std	Y+63, r21	; 0x3f
    8508:	4e af       	std	Y+62, r20	; 0x3e
    850a:	69 97       	sbiw	r28, 0x19	; 25
    850c:	ce 01       	movw	r24, r28
    850e:	85 5b       	subi	r24, 0xB5	; 181
    8510:	9f 4f       	sbci	r25, 0xFF	; 255
    8512:	6b 96       	adiw	r28, 0x1b	; 27
    8514:	9f af       	std	Y+63, r25	; 0x3f
    8516:	8e af       	std	Y+62, r24	; 0x3e
    8518:	6b 97       	sbiw	r28, 0x1b	; 27
    851a:	de 01       	movw	r26, r28
    851c:	ad 5a       	subi	r26, 0xAD	; 173
    851e:	bf 4f       	sbci	r27, 0xFF	; 255
    8520:	6d 96       	adiw	r28, 0x1d	; 29
    8522:	bf af       	std	Y+63, r27	; 0x3f
    8524:	ae af       	std	Y+62, r26	; 0x3e
    8526:	6d 97       	sbiw	r28, 0x1d	; 29
    8528:	f6 01       	movw	r30, r12
    852a:	5e 2d       	mov	r21, r14
    852c:	0e 94 6b ec 	call	0x1d8d6	; 0x1d8d6 <__xload_1>
    8530:	66 23       	and	r22, r22
    8532:	09 f4       	brne	.+2      	; 0x8536 <_printf_fn+0x6c>
    8534:	df c3       	rjmp	.+1982   	; 0x8cf4 <_printf_fn+0x82a>
    8536:	ae 2d       	mov	r26, r14
    8538:	c6 01       	movw	r24, r12
    853a:	01 96       	adiw	r24, 0x01	; 1
    853c:	a1 1d       	adc	r26, r1
    853e:	3c 01       	movw	r6, r24
    8540:	8a 2e       	mov	r8, r26
    8542:	65 32       	cpi	r22, 0x25	; 37
    8544:	51 f0       	breq	.+20     	; 0x855a <_printf_fn+0x90>
    8546:	a5 96       	adiw	r28, 0x25	; 37
    8548:	ae ad       	ldd	r26, Y+62	; 0x3e
    854a:	bf ad       	ldd	r27, Y+63	; 0x3f
    854c:	a5 97       	sbiw	r28, 0x25	; 37
    854e:	ed 91       	ld	r30, X+
    8550:	fc 91       	ld	r31, X
    8552:	11 97       	sbiw	r26, 0x01	; 1
    8554:	cd 01       	movw	r24, r26
    8556:	09 95       	icall
    8558:	99 c3       	rjmp	.+1842   	; 0x8c8c <_printf_fn+0x7c2>
    855a:	91 2c       	mov	r9, r1
    855c:	f3 01       	movw	r30, r6
    855e:	58 2d       	mov	r21, r8
    8560:	0e 94 6b ec 	call	0x1d8d6	; 0x1d8d6 <__xload_1>
    8564:	63 32       	cpi	r22, 0x23	; 35
    8566:	19 f4       	brne	.+6      	; 0x856e <_printf_fn+0xa4>
    8568:	68 94       	set
    856a:	97 f8       	bld	r9, 7
    856c:	04 c0       	rjmp	.+8      	; 0x8576 <_printf_fn+0xac>
    856e:	6b 32       	cpi	r22, 0x2B	; 43
    8570:	39 f4       	brne	.+14     	; 0x8580 <_printf_fn+0xb6>
    8572:	68 94       	set
    8574:	92 f8       	bld	r9, 2
    8576:	bf ef       	ldi	r27, 0xFF	; 255
    8578:	6b 1a       	sub	r6, r27
    857a:	7b 0a       	sbc	r7, r27
    857c:	8b 0a       	sbc	r8, r27
    857e:	ee cf       	rjmp	.-36     	; 0x855c <_printf_fn+0x92>
    8580:	6d 32       	cpi	r22, 0x2D	; 45
    8582:	a9 f4       	brne	.+42     	; 0x85ae <_printf_fn+0xe4>
    8584:	93 fc       	sbrc	r9, 3
    8586:	05 c0       	rjmp	.+10     	; 0x8592 <_printf_fn+0xc8>
    8588:	6d 32       	cpi	r22, 0x2D	; 45
    858a:	19 f4       	brne	.+6      	; 0x8592 <_printf_fn+0xc8>
    858c:	68 94       	set
    858e:	93 f8       	bld	r9, 3
    8590:	f2 cf       	rjmp	.-28     	; 0x8576 <_printf_fn+0xac>
    8592:	94 fc       	sbrc	r9, 4
    8594:	05 c0       	rjmp	.+10     	; 0x85a0 <_printf_fn+0xd6>
    8596:	60 32       	cpi	r22, 0x20	; 32
    8598:	19 f4       	brne	.+6      	; 0x85a0 <_printf_fn+0xd6>
    859a:	68 94       	set
    859c:	94 f8       	bld	r9, 4
    859e:	eb cf       	rjmp	.-42     	; 0x8576 <_printf_fn+0xac>
    85a0:	95 fc       	sbrc	r9, 5
    85a2:	e9 cf       	rjmp	.-46     	; 0x8576 <_printf_fn+0xac>
    85a4:	60 33       	cpi	r22, 0x30	; 48
    85a6:	39 f7       	brne	.-50     	; 0x8576 <_printf_fn+0xac>
    85a8:	68 94       	set
    85aa:	95 f8       	bld	r9, 5
    85ac:	e4 cf       	rjmp	.-56     	; 0x8576 <_printf_fn+0xac>
    85ae:	86 2f       	mov	r24, r22
    85b0:	8f 7e       	andi	r24, 0xEF	; 239
    85b2:	80 32       	cpi	r24, 0x20	; 32
    85b4:	39 f3       	breq	.-50     	; 0x8584 <_printf_fn+0xba>
    85b6:	70 e0       	ldi	r23, 0x00	; 0
    85b8:	60 53       	subi	r22, 0x30	; 48
    85ba:	71 09       	sbc	r23, r1
    85bc:	41 2c       	mov	r4, r1
    85be:	51 2c       	mov	r5, r1
    85c0:	6a 30       	cpi	r22, 0x0A	; 10
    85c2:	71 05       	cpc	r23, r1
    85c4:	e0 f4       	brcc	.+56     	; 0x85fe <_printf_fn+0x134>
    85c6:	2a e0       	ldi	r18, 0x0A	; 10
    85c8:	f3 01       	movw	r30, r6
    85ca:	58 2d       	mov	r21, r8
    85cc:	0e 94 6b ec 	call	0x1d8d6	; 0x1d8d6 <__xload_1>
    85d0:	70 e0       	ldi	r23, 0x00	; 0
    85d2:	cb 01       	movw	r24, r22
    85d4:	c0 97       	sbiw	r24, 0x30	; 48
    85d6:	0a 97       	sbiw	r24, 0x0a	; 10
    85d8:	80 f4       	brcc	.+32     	; 0x85fa <_printf_fn+0x130>
    85da:	ef ef       	ldi	r30, 0xFF	; 255
    85dc:	6e 1a       	sub	r6, r30
    85de:	7e 0a       	sbc	r7, r30
    85e0:	8e 0a       	sbc	r8, r30
    85e2:	24 9d       	mul	r18, r4
    85e4:	c0 01       	movw	r24, r0
    85e6:	25 9d       	mul	r18, r5
    85e8:	90 0d       	add	r25, r0
    85ea:	11 24       	eor	r1, r1
    85ec:	68 0f       	add	r22, r24
    85ee:	79 1f       	adc	r23, r25
    85f0:	2b 01       	movw	r4, r22
    85f2:	f0 e3       	ldi	r31, 0x30	; 48
    85f4:	4f 1a       	sub	r4, r31
    85f6:	51 08       	sbc	r5, r1
    85f8:	e7 cf       	rjmp	.-50     	; 0x85c8 <_printf_fn+0xfe>
    85fa:	68 94       	set
    85fc:	90 f8       	bld	r9, 0
    85fe:	f3 01       	movw	r30, r6
    8600:	58 2d       	mov	r21, r8
    8602:	0e 94 6b ec 	call	0x1d8d6	; 0x1d8d6 <__xload_1>
    8606:	6e 32       	cpi	r22, 0x2E	; 46
    8608:	59 f5       	brne	.+86     	; 0x8660 <_printf_fn+0x196>
    860a:	2f ef       	ldi	r18, 0xFF	; 255
    860c:	62 1a       	sub	r6, r18
    860e:	72 0a       	sbc	r7, r18
    8610:	82 0a       	sbc	r8, r18
    8612:	a1 96       	adiw	r28, 0x21	; 33
    8614:	1f ae       	std	Y+63, r1	; 0x3f
    8616:	1e ae       	std	Y+62, r1	; 0x3e
    8618:	a1 97       	sbiw	r28, 0x21	; 33
    861a:	2a e0       	ldi	r18, 0x0A	; 10
    861c:	f3 01       	movw	r30, r6
    861e:	58 2d       	mov	r21, r8
    8620:	0e 94 6b ec 	call	0x1d8d6	; 0x1d8d6 <__xload_1>
    8624:	70 e0       	ldi	r23, 0x00	; 0
    8626:	cb 01       	movw	r24, r22
    8628:	c0 97       	sbiw	r24, 0x30	; 48
    862a:	0a 97       	sbiw	r24, 0x0a	; 10
    862c:	b0 f4       	brcc	.+44     	; 0x865a <_printf_fn+0x190>
    862e:	3f ef       	ldi	r19, 0xFF	; 255
    8630:	63 1a       	sub	r6, r19
    8632:	73 0a       	sbc	r7, r19
    8634:	83 0a       	sbc	r8, r19
    8636:	a1 96       	adiw	r28, 0x21	; 33
    8638:	4e ad       	ldd	r20, Y+62	; 0x3e
    863a:	5f ad       	ldd	r21, Y+63	; 0x3f
    863c:	a1 97       	sbiw	r28, 0x21	; 33
    863e:	24 9f       	mul	r18, r20
    8640:	c0 01       	movw	r24, r0
    8642:	25 9f       	mul	r18, r21
    8644:	90 0d       	add	r25, r0
    8646:	11 24       	eor	r1, r1
    8648:	68 0f       	add	r22, r24
    864a:	79 1f       	adc	r23, r25
    864c:	cb 01       	movw	r24, r22
    864e:	c0 97       	sbiw	r24, 0x30	; 48
    8650:	a1 96       	adiw	r28, 0x21	; 33
    8652:	9f af       	std	Y+63, r25	; 0x3f
    8654:	8e af       	std	Y+62, r24	; 0x3e
    8656:	a1 97       	sbiw	r28, 0x21	; 33
    8658:	e1 cf       	rjmp	.-62     	; 0x861c <_printf_fn+0x152>
    865a:	68 94       	set
    865c:	91 f8       	bld	r9, 1
    865e:	04 c0       	rjmp	.+8      	; 0x8668 <_printf_fn+0x19e>
    8660:	a1 96       	adiw	r28, 0x21	; 33
    8662:	1f ae       	std	Y+63, r1	; 0x3f
    8664:	1e ae       	std	Y+62, r1	; 0x3e
    8666:	a1 97       	sbiw	r28, 0x21	; 33
    8668:	f3 01       	movw	r30, r6
    866a:	58 2d       	mov	r21, r8
    866c:	0e 94 6b ec 	call	0x1d8d6	; 0x1d8d6 <__xload_1>
    8670:	69 34       	cpi	r22, 0x49	; 73
    8672:	09 f0       	breq	.+2      	; 0x8676 <_printf_fn+0x1ac>
    8674:	45 c0       	rjmp	.+138    	; 0x8700 <_printf_fn+0x236>
    8676:	9f ef       	ldi	r25, 0xFF	; 255
    8678:	69 1a       	sub	r6, r25
    867a:	79 0a       	sbc	r7, r25
    867c:	89 0a       	sbc	r8, r25
    867e:	6f 96       	adiw	r28, 0x1f	; 31
    8680:	1f ae       	std	Y+63, r1	; 0x3f
    8682:	1e ae       	std	Y+62, r1	; 0x3e
    8684:	6f 97       	sbiw	r28, 0x1f	; 31
    8686:	2a e0       	ldi	r18, 0x0A	; 10
    8688:	f3 01       	movw	r30, r6
    868a:	58 2d       	mov	r21, r8
    868c:	0e 94 6b ec 	call	0x1d8d6	; 0x1d8d6 <__xload_1>
    8690:	70 e0       	ldi	r23, 0x00	; 0
    8692:	cb 01       	movw	r24, r22
    8694:	c0 97       	sbiw	r24, 0x30	; 48
    8696:	0a 97       	sbiw	r24, 0x0a	; 10
    8698:	b8 f4       	brcc	.+46     	; 0x86c8 <_printf_fn+0x1fe>
    869a:	af ef       	ldi	r26, 0xFF	; 255
    869c:	6a 1a       	sub	r6, r26
    869e:	7a 0a       	sbc	r7, r26
    86a0:	8a 0a       	sbc	r8, r26
    86a2:	6f 96       	adiw	r28, 0x1f	; 31
    86a4:	ee ad       	ldd	r30, Y+62	; 0x3e
    86a6:	ff ad       	ldd	r31, Y+63	; 0x3f
    86a8:	6f 97       	sbiw	r28, 0x1f	; 31
    86aa:	2e 9f       	mul	r18, r30
    86ac:	c0 01       	movw	r24, r0
    86ae:	2f 9f       	mul	r18, r31
    86b0:	90 0d       	add	r25, r0
    86b2:	11 24       	eor	r1, r1
    86b4:	68 0f       	add	r22, r24
    86b6:	79 1f       	adc	r23, r25
    86b8:	ab 01       	movw	r20, r22
    86ba:	40 53       	subi	r20, 0x30	; 48
    86bc:	51 09       	sbc	r21, r1
    86be:	6f 96       	adiw	r28, 0x1f	; 31
    86c0:	5f af       	std	Y+63, r21	; 0x3f
    86c2:	4e af       	std	Y+62, r20	; 0x3e
    86c4:	6f 97       	sbiw	r28, 0x1f	; 31
    86c6:	e0 cf       	rjmp	.-64     	; 0x8688 <_printf_fn+0x1be>
    86c8:	6f 96       	adiw	r28, 0x1f	; 31
    86ca:	8e ad       	ldd	r24, Y+62	; 0x3e
    86cc:	9f ad       	ldd	r25, Y+63	; 0x3f
    86ce:	6f 97       	sbiw	r28, 0x1f	; 31
    86d0:	00 97       	sbiw	r24, 0x00	; 0
    86d2:	09 f4       	brne	.+2      	; 0x86d6 <_printf_fn+0x20c>
    86d4:	4f c0       	rjmp	.+158    	; 0x8774 <_printf_fn+0x2aa>
    86d6:	87 70       	andi	r24, 0x07	; 7
    86d8:	99 27       	eor	r25, r25
    86da:	89 2b       	or	r24, r25
    86dc:	09 f0       	breq	.+2      	; 0x86e0 <_printf_fn+0x216>
    86de:	46 c0       	rjmp	.+140    	; 0x876c <_printf_fn+0x2a2>
    86e0:	6f 96       	adiw	r28, 0x1f	; 31
    86e2:	ae ad       	ldd	r26, Y+62	; 0x3e
    86e4:	bf ad       	ldd	r27, Y+63	; 0x3f
    86e6:	6f 97       	sbiw	r28, 0x1f	; 31
    86e8:	83 e0       	ldi	r24, 0x03	; 3
    86ea:	b5 95       	asr	r27
    86ec:	a7 95       	ror	r26
    86ee:	8a 95       	dec	r24
    86f0:	e1 f7       	brne	.-8      	; 0x86ea <_printf_fn+0x220>
    86f2:	6f 96       	adiw	r28, 0x1f	; 31
    86f4:	bf af       	std	Y+63, r27	; 0x3f
    86f6:	ae af       	std	Y+62, r26	; 0x3e
    86f8:	6f 97       	sbiw	r28, 0x1f	; 31
    86fa:	ab 2b       	or	r26, r27
    86fc:	d9 f1       	breq	.+118    	; 0x8774 <_printf_fn+0x2aa>
    86fe:	27 c0       	rjmp	.+78     	; 0x874e <_printf_fn+0x284>
    8700:	68 36       	cpi	r22, 0x68	; 104
    8702:	29 f4       	brne	.+10     	; 0x870e <_printf_fn+0x244>
    8704:	bf ef       	ldi	r27, 0xFF	; 255
    8706:	6b 1a       	sub	r6, r27
    8708:	7b 0a       	sbc	r7, r27
    870a:	8b 0a       	sbc	r8, r27
    870c:	c2 c2       	rjmp	.+1412   	; 0x8c92 <_printf_fn+0x7c8>
    870e:	6c 36       	cpi	r22, 0x6C	; 108
    8710:	09 f0       	breq	.+2      	; 0x8714 <_printf_fn+0x24a>
    8712:	bf c2       	rjmp	.+1406   	; 0x8c92 <_printf_fn+0x7c8>
    8714:	a8 2d       	mov	r26, r8
    8716:	c3 01       	movw	r24, r6
    8718:	01 96       	adiw	r24, 0x01	; 1
    871a:	a1 1d       	adc	r26, r1
    871c:	fc 01       	movw	r30, r24
    871e:	5a 2f       	mov	r21, r26
    8720:	0e 94 6b ec 	call	0x1d8d6	; 0x1d8d6 <__xload_1>
    8724:	6c 36       	cpi	r22, 0x6C	; 108
    8726:	49 f0       	breq	.+18     	; 0x873a <_printf_fn+0x270>
    8728:	3c 01       	movw	r6, r24
    872a:	8a 2e       	mov	r8, r26
    872c:	24 e0       	ldi	r18, 0x04	; 4
    872e:	30 e0       	ldi	r19, 0x00	; 0
    8730:	6f 96       	adiw	r28, 0x1f	; 31
    8732:	3f af       	std	Y+63, r19	; 0x3f
    8734:	2e af       	std	Y+62, r18	; 0x3e
    8736:	6f 97       	sbiw	r28, 0x1f	; 31
    8738:	0a c0       	rjmp	.+20     	; 0x874e <_printf_fn+0x284>
    873a:	32 e0       	ldi	r19, 0x02	; 2
    873c:	63 0e       	add	r6, r19
    873e:	71 1c       	adc	r7, r1
    8740:	81 1c       	adc	r8, r1
    8742:	48 e0       	ldi	r20, 0x08	; 8
    8744:	50 e0       	ldi	r21, 0x00	; 0
    8746:	6f 96       	adiw	r28, 0x1f	; 31
    8748:	5f af       	std	Y+63, r21	; 0x3f
    874a:	4e af       	std	Y+62, r20	; 0x3e
    874c:	6f 97       	sbiw	r28, 0x1f	; 31
    874e:	f3 01       	movw	r30, r6
    8750:	58 2d       	mov	r21, r8
    8752:	0e 94 6b ec 	call	0x1d8d6	; 0x1d8d6 <__xload_1>
    8756:	86 2f       	mov	r24, r22
    8758:	90 e0       	ldi	r25, 0x00	; 0
    875a:	a3 96       	adiw	r28, 0x23	; 35
    875c:	9f af       	std	Y+63, r25	; 0x3f
    875e:	8e af       	std	Y+62, r24	; 0x3e
    8760:	a3 97       	sbiw	r28, 0x23	; 35
    8762:	84 36       	cpi	r24, 0x64	; 100
    8764:	91 05       	cpc	r25, r1
    8766:	09 f4       	brne	.+2      	; 0x876a <_printf_fn+0x2a0>
    8768:	9b c2       	rjmp	.+1334   	; 0x8ca0 <_printf_fn+0x7d6>
    876a:	08 c0       	rjmp	.+16     	; 0x877c <_printf_fn+0x2b2>
    876c:	6f 96       	adiw	r28, 0x1f	; 31
    876e:	1f ae       	std	Y+63, r1	; 0x3f
    8770:	1e ae       	std	Y+62, r1	; 0x3e
    8772:	6f 97       	sbiw	r28, 0x1f	; 31
    8774:	a3 96       	adiw	r28, 0x23	; 35
    8776:	1f ae       	std	Y+63, r1	; 0x3f
    8778:	1e ae       	std	Y+62, r1	; 0x3e
    877a:	a3 97       	sbiw	r28, 0x23	; 35
    877c:	31 e0       	ldi	r19, 0x01	; 1
    877e:	20 e0       	ldi	r18, 0x00	; 0
    8780:	a3 96       	adiw	r28, 0x23	; 35
    8782:	ae ad       	ldd	r26, Y+62	; 0x3e
    8784:	bf ad       	ldd	r27, Y+63	; 0x3f
    8786:	a3 97       	sbiw	r28, 0x23	; 35
    8788:	a4 34       	cpi	r26, 0x44	; 68
    878a:	b1 05       	cpc	r27, r1
    878c:	09 f0       	breq	.+2      	; 0x8790 <_printf_fn+0x2c6>
    878e:	30 e0       	ldi	r19, 0x00	; 0
    8790:	83 2f       	mov	r24, r19
    8792:	92 2f       	mov	r25, r18
    8794:	a3 96       	adiw	r28, 0x23	; 35
    8796:	ee ad       	ldd	r30, Y+62	; 0x3e
    8798:	ff ad       	ldd	r31, Y+63	; 0x3f
    879a:	a3 97       	sbiw	r28, 0x23	; 35
    879c:	e2 54       	subi	r30, 0x42	; 66
    879e:	f1 09       	sbc	r31, r1
    87a0:	e7 33       	cpi	r30, 0x37	; 55
    87a2:	f1 05       	cpc	r31, r1
    87a4:	08 f0       	brcs	.+2      	; 0x87a8 <_printf_fn+0x2de>
    87a6:	65 c1       	rjmp	.+714    	; 0x8a72 <_printf_fn+0x5a8>
    87a8:	ea 5b       	subi	r30, 0xBA	; 186
    87aa:	ff 4f       	sbci	r31, 0xFF	; 255
    87ac:	0c 94 05 ec 	jmp	0x1d80a	; 0x1d80a <__tablejump2__>
    87b0:	e2 e0       	ldi	r30, 0x02	; 2
    87b2:	f0 e0       	ldi	r31, 0x00	; 0
    87b4:	6f 96       	adiw	r28, 0x1f	; 31
    87b6:	ff af       	std	Y+63, r31	; 0x3f
    87b8:	ee af       	std	Y+62, r30	; 0x3e
    87ba:	6f 97       	sbiw	r28, 0x1f	; 31
    87bc:	29 2d       	mov	r18, r9
    87be:	28 72       	andi	r18, 0x28	; 40
    87c0:	28 32       	cpi	r18, 0x28	; 40
    87c2:	11 f4       	brne	.+4      	; 0x87c8 <_printf_fn+0x2fe>
    87c4:	e8 94       	clt
    87c6:	95 f8       	bld	r9, 5
    87c8:	29 2d       	mov	r18, r9
    87ca:	22 72       	andi	r18, 0x22	; 34
    87cc:	22 32       	cpi	r18, 0x22	; 34
    87ce:	11 f4       	brne	.+4      	; 0x87d4 <_printf_fn+0x30a>
    87d0:	e8 94       	clt
    87d2:	95 f8       	bld	r9, 5
    87d4:	29 2d       	mov	r18, r9
    87d6:	21 72       	andi	r18, 0x21	; 33
    87d8:	21 32       	cpi	r18, 0x21	; 33
    87da:	59 f4       	brne	.+22     	; 0x87f2 <_printf_fn+0x328>
    87dc:	a1 96       	adiw	r28, 0x21	; 33
    87de:	2e ad       	ldd	r18, Y+62	; 0x3e
    87e0:	3f ad       	ldd	r19, Y+63	; 0x3f
    87e2:	a1 97       	sbiw	r28, 0x21	; 33
    87e4:	24 15       	cp	r18, r4
    87e6:	35 05       	cpc	r19, r5
    87e8:	24 f4       	brge	.+8      	; 0x87f2 <_printf_fn+0x328>
    87ea:	a1 96       	adiw	r28, 0x21	; 33
    87ec:	5f ae       	std	Y+63, r5	; 0x3f
    87ee:	4e ae       	std	Y+62, r4	; 0x3e
    87f0:	a1 97       	sbiw	r28, 0x21	; 33
    87f2:	29 2d       	mov	r18, r9
    87f4:	23 72       	andi	r18, 0x23	; 35
    87f6:	23 32       	cpi	r18, 0x23	; 35
    87f8:	59 f4       	brne	.+22     	; 0x8810 <_printf_fn+0x346>
    87fa:	a1 96       	adiw	r28, 0x21	; 33
    87fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    87fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    8800:	a1 97       	sbiw	r28, 0x21	; 33
    8802:	44 15       	cp	r20, r4
    8804:	55 05       	cpc	r21, r5
    8806:	24 f4       	brge	.+8      	; 0x8810 <_printf_fn+0x346>
    8808:	a1 96       	adiw	r28, 0x21	; 33
    880a:	5f ae       	std	Y+63, r5	; 0x3f
    880c:	4e ae       	std	Y+62, r4	; 0x3e
    880e:	a1 97       	sbiw	r28, 0x21	; 33
    8810:	e8 94       	clt
    8812:	94 f8       	bld	r9, 4
    8814:	e8 94       	clt
    8816:	92 f8       	bld	r9, 2
    8818:	e8 94       	clt
    881a:	96 f8       	bld	r9, 6
    881c:	6f 96       	adiw	r28, 0x1f	; 31
    881e:	ae ad       	ldd	r26, Y+62	; 0x3e
    8820:	bf ad       	ldd	r27, Y+63	; 0x3f
    8822:	6f 97       	sbiw	r28, 0x1f	; 31
    8824:	12 97       	sbiw	r26, 0x02	; 2
    8826:	29 f5       	brne	.+74     	; 0x8872 <_printf_fn+0x3a8>
    8828:	51 01       	movw	r10, r2
    882a:	b2 e0       	ldi	r27, 0x02	; 2
    882c:	ab 0e       	add	r10, r27
    882e:	b1 1c       	adc	r11, r1
    8830:	f1 01       	movw	r30, r2
    8832:	80 81       	ld	r24, Z
    8834:	91 81       	ldd	r25, Z+1	; 0x01
    8836:	65 96       	adiw	r28, 0x15	; 21
    8838:	9f af       	std	Y+63, r25	; 0x3f
    883a:	8e af       	std	Y+62, r24	; 0x3e
    883c:	65 97       	sbiw	r28, 0x15	; 21
    883e:	a3 96       	adiw	r28, 0x23	; 35
    8840:	2e ad       	ldd	r18, Y+62	; 0x3e
    8842:	3f ad       	ldd	r19, Y+63	; 0x3f
    8844:	a3 97       	sbiw	r28, 0x23	; 35
    8846:	24 34       	cpi	r18, 0x44	; 68
    8848:	31 05       	cpc	r19, r1
    884a:	09 f0       	breq	.+2      	; 0x884e <_printf_fn+0x384>
    884c:	c0 c0       	rjmp	.+384    	; 0x89ce <_printf_fn+0x504>
    884e:	97 ff       	sbrs	r25, 7
    8850:	b8 c0       	rjmp	.+368    	; 0x89c2 <_printf_fn+0x4f8>
    8852:	68 94       	set
    8854:	96 f8       	bld	r9, 6
    8856:	91 95       	neg	r25
    8858:	81 95       	neg	r24
    885a:	91 09       	sbc	r25, r1
    885c:	65 96       	adiw	r28, 0x15	; 21
    885e:	9f af       	std	Y+63, r25	; 0x3f
    8860:	8e af       	std	Y+62, r24	; 0x3e
    8862:	65 97       	sbiw	r28, 0x15	; 21
    8864:	42 e0       	ldi	r20, 0x02	; 2
    8866:	50 e0       	ldi	r21, 0x00	; 0
    8868:	6f 96       	adiw	r28, 0x1f	; 31
    886a:	5f af       	std	Y+63, r21	; 0x3f
    886c:	4e af       	std	Y+62, r20	; 0x3e
    886e:	6f 97       	sbiw	r28, 0x1f	; 31
    8870:	ae c0       	rjmp	.+348    	; 0x89ce <_printf_fn+0x504>
    8872:	6f 96       	adiw	r28, 0x1f	; 31
    8874:	ae ad       	ldd	r26, Y+62	; 0x3e
    8876:	bf ad       	ldd	r27, Y+63	; 0x3f
    8878:	6f 97       	sbiw	r28, 0x1f	; 31
    887a:	14 97       	sbiw	r26, 0x04	; 4
    887c:	59 f5       	brne	.+86     	; 0x88d4 <_printf_fn+0x40a>
    887e:	51 01       	movw	r10, r2
    8880:	b4 e0       	ldi	r27, 0x04	; 4
    8882:	ab 0e       	add	r10, r27
    8884:	b1 1c       	adc	r11, r1
    8886:	f1 01       	movw	r30, r2
    8888:	80 81       	ld	r24, Z
    888a:	91 81       	ldd	r25, Z+1	; 0x01
    888c:	a2 81       	ldd	r26, Z+2	; 0x02
    888e:	b3 81       	ldd	r27, Z+3	; 0x03
    8890:	2f 96       	adiw	r28, 0x0f	; 15
    8892:	8c af       	std	Y+60, r24	; 0x3c
    8894:	9d af       	std	Y+61, r25	; 0x3d
    8896:	ae af       	std	Y+62, r26	; 0x3e
    8898:	bf af       	std	Y+63, r27	; 0x3f
    889a:	2f 97       	sbiw	r28, 0x0f	; 15
    889c:	a3 96       	adiw	r28, 0x23	; 35
    889e:	2e ad       	ldd	r18, Y+62	; 0x3e
    88a0:	3f ad       	ldd	r19, Y+63	; 0x3f
    88a2:	a3 97       	sbiw	r28, 0x23	; 35
    88a4:	24 34       	cpi	r18, 0x44	; 68
    88a6:	31 05       	cpc	r19, r1
    88a8:	09 f0       	breq	.+2      	; 0x88ac <_printf_fn+0x3e2>
    88aa:	9e c0       	rjmp	.+316    	; 0x89e8 <_printf_fn+0x51e>
    88ac:	b7 ff       	sbrs	r27, 7
    88ae:	96 c0       	rjmp	.+300    	; 0x89dc <_printf_fn+0x512>
    88b0:	68 94       	set
    88b2:	96 f8       	bld	r9, 6
    88b4:	b0 95       	com	r27
    88b6:	a0 95       	com	r26
    88b8:	90 95       	com	r25
    88ba:	81 95       	neg	r24
    88bc:	9f 4f       	sbci	r25, 0xFF	; 255
    88be:	af 4f       	sbci	r26, 0xFF	; 255
    88c0:	bf 4f       	sbci	r27, 0xFF	; 255
    88c2:	2f 96       	adiw	r28, 0x0f	; 15
    88c4:	8c af       	std	Y+60, r24	; 0x3c
    88c6:	9d af       	std	Y+61, r25	; 0x3d
    88c8:	ae af       	std	Y+62, r26	; 0x3e
    88ca:	bf af       	std	Y+63, r27	; 0x3f
    88cc:	2f 97       	sbiw	r28, 0x0f	; 15
    88ce:	86 c0       	rjmp	.+268    	; 0x89dc <_printf_fn+0x512>
    88d0:	81 e0       	ldi	r24, 0x01	; 1
    88d2:	90 e0       	ldi	r25, 0x00	; 0
    88d4:	6f 96       	adiw	r28, 0x1f	; 31
    88d6:	ae ad       	ldd	r26, Y+62	; 0x3e
    88d8:	bf ad       	ldd	r27, Y+63	; 0x3f
    88da:	6f 97       	sbiw	r28, 0x1f	; 31
    88dc:	51 01       	movw	r10, r2
    88de:	18 97       	sbiw	r26, 0x08	; 8
    88e0:	09 f0       	breq	.+2      	; 0x88e4 <_printf_fn+0x41a>
    88e2:	89 c0       	rjmp	.+274    	; 0x89f6 <_printf_fn+0x52c>
    88e4:	b8 e0       	ldi	r27, 0x08	; 8
    88e6:	ab 0e       	add	r10, r27
    88e8:	b1 1c       	adc	r11, r1
    88ea:	f1 01       	movw	r30, r2
    88ec:	f0 81       	ld	r31, Z
    88ee:	aa 96       	adiw	r28, 0x2a	; 42
    88f0:	ff af       	std	Y+63, r31	; 0x3f
    88f2:	aa 97       	sbiw	r28, 0x2a	; 42
    88f4:	d1 01       	movw	r26, r2
    88f6:	11 96       	adiw	r26, 0x01	; 1
    88f8:	fc 90       	ld	r15, X
    88fa:	11 97       	sbiw	r26, 0x01	; 1
    88fc:	12 96       	adiw	r26, 0x02	; 2
    88fe:	0c 91       	ld	r16, X
    8900:	12 97       	sbiw	r26, 0x02	; 2
    8902:	13 96       	adiw	r26, 0x03	; 3
    8904:	1c 91       	ld	r17, X
    8906:	13 97       	sbiw	r26, 0x03	; 3
    8908:	14 96       	adiw	r26, 0x04	; 4
    890a:	bc 91       	ld	r27, X
    890c:	f1 01       	movw	r30, r2
    890e:	f5 81       	ldd	r31, Z+5	; 0x05
    8910:	ab 96       	adiw	r28, 0x2b	; 43
    8912:	ff af       	std	Y+63, r31	; 0x3f
    8914:	ab 97       	sbiw	r28, 0x2b	; 43
    8916:	f1 01       	movw	r30, r2
    8918:	f6 81       	ldd	r31, Z+6	; 0x06
    891a:	ac 96       	adiw	r28, 0x2c	; 44
    891c:	ff af       	std	Y+63, r31	; 0x3f
    891e:	ac 97       	sbiw	r28, 0x2c	; 44
    8920:	f1 01       	movw	r30, r2
    8922:	37 80       	ldd	r3, Z+7	; 0x07
    8924:	aa 96       	adiw	r28, 0x2a	; 42
    8926:	ff ad       	ldd	r31, Y+63	; 0x3f
    8928:	aa 97       	sbiw	r28, 0x2a	; 42
    892a:	24 96       	adiw	r28, 0x04	; 4
    892c:	ff af       	std	Y+63, r31	; 0x3f
    892e:	24 97       	sbiw	r28, 0x04	; 4
    8930:	25 96       	adiw	r28, 0x05	; 5
    8932:	ff ae       	std	Y+63, r15	; 0x3f
    8934:	25 97       	sbiw	r28, 0x05	; 5
    8936:	26 96       	adiw	r28, 0x06	; 6
    8938:	0f af       	std	Y+63, r16	; 0x3f
    893a:	26 97       	sbiw	r28, 0x06	; 6
    893c:	27 96       	adiw	r28, 0x07	; 7
    893e:	1f af       	std	Y+63, r17	; 0x3f
    8940:	27 97       	sbiw	r28, 0x07	; 7
    8942:	28 96       	adiw	r28, 0x08	; 8
    8944:	bf af       	std	Y+63, r27	; 0x3f
    8946:	28 97       	sbiw	r28, 0x08	; 8
    8948:	ab 96       	adiw	r28, 0x2b	; 43
    894a:	ef ad       	ldd	r30, Y+63	; 0x3f
    894c:	ab 97       	sbiw	r28, 0x2b	; 43
    894e:	29 96       	adiw	r28, 0x09	; 9
    8950:	ef af       	std	Y+63, r30	; 0x3f
    8952:	29 97       	sbiw	r28, 0x09	; 9
    8954:	ac 96       	adiw	r28, 0x2c	; 44
    8956:	ff ad       	ldd	r31, Y+63	; 0x3f
    8958:	ac 97       	sbiw	r28, 0x2c	; 44
    895a:	2a 96       	adiw	r28, 0x0a	; 10
    895c:	ff af       	std	Y+63, r31	; 0x3f
    895e:	2a 97       	sbiw	r28, 0x0a	; 10
    8960:	2b 96       	adiw	r28, 0x0b	; 11
    8962:	3f ae       	std	Y+63, r3	; 0x3f
    8964:	2b 97       	sbiw	r28, 0x0b	; 11
    8966:	89 2b       	or	r24, r25
    8968:	09 f4       	brne	.+2      	; 0x896c <_printf_fn+0x4a2>
    896a:	50 c0       	rjmp	.+160    	; 0x8a0c <_printf_fn+0x542>
    896c:	aa 96       	adiw	r28, 0x2a	; 42
    896e:	2f ad       	ldd	r18, Y+63	; 0x3f
    8970:	aa 97       	sbiw	r28, 0x2a	; 42
    8972:	3f 2d       	mov	r19, r15
    8974:	a8 01       	movw	r20, r16
    8976:	6b 2f       	mov	r22, r27
    8978:	7e 2f       	mov	r23, r30
    897a:	8f 2f       	mov	r24, r31
    897c:	93 2d       	mov	r25, r3
    897e:	a0 e0       	ldi	r26, 0x00	; 0
    8980:	0e 94 72 ec 	call	0x1d8e4	; 0x1d8e4 <__cmpdi2_s8>
    8984:	0c f0       	brlt	.+2      	; 0x8988 <_printf_fn+0x4be>
    8986:	42 c0       	rjmp	.+132    	; 0x8a0c <_printf_fn+0x542>
    8988:	68 94       	set
    898a:	96 f8       	bld	r9, 6
    898c:	0e 94 24 ec 	call	0x1d848	; 0x1d848 <__negdi2>
    8990:	24 96       	adiw	r28, 0x04	; 4
    8992:	2f af       	std	Y+63, r18	; 0x3f
    8994:	24 97       	sbiw	r28, 0x04	; 4
    8996:	25 96       	adiw	r28, 0x05	; 5
    8998:	3f af       	std	Y+63, r19	; 0x3f
    899a:	25 97       	sbiw	r28, 0x05	; 5
    899c:	26 96       	adiw	r28, 0x06	; 6
    899e:	4f af       	std	Y+63, r20	; 0x3f
    89a0:	26 97       	sbiw	r28, 0x06	; 6
    89a2:	27 96       	adiw	r28, 0x07	; 7
    89a4:	5f af       	std	Y+63, r21	; 0x3f
    89a6:	27 97       	sbiw	r28, 0x07	; 7
    89a8:	28 96       	adiw	r28, 0x08	; 8
    89aa:	6f af       	std	Y+63, r22	; 0x3f
    89ac:	28 97       	sbiw	r28, 0x08	; 8
    89ae:	29 96       	adiw	r28, 0x09	; 9
    89b0:	7f af       	std	Y+63, r23	; 0x3f
    89b2:	29 97       	sbiw	r28, 0x09	; 9
    89b4:	2a 96       	adiw	r28, 0x0a	; 10
    89b6:	8f af       	std	Y+63, r24	; 0x3f
    89b8:	2a 97       	sbiw	r28, 0x0a	; 10
    89ba:	2b 96       	adiw	r28, 0x0b	; 11
    89bc:	9f af       	std	Y+63, r25	; 0x3f
    89be:	2b 97       	sbiw	r28, 0x0b	; 11
    89c0:	25 c0       	rjmp	.+74     	; 0x8a0c <_printf_fn+0x542>
    89c2:	22 e0       	ldi	r18, 0x02	; 2
    89c4:	30 e0       	ldi	r19, 0x00	; 0
    89c6:	6f 96       	adiw	r28, 0x1f	; 31
    89c8:	3f af       	std	Y+63, r19	; 0x3f
    89ca:	2e af       	std	Y+62, r18	; 0x3e
    89cc:	6f 97       	sbiw	r28, 0x1f	; 31
    89ce:	6c 96       	adiw	r28, 0x1c	; 28
    89d0:	8f ad       	ldd	r24, Y+63	; 0x3f
    89d2:	6c 97       	sbiw	r28, 0x1c	; 28
    89d4:	6d 96       	adiw	r28, 0x1d	; 29
    89d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    89d8:	6d 97       	sbiw	r28, 0x1d	; 29
    89da:	1e c0       	rjmp	.+60     	; 0x8a18 <_printf_fn+0x54e>
    89dc:	44 e0       	ldi	r20, 0x04	; 4
    89de:	50 e0       	ldi	r21, 0x00	; 0
    89e0:	6f 96       	adiw	r28, 0x1f	; 31
    89e2:	5f af       	std	Y+63, r21	; 0x3f
    89e4:	4e af       	std	Y+62, r20	; 0x3e
    89e6:	6f 97       	sbiw	r28, 0x1f	; 31
    89e8:	6a 96       	adiw	r28, 0x1a	; 26
    89ea:	8f ad       	ldd	r24, Y+63	; 0x3f
    89ec:	6a 97       	sbiw	r28, 0x1a	; 26
    89ee:	6b 96       	adiw	r28, 0x1b	; 27
    89f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    89f2:	6b 97       	sbiw	r28, 0x1b	; 27
    89f4:	11 c0       	rjmp	.+34     	; 0x8a18 <_printf_fn+0x54e>
    89f6:	66 96       	adiw	r28, 0x16	; 22
    89f8:	8f ad       	ldd	r24, Y+63	; 0x3f
    89fa:	66 97       	sbiw	r28, 0x16	; 22
    89fc:	67 96       	adiw	r28, 0x17	; 23
    89fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a00:	67 97       	sbiw	r28, 0x17	; 23
    8a02:	a3 96       	adiw	r28, 0x23	; 35
    8a04:	1f ae       	std	Y+63, r1	; 0x3f
    8a06:	1e ae       	std	Y+62, r1	; 0x3e
    8a08:	a3 97       	sbiw	r28, 0x23	; 35
    8a0a:	06 c0       	rjmp	.+12     	; 0x8a18 <_printf_fn+0x54e>
    8a0c:	68 96       	adiw	r28, 0x18	; 24
    8a0e:	8f ad       	ldd	r24, Y+63	; 0x3f
    8a10:	68 97       	sbiw	r28, 0x18	; 24
    8a12:	69 96       	adiw	r28, 0x19	; 25
    8a14:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a16:	69 97       	sbiw	r28, 0x19	; 25
    8a18:	5f ef       	ldi	r21, 0xFF	; 255
    8a1a:	65 1a       	sub	r6, r21
    8a1c:	75 0a       	sbc	r7, r21
    8a1e:	85 0a       	sbc	r8, r21
    8a20:	15 01       	movw	r2, r10
    8a22:	2d c0       	rjmp	.+90     	; 0x8a7e <_printf_fn+0x5b4>
    8a24:	91 fc       	sbrc	r9, 1
    8a26:	08 c0       	rjmp	.+16     	; 0x8a38 <_printf_fn+0x56e>
    8a28:	68 94       	set
    8a2a:	91 f8       	bld	r9, 1
    8a2c:	86 e0       	ldi	r24, 0x06	; 6
    8a2e:	90 e0       	ldi	r25, 0x00	; 0
    8a30:	a1 96       	adiw	r28, 0x21	; 33
    8a32:	9f af       	std	Y+63, r25	; 0x3f
    8a34:	8e af       	std	Y+62, r24	; 0x3e
    8a36:	a1 97       	sbiw	r28, 0x21	; 33
    8a38:	d1 01       	movw	r26, r2
    8a3a:	2d 91       	ld	r18, X+
    8a3c:	3d 91       	ld	r19, X+
    8a3e:	4d 91       	ld	r20, X+
    8a40:	5c 91       	ld	r21, X
    8a42:	a9 96       	adiw	r28, 0x29	; 41
    8a44:	2c af       	std	Y+60, r18	; 0x3c
    8a46:	3d af       	std	Y+61, r19	; 0x3d
    8a48:	4e af       	std	Y+62, r20	; 0x3e
    8a4a:	5f af       	std	Y+63, r21	; 0x3f
    8a4c:	a9 97       	sbiw	r28, 0x29	; 41
    8a4e:	bf ef       	ldi	r27, 0xFF	; 255
    8a50:	6b 1a       	sub	r6, r27
    8a52:	7b 0a       	sbc	r7, r27
    8a54:	8b 0a       	sbc	r8, r27
    8a56:	f1 01       	movw	r30, r2
    8a58:	34 96       	adiw	r30, 0x04	; 4
    8a5a:	1f 01       	movw	r2, r30
    8a5c:	0a c0       	rjmp	.+20     	; 0x8a72 <_printf_fn+0x5a8>
    8a5e:	ff ef       	ldi	r31, 0xFF	; 255
    8a60:	6f 1a       	sub	r6, r31
    8a62:	7f 0a       	sbc	r7, r31
    8a64:	8f 0a       	sbc	r8, r31
    8a66:	b0 c0       	rjmp	.+352    	; 0x8bc8 <_printf_fn+0x6fe>
    8a68:	2f ef       	ldi	r18, 0xFF	; 255
    8a6a:	62 1a       	sub	r6, r18
    8a6c:	72 0a       	sbc	r7, r18
    8a6e:	82 0a       	sbc	r8, r18
    8a70:	b8 c0       	rjmp	.+368    	; 0x8be2 <_printf_fn+0x718>
    8a72:	66 96       	adiw	r28, 0x16	; 22
    8a74:	8f ad       	ldd	r24, Y+63	; 0x3f
    8a76:	66 97       	sbiw	r28, 0x16	; 22
    8a78:	67 96       	adiw	r28, 0x17	; 23
    8a7a:	9f ad       	ldd	r25, Y+63	; 0x3f
    8a7c:	67 97       	sbiw	r28, 0x17	; 23
    8a7e:	a3 96       	adiw	r28, 0x23	; 35
    8a80:	ee ad       	ldd	r30, Y+62	; 0x3e
    8a82:	ff ad       	ldd	r31, Y+63	; 0x3f
    8a84:	a3 97       	sbiw	r28, 0x23	; 35
    8a86:	e2 54       	subi	r30, 0x42	; 66
    8a88:	f1 09       	sbc	r31, r1
    8a8a:	e7 33       	cpi	r30, 0x37	; 55
    8a8c:	f1 05       	cpc	r31, r1
    8a8e:	08 f0       	brcs	.+2      	; 0x8a92 <_printf_fn+0x5c8>
    8a90:	f9 c0       	rjmp	.+498    	; 0x8c84 <_printf_fn+0x7ba>
    8a92:	e3 58       	subi	r30, 0x83	; 131
    8a94:	ff 4f       	sbci	r31, 0xFF	; 255
    8a96:	0c 94 05 ec 	jmp	0x1d80a	; 0x1d80a <__tablejump2__>
    8a9a:	e8 94       	clt
    8a9c:	94 f8       	bld	r9, 4
    8a9e:	e8 94       	clt
    8aa0:	92 f8       	bld	r9, 2
    8aa2:	a9 2c       	mov	r10, r9
    8aa4:	b1 2c       	mov	r11, r1
    8aa6:	a1 96       	adiw	r28, 0x21	; 33
    8aa8:	ce ac       	ldd	r12, Y+62	; 0x3e
    8aaa:	df ac       	ldd	r13, Y+63	; 0x3f
    8aac:	a1 97       	sbiw	r28, 0x21	; 33
    8aae:	72 01       	movw	r14, r4
    8ab0:	0a e0       	ldi	r16, 0x0A	; 10
    8ab2:	10 e0       	ldi	r17, 0x00	; 0
    8ab4:	13 c0       	rjmp	.+38     	; 0x8adc <_printf_fn+0x612>
    8ab6:	a9 2c       	mov	r10, r9
    8ab8:	b1 2c       	mov	r11, r1
    8aba:	a1 96       	adiw	r28, 0x21	; 33
    8abc:	ce ac       	ldd	r12, Y+62	; 0x3e
    8abe:	df ac       	ldd	r13, Y+63	; 0x3f
    8ac0:	a1 97       	sbiw	r28, 0x21	; 33
    8ac2:	72 01       	movw	r14, r4
    8ac4:	02 e0       	ldi	r16, 0x02	; 2
    8ac6:	10 e0       	ldi	r17, 0x00	; 0
    8ac8:	09 c0       	rjmp	.+18     	; 0x8adc <_printf_fn+0x612>
    8aca:	a9 2c       	mov	r10, r9
    8acc:	b1 2c       	mov	r11, r1
    8ace:	a1 96       	adiw	r28, 0x21	; 33
    8ad0:	ce ac       	ldd	r12, Y+62	; 0x3e
    8ad2:	df ac       	ldd	r13, Y+63	; 0x3f
    8ad4:	a1 97       	sbiw	r28, 0x21	; 33
    8ad6:	72 01       	movw	r14, r4
    8ad8:	08 e0       	ldi	r16, 0x08	; 8
    8ada:	10 e0       	ldi	r17, 0x00	; 0
    8adc:	22 e4       	ldi	r18, 0x42	; 66
    8ade:	30 e0       	ldi	r19, 0x00	; 0
    8ae0:	ae 01       	movw	r20, r28
    8ae2:	4f 5f       	subi	r20, 0xFF	; 255
    8ae4:	5f 4f       	sbci	r21, 0xFF	; 255
    8ae6:	6f 96       	adiw	r28, 0x1f	; 31
    8ae8:	6e ad       	ldd	r22, Y+62	; 0x3e
    8aea:	7f ad       	ldd	r23, Y+63	; 0x3f
    8aec:	6f 97       	sbiw	r28, 0x1f	; 31
    8aee:	f3 d9       	rcall	.-3098   	; 0x7ed6 <p_ntoa>
    8af0:	30 c0       	rjmp	.+96     	; 0x8b52 <_printf_fn+0x688>
    8af2:	a9 2c       	mov	r10, r9
    8af4:	b1 2c       	mov	r11, r1
    8af6:	a1 96       	adiw	r28, 0x21	; 33
    8af8:	ce ac       	ldd	r12, Y+62	; 0x3e
    8afa:	df ac       	ldd	r13, Y+63	; 0x3f
    8afc:	a1 97       	sbiw	r28, 0x21	; 33
    8afe:	72 01       	movw	r14, r4
    8b00:	00 e1       	ldi	r16, 0x10	; 16
    8b02:	10 e0       	ldi	r17, 0x00	; 0
    8b04:	22 e4       	ldi	r18, 0x42	; 66
    8b06:	30 e0       	ldi	r19, 0x00	; 0
    8b08:	ae 01       	movw	r20, r28
    8b0a:	4f 5f       	subi	r20, 0xFF	; 255
    8b0c:	5f 4f       	sbci	r21, 0xFF	; 255
    8b0e:	6f 96       	adiw	r28, 0x1f	; 31
    8b10:	6e ad       	ldd	r22, Y+62	; 0x3e
    8b12:	7f ad       	ldd	r23, Y+63	; 0x3f
    8b14:	6f 97       	sbiw	r28, 0x1f	; 31
    8b16:	df d9       	rcall	.-3138   	; 0x7ed6 <p_ntoa>
    8b18:	7c 01       	movw	r14, r24
    8b1a:	a3 96       	adiw	r28, 0x23	; 35
    8b1c:	6e ad       	ldd	r22, Y+62	; 0x3e
    8b1e:	7f ad       	ldd	r23, Y+63	; 0x3f
    8b20:	a3 97       	sbiw	r28, 0x23	; 35
    8b22:	67 7f       	andi	r22, 0xF7	; 247
    8b24:	60 35       	cpi	r22, 0x50	; 80
    8b26:	71 05       	cpc	r23, r1
    8b28:	c9 f5       	brne	.+114    	; 0x8b9c <_printf_fn+0x6d2>
    8b2a:	34 c0       	rjmp	.+104    	; 0x8b94 <_printf_fn+0x6ca>
    8b2c:	c9 2c       	mov	r12, r9
    8b2e:	d1 2c       	mov	r13, r1
    8b30:	a1 96       	adiw	r28, 0x21	; 33
    8b32:	ee ac       	ldd	r14, Y+62	; 0x3e
    8b34:	ff ac       	ldd	r15, Y+63	; 0x3f
    8b36:	a1 97       	sbiw	r28, 0x21	; 33
    8b38:	82 01       	movw	r16, r4
    8b3a:	22 e4       	ldi	r18, 0x42	; 66
    8b3c:	30 e0       	ldi	r19, 0x00	; 0
    8b3e:	ae 01       	movw	r20, r28
    8b40:	4f 5f       	subi	r20, 0xFF	; 255
    8b42:	5f 4f       	sbci	r21, 0xFF	; 255
    8b44:	a9 96       	adiw	r28, 0x29	; 41
    8b46:	6c ad       	ldd	r22, Y+60	; 0x3c
    8b48:	7d ad       	ldd	r23, Y+61	; 0x3d
    8b4a:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b4c:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b4e:	a9 97       	sbiw	r28, 0x29	; 41
    8b50:	17 da       	rcall	.-3026   	; 0x7f80 <p_ftoa>
    8b52:	93 fa       	bst	r9, 3
    8b54:	00 27       	eor	r16, r16
    8b56:	00 f9       	bld	r16, 0
    8b58:	10 e0       	ldi	r17, 0x00	; 0
    8b5a:	9c 01       	movw	r18, r24
    8b5c:	24 c0       	rjmp	.+72     	; 0x8ba6 <_printf_fn+0x6dc>
    8b5e:	c9 2c       	mov	r12, r9
    8b60:	d1 2c       	mov	r13, r1
    8b62:	a1 96       	adiw	r28, 0x21	; 33
    8b64:	ee ac       	ldd	r14, Y+62	; 0x3e
    8b66:	ff ac       	ldd	r15, Y+63	; 0x3f
    8b68:	a1 97       	sbiw	r28, 0x21	; 33
    8b6a:	82 01       	movw	r16, r4
    8b6c:	22 e4       	ldi	r18, 0x42	; 66
    8b6e:	30 e0       	ldi	r19, 0x00	; 0
    8b70:	ae 01       	movw	r20, r28
    8b72:	4f 5f       	subi	r20, 0xFF	; 255
    8b74:	5f 4f       	sbci	r21, 0xFF	; 255
    8b76:	a9 96       	adiw	r28, 0x29	; 41
    8b78:	6c ad       	ldd	r22, Y+60	; 0x3c
    8b7a:	7d ad       	ldd	r23, Y+61	; 0x3d
    8b7c:	8e ad       	ldd	r24, Y+62	; 0x3e
    8b7e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8b80:	a9 97       	sbiw	r28, 0x29	; 41
    8b82:	05 db       	rcall	.-2550   	; 0x818e <p_etoa>
    8b84:	7c 01       	movw	r14, r24
    8b86:	a3 96       	adiw	r28, 0x23	; 35
    8b88:	4e ad       	ldd	r20, Y+62	; 0x3e
    8b8a:	5f ad       	ldd	r21, Y+63	; 0x3f
    8b8c:	a3 97       	sbiw	r28, 0x23	; 35
    8b8e:	45 34       	cpi	r20, 0x45	; 69
    8b90:	51 05       	cpc	r21, r1
    8b92:	21 f4       	brne	.+8      	; 0x8b9c <_printf_fn+0x6d2>
    8b94:	ce 01       	movw	r24, r28
    8b96:	01 96       	adiw	r24, 0x01	; 1
    8b98:	0e 94 67 32 	call	0x64ce	; 0x64ce <strupper>
    8b9c:	93 fa       	bst	r9, 3
    8b9e:	00 27       	eor	r16, r16
    8ba0:	00 f9       	bld	r16, 0
    8ba2:	10 e0       	ldi	r17, 0x00	; 0
    8ba4:	97 01       	movw	r18, r14
    8ba6:	a2 01       	movw	r20, r4
    8ba8:	be 01       	movw	r22, r28
    8baa:	6f 5f       	subi	r22, 0xFF	; 255
    8bac:	7f 4f       	sbci	r23, 0xFF	; 255
    8bae:	a5 96       	adiw	r28, 0x25	; 37
    8bb0:	8e ad       	ldd	r24, Y+62	; 0x3e
    8bb2:	9f ad       	ldd	r25, Y+63	; 0x3f
    8bb4:	a5 97       	sbiw	r28, 0x25	; 37
    8bb6:	47 dc       	rcall	.-1906   	; 0x8446 <_puts_pad>
    8bb8:	69 c0       	rjmp	.+210    	; 0x8c8c <_printf_fn+0x7c2>
    8bba:	a3 96       	adiw	r28, 0x23	; 35
    8bbc:	8e ad       	ldd	r24, Y+62	; 0x3e
    8bbe:	9f ad       	ldd	r25, Y+63	; 0x3f
    8bc0:	a3 97       	sbiw	r28, 0x23	; 35
    8bc2:	83 37       	cpi	r24, 0x73	; 115
    8bc4:	91 05       	cpc	r25, r1
    8bc6:	69 f4       	brne	.+26     	; 0x8be2 <_printf_fn+0x718>
    8bc8:	71 01       	movw	r14, r2
    8bca:	92 e0       	ldi	r25, 0x02	; 2
    8bcc:	e9 0e       	add	r14, r25
    8bce:	f1 1c       	adc	r15, r1
    8bd0:	d1 01       	movw	r26, r2
    8bd2:	6d 91       	ld	r22, X+
    8bd4:	7c 91       	ld	r23, X
    8bd6:	61 15       	cp	r22, r1
    8bd8:	71 05       	cpc	r23, r1
    8bda:	91 f4       	brne	.+36     	; 0x8c00 <_printf_fn+0x736>
    8bdc:	6b e1       	ldi	r22, 0x1B	; 27
    8bde:	78 e0       	ldi	r23, 0x08	; 8
    8be0:	0f c0       	rjmp	.+30     	; 0x8c00 <_printf_fn+0x736>
    8be2:	71 01       	movw	r14, r2
    8be4:	b2 e0       	ldi	r27, 0x02	; 2
    8be6:	eb 0e       	add	r14, r27
    8be8:	f1 1c       	adc	r15, r1
    8bea:	f1 01       	movw	r30, r2
    8bec:	80 81       	ld	r24, Z
    8bee:	60 96       	adiw	r28, 0x10	; 16
    8bf0:	8f af       	std	Y+63, r24	; 0x3f
    8bf2:	60 97       	sbiw	r28, 0x10	; 16
    8bf4:	61 96       	adiw	r28, 0x11	; 17
    8bf6:	1f ae       	std	Y+63, r1	; 0x3f
    8bf8:	61 97       	sbiw	r28, 0x11	; 17
    8bfa:	be 01       	movw	r22, r28
    8bfc:	61 5b       	subi	r22, 0xB1	; 177
    8bfe:	7f 4f       	sbci	r23, 0xFF	; 255
    8c00:	fb 01       	movw	r30, r22
    8c02:	01 90       	ld	r0, Z+
    8c04:	00 20       	and	r0, r0
    8c06:	e9 f7       	brne	.-6      	; 0x8c02 <_printf_fn+0x738>
    8c08:	31 97       	sbiw	r30, 0x01	; 1
    8c0a:	e6 1b       	sub	r30, r22
    8c0c:	f7 0b       	sbc	r31, r23
    8c0e:	a1 96       	adiw	r28, 0x21	; 33
    8c10:	2e ad       	ldd	r18, Y+62	; 0x3e
    8c12:	3f ad       	ldd	r19, Y+63	; 0x3f
    8c14:	a1 97       	sbiw	r28, 0x21	; 33
    8c16:	23 2b       	or	r18, r19
    8c18:	21 f4       	brne	.+8      	; 0x8c22 <_printf_fn+0x758>
    8c1a:	a1 96       	adiw	r28, 0x21	; 33
    8c1c:	ff af       	std	Y+63, r31	; 0x3f
    8c1e:	ee af       	std	Y+62, r30	; 0x3e
    8c20:	a1 97       	sbiw	r28, 0x21	; 33
    8c22:	a1 96       	adiw	r28, 0x21	; 33
    8c24:	4e ad       	ldd	r20, Y+62	; 0x3e
    8c26:	5f ad       	ldd	r21, Y+63	; 0x3f
    8c28:	a1 97       	sbiw	r28, 0x21	; 33
    8c2a:	44 16       	cp	r4, r20
    8c2c:	55 06       	cpc	r5, r21
    8c2e:	3c f4       	brge	.+14     	; 0x8c3e <_printf_fn+0x774>
    8c30:	41 14       	cp	r4, r1
    8c32:	51 04       	cpc	r5, r1
    8c34:	21 f0       	breq	.+8      	; 0x8c3e <_printf_fn+0x774>
    8c36:	a1 96       	adiw	r28, 0x21	; 33
    8c38:	5f ae       	std	Y+63, r5	; 0x3f
    8c3a:	4e ae       	std	Y+62, r4	; 0x3e
    8c3c:	a1 97       	sbiw	r28, 0x21	; 33
    8c3e:	93 fa       	bst	r9, 3
    8c40:	00 27       	eor	r16, r16
    8c42:	00 f9       	bld	r16, 0
    8c44:	10 e0       	ldi	r17, 0x00	; 0
    8c46:	a1 96       	adiw	r28, 0x21	; 33
    8c48:	2e ad       	ldd	r18, Y+62	; 0x3e
    8c4a:	3f ad       	ldd	r19, Y+63	; 0x3f
    8c4c:	a1 97       	sbiw	r28, 0x21	; 33
    8c4e:	a2 01       	movw	r20, r4
    8c50:	a5 96       	adiw	r28, 0x25	; 37
    8c52:	8e ad       	ldd	r24, Y+62	; 0x3e
    8c54:	9f ad       	ldd	r25, Y+63	; 0x3f
    8c56:	a5 97       	sbiw	r28, 0x25	; 37
    8c58:	f6 db       	rcall	.-2068   	; 0x8446 <_puts_pad>
    8c5a:	17 01       	movw	r2, r14
    8c5c:	17 c0       	rjmp	.+46     	; 0x8c8c <_printf_fn+0x7c2>
    8c5e:	f6 01       	movw	r30, r12
    8c60:	5e 2d       	mov	r21, r14
    8c62:	0e 94 6b ec 	call	0x1d8d6	; 0x1d8d6 <__xload_1>
    8c66:	66 23       	and	r22, r22
    8c68:	89 f0       	breq	.+34     	; 0x8c8c <_printf_fn+0x7c2>
    8c6a:	5f ef       	ldi	r21, 0xFF	; 255
    8c6c:	c5 1a       	sub	r12, r21
    8c6e:	d5 0a       	sbc	r13, r21
    8c70:	e5 0a       	sbc	r14, r21
    8c72:	a5 96       	adiw	r28, 0x25	; 37
    8c74:	ae ad       	ldd	r26, Y+62	; 0x3e
    8c76:	bf ad       	ldd	r27, Y+63	; 0x3f
    8c78:	a5 97       	sbiw	r28, 0x25	; 37
    8c7a:	ed 91       	ld	r30, X+
    8c7c:	fc 91       	ld	r31, X
    8c7e:	11 97       	sbiw	r26, 0x01	; 1
    8c80:	cd 01       	movw	r24, r26
    8c82:	09 95       	icall
    8c84:	6c 14       	cp	r6, r12
    8c86:	7d 04       	cpc	r7, r13
    8c88:	8e 04       	cpc	r8, r14
    8c8a:	48 f7       	brcc	.-46     	; 0x8c5e <_printf_fn+0x794>
    8c8c:	e8 2c       	mov	r14, r8
    8c8e:	63 01       	movw	r12, r6
    8c90:	4b cc       	rjmp	.-1898   	; 0x8528 <_printf_fn+0x5e>
    8c92:	e2 e0       	ldi	r30, 0x02	; 2
    8c94:	f0 e0       	ldi	r31, 0x00	; 0
    8c96:	6f 96       	adiw	r28, 0x1f	; 31
    8c98:	ff af       	std	Y+63, r31	; 0x3f
    8c9a:	ee af       	std	Y+62, r30	; 0x3e
    8c9c:	6f 97       	sbiw	r28, 0x1f	; 31
    8c9e:	57 cd       	rjmp	.-1362   	; 0x874e <_printf_fn+0x284>
    8ca0:	6f 96       	adiw	r28, 0x1f	; 31
    8ca2:	ee ad       	ldd	r30, Y+62	; 0x3e
    8ca4:	ff ad       	ldd	r31, Y+63	; 0x3f
    8ca6:	6f 97       	sbiw	r28, 0x1f	; 31
    8ca8:	32 97       	sbiw	r30, 0x02	; 2
    8caa:	61 f4       	brne	.+24     	; 0x8cc4 <_printf_fn+0x7fa>
    8cac:	51 01       	movw	r10, r2
    8cae:	f2 e0       	ldi	r31, 0x02	; 2
    8cb0:	af 0e       	add	r10, r31
    8cb2:	b1 1c       	adc	r11, r1
    8cb4:	d1 01       	movw	r26, r2
    8cb6:	8d 91       	ld	r24, X+
    8cb8:	9c 91       	ld	r25, X
    8cba:	65 96       	adiw	r28, 0x15	; 21
    8cbc:	9f af       	std	Y+63, r25	; 0x3f
    8cbe:	8e af       	std	Y+62, r24	; 0x3e
    8cc0:	65 97       	sbiw	r28, 0x15	; 21
    8cc2:	c5 cd       	rjmp	.-1142   	; 0x884e <_printf_fn+0x384>
    8cc4:	6f 96       	adiw	r28, 0x1f	; 31
    8cc6:	2e ad       	ldd	r18, Y+62	; 0x3e
    8cc8:	3f ad       	ldd	r19, Y+63	; 0x3f
    8cca:	6f 97       	sbiw	r28, 0x1f	; 31
    8ccc:	24 30       	cpi	r18, 0x04	; 4
    8cce:	31 05       	cpc	r19, r1
    8cd0:	09 f0       	breq	.+2      	; 0x8cd4 <_printf_fn+0x80a>
    8cd2:	fe cd       	rjmp	.-1028   	; 0x88d0 <_printf_fn+0x406>
    8cd4:	51 01       	movw	r10, r2
    8cd6:	f4 e0       	ldi	r31, 0x04	; 4
    8cd8:	af 0e       	add	r10, r31
    8cda:	b1 1c       	adc	r11, r1
    8cdc:	f1 01       	movw	r30, r2
    8cde:	80 81       	ld	r24, Z
    8ce0:	91 81       	ldd	r25, Z+1	; 0x01
    8ce2:	a2 81       	ldd	r26, Z+2	; 0x02
    8ce4:	b3 81       	ldd	r27, Z+3	; 0x03
    8ce6:	2f 96       	adiw	r28, 0x0f	; 15
    8ce8:	8c af       	std	Y+60, r24	; 0x3c
    8cea:	9d af       	std	Y+61, r25	; 0x3d
    8cec:	ae af       	std	Y+62, r26	; 0x3e
    8cee:	bf af       	std	Y+63, r27	; 0x3f
    8cf0:	2f 97       	sbiw	r28, 0x0f	; 15
    8cf2:	dc cd       	rjmp	.-1096   	; 0x88ac <_printf_fn+0x3e2>
    8cf4:	c5 59       	subi	r28, 0x95	; 149
    8cf6:	df 4f       	sbci	r29, 0xFF	; 255
    8cf8:	e2 e1       	ldi	r30, 0x12	; 18
    8cfa:	0c 94 50 ec 	jmp	0x1d8a0	; 0x1d8a0 <__epilogue_restores__>

00008cfe <vsnprintf_P>:
    8cfe:	a8 e0       	ldi	r26, 0x08	; 8
    8d00:	b0 e0       	ldi	r27, 0x00	; 0
    8d02:	e5 e8       	ldi	r30, 0x85	; 133
    8d04:	f6 e4       	ldi	r31, 0x46	; 70
    8d06:	0c 94 40 ec 	jmp	0x1d880	; 0x1d880 <__prologue_saves__+0x18>
    8d0a:	7c 01       	movw	r14, r24
    8d0c:	cb 01       	movw	r24, r22
    8d0e:	64 2f       	mov	r22, r20
    8d10:	a9 01       	movw	r20, r18
    8d12:	98 01       	movw	r18, r16
    8d14:	f7 01       	movw	r30, r14
    8d16:	10 82       	st	Z, r1
    8d18:	ec e8       	ldi	r30, 0x8C	; 140
    8d1a:	fe e3       	ldi	r31, 0x3E	; 62
    8d1c:	fa 83       	std	Y+2, r31	; 0x02
    8d1e:	e9 83       	std	Y+1, r30	; 0x01
    8d20:	9e 83       	std	Y+6, r25	; 0x06
    8d22:	8d 83       	std	Y+5, r24	; 0x05
    8d24:	18 86       	std	Y+8, r1	; 0x08
    8d26:	1f 82       	std	Y+7, r1	; 0x07
    8d28:	fc 82       	std	Y+4, r15	; 0x04
    8d2a:	eb 82       	std	Y+3, r14	; 0x03
    8d2c:	ce 01       	movw	r24, r28
    8d2e:	01 96       	adiw	r24, 0x01	; 1
    8d30:	cc db       	rcall	.-2152   	; 0x84ca <_printf_fn>
    8d32:	f7 01       	movw	r30, r14
    8d34:	01 90       	ld	r0, Z+
    8d36:	00 20       	and	r0, r0
    8d38:	e9 f7       	brne	.-6      	; 0x8d34 <vsnprintf_P+0x36>
    8d3a:	cf 01       	movw	r24, r30
    8d3c:	01 97       	sbiw	r24, 0x01	; 1
    8d3e:	8e 19       	sub	r24, r14
    8d40:	9f 09       	sbc	r25, r15
    8d42:	28 96       	adiw	r28, 0x08	; 8
    8d44:	e6 e0       	ldi	r30, 0x06	; 6
    8d46:	0c 94 5c ec 	jmp	0x1d8b8	; 0x1d8b8 <__epilogue_restores__+0x18>

00008d4a <snprintf_P>:
    8d4a:	a0 e0       	ldi	r26, 0x00	; 0
    8d4c:	b0 e0       	ldi	r27, 0x00	; 0
    8d4e:	eb ea       	ldi	r30, 0xAB	; 171
    8d50:	f6 e4       	ldi	r31, 0x46	; 70
    8d52:	0c 94 42 ec 	jmp	0x1d884	; 0x1d884 <__prologue_saves__+0x1c>
    8d56:	8e 01       	movw	r16, r28
    8d58:	02 5f       	subi	r16, 0xF2	; 242
    8d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    8d5c:	2b 85       	ldd	r18, Y+11	; 0x0b
    8d5e:	3c 85       	ldd	r19, Y+12	; 0x0c
    8d60:	4d 85       	ldd	r20, Y+13	; 0x0d
    8d62:	69 85       	ldd	r22, Y+9	; 0x09
    8d64:	7a 85       	ldd	r23, Y+10	; 0x0a
    8d66:	8f 81       	ldd	r24, Y+7	; 0x07
    8d68:	98 85       	ldd	r25, Y+8	; 0x08
    8d6a:	c9 df       	rcall	.-110    	; 0x8cfe <vsnprintf_P>
    8d6c:	e4 e0       	ldi	r30, 0x04	; 4
    8d6e:	0c 94 5e ec 	jmp	0x1d8bc	; 0x1d8bc <__epilogue_restores__+0x1c>

00008d72 <sprintf_P>:
    8d72:	a0 e0       	ldi	r26, 0x00	; 0
    8d74:	b0 e0       	ldi	r27, 0x00	; 0
    8d76:	ef eb       	ldi	r30, 0xBF	; 191
    8d78:	f6 e4       	ldi	r31, 0x46	; 70
    8d7a:	0c 94 42 ec 	jmp	0x1d884	; 0x1d884 <__prologue_saves__+0x1c>
    8d7e:	8e 01       	movw	r16, r28
    8d80:	04 5f       	subi	r16, 0xF4	; 244
    8d82:	1f 4f       	sbci	r17, 0xFF	; 255
    8d84:	29 85       	ldd	r18, Y+9	; 0x09
    8d86:	3a 85       	ldd	r19, Y+10	; 0x0a
    8d88:	4b 85       	ldd	r20, Y+11	; 0x0b
    8d8a:	60 e0       	ldi	r22, 0x00	; 0
    8d8c:	74 e0       	ldi	r23, 0x04	; 4
    8d8e:	8f 81       	ldd	r24, Y+7	; 0x07
    8d90:	98 85       	ldd	r25, Y+8	; 0x08
    8d92:	b5 df       	rcall	.-150    	; 0x8cfe <vsnprintf_P>
    8d94:	e4 e0       	ldi	r30, 0x04	; 4
    8d96:	0c 94 5e ec 	jmp	0x1d8bc	; 0x1d8bc <__epilogue_restores__+0x1c>

00008d9a <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE 
int 
printf_P(__memx const char *format, ...)
{
    8d9a:	a8 e0       	ldi	r26, 0x08	; 8
    8d9c:	b0 e0       	ldi	r27, 0x00	; 0
    8d9e:	e3 ed       	ldi	r30, 0xD3	; 211
    8da0:	f6 e4       	ldi	r31, 0x46	; 70
    8da2:	0c 94 44 ec 	jmp	0x1d888	; 0x1d888 <__prologue_saves__+0x20>
    8da6:	9e 01       	movw	r18, r28
    8da8:	23 5f       	subi	r18, 0xF3	; 243
    8daa:	3f 4f       	sbci	r19, 0xFF	; 255
    8dac:	f9 01       	movw	r30, r18
    8dae:	41 91       	ld	r20, Z+
    8db0:	51 91       	ld	r21, Z+
    8db2:	61 91       	ld	r22, Z+
    8db4:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    8db6:	85 ea       	ldi	r24, 0xA5	; 165
    8db8:	9e e3       	ldi	r25, 0x3E	; 62
    8dba:	9a 83       	std	Y+2, r25	; 0x02
    8dbc:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    8dbe:	18 86       	std	Y+8, r1	; 0x08
    8dc0:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    8dc2:	ce 01       	movw	r24, r28
    8dc4:	01 96       	adiw	r24, 0x01	; 1
    8dc6:	81 db       	rcall	.-2302   	; 0x84ca <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    8dc8:	8f 81       	ldd	r24, Y+7	; 0x07
    8dca:	98 85       	ldd	r25, Y+8	; 0x08
    8dcc:	28 96       	adiw	r28, 0x08	; 8
    8dce:	e2 e0       	ldi	r30, 0x02	; 2
    8dd0:	0c 94 60 ec 	jmp	0x1d8c0	; 0x1d8c0 <__epilogue_restores__+0x20>

00008dd4 <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    8dd4:	9c 01       	movw	r18, r24
    8dd6:	20 53       	subi	r18, 0x30	; 48
    8dd8:	31 09       	sbc	r19, r1
    8dda:	2a 30       	cpi	r18, 0x0A	; 10
    8ddc:	31 05       	cpc	r19, r1
    8dde:	10 f4       	brcc	.+4      	; 0x8de4 <atodigit+0x10>
    8de0:	c9 01       	movw	r24, r18
    8de2:	10 c0       	rjmp	.+32     	; 0x8e04 <atodigit+0x30>
    8de4:	9c 01       	movw	r18, r24
    8de6:	21 54       	subi	r18, 0x41	; 65
    8de8:	31 09       	sbc	r19, r1
    8dea:	26 30       	cpi	r18, 0x06	; 6
    8dec:	31 05       	cpc	r19, r1
    8dee:	10 f4       	brcc	.+4      	; 0x8df4 <atodigit+0x20>
    8df0:	c7 97       	sbiw	r24, 0x37	; 55
    8df2:	08 c0       	rjmp	.+16     	; 0x8e04 <atodigit+0x30>
    8df4:	9c 01       	movw	r18, r24
    8df6:	21 56       	subi	r18, 0x61	; 97
    8df8:	31 09       	sbc	r19, r1
    8dfa:	26 30       	cpi	r18, 0x06	; 6
    8dfc:	31 05       	cpc	r19, r1
    8dfe:	28 f4       	brcc	.+10     	; 0x8e0a <atodigit+0x36>
    8e00:	87 55       	subi	r24, 0x57	; 87
    8e02:	91 09       	sbc	r25, r1
    8e04:	86 17       	cp	r24, r22
    8e06:	97 07       	cpc	r25, r23
    8e08:	14 f0       	brlt	.+4      	; 0x8e0e <atodigit+0x3a>
    8e0a:	8f ef       	ldi	r24, 0xFF	; 255
    8e0c:	9f ef       	ldi	r25, 0xFF	; 255
    8e0e:	08 95       	ret

00008e10 <strtol>:
    8e10:	a0 e0       	ldi	r26, 0x00	; 0
    8e12:	b0 e0       	ldi	r27, 0x00	; 0
    8e14:	ee e0       	ldi	r30, 0x0E	; 14
    8e16:	f7 e4       	ldi	r31, 0x47	; 71
    8e18:	0c 94 34 ec 	jmp	0x1d868	; 0x1d868 <__prologue_saves__>
    8e1c:	2b 01       	movw	r4, r22
    8e1e:	8a 01       	movw	r16, r20
    8e20:	ec 01       	movw	r28, r24
    8e22:	28 81       	ld	r18, Y
    8e24:	01 96       	adiw	r24, 0x01	; 1
    8e26:	20 32       	cpi	r18, 0x20	; 32
    8e28:	d9 f3       	breq	.-10     	; 0x8e20 <strtol+0x10>
    8e2a:	29 30       	cpi	r18, 0x09	; 9
    8e2c:	c9 f3       	breq	.-14     	; 0x8e20 <strtol+0x10>
    8e2e:	2d 32       	cpi	r18, 0x2D	; 45
    8e30:	29 f4       	brne	.+10     	; 0x8e3c <strtol+0x2c>
    8e32:	ec 01       	movw	r28, r24
    8e34:	66 24       	eor	r6, r6
    8e36:	63 94       	inc	r6
    8e38:	71 2c       	mov	r7, r1
    8e3a:	05 c0       	rjmp	.+10     	; 0x8e46 <strtol+0x36>
    8e3c:	2b 32       	cpi	r18, 0x2B	; 43
    8e3e:	09 f4       	brne	.+2      	; 0x8e42 <strtol+0x32>
    8e40:	ec 01       	movw	r28, r24
    8e42:	61 2c       	mov	r6, r1
    8e44:	71 2c       	mov	r7, r1
    8e46:	9e 01       	movw	r18, r28
    8e48:	2f 5f       	subi	r18, 0xFF	; 255
    8e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    8e4c:	88 81       	ld	r24, Y
    8e4e:	80 33       	cpi	r24, 0x30	; 48
    8e50:	11 f4       	brne	.+4      	; 0x8e56 <strtol+0x46>
    8e52:	e9 01       	movw	r28, r18
    8e54:	f8 cf       	rjmp	.-16     	; 0x8e46 <strtol+0x36>
    8e56:	c1 2c       	mov	r12, r1
    8e58:	d1 2c       	mov	r13, r1
    8e5a:	76 01       	movw	r14, r12
    8e5c:	48 01       	movw	r8, r16
    8e5e:	01 2e       	mov	r0, r17
    8e60:	00 0c       	add	r0, r0
    8e62:	aa 08       	sbc	r10, r10
    8e64:	bb 08       	sbc	r11, r11
    8e66:	3c 2e       	mov	r3, r28
    8e68:	2d 2e       	mov	r2, r29
    8e6a:	89 91       	ld	r24, Y+
    8e6c:	88 23       	and	r24, r24
    8e6e:	31 f0       	breq	.+12     	; 0x8e7c <strtol+0x6c>
    8e70:	b8 01       	movw	r22, r16
    8e72:	90 e0       	ldi	r25, 0x00	; 0
    8e74:	af df       	rcall	.-162    	; 0x8dd4 <atodigit>
    8e76:	fc 01       	movw	r30, r24
    8e78:	97 ff       	sbrs	r25, 7
    8e7a:	0c c0       	rjmp	.+24     	; 0x8e94 <strtol+0x84>
    8e7c:	61 14       	cp	r6, r1
    8e7e:	71 04       	cpc	r7, r1
    8e80:	c1 f0       	breq	.+48     	; 0x8eb2 <strtol+0xa2>
    8e82:	f0 94       	com	r15
    8e84:	e0 94       	com	r14
    8e86:	d0 94       	com	r13
    8e88:	c0 94       	com	r12
    8e8a:	c1 1c       	adc	r12, r1
    8e8c:	d1 1c       	adc	r13, r1
    8e8e:	e1 1c       	adc	r14, r1
    8e90:	f1 1c       	adc	r15, r1
    8e92:	0f c0       	rjmp	.+30     	; 0x8eb2 <strtol+0xa2>
    8e94:	a5 01       	movw	r20, r10
    8e96:	94 01       	movw	r18, r8
    8e98:	c7 01       	movw	r24, r14
    8e9a:	b6 01       	movw	r22, r12
    8e9c:	0e 94 85 eb 	call	0x1d70a	; 0x1d70a <__mulsi3>
    8ea0:	6f 01       	movw	r12, r30
    8ea2:	ff 0f       	add	r31, r31
    8ea4:	ee 08       	sbc	r14, r14
    8ea6:	ff 08       	sbc	r15, r15
    8ea8:	c6 0e       	add	r12, r22
    8eaa:	d7 1e       	adc	r13, r23
    8eac:	e8 1e       	adc	r14, r24
    8eae:	f9 1e       	adc	r15, r25
    8eb0:	da cf       	rjmp	.-76     	; 0x8e66 <strtol+0x56>
    8eb2:	41 14       	cp	r4, r1
    8eb4:	51 04       	cpc	r5, r1
    8eb6:	19 f0       	breq	.+6      	; 0x8ebe <strtol+0xae>
    8eb8:	f2 01       	movw	r30, r4
    8eba:	30 82       	st	Z, r3
    8ebc:	21 82       	std	Z+1, r2	; 0x01
    8ebe:	c7 01       	movw	r24, r14
    8ec0:	b6 01       	movw	r22, r12
    8ec2:	cd b7       	in	r28, 0x3d	; 61
    8ec4:	de b7       	in	r29, 0x3e	; 62
    8ec6:	e2 e1       	ldi	r30, 0x12	; 18
    8ec8:	0c 94 50 ec 	jmp	0x1d8a0	; 0x1d8a0 <__epilogue_restores__>

00008ecc <atoh>:
    8ecc:	40 e1       	ldi	r20, 0x10	; 16
    8ece:	50 e0       	ldi	r21, 0x00	; 0
    8ed0:	60 e0       	ldi	r22, 0x00	; 0
    8ed2:	70 e0       	ldi	r23, 0x00	; 0
    8ed4:	9d cf       	rjmp	.-198    	; 0x8e10 <strtol>
    8ed6:	08 95       	ret

00008ed8 <atoi>:
MEMSPACE 
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8ed8:	4a e0       	ldi	r20, 0x0A	; 10
    8eda:	50 e0       	ldi	r21, 0x00	; 0
    8edc:	60 e0       	ldi	r22, 0x00	; 0
    8ede:	70 e0       	ldi	r23, 0x00	; 0
    8ee0:	97 df       	rcall	.-210    	; 0x8e10 <strtol>
    return((int)num);
}
    8ee2:	cb 01       	movw	r24, r22
    8ee4:	08 95       	ret

00008ee6 <atol>:
MEMSPACE 
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8ee6:	4a e0       	ldi	r20, 0x0A	; 10
    8ee8:	50 e0       	ldi	r21, 0x00	; 0
    8eea:	60 e0       	ldi	r22, 0x00	; 0
    8eec:	70 e0       	ldi	r23, 0x00	; 0
    8eee:	90 cf       	rjmp	.-224    	; 0x8e10 <strtol>
    return(num);
}
    8ef0:	08 95       	ret

00008ef2 <ld_dword>:
			}
		}
	}

	LEAVE_FF(fs, res);
}
    8ef2:	fc 01       	movw	r30, r24
    8ef4:	62 81       	ldd	r22, Z+2	; 0x02
    8ef6:	73 81       	ldd	r23, Z+3	; 0x03
    8ef8:	cb 01       	movw	r24, r22
    8efa:	a0 e0       	ldi	r26, 0x00	; 0
    8efc:	b0 e0       	ldi	r27, 0x00	; 0
    8efe:	ba 2f       	mov	r27, r26
    8f00:	a9 2f       	mov	r26, r25
    8f02:	98 2f       	mov	r25, r24
    8f04:	88 27       	eor	r24, r24
    8f06:	21 81       	ldd	r18, Z+1	; 0x01
    8f08:	82 2b       	or	r24, r18
    8f0a:	ba 2f       	mov	r27, r26
    8f0c:	a9 2f       	mov	r26, r25
    8f0e:	98 2f       	mov	r25, r24
    8f10:	88 27       	eor	r24, r24
    8f12:	20 81       	ld	r18, Z
    8f14:	bc 01       	movw	r22, r24
    8f16:	cd 01       	movw	r24, r26
    8f18:	62 2b       	or	r22, r18
    8f1a:	08 95       	ret

00008f1c <st_dword>:
    8f1c:	fc 01       	movw	r30, r24
    8f1e:	40 83       	st	Z, r20
    8f20:	51 83       	std	Z+1, r21	; 0x01
    8f22:	62 83       	std	Z+2, r22	; 0x02
    8f24:	73 83       	std	Z+3, r23	; 0x03
    8f26:	08 95       	ret

00008f28 <mem_set>:
    8f28:	48 0f       	add	r20, r24
    8f2a:	59 1f       	adc	r21, r25
    8f2c:	fc 01       	movw	r30, r24
    8f2e:	61 93       	st	Z+, r22
    8f30:	cf 01       	movw	r24, r30
    8f32:	e4 17       	cp	r30, r20
    8f34:	f5 07       	cpc	r31, r21
    8f36:	d1 f7       	brne	.-12     	; 0x8f2c <mem_set+0x4>
    8f38:	08 95       	ret

00008f3a <clust2sect>:
    8f3a:	0f 93       	push	r16
    8f3c:	1f 93       	push	r17
    8f3e:	fc 01       	movw	r30, r24
    8f40:	9a 01       	movw	r18, r20
    8f42:	ab 01       	movw	r20, r22
    8f44:	22 50       	subi	r18, 0x02	; 2
    8f46:	31 09       	sbc	r19, r1
    8f48:	41 09       	sbc	r20, r1
    8f4a:	51 09       	sbc	r21, r1
    8f4c:	81 8d       	ldd	r24, Z+25	; 0x19
    8f4e:	92 8d       	ldd	r25, Z+26	; 0x1a
    8f50:	a3 8d       	ldd	r26, Z+27	; 0x1b
    8f52:	b4 8d       	ldd	r27, Z+28	; 0x1c
    8f54:	02 97       	sbiw	r24, 0x02	; 2
    8f56:	a1 09       	sbc	r26, r1
    8f58:	b1 09       	sbc	r27, r1
    8f5a:	28 17       	cp	r18, r24
    8f5c:	39 07       	cpc	r19, r25
    8f5e:	4a 07       	cpc	r20, r26
    8f60:	5b 07       	cpc	r21, r27
    8f62:	68 f4       	brcc	.+26     	; 0x8f7e <clust2sect+0x44>
    8f64:	a1 85       	ldd	r26, Z+9	; 0x09
    8f66:	b2 85       	ldd	r27, Z+10	; 0x0a
    8f68:	0e 94 14 ec 	call	0x1d828	; 0x1d828 <__muluhisi3>
    8f6c:	05 a5       	ldd	r16, Z+45	; 0x2d
    8f6e:	16 a5       	ldd	r17, Z+46	; 0x2e
    8f70:	27 a5       	ldd	r18, Z+47	; 0x2f
    8f72:	30 a9       	ldd	r19, Z+48	; 0x30
    8f74:	60 0f       	add	r22, r16
    8f76:	71 1f       	adc	r23, r17
    8f78:	82 1f       	adc	r24, r18
    8f7a:	93 1f       	adc	r25, r19
    8f7c:	03 c0       	rjmp	.+6      	; 0x8f84 <clust2sect+0x4a>
    8f7e:	60 e0       	ldi	r22, 0x00	; 0
    8f80:	70 e0       	ldi	r23, 0x00	; 0
    8f82:	cb 01       	movw	r24, r22
    8f84:	1f 91       	pop	r17
    8f86:	0f 91       	pop	r16
    8f88:	08 95       	ret

00008f8a <clmt_clust>:
    8f8a:	cf 93       	push	r28
    8f8c:	df 93       	push	r29
    8f8e:	fc 01       	movw	r30, r24
    8f90:	c2 a1       	ldd	r28, Z+34	; 0x22
    8f92:	d3 a1       	ldd	r29, Z+35	; 0x23
    8f94:	24 96       	adiw	r28, 0x04	; 4
    8f96:	cb 01       	movw	r24, r22
    8f98:	ba 01       	movw	r22, r20
    8f9a:	29 e0       	ldi	r18, 0x09	; 9
    8f9c:	96 95       	lsr	r25
    8f9e:	87 95       	ror	r24
    8fa0:	77 95       	ror	r23
    8fa2:	67 95       	ror	r22
    8fa4:	2a 95       	dec	r18
    8fa6:	d1 f7       	brne	.-12     	; 0x8f9c <clmt_clust+0x12>
    8fa8:	01 90       	ld	r0, Z+
    8faa:	f0 81       	ld	r31, Z
    8fac:	e0 2d       	mov	r30, r0
    8fae:	21 85       	ldd	r18, Z+9	; 0x09
    8fb0:	32 85       	ldd	r19, Z+10	; 0x0a
    8fb2:	40 e0       	ldi	r20, 0x00	; 0
    8fb4:	50 e0       	ldi	r21, 0x00	; 0
    8fb6:	0e 94 c7 eb 	call	0x1d78e	; 0x1d78e <__udivmodsi4>
    8fba:	88 81       	ld	r24, Y
    8fbc:	99 81       	ldd	r25, Y+1	; 0x01
    8fbe:	aa 81       	ldd	r26, Y+2	; 0x02
    8fc0:	bb 81       	ldd	r27, Y+3	; 0x03
    8fc2:	00 97       	sbiw	r24, 0x00	; 0
    8fc4:	a1 05       	cpc	r26, r1
    8fc6:	b1 05       	cpc	r27, r1
    8fc8:	b1 f0       	breq	.+44     	; 0x8ff6 <clmt_clust+0x6c>
    8fca:	28 17       	cp	r18, r24
    8fcc:	39 07       	cpc	r19, r25
    8fce:	4a 07       	cpc	r20, r26
    8fd0:	5b 07       	cpc	r21, r27
    8fd2:	30 f0       	brcs	.+12     	; 0x8fe0 <clmt_clust+0x56>
    8fd4:	28 1b       	sub	r18, r24
    8fd6:	39 0b       	sbc	r19, r25
    8fd8:	4a 0b       	sbc	r20, r26
    8fda:	5b 0b       	sbc	r21, r27
    8fdc:	28 96       	adiw	r28, 0x08	; 8
    8fde:	ed cf       	rjmp	.-38     	; 0x8fba <clmt_clust+0x30>
    8fe0:	8c 81       	ldd	r24, Y+4	; 0x04
    8fe2:	9d 81       	ldd	r25, Y+5	; 0x05
    8fe4:	ae 81       	ldd	r26, Y+6	; 0x06
    8fe6:	bf 81       	ldd	r27, Y+7	; 0x07
    8fe8:	bc 01       	movw	r22, r24
    8fea:	cd 01       	movw	r24, r26
    8fec:	62 0f       	add	r22, r18
    8fee:	73 1f       	adc	r23, r19
    8ff0:	84 1f       	adc	r24, r20
    8ff2:	95 1f       	adc	r25, r21
    8ff4:	03 c0       	rjmp	.+6      	; 0x8ffc <clmt_clust+0x72>
    8ff6:	60 e0       	ldi	r22, 0x00	; 0
    8ff8:	70 e0       	ldi	r23, 0x00	; 0
    8ffa:	cb 01       	movw	r24, r22
    8ffc:	df 91       	pop	r29
    8ffe:	cf 91       	pop	r28
    9000:	08 95       	ret

00009002 <sum_sfn>:
    9002:	fc 01       	movw	r30, r24
    9004:	9c 01       	movw	r18, r24
    9006:	25 5f       	subi	r18, 0xF5	; 245
    9008:	3f 4f       	sbci	r19, 0xFF	; 255
    900a:	80 e0       	ldi	r24, 0x00	; 0
    900c:	98 2f       	mov	r25, r24
    900e:	90 fb       	bst	r25, 0
    9010:	97 95       	ror	r25
    9012:	97 f9       	bld	r25, 7
    9014:	81 91       	ld	r24, Z+
    9016:	89 0f       	add	r24, r25
    9018:	e2 17       	cp	r30, r18
    901a:	f3 07       	cpc	r31, r19
    901c:	b9 f7       	brne	.-18     	; 0x900c <sum_sfn+0xa>
    901e:	08 95       	ret

00009020 <get_ldnumber>:
    9020:	dc 01       	movw	r26, r24
    9022:	ed 91       	ld	r30, X+
    9024:	fc 91       	ld	r31, X
    9026:	30 97       	sbiw	r30, 0x00	; 0
    9028:	c1 f0       	breq	.+48     	; 0x905a <get_ldnumber+0x3a>
    902a:	df 01       	movw	r26, r30
    902c:	9d 01       	movw	r18, r26
    902e:	4d 91       	ld	r20, X+
    9030:	40 32       	cpi	r20, 0x20	; 32
    9032:	80 f0       	brcs	.+32     	; 0x9054 <get_ldnumber+0x34>
    9034:	4a 33       	cpi	r20, 0x3A	; 58
    9036:	d1 f7       	brne	.-12     	; 0x902c <get_ldnumber+0xc>
    9038:	af 01       	movw	r20, r30
    903a:	4f 5f       	subi	r20, 0xFF	; 255
    903c:	5f 4f       	sbci	r21, 0xFF	; 255
    903e:	24 17       	cp	r18, r20
    9040:	35 07       	cpc	r19, r21
    9042:	59 f4       	brne	.+22     	; 0x905a <get_ldnumber+0x3a>
    9044:	40 81       	ld	r20, Z
    9046:	40 33       	cpi	r20, 0x30	; 48
    9048:	41 f4       	brne	.+16     	; 0x905a <get_ldnumber+0x3a>
    904a:	2f 5f       	subi	r18, 0xFF	; 255
    904c:	3f 4f       	sbci	r19, 0xFF	; 255
    904e:	fc 01       	movw	r30, r24
    9050:	31 83       	std	Z+1, r19	; 0x01
    9052:	20 83       	st	Z, r18
    9054:	80 e0       	ldi	r24, 0x00	; 0
    9056:	90 e0       	ldi	r25, 0x00	; 0
    9058:	08 95       	ret
    905a:	8f ef       	ldi	r24, 0xFF	; 255
    905c:	9f ef       	ldi	r25, 0xFF	; 255
    905e:	08 95       	ret

00009060 <validate>:
    9060:	0f 93       	push	r16
    9062:	1f 93       	push	r17
    9064:	cf 93       	push	r28
    9066:	df 93       	push	r29
    9068:	ec 01       	movw	r28, r24
    906a:	8b 01       	movw	r16, r22
    906c:	89 2b       	or	r24, r25
    906e:	31 f4       	brne	.+12     	; 0x907c <validate+0x1c>
    9070:	f8 01       	movw	r30, r16
    9072:	11 82       	std	Z+1, r1	; 0x01
    9074:	10 82       	st	Z, r1
    9076:	89 e0       	ldi	r24, 0x09	; 9
    9078:	90 e0       	ldi	r25, 0x00	; 0
    907a:	1a c0       	rjmp	.+52     	; 0x90b0 <validate+0x50>
    907c:	e8 81       	ld	r30, Y
    907e:	f9 81       	ldd	r31, Y+1	; 0x01
    9080:	30 97       	sbiw	r30, 0x00	; 0
    9082:	b1 f3       	breq	.-20     	; 0x9070 <validate+0x10>
    9084:	80 81       	ld	r24, Z
    9086:	88 23       	and	r24, r24
    9088:	99 f3       	breq	.-26     	; 0x9070 <validate+0x10>
    908a:	25 81       	ldd	r18, Z+5	; 0x05
    908c:	36 81       	ldd	r19, Z+6	; 0x06
    908e:	8a 81       	ldd	r24, Y+2	; 0x02
    9090:	9b 81       	ldd	r25, Y+3	; 0x03
    9092:	28 17       	cp	r18, r24
    9094:	39 07       	cpc	r19, r25
    9096:	61 f7       	brne	.-40     	; 0x9070 <validate+0x10>
    9098:	81 81       	ldd	r24, Z+1	; 0x01
    909a:	0e 94 9f 6e 	call	0xdd3e	; 0xdd3e <disk_status>
    909e:	80 fd       	sbrc	r24, 0
    90a0:	e7 cf       	rjmp	.-50     	; 0x9070 <validate+0x10>
    90a2:	88 81       	ld	r24, Y
    90a4:	99 81       	ldd	r25, Y+1	; 0x01
    90a6:	f8 01       	movw	r30, r16
    90a8:	91 83       	std	Z+1, r25	; 0x01
    90aa:	80 83       	st	Z, r24
    90ac:	80 e0       	ldi	r24, 0x00	; 0
    90ae:	90 e0       	ldi	r25, 0x00	; 0
    90b0:	df 91       	pop	r29
    90b2:	cf 91       	pop	r28
    90b4:	1f 91       	pop	r17
    90b6:	0f 91       	pop	r16
    90b8:	08 95       	ret

000090ba <mem_cpy.part.0>:
    90ba:	fb 01       	movw	r30, r22
    90bc:	48 0f       	add	r20, r24
    90be:	59 1f       	adc	r21, r25
    90c0:	21 91       	ld	r18, Z+
    90c2:	dc 01       	movw	r26, r24
    90c4:	2d 93       	st	X+, r18
    90c6:	cd 01       	movw	r24, r26
    90c8:	a4 17       	cp	r26, r20
    90ca:	b5 07       	cpc	r27, r21
    90cc:	c9 f7       	brne	.-14     	; 0x90c0 <mem_cpy.part.0+0x6>
    90ce:	08 95       	ret

000090d0 <ld_clust.isra.1>:
    90d0:	fb 01       	movw	r30, r22
    90d2:	42 8d       	ldd	r20, Z+26	; 0x1a
    90d4:	53 8d       	ldd	r21, Z+27	; 0x1b
    90d6:	60 e0       	ldi	r22, 0x00	; 0
    90d8:	70 e0       	ldi	r23, 0x00	; 0
    90da:	83 30       	cpi	r24, 0x03	; 3
    90dc:	59 f4       	brne	.+22     	; 0x90f4 <ld_clust.isra.1+0x24>
    90de:	84 89       	ldd	r24, Z+20	; 0x14
    90e0:	95 89       	ldd	r25, Z+21	; 0x15
    90e2:	a0 e0       	ldi	r26, 0x00	; 0
    90e4:	b0 e0       	ldi	r27, 0x00	; 0
    90e6:	dc 01       	movw	r26, r24
    90e8:	99 27       	eor	r25, r25
    90ea:	88 27       	eor	r24, r24
    90ec:	48 2b       	or	r20, r24
    90ee:	59 2b       	or	r21, r25
    90f0:	6a 2b       	or	r22, r26
    90f2:	7b 2b       	or	r23, r27
    90f4:	cb 01       	movw	r24, r22
    90f6:	ba 01       	movw	r22, r20
    90f8:	08 95       	ret

000090fa <st_clust.isra.2>:
    90fa:	fb 01       	movw	r30, r22
    90fc:	22 8f       	std	Z+26, r18	; 0x1a
    90fe:	33 8f       	std	Z+27, r19	; 0x1b
    9100:	dc 01       	movw	r26, r24
    9102:	8c 91       	ld	r24, X
    9104:	83 30       	cpi	r24, 0x03	; 3
    9106:	29 f4       	brne	.+10     	; 0x9112 <st_clust.isra.2+0x18>
    9108:	ca 01       	movw	r24, r20
    910a:	aa 27       	eor	r26, r26
    910c:	bb 27       	eor	r27, r27
    910e:	84 8b       	std	Z+20, r24	; 0x14
    9110:	95 8b       	std	Z+21, r25	; 0x15
    9112:	08 95       	ret

00009114 <sync_window.part.3>:
    9114:	a0 e0       	ldi	r26, 0x00	; 0
    9116:	b0 e0       	ldi	r27, 0x00	; 0
    9118:	e0 e9       	ldi	r30, 0x90	; 144
    911a:	f8 e4       	ldi	r31, 0x48	; 72
    911c:	0c 94 3a ec 	jmp	0x1d874	; 0x1d874 <__prologue_saves__+0xc>
    9120:	ec 01       	movw	r28, r24
    9122:	89 a8       	ldd	r8, Y+49	; 0x31
    9124:	9a a8       	ldd	r9, Y+50	; 0x32
    9126:	ab a8       	ldd	r10, Y+51	; 0x33
    9128:	bc a8       	ldd	r11, Y+52	; 0x34
    912a:	6c 01       	movw	r12, r24
    912c:	85 e3       	ldi	r24, 0x35	; 53
    912e:	c8 0e       	add	r12, r24
    9130:	d1 1c       	adc	r13, r1
    9132:	01 e0       	ldi	r16, 0x01	; 1
    9134:	10 e0       	ldi	r17, 0x00	; 0
    9136:	a5 01       	movw	r20, r10
    9138:	94 01       	movw	r18, r8
    913a:	b6 01       	movw	r22, r12
    913c:	89 81       	ldd	r24, Y+1	; 0x01
    913e:	0e 94 bb 6e 	call	0xdd76	; 0xdd76 <disk_write>
    9142:	89 2b       	or	r24, r25
    9144:	89 f5       	brne	.+98     	; 0x91a8 <sync_window.part.3+0x94>
    9146:	1b 82       	std	Y+3, r1	; 0x03
    9148:	8d a1       	ldd	r24, Y+37	; 0x25
    914a:	9e a1       	ldd	r25, Y+38	; 0x26
    914c:	af a1       	ldd	r26, Y+39	; 0x27
    914e:	b8 a5       	ldd	r27, Y+40	; 0x28
    9150:	b5 01       	movw	r22, r10
    9152:	a4 01       	movw	r20, r8
    9154:	48 1b       	sub	r20, r24
    9156:	59 0b       	sbc	r21, r25
    9158:	6a 0b       	sbc	r22, r26
    915a:	7b 0b       	sbc	r23, r27
    915c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    915e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9160:	af 8d       	ldd	r26, Y+31	; 0x1f
    9162:	b8 a1       	ldd	r27, Y+32	; 0x20
    9164:	48 17       	cp	r20, r24
    9166:	59 07       	cpc	r21, r25
    9168:	6a 07       	cpc	r22, r26
    916a:	7b 07       	cpc	r23, r27
    916c:	18 f0       	brcs	.+6      	; 0x9174 <sync_window.part.3+0x60>
    916e:	80 e0       	ldi	r24, 0x00	; 0
    9170:	90 e0       	ldi	r25, 0x00	; 0
    9172:	1c c0       	rjmp	.+56     	; 0x91ac <sync_window.part.3+0x98>
    9174:	ea 80       	ldd	r14, Y+2	; 0x02
    9176:	f1 2c       	mov	r15, r1
    9178:	82 e0       	ldi	r24, 0x02	; 2
    917a:	e8 16       	cp	r14, r24
    917c:	f1 04       	cpc	r15, r1
    917e:	b8 f3       	brcs	.-18     	; 0x916e <sync_window.part.3+0x5a>
    9180:	8d 8d       	ldd	r24, Y+29	; 0x1d
    9182:	9e 8d       	ldd	r25, Y+30	; 0x1e
    9184:	af 8d       	ldd	r26, Y+31	; 0x1f
    9186:	b8 a1       	ldd	r27, Y+32	; 0x20
    9188:	88 0e       	add	r8, r24
    918a:	99 1e       	adc	r9, r25
    918c:	aa 1e       	adc	r10, r26
    918e:	bb 1e       	adc	r11, r27
    9190:	01 e0       	ldi	r16, 0x01	; 1
    9192:	10 e0       	ldi	r17, 0x00	; 0
    9194:	a5 01       	movw	r20, r10
    9196:	94 01       	movw	r18, r8
    9198:	b6 01       	movw	r22, r12
    919a:	89 81       	ldd	r24, Y+1	; 0x01
    919c:	0e 94 bb 6e 	call	0xdd76	; 0xdd76 <disk_write>
    91a0:	81 e0       	ldi	r24, 0x01	; 1
    91a2:	e8 1a       	sub	r14, r24
    91a4:	f1 08       	sbc	r15, r1
    91a6:	e8 cf       	rjmp	.-48     	; 0x9178 <sync_window.part.3+0x64>
    91a8:	81 e0       	ldi	r24, 0x01	; 1
    91aa:	90 e0       	ldi	r25, 0x00	; 0
    91ac:	cd b7       	in	r28, 0x3d	; 61
    91ae:	de b7       	in	r29, 0x3e	; 62
    91b0:	ec e0       	ldi	r30, 0x0C	; 12
    91b2:	0c 94 56 ec 	jmp	0x1d8ac	; 0x1d8ac <__epilogue_restores__+0xc>

000091b6 <sync_window>:
    91b6:	fc 01       	movw	r30, r24
    91b8:	23 81       	ldd	r18, Z+3	; 0x03
    91ba:	22 23       	and	r18, r18
    91bc:	11 f0       	breq	.+4      	; 0x91c2 <sync_window+0xc>
    91be:	aa cf       	rjmp	.-172    	; 0x9114 <sync_window.part.3>
    91c0:	08 95       	ret
    91c2:	80 e0       	ldi	r24, 0x00	; 0
    91c4:	90 e0       	ldi	r25, 0x00	; 0
    91c6:	08 95       	ret

000091c8 <sync_fs>:
    91c8:	ef 92       	push	r14
    91ca:	ff 92       	push	r15
    91cc:	0f 93       	push	r16
    91ce:	1f 93       	push	r17
    91d0:	cf 93       	push	r28
    91d2:	df 93       	push	r29
    91d4:	ec 01       	movw	r28, r24
    91d6:	ef df       	rcall	.-34     	; 0x91b6 <sync_window>
    91d8:	00 97       	sbiw	r24, 0x00	; 0
    91da:	09 f0       	breq	.+2      	; 0x91de <sync_fs+0x16>
    91dc:	5c c0       	rjmp	.+184    	; 0x9296 <sync_fs+0xce>
    91de:	88 81       	ld	r24, Y
    91e0:	83 30       	cpi	r24, 0x03	; 3
    91e2:	09 f0       	breq	.+2      	; 0x91e6 <sync_fs+0x1e>
    91e4:	4b c0       	rjmp	.+150    	; 0x927c <sync_fs+0xb4>
    91e6:	8c 81       	ldd	r24, Y+4	; 0x04
    91e8:	81 30       	cpi	r24, 0x01	; 1
    91ea:	09 f0       	breq	.+2      	; 0x91ee <sync_fs+0x26>
    91ec:	47 c0       	rjmp	.+142    	; 0x927c <sync_fs+0xb4>
    91ee:	40 e0       	ldi	r20, 0x00	; 0
    91f0:	52 e0       	ldi	r21, 0x02	; 2
    91f2:	60 e0       	ldi	r22, 0x00	; 0
    91f4:	70 e0       	ldi	r23, 0x00	; 0
    91f6:	7e 01       	movw	r14, r28
    91f8:	85 e3       	ldi	r24, 0x35	; 53
    91fa:	e8 0e       	add	r14, r24
    91fc:	f1 1c       	adc	r15, r1
    91fe:	c7 01       	movw	r24, r14
    9200:	93 de       	rcall	.-730    	; 0x8f28 <mem_set>
    9202:	85 e5       	ldi	r24, 0x55	; 85
    9204:	fe 01       	movw	r30, r28
    9206:	ed 5c       	subi	r30, 0xCD	; 205
    9208:	fd 4f       	sbci	r31, 0xFD	; 253
    920a:	80 83       	st	Z, r24
    920c:	8a ea       	ldi	r24, 0xAA	; 170
    920e:	31 96       	adiw	r30, 0x01	; 1
    9210:	80 83       	st	Z, r24
    9212:	82 e5       	ldi	r24, 0x52	; 82
    9214:	8d ab       	std	Y+53, r24	; 0x35
    9216:	8e ab       	std	Y+54, r24	; 0x36
    9218:	81 e6       	ldi	r24, 0x61	; 97
    921a:	8f ab       	std	Y+55, r24	; 0x37
    921c:	91 e4       	ldi	r25, 0x41	; 65
    921e:	98 af       	std	Y+56, r25	; 0x38
    9220:	22 e7       	ldi	r18, 0x72	; 114
    9222:	7b 97       	sbiw	r30, 0x1b	; 27
    9224:	20 83       	st	Z, r18
    9226:	31 96       	adiw	r30, 0x01	; 1
    9228:	20 83       	st	Z, r18
    922a:	31 96       	adiw	r30, 0x01	; 1
    922c:	90 83       	st	Z, r25
    922e:	31 96       	adiw	r30, 0x01	; 1
    9230:	80 83       	st	Z, r24
    9232:	49 89       	ldd	r20, Y+17	; 0x11
    9234:	5a 89       	ldd	r21, Y+18	; 0x12
    9236:	6b 89       	ldd	r22, Y+19	; 0x13
    9238:	7c 89       	ldd	r23, Y+20	; 0x14
    923a:	ce 01       	movw	r24, r28
    923c:	83 5e       	subi	r24, 0xE3	; 227
    923e:	9d 4f       	sbci	r25, 0xFD	; 253
    9240:	6d de       	rcall	.-806    	; 0x8f1c <st_dword>
    9242:	4d 85       	ldd	r20, Y+13	; 0x0d
    9244:	5e 85       	ldd	r21, Y+14	; 0x0e
    9246:	6f 85       	ldd	r22, Y+15	; 0x0f
    9248:	78 89       	ldd	r23, Y+16	; 0x10
    924a:	ce 01       	movw	r24, r28
    924c:	8f 5d       	subi	r24, 0xDF	; 223
    924e:	9d 4f       	sbci	r25, 0xFD	; 253
    9250:	65 de       	rcall	.-822    	; 0x8f1c <st_dword>
    9252:	89 a1       	ldd	r24, Y+33	; 0x21
    9254:	9a a1       	ldd	r25, Y+34	; 0x22
    9256:	ab a1       	ldd	r26, Y+35	; 0x23
    9258:	bc a1       	ldd	r27, Y+36	; 0x24
    925a:	9c 01       	movw	r18, r24
    925c:	ad 01       	movw	r20, r26
    925e:	2f 5f       	subi	r18, 0xFF	; 255
    9260:	3f 4f       	sbci	r19, 0xFF	; 255
    9262:	4f 4f       	sbci	r20, 0xFF	; 255
    9264:	5f 4f       	sbci	r21, 0xFF	; 255
    9266:	29 ab       	std	Y+49, r18	; 0x31
    9268:	3a ab       	std	Y+50, r19	; 0x32
    926a:	4b ab       	std	Y+51, r20	; 0x33
    926c:	5c ab       	std	Y+52, r21	; 0x34
    926e:	01 e0       	ldi	r16, 0x01	; 1
    9270:	10 e0       	ldi	r17, 0x00	; 0
    9272:	b7 01       	movw	r22, r14
    9274:	89 81       	ldd	r24, Y+1	; 0x01
    9276:	0e 94 bb 6e 	call	0xdd76	; 0xdd76 <disk_write>
    927a:	1c 82       	std	Y+4, r1	; 0x04
    927c:	40 e0       	ldi	r20, 0x00	; 0
    927e:	50 e0       	ldi	r21, 0x00	; 0
    9280:	60 e0       	ldi	r22, 0x00	; 0
    9282:	89 81       	ldd	r24, Y+1	; 0x01
    9284:	0e 94 cb 6e 	call	0xdd96	; 0xdd96 <disk_ioctl>
    9288:	31 e0       	ldi	r19, 0x01	; 1
    928a:	20 e0       	ldi	r18, 0x00	; 0
    928c:	89 2b       	or	r24, r25
    928e:	09 f4       	brne	.+2      	; 0x9292 <sync_fs+0xca>
    9290:	30 e0       	ldi	r19, 0x00	; 0
    9292:	83 2f       	mov	r24, r19
    9294:	92 2f       	mov	r25, r18
    9296:	cd b7       	in	r28, 0x3d	; 61
    9298:	de b7       	in	r29, 0x3e	; 62
    929a:	e6 e0       	ldi	r30, 0x06	; 6
    929c:	0c 94 5c ec 	jmp	0x1d8b8	; 0x1d8b8 <__epilogue_restores__+0x18>

000092a0 <move_window>:
    92a0:	8f 92       	push	r8
    92a2:	9f 92       	push	r9
    92a4:	af 92       	push	r10
    92a6:	bf 92       	push	r11
    92a8:	ef 92       	push	r14
    92aa:	ff 92       	push	r15
    92ac:	0f 93       	push	r16
    92ae:	1f 93       	push	r17
    92b0:	cf 93       	push	r28
    92b2:	df 93       	push	r29
    92b4:	ec 01       	movw	r28, r24
    92b6:	4a 01       	movw	r8, r20
    92b8:	5b 01       	movw	r10, r22
    92ba:	89 a9       	ldd	r24, Y+49	; 0x31
    92bc:	9a a9       	ldd	r25, Y+50	; 0x32
    92be:	ab a9       	ldd	r26, Y+51	; 0x33
    92c0:	bc a9       	ldd	r27, Y+52	; 0x34
    92c2:	84 17       	cp	r24, r20
    92c4:	95 07       	cpc	r25, r21
    92c6:	a6 07       	cpc	r26, r22
    92c8:	b7 07       	cpc	r27, r23
    92ca:	e9 f0       	breq	.+58     	; 0x9306 <move_window+0x66>
    92cc:	ce 01       	movw	r24, r28
    92ce:	73 df       	rcall	.-282    	; 0x91b6 <sync_window>
    92d0:	7c 01       	movw	r14, r24
    92d2:	89 2b       	or	r24, r25
    92d4:	d1 f4       	brne	.+52     	; 0x930a <move_window+0x6a>
    92d6:	01 e0       	ldi	r16, 0x01	; 1
    92d8:	10 e0       	ldi	r17, 0x00	; 0
    92da:	a5 01       	movw	r20, r10
    92dc:	94 01       	movw	r18, r8
    92de:	be 01       	movw	r22, r28
    92e0:	6b 5c       	subi	r22, 0xCB	; 203
    92e2:	7f 4f       	sbci	r23, 0xFF	; 255
    92e4:	89 81       	ldd	r24, Y+1	; 0x01
    92e6:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <disk_read>
    92ea:	89 2b       	or	r24, r25
    92ec:	39 f0       	breq	.+14     	; 0x92fc <move_window+0x5c>
    92ee:	ee 24       	eor	r14, r14
    92f0:	e3 94       	inc	r14
    92f2:	f1 2c       	mov	r15, r1
    92f4:	88 24       	eor	r8, r8
    92f6:	8a 94       	dec	r8
    92f8:	98 2c       	mov	r9, r8
    92fa:	54 01       	movw	r10, r8
    92fc:	89 aa       	std	Y+49, r8	; 0x31
    92fe:	9a aa       	std	Y+50, r9	; 0x32
    9300:	ab aa       	std	Y+51, r10	; 0x33
    9302:	bc aa       	std	Y+52, r11	; 0x34
    9304:	02 c0       	rjmp	.+4      	; 0x930a <move_window+0x6a>
    9306:	e1 2c       	mov	r14, r1
    9308:	f1 2c       	mov	r15, r1
    930a:	c7 01       	movw	r24, r14
    930c:	df 91       	pop	r29
    930e:	cf 91       	pop	r28
    9310:	1f 91       	pop	r17
    9312:	0f 91       	pop	r16
    9314:	ff 90       	pop	r15
    9316:	ef 90       	pop	r14
    9318:	bf 90       	pop	r11
    931a:	af 90       	pop	r10
    931c:	9f 90       	pop	r9
    931e:	8f 90       	pop	r8
    9320:	08 95       	ret

00009322 <check_fs>:
    9322:	cf 93       	push	r28
    9324:	df 93       	push	r29
    9326:	ec 01       	movw	r28, r24
    9328:	1b 82       	std	Y+3, r1	; 0x03
    932a:	8f ef       	ldi	r24, 0xFF	; 255
    932c:	9f ef       	ldi	r25, 0xFF	; 255
    932e:	dc 01       	movw	r26, r24
    9330:	89 ab       	std	Y+49, r24	; 0x31
    9332:	9a ab       	std	Y+50, r25	; 0x32
    9334:	ab ab       	std	Y+51, r26	; 0x33
    9336:	bc ab       	std	Y+52, r27	; 0x34
    9338:	ce 01       	movw	r24, r28
    933a:	b2 df       	rcall	.-156    	; 0x92a0 <move_window>
    933c:	89 2b       	or	r24, r25
    933e:	31 f5       	brne	.+76     	; 0x938c <check_fs+0x6a>
    9340:	fe 01       	movw	r30, r28
    9342:	ed 5c       	subi	r30, 0xCD	; 205
    9344:	fd 4f       	sbci	r31, 0xFD	; 253
    9346:	80 81       	ld	r24, Z
    9348:	91 81       	ldd	r25, Z+1	; 0x01
    934a:	85 35       	cpi	r24, 0x55	; 85
    934c:	9a 4a       	sbci	r25, 0xAA	; 170
    934e:	01 f5       	brne	.+64     	; 0x9390 <check_fs+0x6e>
    9350:	8d a9       	ldd	r24, Y+53	; 0x35
    9352:	89 3e       	cpi	r24, 0xE9	; 233
    9354:	29 f0       	breq	.+10     	; 0x9360 <check_fs+0x3e>
    9356:	8b 3e       	cpi	r24, 0xEB	; 235
    9358:	f9 f4       	brne	.+62     	; 0x9398 <check_fs+0x76>
    935a:	8f a9       	ldd	r24, Y+55	; 0x37
    935c:	80 39       	cpi	r24, 0x90	; 144
    935e:	e1 f4       	brne	.+56     	; 0x9398 <check_fs+0x76>
    9360:	ce 01       	movw	r24, r28
    9362:	85 59       	subi	r24, 0x95	; 149
    9364:	9f 4f       	sbci	r25, 0xFF	; 255
    9366:	c5 dd       	rcall	.-1142   	; 0x8ef2 <ld_dword>
    9368:	dc 01       	movw	r26, r24
    936a:	cb 01       	movw	r24, r22
    936c:	bb 27       	eor	r27, r27
    936e:	86 34       	cpi	r24, 0x46	; 70
    9370:	91 44       	sbci	r25, 0x41	; 65
    9372:	a4 45       	sbci	r26, 0x54	; 84
    9374:	b1 05       	cpc	r27, r1
    9376:	71 f0       	breq	.+28     	; 0x9394 <check_fs+0x72>
    9378:	ce 01       	movw	r24, r28
    937a:	89 57       	subi	r24, 0x79	; 121
    937c:	9f 4f       	sbci	r25, 0xFF	; 255
    937e:	b9 dd       	rcall	.-1166   	; 0x8ef2 <ld_dword>
    9380:	66 34       	cpi	r22, 0x46	; 70
    9382:	71 44       	sbci	r23, 0x41	; 65
    9384:	84 45       	sbci	r24, 0x54	; 84
    9386:	93 43       	sbci	r25, 0x33	; 51
    9388:	39 f4       	brne	.+14     	; 0x9398 <check_fs+0x76>
    938a:	04 c0       	rjmp	.+8      	; 0x9394 <check_fs+0x72>
    938c:	84 e0       	ldi	r24, 0x04	; 4
    938e:	05 c0       	rjmp	.+10     	; 0x939a <check_fs+0x78>
    9390:	83 e0       	ldi	r24, 0x03	; 3
    9392:	03 c0       	rjmp	.+6      	; 0x939a <check_fs+0x78>
    9394:	80 e0       	ldi	r24, 0x00	; 0
    9396:	01 c0       	rjmp	.+2      	; 0x939a <check_fs+0x78>
    9398:	82 e0       	ldi	r24, 0x02	; 2
    939a:	df 91       	pop	r29
    939c:	cf 91       	pop	r28
    939e:	08 95       	ret

000093a0 <find_volume>:
    93a0:	ad e1       	ldi	r26, 0x1D	; 29
    93a2:	b0 e0       	ldi	r27, 0x00	; 0
    93a4:	e6 ed       	ldi	r30, 0xD6	; 214
    93a6:	f9 e4       	ldi	r31, 0x49	; 73
    93a8:	0c 94 34 ec 	jmp	0x1d868	; 0x1d868 <__prologue_saves__>
    93ac:	5b 01       	movw	r10, r22
    93ae:	f4 2e       	mov	r15, r20
    93b0:	db 01       	movw	r26, r22
    93b2:	1d 92       	st	X+, r1
    93b4:	1c 92       	st	X, r1
    93b6:	34 de       	rcall	.-920    	; 0x9020 <get_ldnumber>
    93b8:	6c 01       	movw	r12, r24
    93ba:	97 fd       	sbrc	r25, 7
    93bc:	1b c2       	rjmp	.+1078   	; 0x97f4 <find_volume+0x454>
    93be:	fc 01       	movw	r30, r24
    93c0:	ee 0f       	add	r30, r30
    93c2:	ff 1f       	adc	r31, r31
    93c4:	ee 57       	subi	r30, 0x7E	; 126
    93c6:	f7 4e       	sbci	r31, 0xE7	; 231
    93c8:	00 81       	ld	r16, Z
    93ca:	11 81       	ldd	r17, Z+1	; 0x01
    93cc:	01 15       	cp	r16, r1
    93ce:	11 05       	cpc	r17, r1
    93d0:	09 f4       	brne	.+2      	; 0x93d4 <find_volume+0x34>
    93d2:	13 c2       	rjmp	.+1062   	; 0x97fa <find_volume+0x45a>
    93d4:	f5 01       	movw	r30, r10
    93d6:	11 83       	std	Z+1, r17	; 0x01
    93d8:	00 83       	st	Z, r16
    93da:	ff 2d       	mov	r31, r15
    93dc:	fe 7f       	andi	r31, 0xFE	; 254
    93de:	ff 2e       	mov	r15, r31
    93e0:	d8 01       	movw	r26, r16
    93e2:	8c 91       	ld	r24, X
    93e4:	88 23       	and	r24, r24
    93e6:	71 f0       	breq	.+28     	; 0x9404 <find_volume+0x64>
    93e8:	11 96       	adiw	r26, 0x01	; 1
    93ea:	8c 91       	ld	r24, X
    93ec:	0e 94 9f 6e 	call	0xdd3e	; 0xdd3e <disk_status>
    93f0:	80 fd       	sbrc	r24, 0
    93f2:	08 c0       	rjmp	.+16     	; 0x9404 <find_volume+0x64>
    93f4:	ff 20       	and	r15, r15
    93f6:	09 f4       	brne	.+2      	; 0x93fa <find_volume+0x5a>
    93f8:	03 c2       	rjmp	.+1030   	; 0x9800 <find_volume+0x460>
    93fa:	82 ff       	sbrs	r24, 2
    93fc:	01 c2       	rjmp	.+1026   	; 0x9800 <find_volume+0x460>
    93fe:	8a e0       	ldi	r24, 0x0A	; 10
    9400:	90 e0       	ldi	r25, 0x00	; 0
    9402:	73 c2       	rjmp	.+1254   	; 0x98ea <find_volume+0x54a>
    9404:	f8 01       	movw	r30, r16
    9406:	10 82       	st	Z, r1
    9408:	c1 82       	std	Z+1, r12	; 0x01
    940a:	8c 2d       	mov	r24, r12
    940c:	0e 94 a5 6e 	call	0xdd4a	; 0xdd4a <disk_initialize>
    9410:	80 fd       	sbrc	r24, 0
    9412:	f9 c1       	rjmp	.+1010   	; 0x9806 <find_volume+0x466>
    9414:	ff 20       	and	r15, r15
    9416:	11 f0       	breq	.+4      	; 0x941c <find_volume+0x7c>
    9418:	82 fd       	sbrc	r24, 2
    941a:	f1 cf       	rjmp	.-30     	; 0x93fe <find_volume+0x5e>
    941c:	40 e0       	ldi	r20, 0x00	; 0
    941e:	50 e0       	ldi	r21, 0x00	; 0
    9420:	ba 01       	movw	r22, r20
    9422:	c8 01       	movw	r24, r16
    9424:	7e df       	rcall	.-260    	; 0x9322 <check_fs>
    9426:	82 30       	cpi	r24, 0x02	; 2
    9428:	09 f0       	breq	.+2      	; 0x942c <find_volume+0x8c>
    942a:	41 c0       	rjmp	.+130    	; 0x94ae <find_volume+0x10e>
    942c:	9e 01       	movw	r18, r28
    942e:	2f 5f       	subi	r18, 0xFF	; 255
    9430:	3f 4f       	sbci	r19, 0xFF	; 255
    9432:	79 01       	movw	r14, r18
    9434:	68 01       	movw	r12, r16
    9436:	35 e0       	ldi	r19, 0x05	; 5
    9438:	c3 1a       	sub	r12, r19
    943a:	3e ef       	ldi	r19, 0xFE	; 254
    943c:	d3 0a       	sbc	r13, r19
    943e:	48 01       	movw	r8, r16
    9440:	45 ec       	ldi	r20, 0xC5	; 197
    9442:	84 1a       	sub	r8, r20
    9444:	4d ef       	ldi	r20, 0xFD	; 253
    9446:	94 0a       	sbc	r9, r20
    9448:	57 01       	movw	r10, r14
    944a:	f6 01       	movw	r30, r12
    944c:	34 97       	sbiw	r30, 0x04	; 4
    944e:	80 81       	ld	r24, Z
    9450:	88 23       	and	r24, r24
    9452:	19 f0       	breq	.+6      	; 0x945a <find_volume+0xba>
    9454:	c6 01       	movw	r24, r12
    9456:	4d dd       	rcall	.-1382   	; 0x8ef2 <ld_dword>
    9458:	03 c0       	rjmp	.+6      	; 0x9460 <find_volume+0xc0>
    945a:	60 e0       	ldi	r22, 0x00	; 0
    945c:	70 e0       	ldi	r23, 0x00	; 0
    945e:	cb 01       	movw	r24, r22
    9460:	d5 01       	movw	r26, r10
    9462:	6d 93       	st	X+, r22
    9464:	7d 93       	st	X+, r23
    9466:	8d 93       	st	X+, r24
    9468:	9d 93       	st	X+, r25
    946a:	5d 01       	movw	r10, r26
    946c:	b0 e1       	ldi	r27, 0x10	; 16
    946e:	cb 0e       	add	r12, r27
    9470:	d1 1c       	adc	r13, r1
    9472:	c8 14       	cp	r12, r8
    9474:	d9 04       	cpc	r13, r9
    9476:	49 f7       	brne	.-46     	; 0x944a <find_volume+0xaa>
    9478:	6e 01       	movw	r12, r28
    947a:	e1 e1       	ldi	r30, 0x11	; 17
    947c:	ce 0e       	add	r12, r30
    947e:	d1 1c       	adc	r13, r1
    9480:	d7 01       	movw	r26, r14
    9482:	8d 90       	ld	r8, X+
    9484:	9d 90       	ld	r9, X+
    9486:	ad 90       	ld	r10, X+
    9488:	bd 90       	ld	r11, X+
    948a:	7d 01       	movw	r14, r26
    948c:	81 14       	cp	r8, r1
    948e:	91 04       	cpc	r9, r1
    9490:	a1 04       	cpc	r10, r1
    9492:	b1 04       	cpc	r11, r1
    9494:	39 f0       	breq	.+14     	; 0x94a4 <find_volume+0x104>
    9496:	b5 01       	movw	r22, r10
    9498:	a4 01       	movw	r20, r8
    949a:	c8 01       	movw	r24, r16
    949c:	42 df       	rcall	.-380    	; 0x9322 <check_fs>
    949e:	82 30       	cpi	r24, 0x02	; 2
    94a0:	10 f4       	brcc	.+4      	; 0x94a6 <find_volume+0x106>
    94a2:	10 c0       	rjmp	.+32     	; 0x94c4 <find_volume+0x124>
    94a4:	83 e0       	ldi	r24, 0x03	; 3
    94a6:	ce 14       	cp	r12, r14
    94a8:	df 04       	cpc	r13, r15
    94aa:	51 f7       	brne	.-44     	; 0x9480 <find_volume+0xe0>
    94ac:	af c1       	rjmp	.+862    	; 0x980c <find_volume+0x46c>
    94ae:	84 30       	cpi	r24, 0x04	; 4
    94b0:	09 f4       	brne	.+2      	; 0x94b4 <find_volume+0x114>
    94b2:	af c1       	rjmp	.+862    	; 0x9812 <find_volume+0x472>
    94b4:	82 30       	cpi	r24, 0x02	; 2
    94b6:	18 f0       	brcs	.+6      	; 0x94be <find_volume+0x11e>
    94b8:	8d e0       	ldi	r24, 0x0D	; 13
    94ba:	90 e0       	ldi	r25, 0x00	; 0
    94bc:	16 c2       	rjmp	.+1068   	; 0x98ea <find_volume+0x54a>
    94be:	81 2c       	mov	r8, r1
    94c0:	91 2c       	mov	r9, r1
    94c2:	54 01       	movw	r10, r8
    94c4:	f8 01       	movw	r30, r16
    94c6:	e0 5c       	subi	r30, 0xC0	; 192
    94c8:	ff 4f       	sbci	r31, 0xFF	; 255
    94ca:	80 81       	ld	r24, Z
    94cc:	91 81       	ldd	r25, Z+1	; 0x01
    94ce:	81 15       	cp	r24, r1
    94d0:	92 40       	sbci	r25, 0x02	; 2
    94d2:	91 f7       	brne	.-28     	; 0x94b8 <find_volume+0x118>
    94d4:	3b 96       	adiw	r30, 0x0b	; 11
    94d6:	80 81       	ld	r24, Z
    94d8:	91 81       	ldd	r25, Z+1	; 0x01
    94da:	00 97       	sbiw	r24, 0x00	; 0
    94dc:	41 f0       	breq	.+16     	; 0x94ee <find_volume+0x14e>
    94de:	9c 01       	movw	r18, r24
    94e0:	40 e0       	ldi	r20, 0x00	; 0
    94e2:	50 e0       	ldi	r21, 0x00	; 0
    94e4:	2d 8b       	std	Y+21, r18	; 0x15
    94e6:	3e 8b       	std	Y+22, r19	; 0x16
    94e8:	4f 8b       	std	Y+23, r20	; 0x17
    94ea:	58 8f       	std	Y+24, r21	; 0x18
    94ec:	08 c0       	rjmp	.+16     	; 0x94fe <find_volume+0x15e>
    94ee:	c8 01       	movw	r24, r16
    94f0:	87 5a       	subi	r24, 0xA7	; 167
    94f2:	9f 4f       	sbci	r25, 0xFF	; 255
    94f4:	fe dc       	rcall	.-1540   	; 0x8ef2 <ld_dword>
    94f6:	6d 8b       	std	Y+21, r22	; 0x15
    94f8:	7e 8b       	std	Y+22, r23	; 0x16
    94fa:	8f 8b       	std	Y+23, r24	; 0x17
    94fc:	98 8f       	std	Y+24, r25	; 0x18
    94fe:	8d 89       	ldd	r24, Y+21	; 0x15
    9500:	9e 89       	ldd	r25, Y+22	; 0x16
    9502:	af 89       	ldd	r26, Y+23	; 0x17
    9504:	b8 8d       	ldd	r27, Y+24	; 0x18
    9506:	f8 01       	movw	r30, r16
    9508:	85 8f       	std	Z+29, r24	; 0x1d
    950a:	96 8f       	std	Z+30, r25	; 0x1e
    950c:	a7 8f       	std	Z+31, r26	; 0x1f
    950e:	b0 a3       	std	Z+32, r27	; 0x20
    9510:	eb 5b       	subi	r30, 0xBB	; 187
    9512:	ff 4f       	sbci	r31, 0xFF	; 255
    9514:	70 80       	ld	r7, Z
    9516:	d8 01       	movw	r26, r16
    9518:	12 96       	adiw	r26, 0x02	; 2
    951a:	7c 92       	st	X, r7
    951c:	8f ef       	ldi	r24, 0xFF	; 255
    951e:	87 0d       	add	r24, r7
    9520:	82 30       	cpi	r24, 0x02	; 2
    9522:	50 f6       	brcc	.-108    	; 0x94b8 <find_volume+0x118>
    9524:	33 97       	sbiw	r30, 0x03	; 3
    9526:	b0 81       	ld	r27, Z
    9528:	b9 8f       	std	Y+25, r27	; 0x19
    952a:	8b 2f       	mov	r24, r27
    952c:	90 e0       	ldi	r25, 0x00	; 0
    952e:	f8 01       	movw	r30, r16
    9530:	92 87       	std	Z+10, r25	; 0x0a
    9532:	81 87       	std	Z+9, r24	; 0x09
    9534:	00 97       	sbiw	r24, 0x00	; 0
    9536:	09 f4       	brne	.+2      	; 0x953a <find_volume+0x19a>
    9538:	bf cf       	rjmp	.-130    	; 0x94b8 <find_volume+0x118>
    953a:	9c 01       	movw	r18, r24
    953c:	21 50       	subi	r18, 0x01	; 1
    953e:	31 09       	sbc	r19, r1
    9540:	82 23       	and	r24, r18
    9542:	93 23       	and	r25, r19
    9544:	89 2b       	or	r24, r25
    9546:	09 f0       	breq	.+2      	; 0x954a <find_volume+0x1aa>
    9548:	b7 cf       	rjmp	.-146    	; 0x94b8 <find_volume+0x118>
    954a:	ea 5b       	subi	r30, 0xBA	; 186
    954c:	ff 4f       	sbci	r31, 0xFF	; 255
    954e:	20 80       	ld	r2, Z
    9550:	31 80       	ldd	r3, Z+1	; 0x01
    9552:	d8 01       	movw	r26, r16
    9554:	18 96       	adiw	r26, 0x08	; 8
    9556:	3c 92       	st	X, r3
    9558:	2e 92       	st	-X, r2
    955a:	17 97       	sbiw	r26, 0x07	; 7
    955c:	c1 01       	movw	r24, r2
    955e:	8f 70       	andi	r24, 0x0F	; 15
    9560:	99 27       	eor	r25, r25
    9562:	89 2b       	or	r24, r25
    9564:	09 f0       	breq	.+2      	; 0x9568 <find_volume+0x1c8>
    9566:	a8 cf       	rjmp	.-176    	; 0x94b8 <find_volume+0x118>
    9568:	32 96       	adiw	r30, 0x02	; 2
    956a:	80 81       	ld	r24, Z
    956c:	91 81       	ldd	r25, Z+1	; 0x01
    956e:	6c 01       	movw	r12, r24
    9570:	e1 2c       	mov	r14, r1
    9572:	f1 2c       	mov	r15, r1
    9574:	89 2b       	or	r24, r25
    9576:	31 f4       	brne	.+12     	; 0x9584 <find_volume+0x1e4>
    9578:	c8 01       	movw	r24, r16
    957a:	8b 5a       	subi	r24, 0xAB	; 171
    957c:	9f 4f       	sbci	r25, 0xFF	; 255
    957e:	b9 dc       	rcall	.-1678   	; 0x8ef2 <ld_dword>
    9580:	6b 01       	movw	r12, r22
    9582:	7c 01       	movw	r14, r24
    9584:	f8 01       	movw	r30, r16
    9586:	ed 5b       	subi	r30, 0xBD	; 189
    9588:	ff 4f       	sbci	r31, 0xFF	; 255
    958a:	01 90       	ld	r0, Z+
    958c:	f0 81       	ld	r31, Z
    958e:	e0 2d       	mov	r30, r0
    9590:	30 97       	sbiw	r30, 0x00	; 0
    9592:	09 f4       	brne	.+2      	; 0x9596 <find_volume+0x1f6>
    9594:	91 cf       	rjmp	.-222    	; 0x94b8 <find_volume+0x118>
    9596:	a7 2d       	mov	r26, r7
    9598:	b0 e0       	ldi	r27, 0x00	; 0
    959a:	2d 89       	ldd	r18, Y+21	; 0x15
    959c:	3e 89       	ldd	r19, Y+22	; 0x16
    959e:	4f 89       	ldd	r20, Y+23	; 0x17
    95a0:	58 8d       	ldd	r21, Y+24	; 0x18
    95a2:	0e 94 14 ec 	call	0x1d828	; 0x1d828 <__muluhisi3>
    95a6:	2b 01       	movw	r4, r22
    95a8:	3c 01       	movw	r6, r24
    95aa:	9f 01       	movw	r18, r30
    95ac:	40 e0       	ldi	r20, 0x00	; 0
    95ae:	50 e0       	ldi	r21, 0x00	; 0
    95b0:	2a 8f       	std	Y+26, r18	; 0x1a
    95b2:	3b 8f       	std	Y+27, r19	; 0x1b
    95b4:	4c 8f       	std	Y+28, r20	; 0x1c
    95b6:	5d 8f       	std	Y+29, r21	; 0x1d
    95b8:	c1 01       	movw	r24, r2
    95ba:	e4 e0       	ldi	r30, 0x04	; 4
    95bc:	96 95       	lsr	r25
    95be:	87 95       	ror	r24
    95c0:	ea 95       	dec	r30
    95c2:	e1 f7       	brne	.-8      	; 0x95bc <find_volume+0x21c>
    95c4:	ba 01       	movw	r22, r20
    95c6:	a9 01       	movw	r20, r18
    95c8:	48 0f       	add	r20, r24
    95ca:	59 1f       	adc	r21, r25
    95cc:	61 1d       	adc	r22, r1
    95ce:	71 1d       	adc	r23, r1
    95d0:	db 01       	movw	r26, r22
    95d2:	ca 01       	movw	r24, r20
    95d4:	84 0d       	add	r24, r4
    95d6:	95 1d       	adc	r25, r5
    95d8:	a6 1d       	adc	r26, r6
    95da:	b7 1d       	adc	r27, r7
    95dc:	89 8b       	std	Y+17, r24	; 0x11
    95de:	9a 8b       	std	Y+18, r25	; 0x12
    95e0:	ab 8b       	std	Y+19, r26	; 0x13
    95e2:	bc 8b       	std	Y+20, r27	; 0x14
    95e4:	c8 16       	cp	r12, r24
    95e6:	d9 06       	cpc	r13, r25
    95e8:	ea 06       	cpc	r14, r26
    95ea:	fb 06       	cpc	r15, r27
    95ec:	08 f4       	brcc	.+2      	; 0x95f0 <find_volume+0x250>
    95ee:	64 cf       	rjmp	.-312    	; 0x94b8 <find_volume+0x118>
    95f0:	c7 01       	movw	r24, r14
    95f2:	b6 01       	movw	r22, r12
    95f4:	29 89       	ldd	r18, Y+17	; 0x11
    95f6:	3a 89       	ldd	r19, Y+18	; 0x12
    95f8:	4b 89       	ldd	r20, Y+19	; 0x13
    95fa:	5c 89       	ldd	r21, Y+20	; 0x14
    95fc:	62 1b       	sub	r22, r18
    95fe:	73 0b       	sbc	r23, r19
    9600:	84 0b       	sbc	r24, r20
    9602:	95 0b       	sbc	r25, r21
    9604:	a9 8d       	ldd	r26, Y+25	; 0x19
    9606:	2a 2f       	mov	r18, r26
    9608:	30 e0       	ldi	r19, 0x00	; 0
    960a:	40 e0       	ldi	r20, 0x00	; 0
    960c:	50 e0       	ldi	r21, 0x00	; 0
    960e:	0e 94 c7 eb 	call	0x1d78e	; 0x1d78e <__udivmodsi4>
    9612:	21 15       	cp	r18, r1
    9614:	31 05       	cpc	r19, r1
    9616:	41 05       	cpc	r20, r1
    9618:	51 05       	cpc	r21, r1
    961a:	09 f4       	brne	.+2      	; 0x961e <find_volume+0x27e>
    961c:	4d cf       	rjmp	.-358    	; 0x94b8 <find_volume+0x118>
    961e:	69 01       	movw	r12, r18
    9620:	7a 01       	movw	r14, r20
    9622:	b2 e0       	ldi	r27, 0x02	; 2
    9624:	cb 0e       	add	r12, r27
    9626:	d1 1c       	adc	r13, r1
    9628:	e1 1c       	adc	r14, r1
    962a:	f1 1c       	adc	r15, r1
    962c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    962e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    9630:	ac 8d       	ldd	r26, Y+28	; 0x1c
    9632:	bd 8d       	ldd	r27, Y+29	; 0x1d
    9634:	88 0d       	add	r24, r8
    9636:	99 1d       	adc	r25, r9
    9638:	aa 1d       	adc	r26, r10
    963a:	bb 1d       	adc	r27, r11
    963c:	8a 8f       	std	Y+26, r24	; 0x1a
    963e:	9b 8f       	std	Y+27, r25	; 0x1b
    9640:	ac 8f       	std	Y+28, r26	; 0x1c
    9642:	bd 8f       	std	Y+29, r27	; 0x1d
    9644:	89 89       	ldd	r24, Y+17	; 0x11
    9646:	9a 89       	ldd	r25, Y+18	; 0x12
    9648:	ab 89       	ldd	r26, Y+19	; 0x13
    964a:	bc 89       	ldd	r27, Y+20	; 0x14
    964c:	88 0d       	add	r24, r8
    964e:	99 1d       	adc	r25, r9
    9650:	aa 1d       	adc	r26, r10
    9652:	bb 1d       	adc	r27, r11
    9654:	89 8b       	std	Y+17, r24	; 0x11
    9656:	9a 8b       	std	Y+18, r25	; 0x12
    9658:	ab 8b       	std	Y+19, r26	; 0x13
    965a:	bc 8b       	std	Y+20, r27	; 0x14
    965c:	26 3f       	cpi	r18, 0xF6	; 246
    965e:	9f ef       	ldi	r25, 0xFF	; 255
    9660:	39 07       	cpc	r19, r25
    9662:	41 05       	cpc	r20, r1
    9664:	51 05       	cpc	r21, r1
    9666:	08 f0       	brcs	.+2      	; 0x966a <find_volume+0x2ca>
    9668:	d7 c0       	rjmp	.+430    	; 0x9818 <find_volume+0x478>
    966a:	f8 01       	movw	r30, r16
    966c:	c1 8e       	std	Z+25, r12	; 0x19
    966e:	d2 8e       	std	Z+26, r13	; 0x1a
    9670:	e3 8e       	std	Z+27, r14	; 0x1b
    9672:	f4 8e       	std	Z+28, r15	; 0x1c
    9674:	26 3f       	cpi	r18, 0xF6	; 246
    9676:	3f 40       	sbci	r19, 0x0F	; 15
    9678:	41 05       	cpc	r20, r1
    967a:	51 05       	cpc	r21, r1
    967c:	08 f0       	brcs	.+2      	; 0x9680 <find_volume+0x2e0>
    967e:	0a c1       	rjmp	.+532    	; 0x9894 <find_volume+0x4f4>
    9680:	81 a2       	std	Z+33, r8	; 0x21
    9682:	92 a2       	std	Z+34, r9	; 0x22
    9684:	a3 a2       	std	Z+35, r10	; 0x23
    9686:	b4 a2       	std	Z+36, r11	; 0x24
    9688:	2a 8d       	ldd	r18, Y+26	; 0x1a
    968a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    968c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    968e:	5d 8d       	ldd	r21, Y+29	; 0x1d
    9690:	25 a3       	std	Z+37, r18	; 0x25
    9692:	36 a3       	std	Z+38, r19	; 0x26
    9694:	47 a3       	std	Z+39, r20	; 0x27
    9696:	50 a7       	std	Z+40, r21	; 0x28
    9698:	29 89       	ldd	r18, Y+17	; 0x11
    969a:	3a 89       	ldd	r19, Y+18	; 0x12
    969c:	4b 89       	ldd	r20, Y+19	; 0x13
    969e:	5c 89       	ldd	r21, Y+20	; 0x14
    96a0:	25 a7       	std	Z+45, r18	; 0x2d
    96a2:	36 a7       	std	Z+46, r19	; 0x2e
    96a4:	47 a7       	std	Z+47, r20	; 0x2f
    96a6:	50 ab       	std	Z+48, r21	; 0x30
    96a8:	21 14       	cp	r2, r1
    96aa:	31 04       	cpc	r3, r1
    96ac:	09 f4       	brne	.+2      	; 0x96b0 <find_volume+0x310>
    96ae:	04 cf       	rjmp	.-504    	; 0x94b8 <find_volume+0x118>
    96b0:	2a 8d       	ldd	r18, Y+26	; 0x1a
    96b2:	3b 8d       	ldd	r19, Y+27	; 0x1b
    96b4:	4c 8d       	ldd	r20, Y+28	; 0x1c
    96b6:	5d 8d       	ldd	r21, Y+29	; 0x1d
    96b8:	42 0e       	add	r4, r18
    96ba:	53 1e       	adc	r5, r19
    96bc:	64 1e       	adc	r6, r20
    96be:	75 1e       	adc	r7, r21
    96c0:	41 a6       	std	Z+41, r4	; 0x29
    96c2:	52 a6       	std	Z+42, r5	; 0x2a
    96c4:	63 a6       	std	Z+43, r6	; 0x2b
    96c6:	74 a6       	std	Z+44, r7	; 0x2c
    96c8:	a3 e0       	ldi	r26, 0x03	; 3
    96ca:	b0 e0       	ldi	r27, 0x00	; 0
    96cc:	a7 01       	movw	r20, r14
    96ce:	96 01       	movw	r18, r12
    96d0:	0e 94 14 ec 	call	0x1d828	; 0x1d828 <__muluhisi3>
    96d4:	dc 01       	movw	r26, r24
    96d6:	cb 01       	movw	r24, r22
    96d8:	b6 95       	lsr	r27
    96da:	a7 95       	ror	r26
    96dc:	97 95       	ror	r25
    96de:	87 95       	ror	r24
    96e0:	e1 e0       	ldi	r30, 0x01	; 1
    96e2:	ce 22       	and	r12, r30
    96e4:	dd 24       	eor	r13, r13
    96e6:	ee 24       	eor	r14, r14
    96e8:	ff 24       	eor	r15, r15
    96ea:	c8 0e       	add	r12, r24
    96ec:	d9 1e       	adc	r13, r25
    96ee:	ea 1e       	adc	r14, r26
    96f0:	fb 1e       	adc	r15, r27
    96f2:	77 24       	eor	r7, r7
    96f4:	73 94       	inc	r7
    96f6:	ff ef       	ldi	r31, 0xFF	; 255
    96f8:	cf 0e       	add	r12, r31
    96fa:	f1 e0       	ldi	r31, 0x01	; 1
    96fc:	df 1e       	adc	r13, r31
    96fe:	e1 1c       	adc	r14, r1
    9700:	f1 1c       	adc	r15, r1
    9702:	59 e0       	ldi	r21, 0x09	; 9
    9704:	f6 94       	lsr	r15
    9706:	e7 94       	ror	r14
    9708:	d7 94       	ror	r13
    970a:	c7 94       	ror	r12
    970c:	5a 95       	dec	r21
    970e:	d1 f7       	brne	.-12     	; 0x9704 <find_volume+0x364>
    9710:	2d 89       	ldd	r18, Y+21	; 0x15
    9712:	3e 89       	ldd	r19, Y+22	; 0x16
    9714:	4f 89       	ldd	r20, Y+23	; 0x17
    9716:	58 8d       	ldd	r21, Y+24	; 0x18
    9718:	2c 15       	cp	r18, r12
    971a:	3d 05       	cpc	r19, r13
    971c:	4e 05       	cpc	r20, r14
    971e:	5f 05       	cpc	r21, r15
    9720:	08 f4       	brcc	.+2      	; 0x9724 <find_volume+0x384>
    9722:	ca ce       	rjmp	.-620    	; 0x94b8 <find_volume+0x118>
    9724:	8f ef       	ldi	r24, 0xFF	; 255
    9726:	9f ef       	ldi	r25, 0xFF	; 255
    9728:	dc 01       	movw	r26, r24
    972a:	f8 01       	movw	r30, r16
    972c:	81 8b       	std	Z+17, r24	; 0x11
    972e:	92 8b       	std	Z+18, r25	; 0x12
    9730:	a3 8b       	std	Z+19, r26	; 0x13
    9732:	b4 8b       	std	Z+20, r27	; 0x14
    9734:	85 87       	std	Z+13, r24	; 0x0d
    9736:	96 87       	std	Z+14, r25	; 0x0e
    9738:	a7 87       	std	Z+15, r26	; 0x0f
    973a:	b0 8b       	std	Z+16, r27	; 0x10
    973c:	80 e8       	ldi	r24, 0x80	; 128
    973e:	84 83       	std	Z+4, r24	; 0x04
    9740:	f3 e0       	ldi	r31, 0x03	; 3
    9742:	7f 12       	cpse	r7, r31
    9744:	42 c0       	rjmp	.+132    	; 0x97ca <find_volume+0x42a>
    9746:	f8 01       	movw	r30, r16
    9748:	eb 59       	subi	r30, 0x9B	; 155
    974a:	ff 4f       	sbci	r31, 0xFF	; 255
    974c:	80 81       	ld	r24, Z
    974e:	91 81       	ldd	r25, Z+1	; 0x01
    9750:	01 97       	sbiw	r24, 0x01	; 1
    9752:	09 f0       	breq	.+2      	; 0x9756 <find_volume+0x3b6>
    9754:	3a c0       	rjmp	.+116    	; 0x97ca <find_volume+0x42a>
    9756:	b5 01       	movw	r22, r10
    9758:	a4 01       	movw	r20, r8
    975a:	4f 5f       	subi	r20, 0xFF	; 255
    975c:	5f 4f       	sbci	r21, 0xFF	; 255
    975e:	6f 4f       	sbci	r22, 0xFF	; 255
    9760:	7f 4f       	sbci	r23, 0xFF	; 255
    9762:	c8 01       	movw	r24, r16
    9764:	9d dd       	rcall	.-1222   	; 0x92a0 <move_window>
    9766:	89 2b       	or	r24, r25
    9768:	81 f5       	brne	.+96     	; 0x97ca <find_volume+0x42a>
    976a:	d8 01       	movw	r26, r16
    976c:	14 96       	adiw	r26, 0x04	; 4
    976e:	1c 92       	st	X, r1
    9770:	f8 01       	movw	r30, r16
    9772:	ed 5c       	subi	r30, 0xCD	; 205
    9774:	fd 4f       	sbci	r31, 0xFD	; 253
    9776:	80 81       	ld	r24, Z
    9778:	91 81       	ldd	r25, Z+1	; 0x01
    977a:	85 35       	cpi	r24, 0x55	; 85
    977c:	9a 4a       	sbci	r25, 0xAA	; 170
    977e:	29 f5       	brne	.+74     	; 0x97ca <find_volume+0x42a>
    9780:	c8 01       	movw	r24, r16
    9782:	c5 96       	adiw	r24, 0x35	; 53
    9784:	b6 db       	rcall	.-2196   	; 0x8ef2 <ld_dword>
    9786:	62 35       	cpi	r22, 0x52	; 82
    9788:	72 45       	sbci	r23, 0x52	; 82
    978a:	81 46       	sbci	r24, 0x61	; 97
    978c:	91 44       	sbci	r25, 0x41	; 65
    978e:	e9 f4       	brne	.+58     	; 0x97ca <find_volume+0x42a>
    9790:	c8 01       	movw	r24, r16
    9792:	87 5e       	subi	r24, 0xE7	; 231
    9794:	9d 4f       	sbci	r25, 0xFD	; 253
    9796:	ad db       	rcall	.-2214   	; 0x8ef2 <ld_dword>
    9798:	62 37       	cpi	r22, 0x72	; 114
    979a:	72 47       	sbci	r23, 0x72	; 114
    979c:	81 44       	sbci	r24, 0x41	; 65
    979e:	91 46       	sbci	r25, 0x61	; 97
    97a0:	a1 f4       	brne	.+40     	; 0x97ca <find_volume+0x42a>
    97a2:	c8 01       	movw	r24, r16
    97a4:	83 5e       	subi	r24, 0xE3	; 227
    97a6:	9d 4f       	sbci	r25, 0xFD	; 253
    97a8:	a4 db       	rcall	.-2232   	; 0x8ef2 <ld_dword>
    97aa:	d8 01       	movw	r26, r16
    97ac:	51 96       	adiw	r26, 0x11	; 17
    97ae:	6d 93       	st	X+, r22
    97b0:	7d 93       	st	X+, r23
    97b2:	8d 93       	st	X+, r24
    97b4:	9c 93       	st	X, r25
    97b6:	54 97       	sbiw	r26, 0x14	; 20
    97b8:	c8 01       	movw	r24, r16
    97ba:	8f 5d       	subi	r24, 0xDF	; 223
    97bc:	9d 4f       	sbci	r25, 0xFD	; 253
    97be:	99 db       	rcall	.-2254   	; 0x8ef2 <ld_dword>
    97c0:	f8 01       	movw	r30, r16
    97c2:	65 87       	std	Z+13, r22	; 0x0d
    97c4:	76 87       	std	Z+14, r23	; 0x0e
    97c6:	87 87       	std	Z+15, r24	; 0x0f
    97c8:	90 8b       	std	Z+16, r25	; 0x10
    97ca:	d8 01       	movw	r26, r16
    97cc:	7c 92       	st	X, r7
    97ce:	80 91 80 18 	lds	r24, 0x1880	; 0x801880 <Fsid>
    97d2:	90 91 81 18 	lds	r25, 0x1881	; 0x801881 <Fsid+0x1>
    97d6:	01 96       	adiw	r24, 0x01	; 1
    97d8:	90 93 81 18 	sts	0x1881, r25	; 0x801881 <Fsid+0x1>
    97dc:	80 93 80 18 	sts	0x1880, r24	; 0x801880 <Fsid>
    97e0:	16 96       	adiw	r26, 0x06	; 6
    97e2:	9c 93       	st	X, r25
    97e4:	8e 93       	st	-X, r24
    97e6:	15 97       	sbiw	r26, 0x05	; 5
    97e8:	f8 01       	movw	r30, r16
    97ea:	15 8a       	std	Z+21, r1	; 0x15
    97ec:	16 8a       	std	Z+22, r1	; 0x16
    97ee:	17 8a       	std	Z+23, r1	; 0x17
    97f0:	10 8e       	std	Z+24, r1	; 0x18
    97f2:	06 c0       	rjmp	.+12     	; 0x9800 <find_volume+0x460>
    97f4:	8b e0       	ldi	r24, 0x0B	; 11
    97f6:	90 e0       	ldi	r25, 0x00	; 0
    97f8:	78 c0       	rjmp	.+240    	; 0x98ea <find_volume+0x54a>
    97fa:	8c e0       	ldi	r24, 0x0C	; 12
    97fc:	90 e0       	ldi	r25, 0x00	; 0
    97fe:	75 c0       	rjmp	.+234    	; 0x98ea <find_volume+0x54a>
    9800:	80 e0       	ldi	r24, 0x00	; 0
    9802:	90 e0       	ldi	r25, 0x00	; 0
    9804:	72 c0       	rjmp	.+228    	; 0x98ea <find_volume+0x54a>
    9806:	83 e0       	ldi	r24, 0x03	; 3
    9808:	90 e0       	ldi	r25, 0x00	; 0
    980a:	6f c0       	rjmp	.+222    	; 0x98ea <find_volume+0x54a>
    980c:	84 30       	cpi	r24, 0x04	; 4
    980e:	09 f0       	breq	.+2      	; 0x9812 <find_volume+0x472>
    9810:	53 ce       	rjmp	.-858    	; 0x94b8 <find_volume+0x118>
    9812:	81 e0       	ldi	r24, 0x01	; 1
    9814:	90 e0       	ldi	r25, 0x00	; 0
    9816:	69 c0       	rjmp	.+210    	; 0x98ea <find_volume+0x54a>
    9818:	d8 01       	movw	r26, r16
    981a:	59 96       	adiw	r26, 0x19	; 25
    981c:	cd 92       	st	X+, r12
    981e:	dd 92       	st	X+, r13
    9820:	ed 92       	st	X+, r14
    9822:	fc 92       	st	X, r15
    9824:	5c 97       	sbiw	r26, 0x1c	; 28
    9826:	f8 01       	movw	r30, r16
    9828:	81 a2       	std	Z+33, r8	; 0x21
    982a:	92 a2       	std	Z+34, r9	; 0x22
    982c:	a3 a2       	std	Z+35, r10	; 0x23
    982e:	b4 a2       	std	Z+36, r11	; 0x24
    9830:	2a 8d       	ldd	r18, Y+26	; 0x1a
    9832:	3b 8d       	ldd	r19, Y+27	; 0x1b
    9834:	4c 8d       	ldd	r20, Y+28	; 0x1c
    9836:	5d 8d       	ldd	r21, Y+29	; 0x1d
    9838:	95 96       	adiw	r26, 0x25	; 37
    983a:	2d 93       	st	X+, r18
    983c:	3d 93       	st	X+, r19
    983e:	4d 93       	st	X+, r20
    9840:	5c 93       	st	X, r21
    9842:	98 97       	sbiw	r26, 0x28	; 40
    9844:	29 89       	ldd	r18, Y+17	; 0x11
    9846:	3a 89       	ldd	r19, Y+18	; 0x12
    9848:	4b 89       	ldd	r20, Y+19	; 0x13
    984a:	5c 89       	ldd	r21, Y+20	; 0x14
    984c:	9d 96       	adiw	r26, 0x2d	; 45
    984e:	2d 93       	st	X+, r18
    9850:	3d 93       	st	X+, r19
    9852:	4d 93       	st	X+, r20
    9854:	5c 93       	st	X, r21
    9856:	d0 97       	sbiw	r26, 0x30	; 48
    9858:	e1 5a       	subi	r30, 0xA1	; 161
    985a:	ff 4f       	sbci	r31, 0xFF	; 255
    985c:	80 81       	ld	r24, Z
    985e:	91 81       	ldd	r25, Z+1	; 0x01
    9860:	89 2b       	or	r24, r25
    9862:	09 f0       	breq	.+2      	; 0x9866 <find_volume+0x4c6>
    9864:	29 ce       	rjmp	.-942    	; 0x94b8 <find_volume+0x118>
    9866:	21 14       	cp	r2, r1
    9868:	31 04       	cpc	r3, r1
    986a:	09 f0       	breq	.+2      	; 0x986e <find_volume+0x4ce>
    986c:	25 ce       	rjmp	.-950    	; 0x94b8 <find_volume+0x118>
    986e:	c8 01       	movw	r24, r16
    9870:	8f 59       	subi	r24, 0x9F	; 159
    9872:	9f 4f       	sbci	r25, 0xFF	; 255
    9874:	3e db       	rcall	.-2436   	; 0x8ef2 <ld_dword>
    9876:	f8 01       	movw	r30, r16
    9878:	61 a7       	std	Z+41, r22	; 0x29
    987a:	72 a7       	std	Z+42, r23	; 0x2a
    987c:	83 a7       	std	Z+43, r24	; 0x2b
    987e:	94 a7       	std	Z+44, r25	; 0x2c
    9880:	62 e0       	ldi	r22, 0x02	; 2
    9882:	cc 0c       	add	r12, r12
    9884:	dd 1c       	adc	r13, r13
    9886:	ee 1c       	adc	r14, r14
    9888:	ff 1c       	adc	r15, r15
    988a:	6a 95       	dec	r22
    988c:	d1 f7       	brne	.-12     	; 0x9882 <find_volume+0x4e2>
    988e:	73 e0       	ldi	r23, 0x03	; 3
    9890:	77 2e       	mov	r7, r23
    9892:	31 cf       	rjmp	.-414    	; 0x96f6 <find_volume+0x356>
    9894:	81 a2       	std	Z+33, r8	; 0x21
    9896:	92 a2       	std	Z+34, r9	; 0x22
    9898:	a3 a2       	std	Z+35, r10	; 0x23
    989a:	b4 a2       	std	Z+36, r11	; 0x24
    989c:	2a 8d       	ldd	r18, Y+26	; 0x1a
    989e:	3b 8d       	ldd	r19, Y+27	; 0x1b
    98a0:	4c 8d       	ldd	r20, Y+28	; 0x1c
    98a2:	5d 8d       	ldd	r21, Y+29	; 0x1d
    98a4:	25 a3       	std	Z+37, r18	; 0x25
    98a6:	36 a3       	std	Z+38, r19	; 0x26
    98a8:	47 a3       	std	Z+39, r20	; 0x27
    98aa:	50 a7       	std	Z+40, r21	; 0x28
    98ac:	29 89       	ldd	r18, Y+17	; 0x11
    98ae:	3a 89       	ldd	r19, Y+18	; 0x12
    98b0:	4b 89       	ldd	r20, Y+19	; 0x13
    98b2:	5c 89       	ldd	r21, Y+20	; 0x14
    98b4:	25 a7       	std	Z+45, r18	; 0x2d
    98b6:	36 a7       	std	Z+46, r19	; 0x2e
    98b8:	47 a7       	std	Z+47, r20	; 0x2f
    98ba:	50 ab       	std	Z+48, r21	; 0x30
    98bc:	21 14       	cp	r2, r1
    98be:	31 04       	cpc	r3, r1
    98c0:	09 f4       	brne	.+2      	; 0x98c4 <find_volume+0x524>
    98c2:	fa cd       	rjmp	.-1036   	; 0x94b8 <find_volume+0x118>
    98c4:	2a 8d       	ldd	r18, Y+26	; 0x1a
    98c6:	3b 8d       	ldd	r19, Y+27	; 0x1b
    98c8:	4c 8d       	ldd	r20, Y+28	; 0x1c
    98ca:	5d 8d       	ldd	r21, Y+29	; 0x1d
    98cc:	42 0e       	add	r4, r18
    98ce:	53 1e       	adc	r5, r19
    98d0:	64 1e       	adc	r6, r20
    98d2:	75 1e       	adc	r7, r21
    98d4:	41 a6       	std	Z+41, r4	; 0x29
    98d6:	52 a6       	std	Z+42, r5	; 0x2a
    98d8:	63 a6       	std	Z+43, r6	; 0x2b
    98da:	74 a6       	std	Z+44, r7	; 0x2c
    98dc:	cc 0c       	add	r12, r12
    98de:	dd 1c       	adc	r13, r13
    98e0:	ee 1c       	adc	r14, r14
    98e2:	ff 1c       	adc	r15, r15
    98e4:	42 e0       	ldi	r20, 0x02	; 2
    98e6:	74 2e       	mov	r7, r20
    98e8:	06 cf       	rjmp	.-500    	; 0x96f6 <find_volume+0x356>
    98ea:	6d 96       	adiw	r28, 0x1d	; 29
    98ec:	e2 e1       	ldi	r30, 0x12	; 18
    98ee:	0c 94 50 ec 	jmp	0x1d8a0	; 0x1d8a0 <__epilogue_restores__>

000098f2 <put_fat>:
    98f2:	a6 e0       	ldi	r26, 0x06	; 6
    98f4:	b0 e0       	ldi	r27, 0x00	; 0
    98f6:	ef e7       	ldi	r30, 0x7F	; 127
    98f8:	fc e4       	ldi	r31, 0x4C	; 76
    98fa:	0c 94 34 ec 	jmp	0x1d868	; 0x1d868 <__prologue_saves__>
    98fe:	42 30       	cpi	r20, 0x02	; 2
    9900:	51 05       	cpc	r21, r1
    9902:	61 05       	cpc	r22, r1
    9904:	71 05       	cpc	r23, r1
    9906:	08 f4       	brcc	.+2      	; 0x990a <put_fat+0x18>
    9908:	e9 c0       	rjmp	.+466    	; 0x9adc <put_fat+0x1ea>
    990a:	dc 01       	movw	r26, r24
    990c:	59 96       	adiw	r26, 0x19	; 25
    990e:	cd 90       	ld	r12, X+
    9910:	dd 90       	ld	r13, X+
    9912:	ed 90       	ld	r14, X+
    9914:	fc 90       	ld	r15, X
    9916:	5c 97       	sbiw	r26, 0x1c	; 28
    9918:	4c 15       	cp	r20, r12
    991a:	5d 05       	cpc	r21, r13
    991c:	6e 05       	cpc	r22, r14
    991e:	7f 05       	cpc	r23, r15
    9920:	08 f0       	brcs	.+2      	; 0x9924 <put_fat+0x32>
    9922:	dc c0       	rjmp	.+440    	; 0x9adc <put_fat+0x1ea>
    9924:	28 01       	movw	r4, r16
    9926:	39 01       	movw	r6, r18
    9928:	6a 01       	movw	r12, r20
    992a:	7b 01       	movw	r14, r22
    992c:	9e 83       	std	Y+6, r25	; 0x06
    992e:	8d 83       	std	Y+5, r24	; 0x05
    9930:	fc 01       	movw	r30, r24
    9932:	80 81       	ld	r24, Z
    9934:	82 30       	cpi	r24, 0x02	; 2
    9936:	09 f4       	brne	.+2      	; 0x993a <put_fat+0x48>
    9938:	73 c0       	rjmp	.+230    	; 0x9a20 <put_fat+0x12e>
    993a:	83 30       	cpi	r24, 0x03	; 3
    993c:	09 f4       	brne	.+2      	; 0x9940 <put_fat+0x4e>
    993e:	92 c0       	rjmp	.+292    	; 0x9a64 <put_fat+0x172>
    9940:	81 30       	cpi	r24, 0x01	; 1
    9942:	09 f0       	breq	.+2      	; 0x9946 <put_fat+0x54>
    9944:	cb c0       	rjmp	.+406    	; 0x9adc <put_fat+0x1ea>
    9946:	4a 01       	movw	r8, r20
    9948:	96 94       	lsr	r9
    994a:	87 94       	ror	r8
    994c:	84 0e       	add	r8, r20
    994e:	95 1e       	adc	r9, r21
    9950:	c4 01       	movw	r24, r8
    9952:	89 2f       	mov	r24, r25
    9954:	99 27       	eor	r25, r25
    9956:	86 95       	lsr	r24
    9958:	45 a1       	ldd	r20, Z+37	; 0x25
    995a:	56 a1       	ldd	r21, Z+38	; 0x26
    995c:	67 a1       	ldd	r22, Z+39	; 0x27
    995e:	70 a5       	ldd	r23, Z+40	; 0x28
    9960:	48 0f       	add	r20, r24
    9962:	59 1f       	adc	r21, r25
    9964:	61 1d       	adc	r22, r1
    9966:	71 1d       	adc	r23, r1
    9968:	cf 01       	movw	r24, r30
    996a:	9a dc       	rcall	.-1740   	; 0x92a0 <move_window>
    996c:	5c 01       	movw	r10, r24
    996e:	89 2b       	or	r24, r25
    9970:	09 f0       	breq	.+2      	; 0x9974 <put_fat+0x82>
    9972:	b7 c0       	rjmp	.+366    	; 0x9ae2 <put_fat+0x1f0>
    9974:	2d 80       	ldd	r2, Y+5	; 0x05
    9976:	3e 80       	ldd	r3, Y+6	; 0x06
    9978:	f5 e3       	ldi	r31, 0x35	; 53
    997a:	2f 0e       	add	r2, r31
    997c:	31 1c       	adc	r3, r1
    997e:	84 01       	movw	r16, r8
    9980:	0f 5f       	subi	r16, 0xFF	; 255
    9982:	1f 4f       	sbci	r17, 0xFF	; 255
    9984:	21 e0       	ldi	r18, 0x01	; 1
    9986:	92 22       	and	r9, r18
    9988:	f1 01       	movw	r30, r2
    998a:	e8 0d       	add	r30, r8
    998c:	f9 1d       	adc	r31, r9
    998e:	d7 01       	movw	r26, r14
    9990:	c6 01       	movw	r24, r12
    9992:	81 70       	andi	r24, 0x01	; 1
    9994:	99 27       	eor	r25, r25
    9996:	aa 27       	eor	r26, r26
    9998:	bb 27       	eor	r27, r27
    999a:	89 83       	std	Y+1, r24	; 0x01
    999c:	9a 83       	std	Y+2, r25	; 0x02
    999e:	ab 83       	std	Y+3, r26	; 0x03
    99a0:	bc 83       	std	Y+4, r27	; 0x04
    99a2:	c0 fe       	sbrs	r12, 0
    99a4:	09 c0       	rjmp	.+18     	; 0x99b8 <put_fat+0xc6>
    99a6:	80 81       	ld	r24, Z
    99a8:	28 2f       	mov	r18, r24
    99aa:	2f 70       	andi	r18, 0x0F	; 15
    99ac:	a0 e1       	ldi	r26, 0x10	; 16
    99ae:	4a 9e       	mul	r4, r26
    99b0:	c0 01       	movw	r24, r0
    99b2:	11 24       	eor	r1, r1
    99b4:	82 2b       	or	r24, r18
    99b6:	01 c0       	rjmp	.+2      	; 0x99ba <put_fat+0xc8>
    99b8:	84 2d       	mov	r24, r4
    99ba:	80 83       	st	Z, r24
    99bc:	81 e0       	ldi	r24, 0x01	; 1
    99be:	ed 81       	ldd	r30, Y+5	; 0x05
    99c0:	fe 81       	ldd	r31, Y+6	; 0x06
    99c2:	83 83       	std	Z+3, r24	; 0x03
    99c4:	45 a1       	ldd	r20, Z+37	; 0x25
    99c6:	56 a1       	ldd	r21, Z+38	; 0x26
    99c8:	67 a1       	ldd	r22, Z+39	; 0x27
    99ca:	70 a5       	ldd	r23, Z+40	; 0x28
    99cc:	c8 01       	movw	r24, r16
    99ce:	89 2f       	mov	r24, r25
    99d0:	99 27       	eor	r25, r25
    99d2:	86 95       	lsr	r24
    99d4:	48 0f       	add	r20, r24
    99d6:	59 1f       	adc	r21, r25
    99d8:	61 1d       	adc	r22, r1
    99da:	71 1d       	adc	r23, r1
    99dc:	cf 01       	movw	r24, r30
    99de:	60 dc       	rcall	.-1856   	; 0x92a0 <move_window>
    99e0:	5c 01       	movw	r10, r24
    99e2:	89 2b       	or	r24, r25
    99e4:	09 f0       	breq	.+2      	; 0x99e8 <put_fat+0xf6>
    99e6:	7d c0       	rjmp	.+250    	; 0x9ae2 <put_fat+0x1f0>
    99e8:	11 70       	andi	r17, 0x01	; 1
    99ea:	f1 01       	movw	r30, r2
    99ec:	e0 0f       	add	r30, r16
    99ee:	f1 1f       	adc	r31, r17
    99f0:	89 81       	ldd	r24, Y+1	; 0x01
    99f2:	9a 81       	ldd	r25, Y+2	; 0x02
    99f4:	ab 81       	ldd	r26, Y+3	; 0x03
    99f6:	bc 81       	ldd	r27, Y+4	; 0x04
    99f8:	89 2b       	or	r24, r25
    99fa:	8a 2b       	or	r24, r26
    99fc:	8b 2b       	or	r24, r27
    99fe:	41 f0       	breq	.+16     	; 0x9a10 <put_fat+0x11e>
    9a00:	54 e0       	ldi	r21, 0x04	; 4
    9a02:	76 94       	lsr	r7
    9a04:	67 94       	ror	r6
    9a06:	57 94       	ror	r5
    9a08:	47 94       	ror	r4
    9a0a:	5a 95       	dec	r21
    9a0c:	d1 f7       	brne	.-12     	; 0x9a02 <put_fat+0x110>
    9a0e:	06 c0       	rjmp	.+12     	; 0x9a1c <put_fat+0x12a>
    9a10:	00 81       	ld	r16, Z
    9a12:	00 7f       	andi	r16, 0xF0	; 240
    9a14:	85 2d       	mov	r24, r5
    9a16:	8f 70       	andi	r24, 0x0F	; 15
    9a18:	40 2e       	mov	r4, r16
    9a1a:	48 2a       	or	r4, r24
    9a1c:	40 82       	st	Z, r4
    9a1e:	58 c0       	rjmp	.+176    	; 0x9ad0 <put_fat+0x1de>
    9a20:	77 27       	eor	r23, r23
    9a22:	6f 2d       	mov	r22, r15
    9a24:	5e 2d       	mov	r21, r14
    9a26:	4d 2d       	mov	r20, r13
    9a28:	ed 81       	ldd	r30, Y+5	; 0x05
    9a2a:	fe 81       	ldd	r31, Y+6	; 0x06
    9a2c:	85 a1       	ldd	r24, Z+37	; 0x25
    9a2e:	96 a1       	ldd	r25, Z+38	; 0x26
    9a30:	a7 a1       	ldd	r26, Z+39	; 0x27
    9a32:	b0 a5       	ldd	r27, Z+40	; 0x28
    9a34:	48 0f       	add	r20, r24
    9a36:	59 1f       	adc	r21, r25
    9a38:	6a 1f       	adc	r22, r26
    9a3a:	7b 1f       	adc	r23, r27
    9a3c:	cf 01       	movw	r24, r30
    9a3e:	30 dc       	rcall	.-1952   	; 0x92a0 <move_window>
    9a40:	5c 01       	movw	r10, r24
    9a42:	89 2b       	or	r24, r25
    9a44:	09 f0       	breq	.+2      	; 0x9a48 <put_fat+0x156>
    9a46:	4d c0       	rjmp	.+154    	; 0x9ae2 <put_fat+0x1f0>
    9a48:	ed 81       	ldd	r30, Y+5	; 0x05
    9a4a:	fe 81       	ldd	r31, Y+6	; 0x06
    9a4c:	f5 96       	adiw	r30, 0x35	; 53
    9a4e:	cc 0c       	add	r12, r12
    9a50:	dd 1c       	adc	r13, r13
    9a52:	e8 94       	clt
    9a54:	c0 f8       	bld	r12, 0
    9a56:	21 e0       	ldi	r18, 0x01	; 1
    9a58:	d2 22       	and	r13, r18
    9a5a:	ec 0d       	add	r30, r12
    9a5c:	fd 1d       	adc	r31, r13
    9a5e:	40 82       	st	Z, r4
    9a60:	51 82       	std	Z+1, r5	; 0x01
    9a62:	36 c0       	rjmp	.+108    	; 0x9ad0 <put_fat+0x1de>
    9a64:	ed 81       	ldd	r30, Y+5	; 0x05
    9a66:	fe 81       	ldd	r31, Y+6	; 0x06
    9a68:	85 a1       	ldd	r24, Z+37	; 0x25
    9a6a:	96 a1       	ldd	r25, Z+38	; 0x26
    9a6c:	a7 a1       	ldd	r26, Z+39	; 0x27
    9a6e:	b0 a5       	ldd	r27, Z+40	; 0x28
    9a70:	27 e0       	ldi	r18, 0x07	; 7
    9a72:	76 95       	lsr	r23
    9a74:	67 95       	ror	r22
    9a76:	57 95       	ror	r21
    9a78:	47 95       	ror	r20
    9a7a:	2a 95       	dec	r18
    9a7c:	d1 f7       	brne	.-12     	; 0x9a72 <put_fat+0x180>
    9a7e:	48 0f       	add	r20, r24
    9a80:	59 1f       	adc	r21, r25
    9a82:	6a 1f       	adc	r22, r26
    9a84:	7b 1f       	adc	r23, r27
    9a86:	cf 01       	movw	r24, r30
    9a88:	0b dc       	rcall	.-2026   	; 0x92a0 <move_window>
    9a8a:	5c 01       	movw	r10, r24
    9a8c:	89 2b       	or	r24, r25
    9a8e:	49 f5       	brne	.+82     	; 0x9ae2 <put_fat+0x1f0>
    9a90:	4d 81       	ldd	r20, Y+5	; 0x05
    9a92:	5e 81       	ldd	r21, Y+6	; 0x06
    9a94:	4b 5c       	subi	r20, 0xCB	; 203
    9a96:	5f 4f       	sbci	r21, 0xFF	; 255
    9a98:	cc 0c       	add	r12, r12
    9a9a:	dd 1c       	adc	r13, r13
    9a9c:	cc 0c       	add	r12, r12
    9a9e:	dd 1c       	adc	r13, r13
    9aa0:	fc ef       	ldi	r31, 0xFC	; 252
    9aa2:	cf 22       	and	r12, r31
    9aa4:	f1 e0       	ldi	r31, 0x01	; 1
    9aa6:	df 22       	and	r13, r31
    9aa8:	c4 0e       	add	r12, r20
    9aaa:	d5 1e       	adc	r13, r21
    9aac:	c6 01       	movw	r24, r12
    9aae:	21 da       	rcall	.-3006   	; 0x8ef2 <ld_dword>
    9ab0:	2f e0       	ldi	r18, 0x0F	; 15
    9ab2:	72 22       	and	r7, r18
    9ab4:	dc 01       	movw	r26, r24
    9ab6:	cb 01       	movw	r24, r22
    9ab8:	88 27       	eor	r24, r24
    9aba:	99 27       	eor	r25, r25
    9abc:	aa 27       	eor	r26, r26
    9abe:	b0 7f       	andi	r27, 0xF0	; 240
    9ac0:	b3 01       	movw	r22, r6
    9ac2:	a2 01       	movw	r20, r4
    9ac4:	48 2b       	or	r20, r24
    9ac6:	59 2b       	or	r21, r25
    9ac8:	6a 2b       	or	r22, r26
    9aca:	7b 2b       	or	r23, r27
    9acc:	c6 01       	movw	r24, r12
    9ace:	26 da       	rcall	.-2996   	; 0x8f1c <st_dword>
    9ad0:	81 e0       	ldi	r24, 0x01	; 1
    9ad2:	ad 81       	ldd	r26, Y+5	; 0x05
    9ad4:	be 81       	ldd	r27, Y+6	; 0x06
    9ad6:	13 96       	adiw	r26, 0x03	; 3
    9ad8:	8c 93       	st	X, r24
    9ada:	03 c0       	rjmp	.+6      	; 0x9ae2 <put_fat+0x1f0>
    9adc:	82 e0       	ldi	r24, 0x02	; 2
    9ade:	a8 2e       	mov	r10, r24
    9ae0:	b1 2c       	mov	r11, r1
    9ae2:	c5 01       	movw	r24, r10
    9ae4:	26 96       	adiw	r28, 0x06	; 6
    9ae6:	e2 e1       	ldi	r30, 0x12	; 18
    9ae8:	0c 94 50 ec 	jmp	0x1d8a0	; 0x1d8a0 <__epilogue_restores__>

00009aec <get_fat.isra.7>:
    9aec:	a0 e0       	ldi	r26, 0x00	; 0
    9aee:	b0 e0       	ldi	r27, 0x00	; 0
    9af0:	ec e7       	ldi	r30, 0x7C	; 124
    9af2:	fd e4       	ldi	r31, 0x4D	; 77
    9af4:	0c 94 3c ec 	jmp	0x1d878	; 0x1d878 <__prologue_saves__+0x10>
    9af8:	42 30       	cpi	r20, 0x02	; 2
    9afa:	51 05       	cpc	r21, r1
    9afc:	61 05       	cpc	r22, r1
    9afe:	71 05       	cpc	r23, r1
    9b00:	08 f4       	brcc	.+2      	; 0x9b04 <get_fat.isra.7+0x18>
    9b02:	9e c0       	rjmp	.+316    	; 0x9c40 <get_fat.isra.7+0x154>
    9b04:	fc 01       	movw	r30, r24
    9b06:	01 8d       	ldd	r16, Z+25	; 0x19
    9b08:	12 8d       	ldd	r17, Z+26	; 0x1a
    9b0a:	23 8d       	ldd	r18, Z+27	; 0x1b
    9b0c:	34 8d       	ldd	r19, Z+28	; 0x1c
    9b0e:	40 17       	cp	r20, r16
    9b10:	51 07       	cpc	r21, r17
    9b12:	62 07       	cpc	r22, r18
    9b14:	73 07       	cpc	r23, r19
    9b16:	08 f0       	brcs	.+2      	; 0x9b1a <get_fat.isra.7+0x2e>
    9b18:	93 c0       	rjmp	.+294    	; 0x9c40 <get_fat.isra.7+0x154>
    9b1a:	6a 01       	movw	r12, r20
    9b1c:	7b 01       	movw	r14, r22
    9b1e:	8c 01       	movw	r16, r24
    9b20:	80 81       	ld	r24, Z
    9b22:	82 30       	cpi	r24, 0x02	; 2
    9b24:	09 f4       	brne	.+2      	; 0x9b28 <get_fat.isra.7+0x3c>
    9b26:	4b c0       	rjmp	.+150    	; 0x9bbe <get_fat.isra.7+0xd2>
    9b28:	83 30       	cpi	r24, 0x03	; 3
    9b2a:	09 f4       	brne	.+2      	; 0x9b2e <get_fat.isra.7+0x42>
    9b2c:	67 c0       	rjmp	.+206    	; 0x9bfc <get_fat.isra.7+0x110>
    9b2e:	81 30       	cpi	r24, 0x01	; 1
    9b30:	09 f0       	breq	.+2      	; 0x9b34 <get_fat.isra.7+0x48>
    9b32:	86 c0       	rjmp	.+268    	; 0x9c40 <get_fat.isra.7+0x154>
    9b34:	ea 01       	movw	r28, r20
    9b36:	d6 95       	lsr	r29
    9b38:	c7 95       	ror	r28
    9b3a:	cc 0d       	add	r28, r12
    9b3c:	dd 1d       	adc	r29, r13
    9b3e:	ce 01       	movw	r24, r28
    9b40:	89 2f       	mov	r24, r25
    9b42:	99 27       	eor	r25, r25
    9b44:	86 95       	lsr	r24
    9b46:	45 a1       	ldd	r20, Z+37	; 0x25
    9b48:	56 a1       	ldd	r21, Z+38	; 0x26
    9b4a:	67 a1       	ldd	r22, Z+39	; 0x27
    9b4c:	70 a5       	ldd	r23, Z+40	; 0x28
    9b4e:	48 0f       	add	r20, r24
    9b50:	59 1f       	adc	r21, r25
    9b52:	61 1d       	adc	r22, r1
    9b54:	71 1d       	adc	r23, r1
    9b56:	cf 01       	movw	r24, r30
    9b58:	a3 db       	rcall	.-2234   	; 0x92a0 <move_window>
    9b5a:	89 2b       	or	r24, r25
    9b5c:	21 f0       	breq	.+8      	; 0x9b66 <get_fat.isra.7+0x7a>
    9b5e:	6f ef       	ldi	r22, 0xFF	; 255
    9b60:	7f ef       	ldi	r23, 0xFF	; 255
    9b62:	cb 01       	movw	r24, r22
    9b64:	71 c0       	rjmp	.+226    	; 0x9c48 <get_fat.isra.7+0x15c>
    9b66:	5e 01       	movw	r10, r28
    9b68:	ff ef       	ldi	r31, 0xFF	; 255
    9b6a:	af 1a       	sub	r10, r31
    9b6c:	bf 0a       	sbc	r11, r31
    9b6e:	d1 70       	andi	r29, 0x01	; 1
    9b70:	c0 0f       	add	r28, r16
    9b72:	d1 1f       	adc	r29, r17
    9b74:	cd a9       	ldd	r28, Y+53	; 0x35
    9b76:	c5 01       	movw	r24, r10
    9b78:	89 2f       	mov	r24, r25
    9b7a:	99 27       	eor	r25, r25
    9b7c:	86 95       	lsr	r24
    9b7e:	f8 01       	movw	r30, r16
    9b80:	45 a1       	ldd	r20, Z+37	; 0x25
    9b82:	56 a1       	ldd	r21, Z+38	; 0x26
    9b84:	67 a1       	ldd	r22, Z+39	; 0x27
    9b86:	70 a5       	ldd	r23, Z+40	; 0x28
    9b88:	48 0f       	add	r20, r24
    9b8a:	59 1f       	adc	r21, r25
    9b8c:	61 1d       	adc	r22, r1
    9b8e:	71 1d       	adc	r23, r1
    9b90:	c8 01       	movw	r24, r16
    9b92:	86 db       	rcall	.-2292   	; 0x92a0 <move_window>
    9b94:	89 2b       	or	r24, r25
    9b96:	19 f7       	brne	.-58     	; 0x9b5e <get_fat.isra.7+0x72>
    9b98:	f1 e0       	ldi	r31, 0x01	; 1
    9b9a:	bf 22       	and	r11, r31
    9b9c:	f8 01       	movw	r30, r16
    9b9e:	ea 0d       	add	r30, r10
    9ba0:	fb 1d       	adc	r31, r11
    9ba2:	85 a9       	ldd	r24, Z+53	; 0x35
    9ba4:	6c 2f       	mov	r22, r28
    9ba6:	70 e0       	ldi	r23, 0x00	; 0
    9ba8:	78 2b       	or	r23, r24
    9baa:	c0 fe       	sbrs	r12, 0
    9bac:	06 c0       	rjmp	.+12     	; 0x9bba <get_fat.isra.7+0xce>
    9bae:	54 e0       	ldi	r21, 0x04	; 4
    9bb0:	76 95       	lsr	r23
    9bb2:	67 95       	ror	r22
    9bb4:	5a 95       	dec	r21
    9bb6:	e1 f7       	brne	.-8      	; 0x9bb0 <get_fat.isra.7+0xc4>
    9bb8:	1e c0       	rjmp	.+60     	; 0x9bf6 <get_fat.isra.7+0x10a>
    9bba:	7f 70       	andi	r23, 0x0F	; 15
    9bbc:	1c c0       	rjmp	.+56     	; 0x9bf6 <get_fat.isra.7+0x10a>
    9bbe:	77 27       	eor	r23, r23
    9bc0:	6f 2d       	mov	r22, r15
    9bc2:	5e 2d       	mov	r21, r14
    9bc4:	4d 2d       	mov	r20, r13
    9bc6:	85 a1       	ldd	r24, Z+37	; 0x25
    9bc8:	96 a1       	ldd	r25, Z+38	; 0x26
    9bca:	a7 a1       	ldd	r26, Z+39	; 0x27
    9bcc:	b0 a5       	ldd	r27, Z+40	; 0x28
    9bce:	48 0f       	add	r20, r24
    9bd0:	59 1f       	adc	r21, r25
    9bd2:	6a 1f       	adc	r22, r26
    9bd4:	7b 1f       	adc	r23, r27
    9bd6:	cf 01       	movw	r24, r30
    9bd8:	63 db       	rcall	.-2362   	; 0x92a0 <move_window>
    9bda:	89 2b       	or	r24, r25
    9bdc:	09 f0       	breq	.+2      	; 0x9be0 <get_fat.isra.7+0xf4>
    9bde:	bf cf       	rjmp	.-130    	; 0x9b5e <get_fat.isra.7+0x72>
    9be0:	cc 0c       	add	r12, r12
    9be2:	dd 1c       	adc	r13, r13
    9be4:	e8 94       	clt
    9be6:	c0 f8       	bld	r12, 0
    9be8:	f1 e0       	ldi	r31, 0x01	; 1
    9bea:	df 22       	and	r13, r31
    9bec:	f8 01       	movw	r30, r16
    9bee:	ec 0d       	add	r30, r12
    9bf0:	fd 1d       	adc	r31, r13
    9bf2:	65 a9       	ldd	r22, Z+53	; 0x35
    9bf4:	76 a9       	ldd	r23, Z+54	; 0x36
    9bf6:	80 e0       	ldi	r24, 0x00	; 0
    9bf8:	90 e0       	ldi	r25, 0x00	; 0
    9bfa:	26 c0       	rjmp	.+76     	; 0x9c48 <get_fat.isra.7+0x15c>
    9bfc:	85 a1       	ldd	r24, Z+37	; 0x25
    9bfe:	96 a1       	ldd	r25, Z+38	; 0x26
    9c00:	a7 a1       	ldd	r26, Z+39	; 0x27
    9c02:	b0 a5       	ldd	r27, Z+40	; 0x28
    9c04:	27 e0       	ldi	r18, 0x07	; 7
    9c06:	76 95       	lsr	r23
    9c08:	67 95       	ror	r22
    9c0a:	57 95       	ror	r21
    9c0c:	47 95       	ror	r20
    9c0e:	2a 95       	dec	r18
    9c10:	d1 f7       	brne	.-12     	; 0x9c06 <get_fat.isra.7+0x11a>
    9c12:	48 0f       	add	r20, r24
    9c14:	59 1f       	adc	r21, r25
    9c16:	6a 1f       	adc	r22, r26
    9c18:	7b 1f       	adc	r23, r27
    9c1a:	cf 01       	movw	r24, r30
    9c1c:	41 db       	rcall	.-2430   	; 0x92a0 <move_window>
    9c1e:	89 2b       	or	r24, r25
    9c20:	09 f0       	breq	.+2      	; 0x9c24 <get_fat.isra.7+0x138>
    9c22:	9d cf       	rjmp	.-198    	; 0x9b5e <get_fat.isra.7+0x72>
    9c24:	0b 5c       	subi	r16, 0xCB	; 203
    9c26:	1f 4f       	sbci	r17, 0xFF	; 255
    9c28:	cc 0c       	add	r12, r12
    9c2a:	dd 1c       	adc	r13, r13
    9c2c:	cc 0c       	add	r12, r12
    9c2e:	dd 1c       	adc	r13, r13
    9c30:	c6 01       	movw	r24, r12
    9c32:	8c 7f       	andi	r24, 0xFC	; 252
    9c34:	91 70       	andi	r25, 0x01	; 1
    9c36:	80 0f       	add	r24, r16
    9c38:	91 1f       	adc	r25, r17
    9c3a:	5b d9       	rcall	.-3402   	; 0x8ef2 <ld_dword>
    9c3c:	9f 70       	andi	r25, 0x0F	; 15
    9c3e:	04 c0       	rjmp	.+8      	; 0x9c48 <get_fat.isra.7+0x15c>
    9c40:	61 e0       	ldi	r22, 0x01	; 1
    9c42:	70 e0       	ldi	r23, 0x00	; 0
    9c44:	80 e0       	ldi	r24, 0x00	; 0
    9c46:	90 e0       	ldi	r25, 0x00	; 0
    9c48:	cd b7       	in	r28, 0x3d	; 61
    9c4a:	de b7       	in	r29, 0x3e	; 62
    9c4c:	ea e0       	ldi	r30, 0x0A	; 10
    9c4e:	0c 94 58 ec 	jmp	0x1d8b0	; 0x1d8b0 <__epilogue_restores__+0x10>

00009c52 <dir_sdi>:
    9c52:	a0 e0       	ldi	r26, 0x00	; 0
    9c54:	b0 e0       	ldi	r27, 0x00	; 0
    9c56:	ef e2       	ldi	r30, 0x2F	; 47
    9c58:	fe e4       	ldi	r31, 0x4E	; 78
    9c5a:	0c 94 36 ec 	jmp	0x1d86c	; 0x1d86c <__prologue_saves__+0x4>
    9c5e:	ec 01       	movw	r28, r24
    9c60:	6a 01       	movw	r12, r20
    9c62:	7b 01       	movw	r14, r22
    9c64:	41 15       	cp	r20, r1
    9c66:	51 05       	cpc	r21, r1
    9c68:	80 e2       	ldi	r24, 0x20	; 32
    9c6a:	68 07       	cpc	r22, r24
    9c6c:	71 05       	cpc	r23, r1
    9c6e:	18 f0       	brcs	.+6      	; 0x9c76 <dir_sdi+0x24>
    9c70:	82 e0       	ldi	r24, 0x02	; 2
    9c72:	90 e0       	ldi	r25, 0x00	; 0
    9c74:	a9 c0       	rjmp	.+338    	; 0x9dc8 <dir_sdi+0x176>
    9c76:	db 01       	movw	r26, r22
    9c78:	ca 01       	movw	r24, r20
    9c7a:	8f 71       	andi	r24, 0x1F	; 31
    9c7c:	99 27       	eor	r25, r25
    9c7e:	aa 27       	eor	r26, r26
    9c80:	bb 27       	eor	r27, r27
    9c82:	89 2b       	or	r24, r25
    9c84:	8a 2b       	or	r24, r26
    9c86:	8b 2b       	or	r24, r27
    9c88:	99 f7       	brne	.-26     	; 0x9c70 <dir_sdi+0x1e>
    9c8a:	08 81       	ld	r16, Y
    9c8c:	19 81       	ldd	r17, Y+1	; 0x01
    9c8e:	4e 87       	std	Y+14, r20	; 0x0e
    9c90:	5f 87       	std	Y+15, r21	; 0x0f
    9c92:	68 8b       	std	Y+16, r22	; 0x10
    9c94:	79 8b       	std	Y+17, r23	; 0x11
    9c96:	8e 80       	ldd	r8, Y+6	; 0x06
    9c98:	9f 80       	ldd	r9, Y+7	; 0x07
    9c9a:	a8 84       	ldd	r10, Y+8	; 0x08
    9c9c:	b9 84       	ldd	r11, Y+9	; 0x09
    9c9e:	81 14       	cp	r8, r1
    9ca0:	91 04       	cpc	r9, r1
    9ca2:	a1 04       	cpc	r10, r1
    9ca4:	b1 04       	cpc	r11, r1
    9ca6:	51 f5       	brne	.+84     	; 0x9cfc <dir_sdi+0xaa>
    9ca8:	f8 01       	movw	r30, r16
    9caa:	80 81       	ld	r24, Z
    9cac:	83 30       	cpi	r24, 0x03	; 3
    9cae:	40 f0       	brcs	.+16     	; 0x9cc0 <dir_sdi+0x6e>
    9cb0:	81 a5       	ldd	r24, Z+41	; 0x29
    9cb2:	92 a5       	ldd	r25, Z+42	; 0x2a
    9cb4:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9cb6:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9cb8:	00 97       	sbiw	r24, 0x00	; 0
    9cba:	a1 05       	cpc	r26, r1
    9cbc:	b1 05       	cpc	r27, r1
    9cbe:	e1 f4       	brne	.+56     	; 0x9cf8 <dir_sdi+0xa6>
    9cc0:	f8 01       	movw	r30, r16
    9cc2:	87 81       	ldd	r24, Z+7	; 0x07
    9cc4:	90 85       	ldd	r25, Z+8	; 0x08
    9cc6:	a0 e0       	ldi	r26, 0x00	; 0
    9cc8:	b0 e0       	ldi	r27, 0x00	; 0
    9cca:	b7 01       	movw	r22, r14
    9ccc:	a6 01       	movw	r20, r12
    9cce:	25 e0       	ldi	r18, 0x05	; 5
    9cd0:	76 95       	lsr	r23
    9cd2:	67 95       	ror	r22
    9cd4:	57 95       	ror	r21
    9cd6:	47 95       	ror	r20
    9cd8:	2a 95       	dec	r18
    9cda:	d1 f7       	brne	.-12     	; 0x9cd0 <dir_sdi+0x7e>
    9cdc:	48 17       	cp	r20, r24
    9cde:	59 07       	cpc	r21, r25
    9ce0:	6a 07       	cpc	r22, r26
    9ce2:	7b 07       	cpc	r23, r27
    9ce4:	28 f6       	brcc	.-118    	; 0x9c70 <dir_sdi+0x1e>
    9ce6:	81 a5       	ldd	r24, Z+41	; 0x29
    9ce8:	92 a5       	ldd	r25, Z+42	; 0x2a
    9cea:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9cec:	b4 a5       	ldd	r27, Z+44	; 0x2c
    9cee:	8e 8b       	std	Y+22, r24	; 0x16
    9cf0:	9f 8b       	std	Y+23, r25	; 0x17
    9cf2:	a8 8f       	std	Y+24, r26	; 0x18
    9cf4:	b9 8f       	std	Y+25, r27	; 0x19
    9cf6:	3d c0       	rjmp	.+122    	; 0x9d72 <dir_sdi+0x120>
    9cf8:	4c 01       	movw	r8, r24
    9cfa:	5d 01       	movw	r10, r26
    9cfc:	f8 01       	movw	r30, r16
    9cfe:	41 84       	ldd	r4, Z+9	; 0x09
    9d00:	52 84       	ldd	r5, Z+10	; 0x0a
    9d02:	61 2c       	mov	r6, r1
    9d04:	71 2c       	mov	r7, r1
    9d06:	39 e0       	ldi	r19, 0x09	; 9
    9d08:	44 0c       	add	r4, r4
    9d0a:	55 1c       	adc	r5, r5
    9d0c:	66 1c       	adc	r6, r6
    9d0e:	77 1c       	adc	r7, r7
    9d10:	3a 95       	dec	r19
    9d12:	d1 f7       	brne	.-12     	; 0x9d08 <dir_sdi+0xb6>
    9d14:	b5 01       	movw	r22, r10
    9d16:	a4 01       	movw	r20, r8
    9d18:	c4 14       	cp	r12, r4
    9d1a:	d5 04       	cpc	r13, r5
    9d1c:	e6 04       	cpc	r14, r6
    9d1e:	f7 04       	cpc	r15, r7
    9d20:	10 f1       	brcs	.+68     	; 0x9d66 <dir_sdi+0x114>
    9d22:	88 81       	ld	r24, Y
    9d24:	99 81       	ldd	r25, Y+1	; 0x01
    9d26:	e2 de       	rcall	.-572    	; 0x9aec <get_fat.isra.7>
    9d28:	4b 01       	movw	r8, r22
    9d2a:	5c 01       	movw	r10, r24
    9d2c:	6f 3f       	cpi	r22, 0xFF	; 255
    9d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    9d30:	8f 4f       	sbci	r24, 0xFF	; 255
    9d32:	9f 4f       	sbci	r25, 0xFF	; 255
    9d34:	09 f4       	brne	.+2      	; 0x9d38 <dir_sdi+0xe6>
    9d36:	46 c0       	rjmp	.+140    	; 0x9dc4 <dir_sdi+0x172>
    9d38:	82 e0       	ldi	r24, 0x02	; 2
    9d3a:	88 16       	cp	r8, r24
    9d3c:	91 04       	cpc	r9, r1
    9d3e:	a1 04       	cpc	r10, r1
    9d40:	b1 04       	cpc	r11, r1
    9d42:	08 f4       	brcc	.+2      	; 0x9d46 <dir_sdi+0xf4>
    9d44:	95 cf       	rjmp	.-214    	; 0x9c70 <dir_sdi+0x1e>
    9d46:	f8 01       	movw	r30, r16
    9d48:	81 8d       	ldd	r24, Z+25	; 0x19
    9d4a:	92 8d       	ldd	r25, Z+26	; 0x1a
    9d4c:	a3 8d       	ldd	r26, Z+27	; 0x1b
    9d4e:	b4 8d       	ldd	r27, Z+28	; 0x1c
    9d50:	88 16       	cp	r8, r24
    9d52:	99 06       	cpc	r9, r25
    9d54:	aa 06       	cpc	r10, r26
    9d56:	bb 06       	cpc	r11, r27
    9d58:	08 f0       	brcs	.+2      	; 0x9d5c <dir_sdi+0x10a>
    9d5a:	8a cf       	rjmp	.-236    	; 0x9c70 <dir_sdi+0x1e>
    9d5c:	c4 18       	sub	r12, r4
    9d5e:	d5 08       	sbc	r13, r5
    9d60:	e6 08       	sbc	r14, r6
    9d62:	f7 08       	sbc	r15, r7
    9d64:	d7 cf       	rjmp	.-82     	; 0x9d14 <dir_sdi+0xc2>
    9d66:	c8 01       	movw	r24, r16
    9d68:	e8 d8       	rcall	.-3632   	; 0x8f3a <clust2sect>
    9d6a:	6e 8b       	std	Y+22, r22	; 0x16
    9d6c:	7f 8b       	std	Y+23, r23	; 0x17
    9d6e:	88 8f       	std	Y+24, r24	; 0x18
    9d70:	99 8f       	std	Y+25, r25	; 0x19
    9d72:	8a 8a       	std	Y+18, r8	; 0x12
    9d74:	9b 8a       	std	Y+19, r9	; 0x13
    9d76:	ac 8a       	std	Y+20, r10	; 0x14
    9d78:	bd 8a       	std	Y+21, r11	; 0x15
    9d7a:	8e 89       	ldd	r24, Y+22	; 0x16
    9d7c:	9f 89       	ldd	r25, Y+23	; 0x17
    9d7e:	a8 8d       	ldd	r26, Y+24	; 0x18
    9d80:	b9 8d       	ldd	r27, Y+25	; 0x19
    9d82:	00 97       	sbiw	r24, 0x00	; 0
    9d84:	a1 05       	cpc	r26, r1
    9d86:	b1 05       	cpc	r27, r1
    9d88:	09 f4       	brne	.+2      	; 0x9d8c <dir_sdi+0x13a>
    9d8a:	72 cf       	rjmp	.-284    	; 0x9c70 <dir_sdi+0x1e>
    9d8c:	b7 01       	movw	r22, r14
    9d8e:	a6 01       	movw	r20, r12
    9d90:	29 e0       	ldi	r18, 0x09	; 9
    9d92:	76 95       	lsr	r23
    9d94:	67 95       	ror	r22
    9d96:	57 95       	ror	r21
    9d98:	47 95       	ror	r20
    9d9a:	2a 95       	dec	r18
    9d9c:	d1 f7       	brne	.-12     	; 0x9d92 <dir_sdi+0x140>
    9d9e:	84 0f       	add	r24, r20
    9da0:	95 1f       	adc	r25, r21
    9da2:	a6 1f       	adc	r26, r22
    9da4:	b7 1f       	adc	r27, r23
    9da6:	8e 8b       	std	Y+22, r24	; 0x16
    9da8:	9f 8b       	std	Y+23, r25	; 0x17
    9daa:	a8 8f       	std	Y+24, r26	; 0x18
    9dac:	b9 8f       	std	Y+25, r27	; 0x19
    9dae:	0b 5c       	subi	r16, 0xCB	; 203
    9db0:	1f 4f       	sbci	r17, 0xFF	; 255
    9db2:	f1 e0       	ldi	r31, 0x01	; 1
    9db4:	df 22       	and	r13, r31
    9db6:	c0 0e       	add	r12, r16
    9db8:	d1 1e       	adc	r13, r17
    9dba:	db 8e       	std	Y+27, r13	; 0x1b
    9dbc:	ca 8e       	std	Y+26, r12	; 0x1a
    9dbe:	80 e0       	ldi	r24, 0x00	; 0
    9dc0:	90 e0       	ldi	r25, 0x00	; 0
    9dc2:	02 c0       	rjmp	.+4      	; 0x9dc8 <dir_sdi+0x176>
    9dc4:	81 e0       	ldi	r24, 0x01	; 1
    9dc6:	90 e0       	ldi	r25, 0x00	; 0
    9dc8:	cd b7       	in	r28, 0x3d	; 61
    9dca:	de b7       	in	r29, 0x3e	; 62
    9dcc:	e0 e1       	ldi	r30, 0x10	; 16
    9dce:	0c 94 52 ec 	jmp	0x1d8a4	; 0x1d8a4 <__epilogue_restores__+0x4>

00009dd2 <create_chain>:
    9dd2:	a0 e0       	ldi	r26, 0x00	; 0
    9dd4:	b0 e0       	ldi	r27, 0x00	; 0
    9dd6:	ef ee       	ldi	r30, 0xEF	; 239
    9dd8:	fe e4       	ldi	r31, 0x4E	; 78
    9dda:	0c 94 36 ec 	jmp	0x1d86c	; 0x1d86c <__prologue_saves__+0x4>
    9dde:	8c 01       	movw	r16, r24
    9de0:	2a 01       	movw	r4, r20
    9de2:	3b 01       	movw	r6, r22
    9de4:	fc 01       	movw	r30, r24
    9de6:	c0 81       	ld	r28, Z
    9de8:	d1 81       	ldd	r29, Z+1	; 0x01
    9dea:	41 15       	cp	r20, r1
    9dec:	51 05       	cpc	r21, r1
    9dee:	61 05       	cpc	r22, r1
    9df0:	71 05       	cpc	r23, r1
    9df2:	99 f4       	brne	.+38     	; 0x9e1a <create_chain+0x48>
    9df4:	8d 84       	ldd	r8, Y+13	; 0x0d
    9df6:	9e 84       	ldd	r9, Y+14	; 0x0e
    9df8:	af 84       	ldd	r10, Y+15	; 0x0f
    9dfa:	b8 88       	ldd	r11, Y+16	; 0x10
    9dfc:	81 14       	cp	r8, r1
    9dfe:	91 04       	cpc	r9, r1
    9e00:	a1 04       	cpc	r10, r1
    9e02:	b1 04       	cpc	r11, r1
    9e04:	51 f1       	breq	.+84     	; 0x9e5a <create_chain+0x88>
    9e06:	89 8d       	ldd	r24, Y+25	; 0x19
    9e08:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9e0a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9e0c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9e0e:	88 16       	cp	r8, r24
    9e10:	99 06       	cpc	r9, r25
    9e12:	aa 06       	cpc	r10, r26
    9e14:	bb 06       	cpc	r11, r27
    9e16:	28 f1       	brcs	.+74     	; 0x9e62 <create_chain+0x90>
    9e18:	20 c0       	rjmp	.+64     	; 0x9e5a <create_chain+0x88>
    9e1a:	ce 01       	movw	r24, r28
    9e1c:	67 de       	rcall	.-818    	; 0x9aec <get_fat.isra.7>
    9e1e:	62 30       	cpi	r22, 0x02	; 2
    9e20:	71 05       	cpc	r23, r1
    9e22:	81 05       	cpc	r24, r1
    9e24:	91 05       	cpc	r25, r1
    9e26:	08 f4       	brcc	.+2      	; 0x9e2a <create_chain+0x58>
    9e28:	95 c0       	rjmp	.+298    	; 0x9f54 <create_chain+0x182>
    9e2a:	6f 3f       	cpi	r22, 0xFF	; 255
    9e2c:	ff ef       	ldi	r31, 0xFF	; 255
    9e2e:	7f 07       	cpc	r23, r31
    9e30:	8f 07       	cpc	r24, r31
    9e32:	9f 07       	cpc	r25, r31
    9e34:	29 f4       	brne	.+10     	; 0x9e40 <create_chain+0x6e>
    9e36:	4f ef       	ldi	r20, 0xFF	; 255
    9e38:	3f ef       	ldi	r19, 0xFF	; 255
    9e3a:	2f ef       	ldi	r18, 0xFF	; 255
    9e3c:	9f ef       	ldi	r25, 0xFF	; 255
    9e3e:	92 c0       	rjmp	.+292    	; 0x9f64 <create_chain+0x192>
    9e40:	c9 8c       	ldd	r12, Y+25	; 0x19
    9e42:	da 8c       	ldd	r13, Y+26	; 0x1a
    9e44:	eb 8c       	ldd	r14, Y+27	; 0x1b
    9e46:	fc 8c       	ldd	r15, Y+28	; 0x1c
    9e48:	6c 15       	cp	r22, r12
    9e4a:	7d 05       	cpc	r23, r13
    9e4c:	8e 05       	cpc	r24, r14
    9e4e:	9f 05       	cpc	r25, r15
    9e50:	08 f4       	brcc	.+2      	; 0x9e54 <create_chain+0x82>
    9e52:	85 c0       	rjmp	.+266    	; 0x9f5e <create_chain+0x18c>
    9e54:	53 01       	movw	r10, r6
    9e56:	42 01       	movw	r8, r4
    9e58:	04 c0       	rjmp	.+8      	; 0x9e62 <create_chain+0x90>
    9e5a:	81 2c       	mov	r8, r1
    9e5c:	91 2c       	mov	r9, r1
    9e5e:	54 01       	movw	r10, r8
    9e60:	83 94       	inc	r8
    9e62:	75 01       	movw	r14, r10
    9e64:	64 01       	movw	r12, r8
    9e66:	2f ef       	ldi	r18, 0xFF	; 255
    9e68:	c2 1a       	sub	r12, r18
    9e6a:	d2 0a       	sbc	r13, r18
    9e6c:	e2 0a       	sbc	r14, r18
    9e6e:	f2 0a       	sbc	r15, r18
    9e70:	89 8d       	ldd	r24, Y+25	; 0x19
    9e72:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9e74:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9e76:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9e78:	c8 16       	cp	r12, r24
    9e7a:	d9 06       	cpc	r13, r25
    9e7c:	ea 06       	cpc	r14, r26
    9e7e:	fb 06       	cpc	r15, r27
    9e80:	68 f0       	brcs	.+26     	; 0x9e9c <create_chain+0xca>
    9e82:	82 e0       	ldi	r24, 0x02	; 2
    9e84:	88 16       	cp	r8, r24
    9e86:	91 04       	cpc	r9, r1
    9e88:	a1 04       	cpc	r10, r1
    9e8a:	b1 04       	cpc	r11, r1
    9e8c:	10 f4       	brcc	.+4      	; 0x9e92 <create_chain+0xc0>
    9e8e:	40 e0       	ldi	r20, 0x00	; 0
    9e90:	62 c0       	rjmp	.+196    	; 0x9f56 <create_chain+0x184>
    9e92:	82 e0       	ldi	r24, 0x02	; 2
    9e94:	c8 2e       	mov	r12, r24
    9e96:	d1 2c       	mov	r13, r1
    9e98:	e1 2c       	mov	r14, r1
    9e9a:	f1 2c       	mov	r15, r1
    9e9c:	b7 01       	movw	r22, r14
    9e9e:	a6 01       	movw	r20, r12
    9ea0:	f8 01       	movw	r30, r16
    9ea2:	80 81       	ld	r24, Z
    9ea4:	91 81       	ldd	r25, Z+1	; 0x01
    9ea6:	22 de       	rcall	.-956    	; 0x9aec <get_fat.isra.7>
    9ea8:	61 15       	cp	r22, r1
    9eaa:	71 05       	cpc	r23, r1
    9eac:	81 05       	cpc	r24, r1
    9eae:	91 05       	cpc	r25, r1
    9eb0:	91 f0       	breq	.+36     	; 0x9ed6 <create_chain+0x104>
    9eb2:	61 30       	cpi	r22, 0x01	; 1
    9eb4:	71 05       	cpc	r23, r1
    9eb6:	81 05       	cpc	r24, r1
    9eb8:	91 05       	cpc	r25, r1
    9eba:	09 f4       	brne	.+2      	; 0x9ebe <create_chain+0xec>
    9ebc:	4b c0       	rjmp	.+150    	; 0x9f54 <create_chain+0x182>
    9ebe:	6f 3f       	cpi	r22, 0xFF	; 255
    9ec0:	7f 4f       	sbci	r23, 0xFF	; 255
    9ec2:	8f 4f       	sbci	r24, 0xFF	; 255
    9ec4:	9f 4f       	sbci	r25, 0xFF	; 255
    9ec6:	09 f4       	brne	.+2      	; 0x9eca <create_chain+0xf8>
    9ec8:	b6 cf       	rjmp	.-148    	; 0x9e36 <create_chain+0x64>
    9eca:	c8 14       	cp	r12, r8
    9ecc:	d9 04       	cpc	r13, r9
    9ece:	ea 04       	cpc	r14, r10
    9ed0:	fb 04       	cpc	r15, r11
    9ed2:	49 f6       	brne	.-110    	; 0x9e66 <create_chain+0x94>
    9ed4:	dc cf       	rjmp	.-72     	; 0x9e8e <create_chain+0xbc>
    9ed6:	0f ef       	ldi	r16, 0xFF	; 255
    9ed8:	1f ef       	ldi	r17, 0xFF	; 255
    9eda:	98 01       	movw	r18, r16
    9edc:	b7 01       	movw	r22, r14
    9ede:	a6 01       	movw	r20, r12
    9ee0:	ce 01       	movw	r24, r28
    9ee2:	07 dd       	rcall	.-1522   	; 0x98f2 <put_fat>
    9ee4:	00 97       	sbiw	r24, 0x00	; 0
    9ee6:	99 f5       	brne	.+102    	; 0x9f4e <create_chain+0x17c>
    9ee8:	41 14       	cp	r4, r1
    9eea:	51 04       	cpc	r5, r1
    9eec:	61 04       	cpc	r6, r1
    9eee:	71 04       	cpc	r7, r1
    9ef0:	e9 f4       	brne	.+58     	; 0x9f2c <create_chain+0x15a>
    9ef2:	cd 86       	std	Y+13, r12	; 0x0d
    9ef4:	de 86       	std	Y+14, r13	; 0x0e
    9ef6:	ef 86       	std	Y+15, r14	; 0x0f
    9ef8:	f8 8a       	std	Y+16, r15	; 0x10
    9efa:	89 89       	ldd	r24, Y+17	; 0x11
    9efc:	9a 89       	ldd	r25, Y+18	; 0x12
    9efe:	ab 89       	ldd	r26, Y+19	; 0x13
    9f00:	bc 89       	ldd	r27, Y+20	; 0x14
    9f02:	49 8d       	ldd	r20, Y+25	; 0x19
    9f04:	5a 8d       	ldd	r21, Y+26	; 0x1a
    9f06:	6b 8d       	ldd	r22, Y+27	; 0x1b
    9f08:	7c 8d       	ldd	r23, Y+28	; 0x1c
    9f0a:	42 50       	subi	r20, 0x02	; 2
    9f0c:	51 09       	sbc	r21, r1
    9f0e:	61 09       	sbc	r22, r1
    9f10:	71 09       	sbc	r23, r1
    9f12:	84 17       	cp	r24, r20
    9f14:	95 07       	cpc	r25, r21
    9f16:	a6 07       	cpc	r26, r22
    9f18:	b7 07       	cpc	r27, r23
    9f1a:	88 f4       	brcc	.+34     	; 0x9f3e <create_chain+0x16c>
    9f1c:	01 97       	sbiw	r24, 0x01	; 1
    9f1e:	a1 09       	sbc	r26, r1
    9f20:	b1 09       	sbc	r27, r1
    9f22:	89 8b       	std	Y+17, r24	; 0x11
    9f24:	9a 8b       	std	Y+18, r25	; 0x12
    9f26:	ab 8b       	std	Y+19, r26	; 0x13
    9f28:	bc 8b       	std	Y+20, r27	; 0x14
    9f2a:	09 c0       	rjmp	.+18     	; 0x9f3e <create_chain+0x16c>
    9f2c:	97 01       	movw	r18, r14
    9f2e:	86 01       	movw	r16, r12
    9f30:	b3 01       	movw	r22, r6
    9f32:	a2 01       	movw	r20, r4
    9f34:	ce 01       	movw	r24, r28
    9f36:	dd dc       	rcall	.-1606   	; 0x98f2 <put_fat>
    9f38:	00 97       	sbiw	r24, 0x00	; 0
    9f3a:	d9 f2       	breq	.-74     	; 0x9ef2 <create_chain+0x120>
    9f3c:	08 c0       	rjmp	.+16     	; 0x9f4e <create_chain+0x17c>
    9f3e:	8c 81       	ldd	r24, Y+4	; 0x04
    9f40:	81 60       	ori	r24, 0x01	; 1
    9f42:	8c 83       	std	Y+4, r24	; 0x04
    9f44:	4c 2d       	mov	r20, r12
    9f46:	3d 2d       	mov	r19, r13
    9f48:	2e 2d       	mov	r18, r14
    9f4a:	9f 2d       	mov	r25, r15
    9f4c:	0b c0       	rjmp	.+22     	; 0x9f64 <create_chain+0x192>
    9f4e:	01 97       	sbiw	r24, 0x01	; 1
    9f50:	09 f4       	brne	.+2      	; 0x9f54 <create_chain+0x182>
    9f52:	71 cf       	rjmp	.-286    	; 0x9e36 <create_chain+0x64>
    9f54:	41 e0       	ldi	r20, 0x01	; 1
    9f56:	30 e0       	ldi	r19, 0x00	; 0
    9f58:	20 e0       	ldi	r18, 0x00	; 0
    9f5a:	90 e0       	ldi	r25, 0x00	; 0
    9f5c:	03 c0       	rjmp	.+6      	; 0x9f64 <create_chain+0x192>
    9f5e:	46 2f       	mov	r20, r22
    9f60:	37 2f       	mov	r19, r23
    9f62:	28 2f       	mov	r18, r24
    9f64:	64 2f       	mov	r22, r20
    9f66:	73 2f       	mov	r23, r19
    9f68:	82 2f       	mov	r24, r18
    9f6a:	cd b7       	in	r28, 0x3d	; 61
    9f6c:	de b7       	in	r29, 0x3e	; 62
    9f6e:	e0 e1       	ldi	r30, 0x10	; 16
    9f70:	0c 94 52 ec 	jmp	0x1d8a4	; 0x1d8a4 <__epilogue_restores__+0x4>

00009f74 <remove_chain>:
    9f74:	4f 92       	push	r4
    9f76:	5f 92       	push	r5
    9f78:	6f 92       	push	r6
    9f7a:	7f 92       	push	r7
    9f7c:	af 92       	push	r10
    9f7e:	bf 92       	push	r11
    9f80:	cf 92       	push	r12
    9f82:	df 92       	push	r13
    9f84:	ef 92       	push	r14
    9f86:	ff 92       	push	r15
    9f88:	0f 93       	push	r16
    9f8a:	1f 93       	push	r17
    9f8c:	cf 93       	push	r28
    9f8e:	df 93       	push	r29
    9f90:	5c 01       	movw	r10, r24
    9f92:	6a 01       	movw	r12, r20
    9f94:	7b 01       	movw	r14, r22
    9f96:	b9 01       	movw	r22, r18
    9f98:	a8 01       	movw	r20, r16
    9f9a:	22 e0       	ldi	r18, 0x02	; 2
    9f9c:	c2 16       	cp	r12, r18
    9f9e:	d1 04       	cpc	r13, r1
    9fa0:	e1 04       	cpc	r14, r1
    9fa2:	f1 04       	cpc	r15, r1
    9fa4:	10 f4       	brcc	.+4      	; 0x9faa <remove_chain+0x36>
    9fa6:	22 e0       	ldi	r18, 0x02	; 2
    9fa8:	27 c0       	rjmp	.+78     	; 0x9ff8 <remove_chain+0x84>
    9faa:	fc 01       	movw	r30, r24
    9fac:	c0 81       	ld	r28, Z
    9fae:	d1 81       	ldd	r29, Z+1	; 0x01
    9fb0:	89 8d       	ldd	r24, Y+25	; 0x19
    9fb2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9fb4:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9fb6:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9fb8:	c8 16       	cp	r12, r24
    9fba:	d9 06       	cpc	r13, r25
    9fbc:	ea 06       	cpc	r14, r26
    9fbe:	fb 06       	cpc	r15, r27
    9fc0:	90 f7       	brcc	.-28     	; 0x9fa6 <remove_chain+0x32>
    9fc2:	41 15       	cp	r20, r1
    9fc4:	51 05       	cpc	r21, r1
    9fc6:	61 05       	cpc	r22, r1
    9fc8:	71 05       	cpc	r23, r1
    9fca:	41 f0       	breq	.+16     	; 0x9fdc <remove_chain+0x68>
    9fcc:	0f ef       	ldi	r16, 0xFF	; 255
    9fce:	1f ef       	ldi	r17, 0xFF	; 255
    9fd0:	98 01       	movw	r18, r16
    9fd2:	ce 01       	movw	r24, r28
    9fd4:	8e dc       	rcall	.-1764   	; 0x98f2 <put_fat>
    9fd6:	00 97       	sbiw	r24, 0x00	; 0
    9fd8:	09 f0       	breq	.+2      	; 0x9fdc <remove_chain+0x68>
    9fda:	4c c0       	rjmp	.+152    	; 0xa074 <remove_chain+0x100>
    9fdc:	b7 01       	movw	r22, r14
    9fde:	a6 01       	movw	r20, r12
    9fe0:	f5 01       	movw	r30, r10
    9fe2:	80 81       	ld	r24, Z
    9fe4:	91 81       	ldd	r25, Z+1	; 0x01
    9fe6:	82 dd       	rcall	.-1276   	; 0x9aec <get_fat.isra.7>
    9fe8:	2b 01       	movw	r4, r22
    9fea:	3c 01       	movw	r6, r24
    9fec:	61 15       	cp	r22, r1
    9fee:	71 05       	cpc	r23, r1
    9ff0:	81 05       	cpc	r24, r1
    9ff2:	91 05       	cpc	r25, r1
    9ff4:	19 f4       	brne	.+6      	; 0x9ffc <remove_chain+0x88>
    9ff6:	20 e0       	ldi	r18, 0x00	; 0
    9ff8:	90 e0       	ldi	r25, 0x00	; 0
    9ffa:	3d c0       	rjmp	.+122    	; 0xa076 <remove_chain+0x102>
    9ffc:	61 30       	cpi	r22, 0x01	; 1
    9ffe:	71 05       	cpc	r23, r1
    a000:	81 05       	cpc	r24, r1
    a002:	91 05       	cpc	r25, r1
    a004:	81 f2       	breq	.-96     	; 0x9fa6 <remove_chain+0x32>
    a006:	6f 3f       	cpi	r22, 0xFF	; 255
    a008:	7f 4f       	sbci	r23, 0xFF	; 255
    a00a:	8f 4f       	sbci	r24, 0xFF	; 255
    a00c:	9f 4f       	sbci	r25, 0xFF	; 255
    a00e:	81 f1       	breq	.+96     	; 0xa070 <remove_chain+0xfc>
    a010:	00 e0       	ldi	r16, 0x00	; 0
    a012:	10 e0       	ldi	r17, 0x00	; 0
    a014:	98 01       	movw	r18, r16
    a016:	b7 01       	movw	r22, r14
    a018:	a6 01       	movw	r20, r12
    a01a:	ce 01       	movw	r24, r28
    a01c:	6a dc       	rcall	.-1836   	; 0x98f2 <put_fat>
    a01e:	00 97       	sbiw	r24, 0x00	; 0
    a020:	49 f5       	brne	.+82     	; 0xa074 <remove_chain+0x100>
    a022:	89 89       	ldd	r24, Y+17	; 0x11
    a024:	9a 89       	ldd	r25, Y+18	; 0x12
    a026:	ab 89       	ldd	r26, Y+19	; 0x13
    a028:	bc 89       	ldd	r27, Y+20	; 0x14
    a02a:	49 8d       	ldd	r20, Y+25	; 0x19
    a02c:	5a 8d       	ldd	r21, Y+26	; 0x1a
    a02e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    a030:	7c 8d       	ldd	r23, Y+28	; 0x1c
    a032:	6a 01       	movw	r12, r20
    a034:	7b 01       	movw	r14, r22
    a036:	e2 e0       	ldi	r30, 0x02	; 2
    a038:	ce 1a       	sub	r12, r30
    a03a:	d1 08       	sbc	r13, r1
    a03c:	e1 08       	sbc	r14, r1
    a03e:	f1 08       	sbc	r15, r1
    a040:	8c 15       	cp	r24, r12
    a042:	9d 05       	cpc	r25, r13
    a044:	ae 05       	cpc	r26, r14
    a046:	bf 05       	cpc	r27, r15
    a048:	50 f4       	brcc	.+20     	; 0xa05e <remove_chain+0xea>
    a04a:	01 96       	adiw	r24, 0x01	; 1
    a04c:	a1 1d       	adc	r26, r1
    a04e:	b1 1d       	adc	r27, r1
    a050:	89 8b       	std	Y+17, r24	; 0x11
    a052:	9a 8b       	std	Y+18, r25	; 0x12
    a054:	ab 8b       	std	Y+19, r26	; 0x13
    a056:	bc 8b       	std	Y+20, r27	; 0x14
    a058:	8c 81       	ldd	r24, Y+4	; 0x04
    a05a:	81 60       	ori	r24, 0x01	; 1
    a05c:	8c 83       	std	Y+4, r24	; 0x04
    a05e:	73 01       	movw	r14, r6
    a060:	62 01       	movw	r12, r4
    a062:	44 16       	cp	r4, r20
    a064:	55 06       	cpc	r5, r21
    a066:	66 06       	cpc	r6, r22
    a068:	77 06       	cpc	r7, r23
    a06a:	08 f4       	brcc	.+2      	; 0xa06e <remove_chain+0xfa>
    a06c:	b7 cf       	rjmp	.-146    	; 0x9fdc <remove_chain+0x68>
    a06e:	c3 cf       	rjmp	.-122    	; 0x9ff6 <remove_chain+0x82>
    a070:	21 e0       	ldi	r18, 0x01	; 1
    a072:	c2 cf       	rjmp	.-124    	; 0x9ff8 <remove_chain+0x84>
    a074:	28 2f       	mov	r18, r24
    a076:	82 2f       	mov	r24, r18
    a078:	df 91       	pop	r29
    a07a:	cf 91       	pop	r28
    a07c:	1f 91       	pop	r17
    a07e:	0f 91       	pop	r16
    a080:	ff 90       	pop	r15
    a082:	ef 90       	pop	r14
    a084:	df 90       	pop	r13
    a086:	cf 90       	pop	r12
    a088:	bf 90       	pop	r11
    a08a:	af 90       	pop	r10
    a08c:	7f 90       	pop	r7
    a08e:	6f 90       	pop	r6
    a090:	5f 90       	pop	r5
    a092:	4f 90       	pop	r4
    a094:	08 95       	ret

0000a096 <get_fileinfo>:
    a096:	a0 e0       	ldi	r26, 0x00	; 0
    a098:	b0 e0       	ldi	r27, 0x00	; 0
    a09a:	e1 e5       	ldi	r30, 0x51	; 81
    a09c:	f0 e5       	ldi	r31, 0x50	; 80
    a09e:	0c 94 3c ec 	jmp	0x1d878	; 0x1d878 <__prologue_saves__+0x10>
    a0a2:	dc 01       	movw	r26, r24
    a0a4:	cd 90       	ld	r12, X+
    a0a6:	dc 90       	ld	r13, X
    a0a8:	11 97       	sbiw	r26, 0x01	; 1
    a0aa:	fb 01       	movw	r30, r22
    a0ac:	16 8a       	std	Z+22, r1	; 0x16
    a0ae:	56 96       	adiw	r26, 0x16	; 22
    a0b0:	0d 91       	ld	r16, X+
    a0b2:	1d 91       	ld	r17, X+
    a0b4:	2d 91       	ld	r18, X+
    a0b6:	3c 91       	ld	r19, X
    a0b8:	59 97       	sbiw	r26, 0x19	; 25
    a0ba:	01 15       	cp	r16, r1
    a0bc:	11 05       	cpc	r17, r1
    a0be:	21 05       	cpc	r18, r1
    a0c0:	31 05       	cpc	r19, r1
    a0c2:	09 f4       	brne	.+2      	; 0xa0c6 <get_fileinfo+0x30>
    a0c4:	bb c0       	rjmp	.+374    	; 0xa23c <get_fileinfo+0x1a6>
    a0c6:	eb 01       	movw	r28, r22
    a0c8:	8c 01       	movw	r16, r24
    a0ca:	fc 01       	movw	r30, r24
    a0cc:	80 a5       	ldd	r24, Z+40	; 0x28
    a0ce:	91 a5       	ldd	r25, Z+41	; 0x29
    a0d0:	a2 a5       	ldd	r26, Z+42	; 0x2a
    a0d2:	b3 a5       	ldd	r27, Z+43	; 0x2b
    a0d4:	8f 3f       	cpi	r24, 0xFF	; 255
    a0d6:	9f 4f       	sbci	r25, 0xFF	; 255
    a0d8:	af 4f       	sbci	r26, 0xFF	; 255
    a0da:	bf 4f       	sbci	r27, 0xFF	; 255
    a0dc:	59 f1       	breq	.+86     	; 0xa134 <get_fileinfo+0x9e>
    a0de:	5b 01       	movw	r10, r22
    a0e0:	26 e1       	ldi	r18, 0x16	; 22
    a0e2:	a2 0e       	add	r10, r18
    a0e4:	b1 1c       	adc	r11, r1
    a0e6:	e1 2c       	mov	r14, r1
    a0e8:	f1 2c       	mov	r15, r1
    a0ea:	d6 01       	movw	r26, r12
    a0ec:	1b 96       	adiw	r26, 0x0b	; 11
    a0ee:	ed 91       	ld	r30, X+
    a0f0:	fc 91       	ld	r31, X
    a0f2:	1c 97       	sbiw	r26, 0x0c	; 12
    a0f4:	c7 01       	movw	r24, r14
    a0f6:	88 0f       	add	r24, r24
    a0f8:	99 1f       	adc	r25, r25
    a0fa:	e8 0f       	add	r30, r24
    a0fc:	f9 1f       	adc	r31, r25
    a0fe:	80 81       	ld	r24, Z
    a100:	91 81       	ldd	r25, Z+1	; 0x01
    a102:	00 97       	sbiw	r24, 0x00	; 0
    a104:	99 f0       	breq	.+38     	; 0xa12c <get_fileinfo+0x96>
    a106:	60 e0       	ldi	r22, 0x00	; 0
    a108:	70 e0       	ldi	r23, 0x00	; 0
    a10a:	0e 94 24 6e 	call	0xdc48	; 0xdc48 <ff_convert>
    a10e:	00 97       	sbiw	r24, 0x00	; 0
    a110:	59 f0       	breq	.+22     	; 0xa128 <get_fileinfo+0x92>
    a112:	af ef       	ldi	r26, 0xFF	; 255
    a114:	ea 16       	cp	r14, r26
    a116:	f1 04       	cpc	r15, r1
    a118:	39 f0       	breq	.+14     	; 0xa128 <get_fileinfo+0x92>
    a11a:	bf ef       	ldi	r27, 0xFF	; 255
    a11c:	eb 1a       	sub	r14, r27
    a11e:	fb 0a       	sbc	r15, r27
    a120:	f5 01       	movw	r30, r10
    a122:	81 93       	st	Z+, r24
    a124:	5f 01       	movw	r10, r30
    a126:	e1 cf       	rjmp	.-62     	; 0xa0ea <get_fileinfo+0x54>
    a128:	e1 2c       	mov	r14, r1
    a12a:	f1 2c       	mov	r15, r1
    a12c:	fe 01       	movw	r30, r28
    a12e:	ee 0d       	add	r30, r14
    a130:	ff 1d       	adc	r31, r15
    a132:	16 8a       	std	Z+22, r1	; 0x16
    a134:	4e 89       	ldd	r20, Y+22	; 0x16
    a136:	50 e0       	ldi	r21, 0x00	; 0
    a138:	20 e0       	ldi	r18, 0x00	; 0
    a13a:	30 e0       	ldi	r19, 0x00	; 0
    a13c:	80 e0       	ldi	r24, 0x00	; 0
    a13e:	90 e0       	ldi	r25, 0x00	; 0
    a140:	6e e2       	ldi	r22, 0x2E	; 46
    a142:	d6 2e       	mov	r13, r22
    a144:	fc 01       	movw	r30, r24
    a146:	31 96       	adiw	r30, 0x01	; 1
    a148:	d8 01       	movw	r26, r16
    a14a:	5a 96       	adiw	r26, 0x1a	; 26
    a14c:	6d 91       	ld	r22, X+
    a14e:	7c 91       	ld	r23, X
    a150:	5b 97       	sbiw	r26, 0x1b	; 27
    a152:	db 01       	movw	r26, r22
    a154:	a8 0f       	add	r26, r24
    a156:	b9 1f       	adc	r27, r25
    a158:	8c 91       	ld	r24, X
    a15a:	80 32       	cpi	r24, 0x20	; 32
    a15c:	e1 f1       	breq	.+120    	; 0xa1d6 <get_fileinfo+0x140>
    a15e:	85 30       	cpi	r24, 0x05	; 5
    a160:	09 f4       	brne	.+2      	; 0xa164 <get_fileinfo+0xce>
    a162:	85 ee       	ldi	r24, 0xE5	; 229
    a164:	e9 30       	cpi	r30, 0x09	; 9
    a166:	f1 05       	cpc	r31, r1
    a168:	69 f4       	brne	.+26     	; 0xa184 <get_fileinfo+0xee>
    a16a:	de 01       	movw	r26, r28
    a16c:	a2 0f       	add	r26, r18
    a16e:	b3 1f       	adc	r27, r19
    a170:	41 15       	cp	r20, r1
    a172:	51 05       	cpc	r21, r1
    a174:	19 f4       	brne	.+6      	; 0xa17c <get_fileinfo+0xe6>
    a176:	56 96       	adiw	r26, 0x16	; 22
    a178:	dc 92       	st	X, r13
    a17a:	56 97       	sbiw	r26, 0x16	; 22
    a17c:	19 96       	adiw	r26, 0x09	; 9
    a17e:	dc 92       	st	X, r13
    a180:	2f 5f       	subi	r18, 0xFF	; 255
    a182:	3f 4f       	sbci	r19, 0xFF	; 255
    a184:	7e 01       	movw	r14, r28
    a186:	e2 0e       	add	r14, r18
    a188:	f3 1e       	adc	r15, r19
    a18a:	d7 01       	movw	r26, r14
    a18c:	19 96       	adiw	r26, 0x09	; 9
    a18e:	8c 93       	st	X, r24
    a190:	41 15       	cp	r20, r1
    a192:	51 05       	cpc	r21, r1
    a194:	f1 f4       	brne	.+60     	; 0xa1d2 <get_fileinfo+0x13c>
    a196:	9f eb       	ldi	r25, 0xBF	; 191
    a198:	98 0f       	add	r25, r24
    a19a:	9a 31       	cpi	r25, 0x1A	; 26
    a19c:	b8 f4       	brcc	.+46     	; 0xa1cc <get_fileinfo+0x136>
    a19e:	d8 01       	movw	r26, r16
    a1a0:	5a 96       	adiw	r26, 0x1a	; 26
    a1a2:	6d 91       	ld	r22, X+
    a1a4:	7c 91       	ld	r23, X
    a1a6:	5b 97       	sbiw	r26, 0x1b	; 27
    a1a8:	db 01       	movw	r26, r22
    a1aa:	1c 96       	adiw	r26, 0x0c	; 12
    a1ac:	6c 91       	ld	r22, X
    a1ae:	a6 2f       	mov	r26, r22
    a1b0:	b0 e0       	ldi	r27, 0x00	; 0
    a1b2:	e9 30       	cpi	r30, 0x09	; 9
    a1b4:	f1 05       	cpc	r31, r1
    a1b6:	18 f4       	brcc	.+6      	; 0xa1be <get_fileinfo+0x128>
    a1b8:	68 e0       	ldi	r22, 0x08	; 8
    a1ba:	70 e0       	ldi	r23, 0x00	; 0
    a1bc:	02 c0       	rjmp	.+4      	; 0xa1c2 <get_fileinfo+0x12c>
    a1be:	60 e1       	ldi	r22, 0x10	; 16
    a1c0:	70 e0       	ldi	r23, 0x00	; 0
    a1c2:	6a 23       	and	r22, r26
    a1c4:	7b 23       	and	r23, r27
    a1c6:	67 2b       	or	r22, r23
    a1c8:	09 f0       	breq	.+2      	; 0xa1cc <get_fileinfo+0x136>
    a1ca:	80 5e       	subi	r24, 0xE0	; 224
    a1cc:	d7 01       	movw	r26, r14
    a1ce:	56 96       	adiw	r26, 0x16	; 22
    a1d0:	8c 93       	st	X, r24
    a1d2:	2f 5f       	subi	r18, 0xFF	; 255
    a1d4:	3f 4f       	sbci	r19, 0xFF	; 255
    a1d6:	cf 01       	movw	r24, r30
    a1d8:	3b 97       	sbiw	r30, 0x0b	; 11
    a1da:	09 f0       	breq	.+2      	; 0xa1de <get_fileinfo+0x148>
    a1dc:	b3 cf       	rjmp	.-154    	; 0xa144 <get_fileinfo+0xae>
    a1de:	45 2b       	or	r20, r21
    a1e0:	71 f4       	brne	.+28     	; 0xa1fe <get_fileinfo+0x168>
    a1e2:	fe 01       	movw	r30, r28
    a1e4:	e2 0f       	add	r30, r18
    a1e6:	f3 1f       	adc	r31, r19
    a1e8:	16 8a       	std	Z+22, r1	; 0x16
    a1ea:	d8 01       	movw	r26, r16
    a1ec:	5a 96       	adiw	r26, 0x1a	; 26
    a1ee:	ed 91       	ld	r30, X+
    a1f0:	fc 91       	ld	r31, X
    a1f2:	5b 97       	sbiw	r26, 0x1b	; 27
    a1f4:	84 85       	ldd	r24, Z+12	; 0x0c
    a1f6:	81 11       	cpse	r24, r1
    a1f8:	02 c0       	rjmp	.+4      	; 0xa1fe <get_fileinfo+0x168>
    a1fa:	20 e0       	ldi	r18, 0x00	; 0
    a1fc:	30 e0       	ldi	r19, 0x00	; 0
    a1fe:	fe 01       	movw	r30, r28
    a200:	e2 0f       	add	r30, r18
    a202:	f3 1f       	adc	r31, r19
    a204:	11 86       	std	Z+9, r1	; 0x09
    a206:	d8 01       	movw	r26, r16
    a208:	5a 96       	adiw	r26, 0x1a	; 26
    a20a:	ed 91       	ld	r30, X+
    a20c:	fc 91       	ld	r31, X
    a20e:	5b 97       	sbiw	r26, 0x1b	; 27
    a210:	83 85       	ldd	r24, Z+11	; 0x0b
    a212:	88 87       	std	Y+8, r24	; 0x08
    a214:	5a 96       	adiw	r26, 0x1a	; 26
    a216:	0d 91       	ld	r16, X+
    a218:	1c 91       	ld	r17, X
    a21a:	5b 97       	sbiw	r26, 0x1b	; 27
    a21c:	c8 01       	movw	r24, r16
    a21e:	4c 96       	adiw	r24, 0x1c	; 28
    a220:	0e 94 79 47 	call	0x8ef2	; 0x8ef2 <ld_dword>
    a224:	68 83       	st	Y, r22
    a226:	79 83       	std	Y+1, r23	; 0x01
    a228:	8a 83       	std	Y+2, r24	; 0x02
    a22a:	9b 83       	std	Y+3, r25	; 0x03
    a22c:	c8 01       	movw	r24, r16
    a22e:	46 96       	adiw	r24, 0x16	; 22
    a230:	0e 94 79 47 	call	0x8ef2	; 0x8ef2 <ld_dword>
    a234:	7f 83       	std	Y+7, r23	; 0x07
    a236:	6e 83       	std	Y+6, r22	; 0x06
    a238:	9d 83       	std	Y+5, r25	; 0x05
    a23a:	8c 83       	std	Y+4, r24	; 0x04
    a23c:	cd b7       	in	r28, 0x3d	; 61
    a23e:	de b7       	in	r29, 0x3e	; 62
    a240:	ea e0       	ldi	r30, 0x0A	; 10
    a242:	0c 94 58 ec 	jmp	0x1d8b0	; 0x1d8b0 <__epilogue_restores__+0x10>

0000a246 <dir_next>:
    a246:	4f 92       	push	r4
    a248:	5f 92       	push	r5
    a24a:	6f 92       	push	r6
    a24c:	7f 92       	push	r7
    a24e:	9f 92       	push	r9
    a250:	af 92       	push	r10
    a252:	bf 92       	push	r11
    a254:	cf 92       	push	r12
    a256:	df 92       	push	r13
    a258:	ef 92       	push	r14
    a25a:	ff 92       	push	r15
    a25c:	0f 93       	push	r16
    a25e:	1f 93       	push	r17
    a260:	cf 93       	push	r28
    a262:	df 93       	push	r29
    a264:	5b 01       	movw	r10, r22
    a266:	fc 01       	movw	r30, r24
    a268:	46 89       	ldd	r20, Z+22	; 0x16
    a26a:	57 89       	ldd	r21, Z+23	; 0x17
    a26c:	60 8d       	ldd	r22, Z+24	; 0x18
    a26e:	71 8d       	ldd	r23, Z+25	; 0x19
    a270:	41 15       	cp	r20, r1
    a272:	51 05       	cpc	r21, r1
    a274:	61 05       	cpc	r22, r1
    a276:	71 05       	cpc	r23, r1
    a278:	09 f4       	brne	.+2      	; 0xa27c <dir_next+0x36>
    a27a:	f8 c0       	rjmp	.+496    	; 0xa46c <dir_next+0x226>
    a27c:	c6 84       	ldd	r12, Z+14	; 0x0e
    a27e:	d7 84       	ldd	r13, Z+15	; 0x0f
    a280:	e0 88       	ldd	r14, Z+16	; 0x10
    a282:	f1 88       	ldd	r15, Z+17	; 0x11
    a284:	f0 e2       	ldi	r31, 0x20	; 32
    a286:	cf 0e       	add	r12, r31
    a288:	d1 1c       	adc	r13, r1
    a28a:	e1 1c       	adc	r14, r1
    a28c:	f1 1c       	adc	r15, r1
    a28e:	c1 14       	cp	r12, r1
    a290:	d1 04       	cpc	r13, r1
    a292:	20 e2       	ldi	r18, 0x20	; 32
    a294:	e2 06       	cpc	r14, r18
    a296:	f1 04       	cpc	r15, r1
    a298:	08 f0       	brcs	.+2      	; 0xa29c <dir_next+0x56>
    a29a:	e8 c0       	rjmp	.+464    	; 0xa46c <dir_next+0x226>
    a29c:	8c 01       	movw	r16, r24
    a29e:	fc 01       	movw	r30, r24
    a2a0:	c0 81       	ld	r28, Z
    a2a2:	d1 81       	ldd	r29, Z+1	; 0x01
    a2a4:	d7 01       	movw	r26, r14
    a2a6:	c6 01       	movw	r24, r12
    a2a8:	91 70       	andi	r25, 0x01	; 1
    a2aa:	aa 27       	eor	r26, r26
    a2ac:	bb 27       	eor	r27, r27
    a2ae:	89 2b       	or	r24, r25
    a2b0:	8a 2b       	or	r24, r26
    a2b2:	8b 2b       	or	r24, r27
    a2b4:	09 f0       	breq	.+2      	; 0xa2b8 <dir_next+0x72>
    a2b6:	ca c0       	rjmp	.+404    	; 0xa44c <dir_next+0x206>
    a2b8:	4f 5f       	subi	r20, 0xFF	; 255
    a2ba:	5f 4f       	sbci	r21, 0xFF	; 255
    a2bc:	6f 4f       	sbci	r22, 0xFF	; 255
    a2be:	7f 4f       	sbci	r23, 0xFF	; 255
    a2c0:	46 8b       	std	Z+22, r20	; 0x16
    a2c2:	57 8b       	std	Z+23, r21	; 0x17
    a2c4:	60 8f       	std	Z+24, r22	; 0x18
    a2c6:	71 8f       	std	Z+25, r23	; 0x19
    a2c8:	42 89       	ldd	r20, Z+18	; 0x12
    a2ca:	53 89       	ldd	r21, Z+19	; 0x13
    a2cc:	64 89       	ldd	r22, Z+20	; 0x14
    a2ce:	75 89       	ldd	r23, Z+21	; 0x15
    a2d0:	41 15       	cp	r20, r1
    a2d2:	51 05       	cpc	r21, r1
    a2d4:	61 05       	cpc	r22, r1
    a2d6:	71 05       	cpc	r23, r1
    a2d8:	c9 f4       	brne	.+50     	; 0xa30c <dir_next+0xc6>
    a2da:	8f 81       	ldd	r24, Y+7	; 0x07
    a2dc:	98 85       	ldd	r25, Y+8	; 0x08
    a2de:	a0 e0       	ldi	r26, 0x00	; 0
    a2e0:	b0 e0       	ldi	r27, 0x00	; 0
    a2e2:	b7 01       	movw	r22, r14
    a2e4:	a6 01       	movw	r20, r12
    a2e6:	35 e0       	ldi	r19, 0x05	; 5
    a2e8:	76 95       	lsr	r23
    a2ea:	67 95       	ror	r22
    a2ec:	57 95       	ror	r21
    a2ee:	47 95       	ror	r20
    a2f0:	3a 95       	dec	r19
    a2f2:	d1 f7       	brne	.-12     	; 0xa2e8 <dir_next+0xa2>
    a2f4:	48 17       	cp	r20, r24
    a2f6:	59 07       	cpc	r21, r25
    a2f8:	6a 07       	cpc	r22, r26
    a2fa:	7b 07       	cpc	r23, r27
    a2fc:	08 f4       	brcc	.+2      	; 0xa300 <dir_next+0xba>
    a2fe:	a6 c0       	rjmp	.+332    	; 0xa44c <dir_next+0x206>
    a300:	f8 01       	movw	r30, r16
    a302:	16 8a       	std	Z+22, r1	; 0x16
    a304:	17 8a       	std	Z+23, r1	; 0x17
    a306:	10 8e       	std	Z+24, r1	; 0x18
    a308:	11 8e       	std	Z+25, r1	; 0x19
    a30a:	b0 c0       	rjmp	.+352    	; 0xa46c <dir_next+0x226>
    a30c:	89 85       	ldd	r24, Y+9	; 0x09
    a30e:	9a 85       	ldd	r25, Y+10	; 0x0a
    a310:	01 97       	sbiw	r24, 0x01	; 1
    a312:	a0 e0       	ldi	r26, 0x00	; 0
    a314:	b0 e0       	ldi	r27, 0x00	; 0
    a316:	26 01       	movw	r4, r12
    a318:	37 01       	movw	r6, r14
    a31a:	29 e0       	ldi	r18, 0x09	; 9
    a31c:	76 94       	lsr	r7
    a31e:	67 94       	ror	r6
    a320:	57 94       	ror	r5
    a322:	47 94       	ror	r4
    a324:	2a 95       	dec	r18
    a326:	d1 f7       	brne	.-12     	; 0xa31c <dir_next+0xd6>
    a328:	84 21       	and	r24, r4
    a32a:	95 21       	and	r25, r5
    a32c:	a6 21       	and	r26, r6
    a32e:	b7 21       	and	r27, r7
    a330:	89 2b       	or	r24, r25
    a332:	8a 2b       	or	r24, r26
    a334:	8b 2b       	or	r24, r27
    a336:	09 f0       	breq	.+2      	; 0xa33a <dir_next+0xf4>
    a338:	89 c0       	rjmp	.+274    	; 0xa44c <dir_next+0x206>
    a33a:	ce 01       	movw	r24, r28
    a33c:	d7 db       	rcall	.-2130   	; 0x9aec <get_fat.isra.7>
    a33e:	2b 01       	movw	r4, r22
    a340:	3c 01       	movw	r6, r24
    a342:	62 30       	cpi	r22, 0x02	; 2
    a344:	71 05       	cpc	r23, r1
    a346:	81 05       	cpc	r24, r1
    a348:	91 05       	cpc	r25, r1
    a34a:	18 f4       	brcc	.+6      	; 0xa352 <dir_next+0x10c>
    a34c:	82 e0       	ldi	r24, 0x02	; 2
    a34e:	90 e0       	ldi	r25, 0x00	; 0
    a350:	92 c0       	rjmp	.+292    	; 0xa476 <dir_next+0x230>
    a352:	6f 3f       	cpi	r22, 0xFF	; 255
    a354:	7f 4f       	sbci	r23, 0xFF	; 255
    a356:	8f 4f       	sbci	r24, 0xFF	; 255
    a358:	9f 4f       	sbci	r25, 0xFF	; 255
    a35a:	19 f4       	brne	.+6      	; 0xa362 <dir_next+0x11c>
    a35c:	81 e0       	ldi	r24, 0x01	; 1
    a35e:	90 e0       	ldi	r25, 0x00	; 0
    a360:	8a c0       	rjmp	.+276    	; 0xa476 <dir_next+0x230>
    a362:	89 8d       	ldd	r24, Y+25	; 0x19
    a364:	9a 8d       	ldd	r25, Y+26	; 0x1a
    a366:	ab 8d       	ldd	r26, Y+27	; 0x1b
    a368:	bc 8d       	ldd	r27, Y+28	; 0x1c
    a36a:	48 16       	cp	r4, r24
    a36c:	59 06       	cpc	r5, r25
    a36e:	6a 06       	cpc	r6, r26
    a370:	7b 06       	cpc	r7, r27
    a372:	08 f4       	brcc	.+2      	; 0xa376 <dir_next+0x130>
    a374:	5c c0       	rjmp	.+184    	; 0xa42e <dir_next+0x1e8>
    a376:	ab 28       	or	r10, r11
    a378:	19 f2       	breq	.-122    	; 0xa300 <dir_next+0xba>
    a37a:	f8 01       	movw	r30, r16
    a37c:	42 89       	ldd	r20, Z+18	; 0x12
    a37e:	53 89       	ldd	r21, Z+19	; 0x13
    a380:	64 89       	ldd	r22, Z+20	; 0x14
    a382:	75 89       	ldd	r23, Z+21	; 0x15
    a384:	c8 01       	movw	r24, r16
    a386:	25 dd       	rcall	.-1462   	; 0x9dd2 <create_chain>
    a388:	2b 01       	movw	r4, r22
    a38a:	3c 01       	movw	r6, r24
    a38c:	61 15       	cp	r22, r1
    a38e:	71 05       	cpc	r23, r1
    a390:	81 05       	cpc	r24, r1
    a392:	91 05       	cpc	r25, r1
    a394:	09 f4       	brne	.+2      	; 0xa398 <dir_next+0x152>
    a396:	6d c0       	rjmp	.+218    	; 0xa472 <dir_next+0x22c>
    a398:	61 30       	cpi	r22, 0x01	; 1
    a39a:	71 05       	cpc	r23, r1
    a39c:	81 05       	cpc	r24, r1
    a39e:	91 05       	cpc	r25, r1
    a3a0:	a9 f2       	breq	.-86     	; 0xa34c <dir_next+0x106>
    a3a2:	6f 3f       	cpi	r22, 0xFF	; 255
    a3a4:	7f 4f       	sbci	r23, 0xFF	; 255
    a3a6:	8f 4f       	sbci	r24, 0xFF	; 255
    a3a8:	9f 4f       	sbci	r25, 0xFF	; 255
    a3aa:	c1 f2       	breq	.-80     	; 0xa35c <dir_next+0x116>
    a3ac:	ce 01       	movw	r24, r28
    a3ae:	0e 94 db 48 	call	0x91b6	; 0x91b6 <sync_window>
    a3b2:	89 2b       	or	r24, r25
    a3b4:	99 f6       	brne	.-90     	; 0xa35c <dir_next+0x116>
    a3b6:	40 e0       	ldi	r20, 0x00	; 0
    a3b8:	52 e0       	ldi	r21, 0x02	; 2
    a3ba:	60 e0       	ldi	r22, 0x00	; 0
    a3bc:	70 e0       	ldi	r23, 0x00	; 0
    a3be:	ce 01       	movw	r24, r28
    a3c0:	c5 96       	adiw	r24, 0x35	; 53
    a3c2:	0e 94 94 47 	call	0x8f28	; 0x8f28 <mem_set>
    a3c6:	b3 01       	movw	r22, r6
    a3c8:	a2 01       	movw	r20, r4
    a3ca:	ce 01       	movw	r24, r28
    a3cc:	0e 94 9d 47 	call	0x8f3a	; 0x8f3a <clust2sect>
    a3d0:	69 ab       	std	Y+49, r22	; 0x31
    a3d2:	7a ab       	std	Y+50, r23	; 0x32
    a3d4:	8b ab       	std	Y+51, r24	; 0x33
    a3d6:	9c ab       	std	Y+52, r25	; 0x34
    a3d8:	a1 2c       	mov	r10, r1
    a3da:	b1 2c       	mov	r11, r1
    a3dc:	99 24       	eor	r9, r9
    a3de:	93 94       	inc	r9
    a3e0:	89 85       	ldd	r24, Y+9	; 0x09
    a3e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    a3e4:	a8 16       	cp	r10, r24
    a3e6:	b9 06       	cpc	r11, r25
    a3e8:	b0 f4       	brcc	.+44     	; 0xa416 <dir_next+0x1d0>
    a3ea:	9b 82       	std	Y+3, r9	; 0x03
    a3ec:	ce 01       	movw	r24, r28
    a3ee:	0e 94 8a 48 	call	0x9114	; 0x9114 <sync_window.part.3>
    a3f2:	89 2b       	or	r24, r25
    a3f4:	09 f0       	breq	.+2      	; 0xa3f8 <dir_next+0x1b2>
    a3f6:	b2 cf       	rjmp	.-156    	; 0xa35c <dir_next+0x116>
    a3f8:	8f ef       	ldi	r24, 0xFF	; 255
    a3fa:	a8 1a       	sub	r10, r24
    a3fc:	b8 0a       	sbc	r11, r24
    a3fe:	89 a9       	ldd	r24, Y+49	; 0x31
    a400:	9a a9       	ldd	r25, Y+50	; 0x32
    a402:	ab a9       	ldd	r26, Y+51	; 0x33
    a404:	bc a9       	ldd	r27, Y+52	; 0x34
    a406:	01 96       	adiw	r24, 0x01	; 1
    a408:	a1 1d       	adc	r26, r1
    a40a:	b1 1d       	adc	r27, r1
    a40c:	89 ab       	std	Y+49, r24	; 0x31
    a40e:	9a ab       	std	Y+50, r25	; 0x32
    a410:	ab ab       	std	Y+51, r26	; 0x33
    a412:	bc ab       	std	Y+52, r27	; 0x34
    a414:	e5 cf       	rjmp	.-54     	; 0xa3e0 <dir_next+0x19a>
    a416:	89 a9       	ldd	r24, Y+49	; 0x31
    a418:	9a a9       	ldd	r25, Y+50	; 0x32
    a41a:	ab a9       	ldd	r26, Y+51	; 0x33
    a41c:	bc a9       	ldd	r27, Y+52	; 0x34
    a41e:	8a 19       	sub	r24, r10
    a420:	9b 09       	sbc	r25, r11
    a422:	a1 09       	sbc	r26, r1
    a424:	b1 09       	sbc	r27, r1
    a426:	89 ab       	std	Y+49, r24	; 0x31
    a428:	9a ab       	std	Y+50, r25	; 0x32
    a42a:	ab ab       	std	Y+51, r26	; 0x33
    a42c:	bc ab       	std	Y+52, r27	; 0x34
    a42e:	f8 01       	movw	r30, r16
    a430:	42 8a       	std	Z+18, r4	; 0x12
    a432:	53 8a       	std	Z+19, r5	; 0x13
    a434:	64 8a       	std	Z+20, r6	; 0x14
    a436:	75 8a       	std	Z+21, r7	; 0x15
    a438:	b3 01       	movw	r22, r6
    a43a:	a2 01       	movw	r20, r4
    a43c:	ce 01       	movw	r24, r28
    a43e:	0e 94 9d 47 	call	0x8f3a	; 0x8f3a <clust2sect>
    a442:	f8 01       	movw	r30, r16
    a444:	66 8b       	std	Z+22, r22	; 0x16
    a446:	77 8b       	std	Z+23, r23	; 0x17
    a448:	80 8f       	std	Z+24, r24	; 0x18
    a44a:	91 8f       	std	Z+25, r25	; 0x19
    a44c:	f8 01       	movw	r30, r16
    a44e:	c6 86       	std	Z+14, r12	; 0x0e
    a450:	d7 86       	std	Z+15, r13	; 0x0f
    a452:	e0 8a       	std	Z+16, r14	; 0x10
    a454:	f1 8a       	std	Z+17, r15	; 0x11
    a456:	ce 01       	movw	r24, r28
    a458:	c5 96       	adiw	r24, 0x35	; 53
    a45a:	e6 01       	movw	r28, r12
    a45c:	d1 70       	andi	r29, 0x01	; 1
    a45e:	c8 0f       	add	r28, r24
    a460:	d9 1f       	adc	r29, r25
    a462:	d3 8f       	std	Z+27, r29	; 0x1b
    a464:	c2 8f       	std	Z+26, r28	; 0x1a
    a466:	80 e0       	ldi	r24, 0x00	; 0
    a468:	90 e0       	ldi	r25, 0x00	; 0
    a46a:	05 c0       	rjmp	.+10     	; 0xa476 <dir_next+0x230>
    a46c:	84 e0       	ldi	r24, 0x04	; 4
    a46e:	90 e0       	ldi	r25, 0x00	; 0
    a470:	02 c0       	rjmp	.+4      	; 0xa476 <dir_next+0x230>
    a472:	87 e0       	ldi	r24, 0x07	; 7
    a474:	90 e0       	ldi	r25, 0x00	; 0
    a476:	df 91       	pop	r29
    a478:	cf 91       	pop	r28
    a47a:	1f 91       	pop	r17
    a47c:	0f 91       	pop	r16
    a47e:	ff 90       	pop	r15
    a480:	ef 90       	pop	r14
    a482:	df 90       	pop	r13
    a484:	cf 90       	pop	r12
    a486:	bf 90       	pop	r11
    a488:	af 90       	pop	r10
    a48a:	9f 90       	pop	r9
    a48c:	7f 90       	pop	r7
    a48e:	6f 90       	pop	r6
    a490:	5f 90       	pop	r5
    a492:	4f 90       	pop	r4
    a494:	08 95       	ret

0000a496 <dir_alloc>:
    a496:	a0 e0       	ldi	r26, 0x00	; 0
    a498:	b0 e0       	ldi	r27, 0x00	; 0
    a49a:	e1 e5       	ldi	r30, 0x51	; 81
    a49c:	f2 e5       	ldi	r31, 0x52	; 82
    a49e:	0c 94 3e ec 	jmp	0x1d87c	; 0x1d87c <__prologue_saves__+0x14>
    a4a2:	ec 01       	movw	r28, r24
    a4a4:	6b 01       	movw	r12, r22
    a4a6:	e8 80       	ld	r14, Y
    a4a8:	f9 80       	ldd	r15, Y+1	; 0x01
    a4aa:	40 e0       	ldi	r20, 0x00	; 0
    a4ac:	50 e0       	ldi	r21, 0x00	; 0
    a4ae:	ba 01       	movw	r22, r20
    a4b0:	d0 db       	rcall	.-2144   	; 0x9c52 <dir_sdi>
    a4b2:	00 97       	sbiw	r24, 0x00	; 0
    a4b4:	01 f5       	brne	.+64     	; 0xa4f6 <dir_alloc+0x60>
    a4b6:	00 e0       	ldi	r16, 0x00	; 0
    a4b8:	10 e0       	ldi	r17, 0x00	; 0
    a4ba:	4e 89       	ldd	r20, Y+22	; 0x16
    a4bc:	5f 89       	ldd	r21, Y+23	; 0x17
    a4be:	68 8d       	ldd	r22, Y+24	; 0x18
    a4c0:	79 8d       	ldd	r23, Y+25	; 0x19
    a4c2:	c7 01       	movw	r24, r14
    a4c4:	0e 94 50 49 	call	0x92a0	; 0x92a0 <move_window>
    a4c8:	00 97       	sbiw	r24, 0x00	; 0
    a4ca:	a9 f4       	brne	.+42     	; 0xa4f6 <dir_alloc+0x60>
    a4cc:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a4ce:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a4d0:	20 81       	ld	r18, Z
    a4d2:	25 3e       	cpi	r18, 0xE5	; 229
    a4d4:	11 f0       	breq	.+4      	; 0xa4da <dir_alloc+0x44>
    a4d6:	21 11       	cpse	r18, r1
    a4d8:	06 c0       	rjmp	.+12     	; 0xa4e6 <dir_alloc+0x50>
    a4da:	0f 5f       	subi	r16, 0xFF	; 255
    a4dc:	1f 4f       	sbci	r17, 0xFF	; 255
    a4de:	0c 15       	cp	r16, r12
    a4e0:	1d 05       	cpc	r17, r13
    a4e2:	19 f4       	brne	.+6      	; 0xa4ea <dir_alloc+0x54>
    a4e4:	0d c0       	rjmp	.+26     	; 0xa500 <dir_alloc+0x6a>
    a4e6:	00 e0       	ldi	r16, 0x00	; 0
    a4e8:	10 e0       	ldi	r17, 0x00	; 0
    a4ea:	61 e0       	ldi	r22, 0x01	; 1
    a4ec:	70 e0       	ldi	r23, 0x00	; 0
    a4ee:	ce 01       	movw	r24, r28
    a4f0:	aa de       	rcall	.-684    	; 0xa246 <dir_next>
    a4f2:	00 97       	sbiw	r24, 0x00	; 0
    a4f4:	11 f3       	breq	.-60     	; 0xa4ba <dir_alloc+0x24>
    a4f6:	84 30       	cpi	r24, 0x04	; 4
    a4f8:	91 05       	cpc	r25, r1
    a4fa:	11 f4       	brne	.+4      	; 0xa500 <dir_alloc+0x6a>
    a4fc:	87 e0       	ldi	r24, 0x07	; 7
    a4fe:	90 e0       	ldi	r25, 0x00	; 0
    a500:	cd b7       	in	r28, 0x3d	; 61
    a502:	de b7       	in	r29, 0x3e	; 62
    a504:	e8 e0       	ldi	r30, 0x08	; 8
    a506:	0c 94 5a ec 	jmp	0x1d8b4	; 0x1d8b4 <__epilogue_restores__+0x14>

0000a50a <dir_read>:
    a50a:	a0 e0       	ldi	r26, 0x00	; 0
    a50c:	b0 e0       	ldi	r27, 0x00	; 0
    a50e:	eb e8       	ldi	r30, 0x8B	; 139
    a510:	f2 e5       	ldi	r31, 0x52	; 82
    a512:	0c 94 38 ec 	jmp	0x1d870	; 0x1d870 <__prologue_saves__+0x8>
    a516:	ec 01       	movw	r28, r24
    a518:	7b 01       	movw	r14, r22
    a51a:	a8 80       	ld	r10, Y
    a51c:	b9 80       	ldd	r11, Y+1	; 0x01
    a51e:	dd 24       	eor	r13, r13
    a520:	da 94       	dec	r13
    a522:	1f ef       	ldi	r17, 0xFF	; 255
    a524:	84 e0       	ldi	r24, 0x04	; 4
    a526:	90 e0       	ldi	r25, 0x00	; 0
    a528:	ad e0       	ldi	r26, 0x0D	; 13
    a52a:	ca 2e       	mov	r12, r26
    a52c:	4e 89       	ldd	r20, Y+22	; 0x16
    a52e:	5f 89       	ldd	r21, Y+23	; 0x17
    a530:	68 8d       	ldd	r22, Y+24	; 0x18
    a532:	79 8d       	ldd	r23, Y+25	; 0x19
    a534:	41 15       	cp	r20, r1
    a536:	51 05       	cpc	r21, r1
    a538:	61 05       	cpc	r22, r1
    a53a:	71 05       	cpc	r23, r1
    a53c:	09 f4       	brne	.+2      	; 0xa540 <dir_read+0x36>
    a53e:	9f c0       	rjmp	.+318    	; 0xa67e <dir_read+0x174>
    a540:	c5 01       	movw	r24, r10
    a542:	0e 94 50 49 	call	0x92a0	; 0x92a0 <move_window>
    a546:	00 97       	sbiw	r24, 0x00	; 0
    a548:	09 f0       	breq	.+2      	; 0xa54c <dir_read+0x42>
    a54a:	9b c0       	rjmp	.+310    	; 0xa682 <dir_read+0x178>
    a54c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    a54e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    a550:	0c 91       	ld	r16, X
    a552:	00 23       	and	r16, r16
    a554:	09 f4       	brne	.+2      	; 0xa558 <dir_read+0x4e>
    a556:	9d c0       	rjmp	.+314    	; 0xa692 <dir_read+0x188>
    a558:	1b 96       	adiw	r26, 0x0b	; 11
    a55a:	8c 91       	ld	r24, X
    a55c:	1b 97       	sbiw	r26, 0x0b	; 11
    a55e:	8f 73       	andi	r24, 0x3F	; 63
    a560:	8c 83       	std	Y+4, r24	; 0x04
    a562:	05 3e       	cpi	r16, 0xE5	; 229
    a564:	09 f4       	brne	.+2      	; 0xa568 <dir_read+0x5e>
    a566:	82 c0       	rjmp	.+260    	; 0xa66c <dir_read+0x162>
    a568:	0e 32       	cpi	r16, 0x2E	; 46
    a56a:	09 f4       	brne	.+2      	; 0xa56e <dir_read+0x64>
    a56c:	7f c0       	rjmp	.+254    	; 0xa66c <dir_read+0x162>
    a56e:	21 e0       	ldi	r18, 0x01	; 1
    a570:	30 e0       	ldi	r19, 0x00	; 0
    a572:	98 2f       	mov	r25, r24
    a574:	9f 71       	andi	r25, 0x1F	; 31
    a576:	98 30       	cpi	r25, 0x08	; 8
    a578:	11 f0       	breq	.+4      	; 0xa57e <dir_read+0x74>
    a57a:	20 e0       	ldi	r18, 0x00	; 0
    a57c:	30 e0       	ldi	r19, 0x00	; 0
    a57e:	2e 15       	cp	r18, r14
    a580:	3f 05       	cpc	r19, r15
    a582:	09 f0       	breq	.+2      	; 0xa586 <dir_read+0x7c>
    a584:	73 c0       	rjmp	.+230    	; 0xa66c <dir_read+0x162>
    a586:	8f 30       	cpi	r24, 0x0F	; 15
    a588:	09 f0       	breq	.+2      	; 0xa58c <dir_read+0x82>
    a58a:	60 c0       	rjmp	.+192    	; 0xa64c <dir_read+0x142>
    a58c:	06 ff       	sbrs	r16, 6
    a58e:	0d c0       	rjmp	.+26     	; 0xa5aa <dir_read+0xa0>
    a590:	1d 96       	adiw	r26, 0x0d	; 13
    a592:	8c 91       	ld	r24, X
    a594:	1d 97       	sbiw	r26, 0x0d	; 13
    a596:	0f 7b       	andi	r16, 0xBF	; 191
    a598:	4e 85       	ldd	r20, Y+14	; 0x0e
    a59a:	5f 85       	ldd	r21, Y+15	; 0x0f
    a59c:	68 89       	ldd	r22, Y+16	; 0x10
    a59e:	79 89       	ldd	r23, Y+17	; 0x11
    a5a0:	48 a7       	std	Y+40, r20	; 0x28
    a5a2:	59 a7       	std	Y+41, r21	; 0x29
    a5a4:	6a a7       	std	Y+42, r22	; 0x2a
    a5a6:	7b a7       	std	Y+43, r23	; 0x2b
    a5a8:	03 c0       	rjmp	.+6      	; 0xa5b0 <dir_read+0xa6>
    a5aa:	10 13       	cpse	r17, r16
    a5ac:	5f c0       	rjmp	.+190    	; 0xa66c <dir_read+0x162>
    a5ae:	8d 2d       	mov	r24, r13
    a5b0:	1d 96       	adiw	r26, 0x0d	; 13
    a5b2:	dc 90       	ld	r13, X
    a5b4:	1d 97       	sbiw	r26, 0x0d	; 13
    a5b6:	d8 12       	cpse	r13, r24
    a5b8:	58 c0       	rjmp	.+176    	; 0xa66a <dir_read+0x160>
    a5ba:	5a 96       	adiw	r26, 0x1a	; 26
    a5bc:	8d 91       	ld	r24, X+
    a5be:	9c 91       	ld	r25, X
    a5c0:	5b 97       	sbiw	r26, 0x1b	; 27
    a5c2:	89 2b       	or	r24, r25
    a5c4:	09 f0       	breq	.+2      	; 0xa5c8 <dir_read+0xbe>
    a5c6:	52 c0       	rjmp	.+164    	; 0xa66c <dir_read+0x162>
    a5c8:	f5 01       	movw	r30, r10
    a5ca:	63 85       	ldd	r22, Z+11	; 0x0b
    a5cc:	74 85       	ldd	r23, Z+12	; 0x0c
    a5ce:	8c 91       	ld	r24, X
    a5d0:	8f 73       	andi	r24, 0x3F	; 63
    a5d2:	90 e0       	ldi	r25, 0x00	; 0
    a5d4:	01 97       	sbiw	r24, 0x01	; 1
    a5d6:	c8 9e       	mul	r12, r24
    a5d8:	90 01       	movw	r18, r0
    a5da:	c9 9e       	mul	r12, r25
    a5dc:	30 0d       	add	r19, r0
    a5de:	11 24       	eor	r1, r1
    a5e0:	fb e0       	ldi	r31, 0x0B	; 11
    a5e2:	6f 2e       	mov	r6, r31
    a5e4:	f3 e0       	ldi	r31, 0x03	; 3
    a5e6:	7f 2e       	mov	r7, r31
    a5e8:	41 e0       	ldi	r20, 0x01	; 1
    a5ea:	50 e0       	ldi	r21, 0x00	; 0
    a5ec:	f3 01       	movw	r30, r6
    a5ee:	81 91       	ld	r24, Z+
    a5f0:	3f 01       	movw	r6, r30
    a5f2:	4d 01       	movw	r8, r26
    a5f4:	88 0e       	add	r8, r24
    a5f6:	91 1c       	adc	r9, r1
    a5f8:	f4 01       	movw	r30, r8
    a5fa:	80 81       	ld	r24, Z
    a5fc:	91 81       	ldd	r25, Z+1	; 0x01
    a5fe:	41 15       	cp	r20, r1
    a600:	51 05       	cpc	r21, r1
    a602:	79 f0       	breq	.+30     	; 0xa622 <dir_read+0x118>
    a604:	2f 3f       	cpi	r18, 0xFF	; 255
    a606:	31 05       	cpc	r19, r1
    a608:	88 f5       	brcc	.+98     	; 0xa66c <dir_read+0x162>
    a60a:	a9 01       	movw	r20, r18
    a60c:	44 0f       	add	r20, r20
    a60e:	55 1f       	adc	r21, r21
    a610:	46 0f       	add	r20, r22
    a612:	57 1f       	adc	r21, r23
    a614:	fa 01       	movw	r30, r20
    a616:	91 83       	std	Z+1, r25	; 0x01
    a618:	80 83       	st	Z, r24
    a61a:	ac 01       	movw	r20, r24
    a61c:	2f 5f       	subi	r18, 0xFF	; 255
    a61e:	3f 4f       	sbci	r19, 0xFF	; 255
    a620:	02 c0       	rjmp	.+4      	; 0xa626 <dir_read+0x11c>
    a622:	01 96       	adiw	r24, 0x01	; 1
    a624:	19 f5       	brne	.+70     	; 0xa66c <dir_read+0x162>
    a626:	88 e1       	ldi	r24, 0x18	; 24
    a628:	68 16       	cp	r6, r24
    a62a:	83 e0       	ldi	r24, 0x03	; 3
    a62c:	78 06       	cpc	r7, r24
    a62e:	f1 f6       	brne	.-68     	; 0xa5ec <dir_read+0xe2>
    a630:	8c 91       	ld	r24, X
    a632:	86 ff       	sbrs	r24, 6
    a634:	2b c0       	rjmp	.+86     	; 0xa68c <dir_read+0x182>
    a636:	2f 3f       	cpi	r18, 0xFF	; 255
    a638:	31 05       	cpc	r19, r1
    a63a:	c0 f4       	brcc	.+48     	; 0xa66c <dir_read+0x162>
    a63c:	22 0f       	add	r18, r18
    a63e:	33 1f       	adc	r19, r19
    a640:	fb 01       	movw	r30, r22
    a642:	e2 0f       	add	r30, r18
    a644:	f3 1f       	adc	r31, r19
    a646:	11 82       	std	Z+1, r1	; 0x01
    a648:	10 82       	st	Z, r1
    a64a:	20 c0       	rjmp	.+64     	; 0xa68c <dir_read+0x182>
    a64c:	11 11       	cpse	r17, r1
    a64e:	05 c0       	rjmp	.+10     	; 0xa65a <dir_read+0x150>
    a650:	cd 01       	movw	r24, r26
    a652:	0e 94 01 48 	call	0x9002	; 0x9002 <sum_sfn>
    a656:	d8 16       	cp	r13, r24
    a658:	f9 f0       	breq	.+62     	; 0xa698 <dir_read+0x18e>
    a65a:	8f ef       	ldi	r24, 0xFF	; 255
    a65c:	9f ef       	ldi	r25, 0xFF	; 255
    a65e:	dc 01       	movw	r26, r24
    a660:	88 a7       	std	Y+40, r24	; 0x28
    a662:	99 a7       	std	Y+41, r25	; 0x29
    a664:	aa a7       	std	Y+42, r26	; 0x2a
    a666:	bb a7       	std	Y+43, r27	; 0x2b
    a668:	17 c0       	rjmp	.+46     	; 0xa698 <dir_read+0x18e>
    a66a:	d8 2e       	mov	r13, r24
    a66c:	1f ef       	ldi	r17, 0xFF	; 255
    a66e:	60 e0       	ldi	r22, 0x00	; 0
    a670:	70 e0       	ldi	r23, 0x00	; 0
    a672:	ce 01       	movw	r24, r28
    a674:	e8 dd       	rcall	.-1072   	; 0xa246 <dir_next>
    a676:	00 97       	sbiw	r24, 0x00	; 0
    a678:	09 f4       	brne	.+2      	; 0xa67c <dir_read+0x172>
    a67a:	58 cf       	rjmp	.-336    	; 0xa52c <dir_read+0x22>
    a67c:	02 c0       	rjmp	.+4      	; 0xa682 <dir_read+0x178>
    a67e:	00 97       	sbiw	r24, 0x00	; 0
    a680:	59 f0       	breq	.+22     	; 0xa698 <dir_read+0x18e>
    a682:	1e 8a       	std	Y+22, r1	; 0x16
    a684:	1f 8a       	std	Y+23, r1	; 0x17
    a686:	18 8e       	std	Y+24, r1	; 0x18
    a688:	19 8e       	std	Y+25, r1	; 0x19
    a68a:	08 c0       	rjmp	.+16     	; 0xa69c <dir_read+0x192>
    a68c:	1f ef       	ldi	r17, 0xFF	; 255
    a68e:	10 0f       	add	r17, r16
    a690:	ee cf       	rjmp	.-36     	; 0xa66e <dir_read+0x164>
    a692:	84 e0       	ldi	r24, 0x04	; 4
    a694:	90 e0       	ldi	r25, 0x00	; 0
    a696:	f5 cf       	rjmp	.-22     	; 0xa682 <dir_read+0x178>
    a698:	80 e0       	ldi	r24, 0x00	; 0
    a69a:	90 e0       	ldi	r25, 0x00	; 0
    a69c:	cd b7       	in	r28, 0x3d	; 61
    a69e:	de b7       	in	r29, 0x3e	; 62
    a6a0:	ee e0       	ldi	r30, 0x0E	; 14
    a6a2:	0c 94 54 ec 	jmp	0x1d8a8	; 0x1d8a8 <__epilogue_restores__+0x8>

0000a6a6 <dir_remove>:
    a6a6:	a0 e0       	ldi	r26, 0x00	; 0
    a6a8:	b0 e0       	ldi	r27, 0x00	; 0
    a6aa:	e9 e5       	ldi	r30, 0x59	; 89
    a6ac:	f3 e5       	ldi	r31, 0x53	; 83
    a6ae:	0c 94 3c ec 	jmp	0x1d878	; 0x1d878 <__prologue_saves__+0x10>
    a6b2:	ec 01       	movw	r28, r24
    a6b4:	08 81       	ld	r16, Y
    a6b6:	19 81       	ldd	r17, Y+1	; 0x01
    a6b8:	ce 84       	ldd	r12, Y+14	; 0x0e
    a6ba:	df 84       	ldd	r13, Y+15	; 0x0f
    a6bc:	e8 88       	ldd	r14, Y+16	; 0x10
    a6be:	f9 88       	ldd	r15, Y+17	; 0x11
    a6c0:	48 a5       	ldd	r20, Y+40	; 0x28
    a6c2:	59 a5       	ldd	r21, Y+41	; 0x29
    a6c4:	6a a5       	ldd	r22, Y+42	; 0x2a
    a6c6:	7b a5       	ldd	r23, Y+43	; 0x2b
    a6c8:	4f 3f       	cpi	r20, 0xFF	; 255
    a6ca:	8f ef       	ldi	r24, 0xFF	; 255
    a6cc:	58 07       	cpc	r21, r24
    a6ce:	68 07       	cpc	r22, r24
    a6d0:	78 07       	cpc	r23, r24
    a6d2:	29 f4       	brne	.+10     	; 0xa6de <dir_remove+0x38>
    a6d4:	85 ee       	ldi	r24, 0xE5	; 229
    a6d6:	b8 2e       	mov	r11, r24
    a6d8:	aa 24       	eor	r10, r10
    a6da:	a3 94       	inc	r10
    a6dc:	19 c0       	rjmp	.+50     	; 0xa710 <dir_remove+0x6a>
    a6de:	ce 01       	movw	r24, r28
    a6e0:	b8 da       	rcall	.-2704   	; 0x9c52 <dir_sdi>
    a6e2:	00 97       	sbiw	r24, 0x00	; 0
    a6e4:	19 f5       	brne	.+70     	; 0xa72c <dir_remove+0x86>
    a6e6:	f6 cf       	rjmp	.-20     	; 0xa6d4 <dir_remove+0x2e>
    a6e8:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a6ea:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a6ec:	b0 82       	st	Z, r11
    a6ee:	f8 01       	movw	r30, r16
    a6f0:	a3 82       	std	Z+3, r10	; 0x03
    a6f2:	4e 85       	ldd	r20, Y+14	; 0x0e
    a6f4:	5f 85       	ldd	r21, Y+15	; 0x0f
    a6f6:	68 89       	ldd	r22, Y+16	; 0x10
    a6f8:	79 89       	ldd	r23, Y+17	; 0x11
    a6fa:	4c 15       	cp	r20, r12
    a6fc:	5d 05       	cpc	r21, r13
    a6fe:	6e 05       	cpc	r22, r14
    a700:	7f 05       	cpc	r23, r15
    a702:	a0 f4       	brcc	.+40     	; 0xa72c <dir_remove+0x86>
    a704:	60 e0       	ldi	r22, 0x00	; 0
    a706:	70 e0       	ldi	r23, 0x00	; 0
    a708:	ce 01       	movw	r24, r28
    a70a:	9d dd       	rcall	.-1222   	; 0xa246 <dir_next>
    a70c:	00 97       	sbiw	r24, 0x00	; 0
    a70e:	49 f4       	brne	.+18     	; 0xa722 <dir_remove+0x7c>
    a710:	4e 89       	ldd	r20, Y+22	; 0x16
    a712:	5f 89       	ldd	r21, Y+23	; 0x17
    a714:	68 8d       	ldd	r22, Y+24	; 0x18
    a716:	79 8d       	ldd	r23, Y+25	; 0x19
    a718:	c8 01       	movw	r24, r16
    a71a:	0e 94 50 49 	call	0x92a0	; 0x92a0 <move_window>
    a71e:	00 97       	sbiw	r24, 0x00	; 0
    a720:	19 f3       	breq	.-58     	; 0xa6e8 <dir_remove+0x42>
    a722:	84 30       	cpi	r24, 0x04	; 4
    a724:	91 05       	cpc	r25, r1
    a726:	11 f4       	brne	.+4      	; 0xa72c <dir_remove+0x86>
    a728:	82 e0       	ldi	r24, 0x02	; 2
    a72a:	90 e0       	ldi	r25, 0x00	; 0
    a72c:	cd b7       	in	r28, 0x3d	; 61
    a72e:	de b7       	in	r29, 0x3e	; 62
    a730:	ea e0       	ldi	r30, 0x0A	; 10
    a732:	0c 94 58 ec 	jmp	0x1d8b0	; 0x1d8b0 <__epilogue_restores__+0x10>

0000a736 <dir_find>:
    a736:	a8 e0       	ldi	r26, 0x08	; 8
    a738:	b0 e0       	ldi	r27, 0x00	; 0
    a73a:	e1 ea       	ldi	r30, 0xA1	; 161
    a73c:	f3 e5       	ldi	r31, 0x53	; 83
    a73e:	0c 94 34 ec 	jmp	0x1d868	; 0x1d868 <__prologue_saves__>
    a742:	8c 01       	movw	r16, r24
    a744:	dc 01       	movw	r26, r24
    a746:	8d 90       	ld	r8, X+
    a748:	9c 90       	ld	r9, X
    a74a:	40 e0       	ldi	r20, 0x00	; 0
    a74c:	50 e0       	ldi	r21, 0x00	; 0
    a74e:	ba 01       	movw	r22, r20
    a750:	80 da       	rcall	.-2816   	; 0x9c52 <dir_sdi>
    a752:	00 97       	sbiw	r24, 0x00	; 0
    a754:	09 f0       	breq	.+2      	; 0xa758 <dir_find+0x22>
    a756:	f3 c0       	rjmp	.+486    	; 0xa93e <dir_find+0x208>
    a758:	8f ef       	ldi	r24, 0xFF	; 255
    a75a:	9f ef       	ldi	r25, 0xFF	; 255
    a75c:	dc 01       	movw	r26, r24
    a75e:	f8 01       	movw	r30, r16
    a760:	80 a7       	std	Z+40, r24	; 0x28
    a762:	91 a7       	std	Z+41, r25	; 0x29
    a764:	a2 a7       	std	Z+42, r26	; 0x2a
    a766:	b3 a7       	std	Z+43, r27	; 0x2b
    a768:	ee 24       	eor	r14, r14
    a76a:	ea 94       	dec	r14
    a76c:	ff 24       	eor	r15, r15
    a76e:	fa 94       	dec	r15
    a770:	44 24       	eor	r4, r4
    a772:	4a 94       	dec	r4
    a774:	54 2c       	mov	r5, r4
    a776:	32 01       	movw	r6, r4
    a778:	d8 01       	movw	r26, r16
    a77a:	56 96       	adiw	r26, 0x16	; 22
    a77c:	4d 91       	ld	r20, X+
    a77e:	5d 91       	ld	r21, X+
    a780:	6d 91       	ld	r22, X+
    a782:	7c 91       	ld	r23, X
    a784:	59 97       	sbiw	r26, 0x19	; 25
    a786:	c4 01       	movw	r24, r8
    a788:	0e 94 50 49 	call	0x92a0	; 0x92a0 <move_window>
    a78c:	00 97       	sbiw	r24, 0x00	; 0
    a78e:	09 f0       	breq	.+2      	; 0xa792 <dir_find+0x5c>
    a790:	d6 c0       	rjmp	.+428    	; 0xa93e <dir_find+0x208>
    a792:	f8 01       	movw	r30, r16
    a794:	02 8c       	ldd	r0, Z+26	; 0x1a
    a796:	f3 8d       	ldd	r31, Z+27	; 0x1b
    a798:	e0 2d       	mov	r30, r0
    a79a:	f8 87       	std	Y+8, r31	; 0x08
    a79c:	ef 83       	std	Y+7, r30	; 0x07
    a79e:	30 80       	ld	r3, Z
    a7a0:	33 20       	and	r3, r3
    a7a2:	09 f4       	brne	.+2      	; 0xa7a6 <dir_find+0x70>
    a7a4:	ce c0       	rjmp	.+412    	; 0xa942 <dir_find+0x20c>
    a7a6:	93 85       	ldd	r25, Z+11	; 0x0b
    a7a8:	89 2f       	mov	r24, r25
    a7aa:	8f 73       	andi	r24, 0x3F	; 63
    a7ac:	d8 01       	movw	r26, r16
    a7ae:	14 96       	adiw	r26, 0x04	; 4
    a7b0:	8c 93       	st	X, r24
    a7b2:	b5 ee       	ldi	r27, 0xE5	; 229
    a7b4:	3b 16       	cp	r3, r27
    a7b6:	09 f4       	brne	.+2      	; 0xa7ba <dir_find+0x84>
    a7b8:	b4 c0       	rjmp	.+360    	; 0xa922 <dir_find+0x1ec>
    a7ba:	93 ff       	sbrs	r25, 3
    a7bc:	04 c0       	rjmp	.+8      	; 0xa7c6 <dir_find+0x90>
    a7be:	8f 30       	cpi	r24, 0x0F	; 15
    a7c0:	09 f0       	breq	.+2      	; 0xa7c4 <dir_find+0x8e>
    a7c2:	af c0       	rjmp	.+350    	; 0xa922 <dir_find+0x1ec>
    a7c4:	03 c0       	rjmp	.+6      	; 0xa7cc <dir_find+0x96>
    a7c6:	8f 30       	cpi	r24, 0x0F	; 15
    a7c8:	09 f0       	breq	.+2      	; 0xa7cc <dir_find+0x96>
    a7ca:	87 c0       	rjmp	.+270    	; 0xa8da <dir_find+0x1a4>
    a7cc:	d8 01       	movw	r26, r16
    a7ce:	97 96       	adiw	r26, 0x27	; 39
    a7d0:	8c 91       	ld	r24, X
    a7d2:	97 97       	sbiw	r26, 0x27	; 39
    a7d4:	86 fd       	sbrc	r24, 6
    a7d6:	ac c0       	rjmp	.+344    	; 0xa930 <dir_find+0x1fa>
    a7d8:	36 fe       	sbrs	r3, 6
    a7da:	12 c0       	rjmp	.+36     	; 0xa800 <dir_find+0xca>
    a7dc:	ef 81       	ldd	r30, Y+7	; 0x07
    a7de:	f8 85       	ldd	r31, Y+8	; 0x08
    a7e0:	e5 84       	ldd	r14, Z+13	; 0x0d
    a7e2:	f3 2d       	mov	r31, r3
    a7e4:	ff 7b       	andi	r31, 0xBF	; 191
    a7e6:	3f 2e       	mov	r3, r31
    a7e8:	1e 96       	adiw	r26, 0x0e	; 14
    a7ea:	8d 91       	ld	r24, X+
    a7ec:	9d 91       	ld	r25, X+
    a7ee:	0d 90       	ld	r0, X+
    a7f0:	bc 91       	ld	r27, X
    a7f2:	a0 2d       	mov	r26, r0
    a7f4:	f8 01       	movw	r30, r16
    a7f6:	80 a7       	std	Z+40, r24	; 0x28
    a7f8:	91 a7       	std	Z+41, r25	; 0x29
    a7fa:	a2 a7       	std	Z+42, r26	; 0x2a
    a7fc:	b3 a7       	std	Z+43, r27	; 0x2b
    a7fe:	02 c0       	rjmp	.+4      	; 0xa804 <dir_find+0xce>
    a800:	f3 10       	cpse	r15, r3
    a802:	94 c0       	rjmp	.+296    	; 0xa92c <dir_find+0x1f6>
    a804:	af 81       	ldd	r26, Y+7	; 0x07
    a806:	b8 85       	ldd	r27, Y+8	; 0x08
    a808:	1d 96       	adiw	r26, 0x0d	; 13
    a80a:	2c 90       	ld	r2, X
    a80c:	1d 97       	sbiw	r26, 0x0d	; 13
    a80e:	2e 10       	cpse	r2, r14
    a810:	8d c0       	rjmp	.+282    	; 0xa92c <dir_find+0x1f6>
    a812:	5a 96       	adiw	r26, 0x1a	; 26
    a814:	8d 91       	ld	r24, X+
    a816:	9c 91       	ld	r25, X
    a818:	5b 97       	sbiw	r26, 0x1b	; 27
    a81a:	89 2b       	or	r24, r25
    a81c:	09 f0       	breq	.+2      	; 0xa820 <dir_find+0xea>
    a81e:	9b c0       	rjmp	.+310    	; 0xa956 <dir_find+0x220>
    a820:	f4 01       	movw	r30, r8
    a822:	c3 84       	ldd	r12, Z+11	; 0x0b
    a824:	d4 84       	ldd	r13, Z+12	; 0x0c
    a826:	8c 91       	ld	r24, X
    a828:	8f 73       	andi	r24, 0x3F	; 63
    a82a:	90 e0       	ldi	r25, 0x00	; 0
    a82c:	01 97       	sbiw	r24, 0x01	; 1
    a82e:	fd e0       	ldi	r31, 0x0D	; 13
    a830:	f8 9f       	mul	r31, r24
    a832:	70 01       	movw	r14, r0
    a834:	f9 9f       	mul	r31, r25
    a836:	f0 0c       	add	r15, r0
    a838:	11 24       	eor	r1, r1
    a83a:	2b e0       	ldi	r18, 0x0B	; 11
    a83c:	33 e0       	ldi	r19, 0x03	; 3
    a83e:	3a 83       	std	Y+2, r19	; 0x02
    a840:	29 83       	std	Y+1, r18	; 0x01
    a842:	81 e0       	ldi	r24, 0x01	; 1
    a844:	90 e0       	ldi	r25, 0x00	; 0
    a846:	a9 81       	ldd	r26, Y+1	; 0x01
    a848:	ba 81       	ldd	r27, Y+2	; 0x02
    a84a:	2d 91       	ld	r18, X+
    a84c:	ba 83       	std	Y+2, r27	; 0x02
    a84e:	a9 83       	std	Y+1, r26	; 0x01
    a850:	ef 81       	ldd	r30, Y+7	; 0x07
    a852:	f8 85       	ldd	r31, Y+8	; 0x08
    a854:	e2 0f       	add	r30, r18
    a856:	f1 1d       	adc	r31, r1
    a858:	a0 80       	ld	r10, Z
    a85a:	b1 80       	ldd	r11, Z+1	; 0x01
    a85c:	00 97       	sbiw	r24, 0x00	; 0
    a85e:	09 f1       	breq	.+66     	; 0xa8a2 <dir_find+0x16c>
    a860:	bf ef       	ldi	r27, 0xFF	; 255
    a862:	eb 16       	cp	r14, r27
    a864:	f1 04       	cpc	r15, r1
    a866:	08 f0       	brcs	.+2      	; 0xa86a <dir_find+0x134>
    a868:	76 c0       	rjmp	.+236    	; 0xa956 <dir_find+0x220>
    a86a:	c5 01       	movw	r24, r10
    a86c:	0e 94 4b 6e 	call	0xdc96	; 0xdc96 <ff_wtoupper>
    a870:	9c 83       	std	Y+4, r25	; 0x04
    a872:	8b 83       	std	Y+3, r24	; 0x03
    a874:	f7 01       	movw	r30, r14
    a876:	31 96       	adiw	r30, 0x01	; 1
    a878:	fe 83       	std	Y+6, r31	; 0x06
    a87a:	ed 83       	std	Y+5, r30	; 0x05
    a87c:	ee 0c       	add	r14, r14
    a87e:	ff 1c       	adc	r15, r15
    a880:	f6 01       	movw	r30, r12
    a882:	ee 0d       	add	r30, r14
    a884:	ff 1d       	adc	r31, r15
    a886:	80 81       	ld	r24, Z
    a888:	91 81       	ldd	r25, Z+1	; 0x01
    a88a:	0e 94 4b 6e 	call	0xdc96	; 0xdc96 <ff_wtoupper>
    a88e:	2b 81       	ldd	r18, Y+3	; 0x03
    a890:	3c 81       	ldd	r19, Y+4	; 0x04
    a892:	28 17       	cp	r18, r24
    a894:	39 07       	cpc	r19, r25
    a896:	09 f0       	breq	.+2      	; 0xa89a <dir_find+0x164>
    a898:	5e c0       	rjmp	.+188    	; 0xa956 <dir_find+0x220>
    a89a:	c5 01       	movw	r24, r10
    a89c:	ed 80       	ldd	r14, Y+5	; 0x05
    a89e:	fe 80       	ldd	r15, Y+6	; 0x06
    a8a0:	05 c0       	rjmp	.+10     	; 0xa8ac <dir_find+0x176>
    a8a2:	3f ef       	ldi	r19, 0xFF	; 255
    a8a4:	a3 16       	cp	r10, r19
    a8a6:	b3 06       	cpc	r11, r19
    a8a8:	09 f0       	breq	.+2      	; 0xa8ac <dir_find+0x176>
    a8aa:	55 c0       	rjmp	.+170    	; 0xa956 <dir_find+0x220>
    a8ac:	49 81       	ldd	r20, Y+1	; 0x01
    a8ae:	5a 81       	ldd	r21, Y+2	; 0x02
    a8b0:	48 51       	subi	r20, 0x18	; 24
    a8b2:	53 40       	sbci	r21, 0x03	; 3
    a8b4:	41 f6       	brne	.-112    	; 0xa846 <dir_find+0x110>
    a8b6:	ef 81       	ldd	r30, Y+7	; 0x07
    a8b8:	f8 85       	ldd	r31, Y+8	; 0x08
    a8ba:	20 81       	ld	r18, Z
    a8bc:	26 ff       	sbrs	r18, 6
    a8be:	46 c0       	rjmp	.+140    	; 0xa94c <dir_find+0x216>
    a8c0:	89 2b       	or	r24, r25
    a8c2:	09 f4       	brne	.+2      	; 0xa8c6 <dir_find+0x190>
    a8c4:	43 c0       	rjmp	.+134    	; 0xa94c <dir_find+0x216>
    a8c6:	ee 0c       	add	r14, r14
    a8c8:	ff 1c       	adc	r15, r15
    a8ca:	f6 01       	movw	r30, r12
    a8cc:	ee 0d       	add	r30, r14
    a8ce:	ff 1d       	adc	r31, r15
    a8d0:	80 81       	ld	r24, Z
    a8d2:	91 81       	ldd	r25, Z+1	; 0x01
    a8d4:	89 2b       	or	r24, r25
    a8d6:	d1 f1       	breq	.+116    	; 0xa94c <dir_find+0x216>
    a8d8:	3e c0       	rjmp	.+124    	; 0xa956 <dir_find+0x220>
    a8da:	f1 10       	cpse	r15, r1
    a8dc:	06 c0       	rjmp	.+12     	; 0xa8ea <dir_find+0x1b4>
    a8de:	8f 81       	ldd	r24, Y+7	; 0x07
    a8e0:	98 85       	ldd	r25, Y+8	; 0x08
    a8e2:	0e 94 01 48 	call	0x9002	; 0x9002 <sum_sfn>
    a8e6:	e8 16       	cp	r14, r24
    a8e8:	71 f1       	breq	.+92     	; 0xa946 <dir_find+0x210>
    a8ea:	d8 01       	movw	r26, r16
    a8ec:	97 96       	adiw	r26, 0x27	; 39
    a8ee:	8c 91       	ld	r24, X
    a8f0:	80 fd       	sbrc	r24, 0
    a8f2:	17 c0       	rjmp	.+46     	; 0xa922 <dir_find+0x1ec>
    a8f4:	f8 01       	movw	r30, r16
    a8f6:	7c 96       	adiw	r30, 0x1c	; 28
    a8f8:	2f 81       	ldd	r18, Y+7	; 0x07
    a8fa:	38 85       	ldd	r19, Y+8	; 0x08
    a8fc:	25 5f       	subi	r18, 0xF5	; 245
    a8fe:	3f 4f       	sbci	r19, 0xFF	; 255
    a900:	af 81       	ldd	r26, Y+7	; 0x07
    a902:	b8 85       	ldd	r27, Y+8	; 0x08
    a904:	8d 91       	ld	r24, X+
    a906:	b8 87       	std	Y+8, r27	; 0x08
    a908:	af 83       	std	Y+7, r26	; 0x07
    a90a:	41 91       	ld	r20, Z+
    a90c:	90 e0       	ldi	r25, 0x00	; 0
    a90e:	84 1b       	sub	r24, r20
    a910:	91 09       	sbc	r25, r1
    a912:	2a 17       	cp	r18, r26
    a914:	3b 07       	cpc	r19, r27
    a916:	19 f0       	breq	.+6      	; 0xa91e <dir_find+0x1e8>
    a918:	89 2b       	or	r24, r25
    a91a:	91 f3       	breq	.-28     	; 0xa900 <dir_find+0x1ca>
    a91c:	02 c0       	rjmp	.+4      	; 0xa922 <dir_find+0x1ec>
    a91e:	89 2b       	or	r24, r25
    a920:	91 f0       	breq	.+36     	; 0xa946 <dir_find+0x210>
    a922:	f8 01       	movw	r30, r16
    a924:	40 a6       	std	Z+40, r4	; 0x28
    a926:	51 a6       	std	Z+41, r5	; 0x29
    a928:	62 a6       	std	Z+42, r6	; 0x2a
    a92a:	73 a6       	std	Z+43, r7	; 0x2b
    a92c:	ff 24       	eor	r15, r15
    a92e:	fa 94       	dec	r15
    a930:	60 e0       	ldi	r22, 0x00	; 0
    a932:	70 e0       	ldi	r23, 0x00	; 0
    a934:	c8 01       	movw	r24, r16
    a936:	87 dc       	rcall	.-1778   	; 0xa246 <dir_next>
    a938:	00 97       	sbiw	r24, 0x00	; 0
    a93a:	09 f4       	brne	.+2      	; 0xa93e <dir_find+0x208>
    a93c:	1d cf       	rjmp	.-454    	; 0xa778 <dir_find+0x42>
    a93e:	28 2f       	mov	r18, r24
    a940:	0c c0       	rjmp	.+24     	; 0xa95a <dir_find+0x224>
    a942:	24 e0       	ldi	r18, 0x04	; 4
    a944:	01 c0       	rjmp	.+2      	; 0xa948 <dir_find+0x212>
    a946:	20 e0       	ldi	r18, 0x00	; 0
    a948:	90 e0       	ldi	r25, 0x00	; 0
    a94a:	07 c0       	rjmp	.+14     	; 0xa95a <dir_find+0x224>
    a94c:	ff 24       	eor	r15, r15
    a94e:	fa 94       	dec	r15
    a950:	f3 0c       	add	r15, r3
    a952:	e2 2c       	mov	r14, r2
    a954:	ed cf       	rjmp	.-38     	; 0xa930 <dir_find+0x1fa>
    a956:	e2 2c       	mov	r14, r2
    a958:	e9 cf       	rjmp	.-46     	; 0xa92c <dir_find+0x1f6>
    a95a:	82 2f       	mov	r24, r18
    a95c:	28 96       	adiw	r28, 0x08	; 8
    a95e:	e2 e1       	ldi	r30, 0x12	; 18
    a960:	0c 94 50 ec 	jmp	0x1d8a0	; 0x1d8a0 <__epilogue_restores__>

0000a964 <dir_register>:
    a964:	a6 e1       	ldi	r26, 0x16	; 22
    a966:	b0 e0       	ldi	r27, 0x00	; 0
    a968:	e8 eb       	ldi	r30, 0xB8	; 184
    a96a:	f4 e5       	ldi	r31, 0x54	; 84
    a96c:	0c 94 34 ec 	jmp	0x1d868	; 0x1d868 <__prologue_saves__>
    a970:	dc 01       	movw	r26, r24
    a972:	97 96       	adiw	r26, 0x27	; 39
    a974:	2c 91       	ld	r18, X
    a976:	97 97       	sbiw	r26, 0x27	; 39
    a978:	20 7a       	andi	r18, 0xA0	; 160
    a97a:	09 f0       	breq	.+2      	; 0xa97e <dir_register+0x1a>
    a97c:	61 c1       	rjmp	.+706    	; 0xac40 <dir_register+0x2dc>
    a97e:	cd 90       	ld	r12, X+
    a980:	dc 90       	ld	r13, X
    a982:	d6 01       	movw	r26, r12
    a984:	1b 96       	adiw	r26, 0x0b	; 11
    a986:	ed 91       	ld	r30, X+
    a988:	fc 91       	ld	r31, X
    a98a:	1c 97       	sbiw	r26, 0x0c	; 12
    a98c:	81 2c       	mov	r8, r1
    a98e:	91 2c       	mov	r9, r1
    a990:	21 91       	ld	r18, Z+
    a992:	31 91       	ld	r19, Z+
    a994:	23 2b       	or	r18, r19
    a996:	21 f0       	breq	.+8      	; 0xa9a0 <dir_register+0x3c>
    a998:	bf ef       	ldi	r27, 0xFF	; 255
    a99a:	8b 1a       	sub	r8, r27
    a99c:	9b 0a       	sbc	r9, r27
    a99e:	f8 cf       	rjmp	.-16     	; 0xa990 <dir_register+0x2c>
    a9a0:	8c 01       	movw	r16, r24
    a9a2:	5c 01       	movw	r10, r24
    a9a4:	ec e1       	ldi	r30, 0x1C	; 28
    a9a6:	ae 0e       	add	r10, r30
    a9a8:	b1 1c       	adc	r11, r1
    a9aa:	4c e0       	ldi	r20, 0x0C	; 12
    a9ac:	50 e0       	ldi	r21, 0x00	; 0
    a9ae:	b5 01       	movw	r22, r10
    a9b0:	ce 01       	movw	r24, r28
    a9b2:	01 96       	adiw	r24, 0x01	; 1
    a9b4:	0e 94 5d 48 	call	0x90ba	; 0x90ba <mem_cpy.part.0>
    a9b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    a9ba:	80 ff       	sbrs	r24, 0
    a9bc:	96 c0       	rjmp	.+300    	; 0xaaea <dir_register+0x186>
    a9be:	80 e4       	ldi	r24, 0x40	; 64
    a9c0:	d8 01       	movw	r26, r16
    a9c2:	97 96       	adiw	r26, 0x27	; 39
    a9c4:	8c 93       	st	X, r24
    a9c6:	41 2c       	mov	r4, r1
    a9c8:	51 2c       	mov	r5, r1
    a9ca:	32 01       	movw	r6, r4
    a9cc:	43 94       	inc	r4
    a9ce:	72 01       	movw	r14, r4
    a9d0:	f6 01       	movw	r30, r12
    a9d2:	23 84       	ldd	r2, Z+11	; 0x0b
    a9d4:	34 84       	ldd	r3, Z+12	; 0x0c
    a9d6:	4b e0       	ldi	r20, 0x0B	; 11
    a9d8:	50 e0       	ldi	r21, 0x00	; 0
    a9da:	be 01       	movw	r22, r28
    a9dc:	6f 5f       	subi	r22, 0xFF	; 255
    a9de:	7f 4f       	sbci	r23, 0xFF	; 255
    a9e0:	c5 01       	movw	r24, r10
    a9e2:	0e 94 5d 48 	call	0x90ba	; 0x90ba <mem_cpy.part.0>
    a9e6:	f6 e0       	ldi	r31, 0x06	; 6
    a9e8:	4f 16       	cp	r4, r31
    a9ea:	51 04       	cpc	r5, r1
    a9ec:	18 f1       	brcs	.+70     	; 0xaa34 <dir_register+0xd0>
    a9ee:	f1 01       	movw	r30, r2
    a9f0:	b3 01       	movw	r22, r6
    a9f2:	a2 01       	movw	r20, r4
    a9f4:	81 91       	ld	r24, Z+
    a9f6:	91 91       	ld	r25, Z+
    a9f8:	00 97       	sbiw	r24, 0x00	; 0
    a9fa:	d9 f0       	breq	.+54     	; 0xaa32 <dir_register+0xce>
    a9fc:	20 e1       	ldi	r18, 0x10	; 16
    a9fe:	30 e0       	ldi	r19, 0x00	; 0
    aa00:	44 0f       	add	r20, r20
    aa02:	55 1f       	adc	r21, r21
    aa04:	66 1f       	adc	r22, r22
    aa06:	77 1f       	adc	r23, r23
    aa08:	dc 01       	movw	r26, r24
    aa0a:	a1 70       	andi	r26, 0x01	; 1
    aa0c:	bb 27       	eor	r27, r27
    aa0e:	4a 0f       	add	r20, r26
    aa10:	5b 1f       	adc	r21, r27
    aa12:	61 1d       	adc	r22, r1
    aa14:	71 1d       	adc	r23, r1
    aa16:	96 95       	lsr	r25
    aa18:	87 95       	ror	r24
    aa1a:	60 ff       	sbrs	r22, 0
    aa1c:	06 c0       	rjmp	.+12     	; 0xaa2a <dir_register+0xc6>
    aa1e:	a1 e2       	ldi	r26, 0x21	; 33
    aa20:	4a 27       	eor	r20, r26
    aa22:	a0 e1       	ldi	r26, 0x10	; 16
    aa24:	5a 27       	eor	r21, r26
    aa26:	a1 e0       	ldi	r26, 0x01	; 1
    aa28:	6a 27       	eor	r22, r26
    aa2a:	21 50       	subi	r18, 0x01	; 1
    aa2c:	31 09       	sbc	r19, r1
    aa2e:	41 f7       	brne	.-48     	; 0xaa00 <dir_register+0x9c>
    aa30:	e1 cf       	rjmp	.-62     	; 0xa9f4 <dir_register+0x90>
    aa32:	7a 01       	movw	r14, r20
    aa34:	fe 01       	movw	r30, r28
    aa36:	75 96       	adiw	r30, 0x15	; 21
    aa38:	27 e0       	ldi	r18, 0x07	; 7
    aa3a:	30 e0       	ldi	r19, 0x00	; 0
    aa3c:	9e 2d       	mov	r25, r14
    aa3e:	9f 70       	andi	r25, 0x0F	; 15
    aa40:	80 e3       	ldi	r24, 0x30	; 48
    aa42:	89 0f       	add	r24, r25
    aa44:	8a 33       	cpi	r24, 0x3A	; 58
    aa46:	10 f0       	brcs	.+4      	; 0xaa4c <dir_register+0xe8>
    aa48:	87 e3       	ldi	r24, 0x37	; 55
    aa4a:	89 0f       	add	r24, r25
    aa4c:	21 50       	subi	r18, 0x01	; 1
    aa4e:	31 09       	sbc	r19, r1
    aa50:	82 93       	st	-Z, r24
    aa52:	a4 e0       	ldi	r26, 0x04	; 4
    aa54:	f6 94       	lsr	r15
    aa56:	e7 94       	ror	r14
    aa58:	aa 95       	dec	r26
    aa5a:	e1 f7       	brne	.-8      	; 0xaa54 <dir_register+0xf0>
    aa5c:	e1 14       	cp	r14, r1
    aa5e:	f1 04       	cpc	r15, r1
    aa60:	69 f7       	brne	.-38     	; 0xaa3c <dir_register+0xd8>
    aa62:	ed e0       	ldi	r30, 0x0D	; 13
    aa64:	f0 e0       	ldi	r31, 0x00	; 0
    aa66:	ec 0f       	add	r30, r28
    aa68:	fd 1f       	adc	r31, r29
    aa6a:	e2 0f       	add	r30, r18
    aa6c:	f3 1f       	adc	r31, r19
    aa6e:	be e7       	ldi	r27, 0x7E	; 126
    aa70:	b0 83       	st	Z, r27
    aa72:	f5 01       	movw	r30, r10
    aa74:	80 e0       	ldi	r24, 0x00	; 0
    aa76:	90 e0       	ldi	r25, 0x00	; 0
    aa78:	28 17       	cp	r18, r24
    aa7a:	39 07       	cpc	r19, r25
    aa7c:	29 f0       	breq	.+10     	; 0xaa88 <dir_register+0x124>
    aa7e:	41 91       	ld	r20, Z+
    aa80:	40 32       	cpi	r20, 0x20	; 32
    aa82:	11 f0       	breq	.+4      	; 0xaa88 <dir_register+0x124>
    aa84:	01 96       	adiw	r24, 0x01	; 1
    aa86:	f8 cf       	rjmp	.-16     	; 0xaa78 <dir_register+0x114>
    aa88:	f5 01       	movw	r30, r10
    aa8a:	e8 0f       	add	r30, r24
    aa8c:	f9 1f       	adc	r31, r25
    aa8e:	28 30       	cpi	r18, 0x08	; 8
    aa90:	31 05       	cpc	r19, r1
    aa92:	50 f4       	brcc	.+20     	; 0xaaa8 <dir_register+0x144>
    aa94:	ad e0       	ldi	r26, 0x0D	; 13
    aa96:	b0 e0       	ldi	r27, 0x00	; 0
    aa98:	ac 0f       	add	r26, r28
    aa9a:	bd 1f       	adc	r27, r29
    aa9c:	a2 0f       	add	r26, r18
    aa9e:	b3 1f       	adc	r27, r19
    aaa0:	8c 91       	ld	r24, X
    aaa2:	2f 5f       	subi	r18, 0xFF	; 255
    aaa4:	3f 4f       	sbci	r19, 0xFF	; 255
    aaa6:	01 c0       	rjmp	.+2      	; 0xaaaa <dir_register+0x146>
    aaa8:	80 e2       	ldi	r24, 0x20	; 32
    aaaa:	81 93       	st	Z+, r24
    aaac:	cf 01       	movw	r24, r30
    aaae:	8a 19       	sub	r24, r10
    aab0:	9b 09       	sbc	r25, r11
    aab2:	08 97       	sbiw	r24, 0x08	; 8
    aab4:	60 f3       	brcs	.-40     	; 0xaa8e <dir_register+0x12a>
    aab6:	c8 01       	movw	r24, r16
    aab8:	3e de       	rcall	.-900    	; 0xa736 <dir_find>
    aaba:	00 97       	sbiw	r24, 0x00	; 0
    aabc:	71 f4       	brne	.+28     	; 0xaada <dir_register+0x176>
    aabe:	ef ef       	ldi	r30, 0xFF	; 255
    aac0:	4e 1a       	sub	r4, r30
    aac2:	5e 0a       	sbc	r5, r30
    aac4:	6e 0a       	sbc	r6, r30
    aac6:	7e 0a       	sbc	r7, r30
    aac8:	f4 e6       	ldi	r31, 0x64	; 100
    aaca:	4f 16       	cp	r4, r31
    aacc:	51 04       	cpc	r5, r1
    aace:	61 04       	cpc	r6, r1
    aad0:	71 04       	cpc	r7, r1
    aad2:	09 f0       	breq	.+2      	; 0xaad6 <dir_register+0x172>
    aad4:	7c cf       	rjmp	.-264    	; 0xa9ce <dir_register+0x6a>
    aad6:	27 e0       	ldi	r18, 0x07	; 7
    aad8:	b4 c0       	rjmp	.+360    	; 0xac42 <dir_register+0x2de>
    aada:	84 30       	cpi	r24, 0x04	; 4
    aadc:	91 05       	cpc	r25, r1
    aade:	09 f0       	breq	.+2      	; 0xaae2 <dir_register+0x17e>
    aae0:	df c0       	rjmp	.+446    	; 0xaca0 <dir_register+0x33c>
    aae2:	8c 85       	ldd	r24, Y+12	; 0x0c
    aae4:	d8 01       	movw	r26, r16
    aae6:	97 96       	adiw	r26, 0x27	; 39
    aae8:	8c 93       	st	X, r24
    aaea:	8c 85       	ldd	r24, Y+12	; 0x0c
    aaec:	81 ff       	sbrs	r24, 1
    aaee:	0b c0       	rjmp	.+22     	; 0xab06 <dir_register+0x1a2>
    aaf0:	c4 01       	movw	r24, r8
    aaf2:	0c 96       	adiw	r24, 0x0c	; 12
    aaf4:	6d e0       	ldi	r22, 0x0D	; 13
    aaf6:	70 e0       	ldi	r23, 0x00	; 0
    aaf8:	0e 94 a0 eb 	call	0x1d740	; 0x1d740 <__udivmodhi4>
    aafc:	7b 01       	movw	r14, r22
    aafe:	bf ef       	ldi	r27, 0xFF	; 255
    ab00:	eb 1a       	sub	r14, r27
    ab02:	fb 0a       	sbc	r15, r27
    ab04:	03 c0       	rjmp	.+6      	; 0xab0c <dir_register+0x1a8>
    ab06:	ee 24       	eor	r14, r14
    ab08:	e3 94       	inc	r14
    ab0a:	f1 2c       	mov	r15, r1
    ab0c:	b7 01       	movw	r22, r14
    ab0e:	c8 01       	movw	r24, r16
    ab10:	c2 dc       	rcall	.-1660   	; 0xa496 <dir_alloc>
    ab12:	00 97       	sbiw	r24, 0x00	; 0
    ab14:	09 f0       	breq	.+2      	; 0xab18 <dir_register+0x1b4>
    ab16:	c4 c0       	rjmp	.+392    	; 0xaca0 <dir_register+0x33c>
    ab18:	e1 e0       	ldi	r30, 0x01	; 1
    ab1a:	ee 1a       	sub	r14, r30
    ab1c:	f1 08       	sbc	r15, r1
    ab1e:	09 f4       	brne	.+2      	; 0xab22 <dir_register+0x1be>
    ab20:	92 c0       	rjmp	.+292    	; 0xac46 <dir_register+0x2e2>
    ab22:	d8 01       	movw	r26, r16
    ab24:	1e 96       	adiw	r26, 0x0e	; 14
    ab26:	4d 91       	ld	r20, X+
    ab28:	5d 91       	ld	r21, X+
    ab2a:	6d 91       	ld	r22, X+
    ab2c:	7c 91       	ld	r23, X
    ab2e:	51 97       	sbiw	r26, 0x11	; 17
    ab30:	c7 01       	movw	r24, r14
    ab32:	e5 e0       	ldi	r30, 0x05	; 5
    ab34:	88 0f       	add	r24, r24
    ab36:	99 1f       	adc	r25, r25
    ab38:	ea 95       	dec	r30
    ab3a:	e1 f7       	brne	.-8      	; 0xab34 <dir_register+0x1d0>
    ab3c:	48 1b       	sub	r20, r24
    ab3e:	59 0b       	sbc	r21, r25
    ab40:	61 09       	sbc	r22, r1
    ab42:	71 09       	sbc	r23, r1
    ab44:	c8 01       	movw	r24, r16
    ab46:	85 d8       	rcall	.-3830   	; 0x9c52 <dir_sdi>
    ab48:	00 97       	sbiw	r24, 0x00	; 0
    ab4a:	09 f0       	breq	.+2      	; 0xab4e <dir_register+0x1ea>
    ab4c:	a9 c0       	rjmp	.+338    	; 0xaca0 <dir_register+0x33c>
    ab4e:	c5 01       	movw	r24, r10
    ab50:	0e 94 01 48 	call	0x9002	; 0x9002 <sum_sfn>
    ab54:	68 2e       	mov	r6, r24
    ab56:	5f e0       	ldi	r21, 0x0F	; 15
    ab58:	35 2e       	mov	r3, r21
    ab5a:	6d e0       	ldi	r22, 0x0D	; 13
    ab5c:	46 2e       	mov	r4, r22
    ab5e:	78 e1       	ldi	r23, 0x18	; 24
    ab60:	87 2e       	mov	r8, r23
    ab62:	73 e0       	ldi	r23, 0x03	; 3
    ab64:	97 2e       	mov	r9, r23
    ab66:	55 24       	eor	r5, r5
    ab68:	53 94       	inc	r5
    ab6a:	f8 01       	movw	r30, r16
    ab6c:	46 89       	ldd	r20, Z+22	; 0x16
    ab6e:	57 89       	ldd	r21, Z+23	; 0x17
    ab70:	60 8d       	ldd	r22, Z+24	; 0x18
    ab72:	71 8d       	ldd	r23, Z+25	; 0x19
    ab74:	c6 01       	movw	r24, r12
    ab76:	0e 94 50 49 	call	0x92a0	; 0x92a0 <move_window>
    ab7a:	00 97       	sbiw	r24, 0x00	; 0
    ab7c:	09 f0       	breq	.+2      	; 0xab80 <dir_register+0x21c>
    ab7e:	90 c0       	rjmp	.+288    	; 0xaca0 <dir_register+0x33c>
    ab80:	7e 2c       	mov	r7, r14
    ab82:	d8 01       	movw	r26, r16
    ab84:	5a 96       	adiw	r26, 0x1a	; 26
    ab86:	ed 91       	ld	r30, X+
    ab88:	fc 91       	ld	r31, X
    ab8a:	5b 97       	sbiw	r26, 0x1b	; 27
    ab8c:	d6 01       	movw	r26, r12
    ab8e:	1b 96       	adiw	r26, 0x0b	; 11
    ab90:	6d 91       	ld	r22, X+
    ab92:	7c 91       	ld	r23, X
    ab94:	1c 97       	sbiw	r26, 0x0c	; 12
    ab96:	65 86       	std	Z+13, r6	; 0x0d
    ab98:	33 86       	std	Z+11, r3	; 0x0b
    ab9a:	14 86       	std	Z+12, r1	; 0x0c
    ab9c:	12 8e       	std	Z+26, r1	; 0x1a
    ab9e:	13 8e       	std	Z+27, r1	; 0x1b
    aba0:	97 01       	movw	r18, r14
    aba2:	33 27       	eor	r19, r19
    aba4:	21 50       	subi	r18, 0x01	; 1
    aba6:	31 09       	sbc	r19, r1
    aba8:	42 9e       	mul	r4, r18
    abaa:	c0 01       	movw	r24, r0
    abac:	43 9e       	mul	r4, r19
    abae:	90 0d       	add	r25, r0
    abb0:	11 24       	eor	r1, r1
    abb2:	2b e0       	ldi	r18, 0x0B	; 11
    abb4:	33 e0       	ldi	r19, 0x03	; 3
    abb6:	3e 8b       	std	Y+22, r19	; 0x16
    abb8:	2d 8b       	std	Y+21, r18	; 0x15
    abba:	20 e0       	ldi	r18, 0x00	; 0
    abbc:	30 e0       	ldi	r19, 0x00	; 0
    abbe:	2f 3f       	cpi	r18, 0xFF	; 255
    abc0:	4f ef       	ldi	r20, 0xFF	; 255
    abc2:	34 07       	cpc	r19, r20
    abc4:	49 f0       	breq	.+18     	; 0xabd8 <dir_register+0x274>
    abc6:	9c 01       	movw	r18, r24
    abc8:	22 0f       	add	r18, r18
    abca:	33 1f       	adc	r19, r19
    abcc:	26 0f       	add	r18, r22
    abce:	37 1f       	adc	r19, r23
    abd0:	d9 01       	movw	r26, r18
    abd2:	2d 91       	ld	r18, X+
    abd4:	3c 91       	ld	r19, X
    abd6:	01 96       	adiw	r24, 0x01	; 1
    abd8:	ad 89       	ldd	r26, Y+21	; 0x15
    abda:	be 89       	ldd	r27, Y+22	; 0x16
    abdc:	4d 91       	ld	r20, X+
    abde:	be 8b       	std	Y+22, r27	; 0x16
    abe0:	ad 8b       	std	Y+21, r26	; 0x15
    abe2:	df 01       	movw	r26, r30
    abe4:	a4 0f       	add	r26, r20
    abe6:	b1 1d       	adc	r27, r1
    abe8:	2c 93       	st	X, r18
    abea:	11 96       	adiw	r26, 0x01	; 1
    abec:	3c 93       	st	X, r19
    abee:	21 15       	cp	r18, r1
    abf0:	31 05       	cpc	r19, r1
    abf2:	11 f4       	brne	.+4      	; 0xabf8 <dir_register+0x294>
    abf4:	2f ef       	ldi	r18, 0xFF	; 255
    abf6:	3f ef       	ldi	r19, 0xFF	; 255
    abf8:	4d 89       	ldd	r20, Y+21	; 0x15
    abfa:	5e 89       	ldd	r21, Y+22	; 0x16
    abfc:	84 16       	cp	r8, r20
    abfe:	95 06       	cpc	r9, r21
    ac00:	f1 f6       	brne	.-68     	; 0xabbe <dir_register+0x25a>
    ac02:	2f 3f       	cpi	r18, 0xFF	; 255
    ac04:	3f 4f       	sbci	r19, 0xFF	; 255
    ac06:	49 f0       	breq	.+18     	; 0xac1a <dir_register+0x2b6>
    ac08:	88 0f       	add	r24, r24
    ac0a:	99 1f       	adc	r25, r25
    ac0c:	db 01       	movw	r26, r22
    ac0e:	a8 0f       	add	r26, r24
    ac10:	b9 1f       	adc	r27, r25
    ac12:	8d 91       	ld	r24, X+
    ac14:	9c 91       	ld	r25, X
    ac16:	89 2b       	or	r24, r25
    ac18:	19 f4       	brne	.+6      	; 0xac20 <dir_register+0x2bc>
    ac1a:	87 2d       	mov	r24, r7
    ac1c:	80 64       	ori	r24, 0x40	; 64
    ac1e:	78 2e       	mov	r7, r24
    ac20:	70 82       	st	Z, r7
    ac22:	d6 01       	movw	r26, r12
    ac24:	13 96       	adiw	r26, 0x03	; 3
    ac26:	5c 92       	st	X, r5
    ac28:	60 e0       	ldi	r22, 0x00	; 0
    ac2a:	70 e0       	ldi	r23, 0x00	; 0
    ac2c:	c8 01       	movw	r24, r16
    ac2e:	0b db       	rcall	.-2538   	; 0xa246 <dir_next>
    ac30:	00 97       	sbiw	r24, 0x00	; 0
    ac32:	b1 f5       	brne	.+108    	; 0xaca0 <dir_register+0x33c>
    ac34:	b1 e0       	ldi	r27, 0x01	; 1
    ac36:	eb 1a       	sub	r14, r27
    ac38:	f1 08       	sbc	r15, r1
    ac3a:	09 f0       	breq	.+2      	; 0xac3e <dir_register+0x2da>
    ac3c:	96 cf       	rjmp	.-212    	; 0xab6a <dir_register+0x206>
    ac3e:	03 c0       	rjmp	.+6      	; 0xac46 <dir_register+0x2e2>
    ac40:	26 e0       	ldi	r18, 0x06	; 6
    ac42:	90 e0       	ldi	r25, 0x00	; 0
    ac44:	2e c0       	rjmp	.+92     	; 0xaca2 <dir_register+0x33e>
    ac46:	d8 01       	movw	r26, r16
    ac48:	56 96       	adiw	r26, 0x16	; 22
    ac4a:	4d 91       	ld	r20, X+
    ac4c:	5d 91       	ld	r21, X+
    ac4e:	6d 91       	ld	r22, X+
    ac50:	7c 91       	ld	r23, X
    ac52:	59 97       	sbiw	r26, 0x19	; 25
    ac54:	c6 01       	movw	r24, r12
    ac56:	0e 94 50 49 	call	0x92a0	; 0x92a0 <move_window>
    ac5a:	00 97       	sbiw	r24, 0x00	; 0
    ac5c:	09 f5       	brne	.+66     	; 0xaca0 <dir_register+0x33c>
    ac5e:	40 e2       	ldi	r20, 0x20	; 32
    ac60:	50 e0       	ldi	r21, 0x00	; 0
    ac62:	60 e0       	ldi	r22, 0x00	; 0
    ac64:	70 e0       	ldi	r23, 0x00	; 0
    ac66:	f8 01       	movw	r30, r16
    ac68:	82 8d       	ldd	r24, Z+26	; 0x1a
    ac6a:	93 8d       	ldd	r25, Z+27	; 0x1b
    ac6c:	0e 94 94 47 	call	0x8f28	; 0x8f28 <mem_set>
    ac70:	4b e0       	ldi	r20, 0x0B	; 11
    ac72:	50 e0       	ldi	r21, 0x00	; 0
    ac74:	b5 01       	movw	r22, r10
    ac76:	d8 01       	movw	r26, r16
    ac78:	5a 96       	adiw	r26, 0x1a	; 26
    ac7a:	8d 91       	ld	r24, X+
    ac7c:	9c 91       	ld	r25, X
    ac7e:	5b 97       	sbiw	r26, 0x1b	; 27
    ac80:	0e 94 5d 48 	call	0x90ba	; 0x90ba <mem_cpy.part.0>
    ac84:	d8 01       	movw	r26, r16
    ac86:	5a 96       	adiw	r26, 0x1a	; 26
    ac88:	ed 91       	ld	r30, X+
    ac8a:	fc 91       	ld	r31, X
    ac8c:	5b 97       	sbiw	r26, 0x1b	; 27
    ac8e:	97 96       	adiw	r26, 0x27	; 39
    ac90:	8c 91       	ld	r24, X
    ac92:	88 71       	andi	r24, 0x18	; 24
    ac94:	84 87       	std	Z+12, r24	; 0x0c
    ac96:	81 e0       	ldi	r24, 0x01	; 1
    ac98:	f6 01       	movw	r30, r12
    ac9a:	83 83       	std	Z+3, r24	; 0x03
    ac9c:	20 e0       	ldi	r18, 0x00	; 0
    ac9e:	d1 cf       	rjmp	.-94     	; 0xac42 <dir_register+0x2de>
    aca0:	28 2f       	mov	r18, r24
    aca2:	82 2f       	mov	r24, r18
    aca4:	66 96       	adiw	r28, 0x16	; 22
    aca6:	e2 e1       	ldi	r30, 0x12	; 18
    aca8:	0c 94 50 ec 	jmp	0x1d8a0	; 0x1d8a0 <__epilogue_restores__>

0000acac <follow_path>:
    acac:	a7 e0       	ldi	r26, 0x07	; 7
    acae:	b0 e0       	ldi	r27, 0x00	; 0
    acb0:	ec e5       	ldi	r30, 0x5C	; 92
    acb2:	f6 e5       	ldi	r31, 0x56	; 86
    acb4:	0c 94 34 ec 	jmp	0x1d868	; 0x1d868 <__prologue_saves__>
    acb8:	8c 01       	movw	r16, r24
    acba:	7b 01       	movw	r14, r22
    acbc:	dc 01       	movw	r26, r24
    acbe:	2d 90       	ld	r2, X+
    acc0:	3c 90       	ld	r3, X
    acc2:	fb 01       	movw	r30, r22
    acc4:	80 81       	ld	r24, Z
    acc6:	8f 32       	cpi	r24, 0x2F	; 47
    acc8:	11 f0       	breq	.+4      	; 0xacce <follow_path+0x22>
    acca:	8c 35       	cpi	r24, 0x5C	; 92
    accc:	11 f4       	brne	.+4      	; 0xacd2 <follow_path+0x26>
    acce:	97 01       	movw	r18, r14
    acd0:	0b c0       	rjmp	.+22     	; 0xace8 <follow_path+0x3c>
    acd2:	f1 01       	movw	r30, r2
    acd4:	85 89       	ldd	r24, Z+21	; 0x15
    acd6:	96 89       	ldd	r25, Z+22	; 0x16
    acd8:	a7 89       	ldd	r26, Z+23	; 0x17
    acda:	b0 8d       	ldd	r27, Z+24	; 0x18
    acdc:	f8 01       	movw	r30, r16
    acde:	86 83       	std	Z+6, r24	; 0x06
    ace0:	97 83       	std	Z+7, r25	; 0x07
    ace2:	a0 87       	std	Z+8, r26	; 0x08
    ace4:	b1 87       	std	Z+9, r27	; 0x09
    ace6:	0e c0       	rjmp	.+28     	; 0xad04 <follow_path+0x58>
    ace8:	79 01       	movw	r14, r18
    acea:	d9 01       	movw	r26, r18
    acec:	8c 91       	ld	r24, X
    acee:	2f 5f       	subi	r18, 0xFF	; 255
    acf0:	3f 4f       	sbci	r19, 0xFF	; 255
    acf2:	8f 32       	cpi	r24, 0x2F	; 47
    acf4:	c9 f3       	breq	.-14     	; 0xace8 <follow_path+0x3c>
    acf6:	8c 35       	cpi	r24, 0x5C	; 92
    acf8:	b9 f3       	breq	.-18     	; 0xace8 <follow_path+0x3c>
    acfa:	f8 01       	movw	r30, r16
    acfc:	16 82       	std	Z+6, r1	; 0x06
    acfe:	17 82       	std	Z+7, r1	; 0x07
    ad00:	10 86       	std	Z+8, r1	; 0x08
    ad02:	11 86       	std	Z+9, r1	; 0x09
    ad04:	d7 01       	movw	r26, r14
    ad06:	8c 91       	ld	r24, X
    ad08:	80 32       	cpi	r24, 0x20	; 32
    ad0a:	50 f0       	brcs	.+20     	; 0xad20 <follow_path+0x74>
    ad0c:	f8 01       	movw	r30, r16
    ad0e:	7c 96       	adiw	r30, 0x1c	; 28
    ad10:	fb 83       	std	Y+3, r31	; 0x03
    ad12:	ea 83       	std	Y+2, r30	; 0x02
    ad14:	91 01       	movw	r18, r2
    ad16:	2b 5c       	subi	r18, 0xCB	; 203
    ad18:	3f 4f       	sbci	r19, 0xFF	; 255
    ad1a:	3d 83       	std	Y+5, r19	; 0x05
    ad1c:	2c 83       	std	Y+4, r18	; 0x04
    ad1e:	87 c0       	rjmp	.+270    	; 0xae2e <follow_path+0x182>
    ad20:	80 e8       	ldi	r24, 0x80	; 128
    ad22:	d8 01       	movw	r26, r16
    ad24:	97 96       	adiw	r26, 0x27	; 39
    ad26:	8c 93       	st	X, r24
    ad28:	40 e0       	ldi	r20, 0x00	; 0
    ad2a:	50 e0       	ldi	r21, 0x00	; 0
    ad2c:	ba 01       	movw	r22, r20
    ad2e:	c8 01       	movw	r24, r16
    ad30:	0e 94 29 4e 	call	0x9c52	; 0x9c52 <dir_sdi>
    ad34:	d8 c1       	rjmp	.+944    	; 0xb0e6 <follow_path+0x43a>
    ad36:	8f 32       	cpi	r24, 0x2F	; 47
    ad38:	91 05       	cpc	r25, r1
    ad3a:	09 f4       	brne	.+2      	; 0xad3e <follow_path+0x92>
    ad3c:	83 c0       	rjmp	.+262    	; 0xae44 <follow_path+0x198>
    ad3e:	8c 35       	cpi	r24, 0x5C	; 92
    ad40:	91 05       	cpc	r25, r1
    ad42:	09 f4       	brne	.+2      	; 0xad46 <follow_path+0x9a>
    ad44:	7f c0       	rjmp	.+254    	; 0xae44 <follow_path+0x198>
    ad46:	a1 14       	cp	r10, r1
    ad48:	f1 e0       	ldi	r31, 0x01	; 1
    ad4a:	bf 06       	cpc	r11, r31
    ad4c:	09 f4       	brne	.+2      	; 0xad50 <follow_path+0xa4>
    ad4e:	ac c1       	rjmp	.+856    	; 0xb0a8 <follow_path+0x3fc>
    ad50:	61 e0       	ldi	r22, 0x01	; 1
    ad52:	70 e0       	ldi	r23, 0x00	; 0
    ad54:	0e 94 24 6e 	call	0xdc48	; 0xdc48 <ff_convert>
    ad58:	00 97       	sbiw	r24, 0x00	; 0
    ad5a:	09 f4       	brne	.+2      	; 0xad5e <follow_path+0xb2>
    ad5c:	a5 c1       	rjmp	.+842    	; 0xb0a8 <follow_path+0x3fc>
    ad5e:	80 38       	cpi	r24, 0x80	; 128
    ad60:	91 05       	cpc	r25, r1
    ad62:	28 f4       	brcc	.+10     	; 0xad6e <follow_path+0xc2>
    ad64:	e2 e2       	ldi	r30, 0x22	; 34
    ad66:	f8 e0       	ldi	r31, 0x08	; 8
    ad68:	21 91       	ld	r18, Z+
    ad6a:	21 11       	cpse	r18, r1
    ad6c:	79 c0       	rjmp	.+242    	; 0xae60 <follow_path+0x1b4>
    ad6e:	d3 01       	movw	r26, r6
    ad70:	8d 93       	st	X+, r24
    ad72:	9d 93       	st	X+, r25
    ad74:	3d 01       	movw	r6, r26
    ad76:	bf 82       	std	Y+7, r11	; 0x07
    ad78:	ae 82       	std	Y+6, r10	; 0x06
    ad7a:	ae 80       	ldd	r10, Y+6	; 0x06
    ad7c:	bf 80       	ldd	r11, Y+7	; 0x07
    ad7e:	bf ef       	ldi	r27, 0xFF	; 255
    ad80:	ab 1a       	sub	r10, r27
    ad82:	bb 0a       	sbc	r11, r27
    ad84:	f4 01       	movw	r30, r8
    ad86:	81 91       	ld	r24, Z+
    ad88:	4f 01       	movw	r8, r30
    ad8a:	90 e0       	ldi	r25, 0x00	; 0
    ad8c:	80 32       	cpi	r24, 0x20	; 32
    ad8e:	91 05       	cpc	r25, r1
    ad90:	90 f6       	brcc	.-92     	; 0xad36 <follow_path+0x8a>
    ad92:	ea 0c       	add	r14, r10
    ad94:	fb 1c       	adc	r15, r11
    ad96:	80 97       	sbiw	r24, 0x20	; 32
    ad98:	08 f0       	brcs	.+2      	; 0xad9c <follow_path+0xf0>
    ad9a:	68 c0       	rjmp	.+208    	; 0xae6c <follow_path+0x1c0>
    ad9c:	b4 e0       	ldi	r27, 0x04	; 4
    ad9e:	b9 83       	std	Y+1, r27	; 0x01
    ada0:	ee 81       	ldd	r30, Y+6	; 0x06
    ada2:	ff 81       	ldd	r31, Y+7	; 0x07
    ada4:	ee 0f       	add	r30, r30
    ada6:	ff 1f       	adc	r31, r31
    ada8:	2e 81       	ldd	r18, Y+6	; 0x06
    adaa:	3f 81       	ldd	r19, Y+7	; 0x07
    adac:	21 30       	cpi	r18, 0x01	; 1
    adae:	31 05       	cpc	r19, r1
    adb0:	09 f0       	breq	.+2      	; 0xadb4 <follow_path+0x108>
    adb2:	5e c0       	rjmp	.+188    	; 0xae70 <follow_path+0x1c4>
    adb4:	d6 01       	movw	r26, r12
    adb6:	8d 91       	ld	r24, X+
    adb8:	9c 91       	ld	r25, X
    adba:	8e 97       	sbiw	r24, 0x2e	; 46
    adbc:	09 f0       	breq	.+2      	; 0xadc0 <follow_path+0x114>
    adbe:	65 c0       	rjmp	.+202    	; 0xae8a <follow_path+0x1de>
    adc0:	ec 0d       	add	r30, r12
    adc2:	fd 1d       	adc	r31, r13
    adc4:	11 82       	std	Z+1, r1	; 0x01
    adc6:	10 82       	st	Z, r1
    adc8:	f8 01       	movw	r30, r16
    adca:	7c 96       	adiw	r30, 0x1c	; 28
    adcc:	80 e0       	ldi	r24, 0x00	; 0
    adce:	90 e0       	ldi	r25, 0x00	; 0
    add0:	2e 81       	ldd	r18, Y+6	; 0x06
    add2:	3f 81       	ldd	r19, Y+7	; 0x07
    add4:	82 17       	cp	r24, r18
    add6:	93 07       	cpc	r25, r19
    add8:	08 f0       	brcs	.+2      	; 0xaddc <follow_path+0x130>
    adda:	5a c0       	rjmp	.+180    	; 0xae90 <follow_path+0x1e4>
    addc:	2e e2       	ldi	r18, 0x2E	; 46
    adde:	21 93       	st	Z+, r18
    ade0:	01 96       	adiw	r24, 0x01	; 1
    ade2:	8b 30       	cpi	r24, 0x0B	; 11
    ade4:	91 05       	cpc	r25, r1
    ade6:	a1 f7       	brne	.-24     	; 0xadd0 <follow_path+0x124>
    ade8:	89 81       	ldd	r24, Y+1	; 0x01
    adea:	80 62       	ori	r24, 0x20	; 32
    adec:	d8 01       	movw	r26, r16
    adee:	97 96       	adiw	r26, 0x27	; 39
    adf0:	8c 93       	st	X, r24
    adf2:	c8 01       	movw	r24, r16
    adf4:	a0 dc       	rcall	.-1728   	; 0xa736 <dir_find>
    adf6:	d8 01       	movw	r26, r16
    adf8:	97 96       	adiw	r26, 0x27	; 39
    adfa:	2c 91       	ld	r18, X
    adfc:	00 97       	sbiw	r24, 0x00	; 0
    adfe:	09 f0       	breq	.+2      	; 0xae02 <follow_path+0x156>
    ae00:	56 c1       	rjmp	.+684    	; 0xb0ae <follow_path+0x402>
    ae02:	22 fd       	sbrc	r18, 2
    ae04:	70 c1       	rjmp	.+736    	; 0xb0e6 <follow_path+0x43a>
    ae06:	f8 01       	movw	r30, r16
    ae08:	84 81       	ldd	r24, Z+4	; 0x04
    ae0a:	84 ff       	sbrs	r24, 4
    ae0c:	63 c1       	rjmp	.+710    	; 0xb0d4 <follow_path+0x428>
    ae0e:	66 85       	ldd	r22, Z+14	; 0x0e
    ae10:	77 85       	ldd	r23, Z+15	; 0x0f
    ae12:	71 70       	andi	r23, 0x01	; 1
    ae14:	2c 81       	ldd	r18, Y+4	; 0x04
    ae16:	3d 81       	ldd	r19, Y+5	; 0x05
    ae18:	62 0f       	add	r22, r18
    ae1a:	73 1f       	adc	r23, r19
    ae1c:	d1 01       	movw	r26, r2
    ae1e:	8c 91       	ld	r24, X
    ae20:	0e 94 68 48 	call	0x90d0	; 0x90d0 <ld_clust.isra.1>
    ae24:	f8 01       	movw	r30, r16
    ae26:	66 83       	std	Z+6, r22	; 0x06
    ae28:	77 83       	std	Z+7, r23	; 0x07
    ae2a:	80 87       	std	Z+8, r24	; 0x08
    ae2c:	91 87       	std	Z+9, r25	; 0x09
    ae2e:	d8 01       	movw	r26, r16
    ae30:	ed 91       	ld	r30, X+
    ae32:	fc 91       	ld	r31, X
    ae34:	c3 84       	ldd	r12, Z+11	; 0x0b
    ae36:	d4 84       	ldd	r13, Z+12	; 0x0c
    ae38:	26 01       	movw	r4, r12
    ae3a:	36 01       	movw	r6, r12
    ae3c:	47 01       	movw	r8, r14
    ae3e:	1f 82       	std	Y+7, r1	; 0x07
    ae40:	1e 82       	std	Y+6, r1	; 0x06
    ae42:	9b cf       	rjmp	.-202    	; 0xad7a <follow_path+0xce>
    ae44:	f7 01       	movw	r30, r14
    ae46:	ea 0d       	add	r30, r10
    ae48:	fb 1d       	adc	r31, r11
    ae4a:	03 c0       	rjmp	.+6      	; 0xae52 <follow_path+0x1a6>
    ae4c:	2c 35       	cpi	r18, 0x5C	; 92
    ae4e:	09 f0       	breq	.+2      	; 0xae52 <follow_path+0x1a6>
    ae50:	a0 cf       	rjmp	.-192    	; 0xad92 <follow_path+0xe6>
    ae52:	5f 01       	movw	r10, r30
    ae54:	ae 18       	sub	r10, r14
    ae56:	bf 08       	sbc	r11, r15
    ae58:	21 91       	ld	r18, Z+
    ae5a:	2f 32       	cpi	r18, 0x2F	; 47
    ae5c:	b9 f7       	brne	.-18     	; 0xae4c <follow_path+0x1a0>
    ae5e:	f9 cf       	rjmp	.-14     	; 0xae52 <follow_path+0x1a6>
    ae60:	30 e0       	ldi	r19, 0x00	; 0
    ae62:	82 17       	cp	r24, r18
    ae64:	93 07       	cpc	r25, r19
    ae66:	09 f0       	breq	.+2      	; 0xae6a <follow_path+0x1be>
    ae68:	7f cf       	rjmp	.-258    	; 0xad68 <follow_path+0xbc>
    ae6a:	1e c1       	rjmp	.+572    	; 0xb0a8 <follow_path+0x3fc>
    ae6c:	19 82       	std	Y+1, r1	; 0x01
    ae6e:	98 cf       	rjmp	.-208    	; 0xada0 <follow_path+0xf4>
    ae70:	2e 81       	ldd	r18, Y+6	; 0x06
    ae72:	3f 81       	ldd	r19, Y+7	; 0x07
    ae74:	22 30       	cpi	r18, 0x02	; 2
    ae76:	31 05       	cpc	r19, r1
    ae78:	41 f4       	brne	.+16     	; 0xae8a <follow_path+0x1de>
    ae7a:	d6 01       	movw	r26, r12
    ae7c:	12 96       	adiw	r26, 0x02	; 2
    ae7e:	8d 91       	ld	r24, X+
    ae80:	9c 91       	ld	r25, X
    ae82:	13 97       	sbiw	r26, 0x03	; 3
    ae84:	8e 97       	sbiw	r24, 0x2e	; 46
    ae86:	09 f4       	brne	.+2      	; 0xae8a <follow_path+0x1de>
    ae88:	96 cf       	rjmp	.-212    	; 0xadb6 <follow_path+0x10a>
    ae8a:	ec 0d       	add	r30, r12
    ae8c:	fd 1d       	adc	r31, r13
    ae8e:	0d c0       	rjmp	.+26     	; 0xaeaa <follow_path+0x1fe>
    ae90:	20 e2       	ldi	r18, 0x20	; 32
    ae92:	a5 cf       	rjmp	.-182    	; 0xadde <follow_path+0x132>
    ae94:	92 91       	ld	r25, -Z
    ae96:	82 91       	ld	r24, -Z
    ae98:	80 32       	cpi	r24, 0x20	; 32
    ae9a:	91 05       	cpc	r25, r1
    ae9c:	59 f4       	brne	.+22     	; 0xaeb4 <follow_path+0x208>
    ae9e:	2e 81       	ldd	r18, Y+6	; 0x06
    aea0:	3f 81       	ldd	r19, Y+7	; 0x07
    aea2:	21 50       	subi	r18, 0x01	; 1
    aea4:	31 09       	sbc	r19, r1
    aea6:	3f 83       	std	Y+7, r19	; 0x07
    aea8:	2e 83       	std	Y+6, r18	; 0x06
    aeaa:	8e 81       	ldd	r24, Y+6	; 0x06
    aeac:	9f 81       	ldd	r25, Y+7	; 0x07
    aeae:	89 2b       	or	r24, r25
    aeb0:	89 f7       	brne	.-30     	; 0xae94 <follow_path+0x1e8>
    aeb2:	02 c0       	rjmp	.+4      	; 0xaeb8 <follow_path+0x20c>
    aeb4:	8e 97       	sbiw	r24, 0x2e	; 46
    aeb6:	99 f3       	breq	.-26     	; 0xae9e <follow_path+0x1f2>
    aeb8:	ae 80       	ldd	r10, Y+6	; 0x06
    aeba:	bf 80       	ldd	r11, Y+7	; 0x07
    aebc:	aa 0c       	add	r10, r10
    aebe:	bb 1c       	adc	r11, r11
    aec0:	ac 0c       	add	r10, r12
    aec2:	bd 1c       	adc	r11, r13
    aec4:	d5 01       	movw	r26, r10
    aec6:	1d 92       	st	X+, r1
    aec8:	1c 92       	st	X, r1
    aeca:	ee 81       	ldd	r30, Y+6	; 0x06
    aecc:	ff 81       	ldd	r31, Y+7	; 0x07
    aece:	ef 2b       	or	r30, r31
    aed0:	09 f4       	brne	.+2      	; 0xaed4 <follow_path+0x228>
    aed2:	ea c0       	rjmp	.+468    	; 0xb0a8 <follow_path+0x3fc>
    aed4:	4b e0       	ldi	r20, 0x0B	; 11
    aed6:	50 e0       	ldi	r21, 0x00	; 0
    aed8:	60 e2       	ldi	r22, 0x20	; 32
    aeda:	70 e0       	ldi	r23, 0x00	; 0
    aedc:	8a 81       	ldd	r24, Y+2	; 0x02
    aede:	9b 81       	ldd	r25, Y+3	; 0x03
    aee0:	0e 94 94 47 	call	0x8f28	; 0x8f28 <mem_set>
    aee4:	80 e0       	ldi	r24, 0x00	; 0
    aee6:	90 e0       	ldi	r25, 0x00	; 0
    aee8:	d2 01       	movw	r26, r4
    aeea:	2d 91       	ld	r18, X+
    aeec:	3d 91       	ld	r19, X+
    aeee:	2d 01       	movw	r4, r26
    aef0:	20 32       	cpi	r18, 0x20	; 32
    aef2:	31 05       	cpc	r19, r1
    aef4:	11 f4       	brne	.+4      	; 0xaefa <follow_path+0x24e>
    aef6:	01 96       	adiw	r24, 0x01	; 1
    aef8:	f7 cf       	rjmp	.-18     	; 0xaee8 <follow_path+0x23c>
    aefa:	2e 32       	cpi	r18, 0x2E	; 46
    aefc:	31 05       	cpc	r19, r1
    aefe:	d9 f3       	breq	.-10     	; 0xaef6 <follow_path+0x24a>
    af00:	00 97       	sbiw	r24, 0x00	; 0
    af02:	19 f0       	breq	.+6      	; 0xaf0a <follow_path+0x25e>
    af04:	b9 81       	ldd	r27, Y+1	; 0x01
    af06:	b3 60       	ori	r27, 0x03	; 3
    af08:	b9 83       	std	Y+1, r27	; 0x01
    af0a:	f5 01       	movw	r30, r10
    af0c:	32 91       	ld	r19, -Z
    af0e:	22 91       	ld	r18, -Z
    af10:	2e 32       	cpi	r18, 0x2E	; 46
    af12:	31 05       	cpc	r19, r1
    af14:	41 f0       	breq	.+16     	; 0xaf26 <follow_path+0x27a>
    af16:	2e 81       	ldd	r18, Y+6	; 0x06
    af18:	3f 81       	ldd	r19, Y+7	; 0x07
    af1a:	21 50       	subi	r18, 0x01	; 1
    af1c:	31 09       	sbc	r19, r1
    af1e:	3f 83       	std	Y+7, r19	; 0x07
    af20:	2e 83       	std	Y+6, r18	; 0x06
    af22:	23 2b       	or	r18, r19
    af24:	99 f7       	brne	.-26     	; 0xaf0c <follow_path+0x260>
    af26:	48 e0       	ldi	r20, 0x08	; 8
    af28:	a4 2e       	mov	r10, r20
    af2a:	b1 2c       	mov	r11, r1
    af2c:	81 2c       	mov	r8, r1
    af2e:	91 2c       	mov	r9, r1
    af30:	41 2c       	mov	r4, r1
    af32:	3c 01       	movw	r6, r24
    af34:	3f ef       	ldi	r19, 0xFF	; 255
    af36:	63 1a       	sub	r6, r19
    af38:	73 0a       	sbc	r7, r19
    af3a:	88 0f       	add	r24, r24
    af3c:	99 1f       	adc	r25, r25
    af3e:	f6 01       	movw	r30, r12
    af40:	e8 0f       	add	r30, r24
    af42:	f9 1f       	adc	r31, r25
    af44:	80 81       	ld	r24, Z
    af46:	91 81       	ldd	r25, Z+1	; 0x01
    af48:	00 97       	sbiw	r24, 0x00	; 0
    af4a:	09 f4       	brne	.+2      	; 0xaf4e <follow_path+0x2a2>
    af4c:	75 c0       	rjmp	.+234    	; 0xb038 <follow_path+0x38c>
    af4e:	80 32       	cpi	r24, 0x20	; 32
    af50:	91 05       	cpc	r25, r1
    af52:	41 f0       	breq	.+16     	; 0xaf64 <follow_path+0x2b8>
    af54:	8e 32       	cpi	r24, 0x2E	; 46
    af56:	91 05       	cpc	r25, r1
    af58:	51 f4       	brne	.+20     	; 0xaf6e <follow_path+0x2c2>
    af5a:	8e 81       	ldd	r24, Y+6	; 0x06
    af5c:	9f 81       	ldd	r25, Y+7	; 0x07
    af5e:	68 16       	cp	r6, r24
    af60:	79 06       	cpc	r7, r25
    af62:	71 f0       	breq	.+28     	; 0xaf80 <follow_path+0x2d4>
    af64:	99 81       	ldd	r25, Y+1	; 0x01
    af66:	93 60       	ori	r25, 0x03	; 3
    af68:	99 83       	std	Y+1, r25	; 0x01
    af6a:	c3 01       	movw	r24, r6
    af6c:	e2 cf       	rjmp	.-60     	; 0xaf32 <follow_path+0x286>
    af6e:	8a 14       	cp	r8, r10
    af70:	9b 04       	cpc	r9, r11
    af72:	50 f4       	brcc	.+20     	; 0xaf88 <follow_path+0x2dc>
    af74:	ae 81       	ldd	r26, Y+6	; 0x06
    af76:	bf 81       	ldd	r27, Y+7	; 0x07
    af78:	6a 16       	cp	r6, r26
    af7a:	7b 06       	cpc	r7, r27
    af7c:	49 f5       	brne	.+82     	; 0xafd0 <follow_path+0x324>
    af7e:	ad c0       	rjmp	.+346    	; 0xb0da <follow_path+0x42e>
    af80:	8a 14       	cp	r8, r10
    af82:	9b 04       	cpc	r9, r11
    af84:	08 f4       	brcc	.+2      	; 0xaf88 <follow_path+0x2dc>
    af86:	a9 c0       	rjmp	.+338    	; 0xb0da <follow_path+0x42e>
    af88:	bb e0       	ldi	r27, 0x0B	; 11
    af8a:	ab 16       	cp	r10, r27
    af8c:	b1 04       	cpc	r11, r1
    af8e:	39 f4       	brne	.+14     	; 0xaf9e <follow_path+0x2f2>
    af90:	e9 81       	ldd	r30, Y+1	; 0x01
    af92:	e3 60       	ori	r30, 0x03	; 3
    af94:	e9 83       	std	Y+1, r30	; 0x01
    af96:	2b e0       	ldi	r18, 0x0B	; 11
    af98:	a2 2e       	mov	r10, r18
    af9a:	b1 2c       	mov	r11, r1
    af9c:	4d c0       	rjmp	.+154    	; 0xb038 <follow_path+0x38c>
    af9e:	2e 81       	ldd	r18, Y+6	; 0x06
    afa0:	3f 81       	ldd	r19, Y+7	; 0x07
    afa2:	62 16       	cp	r6, r18
    afa4:	73 06       	cpc	r7, r19
    afa6:	49 f0       	breq	.+18     	; 0xafba <follow_path+0x30e>
    afa8:	39 81       	ldd	r19, Y+1	; 0x01
    afaa:	33 60       	ori	r19, 0x03	; 3
    afac:	39 83       	std	Y+1, r19	; 0x01
    afae:	8e 81       	ldd	r24, Y+6	; 0x06
    afb0:	9f 81       	ldd	r25, Y+7	; 0x07
    afb2:	86 15       	cp	r24, r6
    afb4:	97 05       	cpc	r25, r7
    afb6:	08 f4       	brcc	.+2      	; 0xafba <follow_path+0x30e>
    afb8:	3f c0       	rjmp	.+126    	; 0xb038 <follow_path+0x38c>
    afba:	44 0c       	add	r4, r4
    afbc:	44 0c       	add	r4, r4
    afbe:	6e 80       	ldd	r6, Y+6	; 0x06
    afc0:	7f 80       	ldd	r7, Y+7	; 0x07
    afc2:	8b e0       	ldi	r24, 0x0B	; 11
    afc4:	a8 2e       	mov	r10, r24
    afc6:	b1 2c       	mov	r11, r1
    afc8:	98 e0       	ldi	r25, 0x08	; 8
    afca:	89 2e       	mov	r8, r25
    afcc:	91 2c       	mov	r9, r1
    afce:	cd cf       	rjmp	.-102    	; 0xaf6a <follow_path+0x2be>
    afd0:	80 38       	cpi	r24, 0x80	; 128
    afd2:	91 05       	cpc	r25, r1
    afd4:	80 f0       	brcs	.+32     	; 0xaff6 <follow_path+0x34a>
    afd6:	60 e0       	ldi	r22, 0x00	; 0
    afd8:	70 e0       	ldi	r23, 0x00	; 0
    afda:	0e 94 24 6e 	call	0xdc48	; 0xdc48 <ff_convert>
    afde:	00 97       	sbiw	r24, 0x00	; 0
    afe0:	29 f0       	breq	.+10     	; 0xafec <follow_path+0x340>
    afe2:	fc 01       	movw	r30, r24
    afe4:	e8 56       	subi	r30, 0x68	; 104
    afe6:	fd 4f       	sbci	r31, 0xFD	; 253
    afe8:	80 81       	ld	r24, Z
    afea:	90 e0       	ldi	r25, 0x00	; 0
    afec:	a9 81       	ldd	r26, Y+1	; 0x01
    afee:	a2 60       	ori	r26, 0x02	; 2
    aff0:	a9 83       	std	Y+1, r26	; 0x01
    aff2:	00 97       	sbiw	r24, 0x00	; 0
    aff4:	49 f0       	breq	.+18     	; 0xb008 <follow_path+0x35c>
    aff6:	eb e2       	ldi	r30, 0x2B	; 43
    aff8:	f8 e0       	ldi	r31, 0x08	; 8
    affa:	21 91       	ld	r18, Z+
    affc:	22 23       	and	r18, r18
    affe:	51 f0       	breq	.+20     	; 0xb014 <follow_path+0x368>
    b000:	30 e0       	ldi	r19, 0x00	; 0
    b002:	82 17       	cp	r24, r18
    b004:	93 07       	cpc	r25, r19
    b006:	c9 f7       	brne	.-14     	; 0xaffa <follow_path+0x34e>
    b008:	b9 81       	ldd	r27, Y+1	; 0x01
    b00a:	b3 60       	ori	r27, 0x03	; 3
    b00c:	b9 83       	std	Y+1, r27	; 0x01
    b00e:	8f e5       	ldi	r24, 0x5F	; 95
    b010:	90 e0       	ldi	r25, 0x00	; 0
    b012:	09 c0       	rjmp	.+18     	; 0xb026 <follow_path+0x37a>
    b014:	9c 01       	movw	r18, r24
    b016:	21 54       	subi	r18, 0x41	; 65
    b018:	31 09       	sbc	r19, r1
    b01a:	2a 31       	cpi	r18, 0x1A	; 26
    b01c:	31 05       	cpc	r19, r1
    b01e:	c8 f5       	brcc	.+114    	; 0xb092 <follow_path+0x3e6>
    b020:	e4 2d       	mov	r30, r4
    b022:	e2 60       	ori	r30, 0x02	; 2
    b024:	4e 2e       	mov	r4, r30
    b026:	f8 01       	movw	r30, r16
    b028:	e8 0d       	add	r30, r8
    b02a:	f9 1d       	adc	r31, r9
    b02c:	84 8f       	std	Z+28, r24	; 0x1c
    b02e:	94 01       	movw	r18, r8
    b030:	2f 5f       	subi	r18, 0xFF	; 255
    b032:	3f 4f       	sbci	r19, 0xFF	; 255
    b034:	49 01       	movw	r8, r18
    b036:	99 cf       	rjmp	.-206    	; 0xaf6a <follow_path+0x2be>
    b038:	d8 01       	movw	r26, r16
    b03a:	5c 96       	adiw	r26, 0x1c	; 28
    b03c:	8c 91       	ld	r24, X
    b03e:	5c 97       	sbiw	r26, 0x1c	; 28
    b040:	85 3e       	cpi	r24, 0xE5	; 229
    b042:	19 f4       	brne	.+6      	; 0xb04a <follow_path+0x39e>
    b044:	e5 e0       	ldi	r30, 0x05	; 5
    b046:	5c 96       	adiw	r26, 0x1c	; 28
    b048:	ec 93       	st	X, r30
    b04a:	f8 e0       	ldi	r31, 0x08	; 8
    b04c:	af 16       	cp	r10, r31
    b04e:	b1 04       	cpc	r11, r1
    b050:	11 f4       	brne	.+4      	; 0xb056 <follow_path+0x3aa>
    b052:	44 0c       	add	r4, r4
    b054:	44 0c       	add	r4, r4
    b056:	84 2d       	mov	r24, r4
    b058:	8c 70       	andi	r24, 0x0C	; 12
    b05a:	8c 30       	cpi	r24, 0x0C	; 12
    b05c:	21 f0       	breq	.+8      	; 0xb066 <follow_path+0x3ba>
    b05e:	94 2d       	mov	r25, r4
    b060:	93 70       	andi	r25, 0x03	; 3
    b062:	93 30       	cpi	r25, 0x03	; 3
    b064:	19 f4       	brne	.+6      	; 0xb06c <follow_path+0x3c0>
    b066:	29 81       	ldd	r18, Y+1	; 0x01
    b068:	22 60       	ori	r18, 0x02	; 2
    b06a:	29 83       	std	Y+1, r18	; 0x01
    b06c:	39 81       	ldd	r19, Y+1	; 0x01
    b06e:	31 fd       	sbrc	r19, 1
    b070:	0b c0       	rjmp	.+22     	; 0xb088 <follow_path+0x3dc>
    b072:	94 2d       	mov	r25, r4
    b074:	93 70       	andi	r25, 0x03	; 3
    b076:	91 30       	cpi	r25, 0x01	; 1
    b078:	11 f4       	brne	.+4      	; 0xb07e <follow_path+0x3d2>
    b07a:	30 61       	ori	r19, 0x10	; 16
    b07c:	39 83       	std	Y+1, r19	; 0x01
    b07e:	84 30       	cpi	r24, 0x04	; 4
    b080:	19 f4       	brne	.+6      	; 0xb088 <follow_path+0x3dc>
    b082:	89 81       	ldd	r24, Y+1	; 0x01
    b084:	88 60       	ori	r24, 0x08	; 8
    b086:	89 83       	std	Y+1, r24	; 0x01
    b088:	e9 81       	ldd	r30, Y+1	; 0x01
    b08a:	d8 01       	movw	r26, r16
    b08c:	97 96       	adiw	r26, 0x27	; 39
    b08e:	ec 93       	st	X, r30
    b090:	b0 ce       	rjmp	.-672    	; 0xadf2 <follow_path+0x146>
    b092:	9c 01       	movw	r18, r24
    b094:	21 56       	subi	r18, 0x61	; 97
    b096:	31 09       	sbc	r19, r1
    b098:	2a 31       	cpi	r18, 0x1A	; 26
    b09a:	31 05       	cpc	r19, r1
    b09c:	20 f6       	brcc	.-120    	; 0xb026 <follow_path+0x37a>
    b09e:	f4 2d       	mov	r31, r4
    b0a0:	f1 60       	ori	r31, 0x01	; 1
    b0a2:	4f 2e       	mov	r4, r31
    b0a4:	80 97       	sbiw	r24, 0x20	; 32
    b0a6:	bf cf       	rjmp	.-130    	; 0xb026 <follow_path+0x37a>
    b0a8:	86 e0       	ldi	r24, 0x06	; 6
    b0aa:	90 e0       	ldi	r25, 0x00	; 0
    b0ac:	1c c0       	rjmp	.+56     	; 0xb0e6 <follow_path+0x43a>
    b0ae:	84 30       	cpi	r24, 0x04	; 4
    b0b0:	91 05       	cpc	r25, r1
    b0b2:	c9 f4       	brne	.+50     	; 0xb0e6 <follow_path+0x43a>
    b0b4:	32 2f       	mov	r19, r18
    b0b6:	34 70       	andi	r19, 0x04	; 4
    b0b8:	25 ff       	sbrs	r18, 5
    b0ba:	0a c0       	rjmp	.+20     	; 0xb0d0 <follow_path+0x424>
    b0bc:	33 23       	and	r19, r19
    b0be:	09 f4       	brne	.+2      	; 0xb0c2 <follow_path+0x416>
    b0c0:	b6 ce       	rjmp	.-660    	; 0xae2e <follow_path+0x182>
    b0c2:	80 e8       	ldi	r24, 0x80	; 128
    b0c4:	d8 01       	movw	r26, r16
    b0c6:	97 96       	adiw	r26, 0x27	; 39
    b0c8:	8c 93       	st	X, r24
    b0ca:	80 e0       	ldi	r24, 0x00	; 0
    b0cc:	90 e0       	ldi	r25, 0x00	; 0
    b0ce:	0b c0       	rjmp	.+22     	; 0xb0e6 <follow_path+0x43a>
    b0d0:	31 11       	cpse	r19, r1
    b0d2:	09 c0       	rjmp	.+18     	; 0xb0e6 <follow_path+0x43a>
    b0d4:	85 e0       	ldi	r24, 0x05	; 5
    b0d6:	90 e0       	ldi	r25, 0x00	; 0
    b0d8:	06 c0       	rjmp	.+12     	; 0xb0e6 <follow_path+0x43a>
    b0da:	bb e0       	ldi	r27, 0x0B	; 11
    b0dc:	ab 16       	cp	r10, r27
    b0de:	b1 04       	cpc	r11, r1
    b0e0:	09 f0       	breq	.+2      	; 0xb0e4 <follow_path+0x438>
    b0e2:	6b cf       	rjmp	.-298    	; 0xafba <follow_path+0x30e>
    b0e4:	55 cf       	rjmp	.-342    	; 0xaf90 <follow_path+0x2e4>
    b0e6:	27 96       	adiw	r28, 0x07	; 7
    b0e8:	e2 e1       	ldi	r30, 0x12	; 18
    b0ea:	0c 94 50 ec 	jmp	0x1d8a0	; 0x1d8a0 <__epilogue_restores__>

0000b0ee <f_mount>:
    b0ee:	a6 e0       	ldi	r26, 0x06	; 6
    b0f0:	b0 e0       	ldi	r27, 0x00	; 0
    b0f2:	ed e7       	ldi	r30, 0x7D	; 125
    b0f4:	f8 e5       	ldi	r31, 0x58	; 88
    b0f6:	0c 94 43 ec 	jmp	0x1d886	; 0x1d886 <__prologue_saves__+0x1e>
    b0fa:	9c 83       	std	Y+4, r25	; 0x04
    b0fc:	8b 83       	std	Y+3, r24	; 0x03
    b0fe:	7e 83       	std	Y+6, r23	; 0x06
    b100:	6d 83       	std	Y+5, r22	; 0x05
    b102:	14 2f       	mov	r17, r20
    b104:	7a 83       	std	Y+2, r23	; 0x02
    b106:	69 83       	std	Y+1, r22	; 0x01
    b108:	ce 01       	movw	r24, r28
    b10a:	01 96       	adiw	r24, 0x01	; 1
    b10c:	0e 94 10 48 	call	0x9020	; 0x9020 <get_ldnumber>
    b110:	97 fd       	sbrc	r25, 7
    b112:	22 c0       	rjmp	.+68     	; 0xb158 <f_mount+0x6a>
    b114:	88 0f       	add	r24, r24
    b116:	99 1f       	adc	r25, r25
    b118:	fc 01       	movw	r30, r24
    b11a:	ee 57       	subi	r30, 0x7E	; 126
    b11c:	f7 4e       	sbci	r31, 0xE7	; 231
    b11e:	01 90       	ld	r0, Z+
    b120:	f0 81       	ld	r31, Z
    b122:	e0 2d       	mov	r30, r0
    b124:	30 97       	sbiw	r30, 0x00	; 0
    b126:	09 f0       	breq	.+2      	; 0xb12a <f_mount+0x3c>
    b128:	10 82       	st	Z, r1
    b12a:	eb 81       	ldd	r30, Y+3	; 0x03
    b12c:	fc 81       	ldd	r31, Y+4	; 0x04
    b12e:	30 97       	sbiw	r30, 0x00	; 0
    b130:	09 f0       	breq	.+2      	; 0xb134 <f_mount+0x46>
    b132:	10 82       	st	Z, r1
    b134:	dc 01       	movw	r26, r24
    b136:	ae 57       	subi	r26, 0x7E	; 126
    b138:	b7 4e       	sbci	r27, 0xE7	; 231
    b13a:	ed 93       	st	X+, r30
    b13c:	fc 93       	st	X, r31
    b13e:	ef 2b       	or	r30, r31
    b140:	71 f0       	breq	.+28     	; 0xb15e <f_mount+0x70>
    b142:	11 30       	cpi	r17, 0x01	; 1
    b144:	61 f4       	brne	.+24     	; 0xb15e <f_mount+0x70>
    b146:	40 e0       	ldi	r20, 0x00	; 0
    b148:	be 01       	movw	r22, r28
    b14a:	6d 5f       	subi	r22, 0xFD	; 253
    b14c:	7f 4f       	sbci	r23, 0xFF	; 255
    b14e:	ce 01       	movw	r24, r28
    b150:	05 96       	adiw	r24, 0x05	; 5
    b152:	0e 94 d0 49 	call	0x93a0	; 0x93a0 <find_volume>
    b156:	05 c0       	rjmp	.+10     	; 0xb162 <f_mount+0x74>
    b158:	8b e0       	ldi	r24, 0x0B	; 11
    b15a:	90 e0       	ldi	r25, 0x00	; 0
    b15c:	02 c0       	rjmp	.+4      	; 0xb162 <f_mount+0x74>
    b15e:	80 e0       	ldi	r24, 0x00	; 0
    b160:	90 e0       	ldi	r25, 0x00	; 0
    b162:	26 96       	adiw	r28, 0x06	; 6
    b164:	e3 e0       	ldi	r30, 0x03	; 3
    b166:	0c 94 5f ec 	jmp	0x1d8be	; 0x1d8be <__epilogue_restores__+0x1e>

0000b16a <f_open>:
    b16a:	2f 92       	push	r2
    b16c:	3f 92       	push	r3
    b16e:	4f 92       	push	r4
    b170:	5f 92       	push	r5
    b172:	6f 92       	push	r6
    b174:	7f 92       	push	r7
    b176:	8f 92       	push	r8
    b178:	9f 92       	push	r9
    b17a:	af 92       	push	r10
    b17c:	bf 92       	push	r11
    b17e:	df 92       	push	r13
    b180:	ef 92       	push	r14
    b182:	ff 92       	push	r15
    b184:	0f 93       	push	r16
    b186:	1f 93       	push	r17
    b188:	cf 93       	push	r28
    b18a:	df 93       	push	r29
    b18c:	cd b7       	in	r28, 0x3d	; 61
    b18e:	de b7       	in	r29, 0x3e	; 62
    b190:	e6 97       	sbiw	r28, 0x36	; 54
    b192:	0f b6       	in	r0, 0x3f	; 63
    b194:	f8 94       	cli
    b196:	de bf       	out	0x3e, r29	; 62
    b198:	0f be       	out	0x3f, r0	; 63
    b19a:	cd bf       	out	0x3d, r28	; 61
    b19c:	7a ab       	std	Y+50, r23	; 0x32
    b19e:	69 ab       	std	Y+49, r22	; 0x31
    b1a0:	00 97       	sbiw	r24, 0x00	; 0
    b1a2:	09 f4       	brne	.+2      	; 0xb1a6 <f_open+0x3c>
    b1a4:	b0 c1       	rjmp	.+864    	; 0xb506 <f_open+0x39c>
    b1a6:	94 2e       	mov	r9, r20
    b1a8:	7c 01       	movw	r14, r24
    b1aa:	24 2f       	mov	r18, r20
    b1ac:	2f 73       	andi	r18, 0x3F	; 63
    b1ae:	d2 2e       	mov	r13, r18
    b1b0:	42 2f       	mov	r20, r18
    b1b2:	be 01       	movw	r22, r28
    b1b4:	61 5d       	subi	r22, 0xD1	; 209
    b1b6:	7f 4f       	sbci	r23, 0xFF	; 255
    b1b8:	ce 01       	movw	r24, r28
    b1ba:	c1 96       	adiw	r24, 0x31	; 49
    b1bc:	0e 94 d0 49 	call	0x93a0	; 0x93a0 <find_volume>
    b1c0:	00 97       	sbiw	r24, 0x00	; 0
    b1c2:	09 f0       	breq	.+2      	; 0xb1c6 <f_open+0x5c>
    b1c4:	9a c1       	rjmp	.+820    	; 0xb4fa <f_open+0x390>
    b1c6:	8f a5       	ldd	r24, Y+47	; 0x2f
    b1c8:	98 a9       	ldd	r25, Y+48	; 0x30
    b1ca:	9a 83       	std	Y+2, r25	; 0x02
    b1cc:	89 83       	std	Y+1, r24	; 0x01
    b1ce:	80 e0       	ldi	r24, 0x00	; 0
    b1d0:	92 e0       	ldi	r25, 0x02	; 2
    b1d2:	0e 94 1e 6e 	call	0xdc3c	; 0xdc3c <ff_memalloc>
    b1d6:	5c 01       	movw	r10, r24
    b1d8:	00 97       	sbiw	r24, 0x00	; 0
    b1da:	09 f4       	brne	.+2      	; 0xb1de <f_open+0x74>
    b1dc:	96 c1       	rjmp	.+812    	; 0xb50a <f_open+0x3a0>
    b1de:	ef a5       	ldd	r30, Y+47	; 0x2f
    b1e0:	f8 a9       	ldd	r31, Y+48	; 0x30
    b1e2:	94 87       	std	Z+12, r25	; 0x0c
    b1e4:	83 87       	std	Z+11, r24	; 0x0b
    b1e6:	69 a9       	ldd	r22, Y+49	; 0x31
    b1e8:	7a a9       	ldd	r23, Y+50	; 0x32
    b1ea:	ce 01       	movw	r24, r28
    b1ec:	01 96       	adiw	r24, 0x01	; 1
    b1ee:	5e dd       	rcall	.-1348   	; 0xacac <follow_path>
    b1f0:	8c 01       	movw	r16, r24
    b1f2:	89 2b       	or	r24, r25
    b1f4:	29 f4       	brne	.+10     	; 0xb200 <f_open+0x96>
    b1f6:	88 a5       	ldd	r24, Y+40	; 0x28
    b1f8:	87 ff       	sbrs	r24, 7
    b1fa:	02 c0       	rjmp	.+4      	; 0xb200 <f_open+0x96>
    b1fc:	06 e0       	ldi	r16, 0x06	; 6
    b1fe:	10 e0       	ldi	r17, 0x00	; 0
    b200:	89 2d       	mov	r24, r9
    b202:	8c 71       	andi	r24, 0x1C	; 28
    b204:	09 f4       	brne	.+2      	; 0xb208 <f_open+0x9e>
    b206:	7e c0       	rjmp	.+252    	; 0xb304 <f_open+0x19a>
    b208:	01 15       	cp	r16, r1
    b20a:	11 05       	cpc	r17, r1
    b20c:	79 f0       	breq	.+30     	; 0xb22c <f_open+0xc2>
    b20e:	04 30       	cpi	r16, 0x04	; 4
    b210:	11 05       	cpc	r17, r1
    b212:	09 f0       	breq	.+2      	; 0xb216 <f_open+0xac>
    b214:	8a c1       	rjmp	.+788    	; 0xb52a <f_open+0x3c0>
    b216:	ce 01       	movw	r24, r28
    b218:	01 96       	adiw	r24, 0x01	; 1
    b21a:	a4 db       	rcall	.-2232   	; 0xa964 <dir_register>
    b21c:	8c 01       	movw	r16, r24
    b21e:	89 2b       	or	r24, r25
    b220:	09 f0       	breq	.+2      	; 0xb224 <f_open+0xba>
    b222:	83 c1       	rjmp	.+774    	; 0xb52a <f_open+0x3c0>
    b224:	8d 2d       	mov	r24, r13
    b226:	88 60       	ori	r24, 0x08	; 8
    b228:	d8 2e       	mov	r13, r24
    b22a:	06 c0       	rjmp	.+12     	; 0xb238 <f_open+0xce>
    b22c:	8d 81       	ldd	r24, Y+5	; 0x05
    b22e:	81 71       	andi	r24, 0x11	; 17
    b230:	09 f0       	breq	.+2      	; 0xb234 <f_open+0xca>
    b232:	79 c1       	rjmp	.+754    	; 0xb526 <f_open+0x3bc>
    b234:	92 fc       	sbrc	r9, 2
    b236:	6e c1       	rjmp	.+732    	; 0xb514 <f_open+0x3aa>
    b238:	d3 fe       	sbrs	r13, 3
    b23a:	74 c0       	rjmp	.+232    	; 0xb324 <f_open+0x1ba>
    b23c:	0e 94 2e 75 	call	0xea5c	; 0xea5c <get_fattime>
    b240:	2b 01       	movw	r4, r22
    b242:	3c 01       	movw	r6, r24
    b244:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b246:	9c 8d       	ldd	r25, Y+28	; 0x1c
    b248:	b3 01       	movw	r22, r6
    b24a:	a2 01       	movw	r20, r4
    b24c:	0e 96       	adiw	r24, 0x0e	; 14
    b24e:	0e 94 8e 47 	call	0x8f1c	; 0x8f1c <st_dword>
    b252:	8b 8d       	ldd	r24, Y+27	; 0x1b
    b254:	9c 8d       	ldd	r25, Y+28	; 0x1c
    b256:	b3 01       	movw	r22, r6
    b258:	a2 01       	movw	r20, r4
    b25a:	46 96       	adiw	r24, 0x16	; 22
    b25c:	0e 94 8e 47 	call	0x8f1c	; 0x8f1c <st_dword>
    b260:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b262:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b264:	80 e2       	ldi	r24, 0x20	; 32
    b266:	83 87       	std	Z+11, r24	; 0x0b
    b268:	0b 8d       	ldd	r16, Y+27	; 0x1b
    b26a:	1c 8d       	ldd	r17, Y+28	; 0x1c
    b26c:	8f a4       	ldd	r8, Y+47	; 0x2f
    b26e:	98 a8       	ldd	r9, Y+48	; 0x30
    b270:	b8 01       	movw	r22, r16
    b272:	d4 01       	movw	r26, r8
    b274:	8c 91       	ld	r24, X
    b276:	0e 94 68 48 	call	0x90d0	; 0x90d0 <ld_clust.isra.1>
    b27a:	2b 01       	movw	r4, r22
    b27c:	3c 01       	movw	r6, r24
    b27e:	f8 01       	movw	r30, r16
    b280:	12 8e       	std	Z+26, r1	; 0x1a
    b282:	13 8e       	std	Z+27, r1	; 0x1b
    b284:	d4 01       	movw	r26, r8
    b286:	8c 91       	ld	r24, X
    b288:	83 30       	cpi	r24, 0x03	; 3
    b28a:	11 f4       	brne	.+4      	; 0xb290 <f_open+0x126>
    b28c:	14 8a       	std	Z+20, r1	; 0x14
    b28e:	15 8a       	std	Z+21, r1	; 0x15
    b290:	eb 8d       	ldd	r30, Y+27	; 0x1b
    b292:	fc 8d       	ldd	r31, Y+28	; 0x1c
    b294:	14 8e       	std	Z+28, r1	; 0x1c
    b296:	15 8e       	std	Z+29, r1	; 0x1d
    b298:	16 8e       	std	Z+30, r1	; 0x1e
    b29a:	17 8e       	std	Z+31, r1	; 0x1f
    b29c:	81 e0       	ldi	r24, 0x01	; 1
    b29e:	f4 01       	movw	r30, r8
    b2a0:	83 83       	std	Z+3, r24	; 0x03
    b2a2:	41 14       	cp	r4, r1
    b2a4:	51 04       	cpc	r5, r1
    b2a6:	61 04       	cpc	r6, r1
    b2a8:	71 04       	cpc	r7, r1
    b2aa:	c9 f1       	breq	.+114    	; 0xb31e <f_open+0x1b4>
    b2ac:	81 a9       	ldd	r24, Z+49	; 0x31
    b2ae:	92 a9       	ldd	r25, Z+50	; 0x32
    b2b0:	a3 a9       	ldd	r26, Z+51	; 0x33
    b2b2:	b4 a9       	ldd	r27, Z+52	; 0x34
    b2b4:	8b ab       	std	Y+51, r24	; 0x33
    b2b6:	9c ab       	std	Y+52, r25	; 0x34
    b2b8:	ad ab       	std	Y+53, r26	; 0x35
    b2ba:	be ab       	std	Y+54, r27	; 0x36
    b2bc:	00 e0       	ldi	r16, 0x00	; 0
    b2be:	10 e0       	ldi	r17, 0x00	; 0
    b2c0:	98 01       	movw	r18, r16
    b2c2:	b3 01       	movw	r22, r6
    b2c4:	a2 01       	movw	r20, r4
    b2c6:	ce 01       	movw	r24, r28
    b2c8:	01 96       	adiw	r24, 0x01	; 1
    b2ca:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <remove_chain>
    b2ce:	8c 01       	movw	r16, r24
    b2d0:	89 2b       	or	r24, r25
    b2d2:	09 f0       	breq	.+2      	; 0xb2d6 <f_open+0x16c>
    b2d4:	2a c1       	rjmp	.+596    	; 0xb52a <f_open+0x3c0>
    b2d6:	4b a9       	ldd	r20, Y+51	; 0x33
    b2d8:	5c a9       	ldd	r21, Y+52	; 0x34
    b2da:	6d a9       	ldd	r22, Y+53	; 0x35
    b2dc:	7e a9       	ldd	r23, Y+54	; 0x36
    b2de:	8f a5       	ldd	r24, Y+47	; 0x2f
    b2e0:	98 a9       	ldd	r25, Y+48	; 0x30
    b2e2:	0e 94 50 49 	call	0x92a0	; 0x92a0 <move_window>
    b2e6:	8c 01       	movw	r16, r24
    b2e8:	ef a5       	ldd	r30, Y+47	; 0x2f
    b2ea:	f8 a9       	ldd	r31, Y+48	; 0x30
    b2ec:	b1 e0       	ldi	r27, 0x01	; 1
    b2ee:	4b 1a       	sub	r4, r27
    b2f0:	51 08       	sbc	r5, r1
    b2f2:	61 08       	sbc	r6, r1
    b2f4:	71 08       	sbc	r7, r1
    b2f6:	45 86       	std	Z+13, r4	; 0x0d
    b2f8:	56 86       	std	Z+14, r5	; 0x0e
    b2fa:	67 86       	std	Z+15, r6	; 0x0f
    b2fc:	70 8a       	std	Z+16, r7	; 0x10
    b2fe:	89 2b       	or	r24, r25
    b300:	61 f0       	breq	.+24     	; 0xb31a <f_open+0x1b0>
    b302:	13 c1       	rjmp	.+550    	; 0xb52a <f_open+0x3c0>
    b304:	01 15       	cp	r16, r1
    b306:	11 05       	cpc	r17, r1
    b308:	09 f0       	breq	.+2      	; 0xb30c <f_open+0x1a2>
    b30a:	0f c1       	rjmp	.+542    	; 0xb52a <f_open+0x3c0>
    b30c:	8d 81       	ldd	r24, Y+5	; 0x05
    b30e:	84 fd       	sbrc	r24, 4
    b310:	07 c1       	rjmp	.+526    	; 0xb520 <f_open+0x3b6>
    b312:	91 fe       	sbrs	r9, 1
    b314:	02 c0       	rjmp	.+4      	; 0xb31a <f_open+0x1b0>
    b316:	80 fd       	sbrc	r24, 0
    b318:	06 c1       	rjmp	.+524    	; 0xb526 <f_open+0x3bc>
    b31a:	d3 fe       	sbrs	r13, 3
    b31c:	03 c0       	rjmp	.+6      	; 0xb324 <f_open+0x1ba>
    b31e:	ed 2d       	mov	r30, r13
    b320:	e0 64       	ori	r30, 0x40	; 64
    b322:	de 2e       	mov	r13, r30
    b324:	0f a5       	ldd	r16, Y+47	; 0x2f
    b326:	18 a9       	ldd	r17, Y+48	; 0x30
    b328:	f8 01       	movw	r30, r16
    b32a:	81 a9       	ldd	r24, Z+49	; 0x31
    b32c:	92 a9       	ldd	r25, Z+50	; 0x32
    b32e:	a3 a9       	ldd	r26, Z+51	; 0x33
    b330:	b4 a9       	ldd	r27, Z+52	; 0x34
    b332:	f7 01       	movw	r30, r14
    b334:	84 8f       	std	Z+28, r24	; 0x1c
    b336:	95 8f       	std	Z+29, r25	; 0x1d
    b338:	a6 8f       	std	Z+30, r26	; 0x1e
    b33a:	b7 8f       	std	Z+31, r27	; 0x1f
    b33c:	8b 8c       	ldd	r8, Y+27	; 0x1b
    b33e:	9c 8c       	ldd	r9, Y+28	; 0x1c
    b340:	91 a2       	std	Z+33, r9	; 0x21
    b342:	80 a2       	std	Z+32, r8	; 0x20
    b344:	b4 01       	movw	r22, r8
    b346:	d8 01       	movw	r26, r16
    b348:	8c 91       	ld	r24, X
    b34a:	0e 94 68 48 	call	0x90d0	; 0x90d0 <ld_clust.isra.1>
    b34e:	f7 01       	movw	r30, r14
    b350:	66 83       	std	Z+6, r22	; 0x06
    b352:	77 83       	std	Z+7, r23	; 0x07
    b354:	80 87       	std	Z+8, r24	; 0x08
    b356:	91 87       	std	Z+9, r25	; 0x09
    b358:	c4 01       	movw	r24, r8
    b35a:	4c 96       	adiw	r24, 0x1c	; 28
    b35c:	0e 94 79 47 	call	0x8ef2	; 0x8ef2 <ld_dword>
    b360:	d7 01       	movw	r26, r14
    b362:	1a 96       	adiw	r26, 0x0a	; 10
    b364:	6d 93       	st	X+, r22
    b366:	7d 93       	st	X+, r23
    b368:	8d 93       	st	X+, r24
    b36a:	9c 93       	st	X, r25
    b36c:	1d 97       	sbiw	r26, 0x0d	; 13
    b36e:	93 96       	adiw	r26, 0x23	; 35
    b370:	1c 92       	st	X, r1
    b372:	1e 92       	st	-X, r1
    b374:	92 97       	sbiw	r26, 0x22	; 34
    b376:	11 96       	adiw	r26, 0x01	; 1
    b378:	1c 93       	st	X, r17
    b37a:	0e 93       	st	-X, r16
    b37c:	f8 01       	movw	r30, r16
    b37e:	85 81       	ldd	r24, Z+5	; 0x05
    b380:	96 81       	ldd	r25, Z+6	; 0x06
    b382:	13 96       	adiw	r26, 0x03	; 3
    b384:	9c 93       	st	X, r25
    b386:	8e 93       	st	-X, r24
    b388:	12 97       	sbiw	r26, 0x02	; 2
    b38a:	1e 96       	adiw	r26, 0x0e	; 14
    b38c:	dc 92       	st	X, r13
    b38e:	1e 97       	sbiw	r26, 0x0e	; 14
    b390:	1f 96       	adiw	r26, 0x0f	; 15
    b392:	1c 92       	st	X, r1
    b394:	1f 97       	sbiw	r26, 0x0f	; 15
    b396:	58 96       	adiw	r26, 0x18	; 24
    b398:	1d 92       	st	X+, r1
    b39a:	1d 92       	st	X+, r1
    b39c:	1d 92       	st	X+, r1
    b39e:	1c 92       	st	X, r1
    b3a0:	5b 97       	sbiw	r26, 0x1b	; 27
    b3a2:	f7 01       	movw	r30, r14
    b3a4:	10 8a       	std	Z+16, r1	; 0x10
    b3a6:	11 8a       	std	Z+17, r1	; 0x11
    b3a8:	12 8a       	std	Z+18, r1	; 0x12
    b3aa:	13 8a       	std	Z+19, r1	; 0x13
    b3ac:	c7 01       	movw	r24, r14
    b3ae:	84 96       	adiw	r24, 0x24	; 36
    b3b0:	9c ab       	std	Y+52, r25	; 0x34
    b3b2:	8b ab       	std	Y+51, r24	; 0x33
    b3b4:	40 e0       	ldi	r20, 0x00	; 0
    b3b6:	52 e0       	ldi	r21, 0x02	; 2
    b3b8:	60 e0       	ldi	r22, 0x00	; 0
    b3ba:	70 e0       	ldi	r23, 0x00	; 0
    b3bc:	0e 94 94 47 	call	0x8f28	; 0x8f28 <mem_set>
    b3c0:	d5 fc       	sbrc	r13, 5
    b3c2:	03 c0       	rjmp	.+6      	; 0xb3ca <f_open+0x260>
    b3c4:	00 e0       	ldi	r16, 0x00	; 0
    b3c6:	10 e0       	ldi	r17, 0x00	; 0
    b3c8:	91 c0       	rjmp	.+290    	; 0xb4ec <f_open+0x382>
    b3ca:	d7 01       	movw	r26, r14
    b3cc:	1a 96       	adiw	r26, 0x0a	; 10
    b3ce:	2d 90       	ld	r2, X+
    b3d0:	3d 90       	ld	r3, X+
    b3d2:	4d 90       	ld	r4, X+
    b3d4:	5c 90       	ld	r5, X
    b3d6:	1d 97       	sbiw	r26, 0x0d	; 13
    b3d8:	21 14       	cp	r2, r1
    b3da:	31 04       	cpc	r3, r1
    b3dc:	41 04       	cpc	r4, r1
    b3de:	51 04       	cpc	r5, r1
    b3e0:	89 f3       	breq	.-30     	; 0xb3c4 <f_open+0x25a>
    b3e2:	f7 01       	movw	r30, r14
    b3e4:	20 8a       	std	Z+16, r2	; 0x10
    b3e6:	31 8a       	std	Z+17, r3	; 0x11
    b3e8:	42 8a       	std	Z+18, r4	; 0x12
    b3ea:	53 8a       	std	Z+19, r5	; 0x13
    b3ec:	ef a5       	ldd	r30, Y+47	; 0x2f
    b3ee:	f8 a9       	ldd	r31, Y+48	; 0x30
    b3f0:	81 85       	ldd	r24, Z+9	; 0x09
    b3f2:	92 85       	ldd	r25, Z+10	; 0x0a
    b3f4:	a0 e0       	ldi	r26, 0x00	; 0
    b3f6:	b0 e0       	ldi	r27, 0x00	; 0
    b3f8:	3c 01       	movw	r6, r24
    b3fa:	4d 01       	movw	r8, r26
    b3fc:	59 e0       	ldi	r21, 0x09	; 9
    b3fe:	66 0c       	add	r6, r6
    b400:	77 1c       	adc	r7, r7
    b402:	88 1c       	adc	r8, r8
    b404:	99 1c       	adc	r9, r9
    b406:	5a 95       	dec	r21
    b408:	d1 f7       	brne	.-12     	; 0xb3fe <f_open+0x294>
    b40a:	d7 01       	movw	r26, r14
    b40c:	16 96       	adiw	r26, 0x06	; 6
    b40e:	4d 91       	ld	r20, X+
    b410:	5d 91       	ld	r21, X+
    b412:	6d 91       	ld	r22, X+
    b414:	7c 91       	ld	r23, X
    b416:	19 97       	sbiw	r26, 0x09	; 9
    b418:	62 14       	cp	r6, r2
    b41a:	73 04       	cpc	r7, r3
    b41c:	84 04       	cpc	r8, r4
    b41e:	95 04       	cpc	r9, r5
    b420:	f0 f4       	brcc	.+60     	; 0xb45e <f_open+0x2f4>
    b422:	f7 01       	movw	r30, r14
    b424:	80 81       	ld	r24, Z
    b426:	91 81       	ldd	r25, Z+1	; 0x01
    b428:	0e 94 76 4d 	call	0x9aec	; 0x9aec <get_fat.isra.7>
    b42c:	ab 01       	movw	r20, r22
    b42e:	bc 01       	movw	r22, r24
    b430:	d2 01       	movw	r26, r4
    b432:	c1 01       	movw	r24, r2
    b434:	86 19       	sub	r24, r6
    b436:	97 09       	sbc	r25, r7
    b438:	a8 09       	sbc	r26, r8
    b43a:	b9 09       	sbc	r27, r9
    b43c:	1c 01       	movw	r2, r24
    b43e:	2d 01       	movw	r4, r26
    b440:	42 30       	cpi	r20, 0x02	; 2
    b442:	51 05       	cpc	r21, r1
    b444:	61 05       	cpc	r22, r1
    b446:	71 05       	cpc	r23, r1
    b448:	08 f4       	brcc	.+2      	; 0xb44c <f_open+0x2e2>
    b44a:	67 c0       	rjmp	.+206    	; 0xb51a <f_open+0x3b0>
    b44c:	4f 3f       	cpi	r20, 0xFF	; 255
    b44e:	ff ef       	ldi	r31, 0xFF	; 255
    b450:	5f 07       	cpc	r21, r31
    b452:	6f 07       	cpc	r22, r31
    b454:	7f 07       	cpc	r23, r31
    b456:	01 f7       	brne	.-64     	; 0xb418 <f_open+0x2ae>
    b458:	01 e0       	ldi	r16, 0x01	; 1
    b45a:	10 e0       	ldi	r17, 0x00	; 0
    b45c:	02 c0       	rjmp	.+4      	; 0xb462 <f_open+0x2f8>
    b45e:	00 e0       	ldi	r16, 0x00	; 0
    b460:	10 e0       	ldi	r17, 0x00	; 0
    b462:	d7 01       	movw	r26, r14
    b464:	54 96       	adiw	r26, 0x14	; 20
    b466:	4d 93       	st	X+, r20
    b468:	5d 93       	st	X+, r21
    b46a:	6d 93       	st	X+, r22
    b46c:	7c 93       	st	X, r23
    b46e:	57 97       	sbiw	r26, 0x17	; 23
    b470:	01 15       	cp	r16, r1
    b472:	11 05       	cpc	r17, r1
    b474:	d9 f5       	brne	.+118    	; 0xb4ec <f_open+0x382>
    b476:	d2 01       	movw	r26, r4
    b478:	c1 01       	movw	r24, r2
    b47a:	91 70       	andi	r25, 0x01	; 1
    b47c:	aa 27       	eor	r26, r26
    b47e:	bb 27       	eor	r27, r27
    b480:	89 2b       	or	r24, r25
    b482:	8a 2b       	or	r24, r26
    b484:	8b 2b       	or	r24, r27
    b486:	09 f4       	brne	.+2      	; 0xb48a <f_open+0x320>
    b488:	9d cf       	rjmp	.-198    	; 0xb3c4 <f_open+0x25a>
    b48a:	6f a4       	ldd	r6, Y+47	; 0x2f
    b48c:	78 a8       	ldd	r7, Y+48	; 0x30
    b48e:	c3 01       	movw	r24, r6
    b490:	0e 94 9d 47 	call	0x8f3a	; 0x8f3a <clust2sect>
    b494:	61 15       	cp	r22, r1
    b496:	71 05       	cpc	r23, r1
    b498:	81 05       	cpc	r24, r1
    b49a:	91 05       	cpc	r25, r1
    b49c:	29 f1       	breq	.+74     	; 0xb4e8 <f_open+0x37e>
    b49e:	92 01       	movw	r18, r4
    b4a0:	81 01       	movw	r16, r2
    b4a2:	49 e0       	ldi	r20, 0x09	; 9
    b4a4:	36 95       	lsr	r19
    b4a6:	27 95       	ror	r18
    b4a8:	17 95       	ror	r17
    b4aa:	07 95       	ror	r16
    b4ac:	4a 95       	dec	r20
    b4ae:	d1 f7       	brne	.-12     	; 0xb4a4 <f_open+0x33a>
    b4b0:	a9 01       	movw	r20, r18
    b4b2:	98 01       	movw	r18, r16
    b4b4:	26 0f       	add	r18, r22
    b4b6:	37 1f       	adc	r19, r23
    b4b8:	48 1f       	adc	r20, r24
    b4ba:	59 1f       	adc	r21, r25
    b4bc:	f7 01       	movw	r30, r14
    b4be:	20 8f       	std	Z+24, r18	; 0x18
    b4c0:	31 8f       	std	Z+25, r19	; 0x19
    b4c2:	42 8f       	std	Z+26, r20	; 0x1a
    b4c4:	53 8f       	std	Z+27, r21	; 0x1b
    b4c6:	01 e0       	ldi	r16, 0x01	; 1
    b4c8:	10 e0       	ldi	r17, 0x00	; 0
    b4ca:	6b a9       	ldd	r22, Y+51	; 0x33
    b4cc:	7c a9       	ldd	r23, Y+52	; 0x34
    b4ce:	d3 01       	movw	r26, r6
    b4d0:	11 96       	adiw	r26, 0x01	; 1
    b4d2:	8c 91       	ld	r24, X
    b4d4:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <disk_read>
    b4d8:	31 e0       	ldi	r19, 0x01	; 1
    b4da:	20 e0       	ldi	r18, 0x00	; 0
    b4dc:	89 2b       	or	r24, r25
    b4de:	09 f4       	brne	.+2      	; 0xb4e2 <f_open+0x378>
    b4e0:	30 e0       	ldi	r19, 0x00	; 0
    b4e2:	03 2f       	mov	r16, r19
    b4e4:	12 2f       	mov	r17, r18
    b4e6:	02 c0       	rjmp	.+4      	; 0xb4ec <f_open+0x382>
    b4e8:	02 e0       	ldi	r16, 0x02	; 2
    b4ea:	10 e0       	ldi	r17, 0x00	; 0
    b4ec:	c5 01       	movw	r24, r10
    b4ee:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <ff_memfree>
    b4f2:	01 15       	cp	r16, r1
    b4f4:	11 05       	cpc	r17, r1
    b4f6:	59 f0       	breq	.+22     	; 0xb50e <f_open+0x3a4>
    b4f8:	01 c0       	rjmp	.+2      	; 0xb4fc <f_open+0x392>
    b4fa:	8c 01       	movw	r16, r24
    b4fc:	f7 01       	movw	r30, r14
    b4fe:	11 82       	std	Z+1, r1	; 0x01
    b500:	10 82       	st	Z, r1
    b502:	c8 01       	movw	r24, r16
    b504:	16 c0       	rjmp	.+44     	; 0xb532 <f_open+0x3c8>
    b506:	89 e0       	ldi	r24, 0x09	; 9
    b508:	03 c0       	rjmp	.+6      	; 0xb510 <f_open+0x3a6>
    b50a:	81 e1       	ldi	r24, 0x11	; 17
    b50c:	01 c0       	rjmp	.+2      	; 0xb510 <f_open+0x3a6>
    b50e:	80 e0       	ldi	r24, 0x00	; 0
    b510:	90 e0       	ldi	r25, 0x00	; 0
    b512:	0f c0       	rjmp	.+30     	; 0xb532 <f_open+0x3c8>
    b514:	08 e0       	ldi	r16, 0x08	; 8
    b516:	10 e0       	ldi	r17, 0x00	; 0
    b518:	08 c0       	rjmp	.+16     	; 0xb52a <f_open+0x3c0>
    b51a:	02 e0       	ldi	r16, 0x02	; 2
    b51c:	10 e0       	ldi	r17, 0x00	; 0
    b51e:	a1 cf       	rjmp	.-190    	; 0xb462 <f_open+0x2f8>
    b520:	04 e0       	ldi	r16, 0x04	; 4
    b522:	10 e0       	ldi	r17, 0x00	; 0
    b524:	02 c0       	rjmp	.+4      	; 0xb52a <f_open+0x3c0>
    b526:	07 e0       	ldi	r16, 0x07	; 7
    b528:	10 e0       	ldi	r17, 0x00	; 0
    b52a:	c5 01       	movw	r24, r10
    b52c:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <ff_memfree>
    b530:	e5 cf       	rjmp	.-54     	; 0xb4fc <f_open+0x392>
    b532:	e6 96       	adiw	r28, 0x36	; 54
    b534:	0f b6       	in	r0, 0x3f	; 63
    b536:	f8 94       	cli
    b538:	de bf       	out	0x3e, r29	; 62
    b53a:	0f be       	out	0x3f, r0	; 63
    b53c:	cd bf       	out	0x3d, r28	; 61
    b53e:	df 91       	pop	r29
    b540:	cf 91       	pop	r28
    b542:	1f 91       	pop	r17
    b544:	0f 91       	pop	r16
    b546:	ff 90       	pop	r15
    b548:	ef 90       	pop	r14
    b54a:	df 90       	pop	r13
    b54c:	bf 90       	pop	r11
    b54e:	af 90       	pop	r10
    b550:	9f 90       	pop	r9
    b552:	8f 90       	pop	r8
    b554:	7f 90       	pop	r7
    b556:	6f 90       	pop	r6
    b558:	5f 90       	pop	r5
    b55a:	4f 90       	pop	r4
    b55c:	3f 90       	pop	r3
    b55e:	2f 90       	pop	r2
    b560:	08 95       	ret

0000b562 <f_read>:
    b562:	a6 e0       	ldi	r26, 0x06	; 6
    b564:	b0 e0       	ldi	r27, 0x00	; 0
    b566:	e7 eb       	ldi	r30, 0xB7	; 183
    b568:	fa e5       	ldi	r31, 0x5A	; 90
    b56a:	0c 94 34 ec 	jmp	0x1d868	; 0x1d868 <__prologue_saves__>
    b56e:	7c 01       	movw	r14, r24
    b570:	4b 01       	movw	r8, r22
    b572:	5a 01       	movw	r10, r20
    b574:	3e 83       	std	Y+6, r19	; 0x06
    b576:	2d 83       	std	Y+5, r18	; 0x05
    b578:	f9 01       	movw	r30, r18
    b57a:	11 82       	std	Z+1, r1	; 0x01
    b57c:	10 82       	st	Z, r1
    b57e:	be 01       	movw	r22, r28
    b580:	6f 5f       	subi	r22, 0xFF	; 255
    b582:	7f 4f       	sbci	r23, 0xFF	; 255
    b584:	0e 94 30 48 	call	0x9060	; 0x9060 <validate>
    b588:	00 97       	sbiw	r24, 0x00	; 0
    b58a:	09 f0       	breq	.+2      	; 0xb58e <f_read+0x2c>
    b58c:	31 c1       	rjmp	.+610    	; 0xb7f0 <f_read+0x28e>
    b58e:	f7 01       	movw	r30, r14
    b590:	87 85       	ldd	r24, Z+15	; 0x0f
    b592:	90 e0       	ldi	r25, 0x00	; 0
    b594:	00 97       	sbiw	r24, 0x00	; 0
    b596:	09 f0       	breq	.+2      	; 0xb59a <f_read+0x38>
    b598:	2b c1       	rjmp	.+598    	; 0xb7f0 <f_read+0x28e>
    b59a:	86 85       	ldd	r24, Z+14	; 0x0e
    b59c:	80 ff       	sbrs	r24, 0
    b59e:	26 c1       	rjmp	.+588    	; 0xb7ec <f_read+0x28a>
    b5a0:	82 85       	ldd	r24, Z+10	; 0x0a
    b5a2:	93 85       	ldd	r25, Z+11	; 0x0b
    b5a4:	a4 85       	ldd	r26, Z+12	; 0x0c
    b5a6:	b5 85       	ldd	r27, Z+13	; 0x0d
    b5a8:	40 89       	ldd	r20, Z+16	; 0x10
    b5aa:	51 89       	ldd	r21, Z+17	; 0x11
    b5ac:	62 89       	ldd	r22, Z+18	; 0x12
    b5ae:	73 89       	ldd	r23, Z+19	; 0x13
    b5b0:	84 1b       	sub	r24, r20
    b5b2:	95 0b       	sbc	r25, r21
    b5b4:	a6 0b       	sbc	r26, r22
    b5b6:	b7 0b       	sbc	r27, r23
    b5b8:	a5 01       	movw	r20, r10
    b5ba:	60 e0       	ldi	r22, 0x00	; 0
    b5bc:	70 e0       	ldi	r23, 0x00	; 0
    b5be:	84 17       	cp	r24, r20
    b5c0:	95 07       	cpc	r25, r21
    b5c2:	a6 07       	cpc	r26, r22
    b5c4:	b7 07       	cpc	r27, r23
    b5c6:	08 f4       	brcc	.+2      	; 0xb5ca <f_read+0x68>
    b5c8:	5c 01       	movw	r10, r24
    b5ca:	17 01       	movw	r2, r14
    b5cc:	f4 e2       	ldi	r31, 0x24	; 36
    b5ce:	2f 0e       	add	r2, r31
    b5d0:	31 1c       	adc	r3, r1
    b5d2:	a1 14       	cp	r10, r1
    b5d4:	b1 04       	cpc	r11, r1
    b5d6:	09 f4       	brne	.+2      	; 0xb5da <f_read+0x78>
    b5d8:	07 c1       	rjmp	.+526    	; 0xb7e8 <f_read+0x286>
    b5da:	f7 01       	movw	r30, r14
    b5dc:	40 89       	ldd	r20, Z+16	; 0x10
    b5de:	51 89       	ldd	r21, Z+17	; 0x11
    b5e0:	62 89       	ldd	r22, Z+18	; 0x12
    b5e2:	73 89       	ldd	r23, Z+19	; 0x13
    b5e4:	db 01       	movw	r26, r22
    b5e6:	ca 01       	movw	r24, r20
    b5e8:	91 70       	andi	r25, 0x01	; 1
    b5ea:	aa 27       	eor	r26, r26
    b5ec:	bb 27       	eor	r27, r27
    b5ee:	89 2b       	or	r24, r25
    b5f0:	8a 2b       	or	r24, r26
    b5f2:	8b 2b       	or	r24, r27
    b5f4:	09 f0       	breq	.+2      	; 0xb5f8 <f_read+0x96>
    b5f6:	cb c0       	rjmp	.+406    	; 0xb78e <f_read+0x22c>
    b5f8:	e9 81       	ldd	r30, Y+1	; 0x01
    b5fa:	fa 81       	ldd	r31, Y+2	; 0x02
    b5fc:	01 85       	ldd	r16, Z+9	; 0x09
    b5fe:	12 85       	ldd	r17, Z+10	; 0x0a
    b600:	01 50       	subi	r16, 0x01	; 1
    b602:	11 09       	sbc	r17, r1
    b604:	db 01       	movw	r26, r22
    b606:	ca 01       	movw	r24, r20
    b608:	e9 e0       	ldi	r30, 0x09	; 9
    b60a:	b6 95       	lsr	r27
    b60c:	a7 95       	ror	r26
    b60e:	97 95       	ror	r25
    b610:	87 95       	ror	r24
    b612:	ea 95       	dec	r30
    b614:	d1 f7       	brne	.-12     	; 0xb60a <f_read+0xa8>
    b616:	08 23       	and	r16, r24
    b618:	19 23       	and	r17, r25
    b61a:	01 15       	cp	r16, r1
    b61c:	11 05       	cpc	r17, r1
    b61e:	91 f5       	brne	.+100    	; 0xb684 <f_read+0x122>
    b620:	f7 01       	movw	r30, r14
    b622:	41 15       	cp	r20, r1
    b624:	51 05       	cpc	r21, r1
    b626:	61 05       	cpc	r22, r1
    b628:	71 05       	cpc	r23, r1
    b62a:	29 f4       	brne	.+10     	; 0xb636 <f_read+0xd4>
    b62c:	66 81       	ldd	r22, Z+6	; 0x06
    b62e:	77 81       	ldd	r23, Z+7	; 0x07
    b630:	80 85       	ldd	r24, Z+8	; 0x08
    b632:	91 85       	ldd	r25, Z+9	; 0x09
    b634:	11 c0       	rjmp	.+34     	; 0xb658 <f_read+0xf6>
    b636:	82 a1       	ldd	r24, Z+34	; 0x22
    b638:	93 a1       	ldd	r25, Z+35	; 0x23
    b63a:	89 2b       	or	r24, r25
    b63c:	21 f0       	breq	.+8      	; 0xb646 <f_read+0xe4>
    b63e:	c7 01       	movw	r24, r14
    b640:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <clmt_clust>
    b644:	09 c0       	rjmp	.+18     	; 0xb658 <f_read+0xf6>
    b646:	f7 01       	movw	r30, r14
    b648:	44 89       	ldd	r20, Z+20	; 0x14
    b64a:	55 89       	ldd	r21, Z+21	; 0x15
    b64c:	66 89       	ldd	r22, Z+22	; 0x16
    b64e:	77 89       	ldd	r23, Z+23	; 0x17
    b650:	80 81       	ld	r24, Z
    b652:	91 81       	ldd	r25, Z+1	; 0x01
    b654:	0e 94 76 4d 	call	0x9aec	; 0x9aec <get_fat.isra.7>
    b658:	62 30       	cpi	r22, 0x02	; 2
    b65a:	71 05       	cpc	r23, r1
    b65c:	81 05       	cpc	r24, r1
    b65e:	91 05       	cpc	r25, r1
    b660:	10 f4       	brcc	.+4      	; 0xb666 <f_read+0x104>
    b662:	82 e0       	ldi	r24, 0x02	; 2
    b664:	07 c0       	rjmp	.+14     	; 0xb674 <f_read+0x112>
    b666:	6f 3f       	cpi	r22, 0xFF	; 255
    b668:	ff ef       	ldi	r31, 0xFF	; 255
    b66a:	7f 07       	cpc	r23, r31
    b66c:	8f 07       	cpc	r24, r31
    b66e:	9f 07       	cpc	r25, r31
    b670:	21 f4       	brne	.+8      	; 0xb67a <f_read+0x118>
    b672:	81 e0       	ldi	r24, 0x01	; 1
    b674:	f7 01       	movw	r30, r14
    b676:	87 87       	std	Z+15, r24	; 0x0f
    b678:	ba c0       	rjmp	.+372    	; 0xb7ee <f_read+0x28c>
    b67a:	f7 01       	movw	r30, r14
    b67c:	64 8b       	std	Z+20, r22	; 0x14
    b67e:	75 8b       	std	Z+21, r23	; 0x15
    b680:	86 8b       	std	Z+22, r24	; 0x16
    b682:	97 8b       	std	Z+23, r25	; 0x17
    b684:	89 81       	ldd	r24, Y+1	; 0x01
    b686:	9a 81       	ldd	r25, Y+2	; 0x02
    b688:	9c 83       	std	Y+4, r25	; 0x04
    b68a:	8b 83       	std	Y+3, r24	; 0x03
    b68c:	f7 01       	movw	r30, r14
    b68e:	44 89       	ldd	r20, Z+20	; 0x14
    b690:	55 89       	ldd	r21, Z+21	; 0x15
    b692:	66 89       	ldd	r22, Z+22	; 0x16
    b694:	77 89       	ldd	r23, Z+23	; 0x17
    b696:	0e 94 9d 47 	call	0x8f3a	; 0x8f3a <clust2sect>
    b69a:	61 15       	cp	r22, r1
    b69c:	71 05       	cpc	r23, r1
    b69e:	81 05       	cpc	r24, r1
    b6a0:	91 05       	cpc	r25, r1
    b6a2:	f9 f2       	breq	.-66     	; 0xb662 <f_read+0x100>
    b6a4:	2b 01       	movw	r4, r22
    b6a6:	3c 01       	movw	r6, r24
    b6a8:	40 0e       	add	r4, r16
    b6aa:	51 1e       	adc	r5, r17
    b6ac:	61 1c       	adc	r6, r1
    b6ae:	71 1c       	adc	r7, r1
    b6b0:	65 01       	movw	r12, r10
    b6b2:	cd 2c       	mov	r12, r13
    b6b4:	dd 24       	eor	r13, r13
    b6b6:	c6 94       	lsr	r12
    b6b8:	c1 14       	cp	r12, r1
    b6ba:	d1 04       	cpc	r13, r1
    b6bc:	d1 f1       	breq	.+116    	; 0xb732 <f_read+0x1d0>
    b6be:	eb 81       	ldd	r30, Y+3	; 0x03
    b6c0:	fc 81       	ldd	r31, Y+4	; 0x04
    b6c2:	81 85       	ldd	r24, Z+9	; 0x09
    b6c4:	92 85       	ldd	r25, Z+10	; 0x0a
    b6c6:	98 01       	movw	r18, r16
    b6c8:	2c 0d       	add	r18, r12
    b6ca:	3d 1d       	adc	r19, r13
    b6cc:	82 17       	cp	r24, r18
    b6ce:	93 07       	cpc	r25, r19
    b6d0:	18 f4       	brcc	.+6      	; 0xb6d8 <f_read+0x176>
    b6d2:	6c 01       	movw	r12, r24
    b6d4:	c0 1a       	sub	r12, r16
    b6d6:	d1 0a       	sbc	r13, r17
    b6d8:	86 01       	movw	r16, r12
    b6da:	a3 01       	movw	r20, r6
    b6dc:	92 01       	movw	r18, r4
    b6de:	b4 01       	movw	r22, r8
    b6e0:	eb 81       	ldd	r30, Y+3	; 0x03
    b6e2:	fc 81       	ldd	r31, Y+4	; 0x04
    b6e4:	81 81       	ldd	r24, Z+1	; 0x01
    b6e6:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <disk_read>
    b6ea:	89 2b       	or	r24, r25
    b6ec:	11 f6       	brne	.-124    	; 0xb672 <f_read+0x110>
    b6ee:	f7 01       	movw	r30, r14
    b6f0:	86 85       	ldd	r24, Z+14	; 0x0e
    b6f2:	87 ff       	sbrs	r24, 7
    b6f4:	1a c0       	rjmp	.+52     	; 0xb72a <f_read+0x1c8>
    b6f6:	80 8d       	ldd	r24, Z+24	; 0x18
    b6f8:	91 8d       	ldd	r25, Z+25	; 0x19
    b6fa:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b6fc:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b6fe:	84 19       	sub	r24, r4
    b700:	95 09       	sbc	r25, r5
    b702:	a6 09       	sbc	r26, r6
    b704:	b7 09       	sbc	r27, r7
    b706:	a6 01       	movw	r20, r12
    b708:	60 e0       	ldi	r22, 0x00	; 0
    b70a:	70 e0       	ldi	r23, 0x00	; 0
    b70c:	84 17       	cp	r24, r20
    b70e:	95 07       	cpc	r25, r21
    b710:	a6 07       	cpc	r26, r22
    b712:	b7 07       	cpc	r27, r23
    b714:	50 f4       	brcc	.+20     	; 0xb72a <f_read+0x1c8>
    b716:	98 2f       	mov	r25, r24
    b718:	88 27       	eor	r24, r24
    b71a:	99 0f       	add	r25, r25
    b71c:	40 e0       	ldi	r20, 0x00	; 0
    b71e:	52 e0       	ldi	r21, 0x02	; 2
    b720:	b1 01       	movw	r22, r2
    b722:	88 0d       	add	r24, r8
    b724:	99 1d       	adc	r25, r9
    b726:	0e 94 5d 48 	call	0x90ba	; 0x90ba <mem_cpy.part.0>
    b72a:	dc 2c       	mov	r13, r12
    b72c:	cc 24       	eor	r12, r12
    b72e:	dd 0c       	add	r13, r13
    b730:	41 c0       	rjmp	.+130    	; 0xb7b4 <f_read+0x252>
    b732:	f7 01       	movw	r30, r14
    b734:	20 8d       	ldd	r18, Z+24	; 0x18
    b736:	31 8d       	ldd	r19, Z+25	; 0x19
    b738:	42 8d       	ldd	r20, Z+26	; 0x1a
    b73a:	53 8d       	ldd	r21, Z+27	; 0x1b
    b73c:	42 16       	cp	r4, r18
    b73e:	53 06       	cpc	r5, r19
    b740:	64 06       	cpc	r6, r20
    b742:	75 06       	cpc	r7, r21
    b744:	f9 f0       	breq	.+62     	; 0xb784 <f_read+0x222>
    b746:	86 85       	ldd	r24, Z+14	; 0x0e
    b748:	87 ff       	sbrs	r24, 7
    b74a:	0f c0       	rjmp	.+30     	; 0xb76a <f_read+0x208>
    b74c:	01 e0       	ldi	r16, 0x01	; 1
    b74e:	10 e0       	ldi	r17, 0x00	; 0
    b750:	b1 01       	movw	r22, r2
    b752:	eb 81       	ldd	r30, Y+3	; 0x03
    b754:	fc 81       	ldd	r31, Y+4	; 0x04
    b756:	81 81       	ldd	r24, Z+1	; 0x01
    b758:	0e 94 bb 6e 	call	0xdd76	; 0xdd76 <disk_write>
    b75c:	89 2b       	or	r24, r25
    b75e:	09 f0       	breq	.+2      	; 0xb762 <f_read+0x200>
    b760:	88 cf       	rjmp	.-240    	; 0xb672 <f_read+0x110>
    b762:	f7 01       	movw	r30, r14
    b764:	86 85       	ldd	r24, Z+14	; 0x0e
    b766:	8f 77       	andi	r24, 0x7F	; 127
    b768:	86 87       	std	Z+14, r24	; 0x0e
    b76a:	e9 81       	ldd	r30, Y+1	; 0x01
    b76c:	fa 81       	ldd	r31, Y+2	; 0x02
    b76e:	01 e0       	ldi	r16, 0x01	; 1
    b770:	10 e0       	ldi	r17, 0x00	; 0
    b772:	a3 01       	movw	r20, r6
    b774:	92 01       	movw	r18, r4
    b776:	b1 01       	movw	r22, r2
    b778:	81 81       	ldd	r24, Z+1	; 0x01
    b77a:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <disk_read>
    b77e:	89 2b       	or	r24, r25
    b780:	09 f0       	breq	.+2      	; 0xb784 <f_read+0x222>
    b782:	77 cf       	rjmp	.-274    	; 0xb672 <f_read+0x110>
    b784:	f7 01       	movw	r30, r14
    b786:	40 8e       	std	Z+24, r4	; 0x18
    b788:	51 8e       	std	Z+25, r5	; 0x19
    b78a:	62 8e       	std	Z+26, r6	; 0x1a
    b78c:	73 8e       	std	Z+27, r7	; 0x1b
    b78e:	f7 01       	movw	r30, r14
    b790:	60 89       	ldd	r22, Z+16	; 0x10
    b792:	71 89       	ldd	r23, Z+17	; 0x11
    b794:	71 70       	andi	r23, 0x01	; 1
    b796:	80 e0       	ldi	r24, 0x00	; 0
    b798:	92 e0       	ldi	r25, 0x02	; 2
    b79a:	86 1b       	sub	r24, r22
    b79c:	97 0b       	sbc	r25, r23
    b79e:	65 01       	movw	r12, r10
    b7a0:	8a 15       	cp	r24, r10
    b7a2:	9b 05       	cpc	r25, r11
    b7a4:	08 f4       	brcc	.+2      	; 0xb7a8 <f_read+0x246>
    b7a6:	6c 01       	movw	r12, r24
    b7a8:	62 0d       	add	r22, r2
    b7aa:	73 1d       	adc	r23, r3
    b7ac:	a6 01       	movw	r20, r12
    b7ae:	c4 01       	movw	r24, r8
    b7b0:	0e 94 5d 48 	call	0x90ba	; 0x90ba <mem_cpy.part.0>
    b7b4:	8c 0c       	add	r8, r12
    b7b6:	9d 1c       	adc	r9, r13
    b7b8:	f7 01       	movw	r30, r14
    b7ba:	80 89       	ldd	r24, Z+16	; 0x10
    b7bc:	91 89       	ldd	r25, Z+17	; 0x11
    b7be:	a2 89       	ldd	r26, Z+18	; 0x12
    b7c0:	b3 89       	ldd	r27, Z+19	; 0x13
    b7c2:	8c 0d       	add	r24, r12
    b7c4:	9d 1d       	adc	r25, r13
    b7c6:	a1 1d       	adc	r26, r1
    b7c8:	b1 1d       	adc	r27, r1
    b7ca:	80 8b       	std	Z+16, r24	; 0x10
    b7cc:	91 8b       	std	Z+17, r25	; 0x11
    b7ce:	a2 8b       	std	Z+18, r26	; 0x12
    b7d0:	b3 8b       	std	Z+19, r27	; 0x13
    b7d2:	ed 81       	ldd	r30, Y+5	; 0x05
    b7d4:	fe 81       	ldd	r31, Y+6	; 0x06
    b7d6:	80 81       	ld	r24, Z
    b7d8:	91 81       	ldd	r25, Z+1	; 0x01
    b7da:	8c 0d       	add	r24, r12
    b7dc:	9d 1d       	adc	r25, r13
    b7de:	91 83       	std	Z+1, r25	; 0x01
    b7e0:	80 83       	st	Z, r24
    b7e2:	ac 18       	sub	r10, r12
    b7e4:	bd 08       	sbc	r11, r13
    b7e6:	f5 ce       	rjmp	.-534    	; 0xb5d2 <f_read+0x70>
    b7e8:	80 e0       	ldi	r24, 0x00	; 0
    b7ea:	01 c0       	rjmp	.+2      	; 0xb7ee <f_read+0x28c>
    b7ec:	87 e0       	ldi	r24, 0x07	; 7
    b7ee:	90 e0       	ldi	r25, 0x00	; 0
    b7f0:	26 96       	adiw	r28, 0x06	; 6
    b7f2:	e2 e1       	ldi	r30, 0x12	; 18
    b7f4:	0c 94 50 ec 	jmp	0x1d8a0	; 0x1d8a0 <__epilogue_restores__>

0000b7f8 <f_write>:
    b7f8:	a8 e0       	ldi	r26, 0x08	; 8
    b7fa:	b0 e0       	ldi	r27, 0x00	; 0
    b7fc:	e2 e0       	ldi	r30, 0x02	; 2
    b7fe:	fc e5       	ldi	r31, 0x5C	; 92
    b800:	0c 94 34 ec 	jmp	0x1d868	; 0x1d868 <__prologue_saves__>
    b804:	7c 01       	movw	r14, r24
    b806:	3b 01       	movw	r6, r22
    b808:	5a 01       	movw	r10, r20
    b80a:	38 87       	std	Y+8, r19	; 0x08
    b80c:	2f 83       	std	Y+7, r18	; 0x07
    b80e:	f9 01       	movw	r30, r18
    b810:	11 82       	std	Z+1, r1	; 0x01
    b812:	10 82       	st	Z, r1
    b814:	be 01       	movw	r22, r28
    b816:	6f 5f       	subi	r22, 0xFF	; 255
    b818:	7f 4f       	sbci	r23, 0xFF	; 255
    b81a:	0e 94 30 48 	call	0x9060	; 0x9060 <validate>
    b81e:	00 97       	sbiw	r24, 0x00	; 0
    b820:	09 f0       	breq	.+2      	; 0xb824 <f_write+0x2c>
    b822:	7d c1       	rjmp	.+762    	; 0xbb1e <f_write+0x326>
    b824:	f7 01       	movw	r30, r14
    b826:	87 85       	ldd	r24, Z+15	; 0x0f
    b828:	90 e0       	ldi	r25, 0x00	; 0
    b82a:	00 97       	sbiw	r24, 0x00	; 0
    b82c:	09 f0       	breq	.+2      	; 0xb830 <f_write+0x38>
    b82e:	77 c1       	rjmp	.+750    	; 0xbb1e <f_write+0x326>
    b830:	86 85       	ldd	r24, Z+14	; 0x0e
    b832:	81 ff       	sbrs	r24, 1
    b834:	72 c1       	rjmp	.+740    	; 0xbb1a <f_write+0x322>
    b836:	80 89       	ldd	r24, Z+16	; 0x10
    b838:	91 89       	ldd	r25, Z+17	; 0x11
    b83a:	a2 89       	ldd	r26, Z+18	; 0x12
    b83c:	b3 89       	ldd	r27, Z+19	; 0x13
    b83e:	ac 01       	movw	r20, r24
    b840:	bd 01       	movw	r22, r26
    b842:	4a 0d       	add	r20, r10
    b844:	5b 1d       	adc	r21, r11
    b846:	61 1d       	adc	r22, r1
    b848:	71 1d       	adc	r23, r1
    b84a:	48 17       	cp	r20, r24
    b84c:	59 07       	cpc	r21, r25
    b84e:	6a 07       	cpc	r22, r26
    b850:	7b 07       	cpc	r23, r27
    b852:	18 f4       	brcc	.+6      	; 0xb85a <f_write+0x62>
    b854:	5c 01       	movw	r10, r24
    b856:	a0 94       	com	r10
    b858:	b0 94       	com	r11
    b85a:	97 01       	movw	r18, r14
    b85c:	2c 5d       	subi	r18, 0xDC	; 220
    b85e:	3f 4f       	sbci	r19, 0xFF	; 255
    b860:	3e 83       	std	Y+6, r19	; 0x06
    b862:	2d 83       	std	Y+5, r18	; 0x05
    b864:	a1 14       	cp	r10, r1
    b866:	b1 04       	cpc	r11, r1
    b868:	09 f4       	brne	.+2      	; 0xb86c <f_write+0x74>
    b86a:	4d c0       	rjmp	.+154    	; 0xb906 <f_write+0x10e>
    b86c:	f7 01       	movw	r30, r14
    b86e:	40 89       	ldd	r20, Z+16	; 0x10
    b870:	51 89       	ldd	r21, Z+17	; 0x11
    b872:	62 89       	ldd	r22, Z+18	; 0x12
    b874:	73 89       	ldd	r23, Z+19	; 0x13
    b876:	db 01       	movw	r26, r22
    b878:	ca 01       	movw	r24, r20
    b87a:	91 70       	andi	r25, 0x01	; 1
    b87c:	aa 27       	eor	r26, r26
    b87e:	bb 27       	eor	r27, r27
    b880:	89 2b       	or	r24, r25
    b882:	8a 2b       	or	r24, r26
    b884:	8b 2b       	or	r24, r27
    b886:	09 f0       	breq	.+2      	; 0xb88a <f_write+0x92>
    b888:	05 c1       	rjmp	.+522    	; 0xba94 <f_write+0x29c>
    b88a:	e9 81       	ldd	r30, Y+1	; 0x01
    b88c:	fa 81       	ldd	r31, Y+2	; 0x02
    b88e:	81 84       	ldd	r8, Z+9	; 0x09
    b890:	92 84       	ldd	r9, Z+10	; 0x0a
    b892:	f1 e0       	ldi	r31, 0x01	; 1
    b894:	8f 1a       	sub	r8, r31
    b896:	91 08       	sbc	r9, r1
    b898:	db 01       	movw	r26, r22
    b89a:	ca 01       	movw	r24, r20
    b89c:	e9 e0       	ldi	r30, 0x09	; 9
    b89e:	b6 95       	lsr	r27
    b8a0:	a7 95       	ror	r26
    b8a2:	97 95       	ror	r25
    b8a4:	87 95       	ror	r24
    b8a6:	ea 95       	dec	r30
    b8a8:	d1 f7       	brne	.-12     	; 0xb89e <f_write+0xa6>
    b8aa:	88 22       	and	r8, r24
    b8ac:	99 22       	and	r9, r25
    b8ae:	81 14       	cp	r8, r1
    b8b0:	91 04       	cpc	r9, r1
    b8b2:	09 f0       	breq	.+2      	; 0xb8b6 <f_write+0xbe>
    b8b4:	51 c0       	rjmp	.+162    	; 0xb958 <f_write+0x160>
    b8b6:	f7 01       	movw	r30, r14
    b8b8:	41 15       	cp	r20, r1
    b8ba:	51 05       	cpc	r21, r1
    b8bc:	61 05       	cpc	r22, r1
    b8be:	71 05       	cpc	r23, r1
    b8c0:	69 f4       	brne	.+26     	; 0xb8dc <f_write+0xe4>
    b8c2:	66 81       	ldd	r22, Z+6	; 0x06
    b8c4:	77 81       	ldd	r23, Z+7	; 0x07
    b8c6:	80 85       	ldd	r24, Z+8	; 0x08
    b8c8:	91 85       	ldd	r25, Z+9	; 0x09
    b8ca:	61 15       	cp	r22, r1
    b8cc:	71 05       	cpc	r23, r1
    b8ce:	81 05       	cpc	r24, r1
    b8d0:	91 05       	cpc	r25, r1
    b8d2:	f9 f4       	brne	.+62     	; 0xb912 <f_write+0x11a>
    b8d4:	40 e0       	ldi	r20, 0x00	; 0
    b8d6:	50 e0       	ldi	r21, 0x00	; 0
    b8d8:	ba 01       	movw	r22, r20
    b8da:	0d c0       	rjmp	.+26     	; 0xb8f6 <f_write+0xfe>
    b8dc:	82 a1       	ldd	r24, Z+34	; 0x22
    b8de:	93 a1       	ldd	r25, Z+35	; 0x23
    b8e0:	89 2b       	or	r24, r25
    b8e2:	21 f0       	breq	.+8      	; 0xb8ec <f_write+0xf4>
    b8e4:	c7 01       	movw	r24, r14
    b8e6:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <clmt_clust>
    b8ea:	08 c0       	rjmp	.+16     	; 0xb8fc <f_write+0x104>
    b8ec:	f7 01       	movw	r30, r14
    b8ee:	44 89       	ldd	r20, Z+20	; 0x14
    b8f0:	55 89       	ldd	r21, Z+21	; 0x15
    b8f2:	66 89       	ldd	r22, Z+22	; 0x16
    b8f4:	77 89       	ldd	r23, Z+23	; 0x17
    b8f6:	c7 01       	movw	r24, r14
    b8f8:	0e 94 e9 4e 	call	0x9dd2	; 0x9dd2 <create_chain>
    b8fc:	61 15       	cp	r22, r1
    b8fe:	71 05       	cpc	r23, r1
    b900:	81 05       	cpc	r24, r1
    b902:	91 05       	cpc	r25, r1
    b904:	31 f4       	brne	.+12     	; 0xb912 <f_write+0x11a>
    b906:	f7 01       	movw	r30, r14
    b908:	86 85       	ldd	r24, Z+14	; 0x0e
    b90a:	80 64       	ori	r24, 0x40	; 64
    b90c:	86 87       	std	Z+14, r24	; 0x0e
    b90e:	80 e0       	ldi	r24, 0x00	; 0
    b910:	05 c1       	rjmp	.+522    	; 0xbb1c <f_write+0x324>
    b912:	61 30       	cpi	r22, 0x01	; 1
    b914:	71 05       	cpc	r23, r1
    b916:	81 05       	cpc	r24, r1
    b918:	91 05       	cpc	r25, r1
    b91a:	11 f4       	brne	.+4      	; 0xb920 <f_write+0x128>
    b91c:	82 e0       	ldi	r24, 0x02	; 2
    b91e:	07 c0       	rjmp	.+14     	; 0xb92e <f_write+0x136>
    b920:	6f 3f       	cpi	r22, 0xFF	; 255
    b922:	ff ef       	ldi	r31, 0xFF	; 255
    b924:	7f 07       	cpc	r23, r31
    b926:	8f 07       	cpc	r24, r31
    b928:	9f 07       	cpc	r25, r31
    b92a:	21 f4       	brne	.+8      	; 0xb934 <f_write+0x13c>
    b92c:	81 e0       	ldi	r24, 0x01	; 1
    b92e:	f7 01       	movw	r30, r14
    b930:	87 87       	std	Z+15, r24	; 0x0f
    b932:	f4 c0       	rjmp	.+488    	; 0xbb1c <f_write+0x324>
    b934:	f7 01       	movw	r30, r14
    b936:	64 8b       	std	Z+20, r22	; 0x14
    b938:	75 8b       	std	Z+21, r23	; 0x15
    b93a:	86 8b       	std	Z+22, r24	; 0x16
    b93c:	97 8b       	std	Z+23, r25	; 0x17
    b93e:	06 81       	ldd	r16, Z+6	; 0x06
    b940:	17 81       	ldd	r17, Z+7	; 0x07
    b942:	20 85       	ldd	r18, Z+8	; 0x08
    b944:	31 85       	ldd	r19, Z+9	; 0x09
    b946:	01 15       	cp	r16, r1
    b948:	11 05       	cpc	r17, r1
    b94a:	21 05       	cpc	r18, r1
    b94c:	31 05       	cpc	r19, r1
    b94e:	21 f4       	brne	.+8      	; 0xb958 <f_write+0x160>
    b950:	66 83       	std	Z+6, r22	; 0x06
    b952:	77 83       	std	Z+7, r23	; 0x07
    b954:	80 87       	std	Z+8, r24	; 0x08
    b956:	91 87       	std	Z+9, r25	; 0x09
    b958:	f7 01       	movw	r30, r14
    b95a:	86 85       	ldd	r24, Z+14	; 0x0e
    b95c:	87 ff       	sbrs	r24, 7
    b95e:	13 c0       	rjmp	.+38     	; 0xb986 <f_write+0x18e>
    b960:	20 8d       	ldd	r18, Z+24	; 0x18
    b962:	31 8d       	ldd	r19, Z+25	; 0x19
    b964:	42 8d       	ldd	r20, Z+26	; 0x1a
    b966:	53 8d       	ldd	r21, Z+27	; 0x1b
    b968:	e9 81       	ldd	r30, Y+1	; 0x01
    b96a:	fa 81       	ldd	r31, Y+2	; 0x02
    b96c:	01 e0       	ldi	r16, 0x01	; 1
    b96e:	10 e0       	ldi	r17, 0x00	; 0
    b970:	6d 81       	ldd	r22, Y+5	; 0x05
    b972:	7e 81       	ldd	r23, Y+6	; 0x06
    b974:	81 81       	ldd	r24, Z+1	; 0x01
    b976:	0e 94 bb 6e 	call	0xdd76	; 0xdd76 <disk_write>
    b97a:	89 2b       	or	r24, r25
    b97c:	b9 f6       	brne	.-82     	; 0xb92c <f_write+0x134>
    b97e:	f7 01       	movw	r30, r14
    b980:	86 85       	ldd	r24, Z+14	; 0x0e
    b982:	8f 77       	andi	r24, 0x7F	; 127
    b984:	86 87       	std	Z+14, r24	; 0x0e
    b986:	29 81       	ldd	r18, Y+1	; 0x01
    b988:	3a 81       	ldd	r19, Y+2	; 0x02
    b98a:	3c 83       	std	Y+4, r19	; 0x04
    b98c:	2b 83       	std	Y+3, r18	; 0x03
    b98e:	f7 01       	movw	r30, r14
    b990:	44 89       	ldd	r20, Z+20	; 0x14
    b992:	55 89       	ldd	r21, Z+21	; 0x15
    b994:	66 89       	ldd	r22, Z+22	; 0x16
    b996:	77 89       	ldd	r23, Z+23	; 0x17
    b998:	c9 01       	movw	r24, r18
    b99a:	0e 94 9d 47 	call	0x8f3a	; 0x8f3a <clust2sect>
    b99e:	61 15       	cp	r22, r1
    b9a0:	71 05       	cpc	r23, r1
    b9a2:	81 05       	cpc	r24, r1
    b9a4:	91 05       	cpc	r25, r1
    b9a6:	09 f4       	brne	.+2      	; 0xb9aa <f_write+0x1b2>
    b9a8:	b9 cf       	rjmp	.-142    	; 0xb91c <f_write+0x124>
    b9aa:	1b 01       	movw	r2, r22
    b9ac:	2c 01       	movw	r4, r24
    b9ae:	28 0c       	add	r2, r8
    b9b0:	39 1c       	adc	r3, r9
    b9b2:	41 1c       	adc	r4, r1
    b9b4:	51 1c       	adc	r5, r1
    b9b6:	65 01       	movw	r12, r10
    b9b8:	cd 2c       	mov	r12, r13
    b9ba:	dd 24       	eor	r13, r13
    b9bc:	c6 94       	lsr	r12
    b9be:	c1 14       	cp	r12, r1
    b9c0:	d1 04       	cpc	r13, r1
    b9c2:	f1 f1       	breq	.+124    	; 0xba40 <f_write+0x248>
    b9c4:	eb 81       	ldd	r30, Y+3	; 0x03
    b9c6:	fc 81       	ldd	r31, Y+4	; 0x04
    b9c8:	81 85       	ldd	r24, Z+9	; 0x09
    b9ca:	92 85       	ldd	r25, Z+10	; 0x0a
    b9cc:	94 01       	movw	r18, r8
    b9ce:	2c 0d       	add	r18, r12
    b9d0:	3d 1d       	adc	r19, r13
    b9d2:	82 17       	cp	r24, r18
    b9d4:	93 07       	cpc	r25, r19
    b9d6:	18 f4       	brcc	.+6      	; 0xb9de <f_write+0x1e6>
    b9d8:	6c 01       	movw	r12, r24
    b9da:	c8 18       	sub	r12, r8
    b9dc:	d9 08       	sbc	r13, r9
    b9de:	86 01       	movw	r16, r12
    b9e0:	a2 01       	movw	r20, r4
    b9e2:	91 01       	movw	r18, r2
    b9e4:	b3 01       	movw	r22, r6
    b9e6:	eb 81       	ldd	r30, Y+3	; 0x03
    b9e8:	fc 81       	ldd	r31, Y+4	; 0x04
    b9ea:	81 81       	ldd	r24, Z+1	; 0x01
    b9ec:	0e 94 bb 6e 	call	0xdd76	; 0xdd76 <disk_write>
    b9f0:	89 2b       	or	r24, r25
    b9f2:	09 f0       	breq	.+2      	; 0xb9f6 <f_write+0x1fe>
    b9f4:	9b cf       	rjmp	.-202    	; 0xb92c <f_write+0x134>
    b9f6:	f7 01       	movw	r30, r14
    b9f8:	80 8d       	ldd	r24, Z+24	; 0x18
    b9fa:	91 8d       	ldd	r25, Z+25	; 0x19
    b9fc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b9fe:	b3 8d       	ldd	r27, Z+27	; 0x1b
    ba00:	82 19       	sub	r24, r2
    ba02:	93 09       	sbc	r25, r3
    ba04:	a4 09       	sbc	r26, r4
    ba06:	b5 09       	sbc	r27, r5
    ba08:	a6 01       	movw	r20, r12
    ba0a:	60 e0       	ldi	r22, 0x00	; 0
    ba0c:	70 e0       	ldi	r23, 0x00	; 0
    ba0e:	84 17       	cp	r24, r20
    ba10:	95 07       	cpc	r25, r21
    ba12:	a6 07       	cpc	r26, r22
    ba14:	b7 07       	cpc	r27, r23
    ba16:	80 f4       	brcc	.+32     	; 0xba38 <f_write+0x240>
    ba18:	98 2f       	mov	r25, r24
    ba1a:	88 27       	eor	r24, r24
    ba1c:	99 0f       	add	r25, r25
    ba1e:	b3 01       	movw	r22, r6
    ba20:	68 0f       	add	r22, r24
    ba22:	79 1f       	adc	r23, r25
    ba24:	40 e0       	ldi	r20, 0x00	; 0
    ba26:	52 e0       	ldi	r21, 0x02	; 2
    ba28:	8d 81       	ldd	r24, Y+5	; 0x05
    ba2a:	9e 81       	ldd	r25, Y+6	; 0x06
    ba2c:	0e 94 5d 48 	call	0x90ba	; 0x90ba <mem_cpy.part.0>
    ba30:	f7 01       	movw	r30, r14
    ba32:	86 85       	ldd	r24, Z+14	; 0x0e
    ba34:	8f 77       	andi	r24, 0x7F	; 127
    ba36:	86 87       	std	Z+14, r24	; 0x0e
    ba38:	dc 2c       	mov	r13, r12
    ba3a:	cc 24       	eor	r12, r12
    ba3c:	dd 0c       	add	r13, r13
    ba3e:	43 c0       	rjmp	.+134    	; 0xbac6 <f_write+0x2ce>
    ba40:	f7 01       	movw	r30, r14
    ba42:	80 8d       	ldd	r24, Z+24	; 0x18
    ba44:	91 8d       	ldd	r25, Z+25	; 0x19
    ba46:	a2 8d       	ldd	r26, Z+26	; 0x1a
    ba48:	b3 8d       	ldd	r27, Z+27	; 0x1b
    ba4a:	28 16       	cp	r2, r24
    ba4c:	39 06       	cpc	r3, r25
    ba4e:	4a 06       	cpc	r4, r26
    ba50:	5b 06       	cpc	r5, r27
    ba52:	d9 f0       	breq	.+54     	; 0xba8a <f_write+0x292>
    ba54:	40 89       	ldd	r20, Z+16	; 0x10
    ba56:	51 89       	ldd	r21, Z+17	; 0x11
    ba58:	62 89       	ldd	r22, Z+18	; 0x12
    ba5a:	73 89       	ldd	r23, Z+19	; 0x13
    ba5c:	82 85       	ldd	r24, Z+10	; 0x0a
    ba5e:	93 85       	ldd	r25, Z+11	; 0x0b
    ba60:	a4 85       	ldd	r26, Z+12	; 0x0c
    ba62:	b5 85       	ldd	r27, Z+13	; 0x0d
    ba64:	48 17       	cp	r20, r24
    ba66:	59 07       	cpc	r21, r25
    ba68:	6a 07       	cpc	r22, r26
    ba6a:	7b 07       	cpc	r23, r27
    ba6c:	70 f4       	brcc	.+28     	; 0xba8a <f_write+0x292>
    ba6e:	01 e0       	ldi	r16, 0x01	; 1
    ba70:	10 e0       	ldi	r17, 0x00	; 0
    ba72:	a2 01       	movw	r20, r4
    ba74:	91 01       	movw	r18, r2
    ba76:	6d 81       	ldd	r22, Y+5	; 0x05
    ba78:	7e 81       	ldd	r23, Y+6	; 0x06
    ba7a:	eb 81       	ldd	r30, Y+3	; 0x03
    ba7c:	fc 81       	ldd	r31, Y+4	; 0x04
    ba7e:	81 81       	ldd	r24, Z+1	; 0x01
    ba80:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <disk_read>
    ba84:	89 2b       	or	r24, r25
    ba86:	09 f0       	breq	.+2      	; 0xba8a <f_write+0x292>
    ba88:	51 cf       	rjmp	.-350    	; 0xb92c <f_write+0x134>
    ba8a:	f7 01       	movw	r30, r14
    ba8c:	20 8e       	std	Z+24, r2	; 0x18
    ba8e:	31 8e       	std	Z+25, r3	; 0x19
    ba90:	42 8e       	std	Z+26, r4	; 0x1a
    ba92:	53 8e       	std	Z+27, r5	; 0x1b
    ba94:	f7 01       	movw	r30, r14
    ba96:	80 89       	ldd	r24, Z+16	; 0x10
    ba98:	91 89       	ldd	r25, Z+17	; 0x11
    ba9a:	91 70       	andi	r25, 0x01	; 1
    ba9c:	20 e0       	ldi	r18, 0x00	; 0
    ba9e:	32 e0       	ldi	r19, 0x02	; 2
    baa0:	28 1b       	sub	r18, r24
    baa2:	39 0b       	sbc	r19, r25
    baa4:	65 01       	movw	r12, r10
    baa6:	2a 15       	cp	r18, r10
    baa8:	3b 05       	cpc	r19, r11
    baaa:	08 f4       	brcc	.+2      	; 0xbaae <f_write+0x2b6>
    baac:	69 01       	movw	r12, r18
    baae:	a6 01       	movw	r20, r12
    bab0:	b3 01       	movw	r22, r6
    bab2:	2d 81       	ldd	r18, Y+5	; 0x05
    bab4:	3e 81       	ldd	r19, Y+6	; 0x06
    bab6:	82 0f       	add	r24, r18
    bab8:	93 1f       	adc	r25, r19
    baba:	0e 94 5d 48 	call	0x90ba	; 0x90ba <mem_cpy.part.0>
    babe:	f7 01       	movw	r30, r14
    bac0:	86 85       	ldd	r24, Z+14	; 0x0e
    bac2:	80 68       	ori	r24, 0x80	; 128
    bac4:	86 87       	std	Z+14, r24	; 0x0e
    bac6:	6c 0c       	add	r6, r12
    bac8:	7d 1c       	adc	r7, r13
    baca:	f7 01       	movw	r30, r14
    bacc:	80 89       	ldd	r24, Z+16	; 0x10
    bace:	91 89       	ldd	r25, Z+17	; 0x11
    bad0:	a2 89       	ldd	r26, Z+18	; 0x12
    bad2:	b3 89       	ldd	r27, Z+19	; 0x13
    bad4:	8c 0d       	add	r24, r12
    bad6:	9d 1d       	adc	r25, r13
    bad8:	a1 1d       	adc	r26, r1
    bada:	b1 1d       	adc	r27, r1
    badc:	80 8b       	std	Z+16, r24	; 0x10
    bade:	91 8b       	std	Z+17, r25	; 0x11
    bae0:	a2 8b       	std	Z+18, r26	; 0x12
    bae2:	b3 8b       	std	Z+19, r27	; 0x13
    bae4:	42 85       	ldd	r20, Z+10	; 0x0a
    bae6:	53 85       	ldd	r21, Z+11	; 0x0b
    bae8:	64 85       	ldd	r22, Z+12	; 0x0c
    baea:	75 85       	ldd	r23, Z+13	; 0x0d
    baec:	48 17       	cp	r20, r24
    baee:	59 07       	cpc	r21, r25
    baf0:	6a 07       	cpc	r22, r26
    baf2:	7b 07       	cpc	r23, r27
    baf4:	10 f4       	brcc	.+4      	; 0xbafa <f_write+0x302>
    baf6:	ac 01       	movw	r20, r24
    baf8:	bd 01       	movw	r22, r26
    bafa:	f7 01       	movw	r30, r14
    bafc:	42 87       	std	Z+10, r20	; 0x0a
    bafe:	53 87       	std	Z+11, r21	; 0x0b
    bb00:	64 87       	std	Z+12, r22	; 0x0c
    bb02:	75 87       	std	Z+13, r23	; 0x0d
    bb04:	ef 81       	ldd	r30, Y+7	; 0x07
    bb06:	f8 85       	ldd	r31, Y+8	; 0x08
    bb08:	80 81       	ld	r24, Z
    bb0a:	91 81       	ldd	r25, Z+1	; 0x01
    bb0c:	8c 0d       	add	r24, r12
    bb0e:	9d 1d       	adc	r25, r13
    bb10:	91 83       	std	Z+1, r25	; 0x01
    bb12:	80 83       	st	Z, r24
    bb14:	ac 18       	sub	r10, r12
    bb16:	bd 08       	sbc	r11, r13
    bb18:	a5 ce       	rjmp	.-694    	; 0xb864 <f_write+0x6c>
    bb1a:	87 e0       	ldi	r24, 0x07	; 7
    bb1c:	90 e0       	ldi	r25, 0x00	; 0
    bb1e:	28 96       	adiw	r28, 0x08	; 8
    bb20:	e2 e1       	ldi	r30, 0x12	; 18
    bb22:	0c 94 50 ec 	jmp	0x1d8a0	; 0x1d8a0 <__epilogue_restores__>

0000bb26 <f_sync>:
    bb26:	8f 92       	push	r8
    bb28:	9f 92       	push	r9
    bb2a:	af 92       	push	r10
    bb2c:	bf 92       	push	r11
    bb2e:	ef 92       	push	r14
    bb30:	ff 92       	push	r15
    bb32:	0f 93       	push	r16
    bb34:	1f 93       	push	r17
    bb36:	cf 93       	push	r28
    bb38:	df 93       	push	r29
    bb3a:	00 d0       	rcall	.+0      	; 0xbb3c <f_sync+0x16>
    bb3c:	cd b7       	in	r28, 0x3d	; 61
    bb3e:	de b7       	in	r29, 0x3e	; 62
    bb40:	7c 01       	movw	r14, r24
    bb42:	be 01       	movw	r22, r28
    bb44:	6f 5f       	subi	r22, 0xFF	; 255
    bb46:	7f 4f       	sbci	r23, 0xFF	; 255
    bb48:	0e 94 30 48 	call	0x9060	; 0x9060 <validate>
    bb4c:	00 97       	sbiw	r24, 0x00	; 0
    bb4e:	09 f0       	breq	.+2      	; 0xbb52 <f_sync+0x2c>
    bb50:	5d c0       	rjmp	.+186    	; 0xbc0c <f_sync+0xe6>
    bb52:	f7 01       	movw	r30, r14
    bb54:	86 85       	ldd	r24, Z+14	; 0x0e
    bb56:	86 ff       	sbrs	r24, 6
    bb58:	55 c0       	rjmp	.+170    	; 0xbc04 <f_sync+0xde>
    bb5a:	87 ff       	sbrs	r24, 7
    bb5c:	15 c0       	rjmp	.+42     	; 0xbb88 <f_sync+0x62>
    bb5e:	20 8d       	ldd	r18, Z+24	; 0x18
    bb60:	31 8d       	ldd	r19, Z+25	; 0x19
    bb62:	42 8d       	ldd	r20, Z+26	; 0x1a
    bb64:	53 8d       	ldd	r21, Z+27	; 0x1b
    bb66:	e9 81       	ldd	r30, Y+1	; 0x01
    bb68:	fa 81       	ldd	r31, Y+2	; 0x02
    bb6a:	01 e0       	ldi	r16, 0x01	; 1
    bb6c:	10 e0       	ldi	r17, 0x00	; 0
    bb6e:	b7 01       	movw	r22, r14
    bb70:	6c 5d       	subi	r22, 0xDC	; 220
    bb72:	7f 4f       	sbci	r23, 0xFF	; 255
    bb74:	81 81       	ldd	r24, Z+1	; 0x01
    bb76:	0e 94 bb 6e 	call	0xdd76	; 0xdd76 <disk_write>
    bb7a:	89 2b       	or	r24, r25
    bb7c:	09 f0       	breq	.+2      	; 0xbb80 <f_sync+0x5a>
    bb7e:	44 c0       	rjmp	.+136    	; 0xbc08 <f_sync+0xe2>
    bb80:	f7 01       	movw	r30, r14
    bb82:	86 85       	ldd	r24, Z+14	; 0x0e
    bb84:	8f 77       	andi	r24, 0x7F	; 127
    bb86:	86 87       	std	Z+14, r24	; 0x0e
    bb88:	0e 94 2e 75 	call	0xea5c	; 0xea5c <get_fattime>
    bb8c:	4b 01       	movw	r8, r22
    bb8e:	5c 01       	movw	r10, r24
    bb90:	f7 01       	movw	r30, r14
    bb92:	44 8d       	ldd	r20, Z+28	; 0x1c
    bb94:	55 8d       	ldd	r21, Z+29	; 0x1d
    bb96:	66 8d       	ldd	r22, Z+30	; 0x1e
    bb98:	77 8d       	ldd	r23, Z+31	; 0x1f
    bb9a:	89 81       	ldd	r24, Y+1	; 0x01
    bb9c:	9a 81       	ldd	r25, Y+2	; 0x02
    bb9e:	0e 94 50 49 	call	0x92a0	; 0x92a0 <move_window>
    bba2:	00 97       	sbiw	r24, 0x00	; 0
    bba4:	99 f5       	brne	.+102    	; 0xbc0c <f_sync+0xe6>
    bba6:	f7 01       	movw	r30, r14
    bba8:	00 a1       	ldd	r16, Z+32	; 0x20
    bbaa:	11 a1       	ldd	r17, Z+33	; 0x21
    bbac:	f8 01       	movw	r30, r16
    bbae:	83 85       	ldd	r24, Z+11	; 0x0b
    bbb0:	80 62       	ori	r24, 0x20	; 32
    bbb2:	83 87       	std	Z+11, r24	; 0x0b
    bbb4:	f7 01       	movw	r30, r14
    bbb6:	26 81       	ldd	r18, Z+6	; 0x06
    bbb8:	37 81       	ldd	r19, Z+7	; 0x07
    bbba:	40 85       	ldd	r20, Z+8	; 0x08
    bbbc:	51 85       	ldd	r21, Z+9	; 0x09
    bbbe:	b8 01       	movw	r22, r16
    bbc0:	80 81       	ld	r24, Z
    bbc2:	91 81       	ldd	r25, Z+1	; 0x01
    bbc4:	0e 94 7d 48 	call	0x90fa	; 0x90fa <st_clust.isra.2>
    bbc8:	f7 01       	movw	r30, r14
    bbca:	42 85       	ldd	r20, Z+10	; 0x0a
    bbcc:	53 85       	ldd	r21, Z+11	; 0x0b
    bbce:	64 85       	ldd	r22, Z+12	; 0x0c
    bbd0:	75 85       	ldd	r23, Z+13	; 0x0d
    bbd2:	c8 01       	movw	r24, r16
    bbd4:	4c 96       	adiw	r24, 0x1c	; 28
    bbd6:	0e 94 8e 47 	call	0x8f1c	; 0x8f1c <st_dword>
    bbda:	b5 01       	movw	r22, r10
    bbdc:	a4 01       	movw	r20, r8
    bbde:	c8 01       	movw	r24, r16
    bbe0:	46 96       	adiw	r24, 0x16	; 22
    bbe2:	0e 94 8e 47 	call	0x8f1c	; 0x8f1c <st_dword>
    bbe6:	f8 01       	movw	r30, r16
    bbe8:	12 8a       	std	Z+18, r1	; 0x12
    bbea:	13 8a       	std	Z+19, r1	; 0x13
    bbec:	89 81       	ldd	r24, Y+1	; 0x01
    bbee:	9a 81       	ldd	r25, Y+2	; 0x02
    bbf0:	21 e0       	ldi	r18, 0x01	; 1
    bbf2:	fc 01       	movw	r30, r24
    bbf4:	23 83       	std	Z+3, r18	; 0x03
    bbf6:	0e 94 e4 48 	call	0x91c8	; 0x91c8 <sync_fs>
    bbfa:	f7 01       	movw	r30, r14
    bbfc:	26 85       	ldd	r18, Z+14	; 0x0e
    bbfe:	2f 7b       	andi	r18, 0xBF	; 191
    bc00:	26 87       	std	Z+14, r18	; 0x0e
    bc02:	04 c0       	rjmp	.+8      	; 0xbc0c <f_sync+0xe6>
    bc04:	80 e0       	ldi	r24, 0x00	; 0
    bc06:	01 c0       	rjmp	.+2      	; 0xbc0a <f_sync+0xe4>
    bc08:	81 e0       	ldi	r24, 0x01	; 1
    bc0a:	90 e0       	ldi	r25, 0x00	; 0
    bc0c:	0f 90       	pop	r0
    bc0e:	0f 90       	pop	r0
    bc10:	df 91       	pop	r29
    bc12:	cf 91       	pop	r28
    bc14:	1f 91       	pop	r17
    bc16:	0f 91       	pop	r16
    bc18:	ff 90       	pop	r15
    bc1a:	ef 90       	pop	r14
    bc1c:	bf 90       	pop	r11
    bc1e:	af 90       	pop	r10
    bc20:	9f 90       	pop	r9
    bc22:	8f 90       	pop	r8
    bc24:	08 95       	ret

0000bc26 <f_close>:
    bc26:	a2 e0       	ldi	r26, 0x02	; 2
    bc28:	b0 e0       	ldi	r27, 0x00	; 0
    bc2a:	e9 e1       	ldi	r30, 0x19	; 25
    bc2c:	fe e5       	ldi	r31, 0x5E	; 94
    bc2e:	0c 94 42 ec 	jmp	0x1d884	; 0x1d884 <__prologue_saves__+0x1c>
    bc32:	8c 01       	movw	r16, r24
    bc34:	78 df       	rcall	.-272    	; 0xbb26 <f_sync>
    bc36:	00 97       	sbiw	r24, 0x00	; 0
    bc38:	59 f4       	brne	.+22     	; 0xbc50 <f_close+0x2a>
    bc3a:	be 01       	movw	r22, r28
    bc3c:	6f 5f       	subi	r22, 0xFF	; 255
    bc3e:	7f 4f       	sbci	r23, 0xFF	; 255
    bc40:	c8 01       	movw	r24, r16
    bc42:	0e 94 30 48 	call	0x9060	; 0x9060 <validate>
    bc46:	00 97       	sbiw	r24, 0x00	; 0
    bc48:	19 f4       	brne	.+6      	; 0xbc50 <f_close+0x2a>
    bc4a:	f8 01       	movw	r30, r16
    bc4c:	11 82       	std	Z+1, r1	; 0x01
    bc4e:	10 82       	st	Z, r1
    bc50:	22 96       	adiw	r28, 0x02	; 2
    bc52:	e4 e0       	ldi	r30, 0x04	; 4
    bc54:	0c 94 5e ec 	jmp	0x1d8bc	; 0x1d8bc <__epilogue_restores__+0x1c>

0000bc58 <f_chdir>:
    bc58:	a2 e3       	ldi	r26, 0x32	; 50
    bc5a:	b0 e0       	ldi	r27, 0x00	; 0
    bc5c:	e2 e3       	ldi	r30, 0x32	; 50
    bc5e:	fe e5       	ldi	r31, 0x5E	; 94
    bc60:	0c 94 3e ec 	jmp	0x1d87c	; 0x1d87c <__prologue_saves__+0x14>
    bc64:	9a ab       	std	Y+50, r25	; 0x32
    bc66:	89 ab       	std	Y+49, r24	; 0x31
    bc68:	40 e0       	ldi	r20, 0x00	; 0
    bc6a:	be 01       	movw	r22, r28
    bc6c:	61 5d       	subi	r22, 0xD1	; 209
    bc6e:	7f 4f       	sbci	r23, 0xFF	; 255
    bc70:	ce 01       	movw	r24, r28
    bc72:	c1 96       	adiw	r24, 0x31	; 49
    bc74:	0e 94 d0 49 	call	0x93a0	; 0x93a0 <find_volume>
    bc78:	00 97       	sbiw	r24, 0x00	; 0
    bc7a:	09 f0       	breq	.+2      	; 0xbc7e <f_chdir+0x26>
    bc7c:	44 c0       	rjmp	.+136    	; 0xbd06 <f_chdir+0xae>
    bc7e:	8f a5       	ldd	r24, Y+47	; 0x2f
    bc80:	98 a9       	ldd	r25, Y+48	; 0x30
    bc82:	9a 83       	std	Y+2, r25	; 0x02
    bc84:	89 83       	std	Y+1, r24	; 0x01
    bc86:	80 e0       	ldi	r24, 0x00	; 0
    bc88:	92 e0       	ldi	r25, 0x02	; 2
    bc8a:	0e 94 1e 6e 	call	0xdc3c	; 0xdc3c <ff_memalloc>
    bc8e:	7c 01       	movw	r14, r24
    bc90:	00 97       	sbiw	r24, 0x00	; 0
    bc92:	a9 f1       	breq	.+106    	; 0xbcfe <f_chdir+0xa6>
    bc94:	ef a5       	ldd	r30, Y+47	; 0x2f
    bc96:	f8 a9       	ldd	r31, Y+48	; 0x30
    bc98:	94 87       	std	Z+12, r25	; 0x0c
    bc9a:	83 87       	std	Z+11, r24	; 0x0b
    bc9c:	69 a9       	ldd	r22, Y+49	; 0x31
    bc9e:	7a a9       	ldd	r23, Y+50	; 0x32
    bca0:	ce 01       	movw	r24, r28
    bca2:	01 96       	adiw	r24, 0x01	; 1
    bca4:	03 d8       	rcall	.-4090   	; 0xacac <follow_path>
    bca6:	8c 01       	movw	r16, r24
    bca8:	89 2b       	or	r24, r25
    bcaa:	09 f5       	brne	.+66     	; 0xbcee <f_chdir+0x96>
    bcac:	88 a5       	ldd	r24, Y+40	; 0x28
    bcae:	87 ff       	sbrs	r24, 7
    bcb0:	0b c0       	rjmp	.+22     	; 0xbcc8 <f_chdir+0x70>
    bcb2:	ef a5       	ldd	r30, Y+47	; 0x2f
    bcb4:	f8 a9       	ldd	r31, Y+48	; 0x30
    bcb6:	8f 81       	ldd	r24, Y+7	; 0x07
    bcb8:	98 85       	ldd	r25, Y+8	; 0x08
    bcba:	a9 85       	ldd	r26, Y+9	; 0x09
    bcbc:	ba 85       	ldd	r27, Y+10	; 0x0a
    bcbe:	85 8b       	std	Z+21, r24	; 0x15
    bcc0:	96 8b       	std	Z+22, r25	; 0x16
    bcc2:	a7 8b       	std	Z+23, r26	; 0x17
    bcc4:	b0 8f       	std	Z+24, r27	; 0x18
    bcc6:	13 c0       	rjmp	.+38     	; 0xbcee <f_chdir+0x96>
    bcc8:	8d 81       	ldd	r24, Y+5	; 0x05
    bcca:	84 ff       	sbrs	r24, 4
    bccc:	0e c0       	rjmp	.+28     	; 0xbcea <f_chdir+0x92>
    bcce:	cf a4       	ldd	r12, Y+47	; 0x2f
    bcd0:	d8 a8       	ldd	r13, Y+48	; 0x30
    bcd2:	6b 8d       	ldd	r22, Y+27	; 0x1b
    bcd4:	7c 8d       	ldd	r23, Y+28	; 0x1c
    bcd6:	f6 01       	movw	r30, r12
    bcd8:	80 81       	ld	r24, Z
    bcda:	0e 94 68 48 	call	0x90d0	; 0x90d0 <ld_clust.isra.1>
    bcde:	f6 01       	movw	r30, r12
    bce0:	65 8b       	std	Z+21, r22	; 0x15
    bce2:	76 8b       	std	Z+22, r23	; 0x16
    bce4:	87 8b       	std	Z+23, r24	; 0x17
    bce6:	90 8f       	std	Z+24, r25	; 0x18
    bce8:	02 c0       	rjmp	.+4      	; 0xbcee <f_chdir+0x96>
    bcea:	05 e0       	ldi	r16, 0x05	; 5
    bcec:	10 e0       	ldi	r17, 0x00	; 0
    bcee:	c7 01       	movw	r24, r14
    bcf0:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <ff_memfree>
    bcf4:	04 30       	cpi	r16, 0x04	; 4
    bcf6:	11 05       	cpc	r17, r1
    bcf8:	29 f4       	brne	.+10     	; 0xbd04 <f_chdir+0xac>
    bcfa:	85 e0       	ldi	r24, 0x05	; 5
    bcfc:	01 c0       	rjmp	.+2      	; 0xbd00 <f_chdir+0xa8>
    bcfe:	81 e1       	ldi	r24, 0x11	; 17
    bd00:	90 e0       	ldi	r25, 0x00	; 0
    bd02:	01 c0       	rjmp	.+2      	; 0xbd06 <f_chdir+0xae>
    bd04:	c8 01       	movw	r24, r16
    bd06:	e2 96       	adiw	r28, 0x32	; 50
    bd08:	e8 e0       	ldi	r30, 0x08	; 8
    bd0a:	0c 94 5a ec 	jmp	0x1d8b4	; 0x1d8b4 <__epilogue_restores__+0x14>

0000bd0e <f_getcwd>:
    bd0e:	a8 e4       	ldi	r26, 0x48	; 72
    bd10:	b1 e0       	ldi	r27, 0x01	; 1
    bd12:	ed e8       	ldi	r30, 0x8D	; 141
    bd14:	fe e5       	ldi	r31, 0x5E	; 94
    bd16:	0c 94 35 ec 	jmp	0x1d86a	; 0x1d86a <__prologue_saves__+0x2>
    bd1a:	c9 5b       	subi	r28, 0xB9	; 185
    bd1c:	de 4f       	sbci	r29, 0xFE	; 254
    bd1e:	99 83       	std	Y+1, r25	; 0x01
    bd20:	88 83       	st	Y, r24
    bd22:	c7 54       	subi	r28, 0x47	; 71
    bd24:	d1 40       	sbci	r29, 0x01	; 1
    bd26:	5b 01       	movw	r10, r22
    bd28:	fc 01       	movw	r30, r24
    bd2a:	10 82       	st	Z, r1
    bd2c:	40 e0       	ldi	r20, 0x00	; 0
    bd2e:	be 01       	movw	r22, r28
    bd30:	6b 5b       	subi	r22, 0xBB	; 187
    bd32:	7e 4f       	sbci	r23, 0xFE	; 254
    bd34:	ce 01       	movw	r24, r28
    bd36:	89 5b       	subi	r24, 0xB9	; 185
    bd38:	9e 4f       	sbci	r25, 0xFE	; 254
    bd3a:	0e 94 d0 49 	call	0x93a0	; 0x93a0 <find_volume>
    bd3e:	8c 01       	movw	r16, r24
    bd40:	89 2b       	or	r24, r25
    bd42:	09 f0       	breq	.+2      	; 0xbd46 <f_getcwd+0x38>
    bd44:	08 c1       	rjmp	.+528    	; 0xbf56 <f_getcwd+0x248>
    bd46:	cb 5b       	subi	r28, 0xBB	; 187
    bd48:	de 4f       	sbci	r29, 0xFE	; 254
    bd4a:	88 81       	ld	r24, Y
    bd4c:	99 81       	ldd	r25, Y+1	; 0x01
    bd4e:	c5 54       	subi	r28, 0x45	; 69
    bd50:	d1 40       	sbci	r29, 0x01	; 1
    bd52:	c9 5e       	subi	r28, 0xE9	; 233
    bd54:	de 4f       	sbci	r29, 0xFE	; 254
    bd56:	99 83       	std	Y+1, r25	; 0x01
    bd58:	88 83       	st	Y, r24
    bd5a:	c7 51       	subi	r28, 0x17	; 23
    bd5c:	d1 40       	sbci	r29, 0x01	; 1
    bd5e:	80 e0       	ldi	r24, 0x00	; 0
    bd60:	92 e0       	ldi	r25, 0x02	; 2
    bd62:	0e 94 1e 6e 	call	0xdc3c	; 0xdc3c <ff_memalloc>
    bd66:	6c 01       	movw	r12, r24
    bd68:	00 97       	sbiw	r24, 0x00	; 0
    bd6a:	09 f4       	brne	.+2      	; 0xbd6e <f_getcwd+0x60>
    bd6c:	f6 c0       	rjmp	.+492    	; 0xbf5a <f_getcwd+0x24c>
    bd6e:	cb 5b       	subi	r28, 0xBB	; 187
    bd70:	de 4f       	sbci	r29, 0xFE	; 254
    bd72:	e8 81       	ld	r30, Y
    bd74:	f9 81       	ldd	r31, Y+1	; 0x01
    bd76:	c5 54       	subi	r28, 0x45	; 69
    bd78:	d1 40       	sbci	r29, 0x01	; 1
    bd7a:	94 87       	std	Z+12, r25	; 0x0c
    bd7c:	83 87       	std	Z+11, r24	; 0x0b
    bd7e:	85 89       	ldd	r24, Z+21	; 0x15
    bd80:	96 89       	ldd	r25, Z+22	; 0x16
    bd82:	a7 89       	ldd	r26, Z+23	; 0x17
    bd84:	b0 8d       	ldd	r27, Z+24	; 0x18
    bd86:	c3 5e       	subi	r28, 0xE3	; 227
    bd88:	de 4f       	sbci	r29, 0xFE	; 254
    bd8a:	88 83       	st	Y, r24
    bd8c:	99 83       	std	Y+1, r25	; 0x01
    bd8e:	aa 83       	std	Y+2, r26	; 0x02
    bd90:	bb 83       	std	Y+3, r27	; 0x03
    bd92:	cd 51       	subi	r28, 0x1D	; 29
    bd94:	d1 40       	sbci	r29, 0x01	; 1
    bd96:	75 01       	movw	r14, r10
    bd98:	ce 01       	movw	r24, r28
    bd9a:	01 96       	adiw	r24, 0x01	; 1
    bd9c:	4c 01       	movw	r8, r24
    bd9e:	8f e2       	ldi	r24, 0x2F	; 47
    bda0:	38 2e       	mov	r3, r24
    bda2:	c3 5e       	subi	r28, 0xE3	; 227
    bda4:	de 4f       	sbci	r29, 0xFE	; 254
    bda6:	48 80       	ld	r4, Y
    bda8:	59 80       	ldd	r5, Y+1	; 0x01
    bdaa:	6a 80       	ldd	r6, Y+2	; 0x02
    bdac:	7b 80       	ldd	r7, Y+3	; 0x03
    bdae:	cd 51       	subi	r28, 0x1D	; 29
    bdb0:	d1 40       	sbci	r29, 0x01	; 1
    bdb2:	41 14       	cp	r4, r1
    bdb4:	51 04       	cpc	r5, r1
    bdb6:	61 04       	cpc	r6, r1
    bdb8:	71 04       	cpc	r7, r1
    bdba:	09 f4       	brne	.+2      	; 0xbdbe <f_getcwd+0xb0>
    bdbc:	a5 c0       	rjmp	.+330    	; 0xbf08 <f_getcwd+0x1fa>
    bdbe:	40 e2       	ldi	r20, 0x20	; 32
    bdc0:	50 e0       	ldi	r21, 0x00	; 0
    bdc2:	60 e0       	ldi	r22, 0x00	; 0
    bdc4:	70 e0       	ldi	r23, 0x00	; 0
    bdc6:	ce 01       	movw	r24, r28
    bdc8:	89 5e       	subi	r24, 0xE9	; 233
    bdca:	9e 4f       	sbci	r25, 0xFE	; 254
    bdcc:	0e 94 29 4e 	call	0x9c52	; 0x9c52 <dir_sdi>
    bdd0:	00 97       	sbiw	r24, 0x00	; 0
    bdd2:	09 f0       	breq	.+2      	; 0xbdd6 <f_getcwd+0xc8>
    bdd4:	95 c0       	rjmp	.+298    	; 0xbf00 <f_getcwd+0x1f2>
    bdd6:	c3 5d       	subi	r28, 0xD3	; 211
    bdd8:	de 4f       	sbci	r29, 0xFE	; 254
    bdda:	48 81       	ld	r20, Y
    bddc:	59 81       	ldd	r21, Y+1	; 0x01
    bdde:	6a 81       	ldd	r22, Y+2	; 0x02
    bde0:	7b 81       	ldd	r23, Y+3	; 0x03
    bde2:	cd 52       	subi	r28, 0x2D	; 45
    bde4:	d1 40       	sbci	r29, 0x01	; 1
    bde6:	cb 5b       	subi	r28, 0xBB	; 187
    bde8:	de 4f       	sbci	r29, 0xFE	; 254
    bdea:	88 81       	ld	r24, Y
    bdec:	99 81       	ldd	r25, Y+1	; 0x01
    bdee:	c5 54       	subi	r28, 0x45	; 69
    bdf0:	d1 40       	sbci	r29, 0x01	; 1
    bdf2:	0e 94 50 49 	call	0x92a0	; 0x92a0 <move_window>
    bdf6:	00 97       	sbiw	r24, 0x00	; 0
    bdf8:	09 f0       	breq	.+2      	; 0xbdfc <f_getcwd+0xee>
    bdfa:	82 c0       	rjmp	.+260    	; 0xbf00 <f_getcwd+0x1f2>
    bdfc:	cf 5c       	subi	r28, 0xCF	; 207
    bdfe:	de 4f       	sbci	r29, 0xFE	; 254
    be00:	68 81       	ld	r22, Y
    be02:	79 81       	ldd	r23, Y+1	; 0x01
    be04:	c1 53       	subi	r28, 0x31	; 49
    be06:	d1 40       	sbci	r29, 0x01	; 1
    be08:	cb 5b       	subi	r28, 0xBB	; 187
    be0a:	de 4f       	sbci	r29, 0xFE	; 254
    be0c:	e8 81       	ld	r30, Y
    be0e:	f9 81       	ldd	r31, Y+1	; 0x01
    be10:	c5 54       	subi	r28, 0x45	; 69
    be12:	d1 40       	sbci	r29, 0x01	; 1
    be14:	80 81       	ld	r24, Z
    be16:	0e 94 68 48 	call	0x90d0	; 0x90d0 <ld_clust.isra.1>
    be1a:	c3 5e       	subi	r28, 0xE3	; 227
    be1c:	de 4f       	sbci	r29, 0xFE	; 254
    be1e:	68 83       	st	Y, r22
    be20:	79 83       	std	Y+1, r23	; 0x01
    be22:	8a 83       	std	Y+2, r24	; 0x02
    be24:	9b 83       	std	Y+3, r25	; 0x03
    be26:	cd 51       	subi	r28, 0x1D	; 29
    be28:	d1 40       	sbci	r29, 0x01	; 1
    be2a:	40 e0       	ldi	r20, 0x00	; 0
    be2c:	50 e0       	ldi	r21, 0x00	; 0
    be2e:	ba 01       	movw	r22, r20
    be30:	ce 01       	movw	r24, r28
    be32:	89 5e       	subi	r24, 0xE9	; 233
    be34:	9e 4f       	sbci	r25, 0xFE	; 254
    be36:	0e 94 29 4e 	call	0x9c52	; 0x9c52 <dir_sdi>
    be3a:	00 97       	sbiw	r24, 0x00	; 0
    be3c:	09 f0       	breq	.+2      	; 0xbe40 <f_getcwd+0x132>
    be3e:	60 c0       	rjmp	.+192    	; 0xbf00 <f_getcwd+0x1f2>
    be40:	60 e0       	ldi	r22, 0x00	; 0
    be42:	70 e0       	ldi	r23, 0x00	; 0
    be44:	ce 01       	movw	r24, r28
    be46:	89 5e       	subi	r24, 0xE9	; 233
    be48:	9e 4f       	sbci	r25, 0xFE	; 254
    be4a:	0e 94 85 52 	call	0xa50a	; 0xa50a <dir_read>
    be4e:	00 97       	sbiw	r24, 0x00	; 0
    be50:	09 f0       	breq	.+2      	; 0xbe54 <f_getcwd+0x146>
    be52:	86 c0       	rjmp	.+268    	; 0xbf60 <f_getcwd+0x252>
    be54:	cf 5c       	subi	r28, 0xCF	; 207
    be56:	de 4f       	sbci	r29, 0xFE	; 254
    be58:	68 81       	ld	r22, Y
    be5a:	79 81       	ldd	r23, Y+1	; 0x01
    be5c:	c1 53       	subi	r28, 0x31	; 49
    be5e:	d1 40       	sbci	r29, 0x01	; 1
    be60:	cb 5b       	subi	r28, 0xBB	; 187
    be62:	de 4f       	sbci	r29, 0xFE	; 254
    be64:	e8 81       	ld	r30, Y
    be66:	f9 81       	ldd	r31, Y+1	; 0x01
    be68:	c5 54       	subi	r28, 0x45	; 69
    be6a:	d1 40       	sbci	r29, 0x01	; 1
    be6c:	80 81       	ld	r24, Z
    be6e:	0e 94 68 48 	call	0x90d0	; 0x90d0 <ld_clust.isra.1>
    be72:	46 16       	cp	r4, r22
    be74:	57 06       	cpc	r5, r23
    be76:	68 06       	cpc	r6, r24
    be78:	79 06       	cpc	r7, r25
    be7a:	41 f4       	brne	.+16     	; 0xbe8c <f_getcwd+0x17e>
    be7c:	b4 01       	movw	r22, r8
    be7e:	ce 01       	movw	r24, r28
    be80:	89 5e       	subi	r24, 0xE9	; 233
    be82:	9e 4f       	sbci	r25, 0xFE	; 254
    be84:	0e 94 4b 50 	call	0xa096	; 0xa096 <get_fileinfo>
    be88:	f4 01       	movw	r30, r8
    be8a:	0a c0       	rjmp	.+20     	; 0xbea0 <f_getcwd+0x192>
    be8c:	60 e0       	ldi	r22, 0x00	; 0
    be8e:	70 e0       	ldi	r23, 0x00	; 0
    be90:	ce 01       	movw	r24, r28
    be92:	89 5e       	subi	r24, 0xE9	; 233
    be94:	9e 4f       	sbci	r25, 0xFE	; 254
    be96:	0e 94 23 51 	call	0xa246	; 0xa246 <dir_next>
    be9a:	00 97       	sbiw	r24, 0x00	; 0
    be9c:	89 f2       	breq	.-94     	; 0xbe40 <f_getcwd+0x132>
    be9e:	60 c0       	rjmp	.+192    	; 0xbf60 <f_getcwd+0x252>
    bea0:	cf 01       	movw	r24, r30
    bea2:	88 19       	sub	r24, r8
    bea4:	99 09       	sbc	r25, r9
    bea6:	31 96       	adiw	r30, 0x01	; 1
    bea8:	25 89       	ldd	r18, Z+21	; 0x15
    beaa:	21 11       	cpse	r18, r1
    beac:	f9 cf       	rjmp	.-14     	; 0xbea0 <f_getcwd+0x192>
    beae:	9c 01       	movw	r18, r24
    beb0:	2d 5f       	subi	r18, 0xFD	; 253
    beb2:	3f 4f       	sbci	r19, 0xFF	; 255
    beb4:	e2 16       	cp	r14, r18
    beb6:	f3 06       	cpc	r15, r19
    beb8:	28 f1       	brcs	.+74     	; 0xbf04 <f_getcwd+0x1f6>
    beba:	f4 01       	movw	r30, r8
    bebc:	e8 0f       	add	r30, r24
    bebe:	f9 1f       	adc	r31, r25
    bec0:	97 01       	movw	r18, r14
    bec2:	e8 15       	cp	r30, r8
    bec4:	f9 05       	cpc	r31, r9
    bec6:	71 f0       	breq	.+28     	; 0xbee4 <f_getcwd+0x1d6>
    bec8:	21 50       	subi	r18, 0x01	; 1
    beca:	31 09       	sbc	r19, r1
    becc:	45 89       	ldd	r20, Z+21	; 0x15
    bece:	c9 5b       	subi	r28, 0xB9	; 185
    bed0:	de 4f       	sbci	r29, 0xFE	; 254
    bed2:	a8 81       	ld	r26, Y
    bed4:	b9 81       	ldd	r27, Y+1	; 0x01
    bed6:	c7 54       	subi	r28, 0x47	; 71
    bed8:	d1 40       	sbci	r29, 0x01	; 1
    beda:	a2 0f       	add	r26, r18
    bedc:	b3 1f       	adc	r27, r19
    bede:	4c 93       	st	X, r20
    bee0:	31 97       	sbiw	r30, 0x01	; 1
    bee2:	ef cf       	rjmp	.-34     	; 0xbec2 <f_getcwd+0x1b4>
    bee4:	80 95       	com	r24
    bee6:	90 95       	com	r25
    bee8:	e8 0e       	add	r14, r24
    beea:	f9 1e       	adc	r15, r25
    beec:	c9 5b       	subi	r28, 0xB9	; 185
    beee:	de 4f       	sbci	r29, 0xFE	; 254
    bef0:	e8 81       	ld	r30, Y
    bef2:	f9 81       	ldd	r31, Y+1	; 0x01
    bef4:	c7 54       	subi	r28, 0x47	; 71
    bef6:	d1 40       	sbci	r29, 0x01	; 1
    bef8:	ee 0d       	add	r30, r14
    befa:	ff 1d       	adc	r31, r15
    befc:	30 82       	st	Z, r3
    befe:	51 cf       	rjmp	.-350    	; 0xbda2 <f_getcwd+0x94>
    bf00:	8c 01       	movw	r16, r24
    bf02:	02 c0       	rjmp	.+4      	; 0xbf08 <f_getcwd+0x1fa>
    bf04:	01 e1       	ldi	r16, 0x11	; 17
    bf06:	10 e0       	ldi	r17, 0x00	; 0
    bf08:	c9 5b       	subi	r28, 0xB9	; 185
    bf0a:	de 4f       	sbci	r29, 0xFE	; 254
    bf0c:	e8 81       	ld	r30, Y
    bf0e:	f9 81       	ldd	r31, Y+1	; 0x01
    bf10:	c7 54       	subi	r28, 0x47	; 71
    bf12:	d1 40       	sbci	r29, 0x01	; 1
    bf14:	01 15       	cp	r16, r1
    bf16:	11 05       	cpc	r17, r1
    bf18:	d1 f4       	brne	.+52     	; 0xbf4e <f_getcwd+0x240>
    bf1a:	ea 14       	cp	r14, r10
    bf1c:	fb 04       	cpc	r15, r11
    bf1e:	21 f4       	brne	.+8      	; 0xbf28 <f_getcwd+0x21a>
    bf20:	8f e2       	ldi	r24, 0x2F	; 47
    bf22:	80 83       	st	Z, r24
    bf24:	31 96       	adiw	r30, 0x01	; 1
    bf26:	13 c0       	rjmp	.+38     	; 0xbf4e <f_getcwd+0x240>
    bf28:	31 96       	adiw	r30, 0x01	; 1
    bf2a:	c9 5b       	subi	r28, 0xB9	; 185
    bf2c:	de 4f       	sbci	r29, 0xFE	; 254
    bf2e:	a8 81       	ld	r26, Y
    bf30:	b9 81       	ldd	r27, Y+1	; 0x01
    bf32:	c7 54       	subi	r28, 0x47	; 71
    bf34:	d1 40       	sbci	r29, 0x01	; 1
    bf36:	ae 0d       	add	r26, r14
    bf38:	bf 1d       	adc	r27, r15
    bf3a:	8c 91       	ld	r24, X
    bf3c:	df 01       	movw	r26, r30
    bf3e:	11 97       	sbiw	r26, 0x01	; 1
    bf40:	8c 93       	st	X, r24
    bf42:	c7 01       	movw	r24, r14
    bf44:	01 96       	adiw	r24, 0x01	; 1
    bf46:	7c 01       	movw	r14, r24
    bf48:	8a 15       	cp	r24, r10
    bf4a:	9b 05       	cpc	r25, r11
    bf4c:	68 f3       	brcs	.-38     	; 0xbf28 <f_getcwd+0x21a>
    bf4e:	10 82       	st	Z, r1
    bf50:	c6 01       	movw	r24, r12
    bf52:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <ff_memfree>
    bf56:	c8 01       	movw	r24, r16
    bf58:	09 c0       	rjmp	.+18     	; 0xbf6c <f_getcwd+0x25e>
    bf5a:	81 e1       	ldi	r24, 0x11	; 17
    bf5c:	90 e0       	ldi	r25, 0x00	; 0
    bf5e:	06 c0       	rjmp	.+12     	; 0xbf6c <f_getcwd+0x25e>
    bf60:	8c 01       	movw	r16, r24
    bf62:	04 97       	sbiw	r24, 0x04	; 4
    bf64:	89 f6       	brne	.-94     	; 0xbf08 <f_getcwd+0x1fa>
    bf66:	02 e0       	ldi	r16, 0x02	; 2
    bf68:	10 e0       	ldi	r17, 0x00	; 0
    bf6a:	ce cf       	rjmp	.-100    	; 0xbf08 <f_getcwd+0x1fa>
    bf6c:	c8 5b       	subi	r28, 0xB8	; 184
    bf6e:	de 4f       	sbci	r29, 0xFE	; 254
    bf70:	e1 e1       	ldi	r30, 0x11	; 17
    bf72:	0c 94 51 ec 	jmp	0x1d8a2	; 0x1d8a2 <__epilogue_restores__+0x2>

0000bf76 <f_lseek>:
    bf76:	aa e0       	ldi	r26, 0x0A	; 10
    bf78:	b0 e0       	ldi	r27, 0x00	; 0
    bf7a:	e1 ec       	ldi	r30, 0xC1	; 193
    bf7c:	ff e5       	ldi	r31, 0x5F	; 95
    bf7e:	0c 94 34 ec 	jmp	0x1d868	; 0x1d868 <__prologue_saves__>
    bf82:	1c 01       	movw	r2, r24
    bf84:	6a 01       	movw	r12, r20
    bf86:	7b 01       	movw	r14, r22
    bf88:	be 01       	movw	r22, r28
    bf8a:	6f 5f       	subi	r22, 0xFF	; 255
    bf8c:	7f 4f       	sbci	r23, 0xFF	; 255
    bf8e:	0e 94 30 48 	call	0x9060	; 0x9060 <validate>
    bf92:	00 97       	sbiw	r24, 0x00	; 0
    bf94:	09 f0       	breq	.+2      	; 0xbf98 <f_lseek+0x22>
    bf96:	c8 c2       	rjmp	.+1424   	; 0xc528 <f_lseek+0x5b2>
    bf98:	d1 01       	movw	r26, r2
    bf9a:	1f 96       	adiw	r26, 0x0f	; 15
    bf9c:	8c 91       	ld	r24, X
    bf9e:	1f 97       	sbiw	r26, 0x0f	; 15
    bfa0:	90 e0       	ldi	r25, 0x00	; 0
    bfa2:	00 97       	sbiw	r24, 0x00	; 0
    bfa4:	09 f0       	breq	.+2      	; 0xbfa8 <f_lseek+0x32>
    bfa6:	c0 c2       	rjmp	.+1408   	; 0xc528 <f_lseek+0x5b2>
    bfa8:	92 96       	adiw	r26, 0x22	; 34
    bfaa:	ed 91       	ld	r30, X+
    bfac:	fc 91       	ld	r31, X
    bfae:	93 97       	sbiw	r26, 0x23	; 35
    bfb0:	30 97       	sbiw	r30, 0x00	; 0
    bfb2:	09 f4       	brne	.+2      	; 0xbfb6 <f_lseek+0x40>
    bfb4:	3a c1       	rjmp	.+628    	; 0xc22a <f_lseek+0x2b4>
    bfb6:	bf ef       	ldi	r27, 0xFF	; 255
    bfb8:	cb 16       	cp	r12, r27
    bfba:	db 06       	cpc	r13, r27
    bfbc:	eb 06       	cpc	r14, r27
    bfbe:	fb 06       	cpc	r15, r27
    bfc0:	09 f0       	breq	.+2      	; 0xbfc4 <f_lseek+0x4e>
    bfc2:	9f c0       	rjmp	.+318    	; 0xc102 <f_lseek+0x18c>
    bfc4:	8f 01       	movw	r16, r30
    bfc6:	0c 5f       	subi	r16, 0xFC	; 252
    bfc8:	1f 4f       	sbci	r17, 0xFF	; 255
    bfca:	20 81       	ld	r18, Z
    bfcc:	31 81       	ldd	r19, Z+1	; 0x01
    bfce:	42 81       	ldd	r20, Z+2	; 0x02
    bfd0:	53 81       	ldd	r21, Z+3	; 0x03
    bfd2:	2f 83       	std	Y+7, r18	; 0x07
    bfd4:	38 87       	std	Y+8, r19	; 0x08
    bfd6:	49 87       	std	Y+9, r20	; 0x09
    bfd8:	5a 87       	std	Y+10, r21	; 0x0a
    bfda:	d1 01       	movw	r26, r2
    bfdc:	16 96       	adiw	r26, 0x06	; 6
    bfde:	8d 90       	ld	r8, X+
    bfe0:	9d 90       	ld	r9, X+
    bfe2:	ad 90       	ld	r10, X+
    bfe4:	bc 90       	ld	r11, X
    bfe6:	19 97       	sbiw	r26, 0x09	; 9
    bfe8:	52 e0       	ldi	r21, 0x02	; 2
    bfea:	c5 2e       	mov	r12, r21
    bfec:	d1 2c       	mov	r13, r1
    bfee:	e1 2c       	mov	r14, r1
    bff0:	f1 2c       	mov	r15, r1
    bff2:	81 14       	cp	r8, r1
    bff4:	91 04       	cpc	r9, r1
    bff6:	a1 04       	cpc	r10, r1
    bff8:	b1 04       	cpc	r11, r1
    bffa:	09 f4       	brne	.+2      	; 0xbffe <f_lseek+0x88>
    bffc:	68 c0       	rjmp	.+208    	; 0xc0ce <f_lseek+0x158>
    bffe:	24 01       	movw	r4, r8
    c000:	35 01       	movw	r6, r10
    c002:	1b 82       	std	Y+3, r1	; 0x03
    c004:	1c 82       	std	Y+4, r1	; 0x04
    c006:	1d 82       	std	Y+5, r1	; 0x05
    c008:	1e 82       	std	Y+6, r1	; 0x06
    c00a:	2b 81       	ldd	r18, Y+3	; 0x03
    c00c:	3c 81       	ldd	r19, Y+4	; 0x04
    c00e:	4d 81       	ldd	r20, Y+5	; 0x05
    c010:	5e 81       	ldd	r21, Y+6	; 0x06
    c012:	2f 5f       	subi	r18, 0xFF	; 255
    c014:	3f 4f       	sbci	r19, 0xFF	; 255
    c016:	4f 4f       	sbci	r20, 0xFF	; 255
    c018:	5f 4f       	sbci	r21, 0xFF	; 255
    c01a:	2b 83       	std	Y+3, r18	; 0x03
    c01c:	3c 83       	std	Y+4, r19	; 0x04
    c01e:	4d 83       	std	Y+5, r20	; 0x05
    c020:	5e 83       	std	Y+6, r21	; 0x06
    c022:	b3 01       	movw	r22, r6
    c024:	a2 01       	movw	r20, r4
    c026:	d1 01       	movw	r26, r2
    c028:	8d 91       	ld	r24, X+
    c02a:	9c 91       	ld	r25, X
    c02c:	0e 94 76 4d 	call	0x9aec	; 0x9aec <get_fat.isra.7>
    c030:	62 30       	cpi	r22, 0x02	; 2
    c032:	71 05       	cpc	r23, r1
    c034:	81 05       	cpc	r24, r1
    c036:	91 05       	cpc	r25, r1
    c038:	20 f4       	brcc	.+8      	; 0xc042 <f_lseek+0xcc>
    c03a:	82 e0       	ldi	r24, 0x02	; 2
    c03c:	f1 01       	movw	r30, r2
    c03e:	87 87       	std	Z+15, r24	; 0x0f
    c040:	0a c0       	rjmp	.+20     	; 0xc056 <f_lseek+0xe0>
    c042:	6f 3f       	cpi	r22, 0xFF	; 255
    c044:	ff ef       	ldi	r31, 0xFF	; 255
    c046:	7f 07       	cpc	r23, r31
    c048:	8f 07       	cpc	r24, r31
    c04a:	9f 07       	cpc	r25, r31
    c04c:	31 f4       	brne	.+12     	; 0xc05a <f_lseek+0xe4>
    c04e:	81 e0       	ldi	r24, 0x01	; 1
    c050:	d1 01       	movw	r26, r2
    c052:	1f 96       	adiw	r26, 0x0f	; 15
    c054:	8c 93       	st	X, r24
    c056:	90 e0       	ldi	r25, 0x00	; 0
    c058:	67 c2       	rjmp	.+1230   	; 0xc528 <f_lseek+0x5b2>
    c05a:	a3 01       	movw	r20, r6
    c05c:	92 01       	movw	r18, r4
    c05e:	2f 5f       	subi	r18, 0xFF	; 255
    c060:	3f 4f       	sbci	r19, 0xFF	; 255
    c062:	4f 4f       	sbci	r20, 0xFF	; 255
    c064:	5f 4f       	sbci	r21, 0xFF	; 255
    c066:	2b 01       	movw	r4, r22
    c068:	3c 01       	movw	r6, r24
    c06a:	62 17       	cp	r22, r18
    c06c:	73 07       	cpc	r23, r19
    c06e:	84 07       	cpc	r24, r20
    c070:	95 07       	cpc	r25, r21
    c072:	59 f2       	breq	.-106    	; 0xc00a <f_lseek+0x94>
    c074:	b2 e0       	ldi	r27, 0x02	; 2
    c076:	cb 0e       	add	r12, r27
    c078:	d1 1c       	adc	r13, r1
    c07a:	e1 1c       	adc	r14, r1
    c07c:	f1 1c       	adc	r15, r1
    c07e:	2f 81       	ldd	r18, Y+7	; 0x07
    c080:	38 85       	ldd	r19, Y+8	; 0x08
    c082:	49 85       	ldd	r20, Y+9	; 0x09
    c084:	5a 85       	ldd	r21, Y+10	; 0x0a
    c086:	2c 15       	cp	r18, r12
    c088:	3d 05       	cpc	r19, r13
    c08a:	4e 05       	cpc	r20, r14
    c08c:	5f 05       	cpc	r21, r15
    c08e:	88 f0       	brcs	.+34     	; 0xc0b2 <f_lseek+0x13c>
    c090:	2b 81       	ldd	r18, Y+3	; 0x03
    c092:	3c 81       	ldd	r19, Y+4	; 0x04
    c094:	4d 81       	ldd	r20, Y+5	; 0x05
    c096:	5e 81       	ldd	r21, Y+6	; 0x06
    c098:	d8 01       	movw	r26, r16
    c09a:	2d 93       	st	X+, r18
    c09c:	3d 93       	st	X+, r19
    c09e:	4d 93       	st	X+, r20
    c0a0:	5c 93       	st	X, r21
    c0a2:	13 97       	sbiw	r26, 0x03	; 3
    c0a4:	f8 01       	movw	r30, r16
    c0a6:	84 82       	std	Z+4, r8	; 0x04
    c0a8:	95 82       	std	Z+5, r9	; 0x05
    c0aa:	a6 82       	std	Z+6, r10	; 0x06
    c0ac:	b7 82       	std	Z+7, r11	; 0x07
    c0ae:	08 5f       	subi	r16, 0xF8	; 248
    c0b0:	1f 4f       	sbci	r17, 0xFF	; 255
    c0b2:	e9 81       	ldd	r30, Y+1	; 0x01
    c0b4:	fa 81       	ldd	r31, Y+2	; 0x02
    c0b6:	81 8c       	ldd	r8, Z+25	; 0x19
    c0b8:	92 8c       	ldd	r9, Z+26	; 0x1a
    c0ba:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c0bc:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c0be:	68 15       	cp	r22, r8
    c0c0:	79 05       	cpc	r23, r9
    c0c2:	8a 05       	cpc	r24, r10
    c0c4:	9b 05       	cpc	r25, r11
    c0c6:	18 f4       	brcc	.+6      	; 0xc0ce <f_lseek+0x158>
    c0c8:	4b 01       	movw	r8, r22
    c0ca:	5c 01       	movw	r10, r24
    c0cc:	98 cf       	rjmp	.-208    	; 0xbffe <f_lseek+0x88>
    c0ce:	d1 01       	movw	r26, r2
    c0d0:	92 96       	adiw	r26, 0x22	; 34
    c0d2:	ed 91       	ld	r30, X+
    c0d4:	fc 91       	ld	r31, X
    c0d6:	93 97       	sbiw	r26, 0x23	; 35
    c0d8:	c0 82       	st	Z, r12
    c0da:	d1 82       	std	Z+1, r13	; 0x01
    c0dc:	e2 82       	std	Z+2, r14	; 0x02
    c0de:	f3 82       	std	Z+3, r15	; 0x03
    c0e0:	2f 81       	ldd	r18, Y+7	; 0x07
    c0e2:	38 85       	ldd	r19, Y+8	; 0x08
    c0e4:	49 85       	ldd	r20, Y+9	; 0x09
    c0e6:	5a 85       	ldd	r21, Y+10	; 0x0a
    c0e8:	2c 15       	cp	r18, r12
    c0ea:	3d 05       	cpc	r19, r13
    c0ec:	4e 05       	cpc	r20, r14
    c0ee:	5f 05       	cpc	r21, r15
    c0f0:	08 f4       	brcc	.+2      	; 0xc0f4 <f_lseek+0x17e>
    c0f2:	11 c2       	rjmp	.+1058   	; 0xc516 <f_lseek+0x5a0>
    c0f4:	d8 01       	movw	r26, r16
    c0f6:	1d 92       	st	X+, r1
    c0f8:	1d 92       	st	X+, r1
    c0fa:	1d 92       	st	X+, r1
    c0fc:	1c 92       	st	X, r1
    c0fe:	13 97       	sbiw	r26, 0x03	; 3
    c100:	08 c2       	rjmp	.+1040   	; 0xc512 <f_lseek+0x59c>
    c102:	f1 01       	movw	r30, r2
    c104:	82 85       	ldd	r24, Z+10	; 0x0a
    c106:	93 85       	ldd	r25, Z+11	; 0x0b
    c108:	a4 85       	ldd	r26, Z+12	; 0x0c
    c10a:	b5 85       	ldd	r27, Z+13	; 0x0d
    c10c:	46 01       	movw	r8, r12
    c10e:	57 01       	movw	r10, r14
    c110:	8c 15       	cp	r24, r12
    c112:	9d 05       	cpc	r25, r13
    c114:	ae 05       	cpc	r26, r14
    c116:	bf 05       	cpc	r27, r15
    c118:	10 f4       	brcc	.+4      	; 0xc11e <f_lseek+0x1a8>
    c11a:	4c 01       	movw	r8, r24
    c11c:	5d 01       	movw	r10, r26
    c11e:	d1 01       	movw	r26, r2
    c120:	50 96       	adiw	r26, 0x10	; 16
    c122:	8d 92       	st	X+, r8
    c124:	9d 92       	st	X+, r9
    c126:	ad 92       	st	X+, r10
    c128:	bc 92       	st	X, r11
    c12a:	53 97       	sbiw	r26, 0x13	; 19
    c12c:	81 14       	cp	r8, r1
    c12e:	91 04       	cpc	r9, r1
    c130:	a1 04       	cpc	r10, r1
    c132:	b1 04       	cpc	r11, r1
    c134:	09 f4       	brne	.+2      	; 0xc138 <f_lseek+0x1c2>
    c136:	ed c1       	rjmp	.+986    	; 0xc512 <f_lseek+0x59c>
    c138:	24 01       	movw	r4, r8
    c13a:	35 01       	movw	r6, r10
    c13c:	b1 e0       	ldi	r27, 0x01	; 1
    c13e:	4b 1a       	sub	r4, r27
    c140:	51 08       	sbc	r5, r1
    c142:	61 08       	sbc	r6, r1
    c144:	71 08       	sbc	r7, r1
    c146:	b3 01       	movw	r22, r6
    c148:	a2 01       	movw	r20, r4
    c14a:	c1 01       	movw	r24, r2
    c14c:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <clmt_clust>
    c150:	ab 01       	movw	r20, r22
    c152:	bc 01       	movw	r22, r24
    c154:	f1 01       	movw	r30, r2
    c156:	44 8b       	std	Z+20, r20	; 0x14
    c158:	55 8b       	std	Z+21, r21	; 0x15
    c15a:	66 8b       	std	Z+22, r22	; 0x16
    c15c:	77 8b       	std	Z+23, r23	; 0x17
    c15e:	e9 80       	ldd	r14, Y+1	; 0x01
    c160:	fa 80       	ldd	r15, Y+2	; 0x02
    c162:	c7 01       	movw	r24, r14
    c164:	0e 94 9d 47 	call	0x8f3a	; 0x8f3a <clust2sect>
    c168:	61 15       	cp	r22, r1
    c16a:	71 05       	cpc	r23, r1
    c16c:	81 05       	cpc	r24, r1
    c16e:	91 05       	cpc	r25, r1
    c170:	09 f4       	brne	.+2      	; 0xc174 <f_lseek+0x1fe>
    c172:	63 cf       	rjmp	.-314    	; 0xc03a <f_lseek+0xc4>
    c174:	95 01       	movw	r18, r10
    c176:	84 01       	movw	r16, r8
    c178:	11 70       	andi	r17, 0x01	; 1
    c17a:	22 27       	eor	r18, r18
    c17c:	33 27       	eor	r19, r19
    c17e:	01 15       	cp	r16, r1
    c180:	11 05       	cpc	r17, r1
    c182:	21 05       	cpc	r18, r1
    c184:	31 05       	cpc	r19, r1
    c186:	09 f4       	brne	.+2      	; 0xc18a <f_lseek+0x214>
    c188:	c4 c1       	rjmp	.+904    	; 0xc512 <f_lseek+0x59c>
    c18a:	d7 01       	movw	r26, r14
    c18c:	19 96       	adiw	r26, 0x09	; 9
    c18e:	8d 90       	ld	r8, X+
    c190:	9c 90       	ld	r9, X
    c192:	1a 97       	sbiw	r26, 0x0a	; 10
    c194:	b1 e0       	ldi	r27, 0x01	; 1
    c196:	8b 1a       	sub	r8, r27
    c198:	91 08       	sbc	r9, r1
    c19a:	a1 2c       	mov	r10, r1
    c19c:	b1 2c       	mov	r11, r1
    c19e:	49 e0       	ldi	r20, 0x09	; 9
    c1a0:	76 94       	lsr	r7
    c1a2:	67 94       	ror	r6
    c1a4:	57 94       	ror	r5
    c1a6:	47 94       	ror	r4
    c1a8:	4a 95       	dec	r20
    c1aa:	d1 f7       	brne	.-12     	; 0xc1a0 <f_lseek+0x22a>
    c1ac:	48 20       	and	r4, r8
    c1ae:	59 20       	and	r5, r9
    c1b0:	6a 20       	and	r6, r10
    c1b2:	7b 20       	and	r7, r11
    c1b4:	53 01       	movw	r10, r6
    c1b6:	42 01       	movw	r8, r4
    c1b8:	86 0e       	add	r8, r22
    c1ba:	97 1e       	adc	r9, r23
    c1bc:	a8 1e       	adc	r10, r24
    c1be:	b9 1e       	adc	r11, r25
    c1c0:	f1 01       	movw	r30, r2
    c1c2:	20 8d       	ldd	r18, Z+24	; 0x18
    c1c4:	31 8d       	ldd	r19, Z+25	; 0x19
    c1c6:	42 8d       	ldd	r20, Z+26	; 0x1a
    c1c8:	53 8d       	ldd	r21, Z+27	; 0x1b
    c1ca:	82 16       	cp	r8, r18
    c1cc:	93 06       	cpc	r9, r19
    c1ce:	a4 06       	cpc	r10, r20
    c1d0:	b5 06       	cpc	r11, r21
    c1d2:	09 f4       	brne	.+2      	; 0xc1d6 <f_lseek+0x260>
    c1d4:	9e c1       	rjmp	.+828    	; 0xc512 <f_lseek+0x59c>
    c1d6:	86 85       	ldd	r24, Z+14	; 0x0e
    c1d8:	b1 01       	movw	r22, r2
    c1da:	6c 5d       	subi	r22, 0xDC	; 220
    c1dc:	7f 4f       	sbci	r23, 0xFF	; 255
    c1de:	6b 01       	movw	r12, r22
    c1e0:	87 ff       	sbrs	r24, 7
    c1e2:	0e c0       	rjmp	.+28     	; 0xc200 <f_lseek+0x28a>
    c1e4:	01 e0       	ldi	r16, 0x01	; 1
    c1e6:	10 e0       	ldi	r17, 0x00	; 0
    c1e8:	d7 01       	movw	r26, r14
    c1ea:	11 96       	adiw	r26, 0x01	; 1
    c1ec:	8c 91       	ld	r24, X
    c1ee:	0e 94 bb 6e 	call	0xdd76	; 0xdd76 <disk_write>
    c1f2:	89 2b       	or	r24, r25
    c1f4:	09 f0       	breq	.+2      	; 0xc1f8 <f_lseek+0x282>
    c1f6:	2b cf       	rjmp	.-426    	; 0xc04e <f_lseek+0xd8>
    c1f8:	f1 01       	movw	r30, r2
    c1fa:	86 85       	ldd	r24, Z+14	; 0x0e
    c1fc:	8f 77       	andi	r24, 0x7F	; 127
    c1fe:	86 87       	std	Z+14, r24	; 0x0e
    c200:	e9 81       	ldd	r30, Y+1	; 0x01
    c202:	fa 81       	ldd	r31, Y+2	; 0x02
    c204:	01 e0       	ldi	r16, 0x01	; 1
    c206:	10 e0       	ldi	r17, 0x00	; 0
    c208:	a5 01       	movw	r20, r10
    c20a:	94 01       	movw	r18, r8
    c20c:	b6 01       	movw	r22, r12
    c20e:	81 81       	ldd	r24, Z+1	; 0x01
    c210:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <disk_read>
    c214:	89 2b       	or	r24, r25
    c216:	09 f0       	breq	.+2      	; 0xc21a <f_lseek+0x2a4>
    c218:	1a cf       	rjmp	.-460    	; 0xc04e <f_lseek+0xd8>
    c21a:	d1 01       	movw	r26, r2
    c21c:	58 96       	adiw	r26, 0x18	; 24
    c21e:	8d 92       	st	X+, r8
    c220:	9d 92       	st	X+, r9
    c222:	ad 92       	st	X+, r10
    c224:	bc 92       	st	X, r11
    c226:	5b 97       	sbiw	r26, 0x1b	; 27
    c228:	74 c1       	rjmp	.+744    	; 0xc512 <f_lseek+0x59c>
    c22a:	f1 01       	movw	r30, r2
    c22c:	82 85       	ldd	r24, Z+10	; 0x0a
    c22e:	93 85       	ldd	r25, Z+11	; 0x0b
    c230:	a4 85       	ldd	r26, Z+12	; 0x0c
    c232:	b5 85       	ldd	r27, Z+13	; 0x0d
    c234:	8c 15       	cp	r24, r12
    c236:	9d 05       	cpc	r25, r13
    c238:	ae 05       	cpc	r26, r14
    c23a:	bf 05       	cpc	r27, r15
    c23c:	28 f4       	brcc	.+10     	; 0xc248 <f_lseek+0x2d2>
    c23e:	26 85       	ldd	r18, Z+14	; 0x0e
    c240:	21 fd       	sbrc	r18, 1
    c242:	02 c0       	rjmp	.+4      	; 0xc248 <f_lseek+0x2d2>
    c244:	6c 01       	movw	r12, r24
    c246:	7d 01       	movw	r14, r26
    c248:	d1 01       	movw	r26, r2
    c24a:	50 96       	adiw	r26, 0x10	; 16
    c24c:	4d 90       	ld	r4, X+
    c24e:	5d 90       	ld	r5, X+
    c250:	6d 90       	ld	r6, X+
    c252:	7c 90       	ld	r7, X
    c254:	53 97       	sbiw	r26, 0x13	; 19
    c256:	f1 01       	movw	r30, r2
    c258:	10 8a       	std	Z+16, r1	; 0x10
    c25a:	11 8a       	std	Z+17, r1	; 0x11
    c25c:	12 8a       	std	Z+18, r1	; 0x12
    c25e:	13 8a       	std	Z+19, r1	; 0x13
    c260:	c1 14       	cp	r12, r1
    c262:	d1 04       	cpc	r13, r1
    c264:	e1 04       	cpc	r14, r1
    c266:	f1 04       	cpc	r15, r1
    c268:	09 f4       	brne	.+2      	; 0xc26c <f_lseek+0x2f6>
    c26a:	57 c1       	rjmp	.+686    	; 0xc51a <f_lseek+0x5a4>
    c26c:	e9 81       	ldd	r30, Y+1	; 0x01
    c26e:	fa 81       	ldd	r31, Y+2	; 0x02
    c270:	81 84       	ldd	r8, Z+9	; 0x09
    c272:	92 84       	ldd	r9, Z+10	; 0x0a
    c274:	a1 2c       	mov	r10, r1
    c276:	b1 2c       	mov	r11, r1
    c278:	39 e0       	ldi	r19, 0x09	; 9
    c27a:	88 0c       	add	r8, r8
    c27c:	99 1c       	adc	r9, r9
    c27e:	aa 1c       	adc	r10, r10
    c280:	bb 1c       	adc	r11, r11
    c282:	3a 95       	dec	r19
    c284:	d1 f7       	brne	.-12     	; 0xc27a <f_lseek+0x304>
    c286:	41 14       	cp	r4, r1
    c288:	51 04       	cpc	r5, r1
    c28a:	61 04       	cpc	r6, r1
    c28c:	71 04       	cpc	r7, r1
    c28e:	09 f4       	brne	.+2      	; 0xc292 <f_lseek+0x31c>
    c290:	3f c0       	rjmp	.+126    	; 0xc310 <f_lseek+0x39a>
    c292:	f1 e0       	ldi	r31, 0x01	; 1
    c294:	4f 1a       	sub	r4, r31
    c296:	51 08       	sbc	r5, r1
    c298:	61 08       	sbc	r6, r1
    c29a:	71 08       	sbc	r7, r1
    c29c:	c7 01       	movw	r24, r14
    c29e:	b6 01       	movw	r22, r12
    c2a0:	61 50       	subi	r22, 0x01	; 1
    c2a2:	71 09       	sbc	r23, r1
    c2a4:	81 09       	sbc	r24, r1
    c2a6:	91 09       	sbc	r25, r1
    c2a8:	a5 01       	movw	r20, r10
    c2aa:	94 01       	movw	r18, r8
    c2ac:	0e 94 c7 eb 	call	0x1d78e	; 0x1d78e <__udivmodsi4>
    c2b0:	2b 83       	std	Y+3, r18	; 0x03
    c2b2:	3c 83       	std	Y+4, r19	; 0x04
    c2b4:	4d 83       	std	Y+5, r20	; 0x05
    c2b6:	5e 83       	std	Y+6, r21	; 0x06
    c2b8:	c3 01       	movw	r24, r6
    c2ba:	b2 01       	movw	r22, r4
    c2bc:	a5 01       	movw	r20, r10
    c2be:	94 01       	movw	r18, r8
    c2c0:	0e 94 c7 eb 	call	0x1d78e	; 0x1d78e <__udivmodsi4>
    c2c4:	6b 81       	ldd	r22, Y+3	; 0x03
    c2c6:	7c 81       	ldd	r23, Y+4	; 0x04
    c2c8:	8d 81       	ldd	r24, Y+5	; 0x05
    c2ca:	9e 81       	ldd	r25, Y+6	; 0x06
    c2cc:	62 17       	cp	r22, r18
    c2ce:	73 07       	cpc	r23, r19
    c2d0:	84 07       	cpc	r24, r20
    c2d2:	95 07       	cpc	r25, r21
    c2d4:	e8 f0       	brcs	.+58     	; 0xc310 <f_lseek+0x39a>
    c2d6:	88 27       	eor	r24, r24
    c2d8:	99 27       	eor	r25, r25
    c2da:	dc 01       	movw	r26, r24
    c2dc:	88 19       	sub	r24, r8
    c2de:	99 09       	sbc	r25, r9
    c2e0:	aa 09       	sbc	r26, r10
    c2e2:	bb 09       	sbc	r27, r11
    c2e4:	48 22       	and	r4, r24
    c2e6:	59 22       	and	r5, r25
    c2e8:	6a 22       	and	r6, r26
    c2ea:	7b 22       	and	r7, r27
    c2ec:	d1 01       	movw	r26, r2
    c2ee:	50 96       	adiw	r26, 0x10	; 16
    c2f0:	4d 92       	st	X+, r4
    c2f2:	5d 92       	st	X+, r5
    c2f4:	6d 92       	st	X+, r6
    c2f6:	7c 92       	st	X, r7
    c2f8:	53 97       	sbiw	r26, 0x13	; 19
    c2fa:	c4 18       	sub	r12, r4
    c2fc:	d5 08       	sbc	r13, r5
    c2fe:	e6 08       	sbc	r14, r6
    c300:	f7 08       	sbc	r15, r7
    c302:	54 96       	adiw	r26, 0x14	; 20
    c304:	4d 91       	ld	r20, X+
    c306:	5d 91       	ld	r21, X+
    c308:	6d 91       	ld	r22, X+
    c30a:	7c 91       	ld	r23, X
    c30c:	57 97       	sbiw	r26, 0x17	; 23
    c30e:	2b c0       	rjmp	.+86     	; 0xc366 <f_lseek+0x3f0>
    c310:	f1 01       	movw	r30, r2
    c312:	46 81       	ldd	r20, Z+6	; 0x06
    c314:	57 81       	ldd	r21, Z+7	; 0x07
    c316:	60 85       	ldd	r22, Z+8	; 0x08
    c318:	71 85       	ldd	r23, Z+9	; 0x09
    c31a:	41 15       	cp	r20, r1
    c31c:	51 05       	cpc	r21, r1
    c31e:	61 05       	cpc	r22, r1
    c320:	71 05       	cpc	r23, r1
    c322:	e1 f4       	brne	.+56     	; 0xc35c <f_lseek+0x3e6>
    c324:	40 e0       	ldi	r20, 0x00	; 0
    c326:	50 e0       	ldi	r21, 0x00	; 0
    c328:	ba 01       	movw	r22, r20
    c32a:	c1 01       	movw	r24, r2
    c32c:	0e 94 e9 4e 	call	0x9dd2	; 0x9dd2 <create_chain>
    c330:	ab 01       	movw	r20, r22
    c332:	bc 01       	movw	r22, r24
    c334:	41 30       	cpi	r20, 0x01	; 1
    c336:	51 05       	cpc	r21, r1
    c338:	61 05       	cpc	r22, r1
    c33a:	71 05       	cpc	r23, r1
    c33c:	09 f4       	brne	.+2      	; 0xc340 <f_lseek+0x3ca>
    c33e:	7d ce       	rjmp	.-774    	; 0xc03a <f_lseek+0xc4>
    c340:	4f 3f       	cpi	r20, 0xFF	; 255
    c342:	ff ef       	ldi	r31, 0xFF	; 255
    c344:	5f 07       	cpc	r21, r31
    c346:	6f 07       	cpc	r22, r31
    c348:	7f 07       	cpc	r23, r31
    c34a:	09 f4       	brne	.+2      	; 0xc34e <f_lseek+0x3d8>
    c34c:	80 ce       	rjmp	.-768    	; 0xc04e <f_lseek+0xd8>
    c34e:	d1 01       	movw	r26, r2
    c350:	16 96       	adiw	r26, 0x06	; 6
    c352:	4d 93       	st	X+, r20
    c354:	5d 93       	st	X+, r21
    c356:	6d 93       	st	X+, r22
    c358:	7c 93       	st	X, r23
    c35a:	19 97       	sbiw	r26, 0x09	; 9
    c35c:	f1 01       	movw	r30, r2
    c35e:	44 8b       	std	Z+20, r20	; 0x14
    c360:	55 8b       	std	Z+21, r21	; 0x15
    c362:	66 8b       	std	Z+22, r22	; 0x16
    c364:	77 8b       	std	Z+23, r23	; 0x17
    c366:	41 15       	cp	r20, r1
    c368:	51 05       	cpc	r21, r1
    c36a:	61 05       	cpc	r22, r1
    c36c:	71 05       	cpc	r23, r1
    c36e:	09 f0       	breq	.+2      	; 0xc372 <f_lseek+0x3fc>
    c370:	40 c0       	rjmp	.+128    	; 0xc3f2 <f_lseek+0x47c>
    c372:	c1 2c       	mov	r12, r1
    c374:	d1 2c       	mov	r13, r1
    c376:	76 01       	movw	r14, r12
    c378:	79 c0       	rjmp	.+242    	; 0xc46c <f_lseek+0x4f6>
    c37a:	c8 18       	sub	r12, r8
    c37c:	d9 08       	sbc	r13, r9
    c37e:	ea 08       	sbc	r14, r10
    c380:	fb 08       	sbc	r15, r11
    c382:	f1 01       	movw	r30, r2
    c384:	80 89       	ldd	r24, Z+16	; 0x10
    c386:	91 89       	ldd	r25, Z+17	; 0x11
    c388:	a2 89       	ldd	r26, Z+18	; 0x12
    c38a:	b3 89       	ldd	r27, Z+19	; 0x13
    c38c:	88 0d       	add	r24, r8
    c38e:	99 1d       	adc	r25, r9
    c390:	aa 1d       	adc	r26, r10
    c392:	bb 1d       	adc	r27, r11
    c394:	80 8b       	std	Z+16, r24	; 0x10
    c396:	91 8b       	std	Z+17, r25	; 0x11
    c398:	a2 8b       	std	Z+18, r26	; 0x12
    c39a:	b3 8b       	std	Z+19, r27	; 0x13
    c39c:	86 85       	ldd	r24, Z+14	; 0x0e
    c39e:	81 ff       	sbrs	r24, 1
    c3a0:	2f c0       	rjmp	.+94     	; 0xc400 <f_lseek+0x48a>
    c3a2:	c1 01       	movw	r24, r2
    c3a4:	0e 94 e9 4e 	call	0x9dd2	; 0x9dd2 <create_chain>
    c3a8:	ab 01       	movw	r20, r22
    c3aa:	bc 01       	movw	r22, r24
    c3ac:	41 15       	cp	r20, r1
    c3ae:	51 05       	cpc	r21, r1
    c3b0:	61 05       	cpc	r22, r1
    c3b2:	71 05       	cpc	r23, r1
    c3b4:	61 f1       	breq	.+88     	; 0xc40e <f_lseek+0x498>
    c3b6:	4f 3f       	cpi	r20, 0xFF	; 255
    c3b8:	bf ef       	ldi	r27, 0xFF	; 255
    c3ba:	5b 07       	cpc	r21, r27
    c3bc:	6b 07       	cpc	r22, r27
    c3be:	7b 07       	cpc	r23, r27
    c3c0:	09 f4       	brne	.+2      	; 0xc3c4 <f_lseek+0x44e>
    c3c2:	45 ce       	rjmp	.-886    	; 0xc04e <f_lseek+0xd8>
    c3c4:	42 30       	cpi	r20, 0x02	; 2
    c3c6:	51 05       	cpc	r21, r1
    c3c8:	61 05       	cpc	r22, r1
    c3ca:	71 05       	cpc	r23, r1
    c3cc:	08 f4       	brcc	.+2      	; 0xc3d0 <f_lseek+0x45a>
    c3ce:	35 ce       	rjmp	.-918    	; 0xc03a <f_lseek+0xc4>
    c3d0:	e9 81       	ldd	r30, Y+1	; 0x01
    c3d2:	fa 81       	ldd	r31, Y+2	; 0x02
    c3d4:	81 8d       	ldd	r24, Z+25	; 0x19
    c3d6:	92 8d       	ldd	r25, Z+26	; 0x1a
    c3d8:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c3da:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c3dc:	48 17       	cp	r20, r24
    c3de:	59 07       	cpc	r21, r25
    c3e0:	6a 07       	cpc	r22, r26
    c3e2:	7b 07       	cpc	r23, r27
    c3e4:	08 f0       	brcs	.+2      	; 0xc3e8 <f_lseek+0x472>
    c3e6:	29 ce       	rjmp	.-942    	; 0xc03a <f_lseek+0xc4>
    c3e8:	f1 01       	movw	r30, r2
    c3ea:	44 8b       	std	Z+20, r20	; 0x14
    c3ec:	55 8b       	std	Z+21, r21	; 0x15
    c3ee:	66 8b       	std	Z+22, r22	; 0x16
    c3f0:	77 8b       	std	Z+23, r23	; 0x17
    c3f2:	8c 14       	cp	r8, r12
    c3f4:	9d 04       	cpc	r9, r13
    c3f6:	ae 04       	cpc	r10, r14
    c3f8:	bf 04       	cpc	r11, r15
    c3fa:	08 f4       	brcc	.+2      	; 0xc3fe <f_lseek+0x488>
    c3fc:	be cf       	rjmp	.-132    	; 0xc37a <f_lseek+0x404>
    c3fe:	0a c0       	rjmp	.+20     	; 0xc414 <f_lseek+0x49e>
    c400:	80 81       	ld	r24, Z
    c402:	91 81       	ldd	r25, Z+1	; 0x01
    c404:	0e 94 76 4d 	call	0x9aec	; 0x9aec <get_fat.isra.7>
    c408:	ab 01       	movw	r20, r22
    c40a:	bc 01       	movw	r22, r24
    c40c:	d4 cf       	rjmp	.-88     	; 0xc3b6 <f_lseek+0x440>
    c40e:	c1 2c       	mov	r12, r1
    c410:	d1 2c       	mov	r13, r1
    c412:	76 01       	movw	r14, r12
    c414:	f1 01       	movw	r30, r2
    c416:	80 89       	ldd	r24, Z+16	; 0x10
    c418:	91 89       	ldd	r25, Z+17	; 0x11
    c41a:	a2 89       	ldd	r26, Z+18	; 0x12
    c41c:	b3 89       	ldd	r27, Z+19	; 0x13
    c41e:	8c 0d       	add	r24, r12
    c420:	9d 1d       	adc	r25, r13
    c422:	ae 1d       	adc	r26, r14
    c424:	bf 1d       	adc	r27, r15
    c426:	80 8b       	std	Z+16, r24	; 0x10
    c428:	91 8b       	std	Z+17, r25	; 0x11
    c42a:	a2 8b       	std	Z+18, r26	; 0x12
    c42c:	b3 8b       	std	Z+19, r27	; 0x13
    c42e:	d7 01       	movw	r26, r14
    c430:	c6 01       	movw	r24, r12
    c432:	91 70       	andi	r25, 0x01	; 1
    c434:	aa 27       	eor	r26, r26
    c436:	bb 27       	eor	r27, r27
    c438:	89 2b       	or	r24, r25
    c43a:	8a 2b       	or	r24, r26
    c43c:	8b 2b       	or	r24, r27
    c43e:	09 f4       	brne	.+2      	; 0xc442 <f_lseek+0x4cc>
    c440:	98 cf       	rjmp	.-208    	; 0xc372 <f_lseek+0x3fc>
    c442:	89 81       	ldd	r24, Y+1	; 0x01
    c444:	9a 81       	ldd	r25, Y+2	; 0x02
    c446:	0e 94 9d 47 	call	0x8f3a	; 0x8f3a <clust2sect>
    c44a:	61 15       	cp	r22, r1
    c44c:	71 05       	cpc	r23, r1
    c44e:	81 05       	cpc	r24, r1
    c450:	91 05       	cpc	r25, r1
    c452:	09 f4       	brne	.+2      	; 0xc456 <f_lseek+0x4e0>
    c454:	f2 cd       	rjmp	.-1052   	; 0xc03a <f_lseek+0xc4>
    c456:	29 e0       	ldi	r18, 0x09	; 9
    c458:	f6 94       	lsr	r15
    c45a:	e7 94       	ror	r14
    c45c:	d7 94       	ror	r13
    c45e:	c7 94       	ror	r12
    c460:	2a 95       	dec	r18
    c462:	d1 f7       	brne	.-12     	; 0xc458 <f_lseek+0x4e2>
    c464:	c6 0e       	add	r12, r22
    c466:	d7 1e       	adc	r13, r23
    c468:	e8 1e       	adc	r14, r24
    c46a:	f9 1e       	adc	r15, r25
    c46c:	f1 01       	movw	r30, r2
    c46e:	80 89       	ldd	r24, Z+16	; 0x10
    c470:	91 89       	ldd	r25, Z+17	; 0x11
    c472:	a2 89       	ldd	r26, Z+18	; 0x12
    c474:	b3 89       	ldd	r27, Z+19	; 0x13
    c476:	42 85       	ldd	r20, Z+10	; 0x0a
    c478:	53 85       	ldd	r21, Z+11	; 0x0b
    c47a:	64 85       	ldd	r22, Z+12	; 0x0c
    c47c:	75 85       	ldd	r23, Z+13	; 0x0d
    c47e:	48 17       	cp	r20, r24
    c480:	59 07       	cpc	r21, r25
    c482:	6a 07       	cpc	r22, r26
    c484:	7b 07       	cpc	r23, r27
    c486:	38 f4       	brcc	.+14     	; 0xc496 <f_lseek+0x520>
    c488:	82 87       	std	Z+10, r24	; 0x0a
    c48a:	93 87       	std	Z+11, r25	; 0x0b
    c48c:	a4 87       	std	Z+12, r26	; 0x0c
    c48e:	b5 87       	std	Z+13, r27	; 0x0d
    c490:	26 85       	ldd	r18, Z+14	; 0x0e
    c492:	20 64       	ori	r18, 0x40	; 64
    c494:	26 87       	std	Z+14, r18	; 0x0e
    c496:	91 70       	andi	r25, 0x01	; 1
    c498:	aa 27       	eor	r26, r26
    c49a:	bb 27       	eor	r27, r27
    c49c:	89 2b       	or	r24, r25
    c49e:	8a 2b       	or	r24, r26
    c4a0:	8b 2b       	or	r24, r27
    c4a2:	b9 f1       	breq	.+110    	; 0xc512 <f_lseek+0x59c>
    c4a4:	d1 01       	movw	r26, r2
    c4a6:	58 96       	adiw	r26, 0x18	; 24
    c4a8:	2d 91       	ld	r18, X+
    c4aa:	3d 91       	ld	r19, X+
    c4ac:	4d 91       	ld	r20, X+
    c4ae:	5c 91       	ld	r21, X
    c4b0:	5b 97       	sbiw	r26, 0x1b	; 27
    c4b2:	2c 15       	cp	r18, r12
    c4b4:	3d 05       	cpc	r19, r13
    c4b6:	4e 05       	cpc	r20, r14
    c4b8:	5f 05       	cpc	r21, r15
    c4ba:	59 f1       	breq	.+86     	; 0xc512 <f_lseek+0x59c>
    c4bc:	1e 96       	adiw	r26, 0x0e	; 14
    c4be:	8c 91       	ld	r24, X
    c4c0:	f1 01       	movw	r30, r2
    c4c2:	b4 96       	adiw	r30, 0x24	; 36
    c4c4:	5f 01       	movw	r10, r30
    c4c6:	87 ff       	sbrs	r24, 7
    c4c8:	12 c0       	rjmp	.+36     	; 0xc4ee <f_lseek+0x578>
    c4ca:	e9 81       	ldd	r30, Y+1	; 0x01
    c4cc:	fa 81       	ldd	r31, Y+2	; 0x02
    c4ce:	01 e0       	ldi	r16, 0x01	; 1
    c4d0:	10 e0       	ldi	r17, 0x00	; 0
    c4d2:	b5 01       	movw	r22, r10
    c4d4:	81 81       	ldd	r24, Z+1	; 0x01
    c4d6:	0e 94 bb 6e 	call	0xdd76	; 0xdd76 <disk_write>
    c4da:	89 2b       	or	r24, r25
    c4dc:	09 f0       	breq	.+2      	; 0xc4e0 <f_lseek+0x56a>
    c4de:	b7 cd       	rjmp	.-1170   	; 0xc04e <f_lseek+0xd8>
    c4e0:	d1 01       	movw	r26, r2
    c4e2:	1e 96       	adiw	r26, 0x0e	; 14
    c4e4:	8c 91       	ld	r24, X
    c4e6:	1e 97       	sbiw	r26, 0x0e	; 14
    c4e8:	8f 77       	andi	r24, 0x7F	; 127
    c4ea:	1e 96       	adiw	r26, 0x0e	; 14
    c4ec:	8c 93       	st	X, r24
    c4ee:	e9 81       	ldd	r30, Y+1	; 0x01
    c4f0:	fa 81       	ldd	r31, Y+2	; 0x02
    c4f2:	01 e0       	ldi	r16, 0x01	; 1
    c4f4:	10 e0       	ldi	r17, 0x00	; 0
    c4f6:	a7 01       	movw	r20, r14
    c4f8:	96 01       	movw	r18, r12
    c4fa:	b5 01       	movw	r22, r10
    c4fc:	81 81       	ldd	r24, Z+1	; 0x01
    c4fe:	0e 94 ab 6e 	call	0xdd56	; 0xdd56 <disk_read>
    c502:	89 2b       	or	r24, r25
    c504:	09 f0       	breq	.+2      	; 0xc508 <f_lseek+0x592>
    c506:	a3 cd       	rjmp	.-1210   	; 0xc04e <f_lseek+0xd8>
    c508:	f1 01       	movw	r30, r2
    c50a:	c0 8e       	std	Z+24, r12	; 0x18
    c50c:	d1 8e       	std	Z+25, r13	; 0x19
    c50e:	e2 8e       	std	Z+26, r14	; 0x1a
    c510:	f3 8e       	std	Z+27, r15	; 0x1b
    c512:	80 e0       	ldi	r24, 0x00	; 0
    c514:	a0 cd       	rjmp	.-1216   	; 0xc056 <f_lseek+0xe0>
    c516:	81 e1       	ldi	r24, 0x11	; 17
    c518:	9e cd       	rjmp	.-1220   	; 0xc056 <f_lseek+0xe0>
    c51a:	80 e0       	ldi	r24, 0x00	; 0
    c51c:	90 e0       	ldi	r25, 0x00	; 0
    c51e:	dc 01       	movw	r26, r24
    c520:	c1 2c       	mov	r12, r1
    c522:	d1 2c       	mov	r13, r1
    c524:	76 01       	movw	r14, r12
    c526:	b7 cf       	rjmp	.-146    	; 0xc496 <f_lseek+0x520>
    c528:	2a 96       	adiw	r28, 0x0a	; 10
    c52a:	e2 e1       	ldi	r30, 0x12	; 18
    c52c:	0c 94 50 ec 	jmp	0x1d8a0	; 0x1d8a0 <__epilogue_restores__>

0000c530 <f_opendir>:
    c530:	a4 e0       	ldi	r26, 0x04	; 4
    c532:	b0 e0       	ldi	r27, 0x00	; 0
    c534:	ee e9       	ldi	r30, 0x9E	; 158
    c536:	f2 e6       	ldi	r31, 0x62	; 98
    c538:	0c 94 3e ec 	jmp	0x1d87c	; 0x1d87c <__prologue_saves__+0x14>
    c53c:	7c 83       	std	Y+4, r23	; 0x04
    c53e:	6b 83       	std	Y+3, r22	; 0x03
    c540:	00 97       	sbiw	r24, 0x00	; 0
    c542:	09 f4       	brne	.+2      	; 0xc546 <f_opendir+0x16>
    c544:	4a c0       	rjmp	.+148    	; 0xc5da <f_opendir+0xaa>
    c546:	8c 01       	movw	r16, r24
    c548:	40 e0       	ldi	r20, 0x00	; 0
    c54a:	be 01       	movw	r22, r28
    c54c:	6f 5f       	subi	r22, 0xFF	; 255
    c54e:	7f 4f       	sbci	r23, 0xFF	; 255
    c550:	ce 01       	movw	r24, r28
    c552:	03 96       	adiw	r24, 0x03	; 3
    c554:	0e 94 d0 49 	call	0x93a0	; 0x93a0 <find_volume>
    c558:	7c 01       	movw	r14, r24
    c55a:	89 2b       	or	r24, r25
    c55c:	c9 f5       	brne	.+114    	; 0xc5d0 <f_opendir+0xa0>
    c55e:	89 81       	ldd	r24, Y+1	; 0x01
    c560:	9a 81       	ldd	r25, Y+2	; 0x02
    c562:	f8 01       	movw	r30, r16
    c564:	91 83       	std	Z+1, r25	; 0x01
    c566:	80 83       	st	Z, r24
    c568:	80 e0       	ldi	r24, 0x00	; 0
    c56a:	92 e0       	ldi	r25, 0x02	; 2
    c56c:	0e 94 1e 6e 	call	0xdc3c	; 0xdc3c <ff_memalloc>
    c570:	6c 01       	movw	r12, r24
    c572:	00 97       	sbiw	r24, 0x00	; 0
    c574:	a1 f1       	breq	.+104    	; 0xc5de <f_opendir+0xae>
    c576:	e9 81       	ldd	r30, Y+1	; 0x01
    c578:	fa 81       	ldd	r31, Y+2	; 0x02
    c57a:	94 87       	std	Z+12, r25	; 0x0c
    c57c:	83 87       	std	Z+11, r24	; 0x0b
    c57e:	6b 81       	ldd	r22, Y+3	; 0x03
    c580:	7c 81       	ldd	r23, Y+4	; 0x04
    c582:	c8 01       	movw	r24, r16
    c584:	0e 94 56 56 	call	0xacac	; 0xacac <follow_path>
    c588:	7c 01       	movw	r14, r24
    c58a:	89 2b       	or	r24, r25
    c58c:	b9 f4       	brne	.+46     	; 0xc5bc <f_opendir+0x8c>
    c58e:	f8 01       	movw	r30, r16
    c590:	87 a1       	ldd	r24, Z+39	; 0x27
    c592:	87 fd       	sbrc	r24, 7
    c594:	29 c0       	rjmp	.+82     	; 0xc5e8 <f_opendir+0xb8>
    c596:	84 81       	ldd	r24, Z+4	; 0x04
    c598:	84 ff       	sbrs	r24, 4
    c59a:	0d c0       	rjmp	.+26     	; 0xc5b6 <f_opendir+0x86>
    c59c:	62 8d       	ldd	r22, Z+26	; 0x1a
    c59e:	73 8d       	ldd	r23, Z+27	; 0x1b
    c5a0:	e9 81       	ldd	r30, Y+1	; 0x01
    c5a2:	fa 81       	ldd	r31, Y+2	; 0x02
    c5a4:	80 81       	ld	r24, Z
    c5a6:	0e 94 68 48 	call	0x90d0	; 0x90d0 <ld_clust.isra.1>
    c5aa:	f8 01       	movw	r30, r16
    c5ac:	66 83       	std	Z+6, r22	; 0x06
    c5ae:	77 83       	std	Z+7, r23	; 0x07
    c5b0:	80 87       	std	Z+8, r24	; 0x08
    c5b2:	91 87       	std	Z+9, r25	; 0x09
    c5b4:	19 c0       	rjmp	.+50     	; 0xc5e8 <f_opendir+0xb8>
    c5b6:	95 e0       	ldi	r25, 0x05	; 5
    c5b8:	e9 2e       	mov	r14, r25
    c5ba:	f1 2c       	mov	r15, r1
    c5bc:	c6 01       	movw	r24, r12
    c5be:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <ff_memfree>
    c5c2:	f4 e0       	ldi	r31, 0x04	; 4
    c5c4:	ef 16       	cp	r14, r31
    c5c6:	f1 04       	cpc	r15, r1
    c5c8:	f1 f0       	breq	.+60     	; 0xc606 <f_opendir+0xd6>
    c5ca:	e1 14       	cp	r14, r1
    c5cc:	f1 04       	cpc	r15, r1
    c5ce:	49 f0       	breq	.+18     	; 0xc5e2 <f_opendir+0xb2>
    c5d0:	f8 01       	movw	r30, r16
    c5d2:	11 82       	std	Z+1, r1	; 0x01
    c5d4:	10 82       	st	Z, r1
    c5d6:	c7 01       	movw	r24, r14
    c5d8:	1a c0       	rjmp	.+52     	; 0xc60e <f_opendir+0xde>
    c5da:	89 e0       	ldi	r24, 0x09	; 9
    c5dc:	03 c0       	rjmp	.+6      	; 0xc5e4 <f_opendir+0xb4>
    c5de:	81 e1       	ldi	r24, 0x11	; 17
    c5e0:	01 c0       	rjmp	.+2      	; 0xc5e4 <f_opendir+0xb4>
    c5e2:	80 e0       	ldi	r24, 0x00	; 0
    c5e4:	90 e0       	ldi	r25, 0x00	; 0
    c5e6:	13 c0       	rjmp	.+38     	; 0xc60e <f_opendir+0xde>
    c5e8:	e9 81       	ldd	r30, Y+1	; 0x01
    c5ea:	fa 81       	ldd	r31, Y+2	; 0x02
    c5ec:	85 81       	ldd	r24, Z+5	; 0x05
    c5ee:	96 81       	ldd	r25, Z+6	; 0x06
    c5f0:	f8 01       	movw	r30, r16
    c5f2:	93 83       	std	Z+3, r25	; 0x03
    c5f4:	82 83       	std	Z+2, r24	; 0x02
    c5f6:	40 e0       	ldi	r20, 0x00	; 0
    c5f8:	50 e0       	ldi	r21, 0x00	; 0
    c5fa:	ba 01       	movw	r22, r20
    c5fc:	c8 01       	movw	r24, r16
    c5fe:	0e 94 29 4e 	call	0x9c52	; 0x9c52 <dir_sdi>
    c602:	7c 01       	movw	r14, r24
    c604:	db cf       	rjmp	.-74     	; 0xc5bc <f_opendir+0x8c>
    c606:	85 e0       	ldi	r24, 0x05	; 5
    c608:	e8 2e       	mov	r14, r24
    c60a:	f1 2c       	mov	r15, r1
    c60c:	e1 cf       	rjmp	.-62     	; 0xc5d0 <f_opendir+0xa0>
    c60e:	24 96       	adiw	r28, 0x04	; 4
    c610:	e8 e0       	ldi	r30, 0x08	; 8
    c612:	0c 94 5a ec 	jmp	0x1d8b4	; 0x1d8b4 <__epilogue_restores__+0x14>

0000c616 <f_closedir>:
    c616:	a2 e0       	ldi	r26, 0x02	; 2
    c618:	b0 e0       	ldi	r27, 0x00	; 0
    c61a:	e1 e1       	ldi	r30, 0x11	; 17
    c61c:	f3 e6       	ldi	r31, 0x63	; 99
    c61e:	0c 94 42 ec 	jmp	0x1d884	; 0x1d884 <__prologue_saves__+0x1c>
    c622:	8c 01       	movw	r16, r24
    c624:	be 01       	movw	r22, r28
    c626:	6f 5f       	subi	r22, 0xFF	; 255
    c628:	7f 4f       	sbci	r23, 0xFF	; 255
    c62a:	0e 94 30 48 	call	0x9060	; 0x9060 <validate>
    c62e:	00 97       	sbiw	r24, 0x00	; 0
    c630:	19 f4       	brne	.+6      	; 0xc638 <f_closedir+0x22>
    c632:	f8 01       	movw	r30, r16
    c634:	11 82       	std	Z+1, r1	; 0x01
    c636:	10 82       	st	Z, r1
    c638:	22 96       	adiw	r28, 0x02	; 2
    c63a:	e4 e0       	ldi	r30, 0x04	; 4
    c63c:	0c 94 5e ec 	jmp	0x1d8bc	; 0x1d8bc <__epilogue_restores__+0x1c>

0000c640 <f_readdir>:
    c640:	a2 e0       	ldi	r26, 0x02	; 2
    c642:	b0 e0       	ldi	r27, 0x00	; 0
    c644:	e6 e2       	ldi	r30, 0x26	; 38
    c646:	f3 e6       	ldi	r31, 0x63	; 99
    c648:	0c 94 3c ec 	jmp	0x1d878	; 0x1d878 <__prologue_saves__+0x10>
    c64c:	7c 01       	movw	r14, r24
    c64e:	5b 01       	movw	r10, r22
    c650:	be 01       	movw	r22, r28
    c652:	6f 5f       	subi	r22, 0xFF	; 255
    c654:	7f 4f       	sbci	r23, 0xFF	; 255
    c656:	0e 94 30 48 	call	0x9060	; 0x9060 <validate>
    c65a:	00 97       	sbiw	r24, 0x00	; 0
    c65c:	99 f5       	brne	.+102    	; 0xc6c4 <f_readdir+0x84>
    c65e:	a1 14       	cp	r10, r1
    c660:	b1 04       	cpc	r11, r1
    c662:	39 f4       	brne	.+14     	; 0xc672 <f_readdir+0x32>
    c664:	40 e0       	ldi	r20, 0x00	; 0
    c666:	50 e0       	ldi	r21, 0x00	; 0
    c668:	ba 01       	movw	r22, r20
    c66a:	c7 01       	movw	r24, r14
    c66c:	0e 94 29 4e 	call	0x9c52	; 0x9c52 <dir_sdi>
    c670:	29 c0       	rjmp	.+82     	; 0xc6c4 <f_readdir+0x84>
    c672:	80 e0       	ldi	r24, 0x00	; 0
    c674:	92 e0       	ldi	r25, 0x02	; 2
    c676:	0e 94 1e 6e 	call	0xdc3c	; 0xdc3c <ff_memalloc>
    c67a:	6c 01       	movw	r12, r24
    c67c:	00 97       	sbiw	r24, 0x00	; 0
    c67e:	01 f1       	breq	.+64     	; 0xc6c0 <f_readdir+0x80>
    c680:	e9 81       	ldd	r30, Y+1	; 0x01
    c682:	fa 81       	ldd	r31, Y+2	; 0x02
    c684:	94 87       	std	Z+12, r25	; 0x0c
    c686:	83 87       	std	Z+11, r24	; 0x0b
    c688:	60 e0       	ldi	r22, 0x00	; 0
    c68a:	70 e0       	ldi	r23, 0x00	; 0
    c68c:	c7 01       	movw	r24, r14
    c68e:	0e 94 85 52 	call	0xa50a	; 0xa50a <dir_read>
    c692:	8c 01       	movw	r16, r24
    c694:	8b 7f       	andi	r24, 0xFB	; 251
    c696:	89 2b       	or	r24, r25
    c698:	71 f4       	brne	.+28     	; 0xc6b6 <f_readdir+0x76>
    c69a:	b5 01       	movw	r22, r10
    c69c:	c7 01       	movw	r24, r14
    c69e:	0e 94 4b 50 	call	0xa096	; 0xa096 <get_fileinfo>
    c6a2:	60 e0       	ldi	r22, 0x00	; 0
    c6a4:	70 e0       	ldi	r23, 0x00	; 0
    c6a6:	c7 01       	movw	r24, r14
    c6a8:	0e 94 23 51 	call	0xa246	; 0xa246 <dir_next>
    c6ac:	8c 01       	movw	r16, r24
    c6ae:	04 97       	sbiw	r24, 0x04	; 4
    c6b0:	11 f4       	brne	.+4      	; 0xc6b6 <f_readdir+0x76>
    c6b2:	00 e0       	ldi	r16, 0x00	; 0
    c6b4:	10 e0       	ldi	r17, 0x00	; 0
    c6b6:	c6 01       	movw	r24, r12
    c6b8:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <ff_memfree>
    c6bc:	c8 01       	movw	r24, r16
    c6be:	02 c0       	rjmp	.+4      	; 0xc6c4 <f_readdir+0x84>
    c6c0:	81 e1       	ldi	r24, 0x11	; 17
    c6c2:	90 e0       	ldi	r25, 0x00	; 0
    c6c4:	22 96       	adiw	r28, 0x02	; 2
    c6c6:	ea e0       	ldi	r30, 0x0A	; 10
    c6c8:	0c 94 58 ec 	jmp	0x1d8b0	; 0x1d8b0 <__epilogue_restores__+0x10>

0000c6cc <f_stat>:
    c6cc:	a0 e3       	ldi	r26, 0x30	; 48
    c6ce:	b0 e0       	ldi	r27, 0x00	; 0
    c6d0:	ec e6       	ldi	r30, 0x6C	; 108
    c6d2:	f3 e6       	ldi	r31, 0x63	; 99
    c6d4:	0c 94 3e ec 	jmp	0x1d87c	; 0x1d87c <__prologue_saves__+0x14>
    c6d8:	98 ab       	std	Y+48, r25	; 0x30
    c6da:	8f a7       	std	Y+47, r24	; 0x2f
    c6dc:	6b 01       	movw	r12, r22
    c6de:	40 e0       	ldi	r20, 0x00	; 0
    c6e0:	be 01       	movw	r22, r28
    c6e2:	6f 5f       	subi	r22, 0xFF	; 255
    c6e4:	7f 4f       	sbci	r23, 0xFF	; 255
    c6e6:	ce 01       	movw	r24, r28
    c6e8:	8f 96       	adiw	r24, 0x2f	; 47
    c6ea:	0e 94 d0 49 	call	0x93a0	; 0x93a0 <find_volume>
    c6ee:	00 97       	sbiw	r24, 0x00	; 0
    c6f0:	49 f5       	brne	.+82     	; 0xc744 <f_stat+0x78>
    c6f2:	80 e0       	ldi	r24, 0x00	; 0
    c6f4:	92 e0       	ldi	r25, 0x02	; 2
    c6f6:	0e 94 1e 6e 	call	0xdc3c	; 0xdc3c <ff_memalloc>
    c6fa:	7c 01       	movw	r14, r24
    c6fc:	00 97       	sbiw	r24, 0x00	; 0
    c6fe:	01 f1       	breq	.+64     	; 0xc740 <f_stat+0x74>
    c700:	e9 81       	ldd	r30, Y+1	; 0x01
    c702:	fa 81       	ldd	r31, Y+2	; 0x02
    c704:	94 87       	std	Z+12, r25	; 0x0c
    c706:	83 87       	std	Z+11, r24	; 0x0b
    c708:	6f a5       	ldd	r22, Y+47	; 0x2f
    c70a:	78 a9       	ldd	r23, Y+48	; 0x30
    c70c:	ce 01       	movw	r24, r28
    c70e:	01 96       	adiw	r24, 0x01	; 1
    c710:	0e 94 56 56 	call	0xacac	; 0xacac <follow_path>
    c714:	8c 01       	movw	r16, r24
    c716:	89 2b       	or	r24, r25
    c718:	71 f4       	brne	.+28     	; 0xc736 <f_stat+0x6a>
    c71a:	88 a5       	ldd	r24, Y+40	; 0x28
    c71c:	87 fd       	sbrc	r24, 7
    c71e:	09 c0       	rjmp	.+18     	; 0xc732 <f_stat+0x66>
    c720:	c1 14       	cp	r12, r1
    c722:	d1 04       	cpc	r13, r1
    c724:	41 f0       	breq	.+16     	; 0xc736 <f_stat+0x6a>
    c726:	b6 01       	movw	r22, r12
    c728:	ce 01       	movw	r24, r28
    c72a:	01 96       	adiw	r24, 0x01	; 1
    c72c:	0e 94 4b 50 	call	0xa096	; 0xa096 <get_fileinfo>
    c730:	02 c0       	rjmp	.+4      	; 0xc736 <f_stat+0x6a>
    c732:	06 e0       	ldi	r16, 0x06	; 6
    c734:	10 e0       	ldi	r17, 0x00	; 0
    c736:	c7 01       	movw	r24, r14
    c738:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <ff_memfree>
    c73c:	c8 01       	movw	r24, r16
    c73e:	02 c0       	rjmp	.+4      	; 0xc744 <f_stat+0x78>
    c740:	81 e1       	ldi	r24, 0x11	; 17
    c742:	90 e0       	ldi	r25, 0x00	; 0
    c744:	e0 96       	adiw	r28, 0x30	; 48
    c746:	e8 e0       	ldi	r30, 0x08	; 8
    c748:	0c 94 5a ec 	jmp	0x1d8b4	; 0x1d8b4 <__epilogue_restores__+0x14>

0000c74c <f_getfree>:
    c74c:	ac e0       	ldi	r26, 0x0C	; 12
    c74e:	b0 e0       	ldi	r27, 0x00	; 0
    c750:	ec ea       	ldi	r30, 0xAC	; 172
    c752:	f3 e6       	ldi	r31, 0x63	; 99
    c754:	0c 94 34 ec 	jmp	0x1d868	; 0x1d868 <__prologue_saves__>
    c758:	9c 83       	std	Y+4, r25	; 0x04
    c75a:	8b 83       	std	Y+3, r24	; 0x03
    c75c:	78 87       	std	Y+8, r23	; 0x08
    c75e:	6f 83       	std	Y+7, r22	; 0x07
    c760:	7a 01       	movw	r14, r20
    c762:	40 e0       	ldi	r20, 0x00	; 0
    c764:	be 01       	movw	r22, r28
    c766:	6f 5f       	subi	r22, 0xFF	; 255
    c768:	7f 4f       	sbci	r23, 0xFF	; 255
    c76a:	ce 01       	movw	r24, r28
    c76c:	03 96       	adiw	r24, 0x03	; 3
    c76e:	0e 94 d0 49 	call	0x93a0	; 0x93a0 <find_volume>
    c772:	9e 83       	std	Y+6, r25	; 0x06
    c774:	8d 83       	std	Y+5, r24	; 0x05
    c776:	89 2b       	or	r24, r25
    c778:	09 f0       	breq	.+2      	; 0xc77c <f_getfree+0x30>
    c77a:	cf c0       	rjmp	.+414    	; 0xc91a <f_getfree+0x1ce>
    c77c:	69 80       	ldd	r6, Y+1	; 0x01
    c77e:	7a 80       	ldd	r7, Y+2	; 0x02
    c780:	d7 01       	movw	r26, r14
    c782:	6d 92       	st	X+, r6
    c784:	7c 92       	st	X, r7
    c786:	f3 01       	movw	r30, r6
    c788:	81 89       	ldd	r24, Z+17	; 0x11
    c78a:	92 89       	ldd	r25, Z+18	; 0x12
    c78c:	a3 89       	ldd	r26, Z+19	; 0x13
    c78e:	b4 89       	ldd	r27, Z+20	; 0x14
    c790:	81 8c       	ldd	r8, Z+25	; 0x19
    c792:	92 8c       	ldd	r9, Z+26	; 0x1a
    c794:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c796:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c798:	b5 01       	movw	r22, r10
    c79a:	a4 01       	movw	r20, r8
    c79c:	42 50       	subi	r20, 0x02	; 2
    c79e:	51 09       	sbc	r21, r1
    c7a0:	61 09       	sbc	r22, r1
    c7a2:	71 09       	sbc	r23, r1
    c7a4:	48 17       	cp	r20, r24
    c7a6:	59 07       	cpc	r21, r25
    c7a8:	6a 07       	cpc	r22, r26
    c7aa:	7b 07       	cpc	r23, r27
    c7ac:	38 f0       	brcs	.+14     	; 0xc7bc <f_getfree+0x70>
    c7ae:	ef 81       	ldd	r30, Y+7	; 0x07
    c7b0:	f8 85       	ldd	r31, Y+8	; 0x08
    c7b2:	80 83       	st	Z, r24
    c7b4:	91 83       	std	Z+1, r25	; 0x01
    c7b6:	a2 83       	std	Z+2, r26	; 0x02
    c7b8:	b3 83       	std	Z+3, r27	; 0x03
    c7ba:	af c0       	rjmp	.+350    	; 0xc91a <f_getfree+0x1ce>
    c7bc:	80 81       	ld	r24, Z
    c7be:	81 30       	cpi	r24, 0x01	; 1
    c7c0:	a1 f5       	brne	.+104    	; 0xc82a <f_getfree+0xde>
    c7c2:	82 e0       	ldi	r24, 0x02	; 2
    c7c4:	88 2e       	mov	r8, r24
    c7c6:	91 2c       	mov	r9, r1
    c7c8:	a1 2c       	mov	r10, r1
    c7ca:	b1 2c       	mov	r11, r1
    c7cc:	c1 2c       	mov	r12, r1
    c7ce:	d1 2c       	mov	r13, r1
    c7d0:	76 01       	movw	r14, r12
    c7d2:	b5 01       	movw	r22, r10
    c7d4:	a4 01       	movw	r20, r8
    c7d6:	c3 01       	movw	r24, r6
    c7d8:	0e 94 76 4d 	call	0x9aec	; 0x9aec <get_fat.isra.7>
    c7dc:	6f 3f       	cpi	r22, 0xFF	; 255
    c7de:	bf ef       	ldi	r27, 0xFF	; 255
    c7e0:	7b 07       	cpc	r23, r27
    c7e2:	8b 07       	cpc	r24, r27
    c7e4:	9b 07       	cpc	r25, r27
    c7e6:	09 f4       	brne	.+2      	; 0xc7ea <f_getfree+0x9e>
    c7e8:	7c c0       	rjmp	.+248    	; 0xc8e2 <f_getfree+0x196>
    c7ea:	61 30       	cpi	r22, 0x01	; 1
    c7ec:	71 05       	cpc	r23, r1
    c7ee:	81 05       	cpc	r24, r1
    c7f0:	91 05       	cpc	r25, r1
    c7f2:	09 f4       	brne	.+2      	; 0xc7f6 <f_getfree+0xaa>
    c7f4:	7b c0       	rjmp	.+246    	; 0xc8ec <f_getfree+0x1a0>
    c7f6:	67 2b       	or	r22, r23
    c7f8:	68 2b       	or	r22, r24
    c7fa:	69 2b       	or	r22, r25
    c7fc:	29 f4       	brne	.+10     	; 0xc808 <f_getfree+0xbc>
    c7fe:	ef ef       	ldi	r30, 0xFF	; 255
    c800:	ce 1a       	sub	r12, r30
    c802:	de 0a       	sbc	r13, r30
    c804:	ee 0a       	sbc	r14, r30
    c806:	fe 0a       	sbc	r15, r30
    c808:	ff ef       	ldi	r31, 0xFF	; 255
    c80a:	8f 1a       	sub	r8, r31
    c80c:	9f 0a       	sbc	r9, r31
    c80e:	af 0a       	sbc	r10, r31
    c810:	bf 0a       	sbc	r11, r31
    c812:	e9 81       	ldd	r30, Y+1	; 0x01
    c814:	fa 81       	ldd	r31, Y+2	; 0x02
    c816:	81 8d       	ldd	r24, Z+25	; 0x19
    c818:	92 8d       	ldd	r25, Z+26	; 0x1a
    c81a:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c81c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c81e:	88 16       	cp	r8, r24
    c820:	99 06       	cpc	r9, r25
    c822:	aa 06       	cpc	r10, r26
    c824:	bb 06       	cpc	r11, r27
    c826:	a8 f2       	brcs	.-86     	; 0xc7d2 <f_getfree+0x86>
    c828:	68 c0       	rjmp	.+208    	; 0xc8fa <f_getfree+0x1ae>
    c82a:	45 a0       	ldd	r4, Z+37	; 0x25
    c82c:	56 a0       	ldd	r5, Z+38	; 0x26
    c82e:	67 a0       	ldd	r6, Z+39	; 0x27
    c830:	70 a4       	ldd	r7, Z+40	; 0x28
    c832:	21 2c       	mov	r2, r1
    c834:	31 2c       	mov	r3, r1
    c836:	00 e0       	ldi	r16, 0x00	; 0
    c838:	10 e0       	ldi	r17, 0x00	; 0
    c83a:	c1 2c       	mov	r12, r1
    c83c:	d1 2c       	mov	r13, r1
    c83e:	76 01       	movw	r14, r12
    c840:	01 15       	cp	r16, r1
    c842:	11 05       	cpc	r17, r1
    c844:	e9 f4       	brne	.+58     	; 0xc880 <f_getfree+0x134>
    c846:	d3 01       	movw	r26, r6
    c848:	c2 01       	movw	r24, r4
    c84a:	01 96       	adiw	r24, 0x01	; 1
    c84c:	a1 1d       	adc	r26, r1
    c84e:	b1 1d       	adc	r27, r1
    c850:	89 87       	std	Y+9, r24	; 0x09
    c852:	9a 87       	std	Y+10, r25	; 0x0a
    c854:	ab 87       	std	Y+11, r26	; 0x0b
    c856:	bc 87       	std	Y+12, r27	; 0x0c
    c858:	b3 01       	movw	r22, r6
    c85a:	a2 01       	movw	r20, r4
    c85c:	89 81       	ldd	r24, Y+1	; 0x01
    c85e:	9a 81       	ldd	r25, Y+2	; 0x02
    c860:	0e 94 50 49 	call	0x92a0	; 0x92a0 <move_window>
    c864:	00 97       	sbiw	r24, 0x00	; 0
    c866:	09 f0       	breq	.+2      	; 0xc86a <f_getfree+0x11e>
    c868:	46 c0       	rjmp	.+140    	; 0xc8f6 <f_getfree+0x1aa>
    c86a:	29 80       	ldd	r2, Y+1	; 0x01
    c86c:	3a 80       	ldd	r3, Y+2	; 0x02
    c86e:	95 e3       	ldi	r25, 0x35	; 53
    c870:	29 0e       	add	r2, r25
    c872:	31 1c       	adc	r3, r1
    c874:	49 84       	ldd	r4, Y+9	; 0x09
    c876:	5a 84       	ldd	r5, Y+10	; 0x0a
    c878:	6b 84       	ldd	r6, Y+11	; 0x0b
    c87a:	7c 84       	ldd	r7, Y+12	; 0x0c
    c87c:	00 e0       	ldi	r16, 0x00	; 0
    c87e:	12 e0       	ldi	r17, 0x02	; 2
    c880:	e9 81       	ldd	r30, Y+1	; 0x01
    c882:	fa 81       	ldd	r31, Y+2	; 0x02
    c884:	80 81       	ld	r24, Z
    c886:	82 30       	cpi	r24, 0x02	; 2
    c888:	81 f4       	brne	.+32     	; 0xc8aa <f_getfree+0x15e>
    c88a:	d1 01       	movw	r26, r2
    c88c:	8d 91       	ld	r24, X+
    c88e:	9c 91       	ld	r25, X
    c890:	89 2b       	or	r24, r25
    c892:	29 f4       	brne	.+10     	; 0xc89e <f_getfree+0x152>
    c894:	bf ef       	ldi	r27, 0xFF	; 255
    c896:	cb 1a       	sub	r12, r27
    c898:	db 0a       	sbc	r13, r27
    c89a:	eb 0a       	sbc	r14, r27
    c89c:	fb 0a       	sbc	r15, r27
    c89e:	e2 e0       	ldi	r30, 0x02	; 2
    c8a0:	2e 0e       	add	r2, r30
    c8a2:	31 1c       	adc	r3, r1
    c8a4:	02 50       	subi	r16, 0x02	; 2
    c8a6:	11 09       	sbc	r17, r1
    c8a8:	14 c0       	rjmp	.+40     	; 0xc8d2 <f_getfree+0x186>
    c8aa:	c1 01       	movw	r24, r2
    c8ac:	0e 94 79 47 	call	0x8ef2	; 0x8ef2 <ld_dword>
    c8b0:	dc 01       	movw	r26, r24
    c8b2:	cb 01       	movw	r24, r22
    c8b4:	bf 70       	andi	r27, 0x0F	; 15
    c8b6:	89 2b       	or	r24, r25
    c8b8:	8a 2b       	or	r24, r26
    c8ba:	8b 2b       	or	r24, r27
    c8bc:	29 f4       	brne	.+10     	; 0xc8c8 <f_getfree+0x17c>
    c8be:	ff ef       	ldi	r31, 0xFF	; 255
    c8c0:	cf 1a       	sub	r12, r31
    c8c2:	df 0a       	sbc	r13, r31
    c8c4:	ef 0a       	sbc	r14, r31
    c8c6:	ff 0a       	sbc	r15, r31
    c8c8:	24 e0       	ldi	r18, 0x04	; 4
    c8ca:	22 0e       	add	r2, r18
    c8cc:	31 1c       	adc	r3, r1
    c8ce:	04 50       	subi	r16, 0x04	; 4
    c8d0:	11 09       	sbc	r17, r1
    c8d2:	81 e0       	ldi	r24, 0x01	; 1
    c8d4:	88 1a       	sub	r8, r24
    c8d6:	91 08       	sbc	r9, r1
    c8d8:	a1 08       	sbc	r10, r1
    c8da:	b1 08       	sbc	r11, r1
    c8dc:	09 f0       	breq	.+2      	; 0xc8e0 <f_getfree+0x194>
    c8de:	b0 cf       	rjmp	.-160    	; 0xc840 <f_getfree+0xf4>
    c8e0:	0c c0       	rjmp	.+24     	; 0xc8fa <f_getfree+0x1ae>
    c8e2:	a1 e0       	ldi	r26, 0x01	; 1
    c8e4:	b0 e0       	ldi	r27, 0x00	; 0
    c8e6:	be 83       	std	Y+6, r27	; 0x06
    c8e8:	ad 83       	std	Y+5, r26	; 0x05
    c8ea:	07 c0       	rjmp	.+14     	; 0xc8fa <f_getfree+0x1ae>
    c8ec:	e2 e0       	ldi	r30, 0x02	; 2
    c8ee:	f0 e0       	ldi	r31, 0x00	; 0
    c8f0:	fe 83       	std	Y+6, r31	; 0x06
    c8f2:	ed 83       	std	Y+5, r30	; 0x05
    c8f4:	02 c0       	rjmp	.+4      	; 0xc8fa <f_getfree+0x1ae>
    c8f6:	9e 83       	std	Y+6, r25	; 0x06
    c8f8:	8d 83       	std	Y+5, r24	; 0x05
    c8fa:	af 81       	ldd	r26, Y+7	; 0x07
    c8fc:	b8 85       	ldd	r27, Y+8	; 0x08
    c8fe:	cd 92       	st	X+, r12
    c900:	dd 92       	st	X+, r13
    c902:	ed 92       	st	X+, r14
    c904:	fc 92       	st	X, r15
    c906:	13 97       	sbiw	r26, 0x03	; 3
    c908:	e9 81       	ldd	r30, Y+1	; 0x01
    c90a:	fa 81       	ldd	r31, Y+2	; 0x02
    c90c:	c1 8a       	std	Z+17, r12	; 0x11
    c90e:	d2 8a       	std	Z+18, r13	; 0x12
    c910:	e3 8a       	std	Z+19, r14	; 0x13
    c912:	f4 8a       	std	Z+20, r15	; 0x14
    c914:	84 81       	ldd	r24, Z+4	; 0x04
    c916:	81 60       	ori	r24, 0x01	; 1
    c918:	84 83       	std	Z+4, r24	; 0x04
    c91a:	8d 81       	ldd	r24, Y+5	; 0x05
    c91c:	9e 81       	ldd	r25, Y+6	; 0x06
    c91e:	2c 96       	adiw	r28, 0x0c	; 12
    c920:	e2 e1       	ldi	r30, 0x12	; 18
    c922:	0c 94 50 ec 	jmp	0x1d8a0	; 0x1d8a0 <__epilogue_restores__>

0000c926 <f_unlink>:
    c926:	a0 e6       	ldi	r26, 0x60	; 96
    c928:	b0 e0       	ldi	r27, 0x00	; 0
    c92a:	e9 e9       	ldi	r30, 0x99	; 153
    c92c:	f4 e6       	ldi	r31, 0x64	; 100
    c92e:	0c 94 3b ec 	jmp	0x1d876	; 0x1d876 <__prologue_saves__+0xe>
    c932:	a1 96       	adiw	r28, 0x21	; 33
    c934:	9f af       	std	Y+63, r25	; 0x3f
    c936:	8e af       	std	Y+62, r24	; 0x3e
    c938:	a1 97       	sbiw	r28, 0x21	; 33
    c93a:	42 e0       	ldi	r20, 0x02	; 2
    c93c:	be 01       	movw	r22, r28
    c93e:	63 5a       	subi	r22, 0xA3	; 163
    c940:	7f 4f       	sbci	r23, 0xFF	; 255
    c942:	ce 01       	movw	r24, r28
    c944:	81 5a       	subi	r24, 0xA1	; 161
    c946:	9f 4f       	sbci	r25, 0xFF	; 255
    c948:	0e 94 d0 49 	call	0x93a0	; 0x93a0 <find_volume>
    c94c:	6f 96       	adiw	r28, 0x1f	; 31
    c94e:	2e ad       	ldd	r18, Y+62	; 0x3e
    c950:	3f ad       	ldd	r19, Y+63	; 0x3f
    c952:	6f 97       	sbiw	r28, 0x1f	; 31
    c954:	38 ab       	std	Y+48, r19	; 0x30
    c956:	2f a7       	std	Y+47, r18	; 0x2f
    c958:	00 97       	sbiw	r24, 0x00	; 0
    c95a:	09 f0       	breq	.+2      	; 0xc95e <f_unlink+0x38>
    c95c:	88 c0       	rjmp	.+272    	; 0xca6e <f_unlink+0x148>
    c95e:	80 e0       	ldi	r24, 0x00	; 0
    c960:	92 e0       	ldi	r25, 0x02	; 2
    c962:	0e 94 1e 6e 	call	0xdc3c	; 0xdc3c <ff_memalloc>
    c966:	5c 01       	movw	r10, r24
    c968:	00 97       	sbiw	r24, 0x00	; 0
    c96a:	09 f4       	brne	.+2      	; 0xc96e <f_unlink+0x48>
    c96c:	4a c0       	rjmp	.+148    	; 0xca02 <f_unlink+0xdc>
    c96e:	6f 96       	adiw	r28, 0x1f	; 31
    c970:	ee ad       	ldd	r30, Y+62	; 0x3e
    c972:	ff ad       	ldd	r31, Y+63	; 0x3f
    c974:	6f 97       	sbiw	r28, 0x1f	; 31
    c976:	94 87       	std	Z+12, r25	; 0x0c
    c978:	83 87       	std	Z+11, r24	; 0x0b
    c97a:	a1 96       	adiw	r28, 0x21	; 33
    c97c:	6e ad       	ldd	r22, Y+62	; 0x3e
    c97e:	7f ad       	ldd	r23, Y+63	; 0x3f
    c980:	a1 97       	sbiw	r28, 0x21	; 33
    c982:	ce 01       	movw	r24, r28
    c984:	8f 96       	adiw	r24, 0x2f	; 47
    c986:	0e 94 56 56 	call	0xacac	; 0xacac <follow_path>
    c98a:	8c 01       	movw	r16, r24
    c98c:	89 2b       	or	r24, r25
    c98e:	a1 f5       	brne	.+104    	; 0xc9f8 <f_unlink+0xd2>
    c990:	67 96       	adiw	r28, 0x17	; 23
    c992:	8f ad       	ldd	r24, Y+63	; 0x3f
    c994:	67 97       	sbiw	r28, 0x17	; 23
    c996:	85 fd       	sbrc	r24, 5
    c998:	37 c0       	rjmp	.+110    	; 0xca08 <f_unlink+0xe2>
    c99a:	87 fd       	sbrc	r24, 7
    c99c:	35 c0       	rjmp	.+106    	; 0xca08 <f_unlink+0xe2>
    c99e:	9b a8       	ldd	r9, Y+51	; 0x33
    c9a0:	90 fc       	sbrc	r9, 0
    c9a2:	41 c0       	rjmp	.+130    	; 0xca26 <f_unlink+0x100>
    c9a4:	6f 96       	adiw	r28, 0x1f	; 31
    c9a6:	0e ad       	ldd	r16, Y+62	; 0x3e
    c9a8:	1f ad       	ldd	r17, Y+63	; 0x3f
    c9aa:	6f 97       	sbiw	r28, 0x1f	; 31
    c9ac:	2b 96       	adiw	r28, 0x0b	; 11
    c9ae:	6e ad       	ldd	r22, Y+62	; 0x3e
    c9b0:	7f ad       	ldd	r23, Y+63	; 0x3f
    c9b2:	2b 97       	sbiw	r28, 0x0b	; 11
    c9b4:	f8 01       	movw	r30, r16
    c9b6:	80 81       	ld	r24, Z
    c9b8:	0e 94 68 48 	call	0x90d0	; 0x90d0 <ld_clust.isra.1>
    c9bc:	6b 01       	movw	r12, r22
    c9be:	7c 01       	movw	r14, r24
    c9c0:	94 fe       	sbrs	r9, 4
    c9c2:	34 c0       	rjmp	.+104    	; 0xca2c <f_unlink+0x106>
    c9c4:	f8 01       	movw	r30, r16
    c9c6:	85 89       	ldd	r24, Z+21	; 0x15
    c9c8:	96 89       	ldd	r25, Z+22	; 0x16
    c9ca:	a7 89       	ldd	r26, Z+23	; 0x17
    c9cc:	b0 8d       	ldd	r27, Z+24	; 0x18
    c9ce:	c8 16       	cp	r12, r24
    c9d0:	d9 06       	cpc	r13, r25
    c9d2:	ea 06       	cpc	r14, r26
    c9d4:	fb 06       	cpc	r15, r27
    c9d6:	39 f1       	breq	.+78     	; 0xca26 <f_unlink+0x100>
    c9d8:	1a 83       	std	Y+2, r17	; 0x02
    c9da:	09 83       	std	Y+1, r16	; 0x01
    c9dc:	cf 82       	std	Y+7, r12	; 0x07
    c9de:	d8 86       	std	Y+8, r13	; 0x08
    c9e0:	e9 86       	std	Y+9, r14	; 0x09
    c9e2:	fa 86       	std	Y+10, r15	; 0x0a
    c9e4:	40 e0       	ldi	r20, 0x00	; 0
    c9e6:	50 e0       	ldi	r21, 0x00	; 0
    c9e8:	ba 01       	movw	r22, r20
    c9ea:	ce 01       	movw	r24, r28
    c9ec:	01 96       	adiw	r24, 0x01	; 1
    c9ee:	0e 94 29 4e 	call	0x9c52	; 0x9c52 <dir_sdi>
    c9f2:	8c 01       	movw	r16, r24
    c9f4:	89 2b       	or	r24, r25
    c9f6:	59 f0       	breq	.+22     	; 0xca0e <f_unlink+0xe8>
    c9f8:	c5 01       	movw	r24, r10
    c9fa:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <ff_memfree>
    c9fe:	c8 01       	movw	r24, r16
    ca00:	36 c0       	rjmp	.+108    	; 0xca6e <f_unlink+0x148>
    ca02:	81 e1       	ldi	r24, 0x11	; 17
    ca04:	90 e0       	ldi	r25, 0x00	; 0
    ca06:	33 c0       	rjmp	.+102    	; 0xca6e <f_unlink+0x148>
    ca08:	06 e0       	ldi	r16, 0x06	; 6
    ca0a:	10 e0       	ldi	r17, 0x00	; 0
    ca0c:	f5 cf       	rjmp	.-22     	; 0xc9f8 <f_unlink+0xd2>
    ca0e:	60 e0       	ldi	r22, 0x00	; 0
    ca10:	70 e0       	ldi	r23, 0x00	; 0
    ca12:	ce 01       	movw	r24, r28
    ca14:	01 96       	adiw	r24, 0x01	; 1
    ca16:	0e 94 85 52 	call	0xa50a	; 0xa50a <dir_read>
    ca1a:	8c 01       	movw	r16, r24
    ca1c:	00 97       	sbiw	r24, 0x00	; 0
    ca1e:	19 f0       	breq	.+6      	; 0xca26 <f_unlink+0x100>
    ca20:	04 97       	sbiw	r24, 0x04	; 4
    ca22:	21 f0       	breq	.+8      	; 0xca2c <f_unlink+0x106>
    ca24:	e9 cf       	rjmp	.-46     	; 0xc9f8 <f_unlink+0xd2>
    ca26:	07 e0       	ldi	r16, 0x07	; 7
    ca28:	10 e0       	ldi	r17, 0x00	; 0
    ca2a:	e6 cf       	rjmp	.-52     	; 0xc9f8 <f_unlink+0xd2>
    ca2c:	ce 01       	movw	r24, r28
    ca2e:	8f 96       	adiw	r24, 0x2f	; 47
    ca30:	0e 94 53 53 	call	0xa6a6	; 0xa6a6 <dir_remove>
    ca34:	8c 01       	movw	r16, r24
    ca36:	89 2b       	or	r24, r25
    ca38:	f9 f6       	brne	.-66     	; 0xc9f8 <f_unlink+0xd2>
    ca3a:	c1 14       	cp	r12, r1
    ca3c:	d1 04       	cpc	r13, r1
    ca3e:	e1 04       	cpc	r14, r1
    ca40:	f1 04       	cpc	r15, r1
    ca42:	41 f4       	brne	.+16     	; 0xca54 <f_unlink+0x12e>
    ca44:	6f 96       	adiw	r28, 0x1f	; 31
    ca46:	8e ad       	ldd	r24, Y+62	; 0x3e
    ca48:	9f ad       	ldd	r25, Y+63	; 0x3f
    ca4a:	6f 97       	sbiw	r28, 0x1f	; 31
    ca4c:	0e 94 e4 48 	call	0x91c8	; 0x91c8 <sync_fs>
    ca50:	8c 01       	movw	r16, r24
    ca52:	d2 cf       	rjmp	.-92     	; 0xc9f8 <f_unlink+0xd2>
    ca54:	00 e0       	ldi	r16, 0x00	; 0
    ca56:	10 e0       	ldi	r17, 0x00	; 0
    ca58:	98 01       	movw	r18, r16
    ca5a:	b7 01       	movw	r22, r14
    ca5c:	a6 01       	movw	r20, r12
    ca5e:	ce 01       	movw	r24, r28
    ca60:	8f 96       	adiw	r24, 0x2f	; 47
    ca62:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <remove_chain>
    ca66:	8c 01       	movw	r16, r24
    ca68:	89 2b       	or	r24, r25
    ca6a:	31 f6       	brne	.-116    	; 0xc9f8 <f_unlink+0xd2>
    ca6c:	eb cf       	rjmp	.-42     	; 0xca44 <f_unlink+0x11e>
    ca6e:	c0 5a       	subi	r28, 0xA0	; 160
    ca70:	df 4f       	sbci	r29, 0xFF	; 255
    ca72:	eb e0       	ldi	r30, 0x0B	; 11
    ca74:	0c 94 57 ec 	jmp	0x1d8ae	; 0x1d8ae <__epilogue_restores__+0xe>

0000ca78 <f_mkdir>:
    ca78:	ac e3       	ldi	r26, 0x3C	; 60
    ca7a:	b0 e0       	ldi	r27, 0x00	; 0
    ca7c:	e2 e4       	ldi	r30, 0x42	; 66
    ca7e:	f5 e6       	ldi	r31, 0x65	; 101
    ca80:	0c 94 34 ec 	jmp	0x1d868	; 0x1d868 <__prologue_saves__>
    ca84:	9a ab       	std	Y+50, r25	; 0x32
    ca86:	89 ab       	std	Y+49, r24	; 0x31
    ca88:	42 e0       	ldi	r20, 0x02	; 2
    ca8a:	be 01       	movw	r22, r28
    ca8c:	61 5d       	subi	r22, 0xD1	; 209
    ca8e:	7f 4f       	sbci	r23, 0xFF	; 255
    ca90:	ce 01       	movw	r24, r28
    ca92:	c1 96       	adiw	r24, 0x31	; 49
    ca94:	0e 94 d0 49 	call	0x93a0	; 0x93a0 <find_volume>
    ca98:	2f a5       	ldd	r18, Y+47	; 0x2f
    ca9a:	38 a9       	ldd	r19, Y+48	; 0x30
    ca9c:	3a 83       	std	Y+2, r19	; 0x02
    ca9e:	29 83       	std	Y+1, r18	; 0x01
    caa0:	00 97       	sbiw	r24, 0x00	; 0
    caa2:	09 f0       	breq	.+2      	; 0xcaa6 <f_mkdir+0x2e>
    caa4:	2c c1       	rjmp	.+600    	; 0xccfe <f_mkdir+0x286>
    caa6:	80 e0       	ldi	r24, 0x00	; 0
    caa8:	92 e0       	ldi	r25, 0x02	; 2
    caaa:	0e 94 1e 6e 	call	0xdc3c	; 0xdc3c <ff_memalloc>
    caae:	98 af       	std	Y+56, r25	; 0x38
    cab0:	8f ab       	std	Y+55, r24	; 0x37
    cab2:	00 97       	sbiw	r24, 0x00	; 0
    cab4:	d9 f0       	breq	.+54     	; 0xcaec <f_mkdir+0x74>
    cab6:	ef a5       	ldd	r30, Y+47	; 0x2f
    cab8:	f8 a9       	ldd	r31, Y+48	; 0x30
    caba:	94 87       	std	Z+12, r25	; 0x0c
    cabc:	83 87       	std	Z+11, r24	; 0x0b
    cabe:	69 a9       	ldd	r22, Y+49	; 0x31
    cac0:	7a a9       	ldd	r23, Y+50	; 0x32
    cac2:	ce 01       	movw	r24, r28
    cac4:	01 96       	adiw	r24, 0x01	; 1
    cac6:	0e 94 56 56 	call	0xacac	; 0xacac <follow_path>
    caca:	7c 01       	movw	r14, r24
    cacc:	00 97       	sbiw	r24, 0x00	; 0
    cace:	89 f0       	breq	.+34     	; 0xcaf2 <f_mkdir+0x7a>
    cad0:	04 97       	sbiw	r24, 0x04	; 4
    cad2:	31 f4       	brne	.+12     	; 0xcae0 <f_mkdir+0x68>
    cad4:	88 a5       	ldd	r24, Y+40	; 0x28
    cad6:	85 ff       	sbrs	r24, 5
    cad8:	10 c0       	rjmp	.+32     	; 0xcafa <f_mkdir+0x82>
    cada:	36 e0       	ldi	r19, 0x06	; 6
    cadc:	e3 2e       	mov	r14, r19
    cade:	f1 2c       	mov	r15, r1
    cae0:	8f a9       	ldd	r24, Y+55	; 0x37
    cae2:	98 ad       	ldd	r25, Y+56	; 0x38
    cae4:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <ff_memfree>
    cae8:	c7 01       	movw	r24, r14
    caea:	09 c1       	rjmp	.+530    	; 0xccfe <f_mkdir+0x286>
    caec:	81 e1       	ldi	r24, 0x11	; 17
    caee:	90 e0       	ldi	r25, 0x00	; 0
    caf0:	06 c1       	rjmp	.+524    	; 0xccfe <f_mkdir+0x286>
    caf2:	48 e0       	ldi	r20, 0x08	; 8
    caf4:	e4 2e       	mov	r14, r20
    caf6:	f1 2c       	mov	r15, r1
    caf8:	f3 cf       	rjmp	.-26     	; 0xcae0 <f_mkdir+0x68>
    cafa:	40 e0       	ldi	r20, 0x00	; 0
    cafc:	50 e0       	ldi	r21, 0x00	; 0
    cafe:	ba 01       	movw	r22, r20
    cb00:	ce 01       	movw	r24, r28
    cb02:	01 96       	adiw	r24, 0x01	; 1
    cb04:	0e 94 e9 4e 	call	0x9dd2	; 0x9dd2 <create_chain>
    cb08:	4b 01       	movw	r8, r22
    cb0a:	5c 01       	movw	r10, r24
    cb0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    cb0e:	98 a9       	ldd	r25, Y+48	; 0x30
    cb10:	dc 01       	movw	r26, r24
    cb12:	19 96       	adiw	r26, 0x09	; 9
    cb14:	4d 91       	ld	r20, X+
    cb16:	5c 91       	ld	r21, X
    cb18:	1a 97       	sbiw	r26, 0x0a	; 10
    cb1a:	60 e0       	ldi	r22, 0x00	; 0
    cb1c:	70 e0       	ldi	r23, 0x00	; 0
    cb1e:	29 e0       	ldi	r18, 0x09	; 9
    cb20:	44 0f       	add	r20, r20
    cb22:	55 1f       	adc	r21, r21
    cb24:	66 1f       	adc	r22, r22
    cb26:	77 1f       	adc	r23, r23
    cb28:	2a 95       	dec	r18
    cb2a:	d1 f7       	brne	.-12     	; 0xcb20 <f_mkdir+0xa8>
    cb2c:	4b 87       	std	Y+11, r20	; 0x0b
    cb2e:	5c 87       	std	Y+12, r21	; 0x0c
    cb30:	6d 87       	std	Y+13, r22	; 0x0d
    cb32:	7e 87       	std	Y+14, r23	; 0x0e
    cb34:	81 14       	cp	r8, r1
    cb36:	91 04       	cpc	r9, r1
    cb38:	a1 04       	cpc	r10, r1
    cb3a:	b1 04       	cpc	r11, r1
    cb3c:	a9 f0       	breq	.+42     	; 0xcb68 <f_mkdir+0xf0>
    cb3e:	31 e0       	ldi	r19, 0x01	; 1
    cb40:	83 16       	cp	r8, r19
    cb42:	91 04       	cpc	r9, r1
    cb44:	a1 04       	cpc	r10, r1
    cb46:	b1 04       	cpc	r11, r1
    cb48:	59 f0       	breq	.+22     	; 0xcb60 <f_mkdir+0xe8>
    cb4a:	4f ef       	ldi	r20, 0xFF	; 255
    cb4c:	84 16       	cp	r8, r20
    cb4e:	94 06       	cpc	r9, r20
    cb50:	a4 06       	cpc	r10, r20
    cb52:	b4 06       	cpc	r11, r20
    cb54:	09 f0       	breq	.+2      	; 0xcb58 <f_mkdir+0xe0>
    cb56:	cf c0       	rjmp	.+414    	; 0xccf6 <f_mkdir+0x27e>
    cb58:	ee 24       	eor	r14, r14
    cb5a:	e3 94       	inc	r14
    cb5c:	f1 2c       	mov	r15, r1
    cb5e:	07 c0       	rjmp	.+14     	; 0xcb6e <f_mkdir+0xf6>
    cb60:	62 e0       	ldi	r22, 0x02	; 2
    cb62:	e6 2e       	mov	r14, r22
    cb64:	f1 2c       	mov	r15, r1
    cb66:	03 c0       	rjmp	.+6      	; 0xcb6e <f_mkdir+0xf6>
    cb68:	57 e0       	ldi	r21, 0x07	; 7
    cb6a:	e5 2e       	mov	r14, r21
    cb6c:	f1 2c       	mov	r15, r1
    cb6e:	0e 94 2e 75 	call	0xea5c	; 0xea5c <get_fattime>
    cb72:	2b 01       	movw	r4, r22
    cb74:	3c 01       	movw	r6, r24
    cb76:	e1 14       	cp	r14, r1
    cb78:	f1 04       	cpc	r15, r1
    cb7a:	09 f0       	breq	.+2      	; 0xcb7e <f_mkdir+0x106>
    cb7c:	8f c0       	rjmp	.+286    	; 0xcc9c <f_mkdir+0x224>
    cb7e:	0f a5       	ldd	r16, Y+47	; 0x2f
    cb80:	18 a9       	ldd	r17, Y+48	; 0x30
    cb82:	b5 01       	movw	r22, r10
    cb84:	a4 01       	movw	r20, r8
    cb86:	c8 01       	movw	r24, r16
    cb88:	0e 94 9d 47 	call	0x8f3a	; 0x8f3a <clust2sect>
    cb8c:	6b 01       	movw	r12, r22
    cb8e:	7c 01       	movw	r14, r24
    cb90:	18 01       	movw	r2, r16
    cb92:	55 e3       	ldi	r21, 0x35	; 53
    cb94:	25 0e       	add	r2, r21
    cb96:	31 1c       	adc	r3, r1
    cb98:	40 e0       	ldi	r20, 0x00	; 0
    cb9a:	52 e0       	ldi	r21, 0x02	; 2
    cb9c:	60 e0       	ldi	r22, 0x00	; 0
    cb9e:	70 e0       	ldi	r23, 0x00	; 0
    cba0:	c1 01       	movw	r24, r2
    cba2:	0e 94 94 47 	call	0x8f28	; 0x8f28 <mem_set>
    cba6:	4b e0       	ldi	r20, 0x0B	; 11
    cba8:	50 e0       	ldi	r21, 0x00	; 0
    cbaa:	60 e2       	ldi	r22, 0x20	; 32
    cbac:	70 e0       	ldi	r23, 0x00	; 0
    cbae:	c1 01       	movw	r24, r2
    cbb0:	0e 94 94 47 	call	0x8f28	; 0x8f28 <mem_set>
    cbb4:	ee e2       	ldi	r30, 0x2E	; 46
    cbb6:	d8 01       	movw	r26, r16
    cbb8:	d5 96       	adiw	r26, 0x35	; 53
    cbba:	ec 93       	st	X, r30
    cbbc:	f8 01       	movw	r30, r16
    cbbe:	e0 5c       	subi	r30, 0xC0	; 192
    cbc0:	ff 4f       	sbci	r31, 0xFF	; 255
    cbc2:	80 e1       	ldi	r24, 0x10	; 16
    cbc4:	80 83       	st	Z, r24
    cbc6:	b3 01       	movw	r22, r6
    cbc8:	a2 01       	movw	r20, r4
    cbca:	c8 01       	movw	r24, r16
    cbcc:	85 5b       	subi	r24, 0xB5	; 181
    cbce:	9f 4f       	sbci	r25, 0xFF	; 255
    cbd0:	0e 94 8e 47 	call	0x8f1c	; 0x8f1c <st_dword>
    cbd4:	a5 01       	movw	r20, r10
    cbd6:	94 01       	movw	r18, r8
    cbd8:	b1 01       	movw	r22, r2
    cbda:	8f a5       	ldd	r24, Y+47	; 0x2f
    cbdc:	98 a9       	ldd	r25, Y+48	; 0x30
    cbde:	0e 94 7d 48 	call	0x90fa	; 0x90fa <st_clust.isra.2>
    cbe2:	98 01       	movw	r18, r16
    cbe4:	2b 5a       	subi	r18, 0xAB	; 171
    cbe6:	3f 4f       	sbci	r19, 0xFF	; 255
    cbe8:	3c ab       	std	Y+52, r19	; 0x34
    cbea:	2b ab       	std	Y+51, r18	; 0x33
    cbec:	40 e2       	ldi	r20, 0x20	; 32
    cbee:	50 e0       	ldi	r21, 0x00	; 0
    cbf0:	b1 01       	movw	r22, r2
    cbf2:	c9 01       	movw	r24, r18
    cbf4:	0e 94 5d 48 	call	0x90ba	; 0x90ba <mem_cpy.part.0>
    cbf8:	f8 01       	movw	r30, r16
    cbfa:	ea 5a       	subi	r30, 0xAA	; 170
    cbfc:	ff 4f       	sbci	r31, 0xFF	; 255
    cbfe:	3e e2       	ldi	r19, 0x2E	; 46
    cc00:	30 83       	st	Z, r19
    cc02:	2f 81       	ldd	r18, Y+7	; 0x07
    cc04:	38 85       	ldd	r19, Y+8	; 0x08
    cc06:	49 85       	ldd	r20, Y+9	; 0x09
    cc08:	5a 85       	ldd	r21, Y+10	; 0x0a
    cc0a:	0f a5       	ldd	r16, Y+47	; 0x2f
    cc0c:	18 a9       	ldd	r17, Y+48	; 0x30
    cc0e:	d8 01       	movw	r26, r16
    cc10:	6c 91       	ld	r22, X
    cc12:	63 30       	cpi	r22, 0x03	; 3
    cc14:	71 f4       	brne	.+28     	; 0xcc32 <f_mkdir+0x1ba>
    cc16:	99 96       	adiw	r26, 0x29	; 41
    cc18:	8d 91       	ld	r24, X+
    cc1a:	9d 91       	ld	r25, X+
    cc1c:	0d 90       	ld	r0, X+
    cc1e:	bc 91       	ld	r27, X
    cc20:	a0 2d       	mov	r26, r0
    cc22:	28 17       	cp	r18, r24
    cc24:	39 07       	cpc	r19, r25
    cc26:	4a 07       	cpc	r20, r26
    cc28:	5b 07       	cpc	r21, r27
    cc2a:	19 f4       	brne	.+6      	; 0xcc32 <f_mkdir+0x1ba>
    cc2c:	20 e0       	ldi	r18, 0x00	; 0
    cc2e:	30 e0       	ldi	r19, 0x00	; 0
    cc30:	a9 01       	movw	r20, r18
    cc32:	6b a9       	ldd	r22, Y+51	; 0x33
    cc34:	7c a9       	ldd	r23, Y+52	; 0x34
    cc36:	c8 01       	movw	r24, r16
    cc38:	0e 94 7d 48 	call	0x90fa	; 0x90fa <st_clust.isra.2>
    cc3c:	ef a5       	ldd	r30, Y+47	; 0x2f
    cc3e:	f8 a9       	ldd	r31, Y+48	; 0x30
    cc40:	01 85       	ldd	r16, Z+9	; 0x09
    cc42:	12 85       	ldd	r17, Z+10	; 0x0a
    cc44:	01 15       	cp	r16, r1
    cc46:	11 05       	cpc	r17, r1
    cc48:	99 f1       	breq	.+102    	; 0xccb0 <f_mkdir+0x238>
    cc4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    cc4c:	98 a9       	ldd	r25, Y+48	; 0x30
    cc4e:	a7 01       	movw	r20, r14
    cc50:	96 01       	movw	r18, r12
    cc52:	2f 5f       	subi	r18, 0xFF	; 255
    cc54:	3f 4f       	sbci	r19, 0xFF	; 255
    cc56:	4f 4f       	sbci	r20, 0xFF	; 255
    cc58:	5f 4f       	sbci	r21, 0xFF	; 255
    cc5a:	2b ab       	std	Y+51, r18	; 0x33
    cc5c:	3c ab       	std	Y+52, r19	; 0x34
    cc5e:	4d ab       	std	Y+53, r20	; 0x35
    cc60:	5e ab       	std	Y+54, r21	; 0x36
    cc62:	dc 01       	movw	r26, r24
    cc64:	d1 96       	adiw	r26, 0x31	; 49
    cc66:	cd 92       	st	X+, r12
    cc68:	dd 92       	st	X+, r13
    cc6a:	ed 92       	st	X+, r14
    cc6c:	fc 92       	st	X, r15
    cc6e:	d4 97       	sbiw	r26, 0x34	; 52
    cc70:	e1 e0       	ldi	r30, 0x01	; 1
    cc72:	13 96       	adiw	r26, 0x03	; 3
    cc74:	ec 93       	st	X, r30
    cc76:	0e 94 8a 48 	call	0x9114	; 0x9114 <sync_window.part.3>
    cc7a:	7c 01       	movw	r14, r24
    cc7c:	89 2b       	or	r24, r25
    cc7e:	71 f4       	brne	.+28     	; 0xcc9c <f_mkdir+0x224>
    cc80:	40 e0       	ldi	r20, 0x00	; 0
    cc82:	52 e0       	ldi	r21, 0x02	; 2
    cc84:	60 e0       	ldi	r22, 0x00	; 0
    cc86:	70 e0       	ldi	r23, 0x00	; 0
    cc88:	c1 01       	movw	r24, r2
    cc8a:	0e 94 94 47 	call	0x8f28	; 0x8f28 <mem_set>
    cc8e:	01 50       	subi	r16, 0x01	; 1
    cc90:	11 09       	sbc	r17, r1
    cc92:	cb a8       	ldd	r12, Y+51	; 0x33
    cc94:	dc a8       	ldd	r13, Y+52	; 0x34
    cc96:	ed a8       	ldd	r14, Y+53	; 0x35
    cc98:	fe a8       	ldd	r15, Y+54	; 0x36
    cc9a:	d4 cf       	rjmp	.-88     	; 0xcc44 <f_mkdir+0x1cc>
    cc9c:	00 e0       	ldi	r16, 0x00	; 0
    cc9e:	10 e0       	ldi	r17, 0x00	; 0
    cca0:	98 01       	movw	r18, r16
    cca2:	b5 01       	movw	r22, r10
    cca4:	a4 01       	movw	r20, r8
    cca6:	ce 01       	movw	r24, r28
    cca8:	01 96       	adiw	r24, 0x01	; 1
    ccaa:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <remove_chain>
    ccae:	18 cf       	rjmp	.-464    	; 0xcae0 <f_mkdir+0x68>
    ccb0:	ce 01       	movw	r24, r28
    ccb2:	01 96       	adiw	r24, 0x01	; 1
    ccb4:	0e 94 b2 54 	call	0xa964	; 0xa964 <dir_register>
    ccb8:	7c 01       	movw	r14, r24
    ccba:	89 2b       	or	r24, r25
    ccbc:	79 f7       	brne	.-34     	; 0xcc9c <f_mkdir+0x224>
    ccbe:	0b 8d       	ldd	r16, Y+27	; 0x1b
    ccc0:	1c 8d       	ldd	r17, Y+28	; 0x1c
    ccc2:	b3 01       	movw	r22, r6
    ccc4:	a2 01       	movw	r20, r4
    ccc6:	c8 01       	movw	r24, r16
    ccc8:	46 96       	adiw	r24, 0x16	; 22
    ccca:	0e 94 8e 47 	call	0x8f1c	; 0x8f1c <st_dword>
    ccce:	a5 01       	movw	r20, r10
    ccd0:	94 01       	movw	r18, r8
    ccd2:	b8 01       	movw	r22, r16
    ccd4:	8f a5       	ldd	r24, Y+47	; 0x2f
    ccd6:	98 a9       	ldd	r25, Y+48	; 0x30
    ccd8:	0e 94 7d 48 	call	0x90fa	; 0x90fa <st_clust.isra.2>
    ccdc:	80 e1       	ldi	r24, 0x10	; 16
    ccde:	f8 01       	movw	r30, r16
    cce0:	83 87       	std	Z+11, r24	; 0x0b
    cce2:	8f a5       	ldd	r24, Y+47	; 0x2f
    cce4:	98 a9       	ldd	r25, Y+48	; 0x30
    cce6:	21 e0       	ldi	r18, 0x01	; 1
    cce8:	dc 01       	movw	r26, r24
    ccea:	13 96       	adiw	r26, 0x03	; 3
    ccec:	2c 93       	st	X, r18
    ccee:	0e 94 e4 48 	call	0x91c8	; 0x91c8 <sync_fs>
    ccf2:	7c 01       	movw	r14, r24
    ccf4:	f5 ce       	rjmp	.-534    	; 0xcae0 <f_mkdir+0x68>
    ccf6:	0e 94 db 48 	call	0x91b6	; 0x91b6 <sync_window>
    ccfa:	7c 01       	movw	r14, r24
    ccfc:	38 cf       	rjmp	.-400    	; 0xcb6e <f_mkdir+0xf6>
    ccfe:	ec 96       	adiw	r28, 0x3c	; 60
    cd00:	e2 e1       	ldi	r30, 0x12	; 18
    cd02:	0c 94 50 ec 	jmp	0x1d8a0	; 0x1d8a0 <__epilogue_restores__>

0000cd06 <f_rename>:
    cd06:	aa e7       	ldi	r26, 0x7A	; 122
    cd08:	b0 e0       	ldi	r27, 0x00	; 0
    cd0a:	e9 e8       	ldi	r30, 0x89	; 137
    cd0c:	f6 e6       	ldi	r31, 0x66	; 102
    cd0e:	0c 94 3d ec 	jmp	0x1d87a	; 0x1d87a <__prologue_saves__+0x12>
    cd12:	e9 96       	adiw	r28, 0x39	; 57
    cd14:	9f af       	std	Y+63, r25	; 0x3f
    cd16:	8e af       	std	Y+62, r24	; 0x3e
    cd18:	e9 97       	sbiw	r28, 0x39	; 57
    cd1a:	eb 96       	adiw	r28, 0x3b	; 59
    cd1c:	7f af       	std	Y+63, r23	; 0x3f
    cd1e:	6e af       	std	Y+62, r22	; 0x3e
    cd20:	eb 97       	sbiw	r28, 0x3b	; 59
    cd22:	ce 01       	movw	r24, r28
    cd24:	87 58       	subi	r24, 0x87	; 135
    cd26:	9f 4f       	sbci	r25, 0xFF	; 255
    cd28:	0e 94 10 48 	call	0x9020	; 0x9020 <get_ldnumber>
    cd2c:	42 e0       	ldi	r20, 0x02	; 2
    cd2e:	be 01       	movw	r22, r28
    cd30:	6b 58       	subi	r22, 0x8B	; 139
    cd32:	7f 4f       	sbci	r23, 0xFF	; 255
    cd34:	ce 01       	movw	r24, r28
    cd36:	89 58       	subi	r24, 0x89	; 137
    cd38:	9f 4f       	sbci	r25, 0xFF	; 255
    cd3a:	0e 94 d0 49 	call	0x93a0	; 0x93a0 <find_volume>
    cd3e:	00 97       	sbiw	r24, 0x00	; 0
    cd40:	09 f0       	breq	.+2      	; 0xcd44 <f_rename+0x3e>
    cd42:	eb c0       	rjmp	.+470    	; 0xcf1a <f_rename+0x214>
    cd44:	e7 96       	adiw	r28, 0x37	; 55
    cd46:	8e ad       	ldd	r24, Y+62	; 0x3e
    cd48:	9f ad       	ldd	r25, Y+63	; 0x3f
    cd4a:	e7 97       	sbiw	r28, 0x37	; 55
    cd4c:	98 ab       	std	Y+48, r25	; 0x30
    cd4e:	8f a7       	std	Y+47, r24	; 0x2f
    cd50:	80 e0       	ldi	r24, 0x00	; 0
    cd52:	92 e0       	ldi	r25, 0x02	; 2
    cd54:	73 d7       	rcall	.+3814   	; 0xdc3c <ff_memalloc>
    cd56:	6c 01       	movw	r12, r24
    cd58:	00 97       	sbiw	r24, 0x00	; 0
    cd5a:	09 f4       	brne	.+2      	; 0xcd5e <f_rename+0x58>
    cd5c:	3f c0       	rjmp	.+126    	; 0xcddc <f_rename+0xd6>
    cd5e:	e7 96       	adiw	r28, 0x37	; 55
    cd60:	ee ad       	ldd	r30, Y+62	; 0x3e
    cd62:	ff ad       	ldd	r31, Y+63	; 0x3f
    cd64:	e7 97       	sbiw	r28, 0x37	; 55
    cd66:	94 87       	std	Z+12, r25	; 0x0c
    cd68:	83 87       	std	Z+11, r24	; 0x0b
    cd6a:	e9 96       	adiw	r28, 0x39	; 57
    cd6c:	6e ad       	ldd	r22, Y+62	; 0x3e
    cd6e:	7f ad       	ldd	r23, Y+63	; 0x3f
    cd70:	e9 97       	sbiw	r28, 0x39	; 57
    cd72:	ce 01       	movw	r24, r28
    cd74:	8f 96       	adiw	r24, 0x2f	; 47
    cd76:	0e 94 56 56 	call	0xacac	; 0xacac <follow_path>
    cd7a:	8c 01       	movw	r16, r24
    cd7c:	89 2b       	or	r24, r25
    cd7e:	51 f5       	brne	.+84     	; 0xcdd4 <f_rename+0xce>
    cd80:	67 96       	adiw	r28, 0x17	; 23
    cd82:	8f ad       	ldd	r24, Y+63	; 0x3f
    cd84:	67 97       	sbiw	r28, 0x17	; 23
    cd86:	80 7a       	andi	r24, 0xA0	; 160
    cd88:	09 f0       	breq	.+2      	; 0xcd8c <f_rename+0x86>
    cd8a:	ae c0       	rjmp	.+348    	; 0xcee8 <f_rename+0x1e2>
    cd8c:	2b 96       	adiw	r28, 0x0b	; 11
    cd8e:	6e ad       	ldd	r22, Y+62	; 0x3e
    cd90:	7f ad       	ldd	r23, Y+63	; 0x3f
    cd92:	2b 97       	sbiw	r28, 0x0b	; 11
    cd94:	65 5f       	subi	r22, 0xF5	; 245
    cd96:	7f 4f       	sbci	r23, 0xFF	; 255
    cd98:	45 e1       	ldi	r20, 0x15	; 21
    cd9a:	50 e0       	ldi	r21, 0x00	; 0
    cd9c:	ce 01       	movw	r24, r28
    cd9e:	83 5a       	subi	r24, 0xA3	; 163
    cda0:	9f 4f       	sbci	r25, 0xFF	; 255
    cda2:	0e 94 5d 48 	call	0x90ba	; 0x90ba <mem_cpy.part.0>
    cda6:	4e e2       	ldi	r20, 0x2E	; 46
    cda8:	50 e0       	ldi	r21, 0x00	; 0
    cdaa:	be 01       	movw	r22, r28
    cdac:	61 5d       	subi	r22, 0xD1	; 209
    cdae:	7f 4f       	sbci	r23, 0xFF	; 255
    cdb0:	ce 01       	movw	r24, r28
    cdb2:	01 96       	adiw	r24, 0x01	; 1
    cdb4:	0e 94 5d 48 	call	0x90ba	; 0x90ba <mem_cpy.part.0>
    cdb8:	eb 96       	adiw	r28, 0x3b	; 59
    cdba:	6e ad       	ldd	r22, Y+62	; 0x3e
    cdbc:	7f ad       	ldd	r23, Y+63	; 0x3f
    cdbe:	eb 97       	sbiw	r28, 0x3b	; 59
    cdc0:	ce 01       	movw	r24, r28
    cdc2:	01 96       	adiw	r24, 0x01	; 1
    cdc4:	0e 94 56 56 	call	0xacac	; 0xacac <follow_path>
    cdc8:	8c 01       	movw	r16, r24
    cdca:	89 2b       	or	r24, r25
    cdcc:	51 f0       	breq	.+20     	; 0xcde2 <f_rename+0xdc>
    cdce:	04 30       	cpi	r16, 0x04	; 4
    cdd0:	11 05       	cpc	r17, r1
    cdd2:	29 f1       	breq	.+74     	; 0xce1e <f_rename+0x118>
    cdd4:	c6 01       	movw	r24, r12
    cdd6:	35 d7       	rcall	.+3690   	; 0xdc42 <ff_memfree>
    cdd8:	c8 01       	movw	r24, r16
    cdda:	9f c0       	rjmp	.+318    	; 0xcf1a <f_rename+0x214>
    cddc:	81 e1       	ldi	r24, 0x11	; 17
    cdde:	90 e0       	ldi	r25, 0x00	; 0
    cde0:	9c c0       	rjmp	.+312    	; 0xcf1a <f_rename+0x214>
    cde2:	4f 81       	ldd	r20, Y+7	; 0x07
    cde4:	58 85       	ldd	r21, Y+8	; 0x08
    cde6:	69 85       	ldd	r22, Y+9	; 0x09
    cde8:	7a 85       	ldd	r23, Y+10	; 0x0a
    cdea:	8d a9       	ldd	r24, Y+53	; 0x35
    cdec:	9e a9       	ldd	r25, Y+54	; 0x36
    cdee:	af a9       	ldd	r26, Y+55	; 0x37
    cdf0:	b8 ad       	ldd	r27, Y+56	; 0x38
    cdf2:	48 17       	cp	r20, r24
    cdf4:	59 07       	cpc	r21, r25
    cdf6:	6a 07       	cpc	r22, r26
    cdf8:	7b 07       	cpc	r23, r27
    cdfa:	09 f0       	breq	.+2      	; 0xcdfe <f_rename+0xf8>
    cdfc:	88 c0       	rjmp	.+272    	; 0xcf0e <f_rename+0x208>
    cdfe:	4f 85       	ldd	r20, Y+15	; 0x0f
    ce00:	58 89       	ldd	r21, Y+16	; 0x10
    ce02:	69 89       	ldd	r22, Y+17	; 0x11
    ce04:	7a 89       	ldd	r23, Y+18	; 0x12
    ce06:	21 96       	adiw	r28, 0x01	; 1
    ce08:	8c ad       	ldd	r24, Y+60	; 0x3c
    ce0a:	9d ad       	ldd	r25, Y+61	; 0x3d
    ce0c:	ae ad       	ldd	r26, Y+62	; 0x3e
    ce0e:	bf ad       	ldd	r27, Y+63	; 0x3f
    ce10:	21 97       	sbiw	r28, 0x01	; 1
    ce12:	48 17       	cp	r20, r24
    ce14:	59 07       	cpc	r21, r25
    ce16:	6a 07       	cpc	r22, r26
    ce18:	7b 07       	cpc	r23, r27
    ce1a:	09 f0       	breq	.+2      	; 0xce1e <f_rename+0x118>
    ce1c:	78 c0       	rjmp	.+240    	; 0xcf0e <f_rename+0x208>
    ce1e:	ce 01       	movw	r24, r28
    ce20:	01 96       	adiw	r24, 0x01	; 1
    ce22:	0e 94 b2 54 	call	0xa964	; 0xa964 <dir_register>
    ce26:	8c 01       	movw	r16, r24
    ce28:	89 2b       	or	r24, r25
    ce2a:	a1 f6       	brne	.-88     	; 0xcdd4 <f_rename+0xce>
    ce2c:	eb 8c       	ldd	r14, Y+27	; 0x1b
    ce2e:	fc 8c       	ldd	r15, Y+28	; 0x1c
    ce30:	6d e5       	ldi	r22, 0x5D	; 93
    ce32:	70 e0       	ldi	r23, 0x00	; 0
    ce34:	6c 0f       	add	r22, r28
    ce36:	7d 1f       	adc	r23, r29
    ce38:	6e 5f       	subi	r22, 0xFE	; 254
    ce3a:	7f 4f       	sbci	r23, 0xFF	; 255
    ce3c:	43 e1       	ldi	r20, 0x13	; 19
    ce3e:	50 e0       	ldi	r21, 0x00	; 0
    ce40:	c7 01       	movw	r24, r14
    ce42:	0d 96       	adiw	r24, 0x0d	; 13
    ce44:	0e 94 5d 48 	call	0x90ba	; 0x90ba <mem_cpy.part.0>
    ce48:	6e 96       	adiw	r28, 0x1e	; 30
    ce4a:	8f ad       	ldd	r24, Y+63	; 0x3f
    ce4c:	6e 97       	sbiw	r28, 0x1e	; 30
    ce4e:	80 62       	ori	r24, 0x20	; 32
    ce50:	f7 01       	movw	r30, r14
    ce52:	83 87       	std	Z+11, r24	; 0x0b
    ce54:	e7 96       	adiw	r28, 0x37	; 55
    ce56:	0e ad       	ldd	r16, Y+62	; 0x3e
    ce58:	1f ad       	ldd	r17, Y+63	; 0x3f
    ce5a:	e7 97       	sbiw	r28, 0x37	; 55
    ce5c:	bb 24       	eor	r11, r11
    ce5e:	b3 94       	inc	r11
    ce60:	f8 01       	movw	r30, r16
    ce62:	b3 82       	std	Z+3, r11	; 0x03
    ce64:	f7 01       	movw	r30, r14
    ce66:	83 85       	ldd	r24, Z+11	; 0x0b
    ce68:	84 ff       	sbrs	r24, 4
    ce6a:	41 c0       	rjmp	.+130    	; 0xceee <f_rename+0x1e8>
    ce6c:	4d a9       	ldd	r20, Y+53	; 0x35
    ce6e:	5e a9       	ldd	r21, Y+54	; 0x36
    ce70:	6f a9       	ldd	r22, Y+55	; 0x37
    ce72:	78 ad       	ldd	r23, Y+56	; 0x38
    ce74:	8f 81       	ldd	r24, Y+7	; 0x07
    ce76:	98 85       	ldd	r25, Y+8	; 0x08
    ce78:	a9 85       	ldd	r26, Y+9	; 0x09
    ce7a:	ba 85       	ldd	r27, Y+10	; 0x0a
    ce7c:	48 17       	cp	r20, r24
    ce7e:	59 07       	cpc	r21, r25
    ce80:	6a 07       	cpc	r22, r26
    ce82:	7b 07       	cpc	r23, r27
    ce84:	a1 f1       	breq	.+104    	; 0xceee <f_rename+0x1e8>
    ce86:	b7 01       	movw	r22, r14
    ce88:	f8 01       	movw	r30, r16
    ce8a:	80 81       	ld	r24, Z
    ce8c:	0e 94 68 48 	call	0x90d0	; 0x90d0 <ld_clust.isra.1>
    ce90:	ab 01       	movw	r20, r22
    ce92:	bc 01       	movw	r22, r24
    ce94:	c8 01       	movw	r24, r16
    ce96:	0e 94 9d 47 	call	0x8f3a	; 0x8f3a <clust2sect>
    ce9a:	ab 01       	movw	r20, r22
    ce9c:	bc 01       	movw	r22, r24
    ce9e:	41 15       	cp	r20, r1
    cea0:	51 05       	cpc	r21, r1
    cea2:	61 05       	cpc	r22, r1
    cea4:	71 05       	cpc	r23, r1
    cea6:	b1 f1       	breq	.+108    	; 0xcf14 <f_rename+0x20e>
    cea8:	c8 01       	movw	r24, r16
    ceaa:	0e 94 50 49 	call	0x92a0	; 0x92a0 <move_window>
    ceae:	8c 01       	movw	r16, r24
    ceb0:	89 2b       	or	r24, r25
    ceb2:	09 f0       	breq	.+2      	; 0xceb6 <f_rename+0x1b0>
    ceb4:	8f cf       	rjmp	.-226    	; 0xcdd4 <f_rename+0xce>
    ceb6:	e7 96       	adiw	r28, 0x37	; 55
    ceb8:	8e ad       	ldd	r24, Y+62	; 0x3e
    ceba:	9f ad       	ldd	r25, Y+63	; 0x3f
    cebc:	e7 97       	sbiw	r28, 0x37	; 55
    cebe:	fc 01       	movw	r30, r24
    cec0:	ea 5a       	subi	r30, 0xAA	; 170
    cec2:	ff 4f       	sbci	r31, 0xFF	; 255
    cec4:	20 81       	ld	r18, Z
    cec6:	2e 32       	cpi	r18, 0x2E	; 46
    cec8:	91 f4       	brne	.+36     	; 0xceee <f_rename+0x1e8>
    ceca:	2f 81       	ldd	r18, Y+7	; 0x07
    cecc:	38 85       	ldd	r19, Y+8	; 0x08
    cece:	49 85       	ldd	r20, Y+9	; 0x09
    ced0:	5a 85       	ldd	r21, Y+10	; 0x0a
    ced2:	bc 01       	movw	r22, r24
    ced4:	6b 5a       	subi	r22, 0xAB	; 171
    ced6:	7f 4f       	sbci	r23, 0xFF	; 255
    ced8:	0e 94 7d 48 	call	0x90fa	; 0x90fa <st_clust.isra.2>
    cedc:	e7 96       	adiw	r28, 0x37	; 55
    cede:	ee ad       	ldd	r30, Y+62	; 0x3e
    cee0:	ff ad       	ldd	r31, Y+63	; 0x3f
    cee2:	e7 97       	sbiw	r28, 0x37	; 55
    cee4:	b3 82       	std	Z+3, r11	; 0x03
    cee6:	03 c0       	rjmp	.+6      	; 0xceee <f_rename+0x1e8>
    cee8:	06 e0       	ldi	r16, 0x06	; 6
    ceea:	10 e0       	ldi	r17, 0x00	; 0
    ceec:	73 cf       	rjmp	.-282    	; 0xcdd4 <f_rename+0xce>
    ceee:	ce 01       	movw	r24, r28
    cef0:	8f 96       	adiw	r24, 0x2f	; 47
    cef2:	0e 94 53 53 	call	0xa6a6	; 0xa6a6 <dir_remove>
    cef6:	8c 01       	movw	r16, r24
    cef8:	89 2b       	or	r24, r25
    cefa:	09 f0       	breq	.+2      	; 0xcefe <f_rename+0x1f8>
    cefc:	6b cf       	rjmp	.-298    	; 0xcdd4 <f_rename+0xce>
    cefe:	e7 96       	adiw	r28, 0x37	; 55
    cf00:	8e ad       	ldd	r24, Y+62	; 0x3e
    cf02:	9f ad       	ldd	r25, Y+63	; 0x3f
    cf04:	e7 97       	sbiw	r28, 0x37	; 55
    cf06:	0e 94 e4 48 	call	0x91c8	; 0x91c8 <sync_fs>
    cf0a:	8c 01       	movw	r16, r24
    cf0c:	63 cf       	rjmp	.-314    	; 0xcdd4 <f_rename+0xce>
    cf0e:	08 e0       	ldi	r16, 0x08	; 8
    cf10:	10 e0       	ldi	r17, 0x00	; 0
    cf12:	60 cf       	rjmp	.-320    	; 0xcdd4 <f_rename+0xce>
    cf14:	02 e0       	ldi	r16, 0x02	; 2
    cf16:	10 e0       	ldi	r17, 0x00	; 0
    cf18:	5d cf       	rjmp	.-326    	; 0xcdd4 <f_rename+0xce>
    cf1a:	c6 58       	subi	r28, 0x86	; 134
    cf1c:	df 4f       	sbci	r29, 0xFF	; 255
    cf1e:	e9 e0       	ldi	r30, 0x09	; 9
    cf20:	0c 94 59 ec 	jmp	0x1d8b2	; 0x1d8b2 <__epilogue_restores__+0x12>

0000cf24 <f_chmod>:
    cf24:	a2 e3       	ldi	r26, 0x32	; 50
    cf26:	b0 e0       	ldi	r27, 0x00	; 0
    cf28:	e8 e9       	ldi	r30, 0x98	; 152
    cf2a:	f7 e6       	ldi	r31, 0x67	; 103
    cf2c:	0c 94 3e ec 	jmp	0x1d87c	; 0x1d87c <__prologue_saves__+0x14>
    cf30:	9a ab       	std	Y+50, r25	; 0x32
    cf32:	89 ab       	std	Y+49, r24	; 0x31
    cf34:	e6 2e       	mov	r14, r22
    cf36:	f4 2e       	mov	r15, r20
    cf38:	42 e0       	ldi	r20, 0x02	; 2
    cf3a:	be 01       	movw	r22, r28
    cf3c:	61 5d       	subi	r22, 0xD1	; 209
    cf3e:	7f 4f       	sbci	r23, 0xFF	; 255
    cf40:	ce 01       	movw	r24, r28
    cf42:	c1 96       	adiw	r24, 0x31	; 49
    cf44:	0e 94 d0 49 	call	0x93a0	; 0x93a0 <find_volume>
    cf48:	2f a5       	ldd	r18, Y+47	; 0x2f
    cf4a:	38 a9       	ldd	r19, Y+48	; 0x30
    cf4c:	3a 83       	std	Y+2, r19	; 0x02
    cf4e:	29 83       	std	Y+1, r18	; 0x01
    cf50:	00 97       	sbiw	r24, 0x00	; 0
    cf52:	89 f5       	brne	.+98     	; 0xcfb6 <f_chmod+0x92>
    cf54:	80 e0       	ldi	r24, 0x00	; 0
    cf56:	92 e0       	ldi	r25, 0x02	; 2
    cf58:	71 d6       	rcall	.+3298   	; 0xdc3c <ff_memalloc>
    cf5a:	6c 01       	movw	r12, r24
    cf5c:	00 97       	sbiw	r24, 0x00	; 0
    cf5e:	b1 f0       	breq	.+44     	; 0xcf8c <f_chmod+0x68>
    cf60:	ef a5       	ldd	r30, Y+47	; 0x2f
    cf62:	f8 a9       	ldd	r31, Y+48	; 0x30
    cf64:	94 87       	std	Z+12, r25	; 0x0c
    cf66:	83 87       	std	Z+11, r24	; 0x0b
    cf68:	69 a9       	ldd	r22, Y+49	; 0x31
    cf6a:	7a a9       	ldd	r23, Y+50	; 0x32
    cf6c:	ce 01       	movw	r24, r28
    cf6e:	01 96       	adiw	r24, 0x01	; 1
    cf70:	0e 94 56 56 	call	0xacac	; 0xacac <follow_path>
    cf74:	8c 01       	movw	r16, r24
    cf76:	89 2b       	or	r24, r25
    cf78:	29 f4       	brne	.+10     	; 0xcf84 <f_chmod+0x60>
    cf7a:	88 a5       	ldd	r24, Y+40	; 0x28
    cf7c:	80 7a       	andi	r24, 0xA0	; 160
    cf7e:	49 f0       	breq	.+18     	; 0xcf92 <f_chmod+0x6e>
    cf80:	06 e0       	ldi	r16, 0x06	; 6
    cf82:	10 e0       	ldi	r17, 0x00	; 0
    cf84:	c6 01       	movw	r24, r12
    cf86:	5d d6       	rcall	.+3258   	; 0xdc42 <ff_memfree>
    cf88:	c8 01       	movw	r24, r16
    cf8a:	15 c0       	rjmp	.+42     	; 0xcfb6 <f_chmod+0x92>
    cf8c:	81 e1       	ldi	r24, 0x11	; 17
    cf8e:	90 e0       	ldi	r25, 0x00	; 0
    cf90:	12 c0       	rjmp	.+36     	; 0xcfb6 <f_chmod+0x92>
    cf92:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cf94:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cf96:	83 85       	ldd	r24, Z+11	; 0x0b
    cf98:	6e 2d       	mov	r22, r14
    cf9a:	68 27       	eor	r22, r24
    cf9c:	6f 21       	and	r22, r15
    cf9e:	67 72       	andi	r22, 0x27	; 39
    cfa0:	68 27       	eor	r22, r24
    cfa2:	63 87       	std	Z+11, r22	; 0x0b
    cfa4:	8f a5       	ldd	r24, Y+47	; 0x2f
    cfa6:	98 a9       	ldd	r25, Y+48	; 0x30
    cfa8:	21 e0       	ldi	r18, 0x01	; 1
    cfaa:	fc 01       	movw	r30, r24
    cfac:	23 83       	std	Z+3, r18	; 0x03
    cfae:	0e 94 e4 48 	call	0x91c8	; 0x91c8 <sync_fs>
    cfb2:	8c 01       	movw	r16, r24
    cfb4:	e7 cf       	rjmp	.-50     	; 0xcf84 <f_chmod+0x60>
    cfb6:	e2 96       	adiw	r28, 0x32	; 50
    cfb8:	e8 e0       	ldi	r30, 0x08	; 8
    cfba:	0c 94 5a ec 	jmp	0x1d8b4	; 0x1d8b4 <__epilogue_restores__+0x14>

0000cfbe <f_utime>:
    cfbe:	a2 e3       	ldi	r26, 0x32	; 50
    cfc0:	b0 e0       	ldi	r27, 0x00	; 0
    cfc2:	e5 ee       	ldi	r30, 0xE5	; 229
    cfc4:	f7 e6       	ldi	r31, 0x67	; 103
    cfc6:	0c 94 3e ec 	jmp	0x1d87c	; 0x1d87c <__prologue_saves__+0x14>
    cfca:	9a ab       	std	Y+50, r25	; 0x32
    cfcc:	89 ab       	std	Y+49, r24	; 0x31
    cfce:	6b 01       	movw	r12, r22
    cfd0:	42 e0       	ldi	r20, 0x02	; 2
    cfd2:	be 01       	movw	r22, r28
    cfd4:	61 5d       	subi	r22, 0xD1	; 209
    cfd6:	7f 4f       	sbci	r23, 0xFF	; 255
    cfd8:	ce 01       	movw	r24, r28
    cfda:	c1 96       	adiw	r24, 0x31	; 49
    cfdc:	0e 94 d0 49 	call	0x93a0	; 0x93a0 <find_volume>
    cfe0:	2f a5       	ldd	r18, Y+47	; 0x2f
    cfe2:	38 a9       	ldd	r19, Y+48	; 0x30
    cfe4:	3a 83       	std	Y+2, r19	; 0x02
    cfe6:	29 83       	std	Y+1, r18	; 0x01
    cfe8:	00 97       	sbiw	r24, 0x00	; 0
    cfea:	09 f0       	breq	.+2      	; 0xcfee <f_utime+0x30>
    cfec:	3d c0       	rjmp	.+122    	; 0xd068 <f_utime+0xaa>
    cfee:	80 e0       	ldi	r24, 0x00	; 0
    cff0:	92 e0       	ldi	r25, 0x02	; 2
    cff2:	24 d6       	rcall	.+3144   	; 0xdc3c <ff_memalloc>
    cff4:	7c 01       	movw	r14, r24
    cff6:	00 97       	sbiw	r24, 0x00	; 0
    cff8:	b1 f0       	breq	.+44     	; 0xd026 <f_utime+0x68>
    cffa:	ef a5       	ldd	r30, Y+47	; 0x2f
    cffc:	f8 a9       	ldd	r31, Y+48	; 0x30
    cffe:	94 87       	std	Z+12, r25	; 0x0c
    d000:	83 87       	std	Z+11, r24	; 0x0b
    d002:	69 a9       	ldd	r22, Y+49	; 0x31
    d004:	7a a9       	ldd	r23, Y+50	; 0x32
    d006:	ce 01       	movw	r24, r28
    d008:	01 96       	adiw	r24, 0x01	; 1
    d00a:	0e 94 56 56 	call	0xacac	; 0xacac <follow_path>
    d00e:	8c 01       	movw	r16, r24
    d010:	89 2b       	or	r24, r25
    d012:	29 f4       	brne	.+10     	; 0xd01e <f_utime+0x60>
    d014:	88 a5       	ldd	r24, Y+40	; 0x28
    d016:	80 7a       	andi	r24, 0xA0	; 160
    d018:	49 f0       	breq	.+18     	; 0xd02c <f_utime+0x6e>
    d01a:	06 e0       	ldi	r16, 0x06	; 6
    d01c:	10 e0       	ldi	r17, 0x00	; 0
    d01e:	c7 01       	movw	r24, r14
    d020:	10 d6       	rcall	.+3104   	; 0xdc42 <ff_memfree>
    d022:	c8 01       	movw	r24, r16
    d024:	21 c0       	rjmp	.+66     	; 0xd068 <f_utime+0xaa>
    d026:	81 e1       	ldi	r24, 0x11	; 17
    d028:	90 e0       	ldi	r25, 0x00	; 0
    d02a:	1e c0       	rjmp	.+60     	; 0xd068 <f_utime+0xaa>
    d02c:	f6 01       	movw	r30, r12
    d02e:	44 81       	ldd	r20, Z+4	; 0x04
    d030:	55 81       	ldd	r21, Z+5	; 0x05
    d032:	60 e0       	ldi	r22, 0x00	; 0
    d034:	70 e0       	ldi	r23, 0x00	; 0
    d036:	ba 01       	movw	r22, r20
    d038:	55 27       	eor	r21, r21
    d03a:	44 27       	eor	r20, r20
    d03c:	86 81       	ldd	r24, Z+6	; 0x06
    d03e:	97 81       	ldd	r25, Z+7	; 0x07
    d040:	a0 e0       	ldi	r26, 0x00	; 0
    d042:	b0 e0       	ldi	r27, 0x00	; 0
    d044:	48 2b       	or	r20, r24
    d046:	59 2b       	or	r21, r25
    d048:	6a 2b       	or	r22, r26
    d04a:	7b 2b       	or	r23, r27
    d04c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d04e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    d050:	46 96       	adiw	r24, 0x16	; 22
    d052:	0e 94 8e 47 	call	0x8f1c	; 0x8f1c <st_dword>
    d056:	8f a5       	ldd	r24, Y+47	; 0x2f
    d058:	98 a9       	ldd	r25, Y+48	; 0x30
    d05a:	21 e0       	ldi	r18, 0x01	; 1
    d05c:	fc 01       	movw	r30, r24
    d05e:	23 83       	std	Z+3, r18	; 0x03
    d060:	0e 94 e4 48 	call	0x91c8	; 0x91c8 <sync_fs>
    d064:	8c 01       	movw	r16, r24
    d066:	db cf       	rjmp	.-74     	; 0xd01e <f_utime+0x60>
    d068:	e2 96       	adiw	r28, 0x32	; 50
    d06a:	e8 e0       	ldi	r30, 0x08	; 8
    d06c:	0c 94 5a ec 	jmp	0x1d8b4	; 0x1d8b4 <__epilogue_restores__+0x14>

0000d070 <f_getlabel>:
    d070:	a2 e3       	ldi	r26, 0x32	; 50
    d072:	b0 e0       	ldi	r27, 0x00	; 0
    d074:	ee e3       	ldi	r30, 0x3E	; 62
    d076:	f8 e6       	ldi	r31, 0x68	; 104
    d078:	0c 94 3e ec 	jmp	0x1d87c	; 0x1d87c <__prologue_saves__+0x14>
    d07c:	9a ab       	std	Y+50, r25	; 0x32
    d07e:	89 ab       	std	Y+49, r24	; 0x31
    d080:	7b 01       	movw	r14, r22
    d082:	6a 01       	movw	r12, r20
    d084:	40 e0       	ldi	r20, 0x00	; 0
    d086:	be 01       	movw	r22, r28
    d088:	61 5d       	subi	r22, 0xD1	; 209
    d08a:	7f 4f       	sbci	r23, 0xFF	; 255
    d08c:	ce 01       	movw	r24, r28
    d08e:	c1 96       	adiw	r24, 0x31	; 49
    d090:	0e 94 d0 49 	call	0x93a0	; 0x93a0 <find_volume>
    d094:	8c 01       	movw	r16, r24
    d096:	89 2b       	or	r24, r25
    d098:	09 f0       	breq	.+2      	; 0xd09c <f_getlabel+0x2c>
    d09a:	5f c0       	rjmp	.+190    	; 0xd15a <f_getlabel+0xea>
    d09c:	e1 14       	cp	r14, r1
    d09e:	f1 04       	cpc	r15, r1
    d0a0:	91 f1       	breq	.+100    	; 0xd106 <f_getlabel+0x96>
    d0a2:	8f a5       	ldd	r24, Y+47	; 0x2f
    d0a4:	98 a9       	ldd	r25, Y+48	; 0x30
    d0a6:	9a 83       	std	Y+2, r25	; 0x02
    d0a8:	89 83       	std	Y+1, r24	; 0x01
    d0aa:	1f 82       	std	Y+7, r1	; 0x07
    d0ac:	18 86       	std	Y+8, r1	; 0x08
    d0ae:	19 86       	std	Y+9, r1	; 0x09
    d0b0:	1a 86       	std	Y+10, r1	; 0x0a
    d0b2:	40 e0       	ldi	r20, 0x00	; 0
    d0b4:	50 e0       	ldi	r21, 0x00	; 0
    d0b6:	ba 01       	movw	r22, r20
    d0b8:	ce 01       	movw	r24, r28
    d0ba:	01 96       	adiw	r24, 0x01	; 1
    d0bc:	0e 94 29 4e 	call	0x9c52	; 0x9c52 <dir_sdi>
    d0c0:	00 97       	sbiw	r24, 0x00	; 0
    d0c2:	e1 f4       	brne	.+56     	; 0xd0fc <f_getlabel+0x8c>
    d0c4:	61 e0       	ldi	r22, 0x01	; 1
    d0c6:	70 e0       	ldi	r23, 0x00	; 0
    d0c8:	ce 01       	movw	r24, r28
    d0ca:	01 96       	adiw	r24, 0x01	; 1
    d0cc:	0e 94 85 52 	call	0xa50a	; 0xa50a <dir_read>
    d0d0:	00 97       	sbiw	r24, 0x00	; 0
    d0d2:	a1 f4       	brne	.+40     	; 0xd0fc <f_getlabel+0x8c>
    d0d4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    d0d6:	fc 8d       	ldd	r31, Y+28	; 0x1c
    d0d8:	cf 01       	movw	r24, r30
    d0da:	0b 96       	adiw	r24, 0x0b	; 11
    d0dc:	d7 01       	movw	r26, r14
    d0de:	21 91       	ld	r18, Z+
    d0e0:	2d 93       	st	X+, r18
    d0e2:	e8 17       	cp	r30, r24
    d0e4:	f9 07       	cpc	r31, r25
    d0e6:	d9 f7       	brne	.-10     	; 0xd0de <f_getlabel+0x6e>
    d0e8:	f7 01       	movw	r30, r14
    d0ea:	3b 96       	adiw	r30, 0x0b	; 11
    d0ec:	10 82       	st	Z, r1
    d0ee:	ee 16       	cp	r14, r30
    d0f0:	ff 06       	cpc	r15, r31
    d0f2:	49 f0       	breq	.+18     	; 0xd106 <f_getlabel+0x96>
    d0f4:	82 91       	ld	r24, -Z
    d0f6:	80 32       	cpi	r24, 0x20	; 32
    d0f8:	c9 f3       	breq	.-14     	; 0xd0ec <f_getlabel+0x7c>
    d0fa:	05 c0       	rjmp	.+10     	; 0xd106 <f_getlabel+0x96>
    d0fc:	84 30       	cpi	r24, 0x04	; 4
    d0fe:	91 05       	cpc	r25, r1
    d100:	59 f5       	brne	.+86     	; 0xd158 <f_getlabel+0xe8>
    d102:	f7 01       	movw	r30, r14
    d104:	10 82       	st	Z, r1
    d106:	c1 14       	cp	r12, r1
    d108:	d1 04       	cpc	r13, r1
    d10a:	39 f1       	breq	.+78     	; 0xd15a <f_getlabel+0xea>
    d10c:	8f a5       	ldd	r24, Y+47	; 0x2f
    d10e:	98 a9       	ldd	r25, Y+48	; 0x30
    d110:	fc 01       	movw	r30, r24
    d112:	41 a1       	ldd	r20, Z+33	; 0x21
    d114:	52 a1       	ldd	r21, Z+34	; 0x22
    d116:	63 a1       	ldd	r22, Z+35	; 0x23
    d118:	74 a1       	ldd	r23, Z+36	; 0x24
    d11a:	0e 94 50 49 	call	0x92a0	; 0x92a0 <move_window>
    d11e:	8c 01       	movw	r16, r24
    d120:	89 2b       	or	r24, r25
    d122:	d9 f4       	brne	.+54     	; 0xd15a <f_getlabel+0xea>
    d124:	ef a5       	ldd	r30, Y+47	; 0x2f
    d126:	f8 a9       	ldd	r31, Y+48	; 0x30
    d128:	80 81       	ld	r24, Z
    d12a:	83 30       	cpi	r24, 0x03	; 3
    d12c:	29 f0       	breq	.+10     	; 0xd138 <f_getlabel+0xc8>
    d12e:	84 30       	cpi	r24, 0x04	; 4
    d130:	31 f0       	breq	.+12     	; 0xd13e <f_getlabel+0xce>
    d132:	87 e2       	ldi	r24, 0x27	; 39
    d134:	90 e0       	ldi	r25, 0x00	; 0
    d136:	05 c0       	rjmp	.+10     	; 0xd142 <f_getlabel+0xd2>
    d138:	83 e4       	ldi	r24, 0x43	; 67
    d13a:	90 e0       	ldi	r25, 0x00	; 0
    d13c:	02 c0       	rjmp	.+4      	; 0xd142 <f_getlabel+0xd2>
    d13e:	84 e6       	ldi	r24, 0x64	; 100
    d140:	90 e0       	ldi	r25, 0x00	; 0
    d142:	f5 96       	adiw	r30, 0x35	; 53
    d144:	8e 0f       	add	r24, r30
    d146:	9f 1f       	adc	r25, r31
    d148:	0e 94 79 47 	call	0x8ef2	; 0x8ef2 <ld_dword>
    d14c:	f6 01       	movw	r30, r12
    d14e:	60 83       	st	Z, r22
    d150:	71 83       	std	Z+1, r23	; 0x01
    d152:	82 83       	std	Z+2, r24	; 0x02
    d154:	93 83       	std	Z+3, r25	; 0x03
    d156:	01 c0       	rjmp	.+2      	; 0xd15a <f_getlabel+0xea>
    d158:	8c 01       	movw	r16, r24
    d15a:	c8 01       	movw	r24, r16
    d15c:	e2 96       	adiw	r28, 0x32	; 50
    d15e:	e8 e0       	ldi	r30, 0x08	; 8
    d160:	0c 94 5a ec 	jmp	0x1d8b4	; 0x1d8b4 <__epilogue_restores__+0x14>

0000d164 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
    d164:	a2 e4       	ldi	r26, 0x42	; 66
    d166:	b0 e0       	ldi	r27, 0x00	; 0
    d168:	e8 eb       	ldi	r30, 0xB8	; 184
    d16a:	f8 e6       	ldi	r31, 0x68	; 104
    d16c:	0c 94 34 ec 	jmp	0x1d868	; 0x1d868 <__prologue_saves__>
    d170:	9a 87       	std	Y+10, r25	; 0x0a
    d172:	89 87       	std	Y+9, r24	; 0x09
    d174:	e6 2e       	mov	r14, r22
    d176:	49 01       	movw	r8, r18
    d178:	5a 01       	movw	r10, r20
    d17a:	68 01       	movw	r12, r16
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
    d17c:	ce 01       	movw	r24, r28
    d17e:	09 96       	adiw	r24, 0x09	; 9
    d180:	0e 94 10 48 	call	0x9020	; 0x9020 <get_ldnumber>
    d184:	1c 01       	movw	r2, r24
	if (vol < 0) return FR_INVALID_DRIVE;
    d186:	97 fd       	sbrc	r25, 7
    d188:	39 c5       	rjmp	.+2674   	; 0xdbfc <f_mkfs+0xa98>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear mounted volume */
    d18a:	fc 01       	movw	r30, r24
    d18c:	ee 0f       	add	r30, r30
    d18e:	ff 1f       	adc	r31, r31
    d190:	ee 57       	subi	r30, 0x7E	; 126
    d192:	f7 4e       	sbci	r31, 0xE7	; 231
    d194:	01 90       	ld	r0, Z+
    d196:	f0 81       	ld	r31, Z
    d198:	e0 2d       	mov	r30, r0
    d19a:	30 97       	sbiw	r30, 0x00	; 0
    d19c:	09 f0       	breq	.+2      	; 0xd1a0 <f_mkfs+0x3c>
    d19e:	10 82       	st	Z, r1
	pdrv = LD2PD(vol);	/* Physical drive */
    d1a0:	2c a6       	std	Y+44, r2	; 0x2c
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
    d1a2:	82 2d       	mov	r24, r2
    d1a4:	d2 d5       	rcall	.+2980   	; 0xdd4a <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
    d1a6:	80 fd       	sbrc	r24, 0
    d1a8:	2b c5       	rjmp	.+2646   	; 0xdc00 <f_mkfs+0xa9c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    d1aa:	82 fd       	sbrc	r24, 2
    d1ac:	2b c5       	rjmp	.+2646   	; 0xdc04 <f_mkfs+0xaa0>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
    d1ae:	ae 01       	movw	r20, r28
    d1b0:	4b 5f       	subi	r20, 0xFB	; 251
    d1b2:	5f 4f       	sbci	r21, 0xFF	; 255
    d1b4:	63 e0       	ldi	r22, 0x03	; 3
    d1b6:	82 2d       	mov	r24, r2
    d1b8:	ee d5       	rcall	.+3036   	; 0xdd96 <disk_ioctl>
    d1ba:	89 2b       	or	r24, r25
    d1bc:	b9 f4       	brne	.+46     	; 0xd1ec <f_mkfs+0x88>
    d1be:	4d 81       	ldd	r20, Y+5	; 0x05
    d1c0:	5e 81       	ldd	r21, Y+6	; 0x06
    d1c2:	6f 81       	ldd	r22, Y+7	; 0x07
    d1c4:	78 85       	ldd	r23, Y+8	; 0x08
    d1c6:	db 01       	movw	r26, r22
    d1c8:	ca 01       	movw	r24, r20
    d1ca:	01 97       	sbiw	r24, 0x01	; 1
    d1cc:	a1 09       	sbc	r26, r1
    d1ce:	b1 09       	sbc	r27, r1
    d1d0:	81 15       	cp	r24, r1
    d1d2:	00 e8       	ldi	r16, 0x80	; 128
    d1d4:	90 07       	cpc	r25, r16
    d1d6:	a1 05       	cpc	r26, r1
    d1d8:	b1 05       	cpc	r27, r1
    d1da:	40 f4       	brcc	.+16     	; 0xd1ec <f_mkfs+0x88>
    d1dc:	84 23       	and	r24, r20
    d1de:	95 23       	and	r25, r21
    d1e0:	a6 23       	and	r26, r22
    d1e2:	b7 23       	and	r27, r23
    d1e4:	89 2b       	or	r24, r25
    d1e6:	8a 2b       	or	r24, r26
    d1e8:	8b 2b       	or	r24, r27
    d1ea:	41 f0       	breq	.+16     	; 0xd1fc <f_mkfs+0x98>
    d1ec:	81 e0       	ldi	r24, 0x01	; 1
    d1ee:	90 e0       	ldi	r25, 0x00	; 0
    d1f0:	a0 e0       	ldi	r26, 0x00	; 0
    d1f2:	b0 e0       	ldi	r27, 0x00	; 0
    d1f4:	8d 83       	std	Y+5, r24	; 0x05
    d1f6:	9e 83       	std	Y+6, r25	; 0x06
    d1f8:	af 83       	std	Y+7, r26	; 0x07
    d1fa:	b8 87       	std	Y+8, r27	; 0x08
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
    d1fc:	81 14       	cp	r8, r1
    d1fe:	91 04       	cpc	r9, r1
    d200:	a1 04       	cpc	r10, r1
    d202:	b1 04       	cpc	r11, r1
    d204:	61 f0       	breq	.+24     	; 0xd21e <f_mkfs+0xba>
    d206:	d5 01       	movw	r26, r10
    d208:	c4 01       	movw	r24, r8
    d20a:	92 50       	subi	r25, 0x02	; 2
    d20c:	a1 09       	sbc	r26, r1
    d20e:	b1 09       	sbc	r27, r1
    d210:	81 30       	cpi	r24, 0x01	; 1
    d212:	9e 4f       	sbci	r25, 0xFE	; 254
    d214:	af 4f       	sbci	r26, 0xFF	; 255
    d216:	b1 05       	cpc	r27, r1
    d218:	10 f0       	brcs	.+4      	; 0xd21e <f_mkfs+0xba>
    d21a:	83 e1       	ldi	r24, 0x13	; 19
    d21c:	f6 c4       	rjmp	.+2540   	; 0xdc0a <f_mkfs+0xaa6>
    d21e:	d5 01       	movw	r26, r10
    d220:	c4 01       	movw	r24, r8
    d222:	01 97       	sbiw	r24, 0x01	; 1
    d224:	a1 09       	sbc	r26, r1
    d226:	b1 09       	sbc	r27, r1
    d228:	88 21       	and	r24, r8
    d22a:	99 21       	and	r25, r9
    d22c:	aa 21       	and	r26, r10
    d22e:	bb 21       	and	r27, r11
    d230:	89 2b       	or	r24, r25
    d232:	8a 2b       	or	r24, r26
    d234:	8b 2b       	or	r24, r27
    d236:	89 f7       	brne	.-30     	; 0xd21a <f_mkfs+0xb6>
	au /= ss;	/* Cluster size in unit of sector */

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
	sz_buf = len / ss;		/* Size of working buffer (sector) */
    d238:	8f 2d       	mov	r24, r15
    d23a:	86 95       	lsr	r24
    d23c:	90 e0       	ldi	r25, 0x00	; 0
    d23e:	9c 01       	movw	r18, r24
    d240:	40 e0       	ldi	r20, 0x00	; 0
    d242:	50 e0       	ldi	r21, 0x00	; 0
    d244:	2c a3       	std	Y+36, r18	; 0x24
    d246:	3d a3       	std	Y+37, r19	; 0x25
    d248:	4e a3       	std	Y+38, r20	; 0x26
    d24a:	5f a3       	std	Y+39, r21	; 0x27
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
    d24c:	69 e0       	ldi	r22, 0x09	; 9
    d24e:	22 0f       	add	r18, r18
    d250:	33 1f       	adc	r19, r19
    d252:	44 1f       	adc	r20, r20
    d254:	55 1f       	adc	r21, r21
    d256:	6a 95       	dec	r22
    d258:	d1 f7       	brne	.-12     	; 0xd24e <f_mkfs+0xea>
    d25a:	2d a7       	std	Y+45, r18	; 0x2d
    d25c:	3e a7       	std	Y+46, r19	; 0x2e
    d25e:	4f a7       	std	Y+47, r20	; 0x2f
    d260:	58 ab       	std	Y+48, r21	; 0x30
	if (!szb_buf) return FR_MKFS_ABORTED;
    d262:	23 2b       	or	r18, r19
    d264:	24 2b       	or	r18, r20
    d266:	25 2b       	or	r18, r21
    d268:	11 f4       	brne	.+4      	; 0xd26e <f_mkfs+0x10a>
    d26a:	8e e0       	ldi	r24, 0x0E	; 14
    d26c:	ce c4       	rjmp	.+2460   	; 0xdc0a <f_mkfs+0xaa6>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
    d26e:	ae 01       	movw	r20, r28
    d270:	4f 5f       	subi	r20, 0xFF	; 255
    d272:	5f 4f       	sbci	r21, 0xFF	; 255
    d274:	61 e0       	ldi	r22, 0x01	; 1
    d276:	82 2d       	mov	r24, r2
    d278:	8e d5       	rcall	.+2844   	; 0xdd96 <disk_ioctl>
    d27a:	89 2b       	or	r24, r25
    d27c:	09 f0       	breq	.+2      	; 0xd280 <f_mkfs+0x11c>
    d27e:	c4 c4       	rjmp	.+2440   	; 0xdc08 <f_mkfs+0xaa4>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
    d280:	3e 2d       	mov	r19, r14
    d282:	38 70       	andi	r19, 0x08	; 8
    d284:	3a ab       	std	Y+50, r19	; 0x32
    d286:	e3 fe       	sbrs	r14, 3
    d288:	05 c0       	rjmp	.+10     	; 0xd294 <f_mkfs+0x130>
    d28a:	1c 8a       	std	Y+20, r1	; 0x14
    d28c:	1d 8a       	std	Y+21, r1	; 0x15
    d28e:	1e 8a       	std	Y+22, r1	; 0x16
    d290:	1f 8a       	std	Y+23, r1	; 0x17
    d292:	08 c0       	rjmp	.+16     	; 0xd2a4 <f_mkfs+0x140>
    d294:	8f e3       	ldi	r24, 0x3F	; 63
    d296:	90 e0       	ldi	r25, 0x00	; 0
    d298:	a0 e0       	ldi	r26, 0x00	; 0
    d29a:	b0 e0       	ldi	r27, 0x00	; 0
    d29c:	8c 8b       	std	Y+20, r24	; 0x14
    d29e:	9d 8b       	std	Y+21, r25	; 0x15
    d2a0:	ae 8b       	std	Y+22, r26	; 0x16
    d2a2:	bf 8b       	std	Y+23, r27	; 0x17
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
    d2a4:	49 80       	ldd	r4, Y+1	; 0x01
    d2a6:	5a 80       	ldd	r5, Y+2	; 0x02
    d2a8:	6b 80       	ldd	r6, Y+3	; 0x03
    d2aa:	7c 80       	ldd	r7, Y+4	; 0x04
    d2ac:	0c 89       	ldd	r16, Y+20	; 0x14
    d2ae:	1d 89       	ldd	r17, Y+21	; 0x15
    d2b0:	2e 89       	ldd	r18, Y+22	; 0x16
    d2b2:	3f 89       	ldd	r19, Y+23	; 0x17
    d2b4:	40 16       	cp	r4, r16
    d2b6:	51 06       	cpc	r5, r17
    d2b8:	62 06       	cpc	r6, r18
    d2ba:	73 06       	cpc	r7, r19
    d2bc:	b0 f2       	brcs	.-84     	; 0xd26a <f_mkfs+0x106>
		sz_vol -= b_vol;						/* Volume size */
    d2be:	d3 01       	movw	r26, r6
    d2c0:	c2 01       	movw	r24, r4
    d2c2:	80 1b       	sub	r24, r16
    d2c4:	91 0b       	sbc	r25, r17
    d2c6:	a2 0b       	sbc	r26, r18
    d2c8:	b3 0b       	sbc	r27, r19
    d2ca:	8b 87       	std	Y+11, r24	; 0x0b
    d2cc:	9c 87       	std	Y+12, r25	; 0x0c
    d2ce:	ad 87       	std	Y+13, r26	; 0x0d
    d2d0:	be 87       	std	Y+14, r27	; 0x0e
    d2d2:	89 83       	std	Y+1, r24	; 0x01
    d2d4:	9a 83       	std	Y+2, r25	; 0x02
    d2d6:	ab 83       	std	Y+3, r26	; 0x03
    d2d8:	bc 83       	std	Y+4, r27	; 0x04
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
    d2da:	80 38       	cpi	r24, 0x80	; 128
    d2dc:	91 05       	cpc	r25, r1
    d2de:	a1 05       	cpc	r26, r1
    d2e0:	b1 05       	cpc	r27, r1
    d2e2:	18 f2       	brcs	.-122    	; 0xd26a <f_mkfs+0x106>
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
	au /= ss;	/* Cluster size in unit of sector */
    d2e4:	29 e0       	ldi	r18, 0x09	; 9
    d2e6:	b6 94       	lsr	r11
    d2e8:	a7 94       	ror	r10
    d2ea:	97 94       	ror	r9
    d2ec:	87 94       	ror	r8
    d2ee:	2a 95       	dec	r18
    d2f0:	d1 f7       	brne	.-12     	; 0xd2e6 <f_mkfs+0x182>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
    d2f2:	91 e8       	ldi	r25, 0x81	; 129
    d2f4:	89 16       	cp	r8, r25
    d2f6:	91 04       	cpc	r9, r1
    d2f8:	a1 04       	cpc	r10, r1
    d2fa:	b1 04       	cpc	r11, r1
    d2fc:	08 f0       	brcs	.+2      	; 0xd300 <f_mkfs+0x19c>
    d2fe:	8d cf       	rjmp	.-230    	; 0xd21a <f_mkfs+0xb6>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
    d300:	ae 2d       	mov	r26, r14
    d302:	a2 70       	andi	r26, 0x02	; 2
    d304:	fa 2e       	mov	r15, r26
    d306:	e1 fe       	sbrs	r14, 1
    d308:	06 c0       	rjmp	.+12     	; 0xd316 <f_mkfs+0x1b2>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
    d30a:	8e 2d       	mov	r24, r14
    d30c:	87 70       	andi	r24, 0x07	; 7
    d30e:	82 30       	cpi	r24, 0x02	; 2
    d310:	39 f0       	breq	.+14     	; 0xd320 <f_mkfs+0x1bc>
    d312:	e0 fe       	sbrs	r14, 0
    d314:	08 c0       	rjmp	.+16     	; 0xd326 <f_mkfs+0x1c2>
				fmt = FS_FAT32; break;
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
    d316:	e0 fe       	sbrs	r14, 0
    d318:	80 cf       	rjmp	.-256    	; 0xd21a <f_mkfs+0xb6>
		fmt = FS_FAT16;
    d31a:	b2 e0       	ldi	r27, 0x02	; 2
    d31c:	bf 87       	std	Y+15, r27	; 0x0f
    d31e:	05 c0       	rjmp	.+10     	; 0xd32a <f_mkfs+0x1c6>
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
		if (opt & FM_FAT32) {	/* FAT32 possible? */
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
				fmt = FS_FAT32; break;
    d320:	e3 e0       	ldi	r30, 0x03	; 3
    d322:	ef 87       	std	Y+15, r30	; 0x0f
    d324:	02 c0       	rjmp	.+4      	; 0xd32a <f_mkfs+0x1c6>
    d326:	f3 e0       	ldi	r31, 0x03	; 3
    d328:	ff 87       	std	Y+15, r31	; 0x0f
		do {
			pau = au;
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
				if (!pau) {	/* au auto-selection */
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
    d32a:	0b 85       	ldd	r16, Y+11	; 0x0b
    d32c:	1c 85       	ldd	r17, Y+12	; 0x0c
    d32e:	2d 85       	ldd	r18, Y+13	; 0x0d
    d330:	3e 85       	ldd	r19, Y+14	; 0x0e
    d332:	81 e1       	ldi	r24, 0x11	; 17
    d334:	36 95       	lsr	r19
    d336:	27 95       	ror	r18
    d338:	17 95       	ror	r17
    d33a:	07 95       	ror	r16
    d33c:	8a 95       	dec	r24
    d33e:	d1 f7       	brne	.-12     	; 0xd334 <f_mkfs+0x1d0>
    d340:	23 96       	adiw	r28, 0x03	; 3
    d342:	0c af       	std	Y+60, r16	; 0x3c
    d344:	1d af       	std	Y+61, r17	; 0x3d
    d346:	2e af       	std	Y+62, r18	; 0x3e
    d348:	3f af       	std	Y+63, r19	; 0x3f
    d34a:	23 97       	sbiw	r28, 0x03	; 3
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
    d34c:	0b 85       	ldd	r16, Y+11	; 0x0b
    d34e:	1c 85       	ldd	r17, Y+12	; 0x0c
    d350:	2d 85       	ldd	r18, Y+13	; 0x0d
    d352:	3e 85       	ldd	r19, Y+14	; 0x0e
    d354:	9c e0       	ldi	r25, 0x0C	; 12
    d356:	36 95       	lsr	r19
    d358:	27 95       	ror	r18
    d35a:	17 95       	ror	r17
    d35c:	07 95       	ror	r16
    d35e:	9a 95       	dec	r25
    d360:	d1 f7       	brne	.-12     	; 0xd356 <f_mkfs+0x1f2>
    d362:	0b ab       	std	Y+51, r16	; 0x33
    d364:	1c ab       	std	Y+52, r17	; 0x34
    d366:	2d ab       	std	Y+53, r18	; 0x35
    d368:	3e ab       	std	Y+54, r19	; 0x36
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
    d36a:	8d 81       	ldd	r24, Y+5	; 0x05
    d36c:	9e 81       	ldd	r25, Y+6	; 0x06
    d36e:	af 81       	ldd	r26, Y+7	; 0x07
    d370:	b8 85       	ldd	r27, Y+8	; 0x08
    d372:	8c 01       	movw	r16, r24
    d374:	9d 01       	movw	r18, r26
    d376:	01 50       	subi	r16, 0x01	; 1
    d378:	11 09       	sbc	r17, r1
    d37a:	21 09       	sbc	r18, r1
    d37c:	31 09       	sbc	r19, r1
    d37e:	0b af       	std	Y+59, r16	; 0x3b
    d380:	1c af       	std	Y+60, r17	; 0x3c
    d382:	2d af       	std	Y+61, r18	; 0x3d
    d384:	3e af       	std	Y+62, r19	; 0x3e
    d386:	00 27       	eor	r16, r16
    d388:	11 27       	eor	r17, r17
    d38a:	98 01       	movw	r18, r16
    d38c:	08 1b       	sub	r16, r24
    d38e:	19 0b       	sbc	r17, r25
    d390:	2a 0b       	sbc	r18, r26
    d392:	3b 0b       	sbc	r19, r27
    d394:	0f ab       	std	Y+55, r16	; 0x37
    d396:	18 af       	std	Y+56, r17	; 0x38
    d398:	29 af       	std	Y+57, r18	; 0x39
    d39a:	3a af       	std	Y+58, r19	; 0x3a
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
    d39c:	1f 85       	ldd	r17, Y+15	; 0x0f
    d39e:	13 30       	cpi	r17, 0x03	; 3
    d3a0:	09 f0       	breq	.+2      	; 0xd3a4 <f_mkfs+0x240>
    d3a2:	67 c1       	rjmp	.+718    	; 0xd672 <f_mkfs+0x50e>
				if (!pau) {	/* au auto-selection */
    d3a4:	81 14       	cp	r8, r1
    d3a6:	91 04       	cpc	r9, r1
    d3a8:	a1 04       	cpc	r10, r1
    d3aa:	b1 04       	cpc	r11, r1
    d3ac:	e1 f4       	brne	.+56     	; 0xd3e6 <f_mkfs+0x282>
    d3ae:	ed ee       	ldi	r30, 0xED	; 237
    d3b0:	f2 e0       	ldi	r31, 0x02	; 2
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
    d3b2:	41 2c       	mov	r4, r1
    d3b4:	51 2c       	mov	r5, r1
    d3b6:	32 01       	movw	r6, r4
    d3b8:	43 94       	inc	r4
    d3ba:	81 91       	ld	r24, Z+
    d3bc:	91 91       	ld	r25, Z+
    d3be:	00 97       	sbiw	r24, 0x00	; 0
    d3c0:	a1 f0       	breq	.+40     	; 0xd3ea <f_mkfs+0x286>
    d3c2:	a0 e0       	ldi	r26, 0x00	; 0
    d3c4:	b0 e0       	ldi	r27, 0x00	; 0
    d3c6:	23 96       	adiw	r28, 0x03	; 3
    d3c8:	0c ad       	ldd	r16, Y+60	; 0x3c
    d3ca:	1d ad       	ldd	r17, Y+61	; 0x3d
    d3cc:	2e ad       	ldd	r18, Y+62	; 0x3e
    d3ce:	3f ad       	ldd	r19, Y+63	; 0x3f
    d3d0:	23 97       	sbiw	r28, 0x03	; 3
    d3d2:	08 17       	cp	r16, r24
    d3d4:	19 07       	cpc	r17, r25
    d3d6:	2a 07       	cpc	r18, r26
    d3d8:	3b 07       	cpc	r19, r27
    d3da:	38 f0       	brcs	.+14     	; 0xd3ea <f_mkfs+0x286>
    d3dc:	44 0c       	add	r4, r4
    d3de:	55 1c       	adc	r5, r5
    d3e0:	66 1c       	adc	r6, r6
    d3e2:	77 1c       	adc	r7, r7
    d3e4:	ea cf       	rjmp	.-44     	; 0xd3ba <f_mkfs+0x256>
    d3e6:	24 01       	movw	r4, r8
    d3e8:	35 01       	movw	r6, r10
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
    d3ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    d3ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    d3ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    d3f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    d3f2:	a3 01       	movw	r20, r6
    d3f4:	92 01       	movw	r18, r4
    d3f6:	0e 94 c7 eb 	call	0x1d78e	; 0x1d78e <__udivmodsi4>
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
    d3fa:	da 01       	movw	r26, r20
    d3fc:	c9 01       	movw	r24, r18
    d3fe:	62 e0       	ldi	r22, 0x02	; 2
    d400:	88 0f       	add	r24, r24
    d402:	99 1f       	adc	r25, r25
    d404:	aa 1f       	adc	r26, r26
    d406:	bb 1f       	adc	r27, r27
    d408:	6a 95       	dec	r22
    d40a:	d1 f7       	brne	.-12     	; 0xd400 <f_mkfs+0x29c>
    d40c:	89 5f       	subi	r24, 0xF9	; 249
    d40e:	9d 4f       	sbci	r25, 0xFD	; 253
    d410:	af 4f       	sbci	r26, 0xFF	; 255
    d412:	bf 4f       	sbci	r27, 0xFF	; 255
    d414:	79 e0       	ldi	r23, 0x09	; 9
    d416:	b6 95       	lsr	r27
    d418:	a7 95       	ror	r26
    d41a:	97 95       	ror	r25
    d41c:	87 95       	ror	r24
    d41e:	7a 95       	dec	r23
    d420:	d1 f7       	brne	.-12     	; 0xd416 <f_mkfs+0x2b2>
    d422:	88 8b       	std	Y+16, r24	; 0x10
    d424:	99 8b       	std	Y+17, r25	; 0x11
    d426:	aa 8b       	std	Y+18, r26	; 0x12
    d428:	bb 8b       	std	Y+19, r27	; 0x13
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
    d42a:	da 01       	movw	r26, r20
    d42c:	c9 01       	movw	r24, r18
    d42e:	86 5f       	subi	r24, 0xF6	; 246
    d430:	9f 4f       	sbci	r25, 0xFF	; 255
    d432:	a1 09       	sbc	r26, r1
    d434:	b1 09       	sbc	r27, r1
    d436:	00 97       	sbiw	r24, 0x00	; 0
    d438:	af 4f       	sbci	r26, 0xFF	; 255
    d43a:	bf 40       	sbci	r27, 0x0F	; 15
    d43c:	08 f0       	brcs	.+2      	; 0xd440 <f_mkfs+0x2dc>
    d43e:	15 cf       	rjmp	.-470    	; 0xd26a <f_mkfs+0x106>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
    d440:	1c 8e       	std	Y+28, r1	; 0x1c
    d442:	1d 8e       	std	Y+29, r1	; 0x1d
    d444:	1e 8e       	std	Y+30, r1	; 0x1e
    d446:	1f 8e       	std	Y+31, r1	; 0x1f
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
				sz_rsv = 32;	/* Number of reserved sectors */
    d448:	00 e2       	ldi	r16, 0x20	; 32
    d44a:	10 e0       	ldi	r17, 0x00	; 0
    d44c:	20 e0       	ldi	r18, 0x00	; 0
    d44e:	30 e0       	ldi	r19, 0x00	; 0
    d450:	08 a3       	std	Y+32, r16	; 0x20
    d452:	19 a3       	std	Y+33, r17	; 0x21
    d454:	2a a3       	std	Y+34, r18	; 0x22
    d456:	3b a3       	std	Y+35, r19	; 0x23
    d458:	4e c0       	rjmp	.+156    	; 0xd4f6 <f_mkfs+0x392>
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
    d45a:	a0 e0       	ldi	r26, 0x00	; 0
    d45c:	b0 e0       	ldi	r27, 0x00	; 0
    d45e:	0b a9       	ldd	r16, Y+51	; 0x33
    d460:	1c a9       	ldd	r17, Y+52	; 0x34
    d462:	2d a9       	ldd	r18, Y+53	; 0x35
    d464:	3e a9       	ldd	r19, Y+54	; 0x36
    d466:	08 17       	cp	r16, r24
    d468:	19 07       	cpc	r17, r25
    d46a:	2a 07       	cpc	r18, r26
    d46c:	3b 07       	cpc	r19, r27
    d46e:	40 f0       	brcs	.+16     	; 0xd480 <f_mkfs+0x31c>
    d470:	44 0c       	add	r4, r4
    d472:	55 1c       	adc	r5, r5
    d474:	66 1c       	adc	r6, r6
    d476:	77 1c       	adc	r7, r7
    d478:	81 91       	ld	r24, Z+
    d47a:	91 91       	ld	r25, Z+
    d47c:	00 97       	sbiw	r24, 0x00	; 0
    d47e:	69 f7       	brne	.-38     	; 0xd45a <f_mkfs+0x2f6>
				}
				n_clst = sz_vol / pau;
    d480:	6b 85       	ldd	r22, Y+11	; 0x0b
    d482:	7c 85       	ldd	r23, Y+12	; 0x0c
    d484:	8d 85       	ldd	r24, Y+13	; 0x0d
    d486:	9e 85       	ldd	r25, Y+14	; 0x0e
    d488:	a3 01       	movw	r20, r6
    d48a:	92 01       	movw	r18, r4
    d48c:	0e 94 c7 eb 	call	0x1d78e	; 0x1d78e <__udivmodsi4>
				if (n_clst > MAX_FAT12) {
    d490:	26 3f       	cpi	r18, 0xF6	; 246
    d492:	1f e0       	ldi	r17, 0x0F	; 15
    d494:	31 07       	cpc	r19, r17
    d496:	41 05       	cpc	r20, r1
    d498:	51 05       	cpc	r21, r1
    d49a:	08 f4       	brcc	.+2      	; 0xd49e <f_mkfs+0x33a>
    d49c:	f9 c0       	rjmp	.+498    	; 0xd690 <f_mkfs+0x52c>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
    d49e:	da 01       	movw	r26, r20
    d4a0:	c9 01       	movw	r24, r18
    d4a2:	02 96       	adiw	r24, 0x02	; 2
    d4a4:	a1 1d       	adc	r26, r1
    d4a6:	b1 1d       	adc	r27, r1
    d4a8:	88 0f       	add	r24, r24
    d4aa:	99 1f       	adc	r25, r25
    d4ac:	aa 1f       	adc	r26, r26
    d4ae:	bb 1f       	adc	r27, r27
    d4b0:	22 e0       	ldi	r18, 0x02	; 2
    d4b2:	2f 87       	std	Y+15, r18	; 0x0f
				} else {
					fmt = FS_FAT12;
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
    d4b4:	81 50       	subi	r24, 0x01	; 1
    d4b6:	9e 4f       	sbci	r25, 0xFE	; 254
    d4b8:	af 4f       	sbci	r26, 0xFF	; 255
    d4ba:	bf 4f       	sbci	r27, 0xFF	; 255
    d4bc:	8c 01       	movw	r16, r24
    d4be:	9d 01       	movw	r18, r26
    d4c0:	a9 e0       	ldi	r26, 0x09	; 9
    d4c2:	36 95       	lsr	r19
    d4c4:	27 95       	ror	r18
    d4c6:	17 95       	ror	r17
    d4c8:	07 95       	ror	r16
    d4ca:	aa 95       	dec	r26
    d4cc:	d1 f7       	brne	.-12     	; 0xd4c2 <f_mkfs+0x35e>
    d4ce:	08 8b       	std	Y+16, r16	; 0x10
    d4d0:	19 8b       	std	Y+17, r17	; 0x11
    d4d2:	2a 8b       	std	Y+18, r18	; 0x12
    d4d4:	3b 8b       	std	Y+19, r19	; 0x13
				sz_rsv = 1;						/* Number of reserved sectors */
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
    d4d6:	20 e2       	ldi	r18, 0x20	; 32
    d4d8:	30 e0       	ldi	r19, 0x00	; 0
    d4da:	40 e0       	ldi	r20, 0x00	; 0
    d4dc:	50 e0       	ldi	r21, 0x00	; 0
    d4de:	2c 8f       	std	Y+28, r18	; 0x1c
    d4e0:	3d 8f       	std	Y+29, r19	; 0x1d
    d4e2:	4e 8f       	std	Y+30, r20	; 0x1e
    d4e4:	5f 8f       	std	Y+31, r21	; 0x1f
				} else {
					fmt = FS_FAT12;
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
				sz_rsv = 1;						/* Number of reserved sectors */
    d4e6:	81 e0       	ldi	r24, 0x01	; 1
    d4e8:	90 e0       	ldi	r25, 0x00	; 0
    d4ea:	a0 e0       	ldi	r26, 0x00	; 0
    d4ec:	b0 e0       	ldi	r27, 0x00	; 0
    d4ee:	88 a3       	std	Y+32, r24	; 0x20
    d4f0:	99 a3       	std	Y+33, r25	; 0x21
    d4f2:	aa a3       	std	Y+34, r26	; 0x22
    d4f4:	bb a3       	std	Y+35, r27	; 0x23
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
    d4f6:	08 a1       	ldd	r16, Y+32	; 0x20
    d4f8:	19 a1       	ldd	r17, Y+33	; 0x21
    d4fa:	2a a1       	ldd	r18, Y+34	; 0x22
    d4fc:	3b a1       	ldd	r19, Y+35	; 0x23
    d4fe:	8c 89       	ldd	r24, Y+20	; 0x14
    d500:	9d 89       	ldd	r25, Y+21	; 0x15
    d502:	ae 89       	ldd	r26, Y+22	; 0x16
    d504:	bf 89       	ldd	r27, Y+23	; 0x17
    d506:	08 0f       	add	r16, r24
    d508:	19 1f       	adc	r17, r25
    d50a:	2a 1f       	adc	r18, r26
    d50c:	3b 1f       	adc	r19, r27
    d50e:	08 8f       	std	Y+24, r16	; 0x18
    d510:	19 8f       	std	Y+25, r17	; 0x19
    d512:	2a 8f       	std	Y+26, r18	; 0x1a
    d514:	3b 8f       	std	Y+27, r19	; 0x1b
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
    d516:	88 89       	ldd	r24, Y+16	; 0x10
    d518:	99 89       	ldd	r25, Y+17	; 0x11
    d51a:	aa 89       	ldd	r26, Y+18	; 0x12
    d51c:	bb 89       	ldd	r27, Y+19	; 0x13
    d51e:	0c 8d       	ldd	r16, Y+28	; 0x1c
    d520:	1d 8d       	ldd	r17, Y+29	; 0x1d
    d522:	2e 8d       	ldd	r18, Y+30	; 0x1e
    d524:	3f 8d       	ldd	r19, Y+31	; 0x1f
    d526:	80 0f       	add	r24, r16
    d528:	91 1f       	adc	r25, r17
    d52a:	a2 1f       	adc	r26, r18
    d52c:	b3 1f       	adc	r27, r19
    d52e:	28 8d       	ldd	r18, Y+24	; 0x18
    d530:	39 8d       	ldd	r19, Y+25	; 0x19
    d532:	4a 8d       	ldd	r20, Y+26	; 0x1a
    d534:	5b 8d       	ldd	r21, Y+27	; 0x1b
    d536:	82 0f       	add	r24, r18
    d538:	93 1f       	adc	r25, r19
    d53a:	a4 1f       	adc	r26, r20
    d53c:	b5 1f       	adc	r27, r21

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
    d53e:	4b ad       	ldd	r20, Y+59	; 0x3b
    d540:	5c ad       	ldd	r21, Y+60	; 0x3c
    d542:	6d ad       	ldd	r22, Y+61	; 0x3d
    d544:	7e ad       	ldd	r23, Y+62	; 0x3e
    d546:	48 0f       	add	r20, r24
    d548:	59 1f       	adc	r21, r25
    d54a:	6a 1f       	adc	r22, r26
    d54c:	7b 1f       	adc	r23, r27
    d54e:	0f a9       	ldd	r16, Y+55	; 0x37
    d550:	18 ad       	ldd	r17, Y+56	; 0x38
    d552:	29 ad       	ldd	r18, Y+57	; 0x39
    d554:	3a ad       	ldd	r19, Y+58	; 0x3a
    d556:	40 23       	and	r20, r16
    d558:	51 23       	and	r21, r17
    d55a:	62 23       	and	r22, r18
    d55c:	73 23       	and	r23, r19
    d55e:	48 1b       	sub	r20, r24
    d560:	59 0b       	sbc	r21, r25
    d562:	6a 0b       	sbc	r22, r26
    d564:	7b 0b       	sbc	r23, r27
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
    d566:	1f 85       	ldd	r17, Y+15	; 0x0f
    d568:	13 30       	cpi	r17, 0x03	; 3
    d56a:	09 f0       	breq	.+2      	; 0xd56e <f_mkfs+0x40a>
    d56c:	a4 c0       	rjmp	.+328    	; 0xd6b6 <f_mkfs+0x552>
				sz_rsv += n; b_fat += n;
    d56e:	08 a1       	ldd	r16, Y+32	; 0x20
    d570:	19 a1       	ldd	r17, Y+33	; 0x21
    d572:	2a a1       	ldd	r18, Y+34	; 0x22
    d574:	3b a1       	ldd	r19, Y+35	; 0x23
    d576:	04 0f       	add	r16, r20
    d578:	15 1f       	adc	r17, r21
    d57a:	26 1f       	adc	r18, r22
    d57c:	37 1f       	adc	r19, r23
    d57e:	08 a3       	std	Y+32, r16	; 0x20
    d580:	19 a3       	std	Y+33, r17	; 0x21
    d582:	2a a3       	std	Y+34, r18	; 0x22
    d584:	3b a3       	std	Y+35, r19	; 0x23
    d586:	08 8d       	ldd	r16, Y+24	; 0x18
    d588:	19 8d       	ldd	r17, Y+25	; 0x19
    d58a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    d58c:	3b 8d       	ldd	r19, Y+27	; 0x1b
    d58e:	04 0f       	add	r16, r20
    d590:	15 1f       	adc	r17, r21
    d592:	26 1f       	adc	r18, r22
    d594:	37 1f       	adc	r19, r23
    d596:	08 8f       	std	Y+24, r16	; 0x18
    d598:	19 8f       	std	Y+25, r17	; 0x19
    d59a:	2a 8f       	std	Y+26, r18	; 0x1a
    d59c:	3b 8f       	std	Y+27, r19	; 0x1b
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
    d59e:	b3 01       	movw	r22, r6
    d5a0:	a2 01       	movw	r20, r4
    d5a2:	f4 e0       	ldi	r31, 0x04	; 4
    d5a4:	44 0f       	add	r20, r20
    d5a6:	55 1f       	adc	r21, r21
    d5a8:	66 1f       	adc	r22, r22
    d5aa:	77 1f       	adc	r23, r23
    d5ac:	fa 95       	dec	r31
    d5ae:	d1 f7       	brne	.-12     	; 0xd5a4 <f_mkfs+0x440>
    d5b0:	0c 89       	ldd	r16, Y+20	; 0x14
    d5b2:	1d 89       	ldd	r17, Y+21	; 0x15
    d5b4:	2e 89       	ldd	r18, Y+22	; 0x16
    d5b6:	3f 89       	ldd	r19, Y+23	; 0x17
    d5b8:	40 1b       	sub	r20, r16
    d5ba:	51 0b       	sbc	r21, r17
    d5bc:	62 0b       	sbc	r22, r18
    d5be:	73 0b       	sbc	r23, r19
    d5c0:	84 0f       	add	r24, r20
    d5c2:	95 1f       	adc	r25, r21
    d5c4:	a6 1f       	adc	r26, r22
    d5c6:	b7 1f       	adc	r27, r23
    d5c8:	0b 85       	ldd	r16, Y+11	; 0x0b
    d5ca:	1c 85       	ldd	r17, Y+12	; 0x0c
    d5cc:	2d 85       	ldd	r18, Y+13	; 0x0d
    d5ce:	3e 85       	ldd	r19, Y+14	; 0x0e
    d5d0:	08 17       	cp	r16, r24
    d5d2:	19 07       	cpc	r17, r25
    d5d4:	2a 07       	cpc	r18, r26
    d5d6:	3b 07       	cpc	r19, r27
    d5d8:	08 f4       	brcc	.+2      	; 0xd5dc <f_mkfs+0x478>
    d5da:	47 ce       	rjmp	.-882    	; 0xd26a <f_mkfs+0x106>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
    d5dc:	d9 01       	movw	r26, r18
    d5de:	c8 01       	movw	r24, r16
    d5e0:	28 a1       	ldd	r18, Y+32	; 0x20
    d5e2:	39 a1       	ldd	r19, Y+33	; 0x21
    d5e4:	4a a1       	ldd	r20, Y+34	; 0x22
    d5e6:	5b a1       	ldd	r21, Y+35	; 0x23
    d5e8:	82 1b       	sub	r24, r18
    d5ea:	93 0b       	sbc	r25, r19
    d5ec:	a4 0b       	sbc	r26, r20
    d5ee:	b5 0b       	sbc	r27, r21
    d5f0:	08 89       	ldd	r16, Y+16	; 0x10
    d5f2:	19 89       	ldd	r17, Y+17	; 0x11
    d5f4:	2a 89       	ldd	r18, Y+18	; 0x12
    d5f6:	3b 89       	ldd	r19, Y+19	; 0x13
    d5f8:	80 1b       	sub	r24, r16
    d5fa:	91 0b       	sbc	r25, r17
    d5fc:	a2 0b       	sbc	r26, r18
    d5fe:	b3 0b       	sbc	r27, r19
    d600:	bc 01       	movw	r22, r24
    d602:	cd 01       	movw	r24, r26
    d604:	2c 8d       	ldd	r18, Y+28	; 0x1c
    d606:	3d 8d       	ldd	r19, Y+29	; 0x1d
    d608:	4e 8d       	ldd	r20, Y+30	; 0x1e
    d60a:	5f 8d       	ldd	r21, Y+31	; 0x1f
    d60c:	62 1b       	sub	r22, r18
    d60e:	73 0b       	sbc	r23, r19
    d610:	84 0b       	sbc	r24, r20
    d612:	95 0b       	sbc	r25, r21
    d614:	a3 01       	movw	r20, r6
    d616:	92 01       	movw	r18, r4
    d618:	0e 94 c7 eb 	call	0x1d78e	; 0x1d78e <__udivmodsi4>
    d61c:	28 a7       	std	Y+40, r18	; 0x28
    d61e:	39 a7       	std	Y+41, r19	; 0x29
    d620:	4a a7       	std	Y+42, r20	; 0x2a
    d622:	5b a7       	std	Y+43, r21	; 0x2b
			if (fmt == FS_FAT32) {
    d624:	3f 85       	ldd	r19, Y+15	; 0x0f
    d626:	33 30       	cpi	r19, 0x03	; 3
    d628:	09 f4       	brne	.+2      	; 0xd62c <f_mkfs+0x4c8>
    d62a:	52 c0       	rjmp	.+164    	; 0xd6d0 <f_mkfs+0x56c>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
					return FR_MKFS_ABORTED;
				}
			}
			if (fmt == FS_FAT16) {
    d62c:	ff 85       	ldd	r31, Y+15	; 0x0f
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
    d62e:	08 a5       	ldd	r16, Y+40	; 0x28
    d630:	19 a5       	ldd	r17, Y+41	; 0x29
    d632:	2a a5       	ldd	r18, Y+42	; 0x2a
    d634:	3b a5       	ldd	r19, Y+43	; 0x2b
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
					return FR_MKFS_ABORTED;
				}
			}
			if (fmt == FS_FAT16) {
    d636:	f2 30       	cpi	r31, 0x02	; 2
    d638:	09 f0       	breq	.+2      	; 0xd63c <f_mkfs+0x4d8>
    d63a:	83 c0       	rjmp	.+262    	; 0xd742 <f_mkfs+0x5de>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
    d63c:	06 3f       	cpi	r16, 0xF6	; 246
    d63e:	4f ef       	ldi	r20, 0xFF	; 255
    d640:	14 07       	cpc	r17, r20
    d642:	21 05       	cpc	r18, r1
    d644:	31 05       	cpc	r19, r1
    d646:	08 f4       	brcc	.+2      	; 0xd64a <f_mkfs+0x4e6>
    d648:	5f c0       	rjmp	.+190    	; 0xd708 <f_mkfs+0x5a4>
					if (!au && (pau * 2) <= 64) {
    d64a:	81 14       	cp	r8, r1
    d64c:	91 04       	cpc	r9, r1
    d64e:	a1 04       	cpc	r10, r1
    d650:	b1 04       	cpc	r11, r1
    d652:	09 f0       	breq	.+2      	; 0xd656 <f_mkfs+0x4f2>
    d654:	e8 c2       	rjmp	.+1488   	; 0xdc26 <f_mkfs+0xac2>
    d656:	d3 01       	movw	r26, r6
    d658:	c2 01       	movw	r24, r4
    d65a:	88 0f       	add	r24, r24
    d65c:	99 1f       	adc	r25, r25
    d65e:	aa 1f       	adc	r26, r26
    d660:	bb 1f       	adc	r27, r27
    d662:	81 34       	cpi	r24, 0x41	; 65
    d664:	91 05       	cpc	r25, r1
    d666:	a1 05       	cpc	r26, r1
    d668:	b1 05       	cpc	r27, r1
    d66a:	08 f0       	brcs	.+2      	; 0xd66e <f_mkfs+0x50a>
    d66c:	d0 c2       	rjmp	.+1440   	; 0xdc0e <f_mkfs+0xaaa>
    d66e:	4c 01       	movw	r8, r24
    d670:	5d 01       	movw	r10, r26
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
    d672:	81 14       	cp	r8, r1
    d674:	91 04       	cpc	r9, r1
    d676:	a1 04       	cpc	r10, r1
    d678:	b1 04       	cpc	r11, r1
    d67a:	39 f4       	brne	.+14     	; 0xd68a <f_mkfs+0x526>
    d67c:	ef ed       	ldi	r30, 0xDF	; 223
    d67e:	f2 e0       	ldi	r31, 0x02	; 2
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
    d680:	41 2c       	mov	r4, r1
    d682:	51 2c       	mov	r5, r1
    d684:	32 01       	movw	r6, r4
    d686:	43 94       	inc	r4
    d688:	f7 ce       	rjmp	.-530    	; 0xd478 <f_mkfs+0x314>
    d68a:	24 01       	movw	r4, r8
    d68c:	35 01       	movw	r6, r10
    d68e:	f8 ce       	rjmp	.-528    	; 0xd480 <f_mkfs+0x31c>
				n_clst = sz_vol / pau;
				if (n_clst > MAX_FAT12) {
					n = n_clst * 2 + 4;		/* FAT size [byte] */
				} else {
					fmt = FS_FAT12;
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
    d690:	a3 e0       	ldi	r26, 0x03	; 3
    d692:	b0 e0       	ldi	r27, 0x00	; 0
    d694:	0e 94 14 ec 	call	0x1d828	; 0x1d828 <__muluhisi3>
    d698:	dc 01       	movw	r26, r24
    d69a:	cb 01       	movw	r24, r22
    d69c:	01 96       	adiw	r24, 0x01	; 1
    d69e:	a1 1d       	adc	r26, r1
    d6a0:	b1 1d       	adc	r27, r1
    d6a2:	b6 95       	lsr	r27
    d6a4:	a7 95       	ror	r26
    d6a6:	97 95       	ror	r25
    d6a8:	87 95       	ror	r24
    d6aa:	03 96       	adiw	r24, 0x03	; 3
    d6ac:	a1 1d       	adc	r26, r1
    d6ae:	b1 1d       	adc	r27, r1
				}
				n_clst = sz_vol / pau;
				if (n_clst > MAX_FAT12) {
					n = n_clst * 2 + 4;		/* FAT size [byte] */
				} else {
					fmt = FS_FAT12;
    d6b0:	31 e0       	ldi	r19, 0x01	; 1
    d6b2:	3f 87       	std	Y+15, r19	; 0x0f
    d6b4:	ff ce       	rjmp	.-514    	; 0xd4b4 <f_mkfs+0x350>
			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
				sz_rsv += n; b_fat += n;
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
    d6b6:	08 89       	ldd	r16, Y+16	; 0x10
    d6b8:	19 89       	ldd	r17, Y+17	; 0x11
    d6ba:	2a 89       	ldd	r18, Y+18	; 0x12
    d6bc:	3b 89       	ldd	r19, Y+19	; 0x13
    d6be:	04 0f       	add	r16, r20
    d6c0:	15 1f       	adc	r17, r21
    d6c2:	26 1f       	adc	r18, r22
    d6c4:	37 1f       	adc	r19, r23
    d6c6:	08 8b       	std	Y+16, r16	; 0x10
    d6c8:	19 8b       	std	Y+17, r17	; 0x11
    d6ca:	2a 8b       	std	Y+18, r18	; 0x12
    d6cc:	3b 8b       	std	Y+19, r19	; 0x13
    d6ce:	67 cf       	rjmp	.-306    	; 0xd59e <f_mkfs+0x43a>

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
			if (fmt == FS_FAT32) {
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
    d6d0:	88 a5       	ldd	r24, Y+40	; 0x28
    d6d2:	99 a5       	ldd	r25, Y+41	; 0x29
    d6d4:	aa a5       	ldd	r26, Y+42	; 0x2a
    d6d6:	bb a5       	ldd	r27, Y+43	; 0x2b
    d6d8:	86 3f       	cpi	r24, 0xF6	; 246
    d6da:	9f 4f       	sbci	r25, 0xFF	; 255
    d6dc:	a1 05       	cpc	r26, r1
    d6de:	b1 05       	cpc	r27, r1
    d6e0:	c8 f5       	brcc	.+114    	; 0xd754 <f_mkfs+0x5f0>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
    d6e2:	81 14       	cp	r8, r1
    d6e4:	91 04       	cpc	r9, r1
    d6e6:	a1 04       	cpc	r10, r1
    d6e8:	b1 04       	cpc	r11, r1
    d6ea:	09 f0       	breq	.+2      	; 0xd6ee <f_mkfs+0x58a>
    d6ec:	be cd       	rjmp	.-1156   	; 0xd26a <f_mkfs+0x106>
    d6ee:	53 01       	movw	r10, r6
    d6f0:	42 01       	movw	r8, r4
    d6f2:	b6 94       	lsr	r11
    d6f4:	a7 94       	ror	r10
    d6f6:	97 94       	ror	r9
    d6f8:	87 94       	ror	r8
    d6fa:	81 14       	cp	r8, r1
    d6fc:	91 04       	cpc	r9, r1
    d6fe:	a1 04       	cpc	r10, r1
    d700:	b1 04       	cpc	r11, r1
    d702:	09 f4       	brne	.+2      	; 0xd706 <f_mkfs+0x5a2>
    d704:	b2 cd       	rjmp	.-1180   	; 0xd26a <f_mkfs+0x106>
    d706:	4e ce       	rjmp	.-868    	; 0xd3a4 <f_mkfs+0x240>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
					return FR_MKFS_ABORTED;
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
    d708:	88 a5       	ldd	r24, Y+40	; 0x28
    d70a:	99 a5       	ldd	r25, Y+41	; 0x29
    d70c:	aa a5       	ldd	r26, Y+42	; 0x2a
    d70e:	bb a5       	ldd	r27, Y+43	; 0x2b
    d710:	86 3f       	cpi	r24, 0xF6	; 246
    d712:	9f 40       	sbci	r25, 0x0F	; 15
    d714:	a1 05       	cpc	r26, r1
    d716:	b1 05       	cpc	r27, r1
    d718:	e8 f4       	brcc	.+58     	; 0xd754 <f_mkfs+0x5f0>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
    d71a:	81 14       	cp	r8, r1
    d71c:	91 04       	cpc	r9, r1
    d71e:	a1 04       	cpc	r10, r1
    d720:	b1 04       	cpc	r11, r1
    d722:	09 f0       	breq	.+2      	; 0xd726 <f_mkfs+0x5c2>
    d724:	a2 cd       	rjmp	.-1212   	; 0xd26a <f_mkfs+0x106>
    d726:	53 01       	movw	r10, r6
    d728:	42 01       	movw	r8, r4
    d72a:	88 0c       	add	r8, r8
    d72c:	99 1c       	adc	r9, r9
    d72e:	aa 1c       	adc	r10, r10
    d730:	bb 1c       	adc	r11, r11
    d732:	f1 e8       	ldi	r31, 0x81	; 129
    d734:	8f 16       	cp	r8, r31
    d736:	91 04       	cpc	r9, r1
    d738:	a1 04       	cpc	r10, r1
    d73a:	b1 04       	cpc	r11, r1
    d73c:	08 f0       	brcs	.+2      	; 0xd740 <f_mkfs+0x5dc>
    d73e:	95 cd       	rjmp	.-1238   	; 0xd26a <f_mkfs+0x106>
    d740:	98 cf       	rjmp	.-208    	; 0xd672 <f_mkfs+0x50e>
					return FR_MKFS_ABORTED;
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
    d742:	06 3f       	cpi	r16, 0xF6	; 246
    d744:	4f e0       	ldi	r20, 0x0F	; 15
    d746:	14 07       	cpc	r17, r20
    d748:	21 05       	cpc	r18, r1
    d74a:	31 05       	cpc	r19, r1
    d74c:	08 f0       	brcs	.+2      	; 0xd750 <f_mkfs+0x5ec>
    d74e:	8d cd       	rjmp	.-1254   	; 0xd26a <f_mkfs+0x106>
    d750:	51 e0       	ldi	r21, 0x01	; 1
    d752:	5f 87       	std	Y+15, r21	; 0x0f
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
    d754:	40 e0       	ldi	r20, 0x00	; 0
    d756:	52 e0       	ldi	r21, 0x02	; 2
    d758:	60 e0       	ldi	r22, 0x00	; 0
    d75a:	70 e0       	ldi	r23, 0x00	; 0
    d75c:	c6 01       	movw	r24, r12
    d75e:	0e 94 94 47 	call	0x8f28	; 0x8f28 <mem_set>
    d762:	4b e0       	ldi	r20, 0x0B	; 11
    d764:	50 e0       	ldi	r21, 0x00	; 0
    d766:	62 e3       	ldi	r22, 0x32	; 50
    d768:	78 e0       	ldi	r23, 0x08	; 8
    d76a:	c6 01       	movw	r24, r12
    d76c:	0e 94 5d 48 	call	0x90ba	; 0x90ba <mem_cpy.part.0>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d770:	d6 01       	movw	r26, r12
    d772:	1b 96       	adiw	r26, 0x0b	; 11
    d774:	1c 92       	st	X, r1
    d776:	1b 97       	sbiw	r26, 0x0b	; 11
	*ptr++ = (BYTE)val;
    d778:	82 e0       	ldi	r24, 0x02	; 2
    d77a:	1c 96       	adiw	r26, 0x0c	; 12
    d77c:	8c 93       	st	X, r24
    d77e:	1c 97       	sbiw	r26, 0x0c	; 12
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
    d780:	1d 96       	adiw	r26, 0x0d	; 13
    d782:	4c 92       	st	X, r4
    d784:	1d 97       	sbiw	r26, 0x0d	; 13

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d786:	e8 a1       	ldd	r30, Y+32	; 0x20
    d788:	1e 96       	adiw	r26, 0x0e	; 14
    d78a:	ec 93       	st	X, r30
    d78c:	1e 97       	sbiw	r26, 0x0e	; 14
	*ptr++ = (BYTE)val;
    d78e:	f9 a1       	ldd	r31, Y+33	; 0x21
    d790:	1f 96       	adiw	r26, 0x0f	; 15
    d792:	fc 93       	st	X, r31
    d794:	1f 97       	sbiw	r26, 0x0f	; 15
		mem_set(buf, 0, ss);
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
    d796:	81 e0       	ldi	r24, 0x01	; 1
    d798:	50 96       	adiw	r26, 0x10	; 16
    d79a:	8c 93       	st	X, r24
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
    d79c:	0f 85       	ldd	r16, Y+15	; 0x0f
    d79e:	03 30       	cpi	r16, 0x03	; 3
    d7a0:	11 f0       	breq	.+4      	; 0xd7a6 <f_mkfs+0x642>
    d7a2:	82 e0       	ldi	r24, 0x02	; 2
    d7a4:	01 c0       	rjmp	.+2      	; 0xd7a8 <f_mkfs+0x644>
    d7a6:	80 e0       	ldi	r24, 0x00	; 0

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d7a8:	d6 01       	movw	r26, r12
    d7aa:	51 96       	adiw	r26, 0x11	; 17
    d7ac:	1c 92       	st	X, r1
    d7ae:	51 97       	sbiw	r26, 0x11	; 17
	*ptr++ = (BYTE)val;
    d7b0:	52 96       	adiw	r26, 0x12	; 18
    d7b2:	8c 93       	st	X, r24
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
		if (sz_vol < 0x10000) {
    d7b4:	49 81       	ldd	r20, Y+1	; 0x01
    d7b6:	5a 81       	ldd	r21, Y+2	; 0x02
    d7b8:	6b 81       	ldd	r22, Y+3	; 0x03
    d7ba:	7c 81       	ldd	r23, Y+4	; 0x04
    d7bc:	41 15       	cp	r20, r1
    d7be:	51 05       	cpc	r21, r1
    d7c0:	b1 e0       	ldi	r27, 0x01	; 1
    d7c2:	6b 07       	cpc	r22, r27
    d7c4:	71 05       	cpc	r23, r1
    d7c6:	20 f4       	brcc	.+8      	; 0xd7d0 <f_mkfs+0x66c>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d7c8:	f6 01       	movw	r30, r12
    d7ca:	43 8b       	std	Z+19, r20	; 0x13
	*ptr++ = (BYTE)val;
    d7cc:	54 8b       	std	Z+20, r21	; 0x14
    d7ce:	04 c0       	rjmp	.+8      	; 0xd7d8 <f_mkfs+0x674>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
		if (sz_vol < 0x10000) {
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
    d7d0:	c6 01       	movw	r24, r12
    d7d2:	80 96       	adiw	r24, 0x20	; 32
    d7d4:	0e 94 8e 47 	call	0x8f1c	; 0x8f1c <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
    d7d8:	88 ef       	ldi	r24, 0xF8	; 248
    d7da:	d6 01       	movw	r26, r12
    d7dc:	55 96       	adiw	r26, 0x15	; 21
    d7de:	8c 93       	st	X, r24
    d7e0:	55 97       	sbiw	r26, 0x15	; 21

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d7e2:	8f e3       	ldi	r24, 0x3F	; 63
    d7e4:	58 96       	adiw	r26, 0x18	; 24
    d7e6:	8c 93       	st	X, r24
    d7e8:	58 97       	sbiw	r26, 0x18	; 24
	*ptr++ = (BYTE)val;
    d7ea:	59 96       	adiw	r26, 0x19	; 25
    d7ec:	1c 92       	st	X, r1
    d7ee:	59 97       	sbiw	r26, 0x19	; 25

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d7f0:	8f ef       	ldi	r24, 0xFF	; 255
    d7f2:	5a 96       	adiw	r26, 0x1a	; 26
    d7f4:	8c 93       	st	X, r24
    d7f6:	5a 97       	sbiw	r26, 0x1a	; 26
	*ptr++ = (BYTE)val;
    d7f8:	5b 96       	adiw	r26, 0x1b	; 27
    d7fa:	1c 92       	st	X, r1
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
    d7fc:	4c 89       	ldd	r20, Y+20	; 0x14
    d7fe:	5d 89       	ldd	r21, Y+21	; 0x15
    d800:	6e 89       	ldd	r22, Y+22	; 0x16
    d802:	7f 89       	ldd	r23, Y+23	; 0x17
    d804:	c6 01       	movw	r24, r12
    d806:	4c 96       	adiw	r24, 0x1c	; 28
    d808:	0e 94 8e 47 	call	0x8f1c	; 0x8f1c <st_dword>
		if (fmt == FS_FAT32) {
    d80c:	bf 85       	ldd	r27, Y+15	; 0x0f
    d80e:	b3 30       	cpi	r27, 0x03	; 3
    d810:	61 f5       	brne	.+88     	; 0xd86a <f_mkfs+0x706>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
    d812:	0e 94 2e 75 	call	0xea5c	; 0xea5c <get_fattime>
    d816:	ab 01       	movw	r20, r22
    d818:	bc 01       	movw	r22, r24
    d81a:	c6 01       	movw	r24, r12
    d81c:	8d 5b       	subi	r24, 0xBD	; 189
    d81e:	9f 4f       	sbci	r25, 0xFF	; 255
    d820:	0e 94 8e 47 	call	0x8f1c	; 0x8f1c <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
    d824:	48 89       	ldd	r20, Y+16	; 0x10
    d826:	59 89       	ldd	r21, Y+17	; 0x11
    d828:	6a 89       	ldd	r22, Y+18	; 0x12
    d82a:	7b 89       	ldd	r23, Y+19	; 0x13
    d82c:	c6 01       	movw	r24, r12
    d82e:	84 96       	adiw	r24, 0x24	; 36
    d830:	0e 94 8e 47 	call	0x8f1c	; 0x8f1c <st_dword>
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d834:	82 e0       	ldi	r24, 0x02	; 2
    d836:	f6 01       	movw	r30, r12
    d838:	84 a7       	std	Z+44, r24	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
    d83a:	15 a6       	std	Z+45, r1	; 0x2d
	*ptr++ = (BYTE)val; val >>= 8;
    d83c:	16 a6       	std	Z+46, r1	; 0x2e
	*ptr++ = (BYTE)val;
    d83e:	17 a6       	std	Z+47, r1	; 0x2f

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d840:	81 e0       	ldi	r24, 0x01	; 1
    d842:	80 ab       	std	Z+48, r24	; 0x30
	*ptr++ = (BYTE)val;
    d844:	11 aa       	std	Z+49, r1	; 0x31

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d846:	86 e0       	ldi	r24, 0x06	; 6
    d848:	82 ab       	std	Z+50, r24	; 0x32
	*ptr++ = (BYTE)val;
    d84a:	13 aa       	std	Z+51, r1	; 0x33
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
    d84c:	80 e8       	ldi	r24, 0x80	; 128
    d84e:	e0 5c       	subi	r30, 0xC0	; 192
    d850:	ff 4f       	sbci	r31, 0xFF	; 255
    d852:	80 83       	st	Z, r24
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
    d854:	89 e2       	ldi	r24, 0x29	; 41
    d856:	32 96       	adiw	r30, 0x02	; 2
    d858:	80 83       	st	Z, r24
    d85a:	43 e1       	ldi	r20, 0x13	; 19
    d85c:	50 e0       	ldi	r21, 0x00	; 0
    d85e:	6e e3       	ldi	r22, 0x3E	; 62
    d860:	78 e0       	ldi	r23, 0x08	; 8
    d862:	c6 01       	movw	r24, r12
    d864:	89 5b       	subi	r24, 0xB9	; 185
    d866:	9f 4f       	sbci	r25, 0xFF	; 255
    d868:	1e c0       	rjmp	.+60     	; 0xd8a6 <f_mkfs+0x742>
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
    d86a:	0e 94 2e 75 	call	0xea5c	; 0xea5c <get_fattime>
    d86e:	ab 01       	movw	r20, r22
    d870:	bc 01       	movw	r22, r24
    d872:	c6 01       	movw	r24, r12
    d874:	87 96       	adiw	r24, 0x27	; 39
    d876:	0e 94 8e 47 	call	0x8f1c	; 0x8f1c <st_dword>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d87a:	e8 89       	ldd	r30, Y+16	; 0x10
    d87c:	d6 01       	movw	r26, r12
    d87e:	56 96       	adiw	r26, 0x16	; 22
    d880:	ec 93       	st	X, r30
    d882:	56 97       	sbiw	r26, 0x16	; 22
	*ptr++ = (BYTE)val;
    d884:	f9 89       	ldd	r31, Y+17	; 0x11
    d886:	57 96       	adiw	r26, 0x17	; 23
    d888:	fc 93       	st	X, r31
    d88a:	57 97       	sbiw	r26, 0x17	; 23
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
    d88c:	80 e8       	ldi	r24, 0x80	; 128
    d88e:	94 96       	adiw	r26, 0x24	; 36
    d890:	8c 93       	st	X, r24
    d892:	94 97       	sbiw	r26, 0x24	; 36
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
    d894:	89 e2       	ldi	r24, 0x29	; 41
    d896:	96 96       	adiw	r26, 0x26	; 38
    d898:	8c 93       	st	X, r24
    d89a:	43 e1       	ldi	r20, 0x13	; 19
    d89c:	50 e0       	ldi	r21, 0x00	; 0
    d89e:	62 e5       	ldi	r22, 0x52	; 82
    d8a0:	78 e0       	ldi	r23, 0x08	; 8
    d8a2:	c6 01       	movw	r24, r12
    d8a4:	8b 96       	adiw	r24, 0x2b	; 43
    d8a6:	0e 94 5d 48 	call	0x90ba	; 0x90ba <mem_cpy.part.0>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d8aa:	46 01       	movw	r8, r12
    d8ac:	02 e0       	ldi	r16, 0x02	; 2
    d8ae:	80 1a       	sub	r8, r16
    d8b0:	0e ef       	ldi	r16, 0xFE	; 254
    d8b2:	90 0a       	sbc	r9, r16
    d8b4:	45 e5       	ldi	r20, 0x55	; 85
    d8b6:	b4 2e       	mov	r11, r20
    d8b8:	d4 01       	movw	r26, r8
    d8ba:	bc 92       	st	X, r11
	*ptr++ = (BYTE)val;
    d8bc:	76 01       	movw	r14, r12
    d8be:	b1 e0       	ldi	r27, 0x01	; 1
    d8c0:	eb 1a       	sub	r14, r27
    d8c2:	be ef       	ldi	r27, 0xFE	; 254
    d8c4:	fb 0a       	sbc	r15, r27
    d8c6:	5a ea       	ldi	r21, 0xAA	; 170
    d8c8:	a5 2e       	mov	r10, r21
    d8ca:	f7 01       	movw	r30, r14
    d8cc:	a0 82       	st	Z, r10
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
    d8ce:	01 e0       	ldi	r16, 0x01	; 1
    d8d0:	10 e0       	ldi	r17, 0x00	; 0
    d8d2:	2c 89       	ldd	r18, Y+20	; 0x14
    d8d4:	3d 89       	ldd	r19, Y+21	; 0x15
    d8d6:	4e 89       	ldd	r20, Y+22	; 0x16
    d8d8:	5f 89       	ldd	r21, Y+23	; 0x17
    d8da:	b6 01       	movw	r22, r12
    d8dc:	82 2d       	mov	r24, r2
    d8de:	4b d2       	rcall	.+1174   	; 0xdd76 <disk_write>
    d8e0:	89 2b       	or	r24, r25
    d8e2:	09 f0       	breq	.+2      	; 0xd8e6 <f_mkfs+0x782>
    d8e4:	91 c1       	rjmp	.+802    	; 0xdc08 <f_mkfs+0xaa4>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
    d8e6:	ff 85       	ldd	r31, Y+15	; 0x0f
    d8e8:	f3 30       	cpi	r31, 0x03	; 3
    d8ea:	09 f0       	breq	.+2      	; 0xd8ee <f_mkfs+0x78a>
    d8ec:	5e c0       	rjmp	.+188    	; 0xd9aa <f_mkfs+0x846>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
    d8ee:	01 e0       	ldi	r16, 0x01	; 1
    d8f0:	10 e0       	ldi	r17, 0x00	; 0
    d8f2:	2c 89       	ldd	r18, Y+20	; 0x14
    d8f4:	3d 89       	ldd	r19, Y+21	; 0x15
    d8f6:	4e 89       	ldd	r20, Y+22	; 0x16
    d8f8:	5f 89       	ldd	r21, Y+23	; 0x17
    d8fa:	2a 5f       	subi	r18, 0xFA	; 250
    d8fc:	3f 4f       	sbci	r19, 0xFF	; 255
    d8fe:	4f 4f       	sbci	r20, 0xFF	; 255
    d900:	5f 4f       	sbci	r21, 0xFF	; 255
    d902:	b6 01       	movw	r22, r12
    d904:	82 2d       	mov	r24, r2
    d906:	37 d2       	rcall	.+1134   	; 0xdd76 <disk_write>
			mem_set(buf, 0, ss);
    d908:	40 e0       	ldi	r20, 0x00	; 0
    d90a:	52 e0       	ldi	r21, 0x02	; 2
    d90c:	60 e0       	ldi	r22, 0x00	; 0
    d90e:	70 e0       	ldi	r23, 0x00	; 0
    d910:	c6 01       	movw	r24, r12
    d912:	0e 94 94 47 	call	0x8f28	; 0x8f28 <mem_set>
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d916:	82 e5       	ldi	r24, 0x52	; 82
    d918:	d6 01       	movw	r26, r12
    d91a:	8c 93       	st	X, r24
	*ptr++ = (BYTE)val; val >>= 8;
    d91c:	11 96       	adiw	r26, 0x01	; 1
    d91e:	8c 93       	st	X, r24
    d920:	11 97       	sbiw	r26, 0x01	; 1
	*ptr++ = (BYTE)val; val >>= 8;
    d922:	81 e6       	ldi	r24, 0x61	; 97
    d924:	12 96       	adiw	r26, 0x02	; 2
    d926:	8c 93       	st	X, r24
    d928:	12 97       	sbiw	r26, 0x02	; 2
	*ptr++ = (BYTE)val;
    d92a:	91 e4       	ldi	r25, 0x41	; 65
    d92c:	13 96       	adiw	r26, 0x03	; 3
    d92e:	9c 93       	st	X, r25
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d930:	22 e7       	ldi	r18, 0x72	; 114
    d932:	f6 01       	movw	r30, r12
    d934:	ec 51       	subi	r30, 0x1C	; 28
    d936:	fe 4f       	sbci	r31, 0xFE	; 254
    d938:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    d93a:	31 96       	adiw	r30, 0x01	; 1
    d93c:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    d93e:	31 96       	adiw	r30, 0x01	; 1
    d940:	90 83       	st	Z, r25
	*ptr++ = (BYTE)val;
    d942:	31 96       	adiw	r30, 0x01	; 1
    d944:	80 83       	st	Z, r24
		if (fmt == FS_FAT32) {
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
			mem_set(buf, 0, ss);
			st_dword(buf + FSI_LeadSig, 0x41615252);
			st_dword(buf + FSI_StrucSig, 0x61417272);
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
    d946:	48 a5       	ldd	r20, Y+40	; 0x28
    d948:	59 a5       	ldd	r21, Y+41	; 0x29
    d94a:	6a a5       	ldd	r22, Y+42	; 0x2a
    d94c:	7b a5       	ldd	r23, Y+43	; 0x2b
    d94e:	41 50       	subi	r20, 0x01	; 1
    d950:	51 09       	sbc	r21, r1
    d952:	61 09       	sbc	r22, r1
    d954:	71 09       	sbc	r23, r1
    d956:	c6 01       	movw	r24, r12
    d958:	88 51       	subi	r24, 0x18	; 24
    d95a:	9e 4f       	sbci	r25, 0xFE	; 254
    d95c:	0e 94 8e 47 	call	0x8f1c	; 0x8f1c <st_dword>
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d960:	82 e0       	ldi	r24, 0x02	; 2
    d962:	f6 01       	movw	r30, r12
    d964:	e4 51       	subi	r30, 0x14	; 20
    d966:	fe 4f       	sbci	r31, 0xFE	; 254
    d968:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val; val >>= 8;
    d96a:	31 96       	adiw	r30, 0x01	; 1
    d96c:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val; val >>= 8;
    d96e:	31 96       	adiw	r30, 0x01	; 1
    d970:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val;
    d972:	31 96       	adiw	r30, 0x01	; 1
    d974:	10 82       	st	Z, r1

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d976:	f4 01       	movw	r30, r8
    d978:	b0 82       	st	Z, r11
	*ptr++ = (BYTE)val;
    d97a:	d7 01       	movw	r26, r14
    d97c:	ac 92       	st	X, r10
			st_dword(buf + FSI_LeadSig, 0x41615252);
			st_dword(buf + FSI_StrucSig, 0x61417272);
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
			st_word(buf + BS_55AA, 0xAA55);
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
    d97e:	2c 89       	ldd	r18, Y+20	; 0x14
    d980:	3d 89       	ldd	r19, Y+21	; 0x15
    d982:	4e 89       	ldd	r20, Y+22	; 0x16
    d984:	5f 89       	ldd	r21, Y+23	; 0x17
    d986:	29 5f       	subi	r18, 0xF9	; 249
    d988:	3f 4f       	sbci	r19, 0xFF	; 255
    d98a:	4f 4f       	sbci	r20, 0xFF	; 255
    d98c:	5f 4f       	sbci	r21, 0xFF	; 255
    d98e:	b6 01       	movw	r22, r12
    d990:	82 2d       	mov	r24, r2
    d992:	f1 d1       	rcall	.+994    	; 0xdd76 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
    d994:	2c 89       	ldd	r18, Y+20	; 0x14
    d996:	3d 89       	ldd	r19, Y+21	; 0x15
    d998:	4e 89       	ldd	r20, Y+22	; 0x16
    d99a:	5f 89       	ldd	r21, Y+23	; 0x17
    d99c:	2f 5f       	subi	r18, 0xFF	; 255
    d99e:	3f 4f       	sbci	r19, 0xFF	; 255
    d9a0:	4f 4f       	sbci	r20, 0xFF	; 255
    d9a2:	5f 4f       	sbci	r21, 0xFF	; 255
    d9a4:	b6 01       	movw	r22, r12
    d9a6:	82 2d       	mov	r24, r2
    d9a8:	e6 d1       	rcall	.+972    	; 0xdd76 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
    d9aa:	4d a5       	ldd	r20, Y+45	; 0x2d
    d9ac:	5e a5       	ldd	r21, Y+46	; 0x2e
    d9ae:	60 e0       	ldi	r22, 0x00	; 0
    d9b0:	70 e0       	ldi	r23, 0x00	; 0
    d9b2:	c6 01       	movw	r24, r12
    d9b4:	0e 94 94 47 	call	0x8f28	; 0x8f28 <mem_set>
		sect = b_fat;		/* FAT start sector */
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
			if (fmt == FS_FAT32) {
    d9b8:	bf 85       	ldd	r27, Y+15	; 0x0f
    d9ba:	b3 30       	cpi	r27, 0x03	; 3
    d9bc:	89 f4       	brne	.+34     	; 0xd9e0 <f_mkfs+0x87c>
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d9be:	88 ef       	ldi	r24, 0xF8	; 248
    d9c0:	f6 01       	movw	r30, r12
    d9c2:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val; val >>= 8;
    d9c4:	8f ef       	ldi	r24, 0xFF	; 255
    d9c6:	81 83       	std	Z+1, r24	; 0x01
	*ptr++ = (BYTE)val; val >>= 8;
    d9c8:	82 83       	std	Z+2, r24	; 0x02
	*ptr++ = (BYTE)val;
    d9ca:	83 83       	std	Z+3, r24	; 0x03
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d9cc:	84 83       	std	Z+4, r24	; 0x04
	*ptr++ = (BYTE)val; val >>= 8;
    d9ce:	85 83       	std	Z+5, r24	; 0x05
	*ptr++ = (BYTE)val; val >>= 8;
    d9d0:	86 83       	std	Z+6, r24	; 0x06
	*ptr++ = (BYTE)val;
    d9d2:	87 83       	std	Z+7, r24	; 0x07
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d9d4:	80 87       	std	Z+8, r24	; 0x08
	*ptr++ = (BYTE)val; val >>= 8;
    d9d6:	81 87       	std	Z+9, r24	; 0x09
	*ptr++ = (BYTE)val; val >>= 8;
    d9d8:	82 87       	std	Z+10, r24	; 0x0a
	*ptr++ = (BYTE)val;
    d9da:	8f e0       	ldi	r24, 0x0F	; 15
    d9dc:	83 87       	std	Z+11, r24	; 0x0b
    d9de:	0f c0       	rjmp	.+30     	; 0xd9fe <f_mkfs+0x89a>
			if (fmt == FS_FAT32) {
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
    d9e0:	ff 85       	ldd	r31, Y+15	; 0x0f
    d9e2:	f1 30       	cpi	r31, 0x01	; 1
    d9e4:	29 f0       	breq	.+10     	; 0xd9f0 <f_mkfs+0x88c>
    d9e6:	48 ef       	ldi	r20, 0xF8	; 248
    d9e8:	5f ef       	ldi	r21, 0xFF	; 255
    d9ea:	6f ef       	ldi	r22, 0xFF	; 255
    d9ec:	7f ef       	ldi	r23, 0xFF	; 255
    d9ee:	04 c0       	rjmp	.+8      	; 0xd9f8 <f_mkfs+0x894>
    d9f0:	48 ef       	ldi	r20, 0xF8	; 248
    d9f2:	5f ef       	ldi	r21, 0xFF	; 255
    d9f4:	6f ef       	ldi	r22, 0xFF	; 255
    d9f6:	70 e0       	ldi	r23, 0x00	; 0
    d9f8:	c6 01       	movw	r24, r12
    d9fa:	0e 94 8e 47 	call	0x8f1c	; 0x8f1c <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
    d9fe:	88 88       	ldd	r8, Y+16	; 0x10
    da00:	99 88       	ldd	r9, Y+17	; 0x11
    da02:	aa 88       	ldd	r10, Y+18	; 0x12
    da04:	bb 88       	ldd	r11, Y+19	; 0x13
    da06:	0c a1       	ldd	r16, Y+36	; 0x24
    da08:	1d a1       	ldd	r17, Y+37	; 0x25
    da0a:	2e a1       	ldd	r18, Y+38	; 0x26
    da0c:	3f a1       	ldd	r19, Y+39	; 0x27
    da0e:	08 15       	cp	r16, r8
    da10:	19 05       	cpc	r17, r9
    da12:	2a 05       	cpc	r18, r10
    da14:	3b 05       	cpc	r19, r11
    da16:	10 f4       	brcc	.+4      	; 0xda1c <f_mkfs+0x8b8>
    da18:	48 01       	movw	r8, r16
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
    da1a:	59 01       	movw	r10, r18
    da1c:	84 01       	movw	r16, r8
    da1e:	28 8d       	ldd	r18, Y+24	; 0x18
    da20:	39 8d       	ldd	r19, Y+25	; 0x19
    da22:	4a 8d       	ldd	r20, Y+26	; 0x1a
    da24:	5b 8d       	ldd	r21, Y+27	; 0x1b
    da26:	b6 01       	movw	r22, r12
    da28:	8c a5       	ldd	r24, Y+44	; 0x2c
    da2a:	a5 d1       	rcall	.+842    	; 0xdd76 <disk_write>
    da2c:	89 2b       	or	r24, r25
    da2e:	09 f0       	breq	.+2      	; 0xda32 <f_mkfs+0x8ce>
				mem_set(buf, 0, ss);
    da30:	eb c0       	rjmp	.+470    	; 0xdc08 <f_mkfs+0xaa4>
    da32:	40 e0       	ldi	r20, 0x00	; 0
    da34:	52 e0       	ldi	r21, 0x02	; 2
    da36:	60 e0       	ldi	r22, 0x00	; 0
    da38:	70 e0       	ldi	r23, 0x00	; 0
    da3a:	c6 01       	movw	r24, r12
    da3c:	0e 94 94 47 	call	0x8f28	; 0x8f28 <mem_set>
				sect += n; nsect -= n;
    da40:	28 8d       	ldd	r18, Y+24	; 0x18
    da42:	39 8d       	ldd	r19, Y+25	; 0x19
    da44:	4a 8d       	ldd	r20, Y+26	; 0x1a
    da46:	5b 8d       	ldd	r21, Y+27	; 0x1b
    da48:	28 0d       	add	r18, r8
    da4a:	39 1d       	adc	r19, r9
    da4c:	4a 1d       	adc	r20, r10
    da4e:	5b 1d       	adc	r21, r11
    da50:	28 8f       	std	Y+24, r18	; 0x18
    da52:	39 8f       	std	Y+25, r19	; 0x19
    da54:	4a 8f       	std	Y+26, r20	; 0x1a
    da56:	5b 8f       	std	Y+27, r21	; 0x1b
    da58:	88 89       	ldd	r24, Y+16	; 0x10
    da5a:	99 89       	ldd	r25, Y+17	; 0x11
    da5c:	aa 89       	ldd	r26, Y+18	; 0x12
    da5e:	bb 89       	ldd	r27, Y+19	; 0x13
    da60:	88 19       	sub	r24, r8
    da62:	99 09       	sbc	r25, r9
    da64:	aa 09       	sbc	r26, r10
    da66:	bb 09       	sbc	r27, r11
    da68:	88 8b       	std	Y+16, r24	; 0x10
    da6a:	99 8b       	std	Y+17, r25	; 0x11
    da6c:	aa 8b       	std	Y+18, r26	; 0x12
			} while (nsect);
    da6e:	bb 8b       	std	Y+19, r27	; 0x13
    da70:	89 2b       	or	r24, r25
    da72:	8a 2b       	or	r24, r26
    da74:	8b 2b       	or	r24, r27
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
    da76:	19 f6       	brne	.-122    	; 0xd9fe <f_mkfs+0x89a>
    da78:	9f 85       	ldd	r25, Y+15	; 0x0f
    da7a:	93 30       	cpi	r25, 0x03	; 3
    da7c:	21 f4       	brne	.+8      	; 0xda86 <f_mkfs+0x922>
    da7e:	4c 8e       	std	Y+28, r4	; 0x1c
    da80:	5d 8e       	std	Y+29, r5	; 0x1d
    da82:	6e 8e       	std	Y+30, r6	; 0x1e
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
    da84:	7f 8e       	std	Y+31, r7	; 0x1f
    da86:	8c 8c       	ldd	r8, Y+28	; 0x1c
    da88:	9d 8c       	ldd	r9, Y+29	; 0x1d
    da8a:	ae 8c       	ldd	r10, Y+30	; 0x1e
    da8c:	bf 8c       	ldd	r11, Y+31	; 0x1f
    da8e:	0c a1       	ldd	r16, Y+36	; 0x24
    da90:	1d a1       	ldd	r17, Y+37	; 0x25
    da92:	2e a1       	ldd	r18, Y+38	; 0x26
    da94:	3f a1       	ldd	r19, Y+39	; 0x27
    da96:	08 15       	cp	r16, r8
    da98:	19 05       	cpc	r17, r9
    da9a:	2a 05       	cpc	r18, r10
    da9c:	3b 05       	cpc	r19, r11
    da9e:	10 f4       	brcc	.+4      	; 0xdaa4 <f_mkfs+0x940>
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
    daa0:	48 01       	movw	r8, r16
    daa2:	59 01       	movw	r10, r18
    daa4:	84 01       	movw	r16, r8
    daa6:	28 8d       	ldd	r18, Y+24	; 0x18
    daa8:	39 8d       	ldd	r19, Y+25	; 0x19
    daaa:	4a 8d       	ldd	r20, Y+26	; 0x1a
    daac:	5b 8d       	ldd	r21, Y+27	; 0x1b
    daae:	b6 01       	movw	r22, r12
    dab0:	8c a5       	ldd	r24, Y+44	; 0x2c
    dab2:	61 d1       	rcall	.+706    	; 0xdd76 <disk_write>
    dab4:	89 2b       	or	r24, r25
    dab6:	09 f0       	breq	.+2      	; 0xdaba <f_mkfs+0x956>
			sect += n; nsect -= n;
    dab8:	a7 c0       	rjmp	.+334    	; 0xdc08 <f_mkfs+0xaa4>
    daba:	28 8d       	ldd	r18, Y+24	; 0x18
    dabc:	39 8d       	ldd	r19, Y+25	; 0x19
    dabe:	4a 8d       	ldd	r20, Y+26	; 0x1a
    dac0:	5b 8d       	ldd	r21, Y+27	; 0x1b
    dac2:	28 0d       	add	r18, r8
    dac4:	39 1d       	adc	r19, r9
    dac6:	4a 1d       	adc	r20, r10
    dac8:	5b 1d       	adc	r21, r11
    daca:	28 8f       	std	Y+24, r18	; 0x18
    dacc:	39 8f       	std	Y+25, r19	; 0x19
    dace:	4a 8f       	std	Y+26, r20	; 0x1a
    dad0:	5b 8f       	std	Y+27, r21	; 0x1b
    dad2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    dad4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    dad6:	ae 8d       	ldd	r26, Y+30	; 0x1e
    dad8:	bf 8d       	ldd	r27, Y+31	; 0x1f
    dada:	88 19       	sub	r24, r8
    dadc:	99 09       	sbc	r25, r9
    dade:	aa 09       	sbc	r26, r10
    dae0:	bb 09       	sbc	r27, r11
    dae2:	8c 8f       	std	Y+28, r24	; 0x1c
    dae4:	9d 8f       	std	Y+29, r25	; 0x1d
    dae6:	ae 8f       	std	Y+30, r26	; 0x1e
		} while (nsect);
    dae8:	bf 8f       	std	Y+31, r27	; 0x1f
    daea:	89 2b       	or	r24, r25
    daec:	8a 2b       	or	r24, r26
    daee:	8b 2b       	or	r24, r27

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
    daf0:	51 f6       	brne	.-108    	; 0xda86 <f_mkfs+0x922>
    daf2:	9f 85       	ldd	r25, Y+15	; 0x0f
    daf4:	93 30       	cpi	r25, 0x03	; 3
			sys = 0x0C;		/* FAT32X */
		} else {
			if (sz_vol >= 0x10000) {
    daf6:	69 f0       	breq	.+26     	; 0xdb12 <f_mkfs+0x9ae>
    daf8:	89 81       	ldd	r24, Y+1	; 0x01
    dafa:	9a 81       	ldd	r25, Y+2	; 0x02
    dafc:	ab 81       	ldd	r26, Y+3	; 0x03
    dafe:	bc 81       	ldd	r27, Y+4	; 0x04
    db00:	00 97       	sbiw	r24, 0x00	; 0
    db02:	a1 40       	sbci	r26, 0x01	; 1
    db04:	b1 05       	cpc	r27, r1
				sys = 0x06;	/* FAT12/16 (>=64KS) */
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
    db06:	38 f4       	brcc	.+14     	; 0xdb16 <f_mkfs+0x9b2>
    db08:	ff 85       	ldd	r31, Y+15	; 0x0f
    db0a:	f2 30       	cpi	r31, 0x02	; 2
    db0c:	31 f4       	brne	.+12     	; 0xdb1a <f_mkfs+0x9b6>
    db0e:	14 e0       	ldi	r17, 0x04	; 4
	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
			sys = 0x0C;		/* FAT32X */
    db10:	05 c0       	rjmp	.+10     	; 0xdb1c <f_mkfs+0x9b8>
    db12:	1c e0       	ldi	r17, 0x0C	; 12
		} else {
			if (sz_vol >= 0x10000) {
				sys = 0x06;	/* FAT12/16 (>=64KS) */
    db14:	03 c0       	rjmp	.+6      	; 0xdb1c <f_mkfs+0x9b8>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
    db16:	16 e0       	ldi	r17, 0x06	; 6
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system type */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {
		if (!(opt & FM_SFD)) {
    db18:	01 c0       	rjmp	.+2      	; 0xdb1c <f_mkfs+0x9b8>
    db1a:	11 e0       	ldi	r17, 0x01	; 1
    db1c:	0a a9       	ldd	r16, Y+50	; 0x32
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
    db1e:	00 23       	and	r16, r16
    db20:	69 f0       	breq	.+26     	; 0xdb3c <f_mkfs+0x9d8>
    db22:	40 e0       	ldi	r20, 0x00	; 0
    db24:	50 e0       	ldi	r21, 0x00	; 0
    db26:	60 e0       	ldi	r22, 0x00	; 0
    db28:	82 2d       	mov	r24, r2
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
	if (vol < 0) return FR_INVALID_DRIVE;
    db2a:	35 d1       	rcall	.+618    	; 0xdd96 <disk_ioctl>
    db2c:	31 e0       	ldi	r19, 0x01	; 1
    db2e:	20 e0       	ldi	r18, 0x00	; 0
    db30:	89 2b       	or	r24, r25
    db32:	09 f4       	brne	.+2      	; 0xdb36 <f_mkfs+0x9d2>
    db34:	30 e0       	ldi	r19, 0x00	; 0
    db36:	83 2f       	mov	r24, r19
    db38:	92 2f       	mov	r25, r18
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system type */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {
		if (!(opt & FM_SFD)) {
			/* Create partition table in FDISK format */
			mem_set(buf, 0, ss);
    db3a:	7b c0       	rjmp	.+246    	; 0xdc32 <f_mkfs+0xace>
    db3c:	40 e0       	ldi	r20, 0x00	; 0
    db3e:	52 e0       	ldi	r21, 0x02	; 2
    db40:	60 e0       	ldi	r22, 0x00	; 0
    db42:	70 e0       	ldi	r23, 0x00	; 0
    db44:	c6 01       	movw	r24, r12
    db46:	0e 94 94 47 	call	0x8f28	; 0x8f28 <mem_set>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    db4a:	f6 01       	movw	r30, r12
    db4c:	e2 50       	subi	r30, 0x02	; 2
    db4e:	fe 4f       	sbci	r31, 0xFE	; 254
    db50:	85 e5       	ldi	r24, 0x55	; 85
	*ptr++ = (BYTE)val;
    db52:	80 83       	st	Z, r24
    db54:	31 96       	adiw	r30, 0x01	; 1
    db56:	8a ea       	ldi	r24, 0xAA	; 170
		if (!(opt & FM_SFD)) {
			/* Create partition table in FDISK format */
			mem_set(buf, 0, ss);
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
			pte[PTE_Boot] = 0;					/* Boot indicator */
    db58:	80 83       	st	Z, r24
    db5a:	e1 54       	subi	r30, 0x41	; 65
    db5c:	f1 09       	sbc	r31, r1
			pte[PTE_StHead] = 1;				/* Start head */
    db5e:	10 82       	st	Z, r1
    db60:	31 96       	adiw	r30, 0x01	; 1
    db62:	81 e0       	ldi	r24, 0x01	; 1
			pte[PTE_StSec] = 1;					/* Start sector */
    db64:	80 83       	st	Z, r24
    db66:	31 96       	adiw	r30, 0x01	; 1
			pte[PTE_StCyl] = 0;					/* Start cylinder */
    db68:	80 83       	st	Z, r24
    db6a:	31 96       	adiw	r30, 0x01	; 1
			pte[PTE_System] = sys;				/* System type */
    db6c:	10 82       	st	Z, r1
    db6e:	31 96       	adiw	r30, 0x01	; 1
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS is incorrect) */
    db70:	10 83       	st	Z, r17
    db72:	89 81       	ldd	r24, Y+1	; 0x01
    db74:	9a 81       	ldd	r25, Y+2	; 0x02
    db76:	ab 81       	ldd	r26, Y+3	; 0x03
    db78:	bc 81       	ldd	r27, Y+4	; 0x04
    db7a:	2c 89       	ldd	r18, Y+20	; 0x14
    db7c:	3d 89       	ldd	r19, Y+21	; 0x15
    db7e:	4e 89       	ldd	r20, Y+22	; 0x16
    db80:	5f 89       	ldd	r21, Y+23	; 0x17
    db82:	28 0f       	add	r18, r24
    db84:	39 1f       	adc	r19, r25
    db86:	4a 1f       	adc	r20, r26
    db88:	5b 1f       	adc	r21, r27
    db8a:	ca 01       	movw	r24, r20
    db8c:	b9 01       	movw	r22, r18
    db8e:	21 ec       	ldi	r18, 0xC1	; 193
    db90:	3e e3       	ldi	r19, 0x3E	; 62
    db92:	40 e0       	ldi	r20, 0x00	; 0
    db94:	50 e0       	ldi	r21, 0x00	; 0
    db96:	0e 94 c7 eb 	call	0x1d78e	; 0x1d78e <__udivmodsi4>
			pte[PTE_EdHead] = 254;				/* End head */
    db9a:	f6 01       	movw	r30, r12
    db9c:	ed 53       	subi	r30, 0x3D	; 61
    db9e:	fe 4f       	sbci	r31, 0xFE	; 254
    dba0:	8e ef       	ldi	r24, 0xFE	; 254
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
    dba2:	80 83       	st	Z, r24
    dba4:	31 96       	adiw	r30, 0x01	; 1
    dba6:	da 01       	movw	r26, r20
    dba8:	c9 01       	movw	r24, r18
    dbaa:	32 e0       	ldi	r19, 0x02	; 2
    dbac:	b6 95       	lsr	r27
    dbae:	a7 95       	ror	r26
    dbb0:	97 95       	ror	r25
    dbb2:	87 95       	ror	r24
    dbb4:	3a 95       	dec	r19
    dbb6:	d1 f7       	brne	.-12     	; 0xdbac <f_mkfs+0xa48>
    dbb8:	8f 63       	ori	r24, 0x3F	; 63
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
    dbba:	80 83       	st	Z, r24
    dbbc:	31 96       	adiw	r30, 0x01	; 1
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
    dbbe:	20 83       	st	Z, r18
    dbc0:	4c 89       	ldd	r20, Y+20	; 0x14
    dbc2:	5d 89       	ldd	r21, Y+21	; 0x15
    dbc4:	6e 89       	ldd	r22, Y+22	; 0x16
    dbc6:	7f 89       	ldd	r23, Y+23	; 0x17
    dbc8:	c6 01       	movw	r24, r12
    dbca:	8a 53       	subi	r24, 0x3A	; 58
    dbcc:	9e 4f       	sbci	r25, 0xFE	; 254
    dbce:	0e 94 8e 47 	call	0x8f1c	; 0x8f1c <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
    dbd2:	49 81       	ldd	r20, Y+1	; 0x01
    dbd4:	5a 81       	ldd	r21, Y+2	; 0x02
    dbd6:	6b 81       	ldd	r22, Y+3	; 0x03
    dbd8:	7c 81       	ldd	r23, Y+4	; 0x04
    dbda:	c6 01       	movw	r24, r12
    dbdc:	86 53       	subi	r24, 0x36	; 54
    dbde:	9e 4f       	sbci	r25, 0xFE	; 254
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
    dbe0:	0e 94 8e 47 	call	0x8f1c	; 0x8f1c <st_dword>
    dbe4:	01 e0       	ldi	r16, 0x01	; 1
    dbe6:	10 e0       	ldi	r17, 0x00	; 0
    dbe8:	20 e0       	ldi	r18, 0x00	; 0
    dbea:	30 e0       	ldi	r19, 0x00	; 0
    dbec:	a9 01       	movw	r20, r18
    dbee:	b6 01       	movw	r22, r12
    dbf0:	82 2d       	mov	r24, r2
    dbf2:	c1 d0       	rcall	.+386    	; 0xdd76 <disk_write>
    dbf4:	89 2b       	or	r24, r25
    dbf6:	09 f4       	brne	.+2      	; 0xdbfa <f_mkfs+0xa96>
    dbf8:	94 cf       	rjmp	.-216    	; 0xdb22 <f_mkfs+0x9be>
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
	if (vol < 0) return FR_INVALID_DRIVE;
    dbfa:	06 c0       	rjmp	.+12     	; 0xdc08 <f_mkfs+0xaa4>
    dbfc:	8b e0       	ldi	r24, 0x0B	; 11
	pdrv = LD2PD(vol);	/* Physical drive */
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
	if (stat & STA_NOINIT) return FR_NOT_READY;
    dbfe:	05 c0       	rjmp	.+10     	; 0xdc0a <f_mkfs+0xaa6>
    dc00:	83 e0       	ldi	r24, 0x03	; 3
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    dc02:	03 c0       	rjmp	.+6      	; 0xdc0a <f_mkfs+0xaa6>
    dc04:	8a e0       	ldi	r24, 0x0A	; 10
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
    dc06:	01 c0       	rjmp	.+2      	; 0xdc0a <f_mkfs+0xaa6>
    dc08:	81 e0       	ldi	r24, 0x01	; 1
    dc0a:	90 e0       	ldi	r25, 0x00	; 0
			if (fmt == FS_FAT16) {
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
					if (!au && (pau * 2) <= 64) {
						au = pau * 2; continue;		/* Adjust cluster size and retry */
					}
					if ((opt & FM_FAT32)) {
    dc0c:	12 c0       	rjmp	.+36     	; 0xdc32 <f_mkfs+0xace>
    dc0e:	ff 20       	and	r15, r15
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
    dc10:	19 f0       	breq	.+6      	; 0xdc18 <f_mkfs+0xab4>
    dc12:	23 e0       	ldi	r18, 0x03	; 3
    dc14:	2f 87       	std	Y+15, r18	; 0x0f
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
    dc16:	c6 cb       	rjmp	.-2164   	; 0xd3a4 <f_mkfs+0x240>
    dc18:	81 38       	cpi	r24, 0x81	; 129
    dc1a:	91 05       	cpc	r25, r1
    dc1c:	a1 05       	cpc	r26, r1
    dc1e:	b1 05       	cpc	r27, r1
    dc20:	08 f0       	brcs	.+2      	; 0xdc24 <f_mkfs+0xac0>
    dc22:	23 cb       	rjmp	.-2490   	; 0xd26a <f_mkfs+0x106>
			if (fmt == FS_FAT16) {
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
					if (!au && (pau * 2) <= 64) {
						au = pau * 2; continue;		/* Adjust cluster size and retry */
					}
					if ((opt & FM_FAT32)) {
    dc24:	24 cd       	rjmp	.-1464   	; 0xd66e <f_mkfs+0x50a>
    dc26:	ff 20       	and	r15, r15
    dc28:	09 f4       	brne	.+2      	; 0xdc2c <f_mkfs+0xac8>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
    dc2a:	1f cb       	rjmp	.-2498   	; 0xd26a <f_mkfs+0x106>
    dc2c:	33 e0       	ldi	r19, 0x03	; 3
    dc2e:	3f 87       	std	Y+15, r19	; 0x0f
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;

	return FR_OK;
}
    dc30:	b9 cb       	rjmp	.-2190   	; 0xd3a4 <f_mkfs+0x240>
    dc32:	ce 5b       	subi	r28, 0xBE	; 190
    dc34:	df 4f       	sbci	r29, 0xFF	; 255
    dc36:	e2 e1       	ldi	r30, 0x12	; 18
    dc38:	0c 94 50 ec 	jmp	0x1d8a0	; 0x1d8a0 <__epilogue_restores__>

0000dc3c <ff_memalloc>:
MEMSPACE
void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    dc3c:	0c 94 1a 2a 	jmp	0x5434	; 0x5434 <safemalloc>
}
    dc40:	08 95       	ret

0000dc42 <ff_memfree>:
MEMSPACE
void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	safefree(mblock);	/* Discard the memory block with POSIX API */
    dc42:	0c 94 3b 2a 	jmp	0x5476	; 0x5476 <safefree>
    dc46:	08 95       	ret

0000dc48 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
    dc48:	80 38       	cpi	r24, 0x80	; 128
    dc4a:	91 05       	cpc	r25, r1
    dc4c:	18 f1       	brcs	.+70     	; 0xdc94 <ff_convert+0x4c>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
    dc4e:	67 2b       	or	r22, r23
    dc50:	61 f0       	breq	.+24     	; 0xdc6a <ff_convert+0x22>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
    dc52:	8f 3f       	cpi	r24, 0xFF	; 255
    dc54:	91 05       	cpc	r25, r1
    dc56:	09 f0       	breq	.+2      	; 0xdc5a <ff_convert+0x12>
    dc58:	d8 f4       	brcc	.+54     	; 0xdc90 <ff_convert+0x48>
    dc5a:	88 0f       	add	r24, r24
    dc5c:	99 1f       	adc	r25, r25
    dc5e:	fc 01       	movw	r30, r24
    dc60:	ea 5b       	subi	r30, 0xBA	; 186
    dc62:	fa 4f       	sbci	r31, 0xFA	; 250
    dc64:	80 81       	ld	r24, Z
    dc66:	91 81       	ldd	r25, Z+1	; 0x01
    dc68:	08 95       	ret
    dc6a:	e6 e4       	ldi	r30, 0x46	; 70
    dc6c:	f6 e0       	ldi	r31, 0x06	; 6

	if (chr < 0x80) {	/* ASCII */
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
    dc6e:	20 e0       	ldi	r18, 0x00	; 0
    dc70:	30 e0       	ldi	r19, 0x00	; 0
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
				if (chr == Tbl[c]) break;
    dc72:	41 91       	ld	r20, Z+
    dc74:	51 91       	ld	r21, Z+
    dc76:	84 17       	cp	r24, r20
    dc78:	95 07       	cpc	r25, r21
    dc7a:	29 f0       	breq	.+10     	; 0xdc86 <ff_convert+0x3e>
	} else {
		if (dir) {		/* OEM code to Unicode */
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
    dc7c:	2f 5f       	subi	r18, 0xFF	; 255
    dc7e:	3f 4f       	sbci	r19, 0xFF	; 255
    dc80:	20 38       	cpi	r18, 0x80	; 128
    dc82:	31 05       	cpc	r19, r1
    dc84:	b1 f7       	brne	.-20     	; 0xdc72 <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
			}
			c = (c + 0x80) & 0xFF;
    dc86:	c9 01       	movw	r24, r18
    dc88:	80 58       	subi	r24, 0x80	; 128
    dc8a:	9f 4f       	sbci	r25, 0xFF	; 255
    dc8c:	99 27       	eor	r25, r25
    dc8e:	08 95       	ret
	if (chr < 0x80) {	/* ASCII */
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
    dc90:	80 e0       	ldi	r24, 0x00	; 0
    dc92:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    dc94:	08 95       	ret

0000dc96 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
    dc96:	81 15       	cp	r24, r1
    dc98:	20 e1       	ldi	r18, 0x10	; 16
    dc9a:	92 07       	cpc	r25, r18
    dc9c:	18 f0       	brcs	.+6      	; 0xdca4 <ff_wtoupper+0xe>
    dc9e:	a8 e9       	ldi	r26, 0x98	; 152
    dca0:	b3 e0       	ldi	r27, 0x03	; 3
    dca2:	02 c0       	rjmp	.+4      	; 0xdca8 <ff_wtoupper+0x12>
    dca4:	a4 e5       	ldi	r26, 0x54	; 84
    dca6:	b4 e0       	ldi	r27, 0x04	; 4
	for (;;) {
		bc = *p++;								/* Get block base */
    dca8:	4d 91       	ld	r20, X+
    dcaa:	5c 91       	ld	r21, X
    dcac:	11 97       	sbiw	r26, 0x01	; 1
		if (!bc || chr < bc) break;
    dcae:	41 15       	cp	r20, r1
    dcb0:	51 05       	cpc	r21, r1
    dcb2:	09 f4       	brne	.+2      	; 0xdcb6 <ff_wtoupper+0x20>
    dcb4:	43 c0       	rjmp	.+134    	; 0xdd3c <ff_wtoupper+0xa6>
    dcb6:	84 17       	cp	r24, r20
    dcb8:	95 07       	cpc	r25, r21
    dcba:	08 f4       	brcc	.+2      	; 0xdcbe <ff_wtoupper+0x28>
    dcbc:	3f c0       	rjmp	.+126    	; 0xdd3c <ff_wtoupper+0xa6>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    dcbe:	14 96       	adiw	r26, 0x04	; 4
    dcc0:	fd 01       	movw	r30, r26
    dcc2:	32 97       	sbiw	r30, 0x02	; 2
    dcc4:	20 81       	ld	r18, Z
    dcc6:	31 81       	ldd	r19, Z+1	; 0x01
    dcc8:	e3 2f       	mov	r30, r19
    dcca:	ff 27       	eor	r31, r31
    dccc:	33 27       	eor	r19, r19
		if (chr < bc + nc) {	/* In the block? */
    dcce:	ba 01       	movw	r22, r20
    dcd0:	62 0f       	add	r22, r18
    dcd2:	73 1f       	adc	r23, r19
    dcd4:	86 17       	cp	r24, r22
    dcd6:	97 07       	cpc	r25, r23
    dcd8:	48 f5       	brcc	.+82     	; 0xdd2c <ff_wtoupper+0x96>
			switch (cmd) {
    dcda:	e9 30       	cpi	r30, 0x09	; 9
    dcdc:	f1 05       	cpc	r31, r1
    dcde:	70 f5       	brcc	.+92     	; 0xdd3c <ff_wtoupper+0xa6>
    dce0:	ec 54       	subi	r30, 0x4C	; 76
    dce2:	ff 4f       	sbci	r31, 0xFF	; 255
    dce4:	0c 94 05 ec 	jmp	0x1d80a	; 0x1d80a <__tablejump2__>
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
    dce8:	fc 01       	movw	r30, r24
    dcea:	e4 1b       	sub	r30, r20
    dcec:	f5 0b       	sbc	r31, r21
    dcee:	ee 0f       	add	r30, r30
    dcf0:	ff 1f       	adc	r31, r31
    dcf2:	ea 0f       	add	r30, r26
    dcf4:	fb 1f       	adc	r31, r27
    dcf6:	80 81       	ld	r24, Z
    dcf8:	91 81       	ldd	r25, Z+1	; 0x01
    dcfa:	08 95       	ret
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
    dcfc:	9c 01       	movw	r18, r24
    dcfe:	24 1b       	sub	r18, r20
    dd00:	35 0b       	sbc	r19, r21
    dd02:	21 70       	andi	r18, 0x01	; 1
    dd04:	33 27       	eor	r19, r19
    dd06:	82 1b       	sub	r24, r18
    dd08:	93 0b       	sbc	r25, r19
    dd0a:	08 95       	ret
			case 2: chr -= 16; break;				/* Shift -16 */
    dd0c:	40 97       	sbiw	r24, 0x10	; 16
    dd0e:	08 95       	ret
			case 3:	chr -= 32; break;				/* Shift -32 */
    dd10:	80 97       	sbiw	r24, 0x20	; 32
    dd12:	08 95       	ret
			case 4:	chr -= 48; break;				/* Shift -48 */
    dd14:	c0 97       	sbiw	r24, 0x30	; 48
    dd16:	08 95       	ret
			case 5:	chr -= 26; break;				/* Shift -26 */
    dd18:	4a 97       	sbiw	r24, 0x1a	; 26
    dd1a:	08 95       	ret
			case 6:	chr += 8; break;				/* Shift +8 */
    dd1c:	08 96       	adiw	r24, 0x08	; 8
    dd1e:	08 95       	ret
			case 7: chr -= 80; break;				/* Shift -80 */
    dd20:	80 55       	subi	r24, 0x50	; 80
    dd22:	91 09       	sbc	r25, r1
    dd24:	08 95       	ret
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
    dd26:	80 56       	subi	r24, 0x60	; 96
    dd28:	9c 41       	sbci	r25, 0x1C	; 28
    dd2a:	08 95       	ret
			}
			break;
		}
		if (!cmd) p += nc;
    dd2c:	ef 2b       	or	r30, r31
    dd2e:	09 f0       	breq	.+2      	; 0xdd32 <ff_wtoupper+0x9c>
    dd30:	bb cf       	rjmp	.-138    	; 0xdca8 <ff_wtoupper+0x12>
    dd32:	22 0f       	add	r18, r18
    dd34:	33 1f       	adc	r19, r19
    dd36:	a2 0f       	add	r26, r18
    dd38:	b3 1f       	adc	r27, r19
    dd3a:	b6 cf       	rjmp	.-148    	; 0xdca8 <ff_wtoupper+0x12>
	}

	return chr;
}
    dd3c:	08 95       	ret

0000dd3e <disk_status>:

DSTATUS disk_status (
    BYTE pdrv       /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv) {
    dd3e:	81 11       	cpse	r24, r1
    case DRV_CFC :
        return cf_disk_status();
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_status();
    dd40:	02 c0       	rjmp	.+4      	; 0xdd46 <disk_status+0x8>
    dd42:	9b c1       	rjmp	.+822    	; 0xe07a <mmc_disk_status>
#endif
    }
    return STA_NOINIT;
    dd44:	08 95       	ret
}
    dd46:	81 e0       	ldi	r24, 0x01	; 1
    dd48:	08 95       	ret

0000dd4a <disk_initialize>:

DSTATUS disk_initialize (
    BYTE pdrv               /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv) {
    dd4a:	81 11       	cpse	r24, r1
    case DRV_CFC :
        return cf_disk_initialize();
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_initialize();
    dd4c:	02 c0       	rjmp	.+4      	; 0xdd52 <disk_initialize+0x8>
    dd4e:	f8 c0       	rjmp	.+496    	; 0xdf40 <mmc_disk_initialize>
#endif
    }
    return STA_NOINIT;
    dd50:	08 95       	ret
}
    dd52:	81 e0       	ldi	r24, 0x01	; 1
    dd54:	08 95       	ret

0000dd56 <disk_read>:
    BYTE pdrv,      /* Physical drive nmuber to identify the drive */
    BYTE *buff,     /* Data buffer to store read data */
    DWORD sector,   /* Sector address in LBA */
    UINT count      /* Number of sectors to read */
)
{
    dd56:	0f 93       	push	r16
    dd58:	1f 93       	push	r17
    dd5a:	fb 01       	movw	r30, r22
    switch (pdrv) {
    dd5c:	81 11       	cpse	r24, r1
    dd5e:	06 c0       	rjmp	.+12     	; 0xdd6c <disk_read+0x16>
    dd60:	ba 01       	movw	r22, r20
    dd62:	a9 01       	movw	r20, r18
    dd64:	cf 01       	movw	r24, r30
    case DRV_CFC :
        return cf_disk_read(buff, sector, count);
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_read(buff, sector, count);
    dd66:	98 01       	movw	r18, r16
    dd68:	8b d1       	rcall	.+790    	; 0xe080 <mmc_disk_read>
    dd6a:	02 c0       	rjmp	.+4      	; 0xdd70 <disk_read+0x1a>
#endif
    }
    return RES_PARERR;
    dd6c:	84 e0       	ldi	r24, 0x04	; 4
    dd6e:	90 e0       	ldi	r25, 0x00	; 0
}
    dd70:	1f 91       	pop	r17
    dd72:	0f 91       	pop	r16
    dd74:	08 95       	ret

0000dd76 <disk_write>:
    BYTE pdrv,          /* Physical drive nmuber to identify the drive */
    const BYTE *buff,   /* Data to be written */
    DWORD sector,       /* Sector address in LBA */
    UINT count          /* Number of sectors to write */
)
{
    dd76:	0f 93       	push	r16
    dd78:	1f 93       	push	r17
    dd7a:	fb 01       	movw	r30, r22
    switch (pdrv) {
    dd7c:	81 11       	cpse	r24, r1
    dd7e:	06 c0       	rjmp	.+12     	; 0xdd8c <disk_write+0x16>
    dd80:	ba 01       	movw	r22, r20
    dd82:	a9 01       	movw	r20, r18
    dd84:	cf 01       	movw	r24, r30
    case DRV_CFC :
        return cf_disk_write(buff, sector, count);
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_write(buff, sector, count);
    dd86:	98 01       	movw	r18, r16
    dd88:	c1 d1       	rcall	.+898    	; 0xe10c <mmc_disk_write>
    dd8a:	02 c0       	rjmp	.+4      	; 0xdd90 <disk_write+0x1a>
#endif
    }
    return RES_PARERR;
    dd8c:	84 e0       	ldi	r24, 0x04	; 4
    dd8e:	90 e0       	ldi	r25, 0x00	; 0
}
    dd90:	1f 91       	pop	r17
    dd92:	0f 91       	pop	r16
    dd94:	08 95       	ret

0000dd96 <disk_ioctl>:
DRESULT disk_ioctl (
    BYTE pdrv,      /* Physical drive nmuber (0..) */
    BYTE cmd,       /* Control code */
    void *buff      /* Buffer to send/receive control data */
)
{
    dd96:	96 2f       	mov	r25, r22
    switch (pdrv) {
    dd98:	81 11       	cpse	r24, r1
    dd9a:	04 c0       	rjmp	.+8      	; 0xdda4 <disk_ioctl+0xe>
    dd9c:	ba 01       	movw	r22, r20
    case DRV_CFC :
        return cf_disk_ioctl(cmd, buff);
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_ioctl(cmd, buff);
    dd9e:	89 2f       	mov	r24, r25
    dda0:	1a c2       	rjmp	.+1076   	; 0xe1d6 <mmc_disk_ioctl>
#endif
    }
    return RES_PARERR;
    dda2:	08 95       	ret
    dda4:	84 e0       	ldi	r24, 0x04	; 4
}
    dda6:	90 e0       	ldi	r25, 0x00	; 0
    dda8:	08 95       	ret

0000ddaa <xchg_spi>:
///@return Data read
static
BYTE xchg_spi (     /* Returns received data */
    BYTE dat        /* Data to be sent */
)
{
    ddaa:	17 c5       	rjmp	.+2606   	; 0xe7da <mmc_spi_TXRX>
    ddac:	08 95       	ret

0000ddae <deselect>:
    ddae:	ec d4       	rcall	.+2520   	; 0xe788 <mmc_spi_end>
    ddb0:	8f ef       	ldi	r24, 0xFF	; 255
    ddb2:	fb df       	rcall	.-10     	; 0xddaa <xchg_spi>
    ddb4:	8f ef       	ldi	r24, 0xFF	; 255
    ddb6:	f9 cf       	rjmp	.-14     	; 0xddaa <xchg_spi>
    ddb8:	08 95       	ret

0000ddba <rcvr_datablock>:
    ddba:	0f 93       	push	r16
    ddbc:	1f 93       	push	r17
    ddbe:	cf 93       	push	r28
    ddc0:	df 93       	push	r29
    ddc2:	ec 01       	movw	r28, r24
    ddc4:	8b 01       	movw	r16, r22
    ddc6:	46 9a       	sbi	0x08, 6	; 8
    ddc8:	3e 9a       	sbi	0x07, 6	; 7
    ddca:	88 ee       	ldi	r24, 0xE8	; 232
    ddcc:	93 e0       	ldi	r25, 0x03	; 3
    ddce:	08 d5       	rcall	.+2576   	; 0xe7e0 <mmc_set_ms_timeout>
    ddd0:	8f ef       	ldi	r24, 0xFF	; 255
    ddd2:	03 d5       	rcall	.+2566   	; 0xe7da <mmc_spi_TXRX>
    ddd4:	8f 3f       	cpi	r24, 0xFF	; 255
    ddd6:	31 f4       	brne	.+12     	; 0xdde4 <rcvr_datablock+0x2a>
    ddd8:	0a d5       	rcall	.+2580   	; 0xe7ee <mmc_test_timeout>
    ddda:	89 2b       	or	r24, r25
    dddc:	c9 f3       	breq	.-14     	; 0xddd0 <rcvr_datablock+0x16>
    ddde:	80 e0       	ldi	r24, 0x00	; 0
    dde0:	90 e0       	ldi	r25, 0x00	; 0
    dde2:	0d c0       	rjmp	.+26     	; 0xddfe <rcvr_datablock+0x44>
    dde4:	8e 3f       	cpi	r24, 0xFE	; 254
    dde6:	d9 f7       	brne	.-10     	; 0xddde <rcvr_datablock+0x24>
    dde8:	b8 01       	movw	r22, r16
    ddea:	ce 01       	movw	r24, r28
    ddec:	f3 d4       	rcall	.+2534   	; 0xe7d4 <mmc_spi_RX_buffer>
    ddee:	8f ef       	ldi	r24, 0xFF	; 255
    ddf0:	dc df       	rcall	.-72     	; 0xddaa <xchg_spi>
    ddf2:	8f ef       	ldi	r24, 0xFF	; 255
    ddf4:	da df       	rcall	.-76     	; 0xddaa <xchg_spi>
    ddf6:	46 98       	cbi	0x08, 6	; 8
    ddf8:	3e 9a       	sbi	0x07, 6	; 7
    ddfa:	81 e0       	ldi	r24, 0x01	; 1
    ddfc:	90 e0       	ldi	r25, 0x00	; 0
    ddfe:	df 91       	pop	r29
    de00:	cf 91       	pop	r28
    de02:	1f 91       	pop	r17
    de04:	0f 91       	pop	r16
    de06:	08 95       	ret

0000de08 <wait_ready>:
    de08:	cf 93       	push	r28
    de0a:	ea d4       	rcall	.+2516   	; 0xe7e0 <mmc_set_ms_timeout>
    de0c:	8f ef       	ldi	r24, 0xFF	; 255
    de0e:	e5 d4       	rcall	.+2506   	; 0xe7da <mmc_spi_TXRX>
    de10:	c8 2f       	mov	r28, r24
    de12:	8f 3f       	cpi	r24, 0xFF	; 255
    de14:	19 f0       	breq	.+6      	; 0xde1c <wait_ready+0x14>
    de16:	eb d4       	rcall	.+2518   	; 0xe7ee <mmc_test_timeout>
    de18:	89 2b       	or	r24, r25
    de1a:	c1 f3       	breq	.-16     	; 0xde0c <wait_ready+0x4>
    de1c:	81 e0       	ldi	r24, 0x01	; 1
    de1e:	90 e0       	ldi	r25, 0x00	; 0
    de20:	cf 3f       	cpi	r28, 0xFF	; 255
    de22:	11 f0       	breq	.+4      	; 0xde28 <wait_ready+0x20>
    de24:	80 e0       	ldi	r24, 0x00	; 0
    de26:	90 e0       	ldi	r25, 0x00	; 0
    de28:	cf 91       	pop	r28
    de2a:	08 95       	ret

0000de2c <select>:
    de2c:	cf 93       	push	r28
    de2e:	df 93       	push	r29
    de30:	9e d4       	rcall	.+2364   	; 0xe76e <mmc_spi_begin>
    de32:	8f ef       	ldi	r24, 0xFF	; 255
    de34:	ba df       	rcall	.-140    	; 0xddaa <xchg_spi>
    de36:	88 ee       	ldi	r24, 0xE8	; 232
    de38:	93 e0       	ldi	r25, 0x03	; 3
    de3a:	e6 df       	rcall	.-52     	; 0xde08 <wait_ready>
    de3c:	ec 01       	movw	r28, r24
    de3e:	89 2b       	or	r24, r25
    de40:	61 f4       	brne	.+24     	; 0xde5a <select+0x2e>
    de42:	8c eb       	ldi	r24, 0xBC	; 188
    de44:	97 e0       	ldi	r25, 0x07	; 7
    de46:	1f 92       	push	r1
    de48:	9f 93       	push	r25
    de4a:	8f 93       	push	r24
    de4c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    de50:	ae df       	rcall	.-164    	; 0xddae <deselect>
    de52:	0f 90       	pop	r0
    de54:	0f 90       	pop	r0
    de56:	0f 90       	pop	r0
    de58:	02 c0       	rjmp	.+4      	; 0xde5e <select+0x32>
    de5a:	c1 e0       	ldi	r28, 0x01	; 1
    de5c:	d0 e0       	ldi	r29, 0x00	; 0
    de5e:	ce 01       	movw	r24, r28
    de60:	df 91       	pop	r29
    de62:	cf 91       	pop	r28
    de64:	08 95       	ret

0000de66 <send_cmd>:
    de66:	ff 92       	push	r15
    de68:	0f 93       	push	r16
    de6a:	1f 93       	push	r17
    de6c:	cf 93       	push	r28
    de6e:	df 93       	push	r29
    de70:	c8 2f       	mov	r28, r24
    de72:	d4 2f       	mov	r29, r20
    de74:	15 2f       	mov	r17, r21
    de76:	06 2f       	mov	r16, r22
    de78:	f7 2e       	mov	r15, r23
    de7a:	87 ff       	sbrs	r24, 7
    de7c:	08 c0       	rjmp	.+16     	; 0xde8e <send_cmd+0x28>
    de7e:	40 e0       	ldi	r20, 0x00	; 0
    de80:	50 e0       	ldi	r21, 0x00	; 0
    de82:	ba 01       	movw	r22, r20
    de84:	87 e3       	ldi	r24, 0x37	; 55
    de86:	ef df       	rcall	.-34     	; 0xde66 <send_cmd>
    de88:	82 30       	cpi	r24, 0x02	; 2
    de8a:	58 f5       	brcc	.+86     	; 0xdee2 <send_cmd+0x7c>
    de8c:	cf 77       	andi	r28, 0x7F	; 127
    de8e:	cc 30       	cpi	r28, 0x0C	; 12
    de90:	71 f4       	brne	.+28     	; 0xdeae <send_cmd+0x48>
    de92:	8c 2f       	mov	r24, r28
    de94:	80 64       	ori	r24, 0x40	; 64
    de96:	89 df       	rcall	.-238    	; 0xddaa <xchg_spi>
    de98:	8f 2d       	mov	r24, r15
    de9a:	87 df       	rcall	.-242    	; 0xddaa <xchg_spi>
    de9c:	80 2f       	mov	r24, r16
    de9e:	85 df       	rcall	.-246    	; 0xddaa <xchg_spi>
    dea0:	81 2f       	mov	r24, r17
    dea2:	83 df       	rcall	.-250    	; 0xddaa <xchg_spi>
    dea4:	8d 2f       	mov	r24, r29
    dea6:	81 df       	rcall	.-254    	; 0xddaa <xchg_spi>
    dea8:	cc 23       	and	r28, r28
    deaa:	c9 f0       	breq	.+50     	; 0xdede <send_cmd+0x78>
    deac:	06 c0       	rjmp	.+12     	; 0xdeba <send_cmd+0x54>
    deae:	7f df       	rcall	.-258    	; 0xddae <deselect>
    deb0:	bd df       	rcall	.-134    	; 0xde2c <select>
    deb2:	89 2b       	or	r24, r25
    deb4:	71 f7       	brne	.-36     	; 0xde92 <send_cmd+0x2c>
    deb6:	8f ef       	ldi	r24, 0xFF	; 255
    deb8:	14 c0       	rjmp	.+40     	; 0xdee2 <send_cmd+0x7c>
    deba:	c8 30       	cpi	r28, 0x08	; 8
    debc:	11 f4       	brne	.+4      	; 0xdec2 <send_cmd+0x5c>
    debe:	87 e8       	ldi	r24, 0x87	; 135
    dec0:	01 c0       	rjmp	.+2      	; 0xdec4 <send_cmd+0x5e>
    dec2:	81 e0       	ldi	r24, 0x01	; 1
    dec4:	72 df       	rcall	.-284    	; 0xddaa <xchg_spi>
    dec6:	cc 30       	cpi	r28, 0x0C	; 12
    dec8:	11 f4       	brne	.+4      	; 0xdece <send_cmd+0x68>
    deca:	8f ef       	ldi	r24, 0xFF	; 255
    decc:	6e df       	rcall	.-292    	; 0xddaa <xchg_spi>
    dece:	ca e0       	ldi	r28, 0x0A	; 10
    ded0:	8f ef       	ldi	r24, 0xFF	; 255
    ded2:	83 d4       	rcall	.+2310   	; 0xe7da <mmc_spi_TXRX>
    ded4:	87 ff       	sbrs	r24, 7
    ded6:	05 c0       	rjmp	.+10     	; 0xdee2 <send_cmd+0x7c>
    ded8:	c1 50       	subi	r28, 0x01	; 1
    deda:	d1 f7       	brne	.-12     	; 0xded0 <send_cmd+0x6a>
    dedc:	02 c0       	rjmp	.+4      	; 0xdee2 <send_cmd+0x7c>
    dede:	85 e9       	ldi	r24, 0x95	; 149
    dee0:	f5 cf       	rjmp	.-22     	; 0xdecc <send_cmd+0x66>
    dee2:	cd b7       	in	r28, 0x3d	; 61
    dee4:	de b7       	in	r29, 0x3e	; 62
    dee6:	e5 e0       	ldi	r30, 0x05	; 5
    dee8:	0c 94 5d ec 	jmp	0x1d8ba	; 0x1d8ba <__epilogue_restores__+0x1a>

0000deec <xmit_datablock>:
    deec:	0f 93       	push	r16
    deee:	1f 93       	push	r17
    def0:	cf 93       	push	r28
    def2:	8c 01       	movw	r16, r24
    def4:	c6 2f       	mov	r28, r22
    def6:	47 9a       	sbi	0x08, 7	; 8
    def8:	3f 9a       	sbi	0x07, 7	; 7
    defa:	88 ee       	ldi	r24, 0xE8	; 232
    defc:	93 e0       	ldi	r25, 0x03	; 3
    defe:	84 df       	rcall	.-248    	; 0xde08 <wait_ready>
    df00:	89 2b       	or	r24, r25
    df02:	19 f4       	brne	.+6      	; 0xdf0a <xmit_datablock+0x1e>
    df04:	80 e0       	ldi	r24, 0x00	; 0
    df06:	90 e0       	ldi	r25, 0x00	; 0
    df08:	17 c0       	rjmp	.+46     	; 0xdf38 <xmit_datablock+0x4c>
    df0a:	8c 2f       	mov	r24, r28
    df0c:	4e df       	rcall	.-356    	; 0xddaa <xchg_spi>
    df0e:	cd 3f       	cpi	r28, 0xFD	; 253
    df10:	29 f4       	brne	.+10     	; 0xdf1c <xmit_datablock+0x30>
    df12:	46 98       	cbi	0x08, 6	; 8
    df14:	3e 9a       	sbi	0x07, 6	; 7
    df16:	81 e0       	ldi	r24, 0x01	; 1
    df18:	90 e0       	ldi	r25, 0x00	; 0
    df1a:	0e c0       	rjmp	.+28     	; 0xdf38 <xmit_datablock+0x4c>
    df1c:	60 e0       	ldi	r22, 0x00	; 0
    df1e:	72 e0       	ldi	r23, 0x02	; 2
    df20:	c8 01       	movw	r24, r16
    df22:	55 d4       	rcall	.+2218   	; 0xe7ce <mmc_spi_TX_buffer>
    df24:	8f ef       	ldi	r24, 0xFF	; 255
    df26:	41 df       	rcall	.-382    	; 0xddaa <xchg_spi>
    df28:	8f ef       	ldi	r24, 0xFF	; 255
    df2a:	3f df       	rcall	.-386    	; 0xddaa <xchg_spi>
    df2c:	8f ef       	ldi	r24, 0xFF	; 255
    df2e:	55 d4       	rcall	.+2218   	; 0xe7da <mmc_spi_TXRX>
    df30:	8f 71       	andi	r24, 0x1F	; 31
    df32:	85 30       	cpi	r24, 0x05	; 5
    df34:	39 f7       	brne	.-50     	; 0xdf04 <xmit_datablock+0x18>
    df36:	ed cf       	rjmp	.-38     	; 0xdf12 <xmit_datablock+0x26>
    df38:	cf 91       	pop	r28
    df3a:	1f 91       	pop	r17
    df3c:	0f 91       	pop	r16
    df3e:	08 95       	ret

0000df40 <mmc_disk_initialize>:
    df40:	a4 e0       	ldi	r26, 0x04	; 4
    df42:	b0 e0       	ldi	r27, 0x00	; 0
    df44:	e6 ea       	ldi	r30, 0xA6	; 166
    df46:	ff e6       	ldi	r31, 0x6F	; 111
    df48:	0c 94 3e ec 	jmp	0x1d87c	; 0x1d87c <__prologue_saves__+0x14>
    df4c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    df50:	81 fd       	sbrc	r24, 1
    df52:	8d c0       	rjmp	.+282    	; 0xe06e <mmc_disk_initialize+0x12e>
    df54:	1d d4       	rcall	.+2106   	; 0xe790 <mmc_slow>
    df56:	1a e0       	ldi	r17, 0x0A	; 10
    df58:	8f ef       	ldi	r24, 0xFF	; 255
    df5a:	27 df       	rcall	.-434    	; 0xddaa <xchg_spi>
    df5c:	11 50       	subi	r17, 0x01	; 1
    df5e:	e1 f7       	brne	.-8      	; 0xdf58 <mmc_disk_initialize+0x18>
    df60:	40 e0       	ldi	r20, 0x00	; 0
    df62:	50 e0       	ldi	r21, 0x00	; 0
    df64:	ba 01       	movw	r22, r20
    df66:	80 e0       	ldi	r24, 0x00	; 0
    df68:	7e df       	rcall	.-260    	; 0xde66 <send_cmd>
    df6a:	81 30       	cpi	r24, 0x01	; 1
    df6c:	09 f0       	breq	.+2      	; 0xdf70 <mmc_disk_initialize+0x30>
    df6e:	6f c0       	rjmp	.+222    	; 0xe04e <mmc_disk_initialize+0x10e>
    df70:	80 ed       	ldi	r24, 0xD0	; 208
    df72:	97 e0       	ldi	r25, 0x07	; 7
    df74:	35 d4       	rcall	.+2154   	; 0xe7e0 <mmc_set_ms_timeout>
    df76:	4a ea       	ldi	r20, 0xAA	; 170
    df78:	51 e0       	ldi	r21, 0x01	; 1
    df7a:	60 e0       	ldi	r22, 0x00	; 0
    df7c:	70 e0       	ldi	r23, 0x00	; 0
    df7e:	88 e0       	ldi	r24, 0x08	; 8
    df80:	72 df       	rcall	.-284    	; 0xde66 <send_cmd>
    df82:	81 30       	cpi	r24, 0x01	; 1
    df84:	09 f0       	breq	.+2      	; 0xdf88 <mmc_disk_initialize+0x48>
    df86:	3d c0       	rjmp	.+122    	; 0xe002 <mmc_disk_initialize+0xc2>
    df88:	8e 01       	movw	r16, r28
    df8a:	0f 5f       	subi	r16, 0xFF	; 255
    df8c:	1f 4f       	sbci	r17, 0xFF	; 255
    df8e:	6e 01       	movw	r12, r28
    df90:	85 e0       	ldi	r24, 0x05	; 5
    df92:	c8 0e       	add	r12, r24
    df94:	d1 1c       	adc	r13, r1
    df96:	78 01       	movw	r14, r16
    df98:	8f ef       	ldi	r24, 0xFF	; 255
    df9a:	1f d4       	rcall	.+2110   	; 0xe7da <mmc_spi_TXRX>
    df9c:	f7 01       	movw	r30, r14
    df9e:	81 93       	st	Z+, r24
    dfa0:	7f 01       	movw	r14, r30
    dfa2:	ce 16       	cp	r12, r30
    dfa4:	df 06       	cpc	r13, r31
    dfa6:	c1 f7       	brne	.-16     	; 0xdf98 <mmc_disk_initialize+0x58>
    dfa8:	8b 81       	ldd	r24, Y+3	; 0x03
    dfaa:	81 30       	cpi	r24, 0x01	; 1
    dfac:	09 f0       	breq	.+2      	; 0xdfb0 <mmc_disk_initialize+0x70>
    dfae:	4f c0       	rjmp	.+158    	; 0xe04e <mmc_disk_initialize+0x10e>
    dfb0:	8c 81       	ldd	r24, Y+4	; 0x04
    dfb2:	8a 3a       	cpi	r24, 0xAA	; 170
    dfb4:	09 f0       	breq	.+2      	; 0xdfb8 <mmc_disk_initialize+0x78>
    dfb6:	4b c0       	rjmp	.+150    	; 0xe04e <mmc_disk_initialize+0x10e>
    dfb8:	1a d4       	rcall	.+2100   	; 0xe7ee <mmc_test_timeout>
    dfba:	89 2b       	or	r24, r25
    dfbc:	29 f0       	breq	.+10     	; 0xdfc8 <mmc_disk_initialize+0x88>
    dfbe:	17 d4       	rcall	.+2094   	; 0xe7ee <mmc_test_timeout>
    dfc0:	89 2b       	or	r24, r25
    dfc2:	09 f0       	breq	.+2      	; 0xdfc6 <mmc_disk_initialize+0x86>
    dfc4:	44 c0       	rjmp	.+136    	; 0xe04e <mmc_disk_initialize+0x10e>
    dfc6:	09 c0       	rjmp	.+18     	; 0xdfda <mmc_disk_initialize+0x9a>
    dfc8:	40 e0       	ldi	r20, 0x00	; 0
    dfca:	50 e0       	ldi	r21, 0x00	; 0
    dfcc:	60 e0       	ldi	r22, 0x00	; 0
    dfce:	70 e4       	ldi	r23, 0x40	; 64
    dfd0:	89 ea       	ldi	r24, 0xA9	; 169
    dfd2:	49 df       	rcall	.-366    	; 0xde66 <send_cmd>
    dfd4:	81 11       	cpse	r24, r1
    dfd6:	f0 cf       	rjmp	.-32     	; 0xdfb8 <mmc_disk_initialize+0x78>
    dfd8:	f2 cf       	rjmp	.-28     	; 0xdfbe <mmc_disk_initialize+0x7e>
    dfda:	40 e0       	ldi	r20, 0x00	; 0
    dfdc:	50 e0       	ldi	r21, 0x00	; 0
    dfde:	ba 01       	movw	r22, r20
    dfe0:	8a e3       	ldi	r24, 0x3A	; 58
    dfe2:	41 df       	rcall	.-382    	; 0xde66 <send_cmd>
    dfe4:	81 11       	cpse	r24, r1
    dfe6:	33 c0       	rjmp	.+102    	; 0xe04e <mmc_disk_initialize+0x10e>
    dfe8:	8f ef       	ldi	r24, 0xFF	; 255
    dfea:	f7 d3       	rcall	.+2030   	; 0xe7da <mmc_spi_TXRX>
    dfec:	f8 01       	movw	r30, r16
    dfee:	81 93       	st	Z+, r24
    dff0:	8f 01       	movw	r16, r30
    dff2:	ce 16       	cp	r12, r30
    dff4:	df 06       	cpc	r13, r31
    dff6:	c1 f7       	brne	.-16     	; 0xdfe8 <mmc_disk_initialize+0xa8>
    dff8:	89 81       	ldd	r24, Y+1	; 0x01
    dffa:	86 fd       	sbrc	r24, 6
    dffc:	2a c0       	rjmp	.+84     	; 0xe052 <mmc_disk_initialize+0x112>
    dffe:	14 e0       	ldi	r17, 0x04	; 4
    e000:	29 c0       	rjmp	.+82     	; 0xe054 <mmc_disk_initialize+0x114>
    e002:	80 ed       	ldi	r24, 0xD0	; 208
    e004:	97 e0       	ldi	r25, 0x07	; 7
    e006:	ec d3       	rcall	.+2008   	; 0xe7e0 <mmc_set_ms_timeout>
    e008:	40 e0       	ldi	r20, 0x00	; 0
    e00a:	50 e0       	ldi	r21, 0x00	; 0
    e00c:	ba 01       	movw	r22, r20
    e00e:	89 ea       	ldi	r24, 0xA9	; 169
    e010:	2a df       	rcall	.-428    	; 0xde66 <send_cmd>
    e012:	82 30       	cpi	r24, 0x02	; 2
    e014:	18 f0       	brcs	.+6      	; 0xe01c <mmc_disk_initialize+0xdc>
    e016:	11 e0       	ldi	r17, 0x01	; 1
    e018:	01 e0       	ldi	r16, 0x01	; 1
    e01a:	02 c0       	rjmp	.+4      	; 0xe020 <mmc_disk_initialize+0xe0>
    e01c:	12 e0       	ldi	r17, 0x02	; 2
    e01e:	09 ea       	ldi	r16, 0xA9	; 169
    e020:	e6 d3       	rcall	.+1996   	; 0xe7ee <mmc_test_timeout>
    e022:	89 2b       	or	r24, r25
    e024:	21 f0       	breq	.+8      	; 0xe02e <mmc_disk_initialize+0xee>
    e026:	e3 d3       	rcall	.+1990   	; 0xe7ee <mmc_test_timeout>
    e028:	89 2b       	or	r24, r25
    e02a:	89 f4       	brne	.+34     	; 0xe04e <mmc_disk_initialize+0x10e>
    e02c:	08 c0       	rjmp	.+16     	; 0xe03e <mmc_disk_initialize+0xfe>
    e02e:	40 e0       	ldi	r20, 0x00	; 0
    e030:	50 e0       	ldi	r21, 0x00	; 0
    e032:	ba 01       	movw	r22, r20
    e034:	80 2f       	mov	r24, r16
    e036:	17 df       	rcall	.-466    	; 0xde66 <send_cmd>
    e038:	81 11       	cpse	r24, r1
    e03a:	f2 cf       	rjmp	.-28     	; 0xe020 <mmc_disk_initialize+0xe0>
    e03c:	f4 cf       	rjmp	.-24     	; 0xe026 <mmc_disk_initialize+0xe6>
    e03e:	40 e0       	ldi	r20, 0x00	; 0
    e040:	52 e0       	ldi	r21, 0x02	; 2
    e042:	60 e0       	ldi	r22, 0x00	; 0
    e044:	70 e0       	ldi	r23, 0x00	; 0
    e046:	80 e1       	ldi	r24, 0x10	; 16
    e048:	0e df       	rcall	.-484    	; 0xde66 <send_cmd>
    e04a:	88 23       	and	r24, r24
    e04c:	19 f0       	breq	.+6      	; 0xe054 <mmc_disk_initialize+0x114>
    e04e:	10 e0       	ldi	r17, 0x00	; 0
    e050:	01 c0       	rjmp	.+2      	; 0xe054 <mmc_disk_initialize+0x114>
    e052:	1c e0       	ldi	r17, 0x0C	; 12
    e054:	10 93 84 18 	sts	0x1884, r17	; 0x801884 <CardType>
    e058:	aa de       	rcall	.-684    	; 0xddae <deselect>
    e05a:	11 23       	and	r17, r17
    e05c:	39 f0       	breq	.+14     	; 0xe06c <mmc_disk_initialize+0x12c>
    e05e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e062:	8e 7f       	andi	r24, 0xFE	; 254
    e064:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Stat>
    e068:	a5 d3       	rcall	.+1866   	; 0xe7b4 <mmc_fast>
    e06a:	01 c0       	rjmp	.+2      	; 0xe06e <mmc_disk_initialize+0x12e>
    e06c:	84 d4       	rcall	.+2312   	; 0xe976 <mmc_power_off>
    e06e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e072:	24 96       	adiw	r28, 0x04	; 4
    e074:	e8 e0       	ldi	r30, 0x08	; 8
    e076:	0c 94 5a ec 	jmp	0x1d8b4	; 0x1d8b4 <__epilogue_restores__+0x14>

0000e07a <mmc_disk_status>:
    e07a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e07e:	08 95       	ret

0000e080 <mmc_disk_read>:
    e080:	ef 92       	push	r14
    e082:	ff 92       	push	r15
    e084:	1f 93       	push	r17
    e086:	cf 93       	push	r28
    e088:	df 93       	push	r29
    e08a:	7c 01       	movw	r14, r24
    e08c:	e9 01       	movw	r28, r18
    e08e:	20 97       	sbiw	r28, 0x00	; 0
    e090:	19 f4       	brne	.+6      	; 0xe098 <mmc_disk_read+0x18>
    e092:	8d de       	rcall	.-742    	; 0xddae <deselect>
    e094:	84 e0       	ldi	r24, 0x04	; 4
    e096:	06 c0       	rjmp	.+12     	; 0xe0a4 <mmc_disk_read+0x24>
    e098:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e09c:	80 ff       	sbrs	r24, 0
    e09e:	04 c0       	rjmp	.+8      	; 0xe0a8 <mmc_disk_read+0x28>
    e0a0:	86 de       	rcall	.-756    	; 0xddae <deselect>
    e0a2:	83 e0       	ldi	r24, 0x03	; 3
    e0a4:	90 e0       	ldi	r25, 0x00	; 0
    e0a6:	2c c0       	rjmp	.+88     	; 0xe100 <mmc_disk_read+0x80>
    e0a8:	80 91 84 18 	lds	r24, 0x1884	; 0x801884 <CardType>
    e0ac:	83 fd       	sbrc	r24, 3
    e0ae:	07 c0       	rjmp	.+14     	; 0xe0be <mmc_disk_read+0x3e>
    e0b0:	89 e0       	ldi	r24, 0x09	; 9
    e0b2:	44 0f       	add	r20, r20
    e0b4:	55 1f       	adc	r21, r21
    e0b6:	66 1f       	adc	r22, r22
    e0b8:	77 1f       	adc	r23, r23
    e0ba:	8a 95       	dec	r24
    e0bc:	d1 f7       	brne	.-12     	; 0xe0b2 <mmc_disk_read+0x32>
    e0be:	c2 30       	cpi	r28, 0x02	; 2
    e0c0:	d1 05       	cpc	r29, r1
    e0c2:	10 f4       	brcc	.+4      	; 0xe0c8 <mmc_disk_read+0x48>
    e0c4:	11 e1       	ldi	r17, 0x11	; 17
    e0c6:	01 c0       	rjmp	.+2      	; 0xe0ca <mmc_disk_read+0x4a>
    e0c8:	12 e1       	ldi	r17, 0x12	; 18
    e0ca:	81 2f       	mov	r24, r17
    e0cc:	cc de       	rcall	.-616    	; 0xde66 <send_cmd>
    e0ce:	81 11       	cpse	r24, r1
    e0d0:	11 c0       	rjmp	.+34     	; 0xe0f4 <mmc_disk_read+0x74>
    e0d2:	60 e0       	ldi	r22, 0x00	; 0
    e0d4:	72 e0       	ldi	r23, 0x02	; 2
    e0d6:	c7 01       	movw	r24, r14
    e0d8:	70 de       	rcall	.-800    	; 0xddba <rcvr_datablock>
    e0da:	89 2b       	or	r24, r25
    e0dc:	21 f0       	breq	.+8      	; 0xe0e6 <mmc_disk_read+0x66>
    e0de:	8e ef       	ldi	r24, 0xFE	; 254
    e0e0:	f8 1a       	sub	r15, r24
    e0e2:	21 97       	sbiw	r28, 0x01	; 1
    e0e4:	b1 f7       	brne	.-20     	; 0xe0d2 <mmc_disk_read+0x52>
    e0e6:	12 31       	cpi	r17, 0x12	; 18
    e0e8:	29 f4       	brne	.+10     	; 0xe0f4 <mmc_disk_read+0x74>
    e0ea:	40 e0       	ldi	r20, 0x00	; 0
    e0ec:	50 e0       	ldi	r21, 0x00	; 0
    e0ee:	ba 01       	movw	r22, r20
    e0f0:	8c e0       	ldi	r24, 0x0C	; 12
    e0f2:	b9 de       	rcall	.-654    	; 0xde66 <send_cmd>
    e0f4:	5c de       	rcall	.-840    	; 0xddae <deselect>
    e0f6:	81 e0       	ldi	r24, 0x01	; 1
    e0f8:	90 e0       	ldi	r25, 0x00	; 0
    e0fa:	cd 2b       	or	r28, r29
    e0fc:	09 f4       	brne	.+2      	; 0xe100 <mmc_disk_read+0x80>
    e0fe:	80 e0       	ldi	r24, 0x00	; 0
    e100:	df 91       	pop	r29
    e102:	cf 91       	pop	r28
    e104:	1f 91       	pop	r17
    e106:	ff 90       	pop	r15
    e108:	ef 90       	pop	r14
    e10a:	08 95       	ret

0000e10c <mmc_disk_write>:
    e10c:	a0 e0       	ldi	r26, 0x00	; 0
    e10e:	b0 e0       	ldi	r27, 0x00	; 0
    e110:	ec e8       	ldi	r30, 0x8C	; 140
    e112:	f0 e7       	ldi	r31, 0x70	; 112
    e114:	0c 94 3e ec 	jmp	0x1d87c	; 0x1d87c <__prologue_saves__+0x14>
    e118:	8c 01       	movw	r16, r24
    e11a:	6a 01       	movw	r12, r20
    e11c:	7b 01       	movw	r14, r22
    e11e:	e9 01       	movw	r28, r18
    e120:	20 97       	sbiw	r28, 0x00	; 0
    e122:	19 f4       	brne	.+6      	; 0xe12a <mmc_disk_write+0x1e>
    e124:	44 de       	rcall	.-888    	; 0xddae <deselect>
    e126:	84 e0       	ldi	r24, 0x04	; 4
    e128:	06 c0       	rjmp	.+12     	; 0xe136 <mmc_disk_write+0x2a>
    e12a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e12e:	80 ff       	sbrs	r24, 0
    e130:	04 c0       	rjmp	.+8      	; 0xe13a <mmc_disk_write+0x2e>
    e132:	3d de       	rcall	.-902    	; 0xddae <deselect>
    e134:	83 e0       	ldi	r24, 0x03	; 3
    e136:	90 e0       	ldi	r25, 0x00	; 0
    e138:	49 c0       	rjmp	.+146    	; 0xe1cc <mmc_disk_write+0xc0>
    e13a:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e13e:	82 ff       	sbrs	r24, 2
    e140:	03 c0       	rjmp	.+6      	; 0xe148 <mmc_disk_write+0x3c>
    e142:	35 de       	rcall	.-918    	; 0xddae <deselect>
    e144:	82 e0       	ldi	r24, 0x02	; 2
    e146:	f7 cf       	rjmp	.-18     	; 0xe136 <mmc_disk_write+0x2a>
    e148:	80 91 84 18 	lds	r24, 0x1884	; 0x801884 <CardType>
    e14c:	83 fd       	sbrc	r24, 3
    e14e:	07 c0       	rjmp	.+14     	; 0xe15e <mmc_disk_write+0x52>
    e150:	99 e0       	ldi	r25, 0x09	; 9
    e152:	cc 0c       	add	r12, r12
    e154:	dd 1c       	adc	r13, r13
    e156:	ee 1c       	adc	r14, r14
    e158:	ff 1c       	adc	r15, r15
    e15a:	9a 95       	dec	r25
    e15c:	d1 f7       	brne	.-12     	; 0xe152 <mmc_disk_write+0x46>
    e15e:	c1 30       	cpi	r28, 0x01	; 1
    e160:	d1 05       	cpc	r29, r1
    e162:	89 f4       	brne	.+34     	; 0xe186 <mmc_disk_write+0x7a>
    e164:	b7 01       	movw	r22, r14
    e166:	a6 01       	movw	r20, r12
    e168:	88 e1       	ldi	r24, 0x18	; 24
    e16a:	7d de       	rcall	.-774    	; 0xde66 <send_cmd>
    e16c:	81 11       	cpse	r24, r1
    e16e:	26 c0       	rjmp	.+76     	; 0xe1bc <mmc_disk_write+0xb0>
    e170:	6e ef       	ldi	r22, 0xFE	; 254
    e172:	c8 01       	movw	r24, r16
    e174:	bb de       	rcall	.-650    	; 0xdeec <xmit_datablock>
    e176:	31 e0       	ldi	r19, 0x01	; 1
    e178:	20 e0       	ldi	r18, 0x00	; 0
    e17a:	89 2b       	or	r24, r25
    e17c:	09 f0       	breq	.+2      	; 0xe180 <mmc_disk_write+0x74>
    e17e:	30 e0       	ldi	r19, 0x00	; 0
    e180:	c3 2f       	mov	r28, r19
    e182:	d2 2f       	mov	r29, r18
    e184:	1d c0       	rjmp	.+58     	; 0xe1c0 <mmc_disk_write+0xb4>
    e186:	86 70       	andi	r24, 0x06	; 6
    e188:	29 f0       	breq	.+10     	; 0xe194 <mmc_disk_write+0x88>
    e18a:	ae 01       	movw	r20, r28
    e18c:	60 e0       	ldi	r22, 0x00	; 0
    e18e:	70 e0       	ldi	r23, 0x00	; 0
    e190:	87 e9       	ldi	r24, 0x97	; 151
    e192:	69 de       	rcall	.-814    	; 0xde66 <send_cmd>
    e194:	b7 01       	movw	r22, r14
    e196:	a6 01       	movw	r20, r12
    e198:	89 e1       	ldi	r24, 0x19	; 25
    e19a:	65 de       	rcall	.-822    	; 0xde66 <send_cmd>
    e19c:	81 11       	cpse	r24, r1
    e19e:	10 c0       	rjmp	.+32     	; 0xe1c0 <mmc_disk_write+0xb4>
    e1a0:	6c ef       	ldi	r22, 0xFC	; 252
    e1a2:	c8 01       	movw	r24, r16
    e1a4:	a3 de       	rcall	.-698    	; 0xdeec <xmit_datablock>
    e1a6:	89 2b       	or	r24, r25
    e1a8:	19 f0       	breq	.+6      	; 0xe1b0 <mmc_disk_write+0xa4>
    e1aa:	1e 5f       	subi	r17, 0xFE	; 254
    e1ac:	21 97       	sbiw	r28, 0x01	; 1
    e1ae:	c1 f7       	brne	.-16     	; 0xe1a0 <mmc_disk_write+0x94>
    e1b0:	6d ef       	ldi	r22, 0xFD	; 253
    e1b2:	80 e0       	ldi	r24, 0x00	; 0
    e1b4:	90 e0       	ldi	r25, 0x00	; 0
    e1b6:	9a de       	rcall	.-716    	; 0xdeec <xmit_datablock>
    e1b8:	89 2b       	or	r24, r25
    e1ba:	11 f4       	brne	.+4      	; 0xe1c0 <mmc_disk_write+0xb4>
    e1bc:	c1 e0       	ldi	r28, 0x01	; 1
    e1be:	d0 e0       	ldi	r29, 0x00	; 0
    e1c0:	f6 dd       	rcall	.-1044   	; 0xddae <deselect>
    e1c2:	81 e0       	ldi	r24, 0x01	; 1
    e1c4:	90 e0       	ldi	r25, 0x00	; 0
    e1c6:	cd 2b       	or	r28, r29
    e1c8:	09 f4       	brne	.+2      	; 0xe1cc <mmc_disk_write+0xc0>
    e1ca:	80 e0       	ldi	r24, 0x00	; 0
    e1cc:	cd b7       	in	r28, 0x3d	; 61
    e1ce:	de b7       	in	r29, 0x3e	; 62
    e1d0:	e8 e0       	ldi	r30, 0x08	; 8
    e1d2:	0c 94 5a ec 	jmp	0x1d8b4	; 0x1d8b4 <__epilogue_restores__+0x14>

0000e1d6 <mmc_disk_ioctl>:
    e1d6:	a0 e1       	ldi	r26, 0x10	; 16
    e1d8:	b0 e0       	ldi	r27, 0x00	; 0
    e1da:	e1 ef       	ldi	r30, 0xF1	; 241
    e1dc:	f0 e7       	ldi	r31, 0x70	; 112
    e1de:	0c 94 3e ec 	jmp	0x1d87c	; 0x1d87c <__prologue_saves__+0x14>
    e1e2:	90 91 3c 01 	lds	r25, 0x013C	; 0x80013c <Stat>
    e1e6:	90 fd       	sbrc	r25, 0
    e1e8:	75 c2       	rjmp	.+1258   	; 0xe6d4 <mmc_disk_ioctl+0x4fe>
    e1ea:	8b 01       	movw	r16, r22
    e1ec:	83 33       	cpi	r24, 0x33	; 51
    e1ee:	09 f4       	brne	.+2      	; 0xe1f2 <mmc_disk_ioctl+0x1c>
    e1f0:	4b c1       	rjmp	.+662    	; 0xe488 <mmc_disk_ioctl+0x2b2>
    e1f2:	98 f4       	brcc	.+38     	; 0xe21a <mmc_disk_ioctl+0x44>
    e1f4:	83 30       	cpi	r24, 0x03	; 3
    e1f6:	09 f4       	brne	.+2      	; 0xe1fa <mmc_disk_ioctl+0x24>
    e1f8:	84 c0       	rjmp	.+264    	; 0xe302 <mmc_disk_ioctl+0x12c>
    e1fa:	28 f4       	brcc	.+10     	; 0xe206 <mmc_disk_ioctl+0x30>
    e1fc:	88 23       	and	r24, r24
    e1fe:	09 f1       	breq	.+66     	; 0xe242 <mmc_disk_ioctl+0x6c>
    e200:	81 30       	cpi	r24, 0x01	; 1
    e202:	09 f1       	breq	.+66     	; 0xe246 <mmc_disk_ioctl+0x70>
    e204:	69 c2       	rjmp	.+1234   	; 0xe6d8 <mmc_disk_ioctl+0x502>
    e206:	87 30       	cpi	r24, 0x07	; 7
    e208:	09 f4       	brne	.+2      	; 0xe20c <mmc_disk_ioctl+0x36>
    e20a:	74 c1       	rjmp	.+744    	; 0xe4f4 <mmc_disk_ioctl+0x31e>
    e20c:	82 33       	cpi	r24, 0x32	; 50
    e20e:	09 f4       	brne	.+2      	; 0xe212 <mmc_disk_ioctl+0x3c>
    e210:	36 c1       	rjmp	.+620    	; 0xe47e <mmc_disk_ioctl+0x2a8>
    e212:	84 30       	cpi	r24, 0x04	; 4
    e214:	09 f0       	breq	.+2      	; 0xe218 <mmc_disk_ioctl+0x42>
    e216:	60 c2       	rjmp	.+1216   	; 0xe6d8 <mmc_disk_ioctl+0x502>
    e218:	ec c0       	rjmp	.+472    	; 0xe3f2 <mmc_disk_ioctl+0x21c>
    e21a:	86 33       	cpi	r24, 0x36	; 54
    e21c:	09 f4       	brne	.+2      	; 0xe220 <mmc_disk_ioctl+0x4a>
    e21e:	57 c1       	rjmp	.+686    	; 0xe4ce <mmc_disk_ioctl+0x2f8>
    e220:	38 f4       	brcc	.+14     	; 0xe230 <mmc_disk_ioctl+0x5a>
    e222:	84 33       	cpi	r24, 0x34	; 52
    e224:	09 f4       	brne	.+2      	; 0xe228 <mmc_disk_ioctl+0x52>
    e226:	35 c1       	rjmp	.+618    	; 0xe492 <mmc_disk_ioctl+0x2bc>
    e228:	85 33       	cpi	r24, 0x35	; 53
    e22a:	09 f4       	brne	.+2      	; 0xe22e <mmc_disk_ioctl+0x58>
    e22c:	3c c1       	rjmp	.+632    	; 0xe4a6 <mmc_disk_ioctl+0x2d0>
    e22e:	54 c2       	rjmp	.+1192   	; 0xe6d8 <mmc_disk_ioctl+0x502>
    e230:	88 33       	cpi	r24, 0x38	; 56
    e232:	09 f4       	brne	.+2      	; 0xe236 <mmc_disk_ioctl+0x60>
    e234:	bf c1       	rjmp	.+894    	; 0xe5b4 <mmc_disk_ioctl+0x3de>
    e236:	08 f4       	brcc	.+2      	; 0xe23a <mmc_disk_ioctl+0x64>
    e238:	65 c1       	rjmp	.+714    	; 0xe504 <mmc_disk_ioctl+0x32e>
    e23a:	89 33       	cpi	r24, 0x39	; 57
    e23c:	09 f4       	brne	.+2      	; 0xe240 <mmc_disk_ioctl+0x6a>
    e23e:	07 c2       	rjmp	.+1038   	; 0xe64e <mmc_disk_ioctl+0x478>
    e240:	4b c2       	rjmp	.+1174   	; 0xe6d8 <mmc_disk_ioctl+0x502>
    e242:	f4 dd       	rcall	.-1048   	; 0xde2c <select>
    e244:	51 c1       	rjmp	.+674    	; 0xe4e8 <mmc_disk_ioctl+0x312>
    e246:	40 e0       	ldi	r20, 0x00	; 0
    e248:	50 e0       	ldi	r21, 0x00	; 0
    e24a:	ba 01       	movw	r22, r20
    e24c:	89 e0       	ldi	r24, 0x09	; 9
    e24e:	0b de       	rcall	.-1002   	; 0xde66 <send_cmd>
    e250:	81 11       	cpse	r24, r1
    e252:	3c c2       	rjmp	.+1144   	; 0xe6cc <mmc_disk_ioctl+0x4f6>
    e254:	60 e1       	ldi	r22, 0x10	; 16
    e256:	70 e0       	ldi	r23, 0x00	; 0
    e258:	ce 01       	movw	r24, r28
    e25a:	01 96       	adiw	r24, 0x01	; 1
    e25c:	ae dd       	rcall	.-1188   	; 0xddba <rcvr_datablock>
    e25e:	89 2b       	or	r24, r25
    e260:	09 f4       	brne	.+2      	; 0xe264 <mmc_disk_ioctl+0x8e>
    e262:	34 c2       	rjmp	.+1128   	; 0xe6cc <mmc_disk_ioctl+0x4f6>
    e264:	99 81       	ldd	r25, Y+1	; 0x01
    e266:	92 95       	swap	r25
    e268:	96 95       	lsr	r25
    e26a:	96 95       	lsr	r25
    e26c:	93 70       	andi	r25, 0x03	; 3
    e26e:	29 85       	ldd	r18, Y+9	; 0x09
    e270:	4a 85       	ldd	r20, Y+10	; 0x0a
    e272:	88 85       	ldd	r24, Y+8	; 0x08
    e274:	91 30       	cpi	r25, 0x01	; 1
    e276:	d9 f4       	brne	.+54     	; 0xe2ae <mmc_disk_ioctl+0xd8>
    e278:	30 e0       	ldi	r19, 0x00	; 0
    e27a:	32 2f       	mov	r19, r18
    e27c:	22 27       	eor	r18, r18
    e27e:	24 0f       	add	r18, r20
    e280:	31 1d       	adc	r19, r1
    e282:	8f 73       	andi	r24, 0x3F	; 63
    e284:	90 e0       	ldi	r25, 0x00	; 0
    e286:	a0 e0       	ldi	r26, 0x00	; 0
    e288:	b0 e0       	ldi	r27, 0x00	; 0
    e28a:	dc 01       	movw	r26, r24
    e28c:	99 27       	eor	r25, r25
    e28e:	88 27       	eor	r24, r24
    e290:	01 96       	adiw	r24, 0x01	; 1
    e292:	a1 1d       	adc	r26, r1
    e294:	b1 1d       	adc	r27, r1
    e296:	82 0f       	add	r24, r18
    e298:	93 1f       	adc	r25, r19
    e29a:	a1 1d       	adc	r26, r1
    e29c:	b1 1d       	adc	r27, r1
    e29e:	5a e0       	ldi	r21, 0x0A	; 10
    e2a0:	88 0f       	add	r24, r24
    e2a2:	99 1f       	adc	r25, r25
    e2a4:	aa 1f       	adc	r26, r26
    e2a6:	bb 1f       	adc	r27, r27
    e2a8:	5a 95       	dec	r21
    e2aa:	d1 f7       	brne	.-12     	; 0xe2a0 <mmc_disk_ioctl+0xca>
    e2ac:	9b c0       	rjmp	.+310    	; 0xe3e4 <mmc_disk_ioctl+0x20e>
    e2ae:	22 95       	swap	r18
    e2b0:	26 95       	lsr	r18
    e2b2:	26 95       	lsr	r18
    e2b4:	23 70       	andi	r18, 0x03	; 3
    e2b6:	f4 e0       	ldi	r31, 0x04	; 4
    e2b8:	8f 9f       	mul	r24, r31
    e2ba:	c0 01       	movw	r24, r0
    e2bc:	11 24       	eor	r1, r1
    e2be:	82 0f       	add	r24, r18
    e2c0:	91 1d       	adc	r25, r1
    e2c2:	01 96       	adiw	r24, 0x01	; 1
    e2c4:	2f 81       	ldd	r18, Y+7	; 0x07
    e2c6:	23 70       	andi	r18, 0x03	; 3
    e2c8:	30 e0       	ldi	r19, 0x00	; 0
    e2ca:	32 2f       	mov	r19, r18
    e2cc:	22 27       	eor	r18, r18
    e2ce:	33 0f       	add	r19, r19
    e2d0:	33 0f       	add	r19, r19
    e2d2:	82 0f       	add	r24, r18
    e2d4:	93 1f       	adc	r25, r19
    e2d6:	a0 e0       	ldi	r26, 0x00	; 0
    e2d8:	b0 e0       	ldi	r27, 0x00	; 0
    e2da:	2e 81       	ldd	r18, Y+6	; 0x06
    e2dc:	32 2f       	mov	r19, r18
    e2de:	3f 70       	andi	r19, 0x0F	; 15
    e2e0:	2b 85       	ldd	r18, Y+11	; 0x0b
    e2e2:	22 1f       	adc	r18, r18
    e2e4:	22 27       	eor	r18, r18
    e2e6:	22 1f       	adc	r18, r18
    e2e8:	23 0f       	add	r18, r19
    e2ea:	43 70       	andi	r20, 0x03	; 3
    e2ec:	44 0f       	add	r20, r20
    e2ee:	42 0f       	add	r20, r18
    e2f0:	47 50       	subi	r20, 0x07	; 7
    e2f2:	04 c0       	rjmp	.+8      	; 0xe2fc <mmc_disk_ioctl+0x126>
    e2f4:	88 0f       	add	r24, r24
    e2f6:	99 1f       	adc	r25, r25
    e2f8:	aa 1f       	adc	r26, r26
    e2fa:	bb 1f       	adc	r27, r27
    e2fc:	4a 95       	dec	r20
    e2fe:	d2 f7       	brpl	.-12     	; 0xe2f4 <mmc_disk_ioctl+0x11e>
    e300:	71 c0       	rjmp	.+226    	; 0xe3e4 <mmc_disk_ioctl+0x20e>
    e302:	80 91 84 18 	lds	r24, 0x1884	; 0x801884 <CardType>
    e306:	40 e0       	ldi	r20, 0x00	; 0
    e308:	50 e0       	ldi	r21, 0x00	; 0
    e30a:	ba 01       	movw	r22, r20
    e30c:	82 ff       	sbrs	r24, 2
    e30e:	24 c0       	rjmp	.+72     	; 0xe358 <mmc_disk_ioctl+0x182>
    e310:	8d e8       	ldi	r24, 0x8D	; 141
    e312:	a9 dd       	rcall	.-1198   	; 0xde66 <send_cmd>
    e314:	81 11       	cpse	r24, r1
    e316:	da c1       	rjmp	.+948    	; 0xe6cc <mmc_disk_ioctl+0x4f6>
    e318:	8f ef       	ldi	r24, 0xFF	; 255
    e31a:	47 dd       	rcall	.-1394   	; 0xddaa <xchg_spi>
    e31c:	60 e1       	ldi	r22, 0x10	; 16
    e31e:	70 e0       	ldi	r23, 0x00	; 0
    e320:	ce 01       	movw	r24, r28
    e322:	01 96       	adiw	r24, 0x01	; 1
    e324:	4a dd       	rcall	.-1388   	; 0xddba <rcvr_datablock>
    e326:	89 2b       	or	r24, r25
    e328:	09 f4       	brne	.+2      	; 0xe32c <mmc_disk_ioctl+0x156>
    e32a:	d0 c1       	rjmp	.+928    	; 0xe6cc <mmc_disk_ioctl+0x4f6>
    e32c:	a0 e3       	ldi	r26, 0x30	; 48
    e32e:	fa 2e       	mov	r15, r26
    e330:	8f ef       	ldi	r24, 0xFF	; 255
    e332:	3b dd       	rcall	.-1418   	; 0xddaa <xchg_spi>
    e334:	fa 94       	dec	r15
    e336:	f1 10       	cpse	r15, r1
    e338:	fb cf       	rjmp	.-10     	; 0xe330 <mmc_disk_ioctl+0x15a>
    e33a:	2b 85       	ldd	r18, Y+11	; 0x0b
    e33c:	22 95       	swap	r18
    e33e:	2f 70       	andi	r18, 0x0F	; 15
    e340:	80 e1       	ldi	r24, 0x10	; 16
    e342:	90 e0       	ldi	r25, 0x00	; 0
    e344:	a0 e0       	ldi	r26, 0x00	; 0
    e346:	b0 e0       	ldi	r27, 0x00	; 0
    e348:	04 c0       	rjmp	.+8      	; 0xe352 <mmc_disk_ioctl+0x17c>
    e34a:	88 0f       	add	r24, r24
    e34c:	99 1f       	adc	r25, r25
    e34e:	aa 1f       	adc	r26, r26
    e350:	bb 1f       	adc	r27, r27
    e352:	2a 95       	dec	r18
    e354:	d2 f7       	brpl	.-12     	; 0xe34a <mmc_disk_ioctl+0x174>
    e356:	46 c0       	rjmp	.+140    	; 0xe3e4 <mmc_disk_ioctl+0x20e>
    e358:	89 e0       	ldi	r24, 0x09	; 9
    e35a:	85 dd       	rcall	.-1270   	; 0xde66 <send_cmd>
    e35c:	81 11       	cpse	r24, r1
    e35e:	b6 c1       	rjmp	.+876    	; 0xe6cc <mmc_disk_ioctl+0x4f6>
    e360:	60 e1       	ldi	r22, 0x10	; 16
    e362:	70 e0       	ldi	r23, 0x00	; 0
    e364:	ce 01       	movw	r24, r28
    e366:	01 96       	adiw	r24, 0x01	; 1
    e368:	28 dd       	rcall	.-1456   	; 0xddba <rcvr_datablock>
    e36a:	89 2b       	or	r24, r25
    e36c:	09 f4       	brne	.+2      	; 0xe370 <mmc_disk_ioctl+0x19a>
    e36e:	ae c1       	rjmp	.+860    	; 0xe6cc <mmc_disk_ioctl+0x4f6>
    e370:	90 91 84 18 	lds	r25, 0x1884	; 0x801884 <CardType>
    e374:	2b 85       	ldd	r18, Y+11	; 0x0b
    e376:	8c 85       	ldd	r24, Y+12	; 0x0c
    e378:	91 ff       	sbrs	r25, 1
    e37a:	16 c0       	rjmp	.+44     	; 0xe3a8 <mmc_disk_ioctl+0x1d2>
    e37c:	2f 73       	andi	r18, 0x3F	; 63
    e37e:	88 1f       	adc	r24, r24
    e380:	88 27       	eor	r24, r24
    e382:	88 1f       	adc	r24, r24
    e384:	90 e0       	ldi	r25, 0x00	; 0
    e386:	01 96       	adiw	r24, 0x01	; 1
    e388:	82 0f       	add	r24, r18
    e38a:	91 1d       	adc	r25, r1
    e38c:	82 0f       	add	r24, r18
    e38e:	91 1d       	adc	r25, r1
    e390:	2e 85       	ldd	r18, Y+14	; 0x0e
    e392:	22 95       	swap	r18
    e394:	26 95       	lsr	r18
    e396:	26 95       	lsr	r18
    e398:	23 70       	andi	r18, 0x03	; 3
    e39a:	21 50       	subi	r18, 0x01	; 1
    e39c:	02 c0       	rjmp	.+4      	; 0xe3a2 <mmc_disk_ioctl+0x1cc>
    e39e:	88 0f       	add	r24, r24
    e3a0:	99 1f       	adc	r25, r25
    e3a2:	2a 95       	dec	r18
    e3a4:	e2 f7       	brpl	.-8      	; 0xe39e <mmc_disk_ioctl+0x1c8>
    e3a6:	1c c0       	rjmp	.+56     	; 0xe3e0 <mmc_disk_ioctl+0x20a>
    e3a8:	38 2f       	mov	r19, r24
    e3aa:	33 70       	andi	r19, 0x03	; 3
    e3ac:	82 95       	swap	r24
    e3ae:	86 95       	lsr	r24
    e3b0:	87 70       	andi	r24, 0x07	; 7
    e3b2:	90 e0       	ldi	r25, 0x00	; 0
    e3b4:	f8 e0       	ldi	r31, 0x08	; 8
    e3b6:	3f 9f       	mul	r19, r31
    e3b8:	80 0d       	add	r24, r0
    e3ba:	91 1d       	adc	r25, r1
    e3bc:	11 24       	eor	r1, r1
    e3be:	01 96       	adiw	r24, 0x01	; 1
    e3c0:	2c 77       	andi	r18, 0x7C	; 124
    e3c2:	30 e0       	ldi	r19, 0x00	; 0
    e3c4:	35 95       	asr	r19
    e3c6:	27 95       	ror	r18
    e3c8:	35 95       	asr	r19
    e3ca:	27 95       	ror	r18
    e3cc:	2f 5f       	subi	r18, 0xFF	; 255
    e3ce:	3f 4f       	sbci	r19, 0xFF	; 255
    e3d0:	82 9f       	mul	r24, r18
    e3d2:	a0 01       	movw	r20, r0
    e3d4:	83 9f       	mul	r24, r19
    e3d6:	50 0d       	add	r21, r0
    e3d8:	92 9f       	mul	r25, r18
    e3da:	50 0d       	add	r21, r0
    e3dc:	11 24       	eor	r1, r1
    e3de:	ca 01       	movw	r24, r20
    e3e0:	a0 e0       	ldi	r26, 0x00	; 0
    e3e2:	b0 e0       	ldi	r27, 0x00	; 0
    e3e4:	f8 01       	movw	r30, r16
    e3e6:	80 83       	st	Z, r24
    e3e8:	91 83       	std	Z+1, r25	; 0x01
    e3ea:	a2 83       	std	Z+2, r26	; 0x02
    e3ec:	b3 83       	std	Z+3, r27	; 0x03
    e3ee:	00 e0       	ldi	r16, 0x00	; 0
    e3f0:	6e c1       	rjmp	.+732    	; 0xe6ce <mmc_disk_ioctl+0x4f8>
    e3f2:	80 91 84 18 	lds	r24, 0x1884	; 0x801884 <CardType>
    e3f6:	86 70       	andi	r24, 0x06	; 6
    e3f8:	11 f4       	brne	.+4      	; 0xe3fe <mmc_disk_ioctl+0x228>
    e3fa:	01 e0       	ldi	r16, 0x01	; 1
    e3fc:	6e c1       	rjmp	.+732    	; 0xe6da <mmc_disk_ioctl+0x504>
    e3fe:	be 01       	movw	r22, r28
    e400:	6f 5f       	subi	r22, 0xFF	; 255
    e402:	7f 4f       	sbci	r23, 0xFF	; 255
    e404:	83 e3       	ldi	r24, 0x33	; 51
    e406:	e7 de       	rcall	.-562    	; 0xe1d6 <mmc_disk_ioctl>
    e408:	89 2b       	or	r24, r25
    e40a:	b9 f7       	brne	.-18     	; 0xe3fa <mmc_disk_ioctl+0x224>
    e40c:	89 81       	ldd	r24, Y+1	; 0x01
    e40e:	82 95       	swap	r24
    e410:	86 95       	lsr	r24
    e412:	86 95       	lsr	r24
    e414:	83 70       	andi	r24, 0x03	; 3
    e416:	19 f4       	brne	.+6      	; 0xe41e <mmc_disk_ioctl+0x248>
    e418:	8b 85       	ldd	r24, Y+11	; 0x0b
    e41a:	86 ff       	sbrs	r24, 6
    e41c:	ee cf       	rjmp	.-36     	; 0xe3fa <mmc_disk_ioctl+0x224>
    e41e:	f8 01       	movw	r30, r16
    e420:	40 81       	ld	r20, Z
    e422:	51 81       	ldd	r21, Z+1	; 0x01
    e424:	62 81       	ldd	r22, Z+2	; 0x02
    e426:	73 81       	ldd	r23, Z+3	; 0x03
    e428:	c4 80       	ldd	r12, Z+4	; 0x04
    e42a:	d5 80       	ldd	r13, Z+5	; 0x05
    e42c:	e6 80       	ldd	r14, Z+6	; 0x06
    e42e:	f7 80       	ldd	r15, Z+7	; 0x07
    e430:	80 91 84 18 	lds	r24, 0x1884	; 0x801884 <CardType>
    e434:	83 fd       	sbrc	r24, 3
    e436:	0e c0       	rjmp	.+28     	; 0xe454 <mmc_disk_ioctl+0x27e>
    e438:	39 e0       	ldi	r19, 0x09	; 9
    e43a:	44 0f       	add	r20, r20
    e43c:	55 1f       	adc	r21, r21
    e43e:	66 1f       	adc	r22, r22
    e440:	77 1f       	adc	r23, r23
    e442:	3a 95       	dec	r19
    e444:	d1 f7       	brne	.-12     	; 0xe43a <mmc_disk_ioctl+0x264>
    e446:	e9 e0       	ldi	r30, 0x09	; 9
    e448:	cc 0c       	add	r12, r12
    e44a:	dd 1c       	adc	r13, r13
    e44c:	ee 1c       	adc	r14, r14
    e44e:	ff 1c       	adc	r15, r15
    e450:	ea 95       	dec	r30
    e452:	d1 f7       	brne	.-12     	; 0xe448 <mmc_disk_ioctl+0x272>
    e454:	80 e2       	ldi	r24, 0x20	; 32
    e456:	07 dd       	rcall	.-1522   	; 0xde66 <send_cmd>
    e458:	81 11       	cpse	r24, r1
    e45a:	38 c1       	rjmp	.+624    	; 0xe6cc <mmc_disk_ioctl+0x4f6>
    e45c:	b7 01       	movw	r22, r14
    e45e:	a6 01       	movw	r20, r12
    e460:	81 e2       	ldi	r24, 0x21	; 33
    e462:	01 dd       	rcall	.-1534   	; 0xde66 <send_cmd>
    e464:	81 11       	cpse	r24, r1
    e466:	32 c1       	rjmp	.+612    	; 0xe6cc <mmc_disk_ioctl+0x4f6>
    e468:	40 e0       	ldi	r20, 0x00	; 0
    e46a:	50 e0       	ldi	r21, 0x00	; 0
    e46c:	ba 01       	movw	r22, r20
    e46e:	86 e2       	ldi	r24, 0x26	; 38
    e470:	fa dc       	rcall	.-1548   	; 0xde66 <send_cmd>
    e472:	81 11       	cpse	r24, r1
    e474:	2b c1       	rjmp	.+598    	; 0xe6cc <mmc_disk_ioctl+0x4f6>
    e476:	80 e3       	ldi	r24, 0x30	; 48
    e478:	95 e7       	ldi	r25, 0x75	; 117
    e47a:	c6 dc       	rcall	.-1652   	; 0xde08 <wait_ready>
    e47c:	35 c0       	rjmp	.+106    	; 0xe4e8 <mmc_disk_ioctl+0x312>
    e47e:	80 91 84 18 	lds	r24, 0x1884	; 0x801884 <CardType>
    e482:	fb 01       	movw	r30, r22
    e484:	80 83       	st	Z, r24
    e486:	3c c0       	rjmp	.+120    	; 0xe500 <mmc_disk_ioctl+0x32a>
    e488:	40 e0       	ldi	r20, 0x00	; 0
    e48a:	50 e0       	ldi	r21, 0x00	; 0
    e48c:	ba 01       	movw	r22, r20
    e48e:	89 e0       	ldi	r24, 0x09	; 9
    e490:	04 c0       	rjmp	.+8      	; 0xe49a <mmc_disk_ioctl+0x2c4>
    e492:	40 e0       	ldi	r20, 0x00	; 0
    e494:	50 e0       	ldi	r21, 0x00	; 0
    e496:	ba 01       	movw	r22, r20
    e498:	8a e0       	ldi	r24, 0x0A	; 10
    e49a:	e5 dc       	rcall	.-1590   	; 0xde66 <send_cmd>
    e49c:	81 11       	cpse	r24, r1
    e49e:	16 c1       	rjmp	.+556    	; 0xe6cc <mmc_disk_ioctl+0x4f6>
    e4a0:	60 e1       	ldi	r22, 0x10	; 16
    e4a2:	70 e0       	ldi	r23, 0x00	; 0
    e4a4:	1f c0       	rjmp	.+62     	; 0xe4e4 <mmc_disk_ioctl+0x30e>
    e4a6:	40 e0       	ldi	r20, 0x00	; 0
    e4a8:	50 e0       	ldi	r21, 0x00	; 0
    e4aa:	ba 01       	movw	r22, r20
    e4ac:	8a e3       	ldi	r24, 0x3A	; 58
    e4ae:	db dc       	rcall	.-1610   	; 0xde66 <send_cmd>
    e4b0:	81 11       	cpse	r24, r1
    e4b2:	0c c1       	rjmp	.+536    	; 0xe6cc <mmc_disk_ioctl+0x4f6>
    e4b4:	78 01       	movw	r14, r16
    e4b6:	f4 e0       	ldi	r31, 0x04	; 4
    e4b8:	ef 0e       	add	r14, r31
    e4ba:	f1 1c       	adc	r15, r1
    e4bc:	8f ef       	ldi	r24, 0xFF	; 255
    e4be:	8d d1       	rcall	.+794    	; 0xe7da <mmc_spi_TXRX>
    e4c0:	f8 01       	movw	r30, r16
    e4c2:	81 93       	st	Z+, r24
    e4c4:	8f 01       	movw	r16, r30
    e4c6:	ee 15       	cp	r30, r14
    e4c8:	ff 05       	cpc	r31, r15
    e4ca:	c1 f7       	brne	.-16     	; 0xe4bc <mmc_disk_ioctl+0x2e6>
    e4cc:	90 cf       	rjmp	.-224    	; 0xe3ee <mmc_disk_ioctl+0x218>
    e4ce:	40 e0       	ldi	r20, 0x00	; 0
    e4d0:	50 e0       	ldi	r21, 0x00	; 0
    e4d2:	ba 01       	movw	r22, r20
    e4d4:	8d e8       	ldi	r24, 0x8D	; 141
    e4d6:	c7 dc       	rcall	.-1650   	; 0xde66 <send_cmd>
    e4d8:	81 11       	cpse	r24, r1
    e4da:	f8 c0       	rjmp	.+496    	; 0xe6cc <mmc_disk_ioctl+0x4f6>
    e4dc:	8f ef       	ldi	r24, 0xFF	; 255
    e4de:	65 dc       	rcall	.-1846   	; 0xddaa <xchg_spi>
    e4e0:	60 e4       	ldi	r22, 0x40	; 64
    e4e2:	70 e0       	ldi	r23, 0x00	; 0
    e4e4:	c8 01       	movw	r24, r16
    e4e6:	69 dc       	rcall	.-1838   	; 0xddba <rcvr_datablock>
    e4e8:	01 e0       	ldi	r16, 0x01	; 1
    e4ea:	10 e0       	ldi	r17, 0x00	; 0
    e4ec:	89 2b       	or	r24, r25
    e4ee:	09 f4       	brne	.+2      	; 0xe4f2 <mmc_disk_ioctl+0x31c>
    e4f0:	ef c0       	rjmp	.+478    	; 0xe6d0 <mmc_disk_ioctl+0x4fa>
    e4f2:	ea c0       	rjmp	.+468    	; 0xe6c8 <mmc_disk_ioctl+0x4f2>
    e4f4:	40 d2       	rcall	.+1152   	; 0xe976 <mmc_power_off>
    e4f6:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e4fa:	81 60       	ori	r24, 0x01	; 1
    e4fc:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Stat>
    e500:	00 e0       	ldi	r16, 0x00	; 0
    e502:	eb c0       	rjmp	.+470    	; 0xe6da <mmc_disk_ioctl+0x504>
    e504:	fb 01       	movw	r30, r22
    e506:	43 81       	ldd	r20, Z+3	; 0x03
    e508:	54 81       	ldd	r21, Z+4	; 0x04
    e50a:	65 81       	ldd	r22, Z+5	; 0x05
    e50c:	76 81       	ldd	r23, Z+6	; 0x06
    e50e:	39 e0       	ldi	r19, 0x09	; 9
    e510:	44 0f       	add	r20, r20
    e512:	55 1f       	adc	r21, r21
    e514:	66 1f       	adc	r22, r22
    e516:	77 1f       	adc	r23, r23
    e518:	3a 95       	dec	r19
    e51a:	d1 f7       	brne	.-12     	; 0xe510 <mmc_disk_ioctl+0x33a>
    e51c:	70 68       	ori	r23, 0x80	; 128
    e51e:	80 81       	ld	r24, Z
    e520:	90 e0       	ldi	r25, 0x00	; 0
    e522:	a0 e0       	ldi	r26, 0x00	; 0
    e524:	b0 e0       	ldi	r27, 0x00	; 0
    e526:	2c e1       	ldi	r18, 0x1C	; 28
    e528:	88 0f       	add	r24, r24
    e52a:	99 1f       	adc	r25, r25
    e52c:	aa 1f       	adc	r26, r26
    e52e:	bb 1f       	adc	r27, r27
    e530:	2a 95       	dec	r18
    e532:	d1 f7       	brne	.-12     	; 0xe528 <mmc_disk_ioctl+0x352>
    e534:	48 2b       	or	r20, r24
    e536:	59 2b       	or	r21, r25
    e538:	6a 2b       	or	r22, r26
    e53a:	7b 2b       	or	r23, r27
    e53c:	81 81       	ldd	r24, Z+1	; 0x01
    e53e:	92 81       	ldd	r25, Z+2	; 0x02
    e540:	01 97       	sbiw	r24, 0x01	; 1
    e542:	91 70       	andi	r25, 0x01	; 1
    e544:	a0 e0       	ldi	r26, 0x00	; 0
    e546:	b0 e0       	ldi	r27, 0x00	; 0
    e548:	48 2b       	or	r20, r24
    e54a:	59 2b       	or	r21, r25
    e54c:	6a 2b       	or	r22, r26
    e54e:	7b 2b       	or	r23, r27
    e550:	80 e3       	ldi	r24, 0x30	; 48
    e552:	89 dc       	rcall	.-1774   	; 0xde66 <send_cmd>
    e554:	81 11       	cpse	r24, r1
    e556:	ba c0       	rjmp	.+372    	; 0xe6cc <mmc_disk_ioctl+0x4f6>
    e558:	88 ee       	ldi	r24, 0xE8	; 232
    e55a:	93 e0       	ldi	r25, 0x03	; 3
    e55c:	41 d1       	rcall	.+642    	; 0xe7e0 <mmc_set_ms_timeout>
    e55e:	8f ef       	ldi	r24, 0xFF	; 255
    e560:	3c d1       	rcall	.+632    	; 0xe7da <mmc_spi_TXRX>
    e562:	8f 3f       	cpi	r24, 0xFF	; 255
    e564:	21 f4       	brne	.+8      	; 0xe56e <mmc_disk_ioctl+0x398>
    e566:	43 d1       	rcall	.+646    	; 0xe7ee <mmc_test_timeout>
    e568:	89 2b       	or	r24, r25
    e56a:	c9 f3       	breq	.-14     	; 0xe55e <mmc_disk_ioctl+0x388>
    e56c:	af c0       	rjmp	.+350    	; 0xe6cc <mmc_disk_ioctl+0x4f6>
    e56e:	8e 3f       	cpi	r24, 0xFE	; 254
    e570:	09 f0       	breq	.+2      	; 0xe574 <mmc_disk_ioctl+0x39e>
    e572:	ac c0       	rjmp	.+344    	; 0xe6cc <mmc_disk_ioctl+0x4f6>
    e574:	f8 01       	movw	r30, r16
    e576:	e7 80       	ldd	r14, Z+7	; 0x07
    e578:	f0 84       	ldd	r15, Z+8	; 0x08
    e57a:	c1 80       	ldd	r12, Z+1	; 0x01
    e57c:	d2 80       	ldd	r13, Z+2	; 0x02
    e57e:	ce 0c       	add	r12, r14
    e580:	df 1c       	adc	r13, r15
    e582:	ce 14       	cp	r12, r14
    e584:	df 04       	cpc	r13, r15
    e586:	31 f0       	breq	.+12     	; 0xe594 <mmc_disk_ioctl+0x3be>
    e588:	8f ef       	ldi	r24, 0xFF	; 255
    e58a:	27 d1       	rcall	.+590    	; 0xe7da <mmc_spi_TXRX>
    e58c:	f7 01       	movw	r30, r14
    e58e:	81 93       	st	Z+, r24
    e590:	7f 01       	movw	r14, r30
    e592:	f7 cf       	rjmp	.-18     	; 0xe582 <mmc_disk_ioctl+0x3ac>
    e594:	f8 01       	movw	r30, r16
    e596:	81 81       	ldd	r24, Z+1	; 0x01
    e598:	92 81       	ldd	r25, Z+2	; 0x02
    e59a:	02 e0       	ldi	r16, 0x02	; 2
    e59c:	12 e0       	ldi	r17, 0x02	; 2
    e59e:	08 1b       	sub	r16, r24
    e5a0:	19 0b       	sbc	r17, r25
    e5a2:	01 15       	cp	r16, r1
    e5a4:	11 05       	cpc	r17, r1
    e5a6:	09 f4       	brne	.+2      	; 0xe5aa <mmc_disk_ioctl+0x3d4>
    e5a8:	22 cf       	rjmp	.-444    	; 0xe3ee <mmc_disk_ioctl+0x218>
    e5aa:	8f ef       	ldi	r24, 0xFF	; 255
    e5ac:	fe db       	rcall	.-2052   	; 0xddaa <xchg_spi>
    e5ae:	01 50       	subi	r16, 0x01	; 1
    e5b0:	11 09       	sbc	r17, r1
    e5b2:	f7 cf       	rjmp	.-18     	; 0xe5a2 <mmc_disk_ioctl+0x3cc>
    e5b4:	fb 01       	movw	r30, r22
    e5b6:	43 81       	ldd	r20, Z+3	; 0x03
    e5b8:	54 81       	ldd	r21, Z+4	; 0x04
    e5ba:	65 81       	ldd	r22, Z+5	; 0x05
    e5bc:	76 81       	ldd	r23, Z+6	; 0x06
    e5be:	39 e0       	ldi	r19, 0x09	; 9
    e5c0:	44 0f       	add	r20, r20
    e5c2:	55 1f       	adc	r21, r21
    e5c4:	66 1f       	adc	r22, r22
    e5c6:	77 1f       	adc	r23, r23
    e5c8:	3a 95       	dec	r19
    e5ca:	d1 f7       	brne	.-12     	; 0xe5c0 <mmc_disk_ioctl+0x3ea>
    e5cc:	70 68       	ori	r23, 0x80	; 128
    e5ce:	80 81       	ld	r24, Z
    e5d0:	90 e0       	ldi	r25, 0x00	; 0
    e5d2:	a0 e0       	ldi	r26, 0x00	; 0
    e5d4:	b0 e0       	ldi	r27, 0x00	; 0
    e5d6:	2c e1       	ldi	r18, 0x1C	; 28
    e5d8:	88 0f       	add	r24, r24
    e5da:	99 1f       	adc	r25, r25
    e5dc:	aa 1f       	adc	r26, r26
    e5de:	bb 1f       	adc	r27, r27
    e5e0:	2a 95       	dec	r18
    e5e2:	d1 f7       	brne	.-12     	; 0xe5d8 <mmc_disk_ioctl+0x402>
    e5e4:	48 2b       	or	r20, r24
    e5e6:	59 2b       	or	r21, r25
    e5e8:	6a 2b       	or	r22, r26
    e5ea:	7b 2b       	or	r23, r27
    e5ec:	81 81       	ldd	r24, Z+1	; 0x01
    e5ee:	92 81       	ldd	r25, Z+2	; 0x02
    e5f0:	01 97       	sbiw	r24, 0x01	; 1
    e5f2:	91 70       	andi	r25, 0x01	; 1
    e5f4:	a0 e0       	ldi	r26, 0x00	; 0
    e5f6:	b0 e0       	ldi	r27, 0x00	; 0
    e5f8:	48 2b       	or	r20, r24
    e5fa:	59 2b       	or	r21, r25
    e5fc:	6a 2b       	or	r22, r26
    e5fe:	7b 2b       	or	r23, r27
    e600:	81 e3       	ldi	r24, 0x31	; 49
    e602:	31 dc       	rcall	.-1950   	; 0xde66 <send_cmd>
    e604:	81 11       	cpse	r24, r1
    e606:	62 c0       	rjmp	.+196    	; 0xe6cc <mmc_disk_ioctl+0x4f6>
    e608:	8f ef       	ldi	r24, 0xFF	; 255
    e60a:	cf db       	rcall	.-2146   	; 0xddaa <xchg_spi>
    e60c:	8e ef       	ldi	r24, 0xFE	; 254
    e60e:	cd db       	rcall	.-2150   	; 0xddaa <xchg_spi>
    e610:	f8 01       	movw	r30, r16
    e612:	e7 80       	ldd	r14, Z+7	; 0x07
    e614:	f0 84       	ldd	r15, Z+8	; 0x08
    e616:	c1 80       	ldd	r12, Z+1	; 0x01
    e618:	d2 80       	ldd	r13, Z+2	; 0x02
    e61a:	ce 0c       	add	r12, r14
    e61c:	df 1c       	adc	r13, r15
    e61e:	ec 14       	cp	r14, r12
    e620:	fd 04       	cpc	r15, r13
    e622:	29 f0       	breq	.+10     	; 0xe62e <mmc_disk_ioctl+0x458>
    e624:	f7 01       	movw	r30, r14
    e626:	81 91       	ld	r24, Z+
    e628:	7f 01       	movw	r14, r30
    e62a:	bf db       	rcall	.-2178   	; 0xddaa <xchg_spi>
    e62c:	f8 cf       	rjmp	.-16     	; 0xe61e <mmc_disk_ioctl+0x448>
    e62e:	f8 01       	movw	r30, r16
    e630:	81 81       	ldd	r24, Z+1	; 0x01
    e632:	92 81       	ldd	r25, Z+2	; 0x02
    e634:	02 e0       	ldi	r16, 0x02	; 2
    e636:	12 e0       	ldi	r17, 0x02	; 2
    e638:	08 1b       	sub	r16, r24
    e63a:	19 0b       	sbc	r17, r25
    e63c:	8f ef       	ldi	r24, 0xFF	; 255
    e63e:	01 15       	cp	r16, r1
    e640:	11 05       	cpc	r17, r1
    e642:	09 f4       	brne	.+2      	; 0xe646 <mmc_disk_ioctl+0x470>
    e644:	3b c0       	rjmp	.+118    	; 0xe6bc <mmc_disk_ioctl+0x4e6>
    e646:	b1 db       	rcall	.-2206   	; 0xddaa <xchg_spi>
    e648:	01 50       	subi	r16, 0x01	; 1
    e64a:	11 09       	sbc	r17, r1
    e64c:	f7 cf       	rjmp	.-18     	; 0xe63c <mmc_disk_ioctl+0x466>
    e64e:	fb 01       	movw	r30, r22
    e650:	43 81       	ldd	r20, Z+3	; 0x03
    e652:	54 81       	ldd	r21, Z+4	; 0x04
    e654:	65 81       	ldd	r22, Z+5	; 0x05
    e656:	76 81       	ldd	r23, Z+6	; 0x06
    e658:	89 e0       	ldi	r24, 0x09	; 9
    e65a:	44 0f       	add	r20, r20
    e65c:	55 1f       	adc	r21, r21
    e65e:	66 1f       	adc	r22, r22
    e660:	77 1f       	adc	r23, r23
    e662:	8a 95       	dec	r24
    e664:	d1 f7       	brne	.-12     	; 0xe65a <mmc_disk_ioctl+0x484>
    e666:	74 68       	ori	r23, 0x84	; 132
    e668:	80 81       	ld	r24, Z
    e66a:	90 e0       	ldi	r25, 0x00	; 0
    e66c:	a0 e0       	ldi	r26, 0x00	; 0
    e66e:	b0 e0       	ldi	r27, 0x00	; 0
    e670:	2c e1       	ldi	r18, 0x1C	; 28
    e672:	88 0f       	add	r24, r24
    e674:	99 1f       	adc	r25, r25
    e676:	aa 1f       	adc	r26, r26
    e678:	bb 1f       	adc	r27, r27
    e67a:	2a 95       	dec	r18
    e67c:	d1 f7       	brne	.-12     	; 0xe672 <mmc_disk_ioctl+0x49c>
    e67e:	48 2b       	or	r20, r24
    e680:	59 2b       	or	r21, r25
    e682:	6a 2b       	or	r22, r26
    e684:	7b 2b       	or	r23, r27
    e686:	82 81       	ldd	r24, Z+2	; 0x02
    e688:	90 e0       	ldi	r25, 0x00	; 0
    e68a:	a0 e0       	ldi	r26, 0x00	; 0
    e68c:	b0 e0       	ldi	r27, 0x00	; 0
    e68e:	48 2b       	or	r20, r24
    e690:	59 2b       	or	r21, r25
    e692:	6a 2b       	or	r22, r26
    e694:	7b 2b       	or	r23, r27
    e696:	81 e3       	ldi	r24, 0x31	; 49
    e698:	e6 db       	rcall	.-2100   	; 0xde66 <send_cmd>
    e69a:	81 11       	cpse	r24, r1
    e69c:	17 c0       	rjmp	.+46     	; 0xe6cc <mmc_disk_ioctl+0x4f6>
    e69e:	8f ef       	ldi	r24, 0xFF	; 255
    e6a0:	84 db       	rcall	.-2296   	; 0xddaa <xchg_spi>
    e6a2:	8e ef       	ldi	r24, 0xFE	; 254
    e6a4:	82 db       	rcall	.-2300   	; 0xddaa <xchg_spi>
    e6a6:	f8 01       	movw	r30, r16
    e6a8:	81 81       	ldd	r24, Z+1	; 0x01
    e6aa:	7f db       	rcall	.-2306   	; 0xddaa <xchg_spi>
    e6ac:	01 e0       	ldi	r16, 0x01	; 1
    e6ae:	12 e0       	ldi	r17, 0x02	; 2
    e6b0:	8f ef       	ldi	r24, 0xFF	; 255
    e6b2:	7b db       	rcall	.-2314   	; 0xddaa <xchg_spi>
    e6b4:	01 50       	subi	r16, 0x01	; 1
    e6b6:	11 09       	sbc	r17, r1
    e6b8:	d9 f7       	brne	.-10     	; 0xe6b0 <mmc_disk_ioctl+0x4da>
    e6ba:	8f ef       	ldi	r24, 0xFF	; 255
    e6bc:	8e d0       	rcall	.+284    	; 0xe7da <mmc_spi_TXRX>
    e6be:	8f 71       	andi	r24, 0x1F	; 31
    e6c0:	01 e0       	ldi	r16, 0x01	; 1
    e6c2:	10 e0       	ldi	r17, 0x00	; 0
    e6c4:	85 30       	cpi	r24, 0x05	; 5
    e6c6:	21 f4       	brne	.+8      	; 0xe6d0 <mmc_disk_ioctl+0x4fa>
    e6c8:	00 e0       	ldi	r16, 0x00	; 0
    e6ca:	02 c0       	rjmp	.+4      	; 0xe6d0 <mmc_disk_ioctl+0x4fa>
    e6cc:	01 e0       	ldi	r16, 0x01	; 1
    e6ce:	10 e0       	ldi	r17, 0x00	; 0
    e6d0:	6e db       	rcall	.-2340   	; 0xddae <deselect>
    e6d2:	04 c0       	rjmp	.+8      	; 0xe6dc <mmc_disk_ioctl+0x506>
    e6d4:	03 e0       	ldi	r16, 0x03	; 3
    e6d6:	01 c0       	rjmp	.+2      	; 0xe6da <mmc_disk_ioctl+0x504>
    e6d8:	04 e0       	ldi	r16, 0x04	; 4
    e6da:	10 e0       	ldi	r17, 0x00	; 0
    e6dc:	c8 01       	movw	r24, r16
    e6de:	60 96       	adiw	r28, 0x10	; 16
    e6e0:	e8 e0       	ldi	r30, 0x08	; 8
    e6e2:	0c 94 5a ec 	jmp	0x1d8b4	; 0x1d8b4 <__epilogue_restores__+0x14>

0000e6e6 <mmc_disk_timerproc>:
    e6e6:	80 91 86 18 	lds	r24, 0x1886	; 0x801886 <Timer1>
    e6ea:	88 23       	and	r24, r24
    e6ec:	19 f0       	breq	.+6      	; 0xe6f4 <mmc_disk_timerproc+0xe>
    e6ee:	81 50       	subi	r24, 0x01	; 1
    e6f0:	80 93 86 18 	sts	0x1886, r24	; 0x801886 <Timer1>
    e6f4:	80 91 85 18 	lds	r24, 0x1885	; 0x801885 <Timer2>
    e6f8:	88 23       	and	r24, r24
    e6fa:	19 f0       	breq	.+6      	; 0xe702 <mmc_disk_timerproc+0x1c>
    e6fc:	81 50       	subi	r24, 0x01	; 1
    e6fe:	80 93 85 18 	sts	0x1885, r24	; 0x801885 <Timer2>
    e702:	08 95       	ret

0000e704 <mmc_task>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    e704:	80 91 8d 18 	lds	r24, 0x188D	; 0x80188d <_mmc_timeout>
    e708:	90 91 8e 18 	lds	r25, 0x188E	; 0x80188e <_mmc_timeout+0x1>
    e70c:	00 97       	sbiw	r24, 0x00	; 0
    e70e:	29 f0       	breq	.+10     	; 0xe71a <mmc_task+0x16>
    e710:	01 97       	sbiw	r24, 0x01	; 1
    e712:	90 93 8e 18 	sts	0x188E, r25	; 0x80188e <_mmc_timeout+0x1>
    e716:	80 93 8d 18 	sts	0x188D, r24	; 0x80188d <_mmc_timeout>
    e71a:	80 91 87 18 	lds	r24, 0x1887	; 0x801887 <_mmc_pre>
    e71e:	90 91 88 18 	lds	r25, 0x1888	; 0x801888 <_mmc_pre+0x1>
    e722:	8a 30       	cpi	r24, 0x0A	; 10
    e724:	91 05       	cpc	r25, r1
    e726:	30 f4       	brcc	.+12     	; 0xe734 <mmc_task+0x30>
    e728:	01 96       	adiw	r24, 0x01	; 1
    e72a:	90 93 88 18 	sts	0x1888, r25	; 0x801888 <_mmc_pre+0x1>
    e72e:	80 93 87 18 	sts	0x1887, r24	; 0x801887 <_mmc_pre>
    e732:	08 95       	ret
    e734:	10 92 88 18 	sts	0x1888, r1	; 0x801888 <_mmc_pre+0x1>
    e738:	10 92 87 18 	sts	0x1887, r1	; 0x801887 <_mmc_pre>
    e73c:	d4 cf       	rjmp	.-88     	; 0xe6e6 <mmc_disk_timerproc>
    e73e:	08 95       	ret

0000e740 <mmc_install_timer>:
    e740:	10 92 8e 18 	sts	0x188E, r1	; 0x80188e <_mmc_timeout+0x1>
    e744:	10 92 8d 18 	sts	0x188D, r1	; 0x80188d <_mmc_timeout>
    e748:	61 e0       	ldi	r22, 0x01	; 1
    e74a:	70 e0       	ldi	r23, 0x00	; 0
    e74c:	82 e8       	ldi	r24, 0x82	; 130
    e74e:	93 e7       	ldi	r25, 0x73	; 115
    e750:	0e 94 4e 35 	call	0x6a9c	; 0x6a9c <set_timers>
    e754:	01 96       	adiw	r24, 0x01	; 1
    e756:	51 f4       	brne	.+20     	; 0xe76c <mmc_install_timer+0x2c>
    e758:	87 e4       	ldi	r24, 0x47	; 71
    e75a:	98 e0       	ldi	r25, 0x08	; 8
    e75c:	1f 92       	push	r1
    e75e:	9f 93       	push	r25
    e760:	8f 93       	push	r24
    e762:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    e766:	0f 90       	pop	r0
    e768:	0f 90       	pop	r0
    e76a:	0f 90       	pop	r0
    e76c:	08 95       	ret

0000e76e <mmc_spi_begin>:
    e76e:	60 91 89 18 	lds	r22, 0x1889	; 0x801889 <_mmc_clock>
    e772:	70 91 8a 18 	lds	r23, 0x188A	; 0x80188a <_mmc_clock+0x1>
    e776:	80 91 8b 18 	lds	r24, 0x188B	; 0x80188b <_mmc_clock+0x2>
    e77a:	90 91 8c 18 	lds	r25, 0x188C	; 0x80188c <_mmc_clock+0x3>
    e77e:	4b e0       	ldi	r20, 0x0B	; 11
    e780:	50 e0       	ldi	r21, 0x00	; 0
    e782:	0c 94 0b 29 	jmp	0x5216	; 0x5216 <spi_begin>
    e786:	08 95       	ret

0000e788 <mmc_spi_end>:
    e788:	8b e0       	ldi	r24, 0x0B	; 11
    e78a:	0c 94 b5 28 	jmp	0x516a	; 0x516a <spi_end>
    e78e:	08 95       	ret

0000e790 <mmc_slow>:
    e790:	80 e2       	ldi	r24, 0x20	; 32
    e792:	91 ea       	ldi	r25, 0xA1	; 161
    e794:	a7 e0       	ldi	r26, 0x07	; 7
    e796:	b0 e0       	ldi	r27, 0x00	; 0
    e798:	80 93 89 18 	sts	0x1889, r24	; 0x801889 <_mmc_clock>
    e79c:	90 93 8a 18 	sts	0x188A, r25	; 0x80188a <_mmc_clock+0x1>
    e7a0:	a0 93 8b 18 	sts	0x188B, r26	; 0x80188b <_mmc_clock+0x2>
    e7a4:	b0 93 8c 18 	sts	0x188C, r27	; 0x80188c <_mmc_clock+0x3>
    e7a8:	08 95       	ret

0000e7aa <mmc_spi_init>:
    e7aa:	8b e0       	ldi	r24, 0x0B	; 11
    e7ac:	0e 94 b3 28 	call	0x5166	; 0x5166 <chip_select_init>
    e7b0:	ef cf       	rjmp	.-34     	; 0xe790 <mmc_slow>
    e7b2:	08 95       	ret

0000e7b4 <mmc_fast>:
    e7b4:	80 ea       	ldi	r24, 0xA0	; 160
    e7b6:	95 e2       	ldi	r25, 0x25	; 37
    e7b8:	a6 e2       	ldi	r26, 0x26	; 38
    e7ba:	b0 e0       	ldi	r27, 0x00	; 0
    e7bc:	80 93 89 18 	sts	0x1889, r24	; 0x801889 <_mmc_clock>
    e7c0:	90 93 8a 18 	sts	0x188A, r25	; 0x80188a <_mmc_clock+0x1>
    e7c4:	a0 93 8b 18 	sts	0x188B, r26	; 0x80188b <_mmc_clock+0x2>
    e7c8:	b0 93 8c 18 	sts	0x188C, r27	; 0x80188c <_mmc_clock+0x3>
    e7cc:	08 95       	ret

0000e7ce <mmc_spi_TX_buffer>:
    e7ce:	0c 94 d7 28 	jmp	0x51ae	; 0x51ae <spi_TX_buffer>
    e7d2:	08 95       	ret

0000e7d4 <mmc_spi_RX_buffer>:
    e7d4:	0c 94 d9 28 	jmp	0x51b2	; 0x51b2 <spi_RX_buffer>
    e7d8:	08 95       	ret

0000e7da <mmc_spi_TXRX>:
    e7da:	0c 94 47 29 	jmp	0x528e	; 0x528e <spi_TXRX>
    e7de:	08 95       	ret

0000e7e0 <mmc_set_ms_timeout>:
    e7e0:	f8 94       	cli
    e7e2:	90 93 8e 18 	sts	0x188E, r25	; 0x80188e <_mmc_timeout+0x1>
    e7e6:	80 93 8d 18 	sts	0x188D, r24	; 0x80188d <_mmc_timeout>
    e7ea:	78 94       	sei
    e7ec:	08 95       	ret

0000e7ee <mmc_test_timeout>:
    e7ee:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e7f2:	81 fd       	sbrc	r24, 1
    e7f4:	15 c0       	rjmp	.+42     	; 0xe820 <mmc_test_timeout+0x32>
    e7f6:	80 91 8d 18 	lds	r24, 0x188D	; 0x80188d <_mmc_timeout>
    e7fa:	90 91 8e 18 	lds	r25, 0x188E	; 0x80188e <_mmc_timeout+0x1>
    e7fe:	89 2b       	or	r24, r25
    e800:	91 f4       	brne	.+36     	; 0xe826 <mmc_test_timeout+0x38>
    e802:	8a e3       	ldi	r24, 0x3A	; 58
    e804:	98 e0       	ldi	r25, 0x08	; 8
    e806:	1f 92       	push	r1
    e808:	9f 93       	push	r25
    e80a:	8f 93       	push	r24
    e80c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    e810:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <Stat>
    e814:	83 60       	ori	r24, 0x03	; 3
    e816:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <Stat>
    e81a:	0f 90       	pop	r0
    e81c:	0f 90       	pop	r0
    e81e:	0f 90       	pop	r0
    e820:	81 e0       	ldi	r24, 0x01	; 1
    e822:	90 e0       	ldi	r25, 0x00	; 0
    e824:	08 95       	ret
    e826:	80 e0       	ldi	r24, 0x00	; 0
    e828:	90 e0       	ldi	r25, 0x00	; 0
    e82a:	08 95       	ret

0000e82c <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    e82c:	a4 e0       	ldi	r26, 0x04	; 4
    e82e:	b0 e0       	ldi	r27, 0x00	; 0
    e830:	ec e1       	ldi	r30, 0x1C	; 28
    e832:	f4 e7       	ldi	r31, 0x74	; 116
    e834:	0c 94 40 ec 	jmp	0x1d880	; 0x1d880 <__prologue_saves__+0x18>
    e838:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    e83a:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <Stat>

    mmc_spi_init();

    if( verbose)
    e83e:	b5 df       	rcall	.-150    	; 0xe7aa <mmc_spi_init>
    e840:	e1 14       	cp	r14, r1
    e842:	f1 04       	cpc	r15, r1
    {
        printf("START MMC INIT\n");
    e844:	51 f0       	breq	.+20     	; 0xe85a <mmc_init+0x2e>
    e846:	8a e2       	ldi	r24, 0x2A	; 42
    e848:	98 e0       	ldi	r25, 0x08	; 8
    e84a:	1f 92       	push	r1
    e84c:	9f 93       	push	r25
    e84e:	8f 93       	push	r24
    e850:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    e854:	0f 90       	pop	r0
    e856:	0f 90       	pop	r0
    }
    // we only install timers once!
    if(!mmc_init_flag)
    e858:	0f 90       	pop	r0
    e85a:	80 91 8f 18 	lds	r24, 0x188F	; 0x80188f <mmc_init_flag>
    e85e:	90 91 90 18 	lds	r25, 0x1890	; 0x801890 <mmc_init_flag+0x1>
        mmc_install_timer();
    e862:	89 2b       	or	r24, r25
    e864:	09 f4       	brne	.+2      	; 0xe868 <mmc_init+0x3c>

    if( verbose)
    e866:	6c df       	rcall	.-296    	; 0xe740 <mmc_install_timer>
    e868:	e1 14       	cp	r14, r1
    e86a:	f1 04       	cpc	r15, r1
    {
#if defined (_USE_LFN)
        printf("LFN Enabled");
    e86c:	b9 f0       	breq	.+46     	; 0xe89c <mmc_init+0x70>
    e86e:	8e e1       	ldi	r24, 0x1E	; 30
    e870:	98 e0       	ldi	r25, 0x08	; 8
    e872:	1f 92       	push	r1
    e874:	9f 93       	push	r25
    e876:	8f 93       	push	r24
    e878:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", _CODE_PAGE);
    e87c:	81 e0       	ldi	r24, 0x01	; 1
    e87e:	8f 93       	push	r24
    e880:	85 eb       	ldi	r24, 0xB5	; 181
    e882:	8f 93       	push	r24
    e884:	8d e0       	ldi	r24, 0x0D	; 13
    e886:	98 e0       	ldi	r25, 0x08	; 8
    e888:	1f 92       	push	r1
    e88a:	9f 93       	push	r25
    e88c:	8f 93       	push	r24
    e88e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    e892:	0f b6       	in	r0, 0x3f	; 63
    e894:	f8 94       	cli
    e896:	de bf       	out	0x3e, r29	; 62
    }

    rc = disk_initialize(0);    // aliased to mmc_disk_initialize()
    e898:	0f be       	out	0x3f, r0	; 63
    e89a:	cd bf       	out	0x3d, r28	; 61
    e89c:	80 e0       	ldi	r24, 0x00	; 0
    e89e:	55 da       	rcall	.-2902   	; 0xdd4a <disk_initialize>
    e8a0:	08 2f       	mov	r16, r24

    if( rc != RES_OK  || verbose )
    e8a2:	10 e0       	ldi	r17, 0x00	; 0
    e8a4:	01 15       	cp	r16, r1
    e8a6:	11 05       	cpc	r17, r1
    e8a8:	71 f4       	brne	.+28     	; 0xe8c6 <mmc_init+0x9a>
    e8aa:	e1 14       	cp	r14, r1
    e8ac:	f1 04       	cpc	r15, r1
        put_rc(rc);
    }

    if( rc == RES_OK)
    {
        rc = f_mount(&Fatfs[0],"/", 0);
    e8ae:	59 f4       	brne	.+22     	; 0xe8c6 <mmc_init+0x9a>
    e8b0:	40 e0       	ldi	r20, 0x00	; 0
    e8b2:	66 e6       	ldi	r22, 0x66	; 102
    e8b4:	78 e0       	ldi	r23, 0x08	; 8
    e8b6:	8b ed       	ldi	r24, 0xDB	; 219
    e8b8:	9a e1       	ldi	r25, 0x1A	; 26
    e8ba:	0e 94 77 58 	call	0xb0ee	; 0xb0ee <f_mount>
    }

    if( rc != RES_OK || verbose)
    e8be:	8c 01       	movw	r16, r24
    e8c0:	89 2b       	or	r24, r25

    rc = disk_initialize(0);    // aliased to mmc_disk_initialize()

    if( rc != RES_OK  || verbose )
    {
        put_rc(rc);
    e8c2:	39 f0       	breq	.+14     	; 0xe8d2 <mmc_init+0xa6>
    e8c4:	0a c0       	rjmp	.+20     	; 0xe8da <mmc_init+0xae>
    e8c6:	c8 01       	movw	r24, r16
    }

    if( rc == RES_OK)
    e8c8:	dc d0       	rcall	.+440    	; 0xea82 <put_rc>
    e8ca:	01 15       	cp	r16, r1
    e8cc:	11 05       	cpc	r17, r1
    e8ce:	29 f4       	brne	.+10     	; 0xe8da <mmc_init+0xae>
    {
        rc = f_mount(&Fatfs[0],"/", 0);
    }

    if( rc != RES_OK || verbose)
    e8d0:	ef cf       	rjmp	.-34     	; 0xe8b0 <mmc_init+0x84>
    e8d2:	e1 14       	cp	r14, r1
    e8d4:	f1 04       	cpc	r15, r1
    {
        put_rc( rc );
    e8d6:	09 f4       	brne	.+2      	; 0xe8da <mmc_init+0xae>
    e8d8:	43 c0       	rjmp	.+134    	; 0xe960 <mmc_init+0x134>
    e8da:	c8 01       	movw	r24, r16
    }

    if (verbose )
    e8dc:	d2 d0       	rcall	.+420    	; 0xea82 <put_rc>
    e8de:	e1 14       	cp	r14, r1
    e8e0:	f1 04       	cpc	r15, r1
    e8e2:	09 f4       	brne	.+2      	; 0xe8e6 <mmc_init+0xba>
    {
        DWORD blksize = 0;
    e8e4:	3d c0       	rjmp	.+122    	; 0xe960 <mmc_init+0x134>
    e8e6:	19 82       	std	Y+1, r1	; 0x01
    e8e8:	1a 82       	std	Y+2, r1	; 0x02
    e8ea:	1b 82       	std	Y+3, r1	; 0x03
        if(rc == RES_OK)
    e8ec:	1c 82       	std	Y+4, r1	; 0x04
    e8ee:	01 15       	cp	r16, r1
        {
            rc = disk_ioctl ( 0, GET_BLOCK_SIZE, (void *) &blksize);
    e8f0:	11 05       	cpc	r17, r1
    e8f2:	61 f5       	brne	.+88     	; 0xe94c <mmc_init+0x120>
    e8f4:	ae 01       	movw	r20, r28
    e8f6:	4f 5f       	subi	r20, 0xFF	; 255
    e8f8:	5f 4f       	sbci	r21, 0xFF	; 255
    e8fa:	63 e0       	ldi	r22, 0x03	; 3
            if( rc != RES_OK)
    e8fc:	80 e0       	ldi	r24, 0x00	; 0
    e8fe:	4b da       	rcall	.-2922   	; 0xdd96 <disk_ioctl>
            {
                put_rc( rc );
    e900:	8c 01       	movw	r16, r24
    e902:	00 97       	sbiw	r24, 0x00	; 0
                printf("MMC Block Size - read failed\n");
    e904:	61 f0       	breq	.+24     	; 0xe91e <mmc_init+0xf2>
    e906:	bd d0       	rcall	.+378    	; 0xea82 <put_rc>
    e908:	8f ee       	ldi	r24, 0xEF	; 239
    e90a:	97 e0       	ldi	r25, 0x07	; 7
    e90c:	1f 92       	push	r1
    e90e:	9f 93       	push	r25
    e910:	8f 93       	push	r24
    e912:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    e916:	0f 90       	pop	r0
    e918:	0f 90       	pop	r0
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    e91a:	0f 90       	pop	r0
    e91c:	17 c0       	rjmp	.+46     	; 0xe94c <mmc_init+0x120>
    e91e:	8c 81       	ldd	r24, Y+4	; 0x04
    e920:	8f 93       	push	r24
    e922:	8b 81       	ldd	r24, Y+3	; 0x03
    e924:	8f 93       	push	r24
    e926:	8a 81       	ldd	r24, Y+2	; 0x02
    e928:	8f 93       	push	r24
    e92a:	89 81       	ldd	r24, Y+1	; 0x01
    e92c:	8f 93       	push	r24
    e92e:	8a ed       	ldi	r24, 0xDA	; 218
    e930:	97 e0       	ldi	r25, 0x07	; 7
    e932:	1f 92       	push	r1
    e934:	9f 93       	push	r25
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    e936:	8f 93       	push	r24
    e938:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    e93c:	86 e6       	ldi	r24, 0x66	; 102
    e93e:	98 e0       	ldi	r25, 0x08	; 8
    e940:	2e d1       	rcall	.+604    	; 0xeb9e <fatfs_status>
    e942:	0f b6       	in	r0, 0x3f	; 63
    e944:	f8 94       	cli
    e946:	de bf       	out	0x3e, r29	; 62
            }
        }
        printf("END MMC INIT\n");
    e948:	0f be       	out	0x3f, r0	; 63
    e94a:	cd bf       	out	0x3d, r28	; 61
    e94c:	8c ec       	ldi	r24, 0xCC	; 204
    e94e:	97 e0       	ldi	r25, 0x07	; 7
    e950:	1f 92       	push	r1
    e952:	9f 93       	push	r25
    e954:	8f 93       	push	r24
    e956:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    e95a:	0f 90       	pop	r0
    }
    mmc_init_flag = 1;
    e95c:	0f 90       	pop	r0
    e95e:	0f 90       	pop	r0
    e960:	81 e0       	ldi	r24, 0x01	; 1
    e962:	90 e0       	ldi	r25, 0x00	; 0
    e964:	90 93 90 18 	sts	0x1890, r25	; 0x801890 <mmc_init_flag+0x1>

    return( rc ) ;
}
    e968:	80 93 8f 18 	sts	0x188F, r24	; 0x80188f <mmc_init_flag>
    e96c:	c8 01       	movw	r24, r16
    e96e:	24 96       	adiw	r28, 0x04	; 4
    e970:	e6 e0       	ldi	r30, 0x06	; 6
    e972:	0c 94 5c ec 	jmp	0x1d8b8	; 0x1d8b8 <__epilogue_restores__+0x18>

0000e976 <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    e976:	08 95       	ret

0000e978 <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
    return (1);
}
    e978:	81 e0       	ldi	r24, 0x01	; 1
    e97a:	90 e0       	ldi	r25, 0x00	; 0
    e97c:	08 95       	ret

0000e97e <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    e97e:	80 e0       	ldi	r24, 0x00	; 0
    e980:	90 e0       	ldi	r25, 0x00	; 0
    e982:	08 95       	ret

0000e984 <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    e984:	0f 93       	push	r16
    e986:	1f 93       	push	r17
    e988:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    e98a:	46 81       	ldd	r20, Z+6	; 0x06
    e98c:	57 81       	ldd	r21, Z+7	; 0x07
    e98e:	05 2e       	mov	r0, r21
    e990:	00 0c       	add	r0, r0
    e992:	66 0b       	sbc	r22, r22
    e994:	77 0b       	sbc	r23, r23
    e996:	ba 01       	movw	r22, r20
    e998:	55 27       	eor	r21, r21
    e99a:	44 27       	eor	r20, r20
    e99c:	84 81       	ldd	r24, Z+4	; 0x04
    e99e:	95 81       	ldd	r25, Z+5	; 0x05
    e9a0:	09 2e       	mov	r0, r25
    e9a2:	00 0c       	add	r0, r0
    e9a4:	aa 0b       	sbc	r26, r26
    e9a6:	bb 0b       	sbc	r27, r27
    e9a8:	2b e0       	ldi	r18, 0x0B	; 11
    e9aa:	88 0f       	add	r24, r24
    e9ac:	99 1f       	adc	r25, r25
    e9ae:	aa 1f       	adc	r26, r26
    e9b0:	bb 1f       	adc	r27, r27
    e9b2:	2a 95       	dec	r18
    e9b4:	d1 f7       	brne	.-12     	; 0xe9aa <tm_to_fat+0x26>
    e9b6:	48 2b       	or	r20, r24
    e9b8:	59 2b       	or	r21, r25
    e9ba:	6a 2b       	or	r22, r26
    e9bc:	7b 2b       	or	r23, r27
    e9be:	82 81       	ldd	r24, Z+2	; 0x02
    e9c0:	93 81       	ldd	r25, Z+3	; 0x03
    e9c2:	09 2e       	mov	r0, r25
    e9c4:	00 0c       	add	r0, r0
    e9c6:	aa 0b       	sbc	r26, r26
    e9c8:	bb 0b       	sbc	r27, r27
    e9ca:	35 e0       	ldi	r19, 0x05	; 5
    e9cc:	88 0f       	add	r24, r24
    e9ce:	99 1f       	adc	r25, r25
    e9d0:	aa 1f       	adc	r26, r26
    e9d2:	bb 1f       	adc	r27, r27
    e9d4:	3a 95       	dec	r19
    e9d6:	d1 f7       	brne	.-12     	; 0xe9cc <tm_to_fat+0x48>
    e9d8:	48 2b       	or	r20, r24
    e9da:	59 2b       	or	r21, r25
    e9dc:	6a 2b       	or	r22, r26
    e9de:	7b 2b       	or	r23, r27
    e9e0:	80 81       	ld	r24, Z
    e9e2:	91 81       	ldd	r25, Z+1	; 0x01
    e9e4:	09 2e       	mov	r0, r25
    e9e6:	00 0c       	add	r0, r0
    e9e8:	aa 0b       	sbc	r26, r26
    e9ea:	bb 0b       	sbc	r27, r27
    e9ec:	b6 95       	lsr	r27
    e9ee:	a7 95       	ror	r26
    e9f0:	97 95       	ror	r25
    e9f2:	87 95       	ror	r24
    e9f4:	84 2b       	or	r24, r20
    e9f6:	95 2b       	or	r25, r21
    e9f8:	a6 2b       	or	r26, r22
    e9fa:	b7 2b       	or	r27, r23
    e9fc:	02 85       	ldd	r16, Z+10	; 0x0a
    e9fe:	13 85       	ldd	r17, Z+11	; 0x0b
    ea00:	00 55       	subi	r16, 0x50	; 80
    ea02:	11 09       	sbc	r17, r1
    ea04:	01 2e       	mov	r0, r17
    ea06:	00 0c       	add	r0, r0
    ea08:	22 0b       	sbc	r18, r18
    ea0a:	33 0b       	sbc	r19, r19
    ea0c:	49 e1       	ldi	r20, 0x19	; 25
    ea0e:	00 0f       	add	r16, r16
    ea10:	11 1f       	adc	r17, r17
    ea12:	22 1f       	adc	r18, r18
    ea14:	33 1f       	adc	r19, r19
    ea16:	4a 95       	dec	r20
    ea18:	d1 f7       	brne	.-12     	; 0xea0e <tm_to_fat+0x8a>
    ea1a:	ac 01       	movw	r20, r24
    ea1c:	bd 01       	movw	r22, r26
    ea1e:	40 2b       	or	r20, r16
    ea20:	51 2b       	or	r21, r17
    ea22:	62 2b       	or	r22, r18
    ea24:	73 2b       	or	r23, r19
    ea26:	80 85       	ldd	r24, Z+8	; 0x08
    ea28:	91 85       	ldd	r25, Z+9	; 0x09
    ea2a:	09 2e       	mov	r0, r25
    ea2c:	00 0c       	add	r0, r0
    ea2e:	aa 0b       	sbc	r26, r26
    ea30:	bb 0b       	sbc	r27, r27
    ea32:	01 96       	adiw	r24, 0x01	; 1
    ea34:	a1 1d       	adc	r26, r1
    ea36:	b1 1d       	adc	r27, r1
    ea38:	e5 e1       	ldi	r30, 0x15	; 21
    ea3a:	88 0f       	add	r24, r24
    ea3c:	99 1f       	adc	r25, r25
    ea3e:	aa 1f       	adc	r26, r26
    ea40:	bb 1f       	adc	r27, r27
    ea42:	ea 95       	dec	r30
    ea44:	d1 f7       	brne	.-12     	; 0xea3a <tm_to_fat+0xb6>
    ea46:	8a 01       	movw	r16, r20
    ea48:	9b 01       	movw	r18, r22
    ea4a:	08 2b       	or	r16, r24
    ea4c:	19 2b       	or	r17, r25
    ea4e:	2a 2b       	or	r18, r26
    ea50:	3b 2b       	or	r19, r27
    ea52:	c9 01       	movw	r24, r18
    ea54:	b8 01       	movw	r22, r16
}
    ea56:	1f 91       	pop	r17
    ea58:	0f 91       	pop	r16
    ea5a:	08 95       	ret

0000ea5c <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    ea5c:	a4 e0       	ldi	r26, 0x04	; 4
    ea5e:	b0 e0       	ldi	r27, 0x00	; 0
    ea60:	e4 e3       	ldi	r30, 0x34	; 52
    ea62:	f5 e7       	ldi	r31, 0x75	; 117
    ea64:	0c 94 44 ec 	jmp	0x1d888	; 0x1d888 <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    ea68:	ce 01       	movw	r24, r28
    ea6a:	01 96       	adiw	r24, 0x01	; 1
    ea6c:	0e 94 89 38 	call	0x7112	; 0x7112 <time>
    return( tm_to_fat(localtime(&t)));
    ea70:	ce 01       	movw	r24, r28
    ea72:	01 96       	adiw	r24, 0x01	; 1
    ea74:	0e 94 22 39 	call	0x7244	; 0x7244 <localtime>
    ea78:	85 df       	rcall	.-246    	; 0xe984 <tm_to_fat>
}
    ea7a:	24 96       	adiw	r28, 0x04	; 4
    ea7c:	e2 e0       	ldi	r30, 0x02	; 2
    ea7e:	0c 94 60 ec 	jmp	0x1d8c0	; 0x1d8c0 <__epilogue_restores__+0x20>

0000ea82 <put_rc>:
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    ea82:	9f 93       	push	r25
    ea84:	8f 93       	push	r24
    ea86:	87 e5       	ldi	r24, 0x57	; 87
    ea88:	9a e0       	ldi	r25, 0x0A	; 10
    ea8a:	1f 92       	push	r1
    ea8c:	9f 93       	push	r25
    ea8e:	8f 93       	push	r24
    ea90:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
#endif
}
    ea94:	0f 90       	pop	r0
    ea96:	0f 90       	pop	r0
    ea98:	0f 90       	pop	r0
    ea9a:	0f 90       	pop	r0
    ea9c:	0f 90       	pop	r0
    ea9e:	08 95       	ret

0000eaa0 <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    eaa0:	a4 e4       	ldi	r26, 0x44	; 68
    eaa2:	b1 e0       	ldi	r27, 0x01	; 1
    eaa4:	e6 e5       	ldi	r30, 0x56	; 86
    eaa6:	f5 e7       	ldi	r31, 0x75	; 117
    eaa8:	0c 94 3f ec 	jmp	0x1d87e	; 0x1d87e <__prologue_saves__+0x16>
    eaac:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    eaae:	bc 01       	movw	r22, r24
    eab0:	ce 01       	movw	r24, r28
    eab2:	89 5e       	subi	r24, 0xE9	; 233
    eab4:	9e 4f       	sbci	r25, 0xFE	; 254
    eab6:	0e 94 98 62 	call	0xc530	; 0xc530 <f_opendir>
    if (fr == FR_OK) {
    eaba:	00 97       	sbiw	r24, 0x00	; 0
    eabc:	09 f0       	breq	.+2      	; 0xeac0 <fatfs_scan_files+0x20>
    eabe:	5b c0       	rjmp	.+182    	; 0xeb76 <fatfs_scan_files+0xd6>
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
            if (info.fattrib & AM_DIR) {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    eac0:	8f e2       	ldi	r24, 0x2F	; 47
    eac2:	d8 2e       	mov	r13, r24
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK) {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
    eac4:	be 01       	movw	r22, r28
    eac6:	6f 5f       	subi	r22, 0xFF	; 255
    eac8:	7f 4f       	sbci	r23, 0xFF	; 255
    eaca:	ce 01       	movw	r24, r28
    eacc:	89 5e       	subi	r24, 0xE9	; 233
    eace:	9e 4f       	sbci	r25, 0xFE	; 254
    ead0:	0e 94 20 63 	call	0xc640	; 0xc640 <f_readdir>
    ead4:	00 97       	sbiw	r24, 0x00	; 0
    ead6:	09 f0       	breq	.+2      	; 0xeada <fatfs_scan_files+0x3a>
    ead8:	4e c0       	rjmp	.+156    	; 0xeb76 <fatfs_scan_files+0xd6>
    eada:	2f 89       	ldd	r18, Y+23	; 0x17
    eadc:	22 23       	and	r18, r18
    eade:	09 f4       	brne	.+2      	; 0xeae2 <fatfs_scan_files+0x42>
    eae0:	4a c0       	rjmp	.+148    	; 0xeb76 <fatfs_scan_files+0xd6>
            if (info.fattrib & AM_DIR) {
    eae2:	89 85       	ldd	r24, Y+9	; 0x09
    eae4:	84 ff       	sbrs	r24, 4
    eae6:	25 c0       	rjmp	.+74     	; 0xeb32 <fatfs_scan_files+0x92>
                AccDirs++;
    eae8:	80 91 14 1d 	lds	r24, 0x1D14	; 0x801d14 <AccDirs>
    eaec:	90 91 15 1d 	lds	r25, 0x1D15	; 0x801d15 <AccDirs+0x1>
    eaf0:	01 96       	adiw	r24, 0x01	; 1
    eaf2:	90 93 15 1d 	sts	0x1D15, r25	; 0x801d15 <AccDirs+0x1>
    eaf6:	80 93 14 1d 	sts	0x1D14, r24	; 0x801d14 <AccDirs>
                i = strlen(path);
    eafa:	f8 01       	movw	r30, r16
    eafc:	01 90       	ld	r0, Z+
    eafe:	00 20       	and	r0, r0
    eb00:	e9 f7       	brne	.-6      	; 0xeafc <fatfs_scan_files+0x5c>
    eb02:	31 97       	sbiw	r30, 0x01	; 1
    eb04:	e0 1b       	sub	r30, r16
    eb06:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    eb08:	78 01       	movw	r14, r16
    eb0a:	ee 0e       	add	r14, r30
    eb0c:	ff 1e       	adc	r15, r31
    eb0e:	d7 01       	movw	r26, r14
    eb10:	dc 92       	st	X, r13
    eb12:	cf 01       	movw	r24, r30
    eb14:	01 96       	adiw	r24, 0x01	; 1
    eb16:	be 01       	movw	r22, r28
    eb18:	69 5e       	subi	r22, 0xE9	; 233
    eb1a:	7f 4f       	sbci	r23, 0xFF	; 255
    eb1c:	80 0f       	add	r24, r16
    eb1e:	91 1f       	adc	r25, r17
    eb20:	0e 94 1a 32 	call	0x6434	; 0x6434 <strcpy>
                fr = fatfs_scan_files(path);
    eb24:	c8 01       	movw	r24, r16
    eb26:	bc df       	rcall	.-136    	; 0xeaa0 <fatfs_scan_files>
                path[i] = 0;
    eb28:	f7 01       	movw	r30, r14
    eb2a:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    eb2c:	00 97       	sbiw	r24, 0x00	; 0
    eb2e:	51 f2       	breq	.-108    	; 0xeac4 <fatfs_scan_files+0x24>
    eb30:	22 c0       	rjmp	.+68     	; 0xeb76 <fatfs_scan_files+0xd6>
            } else {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    eb32:	80 91 16 1d 	lds	r24, 0x1D16	; 0x801d16 <AccFiles>
    eb36:	90 91 17 1d 	lds	r25, 0x1D17	; 0x801d17 <AccFiles+0x1>
    eb3a:	01 96       	adiw	r24, 0x01	; 1
    eb3c:	90 93 17 1d 	sts	0x1D17, r25	; 0x801d17 <AccFiles+0x1>
    eb40:	80 93 16 1d 	sts	0x1D16, r24	; 0x801d16 <AccFiles>
                AccSize += info.fsize;
    eb44:	40 91 10 1d 	lds	r20, 0x1D10	; 0x801d10 <AccSize>
    eb48:	50 91 11 1d 	lds	r21, 0x1D11	; 0x801d11 <AccSize+0x1>
    eb4c:	60 91 12 1d 	lds	r22, 0x1D12	; 0x801d12 <AccSize+0x2>
    eb50:	70 91 13 1d 	lds	r23, 0x1D13	; 0x801d13 <AccSize+0x3>
    eb54:	89 81       	ldd	r24, Y+1	; 0x01
    eb56:	9a 81       	ldd	r25, Y+2	; 0x02
    eb58:	ab 81       	ldd	r26, Y+3	; 0x03
    eb5a:	bc 81       	ldd	r27, Y+4	; 0x04
    eb5c:	84 0f       	add	r24, r20
    eb5e:	95 1f       	adc	r25, r21
    eb60:	a6 1f       	adc	r26, r22
    eb62:	b7 1f       	adc	r27, r23
    eb64:	80 93 10 1d 	sts	0x1D10, r24	; 0x801d10 <AccSize>
    eb68:	90 93 11 1d 	sts	0x1D11, r25	; 0x801d11 <AccSize+0x1>
    eb6c:	a0 93 12 1d 	sts	0x1D12, r26	; 0x801d12 <AccSize+0x2>
    eb70:	b0 93 13 1d 	sts	0x1D13, r27	; 0x801d13 <AccSize+0x3>
    eb74:	a7 cf       	rjmp	.-178    	; 0xeac4 <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    eb76:	cc 5b       	subi	r28, 0xBC	; 188
    eb78:	de 4f       	sbci	r29, 0xFE	; 254
    eb7a:	e7 e0       	ldi	r30, 0x07	; 7
    eb7c:	0c 94 5b ec 	jmp	0x1d8b6	; 0x1d8b6 <__epilogue_restores__+0x16>

0000eb80 <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    eb80:	01 97       	sbiw	r24, 0x01	; 1
    eb82:	84 30       	cpi	r24, 0x04	; 4
    eb84:	91 05       	cpc	r25, r1
    eb86:	40 f4       	brcc	.+16     	; 0xeb98 <fatfs_fstype+0x18>
    eb88:	88 0f       	add	r24, r24
    eb8a:	99 1f       	adc	r25, r25
    eb8c:	fc 01       	movw	r30, r24
    eb8e:	ea 5b       	subi	r30, 0xBA	; 186
    eb90:	f8 4f       	sbci	r31, 0xF8	; 248
    eb92:	80 81       	ld	r24, Z
    eb94:	91 81       	ldd	r25, Z+1	; 0x01
    eb96:	08 95       	ret
    char *ptr;
    switch(type)
    eb98:	88 e6       	ldi	r24, 0x68	; 104
    eb9a:	98 e0       	ldi	r25, 0x08	; 8
        default:
             ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    eb9c:	08 95       	ret

0000eb9e <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  void
MEMSPACE
void fatfs_status(char *ptr)
{
    eb9e:	a4 e2       	ldi	r26, 0x24	; 36
    eba0:	b0 e0       	ldi	r27, 0x00	; 0
    eba2:	e5 ed       	ldi	r30, 0xD5	; 213
    eba4:	f5 e7       	ldi	r31, 0x75	; 117
    eba6:	0c 94 3e ec 	jmp	0x1d87c	; 0x1d87c <__prologue_saves__+0x14>
    ebaa:	8c 01       	movw	r16, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn; // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    ebac:	fc 01       	movw	r30, r24
    ebae:	21 91       	ld	r18, Z+
    ebb0:	cf 01       	movw	r24, r30
    ebb2:	20 32       	cpi	r18, 0x20	; 32
    ebb4:	d1 f3       	breq	.-12     	; 0xebaa <fatfs_status+0xc>
    ebb6:	29 30       	cpi	r18, 0x09	; 9
    ebb8:	c1 f3       	breq	.-16     	; 0xebaa <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    ebba:	1f 93       	push	r17
    ebbc:	0f 93       	push	r16
    ebbe:	86 e4       	ldi	r24, 0x46	; 70
    ebc0:	9a e0       	ldi	r25, 0x0A	; 10
    ebc2:	1f 92       	push	r1
    ebc4:	9f 93       	push	r25
    ebc6:	8f 93       	push	r24
    ebc8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    ebcc:	ae 01       	movw	r20, r28
    ebce:	4d 5d       	subi	r20, 0xDD	; 221
    ebd0:	5f 4f       	sbci	r21, 0xFF	; 255
    ebd2:	be 01       	movw	r22, r28
    ebd4:	61 5e       	subi	r22, 0xE1	; 225
    ebd6:	7f 4f       	sbci	r23, 0xFF	; 255
    ebd8:	c8 01       	movw	r24, r16
    ebda:	0e 94 a6 63 	call	0xc74c	; 0xc74c <f_getfree>
    if (res)
    ebde:	0f 90       	pop	r0
    ebe0:	0f 90       	pop	r0
    ebe2:	0f 90       	pop	r0
    ebe4:	0f 90       	pop	r0
    ebe6:	0f 90       	pop	r0
    ebe8:	00 97       	sbiw	r24, 0x00	; 0
    ebea:	09 f0       	breq	.+2      	; 0xebee <fatfs_status+0x50>
    ebec:	e8 c0       	rjmp	.+464    	; 0xedbe <fatfs_status+0x220>
    {
        put_rc(res);
        return;
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    ebee:	eb a1       	ldd	r30, Y+35	; 0x23
    ebf0:	fc a1       	ldd	r31, Y+36	; 0x24
    ebf2:	80 81       	ld	r24, Z
    ebf4:	90 e0       	ldi	r25, 0x00	; 0
    ebf6:	c4 df       	rcall	.-120    	; 0xeb80 <fatfs_fstype>
    ebf8:	9f 93       	push	r25
    ebfa:	8f 93       	push	r24
    ebfc:	88 e2       	ldi	r24, 0x28	; 40
    ebfe:	9a e0       	ldi	r25, 0x0A	; 10
    ec00:	1f 92       	push	r1
    ec02:	9f 93       	push	r25
    ec04:	8f 93       	push	r24
    ec06:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    ec0a:	eb a1       	ldd	r30, Y+35	; 0x23
    ec0c:	fc a1       	ldd	r31, Y+36	; 0x24
    ec0e:	81 85       	ldd	r24, Z+9	; 0x09
    ec10:	92 85       	ldd	r25, Z+10	; 0x0a
    ec12:	a0 e0       	ldi	r26, 0x00	; 0
    ec14:	b0 e0       	ldi	r27, 0x00	; 0
    ec16:	49 e0       	ldi	r20, 0x09	; 9
    ec18:	88 0f       	add	r24, r24
    ec1a:	99 1f       	adc	r25, r25
    ec1c:	aa 1f       	adc	r26, r26
    ec1e:	bb 1f       	adc	r27, r27
    ec20:	4a 95       	dec	r20
    ec22:	d1 f7       	brne	.-12     	; 0xec18 <fatfs_status+0x7a>
    ec24:	bf 93       	push	r27
    ec26:	af 93       	push	r26
    ec28:	9f 93       	push	r25
    ec2a:	8f 93       	push	r24
    ec2c:	89 e0       	ldi	r24, 0x09	; 9
    ec2e:	9a e0       	ldi	r25, 0x0A	; 10
    ec30:	1f 92       	push	r1
    ec32:	9f 93       	push	r25
    ec34:	8f 93       	push	r24
    ec36:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    ec3a:	eb a1       	ldd	r30, Y+35	; 0x23
    ec3c:	fc a1       	ldd	r31, Y+36	; 0x24
    ec3e:	82 81       	ldd	r24, Z+2	; 0x02
    ec40:	1f 92       	push	r1
    ec42:	8f 93       	push	r24
    ec44:	8b ee       	ldi	r24, 0xEB	; 235
    ec46:	99 e0       	ldi	r25, 0x09	; 9
    ec48:	1f 92       	push	r1
    ec4a:	9f 93       	push	r25
    ec4c:	8f 93       	push	r24
    ec4e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    ec52:	eb a1       	ldd	r30, Y+35	; 0x23
    ec54:	fc a1       	ldd	r31, Y+36	; 0x24
    ec56:	80 85       	ldd	r24, Z+8	; 0x08
    ec58:	8f 93       	push	r24
    ec5a:	87 81       	ldd	r24, Z+7	; 0x07
    ec5c:	8f 93       	push	r24
    ec5e:	8d ec       	ldi	r24, 0xCD	; 205
    ec60:	99 e0       	ldi	r25, 0x09	; 9
    ec62:	1f 92       	push	r1
    ec64:	9f 93       	push	r25
    ec66:	8f 93       	push	r24
    ec68:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    ec6c:	eb a1       	ldd	r30, Y+35	; 0x23
    ec6e:	fc a1       	ldd	r31, Y+36	; 0x24
    ec70:	80 a1       	ldd	r24, Z+32	; 0x20
    ec72:	8f 93       	push	r24
    ec74:	87 8d       	ldd	r24, Z+31	; 0x1f
    ec76:	8f 93       	push	r24
    ec78:	86 8d       	ldd	r24, Z+30	; 0x1e
    ec7a:	8f 93       	push	r24
    ec7c:	85 8d       	ldd	r24, Z+29	; 0x1d
    ec7e:	8f 93       	push	r24
    ec80:	8e ea       	ldi	r24, 0xAE	; 174
    ec82:	99 e0       	ldi	r25, 0x09	; 9
    ec84:	1f 92       	push	r1
    ec86:	9f 93       	push	r25
    ec88:	8f 93       	push	r24
    ec8a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    ec8e:	eb a1       	ldd	r30, Y+35	; 0x23
    ec90:	fc a1       	ldd	r31, Y+36	; 0x24
    ec92:	81 8d       	ldd	r24, Z+25	; 0x19
    ec94:	92 8d       	ldd	r25, Z+26	; 0x1a
    ec96:	a3 8d       	ldd	r26, Z+27	; 0x1b
    ec98:	b4 8d       	ldd	r27, Z+28	; 0x1c
    ec9a:	02 97       	sbiw	r24, 0x02	; 2
    ec9c:	a1 09       	sbc	r26, r1
    ec9e:	b1 09       	sbc	r27, r1
    eca0:	bf 93       	push	r27
    eca2:	af 93       	push	r26
    eca4:	9f 93       	push	r25
    eca6:	8f 93       	push	r24
    eca8:	8f e8       	ldi	r24, 0x8F	; 143
    ecaa:	99 e0       	ldi	r25, 0x09	; 9
    ecac:	1f 92       	push	r1
    ecae:	9f 93       	push	r25
    ecb0:	8f 93       	push	r24
    ecb2:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    ecb6:	0f b6       	in	r0, 0x3f	; 63
    ecb8:	f8 94       	cli
    ecba:	de bf       	out	0x3e, r29	; 62
    ecbc:	0f be       	out	0x3f, r0	; 63
    ecbe:	cd bf       	out	0x3d, r28	; 61
    ecc0:	eb a1       	ldd	r30, Y+35	; 0x23
    ecc2:	fc a1       	ldd	r31, Y+36	; 0x24
    ecc4:	80 a5       	ldd	r24, Z+40	; 0x28
    ecc6:	8f 93       	push	r24
    ecc8:	87 a1       	ldd	r24, Z+39	; 0x27
    ecca:	8f 93       	push	r24
    eccc:	86 a1       	ldd	r24, Z+38	; 0x26
    ecce:	8f 93       	push	r24
    ecd0:	85 a1       	ldd	r24, Z+37	; 0x25
    ecd2:	8f 93       	push	r24
    ecd4:	80 e7       	ldi	r24, 0x70	; 112
    ecd6:	99 e0       	ldi	r25, 0x09	; 9
    ecd8:	1f 92       	push	r1
    ecda:	9f 93       	push	r25
    ecdc:	8f 93       	push	r24
    ecde:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    ece2:	eb a1       	ldd	r30, Y+35	; 0x23
    ece4:	fc a1       	ldd	r31, Y+36	; 0x24
    ece6:	84 a5       	ldd	r24, Z+44	; 0x2c
    ece8:	8f 93       	push	r24
    ecea:	83 a5       	ldd	r24, Z+43	; 0x2b
    ecec:	8f 93       	push	r24
    ecee:	82 a5       	ldd	r24, Z+42	; 0x2a
    ecf0:	8f 93       	push	r24
    ecf2:	81 a5       	ldd	r24, Z+41	; 0x29
    ecf4:	8f 93       	push	r24
    ecf6:	81 e5       	ldi	r24, 0x51	; 81
    ecf8:	99 e0       	ldi	r25, 0x09	; 9
    ecfa:	1f 92       	push	r1
    ecfc:	9f 93       	push	r25
    ecfe:	8f 93       	push	r24
    ed00:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    ed04:	eb a1       	ldd	r30, Y+35	; 0x23
    ed06:	fc a1       	ldd	r31, Y+36	; 0x24
    ed08:	80 a9       	ldd	r24, Z+48	; 0x30
    ed0a:	8f 93       	push	r24
    ed0c:	87 a5       	ldd	r24, Z+47	; 0x2f
    ed0e:	8f 93       	push	r24
    ed10:	86 a5       	ldd	r24, Z+46	; 0x2e
    ed12:	8f 93       	push	r24
    ed14:	85 a5       	ldd	r24, Z+45	; 0x2d
    ed16:	8f 93       	push	r24
    ed18:	82 e3       	ldi	r24, 0x32	; 50
    ed1a:	99 e0       	ldi	r25, 0x09	; 9
    ed1c:	1f 92       	push	r1
    ed1e:	9f 93       	push	r25
    ed20:	8f 93       	push	r24
    ed22:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>

#if _USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    ed26:	ae 01       	movw	r20, r28
    ed28:	45 5e       	subi	r20, 0xE5	; 229
    ed2a:	5f 4f       	sbci	r21, 0xFF	; 255
    ed2c:	be 01       	movw	r22, r28
    ed2e:	6f 5f       	subi	r22, 0xFF	; 255
    ed30:	7f 4f       	sbci	r23, 0xFF	; 255
    ed32:	c8 01       	movw	r24, r16
    ed34:	0e 94 38 68 	call	0xd070	; 0xd070 <f_getlabel>
    if (res)
    ed38:	0f b6       	in	r0, 0x3f	; 63
    ed3a:	f8 94       	cli
    ed3c:	de bf       	out	0x3e, r29	; 62
    ed3e:	0f be       	out	0x3f, r0	; 63
    ed40:	cd bf       	out	0x3d, r28	; 61
    ed42:	00 97       	sbiw	r24, 0x00	; 0
    ed44:	e1 f5       	brne	.+120    	; 0xedbe <fatfs_status+0x220>
    {
        put_rc(res);
        return;
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    ed46:	89 81       	ldd	r24, Y+1	; 0x01
    ed48:	81 11       	cpse	r24, r1
    ed4a:	03 c0       	rjmp	.+6      	; 0xed52 <fatfs_status+0x1b4>
    ed4c:	80 e7       	ldi	r24, 0x70	; 112
    ed4e:	98 e0       	ldi	r25, 0x08	; 8
    ed50:	02 c0       	rjmp	.+4      	; 0xed56 <fatfs_status+0x1b8>
    ed52:	ce 01       	movw	r24, r28
    ed54:	01 96       	adiw	r24, 0x01	; 1
    ed56:	9f 93       	push	r25
    ed58:	8f 93       	push	r24
    ed5a:	84 e1       	ldi	r24, 0x14	; 20
    ed5c:	99 e0       	ldi	r25, 0x09	; 9
    ed5e:	1f 92       	push	r1
    ed60:	9f 93       	push	r25
    ed62:	8f 93       	push	r24
    ed64:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    ed68:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ed6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ed6c:	ad 8d       	ldd	r26, Y+29	; 0x1d
    ed6e:	be 8d       	ldd	r27, Y+30	; 0x1e
    ed70:	9f 93       	push	r25
    ed72:	8f 93       	push	r24
    ed74:	cd 01       	movw	r24, r26
    ed76:	aa 27       	eor	r26, r26
    ed78:	bb 27       	eor	r27, r27
    ed7a:	9f 93       	push	r25
    ed7c:	8f 93       	push	r24
    ed7e:	8f ee       	ldi	r24, 0xEF	; 239
    ed80:	98 e0       	ldi	r25, 0x08	; 8
    ed82:	1f 92       	push	r1
    ed84:	9f 93       	push	r25
    ed86:	8f 93       	push	r24
    ed88:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    ed8c:	10 92 15 1d 	sts	0x1D15, r1	; 0x801d15 <AccDirs+0x1>
    ed90:	10 92 14 1d 	sts	0x1D14, r1	; 0x801d14 <AccDirs>
    ed94:	10 92 17 1d 	sts	0x1D17, r1	; 0x801d17 <AccFiles+0x1>
    ed98:	10 92 16 1d 	sts	0x1D16, r1	; 0x801d16 <AccFiles>
    ed9c:	10 92 10 1d 	sts	0x1D10, r1	; 0x801d10 <AccSize>
    eda0:	10 92 11 1d 	sts	0x1D11, r1	; 0x801d11 <AccSize+0x1>
    eda4:	10 92 12 1d 	sts	0x1D12, r1	; 0x801d12 <AccSize+0x2>
    eda8:	10 92 13 1d 	sts	0x1D13, r1	; 0x801d13 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    edac:	c8 01       	movw	r24, r16
    if (res)
    edae:	78 de       	rcall	.-784    	; 0xeaa0 <fatfs_scan_files>
    edb0:	0f b6       	in	r0, 0x3f	; 63
    edb2:	f8 94       	cli
    edb4:	de bf       	out	0x3e, r29	; 62
    edb6:	0f be       	out	0x3f, r0	; 63
    edb8:	cd bf       	out	0x3d, r28	; 61
    {
        put_rc(res);
    edba:	00 97       	sbiw	r24, 0x00	; 0
    edbc:	11 f0       	breq	.+4      	; 0xedc2 <fatfs_status+0x224>
        return;
    edbe:	61 de       	rcall	.-830    	; 0xea82 <put_rc>
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    edc0:	56 c0       	rjmp	.+172    	; 0xee6e <fatfs_status+0x2d0>
    edc2:	0b a1       	ldd	r16, Y+35	; 0x23
    edc4:	1c a1       	ldd	r17, Y+36	; 0x24
    edc6:	f8 01       	movw	r30, r16
    edc8:	c1 84       	ldd	r12, Z+9	; 0x09
    edca:	d2 84       	ldd	r13, Z+10	; 0x0a
    edcc:	e1 2c       	mov	r14, r1
    edce:	f1 2c       	mov	r15, r1
    edd0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    edd2:	78 a1       	ldd	r23, Y+32	; 0x20
    edd4:	89 a1       	ldd	r24, Y+33	; 0x21
    edd6:	9a a1       	ldd	r25, Y+34	; 0x22
    edd8:	a7 01       	movw	r20, r14
    edda:	96 01       	movw	r18, r12
    eddc:	0e 94 85 eb 	call	0x1d70a	; 0x1d70a <__mulsi3>
    ede0:	22 e0       	ldi	r18, 0x02	; 2
    ede2:	30 e0       	ldi	r19, 0x00	; 0
    ede4:	40 e0       	ldi	r20, 0x00	; 0
    ede6:	50 e0       	ldi	r21, 0x00	; 0
    ede8:	0e 94 e9 eb 	call	0x1d7d2	; 0x1d7d2 <__divmodsi4>
    edec:	5f 93       	push	r21
    edee:	4f 93       	push	r20
    edf0:	3f 93       	push	r19
    edf2:	2f 93       	push	r18
    edf4:	f8 01       	movw	r30, r16
    edf6:	81 8d       	ldd	r24, Z+25	; 0x19
    edf8:	92 8d       	ldd	r25, Z+26	; 0x1a
    edfa:	a3 8d       	ldd	r26, Z+27	; 0x1b
    edfc:	b4 8d       	ldd	r27, Z+28	; 0x1c
    edfe:	9c 01       	movw	r18, r24
    ee00:	ad 01       	movw	r20, r26
    ee02:	22 50       	subi	r18, 0x02	; 2
    ee04:	31 09       	sbc	r19, r1
    ee06:	41 09       	sbc	r20, r1
    ee08:	51 09       	sbc	r21, r1
    ee0a:	c7 01       	movw	r24, r14
    ee0c:	b6 01       	movw	r22, r12
    ee0e:	0e 94 85 eb 	call	0x1d70a	; 0x1d70a <__mulsi3>
    ee12:	dc 01       	movw	r26, r24
    ee14:	cb 01       	movw	r24, r22
    ee16:	b6 95       	lsr	r27
    ee18:	a7 95       	ror	r26
    ee1a:	97 95       	ror	r25
    ee1c:	87 95       	ror	r24
    ee1e:	bf 93       	push	r27
    ee20:	af 93       	push	r26
    ee22:	9f 93       	push	r25
    ee24:	8f 93       	push	r24
    ee26:	80 91 15 1d 	lds	r24, 0x1D15	; 0x801d15 <AccDirs+0x1>
    ee2a:	8f 93       	push	r24
    ee2c:	80 91 14 1d 	lds	r24, 0x1D14	; 0x801d14 <AccDirs>
    ee30:	8f 93       	push	r24
    ee32:	80 91 13 1d 	lds	r24, 0x1D13	; 0x801d13 <AccSize+0x3>
    ee36:	8f 93       	push	r24
    ee38:	80 91 12 1d 	lds	r24, 0x1D12	; 0x801d12 <AccSize+0x2>
    ee3c:	8f 93       	push	r24
    ee3e:	80 91 11 1d 	lds	r24, 0x1D11	; 0x801d11 <AccSize+0x1>
    ee42:	8f 93       	push	r24
    ee44:	80 91 10 1d 	lds	r24, 0x1D10	; 0x801d10 <AccSize>
    ee48:	8f 93       	push	r24
    ee4a:	80 91 17 1d 	lds	r24, 0x1D17	; 0x801d17 <AccFiles+0x1>
    ee4e:	8f 93       	push	r24
    ee50:	80 91 16 1d 	lds	r24, 0x1D16	; 0x801d16 <AccFiles>
    ee54:	8f 93       	push	r24
    ee56:	82 ea       	ldi	r24, 0xA2	; 162
    ee58:	98 e0       	ldi	r25, 0x08	; 8
    ee5a:	1f 92       	push	r1
    ee5c:	9f 93       	push	r25
    ee5e:	8f 93       	push	r24
    ee60:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    ee64:	0f b6       	in	r0, 0x3f	; 63
    ee66:	f8 94       	cli
    ee68:	de bf       	out	0x3e, r29	; 62
    ee6a:	0f be       	out	0x3f, r0	; 63
                 "%lu KB total disk space.\n%lu KB available.\n",
            AccFiles, AccSize, AccDirs,
            (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
    );

}
    ee6c:	cd bf       	out	0x3d, r28	; 61
    ee6e:	a4 96       	adiw	r28, 0x24	; 36
    ee70:	e8 e0       	ldi	r30, 0x08	; 8
    ee72:	0c 94 5a ec 	jmp	0x1d8b4	; 0x1d8b4 <__epilogue_restores__+0x14>

0000ee76 <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    ee76:	a6 e0       	ldi	r26, 0x06	; 6
    ee78:	b0 e0       	ldi	r27, 0x00	; 0
    ee7a:	e1 e4       	ldi	r30, 0x41	; 65
    ee7c:	f7 e7       	ldi	r31, 0x77	; 119
    ee7e:	0c 94 44 ec 	jmp	0x1d888	; 0x1d888 <__prologue_saves__+0x20>
    ee82:	fc 01       	movw	r30, r24
    char attrs[6];
    if(info->fname[0] == 0)
    ee84:	86 89       	ldd	r24, Z+22	; 0x16
    ee86:	81 11       	cpse	r24, r1
    ee88:	0b c0       	rjmp	.+22     	; 0xeea0 <fatfs_filinfo_list+0x2a>
    {
        printf("fatfs_filinfo_list: empty\n");
    ee8a:	87 e8       	ldi	r24, 0x87	; 135
    ee8c:	98 e0       	ldi	r25, 0x08	; 8
    ee8e:	1f 92       	push	r1
    ee90:	9f 93       	push	r25
    ee92:	8f 93       	push	r24
    ee94:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        return;
    ee98:	0f 90       	pop	r0
    ee9a:	0f 90       	pop	r0
    ee9c:	0f 90       	pop	r0
    ee9e:	6e c0       	rjmp	.+220    	; 0xef7c <fatfs_filinfo_list+0x106>
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    eea0:	80 85       	ldd	r24, Z+8	; 0x08
    eea2:	84 fd       	sbrc	r24, 4
    eea4:	02 c0       	rjmp	.+4      	; 0xeeaa <fatfs_filinfo_list+0x34>
    eea6:	9d e2       	ldi	r25, 0x2D	; 45
    eea8:	01 c0       	rjmp	.+2      	; 0xeeac <fatfs_filinfo_list+0x36>
    eeaa:	94 e4       	ldi	r25, 0x44	; 68
    eeac:	99 83       	std	Y+1, r25	; 0x01
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    eeae:	80 fd       	sbrc	r24, 0
    eeb0:	02 c0       	rjmp	.+4      	; 0xeeb6 <fatfs_filinfo_list+0x40>
    eeb2:	9d e2       	ldi	r25, 0x2D	; 45
    eeb4:	01 c0       	rjmp	.+2      	; 0xeeb8 <fatfs_filinfo_list+0x42>
    eeb6:	92 e5       	ldi	r25, 0x52	; 82
    eeb8:	9a 83       	std	Y+2, r25	; 0x02
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    eeba:	81 fd       	sbrc	r24, 1
    eebc:	02 c0       	rjmp	.+4      	; 0xeec2 <fatfs_filinfo_list+0x4c>
    eebe:	9d e2       	ldi	r25, 0x2D	; 45
    eec0:	01 c0       	rjmp	.+2      	; 0xeec4 <fatfs_filinfo_list+0x4e>
    eec2:	98 e4       	ldi	r25, 0x48	; 72
    eec4:	9b 83       	std	Y+3, r25	; 0x03
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    eec6:	82 fd       	sbrc	r24, 2
    eec8:	02 c0       	rjmp	.+4      	; 0xeece <fatfs_filinfo_list+0x58>
    eeca:	9d e2       	ldi	r25, 0x2D	; 45
    eecc:	01 c0       	rjmp	.+2      	; 0xeed0 <fatfs_filinfo_list+0x5a>
    eece:	93 e5       	ldi	r25, 0x53	; 83
    eed0:	9c 83       	std	Y+4, r25	; 0x04
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    eed2:	85 fd       	sbrc	r24, 5
    eed4:	02 c0       	rjmp	.+4      	; 0xeeda <fatfs_filinfo_list+0x64>
    eed6:	8d e2       	ldi	r24, 0x2D	; 45
    eed8:	01 c0       	rjmp	.+2      	; 0xeedc <fatfs_filinfo_list+0x66>
    eeda:	81 e4       	ldi	r24, 0x41	; 65
    eedc:	8d 83       	std	Y+5, r24	; 0x05
    attrs[5] = 0;
    eede:	1e 82       	std	Y+6, r1	; 0x06
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    eee0:	46 81       	ldd	r20, Z+6	; 0x06
    eee2:	57 81       	ldd	r21, Z+7	; 0x07
    eee4:	84 81       	ldd	r24, Z+4	; 0x04
    eee6:	95 81       	ldd	r25, Z+5	; 0x05
    eee8:	9f 01       	movw	r18, r30
    eeea:	2a 5e       	subi	r18, 0xEA	; 234
    eeec:	3f 4f       	sbci	r19, 0xFF	; 255
    eeee:	3f 93       	push	r19
    eef0:	2f 93       	push	r18
    eef2:	23 81       	ldd	r18, Z+3	; 0x03
    eef4:	2f 93       	push	r18
    eef6:	22 81       	ldd	r18, Z+2	; 0x02
    eef8:	2f 93       	push	r18
    eefa:	21 81       	ldd	r18, Z+1	; 0x01
    eefc:	2f 93       	push	r18
    eefe:	20 81       	ld	r18, Z
    ef00:	2f 93       	push	r18
    ef02:	9a 01       	movw	r18, r20
    ef04:	45 e0       	ldi	r20, 0x05	; 5
    ef06:	36 95       	lsr	r19
    ef08:	27 95       	ror	r18
    ef0a:	4a 95       	dec	r20
    ef0c:	e1 f7       	brne	.-8      	; 0xef06 <fatfs_filinfo_list+0x90>
    ef0e:	2f 73       	andi	r18, 0x3F	; 63
    ef10:	33 27       	eor	r19, r19
    ef12:	3f 93       	push	r19
    ef14:	2f 93       	push	r18
    ef16:	25 2f       	mov	r18, r21
    ef18:	26 95       	lsr	r18
    ef1a:	26 95       	lsr	r18
    ef1c:	26 95       	lsr	r18
    ef1e:	1f 92       	push	r1
    ef20:	2f 93       	push	r18
    ef22:	9c 01       	movw	r18, r24
    ef24:	2f 71       	andi	r18, 0x1F	; 31
    ef26:	33 27       	eor	r19, r19
    ef28:	3f 93       	push	r19
    ef2a:	2f 93       	push	r18
    ef2c:	9c 01       	movw	r18, r24
    ef2e:	55 e0       	ldi	r21, 0x05	; 5
    ef30:	36 95       	lsr	r19
    ef32:	27 95       	ror	r18
    ef34:	5a 95       	dec	r21
    ef36:	e1 f7       	brne	.-8      	; 0xef30 <fatfs_filinfo_list+0xba>
    ef38:	2f 70       	andi	r18, 0x0F	; 15
    ef3a:	33 27       	eor	r19, r19
    ef3c:	3f 93       	push	r19
    ef3e:	2f 93       	push	r18
    ef40:	89 2f       	mov	r24, r25
    ef42:	99 27       	eor	r25, r25
    ef44:	86 95       	lsr	r24
    ef46:	84 54       	subi	r24, 0x44	; 68
    ef48:	98 4f       	sbci	r25, 0xF8	; 248
    ef4a:	9f 93       	push	r25
    ef4c:	8f 93       	push	r24
    ef4e:	ce 01       	movw	r24, r28
    ef50:	01 96       	adiw	r24, 0x01	; 1
    ef52:	9f 93       	push	r25
    ef54:	8f 93       	push	r24
    ef56:	85 e6       	ldi	r24, 0x65	; 101
    ef58:	98 e0       	ldi	r25, 0x08	; 8
    ef5a:	1f 92       	push	r1
    ef5c:	9f 93       	push	r25
    ef5e:	8f 93       	push	r24
    ef60:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    ef64:	83 e6       	ldi	r24, 0x63	; 99
    ef66:	98 e0       	ldi	r25, 0x08	; 8
    ef68:	1f 92       	push	r1
    ef6a:	9f 93       	push	r25
    ef6c:	8f 93       	push	r24
    ef6e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    ef72:	0f b6       	in	r0, 0x3f	; 63
    ef74:	f8 94       	cli
    ef76:	de bf       	out	0x3e, r29	; 62
    ef78:	0f be       	out	0x3f, r0	; 63
    ef7a:	cd bf       	out	0x3d, r28	; 61
}
    ef7c:	26 96       	adiw	r28, 0x06	; 6
    ef7e:	e2 e0       	ldi	r30, 0x02	; 2
    ef80:	0c 94 60 ec 	jmp	0x1d8c0	; 0x1d8c0 <__epilogue_restores__+0x20>

0000ef84 <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    ef84:	cf 93       	push	r28
    ef86:	df 93       	push	r29
    ef88:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    ef8a:	88 ea       	ldi	r24, 0xA8	; 168
    ef8c:	9b e0       	ldi	r25, 0x0B	; 11
    ef8e:	1f 92       	push	r1
    ef90:	9f 93       	push	r25
    ef92:	8f 93       	push	r24
    ef94:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    
    if(full)
    ef98:	0f 90       	pop	r0
    ef9a:	0f 90       	pop	r0
    ef9c:	0f 90       	pop	r0
    ef9e:	cd 2b       	or	r28, r29
    efa0:	51 f0       	breq	.+20     	; 0xefb6 <fatfs_help+0x32>
    {
        printf(
    efa2:	8c e2       	ldi	r24, 0x2C	; 44
    efa4:	9b e0       	ldi	r25, 0x0B	; 11
    efa6:	1f 92       	push	r1
    efa8:	9f 93       	push	r25
    efaa:	8f 93       	push	r24
    efac:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    efb0:	0f 90       	pop	r0
    efb2:	0f 90       	pop	r0
    efb4:	0f 90       	pop	r0
#endif
        "\n"
        );
    }
        
}
    efb6:	df 91       	pop	r29
    efb8:	cf 91       	pop	r28
    efba:	08 95       	ret

0000efbc <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  void.
MEMSPACE
void fatfs_ls(char *name)
{
    efbc:	aa e4       	ldi	r26, 0x4A	; 74
    efbe:	b2 e0       	ldi	r27, 0x02	; 2
    efc0:	e4 ee       	ldi	r30, 0xE4	; 228
    efc2:	f7 e7       	ldi	r31, 0x77	; 119
    efc4:	0c 94 3e ec 	jmp	0x1d87c	; 0x1d87c <__prologue_saves__+0x14>
    efc8:	8e 01       	movw	r16, r28
    efca:	09 5e       	subi	r16, 0xE9	; 233
    efcc:	1e 4f       	sbci	r17, 0xFE	; 254
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[256]; 

    if(!name || !*name)
    efce:	00 97       	sbiw	r24, 0x00	; 0
    efd0:	21 f0       	breq	.+8      	; 0xefda <fatfs_ls+0x1e>
    efd2:	fc 01       	movw	r30, r24
    efd4:	20 81       	ld	r18, Z
    efd6:	21 11       	cpse	r18, r1
    efd8:	03 c0       	rjmp	.+6      	; 0xefe0 <fatfs_ls+0x24>
    {
        strcpy(buff,".");
    efda:	65 ea       	ldi	r22, 0xA5	; 165
    efdc:	70 e1       	ldi	r23, 0x10	; 16
    efde:	01 c0       	rjmp	.+2      	; 0xefe2 <fatfs_ls+0x26>
    }
    else
    {
        strcpy(buff,name);
    efe0:	bc 01       	movw	r22, r24
    efe2:	c8 01       	movw	r24, r16
    efe4:	0e 94 1a 32 	call	0x6434	; 0x6434 <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    efe8:	1f 93       	push	r17
    efea:	0f 93       	push	r16
    efec:	8c e9       	ldi	r24, 0x9C	; 156
    efee:	9a e0       	ldi	r25, 0x0A	; 10
    eff0:	1f 92       	push	r1
    eff2:	9f 93       	push	r25
    eff4:	8f 93       	push	r24
    eff6:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>

    res = f_opendir(&dirs, buff);
    effa:	b8 01       	movw	r22, r16
    effc:	ce 01       	movw	r24, r28
    effe:	89 5e       	subi	r24, 0xE9	; 233
    f000:	9d 4f       	sbci	r25, 0xFD	; 253
    f002:	0e 94 98 62 	call	0xc530	; 0xc530 <f_opendir>
    if (res) { put_rc(res); return; }
    f006:	0f 90       	pop	r0
    f008:	0f 90       	pop	r0
    f00a:	0f 90       	pop	r0
    f00c:	0f 90       	pop	r0
    f00e:	0f 90       	pop	r0
    f010:	00 97       	sbiw	r24, 0x00	; 0
    f012:	11 f0       	breq	.+4      	; 0xf018 <fatfs_ls+0x5c>
    f014:	36 dd       	rcall	.-1428   	; 0xea82 <put_rc>
    p1 = s1 = s2 = 0;
    f016:	9a c0       	rjmp	.+308    	; 0xf14c <fatfs_ls+0x190>
    f018:	cb 5b       	subi	r28, 0xBB	; 187
    f01a:	dd 4f       	sbci	r29, 0xFD	; 253
    f01c:	18 82       	st	Y, r1
    f01e:	19 82       	std	Y+1, r1	; 0x01
    f020:	1a 82       	std	Y+2, r1	; 0x02
    f022:	1b 82       	std	Y+3, r1	; 0x03
    f024:	c5 54       	subi	r28, 0x45	; 69
    f026:	d2 40       	sbci	r29, 0x02	; 2
    f028:	c1 2c       	mov	r12, r1
    f02a:	d1 2c       	mov	r13, r1
    f02c:	e1 2c       	mov	r14, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    f02e:	f1 2c       	mov	r15, r1
    f030:	be 01       	movw	r22, r28
    f032:	6f 5f       	subi	r22, 0xFF	; 255
    f034:	7f 4f       	sbci	r23, 0xFF	; 255
    f036:	ce 01       	movw	r24, r28
    f038:	89 5e       	subi	r24, 0xE9	; 233
    f03a:	9d 4f       	sbci	r25, 0xFD	; 253
    f03c:	0e 94 20 63 	call	0xc640	; 0xc640 <f_readdir>
        if ((res != FR_OK) || !fno.fname[0]) break;
    f040:	89 2b       	or	r24, r25
    f042:	49 f5       	brne	.+82     	; 0xf096 <fatfs_ls+0xda>
    f044:	8f 89       	ldd	r24, Y+23	; 0x17
    f046:	88 23       	and	r24, r24
        if (fno.fattrib & AM_DIR)
    f048:	31 f1       	breq	.+76     	; 0xf096 <fatfs_ls+0xda>
    f04a:	89 85       	ldd	r24, Y+9	; 0x09
    f04c:	84 ff       	sbrs	r24, 4
        {
            s2++;
    f04e:	04 c0       	rjmp	.+8      	; 0xf058 <fatfs_ls+0x9c>
    f050:	ff ef       	ldi	r31, 0xFF	; 255
    f052:	cf 1a       	sub	r12, r31
    f054:	df 0a       	sbc	r13, r31
        }
        else
        {
            s1++; p1 += fno.fsize;
    f056:	1b c0       	rjmp	.+54     	; 0xf08e <fatfs_ls+0xd2>
    f058:	2f ef       	ldi	r18, 0xFF	; 255
    f05a:	e2 1a       	sub	r14, r18
    f05c:	f2 0a       	sbc	r15, r18
    f05e:	49 81       	ldd	r20, Y+1	; 0x01
    f060:	5a 81       	ldd	r21, Y+2	; 0x02
    f062:	6b 81       	ldd	r22, Y+3	; 0x03
    f064:	7c 81       	ldd	r23, Y+4	; 0x04
    f066:	cb 5b       	subi	r28, 0xBB	; 187
    f068:	dd 4f       	sbci	r29, 0xFD	; 253
    f06a:	88 81       	ld	r24, Y
    f06c:	99 81       	ldd	r25, Y+1	; 0x01
    f06e:	aa 81       	ldd	r26, Y+2	; 0x02
    f070:	bb 81       	ldd	r27, Y+3	; 0x03
    f072:	c5 54       	subi	r28, 0x45	; 69
    f074:	d2 40       	sbci	r29, 0x02	; 2
    f076:	84 0f       	add	r24, r20
    f078:	95 1f       	adc	r25, r21
    f07a:	a6 1f       	adc	r26, r22
    f07c:	b7 1f       	adc	r27, r23
    f07e:	cb 5b       	subi	r28, 0xBB	; 187
    f080:	dd 4f       	sbci	r29, 0xFD	; 253
    f082:	88 83       	st	Y, r24
    f084:	99 83       	std	Y+1, r25	; 0x01
    f086:	aa 83       	std	Y+2, r26	; 0x02
    f088:	bb 83       	std	Y+3, r27	; 0x03
    f08a:	c5 54       	subi	r28, 0x45	; 69
        }
        fatfs_filinfo_list(&fno);
    f08c:	d2 40       	sbci	r29, 0x02	; 2
    f08e:	ce 01       	movw	r24, r28
    f090:	01 96       	adiw	r24, 0x01	; 1
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    f092:	f1 de       	rcall	.-542    	; 0xee76 <fatfs_filinfo_list>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    f094:	cd cf       	rjmp	.-102    	; 0xf030 <fatfs_ls+0x74>
    f096:	df 92       	push	r13
    f098:	cf 92       	push	r12
    f09a:	c8 5b       	subi	r28, 0xB8	; 184
    f09c:	dd 4f       	sbci	r29, 0xFD	; 253
    f09e:	88 81       	ld	r24, Y
    f0a0:	c8 54       	subi	r28, 0x48	; 72
    f0a2:	d2 40       	sbci	r29, 0x02	; 2
    f0a4:	8f 93       	push	r24
    f0a6:	c9 5b       	subi	r28, 0xB9	; 185
    f0a8:	dd 4f       	sbci	r29, 0xFD	; 253
    f0aa:	88 81       	ld	r24, Y
    f0ac:	c7 54       	subi	r28, 0x47	; 71
    f0ae:	d2 40       	sbci	r29, 0x02	; 2
    f0b0:	8f 93       	push	r24
    f0b2:	ca 5b       	subi	r28, 0xBA	; 186
    f0b4:	dd 4f       	sbci	r29, 0xFD	; 253
    f0b6:	88 81       	ld	r24, Y
    f0b8:	c6 54       	subi	r28, 0x46	; 70
    f0ba:	d2 40       	sbci	r29, 0x02	; 2
    f0bc:	8f 93       	push	r24
    f0be:	cb 5b       	subi	r28, 0xBB	; 187
    f0c0:	dd 4f       	sbci	r29, 0xFD	; 253
    f0c2:	88 81       	ld	r24, Y
    f0c4:	c5 54       	subi	r28, 0x45	; 69
    f0c6:	d2 40       	sbci	r29, 0x02	; 2
    f0c8:	8f 93       	push	r24
    f0ca:	ff 92       	push	r15
    f0cc:	ef 92       	push	r14
    f0ce:	83 e7       	ldi	r24, 0x73	; 115
    f0d0:	9a e0       	ldi	r25, 0x0A	; 10
    f0d2:	1f 92       	push	r1
    f0d4:	9f 93       	push	r25
    f0d6:	8f 93       	push	r24
    f0d8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    f0dc:	ae 01       	movw	r20, r28
    f0de:	47 5b       	subi	r20, 0xB7	; 183
    f0e0:	5d 4f       	sbci	r21, 0xFD	; 253
    f0e2:	be 01       	movw	r22, r28
    f0e4:	6b 5b       	subi	r22, 0xBB	; 187
    f0e6:	7d 4f       	sbci	r23, 0xFD	; 253
    f0e8:	c8 01       	movw	r24, r16
    f0ea:	0e 94 a6 63 	call	0xc74c	; 0xc74c <f_getfree>
    f0ee:	0f b6       	in	r0, 0x3f	; 63
    f0f0:	f8 94       	cli
    f0f2:	de bf       	out	0x3e, r29	; 62
    f0f4:	0f be       	out	0x3f, r0	; 63
    f0f6:	cd bf       	out	0x3d, r28	; 61
    f0f8:	89 2b       	or	r24, r25
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    f0fa:	41 f5       	brne	.+80     	; 0xf14c <fatfs_ls+0x190>
    f0fc:	c7 5b       	subi	r28, 0xB7	; 183
    f0fe:	dd 4f       	sbci	r29, 0xFD	; 253
    f100:	e8 81       	ld	r30, Y
    f102:	f9 81       	ldd	r31, Y+1	; 0x01
    f104:	c9 54       	subi	r28, 0x49	; 73
    f106:	d2 40       	sbci	r29, 0x02	; 2
    f108:	a1 85       	ldd	r26, Z+9	; 0x09
    f10a:	b2 85       	ldd	r27, Z+10	; 0x0a
    f10c:	cb 5b       	subi	r28, 0xBB	; 187
    f10e:	dd 4f       	sbci	r29, 0xFD	; 253
    f110:	28 81       	ld	r18, Y
    f112:	39 81       	ldd	r19, Y+1	; 0x01
    f114:	4a 81       	ldd	r20, Y+2	; 0x02
    f116:	5b 81       	ldd	r21, Y+3	; 0x03
    f118:	c5 54       	subi	r28, 0x45	; 69
    f11a:	d2 40       	sbci	r29, 0x02	; 2
    f11c:	0e 94 14 ec 	call	0x1d828	; 0x1d828 <__muluhisi3>
    f120:	22 e0       	ldi	r18, 0x02	; 2
    f122:	30 e0       	ldi	r19, 0x00	; 0
    f124:	40 e0       	ldi	r20, 0x00	; 0
    f126:	50 e0       	ldi	r21, 0x00	; 0
    f128:	0e 94 e9 eb 	call	0x1d7d2	; 0x1d7d2 <__divmodsi4>
    f12c:	5f 93       	push	r21
    f12e:	4f 93       	push	r20
    f130:	3f 93       	push	r19
    f132:	2f 93       	push	r18
    f134:	8e e5       	ldi	r24, 0x5E	; 94
    f136:	9a e0       	ldi	r25, 0x0A	; 10
    f138:	1f 92       	push	r1
    f13a:	9f 93       	push	r25
    f13c:	8f 93       	push	r24
    f13e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    f142:	0f b6       	in	r0, 0x3f	; 63
    f144:	f8 94       	cli
    f146:	de bf       	out	0x3e, r29	; 62
    f148:	0f be       	out	0x3f, r0	; 63
}
    f14a:	cd bf       	out	0x3d, r28	; 61
    f14c:	c6 5b       	subi	r28, 0xB6	; 182
    f14e:	dd 4f       	sbci	r29, 0xFD	; 253
    f150:	e8 e0       	ldi	r30, 0x08	; 8
    f152:	0c 94 5a ec 	jmp	0x1d8b4	; 0x1d8b4 <__epilogue_restores__+0x14>

0000f156 <mmc_test>:
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    printf("==============================\n");
    f156:	8c ef       	ldi	r24, 0xFC	; 252
    f158:	9a e0       	ldi	r25, 0x0A	; 10
    f15a:	1f 92       	push	r1
    f15c:	9f 93       	push	r25
    f15e:	8f 93       	push	r24
    f160:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    printf("START MMC TEST\n");
    f164:	8c ee       	ldi	r24, 0xEC	; 236
    f166:	9a e0       	ldi	r25, 0x0A	; 10
    f168:	1f 92       	push	r1
    f16a:	9f 93       	push	r25
    f16c:	8f 93       	push	r24
    f16e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    fatfs_status("/");
    f172:	86 e6       	ldi	r24, 0x66	; 102
    f174:	98 e0       	ldi	r25, 0x08	; 8
    f176:	13 dd       	rcall	.-1498   	; 0xeb9e <fatfs_status>
    printf("MMC Directory List\n");
    f178:	88 ed       	ldi	r24, 0xD8	; 216
    f17a:	9a e0       	ldi	r25, 0x0A	; 10
    f17c:	1f 92       	push	r1
    f17e:	9f 93       	push	r25
    f180:	8f 93       	push	r24
    f182:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    fatfs_ls("/");
    f186:	86 e6       	ldi	r24, 0x66	; 102
    f188:	98 e0       	ldi	r25, 0x08	; 8
    f18a:	18 df       	rcall	.-464    	; 0xefbc <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    f18c:	8a ec       	ldi	r24, 0xCA	; 202
    f18e:	9a e0       	ldi	r25, 0x0A	; 10
    f190:	1f 92       	push	r1
    f192:	9f 93       	push	r25
    f194:	8f 93       	push	r24
    f196:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    printf("==============================\n");
    f19a:	8a ea       	ldi	r24, 0xAA	; 170
    f19c:	9a e0       	ldi	r25, 0x0A	; 10
    f19e:	1f 92       	push	r1
    f1a0:	9f 93       	push	r25
    f1a2:	8f 93       	push	r24
    f1a4:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
}
    f1a8:	8d b7       	in	r24, 0x3d	; 61
    f1aa:	9e b7       	in	r25, 0x3e	; 62
    f1ac:	0f 96       	adiw	r24, 0x0f	; 15
    f1ae:	0f b6       	in	r0, 0x3f	; 63
    f1b0:	f8 94       	cli
    f1b2:	9e bf       	out	0x3e, r25	; 62
    f1b4:	0f be       	out	0x3f, r0	; 63
    f1b6:	8d bf       	out	0x3d, r24	; 61
    f1b8:	08 95       	ret

0000f1ba <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    f1ba:	ef 92       	push	r14
    f1bc:	ff 92       	push	r15
    f1be:	0f 93       	push	r16
    f1c0:	1f 93       	push	r17
    f1c2:	cf 93       	push	r28
    f1c4:	df 93       	push	r29
    char *ptr;
    int ind;


    ind = 0;
    ptr = argv[ind++];
    f1c6:	fb 01       	movw	r30, r22
    f1c8:	20 81       	ld	r18, Z
    f1ca:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    f1cc:	21 15       	cp	r18, r1
    f1ce:	31 05       	cpc	r19, r1
    f1d0:	19 f4       	brne	.+6      	; 0xf1d8 <fatfs_tests+0x1e>
        return(0);
    f1d2:	80 e0       	ldi	r24, 0x00	; 0
    f1d4:	90 e0       	ldi	r25, 0x00	; 0
    f1d6:	77 c0       	rjmp	.+238    	; 0xf2c6 <fatfs_tests+0x10c>
    f1d8:	eb 01       	movw	r28, r22
    f1da:	8c 01       	movw	r16, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    f1dc:	60 e9       	ldi	r22, 0x90	; 144
    f1de:	78 e0       	ldi	r23, 0x08	; 8
    f1e0:	c9 01       	movw	r24, r18
    f1e2:	0e 94 f5 32 	call	0x65ea	; 0x65ea <MATCH>
    f1e6:	89 2b       	or	r24, r25
    f1e8:	a1 f3       	breq	.-24     	; 0xf1d2 <fatfs_tests+0x18>
    {
        ptr = argv[ind++];
    f1ea:	ea 80       	ldd	r14, Y+2	; 0x02
    f1ec:	fb 80       	ldd	r15, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    f1ee:	e1 14       	cp	r14, r1
    f1f0:	f1 04       	cpc	r15, r1
    f1f2:	21 f4       	brne	.+8      	; 0xf1fc <fatfs_tests+0x42>
        {
            fatfs_help(1);
    f1f4:	81 e0       	ldi	r24, 0x01	; 1
    f1f6:	90 e0       	ldi	r25, 0x00	; 0
    f1f8:	c5 de       	rcall	.-630    	; 0xef84 <fatfs_help>
    f1fa:	63 c0       	rjmp	.+198    	; 0xf2c2 <fatfs_tests+0x108>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    f1fc:	67 e7       	ldi	r22, 0x77	; 119
    f1fe:	76 e1       	ldi	r23, 0x16	; 22
    f200:	c7 01       	movw	r24, r14
    f202:	0e 94 f5 32 	call	0x65ea	; 0x65ea <MATCH>
    f206:	89 2b       	or	r24, r25
    f208:	a9 f7       	brne	.-22     	; 0xf1f4 <fatfs_tests+0x3a>
    {
        return(0);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    f20a:	98 01       	movw	r18, r16
    f20c:	42 e0       	ldi	r20, 0x02	; 2
    f20e:	50 e0       	ldi	r21, 0x00	; 0
    f210:	66 e9       	ldi	r22, 0x96	; 150
    f212:	78 e0       	ldi	r23, 0x08	; 8
    f214:	c7 01       	movw	r24, r14
    f216:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
    f21a:	89 2b       	or	r24, r25
    f21c:	51 f1       	breq	.+84     	; 0xf272 <fatfs_tests+0xb8>
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
    f21e:	1f 93       	push	r17
    f220:	0f 93       	push	r16
    f222:	1f 92       	push	r1
    f224:	82 e0       	ldi	r24, 0x02	; 2
    f226:	8f 93       	push	r24
    f228:	8c e1       	ldi	r24, 0x1C	; 28
    f22a:	9b e0       	ldi	r25, 0x0B	; 11
    f22c:	1f 92       	push	r1
    f22e:	9f 93       	push	r25
    f230:	8f 93       	push	r24
    f232:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    f236:	7e 01       	movw	r14, r28
    f238:	f4 e0       	ldi	r31, 0x04	; 4
    f23a:	ef 0e       	add	r14, r31
    f23c:	f1 1c       	adc	r15, r1
        for(i=ind;i<argc;++i)
    f23e:	8d b7       	in	r24, 0x3d	; 61
    f240:	9e b7       	in	r25, 0x3e	; 62
    f242:	07 96       	adiw	r24, 0x07	; 7
    f244:	0f b6       	in	r0, 0x3f	; 63
    f246:	f8 94       	cli
    f248:	9e bf       	out	0x3e, r25	; 62
    f24a:	0f be       	out	0x3f, r0	; 63
    f24c:	8d bf       	out	0x3d, r24	; 61
    f24e:	c2 e0       	ldi	r28, 0x02	; 2
    f250:	d0 e0       	ldi	r29, 0x00	; 0
    f252:	c0 17       	cp	r28, r16
    f254:	d1 07       	cpc	r29, r17
    f256:	3c f4       	brge	.+14     	; 0xf266 <fatfs_tests+0xac>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
    f258:	f7 01       	movw	r30, r14
    f25a:	81 91       	ld	r24, Z+
    f25c:	91 91       	ld	r25, Z+
    f25e:	7f 01       	movw	r14, r30
    f260:	ad de       	rcall	.-678    	; 0xefbc <fatfs_ls>
    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    f262:	21 96       	adiw	r28, 0x01	; 1
    f264:	f6 cf       	rjmp	.-20     	; 0xf252 <fatfs_tests+0x98>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
            ++args;
        }
        if(!args)
    f266:	22 97       	sbiw	r28, 0x02	; 2
        {
            fatfs_ls("");
    f268:	61 f5       	brne	.+88     	; 0xf2c2 <fatfs_tests+0x108>
    f26a:	89 e8       	ldi	r24, 0x89	; 137
    f26c:	97 e1       	ldi	r25, 0x17	; 23
    f26e:	a6 de       	rcall	.-692    	; 0xefbc <fatfs_ls>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    f270:	28 c0       	rjmp	.+80     	; 0xf2c2 <fatfs_tests+0x108>
    f272:	98 01       	movw	r18, r16
    f274:	42 e0       	ldi	r20, 0x02	; 2
    f276:	50 e0       	ldi	r21, 0x00	; 0
    f278:	69 e9       	ldi	r22, 0x99	; 153
    f27a:	78 e0       	ldi	r23, 0x08	; 8
    f27c:	c7 01       	movw	r24, r14
    f27e:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
    {
        mmc_test();
    f282:	89 2b       	or	r24, r25
    f284:	11 f0       	breq	.+4      	; 0xf28a <fatfs_tests+0xd0>
    f286:	67 df       	rcall	.-306    	; 0xf156 <mmc_test>
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    f288:	1c c0       	rjmp	.+56     	; 0xf2c2 <fatfs_tests+0x108>
    f28a:	98 01       	movw	r18, r16
    f28c:	42 e0       	ldi	r20, 0x02	; 2
    f28e:	50 e0       	ldi	r21, 0x00	; 0
    f290:	62 ea       	ldi	r22, 0xA2	; 162
    f292:	78 e0       	ldi	r23, 0x08	; 8
    f294:	c7 01       	movw	r24, r14
    f296:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
    {
        mmc_init(1);
    f29a:	89 2b       	or	r24, r25
    f29c:	21 f0       	breq	.+8      	; 0xf2a6 <fatfs_tests+0xec>
    f29e:	81 e0       	ldi	r24, 0x01	; 1
    f2a0:	90 e0       	ldi	r25, 0x00	; 0
    f2a2:	c4 da       	rcall	.-2680   	; 0xe82c <mmc_init>
        return(1);
    }

    if (MATCHARGS(ptr,"status", (ind + 1), argc))
    f2a4:	0e c0       	rjmp	.+28     	; 0xf2c2 <fatfs_tests+0x108>
    f2a6:	98 01       	movw	r18, r16
    f2a8:	43 e0       	ldi	r20, 0x03	; 3
    f2aa:	50 e0       	ldi	r21, 0x00	; 0
    f2ac:	6b ea       	ldi	r22, 0xAB	; 171
    f2ae:	78 e0       	ldi	r23, 0x08	; 8
    f2b0:	c7 01       	movw	r24, r14
    f2b2:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
    f2b6:	89 2b       	or	r24, r25
    {
        fatfs_status(argv[ind]);
    f2b8:	09 f4       	brne	.+2      	; 0xf2bc <fatfs_tests+0x102>
    f2ba:	8b cf       	rjmp	.-234    	; 0xf1d2 <fatfs_tests+0x18>
    f2bc:	8c 81       	ldd	r24, Y+4	; 0x04
    f2be:	9d 81       	ldd	r25, Y+5	; 0x05
        }
        if(!args)
        {
            fatfs_ls("");
        }
        return(1);
    f2c0:	6e dc       	rcall	.-1828   	; 0xeb9e <fatfs_status>
    f2c2:	81 e0       	ldi	r24, 0x01	; 1
        return(1);
    }
#endif

    return(0);
}
    f2c4:	90 e0       	ldi	r25, 0x00	; 0
    f2c6:	cd b7       	in	r28, 0x3d	; 61
    f2c8:	de b7       	in	r29, 0x3e	; 62
    f2ca:	e6 e0       	ldi	r30, 0x06	; 6
    f2cc:	0c 94 5c ec 	jmp	0x1d8b8	; 0x1d8b8 <__epilogue_restores__+0x18>

0000f2d0 <fatfs_getc>:
    f2d0:	8f 92       	push	r8
    f2d2:	9f 92       	push	r9
    f2d4:	af 92       	push	r10
    f2d6:	bf 92       	push	r11
    f2d8:	ef 92       	push	r14
    f2da:	ff 92       	push	r15
    f2dc:	0f 93       	push	r16
    f2de:	1f 93       	push	r17
    f2e0:	cf 93       	push	r28
    f2e2:	df 93       	push	r29
    f2e4:	00 d0       	rcall	.+0      	; 0xf2e6 <fatfs_getc+0x16>
    f2e6:	1f 92       	push	r1
    f2e8:	cd b7       	in	r28, 0x3d	; 61
    f2ea:	de b7       	in	r29, 0x3e	; 62
    f2ec:	10 92 19 1d 	sts	0x1D19, r1	; 0x801d19 <errno+0x1>
    f2f0:	10 92 18 1d 	sts	0x1D18, r1	; 0x801d18 <errno>
    f2f4:	00 97       	sbiw	r24, 0x00	; 0
    f2f6:	39 f4       	brne	.+14     	; 0xf306 <fatfs_getc+0x36>
    f2f8:	89 e0       	ldi	r24, 0x09	; 9
    f2fa:	90 e0       	ldi	r25, 0x00	; 0
    f2fc:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
    f300:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
    f304:	2f c0       	rjmp	.+94     	; 0xf364 <fatfs_getc+0x94>
    f306:	fc 01       	movw	r30, r24
    f308:	e4 84       	ldd	r14, Z+12	; 0x0c
    f30a:	f5 84       	ldd	r15, Z+13	; 0x0d
    f30c:	e1 14       	cp	r14, r1
    f30e:	f1 04       	cpc	r15, r1
    f310:	99 f3       	breq	.-26     	; 0xf2f8 <fatfs_getc+0x28>
    f312:	8c 01       	movw	r16, r24
    f314:	9e 01       	movw	r18, r28
    f316:	2f 5f       	subi	r18, 0xFF	; 255
    f318:	3f 4f       	sbci	r19, 0xFF	; 255
    f31a:	41 e0       	ldi	r20, 0x01	; 1
    f31c:	50 e0       	ldi	r21, 0x00	; 0
    f31e:	be 01       	movw	r22, r28
    f320:	6d 5f       	subi	r22, 0xFD	; 253
    f322:	7f 4f       	sbci	r23, 0xFF	; 255
    f324:	c7 01       	movw	r24, r14
    f326:	0e 94 b1 5a 	call	0xb562	; 0xb562 <f_read>
    f32a:	00 97       	sbiw	r24, 0x00	; 0
    f32c:	31 f4       	brne	.+12     	; 0xf33a <fatfs_getc+0x6a>
    f32e:	29 81       	ldd	r18, Y+1	; 0x01
    f330:	3a 81       	ldd	r19, Y+2	; 0x02
    f332:	21 30       	cpi	r18, 0x01	; 1
    f334:	31 05       	cpc	r19, r1
    f336:	c9 f0       	breq	.+50     	; 0xf36a <fatfs_getc+0x9a>
    f338:	03 c0       	rjmp	.+6      	; 0xf340 <fatfs_getc+0x70>
    f33a:	84 31       	cpi	r24, 0x14	; 20
    f33c:	91 05       	cpc	r25, r1
    f33e:	40 f4       	brcc	.+16     	; 0xf350 <fatfs_getc+0x80>
    f340:	fc 01       	movw	r30, r24
    f342:	e2 5b       	subi	r30, 0xB2	; 178
    f344:	f8 4f       	sbci	r31, 0xF8	; 248
    f346:	80 81       	ld	r24, Z
    f348:	08 2e       	mov	r0, r24
    f34a:	00 0c       	add	r0, r0
    f34c:	99 0b       	sbc	r25, r25
    f34e:	02 c0       	rjmp	.+4      	; 0xf354 <fatfs_getc+0x84>
    f350:	83 e2       	ldi	r24, 0x23	; 35
    f352:	90 e0       	ldi	r25, 0x00	; 0
    f354:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
    f358:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
    f35c:	f8 01       	movw	r30, r16
    f35e:	83 81       	ldd	r24, Z+3	; 0x03
    f360:	80 62       	ori	r24, 0x20	; 32
    f362:	83 83       	std	Z+3, r24	; 0x03
    f364:	8f ef       	ldi	r24, 0xFF	; 255
    f366:	9f ef       	ldi	r25, 0xFF	; 255
    f368:	28 c0       	rjmp	.+80     	; 0xf3ba <fatfs_getc+0xea>
    f36a:	8b 81       	ldd	r24, Y+3	; 0x03
    f36c:	8d 30       	cpi	r24, 0x0D	; 13
    f36e:	01 f5       	brne	.+64     	; 0xf3b0 <fatfs_getc+0xe0>
    f370:	f7 01       	movw	r30, r14
    f372:	80 88       	ldd	r8, Z+16	; 0x10
    f374:	91 88       	ldd	r9, Z+17	; 0x11
    f376:	a2 88       	ldd	r10, Z+18	; 0x12
    f378:	b3 88       	ldd	r11, Z+19	; 0x13
    f37a:	9e 01       	movw	r18, r28
    f37c:	2f 5f       	subi	r18, 0xFF	; 255
    f37e:	3f 4f       	sbci	r19, 0xFF	; 255
    f380:	41 e0       	ldi	r20, 0x01	; 1
    f382:	50 e0       	ldi	r21, 0x00	; 0
    f384:	be 01       	movw	r22, r28
    f386:	6d 5f       	subi	r22, 0xFD	; 253
    f388:	7f 4f       	sbci	r23, 0xFF	; 255
    f38a:	c7 01       	movw	r24, r14
    f38c:	0e 94 b1 5a 	call	0xb562	; 0xb562 <f_read>
    f390:	89 2b       	or	r24, r25
    f392:	89 f4       	brne	.+34     	; 0xf3b6 <fatfs_getc+0xe6>
    f394:	89 81       	ldd	r24, Y+1	; 0x01
    f396:	9a 81       	ldd	r25, Y+2	; 0x02
    f398:	01 97       	sbiw	r24, 0x01	; 1
    f39a:	69 f4       	brne	.+26     	; 0xf3b6 <fatfs_getc+0xe6>
    f39c:	8b 81       	ldd	r24, Y+3	; 0x03
    f39e:	8a 30       	cpi	r24, 0x0A	; 10
    f3a0:	31 f0       	breq	.+12     	; 0xf3ae <fatfs_getc+0xde>
    f3a2:	b5 01       	movw	r22, r10
    f3a4:	a4 01       	movw	r20, r8
    f3a6:	c7 01       	movw	r24, r14
    f3a8:	0e 94 bb 5f 	call	0xbf76	; 0xbf76 <f_lseek>
    f3ac:	04 c0       	rjmp	.+8      	; 0xf3b6 <fatfs_getc+0xe6>
    f3ae:	8b 83       	std	Y+3, r24	; 0x03
    f3b0:	8b 81       	ldd	r24, Y+3	; 0x03
    f3b2:	90 e0       	ldi	r25, 0x00	; 0
    f3b4:	02 c0       	rjmp	.+4      	; 0xf3ba <fatfs_getc+0xea>
    f3b6:	8a e0       	ldi	r24, 0x0A	; 10
    f3b8:	90 e0       	ldi	r25, 0x00	; 0
    f3ba:	0f 90       	pop	r0
    f3bc:	0f 90       	pop	r0
    f3be:	0f 90       	pop	r0
    f3c0:	df 91       	pop	r29
    f3c2:	cf 91       	pop	r28
    f3c4:	1f 91       	pop	r17
    f3c6:	0f 91       	pop	r16
    f3c8:	ff 90       	pop	r15
    f3ca:	ef 90       	pop	r14
    f3cc:	bf 90       	pop	r11
    f3ce:	af 90       	pop	r10
    f3d0:	9f 90       	pop	r9
    f3d2:	8f 90       	pop	r8
    f3d4:	08 95       	ret

0000f3d6 <fatfs_putc>:
    f3d6:	a3 e0       	ldi	r26, 0x03	; 3
    f3d8:	b0 e0       	ldi	r27, 0x00	; 0
    f3da:	e1 ef       	ldi	r30, 0xF1	; 241
    f3dc:	f9 e7       	ldi	r31, 0x79	; 121
    f3de:	0c 94 42 ec 	jmp	0x1d884	; 0x1d884 <__prologue_saves__+0x1c>
    f3e2:	8b 83       	std	Y+3, r24	; 0x03
    f3e4:	10 92 19 1d 	sts	0x1D19, r1	; 0x801d19 <errno+0x1>
    f3e8:	10 92 18 1d 	sts	0x1D18, r1	; 0x801d18 <errno>
    f3ec:	61 15       	cp	r22, r1
    f3ee:	71 05       	cpc	r23, r1
    f3f0:	39 f4       	brne	.+14     	; 0xf400 <fatfs_putc+0x2a>
    f3f2:	89 e0       	ldi	r24, 0x09	; 9
    f3f4:	90 e0       	ldi	r25, 0x00	; 0
    f3f6:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
    f3fa:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
    f3fe:	2d c0       	rjmp	.+90     	; 0xf45a <fatfs_putc+0x84>
    f400:	fb 01       	movw	r30, r22
    f402:	84 85       	ldd	r24, Z+12	; 0x0c
    f404:	95 85       	ldd	r25, Z+13	; 0x0d
    f406:	00 97       	sbiw	r24, 0x00	; 0
    f408:	a1 f3       	breq	.-24     	; 0xf3f2 <fatfs_putc+0x1c>
    f40a:	8b 01       	movw	r16, r22
    f40c:	9e 01       	movw	r18, r28
    f40e:	2f 5f       	subi	r18, 0xFF	; 255
    f410:	3f 4f       	sbci	r19, 0xFF	; 255
    f412:	41 e0       	ldi	r20, 0x01	; 1
    f414:	50 e0       	ldi	r21, 0x00	; 0
    f416:	be 01       	movw	r22, r28
    f418:	6d 5f       	subi	r22, 0xFD	; 253
    f41a:	7f 4f       	sbci	r23, 0xFF	; 255
    f41c:	0e 94 fc 5b 	call	0xb7f8	; 0xb7f8 <f_write>
    f420:	00 97       	sbiw	r24, 0x00	; 0
    f422:	31 f4       	brne	.+12     	; 0xf430 <fatfs_putc+0x5a>
    f424:	29 81       	ldd	r18, Y+1	; 0x01
    f426:	3a 81       	ldd	r19, Y+2	; 0x02
    f428:	21 30       	cpi	r18, 0x01	; 1
    f42a:	31 05       	cpc	r19, r1
    f42c:	c9 f0       	breq	.+50     	; 0xf460 <fatfs_putc+0x8a>
    f42e:	03 c0       	rjmp	.+6      	; 0xf436 <fatfs_putc+0x60>
    f430:	84 31       	cpi	r24, 0x14	; 20
    f432:	91 05       	cpc	r25, r1
    f434:	40 f4       	brcc	.+16     	; 0xf446 <fatfs_putc+0x70>
    f436:	fc 01       	movw	r30, r24
    f438:	e2 5b       	subi	r30, 0xB2	; 178
    f43a:	f8 4f       	sbci	r31, 0xF8	; 248
    f43c:	80 81       	ld	r24, Z
    f43e:	08 2e       	mov	r0, r24
    f440:	00 0c       	add	r0, r0
    f442:	99 0b       	sbc	r25, r25
    f444:	02 c0       	rjmp	.+4      	; 0xf44a <fatfs_putc+0x74>
    f446:	83 e2       	ldi	r24, 0x23	; 35
    f448:	90 e0       	ldi	r25, 0x00	; 0
    f44a:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
    f44e:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
    f452:	f8 01       	movw	r30, r16
    f454:	83 81       	ldd	r24, Z+3	; 0x03
    f456:	80 62       	ori	r24, 0x20	; 32
    f458:	83 83       	std	Z+3, r24	; 0x03
    f45a:	8f ef       	ldi	r24, 0xFF	; 255
    f45c:	9f ef       	ldi	r25, 0xFF	; 255
    f45e:	02 c0       	rjmp	.+4      	; 0xf464 <fatfs_putc+0x8e>
    f460:	8b 81       	ldd	r24, Y+3	; 0x03
    f462:	90 e0       	ldi	r25, 0x00	; 0
    f464:	23 96       	adiw	r28, 0x03	; 3
    f466:	e4 e0       	ldi	r30, 0x04	; 4
    f468:	0c 94 5e ec 	jmp	0x1d8bc	; 0x1d8bc <__epilogue_restores__+0x1c>

0000f46c <fgetc>:
    f46c:	cf 93       	push	r28
    f46e:	df 93       	push	r29
    f470:	ec 01       	movw	r28, r24
    f472:	00 97       	sbiw	r24, 0x00	; 0
    f474:	39 f4       	brne	.+14     	; 0xf484 <fgetc+0x18>
    f476:	89 e0       	ldi	r24, 0x09	; 9
    f478:	90 e0       	ldi	r25, 0x00	; 0
    f47a:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
    f47e:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
    f482:	40 c0       	rjmp	.+128    	; 0xf504 <fgetc+0x98>
    f484:	2b 81       	ldd	r18, Y+3	; 0x03
    f486:	20 ff       	sbrs	r18, 0
    f488:	3d c0       	rjmp	.+122    	; 0xf504 <fgetc+0x98>
    f48a:	26 ff       	sbrs	r18, 6
    f48c:	0a c0       	rjmp	.+20     	; 0xf4a2 <fgetc+0x36>
    f48e:	2f 7b       	andi	r18, 0xBF	; 191
    f490:	2b 83       	std	Y+3, r18	; 0x03
    f492:	8e 81       	ldd	r24, Y+6	; 0x06
    f494:	9f 81       	ldd	r25, Y+7	; 0x07
    f496:	01 96       	adiw	r24, 0x01	; 1
    f498:	9f 83       	std	Y+7, r25	; 0x07
    f49a:	8e 83       	std	Y+6, r24	; 0x06
    f49c:	8a 81       	ldd	r24, Y+2	; 0x02
    f49e:	90 e0       	ldi	r25, 0x00	; 0
    f4a0:	33 c0       	rjmp	.+102    	; 0xf508 <fgetc+0x9c>
    f4a2:	22 ff       	sbrs	r18, 2
    f4a4:	0d c0       	rjmp	.+26     	; 0xf4c0 <fgetc+0x54>
    f4a6:	e8 81       	ld	r30, Y
    f4a8:	f9 81       	ldd	r31, Y+1	; 0x01
    f4aa:	80 81       	ld	r24, Z
    f4ac:	90 e0       	ldi	r25, 0x00	; 0
    f4ae:	00 97       	sbiw	r24, 0x00	; 0
    f4b0:	19 f4       	brne	.+6      	; 0xf4b8 <fgetc+0x4c>
    f4b2:	20 62       	ori	r18, 0x20	; 32
    f4b4:	2b 83       	std	Y+3, r18	; 0x03
    f4b6:	26 c0       	rjmp	.+76     	; 0xf504 <fgetc+0x98>
    f4b8:	31 96       	adiw	r30, 0x01	; 1
    f4ba:	f9 83       	std	Y+1, r31	; 0x01
    f4bc:	e8 83       	st	Y, r30
    f4be:	1b c0       	rjmp	.+54     	; 0xf4f6 <fgetc+0x8a>
    f4c0:	ea 85       	ldd	r30, Y+10	; 0x0a
    f4c2:	fb 85       	ldd	r31, Y+11	; 0x0b
    f4c4:	30 97       	sbiw	r30, 0x00	; 0
    f4c6:	59 f4       	brne	.+22     	; 0xf4de <fgetc+0x72>
    f4c8:	88 e7       	ldi	r24, 0x78	; 120
    f4ca:	9c e0       	ldi	r25, 0x0C	; 12
    f4cc:	1f 92       	push	r1
    f4ce:	9f 93       	push	r25
    f4d0:	8f 93       	push	r24
    f4d2:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    f4d6:	0f 90       	pop	r0
    f4d8:	0f 90       	pop	r0
    f4da:	0f 90       	pop	r0
    f4dc:	13 c0       	rjmp	.+38     	; 0xf504 <fgetc+0x98>
    f4de:	09 95       	icall
    f4e0:	97 ff       	sbrs	r25, 7
    f4e2:	09 c0       	rjmp	.+18     	; 0xf4f6 <fgetc+0x8a>
    f4e4:	2b 81       	ldd	r18, Y+3	; 0x03
    f4e6:	02 96       	adiw	r24, 0x02	; 2
    f4e8:	11 f0       	breq	.+4      	; 0xf4ee <fgetc+0x82>
    f4ea:	80 e2       	ldi	r24, 0x20	; 32
    f4ec:	01 c0       	rjmp	.+2      	; 0xf4f0 <fgetc+0x84>
    f4ee:	80 e1       	ldi	r24, 0x10	; 16
    f4f0:	82 2b       	or	r24, r18
    f4f2:	8b 83       	std	Y+3, r24	; 0x03
    f4f4:	07 c0       	rjmp	.+14     	; 0xf504 <fgetc+0x98>
    f4f6:	2e 81       	ldd	r18, Y+6	; 0x06
    f4f8:	3f 81       	ldd	r19, Y+7	; 0x07
    f4fa:	2f 5f       	subi	r18, 0xFF	; 255
    f4fc:	3f 4f       	sbci	r19, 0xFF	; 255
    f4fe:	3f 83       	std	Y+7, r19	; 0x07
    f500:	2e 83       	std	Y+6, r18	; 0x06
    f502:	02 c0       	rjmp	.+4      	; 0xf508 <fgetc+0x9c>
    f504:	8f ef       	ldi	r24, 0xFF	; 255
    f506:	9f ef       	ldi	r25, 0xFF	; 255
    f508:	df 91       	pop	r29
    f50a:	cf 91       	pop	r28
    f50c:	08 95       	ret

0000f50e <fputc>:
    f50e:	cf 93       	push	r28
    f510:	df 93       	push	r29
    f512:	eb 01       	movw	r28, r22
    f514:	10 92 19 1d 	sts	0x1D19, r1	; 0x801d19 <errno+0x1>
    f518:	10 92 18 1d 	sts	0x1D18, r1	; 0x801d18 <errno>
    f51c:	20 91 1c 1d 	lds	r18, 0x1D1C	; 0x801d1c <__iob+0x2>
    f520:	30 91 1d 1d 	lds	r19, 0x1D1D	; 0x801d1d <__iob+0x3>
    f524:	62 17       	cp	r22, r18
    f526:	73 07       	cpc	r23, r19
    f528:	49 f0       	breq	.+18     	; 0xf53c <fputc+0x2e>
    f52a:	20 91 1e 1d 	lds	r18, 0x1D1E	; 0x801d1e <__iob+0x4>
    f52e:	30 91 1f 1d 	lds	r19, 0x1D1F	; 0x801d1f <__iob+0x5>
    f532:	62 17       	cp	r22, r18
    f534:	73 07       	cpc	r23, r19
    f536:	11 f0       	breq	.+4      	; 0xf53c <fputc+0x2e>
    f538:	4e df       	rcall	.-356    	; 0xf3d6 <fatfs_putc>
    f53a:	33 c0       	rjmp	.+102    	; 0xf5a2 <fputc+0x94>
    f53c:	2b 81       	ldd	r18, Y+3	; 0x03
    f53e:	21 ff       	sbrs	r18, 1
    f540:	2e c0       	rjmp	.+92     	; 0xf59e <fputc+0x90>
    f542:	22 ff       	sbrs	r18, 2
    f544:	10 c0       	rjmp	.+32     	; 0xf566 <fputc+0x58>
    f546:	4e 81       	ldd	r20, Y+6	; 0x06
    f548:	5f 81       	ldd	r21, Y+7	; 0x07
    f54a:	2c 81       	ldd	r18, Y+4	; 0x04
    f54c:	3d 81       	ldd	r19, Y+5	; 0x05
    f54e:	42 17       	cp	r20, r18
    f550:	53 07       	cpc	r21, r19
    f552:	f4 f4       	brge	.+60     	; 0xf590 <fputc+0x82>
    f554:	e8 81       	ld	r30, Y
    f556:	f9 81       	ldd	r31, Y+1	; 0x01
    f558:	9f 01       	movw	r18, r30
    f55a:	2f 5f       	subi	r18, 0xFF	; 255
    f55c:	3f 4f       	sbci	r19, 0xFF	; 255
    f55e:	39 83       	std	Y+1, r19	; 0x01
    f560:	28 83       	st	Y, r18
    f562:	80 83       	st	Z, r24
    f564:	15 c0       	rjmp	.+42     	; 0xf590 <fputc+0x82>
    f566:	e8 85       	ldd	r30, Y+8	; 0x08
    f568:	f9 85       	ldd	r31, Y+9	; 0x09
    f56a:	30 97       	sbiw	r30, 0x00	; 0
    f56c:	59 f4       	brne	.+22     	; 0xf584 <fputc+0x76>
    f56e:	80 e6       	ldi	r24, 0x60	; 96
    f570:	9c e0       	ldi	r25, 0x0C	; 12
    f572:	1f 92       	push	r1
    f574:	9f 93       	push	r25
    f576:	8f 93       	push	r24
    f578:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    f57c:	0f 90       	pop	r0
    f57e:	0f 90       	pop	r0
    f580:	0f 90       	pop	r0
    f582:	0d c0       	rjmp	.+26     	; 0xf59e <fputc+0x90>
    f584:	be 01       	movw	r22, r28
    f586:	09 95       	icall
    f588:	8f 3f       	cpi	r24, 0xFF	; 255
    f58a:	2f ef       	ldi	r18, 0xFF	; 255
    f58c:	92 07       	cpc	r25, r18
    f58e:	39 f0       	breq	.+14     	; 0xf59e <fputc+0x90>
    f590:	2e 81       	ldd	r18, Y+6	; 0x06
    f592:	3f 81       	ldd	r19, Y+7	; 0x07
    f594:	2f 5f       	subi	r18, 0xFF	; 255
    f596:	3f 4f       	sbci	r19, 0xFF	; 255
    f598:	3f 83       	std	Y+7, r19	; 0x07
    f59a:	2e 83       	std	Y+6, r18	; 0x06
    f59c:	02 c0       	rjmp	.+4      	; 0xf5a2 <fputc+0x94>
    f59e:	8f ef       	ldi	r24, 0xFF	; 255
    f5a0:	9f ef       	ldi	r25, 0xFF	; 255
    f5a2:	df 91       	pop	r29
    f5a4:	cf 91       	pop	r28
    f5a6:	08 95       	ret

0000f5a8 <_fprintf_putc>:
    f5a8:	fc 01       	movw	r30, r24
    f5aa:	86 2f       	mov	r24, r22
    f5ac:	26 81       	ldd	r18, Z+6	; 0x06
    f5ae:	37 81       	ldd	r19, Z+7	; 0x07
    f5b0:	2f 5f       	subi	r18, 0xFF	; 255
    f5b2:	3f 4f       	sbci	r19, 0xFF	; 255
    f5b4:	37 83       	std	Z+7, r19	; 0x07
    f5b6:	26 83       	std	Z+6, r18	; 0x06
    f5b8:	62 81       	ldd	r22, Z+2	; 0x02
    f5ba:	73 81       	ldd	r23, Z+3	; 0x03
    f5bc:	90 e0       	ldi	r25, 0x00	; 0
    f5be:	a7 cf       	rjmp	.-178    	; 0xf50e <fputc>
    f5c0:	08 95       	ret

0000f5c2 <getchar>:
    f5c2:	80 91 1a 1d 	lds	r24, 0x1D1A	; 0x801d1a <__iob>
    f5c6:	90 91 1b 1d 	lds	r25, 0x1D1B	; 0x801d1b <__iob+0x1>
    f5ca:	50 cf       	rjmp	.-352    	; 0xf46c <fgetc>
    f5cc:	08 95       	ret

0000f5ce <putchar>:
    f5ce:	60 91 1c 1d 	lds	r22, 0x1D1C	; 0x801d1c <__iob+0x2>
    f5d2:	70 91 1d 1d 	lds	r23, 0x1D1D	; 0x801d1d <__iob+0x3>
    f5d6:	9b cf       	rjmp	.-202    	; 0xf50e <fputc>
    f5d8:	08 95       	ret

0000f5da <fgets>:
    f5da:	a0 e0       	ldi	r26, 0x00	; 0
    f5dc:	b0 e0       	ldi	r27, 0x00	; 0
    f5de:	e3 ef       	ldi	r30, 0xF3	; 243
    f5e0:	fa e7       	ldi	r31, 0x7A	; 122
    f5e2:	0c 94 3e ec 	jmp	0x1d87c	; 0x1d87c <__prologue_saves__+0x14>
    f5e6:	7c 01       	movw	r14, r24
    f5e8:	6a 01       	movw	r12, r20
    f5ea:	8b 01       	movw	r16, r22
    f5ec:	c0 e0       	ldi	r28, 0x00	; 0
    f5ee:	d0 e0       	ldi	r29, 0x00	; 0
    f5f0:	01 15       	cp	r16, r1
    f5f2:	11 05       	cpc	r17, r1
    f5f4:	41 f0       	breq	.+16     	; 0xf606 <fgets+0x2c>
    f5f6:	c6 01       	movw	r24, r12
    f5f8:	39 df       	rcall	.-398    	; 0xf46c <fgetc>
    f5fa:	8f 3f       	cpi	r24, 0xFF	; 255
    f5fc:	2f ef       	ldi	r18, 0xFF	; 255
    f5fe:	92 07       	cpc	r25, r18
    f600:	39 f4       	brne	.+14     	; 0xf610 <fgets+0x36>
    f602:	20 97       	sbiw	r28, 0x00	; 0
    f604:	b9 f0       	breq	.+46     	; 0xf634 <fgets+0x5a>
    f606:	ce 0d       	add	r28, r14
    f608:	df 1d       	adc	r29, r15
    f60a:	18 82       	st	Y, r1
    f60c:	c7 01       	movw	r24, r14
    f60e:	14 c0       	rjmp	.+40     	; 0xf638 <fgets+0x5e>
    f610:	8a 30       	cpi	r24, 0x0A	; 10
    f612:	91 05       	cpc	r25, r1
    f614:	c1 f3       	breq	.-16     	; 0xf606 <fgets+0x2c>
    f616:	88 30       	cpi	r24, 0x08	; 8
    f618:	91 05       	cpc	r25, r1
    f61a:	21 f4       	brne	.+8      	; 0xf624 <fgets+0x4a>
    f61c:	20 97       	sbiw	r28, 0x00	; 0
    f61e:	39 f0       	breq	.+14     	; 0xf62e <fgets+0x54>
    f620:	21 97       	sbiw	r28, 0x01	; 1
    f622:	05 c0       	rjmp	.+10     	; 0xf62e <fgets+0x54>
    f624:	f7 01       	movw	r30, r14
    f626:	ec 0f       	add	r30, r28
    f628:	fd 1f       	adc	r31, r29
    f62a:	80 83       	st	Z, r24
    f62c:	21 96       	adiw	r28, 0x01	; 1
    f62e:	01 50       	subi	r16, 0x01	; 1
    f630:	11 09       	sbc	r17, r1
    f632:	de cf       	rjmp	.-68     	; 0xf5f0 <fgets+0x16>
    f634:	80 e0       	ldi	r24, 0x00	; 0
    f636:	90 e0       	ldi	r25, 0x00	; 0
    f638:	cd b7       	in	r28, 0x3d	; 61
    f63a:	de b7       	in	r29, 0x3e	; 62
    f63c:	e8 e0       	ldi	r30, 0x08	; 8
    f63e:	0c 94 5a ec 	jmp	0x1d8b4	; 0x1d8b4 <__epilogue_restores__+0x14>

0000f642 <fputs>:
    f642:	0f 93       	push	r16
    f644:	1f 93       	push	r17
    f646:	cf 93       	push	r28
    f648:	df 93       	push	r29
    f64a:	8b 01       	movw	r16, r22
    f64c:	ec 01       	movw	r28, r24
    f64e:	89 91       	ld	r24, Y+
    f650:	88 23       	and	r24, r24
    f652:	41 f0       	breq	.+16     	; 0xf664 <fputs+0x22>
    f654:	b8 01       	movw	r22, r16
    f656:	90 e0       	ldi	r25, 0x00	; 0
    f658:	5a df       	rcall	.-332    	; 0xf50e <fputc>
    f65a:	8f 3f       	cpi	r24, 0xFF	; 255
    f65c:	2f ef       	ldi	r18, 0xFF	; 255
    f65e:	92 07       	cpc	r25, r18
    f660:	b1 f7       	brne	.-20     	; 0xf64e <fputs+0xc>
    f662:	02 c0       	rjmp	.+4      	; 0xf668 <fputs+0x26>
    f664:	80 e0       	ldi	r24, 0x00	; 0
    f666:	90 e0       	ldi	r25, 0x00	; 0
    f668:	df 91       	pop	r29
    f66a:	cf 91       	pop	r28
    f66c:	1f 91       	pop	r17
    f66e:	0f 91       	pop	r16
    f670:	08 95       	ret

0000f672 <puts>:
    f672:	cf 93       	push	r28
    f674:	df 93       	push	r29
    f676:	ec 01       	movw	r28, r24
    f678:	89 91       	ld	r24, Y+
    f67a:	60 91 1c 1d 	lds	r22, 0x1D1C	; 0x801d1c <__iob+0x2>
    f67e:	70 91 1d 1d 	lds	r23, 0x1D1D	; 0x801d1d <__iob+0x3>
    f682:	88 23       	and	r24, r24
    f684:	39 f0       	breq	.+14     	; 0xf694 <puts+0x22>
    f686:	90 e0       	ldi	r25, 0x00	; 0
    f688:	42 df       	rcall	.-380    	; 0xf50e <fputc>
    f68a:	8f 3f       	cpi	r24, 0xFF	; 255
    f68c:	2f ef       	ldi	r18, 0xFF	; 255
    f68e:	92 07       	cpc	r25, r18
    f690:	99 f7       	brne	.-26     	; 0xf678 <puts+0x6>
    f692:	03 c0       	rjmp	.+6      	; 0xf69a <puts+0x28>
    f694:	8a e0       	ldi	r24, 0x0A	; 10
    f696:	90 e0       	ldi	r25, 0x00	; 0
    f698:	3a df       	rcall	.-396    	; 0xf50e <fputc>
    f69a:	df 91       	pop	r29
    f69c:	cf 91       	pop	r28
    f69e:	08 95       	ret

0000f6a0 <fileno>:
    f6a0:	00 97       	sbiw	r24, 0x00	; 0
    f6a2:	39 f4       	brne	.+14     	; 0xf6b2 <fileno+0x12>
    f6a4:	89 e0       	ldi	r24, 0x09	; 9
    f6a6:	90 e0       	ldi	r25, 0x00	; 0
    f6a8:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
    f6ac:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
    f6b0:	0e c0       	rjmp	.+28     	; 0xf6ce <fileno+0x2e>
    f6b2:	ea e1       	ldi	r30, 0x1A	; 26
    f6b4:	fd e1       	ldi	r31, 0x1D	; 29
    f6b6:	20 e0       	ldi	r18, 0x00	; 0
    f6b8:	30 e0       	ldi	r19, 0x00	; 0
    f6ba:	41 91       	ld	r20, Z+
    f6bc:	51 91       	ld	r21, Z+
    f6be:	84 17       	cp	r24, r20
    f6c0:	95 07       	cpc	r25, r21
    f6c2:	41 f0       	breq	.+16     	; 0xf6d4 <fileno+0x34>
    f6c4:	2f 5f       	subi	r18, 0xFF	; 255
    f6c6:	3f 4f       	sbci	r19, 0xFF	; 255
    f6c8:	20 31       	cpi	r18, 0x10	; 16
    f6ca:	31 05       	cpc	r19, r1
    f6cc:	b1 f7       	brne	.-20     	; 0xf6ba <fileno+0x1a>
    f6ce:	8f ef       	ldi	r24, 0xFF	; 255
    f6d0:	9f ef       	ldi	r25, 0xFF	; 255
    f6d2:	08 95       	ret
    f6d4:	c9 01       	movw	r24, r18
    f6d6:	08 95       	ret

0000f6d8 <fileno_to_stream>:
    f6d8:	80 31       	cpi	r24, 0x10	; 16
    f6da:	91 05       	cpc	r25, r1
    f6dc:	48 f4       	brcc	.+18     	; 0xf6f0 <fileno_to_stream+0x18>
    f6de:	88 0f       	add	r24, r24
    f6e0:	99 1f       	adc	r25, r25
    f6e2:	fc 01       	movw	r30, r24
    f6e4:	e6 5e       	subi	r30, 0xE6	; 230
    f6e6:	f2 4e       	sbci	r31, 0xE2	; 226
    f6e8:	80 81       	ld	r24, Z
    f6ea:	91 81       	ldd	r25, Z+1	; 0x01
    f6ec:	00 97       	sbiw	r24, 0x00	; 0
    f6ee:	41 f4       	brne	.+16     	; 0xf700 <fileno_to_stream+0x28>
    f6f0:	89 e0       	ldi	r24, 0x09	; 9
    f6f2:	90 e0       	ldi	r25, 0x00	; 0
    f6f4:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
    f6f8:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
    f6fc:	80 e0       	ldi	r24, 0x00	; 0
    f6fe:	90 e0       	ldi	r25, 0x00	; 0
    f700:	08 95       	ret

0000f702 <mctime>:
    f702:	a4 e0       	ldi	r26, 0x04	; 4
    f704:	b0 e0       	ldi	r27, 0x00	; 0
    f706:	e7 e8       	ldi	r30, 0x87	; 135
    f708:	fb e7       	ldi	r31, 0x7B	; 123
    f70a:	0c 94 44 ec 	jmp	0x1d888	; 0x1d888 <__prologue_saves__+0x20>
    f70e:	69 83       	std	Y+1, r22	; 0x01
    f710:	7a 83       	std	Y+2, r23	; 0x02
    f712:	8b 83       	std	Y+3, r24	; 0x03
    f714:	9c 83       	std	Y+4, r25	; 0x04
    f716:	10 92 19 1d 	sts	0x1D19, r1	; 0x801d19 <errno+0x1>
    f71a:	10 92 18 1d 	sts	0x1D18, r1	; 0x801d18 <errno>
    f71e:	ce 01       	movw	r24, r28
    f720:	01 96       	adiw	r24, 0x01	; 1
    f722:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <ctime_gm>
    f726:	fc 01       	movw	r30, r24
    f728:	01 90       	ld	r0, Z+
    f72a:	00 20       	and	r0, r0
    f72c:	e9 f7       	brne	.-6      	; 0xf728 <mctime+0x26>
    f72e:	31 97       	sbiw	r30, 0x01	; 1
    f730:	e8 1b       	sub	r30, r24
    f732:	f9 0b       	sbc	r31, r25
    f734:	39 f0       	breq	.+14     	; 0xf744 <mctime+0x42>
    f736:	31 97       	sbiw	r30, 0x01	; 1
    f738:	e8 0f       	add	r30, r24
    f73a:	f9 1f       	adc	r31, r25
    f73c:	20 81       	ld	r18, Z
    f73e:	2a 30       	cpi	r18, 0x0A	; 10
    f740:	09 f4       	brne	.+2      	; 0xf744 <mctime+0x42>
    f742:	10 82       	st	Z, r1
    f744:	24 96       	adiw	r28, 0x04	; 4
    f746:	e2 e0       	ldi	r30, 0x02	; 2
    f748:	0c 94 60 ec 	jmp	0x1d8c0	; 0x1d8c0 <__epilogue_restores__+0x20>

0000f74c <dump_stat>:
    f74c:	cf 92       	push	r12
    f74e:	df 92       	push	r13
    f750:	ef 92       	push	r14
    f752:	ff 92       	push	r15
    f754:	cf 93       	push	r28
    f756:	df 93       	push	r29
    f758:	ec 01       	movw	r28, r24
    f75a:	c8 84       	ldd	r12, Y+8	; 0x08
    f75c:	d9 84       	ldd	r13, Y+9	; 0x09
    f75e:	ea 84       	ldd	r14, Y+10	; 0x0a
    f760:	fb 84       	ldd	r15, Y+11	; 0x0b
    f762:	8b 8d       	ldd	r24, Y+27	; 0x1b
    f764:	8f 93       	push	r24
    f766:	8a 8d       	ldd	r24, Y+26	; 0x1a
    f768:	8f 93       	push	r24
    f76a:	89 8d       	ldd	r24, Y+25	; 0x19
    f76c:	8f 93       	push	r24
    f76e:	88 8d       	ldd	r24, Y+24	; 0x18
    f770:	8f 93       	push	r24
    f772:	87 e4       	ldi	r24, 0x47	; 71
    f774:	9c e0       	ldi	r25, 0x0C	; 12
    f776:	1f 92       	push	r1
    f778:	9f 93       	push	r25
    f77a:	8f 93       	push	r24
    f77c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    f780:	8e e3       	ldi	r24, 0x3E	; 62
    f782:	9c e0       	ldi	r25, 0x0C	; 12
    f784:	1f 92       	push	r1
    f786:	9f 93       	push	r25
    f788:	8f 93       	push	r24
    f78a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    f78e:	d7 01       	movw	r26, r14
    f790:	c6 01       	movw	r24, r12
    f792:	88 27       	eor	r24, r24
    f794:	90 7f       	andi	r25, 0xF0	; 240
    f796:	aa 27       	eor	r26, r26
    f798:	bb 27       	eor	r27, r27
    f79a:	2d b7       	in	r18, 0x3d	; 61
    f79c:	3e b7       	in	r19, 0x3e	; 62
    f79e:	26 5f       	subi	r18, 0xF6	; 246
    f7a0:	3f 4f       	sbci	r19, 0xFF	; 255
    f7a2:	0f b6       	in	r0, 0x3f	; 63
    f7a4:	f8 94       	cli
    f7a6:	3e bf       	out	0x3e, r19	; 62
    f7a8:	0f be       	out	0x3f, r0	; 63
    f7aa:	2d bf       	out	0x3d, r18	; 61
    f7ac:	81 15       	cp	r24, r1
    f7ae:	30 e4       	ldi	r19, 0x40	; 64
    f7b0:	93 07       	cpc	r25, r19
    f7b2:	a1 05       	cpc	r26, r1
    f7b4:	b1 05       	cpc	r27, r1
    f7b6:	19 f4       	brne	.+6      	; 0xf7be <dump_stat+0x72>
    f7b8:	89 e3       	ldi	r24, 0x39	; 57
    f7ba:	9c e0       	ldi	r25, 0x0C	; 12
    f7bc:	0a c0       	rjmp	.+20     	; 0xf7d2 <dump_stat+0x86>
    f7be:	81 15       	cp	r24, r1
    f7c0:	90 48       	sbci	r25, 0x80	; 128
    f7c2:	a1 05       	cpc	r26, r1
    f7c4:	b1 05       	cpc	r27, r1
    f7c6:	19 f4       	brne	.+6      	; 0xf7ce <dump_stat+0x82>
    f7c8:	83 e3       	ldi	r24, 0x33	; 51
    f7ca:	9c e0       	ldi	r25, 0x0C	; 12
    f7cc:	02 c0       	rjmp	.+4      	; 0xf7d2 <dump_stat+0x86>
    f7ce:	8a e2       	ldi	r24, 0x2A	; 42
    f7d0:	9c e0       	ldi	r25, 0x0C	; 12
    f7d2:	1f 92       	push	r1
    f7d4:	9f 93       	push	r25
    f7d6:	8f 93       	push	r24
    f7d8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    f7dc:	0f 90       	pop	r0
    f7de:	0f 90       	pop	r0
    f7e0:	0f 90       	pop	r0
    f7e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    f7e4:	8f 93       	push	r24
    f7e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    f7e8:	8f 93       	push	r24
    f7ea:	89 85       	ldd	r24, Y+9	; 0x09
    f7ec:	8f 93       	push	r24
    f7ee:	88 85       	ldd	r24, Y+8	; 0x08
    f7f0:	8f 93       	push	r24
    f7f2:	8d e1       	ldi	r24, 0x1D	; 29
    f7f4:	9c e0       	ldi	r25, 0x0C	; 12
    f7f6:	1f 92       	push	r1
    f7f8:	9f 93       	push	r25
    f7fa:	8f 93       	push	r24
    f7fc:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    f800:	88 89       	ldd	r24, Y+16	; 0x10
    f802:	99 89       	ldd	r25, Y+17	; 0x11
    f804:	1f 92       	push	r1
    f806:	1f 92       	push	r1
    f808:	9f 93       	push	r25
    f80a:	8f 93       	push	r24
    f80c:	80 e1       	ldi	r24, 0x10	; 16
    f80e:	9c e0       	ldi	r25, 0x0C	; 12
    f810:	1f 92       	push	r1
    f812:	9f 93       	push	r25
    f814:	8f 93       	push	r24
    f816:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    f81a:	8a 89       	ldd	r24, Y+18	; 0x12
    f81c:	9b 89       	ldd	r25, Y+19	; 0x13
    f81e:	1f 92       	push	r1
    f820:	1f 92       	push	r1
    f822:	9f 93       	push	r25
    f824:	8f 93       	push	r24
    f826:	83 e0       	ldi	r24, 0x03	; 3
    f828:	9c e0       	ldi	r25, 0x0C	; 12
    f82a:	1f 92       	push	r1
    f82c:	9f 93       	push	r25
    f82e:	8f 93       	push	r24
    f830:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    f834:	6c a1       	ldd	r22, Y+36	; 0x24
    f836:	7d a1       	ldd	r23, Y+37	; 0x25
    f838:	8e a1       	ldd	r24, Y+38	; 0x26
    f83a:	9f a1       	ldd	r25, Y+39	; 0x27
    f83c:	62 df       	rcall	.-316    	; 0xf702 <mctime>
    f83e:	9f 93       	push	r25
    f840:	8f 93       	push	r24
    f842:	87 ef       	ldi	r24, 0xF7	; 247
    f844:	9b e0       	ldi	r25, 0x0B	; 11
    f846:	1f 92       	push	r1
    f848:	9f 93       	push	r25
    f84a:	8f 93       	push	r24
    f84c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    f850:	68 a5       	ldd	r22, Y+40	; 0x28
    f852:	79 a5       	ldd	r23, Y+41	; 0x29
    f854:	8a a5       	ldd	r24, Y+42	; 0x2a
    f856:	9b a5       	ldd	r25, Y+43	; 0x2b
    f858:	54 df       	rcall	.-344    	; 0xf702 <mctime>
    f85a:	9f 93       	push	r25
    f85c:	8f 93       	push	r24
    f85e:	8b ee       	ldi	r24, 0xEB	; 235
    f860:	9b e0       	ldi	r25, 0x0B	; 11
    f862:	1f 92       	push	r1
    f864:	9f 93       	push	r25
    f866:	8f 93       	push	r24
    f868:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    f86c:	6c a5       	ldd	r22, Y+44	; 0x2c
    f86e:	7d a5       	ldd	r23, Y+45	; 0x2d
    f870:	8e a5       	ldd	r24, Y+46	; 0x2e
    f872:	9f a5       	ldd	r25, Y+47	; 0x2f
    f874:	46 df       	rcall	.-372    	; 0xf702 <mctime>
    f876:	9f 93       	push	r25
    f878:	8f 93       	push	r24
    f87a:	8f ed       	ldi	r24, 0xDF	; 223
    f87c:	9b e0       	ldi	r25, 0x0B	; 11
    f87e:	1f 92       	push	r1
    f880:	9f 93       	push	r25
    f882:	8f 93       	push	r24
    f884:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    f888:	8d b7       	in	r24, 0x3d	; 61
    f88a:	9e b7       	in	r25, 0x3e	; 62
    f88c:	84 96       	adiw	r24, 0x24	; 36
    f88e:	0f b6       	in	r0, 0x3f	; 63
    f890:	f8 94       	cli
    f892:	9e bf       	out	0x3e, r25	; 62
    f894:	0f be       	out	0x3f, r0	; 63
    f896:	8d bf       	out	0x3d, r24	; 61
    f898:	df 91       	pop	r29
    f89a:	cf 91       	pop	r28
    f89c:	ff 90       	pop	r15
    f89e:	ef 90       	pop	r14
    f8a0:	df 90       	pop	r13
    f8a2:	cf 90       	pop	r12
    f8a4:	08 95       	ret

0000f8a6 <basename>:
    f8a6:	00 97       	sbiw	r24, 0x00	; 0
    f8a8:	49 f0       	breq	.+18     	; 0xf8bc <basename+0x16>
    f8aa:	fc 01       	movw	r30, r24
    f8ac:	21 91       	ld	r18, Z+
    f8ae:	22 23       	and	r18, r18
    f8b0:	21 f0       	breq	.+8      	; 0xf8ba <basename+0x14>
    f8b2:	2f 32       	cpi	r18, 0x2F	; 47
    f8b4:	d9 f7       	brne	.-10     	; 0xf8ac <basename+0x6>
    f8b6:	cf 01       	movw	r24, r30
    f8b8:	f9 cf       	rjmp	.-14     	; 0xf8ac <basename+0x6>
    f8ba:	08 95       	ret
    f8bc:	89 e8       	ldi	r24, 0x89	; 137
    f8be:	97 e1       	ldi	r25, 0x17	; 23
    f8c0:	08 95       	ret

0000f8c2 <chdir>:
    f8c2:	10 92 19 1d 	sts	0x1D19, r1	; 0x801d19 <errno+0x1>
    f8c6:	10 92 18 1d 	sts	0x1D18, r1	; 0x801d18 <errno>
    f8ca:	0e 94 2c 5e 	call	0xbc58	; 0xbc58 <f_chdir>
    f8ce:	00 97       	sbiw	r24, 0x00	; 0
    f8d0:	a1 f0       	breq	.+40     	; 0xf8fa <chdir+0x38>
    f8d2:	84 31       	cpi	r24, 0x14	; 20
    f8d4:	91 05       	cpc	r25, r1
    f8d6:	40 f4       	brcc	.+16     	; 0xf8e8 <chdir+0x26>
    f8d8:	fc 01       	movw	r30, r24
    f8da:	e2 5b       	subi	r30, 0xB2	; 178
    f8dc:	f8 4f       	sbci	r31, 0xF8	; 248
    f8de:	80 81       	ld	r24, Z
    f8e0:	08 2e       	mov	r0, r24
    f8e2:	00 0c       	add	r0, r0
    f8e4:	99 0b       	sbc	r25, r25
    f8e6:	02 c0       	rjmp	.+4      	; 0xf8ec <chdir+0x2a>
    f8e8:	83 e2       	ldi	r24, 0x23	; 35
    f8ea:	90 e0       	ldi	r25, 0x00	; 0
    f8ec:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
    f8f0:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
    f8f4:	8f ef       	ldi	r24, 0xFF	; 255
    f8f6:	9f ef       	ldi	r25, 0xFF	; 255
    f8f8:	08 95       	ret
    f8fa:	80 e0       	ldi	r24, 0x00	; 0
    f8fc:	90 e0       	ldi	r25, 0x00	; 0
    f8fe:	08 95       	ret

0000f900 <chmod>:
    f900:	10 92 19 1d 	sts	0x1D19, r1	; 0x801d19 <errno+0x1>
    f904:	10 92 18 1d 	sts	0x1D18, r1	; 0x801d18 <errno>
    f908:	42 79       	andi	r20, 0x92	; 146
    f90a:	55 27       	eor	r21, r21
    f90c:	66 27       	eor	r22, r22
    f90e:	77 27       	eor	r23, r23
    f910:	45 2b       	or	r20, r21
    f912:	46 2b       	or	r20, r22
    f914:	47 2b       	or	r20, r23
    f916:	19 f0       	breq	.+6      	; 0xf91e <chmod+0x1e>
    f918:	80 e0       	ldi	r24, 0x00	; 0
    f91a:	90 e0       	ldi	r25, 0x00	; 0
    f91c:	08 95       	ret
    f91e:	41 e0       	ldi	r20, 0x01	; 1
    f920:	61 e0       	ldi	r22, 0x01	; 1
    f922:	0e 94 92 67 	call	0xcf24	; 0xcf24 <f_chmod>
    f926:	00 97       	sbiw	r24, 0x00	; 0
    f928:	b9 f3       	breq	.-18     	; 0xf918 <chmod+0x18>
    f92a:	84 31       	cpi	r24, 0x14	; 20
    f92c:	91 05       	cpc	r25, r1
    f92e:	40 f4       	brcc	.+16     	; 0xf940 <chmod+0x40>
    f930:	fc 01       	movw	r30, r24
    f932:	e2 5b       	subi	r30, 0xB2	; 178
    f934:	f8 4f       	sbci	r31, 0xF8	; 248
    f936:	80 81       	ld	r24, Z
    f938:	08 2e       	mov	r0, r24
    f93a:	00 0c       	add	r0, r0
    f93c:	99 0b       	sbc	r25, r25
    f93e:	02 c0       	rjmp	.+4      	; 0xf944 <chmod+0x44>
    f940:	83 e2       	ldi	r24, 0x23	; 35
    f942:	90 e0       	ldi	r25, 0x00	; 0
    f944:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
    f948:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
    f94c:	8f ef       	ldi	r24, 0xFF	; 255
    f94e:	9f ef       	ldi	r25, 0xFF	; 255
    f950:	08 95       	ret

0000f952 <getcwd>:
    f952:	cf 93       	push	r28
    f954:	df 93       	push	r29
    f956:	d8 2f       	mov	r29, r24
    f958:	c9 2f       	mov	r28, r25
    f95a:	10 92 19 1d 	sts	0x1D19, r1	; 0x801d19 <errno+0x1>
    f95e:	10 92 18 1d 	sts	0x1D18, r1	; 0x801d18 <errno>
    f962:	0e 94 87 5e 	call	0xbd0e	; 0xbd0e <f_getcwd>
    f966:	00 97       	sbiw	r24, 0x00	; 0
    f968:	a1 f0       	breq	.+40     	; 0xf992 <getcwd+0x40>
    f96a:	84 31       	cpi	r24, 0x14	; 20
    f96c:	91 05       	cpc	r25, r1
    f96e:	40 f4       	brcc	.+16     	; 0xf980 <getcwd+0x2e>
    f970:	fc 01       	movw	r30, r24
    f972:	e2 5b       	subi	r30, 0xB2	; 178
    f974:	f8 4f       	sbci	r31, 0xF8	; 248
    f976:	80 81       	ld	r24, Z
    f978:	08 2e       	mov	r0, r24
    f97a:	00 0c       	add	r0, r0
    f97c:	99 0b       	sbc	r25, r25
    f97e:	02 c0       	rjmp	.+4      	; 0xf984 <getcwd+0x32>
    f980:	83 e2       	ldi	r24, 0x23	; 35
    f982:	90 e0       	ldi	r25, 0x00	; 0
    f984:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
    f988:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
    f98c:	80 e0       	ldi	r24, 0x00	; 0
    f98e:	90 e0       	ldi	r25, 0x00	; 0
    f990:	02 c0       	rjmp	.+4      	; 0xf996 <getcwd+0x44>
    f992:	8d 2f       	mov	r24, r29
    f994:	9c 2f       	mov	r25, r28
    f996:	df 91       	pop	r29
    f998:	cf 91       	pop	r28
    f99a:	08 95       	ret

0000f99c <mkdir>:
    f99c:	cf 93       	push	r28
    f99e:	df 93       	push	r29
    f9a0:	ec 01       	movw	r28, r24
    f9a2:	10 92 19 1d 	sts	0x1D19, r1	; 0x801d19 <errno+0x1>
    f9a6:	10 92 18 1d 	sts	0x1D18, r1	; 0x801d18 <errno>
    f9aa:	41 15       	cp	r20, r1
    f9ac:	51 05       	cpc	r21, r1
    f9ae:	61 05       	cpc	r22, r1
    f9b0:	71 05       	cpc	r23, r1
    f9b2:	41 f4       	brne	.+16     	; 0xf9c4 <mkdir+0x28>
    f9b4:	ce 01       	movw	r24, r28
    f9b6:	0e 94 3c 65 	call	0xca78	; 0xca78 <f_mkdir>
    f9ba:	00 97       	sbiw	r24, 0x00	; 0
    f9bc:	39 f4       	brne	.+14     	; 0xf9cc <mkdir+0x30>
    f9be:	80 e0       	ldi	r24, 0x00	; 0
    f9c0:	90 e0       	ldi	r25, 0x00	; 0
    f9c2:	17 c0       	rjmp	.+46     	; 0xf9f2 <mkdir+0x56>
    f9c4:	9d df       	rcall	.-198    	; 0xf900 <chmod>
    f9c6:	89 2b       	or	r24, r25
    f9c8:	a9 f3       	breq	.-22     	; 0xf9b4 <mkdir+0x18>
    f9ca:	11 c0       	rjmp	.+34     	; 0xf9ee <mkdir+0x52>
    f9cc:	84 31       	cpi	r24, 0x14	; 20
    f9ce:	91 05       	cpc	r25, r1
    f9d0:	40 f4       	brcc	.+16     	; 0xf9e2 <mkdir+0x46>
    f9d2:	fc 01       	movw	r30, r24
    f9d4:	e2 5b       	subi	r30, 0xB2	; 178
    f9d6:	f8 4f       	sbci	r31, 0xF8	; 248
    f9d8:	80 81       	ld	r24, Z
    f9da:	08 2e       	mov	r0, r24
    f9dc:	00 0c       	add	r0, r0
    f9de:	99 0b       	sbc	r25, r25
    f9e0:	02 c0       	rjmp	.+4      	; 0xf9e6 <mkdir+0x4a>
    f9e2:	83 e2       	ldi	r24, 0x23	; 35
    f9e4:	90 e0       	ldi	r25, 0x00	; 0
    f9e6:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
    f9ea:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
    f9ee:	8f ef       	ldi	r24, 0xFF	; 255
    f9f0:	9f ef       	ldi	r25, 0xFF	; 255
    f9f2:	df 91       	pop	r29
    f9f4:	cf 91       	pop	r28
    f9f6:	08 95       	ret

0000f9f8 <rename>:
    f9f8:	10 92 19 1d 	sts	0x1D19, r1	; 0x801d19 <errno+0x1>
    f9fc:	10 92 18 1d 	sts	0x1D18, r1	; 0x801d18 <errno>
    fa00:	0e 94 83 66 	call	0xcd06	; 0xcd06 <f_rename>
    fa04:	00 97       	sbiw	r24, 0x00	; 0
    fa06:	a1 f0       	breq	.+40     	; 0xfa30 <rename+0x38>
    fa08:	84 31       	cpi	r24, 0x14	; 20
    fa0a:	91 05       	cpc	r25, r1
    fa0c:	40 f4       	brcc	.+16     	; 0xfa1e <rename+0x26>
    fa0e:	fc 01       	movw	r30, r24
    fa10:	e2 5b       	subi	r30, 0xB2	; 178
    fa12:	f8 4f       	sbci	r31, 0xF8	; 248
    fa14:	80 81       	ld	r24, Z
    fa16:	08 2e       	mov	r0, r24
    fa18:	00 0c       	add	r0, r0
    fa1a:	99 0b       	sbc	r25, r25
    fa1c:	02 c0       	rjmp	.+4      	; 0xfa22 <rename+0x2a>
    fa1e:	83 e2       	ldi	r24, 0x23	; 35
    fa20:	90 e0       	ldi	r25, 0x00	; 0
    fa22:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
    fa26:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
    fa2a:	8f ef       	ldi	r24, 0xFF	; 255
    fa2c:	9f ef       	ldi	r25, 0xFF	; 255
    fa2e:	08 95       	ret
    fa30:	80 e0       	ldi	r24, 0x00	; 0
    fa32:	90 e0       	ldi	r25, 0x00	; 0
    fa34:	08 95       	ret

0000fa36 <unlink>:
    fa36:	10 92 19 1d 	sts	0x1D19, r1	; 0x801d19 <errno+0x1>
    fa3a:	10 92 18 1d 	sts	0x1D18, r1	; 0x801d18 <errno>
    fa3e:	0e 94 93 64 	call	0xc926	; 0xc926 <f_unlink>
    fa42:	00 97       	sbiw	r24, 0x00	; 0
    fa44:	a1 f0       	breq	.+40     	; 0xfa6e <unlink+0x38>
    fa46:	84 31       	cpi	r24, 0x14	; 20
    fa48:	91 05       	cpc	r25, r1
    fa4a:	40 f4       	brcc	.+16     	; 0xfa5c <unlink+0x26>
    fa4c:	fc 01       	movw	r30, r24
    fa4e:	e2 5b       	subi	r30, 0xB2	; 178
    fa50:	f8 4f       	sbci	r31, 0xF8	; 248
    fa52:	80 81       	ld	r24, Z
    fa54:	08 2e       	mov	r0, r24
    fa56:	00 0c       	add	r0, r0
    fa58:	99 0b       	sbc	r25, r25
    fa5a:	02 c0       	rjmp	.+4      	; 0xfa60 <unlink+0x2a>
    fa5c:	83 e2       	ldi	r24, 0x23	; 35
    fa5e:	90 e0       	ldi	r25, 0x00	; 0
    fa60:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
    fa64:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
    fa68:	8f ef       	ldi	r24, 0xFF	; 255
    fa6a:	9f ef       	ldi	r25, 0xFF	; 255
    fa6c:	08 95       	ret
    fa6e:	80 e0       	ldi	r24, 0x00	; 0
    fa70:	90 e0       	ldi	r25, 0x00	; 0
    fa72:	08 95       	ret

0000fa74 <rmdir>:
    fa74:	e0 cf       	rjmp	.-64     	; 0xfa36 <unlink>
    fa76:	08 95       	ret

0000fa78 <closedir>:
    fa78:	0e 94 0b 63 	call	0xc616	; 0xc616 <f_closedir>
    fa7c:	00 97       	sbiw	r24, 0x00	; 0
    fa7e:	a1 f0       	breq	.+40     	; 0xfaa8 <closedir+0x30>
    fa80:	84 31       	cpi	r24, 0x14	; 20
    fa82:	91 05       	cpc	r25, r1
    fa84:	40 f4       	brcc	.+16     	; 0xfa96 <closedir+0x1e>
    fa86:	fc 01       	movw	r30, r24
    fa88:	e2 5b       	subi	r30, 0xB2	; 178
    fa8a:	f8 4f       	sbci	r31, 0xF8	; 248
    fa8c:	80 81       	ld	r24, Z
    fa8e:	08 2e       	mov	r0, r24
    fa90:	00 0c       	add	r0, r0
    fa92:	99 0b       	sbc	r25, r25
    fa94:	02 c0       	rjmp	.+4      	; 0xfa9a <closedir+0x22>
    fa96:	83 e2       	ldi	r24, 0x23	; 35
    fa98:	90 e0       	ldi	r25, 0x00	; 0
    fa9a:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
    fa9e:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
    faa2:	8f ef       	ldi	r24, 0xFF	; 255
    faa4:	9f ef       	ldi	r25, 0xFF	; 255
    faa6:	08 95       	ret
    faa8:	80 e0       	ldi	r24, 0x00	; 0
    faaa:	90 e0       	ldi	r25, 0x00	; 0
    faac:	08 95       	ret

0000faae <opendir>:
    faae:	bc 01       	movw	r22, r24
    fab0:	80 e9       	ldi	r24, 0x90	; 144
    fab2:	99 e1       	ldi	r25, 0x19	; 25
    fab4:	0e 94 98 62 	call	0xc530	; 0xc530 <f_opendir>
    fab8:	00 97       	sbiw	r24, 0x00	; 0
    faba:	a1 f0       	breq	.+40     	; 0xfae4 <opendir+0x36>
    fabc:	84 31       	cpi	r24, 0x14	; 20
    fabe:	91 05       	cpc	r25, r1
    fac0:	40 f4       	brcc	.+16     	; 0xfad2 <opendir+0x24>
    fac2:	fc 01       	movw	r30, r24
    fac4:	e2 5b       	subi	r30, 0xB2	; 178
    fac6:	f8 4f       	sbci	r31, 0xF8	; 248
    fac8:	80 81       	ld	r24, Z
    faca:	08 2e       	mov	r0, r24
    facc:	00 0c       	add	r0, r0
    face:	99 0b       	sbc	r25, r25
    fad0:	02 c0       	rjmp	.+4      	; 0xfad6 <opendir+0x28>
    fad2:	83 e2       	ldi	r24, 0x23	; 35
    fad4:	90 e0       	ldi	r25, 0x00	; 0
    fad6:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
    fada:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
    fade:	80 e0       	ldi	r24, 0x00	; 0
    fae0:	90 e0       	ldi	r25, 0x00	; 0
    fae2:	08 95       	ret
    fae4:	80 e9       	ldi	r24, 0x90	; 144
    fae6:	99 e1       	ldi	r25, 0x19	; 25
    fae8:	08 95       	ret

0000faea <readdir>:
    faea:	a6 e1       	ldi	r26, 0x16	; 22
    faec:	b1 e0       	ldi	r27, 0x01	; 1
    faee:	eb e7       	ldi	r30, 0x7B	; 123
    faf0:	fd e7       	ldi	r31, 0x7D	; 125
    faf2:	0c 94 42 ec 	jmp	0x1d884	; 0x1d884 <__prologue_saves__+0x1c>
    faf6:	10 92 91 18 	sts	0x1891, r1	; 0x801891 <_de>
    fafa:	be 01       	movw	r22, r28
    fafc:	6f 5f       	subi	r22, 0xFF	; 255
    fafe:	7f 4f       	sbci	r23, 0xFF	; 255
    fb00:	0e 94 20 63 	call	0xc640	; 0xc640 <f_readdir>
    fb04:	00 97       	sbiw	r24, 0x00	; 0
    fb06:	a1 f0       	breq	.+40     	; 0xfb30 <readdir+0x46>
    fb08:	84 31       	cpi	r24, 0x14	; 20
    fb0a:	91 05       	cpc	r25, r1
    fb0c:	40 f4       	brcc	.+16     	; 0xfb1e <readdir+0x34>
    fb0e:	fc 01       	movw	r30, r24
    fb10:	e2 5b       	subi	r30, 0xB2	; 178
    fb12:	f8 4f       	sbci	r31, 0xF8	; 248
    fb14:	80 81       	ld	r24, Z
    fb16:	08 2e       	mov	r0, r24
    fb18:	00 0c       	add	r0, r0
    fb1a:	99 0b       	sbc	r25, r25
    fb1c:	02 c0       	rjmp	.+4      	; 0xfb22 <readdir+0x38>
    fb1e:	83 e2       	ldi	r24, 0x23	; 35
    fb20:	90 e0       	ldi	r25, 0x00	; 0
    fb22:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
    fb26:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
    fb2a:	80 e0       	ldi	r24, 0x00	; 0
    fb2c:	90 e0       	ldi	r25, 0x00	; 0
    fb2e:	16 c0       	rjmp	.+44     	; 0xfb5c <readdir+0x72>
    fb30:	be 01       	movw	r22, r28
    fb32:	69 5e       	subi	r22, 0xE9	; 233
    fb34:	7f 4f       	sbci	r23, 0xFF	; 255
    fb36:	fb 01       	movw	r30, r22
    fb38:	01 90       	ld	r0, Z+
    fb3a:	00 20       	and	r0, r0
    fb3c:	e9 f7       	brne	.-6      	; 0xfb38 <readdir+0x4e>
    fb3e:	31 97       	sbiw	r30, 0x01	; 1
    fb40:	8f 01       	movw	r16, r30
    fb42:	06 1b       	sub	r16, r22
    fb44:	17 0b       	sbc	r17, r23
    fb46:	a8 01       	movw	r20, r16
    fb48:	81 e9       	ldi	r24, 0x91	; 145
    fb4a:	98 e1       	ldi	r25, 0x18	; 24
    fb4c:	0e 94 25 32 	call	0x644a	; 0x644a <strncpy>
    fb50:	f8 01       	movw	r30, r16
    fb52:	ef 56       	subi	r30, 0x6F	; 111
    fb54:	f7 4e       	sbci	r31, 0xE7	; 231
    fb56:	10 82       	st	Z, r1
    fb58:	81 e9       	ldi	r24, 0x91	; 145
    fb5a:	98 e1       	ldi	r25, 0x18	; 24
    fb5c:	ca 5e       	subi	r28, 0xEA	; 234
    fb5e:	de 4f       	sbci	r29, 0xFE	; 254
    fb60:	e4 e0       	ldi	r30, 0x04	; 4
    fb62:	0c 94 5e ec 	jmp	0x1d8bc	; 0x1d8bc <__epilogue_restores__+0x1c>

0000fb66 <perror>:
    fb66:	e0 91 18 1d 	lds	r30, 0x1D18	; 0x801d18 <errno>
    fb6a:	f0 91 19 1d 	lds	r31, 0x1D19	; 0x801d19 <errno+0x1>
    fb6e:	e3 32       	cpi	r30, 0x23	; 35
    fb70:	f1 05       	cpc	r31, r1
    fb72:	38 f4       	brcc	.+14     	; 0xfb82 <perror+0x1c>
    fb74:	ee 0f       	add	r30, r30
    fb76:	ff 1f       	adc	r31, r31
    fb78:	e3 5c       	subi	r30, 0xC3	; 195
    fb7a:	fe 4f       	sbci	r31, 0xFE	; 254
    fb7c:	20 81       	ld	r18, Z
    fb7e:	31 81       	ldd	r19, Z+1	; 0x01
    fb80:	04 c0       	rjmp	.+8      	; 0xfb8a <perror+0x24>
    fb82:	20 91 83 01 	lds	r18, 0x0183	; 0x800183 <sys_errlist+0x46>
    fb86:	30 91 84 01 	lds	r19, 0x0184	; 0x800184 <sys_errlist+0x47>
    fb8a:	00 97       	sbiw	r24, 0x00	; 0
    fb8c:	c1 f0       	breq	.+48     	; 0xfbbe <perror+0x58>
    fb8e:	fc 01       	movw	r30, r24
    fb90:	40 81       	ld	r20, Z
    fb92:	44 23       	and	r20, r20
    fb94:	a1 f0       	breq	.+40     	; 0xfbbe <perror+0x58>
    fb96:	3f 93       	push	r19
    fb98:	2f 93       	push	r18
    fb9a:	9f 93       	push	r25
    fb9c:	8f 93       	push	r24
    fb9e:	87 ed       	ldi	r24, 0xD7	; 215
    fba0:	9b e0       	ldi	r25, 0x0B	; 11
    fba2:	1f 92       	push	r1
    fba4:	9f 93       	push	r25
    fba6:	8f 93       	push	r24
    fba8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    fbac:	8d b7       	in	r24, 0x3d	; 61
    fbae:	9e b7       	in	r25, 0x3e	; 62
    fbb0:	07 96       	adiw	r24, 0x07	; 7
    fbb2:	0f b6       	in	r0, 0x3f	; 63
    fbb4:	f8 94       	cli
    fbb6:	9e bf       	out	0x3e, r25	; 62
    fbb8:	0f be       	out	0x3f, r0	; 63
    fbba:	8d bf       	out	0x3d, r24	; 61
    fbbc:	08 95       	ret
    fbbe:	3f 93       	push	r19
    fbc0:	2f 93       	push	r18
    fbc2:	83 ed       	ldi	r24, 0xD3	; 211
    fbc4:	9b e0       	ldi	r25, 0x0B	; 11
    fbc6:	1f 92       	push	r1
    fbc8:	9f 93       	push	r25
    fbca:	8f 93       	push	r24
    fbcc:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    fbd0:	0f 90       	pop	r0
    fbd2:	0f 90       	pop	r0
    fbd4:	0f 90       	pop	r0
    fbd6:	0f 90       	pop	r0
    fbd8:	0f 90       	pop	r0
    fbda:	08 95       	ret

0000fbdc <fdevopen>:
    fbdc:	0f 93       	push	r16
    fbde:	1f 93       	push	r17
    fbe0:	cf 93       	push	r28
    fbe2:	df 93       	push	r29
    fbe4:	00 97       	sbiw	r24, 0x00	; 0
    fbe6:	31 f4       	brne	.+12     	; 0xfbf4 <fdevopen+0x18>
    fbe8:	61 15       	cp	r22, r1
    fbea:	71 05       	cpc	r23, r1
    fbec:	19 f4       	brne	.+6      	; 0xfbf4 <fdevopen+0x18>
    fbee:	80 e0       	ldi	r24, 0x00	; 0
    fbf0:	90 e0       	ldi	r25, 0x00	; 0
    fbf2:	3a c0       	rjmp	.+116    	; 0xfc68 <fdevopen+0x8c>
    fbf4:	8b 01       	movw	r16, r22
    fbf6:	ec 01       	movw	r28, r24
    fbf8:	6e e0       	ldi	r22, 0x0E	; 14
    fbfa:	70 e0       	ldi	r23, 0x00	; 0
    fbfc:	81 e0       	ldi	r24, 0x01	; 1
    fbfe:	90 e0       	ldi	r25, 0x00	; 0
    fc00:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <safecalloc>
    fc04:	fc 01       	movw	r30, r24
    fc06:	89 2b       	or	r24, r25
    fc08:	91 f3       	breq	.-28     	; 0xfbee <fdevopen+0x12>
    fc0a:	80 e8       	ldi	r24, 0x80	; 128
    fc0c:	83 83       	std	Z+3, r24	; 0x03
    fc0e:	01 15       	cp	r16, r1
    fc10:	11 05       	cpc	r17, r1
    fc12:	71 f0       	breq	.+28     	; 0xfc30 <fdevopen+0x54>
    fc14:	13 87       	std	Z+11, r17	; 0x0b
    fc16:	02 87       	std	Z+10, r16	; 0x0a
    fc18:	81 e8       	ldi	r24, 0x81	; 129
    fc1a:	83 83       	std	Z+3, r24	; 0x03
    fc1c:	80 91 1a 1d 	lds	r24, 0x1D1A	; 0x801d1a <__iob>
    fc20:	90 91 1b 1d 	lds	r25, 0x1D1B	; 0x801d1b <__iob+0x1>
    fc24:	89 2b       	or	r24, r25
    fc26:	21 f4       	brne	.+8      	; 0xfc30 <fdevopen+0x54>
    fc28:	f0 93 1b 1d 	sts	0x1D1B, r31	; 0x801d1b <__iob+0x1>
    fc2c:	e0 93 1a 1d 	sts	0x1D1A, r30	; 0x801d1a <__iob>
    fc30:	20 97       	sbiw	r28, 0x00	; 0
    fc32:	c9 f0       	breq	.+50     	; 0xfc66 <fdevopen+0x8a>
    fc34:	d1 87       	std	Z+9, r29	; 0x09
    fc36:	c0 87       	std	Z+8, r28	; 0x08
    fc38:	83 81       	ldd	r24, Z+3	; 0x03
    fc3a:	82 60       	ori	r24, 0x02	; 2
    fc3c:	83 83       	std	Z+3, r24	; 0x03
    fc3e:	80 91 1c 1d 	lds	r24, 0x1D1C	; 0x801d1c <__iob+0x2>
    fc42:	90 91 1d 1d 	lds	r25, 0x1D1D	; 0x801d1d <__iob+0x3>
    fc46:	89 2b       	or	r24, r25
    fc48:	21 f4       	brne	.+8      	; 0xfc52 <fdevopen+0x76>
    fc4a:	f0 93 1d 1d 	sts	0x1D1D, r31	; 0x801d1d <__iob+0x3>
    fc4e:	e0 93 1c 1d 	sts	0x1D1C, r30	; 0x801d1c <__iob+0x2>
    fc52:	80 91 1e 1d 	lds	r24, 0x1D1E	; 0x801d1e <__iob+0x4>
    fc56:	90 91 1f 1d 	lds	r25, 0x1D1F	; 0x801d1f <__iob+0x5>
    fc5a:	89 2b       	or	r24, r25
    fc5c:	21 f4       	brne	.+8      	; 0xfc66 <fdevopen+0x8a>
    fc5e:	f0 93 1f 1d 	sts	0x1D1F, r31	; 0x801d1f <__iob+0x5>
    fc62:	e0 93 1e 1d 	sts	0x1D1E, r30	; 0x801d1e <__iob+0x4>
    fc66:	cf 01       	movw	r24, r30
    fc68:	df 91       	pop	r29
    fc6a:	cf 91       	pop	r28
    fc6c:	1f 91       	pop	r17
    fc6e:	0f 91       	pop	r16
    fc70:	08 95       	ret

0000fc72 <mkfs>:
    fc72:	a9 e3       	ldi	r26, 0x39	; 57
    fc74:	b2 e0       	ldi	r27, 0x02	; 2
    fc76:	ef e3       	ldi	r30, 0x3F	; 63
    fc78:	fe e7       	ldi	r31, 0x7E	; 126
    fc7a:	0c 94 3e ec 	jmp	0x1d87c	; 0x1d87c <__prologue_saves__+0x14>
    fc7e:	6c 01       	movw	r12, r24
    fc80:	62 eb       	ldi	r22, 0xB2	; 178
    fc82:	78 e0       	ldi	r23, 0x08	; 8
    fc84:	0e 94 f5 32 	call	0x65ea	; 0x65ea <MATCH>
    fc88:	00 97       	sbiw	r24, 0x00	; 0
    fc8a:	59 f4       	brne	.+22     	; 0xfca2 <mkfs+0x30>
    fc8c:	84 eb       	ldi	r24, 0xB4	; 180
    fc8e:	9b e0       	ldi	r25, 0x0B	; 11
    fc90:	1f 92       	push	r1
    fc92:	9f 93       	push	r25
    fc94:	8f 93       	push	r24
    fc96:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    fc9a:	0f 90       	pop	r0
    fc9c:	0f 90       	pop	r0
    fc9e:	0f 90       	pop	r0
    fca0:	55 c0       	rjmp	.+170    	; 0xfd4c <mkfs+0xda>
    fca2:	2a e3       	ldi	r18, 0x3A	; 58
    fca4:	c9 5c       	subi	r28, 0xC9	; 201
    fca6:	dd 4f       	sbci	r29, 0xFD	; 253
    fca8:	28 83       	st	Y, r18
    fcaa:	c7 53       	subi	r28, 0x37	; 55
    fcac:	d2 40       	sbci	r29, 0x02	; 2
    fcae:	c8 5c       	subi	r28, 0xC8	; 200
    fcb0:	dd 4f       	sbci	r29, 0xFD	; 253
    fcb2:	18 82       	st	Y, r1
    fcb4:	c8 53       	subi	r28, 0x38	; 56
    fcb6:	d2 40       	sbci	r29, 0x02	; 2
    fcb8:	8c 0d       	add	r24, r12
    fcba:	9d 1d       	adc	r25, r13
    fcbc:	fc 01       	movw	r30, r24
    fcbe:	31 97       	sbiw	r30, 0x01	; 1
    fcc0:	80 81       	ld	r24, Z
    fcc2:	90 e0       	ldi	r25, 0x00	; 0
    fcc4:	0e 94 00 32 	call	0x6400	; 0x6400 <tolower>
    fcc8:	9c 01       	movw	r18, r24
    fcca:	21 56       	subi	r18, 0x61	; 97
    fccc:	31 09       	sbc	r19, r1
    fcce:	2a 30       	cpi	r18, 0x0A	; 10
    fcd0:	31 05       	cpc	r19, r1
    fcd2:	30 f4       	brcc	.+12     	; 0xfce0 <mkfs+0x6e>
    fcd4:	81 56       	subi	r24, 0x61	; 97
    fcd6:	ca 5c       	subi	r28, 0xCA	; 202
    fcd8:	dd 4f       	sbci	r29, 0xFD	; 253
    fcda:	88 83       	st	Y, r24
    fcdc:	c6 53       	subi	r28, 0x36	; 54
    fcde:	d2 40       	sbci	r29, 0x02	; 2
    fce0:	c7 5c       	subi	r28, 0xC7	; 199
    fce2:	dd 4f       	sbci	r29, 0xFD	; 253
    fce4:	18 82       	st	Y, r1
    fce6:	c9 53       	subi	r28, 0x39	; 57
    fce8:	d2 40       	sbci	r29, 0x02	; 2
    fcea:	40 e0       	ldi	r20, 0x00	; 0
    fcec:	be 01       	movw	r22, r28
    fcee:	6a 5c       	subi	r22, 0xCA	; 202
    fcf0:	7d 4f       	sbci	r23, 0xFD	; 253
    fcf2:	ce 01       	movw	r24, r28
    fcf4:	01 96       	adiw	r24, 0x01	; 1
    fcf6:	0e 94 77 58 	call	0xb0ee	; 0xb0ee <f_mount>
    fcfa:	89 2b       	or	r24, r25
    fcfc:	29 f4       	brne	.+10     	; 0xfd08 <mkfs+0x96>
    fcfe:	80 e0       	ldi	r24, 0x00	; 0
    fd00:	90 e0       	ldi	r25, 0x00	; 0
    fd02:	0e 94 41 75 	call	0xea82	; 0xea82 <put_rc>
    fd06:	22 c0       	rjmp	.+68     	; 0xfd4c <mkfs+0xda>
    fd08:	80 e0       	ldi	r24, 0x00	; 0
    fd0a:	94 e0       	ldi	r25, 0x04	; 4
    fd0c:	0e 94 1a 2a 	call	0x5434	; 0x5434 <safemalloc>
    fd10:	6c 01       	movw	r12, r24
    fd12:	89 2b       	or	r24, r25
    fd14:	d9 f0       	breq	.+54     	; 0xfd4c <mkfs+0xda>
    fd16:	e1 2c       	mov	r14, r1
    fd18:	84 e0       	ldi	r24, 0x04	; 4
    fd1a:	f8 2e       	mov	r15, r24
    fd1c:	86 01       	movw	r16, r12
    fd1e:	20 e0       	ldi	r18, 0x00	; 0
    fd20:	30 e0       	ldi	r19, 0x00	; 0
    fd22:	a9 01       	movw	r20, r18
    fd24:	62 e0       	ldi	r22, 0x02	; 2
    fd26:	ce 01       	movw	r24, r28
    fd28:	8a 5c       	subi	r24, 0xCA	; 202
    fd2a:	9d 4f       	sbci	r25, 0xFD	; 253
    fd2c:	0e 94 b2 68 	call	0xd164	; 0xd164 <f_mkfs>
    fd30:	00 97       	sbiw	r24, 0x00	; 0
    fd32:	31 f0       	breq	.+12     	; 0xfd40 <mkfs+0xce>
    fd34:	0e 94 41 75 	call	0xea82	; 0xea82 <put_rc>
    fd38:	c6 01       	movw	r24, r12
    fd3a:	0e 94 3b 2a 	call	0x5476	; 0x5476 <safefree>
    fd3e:	06 c0       	rjmp	.+12     	; 0xfd4c <mkfs+0xda>
    fd40:	c6 01       	movw	r24, r12
    fd42:	0e 94 3b 2a 	call	0x5476	; 0x5476 <safefree>
    fd46:	81 e0       	ldi	r24, 0x01	; 1
    fd48:	90 e0       	ldi	r25, 0x00	; 0
    fd4a:	02 c0       	rjmp	.+4      	; 0xfd50 <mkfs+0xde>
    fd4c:	80 e0       	ldi	r24, 0x00	; 0
    fd4e:	90 e0       	ldi	r25, 0x00	; 0
    fd50:	c7 5c       	subi	r28, 0xC7	; 199
    fd52:	dd 4f       	sbci	r29, 0xFD	; 253
    fd54:	e8 e0       	ldi	r30, 0x08	; 8
    fd56:	0c 94 5a ec 	jmp	0x1d8b4	; 0x1d8b4 <__epilogue_restores__+0x14>

0000fd5a <fat_time_to_unix>:
    fd5a:	a6 e1       	ldi	r26, 0x16	; 22
    fd5c:	b0 e0       	ldi	r27, 0x00	; 0
    fd5e:	e3 eb       	ldi	r30, 0xB3	; 179
    fd60:	fe e7       	ldi	r31, 0x7E	; 126
    fd62:	0c 94 44 ec 	jmp	0x1d888	; 0x1d888 <__prologue_saves__+0x20>
    fd66:	fe 01       	movw	r30, r28
    fd68:	31 96       	adiw	r30, 0x01	; 1
    fd6a:	26 e1       	ldi	r18, 0x16	; 22
    fd6c:	df 01       	movw	r26, r30
    fd6e:	1d 92       	st	X+, r1
    fd70:	2a 95       	dec	r18
    fd72:	e9 f7       	brne	.-6      	; 0xfd6e <fat_time_to_unix+0x14>
    fd74:	9b 01       	movw	r18, r22
    fd76:	22 0f       	add	r18, r18
    fd78:	33 1f       	adc	r19, r19
    fd7a:	2e 73       	andi	r18, 0x3E	; 62
    fd7c:	33 27       	eor	r19, r19
    fd7e:	3a 83       	std	Y+2, r19	; 0x02
    fd80:	29 83       	std	Y+1, r18	; 0x01
    fd82:	9b 01       	movw	r18, r22
    fd84:	55 e0       	ldi	r21, 0x05	; 5
    fd86:	36 95       	lsr	r19
    fd88:	27 95       	ror	r18
    fd8a:	5a 95       	dec	r21
    fd8c:	e1 f7       	brne	.-8      	; 0xfd86 <fat_time_to_unix+0x2c>
    fd8e:	2f 73       	andi	r18, 0x3F	; 63
    fd90:	33 27       	eor	r19, r19
    fd92:	3c 83       	std	Y+4, r19	; 0x04
    fd94:	2b 83       	std	Y+3, r18	; 0x03
    fd96:	27 2f       	mov	r18, r23
    fd98:	26 95       	lsr	r18
    fd9a:	26 95       	lsr	r18
    fd9c:	26 95       	lsr	r18
    fd9e:	2d 83       	std	Y+5, r18	; 0x05
    fda0:	1e 82       	std	Y+6, r1	; 0x06
    fda2:	9c 01       	movw	r18, r24
    fda4:	2f 71       	andi	r18, 0x1F	; 31
    fda6:	33 27       	eor	r19, r19
    fda8:	38 87       	std	Y+8, r19	; 0x08
    fdaa:	2f 83       	std	Y+7, r18	; 0x07
    fdac:	9c 01       	movw	r18, r24
    fdae:	65 e0       	ldi	r22, 0x05	; 5
    fdb0:	36 95       	lsr	r19
    fdb2:	27 95       	ror	r18
    fdb4:	6a 95       	dec	r22
    fdb6:	e1 f7       	brne	.-8      	; 0xfdb0 <fat_time_to_unix+0x56>
    fdb8:	2f 70       	andi	r18, 0x0F	; 15
    fdba:	33 27       	eor	r19, r19
    fdbc:	21 50       	subi	r18, 0x01	; 1
    fdbe:	31 09       	sbc	r19, r1
    fdc0:	3a 87       	std	Y+10, r19	; 0x0a
    fdc2:	29 87       	std	Y+9, r18	; 0x09
    fdc4:	9c 01       	movw	r18, r24
    fdc6:	23 2f       	mov	r18, r19
    fdc8:	33 27       	eor	r19, r19
    fdca:	26 95       	lsr	r18
    fdcc:	20 5b       	subi	r18, 0xB0	; 176
    fdce:	3f 4f       	sbci	r19, 0xFF	; 255
    fdd0:	3c 87       	std	Y+12, r19	; 0x0c
    fdd2:	2b 87       	std	Y+11, r18	; 0x0b
    fdd4:	cf 01       	movw	r24, r30
    fdd6:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <timegm>
    fdda:	66 96       	adiw	r28, 0x16	; 22
    fddc:	e2 e0       	ldi	r30, 0x02	; 2
    fdde:	0c 94 60 ec 	jmp	0x1d8c0	; 0x1d8c0 <__epilogue_restores__+0x20>

0000fde2 <stat>:
    fde2:	a6 e1       	ldi	r26, 0x16	; 22
    fde4:	b1 e0       	ldi	r27, 0x01	; 1
    fde6:	e7 ef       	ldi	r30, 0xF7	; 247
    fde8:	fe e7       	ldi	r31, 0x7E	; 126
    fdea:	0c 94 40 ec 	jmp	0x1d880	; 0x1d880 <__prologue_saves__+0x18>
    fdee:	7c 01       	movw	r14, r24
    fdf0:	8b 01       	movw	r16, r22
    fdf2:	10 92 19 1d 	sts	0x1D19, r1	; 0x801d19 <errno+0x1>
    fdf6:	10 92 18 1d 	sts	0x1D18, r1	; 0x801d18 <errno>
    fdfa:	66 e6       	ldi	r22, 0x66	; 102
    fdfc:	78 e0       	ldi	r23, 0x08	; 8
    fdfe:	0e 94 8c 32 	call	0x6518	; 0x6518 <strcmp>
    fe02:	89 2b       	or	r24, r25
    fe04:	39 f0       	breq	.+14     	; 0xfe14 <stat+0x32>
    fe06:	65 ea       	ldi	r22, 0xA5	; 165
    fe08:	70 e1       	ldi	r23, 0x10	; 16
    fe0a:	c7 01       	movw	r24, r14
    fe0c:	0e 94 8c 32 	call	0x6518	; 0x6518 <strcmp>
    fe10:	89 2b       	or	r24, r25
    fe12:	d1 f4       	brne	.+52     	; 0xfe48 <stat+0x66>
    fe14:	f8 01       	movw	r30, r16
    fe16:	14 a2       	std	Z+36, r1	; 0x24
    fe18:	15 a2       	std	Z+37, r1	; 0x25
    fe1a:	16 a2       	std	Z+38, r1	; 0x26
    fe1c:	17 a2       	std	Z+39, r1	; 0x27
    fe1e:	10 a6       	std	Z+40, r1	; 0x28
    fe20:	11 a6       	std	Z+41, r1	; 0x29
    fe22:	12 a6       	std	Z+42, r1	; 0x2a
    fe24:	13 a6       	std	Z+43, r1	; 0x2b
    fe26:	14 a6       	std	Z+44, r1	; 0x2c
    fe28:	15 a6       	std	Z+45, r1	; 0x2d
    fe2a:	16 a6       	std	Z+46, r1	; 0x2e
    fe2c:	17 a6       	std	Z+47, r1	; 0x2f
    fe2e:	11 8a       	std	Z+17, r1	; 0x11
    fe30:	10 8a       	std	Z+16, r1	; 0x10
    fe32:	13 8a       	std	Z+19, r1	; 0x13
    fe34:	12 8a       	std	Z+18, r1	; 0x12
    fe36:	10 8e       	std	Z+24, r1	; 0x18
    fe38:	11 8e       	std	Z+25, r1	; 0x19
    fe3a:	12 8e       	std	Z+26, r1	; 0x1a
    fe3c:	13 8e       	std	Z+27, r1	; 0x1b
    fe3e:	80 e0       	ldi	r24, 0x00	; 0
    fe40:	90 e4       	ldi	r25, 0x40	; 64
    fe42:	a0 e0       	ldi	r26, 0x00	; 0
    fe44:	b0 e0       	ldi	r27, 0x00	; 0
    fe46:	4e c0       	rjmp	.+156    	; 0xfee4 <stat+0x102>
    fe48:	be 01       	movw	r22, r28
    fe4a:	6f 5f       	subi	r22, 0xFF	; 255
    fe4c:	7f 4f       	sbci	r23, 0xFF	; 255
    fe4e:	c7 01       	movw	r24, r14
    fe50:	0e 94 66 63 	call	0xc6cc	; 0xc6cc <f_stat>
    fe54:	00 97       	sbiw	r24, 0x00	; 0
    fe56:	a1 f0       	breq	.+40     	; 0xfe80 <stat+0x9e>
    fe58:	84 31       	cpi	r24, 0x14	; 20
    fe5a:	91 05       	cpc	r25, r1
    fe5c:	40 f4       	brcc	.+16     	; 0xfe6e <stat+0x8c>
    fe5e:	fc 01       	movw	r30, r24
    fe60:	e2 5b       	subi	r30, 0xB2	; 178
    fe62:	f8 4f       	sbci	r31, 0xF8	; 248
    fe64:	80 81       	ld	r24, Z
    fe66:	08 2e       	mov	r0, r24
    fe68:	00 0c       	add	r0, r0
    fe6a:	99 0b       	sbc	r25, r25
    fe6c:	02 c0       	rjmp	.+4      	; 0xfe72 <stat+0x90>
    fe6e:	83 e2       	ldi	r24, 0x23	; 35
    fe70:	90 e0       	ldi	r25, 0x00	; 0
    fe72:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
    fe76:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
    fe7a:	8f ef       	ldi	r24, 0xFF	; 255
    fe7c:	9f ef       	ldi	r25, 0xFF	; 255
    fe7e:	38 c0       	rjmp	.+112    	; 0xfef0 <stat+0x10e>
    fe80:	89 81       	ldd	r24, Y+1	; 0x01
    fe82:	9a 81       	ldd	r25, Y+2	; 0x02
    fe84:	ab 81       	ldd	r26, Y+3	; 0x03
    fe86:	bc 81       	ldd	r27, Y+4	; 0x04
    fe88:	f8 01       	movw	r30, r16
    fe8a:	80 8f       	std	Z+24, r24	; 0x18
    fe8c:	91 8f       	std	Z+25, r25	; 0x19
    fe8e:	a2 8f       	std	Z+26, r26	; 0x1a
    fe90:	b3 8f       	std	Z+27, r27	; 0x1b
    fe92:	6f 81       	ldd	r22, Y+7	; 0x07
    fe94:	78 85       	ldd	r23, Y+8	; 0x08
    fe96:	8d 81       	ldd	r24, Y+5	; 0x05
    fe98:	9e 81       	ldd	r25, Y+6	; 0x06
    fe9a:	5f df       	rcall	.-322    	; 0xfd5a <fat_time_to_unix>
    fe9c:	f8 01       	movw	r30, r16
    fe9e:	64 a3       	std	Z+36, r22	; 0x24
    fea0:	75 a3       	std	Z+37, r23	; 0x25
    fea2:	86 a3       	std	Z+38, r24	; 0x26
    fea4:	97 a3       	std	Z+39, r25	; 0x27
    fea6:	60 a7       	std	Z+40, r22	; 0x28
    fea8:	71 a7       	std	Z+41, r23	; 0x29
    feaa:	82 a7       	std	Z+42, r24	; 0x2a
    feac:	93 a7       	std	Z+43, r25	; 0x2b
    feae:	64 a7       	std	Z+44, r22	; 0x2c
    feb0:	75 a7       	std	Z+45, r23	; 0x2d
    feb2:	86 a7       	std	Z+46, r24	; 0x2e
    feb4:	97 a7       	std	Z+47, r25	; 0x2f
    feb6:	29 85       	ldd	r18, Y+9	; 0x09
    feb8:	20 fd       	sbrc	r18, 0
    feba:	03 c0       	rjmp	.+6      	; 0xfec2 <stat+0xe0>
    febc:	8f ef       	ldi	r24, 0xFF	; 255
    febe:	91 e0       	ldi	r25, 0x01	; 1
    fec0:	02 c0       	rjmp	.+4      	; 0xfec6 <stat+0xe4>
    fec2:	8d e6       	ldi	r24, 0x6D	; 109
    fec4:	91 e0       	ldi	r25, 0x01	; 1
    fec6:	48 ee       	ldi	r20, 0xE8	; 232
    fec8:	53 e0       	ldi	r21, 0x03	; 3
    feca:	f8 01       	movw	r30, r16
    fecc:	51 8b       	std	Z+17, r21	; 0x11
    fece:	40 8b       	std	Z+16, r20	; 0x10
    fed0:	53 8b       	std	Z+19, r21	; 0x13
    fed2:	42 8b       	std	Z+18, r20	; 0x12
    fed4:	24 ff       	sbrs	r18, 4
    fed6:	02 c0       	rjmp	.+4      	; 0xfedc <stat+0xfa>
    fed8:	90 64       	ori	r25, 0x40	; 64
    feda:	01 c0       	rjmp	.+2      	; 0xfede <stat+0xfc>
    fedc:	90 68       	ori	r25, 0x80	; 128
    fede:	a0 e0       	ldi	r26, 0x00	; 0
    fee0:	b0 e0       	ldi	r27, 0x00	; 0
    fee2:	f8 01       	movw	r30, r16
    fee4:	80 87       	std	Z+8, r24	; 0x08
    fee6:	91 87       	std	Z+9, r25	; 0x09
    fee8:	a2 87       	std	Z+10, r26	; 0x0a
    feea:	b3 87       	std	Z+11, r27	; 0x0b
    feec:	80 e0       	ldi	r24, 0x00	; 0
    feee:	90 e0       	ldi	r25, 0x00	; 0
    fef0:	ca 5e       	subi	r28, 0xEA	; 234
    fef2:	de 4f       	sbci	r29, 0xFE	; 254
    fef4:	e6 e0       	ldi	r30, 0x06	; 6
    fef6:	0c 94 5c ec 	jmp	0x1d8b8	; 0x1d8b8 <__epilogue_restores__+0x18>

0000fefa <unix_time_to_fat>:
    fefa:	a4 e0       	ldi	r26, 0x04	; 4
    fefc:	b0 e0       	ldi	r27, 0x00	; 0
    fefe:	e3 e8       	ldi	r30, 0x83	; 131
    ff00:	ff e7       	ldi	r31, 0x7F	; 127
    ff02:	0c 94 40 ec 	jmp	0x1d880	; 0x1d880 <__prologue_saves__+0x18>
    ff06:	69 83       	std	Y+1, r22	; 0x01
    ff08:	7a 83       	std	Y+2, r23	; 0x02
    ff0a:	8b 83       	std	Y+3, r24	; 0x03
    ff0c:	9c 83       	std	Y+4, r25	; 0x04
    ff0e:	7a 01       	movw	r14, r20
    ff10:	89 01       	movw	r16, r18
    ff12:	ce 01       	movw	r24, r28
    ff14:	01 96       	adiw	r24, 0x01	; 1
    ff16:	0e 94 2e 38 	call	0x705c	; 0x705c <gmtime>
    ff1a:	fc 01       	movw	r30, r24
    ff1c:	22 85       	ldd	r18, Z+10	; 0x0a
    ff1e:	33 85       	ldd	r19, Z+11	; 0x0b
    ff20:	20 55       	subi	r18, 0x50	; 80
    ff22:	31 09       	sbc	r19, r1
    ff24:	c9 01       	movw	r24, r18
    ff26:	98 2f       	mov	r25, r24
    ff28:	88 27       	eor	r24, r24
    ff2a:	99 0f       	add	r25, r25
    ff2c:	20 85       	ldd	r18, Z+8	; 0x08
    ff2e:	31 85       	ldd	r19, Z+9	; 0x09
    ff30:	2f 5f       	subi	r18, 0xFF	; 255
    ff32:	3f 4f       	sbci	r19, 0xFF	; 255
    ff34:	45 e0       	ldi	r20, 0x05	; 5
    ff36:	22 0f       	add	r18, r18
    ff38:	33 1f       	adc	r19, r19
    ff3a:	4a 95       	dec	r20
    ff3c:	e1 f7       	brne	.-8      	; 0xff36 <__DATA_REGION_LENGTH__+0x36>
    ff3e:	28 2b       	or	r18, r24
    ff40:	39 2b       	or	r19, r25
    ff42:	86 81       	ldd	r24, Z+6	; 0x06
    ff44:	97 81       	ldd	r25, Z+7	; 0x07
    ff46:	28 2b       	or	r18, r24
    ff48:	39 2b       	or	r19, r25
    ff4a:	d7 01       	movw	r26, r14
    ff4c:	2d 93       	st	X+, r18
    ff4e:	3c 93       	st	X, r19
    ff50:	84 81       	ldd	r24, Z+4	; 0x04
    ff52:	20 e0       	ldi	r18, 0x00	; 0
    ff54:	30 e0       	ldi	r19, 0x00	; 0
    ff56:	38 2f       	mov	r19, r24
    ff58:	33 0f       	add	r19, r19
    ff5a:	33 0f       	add	r19, r19
    ff5c:	33 0f       	add	r19, r19
    ff5e:	82 81       	ldd	r24, Z+2	; 0x02
    ff60:	93 81       	ldd	r25, Z+3	; 0x03
    ff62:	55 e0       	ldi	r21, 0x05	; 5
    ff64:	88 0f       	add	r24, r24
    ff66:	99 1f       	adc	r25, r25
    ff68:	5a 95       	dec	r21
    ff6a:	e1 f7       	brne	.-8      	; 0xff64 <__DATA_REGION_LENGTH__+0x64>
    ff6c:	82 2b       	or	r24, r18
    ff6e:	93 2b       	or	r25, r19
    ff70:	20 81       	ld	r18, Z
    ff72:	31 81       	ldd	r19, Z+1	; 0x01
    ff74:	36 95       	lsr	r19
    ff76:	27 95       	ror	r18
    ff78:	82 2b       	or	r24, r18
    ff7a:	93 2b       	or	r25, r19
    ff7c:	f8 01       	movw	r30, r16
    ff7e:	91 83       	std	Z+1, r25	; 0x01
    ff80:	80 83       	st	Z, r24
    ff82:	24 96       	adiw	r28, 0x04	; 4
    ff84:	e6 e0       	ldi	r30, 0x06	; 6
    ff86:	0c 94 5c ec 	jmp	0x1d8b8	; 0x1d8b8 <__epilogue_restores__+0x18>

0000ff8a <utime>:
    ff8a:	aa e1       	ldi	r26, 0x1A	; 26
    ff8c:	b1 e0       	ldi	r27, 0x01	; 1
    ff8e:	eb ec       	ldi	r30, 0xCB	; 203
    ff90:	ff e7       	ldi	r31, 0x7F	; 127
    ff92:	0c 94 42 ec 	jmp	0x1d884	; 0x1d884 <__prologue_saves__+0x1c>
    ff96:	8c 01       	movw	r16, r24
    ff98:	61 15       	cp	r22, r1
    ff9a:	71 05       	cpc	r23, r1
    ff9c:	31 f0       	breq	.+12     	; 0xffaa <utime+0x20>
    ff9e:	fb 01       	movw	r30, r22
    ffa0:	64 81       	ldd	r22, Z+4	; 0x04
    ffa2:	75 81       	ldd	r23, Z+5	; 0x05
    ffa4:	86 81       	ldd	r24, Z+6	; 0x06
    ffa6:	97 81       	ldd	r25, Z+7	; 0x07
    ffa8:	04 c0       	rjmp	.+8      	; 0xffb2 <utime+0x28>
    ffaa:	80 e0       	ldi	r24, 0x00	; 0
    ffac:	90 e0       	ldi	r25, 0x00	; 0
    ffae:	0e 94 89 38 	call	0x7112	; 0x7112 <time>
    ffb2:	9e 01       	movw	r18, r28
    ffb4:	29 5e       	subi	r18, 0xE9	; 233
    ffb6:	3e 4f       	sbci	r19, 0xFE	; 254
    ffb8:	ae 01       	movw	r20, r28
    ffba:	47 5e       	subi	r20, 0xE7	; 231
    ffbc:	5e 4f       	sbci	r21, 0xFE	; 254
    ffbe:	9d df       	rcall	.-198    	; 0xfefa <unix_time_to_fat>
    ffc0:	c7 5e       	subi	r28, 0xE7	; 231
    ffc2:	de 4f       	sbci	r29, 0xFE	; 254
    ffc4:	88 81       	ld	r24, Y
    ffc6:	99 81       	ldd	r25, Y+1	; 0x01
    ffc8:	c9 51       	subi	r28, 0x19	; 25
    ffca:	d1 40       	sbci	r29, 0x01	; 1
    ffcc:	9e 83       	std	Y+6, r25	; 0x06
    ffce:	8d 83       	std	Y+5, r24	; 0x05
    ffd0:	c9 5e       	subi	r28, 0xE9	; 233
    ffd2:	de 4f       	sbci	r29, 0xFE	; 254
    ffd4:	88 81       	ld	r24, Y
    ffd6:	99 81       	ldd	r25, Y+1	; 0x01
    ffd8:	c7 51       	subi	r28, 0x17	; 23
    ffda:	d1 40       	sbci	r29, 0x01	; 1
    ffdc:	98 87       	std	Y+8, r25	; 0x08
    ffde:	8f 83       	std	Y+7, r24	; 0x07
    ffe0:	be 01       	movw	r22, r28
    ffe2:	6f 5f       	subi	r22, 0xFF	; 255
    ffe4:	7f 4f       	sbci	r23, 0xFF	; 255
    ffe6:	c8 01       	movw	r24, r16
    ffe8:	0e 94 df 67 	call	0xcfbe	; 0xcfbe <f_utime>
    ffec:	84 31       	cpi	r24, 0x14	; 20
    ffee:	91 05       	cpc	r25, r1
    fff0:	40 f4       	brcc	.+16     	; 0x10002 <__EEPROM_REGION_LENGTH__+0x2>
    fff2:	fc 01       	movw	r30, r24
    fff4:	e2 5b       	subi	r30, 0xB2	; 178
    fff6:	f8 4f       	sbci	r31, 0xF8	; 248
    fff8:	80 81       	ld	r24, Z
    fffa:	08 2e       	mov	r0, r24
    fffc:	00 0c       	add	r0, r0
    fffe:	99 0b       	sbc	r25, r25
   10000:	02 c0       	rjmp	.+4      	; 0x10006 <__EEPROM_REGION_LENGTH__+0x6>
   10002:	83 e2       	ldi	r24, 0x23	; 35
   10004:	90 e0       	ldi	r25, 0x00	; 0
   10006:	c6 5e       	subi	r28, 0xE6	; 230
   10008:	de 4f       	sbci	r29, 0xFE	; 254
   1000a:	e4 e0       	ldi	r30, 0x04	; 4
   1000c:	0c 94 5e ec 	jmp	0x1d8bc	; 0x1d8bc <__epilogue_restores__+0x1c>

00010010 <fileno_to_fatfs>:
   10010:	83 30       	cpi	r24, 0x03	; 3
   10012:	91 05       	cpc	r25, r1
   10014:	48 f4       	brcc	.+18     	; 0x10028 <fileno_to_fatfs+0x18>
   10016:	89 e0       	ldi	r24, 0x09	; 9
   10018:	90 e0       	ldi	r25, 0x00	; 0
   1001a:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
   1001e:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
   10022:	80 e0       	ldi	r24, 0x00	; 0
   10024:	90 e0       	ldi	r25, 0x00	; 0
   10026:	08 95       	ret
   10028:	57 db       	rcall	.-2386   	; 0xf6d8 <fileno_to_stream>
   1002a:	00 97       	sbiw	r24, 0x00	; 0
   1002c:	d1 f3       	breq	.-12     	; 0x10022 <fileno_to_fatfs+0x12>
   1002e:	fc 01       	movw	r30, r24
   10030:	84 85       	ldd	r24, Z+12	; 0x0c
   10032:	95 85       	ldd	r25, Z+13	; 0x0d
   10034:	00 97       	sbiw	r24, 0x00	; 0
   10036:	79 f3       	breq	.-34     	; 0x10016 <fileno_to_fatfs+0x6>
   10038:	08 95       	ret

0001003a <ftell>:
   1003a:	10 92 19 1d 	sts	0x1D19, r1	; 0x801d19 <errno+0x1>
   1003e:	10 92 18 1d 	sts	0x1D18, r1	; 0x801d18 <errno>
   10042:	2e db       	rcall	.-2468   	; 0xf6a0 <fileno>
   10044:	83 30       	cpi	r24, 0x03	; 3
   10046:	91 05       	cpc	r25, r1
   10048:	48 f0       	brcs	.+18     	; 0x1005c <ftell+0x22>
   1004a:	e2 df       	rcall	.-60     	; 0x10010 <fileno_to_fatfs>
   1004c:	00 97       	sbiw	r24, 0x00	; 0
   1004e:	51 f4       	brne	.+20     	; 0x10064 <ftell+0x2a>
   10050:	89 e0       	ldi	r24, 0x09	; 9
   10052:	90 e0       	ldi	r25, 0x00	; 0
   10054:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
   10058:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
   1005c:	6f ef       	ldi	r22, 0xFF	; 255
   1005e:	7f ef       	ldi	r23, 0xFF	; 255
   10060:	cb 01       	movw	r24, r22
   10062:	08 95       	ret
   10064:	fc 01       	movw	r30, r24
   10066:	60 89       	ldd	r22, Z+16	; 0x10
   10068:	71 89       	ldd	r23, Z+17	; 0x11
   1006a:	82 89       	ldd	r24, Z+18	; 0x12
   1006c:	93 89       	ldd	r25, Z+19	; 0x13
   1006e:	08 95       	ret

00010070 <lseek>:
   10070:	a0 e0       	ldi	r26, 0x00	; 0
   10072:	b0 e0       	ldi	r27, 0x00	; 0
   10074:	ee e3       	ldi	r30, 0x3E	; 62
   10076:	f0 e8       	ldi	r31, 0x80	; 128
   10078:	0c 94 3c ec 	jmp	0x1d878	; 0x1d878 <__prologue_saves__+0x10>
   1007c:	5c 01       	movw	r10, r24
   1007e:	6a 01       	movw	r12, r20
   10080:	7b 01       	movw	r14, r22
   10082:	89 01       	movw	r16, r18
   10084:	10 92 19 1d 	sts	0x1D19, r1	; 0x801d19 <errno+0x1>
   10088:	10 92 18 1d 	sts	0x1D18, r1	; 0x801d18 <errno>
   1008c:	c1 df       	rcall	.-126    	; 0x10010 <fileno_to_fatfs>
   1008e:	ec 01       	movw	r28, r24
   10090:	89 2b       	or	r24, r25
   10092:	19 f4       	brne	.+6      	; 0x1009a <lseek+0x2a>
   10094:	88 e1       	ldi	r24, 0x18	; 24
   10096:	90 e0       	ldi	r25, 0x00	; 0
   10098:	26 c0       	rjmp	.+76     	; 0x100e6 <lseek+0x76>
   1009a:	83 e0       	ldi	r24, 0x03	; 3
   1009c:	a8 16       	cp	r10, r24
   1009e:	b1 04       	cpc	r11, r1
   100a0:	d0 f1       	brcs	.+116    	; 0x10116 <lseek+0xa6>
   100a2:	c5 01       	movw	r24, r10
   100a4:	19 db       	rcall	.-2510   	; 0xf6d8 <fileno_to_stream>
   100a6:	fc 01       	movw	r30, r24
   100a8:	93 81       	ldd	r25, Z+3	; 0x03
   100aa:	90 64       	ori	r25, 0x40	; 64
   100ac:	93 83       	std	Z+3, r25	; 0x03
   100ae:	02 30       	cpi	r16, 0x02	; 2
   100b0:	11 05       	cpc	r17, r1
   100b2:	a9 f5       	brne	.+106    	; 0x1011e <lseek+0xae>
   100b4:	8a 85       	ldd	r24, Y+10	; 0x0a
   100b6:	9b 85       	ldd	r25, Y+11	; 0x0b
   100b8:	ac 85       	ldd	r26, Y+12	; 0x0c
   100ba:	bd 85       	ldd	r27, Y+13	; 0x0d
   100bc:	c8 0e       	add	r12, r24
   100be:	d9 1e       	adc	r13, r25
   100c0:	ea 1e       	adc	r14, r26
   100c2:	fb 1e       	adc	r15, r27
   100c4:	b7 01       	movw	r22, r14
   100c6:	a6 01       	movw	r20, r12
   100c8:	ce 01       	movw	r24, r28
   100ca:	0e 94 bb 5f 	call	0xbf76	; 0xbf76 <f_lseek>
   100ce:	00 97       	sbiw	r24, 0x00	; 0
   100d0:	79 f0       	breq	.+30     	; 0x100f0 <lseek+0x80>
   100d2:	84 31       	cpi	r24, 0x14	; 20
   100d4:	91 05       	cpc	r25, r1
   100d6:	58 f5       	brcc	.+86     	; 0x1012e <lseek+0xbe>
   100d8:	fc 01       	movw	r30, r24
   100da:	e2 5b       	subi	r30, 0xB2	; 178
   100dc:	f8 4f       	sbci	r31, 0xF8	; 248
   100de:	80 81       	ld	r24, Z
   100e0:	08 2e       	mov	r0, r24
   100e2:	00 0c       	add	r0, r0
   100e4:	99 0b       	sbc	r25, r25
   100e6:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
   100ea:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
   100ee:	13 c0       	rjmp	.+38     	; 0x10116 <lseek+0xa6>
   100f0:	68 89       	ldd	r22, Y+16	; 0x10
   100f2:	79 89       	ldd	r23, Y+17	; 0x11
   100f4:	8a 89       	ldd	r24, Y+18	; 0x12
   100f6:	9b 89       	ldd	r25, Y+19	; 0x13
   100f8:	c6 16       	cp	r12, r22
   100fa:	d7 06       	cpc	r13, r23
   100fc:	e8 06       	cpc	r14, r24
   100fe:	f9 06       	cpc	r15, r25
   10100:	c9 f0       	breq	.+50     	; 0x10134 <lseek+0xc4>
   10102:	84 e5       	ldi	r24, 0x54	; 84
   10104:	9c e0       	ldi	r25, 0x0C	; 12
   10106:	1f 92       	push	r1
   10108:	9f 93       	push	r25
   1010a:	8f 93       	push	r24
   1010c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   10110:	0f 90       	pop	r0
   10112:	0f 90       	pop	r0
   10114:	0f 90       	pop	r0
   10116:	6f ef       	ldi	r22, 0xFF	; 255
   10118:	7f ef       	ldi	r23, 0xFF	; 255
   1011a:	cb 01       	movw	r24, r22
   1011c:	0b c0       	rjmp	.+22     	; 0x10134 <lseek+0xc4>
   1011e:	01 30       	cpi	r16, 0x01	; 1
   10120:	11 05       	cpc	r17, r1
   10122:	81 f6       	brne	.-96     	; 0x100c4 <lseek+0x54>
   10124:	88 89       	ldd	r24, Y+16	; 0x10
   10126:	99 89       	ldd	r25, Y+17	; 0x11
   10128:	aa 89       	ldd	r26, Y+18	; 0x12
   1012a:	bb 89       	ldd	r27, Y+19	; 0x13
   1012c:	c7 cf       	rjmp	.-114    	; 0x100bc <lseek+0x4c>
   1012e:	83 e2       	ldi	r24, 0x23	; 35
   10130:	90 e0       	ldi	r25, 0x00	; 0
   10132:	d9 cf       	rjmp	.-78     	; 0x100e6 <lseek+0x76>
   10134:	cd b7       	in	r28, 0x3d	; 61
   10136:	de b7       	in	r29, 0x3e	; 62
   10138:	ea e0       	ldi	r30, 0x0A	; 10
   1013a:	0c 94 58 ec 	jmp	0x1d8b0	; 0x1d8b0 <__epilogue_restores__+0x10>

0001013e <fseek>:
   1013e:	cf 92       	push	r12
   10140:	df 92       	push	r13
   10142:	ef 92       	push	r14
   10144:	ff 92       	push	r15
   10146:	cf 93       	push	r28
   10148:	df 93       	push	r29
   1014a:	6a 01       	movw	r12, r20
   1014c:	7b 01       	movw	r14, r22
   1014e:	e9 01       	movw	r28, r18
   10150:	a7 da       	rcall	.-2738   	; 0xf6a0 <fileno>
   10152:	97 fd       	sbrc	r25, 7
   10154:	12 c0       	rjmp	.+36     	; 0x1017a <fseek+0x3c>
   10156:	9e 01       	movw	r18, r28
   10158:	b7 01       	movw	r22, r14
   1015a:	a6 01       	movw	r20, r12
   1015c:	89 df       	rcall	.-238    	; 0x10070 <lseek>
   1015e:	21 e0       	ldi	r18, 0x01	; 1
   10160:	30 e0       	ldi	r19, 0x00	; 0
   10162:	6f 3f       	cpi	r22, 0xFF	; 255
   10164:	7f 4f       	sbci	r23, 0xFF	; 255
   10166:	8f 4f       	sbci	r24, 0xFF	; 255
   10168:	9f 4f       	sbci	r25, 0xFF	; 255
   1016a:	11 f0       	breq	.+4      	; 0x10170 <fseek+0x32>
   1016c:	20 e0       	ldi	r18, 0x00	; 0
   1016e:	30 e0       	ldi	r19, 0x00	; 0
   10170:	88 27       	eor	r24, r24
   10172:	99 27       	eor	r25, r25
   10174:	82 1b       	sub	r24, r18
   10176:	93 0b       	sbc	r25, r19
   10178:	02 c0       	rjmp	.+4      	; 0x1017e <fseek+0x40>
   1017a:	8f ef       	ldi	r24, 0xFF	; 255
   1017c:	9f ef       	ldi	r25, 0xFF	; 255
   1017e:	df 91       	pop	r29
   10180:	cf 91       	pop	r28
   10182:	ff 90       	pop	r15
   10184:	ef 90       	pop	r14
   10186:	df 90       	pop	r13
   10188:	cf 90       	pop	r12
   1018a:	08 95       	ret

0001018c <read>:
   1018c:	a2 e0       	ldi	r26, 0x02	; 2
   1018e:	b0 e0       	ldi	r27, 0x00	; 0
   10190:	ec ec       	ldi	r30, 0xCC	; 204
   10192:	f0 e8       	ldi	r31, 0x80	; 128
   10194:	0c 94 3c ec 	jmp	0x1d878	; 0x1d878 <__prologue_saves__+0x10>
   10198:	5c 01       	movw	r10, r24
   1019a:	8b 01       	movw	r16, r22
   1019c:	6a 01       	movw	r12, r20
   1019e:	fb 01       	movw	r30, r22
   101a0:	10 82       	st	Z, r1
   101a2:	10 92 19 1d 	sts	0x1D19, r1	; 0x801d19 <errno+0x1>
   101a6:	10 92 18 1d 	sts	0x1D18, r1	; 0x801d18 <errno>
   101aa:	96 da       	rcall	.-2772   	; 0xf6d8 <fileno_to_stream>
   101ac:	7c 01       	movw	r14, r24
   101ae:	80 91 1a 1d 	lds	r24, 0x1D1A	; 0x801d1a <__iob>
   101b2:	90 91 1b 1d 	lds	r25, 0x1D1B	; 0x801d1b <__iob+0x1>
   101b6:	e8 16       	cp	r14, r24
   101b8:	f9 06       	cpc	r15, r25
   101ba:	c9 f4       	brne	.+50     	; 0x101ee <read+0x62>
   101bc:	f7 01       	movw	r30, r14
   101be:	83 81       	ldd	r24, Z+3	; 0x03
   101c0:	80 64       	ori	r24, 0x40	; 64
   101c2:	83 83       	std	Z+3, r24	; 0x03
   101c4:	1a 82       	std	Y+2, r1	; 0x02
   101c6:	19 82       	std	Y+1, r1	; 0x01
   101c8:	c0 0e       	add	r12, r16
   101ca:	d1 1e       	adc	r13, r17
   101cc:	0c 15       	cp	r16, r12
   101ce:	1d 05       	cpc	r17, r13
   101d0:	09 f4       	brne	.+2      	; 0x101d4 <read+0x48>
   101d2:	3d c0       	rjmp	.+122    	; 0x1024e <read+0xc2>
   101d4:	c7 01       	movw	r24, r14
   101d6:	4a d9       	rcall	.-3436   	; 0xf46c <fgetc>
   101d8:	97 fd       	sbrc	r25, 7
   101da:	39 c0       	rjmp	.+114    	; 0x1024e <read+0xc2>
   101dc:	f8 01       	movw	r30, r16
   101de:	81 93       	st	Z+, r24
   101e0:	8f 01       	movw	r16, r30
   101e2:	89 81       	ldd	r24, Y+1	; 0x01
   101e4:	9a 81       	ldd	r25, Y+2	; 0x02
   101e6:	01 96       	adiw	r24, 0x01	; 1
   101e8:	9a 83       	std	Y+2, r25	; 0x02
   101ea:	89 83       	std	Y+1, r24	; 0x01
   101ec:	ef cf       	rjmp	.-34     	; 0x101cc <read+0x40>
   101ee:	80 91 1c 1d 	lds	r24, 0x1D1C	; 0x801d1c <__iob+0x2>
   101f2:	90 91 1d 1d 	lds	r25, 0x1D1D	; 0x801d1d <__iob+0x3>
   101f6:	e8 16       	cp	r14, r24
   101f8:	f9 06       	cpc	r15, r25
   101fa:	71 f1       	breq	.+92     	; 0x10258 <read+0xcc>
   101fc:	80 91 1e 1d 	lds	r24, 0x1D1E	; 0x801d1e <__iob+0x4>
   10200:	90 91 1f 1d 	lds	r25, 0x1D1F	; 0x801d1f <__iob+0x5>
   10204:	e8 16       	cp	r14, r24
   10206:	f9 06       	cpc	r15, r25
   10208:	39 f1       	breq	.+78     	; 0x10258 <read+0xcc>
   1020a:	c5 01       	movw	r24, r10
   1020c:	01 df       	rcall	.-510    	; 0x10010 <fileno_to_fatfs>
   1020e:	00 97       	sbiw	r24, 0x00	; 0
   10210:	19 f4       	brne	.+6      	; 0x10218 <read+0x8c>
   10212:	89 e0       	ldi	r24, 0x09	; 9
   10214:	90 e0       	ldi	r25, 0x00	; 0
   10216:	16 c0       	rjmp	.+44     	; 0x10244 <read+0xb8>
   10218:	9e 01       	movw	r18, r28
   1021a:	2f 5f       	subi	r18, 0xFF	; 255
   1021c:	3f 4f       	sbci	r19, 0xFF	; 255
   1021e:	a6 01       	movw	r20, r12
   10220:	b8 01       	movw	r22, r16
   10222:	0e 94 b1 5a 	call	0xb562	; 0xb562 <f_read>
   10226:	00 97       	sbiw	r24, 0x00	; 0
   10228:	91 f0       	breq	.+36     	; 0x1024e <read+0xc2>
   1022a:	84 31       	cpi	r24, 0x14	; 20
   1022c:	91 05       	cpc	r25, r1
   1022e:	40 f4       	brcc	.+16     	; 0x10240 <read+0xb4>
   10230:	fc 01       	movw	r30, r24
   10232:	e2 5b       	subi	r30, 0xB2	; 178
   10234:	f8 4f       	sbci	r31, 0xF8	; 248
   10236:	80 81       	ld	r24, Z
   10238:	08 2e       	mov	r0, r24
   1023a:	00 0c       	add	r0, r0
   1023c:	99 0b       	sbc	r25, r25
   1023e:	02 c0       	rjmp	.+4      	; 0x10244 <read+0xb8>
   10240:	83 e2       	ldi	r24, 0x23	; 35
   10242:	90 e0       	ldi	r25, 0x00	; 0
   10244:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
   10248:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
   1024c:	05 c0       	rjmp	.+10     	; 0x10258 <read+0xcc>
   1024e:	69 81       	ldd	r22, Y+1	; 0x01
   10250:	7a 81       	ldd	r23, Y+2	; 0x02
   10252:	80 e0       	ldi	r24, 0x00	; 0
   10254:	90 e0       	ldi	r25, 0x00	; 0
   10256:	03 c0       	rjmp	.+6      	; 0x1025e <read+0xd2>
   10258:	6f ef       	ldi	r22, 0xFF	; 255
   1025a:	7f ef       	ldi	r23, 0xFF	; 255
   1025c:	cb 01       	movw	r24, r22
   1025e:	22 96       	adiw	r28, 0x02	; 2
   10260:	ea e0       	ldi	r30, 0x0A	; 10
   10262:	0c 94 58 ec 	jmp	0x1d8b0	; 0x1d8b0 <__epilogue_restores__+0x10>

00010266 <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
   10266:	0f 93       	push	r16
   10268:	1f 93       	push	r17
   1026a:	cf 93       	push	r28
   1026c:	df 93       	push	r29
   1026e:	ec 01       	movw	r28, r24
   10270:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
   10272:	64 9f       	mul	r22, r20
   10274:	80 01       	movw	r16, r0
   10276:	65 9f       	mul	r22, r21
   10278:	10 0d       	add	r17, r0
   1027a:	74 9f       	mul	r23, r20
   1027c:	10 0d       	add	r17, r0
    int fn = fileno(stream);
   1027e:	11 24       	eor	r1, r1
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
   10280:	0f da       	rcall	.-3042   	; 0xf6a0 <fileno>
   10282:	a8 01       	movw	r20, r16
   10284:	be 01       	movw	r22, r28
    if(ret < 0)
   10286:	82 df       	rcall	.-252    	; 0x1018c <read>
   10288:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
   1028a:	02 c0       	rjmp	.+4      	; 0x10290 <fread+0x2a>
   1028c:	cb 01       	movw	r24, r22
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
   1028e:	02 c0       	rjmp	.+4      	; 0x10294 <fread+0x2e>
   10290:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
   10292:	90 e0       	ldi	r25, 0x00	; 0
   10294:	df 91       	pop	r29
   10296:	cf 91       	pop	r28
   10298:	1f 91       	pop	r17
   1029a:	0f 91       	pop	r16
   1029c:	08 95       	ret

0001029e <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
   1029e:	cf 93       	push	r28
   102a0:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
   102a2:	10 92 19 1d 	sts	0x1D19, r1	; 0x801d19 <errno+0x1>
   102a6:	10 92 18 1d 	sts	0x1D18, r1	; 0x801d18 <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
   102aa:	83 30       	cpi	r24, 0x03	; 3
   102ac:	91 05       	cpc	r25, r1
   102ae:	18 f4       	brcc	.+6      	; 0x102b6 <syncfs+0x18>

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
   102b0:	89 e0       	ldi	r24, 0x09	; 9
   102b2:	90 e0       	ldi	r25, 0x00	; 0
   102b4:	18 c0       	rjmp	.+48     	; 0x102e6 <syncfs+0x48>
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
   102b6:	ec 01       	movw	r28, r24
   102b8:	0f da       	rcall	.-3042   	; 0xf6d8 <fileno_to_stream>
    // reset unget on sync
    stream->flags |= __SUNGET;
   102ba:	fc 01       	movw	r30, r24
   102bc:	93 81       	ldd	r25, Z+3	; 0x03

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
   102be:	90 64       	ori	r25, 0x40	; 64
   102c0:	93 83       	std	Z+3, r25	; 0x03
    if(fh == NULL)
   102c2:	ce 01       	movw	r24, r28
   102c4:	a5 de       	rcall	.-694    	; 0x10010 <fileno_to_fatfs>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
   102c6:	00 97       	sbiw	r24, 0x00	; 0
   102c8:	99 f3       	breq	.-26     	; 0x102b0 <syncfs+0x12>
    if (res != FR_OK)
   102ca:	0e 94 93 5d 	call	0xbb26	; 0xbb26 <f_sync>
   102ce:	00 97       	sbiw	r24, 0x00	; 0
   102d0:	a1 f0       	breq	.+40     	; 0x102fa <syncfs+0x5c>
   102d2:	84 31       	cpi	r24, 0x14	; 20
   102d4:	91 05       	cpc	r25, r1
   102d6:	70 f4       	brcc	.+28     	; 0x102f4 <syncfs+0x56>
   102d8:	fc 01       	movw	r30, r24
   102da:	e2 5b       	subi	r30, 0xB2	; 178
   102dc:	f8 4f       	sbci	r31, 0xF8	; 248
   102de:	80 81       	ld	r24, Z
   102e0:	08 2e       	mov	r0, r24
    {
        errno = fatfs_to_errno(res);
   102e2:	00 0c       	add	r0, r0
   102e4:	99 0b       	sbc	r25, r25
   102e6:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
        return(-1);
   102ea:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
   102ee:	8f ef       	ldi	r24, 0xFF	; 255
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
   102f0:	9f ef       	ldi	r25, 0xFF	; 255
   102f2:	05 c0       	rjmp	.+10     	; 0x102fe <syncfs+0x60>
   102f4:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
   102f6:	90 e0       	ldi	r25, 0x00	; 0
   102f8:	f6 cf       	rjmp	.-20     	; 0x102e6 <syncfs+0x48>
}
   102fa:	80 e0       	ldi	r24, 0x00	; 0
   102fc:	90 e0       	ldi	r25, 0x00	; 0
   102fe:	df 91       	pop	r29
   10300:	cf 91       	pop	r28
   10302:	08 95       	ret

00010304 <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
   10304:	cf 93       	push	r28
   10306:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
   10308:	c0 e0       	ldi	r28, 0x00	; 0
   1030a:	d0 e0       	ldi	r29, 0x00	; 0
   1030c:	21 96       	adiw	r28, 0x01	; 1
   1030e:	c0 31       	cpi	r28, 0x10	; 16
   10310:	d1 05       	cpc	r29, r1
   10312:	51 f0       	breq	.+20     	; 0x10328 <sync+0x24>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
   10314:	c3 30       	cpi	r28, 0x03	; 3
   10316:	d1 05       	cpc	r29, r1
   10318:	cc f3       	brlt	.-14     	; 0x1030c <sync+0x8>
    {
        if(isatty(i))
            continue;

        // fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
   1031a:	ce 01       	movw	r24, r28
   1031c:	79 de       	rcall	.-782    	; 0x10010 <fileno_to_fatfs>
        if(fh == NULL)
   1031e:	89 2b       	or	r24, r25
            continue;

        (void ) syncfs(i);
   10320:	a9 f3       	breq	.-22     	; 0x1030c <sync+0x8>
   10322:	ce 01       	movw	r24, r28
   10324:	bc df       	rcall	.-136    	; 0x1029e <syncfs>
    }
}
   10326:	f2 cf       	rjmp	.-28     	; 0x1030c <sync+0x8>
   10328:	df 91       	pop	r29
   1032a:	cf 91       	pop	r28
   1032c:	08 95       	ret

0001032e <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
   1032e:	a2 e0       	ldi	r26, 0x02	; 2
   10330:	b0 e0       	ldi	r27, 0x00	; 0
   10332:	ed e9       	ldi	r30, 0x9D	; 157
   10334:	f1 e8       	ldi	r31, 0x81	; 129
   10336:	0c 94 3a ec 	jmp	0x1d874	; 0x1d874 <__prologue_saves__+0xc>
   1033a:	8c 01       	movw	r16, r24
   1033c:	b6 2e       	mov	r11, r22
   1033e:	f7 2e       	mov	r15, r23
   10340:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
   10342:	10 92 19 1d 	sts	0x1D19, r1	; 0x801d19 <errno+0x1>
   10346:	10 92 18 1d 	sts	0x1D18, r1	; 0x801d18 <errno>

    // TTY read function
    stream = fileno_to_stream(fd);
   1034a:	c6 d9       	rcall	.-3188   	; 0xf6d8 <fileno_to_stream>
    if(stream == stdout || stream == stderr)
   1034c:	6c 01       	movw	r12, r24
   1034e:	80 91 1c 1d 	lds	r24, 0x1D1C	; 0x801d1c <__iob+0x2>
   10352:	90 91 1d 1d 	lds	r25, 0x1D1D	; 0x801d1d <__iob+0x3>
   10356:	c8 16       	cp	r12, r24
   10358:	d9 06       	cpc	r13, r25
   1035a:	39 f0       	breq	.+14     	; 0x1036a <write+0x3c>
   1035c:	80 91 1e 1d 	lds	r24, 0x1D1E	; 0x801d1e <__iob+0x4>
   10360:	90 91 1f 1d 	lds	r25, 0x1D1F	; 0x801d1f <__iob+0x5>
   10364:	c8 16       	cp	r12, r24
   10366:	d9 06       	cpc	r13, r25
    {
        char *ptr = (char *) buf;   
        size = 0;
   10368:	d1 f4       	brne	.+52     	; 0x1039e <write+0x70>
   1036a:	1a 82       	std	Y+2, r1	; 0x02
   1036c:	19 82       	std	Y+1, r1	; 0x01
   1036e:	0b 2d       	mov	r16, r11
   10370:	1f 2d       	mov	r17, r15
   10372:	78 01       	movw	r14, r16
   10374:	e8 0c       	add	r14, r8
        while(count--)
   10376:	f9 1c       	adc	r15, r9
   10378:	0e 15       	cp	r16, r14
   1037a:	1f 05       	cpc	r17, r15
        {
            int c,ret;
            c = *ptr++;
   1037c:	d1 f1       	breq	.+116    	; 0x103f2 <write+0xc4>
   1037e:	f8 01       	movw	r30, r16
   10380:	a1 90       	ld	r10, Z+
   10382:	8f 01       	movw	r16, r30
            ret = fputc(c, stream);
   10384:	b1 2c       	mov	r11, r1
   10386:	b6 01       	movw	r22, r12
   10388:	c5 01       	movw	r24, r10
            if(c != ret)
   1038a:	c1 d8       	rcall	.-3710   	; 0xf50e <fputc>
   1038c:	a8 16       	cp	r10, r24
   1038e:	b9 06       	cpc	r11, r25
                break;

            ++size;
   10390:	81 f5       	brne	.+96     	; 0x103f2 <write+0xc4>
   10392:	89 81       	ldd	r24, Y+1	; 0x01
   10394:	9a 81       	ldd	r25, Y+2	; 0x02
   10396:	01 96       	adiw	r24, 0x01	; 1
   10398:	9a 83       	std	Y+2, r25	; 0x02
   1039a:	89 83       	std	Y+1, r24	; 0x01
        }
        return(size);
    }
    if(stream == stdin)
   1039c:	ed cf       	rjmp	.-38     	; 0x10378 <write+0x4a>
   1039e:	80 91 1a 1d 	lds	r24, 0x1D1A	; 0x801d1a <__iob>
   103a2:	90 91 1b 1d 	lds	r25, 0x1D1B	; 0x801d1b <__iob+0x1>
   103a6:	c8 16       	cp	r12, r24
   103a8:	d9 06       	cpc	r13, r25
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
   103aa:	41 f1       	breq	.+80     	; 0x103fc <write+0xce>
   103ac:	c8 01       	movw	r24, r16
    if ( fh == NULL )
   103ae:	30 de       	rcall	.-928    	; 0x10010 <fileno_to_fatfs>
   103b0:	00 97       	sbiw	r24, 0x00	; 0
    {
        errno = EBADF;
   103b2:	19 f4       	brne	.+6      	; 0x103ba <write+0x8c>
   103b4:	89 e0       	ldi	r24, 0x09	; 9
   103b6:	90 e0       	ldi	r25, 0x00	; 0
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
   103b8:	17 c0       	rjmp	.+46     	; 0x103e8 <write+0xba>
   103ba:	9e 01       	movw	r18, r28
   103bc:	2f 5f       	subi	r18, 0xFF	; 255
   103be:	3f 4f       	sbci	r19, 0xFF	; 255
   103c0:	a4 01       	movw	r20, r8
   103c2:	6b 2d       	mov	r22, r11
   103c4:	7f 2d       	mov	r23, r15
   103c6:	0e 94 fc 5b 	call	0xb7f8	; 0xb7f8 <f_write>
    if(res != FR_OK)
   103ca:	00 97       	sbiw	r24, 0x00	; 0
   103cc:	91 f0       	breq	.+36     	; 0x103f2 <write+0xc4>
   103ce:	84 31       	cpi	r24, 0x14	; 20
   103d0:	91 05       	cpc	r25, r1
   103d2:	40 f4       	brcc	.+16     	; 0x103e4 <write+0xb6>
   103d4:	fc 01       	movw	r30, r24
   103d6:	e2 5b       	subi	r30, 0xB2	; 178
   103d8:	f8 4f       	sbci	r31, 0xF8	; 248
   103da:	80 81       	ld	r24, Z
   103dc:	08 2e       	mov	r0, r24
   103de:	00 0c       	add	r0, r0
   103e0:	99 0b       	sbc	r25, r25
   103e2:	02 c0       	rjmp	.+4      	; 0x103e8 <write+0xba>
   103e4:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
   103e6:	90 e0       	ldi	r25, 0x00	; 0
   103e8:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
   103ec:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
        return(-1);
    }
    return ((ssize_t) size);
   103f0:	05 c0       	rjmp	.+10     	; 0x103fc <write+0xce>
   103f2:	69 81       	ldd	r22, Y+1	; 0x01
   103f4:	7a 81       	ldd	r23, Y+2	; 0x02
   103f6:	80 e0       	ldi	r24, 0x00	; 0
   103f8:	90 e0       	ldi	r25, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
   103fa:	03 c0       	rjmp	.+6      	; 0x10402 <write+0xd4>
   103fc:	6f ef       	ldi	r22, 0xFF	; 255
   103fe:	7f ef       	ldi	r23, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
   10400:	cb 01       	movw	r24, r22
   10402:	22 96       	adiw	r28, 0x02	; 2
   10404:	ec e0       	ldi	r30, 0x0C	; 12
   10406:	0c 94 56 ec 	jmp	0x1d8ac	; 0x1d8ac <__epilogue_restores__+0xc>

0001040a <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
   1040a:	0f 93       	push	r16
   1040c:	1f 93       	push	r17
   1040e:	cf 93       	push	r28
   10410:	df 93       	push	r29
   10412:	ec 01       	movw	r28, r24
   10414:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
   10416:	64 9f       	mul	r22, r20
   10418:	80 01       	movw	r16, r0
   1041a:	65 9f       	mul	r22, r21
   1041c:	10 0d       	add	r17, r0
   1041e:	74 9f       	mul	r23, r20
   10420:	10 0d       	add	r17, r0
    int fn = fileno(stream);
   10422:	11 24       	eor	r1, r1
    ssize_t ret;
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
   10424:	3d d9       	rcall	.-3462   	; 0xf6a0 <fileno>
   10426:	a8 01       	movw	r20, r16
   10428:	be 01       	movw	r22, r28

    if(ret < 0)
   1042a:	81 df       	rcall	.-254    	; 0x1032e <write>
   1042c:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
   1042e:	02 c0       	rjmp	.+4      	; 0x10434 <fwrite+0x2a>
   10430:	cb 01       	movw	r24, r22
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
   10432:	02 c0       	rjmp	.+4      	; 0x10438 <fwrite+0x2e>
   10434:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
   10436:	90 e0       	ldi	r25, 0x00	; 0
   10438:	df 91       	pop	r29
   1043a:	cf 91       	pop	r28
   1043c:	1f 91       	pop	r17
   1043e:	0f 91       	pop	r16
   10440:	08 95       	ret

00010442 <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
   10442:	0f 93       	push	r16
   10444:	1f 93       	push	r17
   10446:	cf 93       	push	r28
   10448:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
   1044a:	83 30       	cpi	r24, 0x03	; 3
   1044c:	91 05       	cpc	r25, r1
   1044e:	48 f4       	brcc	.+18     	; 0x10462 <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
   10450:	89 e0       	ldi	r24, 0x09	; 9
   10452:	90 e0       	ldi	r25, 0x00	; 0
   10454:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
   10458:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
        return(-1);
   1045c:	8f ef       	ldi	r24, 0xFF	; 255
   1045e:	9f ef       	ldi	r25, 0xFF	; 255
   10460:	20 c0       	rjmp	.+64     	; 0x104a2 <free_file_descriptor+0x60>
    }

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
   10462:	ec 01       	movw	r28, r24
   10464:	39 d9       	rcall	.-3470   	; 0xf6d8 <fileno_to_stream>
    if(stream == NULL)
   10466:	8c 01       	movw	r16, r24
   10468:	89 2b       	or	r24, r25
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
   1046a:	c1 f3       	breq	.-16     	; 0x1045c <free_file_descriptor+0x1a>
   1046c:	f8 01       	movw	r30, r16
   1046e:	84 85       	ldd	r24, Z+12	; 0x0c

    if(fh != NULL)
   10470:	95 85       	ldd	r25, Z+13	; 0x0d
   10472:	00 97       	sbiw	r24, 0x00	; 0
    {
        safefree(fh);
   10474:	11 f0       	breq	.+4      	; 0x1047a <free_file_descriptor+0x38>
   10476:	0e 94 3b 2a 	call	0x5476	; 0x5476 <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
   1047a:	f8 01       	movw	r30, r16
   1047c:	80 81       	ld	r24, Z
   1047e:	91 81       	ldd	r25, Z+1	; 0x01
   10480:	00 97       	sbiw	r24, 0x00	; 0
   10482:	21 f0       	breq	.+8      	; 0x1048c <free_file_descriptor+0x4a>
   10484:	23 81       	ldd	r18, Z+3	; 0x03
    {
        safefree(stream->buf);
   10486:	27 fd       	sbrc	r18, 7
   10488:	0e 94 3b 2a 	call	0x5476	; 0x5476 <safefree>
    }

    __iob[fileno]  = NULL;
   1048c:	fe 01       	movw	r30, r28
   1048e:	ee 0f       	add	r30, r30
   10490:	ff 1f       	adc	r31, r31
   10492:	e6 5e       	subi	r30, 0xE6	; 230
   10494:	f2 4e       	sbci	r31, 0xE2	; 226
   10496:	11 82       	std	Z+1, r1	; 0x01
    safefree(stream);
   10498:	10 82       	st	Z, r1
   1049a:	c8 01       	movw	r24, r16
   1049c:	0e 94 3b 2a 	call	0x5476	; 0x5476 <safefree>
    return(fileno);
}
   104a0:	ce 01       	movw	r24, r28
   104a2:	df 91       	pop	r29
   104a4:	cf 91       	pop	r28
   104a6:	1f 91       	pop	r17
   104a8:	0f 91       	pop	r16
   104aa:	08 95       	ret

000104ac <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
   104ac:	0f 93       	push	r16
   104ae:	1f 93       	push	r17
   104b0:	cf 93       	push	r28
   104b2:	df 93       	push	r29
   104b4:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
   104b6:	10 92 19 1d 	sts	0x1D19, r1	; 0x801d19 <errno+0x1>
   104ba:	10 92 18 1d 	sts	0x1D18, r1	; 0x801d18 <errno>

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
   104be:	0c d9       	rcall	.-3560   	; 0xf6d8 <fileno_to_stream>
   104c0:	89 2b       	or	r24, r25
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
   104c2:	d9 f0       	breq	.+54     	; 0x104fa <close+0x4e>
   104c4:	c8 01       	movw	r24, r16
    if(fh == NULL)
   104c6:	a4 dd       	rcall	.-1208   	; 0x10010 <fileno_to_fatfs>
   104c8:	00 97       	sbiw	r24, 0x00	; 0
    {
        return(-1);
    }
    res = f_close(fh);
   104ca:	b9 f0       	breq	.+46     	; 0x104fa <close+0x4e>
   104cc:	0e 94 13 5e 	call	0xbc26	; 0xbc26 <f_close>
    free_file_descriptor(fileno);
   104d0:	ec 01       	movw	r28, r24
    if (res != FR_OK)
   104d2:	c8 01       	movw	r24, r16
   104d4:	b6 df       	rcall	.-148    	; 0x10442 <free_file_descriptor>
   104d6:	20 97       	sbiw	r28, 0x00	; 0
   104d8:	99 f0       	breq	.+38     	; 0x10500 <close+0x54>
   104da:	c4 31       	cpi	r28, 0x14	; 20
   104dc:	d1 05       	cpc	r29, r1
   104de:	38 f4       	brcc	.+14     	; 0x104ee <close+0x42>
   104e0:	c2 5b       	subi	r28, 0xB2	; 178
   104e2:	d8 4f       	sbci	r29, 0xF8	; 248
   104e4:	88 81       	ld	r24, Y
   104e6:	08 2e       	mov	r0, r24
   104e8:	00 0c       	add	r0, r0
   104ea:	99 0b       	sbc	r25, r25
   104ec:	02 c0       	rjmp	.+4      	; 0x104f2 <close+0x46>
    {
        errno = fatfs_to_errno(res);
   104ee:	83 e2       	ldi	r24, 0x23	; 35
   104f0:	90 e0       	ldi	r25, 0x00	; 0
   104f2:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
        return(-1);
   104f6:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
   104fa:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return(0);
   104fc:	9f ef       	ldi	r25, 0xFF	; 255
   104fe:	02 c0       	rjmp	.+4      	; 0x10504 <close+0x58>
}
   10500:	80 e0       	ldi	r24, 0x00	; 0
   10502:	90 e0       	ldi	r25, 0x00	; 0
   10504:	df 91       	pop	r29
   10506:	cf 91       	pop	r28
   10508:	1f 91       	pop	r17
   1050a:	0f 91       	pop	r16
   1050c:	08 95       	ret

0001050e <fclose>:
   1050e:	c8 d8       	rcall	.-3696   	; 0xf6a0 <fileno>
   10510:	97 fd       	sbrc	r25, 7
   10512:	02 c0       	rjmp	.+4      	; 0x10518 <fclose+0xa>
   10514:	cb cf       	rjmp	.-106    	; 0x104ac <close>
   10516:	08 95       	ret
   10518:	8f ef       	ldi	r24, 0xFF	; 255
   1051a:	9f ef       	ldi	r25, 0xFF	; 255
   1051c:	08 95       	ret

0001051e <new_file_descriptor>:
   1051e:	0f 93       	push	r16
   10520:	1f 93       	push	r17
   10522:	cf 93       	push	r28
   10524:	df 93       	push	r29
   10526:	ea e1       	ldi	r30, 0x1A	; 26
   10528:	fd e1       	ldi	r31, 0x1D	; 29
   1052a:	c0 e0       	ldi	r28, 0x00	; 0
   1052c:	d0 e0       	ldi	r29, 0x00	; 0
   1052e:	21 96       	adiw	r28, 0x01	; 1
   10530:	c0 31       	cpi	r28, 0x10	; 16
   10532:	d1 05       	cpc	r29, r1
   10534:	49 f0       	breq	.+18     	; 0x10548 <new_file_descriptor+0x2a>
   10536:	c3 30       	cpi	r28, 0x03	; 3
   10538:	d1 05       	cpc	r29, r1
   1053a:	24 f0       	brlt	.+8      	; 0x10544 <new_file_descriptor+0x26>
   1053c:	82 81       	ldd	r24, Z+2	; 0x02
   1053e:	93 81       	ldd	r25, Z+3	; 0x03
   10540:	89 2b       	or	r24, r25
   10542:	59 f0       	breq	.+22     	; 0x1055a <new_file_descriptor+0x3c>
   10544:	32 96       	adiw	r30, 0x02	; 2
   10546:	f3 cf       	rjmp	.-26     	; 0x1052e <new_file_descriptor+0x10>
   10548:	87 e1       	ldi	r24, 0x17	; 23
   1054a:	90 e0       	ldi	r25, 0x00	; 0
   1054c:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
   10550:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
   10554:	8f ef       	ldi	r24, 0xFF	; 255
   10556:	9f ef       	ldi	r25, 0xFF	; 255
   10558:	22 c0       	rjmp	.+68     	; 0x1059e <new_file_descriptor+0x80>
   1055a:	61 e0       	ldi	r22, 0x01	; 1
   1055c:	70 e0       	ldi	r23, 0x00	; 0
   1055e:	8e e0       	ldi	r24, 0x0E	; 14
   10560:	90 e0       	ldi	r25, 0x00	; 0
   10562:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <safecalloc>
   10566:	8c 01       	movw	r16, r24
   10568:	89 2b       	or	r24, r25
   1056a:	59 f0       	breq	.+22     	; 0x10582 <new_file_descriptor+0x64>
   1056c:	61 e0       	ldi	r22, 0x01	; 1
   1056e:	70 e0       	ldi	r23, 0x00	; 0
   10570:	84 e2       	ldi	r24, 0x24	; 36
   10572:	92 e0       	ldi	r25, 0x02	; 2
   10574:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <safecalloc>
   10578:	00 97       	sbiw	r24, 0x00	; 0
   1057a:	31 f4       	brne	.+12     	; 0x10588 <new_file_descriptor+0x6a>
   1057c:	c8 01       	movw	r24, r16
   1057e:	0e 94 3b 2a 	call	0x5476	; 0x5476 <safefree>
   10582:	8c e0       	ldi	r24, 0x0C	; 12
   10584:	90 e0       	ldi	r25, 0x00	; 0
   10586:	e2 cf       	rjmp	.-60     	; 0x1054c <new_file_descriptor+0x2e>
   10588:	fe 01       	movw	r30, r28
   1058a:	ee 0f       	add	r30, r30
   1058c:	ff 1f       	adc	r31, r31
   1058e:	e6 5e       	subi	r30, 0xE6	; 230
   10590:	f2 4e       	sbci	r31, 0xE2	; 226
   10592:	11 83       	std	Z+1, r17	; 0x01
   10594:	00 83       	st	Z, r16
   10596:	f8 01       	movw	r30, r16
   10598:	95 87       	std	Z+13, r25	; 0x0d
   1059a:	84 87       	std	Z+12, r24	; 0x0c
   1059c:	ce 01       	movw	r24, r28
   1059e:	df 91       	pop	r29
   105a0:	cf 91       	pop	r28
   105a2:	1f 91       	pop	r17
   105a4:	0f 91       	pop	r16
   105a6:	08 95       	ret

000105a8 <open>:
   105a8:	a0 e0       	ldi	r26, 0x00	; 0
   105aa:	b0 e0       	ldi	r27, 0x00	; 0
   105ac:	ea ed       	ldi	r30, 0xDA	; 218
   105ae:	f2 e8       	ldi	r31, 0x82	; 130
   105b0:	0c 94 38 ec 	jmp	0x1d870	; 0x1d870 <__prologue_saves__+0x8>
   105b4:	5c 01       	movw	r10, r24
   105b6:	6b 01       	movw	r12, r22
   105b8:	10 92 19 1d 	sts	0x1D19, r1	; 0x801d19 <errno+0x1>
   105bc:	10 92 18 1d 	sts	0x1D18, r1	; 0x801d18 <errno>
   105c0:	7b 01       	movw	r14, r22
   105c2:	83 e0       	ldi	r24, 0x03	; 3
   105c4:	e8 22       	and	r14, r24
   105c6:	ff 24       	eor	r15, r15
   105c8:	e2 e0       	ldi	r30, 0x02	; 2
   105ca:	ee 16       	cp	r14, r30
   105cc:	f1 04       	cpc	r15, r1
   105ce:	31 f0       	breq	.+12     	; 0x105dc <open+0x34>
   105d0:	e1 14       	cp	r14, r1
   105d2:	f1 04       	cpc	r15, r1
   105d4:	31 f0       	breq	.+12     	; 0x105e2 <open+0x3a>
   105d6:	02 e0       	ldi	r16, 0x02	; 2
   105d8:	10 e0       	ldi	r17, 0x00	; 0
   105da:	05 c0       	rjmp	.+10     	; 0x105e6 <open+0x3e>
   105dc:	03 e0       	ldi	r16, 0x03	; 3
   105de:	10 e0       	ldi	r17, 0x00	; 0
   105e0:	02 c0       	rjmp	.+4      	; 0x105e6 <open+0x3e>
   105e2:	01 e0       	ldi	r16, 0x01	; 1
   105e4:	10 e0       	ldi	r17, 0x00	; 0
   105e6:	c6 fe       	sbrs	r12, 6
   105e8:	05 c0       	rjmp	.+10     	; 0x105f4 <open+0x4c>
   105ea:	d1 fe       	sbrs	r13, 1
   105ec:	02 c0       	rjmp	.+4      	; 0x105f2 <open+0x4a>
   105ee:	08 60       	ori	r16, 0x08	; 8
   105f0:	01 c0       	rjmp	.+2      	; 0x105f4 <open+0x4c>
   105f2:	00 61       	ori	r16, 0x10	; 16
   105f4:	94 df       	rcall	.-216    	; 0x1051e <new_file_descriptor>
   105f6:	3c 01       	movw	r6, r24
   105f8:	6f d8       	rcall	.-3874   	; 0xf6d8 <fileno_to_stream>
   105fa:	ec 01       	movw	r28, r24
   105fc:	c3 01       	movw	r24, r6
   105fe:	20 97       	sbiw	r28, 0x00	; 0
   10600:	09 f4       	brne	.+2      	; 0x10604 <open+0x5c>
   10602:	48 c0       	rjmp	.+144    	; 0x10694 <open+0xec>
   10604:	05 dd       	rcall	.-1526   	; 0x10010 <fileno_to_fatfs>
   10606:	4c 01       	movw	r8, r24
   10608:	00 97       	sbiw	r24, 0x00	; 0
   1060a:	59 f4       	brne	.+22     	; 0x10622 <open+0x7a>
   1060c:	c3 01       	movw	r24, r6
   1060e:	19 df       	rcall	.-462    	; 0x10442 <free_file_descriptor>
   10610:	89 e0       	ldi	r24, 0x09	; 9
   10612:	90 e0       	ldi	r25, 0x00	; 0
   10614:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
   10618:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
   1061c:	8f ef       	ldi	r24, 0xFF	; 255
   1061e:	9f ef       	ldi	r25, 0xFF	; 255
   10620:	5d c0       	rjmp	.+186    	; 0x106dc <open+0x134>
   10622:	40 2f       	mov	r20, r16
   10624:	b5 01       	movw	r22, r10
   10626:	0e 94 b5 58 	call	0xb16a	; 0xb16a <f_open>
   1062a:	00 97       	sbiw	r24, 0x00	; 0
   1062c:	91 f0       	breq	.+36     	; 0x10652 <open+0xaa>
   1062e:	84 31       	cpi	r24, 0x14	; 20
   10630:	91 05       	cpc	r25, r1
   10632:	40 f4       	brcc	.+16     	; 0x10644 <open+0x9c>
   10634:	fc 01       	movw	r30, r24
   10636:	e2 5b       	subi	r30, 0xB2	; 178
   10638:	f8 4f       	sbci	r31, 0xF8	; 248
   1063a:	80 81       	ld	r24, Z
   1063c:	08 2e       	mov	r0, r24
   1063e:	00 0c       	add	r0, r0
   10640:	99 0b       	sbc	r25, r25
   10642:	02 c0       	rjmp	.+4      	; 0x10648 <open+0xa0>
   10644:	83 e2       	ldi	r24, 0x23	; 35
   10646:	90 e0       	ldi	r25, 0x00	; 0
   10648:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
   1064c:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
   10650:	20 c0       	rjmp	.+64     	; 0x10692 <open+0xea>
   10652:	d2 fe       	sbrs	r13, 2
   10654:	21 c0       	rjmp	.+66     	; 0x10698 <open+0xf0>
   10656:	f4 01       	movw	r30, r8
   10658:	42 85       	ldd	r20, Z+10	; 0x0a
   1065a:	53 85       	ldd	r21, Z+11	; 0x0b
   1065c:	64 85       	ldd	r22, Z+12	; 0x0c
   1065e:	75 85       	ldd	r23, Z+13	; 0x0d
   10660:	c4 01       	movw	r24, r8
   10662:	0e 94 bb 5f 	call	0xbf76	; 0xbf76 <f_lseek>
   10666:	00 97       	sbiw	r24, 0x00	; 0
   10668:	b9 f0       	breq	.+46     	; 0x10698 <open+0xf0>
   1066a:	84 31       	cpi	r24, 0x14	; 20
   1066c:	91 05       	cpc	r25, r1
   1066e:	40 f4       	brcc	.+16     	; 0x10680 <open+0xd8>
   10670:	fc 01       	movw	r30, r24
   10672:	e2 5b       	subi	r30, 0xB2	; 178
   10674:	f8 4f       	sbci	r31, 0xF8	; 248
   10676:	80 81       	ld	r24, Z
   10678:	08 2e       	mov	r0, r24
   1067a:	00 0c       	add	r0, r0
   1067c:	99 0b       	sbc	r25, r25
   1067e:	02 c0       	rjmp	.+4      	; 0x10684 <open+0xdc>
   10680:	83 e2       	ldi	r24, 0x23	; 35
   10682:	90 e0       	ldi	r25, 0x00	; 0
   10684:	90 93 19 1d 	sts	0x1D19, r25	; 0x801d19 <errno+0x1>
   10688:	80 93 18 1d 	sts	0x1D18, r24	; 0x801d18 <errno>
   1068c:	c4 01       	movw	r24, r8
   1068e:	0e 94 13 5e 	call	0xbc26	; 0xbc26 <f_close>
   10692:	c3 01       	movw	r24, r6
   10694:	d6 de       	rcall	.-596    	; 0x10442 <free_file_descriptor>
   10696:	c2 cf       	rjmp	.-124    	; 0x1061c <open+0x74>
   10698:	f2 e0       	ldi	r31, 0x02	; 2
   1069a:	ef 16       	cp	r14, r31
   1069c:	f1 04       	cpc	r15, r1
   1069e:	51 f4       	brne	.+20     	; 0x106b4 <open+0x10c>
   106a0:	8b ee       	ldi	r24, 0xEB	; 235
   106a2:	99 e7       	ldi	r25, 0x79	; 121
   106a4:	99 87       	std	Y+9, r25	; 0x09
   106a6:	88 87       	std	Y+8, r24	; 0x08
   106a8:	88 e6       	ldi	r24, 0x68	; 104
   106aa:	99 e7       	ldi	r25, 0x79	; 121
   106ac:	9b 87       	std	Y+11, r25	; 0x0b
   106ae:	8a 87       	std	Y+10, r24	; 0x0a
   106b0:	83 e0       	ldi	r24, 0x03	; 3
   106b2:	12 c0       	rjmp	.+36     	; 0x106d8 <open+0x130>
   106b4:	e1 14       	cp	r14, r1
   106b6:	f1 04       	cpc	r15, r1
   106b8:	41 f4       	brne	.+16     	; 0x106ca <open+0x122>
   106ba:	19 86       	std	Y+9, r1	; 0x09
   106bc:	18 86       	std	Y+8, r1	; 0x08
   106be:	88 e6       	ldi	r24, 0x68	; 104
   106c0:	99 e7       	ldi	r25, 0x79	; 121
   106c2:	9b 87       	std	Y+11, r25	; 0x0b
   106c4:	8a 87       	std	Y+10, r24	; 0x0a
   106c6:	81 e0       	ldi	r24, 0x01	; 1
   106c8:	07 c0       	rjmp	.+14     	; 0x106d8 <open+0x130>
   106ca:	8b ee       	ldi	r24, 0xEB	; 235
   106cc:	99 e7       	ldi	r25, 0x79	; 121
   106ce:	99 87       	std	Y+9, r25	; 0x09
   106d0:	88 87       	std	Y+8, r24	; 0x08
   106d2:	1b 86       	std	Y+11, r1	; 0x0b
   106d4:	1a 86       	std	Y+10, r1	; 0x0a
   106d6:	82 e0       	ldi	r24, 0x02	; 2
   106d8:	8b 83       	std	Y+3, r24	; 0x03
   106da:	c3 01       	movw	r24, r6
   106dc:	cd b7       	in	r28, 0x3d	; 61
   106de:	de b7       	in	r29, 0x3e	; 62
   106e0:	ee e0       	ldi	r30, 0x0E	; 14
   106e2:	0c 94 54 ec 	jmp	0x1d8a8	; 0x1d8a8 <__epilogue_restores__+0x8>

000106e6 <posix_fopen_modes_to_open>:
   106e6:	cf 93       	push	r28
   106e8:	df 93       	push	r29
   106ea:	ec 01       	movw	r28, r24
   106ec:	65 e7       	ldi	r22, 0x75	; 117
   106ee:	77 e0       	ldi	r23, 0x07	; 7
   106f0:	0e 94 8c 32 	call	0x6518	; 0x6518 <strcmp>
   106f4:	00 97       	sbiw	r24, 0x00	; 0
   106f6:	09 f4       	brne	.+2      	; 0x106fa <posix_fopen_modes_to_open+0x14>
   106f8:	5d c0       	rjmp	.+186    	; 0x107b4 <posix_fopen_modes_to_open+0xce>
   106fa:	6a eb       	ldi	r22, 0xBA	; 186
   106fc:	78 e0       	ldi	r23, 0x08	; 8
   106fe:	ce 01       	movw	r24, r28
   10700:	0e 94 8c 32 	call	0x6518	; 0x6518 <strcmp>
   10704:	00 97       	sbiw	r24, 0x00	; 0
   10706:	09 f4       	brne	.+2      	; 0x1070a <posix_fopen_modes_to_open+0x24>
   10708:	55 c0       	rjmp	.+170    	; 0x107b4 <posix_fopen_modes_to_open+0xce>
   1070a:	6d eb       	ldi	r22, 0xBD	; 189
   1070c:	78 e0       	ldi	r23, 0x08	; 8
   1070e:	ce 01       	movw	r24, r28
   10710:	0e 94 8c 32 	call	0x6518	; 0x6518 <strcmp>
   10714:	89 2b       	or	r24, r25
   10716:	09 f4       	brne	.+2      	; 0x1071a <posix_fopen_modes_to_open+0x34>
   10718:	42 c0       	rjmp	.+132    	; 0x1079e <posix_fopen_modes_to_open+0xb8>
   1071a:	60 ec       	ldi	r22, 0xC0	; 192
   1071c:	78 e0       	ldi	r23, 0x08	; 8
   1071e:	ce 01       	movw	r24, r28
   10720:	0e 94 8c 32 	call	0x6518	; 0x6518 <strcmp>
   10724:	89 2b       	or	r24, r25
   10726:	d9 f1       	breq	.+118    	; 0x1079e <posix_fopen_modes_to_open+0xb8>
   10728:	64 ec       	ldi	r22, 0xC4	; 196
   1072a:	78 e0       	ldi	r23, 0x08	; 8
   1072c:	ce 01       	movw	r24, r28
   1072e:	0e 94 8c 32 	call	0x6518	; 0x6518 <strcmp>
   10732:	89 2b       	or	r24, r25
   10734:	a1 f1       	breq	.+104    	; 0x1079e <posix_fopen_modes_to_open+0xb8>
   10736:	69 e7       	ldi	r22, 0x79	; 121
   10738:	7a e0       	ldi	r23, 0x0A	; 10
   1073a:	ce 01       	movw	r24, r28
   1073c:	0e 94 8c 32 	call	0x6518	; 0x6518 <strcmp>
   10740:	89 2b       	or	r24, r25
   10742:	81 f1       	breq	.+96     	; 0x107a4 <posix_fopen_modes_to_open+0xbe>
   10744:	68 ec       	ldi	r22, 0xC8	; 200
   10746:	78 e0       	ldi	r23, 0x08	; 8
   10748:	ce 01       	movw	r24, r28
   1074a:	0e 94 8c 32 	call	0x6518	; 0x6518 <strcmp>
   1074e:	89 2b       	or	r24, r25
   10750:	49 f1       	breq	.+82     	; 0x107a4 <posix_fopen_modes_to_open+0xbe>
   10752:	6b ec       	ldi	r22, 0xCB	; 203
   10754:	78 e0       	ldi	r23, 0x08	; 8
   10756:	ce 01       	movw	r24, r28
   10758:	0e 94 8c 32 	call	0x6518	; 0x6518 <strcmp>
   1075c:	89 2b       	or	r24, r25
   1075e:	29 f1       	breq	.+74     	; 0x107aa <posix_fopen_modes_to_open+0xc4>
   10760:	6e ec       	ldi	r22, 0xCE	; 206
   10762:	78 e0       	ldi	r23, 0x08	; 8
   10764:	ce 01       	movw	r24, r28
   10766:	0e 94 8c 32 	call	0x6518	; 0x6518 <strcmp>
   1076a:	89 2b       	or	r24, r25
   1076c:	f1 f0       	breq	.+60     	; 0x107aa <posix_fopen_modes_to_open+0xc4>
   1076e:	62 ed       	ldi	r22, 0xD2	; 210
   10770:	78 e0       	ldi	r23, 0x08	; 8
   10772:	ce 01       	movw	r24, r28
   10774:	0e 94 8c 32 	call	0x6518	; 0x6518 <strcmp>
   10778:	89 2b       	or	r24, r25
   1077a:	b9 f0       	breq	.+46     	; 0x107aa <posix_fopen_modes_to_open+0xc4>
   1077c:	66 ed       	ldi	r22, 0xD6	; 214
   1077e:	70 e1       	ldi	r23, 0x10	; 16
   10780:	ce 01       	movw	r24, r28
   10782:	0e 94 8c 32 	call	0x6518	; 0x6518 <strcmp>
   10786:	89 2b       	or	r24, r25
   10788:	99 f0       	breq	.+38     	; 0x107b0 <posix_fopen_modes_to_open+0xca>
   1078a:	66 ed       	ldi	r22, 0xD6	; 214
   1078c:	78 e0       	ldi	r23, 0x08	; 8
   1078e:	ce 01       	movw	r24, r28
   10790:	0e 94 8c 32 	call	0x6518	; 0x6518 <strcmp>
   10794:	89 2b       	or	r24, r25
   10796:	61 f0       	breq	.+24     	; 0x107b0 <posix_fopen_modes_to_open+0xca>
   10798:	8f ef       	ldi	r24, 0xFF	; 255
   1079a:	9f ef       	ldi	r25, 0xFF	; 255
   1079c:	0b c0       	rjmp	.+22     	; 0x107b4 <posix_fopen_modes_to_open+0xce>
   1079e:	82 e0       	ldi	r24, 0x02	; 2
   107a0:	92 e0       	ldi	r25, 0x02	; 2
   107a2:	08 c0       	rjmp	.+16     	; 0x107b4 <posix_fopen_modes_to_open+0xce>
   107a4:	81 e4       	ldi	r24, 0x41	; 65
   107a6:	92 e0       	ldi	r25, 0x02	; 2
   107a8:	05 c0       	rjmp	.+10     	; 0x107b4 <posix_fopen_modes_to_open+0xce>
   107aa:	82 e4       	ldi	r24, 0x42	; 66
   107ac:	92 e0       	ldi	r25, 0x02	; 2
   107ae:	02 c0       	rjmp	.+4      	; 0x107b4 <posix_fopen_modes_to_open+0xce>
   107b0:	81 e4       	ldi	r24, 0x41	; 65
   107b2:	94 e0       	ldi	r25, 0x04	; 4
   107b4:	df 91       	pop	r29
   107b6:	cf 91       	pop	r28
   107b8:	08 95       	ret

000107ba <fopen>:
   107ba:	cf 93       	push	r28
   107bc:	df 93       	push	r29
   107be:	ec 01       	movw	r28, r24
   107c0:	cb 01       	movw	r24, r22
   107c2:	91 df       	rcall	.-222    	; 0x106e6 <posix_fopen_modes_to_open>
   107c4:	bc 01       	movw	r22, r24
   107c6:	ce 01       	movw	r24, r28
   107c8:	ef de       	rcall	.-546    	; 0x105a8 <open>
   107ca:	0e 94 6c 7b 	call	0xf6d8	; 0xf6d8 <fileno_to_stream>
   107ce:	df 91       	pop	r29
   107d0:	cf 91       	pop	r28
   107d2:	08 95       	ret

000107d4 <fprintf>:
   107d4:	a8 e0       	ldi	r26, 0x08	; 8
   107d6:	b0 e0       	ldi	r27, 0x00	; 0
   107d8:	e0 ef       	ldi	r30, 0xF0	; 240
   107da:	f3 e8       	ldi	r31, 0x83	; 131
   107dc:	0c 94 44 ec 	jmp	0x1d888	; 0x1d888 <__prologue_saves__+0x20>
   107e0:	84 ed       	ldi	r24, 0xD4	; 212
   107e2:	9a e7       	ldi	r25, 0x7A	; 122
   107e4:	9a 83       	std	Y+2, r25	; 0x02
   107e6:	89 83       	std	Y+1, r24	; 0x01
   107e8:	18 86       	std	Y+8, r1	; 0x08
   107ea:	1f 82       	std	Y+7, r1	; 0x07
   107ec:	8d 85       	ldd	r24, Y+13	; 0x0d
   107ee:	9e 85       	ldd	r25, Y+14	; 0x0e
   107f0:	9c 83       	std	Y+4, r25	; 0x04
   107f2:	8b 83       	std	Y+3, r24	; 0x03
   107f4:	4f 85       	ldd	r20, Y+15	; 0x0f
   107f6:	58 89       	ldd	r21, Y+16	; 0x10
   107f8:	60 e8       	ldi	r22, 0x80	; 128
   107fa:	9e 01       	movw	r18, r28
   107fc:	2f 5e       	subi	r18, 0xEF	; 239
   107fe:	3f 4f       	sbci	r19, 0xFF	; 255
   10800:	ce 01       	movw	r24, r28
   10802:	01 96       	adiw	r24, 0x01	; 1
   10804:	0e 94 65 42 	call	0x84ca	; 0x84ca <_printf_fn>
   10808:	8f 81       	ldd	r24, Y+7	; 0x07
   1080a:	98 85       	ldd	r25, Y+8	; 0x08
   1080c:	28 96       	adiw	r28, 0x08	; 8
   1080e:	e2 e0       	ldi	r30, 0x02	; 2
   10810:	0c 94 60 ec 	jmp	0x1d8c0	; 0x1d8c0 <__epilogue_restores__+0x20>

00010814 <posix_help>:
   10814:	cf 93       	push	r28
   10816:	df 93       	push	r29
   10818:	ec 01       	movw	r28, r24
   1081a:	8f e8       	ldi	r24, 0x8F	; 143
   1081c:	9f e0       	ldi	r25, 0x0F	; 15
   1081e:	1f 92       	push	r1
   10820:	9f 93       	push	r25
   10822:	8f 93       	push	r24
   10824:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   10828:	0f 90       	pop	r0
   1082a:	0f 90       	pop	r0
   1082c:	0f 90       	pop	r0
   1082e:	cd 2b       	or	r28, r29
   10830:	51 f0       	breq	.+20     	; 0x10846 <posix_help+0x32>
   10832:	88 e5       	ldi	r24, 0x58	; 88
   10834:	9e e0       	ldi	r25, 0x0E	; 14
   10836:	1f 92       	push	r1
   10838:	9f 93       	push	r25
   1083a:	8f 93       	push	r24
   1083c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   10840:	0f 90       	pop	r0
   10842:	0f 90       	pop	r0
   10844:	0f 90       	pop	r0
   10846:	df 91       	pop	r29
   10848:	cf 91       	pop	r28
   1084a:	08 95       	ret

0001084c <copy>:
   1084c:	4f 92       	push	r4
   1084e:	5f 92       	push	r5
   10850:	6f 92       	push	r6
   10852:	8f 92       	push	r8
   10854:	9f 92       	push	r9
   10856:	af 92       	push	r10
   10858:	bf 92       	push	r11
   1085a:	cf 92       	push	r12
   1085c:	df 92       	push	r13
   1085e:	ef 92       	push	r14
   10860:	ff 92       	push	r15
   10862:	0f 93       	push	r16
   10864:	1f 93       	push	r17
   10866:	cf 93       	push	r28
   10868:	df 93       	push	r29
   1086a:	18 2f       	mov	r17, r24
   1086c:	09 2f       	mov	r16, r25
   1086e:	eb 01       	movw	r28, r22
   10870:	9f 93       	push	r25
   10872:	8f 93       	push	r24
   10874:	8b e2       	ldi	r24, 0x2B	; 43
   10876:	9e e0       	ldi	r25, 0x0E	; 14
   10878:	1f 92       	push	r1
   1087a:	9f 93       	push	r25
   1087c:	8f 93       	push	r24
   1087e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   10882:	6a eb       	ldi	r22, 0xBA	; 186
   10884:	78 e0       	ldi	r23, 0x08	; 8
   10886:	81 2f       	mov	r24, r17
   10888:	90 2f       	mov	r25, r16
   1088a:	97 df       	rcall	.-210    	; 0x107ba <fopen>
   1088c:	7c 01       	movw	r14, r24
   1088e:	0f 90       	pop	r0
   10890:	0f 90       	pop	r0
   10892:	0f 90       	pop	r0
   10894:	0f 90       	pop	r0
   10896:	0f 90       	pop	r0
   10898:	89 2b       	or	r24, r25
   1089a:	51 f4       	brne	.+20     	; 0x108b0 <copy+0x64>
   1089c:	0f 93       	push	r16
   1089e:	1f 93       	push	r17
   108a0:	8b e1       	ldi	r24, 0x1B	; 27
   108a2:	9e e0       	ldi	r25, 0x0E	; 14
   108a4:	1f 92       	push	r1
   108a6:	9f 93       	push	r25
   108a8:	8f 93       	push	r24
   108aa:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   108ae:	21 c0       	rjmp	.+66     	; 0x108f2 <copy+0xa6>
   108b0:	df 93       	push	r29
   108b2:	cf 93       	push	r28
   108b4:	8e e0       	ldi	r24, 0x0E	; 14
   108b6:	9e e0       	ldi	r25, 0x0E	; 14
   108b8:	1f 92       	push	r1
   108ba:	9f 93       	push	r25
   108bc:	8f 93       	push	r24
   108be:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   108c2:	68 ec       	ldi	r22, 0xC8	; 200
   108c4:	78 e0       	ldi	r23, 0x08	; 8
   108c6:	ce 01       	movw	r24, r28
   108c8:	78 df       	rcall	.-272    	; 0x107ba <fopen>
   108ca:	8c 01       	movw	r16, r24
   108cc:	0f 90       	pop	r0
   108ce:	0f 90       	pop	r0
   108d0:	0f 90       	pop	r0
   108d2:	0f 90       	pop	r0
   108d4:	0f 90       	pop	r0
   108d6:	89 2b       	or	r24, r25
   108d8:	b1 f4       	brne	.+44     	; 0x10906 <copy+0xba>
   108da:	df 93       	push	r29
   108dc:	cf 93       	push	r28
   108de:	8e ef       	ldi	r24, 0xFE	; 254
   108e0:	9d e0       	ldi	r25, 0x0D	; 13
   108e2:	1f 92       	push	r1
   108e4:	9f 93       	push	r25
   108e6:	8f 93       	push	r24
   108e8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   108ec:	80 e0       	ldi	r24, 0x00	; 0
   108ee:	90 e0       	ldi	r25, 0x00	; 0
   108f0:	0e de       	rcall	.-996    	; 0x1050e <fclose>
   108f2:	0f 90       	pop	r0
   108f4:	0f 90       	pop	r0
   108f6:	0f 90       	pop	r0
   108f8:	0f 90       	pop	r0
   108fa:	0f 90       	pop	r0
   108fc:	60 e0       	ldi	r22, 0x00	; 0
   108fe:	70 e0       	ldi	r23, 0x00	; 0
   10900:	80 e0       	ldi	r24, 0x00	; 0
   10902:	90 e0       	ldi	r25, 0x00	; 0
   10904:	73 c0       	rjmp	.+230    	; 0x109ec <copy+0x1a0>
   10906:	61 e0       	ldi	r22, 0x01	; 1
   10908:	70 e0       	ldi	r23, 0x00	; 0
   1090a:	80 e0       	ldi	r24, 0x00	; 0
   1090c:	92 e0       	ldi	r25, 0x02	; 2
   1090e:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <safecalloc>
   10912:	6c 01       	movw	r12, r24
   10914:	89 2b       	or	r24, r25
   10916:	29 f4       	brne	.+10     	; 0x10922 <copy+0xd6>
   10918:	c7 01       	movw	r24, r14
   1091a:	f9 dd       	rcall	.-1038   	; 0x1050e <fclose>
   1091c:	c8 01       	movw	r24, r16
   1091e:	f7 dd       	rcall	.-1042   	; 0x1050e <fclose>
   10920:	ed cf       	rjmp	.-38     	; 0x108fc <copy+0xb0>
   10922:	81 ef       	ldi	r24, 0xF1	; 241
   10924:	9d e0       	ldi	r25, 0x0D	; 13
   10926:	1f 92       	push	r1
   10928:	9f 93       	push	r25
   1092a:	8f 93       	push	r24
   1092c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   10930:	0f 90       	pop	r0
   10932:	0f 90       	pop	r0
   10934:	0f 90       	pop	r0
   10936:	81 2c       	mov	r8, r1
   10938:	91 2c       	mov	r9, r1
   1093a:	54 01       	movw	r10, r8
   1093c:	85 ed       	ldi	r24, 0xD5	; 213
   1093e:	9d e0       	ldi	r25, 0x0D	; 13
   10940:	2c 01       	movw	r4, r24
   10942:	97 01       	movw	r18, r14
   10944:	40 e0       	ldi	r20, 0x00	; 0
   10946:	52 e0       	ldi	r21, 0x02	; 2
   10948:	61 e0       	ldi	r22, 0x01	; 1
   1094a:	70 e0       	ldi	r23, 0x00	; 0
   1094c:	c6 01       	movw	r24, r12
   1094e:	8b dc       	rcall	.-1770   	; 0x10266 <fread>
   10950:	ec 01       	movw	r28, r24
   10952:	18 16       	cp	r1, r24
   10954:	19 06       	cpc	r1, r25
   10956:	74 f5       	brge	.+92     	; 0x109b4 <copy+0x168>
   10958:	98 01       	movw	r18, r16
   1095a:	ae 01       	movw	r20, r28
   1095c:	61 e0       	ldi	r22, 0x01	; 1
   1095e:	70 e0       	ldi	r23, 0x00	; 0
   10960:	c6 01       	movw	r24, r12
   10962:	53 dd       	rcall	.-1370   	; 0x1040a <fwrite>
   10964:	8c 17       	cp	r24, r28
   10966:	9d 07       	cpc	r25, r29
   10968:	5c f4       	brge	.+22     	; 0x10980 <copy+0x134>
   1096a:	84 ee       	ldi	r24, 0xE4	; 228
   1096c:	9d e0       	ldi	r25, 0x0D	; 13
   1096e:	1f 92       	push	r1
   10970:	9f 93       	push	r25
   10972:	8f 93       	push	r24
   10974:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   10978:	0f 90       	pop	r0
   1097a:	0f 90       	pop	r0
   1097c:	0f 90       	pop	r0
   1097e:	1a c0       	rjmp	.+52     	; 0x109b4 <copy+0x168>
   10980:	ce 01       	movw	r24, r28
   10982:	dd 0f       	add	r29, r29
   10984:	aa 0b       	sbc	r26, r26
   10986:	bb 0b       	sbc	r27, r27
   10988:	88 0e       	add	r8, r24
   1098a:	99 1e       	adc	r9, r25
   1098c:	aa 1e       	adc	r10, r26
   1098e:	bb 1e       	adc	r11, r27
   10990:	bf 92       	push	r11
   10992:	af 92       	push	r10
   10994:	9f 92       	push	r9
   10996:	8f 92       	push	r8
   10998:	1f 92       	push	r1
   1099a:	5f 92       	push	r5
   1099c:	4f 92       	push	r4
   1099e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   109a2:	8d b7       	in	r24, 0x3d	; 61
   109a4:	9e b7       	in	r25, 0x3e	; 62
   109a6:	07 96       	adiw	r24, 0x07	; 7
   109a8:	0f b6       	in	r0, 0x3f	; 63
   109aa:	f8 94       	cli
   109ac:	9e bf       	out	0x3e, r25	; 62
   109ae:	0f be       	out	0x3f, r0	; 63
   109b0:	8d bf       	out	0x3d, r24	; 61
   109b2:	c7 cf       	rjmp	.-114    	; 0x10942 <copy+0xf6>
   109b4:	bf 92       	push	r11
   109b6:	af 92       	push	r10
   109b8:	9f 92       	push	r9
   109ba:	8f 92       	push	r8
   109bc:	82 ec       	ldi	r24, 0xC2	; 194
   109be:	9d e0       	ldi	r25, 0x0D	; 13
   109c0:	1f 92       	push	r1
   109c2:	9f 93       	push	r25
   109c4:	8f 93       	push	r24
   109c6:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   109ca:	c6 01       	movw	r24, r12
   109cc:	0e 94 3b 2a 	call	0x5476	; 0x5476 <safefree>
   109d0:	c7 01       	movw	r24, r14
   109d2:	9d dd       	rcall	.-1222   	; 0x1050e <fclose>
   109d4:	c8 01       	movw	r24, r16
   109d6:	9b dd       	rcall	.-1226   	; 0x1050e <fclose>
   109d8:	8d b7       	in	r24, 0x3d	; 61
   109da:	9e b7       	in	r25, 0x3e	; 62
   109dc:	07 96       	adiw	r24, 0x07	; 7
   109de:	0f b6       	in	r0, 0x3f	; 63
   109e0:	f8 94       	cli
   109e2:	9e bf       	out	0x3e, r25	; 62
   109e4:	0f be       	out	0x3f, r0	; 63
   109e6:	8d bf       	out	0x3d, r24	; 61
   109e8:	b4 01       	movw	r22, r8
   109ea:	c5 01       	movw	r24, r10
   109ec:	df 91       	pop	r29
   109ee:	cf 91       	pop	r28
   109f0:	1f 91       	pop	r17
   109f2:	0f 91       	pop	r16
   109f4:	ff 90       	pop	r15
   109f6:	ef 90       	pop	r14
   109f8:	df 90       	pop	r13
   109fa:	cf 90       	pop	r12
   109fc:	bf 90       	pop	r11
   109fe:	af 90       	pop	r10
   10a00:	9f 90       	pop	r9
   10a02:	8f 90       	pop	r8
   10a04:	6f 90       	pop	r6
   10a06:	5f 90       	pop	r5
   10a08:	4f 90       	pop	r4
   10a0a:	08 95       	ret

00010a0c <testpage>:
   10a0c:	cf 93       	push	r28
   10a0e:	df 93       	push	r29
   10a10:	20 91 87 01 	lds	r18, 0x0187	; 0x800187 <_pagesize>
   10a14:	30 91 88 01 	lds	r19, 0x0188	; 0x800188 <_pagesize+0x1>
   10a18:	82 17       	cp	r24, r18
   10a1a:	93 07       	cpc	r25, r19
   10a1c:	3c f1       	brlt	.+78     	; 0x10a6c <testpage+0x60>
   10a1e:	81 e9       	ldi	r24, 0x91	; 145
   10a20:	9d e0       	ldi	r25, 0x0D	; 13
   10a22:	1f 92       	push	r1
   10a24:	9f 93       	push	r25
   10a26:	8f 93       	push	r24
   10a28:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   10a2c:	0e 94 e1 7a 	call	0xf5c2	; 0xf5c2 <getchar>
   10a30:	ec 01       	movw	r28, r24
   10a32:	8f e8       	ldi	r24, 0x8F	; 143
   10a34:	9d e0       	ldi	r25, 0x0D	; 13
   10a36:	1f 92       	push	r1
   10a38:	9f 93       	push	r25
   10a3a:	8f 93       	push	r24
   10a3c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   10a40:	0f 90       	pop	r0
   10a42:	0f 90       	pop	r0
   10a44:	0f 90       	pop	r0
   10a46:	0f 90       	pop	r0
   10a48:	0f 90       	pop	r0
   10a4a:	0f 90       	pop	r0
   10a4c:	c1 37       	cpi	r28, 0x71	; 113
   10a4e:	d1 05       	cpc	r29, r1
   10a50:	41 f0       	breq	.+16     	; 0x10a62 <testpage+0x56>
   10a52:	2a 97       	sbiw	r28, 0x0a	; 10
   10a54:	49 f4       	brne	.+18     	; 0x10a68 <testpage+0x5c>
   10a56:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <_pagesize>
   10a5a:	90 91 88 01 	lds	r25, 0x0188	; 0x800188 <_pagesize+0x1>
   10a5e:	01 97       	sbiw	r24, 0x01	; 1
   10a60:	05 c0       	rjmp	.+10     	; 0x10a6c <testpage+0x60>
   10a62:	8f ef       	ldi	r24, 0xFF	; 255
   10a64:	9f ef       	ldi	r25, 0xFF	; 255
   10a66:	02 c0       	rjmp	.+4      	; 0x10a6c <testpage+0x60>
   10a68:	80 e0       	ldi	r24, 0x00	; 0
   10a6a:	90 e0       	ldi	r25, 0x00	; 0
   10a6c:	df 91       	pop	r29
   10a6e:	cf 91       	pop	r28
   10a70:	08 95       	ret

00010a72 <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  void.
MEMSPACE
long cat(char *name, int dopage)
{
   10a72:	a0 e0       	ldi	r26, 0x00	; 0
   10a74:	b1 e0       	ldi	r27, 0x01	; 1
   10a76:	ef e3       	ldi	r30, 0x3F	; 63
   10a78:	f5 e8       	ldi	r31, 0x85	; 133
   10a7a:	0c 94 3a ec 	jmp	0x1d874	; 0x1d874 <__prologue_saves__+0xc>
   10a7e:	18 2f       	mov	r17, r24
   10a80:	09 2f       	mov	r16, r25
   10a82:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
   10a84:	6a eb       	ldi	r22, 0xBA	; 186
   10a86:	78 e0       	ldi	r23, 0x08	; 8
   10a88:	98 de       	rcall	.-720    	; 0x107ba <fopen>
   10a8a:	7c 01       	movw	r14, r24
    if (!fp)
   10a8c:	89 2b       	or	r24, r25
   10a8e:	41 f0       	breq	.+16     	; 0x10aa0 <cat+0x2e>
   10a90:	c1 2c       	mov	r12, r1
   10a92:	d1 2c       	mov	r13, r1
   10a94:	a1 2c       	mov	r10, r1
   10a96:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   10a98:	8e 01       	movw	r16, r28
   10a9a:	0f 5f       	subi	r16, 0xFF	; 255
   10a9c:	1f 4f       	sbci	r17, 0xFF	; 255
   10a9e:	24 c0       	rjmp	.+72     	; 0x10ae8 <cat+0x76>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
   10aa0:	0f 93       	push	r16
   10aa2:	1f 93       	push	r17
   10aa4:	84 e4       	ldi	r24, 0x44	; 68
   10aa6:	9e e0       	ldi	r25, 0x0E	; 14
   10aa8:	1f 92       	push	r1
   10aaa:	9f 93       	push	r25
   10aac:	8f 93       	push	r24
   10aae:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        return(0);
   10ab2:	0f 90       	pop	r0
   10ab4:	0f 90       	pop	r0
   10ab6:	0f 90       	pop	r0
   10ab8:	0f 90       	pop	r0
   10aba:	0f 90       	pop	r0
   10abc:	c1 2c       	mov	r12, r1
   10abe:	d1 2c       	mov	r13, r1
   10ac0:	76 01       	movw	r14, r12
   10ac2:	3e c0       	rjmp	.+124    	; 0x10b40 <cat+0xce>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
   10ac4:	c8 01       	movw	r24, r16
   10ac6:	0e 94 74 32 	call	0x64e8	; 0x64e8 <trim_tail>
        size += strlen(line);
   10aca:	f8 01       	movw	r30, r16
   10acc:	01 90       	ld	r0, Z+
   10ace:	00 20       	and	r0, r0
   10ad0:	e9 f7       	brne	.-6      	; 0x10acc <cat+0x5a>
   10ad2:	31 97       	sbiw	r30, 0x01	; 1
   10ad4:	e0 1b       	sub	r30, r16
   10ad6:	f1 0b       	sbc	r31, r17
   10ad8:	ce 0e       	add	r12, r30
   10ada:	df 1e       	adc	r13, r31
        puts(line);
   10adc:	c8 01       	movw	r24, r16
   10ade:	0e 94 39 7b 	call	0xf672	; 0xf672 <puts>
        if(dopage)
   10ae2:	81 14       	cp	r8, r1
   10ae4:	91 04       	cpc	r9, r1
   10ae6:	49 f4       	brne	.+18     	; 0x10afa <cat+0x88>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   10ae8:	a7 01       	movw	r20, r14
   10aea:	6e ef       	ldi	r22, 0xFE	; 254
   10aec:	70 e0       	ldi	r23, 0x00	; 0
   10aee:	c8 01       	movw	r24, r16
   10af0:	0e 94 ed 7a 	call	0xf5da	; 0xf5da <fgets>
   10af4:	89 2b       	or	r24, r25
   10af6:	31 f7       	brne	.-52     	; 0x10ac4 <cat+0x52>
   10af8:	06 c0       	rjmp	.+12     	; 0x10b06 <cat+0x94>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
   10afa:	c5 01       	movw	r24, r10
   10afc:	01 96       	adiw	r24, 0x01	; 1
   10afe:	86 df       	rcall	.-244    	; 0x10a0c <testpage>
   10b00:	5c 01       	movw	r10, r24
            if(count < 0)
   10b02:	97 ff       	sbrs	r25, 7
   10b04:	f1 cf       	rjmp	.-30     	; 0x10ae8 <cat+0x76>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
   10b06:	82 e4       	ldi	r24, 0x42	; 66
   10b08:	9e e0       	ldi	r25, 0x0E	; 14
   10b0a:	1f 92       	push	r1
   10b0c:	9f 93       	push	r25
   10b0e:	8f 93       	push	r24
   10b10:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    fclose(fp);
   10b14:	c7 01       	movw	r24, r14
   10b16:	fb dc       	rcall	.-1546   	; 0x1050e <fclose>
    printf("%ld bytes\n", (long)size);
   10b18:	0d 2c       	mov	r0, r13
   10b1a:	00 0c       	add	r0, r0
   10b1c:	ee 08       	sbc	r14, r14
   10b1e:	ff 08       	sbc	r15, r15
   10b20:	ff 92       	push	r15
   10b22:	ef 92       	push	r14
   10b24:	df 92       	push	r13
   10b26:	cf 92       	push	r12
   10b28:	87 e3       	ldi	r24, 0x37	; 55
   10b2a:	9e e0       	ldi	r25, 0x0E	; 14
   10b2c:	1f 92       	push	r1
   10b2e:	9f 93       	push	r25
   10b30:	8f 93       	push	r24
   10b32:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    return(size);
   10b36:	0f b6       	in	r0, 0x3f	; 63
   10b38:	f8 94       	cli
   10b3a:	de bf       	out	0x3e, r29	; 62
   10b3c:	0f be       	out	0x3f, r0	; 63
   10b3e:	cd bf       	out	0x3d, r28	; 61
}
   10b40:	c7 01       	movw	r24, r14
   10b42:	b6 01       	movw	r22, r12
   10b44:	d3 95       	inc	r29
   10b46:	ec e0       	ldi	r30, 0x0C	; 12
   10b48:	0c 94 56 ec 	jmp	0x1d8ac	; 0x1d8ac <__epilogue_restores__+0xc>

00010b4c <hexdump>:
/// @brief hex listing of file with paging, "q" exits
/// @param[in] *name: file to hexdump
/// @retrun void
MEMSPACE
int hexdump(char *name, int dopage)
{
   10b4c:	2f 92       	push	r2
   10b4e:	3f 92       	push	r3
   10b50:	4f 92       	push	r4
   10b52:	5f 92       	push	r5
   10b54:	6f 92       	push	r6
   10b56:	7f 92       	push	r7
   10b58:	8f 92       	push	r8
   10b5a:	af 92       	push	r10
   10b5c:	bf 92       	push	r11
   10b5e:	cf 92       	push	r12
   10b60:	df 92       	push	r13
   10b62:	ef 92       	push	r14
   10b64:	ff 92       	push	r15
   10b66:	0f 93       	push	r16
   10b68:	1f 93       	push	r17
   10b6a:	cf 93       	push	r28
   10b6c:	df 93       	push	r29
   10b6e:	cd b7       	in	r28, 0x3d	; 61
   10b70:	de b7       	in	r29, 0x3e	; 62
   10b72:	e0 97       	sbiw	r28, 0x30	; 48
   10b74:	0f b6       	in	r0, 0x3f	; 63
   10b76:	f8 94       	cli
   10b78:	de bf       	out	0x3e, r29	; 62
   10b7a:	0f be       	out	0x3f, r0	; 63
   10b7c:	cd bf       	out	0x3d, r28	; 61
   10b7e:	18 2f       	mov	r17, r24
   10b80:	09 2f       	mov	r16, r25
   10b82:	78 ab       	std	Y+48, r23	; 0x30
   10b84:	6f a7       	std	Y+47, r22	; 0x2f
    int i,len,count;

    FILE *fi;
    char buf[0x20];

    fi=fopen(name,"rb");
   10b86:	6a eb       	ldi	r22, 0xBA	; 186
   10b88:	78 e0       	ldi	r23, 0x08	; 8
   10b8a:	17 de       	rcall	.-978    	; 0x107ba <fopen>
   10b8c:	9a a3       	std	Y+34, r25	; 0x22
   10b8e:	89 a3       	std	Y+33, r24	; 0x21
    if(fi == NULL) 
   10b90:	89 2b       	or	r24, r25
   10b92:	49 f1       	breq	.+82     	; 0x10be6 <hexdump+0x9a>
   10b94:	21 2c       	mov	r2, r1
   10b96:	31 2c       	mov	r3, r1
   10b98:	c1 2c       	mov	r12, r1
   10b9a:	d1 2c       	mov	r13, r1
   10b9c:	76 01       	movw	r14, r12
        return(0);
    }

    count = 0;
    addr = 0;
    while( (len = fread(buf,1, 16, fi)) > 0) 
   10b9e:	9e 01       	movw	r18, r28
   10ba0:	2f 5f       	subi	r18, 0xFF	; 255
   10ba2:	3f 4f       	sbci	r19, 0xFF	; 255
   10ba4:	29 01       	movw	r4, r18
    {
        printf("%08lx : ", addr);
   10ba6:	8a ea       	ldi	r24, 0xAA	; 170
   10ba8:	9d e0       	ldi	r25, 0x0D	; 13
   10baa:	9c 01       	movw	r18, r24
   10bac:	40 e0       	ldi	r20, 0x00	; 0
   10bae:	2b a3       	std	Y+35, r18	; 0x23
   10bb0:	3c a3       	std	Y+36, r19	; 0x24
   10bb2:	4d a3       	std	Y+37, r20	; 0x25

        for(i=0;i<len;++i) 
            printf("%02x ",0xff & buf[i]);
   10bb4:	84 ea       	ldi	r24, 0xA4	; 164
   10bb6:	9d e0       	ldi	r25, 0x0D	; 13
   10bb8:	9c 01       	movw	r18, r24
   10bba:	40 e0       	ldi	r20, 0x00	; 0
   10bbc:	2e a3       	std	Y+38, r18	; 0x26
   10bbe:	3f a3       	std	Y+39, r19	; 0x27
   10bc0:	48 a7       	std	Y+40, r20	; 0x28
        for(;i<16;++i) 
            printf("   ");
   10bc2:	80 ea       	ldi	r24, 0xA0	; 160
   10bc4:	9d e0       	ldi	r25, 0x0D	; 13
   10bc6:	9c 01       	movw	r18, r24
   10bc8:	40 e0       	ldi	r20, 0x00	; 0
   10bca:	29 a7       	std	Y+41, r18	; 0x29
   10bcc:	3a a7       	std	Y+42, r19	; 0x2a
   10bce:	4b a7       	std	Y+43, r20	; 0x2b

        printf(" : ");
   10bd0:	8c e9       	ldi	r24, 0x9C	; 156
   10bd2:	9d e0       	ldi	r25, 0x0D	; 13
   10bd4:	9c 01       	movw	r18, r24
   10bd6:	40 e0       	ldi	r20, 0x00	; 0
   10bd8:	2c a7       	std	Y+44, r18	; 0x2c
   10bda:	3d a7       	std	Y+45, r19	; 0x2d
   10bdc:	4e a7       	std	Y+46, r20	; 0x2e
                putchar('.');
        }
        for(;i<16;++i) 
            putchar('.');

        printf("\n");
   10bde:	8a e9       	ldi	r24, 0x9A	; 154
   10be0:	9d e0       	ldi	r25, 0x0D	; 13
   10be2:	3c 01       	movw	r6, r24
   10be4:	26 c0       	rjmp	.+76     	; 0x10c32 <hexdump+0xe6>
    char buf[0x20];

    fi=fopen(name,"rb");
    if(fi == NULL) 
    {
        printf("Can' open: %s\n", name);
   10be6:	0f 93       	push	r16
   10be8:	1f 93       	push	r17
   10bea:	83 eb       	ldi	r24, 0xB3	; 179
   10bec:	9d e0       	ldi	r25, 0x0D	; 13
   10bee:	1f 92       	push	r1
   10bf0:	9f 93       	push	r25
   10bf2:	8f 93       	push	r24
   10bf4:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        return(0);
   10bf8:	0f 90       	pop	r0
   10bfa:	0f 90       	pop	r0
   10bfc:	0f 90       	pop	r0
   10bfe:	0f 90       	pop	r0
   10c00:	0f 90       	pop	r0
   10c02:	80 e0       	ldi	r24, 0x00	; 0
   10c04:	90 e0       	ldi	r25, 0x00	; 0
   10c06:	9e c0       	rjmp	.+316    	; 0x10d44 <hexdump+0x1f8>
                putchar('.');
        }
        for(;i<16;++i) 
            putchar('.');

        printf("\n");
   10c08:	1f 92       	push	r1
   10c0a:	7f 92       	push	r7
   10c0c:	6f 92       	push	r6
   10c0e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        addr += len;
   10c12:	01 2e       	mov	r0, r17
   10c14:	00 0c       	add	r0, r0
   10c16:	22 0b       	sbc	r18, r18
   10c18:	33 0b       	sbc	r19, r19
   10c1a:	c0 0e       	add	r12, r16
   10c1c:	d1 1e       	adc	r13, r17
   10c1e:	e2 1e       	adc	r14, r18
   10c20:	f3 1e       	adc	r15, r19
        if(dopage)
   10c22:	0f 90       	pop	r0
   10c24:	0f 90       	pop	r0
   10c26:	0f 90       	pop	r0
   10c28:	8f a5       	ldd	r24, Y+47	; 0x2f
   10c2a:	98 a9       	ldd	r25, Y+48	; 0x30
   10c2c:	89 2b       	or	r24, r25
   10c2e:	09 f0       	breq	.+2      	; 0x10c32 <hexdump+0xe6>
   10c30:	74 c0       	rjmp	.+232    	; 0x10d1a <hexdump+0x1ce>
        return(0);
    }

    count = 0;
    addr = 0;
    while( (len = fread(buf,1, 16, fi)) > 0) 
   10c32:	29 a1       	ldd	r18, Y+33	; 0x21
   10c34:	3a a1       	ldd	r19, Y+34	; 0x22
   10c36:	40 e1       	ldi	r20, 0x10	; 16
   10c38:	50 e0       	ldi	r21, 0x00	; 0
   10c3a:	61 e0       	ldi	r22, 0x01	; 1
   10c3c:	70 e0       	ldi	r23, 0x00	; 0
   10c3e:	c2 01       	movw	r24, r4
   10c40:	12 db       	rcall	.-2524   	; 0x10266 <fread>
   10c42:	8c 01       	movw	r16, r24
   10c44:	18 16       	cp	r1, r24
   10c46:	19 06       	cpc	r1, r25
   10c48:	0c f0       	brlt	.+2      	; 0x10c4c <hexdump+0x100>
   10c4a:	6d c0       	rjmp	.+218    	; 0x10d26 <hexdump+0x1da>
    {
        printf("%08lx : ", addr);
   10c4c:	ff 92       	push	r15
   10c4e:	ef 92       	push	r14
   10c50:	df 92       	push	r13
   10c52:	cf 92       	push	r12
   10c54:	1f 92       	push	r1
   10c56:	3c a1       	ldd	r19, Y+36	; 0x24
   10c58:	3f 93       	push	r19
   10c5a:	4b a1       	ldd	r20, Y+35	; 0x23
   10c5c:	4f 93       	push	r20
   10c5e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   10c62:	0f b6       	in	r0, 0x3f	; 63
   10c64:	f8 94       	cli
   10c66:	de bf       	out	0x3e, r29	; 62
   10c68:	0f be       	out	0x3f, r0	; 63
   10c6a:	cd bf       	out	0x3d, r28	; 61
   10c6c:	52 01       	movw	r10, r4

        for(i=0;i<len;++i) 
            printf("%02x ",0xff & buf[i]);
   10c6e:	f5 01       	movw	r30, r10
   10c70:	81 91       	ld	r24, Z+
   10c72:	5f 01       	movw	r10, r30
   10c74:	1f 92       	push	r1
   10c76:	8f 93       	push	r24
   10c78:	1f 92       	push	r1
   10c7a:	ff a1       	ldd	r31, Y+39	; 0x27
   10c7c:	ff 93       	push	r31
   10c7e:	2e a1       	ldd	r18, Y+38	; 0x26
   10c80:	2f 93       	push	r18
   10c82:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    addr = 0;
    while( (len = fread(buf,1, 16, fi)) > 0) 
    {
        printf("%08lx : ", addr);

        for(i=0;i<len;++i) 
   10c86:	c5 01       	movw	r24, r10
   10c88:	84 19       	sub	r24, r4
   10c8a:	95 09       	sbc	r25, r5
   10c8c:	0f 90       	pop	r0
   10c8e:	0f 90       	pop	r0
   10c90:	0f 90       	pop	r0
   10c92:	0f 90       	pop	r0
   10c94:	0f 90       	pop	r0
   10c96:	80 17       	cp	r24, r16
   10c98:	91 07       	cpc	r25, r17
   10c9a:	4c f3       	brlt	.-46     	; 0x10c6e <hexdump+0x122>
   10c9c:	58 01       	movw	r10, r16
            printf("%02x ",0xff & buf[i]);
        for(;i<16;++i) 
   10c9e:	90 e1       	ldi	r25, 0x10	; 16
   10ca0:	a9 16       	cp	r10, r25
   10ca2:	b1 04       	cpc	r11, r1
   10ca4:	74 f4       	brge	.+28     	; 0x10cc2 <hexdump+0x176>
            printf("   ");
   10ca6:	1f 92       	push	r1
   10ca8:	3a a5       	ldd	r19, Y+42	; 0x2a
   10caa:	3f 93       	push	r19
   10cac:	49 a5       	ldd	r20, Y+41	; 0x29
   10cae:	4f 93       	push	r20
   10cb0:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    {
        printf("%08lx : ", addr);

        for(i=0;i<len;++i) 
            printf("%02x ",0xff & buf[i]);
        for(;i<16;++i) 
   10cb4:	8f ef       	ldi	r24, 0xFF	; 255
   10cb6:	a8 1a       	sub	r10, r24
   10cb8:	b8 0a       	sbc	r11, r24
   10cba:	0f 90       	pop	r0
   10cbc:	0f 90       	pop	r0
   10cbe:	0f 90       	pop	r0
   10cc0:	ee cf       	rjmp	.-36     	; 0x10c9e <hexdump+0x152>
            printf("   ");

        printf(" : ");
   10cc2:	1f 92       	push	r1
   10cc4:	ed a5       	ldd	r30, Y+45	; 0x2d
   10cc6:	ef 93       	push	r30
   10cc8:	fc a5       	ldd	r31, Y+44	; 0x2c
   10cca:	ff 93       	push	r31
   10ccc:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   10cd0:	0f 90       	pop	r0
   10cd2:	0f 90       	pop	r0
   10cd4:	0f 90       	pop	r0
   10cd6:	52 01       	movw	r10, r4

        for(i=0;i<len;++i) 
        {
            if(buf[i] >= 0x20 && buf[i] <= 0x7e)
   10cd8:	f5 01       	movw	r30, r10
   10cda:	81 91       	ld	r24, Z+
   10cdc:	5f 01       	movw	r10, r30
   10cde:	90 ee       	ldi	r25, 0xE0	; 224
   10ce0:	98 0f       	add	r25, r24
   10ce2:	9f 35       	cpi	r25, 0x5F	; 95
   10ce4:	10 f4       	brcc	.+4      	; 0x10cea <hexdump+0x19e>
                putchar(buf[i]);
   10ce6:	90 e0       	ldi	r25, 0x00	; 0
   10ce8:	02 c0       	rjmp	.+4      	; 0x10cee <hexdump+0x1a2>
            else
                putchar('.');
   10cea:	8e e2       	ldi	r24, 0x2E	; 46
   10cec:	90 e0       	ldi	r25, 0x00	; 0
   10cee:	0e 94 e7 7a 	call	0xf5ce	; 0xf5ce <putchar>
        for(;i<16;++i) 
            printf("   ");

        printf(" : ");

        for(i=0;i<len;++i) 
   10cf2:	c5 01       	movw	r24, r10
   10cf4:	84 19       	sub	r24, r4
   10cf6:	95 09       	sbc	r25, r5
   10cf8:	80 17       	cp	r24, r16
   10cfa:	91 07       	cpc	r25, r17
   10cfc:	6c f3       	brlt	.-38     	; 0x10cd8 <hexdump+0x18c>
   10cfe:	58 01       	movw	r10, r16
            if(buf[i] >= 0x20 && buf[i] <= 0x7e)
                putchar(buf[i]);
            else
                putchar('.');
        }
        for(;i<16;++i) 
   10d00:	20 e1       	ldi	r18, 0x10	; 16
   10d02:	a2 16       	cp	r10, r18
   10d04:	b1 04       	cpc	r11, r1
   10d06:	0c f0       	brlt	.+2      	; 0x10d0a <hexdump+0x1be>
   10d08:	7f cf       	rjmp	.-258    	; 0x10c08 <hexdump+0xbc>
            putchar('.');
   10d0a:	8e e2       	ldi	r24, 0x2E	; 46
   10d0c:	90 e0       	ldi	r25, 0x00	; 0
   10d0e:	0e 94 e7 7a 	call	0xf5ce	; 0xf5ce <putchar>
            if(buf[i] >= 0x20 && buf[i] <= 0x7e)
                putchar(buf[i]);
            else
                putchar('.');
        }
        for(;i<16;++i) 
   10d12:	ff ef       	ldi	r31, 0xFF	; 255
   10d14:	af 1a       	sub	r10, r31
   10d16:	bf 0a       	sbc	r11, r31

        printf("\n");
        addr += len;
        if(dopage)
        {
            count = testpage(++count);
   10d18:	f3 cf       	rjmp	.-26     	; 0x10d00 <hexdump+0x1b4>
   10d1a:	c1 01       	movw	r24, r2
   10d1c:	01 96       	adiw	r24, 0x01	; 1
   10d1e:	76 de       	rcall	.-788    	; 0x10a0c <testpage>
            if(count < 0)
   10d20:	1c 01       	movw	r2, r24
   10d22:	97 ff       	sbrs	r25, 7
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
   10d24:	86 cf       	rjmp	.-244    	; 0x10c32 <hexdump+0xe6>
   10d26:	88 e9       	ldi	r24, 0x98	; 152
   10d28:	9d e0       	ldi	r25, 0x0D	; 13
   10d2a:	1f 92       	push	r1
   10d2c:	9f 93       	push	r25
   10d2e:	8f 93       	push	r24
    fclose(fi);
   10d30:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   10d34:	89 a1       	ldd	r24, Y+33	; 0x21
   10d36:	9a a1       	ldd	r25, Y+34	; 0x22
    return(1);
   10d38:	ea db       	rcall	.-2092   	; 0x1050e <fclose>
   10d3a:	0f 90       	pop	r0
   10d3c:	0f 90       	pop	r0
   10d3e:	0f 90       	pop	r0
   10d40:	81 e0       	ldi	r24, 0x01	; 1
}
   10d42:	90 e0       	ldi	r25, 0x00	; 0
   10d44:	e0 96       	adiw	r28, 0x30	; 48
   10d46:	0f b6       	in	r0, 0x3f	; 63
   10d48:	f8 94       	cli
   10d4a:	de bf       	out	0x3e, r29	; 62
   10d4c:	0f be       	out	0x3f, r0	; 63
   10d4e:	cd bf       	out	0x3d, r28	; 61
   10d50:	df 91       	pop	r29
   10d52:	cf 91       	pop	r28
   10d54:	1f 91       	pop	r17
   10d56:	0f 91       	pop	r16
   10d58:	ff 90       	pop	r15
   10d5a:	ef 90       	pop	r14
   10d5c:	df 90       	pop	r13
   10d5e:	cf 90       	pop	r12
   10d60:	bf 90       	pop	r11
   10d62:	af 90       	pop	r10
   10d64:	8f 90       	pop	r8
   10d66:	7f 90       	pop	r7
   10d68:	6f 90       	pop	r6
   10d6a:	5f 90       	pop	r5
   10d6c:	4f 90       	pop	r4
   10d6e:	3f 90       	pop	r3
   10d70:	2f 90       	pop	r2
   10d72:	08 95       	ret

00010d74 <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   10d74:	4f 92       	push	r4
   10d76:	5f 92       	push	r5
   10d78:	6f 92       	push	r6
   10d7a:	7f 92       	push	r7
   10d7c:	af 92       	push	r10
   10d7e:	bf 92       	push	r11
   10d80:	cf 92       	push	r12
   10d82:	df 92       	push	r13
   10d84:	ef 92       	push	r14
   10d86:	ff 92       	push	r15
   10d88:	0f 93       	push	r16
   10d8a:	1f 93       	push	r17
   10d8c:	cf 93       	push	r28
   10d8e:	df 93       	push	r29
   10d90:	cd b7       	in	r28, 0x3d	; 61
   10d92:	de b7       	in	r29, 0x3e	; 62
   10d94:	ec 97       	sbiw	r28, 0x3c	; 60
   10d96:	0f b6       	in	r0, 0x3f	; 63
   10d98:	f8 94       	cli
   10d9a:	de bf       	out	0x3e, r29	; 62
   10d9c:	0f be       	out	0x3f, r0	; 63
   10d9e:	cd bf       	out	0x3d, r28	; 61
   10da0:	8c 01       	movw	r16, r24
   10da2:	7b 01       	movw	r14, r22
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;


    if(stat(name, &sp) == -1) 
   10da4:	be 01       	movw	r22, r28
   10da6:	6f 5f       	subi	r22, 0xFF	; 255
   10da8:	7f 4f       	sbci	r23, 0xFF	; 255
   10daa:	1b d8       	rcall	.-4042   	; 0xfde2 <stat>
   10dac:	01 96       	adiw	r24, 0x01	; 1
   10dae:	89 f4       	brne	.+34     	; 0x10dd2 <ls_info+0x5e>
    {
        printf("can not stat: %s\n", name);
   10db0:	1f 93       	push	r17
   10db2:	0f 93       	push	r16
   10db4:	8d e7       	ldi	r24, 0x7D	; 125
   10db6:	9d e0       	ldi	r25, 0x0D	; 13
   10db8:	1f 92       	push	r1
   10dba:	9f 93       	push	r25
   10dbc:	8f 93       	push	r24
   10dbe:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        return(0);
   10dc2:	0f 90       	pop	r0
   10dc4:	0f 90       	pop	r0
   10dc6:	0f 90       	pop	r0
   10dc8:	0f 90       	pop	r0
   10dca:	0f 90       	pop	r0
   10dcc:	80 e0       	ldi	r24, 0x00	; 0
   10dce:	90 e0       	ldi	r25, 0x00	; 0
   10dd0:	79 c0       	rjmp	.+242    	; 0x10ec4 <ls_info+0x150>
    }

    if(!verbose)
   10dd2:	ef 28       	or	r14, r15
   10dd4:	91 f4       	brne	.+36     	; 0x10dfa <ls_info+0x86>
    {
        printf("%s\n",basename(name));
   10dd6:	c8 01       	movw	r24, r16
   10dd8:	0e 94 53 7c 	call	0xf8a6	; 0xf8a6 <basename>
   10ddc:	9f 93       	push	r25
   10dde:	8f 93       	push	r24
   10de0:	89 e7       	ldi	r24, 0x79	; 121
   10de2:	9d e0       	ldi	r25, 0x0D	; 13
   10de4:	1f 92       	push	r1
   10de6:	9f 93       	push	r25
   10de8:	8f 93       	push	r24
   10dea:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        return(1);
   10dee:	0f 90       	pop	r0
   10df0:	0f 90       	pop	r0
   10df2:	0f 90       	pop	r0
   10df4:	0f 90       	pop	r0
   10df6:	0f 90       	pop	r0
   10df8:	63 c0       	rjmp	.+198    	; 0x10ec0 <ls_info+0x14c>
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
   10dfa:	49 84       	ldd	r4, Y+9	; 0x09
   10dfc:	5a 84       	ldd	r5, Y+10	; 0x0a
   10dfe:	6b 84       	ldd	r6, Y+11	; 0x0b
   10e00:	7c 84       	ldd	r7, Y+12	; 0x0c
   10e02:	d3 01       	movw	r26, r6
   10e04:	c2 01       	movw	r24, r4
   10e06:	88 27       	eor	r24, r24
   10e08:	90 7f       	andi	r25, 0xF0	; 240
   10e0a:	aa 27       	eor	r26, r26
   10e0c:	bb 27       	eor	r27, r27
   10e0e:	81 15       	cp	r24, r1
   10e10:	90 44       	sbci	r25, 0x40	; 64
   10e12:	a1 05       	cpc	r26, r1
   10e14:	b1 05       	cpc	r27, r1
   10e16:	11 f4       	brne	.+4      	; 0x10e1c <ls_info+0xa8>
        *p++ = 'd';
   10e18:	84 e6       	ldi	r24, 0x64	; 100
   10e1a:	01 c0       	rjmp	.+2      	; 0x10e1e <ls_info+0xaa>
    else
        *p++ = '-';
   10e1c:	8d e2       	ldi	r24, 0x2D	; 45
   10e1e:	89 ab       	std	Y+49, r24	; 0x31
   10e20:	fe 01       	movw	r30, r28
   10e22:	f1 96       	adiw	r30, 0x31	; 49
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   10e24:	e1 2c       	mov	r14, r1
   10e26:	ff 24       	eor	r15, r15
   10e28:	f3 94       	inc	r15
   10e2a:	20 e0       	ldi	r18, 0x00	; 0
   10e2c:	30 e0       	ldi	r19, 0x00	; 0
   10e2e:	5f 01       	movw	r10, r30
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
   10e30:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
   10e32:	53 e0       	ldi	r21, 0x03	; 3
   10e34:	c5 2e       	mov	r12, r21
   10e36:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
   10e38:	c7 01       	movw	r24, r14
   10e3a:	a0 e0       	ldi	r26, 0x00	; 0
   10e3c:	b0 e0       	ldi	r27, 0x00	; 0
   10e3e:	84 21       	and	r24, r4
   10e40:	95 21       	and	r25, r5
   10e42:	a6 21       	and	r26, r6
   10e44:	b7 21       	and	r27, r7
   10e46:	89 2b       	or	r24, r25
   10e48:	8a 2b       	or	r24, r26
   10e4a:	8b 2b       	or	r24, r27
   10e4c:	51 f0       	breq	.+20     	; 0x10e62 <ls_info+0xee>
            *p++ = cm[ i % 3];
   10e4e:	c9 01       	movw	r24, r18
   10e50:	b6 01       	movw	r22, r12
   10e52:	0e 94 b4 eb 	call	0x1d768	; 0x1d768 <__divmodhi4>
   10e56:	dc 01       	movw	r26, r24
   10e58:	ae 59       	subi	r26, 0x9E	; 158
   10e5a:	b4 4f       	sbci	r27, 0xF4	; 244
   10e5c:	8c 91       	ld	r24, X
   10e5e:	81 83       	std	Z+1, r24	; 0x01
   10e60:	01 c0       	rjmp	.+2      	; 0x10e64 <ls_info+0xf0>
        else
            *p++ = '-';
   10e62:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
   10e64:	f6 94       	lsr	r15
   10e66:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
   10e68:	2f 5f       	subi	r18, 0xFF	; 255
   10e6a:	3f 4f       	sbci	r19, 0xFF	; 255
   10e6c:	31 96       	adiw	r30, 0x01	; 1
   10e6e:	29 30       	cpi	r18, 0x09	; 9
   10e70:	31 05       	cpc	r19, r1
   10e72:	11 f7       	brne	.-60     	; 0x10e38 <ls_info+0xc4>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
   10e74:	1b ae       	std	Y+59, r1	; 0x3b

    printf("%s none none %12ld %s %s\n",
   10e76:	c8 01       	movw	r24, r16
   10e78:	0e 94 53 7c 	call	0xf8a6	; 0xf8a6 <basename>
   10e7c:	18 2f       	mov	r17, r24
   10e7e:	09 2f       	mov	r16, r25
   10e80:	69 a5       	ldd	r22, Y+41	; 0x29
   10e82:	7a a5       	ldd	r23, Y+42	; 0x2a
   10e84:	8b a5       	ldd	r24, Y+43	; 0x2b
   10e86:	9c a5       	ldd	r25, Y+44	; 0x2c
   10e88:	0e 94 81 7b 	call	0xf702	; 0xf702 <mctime>
   10e8c:	0f 93       	push	r16
   10e8e:	1f 93       	push	r17
   10e90:	9f 93       	push	r25
   10e92:	8f 93       	push	r24
   10e94:	8c 8d       	ldd	r24, Y+28	; 0x1c
   10e96:	8f 93       	push	r24
   10e98:	8b 8d       	ldd	r24, Y+27	; 0x1b
   10e9a:	8f 93       	push	r24
   10e9c:	8a 8d       	ldd	r24, Y+26	; 0x1a
   10e9e:	8f 93       	push	r24
   10ea0:	89 8d       	ldd	r24, Y+25	; 0x19
   10ea2:	8f 93       	push	r24
   10ea4:	bf 92       	push	r11
   10ea6:	af 92       	push	r10
   10ea8:	8f e5       	ldi	r24, 0x5F	; 95
   10eaa:	9d e0       	ldi	r25, 0x0D	; 13
   10eac:	1f 92       	push	r1
   10eae:	9f 93       	push	r25
   10eb0:	8f 93       	push	r24
   10eb2:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        attr, 
        (long) sp.st_size, 
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
   10eb6:	0f b6       	in	r0, 0x3f	; 63
   10eb8:	f8 94       	cli
   10eba:	de bf       	out	0x3e, r29	; 62
   10ebc:	0f be       	out	0x3f, r0	; 63
   10ebe:	cd bf       	out	0x3d, r28	; 61
   10ec0:	81 e0       	ldi	r24, 0x01	; 1
   10ec2:	90 e0       	ldi	r25, 0x00	; 0
}
   10ec4:	ec 96       	adiw	r28, 0x3c	; 60
   10ec6:	0f b6       	in	r0, 0x3f	; 63
   10ec8:	f8 94       	cli
   10eca:	de bf       	out	0x3e, r29	; 62
   10ecc:	0f be       	out	0x3f, r0	; 63
   10ece:	cd bf       	out	0x3d, r28	; 61
   10ed0:	df 91       	pop	r29
   10ed2:	cf 91       	pop	r28
   10ed4:	1f 91       	pop	r17
   10ed6:	0f 91       	pop	r16
   10ed8:	ff 90       	pop	r15
   10eda:	ef 90       	pop	r14
   10edc:	df 90       	pop	r13
   10ede:	cf 90       	pop	r12
   10ee0:	bf 90       	pop	r11
   10ee2:	af 90       	pop	r10
   10ee4:	7f 90       	pop	r7
   10ee6:	6f 90       	pop	r6
   10ee8:	5f 90       	pop	r5
   10eea:	4f 90       	pop	r4
   10eec:	08 95       	ret

00010eee <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files
MEMSPACE
int ls(char *name, int verbose)
{
   10eee:	2f 92       	push	r2
   10ef0:	3f 92       	push	r3
   10ef2:	4f 92       	push	r4
   10ef4:	5f 92       	push	r5
   10ef6:	6f 92       	push	r6
   10ef8:	8f 92       	push	r8
   10efa:	9f 92       	push	r9
   10efc:	af 92       	push	r10
   10efe:	bf 92       	push	r11
   10f00:	cf 92       	push	r12
   10f02:	df 92       	push	r13
   10f04:	ef 92       	push	r14
   10f06:	ff 92       	push	r15
   10f08:	0f 93       	push	r16
   10f0a:	1f 93       	push	r17
   10f0c:	cf 93       	push	r28
   10f0e:	df 93       	push	r29
   10f10:	cd b7       	in	r28, 0x3d	; 61
   10f12:	de b7       	in	r29, 0x3e	; 62
   10f14:	c2 53       	subi	r28, 0x32	; 50
   10f16:	d1 40       	sbci	r29, 0x01	; 1
   10f18:	0f b6       	in	r0, 0x3f	; 63
   10f1a:	f8 94       	cli
   10f1c:	de bf       	out	0x3e, r29	; 62
   10f1e:	0f be       	out	0x3f, r0	; 63
   10f20:	cd bf       	out	0x3d, r28	; 61
   10f22:	7c 01       	movw	r14, r24
   10f24:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   10f26:	19 82       	std	Y+1, r1	; 0x01
   10f28:	8e 01       	movw	r16, r28
   10f2a:	0f 5f       	subi	r16, 0xFF	; 255
   10f2c:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   10f2e:	00 97       	sbiw	r24, 0x00	; 0
   10f30:	91 f4       	brne	.+36     	; 0x10f56 <ls+0x68>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   10f32:	6e ef       	ldi	r22, 0xFE	; 254
   10f34:	70 e0       	ldi	r23, 0x00	; 0
   10f36:	c8 01       	movw	r24, r16
   10f38:	0e 94 a9 7c 	call	0xf952	; 0xf952 <getcwd>
   10f3c:	89 2b       	or	r24, r25
   10f3e:	d1 f4       	brne	.+52     	; 0x10f74 <ls+0x86>
        {
            printf("ls: Can't get current directory\n"); 
   10f40:	8e e3       	ldi	r24, 0x3E	; 62
   10f42:	9d e0       	ldi	r25, 0x0D	; 13
   10f44:	1f 92       	push	r1
   10f46:	9f 93       	push	r25
   10f48:	8f 93       	push	r24
   10f4a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
            return(0); 
   10f4e:	0f 90       	pop	r0
   10f50:	0f 90       	pop	r0
   10f52:	0f 90       	pop	r0
   10f54:	3c c0       	rjmp	.+120    	; 0x10fce <ls+0xe0>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   10f56:	fc 01       	movw	r30, r24
   10f58:	80 81       	ld	r24, Z
   10f5a:	88 23       	and	r24, r24
   10f5c:	51 f3       	breq	.-44     	; 0x10f32 <ls+0x44>
   10f5e:	65 ea       	ldi	r22, 0xA5	; 165
   10f60:	70 e1       	ldi	r23, 0x10	; 16
   10f62:	c7 01       	movw	r24, r14
   10f64:	0e 94 f5 32 	call	0x65ea	; 0x65ea <MATCH>
   10f68:	89 2b       	or	r24, r25
   10f6a:	19 f7       	brne	.-58     	; 0x10f32 <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   10f6c:	b7 01       	movw	r22, r14
   10f6e:	c8 01       	movw	r24, r16
   10f70:	0e 94 1a 32 	call	0x6434	; 0x6434 <strcpy>
    }
    len = strlen(fullpath);
   10f74:	f8 01       	movw	r30, r16
   10f76:	01 90       	ld	r0, Z+
   10f78:	00 20       	and	r0, r0
   10f7a:	e9 f7       	brne	.-6      	; 0x10f76 <ls+0x88>
   10f7c:	31 97       	sbiw	r30, 0x01	; 1
   10f7e:	1f 01       	movw	r2, r30
   10f80:	20 1a       	sub	r2, r16
   10f82:	31 0a       	sbc	r3, r17


    printf("Listing:[%s]\n",fullpath);
   10f84:	1f 93       	push	r17
   10f86:	0f 93       	push	r16
   10f88:	80 e3       	ldi	r24, 0x30	; 48
   10f8a:	9d e0       	ldi	r25, 0x0D	; 13
   10f8c:	1f 92       	push	r1
   10f8e:	9f 93       	push	r25
   10f90:	8f 93       	push	r24
   10f92:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>

    if (stat(fullpath, &st)) 
   10f96:	be 01       	movw	r22, r28
   10f98:	6f 5f       	subi	r22, 0xFF	; 255
   10f9a:	7e 4f       	sbci	r23, 0xFE	; 254
   10f9c:	c8 01       	movw	r24, r16
   10f9e:	0e 94 f1 7e 	call	0xfde2	; 0xfde2 <stat>
   10fa2:	7c 01       	movw	r14, r24
   10fa4:	0f 90       	pop	r0
   10fa6:	0f 90       	pop	r0
   10fa8:	0f 90       	pop	r0
   10faa:	0f 90       	pop	r0
   10fac:	0f 90       	pop	r0
   10fae:	89 2b       	or	r24, r25
   10fb0:	89 f0       	breq	.+34     	; 0x10fd4 <ls+0xe6>
    { 
        printf("ls: cannot stat [%s]\n", fullpath); 
   10fb2:	1f 93       	push	r17
   10fb4:	0f 93       	push	r16
   10fb6:	8a e1       	ldi	r24, 0x1A	; 26
   10fb8:	9d e0       	ldi	r25, 0x0D	; 13
   10fba:	1f 92       	push	r1
   10fbc:	9f 93       	push	r25
   10fbe:	8f 93       	push	r24
   10fc0:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        return(0); 
   10fc4:	0f 90       	pop	r0
   10fc6:	0f 90       	pop	r0
   10fc8:	0f 90       	pop	r0
   10fca:	0f 90       	pop	r0
   10fcc:	0f 90       	pop	r0
   10fce:	e1 2c       	mov	r14, r1
   10fd0:	f1 2c       	mov	r15, r1
   10fd2:	8f c0       	rjmp	.+286    	; 0x110f2 <ls+0x204>
    }

    switch (st.st_mode & S_IFMT) 
   10fd4:	c7 5f       	subi	r28, 0xF7	; 247
   10fd6:	de 4f       	sbci	r29, 0xFE	; 254
   10fd8:	88 81       	ld	r24, Y
   10fda:	99 81       	ldd	r25, Y+1	; 0x01
   10fdc:	aa 81       	ldd	r26, Y+2	; 0x02
   10fde:	bb 81       	ldd	r27, Y+3	; 0x03
   10fe0:	c9 50       	subi	r28, 0x09	; 9
   10fe2:	d1 40       	sbci	r29, 0x01	; 1
   10fe4:	88 27       	eor	r24, r24
   10fe6:	90 7f       	andi	r25, 0xF0	; 240
   10fe8:	aa 27       	eor	r26, r26
   10fea:	bb 27       	eor	r27, r27
   10fec:	81 15       	cp	r24, r1
   10fee:	f0 e4       	ldi	r31, 0x40	; 64
   10ff0:	9f 07       	cpc	r25, r31
   10ff2:	a1 05       	cpc	r26, r1
   10ff4:	b1 05       	cpc	r27, r1
   10ff6:	51 f0       	breq	.+20     	; 0x1100c <ls+0x11e>
   10ff8:	81 15       	cp	r24, r1
   10ffa:	90 48       	sbci	r25, 0x80	; 128
   10ffc:	a1 05       	cpc	r26, r1
   10ffe:	b1 05       	cpc	r27, r1
   11000:	09 f0       	breq	.+2      	; 0x11004 <ls+0x116>
   11002:	67 c0       	rjmp	.+206    	; 0x110d2 <ls+0x1e4>
    {
    case S_IFREG:
        ls_info(fullpath,verbose);
   11004:	b4 01       	movw	r22, r8
   11006:	c8 01       	movw	r24, r16
   11008:	b5 de       	rcall	.-662    	; 0x10d74 <ls_info>
   1100a:	63 c0       	rjmp	.+198    	; 0x110d2 <ls+0x1e4>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
   1100c:	c8 01       	movw	r24, r16
   1100e:	0e 94 57 7d 	call	0xfaae	; 0xfaae <opendir>
   11012:	5c 01       	movw	r10, r24
        if(!dirp)
   11014:	89 2b       	or	r24, r25
   11016:	79 f0       	breq	.+30     	; 0x11036 <ls+0x148>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   11018:	e1 2c       	mov	r14, r1
   1101a:	f1 2c       	mov	r15, r1
                strcat(fullpath,"/");
            }
            strcat(fullpath,de->d_name);
            files +=ls_info(fullpath,verbose);
            // restore path
            fullpath[len] = 0;
   1101c:	c8 01       	movw	r24, r16
   1101e:	82 0d       	add	r24, r2
   11020:	93 1d       	adc	r25, r3
   11022:	cf 5c       	subi	r28, 0xCF	; 207
   11024:	de 4f       	sbci	r29, 0xFE	; 254
   11026:	99 83       	std	Y+1, r25	; 0x01
   11028:	88 83       	st	Y, r24
   1102a:	c1 53       	subi	r28, 0x31	; 49
   1102c:	d1 40       	sbci	r29, 0x01	; 1
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   1102e:	87 ee       	ldi	r24, 0xE7	; 231
   11030:	9c e0       	ldi	r25, 0x0C	; 12
   11032:	2c 01       	movw	r4, r24
   11034:	27 c0       	rjmp	.+78     	; 0x11084 <ls+0x196>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
        if(!dirp)
        {
            printf("opendir failed\n");
   11036:	8a e0       	ldi	r24, 0x0A	; 10
   11038:	9d e0       	ldi	r25, 0x0D	; 13
   1103a:	1f 92       	push	r1
   1103c:	9f 93       	push	r25
   1103e:	8f 93       	push	r24
   11040:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
            return(0);
   11044:	0f 90       	pop	r0
   11046:	0f 90       	pop	r0
   11048:	0f 90       	pop	r0
   1104a:	53 c0       	rjmp	.+166    	; 0x110f2 <ls+0x204>
        }
        while ( (de = readdir(dirp)) ) 
        {
            if(de->d_name[0] == 0)
   1104c:	f6 01       	movw	r30, r12
   1104e:	80 81       	ld	r24, Z
   11050:	88 23       	and	r24, r24
   11052:	f1 f0       	breq	.+60     	; 0x11090 <ls+0x1a2>
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
   11054:	f6 01       	movw	r30, r12
   11056:	01 90       	ld	r0, Z+
   11058:	00 20       	and	r0, r0
   1105a:	e9 f7       	brne	.-6      	; 0x11056 <ls+0x168>
   1105c:	31 97       	sbiw	r30, 0x01	; 1
   1105e:	ec 19       	sub	r30, r12
   11060:	fd 09       	sbc	r31, r13
            if(len + len2 >= MAX_NAME_LEN)
   11062:	e2 0d       	add	r30, r2
   11064:	f3 1d       	adc	r31, r3
   11066:	ef 3f       	cpi	r30, 0xFF	; 255
   11068:	f1 05       	cpc	r31, r1
   1106a:	b4 f0       	brlt	.+44     	; 0x11098 <ls+0x1aa>
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   1106c:	df 92       	push	r13
   1106e:	cf 92       	push	r12
   11070:	1f 92       	push	r1
   11072:	5f 92       	push	r5
   11074:	4f 92       	push	r4
   11076:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
                continue;
   1107a:	0f 90       	pop	r0
   1107c:	0f 90       	pop	r0
   1107e:	0f 90       	pop	r0
   11080:	0f 90       	pop	r0
   11082:	0f 90       	pop	r0
        if(!dirp)
        {
            printf("opendir failed\n");
            return(0);
        }
        while ( (de = readdir(dirp)) ) 
   11084:	c5 01       	movw	r24, r10
   11086:	0e 94 75 7d 	call	0xfaea	; 0xfaea <readdir>
   1108a:	6c 01       	movw	r12, r24
   1108c:	89 2b       	or	r24, r25
   1108e:	f1 f6       	brne	.-68     	; 0x1104c <ls+0x15e>
#ifdef ESP8266
            optimistic_yield(1000);
            wdt_reset();
#endif
        }
        closedir(dirp);
   11090:	c5 01       	movw	r24, r10
   11092:	0e 94 3c 7d 	call	0xfa78	; 0xfa78 <closedir>
        break;
   11096:	1f c0       	rjmp	.+62     	; 0x110d6 <ls+0x1e8>
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
                continue;
            }
            if(!MATCH(fullpath,"/") )
   11098:	66 e6       	ldi	r22, 0x66	; 102
   1109a:	78 e0       	ldi	r23, 0x08	; 8
   1109c:	c8 01       	movw	r24, r16
   1109e:	0e 94 f5 32 	call	0x65ea	; 0x65ea <MATCH>
   110a2:	89 2b       	or	r24, r25
   110a4:	29 f4       	brne	.+10     	; 0x110b0 <ls+0x1c2>
            {
                strcat(fullpath,"/");
   110a6:	66 e6       	ldi	r22, 0x66	; 102
   110a8:	78 e0       	ldi	r23, 0x08	; 8
   110aa:	c8 01       	movw	r24, r16
   110ac:	0e 94 3b 32 	call	0x6476	; 0x6476 <strcat>
            }
            strcat(fullpath,de->d_name);
   110b0:	b6 01       	movw	r22, r12
   110b2:	c8 01       	movw	r24, r16
   110b4:	0e 94 3b 32 	call	0x6476	; 0x6476 <strcat>
            files +=ls_info(fullpath,verbose);
   110b8:	b4 01       	movw	r22, r8
   110ba:	c8 01       	movw	r24, r16
   110bc:	5b de       	rcall	.-842    	; 0x10d74 <ls_info>
   110be:	e8 0e       	add	r14, r24
   110c0:	f9 1e       	adc	r15, r25
            // restore path
            fullpath[len] = 0;
   110c2:	cf 5c       	subi	r28, 0xCF	; 207
   110c4:	de 4f       	sbci	r29, 0xFE	; 254
   110c6:	e8 81       	ld	r30, Y
   110c8:	f9 81       	ldd	r31, Y+1	; 0x01
   110ca:	c1 53       	subi	r28, 0x31	; 49
   110cc:	d1 40       	sbci	r29, 0x01	; 1
   110ce:	10 82       	st	Z, r1
   110d0:	d9 cf       	rjmp	.-78     	; 0x11084 <ls+0x196>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   110d2:	e1 2c       	mov	r14, r1
   110d4:	f1 2c       	mov	r15, r1
#endif
        }
        closedir(dirp);
        break;
    }
    printf("Files: %d\n", (int)files);
   110d6:	ff 92       	push	r15
   110d8:	ef 92       	push	r14
   110da:	8c ed       	ldi	r24, 0xDC	; 220
   110dc:	9c e0       	ldi	r25, 0x0C	; 12
   110de:	1f 92       	push	r1
   110e0:	9f 93       	push	r25
   110e2:	8f 93       	push	r24
   110e4:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    return(files);
   110e8:	0f 90       	pop	r0
   110ea:	0f 90       	pop	r0
   110ec:	0f 90       	pop	r0
   110ee:	0f 90       	pop	r0
   110f0:	0f 90       	pop	r0
}
   110f2:	c7 01       	movw	r24, r14
   110f4:	ce 5c       	subi	r28, 0xCE	; 206
   110f6:	de 4f       	sbci	r29, 0xFE	; 254
   110f8:	0f b6       	in	r0, 0x3f	; 63
   110fa:	f8 94       	cli
   110fc:	de bf       	out	0x3e, r29	; 62
   110fe:	0f be       	out	0x3f, r0	; 63
   11100:	cd bf       	out	0x3d, r28	; 61
   11102:	df 91       	pop	r29
   11104:	cf 91       	pop	r28
   11106:	1f 91       	pop	r17
   11108:	0f 91       	pop	r16
   1110a:	ff 90       	pop	r15
   1110c:	ef 90       	pop	r14
   1110e:	df 90       	pop	r13
   11110:	cf 90       	pop	r12
   11112:	bf 90       	pop	r11
   11114:	af 90       	pop	r10
   11116:	9f 90       	pop	r9
   11118:	8f 90       	pop	r8
   1111a:	6f 90       	pop	r6
   1111c:	5f 90       	pop	r5
   1111e:	4f 90       	pop	r4
   11120:	3f 90       	pop	r3
   11122:	2f 90       	pop	r2
   11124:	08 95       	ret

00011126 <logfile>:
/// @param[in] name: name of file to create.
/// @param[in] str: string containing file contents.
/// @return  size of string, or 0 on error
MEMSPACE
long logfile(char *name, char *str)
{
   11126:	cf 92       	push	r12
   11128:	df 92       	push	r13
   1112a:	ef 92       	push	r14
   1112c:	ff 92       	push	r15
   1112e:	cf 93       	push	r28
   11130:	df 93       	push	r29
   11132:	f8 2e       	mov	r15, r24
   11134:	e9 2e       	mov	r14, r25
   11136:	eb 01       	movw	r28, r22
    long size = 0;
    FILE *fo;

    fo = fopen(name,"ab");
   11138:	66 ed       	ldi	r22, 0xD6	; 214
   1113a:	78 e0       	ldi	r23, 0x08	; 8
   1113c:	3e db       	rcall	.-2436   	; 0x107ba <fopen>
    if (fo)
   1113e:	89 2b       	or	r24, r25
   11140:	79 f0       	breq	.+30     	; 0x11160 <logfile+0x3a>
    {
        printf("Can't open: %s\n", name);
   11142:	ef 92       	push	r14
   11144:	ff 92       	push	r15
   11146:	8c ec       	ldi	r24, 0xCC	; 204
   11148:	9c e0       	ldi	r25, 0x0C	; 12
   1114a:	1f 92       	push	r1
   1114c:	9f 93       	push	r25
   1114e:	8f 93       	push	r24
   11150:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        return(0);
   11154:	0f 90       	pop	r0
   11156:	0f 90       	pop	r0
   11158:	0f 90       	pop	r0
   1115a:	0f 90       	pop	r0
   1115c:	0f 90       	pop	r0
   1115e:	22 c0       	rjmp	.+68     	; 0x111a4 <logfile+0x7e>
    }

    size = strlen(str);
   11160:	fe 01       	movw	r30, r28
   11162:	01 90       	ld	r0, Z+
   11164:	00 20       	and	r0, r0
   11166:	e9 f7       	brne	.-6      	; 0x11162 <logfile+0x3c>
   11168:	31 97       	sbiw	r30, 0x01	; 1
   1116a:	af 01       	movw	r20, r30
   1116c:	4c 1b       	sub	r20, r28
   1116e:	5d 0b       	sbc	r21, r29
   11170:	6a 01       	movw	r12, r20
   11172:	e1 2c       	mov	r14, r1
   11174:	f1 2c       	mov	r15, r1
    if( fwrite(str, 1, size, fo) < size)
   11176:	20 e0       	ldi	r18, 0x00	; 0
   11178:	30 e0       	ldi	r19, 0x00	; 0
   1117a:	61 e0       	ldi	r22, 0x01	; 1
   1117c:	70 e0       	ldi	r23, 0x00	; 0
   1117e:	ce 01       	movw	r24, r28
   11180:	44 d9       	rcall	.-3448   	; 0x1040a <fwrite>
   11182:	a0 e0       	ldi	r26, 0x00	; 0
   11184:	b0 e0       	ldi	r27, 0x00	; 0
   11186:	8c 15       	cp	r24, r12
   11188:	9d 05       	cpc	r25, r13
   1118a:	ae 05       	cpc	r26, r14
   1118c:	bf 05       	cpc	r27, r15
   1118e:	7c f4       	brge	.+30     	; 0x111ae <logfile+0x88>
    {
        printf("Write error\n");
   11190:	8f eb       	ldi	r24, 0xBF	; 191
   11192:	9c e0       	ldi	r25, 0x0C	; 12
   11194:	1f 92       	push	r1
   11196:	9f 93       	push	r25
   11198:	8f 93       	push	r24
   1119a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1119e:	0f 90       	pop	r0
   111a0:	0f 90       	pop	r0
   111a2:	0f 90       	pop	r0
   111a4:	60 e0       	ldi	r22, 0x00	; 0
   111a6:	70 e0       	ldi	r23, 0x00	; 0
   111a8:	80 e0       	ldi	r24, 0x00	; 0
   111aa:	90 e0       	ldi	r25, 0x00	; 0
        return(0);
    }
    fclose(fo);
   111ac:	05 c0       	rjmp	.+10     	; 0x111b8 <logfile+0x92>
   111ae:	80 e0       	ldi	r24, 0x00	; 0
   111b0:	90 e0       	ldi	r25, 0x00	; 0
    return(size);
   111b2:	ad d9       	rcall	.-3238   	; 0x1050e <fclose>
   111b4:	b6 01       	movw	r22, r12
}
   111b6:	c7 01       	movw	r24, r14
   111b8:	df 91       	pop	r29
   111ba:	cf 91       	pop	r28
   111bc:	ff 90       	pop	r15
   111be:	ef 90       	pop	r14
   111c0:	df 90       	pop	r13
   111c2:	cf 90       	pop	r12
   111c4:	08 95       	ret

000111c6 <sum>:
/// @brief sum of a file with 16bit hex and integer results
/// @param[in] *name: file to sum
/// @retrun void
MEMSPACE
uint16_t sum(char *name)
{
   111c6:	a0 e0       	ldi	r26, 0x00	; 0
   111c8:	b1 e0       	ldi	r27, 0x01	; 1
   111ca:	e9 ee       	ldi	r30, 0xE9	; 233
   111cc:	f8 e8       	ldi	r31, 0x88	; 136
   111ce:	0c 94 3e ec 	jmp	0x1d87c	; 0x1d87c <__prologue_saves__+0x14>
   111d2:	18 2f       	mov	r17, r24
   111d4:	09 2f       	mov	r16, r25
    FILE *fi;
    uint16_t sum;
    int i,len;
    uint8_t buffer[256];

    fi=fopen(name,"rb");
   111d6:	6a eb       	ldi	r22, 0xBA	; 186
   111d8:	78 e0       	ldi	r23, 0x08	; 8
   111da:	ef da       	rcall	.-2594   	; 0x107ba <fopen>
   111dc:	7c 01       	movw	r14, r24
    if(fi == NULL) 
   111de:	89 2b       	or	r24, r25
   111e0:	89 f4       	brne	.+34     	; 0x11204 <sum+0x3e>
    {
        printf("Can' open: %s\n", name);
   111e2:	0f 93       	push	r16
   111e4:	1f 93       	push	r17
   111e6:	80 eb       	ldi	r24, 0xB0	; 176
   111e8:	9c e0       	ldi	r25, 0x0C	; 12
   111ea:	1f 92       	push	r1
   111ec:	9f 93       	push	r25
   111ee:	8f 93       	push	r24
   111f0:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   111f4:	0f 90       	pop	r0
   111f6:	0f 90       	pop	r0
   111f8:	0f 90       	pop	r0
   111fa:	0f 90       	pop	r0
   111fc:	0f 90       	pop	r0
   111fe:	80 e0       	ldi	r24, 0x00	; 0
   11200:	90 e0       	ldi	r25, 0x00	; 0
   11202:	2d c0       	rjmp	.+90     	; 0x1125e <sum+0x98>
   11204:	00 e0       	ldi	r16, 0x00	; 0
   11206:	10 e0       	ldi	r17, 0x00	; 0
        return(0);
    }
    sum = 0;
    while( (len = fread(buffer,1, 256, fi)) > 0) 
   11208:	ce 01       	movw	r24, r28
   1120a:	01 96       	adiw	r24, 0x01	; 1
   1120c:	6c 01       	movw	r12, r24
   1120e:	97 01       	movw	r18, r14
   11210:	40 e0       	ldi	r20, 0x00	; 0
   11212:	51 e0       	ldi	r21, 0x01	; 1
   11214:	61 e0       	ldi	r22, 0x01	; 1
   11216:	70 e0       	ldi	r23, 0x00	; 0
   11218:	c6 01       	movw	r24, r12
   1121a:	25 d8       	rcall	.-4022   	; 0x10266 <fread>
   1121c:	18 16       	cp	r1, r24
   1121e:	19 06       	cpc	r1, r25
   11220:	5c f4       	brge	.+22     	; 0x11238 <sum+0x72>
   11222:	f6 01       	movw	r30, r12
    {
        for(i=0;i<len;++i) 
            sum += (0xff & buffer[i]);
   11224:	21 91       	ld	r18, Z+
   11226:	02 0f       	add	r16, r18
   11228:	11 1d       	adc	r17, r1
        return(0);
    }
    sum = 0;
    while( (len = fread(buffer,1, 256, fi)) > 0) 
    {
        for(i=0;i<len;++i) 
   1122a:	9f 01       	movw	r18, r30
   1122c:	2c 19       	sub	r18, r12
   1122e:	3d 09       	sbc	r19, r13
   11230:	28 17       	cp	r18, r24
   11232:	39 07       	cpc	r19, r25
   11234:	bc f3       	brlt	.-18     	; 0x11224 <sum+0x5e>
#ifdef ESP8266
            optimistic_yield(1000);
            wdt_reset();
#endif
    }
    fclose(fi);
   11236:	eb cf       	rjmp	.-42     	; 0x1120e <sum+0x48>
   11238:	c7 01       	movw	r24, r14
   1123a:	69 d9       	rcall	.-3374   	; 0x1050e <fclose>
    printf("Sum: %04Xh, %5u\n", (int) sum, (unsigned int) sum);
   1123c:	1f 93       	push	r17
   1123e:	0f 93       	push	r16
   11240:	1f 93       	push	r17
   11242:	0f 93       	push	r16
   11244:	8f e9       	ldi	r24, 0x9F	; 159
   11246:	9c e0       	ldi	r25, 0x0C	; 12
   11248:	1f 92       	push	r1
   1124a:	9f 93       	push	r25
   1124c:	8f 93       	push	r24
   1124e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    return(sum);
   11252:	0f b6       	in	r0, 0x3f	; 63
   11254:	f8 94       	cli
   11256:	de bf       	out	0x3e, r29	; 62
   11258:	0f be       	out	0x3f, r0	; 63
   1125a:	cd bf       	out	0x3d, r28	; 61
   1125c:	c8 01       	movw	r24, r16
}
   1125e:	d3 95       	inc	r29
   11260:	e8 e0       	ldi	r30, 0x08	; 8
   11262:	0c 94 5a ec 	jmp	0x1d8b4	; 0x1d8b4 <__epilogue_restores__+0x14>

00011266 <upload>:
/// First blank line exits capture
/// @param[in] *name: file to save on sdcard
/// @retrun void
MEMSPACE
long upload(char *name)
{
   11266:	a0 e0       	ldi	r26, 0x00	; 0
   11268:	b1 e0       	ldi	r27, 0x01	; 1
   1126a:	e9 e3       	ldi	r30, 0x39	; 57
   1126c:	f9 e8       	ldi	r31, 0x89	; 137
   1126e:	0c 94 3a ec 	jmp	0x1d874	; 0x1d874 <__prologue_saves__+0xc>
   11272:	18 2f       	mov	r17, r24
   11274:	09 2f       	mov	r16, r25
    int len,len2;
    long size = 0;
    FILE *fp;
    char buffer[256];

    fp = fopen(name, "wb");
   11276:	68 ec       	ldi	r22, 0xC8	; 200
   11278:	78 e0       	ldi	r23, 0x08	; 8
   1127a:	9f da       	rcall	.-2754   	; 0x107ba <fopen>
   1127c:	6c 01       	movw	r12, r24
    if( fp == NULL)
   1127e:	89 2b       	or	r24, r25
   11280:	39 f0       	breq	.+14     	; 0x11290 <upload+0x2a>
   11282:	81 2c       	mov	r8, r1
   11284:	91 2c       	mov	r9, r1
   11286:	54 01       	movw	r10, r8
        return(0);
    }

    while(1)
    {
        if(fgets(buffer,254,stdin) == NULL)
   11288:	ce 01       	movw	r24, r28
   1128a:	01 96       	adiw	r24, 0x01	; 1
   1128c:	7c 01       	movw	r14, r24
   1128e:	3c c0       	rjmp	.+120    	; 0x11308 <upload+0xa2>
    char buffer[256];

    fp = fopen(name, "wb");
    if( fp == NULL)
    {
        printf("Can' open: %s\n", name);
   11290:	0f 93       	push	r16
   11292:	1f 93       	push	r17
   11294:	80 e9       	ldi	r24, 0x90	; 144
   11296:	9c e0       	ldi	r25, 0x0C	; 12
   11298:	1f 92       	push	r1
   1129a:	9f 93       	push	r25
   1129c:	8f 93       	push	r24
   1129e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        return(0);
   112a2:	0f 90       	pop	r0
   112a4:	0f 90       	pop	r0
   112a6:	0f 90       	pop	r0
   112a8:	0f 90       	pop	r0
   112aa:	0f 90       	pop	r0
   112ac:	60 e0       	ldi	r22, 0x00	; 0
   112ae:	70 e0       	ldi	r23, 0x00	; 0
   112b0:	80 e0       	ldi	r24, 0x00	; 0
   112b2:	90 e0       	ldi	r25, 0x00	; 0
   112b4:	3a c0       	rjmp	.+116    	; 0x1132a <upload+0xc4>

    while(1)
    {
        if(fgets(buffer,254,stdin) == NULL)
            break;
        len = strlen(buffer);
   112b6:	f7 01       	movw	r30, r14
   112b8:	01 90       	ld	r0, Z+
   112ba:	00 20       	and	r0, r0
   112bc:	e9 f7       	brne	.-6      	; 0x112b8 <upload+0x52>
   112be:	31 97       	sbiw	r30, 0x01	; 1
   112c0:	ee 19       	sub	r30, r14
   112c2:	ff 09       	sbc	r31, r15
        if(len < 1)
   112c4:	1e 16       	cp	r1, r30
   112c6:	1f 06       	cpc	r1, r31
   112c8:	54 f5       	brge	.+84     	; 0x1131e <upload+0xb8>
            break;
        strcat(buffer,"\n");
   112ca:	68 e8       	ldi	r22, 0x88	; 136
   112cc:	77 e1       	ldi	r23, 0x17	; 23
   112ce:	c7 01       	movw	r24, r14
   112d0:	0e 94 3b 32 	call	0x6476	; 0x6476 <strcat>
        len = strlen(buffer);
   112d4:	f7 01       	movw	r30, r14
   112d6:	01 90       	ld	r0, Z+
   112d8:	00 20       	and	r0, r0
   112da:	e9 f7       	brne	.-6      	; 0x112d6 <upload+0x70>
   112dc:	31 97       	sbiw	r30, 0x01	; 1
   112de:	8f 01       	movw	r16, r30
   112e0:	0e 19       	sub	r16, r14
   112e2:	1f 09       	sbc	r17, r15
        len2 = fwrite(buffer, 1, len,fp);
   112e4:	96 01       	movw	r18, r12
   112e6:	a8 01       	movw	r20, r16
   112e8:	61 e0       	ldi	r22, 0x01	; 1
   112ea:	70 e0       	ldi	r23, 0x00	; 0
   112ec:	c7 01       	movw	r24, r14
   112ee:	8d d8       	rcall	.-3814   	; 0x1040a <fwrite>
        if(len != len2)
   112f0:	08 17       	cp	r16, r24
   112f2:	19 07       	cpc	r17, r25
   112f4:	a1 f4       	brne	.+40     	; 0x1131e <upload+0xb8>
            break;
        size += len;
   112f6:	a8 01       	movw	r20, r16
   112f8:	01 2e       	mov	r0, r17
   112fa:	00 0c       	add	r0, r0
   112fc:	66 0b       	sbc	r22, r22
   112fe:	77 0b       	sbc	r23, r23
   11300:	84 0e       	add	r8, r20
   11302:	95 1e       	adc	r9, r21
   11304:	a6 1e       	adc	r10, r22
   11306:	b7 1e       	adc	r11, r23
        return(0);
    }

    while(1)
    {
        if(fgets(buffer,254,stdin) == NULL)
   11308:	40 91 1a 1d 	lds	r20, 0x1D1A	; 0x801d1a <__iob>
   1130c:	50 91 1b 1d 	lds	r21, 0x1D1B	; 0x801d1b <__iob+0x1>
   11310:	6e ef       	ldi	r22, 0xFE	; 254
   11312:	70 e0       	ldi	r23, 0x00	; 0
   11314:	c7 01       	movw	r24, r14
   11316:	0e 94 ed 7a 	call	0xf5da	; 0xf5da <fgets>
   1131a:	89 2b       	or	r24, r25
        if(len != len2)
            break;
        size += len;
    }

    fclose(fp);
   1131c:	61 f6       	brne	.-104    	; 0x112b6 <upload+0x50>
   1131e:	c6 01       	movw	r24, r12
   11320:	f6 d8       	rcall	.-3604   	; 0x1050e <fclose>
    sync();
   11322:	0e 94 82 81 	call	0x10304	; 0x10304 <sync>
    return(size);
   11326:	b4 01       	movw	r22, r8
   11328:	c5 01       	movw	r24, r10
}
   1132a:	d3 95       	inc	r29
   1132c:	ec e0       	ldi	r30, 0x0C	; 12
   1132e:	0c 94 56 ec 	jmp	0x1d8ac	; 0x1d8ac <__epilogue_restores__+0xc>

00011332 <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   11332:	a0 e0       	ldi	r26, 0x00	; 0
   11334:	b1 e0       	ldi	r27, 0x01	; 1
   11336:	ef e9       	ldi	r30, 0x9F	; 159
   11338:	f9 e8       	ldi	r31, 0x89	; 137
   1133a:	0c 94 36 ec 	jmp	0x1d86c	; 0x1d86c <__prologue_saves__+0x4>
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1133e:	fb 01       	movw	r30, r22
   11340:	c0 80       	ld	r12, Z
   11342:	d1 80       	ldd	r13, Z+1	; 0x01

    if(!ptr)
   11344:	c1 14       	cp	r12, r1
   11346:	d1 04       	cpc	r13, r1
   11348:	19 f4       	brne	.+6      	; 0x11350 <posix_tests+0x1e>
        return(0);
   1134a:	80 e0       	ldi	r24, 0x00	; 0
   1134c:	90 e0       	ldi	r25, 0x00	; 0
   1134e:	2d c2       	rjmp	.+1114   	; 0x117aa <posix_tests+0x478>
   11350:	4b 01       	movw	r8, r22
   11352:	8c 01       	movw	r16, r24

    if( MATCH(ptr,"posix") )
   11354:	66 e6       	ldi	r22, 0x66	; 102
   11356:	7b e0       	ldi	r23, 0x0B	; 11
   11358:	c6 01       	movw	r24, r12
   1135a:	0e 94 f5 32 	call	0x65ea	; 0x65ea <MATCH>
   1135e:	89 2b       	or	r24, r25
   11360:	a9 f0       	breq	.+42     	; 0x1138c <posix_tests+0x5a>
    {
        ptr = argv[ind++];
   11362:	f4 01       	movw	r30, r8
   11364:	c2 80       	ldd	r12, Z+2	; 0x02
   11366:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   11368:	c1 14       	cp	r12, r1
   1136a:	d1 04       	cpc	r13, r1
   1136c:	21 f4       	brne	.+8      	; 0x11376 <posix_tests+0x44>
        {
            posix_help(1);
   1136e:	81 e0       	ldi	r24, 0x01	; 1
   11370:	90 e0       	ldi	r25, 0x00	; 0
   11372:	50 da       	rcall	.-2912   	; 0x10814 <posix_help>
   11374:	18 c2       	rjmp	.+1072   	; 0x117a6 <posix_tests+0x474>
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   11376:	67 e7       	ldi	r22, 0x77	; 119
   11378:	76 e1       	ldi	r23, 0x16	; 22
   1137a:	c6 01       	movw	r24, r12
   1137c:	0e 94 f5 32 	call	0x65ea	; 0x65ea <MATCH>
   11380:	89 2b       	or	r24, r25
   11382:	a9 f7       	brne	.-22     	; 0x1136e <posix_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   11384:	f2 e0       	ldi	r31, 0x02	; 2
   11386:	6f 2e       	mov	r6, r31
   11388:	71 2c       	mov	r7, r1
   1138a:	03 c0       	rjmp	.+6      	; 0x11392 <posix_tests+0x60>
{
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   1138c:	66 24       	eor	r6, r6
   1138e:	63 94       	inc	r6
   11390:	71 2c       	mov	r7, r1
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   11392:	73 01       	movw	r14, r6
   11394:	ff ef       	ldi	r31, 0xFF	; 255
   11396:	ef 1a       	sub	r14, r31
   11398:	ff 0a       	sbc	r15, r31
   1139a:	98 01       	movw	r18, r16
   1139c:	a7 01       	movw	r20, r14
   1139e:	6c e6       	ldi	r22, 0x6C	; 108
   113a0:	7b e0       	ldi	r23, 0x0B	; 11
   113a2:	c6 01       	movw	r24, r12
   113a4:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   113a8:	89 2b       	or	r24, r25
   113aa:	a1 f1       	breq	.+104    	; 0x11414 <posix_tests+0xe2>
   113ac:	73 01       	movw	r14, r6
   113ae:	ee 0c       	add	r14, r14
   113b0:	ff 1c       	adc	r15, r15
   113b2:	e8 0c       	add	r14, r8
   113b4:	f9 1c       	adc	r15, r9
   113b6:	57 01       	movw	r10, r14
   113b8:	47 01       	movw	r8, r14
   113ba:	63 01       	movw	r12, r6
   113bc:	41 2c       	mov	r4, r1
   113be:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   113c0:	c0 16       	cp	r12, r16
   113c2:	d1 06       	cpc	r13, r17
   113c4:	1c f5       	brge	.+70     	; 0x1140c <posix_tests+0xda>
        {
            if(MATCH(argv[i],"-p"))
   113c6:	60 e7       	ldi	r22, 0x70	; 112
   113c8:	7b e0       	ldi	r23, 0x0B	; 11
   113ca:	f4 01       	movw	r30, r8
   113cc:	81 91       	ld	r24, Z+
   113ce:	91 91       	ld	r25, Z+
   113d0:	4f 01       	movw	r8, r30
   113d2:	0e 94 f5 32 	call	0x65ea	; 0x65ea <MATCH>
   113d6:	89 2b       	or	r24, r25
   113d8:	19 f0       	breq	.+6      	; 0x113e0 <posix_tests+0xae>
                page = 1;
   113da:	44 24       	eor	r4, r4
   113dc:	43 94       	inc	r4
   113de:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   113e0:	ff ef       	ldi	r31, 0xFF	; 255
   113e2:	cf 1a       	sub	r12, r31
   113e4:	df 0a       	sbc	r13, r31
   113e6:	ec cf       	rjmp	.-40     	; 0x113c0 <posix_tests+0x8e>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   113e8:	60 e7       	ldi	r22, 0x70	; 112
   113ea:	7b e0       	ldi	r23, 0x0B	; 11
   113ec:	f5 01       	movw	r30, r10
   113ee:	81 91       	ld	r24, Z+
   113f0:	91 91       	ld	r25, Z+
   113f2:	5f 01       	movw	r10, r30
   113f4:	0e 94 f5 32 	call	0x65ea	; 0x65ea <MATCH>
   113f8:	89 2b       	or	r24, r25
   113fa:	29 f4       	brne	.+10     	; 0x11406 <posix_tests+0xd4>
                cat(argv[ind], page);
   113fc:	b2 01       	movw	r22, r4
   113fe:	f7 01       	movw	r30, r14
   11400:	80 81       	ld	r24, Z
   11402:	91 81       	ldd	r25, Z+1	; 0x01
   11404:	36 db       	rcall	.-2452   	; 0x10a72 <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   11406:	ff ef       	ldi	r31, 0xFF	; 255
   11408:	6f 1a       	sub	r6, r31
   1140a:	7f 0a       	sbc	r7, r31
   1140c:	60 16       	cp	r6, r16
   1140e:	71 06       	cpc	r7, r17
   11410:	5c f3       	brlt	.-42     	; 0x113e8 <posix_tests+0xb6>
   11412:	c9 c1       	rjmp	.+914    	; 0x117a6 <posix_tests+0x474>
                cat(argv[ind], page);
        }
        return(1);
    }

    if (MATCHARGS(ptr,"chmod",(ind+2),argc))
   11414:	53 01       	movw	r10, r6
   11416:	82 e0       	ldi	r24, 0x02	; 2
   11418:	a8 0e       	add	r10, r24
   1141a:	b1 1c       	adc	r11, r1
   1141c:	98 01       	movw	r18, r16
   1141e:	a5 01       	movw	r20, r10
   11420:	63 e7       	ldi	r22, 0x73	; 115
   11422:	7b e0       	ldi	r23, 0x0B	; 11
   11424:	c6 01       	movw	r24, r12
   11426:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   1142a:	89 2b       	or	r24, r25
   1142c:	b1 f0       	breq	.+44     	; 0x1145a <posix_tests+0x128>
    {
        chmod( argv[ind],strtol(argv[ind+1],NULL,8));
   1142e:	ee 0c       	add	r14, r14
   11430:	ff 1c       	adc	r15, r15
   11432:	e8 0c       	add	r14, r8
   11434:	f9 1c       	adc	r15, r9
   11436:	48 e0       	ldi	r20, 0x08	; 8
   11438:	50 e0       	ldi	r21, 0x00	; 0
   1143a:	60 e0       	ldi	r22, 0x00	; 0
   1143c:	70 e0       	ldi	r23, 0x00	; 0
   1143e:	f7 01       	movw	r30, r14
   11440:	80 81       	ld	r24, Z
   11442:	91 81       	ldd	r25, Z+1	; 0x01
   11444:	0e 94 08 47 	call	0x8e10	; 0x8e10 <strtol>
   11448:	ab 01       	movw	r20, r22
   1144a:	bc 01       	movw	r22, r24
   1144c:	f7 01       	movw	r30, r14
   1144e:	32 97       	sbiw	r30, 0x02	; 2
   11450:	80 81       	ld	r24, Z
   11452:	91 81       	ldd	r25, Z+1	; 0x01
   11454:	0e 94 80 7c 	call	0xf900	; 0xf900 <chmod>
   11458:	a6 c1       	rjmp	.+844    	; 0x117a6 <posix_tests+0x474>
        return(1);
    }


    if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   1145a:	98 01       	movw	r18, r16
   1145c:	a5 01       	movw	r20, r10
   1145e:	69 e7       	ldi	r22, 0x79	; 121
   11460:	7b e0       	ldi	r23, 0x0B	; 11
   11462:	c6 01       	movw	r24, r12
   11464:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   11468:	89 2b       	or	r24, r25
   1146a:	61 f0       	breq	.+24     	; 0x11484 <posix_tests+0x152>
    {
        copy(argv[ind],argv[ind+1]);
   1146c:	ee 0c       	add	r14, r14
   1146e:	ff 1c       	adc	r15, r15
   11470:	f4 01       	movw	r30, r8
   11472:	ee 0d       	add	r30, r14
   11474:	ff 1d       	adc	r31, r15
   11476:	60 81       	ld	r22, Z
   11478:	71 81       	ldd	r23, Z+1	; 0x01
   1147a:	32 97       	sbiw	r30, 0x02	; 2
   1147c:	80 81       	ld	r24, Z
   1147e:	91 81       	ldd	r25, Z+1	; 0x01
   11480:	e5 d9       	rcall	.-3126   	; 0x1084c <copy>
   11482:	91 c1       	rjmp	.+802    	; 0x117a6 <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   11484:	98 01       	movw	r18, r16
   11486:	a7 01       	movw	r20, r14
   11488:	6e e7       	ldi	r22, 0x7E	; 126
   1148a:	7b e0       	ldi	r23, 0x0B	; 11
   1148c:	c6 01       	movw	r24, r12
   1148e:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   11492:	89 2b       	or	r24, r25
   11494:	59 f0       	breq	.+22     	; 0x114ac <posix_tests+0x17a>
    {
        chdir(argv[ind]);
   11496:	73 01       	movw	r14, r6
   11498:	ee 0c       	add	r14, r14
   1149a:	ff 1c       	adc	r15, r15
   1149c:	f4 01       	movw	r30, r8
   1149e:	ee 0d       	add	r30, r14
   114a0:	ff 1d       	adc	r31, r15
   114a2:	80 81       	ld	r24, Z
   114a4:	91 81       	ldd	r25, Z+1	; 0x01
   114a6:	0e 94 61 7c 	call	0xf8c2	; 0xf8c2 <chdir>
   114aa:	7d c1       	rjmp	.+762    	; 0x117a6 <posix_tests+0x474>
        return(1);
    }


    if (MATCHARGS(ptr,"hexdump", (ind + 1), argc))
   114ac:	98 01       	movw	r18, r16
   114ae:	a7 01       	movw	r20, r14
   114b0:	61 e8       	ldi	r22, 0x81	; 129
   114b2:	7b e0       	ldi	r23, 0x0B	; 11
   114b4:	c6 01       	movw	r24, r12
   114b6:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   114ba:	89 2b       	or	r24, r25
   114bc:	a1 f1       	breq	.+104    	; 0x11526 <posix_tests+0x1f4>
   114be:	73 01       	movw	r14, r6
   114c0:	ee 0c       	add	r14, r14
   114c2:	ff 1c       	adc	r15, r15
   114c4:	e8 0c       	add	r14, r8
   114c6:	f9 1c       	adc	r15, r9
   114c8:	57 01       	movw	r10, r14
   114ca:	47 01       	movw	r8, r14
   114cc:	63 01       	movw	r12, r6
   114ce:	41 2c       	mov	r4, r1
   114d0:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   114d2:	c0 16       	cp	r12, r16
   114d4:	d1 06       	cpc	r13, r17
   114d6:	1c f5       	brge	.+70     	; 0x1151e <posix_tests+0x1ec>
        {
            if(MATCH(argv[i],"-p"))
   114d8:	60 e7       	ldi	r22, 0x70	; 112
   114da:	7b e0       	ldi	r23, 0x0B	; 11
   114dc:	f4 01       	movw	r30, r8
   114de:	81 91       	ld	r24, Z+
   114e0:	91 91       	ld	r25, Z+
   114e2:	4f 01       	movw	r8, r30
   114e4:	0e 94 f5 32 	call	0x65ea	; 0x65ea <MATCH>
   114e8:	89 2b       	or	r24, r25
   114ea:	19 f0       	breq	.+6      	; 0x114f2 <posix_tests+0x1c0>
                page = 1;
   114ec:	44 24       	eor	r4, r4
   114ee:	43 94       	inc	r4
   114f0:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"hexdump", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   114f2:	ff ef       	ldi	r31, 0xFF	; 255
   114f4:	cf 1a       	sub	r12, r31
   114f6:	df 0a       	sbc	r13, r31
   114f8:	ec cf       	rjmp	.-40     	; 0x114d2 <posix_tests+0x1a0>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   114fa:	60 e7       	ldi	r22, 0x70	; 112
   114fc:	7b e0       	ldi	r23, 0x0B	; 11
   114fe:	f5 01       	movw	r30, r10
   11500:	81 91       	ld	r24, Z+
   11502:	91 91       	ld	r25, Z+
   11504:	5f 01       	movw	r10, r30
   11506:	0e 94 f5 32 	call	0x65ea	; 0x65ea <MATCH>
   1150a:	89 2b       	or	r24, r25
   1150c:	29 f4       	brne	.+10     	; 0x11518 <posix_tests+0x1e6>
                hexdump(argv[ind], page);
   1150e:	b2 01       	movw	r22, r4
   11510:	f7 01       	movw	r30, r14
   11512:	80 81       	ld	r24, Z
   11514:	91 81       	ldd	r25, Z+1	; 0x01
   11516:	1a db       	rcall	.-2508   	; 0x10b4c <hexdump>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   11518:	ff ef       	ldi	r31, 0xFF	; 255
   1151a:	6f 1a       	sub	r6, r31
   1151c:	7f 0a       	sbc	r7, r31
   1151e:	60 16       	cp	r6, r16
   11520:	71 06       	cpc	r7, r17
   11522:	5c f3       	brlt	.-42     	; 0x114fa <posix_tests+0x1c8>
   11524:	40 c1       	rjmp	.+640    	; 0x117a6 <posix_tests+0x474>
                hexdump(argv[ind], page);
        }
        return(1);
    }

    if (MATCHARGS(ptr,"log", (ind + 2), argc))
   11526:	98 01       	movw	r18, r16
   11528:	a5 01       	movw	r20, r10
   1152a:	69 e8       	ldi	r22, 0x89	; 137
   1152c:	7b e0       	ldi	r23, 0x0B	; 11
   1152e:	c6 01       	movw	r24, r12
   11530:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   11534:	89 2b       	or	r24, r25
   11536:	61 f0       	breq	.+24     	; 0x11550 <posix_tests+0x21e>
    {
        logfile(argv[ind],argv[ind+1]);
   11538:	ee 0c       	add	r14, r14
   1153a:	ff 1c       	adc	r15, r15
   1153c:	f4 01       	movw	r30, r8
   1153e:	ee 0d       	add	r30, r14
   11540:	ff 1d       	adc	r31, r15
   11542:	60 81       	ld	r22, Z
   11544:	71 81       	ldd	r23, Z+1	; 0x01
   11546:	32 97       	sbiw	r30, 0x02	; 2
   11548:	80 81       	ld	r24, Z
   1154a:	91 81       	ldd	r25, Z+1	; 0x01
   1154c:	ec dd       	rcall	.-1064   	; 0x11126 <logfile>
   1154e:	2b c1       	rjmp	.+598    	; 0x117a6 <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
   11550:	98 01       	movw	r18, r16
   11552:	a3 01       	movw	r20, r6
   11554:	66 e9       	ldi	r22, 0x96	; 150
   11556:	78 e0       	ldi	r23, 0x08	; 8
   11558:	c6 01       	movw	r24, r12
   1155a:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   1155e:	89 2b       	or	r24, r25
   11560:	69 f1       	breq	.+90     	; 0x115bc <posix_tests+0x28a>
   11562:	73 01       	movw	r14, r6
   11564:	ee 0c       	add	r14, r14
   11566:	ff 1c       	adc	r15, r15
   11568:	e8 0c       	add	r14, r8
   1156a:	f9 1c       	adc	r15, r9
   1156c:	c1 2c       	mov	r12, r1
   1156e:	d1 2c       	mov	r13, r1
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   11570:	c6 01       	movw	r24, r12
   11572:	86 0d       	add	r24, r6
   11574:	97 1d       	adc	r25, r7
   11576:	80 17       	cp	r24, r16
   11578:	91 07       	cpc	r25, r17
   1157a:	b4 f4       	brge	.+44     	; 0x115a8 <posix_tests+0x276>
        {
            if(!MATCH(argv[i],"-l"))
   1157c:	6d e8       	ldi	r22, 0x8D	; 141
   1157e:	7b e0       	ldi	r23, 0x0B	; 11
   11580:	f7 01       	movw	r30, r14
   11582:	80 81       	ld	r24, Z
   11584:	91 81       	ldd	r25, Z+1	; 0x01
   11586:	0e 94 f5 32 	call	0x65ea	; 0x65ea <MATCH>
   1158a:	89 2b       	or	r24, r25
   1158c:	31 f4       	brne	.+12     	; 0x1159a <posix_tests+0x268>
                ls(argv[i],1);
   1158e:	61 e0       	ldi	r22, 0x01	; 1
   11590:	70 e0       	ldi	r23, 0x00	; 0
   11592:	f7 01       	movw	r30, r14
   11594:	80 81       	ld	r24, Z
   11596:	91 81       	ldd	r25, Z+1	; 0x01
   11598:	aa dc       	rcall	.-1708   	; 0x10eee <ls>
            ++args;
   1159a:	ff ef       	ldi	r31, 0xFF	; 255
   1159c:	cf 1a       	sub	r12, r31
   1159e:	df 0a       	sbc	r13, r31
   115a0:	82 e0       	ldi	r24, 0x02	; 2
   115a2:	e8 0e       	add	r14, r24
   115a4:	f1 1c       	adc	r15, r1
   115a6:	e4 cf       	rjmp	.-56     	; 0x11570 <posix_tests+0x23e>
        }
        if(!args)
   115a8:	c1 14       	cp	r12, r1
   115aa:	d1 04       	cpc	r13, r1
   115ac:	09 f0       	breq	.+2      	; 0x115b0 <posix_tests+0x27e>
        {
            ls("",1);
   115ae:	fb c0       	rjmp	.+502    	; 0x117a6 <posix_tests+0x474>
   115b0:	61 e0       	ldi	r22, 0x01	; 1
   115b2:	70 e0       	ldi	r23, 0x00	; 0
   115b4:	89 e8       	ldi	r24, 0x89	; 137
   115b6:	97 e1       	ldi	r25, 0x17	; 23
   115b8:	9a dc       	rcall	.-1740   	; 0x10eee <ls>
   115ba:	f5 c0       	rjmp	.+490    	; 0x117a6 <posix_tests+0x474>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mkfs", (ind + 1), argc))
   115bc:	98 01       	movw	r18, r16
   115be:	a7 01       	movw	r20, r14
   115c0:	60 e9       	ldi	r22, 0x90	; 144
   115c2:	7b e0       	ldi	r23, 0x0B	; 11
   115c4:	c6 01       	movw	r24, r12
   115c6:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   115ca:	89 2b       	or	r24, r25
   115cc:	59 f0       	breq	.+22     	; 0x115e4 <posix_tests+0x2b2>
    {

        mkfs(argv[ind++]);
   115ce:	73 01       	movw	r14, r6
   115d0:	ee 0c       	add	r14, r14
   115d2:	ff 1c       	adc	r15, r15
   115d4:	f4 01       	movw	r30, r8
   115d6:	ee 0d       	add	r30, r14
   115d8:	ff 1d       	adc	r31, r15
   115da:	80 81       	ld	r24, Z
   115dc:	91 81       	ldd	r25, Z+1	; 0x01
   115de:	0e 94 39 7e 	call	0xfc72	; 0xfc72 <mkfs>
   115e2:	e1 c0       	rjmp	.+450    	; 0x117a6 <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   115e4:	98 01       	movw	r18, r16
   115e6:	a7 01       	movw	r20, r14
   115e8:	65 e9       	ldi	r22, 0x95	; 149
   115ea:	7b e0       	ldi	r23, 0x0B	; 11
   115ec:	c6 01       	movw	r24, r12
   115ee:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   115f2:	89 2b       	or	r24, r25
   115f4:	19 f1       	breq	.+70     	; 0x1163c <posix_tests+0x30a>
    {
        int mode = 0777;
        if((ind+2) <= argc)
   115f6:	e0 16       	cp	r14, r16
   115f8:	f1 06       	cpc	r15, r17
   115fa:	7c f4       	brge	.+30     	; 0x1161a <posix_tests+0x2e8>
        {
            mode = strtol(argv[ind+1],NULL,8);
   115fc:	ee 0c       	add	r14, r14
   115fe:	ff 1c       	adc	r15, r15
   11600:	f4 01       	movw	r30, r8
   11602:	ee 0d       	add	r30, r14
   11604:	ff 1d       	adc	r31, r15
   11606:	48 e0       	ldi	r20, 0x08	; 8
   11608:	50 e0       	ldi	r21, 0x00	; 0
   1160a:	60 e0       	ldi	r22, 0x00	; 0
   1160c:	70 e0       	ldi	r23, 0x00	; 0
   1160e:	80 81       	ld	r24, Z
   11610:	91 81       	ldd	r25, Z+1	; 0x01
   11612:	0e 94 08 47 	call	0x8e10	; 0x8e10 <strtol>
   11616:	ab 01       	movw	r20, r22
   11618:	02 c0       	rjmp	.+4      	; 0x1161e <posix_tests+0x2ec>
        return(1);
    }

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   1161a:	4f ef       	ldi	r20, 0xFF	; 255
   1161c:	51 e0       	ldi	r21, 0x01	; 1
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        mkdir(argv[ind],mode);
   1161e:	05 2e       	mov	r0, r21
   11620:	00 0c       	add	r0, r0
   11622:	66 0b       	sbc	r22, r22
   11624:	77 0b       	sbc	r23, r23
   11626:	73 01       	movw	r14, r6
   11628:	ee 0c       	add	r14, r14
   1162a:	ff 1c       	adc	r15, r15
   1162c:	f4 01       	movw	r30, r8
   1162e:	ee 0d       	add	r30, r14
   11630:	ff 1d       	adc	r31, r15
   11632:	80 81       	ld	r24, Z
   11634:	91 81       	ldd	r25, Z+1	; 0x01
   11636:	0e 94 ce 7c 	call	0xf99c	; 0xf99c <mkdir>
   1163a:	b5 c0       	rjmp	.+362    	; 0x117a6 <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"page", (ind + 1), argc))
   1163c:	98 01       	movw	r18, r16
   1163e:	a7 01       	movw	r20, r14
   11640:	6b e9       	ldi	r22, 0x9B	; 155
   11642:	7b e0       	ldi	r23, 0x0B	; 11
   11644:	c6 01       	movw	r24, r12
   11646:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   1164a:	89 2b       	or	r24, r25
   1164c:	79 f0       	breq	.+30     	; 0x1166c <posix_tests+0x33a>
    {
        setpage(atoi(argv[ind]));
   1164e:	73 01       	movw	r14, r6
   11650:	ee 0c       	add	r14, r14
   11652:	ff 1c       	adc	r15, r15
   11654:	f4 01       	movw	r30, r8
   11656:	ee 0d       	add	r30, r14
   11658:	ff 1d       	adc	r31, r15
   1165a:	80 81       	ld	r24, Z
   1165c:	91 81       	ldd	r25, Z+1	; 0x01
   1165e:	0e 94 6c 47 	call	0x8ed8	; 0x8ed8 <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   11662:	90 93 88 01 	sts	0x0188, r25	; 0x800188 <_pagesize+0x1>
   11666:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <_pagesize>
   1166a:	9d c0       	rjmp	.+314    	; 0x117a6 <posix_tests+0x474>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   1166c:	98 01       	movw	r18, r16
   1166e:	a3 01       	movw	r20, r6
   11670:	60 ea       	ldi	r22, 0xA0	; 160
   11672:	7b e0       	ldi	r23, 0x0B	; 11
   11674:	c6 01       	movw	r24, r12
   11676:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   1167a:	89 2b       	or	r24, r25
   1167c:	a9 f0       	breq	.+42     	; 0x116a8 <posix_tests+0x376>
    {
        char path[256];
        printf("%s\n", getcwd(path, sizeof(path)-2));
   1167e:	6e ef       	ldi	r22, 0xFE	; 254
   11680:	70 e0       	ldi	r23, 0x00	; 0
   11682:	ce 01       	movw	r24, r28
   11684:	01 96       	adiw	r24, 0x01	; 1
   11686:	0e 94 a9 7c 	call	0xf952	; 0xf952 <getcwd>
   1168a:	9f 93       	push	r25
   1168c:	8f 93       	push	r24
   1168e:	84 e5       	ldi	r24, 0x54	; 84
   11690:	9e e0       	ldi	r25, 0x0E	; 14
   11692:	1f 92       	push	r1
   11694:	9f 93       	push	r25
   11696:	8f 93       	push	r24
   11698:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1169c:	0f 90       	pop	r0
   1169e:	0f 90       	pop	r0
   116a0:	0f 90       	pop	r0
   116a2:	0f 90       	pop	r0
   116a4:	0f 90       	pop	r0
   116a6:	7f c0       	rjmp	.+254    	; 0x117a6 <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   116a8:	98 01       	movw	r18, r16
   116aa:	a5 01       	movw	r20, r10
   116ac:	64 ea       	ldi	r22, 0xA4	; 164
   116ae:	7b e0       	ldi	r23, 0x0B	; 11
   116b0:	c6 01       	movw	r24, r12
   116b2:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   116b6:	89 2b       	or	r24, r25
   116b8:	69 f0       	breq	.+26     	; 0x116d4 <posix_tests+0x3a2>
    {
        rename(argv[ind],argv[ind+1]);
   116ba:	ee 0c       	add	r14, r14
   116bc:	ff 1c       	adc	r15, r15
   116be:	f4 01       	movw	r30, r8
   116c0:	ee 0d       	add	r30, r14
   116c2:	ff 1d       	adc	r31, r15
   116c4:	60 81       	ld	r22, Z
   116c6:	71 81       	ldd	r23, Z+1	; 0x01
   116c8:	32 97       	sbiw	r30, 0x02	; 2
   116ca:	80 81       	ld	r24, Z
   116cc:	91 81       	ldd	r25, Z+1	; 0x01
   116ce:	0e 94 fc 7c 	call	0xf9f8	; 0xf9f8 <rename>
   116d2:	69 c0       	rjmp	.+210    	; 0x117a6 <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   116d4:	98 01       	movw	r18, r16
   116d6:	a7 01       	movw	r20, r14
   116d8:	6b ea       	ldi	r22, 0xAB	; 171
   116da:	7b e0       	ldi	r23, 0x0B	; 11
   116dc:	c6 01       	movw	r24, r12
   116de:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   116e2:	89 2b       	or	r24, r25
   116e4:	59 f0       	breq	.+22     	; 0x116fc <posix_tests+0x3ca>
    {
        unlink(argv[ind]);
   116e6:	73 01       	movw	r14, r6
   116e8:	ee 0c       	add	r14, r14
   116ea:	ff 1c       	adc	r15, r15
   116ec:	f4 01       	movw	r30, r8
   116ee:	ee 0d       	add	r30, r14
   116f0:	ff 1d       	adc	r31, r15
   116f2:	80 81       	ld	r24, Z
   116f4:	91 81       	ldd	r25, Z+1	; 0x01
   116f6:	0e 94 1b 7d 	call	0xfa36	; 0xfa36 <unlink>
   116fa:	55 c0       	rjmp	.+170    	; 0x117a6 <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"sum", (ind + 1), argc))
   116fc:	98 01       	movw	r18, r16
   116fe:	a7 01       	movw	r20, r14
   11700:	6e ea       	ldi	r22, 0xAE	; 174
   11702:	7b e0       	ldi	r23, 0x0B	; 11
   11704:	c6 01       	movw	r24, r12
   11706:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   1170a:	89 2b       	or	r24, r25
   1170c:	51 f0       	breq	.+20     	; 0x11722 <posix_tests+0x3f0>
    {
        sum(argv[ind]);
   1170e:	73 01       	movw	r14, r6
   11710:	ee 0c       	add	r14, r14
   11712:	ff 1c       	adc	r15, r15
   11714:	f4 01       	movw	r30, r8
   11716:	ee 0d       	add	r30, r14
   11718:	ff 1d       	adc	r31, r15
   1171a:	80 81       	ld	r24, Z
   1171c:	91 81       	ldd	r25, Z+1	; 0x01
   1171e:	53 dd       	rcall	.-1370   	; 0x111c6 <sum>
   11720:	42 c0       	rjmp	.+132    	; 0x117a6 <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"stat", (ind + 1), argc))
   11722:	98 01       	movw	r18, r16
   11724:	a7 01       	movw	r20, r14
   11726:	62 eb       	ldi	r22, 0xB2	; 178
   11728:	7b e0       	ldi	r23, 0x0B	; 11
   1172a:	c6 01       	movw	r24, r12
   1172c:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   11730:	89 2b       	or	r24, r25
   11732:	91 f0       	breq	.+36     	; 0x11758 <posix_tests+0x426>
    {
        struct stat p;  
        stat(argv[ind], &p);                        // POSIX test
   11734:	73 01       	movw	r14, r6
   11736:	ee 0c       	add	r14, r14
   11738:	ff 1c       	adc	r15, r15
   1173a:	f4 01       	movw	r30, r8
   1173c:	ee 0d       	add	r30, r14
   1173e:	ff 1d       	adc	r31, r15
   11740:	be 01       	movw	r22, r28
   11742:	6f 5f       	subi	r22, 0xFF	; 255
   11744:	7f 4f       	sbci	r23, 0xFF	; 255
   11746:	80 81       	ld	r24, Z
   11748:	91 81       	ldd	r25, Z+1	; 0x01
   1174a:	0e 94 f1 7e 	call	0xfde2	; 0xfde2 <stat>
        dump_stat(&p);
   1174e:	ce 01       	movw	r24, r28
   11750:	01 96       	adiw	r24, 0x01	; 1
   11752:	0e 94 a6 7b 	call	0xf74c	; 0xf74c <dump_stat>
   11756:	27 c0       	rjmp	.+78     	; 0x117a6 <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   11758:	98 01       	movw	r18, r16
   1175a:	a7 01       	movw	r20, r14
   1175c:	67 eb       	ldi	r22, 0xB7	; 183
   1175e:	7b e0       	ldi	r23, 0x0B	; 11
   11760:	c6 01       	movw	r24, r12
   11762:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   11766:	89 2b       	or	r24, r25
   11768:	59 f0       	breq	.+22     	; 0x11780 <posix_tests+0x44e>
    {
        rmdir(argv[ind]);
   1176a:	73 01       	movw	r14, r6
   1176c:	ee 0c       	add	r14, r14
   1176e:	ff 1c       	adc	r15, r15
   11770:	f4 01       	movw	r30, r8
   11772:	ee 0d       	add	r30, r14
   11774:	ff 1d       	adc	r31, r15
   11776:	80 81       	ld	r24, Z
   11778:	91 81       	ldd	r25, Z+1	; 0x01
   1177a:	0e 94 3a 7d 	call	0xfa74	; 0xfa74 <rmdir>
   1177e:	13 c0       	rjmp	.+38     	; 0x117a6 <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"upload", (ind + 1), argc))
   11780:	98 01       	movw	r18, r16
   11782:	a7 01       	movw	r20, r14
   11784:	6d eb       	ldi	r22, 0xBD	; 189
   11786:	7b e0       	ldi	r23, 0x0B	; 11
   11788:	c6 01       	movw	r24, r12
   1178a:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   1178e:	89 2b       	or	r24, r25
   11790:	09 f4       	brne	.+2      	; 0x11794 <posix_tests+0x462>
   11792:	db cd       	rjmp	.-1098   	; 0x1134a <posix_tests+0x18>
    {
        upload(argv[ind]);
   11794:	73 01       	movw	r14, r6
   11796:	ee 0c       	add	r14, r14
   11798:	ff 1c       	adc	r15, r15
   1179a:	f4 01       	movw	r30, r8
   1179c:	ee 0d       	add	r30, r14
   1179e:	ff 1d       	adc	r31, r15
   117a0:	80 81       	ld	r24, Z
   117a2:	91 81       	ldd	r25, Z+1	; 0x01
   117a4:	60 dd       	rcall	.-1344   	; 0x11266 <upload>
        return(1);
   117a6:	81 e0       	ldi	r24, 0x01	; 1
   117a8:	90 e0       	ldi	r25, 0x00	; 0
    }

    return(0);
}
   117aa:	d3 95       	inc	r29
   117ac:	e0 e1       	ldi	r30, 0x10	; 16
   117ae:	0c 94 52 ec 	jmp	0x1d8a4	; 0x1d8a4 <__epilogue_restores__+0x4>

000117b2 <gpib_timer_init>:
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   117b2:	61 e0       	ldi	r22, 0x01	; 1
   117b4:	70 e0       	ldi	r23, 0x00	; 0
   117b6:	86 e7       	ldi	r24, 0x76	; 118
   117b8:	9d e8       	ldi	r25, 0x8D	; 141
   117ba:	0e 94 4e 35 	call	0x6a9c	; 0x6a9c <set_timers>
   117be:	01 96       	adiw	r24, 0x01	; 1
   117c0:	51 f4       	brne	.+20     	; 0x117d6 <gpib_timer_init+0x24>
        printf("GPIB Clock task init failed\n");
   117c2:	85 ef       	ldi	r24, 0xF5	; 245
   117c4:	9f e0       	ldi	r25, 0x0F	; 15
   117c6:	1f 92       	push	r1
   117c8:	9f 93       	push	r25
   117ca:	8f 93       	push	r24
   117cc:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   117d0:	0f 90       	pop	r0
   117d2:	0f 90       	pop	r0

    gpib_timer_reset();
   117d4:	0f 90       	pop	r0
   117d6:	78 c1       	rjmp	.+752    	; 0x11ac8 <gpib_timer_reset>
   117d8:	08 95       	ret

000117da <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   117da:	28 2f       	mov	r18, r24
   117dc:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   117de:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   117e0:	88 0f       	add	r24, r24
        if(mask & 1)
   117e2:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   117e4:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   117e6:	26 95       	lsr	r18
   117e8:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   117ea:	d1 f7       	brne	.-12     	; 0x117e0 <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   117ec:	08 95       	ret

000117ee <ppr_set>:
   117ee:	f5 df       	rcall	.-22     	; 0x117da <reverse_8bits>
   117f0:	80 93 be 19 	sts	0x19BE, r24	; 0x8019be <_ppr_reg>
   117f4:	0e 94 27 2d 	call	0x5a4e	; 0x5a4e <SPI0_TXRX_Byte>
   117f8:	2a 9a       	sbi	0x05, 2	; 5
   117fa:	22 9a       	sbi	0x04, 2	; 4
   117fc:	2a 98       	cbi	0x05, 2	; 5
   117fe:	22 9a       	sbi	0x04, 2	; 4
   11800:	08 95       	ret

00011802 <ppr_reg>:
   11802:	80 91 be 19 	lds	r24, 0x19BE	; 0x8019be <_ppr_reg>
   11806:	e9 cf       	rjmp	.-46     	; 0x117da <reverse_8bits>
   11808:	08 95       	ret

0001180a <ppr_init>:
   1180a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1180e:	81 ff       	sbrs	r24, 1
   11810:	0a c0       	rjmp	.+20     	; 0x11826 <ppr_init+0x1c>
   11812:	82 ee       	ldi	r24, 0xE2	; 226
   11814:	9f e0       	ldi	r25, 0x0F	; 15
   11816:	1f 92       	push	r1
   11818:	9f 93       	push	r25
   1181a:	8f 93       	push	r24
   1181c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   11820:	0f 90       	pop	r0
   11822:	0f 90       	pop	r0
   11824:	0f 90       	pop	r0
   11826:	80 e0       	ldi	r24, 0x00	; 0
   11828:	e2 cf       	rjmp	.-60     	; 0x117ee <ppr_set>
   1182a:	08 95       	ret

0001182c <ppr_bit_set>:
   1182c:	21 e0       	ldi	r18, 0x01	; 1
   1182e:	30 e0       	ldi	r19, 0x00	; 0
   11830:	01 c0       	rjmp	.+2      	; 0x11834 <ppr_bit_set+0x8>
   11832:	22 0f       	add	r18, r18
   11834:	8a 95       	dec	r24
   11836:	ea f7       	brpl	.-6      	; 0x11832 <ppr_bit_set+0x6>
   11838:	80 91 be 19 	lds	r24, 0x19BE	; 0x8019be <_ppr_reg>
   1183c:	82 2b       	or	r24, r18
   1183e:	80 93 be 19 	sts	0x19BE, r24	; 0x8019be <_ppr_reg>
   11842:	d5 cf       	rjmp	.-86     	; 0x117ee <ppr_set>
   11844:	08 95       	ret

00011846 <ppr_bit_clr>:
   11846:	21 e0       	ldi	r18, 0x01	; 1
   11848:	30 e0       	ldi	r19, 0x00	; 0
   1184a:	01 c0       	rjmp	.+2      	; 0x1184e <ppr_bit_clr+0x8>
   1184c:	22 0f       	add	r18, r18
   1184e:	8a 95       	dec	r24
   11850:	ea f7       	brpl	.-6      	; 0x1184c <ppr_bit_clr+0x6>
   11852:	20 95       	com	r18
   11854:	80 91 be 19 	lds	r24, 0x19BE	; 0x8019be <_ppr_reg>
   11858:	82 23       	and	r24, r18
   1185a:	80 93 be 19 	sts	0x19BE, r24	; 0x8019be <_ppr_reg>
   1185e:	c7 cf       	rjmp	.-114    	; 0x117ee <ppr_set>
   11860:	08 95       	ret

00011862 <dbf_open>:
   11862:	0f 93       	push	r16
   11864:	1f 93       	push	r17
   11866:	cf 93       	push	r28
   11868:	df 93       	push	r29
   1186a:	16 2f       	mov	r17, r22
   1186c:	07 2f       	mov	r16, r23
   1186e:	0e 94 b5 58 	call	0xb16a	; 0xb16a <f_open>
   11872:	ec 01       	movw	r28, r24
   11874:	89 2b       	or	r24, r25
   11876:	89 f0       	breq	.+34     	; 0x1189a <dbf_open+0x38>
   11878:	0f 93       	push	r16
   1187a:	1f 93       	push	r17
   1187c:	81 ed       	ldi	r24, 0xD1	; 209
   1187e:	9f e0       	ldi	r25, 0x0F	; 15
   11880:	1f 92       	push	r1
   11882:	9f 93       	push	r25
   11884:	8f 93       	push	r24
   11886:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1188a:	ce 01       	movw	r24, r28
   1188c:	0e 94 41 75 	call	0xea82	; 0xea82 <put_rc>
   11890:	0f 90       	pop	r0
   11892:	0f 90       	pop	r0
   11894:	0f 90       	pop	r0
   11896:	0f 90       	pop	r0
   11898:	0f 90       	pop	r0
   1189a:	ce 01       	movw	r24, r28
   1189c:	df 91       	pop	r29
   1189e:	cf 91       	pop	r28
   118a0:	1f 91       	pop	r17
   118a2:	0f 91       	pop	r16
   118a4:	08 95       	ret

000118a6 <dbf_read>:
   118a6:	cf 93       	push	r28
   118a8:	df 93       	push	r29
   118aa:	0e 94 b1 5a 	call	0xb562	; 0xb562 <f_read>
   118ae:	ec 01       	movw	r28, r24
   118b0:	89 2b       	or	r24, r25
   118b2:	69 f0       	breq	.+26     	; 0x118ce <dbf_read+0x28>
   118b4:	84 ec       	ldi	r24, 0xC4	; 196
   118b6:	9f e0       	ldi	r25, 0x0F	; 15
   118b8:	1f 92       	push	r1
   118ba:	9f 93       	push	r25
   118bc:	8f 93       	push	r24
   118be:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   118c2:	ce 01       	movw	r24, r28
   118c4:	0e 94 41 75 	call	0xea82	; 0xea82 <put_rc>
   118c8:	0f 90       	pop	r0
   118ca:	0f 90       	pop	r0
   118cc:	0f 90       	pop	r0
   118ce:	ce 01       	movw	r24, r28
   118d0:	df 91       	pop	r29
   118d2:	cf 91       	pop	r28
   118d4:	08 95       	ret

000118d6 <dbf_write>:
   118d6:	cf 93       	push	r28
   118d8:	df 93       	push	r29
   118da:	0e 94 fc 5b 	call	0xb7f8	; 0xb7f8 <f_write>
   118de:	ec 01       	movw	r28, r24
   118e0:	89 2b       	or	r24, r25
   118e2:	69 f0       	breq	.+26     	; 0x118fe <dbf_write+0x28>
   118e4:	86 eb       	ldi	r24, 0xB6	; 182
   118e6:	9f e0       	ldi	r25, 0x0F	; 15
   118e8:	1f 92       	push	r1
   118ea:	9f 93       	push	r25
   118ec:	8f 93       	push	r24
   118ee:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   118f2:	ce 01       	movw	r24, r28
   118f4:	0e 94 41 75 	call	0xea82	; 0xea82 <put_rc>
   118f8:	0f 90       	pop	r0
   118fa:	0f 90       	pop	r0
   118fc:	0f 90       	pop	r0
   118fe:	ce 01       	movw	r24, r28
   11900:	df 91       	pop	r29
   11902:	cf 91       	pop	r28
   11904:	08 95       	ret

00011906 <dbf_lseek>:
   11906:	cf 93       	push	r28
   11908:	df 93       	push	r29
   1190a:	0e 94 bb 5f 	call	0xbf76	; 0xbf76 <f_lseek>
   1190e:	ec 01       	movw	r28, r24
   11910:	89 2b       	or	r24, r25
   11912:	69 f0       	breq	.+26     	; 0x1192e <dbf_lseek+0x28>
   11914:	89 ea       	ldi	r24, 0xA9	; 169
   11916:	9f e0       	ldi	r25, 0x0F	; 15
   11918:	1f 92       	push	r1
   1191a:	9f 93       	push	r25
   1191c:	8f 93       	push	r24
   1191e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   11922:	ce 01       	movw	r24, r28
   11924:	0e 94 41 75 	call	0xea82	; 0xea82 <put_rc>
   11928:	0f 90       	pop	r0
   1192a:	0f 90       	pop	r0
   1192c:	0f 90       	pop	r0
   1192e:	ce 01       	movw	r24, r28
   11930:	df 91       	pop	r29
   11932:	cf 91       	pop	r28
   11934:	08 95       	ret

00011936 <dbf_close>:
   11936:	cf 93       	push	r28
   11938:	df 93       	push	r29
   1193a:	0e 94 13 5e 	call	0xbc26	; 0xbc26 <f_close>
   1193e:	ec 01       	movw	r28, r24
   11940:	89 2b       	or	r24, r25
   11942:	69 f0       	breq	.+26     	; 0x1195e <dbf_close+0x28>
   11944:	8b e9       	ldi	r24, 0x9B	; 155
   11946:	9f e0       	ldi	r25, 0x0F	; 15
   11948:	1f 92       	push	r1
   1194a:	9f 93       	push	r25
   1194c:	8f 93       	push	r24
   1194e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   11952:	ce 01       	movw	r24, r28
   11954:	0e 94 41 75 	call	0xea82	; 0xea82 <put_rc>
   11958:	0f 90       	pop	r0
   1195a:	0f 90       	pop	r0
   1195c:	0f 90       	pop	r0
   1195e:	ce 01       	movw	r24, r28
   11960:	df 91       	pop	r29
   11962:	cf 91       	pop	r28
   11964:	08 95       	ret

00011966 <dbf_open_read>:
   11966:	a6 e2       	ldi	r26, 0x26	; 38
   11968:	b2 e0       	ldi	r27, 0x02	; 2
   1196a:	e9 eb       	ldi	r30, 0xB9	; 185
   1196c:	fc e8       	ldi	r31, 0x8C	; 140
   1196e:	0c 94 3a ec 	jmp	0x1d874	; 0x1d874 <__prologue_saves__+0xc>
   11972:	4a 01       	movw	r8, r20
   11974:	5b 01       	movw	r10, r22
   11976:	69 01       	movw	r12, r18
   11978:	cb 5d       	subi	r28, 0xDB	; 219
   1197a:	dd 4f       	sbci	r29, 0xFD	; 253
   1197c:	19 82       	std	Y+1, r1	; 0x01
   1197e:	18 82       	st	Y, r1
   11980:	c5 52       	subi	r28, 0x25	; 37
   11982:	d2 40       	sbci	r29, 0x02	; 2
   11984:	43 e0       	ldi	r20, 0x03	; 3
   11986:	bc 01       	movw	r22, r24
   11988:	ce 01       	movw	r24, r28
   1198a:	01 96       	adiw	r24, 0x01	; 1
   1198c:	6a df       	rcall	.-300    	; 0x11862 <dbf_open>
   1198e:	89 2b       	or	r24, r25
   11990:	19 f0       	breq	.+6      	; 0x11998 <dbf_open_read+0x32>
   11992:	81 e1       	ldi	r24, 0x11	; 17
   11994:	90 e0       	ldi	r25, 0x00	; 0
   11996:	2f c0       	rjmp	.+94     	; 0x119f6 <dbf_open_read+0x90>
   11998:	b5 01       	movw	r22, r10
   1199a:	a4 01       	movw	r20, r8
   1199c:	ce 01       	movw	r24, r28
   1199e:	01 96       	adiw	r24, 0x01	; 1
   119a0:	b2 df       	rcall	.-156    	; 0x11906 <dbf_lseek>
   119a2:	89 2b       	or	r24, r25
   119a4:	59 f0       	breq	.+22     	; 0x119bc <dbf_open_read+0x56>
   119a6:	85 e0       	ldi	r24, 0x05	; 5
   119a8:	90 e0       	ldi	r25, 0x00	; 0
   119aa:	f7 01       	movw	r30, r14
   119ac:	91 83       	std	Z+1, r25	; 0x01
   119ae:	80 83       	st	Z, r24
   119b0:	ce 01       	movw	r24, r28
   119b2:	01 96       	adiw	r24, 0x01	; 1
   119b4:	c0 df       	rcall	.-128    	; 0x11936 <dbf_close>
   119b6:	8f ef       	ldi	r24, 0xFF	; 255
   119b8:	9f ef       	ldi	r25, 0xFF	; 255
   119ba:	27 c0       	rjmp	.+78     	; 0x11a0a <dbf_open_read+0xa4>
   119bc:	9e 01       	movw	r18, r28
   119be:	2b 5d       	subi	r18, 0xDB	; 219
   119c0:	3d 4f       	sbci	r19, 0xFD	; 253
   119c2:	a8 01       	movw	r20, r16
   119c4:	b6 01       	movw	r22, r12
   119c6:	ce 01       	movw	r24, r28
   119c8:	01 96       	adiw	r24, 0x01	; 1
   119ca:	6d df       	rcall	.-294    	; 0x118a6 <dbf_read>
   119cc:	89 2b       	or	r24, r25
   119ce:	49 f4       	brne	.+18     	; 0x119e2 <dbf_open_read+0x7c>
   119d0:	cb 5d       	subi	r28, 0xDB	; 219
   119d2:	dd 4f       	sbci	r29, 0xFD	; 253
   119d4:	88 81       	ld	r24, Y
   119d6:	99 81       	ldd	r25, Y+1	; 0x01
   119d8:	c5 52       	subi	r28, 0x25	; 37
   119da:	d2 40       	sbci	r29, 0x02	; 2
   119dc:	08 17       	cp	r16, r24
   119de:	19 07       	cpc	r17, r25
   119e0:	19 f0       	breq	.+6      	; 0x119e8 <dbf_open_read+0x82>
   119e2:	81 e0       	ldi	r24, 0x01	; 1
   119e4:	90 e0       	ldi	r25, 0x00	; 0
   119e6:	e1 cf       	rjmp	.-62     	; 0x119aa <dbf_open_read+0x44>
   119e8:	ce 01       	movw	r24, r28
   119ea:	01 96       	adiw	r24, 0x01	; 1
   119ec:	a4 df       	rcall	.-184    	; 0x11936 <dbf_close>
   119ee:	89 2b       	or	r24, r25
   119f0:	31 f0       	breq	.+12     	; 0x119fe <dbf_open_read+0x98>
   119f2:	80 e1       	ldi	r24, 0x10	; 16
   119f4:	90 e0       	ldi	r25, 0x00	; 0
   119f6:	f7 01       	movw	r30, r14
   119f8:	91 83       	std	Z+1, r25	; 0x01
   119fa:	80 83       	st	Z, r24
   119fc:	dc cf       	rjmp	.-72     	; 0x119b6 <dbf_open_read+0x50>
   119fe:	cb 5d       	subi	r28, 0xDB	; 219
   11a00:	dd 4f       	sbci	r29, 0xFD	; 253
   11a02:	88 81       	ld	r24, Y
   11a04:	99 81       	ldd	r25, Y+1	; 0x01
   11a06:	c5 52       	subi	r28, 0x25	; 37
   11a08:	d2 40       	sbci	r29, 0x02	; 2
   11a0a:	ca 5d       	subi	r28, 0xDA	; 218
   11a0c:	dd 4f       	sbci	r29, 0xFD	; 253
   11a0e:	ec e0       	ldi	r30, 0x0C	; 12
   11a10:	0c 94 56 ec 	jmp	0x1d8ac	; 0x1d8ac <__epilogue_restores__+0xc>

00011a14 <dbf_open_write>:
   11a14:	a6 e2       	ldi	r26, 0x26	; 38
   11a16:	b2 e0       	ldi	r27, 0x02	; 2
   11a18:	e0 e1       	ldi	r30, 0x10	; 16
   11a1a:	fd e8       	ldi	r31, 0x8D	; 141
   11a1c:	0c 94 3a ec 	jmp	0x1d874	; 0x1d874 <__prologue_saves__+0xc>
   11a20:	4a 01       	movw	r8, r20
   11a22:	5b 01       	movw	r10, r22
   11a24:	69 01       	movw	r12, r18
   11a26:	cb 5d       	subi	r28, 0xDB	; 219
   11a28:	dd 4f       	sbci	r29, 0xFD	; 253
   11a2a:	19 82       	std	Y+1, r1	; 0x01
   11a2c:	18 82       	st	Y, r1
   11a2e:	c5 52       	subi	r28, 0x25	; 37
   11a30:	d2 40       	sbci	r29, 0x02	; 2
   11a32:	43 e0       	ldi	r20, 0x03	; 3
   11a34:	bc 01       	movw	r22, r24
   11a36:	ce 01       	movw	r24, r28
   11a38:	01 96       	adiw	r24, 0x01	; 1
   11a3a:	13 df       	rcall	.-474    	; 0x11862 <dbf_open>
   11a3c:	89 2b       	or	r24, r25
   11a3e:	19 f0       	breq	.+6      	; 0x11a46 <dbf_open_write+0x32>
   11a40:	81 e1       	ldi	r24, 0x11	; 17
   11a42:	90 e0       	ldi	r25, 0x00	; 0
   11a44:	2f c0       	rjmp	.+94     	; 0x11aa4 <dbf_open_write+0x90>
   11a46:	b5 01       	movw	r22, r10
   11a48:	a4 01       	movw	r20, r8
   11a4a:	ce 01       	movw	r24, r28
   11a4c:	01 96       	adiw	r24, 0x01	; 1
   11a4e:	5b df       	rcall	.-330    	; 0x11906 <dbf_lseek>
   11a50:	89 2b       	or	r24, r25
   11a52:	59 f0       	breq	.+22     	; 0x11a6a <dbf_open_write+0x56>
   11a54:	85 e0       	ldi	r24, 0x05	; 5
   11a56:	90 e0       	ldi	r25, 0x00	; 0
   11a58:	f7 01       	movw	r30, r14
   11a5a:	91 83       	std	Z+1, r25	; 0x01
   11a5c:	80 83       	st	Z, r24
   11a5e:	ce 01       	movw	r24, r28
   11a60:	01 96       	adiw	r24, 0x01	; 1
   11a62:	69 df       	rcall	.-302    	; 0x11936 <dbf_close>
   11a64:	8f ef       	ldi	r24, 0xFF	; 255
   11a66:	9f ef       	ldi	r25, 0xFF	; 255
   11a68:	27 c0       	rjmp	.+78     	; 0x11ab8 <dbf_open_write+0xa4>
   11a6a:	9e 01       	movw	r18, r28
   11a6c:	2b 5d       	subi	r18, 0xDB	; 219
   11a6e:	3d 4f       	sbci	r19, 0xFD	; 253
   11a70:	a8 01       	movw	r20, r16
   11a72:	b6 01       	movw	r22, r12
   11a74:	ce 01       	movw	r24, r28
   11a76:	01 96       	adiw	r24, 0x01	; 1
   11a78:	2e df       	rcall	.-420    	; 0x118d6 <dbf_write>
   11a7a:	89 2b       	or	r24, r25
   11a7c:	49 f4       	brne	.+18     	; 0x11a90 <dbf_open_write+0x7c>
   11a7e:	cb 5d       	subi	r28, 0xDB	; 219
   11a80:	dd 4f       	sbci	r29, 0xFD	; 253
   11a82:	88 81       	ld	r24, Y
   11a84:	99 81       	ldd	r25, Y+1	; 0x01
   11a86:	c5 52       	subi	r28, 0x25	; 37
   11a88:	d2 40       	sbci	r29, 0x02	; 2
   11a8a:	08 17       	cp	r16, r24
   11a8c:	19 07       	cpc	r17, r25
   11a8e:	19 f0       	breq	.+6      	; 0x11a96 <dbf_open_write+0x82>
   11a90:	81 e0       	ldi	r24, 0x01	; 1
   11a92:	90 e0       	ldi	r25, 0x00	; 0
   11a94:	e1 cf       	rjmp	.-62     	; 0x11a58 <dbf_open_write+0x44>
   11a96:	ce 01       	movw	r24, r28
   11a98:	01 96       	adiw	r24, 0x01	; 1
   11a9a:	4d df       	rcall	.-358    	; 0x11936 <dbf_close>
   11a9c:	89 2b       	or	r24, r25
   11a9e:	31 f0       	breq	.+12     	; 0x11aac <dbf_open_write+0x98>
   11aa0:	80 e1       	ldi	r24, 0x10	; 16
   11aa2:	90 e0       	ldi	r25, 0x00	; 0
   11aa4:	f7 01       	movw	r30, r14
   11aa6:	91 83       	std	Z+1, r25	; 0x01
   11aa8:	80 83       	st	Z, r24
   11aaa:	dc cf       	rjmp	.-72     	; 0x11a64 <dbf_open_write+0x50>
   11aac:	cb 5d       	subi	r28, 0xDB	; 219
   11aae:	dd 4f       	sbci	r29, 0xFD	; 253
   11ab0:	88 81       	ld	r24, Y
   11ab2:	99 81       	ldd	r25, Y+1	; 0x01
   11ab4:	c5 52       	subi	r28, 0x25	; 37
   11ab6:	d2 40       	sbci	r29, 0x02	; 2
   11ab8:	ca 5d       	subi	r28, 0xDA	; 218
   11aba:	dd 4f       	sbci	r29, 0xFD	; 253
   11abc:	ec e0       	ldi	r30, 0x0C	; 12
   11abe:	0c 94 56 ec 	jmp	0x1d8ac	; 0x1d8ac <__epilogue_restores__+0xc>

00011ac2 <gpib_timer_elapsed_begin>:
   11ac2:	0c 94 fa 35 	jmp	0x6bf4	; 0x6bf4 <clock_elapsed_begin>
   11ac6:	08 95       	ret

00011ac8 <gpib_timer_reset>:
   11ac8:	f8 94       	cli
   11aca:	ea e3       	ldi	r30, 0x3A	; 58
   11acc:	fd e1       	ldi	r31, 0x1D	; 29
   11ace:	10 82       	st	Z, r1
   11ad0:	11 82       	std	Z+1, r1	; 0x01
   11ad2:	12 82       	std	Z+2, r1	; 0x02
   11ad4:	13 82       	std	Z+3, r1	; 0x03
   11ad6:	14 82       	std	Z+4, r1	; 0x04
   11ad8:	15 82       	std	Z+5, r1	; 0x05
   11ada:	16 82       	std	Z+6, r1	; 0x06
   11adc:	17 82       	std	Z+7, r1	; 0x07
   11ade:	81 e0       	ldi	r24, 0x01	; 1
   11ae0:	80 87       	std	Z+8, r24	; 0x08
   11ae2:	78 94       	sei
   11ae4:	08 95       	ret

00011ae6 <gpib_timer_elapsed_end>:
   11ae6:	0c 94 00 36 	jmp	0x6c00	; 0x6c00 <clock_elapsed_end>
   11aea:	08 95       	ret

00011aec <gpib_timer_task>:
   11aec:	f8 94       	cli
   11aee:	80 91 3e 1d 	lds	r24, 0x1D3E	; 0x801d3e <gpib_timer+0x4>
   11af2:	90 91 3f 1d 	lds	r25, 0x1D3F	; 0x801d3f <gpib_timer+0x5>
   11af6:	a0 91 40 1d 	lds	r26, 0x1D40	; 0x801d40 <gpib_timer+0x6>
   11afa:	b0 91 41 1d 	lds	r27, 0x1D41	; 0x801d41 <gpib_timer+0x7>
   11afe:	89 2b       	or	r24, r25
   11b00:	8a 2b       	or	r24, r26
   11b02:	8b 2b       	or	r24, r27
   11b04:	a1 f0       	breq	.+40     	; 0x11b2e <gpib_timer_task+0x42>
   11b06:	80 91 3e 1d 	lds	r24, 0x1D3E	; 0x801d3e <gpib_timer+0x4>
   11b0a:	90 91 3f 1d 	lds	r25, 0x1D3F	; 0x801d3f <gpib_timer+0x5>
   11b0e:	a0 91 40 1d 	lds	r26, 0x1D40	; 0x801d40 <gpib_timer+0x6>
   11b12:	b0 91 41 1d 	lds	r27, 0x1D41	; 0x801d41 <gpib_timer+0x7>
   11b16:	01 97       	sbiw	r24, 0x01	; 1
   11b18:	a1 09       	sbc	r26, r1
   11b1a:	b1 09       	sbc	r27, r1
   11b1c:	80 93 3e 1d 	sts	0x1D3E, r24	; 0x801d3e <gpib_timer+0x4>
   11b20:	90 93 3f 1d 	sts	0x1D3F, r25	; 0x801d3f <gpib_timer+0x5>
   11b24:	a0 93 40 1d 	sts	0x1D40, r26	; 0x801d40 <gpib_timer+0x6>
   11b28:	b0 93 41 1d 	sts	0x1D41, r27	; 0x801d41 <gpib_timer+0x7>
   11b2c:	03 c0       	rjmp	.+6      	; 0x11b34 <gpib_timer_task+0x48>
   11b2e:	81 e0       	ldi	r24, 0x01	; 1
   11b30:	80 93 42 1d 	sts	0x1D42, r24	; 0x801d42 <gpib_timer+0x8>
   11b34:	78 94       	sei
   11b36:	08 95       	ret

00011b38 <gpib_timeout_set>:
   11b38:	f8 94       	cli
   11b3a:	ea e3       	ldi	r30, 0x3A	; 58
   11b3c:	fd e1       	ldi	r31, 0x1D	; 29
   11b3e:	64 83       	std	Z+4, r22	; 0x04
   11b40:	75 83       	std	Z+5, r23	; 0x05
   11b42:	86 83       	std	Z+6, r24	; 0x06
   11b44:	97 83       	std	Z+7, r25	; 0x07
   11b46:	10 86       	std	Z+8, r1	; 0x08
   11b48:	78 94       	sei
   11b4a:	08 95       	ret

00011b4c <gpib_bus_read_init>:
   11b4c:	54 98       	cbi	0x0a, 4	; 10
   11b4e:	57 98       	cbi	0x0a, 7	; 10
   11b50:	45 98       	cbi	0x08, 5	; 8
   11b52:	3d 9a       	sbi	0x07, 5	; 7
   11b54:	11 b8       	out	0x01, r1	; 1
   11b56:	2f ef       	ldi	r18, 0xFF	; 255
   11b58:	22 b9       	out	0x02, r18	; 2
   11b5a:	43 98       	cbi	0x08, 3	; 8
   11b5c:	3b 9a       	sbi	0x07, 3	; 7
   11b5e:	21 98       	cbi	0x04, 1	; 4
   11b60:	56 98       	cbi	0x0a, 6	; 10
   11b62:	20 98       	cbi	0x04, 0	; 4
   11b64:	55 98       	cbi	0x0a, 5	; 10
   11b66:	89 2b       	or	r24, r25
   11b68:	39 f4       	brne	.+14     	; 0x11b78 <gpib_bus_read_init+0x2c>
   11b6a:	52 98       	cbi	0x0a, 2	; 10
   11b6c:	53 98       	cbi	0x0a, 3	; 10
   11b6e:	8d e0       	ldi	r24, 0x0D	; 13
   11b70:	8a 95       	dec	r24
   11b72:	f1 f7       	brne	.-4      	; 0x11b70 <gpib_bus_read_init+0x24>
   11b74:	00 00       	nop
   11b76:	04 c0       	rjmp	.+8      	; 0x11b80 <gpib_bus_read_init+0x34>
   11b78:	5b 98       	cbi	0x0b, 3	; 11
   11b7a:	53 9a       	sbi	0x0a, 3	; 10
   11b7c:	5a 98       	cbi	0x0b, 2	; 11
   11b7e:	52 9a       	sbi	0x0a, 2	; 10
   11b80:	42 98       	cbi	0x08, 2	; 8
   11b82:	3a 9a       	sbi	0x07, 2	; 7
   11b84:	44 9a       	sbi	0x08, 4	; 8
   11b86:	3c 9a       	sbi	0x07, 4	; 7
   11b88:	8d e0       	ldi	r24, 0x0D	; 13
   11b8a:	8a 95       	dec	r24
   11b8c:	f1 f7       	brne	.-4      	; 0x11b8a <gpib_bus_read_init+0x3e>
   11b8e:	00 00       	nop
   11b90:	08 95       	ret

00011b92 <gpib_bus_init>:
   11b92:	10 92 bf 19 	sts	0x19BF, r1	; 0x8019bf <gpib_unread_f>
   11b96:	11 b8       	out	0x01, r1	; 1
   11b98:	8f ef       	ldi	r24, 0xFF	; 255
   11b9a:	82 b9       	out	0x02, r24	; 2
   11b9c:	21 98       	cbi	0x04, 1	; 4
   11b9e:	52 98       	cbi	0x0a, 2	; 10
   11ba0:	53 98       	cbi	0x0a, 3	; 10
   11ba2:	54 98       	cbi	0x0a, 4	; 10
   11ba4:	57 98       	cbi	0x0a, 7	; 10
   11ba6:	56 98       	cbi	0x0a, 6	; 10
   11ba8:	20 98       	cbi	0x04, 0	; 4
   11baa:	55 98       	cbi	0x0a, 5	; 10
   11bac:	45 98       	cbi	0x08, 5	; 8
   11bae:	3d 9a       	sbi	0x07, 5	; 7
   11bb0:	43 98       	cbi	0x08, 3	; 8
   11bb2:	3b 9a       	sbi	0x07, 3	; 7
   11bb4:	42 98       	cbi	0x08, 2	; 8
   11bb6:	3a 9a       	sbi	0x07, 2	; 7
   11bb8:	44 9a       	sbi	0x08, 4	; 8
   11bba:	3c 9a       	sbi	0x07, 4	; 7
   11bbc:	8d e0       	ldi	r24, 0x0D	; 13
   11bbe:	8a 95       	dec	r24
   11bc0:	f1 f7       	brne	.-4      	; 0x11bbe <gpib_bus_init+0x2c>
   11bc2:	00 00       	nop
   11bc4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11bc8:	82 ff       	sbrs	r24, 2
   11bca:	0a c0       	rjmp	.+20     	; 0x11be0 <gpib_bus_init+0x4e>
   11bcc:	8e e9       	ldi	r24, 0x9E	; 158
   11bce:	92 e1       	ldi	r25, 0x12	; 18
   11bd0:	1f 92       	push	r1
   11bd2:	9f 93       	push	r25
   11bd4:	8f 93       	push	r24
   11bd6:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   11bda:	0f 90       	pop	r0
   11bdc:	0f 90       	pop	r0
   11bde:	0f 90       	pop	r0
   11be0:	08 95       	ret

00011be2 <gpib_state_init>:
   11be2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11be6:	82 ff       	sbrs	r24, 2
   11be8:	0a c0       	rjmp	.+20     	; 0x11bfe <gpib_state_init+0x1c>
   11bea:	8b e8       	ldi	r24, 0x8B	; 139
   11bec:	92 e1       	ldi	r25, 0x12	; 18
   11bee:	1f 92       	push	r1
   11bf0:	9f 93       	push	r25
   11bf2:	8f 93       	push	r24
   11bf4:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   11bf8:	0f 90       	pop	r0
   11bfa:	0f 90       	pop	r0
   11bfc:	0f 90       	pop	r0
   11bfe:	05 de       	rcall	.-1014   	; 0x1180a <ppr_init>
   11c00:	0e 94 1f 98 	call	0x1303e	; 0x1303e <listen_cleanup>
   11c04:	0e 94 30 99 	call	0x13260	; 0x13260 <talk_cleanup>
   11c08:	10 92 46 1f 	sts	0x1F46, r1	; 0x801f46 <spoll>
   11c0c:	10 92 49 1f 	sts	0x1F49, r1	; 0x801f49 <talking>
   11c10:	10 92 4c 1f 	sts	0x1F4C, r1	; 0x801f4c <talking_last>
   11c14:	10 92 4b 1f 	sts	0x1F4B, r1	; 0x801f4b <listening>
   11c18:	10 92 45 1f 	sts	0x1F45, r1	; 0x801f45 <listening_last>
   11c1c:	10 92 44 1d 	sts	0x1D44, r1	; 0x801d44 <lastcmd+0x1>
   11c20:	10 92 43 1d 	sts	0x1D43, r1	; 0x801d43 <lastcmd>
   11c24:	10 92 48 1f 	sts	0x1F48, r1	; 0x801f48 <current+0x1>
   11c28:	10 92 47 1f 	sts	0x1F47, r1	; 0x801f47 <current>
   11c2c:	10 92 4a 1f 	sts	0x1F4A, r1	; 0x801f4a <secondary>
   11c30:	08 95       	ret

00011c32 <gpib_enable_PPR>:
   11c32:	cf 93       	push	r28
   11c34:	df 93       	push	r29
   11c36:	ec 01       	movw	r28, r24
   11c38:	88 30       	cpi	r24, 0x08	; 8
   11c3a:	91 05       	cpc	r25, r1
   11c3c:	78 f0       	brcs	.+30     	; 0x11c5c <gpib_enable_PPR+0x2a>
   11c3e:	df 93       	push	r29
   11c40:	cf 93       	push	r28
   11c42:	85 e6       	ldi	r24, 0x65	; 101
   11c44:	92 e1       	ldi	r25, 0x12	; 18
   11c46:	1f 92       	push	r1
   11c48:	9f 93       	push	r25
   11c4a:	8f 93       	push	r24
   11c4c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   11c50:	0f 90       	pop	r0
   11c52:	0f 90       	pop	r0
   11c54:	0f 90       	pop	r0
   11c56:	0f 90       	pop	r0
   11c58:	0f 90       	pop	r0
   11c5a:	19 c0       	rjmp	.+50     	; 0x11c8e <gpib_enable_PPR+0x5c>
   11c5c:	e7 dd       	rcall	.-1074   	; 0x1182c <ppr_bit_set>
   11c5e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11c62:	81 ff       	sbrs	r24, 1
   11c64:	14 c0       	rjmp	.+40     	; 0x11c8e <gpib_enable_PPR+0x5c>
   11c66:	cd dd       	rcall	.-1126   	; 0x11802 <ppr_reg>
   11c68:	1f 92       	push	r1
   11c6a:	8f 93       	push	r24
   11c6c:	df 93       	push	r29
   11c6e:	cf 93       	push	r28
   11c70:	8a e4       	ldi	r24, 0x4A	; 74
   11c72:	92 e1       	ldi	r25, 0x12	; 18
   11c74:	1f 92       	push	r1
   11c76:	9f 93       	push	r25
   11c78:	8f 93       	push	r24
   11c7a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   11c7e:	8d b7       	in	r24, 0x3d	; 61
   11c80:	9e b7       	in	r25, 0x3e	; 62
   11c82:	07 96       	adiw	r24, 0x07	; 7
   11c84:	0f b6       	in	r0, 0x3f	; 63
   11c86:	f8 94       	cli
   11c88:	9e bf       	out	0x3e, r25	; 62
   11c8a:	0f be       	out	0x3f, r0	; 63
   11c8c:	8d bf       	out	0x3d, r24	; 61
   11c8e:	df 91       	pop	r29
   11c90:	cf 91       	pop	r28
   11c92:	08 95       	ret

00011c94 <gpib_disable_PPR>:
   11c94:	cf 93       	push	r28
   11c96:	df 93       	push	r29
   11c98:	ec 01       	movw	r28, r24
   11c9a:	88 30       	cpi	r24, 0x08	; 8
   11c9c:	91 05       	cpc	r25, r1
   11c9e:	78 f0       	brcs	.+30     	; 0x11cbe <gpib_disable_PPR+0x2a>
   11ca0:	df 93       	push	r29
   11ca2:	cf 93       	push	r28
   11ca4:	83 e2       	ldi	r24, 0x23	; 35
   11ca6:	92 e1       	ldi	r25, 0x12	; 18
   11ca8:	1f 92       	push	r1
   11caa:	9f 93       	push	r25
   11cac:	8f 93       	push	r24
   11cae:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   11cb2:	0f 90       	pop	r0
   11cb4:	0f 90       	pop	r0
   11cb6:	0f 90       	pop	r0
   11cb8:	0f 90       	pop	r0
   11cba:	0f 90       	pop	r0
   11cbc:	19 c0       	rjmp	.+50     	; 0x11cf0 <gpib_disable_PPR+0x5c>
   11cbe:	c3 dd       	rcall	.-1146   	; 0x11846 <ppr_bit_clr>
   11cc0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11cc4:	81 ff       	sbrs	r24, 1
   11cc6:	14 c0       	rjmp	.+40     	; 0x11cf0 <gpib_disable_PPR+0x5c>
   11cc8:	9c dd       	rcall	.-1224   	; 0x11802 <ppr_reg>
   11cca:	1f 92       	push	r1
   11ccc:	8f 93       	push	r24
   11cce:	df 93       	push	r29
   11cd0:	cf 93       	push	r28
   11cd2:	88 e0       	ldi	r24, 0x08	; 8
   11cd4:	92 e1       	ldi	r25, 0x12	; 18
   11cd6:	1f 92       	push	r1
   11cd8:	9f 93       	push	r25
   11cda:	8f 93       	push	r24
   11cdc:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   11ce0:	8d b7       	in	r24, 0x3d	; 61
   11ce2:	9e b7       	in	r25, 0x3e	; 62
   11ce4:	07 96       	adiw	r24, 0x07	; 7
   11ce6:	0f b6       	in	r0, 0x3f	; 63
   11ce8:	f8 94       	cli
   11cea:	9e bf       	out	0x3e, r25	; 62
   11cec:	0f be       	out	0x3f, r0	; 63
   11cee:	8d bf       	out	0x3d, r24	; 61
   11cf0:	df 91       	pop	r29
   11cf2:	cf 91       	pop	r28
   11cf4:	08 95       	ret

00011cf6 <gpib_assert_ifc>:
   11cf6:	5c 98       	cbi	0x0b, 4	; 11
   11cf8:	54 9a       	sbi	0x0a, 4	; 10
   11cfa:	6a ef       	ldi	r22, 0xFA	; 250
   11cfc:	70 e0       	ldi	r23, 0x00	; 0
   11cfe:	80 e0       	ldi	r24, 0x00	; 0
   11d00:	90 e0       	ldi	r25, 0x00	; 0
   11d02:	0e 94 65 2a 	call	0x54ca	; 0x54ca <delayus>
   11d06:	54 98       	cbi	0x0a, 4	; 10
   11d08:	6a ef       	ldi	r22, 0xFA	; 250
   11d0a:	70 e0       	ldi	r23, 0x00	; 0
   11d0c:	80 e0       	ldi	r24, 0x00	; 0
   11d0e:	90 e0       	ldi	r25, 0x00	; 0
   11d10:	0e 94 65 2a 	call	0x54ca	; 0x54ca <delayus>
   11d14:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11d18:	82 ff       	sbrs	r24, 2
   11d1a:	0a c0       	rjmp	.+20     	; 0x11d30 <gpib_assert_ifc+0x3a>
   11d1c:	89 ed       	ldi	r24, 0xD9	; 217
   11d1e:	91 e1       	ldi	r25, 0x11	; 17
   11d20:	1f 92       	push	r1
   11d22:	9f 93       	push	r25
   11d24:	8f 93       	push	r24
   11d26:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   11d2a:	0f 90       	pop	r0
   11d2c:	0f 90       	pop	r0
   11d2e:	0f 90       	pop	r0
   11d30:	08 95       	ret

00011d32 <gpib_unread>:
   11d32:	cf 93       	push	r28
   11d34:	df 93       	push	r29
   11d36:	ec 01       	movw	r28, r24
   11d38:	80 91 bf 19 	lds	r24, 0x19BF	; 0x8019bf <gpib_unread_f>
   11d3c:	81 11       	cpse	r24, r1
   11d3e:	08 c0       	rjmp	.+16     	; 0x11d50 <gpib_unread+0x1e>
   11d40:	d0 93 4e 1f 	sts	0x1F4E, r29	; 0x801f4e <gpib_unread_data+0x1>
   11d44:	c0 93 4d 1f 	sts	0x1F4D, r28	; 0x801f4d <gpib_unread_data>
   11d48:	81 e0       	ldi	r24, 0x01	; 1
   11d4a:	80 93 bf 19 	sts	0x19BF, r24	; 0x8019bf <gpib_unread_f>
   11d4e:	12 c0       	rjmp	.+36     	; 0x11d74 <gpib_unread+0x42>
   11d50:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11d54:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11d58:	85 70       	andi	r24, 0x05	; 5
   11d5a:	99 27       	eor	r25, r25
   11d5c:	89 2b       	or	r24, r25
   11d5e:	51 f0       	breq	.+20     	; 0x11d74 <gpib_unread+0x42>
   11d60:	86 e9       	ldi	r24, 0x96	; 150
   11d62:	91 e1       	ldi	r25, 0x11	; 17
   11d64:	1f 92       	push	r1
   11d66:	9f 93       	push	r25
   11d68:	8f 93       	push	r24
   11d6a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   11d6e:	0f 90       	pop	r0
   11d70:	0f 90       	pop	r0
   11d72:	0f 90       	pop	r0
   11d74:	ce 01       	movw	r24, r28
   11d76:	df 91       	pop	r29
   11d78:	cf 91       	pop	r28
   11d7a:	08 95       	ret

00011d7c <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   11d7c:	11 b8       	out	0x01, r1	; 1
   11d7e:	80 b1       	in	r24, 0x00	; 0
   11d80:	80 95       	com	r24

    ///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   11d82:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   11d84:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   11d86:	08 95       	ret

00011d88 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   11d88:	4e 99       	sbic	0x09, 6	; 9
   11d8a:	03 c0       	rjmp	.+6      	; 0x11d92 <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   11d8c:	80 e0       	ldi	r24, 0x00	; 0
   11d8e:	94 e0       	ldi	r25, 0x04	; 4
   11d90:	02 c0       	rjmp	.+4      	; 0x11d96 <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   11d92:	80 e0       	ldi	r24, 0x00	; 0
   11d94:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   11d96:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   11d98:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   11d9a:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   11d9c:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   11d9e:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   11da0:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   11da2:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   11da4:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   11da6:	08 95       	ret

00011da8 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   11da8:	19 99       	sbic	0x03, 1	; 3
   11daa:	03 c0       	rjmp	.+6      	; 0x11db2 <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   11dac:	80 e0       	ldi	r24, 0x00	; 0
   11dae:	90 e2       	ldi	r25, 0x20	; 32
   11db0:	02 c0       	rjmp	.+4      	; 0x11db6 <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   11db2:	80 e0       	ldi	r24, 0x00	; 0
   11db4:	90 e0       	ldi	r25, 0x00	; 0
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   11db6:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   11db8:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   11dba:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   11dbc:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   11dbe:	08 95       	ret

00011dc0 <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   11dc0:	2f 92       	push	r2
   11dc2:	3f 92       	push	r3
   11dc4:	4f 92       	push	r4
   11dc6:	6f 92       	push	r6
   11dc8:	7f 92       	push	r7
   11dca:	8f 92       	push	r8
   11dcc:	cf 92       	push	r12
   11dce:	df 92       	push	r13
   11dd0:	ef 92       	push	r14
   11dd2:	1f 93       	push	r17
   11dd4:	cf 93       	push	r28
   11dd6:	df 93       	push	r29
   11dd8:	cd b7       	in	r28, 0x3d	; 61
   11dda:	de b7       	in	r29, 0x3e	; 62
   11ddc:	28 97       	sbiw	r28, 0x08	; 8
   11dde:	0f b6       	in	r0, 0x3f	; 63
   11de0:	f8 94       	cli
   11de2:	de bf       	out	0x3e, r29	; 62
   11de4:	0f be       	out	0x3f, r0	; 63
   11de6:	cd bf       	out	0x3d, r28	; 61
   11de8:	98 87       	std	Y+8, r25	; 0x08
   11dea:	8f 83       	std	Y+7, r24	; 0x07
    uint8_t tx_state;

	// Wait for DAV to be released before starting
	// Read state for DAV
	gpib_bus_read_init(0);
   11dec:	80 e0       	ldi	r24, 0x00	; 0
   11dee:	90 e0       	ldi	r25, 0x00	; 0
   11df0:	ad de       	rcall	.-678    	; 0x11b4c <gpib_bus_read_init>
	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   11df2:	64 ef       	ldi	r22, 0xF4	; 244
   11df4:	71 e0       	ldi	r23, 0x01	; 1
   11df6:	80 e0       	ldi	r24, 0x00	; 0
   11df8:	90 e0       	ldi	r25, 0x00	; 0
   11dfa:	9e de       	rcall	.-708    	; 0x11b38 <gpib_timeout_set>

	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
   11dfc:	10 e0       	ldi	r17, 0x00	; 0
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   11dfe:	84 e0       	ldi	r24, 0x04	; 4
   11e00:	91 e1       	ldi	r25, 0x11	; 17
   11e02:	6c 01       	movw	r12, r24
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NDAC==1>\n");
   11e04:	8e e1       	ldi	r24, 0x1E	; 30
   11e06:	91 e1       	ldi	r25, 0x11	; 17
   11e08:	3c 01       	movw	r6, r24
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==0>\n");
   11e0a:	89 e3       	ldi	r24, 0x39	; 57
   11e0c:	91 e1       	ldi	r25, 0x11	; 17
   11e0e:	1c 01       	movw	r2, r24
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   11e10:	84 e5       	ldi	r24, 0x54	; 84
   11e12:	91 e1       	ldi	r25, 0x11	; 17
   11e14:	9c 01       	movw	r18, r24
   11e16:	40 e0       	ldi	r20, 0x00	; 0
   11e18:	29 83       	std	Y+1, r18	; 0x01
   11e1a:	3a 83       	std	Y+2, r19	; 0x02
   11e1c:	4b 83       	std	Y+3, r20	; 0x03
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   11e1e:	8c e7       	ldi	r24, 0x7C	; 124
   11e20:	91 e1       	ldi	r25, 0x11	; 17
   11e22:	9c 01       	movw	r18, r24
   11e24:	40 e0       	ldi	r20, 0x00	; 0
   11e26:	2c 83       	std	Y+4, r18	; 0x04
   11e28:	3d 83       	std	Y+5, r19	; 0x05
   11e2a:	4e 83       	std	Y+6, r20	; 0x06
    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
    {
        if(uart_keyhit(0))
   11e2c:	80 e0       	ldi	r24, 0x00	; 0
   11e2e:	0e 94 88 2c 	call	0x5910	; 0x5910 <uart_keyhit>
   11e32:	89 2b       	or	r24, r25
   11e34:	09 f0       	breq	.+2      	; 0x11e38 <gpib_write_byte+0x78>
   11e36:	17 c1       	rjmp	.+558    	; 0x12066 <gpib_write_byte+0x2a6>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   11e38:	4c 99       	sbic	0x09, 4	; 9
   11e3a:	07 c0       	rjmp	.+14     	; 0x11e4a <gpib_write_byte+0x8a>
        {
            ch |= IFC_FLAG;
   11e3c:	8f 81       	ldd	r24, Y+7	; 0x07
   11e3e:	98 85       	ldd	r25, Y+8	; 0x08
   11e40:	90 61       	ori	r25, 0x10	; 16
   11e42:	98 87       	std	Y+8, r25	; 0x08
			gpib_bus_init();
   11e44:	8f 83       	std	Y+7, r24	; 0x07
   11e46:	a5 de       	rcall	.-694    	; 0x11b92 <gpib_bus_init>
            break;
   11e48:	0e c1       	rjmp	.+540    	; 0x12066 <gpib_write_byte+0x2a6>
        }

        switch(tx_state)
   11e4a:	81 2f       	mov	r24, r17
   11e4c:	90 e0       	ldi	r25, 0x00	; 0
   11e4e:	8a 30       	cpi	r24, 0x0A	; 10
   11e50:	91 05       	cpc	r25, r1
   11e52:	08 f0       	brcs	.+2      	; 0x11e56 <gpib_write_byte+0x96>
   11e54:	fe c0       	rjmp	.+508    	; 0x12052 <gpib_write_byte+0x292>
   11e56:	fc 01       	movw	r30, r24
   11e58:	e3 54       	subi	r30, 0x43	; 67
   11e5a:	ff 4f       	sbci	r31, 0xFF	; 255
   11e5c:	0c 94 05 ec 	jmp	0x1d80a	; 0x1d80a <__tablejump2__>
        {
            case GPIB_TX_START:
                // Wait for release of DAV and EOI before starting
				// IF DAV = 0 the bus is busy
                if(GPIB_PIN_TST(DAV) == 1)
   11e60:	19 9b       	sbis	0x03, 1	; 3
   11e62:	12 c0       	rjmp	.+36     	; 0x11e88 <gpib_write_byte+0xc8>
					// We arive here in Read Mode - see gpib_bus_read_init(0);

					// Switch GBIB driver direction to Write
					// CPU has BUS already set IN with pullups = 0xff - see gpib_bus_read_init(0);
					// When we switch the GPIB drivers will be in OC mode and off the bus (0xff)
					GPIB_IO_HI(TE); // BUS OUT, DAV OUT, NRFD and NDAC IN
   11e64:	42 9a       	sbi	0x08, 2	; 8
   11e66:	3a 9a       	sbi	0x07, 2	; 7
					GPIB_IO_LOW(DC);// ATN OUT, EOI OUT, SRQ IN
   11e68:	44 98       	cbi	0x08, 4	; 8
   11e6a:	3c 9a       	sbi	0x07, 4	; 7
#endif
                    // My testing with various GPIB devices shows that we MUST assert ATN EARLY!
                    if(ch & ATN_FLAG)
   11e6c:	2f 81       	ldd	r18, Y+7	; 0x07
   11e6e:	38 85       	ldd	r19, Y+8	; 0x08
   11e70:	32 ff       	sbrs	r19, 2
   11e72:	03 c0       	rjmp	.+6      	; 0x11e7a <gpib_write_byte+0xba>
                        GPIB_IO_LOW(ATN);   // FYI: SS80 never sends ATN from a device
   11e74:	5e 98       	cbi	0x0b, 6	; 11
   11e76:	56 9a       	sbi	0x0a, 6	; 10
   11e78:	01 c0       	rjmp	.+2      	; 0x11e7c <gpib_write_byte+0xbc>
                    else
                        GPIB_PIN_FLOAT_UP(ATN);
   11e7a:	56 98       	cbi	0x0a, 6	; 10

                    gpib_timeout_set(HTIMEOUT);
   11e7c:	64 ef       	ldi	r22, 0xF4	; 244
   11e7e:	71 e0       	ldi	r23, 0x01	; 1
   11e80:	80 e0       	ldi	r24, 0x00	; 0
   11e82:	90 e0       	ldi	r25, 0x00	; 0
   11e84:	59 de       	rcall	.-846    	; 0x11b38 <gpib_timeout_set>
                    tx_state = GPIB_TX_WAIT_READY;
   11e86:	11 e0       	ldi	r17, 0x01	; 1
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11e88:	80 91 42 1d 	lds	r24, 0x1D42	; 0x801d42 <gpib_timer+0x8>
                        GPIB_PIN_FLOAT_UP(ATN);

                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_READY;
                }
                if (gpib_timeout_test())
   11e8c:	88 23       	and	r24, r24
   11e8e:	71 f2       	breq	.-100    	; 0x11e2c <gpib_write_byte+0x6c>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   11e90:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11e94:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11e98:	85 70       	andi	r24, 0x05	; 5
   11e9a:	99 27       	eor	r25, r25
   11e9c:	89 2b       	or	r24, r25
   11e9e:	39 f1       	breq	.+78     	; 0x11eee <gpib_write_byte+0x12e>
                        printf("<BUS waiting for DAV==1>\n");
   11ea0:	1f 92       	push	r1
   11ea2:	3d 81       	ldd	r19, Y+5	; 0x05
   11ea4:	3f 93       	push	r19
   11ea6:	4c 81       	ldd	r20, Y+4	; 0x04
   11ea8:	4f 93       	push	r20
   11eaa:	1c c0       	rjmp	.+56     	; 0x11ee4 <gpib_write_byte+0x124>
                }
                break;

            case GPIB_TX_WAIT_READY:
                // Wait for ready condition
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
   11eac:	4a 9b       	sbis	0x09, 2	; 9
   11eae:	08 c0       	rjmp	.+16     	; 0x11ec0 <gpib_write_byte+0x100>
   11eb0:	4b 99       	sbic	0x09, 3	; 9
                {
                    gpib_timeout_set(HTIMEOUT);
   11eb2:	06 c0       	rjmp	.+12     	; 0x11ec0 <gpib_write_byte+0x100>
   11eb4:	64 ef       	ldi	r22, 0xF4	; 244
   11eb6:	71 e0       	ldi	r23, 0x01	; 1
   11eb8:	80 e0       	ldi	r24, 0x00	; 0
   11eba:	90 e0       	ldi	r25, 0x00	; 0
                    tx_state = GPIB_TX_PUT_DATA;
   11ebc:	3d de       	rcall	.-902    	; 0x11b38 <gpib_timeout_set>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11ebe:	12 e0       	ldi	r17, 0x02	; 2
   11ec0:	80 91 42 1d 	lds	r24, 0x1D42	; 0x801d42 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_PUT_DATA;
                }
                if (gpib_timeout_test())
   11ec4:	88 23       	and	r24, r24
   11ec6:	09 f4       	brne	.+2      	; 0x11eca <gpib_write_byte+0x10a>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   11ec8:	b1 cf       	rjmp	.-158    	; 0x11e2c <gpib_write_byte+0x6c>
   11eca:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11ece:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11ed2:	85 70       	andi	r24, 0x05	; 5
   11ed4:	99 27       	eor	r25, r25
   11ed6:	89 2b       	or	r24, r25
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   11ed8:	51 f0       	breq	.+20     	; 0x11eee <gpib_write_byte+0x12e>
   11eda:	1f 92       	push	r1
   11edc:	9a 81       	ldd	r25, Y+2	; 0x02
   11ede:	9f 93       	push	r25
   11ee0:	29 81       	ldd	r18, Y+1	; 0x01
   11ee2:	2f 93       	push	r18
   11ee4:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   11ee8:	0f 90       	pop	r0
   11eea:	0f 90       	pop	r0
#endif
                    ch |= TIMEOUT_FLAG;
   11eec:	0f 90       	pop	r0
   11eee:	8f 81       	ldd	r24, Y+7	; 0x07
   11ef0:	98 85       	ldd	r25, Y+8	; 0x08
   11ef2:	90 64       	ori	r25, 0x40	; 64
   11ef4:	98 87       	std	Y+8, r25	; 0x08
   11ef6:	8f 83       	std	Y+7, r24	; 0x07
                }
                break;

            case GPIB_TX_PUT_DATA:

                if(ch & EOI_FLAG)
   11ef8:	b4 c0       	rjmp	.+360    	; 0x12062 <gpib_write_byte+0x2a2>
   11efa:	2f 81       	ldd	r18, Y+7	; 0x07
   11efc:	38 85       	ldd	r19, Y+8	; 0x08
   11efe:	30 ff       	sbrs	r19, 0
                    GPIB_IO_LOW(EOI);
   11f00:	03 c0       	rjmp	.+6      	; 0x11f08 <gpib_write_byte+0x148>
   11f02:	28 98       	cbi	0x05, 0	; 5
   11f04:	20 9a       	sbi	0x04, 0	; 4
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   11f06:	01 c0       	rjmp	.+2      	; 0x11f0a <gpib_write_byte+0x14a>

                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   11f08:	20 98       	cbi	0x04, 0	; 4
   11f0a:	8f ef       	ldi	r24, 0xFF	; 255
   11f0c:	81 b9       	out	0x01, r24	; 1
   11f0e:	8f 81       	ldd	r24, Y+7	; 0x07
   11f10:	80 95       	com	r24
#if BOARD == 2
				// Switch to Tristate mode to soeed up Write
                GPIB_IO_HI(PE); 
   11f12:	82 b9       	out	0x02, r24	; 2
   11f14:	43 9a       	sbi	0x08, 3	; 8
   11f16:	3b 9a       	sbi	0x07, 3	; 7
   11f18:	3d e0       	ldi	r19, 0x0D	; 13
   11f1a:	3a 95       	dec	r19
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   11f1c:	f1 f7       	brne	.-4      	; 0x11f1a <gpib_write_byte+0x15a>
   11f1e:	00 00       	nop
   11f20:	64 ef       	ldi	r22, 0xF4	; 244
   11f22:	71 e0       	ldi	r23, 0x01	; 1
   11f24:	80 e0       	ldi	r24, 0x00	; 0
   11f26:	90 e0       	ldi	r25, 0x00	; 0
                tx_state = GPIB_TX_SET_DAV_LOW;
   11f28:	07 de       	rcall	.-1010   	; 0x11b38 <gpib_timeout_set>
                break;


            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   11f2a:	13 e0       	ldi	r17, 0x03	; 3
                gpib_timeout_set(HTIMEOUT);
   11f2c:	7f cf       	rjmp	.-258    	; 0x11e2c <gpib_write_byte+0x6c>
   11f2e:	29 98       	cbi	0x05, 1	; 5
   11f30:	21 9a       	sbi	0x04, 1	; 4
   11f32:	64 ef       	ldi	r22, 0xF4	; 244
   11f34:	71 e0       	ldi	r23, 0x01	; 1
   11f36:	80 e0       	ldi	r24, 0x00	; 0
                tx_state = GPIB_TX_WAIT_FOR_NRFD_LOW;
                break;

            ///@brief first device is ready
            case GPIB_TX_WAIT_FOR_NRFD_LOW:
                if (GPIB_PIN_TST(NRFD) == 0)
   11f38:	90 e0       	ldi	r25, 0x00	; 0
   11f3a:	fe dd       	rcall	.-1028   	; 0x11b38 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   11f3c:	14 e0       	ldi	r17, 0x04	; 4
   11f3e:	76 cf       	rjmp	.-276    	; 0x11e2c <gpib_write_byte+0x6c>
   11f40:	4a 99       	sbic	0x09, 2	; 9
   11f42:	07 c0       	rjmp	.+14     	; 0x11f52 <gpib_write_byte+0x192>
   11f44:	64 ef       	ldi	r22, 0xF4	; 244
   11f46:	71 e0       	ldi	r23, 0x01	; 1
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   11f48:	80 e0       	ldi	r24, 0x00	; 0
                    break;
   11f4a:	90 e0       	ldi	r25, 0x00	; 0
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11f4c:	f5 dd       	rcall	.-1046   	; 0x11b38 <gpib_timeout_set>
   11f4e:	15 e0       	ldi	r17, 0x05	; 5
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
                    break;
                }
                if (gpib_timeout_test())
   11f50:	6d cf       	rjmp	.-294    	; 0x11e2c <gpib_write_byte+0x6c>
   11f52:	80 91 42 1d 	lds	r24, 0x1D42	; 0x801d42 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11f56:	88 23       	and	r24, r24
   11f58:	09 f4       	brne	.+2      	; 0x11f5c <gpib_write_byte+0x19c>
   11f5a:	68 cf       	rjmp	.-304    	; 0x11e2c <gpib_write_byte+0x6c>
   11f5c:	8f 81       	ldd	r24, Y+7	; 0x07
   11f5e:	98 85       	ldd	r25, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   11f60:	90 64       	ori	r25, 0x40	; 64
   11f62:	98 87       	std	Y+8, r25	; 0x08
   11f64:	8f 83       	std	Y+7, r24	; 0x07
   11f66:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11f6a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11f6e:	85 70       	andi	r24, 0x05	; 5
   11f70:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NRFD==0>\n");
   11f72:	89 2b       	or	r24, r25
   11f74:	09 f4       	brne	.+2      	; 0x11f78 <gpib_write_byte+0x1b8>
   11f76:	75 c0       	rjmp	.+234    	; 0x12062 <gpib_write_byte+0x2a2>
   11f78:	1f 92       	push	r1
                }
                break;

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
   11f7a:	3f 92       	push	r3
   11f7c:	2f 92       	push	r2
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11f7e:	3f c0       	rjmp	.+126    	; 0x11ffe <gpib_write_byte+0x23e>
   11f80:	4b 99       	sbic	0x09, 3	; 9
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   11f82:	6b c0       	rjmp	.+214    	; 0x1205a <gpib_write_byte+0x29a>
   11f84:	80 91 42 1d 	lds	r24, 0x1D42	; 0x801d42 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11f88:	88 23       	and	r24, r24
   11f8a:	09 f4       	brne	.+2      	; 0x11f8e <gpib_write_byte+0x1ce>
   11f8c:	4f cf       	rjmp	.-354    	; 0x11e2c <gpib_write_byte+0x6c>
   11f8e:	2f 81       	ldd	r18, Y+7	; 0x07
   11f90:	38 85       	ldd	r19, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   11f92:	30 64       	ori	r19, 0x40	; 64
   11f94:	38 87       	std	Y+8, r19	; 0x08
   11f96:	2f 83       	std	Y+7, r18	; 0x07
   11f98:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11f9c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11fa0:	85 70       	andi	r24, 0x05	; 5
   11fa2:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NDAC==1>\n");
   11fa4:	89 2b       	or	r24, r25
   11fa6:	09 f4       	brne	.+2      	; 0x11faa <gpib_write_byte+0x1ea>
   11fa8:	5c c0       	rjmp	.+184    	; 0x12062 <gpib_write_byte+0x2a2>
                }
                break;

            ///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   11faa:	1f 92       	push	r1
   11fac:	7f 92       	push	r7
   11fae:	6f 92       	push	r6
   11fb0:	26 c0       	rjmp	.+76     	; 0x11ffe <gpib_write_byte+0x23e>
				GPIB_BUS_SETTLE();			// give some time

				gpib_bus_read_init(0);		// Free BUS, NOT busy
   11fb2:	21 98       	cbi	0x04, 1	; 4
   11fb4:	3d e0       	ldi	r19, 0x0D	; 13
   11fb6:	3a 95       	dec	r19
   11fb8:	f1 f7       	brne	.-4      	; 0x11fb6 <gpib_write_byte+0x1f6>

                gpib_timeout_set(HTIMEOUT);
   11fba:	00 00       	nop
   11fbc:	80 e0       	ldi	r24, 0x00	; 0
   11fbe:	90 e0       	ldi	r25, 0x00	; 0
   11fc0:	c5 dd       	rcall	.-1142   	; 0x11b4c <gpib_bus_read_init>
   11fc2:	64 ef       	ldi	r22, 0xF4	; 244
   11fc4:	71 e0       	ldi	r23, 0x01	; 1
                tx_state = GPIB_TX_WAIT_FOR_DAV_HI;
   11fc6:	80 e0       	ldi	r24, 0x00	; 0
                break;
   11fc8:	90 e0       	ldi	r25, 0x00	; 0

			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
   11fca:	b6 dd       	rcall	.-1172   	; 0x11b38 <gpib_timeout_set>
   11fcc:	17 e0       	ldi	r17, 0x07	; 7
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11fce:	2e cf       	rjmp	.-420    	; 0x11e2c <gpib_write_byte+0x6c>
   11fd0:	19 99       	sbic	0x03, 1	; 3
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
                    break;
                }
                if (gpib_timeout_test())
   11fd2:	45 c0       	rjmp	.+138    	; 0x1205e <gpib_write_byte+0x29e>
   11fd4:	80 91 42 1d 	lds	r24, 0x1D42	; 0x801d42 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11fd8:	88 23       	and	r24, r24
   11fda:	09 f4       	brne	.+2      	; 0x11fde <gpib_write_byte+0x21e>
   11fdc:	27 cf       	rjmp	.-434    	; 0x11e2c <gpib_write_byte+0x6c>
   11fde:	8f 81       	ldd	r24, Y+7	; 0x07
   11fe0:	98 85       	ldd	r25, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   11fe2:	90 64       	ori	r25, 0x40	; 64
   11fe4:	98 87       	std	Y+8, r25	; 0x08
   11fe6:	8f 83       	std	Y+7, r24	; 0x07
   11fe8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   11fec:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   11ff0:	85 70       	andi	r24, 0x05	; 5
                        printf("<BUS waiting for DAV==1>\n");
   11ff2:	99 27       	eor	r25, r25
   11ff4:	89 2b       	or	r24, r25
   11ff6:	a9 f1       	breq	.+106    	; 0x12062 <gpib_write_byte+0x2a2>
   11ff8:	1f 92       	push	r1
   11ffa:	df 92       	push	r13
   11ffc:	cf 92       	push	r12
   11ffe:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   12002:	0f 90       	pop	r0
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
#if SDEBUG
                if(debuglevel & (1+4))
   12004:	0f 90       	pop	r0
   12006:	0f 90       	pop	r0
   12008:	2c c0       	rjmp	.+88     	; 0x12062 <gpib_write_byte+0x2a2>
   1200a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1200e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12012:	85 70       	andi	r24, 0x05	; 5
                    printf("<NRFD=%d,NDAV=%d>\n", GPIB_PIN_TST(NRFD),GPIB_PIN_TST(NDAC));
   12014:	99 27       	eor	r25, r25
   12016:	89 2b       	or	r24, r25
   12018:	c1 f0       	breq	.+48     	; 0x1204a <gpib_write_byte+0x28a>
   1201a:	99 b1       	in	r25, 0x09	; 9
   1201c:	89 b1       	in	r24, 0x09	; 9
   1201e:	93 fb       	bst	r25, 3
   12020:	99 27       	eor	r25, r25
   12022:	90 f9       	bld	r25, 0
   12024:	1f 92       	push	r1
   12026:	9f 93       	push	r25
   12028:	82 fb       	bst	r24, 2
   1202a:	88 27       	eor	r24, r24
   1202c:	80 f9       	bld	r24, 0
   1202e:	1f 92       	push	r1
   12030:	8f 93       	push	r24
   12032:	81 ef       	ldi	r24, 0xF1	; 241
   12034:	90 e1       	ldi	r25, 0x10	; 16
   12036:	1f 92       	push	r1
   12038:	9f 93       	push	r25
   1203a:	8f 93       	push	r24
   1203c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   12040:	0f b6       	in	r0, 0x3f	; 63
#endif
// Free BUS, BUSY on error
				gpib_bus_read_init(1);		
   12042:	f8 94       	cli
   12044:	de bf       	out	0x3e, r29	; 62
   12046:	0f be       	out	0x3f, r0	; 63
   12048:	cd bf       	out	0x3d, r28	; 61
                tx_state = GPIB_TX_DONE;
                break;
   1204a:	81 e0       	ldi	r24, 0x01	; 1
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
   1204c:	90 e0       	ldi	r25, 0x00	; 0
   1204e:	7e dd       	rcall	.-1284   	; 0x11b4c <gpib_bus_read_init>
   12050:	0a c0       	rjmp	.+20     	; 0x12066 <gpib_write_byte+0x2a6>
   12052:	1a 30       	cpi	r17, 0x0A	; 10

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   12054:	09 f0       	breq	.+2      	; 0x12058 <gpib_write_byte+0x298>
   12056:	ea ce       	rjmp	.-556    	; 0x11e2c <gpib_write_byte+0x6c>
			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
   12058:	06 c0       	rjmp	.+12     	; 0x12066 <gpib_write_byte+0x2a6>
   1205a:	16 e0       	ldi	r17, 0x06	; 6
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   1205c:	e7 ce       	rjmp	.-562    	; 0x11e2c <gpib_write_byte+0x6c>
   1205e:	18 e0       	ldi	r17, 0x08	; 8
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   12060:	e5 ce       	rjmp	.-566    	; 0x11e2c <gpib_write_byte+0x6c>
   12062:	19 e0       	ldi	r17, 0x09	; 9
   12064:	e3 ce       	rjmp	.-570    	; 0x11e2c <gpib_write_byte+0x6c>
   12066:	8f 81       	ldd	r24, Y+7	; 0x07
   12068:	98 85       	ldd	r25, Y+8	; 0x08
   1206a:	28 96       	adiw	r28, 0x08	; 8
   1206c:	0f b6       	in	r0, 0x3f	; 63
   1206e:	f8 94       	cli
   12070:	de bf       	out	0x3e, r29	; 62
   12072:	0f be       	out	0x3f, r0	; 63
   12074:	cd bf       	out	0x3d, r28	; 61
   12076:	df 91       	pop	r29
   12078:	cf 91       	pop	r28
   1207a:	1f 91       	pop	r17
   1207c:	ef 90       	pop	r14
   1207e:	df 90       	pop	r13
   12080:	cf 90       	pop	r12
   12082:	8f 90       	pop	r8
   12084:	7f 90       	pop	r7
   12086:	6f 90       	pop	r6
   12088:	4f 90       	pop	r4
   1208a:	3f 90       	pop	r3
   1208c:	2f 90       	pop	r2
   1208e:	08 95       	ret

00012090 <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   12090:	cf 93       	push	r28
   12092:	df 93       	push	r29
   12094:	ec 01       	movw	r28, r24
    if(fo == NULL)
   12096:	89 2b       	or	r24, r25
   12098:	21 f4       	brne	.+8      	; 0x120a2 <gpib_decode_header+0x12>
        fo = stdout;
   1209a:	c0 91 1c 1d 	lds	r28, 0x1D1C	; 0x801d1c <__iob+0x2>
   1209e:	d0 91 1d 1d 	lds	r29, 0x1D1D	; 0x801d1d <__iob+0x3>
        
    fprintf(fo,"===========================================\n");
   120a2:	be 01       	movw	r22, r28
   120a4:	80 ed       	ldi	r24, 0xD0	; 208
   120a6:	9b e0       	ldi	r25, 0x0B	; 11
   120a8:	0e 94 21 7b 	call	0xf642	; 0xf642 <fputs>
    fprintf(fo,"GPIB bus state\n");
   120ac:	be 01       	movw	r22, r28
   120ae:	8d ef       	ldi	r24, 0xFD	; 253
   120b0:	9b e0       	ldi	r25, 0x0B	; 11
   120b2:	0e 94 21 7b 	call	0xf642	; 0xf642 <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   120b6:	be 01       	movw	r22, r28
   120b8:	8d e0       	ldi	r24, 0x0D	; 13
   120ba:	9c e0       	ldi	r25, 0x0C	; 12
   120bc:	0e 94 21 7b 	call	0xf642	; 0xf642 <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   120c0:	be 01       	movw	r22, r28
   120c2:	81 e2       	ldi	r24, 0x21	; 33
   120c4:	9c e0       	ldi	r25, 0x0C	; 12
   120c6:	0e 94 21 7b 	call	0xf642	; 0xf642 <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   120ca:	be 01       	movw	r22, r28
   120cc:	84 e4       	ldi	r24, 0x44	; 68
   120ce:	9c e0       	ldi	r25, 0x0C	; 12
   120d0:	0e 94 21 7b 	call	0xf642	; 0xf642 <fputs>
    fprintf(fo,"     A = ATN\n");
   120d4:	be 01       	movw	r22, r28
   120d6:	8e e6       	ldi	r24, 0x6E	; 110
   120d8:	9c e0       	ldi	r25, 0x0C	; 12
   120da:	0e 94 21 7b 	call	0xf642	; 0xf642 <fputs>
    fprintf(fo,"      E = EOI\n");
   120de:	be 01       	movw	r22, r28
   120e0:	8c e7       	ldi	r24, 0x7C	; 124
   120e2:	9c e0       	ldi	r25, 0x0C	; 12
   120e4:	0e 94 21 7b 	call	0xf642	; 0xf642 <fputs>
    fprintf(fo,"       S = SRQ\n");
   120e8:	be 01       	movw	r22, r28
   120ea:	8b e8       	ldi	r24, 0x8B	; 139
   120ec:	9c e0       	ldi	r25, 0x0C	; 12
   120ee:	0e 94 21 7b 	call	0xf642	; 0xf642 <fputs>
    fprintf(fo,"        R = REN\n");
   120f2:	be 01       	movw	r22, r28
   120f4:	8b e9       	ldi	r24, 0x9B	; 155
   120f6:	9c e0       	ldi	r25, 0x0C	; 12
   120f8:	0e 94 21 7b 	call	0xf642	; 0xf642 <fputs>
    fprintf(fo,"         I = IFC\n");
   120fc:	be 01       	movw	r22, r28
   120fe:	8c ea       	ldi	r24, 0xAC	; 172
   12100:	9c e0       	ldi	r25, 0x0C	; 12
   12102:	0e 94 21 7b 	call	0xf642	; 0xf642 <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   12106:	be 01       	movw	r22, r28
   12108:	8e eb       	ldi	r24, 0xBE	; 190
   1210a:	9c e0       	ldi	r25, 0x0C	; 12
   1210c:	0e 94 21 7b 	call	0xf642	; 0xf642 <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   12110:	be 01       	movw	r22, r28
   12112:	80 ee       	ldi	r24, 0xE0	; 224
   12114:	9c e0       	ldi	r25, 0x0C	; 12
   12116:	0e 94 21 7b 	call	0xf642	; 0xf642 <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   1211a:	be 01       	movw	r22, r28
   1211c:	88 ef       	ldi	r24, 0xF8	; 248
   1211e:	9c e0       	ldi	r25, 0x0C	; 12
   12120:	0e 94 21 7b 	call	0xf642	; 0xf642 <fputs>
    fprintf(fo,"              GPIB commands\n");
   12124:	be 01       	movw	r22, r28
   12126:	83 e1       	ldi	r24, 0x13	; 19
   12128:	9d e0       	ldi	r25, 0x0D	; 13
   1212a:	0e 94 21 7b 	call	0xf642	; 0xf642 <fputs>
}
   1212e:	df 91       	pop	r29
   12130:	cf 91       	pop	r28
   12132:	08 95       	ret

00012134 <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   12134:	a0 e8       	ldi	r26, 0x80	; 128
   12136:	b0 e0       	ldi	r27, 0x00	; 0
   12138:	e0 ea       	ldi	r30, 0xA0	; 160
   1213a:	f0 e9       	ldi	r31, 0x90	; 144
   1213c:	0c 94 3a ec 	jmp	0x1d874	; 0x1d874 <__prologue_saves__+0xc>
   12140:	8c 01       	movw	r16, r24
   12142:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   12144:	19 82       	std	Y+1, r1	; 0x01
   12146:	4c 01       	movw	r8, r24
   12148:	88 24       	eor	r8, r8
   1214a:	44 e0       	ldi	r20, 0x04	; 4
   1214c:	94 22       	and	r9, r20
   1214e:	ce 01       	movw	r24, r28
   12150:	01 96       	adiw	r24, 0x01	; 1
   12152:	6c 01       	movw	r12, r24

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   12154:	62 30       	cpi	r22, 0x02	; 2
   12156:	71 05       	cpc	r23, r1
   12158:	f0 f4       	brcc	.+60     	; 0x12196 <gpib_trace_display+0x62>
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   1215a:	81 14       	cp	r8, r1
   1215c:	91 04       	cpc	r9, r1
   1215e:	29 f4       	brne	.+10     	; 0x1216a <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   12160:	80 2f       	mov	r24, r16

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   12162:	90 ee       	ldi	r25, 0xE0	; 224
   12164:	90 0f       	add	r25, r16
   12166:	9f 35       	cpi	r25, 0x5F	; 95
   12168:	08 f0       	brcs	.+2      	; 0x1216c <gpib_trace_display+0x38>
    str[0] = 0;

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
   1216a:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   1216c:	1f 92       	push	r1
   1216e:	8f 93       	push	r24
   12170:	c8 01       	movw	r24, r16
   12172:	99 27       	eor	r25, r25
   12174:	9f 93       	push	r25
   12176:	8f 93       	push	r24
   12178:	88 ee       	ldi	r24, 0xE8	; 232
   1217a:	90 e1       	ldi	r25, 0x10	; 16
   1217c:	1f 92       	push	r1
   1217e:	9f 93       	push	r25
   12180:	8f 93       	push	r24
   12182:	df 92       	push	r13
   12184:	cf 92       	push	r12
   12186:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <sprintf_P>
   1218a:	0f b6       	in	r0, 0x3f	; 63
   1218c:	f8 94       	cli
   1218e:	de bf       	out	0x3e, r29	; 62
   12190:	0f be       	out	0x3f, r0	; 63
   12192:	cd bf       	out	0x3d, r28	; 61
   12194:	0e c0       	rjmp	.+28     	; 0x121b2 <gpib_trace_display+0x7e>
    }
    else
    {
        sprintf(str, "     ");
   12196:	82 ee       	ldi	r24, 0xE2	; 226
   12198:	90 e1       	ldi	r25, 0x10	; 16
   1219a:	1f 92       	push	r1
   1219c:	9f 93       	push	r25
   1219e:	8f 93       	push	r24
   121a0:	df 92       	push	r13
   121a2:	cf 92       	push	r12
   121a4:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <sprintf_P>
   121a8:	0f 90       	pop	r0
   121aa:	0f 90       	pop	r0
   121ac:	0f 90       	pop	r0
   121ae:	0f 90       	pop	r0
   121b0:	0f 90       	pop	r0
    }

    tmp = str + strlen(str);
   121b2:	f6 01       	movw	r30, r12
   121b4:	01 90       	ld	r0, Z+
   121b6:	00 20       	and	r0, r0
   121b8:	e9 f7       	brne	.-6      	; 0x121b4 <gpib_trace_display+0x80>
   121ba:	31 97       	sbiw	r30, 0x01	; 1
   121bc:	cf 01       	movw	r24, r30
   121be:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   121c0:	81 14       	cp	r8, r1
   121c2:	91 04       	cpc	r9, r1
   121c4:	11 f0       	breq	.+4      	; 0x121ca <gpib_trace_display+0x96>
        *tmp++ = 'A';
   121c6:	21 e4       	ldi	r18, 0x41	; 65
   121c8:	01 c0       	rjmp	.+2      	; 0x121cc <gpib_trace_display+0x98>
    else
        *tmp++ = '-';
   121ca:	2d e2       	ldi	r18, 0x2D	; 45
   121cc:	20 83       	st	Z, r18
   121ce:	dc 01       	movw	r26, r24
   121d0:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   121d2:	10 ff       	sbrs	r17, 0
   121d4:	02 c0       	rjmp	.+4      	; 0x121da <gpib_trace_display+0xa6>
        *tmp++ = 'E';
   121d6:	25 e4       	ldi	r18, 0x45	; 69
   121d8:	01 c0       	rjmp	.+2      	; 0x121dc <gpib_trace_display+0xa8>
    else
        *tmp++ = '-';
   121da:	2d e2       	ldi	r18, 0x2D	; 45
   121dc:	fc 01       	movw	r30, r24
   121de:	20 83       	st	Z, r18
   121e0:	fd 01       	movw	r30, r26
   121e2:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   121e4:	11 ff       	sbrs	r17, 1
   121e6:	02 c0       	rjmp	.+4      	; 0x121ec <gpib_trace_display+0xb8>
        *tmp++ = 'S';
   121e8:	83 e5       	ldi	r24, 0x53	; 83
   121ea:	01 c0       	rjmp	.+2      	; 0x121ee <gpib_trace_display+0xba>
    else
        *tmp++ = '-';
   121ec:	8d e2       	ldi	r24, 0x2D	; 45
   121ee:	8c 93       	st	X, r24
   121f0:	df 01       	movw	r26, r30
   121f2:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   121f4:	13 ff       	sbrs	r17, 3
   121f6:	02 c0       	rjmp	.+4      	; 0x121fc <gpib_trace_display+0xc8>
        *tmp++ = 'R';
   121f8:	82 e5       	ldi	r24, 0x52	; 82
   121fa:	01 c0       	rjmp	.+2      	; 0x121fe <gpib_trace_display+0xca>
    else
        *tmp++ = '-';
   121fc:	8d e2       	ldi	r24, 0x2D	; 45
   121fe:	80 83       	st	Z, r24
   12200:	fd 01       	movw	r30, r26
   12202:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   12204:	14 ff       	sbrs	r17, 4
   12206:	02 c0       	rjmp	.+4      	; 0x1220c <gpib_trace_display+0xd8>
        *tmp++ = 'I';
   12208:	89 e4       	ldi	r24, 0x49	; 73
   1220a:	01 c0       	rjmp	.+2      	; 0x1220e <gpib_trace_display+0xda>
    else
        *tmp++ = '-';
   1220c:	8d e2       	ldi	r24, 0x2D	; 45
   1220e:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   12210:	a1 14       	cp	r10, r1
   12212:	b1 04       	cpc	r11, r1
   12214:	d1 f4       	brne	.+52     	; 0x1224a <gpib_trace_display+0x116>
   12216:	df 01       	movw	r26, r30
   12218:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   1221a:	15 ff       	sbrs	r17, 5
   1221c:	02 c0       	rjmp	.+4      	; 0x12222 <gpib_trace_display+0xee>
            *tmp++ = 'P';
   1221e:	80 e5       	ldi	r24, 0x50	; 80
   12220:	01 c0       	rjmp	.+2      	; 0x12224 <gpib_trace_display+0xf0>
        else
            *tmp++ = '-';
   12222:	8d e2       	ldi	r24, 0x2D	; 45
   12224:	80 83       	st	Z, r24
   12226:	fd 01       	movw	r30, r26
   12228:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   1222a:	16 ff       	sbrs	r17, 6
   1222c:	02 c0       	rjmp	.+4      	; 0x12232 <gpib_trace_display+0xfe>
            *tmp++ = 'T';
   1222e:	84 e5       	ldi	r24, 0x54	; 84
   12230:	01 c0       	rjmp	.+2      	; 0x12234 <gpib_trace_display+0x100>
        else
            *tmp++ = '-';
   12232:	8d e2       	ldi	r24, 0x2D	; 45
   12234:	8c 93       	st	X, r24
   12236:	cf 01       	movw	r24, r30
   12238:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   1223a:	7c 01       	movw	r14, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   1223c:	17 ff       	sbrs	r17, 7
   1223e:	02 c0       	rjmp	.+4      	; 0x12244 <gpib_trace_display+0x110>
            *tmp++ = 'B';
   12240:	82 e4       	ldi	r24, 0x42	; 66
   12242:	01 c0       	rjmp	.+2      	; 0x12246 <gpib_trace_display+0x112>
        else
            *tmp++ = '-';
   12244:	8d e2       	ldi	r24, 0x2D	; 45
   12246:	80 83       	st	Z, r24
   12248:	08 c0       	rjmp	.+16     	; 0x1225a <gpib_trace_display+0x126>
    }
    else
    {
        // not used when tracing
        *tmp++ = '-';
   1224a:	8d e2       	ldi	r24, 0x2D	; 45
   1224c:	80 83       	st	Z, r24
        *tmp++ = '-';
   1224e:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   12250:	7f 01       	movw	r14, r30
   12252:	43 e0       	ldi	r20, 0x03	; 3
   12254:	e4 0e       	add	r14, r20
   12256:	f1 1c       	adc	r15, r1
   12258:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   1225a:	f7 01       	movw	r30, r14
   1225c:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   1225e:	f1 e0       	ldi	r31, 0x01	; 1
   12260:	af 1a       	sub	r10, r31
   12262:	b1 08       	sbc	r11, r1
   12264:	42 e0       	ldi	r20, 0x02	; 2
   12266:	a4 16       	cp	r10, r20
   12268:	b1 04       	cpc	r11, r1
   1226a:	f0 f4       	brcc	.+60     	; 0x122a8 <gpib_trace_display+0x174>
    {
        if(status & DAV_FLAG)
   1226c:	15 ff       	sbrs	r17, 5
   1226e:	03 c0       	rjmp	.+6      	; 0x12276 <gpib_trace_display+0x142>
            strcat(str,"  DAV");
   12270:	60 e3       	ldi	r22, 0x30	; 48
   12272:	7d e0       	ldi	r23, 0x0D	; 13
   12274:	02 c0       	rjmp	.+4      	; 0x1227a <gpib_trace_display+0x146>
        else
            strcat(str,"     ");
   12276:	60 e6       	ldi	r22, 0x60	; 96
   12278:	78 e0       	ldi	r23, 0x08	; 8
   1227a:	c6 01       	movw	r24, r12
   1227c:	0e 94 3b 32 	call	0x6476	; 0x6476 <strcat>
        if(status & NRFD_FLAG)
   12280:	16 ff       	sbrs	r17, 6
   12282:	03 c0       	rjmp	.+6      	; 0x1228a <gpib_trace_display+0x156>
            strcat(str," NRFD");
   12284:	66 e3       	ldi	r22, 0x36	; 54
   12286:	7d e0       	ldi	r23, 0x0D	; 13
   12288:	02 c0       	rjmp	.+4      	; 0x1228e <gpib_trace_display+0x15a>
        else
            strcat(str,"     ");
   1228a:	60 e6       	ldi	r22, 0x60	; 96
   1228c:	78 e0       	ldi	r23, 0x08	; 8
   1228e:	c6 01       	movw	r24, r12
   12290:	0e 94 3b 32 	call	0x6476	; 0x6476 <strcat>
        if(status & NDAC_FLAG)
   12294:	17 ff       	sbrs	r17, 7
   12296:	03 c0       	rjmp	.+6      	; 0x1229e <gpib_trace_display+0x16a>
            strcat(str," NDAC");
   12298:	6c e3       	ldi	r22, 0x3C	; 60
   1229a:	7d e0       	ldi	r23, 0x0D	; 13
   1229c:	02 c0       	rjmp	.+4      	; 0x122a2 <gpib_trace_display+0x16e>
        else
            strcat(str,"     ");
   1229e:	60 e6       	ldi	r22, 0x60	; 96
   122a0:	78 e0       	ldi	r23, 0x08	; 8
   122a2:	c6 01       	movw	r24, r12
   122a4:	0e 94 3b 32 	call	0x6476	; 0x6476 <strcat>
    }

    if( (status & ATN_FLAG) )
   122a8:	81 14       	cp	r8, r1
   122aa:	91 04       	cpc	r9, r1
   122ac:	09 f4       	brne	.+2      	; 0x122b0 <gpib_trace_display+0x17c>
   122ae:	58 c0       	rjmp	.+176    	; 0x12360 <gpib_trace_display+0x22c>
    {
        int i;
        int cmd = status & CMD_MASK;
   122b0:	c8 01       	movw	r24, r16
   122b2:	8f 77       	andi	r24, 0x7F	; 127
   122b4:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   122b6:	9c 01       	movw	r18, r24
   122b8:	20 52       	subi	r18, 0x20	; 32
   122ba:	31 09       	sbc	r19, r1
   122bc:	2f 31       	cpi	r18, 0x1F	; 31
   122be:	31 05       	cpc	r19, r1
   122c0:	38 f4       	brcc	.+14     	; 0x122d0 <gpib_trace_display+0x19c>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   122c2:	0f 71       	andi	r16, 0x1F	; 31
   122c4:	11 27       	eor	r17, r17
   122c6:	1f 93       	push	r17
   122c8:	0f 93       	push	r16
   122ca:	87 ed       	ldi	r24, 0xD7	; 215
   122cc:	90 e1       	ldi	r25, 0x10	; 16
   122ce:	0c c0       	rjmp	.+24     	; 0x122e8 <gpib_trace_display+0x1b4>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   122d0:	9c 01       	movw	r18, r24
   122d2:	20 54       	subi	r18, 0x40	; 64
   122d4:	31 09       	sbc	r19, r1
   122d6:	2f 30       	cpi	r18, 0x0F	; 15
   122d8:	31 05       	cpc	r19, r1
   122da:	98 f4       	brcc	.+38     	; 0x12302 <gpib_trace_display+0x1ce>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   122dc:	0f 71       	andi	r16, 0x1F	; 31
   122de:	11 27       	eor	r17, r17
   122e0:	1f 93       	push	r17
   122e2:	0f 93       	push	r16
   122e4:	8c ec       	ldi	r24, 0xCC	; 204
   122e6:	90 e1       	ldi	r25, 0x10	; 16
   122e8:	1f 92       	push	r1
   122ea:	9f 93       	push	r25
   122ec:	8f 93       	push	r24
   122ee:	ff 92       	push	r15
   122f0:	ef 92       	push	r14
   122f2:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <sprintf_P>
   122f6:	0f b6       	in	r0, 0x3f	; 63
   122f8:	f8 94       	cli
   122fa:	de bf       	out	0x3e, r29	; 62
   122fc:	0f be       	out	0x3f, r0	; 63
   122fe:	cd bf       	out	0x3d, r28	; 61
   12300:	2f c0       	rjmp	.+94     	; 0x12360 <gpib_trace_display+0x22c>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   12302:	9c 01       	movw	r18, r24
   12304:	20 56       	subi	r18, 0x60	; 96
   12306:	31 09       	sbc	r19, r1
   12308:	20 31       	cpi	r18, 0x10	; 16
   1230a:	31 05       	cpc	r19, r1
   1230c:	28 f0       	brcs	.+10     	; 0x12318 <gpib_trace_display+0x1e4>
   1230e:	e9 e8       	ldi	r30, 0x89	; 137
   12310:	f1 e0       	ldi	r31, 0x01	; 1
   12312:	00 e0       	ldi	r16, 0x00	; 0
   12314:	10 e0       	ldi	r17, 0x00	; 0
   12316:	09 c0       	rjmp	.+18     	; 0x1232a <gpib_trace_display+0x1f6>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   12318:	0f 71       	andi	r16, 0x1F	; 31
   1231a:	11 27       	eor	r17, r17
   1231c:	1f 93       	push	r17
   1231e:	0f 93       	push	r16
   12320:	81 ec       	ldi	r24, 0xC1	; 193
   12322:	90 e1       	ldi	r25, 0x10	; 16
   12324:	e1 cf       	rjmp	.-62     	; 0x122e8 <gpib_trace_display+0x1b4>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   12326:	0f 5f       	subi	r16, 0xFF	; 255
   12328:	1f 4f       	sbci	r17, 0xFF	; 255
   1232a:	20 81       	ld	r18, Z
   1232c:	31 81       	ldd	r19, Z+1	; 0x01
   1232e:	2f 3f       	cpi	r18, 0xFF	; 255
   12330:	4f ef       	ldi	r20, 0xFF	; 255
   12332:	34 07       	cpc	r19, r20
   12334:	a9 f0       	breq	.+42     	; 0x12360 <gpib_trace_display+0x22c>
   12336:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   12338:	82 17       	cp	r24, r18
   1233a:	93 07       	cpc	r25, r19
   1233c:	a1 f7       	brne	.-24     	; 0x12326 <gpib_trace_display+0x1f2>
                {
                    strcat(tmp," ");
   1233e:	64 e6       	ldi	r22, 0x64	; 100
   12340:	78 e0       	ldi	r23, 0x08	; 8
   12342:	c7 01       	movw	r24, r14
   12344:	0e 94 3b 32 	call	0x6476	; 0x6476 <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   12348:	00 0f       	add	r16, r16
   1234a:	11 1f       	adc	r17, r17
   1234c:	00 0f       	add	r16, r16
   1234e:	11 1f       	adc	r17, r17
   12350:	f8 01       	movw	r30, r16
   12352:	e7 57       	subi	r30, 0x77	; 119
   12354:	fe 4f       	sbci	r31, 0xFE	; 254
   12356:	62 81       	ldd	r22, Z+2	; 0x02
   12358:	73 81       	ldd	r23, Z+3	; 0x03
   1235a:	c7 01       	movw	r24, r14
   1235c:	0e 94 3b 32 	call	0x6476	; 0x6476 <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   12360:	20 91 c0 19 	lds	r18, 0x19C0	; 0x8019c0 <gpib_log_fp>
   12364:	30 91 c1 19 	lds	r19, 0x19C1	; 0x8019c1 <gpib_log_fp+0x1>
   12368:	80 91 1c 1d 	lds	r24, 0x1D1C	; 0x801d1c <__iob+0x2>
   1236c:	90 91 1d 1d 	lds	r25, 0x1D1D	; 0x801d1d <__iob+0x3>
   12370:	23 2b       	or	r18, r19
   12372:	21 f4       	brne	.+8      	; 0x1237c <gpib_trace_display+0x248>
        gpib_log_fp = stdout;
   12374:	90 93 c1 19 	sts	0x19C1, r25	; 0x8019c1 <gpib_log_fp+0x1>
   12378:	80 93 c0 19 	sts	0x19C0, r24	; 0x8019c0 <gpib_log_fp>

    // Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   1237c:	20 91 c0 19 	lds	r18, 0x19C0	; 0x8019c0 <gpib_log_fp>
   12380:	30 91 c1 19 	lds	r19, 0x19C1	; 0x8019c1 <gpib_log_fp+0x1>
   12384:	82 17       	cp	r24, r18
   12386:	93 07       	cpc	r25, r19
   12388:	19 f0       	breq	.+6      	; 0x12390 <gpib_trace_display+0x25c>
        puts(str);
   1238a:	c6 01       	movw	r24, r12
   1238c:	0e 94 39 7b 	call	0xf672	; 0xf672 <puts>

    // Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   12390:	df 92       	push	r13
   12392:	cf 92       	push	r12
   12394:	82 e4       	ldi	r24, 0x42	; 66
   12396:	9d e0       	ldi	r25, 0x0D	; 13
   12398:	9f 93       	push	r25
   1239a:	8f 93       	push	r24
   1239c:	80 91 c1 19 	lds	r24, 0x19C1	; 0x8019c1 <gpib_log_fp+0x1>
   123a0:	8f 93       	push	r24
   123a2:	80 91 c0 19 	lds	r24, 0x19C0	; 0x8019c0 <gpib_log_fp>
   123a6:	8f 93       	push	r24
   123a8:	0e 94 ea 83 	call	0x107d4	; 0x107d4 <fprintf>
}
   123ac:	0f 90       	pop	r0
   123ae:	0f 90       	pop	r0
   123b0:	0f 90       	pop	r0
   123b2:	0f 90       	pop	r0
   123b4:	0f 90       	pop	r0
   123b6:	0f 90       	pop	r0
   123b8:	c0 58       	subi	r28, 0x80	; 128
   123ba:	df 4f       	sbci	r29, 0xFF	; 255
   123bc:	ec e0       	ldi	r30, 0x0C	; 12
   123be:	0c 94 56 ec 	jmp	0x1d8ac	; 0x1d8ac <__epilogue_restores__+0xc>

000123c2 <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   123c2:	af 92       	push	r10
   123c4:	bf 92       	push	r11
   123c6:	cf 92       	push	r12
   123c8:	df 92       	push	r13
   123ca:	ff 92       	push	r15
   123cc:	0f 93       	push	r16
   123ce:	1f 93       	push	r17
   123d0:	cf 93       	push	r28
   123d2:	df 93       	push	r29

    ch = 0;
    control_last = 0;

    // If we have an unread state it has already been traced!
    if(gpib_unread_f)
   123d4:	20 91 bf 19 	lds	r18, 0x19BF	; 0x8019bf <gpib_unread_f>
   123d8:	22 23       	and	r18, r18
   123da:	39 f0       	breq	.+14     	; 0x123ea <gpib_read_byte+0x28>
    {
        gpib_unread_f = 0;
   123dc:	10 92 bf 19 	sts	0x19BF, r1	; 0x8019bf <gpib_unread_f>
        return(gpib_unread_data);
   123e0:	80 91 4d 1f 	lds	r24, 0x1F4D	; 0x801f4d <gpib_unread_data>
   123e4:	90 91 4e 1f 	lds	r25, 0x1F4E	; 0x801f4e <gpib_unread_data+0x1>
   123e8:	b8 c0       	rjmp	.+368    	; 0x1255a <gpib_read_byte+0x198>
   123ea:	6c 01       	movw	r12, r24
    }

	gpib_bus_read_init(1); // Busy until we are ready
   123ec:	81 e0       	ldi	r24, 0x01	; 1
   123ee:	90 e0       	ldi	r25, 0x00	; 0
   123f0:	ad db       	rcall	.-2214   	; 0x11b4c <gpib_bus_read_init>


///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
    if(trace)
   123f2:	c1 14       	cp	r12, r1
   123f4:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   123f6:	51 f0       	breq	.+20     	; 0x1240c <gpib_read_byte+0x4a>
   123f8:	c7 dc       	rcall	.-1650   	; 0x11d88 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   123fa:	8c 01       	movw	r16, r24
   123fc:	d5 dc       	rcall	.-1622   	; 0x11da8 <gpib_handshake_pin_read>
   123fe:	08 2b       	or	r16, r24
        gpib_trace_display(control_last, TRACE_BUS);
   12400:	19 2b       	or	r17, r25
   12402:	62 e0       	ldi	r22, 0x02	; 2
   12404:	70 e0       	ldi	r23, 0x00	; 0
   12406:	c8 01       	movw	r24, r16
   12408:	95 de       	rcall	.-726    	; 0x12134 <gpib_trace_display>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   1240a:	02 c0       	rjmp	.+4      	; 0x12410 <gpib_read_byte+0x4e>
   1240c:	00 e0       	ldi	r16, 0x00	; 0
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   1240e:	10 e0       	ldi	r17, 0x00	; 0
   12410:	f1 2c       	mov	r15, r1
   12412:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(uart_keyhit(0))
   12414:	d0 e0       	ldi	r29, 0x00	; 0
   12416:	80 e0       	ldi	r24, 0x00	; 0
   12418:	0e 94 88 2c 	call	0x5910	; 0x5910 <uart_keyhit>
   1241c:	89 2b       	or	r24, r25
		if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   1241e:	09 f0       	breq	.+2      	; 0x12422 <gpib_read_byte+0x60>
   12420:	78 c0       	rjmp	.+240    	; 0x12512 <gpib_read_byte+0x150>
        {
            ch |= IFC_FLAG;
   12422:	4c 99       	sbic	0x09, 4	; 9
			gpib_bus_init();
   12424:	03 c0       	rjmp	.+6      	; 0x1242c <gpib_read_byte+0x6a>
   12426:	d0 61       	ori	r29, 0x10	; 16
   12428:	b4 db       	rcall	.-2200   	; 0x11b92 <gpib_bus_init>
            break;
        }


        switch(rx_state)
   1242a:	73 c0       	rjmp	.+230    	; 0x12512 <gpib_read_byte+0x150>
   1242c:	8f 2d       	mov	r24, r15
   1242e:	90 e0       	ldi	r25, 0x00	; 0
   12430:	89 30       	cpi	r24, 0x09	; 9
   12432:	91 05       	cpc	r25, r1
   12434:	08 f0       	brcs	.+2      	; 0x12438 <gpib_read_byte+0x76>
   12436:	51 c0       	rjmp	.+162    	; 0x124da <gpib_read_byte+0x118>
   12438:	fc 01       	movw	r30, r24
   1243a:	e9 53       	subi	r30, 0x39	; 57
   1243c:	ff 4f       	sbci	r31, 0xFF	; 255
   1243e:	0c 94 05 ec 	jmp	0x1d80a	; 0x1d80a <__tablejump2__>
   12442:	52 98       	cbi	0x0a, 2	; 10
   12444:	8d e0       	ldi	r24, 0x0D	; 13
   12446:	8a 95       	dec	r24
   12448:	f1 f7       	brne	.-4      	; 0x12446 <gpib_read_byte+0x84>
        {
            case GPIB_RX_START:
                ///@brief Signal that we are ready to ready
                GPIB_PIN_FLOAT_UP(NRFD);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   1244a:	00 00       	nop
   1244c:	ff 24       	eor	r15, r15
   1244e:	f3 94       	inc	r15
                break;

            case GPIB_RX_WAIT_FOR_DAV_LOW:
                ///@brief Wait for Ready acknowledge
                if ( GPIB_PIN_TST(DAV) == 0 )
   12450:	7f c0       	rjmp	.+254    	; 0x12550 <gpib_read_byte+0x18e>
                    rx_state = GPIB_RX_DAV_IS_LOW;
   12452:	19 99       	sbic	0x03, 1	; 3
                break;

// Accept Data
            case GPIB_RX_DAV_IS_LOW:
                GPIB_IO_LOW(NRFD);                // BUSY
   12454:	7d c0       	rjmp	.+250    	; 0x12550 <gpib_read_byte+0x18e>

                ///@brief gpib_bus_read strips command parity if ATN is low at read time
                bus = gpib_bus_read();
   12456:	62 e0       	ldi	r22, 0x02	; 2
   12458:	f6 2e       	mov	r15, r22
   1245a:	7a c0       	rjmp	.+244    	; 0x12550 <gpib_read_byte+0x18e>
   1245c:	5a 98       	cbi	0x0b, 2	; 11
                ch |= bus;
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                control_last = gpib_control_pin_read();
   1245e:	52 9a       	sbi	0x0a, 2	; 10
   12460:	8d dc       	rcall	.-1766   	; 0x11d7c <gpib_bus_read>
   12462:	a8 2e       	mov	r10, r24
   12464:	b1 2c       	mov	r11, r1
                ch |= control_last;
   12466:	90 dc       	rcall	.-1760   	; 0x11d88 <gpib_control_pin_read>
   12468:	8c 01       	movw	r16, r24

                if(trace)
   1246a:	c8 2b       	or	r28, r24
   1246c:	d9 2b       	or	r29, r25
   1246e:	ca 29       	or	r28, r10
                {
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                    control_last |= gpib_handshake_pin_read();
   12470:	db 29       	or	r29, r11
   12472:	c1 14       	cp	r12, r1
   12474:	d1 04       	cpc	r13, r1
                    gpib_trace_display(bus | control_last, TRACE_READ);
   12476:	49 f0       	breq	.+18     	; 0x1248a <gpib_read_byte+0xc8>
   12478:	97 dc       	rcall	.-1746   	; 0x11da8 <gpib_handshake_pin_read>
   1247a:	08 2b       	or	r16, r24
   1247c:	19 2b       	or	r17, r25
   1247e:	61 e0       	ldi	r22, 0x01	; 1
   12480:	70 e0       	ldi	r23, 0x00	; 0
   12482:	c5 01       	movw	r24, r10
   12484:	80 2b       	or	r24, r16
   12486:	91 2b       	or	r25, r17
   12488:	55 de       	rcall	.-854    	; 0x12134 <gpib_trace_display>
                }

                GPIB_PIN_FLOAT_UP(NDAC);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                gpib_timeout_set(HTIMEOUT);
   1248a:	53 98       	cbi	0x0a, 3	; 10
   1248c:	8d e0       	ldi	r24, 0x0D	; 13
   1248e:	8a 95       	dec	r24
   12490:	f1 f7       	brne	.-4      	; 0x1248e <gpib_read_byte+0xcc>
   12492:	00 00       	nop
#if BOARD == 2
				/// FIXME do we want to keep the next state ?
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   12494:	64 ef       	ldi	r22, 0xF4	; 244
   12496:	71 e0       	ldi	r23, 0x01	; 1
   12498:	80 e0       	ldi	r24, 0x00	; 0
/// FIXME We clould add a test for read/write state ??
///@brief V2 boards we can't - not a big deal as the DAV test works anyway
            ///@brief Wait for NDAC float HI

            case GPIB_RX_WAIT_FOR_NDAC_HI:
                if (GPIB_PIN_TST(NDAC) == 1)
   1249a:	90 e0       	ldi	r25, 0x00	; 0
   1249c:	4d db       	rcall	.-2406   	; 0x11b38 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   1249e:	54 e0       	ldi	r21, 0x04	; 4
   124a0:	f5 2e       	mov	r15, r21
   124a2:	56 c0       	rjmp	.+172    	; 0x12550 <gpib_read_byte+0x18e>
   124a4:	4b 9b       	sbis	0x09, 3	; 9
   124a6:	0c c0       	rjmp	.+24     	; 0x124c0 <gpib_read_byte+0xfe>
   124a8:	64 ef       	ldi	r22, 0xF4	; 244
                    rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   124aa:	71 e0       	ldi	r23, 0x01	; 1
   124ac:	80 e0       	ldi	r24, 0x00	; 0
   124ae:	90 e0       	ldi	r25, 0x00	; 0
                }
                break;

            ///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   124b0:	43 db       	rcall	.-2426   	; 0x11b38 <gpib_timeout_set>
   124b2:	44 e0       	ldi	r20, 0x04	; 4
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
   124b4:	f4 2e       	mov	r15, r20
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   124b6:	04 c0       	rjmp	.+8      	; 0x124c0 <gpib_read_byte+0xfe>
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
				}
                if (gpib_timeout_test())
   124b8:	19 9b       	sbis	0x03, 1	; 3
   124ba:	02 c0       	rjmp	.+4      	; 0x124c0 <gpib_read_byte+0xfe>
   124bc:	35 e0       	ldi	r19, 0x05	; 5
                {
                    ch |= TIMEOUT_FLAG;
   124be:	f3 2e       	mov	r15, r19
                    rx_state = GPIB_RX_ERROR;
   124c0:	80 91 42 1d 	lds	r24, 0x1D42	; 0x801d42 <gpib_timer+0x8>
   124c4:	88 23       	and	r24, r24
            case GPIB_RX_ERROR:
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
   124c6:	09 f4       	brne	.+2      	; 0x124ca <gpib_read_byte+0x108>
   124c8:	43 c0       	rjmp	.+134    	; 0x12550 <gpib_read_byte+0x18e>
   124ca:	d0 64       	ori	r29, 0x40	; 64
                break;
        }

        if(trace)
   124cc:	27 e0       	ldi	r18, 0x07	; 7
   124ce:	f2 2e       	mov	r15, r18
   124d0:	3f c0       	rjmp	.+126    	; 0x12550 <gpib_read_byte+0x18e>
   124d2:	81 e0       	ldi	r24, 0x01	; 1
   124d4:	90 e0       	ldi	r25, 0x00	; 0
   124d6:	3a db       	rcall	.-2444   	; 0x11b4c <gpib_bus_read_init>
   124d8:	04 c0       	rjmp	.+8      	; 0x124e2 <gpib_read_byte+0x120>
   124da:	c1 14       	cp	r12, r1
        {
			/// V2 boards can not read all control and handshake bits at once
			/// FIXME We could add a test for read/write state ??
			/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   124dc:	d1 04       	cpc	r13, r1
   124de:	99 f0       	breq	.+38     	; 0x12506 <gpib_read_byte+0x144>
   124e0:	05 c0       	rjmp	.+10     	; 0x124ec <gpib_read_byte+0x12a>
            control |= gpib_handshake_pin_read();
   124e2:	c1 14       	cp	r12, r1
   124e4:	d1 04       	cpc	r13, r1
   124e6:	a9 f0       	breq	.+42     	; 0x12512 <gpib_read_byte+0x150>
   124e8:	98 e0       	ldi	r25, 0x08	; 8
            if(control_last != control)
   124ea:	f9 2e       	mov	r15, r25
   124ec:	4d dc       	rcall	.-1894   	; 0x11d88 <gpib_control_pin_read>
   124ee:	5c 01       	movw	r10, r24
            {
                gpib_trace_display(control, TRACE_BUS);
   124f0:	5b dc       	rcall	.-1866   	; 0x11da8 <gpib_handshake_pin_read>
   124f2:	a8 2a       	or	r10, r24
   124f4:	b9 2a       	or	r11, r25
   124f6:	a0 16       	cp	r10, r16
   124f8:	b1 06       	cpc	r11, r17
   124fa:	31 f0       	breq	.+12     	; 0x12508 <gpib_read_byte+0x146>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   124fc:	62 e0       	ldi	r22, 0x02	; 2
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   124fe:	70 e0       	ldi	r23, 0x00	; 0
   12500:	c5 01       	movw	r24, r10
   12502:	18 de       	rcall	.-976    	; 0x12134 <gpib_trace_display>
   12504:	01 c0       	rjmp	.+2      	; 0x12508 <gpib_read_byte+0x146>
   12506:	58 01       	movw	r10, r16
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   12508:	88 e0       	ldi	r24, 0x08	; 8
   1250a:	f8 16       	cp	r15, r24
   1250c:	11 f0       	breq	.+4      	; 0x12512 <gpib_read_byte+0x150>
   1250e:	85 01       	movw	r16, r10
   12510:	82 cf       	rjmp	.-252    	; 0x12416 <gpib_read_byte+0x54>
   12512:	80 91 47 1f 	lds	r24, 0x1F47	; 0x801f47 <current>
   12516:	90 91 48 1f 	lds	r25, 0x1F48	; 0x801f48 <current+0x1>

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   1251a:	90 93 44 1d 	sts	0x1D44, r25	; 0x801d44 <lastcmd+0x1>
   1251e:	80 93 43 1d 	sts	0x1D43, r24	; 0x801d43 <lastcmd>
   12522:	ce 01       	movw	r24, r28
   12524:	88 27       	eor	r24, r24
        current = 0;
   12526:	90 7d       	andi	r25, 0xD0	; 208
   12528:	89 2b       	or	r24, r25
   1252a:	11 f4       	brne	.+4      	; 0x12530 <gpib_read_byte+0x16e>
   1252c:	d2 fd       	sbrc	r29, 2
   1252e:	05 c0       	rjmp	.+10     	; 0x1253a <gpib_read_byte+0x178>
    else
        current = ch & CMD_MASK;
   12530:	10 92 48 1f 	sts	0x1F48, r1	; 0x801f48 <current+0x1>
   12534:	10 92 47 1f 	sts	0x1F47, r1	; 0x801f47 <current>
   12538:	07 c0       	rjmp	.+14     	; 0x12548 <gpib_read_byte+0x186>
   1253a:	ce 01       	movw	r24, r28
   1253c:	8f 77       	andi	r24, 0x7F	; 127
   1253e:	99 27       	eor	r25, r25
   12540:	90 93 48 1f 	sts	0x1F48, r25	; 0x801f48 <current+0x1>
                }
                break;

            ///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
                rx_state = GPIB_RX_FINISH;        // DONE
   12544:	80 93 47 1f 	sts	0x1F47, r24	; 0x801f47 <current>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   12548:	ce 01       	movw	r24, r28
   1254a:	07 c0       	rjmp	.+14     	; 0x1255a <gpib_read_byte+0x198>
   1254c:	86 e0       	ldi	r24, 0x06	; 6
   1254e:	f8 2e       	mov	r15, r24
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   12550:	c1 14       	cp	r12, r1
   12552:	d1 04       	cpc	r13, r1
   12554:	09 f4       	brne	.+2      	; 0x12558 <gpib_read_byte+0x196>
   12556:	5f cf       	rjmp	.-322    	; 0x12416 <gpib_read_byte+0x54>
   12558:	c9 cf       	rjmp	.-110    	; 0x124ec <gpib_read_byte+0x12a>
   1255a:	df 91       	pop	r29
   1255c:	cf 91       	pop	r28
   1255e:	1f 91       	pop	r17
   12560:	0f 91       	pop	r16
   12562:	ff 90       	pop	r15
   12564:	df 90       	pop	r13
   12566:	cf 90       	pop	r12
   12568:	bf 90       	pop	r11
   1256a:	af 90       	pop	r10
   1256c:	08 95       	ret

0001256e <gpib_decode>:
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   1256e:	60 e0       	ldi	r22, 0x00	; 0
   12570:	70 e0       	ldi	r23, 0x00	; 0
   12572:	e0 cd       	rjmp	.-1088   	; 0x12134 <gpib_trace_display>
   12574:	08 95       	ret

00012576 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   12576:	a0 e0       	ldi	r26, 0x00	; 0
   12578:	b0 e0       	ldi	r27, 0x00	; 0
   1257a:	e1 ec       	ldi	r30, 0xC1	; 193
   1257c:	f2 e9       	ldi	r31, 0x92	; 146
   1257e:	0c 94 3c ec 	jmp	0x1d878	; 0x1d878 <__prologue_saves__+0x10>
   12582:	5b 01       	movw	r10, r22
   12584:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   12586:	fa 01       	movw	r30, r20
   12588:	20 81       	ld	r18, Z
   1258a:	31 81       	ldd	r19, Z+1	; 0x01
   1258c:	22 27       	eor	r18, r18
   1258e:	31 83       	std	Z+1, r19	; 0x01
   12590:	20 83       	st	Z, r18

    if(!size)
   12592:	67 2b       	or	r22, r23
   12594:	21 f0       	breq	.+8      	; 0x1259e <gpib_read_str+0x28>
   12596:	7c 01       	movw	r14, r24
   12598:	c0 e0       	ldi	r28, 0x00	; 0
   1259a:	d0 e0       	ldi	r29, 0x00	; 0
   1259c:	28 c0       	rjmp	.+80     	; 0x125ee <gpib_read_str+0x78>
    {
        if(debuglevel & (1+4))
   1259e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   125a2:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   125a6:	85 70       	andi	r24, 0x05	; 5
   125a8:	99 27       	eor	r25, r25
   125aa:	89 2b       	or	r24, r25
   125ac:	09 f4       	brne	.+2      	; 0x125b0 <gpib_read_str+0x3a>
   125ae:	89 c0       	rjmp	.+274    	; 0x126c2 <gpib_read_str+0x14c>
            printf("gpib_read_str: size = 0\n");
   125b0:	88 ea       	ldi	r24, 0xA8	; 168
   125b2:	90 e1       	ldi	r25, 0x10	; 16
   125b4:	1f 92       	push	r1
   125b6:	9f 93       	push	r25
   125b8:	8f 93       	push	r24
   125ba:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   125be:	0f 90       	pop	r0
   125c0:	0f 90       	pop	r0
   125c2:	0f 90       	pop	r0
   125c4:	7e c0       	rjmp	.+252    	; 0x126c2 <gpib_read_str+0x14c>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   125c6:	80 27       	eor	r24, r16
   125c8:	91 27       	eor	r25, r17
   125ca:	92 fd       	sbrc	r25, 2
   125cc:	2e c0       	rjmp	.+92     	; 0x1262a <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   125ce:	c8 01       	movw	r24, r16
   125d0:	88 27       	eor	r24, r24
   125d2:	94 70       	andi	r25, 0x04	; 4
   125d4:	12 ff       	sbrs	r17, 2
   125d6:	49 c0       	rjmp	.+146    	; 0x1266a <gpib_read_str+0xf4>
            buf[ind] = (val & CMD_MASK);
   125d8:	20 2f       	mov	r18, r16
   125da:	2f 77       	andi	r18, 0x7F	; 127
   125dc:	f7 01       	movw	r30, r14
   125de:	20 83       	st	Z, r18
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;
   125e0:	21 96       	adiw	r28, 0x01	; 1

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   125e2:	89 2b       	or	r24, r25
   125e4:	09 f4       	brne	.+2      	; 0x125e8 <gpib_read_str+0x72>
   125e6:	44 c0       	rjmp	.+136    	; 0x12670 <gpib_read_str+0xfa>
   125e8:	ff ef       	ldi	r31, 0xFF	; 255
   125ea:	ef 1a       	sub	r14, r31
   125ec:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (1+4))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   125ee:	ca 15       	cp	r28, r10
   125f0:	db 05       	cpc	r29, r11
   125f2:	0c f0       	brlt	.+2      	; 0x125f6 <gpib_read_str+0x80>
   125f4:	47 c0       	rjmp	.+142    	; 0x12684 <gpib_read_str+0x10e>
    {
        val = gpib_read_byte(NO_TRACE);
   125f6:	80 e0       	ldi	r24, 0x00	; 0
   125f8:	90 e0       	ldi	r25, 0x00	; 0
   125fa:	e3 de       	rcall	.-570    	; 0x123c2 <gpib_read_byte>
   125fc:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & 256)
   125fe:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12602:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12606:	90 ff       	sbrs	r25, 0
            gpib_decode(val);
   12608:	02 c0       	rjmp	.+4      	; 0x1260e <gpib_read_str+0x98>
   1260a:	c8 01       	movw	r24, r16
#endif
        if(val & ERROR_MASK)
   1260c:	b0 df       	rcall	.-160    	; 0x1256e <gpib_decode>
   1260e:	98 01       	movw	r18, r16
   12610:	22 27       	eor	r18, r18
   12612:	30 7d       	andi	r19, 0xD0	; 208
   12614:	f6 01       	movw	r30, r12
   12616:	80 81       	ld	r24, Z
   12618:	91 81       	ldd	r25, Z+1	; 0x01
   1261a:	21 15       	cp	r18, r1
   1261c:	31 05       	cpc	r19, r1
        {
            *status |= (val & ERROR_MASK);
   1261e:	99 f2       	breq	.-90     	; 0x125c6 <gpib_read_str+0x50>
   12620:	82 2b       	or	r24, r18
   12622:	93 2b       	or	r25, r19
   12624:	91 83       	std	Z+1, r25	; 0x01
            break;
   12626:	80 83       	st	Z, r24
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (1+4))
   12628:	30 c0       	rjmp	.+96     	; 0x1268a <gpib_read_str+0x114>
   1262a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1262e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12632:	85 70       	andi	r24, 0x05	; 5
   12634:	99 27       	eor	r25, r25
   12636:	89 2b       	or	r24, r25
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   12638:	a9 f0       	breq	.+42     	; 0x12664 <gpib_read_str+0xee>
   1263a:	c8 01       	movw	r24, r16
   1263c:	99 27       	eor	r25, r25
   1263e:	9f 93       	push	r25
   12640:	8f 93       	push	r24
   12642:	df 93       	push	r29
   12644:	cf 93       	push	r28
   12646:	8b e7       	ldi	r24, 0x7B	; 123
   12648:	90 e1       	ldi	r25, 0x10	; 16
   1264a:	1f 92       	push	r1
   1264c:	9f 93       	push	r25
   1264e:	8f 93       	push	r24
   12650:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   12654:	ed b7       	in	r30, 0x3d	; 61
   12656:	fe b7       	in	r31, 0x3e	; 62
   12658:	37 96       	adiw	r30, 0x07	; 7
   1265a:	0f b6       	in	r0, 0x3f	; 63
   1265c:	f8 94       	cli
   1265e:	fe bf       	out	0x3e, r31	; 62
            gpib_unread(val);
   12660:	0f be       	out	0x3f, r0	; 63
   12662:	ed bf       	out	0x3d, r30	; 61
   12664:	c8 01       	movw	r24, r16
            break;
   12666:	65 db       	rcall	.-2358   	; 0x11d32 <gpib_unread>
        }

        if(val & ATN_FLAG)
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
   12668:	10 c0       	rjmp	.+32     	; 0x1268a <gpib_read_str+0x114>
   1266a:	f7 01       	movw	r30, r14
   1266c:	00 83       	st	Z, r16
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   1266e:	b8 cf       	rjmp	.-144    	; 0x125e0 <gpib_read_str+0x6a>
   12670:	10 ff       	sbrs	r17, 0
        {

            if(*status & EOI_FLAG)
   12672:	ba cf       	rjmp	.-140    	; 0x125e8 <gpib_read_str+0x72>
   12674:	f6 01       	movw	r30, r12
   12676:	80 81       	ld	r24, Z
   12678:	91 81       	ldd	r25, Z+1	; 0x01
   1267a:	90 fd       	sbrc	r25, 0
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   1267c:	24 c0       	rjmp	.+72     	; 0x126c6 <gpib_read_str+0x150>
   1267e:	91 60       	ori	r25, 0x01	; 1
   12680:	91 83       	std	Z+1, r25	; 0x01
            break;
        }
    }
    if ( ind != size )
   12682:	80 83       	st	Z, r24
   12684:	ca 15       	cp	r28, r10
   12686:	db 05       	cpc	r29, r11
    {
        if(debuglevel & (1+4))
   12688:	f1 f0       	breq	.+60     	; 0x126c6 <gpib_read_str+0x150>
   1268a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1268e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12692:	85 70       	andi	r24, 0x05	; 5
   12694:	99 27       	eor	r25, r25
   12696:	89 2b       	or	r24, r25
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   12698:	b1 f0       	breq	.+44     	; 0x126c6 <gpib_read_str+0x150>
   1269a:	bf 92       	push	r11
   1269c:	af 92       	push	r10
   1269e:	df 93       	push	r29
   126a0:	cf 93       	push	r28
   126a2:	84 e5       	ldi	r24, 0x54	; 84
   126a4:	90 e1       	ldi	r25, 0x10	; 16
   126a6:	1f 92       	push	r1
   126a8:	9f 93       	push	r25
   126aa:	8f 93       	push	r24
   126ac:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   126b0:	ed b7       	in	r30, 0x3d	; 61
   126b2:	fe b7       	in	r31, 0x3e	; 62
   126b4:	37 96       	adiw	r30, 0x07	; 7
   126b6:	0f b6       	in	r0, 0x3f	; 63
   126b8:	f8 94       	cli
   126ba:	fe bf       	out	0x3e, r31	; 62
   126bc:	0f be       	out	0x3f, r0	; 63
   126be:	ed bf       	out	0x3d, r30	; 61
   126c0:	02 c0       	rjmp	.+4      	; 0x126c6 <gpib_read_str+0x150>
   126c2:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return(ind);
}
   126c4:	d0 e0       	ldi	r29, 0x00	; 0
   126c6:	ce 01       	movw	r24, r28
   126c8:	cd b7       	in	r28, 0x3d	; 61
   126ca:	de b7       	in	r29, 0x3e	; 62
   126cc:	ea e0       	ldi	r30, 0x0A	; 10
   126ce:	0c 94 58 ec 	jmp	0x1d8b0	; 0x1d8b0 <__epilogue_restores__+0x10>

000126d2 <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   126d2:	a0 e0       	ldi	r26, 0x00	; 0
   126d4:	b0 e0       	ldi	r27, 0x00	; 0
   126d6:	ef e6       	ldi	r30, 0x6F	; 111
   126d8:	f3 e9       	ldi	r31, 0x93	; 147
   126da:	0c 94 3c ec 	jmp	0x1d878	; 0x1d878 <__prologue_saves__+0x10>
   126de:	8b 01       	movw	r16, r22
   126e0:	7a 01       	movw	r14, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   126e2:	fa 01       	movw	r30, r20
   126e4:	20 81       	ld	r18, Z
   126e6:	31 81       	ldd	r19, Z+1	; 0x01
   126e8:	22 27       	eor	r18, r18
   126ea:	31 83       	std	Z+1, r19	; 0x01
   126ec:	20 83       	st	Z, r18

    if(!size)
   126ee:	67 2b       	or	r22, r23
   126f0:	21 f0       	breq	.+8      	; 0x126fa <gpib_write_str+0x28>
   126f2:	6c 01       	movw	r12, r24
   126f4:	c0 e0       	ldi	r28, 0x00	; 0
   126f6:	d0 e0       	ldi	r29, 0x00	; 0
   126f8:	35 c0       	rjmp	.+106    	; 0x12764 <gpib_write_str+0x92>
    {
        if(debuglevel & (1+4))
   126fa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   126fe:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12702:	85 70       	andi	r24, 0x05	; 5
   12704:	99 27       	eor	r25, r25
   12706:	89 2b       	or	r24, r25
   12708:	09 f4       	brne	.+2      	; 0x1270c <gpib_write_str+0x3a>
   1270a:	54 c0       	rjmp	.+168    	; 0x127b4 <gpib_write_str+0xe2>
            printf("gpib_write_str: size = 0\n");
   1270c:	8a e3       	ldi	r24, 0x3A	; 58
   1270e:	90 e1       	ldi	r25, 0x10	; 16
   12710:	1f 92       	push	r1
   12712:	9f 93       	push	r25
   12714:	8f 93       	push	r24
   12716:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1271a:	0f 90       	pop	r0
   1271c:	0f 90       	pop	r0
   1271e:	0f 90       	pop	r0
   12720:	49 c0       	rjmp	.+146    	; 0x127b4 <gpib_write_str+0xe2>
    }

    while(ind < size)
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   12722:	21 96       	adiw	r28, 0x01	; 1
   12724:	f6 01       	movw	r30, r12
   12726:	81 91       	ld	r24, Z+
   12728:	6f 01       	movw	r12, r30
   1272a:	90 e0       	ldi	r25, 0x00	; 0

        if(*status & ATN_FLAG)
   1272c:	f7 01       	movw	r30, r14
   1272e:	20 81       	ld	r18, Z
   12730:	31 81       	ldd	r19, Z+1	; 0x01
   12732:	32 fd       	sbrc	r19, 2
        {
            ch |= ATN_FLAG;
   12734:	94 60       	ori	r25, 0x04	; 4
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   12736:	30 fd       	sbrc	r19, 0
            ch |= EOI_FLAG;

/// @return Returns

        val = gpib_write_byte(ch);
   12738:	19 c0       	rjmp	.+50     	; 0x1276c <gpib_write_str+0x9a>
        *status |= (val & ERROR_MASK);
   1273a:	42 db       	rcall	.-2428   	; 0x11dc0 <gpib_write_byte>
   1273c:	5c 01       	movw	r10, r24
   1273e:	aa 24       	eor	r10, r10
   12740:	f0 ed       	ldi	r31, 0xD0	; 208
   12742:	bf 22       	and	r11, r31
   12744:	f7 01       	movw	r30, r14
   12746:	20 81       	ld	r18, Z
   12748:	31 81       	ldd	r19, Z+1	; 0x01
   1274a:	2a 29       	or	r18, r10
   1274c:	3b 29       	or	r19, r11
   1274e:	31 83       	std	Z+1, r19	; 0x01

#if SDEBUG
        if(debuglevel & 256)
   12750:	20 83       	st	Z, r18
   12752:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   12756:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
            gpib_decode(val);
   1275a:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   1275c:	08 df       	rcall	.-496    	; 0x1256e <gpib_decode>
   1275e:	a1 14       	cp	r10, r1
   12760:	b1 04       	cpc	r11, r1
    {
        if(debuglevel & (1+4))
            printf("gpib_write_str: size = 0\n");
    }

    while(ind < size)
   12762:	49 f4       	brne	.+18     	; 0x12776 <gpib_write_str+0xa4>
   12764:	c0 17       	cp	r28, r16
   12766:	d1 07       	cpc	r29, r17
   12768:	e4 f2       	brlt	.-72     	; 0x12722 <gpib_write_str+0x50>
        if(*status & ATN_FLAG)
        {
            ch |= ATN_FLAG;
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   1276a:	05 c0       	rjmp	.+10     	; 0x12776 <gpib_write_str+0xa4>
   1276c:	0c 17       	cp	r16, r28
   1276e:	1d 07       	cpc	r17, r29
            ch |= EOI_FLAG;
   12770:	21 f7       	brne	.-56     	; 0x1273a <gpib_write_str+0x68>
   12772:	91 60       	ori	r25, 0x01	; 1
        {
            break;
        }

    }                                             // while(ind < size)
    if ( ind != size )
   12774:	e2 cf       	rjmp	.-60     	; 0x1273a <gpib_write_str+0x68>
   12776:	c0 17       	cp	r28, r16
   12778:	d1 07       	cpc	r29, r17
    {
        if(debuglevel & (1+4))
   1277a:	f1 f0       	breq	.+60     	; 0x127b8 <gpib_write_str+0xe6>
   1277c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12780:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12784:	85 70       	andi	r24, 0x05	; 5
   12786:	99 27       	eor	r25, r25
   12788:	89 2b       	or	r24, r25
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   1278a:	b1 f0       	breq	.+44     	; 0x127b8 <gpib_write_str+0xe6>
   1278c:	1f 93       	push	r17
   1278e:	0f 93       	push	r16
   12790:	df 93       	push	r29
   12792:	cf 93       	push	r28
   12794:	82 e1       	ldi	r24, 0x12	; 18
   12796:	90 e1       	ldi	r25, 0x10	; 16
   12798:	1f 92       	push	r1
   1279a:	9f 93       	push	r25
   1279c:	8f 93       	push	r24
   1279e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   127a2:	8d b7       	in	r24, 0x3d	; 61
   127a4:	9e b7       	in	r25, 0x3e	; 62
   127a6:	07 96       	adiw	r24, 0x07	; 7
   127a8:	0f b6       	in	r0, 0x3f	; 63
   127aa:	f8 94       	cli
   127ac:	9e bf       	out	0x3e, r25	; 62
   127ae:	0f be       	out	0x3f, r0	; 63
   127b0:	8d bf       	out	0x3d, r24	; 61
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;

    if(!size)
   127b2:	02 c0       	rjmp	.+4      	; 0x127b8 <gpib_write_str+0xe6>
   127b4:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(debuglevel & (1+4))
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
    }
    return(ind);
}
   127b6:	d0 e0       	ldi	r29, 0x00	; 0
   127b8:	ce 01       	movw	r24, r28
   127ba:	cd b7       	in	r28, 0x3d	; 61
   127bc:	de b7       	in	r29, 0x3e	; 62
   127be:	ea e0       	ldi	r30, 0x0A	; 10
   127c0:	0c 94 58 ec 	jmp	0x1d8b0	; 0x1d8b0 <__epilogue_restores__+0x10>

000127c4 <gpib_file_init>:
   127c4:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <debuglevel+0x1>
   127c8:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <debuglevel>
   127cc:	8f eb       	ldi	r24, 0xBF	; 191
   127ce:	91 e0       	ldi	r25, 0x01	; 1
   127d0:	0e 94 c8 ba 	call	0x17590	; 0x17590 <POSIX_Read_Config>
   127d4:	9f 93       	push	r25
   127d6:	8f 93       	push	r24
   127d8:	8f eb       	ldi	r24, 0xBF	; 191
   127da:	91 e0       	ldi	r25, 0x01	; 1
   127dc:	9f 93       	push	r25
   127de:	8f 93       	push	r24
   127e0:	80 e5       	ldi	r24, 0x50	; 80
   127e2:	95 e1       	ldi	r25, 0x15	; 21
   127e4:	1f 92       	push	r1
   127e6:	9f 93       	push	r25
   127e8:	8f 93       	push	r24
   127ea:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   127ee:	0e 94 c7 ba 	call	0x1758e	; 0x1758e <set_Config_Defaults>
   127f2:	0e 94 bf 74 	call	0xe97e	; 0xe97e <mmc_wp_status>
   127f6:	2d b7       	in	r18, 0x3d	; 61
   127f8:	3e b7       	in	r19, 0x3e	; 62
   127fa:	29 5f       	subi	r18, 0xF9	; 249
   127fc:	3f 4f       	sbci	r19, 0xFF	; 255
   127fe:	0f b6       	in	r0, 0x3f	; 63
   12800:	f8 94       	cli
   12802:	3e bf       	out	0x3e, r19	; 62
   12804:	0f be       	out	0x3f, r0	; 63
   12806:	2d bf       	out	0x3d, r18	; 61
   12808:	89 2b       	or	r24, r25
   1280a:	51 f0       	breq	.+20     	; 0x12820 <gpib_file_init+0x5c>
   1280c:	87 e3       	ldi	r24, 0x37	; 55
   1280e:	95 e1       	ldi	r25, 0x15	; 21
   12810:	1f 92       	push	r1
   12812:	9f 93       	push	r25
   12814:	8f 93       	push	r24
   12816:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1281a:	0f 90       	pop	r0
   1281c:	0f 90       	pop	r0
   1281e:	0f 90       	pop	r0
   12820:	08 95       	ret

00012822 <SS80_is_MLA>:
   12822:	40 e2       	ldi	r20, 0x20	; 32
   12824:	50 e0       	ldi	r21, 0x00	; 0
   12826:	bc 01       	movw	r22, r24
   12828:	82 e0       	ldi	r24, 0x02	; 2
   1282a:	90 e0       	ldi	r25, 0x00	; 0
   1282c:	0e 94 8c b7 	call	0x16f18	; 0x16f18 <find_device>
   12830:	8f 3f       	cpi	r24, 0xFF	; 255
   12832:	2f ef       	ldi	r18, 0xFF	; 255
   12834:	92 07       	cpc	r25, r18
   12836:	19 f0       	breq	.+6      	; 0x1283e <SS80_is_MLA+0x1c>
   12838:	0c 94 b6 b7 	jmp	0x16f6c	; 0x16f6c <set_active_device>
   1283c:	08 95       	ret
   1283e:	80 e0       	ldi	r24, 0x00	; 0
   12840:	90 e0       	ldi	r25, 0x00	; 0
   12842:	08 95       	ret

00012844 <SS80_is_MTA>:
   12844:	40 e4       	ldi	r20, 0x40	; 64
   12846:	50 e0       	ldi	r21, 0x00	; 0
   12848:	bc 01       	movw	r22, r24
   1284a:	82 e0       	ldi	r24, 0x02	; 2
   1284c:	90 e0       	ldi	r25, 0x00	; 0
   1284e:	0e 94 8c b7 	call	0x16f18	; 0x16f18 <find_device>
   12852:	8f 3f       	cpi	r24, 0xFF	; 255
   12854:	2f ef       	ldi	r18, 0xFF	; 255
   12856:	92 07       	cpc	r25, r18
   12858:	19 f0       	breq	.+6      	; 0x12860 <SS80_is_MTA+0x1c>
   1285a:	0c 94 b6 b7 	jmp	0x16f6c	; 0x16f6c <set_active_device>
   1285e:	08 95       	ret
   12860:	80 e0       	ldi	r24, 0x00	; 0
   12862:	90 e0       	ldi	r25, 0x00	; 0
   12864:	08 95       	ret

00012866 <SS80_is_MSA>:
   12866:	40 e6       	ldi	r20, 0x60	; 96
   12868:	50 e0       	ldi	r21, 0x00	; 0
   1286a:	bc 01       	movw	r22, r24
   1286c:	82 e0       	ldi	r24, 0x02	; 2
   1286e:	90 e0       	ldi	r25, 0x00	; 0
   12870:	0e 94 8c b7 	call	0x16f18	; 0x16f18 <find_device>
   12874:	8f 3f       	cpi	r24, 0xFF	; 255
   12876:	2f ef       	ldi	r18, 0xFF	; 255
   12878:	92 07       	cpc	r25, r18
   1287a:	19 f0       	breq	.+6      	; 0x12882 <SS80_is_MSA+0x1c>
   1287c:	0c 94 b6 b7 	jmp	0x16f6c	; 0x16f6c <set_active_device>
   12880:	08 95       	ret
   12882:	80 e0       	ldi	r24, 0x00	; 0
   12884:	90 e0       	ldi	r25, 0x00	; 0
   12886:	08 95       	ret

00012888 <AMIGO_is_MLA>:
   12888:	40 e2       	ldi	r20, 0x20	; 32
   1288a:	50 e0       	ldi	r21, 0x00	; 0
   1288c:	bc 01       	movw	r22, r24
   1288e:	81 e0       	ldi	r24, 0x01	; 1
   12890:	90 e0       	ldi	r25, 0x00	; 0
   12892:	0e 94 8c b7 	call	0x16f18	; 0x16f18 <find_device>
   12896:	8f 3f       	cpi	r24, 0xFF	; 255
   12898:	2f ef       	ldi	r18, 0xFF	; 255
   1289a:	92 07       	cpc	r25, r18
   1289c:	19 f0       	breq	.+6      	; 0x128a4 <AMIGO_is_MLA+0x1c>
   1289e:	0c 94 b6 b7 	jmp	0x16f6c	; 0x16f6c <set_active_device>
   128a2:	08 95       	ret
   128a4:	80 e0       	ldi	r24, 0x00	; 0
   128a6:	90 e0       	ldi	r25, 0x00	; 0
   128a8:	08 95       	ret

000128aa <AMIGO_is_MTA>:
   128aa:	40 e4       	ldi	r20, 0x40	; 64
   128ac:	50 e0       	ldi	r21, 0x00	; 0
   128ae:	bc 01       	movw	r22, r24
   128b0:	81 e0       	ldi	r24, 0x01	; 1
   128b2:	90 e0       	ldi	r25, 0x00	; 0
   128b4:	0e 94 8c b7 	call	0x16f18	; 0x16f18 <find_device>
   128b8:	8f 3f       	cpi	r24, 0xFF	; 255
   128ba:	2f ef       	ldi	r18, 0xFF	; 255
   128bc:	92 07       	cpc	r25, r18
   128be:	19 f0       	breq	.+6      	; 0x128c6 <AMIGO_is_MTA+0x1c>
   128c0:	0c 94 b6 b7 	jmp	0x16f6c	; 0x16f6c <set_active_device>
   128c4:	08 95       	ret
   128c6:	80 e0       	ldi	r24, 0x00	; 0
   128c8:	90 e0       	ldi	r25, 0x00	; 0
   128ca:	08 95       	ret

000128cc <AMIGO_is_MSA>:
   128cc:	40 e6       	ldi	r20, 0x60	; 96
   128ce:	50 e0       	ldi	r21, 0x00	; 0
   128d0:	bc 01       	movw	r22, r24
   128d2:	81 e0       	ldi	r24, 0x01	; 1
   128d4:	90 e0       	ldi	r25, 0x00	; 0
   128d6:	0e 94 8c b7 	call	0x16f18	; 0x16f18 <find_device>
   128da:	8f 3f       	cpi	r24, 0xFF	; 255
   128dc:	2f ef       	ldi	r18, 0xFF	; 255
   128de:	92 07       	cpc	r25, r18
   128e0:	19 f0       	breq	.+6      	; 0x128e8 <AMIGO_is_MSA+0x1c>
   128e2:	0c 94 b6 b7 	jmp	0x16f6c	; 0x16f6c <set_active_device>
   128e6:	08 95       	ret
   128e8:	80 e0       	ldi	r24, 0x00	; 0
   128ea:	90 e0       	ldi	r25, 0x00	; 0
   128ec:	08 95       	ret

000128ee <PRINTER_is_MLA>:
   128ee:	40 e2       	ldi	r20, 0x20	; 32
   128f0:	50 e0       	ldi	r21, 0x00	; 0
   128f2:	bc 01       	movw	r22, r24
   128f4:	83 e0       	ldi	r24, 0x03	; 3
   128f6:	90 e0       	ldi	r25, 0x00	; 0
   128f8:	0e 94 8c b7 	call	0x16f18	; 0x16f18 <find_device>
   128fc:	8f 3f       	cpi	r24, 0xFF	; 255
   128fe:	2f ef       	ldi	r18, 0xFF	; 255
   12900:	92 07       	cpc	r25, r18
   12902:	19 f0       	breq	.+6      	; 0x1290a <PRINTER_is_MLA+0x1c>
   12904:	0c 94 b6 b7 	jmp	0x16f6c	; 0x16f6c <set_active_device>
   12908:	08 95       	ret
   1290a:	80 e0       	ldi	r24, 0x00	; 0
   1290c:	90 e0       	ldi	r25, 0x00	; 0
   1290e:	08 95       	ret

00012910 <PRINTER_is_MTA>:
   12910:	40 e4       	ldi	r20, 0x40	; 64
   12912:	50 e0       	ldi	r21, 0x00	; 0
   12914:	bc 01       	movw	r22, r24
   12916:	83 e0       	ldi	r24, 0x03	; 3
   12918:	90 e0       	ldi	r25, 0x00	; 0
   1291a:	0e 94 8c b7 	call	0x16f18	; 0x16f18 <find_device>
   1291e:	8f 3f       	cpi	r24, 0xFF	; 255
   12920:	2f ef       	ldi	r18, 0xFF	; 255
   12922:	92 07       	cpc	r25, r18
   12924:	19 f0       	breq	.+6      	; 0x1292c <PRINTER_is_MTA+0x1c>
   12926:	0c 94 b6 b7 	jmp	0x16f6c	; 0x16f6c <set_active_device>
   1292a:	08 95       	ret
   1292c:	80 e0       	ldi	r24, 0x00	; 0
   1292e:	90 e0       	ldi	r25, 0x00	; 0
   12930:	08 95       	ret

00012932 <gpib_init_devices>:
   12932:	2f d9       	rcall	.-3490   	; 0x11b92 <gpib_bus_init>
   12934:	0e 94 54 a4 	call	0x148a8	; 0x148a8 <SS80_init>
   12938:	0e 94 d8 a9 	call	0x153b0	; 0x153b0 <amigo_init>
   1293c:	0c 94 c0 b4 	jmp	0x16980	; 0x16980 <printer_close>
   12940:	08 95       	ret

00012942 <gpib_trace_task>:
   12942:	0f 93       	push	r16
   12944:	1f 93       	push	r17
   12946:	cf 93       	push	r28
   12948:	df 93       	push	r29
   1294a:	eb 01       	movw	r28, r22
   1294c:	00 97       	sbiw	r24, 0x00	; 0
   1294e:	09 f4       	brne	.+2      	; 0x12952 <gpib_trace_task+0x10>
   12950:	42 c0       	rjmp	.+132    	; 0x129d6 <gpib_trace_task+0x94>
   12952:	fc 01       	movw	r30, r24
   12954:	20 81       	ld	r18, Z
   12956:	22 23       	and	r18, r18
   12958:	f1 f1       	breq	.+124    	; 0x129d6 <gpib_trace_task+0x94>
   1295a:	0e 94 82 32 	call	0x6504	; 0x6504 <skipspaces>
   1295e:	8c 01       	movw	r16, r24
   12960:	1f 93       	push	r17
   12962:	8f 93       	push	r24
   12964:	8d e1       	ldi	r24, 0x1D	; 29
   12966:	95 e1       	ldi	r25, 0x15	; 21
   12968:	1f 92       	push	r1
   1296a:	9f 93       	push	r25
   1296c:	8f 93       	push	r24
   1296e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   12972:	0f 90       	pop	r0
   12974:	0f 90       	pop	r0
   12976:	0f 90       	pop	r0
   12978:	0f 90       	pop	r0
   1297a:	0f 90       	pop	r0
   1297c:	20 97       	sbiw	r28, 0x00	; 0
   1297e:	51 f0       	breq	.+20     	; 0x12994 <gpib_trace_task+0x52>
   12980:	82 ef       	ldi	r24, 0xF2	; 242
   12982:	94 e1       	ldi	r25, 0x14	; 20
   12984:	1f 92       	push	r1
   12986:	9f 93       	push	r25
   12988:	8f 93       	push	r24
   1298a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1298e:	0f 90       	pop	r0
   12990:	0f 90       	pop	r0
   12992:	0f 90       	pop	r0
   12994:	8b ed       	ldi	r24, 0xDB	; 219
   12996:	94 e1       	ldi	r25, 0x14	; 20
   12998:	1f 92       	push	r1
   1299a:	9f 93       	push	r25
   1299c:	8f 93       	push	r24
   1299e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   129a2:	68 ec       	ldi	r22, 0xC8	; 200
   129a4:	78 e0       	ldi	r23, 0x08	; 8
   129a6:	c8 01       	movw	r24, r16
   129a8:	0e 94 dd 83 	call	0x107ba	; 0x107ba <fopen>
   129ac:	90 93 c1 19 	sts	0x19C1, r25	; 0x8019c1 <gpib_log_fp+0x1>
   129b0:	80 93 c0 19 	sts	0x19C0, r24	; 0x8019c0 <gpib_log_fp>
   129b4:	0f 90       	pop	r0
   129b6:	0f 90       	pop	r0
   129b8:	0f 90       	pop	r0
   129ba:	89 2b       	or	r24, r25
   129bc:	a1 f4       	brne	.+40     	; 0x129e6 <gpib_trace_task+0xa4>
   129be:	86 e7       	ldi	r24, 0x76	; 118
   129c0:	9d e0       	ldi	r25, 0x0D	; 13
   129c2:	0e 94 b3 7d 	call	0xfb66	; 0xfb66 <perror>
   129c6:	8f ec       	ldi	r24, 0xCF	; 207
   129c8:	94 e1       	ldi	r25, 0x14	; 20
   129ca:	1f 92       	push	r1
   129cc:	9f 93       	push	r25
   129ce:	8f 93       	push	r24
   129d0:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   129d4:	3b c0       	rjmp	.+118    	; 0x12a4c <gpib_trace_task+0x10a>
   129d6:	80 91 1c 1d 	lds	r24, 0x1D1C	; 0x801d1c <__iob+0x2>
   129da:	90 91 1d 1d 	lds	r25, 0x1D1D	; 0x801d1d <__iob+0x3>
   129de:	90 93 c1 19 	sts	0x19C1, r25	; 0x8019c1 <gpib_log_fp+0x1>
   129e2:	80 93 c0 19 	sts	0x19C0, r24	; 0x8019c0 <gpib_log_fp>
   129e6:	fd d8       	rcall	.-3590   	; 0x11be2 <gpib_state_init>
   129e8:	a4 df       	rcall	.-184    	; 0x12932 <gpib_init_devices>
   129ea:	80 91 c0 19 	lds	r24, 0x19C0	; 0x8019c0 <gpib_log_fp>
   129ee:	90 91 c1 19 	lds	r25, 0x19C1	; 0x8019c1 <gpib_log_fp+0x1>
   129f2:	4e db       	rcall	.-2404   	; 0x12090 <gpib_decode_header>
   129f4:	80 e0       	ldi	r24, 0x00	; 0
   129f6:	0e 94 88 2c 	call	0x5910	; 0x5910 <uart_keyhit>
   129fa:	89 2b       	or	r24, r25
   129fc:	31 f4       	brne	.+12     	; 0x12a0a <gpib_trace_task+0xc8>
   129fe:	ce 01       	movw	r24, r28
   12a00:	e0 dc       	rcall	.-1600   	; 0x123c2 <gpib_read_byte>
   12a02:	20 97       	sbiw	r28, 0x00	; 0
   12a04:	b9 f7       	brne	.-18     	; 0x129f4 <gpib_trace_task+0xb2>
   12a06:	b3 dd       	rcall	.-1178   	; 0x1256e <gpib_decode>
   12a08:	f5 cf       	rjmp	.-22     	; 0x129f4 <gpib_trace_task+0xb2>
   12a0a:	89 ec       	ldi	r24, 0xC9	; 201
   12a0c:	94 e1       	ldi	r25, 0x14	; 20
   12a0e:	1f 92       	push	r1
   12a10:	9f 93       	push	r25
   12a12:	8f 93       	push	r24
   12a14:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   12a18:	80 91 c0 19 	lds	r24, 0x19C0	; 0x8019c0 <gpib_log_fp>
   12a1c:	90 91 c1 19 	lds	r25, 0x19C1	; 0x8019c1 <gpib_log_fp+0x1>
   12a20:	0f 90       	pop	r0
   12a22:	0f 90       	pop	r0
   12a24:	0f 90       	pop	r0
   12a26:	00 97       	sbiw	r24, 0x00	; 0
   12a28:	a1 f0       	breq	.+40     	; 0x12a52 <gpib_trace_task+0x110>
   12a2a:	0e 94 87 82 	call	0x1050e	; 0x1050e <fclose>
   12a2e:	87 eb       	ldi	r24, 0xB7	; 183
   12a30:	94 e1       	ldi	r25, 0x14	; 20
   12a32:	1f 92       	push	r1
   12a34:	9f 93       	push	r25
   12a36:	8f 93       	push	r24
   12a38:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   12a3c:	80 91 1c 1d 	lds	r24, 0x1D1C	; 0x801d1c <__iob+0x2>
   12a40:	90 91 1d 1d 	lds	r25, 0x1D1D	; 0x801d1d <__iob+0x3>
   12a44:	90 93 c1 19 	sts	0x19C1, r25	; 0x8019c1 <gpib_log_fp+0x1>
   12a48:	80 93 c0 19 	sts	0x19C0, r24	; 0x8019c0 <gpib_log_fp>
   12a4c:	0f 90       	pop	r0
   12a4e:	0f 90       	pop	r0
   12a50:	0f 90       	pop	r0
   12a52:	df 91       	pop	r29
   12a54:	cf 91       	pop	r28
   12a56:	1f 91       	pop	r17
   12a58:	0f 91       	pop	r16
   12a5a:	08 95       	ret

00012a5c <gpib_error_test>:
   12a5c:	ef 92       	push	r14
   12a5e:	ff 92       	push	r15
   12a60:	0f 93       	push	r16
   12a62:	1f 93       	push	r17
   12a64:	cf 93       	push	r28
   12a66:	df 93       	push	r29
   12a68:	7c 01       	movw	r14, r24
   12a6a:	ec 01       	movw	r28, r24
   12a6c:	cc 27       	eor	r28, r28
   12a6e:	d0 7d       	andi	r29, 0xD0	; 208
   12a70:	20 97       	sbiw	r28, 0x00	; 0
   12a72:	61 f0       	breq	.+24     	; 0x12a8c <gpib_error_test+0x30>
   12a74:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12a78:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12a7c:	8e 72       	andi	r24, 0x2E	; 46
   12a7e:	99 27       	eor	r25, r25
   12a80:	87 01       	movw	r16, r14
   12a82:	00 27       	eor	r16, r16
   12a84:	10 71       	andi	r17, 0x10	; 16
   12a86:	89 2b       	or	r24, r25
   12a88:	59 f4       	brne	.+22     	; 0x12aa0 <gpib_error_test+0x44>
   12a8a:	17 c0       	rjmp	.+46     	; 0x12aba <gpib_error_test+0x5e>
   12a8c:	80 e0       	ldi	r24, 0x00	; 0
   12a8e:	0e 94 88 2c 	call	0x5910	; 0x5910 <uart_keyhit>
   12a92:	89 2b       	or	r24, r25
   12a94:	79 f7       	brne	.-34     	; 0x12a74 <gpib_error_test+0x18>
   12a96:	0e 94 bc 74 	call	0xe978	; 0xe978 <mmc_ins_status>
   12a9a:	01 97       	sbiw	r24, 0x01	; 1
   12a9c:	59 f7       	brne	.-42     	; 0x12a74 <gpib_error_test+0x18>
   12a9e:	62 c0       	rjmp	.+196    	; 0x12b64 <gpib_error_test+0x108>
   12aa0:	01 15       	cp	r16, r1
   12aa2:	11 05       	cpc	r17, r1
   12aa4:	51 f0       	breq	.+20     	; 0x12aba <gpib_error_test+0x5e>
   12aa6:	80 eb       	ldi	r24, 0xB0	; 176
   12aa8:	94 e1       	ldi	r25, 0x14	; 20
   12aaa:	1f 92       	push	r1
   12aac:	9f 93       	push	r25
   12aae:	8f 93       	push	r24
   12ab0:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   12ab4:	0f 90       	pop	r0
   12ab6:	0f 90       	pop	r0
   12ab8:	0f 90       	pop	r0
   12aba:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12abe:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12ac2:	85 70       	andi	r24, 0x05	; 5
   12ac4:	99 27       	eor	r25, r25
   12ac6:	89 2b       	or	r24, r25
   12ac8:	c1 f0       	breq	.+48     	; 0x12afa <gpib_error_test+0x9e>
   12aca:	f6 fe       	sbrs	r15, 6
   12acc:	0a c0       	rjmp	.+20     	; 0x12ae2 <gpib_error_test+0x86>
   12ace:	85 ea       	ldi	r24, 0xA5	; 165
   12ad0:	94 e1       	ldi	r25, 0x14	; 20
   12ad2:	1f 92       	push	r1
   12ad4:	9f 93       	push	r25
   12ad6:	8f 93       	push	r24
   12ad8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   12adc:	0f 90       	pop	r0
   12ade:	0f 90       	pop	r0
   12ae0:	0f 90       	pop	r0
   12ae2:	d7 ff       	sbrs	r29, 7
   12ae4:	0a c0       	rjmp	.+20     	; 0x12afa <gpib_error_test+0x9e>
   12ae6:	8e e9       	ldi	r24, 0x9E	; 158
   12ae8:	94 e1       	ldi	r25, 0x14	; 20
   12aea:	1f 92       	push	r1
   12aec:	9f 93       	push	r25
   12aee:	8f 93       	push	r24
   12af0:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   12af4:	0f 90       	pop	r0
   12af6:	0f 90       	pop	r0
   12af8:	0f 90       	pop	r0
   12afa:	80 e0       	ldi	r24, 0x00	; 0
   12afc:	0e 94 88 2c 	call	0x5910	; 0x5910 <uart_keyhit>
   12b00:	89 2b       	or	r24, r25
   12b02:	51 f0       	breq	.+20     	; 0x12b18 <gpib_error_test+0xbc>
   12b04:	81 e9       	ldi	r24, 0x91	; 145
   12b06:	94 e1       	ldi	r25, 0x14	; 20
   12b08:	1f 92       	push	r1
   12b0a:	9f 93       	push	r25
   12b0c:	8f 93       	push	r24
   12b0e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   12b12:	0f 90       	pop	r0
   12b14:	0f 90       	pop	r0
   12b16:	0f 90       	pop	r0
   12b18:	0e 94 bc 74 	call	0xe978	; 0xe978 <mmc_ins_status>
   12b1c:	01 97       	sbiw	r24, 0x01	; 1
   12b1e:	51 f0       	breq	.+20     	; 0x12b34 <gpib_error_test+0xd8>
   12b20:	80 e8       	ldi	r24, 0x80	; 128
   12b22:	94 e1       	ldi	r25, 0x14	; 20
   12b24:	1f 92       	push	r1
   12b26:	9f 93       	push	r25
   12b28:	8f 93       	push	r24
   12b2a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   12b2e:	0f 90       	pop	r0
   12b30:	0f 90       	pop	r0
   12b32:	0f 90       	pop	r0
   12b34:	01 15       	cp	r16, r1
   12b36:	11 05       	cpc	r17, r1
   12b38:	09 f0       	breq	.+2      	; 0x12b3c <gpib_error_test+0xe0>
   12b3a:	fb de       	rcall	.-522    	; 0x12932 <gpib_init_devices>
   12b3c:	80 e0       	ldi	r24, 0x00	; 0
   12b3e:	0e 94 88 2c 	call	0x5910	; 0x5910 <uart_keyhit>
   12b42:	89 2b       	or	r24, r25
   12b44:	11 f0       	breq	.+4      	; 0x12b4a <gpib_error_test+0xee>
   12b46:	f5 de       	rcall	.-534    	; 0x12932 <gpib_init_devices>
   12b48:	0b c0       	rjmp	.+22     	; 0x12b60 <gpib_error_test+0x104>
   12b4a:	0e 94 bc 74 	call	0xe978	; 0xe978 <mmc_ins_status>
   12b4e:	01 97       	sbiw	r24, 0x01	; 1
   12b50:	39 f4       	brne	.+14     	; 0x12b60 <gpib_error_test+0x104>
   12b52:	01 15       	cp	r16, r1
   12b54:	11 05       	cpc	r17, r1
   12b56:	31 f0       	breq	.+12     	; 0x12b64 <gpib_error_test+0x108>
   12b58:	54 98       	cbi	0x0a, 4	; 10
   12b5a:	4c 9b       	sbis	0x09, 4	; 9
   12b5c:	fd cf       	rjmp	.-6      	; 0x12b58 <gpib_error_test+0xfc>
   12b5e:	02 c0       	rjmp	.+4      	; 0x12b64 <gpib_error_test+0x108>
   12b60:	c1 e0       	ldi	r28, 0x01	; 1
   12b62:	d0 e0       	ldi	r29, 0x00	; 0
   12b64:	ce 01       	movw	r24, r28
   12b66:	cd b7       	in	r28, 0x3d	; 61
   12b68:	de b7       	in	r29, 0x3e	; 62
   12b6a:	e6 e0       	ldi	r30, 0x06	; 6
   12b6c:	0c 94 5c ec 	jmp	0x1d8b8	; 0x1d8b8 <__epilogue_restores__+0x18>

00012b70 <GPIB_COMMANDS>:
   12b70:	1f 93       	push	r17
   12b72:	cf 93       	push	r28
   12b74:	df 93       	push	r29
   12b76:	ec 01       	movw	r28, r24
   12b78:	16 2f       	mov	r17, r22
   12b7a:	80 91 49 1f 	lds	r24, 0x1F49	; 0x801f49 <talking>
   12b7e:	8f 35       	cpi	r24, 0x5F	; 95
   12b80:	91 f0       	breq	.+36     	; 0x12ba6 <GPIB_COMMANDS+0x36>
   12b82:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   12b86:	90 e0       	ldi	r25, 0x00	; 0
   12b88:	7f de       	rcall	.-770    	; 0x12888 <AMIGO_is_MLA>
   12b8a:	89 2b       	or	r24, r25
   12b8c:	c9 f4       	brne	.+50     	; 0x12bc0 <GPIB_COMMANDS+0x50>
   12b8e:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   12b92:	90 e0       	ldi	r25, 0x00	; 0
   12b94:	46 de       	rcall	.-884    	; 0x12822 <SS80_is_MLA>
   12b96:	89 2b       	or	r24, r25
   12b98:	11 f5       	brne	.+68     	; 0x12bde <GPIB_COMMANDS+0x6e>
   12b9a:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   12b9e:	90 e0       	ldi	r25, 0x00	; 0
   12ba0:	a6 de       	rcall	.-692    	; 0x128ee <PRINTER_is_MLA>
   12ba2:	89 2b       	or	r24, r25
   12ba4:	59 f5       	brne	.+86     	; 0x12bfc <GPIB_COMMANDS+0x8c>
   12ba6:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   12baa:	8f 33       	cpi	r24, 0x3F	; 63
   12bac:	19 f4       	brne	.+6      	; 0x12bb4 <GPIB_COMMANDS+0x44>
   12bae:	80 e0       	ldi	r24, 0x00	; 0
   12bb0:	90 e0       	ldi	r25, 0x00	; 0
   12bb2:	2e c0       	rjmp	.+92     	; 0x12c10 <GPIB_COMMANDS+0xa0>
   12bb4:	80 91 49 1f 	lds	r24, 0x1F49	; 0x801f49 <talking>
   12bb8:	90 e0       	ldi	r25, 0x00	; 0
   12bba:	77 de       	rcall	.-786    	; 0x128aa <AMIGO_is_MTA>
   12bbc:	89 2b       	or	r24, r25
   12bbe:	49 f0       	breq	.+18     	; 0x12bd2 <GPIB_COMMANDS+0x62>
   12bc0:	11 23       	and	r17, r17
   12bc2:	11 f0       	breq	.+4      	; 0x12bc8 <GPIB_COMMANDS+0x58>
   12bc4:	ce 01       	movw	r24, r28
   12bc6:	b5 d8       	rcall	.-3734   	; 0x11d32 <gpib_unread>
   12bc8:	80 91 4a 1f 	lds	r24, 0x1F4A	; 0x801f4a <secondary>
   12bcc:	0e 94 c1 b3 	call	0x16782	; 0x16782 <AMIGO_COMMANDS>
   12bd0:	1d c0       	rjmp	.+58     	; 0x12c0c <GPIB_COMMANDS+0x9c>
   12bd2:	80 91 49 1f 	lds	r24, 0x1F49	; 0x801f49 <talking>
   12bd6:	90 e0       	ldi	r25, 0x00	; 0
   12bd8:	35 de       	rcall	.-918    	; 0x12844 <SS80_is_MTA>
   12bda:	89 2b       	or	r24, r25
   12bdc:	49 f0       	breq	.+18     	; 0x12bf0 <GPIB_COMMANDS+0x80>
   12bde:	11 23       	and	r17, r17
   12be0:	11 f0       	breq	.+4      	; 0x12be6 <GPIB_COMMANDS+0x76>
   12be2:	ce 01       	movw	r24, r28
   12be4:	a6 d8       	rcall	.-3764   	; 0x11d32 <gpib_unread>
   12be6:	80 91 4a 1f 	lds	r24, 0x1F4A	; 0x801f4a <secondary>
   12bea:	0e 94 32 a8 	call	0x15064	; 0x15064 <SS80_COMMANDS>
   12bee:	0e c0       	rjmp	.+28     	; 0x12c0c <GPIB_COMMANDS+0x9c>
   12bf0:	80 91 49 1f 	lds	r24, 0x1F49	; 0x801f49 <talking>
   12bf4:	90 e0       	ldi	r25, 0x00	; 0
   12bf6:	8c de       	rcall	.-744    	; 0x12910 <PRINTER_is_MTA>
   12bf8:	89 2b       	or	r24, r25
   12bfa:	c9 f2       	breq	.-78     	; 0x12bae <GPIB_COMMANDS+0x3e>
   12bfc:	11 23       	and	r17, r17
   12bfe:	11 f0       	breq	.+4      	; 0x12c04 <GPIB_COMMANDS+0x94>
   12c00:	ce 01       	movw	r24, r28
   12c02:	97 d8       	rcall	.-3794   	; 0x11d32 <gpib_unread>
   12c04:	80 91 4a 1f 	lds	r24, 0x1F4A	; 0x801f4a <secondary>
   12c08:	0e 94 21 b6 	call	0x16c42	; 0x16c42 <PRINTER_COMMANDS>
   12c0c:	10 92 4a 1f 	sts	0x1F4A, r1	; 0x801f4a <secondary>
   12c10:	df 91       	pop	r29
   12c12:	cf 91       	pop	r28
   12c14:	1f 91       	pop	r17
   12c16:	08 95       	ret

00012c18 <Send_Identify>:
   12c18:	a4 e0       	ldi	r26, 0x04	; 4
   12c1a:	b0 e0       	ldi	r27, 0x00	; 0
   12c1c:	e2 e1       	ldi	r30, 0x12	; 18
   12c1e:	f6 e9       	ldi	r31, 0x96	; 150
   12c20:	0c 94 3f ec 	jmp	0x1d87e	; 0x1d87e <__prologue_saves__+0x16>
   12c24:	d8 2e       	mov	r13, r24
   12c26:	7b 01       	movw	r14, r22
   12c28:	80 e0       	ldi	r24, 0x00	; 0
   12c2a:	91 e0       	ldi	r25, 0x01	; 1
   12c2c:	9c 83       	std	Y+4, r25	; 0x04
   12c2e:	8b 83       	std	Y+3, r24	; 0x03
   12c30:	8b 01       	movw	r16, r22
   12c32:	20 e0       	ldi	r18, 0x00	; 0
   12c34:	30 e0       	ldi	r19, 0x00	; 0
   12c36:	42 e0       	ldi	r20, 0x02	; 2
   12c38:	50 e0       	ldi	r21, 0x00	; 0
   12c3a:	60 e0       	ldi	r22, 0x00	; 0
   12c3c:	70 e0       	ldi	r23, 0x00	; 0
   12c3e:	ce 01       	movw	r24, r28
   12c40:	01 96       	adiw	r24, 0x01	; 1
   12c42:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   12c46:	ae 01       	movw	r20, r28
   12c48:	4d 5f       	subi	r20, 0xFD	; 253
   12c4a:	5f 4f       	sbci	r21, 0xFF	; 255
   12c4c:	62 e0       	ldi	r22, 0x02	; 2
   12c4e:	70 e0       	ldi	r23, 0x00	; 0
   12c50:	ce 01       	movw	r24, r28
   12c52:	01 96       	adiw	r24, 0x01	; 1
   12c54:	3e dd       	rcall	.-1412   	; 0x126d2 <gpib_write_str>
   12c56:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   12c5a:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   12c5e:	02 97       	sbiw	r24, 0x02	; 2
   12c60:	59 f0       	breq	.+22     	; 0x12c78 <Send_Identify+0x60>
   12c62:	25 70       	andi	r18, 0x05	; 5
   12c64:	33 27       	eor	r19, r19
   12c66:	23 2b       	or	r18, r19
   12c68:	c9 f0       	breq	.+50     	; 0x12c9c <Send_Identify+0x84>
   12c6a:	ff 92       	push	r15
   12c6c:	ef 92       	push	r14
   12c6e:	1f 92       	push	r1
   12c70:	df 92       	push	r13
   12c72:	8f e5       	ldi	r24, 0x5F	; 95
   12c74:	94 e1       	ldi	r25, 0x14	; 20
   12c76:	08 c0       	rjmp	.+16     	; 0x12c88 <Send_Identify+0x70>
   12c78:	22 ff       	sbrs	r18, 2
   12c7a:	10 c0       	rjmp	.+32     	; 0x12c9c <Send_Identify+0x84>
   12c7c:	ff 92       	push	r15
   12c7e:	ef 92       	push	r14
   12c80:	1f 92       	push	r1
   12c82:	df 92       	push	r13
   12c84:	85 e4       	ldi	r24, 0x45	; 69
   12c86:	94 e1       	ldi	r25, 0x14	; 20
   12c88:	1f 92       	push	r1
   12c8a:	9f 93       	push	r25
   12c8c:	8f 93       	push	r24
   12c8e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   12c92:	0f b6       	in	r0, 0x3f	; 63
   12c94:	f8 94       	cli
   12c96:	de bf       	out	0x3e, r29	; 62
   12c98:	0f be       	out	0x3f, r0	; 63
   12c9a:	cd bf       	out	0x3d, r28	; 61
   12c9c:	8b 81       	ldd	r24, Y+3	; 0x03
   12c9e:	9c 81       	ldd	r25, Y+4	; 0x04
   12ca0:	88 27       	eor	r24, r24
   12ca2:	90 7d       	andi	r25, 0xD0	; 208
   12ca4:	24 96       	adiw	r28, 0x04	; 4
   12ca6:	e7 e0       	ldi	r30, 0x07	; 7
   12ca8:	0c 94 5b ec 	jmp	0x1d8b6	; 0x1d8b6 <__epilogue_restores__+0x16>

00012cac <GPIB>:
   12cac:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   12cb0:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   12cb4:	85 30       	cpi	r24, 0x05	; 5
   12cb6:	89 f4       	brne	.+34     	; 0x12cda <GPIB+0x2e>
   12cb8:	24 71       	andi	r18, 0x14	; 20
   12cba:	33 27       	eor	r19, r19
   12cbc:	23 2b       	or	r18, r19
   12cbe:	51 f0       	breq	.+20     	; 0x12cd4 <GPIB+0x28>
   12cc0:	82 e3       	ldi	r24, 0x32	; 50
   12cc2:	94 e1       	ldi	r25, 0x14	; 20
   12cc4:	1f 92       	push	r1
   12cc6:	9f 93       	push	r25
   12cc8:	8f 93       	push	r24
   12cca:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   12cce:	0f 90       	pop	r0
   12cd0:	0f 90       	pop	r0
   12cd2:	0f 90       	pop	r0
   12cd4:	10 92 46 1f 	sts	0x1F46, r1	; 0x801f46 <spoll>
   12cd8:	9d c0       	rjmp	.+314    	; 0x12e14 <GPIB+0x168>
   12cda:	85 31       	cpi	r24, 0x15	; 21
   12cdc:	39 f4       	brne	.+14     	; 0x12cec <GPIB+0x40>
   12cde:	24 71       	andi	r18, 0x14	; 20
   12ce0:	33 27       	eor	r19, r19
   12ce2:	23 2b       	or	r18, r19
   12ce4:	b9 f3       	breq	.-18     	; 0x12cd4 <GPIB+0x28>
   12ce6:	8f e1       	ldi	r24, 0x1F	; 31
   12ce8:	94 e1       	ldi	r25, 0x14	; 20
   12cea:	ec cf       	rjmp	.-40     	; 0x12cc4 <GPIB+0x18>
   12cec:	88 31       	cpi	r24, 0x18	; 24
   12cee:	c9 f4       	brne	.+50     	; 0x12d22 <GPIB+0x76>
   12cf0:	22 ff       	sbrs	r18, 2
   12cf2:	0a c0       	rjmp	.+20     	; 0x12d08 <GPIB+0x5c>
   12cf4:	88 e1       	ldi	r24, 0x18	; 24
   12cf6:	94 e1       	ldi	r25, 0x14	; 20
   12cf8:	1f 92       	push	r1
   12cfa:	9f 93       	push	r25
   12cfc:	8f 93       	push	r24
   12cfe:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   12d02:	0f 90       	pop	r0
   12d04:	0f 90       	pop	r0
   12d06:	0f 90       	pop	r0
   12d08:	81 e0       	ldi	r24, 0x01	; 1
   12d0a:	80 93 46 1f 	sts	0x1F46, r24	; 0x801f46 <spoll>
   12d0e:	80 91 49 1f 	lds	r24, 0x1F49	; 0x801f49 <talking>
   12d12:	90 e0       	ldi	r25, 0x00	; 0
   12d14:	97 dd       	rcall	.-1234   	; 0x12844 <SS80_is_MTA>
   12d16:	89 2b       	or	r24, r25
   12d18:	09 f4       	brne	.+2      	; 0x12d1c <GPIB+0x70>
   12d1a:	7c c0       	rjmp	.+248    	; 0x12e14 <GPIB+0x168>
   12d1c:	0c 94 e7 a3 	jmp	0x147ce	; 0x147ce <SS80_Report>
   12d20:	08 95       	ret
   12d22:	89 31       	cpi	r24, 0x19	; 25
   12d24:	29 f4       	brne	.+10     	; 0x12d30 <GPIB+0x84>
   12d26:	22 ff       	sbrs	r18, 2
   12d28:	d5 cf       	rjmp	.-86     	; 0x12cd4 <GPIB+0x28>
   12d2a:	81 e1       	ldi	r24, 0x11	; 17
   12d2c:	94 e1       	ldi	r25, 0x14	; 20
   12d2e:	ca cf       	rjmp	.-108    	; 0x12cc4 <GPIB+0x18>
   12d30:	84 30       	cpi	r24, 0x04	; 4
   12d32:	09 f0       	breq	.+2      	; 0x12d36 <GPIB+0x8a>
   12d34:	48 c0       	rjmp	.+144    	; 0x12dc6 <GPIB+0x11a>
   12d36:	22 ff       	sbrs	r18, 2
   12d38:	0a c0       	rjmp	.+20     	; 0x12d4e <GPIB+0xa2>
   12d3a:	8a e0       	ldi	r24, 0x0A	; 10
   12d3c:	94 e1       	ldi	r25, 0x14	; 20
   12d3e:	1f 92       	push	r1
   12d40:	9f 93       	push	r25
   12d42:	8f 93       	push	r24
   12d44:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   12d48:	0f 90       	pop	r0
   12d4a:	0f 90       	pop	r0
   12d4c:	0f 90       	pop	r0
   12d4e:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   12d52:	90 e0       	ldi	r25, 0x00	; 0
   12d54:	66 dd       	rcall	.-1332   	; 0x12822 <SS80_is_MLA>
   12d56:	89 2b       	or	r24, r25
   12d58:	d9 f0       	breq	.+54     	; 0x12d90 <GPIB+0xe4>
   12d5a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12d5e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12d62:	84 72       	andi	r24, 0x24	; 36
   12d64:	99 27       	eor	r25, r25
   12d66:	89 2b       	or	r24, r25
   12d68:	51 f0       	breq	.+20     	; 0x12d7e <GPIB+0xd2>
   12d6a:	8e ef       	ldi	r24, 0xFE	; 254
   12d6c:	93 e1       	ldi	r25, 0x13	; 19
   12d6e:	1f 92       	push	r1
   12d70:	9f 93       	push	r25
   12d72:	8f 93       	push	r24
   12d74:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   12d78:	0f 90       	pop	r0
   12d7a:	0f 90       	pop	r0
   12d7c:	0f 90       	pop	r0
   12d7e:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   12d82:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   12d86:	85 81       	ldd	r24, Z+5	; 0x05
   12d88:	90 e0       	ldi	r25, 0x00	; 0
   12d8a:	0c 94 b4 a4 	jmp	0x14968	; 0x14968 <SS80_Selected_Device_Clear>
   12d8e:	08 95       	ret
   12d90:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   12d94:	90 e0       	ldi	r25, 0x00	; 0
   12d96:	78 dd       	rcall	.-1296   	; 0x12888 <AMIGO_is_MLA>
   12d98:	89 2b       	or	r24, r25
   12d9a:	e1 f1       	breq	.+120    	; 0x12e14 <GPIB+0x168>
   12d9c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12da0:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12da4:	84 72       	andi	r24, 0x24	; 36
   12da6:	99 27       	eor	r25, r25
   12da8:	89 2b       	or	r24, r25
   12daa:	51 f0       	breq	.+20     	; 0x12dc0 <GPIB+0x114>
   12dac:	81 ef       	ldi	r24, 0xF1	; 241
   12dae:	93 e1       	ldi	r25, 0x13	; 19
   12db0:	1f 92       	push	r1
   12db2:	9f 93       	push	r25
   12db4:	8f 93       	push	r24
   12db6:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   12dba:	0f 90       	pop	r0
   12dbc:	0f 90       	pop	r0
   12dbe:	0f 90       	pop	r0
   12dc0:	0c 94 94 ae 	jmp	0x15d28	; 0x15d28 <amigo_cmd_clear>
   12dc4:	08 95       	ret
   12dc6:	84 31       	cpi	r24, 0x14	; 20
   12dc8:	99 f4       	brne	.+38     	; 0x12df0 <GPIB+0x144>
   12dca:	22 ff       	sbrs	r18, 2
   12dcc:	0a c0       	rjmp	.+20     	; 0x12de2 <GPIB+0x136>
   12dce:	8a ee       	ldi	r24, 0xEA	; 234
   12dd0:	93 e1       	ldi	r25, 0x13	; 19
   12dd2:	1f 92       	push	r1
   12dd4:	9f 93       	push	r25
   12dd6:	8f 93       	push	r24
   12dd8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   12ddc:	0f 90       	pop	r0
   12dde:	0f 90       	pop	r0
   12de0:	0f 90       	pop	r0
   12de2:	0e 94 a6 a4 	call	0x1494c	; 0x1494c <SS80_Universal_Device_Clear>
   12de6:	0e 94 94 ae 	call	0x15d28	; 0x15d28 <amigo_cmd_clear>
   12dea:	0e 94 c0 b4 	call	0x16980	; 0x16980 <printer_close>
   12dee:	12 c0       	rjmp	.+36     	; 0x12e14 <GPIB+0x168>
   12df0:	25 71       	andi	r18, 0x15	; 21
   12df2:	33 27       	eor	r19, r19
   12df4:	23 2b       	or	r18, r19
   12df6:	71 f0       	breq	.+28     	; 0x12e14 <GPIB+0x168>
   12df8:	1f 92       	push	r1
   12dfa:	8f 93       	push	r24
   12dfc:	8e ec       	ldi	r24, 0xCE	; 206
   12dfe:	93 e1       	ldi	r25, 0x13	; 19
   12e00:	1f 92       	push	r1
   12e02:	9f 93       	push	r25
   12e04:	8f 93       	push	r24
   12e06:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   12e0a:	0f 90       	pop	r0
   12e0c:	0f 90       	pop	r0
   12e0e:	0f 90       	pop	r0
   12e10:	0f 90       	pop	r0
   12e12:	0f 90       	pop	r0
   12e14:	80 e0       	ldi	r24, 0x00	; 0
   12e16:	90 e0       	ldi	r25, 0x00	; 0
   12e18:	08 95       	ret

00012e1a <GPIB_TALK>:
   12e1a:	0f 93       	push	r16
   12e1c:	1f 93       	push	r17
   12e1e:	cf 93       	push	r28
   12e20:	c8 2f       	mov	r28, r24
   12e22:	80 91 49 1f 	lds	r24, 0x1F49	; 0x801f49 <talking>
   12e26:	80 93 4c 1f 	sts	0x1F4C, r24	; 0x801f4c <talking_last>
   12e2a:	c0 93 49 1f 	sts	0x1F49, r28	; 0x801f49 <talking>
   12e2e:	cf 35       	cpi	r28, 0x5F	; 95
   12e30:	79 f4       	brne	.+30     	; 0x12e50 <GPIB_TALK+0x36>
   12e32:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12e36:	82 ff       	sbrs	r24, 2
   12e38:	7f c0       	rjmp	.+254    	; 0x12f38 <GPIB_TALK+0x11e>
   12e3a:	8b e7       	ldi	r24, 0x7B	; 123
   12e3c:	93 e1       	ldi	r25, 0x13	; 19
   12e3e:	1f 92       	push	r1
   12e40:	9f 93       	push	r25
   12e42:	8f 93       	push	r24
   12e44:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   12e48:	0f 90       	pop	r0
   12e4a:	0f 90       	pop	r0
   12e4c:	0f 90       	pop	r0
   12e4e:	74 c0       	rjmp	.+232    	; 0x12f38 <GPIB_TALK+0x11e>
   12e50:	0c 2f       	mov	r16, r28
   12e52:	10 e0       	ldi	r17, 0x00	; 0
   12e54:	c8 01       	movw	r24, r16
   12e56:	f6 dc       	rcall	.-1556   	; 0x12844 <SS80_is_MTA>
   12e58:	89 2b       	or	r24, r25
   12e5a:	f1 f0       	breq	.+60     	; 0x12e98 <GPIB_TALK+0x7e>
   12e5c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12e60:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12e64:	84 72       	andi	r24, 0x24	; 36
   12e66:	99 27       	eor	r25, r25
   12e68:	89 2b       	or	r24, r25
   12e6a:	71 f0       	breq	.+28     	; 0x12e88 <GPIB_TALK+0x6e>
   12e6c:	1f 92       	push	r1
   12e6e:	cf 93       	push	r28
   12e70:	8a e6       	ldi	r24, 0x6A	; 106
   12e72:	93 e1       	ldi	r25, 0x13	; 19
   12e74:	1f 92       	push	r1
   12e76:	9f 93       	push	r25
   12e78:	8f 93       	push	r24
   12e7a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   12e7e:	0f 90       	pop	r0
   12e80:	0f 90       	pop	r0
   12e82:	0f 90       	pop	r0
   12e84:	0f 90       	pop	r0
   12e86:	0f 90       	pop	r0
   12e88:	80 91 46 1f 	lds	r24, 0x1F46	; 0x801f46 <spoll>
   12e8c:	88 23       	and	r24, r24
   12e8e:	09 f4       	brne	.+2      	; 0x12e92 <GPIB_TALK+0x78>
   12e90:	53 c0       	rjmp	.+166    	; 0x12f38 <GPIB_TALK+0x11e>
   12e92:	0e 94 e7 a3 	call	0x147ce	; 0x147ce <SS80_Report>
   12e96:	50 c0       	rjmp	.+160    	; 0x12f38 <GPIB_TALK+0x11e>
   12e98:	c8 01       	movw	r24, r16
   12e9a:	07 dd       	rcall	.-1522   	; 0x128aa <AMIGO_is_MTA>
   12e9c:	89 2b       	or	r24, r25
   12e9e:	71 f0       	breq	.+28     	; 0x12ebc <GPIB_TALK+0xa2>
   12ea0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12ea4:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12ea8:	84 72       	andi	r24, 0x24	; 36
   12eaa:	99 27       	eor	r25, r25
   12eac:	89 2b       	or	r24, r25
   12eae:	09 f4       	brne	.+2      	; 0x12eb2 <GPIB_TALK+0x98>
   12eb0:	43 c0       	rjmp	.+134    	; 0x12f38 <GPIB_TALK+0x11e>
   12eb2:	1f 92       	push	r1
   12eb4:	cf 93       	push	r28
   12eb6:	88 e5       	ldi	r24, 0x58	; 88
   12eb8:	93 e1       	ldi	r25, 0x13	; 19
   12eba:	34 c0       	rjmp	.+104    	; 0x12f24 <GPIB_TALK+0x10a>
   12ebc:	c8 01       	movw	r24, r16
   12ebe:	28 dd       	rcall	.-1456   	; 0x12910 <PRINTER_is_MTA>
   12ec0:	89 2b       	or	r24, r25
   12ec2:	69 f0       	breq	.+26     	; 0x12ede <GPIB_TALK+0xc4>
   12ec4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12ec8:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12ecc:	84 72       	andi	r24, 0x24	; 36
   12ece:	99 27       	eor	r25, r25
   12ed0:	89 2b       	or	r24, r25
   12ed2:	91 f1       	breq	.+100    	; 0x12f38 <GPIB_TALK+0x11e>
   12ed4:	1f 92       	push	r1
   12ed6:	cf 93       	push	r28
   12ed8:	84 e4       	ldi	r24, 0x44	; 68
   12eda:	93 e1       	ldi	r25, 0x13	; 19
   12edc:	23 c0       	rjmp	.+70     	; 0x12f24 <GPIB_TALK+0x10a>
   12ede:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   12ee2:	90 e0       	ldi	r25, 0x00	; 0
   12ee4:	04 dd       	rcall	.-1528   	; 0x128ee <PRINTER_is_MLA>
   12ee6:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   12eea:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   12eee:	89 2b       	or	r24, r25
   12ef0:	99 f0       	breq	.+38     	; 0x12f18 <GPIB_TALK+0xfe>
   12ef2:	24 72       	andi	r18, 0x24	; 36
   12ef4:	33 27       	eor	r19, r19
   12ef6:	23 2b       	or	r18, r19
   12ef8:	51 f0       	breq	.+20     	; 0x12f0e <GPIB_TALK+0xf4>
   12efa:	84 e3       	ldi	r24, 0x34	; 52
   12efc:	93 e1       	ldi	r25, 0x13	; 19
   12efe:	1f 92       	push	r1
   12f00:	9f 93       	push	r25
   12f02:	8f 93       	push	r24
   12f04:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   12f08:	0f 90       	pop	r0
   12f0a:	0f 90       	pop	r0
   12f0c:	0f 90       	pop	r0
   12f0e:	80 e0       	ldi	r24, 0x00	; 0
   12f10:	90 e0       	ldi	r25, 0x00	; 0
   12f12:	0e 94 0d b5 	call	0x16a1a	; 0x16a1a <printer_open>
   12f16:	10 c0       	rjmp	.+32     	; 0x12f38 <GPIB_TALK+0x11e>
   12f18:	22 ff       	sbrs	r18, 2
   12f1a:	0e c0       	rjmp	.+28     	; 0x12f38 <GPIB_TALK+0x11e>
   12f1c:	1f 92       	push	r1
   12f1e:	cf 93       	push	r28
   12f20:	88 e2       	ldi	r24, 0x28	; 40
   12f22:	93 e1       	ldi	r25, 0x13	; 19
   12f24:	1f 92       	push	r1
   12f26:	9f 93       	push	r25
   12f28:	8f 93       	push	r24
   12f2a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   12f2e:	0f 90       	pop	r0
   12f30:	0f 90       	pop	r0
   12f32:	0f 90       	pop	r0
   12f34:	0f 90       	pop	r0
   12f36:	0f 90       	pop	r0
   12f38:	80 e0       	ldi	r24, 0x00	; 0
   12f3a:	90 e0       	ldi	r25, 0x00	; 0
   12f3c:	cf 91       	pop	r28
   12f3e:	1f 91       	pop	r17
   12f40:	0f 91       	pop	r16
   12f42:	08 95       	ret

00012f44 <GPIB_SECONDARY_ADDRESS>:
   12f44:	0f 93       	push	r16
   12f46:	1f 93       	push	r17
   12f48:	cf 93       	push	r28
   12f4a:	c8 2f       	mov	r28, r24
   12f4c:	08 2f       	mov	r16, r24
   12f4e:	10 e0       	ldi	r17, 0x00	; 0
   12f50:	c8 01       	movw	r24, r16
   12f52:	89 dc       	rcall	.-1774   	; 0x12866 <SS80_is_MSA>
   12f54:	89 2b       	or	r24, r25
   12f56:	19 f1       	breq	.+70     	; 0x12f9e <GPIB_SECONDARY_ADDRESS+0x5a>
   12f58:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   12f5c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   12f60:	84 72       	andi	r24, 0x24	; 36
   12f62:	99 27       	eor	r25, r25
   12f64:	89 2b       	or	r24, r25
   12f66:	71 f0       	breq	.+28     	; 0x12f84 <GPIB_SECONDARY_ADDRESS+0x40>
   12f68:	1f 92       	push	r1
   12f6a:	cf 93       	push	r28
   12f6c:	87 e1       	ldi	r24, 0x17	; 23
   12f6e:	93 e1       	ldi	r25, 0x13	; 19
   12f70:	1f 92       	push	r1
   12f72:	9f 93       	push	r25
   12f74:	8f 93       	push	r24
   12f76:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   12f7a:	0f 90       	pop	r0
   12f7c:	0f 90       	pop	r0
   12f7e:	0f 90       	pop	r0
   12f80:	0f 90       	pop	r0
   12f82:	0f 90       	pop	r0
   12f84:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   12f88:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   12f8c:	81 81       	ldd	r24, Z+1	; 0x01
   12f8e:	90 e0       	ldi	r25, 0x00	; 0
   12f90:	0e 94 4a 8e 	call	0x11c94	; 0x11c94 <gpib_disable_PPR>
   12f94:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   12f98:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   12f9c:	27 c0       	rjmp	.+78     	; 0x12fec <GPIB_SECONDARY_ADDRESS+0xa8>
   12f9e:	c8 01       	movw	r24, r16
   12fa0:	95 dc       	rcall	.-1750   	; 0x128cc <AMIGO_is_MSA>
   12fa2:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   12fa6:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   12faa:	89 2b       	or	r24, r25
   12fac:	21 f1       	breq	.+72     	; 0x12ff6 <GPIB_SECONDARY_ADDRESS+0xb2>
   12fae:	c9 01       	movw	r24, r18
   12fb0:	84 72       	andi	r24, 0x24	; 36
   12fb2:	99 27       	eor	r25, r25
   12fb4:	89 2b       	or	r24, r25
   12fb6:	71 f0       	breq	.+28     	; 0x12fd4 <GPIB_SECONDARY_ADDRESS+0x90>
   12fb8:	1f 92       	push	r1
   12fba:	cf 93       	push	r28
   12fbc:	85 e0       	ldi	r24, 0x05	; 5
   12fbe:	93 e1       	ldi	r25, 0x13	; 19
   12fc0:	1f 92       	push	r1
   12fc2:	9f 93       	push	r25
   12fc4:	8f 93       	push	r24
   12fc6:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   12fca:	0f 90       	pop	r0
   12fcc:	0f 90       	pop	r0
   12fce:	0f 90       	pop	r0
   12fd0:	0f 90       	pop	r0
   12fd2:	0f 90       	pop	r0
   12fd4:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   12fd8:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   12fdc:	81 81       	ldd	r24, Z+1	; 0x01
   12fde:	90 e0       	ldi	r25, 0x00	; 0
   12fe0:	0e 94 4a 8e 	call	0x11c94	; 0x11c94 <gpib_disable_PPR>
   12fe4:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   12fe8:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   12fec:	63 a1       	ldd	r22, Z+35	; 0x23
   12fee:	74 a1       	ldd	r23, Z+36	; 0x24
   12ff0:	8c 2f       	mov	r24, r28
   12ff2:	12 de       	rcall	.-988    	; 0x12c18 <Send_Identify>
   12ff4:	20 c0       	rjmp	.+64     	; 0x13036 <GPIB_SECONDARY_ADDRESS+0xf2>
   12ff6:	c9 01       	movw	r24, r18
   12ff8:	84 72       	andi	r24, 0x24	; 36
   12ffa:	99 27       	eor	r25, r25
   12ffc:	00 97       	sbiw	r24, 0x00	; 0
   12ffe:	d9 f0       	breq	.+54     	; 0x13036 <GPIB_SECONDARY_ADDRESS+0xf2>
   13000:	80 91 49 1f 	lds	r24, 0x1F49	; 0x801f49 <talking>
   13004:	1f 92       	push	r1
   13006:	8f 93       	push	r24
   13008:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   1300c:	1f 92       	push	r1
   1300e:	8f 93       	push	r24
   13010:	1f 92       	push	r1
   13012:	cf 93       	push	r28
   13014:	8f ed       	ldi	r24, 0xDF	; 223
   13016:	92 e1       	ldi	r25, 0x12	; 18
   13018:	1f 92       	push	r1
   1301a:	9f 93       	push	r25
   1301c:	8f 93       	push	r24
   1301e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   13022:	8d b7       	in	r24, 0x3d	; 61
   13024:	9e b7       	in	r25, 0x3e	; 62
   13026:	09 96       	adiw	r24, 0x09	; 9
   13028:	0f b6       	in	r0, 0x3f	; 63
   1302a:	f8 94       	cli
   1302c:	9e bf       	out	0x3e, r25	; 62
   1302e:	0f be       	out	0x3f, r0	; 63
   13030:	8d bf       	out	0x3d, r24	; 61
   13032:	80 e0       	ldi	r24, 0x00	; 0
   13034:	90 e0       	ldi	r25, 0x00	; 0
   13036:	cf 91       	pop	r28
   13038:	1f 91       	pop	r17
   1303a:	0f 91       	pop	r16
   1303c:	08 95       	ret

0001303e <listen_cleanup>:
   1303e:	60 91 45 1f 	lds	r22, 0x1F45	; 0x801f45 <listening_last>
   13042:	66 23       	and	r22, r22
   13044:	e9 f0       	breq	.+58     	; 0x13080 <listen_cleanup+0x42>
   13046:	70 e0       	ldi	r23, 0x00	; 0
   13048:	40 e2       	ldi	r20, 0x20	; 32
   1304a:	50 e0       	ldi	r21, 0x00	; 0
   1304c:	83 e0       	ldi	r24, 0x03	; 3
   1304e:	90 e0       	ldi	r25, 0x00	; 0
   13050:	0e 94 8c b7 	call	0x16f18	; 0x16f18 <find_device>
   13054:	01 96       	adiw	r24, 0x01	; 1
   13056:	a1 f0       	breq	.+40     	; 0x13080 <listen_cleanup+0x42>
   13058:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1305c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   13060:	84 72       	andi	r24, 0x24	; 36
   13062:	99 27       	eor	r25, r25
   13064:	89 2b       	or	r24, r25
   13066:	51 f0       	breq	.+20     	; 0x1307c <listen_cleanup+0x3e>
   13068:	8e ec       	ldi	r24, 0xCE	; 206
   1306a:	92 e1       	ldi	r25, 0x12	; 18
   1306c:	1f 92       	push	r1
   1306e:	9f 93       	push	r25
   13070:	8f 93       	push	r24
   13072:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   13076:	0f 90       	pop	r0
   13078:	0f 90       	pop	r0
   1307a:	0f 90       	pop	r0
   1307c:	0c 94 c0 b4 	jmp	0x16980	; 0x16980 <printer_close>
   13080:	08 95       	ret

00013082 <GPIB_LISTEN>:
   13082:	0f 93       	push	r16
   13084:	1f 93       	push	r17
   13086:	cf 93       	push	r28
   13088:	c8 2f       	mov	r28, r24
   1308a:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   1308e:	80 93 45 1f 	sts	0x1F45, r24	; 0x801f45 <listening_last>
   13092:	c0 93 4b 1f 	sts	0x1F4B, r28	; 0x801f4b <listening>
   13096:	d3 df       	rcall	.-90     	; 0x1303e <listen_cleanup>
   13098:	cf 33       	cpi	r28, 0x3F	; 63
   1309a:	19 f5       	brne	.+70     	; 0x130e2 <GPIB_LISTEN+0x60>
   1309c:	10 92 4b 1f 	sts	0x1F4B, r1	; 0x801f4b <listening>
   130a0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   130a4:	82 ff       	sbrs	r24, 2
   130a6:	75 c0       	rjmp	.+234    	; 0x13192 <GPIB_LISTEN+0x110>
   130a8:	87 ec       	ldi	r24, 0xC7	; 199
   130aa:	93 e1       	ldi	r25, 0x13	; 19
   130ac:	1f 92       	push	r1
   130ae:	9f 93       	push	r25
   130b0:	8f 93       	push	r24
   130b2:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   130b6:	0f 90       	pop	r0
   130b8:	0f 90       	pop	r0
   130ba:	0f 90       	pop	r0
   130bc:	80 91 43 1d 	lds	r24, 0x1D43	; 0x801d43 <lastcmd>
   130c0:	90 91 44 1d 	lds	r25, 0x1D44	; 0x801d44 <lastcmd+0x1>
   130c4:	8f 35       	cpi	r24, 0x5F	; 95
   130c6:	91 05       	cpc	r25, r1
   130c8:	09 f0       	breq	.+2      	; 0x130cc <GPIB_LISTEN+0x4a>
   130ca:	63 c0       	rjmp	.+198    	; 0x13192 <GPIB_LISTEN+0x110>
   130cc:	85 ec       	ldi	r24, 0xC5	; 197
   130ce:	93 e1       	ldi	r25, 0x13	; 19
   130d0:	1f 92       	push	r1
   130d2:	9f 93       	push	r25
   130d4:	8f 93       	push	r24
   130d6:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   130da:	0f 90       	pop	r0
   130dc:	0f 90       	pop	r0
   130de:	0f 90       	pop	r0
   130e0:	58 c0       	rjmp	.+176    	; 0x13192 <GPIB_LISTEN+0x110>
   130e2:	0c 2f       	mov	r16, r28
   130e4:	10 e0       	ldi	r17, 0x00	; 0
   130e6:	c8 01       	movw	r24, r16
   130e8:	cf db       	rcall	.-2146   	; 0x12888 <AMIGO_is_MLA>
   130ea:	89 2b       	or	r24, r25
   130ec:	71 f0       	breq	.+28     	; 0x1310a <GPIB_LISTEN+0x88>
   130ee:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   130f2:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   130f6:	84 72       	andi	r24, 0x24	; 36
   130f8:	99 27       	eor	r25, r25
   130fa:	89 2b       	or	r24, r25
   130fc:	09 f4       	brne	.+2      	; 0x13100 <GPIB_LISTEN+0x7e>
   130fe:	49 c0       	rjmp	.+146    	; 0x13192 <GPIB_LISTEN+0x110>
   13100:	1f 92       	push	r1
   13102:	cf 93       	push	r28
   13104:	83 eb       	ldi	r24, 0xB3	; 179
   13106:	93 e1       	ldi	r25, 0x13	; 19
   13108:	3a c0       	rjmp	.+116    	; 0x1317e <GPIB_LISTEN+0xfc>
   1310a:	c8 01       	movw	r24, r16
   1310c:	8a db       	rcall	.-2284   	; 0x12822 <SS80_is_MLA>
   1310e:	89 2b       	or	r24, r25
   13110:	69 f0       	breq	.+26     	; 0x1312c <GPIB_LISTEN+0xaa>
   13112:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13116:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1311a:	84 72       	andi	r24, 0x24	; 36
   1311c:	99 27       	eor	r25, r25
   1311e:	89 2b       	or	r24, r25
   13120:	c1 f1       	breq	.+112    	; 0x13192 <GPIB_LISTEN+0x110>
   13122:	1f 92       	push	r1
   13124:	cf 93       	push	r28
   13126:	82 ea       	ldi	r24, 0xA2	; 162
   13128:	93 e1       	ldi	r25, 0x13	; 19
   1312a:	29 c0       	rjmp	.+82     	; 0x1317e <GPIB_LISTEN+0xfc>
   1312c:	c8 01       	movw	r24, r16
   1312e:	df db       	rcall	.-2114   	; 0x128ee <PRINTER_is_MLA>
   13130:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   13134:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   13138:	89 2b       	or	r24, r25
   1313a:	d9 f0       	breq	.+54     	; 0x13172 <GPIB_LISTEN+0xf0>
   1313c:	24 72       	andi	r18, 0x24	; 36
   1313e:	33 27       	eor	r19, r19
   13140:	23 2b       	or	r18, r19
   13142:	71 f0       	breq	.+28     	; 0x13160 <GPIB_LISTEN+0xde>
   13144:	1f 92       	push	r1
   13146:	cf 93       	push	r28
   13148:	8e e8       	ldi	r24, 0x8E	; 142
   1314a:	93 e1       	ldi	r25, 0x13	; 19
   1314c:	1f 92       	push	r1
   1314e:	9f 93       	push	r25
   13150:	8f 93       	push	r24
   13152:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   13156:	0f 90       	pop	r0
   13158:	0f 90       	pop	r0
   1315a:	0f 90       	pop	r0
   1315c:	0f 90       	pop	r0
   1315e:	0f 90       	pop	r0
   13160:	80 91 49 1f 	lds	r24, 0x1F49	; 0x801f49 <talking>
   13164:	8f 35       	cpi	r24, 0x5F	; 95
   13166:	a9 f0       	breq	.+42     	; 0x13192 <GPIB_LISTEN+0x110>
   13168:	80 e0       	ldi	r24, 0x00	; 0
   1316a:	90 e0       	ldi	r25, 0x00	; 0
   1316c:	0e 94 0d b5 	call	0x16a1a	; 0x16a1a <printer_open>
   13170:	10 c0       	rjmp	.+32     	; 0x13192 <GPIB_LISTEN+0x110>
   13172:	22 ff       	sbrs	r18, 2
   13174:	0e c0       	rjmp	.+28     	; 0x13192 <GPIB_LISTEN+0x110>
   13176:	1f 92       	push	r1
   13178:	cf 93       	push	r28
   1317a:	82 e8       	ldi	r24, 0x82	; 130
   1317c:	93 e1       	ldi	r25, 0x13	; 19
   1317e:	1f 92       	push	r1
   13180:	9f 93       	push	r25
   13182:	8f 93       	push	r24
   13184:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   13188:	0f 90       	pop	r0
   1318a:	0f 90       	pop	r0
   1318c:	0f 90       	pop	r0
   1318e:	0f 90       	pop	r0
   13190:	0f 90       	pop	r0
   13192:	80 e0       	ldi	r24, 0x00	; 0
   13194:	90 e0       	ldi	r25, 0x00	; 0
   13196:	cf 91       	pop	r28
   13198:	1f 91       	pop	r17
   1319a:	0f 91       	pop	r16
   1319c:	08 95       	ret

0001319e <gpib_task>:
   1319e:	cf 93       	push	r28
   131a0:	df 93       	push	r29
   131a2:	0e 94 f1 8d 	call	0x11be2	; 0x11be2 <gpib_state_init>
   131a6:	c5 db       	rcall	.-2166   	; 0x12932 <gpib_init_devices>
   131a8:	10 92 c1 19 	sts	0x19C1, r1	; 0x8019c1 <gpib_log_fp+0x1>
   131ac:	10 92 c0 19 	sts	0x19C0, r1	; 0x8019c0 <gpib_log_fp>
   131b0:	80 e0       	ldi	r24, 0x00	; 0
   131b2:	90 e0       	ldi	r25, 0x00	; 0
   131b4:	06 d9       	rcall	.-3572   	; 0x123c2 <gpib_read_byte>
   131b6:	ec 01       	movw	r28, r24
   131b8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   131bc:	83 ff       	sbrs	r24, 3
   131be:	02 c0       	rjmp	.+4      	; 0x131c4 <gpib_task+0x26>
   131c0:	ce 01       	movw	r24, r28
   131c2:	d5 d9       	rcall	.-3158   	; 0x1256e <gpib_decode>
   131c4:	ce 01       	movw	r24, r28
   131c6:	4a dc       	rcall	.-1900   	; 0x12a5c <gpib_error_test>
   131c8:	9c 01       	movw	r18, r24
   131ca:	23 70       	andi	r18, 0x03	; 3
   131cc:	33 27       	eor	r19, r19
   131ce:	23 2b       	or	r18, r19
   131d0:	09 f0       	breq	.+2      	; 0x131d4 <gpib_task+0x36>
   131d2:	43 c0       	rjmp	.+134    	; 0x1325a <gpib_task+0xbc>
   131d4:	89 2b       	or	r24, r25
   131d6:	61 f7       	brne	.-40     	; 0x131b0 <gpib_task+0x12>
   131d8:	d2 ff       	sbrs	r29, 2
   131da:	26 c0       	rjmp	.+76     	; 0x13228 <gpib_task+0x8a>
   131dc:	8c 2f       	mov	r24, r28
   131de:	8f 77       	andi	r24, 0x7F	; 127
   131e0:	80 32       	cpi	r24, 0x20	; 32
   131e2:	10 f4       	brcc	.+4      	; 0x131e8 <gpib_task+0x4a>
   131e4:	63 dd       	rcall	.-1338   	; 0x12cac <GPIB>
   131e6:	e4 cf       	rjmp	.-56     	; 0x131b0 <gpib_task+0x12>
   131e8:	90 ee       	ldi	r25, 0xE0	; 224
   131ea:	98 0f       	add	r25, r24
   131ec:	90 32       	cpi	r25, 0x20	; 32
   131ee:	10 f4       	brcc	.+4      	; 0x131f4 <gpib_task+0x56>
   131f0:	48 df       	rcall	.-368    	; 0x13082 <GPIB_LISTEN>
   131f2:	de cf       	rjmp	.-68     	; 0x131b0 <gpib_task+0x12>
   131f4:	90 ec       	ldi	r25, 0xC0	; 192
   131f6:	98 0f       	add	r25, r24
   131f8:	90 32       	cpi	r25, 0x20	; 32
   131fa:	10 f4       	brcc	.+4      	; 0x13200 <gpib_task+0x62>
   131fc:	0e de       	rcall	.-996    	; 0x12e1a <GPIB_TALK>
   131fe:	d8 cf       	rjmp	.-80     	; 0x131b0 <gpib_task+0x12>
   13200:	90 91 4b 1f 	lds	r25, 0x1F4B	; 0x801f4b <listening>
   13204:	99 23       	and	r25, r25
   13206:	59 f0       	breq	.+22     	; 0x1321e <gpib_task+0x80>
   13208:	20 91 43 1d 	lds	r18, 0x1D43	; 0x801d43 <lastcmd>
   1320c:	30 91 44 1d 	lds	r19, 0x1D44	; 0x801d44 <lastcmd+0x1>
   13210:	2f 35       	cpi	r18, 0x5F	; 95
   13212:	31 05       	cpc	r19, r1
   13214:	21 f4       	brne	.+8      	; 0x1321e <gpib_task+0x80>
   13216:	10 92 4a 1f 	sts	0x1F4A, r1	; 0x801f4a <secondary>
   1321a:	94 de       	rcall	.-728    	; 0x12f44 <GPIB_SECONDARY_ADDRESS>
   1321c:	c9 cf       	rjmp	.-110    	; 0x131b0 <gpib_task+0x12>
   1321e:	80 93 4a 1f 	sts	0x1F4A, r24	; 0x801f4a <secondary>
   13222:	60 e0       	ldi	r22, 0x00	; 0
   13224:	90 e0       	ldi	r25, 0x00	; 0
   13226:	12 c0       	rjmp	.+36     	; 0x1324c <gpib_task+0xae>
   13228:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   1322c:	90 e0       	ldi	r25, 0x00	; 0
   1322e:	5f db       	rcall	.-2370   	; 0x128ee <PRINTER_is_MLA>
   13230:	89 2b       	or	r24, r25
   13232:	29 f0       	breq	.+10     	; 0x1323e <gpib_task+0xa0>
   13234:	ce 01       	movw	r24, r28
   13236:	99 27       	eor	r25, r25
   13238:	0e 94 ae b5 	call	0x16b5c	; 0x16b5c <printer_buffer>
   1323c:	b9 cf       	rjmp	.-142    	; 0x131b0 <gpib_task+0x12>
   1323e:	80 91 4a 1f 	lds	r24, 0x1F4A	; 0x801f4a <secondary>
   13242:	88 23       	and	r24, r24
   13244:	09 f4       	brne	.+2      	; 0x13248 <gpib_task+0xaa>
   13246:	b4 cf       	rjmp	.-152    	; 0x131b0 <gpib_task+0x12>
   13248:	61 e0       	ldi	r22, 0x01	; 1
   1324a:	ce 01       	movw	r24, r28
   1324c:	91 dc       	rcall	.-1758   	; 0x12b70 <GPIB_COMMANDS>
   1324e:	06 dc       	rcall	.-2036   	; 0x12a5c <gpib_error_test>
   13250:	83 70       	andi	r24, 0x03	; 3
   13252:	99 27       	eor	r25, r25
   13254:	89 2b       	or	r24, r25
   13256:	09 f4       	brne	.+2      	; 0x1325a <gpib_task+0xbc>
   13258:	ab cf       	rjmp	.-170    	; 0x131b0 <gpib_task+0x12>
   1325a:	df 91       	pop	r29
   1325c:	cf 91       	pop	r28
   1325e:	08 95       	ret

00013260 <talk_cleanup>:
   13260:	08 95       	ret

00013262 <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   13262:	cf 93       	push	r28
   13264:	df 93       	push	r29
   13266:	ec 01       	movw	r28, r24
    printf("gpib help\n");
   13268:	80 e1       	ldi	r24, 0x10	; 16
   1326a:	98 e1       	ldi	r25, 0x18	; 24
   1326c:	1f 92       	push	r1
   1326e:	9f 93       	push	r25
   13270:	8f 93       	push	r24
   13272:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    if(full)
   13276:	0f 90       	pop	r0
   13278:	0f 90       	pop	r0
   1327a:	0f 90       	pop	r0
   1327c:	cd 2b       	or	r28, r29
   1327e:	51 f0       	breq	.+20     	; 0x13294 <gpib_help+0x32>
    {
        printf("gpib prefix is optional\n"
   13280:	8f e8       	ldi	r24, 0x8F	; 143
   13282:	96 e1       	ldi	r25, 0x16	; 22
   13284:	1f 92       	push	r1
   13286:	9f 93       	push	r25
   13288:	8f 93       	push	r24
   1328a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1328e:	0f 90       	pop	r0
   13290:	0f 90       	pop	r0
   13292:	0f 90       	pop	r0
			"gpib port write latch [A-D] val\n"
			"gpib port write pins  [A-D] val\n"
            "\n"
            );
    }
}
   13294:	df 91       	pop	r29
   13296:	cf 91       	pop	r28
   13298:	08 95       	ret

0001329a <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   1329a:	ef 92       	push	r14
   1329c:	ff 92       	push	r15
   1329e:	0f 93       	push	r16
   132a0:	1f 93       	push	r17
   132a2:	cf 93       	push	r28
   132a4:	df 93       	push	r29
   132a6:	7c 01       	movw	r14, r24

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   132a8:	fb 01       	movw	r30, r22
   132aa:	80 81       	ld	r24, Z
   132ac:	91 81       	ldd	r25, Z+1	; 0x01

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   132ae:	00 97       	sbiw	r24, 0x00	; 0
   132b0:	19 f4       	brne	.+6      	; 0x132b8 <gpib_tests+0x1e>
        return(0);
   132b2:	80 e0       	ldi	r24, 0x00	; 0
   132b4:	90 e0       	ldi	r25, 0x00	; 0
   132b6:	e5 c2       	rjmp	.+1482   	; 0x13882 <gpib_tests+0x5e8>
   132b8:	eb 01       	movw	r28, r22

    ind = 0;
    ptr = argv[ind++];

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   132ba:	62 e8       	ldi	r22, 0x82	; 130
   132bc:	7d e0       	ldi	r23, 0x0D	; 13
   132be:	0e 94 f5 32 	call	0x65ea	; 0x65ea <MATCH>
   132c2:	89 2b       	or	r24, r25
   132c4:	b1 f3       	breq	.-20     	; 0x132b2 <gpib_tests+0x18>
        return(0);

    ptr = argv[ind++];
   132c6:	0a 81       	ldd	r16, Y+2	; 0x02
   132c8:	1b 81       	ldd	r17, Y+3	; 0x03
    if ( !ptr || MATCH(ptr,"help") )
   132ca:	01 15       	cp	r16, r1
   132cc:	11 05       	cpc	r17, r1
   132ce:	21 f4       	brne	.+8      	; 0x132d8 <gpib_tests+0x3e>
    {
        gpib_help(1);
   132d0:	81 e0       	ldi	r24, 0x01	; 1
   132d2:	90 e0       	ldi	r25, 0x00	; 0
   132d4:	c6 df       	rcall	.-116    	; 0x13262 <gpib_help>
   132d6:	d3 c2       	rjmp	.+1446   	; 0x1387e <gpib_tests+0x5e4>
    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
        return(0);

    ptr = argv[ind++];
    if ( !ptr || MATCH(ptr,"help") )
   132d8:	67 e7       	ldi	r22, 0x77	; 119
   132da:	76 e1       	ldi	r23, 0x16	; 22
   132dc:	c8 01       	movw	r24, r16
   132de:	0e 94 f5 32 	call	0x65ea	; 0x65ea <MATCH>
   132e2:	89 2b       	or	r24, r25
   132e4:	a9 f7       	brne	.-22     	; 0x132d0 <gpib_tests+0x36>
    {
        gpib_help(1);
        return(1);
    }

    if (MATCHARGS(ptr,"addresses",(ind+0),argc))
   132e6:	97 01       	movw	r18, r14
   132e8:	42 e0       	ldi	r20, 0x02	; 2
   132ea:	50 e0       	ldi	r21, 0x00	; 0
   132ec:	67 e8       	ldi	r22, 0x87	; 135
   132ee:	7d e0       	ldi	r23, 0x0D	; 13
   132f0:	c8 01       	movw	r24, r16
   132f2:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   132f6:	89 2b       	or	r24, r25
   132f8:	19 f0       	breq	.+6      	; 0x13300 <gpib_tests+0x66>
    {
        display_Addresses();
   132fa:	0e 94 d2 c3 	call	0x187a4	; 0x187a4 <display_Addresses>
   132fe:	bf c2       	rjmp	.+1406   	; 0x1387e <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"config",(ind+0),argc))
   13300:	97 01       	movw	r18, r14
   13302:	42 e0       	ldi	r20, 0x02	; 2
   13304:	50 e0       	ldi	r21, 0x00	; 0
   13306:	61 e9       	ldi	r22, 0x91	; 145
   13308:	7d e0       	ldi	r23, 0x0D	; 13
   1330a:	c8 01       	movw	r24, r16
   1330c:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   13310:	89 2b       	or	r24, r25
   13312:	19 f0       	breq	.+6      	; 0x1331a <gpib_tests+0x80>
    {
        display_Config();
   13314:	0e 94 cd c4 	call	0x1899a	; 0x1899a <display_Config>
   13318:	b2 c2       	rjmp	.+1380   	; 0x1387e <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"debug", (ind+1) ,argc))
   1331a:	97 01       	movw	r18, r14
   1331c:	43 e0       	ldi	r20, 0x03	; 3
   1331e:	50 e0       	ldi	r21, 0x00	; 0
   13320:	68 e9       	ldi	r22, 0x98	; 152
   13322:	7d e0       	ldi	r23, 0x0D	; 13
   13324:	c8 01       	movw	r24, r16
   13326:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   1332a:	89 2b       	or	r24, r25
   1332c:	69 f0       	breq	.+26     	; 0x13348 <gpib_tests+0xae>
    {
        debuglevel = get_value(argv[ind]);
   1332e:	8c 81       	ldd	r24, Y+4	; 0x04
   13330:	9d 81       	ldd	r25, Y+5	; 0x05
   13332:	0e 94 ee 33 	call	0x67dc	; 0x67dc <get_value>
   13336:	60 93 bd 01 	sts	0x01BD, r22	; 0x8001bd <debuglevel>
   1333a:	70 93 be 01 	sts	0x01BE, r23	; 0x8001be <debuglevel+0x1>
        printf("debug=%04XH\n", debuglevel);
   1333e:	7f 93       	push	r23
   13340:	6f 93       	push	r22
   13342:	82 e8       	ldi	r24, 0x82	; 130
   13344:	96 e1       	ldi	r25, 0x16	; 22
   13346:	b9 c1       	rjmp	.+882    	; 0x136ba <gpib_tests+0x420>
        return(1);
    }

    if (MATCHARGS(ptr,"elapsed_reset",(ind+0),argc))
   13348:	97 01       	movw	r18, r14
   1334a:	42 e0       	ldi	r20, 0x02	; 2
   1334c:	50 e0       	ldi	r21, 0x00	; 0
   1334e:	6e e9       	ldi	r22, 0x9E	; 158
   13350:	7d e0       	ldi	r23, 0x0D	; 13
   13352:	c8 01       	movw	r24, r16
   13354:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   13358:	89 2b       	or	r24, r25
   1335a:	19 f0       	breq	.+6      	; 0x13362 <gpib_tests+0xc8>
    {
        gpib_timer_elapsed_begin();
   1335c:	0e 94 61 8d 	call	0x11ac2	; 0x11ac2 <gpib_timer_elapsed_begin>
   13360:	8e c2       	rjmp	.+1308   	; 0x1387e <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"elapsed",(ind+0),argc))
   13362:	97 01       	movw	r18, r14
   13364:	42 e0       	ldi	r20, 0x02	; 2
   13366:	50 e0       	ldi	r21, 0x00	; 0
   13368:	6c ea       	ldi	r22, 0xAC	; 172
   1336a:	7d e0       	ldi	r23, 0x0D	; 13
   1336c:	c8 01       	movw	r24, r16
   1336e:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   13372:	89 2b       	or	r24, r25
   13374:	29 f0       	breq	.+10     	; 0x13380 <gpib_tests+0xe6>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   13376:	84 eb       	ldi	r24, 0xB4	; 180
   13378:	9d e0       	ldi	r25, 0x0D	; 13
   1337a:	0e 94 73 8d 	call	0x11ae6	; 0x11ae6 <gpib_timer_elapsed_end>
   1337e:	7f c2       	rjmp	.+1278   	; 0x1387e <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"task",(ind+0),argc))
   13380:	97 01       	movw	r18, r14
   13382:	42 e0       	ldi	r20, 0x02	; 2
   13384:	50 e0       	ldi	r21, 0x00	; 0
   13386:	62 ec       	ldi	r22, 0xC2	; 194
   13388:	7d e0       	ldi	r23, 0x0D	; 13
   1338a:	c8 01       	movw	r24, r16
   1338c:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   13390:	89 2b       	or	r24, r25
    {
        gpib_task();
   13392:	11 f0       	breq	.+4      	; 0x13398 <gpib_tests+0xfe>
   13394:	04 df       	rcall	.-504    	; 0x1319e <gpib_task>
   13396:	73 c2       	rjmp	.+1254   	; 0x1387e <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   13398:	97 01       	movw	r18, r14
   1339a:	43 e0       	ldi	r20, 0x03	; 3
   1339c:	50 e0       	ldi	r21, 0x00	; 0
   1339e:	67 ec       	ldi	r22, 0xC7	; 199
   133a0:	7d e0       	ldi	r23, 0x0D	; 13
   133a2:	c8 01       	movw	r24, r16
   133a4:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   133a8:	89 2b       	or	r24, r25
   133aa:	a1 f0       	breq	.+40     	; 0x133d4 <gpib_tests+0x13a>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   133ac:	8e 81       	ldd	r24, Y+6	; 0x06
   133ae:	9f 81       	ldd	r25, Y+7	; 0x07
   133b0:	00 97       	sbiw	r24, 0x00	; 0
   133b2:	51 f0       	breq	.+20     	; 0x133c8 <gpib_tests+0x12e>
   133b4:	6d ec       	ldi	r22, 0xCD	; 205
   133b6:	7d e0       	ldi	r23, 0x0D	; 13
   133b8:	0e 94 f5 32 	call	0x65ea	; 0x65ea <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   133bc:	61 e0       	ldi	r22, 0x01	; 1
   133be:	70 e0       	ldi	r23, 0x00	; 0
   133c0:	89 2b       	or	r24, r25
   133c2:	21 f4       	brne	.+8      	; 0x133cc <gpib_tests+0x132>
   133c4:	60 e0       	ldi	r22, 0x00	; 0
   133c6:	02 c0       	rjmp	.+4      	; 0x133cc <gpib_tests+0x132>
   133c8:	60 e0       	ldi	r22, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   133ca:	70 e0       	ldi	r23, 0x00	; 0
   133cc:	8c 81       	ldd	r24, Y+4	; 0x04
   133ce:	9d 81       	ldd	r25, Y+5	; 0x05
   133d0:	b8 da       	rcall	.-2704   	; 0x12942 <gpib_trace_task>
        return(1);
    }

    if ( MATCHARGS(ptr, "ifc",(ind+0),argc))
   133d2:	55 c2       	rjmp	.+1194   	; 0x1387e <gpib_tests+0x5e4>
   133d4:	97 01       	movw	r18, r14
   133d6:	42 e0       	ldi	r20, 0x02	; 2
   133d8:	50 e0       	ldi	r21, 0x00	; 0
   133da:	61 ed       	ldi	r22, 0xD1	; 209
   133dc:	7d e0       	ldi	r23, 0x0D	; 13
   133de:	c8 01       	movw	r24, r16
   133e0:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   133e4:	89 2b       	or	r24, r25
    {
        gpib_assert_ifc();
   133e6:	19 f0       	breq	.+6      	; 0x133ee <gpib_tests+0x154>
   133e8:	0e 94 7b 8e 	call	0x11cf6	; 0x11cf6 <gpib_assert_ifc>
        return(1);

    }

    if (MATCHARGS(ptr,"plot_echo", (ind+1) ,argc))
   133ec:	48 c2       	rjmp	.+1168   	; 0x1387e <gpib_tests+0x5e4>
   133ee:	97 01       	movw	r18, r14
   133f0:	43 e0       	ldi	r20, 0x03	; 3
   133f2:	50 e0       	ldi	r21, 0x00	; 0
   133f4:	65 ed       	ldi	r22, 0xD5	; 213
   133f6:	7d e0       	ldi	r23, 0x0D	; 13
   133f8:	c8 01       	movw	r24, r16
   133fa:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   133fe:	89 2b       	or	r24, r25
    {
        plot_echo(atoi(argv[ind]) );
   13400:	39 f0       	breq	.+14     	; 0x13410 <gpib_tests+0x176>
   13402:	8c 81       	ldd	r24, Y+4	; 0x04
   13404:	9d 81       	ldd	r25, Y+5	; 0x05
   13406:	0e 94 6c 47 	call	0x8ed8	; 0x8ed8 <atoi>
   1340a:	0e 94 50 b6 	call	0x16ca0	; 0x16ca0 <plot_echo>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_bit_clr", (ind+1) ,argc))
   1340e:	37 c2       	rjmp	.+1134   	; 0x1387e <gpib_tests+0x5e4>
   13410:	97 01       	movw	r18, r14
   13412:	43 e0       	ldi	r20, 0x03	; 3
   13414:	50 e0       	ldi	r21, 0x00	; 0
   13416:	6f ed       	ldi	r22, 0xDF	; 223
   13418:	7d e0       	ldi	r23, 0x0D	; 13
   1341a:	c8 01       	movw	r24, r16
   1341c:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   13420:	89 2b       	or	r24, r25
    {
        ppr_bit_clr(atoh(argv[ind] ));
   13422:	41 f0       	breq	.+16     	; 0x13434 <gpib_tests+0x19a>
   13424:	8c 81       	ldd	r24, Y+4	; 0x04
   13426:	9d 81       	ldd	r25, Y+5	; 0x05
   13428:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <atoh>
   1342c:	86 2f       	mov	r24, r22
   1342e:	0e 94 23 8c 	call	0x11846	; 0x11846 <ppr_bit_clr>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_bit_set", (ind+1) ,argc))
   13432:	25 c2       	rjmp	.+1098   	; 0x1387e <gpib_tests+0x5e4>
   13434:	97 01       	movw	r18, r14
   13436:	43 e0       	ldi	r20, 0x03	; 3
   13438:	50 e0       	ldi	r21, 0x00	; 0
   1343a:	6b ee       	ldi	r22, 0xEB	; 235
   1343c:	7d e0       	ldi	r23, 0x0D	; 13
   1343e:	c8 01       	movw	r24, r16
   13440:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   13444:	89 2b       	or	r24, r25
    {
        ppr_bit_set(atoh(argv[ind]) );
   13446:	41 f0       	breq	.+16     	; 0x13458 <gpib_tests+0x1be>
   13448:	8c 81       	ldd	r24, Y+4	; 0x04
   1344a:	9d 81       	ldd	r25, Y+5	; 0x05
   1344c:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <atoh>
   13450:	86 2f       	mov	r24, r22
   13452:	0e 94 16 8c 	call	0x1182c	; 0x1182c <ppr_bit_set>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_set", (ind+1) ,argc))
   13456:	13 c2       	rjmp	.+1062   	; 0x1387e <gpib_tests+0x5e4>
   13458:	97 01       	movw	r18, r14
   1345a:	43 e0       	ldi	r20, 0x03	; 3
   1345c:	50 e0       	ldi	r21, 0x00	; 0
   1345e:	67 ef       	ldi	r22, 0xF7	; 247
   13460:	7d e0       	ldi	r23, 0x0D	; 13
   13462:	c8 01       	movw	r24, r16
   13464:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   13468:	89 2b       	or	r24, r25
    {
        ppr_set(atoh(argv[ind]) );
   1346a:	41 f0       	breq	.+16     	; 0x1347c <gpib_tests+0x1e2>
   1346c:	8c 81       	ldd	r24, Y+4	; 0x04
   1346e:	9d 81       	ldd	r25, Y+5	; 0x05
   13470:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <atoh>
   13474:	86 2f       	mov	r24, r22
   13476:	0e 94 f7 8b 	call	0x117ee	; 0x117ee <ppr_set>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_init",(ind+0),argc))
   1347a:	01 c2       	rjmp	.+1026   	; 0x1387e <gpib_tests+0x5e4>
   1347c:	97 01       	movw	r18, r14
   1347e:	42 e0       	ldi	r20, 0x02	; 2
   13480:	50 e0       	ldi	r21, 0x00	; 0
   13482:	6f ef       	ldi	r22, 0xFF	; 255
   13484:	7d e0       	ldi	r23, 0x0D	; 13
   13486:	c8 01       	movw	r24, r16
   13488:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   1348c:	89 2b       	or	r24, r25
    {
        ppr_init();
   1348e:	19 f0       	breq	.+6      	; 0x13496 <gpib_tests+0x1fc>
   13490:	0e 94 05 8c 	call	0x1180a	; 0x1180a <ppr_init>
        return(1);
    }


	// port read
    if (MATCHARGS(ptr,"port",(ind+3),argc))
   13494:	f4 c1       	rjmp	.+1000   	; 0x1387e <gpib_tests+0x5e4>
   13496:	97 01       	movw	r18, r14
   13498:	45 e0       	ldi	r20, 0x05	; 5
   1349a:	50 e0       	ldi	r21, 0x00	; 0
   1349c:	68 e0       	ldi	r22, 0x08	; 8
   1349e:	7e e0       	ldi	r23, 0x0E	; 14
   134a0:	c8 01       	movw	r24, r16
   134a2:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   134a6:	89 2b       	or	r24, r25
   134a8:	09 f4       	brne	.+2      	; 0x134ac <gpib_tests+0x212>
    {
        if( MATCHI(argv[ind],"read") )
   134aa:	12 c1       	rjmp	.+548    	; 0x136d0 <gpib_tests+0x436>
   134ac:	6d e0       	ldi	r22, 0x0D	; 13
   134ae:	7e e0       	ldi	r23, 0x0E	; 14
   134b0:	8c 81       	ldd	r24, Y+4	; 0x04
   134b2:	9d 81       	ldd	r25, Y+5	; 0x05
   134b4:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   134b8:	89 2b       	or	r24, r25
   134ba:	09 f4       	brne	.+2      	; 0x134be <gpib_tests+0x224>
		{
			if( MATCHI(argv[ind+1],"pins") )
   134bc:	09 c1       	rjmp	.+530    	; 0x136d0 <gpib_tests+0x436>
   134be:	62 e1       	ldi	r22, 0x12	; 18
   134c0:	7e e0       	ldi	r23, 0x0E	; 14
   134c2:	8e 81       	ldd	r24, Y+6	; 0x06
   134c4:	9f 81       	ldd	r25, Y+7	; 0x07
   134c6:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   134ca:	89 2b       	or	r24, r25
   134cc:	09 f4       	brne	.+2      	; 0x134d0 <gpib_tests+0x236>
			{   
				if( MATCHI(argv[ind+2],"A")) 
   134ce:	4c c0       	rjmp	.+152    	; 0x13568 <gpib_tests+0x2ce>
   134d0:	6a e0       	ldi	r22, 0x0A	; 10
   134d2:	74 e1       	ldi	r23, 0x14	; 20
   134d4:	88 85       	ldd	r24, Y+8	; 0x08
   134d6:	99 85       	ldd	r25, Y+9	; 0x09
   134d8:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   134dc:	89 2b       	or	r24, r25
				{
					printf("Port pins A RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTA) );
   134de:	59 f0       	breq	.+22     	; 0x134f6 <gpib_tests+0x25c>
   134e0:	e2 b1       	in	r30, 0x02	; 2
   134e2:	83 e0       	ldi	r24, 0x03	; 3
   134e4:	e8 9f       	mul	r30, r24
   134e6:	f0 01       	movw	r30, r0
   134e8:	11 24       	eor	r1, r1
   134ea:	80 a1       	ldd	r24, Z+32	; 0x20
   134ec:	1f 92       	push	r1
   134ee:	8f 93       	push	r24
   134f0:	8a e6       	ldi	r24, 0x6A	; 106
   134f2:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   134f4:	e2 c0       	rjmp	.+452    	; 0x136ba <gpib_tests+0x420>
   134f6:	67 e1       	ldi	r22, 0x17	; 23
   134f8:	7e e0       	ldi	r23, 0x0E	; 14
   134fa:	88 85       	ldd	r24, Y+8	; 0x08
   134fc:	99 85       	ldd	r25, Y+9	; 0x09
   134fe:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   13502:	89 2b       	or	r24, r25
				{
					printf("Port pins B RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTB) );
   13504:	59 f0       	breq	.+22     	; 0x1351c <gpib_tests+0x282>
   13506:	e5 b1       	in	r30, 0x05	; 5
   13508:	83 e0       	ldi	r24, 0x03	; 3
   1350a:	e8 9f       	mul	r30, r24
   1350c:	f0 01       	movw	r30, r0
   1350e:	11 24       	eor	r1, r1
   13510:	80 a1       	ldd	r24, Z+32	; 0x20
   13512:	1f 92       	push	r1
   13514:	8f 93       	push	r24
   13516:	82 e5       	ldi	r24, 0x52	; 82
   13518:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   1351a:	cf c0       	rjmp	.+414    	; 0x136ba <gpib_tests+0x420>
   1351c:	60 e4       	ldi	r22, 0x40	; 64
   1351e:	7d e0       	ldi	r23, 0x0D	; 13
   13520:	88 85       	ldd	r24, Y+8	; 0x08
   13522:	99 85       	ldd	r25, Y+9	; 0x09
   13524:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   13528:	89 2b       	or	r24, r25
				{
					printf("Port pins C RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTC) );
   1352a:	59 f0       	breq	.+22     	; 0x13542 <gpib_tests+0x2a8>
   1352c:	e8 b1       	in	r30, 0x08	; 8
   1352e:	83 e0       	ldi	r24, 0x03	; 3
   13530:	e8 9f       	mul	r30, r24
   13532:	f0 01       	movw	r30, r0
   13534:	11 24       	eor	r1, r1
   13536:	80 a1       	ldd	r24, Z+32	; 0x20
   13538:	1f 92       	push	r1
   1353a:	8f 93       	push	r24
   1353c:	8a e3       	ldi	r24, 0x3A	; 58
   1353e:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   13540:	bc c0       	rjmp	.+376    	; 0x136ba <gpib_tests+0x420>
   13542:	6d e9       	ldi	r22, 0x9D	; 157
   13544:	77 e0       	ldi	r23, 0x07	; 7
   13546:	88 85       	ldd	r24, Y+8	; 0x08
   13548:	99 85       	ldd	r25, Y+9	; 0x09
   1354a:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   1354e:	89 2b       	or	r24, r25
				{
					printf("Port pins D RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTD) );
   13550:	59 f0       	breq	.+22     	; 0x13568 <gpib_tests+0x2ce>
   13552:	eb b1       	in	r30, 0x0b	; 11
   13554:	83 e0       	ldi	r24, 0x03	; 3
   13556:	e8 9f       	mul	r30, r24
   13558:	f0 01       	movw	r30, r0
   1355a:	11 24       	eor	r1, r1
   1355c:	80 a1       	ldd	r24, Z+32	; 0x20
   1355e:	1f 92       	push	r1
   13560:	8f 93       	push	r24
   13562:	82 e2       	ldi	r24, 0x22	; 34
   13564:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"latch") )
   13566:	a9 c0       	rjmp	.+338    	; 0x136ba <gpib_tests+0x420>
   13568:	69 e1       	ldi	r22, 0x19	; 25
   1356a:	7e e0       	ldi	r23, 0x0E	; 14
   1356c:	8e 81       	ldd	r24, Y+6	; 0x06
   1356e:	9f 81       	ldd	r25, Y+7	; 0x07
   13570:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   13574:	89 2b       	or	r24, r25
   13576:	09 f4       	brne	.+2      	; 0x1357a <gpib_tests+0x2e0>
			{   
				if( MATCHI(argv[ind+2],"A"))
   13578:	4c c0       	rjmp	.+152    	; 0x13612 <gpib_tests+0x378>
   1357a:	6a e0       	ldi	r22, 0x0A	; 10
   1357c:	74 e1       	ldi	r23, 0x14	; 20
   1357e:	88 85       	ldd	r24, Y+8	; 0x08
   13580:	99 85       	ldd	r25, Y+9	; 0x09
   13582:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   13586:	89 2b       	or	r24, r25
				{
					printf("Port latch A RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTA) );
   13588:	59 f0       	breq	.+22     	; 0x135a0 <gpib_tests+0x306>
   1358a:	e2 b1       	in	r30, 0x02	; 2
   1358c:	83 e0       	ldi	r24, 0x03	; 3
   1358e:	e8 9f       	mul	r30, r24
   13590:	f0 01       	movw	r30, r0
   13592:	11 24       	eor	r1, r1
   13594:	82 a1       	ldd	r24, Z+34	; 0x22
   13596:	1f 92       	push	r1
   13598:	8f 93       	push	r24
   1359a:	89 e0       	ldi	r24, 0x09	; 9
   1359c:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   1359e:	8d c0       	rjmp	.+282    	; 0x136ba <gpib_tests+0x420>
   135a0:	67 e1       	ldi	r22, 0x17	; 23
   135a2:	7e e0       	ldi	r23, 0x0E	; 14
   135a4:	88 85       	ldd	r24, Y+8	; 0x08
   135a6:	99 85       	ldd	r25, Y+9	; 0x09
   135a8:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   135ac:	89 2b       	or	r24, r25
				{
					printf("Port latch B RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTB) );
   135ae:	59 f0       	breq	.+22     	; 0x135c6 <gpib_tests+0x32c>
   135b0:	e5 b1       	in	r30, 0x05	; 5
   135b2:	83 e0       	ldi	r24, 0x03	; 3
   135b4:	e8 9f       	mul	r30, r24
   135b6:	f0 01       	movw	r30, r0
   135b8:	11 24       	eor	r1, r1
   135ba:	82 a1       	ldd	r24, Z+34	; 0x22
   135bc:	1f 92       	push	r1
   135be:	8f 93       	push	r24
   135c0:	80 ef       	ldi	r24, 0xF0	; 240
   135c2:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   135c4:	7a c0       	rjmp	.+244    	; 0x136ba <gpib_tests+0x420>
   135c6:	60 e4       	ldi	r22, 0x40	; 64
   135c8:	7d e0       	ldi	r23, 0x0D	; 13
   135ca:	88 85       	ldd	r24, Y+8	; 0x08
   135cc:	99 85       	ldd	r25, Y+9	; 0x09
   135ce:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   135d2:	89 2b       	or	r24, r25
				{
					printf("Port latch C RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTC) );
   135d4:	59 f0       	breq	.+22     	; 0x135ec <gpib_tests+0x352>
   135d6:	e8 b1       	in	r30, 0x08	; 8
   135d8:	83 e0       	ldi	r24, 0x03	; 3
   135da:	e8 9f       	mul	r30, r24
   135dc:	f0 01       	movw	r30, r0
   135de:	11 24       	eor	r1, r1
   135e0:	82 a1       	ldd	r24, Z+34	; 0x22
   135e2:	1f 92       	push	r1
   135e4:	8f 93       	push	r24
   135e6:	87 ed       	ldi	r24, 0xD7	; 215
   135e8:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   135ea:	67 c0       	rjmp	.+206    	; 0x136ba <gpib_tests+0x420>
   135ec:	6d e9       	ldi	r22, 0x9D	; 157
   135ee:	77 e0       	ldi	r23, 0x07	; 7
   135f0:	88 85       	ldd	r24, Y+8	; 0x08
   135f2:	99 85       	ldd	r25, Y+9	; 0x09
   135f4:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   135f8:	89 2b       	or	r24, r25
				{
					printf("Port latch D RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTD) );
   135fa:	59 f0       	breq	.+22     	; 0x13612 <gpib_tests+0x378>
   135fc:	eb b1       	in	r30, 0x0b	; 11
   135fe:	83 e0       	ldi	r24, 0x03	; 3
   13600:	e8 9f       	mul	r30, r24
   13602:	f0 01       	movw	r30, r0
   13604:	11 24       	eor	r1, r1
   13606:	82 a1       	ldd	r24, Z+34	; 0x22
   13608:	1f 92       	push	r1
   1360a:	8f 93       	push	r24
   1360c:	8e eb       	ldi	r24, 0xBE	; 190
   1360e:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"ddr") )
   13610:	54 c0       	rjmp	.+168    	; 0x136ba <gpib_tests+0x420>
   13612:	6f e1       	ldi	r22, 0x1F	; 31
   13614:	7e e0       	ldi	r23, 0x0E	; 14
   13616:	8e 81       	ldd	r24, Y+6	; 0x06
   13618:	9f 81       	ldd	r25, Y+7	; 0x07
   1361a:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   1361e:	89 2b       	or	r24, r25
   13620:	09 f4       	brne	.+2      	; 0x13624 <gpib_tests+0x38a>
			{   
				if( MATCHI(argv[ind+2],"A"))
   13622:	56 c0       	rjmp	.+172    	; 0x136d0 <gpib_tests+0x436>
   13624:	6a e0       	ldi	r22, 0x0A	; 10
   13626:	74 e1       	ldi	r23, 0x14	; 20
   13628:	88 85       	ldd	r24, Y+8	; 0x08
   1362a:	99 85       	ldd	r25, Y+9	; 0x09
   1362c:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   13630:	89 2b       	or	r24, r25
				{
					printf("Port ddr A RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTA) );
   13632:	59 f0       	breq	.+22     	; 0x1364a <gpib_tests+0x3b0>
   13634:	e2 b1       	in	r30, 0x02	; 2
   13636:	83 e0       	ldi	r24, 0x03	; 3
   13638:	e8 9f       	mul	r30, r24
   1363a:	f0 01       	movw	r30, r0
   1363c:	11 24       	eor	r1, r1
   1363e:	81 a1       	ldd	r24, Z+33	; 0x21
   13640:	1f 92       	push	r1
   13642:	8f 93       	push	r24
   13644:	87 ea       	ldi	r24, 0xA7	; 167
   13646:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   13648:	38 c0       	rjmp	.+112    	; 0x136ba <gpib_tests+0x420>
   1364a:	67 e1       	ldi	r22, 0x17	; 23
   1364c:	7e e0       	ldi	r23, 0x0E	; 14
   1364e:	88 85       	ldd	r24, Y+8	; 0x08
   13650:	99 85       	ldd	r25, Y+9	; 0x09
   13652:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   13656:	89 2b       	or	r24, r25
				{
					printf("Port ddr B RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTB) );
   13658:	59 f0       	breq	.+22     	; 0x13670 <gpib_tests+0x3d6>
   1365a:	e5 b1       	in	r30, 0x05	; 5
   1365c:	83 e0       	ldi	r24, 0x03	; 3
   1365e:	e8 9f       	mul	r30, r24
   13660:	f0 01       	movw	r30, r0
   13662:	11 24       	eor	r1, r1
   13664:	81 a1       	ldd	r24, Z+33	; 0x21
   13666:	1f 92       	push	r1
   13668:	8f 93       	push	r24
   1366a:	80 e9       	ldi	r24, 0x90	; 144
   1366c:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   1366e:	25 c0       	rjmp	.+74     	; 0x136ba <gpib_tests+0x420>
   13670:	60 e4       	ldi	r22, 0x40	; 64
   13672:	7d e0       	ldi	r23, 0x0D	; 13
   13674:	88 85       	ldd	r24, Y+8	; 0x08
   13676:	99 85       	ldd	r25, Y+9	; 0x09
   13678:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   1367c:	89 2b       	or	r24, r25
				{
					printf("Port ddr C RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTC) );
   1367e:	59 f0       	breq	.+22     	; 0x13696 <gpib_tests+0x3fc>
   13680:	e8 b1       	in	r30, 0x08	; 8
   13682:	83 e0       	ldi	r24, 0x03	; 3
   13684:	e8 9f       	mul	r30, r24
   13686:	f0 01       	movw	r30, r0
   13688:	11 24       	eor	r1, r1
   1368a:	81 a1       	ldd	r24, Z+33	; 0x21
   1368c:	1f 92       	push	r1
   1368e:	8f 93       	push	r24
   13690:	89 e7       	ldi	r24, 0x79	; 121
   13692:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   13694:	12 c0       	rjmp	.+36     	; 0x136ba <gpib_tests+0x420>
   13696:	6d e9       	ldi	r22, 0x9D	; 157
   13698:	77 e0       	ldi	r23, 0x07	; 7
   1369a:	88 85       	ldd	r24, Y+8	; 0x08
   1369c:	99 85       	ldd	r25, Y+9	; 0x09
   1369e:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   136a2:	89 2b       	or	r24, r25
				{
					printf("Port ddr D RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTD) );
   136a4:	a9 f0       	breq	.+42     	; 0x136d0 <gpib_tests+0x436>
   136a6:	eb b1       	in	r30, 0x0b	; 11
   136a8:	83 e0       	ldi	r24, 0x03	; 3
   136aa:	e8 9f       	mul	r30, r24
   136ac:	f0 01       	movw	r30, r0
   136ae:	11 24       	eor	r1, r1
   136b0:	81 a1       	ldd	r24, Z+33	; 0x21
   136b2:	1f 92       	push	r1
   136b4:	8f 93       	push	r24
   136b6:	82 e6       	ldi	r24, 0x62	; 98
   136b8:	95 e1       	ldi	r25, 0x15	; 21
   136ba:	1f 92       	push	r1
   136bc:	9f 93       	push	r25
   136be:	8f 93       	push	r24
   136c0:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
					return (1);
   136c4:	0f 90       	pop	r0
   136c6:	0f 90       	pop	r0
   136c8:	0f 90       	pop	r0
   136ca:	0f 90       	pop	r0
   136cc:	0f 90       	pop	r0
			}
		}
	} // port read 

	// port write
    if (MATCHARGS(ptr,"port",(ind+4),argc))
   136ce:	d7 c0       	rjmp	.+430    	; 0x1387e <gpib_tests+0x5e4>
   136d0:	97 01       	movw	r18, r14
   136d2:	46 e0       	ldi	r20, 0x06	; 6
   136d4:	50 e0       	ldi	r21, 0x00	; 0
   136d6:	68 e0       	ldi	r22, 0x08	; 8
   136d8:	7e e0       	ldi	r23, 0x0E	; 14
   136da:	c8 01       	movw	r24, r16
   136dc:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   136e0:	89 2b       	or	r24, r25
   136e2:	09 f4       	brne	.+2      	; 0x136e6 <gpib_tests+0x44c>
    {
		if( MATCHI(argv[ind],"write") )
   136e4:	e6 cd       	rjmp	.-1076   	; 0x132b2 <gpib_tests+0x18>
   136e6:	65 e7       	ldi	r22, 0x75	; 117
   136e8:	73 e1       	ldi	r23, 0x13	; 19
   136ea:	8c 81       	ldd	r24, Y+4	; 0x04
   136ec:	9d 81       	ldd	r25, Y+5	; 0x05
   136ee:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   136f2:	89 2b       	or	r24, r25
   136f4:	09 f4       	brne	.+2      	; 0x136f8 <gpib_tests+0x45e>
		{
			uint8_t val;
			if( MATCHI(argv[ind+1],"pins") )
   136f6:	dd cd       	rjmp	.-1094   	; 0x132b2 <gpib_tests+0x18>
   136f8:	62 e1       	ldi	r22, 0x12	; 18
   136fa:	7e e0       	ldi	r23, 0x0E	; 14
   136fc:	8e 81       	ldd	r24, Y+6	; 0x06
   136fe:	9f 81       	ldd	r25, Y+7	; 0x07
   13700:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   13704:	89 2b       	or	r24, r25
   13706:	09 f4       	brne	.+2      	; 0x1370a <gpib_tests+0x470>
			{   
				val = get_value(argv[ind+3]);
   13708:	45 c0       	rjmp	.+138    	; 0x13794 <gpib_tests+0x4fa>
   1370a:	8a 85       	ldd	r24, Y+10	; 0x0a
   1370c:	9b 85       	ldd	r25, Y+11	; 0x0b
   1370e:	0e 94 ee 33 	call	0x67dc	; 0x67dc <get_value>

				if( MATCHI(argv[ind+2],"A"))
   13712:	16 2f       	mov	r17, r22
   13714:	6a e0       	ldi	r22, 0x0A	; 10
   13716:	74 e1       	ldi	r23, 0x14	; 20
   13718:	88 85       	ldd	r24, Y+8	; 0x08
   1371a:	99 85       	ldd	r25, Y+9	; 0x09
   1371c:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   13720:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTA,val);
   13722:	41 f0       	breq	.+16     	; 0x13734 <gpib_tests+0x49a>
   13724:	e2 b1       	in	r30, 0x02	; 2
   13726:	83 e0       	ldi	r24, 0x03	; 3
   13728:	e8 9f       	mul	r30, r24
   1372a:	f0 01       	movw	r30, r0
   1372c:	11 24       	eor	r1, r1
   1372e:	8f ef       	ldi	r24, 0xFF	; 255
   13730:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   13732:	45 c0       	rjmp	.+138    	; 0x137be <gpib_tests+0x524>
   13734:	67 e1       	ldi	r22, 0x17	; 23
   13736:	7e e0       	ldi	r23, 0x0E	; 14
   13738:	88 85       	ldd	r24, Y+8	; 0x08
   1373a:	99 85       	ldd	r25, Y+9	; 0x09
   1373c:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   13740:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTB,val);
   13742:	41 f0       	breq	.+16     	; 0x13754 <gpib_tests+0x4ba>
   13744:	e5 b1       	in	r30, 0x05	; 5
   13746:	83 e0       	ldi	r24, 0x03	; 3
   13748:	e8 9f       	mul	r30, r24
   1374a:	f0 01       	movw	r30, r0
   1374c:	11 24       	eor	r1, r1
   1374e:	8f ef       	ldi	r24, 0xFF	; 255
   13750:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   13752:	3f c0       	rjmp	.+126    	; 0x137d2 <gpib_tests+0x538>
   13754:	60 e4       	ldi	r22, 0x40	; 64
   13756:	7d e0       	ldi	r23, 0x0D	; 13
   13758:	88 85       	ldd	r24, Y+8	; 0x08
   1375a:	99 85       	ldd	r25, Y+9	; 0x09
   1375c:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   13760:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTC,val);
   13762:	41 f0       	breq	.+16     	; 0x13774 <gpib_tests+0x4da>
   13764:	e8 b1       	in	r30, 0x08	; 8
   13766:	83 e0       	ldi	r24, 0x03	; 3
   13768:	e8 9f       	mul	r30, r24
   1376a:	f0 01       	movw	r30, r0
   1376c:	11 24       	eor	r1, r1
   1376e:	8f ef       	ldi	r24, 0xFF	; 255
   13770:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   13772:	39 c0       	rjmp	.+114    	; 0x137e6 <gpib_tests+0x54c>
   13774:	6d e9       	ldi	r22, 0x9D	; 157
   13776:	77 e0       	ldi	r23, 0x07	; 7
   13778:	88 85       	ldd	r24, Y+8	; 0x08
   1377a:	99 85       	ldd	r25, Y+9	; 0x09
   1377c:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   13780:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTD,val);
   13782:	41 f0       	breq	.+16     	; 0x13794 <gpib_tests+0x4fa>
   13784:	eb b1       	in	r30, 0x0b	; 11
   13786:	83 e0       	ldi	r24, 0x03	; 3
   13788:	e8 9f       	mul	r30, r24
   1378a:	f0 01       	movw	r30, r0
   1378c:	11 24       	eor	r1, r1
   1378e:	8f ef       	ldi	r24, 0xFF	; 255
   13790:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"latch") )
   13792:	33 c0       	rjmp	.+102    	; 0x137fa <gpib_tests+0x560>
   13794:	69 e1       	ldi	r22, 0x19	; 25
   13796:	7e e0       	ldi	r23, 0x0E	; 14
   13798:	8e 81       	ldd	r24, Y+6	; 0x06
   1379a:	9f 81       	ldd	r25, Y+7	; 0x07
   1379c:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   137a0:	89 2b       	or	r24, r25
			{   

				val = get_value(argv[ind+3]);
   137a2:	91 f1       	breq	.+100    	; 0x13808 <gpib_tests+0x56e>
   137a4:	8a 85       	ldd	r24, Y+10	; 0x0a
   137a6:	9b 85       	ldd	r25, Y+11	; 0x0b
   137a8:	0e 94 ee 33 	call	0x67dc	; 0x67dc <get_value>

				if( MATCHI(argv[ind+2],"A"))
   137ac:	16 2f       	mov	r17, r22
   137ae:	6a e0       	ldi	r22, 0x0A	; 10
   137b0:	74 e1       	ldi	r23, 0x14	; 20
   137b2:	88 85       	ldd	r24, Y+8	; 0x08
   137b4:	99 85       	ldd	r25, Y+9	; 0x09
   137b6:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   137ba:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTA,val);
   137bc:	11 f0       	breq	.+4      	; 0x137c2 <gpib_tests+0x528>
   137be:	e2 b1       	in	r30, 0x02	; 2
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   137c0:	1d c0       	rjmp	.+58     	; 0x137fc <gpib_tests+0x562>
   137c2:	67 e1       	ldi	r22, 0x17	; 23
   137c4:	7e e0       	ldi	r23, 0x0E	; 14
   137c6:	88 85       	ldd	r24, Y+8	; 0x08
   137c8:	99 85       	ldd	r25, Y+9	; 0x09
   137ca:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   137ce:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTB,val);
   137d0:	11 f0       	breq	.+4      	; 0x137d6 <gpib_tests+0x53c>
   137d2:	e5 b1       	in	r30, 0x05	; 5
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   137d4:	13 c0       	rjmp	.+38     	; 0x137fc <gpib_tests+0x562>
   137d6:	60 e4       	ldi	r22, 0x40	; 64
   137d8:	7d e0       	ldi	r23, 0x0D	; 13
   137da:	88 85       	ldd	r24, Y+8	; 0x08
   137dc:	99 85       	ldd	r25, Y+9	; 0x09
   137de:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   137e2:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTC,val);
   137e4:	11 f0       	breq	.+4      	; 0x137ea <gpib_tests+0x550>
   137e6:	e8 b1       	in	r30, 0x08	; 8
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   137e8:	09 c0       	rjmp	.+18     	; 0x137fc <gpib_tests+0x562>
   137ea:	6d e9       	ldi	r22, 0x9D	; 157
   137ec:	77 e0       	ldi	r23, 0x07	; 7
   137ee:	88 85       	ldd	r24, Y+8	; 0x08
   137f0:	99 85       	ldd	r25, Y+9	; 0x09
   137f2:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   137f6:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTD,val);
   137f8:	39 f0       	breq	.+14     	; 0x13808 <gpib_tests+0x56e>
   137fa:	eb b1       	in	r30, 0x0b	; 11
   137fc:	83 e0       	ldi	r24, 0x03	; 3
   137fe:	e8 9f       	mul	r30, r24
   13800:	f0 01       	movw	r30, r0
   13802:	11 24       	eor	r1, r1
   13804:	12 a3       	std	Z+34, r17	; 0x22
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"ddr") )
   13806:	3b c0       	rjmp	.+118    	; 0x1387e <gpib_tests+0x5e4>
   13808:	6f e1       	ldi	r22, 0x1F	; 31
   1380a:	7e e0       	ldi	r23, 0x0E	; 14
   1380c:	8e 81       	ldd	r24, Y+6	; 0x06
   1380e:	9f 81       	ldd	r25, Y+7	; 0x07
   13810:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   13814:	89 2b       	or	r24, r25
   13816:	09 f4       	brne	.+2      	; 0x1381a <gpib_tests+0x580>
			{   

				val = get_value(argv[ind+3]);
   13818:	4c cd       	rjmp	.-1384   	; 0x132b2 <gpib_tests+0x18>
   1381a:	8a 85       	ldd	r24, Y+10	; 0x0a
   1381c:	9b 85       	ldd	r25, Y+11	; 0x0b
   1381e:	0e 94 ee 33 	call	0x67dc	; 0x67dc <get_value>

				if( MATCHI(argv[ind+2],"A"))
   13822:	16 2f       	mov	r17, r22
   13824:	6a e0       	ldi	r22, 0x0A	; 10
   13826:	74 e1       	ldi	r23, 0x14	; 20
   13828:	88 85       	ldd	r24, Y+8	; 0x08
   1382a:	99 85       	ldd	r25, Y+9	; 0x09
   1382c:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   13830:	89 2b       	or	r24, r25
				{
					GPIO_PORT_DDR_WR(PORTA,val);
   13832:	11 f0       	breq	.+4      	; 0x13838 <gpib_tests+0x59e>
   13834:	e2 b1       	in	r30, 0x02	; 2
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   13836:	1e c0       	rjmp	.+60     	; 0x13874 <gpib_tests+0x5da>
   13838:	67 e1       	ldi	r22, 0x17	; 23
   1383a:	7e e0       	ldi	r23, 0x0E	; 14
   1383c:	88 85       	ldd	r24, Y+8	; 0x08
   1383e:	99 85       	ldd	r25, Y+9	; 0x09
   13840:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   13844:	89 2b       	or	r24, r25
				{
					GPIO_PORT_DDR_WR(PORTB,val);
   13846:	11 f0       	breq	.+4      	; 0x1384c <gpib_tests+0x5b2>
   13848:	e5 b1       	in	r30, 0x05	; 5
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   1384a:	14 c0       	rjmp	.+40     	; 0x13874 <gpib_tests+0x5da>
   1384c:	60 e4       	ldi	r22, 0x40	; 64
   1384e:	7d e0       	ldi	r23, 0x0D	; 13
   13850:	88 85       	ldd	r24, Y+8	; 0x08
   13852:	99 85       	ldd	r25, Y+9	; 0x09
   13854:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   13858:	89 2b       	or	r24, r25
				{
					GPIO_PORT_DDR_WR(PORTC,val);
   1385a:	11 f0       	breq	.+4      	; 0x13860 <gpib_tests+0x5c6>
   1385c:	e8 b1       	in	r30, 0x08	; 8
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   1385e:	0a c0       	rjmp	.+20     	; 0x13874 <gpib_tests+0x5da>
   13860:	6d e9       	ldi	r22, 0x9D	; 157
   13862:	77 e0       	ldi	r23, 0x07	; 7
   13864:	88 85       	ldd	r24, Y+8	; 0x08
   13866:	99 85       	ldd	r25, Y+9	; 0x09
   13868:	0e 94 38 33 	call	0x6670	; 0x6670 <MATCHI>
   1386c:	89 2b       	or	r24, r25
   1386e:	09 f4       	brne	.+2      	; 0x13872 <gpib_tests+0x5d8>
				{
					GPIO_PORT_DDR_WR(PORTD,val);
   13870:	20 cd       	rjmp	.-1472   	; 0x132b2 <gpib_tests+0x18>
   13872:	eb b1       	in	r30, 0x0b	; 11
   13874:	83 e0       	ldi	r24, 0x03	; 3
   13876:	e8 9f       	mul	r30, r24
   13878:	f0 01       	movw	r30, r0
   1387a:	11 24       	eor	r1, r1
					return (1);
   1387c:	11 a3       	std	Z+33, r17	; 0x21
   1387e:	81 e0       	ldi	r24, 0x01	; 1
		}

	} // port write 

    return(0);
}
   13880:	90 e0       	ldi	r25, 0x00	; 0
   13882:	cd b7       	in	r28, 0x3d	; 61
   13884:	de b7       	in	r29, 0x3e	; 62
   13886:	e6 e0       	ldi	r30, 0x06	; 6
   13888:	0c 94 5c ec 	jmp	0x1d8b8	; 0x1d8b8 <__epilogue_restores__+0x18>

0001388c <SS80ControllerPack>:
   1388c:	0f 93       	push	r16
   1388e:	1f 93       	push	r17
   13890:	25 e0       	ldi	r18, 0x05	; 5
   13892:	30 e0       	ldi	r19, 0x00	; 0
   13894:	fc 01       	movw	r30, r24
   13896:	31 83       	std	Z+1, r19	; 0x01
   13898:	20 83       	st	Z, r18
   1389a:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   1389e:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   138a2:	05 a1       	ldd	r16, Z+37	; 0x25
   138a4:	16 a1       	ldd	r17, Z+38	; 0x26
   138a6:	20 e0       	ldi	r18, 0x00	; 0
   138a8:	30 e0       	ldi	r19, 0x00	; 0
   138aa:	42 e0       	ldi	r20, 0x02	; 2
   138ac:	50 e0       	ldi	r21, 0x00	; 0
   138ae:	60 e0       	ldi	r22, 0x00	; 0
   138b0:	70 e0       	ldi	r23, 0x00	; 0
   138b2:	82 ee       	ldi	r24, 0xE2	; 226
   138b4:	99 e1       	ldi	r25, 0x19	; 25
   138b6:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   138ba:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   138be:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   138c2:	07 a1       	ldd	r16, Z+39	; 0x27
   138c4:	10 a5       	ldd	r17, Z+40	; 0x28
   138c6:	20 e0       	ldi	r18, 0x00	; 0
   138c8:	30 e0       	ldi	r19, 0x00	; 0
   138ca:	42 e0       	ldi	r20, 0x02	; 2
   138cc:	50 e0       	ldi	r21, 0x00	; 0
   138ce:	61 e0       	ldi	r22, 0x01	; 1
   138d0:	70 e0       	ldi	r23, 0x00	; 0
   138d2:	82 ee       	ldi	r24, 0xE2	; 226
   138d4:	99 e1       	ldi	r25, 0x19	; 25
   138d6:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   138da:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   138de:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   138e2:	01 a5       	ldd	r16, Z+41	; 0x29
   138e4:	10 e0       	ldi	r17, 0x00	; 0
   138e6:	20 e0       	ldi	r18, 0x00	; 0
   138e8:	30 e0       	ldi	r19, 0x00	; 0
   138ea:	41 e0       	ldi	r20, 0x01	; 1
   138ec:	50 e0       	ldi	r21, 0x00	; 0
   138ee:	64 e0       	ldi	r22, 0x04	; 4
   138f0:	70 e0       	ldi	r23, 0x00	; 0
   138f2:	82 ee       	ldi	r24, 0xE2	; 226
   138f4:	99 e1       	ldi	r25, 0x19	; 25
   138f6:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   138fa:	82 ee       	ldi	r24, 0xE2	; 226
   138fc:	99 e1       	ldi	r25, 0x19	; 25
   138fe:	1f 91       	pop	r17
   13900:	0f 91       	pop	r16
   13902:	08 95       	ret

00013904 <SS80UnitPack>:
   13904:	0f 93       	push	r16
   13906:	1f 93       	push	r17
   13908:	23 e1       	ldi	r18, 0x13	; 19
   1390a:	30 e0       	ldi	r19, 0x00	; 0
   1390c:	fc 01       	movw	r30, r24
   1390e:	31 83       	std	Z+1, r19	; 0x01
   13910:	20 83       	st	Z, r18
   13912:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   13916:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   1391a:	02 a5       	ldd	r16, Z+42	; 0x2a
   1391c:	10 e0       	ldi	r17, 0x00	; 0
   1391e:	20 e0       	ldi	r18, 0x00	; 0
   13920:	30 e0       	ldi	r19, 0x00	; 0
   13922:	41 e0       	ldi	r20, 0x01	; 1
   13924:	50 e0       	ldi	r21, 0x00	; 0
   13926:	60 e0       	ldi	r22, 0x00	; 0
   13928:	70 e0       	ldi	r23, 0x00	; 0
   1392a:	8f ec       	ldi	r24, 0xCF	; 207
   1392c:	99 e1       	ldi	r25, 0x19	; 25
   1392e:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   13932:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   13936:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   1393a:	03 a5       	ldd	r16, Z+43	; 0x2b
   1393c:	14 a5       	ldd	r17, Z+44	; 0x2c
   1393e:	25 a5       	ldd	r18, Z+45	; 0x2d
   13940:	36 a5       	ldd	r19, Z+46	; 0x2e
   13942:	43 e0       	ldi	r20, 0x03	; 3
   13944:	50 e0       	ldi	r21, 0x00	; 0
   13946:	61 e0       	ldi	r22, 0x01	; 1
   13948:	70 e0       	ldi	r23, 0x00	; 0
   1394a:	8f ec       	ldi	r24, 0xCF	; 207
   1394c:	99 e1       	ldi	r25, 0x19	; 25
   1394e:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   13952:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   13956:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   1395a:	07 a5       	ldd	r16, Z+47	; 0x2f
   1395c:	10 a9       	ldd	r17, Z+48	; 0x30
   1395e:	20 e0       	ldi	r18, 0x00	; 0
   13960:	30 e0       	ldi	r19, 0x00	; 0
   13962:	42 e0       	ldi	r20, 0x02	; 2
   13964:	50 e0       	ldi	r21, 0x00	; 0
   13966:	64 e0       	ldi	r22, 0x04	; 4
   13968:	70 e0       	ldi	r23, 0x00	; 0
   1396a:	8f ec       	ldi	r24, 0xCF	; 207
   1396c:	99 e1       	ldi	r25, 0x19	; 25
   1396e:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   13972:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   13976:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   1397a:	01 a9       	ldd	r16, Z+49	; 0x31
   1397c:	10 e0       	ldi	r17, 0x00	; 0
   1397e:	20 e0       	ldi	r18, 0x00	; 0
   13980:	30 e0       	ldi	r19, 0x00	; 0
   13982:	41 e0       	ldi	r20, 0x01	; 1
   13984:	50 e0       	ldi	r21, 0x00	; 0
   13986:	66 e0       	ldi	r22, 0x06	; 6
   13988:	70 e0       	ldi	r23, 0x00	; 0
   1398a:	8f ec       	ldi	r24, 0xCF	; 207
   1398c:	99 e1       	ldi	r25, 0x19	; 25
   1398e:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   13992:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   13996:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   1399a:	02 a9       	ldd	r16, Z+50	; 0x32
   1399c:	10 e0       	ldi	r17, 0x00	; 0
   1399e:	20 e0       	ldi	r18, 0x00	; 0
   139a0:	30 e0       	ldi	r19, 0x00	; 0
   139a2:	41 e0       	ldi	r20, 0x01	; 1
   139a4:	50 e0       	ldi	r21, 0x00	; 0
   139a6:	67 e0       	ldi	r22, 0x07	; 7
   139a8:	70 e0       	ldi	r23, 0x00	; 0
   139aa:	8f ec       	ldi	r24, 0xCF	; 207
   139ac:	99 e1       	ldi	r25, 0x19	; 25
   139ae:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   139b2:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   139b6:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   139ba:	03 a9       	ldd	r16, Z+51	; 0x33
   139bc:	14 a9       	ldd	r17, Z+52	; 0x34
   139be:	20 e0       	ldi	r18, 0x00	; 0
   139c0:	30 e0       	ldi	r19, 0x00	; 0
   139c2:	42 e0       	ldi	r20, 0x02	; 2
   139c4:	50 e0       	ldi	r21, 0x00	; 0
   139c6:	68 e0       	ldi	r22, 0x08	; 8
   139c8:	70 e0       	ldi	r23, 0x00	; 0
   139ca:	8f ec       	ldi	r24, 0xCF	; 207
   139cc:	99 e1       	ldi	r25, 0x19	; 25
   139ce:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   139d2:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   139d6:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   139da:	05 a9       	ldd	r16, Z+53	; 0x35
   139dc:	16 a9       	ldd	r17, Z+54	; 0x36
   139de:	20 e0       	ldi	r18, 0x00	; 0
   139e0:	30 e0       	ldi	r19, 0x00	; 0
   139e2:	42 e0       	ldi	r20, 0x02	; 2
   139e4:	50 e0       	ldi	r21, 0x00	; 0
   139e6:	6a e0       	ldi	r22, 0x0A	; 10
   139e8:	70 e0       	ldi	r23, 0x00	; 0
   139ea:	8f ec       	ldi	r24, 0xCF	; 207
   139ec:	99 e1       	ldi	r25, 0x19	; 25
   139ee:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   139f2:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   139f6:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   139fa:	07 a9       	ldd	r16, Z+55	; 0x37
   139fc:	10 ad       	ldd	r17, Z+56	; 0x38
   139fe:	20 e0       	ldi	r18, 0x00	; 0
   13a00:	30 e0       	ldi	r19, 0x00	; 0
   13a02:	42 e0       	ldi	r20, 0x02	; 2
   13a04:	50 e0       	ldi	r21, 0x00	; 0
   13a06:	6c e0       	ldi	r22, 0x0C	; 12
   13a08:	70 e0       	ldi	r23, 0x00	; 0
   13a0a:	8f ec       	ldi	r24, 0xCF	; 207
   13a0c:	99 e1       	ldi	r25, 0x19	; 25
   13a0e:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   13a12:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   13a16:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   13a1a:	01 ad       	ldd	r16, Z+57	; 0x39
   13a1c:	12 ad       	ldd	r17, Z+58	; 0x3a
   13a1e:	20 e0       	ldi	r18, 0x00	; 0
   13a20:	30 e0       	ldi	r19, 0x00	; 0
   13a22:	42 e0       	ldi	r20, 0x02	; 2
   13a24:	50 e0       	ldi	r21, 0x00	; 0
   13a26:	6e e0       	ldi	r22, 0x0E	; 14
   13a28:	70 e0       	ldi	r23, 0x00	; 0
   13a2a:	8f ec       	ldi	r24, 0xCF	; 207
   13a2c:	99 e1       	ldi	r25, 0x19	; 25
   13a2e:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   13a32:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   13a36:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   13a3a:	03 ad       	ldd	r16, Z+59	; 0x3b
   13a3c:	10 e0       	ldi	r17, 0x00	; 0
   13a3e:	20 e0       	ldi	r18, 0x00	; 0
   13a40:	30 e0       	ldi	r19, 0x00	; 0
   13a42:	41 e0       	ldi	r20, 0x01	; 1
   13a44:	50 e0       	ldi	r21, 0x00	; 0
   13a46:	60 e1       	ldi	r22, 0x10	; 16
   13a48:	70 e0       	ldi	r23, 0x00	; 0
   13a4a:	8f ec       	ldi	r24, 0xCF	; 207
   13a4c:	99 e1       	ldi	r25, 0x19	; 25
   13a4e:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   13a52:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   13a56:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   13a5a:	04 ad       	ldd	r16, Z+60	; 0x3c
   13a5c:	10 e0       	ldi	r17, 0x00	; 0
   13a5e:	20 e0       	ldi	r18, 0x00	; 0
   13a60:	30 e0       	ldi	r19, 0x00	; 0
   13a62:	41 e0       	ldi	r20, 0x01	; 1
   13a64:	50 e0       	ldi	r21, 0x00	; 0
   13a66:	61 e1       	ldi	r22, 0x11	; 17
   13a68:	70 e0       	ldi	r23, 0x00	; 0
   13a6a:	8f ec       	ldi	r24, 0xCF	; 207
   13a6c:	99 e1       	ldi	r25, 0x19	; 25
   13a6e:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   13a72:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   13a76:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   13a7a:	05 ad       	ldd	r16, Z+61	; 0x3d
   13a7c:	10 e0       	ldi	r17, 0x00	; 0
   13a7e:	20 e0       	ldi	r18, 0x00	; 0
   13a80:	30 e0       	ldi	r19, 0x00	; 0
   13a82:	41 e0       	ldi	r20, 0x01	; 1
   13a84:	50 e0       	ldi	r21, 0x00	; 0
   13a86:	62 e1       	ldi	r22, 0x12	; 18
   13a88:	70 e0       	ldi	r23, 0x00	; 0
   13a8a:	8f ec       	ldi	r24, 0xCF	; 207
   13a8c:	99 e1       	ldi	r25, 0x19	; 25
   13a8e:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   13a92:	8f ec       	ldi	r24, 0xCF	; 207
   13a94:	99 e1       	ldi	r25, 0x19	; 25
   13a96:	1f 91       	pop	r17
   13a98:	0f 91       	pop	r16
   13a9a:	08 95       	ret

00013a9c <SS80VolumePack>:
   13a9c:	0f 93       	push	r16
   13a9e:	1f 93       	push	r17
   13aa0:	2d e0       	ldi	r18, 0x0D	; 13
   13aa2:	30 e0       	ldi	r19, 0x00	; 0
   13aa4:	fc 01       	movw	r30, r24
   13aa6:	31 83       	std	Z+1, r19	; 0x01
   13aa8:	20 83       	st	Z, r18
   13aaa:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   13aae:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   13ab2:	fe 96       	adiw	r30, 0x3e	; 62
   13ab4:	00 81       	ld	r16, Z
   13ab6:	11 81       	ldd	r17, Z+1	; 0x01
   13ab8:	22 81       	ldd	r18, Z+2	; 0x02
   13aba:	33 81       	ldd	r19, Z+3	; 0x03
   13abc:	43 e0       	ldi	r20, 0x03	; 3
   13abe:	50 e0       	ldi	r21, 0x00	; 0
   13ac0:	60 e0       	ldi	r22, 0x00	; 0
   13ac2:	70 e0       	ldi	r23, 0x00	; 0
   13ac4:	82 ec       	ldi	r24, 0xC2	; 194
   13ac6:	99 e1       	ldi	r25, 0x19	; 25
   13ac8:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   13acc:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   13ad0:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   13ad4:	ee 5b       	subi	r30, 0xBE	; 190
   13ad6:	ff 4f       	sbci	r31, 0xFF	; 255
   13ad8:	00 81       	ld	r16, Z
   13ada:	10 e0       	ldi	r17, 0x00	; 0
   13adc:	20 e0       	ldi	r18, 0x00	; 0
   13ade:	30 e0       	ldi	r19, 0x00	; 0
   13ae0:	41 e0       	ldi	r20, 0x01	; 1
   13ae2:	50 e0       	ldi	r21, 0x00	; 0
   13ae4:	63 e0       	ldi	r22, 0x03	; 3
   13ae6:	70 e0       	ldi	r23, 0x00	; 0
   13ae8:	82 ec       	ldi	r24, 0xC2	; 194
   13aea:	99 e1       	ldi	r25, 0x19	; 25
   13aec:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   13af0:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   13af4:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   13af8:	ed 5b       	subi	r30, 0xBD	; 189
   13afa:	ff 4f       	sbci	r31, 0xFF	; 255
   13afc:	00 81       	ld	r16, Z
   13afe:	11 81       	ldd	r17, Z+1	; 0x01
   13b00:	20 e0       	ldi	r18, 0x00	; 0
   13b02:	30 e0       	ldi	r19, 0x00	; 0
   13b04:	42 e0       	ldi	r20, 0x02	; 2
   13b06:	50 e0       	ldi	r21, 0x00	; 0
   13b08:	64 e0       	ldi	r22, 0x04	; 4
   13b0a:	70 e0       	ldi	r23, 0x00	; 0
   13b0c:	82 ec       	ldi	r24, 0xC2	; 194
   13b0e:	99 e1       	ldi	r25, 0x19	; 25
   13b10:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   13b14:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   13b18:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   13b1c:	eb 5b       	subi	r30, 0xBB	; 187
   13b1e:	ff 4f       	sbci	r31, 0xFF	; 255
   13b20:	00 81       	ld	r16, Z
   13b22:	11 81       	ldd	r17, Z+1	; 0x01
   13b24:	22 81       	ldd	r18, Z+2	; 0x02
   13b26:	33 81       	ldd	r19, Z+3	; 0x03
   13b28:	46 e0       	ldi	r20, 0x06	; 6
   13b2a:	50 e0       	ldi	r21, 0x00	; 0
   13b2c:	66 e0       	ldi	r22, 0x06	; 6
   13b2e:	70 e0       	ldi	r23, 0x00	; 0
   13b30:	82 ec       	ldi	r24, 0xC2	; 194
   13b32:	99 e1       	ldi	r25, 0x19	; 25
   13b34:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   13b38:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   13b3c:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   13b40:	e7 5b       	subi	r30, 0xB7	; 183
   13b42:	ff 4f       	sbci	r31, 0xFF	; 255
   13b44:	00 81       	ld	r16, Z
   13b46:	10 e0       	ldi	r17, 0x00	; 0
   13b48:	20 e0       	ldi	r18, 0x00	; 0
   13b4a:	30 e0       	ldi	r19, 0x00	; 0
   13b4c:	41 e0       	ldi	r20, 0x01	; 1
   13b4e:	50 e0       	ldi	r21, 0x00	; 0
   13b50:	6c e0       	ldi	r22, 0x0C	; 12
   13b52:	70 e0       	ldi	r23, 0x00	; 0
   13b54:	82 ec       	ldi	r24, 0xC2	; 194
   13b56:	99 e1       	ldi	r25, 0x19	; 25
   13b58:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   13b5c:	82 ec       	ldi	r24, 0xC2	; 194
   13b5e:	99 e1       	ldi	r25, 0x19	; 25
   13b60:	1f 91       	pop	r17
   13b62:	0f 91       	pop	r16
   13b64:	08 95       	ret

00013b66 <SS80_test_extended_status>:
   13b66:	9b 01       	movw	r18, r22
   13b68:	43 e0       	ldi	r20, 0x03	; 3
   13b6a:	35 95       	asr	r19
   13b6c:	27 95       	ror	r18
   13b6e:	4a 95       	dec	r20
   13b70:	e1 f7       	brne	.-8      	; 0x13b6a <SS80_test_extended_status+0x4>
   13b72:	82 0f       	add	r24, r18
   13b74:	93 1f       	adc	r25, r19
   13b76:	67 70       	andi	r22, 0x07	; 7
   13b78:	77 27       	eor	r23, r23
   13b7a:	20 e8       	ldi	r18, 0x80	; 128
   13b7c:	30 e0       	ldi	r19, 0x00	; 0
   13b7e:	02 c0       	rjmp	.+4      	; 0x13b84 <SS80_test_extended_status+0x1e>
   13b80:	35 95       	asr	r19
   13b82:	27 95       	ror	r18
   13b84:	6a 95       	dec	r22
   13b86:	e2 f7       	brpl	.-8      	; 0x13b80 <SS80_test_extended_status+0x1a>
   13b88:	fc 01       	movw	r30, r24
   13b8a:	80 81       	ld	r24, Z
   13b8c:	28 23       	and	r18, r24
   13b8e:	81 e0       	ldi	r24, 0x01	; 1
   13b90:	90 e0       	ldi	r25, 0x00	; 0
   13b92:	11 f4       	brne	.+4      	; 0x13b98 <SS80_test_extended_status+0x32>
   13b94:	80 e0       	ldi	r24, 0x00	; 0
   13b96:	90 e0       	ldi	r25, 0x00	; 0
   13b98:	08 95       	ret

00013b9a <SS80_display_extended_status>:
   13b9a:	6f 92       	push	r6
   13b9c:	7f 92       	push	r7
   13b9e:	8f 92       	push	r8
   13ba0:	ef 92       	push	r14
   13ba2:	ff 92       	push	r15
   13ba4:	0f 93       	push	r16
   13ba6:	1f 93       	push	r17
   13ba8:	cf 93       	push	r28
   13baa:	df 93       	push	r29
   13bac:	fc 01       	movw	r30, r24
   13bae:	ac 01       	movw	r20, r24
   13bb0:	48 5f       	subi	r20, 0xF8	; 248
   13bb2:	5f 4f       	sbci	r21, 0xFF	; 255
   13bb4:	20 e0       	ldi	r18, 0x00	; 0
   13bb6:	30 e0       	ldi	r19, 0x00	; 0
   13bb8:	a1 91       	ld	r26, Z+
   13bba:	aa 23       	and	r26, r26
   13bbc:	11 f0       	breq	.+4      	; 0x13bc2 <SS80_display_extended_status+0x28>
   13bbe:	21 e0       	ldi	r18, 0x01	; 1
   13bc0:	30 e0       	ldi	r19, 0x00	; 0
   13bc2:	e4 17       	cp	r30, r20
   13bc4:	f5 07       	cpc	r31, r21
   13bc6:	c1 f7       	brne	.-16     	; 0x13bb8 <SS80_display_extended_status+0x1e>
   13bc8:	23 2b       	or	r18, r19
   13bca:	a1 f1       	breq	.+104    	; 0x13c34 <SS80_display_extended_status+0x9a>
   13bcc:	8c 01       	movw	r16, r24
   13bce:	7f 93       	push	r23
   13bd0:	6f 93       	push	r22
   13bd2:	81 e7       	ldi	r24, 0x71	; 113
   13bd4:	9e e1       	ldi	r25, 0x1E	; 30
   13bd6:	1f 92       	push	r1
   13bd8:	9f 93       	push	r25
   13bda:	8f 93       	push	r24
   13bdc:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   13be0:	cb ec       	ldi	r28, 0xCB	; 203
   13be2:	d1 e0       	ldi	r29, 0x01	; 1
   13be4:	0f 90       	pop	r0
   13be6:	0f 90       	pop	r0
   13be8:	0f 90       	pop	r0
   13bea:	0f 90       	pop	r0
   13bec:	0f 90       	pop	r0
   13bee:	86 e6       	ldi	r24, 0x66	; 102
   13bf0:	9e e1       	ldi	r25, 0x1E	; 30
   13bf2:	3c 01       	movw	r6, r24
   13bf4:	e8 80       	ld	r14, Y
   13bf6:	f9 80       	ldd	r15, Y+1	; 0x01
   13bf8:	9f ef       	ldi	r25, 0xFF	; 255
   13bfa:	e9 16       	cp	r14, r25
   13bfc:	f9 06       	cpc	r15, r25
   13bfe:	d1 f0       	breq	.+52     	; 0x13c34 <SS80_display_extended_status+0x9a>
   13c00:	b7 01       	movw	r22, r14
   13c02:	c8 01       	movw	r24, r16
   13c04:	b0 df       	rcall	.-160    	; 0x13b66 <SS80_test_extended_status>
   13c06:	89 2b       	or	r24, r25
   13c08:	99 f0       	breq	.+38     	; 0x13c30 <SS80_display_extended_status+0x96>
   13c0a:	8b 81       	ldd	r24, Y+3	; 0x03
   13c0c:	8f 93       	push	r24
   13c0e:	8a 81       	ldd	r24, Y+2	; 0x02
   13c10:	8f 93       	push	r24
   13c12:	ff 92       	push	r15
   13c14:	ef 92       	push	r14
   13c16:	1f 92       	push	r1
   13c18:	7f 92       	push	r7
   13c1a:	6f 92       	push	r6
   13c1c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   13c20:	8d b7       	in	r24, 0x3d	; 61
   13c22:	9e b7       	in	r25, 0x3e	; 62
   13c24:	07 96       	adiw	r24, 0x07	; 7
   13c26:	0f b6       	in	r0, 0x3f	; 63
   13c28:	f8 94       	cli
   13c2a:	9e bf       	out	0x3e, r25	; 62
   13c2c:	0f be       	out	0x3f, r0	; 63
   13c2e:	8d bf       	out	0x3d, r24	; 61
   13c30:	24 96       	adiw	r28, 0x04	; 4
   13c32:	e0 cf       	rjmp	.-64     	; 0x13bf4 <SS80_display_extended_status+0x5a>
   13c34:	df 91       	pop	r29
   13c36:	cf 91       	pop	r28
   13c38:	1f 91       	pop	r17
   13c3a:	0f 91       	pop	r16
   13c3c:	ff 90       	pop	r15
   13c3e:	ef 90       	pop	r14
   13c40:	8f 90       	pop	r8
   13c42:	7f 90       	pop	r7
   13c44:	6f 90       	pop	r6
   13c46:	08 95       	ret

00013c48 <SS80_send_status>:
   13c48:	a6 e1       	ldi	r26, 0x16	; 22
   13c4a:	b0 e0       	ldi	r27, 0x00	; 0
   13c4c:	ea e2       	ldi	r30, 0x2A	; 42
   13c4e:	fe e9       	ldi	r31, 0x9E	; 158
   13c50:	0c 94 40 ec 	jmp	0x1d880	; 0x1d880 <__prologue_saves__+0x18>
   13c54:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13c58:	85 ff       	sbrs	r24, 5
   13c5a:	0a c0       	rjmp	.+20     	; 0x13c70 <SS80_send_status+0x28>
   13c5c:	82 e5       	ldi	r24, 0x52	; 82
   13c5e:	9e e1       	ldi	r25, 0x1E	; 30
   13c60:	1f 92       	push	r1
   13c62:	9f 93       	push	r25
   13c64:	8f 93       	push	r24
   13c66:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   13c6a:	0f 90       	pop	r0
   13c6c:	0f 90       	pop	r0
   13c6e:	0f 90       	pop	r0
   13c70:	ce 01       	movw	r24, r28
   13c72:	01 96       	adiw	r24, 0x01	; 1
   13c74:	7c 01       	movw	r14, r24
   13c76:	84 e1       	ldi	r24, 0x14	; 20
   13c78:	f7 01       	movw	r30, r14
   13c7a:	11 92       	st	Z+, r1
   13c7c:	8a 95       	dec	r24
   13c7e:	e9 f7       	brne	.-6      	; 0x13c7a <SS80_send_status+0x32>
   13c80:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   13c84:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   13c88:	86 81       	ldd	r24, Z+6	; 0x06
   13c8a:	20 e1       	ldi	r18, 0x10	; 16
   13c8c:	82 9f       	mul	r24, r18
   13c8e:	c0 01       	movw	r24, r0
   13c90:	11 24       	eor	r1, r1
   13c92:	95 81       	ldd	r25, Z+5	; 0x05
   13c94:	9f 70       	andi	r25, 0x0F	; 15
   13c96:	89 2b       	or	r24, r25
   13c98:	89 83       	std	Y+1, r24	; 0x01
   13c9a:	8f ef       	ldi	r24, 0xFF	; 255
   13c9c:	8a 83       	std	Y+2, r24	; 0x02
   13c9e:	83 81       	ldd	r24, Z+3	; 0x03
   13ca0:	86 ff       	sbrs	r24, 6
   13ca2:	02 c0       	rjmp	.+4      	; 0x13ca8 <SS80_send_status+0x60>
   13ca4:	92 e0       	ldi	r25, 0x02	; 2
   13ca6:	9b 83       	std	Y+3, r25	; 0x03
   13ca8:	82 ff       	sbrs	r24, 2
   13caa:	03 c0       	rjmp	.+6      	; 0x13cb2 <SS80_send_status+0x6a>
   13cac:	9b 81       	ldd	r25, Y+3	; 0x03
   13cae:	91 60       	ori	r25, 0x01	; 1
   13cb0:	9b 83       	std	Y+3, r25	; 0x03
   13cb2:	80 ff       	sbrs	r24, 0
   13cb4:	02 c0       	rjmp	.+4      	; 0x13cba <SS80_send_status+0x72>
   13cb6:	82 e0       	ldi	r24, 0x02	; 2
   13cb8:	8d 83       	std	Y+5, r24	; 0x05
   13cba:	83 81       	ldd	r24, Z+3	; 0x03
   13cbc:	81 ff       	sbrs	r24, 1
   13cbe:	03 c0       	rjmp	.+6      	; 0x13cc6 <SS80_send_status+0x7e>
   13cc0:	8d 81       	ldd	r24, Y+5	; 0x05
   13cc2:	82 60       	ori	r24, 0x02	; 2
   13cc4:	8d 83       	std	Y+5, r24	; 0x05
   13cc6:	83 81       	ldd	r24, Z+3	; 0x03
   13cc8:	83 ff       	sbrs	r24, 3
   13cca:	02 c0       	rjmp	.+4      	; 0x13cd0 <SS80_send_status+0x88>
   13ccc:	88 e0       	ldi	r24, 0x08	; 8
   13cce:	8f 83       	std	Y+7, r24	; 0x07
   13cd0:	83 81       	ldd	r24, Z+3	; 0x03
   13cd2:	94 81       	ldd	r25, Z+4	; 0x04
   13cd4:	89 2b       	or	r24, r25
   13cd6:	59 f4       	brne	.+22     	; 0x13cee <SS80_send_status+0xa6>
   13cd8:	07 81       	ldd	r16, Z+7	; 0x07
   13cda:	10 85       	ldd	r17, Z+8	; 0x08
   13cdc:	21 85       	ldd	r18, Z+9	; 0x09
   13cde:	32 85       	ldd	r19, Z+10	; 0x0a
   13ce0:	46 e0       	ldi	r20, 0x06	; 6
   13ce2:	50 e0       	ldi	r21, 0x00	; 0
   13ce4:	6a e0       	ldi	r22, 0x0A	; 10
   13ce6:	70 e0       	ldi	r23, 0x00	; 0
   13ce8:	c7 01       	movw	r24, r14
   13cea:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   13cee:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   13cf2:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   13cf6:	83 81       	ldd	r24, Z+3	; 0x03
   13cf8:	94 81       	ldd	r25, Z+4	; 0x04
   13cfa:	89 2b       	or	r24, r25
   13cfc:	11 f0       	breq	.+4      	; 0x13d02 <SS80_send_status+0xba>
   13cfe:	81 e0       	ldi	r24, 0x01	; 1
   13d00:	82 83       	std	Z+2, r24	; 0x02
   13d02:	80 e0       	ldi	r24, 0x00	; 0
   13d04:	91 e0       	ldi	r25, 0x01	; 1
   13d06:	9e 8b       	std	Y+22, r25	; 0x16
   13d08:	8d 8b       	std	Y+21, r24	; 0x15
   13d0a:	ae 01       	movw	r20, r28
   13d0c:	4b 5e       	subi	r20, 0xEB	; 235
   13d0e:	5f 4f       	sbci	r21, 0xFF	; 255
   13d10:	64 e1       	ldi	r22, 0x14	; 20
   13d12:	70 e0       	ldi	r23, 0x00	; 0
   13d14:	c7 01       	movw	r24, r14
   13d16:	0e 94 69 93 	call	0x126d2	; 0x126d2 <gpib_write_str>
   13d1a:	44 97       	sbiw	r24, 0x14	; 20
   13d1c:	71 f0       	breq	.+28     	; 0x13d3a <SS80_send_status+0xf2>
   13d1e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13d22:	80 ff       	sbrs	r24, 0
   13d24:	0a c0       	rjmp	.+20     	; 0x13d3a <SS80_send_status+0xf2>
   13d26:	87 e3       	ldi	r24, 0x37	; 55
   13d28:	9e e1       	ldi	r25, 0x1E	; 30
   13d2a:	1f 92       	push	r1
   13d2c:	9f 93       	push	r25
   13d2e:	8f 93       	push	r24
   13d30:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   13d34:	0f 90       	pop	r0
   13d36:	0f 90       	pop	r0
   13d38:	0f 90       	pop	r0
   13d3a:	8d 89       	ldd	r24, Y+21	; 0x15
   13d3c:	9e 89       	ldd	r25, Y+22	; 0x16
   13d3e:	88 27       	eor	r24, r24
   13d40:	90 7d       	andi	r25, 0xD0	; 208
   13d42:	66 96       	adiw	r28, 0x16	; 22
   13d44:	e6 e0       	ldi	r30, 0x06	; 6
   13d46:	0c 94 5c ec 	jmp	0x1d8b8	; 0x1d8b8 <__epilogue_restores__+0x18>

00013d4a <SS80_describe>:
   13d4a:	a4 e0       	ldi	r26, 0x04	; 4
   13d4c:	b0 e0       	ldi	r27, 0x00	; 0
   13d4e:	eb ea       	ldi	r30, 0xAB	; 171
   13d50:	fe e9       	ldi	r31, 0x9E	; 158
   13d52:	0c 94 44 ec 	jmp	0x1d888	; 0x1d888 <__prologue_saves__+0x20>
   13d56:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13d5a:	85 ff       	sbrs	r24, 5
   13d5c:	0a c0       	rjmp	.+20     	; 0x13d72 <SS80_describe+0x28>
   13d5e:	86 e2       	ldi	r24, 0x26	; 38
   13d60:	9e e1       	ldi	r25, 0x1E	; 30
   13d62:	1f 92       	push	r1
   13d64:	9f 93       	push	r25
   13d66:	8f 93       	push	r24
   13d68:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   13d6c:	0f 90       	pop	r0
   13d6e:	0f 90       	pop	r0
   13d70:	0f 90       	pop	r0
   13d72:	1c 82       	std	Y+4, r1	; 0x04
   13d74:	1b 82       	std	Y+3, r1	; 0x03
   13d76:	ce 01       	movw	r24, r28
   13d78:	01 96       	adiw	r24, 0x01	; 1
   13d7a:	88 dd       	rcall	.-1264   	; 0x1388c <SS80ControllerPack>
   13d7c:	69 81       	ldd	r22, Y+1	; 0x01
   13d7e:	7a 81       	ldd	r23, Y+2	; 0x02
   13d80:	ae 01       	movw	r20, r28
   13d82:	4d 5f       	subi	r20, 0xFD	; 253
   13d84:	5f 4f       	sbci	r21, 0xFF	; 255
   13d86:	0e 94 69 93 	call	0x126d2	; 0x126d2 <gpib_write_str>
   13d8a:	29 81       	ldd	r18, Y+1	; 0x01
   13d8c:	3a 81       	ldd	r19, Y+2	; 0x02
   13d8e:	82 17       	cp	r24, r18
   13d90:	93 07       	cpc	r25, r19
   13d92:	39 f0       	breq	.+14     	; 0x13da2 <SS80_describe+0x58>
   13d94:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13d98:	80 ff       	sbrs	r24, 0
   13d9a:	3c c0       	rjmp	.+120    	; 0x13e14 <SS80_describe+0xca>
   13d9c:	83 e0       	ldi	r24, 0x03	; 3
   13d9e:	9e e1       	ldi	r25, 0x1E	; 30
   13da0:	31 c0       	rjmp	.+98     	; 0x13e04 <SS80_describe+0xba>
   13da2:	1c 82       	std	Y+4, r1	; 0x04
   13da4:	1b 82       	std	Y+3, r1	; 0x03
   13da6:	ce 01       	movw	r24, r28
   13da8:	01 96       	adiw	r24, 0x01	; 1
   13daa:	ac dd       	rcall	.-1192   	; 0x13904 <SS80UnitPack>
   13dac:	69 81       	ldd	r22, Y+1	; 0x01
   13dae:	7a 81       	ldd	r23, Y+2	; 0x02
   13db0:	ae 01       	movw	r20, r28
   13db2:	4d 5f       	subi	r20, 0xFD	; 253
   13db4:	5f 4f       	sbci	r21, 0xFF	; 255
   13db6:	0e 94 69 93 	call	0x126d2	; 0x126d2 <gpib_write_str>
   13dba:	29 81       	ldd	r18, Y+1	; 0x01
   13dbc:	3a 81       	ldd	r19, Y+2	; 0x02
   13dbe:	82 17       	cp	r24, r18
   13dc0:	93 07       	cpc	r25, r19
   13dc2:	39 f0       	breq	.+14     	; 0x13dd2 <SS80_describe+0x88>
   13dc4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13dc8:	80 ff       	sbrs	r24, 0
   13dca:	24 c0       	rjmp	.+72     	; 0x13e14 <SS80_describe+0xca>
   13dcc:	86 ee       	ldi	r24, 0xE6	; 230
   13dce:	9d e1       	ldi	r25, 0x1D	; 29
   13dd0:	19 c0       	rjmp	.+50     	; 0x13e04 <SS80_describe+0xba>
   13dd2:	80 e0       	ldi	r24, 0x00	; 0
   13dd4:	91 e0       	ldi	r25, 0x01	; 1
   13dd6:	9c 83       	std	Y+4, r25	; 0x04
   13dd8:	8b 83       	std	Y+3, r24	; 0x03
   13dda:	ce 01       	movw	r24, r28
   13ddc:	01 96       	adiw	r24, 0x01	; 1
   13dde:	5e de       	rcall	.-836    	; 0x13a9c <SS80VolumePack>
   13de0:	69 81       	ldd	r22, Y+1	; 0x01
   13de2:	7a 81       	ldd	r23, Y+2	; 0x02
   13de4:	ae 01       	movw	r20, r28
   13de6:	4d 5f       	subi	r20, 0xFD	; 253
   13de8:	5f 4f       	sbci	r21, 0xFF	; 255
   13dea:	0e 94 69 93 	call	0x126d2	; 0x126d2 <gpib_write_str>
   13dee:	29 81       	ldd	r18, Y+1	; 0x01
   13df0:	3a 81       	ldd	r19, Y+2	; 0x02
   13df2:	82 17       	cp	r24, r18
   13df4:	93 07       	cpc	r25, r19
   13df6:	99 f0       	breq	.+38     	; 0x13e1e <SS80_describe+0xd4>
   13df8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13dfc:	80 ff       	sbrs	r24, 0
   13dfe:	0a c0       	rjmp	.+20     	; 0x13e14 <SS80_describe+0xca>
   13e00:	87 ec       	ldi	r24, 0xC7	; 199
   13e02:	9d e1       	ldi	r25, 0x1D	; 29
   13e04:	1f 92       	push	r1
   13e06:	9f 93       	push	r25
   13e08:	8f 93       	push	r24
   13e0a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   13e0e:	0f 90       	pop	r0
   13e10:	0f 90       	pop	r0
   13e12:	0f 90       	pop	r0
   13e14:	8b 81       	ldd	r24, Y+3	; 0x03
   13e16:	9c 81       	ldd	r25, Y+4	; 0x04
   13e18:	88 27       	eor	r24, r24
   13e1a:	90 7d       	andi	r25, 0xD0	; 208
   13e1c:	02 c0       	rjmp	.+4      	; 0x13e22 <SS80_describe+0xd8>
   13e1e:	80 e0       	ldi	r24, 0x00	; 0
   13e20:	90 e0       	ldi	r25, 0x00	; 0
   13e22:	24 96       	adiw	r28, 0x04	; 4
   13e24:	e2 e0       	ldi	r30, 0x02	; 2
   13e26:	0c 94 60 ec 	jmp	0x1d8c0	; 0x1d8c0 <__epilogue_restores__+0x20>

00013e2a <SS80_Check_Unit>:
   13e2a:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   13e2e:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   13e32:	88 23       	and	r24, r24
   13e34:	d1 f0       	breq	.+52     	; 0x13e6a <SS80_Check_Unit+0x40>
   13e36:	8f 30       	cpi	r24, 0x0F	; 15
   13e38:	c1 f0       	breq	.+48     	; 0x13e6a <SS80_Check_Unit+0x40>
   13e3a:	23 81       	ldd	r18, Z+3	; 0x03
   13e3c:	34 81       	ldd	r19, Z+4	; 0x04
   13e3e:	20 64       	ori	r18, 0x40	; 64
   13e40:	34 83       	std	Z+4, r19	; 0x04
   13e42:	23 83       	std	Z+3, r18	; 0x03
   13e44:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <debuglevel>
   13e48:	90 ff       	sbrs	r25, 0
   13e4a:	10 c0       	rjmp	.+32     	; 0x13e6c <SS80_Check_Unit+0x42>
   13e4c:	1f 92       	push	r1
   13e4e:	8f 93       	push	r24
   13e50:	8f ea       	ldi	r24, 0xAF	; 175
   13e52:	9d e1       	ldi	r25, 0x1D	; 29
   13e54:	1f 92       	push	r1
   13e56:	9f 93       	push	r25
   13e58:	8f 93       	push	r24
   13e5a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   13e5e:	0f 90       	pop	r0
   13e60:	0f 90       	pop	r0
   13e62:	0f 90       	pop	r0
   13e64:	0f 90       	pop	r0
   13e66:	0f 90       	pop	r0
   13e68:	08 95       	ret
   13e6a:	85 83       	std	Z+5, r24	; 0x05
   13e6c:	08 95       	ret

00013e6e <SS80_Check_Volume>:
   13e6e:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   13e72:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   13e76:	88 23       	and	r24, r24
   13e78:	c1 f0       	breq	.+48     	; 0x13eaa <SS80_Check_Volume+0x3c>
   13e7a:	23 81       	ldd	r18, Z+3	; 0x03
   13e7c:	34 81       	ldd	r19, Z+4	; 0x04
   13e7e:	20 64       	ori	r18, 0x40	; 64
   13e80:	34 83       	std	Z+4, r19	; 0x04
   13e82:	23 83       	std	Z+3, r18	; 0x03
   13e84:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <debuglevel>
   13e88:	90 ff       	sbrs	r25, 0
   13e8a:	10 c0       	rjmp	.+32     	; 0x13eac <SS80_Check_Volume+0x3e>
   13e8c:	1f 92       	push	r1
   13e8e:	8f 93       	push	r24
   13e90:	85 e9       	ldi	r24, 0x95	; 149
   13e92:	9d e1       	ldi	r25, 0x1D	; 29
   13e94:	1f 92       	push	r1
   13e96:	9f 93       	push	r25
   13e98:	8f 93       	push	r24
   13e9a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   13e9e:	0f 90       	pop	r0
   13ea0:	0f 90       	pop	r0
   13ea2:	0f 90       	pop	r0
   13ea4:	0f 90       	pop	r0
   13ea6:	0f 90       	pop	r0
   13ea8:	08 95       	ret
   13eaa:	16 82       	std	Z+6, r1	; 0x06
   13eac:	08 95       	ret

00013eae <SS80_Command_State>:
   13eae:	2f 92       	push	r2
   13eb0:	3f 92       	push	r3
   13eb2:	4f 92       	push	r4
   13eb4:	6f 92       	push	r6
   13eb6:	7f 92       	push	r7
   13eb8:	8f 92       	push	r8
   13eba:	af 92       	push	r10
   13ebc:	bf 92       	push	r11
   13ebe:	cf 92       	push	r12
   13ec0:	df 92       	push	r13
   13ec2:	ef 92       	push	r14
   13ec4:	ff 92       	push	r15
   13ec6:	0f 93       	push	r16
   13ec8:	1f 93       	push	r17
   13eca:	cf 93       	push	r28
   13ecc:	df 93       	push	r29
   13ece:	cd b7       	in	r28, 0x3d	; 61
   13ed0:	de b7       	in	r29, 0x3e	; 62
   13ed2:	60 97       	sbiw	r28, 0x10	; 16
   13ed4:	0f b6       	in	r0, 0x3f	; 63
   13ed6:	f8 94       	cli
   13ed8:	de bf       	out	0x3e, r29	; 62
   13eda:	0f be       	out	0x3f, r0	; 63
   13edc:	cd bf       	out	0x3d, r28	; 61
   13ede:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   13ee2:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   13ee6:	81 81       	ldd	r24, Z+1	; 0x01
   13ee8:	90 e0       	ldi	r25, 0x00	; 0
   13eea:	0e 94 4a 8e 	call	0x11c94	; 0x11c94 <gpib_disable_PPR>
   13eee:	80 e0       	ldi	r24, 0x00	; 0
   13ef0:	91 e0       	ldi	r25, 0x01	; 1
   13ef2:	9a 83       	std	Y+2, r25	; 0x02
   13ef4:	89 83       	std	Y+1, r24	; 0x01
   13ef6:	ae 01       	movw	r20, r28
   13ef8:	4f 5f       	subi	r20, 0xFF	; 255
   13efa:	5f 4f       	sbci	r21, 0xFF	; 255
   13efc:	60 e0       	ldi	r22, 0x00	; 0
   13efe:	72 e0       	ldi	r23, 0x02	; 2
   13f00:	85 e4       	ldi	r24, 0x45	; 69
   13f02:	9d e1       	ldi	r25, 0x1D	; 29
   13f04:	0e 94 bb 92 	call	0x12576	; 0x12576 <gpib_read_str>
   13f08:	6c 01       	movw	r12, r24
   13f0a:	89 81       	ldd	r24, Y+1	; 0x01
   13f0c:	9a 81       	ldd	r25, Y+2	; 0x02
   13f0e:	9c 01       	movw	r18, r24
   13f10:	22 27       	eor	r18, r18
   13f12:	30 7d       	andi	r19, 0xD0	; 208
   13f14:	23 2b       	or	r18, r19
   13f16:	79 f0       	breq	.+30     	; 0x13f36 <SS80_Command_State+0x88>
   13f18:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13f1c:	80 ff       	sbrs	r24, 0
   13f1e:	21 c2       	rjmp	.+1090   	; 0x14362 <SS80_Command_State+0x4b4>
   13f20:	8f e6       	ldi	r24, 0x6F	; 111
   13f22:	9d e1       	ldi	r25, 0x1D	; 29
   13f24:	1f 92       	push	r1
   13f26:	9f 93       	push	r25
   13f28:	8f 93       	push	r24
   13f2a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   13f2e:	0f 90       	pop	r0
   13f30:	0f 90       	pop	r0
   13f32:	0f 90       	pop	r0
   13f34:	16 c2       	rjmp	.+1068   	; 0x14362 <SS80_Command_State+0x4b4>
   13f36:	c1 14       	cp	r12, r1
   13f38:	d1 04       	cpc	r13, r1
   13f3a:	09 f4       	brne	.+2      	; 0x13f3e <SS80_Command_State+0x90>
   13f3c:	17 c2       	rjmp	.+1070   	; 0x1436c <SS80_Command_State+0x4be>
   13f3e:	90 fd       	sbrc	r25, 0
   13f40:	0e c0       	rjmp	.+28     	; 0x13f5e <SS80_Command_State+0xb0>
   13f42:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13f46:	80 ff       	sbrs	r24, 0
   13f48:	0a c0       	rjmp	.+20     	; 0x13f5e <SS80_Command_State+0xb0>
   13f4a:	86 e5       	ldi	r24, 0x56	; 86
   13f4c:	9d e1       	ldi	r25, 0x1D	; 29
   13f4e:	1f 92       	push	r1
   13f50:	9f 93       	push	r25
   13f52:	8f 93       	push	r24
   13f54:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   13f58:	0f 90       	pop	r0
   13f5a:	0f 90       	pop	r0
   13f5c:	0f 90       	pop	r0
   13f5e:	e1 2c       	mov	r14, r1
   13f60:	f1 2c       	mov	r15, r1
   13f62:	8a e5       	ldi	r24, 0x5A	; 90
   13f64:	9c e1       	ldi	r25, 0x1C	; 28
   13f66:	9c 01       	movw	r18, r24
   13f68:	40 e0       	ldi	r20, 0x00	; 0
   13f6a:	2d 83       	std	Y+5, r18	; 0x05
   13f6c:	3e 83       	std	Y+6, r19	; 0x06
   13f6e:	4f 83       	std	Y+7, r20	; 0x07
   13f70:	8f e7       	ldi	r24, 0x7F	; 127
   13f72:	9c e1       	ldi	r25, 0x1C	; 28
   13f74:	9c 01       	movw	r18, r24
   13f76:	40 e0       	ldi	r20, 0x00	; 0
   13f78:	28 87       	std	Y+8, r18	; 0x08
   13f7a:	39 87       	std	Y+9, r19	; 0x09
   13f7c:	4a 87       	std	Y+10, r20	; 0x0a
   13f7e:	89 e9       	ldi	r24, 0x99	; 153
   13f80:	9c e1       	ldi	r25, 0x1C	; 28
   13f82:	9c 01       	movw	r18, r24
   13f84:	40 e0       	ldi	r20, 0x00	; 0
   13f86:	2b 87       	std	Y+11, r18	; 0x0b
   13f88:	3c 87       	std	Y+12, r19	; 0x0c
   13f8a:	4d 87       	std	Y+13, r20	; 0x0d
   13f8c:	8f ea       	ldi	r24, 0xAF	; 175
   13f8e:	9c e1       	ldi	r25, 0x1C	; 28
   13f90:	3c 01       	movw	r6, r24
   13f92:	8d eb       	ldi	r24, 0xBD	; 189
   13f94:	9c e1       	ldi	r25, 0x1C	; 28
   13f96:	9c 01       	movw	r18, r24
   13f98:	40 e0       	ldi	r20, 0x00	; 0
   13f9a:	2e 87       	std	Y+14, r18	; 0x0e
   13f9c:	3f 87       	std	Y+15, r19	; 0x0f
   13f9e:	48 8b       	std	Y+16, r20	; 0x10
   13fa0:	89 ed       	ldi	r24, 0xD9	; 217
   13fa2:	9c e1       	ldi	r25, 0x1C	; 28
   13fa4:	1c 01       	movw	r2, r24
   13fa6:	87 e2       	ldi	r24, 0x27	; 39
   13fa8:	a8 2e       	mov	r10, r24
   13faa:	8d e1       	ldi	r24, 0x1D	; 29
   13fac:	b8 2e       	mov	r11, r24
   13fae:	87 01       	movw	r16, r14
   13fb0:	ec 14       	cp	r14, r12
   13fb2:	fd 04       	cpc	r15, r13
   13fb4:	0c f0       	brlt	.+2      	; 0x13fb8 <SS80_Command_State+0x10a>
   13fb6:	b6 c1       	rjmp	.+876    	; 0x14324 <SS80_Command_State+0x476>
   13fb8:	0f 5f       	subi	r16, 0xFF	; 255
   13fba:	1f 4f       	sbci	r17, 0xFF	; 255
   13fbc:	f7 01       	movw	r30, r14
   13fbe:	eb 5b       	subi	r30, 0xBB	; 187
   13fc0:	f2 4e       	sbci	r31, 0xE2	; 226
   13fc2:	80 81       	ld	r24, Z
   13fc4:	28 2f       	mov	r18, r24
   13fc6:	30 e0       	ldi	r19, 0x00	; 0
   13fc8:	a9 01       	movw	r20, r18
   13fca:	40 52       	subi	r20, 0x20	; 32
   13fcc:	51 09       	sbc	r21, r1
   13fce:	40 31       	cpi	r20, 0x10	; 16
   13fd0:	51 05       	cpc	r21, r1
   13fd2:	80 f4       	brcc	.+32     	; 0x13ff4 <SS80_Command_State+0x146>
   13fd4:	80 52       	subi	r24, 0x20	; 32
   13fd6:	29 df       	rcall	.-430    	; 0x13e2a <SS80_Check_Unit>
   13fd8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   13fdc:	85 ff       	sbrs	r24, 5
   13fde:	a0 c1       	rjmp	.+832    	; 0x14320 <SS80_Command_State+0x472>
   13fe0:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   13fe4:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   13fe8:	85 81       	ldd	r24, Z+5	; 0x05
   13fea:	1f 92       	push	r1
   13fec:	8f 93       	push	r24
   13fee:	80 e4       	ldi	r24, 0x40	; 64
   13ff0:	9d e1       	ldi	r25, 0x1D	; 29
   13ff2:	14 c0       	rjmp	.+40     	; 0x1401c <SS80_Command_State+0x16e>
   13ff4:	a9 01       	movw	r20, r18
   13ff6:	40 54       	subi	r20, 0x40	; 64
   13ff8:	51 09       	sbc	r21, r1
   13ffa:	40 31       	cpi	r20, 0x10	; 16
   13ffc:	51 05       	cpc	r21, r1
   13ffe:	c8 f4       	brcc	.+50     	; 0x14032 <SS80_Command_State+0x184>
   14000:	80 54       	subi	r24, 0x40	; 64
   14002:	35 df       	rcall	.-406    	; 0x13e6e <SS80_Check_Volume>
   14004:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14008:	85 ff       	sbrs	r24, 5
   1400a:	8a c1       	rjmp	.+788    	; 0x14320 <SS80_Command_State+0x472>
   1400c:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   14010:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   14014:	86 81       	ldd	r24, Z+6	; 0x06
   14016:	1f 92       	push	r1
   14018:	8f 93       	push	r24
   1401a:	c5 01       	movw	r24, r10
   1401c:	1f 92       	push	r1
   1401e:	9f 93       	push	r25
   14020:	8f 93       	push	r24
   14022:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   14026:	0f 90       	pop	r0
   14028:	0f 90       	pop	r0
   1402a:	0f 90       	pop	r0
   1402c:	0f 90       	pop	r0
   1402e:	0f 90       	pop	r0
   14030:	77 c1       	rjmp	.+750    	; 0x14320 <SS80_Command_State+0x472>
   14032:	21 15       	cp	r18, r1
   14034:	31 05       	cpc	r19, r1
   14036:	79 f4       	brne	.+30     	; 0x14056 <SS80_Command_State+0x1a8>
   14038:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   1403c:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   14040:	81 e0       	ldi	r24, 0x01	; 1
   14042:	90 e0       	ldi	r25, 0x00	; 0
   14044:	91 83       	std	Z+1, r25	; 0x01
   14046:	80 83       	st	Z, r24
   14048:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1404c:	85 ff       	sbrs	r24, 5
   1404e:	6a c1       	rjmp	.+724    	; 0x14324 <SS80_Command_State+0x476>
   14050:	8f e0       	ldi	r24, 0x0F	; 15
   14052:	9d e1       	ldi	r25, 0x1D	; 29
   14054:	0f c0       	rjmp	.+30     	; 0x14074 <SS80_Command_State+0x1c6>
   14056:	22 30       	cpi	r18, 0x02	; 2
   14058:	31 05       	cpc	r19, r1
   1405a:	a9 f4       	brne	.+42     	; 0x14086 <SS80_Command_State+0x1d8>
   1405c:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   14060:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   14064:	31 83       	std	Z+1, r19	; 0x01
   14066:	20 83       	st	Z, r18
   14068:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1406c:	85 ff       	sbrs	r24, 5
   1406e:	5a c1       	rjmp	.+692    	; 0x14324 <SS80_Command_State+0x476>
   14070:	86 ef       	ldi	r24, 0xF6	; 246
   14072:	9c e1       	ldi	r25, 0x1C	; 28
   14074:	1f 92       	push	r1
   14076:	9f 93       	push	r25
   14078:	8f 93       	push	r24
   1407a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1407e:	0f 90       	pop	r0
   14080:	0f 90       	pop	r0
   14082:	0f 90       	pop	r0
   14084:	4f c1       	rjmp	.+670    	; 0x14324 <SS80_Command_State+0x476>
   14086:	20 31       	cpi	r18, 0x10	; 16
   14088:	31 05       	cpc	r19, r1
   1408a:	a1 f5       	brne	.+104    	; 0x140f4 <SS80_Command_State+0x246>
   1408c:	80 91 fa 19 	lds	r24, 0x19FA	; 0x8019fa <SS80s>
   14090:	90 91 fb 19 	lds	r25, 0x19FB	; 0x8019fb <SS80s+0x1>
   14094:	9c 83       	std	Y+4, r25	; 0x04
   14096:	8b 83       	std	Y+3, r24	; 0x03
   14098:	46 e0       	ldi	r20, 0x06	; 6
   1409a:	50 e0       	ldi	r21, 0x00	; 0
   1409c:	b8 01       	movw	r22, r16
   1409e:	85 e4       	ldi	r24, 0x45	; 69
   140a0:	9d e1       	ldi	r25, 0x1D	; 29
   140a2:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <B2V_MSB>
   140a6:	eb 81       	ldd	r30, Y+3	; 0x03
   140a8:	fc 81       	ldd	r31, Y+4	; 0x04
   140aa:	67 83       	std	Z+7, r22	; 0x07
   140ac:	70 87       	std	Z+8, r23	; 0x08
   140ae:	81 87       	std	Z+9, r24	; 0x09
   140b0:	92 87       	std	Z+10, r25	; 0x0a
   140b2:	87 01       	movw	r16, r14
   140b4:	09 5f       	subi	r16, 0xF9	; 249
   140b6:	1f 4f       	sbci	r17, 0xFF	; 255
   140b8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   140bc:	85 ff       	sbrs	r24, 5
   140be:	30 c1       	rjmp	.+608    	; 0x14320 <SS80_Command_State+0x472>
   140c0:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   140c4:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   140c8:	a0 91 fc 19 	lds	r26, 0x19FC	; 0x8019fc <SS80p>
   140cc:	b0 91 fd 19 	lds	r27, 0x19FD	; 0x8019fd <SS80p+0x1>
   140d0:	9f 96       	adiw	r26, 0x2f	; 47
   140d2:	0d 90       	ld	r0, X+
   140d4:	bc 91       	ld	r27, X
   140d6:	a0 2d       	mov	r26, r0
   140d8:	27 81       	ldd	r18, Z+7	; 0x07
   140da:	30 85       	ldd	r19, Z+8	; 0x08
   140dc:	41 85       	ldd	r20, Z+9	; 0x09
   140de:	52 85       	ldd	r21, Z+10	; 0x0a
   140e0:	0e 94 14 ec 	call	0x1d828	; 0x1d828 <__muluhisi3>
   140e4:	9f 93       	push	r25
   140e6:	8f 93       	push	r24
   140e8:	7f 93       	push	r23
   140ea:	6f 93       	push	r22
   140ec:	1f 92       	push	r1
   140ee:	3f 92       	push	r3
   140f0:	2f 92       	push	r2
   140f2:	2e c0       	rjmp	.+92     	; 0x14150 <SS80_Command_State+0x2a2>
   140f4:	28 31       	cpi	r18, 0x18	; 24
   140f6:	31 05       	cpc	r19, r1
   140f8:	99 f5       	brne	.+102    	; 0x14160 <SS80_Command_State+0x2b2>
   140fa:	80 91 fa 19 	lds	r24, 0x19FA	; 0x8019fa <SS80s>
   140fe:	90 91 fb 19 	lds	r25, 0x19FB	; 0x8019fb <SS80s+0x1>
   14102:	9c 83       	std	Y+4, r25	; 0x04
   14104:	8b 83       	std	Y+3, r24	; 0x03
   14106:	44 e0       	ldi	r20, 0x04	; 4
   14108:	50 e0       	ldi	r21, 0x00	; 0
   1410a:	b8 01       	movw	r22, r16
   1410c:	85 e4       	ldi	r24, 0x45	; 69
   1410e:	9d e1       	ldi	r25, 0x1D	; 29
   14110:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <B2V_MSB>
   14114:	eb 81       	ldd	r30, Y+3	; 0x03
   14116:	fc 81       	ldd	r31, Y+4	; 0x04
   14118:	63 87       	std	Z+11, r22	; 0x0b
   1411a:	74 87       	std	Z+12, r23	; 0x0c
   1411c:	85 87       	std	Z+13, r24	; 0x0d
   1411e:	96 87       	std	Z+14, r25	; 0x0e
   14120:	87 01       	movw	r16, r14
   14122:	0b 5f       	subi	r16, 0xFB	; 251
   14124:	1f 4f       	sbci	r17, 0xFF	; 255
   14126:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1412a:	85 ff       	sbrs	r24, 5
   1412c:	f9 c0       	rjmp	.+498    	; 0x14320 <SS80_Command_State+0x472>
   1412e:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   14132:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   14136:	86 85       	ldd	r24, Z+14	; 0x0e
   14138:	8f 93       	push	r24
   1413a:	85 85       	ldd	r24, Z+13	; 0x0d
   1413c:	8f 93       	push	r24
   1413e:	84 85       	ldd	r24, Z+12	; 0x0c
   14140:	8f 93       	push	r24
   14142:	83 85       	ldd	r24, Z+11	; 0x0b
   14144:	8f 93       	push	r24
   14146:	1f 92       	push	r1
   14148:	ff 85       	ldd	r31, Y+15	; 0x0f
   1414a:	ff 93       	push	r31
   1414c:	2e 85       	ldd	r18, Y+14	; 0x0e
   1414e:	2f 93       	push	r18
   14150:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   14154:	0f b6       	in	r0, 0x3f	; 63
   14156:	f8 94       	cli
   14158:	de bf       	out	0x3e, r29	; 62
   1415a:	0f be       	out	0x3f, r0	; 63
   1415c:	cd bf       	out	0x3d, r28	; 61
   1415e:	e0 c0       	rjmp	.+448    	; 0x14320 <SS80_Command_State+0x472>
   14160:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14164:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   14168:	24 33       	cpi	r18, 0x34	; 52
   1416a:	31 05       	cpc	r19, r1
   1416c:	31 f4       	brne	.+12     	; 0x1417a <SS80_Command_State+0x2cc>
   1416e:	85 ff       	sbrs	r24, 5
   14170:	d7 c0       	rjmp	.+430    	; 0x14320 <SS80_Command_State+0x472>
   14172:	1f 92       	push	r1
   14174:	7f 92       	push	r7
   14176:	6f 92       	push	r6
   14178:	2c c0       	rjmp	.+88     	; 0x141d2 <SS80_Command_State+0x324>
   1417a:	29 33       	cpi	r18, 0x39	; 57
   1417c:	31 05       	cpc	r19, r1
   1417e:	59 f4       	brne	.+22     	; 0x14196 <SS80_Command_State+0x2e8>
   14180:	87 01       	movw	r16, r14
   14182:	0d 5f       	subi	r16, 0xFD	; 253
   14184:	1f 4f       	sbci	r17, 0xFF	; 255
   14186:	85 ff       	sbrs	r24, 5
   14188:	cb c0       	rjmp	.+406    	; 0x14320 <SS80_Command_State+0x472>
   1418a:	1f 92       	push	r1
   1418c:	9c 85       	ldd	r25, Y+12	; 0x0c
   1418e:	9f 93       	push	r25
   14190:	eb 85       	ldd	r30, Y+11	; 0x0b
   14192:	ef 93       	push	r30
   14194:	1e c0       	rjmp	.+60     	; 0x141d2 <SS80_Command_State+0x324>
   14196:	2b 33       	cpi	r18, 0x3B	; 59
   14198:	31 05       	cpc	r19, r1
   1419a:	59 f4       	brne	.+22     	; 0x141b2 <SS80_Command_State+0x304>
   1419c:	87 01       	movw	r16, r14
   1419e:	0e 5f       	subi	r16, 0xFE	; 254
   141a0:	1f 4f       	sbci	r17, 0xFF	; 255
   141a2:	85 ff       	sbrs	r24, 5
   141a4:	bd c0       	rjmp	.+378    	; 0x14320 <SS80_Command_State+0x472>
   141a6:	1f 92       	push	r1
   141a8:	f9 85       	ldd	r31, Y+9	; 0x09
   141aa:	ff 93       	push	r31
   141ac:	28 85       	ldd	r18, Y+8	; 0x08
   141ae:	2f 93       	push	r18
   141b0:	10 c0       	rjmp	.+32     	; 0x141d2 <SS80_Command_State+0x324>
   141b2:	28 34       	cpi	r18, 0x48	; 72
   141b4:	31 05       	cpc	r19, r1
   141b6:	99 f4       	brne	.+38     	; 0x141de <SS80_Command_State+0x330>
   141b8:	87 01       	movw	r16, r14
   141ba:	0e 5f       	subi	r16, 0xFE	; 254
   141bc:	1f 4f       	sbci	r17, 0xFF	; 255
   141be:	80 73       	andi	r24, 0x30	; 48
   141c0:	99 27       	eor	r25, r25
   141c2:	89 2b       	or	r24, r25
   141c4:	09 f4       	brne	.+2      	; 0x141c8 <SS80_Command_State+0x31a>
   141c6:	ac c0       	rjmp	.+344    	; 0x14320 <SS80_Command_State+0x472>
   141c8:	1f 92       	push	r1
   141ca:	3e 81       	ldd	r19, Y+6	; 0x06
   141cc:	3f 93       	push	r19
   141ce:	4d 81       	ldd	r20, Y+5	; 0x05
   141d0:	4f 93       	push	r20
   141d2:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   141d6:	0f 90       	pop	r0
   141d8:	0f 90       	pop	r0
   141da:	0f 90       	pop	r0
   141dc:	a1 c0       	rjmp	.+322    	; 0x14320 <SS80_Command_State+0x472>
   141de:	24 30       	cpi	r18, 0x04	; 4
   141e0:	31 05       	cpc	r19, r1
   141e2:	41 f4       	brne	.+16     	; 0x141f4 <SS80_Command_State+0x346>
   141e4:	80 73       	andi	r24, 0x30	; 48
   141e6:	99 27       	eor	r25, r25
   141e8:	89 2b       	or	r24, r25
   141ea:	09 f4       	brne	.+2      	; 0x141ee <SS80_Command_State+0x340>
   141ec:	9b c0       	rjmp	.+310    	; 0x14324 <SS80_Command_State+0x476>
   141ee:	89 e3       	ldi	r24, 0x39	; 57
   141f0:	9c e1       	ldi	r25, 0x1C	; 28
   141f2:	40 cf       	rjmp	.-384    	; 0x14074 <SS80_Command_State+0x1c6>
   141f4:	2e 30       	cpi	r18, 0x0E	; 14
   141f6:	31 05       	cpc	r19, r1
   141f8:	29 f4       	brne	.+10     	; 0x14204 <SS80_Command_State+0x356>
   141fa:	85 ff       	sbrs	r24, 5
   141fc:	93 c0       	rjmp	.+294    	; 0x14324 <SS80_Command_State+0x476>
   141fe:	83 e2       	ldi	r24, 0x23	; 35
   14200:	9c e1       	ldi	r25, 0x1C	; 28
   14202:	38 cf       	rjmp	.-400    	; 0x14074 <SS80_Command_State+0x1c6>
   14204:	2f 30       	cpi	r18, 0x0F	; 15
   14206:	31 05       	cpc	r19, r1
   14208:	29 f4       	brne	.+10     	; 0x14214 <SS80_Command_State+0x366>
   1420a:	85 ff       	sbrs	r24, 5
   1420c:	8b c0       	rjmp	.+278    	; 0x14324 <SS80_Command_State+0x476>
   1420e:	86 e0       	ldi	r24, 0x06	; 6
   14210:	9c e1       	ldi	r25, 0x1C	; 28
   14212:	30 cf       	rjmp	.-416    	; 0x14074 <SS80_Command_State+0x1c6>
   14214:	21 33       	cpi	r18, 0x31	; 49
   14216:	31 05       	cpc	r19, r1
   14218:	41 f4       	brne	.+16     	; 0x1422a <SS80_Command_State+0x37c>
   1421a:	87 01       	movw	r16, r14
   1421c:	0d 5f       	subi	r16, 0xFD	; 253
   1421e:	1f 4f       	sbci	r17, 0xFF	; 255
   14220:	85 ff       	sbrs	r24, 5
   14222:	80 c0       	rjmp	.+256    	; 0x14324 <SS80_Command_State+0x476>
   14224:	8a ee       	ldi	r24, 0xEA	; 234
   14226:	9b e1       	ldi	r25, 0x1B	; 27
   14228:	25 cf       	rjmp	.-438    	; 0x14074 <SS80_Command_State+0x1c6>
   1422a:	25 33       	cpi	r18, 0x35	; 53
   1422c:	31 05       	cpc	r19, r1
   1422e:	69 f4       	brne	.+26     	; 0x1424a <SS80_Command_State+0x39c>
   14230:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   14234:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   14238:	24 e0       	ldi	r18, 0x04	; 4
   1423a:	30 e0       	ldi	r19, 0x00	; 0
   1423c:	31 83       	std	Z+1, r19	; 0x01
   1423e:	20 83       	st	Z, r18
   14240:	85 ff       	sbrs	r24, 5
   14242:	70 c0       	rjmp	.+224    	; 0x14324 <SS80_Command_State+0x476>
   14244:	89 ed       	ldi	r24, 0xD9	; 217
   14246:	9b e1       	ldi	r25, 0x1B	; 27
   14248:	15 cf       	rjmp	.-470    	; 0x14074 <SS80_Command_State+0x1c6>
   1424a:	27 33       	cpi	r18, 0x37	; 55
   1424c:	31 05       	cpc	r19, r1
   1424e:	59 f4       	brne	.+22     	; 0x14266 <SS80_Command_State+0x3b8>
   14250:	87 01       	movw	r16, r14
   14252:	0d 5f       	subi	r16, 0xFD	; 253
   14254:	1f 4f       	sbci	r17, 0xFF	; 255
   14256:	80 73       	andi	r24, 0x30	; 48
   14258:	99 27       	eor	r25, r25
   1425a:	89 2b       	or	r24, r25
   1425c:	09 f4       	brne	.+2      	; 0x14260 <SS80_Command_State+0x3b2>
   1425e:	62 c0       	rjmp	.+196    	; 0x14324 <SS80_Command_State+0x476>
   14260:	8b eb       	ldi	r24, 0xBB	; 187
   14262:	9b e1       	ldi	r25, 0x1B	; 27
   14264:	07 cf       	rjmp	.-498    	; 0x14074 <SS80_Command_State+0x1c6>
   14266:	2e 33       	cpi	r18, 0x3E	; 62
   14268:	31 05       	cpc	r19, r1
   1426a:	c1 f4       	brne	.+48     	; 0x1429c <SS80_Command_State+0x3ee>
   1426c:	80 73       	andi	r24, 0x30	; 48
   1426e:	99 27       	eor	r25, r25
   14270:	89 2b       	or	r24, r25
   14272:	81 f0       	breq	.+32     	; 0x14294 <SS80_Command_State+0x3e6>
   14274:	8c e9       	ldi	r24, 0x9C	; 156
   14276:	9b e1       	ldi	r25, 0x1B	; 27
   14278:	1f 92       	push	r1
   1427a:	9f 93       	push	r25
   1427c:	8f 93       	push	r24
   1427e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   14282:	63 e2       	ldi	r22, 0x23	; 35
   14284:	7e e0       	ldi	r23, 0x0E	; 14
   14286:	c8 01       	movw	r24, r16
   14288:	8b 5b       	subi	r24, 0xBB	; 187
   1428a:	92 4e       	sbci	r25, 0xE2	; 226
   1428c:	86 dc       	rcall	.-1780   	; 0x13b9a <SS80_display_extended_status>
   1428e:	0f 90       	pop	r0
   14290:	0f 90       	pop	r0
   14292:	0f 90       	pop	r0
   14294:	87 01       	movw	r16, r14
   14296:	07 5f       	subi	r16, 0xF7	; 247
   14298:	1f 4f       	sbci	r17, 0xFF	; 255
   1429a:	44 c0       	rjmp	.+136    	; 0x14324 <SS80_Command_State+0x476>
   1429c:	2c 34       	cpi	r18, 0x4C	; 76
   1429e:	31 05       	cpc	r19, r1
   142a0:	39 f4       	brne	.+14     	; 0x142b0 <SS80_Command_State+0x402>
   142a2:	80 73       	andi	r24, 0x30	; 48
   142a4:	99 27       	eor	r25, r25
   142a6:	89 2b       	or	r24, r25
   142a8:	e9 f1       	breq	.+122    	; 0x14324 <SS80_Command_State+0x476>
   142aa:	81 e8       	ldi	r24, 0x81	; 129
   142ac:	9b e1       	ldi	r25, 0x1B	; 27
   142ae:	e2 ce       	rjmp	.-572    	; 0x14074 <SS80_Command_State+0x1c6>
   142b0:	2d 34       	cpi	r18, 0x4D	; 77
   142b2:	31 05       	cpc	r19, r1
   142b4:	39 f4       	brne	.+14     	; 0x142c4 <SS80_Command_State+0x416>
   142b6:	80 73       	andi	r24, 0x30	; 48
   142b8:	99 27       	eor	r25, r25
   142ba:	89 2b       	or	r24, r25
   142bc:	99 f1       	breq	.+102    	; 0x14324 <SS80_Command_State+0x476>
   142be:	88 e6       	ldi	r24, 0x68	; 104
   142c0:	9b e1       	ldi	r25, 0x1B	; 27
   142c2:	d8 ce       	rjmp	.-592    	; 0x14074 <SS80_Command_State+0x1c6>
   142c4:	2d 30       	cpi	r18, 0x0D	; 13
   142c6:	31 05       	cpc	r19, r1
   142c8:	69 f4       	brne	.+26     	; 0x142e4 <SS80_Command_State+0x436>
   142ca:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   142ce:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   142d2:	23 e0       	ldi	r18, 0x03	; 3
   142d4:	30 e0       	ldi	r19, 0x00	; 0
   142d6:	31 83       	std	Z+1, r19	; 0x01
   142d8:	20 83       	st	Z, r18
   142da:	85 ff       	sbrs	r24, 5
   142dc:	23 c0       	rjmp	.+70     	; 0x14324 <SS80_Command_State+0x476>
   142de:	81 e5       	ldi	r24, 0x51	; 81
   142e0:	9b e1       	ldi	r25, 0x1B	; 27
   142e2:	c8 ce       	rjmp	.-624    	; 0x14074 <SS80_Command_State+0x1c6>
   142e4:	23 33       	cpi	r18, 0x33	; 51
   142e6:	31 05       	cpc	r19, r1
   142e8:	51 f4       	brne	.+20     	; 0x142fe <SS80_Command_State+0x450>
   142ea:	87 01       	movw	r16, r14
   142ec:	0c 5f       	subi	r16, 0xFC	; 252
   142ee:	1f 4f       	sbci	r17, 0xFF	; 255
   142f0:	80 73       	andi	r24, 0x30	; 48
   142f2:	99 27       	eor	r25, r25
   142f4:	89 2b       	or	r24, r25
   142f6:	b1 f0       	breq	.+44     	; 0x14324 <SS80_Command_State+0x476>
   142f8:	80 e3       	ldi	r24, 0x30	; 48
   142fa:	9b e1       	ldi	r25, 0x1B	; 27
   142fc:	bb ce       	rjmp	.-650    	; 0x14074 <SS80_Command_State+0x1c6>
   142fe:	80 ff       	sbrs	r24, 0
   14300:	28 c0       	rjmp	.+80     	; 0x14352 <SS80_Command_State+0x4a4>
   14302:	3f 93       	push	r19
   14304:	2f 93       	push	r18
   14306:	80 e1       	ldi	r24, 0x10	; 16
   14308:	9b e1       	ldi	r25, 0x1B	; 27
   1430a:	1f 92       	push	r1
   1430c:	9f 93       	push	r25
   1430e:	8f 93       	push	r24
   14310:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   14314:	0f 90       	pop	r0
   14316:	0f 90       	pop	r0
   14318:	0f 90       	pop	r0
   1431a:	0f 90       	pop	r0
   1431c:	0f 90       	pop	r0
   1431e:	02 c0       	rjmp	.+4      	; 0x14324 <SS80_Command_State+0x476>
   14320:	78 01       	movw	r14, r16
   14322:	45 ce       	rjmp	.-886    	; 0x13fae <SS80_Command_State+0x100>
   14324:	0c 15       	cp	r16, r12
   14326:	1d 05       	cpc	r17, r13
   14328:	a1 f0       	breq	.+40     	; 0x14352 <SS80_Command_State+0x4a4>
   1432a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1432e:	80 ff       	sbrs	r24, 0
   14330:	10 c0       	rjmp	.+32     	; 0x14352 <SS80_Command_State+0x4a4>
   14332:	df 92       	push	r13
   14334:	cf 92       	push	r12
   14336:	1f 93       	push	r17
   14338:	0f 93       	push	r16
   1433a:	88 ed       	ldi	r24, 0xD8	; 216
   1433c:	9a e1       	ldi	r25, 0x1A	; 26
   1433e:	1f 92       	push	r1
   14340:	9f 93       	push	r25
   14342:	8f 93       	push	r24
   14344:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   14348:	0f b6       	in	r0, 0x3f	; 63
   1434a:	f8 94       	cli
   1434c:	de bf       	out	0x3e, r29	; 62
   1434e:	0f be       	out	0x3f, r0	; 63
   14350:	cd bf       	out	0x3d, r28	; 61
   14352:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   14356:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   1435a:	81 81       	ldd	r24, Z+1	; 0x01
   1435c:	90 e0       	ldi	r25, 0x00	; 0
   1435e:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <gpib_enable_PPR>
   14362:	89 81       	ldd	r24, Y+1	; 0x01
   14364:	9a 81       	ldd	r25, Y+2	; 0x02
   14366:	88 27       	eor	r24, r24
   14368:	90 7d       	andi	r25, 0xD0	; 208
   1436a:	02 c0       	rjmp	.+4      	; 0x14370 <SS80_Command_State+0x4c2>
   1436c:	80 e0       	ldi	r24, 0x00	; 0
   1436e:	90 e0       	ldi	r25, 0x00	; 0
   14370:	60 96       	adiw	r28, 0x10	; 16
   14372:	0f b6       	in	r0, 0x3f	; 63
   14374:	f8 94       	cli
   14376:	de bf       	out	0x3e, r29	; 62
   14378:	0f be       	out	0x3f, r0	; 63
   1437a:	cd bf       	out	0x3d, r28	; 61
   1437c:	df 91       	pop	r29
   1437e:	cf 91       	pop	r28
   14380:	1f 91       	pop	r17
   14382:	0f 91       	pop	r16
   14384:	ff 90       	pop	r15
   14386:	ef 90       	pop	r14
   14388:	df 90       	pop	r13
   1438a:	cf 90       	pop	r12
   1438c:	bf 90       	pop	r11
   1438e:	af 90       	pop	r10
   14390:	8f 90       	pop	r8
   14392:	7f 90       	pop	r7
   14394:	6f 90       	pop	r6
   14396:	4f 90       	pop	r4
   14398:	3f 90       	pop	r3
   1439a:	2f 90       	pop	r2
   1439c:	08 95       	ret

0001439e <SS80_cmd_seek>:
   1439e:	a0 e0       	ldi	r26, 0x00	; 0
   143a0:	b0 e0       	ldi	r27, 0x00	; 0
   143a2:	e5 ed       	ldi	r30, 0xD5	; 213
   143a4:	f1 ea       	ldi	r31, 0xA1	; 161
   143a6:	0c 94 36 ec 	jmp	0x1d86c	; 0x1d86c <__prologue_saves__+0x4>
   143aa:	c0 91 fa 19 	lds	r28, 0x19FA	; 0x8019fa <SS80s>
   143ae:	d0 91 fb 19 	lds	r29, 0x19FB	; 0x8019fb <SS80s+0x1>
   143b2:	8f 80       	ldd	r8, Y+7	; 0x07
   143b4:	98 84       	ldd	r9, Y+8	; 0x08
   143b6:	a9 84       	ldd	r10, Y+9	; 0x09
   143b8:	ba 84       	ldd	r11, Y+10	; 0x0a
   143ba:	00 91 fc 19 	lds	r16, 0x19FC	; 0x8019fc <SS80p>
   143be:	10 91 fd 19 	lds	r17, 0x19FD	; 0x8019fd <SS80p+0x1>
   143c2:	f8 01       	movw	r30, r16
   143c4:	c7 a4       	ldd	r12, Z+47	; 0x2f
   143c6:	d0 a8       	ldd	r13, Z+48	; 0x30
   143c8:	e1 2c       	mov	r14, r1
   143ca:	f1 2c       	mov	r15, r1
   143cc:	6b 85       	ldd	r22, Y+11	; 0x0b
   143ce:	7c 85       	ldd	r23, Y+12	; 0x0c
   143d0:	8d 85       	ldd	r24, Y+13	; 0x0d
   143d2:	9e 85       	ldd	r25, Y+14	; 0x0e
   143d4:	a7 01       	movw	r20, r14
   143d6:	96 01       	movw	r18, r12
   143d8:	0e 94 c7 eb 	call	0x1d78e	; 0x1d78e <__udivmodsi4>
   143dc:	da 01       	movw	r26, r20
   143de:	c9 01       	movw	r24, r18
   143e0:	88 0d       	add	r24, r8
   143e2:	99 1d       	adc	r25, r9
   143e4:	aa 1d       	adc	r26, r10
   143e6:	bb 1d       	adc	r27, r11
   143e8:	f8 01       	movw	r30, r16
   143ea:	eb 5b       	subi	r30, 0xBB	; 187
   143ec:	ff 4f       	sbci	r31, 0xFF	; 255
   143ee:	40 80       	ld	r4, Z
   143f0:	51 80       	ldd	r5, Z+1	; 0x01
   143f2:	62 80       	ldd	r6, Z+2	; 0x02
   143f4:	73 80       	ldd	r7, Z+3	; 0x03
   143f6:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   143fa:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   143fe:	48 16       	cp	r4, r24
   14400:	59 06       	cpc	r5, r25
   14402:	6a 06       	cpc	r6, r26
   14404:	7b 06       	cpc	r7, r27
   14406:	20 f5       	brcc	.+72     	; 0x14450 <SS80_cmd_seek+0xb2>
   14408:	81 e0       	ldi	r24, 0x01	; 1
   1440a:	8a 83       	std	Y+2, r24	; 0x02
   1440c:	8b 81       	ldd	r24, Y+3	; 0x03
   1440e:	9c 81       	ldd	r25, Y+4	; 0x04
   14410:	84 60       	ori	r24, 0x04	; 4
   14412:	9c 83       	std	Y+4, r25	; 0x04
   14414:	8b 83       	std	Y+3, r24	; 0x03
   14416:	40 ff       	sbrs	r20, 0
   14418:	3c c0       	rjmp	.+120    	; 0x14492 <SS80_cmd_seek+0xf4>
   1441a:	f8 01       	movw	r30, r16
   1441c:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1441e:	b0 a9       	ldd	r27, Z+48	; 0x30
   14420:	a5 01       	movw	r20, r10
   14422:	94 01       	movw	r18, r8
   14424:	0e 94 14 ec 	call	0x1d828	; 0x1d828 <__muluhisi3>
   14428:	9f 93       	push	r25
   1442a:	8f 93       	push	r24
   1442c:	7f 93       	push	r23
   1442e:	6f 93       	push	r22
   14430:	85 e9       	ldi	r24, 0x95	; 149
   14432:	99 e1       	ldi	r25, 0x19	; 25
   14434:	1f 92       	push	r1
   14436:	9f 93       	push	r25
   14438:	8f 93       	push	r24
   1443a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1443e:	8d b7       	in	r24, 0x3d	; 61
   14440:	9e b7       	in	r25, 0x3e	; 62
   14442:	07 96       	adiw	r24, 0x07	; 7
   14444:	0f b6       	in	r0, 0x3f	; 63
   14446:	f8 94       	cli
   14448:	9e bf       	out	0x3e, r25	; 62
   1444a:	0f be       	out	0x3f, r0	; 63
   1444c:	8d bf       	out	0x3d, r24	; 61
   1444e:	21 c0       	rjmp	.+66     	; 0x14492 <SS80_cmd_seek+0xf4>
   14450:	ca 01       	movw	r24, r20
   14452:	80 72       	andi	r24, 0x20	; 32
   14454:	99 27       	eor	r25, r25
   14456:	45 ff       	sbrs	r20, 5
   14458:	1e c0       	rjmp	.+60     	; 0x14496 <SS80_cmd_seek+0xf8>
   1445a:	a5 01       	movw	r20, r10
   1445c:	94 01       	movw	r18, r8
   1445e:	c7 01       	movw	r24, r14
   14460:	b6 01       	movw	r22, r12
   14462:	0e 94 85 eb 	call	0x1d70a	; 0x1d70a <__mulsi3>
   14466:	9f 93       	push	r25
   14468:	8f 93       	push	r24
   1446a:	7f 93       	push	r23
   1446c:	6f 93       	push	r22
   1446e:	81 e8       	ldi	r24, 0x81	; 129
   14470:	99 e1       	ldi	r25, 0x19	; 25
   14472:	1f 92       	push	r1
   14474:	9f 93       	push	r25
   14476:	8f 93       	push	r24
   14478:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1447c:	ed b7       	in	r30, 0x3d	; 61
   1447e:	fe b7       	in	r31, 0x3e	; 62
   14480:	37 96       	adiw	r30, 0x07	; 7
   14482:	0f b6       	in	r0, 0x3f	; 63
   14484:	f8 94       	cli
   14486:	fe bf       	out	0x3e, r31	; 62
   14488:	0f be       	out	0x3f, r0	; 63
   1448a:	ed bf       	out	0x3d, r30	; 61
   1448c:	80 e0       	ldi	r24, 0x00	; 0
   1448e:	90 e0       	ldi	r25, 0x00	; 0
   14490:	02 c0       	rjmp	.+4      	; 0x14496 <SS80_cmd_seek+0xf8>
   14492:	81 e0       	ldi	r24, 0x01	; 1
   14494:	90 e0       	ldi	r25, 0x00	; 0
   14496:	cd b7       	in	r28, 0x3d	; 61
   14498:	de b7       	in	r29, 0x3e	; 62
   1449a:	e0 e1       	ldi	r30, 0x10	; 16
   1449c:	0c 94 52 ec 	jmp	0x1d8a4	; 0x1d8a4 <__epilogue_restores__+0x4>

000144a0 <SS80_locate_and_write>:
   144a0:	a8 e0       	ldi	r26, 0x08	; 8
   144a2:	b0 e0       	ldi	r27, 0x00	; 0
   144a4:	e6 e5       	ldi	r30, 0x56	; 86
   144a6:	f2 ea       	ldi	r31, 0xA2	; 162
   144a8:	0c 94 34 ec 	jmp	0x1d868	; 0x1d868 <__prologue_saves__>
   144ac:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   144b0:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   144b4:	a0 91 fc 19 	lds	r26, 0x19FC	; 0x8019fc <SS80p>
   144b8:	b0 91 fd 19 	lds	r27, 0x19FD	; 0x8019fd <SS80p+0x1>
   144bc:	9f 96       	adiw	r26, 0x2f	; 47
   144be:	0d 90       	ld	r0, X+
   144c0:	bc 91       	ld	r27, X
   144c2:	a0 2d       	mov	r26, r0
   144c4:	27 81       	ldd	r18, Z+7	; 0x07
   144c6:	30 85       	ldd	r19, Z+8	; 0x08
   144c8:	41 85       	ldd	r20, Z+9	; 0x09
   144ca:	52 85       	ldd	r21, Z+10	; 0x0a
   144cc:	0e 94 14 ec 	call	0x1d828	; 0x1d828 <__muluhisi3>
   144d0:	4b 01       	movw	r8, r22
   144d2:	5c 01       	movw	r10, r24
   144d4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   144d8:	85 ff       	sbrs	r24, 5
   144da:	18 c0       	rjmp	.+48     	; 0x1450c <SS80_locate_and_write+0x6c>
   144dc:	86 85       	ldd	r24, Z+14	; 0x0e
   144de:	8f 93       	push	r24
   144e0:	85 85       	ldd	r24, Z+13	; 0x0d
   144e2:	8f 93       	push	r24
   144e4:	84 85       	ldd	r24, Z+12	; 0x0c
   144e6:	8f 93       	push	r24
   144e8:	83 85       	ldd	r24, Z+11	; 0x0b
   144ea:	8f 93       	push	r24
   144ec:	bf 92       	push	r11
   144ee:	af 92       	push	r10
   144f0:	9f 92       	push	r9
   144f2:	8f 92       	push	r8
   144f4:	86 e1       	ldi	r24, 0x16	; 22
   144f6:	9f e1       	ldi	r25, 0x1F	; 31
   144f8:	1f 92       	push	r1
   144fa:	9f 93       	push	r25
   144fc:	8f 93       	push	r24
   144fe:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   14502:	0f b6       	in	r0, 0x3f	; 63
   14504:	f8 94       	cli
   14506:	de bf       	out	0x3e, r29	; 62
   14508:	0f be       	out	0x3f, r0	; 63
   1450a:	cd bf       	out	0x3d, r28	; 61
   1450c:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   14510:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   14514:	12 82       	std	Z+2, r1	; 0x02
   14516:	54 98       	cbi	0x0a, 4	; 10
   14518:	4c 99       	sbic	0x09, 4	; 9
   1451a:	03 c0       	rjmp	.+6      	; 0x14522 <SS80_locate_and_write+0x82>
   1451c:	80 e0       	ldi	r24, 0x00	; 0
   1451e:	90 e1       	ldi	r25, 0x10	; 16
   14520:	52 c1       	rjmp	.+676    	; 0x147c6 <SS80_locate_and_write+0x326>
   14522:	3d df       	rcall	.-390    	; 0x1439e <SS80_cmd_seek>
   14524:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   14528:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   1452c:	89 2b       	or	r24, r25
   1452e:	41 f0       	breq	.+16     	; 0x14540 <SS80_locate_and_write+0xa0>
   14530:	83 81       	ldd	r24, Z+3	; 0x03
   14532:	94 81       	ldd	r25, Z+4	; 0x04
   14534:	82 60       	ori	r24, 0x02	; 2
   14536:	94 83       	std	Z+4, r25	; 0x04
   14538:	83 83       	std	Z+3, r24	; 0x03
   1453a:	01 e0       	ldi	r16, 0x01	; 1
   1453c:	10 e0       	ldi	r17, 0x00	; 0
   1453e:	02 c0       	rjmp	.+4      	; 0x14544 <SS80_locate_and_write+0xa4>
   14540:	00 e0       	ldi	r16, 0x00	; 0
   14542:	10 e0       	ldi	r17, 0x00	; 0
   14544:	23 84       	ldd	r2, Z+11	; 0x0b
   14546:	34 84       	ldd	r3, Z+12	; 0x0c
   14548:	1a 82       	std	Y+2, r1	; 0x02
   1454a:	19 82       	std	Y+1, r1	; 0x01
   1454c:	41 2c       	mov	r4, r1
   1454e:	51 2c       	mov	r5, r1
   14550:	32 01       	movw	r6, r4
   14552:	89 ec       	ldi	r24, 0xC9	; 201
   14554:	9e e1       	ldi	r25, 0x1E	; 30
   14556:	9c 01       	movw	r18, r24
   14558:	40 e0       	ldi	r20, 0x00	; 0
   1455a:	2b 83       	std	Y+3, r18	; 0x03
   1455c:	3c 83       	std	Y+4, r19	; 0x04
   1455e:	4d 83       	std	Y+5, r20	; 0x05
   14560:	8f ee       	ldi	r24, 0xEF	; 239
   14562:	9e e1       	ldi	r25, 0x1E	; 30
   14564:	9c 01       	movw	r18, r24
   14566:	40 e0       	ldi	r20, 0x00	; 0
   14568:	2e 83       	std	Y+6, r18	; 0x06
   1456a:	3f 83       	std	Y+7, r19	; 0x07
   1456c:	48 87       	std	Y+8, r20	; 0x08
   1456e:	12 14       	cp	r1, r2
   14570:	13 04       	cpc	r1, r3
   14572:	0c f0       	brlt	.+2      	; 0x14576 <SS80_locate_and_write+0xd6>
   14574:	f6 c0       	rjmp	.+492    	; 0x14762 <SS80_locate_and_write+0x2c2>
   14576:	54 98       	cbi	0x0a, 4	; 10
   14578:	4c 9b       	sbis	0x09, 4	; 9
   1457a:	d0 cf       	rjmp	.-96     	; 0x1451c <SS80_locate_and_write+0x7c>
   1457c:	71 01       	movw	r14, r2
   1457e:	31 e0       	ldi	r19, 0x01	; 1
   14580:	23 16       	cp	r2, r19
   14582:	33 06       	cpc	r3, r19
   14584:	1c f0       	brlt	.+6      	; 0x1458c <SS80_locate_and_write+0xec>
   14586:	e1 2c       	mov	r14, r1
   14588:	ff 24       	eor	r15, r15
   1458a:	f3 94       	inc	r15
   1458c:	e5 e4       	ldi	r30, 0x45	; 69
   1458e:	fd e1       	ldi	r31, 0x1D	; 29
   14590:	20 e0       	ldi	r18, 0x00	; 0
   14592:	32 e0       	ldi	r19, 0x02	; 2
   14594:	11 92       	st	Z+, r1
   14596:	21 50       	subi	r18, 0x01	; 1
   14598:	30 40       	sbci	r19, 0x00	; 0
   1459a:	e1 f7       	brne	.-8      	; 0x14594 <SS80_locate_and_write+0xf4>
   1459c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   145a0:	87 fd       	sbrc	r24, 7
   145a2:	0e 94 61 8d 	call	0x11ac2	; 0x11ac2 <gpib_timer_elapsed_begin>
   145a6:	ae 01       	movw	r20, r28
   145a8:	4f 5f       	subi	r20, 0xFF	; 255
   145aa:	5f 4f       	sbci	r21, 0xFF	; 255
   145ac:	b7 01       	movw	r22, r14
   145ae:	85 e4       	ldi	r24, 0x45	; 69
   145b0:	9d e1       	ldi	r25, 0x1D	; 29
   145b2:	0e 94 bb 92 	call	0x12576	; 0x12576 <gpib_read_str>
   145b6:	6c 01       	movw	r12, r24
   145b8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   145bc:	87 ff       	sbrs	r24, 7
   145be:	04 c0       	rjmp	.+8      	; 0x145c8 <SS80_locate_and_write+0x128>
   145c0:	8f e3       	ldi	r24, 0x3F	; 63
   145c2:	9e e0       	ldi	r25, 0x0E	; 14
   145c4:	0e 94 73 8d 	call	0x11ae6	; 0x11ae6 <gpib_timer_elapsed_end>
   145c8:	ce 14       	cp	r12, r14
   145ca:	df 04       	cpc	r13, r15
   145cc:	39 f1       	breq	.+78     	; 0x1461c <SS80_locate_and_write+0x17c>
   145ce:	89 81       	ldd	r24, Y+1	; 0x01
   145d0:	9a 81       	ldd	r25, Y+2	; 0x02
   145d2:	9c 01       	movw	r18, r24
   145d4:	22 27       	eor	r18, r18
   145d6:	30 7d       	andi	r19, 0xD0	; 208
   145d8:	23 2b       	or	r18, r19
   145da:	d1 f0       	breq	.+52     	; 0x14610 <SS80_locate_and_write+0x170>
   145dc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   145e0:	80 ff       	sbrs	r24, 0
   145e2:	0a c0       	rjmp	.+20     	; 0x145f8 <SS80_locate_and_write+0x158>
   145e4:	83 e0       	ldi	r24, 0x03	; 3
   145e6:	9f e1       	ldi	r25, 0x1F	; 31
   145e8:	1f 92       	push	r1
   145ea:	9f 93       	push	r25
   145ec:	8f 93       	push	r24
   145ee:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   145f2:	0f 90       	pop	r0
   145f4:	0f 90       	pop	r0
   145f6:	0f 90       	pop	r0
   145f8:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   145fc:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   14600:	83 81       	ldd	r24, Z+3	; 0x03
   14602:	94 81       	ldd	r25, Z+4	; 0x04
   14604:	82 60       	ori	r24, 0x02	; 2
   14606:	94 83       	std	Z+4, r25	; 0x04
   14608:	83 83       	std	Z+3, r24	; 0x03
   1460a:	81 e0       	ldi	r24, 0x01	; 1
   1460c:	82 83       	std	Z+2, r24	; 0x02
   1460e:	9a c0       	rjmp	.+308    	; 0x14744 <SS80_locate_and_write+0x2a4>
   14610:	c1 14       	cp	r12, r1
   14612:	d1 04       	cpc	r13, r1
   14614:	09 f0       	breq	.+2      	; 0x14618 <SS80_locate_and_write+0x178>
   14616:	d3 c0       	rjmp	.+422    	; 0x147be <SS80_locate_and_write+0x31e>
   14618:	90 fd       	sbrc	r25, 0
   1461a:	94 c0       	rjmp	.+296    	; 0x14744 <SS80_locate_and_write+0x2a4>
   1461c:	01 15       	cp	r16, r1
   1461e:	11 05       	cpc	r17, r1
   14620:	09 f0       	breq	.+2      	; 0x14624 <SS80_locate_and_write+0x184>
   14622:	85 c0       	rjmp	.+266    	; 0x1472e <SS80_locate_and_write+0x28e>
   14624:	c1 14       	cp	r12, r1
   14626:	d1 04       	cpc	r13, r1
   14628:	09 f4       	brne	.+2      	; 0x1462c <SS80_locate_and_write+0x18c>
   1462a:	83 c0       	rjmp	.+262    	; 0x14732 <SS80_locate_and_write+0x292>
   1462c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14630:	86 fd       	sbrc	r24, 6
   14632:	0e 94 61 8d 	call	0x11ac2	; 0x11ac2 <gpib_timer_elapsed_begin>
   14636:	e0 90 fa 19 	lds	r14, 0x19FA	; 0x8019fa <SS80s>
   1463a:	f0 90 fb 19 	lds	r15, 0x19FB	; 0x8019fb <SS80s+0x1>
   1463e:	33 e0       	ldi	r19, 0x03	; 3
   14640:	e3 0e       	add	r14, r19
   14642:	f1 1c       	adc	r15, r1
   14644:	80 91 fc 19 	lds	r24, 0x19FC	; 0x8019fc <SS80p>
   14648:	90 91 fd 19 	lds	r25, 0x19FD	; 0x8019fd <SS80p+0x1>
   1464c:	86 01       	movw	r16, r12
   1464e:	25 e4       	ldi	r18, 0x45	; 69
   14650:	3d e1       	ldi	r19, 0x1D	; 29
   14652:	b5 01       	movw	r22, r10
   14654:	a4 01       	movw	r20, r8
   14656:	02 96       	adiw	r24, 0x02	; 2
   14658:	0e 94 0a 8d 	call	0x11a14	; 0x11a14 <dbf_open_write>
   1465c:	7c 01       	movw	r14, r24
   1465e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14662:	86 ff       	sbrs	r24, 6
   14664:	04 c0       	rjmp	.+8      	; 0x1466e <SS80_locate_and_write+0x1ce>
   14666:	89 e4       	ldi	r24, 0x49	; 73
   14668:	9e e0       	ldi	r25, 0x0E	; 14
   1466a:	0e 94 73 8d 	call	0x11ae6	; 0x11ae6 <gpib_timer_elapsed_end>
   1466e:	ce 14       	cp	r12, r14
   14670:	df 04       	cpc	r13, r15
   14672:	39 f1       	breq	.+78     	; 0x146c2 <SS80_locate_and_write+0x222>
   14674:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   14678:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   1467c:	83 81       	ldd	r24, Z+3	; 0x03
   1467e:	94 81       	ldd	r25, Z+4	; 0x04
   14680:	82 60       	ori	r24, 0x02	; 2
   14682:	94 83       	std	Z+4, r25	; 0x04
   14684:	83 83       	std	Z+3, r24	; 0x03
   14686:	0e 94 bf 74 	call	0xe97e	; 0xe97e <mmc_wp_status>
   1468a:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   1468e:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   14692:	89 2b       	or	r24, r25
   14694:	29 f0       	breq	.+10     	; 0x146a0 <SS80_locate_and_write+0x200>
   14696:	83 81       	ldd	r24, Z+3	; 0x03
   14698:	94 81       	ldd	r25, Z+4	; 0x04
   1469a:	88 60       	ori	r24, 0x08	; 8
   1469c:	94 83       	std	Z+4, r25	; 0x04
   1469e:	83 83       	std	Z+3, r24	; 0x03
   146a0:	41 e0       	ldi	r20, 0x01	; 1
   146a2:	42 83       	std	Z+2, r20	; 0x02
   146a4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   146a8:	80 ff       	sbrs	r24, 0
   146aa:	29 c0       	rjmp	.+82     	; 0x146fe <SS80_locate_and_write+0x25e>
   146ac:	1f 92       	push	r1
   146ae:	8f 81       	ldd	r24, Y+7	; 0x07
   146b0:	8f 93       	push	r24
   146b2:	9e 81       	ldd	r25, Y+6	; 0x06
   146b4:	9f 93       	push	r25
   146b6:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   146ba:	0f 90       	pop	r0
   146bc:	0f 90       	pop	r0
   146be:	0f 90       	pop	r0
   146c0:	1e c0       	rjmp	.+60     	; 0x146fe <SS80_locate_and_write+0x25e>
   146c2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   146c6:	85 ff       	sbrs	r24, 5
   146c8:	0e c0       	rjmp	.+28     	; 0x146e6 <SS80_locate_and_write+0x246>
   146ca:	df 92       	push	r13
   146cc:	cf 92       	push	r12
   146ce:	1f 92       	push	r1
   146d0:	ec 81       	ldd	r30, Y+4	; 0x04
   146d2:	ef 93       	push	r30
   146d4:	fb 81       	ldd	r31, Y+3	; 0x03
   146d6:	ff 93       	push	r31
   146d8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   146dc:	0f 90       	pop	r0
   146de:	0f 90       	pop	r0
   146e0:	0f 90       	pop	r0
   146e2:	0f 90       	pop	r0
   146e4:	0f 90       	pop	r0
   146e6:	c6 01       	movw	r24, r12
   146e8:	0d 2c       	mov	r0, r13
   146ea:	00 0c       	add	r0, r0
   146ec:	aa 0b       	sbc	r26, r26
   146ee:	bb 0b       	sbc	r27, r27
   146f0:	88 0e       	add	r8, r24
   146f2:	99 1e       	adc	r9, r25
   146f4:	aa 1e       	adc	r10, r26
   146f6:	bb 1e       	adc	r11, r27
   146f8:	00 e0       	ldi	r16, 0x00	; 0
   146fa:	10 e0       	ldi	r17, 0x00	; 0
   146fc:	05 c0       	rjmp	.+10     	; 0x14708 <SS80_locate_and_write+0x268>
   146fe:	ec 14       	cp	r14, r12
   14700:	fd 04       	cpc	r15, r13
   14702:	64 f0       	brlt	.+24     	; 0x1471c <SS80_locate_and_write+0x27c>
   14704:	01 e0       	ldi	r16, 0x01	; 1
   14706:	10 e0       	ldi	r17, 0x00	; 0
   14708:	c7 01       	movw	r24, r14
   1470a:	0f 2c       	mov	r0, r15
   1470c:	00 0c       	add	r0, r0
   1470e:	aa 0b       	sbc	r26, r26
   14710:	bb 0b       	sbc	r27, r27
   14712:	48 0e       	add	r4, r24
   14714:	59 1e       	adc	r5, r25
   14716:	6a 1e       	adc	r6, r26
   14718:	7b 1e       	adc	r7, r27
   1471a:	0b c0       	rjmp	.+22     	; 0x14732 <SS80_locate_and_write+0x292>
   1471c:	c6 01       	movw	r24, r12
   1471e:	0d 2c       	mov	r0, r13
   14720:	00 0c       	add	r0, r0
   14722:	aa 0b       	sbc	r26, r26
   14724:	bb 0b       	sbc	r27, r27
   14726:	48 0e       	add	r4, r24
   14728:	59 1e       	adc	r5, r25
   1472a:	6a 1e       	adc	r6, r26
   1472c:	7b 1e       	adc	r7, r27
   1472e:	01 e0       	ldi	r16, 0x01	; 1
   14730:	10 e0       	ldi	r17, 0x00	; 0
   14732:	2c 18       	sub	r2, r12
   14734:	3d 08       	sbc	r3, r13
   14736:	89 81       	ldd	r24, Y+1	; 0x01
   14738:	9a 81       	ldd	r25, Y+2	; 0x02
   1473a:	90 ff       	sbrs	r25, 0
   1473c:	18 cf       	rjmp	.-464    	; 0x1456e <SS80_locate_and_write+0xce>
   1473e:	12 14       	cp	r1, r2
   14740:	13 04       	cpc	r1, r3
   14742:	7c f4       	brge	.+30     	; 0x14762 <SS80_locate_and_write+0x2c2>
   14744:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14748:	80 ff       	sbrs	r24, 0
   1474a:	1f c0       	rjmp	.+62     	; 0x1478a <SS80_locate_and_write+0x2ea>
   1474c:	81 ea       	ldi	r24, 0xA1	; 161
   1474e:	9e e1       	ldi	r25, 0x1E	; 30
   14750:	1f 92       	push	r1
   14752:	9f 93       	push	r25
   14754:	8f 93       	push	r24
   14756:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1475a:	0f 90       	pop	r0
   1475c:	0f 90       	pop	r0
   1475e:	0f 90       	pop	r0
   14760:	14 c0       	rjmp	.+40     	; 0x1478a <SS80_locate_and_write+0x2ea>
   14762:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14766:	85 ff       	sbrs	r24, 5
   14768:	10 c0       	rjmp	.+32     	; 0x1478a <SS80_locate_and_write+0x2ea>
   1476a:	7f 92       	push	r7
   1476c:	6f 92       	push	r6
   1476e:	5f 92       	push	r5
   14770:	4f 92       	push	r4
   14772:	86 e7       	ldi	r24, 0x76	; 118
   14774:	9e e1       	ldi	r25, 0x1E	; 30
   14776:	1f 92       	push	r1
   14778:	9f 93       	push	r25
   1477a:	8f 93       	push	r24
   1477c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   14780:	0f b6       	in	r0, 0x3f	; 63
   14782:	f8 94       	cli
   14784:	de bf       	out	0x3e, r29	; 62
   14786:	0f be       	out	0x3f, r0	; 63
   14788:	cd bf       	out	0x3d, r28	; 61
   1478a:	00 91 fa 19 	lds	r16, 0x19FA	; 0x8019fa <SS80s>
   1478e:	10 91 fb 19 	lds	r17, 0x19FB	; 0x8019fb <SS80s+0x1>
   14792:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   14796:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   1479a:	27 a5       	ldd	r18, Z+47	; 0x2f
   1479c:	30 a9       	ldd	r19, Z+48	; 0x30
   1479e:	40 e0       	ldi	r20, 0x00	; 0
   147a0:	50 e0       	ldi	r21, 0x00	; 0
   147a2:	c5 01       	movw	r24, r10
   147a4:	b4 01       	movw	r22, r8
   147a6:	0e 94 c7 eb 	call	0x1d78e	; 0x1d78e <__udivmodsi4>
   147aa:	f8 01       	movw	r30, r16
   147ac:	27 83       	std	Z+7, r18	; 0x07
   147ae:	30 87       	std	Z+8, r19	; 0x08
   147b0:	41 87       	std	Z+9, r20	; 0x09
   147b2:	52 87       	std	Z+10, r21	; 0x0a
   147b4:	89 81       	ldd	r24, Y+1	; 0x01
   147b6:	9a 81       	ldd	r25, Y+2	; 0x02
   147b8:	88 27       	eor	r24, r24
   147ba:	90 7d       	andi	r25, 0xD0	; 208
   147bc:	04 c0       	rjmp	.+8      	; 0x147c6 <SS80_locate_and_write+0x326>
   147be:	01 2b       	or	r16, r17
   147c0:	09 f4       	brne	.+2      	; 0x147c4 <SS80_locate_and_write+0x324>
   147c2:	34 cf       	rjmp	.-408    	; 0x1462c <SS80_locate_and_write+0x18c>
   147c4:	b4 cf       	rjmp	.-152    	; 0x1472e <SS80_locate_and_write+0x28e>
   147c6:	28 96       	adiw	r28, 0x08	; 8
   147c8:	e2 e1       	ldi	r30, 0x12	; 18
   147ca:	0c 94 50 ec 	jmp	0x1d8a0	; 0x1d8a0 <__epilogue_restores__>

000147ce <SS80_Report>:
   147ce:	a3 e0       	ldi	r26, 0x03	; 3
   147d0:	b0 e0       	ldi	r27, 0x00	; 0
   147d2:	ed ee       	ldi	r30, 0xED	; 237
   147d4:	f3 ea       	ldi	r31, 0xA3	; 163
   147d6:	0c 94 44 ec 	jmp	0x1d888	; 0x1d888 <__prologue_saves__+0x20>
   147da:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   147de:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   147e2:	82 81       	ldd	r24, Z+2	; 0x02
   147e4:	8b 83       	std	Y+3, r24	; 0x03
   147e6:	80 e0       	ldi	r24, 0x00	; 0
   147e8:	91 e0       	ldi	r25, 0x01	; 1
   147ea:	9a 83       	std	Y+2, r25	; 0x02
   147ec:	89 83       	std	Y+1, r24	; 0x01
   147ee:	ae 01       	movw	r20, r28
   147f0:	4f 5f       	subi	r20, 0xFF	; 255
   147f2:	5f 4f       	sbci	r21, 0xFF	; 255
   147f4:	61 e0       	ldi	r22, 0x01	; 1
   147f6:	70 e0       	ldi	r23, 0x00	; 0
   147f8:	ce 01       	movw	r24, r28
   147fa:	03 96       	adiw	r24, 0x03	; 3
   147fc:	0e 94 69 93 	call	0x126d2	; 0x126d2 <gpib_write_str>
   14800:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   14804:	01 97       	sbiw	r24, 0x01	; 1
   14806:	89 f0       	breq	.+34     	; 0x1482a <SS80_Report+0x5c>
   14808:	20 ff       	sbrs	r18, 0
   1480a:	0a c0       	rjmp	.+20     	; 0x14820 <SS80_Report+0x52>
   1480c:	87 e6       	ldi	r24, 0x67	; 103
   1480e:	99 e1       	ldi	r25, 0x19	; 25
   14810:	1f 92       	push	r1
   14812:	9f 93       	push	r25
   14814:	8f 93       	push	r24
   14816:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1481a:	0f 90       	pop	r0
   1481c:	0f 90       	pop	r0
   1481e:	0f 90       	pop	r0
   14820:	89 81       	ldd	r24, Y+1	; 0x01
   14822:	9a 81       	ldd	r25, Y+2	; 0x02
   14824:	88 27       	eor	r24, r24
   14826:	90 7d       	andi	r25, 0xD0	; 208
   14828:	1c c0       	rjmp	.+56     	; 0x14862 <SS80_Report+0x94>
   1482a:	25 ff       	sbrs	r18, 5
   1482c:	13 c0       	rjmp	.+38     	; 0x14854 <SS80_Report+0x86>
   1482e:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   14832:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   14836:	82 81       	ldd	r24, Z+2	; 0x02
   14838:	1f 92       	push	r1
   1483a:	8f 93       	push	r24
   1483c:	84 e5       	ldi	r24, 0x54	; 84
   1483e:	99 e1       	ldi	r25, 0x19	; 25
   14840:	1f 92       	push	r1
   14842:	9f 93       	push	r25
   14844:	8f 93       	push	r24
   14846:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1484a:	0f 90       	pop	r0
   1484c:	0f 90       	pop	r0
   1484e:	0f 90       	pop	r0
   14850:	0f 90       	pop	r0
   14852:	0f 90       	pop	r0
   14854:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   14858:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   1485c:	12 82       	std	Z+2, r1	; 0x02
   1485e:	80 e0       	ldi	r24, 0x00	; 0
   14860:	90 e0       	ldi	r25, 0x00	; 0
   14862:	23 96       	adiw	r28, 0x03	; 3
   14864:	e2 e0       	ldi	r30, 0x02	; 2
   14866:	0c 94 60 ec 	jmp	0x1d8c0	; 0x1d8c0 <__epilogue_restores__+0x20>

0001486a <Clear_Common>:
   1486a:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   1486e:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   14872:	25 81       	ldd	r18, Z+5	; 0x05
   14874:	30 e0       	ldi	r19, 0x00	; 0
   14876:	28 17       	cp	r18, r24
   14878:	39 07       	cpc	r19, r25
   1487a:	19 f0       	breq	.+6      	; 0x14882 <Clear_Common+0x18>
   1487c:	0f 97       	sbiw	r24, 0x0f	; 15
   1487e:	99 f4       	brne	.+38     	; 0x148a6 <Clear_Common+0x3c>
   14880:	03 c0       	rjmp	.+6      	; 0x14888 <Clear_Common+0x1e>
   14882:	2f 30       	cpi	r18, 0x0F	; 15
   14884:	31 05       	cpc	r19, r1
   14886:	09 f4       	brne	.+2      	; 0x1488a <Clear_Common+0x20>
   14888:	15 82       	std	Z+5, r1	; 0x05
   1488a:	16 82       	std	Z+6, r1	; 0x06
   1488c:	17 82       	std	Z+7, r1	; 0x07
   1488e:	10 86       	std	Z+8, r1	; 0x08
   14890:	11 86       	std	Z+9, r1	; 0x09
   14892:	12 86       	std	Z+10, r1	; 0x0a
   14894:	13 86       	std	Z+11, r1	; 0x0b
   14896:	14 86       	std	Z+12, r1	; 0x0c
   14898:	15 86       	std	Z+13, r1	; 0x0d
   1489a:	16 86       	std	Z+14, r1	; 0x0e
   1489c:	11 82       	std	Z+1, r1	; 0x01
   1489e:	10 82       	st	Z, r1
   148a0:	14 82       	std	Z+4, r1	; 0x04
   148a2:	13 82       	std	Z+3, r1	; 0x03
   148a4:	12 82       	std	Z+2, r1	; 0x02
   148a6:	08 95       	ret

000148a8 <SS80_init>:
   148a8:	a0 e0       	ldi	r26, 0x00	; 0
   148aa:	b0 e0       	ldi	r27, 0x00	; 0
   148ac:	ea e5       	ldi	r30, 0x5A	; 90
   148ae:	f4 ea       	ldi	r31, 0xA4	; 164
   148b0:	0c 94 3e ec 	jmp	0x1d87c	; 0x1d87c <__prologue_saves__+0x14>
   148b4:	0f e4       	ldi	r16, 0x4F	; 79
   148b6:	1f e1       	ldi	r17, 0x1F	; 31
   148b8:	c7 e0       	ldi	r28, 0x07	; 7
   148ba:	d0 e0       	ldi	r29, 0x00	; 0
   148bc:	8f e1       	ldi	r24, 0x1F	; 31
   148be:	90 e2       	ldi	r25, 0x20	; 32
   148c0:	6c 01       	movw	r12, r24
   148c2:	e1 2c       	mov	r14, r1
   148c4:	f8 01       	movw	r30, r16
   148c6:	f1 a8       	ldd	r15, Z+49	; 0x31
   148c8:	f2 e0       	ldi	r31, 0x02	; 2
   148ca:	ff 12       	cpse	r15, r31
   148cc:	27 c0       	rjmp	.+78     	; 0x1491c <SS80_init+0x74>
   148ce:	ce 01       	movw	r24, r28
   148d0:	0e 94 b6 b7 	call	0x16f6c	; 0x16f6c <set_active_device>
   148d4:	89 2b       	or	r24, r25
   148d6:	11 f1       	breq	.+68     	; 0x1491c <SS80_init+0x74>
   148d8:	8f e0       	ldi	r24, 0x0F	; 15
   148da:	90 e0       	ldi	r25, 0x00	; 0
   148dc:	c6 df       	rcall	.-116    	; 0x1486a <Clear_Common>
   148de:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   148e2:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   148e6:	f2 82       	std	Z+2, r15	; 0x02
   148e8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   148ec:	85 ff       	sbrs	r24, 5
   148ee:	0e c0       	rjmp	.+28     	; 0x1490c <SS80_init+0x64>
   148f0:	f8 01       	movw	r30, r16
   148f2:	82 a9       	ldd	r24, Z+50	; 0x32
   148f4:	1f 92       	push	r1
   148f6:	8f 93       	push	r24
   148f8:	1f 92       	push	r1
   148fa:	df 92       	push	r13
   148fc:	cf 92       	push	r12
   148fe:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   14902:	0f 90       	pop	r0
   14904:	0f 90       	pop	r0
   14906:	0f 90       	pop	r0
   14908:	0f 90       	pop	r0
   1490a:	0f 90       	pop	r0
   1490c:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   14910:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   14914:	81 81       	ldd	r24, Z+1	; 0x01
   14916:	90 e0       	ldi	r25, 0x00	; 0
   14918:	0e 94 4a 8e 	call	0x11c94	; 0x11c94 <gpib_disable_PPR>
   1491c:	21 97       	sbiw	r28, 0x01	; 1
   1491e:	07 50       	subi	r16, 0x07	; 7
   14920:	11 09       	sbc	r17, r1
   14922:	cf 3f       	cpi	r28, 0xFF	; 255
   14924:	ff ef       	ldi	r31, 0xFF	; 255
   14926:	df 07       	cpc	r29, r31
   14928:	69 f6       	brne	.-102    	; 0x148c4 <SS80_init+0x1c>
   1492a:	cd b7       	in	r28, 0x3d	; 61
   1492c:	de b7       	in	r29, 0x3e	; 62
   1492e:	e8 e0       	ldi	r30, 0x08	; 8
   14930:	0c 94 5a ec 	jmp	0x1d8b4	; 0x1d8b4 <__epilogue_restores__+0x14>

00014934 <SS80_Channel_Independent_Clear>:
   14934:	9a df       	rcall	.-204    	; 0x1486a <Clear_Common>
   14936:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   1493a:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   1493e:	81 81       	ldd	r24, Z+1	; 0x01
   14940:	90 e0       	ldi	r25, 0x00	; 0
   14942:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <gpib_enable_PPR>
   14946:	80 e0       	ldi	r24, 0x00	; 0
   14948:	90 e0       	ldi	r25, 0x00	; 0
   1494a:	08 95       	ret

0001494c <SS80_Universal_Device_Clear>:
   1494c:	8f e0       	ldi	r24, 0x0F	; 15
   1494e:	90 e0       	ldi	r25, 0x00	; 0
   14950:	8c df       	rcall	.-232    	; 0x1486a <Clear_Common>
   14952:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   14956:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   1495a:	81 81       	ldd	r24, Z+1	; 0x01
   1495c:	90 e0       	ldi	r25, 0x00	; 0
   1495e:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <gpib_enable_PPR>
   14962:	80 e0       	ldi	r24, 0x00	; 0
   14964:	90 e0       	ldi	r25, 0x00	; 0
   14966:	08 95       	ret

00014968 <SS80_Selected_Device_Clear>:
   14968:	cf 93       	push	r28
   1496a:	df 93       	push	r29
   1496c:	ec 01       	movw	r28, r24
   1496e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14972:	85 ff       	sbrs	r24, 5
   14974:	0a c0       	rjmp	.+20     	; 0x1498a <SS80_Selected_Device_Clear+0x22>
   14976:	88 e4       	ldi	r24, 0x48	; 72
   14978:	99 e1       	ldi	r25, 0x19	; 25
   1497a:	1f 92       	push	r1
   1497c:	9f 93       	push	r25
   1497e:	8f 93       	push	r24
   14980:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   14984:	0f 90       	pop	r0
   14986:	0f 90       	pop	r0
   14988:	0f 90       	pop	r0
   1498a:	ce 01       	movw	r24, r28
   1498c:	6e df       	rcall	.-292    	; 0x1486a <Clear_Common>
   1498e:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   14992:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   14996:	81 81       	ldd	r24, Z+1	; 0x01
   14998:	90 e0       	ldi	r25, 0x00	; 0
   1499a:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <gpib_enable_PPR>
   1499e:	80 e0       	ldi	r24, 0x00	; 0
   149a0:	90 e0       	ldi	r25, 0x00	; 0
   149a2:	df 91       	pop	r29
   149a4:	cf 91       	pop	r28
   149a6:	08 95       	ret

000149a8 <SS80_Amigo_Clear>:
   149a8:	a3 e0       	ldi	r26, 0x03	; 3
   149aa:	b0 e0       	ldi	r27, 0x00	; 0
   149ac:	ea ed       	ldi	r30, 0xDA	; 218
   149ae:	f4 ea       	ldi	r31, 0xA4	; 164
   149b0:	0c 94 44 ec 	jmp	0x1d888	; 0x1d888 <__prologue_saves__+0x20>
   149b4:	1a 82       	std	Y+2, r1	; 0x02
   149b6:	19 82       	std	Y+1, r1	; 0x01
   149b8:	ae 01       	movw	r20, r28
   149ba:	4f 5f       	subi	r20, 0xFF	; 255
   149bc:	5f 4f       	sbci	r21, 0xFF	; 255
   149be:	61 e0       	ldi	r22, 0x01	; 1
   149c0:	70 e0       	ldi	r23, 0x00	; 0
   149c2:	ce 01       	movw	r24, r28
   149c4:	03 96       	adiw	r24, 0x03	; 3
   149c6:	0e 94 bb 92 	call	0x12576	; 0x12576 <gpib_read_str>
   149ca:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   149ce:	01 97       	sbiw	r24, 0x01	; 1
   149d0:	89 f0       	breq	.+34     	; 0x149f4 <SS80_Amigo_Clear+0x4c>
   149d2:	20 ff       	sbrs	r18, 0
   149d4:	0a c0       	rjmp	.+20     	; 0x149ea <SS80_Amigo_Clear+0x42>
   149d6:	85 e3       	ldi	r24, 0x35	; 53
   149d8:	99 e1       	ldi	r25, 0x19	; 25
   149da:	1f 92       	push	r1
   149dc:	9f 93       	push	r25
   149de:	8f 93       	push	r24
   149e0:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   149e4:	0f 90       	pop	r0
   149e6:	0f 90       	pop	r0
   149e8:	0f 90       	pop	r0
   149ea:	89 81       	ldd	r24, Y+1	; 0x01
   149ec:	9a 81       	ldd	r25, Y+2	; 0x02
   149ee:	88 27       	eor	r24, r24
   149f0:	90 7d       	andi	r25, 0xD0	; 208
   149f2:	19 c0       	rjmp	.+50     	; 0x14a26 <SS80_Amigo_Clear+0x7e>
   149f4:	25 ff       	sbrs	r18, 5
   149f6:	0a c0       	rjmp	.+20     	; 0x14a0c <SS80_Amigo_Clear+0x64>
   149f8:	86 e2       	ldi	r24, 0x26	; 38
   149fa:	99 e1       	ldi	r25, 0x19	; 25
   149fc:	1f 92       	push	r1
   149fe:	9f 93       	push	r25
   14a00:	8f 93       	push	r24
   14a02:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   14a06:	0f 90       	pop	r0
   14a08:	0f 90       	pop	r0
   14a0a:	0f 90       	pop	r0
   14a0c:	8f e0       	ldi	r24, 0x0F	; 15
   14a0e:	90 e0       	ldi	r25, 0x00	; 0
   14a10:	2c df       	rcall	.-424    	; 0x1486a <Clear_Common>
   14a12:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   14a16:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   14a1a:	81 81       	ldd	r24, Z+1	; 0x01
   14a1c:	90 e0       	ldi	r25, 0x00	; 0
   14a1e:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <gpib_enable_PPR>
   14a22:	80 e0       	ldi	r24, 0x00	; 0
   14a24:	90 e0       	ldi	r25, 0x00	; 0
   14a26:	23 96       	adiw	r28, 0x03	; 3
   14a28:	e2 e0       	ldi	r30, 0x02	; 2
   14a2a:	0c 94 60 ec 	jmp	0x1d8c0	; 0x1d8c0 <__epilogue_restores__+0x20>

00014a2e <SS80_Cancel>:
   14a2e:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   14a32:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   14a36:	11 82       	std	Z+1, r1	; 0x01
   14a38:	10 82       	st	Z, r1
   14a3a:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   14a3e:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   14a42:	81 81       	ldd	r24, Z+1	; 0x01
   14a44:	90 e0       	ldi	r25, 0x00	; 0
   14a46:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <gpib_enable_PPR>
   14a4a:	80 e0       	ldi	r24, 0x00	; 0
   14a4c:	90 e0       	ldi	r25, 0x00	; 0
   14a4e:	08 95       	ret

00014a50 <SS80_Transparent_State>:
   14a50:	a2 e0       	ldi	r26, 0x02	; 2
   14a52:	b0 e0       	ldi	r27, 0x00	; 0
   14a54:	ee e2       	ldi	r30, 0x2E	; 46
   14a56:	f5 ea       	ldi	r31, 0xA5	; 165
   14a58:	0c 94 3c ec 	jmp	0x1d878	; 0x1d878 <__prologue_saves__+0x10>
   14a5c:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   14a60:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   14a64:	81 81       	ldd	r24, Z+1	; 0x01
   14a66:	90 e0       	ldi	r25, 0x00	; 0
   14a68:	0e 94 4a 8e 	call	0x11c94	; 0x11c94 <gpib_disable_PPR>
   14a6c:	80 e0       	ldi	r24, 0x00	; 0
   14a6e:	91 e0       	ldi	r25, 0x01	; 1
   14a70:	9a 83       	std	Y+2, r25	; 0x02
   14a72:	89 83       	std	Y+1, r24	; 0x01
   14a74:	ae 01       	movw	r20, r28
   14a76:	4f 5f       	subi	r20, 0xFF	; 255
   14a78:	5f 4f       	sbci	r21, 0xFF	; 255
   14a7a:	60 e0       	ldi	r22, 0x00	; 0
   14a7c:	72 e0       	ldi	r23, 0x02	; 2
   14a7e:	85 e4       	ldi	r24, 0x45	; 69
   14a80:	9d e1       	ldi	r25, 0x1D	; 29
   14a82:	0e 94 bb 92 	call	0x12576	; 0x12576 <gpib_read_str>
   14a86:	7c 01       	movw	r14, r24
   14a88:	89 81       	ldd	r24, Y+1	; 0x01
   14a8a:	9a 81       	ldd	r25, Y+2	; 0x02
   14a8c:	9c 01       	movw	r18, r24
   14a8e:	22 27       	eor	r18, r18
   14a90:	30 7d       	andi	r19, 0xD0	; 208
   14a92:	23 2b       	or	r18, r19
   14a94:	79 f0       	breq	.+30     	; 0x14ab4 <SS80_Transparent_State+0x64>
   14a96:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14a9a:	80 ff       	sbrs	r24, 0
   14a9c:	e0 c0       	rjmp	.+448    	; 0x14c5e <SS80_Transparent_State+0x20e>
   14a9e:	85 ec       	ldi	r24, 0xC5	; 197
   14aa0:	9a e1       	ldi	r25, 0x1A	; 26
   14aa2:	1f 92       	push	r1
   14aa4:	9f 93       	push	r25
   14aa6:	8f 93       	push	r24
   14aa8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   14aac:	0f 90       	pop	r0
   14aae:	0f 90       	pop	r0
   14ab0:	0f 90       	pop	r0
   14ab2:	d5 c0       	rjmp	.+426    	; 0x14c5e <SS80_Transparent_State+0x20e>
   14ab4:	e1 14       	cp	r14, r1
   14ab6:	f1 04       	cpc	r15, r1
   14ab8:	09 f4       	brne	.+2      	; 0x14abc <SS80_Transparent_State+0x6c>
   14aba:	d6 c0       	rjmp	.+428    	; 0x14c68 <SS80_Transparent_State+0x218>
   14abc:	90 fd       	sbrc	r25, 0
   14abe:	0e c0       	rjmp	.+28     	; 0x14adc <SS80_Transparent_State+0x8c>
   14ac0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14ac4:	80 ff       	sbrs	r24, 0
   14ac6:	0a c0       	rjmp	.+20     	; 0x14adc <SS80_Transparent_State+0x8c>
   14ac8:	8c ea       	ldi	r24, 0xAC	; 172
   14aca:	9a e1       	ldi	r25, 0x1A	; 26
   14acc:	1f 92       	push	r1
   14ace:	9f 93       	push	r25
   14ad0:	8f 93       	push	r24
   14ad2:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   14ad6:	0f 90       	pop	r0
   14ad8:	0f 90       	pop	r0
   14ada:	0f 90       	pop	r0
   14adc:	85 e4       	ldi	r24, 0x45	; 69
   14ade:	a8 2e       	mov	r10, r24
   14ae0:	8d e1       	ldi	r24, 0x1D	; 29
   14ae2:	b8 2e       	mov	r11, r24
   14ae4:	00 e0       	ldi	r16, 0x00	; 0
   14ae6:	10 e0       	ldi	r17, 0x00	; 0
   14ae8:	0e 15       	cp	r16, r14
   14aea:	1f 05       	cpc	r17, r15
   14aec:	0c f0       	brlt	.+2      	; 0x14af0 <SS80_Transparent_State+0xa0>
   14aee:	a0 c0       	rjmp	.+320    	; 0x14c30 <SS80_Transparent_State+0x1e0>
   14af0:	68 01       	movw	r12, r16
   14af2:	8f ef       	ldi	r24, 0xFF	; 255
   14af4:	c8 1a       	sub	r12, r24
   14af6:	d8 0a       	sbc	r13, r24
   14af8:	f5 01       	movw	r30, r10
   14afa:	81 91       	ld	r24, Z+
   14afc:	5f 01       	movw	r10, r30
   14afe:	28 2f       	mov	r18, r24
   14b00:	30 e0       	ldi	r19, 0x00	; 0
   14b02:	a9 01       	movw	r20, r18
   14b04:	40 52       	subi	r20, 0x20	; 32
   14b06:	51 09       	sbc	r21, r1
   14b08:	40 31       	cpi	r20, 0x10	; 16
   14b0a:	51 05       	cpc	r21, r1
   14b0c:	20 f4       	brcc	.+8      	; 0x14b16 <SS80_Transparent_State+0xc6>
   14b0e:	80 52       	subi	r24, 0x20	; 32
   14b10:	8c d9       	rcall	.-3304   	; 0x13e2a <SS80_Check_Unit>
   14b12:	86 01       	movw	r16, r12
   14b14:	e9 cf       	rjmp	.-46     	; 0x14ae8 <SS80_Transparent_State+0x98>
   14b16:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14b1a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   14b1e:	21 30       	cpi	r18, 0x01	; 1
   14b20:	31 05       	cpc	r19, r1
   14b22:	c9 f4       	brne	.+50     	; 0x14b56 <SS80_Transparent_State+0x106>
   14b24:	0e 5f       	subi	r16, 0xFE	; 254
   14b26:	1f 4f       	sbci	r17, 0xFF	; 255
   14b28:	80 73       	andi	r24, 0x30	; 48
   14b2a:	99 27       	eor	r25, r25
   14b2c:	89 2b       	or	r24, r25
   14b2e:	51 f0       	breq	.+20     	; 0x14b44 <SS80_Transparent_State+0xf4>
   14b30:	87 e8       	ldi	r24, 0x87	; 135
   14b32:	9a e1       	ldi	r25, 0x1A	; 26
   14b34:	1f 92       	push	r1
   14b36:	9f 93       	push	r25
   14b38:	8f 93       	push	r24
   14b3a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   14b3e:	0f 90       	pop	r0
   14b40:	0f 90       	pop	r0
   14b42:	0f 90       	pop	r0
   14b44:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   14b48:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   14b4c:	81 81       	ldd	r24, Z+1	; 0x01
   14b4e:	90 e0       	ldi	r25, 0x00	; 0
   14b50:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <gpib_enable_PPR>
   14b54:	6d c0       	rjmp	.+218    	; 0x14c30 <SS80_Transparent_State+0x1e0>
   14b56:	22 30       	cpi	r18, 0x02	; 2
   14b58:	31 05       	cpc	r19, r1
   14b5a:	51 f4       	brne	.+20     	; 0x14b70 <SS80_Transparent_State+0x120>
   14b5c:	0b 5f       	subi	r16, 0xFB	; 251
   14b5e:	1f 4f       	sbci	r17, 0xFF	; 255
   14b60:	80 73       	andi	r24, 0x30	; 48
   14b62:	99 27       	eor	r25, r25
   14b64:	89 2b       	or	r24, r25
   14b66:	09 f4       	brne	.+2      	; 0x14b6a <SS80_Transparent_State+0x11a>
   14b68:	63 c0       	rjmp	.+198    	; 0x14c30 <SS80_Transparent_State+0x1e0>
   14b6a:	8a e6       	ldi	r24, 0x6A	; 106
   14b6c:	9a e1       	ldi	r25, 0x1A	; 26
   14b6e:	0c c0       	rjmp	.+24     	; 0x14b88 <SS80_Transparent_State+0x138>
   14b70:	23 30       	cpi	r18, 0x03	; 3
   14b72:	31 05       	cpc	r19, r1
   14b74:	91 f4       	brne	.+36     	; 0x14b9a <SS80_Transparent_State+0x14a>
   14b76:	0b 5f       	subi	r16, 0xFB	; 251
   14b78:	1f 4f       	sbci	r17, 0xFF	; 255
   14b7a:	80 73       	andi	r24, 0x30	; 48
   14b7c:	99 27       	eor	r25, r25
   14b7e:	89 2b       	or	r24, r25
   14b80:	09 f4       	brne	.+2      	; 0x14b84 <SS80_Transparent_State+0x134>
   14b82:	56 c0       	rjmp	.+172    	; 0x14c30 <SS80_Transparent_State+0x1e0>
   14b84:	8c e4       	ldi	r24, 0x4C	; 76
   14b86:	9a e1       	ldi	r25, 0x1A	; 26
   14b88:	1f 92       	push	r1
   14b8a:	9f 93       	push	r25
   14b8c:	8f 93       	push	r24
   14b8e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   14b92:	0f 90       	pop	r0
   14b94:	0f 90       	pop	r0
   14b96:	0f 90       	pop	r0
   14b98:	4b c0       	rjmp	.+150    	; 0x14c30 <SS80_Transparent_State+0x1e0>
   14b9a:	28 30       	cpi	r18, 0x08	; 8
   14b9c:	31 05       	cpc	r19, r1
   14b9e:	e9 f4       	brne	.+58     	; 0x14bda <SS80_Transparent_State+0x18a>
   14ba0:	85 ff       	sbrs	r24, 5
   14ba2:	13 c0       	rjmp	.+38     	; 0x14bca <SS80_Transparent_State+0x17a>
   14ba4:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   14ba8:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   14bac:	85 81       	ldd	r24, Z+5	; 0x05
   14bae:	1f 92       	push	r1
   14bb0:	8f 93       	push	r24
   14bb2:	85 e2       	ldi	r24, 0x25	; 37
   14bb4:	9a e1       	ldi	r25, 0x1A	; 26
   14bb6:	1f 92       	push	r1
   14bb8:	9f 93       	push	r25
   14bba:	8f 93       	push	r24
   14bbc:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   14bc0:	0f 90       	pop	r0
   14bc2:	0f 90       	pop	r0
   14bc4:	0f 90       	pop	r0
   14bc6:	0f 90       	pop	r0
   14bc8:	0f 90       	pop	r0
   14bca:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   14bce:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   14bd2:	85 81       	ldd	r24, Z+5	; 0x05
   14bd4:	90 e0       	ldi	r25, 0x00	; 0
   14bd6:	ae de       	rcall	.-676    	; 0x14934 <SS80_Channel_Independent_Clear>
   14bd8:	49 c0       	rjmp	.+146    	; 0x14c6c <SS80_Transparent_State+0x21c>
   14bda:	29 30       	cpi	r18, 0x09	; 9
   14bdc:	31 05       	cpc	r19, r1
   14bde:	b9 f4       	brne	.+46     	; 0x14c0e <SS80_Transparent_State+0x1be>
   14be0:	85 ff       	sbrs	r24, 5
   14be2:	13 c0       	rjmp	.+38     	; 0x14c0a <SS80_Transparent_State+0x1ba>
   14be4:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   14be8:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   14bec:	85 81       	ldd	r24, Z+5	; 0x05
   14bee:	1f 92       	push	r1
   14bf0:	8f 93       	push	r24
   14bf2:	81 e1       	ldi	r24, 0x11	; 17
   14bf4:	9a e1       	ldi	r25, 0x1A	; 26
   14bf6:	1f 92       	push	r1
   14bf8:	9f 93       	push	r25
   14bfa:	8f 93       	push	r24
   14bfc:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   14c00:	0f 90       	pop	r0
   14c02:	0f 90       	pop	r0
   14c04:	0f 90       	pop	r0
   14c06:	0f 90       	pop	r0
   14c08:	0f 90       	pop	r0
   14c0a:	11 df       	rcall	.-478    	; 0x14a2e <SS80_Cancel>
   14c0c:	2f c0       	rjmp	.+94     	; 0x14c6c <SS80_Transparent_State+0x21c>
   14c0e:	80 ff       	sbrs	r24, 0
   14c10:	26 c0       	rjmp	.+76     	; 0x14c5e <SS80_Transparent_State+0x20e>
   14c12:	3f 93       	push	r19
   14c14:	2f 93       	push	r18
   14c16:	81 ef       	ldi	r24, 0xF1	; 241
   14c18:	99 e1       	ldi	r25, 0x19	; 25
   14c1a:	1f 92       	push	r1
   14c1c:	9f 93       	push	r25
   14c1e:	8f 93       	push	r24
   14c20:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   14c24:	0f 90       	pop	r0
   14c26:	0f 90       	pop	r0
   14c28:	0f 90       	pop	r0
   14c2a:	0f 90       	pop	r0
   14c2c:	0f 90       	pop	r0
   14c2e:	86 01       	movw	r16, r12
   14c30:	0e 15       	cp	r16, r14
   14c32:	1f 05       	cpc	r17, r15
   14c34:	a1 f0       	breq	.+40     	; 0x14c5e <SS80_Transparent_State+0x20e>
   14c36:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14c3a:	80 ff       	sbrs	r24, 0
   14c3c:	10 c0       	rjmp	.+32     	; 0x14c5e <SS80_Transparent_State+0x20e>
   14c3e:	ff 92       	push	r15
   14c40:	ef 92       	push	r14
   14c42:	1f 93       	push	r17
   14c44:	0f 93       	push	r16
   14c46:	85 eb       	ldi	r24, 0xB5	; 181
   14c48:	99 e1       	ldi	r25, 0x19	; 25
   14c4a:	1f 92       	push	r1
   14c4c:	9f 93       	push	r25
   14c4e:	8f 93       	push	r24
   14c50:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   14c54:	0f b6       	in	r0, 0x3f	; 63
   14c56:	f8 94       	cli
   14c58:	de bf       	out	0x3e, r29	; 62
   14c5a:	0f be       	out	0x3f, r0	; 63
   14c5c:	cd bf       	out	0x3d, r28	; 61
   14c5e:	89 81       	ldd	r24, Y+1	; 0x01
   14c60:	9a 81       	ldd	r25, Y+2	; 0x02
   14c62:	88 27       	eor	r24, r24
   14c64:	90 7d       	andi	r25, 0xD0	; 208
   14c66:	02 c0       	rjmp	.+4      	; 0x14c6c <SS80_Transparent_State+0x21c>
   14c68:	80 e0       	ldi	r24, 0x00	; 0
   14c6a:	90 e0       	ldi	r25, 0x00	; 0
   14c6c:	22 96       	adiw	r28, 0x02	; 2
   14c6e:	ea e0       	ldi	r30, 0x0A	; 10
   14c70:	0c 94 58 ec 	jmp	0x1d8b0	; 0x1d8b0 <__epilogue_restores__+0x10>

00014c74 <SS80_error_return>:
   14c74:	a3 e0       	ldi	r26, 0x03	; 3
   14c76:	b0 e0       	ldi	r27, 0x00	; 0
   14c78:	e0 e4       	ldi	r30, 0x40	; 64
   14c7a:	f6 ea       	ldi	r31, 0xA6	; 166
   14c7c:	0c 94 44 ec 	jmp	0x1d888	; 0x1d888 <__prologue_saves__+0x20>
   14c80:	80 e0       	ldi	r24, 0x00	; 0
   14c82:	91 e0       	ldi	r25, 0x01	; 1
   14c84:	9a 83       	std	Y+2, r25	; 0x02
   14c86:	89 83       	std	Y+1, r24	; 0x01
   14c88:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   14c8c:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   14c90:	81 e0       	ldi	r24, 0x01	; 1
   14c92:	82 83       	std	Z+2, r24	; 0x02
   14c94:	8b 83       	std	Y+3, r24	; 0x03
   14c96:	ae 01       	movw	r20, r28
   14c98:	4f 5f       	subi	r20, 0xFF	; 255
   14c9a:	5f 4f       	sbci	r21, 0xFF	; 255
   14c9c:	61 e0       	ldi	r22, 0x01	; 1
   14c9e:	70 e0       	ldi	r23, 0x00	; 0
   14ca0:	ce 01       	movw	r24, r28
   14ca2:	03 96       	adiw	r24, 0x03	; 3
   14ca4:	0e 94 69 93 	call	0x126d2	; 0x126d2 <gpib_write_str>
   14ca8:	01 97       	sbiw	r24, 0x01	; 1
   14caa:	99 f0       	breq	.+38     	; 0x14cd2 <SS80_error_return+0x5e>
   14cac:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14cb0:	80 ff       	sbrs	r24, 0
   14cb2:	0a c0       	rjmp	.+20     	; 0x14cc8 <SS80_error_return+0x54>
   14cb4:	87 ee       	ldi	r24, 0xE7	; 231
   14cb6:	98 e1       	ldi	r25, 0x18	; 24
   14cb8:	1f 92       	push	r1
   14cba:	9f 93       	push	r25
   14cbc:	8f 93       	push	r24
   14cbe:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   14cc2:	0f 90       	pop	r0
   14cc4:	0f 90       	pop	r0
   14cc6:	0f 90       	pop	r0
   14cc8:	89 81       	ldd	r24, Y+1	; 0x01
   14cca:	9a 81       	ldd	r25, Y+2	; 0x02
   14ccc:	88 27       	eor	r24, r24
   14cce:	90 7d       	andi	r25, 0xD0	; 208
   14cd0:	07 c0       	rjmp	.+14     	; 0x14ce0 <SS80_error_return+0x6c>
   14cd2:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   14cd6:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   14cda:	12 82       	std	Z+2, r1	; 0x02
   14cdc:	80 e0       	ldi	r24, 0x00	; 0
   14cde:	90 e0       	ldi	r25, 0x00	; 0
   14ce0:	23 96       	adiw	r28, 0x03	; 3
   14ce2:	e2 e0       	ldi	r30, 0x02	; 2
   14ce4:	0c 94 60 ec 	jmp	0x1d8c0	; 0x1d8c0 <__epilogue_restores__+0x20>

00014ce8 <SS80_locate_and_read>:
/// - Phases: Command, Report
/// @param[in] u: Unit
/// @return  0

int SS80_Channel_Independent_Clear( int u )
{
   14ce8:	ac e0       	ldi	r26, 0x0C	; 12
   14cea:	b0 e0       	ldi	r27, 0x00	; 0
   14cec:	ea e7       	ldi	r30, 0x7A	; 122
   14cee:	f6 ea       	ldi	r31, 0xA6	; 166
   14cf0:	0c 94 35 ec 	jmp	0x1d86a	; 0x1d86a <__prologue_saves__+0x2>
   14cf4:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   14cf8:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   14cfc:	27 81       	ldd	r18, Z+7	; 0x07
   14cfe:	30 85       	ldd	r19, Z+8	; 0x08
   14d00:	41 85       	ldd	r20, Z+9	; 0x09
   14d02:	52 85       	ldd	r21, Z+10	; 0x0a
   14d04:	a0 91 fc 19 	lds	r26, 0x19FC	; 0x8019fc <SS80p>
   14d08:	b0 91 fd 19 	lds	r27, 0x19FD	; 0x8019fd <SS80p+0x1>
   14d0c:	9f 96       	adiw	r26, 0x2f	; 47
   14d0e:	0d 90       	ld	r0, X+
   14d10:	bc 91       	ld	r27, X
   14d12:	a0 2d       	mov	r26, r0
   14d14:	12 82       	std	Z+2, r1	; 0x02
   14d16:	1a 82       	std	Y+2, r1	; 0x02
   14d18:	19 82       	std	Y+1, r1	; 0x01
   14d1a:	54 98       	cbi	0x0a, 4	; 10
   14d1c:	4c 99       	sbic	0x09, 4	; 9
   14d1e:	03 c0       	rjmp	.+6      	; 0x14d26 <SS80_locate_and_read+0x3e>
   14d20:	80 e0       	ldi	r24, 0x00	; 0
   14d22:	90 e1       	ldi	r25, 0x10	; 16
   14d24:	45 c1       	rjmp	.+650    	; 0x14fb0 <SS80_locate_and_read+0x2c8>
   14d26:	0e 94 14 ec 	call	0x1d828	; 0x1d828 <__muluhisi3>
   14d2a:	4b 01       	movw	r8, r22
   14d2c:	5c 01       	movw	r10, r24
   14d2e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14d32:	85 ff       	sbrs	r24, 5
   14d34:	1c c0       	rjmp	.+56     	; 0x14d6e <SS80_locate_and_read+0x86>
   14d36:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   14d3a:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   14d3e:	86 85       	ldd	r24, Z+14	; 0x0e
   14d40:	8f 93       	push	r24
   14d42:	85 85       	ldd	r24, Z+13	; 0x0d
   14d44:	8f 93       	push	r24
   14d46:	84 85       	ldd	r24, Z+12	; 0x0c
   14d48:	8f 93       	push	r24
   14d4a:	83 85       	ldd	r24, Z+11	; 0x0b
   14d4c:	8f 93       	push	r24
   14d4e:	bf 92       	push	r11
   14d50:	af 92       	push	r10
   14d52:	9f 92       	push	r9
   14d54:	8f 92       	push	r8
   14d56:	8b ed       	ldi	r24, 0xDB	; 219
   14d58:	9f e1       	ldi	r25, 0x1F	; 31
   14d5a:	1f 92       	push	r1
   14d5c:	9f 93       	push	r25
   14d5e:	8f 93       	push	r24
   14d60:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   14d64:	0f b6       	in	r0, 0x3f	; 63
   14d66:	f8 94       	cli
   14d68:	de bf       	out	0x3e, r29	; 62
   14d6a:	0f be       	out	0x3f, r0	; 63
   14d6c:	cd bf       	out	0x3d, r28	; 61
   14d6e:	17 db       	rcall	.-2514   	; 0x1439e <SS80_cmd_seek>
   14d70:	89 2b       	or	r24, r25
   14d72:	09 f0       	breq	.+2      	; 0x14d76 <SS80_locate_and_read+0x8e>
   14d74:	af c0       	rjmp	.+350    	; 0x14ed4 <SS80_locate_and_read+0x1ec>
   14d76:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   14d7a:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   14d7e:	43 84       	ldd	r4, Z+11	; 0x0b
   14d80:	54 84       	ldd	r5, Z+12	; 0x0c
   14d82:	65 84       	ldd	r6, Z+13	; 0x0d
   14d84:	76 84       	ldd	r7, Z+14	; 0x0e
   14d86:	1b 82       	std	Y+3, r1	; 0x03
   14d88:	1c 82       	std	Y+4, r1	; 0x04
   14d8a:	1d 82       	std	Y+5, r1	; 0x05
   14d8c:	1e 82       	std	Y+6, r1	; 0x06
   14d8e:	8d eb       	ldi	r24, 0xBD	; 189
   14d90:	9f e1       	ldi	r25, 0x1F	; 31
   14d92:	9c 01       	movw	r18, r24
   14d94:	40 e0       	ldi	r20, 0x00	; 0
   14d96:	2f 83       	std	Y+7, r18	; 0x07
   14d98:	38 87       	std	Y+8, r19	; 0x08
   14d9a:	49 87       	std	Y+9, r20	; 0x09
   14d9c:	33 24       	eor	r3, r3
   14d9e:	33 94       	inc	r3
   14da0:	8c e8       	ldi	r24, 0x8C	; 140
   14da2:	9f e1       	ldi	r25, 0x1F	; 31
   14da4:	9c 01       	movw	r18, r24
   14da6:	40 e0       	ldi	r20, 0x00	; 0
   14da8:	2a 87       	std	Y+10, r18	; 0x0a
   14daa:	3b 87       	std	Y+11, r19	; 0x0b
   14dac:	4c 87       	std	Y+12, r20	; 0x0c
   14dae:	34 c0       	rjmp	.+104    	; 0x14e18 <SS80_locate_and_read+0x130>
   14db0:	86 fd       	sbrc	r24, 6
   14db2:	0e 94 61 8d 	call	0x11ac2	; 0x11ac2 <gpib_timer_elapsed_begin>
   14db6:	ae 01       	movw	r20, r28
   14db8:	4f 5f       	subi	r20, 0xFF	; 255
   14dba:	5f 4f       	sbci	r21, 0xFF	; 255
   14dbc:	b6 01       	movw	r22, r12
   14dbe:	85 e4       	ldi	r24, 0x45	; 69
   14dc0:	9d e1       	ldi	r25, 0x1D	; 29
   14dc2:	0e 94 69 93 	call	0x126d2	; 0x126d2 <gpib_write_str>
   14dc6:	8c 01       	movw	r16, r24
   14dc8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14dcc:	86 ff       	sbrs	r24, 6
   14dce:	04 c0       	rjmp	.+8      	; 0x14dd8 <SS80_locate_and_read+0xf0>
   14dd0:	8e e5       	ldi	r24, 0x5E	; 94
   14dd2:	9e e0       	ldi	r25, 0x0E	; 14
   14dd4:	0e 94 73 8d 	call	0x11ae6	; 0x11ae6 <gpib_timer_elapsed_end>
   14dd8:	c0 16       	cp	r12, r16
   14dda:	d1 06       	cpc	r13, r17
   14ddc:	09 f0       	breq	.+2      	; 0x14de0 <SS80_locate_and_read+0xf8>
   14dde:	83 c0       	rjmp	.+262    	; 0x14ee6 <SS80_locate_and_read+0x1fe>
   14de0:	0d 2c       	mov	r0, r13
   14de2:	00 0c       	add	r0, r0
   14de4:	ee 08       	sbc	r14, r14
   14de6:	ff 08       	sbc	r15, r15
   14de8:	8c 0c       	add	r8, r12
   14dea:	9d 1c       	adc	r9, r13
   14dec:	ae 1c       	adc	r10, r14
   14dee:	bf 1c       	adc	r11, r15
   14df0:	01 2e       	mov	r0, r17
   14df2:	00 0c       	add	r0, r0
   14df4:	22 0b       	sbc	r18, r18
   14df6:	33 0b       	sbc	r19, r19
   14df8:	8b 81       	ldd	r24, Y+3	; 0x03
   14dfa:	9c 81       	ldd	r25, Y+4	; 0x04
   14dfc:	ad 81       	ldd	r26, Y+5	; 0x05
   14dfe:	be 81       	ldd	r27, Y+6	; 0x06
   14e00:	80 0f       	add	r24, r16
   14e02:	91 1f       	adc	r25, r17
   14e04:	a2 1f       	adc	r26, r18
   14e06:	b3 1f       	adc	r27, r19
   14e08:	8b 83       	std	Y+3, r24	; 0x03
   14e0a:	9c 83       	std	Y+4, r25	; 0x04
   14e0c:	ad 83       	std	Y+5, r26	; 0x05
   14e0e:	be 83       	std	Y+6, r27	; 0x06
   14e10:	40 1a       	sub	r4, r16
   14e12:	51 0a       	sbc	r5, r17
   14e14:	62 0a       	sbc	r6, r18
   14e16:	73 0a       	sbc	r7, r19
   14e18:	41 14       	cp	r4, r1
   14e1a:	51 04       	cpc	r5, r1
   14e1c:	61 04       	cpc	r6, r1
   14e1e:	71 04       	cpc	r7, r1
   14e20:	09 f4       	brne	.+2      	; 0x14e24 <SS80_locate_and_read+0x13c>
   14e22:	93 c0       	rjmp	.+294    	; 0x14f4a <SS80_locate_and_read+0x262>
   14e24:	54 98       	cbi	0x0a, 4	; 10
   14e26:	4c 9b       	sbis	0x09, 4	; 9
   14e28:	7b cf       	rjmp	.-266    	; 0x14d20 <SS80_locate_and_read+0x38>
   14e2a:	31 e0       	ldi	r19, 0x01	; 1
   14e2c:	43 16       	cp	r4, r19
   14e2e:	53 06       	cpc	r5, r19
   14e30:	61 04       	cpc	r6, r1
   14e32:	71 04       	cpc	r7, r1
   14e34:	08 f4       	brcc	.+2      	; 0x14e38 <SS80_locate_and_read+0x150>
   14e36:	50 c0       	rjmp	.+160    	; 0x14ed8 <SS80_locate_and_read+0x1f0>
   14e38:	1a 82       	std	Y+2, r1	; 0x02
   14e3a:	19 82       	std	Y+1, r1	; 0x01
   14e3c:	c1 2c       	mov	r12, r1
   14e3e:	dd 24       	eor	r13, r13
   14e40:	d3 94       	inc	r13
   14e42:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14e46:	86 fd       	sbrc	r24, 6
   14e48:	0e 94 61 8d 	call	0x11ac2	; 0x11ac2 <gpib_timer_elapsed_begin>
   14e4c:	e0 90 fa 19 	lds	r14, 0x19FA	; 0x8019fa <SS80s>
   14e50:	f0 90 fb 19 	lds	r15, 0x19FB	; 0x8019fb <SS80s+0x1>
   14e54:	43 e0       	ldi	r20, 0x03	; 3
   14e56:	e4 0e       	add	r14, r20
   14e58:	f1 1c       	adc	r15, r1
   14e5a:	80 91 fc 19 	lds	r24, 0x19FC	; 0x8019fc <SS80p>
   14e5e:	90 91 fd 19 	lds	r25, 0x19FD	; 0x8019fd <SS80p+0x1>
   14e62:	86 01       	movw	r16, r12
   14e64:	25 e4       	ldi	r18, 0x45	; 69
   14e66:	3d e1       	ldi	r19, 0x1D	; 29
   14e68:	b5 01       	movw	r22, r10
   14e6a:	a4 01       	movw	r20, r8
   14e6c:	02 96       	adiw	r24, 0x02	; 2
   14e6e:	0e 94 b3 8c 	call	0x11966	; 0x11966 <dbf_open_read>
   14e72:	8c 01       	movw	r16, r24
   14e74:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14e78:	86 ff       	sbrs	r24, 6
   14e7a:	04 c0       	rjmp	.+8      	; 0x14e84 <SS80_locate_and_read+0x19c>
   14e7c:	84 e5       	ldi	r24, 0x54	; 84
   14e7e:	9e e0       	ldi	r25, 0x0E	; 14
   14e80:	0e 94 73 8d 	call	0x11ae6	; 0x11ae6 <gpib_timer_elapsed_end>
   14e84:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14e88:	85 ff       	sbrs	r24, 5
   14e8a:	0e c0       	rjmp	.+28     	; 0x14ea8 <SS80_locate_and_read+0x1c0>
   14e8c:	1f 93       	push	r17
   14e8e:	0f 93       	push	r16
   14e90:	1f 92       	push	r1
   14e92:	88 85       	ldd	r24, Y+8	; 0x08
   14e94:	8f 93       	push	r24
   14e96:	9f 81       	ldd	r25, Y+7	; 0x07
   14e98:	9f 93       	push	r25
   14e9a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   14e9e:	0f 90       	pop	r0
   14ea0:	0f 90       	pop	r0
   14ea2:	0f 90       	pop	r0
   14ea4:	0f 90       	pop	r0
   14ea6:	0f 90       	pop	r0
   14ea8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14eac:	17 ff       	sbrs	r17, 7
   14eae:	80 cf       	rjmp	.-256    	; 0x14db0 <SS80_locate_and_read+0xc8>
   14eb0:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   14eb4:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   14eb8:	91 e0       	ldi	r25, 0x01	; 1
   14eba:	92 83       	std	Z+2, r25	; 0x02
   14ebc:	80 ff       	sbrs	r24, 0
   14ebe:	0a c0       	rjmp	.+20     	; 0x14ed4 <SS80_locate_and_read+0x1ec>
   14ec0:	85 ea       	ldi	r24, 0xA5	; 165
   14ec2:	9f e1       	ldi	r25, 0x1F	; 31
   14ec4:	1f 92       	push	r1
   14ec6:	9f 93       	push	r25
   14ec8:	8f 93       	push	r24
   14eca:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   14ece:	0f 90       	pop	r0
   14ed0:	0f 90       	pop	r0
   14ed2:	0f 90       	pop	r0
   14ed4:	cf de       	rcall	.-610    	; 0x14c74 <SS80_error_return>
   14ed6:	6c c0       	rjmp	.+216    	; 0x14fb0 <SS80_locate_and_read+0x2c8>
   14ed8:	62 01       	movw	r12, r4
   14eda:	89 81       	ldd	r24, Y+1	; 0x01
   14edc:	9a 81       	ldd	r25, Y+2	; 0x02
   14ede:	91 60       	ori	r25, 0x01	; 1
   14ee0:	9a 83       	std	Y+2, r25	; 0x02
   14ee2:	89 83       	std	Y+1, r24	; 0x01
   14ee4:	ae cf       	rjmp	.-164    	; 0x14e42 <SS80_locate_and_read+0x15a>
   14ee6:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   14eea:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   14eee:	32 82       	std	Z+2, r3	; 0x02
   14ef0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14ef4:	80 ff       	sbrs	r24, 0
   14ef6:	0a c0       	rjmp	.+20     	; 0x14f0c <SS80_locate_and_read+0x224>
   14ef8:	1f 92       	push	r1
   14efa:	ab 85       	ldd	r26, Y+11	; 0x0b
   14efc:	af 93       	push	r26
   14efe:	ba 85       	ldd	r27, Y+10	; 0x0a
   14f00:	bf 93       	push	r27
   14f02:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   14f06:	0f 90       	pop	r0
   14f08:	0f 90       	pop	r0
   14f0a:	0f 90       	pop	r0
   14f0c:	89 81       	ldd	r24, Y+1	; 0x01
   14f0e:	9a 81       	ldd	r25, Y+2	; 0x02
   14f10:	88 27       	eor	r24, r24
   14f12:	90 7d       	andi	r25, 0xD0	; 208
   14f14:	89 2b       	or	r24, r25
   14f16:	09 f4       	brne	.+2      	; 0x14f1a <SS80_locate_and_read+0x232>
   14f18:	63 cf       	rjmp	.-314    	; 0x14de0 <SS80_locate_and_read+0xf8>
   14f1a:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   14f1e:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   14f22:	83 81       	ldd	r24, Z+3	; 0x03
   14f24:	94 81       	ldd	r25, Z+4	; 0x04
   14f26:	80 62       	ori	r24, 0x20	; 32
   14f28:	94 83       	std	Z+4, r25	; 0x04
   14f2a:	83 83       	std	Z+3, r24	; 0x03
   14f2c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14f30:	80 ff       	sbrs	r24, 0
   14f32:	23 c0       	rjmp	.+70     	; 0x14f7a <SS80_locate_and_read+0x292>
   14f34:	87 e6       	ldi	r24, 0x67	; 103
   14f36:	9f e1       	ldi	r25, 0x1F	; 31
   14f38:	1f 92       	push	r1
   14f3a:	9f 93       	push	r25
   14f3c:	8f 93       	push	r24
   14f3e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   14f42:	0f 90       	pop	r0
   14f44:	0f 90       	pop	r0
   14f46:	0f 90       	pop	r0
   14f48:	18 c0       	rjmp	.+48     	; 0x14f7a <SS80_locate_and_read+0x292>
   14f4a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   14f4e:	85 ff       	sbrs	r24, 5
   14f50:	14 c0       	rjmp	.+40     	; 0x14f7a <SS80_locate_and_read+0x292>
   14f52:	9e 81       	ldd	r25, Y+6	; 0x06
   14f54:	9f 93       	push	r25
   14f56:	ad 81       	ldd	r26, Y+5	; 0x05
   14f58:	af 93       	push	r26
   14f5a:	bc 81       	ldd	r27, Y+4	; 0x04
   14f5c:	bf 93       	push	r27
   14f5e:	eb 81       	ldd	r30, Y+3	; 0x03
   14f60:	ef 93       	push	r30
   14f62:	8f e3       	ldi	r24, 0x3F	; 63
   14f64:	9f e1       	ldi	r25, 0x1F	; 31
   14f66:	1f 92       	push	r1
   14f68:	9f 93       	push	r25
   14f6a:	8f 93       	push	r24
   14f6c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   14f70:	0f b6       	in	r0, 0x3f	; 63
   14f72:	f8 94       	cli
   14f74:	de bf       	out	0x3e, r29	; 62
   14f76:	0f be       	out	0x3f, r0	; 63
   14f78:	cd bf       	out	0x3d, r28	; 61
   14f7a:	00 91 fa 19 	lds	r16, 0x19FA	; 0x8019fa <SS80s>
   14f7e:	10 91 fb 19 	lds	r17, 0x19FB	; 0x8019fb <SS80s+0x1>
   14f82:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   14f86:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   14f8a:	27 a5       	ldd	r18, Z+47	; 0x2f
   14f8c:	30 a9       	ldd	r19, Z+48	; 0x30
   14f8e:	40 e0       	ldi	r20, 0x00	; 0
   14f90:	50 e0       	ldi	r21, 0x00	; 0
   14f92:	c5 01       	movw	r24, r10
   14f94:	b4 01       	movw	r22, r8
   14f96:	0e 94 c7 eb 	call	0x1d78e	; 0x1d78e <__udivmodsi4>
   14f9a:	d8 01       	movw	r26, r16
   14f9c:	17 96       	adiw	r26, 0x07	; 7
   14f9e:	2d 93       	st	X+, r18
   14fa0:	3d 93       	st	X+, r19
   14fa2:	4d 93       	st	X+, r20
   14fa4:	5c 93       	st	X, r21
   14fa6:	1a 97       	sbiw	r26, 0x0a	; 10
   14fa8:	89 81       	ldd	r24, Y+1	; 0x01
   14faa:	9a 81       	ldd	r25, Y+2	; 0x02
   14fac:	88 27       	eor	r24, r24
   14fae:	90 7d       	andi	r25, 0xD0	; 208
   14fb0:	2c 96       	adiw	r28, 0x0c	; 12
   14fb2:	e1 e1       	ldi	r30, 0x11	; 17
   14fb4:	0c 94 51 ec 	jmp	0x1d8a2	; 0x1d8a2 <__epilogue_restores__+0x2>

00014fb8 <SS80_Execute_State>:
   14fb8:	cf 93       	push	r28
   14fba:	df 93       	push	r29
   14fbc:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   14fc0:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   14fc4:	81 81       	ldd	r24, Z+1	; 0x01
   14fc6:	90 e0       	ldi	r25, 0x00	; 0
   14fc8:	0e 94 4a 8e 	call	0x11c94	; 0x11c94 <gpib_disable_PPR>
   14fcc:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   14fd0:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   14fd4:	80 81       	ld	r24, Z
   14fd6:	91 81       	ldd	r25, Z+1	; 0x01
   14fd8:	82 30       	cpi	r24, 0x02	; 2
   14fda:	91 05       	cpc	r25, r1
   14fdc:	89 f0       	breq	.+34     	; 0x15000 <SS80_Execute_State+0x48>
   14fde:	3c f4       	brge	.+14     	; 0x14fee <SS80_Execute_State+0x36>
   14fe0:	00 97       	sbiw	r24, 0x00	; 0
   14fe2:	91 f1       	breq	.+100    	; 0x15048 <SS80_Execute_State+0x90>
   14fe4:	81 30       	cpi	r24, 0x01	; 1
   14fe6:	91 05       	cpc	r25, r1
   14fe8:	b9 f4       	brne	.+46     	; 0x15018 <SS80_Execute_State+0x60>
   14fea:	7e de       	rcall	.-772    	; 0x14ce8 <SS80_locate_and_read>
   14fec:	0d c0       	rjmp	.+26     	; 0x15008 <SS80_Execute_State+0x50>
   14fee:	83 30       	cpi	r24, 0x03	; 3
   14ff0:	91 05       	cpc	r25, r1
   14ff2:	41 f0       	breq	.+16     	; 0x15004 <SS80_Execute_State+0x4c>
   14ff4:	84 30       	cpi	r24, 0x04	; 4
   14ff6:	91 05       	cpc	r25, r1
   14ff8:	79 f4       	brne	.+30     	; 0x15018 <SS80_Execute_State+0x60>
   14ffa:	0e 94 a5 9e 	call	0x13d4a	; 0x13d4a <SS80_describe>
   14ffe:	04 c0       	rjmp	.+8      	; 0x15008 <SS80_Execute_State+0x50>
   15000:	4f da       	rcall	.-2914   	; 0x144a0 <SS80_locate_and_write>
   15002:	02 c0       	rjmp	.+4      	; 0x15008 <SS80_Execute_State+0x50>
   15004:	0e 94 24 9e 	call	0x13c48	; 0x13c48 <SS80_send_status>
   15008:	ec 01       	movw	r28, r24
   1500a:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   1500e:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   15012:	11 82       	std	Z+1, r1	; 0x01
   15014:	10 82       	st	Z, r1
   15016:	1a c0       	rjmp	.+52     	; 0x1504c <SS80_Execute_State+0x94>
   15018:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1501c:	20 ff       	sbrs	r18, 0
   1501e:	0e c0       	rjmp	.+28     	; 0x1503c <SS80_Execute_State+0x84>
   15020:	9f 93       	push	r25
   15022:	8f 93       	push	r24
   15024:	83 e0       	ldi	r24, 0x03	; 3
   15026:	90 e2       	ldi	r25, 0x20	; 32
   15028:	1f 92       	push	r1
   1502a:	9f 93       	push	r25
   1502c:	8f 93       	push	r24
   1502e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   15032:	0f 90       	pop	r0
   15034:	0f 90       	pop	r0
   15036:	0f 90       	pop	r0
   15038:	0f 90       	pop	r0
   1503a:	0f 90       	pop	r0
   1503c:	e0 91 fa 19 	lds	r30, 0x19FA	; 0x8019fa <SS80s>
   15040:	f0 91 fb 19 	lds	r31, 0x19FB	; 0x8019fb <SS80s+0x1>
   15044:	11 82       	std	Z+1, r1	; 0x01
   15046:	10 82       	st	Z, r1
   15048:	c0 e0       	ldi	r28, 0x00	; 0
   1504a:	d0 e0       	ldi	r29, 0x00	; 0
   1504c:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   15050:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   15054:	81 81       	ldd	r24, Z+1	; 0x01
   15056:	90 e0       	ldi	r25, 0x00	; 0
   15058:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <gpib_enable_PPR>
   1505c:	ce 01       	movw	r24, r28
   1505e:	df 91       	pop	r29
   15060:	cf 91       	pop	r28
   15062:	08 95       	ret

00015064 <SS80_COMMANDS>:
   15064:	1f 93       	push	r17
   15066:	cf 93       	push	r28
   15068:	df 93       	push	r29
   1506a:	18 2f       	mov	r17, r24
   1506c:	80 91 49 1f 	lds	r24, 0x1F49	; 0x801f49 <talking>
   15070:	90 e0       	ldi	r25, 0x00	; 0
   15072:	0e 94 22 94 	call	0x12844	; 0x12844 <SS80_is_MTA>
   15076:	89 2b       	or	r24, r25
   15078:	19 f0       	breq	.+6      	; 0x15080 <SS80_COMMANDS+0x1c>
   1507a:	15 36       	cpi	r17, 0x65	; 101
   1507c:	19 f5       	brne	.+70     	; 0x150c4 <SS80_COMMANDS+0x60>
   1507e:	09 c0       	rjmp	.+18     	; 0x15092 <SS80_COMMANDS+0x2e>
   15080:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   15084:	90 e0       	ldi	r25, 0x00	; 0
   15086:	0e 94 11 94 	call	0x12822	; 0x12822 <SS80_is_MLA>
   1508a:	ec 01       	movw	r28, r24
   1508c:	89 2b       	or	r24, r25
   1508e:	a9 f7       	brne	.-22     	; 0x1507a <SS80_COMMANDS+0x16>
   15090:	ae c0       	rjmp	.+348    	; 0x151ee <SS80_COMMANDS+0x18a>
   15092:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   15096:	90 e0       	ldi	r25, 0x00	; 0
   15098:	0e 94 11 94 	call	0x12822	; 0x12822 <SS80_is_MLA>
   1509c:	89 2b       	or	r24, r25
   1509e:	09 f4       	brne	.+2      	; 0x150a2 <SS80_COMMANDS+0x3e>
   150a0:	a3 c0       	rjmp	.+326    	; 0x151e8 <SS80_COMMANDS+0x184>
   150a2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   150a6:	85 ff       	sbrs	r24, 5
   150a8:	0a c0       	rjmp	.+20     	; 0x150be <SS80_COMMANDS+0x5a>
   150aa:	81 ed       	ldi	r24, 0xD1	; 209
   150ac:	98 e1       	ldi	r25, 0x18	; 24
   150ae:	1f 92       	push	r1
   150b0:	9f 93       	push	r25
   150b2:	8f 93       	push	r24
   150b4:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   150b8:	0f 90       	pop	r0
   150ba:	0f 90       	pop	r0
   150bc:	0f 90       	pop	r0
   150be:	0e 94 57 9f 	call	0x13eae	; 0x13eae <SS80_Command_State>
   150c2:	73 c0       	rjmp	.+230    	; 0x151aa <SS80_COMMANDS+0x146>
   150c4:	1e 36       	cpi	r17, 0x6E	; 110
   150c6:	01 f5       	brne	.+64     	; 0x15108 <SS80_COMMANDS+0xa4>
   150c8:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   150cc:	90 e0       	ldi	r25, 0x00	; 0
   150ce:	0e 94 11 94 	call	0x12822	; 0x12822 <SS80_is_MLA>
   150d2:	89 2b       	or	r24, r25
   150d4:	79 f0       	breq	.+30     	; 0x150f4 <SS80_COMMANDS+0x90>
   150d6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   150da:	85 ff       	sbrs	r24, 5
   150dc:	13 c0       	rjmp	.+38     	; 0x15104 <SS80_COMMANDS+0xa0>
   150de:	8b eb       	ldi	r24, 0xBB	; 187
   150e0:	98 e1       	ldi	r25, 0x18	; 24
   150e2:	1f 92       	push	r1
   150e4:	9f 93       	push	r25
   150e6:	8f 93       	push	r24
   150e8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   150ec:	0f 90       	pop	r0
   150ee:	0f 90       	pop	r0
   150f0:	0f 90       	pop	r0
   150f2:	08 c0       	rjmp	.+16     	; 0x15104 <SS80_COMMANDS+0xa0>
   150f4:	80 91 49 1f 	lds	r24, 0x1F49	; 0x801f49 <talking>
   150f8:	90 e0       	ldi	r25, 0x00	; 0
   150fa:	0e 94 22 94 	call	0x12844	; 0x12844 <SS80_is_MTA>
   150fe:	89 2b       	or	r24, r25
   15100:	51 f7       	brne	.-44     	; 0x150d6 <SS80_COMMANDS+0x72>
   15102:	72 c0       	rjmp	.+228    	; 0x151e8 <SS80_COMMANDS+0x184>
   15104:	59 df       	rcall	.-334    	; 0x14fb8 <SS80_Execute_State>
   15106:	51 c0       	rjmp	.+162    	; 0x151aa <SS80_COMMANDS+0x146>
   15108:	10 37       	cpi	r17, 0x70	; 112
   1510a:	b9 f5       	brne	.+110    	; 0x1517a <SS80_COMMANDS+0x116>
   1510c:	80 91 49 1f 	lds	r24, 0x1F49	; 0x801f49 <talking>
   15110:	90 e0       	ldi	r25, 0x00	; 0
   15112:	0e 94 22 94 	call	0x12844	; 0x12844 <SS80_is_MTA>
   15116:	89 2b       	or	r24, r25
   15118:	81 f0       	breq	.+32     	; 0x1513a <SS80_COMMANDS+0xd6>
   1511a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1511e:	85 ff       	sbrs	r24, 5
   15120:	0a c0       	rjmp	.+20     	; 0x15136 <SS80_COMMANDS+0xd2>
   15122:	86 ea       	ldi	r24, 0xA6	; 166
   15124:	98 e1       	ldi	r25, 0x18	; 24
   15126:	1f 92       	push	r1
   15128:	9f 93       	push	r25
   1512a:	8f 93       	push	r24
   1512c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   15130:	0f 90       	pop	r0
   15132:	0f 90       	pop	r0
   15134:	0f 90       	pop	r0
   15136:	4b db       	rcall	.-2410   	; 0x147ce <SS80_Report>
   15138:	38 c0       	rjmp	.+112    	; 0x151aa <SS80_COMMANDS+0x146>
   1513a:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   1513e:	90 e0       	ldi	r25, 0x00	; 0
   15140:	0e 94 11 94 	call	0x12822	; 0x12822 <SS80_is_MLA>
   15144:	89 2b       	or	r24, r25
   15146:	09 f4       	brne	.+2      	; 0x1514a <SS80_COMMANDS+0xe6>
   15148:	4f c0       	rjmp	.+158    	; 0x151e8 <SS80_COMMANDS+0x184>
   1514a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1514e:	85 ff       	sbrs	r24, 5
   15150:	0a c0       	rjmp	.+20     	; 0x15166 <SS80_COMMANDS+0x102>
   15152:	87 e9       	ldi	r24, 0x97	; 151
   15154:	98 e1       	ldi	r25, 0x18	; 24
   15156:	1f 92       	push	r1
   15158:	9f 93       	push	r25
   1515a:	8f 93       	push	r24
   1515c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   15160:	0f 90       	pop	r0
   15162:	0f 90       	pop	r0
   15164:	0f 90       	pop	r0
   15166:	e0 91 fc 19 	lds	r30, 0x19FC	; 0x8019fc <SS80p>
   1516a:	f0 91 fd 19 	lds	r31, 0x19FD	; 0x8019fd <SS80p+0x1>
   1516e:	81 81       	ldd	r24, Z+1	; 0x01
   15170:	90 e0       	ldi	r25, 0x00	; 0
   15172:	0e 94 4a 8e 	call	0x11c94	; 0x11c94 <gpib_disable_PPR>
   15176:	18 dc       	rcall	.-2000   	; 0x149a8 <SS80_Amigo_Clear>
   15178:	18 c0       	rjmp	.+48     	; 0x151aa <SS80_COMMANDS+0x146>
   1517a:	12 37       	cpi	r17, 0x72	; 114
   1517c:	c1 f4       	brne	.+48     	; 0x151ae <SS80_COMMANDS+0x14a>
   1517e:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   15182:	90 e0       	ldi	r25, 0x00	; 0
   15184:	0e 94 11 94 	call	0x12822	; 0x12822 <SS80_is_MLA>
   15188:	89 2b       	or	r24, r25
   1518a:	89 f0       	breq	.+34     	; 0x151ae <SS80_COMMANDS+0x14a>
   1518c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15190:	85 ff       	sbrs	r24, 5
   15192:	0a c0       	rjmp	.+20     	; 0x151a8 <SS80_COMMANDS+0x144>
   15194:	83 e8       	ldi	r24, 0x83	; 131
   15196:	98 e1       	ldi	r25, 0x18	; 24
   15198:	1f 92       	push	r1
   1519a:	9f 93       	push	r25
   1519c:	8f 93       	push	r24
   1519e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   151a2:	0f 90       	pop	r0
   151a4:	0f 90       	pop	r0
   151a6:	0f 90       	pop	r0
   151a8:	53 dc       	rcall	.-1882   	; 0x14a50 <SS80_Transparent_State>
   151aa:	ec 01       	movw	r28, r24
   151ac:	3d c0       	rjmp	.+122    	; 0x15228 <SS80_COMMANDS+0x1c4>
   151ae:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
{
#ifdef ESP8266
    hspi_RX((uint8_t *) data,count);
#endif
#ifdef AVR
    SPI0_RX((uint8_t *)data,count);
   151b2:	80 ff       	sbrs	r24, 0
   151b4:	19 c0       	rjmp	.+50     	; 0x151e8 <SS80_COMMANDS+0x184>
   151b6:	80 91 49 1f 	lds	r24, 0x1F49	; 0x801f49 <talking>
   151ba:	1f 92       	push	r1
   151bc:	8f 93       	push	r24
   151be:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   151c2:	1f 92       	push	r1
   151c4:	8f 93       	push	r24
   151c6:	1f 92       	push	r1
   151c8:	1f 93       	push	r17
   151ca:	8f e4       	ldi	r24, 0x4F	; 79
   151cc:	98 e1       	ldi	r25, 0x18	; 24
   151ce:	1f 92       	push	r1
   151d0:	9f 93       	push	r25
   151d2:	8f 93       	push	r24
   151d4:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   151d8:	8d b7       	in	r24, 0x3d	; 61
   151da:	9e b7       	in	r25, 0x3e	; 62
   151dc:	09 96       	adiw	r24, 0x09	; 9
   151de:	0f b6       	in	r0, 0x3f	; 63
   151e0:	f8 94       	cli
   151e2:	9e bf       	out	0x3e, r25	; 62
   151e4:	0f be       	out	0x3f, r0	; 63
   151e6:	8d bf       	out	0x3d, r24	; 61
   151e8:	c0 e0       	ldi	r28, 0x00	; 0
   151ea:	d0 e0       	ldi	r29, 0x00	; 0
   151ec:	1d c0       	rjmp	.+58     	; 0x15228 <SS80_COMMANDS+0x1c4>
   151ee:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   151f2:	80 ff       	sbrs	r24, 0
   151f4:	f9 cf       	rjmp	.-14     	; 0x151e8 <SS80_COMMANDS+0x184>
   151f6:	80 91 49 1f 	lds	r24, 0x1F49	; 0x801f49 <talking>
   151fa:	1f 92       	push	r1
   151fc:	8f 93       	push	r24
   151fe:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   15202:	1f 92       	push	r1
   15204:	8f 93       	push	r24
   15206:	1f 92       	push	r1
   15208:	1f 93       	push	r17
   1520a:	8b e1       	ldi	r24, 0x1B	; 27
   1520c:	98 e1       	ldi	r25, 0x18	; 24
   1520e:	1f 92       	push	r1
   15210:	9f 93       	push	r25
   15212:	8f 93       	push	r24
   15214:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   15218:	8d b7       	in	r24, 0x3d	; 61
   1521a:	9e b7       	in	r25, 0x3e	; 62
   1521c:	09 96       	adiw	r24, 0x09	; 9
   1521e:	0f b6       	in	r0, 0x3f	; 63
   15220:	f8 94       	cli
   15222:	9e bf       	out	0x3e, r25	; 62
   15224:	0f be       	out	0x3f, r0	; 63
   15226:	8d bf       	out	0x3d, r24	; 61
   15228:	ce 01       	movw	r24, r28
   1522a:	df 91       	pop	r29
   1522c:	cf 91       	pop	r28
   1522e:	1f 91       	pop	r17
   15230:	08 95       	ret

00015232 <amigo_overflow_check>:
   15232:	cf 92       	push	r12
   15234:	df 92       	push	r13
   15236:	ef 92       	push	r14
   15238:	0f 93       	push	r16
   1523a:	1f 93       	push	r17
   1523c:	cf 93       	push	r28
   1523e:	df 93       	push	r29
   15240:	ec 01       	movw	r28, r24
   15242:	8b 01       	movw	r16, r22
   15244:	80 e0       	ldi	r24, 0x00	; 0
   15246:	90 e0       	ldi	r25, 0x00	; 0
   15248:	22 ef       	ldi	r18, 0xF2	; 242
   1524a:	37 e2       	ldi	r19, 0x27	; 39
   1524c:	69 01       	movw	r12, r18
   1524e:	2d 81       	ldd	r18, Y+5	; 0x05
   15250:	30 e0       	ldi	r19, 0x00	; 0
   15252:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   15256:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   1525a:	47 a1       	ldd	r20, Z+39	; 0x27
   1525c:	50 a5       	ldd	r21, Z+40	; 0x28
   1525e:	24 17       	cp	r18, r20
   15260:	35 07       	cpc	r19, r21
   15262:	7c f1       	brlt	.+94     	; 0x152c2 <amigo_overflow_check+0x90>
   15264:	1d 82       	std	Y+5, r1	; 0x05
   15266:	2c 81       	ldd	r18, Y+4	; 0x04
   15268:	2f 5f       	subi	r18, 0xFF	; 255
   1526a:	2c 83       	std	Y+4, r18	; 0x04
   1526c:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   15270:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   15274:	2c 81       	ldd	r18, Y+4	; 0x04
   15276:	30 e0       	ldi	r19, 0x00	; 0
   15278:	41 a5       	ldd	r20, Z+41	; 0x29
   1527a:	52 a5       	ldd	r21, Z+42	; 0x2a
   1527c:	24 17       	cp	r18, r20
   1527e:	35 07       	cpc	r19, r21
   15280:	34 f3       	brlt	.-52     	; 0x1524e <amigo_overflow_check+0x1c>
   15282:	1c 82       	std	Y+4, r1	; 0x04
   15284:	2b 81       	ldd	r18, Y+3	; 0x03
   15286:	2f 5f       	subi	r18, 0xFF	; 255
   15288:	2b 83       	std	Y+3, r18	; 0x03
   1528a:	30 e0       	ldi	r19, 0x00	; 0
   1528c:	43 a5       	ldd	r20, Z+43	; 0x2b
   1528e:	54 a5       	ldd	r21, Z+44	; 0x2c
   15290:	24 17       	cp	r18, r20
   15292:	35 07       	cpc	r19, r21
   15294:	5c f3       	brlt	.-42     	; 0x1526c <amigo_overflow_check+0x3a>
   15296:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1529a:	80 ff       	sbrs	r24, 0
   1529c:	0f c0       	rjmp	.+30     	; 0x152bc <amigo_overflow_check+0x8a>
   1529e:	01 15       	cp	r16, r1
   152a0:	11 05       	cpc	r17, r1
   152a2:	61 f0       	breq	.+24     	; 0x152bc <amigo_overflow_check+0x8a>
   152a4:	1f 93       	push	r17
   152a6:	0f 93       	push	r16
   152a8:	1f 92       	push	r1
   152aa:	df 92       	push	r13
   152ac:	cf 92       	push	r12
   152ae:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   152b2:	0f 90       	pop	r0
   152b4:	0f 90       	pop	r0
   152b6:	0f 90       	pop	r0
   152b8:	0f 90       	pop	r0
   152ba:	0f 90       	pop	r0
   152bc:	81 e0       	ldi	r24, 0x01	; 1
   152be:	90 e0       	ldi	r25, 0x00	; 0
   152c0:	d5 cf       	rjmp	.-86     	; 0x1526c <amigo_overflow_check+0x3a>
   152c2:	df 91       	pop	r29
   152c4:	cf 91       	pop	r28
   152c6:	1f 91       	pop	r17
   152c8:	0f 91       	pop	r16
   152ca:	ef 90       	pop	r14
   152cc:	df 90       	pop	r13
   152ce:	cf 90       	pop	r12
   152d0:	08 95       	ret

000152d2 <amigo_chs_to_logical>:
   152d2:	a0 e0       	ldi	r26, 0x00	; 0
   152d4:	b0 e0       	ldi	r27, 0x00	; 0
   152d6:	ef e6       	ldi	r30, 0x6F	; 111
   152d8:	f9 ea       	ldi	r31, 0xA9	; 169
   152da:	0c 94 3d ec 	jmp	0x1d87a	; 0x1d87a <__prologue_saves__+0x12>
   152de:	dc 01       	movw	r26, r24
   152e0:	d6 2f       	mov	r29, r22
   152e2:	17 2f       	mov	r17, r23
   152e4:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   152e8:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   152ec:	87 a1       	ldd	r24, Z+39	; 0x27
   152ee:	90 a5       	ldd	r25, Z+40	; 0x28
   152f0:	14 96       	adiw	r26, 0x04	; 4
   152f2:	cc 91       	ld	r28, X
   152f4:	14 97       	sbiw	r26, 0x04	; 4
   152f6:	c8 9f       	mul	r28, r24
   152f8:	90 01       	movw	r18, r0
   152fa:	c9 9f       	mul	r28, r25
   152fc:	30 0d       	add	r19, r0
   152fe:	11 24       	eor	r1, r1
   15300:	a9 01       	movw	r20, r18
   15302:	33 0f       	add	r19, r19
   15304:	66 0b       	sbc	r22, r22
   15306:	77 0b       	sbc	r23, r23
   15308:	13 96       	adiw	r26, 0x03	; 3
   1530a:	0c 91       	ld	r16, X
   1530c:	13 97       	sbiw	r26, 0x03	; 3
   1530e:	21 a5       	ldd	r18, Z+41	; 0x29
   15310:	32 a5       	ldd	r19, Z+42	; 0x2a
   15312:	82 9f       	mul	r24, r18
   15314:	70 01       	movw	r14, r0
   15316:	83 9f       	mul	r24, r19
   15318:	f0 0c       	add	r15, r0
   1531a:	92 9f       	mul	r25, r18
   1531c:	f0 0c       	add	r15, r0
   1531e:	11 24       	eor	r1, r1
   15320:	0e 9d       	mul	r16, r14
   15322:	90 01       	movw	r18, r0
   15324:	0f 9d       	mul	r16, r15
   15326:	30 0d       	add	r19, r0
   15328:	11 24       	eor	r1, r1
   1532a:	69 01       	movw	r12, r18
   1532c:	33 0f       	add	r19, r19
   1532e:	ee 08       	sbc	r14, r14
   15330:	ff 08       	sbc	r15, r15
   15332:	4c 0d       	add	r20, r12
   15334:	5d 1d       	adc	r21, r13
   15336:	6e 1d       	adc	r22, r14
   15338:	7f 1d       	adc	r23, r15
   1533a:	15 96       	adiw	r26, 0x05	; 5
   1533c:	bc 90       	ld	r11, X
   1533e:	9a 01       	movw	r18, r20
   15340:	ab 01       	movw	r20, r22
   15342:	2b 0d       	add	r18, r11
   15344:	31 1d       	adc	r19, r1
   15346:	41 1d       	adc	r20, r1
   15348:	51 1d       	adc	r21, r1
   1534a:	a5 a1       	ldd	r26, Z+37	; 0x25
   1534c:	b6 a1       	ldd	r27, Z+38	; 0x26
   1534e:	0e 94 1e ec 	call	0x1d83c	; 0x1d83c <__mulshisi3>
   15352:	6b 01       	movw	r12, r22
   15354:	7c 01       	movw	r14, r24
   15356:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1535a:	85 ff       	sbrs	r24, 5
   1535c:	22 c0       	rjmp	.+68     	; 0x153a2 <amigo_chs_to_logical+0xd0>
   1535e:	1f 92       	push	r1
   15360:	bf 92       	push	r11
   15362:	1f 92       	push	r1
   15364:	cf 93       	push	r28
   15366:	1f 92       	push	r1
   15368:	0f 93       	push	r16
   1536a:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   1536e:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   15372:	81 81       	ldd	r24, Z+1	; 0x01
   15374:	1f 92       	push	r1
   15376:	8f 93       	push	r24
   15378:	ff 92       	push	r15
   1537a:	ef 92       	push	r14
   1537c:	df 92       	push	r13
   1537e:	cf 92       	push	r12
   15380:	1f 93       	push	r17
   15382:	df 93       	push	r29
   15384:	8f e9       	ldi	r24, 0x9F	; 159
   15386:	97 e2       	ldi	r25, 0x27	; 39
   15388:	1f 92       	push	r1
   1538a:	9f 93       	push	r25
   1538c:	8f 93       	push	r24
   1538e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   15392:	8d b7       	in	r24, 0x3d	; 61
   15394:	9e b7       	in	r25, 0x3e	; 62
   15396:	41 96       	adiw	r24, 0x11	; 17
   15398:	0f b6       	in	r0, 0x3f	; 63
   1539a:	f8 94       	cli
   1539c:	9e bf       	out	0x3e, r25	; 62
   1539e:	0f be       	out	0x3f, r0	; 63
   153a0:	8d bf       	out	0x3d, r24	; 61
   153a2:	b6 01       	movw	r22, r12
   153a4:	c7 01       	movw	r24, r14
   153a6:	cd b7       	in	r28, 0x3d	; 61
   153a8:	de b7       	in	r29, 0x3e	; 62
   153aa:	e9 e0       	ldi	r30, 0x09	; 9
   153ac:	0c 94 59 ec 	jmp	0x1d8b2	; 0x1d8b2 <__epilogue_restores__+0x12>

000153b0 <amigo_init>:
   153b0:	ef 92       	push	r14
   153b2:	ff 92       	push	r15
   153b4:	0f 93       	push	r16
   153b6:	1f 93       	push	r17
   153b8:	cf 93       	push	r28
   153ba:	df 93       	push	r29
   153bc:	0f e4       	ldi	r16, 0x4F	; 79
   153be:	1f e1       	ldi	r17, 0x1F	; 31
   153c0:	c7 e0       	ldi	r28, 0x07	; 7
   153c2:	d0 e0       	ldi	r29, 0x00	; 0
   153c4:	84 e0       	ldi	r24, 0x04	; 4
   153c6:	f8 2e       	mov	r15, r24
   153c8:	92 e0       	ldi	r25, 0x02	; 2
   153ca:	e9 2e       	mov	r14, r25
   153cc:	d8 01       	movw	r26, r16
   153ce:	d1 96       	adiw	r26, 0x31	; 49
   153d0:	8c 91       	ld	r24, X
   153d2:	81 30       	cpi	r24, 0x01	; 1
   153d4:	31 f5       	brne	.+76     	; 0x15422 <amigo_init+0x72>
   153d6:	ce 01       	movw	r24, r28
   153d8:	0e 94 b6 b7 	call	0x16f6c	; 0x16f6c <set_active_device>
   153dc:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   153e0:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   153e4:	10 82       	st	Z, r1
   153e6:	9f 01       	movw	r18, r30
   153e8:	27 5f       	subi	r18, 0xF7	; 247
   153ea:	3f 4f       	sbci	r19, 0xFF	; 255
   153ec:	d9 01       	movw	r26, r18
   153ee:	8f 2d       	mov	r24, r15
   153f0:	1d 92       	st	X+, r1
   153f2:	8a 95       	dec	r24
   153f4:	e9 f7       	brne	.-6      	; 0x153f0 <amigo_init+0x40>
   153f6:	2c 5f       	subi	r18, 0xFC	; 252
   153f8:	3f 4f       	sbci	r19, 0xFF	; 255
   153fa:	d9 01       	movw	r26, r18
   153fc:	8f 2d       	mov	r24, r15
   153fe:	1d 92       	st	X+, r1
   15400:	8a 95       	dec	r24
   15402:	e9 f7       	brne	.-6      	; 0x153fe <amigo_init+0x4e>
   15404:	11 82       	std	Z+1, r1	; 0x01
   15406:	15 82       	std	Z+5, r1	; 0x05
   15408:	14 82       	std	Z+4, r1	; 0x04
   1540a:	13 82       	std	Z+3, r1	; 0x03
   1540c:	e6 82       	std	Z+6, r14	; 0x06
   1540e:	10 86       	std	Z+8, r1	; 0x08
   15410:	17 82       	std	Z+7, r1	; 0x07
   15412:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   15416:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   1541a:	81 81       	ldd	r24, Z+1	; 0x01
   1541c:	90 e0       	ldi	r25, 0x00	; 0
   1541e:	0e 94 4a 8e 	call	0x11c94	; 0x11c94 <gpib_disable_PPR>
   15422:	21 97       	sbiw	r28, 0x01	; 1
   15424:	07 50       	subi	r16, 0x07	; 7
   15426:	11 09       	sbc	r17, r1
   15428:	cf 3f       	cpi	r28, 0xFF	; 255
   1542a:	af ef       	ldi	r26, 0xFF	; 255
   1542c:	da 07       	cpc	r29, r26
   1542e:	71 f6       	brne	.-100    	; 0x153cc <amigo_init+0x1c>
   15430:	cd b7       	in	r28, 0x3d	; 61
   15432:	de b7       	in	r29, 0x3e	; 62
   15434:	e6 e0       	ldi	r30, 0x06	; 6
   15436:	0c 94 5c ec 	jmp	0x1d8b8	; 0x1d8b8 <__epilogue_restores__+0x18>

0001543a <amigo_request_logical_address>:
   1543a:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   1543e:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   15442:	15 86       	std	Z+13, r1	; 0x0d
   15444:	83 81       	ldd	r24, Z+3	; 0x03
   15446:	86 87       	std	Z+14, r24	; 0x0e
   15448:	84 81       	ldd	r24, Z+4	; 0x04
   1544a:	87 87       	std	Z+15, r24	; 0x0f
   1544c:	85 81       	ldd	r24, Z+5	; 0x05
   1544e:	80 8b       	std	Z+16, r24	; 0x10
   15450:	80 e0       	ldi	r24, 0x00	; 0
   15452:	90 e0       	ldi	r25, 0x00	; 0
   15454:	08 95       	ret

00015456 <amigo_request_status>:
   15456:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1545a:	85 ff       	sbrs	r24, 5
   1545c:	0a c0       	rjmp	.+20     	; 0x15472 <amigo_request_status+0x1c>
   1545e:	82 e7       	ldi	r24, 0x72	; 114
   15460:	98 e2       	ldi	r25, 0x28	; 40
   15462:	1f 92       	push	r1
   15464:	9f 93       	push	r25
   15466:	8f 93       	push	r24
   15468:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1546c:	0f 90       	pop	r0
   1546e:	0f 90       	pop	r0
   15470:	0f 90       	pop	r0
   15472:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   15476:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   1547a:	11 86       	std	Z+9, r1	; 0x09
   1547c:	81 81       	ldd	r24, Z+1	; 0x01
   1547e:	82 87       	std	Z+10, r24	; 0x0a
   15480:	8d e0       	ldi	r24, 0x0D	; 13
   15482:	83 87       	std	Z+11, r24	; 0x0b
   15484:	14 86       	std	Z+12, r1	; 0x0c
   15486:	0e 94 bf 74 	call	0xe97e	; 0xe97e <mmc_wp_status>
   1548a:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   1548e:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   15492:	89 2b       	or	r24, r25
   15494:	19 f0       	breq	.+6      	; 0x1549c <amigo_request_status+0x46>
   15496:	84 85       	ldd	r24, Z+12	; 0x0c
   15498:	80 66       	ori	r24, 0x60	; 96
   1549a:	84 87       	std	Z+12, r24	; 0x0c
   1549c:	86 81       	ldd	r24, Z+6	; 0x06
   1549e:	82 30       	cpi	r24, 0x02	; 2
   154a0:	31 f4       	brne	.+12     	; 0x154ae <amigo_request_status+0x58>
   154a2:	83 e1       	ldi	r24, 0x13	; 19
   154a4:	81 87       	std	Z+9, r24	; 0x09
   154a6:	84 85       	ldd	r24, Z+12	; 0x0c
   154a8:	88 60       	ori	r24, 0x08	; 8
   154aa:	84 87       	std	Z+12, r24	; 0x0c
   154ac:	21 c0       	rjmp	.+66     	; 0x154f0 <amigo_request_status+0x9a>
   154ae:	27 81       	ldd	r18, Z+7	; 0x07
   154b0:	30 85       	ldd	r19, Z+8	; 0x08
   154b2:	21 15       	cp	r18, r1
   154b4:	31 05       	cpc	r19, r1
   154b6:	11 f4       	brne	.+4      	; 0x154bc <amigo_request_status+0x66>
   154b8:	81 30       	cpi	r24, 0x01	; 1
   154ba:	d1 f4       	brne	.+52     	; 0x154f0 <amigo_request_status+0x9a>
   154bc:	26 fd       	sbrc	r18, 6
   154be:	0c c0       	rjmp	.+24     	; 0x154d8 <amigo_request_status+0x82>
   154c0:	25 ff       	sbrs	r18, 5
   154c2:	03 c0       	rjmp	.+6      	; 0x154ca <amigo_request_status+0x74>
   154c4:	8a e0       	ldi	r24, 0x0A	; 10
   154c6:	81 87       	std	Z+9, r24	; 0x09
   154c8:	0d c0       	rjmp	.+26     	; 0x154e4 <amigo_request_status+0x8e>
   154ca:	84 85       	ldd	r24, Z+12	; 0x0c
   154cc:	24 ff       	sbrs	r18, 4
   154ce:	02 c0       	rjmp	.+4      	; 0x154d4 <amigo_request_status+0x7e>
   154d0:	83 60       	ori	r24, 0x03	; 3
   154d2:	07 c0       	rjmp	.+14     	; 0x154e2 <amigo_request_status+0x8c>
   154d4:	21 ff       	sbrs	r18, 1
   154d6:	02 c0       	rjmp	.+4      	; 0x154dc <amigo_request_status+0x86>
   154d8:	83 e1       	ldi	r24, 0x13	; 19
   154da:	f5 cf       	rjmp	.-22     	; 0x154c6 <amigo_request_status+0x70>
   154dc:	22 ff       	sbrs	r18, 2
   154de:	02 c0       	rjmp	.+4      	; 0x154e4 <amigo_request_status+0x8e>
   154e0:	84 60       	ori	r24, 0x04	; 4
   154e2:	84 87       	std	Z+12, r24	; 0x0c
   154e4:	84 85       	ldd	r24, Z+12	; 0x0c
   154e6:	80 61       	ori	r24, 0x10	; 16
   154e8:	84 87       	std	Z+12, r24	; 0x0c
   154ea:	83 85       	ldd	r24, Z+11	; 0x0b
   154ec:	80 68       	ori	r24, 0x80	; 128
   154ee:	83 87       	std	Z+11, r24	; 0x0b
   154f0:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   154f4:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   154f8:	81 81       	ldd	r24, Z+1	; 0x01
   154fa:	90 e0       	ldi	r25, 0x00	; 0
   154fc:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <gpib_enable_PPR>
   15500:	80 e0       	ldi	r24, 0x00	; 0
   15502:	90 e0       	ldi	r25, 0x00	; 0
   15504:	08 95       	ret

00015506 <amigo_send_logical_address>:
   15506:	a2 e0       	ldi	r26, 0x02	; 2
   15508:	b0 e0       	ldi	r27, 0x00	; 0
   1550a:	e9 e8       	ldi	r30, 0x89	; 137
   1550c:	fa ea       	ldi	r31, 0xAA	; 170
   1550e:	0c 94 44 ec 	jmp	0x1d888	; 0x1d888 <__prologue_saves__+0x20>
   15512:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15516:	85 ff       	sbrs	r24, 5
   15518:	0a c0       	rjmp	.+20     	; 0x1552e <amigo_send_logical_address+0x28>
   1551a:	84 e5       	ldi	r24, 0x54	; 84
   1551c:	98 e2       	ldi	r25, 0x28	; 40
   1551e:	1f 92       	push	r1
   15520:	9f 93       	push	r25
   15522:	8f 93       	push	r24
   15524:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   15528:	0f 90       	pop	r0
   1552a:	0f 90       	pop	r0
   1552c:	0f 90       	pop	r0
   1552e:	80 e0       	ldi	r24, 0x00	; 0
   15530:	91 e0       	ldi	r25, 0x01	; 1
   15532:	9a 83       	std	Y+2, r25	; 0x02
   15534:	89 83       	std	Y+1, r24	; 0x01
   15536:	80 91 f6 19 	lds	r24, 0x19F6	; 0x8019f6 <AMIGOs>
   1553a:	90 91 f7 19 	lds	r25, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   1553e:	ae 01       	movw	r20, r28
   15540:	4f 5f       	subi	r20, 0xFF	; 255
   15542:	5f 4f       	sbci	r21, 0xFF	; 255
   15544:	64 e0       	ldi	r22, 0x04	; 4
   15546:	70 e0       	ldi	r23, 0x00	; 0
   15548:	0d 96       	adiw	r24, 0x0d	; 13
   1554a:	0e 94 69 93 	call	0x126d2	; 0x126d2 <gpib_write_str>
   1554e:	29 81       	ldd	r18, Y+1	; 0x01
   15550:	3a 81       	ldd	r19, Y+2	; 0x02
   15552:	22 27       	eor	r18, r18
   15554:	30 7d       	andi	r19, 0xD0	; 208
   15556:	23 2b       	or	r18, r19
   15558:	49 f0       	breq	.+18     	; 0x1556c <amigo_send_logical_address+0x66>
   1555a:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   1555e:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   15562:	27 81       	ldd	r18, Z+7	; 0x07
   15564:	30 85       	ldd	r19, Z+8	; 0x08
   15566:	20 62       	ori	r18, 0x20	; 32
   15568:	30 87       	std	Z+8, r19	; 0x08
   1556a:	27 83       	std	Z+7, r18	; 0x07
   1556c:	04 97       	sbiw	r24, 0x04	; 4
   1556e:	c9 f0       	breq	.+50     	; 0x155a2 <amigo_send_logical_address+0x9c>
   15570:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   15574:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   15578:	87 81       	ldd	r24, Z+7	; 0x07
   1557a:	90 85       	ldd	r25, Z+8	; 0x08
   1557c:	80 62       	ori	r24, 0x20	; 32
   1557e:	90 87       	std	Z+8, r25	; 0x08
   15580:	87 83       	std	Z+7, r24	; 0x07
   15582:	81 e0       	ldi	r24, 0x01	; 1
   15584:	86 83       	std	Z+6, r24	; 0x06
   15586:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1558a:	80 ff       	sbrs	r24, 0
   1558c:	0a c0       	rjmp	.+20     	; 0x155a2 <amigo_send_logical_address+0x9c>
   1558e:	8a e3       	ldi	r24, 0x3A	; 58
   15590:	98 e2       	ldi	r25, 0x28	; 40
   15592:	1f 92       	push	r1
   15594:	9f 93       	push	r25
   15596:	8f 93       	push	r24
   15598:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1559c:	0f 90       	pop	r0
   1559e:	0f 90       	pop	r0
   155a0:	0f 90       	pop	r0
   155a2:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   155a6:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   155aa:	81 81       	ldd	r24, Z+1	; 0x01
   155ac:	90 e0       	ldi	r25, 0x00	; 0
   155ae:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <gpib_enable_PPR>
   155b2:	89 81       	ldd	r24, Y+1	; 0x01
   155b4:	9a 81       	ldd	r25, Y+2	; 0x02
   155b6:	88 27       	eor	r24, r24
   155b8:	90 7d       	andi	r25, 0xD0	; 208
   155ba:	22 96       	adiw	r28, 0x02	; 2
   155bc:	e2 e0       	ldi	r30, 0x02	; 2
   155be:	0c 94 60 ec 	jmp	0x1d8c0	; 0x1d8c0 <__epilogue_restores__+0x20>

000155c2 <amigo_send_status>:
   155c2:	a2 e0       	ldi	r26, 0x02	; 2
   155c4:	b0 e0       	ldi	r27, 0x00	; 0
   155c6:	e7 ee       	ldi	r30, 0xE7	; 231
   155c8:	fa ea       	ldi	r31, 0xAA	; 170
   155ca:	0c 94 44 ec 	jmp	0x1d888	; 0x1d888 <__prologue_saves__+0x20>
   155ce:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   155d2:	85 ff       	sbrs	r24, 5
   155d4:	0a c0       	rjmp	.+20     	; 0x155ea <amigo_send_status+0x28>
   155d6:	85 e2       	ldi	r24, 0x25	; 37
   155d8:	98 e2       	ldi	r25, 0x28	; 40
   155da:	1f 92       	push	r1
   155dc:	9f 93       	push	r25
   155de:	8f 93       	push	r24
   155e0:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   155e4:	0f 90       	pop	r0
   155e6:	0f 90       	pop	r0
   155e8:	0f 90       	pop	r0
   155ea:	80 e0       	ldi	r24, 0x00	; 0
   155ec:	91 e0       	ldi	r25, 0x01	; 1
   155ee:	9a 83       	std	Y+2, r25	; 0x02
   155f0:	89 83       	std	Y+1, r24	; 0x01
   155f2:	80 91 f6 19 	lds	r24, 0x19F6	; 0x8019f6 <AMIGOs>
   155f6:	90 91 f7 19 	lds	r25, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   155fa:	ae 01       	movw	r20, r28
   155fc:	4f 5f       	subi	r20, 0xFF	; 255
   155fe:	5f 4f       	sbci	r21, 0xFF	; 255
   15600:	64 e0       	ldi	r22, 0x04	; 4
   15602:	70 e0       	ldi	r23, 0x00	; 0
   15604:	09 96       	adiw	r24, 0x09	; 9
   15606:	0e 94 69 93 	call	0x126d2	; 0x126d2 <gpib_write_str>
   1560a:	29 81       	ldd	r18, Y+1	; 0x01
   1560c:	3a 81       	ldd	r19, Y+2	; 0x02
   1560e:	22 27       	eor	r18, r18
   15610:	30 7d       	andi	r19, 0xD0	; 208
   15612:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   15616:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   1561a:	23 2b       	or	r18, r19
   1561c:	29 f0       	breq	.+10     	; 0x15628 <amigo_send_status+0x66>
   1561e:	27 81       	ldd	r18, Z+7	; 0x07
   15620:	30 85       	ldd	r19, Z+8	; 0x08
   15622:	20 62       	ori	r18, 0x20	; 32
   15624:	30 87       	std	Z+8, r19	; 0x08
   15626:	27 83       	std	Z+7, r18	; 0x07
   15628:	04 97       	sbiw	r24, 0x04	; 4
   1562a:	b1 f0       	breq	.+44     	; 0x15658 <amigo_send_status+0x96>
   1562c:	87 81       	ldd	r24, Z+7	; 0x07
   1562e:	90 85       	ldd	r25, Z+8	; 0x08
   15630:	80 62       	ori	r24, 0x20	; 32
   15632:	90 87       	std	Z+8, r25	; 0x08
   15634:	87 83       	std	Z+7, r24	; 0x07
   15636:	81 e0       	ldi	r24, 0x01	; 1
   15638:	86 83       	std	Z+6, r24	; 0x06
   1563a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1563e:	80 ff       	sbrs	r24, 0
   15640:	0e c0       	rjmp	.+28     	; 0x1565e <amigo_send_status+0x9c>
   15642:	8b e0       	ldi	r24, 0x0B	; 11
   15644:	98 e2       	ldi	r25, 0x28	; 40
   15646:	1f 92       	push	r1
   15648:	9f 93       	push	r25
   1564a:	8f 93       	push	r24
   1564c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   15650:	0f 90       	pop	r0
   15652:	0f 90       	pop	r0
   15654:	0f 90       	pop	r0
   15656:	03 c0       	rjmp	.+6      	; 0x1565e <amigo_send_status+0x9c>
   15658:	10 86       	std	Z+8, r1	; 0x08
   1565a:	17 82       	std	Z+7, r1	; 0x07
   1565c:	16 82       	std	Z+6, r1	; 0x06
   1565e:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   15662:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   15666:	81 81       	ldd	r24, Z+1	; 0x01
   15668:	90 e0       	ldi	r25, 0x00	; 0
   1566a:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <gpib_enable_PPR>
   1566e:	89 81       	ldd	r24, Y+1	; 0x01
   15670:	9a 81       	ldd	r25, Y+2	; 0x02
   15672:	88 27       	eor	r24, r24
   15674:	90 7d       	andi	r25, 0xD0	; 208
   15676:	22 96       	adiw	r28, 0x02	; 2
   15678:	e2 e0       	ldi	r30, 0x02	; 2
   1567a:	0c 94 60 ec 	jmp	0x1d8c0	; 0x1d8c0 <__epilogue_restores__+0x20>

0001567e <amigo_increment>:
   1567e:	a1 e1       	ldi	r26, 0x11	; 17
   15680:	b0 e0       	ldi	r27, 0x00	; 0
   15682:	e5 e4       	ldi	r30, 0x45	; 69
   15684:	fb ea       	ldi	r31, 0xAB	; 171
   15686:	0c 94 44 ec 	jmp	0x1d888	; 0x1d888 <__prologue_saves__+0x20>
   1568a:	bc 01       	movw	r22, r24
   1568c:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   15690:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   15694:	91 e1       	ldi	r25, 0x11	; 17
   15696:	de 01       	movw	r26, r28
   15698:	11 96       	adiw	r26, 0x01	; 1
   1569a:	01 90       	ld	r0, Z+
   1569c:	0d 92       	st	X+, r0
   1569e:	9a 95       	dec	r25
   156a0:	e1 f7       	brne	.-8      	; 0x1569a <amigo_increment+0x1c>
   156a2:	9e 81       	ldd	r25, Y+6	; 0x06
   156a4:	9f 5f       	subi	r25, 0xFF	; 255
   156a6:	9e 83       	std	Y+6, r25	; 0x06
   156a8:	ce 01       	movw	r24, r28
   156aa:	01 96       	adiw	r24, 0x01	; 1
   156ac:	c2 dd       	rcall	.-1148   	; 0x15232 <amigo_overflow_check>
   156ae:	00 97       	sbiw	r24, 0x00	; 0
   156b0:	59 f4       	brne	.+22     	; 0x156c8 <amigo_increment+0x4a>
   156b2:	a0 91 f6 19 	lds	r26, 0x19F6	; 0x8019f6 <AMIGOs>
   156b6:	b0 91 f7 19 	lds	r27, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   156ba:	21 e1       	ldi	r18, 0x11	; 17
   156bc:	fe 01       	movw	r30, r28
   156be:	31 96       	adiw	r30, 0x01	; 1
   156c0:	01 90       	ld	r0, Z+
   156c2:	0d 92       	st	X+, r0
   156c4:	2a 95       	dec	r18
   156c6:	e1 f7       	brne	.-8      	; 0x156c0 <amigo_increment+0x42>
   156c8:	61 96       	adiw	r28, 0x11	; 17
   156ca:	e2 e0       	ldi	r30, 0x02	; 2
   156cc:	0c 94 60 ec 	jmp	0x1d8c0	; 0x1d8c0 <__epilogue_restores__+0x20>

000156d0 <amigo_seek>:
   156d0:	0f 93       	push	r16
   156d2:	1f 93       	push	r17
   156d4:	cf 93       	push	r28
   156d6:	df 93       	push	r29
   156d8:	ec 01       	movw	r28, r24
   156da:	6a e3       	ldi	r22, 0x3A	; 58
   156dc:	73 e1       	ldi	r23, 0x13	; 19
   156de:	a9 dd       	rcall	.-1198   	; 0x15232 <amigo_overflow_check>
   156e0:	8c 01       	movw	r16, r24
   156e2:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   156e6:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   156ea:	89 2b       	or	r24, r25
   156ec:	41 f0       	breq	.+16     	; 0x156fe <amigo_seek+0x2e>
   156ee:	81 e0       	ldi	r24, 0x01	; 1
   156f0:	86 83       	std	Z+6, r24	; 0x06
   156f2:	87 81       	ldd	r24, Z+7	; 0x07
   156f4:	90 85       	ldd	r25, Z+8	; 0x08
   156f6:	84 60       	ori	r24, 0x04	; 4
   156f8:	90 87       	std	Z+8, r25	; 0x08
   156fa:	87 83       	std	Z+7, r24	; 0x07
   156fc:	06 c0       	rjmp	.+12     	; 0x1570a <amigo_seek+0x3a>
   156fe:	8d 81       	ldd	r24, Y+5	; 0x05
   15700:	85 83       	std	Z+5, r24	; 0x05
   15702:	8c 81       	ldd	r24, Y+4	; 0x04
   15704:	84 83       	std	Z+4, r24	; 0x04
   15706:	8b 81       	ldd	r24, Y+3	; 0x03
   15708:	83 83       	std	Z+3, r24	; 0x03
   1570a:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   1570e:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   15712:	81 81       	ldd	r24, Z+1	; 0x01
   15714:	90 e0       	ldi	r25, 0x00	; 0
   15716:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <gpib_enable_PPR>
   1571a:	c8 01       	movw	r24, r16
   1571c:	df 91       	pop	r29
   1571e:	cf 91       	pop	r28
   15720:	1f 91       	pop	r17
   15722:	0f 91       	pop	r16
   15724:	08 95       	ret

00015726 <amigo_verify>:
   15726:	8f 92       	push	r8
   15728:	9f 92       	push	r9
   1572a:	af 92       	push	r10
   1572c:	bf 92       	push	r11
   1572e:	ef 92       	push	r14
   15730:	ff 92       	push	r15
   15732:	0f 93       	push	r16
   15734:	1f 93       	push	r17
   15736:	cf 93       	push	r28
   15738:	df 93       	push	r29
   1573a:	7c 01       	movw	r14, r24
   1573c:	6f e3       	ldi	r22, 0x3F	; 63
   1573e:	73 e1       	ldi	r23, 0x13	; 19
   15740:	80 91 f6 19 	lds	r24, 0x19F6	; 0x8019f6 <AMIGOs>
   15744:	90 91 f7 19 	lds	r25, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   15748:	c4 dd       	rcall	.-1144   	; 0x152d2 <amigo_chs_to_logical>
   1574a:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1574e:	25 ff       	sbrs	r18, 5
   15750:	15 c0       	rjmp	.+42     	; 0x1577c <amigo_verify+0x56>
   15752:	ff 92       	push	r15
   15754:	ef 92       	push	r14
   15756:	9f 93       	push	r25
   15758:	8f 93       	push	r24
   1575a:	7f 93       	push	r23
   1575c:	6f 93       	push	r22
   1575e:	8a ec       	ldi	r24, 0xCA	; 202
   15760:	97 e2       	ldi	r25, 0x27	; 39
   15762:	1f 92       	push	r1
   15764:	9f 93       	push	r25
   15766:	8f 93       	push	r24
   15768:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1576c:	8d b7       	in	r24, 0x3d	; 61
   1576e:	9e b7       	in	r25, 0x3e	; 62
   15770:	09 96       	adiw	r24, 0x09	; 9
   15772:	0f b6       	in	r0, 0x3f	; 63
   15774:	f8 94       	cli
   15776:	9e bf       	out	0x3e, r25	; 62
   15778:	0f be       	out	0x3f, r0	; 63
   1577a:	8d bf       	out	0x3d, r24	; 61
   1577c:	e7 01       	movw	r28, r14
   1577e:	20 97       	sbiw	r28, 0x00	; 0
   15780:	09 f4       	brne	.+2      	; 0x15784 <amigo_verify+0x5e>
   15782:	49 c0       	rjmp	.+146    	; 0x15816 <amigo_verify+0xf0>
   15784:	6c e4       	ldi	r22, 0x4C	; 76
   15786:	73 e1       	ldi	r23, 0x13	; 19
   15788:	80 91 f6 19 	lds	r24, 0x19F6	; 0x8019f6 <AMIGOs>
   1578c:	90 91 f7 19 	lds	r25, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   15790:	a0 dd       	rcall	.-1216   	; 0x152d2 <amigo_chs_to_logical>
   15792:	4b 01       	movw	r8, r22
   15794:	5c 01       	movw	r10, r24
   15796:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1579a:	86 fd       	sbrc	r24, 6
   1579c:	0e 94 61 8d 	call	0x11ac2	; 0x11ac2 <gpib_timer_elapsed_begin>
   157a0:	80 91 f8 19 	lds	r24, 0x19F8	; 0x8019f8 <AMIGOp>
   157a4:	90 91 f9 19 	lds	r25, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   157a8:	e0 90 f6 19 	lds	r14, 0x19F6	; 0x8019f6 <AMIGOs>
   157ac:	f0 90 f7 19 	lds	r15, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   157b0:	e7 e0       	ldi	r30, 0x07	; 7
   157b2:	ee 0e       	add	r14, r30
   157b4:	f1 1c       	adc	r15, r1
   157b6:	fc 01       	movw	r30, r24
   157b8:	05 a1       	ldd	r16, Z+37	; 0x25
   157ba:	16 a1       	ldd	r17, Z+38	; 0x26
   157bc:	25 e4       	ldi	r18, 0x45	; 69
   157be:	3d e1       	ldi	r19, 0x1D	; 29
   157c0:	b5 01       	movw	r22, r10
   157c2:	a4 01       	movw	r20, r8
   157c4:	02 96       	adiw	r24, 0x02	; 2
   157c6:	0e 94 b3 8c 	call	0x11966	; 0x11966 <dbf_open_read>
   157ca:	7c 01       	movw	r14, r24
   157cc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   157d0:	86 ff       	sbrs	r24, 6
   157d2:	04 c0       	rjmp	.+8      	; 0x157dc <amigo_verify+0xb6>
   157d4:	84 e5       	ldi	r24, 0x54	; 84
   157d6:	9e e0       	ldi	r25, 0x0E	; 14
   157d8:	0e 94 73 8d 	call	0x11ae6	; 0x11ae6 <gpib_timer_elapsed_end>
   157dc:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   157e0:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   157e4:	85 a1       	ldd	r24, Z+37	; 0x25
   157e6:	96 a1       	ldd	r25, Z+38	; 0x26
   157e8:	e8 16       	cp	r14, r24
   157ea:	f9 06       	cpc	r15, r25
   157ec:	61 f0       	breq	.+24     	; 0x15806 <amigo_verify+0xe0>
   157ee:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   157f2:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   157f6:	81 e0       	ldi	r24, 0x01	; 1
   157f8:	86 83       	std	Z+6, r24	; 0x06
   157fa:	87 81       	ldd	r24, Z+7	; 0x07
   157fc:	90 85       	ldd	r25, Z+8	; 0x08
   157fe:	81 60       	ori	r24, 0x01	; 1
   15800:	90 87       	std	Z+8, r25	; 0x08
   15802:	87 83       	std	Z+7, r24	; 0x07
   15804:	0b c0       	rjmp	.+22     	; 0x1581c <amigo_verify+0xf6>
   15806:	84 e5       	ldi	r24, 0x54	; 84
   15808:	93 e1       	ldi	r25, 0x13	; 19
   1580a:	39 df       	rcall	.-398    	; 0x1567e <amigo_increment>
   1580c:	21 97       	sbiw	r28, 0x01	; 1
   1580e:	89 2b       	or	r24, r25
   15810:	09 f4       	brne	.+2      	; 0x15814 <amigo_verify+0xee>
   15812:	b5 cf       	rjmp	.-150    	; 0x1577e <amigo_verify+0x58>
   15814:	03 c0       	rjmp	.+6      	; 0x1581c <amigo_verify+0xf6>
   15816:	c0 e0       	ldi	r28, 0x00	; 0
   15818:	d0 e0       	ldi	r29, 0x00	; 0
   1581a:	02 c0       	rjmp	.+4      	; 0x15820 <amigo_verify+0xfa>
   1581c:	c1 e0       	ldi	r28, 0x01	; 1
   1581e:	d0 e0       	ldi	r29, 0x00	; 0
   15820:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   15824:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   15828:	81 81       	ldd	r24, Z+1	; 0x01
   1582a:	90 e0       	ldi	r25, 0x00	; 0
   1582c:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <gpib_enable_PPR>
   15830:	ce 01       	movw	r24, r28
   15832:	df 91       	pop	r29
   15834:	cf 91       	pop	r28
   15836:	1f 91       	pop	r17
   15838:	0f 91       	pop	r16
   1583a:	ff 90       	pop	r15
   1583c:	ef 90       	pop	r14
   1583e:	bf 90       	pop	r11
   15840:	af 90       	pop	r10
   15842:	9f 90       	pop	r9
   15844:	8f 90       	pop	r8
   15846:	08 95       	ret

00015848 <amigo_format>:
   15848:	ef 92       	push	r14
   1584a:	ff 92       	push	r15
   1584c:	0f 93       	push	r16
   1584e:	1f 93       	push	r17
   15850:	cf 93       	push	r28
   15852:	df 93       	push	r29
   15854:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   15858:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   1585c:	15 82       	std	Z+5, r1	; 0x05
   1585e:	14 82       	std	Z+4, r1	; 0x04
   15860:	13 82       	std	Z+3, r1	; 0x03
   15862:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   15866:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   1586a:	45 a1       	ldd	r20, Z+37	; 0x25
   1586c:	56 a1       	ldd	r21, Z+38	; 0x26
   1586e:	68 2f       	mov	r22, r24
   15870:	70 e0       	ldi	r23, 0x00	; 0
///
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
   15872:	85 e4       	ldi	r24, 0x45	; 69
   15874:	9d e1       	ldi	r25, 0x1D	; 29
   15876:	0e 94 0f f1 	call	0x1e21e	; 0x1e21e <memset>
   1587a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1587e:	85 ff       	sbrs	r24, 5
   15880:	0a c0       	rjmp	.+20     	; 0x15896 <amigo_format+0x4e>
   15882:	8f e8       	ldi	r24, 0x8F	; 143
   15884:	97 e2       	ldi	r25, 0x27	; 39
   15886:	1f 92       	push	r1
   15888:	9f 93       	push	r25
   1588a:	8f 93       	push	r24
   1588c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   15890:	0f 90       	pop	r0
   15892:	0f 90       	pop	r0
   15894:	0f 90       	pop	r0
   15896:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1589a:	86 fd       	sbrc	r24, 6
   1589c:	0e 94 61 8d 	call	0x11ac2	; 0x11ac2 <gpib_timer_elapsed_begin>
   158a0:	6b e5       	ldi	r22, 0x5B	; 91
   158a2:	73 e1       	ldi	r23, 0x13	; 19
   158a4:	80 91 f6 19 	lds	r24, 0x19F6	; 0x8019f6 <AMIGOs>
   158a8:	90 91 f7 19 	lds	r25, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   158ac:	12 dd       	rcall	.-1500   	; 0x152d2 <amigo_chs_to_logical>
   158ae:	ab 01       	movw	r20, r22
   158b0:	bc 01       	movw	r22, r24
   158b2:	80 91 f8 19 	lds	r24, 0x19F8	; 0x8019f8 <AMIGOp>
   158b6:	90 91 f9 19 	lds	r25, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   158ba:	e0 90 f6 19 	lds	r14, 0x19F6	; 0x8019f6 <AMIGOs>
   158be:	f0 90 f7 19 	lds	r15, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   158c2:	27 e0       	ldi	r18, 0x07	; 7
   158c4:	e2 0e       	add	r14, r18
   158c6:	f1 1c       	adc	r15, r1
   158c8:	fc 01       	movw	r30, r24
   158ca:	05 a1       	ldd	r16, Z+37	; 0x25
   158cc:	16 a1       	ldd	r17, Z+38	; 0x26
   158ce:	25 e4       	ldi	r18, 0x45	; 69
   158d0:	3d e1       	ldi	r19, 0x1D	; 29
   158d2:	02 96       	adiw	r24, 0x02	; 2
   158d4:	0e 94 0a 8d 	call	0x11a14	; 0x11a14 <dbf_open_write>
   158d8:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   158dc:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   158e0:	25 a1       	ldd	r18, Z+37	; 0x25
   158e2:	36 a1       	ldd	r19, Z+38	; 0x26
   158e4:	82 17       	cp	r24, r18
   158e6:	93 07       	cpc	r25, r19
   158e8:	71 f0       	breq	.+28     	; 0x15906 <amigo_format+0xbe>
   158ea:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   158ee:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   158f2:	87 81       	ldd	r24, Z+7	; 0x07
   158f4:	90 85       	ldd	r25, Z+8	; 0x08
   158f6:	82 60       	ori	r24, 0x02	; 2
   158f8:	90 87       	std	Z+8, r25	; 0x08
   158fa:	87 83       	std	Z+7, r24	; 0x07
   158fc:	81 e0       	ldi	r24, 0x01	; 1
   158fe:	86 83       	std	Z+6, r24	; 0x06
   15900:	c1 e0       	ldi	r28, 0x01	; 1
   15902:	d0 e0       	ldi	r29, 0x00	; 0
   15904:	0f c0       	rjmp	.+30     	; 0x15924 <amigo_format+0xdc>
   15906:	80 e0       	ldi	r24, 0x00	; 0
   15908:	90 e0       	ldi	r25, 0x00	; 0
   1590a:	b9 de       	rcall	.-654    	; 0x1567e <amigo_increment>
   1590c:	89 2b       	or	r24, r25
    return ( uart_rx_count( uart ) );
   1590e:	41 f2       	breq	.-112    	; 0x158a0 <amigo_format+0x58>
}
   15910:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   15914:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   15918:	15 82       	std	Z+5, r1	; 0x05
   1591a:	14 82       	std	Z+4, r1	; 0x04
   1591c:	13 82       	std	Z+3, r1	; 0x03
   1591e:	16 82       	std	Z+6, r1	; 0x06
   15920:	c0 e0       	ldi	r28, 0x00	; 0
   15922:	d0 e0       	ldi	r29, 0x00	; 0
   15924:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15928:	86 ff       	sbrs	r24, 6
   1592a:	04 c0       	rjmp	.+8      	; 0x15934 <amigo_format+0xec>
   1592c:	8b e5       	ldi	r24, 0x5B	; 91
   1592e:	93 e1       	ldi	r25, 0x13	; 19
   15930:	0e 94 73 8d 	call	0x11ae6	; 0x11ae6 <gpib_timer_elapsed_end>
   15934:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15938:	85 ff       	sbrs	r24, 5
   1593a:	0a c0       	rjmp	.+20     	; 0x15950 <amigo_format+0x108>
   1593c:	8a e7       	ldi	r24, 0x7A	; 122
   1593e:	97 e2       	ldi	r25, 0x27	; 39
   15940:	1f 92       	push	r1
   15942:	9f 93       	push	r25
   15944:	8f 93       	push	r24
   15946:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1594a:	0f 90       	pop	r0
   1594c:	0f 90       	pop	r0
   1594e:	0f 90       	pop	r0
   15950:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   15954:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   15958:	81 81       	ldd	r24, Z+1	; 0x01
   1595a:	90 e0       	ldi	r25, 0x00	; 0
   1595c:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <gpib_enable_PPR>
   15960:	ce 01       	movw	r24, r28
   15962:	cd b7       	in	r28, 0x3d	; 61
   15964:	de b7       	in	r29, 0x3e	; 62
   15966:	e6 e0       	ldi	r30, 0x06	; 6
   15968:	0c 94 5c ec 	jmp	0x1d8b8	; 0x1d8b8 <__epilogue_restores__+0x18>

0001596c <amigo_buffered_read>:
   1596c:	8f 92       	push	r8
   1596e:	9f 92       	push	r9
   15970:	af 92       	push	r10
   15972:	bf 92       	push	r11
   15974:	ef 92       	push	r14
   15976:	ff 92       	push	r15
   15978:	0f 93       	push	r16
   1597a:	1f 93       	push	r17
   1597c:	cf 93       	push	r28
   1597e:	df 93       	push	r29
   15980:	00 d0       	rcall	.+0      	; 0x15982 <amigo_buffered_read+0x16>
   15982:	cd b7       	in	r28, 0x3d	; 61
   15984:	de b7       	in	r29, 0x3e	; 62
   15986:	62 e6       	ldi	r22, 0x62	; 98
   15988:	73 e1       	ldi	r23, 0x13	; 19
   1598a:	80 91 f6 19 	lds	r24, 0x19F6	; 0x8019f6 <AMIGOs>
   1598e:	90 91 f7 19 	lds	r25, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   15992:	9f dc       	rcall	.-1730   	; 0x152d2 <amigo_chs_to_logical>
   15994:	4b 01       	movw	r8, r22
   15996:	5c 01       	movw	r10, r24
   15998:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1599c:	86 fd       	sbrc	r24, 6
   1599e:	0e 94 61 8d 	call	0x11ac2	; 0x11ac2 <gpib_timer_elapsed_begin>
   159a2:	80 91 f8 19 	lds	r24, 0x19F8	; 0x8019f8 <AMIGOp>
   159a6:	90 91 f9 19 	lds	r25, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   159aa:	e0 90 f6 19 	lds	r14, 0x19F6	; 0x8019f6 <AMIGOs>
   159ae:	f0 90 f7 19 	lds	r15, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   159b2:	27 e0       	ldi	r18, 0x07	; 7
   159b4:	e2 0e       	add	r14, r18
   159b6:	f1 1c       	adc	r15, r1
   159b8:	fc 01       	movw	r30, r24
   159ba:	05 a1       	ldd	r16, Z+37	; 0x25
   159bc:	16 a1       	ldd	r17, Z+38	; 0x26
   159be:	25 e4       	ldi	r18, 0x45	; 69
   159c0:	3d e1       	ldi	r19, 0x1D	; 29
   159c2:	b5 01       	movw	r22, r10
   159c4:	a4 01       	movw	r20, r8
   159c6:	02 96       	adiw	r24, 0x02	; 2
   159c8:	0e 94 b3 8c 	call	0x11966	; 0x11966 <dbf_open_read>
   159cc:	7c 01       	movw	r14, r24
   159ce:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   159d2:	86 ff       	sbrs	r24, 6
   159d4:	04 c0       	rjmp	.+8      	; 0x159de <amigo_buffered_read+0x72>
   159d6:	84 e5       	ldi	r24, 0x54	; 84
   159d8:	9e e0       	ldi	r25, 0x0E	; 14
   159da:	0e 94 73 8d 	call	0x11ae6	; 0x11ae6 <gpib_timer_elapsed_end>
   159de:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   159e2:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   159e6:	85 a1       	ldd	r24, Z+37	; 0x25
   159e8:	96 a1       	ldd	r25, Z+38	; 0x26
   159ea:	e8 16       	cp	r14, r24
   159ec:	f9 06       	cpc	r15, r25
   159ee:	39 f0       	breq	.+14     	; 0x159fe <amigo_buffered_read+0x92>
   159f0:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   159f4:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   159f8:	81 e0       	ldi	r24, 0x01	; 1
   159fa:	86 83       	std	Z+6, r24	; 0x06
   159fc:	6c c0       	rjmp	.+216    	; 0x15ad6 <amigo_buffered_read+0x16a>
   159fe:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15a02:	87 fd       	sbrc	r24, 7
   15a04:	0e 94 61 8d 	call	0x11ac2	; 0x11ac2 <gpib_timer_elapsed_begin>
   15a08:	80 e0       	ldi	r24, 0x00	; 0
   15a0a:	91 e0       	ldi	r25, 0x01	; 1
   15a0c:	9a 83       	std	Y+2, r25	; 0x02
   15a0e:	89 83       	std	Y+1, r24	; 0x01
   15a10:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   15a14:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   15a18:	65 a1       	ldd	r22, Z+37	; 0x25
   15a1a:	76 a1       	ldd	r23, Z+38	; 0x26
   15a1c:	ae 01       	movw	r20, r28
   15a1e:	4f 5f       	subi	r20, 0xFF	; 255
   15a20:	5f 4f       	sbci	r21, 0xFF	; 255
   15a22:	85 e4       	ldi	r24, 0x45	; 69
   15a24:	9d e1       	ldi	r25, 0x1D	; 29
   15a26:	0e 94 69 93 	call	0x126d2	; 0x126d2 <gpib_write_str>
   15a2a:	7c 01       	movw	r14, r24
   15a2c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15a30:	87 ff       	sbrs	r24, 7
   15a32:	04 c0       	rjmp	.+8      	; 0x15a3c <amigo_buffered_read+0xd0>
   15a34:	80 e7       	ldi	r24, 0x70	; 112
   15a36:	93 e1       	ldi	r25, 0x13	; 19
   15a38:	0e 94 73 8d 	call	0x11ae6	; 0x11ae6 <gpib_timer_elapsed_end>
   15a3c:	89 81       	ldd	r24, Y+1	; 0x01
   15a3e:	9a 81       	ldd	r25, Y+2	; 0x02
   15a40:	88 27       	eor	r24, r24
   15a42:	90 7d       	andi	r25, 0xD0	; 208
   15a44:	89 2b       	or	r24, r25
   15a46:	49 f4       	brne	.+18     	; 0x15a5a <amigo_buffered_read+0xee>
   15a48:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   15a4c:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   15a50:	85 a1       	ldd	r24, Z+37	; 0x25
   15a52:	96 a1       	ldd	r25, Z+38	; 0x26
   15a54:	e8 16       	cp	r14, r24
   15a56:	f9 06       	cpc	r15, r25
   15a58:	31 f1       	breq	.+76     	; 0x15aa6 <amigo_buffered_read+0x13a>
   15a5a:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   15a5e:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   15a62:	81 e0       	ldi	r24, 0x01	; 1
   15a64:	86 83       	std	Z+6, r24	; 0x06
   15a66:	87 81       	ldd	r24, Z+7	; 0x07
   15a68:	90 85       	ldd	r25, Z+8	; 0x08
   15a6a:	80 62       	ori	r24, 0x20	; 32
   15a6c:	90 87       	std	Z+8, r25	; 0x08
   15a6e:	87 83       	std	Z+7, r24	; 0x07
   15a70:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15a74:	80 ff       	sbrs	r24, 0
   15a76:	0a c0       	rjmp	.+20     	; 0x15a8c <amigo_buffered_read+0x120>
   15a78:	80 e6       	ldi	r24, 0x60	; 96
   15a7a:	97 e2       	ldi	r25, 0x27	; 39
   15a7c:	1f 92       	push	r1
   15a7e:	9f 93       	push	r25
   15a80:	8f 93       	push	r24
   15a82:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   15a86:	0f 90       	pop	r0
   15a88:	0f 90       	pop	r0
   15a8a:	0f 90       	pop	r0
   15a8c:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   15a90:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   15a94:	81 81       	ldd	r24, Z+1	; 0x01
   15a96:	90 e0       	ldi	r25, 0x00	; 0
   15a98:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <gpib_enable_PPR>
   15a9c:	89 81       	ldd	r24, Y+1	; 0x01
   15a9e:	9a 81       	ldd	r25, Y+2	; 0x02
   15aa0:	88 27       	eor	r24, r24
   15aa2:	90 7d       	andi	r25, 0xD0	; 208
   15aa4:	1a c0       	rjmp	.+52     	; 0x15ada <amigo_buffered_read+0x16e>
   15aa6:	82 e6       	ldi	r24, 0x62	; 98
   15aa8:	93 e1       	ldi	r25, 0x13	; 19
   15aaa:	e9 dd       	rcall	.-1070   	; 0x1567e <amigo_increment>
   15aac:	89 2b       	or	r24, r25
   15aae:	59 f0       	breq	.+22     	; 0x15ac6 <amigo_buffered_read+0x15a>
   15ab0:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   15ab4:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   15ab8:	81 e0       	ldi	r24, 0x01	; 1
   15aba:	86 83       	std	Z+6, r24	; 0x06
   15abc:	87 81       	ldd	r24, Z+7	; 0x07
   15abe:	90 85       	ldd	r25, Z+8	; 0x08
   15ac0:	84 60       	ori	r24, 0x04	; 4
   15ac2:	90 87       	std	Z+8, r25	; 0x08
   15ac4:	87 83       	std	Z+7, r24	; 0x07
   15ac6:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   15aca:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   15ace:	81 81       	ldd	r24, Z+1	; 0x01
   15ad0:	90 e0       	ldi	r25, 0x00	; 0
   15ad2:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <gpib_enable_PPR>
   15ad6:	80 e0       	ldi	r24, 0x00	; 0
   15ad8:	90 e0       	ldi	r25, 0x00	; 0
   15ada:	0f 90       	pop	r0
   15adc:	0f 90       	pop	r0
   15ade:	df 91       	pop	r29
   15ae0:	cf 91       	pop	r28
   15ae2:	1f 91       	pop	r17
   15ae4:	0f 91       	pop	r16
   15ae6:	ff 90       	pop	r15
   15ae8:	ef 90       	pop	r14
   15aea:	bf 90       	pop	r11
   15aec:	af 90       	pop	r10
   15aee:	9f 90       	pop	r9
   15af0:	8f 90       	pop	r8
   15af2:	08 95       	ret

00015af4 <amigo_buffered_write>:
   15af4:	8f 92       	push	r8
   15af6:	9f 92       	push	r9
   15af8:	af 92       	push	r10
   15afa:	bf 92       	push	r11
   15afc:	ef 92       	push	r14
   15afe:	ff 92       	push	r15
   15b00:	0f 93       	push	r16
   15b02:	1f 93       	push	r17
   15b04:	cf 93       	push	r28
   15b06:	df 93       	push	r29
   15b08:	00 d0       	rcall	.+0      	; 0x15b0a <amigo_buffered_write+0x16>
   15b0a:	cd b7       	in	r28, 0x3d	; 61
   15b0c:	de b7       	in	r29, 0x3e	; 62
   15b0e:	6b e7       	ldi	r22, 0x7B	; 123
   15b10:	73 e1       	ldi	r23, 0x13	; 19
   15b12:	80 91 f6 19 	lds	r24, 0x19F6	; 0x8019f6 <AMIGOs>
   15b16:	90 91 f7 19 	lds	r25, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   15b1a:	db db       	rcall	.-2122   	; 0x152d2 <amigo_chs_to_logical>
   15b1c:	4b 01       	movw	r8, r22
   15b1e:	5c 01       	movw	r10, r24
   15b20:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15b24:	87 fd       	sbrc	r24, 7
   15b26:	0e 94 61 8d 	call	0x11ac2	; 0x11ac2 <gpib_timer_elapsed_begin>
   15b2a:	1a 82       	std	Y+2, r1	; 0x02
   15b2c:	19 82       	std	Y+1, r1	; 0x01
   15b2e:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   15b32:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   15b36:	65 a1       	ldd	r22, Z+37	; 0x25
   15b38:	76 a1       	ldd	r23, Z+38	; 0x26
   15b3a:	ae 01       	movw	r20, r28
   15b3c:	4f 5f       	subi	r20, 0xFF	; 255
   15b3e:	5f 4f       	sbci	r21, 0xFF	; 255
   15b40:	85 e4       	ldi	r24, 0x45	; 69
   15b42:	9d e1       	ldi	r25, 0x1D	; 29
   15b44:	0e 94 bb 92 	call	0x12576	; 0x12576 <gpib_read_str>
   15b48:	7c 01       	movw	r14, r24
   15b4a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15b4e:	87 ff       	sbrs	r24, 7
   15b50:	04 c0       	rjmp	.+8      	; 0x15b5a <amigo_buffered_write+0x66>
   15b52:	8a e8       	ldi	r24, 0x8A	; 138
   15b54:	93 e1       	ldi	r25, 0x13	; 19
   15b56:	0e 94 73 8d 	call	0x11ae6	; 0x11ae6 <gpib_timer_elapsed_end>
   15b5a:	89 81       	ldd	r24, Y+1	; 0x01
   15b5c:	9a 81       	ldd	r25, Y+2	; 0x02
   15b5e:	88 27       	eor	r24, r24
   15b60:	90 7d       	andi	r25, 0xD0	; 208
   15b62:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   15b66:	89 2b       	or	r24, r25
   15b68:	49 f4       	brne	.+18     	; 0x15b7c <amigo_buffered_write+0x88>
   15b6a:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   15b6e:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   15b72:	85 a1       	ldd	r24, Z+37	; 0x25
   15b74:	96 a1       	ldd	r25, Z+38	; 0x26
   15b76:	e8 16       	cp	r14, r24
   15b78:	f9 06       	cpc	r15, r25
   15b7a:	c1 f0       	breq	.+48     	; 0x15bac <amigo_buffered_write+0xb8>
   15b7c:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   15b80:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   15b84:	81 e0       	ldi	r24, 0x01	; 1
   15b86:	86 83       	std	Z+6, r24	; 0x06
   15b88:	87 81       	ldd	r24, Z+7	; 0x07
   15b8a:	90 85       	ldd	r25, Z+8	; 0x08
   15b8c:	80 62       	ori	r24, 0x20	; 32
   15b8e:	90 87       	std	Z+8, r25	; 0x08
   15b90:	87 83       	std	Z+7, r24	; 0x07
   15b92:	20 ff       	sbrs	r18, 0
   15b94:	4e c0       	rjmp	.+156    	; 0x15c32 <amigo_buffered_write+0x13e>
   15b96:	81 e4       	ldi	r24, 0x41	; 65
   15b98:	97 e2       	ldi	r25, 0x27	; 39
   15b9a:	1f 92       	push	r1
   15b9c:	9f 93       	push	r25
   15b9e:	8f 93       	push	r24
   15ba0:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   15ba4:	0f 90       	pop	r0
   15ba6:	0f 90       	pop	r0
   15ba8:	0f 90       	pop	r0
   15baa:	43 c0       	rjmp	.+134    	; 0x15c32 <amigo_buffered_write+0x13e>
   15bac:	26 fd       	sbrc	r18, 6
   15bae:	0e 94 61 8d 	call	0x11ac2	; 0x11ac2 <gpib_timer_elapsed_begin>
   15bb2:	80 91 f8 19 	lds	r24, 0x19F8	; 0x8019f8 <AMIGOp>
   15bb6:	90 91 f9 19 	lds	r25, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   15bba:	e0 90 f6 19 	lds	r14, 0x19F6	; 0x8019f6 <AMIGOs>
   15bbe:	f0 90 f7 19 	lds	r15, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   15bc2:	27 e0       	ldi	r18, 0x07	; 7
   15bc4:	e2 0e       	add	r14, r18
   15bc6:	f1 1c       	adc	r15, r1
   15bc8:	fc 01       	movw	r30, r24
   15bca:	05 a1       	ldd	r16, Z+37	; 0x25
   15bcc:	16 a1       	ldd	r17, Z+38	; 0x26
   15bce:	25 e4       	ldi	r18, 0x45	; 69
   15bd0:	3d e1       	ldi	r19, 0x1D	; 29
   15bd2:	b5 01       	movw	r22, r10
   15bd4:	a4 01       	movw	r20, r8
   15bd6:	02 96       	adiw	r24, 0x02	; 2
   15bd8:	0e 94 0a 8d 	call	0x11a14	; 0x11a14 <dbf_open_write>
   15bdc:	7c 01       	movw	r14, r24
   15bde:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15be2:	86 ff       	sbrs	r24, 6
   15be4:	04 c0       	rjmp	.+8      	; 0x15bee <amigo_buffered_write+0xfa>
   15be6:	89 e4       	ldi	r24, 0x49	; 73
   15be8:	9e e0       	ldi	r25, 0x0E	; 14
   15bea:	0e 94 73 8d 	call	0x11ae6	; 0x11ae6 <gpib_timer_elapsed_end>
   15bee:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   15bf2:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   15bf6:	85 a1       	ldd	r24, Z+37	; 0x25
   15bf8:	96 a1       	ldd	r25, Z+38	; 0x26
   15bfa:	e8 16       	cp	r14, r24
   15bfc:	f9 06       	cpc	r15, r25
   15bfe:	49 f0       	breq	.+18     	; 0x15c12 <amigo_buffered_write+0x11e>
   15c00:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   15c04:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   15c08:	81 e0       	ldi	r24, 0x01	; 1
   15c0a:	86 83       	std	Z+6, r24	; 0x06
   15c0c:	80 e0       	ldi	r24, 0x00	; 0
   15c0e:	90 e0       	ldi	r25, 0x00	; 0
   15c10:	1c c0       	rjmp	.+56     	; 0x15c4a <amigo_buffered_write+0x156>
   15c12:	8b e7       	ldi	r24, 0x7B	; 123
   15c14:	93 e1       	ldi	r25, 0x13	; 19
   15c16:	33 dd       	rcall	.-1434   	; 0x1567e <amigo_increment>
   15c18:	89 2b       	or	r24, r25
   15c1a:	59 f0       	breq	.+22     	; 0x15c32 <amigo_buffered_write+0x13e>
   15c1c:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   15c20:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   15c24:	81 e0       	ldi	r24, 0x01	; 1
   15c26:	86 83       	std	Z+6, r24	; 0x06
   15c28:	87 81       	ldd	r24, Z+7	; 0x07
   15c2a:	90 85       	ldd	r25, Z+8	; 0x08
   15c2c:	84 60       	ori	r24, 0x04	; 4
   15c2e:	90 87       	std	Z+8, r25	; 0x08
   15c30:	87 83       	std	Z+7, r24	; 0x07
   15c32:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   15c36:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   15c3a:	81 81       	ldd	r24, Z+1	; 0x01
   15c3c:	90 e0       	ldi	r25, 0x00	; 0
   15c3e:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <gpib_enable_PPR>
   15c42:	89 81       	ldd	r24, Y+1	; 0x01
   15c44:	9a 81       	ldd	r25, Y+2	; 0x02
   15c46:	88 27       	eor	r24, r24
   15c48:	90 7d       	andi	r25, 0xD0	; 208
   15c4a:	0f 90       	pop	r0
   15c4c:	0f 90       	pop	r0
   15c4e:	df 91       	pop	r29
   15c50:	cf 91       	pop	r28
   15c52:	1f 91       	pop	r17
   15c54:	0f 91       	pop	r16
   15c56:	ff 90       	pop	r15
   15c58:	ef 90       	pop	r14
   15c5a:	bf 90       	pop	r11
   15c5c:	af 90       	pop	r10
   15c5e:	9f 90       	pop	r9
   15c60:	8f 90       	pop	r8
   15c62:	08 95       	ret

00015c64 <amigo_cmd_dsj>:
   15c64:	a3 e0       	ldi	r26, 0x03	; 3
   15c66:	b0 e0       	ldi	r27, 0x00	; 0
   15c68:	e8 e3       	ldi	r30, 0x38	; 56
   15c6a:	fe ea       	ldi	r31, 0xAE	; 174
   15c6c:	0c 94 44 ec 	jmp	0x1d888	; 0x1d888 <__prologue_saves__+0x20>
   15c70:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   15c74:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   15c78:	86 81       	ldd	r24, Z+6	; 0x06
   15c7a:	8b 83       	std	Y+3, r24	; 0x03
   15c7c:	80 e0       	ldi	r24, 0x00	; 0
   15c7e:	91 e0       	ldi	r25, 0x01	; 1
   15c80:	9a 83       	std	Y+2, r25	; 0x02
   15c82:	89 83       	std	Y+1, r24	; 0x01
   15c84:	ae 01       	movw	r20, r28
   15c86:	4f 5f       	subi	r20, 0xFF	; 255
   15c88:	5f 4f       	sbci	r21, 0xFF	; 255
   15c8a:	61 e0       	ldi	r22, 0x01	; 1
   15c8c:	70 e0       	ldi	r23, 0x00	; 0
   15c8e:	ce 01       	movw	r24, r28
   15c90:	03 96       	adiw	r24, 0x03	; 3
   15c92:	0e 94 69 93 	call	0x126d2	; 0x126d2 <gpib_write_str>
   15c96:	29 81       	ldd	r18, Y+1	; 0x01
   15c98:	3a 81       	ldd	r19, Y+2	; 0x02
   15c9a:	22 27       	eor	r18, r18
   15c9c:	30 7d       	andi	r19, 0xD0	; 208
   15c9e:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   15ca2:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   15ca6:	23 2b       	or	r18, r19
   15ca8:	29 f0       	breq	.+10     	; 0x15cb4 <amigo_cmd_dsj+0x50>
   15caa:	27 81       	ldd	r18, Z+7	; 0x07
   15cac:	30 85       	ldd	r19, Z+8	; 0x08
   15cae:	20 62       	ori	r18, 0x20	; 32
   15cb0:	30 87       	std	Z+8, r19	; 0x08
   15cb2:	27 83       	std	Z+7, r18	; 0x07
   15cb4:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   15cb8:	01 97       	sbiw	r24, 0x01	; 1
   15cba:	c1 f0       	breq	.+48     	; 0x15cec <amigo_cmd_dsj+0x88>
   15cbc:	81 e0       	ldi	r24, 0x01	; 1
   15cbe:	86 83       	std	Z+6, r24	; 0x06
   15cc0:	87 81       	ldd	r24, Z+7	; 0x07
   15cc2:	90 85       	ldd	r25, Z+8	; 0x08
   15cc4:	80 62       	ori	r24, 0x20	; 32
   15cc6:	90 87       	std	Z+8, r25	; 0x08
   15cc8:	87 83       	std	Z+7, r24	; 0x07
   15cca:	20 ff       	sbrs	r18, 0
   15ccc:	0a c0       	rjmp	.+20     	; 0x15ce2 <amigo_cmd_dsj+0x7e>
   15cce:	87 e2       	ldi	r24, 0x27	; 39
   15cd0:	97 e2       	ldi	r25, 0x27	; 39
   15cd2:	1f 92       	push	r1
   15cd4:	9f 93       	push	r25
   15cd6:	8f 93       	push	r24
   15cd8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   15cdc:	0f 90       	pop	r0
   15cde:	0f 90       	pop	r0
   15ce0:	0f 90       	pop	r0
   15ce2:	89 81       	ldd	r24, Y+1	; 0x01
   15ce4:	9a 81       	ldd	r25, Y+2	; 0x02
   15ce6:	88 27       	eor	r24, r24
   15ce8:	90 7d       	andi	r25, 0xD0	; 208
   15cea:	1a c0       	rjmp	.+52     	; 0x15d20 <amigo_cmd_dsj+0xbc>
   15cec:	25 ff       	sbrs	r18, 5
   15cee:	0f c0       	rjmp	.+30     	; 0x15d0e <amigo_cmd_dsj+0xaa>
   15cf0:	86 81       	ldd	r24, Z+6	; 0x06
   15cf2:	1f 92       	push	r1
   15cf4:	8f 93       	push	r24
   15cf6:	8a e1       	ldi	r24, 0x1A	; 26
   15cf8:	97 e2       	ldi	r25, 0x27	; 39
   15cfa:	1f 92       	push	r1
   15cfc:	9f 93       	push	r25
   15cfe:	8f 93       	push	r24
   15d00:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   15d04:	0f 90       	pop	r0
   15d06:	0f 90       	pop	r0
   15d08:	0f 90       	pop	r0
   15d0a:	0f 90       	pop	r0
   15d0c:	0f 90       	pop	r0
   15d0e:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   15d12:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   15d16:	16 82       	std	Z+6, r1	; 0x06
   15d18:	10 86       	std	Z+8, r1	; 0x08
   15d1a:	17 82       	std	Z+7, r1	; 0x07
   15d1c:	80 e0       	ldi	r24, 0x00	; 0
   15d1e:	90 e0       	ldi	r25, 0x00	; 0
   15d20:	23 96       	adiw	r28, 0x03	; 3
   15d22:	e2 e0       	ldi	r30, 0x02	; 2
   15d24:	0c 94 60 ec 	jmp	0x1d8c0	; 0x1d8c0 <__epilogue_restores__+0x20>

00015d28 <amigo_cmd_clear>:
   15d28:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   15d2c:	85 ff       	sbrs	r24, 5
   15d2e:	0a c0       	rjmp	.+20     	; 0x15d44 <amigo_cmd_clear+0x1c>
   15d30:	81 ee       	ldi	r24, 0xE1	; 225
   15d32:	96 e2       	ldi	r25, 0x26	; 38
   15d34:	1f 92       	push	r1
   15d36:	9f 93       	push	r25
   15d38:	8f 93       	push	r24
   15d3a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   15d3e:	0f 90       	pop	r0
   15d40:	0f 90       	pop	r0
   15d42:	0f 90       	pop	r0
   15d44:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   15d48:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   15d4c:	15 82       	std	Z+5, r1	; 0x05
   15d4e:	14 82       	std	Z+4, r1	; 0x04
   15d50:	13 82       	std	Z+3, r1	; 0x03
   15d52:	16 82       	std	Z+6, r1	; 0x06
   15d54:	10 86       	std	Z+8, r1	; 0x08
   15d56:	17 82       	std	Z+7, r1	; 0x07
   15d58:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   15d5c:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   15d60:	81 81       	ldd	r24, Z+1	; 0x01
   15d62:	90 e0       	ldi	r25, 0x00	; 0
   15d64:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <gpib_enable_PPR>
   15d68:	80 e0       	ldi	r24, 0x00	; 0
   15d6a:	90 e0       	ldi	r25, 0x00	; 0
   15d6c:	08 95       	ret

00015d6e <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   15d6e:	0f 93       	push	r16
   15d70:	1f 93       	push	r17
   15d72:	cf 93       	push	r28
   15d74:	df 93       	push	r29
   15d76:	c8 2f       	mov	r28, r24
   15d78:	d6 2f       	mov	r29, r22
   15d7a:	14 2f       	mov	r17, r20
   15d7c:	05 2f       	mov	r16, r21
    if(AMIGO_is_MLA(listening))
   15d7e:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   15d82:	90 e0       	ldi	r25, 0x00	; 0
   15d84:	0e 94 44 94 	call	0x12888	; 0x12888 <AMIGO_is_MLA>
   15d88:	20 91 49 1f 	lds	r18, 0x1F49	; 0x801f49 <talking>
   15d8c:	89 2b       	or	r24, r25
   15d8e:	19 f1       	breq	.+70     	; 0x15dd6 <amigo_todo_op+0x68>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   15d90:	1f 92       	push	r1
   15d92:	2f 93       	push	r18
   15d94:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   15d98:	1f 92       	push	r1
   15d9a:	8f 93       	push	r24
   15d9c:	0f 93       	push	r16
   15d9e:	1f 93       	push	r17
   15da0:	1f 92       	push	r1
   15da2:	df 93       	push	r29
   15da4:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   15da8:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   15dac:	80 81       	ld	r24, Z
   15dae:	1f 92       	push	r1
   15db0:	8f 93       	push	r24
   15db2:	1f 92       	push	r1
   15db4:	cf 93       	push	r28
   15db6:	8a e7       	ldi	r24, 0x7A	; 122
   15db8:	96 e2       	ldi	r25, 0x26	; 38
   15dba:	1f 92       	push	r1
   15dbc:	9f 93       	push	r25
   15dbe:	8f 93       	push	r24
   15dc0:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   15dc4:	8d b7       	in	r24, 0x3d	; 61
   15dc6:	9e b7       	in	r25, 0x3e	; 62
   15dc8:	0f 96       	adiw	r24, 0x0f	; 15
   15dca:	0f b6       	in	r0, 0x3f	; 63
   15dcc:	f8 94       	cli
   15dce:	9e bf       	out	0x3e, r25	; 62
   15dd0:	0f be       	out	0x3f, r0	; 63
   15dd2:	8d bf       	out	0x3d, r24	; 61
   15dd4:	66 c0       	rjmp	.+204    	; 0x15ea2 <amigo_todo_op+0x134>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   15dd6:	82 2f       	mov	r24, r18
   15dd8:	90 e0       	ldi	r25, 0x00	; 0
   15dda:	0e 94 55 94 	call	0x128aa	; 0x128aa <AMIGO_is_MTA>
   15dde:	30 91 4b 1f 	lds	r19, 0x1F4B	; 0x801f4b <listening>
   15de2:	20 91 49 1f 	lds	r18, 0x1F49	; 0x801f49 <talking>
   15de6:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   15dea:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   15dee:	89 2b       	or	r24, r25
   15df0:	e9 f0       	breq	.+58     	; 0x15e2c <amigo_todo_op+0xbe>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   15df2:	1f 92       	push	r1
   15df4:	2f 93       	push	r18
   15df6:	1f 92       	push	r1
   15df8:	3f 93       	push	r19
   15dfa:	0f 93       	push	r16
   15dfc:	1f 93       	push	r17
   15dfe:	1f 92       	push	r1
   15e00:	df 93       	push	r29
   15e02:	80 81       	ld	r24, Z
   15e04:	1f 92       	push	r1
   15e06:	8f 93       	push	r24
   15e08:	1f 92       	push	r1
   15e0a:	cf 93       	push	r28
   15e0c:	83 e1       	ldi	r24, 0x13	; 19
   15e0e:	96 e2       	ldi	r25, 0x26	; 38
   15e10:	1f 92       	push	r1
   15e12:	9f 93       	push	r25
   15e14:	8f 93       	push	r24
   15e16:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   15e1a:	8d b7       	in	r24, 0x3d	; 61
   15e1c:	9e b7       	in	r25, 0x3e	; 62
   15e1e:	0f 96       	adiw	r24, 0x0f	; 15
   15e20:	0f b6       	in	r0, 0x3f	; 63
   15e22:	f8 94       	cli
   15e24:	9e bf       	out	0x3e, r25	; 62
   15e26:	0f be       	out	0x3f, r0	; 63
   15e28:	8d bf       	out	0x3d, r24	; 61
   15e2a:	3b c0       	rjmp	.+118    	; 0x15ea2 <amigo_todo_op+0x134>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   15e2c:	2f 35       	cpi	r18, 0x5F	; 95
   15e2e:	e9 f4       	brne	.+58     	; 0x15e6a <amigo_todo_op+0xfc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   15e30:	1f 92       	push	r1
   15e32:	2f 93       	push	r18
   15e34:	1f 92       	push	r1
   15e36:	3f 93       	push	r19
   15e38:	0f 93       	push	r16
   15e3a:	1f 93       	push	r17
   15e3c:	1f 92       	push	r1
   15e3e:	df 93       	push	r29
   15e40:	80 81       	ld	r24, Z
   15e42:	1f 92       	push	r1
   15e44:	8f 93       	push	r24
   15e46:	1f 92       	push	r1
   15e48:	cf 93       	push	r28
   15e4a:	8c ea       	ldi	r24, 0xAC	; 172
   15e4c:	95 e2       	ldi	r25, 0x25	; 37
   15e4e:	1f 92       	push	r1
   15e50:	9f 93       	push	r25
   15e52:	8f 93       	push	r24
   15e54:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   15e58:	8d b7       	in	r24, 0x3d	; 61
   15e5a:	9e b7       	in	r25, 0x3e	; 62
   15e5c:	0f 96       	adiw	r24, 0x0f	; 15
   15e5e:	0f b6       	in	r0, 0x3f	; 63
   15e60:	f8 94       	cli
   15e62:	9e bf       	out	0x3e, r25	; 62
   15e64:	0f be       	out	0x3f, r0	; 63
   15e66:	8d bf       	out	0x3d, r24	; 61
   15e68:	1c c0       	rjmp	.+56     	; 0x15ea2 <amigo_todo_op+0x134>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   15e6a:	1f 92       	push	r1
   15e6c:	2f 93       	push	r18
   15e6e:	1f 92       	push	r1
   15e70:	3f 93       	push	r19
   15e72:	0f 93       	push	r16
   15e74:	1f 93       	push	r17
   15e76:	1f 92       	push	r1
   15e78:	df 93       	push	r29
   15e7a:	80 81       	ld	r24, Z
   15e7c:	1f 92       	push	r1
   15e7e:	8f 93       	push	r24
   15e80:	1f 92       	push	r1
   15e82:	cf 93       	push	r28
   15e84:	87 e4       	ldi	r24, 0x47	; 71
   15e86:	95 e2       	ldi	r25, 0x25	; 37
   15e88:	1f 92       	push	r1
   15e8a:	9f 93       	push	r25
   15e8c:	8f 93       	push	r24
   15e8e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   15e92:	8d b7       	in	r24, 0x3d	; 61
   15e94:	9e b7       	in	r25, 0x3e	; 62
   15e96:	0f 96       	adiw	r24, 0x0f	; 15
   15e98:	0f b6       	in	r0, 0x3f	; 63
   15e9a:	f8 94       	cli
   15e9c:	9e bf       	out	0x3e, r25	; 62
   15e9e:	0f be       	out	0x3f, r0	; 63
   15ea0:	8d bf       	out	0x3d, r24	; 61
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   15ea2:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   15ea6:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   15eaa:	81 81       	ldd	r24, Z+1	; 0x01
   15eac:	90 e0       	ldi	r25, 0x00	; 0
   15eae:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <gpib_enable_PPR>
    return(0);
}
   15eb2:	80 e0       	ldi	r24, 0x00	; 0
   15eb4:	90 e0       	ldi	r25, 0x00	; 0
   15eb6:	df 91       	pop	r29
   15eb8:	cf 91       	pop	r28
   15eba:	1f 91       	pop	r17
   15ebc:	0f 91       	pop	r16
   15ebe:	08 95       	ret

00015ec0 <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   15ec0:	cf 93       	push	r28
   15ec2:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   15ec4:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   15ec8:	90 e0       	ldi	r25, 0x00	; 0
   15eca:	0e 94 44 94 	call	0x12888	; 0x12888 <AMIGO_is_MLA>
   15ece:	20 91 49 1f 	lds	r18, 0x1F49	; 0x801f49 <talking>
   15ed2:	89 2b       	or	r24, r25
   15ed4:	f9 f0       	breq	.+62     	; 0x15f14 <amigo_todo+0x54>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   15ed6:	1f 92       	push	r1
   15ed8:	2f 93       	push	r18
   15eda:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   15ede:	1f 92       	push	r1
   15ee0:	8f 93       	push	r24
   15ee2:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   15ee6:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   15eea:	80 81       	ld	r24, Z
   15eec:	1f 92       	push	r1
   15eee:	8f 93       	push	r24
   15ef0:	1f 92       	push	r1
   15ef2:	cf 93       	push	r28
   15ef4:	87 ef       	ldi	r24, 0xF7	; 247
   15ef6:	94 e2       	ldi	r25, 0x24	; 36
   15ef8:	1f 92       	push	r1
   15efa:	9f 93       	push	r25
   15efc:	8f 93       	push	r24
   15efe:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   15f02:	8d b7       	in	r24, 0x3d	; 61
   15f04:	9e b7       	in	r25, 0x3e	; 62
   15f06:	0b 96       	adiw	r24, 0x0b	; 11
   15f08:	0f b6       	in	r0, 0x3f	; 63
   15f0a:	f8 94       	cli
   15f0c:	9e bf       	out	0x3e, r25	; 62
   15f0e:	0f be       	out	0x3f, r0	; 63
   15f10:	8d bf       	out	0x3d, r24	; 61
   15f12:	5a c0       	rjmp	.+180    	; 0x15fc8 <amigo_todo+0x108>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   15f14:	82 2f       	mov	r24, r18
   15f16:	90 e0       	ldi	r25, 0x00	; 0
   15f18:	0e 94 55 94 	call	0x128aa	; 0x128aa <AMIGO_is_MTA>
   15f1c:	30 91 4b 1f 	lds	r19, 0x1F4B	; 0x801f4b <listening>
   15f20:	20 91 49 1f 	lds	r18, 0x1F49	; 0x801f49 <talking>
   15f24:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   15f28:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   15f2c:	89 2b       	or	r24, r25
   15f2e:	c9 f0       	breq	.+50     	; 0x15f62 <amigo_todo+0xa2>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   15f30:	1f 92       	push	r1
   15f32:	2f 93       	push	r18
   15f34:	1f 92       	push	r1
   15f36:	3f 93       	push	r19
   15f38:	80 81       	ld	r24, Z
   15f3a:	1f 92       	push	r1
   15f3c:	8f 93       	push	r24
   15f3e:	1f 92       	push	r1
   15f40:	cf 93       	push	r28
   15f42:	87 ea       	ldi	r24, 0xA7	; 167
   15f44:	94 e2       	ldi	r25, 0x24	; 36
   15f46:	1f 92       	push	r1
   15f48:	9f 93       	push	r25
   15f4a:	8f 93       	push	r24
   15f4c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   15f50:	8d b7       	in	r24, 0x3d	; 61
   15f52:	9e b7       	in	r25, 0x3e	; 62
   15f54:	0b 96       	adiw	r24, 0x0b	; 11
   15f56:	0f b6       	in	r0, 0x3f	; 63
   15f58:	f8 94       	cli
   15f5a:	9e bf       	out	0x3e, r25	; 62
   15f5c:	0f be       	out	0x3f, r0	; 63
   15f5e:	8d bf       	out	0x3d, r24	; 61
   15f60:	33 c0       	rjmp	.+102    	; 0x15fc8 <amigo_todo+0x108>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   15f62:	2f 35       	cpi	r18, 0x5F	; 95
   15f64:	c9 f4       	brne	.+50     	; 0x15f98 <amigo_todo+0xd8>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   15f66:	1f 92       	push	r1
   15f68:	2f 93       	push	r18
   15f6a:	1f 92       	push	r1
   15f6c:	3f 93       	push	r19
   15f6e:	80 81       	ld	r24, Z
   15f70:	1f 92       	push	r1
   15f72:	8f 93       	push	r24
   15f74:	1f 92       	push	r1
   15f76:	cf 93       	push	r28
   15f78:	87 e5       	ldi	r24, 0x57	; 87
   15f7a:	94 e2       	ldi	r25, 0x24	; 36
   15f7c:	1f 92       	push	r1
   15f7e:	9f 93       	push	r25
   15f80:	8f 93       	push	r24
   15f82:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   15f86:	8d b7       	in	r24, 0x3d	; 61
   15f88:	9e b7       	in	r25, 0x3e	; 62
   15f8a:	0b 96       	adiw	r24, 0x0b	; 11
   15f8c:	0f b6       	in	r0, 0x3f	; 63
   15f8e:	f8 94       	cli
   15f90:	9e bf       	out	0x3e, r25	; 62
   15f92:	0f be       	out	0x3f, r0	; 63
   15f94:	8d bf       	out	0x3d, r24	; 61
   15f96:	18 c0       	rjmp	.+48     	; 0x15fc8 <amigo_todo+0x108>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   15f98:	1f 92       	push	r1
   15f9a:	2f 93       	push	r18
   15f9c:	1f 92       	push	r1
   15f9e:	3f 93       	push	r19
   15fa0:	80 81       	ld	r24, Z
   15fa2:	1f 92       	push	r1
   15fa4:	8f 93       	push	r24
   15fa6:	1f 92       	push	r1
   15fa8:	cf 93       	push	r28
   15faa:	86 e0       	ldi	r24, 0x06	; 6
   15fac:	94 e2       	ldi	r25, 0x24	; 36
   15fae:	1f 92       	push	r1
   15fb0:	9f 93       	push	r25
   15fb2:	8f 93       	push	r24
   15fb4:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   15fb8:	8d b7       	in	r24, 0x3d	; 61
   15fba:	9e b7       	in	r25, 0x3e	; 62
   15fbc:	0b 96       	adiw	r24, 0x0b	; 11
   15fbe:	0f b6       	in	r0, 0x3f	; 63
   15fc0:	f8 94       	cli
   15fc2:	9e bf       	out	0x3e, r25	; 62
   15fc4:	0f be       	out	0x3f, r0	; 63
   15fc6:	8d bf       	out	0x3d, r24	; 61
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   15fc8:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   15fcc:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   15fd0:	81 81       	ldd	r24, Z+1	; 0x01
   15fd2:	90 e0       	ldi	r25, 0x00	; 0
   15fd4:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <gpib_enable_PPR>
    return(0);
}
   15fd8:	80 e0       	ldi	r24, 0x00	; 0
   15fda:	90 e0       	ldi	r25, 0x00	; 0
   15fdc:	cf 91       	pop	r28
   15fde:	08 95       	ret

00015fe0 <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   15fe0:	8f 30       	cpi	r24, 0x0F	; 15
   15fe2:	29 f0       	breq	.+10     	; 0x15fee <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   15fe4:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   15fe8:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   15fec:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   15fee:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   15ff2:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   15ff6:	81 81       	ldd	r24, Z+1	; 0x01
   15ff8:	88 23       	and	r24, r24
   15ffa:	29 f0       	breq	.+10     	; 0x16006 <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   15ffc:	87 81       	ldd	r24, Z+7	; 0x07
   15ffe:	90 85       	ldd	r25, Z+8	; 0x08
   16000:	80 64       	ori	r24, 0x40	; 64
   16002:	90 87       	std	Z+8, r25	; 0x08
   16004:	87 83       	std	Z+7, r24	; 0x07
   16006:	08 95       	ret

00016008 <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   16008:	a3 e1       	ldi	r26, 0x13	; 19
   1600a:	b0 e0       	ldi	r27, 0x00	; 0
   1600c:	ea e0       	ldi	r30, 0x0A	; 10
   1600e:	f0 eb       	ldi	r31, 0xB0	; 176
   16010:	0c 94 40 ec 	jmp	0x1d880	; 0x1d880 <__prologue_saves__+0x18>
   16014:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & 32)
   16016:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1601a:	85 ff       	sbrs	r24, 5
   1601c:	16 c0       	rjmp	.+44     	; 0x1604a <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   1601e:	80 91 49 1f 	lds	r24, 0x1F49	; 0x801f49 <talking>
   16022:	1f 92       	push	r1
   16024:	8f 93       	push	r24
   16026:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   1602a:	1f 92       	push	r1
   1602c:	8f 93       	push	r24
   1602e:	ff 92       	push	r15
   16030:	ef 92       	push	r14
   16032:	84 ed       	ldi	r24, 0xD4	; 212
   16034:	93 e2       	ldi	r25, 0x23	; 35
   16036:	1f 92       	push	r1
   16038:	9f 93       	push	r25
   1603a:	8f 93       	push	r24
   1603c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   16040:	0f b6       	in	r0, 0x3f	; 63
   16042:	f8 94       	cli
   16044:	de bf       	out	0x3e, r29	; 62
   16046:	0f be       	out	0x3f, r0	; 63
   16048:	cd bf       	out	0x3d, r28	; 61
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   1604a:	9e e7       	ldi	r25, 0x7E	; 126
   1604c:	e9 16       	cp	r14, r25
   1604e:	f1 04       	cpc	r15, r1
   16050:	f1 f5       	brne	.+124    	; 0x160ce <Amigo_Command+0xc6>
   16052:	80 91 49 1f 	lds	r24, 0x1F49	; 0x801f49 <talking>
   16056:	90 e0       	ldi	r25, 0x00	; 0
   16058:	0e 94 55 94 	call	0x128aa	; 0x128aa <AMIGO_is_MTA>
   1605c:	89 2b       	or	r24, r25
   1605e:	09 f4       	brne	.+2      	; 0x16062 <Amigo_Command+0x5a>
   16060:	86 c0       	rjmp	.+268    	; 0x1616e <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16062:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   16066:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   1606a:	81 81       	ldd	r24, Z+1	; 0x01
   1606c:	90 e0       	ldi	r25, 0x00	; 0
   1606e:	0e 94 4a 8e 	call	0x11c94	; 0x11c94 <gpib_disable_PPR>
        status = EOI_FLAG;
   16072:	80 e0       	ldi	r24, 0x00	; 0
   16074:	91 e0       	ldi	r25, 0x01	; 1
   16076:	9b 8b       	std	Y+19, r25	; 0x13
   16078:	8a 8b       	std	Y+18, r24	; 0x12
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   1607a:	ae 01       	movw	r20, r28
   1607c:	4e 5e       	subi	r20, 0xEE	; 238
   1607e:	5f 4f       	sbci	r21, 0xFF	; 255
   16080:	60 e0       	ldi	r22, 0x00	; 0
   16082:	72 e0       	ldi	r23, 0x02	; 2
   16084:	85 e4       	ldi	r24, 0x45	; 69
   16086:	9d e1       	ldi	r25, 0x1D	; 29
   16088:	0e 94 69 93 	call	0x126d2	; 0x126d2 <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1608c:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   16090:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   16094:	81 81       	ldd	r24, Z+1	; 0x01
   16096:	90 e0       	ldi	r25, 0x00	; 0
   16098:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   1609c:	8a 89       	ldd	r24, Y+18	; 0x12
   1609e:	9b 89       	ldd	r25, Y+19	; 0x13
   160a0:	88 27       	eor	r24, r24
   160a2:	90 7d       	andi	r25, 0xD0	; 208
   160a4:	89 2b       	or	r24, r25
   160a6:	09 f4       	brne	.+2      	; 0x160aa <Amigo_Command+0xa2>
   160a8:	89 c2       	rjmp	.+1298   	; 0x165bc <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   160aa:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   160ae:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   160b2:	81 e0       	ldi	r24, 0x01	; 1
   160b4:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   160b6:	87 81       	ldd	r24, Z+7	; 0x07
   160b8:	90 85       	ldd	r25, Z+8	; 0x08
   160ba:	80 62       	ori	r24, 0x20	; 32
   160bc:	90 87       	std	Z+8, r25	; 0x08
   160be:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   160c0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   160c4:	80 ff       	sbrs	r24, 0
   160c6:	7a c2       	rjmp	.+1268   	; 0x165bc <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   160c8:	82 eb       	ldi	r24, 0xB2	; 178
   160ca:	93 e2       	ldi	r25, 0x23	; 35
   160cc:	8e c0       	rjmp	.+284    	; 0x161ea <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   160ce:	8f e7       	ldi	r24, 0x7F	; 127
   160d0:	e8 16       	cp	r14, r24
   160d2:	f1 04       	cpc	r15, r1
   160d4:	09 f0       	breq	.+2      	; 0x160d8 <Amigo_Command+0xd0>
   160d6:	4b c0       	rjmp	.+150    	; 0x1616e <Amigo_Command+0x166>
   160d8:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   160dc:	90 e0       	ldi	r25, 0x00	; 0
   160de:	0e 94 44 94 	call	0x12888	; 0x12888 <AMIGO_is_MLA>
   160e2:	89 2b       	or	r24, r25
   160e4:	09 f4       	brne	.+2      	; 0x160e8 <Amigo_Command+0xe0>
   160e6:	43 c0       	rjmp	.+134    	; 0x1616e <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   160e8:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   160ec:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   160f0:	81 81       	ldd	r24, Z+1	; 0x01
   160f2:	90 e0       	ldi	r25, 0x00	; 0
   160f4:	0e 94 4a 8e 	call	0x11c94	; 0x11c94 <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & 128)
   160f8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   160fc:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   160fe:	0e 94 61 8d 	call	0x11ac2	; 0x11ac2 <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   16102:	80 e0       	ldi	r24, 0x00	; 0
   16104:	91 e0       	ldi	r25, 0x01	; 1
   16106:	9b 8b       	std	Y+19, r25	; 0x13
   16108:	8a 8b       	std	Y+18, r24	; 0x12
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   1610a:	ae 01       	movw	r20, r28
   1610c:	4e 5e       	subi	r20, 0xEE	; 238
   1610e:	5f 4f       	sbci	r21, 0xFF	; 255
   16110:	60 e0       	ldi	r22, 0x00	; 0
   16112:	72 e0       	ldi	r23, 0x02	; 2
   16114:	85 e4       	ldi	r24, 0x45	; 69
   16116:	9d e1       	ldi	r25, 0x1D	; 29
   16118:	0e 94 bb 92 	call	0x12576	; 0x12576 <gpib_read_str>
#if SDEBUG
        if(debuglevel & 128)
   1611c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16120:	87 ff       	sbrs	r24, 7
   16122:	04 c0       	rjmp	.+8      	; 0x1612c <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read str");
   16124:	8a e8       	ldi	r24, 0x8A	; 138
   16126:	93 e1       	ldi	r25, 0x13	; 19
   16128:	0e 94 73 8d 	call	0x11ae6	; 0x11ae6 <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1612c:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   16130:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   16134:	81 81       	ldd	r24, Z+1	; 0x01
   16136:	90 e0       	ldi	r25, 0x00	; 0
   16138:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <gpib_enable_PPR>
        if(status & ERROR_MASK)
   1613c:	8a 89       	ldd	r24, Y+18	; 0x12
   1613e:	9b 89       	ldd	r25, Y+19	; 0x13
   16140:	88 27       	eor	r24, r24
   16142:	90 7d       	andi	r25, 0xD0	; 208
   16144:	89 2b       	or	r24, r25
   16146:	09 f4       	brne	.+2      	; 0x1614a <Amigo_Command+0x142>
   16148:	39 c2       	rjmp	.+1138   	; 0x165bc <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   1614a:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   1614e:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   16152:	81 e0       	ldi	r24, 0x01	; 1
   16154:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   16156:	87 81       	ldd	r24, Z+7	; 0x07
   16158:	90 85       	ldd	r25, Z+8	; 0x08
   1615a:	80 62       	ori	r24, 0x20	; 32
   1615c:	90 87       	std	Z+8, r25	; 0x08
   1615e:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   16160:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16164:	80 ff       	sbrs	r24, 0
   16166:	2a c2       	rjmp	.+1108   	; 0x165bc <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   16168:	81 e9       	ldi	r24, 0x91	; 145
   1616a:	93 e2       	ldi	r25, 0x23	; 35
   1616c:	3e c0       	rjmp	.+124    	; 0x161ea <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   1616e:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   16172:	90 e0       	ldi	r25, 0x00	; 0
   16174:	0e 94 44 94 	call	0x12888	; 0x12888 <AMIGO_is_MLA>
   16178:	89 2b       	or	r24, r25
   1617a:	19 f4       	brne	.+6      	; 0x16182 <Amigo_Command+0x17a>
        return(0);
   1617c:	80 e0       	ldi	r24, 0x00	; 0
   1617e:	90 e0       	ldi	r25, 0x00	; 0
   16180:	25 c2       	rjmp	.+1098   	; 0x165cc <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   16182:	80 91 49 1f 	lds	r24, 0x1F49	; 0x801f49 <talking>
   16186:	90 e0       	ldi	r25, 0x00	; 0
   16188:	0e 94 55 94 	call	0x128aa	; 0x128aa <AMIGO_is_MTA>
   1618c:	89 2b       	or	r24, r25
   1618e:	b1 f7       	brne	.-20     	; 0x1617c <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16190:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   16194:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   16198:	81 81       	ldd	r24, Z+1	; 0x01
   1619a:	90 e0       	ldi	r25, 0x00	; 0
   1619c:	0e 94 4a 8e 	call	0x11c94	; 0x11c94 <gpib_disable_PPR>


///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   161a0:	80 e0       	ldi	r24, 0x00	; 0
   161a2:	91 e0       	ldi	r25, 0x01	; 1
   161a4:	9b 8b       	std	Y+19, r25	; 0x13
   161a6:	8a 8b       	std	Y+18, r24	; 0x12
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   161a8:	ae 01       	movw	r20, r28
   161aa:	4e 5e       	subi	r20, 0xEE	; 238
   161ac:	5f 4f       	sbci	r21, 0xFF	; 255
   161ae:	60 e0       	ldi	r22, 0x00	; 0
   161b0:	72 e0       	ldi	r23, 0x02	; 2
   161b2:	85 e4       	ldi	r24, 0x45	; 69
   161b4:	9d e1       	ldi	r25, 0x1D	; 29
   161b6:	0e 94 bb 92 	call	0x12576	; 0x12576 <gpib_read_str>
   161ba:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   161bc:	8a 89       	ldd	r24, Y+18	; 0x12
   161be:	9b 89       	ldd	r25, Y+19	; 0x13
   161c0:	88 27       	eor	r24, r24
   161c2:	90 7d       	andi	r25, 0xD0	; 208
   161c4:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   161c8:	89 2b       	or	r24, r25
   161ca:	c1 f0       	breq	.+48     	; 0x161fc <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   161cc:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   161d0:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   161d4:	81 e0       	ldi	r24, 0x01	; 1
   161d6:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   161d8:	87 81       	ldd	r24, Z+7	; 0x07
   161da:	90 85       	ldd	r25, Z+8	; 0x08
   161dc:	80 62       	ori	r24, 0x20	; 32
   161de:	90 87       	std	Z+8, r25	; 0x08
   161e0:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & 1)
   161e2:	20 ff       	sbrs	r18, 0
   161e4:	eb c1       	rjmp	.+982    	; 0x165bc <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   161e6:	80 e7       	ldi	r24, 0x70	; 112
   161e8:	93 e2       	ldi	r25, 0x23	; 35
   161ea:	1f 92       	push	r1
   161ec:	9f 93       	push	r25
   161ee:	8f 93       	push	r24
   161f0:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   161f4:	0f 90       	pop	r0
   161f6:	0f 90       	pop	r0
   161f8:	0f 90       	pop	r0
   161fa:	e0 c1       	rjmp	.+960    	; 0x165bc <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & 32)
   161fc:	25 ff       	sbrs	r18, 5
   161fe:	10 c0       	rjmp	.+32     	; 0x16220 <Amigo_Command+0x218>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   16200:	1f 93       	push	r17
   16202:	0f 93       	push	r16
   16204:	ff 92       	push	r15
   16206:	ef 92       	push	r14
   16208:	81 e4       	ldi	r24, 0x41	; 65
   1620a:	93 e2       	ldi	r25, 0x23	; 35
   1620c:	1f 92       	push	r1
   1620e:	9f 93       	push	r25
   16210:	8f 93       	push	r24
   16212:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   16216:	0f b6       	in	r0, 0x3f	; 63
   16218:	f8 94       	cli
   1621a:	de bf       	out	0x3e, r29	; 62
   1621c:	0f be       	out	0x3f, r0	; 63
   1621e:	cd bf       	out	0x3d, r28	; 61
            secondary, len);
#endif
    if(!len)
   16220:	01 15       	cp	r16, r1
   16222:	11 05       	cpc	r17, r1
   16224:	61 f4       	brne	.+24     	; 0x1623e <Amigo_Command+0x236>
    {
        AMIGOs->dsj = 1;
   16226:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   1622a:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   1622e:	81 e0       	ldi	r24, 0x01	; 1
   16230:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   16232:	87 81       	ldd	r24, Z+7	; 0x07
   16234:	90 85       	ldd	r25, Z+8	; 0x08
   16236:	80 62       	ori	r24, 0x20	; 32
   16238:	90 87       	std	Z+8, r25	; 0x08
   1623a:	87 83       	std	Z+7, r24	; 0x07
   1623c:	bf c1       	rjmp	.+894    	; 0x165bc <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   1623e:	60 91 45 1d 	lds	r22, 0x1D45	; 0x801d45 <gpib_iobuff>

    if (secondary == 0x68)
   16242:	98 e6       	ldi	r25, 0x68	; 104
   16244:	e9 16       	cp	r14, r25
   16246:	f1 04       	cpc	r15, r1
   16248:	09 f0       	breq	.+2      	; 0x1624c <Amigo_Command+0x244>
   1624a:	28 c1       	rjmp	.+592    	; 0x1649c <Amigo_Command+0x494>
    {
        if(op == 0x00 && len == 2)
   1624c:	61 11       	cpse	r22, r1
   1624e:	2e c0       	rjmp	.+92     	; 0x162ac <Amigo_Command+0x2a4>
   16250:	02 30       	cpi	r16, 0x02	; 2
   16252:	11 05       	cpc	r17, r1
   16254:	09 f0       	breq	.+2      	; 0x16258 <Amigo_Command+0x250>
   16256:	b7 c1       	rjmp	.+878    	; 0x165c6 <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   16258:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1625c:	85 ff       	sbrs	r24, 5
   1625e:	0a c0       	rjmp	.+20     	; 0x16274 <Amigo_Command+0x26c>
                printf("[AMIGO Cold Load Read Command]\n");
   16260:	81 e2       	ldi	r24, 0x21	; 33
   16262:	93 e2       	ldi	r25, 0x23	; 35
   16264:	1f 92       	push	r1
   16266:	9f 93       	push	r25
   16268:	8f 93       	push	r24
   1626a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1626e:	0f 90       	pop	r0
   16270:	0f 90       	pop	r0
   16272:	0f 90       	pop	r0
#endif
            ///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   16274:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   16278:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   1627c:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   1627e:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   16280:	10 86       	std	Z+8, r1	; 0x08
   16282:	17 82       	std	Z+7, r1	; 0x07
            /// Fill in temparary address
            tmp.cyl = 0;
   16284:	1c 82       	std	Y+4, r1	; 0x04
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   16286:	80 91 46 1d 	lds	r24, 0x1D46	; 0x801d46 <gpib_iobuff+0x1>
   1628a:	98 2f       	mov	r25, r24
   1628c:	92 95       	swap	r25
   1628e:	96 95       	lsr	r25
   16290:	96 95       	lsr	r25
   16292:	93 70       	andi	r25, 0x03	; 3
   16294:	9d 83       	std	Y+5, r25	; 0x05
            tmp.sector = 0x3f & *ptr;
   16296:	8f 73       	andi	r24, 0x3F	; 63
   16298:	8e 83       	std	Y+6, r24	; 0x06
            ++ptr;
            //update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   1629a:	ce 01       	movw	r24, r28
   1629c:	01 96       	adiw	r24, 0x01	; 1
   1629e:	18 da       	rcall	.-3024   	; 0x156d0 <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   162a0:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   162a4:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   162a8:	85 e0       	ldi	r24, 0x05	; 5
   162aa:	5c c1       	rjmp	.+696    	; 0x16564 <Amigo_Command+0x55c>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   162ac:	62 30       	cpi	r22, 0x02	; 2
   162ae:	09 f0       	breq	.+2      	; 0x162b2 <Amigo_Command+0x2aa>
   162b0:	3f c0       	rjmp	.+126    	; 0x16330 <Amigo_Command+0x328>
   162b2:	05 30       	cpi	r16, 0x05	; 5
   162b4:	11 05       	cpc	r17, r1
   162b6:	d1 f4       	brne	.+52     	; 0x162ec <Amigo_Command+0x2e4>
/// @brief 
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   162b8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   162bc:	85 ff       	sbrs	r24, 5
   162be:	0a c0       	rjmp	.+20     	; 0x162d4 <Amigo_Command+0x2cc>
                printf("[AMIGO Seek len=5]\n");
   162c0:	8d e0       	ldi	r24, 0x0D	; 13
   162c2:	93 e2       	ldi	r25, 0x23	; 35
   162c4:	1f 92       	push	r1
   162c6:	9f 93       	push	r25
   162c8:	8f 93       	push	r24
   162ca:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   162ce:	0f 90       	pop	r0
   162d0:	0f 90       	pop	r0
   162d2:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   162d4:	80 91 46 1d 	lds	r24, 0x1D46	; 0x801d46 <gpib_iobuff+0x1>
   162d8:	83 de       	rcall	.-762    	; 0x15fe0 <amigo_check_unit>

            /// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   162da:	80 91 47 1d 	lds	r24, 0x1D47	; 0x801d47 <gpib_iobuff+0x2>
   162de:	8c 83       	std	Y+4, r24	; 0x04
            tmp.head = 0xff & *ptr++;
   162e0:	80 91 48 1d 	lds	r24, 0x1D48	; 0x801d48 <gpib_iobuff+0x3>
   162e4:	8d 83       	std	Y+5, r24	; 0x05
            tmp.sector = 0xff & *ptr++;
   162e6:	80 91 49 1d 	lds	r24, 0x1D49	; 0x801d49 <gpib_iobuff+0x4>
   162ea:	1d c0       	rjmp	.+58     	; 0x16326 <Amigo_Command+0x31e>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   162ec:	06 30       	cpi	r16, 0x06	; 6
   162ee:	11 05       	cpc	r17, r1
   162f0:	09 f0       	breq	.+2      	; 0x162f4 <Amigo_Command+0x2ec>
   162f2:	69 c1       	rjmp	.+722    	; 0x165c6 <Amigo_Command+0x5be>
/// @brief 
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   162f4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   162f8:	85 ff       	sbrs	r24, 5
   162fa:	0a c0       	rjmp	.+20     	; 0x16310 <Amigo_Command+0x308>
                printf("[AMIGO Seek len=6]\n");
   162fc:	89 ef       	ldi	r24, 0xF9	; 249
   162fe:	92 e2       	ldi	r25, 0x22	; 34
   16300:	1f 92       	push	r1
   16302:	9f 93       	push	r25
   16304:	8f 93       	push	r24
   16306:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1630a:	0f 90       	pop	r0
   1630c:	0f 90       	pop	r0
   1630e:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16310:	80 91 46 1d 	lds	r24, 0x1D46	; 0x801d46 <gpib_iobuff+0x1>
   16314:	65 de       	rcall	.-822    	; 0x15fe0 <amigo_check_unit>
            /// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   16316:	80 91 48 1d 	lds	r24, 0x1D48	; 0x801d48 <gpib_iobuff+0x3>
   1631a:	8c 83       	std	Y+4, r24	; 0x04
            tmp.head = 0xff & *ptr++;
   1631c:	80 91 49 1d 	lds	r24, 0x1D49	; 0x801d49 <gpib_iobuff+0x4>
   16320:	8d 83       	std	Y+5, r24	; 0x05
            tmp.sector = 0xff & *ptr++;
   16322:	80 91 4a 1d 	lds	r24, 0x1D4A	; 0x801d4a <gpib_iobuff+0x5>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   16326:	8e 83       	std	Y+6, r24	; 0x06
   16328:	ce 01       	movw	r24, r28
   1632a:	01 96       	adiw	r24, 0x01	; 1
   1632c:	d1 d9       	rcall	.-3166   	; 0x156d0 <amigo_seek>
   1632e:	1b c1       	rjmp	.+566    	; 0x16566 <Amigo_Command+0x55e>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   16330:	63 30       	cpi	r22, 0x03	; 3
   16332:	e9 f4       	brne	.+58     	; 0x1636e <Amigo_Command+0x366>
   16334:	02 30       	cpi	r16, 0x02	; 2
   16336:	11 05       	cpc	r17, r1
   16338:	09 f0       	breq	.+2      	; 0x1633c <Amigo_Command+0x334>
   1633a:	45 c1       	rjmp	.+650    	; 0x165c6 <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & 32)
   1633c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16340:	85 ff       	sbrs	r24, 5
   16342:	0a c0       	rjmp	.+20     	; 0x16358 <Amigo_Command+0x350>
                printf("[AMIGO Request Status Buffered Command]\n");
   16344:	80 ed       	ldi	r24, 0xD0	; 208
   16346:	92 e2       	ldi	r25, 0x22	; 34
   16348:	1f 92       	push	r1
   1634a:	9f 93       	push	r25
   1634c:	8f 93       	push	r24
   1634e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   16352:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16354:	0f 90       	pop	r0
   16356:	0f 90       	pop	r0
   16358:	80 91 46 1d 	lds	r24, 0x1D46	; 0x801d46 <gpib_iobuff+0x1>
            amigo_request_status();
   1635c:	41 de       	rcall	.-894    	; 0x15fe0 <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   1635e:	7b d8       	rcall	.-3850   	; 0x15456 <amigo_request_status>
   16360:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   16364:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   16368:	83 e0       	ldi	r24, 0x03	; 3
   1636a:	80 83       	st	Z, r24
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   1636c:	27 c1       	rjmp	.+590    	; 0x165bc <Amigo_Command+0x5b4>
   1636e:	65 30       	cpi	r22, 0x05	; 5
   16370:	d9 f4       	brne	.+54     	; 0x163a8 <Amigo_Command+0x3a0>
   16372:	02 30       	cpi	r16, 0x02	; 2
   16374:	11 05       	cpc	r17, r1
   16376:	09 f0       	breq	.+2      	; 0x1637a <Amigo_Command+0x372>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & 32)
   16378:	26 c1       	rjmp	.+588    	; 0x165c6 <Amigo_Command+0x5be>
   1637a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1637e:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Read Unbuffered Command]\n");
   16380:	0a c0       	rjmp	.+20     	; 0x16396 <Amigo_Command+0x38e>
   16382:	8f ea       	ldi	r24, 0xAF	; 175
   16384:	92 e2       	ldi	r25, 0x22	; 34
   16386:	1f 92       	push	r1
   16388:	9f 93       	push	r25
   1638a:	8f 93       	push	r24
   1638c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   16390:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16392:	0f 90       	pop	r0
   16394:	0f 90       	pop	r0
   16396:	80 91 46 1d 	lds	r24, 0x1D46	; 0x801d46 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   1639a:	22 de       	rcall	.-956    	; 0x15fe0 <amigo_check_unit>
   1639c:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   163a0:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   163a4:	86 e0       	ldi	r24, 0x06	; 6
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x07 && len == 4)
   163a6:	de c0       	rjmp	.+444    	; 0x16564 <Amigo_Command+0x55c>
   163a8:	67 30       	cpi	r22, 0x07	; 7
   163aa:	f9 f4       	brne	.+62     	; 0x163ea <Amigo_Command+0x3e2>
   163ac:	04 30       	cpi	r16, 0x04	; 4
   163ae:	11 05       	cpc	r17, r1
   163b0:	09 f0       	breq	.+2      	; 0x163b4 <Amigo_Command+0x3ac>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & 32)
   163b2:	09 c1       	rjmp	.+530    	; 0x165c6 <Amigo_Command+0x5be>
   163b4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   163b8:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Verify]\n");
   163ba:	0a c0       	rjmp	.+20     	; 0x163d0 <Amigo_Command+0x3c8>
   163bc:	8f e9       	ldi	r24, 0x9F	; 159
   163be:	92 e2       	ldi	r25, 0x22	; 34
   163c0:	1f 92       	push	r1
   163c2:	9f 93       	push	r25
   163c4:	8f 93       	push	r24
   163c6:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   163ca:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   163cc:	0f 90       	pop	r0
   163ce:	0f 90       	pop	r0
   163d0:	80 91 46 1d 	lds	r24, 0x1D46	; 0x801d46 <gpib_iobuff+0x1>
            sectors = (0xff & *ptr++) << 8;
   163d4:	05 de       	rcall	.-1014   	; 0x15fe0 <amigo_check_unit>
   163d6:	80 91 47 1d 	lds	r24, 0x1D47	; 0x801d47 <gpib_iobuff+0x2>
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   163da:	90 e0       	ldi	r25, 0x00	; 0
   163dc:	98 2f       	mov	r25, r24
   163de:	88 27       	eor	r24, r24
   163e0:	20 91 48 1d 	lds	r18, 0x1D48	; 0x801d48 <gpib_iobuff+0x3>
   163e4:	82 2b       	or	r24, r18
        }
        else if(op == 0x08 && len == 2)
   163e6:	9f d9       	rcall	.-3266   	; 0x15726 <amigo_verify>
   163e8:	f1 c0       	rjmp	.+482    	; 0x165cc <Amigo_Command+0x5c4>
   163ea:	68 30       	cpi	r22, 0x08	; 8
   163ec:	d9 f4       	brne	.+54     	; 0x16424 <Amigo_Command+0x41c>
   163ee:	02 30       	cpi	r16, 0x02	; 2
   163f0:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   163f2:	09 f0       	breq	.+2      	; 0x163f6 <Amigo_Command+0x3ee>
   163f4:	e8 c0       	rjmp	.+464    	; 0x165c6 <Amigo_Command+0x5be>
   163f6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Write Unbuffered Command]\n");
   163fa:	85 ff       	sbrs	r24, 5
   163fc:	0a c0       	rjmp	.+20     	; 0x16412 <Amigo_Command+0x40a>
   163fe:	8d e7       	ldi	r24, 0x7D	; 125
   16400:	92 e2       	ldi	r25, 0x22	; 34
   16402:	1f 92       	push	r1
   16404:	9f 93       	push	r25
   16406:	8f 93       	push	r24
   16408:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1640c:	0f 90       	pop	r0
   1640e:	0f 90       	pop	r0
   16410:	0f 90       	pop	r0
   16412:	80 91 46 1d 	lds	r24, 0x1D46	; 0x801d46 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   16416:	e4 dd       	rcall	.-1080   	; 0x15fe0 <amigo_check_unit>
   16418:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   1641c:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   16420:	88 e0       	ldi	r24, 0x08	; 8
   16422:	a0 c0       	rjmp	.+320    	; 0x16564 <Amigo_Command+0x55c>
   16424:	86 2f       	mov	r24, r22
   16426:	8f 7d       	andi	r24, 0xDF	; 223
   16428:	8b 30       	cpi	r24, 0x0B	; 11
   1642a:	d9 f4       	brne	.+54     	; 0x16462 <Amigo_Command+0x45a>
   1642c:	02 30       	cpi	r16, 0x02	; 2
   1642e:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   16430:	09 f0       	breq	.+2      	; 0x16434 <Amigo_Command+0x42c>
   16432:	c9 c0       	rjmp	.+402    	; 0x165c6 <Amigo_Command+0x5be>
   16434:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Initialize Command]\n");
   16438:	85 ff       	sbrs	r24, 5
   1643a:	0a c0       	rjmp	.+20     	; 0x16450 <Amigo_Command+0x448>
   1643c:	81 e6       	ldi	r24, 0x61	; 97
   1643e:	92 e2       	ldi	r25, 0x22	; 34
   16440:	1f 92       	push	r1
   16442:	9f 93       	push	r25
   16444:	8f 93       	push	r24
   16446:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1644a:	0f 90       	pop	r0
   1644c:	0f 90       	pop	r0
   1644e:	0f 90       	pop	r0
   16450:	80 91 46 1d 	lds	r24, 0x1D46	; 0x801d46 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_INITIALIZE;
   16454:	c5 dd       	rcall	.-1142   	; 0x15fe0 <amigo_check_unit>
   16456:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   1645a:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   1645e:	8a e0       	ldi	r24, 0x0A	; 10
   16460:	81 c0       	rjmp	.+258    	; 0x16564 <Amigo_Command+0x55c>
   16462:	64 31       	cpi	r22, 0x14	; 20
   16464:	09 f0       	breq	.+2      	; 0x16468 <Amigo_Command+0x460>
   16466:	af c0       	rjmp	.+350    	; 0x165c6 <Amigo_Command+0x5be>
   16468:	02 30       	cpi	r16, 0x02	; 2
   1646a:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   1646c:	09 f0       	breq	.+2      	; 0x16470 <Amigo_Command+0x468>
   1646e:	ab c0       	rjmp	.+342    	; 0x165c6 <Amigo_Command+0x5be>
   16470:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Request Logical Address Command]\n");
   16474:	85 ff       	sbrs	r24, 5
   16476:	0a c0       	rjmp	.+20     	; 0x1648c <Amigo_Command+0x484>
   16478:	88 e3       	ldi	r24, 0x38	; 56
   1647a:	92 e2       	ldi	r25, 0x22	; 34
   1647c:	1f 92       	push	r1
   1647e:	9f 93       	push	r25
   16480:	8f 93       	push	r24
   16482:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   16486:	0f 90       	pop	r0
#endif
            amigo_request_logical_address();
   16488:	0f 90       	pop	r0
   1648a:	0f 90       	pop	r0
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   1648c:	0e 94 1d aa 	call	0x1543a	; 0x1543a <amigo_request_logical_address>
   16490:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   16494:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   16498:	84 e0       	ldi	r24, 0x04	; 4
   1649a:	64 c0       	rjmp	.+200    	; 0x16564 <Amigo_Command+0x55c>
   1649c:	89 e6       	ldi	r24, 0x69	; 105
   1649e:	e8 16       	cp	r14, r24
    {
        if(op == 0x08 && len == 2)
   164a0:	f1 04       	cpc	r15, r1
   164a2:	f1 f4       	brne	.+60     	; 0x164e0 <Amigo_Command+0x4d8>
   164a4:	68 30       	cpi	r22, 0x08	; 8
   164a6:	09 f0       	breq	.+2      	; 0x164aa <Amigo_Command+0x4a2>
   164a8:	8e c0       	rjmp	.+284    	; 0x165c6 <Amigo_Command+0x5be>
   164aa:	02 30       	cpi	r16, 0x02	; 2
   164ac:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   164ae:	09 f0       	breq	.+2      	; 0x164b2 <Amigo_Command+0x4aa>
   164b0:	8a c0       	rjmp	.+276    	; 0x165c6 <Amigo_Command+0x5be>
   164b2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Write Buffered Command]\n");
   164b6:	85 ff       	sbrs	r24, 5
   164b8:	0a c0       	rjmp	.+20     	; 0x164ce <Amigo_Command+0x4c6>
   164ba:	88 e1       	ldi	r24, 0x18	; 24
   164bc:	92 e2       	ldi	r25, 0x22	; 34
   164be:	1f 92       	push	r1
   164c0:	9f 93       	push	r25
   164c2:	8f 93       	push	r24
   164c4:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   164c8:	0f 90       	pop	r0
   164ca:	0f 90       	pop	r0
   164cc:	0f 90       	pop	r0
   164ce:	80 91 46 1d 	lds	r24, 0x1D46	; 0x801d46 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   164d2:	86 dd       	rcall	.-1268   	; 0x15fe0 <amigo_check_unit>
   164d4:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   164d8:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   164dc:	89 e0       	ldi	r24, 0x09	; 9
   164de:	42 c0       	rjmp	.+132    	; 0x16564 <Amigo_Command+0x55c>
   164e0:	9a e6       	ldi	r25, 0x6A	; 106
   164e2:	e9 16       	cp	r14, r25
   164e4:	f1 04       	cpc	r15, r1
    {
        if(op == 0x08 && len == 2)
   164e6:	09 f0       	breq	.+2      	; 0x164ea <Amigo_Command+0x4e2>
   164e8:	47 c0       	rjmp	.+142    	; 0x16578 <Amigo_Command+0x570>
   164ea:	68 30       	cpi	r22, 0x08	; 8
   164ec:	f1 f4       	brne	.+60     	; 0x1652a <Amigo_Command+0x522>
   164ee:	02 30       	cpi	r16, 0x02	; 2
   164f0:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   164f2:	09 f0       	breq	.+2      	; 0x164f6 <Amigo_Command+0x4ee>
   164f4:	68 c0       	rjmp	.+208    	; 0x165c6 <Amigo_Command+0x5be>
   164f6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   164fa:	85 ff       	sbrs	r24, 5
   164fc:	0a c0       	rjmp	.+20     	; 0x16512 <Amigo_Command+0x50a>
   164fe:	8d ee       	ldi	r24, 0xED	; 237
   16500:	91 e2       	ldi	r25, 0x21	; 33
   16502:	1f 92       	push	r1
   16504:	9f 93       	push	r25
   16506:	8f 93       	push	r24
   16508:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1650c:	0f 90       	pop	r0
   1650e:	0f 90       	pop	r0
   16510:	0f 90       	pop	r0
   16512:	80 91 46 1d 	lds	r24, 0x1D46	; 0x801d46 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   16516:	64 dd       	rcall	.-1336   	; 0x15fe0 <amigo_check_unit>
   16518:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   1651c:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
            amigo_request_status();
   16520:	82 e0       	ldi	r24, 0x02	; 2
   16522:	80 83       	st	Z, r24
   16524:	0e 94 2b aa 	call	0x15456	; 0x15456 <amigo_request_status>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   16528:	49 c0       	rjmp	.+146    	; 0x165bc <Amigo_Command+0x5b4>
   1652a:	65 30       	cpi	r22, 0x05	; 5
   1652c:	09 f0       	breq	.+2      	; 0x16530 <Amigo_Command+0x528>
   1652e:	4b c0       	rjmp	.+150    	; 0x165c6 <Amigo_Command+0x5be>
   16530:	02 30       	cpi	r16, 0x02	; 2
   16532:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   16534:	09 f0       	breq	.+2      	; 0x16538 <Amigo_Command+0x530>
   16536:	47 c0       	rjmp	.+142    	; 0x165c6 <Amigo_Command+0x5be>
   16538:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Read Buffered Command]\n");
   1653c:	85 ff       	sbrs	r24, 5
   1653e:	0a c0       	rjmp	.+20     	; 0x16554 <Amigo_Command+0x54c>
   16540:	8e ec       	ldi	r24, 0xCE	; 206
   16542:	91 e2       	ldi	r25, 0x21	; 33
   16544:	1f 92       	push	r1
   16546:	9f 93       	push	r25
   16548:	8f 93       	push	r24
   1654a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1654e:	0f 90       	pop	r0
   16550:	0f 90       	pop	r0
   16552:	0f 90       	pop	r0
   16554:	80 91 46 1d 	lds	r24, 0x1D46	; 0x801d46 <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   16558:	43 dd       	rcall	.-1402   	; 0x15fe0 <amigo_check_unit>
   1655a:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   1655e:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   16562:	87 e0       	ldi	r24, 0x07	; 7
   16564:	80 83       	st	Z, r24
   16566:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   1656a:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   1656e:	81 81       	ldd	r24, Z+1	; 0x01
   16570:	90 e0       	ldi	r25, 0x00	; 0
   16572:	0e 94 19 8e 	call	0x11c32	; 0x11c32 <gpib_enable_PPR>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6C)
   16576:	22 c0       	rjmp	.+68     	; 0x165bc <Amigo_Command+0x5b4>
   16578:	8c e6       	ldi	r24, 0x6C	; 108
   1657a:	e8 16       	cp	r14, r24
    {
        if(op == 0x18 && len == 5)
   1657c:	f1 04       	cpc	r15, r1
   1657e:	d1 f4       	brne	.+52     	; 0x165b4 <Amigo_Command+0x5ac>
   16580:	68 31       	cpi	r22, 0x18	; 24
   16582:	09 f5       	brne	.+66     	; 0x165c6 <Amigo_Command+0x5be>
   16584:	05 30       	cpi	r16, 0x05	; 5
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & 32)
   16586:	11 05       	cpc	r17, r1
   16588:	f1 f4       	brne	.+60     	; 0x165c6 <Amigo_Command+0x5be>
   1658a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("[AMIGO Format]\n");
   1658e:	85 ff       	sbrs	r24, 5
   16590:	0a c0       	rjmp	.+20     	; 0x165a6 <Amigo_Command+0x59e>
   16592:	8e eb       	ldi	r24, 0xBE	; 190
   16594:	91 e2       	ldi	r25, 0x21	; 33
   16596:	1f 92       	push	r1
   16598:	9f 93       	push	r25
   1659a:	8f 93       	push	r24
   1659c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   165a0:	0f 90       	pop	r0
   165a2:	0f 90       	pop	r0
   165a4:	0f 90       	pop	r0
            ++ptr; // override not used
            ++ptr; // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   165a6:	80 91 46 1d 	lds	r24, 0x1D46	; 0x801d46 <gpib_iobuff+0x1>
   165aa:	1a dd       	rcall	.-1484   	; 0x15fe0 <amigo_check_unit>
   165ac:	80 91 49 1d 	lds	r24, 0x1D49	; 0x801d49 <gpib_iobuff+0x4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   165b0:	4b d9       	rcall	.-3434   	; 0x15848 <amigo_format>
   165b2:	04 c0       	rjmp	.+8      	; 0x165bc <Amigo_Command+0x5b4>
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   165b4:	90 e7       	ldi	r25, 0x70	; 112
   165b6:	e9 16       	cp	r14, r25
   165b8:	f1 04       	cpc	r15, r1
   165ba:	29 f4       	brne	.+10     	; 0x165c6 <Amigo_Command+0x5be>
   165bc:	8a 89       	ldd	r24, Y+18	; 0x12
    }
    return ( amigo_todo_op(secondary, op, len) );
   165be:	9b 89       	ldd	r25, Y+19	; 0x13
   165c0:	88 27       	eor	r24, r24
   165c2:	90 7d       	andi	r25, 0xD0	; 208
   165c4:	03 c0       	rjmp	.+6      	; 0x165cc <Amigo_Command+0x5c4>
}
   165c6:	a8 01       	movw	r20, r16
   165c8:	8e 2d       	mov	r24, r14
   165ca:	d1 db       	rcall	.-2142   	; 0x15d6e <amigo_todo_op>
   165cc:	63 96       	adiw	r28, 0x13	; 19
   165ce:	e6 e0       	ldi	r30, 0x06	; 6
   165d0:	0c 94 5c ec 	jmp	0x1d8b8	; 0x1d8b8 <__epilogue_restores__+0x18>

000165d4 <Amigo_Execute>:
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)


int Amigo_Execute( int secondary )
{
   165d4:	cf 93       	push	r28
   165d6:	df 93       	push	r29
   165d8:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & 32)
   165da:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   165de:	85 ff       	sbrs	r24, 5
   165e0:	19 c0       	rjmp	.+50     	; 0x16614 <Amigo_Execute+0x40>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   165e2:	80 91 49 1f 	lds	r24, 0x1F49	; 0x801f49 <talking>
   165e6:	1f 92       	push	r1
   165e8:	8f 93       	push	r24
   165ea:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   165ee:	1f 92       	push	r1
   165f0:	8f 93       	push	r24
   165f2:	df 93       	push	r29
   165f4:	cf 93       	push	r28
   165f6:	8c e8       	ldi	r24, 0x8C	; 140
   165f8:	91 e2       	ldi	r25, 0x21	; 33
   165fa:	1f 92       	push	r1
   165fc:	9f 93       	push	r25
   165fe:	8f 93       	push	r24
   16600:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   16604:	8d b7       	in	r24, 0x3d	; 61
   16606:	9e b7       	in	r25, 0x3e	; 62
   16608:	09 96       	adiw	r24, 0x09	; 9
   1660a:	0f b6       	in	r0, 0x3f	; 63
   1660c:	f8 94       	cli
   1660e:	9e bf       	out	0x3e, r25	; 62
   16610:	0f be       	out	0x3f, r0	; 63
   16612:	8d bf       	out	0x3d, r24	; 61
            secondary, listening, talking);
#endif

    if(talking == UNT)
   16614:	80 91 49 1f 	lds	r24, 0x1F49	; 0x801f49 <talking>
   16618:	8f 35       	cpi	r24, 0x5F	; 95
   1661a:	09 f4       	brne	.+2      	; 0x1661e <Amigo_Execute+0x4a>
   1661c:	ad c0       	rjmp	.+346    	; 0x16778 <Amigo_Execute+0x1a4>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   1661e:	90 e0       	ldi	r25, 0x00	; 0
   16620:	0e 94 55 94 	call	0x128aa	; 0x128aa <AMIGO_is_MTA>
   16624:	89 2b       	or	r24, r25
   16626:	39 f0       	breq	.+14     	; 0x16636 <Amigo_Execute+0x62>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   16628:	ce 01       	movw	r24, r28
   1662a:	87 7f       	andi	r24, 0xF7	; 247
   1662c:	80 36       	cpi	r24, 0x60	; 96
   1662e:	91 05       	cpc	r25, r1
   16630:	09 f0       	breq	.+2      	; 0x16634 <Amigo_Execute+0x60>
   16632:	a2 c0       	rjmp	.+324    	; 0x16778 <Amigo_Execute+0x1a4>
   16634:	08 c0       	rjmp	.+16     	; 0x16646 <Amigo_Execute+0x72>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   16636:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   1663a:	90 e0       	ldi	r25, 0x00	; 0
   1663c:	0e 94 44 94 	call	0x12888	; 0x12888 <AMIGO_is_MLA>
   16640:	89 2b       	or	r24, r25
   16642:	91 f7       	brne	.-28     	; 0x16628 <Amigo_Execute+0x54>
   16644:	99 c0       	rjmp	.+306    	; 0x16778 <Amigo_Execute+0x1a4>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16646:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   1664a:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   1664e:	81 81       	ldd	r24, Z+1	; 0x01
   16650:	90 e0       	ldi	r25, 0x00	; 0
   16652:	0e 94 4a 8e 	call	0x11c94	; 0x11c94 <gpib_disable_PPR>

    if(secondary == 0x60)
   16656:	c0 36       	cpi	r28, 0x60	; 96
   16658:	d1 05       	cpc	r29, r1
   1665a:	09 f0       	breq	.+2      	; 0x1665e <Amigo_Execute+0x8a>
   1665c:	4e c0       	rjmp	.+156    	; 0x166fa <Amigo_Execute+0x126>
    {
        switch(AMIGOs->state)
   1665e:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   16662:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   16666:	e0 81       	ld	r30, Z
   16668:	8e 2f       	mov	r24, r30
   1666a:	90 e0       	ldi	r25, 0x00	; 0
   1666c:	8b 30       	cpi	r24, 0x0B	; 11
   1666e:	91 05       	cpc	r25, r1
   16670:	08 f0       	brcs	.+2      	; 0x16674 <Amigo_Execute+0xa0>
   16672:	41 c0       	rjmp	.+130    	; 0x166f6 <Amigo_Execute+0x122>
   16674:	fc 01       	movw	r30, r24
   16676:	e0 53       	subi	r30, 0x30	; 48
   16678:	ff 4f       	sbci	r31, 0xFF	; 255
   1667a:	0c 94 05 ec 	jmp	0x1d80a	; 0x1d80a <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & 32)
   1667e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16682:	85 ff       	sbrs	r24, 5
   16684:	18 c0       	rjmp	.+48     	; 0x166b6 <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Cold Load Read]\n");
   16686:	8c e6       	ldi	r24, 0x6C	; 108
   16688:	91 e2       	ldi	r25, 0x21	; 33
   1668a:	0d c0       	rjmp	.+26     	; 0x166a6 <Amigo_Execute+0xd2>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   1668c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16690:	85 ff       	sbrs	r24, 5
   16692:	11 c0       	rjmp	.+34     	; 0x166b6 <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   16694:	8b e4       	ldi	r24, 0x4B	; 75
   16696:	91 e2       	ldi	r25, 0x21	; 33
   16698:	06 c0       	rjmp	.+12     	; 0x166a6 <Amigo_Execute+0xd2>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   1669a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1669e:	85 ff       	sbrs	r24, 5
   166a0:	0a c0       	rjmp	.+20     	; 0x166b6 <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Read Buffered]\n");
   166a2:	8c e2       	ldi	r24, 0x2C	; 44
   166a4:	91 e2       	ldi	r25, 0x21	; 33
   166a6:	1f 92       	push	r1
   166a8:	9f 93       	push	r25
   166aa:	8f 93       	push	r24
   166ac:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   166b0:	0f 90       	pop	r0
   166b2:	0f 90       	pop	r0
#endif
                return ( amigo_buffered_read() );
   166b4:	0f 90       	pop	r0
   166b6:	5a d9       	rcall	.-3404   	; 0x1596c <amigo_buffered_read>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   166b8:	61 c0       	rjmp	.+194    	; 0x1677c <Amigo_Execute+0x1a8>
   166ba:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   166be:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Unbuffered]\n");
   166c0:	18 c0       	rjmp	.+48     	; 0x166f2 <Amigo_Execute+0x11e>
   166c2:	8a e0       	ldi	r24, 0x0A	; 10
   166c4:	91 e2       	ldi	r25, 0x21	; 33
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & 32)
   166c6:	0d c0       	rjmp	.+26     	; 0x166e2 <Amigo_Execute+0x10e>
   166c8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   166cc:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Initialize]\n");
   166ce:	11 c0       	rjmp	.+34     	; 0x166f2 <Amigo_Execute+0x11e>
   166d0:	8e ee       	ldi	r24, 0xEE	; 238
   166d2:	90 e2       	ldi	r25, 0x20	; 32
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   166d4:	06 c0       	rjmp	.+12     	; 0x166e2 <Amigo_Execute+0x10e>
   166d6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   166da:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Buffered]\n");
   166dc:	0a c0       	rjmp	.+20     	; 0x166f2 <Amigo_Execute+0x11e>
   166de:	8e ec       	ldi	r24, 0xCE	; 206
   166e0:	90 e2       	ldi	r25, 0x20	; 32
   166e2:	1f 92       	push	r1
   166e4:	9f 93       	push	r25
   166e6:	8f 93       	push	r24
   166e8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   166ec:	0f 90       	pop	r0
#endif
                return ( amigo_buffered_write() );
   166ee:	0f 90       	pop	r0
   166f0:	0f 90       	pop	r0
   166f2:	00 da       	rcall	.-3072   	; 0x15af4 <amigo_buffered_write>
            default:
                return ( amigo_todo(secondary) );
   166f4:	43 c0       	rjmp	.+134    	; 0x1677c <Amigo_Execute+0x1a8>
   166f6:	80 e6       	ldi	r24, 0x60	; 96
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   166f8:	3d c0       	rjmp	.+122    	; 0x16774 <Amigo_Execute+0x1a0>
   166fa:	c8 36       	cpi	r28, 0x68	; 104
   166fc:	d1 05       	cpc	r29, r1
    {
        switch(AMIGOs->state)
   166fe:	e1 f5       	brne	.+120    	; 0x16778 <Amigo_Execute+0x1a4>
   16700:	e0 91 f6 19 	lds	r30, 0x19F6	; 0x8019f6 <AMIGOs>
   16704:	f0 91 f7 19 	lds	r31, 0x19F7	; 0x8019f7 <AMIGOs+0x1>
   16708:	80 81       	ld	r24, Z
   1670a:	82 30       	cpi	r24, 0x02	; 2
   1670c:	81 f0       	breq	.+32     	; 0x1672e <Amigo_Execute+0x15a>
   1670e:	18 f4       	brcc	.+6      	; 0x16716 <Amigo_Execute+0x142>
   16710:	88 23       	and	r24, r24
   16712:	91 f1       	breq	.+100    	; 0x16778 <Amigo_Execute+0x1a4>
   16714:	2e c0       	rjmp	.+92     	; 0x16772 <Amigo_Execute+0x19e>
   16716:	83 30       	cpi	r24, 0x03	; 3
   16718:	19 f0       	breq	.+6      	; 0x16720 <Amigo_Execute+0x14c>
   1671a:	84 30       	cpi	r24, 0x04	; 4
   1671c:	c9 f0       	breq	.+50     	; 0x16750 <Amigo_Execute+0x17c>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   1671e:	29 c0       	rjmp	.+82     	; 0x16772 <Amigo_Execute+0x19e>
   16720:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16724:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Status Buffered]\n");
   16726:	11 c0       	rjmp	.+34     	; 0x1674a <Amigo_Execute+0x176>
   16728:	85 ea       	ldi	r24, 0xA5	; 165
   1672a:	90 e2       	ldi	r25, 0x20	; 32
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   1672c:	06 c0       	rjmp	.+12     	; 0x1673a <Amigo_Execute+0x166>
   1672e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16732:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   16734:	0a c0       	rjmp	.+20     	; 0x1674a <Amigo_Execute+0x176>
   16736:	8a e7       	ldi	r24, 0x7A	; 122
   16738:	90 e2       	ldi	r25, 0x20	; 32
   1673a:	1f 92       	push	r1
   1673c:	9f 93       	push	r25
   1673e:	8f 93       	push	r24
   16740:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   16744:	0f 90       	pop	r0
   16746:	0f 90       	pop	r0
#endif
                return ( amigo_send_status() );
   16748:	0f 90       	pop	r0
   1674a:	0e 94 e1 aa 	call	0x155c2	; 0x155c2 <amigo_send_status>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & 32)
   1674e:	16 c0       	rjmp	.+44     	; 0x1677c <Amigo_Execute+0x1a8>
   16750:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16754:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Logical Address]\n");
   16756:	0a c0       	rjmp	.+20     	; 0x1676c <Amigo_Execute+0x198>
   16758:	81 e5       	ldi	r24, 0x51	; 81
   1675a:	90 e2       	ldi	r25, 0x20	; 32
   1675c:	1f 92       	push	r1
   1675e:	9f 93       	push	r25
   16760:	8f 93       	push	r24
   16762:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   16766:	0f 90       	pop	r0
   16768:	0f 90       	pop	r0
#endif
                return ( amigo_send_logical_address() );
   1676a:	0f 90       	pop	r0
   1676c:	0e 94 83 aa 	call	0x15506	; 0x15506 <amigo_send_logical_address>
            default:
                return ( amigo_todo(secondary) );
   16770:	05 c0       	rjmp	.+10     	; 0x1677c <Amigo_Execute+0x1a8>
   16772:	88 e6       	ldi	r24, 0x68	; 104
   16774:	a5 db       	rcall	.-2230   	; 0x15ec0 <amigo_todo>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   16776:	02 c0       	rjmp	.+4      	; 0x1677c <Amigo_Execute+0x1a8>
   16778:	80 e0       	ldi	r24, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   1677a:	90 e0       	ldi	r25, 0x00	; 0
   1677c:	df 91       	pop	r29
   1677e:	cf 91       	pop	r28
   16780:	08 95       	ret

00016782 <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   16782:	cf 93       	push	r28
   16784:	df 93       	push	r29
   16786:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   16788:	80 91 49 1f 	lds	r24, 0x1F49	; 0x801f49 <talking>
   1678c:	90 e0       	ldi	r25, 0x00	; 0
   1678e:	0e 94 55 94 	call	0x128aa	; 0x128aa <AMIGO_is_MTA>
   16792:	89 2b       	or	r24, r25
   16794:	51 f0       	breq	.+20     	; 0x167aa <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   16796:	80 91 49 1f 	lds	r24, 0x1F49	; 0x801f49 <talking>
   1679a:	8f 35       	cpi	r24, 0x5F	; 95
   1679c:	71 f4       	brne	.+28     	; 0x167ba <AMIGO_COMMANDS+0x38>
   1679e:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   167a2:	90 e0       	ldi	r25, 0x00	; 0
   167a4:	0e 94 44 94 	call	0x12888	; 0x12888 <AMIGO_is_MLA>
   167a8:	08 c0       	rjmp	.+16     	; 0x167ba <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   167aa:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   167ae:	90 e0       	ldi	r25, 0x00	; 0
   167b0:	0e 94 44 94 	call	0x12888	; 0x12888 <AMIGO_is_MLA>
   167b4:	89 2b       	or	r24, r25
   167b6:	79 f7       	brne	.-34     	; 0x16796 <AMIGO_COMMANDS+0x14>
   167b8:	76 c0       	rjmp	.+236    	; 0x168a6 <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
            // printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   167ba:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   167be:	81 11       	cpse	r24, r1
   167c0:	05 c0       	rjmp	.+10     	; 0x167cc <AMIGO_COMMANDS+0x4a>
   167c2:	80 91 49 1f 	lds	r24, 0x1F49	; 0x801f49 <talking>
   167c6:	90 e0       	ldi	r25, 0x00	; 0
   167c8:	0e 94 55 94 	call	0x128aa	; 0x128aa <AMIGO_is_MTA>
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   167cc:	c0 36       	cpi	r28, 0x60	; 96
   167ce:	99 f4       	brne	.+38     	; 0x167f6 <AMIGO_COMMANDS+0x74>
   167d0:	80 91 49 1f 	lds	r24, 0x1F49	; 0x801f49 <talking>
   167d4:	90 e0       	ldi	r25, 0x00	; 0
   167d6:	0e 94 55 94 	call	0x128aa	; 0x128aa <AMIGO_is_MTA>
   167da:	89 2b       	or	r24, r25
   167dc:	19 f0       	breq	.+6      	; 0x167e4 <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   167de:	80 e6       	ldi	r24, 0x60	; 96
   167e0:	90 e0       	ldi	r25, 0x00	; 0
   167e2:	14 c0       	rjmp	.+40     	; 0x1680c <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   167e4:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   167e8:	90 e0       	ldi	r25, 0x00	; 0
   167ea:	0e 94 44 94 	call	0x12888	; 0x12888 <AMIGO_is_MLA>
   167ee:	89 2b       	or	r24, r25
   167f0:	09 f4       	brne	.+2      	; 0x167f4 <AMIGO_COMMANDS+0x72>
   167f2:	59 c0       	rjmp	.+178    	; 0x168a6 <AMIGO_COMMANDS+0x124>
   167f4:	f4 cf       	rjmp	.-24     	; 0x167de <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   167f6:	c8 36       	cpi	r28, 0x68	; 104
   167f8:	c1 f4       	brne	.+48     	; 0x1682a <AMIGO_COMMANDS+0xa8>
   167fa:	80 91 49 1f 	lds	r24, 0x1F49	; 0x801f49 <talking>
   167fe:	90 e0       	ldi	r25, 0x00	; 0
   16800:	0e 94 55 94 	call	0x128aa	; 0x128aa <AMIGO_is_MTA>
   16804:	89 2b       	or	r24, r25
   16806:	21 f0       	breq	.+8      	; 0x16810 <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   16808:	88 e6       	ldi	r24, 0x68	; 104
   1680a:	90 e0       	ldi	r25, 0x00	; 0
   1680c:	e3 de       	rcall	.-570    	; 0x165d4 <Amigo_Execute>
   1680e:	0b c0       	rjmp	.+22     	; 0x16826 <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
   16810:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   16814:	90 e0       	ldi	r25, 0x00	; 0
   16816:	0e 94 44 94 	call	0x12888	; 0x12888 <AMIGO_is_MLA>
   1681a:	89 2b       	or	r24, r25
   1681c:	09 f4       	brne	.+2      	; 0x16820 <AMIGO_COMMANDS+0x9e>
   1681e:	43 c0       	rjmp	.+134    	; 0x168a6 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   16820:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
   16822:	90 e0       	ldi	r25, 0x00	; 0
   16824:	f1 db       	rcall	.-2078   	; 0x16008 <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   16826:	ec 01       	movw	r28, r24
   16828:	40 c0       	rjmp	.+128    	; 0x168aa <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) ) // Single byte command
   1682a:	c9 36       	cpi	r28, 0x69	; 105
   1682c:	51 f4       	brne	.+20     	; 0x16842 <AMIGO_COMMANDS+0xc0>
   1682e:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   16832:	90 e0       	ldi	r25, 0x00	; 0
   16834:	0e 94 44 94 	call	0x12888	; 0x12888 <AMIGO_is_MLA>
   16838:	89 2b       	or	r24, r25
   1683a:	a9 f1       	breq	.+106    	; 0x168a6 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   1683c:	89 e6       	ldi	r24, 0x69	; 105
   1683e:	90 e0       	ldi	r25, 0x00	; 0
   16840:	f1 cf       	rjmp	.-30     	; 0x16824 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) ) // Single byte command
   16842:	ca 36       	cpi	r28, 0x6A	; 106
   16844:	51 f4       	brne	.+20     	; 0x1685a <AMIGO_COMMANDS+0xd8>
   16846:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   1684a:	90 e0       	ldi	r25, 0x00	; 0
   1684c:	0e 94 44 94 	call	0x12888	; 0x12888 <AMIGO_is_MLA>
   16850:	89 2b       	or	r24, r25
   16852:	49 f1       	breq	.+82     	; 0x168a6 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   16854:	8a e6       	ldi	r24, 0x6A	; 106
   16856:	90 e0       	ldi	r25, 0x00	; 0
   16858:	e5 cf       	rjmp	.-54     	; 0x16824 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
   1685a:	cc 36       	cpi	r28, 0x6C	; 108
   1685c:	51 f4       	brne	.+20     	; 0x16872 <AMIGO_COMMANDS+0xf0>
   1685e:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   16862:	90 e0       	ldi	r25, 0x00	; 0
   16864:	0e 94 44 94 	call	0x12888	; 0x12888 <AMIGO_is_MLA>
   16868:	89 2b       	or	r24, r25
   1686a:	e9 f0       	breq	.+58     	; 0x168a6 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   1686c:	8c e6       	ldi	r24, 0x6C	; 108
   1686e:	90 e0       	ldi	r25, 0x00	; 0
   16870:	d9 cf       	rjmp	.-78     	; 0x16824 <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   16872:	c0 37       	cpi	r28, 0x70	; 112
   16874:	c1 f4       	brne	.+48     	; 0x168a6 <AMIGO_COMMANDS+0x124>
   16876:	80 91 49 1f 	lds	r24, 0x1F49	; 0x801f49 <talking>
   1687a:	90 e0       	ldi	r25, 0x00	; 0
   1687c:	0e 94 55 94 	call	0x128aa	; 0x128aa <AMIGO_is_MTA>
   16880:	ec 01       	movw	r28, r24
   16882:	89 2b       	or	r24, r25
   16884:	51 f0       	breq	.+20     	; 0x1689a <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16886:	e0 91 f8 19 	lds	r30, 0x19F8	; 0x8019f8 <AMIGOp>
   1688a:	f0 91 f9 19 	lds	r31, 0x19F9	; 0x8019f9 <AMIGOp+0x1>
   1688e:	81 81       	ldd	r24, Z+1	; 0x01
   16890:	90 e0       	ldi	r25, 0x00	; 0
   16892:	0e 94 4a 8e 	call	0x11c94	; 0x11c94 <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   16896:	e6 d9       	rcall	.-3124   	; 0x15c64 <amigo_cmd_dsj>
   16898:	c6 cf       	rjmp	.-116    	; 0x16826 <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   1689a:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   1689e:	90 e0       	ldi	r25, 0x00	; 0
   168a0:	0e 94 44 94 	call	0x12888	; 0x12888 <AMIGO_is_MLA>
   168a4:	02 c0       	rjmp	.+4      	; 0x168aa <AMIGO_COMMANDS+0x128>
        {
            // NOP
        }
    }
    return(0);
   168a6:	c0 e0       	ldi	r28, 0x00	; 0
   168a8:	d0 e0       	ldi	r29, 0x00	; 0
}
   168aa:	ce 01       	movw	r24, r28
   168ac:	df 91       	pop	r29
   168ae:	cf 91       	pop	r28
   168b0:	08 95       	ret

000168b2 <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   168b2:	e7 ee       	ldi	r30, 0xE7	; 231
   168b4:	f9 e1       	ldi	r31, 0x19	; 25
   168b6:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   168b8:	10 82       	st	Z, r1
   168ba:	11 82       	std	Z+1, r1	; 0x01
   168bc:	12 82       	std	Z+2, r1	; 0x02
   168be:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   168c0:	15 82       	std	Z+5, r1	; 0x05
   168c2:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   168c4:	12 86       	std	Z+10, r1	; 0x0a
   168c6:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   168c8:	14 86       	std	Z+12, r1	; 0x0c
   168ca:	13 86       	std	Z+11, r1	; 0x0b
   168cc:	08 95       	ret

000168ce <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   168ce:	cf 93       	push	r28
   168d0:	df 93       	push	r29
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   168d2:	20 91 f0 19 	lds	r18, 0x19F0	; 0x8019f0 <plot+0x9>
   168d6:	30 91 f1 19 	lds	r19, 0x19F1	; 0x8019f1 <plot+0xa>
   168da:	21 15       	cp	r18, r1
   168dc:	31 05       	cpc	r19, r1
   168de:	09 f4       	brne	.+2      	; 0x168e2 <receive_plot_flush+0x14>
   168e0:	4a c0       	rjmp	.+148    	; 0x16976 <receive_plot_flush+0xa8>
   168e2:	80 91 eb 19 	lds	r24, 0x19EB	; 0x8019eb <plot+0x4>
   168e6:	90 91 ec 19 	lds	r25, 0x19EC	; 0x8019ec <plot+0x5>
   168ea:	00 97       	sbiw	r24, 0x00	; 0
   168ec:	09 f4       	brne	.+2      	; 0x168f0 <receive_plot_flush+0x22>
   168ee:	45 c0       	rjmp	.+138    	; 0x1697a <receive_plot_flush+0xac>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   168f0:	ac 01       	movw	r20, r24
   168f2:	61 e0       	ldi	r22, 0x01	; 1
   168f4:	70 e0       	ldi	r23, 0x00	; 0
   168f6:	80 91 f2 19 	lds	r24, 0x19F2	; 0x8019f2 <plot+0xb>
   168fa:	90 91 f3 19 	lds	r25, 0x19F3	; 0x8019f3 <plot+0xc>
   168fe:	0e 94 05 82 	call	0x1040a	; 0x1040a <fwrite>
   16902:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   16904:	80 91 eb 19 	lds	r24, 0x19EB	; 0x8019eb <plot+0x4>
   16908:	90 91 ec 19 	lds	r25, 0x19EC	; 0x8019ec <plot+0x5>
   1690c:	c8 17       	cp	r28, r24
   1690e:	d9 07       	cpc	r29, r25
   16910:	31 f1       	breq	.+76     	; 0x1695e <receive_plot_flush+0x90>
    {
        if(debuglevel & (1+32))
   16912:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16916:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1691a:	81 72       	andi	r24, 0x21	; 33
   1691c:	99 27       	eor	r25, r25
   1691e:	89 2b       	or	r24, r25
   16920:	d9 f0       	breq	.+54     	; 0x16958 <receive_plot_flush+0x8a>
        {
            perror("receive_plot_flush");
   16922:	88 e9       	ldi	r24, 0x98	; 152
   16924:	93 e1       	ldi	r25, 0x13	; 19
   16926:	0e 94 b3 7d 	call	0xfb66	; 0xfb66 <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   1692a:	df 93       	push	r29
   1692c:	cf 93       	push	r28
   1692e:	80 91 ec 19 	lds	r24, 0x19EC	; 0x8019ec <plot+0x5>
   16932:	8f 93       	push	r24
   16934:	80 91 eb 19 	lds	r24, 0x19EB	; 0x8019eb <plot+0x4>
   16938:	8f 93       	push	r24
   1693a:	85 e1       	ldi	r24, 0x15	; 21
   1693c:	99 e2       	ldi	r25, 0x29	; 41
   1693e:	1f 92       	push	r1
   16940:	9f 93       	push	r25
   16942:	8f 93       	push	r24
   16944:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   16948:	8d b7       	in	r24, 0x3d	; 61
   1694a:	9e b7       	in	r25, 0x3e	; 62
   1694c:	07 96       	adiw	r24, 0x07	; 7
   1694e:	0f b6       	in	r0, 0x3f	; 63
   16950:	f8 94       	cli
   16952:	9e bf       	out	0x3e, r25	; 62
   16954:	0f be       	out	0x3f, r0	; 63
   16956:	8d bf       	out	0x3d, r24	; 61
        }
        return(-1);
   16958:	8f ef       	ldi	r24, 0xFF	; 255
   1695a:	9f ef       	ldi	r25, 0xFF	; 255
   1695c:	0e c0       	rjmp	.+28     	; 0x1697a <receive_plot_flush+0xac>
    }

    fno = fileno( plot.fp );
   1695e:	80 91 f0 19 	lds	r24, 0x19F0	; 0x8019f0 <plot+0x9>
   16962:	90 91 f1 19 	lds	r25, 0x19F1	; 0x8019f1 <plot+0xa>
   16966:	0e 94 50 7b 	call	0xf6a0	; 0xf6a0 <fileno>
    if(fno < 0)
   1696a:	97 fd       	sbrc	r25, 7
   1696c:	f5 cf       	rjmp	.-22     	; 0x16958 <receive_plot_flush+0x8a>
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
   1696e:	0e 94 4f 81 	call	0x1029e	; 0x1029e <syncfs>
    return (ret);
   16972:	ce 01       	movw	r24, r28
   16974:	02 c0       	rjmp	.+4      	; 0x1697a <receive_plot_flush+0xac>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   16976:	80 e0       	ldi	r24, 0x00	; 0
   16978:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
    return (ret);
}
   1697a:	df 91       	pop	r29
   1697c:	cf 91       	pop	r28
   1697e:	08 95       	ret

00016980 <printer_close>:
   16980:	a6 df       	rcall	.-180    	; 0x168ce <receive_plot_flush>
   16982:	97 ff       	sbrs	r25, 7
   16984:	03 c0       	rjmp	.+6      	; 0x1698c <printer_close+0xc>
   16986:	81 e0       	ldi	r24, 0x01	; 1
   16988:	80 93 ef 19 	sts	0x19EF, r24	; 0x8019ef <plot+0x8>
   1698c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16990:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   16994:	81 72       	andi	r24, 0x21	; 33
   16996:	99 27       	eor	r25, r25
   16998:	89 2b       	or	r24, r25
   1699a:	71 f0       	breq	.+28     	; 0x169b8 <printer_close+0x38>
   1699c:	80 91 ef 19 	lds	r24, 0x19EF	; 0x8019ef <plot+0x8>
   169a0:	88 23       	and	r24, r24
   169a2:	51 f0       	breq	.+20     	; 0x169b8 <printer_close+0x38>
   169a4:	84 e4       	ldi	r24, 0x44	; 68
   169a6:	99 e2       	ldi	r25, 0x29	; 41
   169a8:	1f 92       	push	r1
   169aa:	9f 93       	push	r25
   169ac:	8f 93       	push	r24
   169ae:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   169b2:	0f 90       	pop	r0
   169b4:	0f 90       	pop	r0
   169b6:	0f 90       	pop	r0
   169b8:	80 91 f0 19 	lds	r24, 0x19F0	; 0x8019f0 <plot+0x9>
   169bc:	90 91 f1 19 	lds	r25, 0x19F1	; 0x8019f1 <plot+0xa>
   169c0:	00 97       	sbiw	r24, 0x00	; 0
   169c2:	09 f1       	breq	.+66     	; 0x16a06 <printer_close+0x86>
   169c4:	0e 94 87 82 	call	0x1050e	; 0x1050e <fclose>
   169c8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   169cc:	85 ff       	sbrs	r24, 5
   169ce:	1b c0       	rjmp	.+54     	; 0x16a06 <printer_close+0x86>
   169d0:	80 91 ea 19 	lds	r24, 0x19EA	; 0x8019ea <plot+0x3>
   169d4:	8f 93       	push	r24
   169d6:	80 91 e9 19 	lds	r24, 0x19E9	; 0x8019e9 <plot+0x2>
   169da:	8f 93       	push	r24
   169dc:	80 91 e8 19 	lds	r24, 0x19E8	; 0x8019e8 <plot+0x1>
   169e0:	8f 93       	push	r24
   169e2:	80 91 e7 19 	lds	r24, 0x19E7	; 0x8019e7 <plot>
   169e6:	8f 93       	push	r24
   169e8:	86 e3       	ldi	r24, 0x36	; 54
   169ea:	99 e2       	ldi	r25, 0x29	; 41
   169ec:	1f 92       	push	r1
   169ee:	9f 93       	push	r25
   169f0:	8f 93       	push	r24
   169f2:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   169f6:	8d b7       	in	r24, 0x3d	; 61
   169f8:	9e b7       	in	r25, 0x3e	; 62
   169fa:	07 96       	adiw	r24, 0x07	; 7
   169fc:	0f b6       	in	r0, 0x3f	; 63
   169fe:	f8 94       	cli
   16a00:	9e bf       	out	0x3e, r25	; 62
   16a02:	0f be       	out	0x3f, r0	; 63
   16a04:	8d bf       	out	0x3d, r24	; 61
   16a06:	80 91 f2 19 	lds	r24, 0x19F2	; 0x8019f2 <plot+0xb>
   16a0a:	90 91 f3 19 	lds	r25, 0x19F3	; 0x8019f3 <plot+0xc>
   16a0e:	00 97       	sbiw	r24, 0x00	; 0
   16a10:	11 f0       	breq	.+4      	; 0x16a16 <printer_close+0x96>
   16a12:	0e 94 3b 2a 	call	0x5476	; 0x5476 <safefree>
   16a16:	4d cf       	rjmp	.-358    	; 0x168b2 <printer_init>
   16a18:	08 95       	ret

00016a1a <printer_open>:
   16a1a:	ac e4       	ldi	r26, 0x4C	; 76
   16a1c:	b0 e0       	ldi	r27, 0x00	; 0
   16a1e:	e3 e1       	ldi	r30, 0x13	; 19
   16a20:	f5 eb       	ldi	r31, 0xB5	; 181
   16a22:	0c 94 3a ec 	jmp	0x1d874	; 0x1d874 <__prologue_saves__+0xc>
   16a26:	8c 01       	movw	r16, r24
   16a28:	89 2b       	or	r24, r25
   16a2a:	09 f0       	breq	.+2      	; 0x16a2e <printer_open+0x14>
   16a2c:	4b c0       	rjmp	.+150    	; 0x16ac4 <printer_open+0xaa>
   16a2e:	be 01       	movw	r22, r28
   16a30:	6f 5b       	subi	r22, 0xBF	; 191
   16a32:	7f 4f       	sbci	r23, 0xFF	; 255
   16a34:	80 e0       	ldi	r24, 0x00	; 0
   16a36:	90 e0       	ldi	r25, 0x00	; 0
   16a38:	0e 94 5e 34 	call	0x68bc	; 0x68bc <clock_gettime>
   16a3c:	25 96       	adiw	r28, 0x05	; 5
   16a3e:	8c ad       	ldd	r24, Y+60	; 0x3c
   16a40:	9d ad       	ldd	r25, Y+61	; 0x3d
   16a42:	ae ad       	ldd	r26, Y+62	; 0x3e
   16a44:	bf ad       	ldd	r27, Y+63	; 0x3f
   16a46:	25 97       	sbiw	r28, 0x05	; 5
   16a48:	2d 96       	adiw	r28, 0x0d	; 13
   16a4a:	8c af       	std	Y+60, r24	; 0x3c
   16a4c:	9d af       	std	Y+61, r25	; 0x3d
   16a4e:	ae af       	std	Y+62, r26	; 0x3e
   16a50:	bf af       	std	Y+63, r27	; 0x3f
   16a52:	2d 97       	sbiw	r28, 0x0d	; 13
   16a54:	ce 01       	movw	r24, r28
   16a56:	87 5b       	subi	r24, 0xB7	; 183
   16a58:	9f 4f       	sbci	r25, 0xFF	; 255
   16a5a:	0e 94 2e 38 	call	0x705c	; 0x705c <gmtime>
   16a5e:	8c 01       	movw	r16, r24
   16a60:	fc 01       	movw	r30, r24
   16a62:	90 80       	ld	r9, Z
   16a64:	81 80       	ldd	r8, Z+1	; 0x01
   16a66:	b2 80       	ldd	r11, Z+2	; 0x02
   16a68:	a3 80       	ldd	r10, Z+3	; 0x03
   16a6a:	d4 80       	ldd	r13, Z+4	; 0x04
   16a6c:	c5 80       	ldd	r12, Z+5	; 0x05
   16a6e:	e2 84       	ldd	r14, Z+10	; 0x0a
   16a70:	f3 84       	ldd	r15, Z+11	; 0x0b
   16a72:	f4 e9       	ldi	r31, 0x94	; 148
   16a74:	ef 1a       	sub	r14, r31
   16a76:	f8 ef       	ldi	r31, 0xF8	; 248
   16a78:	ff 0a       	sbc	r15, r31
   16a7a:	fc 01       	movw	r30, r24
   16a7c:	80 85       	ldd	r24, Z+8	; 0x08
   16a7e:	91 85       	ldd	r25, Z+9	; 0x09
   16a80:	0e 94 0a 37 	call	0x6e14	; 0x6e14 <tm_mon_to_ascii>
   16a84:	8f 92       	push	r8
   16a86:	9f 92       	push	r9
   16a88:	af 92       	push	r10
   16a8a:	bf 92       	push	r11
   16a8c:	cf 92       	push	r12
   16a8e:	df 92       	push	r13
   16a90:	ff 92       	push	r15
   16a92:	ef 92       	push	r14
   16a94:	9f 93       	push	r25
   16a96:	8f 93       	push	r24
   16a98:	f8 01       	movw	r30, r16
   16a9a:	87 81       	ldd	r24, Z+7	; 0x07
   16a9c:	8f 93       	push	r24
   16a9e:	86 81       	ldd	r24, Z+6	; 0x06
   16aa0:	8f 93       	push	r24
   16aa2:	8b e7       	ldi	r24, 0x7B	; 123
   16aa4:	99 e2       	ldi	r25, 0x29	; 41
   16aa6:	1f 92       	push	r1
   16aa8:	9f 93       	push	r25
   16aaa:	8f 93       	push	r24
   16aac:	8e 01       	movw	r16, r28
   16aae:	0f 5f       	subi	r16, 0xFF	; 255
   16ab0:	1f 4f       	sbci	r17, 0xFF	; 255
   16ab2:	1f 93       	push	r17
   16ab4:	0f 93       	push	r16
   16ab6:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <sprintf_P>
   16aba:	0f b6       	in	r0, 0x3f	; 63
   16abc:	f8 94       	cli
   16abe:	de bf       	out	0x3e, r29	; 62
   16ac0:	0f be       	out	0x3f, r0	; 63
   16ac2:	cd bf       	out	0x3d, r28	; 61
   16ac4:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16ac8:	85 ff       	sbrs	r24, 5
   16aca:	0e c0       	rjmp	.+28     	; 0x16ae8 <printer_open+0xce>
   16acc:	1f 93       	push	r17
   16ace:	0f 93       	push	r16
   16ad0:	85 e6       	ldi	r24, 0x65	; 101
   16ad2:	99 e2       	ldi	r25, 0x29	; 41
   16ad4:	1f 92       	push	r1
   16ad6:	9f 93       	push	r25
   16ad8:	8f 93       	push	r24
   16ada:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   16ade:	0f 90       	pop	r0
   16ae0:	0f 90       	pop	r0
   16ae2:	0f 90       	pop	r0
   16ae4:	0f 90       	pop	r0
   16ae6:	0f 90       	pop	r0
   16ae8:	68 ec       	ldi	r22, 0xC8	; 200
   16aea:	78 e0       	ldi	r23, 0x08	; 8
   16aec:	c8 01       	movw	r24, r16
   16aee:	0e 94 dd 83 	call	0x107ba	; 0x107ba <fopen>
   16af2:	90 93 f1 19 	sts	0x19F1, r25	; 0x8019f1 <plot+0xa>
   16af6:	80 93 f0 19 	sts	0x19F0, r24	; 0x8019f0 <plot+0x9>
   16afa:	89 2b       	or	r24, r25
   16afc:	b9 f4       	brne	.+46     	; 0x16b2c <printer_open+0x112>
   16afe:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16b02:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   16b06:	81 72       	andi	r24, 0x21	; 33
   16b08:	99 27       	eor	r25, r25
   16b0a:	89 2b       	or	r24, r25
   16b0c:	11 f1       	breq	.+68     	; 0x16b52 <printer_open+0x138>
   16b0e:	86 e7       	ldi	r24, 0x76	; 118
   16b10:	9d e0       	ldi	r25, 0x0D	; 13
   16b12:	0e 94 b3 7d 	call	0xfb66	; 0xfb66 <perror>
   16b16:	89 e5       	ldi	r24, 0x59	; 89
   16b18:	99 e2       	ldi	r25, 0x29	; 41
   16b1a:	1f 92       	push	r1
   16b1c:	9f 93       	push	r25
   16b1e:	8f 93       	push	r24
   16b20:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   16b24:	0f 90       	pop	r0
   16b26:	0f 90       	pop	r0
   16b28:	0f 90       	pop	r0
   16b2a:	13 c0       	rjmp	.+38     	; 0x16b52 <printer_open+0x138>
   16b2c:	61 e0       	ldi	r22, 0x01	; 1
   16b2e:	70 e0       	ldi	r23, 0x00	; 0
   16b30:	81 e0       	ldi	r24, 0x01	; 1
   16b32:	92 e0       	ldi	r25, 0x02	; 2
   16b34:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <safecalloc>
   16b38:	90 93 f3 19 	sts	0x19F3, r25	; 0x8019f3 <plot+0xc>
   16b3c:	80 93 f2 19 	sts	0x19F2, r24	; 0x8019f2 <plot+0xb>
   16b40:	89 2b       	or	r24, r25
   16b42:	09 f4       	brne	.+2      	; 0x16b46 <printer_open+0x12c>
   16b44:	1d df       	rcall	.-454    	; 0x16980 <printer_close>
   16b46:	80 e0       	ldi	r24, 0x00	; 0
   16b48:	92 e0       	ldi	r25, 0x02	; 2
   16b4a:	90 93 ee 19 	sts	0x19EE, r25	; 0x8019ee <plot+0x7>
   16b4e:	80 93 ed 19 	sts	0x19ED, r24	; 0x8019ed <plot+0x6>
   16b52:	c4 5b       	subi	r28, 0xB4	; 180
   16b54:	df 4f       	sbci	r29, 0xFF	; 255
   16b56:	ec e0       	ldi	r30, 0x0C	; 12
   16b58:	0c 94 56 ec 	jmp	0x1d8ac	; 0x1d8ac <__epilogue_restores__+0xc>

00016b5c <printer_buffer>:
   16b5c:	cf 93       	push	r28
   16b5e:	df 93       	push	r29
   16b60:	ec 01       	movw	r28, r24
   16b62:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16b66:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   16b6a:	81 72       	andi	r24, 0x21	; 33
   16b6c:	99 27       	eor	r25, r25
   16b6e:	89 2b       	or	r24, r25
   16b70:	e9 f0       	breq	.+58     	; 0x16bac <printer_buffer+0x50>
   16b72:	80 91 e7 19 	lds	r24, 0x19E7	; 0x8019e7 <plot>
   16b76:	90 91 e8 19 	lds	r25, 0x19E8	; 0x8019e8 <plot+0x1>
   16b7a:	20 91 e9 19 	lds	r18, 0x19E9	; 0x8019e9 <plot+0x2>
   16b7e:	30 91 ea 19 	lds	r19, 0x19EA	; 0x8019ea <plot+0x3>
   16b82:	81 11       	cpse	r24, r1
   16b84:	13 c0       	rjmp	.+38     	; 0x16bac <printer_buffer+0x50>
   16b86:	3f 93       	push	r19
   16b88:	2f 93       	push	r18
   16b8a:	9f 93       	push	r25
   16b8c:	8f 93       	push	r24
   16b8e:	8e e0       	ldi	r24, 0x0E	; 14
   16b90:	99 e2       	ldi	r25, 0x29	; 41
   16b92:	1f 92       	push	r1
   16b94:	9f 93       	push	r25
   16b96:	8f 93       	push	r24
   16b98:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   16b9c:	8d b7       	in	r24, 0x3d	; 61
   16b9e:	9e b7       	in	r25, 0x3e	; 62
   16ba0:	07 96       	adiw	r24, 0x07	; 7
   16ba2:	0f b6       	in	r0, 0x3f	; 63
   16ba4:	f8 94       	cli
   16ba6:	9e bf       	out	0x3e, r25	; 62
   16ba8:	0f be       	out	0x3f, r0	; 63
   16baa:	8d bf       	out	0x3d, r24	; 61
   16bac:	ce 01       	movw	r24, r28
   16bae:	88 27       	eor	r24, r24
   16bb0:	97 7f       	andi	r25, 0xF7	; 247
   16bb2:	89 2b       	or	r24, r25
   16bb4:	41 f0       	breq	.+16     	; 0x16bc6 <printer_buffer+0x6a>
   16bb6:	8b de       	rcall	.-746    	; 0x168ce <receive_plot_flush>
   16bb8:	89 2b       	or	r24, r25
   16bba:	09 f4       	brne	.+2      	; 0x16bbe <printer_buffer+0x62>
   16bbc:	3f c0       	rjmp	.+126    	; 0x16c3c <printer_buffer+0xe0>
   16bbe:	81 e0       	ldi	r24, 0x01	; 1
   16bc0:	80 93 ef 19 	sts	0x19EF, r24	; 0x8019ef <plot+0x8>
   16bc4:	3b c0       	rjmp	.+118    	; 0x16c3c <printer_buffer+0xe0>
   16bc6:	20 91 f2 19 	lds	r18, 0x19F2	; 0x8019f2 <plot+0xb>
   16bca:	30 91 f3 19 	lds	r19, 0x19F3	; 0x8019f3 <plot+0xc>
   16bce:	80 91 eb 19 	lds	r24, 0x19EB	; 0x8019eb <plot+0x4>
   16bd2:	90 91 ec 19 	lds	r25, 0x19EC	; 0x8019ec <plot+0x5>
   16bd6:	ac 01       	movw	r20, r24
   16bd8:	4f 5f       	subi	r20, 0xFF	; 255
   16bda:	5f 4f       	sbci	r21, 0xFF	; 255
   16bdc:	50 93 ec 19 	sts	0x19EC, r21	; 0x8019ec <plot+0x5>
   16be0:	40 93 eb 19 	sts	0x19EB, r20	; 0x8019eb <plot+0x4>
   16be4:	f9 01       	movw	r30, r18
   16be6:	e8 0f       	add	r30, r24
   16be8:	f9 1f       	adc	r31, r25
   16bea:	c0 83       	st	Z, r28
   16bec:	80 91 e7 19 	lds	r24, 0x19E7	; 0x8019e7 <plot>
   16bf0:	90 91 e8 19 	lds	r25, 0x19E8	; 0x8019e8 <plot+0x1>
   16bf4:	a0 91 e9 19 	lds	r26, 0x19E9	; 0x8019e9 <plot+0x2>
   16bf8:	b0 91 ea 19 	lds	r27, 0x19EA	; 0x8019ea <plot+0x3>
   16bfc:	01 96       	adiw	r24, 0x01	; 1
   16bfe:	a1 1d       	adc	r26, r1
   16c00:	b1 1d       	adc	r27, r1
   16c02:	80 93 e7 19 	sts	0x19E7, r24	; 0x8019e7 <plot>
   16c06:	90 93 e8 19 	sts	0x19E8, r25	; 0x8019e8 <plot+0x1>
   16c0a:	a0 93 e9 19 	sts	0x19E9, r26	; 0x8019e9 <plot+0x2>
   16c0e:	b0 93 ea 19 	sts	0x19EA, r27	; 0x8019ea <plot+0x3>
   16c12:	20 91 eb 19 	lds	r18, 0x19EB	; 0x8019eb <plot+0x4>
   16c16:	30 91 ec 19 	lds	r19, 0x19EC	; 0x8019ec <plot+0x5>
   16c1a:	80 91 ed 19 	lds	r24, 0x19ED	; 0x8019ed <plot+0x6>
   16c1e:	90 91 ee 19 	lds	r25, 0x19EE	; 0x8019ee <plot+0x7>
   16c22:	28 17       	cp	r18, r24
   16c24:	39 07       	cpc	r19, r25
   16c26:	54 f0       	brlt	.+20     	; 0x16c3c <printer_buffer+0xe0>
   16c28:	52 de       	rcall	.-860    	; 0x168ce <receive_plot_flush>
   16c2a:	97 ff       	sbrs	r25, 7
   16c2c:	03 c0       	rjmp	.+6      	; 0x16c34 <printer_buffer+0xd8>
   16c2e:	81 e0       	ldi	r24, 0x01	; 1
   16c30:	80 93 ef 19 	sts	0x19EF, r24	; 0x8019ef <plot+0x8>
   16c34:	10 92 ec 19 	sts	0x19EC, r1	; 0x8019ec <plot+0x5>
   16c38:	10 92 eb 19 	sts	0x19EB, r1	; 0x8019eb <plot+0x4>
   16c3c:	df 91       	pop	r29
   16c3e:	cf 91       	pop	r28
   16c40:	08 95       	ret

00016c42 <PRINTER_COMMANDS>:
   16c42:	cf 93       	push	r28
   16c44:	c8 2f       	mov	r28, r24
   16c46:	80 91 4b 1f 	lds	r24, 0x1F4B	; 0x801f4b <listening>
   16c4a:	90 e0       	ldi	r25, 0x00	; 0
   16c4c:	0e 94 77 94 	call	0x128ee	; 0x128ee <PRINTER_is_MLA>
   16c50:	89 2b       	or	r24, r25
   16c52:	49 f0       	breq	.+18     	; 0x16c66 <PRINTER_COMMANDS+0x24>
   16c54:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16c58:	85 ff       	sbrs	r24, 5
   16c5a:	1e c0       	rjmp	.+60     	; 0x16c98 <PRINTER_COMMANDS+0x56>
   16c5c:	1f 92       	push	r1
   16c5e:	cf 93       	push	r28
   16c60:	82 ef       	ldi	r24, 0xF2	; 242
   16c62:	98 e2       	ldi	r25, 0x28	; 40
   16c64:	0f c0       	rjmp	.+30     	; 0x16c84 <PRINTER_COMMANDS+0x42>
   16c66:	80 91 49 1f 	lds	r24, 0x1F49	; 0x801f49 <talking>
   16c6a:	90 e0       	ldi	r25, 0x00	; 0
   16c6c:	0e 94 88 94 	call	0x12910	; 0x12910 <PRINTER_is_MTA>
   16c70:	89 2b       	or	r24, r25
   16c72:	91 f0       	breq	.+36     	; 0x16c98 <PRINTER_COMMANDS+0x56>
   16c74:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16c78:	85 ff       	sbrs	r24, 5
   16c7a:	0e c0       	rjmp	.+28     	; 0x16c98 <PRINTER_COMMANDS+0x56>
   16c7c:	1f 92       	push	r1
   16c7e:	cf 93       	push	r28
   16c80:	88 ed       	ldi	r24, 0xD8	; 216
   16c82:	98 e2       	ldi	r25, 0x28	; 40
   16c84:	1f 92       	push	r1
   16c86:	9f 93       	push	r25
   16c88:	8f 93       	push	r24
   16c8a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   16c8e:	0f 90       	pop	r0
   16c90:	0f 90       	pop	r0
   16c92:	0f 90       	pop	r0
   16c94:	0f 90       	pop	r0
   16c96:	0f 90       	pop	r0
   16c98:	80 e0       	ldi	r24, 0x00	; 0
   16c9a:	90 e0       	ldi	r25, 0x00	; 0
   16c9c:	cf 91       	pop	r28
   16c9e:	08 95       	ret

00016ca0 <plot_echo>:
   16ca0:	cf 92       	push	r12
   16ca2:	df 92       	push	r13
   16ca4:	ff 92       	push	r15
   16ca6:	0f 93       	push	r16
   16ca8:	1f 93       	push	r17
   16caa:	cf 93       	push	r28
   16cac:	df 93       	push	r29
   16cae:	cd b7       	in	r28, 0x3d	; 61
   16cb0:	de b7       	in	r29, 0x3e	; 62
   16cb2:	da 95       	dec	r29
   16cb4:	0f b6       	in	r0, 0x3f	; 63
   16cb6:	f8 94       	cli
   16cb8:	de bf       	out	0x3e, r29	; 62
   16cba:	0f be       	out	0x3f, r0	; 63
   16cbc:	cd bf       	out	0x3d, r28	; 61
   16cbe:	f8 2e       	mov	r15, r24
   16cc0:	83 e0       	ldi	r24, 0x03	; 3
   16cc2:	90 e0       	ldi	r25, 0x00	; 0
   16cc4:	e9 d0       	rcall	.+466    	; 0x16e98 <find_type>
   16cc6:	8c 01       	movw	r16, r24
   16cc8:	0f 3f       	cpi	r16, 0xFF	; 255
   16cca:	8f ef       	ldi	r24, 0xFF	; 255
   16ccc:	18 07       	cpc	r17, r24
   16cce:	59 f4       	brne	.+22     	; 0x16ce6 <plot_echo+0x46>
   16cd0:	83 ec       	ldi	r24, 0xC3	; 195
   16cd2:	98 e2       	ldi	r25, 0x28	; 40
   16cd4:	1f 92       	push	r1
   16cd6:	9f 93       	push	r25
   16cd8:	8f 93       	push	r24
   16cda:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   16cde:	0f 90       	pop	r0
   16ce0:	0f 90       	pop	r0
   16ce2:	0f 90       	pop	r0
   16ce4:	63 c0       	rjmp	.+198    	; 0x16dac <plot_echo+0x10c>
   16ce6:	4c de       	rcall	.-872    	; 0x16980 <printer_close>
   16ce8:	80 e0       	ldi	r24, 0x00	; 0
   16cea:	0e 94 88 2c 	call	0x5910	; 0x5910 <uart_keyhit>
   16cee:	89 2b       	or	r24, r25
   16cf0:	31 f0       	breq	.+12     	; 0x16cfe <plot_echo+0x5e>
   16cf2:	80 e0       	ldi	r24, 0x00	; 0
   16cf4:	0e 94 37 2c 	call	0x586e	; 0x586e <uart_rx_byte>
   16cf8:	0e 94 e7 7a 	call	0xf5ce	; 0xf5ce <putchar>
   16cfc:	f5 cf       	rjmp	.-22     	; 0x16ce8 <plot_echo+0x48>
   16cfe:	80 91 1c 1d 	lds	r24, 0x1D1C	; 0x801d1c <__iob+0x2>
   16d02:	90 91 1d 1d 	lds	r25, 0x1D1D	; 0x801d1d <__iob+0x3>
   16d06:	0e 94 48 90 	call	0x12090	; 0x12090 <gpib_decode_header>
   16d0a:	20 e0       	ldi	r18, 0x00	; 0
   16d0c:	30 e0       	ldi	r19, 0x00	; 0
   16d0e:	4b ea       	ldi	r20, 0xAB	; 171
   16d10:	53 e1       	ldi	r21, 0x13	; 19
   16d12:	6f 2d       	mov	r22, r15
   16d14:	80 2f       	mov	r24, r16
   16d16:	0e 94 60 c8 	call	0x190c0	; 0x190c0 <controller_send_str>
   16d1a:	20 e0       	ldi	r18, 0x00	; 0
   16d1c:	31 e0       	ldi	r19, 0x01	; 1
   16d1e:	ce 01       	movw	r24, r28
   16d20:	01 96       	adiw	r24, 0x01	; 1
   16d22:	6c 01       	movw	r12, r24
   16d24:	ac 01       	movw	r20, r24
   16d26:	60 2f       	mov	r22, r16
   16d28:	8f 2d       	mov	r24, r15
   16d2a:	0e 94 a3 c8 	call	0x19146	; 0x19146 <controller_read_str>
   16d2e:	df 92       	push	r13
   16d30:	cf 92       	push	r12
   16d32:	9f 93       	push	r25
   16d34:	8f 93       	push	r24
   16d36:	81 eb       	ldi	r24, 0xB1	; 177
   16d38:	98 e2       	ldi	r25, 0x28	; 40
   16d3a:	1f 92       	push	r1
   16d3c:	9f 93       	push	r25
   16d3e:	8f 93       	push	r24
   16d40:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   16d44:	20 e0       	ldi	r18, 0x00	; 0
   16d46:	30 e0       	ldi	r19, 0x00	; 0
   16d48:	42 eb       	ldi	r20, 0xB2	; 178
   16d4a:	53 e1       	ldi	r21, 0x13	; 19
   16d4c:	6f 2d       	mov	r22, r15
   16d4e:	80 2f       	mov	r24, r16
   16d50:	0e 94 60 c8 	call	0x190c0	; 0x190c0 <controller_send_str>
   16d54:	20 e0       	ldi	r18, 0x00	; 0
   16d56:	31 e0       	ldi	r19, 0x01	; 1
   16d58:	a6 01       	movw	r20, r12
   16d5a:	60 2f       	mov	r22, r16
   16d5c:	8f 2d       	mov	r24, r15
   16d5e:	0e 94 a3 c8 	call	0x19146	; 0x19146 <controller_read_str>
   16d62:	df 92       	push	r13
   16d64:	cf 92       	push	r12
   16d66:	9f 93       	push	r25
   16d68:	8f 93       	push	r24
   16d6a:	8f e9       	ldi	r24, 0x9F	; 159
   16d6c:	98 e2       	ldi	r25, 0x28	; 40
   16d6e:	1f 92       	push	r1
   16d70:	9f 93       	push	r25
   16d72:	8f 93       	push	r24
   16d74:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   16d78:	20 e0       	ldi	r18, 0x00	; 0
   16d7a:	30 e0       	ldi	r19, 0x00	; 0
   16d7c:	45 ec       	ldi	r20, 0xC5	; 197
   16d7e:	53 e1       	ldi	r21, 0x13	; 19
   16d80:	6f 2d       	mov	r22, r15
   16d82:	80 2f       	mov	r24, r16
   16d84:	0e 94 60 c8 	call	0x190c0	; 0x190c0 <controller_send_str>
   16d88:	60 2f       	mov	r22, r16
   16d8a:	8f 2d       	mov	r24, r15
   16d8c:	0e 94 e9 c8 	call	0x191d2	; 0x191d2 <controller_read_trace>
   16d90:	9f 93       	push	r25
   16d92:	8f 93       	push	r24
   16d94:	8a e8       	ldi	r24, 0x8A	; 138
   16d96:	98 e2       	ldi	r25, 0x28	; 40
   16d98:	1f 92       	push	r1
   16d9a:	9f 93       	push	r25
   16d9c:	8f 93       	push	r24
   16d9e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   16da2:	0f b6       	in	r0, 0x3f	; 63
   16da4:	f8 94       	cli
   16da6:	de bf       	out	0x3e, r29	; 62
   16da8:	0f be       	out	0x3f, r0	; 63
   16daa:	cd bf       	out	0x3d, r28	; 61
   16dac:	d3 95       	inc	r29
   16dae:	0f b6       	in	r0, 0x3f	; 63
   16db0:	f8 94       	cli
   16db2:	de bf       	out	0x3e, r29	; 62
   16db4:	0f be       	out	0x3f, r0	; 63
   16db6:	cd bf       	out	0x3d, r28	; 61
   16db8:	df 91       	pop	r29
   16dba:	cf 91       	pop	r28
   16dbc:	1f 91       	pop	r17
   16dbe:	0f 91       	pop	r16
   16dc0:	ff 90       	pop	r15
   16dc2:	df 90       	pop	r13
   16dc4:	cf 90       	pop	r12
   16dc6:	08 95       	ret

00016dc8 <V2B_MSB>:
   16dc8:	0f 93       	push	r16
   16dca:	1f 93       	push	r17
   16dcc:	da 01       	movw	r26, r20
   16dce:	11 97       	sbiw	r26, 0x01	; 1
   16dd0:	b7 fd       	sbrc	r27, 7
   16dd2:	0b c0       	rjmp	.+22     	; 0x16dea <V2B_MSB+0x22>
   16dd4:	fd 01       	movw	r30, r26
   16dd6:	e6 0f       	add	r30, r22
   16dd8:	f7 1f       	adc	r31, r23
   16dda:	e8 0f       	add	r30, r24
   16ddc:	f9 1f       	adc	r31, r25
   16dde:	00 83       	st	Z, r16
   16de0:	01 2f       	mov	r16, r17
   16de2:	12 2f       	mov	r17, r18
   16de4:	23 2f       	mov	r18, r19
   16de6:	33 27       	eor	r19, r19
   16de8:	f2 cf       	rjmp	.-28     	; 0x16dce <V2B_MSB+0x6>
   16dea:	1f 91       	pop	r17
   16dec:	0f 91       	pop	r16
   16dee:	08 95       	ret

00016df0 <V2B_LSB>:
   16df0:	0f 93       	push	r16
   16df2:	1f 93       	push	r17
   16df4:	fc 01       	movw	r30, r24
   16df6:	e6 0f       	add	r30, r22
   16df8:	f7 1f       	adc	r31, r23
   16dfa:	bf 01       	movw	r22, r30
   16dfc:	cf 01       	movw	r24, r30
   16dfe:	86 1b       	sub	r24, r22
   16e00:	97 0b       	sbc	r25, r23
   16e02:	84 17       	cp	r24, r20
   16e04:	95 07       	cpc	r25, r21
   16e06:	34 f4       	brge	.+12     	; 0x16e14 <V2B_LSB+0x24>
   16e08:	01 93       	st	Z+, r16
   16e0a:	01 2f       	mov	r16, r17
   16e0c:	12 2f       	mov	r17, r18
   16e0e:	23 2f       	mov	r18, r19
   16e10:	33 27       	eor	r19, r19
   16e12:	f4 cf       	rjmp	.-24     	; 0x16dfc <V2B_LSB+0xc>
   16e14:	1f 91       	pop	r17
   16e16:	0f 91       	pop	r16
   16e18:	08 95       	ret

00016e1a <B2V_MSB>:
   16e1a:	cf 92       	push	r12
   16e1c:	df 92       	push	r13
   16e1e:	ef 92       	push	r14
   16e20:	ff 92       	push	r15
   16e22:	fc 01       	movw	r30, r24
   16e24:	e6 0f       	add	r30, r22
   16e26:	f7 1f       	adc	r31, r23
   16e28:	60 e0       	ldi	r22, 0x00	; 0
   16e2a:	70 e0       	ldi	r23, 0x00	; 0
   16e2c:	cb 01       	movw	r24, r22
   16e2e:	df 01       	movw	r26, r30
   16e30:	9f 01       	movw	r18, r30
   16e32:	2a 1b       	sub	r18, r26
   16e34:	3b 0b       	sbc	r19, r27
   16e36:	24 17       	cp	r18, r20
   16e38:	35 07       	cpc	r19, r21
   16e3a:	4c f4       	brge	.+18     	; 0x16e4e <B2V_MSB+0x34>
   16e3c:	cc 24       	eor	r12, r12
   16e3e:	d6 2e       	mov	r13, r22
   16e40:	e7 2e       	mov	r14, r23
   16e42:	f8 2e       	mov	r15, r24
   16e44:	21 91       	ld	r18, Z+
   16e46:	c7 01       	movw	r24, r14
   16e48:	b6 01       	movw	r22, r12
   16e4a:	62 2b       	or	r22, r18
   16e4c:	f1 cf       	rjmp	.-30     	; 0x16e30 <B2V_MSB+0x16>
   16e4e:	ff 90       	pop	r15
   16e50:	ef 90       	pop	r14
   16e52:	df 90       	pop	r13
   16e54:	cf 90       	pop	r12
   16e56:	08 95       	ret

00016e58 <B2V_LSB>:
   16e58:	cf 92       	push	r12
   16e5a:	df 92       	push	r13
   16e5c:	ef 92       	push	r14
   16e5e:	ff 92       	push	r15
   16e60:	9c 01       	movw	r18, r24
   16e62:	db 01       	movw	r26, r22
   16e64:	60 e0       	ldi	r22, 0x00	; 0
   16e66:	70 e0       	ldi	r23, 0x00	; 0
   16e68:	cb 01       	movw	r24, r22
   16e6a:	41 50       	subi	r20, 0x01	; 1
   16e6c:	51 09       	sbc	r21, r1
   16e6e:	57 fd       	sbrc	r21, 7
   16e70:	0e c0       	rjmp	.+28     	; 0x16e8e <B2V_LSB+0x36>
   16e72:	cc 24       	eor	r12, r12
   16e74:	d6 2e       	mov	r13, r22
   16e76:	e7 2e       	mov	r14, r23
   16e78:	f8 2e       	mov	r15, r24
   16e7a:	fa 01       	movw	r30, r20
   16e7c:	ea 0f       	add	r30, r26
   16e7e:	fb 1f       	adc	r31, r27
   16e80:	e2 0f       	add	r30, r18
   16e82:	f3 1f       	adc	r31, r19
   16e84:	e0 81       	ld	r30, Z
   16e86:	c7 01       	movw	r24, r14
   16e88:	b6 01       	movw	r22, r12
   16e8a:	6e 2b       	or	r22, r30
   16e8c:	ee cf       	rjmp	.-36     	; 0x16e6a <B2V_LSB+0x12>
   16e8e:	ff 90       	pop	r15
   16e90:	ef 90       	pop	r14
   16e92:	df 90       	pop	r13
   16e94:	cf 90       	pop	r12
   16e96:	08 95       	ret

00016e98 <find_type>:
   16e98:	ef e4       	ldi	r30, 0x4F	; 79
   16e9a:	ff e1       	ldi	r31, 0x1F	; 31
   16e9c:	20 e0       	ldi	r18, 0x00	; 0
   16e9e:	30 e0       	ldi	r19, 0x00	; 0
   16ea0:	40 81       	ld	r20, Z
   16ea2:	50 e0       	ldi	r21, 0x00	; 0
   16ea4:	48 17       	cp	r20, r24
   16ea6:	59 07       	cpc	r21, r25
   16ea8:	49 f0       	breq	.+18     	; 0x16ebc <find_type+0x24>
   16eaa:	2f 5f       	subi	r18, 0xFF	; 255
   16eac:	3f 4f       	sbci	r19, 0xFF	; 255
   16eae:	37 96       	adiw	r30, 0x07	; 7
   16eb0:	28 30       	cpi	r18, 0x08	; 8
   16eb2:	31 05       	cpc	r19, r1
   16eb4:	a9 f7       	brne	.-22     	; 0x16ea0 <find_type+0x8>
   16eb6:	8f ef       	ldi	r24, 0xFF	; 255
   16eb8:	9f ef       	ldi	r25, 0xFF	; 255
   16eba:	08 95       	ret
   16ebc:	c9 01       	movw	r24, r18
   16ebe:	08 95       	ret

00016ec0 <count_drive_types>:
   16ec0:	28 2f       	mov	r18, r24
   16ec2:	ef e4       	ldi	r30, 0x4F	; 79
   16ec4:	ff e1       	ldi	r31, 0x1F	; 31
   16ec6:	80 e0       	ldi	r24, 0x00	; 0
   16ec8:	90 e0       	ldi	r25, 0x00	; 0
   16eca:	30 81       	ld	r19, Z
   16ecc:	32 13       	cpse	r19, r18
   16ece:	01 c0       	rjmp	.+2      	; 0x16ed2 <count_drive_types+0x12>
   16ed0:	01 96       	adiw	r24, 0x01	; 1
   16ed2:	37 96       	adiw	r30, 0x07	; 7
   16ed4:	3f e1       	ldi	r19, 0x1F	; 31
   16ed6:	e7 38       	cpi	r30, 0x87	; 135
   16ed8:	f3 07       	cpc	r31, r19
   16eda:	b9 f7       	brne	.-18     	; 0x16eca <count_drive_types+0xa>
   16edc:	08 95       	ret

00016ede <type_to_str>:
   16ede:	00 97       	sbiw	r24, 0x00	; 0
   16ee0:	59 f0       	breq	.+22     	; 0x16ef8 <type_to_str+0x1a>
   16ee2:	81 30       	cpi	r24, 0x01	; 1
   16ee4:	91 05       	cpc	r25, r1
   16ee6:	59 f0       	breq	.+22     	; 0x16efe <type_to_str+0x20>
   16ee8:	82 30       	cpi	r24, 0x02	; 2
   16eea:	91 05       	cpc	r25, r1
   16eec:	59 f0       	breq	.+22     	; 0x16f04 <type_to_str+0x26>
   16eee:	03 97       	sbiw	r24, 0x03	; 3
   16ef0:	61 f0       	breq	.+24     	; 0x16f0a <type_to_str+0x2c>
   16ef2:	8b ef       	ldi	r24, 0xFB	; 251
   16ef4:	93 e1       	ldi	r25, 0x13	; 19
   16ef6:	08 95       	ret
   16ef8:	81 ed       	ldi	r24, 0xD1	; 209
   16efa:	93 e1       	ldi	r25, 0x13	; 19
   16efc:	08 95       	ret
   16efe:	89 ed       	ldi	r24, 0xD9	; 217
   16f00:	93 e1       	ldi	r25, 0x13	; 19
   16f02:	08 95       	ret
   16f04:	81 ef       	ldi	r24, 0xF1	; 241
   16f06:	93 e1       	ldi	r25, 0x13	; 19
   16f08:	08 95       	ret
   16f0a:	84 ee       	ldi	r24, 0xE4	; 228
   16f0c:	93 e1       	ldi	r25, 0x13	; 19
   16f0e:	08 95       	ret

00016f10 <find_free>:
   16f10:	80 e0       	ldi	r24, 0x00	; 0
   16f12:	90 e0       	ldi	r25, 0x00	; 0
   16f14:	c1 cf       	rjmp	.-126    	; 0x16e98 <find_type>
   16f16:	08 95       	ret

00016f18 <find_device>:
int find_device(int type, int address, int base)
{
    int i;

    ///@skip Only interested in device addresses
    if(address < BASE_MLA || address >(BASE_MSA+30))
   16f18:	9b 01       	movw	r18, r22
   16f1a:	20 52       	subi	r18, 0x20	; 32
   16f1c:	31 09       	sbc	r19, r1
   16f1e:	2f 35       	cpi	r18, 0x5F	; 95
   16f20:	31 05       	cpc	r19, r1
   16f22:	f8 f4       	brcc	.+62     	; 0x16f62 <find_device+0x4a>
        return(-1);

    ///@brief Make sure address is in expected range
    if(address < base || address > (base+30))
   16f24:	64 17       	cp	r22, r20
   16f26:	75 07       	cpc	r23, r21
   16f28:	e4 f0       	brlt	.+56     	; 0x16f62 <find_device+0x4a>
   16f2a:	9a 01       	movw	r18, r20
   16f2c:	22 5e       	subi	r18, 0xE2	; 226
   16f2e:	3f 4f       	sbci	r19, 0xFF	; 255
   16f30:	26 17       	cp	r18, r22
   16f32:	37 07       	cpc	r19, r23
   16f34:	b4 f0       	brlt	.+44     	; 0x16f62 <find_device+0x4a>
        return(-1);

    ///@brief convert to device address
    address -= base;
   16f36:	64 1b       	sub	r22, r20
   16f38:	75 0b       	sbc	r23, r21
   16f3a:	ef e4       	ldi	r30, 0x4F	; 79
   16f3c:	ff e1       	ldi	r31, 0x1F	; 31

    ///@brief search for device address
    for(i=0;i<MAX_DEVICES;++i)
   16f3e:	20 e0       	ldi	r18, 0x00	; 0
   16f40:	30 e0       	ldi	r19, 0x00	; 0
    {
        if(Devices[i].TYPE == type && Devices[i].ADDRESS == address)
   16f42:	40 81       	ld	r20, Z
   16f44:	50 e0       	ldi	r21, 0x00	; 0
   16f46:	48 17       	cp	r20, r24
   16f48:	59 07       	cpc	r21, r25
   16f4a:	29 f4       	brne	.+10     	; 0x16f56 <find_device+0x3e>
   16f4c:	41 81       	ldd	r20, Z+1	; 0x01
   16f4e:	50 e0       	ldi	r21, 0x00	; 0
   16f50:	64 17       	cp	r22, r20
   16f52:	75 07       	cpc	r23, r21
   16f54:	49 f0       	breq	.+18     	; 0x16f68 <find_device+0x50>

    ///@brief convert to device address
    address -= base;

    ///@brief search for device address
    for(i=0;i<MAX_DEVICES;++i)
   16f56:	2f 5f       	subi	r18, 0xFF	; 255
   16f58:	3f 4f       	sbci	r19, 0xFF	; 255
   16f5a:	37 96       	adiw	r30, 0x07	; 7
   16f5c:	28 30       	cpi	r18, 0x08	; 8
   16f5e:	31 05       	cpc	r19, r1
   16f60:	81 f7       	brne	.-32     	; 0x16f42 <find_device+0x2a>
{
    int i;

    ///@skip Only interested in device addresses
    if(address < BASE_MLA || address >(BASE_MSA+30))
        return(-1);
   16f62:	8f ef       	ldi	r24, 0xFF	; 255
   16f64:	9f ef       	ldi	r25, 0xFF	; 255
   16f66:	08 95       	ret
   16f68:	c9 01       	movw	r24, r18
    {
        if(Devices[i].TYPE == type && Devices[i].ADDRESS == address)
            return(i);
    }
    return(-1);
}
   16f6a:	08 95       	ret

00016f6c <set_active_device>:
/// Since we can be called multiple times per single GPIB state we do not
/// display state changes here. Other code displays the active state.
///@param index: Devices[] index
///@return 1 on success or 0 on fail
int set_active_device(int index)
{
   16f6c:	1f 93       	push	r17
   16f6e:	cf 93       	push	r28
   16f70:	df 93       	push	r29
    int type,address;

    ///@brief We also check for -1 
    /// So the result of find_device() can be used without additional tests
    if(index == -1)
   16f72:	8f 3f       	cpi	r24, 0xFF	; 255
   16f74:	2f ef       	ldi	r18, 0xFF	; 255
   16f76:	92 07       	cpc	r25, r18
   16f78:	09 f4       	brne	.+2      	; 0x16f7c <set_active_device+0x10>
   16f7a:	fc c0       	rjmp	.+504    	; 0x17174 <set_active_device+0x208>
   16f7c:	ec 01       	movw	r28, r24
    {
        return(0);
    }

    if(index < 0 || index >= MAX_DEVICES)
   16f7e:	08 97       	sbiw	r24, 0x08	; 8
   16f80:	c0 f0       	brcs	.+48     	; 0x16fb2 <set_active_device+0x46>
    {
        if(debuglevel & 1)
   16f82:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   16f86:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   16f8a:	9c 01       	movw	r18, r24
   16f8c:	21 70       	andi	r18, 0x01	; 1
   16f8e:	33 27       	eor	r19, r19
   16f90:	80 ff       	sbrs	r24, 0
   16f92:	f2 c0       	rjmp	.+484    	; 0x17178 <set_active_device+0x20c>
            printf("set_active_device:(%d) out of range\n", index);
   16f94:	df 93       	push	r29
   16f96:	cf 93       	push	r28
   16f98:	87 e0       	ldi	r24, 0x07	; 7
   16f9a:	92 e3       	ldi	r25, 0x32	; 50
   16f9c:	1f 92       	push	r1
   16f9e:	9f 93       	push	r25
   16fa0:	8f 93       	push	r24
   16fa2:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   16fa6:	0f 90       	pop	r0
   16fa8:	0f 90       	pop	r0
   16faa:	0f 90       	pop	r0
   16fac:	0f 90       	pop	r0
   16fae:	0f 90       	pop	r0
   16fb0:	e1 c0       	rjmp	.+450    	; 0x17174 <set_active_device+0x208>
        return(0);
    }

    type = Devices[index].TYPE;
    address = Devices[index].ADDRESS;
   16fb2:	87 e0       	ldi	r24, 0x07	; 7
   16fb4:	8c 9f       	mul	r24, r28
   16fb6:	f0 01       	movw	r30, r0
   16fb8:	8d 9f       	mul	r24, r29
   16fba:	f0 0d       	add	r31, r0
   16fbc:	11 24       	eor	r1, r1
   16fbe:	e1 5b       	subi	r30, 0xB1	; 177
   16fc0:	f0 4e       	sbci	r31, 0xE0	; 224
   16fc2:	81 81       	ldd	r24, Z+1	; 0x01
    if(address < 0 || address > 30)
   16fc4:	8f 31       	cpi	r24, 0x1F	; 31
   16fc6:	e8 f0       	brcs	.+58     	; 0x17002 <set_active_device+0x96>
    {
        if(debuglevel & 1)
   16fc8:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   16fcc:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   16fd0:	9a 01       	movw	r18, r20
   16fd2:	21 70       	andi	r18, 0x01	; 1
   16fd4:	33 27       	eor	r19, r19
   16fd6:	40 ff       	sbrs	r20, 0
   16fd8:	cf c0       	rjmp	.+414    	; 0x17178 <set_active_device+0x20c>
            printf("set_active_device: index:%d address: %02XH out of range\n", index,address);
   16fda:	1f 92       	push	r1
   16fdc:	8f 93       	push	r24
   16fde:	df 93       	push	r29
   16fe0:	cf 93       	push	r28
   16fe2:	8e ec       	ldi	r24, 0xCE	; 206
   16fe4:	91 e3       	ldi	r25, 0x31	; 49
   16fe6:	1f 92       	push	r1
   16fe8:	9f 93       	push	r25
   16fea:	8f 93       	push	r24
   16fec:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   16ff0:	8d b7       	in	r24, 0x3d	; 61
   16ff2:	9e b7       	in	r25, 0x3e	; 62
   16ff4:	07 96       	adiw	r24, 0x07	; 7
   16ff6:	0f b6       	in	r0, 0x3f	; 63
   16ff8:	f8 94       	cli
   16ffa:	9e bf       	out	0x3e, r25	; 62
   16ffc:	0f be       	out	0x3f, r0	; 63
   16ffe:	8d bf       	out	0x3d, r24	; 61
   17000:	b9 c0       	rjmp	.+370    	; 0x17174 <set_active_device+0x208>
        if(debuglevel & 1)
            printf("set_active_device:(%d) out of range\n", index);
        return(0);
    }

    type = Devices[index].TYPE;
   17002:	10 81       	ld	r17, Z
   17004:	81 2f       	mov	r24, r17
   17006:	90 e0       	ldi	r25, 0x00	; 0
        if(debuglevel & 1)
            printf("set_active_device: index:%d address: %02XH out of range\n", index,address);
        return(0);
    }

    if(Devices[index].dev == NULL)
   17008:	23 81       	ldd	r18, Z+3	; 0x03
   1700a:	34 81       	ldd	r19, Z+4	; 0x04
   1700c:	21 15       	cp	r18, r1
   1700e:	31 05       	cpc	r19, r1
   17010:	01 f5       	brne	.+64     	; 0x17052 <set_active_device+0xe6>
    {
        if(debuglevel & 1)
   17012:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   17016:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   1701a:	9a 01       	movw	r18, r20
   1701c:	21 70       	andi	r18, 0x01	; 1
   1701e:	33 27       	eor	r19, r19
   17020:	40 ff       	sbrs	r20, 0
            printf("set_active_device: index:%d type:%d:%s, dev == NULL\n", 
   17022:	aa c0       	rjmp	.+340    	; 0x17178 <set_active_device+0x20c>
   17024:	5c df       	rcall	.-328    	; 0x16ede <type_to_str>
   17026:	9f 93       	push	r25
   17028:	8f 93       	push	r24
   1702a:	1f 92       	push	r1
   1702c:	1f 93       	push	r17
   1702e:	df 93       	push	r29
   17030:	cf 93       	push	r28
   17032:	89 e9       	ldi	r24, 0x99	; 153
   17034:	91 e3       	ldi	r25, 0x31	; 49
   17036:	1f 92       	push	r1
   17038:	9f 93       	push	r25
   1703a:	8f 93       	push	r24
   1703c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   17040:	8d b7       	in	r24, 0x3d	; 61
   17042:	9e b7       	in	r25, 0x3e	; 62
   17044:	09 96       	adiw	r24, 0x09	; 9
   17046:	0f b6       	in	r0, 0x3f	; 63
   17048:	f8 94       	cli
   1704a:	9e bf       	out	0x3e, r25	; 62
   1704c:	0f be       	out	0x3f, r0	; 63
   1704e:	8d bf       	out	0x3d, r24	; 61
                index,type,type_to_str(type));
        return(0);
    }

    if(type == NO_TYPE)
   17050:	91 c0       	rjmp	.+290    	; 0x17174 <set_active_device+0x208>
   17052:	00 97       	sbiw	r24, 0x00	; 0
    {
        if(debuglevel & 1)
   17054:	11 f5       	brne	.+68     	; 0x1709a <set_active_device+0x12e>
   17056:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1705a:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1705e:	9c 01       	movw	r18, r24
   17060:	21 70       	andi	r18, 0x01	; 1
   17062:	33 27       	eor	r19, r19
   17064:	80 ff       	sbrs	r24, 0
            printf("set_active_device: index %d uninitalized type:%d:%s\n", 
   17066:	88 c0       	rjmp	.+272    	; 0x17178 <set_active_device+0x20c>
   17068:	80 e0       	ldi	r24, 0x00	; 0
   1706a:	90 e0       	ldi	r25, 0x00	; 0
   1706c:	38 df       	rcall	.-400    	; 0x16ede <type_to_str>
   1706e:	9f 93       	push	r25
   17070:	8f 93       	push	r24
   17072:	1f 92       	push	r1
   17074:	1f 92       	push	r1
   17076:	df 93       	push	r29
   17078:	cf 93       	push	r28
   1707a:	84 e6       	ldi	r24, 0x64	; 100
   1707c:	91 e3       	ldi	r25, 0x31	; 49
   1707e:	1f 92       	push	r1
   17080:	9f 93       	push	r25
   17082:	8f 93       	push	r24
   17084:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   17088:	8d b7       	in	r24, 0x3d	; 61
   1708a:	9e b7       	in	r25, 0x3e	; 62
   1708c:	09 96       	adiw	r24, 0x09	; 9
   1708e:	0f b6       	in	r0, 0x3f	; 63
   17090:	f8 94       	cli
   17092:	9e bf       	out	0x3e, r25	; 62
   17094:	0f be       	out	0x3f, r0	; 63
   17096:	8d bf       	out	0x3d, r24	; 61
                index,type,type_to_str(type));
        return(0);
    }

    if(type == PRINTER_TYPE)
   17098:	6d c0       	rjmp	.+218    	; 0x17174 <set_active_device+0x208>
   1709a:	83 30       	cpi	r24, 0x03	; 3
   1709c:	91 05       	cpc	r25, r1
    {
        PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   1709e:	29 f4       	brne	.+10     	; 0x170aa <set_active_device+0x13e>
   170a0:	30 93 ff 19 	sts	0x19FF, r19	; 0x8019ff <PRINTERp+0x1>
   170a4:	20 93 fe 19 	sts	0x19FE, r18	; 0x8019fe <PRINTERp>
        return(1);
    }

    if(type == AMIGO_TYPE || type == SS80_TYPE) 
   170a8:	43 c0       	rjmp	.+134    	; 0x17130 <set_active_device+0x1c4>
   170aa:	ac 01       	movw	r20, r24
   170ac:	41 50       	subi	r20, 0x01	; 1
   170ae:	51 09       	sbc	r21, r1
   170b0:	42 30       	cpi	r20, 0x02	; 2
   170b2:	51 05       	cpc	r21, r1
   170b4:	08 f0       	brcs	.+2      	; 0x170b8 <set_active_device+0x14c>
    {
        if(Devices[index].state == NULL)
   170b6:	3f c0       	rjmp	.+126    	; 0x17136 <set_active_device+0x1ca>
   170b8:	45 81       	ldd	r20, Z+5	; 0x05
   170ba:	56 81       	ldd	r21, Z+6	; 0x06
   170bc:	41 15       	cp	r20, r1
   170be:	51 05       	cpc	r21, r1
        {
            if(debuglevel & 1)
   170c0:	01 f5       	brne	.+64     	; 0x17102 <set_active_device+0x196>
   170c2:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   170c6:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   170ca:	9a 01       	movw	r18, r20
   170cc:	21 70       	andi	r18, 0x01	; 1
   170ce:	33 27       	eor	r19, r19
                printf("set_active_device: index: %d type:%d:%s, state == NULL\n",
   170d0:	40 ff       	sbrs	r20, 0
   170d2:	52 c0       	rjmp	.+164    	; 0x17178 <set_active_device+0x20c>
   170d4:	04 df       	rcall	.-504    	; 0x16ede <type_to_str>
   170d6:	9f 93       	push	r25
   170d8:	8f 93       	push	r24
   170da:	1f 92       	push	r1
   170dc:	1f 93       	push	r17
   170de:	df 93       	push	r29
   170e0:	cf 93       	push	r28
   170e2:	8c e2       	ldi	r24, 0x2C	; 44
   170e4:	91 e3       	ldi	r25, 0x31	; 49
   170e6:	1f 92       	push	r1
   170e8:	9f 93       	push	r25
   170ea:	8f 93       	push	r24
   170ec:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   170f0:	8d b7       	in	r24, 0x3d	; 61
   170f2:	9e b7       	in	r25, 0x3e	; 62
   170f4:	09 96       	adiw	r24, 0x09	; 9
   170f6:	0f b6       	in	r0, 0x3f	; 63
   170f8:	f8 94       	cli
   170fa:	9e bf       	out	0x3e, r25	; 62
   170fc:	0f be       	out	0x3f, r0	; 63
   170fe:	8d bf       	out	0x3d, r24	; 61
                     index,type,type_to_str(type));
            return(0);
        }
#ifdef AMIGO
        if(type == AMIGO_TYPE)
   17100:	39 c0       	rjmp	.+114    	; 0x17174 <set_active_device+0x208>
   17102:	81 30       	cpi	r24, 0x01	; 1
   17104:	91 05       	cpc	r25, r1
        {
            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   17106:	49 f4       	brne	.+18     	; 0x1711a <set_active_device+0x1ae>
   17108:	30 93 f9 19 	sts	0x19F9, r19	; 0x8019f9 <AMIGOp+0x1>
   1710c:	20 93 f8 19 	sts	0x19F8, r18	; 0x8019f8 <AMIGOp>
            AMIGOs = (AMIGOStateType *) Devices[index].state;
   17110:	50 93 f7 19 	sts	0x19F7, r21	; 0x8019f7 <AMIGOs+0x1>
   17114:	40 93 f6 19 	sts	0x19F6, r20	; 0x8019f6 <AMIGOs>
            return(1);
        }
#endif
        if(type == SS80_TYPE)
   17118:	0b c0       	rjmp	.+22     	; 0x17130 <set_active_device+0x1c4>
   1711a:	82 30       	cpi	r24, 0x02	; 2
   1711c:	91 05       	cpc	r25, r1
        {
            SS80p = (SS80DiskType *) Devices[index].dev;
   1711e:	59 f4       	brne	.+22     	; 0x17136 <set_active_device+0x1ca>
   17120:	30 93 fd 19 	sts	0x19FD, r19	; 0x8019fd <SS80p+0x1>
   17124:	20 93 fc 19 	sts	0x19FC, r18	; 0x8019fc <SS80p>
            SS80s = (SS80StateType *) Devices[index].state;
   17128:	50 93 fb 19 	sts	0x19FB, r21	; 0x8019fb <SS80s+0x1>
   1712c:	40 93 fa 19 	sts	0x19FA, r20	; 0x8019fa <SS80s>
            return(1);
   17130:	21 e0       	ldi	r18, 0x01	; 1
   17132:	30 e0       	ldi	r19, 0x00	; 0
        }
    }
    if(debuglevel & 1)
   17134:	21 c0       	rjmp	.+66     	; 0x17178 <set_active_device+0x20c>
   17136:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   1713a:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   1713e:	9a 01       	movw	r18, r20
   17140:	21 70       	andi	r18, 0x01	; 1
   17142:	33 27       	eor	r19, r19
        printf("set_active_device:(%d) invalid type:%d:%s\n", 
   17144:	40 ff       	sbrs	r20, 0
   17146:	18 c0       	rjmp	.+48     	; 0x17178 <set_active_device+0x20c>
   17148:	ca de       	rcall	.-620    	; 0x16ede <type_to_str>
   1714a:	9f 93       	push	r25
   1714c:	8f 93       	push	r24
   1714e:	1f 92       	push	r1
   17150:	1f 93       	push	r17
   17152:	df 93       	push	r29
   17154:	cf 93       	push	r28
   17156:	81 e0       	ldi	r24, 0x01	; 1
   17158:	91 e3       	ldi	r25, 0x31	; 49
   1715a:	1f 92       	push	r1
   1715c:	9f 93       	push	r25
   1715e:	8f 93       	push	r24
   17160:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   17164:	8d b7       	in	r24, 0x3d	; 61
   17166:	9e b7       	in	r25, 0x3e	; 62
   17168:	09 96       	adiw	r24, 0x09	; 9
   1716a:	0f b6       	in	r0, 0x3f	; 63
   1716c:	f8 94       	cli
   1716e:	9e bf       	out	0x3e, r25	; 62
   17170:	0f be       	out	0x3f, r0	; 63

    ///@brief We also check for -1 
    /// So the result of find_device() can be used without additional tests
    if(index == -1)
    {
        return(0);
   17172:	8d bf       	out	0x3d, r24	; 61
   17174:	20 e0       	ldi	r18, 0x00	; 0
    }
    if(debuglevel & 1)
        printf("set_active_device:(%d) invalid type:%d:%s\n", 
            index,type,type_to_str(type));
    return(0);
}
   17176:	30 e0       	ldi	r19, 0x00	; 0
   17178:	c9 01       	movw	r24, r18
   1717a:	df 91       	pop	r29
   1717c:	cf 91       	pop	r28
   1717e:	1f 91       	pop	r17
   17180:	08 95       	ret

00017182 <SS80_Initial_Defaults>:
///@brief Initialize Default Values for a new SS80 Device
/// Most values in the CONTROLER and UNIT are defaults that should not need to be specified
/// Note all of the values are zeroed on allocation including strings
///@return void
void SS80_Initial_Defaults(int index)
{
   17182:	0f 93       	push	r16
   17184:	1f 93       	push	r17
   17186:	cf 93       	push	r28
   17188:	df 93       	push	r29
	SS80DiskType *SS80p;
	SS80p = (SS80DiskType *) Devices[index].dev;
   1718a:	27 e0       	ldi	r18, 0x07	; 7
   1718c:	ac 01       	movw	r20, r24
   1718e:	24 9f       	mul	r18, r20
   17190:	c0 01       	movw	r24, r0
   17192:	25 9f       	mul	r18, r21
   17194:	90 0d       	add	r25, r0
   17196:	11 24       	eor	r1, r1
   17198:	fc 01       	movw	r30, r24
   1719a:	e1 5b       	subi	r30, 0xB1	; 177
   1719c:	f0 4e       	sbci	r31, 0xE0	; 224
   1719e:	c3 81       	ldd	r28, Z+3	; 0x03
   171a0:	d4 81       	ldd	r29, Z+4	; 0x04
	SS80p->HEADER.ADDRESS				= SS80DiskDefault.HEADER.ADDRESS;
   171a2:	05 e5       	ldi	r16, 0x55	; 85
   171a4:	12 e0       	ldi	r17, 0x02	; 2
   171a6:	f8 01       	movw	r30, r16
   171a8:	80 81       	ld	r24, Z
   171aa:	88 83       	st	Y, r24
	SS80p->HEADER.PPR					= SS80DiskDefault.HEADER.PPR;
   171ac:	81 81       	ldd	r24, Z+1	; 0x01
   171ae:	89 83       	std	Y+1, r24	; 0x01
	strncpy(SS80p->HEADER.NAME,SS80DiskDefault.HEADER.NAME,sizeof(SS80p->HEADER.NAME)-1);
   171b0:	40 e2       	ldi	r20, 0x20	; 32
   171b2:	50 e0       	ldi	r21, 0x00	; 0
   171b4:	67 e5       	ldi	r22, 0x57	; 87
   171b6:	72 e0       	ldi	r23, 0x02	; 2
   171b8:	ce 01       	movw	r24, r28
   171ba:	02 96       	adiw	r24, 0x02	; 2
   171bc:	0e 94 25 32 	call	0x644a	; 0x644a <strncpy>

	SS80p->CONFIG.ID					= SS80DiskDefault.CONFIG.ID;
   171c0:	f8 01       	movw	r30, r16
   171c2:	83 a1       	ldd	r24, Z+35	; 0x23
   171c4:	94 a1       	ldd	r25, Z+36	; 0x24
   171c6:	9c a3       	std	Y+36, r25	; 0x24
   171c8:	8b a3       	std	Y+35, r24	; 0x23
	SS80p->CONTROLLER.UNITS_INSTALLED	= SS80DiskDefault.CONTROLLER.UNITS_INSTALLED;
   171ca:	85 a1       	ldd	r24, Z+37	; 0x25
   171cc:	96 a1       	ldd	r25, Z+38	; 0x26
   171ce:	9e a3       	std	Y+38, r25	; 0x26
   171d0:	8d a3       	std	Y+37, r24	; 0x25
	SS80p->CONTROLLER.TRANSFER_RATE		= SS80DiskDefault.CONTROLLER.TRANSFER_RATE;
   171d2:	87 a1       	ldd	r24, Z+39	; 0x27
   171d4:	90 a5       	ldd	r25, Z+40	; 0x28
   171d6:	98 a7       	std	Y+40, r25	; 0x28
   171d8:	8f a3       	std	Y+39, r24	; 0x27
	SS80p->CONTROLLER.TYPE				= SS80DiskDefault.CONTROLLER.TYPE;
   171da:	81 a5       	ldd	r24, Z+41	; 0x29
   171dc:	89 a7       	std	Y+41, r24	; 0x29

	SS80p->UNIT.UNIT_TYPE				= SS80DiskDefault.UNIT.UNIT_TYPE;
   171de:	82 a5       	ldd	r24, Z+42	; 0x2a
   171e0:	8a a7       	std	Y+42, r24	; 0x2a
	SS80p->UNIT.DEVICE_NUMBER			= SS80DiskDefault.UNIT.DEVICE_NUMBER;
   171e2:	83 a5       	ldd	r24, Z+43	; 0x2b
   171e4:	94 a5       	ldd	r25, Z+44	; 0x2c
   171e6:	a5 a5       	ldd	r26, Z+45	; 0x2d
   171e8:	b6 a5       	ldd	r27, Z+46	; 0x2e
   171ea:	8b a7       	std	Y+43, r24	; 0x2b
   171ec:	9c a7       	std	Y+44, r25	; 0x2c
   171ee:	ad a7       	std	Y+45, r26	; 0x2d
   171f0:	be a7       	std	Y+46, r27	; 0x2e
	SS80p->UNIT.BYTES_PER_BLOCK			= SS80DiskDefault.UNIT.BYTES_PER_BLOCK;
   171f2:	87 a5       	ldd	r24, Z+47	; 0x2f
   171f4:	90 a9       	ldd	r25, Z+48	; 0x30
   171f6:	98 ab       	std	Y+48, r25	; 0x30
   171f8:	8f a7       	std	Y+47, r24	; 0x2f
	SS80p->UNIT.BUFFERED_BLOCKS			= SS80DiskDefault.UNIT.BUFFERED_BLOCKS;
   171fa:	81 a9       	ldd	r24, Z+49	; 0x31
   171fc:	89 ab       	std	Y+49, r24	; 0x31
	SS80p->UNIT.BURST_SIZE				= SS80DiskDefault.UNIT.BURST_SIZE;
   171fe:	82 a9       	ldd	r24, Z+50	; 0x32
   17200:	8a ab       	std	Y+50, r24	; 0x32
	SS80p->UNIT.BLOCK_TIME				= SS80DiskDefault.UNIT.BLOCK_TIME;
   17202:	83 a9       	ldd	r24, Z+51	; 0x33
   17204:	94 a9       	ldd	r25, Z+52	; 0x34
   17206:	9c ab       	std	Y+52, r25	; 0x34
   17208:	8b ab       	std	Y+51, r24	; 0x33
	SS80p->UNIT.CONTINOUS_TRANSFER_RATE	= SS80DiskDefault.UNIT.CONTINOUS_TRANSFER_RATE;
   1720a:	85 a9       	ldd	r24, Z+53	; 0x35
   1720c:	96 a9       	ldd	r25, Z+54	; 0x36
   1720e:	9e ab       	std	Y+54, r25	; 0x36
   17210:	8d ab       	std	Y+53, r24	; 0x35
	SS80p->UNIT.OPTIMAL_RETRY_TIME		= SS80DiskDefault.UNIT.OPTIMAL_RETRY_TIME;
   17212:	87 a9       	ldd	r24, Z+55	; 0x37
   17214:	90 ad       	ldd	r25, Z+56	; 0x38
   17216:	98 af       	std	Y+56, r25	; 0x38
   17218:	8f ab       	std	Y+55, r24	; 0x37
	SS80p->UNIT.ACCESS_TIME				= SS80DiskDefault.UNIT.ACCESS_TIME;
   1721a:	81 ad       	ldd	r24, Z+57	; 0x39
   1721c:	92 ad       	ldd	r25, Z+58	; 0x3a
   1721e:	9a af       	std	Y+58, r25	; 0x3a
   17220:	89 af       	std	Y+57, r24	; 0x39
	SS80p->UNIT.MAXIMUM_INTERLEAVE		= SS80DiskDefault.UNIT.MAXIMUM_INTERLEAVE;
   17222:	83 ad       	ldd	r24, Z+59	; 0x3b
   17224:	8b af       	std	Y+59, r24	; 0x3b
	SS80p->UNIT.FIXED_VOLUMES			= SS80DiskDefault.UNIT.FIXED_VOLUMES;
   17226:	84 ad       	ldd	r24, Z+60	; 0x3c
   17228:	8c af       	std	Y+60, r24	; 0x3c

	SS80p->VOLUME.MAX_CYLINDER			= SS80DiskDefault.VOLUME.MAX_CYLINDER;
   1722a:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <SS80DiskDefault+0x3e>
   1722e:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <SS80DiskDefault+0x3f>
   17232:	a0 91 95 02 	lds	r26, 0x0295	; 0x800295 <SS80DiskDefault+0x40>
   17236:	b0 91 96 02 	lds	r27, 0x0296	; 0x800296 <SS80DiskDefault+0x41>
   1723a:	fe 01       	movw	r30, r28
   1723c:	fe 96       	adiw	r30, 0x3e	; 62
   1723e:	80 83       	st	Z, r24
   17240:	91 83       	std	Z+1, r25	; 0x01
   17242:	a2 83       	std	Z+2, r26	; 0x02
   17244:	b3 83       	std	Z+3, r27	; 0x03
	SS80p->VOLUME.MAX_HEAD				= SS80DiskDefault.VOLUME.MAX_HEAD;
   17246:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <SS80DiskDefault+0x42>
   1724a:	34 96       	adiw	r30, 0x04	; 4
   1724c:	80 83       	st	Z, r24
	SS80p->VOLUME.MAX_SECTOR			= SS80DiskDefault.VOLUME.MAX_SECTOR;
   1724e:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <SS80DiskDefault+0x43>
   17252:	90 91 99 02 	lds	r25, 0x0299	; 0x800299 <SS80DiskDefault+0x44>
   17256:	31 96       	adiw	r30, 0x01	; 1
   17258:	91 83       	std	Z+1, r25	; 0x01
   1725a:	80 83       	st	Z, r24
	SS80p->VOLUME.MAX_BLOCK_NUMBER		= SS80DiskDefault.VOLUME.MAX_BLOCK_NUMBER;
   1725c:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <SS80DiskDefault+0x45>
   17260:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <SS80DiskDefault+0x46>
   17264:	a0 91 9c 02 	lds	r26, 0x029C	; 0x80029c <SS80DiskDefault+0x47>
   17268:	b0 91 9d 02 	lds	r27, 0x029D	; 0x80029d <SS80DiskDefault+0x48>
   1726c:	32 96       	adiw	r30, 0x02	; 2
   1726e:	80 83       	st	Z, r24
   17270:	91 83       	std	Z+1, r25	; 0x01
   17272:	a2 83       	std	Z+2, r26	; 0x02
   17274:	b3 83       	std	Z+3, r27	; 0x03
	SS80p->VOLUME.INTERLEAVE			= SS80DiskDefault.VOLUME.INTERLEAVE;
   17276:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <SS80DiskDefault+0x49>
   1727a:	c7 5b       	subi	r28, 0xB7	; 183
   1727c:	df 4f       	sbci	r29, 0xFF	; 255
   1727e:	88 83       	st	Y, r24
};
   17280:	df 91       	pop	r29
   17282:	cf 91       	pop	r28
   17284:	1f 91       	pop	r17
   17286:	0f 91       	pop	r16
   17288:	08 95       	ret

0001728a <alloc_device>:

///@brief Allocate a Device structure for a disk or printer
///@param type: disk type
///@return Devices[] index on sucess or -1
int alloc_device(int type)
{
   1728a:	0f 93       	push	r16
   1728c:	1f 93       	push	r17
   1728e:	cf 93       	push	r28
   17290:	df 93       	push	r29
    int ind;
    int index = -1;

    // Find a free slot
    ind = find_free();
   17292:	8c 01       	movw	r16, r24
   17294:	3d de       	rcall	.-902    	; 0x16f10 <find_free>
    if(ind == -1)
   17296:	ec 01       	movw	r28, r24
   17298:	cf 3f       	cpi	r28, 0xFF	; 255
   1729a:	8f ef       	ldi	r24, 0xFF	; 255
   1729c:	d8 07       	cpc	r29, r24
    {
        if(debuglevel & 1)
   1729e:	99 f4       	brne	.+38     	; 0x172c6 <alloc_device+0x3c>
   172a0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   172a4:	80 ff       	sbrs	r24, 0
            printf("alloc_device: Device table is full\n", type);
   172a6:	8a c0       	rjmp	.+276    	; 0x173bc <alloc_device+0x132>
   172a8:	1f 93       	push	r17
   172aa:	0f 93       	push	r16
   172ac:	8d ed       	ldi	r24, 0xDD	; 221
   172ae:	90 e3       	ldi	r25, 0x30	; 48
   172b0:	1f 92       	push	r1
   172b2:	9f 93       	push	r25
   172b4:	8f 93       	push	r24
   172b6:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   172ba:	0f 90       	pop	r0
   172bc:	0f 90       	pop	r0
   172be:	0f 90       	pop	r0
   172c0:	0f 90       	pop	r0
   172c2:	0f 90       	pop	r0
        return(ind);
    }

    switch(type)
   172c4:	7b c0       	rjmp	.+246    	; 0x173bc <alloc_device+0x132>
   172c6:	02 30       	cpi	r16, 0x02	; 2
   172c8:	11 05       	cpc	r17, r1
   172ca:	31 f1       	breq	.+76     	; 0x17318 <alloc_device+0x8e>
   172cc:	03 30       	cpi	r16, 0x03	; 3
   172ce:	11 05       	cpc	r17, r1
   172d0:	09 f4       	brne	.+2      	; 0x172d4 <alloc_device+0x4a>
   172d2:	42 c0       	rjmp	.+132    	; 0x17358 <alloc_device+0xce>
   172d4:	01 30       	cpi	r16, 0x01	; 1
   172d6:	11 05       	cpc	r17, r1
   172d8:	09 f0       	breq	.+2      	; 0x172dc <alloc_device+0x52>
            index = ind;
			SS80_Initial_Defaults(index);
            break;
#ifdef AMIGO
        case AMIGO_TYPE:
            Devices[ind].TYPE = type;
   172da:	55 c0       	rjmp	.+170    	; 0x17386 <alloc_device+0xfc>
   172dc:	87 e0       	ldi	r24, 0x07	; 7
   172de:	8c 9f       	mul	r24, r28
   172e0:	80 01       	movw	r16, r0
   172e2:	8d 9f       	mul	r24, r29
   172e4:	10 0d       	add	r17, r0
   172e6:	11 24       	eor	r1, r1
   172e8:	01 5b       	subi	r16, 0xB1	; 177
   172ea:	10 4e       	sbci	r17, 0xE0	; 224
   172ec:	81 e0       	ldi	r24, 0x01	; 1
   172ee:	f8 01       	movw	r30, r16
            Devices[ind].dev = safecalloc(sizeof(AMIGODiskType)+7,1);
   172f0:	80 83       	st	Z, r24
   172f2:	61 e0       	ldi	r22, 0x01	; 1
   172f4:	70 e0       	ldi	r23, 0x00	; 0
   172f6:	84 e3       	ldi	r24, 0x34	; 52
   172f8:	90 e0       	ldi	r25, 0x00	; 0
   172fa:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <safecalloc>
   172fe:	f8 01       	movw	r30, r16
   17300:	94 83       	std	Z+4, r25	; 0x04
            Devices[ind].state = safecalloc(sizeof(AMIGOStateType)+7,1);
   17302:	83 83       	std	Z+3, r24	; 0x03
   17304:	61 e0       	ldi	r22, 0x01	; 1
   17306:	70 e0       	ldi	r23, 0x00	; 0
   17308:	88 e1       	ldi	r24, 0x18	; 24
   1730a:	90 e0       	ldi	r25, 0x00	; 0
   1730c:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <safecalloc>
   17310:	f8 01       	movw	r30, r16
   17312:	96 83       	std	Z+6, r25	; 0x06
            index = ind;
            break;
   17314:	85 83       	std	Z+5, r24	; 0x05
    }

    switch(type)
    {
        case SS80_TYPE:
            Devices[ind].TYPE = type;
   17316:	52 c0       	rjmp	.+164    	; 0x173bc <alloc_device+0x132>
   17318:	87 e0       	ldi	r24, 0x07	; 7
   1731a:	8c 9f       	mul	r24, r28
   1731c:	80 01       	movw	r16, r0
   1731e:	8d 9f       	mul	r24, r29
   17320:	10 0d       	add	r17, r0
   17322:	11 24       	eor	r1, r1
   17324:	01 5b       	subi	r16, 0xB1	; 177
   17326:	10 4e       	sbci	r17, 0xE0	; 224
   17328:	82 e0       	ldi	r24, 0x02	; 2
   1732a:	f8 01       	movw	r30, r16
            Devices[ind].dev = safecalloc(sizeof(SS80DiskType)+7,1);
   1732c:	80 83       	st	Z, r24
   1732e:	61 e0       	ldi	r22, 0x01	; 1
   17330:	70 e0       	ldi	r23, 0x00	; 0
   17332:	81 e5       	ldi	r24, 0x51	; 81
   17334:	90 e0       	ldi	r25, 0x00	; 0
   17336:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <safecalloc>
   1733a:	f8 01       	movw	r30, r16
   1733c:	94 83       	std	Z+4, r25	; 0x04
            Devices[ind].state = safecalloc(sizeof(SS80StateType)+7,1);
   1733e:	83 83       	std	Z+3, r24	; 0x03
   17340:	61 e0       	ldi	r22, 0x01	; 1
   17342:	70 e0       	ldi	r23, 0x00	; 0
   17344:	86 e1       	ldi	r24, 0x16	; 22
   17346:	90 e0       	ldi	r25, 0x00	; 0
   17348:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <safecalloc>
   1734c:	f8 01       	movw	r30, r16
            index = ind;
			SS80_Initial_Defaults(index);
   1734e:	96 83       	std	Z+6, r25	; 0x06
   17350:	85 83       	std	Z+5, r24	; 0x05
            break;
   17352:	ce 01       	movw	r24, r28
            Devices[ind].state = safecalloc(sizeof(AMIGOStateType)+7,1);
            index = ind;
            break;
#endif
        case PRINTER_TYPE:
            Devices[ind].TYPE = type;
   17354:	16 df       	rcall	.-468    	; 0x17182 <SS80_Initial_Defaults>
   17356:	32 c0       	rjmp	.+100    	; 0x173bc <alloc_device+0x132>
   17358:	87 e0       	ldi	r24, 0x07	; 7
   1735a:	8c 9f       	mul	r24, r28
   1735c:	80 01       	movw	r16, r0
   1735e:	8d 9f       	mul	r24, r29
   17360:	10 0d       	add	r17, r0
   17362:	11 24       	eor	r1, r1
   17364:	01 5b       	subi	r16, 0xB1	; 177
   17366:	10 4e       	sbci	r17, 0xE0	; 224
   17368:	83 e0       	ldi	r24, 0x03	; 3
            Devices[ind].dev = safecalloc(sizeof(PRINTERDeviceType)+7,1);
   1736a:	f8 01       	movw	r30, r16
   1736c:	80 83       	st	Z, r24
   1736e:	61 e0       	ldi	r22, 0x01	; 1
   17370:	70 e0       	ldi	r23, 0x00	; 0
   17372:	8a e2       	ldi	r24, 0x2A	; 42
   17374:	90 e0       	ldi	r25, 0x00	; 0
   17376:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <safecalloc>
   1737a:	f8 01       	movw	r30, r16
            Devices[ind].state = NULL;
   1737c:	94 83       	std	Z+4, r25	; 0x04
   1737e:	83 83       	std	Z+3, r24	; 0x03
            index = ind;
            break;
   17380:	16 82       	std	Z+6, r1	; 0x06
        default:
            if(debuglevel & 1)
   17382:	15 82       	std	Z+5, r1	; 0x05
   17384:	1b c0       	rjmp	.+54     	; 0x173bc <alloc_device+0x132>
   17386:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
                printf("alloc_device: invalid type:%d:%s\n", type,type_to_str(type));
   1738a:	80 ff       	sbrs	r24, 0
   1738c:	15 c0       	rjmp	.+42     	; 0x173b8 <alloc_device+0x12e>
   1738e:	c8 01       	movw	r24, r16
   17390:	a6 dd       	rcall	.-1204   	; 0x16ede <type_to_str>
   17392:	9f 93       	push	r25
   17394:	8f 93       	push	r24
   17396:	1f 93       	push	r17
   17398:	0f 93       	push	r16
   1739a:	8b eb       	ldi	r24, 0xBB	; 187
   1739c:	90 e3       	ldi	r25, 0x30	; 48
   1739e:	1f 92       	push	r1
   173a0:	9f 93       	push	r25
   173a2:	8f 93       	push	r24
   173a4:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   173a8:	8d b7       	in	r24, 0x3d	; 61
   173aa:	9e b7       	in	r25, 0x3e	; 62
   173ac:	07 96       	adiw	r24, 0x07	; 7
   173ae:	0f b6       	in	r0, 0x3f	; 63
   173b0:	f8 94       	cli
   173b2:	9e bf       	out	0x3e, r25	; 62
   173b4:	0f be       	out	0x3f, r0	; 63
   173b6:	8d bf       	out	0x3d, r24	; 61
            break;
    }
    return(index);
}
   173b8:	cf ef       	ldi	r28, 0xFF	; 255
   173ba:	df ef       	ldi	r29, 0xFF	; 255
   173bc:	ce 01       	movw	r24, r28
   173be:	df 91       	pop	r29
   173c0:	cf 91       	pop	r28
   173c2:	1f 91       	pop	r17
   173c4:	0f 91       	pop	r16
   173c6:	08 95       	ret

000173c8 <init_Devices>:
/// @brief Init Config Parser Stack
/// Called only durring power up so we do not have to free memory
void init_Devices()
{
    int i;
    stack_ind = 0;
   173c8:	10 92 0b 1a 	sts	0x1A0B, r1	; 0x801a0b <stack_ind+0x1>
   173cc:	10 92 0a 1a 	sts	0x1A0A, r1	; 0x801a0a <stack_ind>
   173d0:	ef e4       	ldi	r30, 0x4F	; 79
   173d2:	ff e1       	ldi	r31, 0x1F	; 31
    for(i=0;i<MAX_DEVICES;++i)
    {
        Devices[i].TYPE = NO_TYPE;
        Devices[i].ADDRESS = 0;
        Devices[i].PPR = 0xff;
   173d4:	8f ef       	ldi	r24, 0xFF	; 255
{
    int i;
    stack_ind = 0;
    for(i=0;i<MAX_DEVICES;++i)
    {
        Devices[i].TYPE = NO_TYPE;
   173d6:	10 82       	st	Z, r1
        Devices[i].ADDRESS = 0;
   173d8:	11 82       	std	Z+1, r1	; 0x01
        Devices[i].PPR = 0xff;
   173da:	82 83       	std	Z+2, r24	; 0x02
        Devices[i].dev = NULL;
   173dc:	14 82       	std	Z+4, r1	; 0x04
   173de:	13 82       	std	Z+3, r1	; 0x03
        Devices[i].state = NULL;
   173e0:	16 82       	std	Z+6, r1	; 0x06
   173e2:	15 82       	std	Z+5, r1	; 0x05
   173e4:	37 96       	adiw	r30, 0x07	; 7
/// Called only durring power up so we do not have to free memory
void init_Devices()
{
    int i;
    stack_ind = 0;
    for(i=0;i<MAX_DEVICES;++i)
   173e6:	9f e1       	ldi	r25, 0x1F	; 31
   173e8:	e7 38       	cpi	r30, 0x87	; 135
   173ea:	f9 07       	cpc	r31, r25
   173ec:	a1 f7       	brne	.-24     	; 0x173d6 <init_Devices+0xe>
        Devices[i].ADDRESS = 0;
        Devices[i].PPR = 0xff;
        Devices[i].dev = NULL;
        Devices[i].state = NULL;
    }
}
   173ee:	08 95       	ret

000173f0 <push_state>:
/// @brief Push Parser State
/// @param state: parser state
/// @return state
int push_state(int state)
{
    if(stack_ind < MAX_STACK)
   173f0:	20 91 0a 1a 	lds	r18, 0x1A0A	; 0x801a0a <stack_ind>
   173f4:	30 91 0b 1a 	lds	r19, 0x1A0B	; 0x801a0b <stack_ind+0x1>
   173f8:	25 30       	cpi	r18, 0x05	; 5
   173fa:	31 05       	cpc	r19, r1
   173fc:	7c f4       	brge	.+30     	; 0x1741c <push_state+0x2c>
        stack_p[stack_ind++] = state;
   173fe:	a9 01       	movw	r20, r18
   17400:	4f 5f       	subi	r20, 0xFF	; 255
   17402:	5f 4f       	sbci	r21, 0xFF	; 255
   17404:	50 93 0b 1a 	sts	0x1A0B, r21	; 0x801a0b <stack_ind+0x1>
   17408:	40 93 0a 1a 	sts	0x1A0A, r20	; 0x801a0a <stack_ind>
   1740c:	22 0f       	add	r18, r18
   1740e:	33 1f       	adc	r19, r19
   17410:	f9 01       	movw	r30, r18
   17412:	e0 50       	subi	r30, 0x00	; 0
   17414:	f6 4e       	sbci	r31, 0xE6	; 230
   17416:	80 83       	st	Z, r24
   17418:	91 83       	std	Z+1, r25	; 0x01
    else
        return(START_STATE);
    return(state);
   1741a:	08 95       	ret
int push_state(int state)
{
    if(stack_ind < MAX_STACK)
        stack_p[stack_ind++] = state;
    else
        return(START_STATE);
   1741c:	80 e0       	ldi	r24, 0x00	; 0
   1741e:	90 e0       	ldi	r25, 0x00	; 0
    return(state);
}
   17420:	08 95       	ret

00017422 <pop_state>:

/// @brief Pop Parser State
/// @return state
int pop_state()
{
    if(stack_ind > 0)
   17422:	80 91 0a 1a 	lds	r24, 0x1A0A	; 0x801a0a <stack_ind>
   17426:	90 91 0b 1a 	lds	r25, 0x1A0B	; 0x801a0b <stack_ind+0x1>
   1742a:	18 16       	cp	r1, r24
   1742c:	19 06       	cpc	r1, r25
   1742e:	6c f4       	brge	.+26     	; 0x1744a <pop_state+0x28>
        return(stack_p[--stack_ind]);
   17430:	01 97       	sbiw	r24, 0x01	; 1
   17432:	90 93 0b 1a 	sts	0x1A0B, r25	; 0x801a0b <stack_ind+0x1>
   17436:	80 93 0a 1a 	sts	0x1A0A, r24	; 0x801a0a <stack_ind>
   1743a:	88 0f       	add	r24, r24
   1743c:	99 1f       	adc	r25, r25
   1743e:	fc 01       	movw	r30, r24
   17440:	e0 50       	subi	r30, 0x00	; 0
   17442:	f6 4e       	sbci	r31, 0xE6	; 230
   17444:	80 81       	ld	r24, Z
   17446:	91 81       	ldd	r25, Z+1	; 0x01
   17448:	08 95       	ret
    else
        return(START_STATE);
   1744a:	80 e0       	ldi	r24, 0x00	; 0
   1744c:	90 e0       	ldi	r25, 0x00	; 0
}
   1744e:	08 95       	ret

00017450 <assign_value>:
/// @param[in] maxval: maximum value
/// @param[in] *val: value to set
///
/// @return  1 is matched and value in range, 0 not matched or out of range
uint32_t assign_value(char *str, uint32_t minval, uint32_t maxval, uint32_t *val)
{
   17450:	a0 e0       	ldi	r26, 0x00	; 0
   17452:	b0 e0       	ldi	r27, 0x00	; 0
   17454:	ee e2       	ldi	r30, 0x2E	; 46
   17456:	fa eb       	ldi	r31, 0xBA	; 186
   17458:	0c 94 36 ec 	jmp	0x1d86c	; 0x1d86c <__prologue_saves__+0x4>
   1745c:	2a 01       	movw	r4, r20
   1745e:	3b 01       	movw	r6, r22
   17460:	48 01       	movw	r8, r16
   17462:	59 01       	movw	r10, r18
   17464:	87 01       	movw	r16, r14
    uint32_t tmp;
    int bad = 0;
    char *ptr;

    // Skip spaces before assignment
    ptr = skipspaces(str);
   17466:	0e 94 82 32 	call	0x6504	; 0x6504 <skipspaces>
   1746a:	ec 01       	movw	r28, r24
    // Skip optional '='
    if(*ptr == '=')
   1746c:	88 81       	ld	r24, Y
   1746e:	8d 33       	cpi	r24, 0x3D	; 61
   17470:	29 f4       	brne	.+10     	; 0x1747c <assign_value+0x2c>
    {
        ++ptr;
        // skip spaces after assignment
        ptr = skipspaces(ptr);
   17472:	ce 01       	movw	r24, r28
   17474:	01 96       	adiw	r24, 0x01	; 1
   17476:	0e 94 82 32 	call	0x6504	; 0x6504 <skipspaces>
   1747a:	ec 01       	movw	r28, r24
    }
    if(!*ptr)
   1747c:	88 81       	ld	r24, Y
   1747e:	81 11       	cpse	r24, r1
   17480:	17 c0       	rjmp	.+46     	; 0x174b0 <assign_value+0x60>
    {
        if(debuglevel & 1)
   17482:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   17486:	80 ff       	sbrs	r24, 0
   17488:	7a c0       	rjmp	.+244    	; 0x1757e <assign_value+0x12e>
            printf("line:%d, missing value\n", lines);
   1748a:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <lines+0x1>
   1748e:	8f 93       	push	r24
   17490:	80 91 f4 19 	lds	r24, 0x19F4	; 0x8019f4 <lines>
   17494:	8f 93       	push	r24
   17496:	83 ea       	ldi	r24, 0xA3	; 163
   17498:	90 e3       	ldi	r25, 0x30	; 48
   1749a:	1f 92       	push	r1
   1749c:	9f 93       	push	r25
   1749e:	8f 93       	push	r24
   174a0:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   174a4:	0f 90       	pop	r0
   174a6:	0f 90       	pop	r0
   174a8:	0f 90       	pop	r0
   174aa:	0f 90       	pop	r0
   174ac:	0f 90       	pop	r0
   174ae:	67 c0       	rjmp	.+206    	; 0x1757e <assign_value+0x12e>
        bad = 1;
    }
    if(!bad)
    {
        // FIXME detect bad numbers
        tmp = get_value(ptr);
   174b0:	ce 01       	movw	r24, r28
   174b2:	0e 94 ee 33 	call	0x67dc	; 0x67dc <get_value>
   174b6:	6b 01       	movw	r12, r22
   174b8:	7c 01       	movw	r14, r24
        *val = tmp;
   174ba:	f8 01       	movw	r30, r16
   174bc:	60 83       	st	Z, r22
   174be:	71 83       	std	Z+1, r23	; 0x01
   174c0:	82 83       	std	Z+2, r24	; 0x02
   174c2:	93 83       	std	Z+3, r25	; 0x03
        if((minval && (tmp < minval)))
   174c4:	41 14       	cp	r4, r1
   174c6:	51 04       	cpc	r5, r1
   174c8:	61 04       	cpc	r6, r1
   174ca:	71 04       	cpc	r7, r1
   174cc:	39 f1       	breq	.+78     	; 0x1751c <assign_value+0xcc>
   174ce:	c4 14       	cp	r12, r4
   174d0:	d5 04       	cpc	r13, r5
   174d2:	e6 04       	cpc	r14, r6
   174d4:	f7 04       	cpc	r15, r7
   174d6:	10 f5       	brcc	.+68     	; 0x1751c <assign_value+0xcc>
        {
            printf("line:%d, %s is below range %d\n", lines, ptr,(int)minval);
   174d8:	5f 92       	push	r5
   174da:	4f 92       	push	r4
   174dc:	df 93       	push	r29
   174de:	cf 93       	push	r28
   174e0:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <lines+0x1>
   174e4:	8f 93       	push	r24
   174e6:	80 91 f4 19 	lds	r24, 0x19F4	; 0x8019f4 <lines>
   174ea:	8f 93       	push	r24
   174ec:	84 e8       	ldi	r24, 0x84	; 132
   174ee:	90 e3       	ldi	r25, 0x30	; 48
   174f0:	1f 92       	push	r1
   174f2:	9f 93       	push	r25
   174f4:	8f 93       	push	r24
   174f6:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
            bad = 1;
        }
        if((maxval != 0xffffffffUL) && (tmp > maxval))
   174fa:	ed b7       	in	r30, 0x3d	; 61
   174fc:	fe b7       	in	r31, 0x3e	; 62
   174fe:	39 96       	adiw	r30, 0x09	; 9
   17500:	0f b6       	in	r0, 0x3f	; 63
   17502:	f8 94       	cli
   17504:	fe bf       	out	0x3e, r31	; 62
   17506:	0f be       	out	0x3f, r0	; 63
   17508:	ed bf       	out	0x3d, r30	; 61
   1750a:	ff ef       	ldi	r31, 0xFF	; 255
   1750c:	8f 16       	cp	r8, r31
   1750e:	9f 06       	cpc	r9, r31
   17510:	af 06       	cpc	r10, r31
   17512:	bf 06       	cpc	r11, r31
   17514:	a1 f1       	breq	.+104    	; 0x1757e <assign_value+0x12e>
        tmp = get_value(ptr);
        *val = tmp;
        if((minval && (tmp < minval)))
        {
            printf("line:%d, %s is below range %d\n", lines, ptr,(int)minval);
            bad = 1;
   17516:	61 e0       	ldi	r22, 0x01	; 1
   17518:	70 e0       	ldi	r23, 0x00	; 0
   1751a:	08 c0       	rjmp	.+16     	; 0x1752c <assign_value+0xdc>
        }
        if((maxval != 0xffffffffUL) && (tmp > maxval))
   1751c:	ff ef       	ldi	r31, 0xFF	; 255
   1751e:	8f 16       	cp	r8, r31
   17520:	9f 06       	cpc	r9, r31
   17522:	af 06       	cpc	r10, r31
   17524:	bf 06       	cpc	r11, r31
   17526:	31 f1       	breq	.+76     	; 0x17574 <assign_value+0x124>
   17528:	60 e0       	ldi	r22, 0x00	; 0
   1752a:	70 e0       	ldi	r23, 0x00	; 0
   1752c:	8c 14       	cp	r8, r12
   1752e:	9d 04       	cpc	r9, r13
   17530:	ae 04       	cpc	r10, r14
   17532:	bf 04       	cpc	r11, r15
   17534:	d0 f4       	brcc	.+52     	; 0x1756a <assign_value+0x11a>
        {
            printf("line:%d, %s is above range %d\n", lines, ptr,(int)maxval);
   17536:	9f 92       	push	r9
   17538:	8f 92       	push	r8
   1753a:	df 93       	push	r29
   1753c:	cf 93       	push	r28
   1753e:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <lines+0x1>
   17542:	8f 93       	push	r24
   17544:	80 91 f4 19 	lds	r24, 0x19F4	; 0x8019f4 <lines>
   17548:	8f 93       	push	r24
   1754a:	85 e6       	ldi	r24, 0x65	; 101
   1754c:	90 e3       	ldi	r25, 0x30	; 48
   1754e:	1f 92       	push	r1
   17550:	9f 93       	push	r25
   17552:	8f 93       	push	r24
   17554:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   17558:	ed b7       	in	r30, 0x3d	; 61
   1755a:	fe b7       	in	r31, 0x3e	; 62
   1755c:	39 96       	adiw	r30, 0x09	; 9
   1755e:	0f b6       	in	r0, 0x3f	; 63
   17560:	f8 94       	cli
   17562:	fe bf       	out	0x3e, r31	; 62
   17564:	0f be       	out	0x3f, r0	; 63
   17566:	ed bf       	out	0x3d, r30	; 61
   17568:	0a c0       	rjmp	.+20     	; 0x1757e <assign_value+0x12e>
            bad = 1;
        }
    }
    if(bad)
        return(0);
   1756a:	f1 e0       	ldi	r31, 0x01	; 1
   1756c:	6f 27       	eor	r22, r31
   1756e:	80 e0       	ldi	r24, 0x00	; 0
   17570:	90 e0       	ldi	r25, 0x00	; 0
   17572:	08 c0       	rjmp	.+16     	; 0x17584 <assign_value+0x134>
    return(1);
   17574:	61 e0       	ldi	r22, 0x01	; 1
   17576:	70 e0       	ldi	r23, 0x00	; 0
   17578:	80 e0       	ldi	r24, 0x00	; 0
   1757a:	90 e0       	ldi	r25, 0x00	; 0
   1757c:	03 c0       	rjmp	.+6      	; 0x17584 <assign_value+0x134>
            printf("line:%d, %s is above range %d\n", lines, ptr,(int)maxval);
            bad = 1;
        }
    }
    if(bad)
        return(0);
   1757e:	60 e0       	ldi	r22, 0x00	; 0
   17580:	70 e0       	ldi	r23, 0x00	; 0
   17582:	cb 01       	movw	r24, r22
    return(1);
}
   17584:	cd b7       	in	r28, 0x3d	; 61
   17586:	de b7       	in	r29, 0x3e	; 62
   17588:	e0 e1       	ldi	r30, 0x10	; 16
   1758a:	0c 94 52 ec 	jmp	0x1d8a4	; 0x1d8a4 <__epilogue_restores__+0x4>

0001758e <set_Config_Defaults>:

///@brief Set Defaults for any missing disk or printer devices
/// These are only used if the Config file omits them or is empty
/// @return  void
void set_Config_Defaults()
{
   1758e:	08 95       	ret

00017590 <POSIX_Read_Config>:
/// Set all drive parameters and debuglevel 
///
/// @param name: config file name to process
/// @return  number of parse errors
int POSIX_Read_Config(char *name)
{
   17590:	aa e9       	ldi	r26, 0x9A	; 154
   17592:	b0 e0       	ldi	r27, 0x00	; 0
   17594:	ee ec       	ldi	r30, 0xCE	; 206
   17596:	fa eb       	ldi	r31, 0xBA	; 186
   17598:	0c 94 34 ec 	jmp	0x1d868	; 0x1d868 <__prologue_saves__>
   1759c:	d8 2e       	mov	r13, r24
#endif

    char *ptr;
    char str[128];

    init_Devices();
   1759e:	c9 2e       	mov	r12, r25

    lines = 0;
   175a0:	13 df       	rcall	.-474    	; 0x173c8 <init_Devices>
   175a2:	10 92 f5 19 	sts	0x19F5, r1	; 0x8019f5 <lines+0x1>
   175a6:	10 92 f4 19 	sts	0x19F4, r1	; 0x8019f4 <lines>

    printf("Reading: %s\n", name);
   175aa:	cf 92       	push	r12
   175ac:	df 92       	push	r13
   175ae:	88 e5       	ldi	r24, 0x58	; 88
   175b0:	90 e3       	ldi	r25, 0x30	; 48
   175b2:	1f 92       	push	r1
   175b4:	9f 93       	push	r25
   175b6:	8f 93       	push	r24
   175b8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    cfg = fopen(name, "rb");
   175bc:	6a eb       	ldi	r22, 0xBA	; 186
   175be:	78 e0       	ldi	r23, 0x08	; 8
   175c0:	8d 2d       	mov	r24, r13
   175c2:	9c 2d       	mov	r25, r12
   175c4:	0e 94 dd 83 	call	0x107ba	; 0x107ba <fopen>
   175c8:	c9 57       	subi	r28, 0x79	; 121
   175ca:	df 4f       	sbci	r29, 0xFF	; 255
   175cc:	99 83       	std	Y+1, r25	; 0x01
   175ce:	88 83       	st	Y, r24
   175d0:	c7 58       	subi	r28, 0x87	; 135
    if(cfg == NULL)
   175d2:	d0 40       	sbci	r29, 0x00	; 0
   175d4:	0f 90       	pop	r0
   175d6:	0f 90       	pop	r0
   175d8:	0f 90       	pop	r0
   175da:	0f 90       	pop	r0
   175dc:	0f 90       	pop	r0
   175de:	89 2b       	or	r24, r25
   175e0:	09 f4       	brne	.+2      	; 0x175e4 <POSIX_Read_Config+0x54>
   175e2:	53 c0       	rjmp	.+166    	; 0x1768a <POSIX_Read_Config+0xfa>
   175e4:	21 2c       	mov	r2, r1
   175e6:	31 2c       	mov	r3, r1
   175e8:	41 2c       	mov	r4, r1
   175ea:	51 2c       	mov	r5, r1
   175ec:	cb 57       	subi	r28, 0x7B	; 123
   175ee:	df 4f       	sbci	r29, 0xFF	; 255
   175f0:	19 82       	std	Y+1, r1	; 0x01
   175f2:	18 82       	st	Y, r1
   175f4:	c5 58       	subi	r28, 0x85	; 133
   175f6:	d0 40       	sbci	r29, 0x00	; 0
   175f8:	61 2c       	mov	r6, r1
   175fa:	71 2c       	mov	r7, r1
   175fc:	a1 2c       	mov	r10, r1
   175fe:	b1 2c       	mov	r11, r1
   17600:	81 2c       	mov	r8, r1
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   17602:	91 2c       	mov	r9, r1
   17604:	81 e9       	ldi	r24, 0x91	; 145
   17606:	9d e2       	ldi	r25, 0x2D	; 45
   17608:	9c 01       	movw	r18, r24
   1760a:	40 e0       	ldi	r20, 0x00	; 0
   1760c:	c7 57       	subi	r28, 0x77	; 119
   1760e:	df 4f       	sbci	r29, 0xFF	; 255
   17610:	28 83       	st	Y, r18
   17612:	39 83       	std	Y+1, r19	; 0x01
   17614:	4a 83       	std	Y+2, r20	; 0x02
   17616:	c9 58       	subi	r28, 0x89	; 137
                    ++errors;
                AMIGOp->GEOMETRY.CYLINDERS = val;
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   17618:	d0 40       	sbci	r29, 0x00	; 0
   1761a:	83 eb       	ldi	r24, 0xB3	; 179
   1761c:	9d e2       	ldi	r25, 0x2D	; 45
   1761e:	9c 01       	movw	r18, r24
   17620:	40 e0       	ldi	r20, 0x00	; 0
   17622:	c4 57       	subi	r28, 0x74	; 116
   17624:	df 4f       	sbci	r29, 0xFF	; 255
   17626:	28 83       	st	Y, r18
   17628:	39 83       	std	Y+1, r19	; 0x01
   1762a:	4a 83       	std	Y+2, r20	; 0x02
   1762c:	cc 58       	subi	r28, 0x8C	; 140
                    ++errors;
                AMIGOp->CONFIG.ID = val;
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   1762e:	d0 40       	sbci	r29, 0x00	; 0
   17630:	83 ee       	ldi	r24, 0xE3	; 227
   17632:	9d e2       	ldi	r25, 0x2D	; 45
   17634:	9c 01       	movw	r18, r24
   17636:	40 e0       	ldi	r20, 0x00	; 0
   17638:	c1 57       	subi	r28, 0x71	; 113
   1763a:	df 4f       	sbci	r29, 0xFF	; 255
   1763c:	28 83       	st	Y, r18
   1763e:	39 83       	std	Y+1, r19	; 0x01
   17640:	4a 83       	std	Y+2, r20	; 0x02
   17642:	cf 58       	subi	r28, 0x8F	; 143
                strncpy(AMIGOp->HEADER.NAME, ptr, sizeof(AMIGOp->HEADER.NAME)-1);
                AMIGOp->HEADER.NAME[sizeof(AMIGOp->HEADER.NAME)-1] = 0;
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   17644:	d0 40       	sbci	r29, 0x00	; 0
   17646:	82 e1       	ldi	r24, 0x12	; 18
   17648:	9e e2       	ldi	r25, 0x2E	; 46
   1764a:	9c 01       	movw	r18, r24
   1764c:	40 e0       	ldi	r20, 0x00	; 0
   1764e:	ce 56       	subi	r28, 0x6E	; 110
   17650:	df 4f       	sbci	r29, 0xFF	; 255
   17652:	28 83       	st	Y, r18
   17654:	39 83       	std	Y+1, r19	; 0x01
   17656:	4a 83       	std	Y+2, r20	; 0x02
   17658:	c2 59       	subi	r28, 0x92	; 146

        case AMIGO_HEADER:
            if( (ind = token(ptr,"DRIVE")) )
            {
                ptr += ind;
                printf("Skipping %s, at line:%d\n", ptr,lines);
   1765a:	d0 40       	sbci	r29, 0x00	; 0
   1765c:	82 e4       	ldi	r24, 0x42	; 66
   1765e:	9e e2       	ldi	r25, 0x2E	; 46
   17660:	9c 01       	movw	r18, r24
   17662:	40 e0       	ldi	r20, 0x00	; 0
   17664:	cb 56       	subi	r28, 0x6B	; 107
   17666:	df 4f       	sbci	r29, 0xFF	; 255
   17668:	28 83       	st	Y, r18
   1766a:	39 83       	std	Y+1, r19	; 0x01
   1766c:	4a 83       	std	Y+2, r20	; 0x02
   1766e:	c5 59       	subi	r28, 0x95	; 149
                push_state(state);
                state = AMIGO_GEOMETRY;
            }
            else
            {
                printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   17670:	d0 40       	sbci	r29, 0x00	; 0
   17672:	8b e5       	ldi	r24, 0x5B	; 91
   17674:	9e e2       	ldi	r25, 0x2E	; 46
   17676:	9c 01       	movw	r18, r24
   17678:	40 e0       	ldi	r20, 0x00	; 0
   1767a:	c8 56       	subi	r28, 0x68	; 104
   1767c:	df 4f       	sbci	r29, 0xFF	; 255
   1767e:	28 83       	st	Y, r18
   17680:	39 83       	std	Y+1, r19	; 0x01
   17682:	4a 83       	std	Y+2, r20	; 0x02
   17684:	c8 59       	subi	r28, 0x98	; 152
   17686:	d0 40       	sbci	r29, 0x00	; 0
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
        //FIXME
        perror("Read_Config - open");
   17688:	2f c0       	rjmp	.+94     	; 0x176e8 <POSIX_Read_Config+0x158>
   1768a:	83 e2       	ldi	r24, 0x23	; 35
   1768c:	94 e1       	ldi	r25, 0x14	; 20
   1768e:	0e 94 b3 7d 	call	0xfb66	; 0xfb66 <perror>
        printf("Read_Config: open(%s) failed\n", name);
   17692:	cf 92       	push	r12
   17694:	df 92       	push	r13
   17696:	8a e3       	ldi	r24, 0x3A	; 58
   17698:	90 e3       	ldi	r25, 0x30	; 48
   1769a:	1f 92       	push	r1
   1769c:	9f 93       	push	r25
   1769e:	8f 93       	push	r24
   176a0:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        set_Config_Defaults();
        return(errors);
   176a4:	0f 90       	pop	r0
   176a6:	0f 90       	pop	r0
   176a8:	0f 90       	pop	r0
   176aa:	0f 90       	pop	r0
   176ac:	0f 90       	pop	r0
   176ae:	81 e0       	ldi	r24, 0x01	; 1
   176b0:	90 e0       	ldi	r25, 0x00	; 0
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   176b2:	db c7       	rjmp	.+4022   	; 0x1866a <POSIX_Read_Config+0x10da>
   176b4:	80 91 f4 19 	lds	r24, 0x19F4	; 0x8019f4 <lines>
   176b8:	90 91 f5 19 	lds	r25, 0x19F5	; 0x8019f5 <lines+0x1>
   176bc:	01 96       	adiw	r24, 0x01	; 1
   176be:	90 93 f5 19 	sts	0x19F5, r25	; 0x8019f5 <lines+0x1>
   176c2:	80 93 f4 19 	sts	0x19F4, r24	; 0x8019f4 <lines>

        ptr = str;

        trim_tail(ptr);
   176c6:	ce 01       	movw	r24, r28
   176c8:	01 96       	adiw	r24, 0x01	; 1
   176ca:	0e 94 74 32 	call	0x64e8	; 0x64e8 <trim_tail>
        ptr = skipspaces(ptr);
   176ce:	ce 01       	movw	r24, r28
   176d0:	01 96       	adiw	r24, 0x01	; 1
   176d2:	0e 94 82 32 	call	0x6504	; 0x6504 <skipspaces>
        len = strlen(ptr);
   176d6:	6c 01       	movw	r12, r24
   176d8:	fc 01       	movw	r30, r24
   176da:	01 90       	ld	r0, Z+
   176dc:	00 20       	and	r0, r0
   176de:	e9 f7       	brne	.-6      	; 0x176da <POSIX_Read_Config+0x14a>
        if(!len)
   176e0:	31 97       	sbiw	r30, 0x01	; 1
   176e2:	8e 17       	cp	r24, r30
   176e4:	9f 07       	cpc	r25, r31
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   176e6:	79 f4       	brne	.+30     	; 0x17706 <POSIX_Read_Config+0x176>
   176e8:	c9 57       	subi	r28, 0x79	; 121
   176ea:	df 4f       	sbci	r29, 0xFF	; 255
   176ec:	48 81       	ld	r20, Y
   176ee:	59 81       	ldd	r21, Y+1	; 0x01
   176f0:	c7 58       	subi	r28, 0x87	; 135
   176f2:	d0 40       	sbci	r29, 0x00	; 0
   176f4:	6e e7       	ldi	r22, 0x7E	; 126
   176f6:	70 e0       	ldi	r23, 0x00	; 0
   176f8:	ce 01       	movw	r24, r28
   176fa:	01 96       	adiw	r24, 0x01	; 1
   176fc:	0e 94 ed 7a 	call	0xf5da	; 0xf5da <fgets>
   17700:	89 2b       	or	r24, r25
   17702:	c1 f6       	brne	.-80     	; 0x176b4 <POSIX_Read_Config+0x124>
        ptr = skipspaces(ptr);
        len = strlen(ptr);
        if(!len)
            continue;
        // Skip comments
        if(*ptr == '#')
   17704:	65 c7       	rjmp	.+3786   	; 0x185d0 <POSIX_Read_Config+0x1040>
   17706:	dc 01       	movw	r26, r24
   17708:	8c 91       	ld	r24, X
   1770a:	83 32       	cpi	r24, 0x23	; 35
            continue;

        //FIXME check for state and last state
        if(token(ptr,"END"))
   1770c:	69 f3       	breq	.-38     	; 0x176e8 <POSIX_Read_Config+0x158>
   1770e:	66 e3       	ldi	r22, 0x36	; 54
   17710:	74 e1       	ldi	r23, 0x14	; 20
   17712:	c6 01       	movw	r24, r12
   17714:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
        {
            state = pop_state();
   17718:	89 2b       	or	r24, r25
   1771a:	19 f0       	breq	.+6      	; 0x17722 <POSIX_Read_Config+0x192>
   1771c:	82 de       	rcall	.-764    	; 0x17422 <pop_state>
            continue;
   1771e:	4c 01       	movw	r8, r24
        }

        switch(state)
   17720:	e3 cf       	rjmp	.-58     	; 0x176e8 <POSIX_Read_Config+0x158>
   17722:	bd e0       	ldi	r27, 0x0D	; 13
   17724:	8b 16       	cp	r8, r27
   17726:	91 04       	cpc	r9, r1
   17728:	08 f0       	brcs	.+2      	; 0x1772c <POSIX_Read_Config+0x19c>
   1772a:	32 c7       	rjmp	.+3684   	; 0x18590 <POSIX_Read_Config+0x1000>
   1772c:	f4 01       	movw	r30, r8
   1772e:	e5 52       	subi	r30, 0x25	; 37
   17730:	ff 4f       	sbci	r31, 0xFF	; 255
   17732:	0c 94 05 ec 	jmp	0x1d80a	; 0x1d80a <__tablejump2__>
        {
        case START_STATE:
            if(token(ptr,"SS80"))
   17736:	6a e3       	ldi	r22, 0x3A	; 58
   17738:	74 e1       	ldi	r23, 0x14	; 20
   1773a:	c6 01       	movw	r24, r12
   1773c:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
            {
                push_state(state);
   17740:	89 2b       	or	r24, r25
   17742:	b9 f0       	breq	.+46     	; 0x17772 <POSIX_Read_Config+0x1e2>
                state = SS80_STATE;
                index = alloc_device(SS80_TYPE);
   17744:	80 e0       	ldi	r24, 0x00	; 0
   17746:	90 e0       	ldi	r25, 0x00	; 0
   17748:	53 de       	rcall	.-858    	; 0x173f0 <push_state>
   1774a:	82 e0       	ldi	r24, 0x02	; 2
   1774c:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   1774e:	9d dd       	rcall	.-1222   	; 0x1728a <alloc_device>
   17750:	3c 01       	movw	r6, r24
                    state = START_STATE;
                else
                    SS80p = (SS80DiskType *) Devices[index].dev;
   17752:	01 96       	adiw	r24, 0x01	; 1
   17754:	49 f2       	breq	.-110    	; 0x176e8 <POSIX_Read_Config+0x158>
   17756:	87 e0       	ldi	r24, 0x07	; 7
   17758:	86 9d       	mul	r24, r6
   1775a:	f0 01       	movw	r30, r0
   1775c:	87 9d       	mul	r24, r7
   1775e:	f0 0d       	add	r31, r0
   17760:	11 24       	eor	r1, r1
   17762:	e1 5b       	subi	r30, 0xB1	; 177
   17764:	f0 4e       	sbci	r31, 0xE0	; 224
        {
        case START_STATE:
            if(token(ptr,"SS80"))
            {
                push_state(state);
                state = SS80_STATE;
   17766:	43 80       	ldd	r4, Z+3	; 0x03
   17768:	54 80       	ldd	r5, Z+4	; 0x04
   1776a:	88 24       	eor	r8, r8
   1776c:	83 94       	inc	r8
                else
                    SS80p = (SS80DiskType *) Devices[index].dev;

            }
#ifdef AMIGO
            else if(token(ptr,"AMIGO"))
   1776e:	91 2c       	mov	r9, r1
   17770:	bb cf       	rjmp	.-138    	; 0x176e8 <POSIX_Read_Config+0x158>
   17772:	6f e3       	ldi	r22, 0x3F	; 63
   17774:	74 e1       	ldi	r23, 0x14	; 20
   17776:	c6 01       	movw	r24, r12
   17778:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
            {
                push_state(state);
   1777c:	89 2b       	or	r24, r25
   1777e:	c1 f0       	breq	.+48     	; 0x177b0 <POSIX_Read_Config+0x220>
                state = AMIGO_STATE;
                index = alloc_device(AMIGO_TYPE);
   17780:	80 e0       	ldi	r24, 0x00	; 0
   17782:	90 e0       	ldi	r25, 0x00	; 0
   17784:	35 de       	rcall	.-918    	; 0x173f0 <push_state>
   17786:	81 e0       	ldi	r24, 0x01	; 1
   17788:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   1778a:	7f dd       	rcall	.-1282   	; 0x1728a <alloc_device>
   1778c:	3c 01       	movw	r6, r24
   1778e:	01 96       	adiw	r24, 0x01	; 1
                    state = START_STATE;
                else
                    AMIGOp = (AMIGODiskType *) Devices[index].dev;
   17790:	09 f4       	brne	.+2      	; 0x17794 <POSIX_Read_Config+0x204>
   17792:	aa cf       	rjmp	.-172    	; 0x176e8 <POSIX_Read_Config+0x158>
   17794:	87 e0       	ldi	r24, 0x07	; 7
   17796:	86 9d       	mul	r24, r6
   17798:	f0 01       	movw	r30, r0
   1779a:	87 9d       	mul	r24, r7
   1779c:	f0 0d       	add	r31, r0
   1779e:	11 24       	eor	r1, r1
   177a0:	e1 5b       	subi	r30, 0xB1	; 177
   177a2:	f0 4e       	sbci	r31, 0xE0	; 224
            }
#ifdef AMIGO
            else if(token(ptr,"AMIGO"))
            {
                push_state(state);
                state = AMIGO_STATE;
   177a4:	23 80       	ldd	r2, Z+3	; 0x03
   177a6:	34 80       	ldd	r3, Z+4	; 0x04
   177a8:	a7 e0       	ldi	r26, 0x07	; 7
   177aa:	8a 2e       	mov	r8, r26
                else
                    AMIGOp = (AMIGODiskType *) Devices[index].dev;

            }
#endif
            else if(token(ptr,"PRINTER"))
   177ac:	91 2c       	mov	r9, r1
   177ae:	9c cf       	rjmp	.-200    	; 0x176e8 <POSIX_Read_Config+0x158>
   177b0:	65 e4       	ldi	r22, 0x45	; 69
   177b2:	74 e1       	ldi	r23, 0x14	; 20
   177b4:	c6 01       	movw	r24, r12
            {
                push_state(state);
   177b6:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   177ba:	89 2b       	or	r24, r25
   177bc:	f1 f0       	breq	.+60     	; 0x177fa <POSIX_Read_Config+0x26a>
                state = PRINTER_STATE;
                index = alloc_device(PRINTER_TYPE);
   177be:	80 e0       	ldi	r24, 0x00	; 0
   177c0:	90 e0       	ldi	r25, 0x00	; 0
   177c2:	16 de       	rcall	.-980    	; 0x173f0 <push_state>
   177c4:	83 e0       	ldi	r24, 0x03	; 3
   177c6:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   177c8:	60 dd       	rcall	.-1344   	; 0x1728a <alloc_device>
   177ca:	3c 01       	movw	r6, r24
   177cc:	01 96       	adiw	r24, 0x01	; 1
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   177ce:	09 f4       	brne	.+2      	; 0x177d2 <POSIX_Read_Config+0x242>
   177d0:	8b cf       	rjmp	.-234    	; 0x176e8 <POSIX_Read_Config+0x158>
   177d2:	87 e0       	ldi	r24, 0x07	; 7
   177d4:	86 9d       	mul	r24, r6
   177d6:	f0 01       	movw	r30, r0
   177d8:	87 9d       	mul	r24, r7
   177da:	f0 0d       	add	r31, r0
   177dc:	11 24       	eor	r1, r1
   177de:	e1 5b       	subi	r30, 0xB1	; 177
   177e0:	f0 4e       	sbci	r31, 0xE0	; 224
   177e2:	83 81       	ldd	r24, Z+3	; 0x03
   177e4:	94 81       	ldd	r25, Z+4	; 0x04
   177e6:	cb 57       	subi	r28, 0x7B	; 123
   177e8:	df 4f       	sbci	r29, 0xFF	; 255
   177ea:	99 83       	std	Y+1, r25	; 0x01
   177ec:	88 83       	st	Y, r24
            }
#endif
            else if(token(ptr,"PRINTER"))
            {
                push_state(state);
                state = PRINTER_STATE;
   177ee:	c5 58       	subi	r28, 0x85	; 133
   177f0:	d0 40       	sbci	r29, 0x00	; 0
   177f2:	fb e0       	ldi	r31, 0x0B	; 11
   177f4:	8f 2e       	mov	r8, r31
                if(index == -1)
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
            }
            else if( (ind = token(ptr,"DEBUG")) )
   177f6:	91 2c       	mov	r9, r1
   177f8:	77 cf       	rjmp	.-274    	; 0x176e8 <POSIX_Read_Config+0x158>
   177fa:	6d e4       	ldi	r22, 0x4D	; 77
   177fc:	74 e1       	ldi	r23, 0x14	; 20
   177fe:	c6 01       	movw	r24, r12
   17800:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
            {
                ptr += ind;
                if ( assign_value(ptr, 0, 65535, &val) )
   17804:	00 97       	sbiw	r24, 0x00	; 0
   17806:	f1 f0       	breq	.+60     	; 0x17844 <POSIX_Read_Config+0x2b4>
   17808:	de 01       	movw	r26, r28
   1780a:	af 57       	subi	r26, 0x7F	; 127
   1780c:	bf 4f       	sbci	r27, 0xFF	; 255
   1780e:	7d 01       	movw	r14, r26
   17810:	0f ef       	ldi	r16, 0xFF	; 255
   17812:	1f ef       	ldi	r17, 0xFF	; 255
   17814:	20 e0       	ldi	r18, 0x00	; 0
   17816:	30 e0       	ldi	r19, 0x00	; 0
   17818:	40 e0       	ldi	r20, 0x00	; 0
   1781a:	50 e0       	ldi	r21, 0x00	; 0
   1781c:	ba 01       	movw	r22, r20
   1781e:	8c 0d       	add	r24, r12
   17820:	9d 1d       	adc	r25, r13
   17822:	16 de       	rcall	.-980    	; 0x17450 <assign_value>
   17824:	67 2b       	or	r22, r23
   17826:	68 2b       	or	r22, r24
   17828:	69 2b       	or	r22, r25
                    debuglevel = val;
   1782a:	09 f4       	brne	.+2      	; 0x1782e <POSIX_Read_Config+0x29e>
   1782c:	5d cf       	rjmp	.-326    	; 0x176e8 <POSIX_Read_Config+0x158>
   1782e:	cf 57       	subi	r28, 0x7F	; 127
   17830:	df 4f       	sbci	r29, 0xFF	; 255
   17832:	88 81       	ld	r24, Y
   17834:	99 81       	ldd	r25, Y+1	; 0x01
   17836:	c1 58       	subi	r28, 0x81	; 129
   17838:	d0 40       	sbci	r29, 0x00	; 0
   1783a:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <debuglevel+0x1>
   1783e:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <debuglevel>
            }
            else if( (ind = token(ptr,"PRINTER_DEFAULT_ADDRESS")) )
   17842:	52 cf       	rjmp	.-348    	; 0x176e8 <POSIX_Read_Config+0x158>
   17844:	63 e5       	ldi	r22, 0x53	; 83
   17846:	74 e1       	ldi	r23, 0x14	; 20
   17848:	c6 01       	movw	r24, r12
   1784a:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   1784e:	30 91 f5 19 	lds	r19, 0x19F5	; 0x8019f5 <lines+0x1>
   17852:	20 91 f4 19 	lds	r18, 0x19F4	; 0x8019f4 <lines>
            {
                ptr += ind;
                //FIXME REMOVE from config
                printf("Skipping %s, at line:%d\n", ptr,lines);
   17856:	00 97       	sbiw	r24, 0x00	; 0
   17858:	61 f0       	breq	.+24     	; 0x17872 <POSIX_Read_Config+0x2e2>
   1785a:	3f 93       	push	r19
   1785c:	2f 93       	push	r18
   1785e:	c8 0e       	add	r12, r24
   17860:	d9 1e       	adc	r13, r25
   17862:	df 92       	push	r13
   17864:	cf 92       	push	r12
   17866:	81 e2       	ldi	r24, 0x21	; 33
   17868:	90 e3       	ldi	r25, 0x30	; 48
   1786a:	1f 92       	push	r1
   1786c:	9f 93       	push	r25
            }
            else
            {
                printf("Unexpected START token: %s, at line:%d\n", ptr,lines);
   1786e:	8f 93       	push	r24
   17870:	00 c5       	rjmp	.+2560   	; 0x18272 <POSIX_Read_Config+0xce2>
   17872:	3f 93       	push	r19
   17874:	2f 93       	push	r18
   17876:	df 92       	push	r13
   17878:	cf 92       	push	r12
                ++errors;
            }
            break;

        case PRINTER_STATE:
            if(token(ptr,"CONFIG"))
   1787a:	89 ef       	ldi	r24, 0xF9	; 249
   1787c:	9f e2       	ldi	r25, 0x2F	; 47
   1787e:	b5 c0       	rjmp	.+362    	; 0x179ea <POSIX_Read_Config+0x45a>
   17880:	6b e6       	ldi	r22, 0x6B	; 107
   17882:	74 e1       	ldi	r23, 0x14	; 20
   17884:	c6 01       	movw	r24, r12
            {
                push_state(state);
   17886:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   1788a:	89 2b       	or	r24, r25
   1788c:	39 f0       	breq	.+14     	; 0x1789c <POSIX_Read_Config+0x30c>
                state = PRINTER_CONFIG;
   1788e:	8b e0       	ldi	r24, 0x0B	; 11
   17890:	90 e0       	ldi	r25, 0x00	; 0
   17892:	ae dd       	rcall	.-1188   	; 0x173f0 <push_state>
   17894:	ec e0       	ldi	r30, 0x0C	; 12
            }
            else
            {
                printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   17896:	8e 2e       	mov	r8, r30
   17898:	91 2c       	mov	r9, r1
   1789a:	26 cf       	rjmp	.-436    	; 0x176e8 <POSIX_Read_Config+0x158>
   1789c:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <lines+0x1>
   178a0:	8f 93       	push	r24
   178a2:	80 91 f4 19 	lds	r24, 0x19F4	; 0x8019f4 <lines>
   178a6:	8f 93       	push	r24
   178a8:	df 92       	push	r13
   178aa:	cf 92       	push	r12
   178ac:	8f ec       	ldi	r24, 0xCF	; 207
   178ae:	9f e2       	ldi	r25, 0x2F	; 47
   178b0:	1f 92       	push	r1
                ++errors;
            }
            break;

        case PRINTER_CONFIG:
            if( (ind = token(ptr,"ADDRESS")) )
   178b2:	9f 93       	push	r25
   178b4:	8f 93       	push	r24
   178b6:	aa c5       	rjmp	.+2900   	; 0x1840c <POSIX_Read_Config+0xe7c>
   178b8:	63 e6       	ldi	r22, 0x63	; 99
   178ba:	74 e1       	ldi	r23, 0x14	; 20
   178bc:	c6 01       	movw	r24, r12
   178be:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
            {
                ptr += ind;
                
                tmp = 0xff;
                if (!assign_value(ptr, 0, 14, &val) )
   178c2:	00 97       	sbiw	r24, 0x00	; 0
   178c4:	79 f1       	breq	.+94     	; 0x17924 <POSIX_Read_Config+0x394>
   178c6:	de 01       	movw	r26, r28
   178c8:	af 57       	subi	r26, 0x7F	; 127
   178ca:	bf 4f       	sbci	r27, 0xFF	; 255
   178cc:	7d 01       	movw	r14, r26
   178ce:	0e e0       	ldi	r16, 0x0E	; 14
   178d0:	10 e0       	ldi	r17, 0x00	; 0
   178d2:	20 e0       	ldi	r18, 0x00	; 0
   178d4:	30 e0       	ldi	r19, 0x00	; 0
   178d6:	40 e0       	ldi	r20, 0x00	; 0
   178d8:	50 e0       	ldi	r21, 0x00	; 0
   178da:	ba 01       	movw	r22, r20
   178dc:	8c 0d       	add	r24, r12
   178de:	9d 1d       	adc	r25, r13
   178e0:	b7 dd       	rcall	.-1170   	; 0x17450 <assign_value>
   178e2:	67 2b       	or	r22, r23
                    ++errors;
   178e4:	68 2b       	or	r22, r24
   178e6:	69 2b       	or	r22, r25
   178e8:	29 f4       	brne	.+10     	; 0x178f4 <POSIX_Read_Config+0x364>
        case PRINTER_CONFIG:
            if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                
                tmp = 0xff;
   178ea:	bf ef       	ldi	r27, 0xFF	; 255
   178ec:	ab 1a       	sub	r10, r27
                if (!assign_value(ptr, 0, 14, &val) )
                    ++errors;
                else
                    tmp = val;
   178ee:	bb 0a       	sbc	r11, r27
   178f0:	8f ef       	ldi	r24, 0xFF	; 255
   178f2:	05 c0       	rjmp	.+10     	; 0x178fe <POSIX_Read_Config+0x36e>
   178f4:	cf 57       	subi	r28, 0x7F	; 127
   178f6:	df 4f       	sbci	r29, 0xFF	; 255
                Devices[index].ADDRESS = tmp;
   178f8:	88 81       	ld	r24, Y
   178fa:	c1 58       	subi	r28, 0x81	; 129
   178fc:	d0 40       	sbci	r29, 0x00	; 0
   178fe:	97 e0       	ldi	r25, 0x07	; 7
   17900:	96 9d       	mul	r25, r6
   17902:	f0 01       	movw	r30, r0
   17904:	97 9d       	mul	r25, r7
   17906:	f0 0d       	add	r31, r0
   17908:	11 24       	eor	r1, r1
                PRINTERp->HEADER.ADDRESS  = tmp;
   1790a:	e1 5b       	subi	r30, 0xB1	; 177
   1790c:	f0 4e       	sbci	r31, 0xE0	; 224
   1790e:	81 83       	std	Z+1, r24	; 0x01
   17910:	cb 57       	subi	r28, 0x7B	; 123
   17912:	df 4f       	sbci	r29, 0xFF	; 255
   17914:	a8 81       	ld	r26, Y
   17916:	b9 81       	ldd	r27, Y+1	; 0x01
                // NO PPR
                Devices[index].PPR = 0xff;
   17918:	c5 58       	subi	r28, 0x85	; 133
   1791a:	d0 40       	sbci	r29, 0x00	; 0
   1791c:	8c 93       	st	X, r24
                PRINTERp->HEADER.PPR = 0xff;
            }
            else
            {
                printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   1791e:	8f ef       	ldi	r24, 0xFF	; 255
   17920:	82 83       	std	Z+2, r24	; 0x02
   17922:	c2 c0       	rjmp	.+388    	; 0x17aa8 <POSIX_Read_Config+0x518>
   17924:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <lines+0x1>
   17928:	8f 93       	push	r24
   1792a:	80 91 f4 19 	lds	r24, 0x19F4	; 0x8019f4 <lines>
   1792e:	8f 93       	push	r24
   17930:	df 92       	push	r13
   17932:	cf 92       	push	r12
   17934:	8e e9       	ldi	r24, 0x9E	; 158
   17936:	9f e2       	ldi	r25, 0x2F	; 47
   17938:	1f 92       	push	r1
   1793a:	9f 93       	push	r25
                ++errors;
   1793c:	8f 93       	push	r24
   1793e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
            }
            break;

        case SS80_STATE:
            if(token(ptr,"HEADER"))
   17942:	bf ef       	ldi	r27, 0xFF	; 255
   17944:	ab 1a       	sub	r10, r27
   17946:	bb 0a       	sbc	r11, r27
   17948:	3d c6       	rjmp	.+3194   	; 0x185c4 <POSIX_Read_Config+0x1034>
   1794a:	62 e7       	ldi	r22, 0x72	; 114
   1794c:	74 e1       	ldi	r23, 0x14	; 20
   1794e:	c6 01       	movw	r24, r12
            {
                push_state(state);
   17950:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   17954:	89 2b       	or	r24, r25
   17956:	39 f0       	breq	.+14     	; 0x17966 <POSIX_Read_Config+0x3d6>
                state = SS80_HEADER;
   17958:	81 e0       	ldi	r24, 0x01	; 1
   1795a:	90 e0       	ldi	r25, 0x00	; 0
   1795c:	49 dd       	rcall	.-1390   	; 0x173f0 <push_state>
            }
            else if(token(ptr,"CONFIG"))
   1795e:	72 e0       	ldi	r23, 0x02	; 2
   17960:	87 2e       	mov	r8, r23
   17962:	91 2c       	mov	r9, r1
   17964:	c1 ce       	rjmp	.-638    	; 0x176e8 <POSIX_Read_Config+0x158>
   17966:	6b e6       	ldi	r22, 0x6B	; 107
   17968:	74 e1       	ldi	r23, 0x14	; 20
   1796a:	c6 01       	movw	r24, r12
            {
                push_state(state);
   1796c:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   17970:	89 2b       	or	r24, r25
                state = SS80_CONFIG;
   17972:	39 f0       	breq	.+14     	; 0x17982 <POSIX_Read_Config+0x3f2>
   17974:	81 e0       	ldi	r24, 0x01	; 1
   17976:	90 e0       	ldi	r25, 0x00	; 0
            }
            else if(token(ptr,"CONTROLLER"))
   17978:	3b dd       	rcall	.-1418   	; 0x173f0 <push_state>
   1797a:	63 e0       	ldi	r22, 0x03	; 3
   1797c:	86 2e       	mov	r8, r22
   1797e:	91 2c       	mov	r9, r1
   17980:	b3 ce       	rjmp	.-666    	; 0x176e8 <POSIX_Read_Config+0x158>
   17982:	69 e7       	ldi	r22, 0x79	; 121
   17984:	74 e1       	ldi	r23, 0x14	; 20
            {
                push_state(state);
   17986:	c6 01       	movw	r24, r12
   17988:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
                state = SS80_CONTROLLER;
   1798c:	89 2b       	or	r24, r25
   1798e:	39 f0       	breq	.+14     	; 0x1799e <POSIX_Read_Config+0x40e>
   17990:	81 e0       	ldi	r24, 0x01	; 1
   17992:	90 e0       	ldi	r25, 0x00	; 0
            }
            else if(token(ptr,"UNIT"))
   17994:	2d dd       	rcall	.-1446   	; 0x173f0 <push_state>
   17996:	54 e0       	ldi	r21, 0x04	; 4
   17998:	85 2e       	mov	r8, r21
   1799a:	91 2c       	mov	r9, r1
   1799c:	a5 ce       	rjmp	.-694    	; 0x176e8 <POSIX_Read_Config+0x158>
   1799e:	64 e8       	ldi	r22, 0x84	; 132
   179a0:	74 e1       	ldi	r23, 0x14	; 20
            {
                push_state(state);
   179a2:	c6 01       	movw	r24, r12
   179a4:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
                state = SS80_UNIT;
   179a8:	89 2b       	or	r24, r25
   179aa:	39 f0       	breq	.+14     	; 0x179ba <POSIX_Read_Config+0x42a>
   179ac:	81 e0       	ldi	r24, 0x01	; 1
   179ae:	90 e0       	ldi	r25, 0x00	; 0
            }
            else if(token(ptr,"VOLUME"))
   179b0:	1f dd       	rcall	.-1474   	; 0x173f0 <push_state>
   179b2:	45 e0       	ldi	r20, 0x05	; 5
   179b4:	84 2e       	mov	r8, r20
   179b6:	91 2c       	mov	r9, r1
   179b8:	97 ce       	rjmp	.-722    	; 0x176e8 <POSIX_Read_Config+0x158>
   179ba:	69 e8       	ldi	r22, 0x89	; 137
   179bc:	74 e1       	ldi	r23, 0x14	; 20
            {
                push_state(state);
   179be:	c6 01       	movw	r24, r12
   179c0:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   179c4:	89 2b       	or	r24, r25
                state = SS80_VOLUME;
   179c6:	39 f0       	breq	.+14     	; 0x179d6 <POSIX_Read_Config+0x446>
   179c8:	81 e0       	ldi	r24, 0x01	; 1
   179ca:	90 e0       	ldi	r25, 0x00	; 0
   179cc:	11 dd       	rcall	.-1502   	; 0x173f0 <push_state>
            }
            else
            {
                printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   179ce:	36 e0       	ldi	r19, 0x06	; 6
   179d0:	83 2e       	mov	r8, r19
   179d2:	91 2c       	mov	r9, r1
   179d4:	89 ce       	rjmp	.-750    	; 0x176e8 <POSIX_Read_Config+0x158>
   179d6:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <lines+0x1>
   179da:	8f 93       	push	r24
   179dc:	80 91 f4 19 	lds	r24, 0x19F4	; 0x8019f4 <lines>
   179e0:	8f 93       	push	r24
   179e2:	df 92       	push	r13
   179e4:	cf 92       	push	r12
   179e6:	81 e7       	ldi	r24, 0x71	; 113
   179e8:	9f e2       	ldi	r25, 0x2F	; 47
            }
            break;


        case SS80_HEADER:
            if( (ind = token(ptr,"ADDRESS")) )
   179ea:	1f 92       	push	r1
   179ec:	9f 93       	push	r25
   179ee:	8f 93       	push	r24
   179f0:	c9 c5       	rjmp	.+2962   	; 0x18584 <POSIX_Read_Config+0xff4>
   179f2:	63 e6       	ldi	r22, 0x63	; 99
   179f4:	74 e1       	ldi	r23, 0x14	; 20
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 30, &val) )
   179f6:	c6 01       	movw	r24, r12
   179f8:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   179fc:	00 97       	sbiw	r24, 0x00	; 0
   179fe:	39 f1       	breq	.+78     	; 0x17a4e <POSIX_Read_Config+0x4be>
   17a00:	de 01       	movw	r26, r28
   17a02:	af 57       	subi	r26, 0x7F	; 127
   17a04:	bf 4f       	sbci	r27, 0xFF	; 255
   17a06:	7d 01       	movw	r14, r26
   17a08:	0e e1       	ldi	r16, 0x1E	; 30
   17a0a:	10 e0       	ldi	r17, 0x00	; 0
   17a0c:	20 e0       	ldi	r18, 0x00	; 0
   17a0e:	30 e0       	ldi	r19, 0x00	; 0
   17a10:	40 e0       	ldi	r20, 0x00	; 0
   17a12:	50 e0       	ldi	r21, 0x00	; 0
   17a14:	ba 01       	movw	r22, r20
   17a16:	8c 0d       	add	r24, r12
   17a18:	9d 1d       	adc	r25, r13
   17a1a:	1a dd       	rcall	.-1484   	; 0x17450 <assign_value>
                    ++errors;
   17a1c:	67 2b       	or	r22, r23
   17a1e:	68 2b       	or	r22, r24
   17a20:	69 2b       	or	r22, r25

        case SS80_HEADER:
            if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                tmp = 0xff;
   17a22:	29 f4       	brne	.+10     	; 0x17a2e <POSIX_Read_Config+0x49e>
   17a24:	bf ef       	ldi	r27, 0xFF	; 255
                if (!assign_value(ptr, 0, 30, &val) )
                    ++errors;
                else
                    tmp = val;
   17a26:	ab 1a       	sub	r10, r27
   17a28:	bb 0a       	sbc	r11, r27
   17a2a:	8f ef       	ldi	r24, 0xFF	; 255
   17a2c:	05 c0       	rjmp	.+10     	; 0x17a38 <POSIX_Read_Config+0x4a8>
   17a2e:	cf 57       	subi	r28, 0x7F	; 127
                Devices[index].ADDRESS = tmp;
   17a30:	df 4f       	sbci	r29, 0xFF	; 255
   17a32:	88 81       	ld	r24, Y
   17a34:	c1 58       	subi	r28, 0x81	; 129
   17a36:	d0 40       	sbci	r29, 0x00	; 0
   17a38:	97 e0       	ldi	r25, 0x07	; 7
   17a3a:	96 9d       	mul	r25, r6
   17a3c:	f0 01       	movw	r30, r0
   17a3e:	97 9d       	mul	r25, r7
   17a40:	f0 0d       	add	r31, r0
                SS80p->HEADER.ADDRESS  = tmp;
   17a42:	11 24       	eor	r1, r1
   17a44:	e1 5b       	subi	r30, 0xB1	; 177
            }
            else if( (ind = token(ptr,"PPR")) )
   17a46:	f0 4e       	sbci	r31, 0xE0	; 224
   17a48:	81 83       	std	Z+1, r24	; 0x01
   17a4a:	f2 01       	movw	r30, r4
   17a4c:	42 c4       	rjmp	.+2180   	; 0x182d2 <POSIX_Read_Config+0xd42>
   17a4e:	60 e9       	ldi	r22, 0x90	; 144
   17a50:	74 e1       	ldi	r23, 0x14	; 20
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 7, &val) )
   17a52:	c6 01       	movw	r24, r12
   17a54:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   17a58:	00 97       	sbiw	r24, 0x00	; 0
   17a5a:	49 f1       	breq	.+82     	; 0x17aae <POSIX_Read_Config+0x51e>
   17a5c:	9e 01       	movw	r18, r28
   17a5e:	2f 57       	subi	r18, 0x7F	; 127
   17a60:	3f 4f       	sbci	r19, 0xFF	; 255
   17a62:	79 01       	movw	r14, r18
   17a64:	07 e0       	ldi	r16, 0x07	; 7
   17a66:	10 e0       	ldi	r17, 0x00	; 0
   17a68:	20 e0       	ldi	r18, 0x00	; 0
   17a6a:	30 e0       	ldi	r19, 0x00	; 0
   17a6c:	40 e0       	ldi	r20, 0x00	; 0
   17a6e:	50 e0       	ldi	r21, 0x00	; 0
   17a70:	ba 01       	movw	r22, r20
   17a72:	8c 0d       	add	r24, r12
   17a74:	9d 1d       	adc	r25, r13
   17a76:	ec dc       	rcall	.-1576   	; 0x17450 <assign_value>
                    ++errors;
   17a78:	67 2b       	or	r22, r23
   17a7a:	68 2b       	or	r22, r24
   17a7c:	69 2b       	or	r22, r25
                SS80p->HEADER.ADDRESS  = tmp;
            }
            else if( (ind = token(ptr,"PPR")) )
            {
                ptr += ind;
                tmp = 0xff;
   17a7e:	29 f4       	brne	.+10     	; 0x17a8a <POSIX_Read_Config+0x4fa>
   17a80:	3f ef       	ldi	r19, 0xFF	; 255
                if (!assign_value(ptr, 0, 7, &val) )
                    ++errors;
                else
                    tmp = val;
   17a82:	a3 1a       	sub	r10, r19
   17a84:	b3 0a       	sbc	r11, r19
   17a86:	8f ef       	ldi	r24, 0xFF	; 255
   17a88:	05 c0       	rjmp	.+10     	; 0x17a94 <POSIX_Read_Config+0x504>
   17a8a:	cf 57       	subi	r28, 0x7F	; 127
                Devices[index].PPR = tmp;
   17a8c:	df 4f       	sbci	r29, 0xFF	; 255
   17a8e:	88 81       	ld	r24, Y
   17a90:	c1 58       	subi	r28, 0x81	; 129
   17a92:	d0 40       	sbci	r29, 0x00	; 0
   17a94:	97 e0       	ldi	r25, 0x07	; 7
   17a96:	96 9d       	mul	r25, r6
   17a98:	f0 01       	movw	r30, r0
   17a9a:	97 9d       	mul	r25, r7
   17a9c:	f0 0d       	add	r31, r0
                SS80p->HEADER.PPR = tmp;
   17a9e:	11 24       	eor	r1, r1
   17aa0:	e1 5b       	subi	r30, 0xB1	; 177
   17aa2:	f0 4e       	sbci	r31, 0xE0	; 224
   17aa4:	82 83       	std	Z+2, r24	; 0x02
            }
            else if( (ind = token(ptr,"FILE")) )
   17aa6:	d2 01       	movw	r26, r4
   17aa8:	11 96       	adiw	r26, 0x01	; 1
   17aaa:	8c 93       	st	X, r24
   17aac:	1d ce       	rjmp	.-966    	; 0x176e8 <POSIX_Read_Config+0x158>
   17aae:	64 e9       	ldi	r22, 0x94	; 148
   17ab0:	74 e1       	ldi	r23, 0x14	; 20
   17ab2:	c6 01       	movw	r24, r12
            {
                ptr += ind;
                ptr = skipspaces(ptr);
   17ab4:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   17ab8:	00 97       	sbiw	r24, 0x00	; 0
   17aba:	a1 f0       	breq	.+40     	; 0x17ae4 <POSIX_Read_Config+0x554>
                if(*ptr == '=')
   17abc:	8c 0d       	add	r24, r12
   17abe:	9d 1d       	adc	r25, r13
   17ac0:	0e 94 82 32 	call	0x6504	; 0x6504 <skipspaces>
                {
                    ++ptr;
                    ptr = skipspaces(ptr);
   17ac4:	fc 01       	movw	r30, r24
   17ac6:	20 81       	ld	r18, Z
   17ac8:	2d 33       	cpi	r18, 0x3D	; 61
                }
                strncpy(SS80p->HEADER.NAME,ptr, sizeof(SS80p->HEADER.NAME)-1);
   17aca:	19 f4       	brne	.+6      	; 0x17ad2 <POSIX_Read_Config+0x542>
   17acc:	01 96       	adiw	r24, 0x01	; 1
   17ace:	0e 94 82 32 	call	0x6504	; 0x6504 <skipspaces>
   17ad2:	40 e2       	ldi	r20, 0x20	; 32
   17ad4:	50 e0       	ldi	r21, 0x00	; 0
   17ad6:	bc 01       	movw	r22, r24
                SS80p->HEADER.NAME[sizeof(SS80p->HEADER.NAME)-1] = 0;
   17ad8:	c2 01       	movw	r24, r4
   17ada:	02 96       	adiw	r24, 0x02	; 2
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   17adc:	0e 94 25 32 	call	0x644a	; 0x644a <strncpy>
   17ae0:	d2 01       	movw	r26, r4
   17ae2:	41 c4       	rjmp	.+2178   	; 0x18366 <POSIX_Read_Config+0xdd6>
   17ae4:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <lines+0x1>
   17ae8:	8f 93       	push	r24
   17aea:	80 91 f4 19 	lds	r24, 0x19F4	; 0x8019f4 <lines>
   17aee:	8f 93       	push	r24
   17af0:	df 92       	push	r13
                ++errors;
            }
            break;

        case SS80_CONFIG:
            if( (ind = token(ptr,"ID")) )
   17af2:	cf 92       	push	r12
   17af4:	83 e4       	ldi	r24, 0x43	; 67
   17af6:	9f e2       	ldi	r25, 0x2F	; 47
   17af8:	1f cf       	rjmp	.-450    	; 0x17938 <POSIX_Read_Config+0x3a8>
   17afa:	69 e9       	ldi	r22, 0x99	; 153
   17afc:	74 e1       	ldi	r23, 0x14	; 20
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   17afe:	c6 01       	movw	r24, r12
   17b00:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   17b04:	00 97       	sbiw	r24, 0x00	; 0
   17b06:	09 f1       	breq	.+66     	; 0x17b4a <POSIX_Read_Config+0x5ba>
   17b08:	9e 01       	movw	r18, r28
   17b0a:	2f 57       	subi	r18, 0x7F	; 127
   17b0c:	3f 4f       	sbci	r19, 0xFF	; 255
   17b0e:	79 01       	movw	r14, r18
   17b10:	0f ef       	ldi	r16, 0xFF	; 255
   17b12:	1f ef       	ldi	r17, 0xFF	; 255
   17b14:	20 e0       	ldi	r18, 0x00	; 0
   17b16:	30 e0       	ldi	r19, 0x00	; 0
   17b18:	40 e0       	ldi	r20, 0x00	; 0
   17b1a:	50 e0       	ldi	r21, 0x00	; 0
   17b1c:	ba 01       	movw	r22, r20
   17b1e:	8c 0d       	add	r24, r12
   17b20:	9d 1d       	adc	r25, r13
   17b22:	96 dc       	rcall	.-1748   	; 0x17450 <assign_value>
                    ++errors;
   17b24:	67 2b       	or	r22, r23
   17b26:	68 2b       	or	r22, r24
   17b28:	69 2b       	or	r22, r25
                SS80p->CONFIG.ID = val;
   17b2a:	19 f4       	brne	.+6      	; 0x17b32 <POSIX_Read_Config+0x5a2>
   17b2c:	3f ef       	ldi	r19, 0xFF	; 255
   17b2e:	a3 1a       	sub	r10, r19
   17b30:	b3 0a       	sbc	r11, r19
   17b32:	cf 57       	subi	r28, 0x7F	; 127
   17b34:	df 4f       	sbci	r29, 0xFF	; 255
   17b36:	88 81       	ld	r24, Y
   17b38:	99 81       	ldd	r25, Y+1	; 0x01
   17b3a:	c1 58       	subi	r28, 0x81	; 129
   17b3c:	d0 40       	sbci	r29, 0x00	; 0
   17b3e:	d2 01       	movw	r26, r4
   17b40:	94 96       	adiw	r26, 0x24	; 36
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   17b42:	9c 93       	st	X, r25
   17b44:	8e 93       	st	-X, r24
   17b46:	93 97       	sbiw	r26, 0x23	; 35
   17b48:	cf cd       	rjmp	.-1122   	; 0x176e8 <POSIX_Read_Config+0x158>
   17b4a:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <lines+0x1>
   17b4e:	8f 93       	push	r24
   17b50:	80 91 f4 19 	lds	r24, 0x19F4	; 0x8019f4 <lines>
   17b54:	8f 93       	push	r24
   17b56:	df 92       	push	r13
                ++errors;
            }
            break;

        case SS80_CONTROLLER:
            if( (ind = token(ptr,"UNITS_INSTALLED")) )
   17b58:	cf 92       	push	r12
   17b5a:	85 e1       	ldi	r24, 0x15	; 21
   17b5c:	9f e2       	ldi	r25, 0x2F	; 47
   17b5e:	ec ce       	rjmp	.-552    	; 0x17938 <POSIX_Read_Config+0x3a8>
   17b60:	6c e9       	ldi	r22, 0x9C	; 156
   17b62:	74 e1       	ldi	r23, 0x14	; 20
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   17b64:	c6 01       	movw	r24, r12
   17b66:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   17b6a:	00 97       	sbiw	r24, 0x00	; 0
   17b6c:	09 f1       	breq	.+66     	; 0x17bb0 <POSIX_Read_Config+0x620>
   17b6e:	9e 01       	movw	r18, r28
   17b70:	2f 57       	subi	r18, 0x7F	; 127
   17b72:	3f 4f       	sbci	r19, 0xFF	; 255
   17b74:	79 01       	movw	r14, r18
   17b76:	0f ef       	ldi	r16, 0xFF	; 255
   17b78:	1f ef       	ldi	r17, 0xFF	; 255
   17b7a:	20 e0       	ldi	r18, 0x00	; 0
   17b7c:	30 e0       	ldi	r19, 0x00	; 0
   17b7e:	40 e0       	ldi	r20, 0x00	; 0
   17b80:	50 e0       	ldi	r21, 0x00	; 0
   17b82:	ba 01       	movw	r22, r20
   17b84:	8c 0d       	add	r24, r12
   17b86:	9d 1d       	adc	r25, r13
   17b88:	63 dc       	rcall	.-1850   	; 0x17450 <assign_value>
                    ++errors;
   17b8a:	67 2b       	or	r22, r23
   17b8c:	68 2b       	or	r22, r24
   17b8e:	69 2b       	or	r22, r25
                SS80p->CONTROLLER.UNITS_INSTALLED = val;
   17b90:	19 f4       	brne	.+6      	; 0x17b98 <POSIX_Read_Config+0x608>
   17b92:	3f ef       	ldi	r19, 0xFF	; 255
   17b94:	a3 1a       	sub	r10, r19
   17b96:	b3 0a       	sbc	r11, r19
   17b98:	cf 57       	subi	r28, 0x7F	; 127
   17b9a:	df 4f       	sbci	r29, 0xFF	; 255
   17b9c:	88 81       	ld	r24, Y
   17b9e:	99 81       	ldd	r25, Y+1	; 0x01
   17ba0:	c1 58       	subi	r28, 0x81	; 129
   17ba2:	d0 40       	sbci	r29, 0x00	; 0
   17ba4:	d2 01       	movw	r26, r4
            }
            else if( (ind = token(ptr,"TRANSFER_RATE")) )
   17ba6:	96 96       	adiw	r26, 0x26	; 38
   17ba8:	9c 93       	st	X, r25
   17baa:	8e 93       	st	-X, r24
   17bac:	95 97       	sbiw	r26, 0x25	; 37
   17bae:	9c cd       	rjmp	.-1224   	; 0x176e8 <POSIX_Read_Config+0x158>
   17bb0:	64 e0       	ldi	r22, 0x04	; 4
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   17bb2:	75 e1       	ldi	r23, 0x15	; 21
   17bb4:	c6 01       	movw	r24, r12
   17bb6:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   17bba:	00 97       	sbiw	r24, 0x00	; 0
   17bbc:	e9 f0       	breq	.+58     	; 0x17bf8 <POSIX_Read_Config+0x668>
   17bbe:	fe 01       	movw	r30, r28
   17bc0:	ef 57       	subi	r30, 0x7F	; 127
   17bc2:	ff 4f       	sbci	r31, 0xFF	; 255
   17bc4:	7f 01       	movw	r14, r30
   17bc6:	0f ef       	ldi	r16, 0xFF	; 255
   17bc8:	1f ef       	ldi	r17, 0xFF	; 255
   17bca:	20 e0       	ldi	r18, 0x00	; 0
   17bcc:	30 e0       	ldi	r19, 0x00	; 0
   17bce:	40 e0       	ldi	r20, 0x00	; 0
   17bd0:	50 e0       	ldi	r21, 0x00	; 0
   17bd2:	ba 01       	movw	r22, r20
   17bd4:	8c 0d       	add	r24, r12
   17bd6:	9d 1d       	adc	r25, r13
                    ++errors;
   17bd8:	3b dc       	rcall	.-1930   	; 0x17450 <assign_value>
   17bda:	67 2b       	or	r22, r23
   17bdc:	68 2b       	or	r22, r24
                SS80p->CONTROLLER.TRANSFER_RATE = val;
   17bde:	69 2b       	or	r22, r25
   17be0:	19 f4       	brne	.+6      	; 0x17be8 <POSIX_Read_Config+0x658>
   17be2:	ff ef       	ldi	r31, 0xFF	; 255
   17be4:	af 1a       	sub	r10, r31
   17be6:	bf 0a       	sbc	r11, r31
   17be8:	cf 57       	subi	r28, 0x7F	; 127
   17bea:	df 4f       	sbci	r29, 0xFF	; 255
            }
            else if( (ind = token(ptr,"TYPE")) )
   17bec:	88 81       	ld	r24, Y
   17bee:	99 81       	ldd	r25, Y+1	; 0x01
   17bf0:	c1 58       	subi	r28, 0x81	; 129
   17bf2:	d0 40       	sbci	r29, 0x00	; 0
   17bf4:	d2 01       	movw	r26, r4
   17bf6:	5a c4       	rjmp	.+2228   	; 0x184ac <POSIX_Read_Config+0xf1c>
   17bf8:	63 e0       	ldi	r22, 0x03	; 3
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   17bfa:	74 e1       	ldi	r23, 0x14	; 20
   17bfc:	c6 01       	movw	r24, r12
   17bfe:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   17c02:	00 97       	sbiw	r24, 0x00	; 0
   17c04:	f1 f0       	breq	.+60     	; 0x17c42 <POSIX_Read_Config+0x6b2>
   17c06:	fe 01       	movw	r30, r28
   17c08:	ef 57       	subi	r30, 0x7F	; 127
   17c0a:	ff 4f       	sbci	r31, 0xFF	; 255
   17c0c:	7f 01       	movw	r14, r30
   17c0e:	0f ef       	ldi	r16, 0xFF	; 255
   17c10:	1f ef       	ldi	r17, 0xFF	; 255
   17c12:	20 e0       	ldi	r18, 0x00	; 0
   17c14:	30 e0       	ldi	r19, 0x00	; 0
   17c16:	40 e0       	ldi	r20, 0x00	; 0
   17c18:	50 e0       	ldi	r21, 0x00	; 0
   17c1a:	ba 01       	movw	r22, r20
   17c1c:	8c 0d       	add	r24, r12
   17c1e:	9d 1d       	adc	r25, r13
                    ++errors;
   17c20:	17 dc       	rcall	.-2002   	; 0x17450 <assign_value>
   17c22:	67 2b       	or	r22, r23
   17c24:	68 2b       	or	r22, r24
                SS80p->CONTROLLER.TYPE = val;
   17c26:	69 2b       	or	r22, r25
   17c28:	19 f4       	brne	.+6      	; 0x17c30 <POSIX_Read_Config+0x6a0>
   17c2a:	ff ef       	ldi	r31, 0xFF	; 255
   17c2c:	af 1a       	sub	r10, r31
   17c2e:	bf 0a       	sbc	r11, r31
   17c30:	cf 57       	subi	r28, 0x7F	; 127
   17c32:	df 4f       	sbci	r29, 0xFF	; 255
   17c34:	88 81       	ld	r24, Y
   17c36:	c1 58       	subi	r28, 0x81	; 129
            }
            else
            {
                printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   17c38:	d0 40       	sbci	r29, 0x00	; 0
   17c3a:	d2 01       	movw	r26, r4
   17c3c:	99 96       	adiw	r26, 0x29	; 41
   17c3e:	8c 93       	st	X, r24
   17c40:	53 cd       	rjmp	.-1370   	; 0x176e8 <POSIX_Read_Config+0x158>
   17c42:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <lines+0x1>
   17c46:	8f 93       	push	r24
   17c48:	80 91 f4 19 	lds	r24, 0x19F4	; 0x8019f4 <lines>
            }
            break;


        case SS80_UNIT:
            if( (ind = token(ptr,"UNIT_TYPE")) )
   17c4c:	8f 93       	push	r24
   17c4e:	df 92       	push	r13
   17c50:	cf 92       	push	r12
   17c52:	83 ee       	ldi	r24, 0xE3	; 227
   17c54:	9e e2       	ldi	r25, 0x2E	; 46
   17c56:	70 ce       	rjmp	.-800    	; 0x17938 <POSIX_Read_Config+0x3a8>
   17c58:	6c ea       	ldi	r22, 0xAC	; 172
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   17c5a:	74 e1       	ldi	r23, 0x14	; 20
   17c5c:	c6 01       	movw	r24, r12
   17c5e:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   17c62:	00 97       	sbiw	r24, 0x00	; 0
   17c64:	f1 f0       	breq	.+60     	; 0x17ca2 <POSIX_Read_Config+0x712>
   17c66:	9e 01       	movw	r18, r28
   17c68:	2f 57       	subi	r18, 0x7F	; 127
   17c6a:	3f 4f       	sbci	r19, 0xFF	; 255
   17c6c:	79 01       	movw	r14, r18
   17c6e:	0f ef       	ldi	r16, 0xFF	; 255
   17c70:	1f ef       	ldi	r17, 0xFF	; 255
   17c72:	20 e0       	ldi	r18, 0x00	; 0
   17c74:	30 e0       	ldi	r19, 0x00	; 0
   17c76:	40 e0       	ldi	r20, 0x00	; 0
   17c78:	50 e0       	ldi	r21, 0x00	; 0
   17c7a:	ba 01       	movw	r22, r20
   17c7c:	8c 0d       	add	r24, r12
   17c7e:	9d 1d       	adc	r25, r13
                    ++errors;
   17c80:	e7 db       	rcall	.-2098   	; 0x17450 <assign_value>
   17c82:	67 2b       	or	r22, r23
   17c84:	68 2b       	or	r22, r24
                SS80p->UNIT.UNIT_TYPE = val;
   17c86:	69 2b       	or	r22, r25
   17c88:	19 f4       	brne	.+6      	; 0x17c90 <POSIX_Read_Config+0x700>
   17c8a:	3f ef       	ldi	r19, 0xFF	; 255
   17c8c:	a3 1a       	sub	r10, r19
   17c8e:	b3 0a       	sbc	r11, r19
   17c90:	cf 57       	subi	r28, 0x7F	; 127
   17c92:	df 4f       	sbci	r29, 0xFF	; 255
   17c94:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"DEVICE_NUMBER")) )
   17c96:	c1 58       	subi	r28, 0x81	; 129
   17c98:	d0 40       	sbci	r29, 0x00	; 0
   17c9a:	d2 01       	movw	r26, r4
   17c9c:	9a 96       	adiw	r26, 0x2a	; 42
   17c9e:	8c 93       	st	X, r24
   17ca0:	23 cd       	rjmp	.-1466   	; 0x176e8 <POSIX_Read_Config+0x158>
   17ca2:	66 eb       	ldi	r22, 0xB6	; 182
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val))
   17ca4:	74 e1       	ldi	r23, 0x14	; 20
   17ca6:	c6 01       	movw	r24, r12
   17ca8:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   17cac:	00 97       	sbiw	r24, 0x00	; 0
   17cae:	11 f1       	breq	.+68     	; 0x17cf4 <POSIX_Read_Config+0x764>
   17cb0:	fe 01       	movw	r30, r28
   17cb2:	ef 57       	subi	r30, 0x7F	; 127
   17cb4:	ff 4f       	sbci	r31, 0xFF	; 255
   17cb6:	7f 01       	movw	r14, r30
   17cb8:	0f ef       	ldi	r16, 0xFF	; 255
   17cba:	1f ef       	ldi	r17, 0xFF	; 255
   17cbc:	98 01       	movw	r18, r16
   17cbe:	40 e0       	ldi	r20, 0x00	; 0
   17cc0:	50 e0       	ldi	r21, 0x00	; 0
   17cc2:	ba 01       	movw	r22, r20
   17cc4:	8c 0d       	add	r24, r12
   17cc6:	9d 1d       	adc	r25, r13
                    ++errors;
   17cc8:	c3 db       	rcall	.-2170   	; 0x17450 <assign_value>
   17cca:	67 2b       	or	r22, r23
   17ccc:	68 2b       	or	r22, r24
                SS80p->UNIT.DEVICE_NUMBER = val;
   17cce:	69 2b       	or	r22, r25
   17cd0:	19 f4       	brne	.+6      	; 0x17cd8 <POSIX_Read_Config+0x748>
   17cd2:	ff ef       	ldi	r31, 0xFF	; 255
   17cd4:	af 1a       	sub	r10, r31
   17cd6:	bf 0a       	sbc	r11, r31
   17cd8:	cf 57       	subi	r28, 0x7F	; 127
   17cda:	df 4f       	sbci	r29, 0xFF	; 255
   17cdc:	88 81       	ld	r24, Y
   17cde:	99 81       	ldd	r25, Y+1	; 0x01
   17ce0:	aa 81       	ldd	r26, Y+2	; 0x02
   17ce2:	bb 81       	ldd	r27, Y+3	; 0x03
   17ce4:	c1 58       	subi	r28, 0x81	; 129
   17ce6:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"BYTES_PER_BLOCK")) )
   17ce8:	f2 01       	movw	r30, r4
   17cea:	83 a7       	std	Z+43, r24	; 0x2b
   17cec:	94 a7       	std	Z+44, r25	; 0x2c
   17cee:	a5 a7       	std	Z+45, r26	; 0x2d
   17cf0:	b6 a7       	std	Z+46, r27	; 0x2e
   17cf2:	fa cc       	rjmp	.-1548   	; 0x176e8 <POSIX_Read_Config+0x158>
   17cf4:	64 ec       	ldi	r22, 0xC4	; 196
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0x1000UL, &val) )
   17cf6:	74 e1       	ldi	r23, 0x14	; 20
   17cf8:	c6 01       	movw	r24, r12
   17cfa:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   17cfe:	00 97       	sbiw	r24, 0x00	; 0
   17d00:	09 f1       	breq	.+66     	; 0x17d44 <POSIX_Read_Config+0x7b4>
   17d02:	9e 01       	movw	r18, r28
   17d04:	2f 57       	subi	r18, 0x7F	; 127
   17d06:	3f 4f       	sbci	r19, 0xFF	; 255
   17d08:	79 01       	movw	r14, r18
   17d0a:	00 e0       	ldi	r16, 0x00	; 0
   17d0c:	10 e1       	ldi	r17, 0x10	; 16
   17d0e:	20 e0       	ldi	r18, 0x00	; 0
   17d10:	30 e0       	ldi	r19, 0x00	; 0
   17d12:	40 e0       	ldi	r20, 0x00	; 0
   17d14:	50 e0       	ldi	r21, 0x00	; 0
   17d16:	ba 01       	movw	r22, r20
   17d18:	8c 0d       	add	r24, r12
   17d1a:	9d 1d       	adc	r25, r13
                    ++errors;
   17d1c:	99 db       	rcall	.-2254   	; 0x17450 <assign_value>
   17d1e:	67 2b       	or	r22, r23
   17d20:	68 2b       	or	r22, r24
                SS80p->UNIT.BYTES_PER_BLOCK = val;
   17d22:	69 2b       	or	r22, r25
   17d24:	19 f4       	brne	.+6      	; 0x17d2c <POSIX_Read_Config+0x79c>
   17d26:	3f ef       	ldi	r19, 0xFF	; 255
   17d28:	a3 1a       	sub	r10, r19
   17d2a:	b3 0a       	sbc	r11, r19
   17d2c:	cf 57       	subi	r28, 0x7F	; 127
   17d2e:	df 4f       	sbci	r29, 0xFF	; 255
   17d30:	88 81       	ld	r24, Y
   17d32:	99 81       	ldd	r25, Y+1	; 0x01
   17d34:	c1 58       	subi	r28, 0x81	; 129
   17d36:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"BUFFERED_BLOCKS")) )
   17d38:	d2 01       	movw	r26, r4
   17d3a:	d0 96       	adiw	r26, 0x30	; 48
   17d3c:	9c 93       	st	X, r25
   17d3e:	8e 93       	st	-X, r24
   17d40:	9f 97       	sbiw	r26, 0x2f	; 47
   17d42:	d2 cc       	rjmp	.-1628   	; 0x176e8 <POSIX_Read_Config+0x158>
   17d44:	64 ed       	ldi	r22, 0xD4	; 212
            {
                ptr += ind;
                if (!assign_value(ptr, 1UL, 1UL, &val) )
   17d46:	74 e1       	ldi	r23, 0x14	; 20
   17d48:	c6 01       	movw	r24, r12
   17d4a:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   17d4e:	00 97       	sbiw	r24, 0x00	; 0
   17d50:	f9 f0       	breq	.+62     	; 0x17d90 <POSIX_Read_Config+0x800>
   17d52:	fe 01       	movw	r30, r28
   17d54:	ef 57       	subi	r30, 0x7F	; 127
   17d56:	ff 4f       	sbci	r31, 0xFF	; 255
   17d58:	7f 01       	movw	r14, r30
   17d5a:	01 e0       	ldi	r16, 0x01	; 1
   17d5c:	10 e0       	ldi	r17, 0x00	; 0
   17d5e:	20 e0       	ldi	r18, 0x00	; 0
   17d60:	30 e0       	ldi	r19, 0x00	; 0
   17d62:	41 e0       	ldi	r20, 0x01	; 1
   17d64:	50 e0       	ldi	r21, 0x00	; 0
   17d66:	60 e0       	ldi	r22, 0x00	; 0
   17d68:	70 e0       	ldi	r23, 0x00	; 0
   17d6a:	8c 0d       	add	r24, r12
   17d6c:	9d 1d       	adc	r25, r13
                    ++errors;
   17d6e:	70 db       	rcall	.-2336   	; 0x17450 <assign_value>
   17d70:	67 2b       	or	r22, r23
   17d72:	68 2b       	or	r22, r24
                SS80p->UNIT.BUFFERED_BLOCKS = val;
   17d74:	69 2b       	or	r22, r25
   17d76:	19 f4       	brne	.+6      	; 0x17d7e <POSIX_Read_Config+0x7ee>
   17d78:	ff ef       	ldi	r31, 0xFF	; 255
   17d7a:	af 1a       	sub	r10, r31
   17d7c:	bf 0a       	sbc	r11, r31
   17d7e:	cf 57       	subi	r28, 0x7F	; 127
   17d80:	df 4f       	sbci	r29, 0xFF	; 255
   17d82:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"BURST_SIZE")) )
   17d84:	c1 58       	subi	r28, 0x81	; 129
   17d86:	d0 40       	sbci	r29, 0x00	; 0
   17d88:	d2 01       	movw	r26, r4
   17d8a:	d1 96       	adiw	r26, 0x31	; 49
   17d8c:	8c 93       	st	X, r24
   17d8e:	ac cc       	rjmp	.-1704   	; 0x176e8 <POSIX_Read_Config+0x158>
   17d90:	64 ee       	ldi	r22, 0xE4	; 228
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0, &val) )
   17d92:	74 e1       	ldi	r23, 0x14	; 20
   17d94:	c6 01       	movw	r24, r12
   17d96:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   17d9a:	00 97       	sbiw	r24, 0x00	; 0
   17d9c:	e9 f0       	breq	.+58     	; 0x17dd8 <POSIX_Read_Config+0x848>
   17d9e:	fe 01       	movw	r30, r28
   17da0:	ef 57       	subi	r30, 0x7F	; 127
   17da2:	ff 4f       	sbci	r31, 0xFF	; 255
   17da4:	7f 01       	movw	r14, r30
   17da6:	00 e0       	ldi	r16, 0x00	; 0
   17da8:	10 e0       	ldi	r17, 0x00	; 0
   17daa:	98 01       	movw	r18, r16
   17dac:	40 e0       	ldi	r20, 0x00	; 0
   17dae:	50 e0       	ldi	r21, 0x00	; 0
   17db0:	ba 01       	movw	r22, r20
   17db2:	8c 0d       	add	r24, r12
   17db4:	9d 1d       	adc	r25, r13
                    ++errors;
   17db6:	4c db       	rcall	.-2408   	; 0x17450 <assign_value>
   17db8:	67 2b       	or	r22, r23
   17dba:	68 2b       	or	r22, r24
                SS80p->UNIT.BURST_SIZE = val;
   17dbc:	69 2b       	or	r22, r25
   17dbe:	19 f4       	brne	.+6      	; 0x17dc6 <POSIX_Read_Config+0x836>
   17dc0:	ff ef       	ldi	r31, 0xFF	; 255
   17dc2:	af 1a       	sub	r10, r31
   17dc4:	bf 0a       	sbc	r11, r31
   17dc6:	cf 57       	subi	r28, 0x7F	; 127
   17dc8:	df 4f       	sbci	r29, 0xFF	; 255
   17dca:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"BLOCK_TIME")) )
   17dcc:	c1 58       	subi	r28, 0x81	; 129
   17dce:	d0 40       	sbci	r29, 0x00	; 0
   17dd0:	d2 01       	movw	r26, r4
   17dd2:	d2 96       	adiw	r26, 0x32	; 50
   17dd4:	8c 93       	st	X, r24
   17dd6:	88 cc       	rjmp	.-1776   	; 0x176e8 <POSIX_Read_Config+0x158>
   17dd8:	6f ee       	ldi	r22, 0xEF	; 239
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   17dda:	74 e1       	ldi	r23, 0x14	; 20
   17ddc:	c6 01       	movw	r24, r12
   17dde:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   17de2:	00 97       	sbiw	r24, 0x00	; 0
   17de4:	09 f1       	breq	.+66     	; 0x17e28 <POSIX_Read_Config+0x898>
   17de6:	fe 01       	movw	r30, r28
   17de8:	ef 57       	subi	r30, 0x7F	; 127
   17dea:	ff 4f       	sbci	r31, 0xFF	; 255
   17dec:	7f 01       	movw	r14, r30
   17dee:	0f ef       	ldi	r16, 0xFF	; 255
   17df0:	1f ef       	ldi	r17, 0xFF	; 255
   17df2:	20 e0       	ldi	r18, 0x00	; 0
   17df4:	30 e0       	ldi	r19, 0x00	; 0
   17df6:	40 e0       	ldi	r20, 0x00	; 0
   17df8:	50 e0       	ldi	r21, 0x00	; 0
   17dfa:	ba 01       	movw	r22, r20
   17dfc:	8c 0d       	add	r24, r12
   17dfe:	9d 1d       	adc	r25, r13
                    ++errors;
   17e00:	27 db       	rcall	.-2482   	; 0x17450 <assign_value>
   17e02:	67 2b       	or	r22, r23
   17e04:	68 2b       	or	r22, r24
                SS80p->UNIT.BLOCK_TIME = val;
   17e06:	69 2b       	or	r22, r25
   17e08:	19 f4       	brne	.+6      	; 0x17e10 <POSIX_Read_Config+0x880>
   17e0a:	ff ef       	ldi	r31, 0xFF	; 255
   17e0c:	af 1a       	sub	r10, r31
   17e0e:	bf 0a       	sbc	r11, r31
   17e10:	cf 57       	subi	r28, 0x7F	; 127
   17e12:	df 4f       	sbci	r29, 0xFF	; 255
   17e14:	88 81       	ld	r24, Y
   17e16:	99 81       	ldd	r25, Y+1	; 0x01
   17e18:	c1 58       	subi	r28, 0x81	; 129
   17e1a:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"CONTINOUS_TRANSFER_RATE")) )
   17e1c:	d2 01       	movw	r26, r4
   17e1e:	d4 96       	adiw	r26, 0x34	; 52
   17e20:	9c 93       	st	X, r25
   17e22:	8e 93       	st	-X, r24
   17e24:	d3 97       	sbiw	r26, 0x33	; 51
   17e26:	60 cc       	rjmp	.-1856   	; 0x176e8 <POSIX_Read_Config+0x158>
   17e28:	6a ef       	ldi	r22, 0xFA	; 250
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   17e2a:	74 e1       	ldi	r23, 0x14	; 20
   17e2c:	c6 01       	movw	r24, r12
   17e2e:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   17e32:	00 97       	sbiw	r24, 0x00	; 0
   17e34:	09 f1       	breq	.+66     	; 0x17e78 <POSIX_Read_Config+0x8e8>
   17e36:	fe 01       	movw	r30, r28
   17e38:	ef 57       	subi	r30, 0x7F	; 127
   17e3a:	ff 4f       	sbci	r31, 0xFF	; 255
   17e3c:	7f 01       	movw	r14, r30
   17e3e:	0f ef       	ldi	r16, 0xFF	; 255
   17e40:	1f ef       	ldi	r17, 0xFF	; 255
   17e42:	20 e0       	ldi	r18, 0x00	; 0
   17e44:	30 e0       	ldi	r19, 0x00	; 0
   17e46:	40 e0       	ldi	r20, 0x00	; 0
   17e48:	50 e0       	ldi	r21, 0x00	; 0
   17e4a:	ba 01       	movw	r22, r20
   17e4c:	8c 0d       	add	r24, r12
   17e4e:	9d 1d       	adc	r25, r13
                    ++errors;
   17e50:	ff da       	rcall	.-2562   	; 0x17450 <assign_value>
   17e52:	67 2b       	or	r22, r23
   17e54:	68 2b       	or	r22, r24
                SS80p->UNIT.CONTINOUS_TRANSFER_RATE = val;
   17e56:	69 2b       	or	r22, r25
   17e58:	19 f4       	brne	.+6      	; 0x17e60 <POSIX_Read_Config+0x8d0>
   17e5a:	ff ef       	ldi	r31, 0xFF	; 255
   17e5c:	af 1a       	sub	r10, r31
   17e5e:	bf 0a       	sbc	r11, r31
   17e60:	cf 57       	subi	r28, 0x7F	; 127
   17e62:	df 4f       	sbci	r29, 0xFF	; 255
   17e64:	88 81       	ld	r24, Y
   17e66:	99 81       	ldd	r25, Y+1	; 0x01
   17e68:	c1 58       	subi	r28, 0x81	; 129
   17e6a:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"OPTIMAL_RETRY_TIME")) )
   17e6c:	d2 01       	movw	r26, r4
   17e6e:	d6 96       	adiw	r26, 0x36	; 54
   17e70:	9c 93       	st	X, r25
   17e72:	8e 93       	st	-X, r24
   17e74:	d5 97       	sbiw	r26, 0x35	; 53
   17e76:	38 cc       	rjmp	.-1936   	; 0x176e8 <POSIX_Read_Config+0x158>
   17e78:	62 e1       	ldi	r22, 0x12	; 18
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   17e7a:	75 e1       	ldi	r23, 0x15	; 21
   17e7c:	c6 01       	movw	r24, r12
   17e7e:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   17e82:	00 97       	sbiw	r24, 0x00	; 0
   17e84:	09 f1       	breq	.+66     	; 0x17ec8 <POSIX_Read_Config+0x938>
   17e86:	fe 01       	movw	r30, r28
   17e88:	ef 57       	subi	r30, 0x7F	; 127
   17e8a:	ff 4f       	sbci	r31, 0xFF	; 255
   17e8c:	7f 01       	movw	r14, r30
   17e8e:	0f ef       	ldi	r16, 0xFF	; 255
   17e90:	1f ef       	ldi	r17, 0xFF	; 255
   17e92:	20 e0       	ldi	r18, 0x00	; 0
   17e94:	30 e0       	ldi	r19, 0x00	; 0
   17e96:	40 e0       	ldi	r20, 0x00	; 0
   17e98:	50 e0       	ldi	r21, 0x00	; 0
   17e9a:	ba 01       	movw	r22, r20
   17e9c:	8c 0d       	add	r24, r12
   17e9e:	9d 1d       	adc	r25, r13
                    ++errors;
   17ea0:	d7 da       	rcall	.-2642   	; 0x17450 <assign_value>
   17ea2:	67 2b       	or	r22, r23
   17ea4:	68 2b       	or	r22, r24
                SS80p->UNIT.OPTIMAL_RETRY_TIME = val;
   17ea6:	69 2b       	or	r22, r25
   17ea8:	19 f4       	brne	.+6      	; 0x17eb0 <POSIX_Read_Config+0x920>
   17eaa:	ff ef       	ldi	r31, 0xFF	; 255
   17eac:	af 1a       	sub	r10, r31
   17eae:	bf 0a       	sbc	r11, r31
   17eb0:	cf 57       	subi	r28, 0x7F	; 127
   17eb2:	df 4f       	sbci	r29, 0xFF	; 255
   17eb4:	88 81       	ld	r24, Y
   17eb6:	99 81       	ldd	r25, Y+1	; 0x01
   17eb8:	c1 58       	subi	r28, 0x81	; 129
   17eba:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"ACCESS_TIME")) )
   17ebc:	d2 01       	movw	r26, r4
   17ebe:	d8 96       	adiw	r26, 0x38	; 56
   17ec0:	9c 93       	st	X, r25
   17ec2:	8e 93       	st	-X, r24
   17ec4:	d7 97       	sbiw	r26, 0x37	; 55
   17ec6:	10 cc       	rjmp	.-2016   	; 0x176e8 <POSIX_Read_Config+0x158>
   17ec8:	65 e2       	ldi	r22, 0x25	; 37
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   17eca:	75 e1       	ldi	r23, 0x15	; 21
   17ecc:	c6 01       	movw	r24, r12
   17ece:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   17ed2:	00 97       	sbiw	r24, 0x00	; 0
   17ed4:	09 f1       	breq	.+66     	; 0x17f18 <POSIX_Read_Config+0x988>
   17ed6:	fe 01       	movw	r30, r28
   17ed8:	ef 57       	subi	r30, 0x7F	; 127
   17eda:	ff 4f       	sbci	r31, 0xFF	; 255
   17edc:	7f 01       	movw	r14, r30
   17ede:	0f ef       	ldi	r16, 0xFF	; 255
   17ee0:	1f ef       	ldi	r17, 0xFF	; 255
   17ee2:	20 e0       	ldi	r18, 0x00	; 0
   17ee4:	30 e0       	ldi	r19, 0x00	; 0
   17ee6:	40 e0       	ldi	r20, 0x00	; 0
   17ee8:	50 e0       	ldi	r21, 0x00	; 0
   17eea:	ba 01       	movw	r22, r20
   17eec:	8c 0d       	add	r24, r12
   17eee:	9d 1d       	adc	r25, r13
                    ++errors;
   17ef0:	af da       	rcall	.-2722   	; 0x17450 <assign_value>
   17ef2:	67 2b       	or	r22, r23
                SS80p->UNIT.ACCESS_TIME = val;
   17ef4:	68 2b       	or	r22, r24
   17ef6:	69 2b       	or	r22, r25
   17ef8:	19 f4       	brne	.+6      	; 0x17f00 <POSIX_Read_Config+0x970>
   17efa:	ff ef       	ldi	r31, 0xFF	; 255
   17efc:	af 1a       	sub	r10, r31
   17efe:	bf 0a       	sbc	r11, r31
   17f00:	cf 57       	subi	r28, 0x7F	; 127
   17f02:	df 4f       	sbci	r29, 0xFF	; 255
   17f04:	88 81       	ld	r24, Y
   17f06:	99 81       	ldd	r25, Y+1	; 0x01
   17f08:	c1 58       	subi	r28, 0x81	; 129
            }
            else if( (ind = token(ptr,"MAXIMUM_INTERLEAVE")) )
   17f0a:	d0 40       	sbci	r29, 0x00	; 0
   17f0c:	d2 01       	movw	r26, r4
   17f0e:	da 96       	adiw	r26, 0x3a	; 58
   17f10:	9c 93       	st	X, r25
   17f12:	8e 93       	st	-X, r24
   17f14:	d9 97       	sbiw	r26, 0x39	; 57
   17f16:	e8 cb       	rjmp	.-2096   	; 0x176e8 <POSIX_Read_Config+0x158>
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   17f18:	61 e3       	ldi	r22, 0x31	; 49
   17f1a:	75 e1       	ldi	r23, 0x15	; 21
   17f1c:	c6 01       	movw	r24, r12
   17f1e:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   17f22:	00 97       	sbiw	r24, 0x00	; 0
   17f24:	f1 f0       	breq	.+60     	; 0x17f62 <POSIX_Read_Config+0x9d2>
   17f26:	fe 01       	movw	r30, r28
   17f28:	ef 57       	subi	r30, 0x7F	; 127
   17f2a:	ff 4f       	sbci	r31, 0xFF	; 255
   17f2c:	7f 01       	movw	r14, r30
   17f2e:	0f ef       	ldi	r16, 0xFF	; 255
   17f30:	10 e0       	ldi	r17, 0x00	; 0
   17f32:	20 e0       	ldi	r18, 0x00	; 0
   17f34:	30 e0       	ldi	r19, 0x00	; 0
   17f36:	40 e0       	ldi	r20, 0x00	; 0
   17f38:	50 e0       	ldi	r21, 0x00	; 0
   17f3a:	ba 01       	movw	r22, r20
                    ++errors;
   17f3c:	8c 0d       	add	r24, r12
   17f3e:	9d 1d       	adc	r25, r13
   17f40:	87 da       	rcall	.-2802   	; 0x17450 <assign_value>
                SS80p->UNIT.MAXIMUM_INTERLEAVE = val;
   17f42:	67 2b       	or	r22, r23
   17f44:	68 2b       	or	r22, r24
   17f46:	69 2b       	or	r22, r25
   17f48:	19 f4       	brne	.+6      	; 0x17f50 <POSIX_Read_Config+0x9c0>
   17f4a:	ff ef       	ldi	r31, 0xFF	; 255
   17f4c:	af 1a       	sub	r10, r31
   17f4e:	bf 0a       	sbc	r11, r31
   17f50:	cf 57       	subi	r28, 0x7F	; 127
   17f52:	df 4f       	sbci	r29, 0xFF	; 255
            }
            else if( (ind = token(ptr,"FIXED_VOLUMES")) )
   17f54:	88 81       	ld	r24, Y
   17f56:	c1 58       	subi	r28, 0x81	; 129
   17f58:	d0 40       	sbci	r29, 0x00	; 0
   17f5a:	d2 01       	movw	r26, r4
   17f5c:	db 96       	adiw	r26, 0x3b	; 59
   17f5e:	8c 93       	st	X, r24
   17f60:	c3 cb       	rjmp	.-2170   	; 0x176e8 <POSIX_Read_Config+0x158>
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   17f62:	64 e4       	ldi	r22, 0x44	; 68
   17f64:	75 e1       	ldi	r23, 0x15	; 21
   17f66:	c6 01       	movw	r24, r12
   17f68:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   17f6c:	00 97       	sbiw	r24, 0x00	; 0
   17f6e:	f1 f0       	breq	.+60     	; 0x17fac <POSIX_Read_Config+0xa1c>
   17f70:	fe 01       	movw	r30, r28
   17f72:	ef 57       	subi	r30, 0x7F	; 127
   17f74:	ff 4f       	sbci	r31, 0xFF	; 255
   17f76:	7f 01       	movw	r14, r30
   17f78:	0f ef       	ldi	r16, 0xFF	; 255
   17f7a:	10 e0       	ldi	r17, 0x00	; 0
   17f7c:	20 e0       	ldi	r18, 0x00	; 0
   17f7e:	30 e0       	ldi	r19, 0x00	; 0
   17f80:	40 e0       	ldi	r20, 0x00	; 0
   17f82:	50 e0       	ldi	r21, 0x00	; 0
   17f84:	ba 01       	movw	r22, r20
                    ++errors;
   17f86:	8c 0d       	add	r24, r12
   17f88:	9d 1d       	adc	r25, r13
   17f8a:	62 da       	rcall	.-2876   	; 0x17450 <assign_value>
                SS80p->UNIT.FIXED_VOLUMES = val;
   17f8c:	67 2b       	or	r22, r23
   17f8e:	68 2b       	or	r22, r24
   17f90:	69 2b       	or	r22, r25
   17f92:	19 f4       	brne	.+6      	; 0x17f9a <POSIX_Read_Config+0xa0a>
   17f94:	ff ef       	ldi	r31, 0xFF	; 255
   17f96:	af 1a       	sub	r10, r31
   17f98:	bf 0a       	sbc	r11, r31
   17f9a:	cf 57       	subi	r28, 0x7F	; 127
   17f9c:	df 4f       	sbci	r29, 0xFF	; 255
            }
            else if( (ind = token(ptr,"REMOVABLE_VOLUMES")) )
   17f9e:	88 81       	ld	r24, Y
   17fa0:	c1 58       	subi	r28, 0x81	; 129
   17fa2:	d0 40       	sbci	r29, 0x00	; 0
   17fa4:	d2 01       	movw	r26, r4
   17fa6:	dc 96       	adiw	r26, 0x3c	; 60
   17fa8:	8c 93       	st	X, r24
   17faa:	9e cb       	rjmp	.-2244   	; 0x176e8 <POSIX_Read_Config+0x158>
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   17fac:	62 e5       	ldi	r22, 0x52	; 82
   17fae:	75 e1       	ldi	r23, 0x15	; 21
   17fb0:	c6 01       	movw	r24, r12
   17fb2:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   17fb6:	00 97       	sbiw	r24, 0x00	; 0
   17fb8:	f1 f0       	breq	.+60     	; 0x17ff6 <POSIX_Read_Config+0xa66>
   17fba:	fe 01       	movw	r30, r28
   17fbc:	ef 57       	subi	r30, 0x7F	; 127
   17fbe:	ff 4f       	sbci	r31, 0xFF	; 255
   17fc0:	7f 01       	movw	r14, r30
   17fc2:	0f ef       	ldi	r16, 0xFF	; 255
   17fc4:	10 e0       	ldi	r17, 0x00	; 0
   17fc6:	20 e0       	ldi	r18, 0x00	; 0
   17fc8:	30 e0       	ldi	r19, 0x00	; 0
   17fca:	40 e0       	ldi	r20, 0x00	; 0
   17fcc:	50 e0       	ldi	r21, 0x00	; 0
   17fce:	ba 01       	movw	r22, r20
   17fd0:	8c 0d       	add	r24, r12
                    ++errors;
   17fd2:	9d 1d       	adc	r25, r13
   17fd4:	3d da       	rcall	.-2950   	; 0x17450 <assign_value>
   17fd6:	67 2b       	or	r22, r23
                SS80p->UNIT.REMOVABLE_VOLUMES = val;
   17fd8:	68 2b       	or	r22, r24
   17fda:	69 2b       	or	r22, r25
   17fdc:	19 f4       	brne	.+6      	; 0x17fe4 <POSIX_Read_Config+0xa54>
   17fde:	ff ef       	ldi	r31, 0xFF	; 255
   17fe0:	af 1a       	sub	r10, r31
   17fe2:	bf 0a       	sbc	r11, r31
   17fe4:	cf 57       	subi	r28, 0x7F	; 127
   17fe6:	df 4f       	sbci	r29, 0xFF	; 255
            }
            else
            {
                printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   17fe8:	88 81       	ld	r24, Y
   17fea:	c1 58       	subi	r28, 0x81	; 129
   17fec:	d0 40       	sbci	r29, 0x00	; 0
   17fee:	d2 01       	movw	r26, r4
   17ff0:	dd 96       	adiw	r26, 0x3d	; 61
   17ff2:	8c 93       	st	X, r24
   17ff4:	79 cb       	rjmp	.-2318   	; 0x176e8 <POSIX_Read_Config+0x158>
   17ff6:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <lines+0x1>
   17ffa:	8f 93       	push	r24
   17ffc:	80 91 f4 19 	lds	r24, 0x19F4	; 0x8019f4 <lines>
                ++errors;
            }
            break;

        case SS80_VOLUME:
            if( (ind = token(ptr,"MAX_CYLINDER")) )
   18000:	8f 93       	push	r24
   18002:	df 92       	push	r13
   18004:	cf 92       	push	r12
   18006:	87 eb       	ldi	r24, 0xB7	; 183
   18008:	9e e2       	ldi	r25, 0x2E	; 46
   1800a:	96 cc       	rjmp	.-1748   	; 0x17938 <POSIX_Read_Config+0x3a8>
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val) )
   1800c:	64 e6       	ldi	r22, 0x64	; 100
   1800e:	75 e1       	ldi	r23, 0x15	; 21
   18010:	c6 01       	movw	r24, r12
   18012:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   18016:	00 97       	sbiw	r24, 0x00	; 0
   18018:	f9 f0       	breq	.+62     	; 0x18058 <POSIX_Read_Config+0xac8>
   1801a:	9e 01       	movw	r18, r28
   1801c:	2f 57       	subi	r18, 0x7F	; 127
   1801e:	3f 4f       	sbci	r19, 0xFF	; 255
   18020:	79 01       	movw	r14, r18
   18022:	0f ef       	ldi	r16, 0xFF	; 255
   18024:	1f ef       	ldi	r17, 0xFF	; 255
   18026:	98 01       	movw	r18, r16
   18028:	40 e0       	ldi	r20, 0x00	; 0
   1802a:	50 e0       	ldi	r21, 0x00	; 0
   1802c:	ba 01       	movw	r22, r20
                    ++errors;
   1802e:	8c 0d       	add	r24, r12
   18030:	9d 1d       	adc	r25, r13
   18032:	0e da       	rcall	.-3044   	; 0x17450 <assign_value>
                SS80p->VOLUME.MAX_CYLINDER = val;
   18034:	67 2b       	or	r22, r23
   18036:	68 2b       	or	r22, r24
   18038:	69 2b       	or	r22, r25
   1803a:	19 f4       	brne	.+6      	; 0x18042 <POSIX_Read_Config+0xab2>
   1803c:	3f ef       	ldi	r19, 0xFF	; 255
   1803e:	a3 1a       	sub	r10, r19
   18040:	b3 0a       	sbc	r11, r19
   18042:	cf 57       	subi	r28, 0x7F	; 127
   18044:	df 4f       	sbci	r29, 0xFF	; 255
   18046:	88 81       	ld	r24, Y
   18048:	99 81       	ldd	r25, Y+1	; 0x01
            }
            else if( (ind = token(ptr,"MAX_HEAD")) )
   1804a:	aa 81       	ldd	r26, Y+2	; 0x02
   1804c:	bb 81       	ldd	r27, Y+3	; 0x03
   1804e:	c1 58       	subi	r28, 0x81	; 129
   18050:	d0 40       	sbci	r29, 0x00	; 0
   18052:	f2 01       	movw	r30, r4
   18054:	fe 96       	adiw	r30, 0x3e	; 62
   18056:	73 c0       	rjmp	.+230    	; 0x1813e <POSIX_Read_Config+0xbae>
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   18058:	61 e7       	ldi	r22, 0x71	; 113
   1805a:	75 e1       	ldi	r23, 0x15	; 21
   1805c:	c6 01       	movw	r24, r12
   1805e:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   18062:	00 97       	sbiw	r24, 0x00	; 0
   18064:	f1 f0       	breq	.+60     	; 0x180a2 <POSIX_Read_Config+0xb12>
   18066:	de 01       	movw	r26, r28
   18068:	af 57       	subi	r26, 0x7F	; 127
   1806a:	bf 4f       	sbci	r27, 0xFF	; 255
   1806c:	7d 01       	movw	r14, r26
   1806e:	0f ef       	ldi	r16, 0xFF	; 255
   18070:	10 e0       	ldi	r17, 0x00	; 0
   18072:	20 e0       	ldi	r18, 0x00	; 0
   18074:	30 e0       	ldi	r19, 0x00	; 0
   18076:	40 e0       	ldi	r20, 0x00	; 0
   18078:	50 e0       	ldi	r21, 0x00	; 0
   1807a:	ba 01       	movw	r22, r20
                    ++errors;
   1807c:	8c 0d       	add	r24, r12
   1807e:	9d 1d       	adc	r25, r13
   18080:	e7 d9       	rcall	.-3122   	; 0x17450 <assign_value>
                SS80p->VOLUME.MAX_HEAD = val;
   18082:	67 2b       	or	r22, r23
   18084:	68 2b       	or	r22, r24
   18086:	69 2b       	or	r22, r25
   18088:	19 f4       	brne	.+6      	; 0x18090 <POSIX_Read_Config+0xb00>
   1808a:	bf ef       	ldi	r27, 0xFF	; 255
   1808c:	ab 1a       	sub	r10, r27
   1808e:	bb 0a       	sbc	r11, r27
   18090:	cf 57       	subi	r28, 0x7F	; 127
   18092:	df 4f       	sbci	r29, 0xFF	; 255
            }
            else if( (ind = token(ptr,"MAX_SECTOR")) )
   18094:	88 81       	ld	r24, Y
   18096:	c1 58       	subi	r28, 0x81	; 129
   18098:	d0 40       	sbci	r29, 0x00	; 0
   1809a:	f2 01       	movw	r30, r4
   1809c:	ee 5b       	subi	r30, 0xBE	; 190
   1809e:	ff 4f       	sbci	r31, 0xFF	; 255
   180a0:	18 c1       	rjmp	.+560    	; 0x182d2 <POSIX_Read_Config+0xd42>
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   180a2:	6a e7       	ldi	r22, 0x7A	; 122
   180a4:	75 e1       	ldi	r23, 0x15	; 21
   180a6:	c6 01       	movw	r24, r12
   180a8:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   180ac:	00 97       	sbiw	r24, 0x00	; 0
   180ae:	09 f1       	breq	.+66     	; 0x180f2 <POSIX_Read_Config+0xb62>
   180b0:	fe 01       	movw	r30, r28
   180b2:	ef 57       	subi	r30, 0x7F	; 127
   180b4:	ff 4f       	sbci	r31, 0xFF	; 255
   180b6:	7f 01       	movw	r14, r30
   180b8:	0f ef       	ldi	r16, 0xFF	; 255
   180ba:	1f ef       	ldi	r17, 0xFF	; 255
   180bc:	20 e0       	ldi	r18, 0x00	; 0
   180be:	30 e0       	ldi	r19, 0x00	; 0
   180c0:	40 e0       	ldi	r20, 0x00	; 0
   180c2:	50 e0       	ldi	r21, 0x00	; 0
   180c4:	ba 01       	movw	r22, r20
                    ++errors;
   180c6:	8c 0d       	add	r24, r12
   180c8:	9d 1d       	adc	r25, r13
   180ca:	c2 d9       	rcall	.-3196   	; 0x17450 <assign_value>
                SS80p->VOLUME.MAX_SECTOR = val;
   180cc:	67 2b       	or	r22, r23
   180ce:	68 2b       	or	r22, r24
   180d0:	69 2b       	or	r22, r25
   180d2:	19 f4       	brne	.+6      	; 0x180da <POSIX_Read_Config+0xb4a>
   180d4:	ff ef       	ldi	r31, 0xFF	; 255
   180d6:	af 1a       	sub	r10, r31
   180d8:	bf 0a       	sbc	r11, r31
   180da:	cf 57       	subi	r28, 0x7F	; 127
   180dc:	df 4f       	sbci	r29, 0xFF	; 255
   180de:	88 81       	ld	r24, Y
   180e0:	99 81       	ldd	r25, Y+1	; 0x01
   180e2:	c1 58       	subi	r28, 0x81	; 129
            }
            else if( (ind = token(ptr,"MAX_BLOCK_NUMBER")) )
   180e4:	d0 40       	sbci	r29, 0x00	; 0
   180e6:	f2 01       	movw	r30, r4
   180e8:	ed 5b       	subi	r30, 0xBD	; 189
   180ea:	ff 4f       	sbci	r31, 0xFF	; 255
   180ec:	91 83       	std	Z+1, r25	; 0x01
   180ee:	80 83       	st	Z, r24
   180f0:	fb ca       	rjmp	.-2570   	; 0x176e8 <POSIX_Read_Config+0x158>
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val) )
   180f2:	65 e8       	ldi	r22, 0x85	; 133
   180f4:	75 e1       	ldi	r23, 0x15	; 21
   180f6:	c6 01       	movw	r24, r12
   180f8:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   180fc:	00 97       	sbiw	r24, 0x00	; 0
   180fe:	21 f1       	breq	.+72     	; 0x18148 <POSIX_Read_Config+0xbb8>
   18100:	9e 01       	movw	r18, r28
   18102:	2f 57       	subi	r18, 0x7F	; 127
   18104:	3f 4f       	sbci	r19, 0xFF	; 255
   18106:	79 01       	movw	r14, r18
   18108:	0f ef       	ldi	r16, 0xFF	; 255
   1810a:	1f ef       	ldi	r17, 0xFF	; 255
   1810c:	98 01       	movw	r18, r16
   1810e:	40 e0       	ldi	r20, 0x00	; 0
   18110:	50 e0       	ldi	r21, 0x00	; 0
   18112:	ba 01       	movw	r22, r20
                    ++errors;
   18114:	8c 0d       	add	r24, r12
   18116:	9d 1d       	adc	r25, r13
                SS80p->VOLUME.MAX_BLOCK_NUMBER = val;
   18118:	9b d9       	rcall	.-3274   	; 0x17450 <assign_value>
   1811a:	67 2b       	or	r22, r23
   1811c:	68 2b       	or	r22, r24
   1811e:	69 2b       	or	r22, r25
   18120:	19 f4       	brne	.+6      	; 0x18128 <POSIX_Read_Config+0xb98>
   18122:	3f ef       	ldi	r19, 0xFF	; 255
   18124:	a3 1a       	sub	r10, r19
   18126:	b3 0a       	sbc	r11, r19
   18128:	cf 57       	subi	r28, 0x7F	; 127
   1812a:	df 4f       	sbci	r29, 0xFF	; 255
   1812c:	88 81       	ld	r24, Y
   1812e:	99 81       	ldd	r25, Y+1	; 0x01
   18130:	aa 81       	ldd	r26, Y+2	; 0x02
   18132:	bb 81       	ldd	r27, Y+3	; 0x03
   18134:	c1 58       	subi	r28, 0x81	; 129
   18136:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"INTERLEAVE")) )
   18138:	f2 01       	movw	r30, r4
   1813a:	eb 5b       	subi	r30, 0xBB	; 187
   1813c:	ff 4f       	sbci	r31, 0xFF	; 255
   1813e:	80 83       	st	Z, r24
   18140:	91 83       	std	Z+1, r25	; 0x01
   18142:	a2 83       	std	Z+2, r26	; 0x02
   18144:	b3 83       	std	Z+3, r27	; 0x03
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   18146:	d0 ca       	rjmp	.-2656   	; 0x176e8 <POSIX_Read_Config+0x158>
   18148:	69 e3       	ldi	r22, 0x39	; 57
   1814a:	75 e1       	ldi	r23, 0x15	; 21
   1814c:	c6 01       	movw	r24, r12
   1814e:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   18152:	00 97       	sbiw	r24, 0x00	; 0
   18154:	f1 f0       	breq	.+60     	; 0x18192 <POSIX_Read_Config+0xc02>
   18156:	de 01       	movw	r26, r28
   18158:	af 57       	subi	r26, 0x7F	; 127
   1815a:	bf 4f       	sbci	r27, 0xFF	; 255
   1815c:	7d 01       	movw	r14, r26
   1815e:	0f ef       	ldi	r16, 0xFF	; 255
   18160:	10 e0       	ldi	r17, 0x00	; 0
   18162:	20 e0       	ldi	r18, 0x00	; 0
   18164:	30 e0       	ldi	r19, 0x00	; 0
   18166:	40 e0       	ldi	r20, 0x00	; 0
   18168:	50 e0       	ldi	r21, 0x00	; 0
                    ++errors;
   1816a:	ba 01       	movw	r22, r20
   1816c:	8c 0d       	add	r24, r12
                SS80p->VOLUME.INTERLEAVE = val;
   1816e:	9d 1d       	adc	r25, r13
   18170:	6f d9       	rcall	.-3362   	; 0x17450 <assign_value>
   18172:	67 2b       	or	r22, r23
   18174:	68 2b       	or	r22, r24
   18176:	69 2b       	or	r22, r25
   18178:	19 f4       	brne	.+6      	; 0x18180 <POSIX_Read_Config+0xbf0>
   1817a:	bf ef       	ldi	r27, 0xFF	; 255
   1817c:	ab 1a       	sub	r10, r27
   1817e:	bb 0a       	sbc	r11, r27
            }
            else
            {
                printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   18180:	cf 57       	subi	r28, 0x7F	; 127
   18182:	df 4f       	sbci	r29, 0xFF	; 255
   18184:	88 81       	ld	r24, Y
   18186:	c1 58       	subi	r28, 0x81	; 129
   18188:	d0 40       	sbci	r29, 0x00	; 0
   1818a:	f2 01       	movw	r30, r4
   1818c:	e7 5b       	subi	r30, 0xB7	; 183
   1818e:	ff 4f       	sbci	r31, 0xFF	; 255
   18190:	a0 c0       	rjmp	.+320    	; 0x182d2 <POSIX_Read_Config+0xd42>
   18192:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <lines+0x1>
   18196:	8f 93       	push	r24
   18198:	80 91 f4 19 	lds	r24, 0x19F4	; 0x8019f4 <lines>
                ++errors;
   1819c:	8f 93       	push	r24
   1819e:	df 92       	push	r13
   181a0:	cf 92       	push	r12
            }
            break;

#ifdef AMIGO
        case AMIGO_STATE:
            if(token(ptr,"HEADER"))
   181a2:	89 e8       	ldi	r24, 0x89	; 137
   181a4:	9e e2       	ldi	r25, 0x2E	; 46
   181a6:	1f 92       	push	r1
   181a8:	9f 93       	push	r25
   181aa:	8f 93       	push	r24
   181ac:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
            {
                push_state(state);
   181b0:	ef ef       	ldi	r30, 0xFF	; 255
   181b2:	ae 1a       	sub	r10, r30
   181b4:	be 0a       	sbc	r11, r30
   181b6:	06 c2       	rjmp	.+1036   	; 0x185c4 <POSIX_Read_Config+0x1034>
                state = AMIGO_HEADER;
   181b8:	62 e7       	ldi	r22, 0x72	; 114
   181ba:	74 e1       	ldi	r23, 0x14	; 20
   181bc:	c6 01       	movw	r24, r12
   181be:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
            }
            else if(token(ptr,"CONFIG"))
   181c2:	89 2b       	or	r24, r25
   181c4:	39 f0       	breq	.+14     	; 0x181d4 <POSIX_Read_Config+0xc44>
   181c6:	87 e0       	ldi	r24, 0x07	; 7
   181c8:	90 e0       	ldi	r25, 0x00	; 0
   181ca:	12 d9       	rcall	.-3548   	; 0x173f0 <push_state>
   181cc:	28 e0       	ldi	r18, 0x08	; 8
            {
                push_state(state);
   181ce:	82 2e       	mov	r8, r18
   181d0:	91 2c       	mov	r9, r1
   181d2:	8a ca       	rjmp	.-2796   	; 0x176e8 <POSIX_Read_Config+0x158>
   181d4:	6b e6       	ldi	r22, 0x6B	; 107
                state = AMIGO_CONFIG;
   181d6:	74 e1       	ldi	r23, 0x14	; 20
   181d8:	c6 01       	movw	r24, r12
   181da:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
            }
            else if(token(ptr,"GEOMETRY"))
   181de:	89 2b       	or	r24, r25
   181e0:	39 f0       	breq	.+14     	; 0x181f0 <POSIX_Read_Config+0xc60>
   181e2:	87 e0       	ldi	r24, 0x07	; 7
   181e4:	90 e0       	ldi	r25, 0x00	; 0
   181e6:	04 d9       	rcall	.-3576   	; 0x173f0 <push_state>
   181e8:	99 e0       	ldi	r25, 0x09	; 9
   181ea:	89 2e       	mov	r8, r25
            {
                push_state(state);
   181ec:	91 2c       	mov	r9, r1
   181ee:	7c ca       	rjmp	.-2824   	; 0x176e8 <POSIX_Read_Config+0x158>
   181f0:	66 e9       	ldi	r22, 0x96	; 150
   181f2:	75 e1       	ldi	r23, 0x15	; 21
                state = AMIGO_GEOMETRY;
   181f4:	c6 01       	movw	r24, r12
   181f6:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   181fa:	89 2b       	or	r24, r25
            }
            else
            {
                printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   181fc:	39 f0       	breq	.+14     	; 0x1820c <POSIX_Read_Config+0xc7c>
   181fe:	87 e0       	ldi	r24, 0x07	; 7
   18200:	90 e0       	ldi	r25, 0x00	; 0
   18202:	f6 d8       	rcall	.-3604   	; 0x173f0 <push_state>
   18204:	8a e0       	ldi	r24, 0x0A	; 10
   18206:	88 2e       	mov	r8, r24
   18208:	91 2c       	mov	r9, r1
   1820a:	6e ca       	rjmp	.-2852   	; 0x176e8 <POSIX_Read_Config+0x158>
   1820c:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <lines+0x1>
   18210:	8f 93       	push	r24
   18212:	80 91 f4 19 	lds	r24, 0x19F4	; 0x8019f4 <lines>
   18216:	8f 93       	push	r24
   18218:	df 92       	push	r13
   1821a:	cf 92       	push	r12
   1821c:	1f 92       	push	r1
   1821e:	c7 56       	subi	r28, 0x67	; 103
   18220:	df 4f       	sbci	r29, 0xFF	; 255
   18222:	38 81       	ld	r19, Y
   18224:	c9 59       	subi	r28, 0x99	; 153
                ++errors;
            }
            break;

        case AMIGO_HEADER:
            if( (ind = token(ptr,"DRIVE")) )
   18226:	d0 40       	sbci	r29, 0x00	; 0
   18228:	3f 93       	push	r19
   1822a:	c8 56       	subi	r28, 0x68	; 104
   1822c:	df 4f       	sbci	r29, 0xFF	; 255
   1822e:	48 81       	ld	r20, Y
   18230:	c8 59       	subi	r28, 0x98	; 152
   18232:	d0 40       	sbci	r29, 0x00	; 0
            {
                ptr += ind;
                printf("Skipping %s, at line:%d\n", ptr,lines);
   18234:	c1 c1       	rjmp	.+898    	; 0x185b8 <POSIX_Read_Config+0x1028>
   18236:	6f e9       	ldi	r22, 0x9F	; 159
   18238:	75 e1       	ldi	r23, 0x15	; 21
   1823a:	c6 01       	movw	r24, r12
   1823c:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   18240:	00 97       	sbiw	r24, 0x00	; 0
   18242:	d1 f0       	breq	.+52     	; 0x18278 <POSIX_Read_Config+0xce8>
   18244:	20 91 f5 19 	lds	r18, 0x19F5	; 0x8019f5 <lines+0x1>
   18248:	2f 93       	push	r18
   1824a:	20 91 f4 19 	lds	r18, 0x19F4	; 0x8019f4 <lines>
   1824e:	2f 93       	push	r18
   18250:	c8 0e       	add	r12, r24
   18252:	d9 1e       	adc	r13, r25
   18254:	df 92       	push	r13
   18256:	cf 92       	push	r12
   18258:	1f 92       	push	r1
   1825a:	ca 56       	subi	r28, 0x6A	; 106
   1825c:	df 4f       	sbci	r29, 0xFF	; 255
   1825e:	b8 81       	ld	r27, Y
   18260:	c6 59       	subi	r28, 0x96	; 150
   18262:	d0 40       	sbci	r29, 0x00	; 0
   18264:	bf 93       	push	r27
                //skip this
            }
            else if( (ind = token(ptr,"ADDRESS")) )
   18266:	cb 56       	subi	r28, 0x6B	; 107
   18268:	df 4f       	sbci	r29, 0xFF	; 255
   1826a:	e8 81       	ld	r30, Y
   1826c:	c5 59       	subi	r28, 0x95	; 149
   1826e:	d0 40       	sbci	r29, 0x00	; 0
   18270:	ef 93       	push	r30
   18272:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 14UL, &val) )
   18276:	a6 c1       	rjmp	.+844    	; 0x185c4 <POSIX_Read_Config+0x1034>
   18278:	63 e6       	ldi	r22, 0x63	; 99
   1827a:	74 e1       	ldi	r23, 0x14	; 20
   1827c:	c6 01       	movw	r24, r12
   1827e:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   18282:	00 97       	sbiw	r24, 0x00	; 0
   18284:	41 f1       	breq	.+80     	; 0x182d6 <POSIX_Read_Config+0xd46>
   18286:	de 01       	movw	r26, r28
   18288:	af 57       	subi	r26, 0x7F	; 127
   1828a:	bf 4f       	sbci	r27, 0xFF	; 255
   1828c:	7d 01       	movw	r14, r26
   1828e:	0e e0       	ldi	r16, 0x0E	; 14
   18290:	10 e0       	ldi	r17, 0x00	; 0
   18292:	20 e0       	ldi	r18, 0x00	; 0
   18294:	30 e0       	ldi	r19, 0x00	; 0
   18296:	40 e0       	ldi	r20, 0x00	; 0
                    ++errors;
   18298:	50 e0       	ldi	r21, 0x00	; 0
   1829a:	ba 01       	movw	r22, r20
   1829c:	8c 0d       	add	r24, r12
                //skip this
            }
            else if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                tmp = 0xff;
   1829e:	9d 1d       	adc	r25, r13
   182a0:	d7 d8       	rcall	.-3666   	; 0x17450 <assign_value>
                if (!assign_value(ptr, 0, 14UL, &val) )
                    ++errors;
                else
                    tmp = val;
   182a2:	67 2b       	or	r22, r23
   182a4:	68 2b       	or	r22, r24
   182a6:	69 2b       	or	r22, r25
   182a8:	29 f4       	brne	.+10     	; 0x182b4 <POSIX_Read_Config+0xd24>
   182aa:	bf ef       	ldi	r27, 0xFF	; 255
                Devices[index].ADDRESS = tmp;
   182ac:	ab 1a       	sub	r10, r27
   182ae:	bb 0a       	sbc	r11, r27
   182b0:	8f ef       	ldi	r24, 0xFF	; 255
   182b2:	05 c0       	rjmp	.+10     	; 0x182be <POSIX_Read_Config+0xd2e>
   182b4:	cf 57       	subi	r28, 0x7F	; 127
   182b6:	df 4f       	sbci	r29, 0xFF	; 255
   182b8:	88 81       	ld	r24, Y
   182ba:	c1 58       	subi	r28, 0x81	; 129
   182bc:	d0 40       	sbci	r29, 0x00	; 0
                AMIGOp->HEADER.ADDRESS = tmp;
   182be:	97 e0       	ldi	r25, 0x07	; 7
   182c0:	96 9d       	mul	r25, r6
   182c2:	f0 01       	movw	r30, r0
            }
            else if( (ind = token(ptr,"PPR")) )
   182c4:	97 9d       	mul	r25, r7
   182c6:	f0 0d       	add	r31, r0
   182c8:	11 24       	eor	r1, r1
   182ca:	e1 5b       	subi	r30, 0xB1	; 177
   182cc:	f0 4e       	sbci	r31, 0xE0	; 224
   182ce:	81 83       	std	Z+1, r24	; 0x01
   182d0:	f1 01       	movw	r30, r2
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 7UL, &val) )
   182d2:	80 83       	st	Z, r24
   182d4:	09 ca       	rjmp	.-3054   	; 0x176e8 <POSIX_Read_Config+0x158>
   182d6:	60 e9       	ldi	r22, 0x90	; 144
   182d8:	74 e1       	ldi	r23, 0x14	; 20
   182da:	c6 01       	movw	r24, r12
   182dc:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   182e0:	00 97       	sbiw	r24, 0x00	; 0
   182e2:	39 f1       	breq	.+78     	; 0x18332 <POSIX_Read_Config+0xda2>
   182e4:	9e 01       	movw	r18, r28
   182e6:	2f 57       	subi	r18, 0x7F	; 127
   182e8:	3f 4f       	sbci	r19, 0xFF	; 255
   182ea:	79 01       	movw	r14, r18
   182ec:	07 e0       	ldi	r16, 0x07	; 7
   182ee:	10 e0       	ldi	r17, 0x00	; 0
   182f0:	20 e0       	ldi	r18, 0x00	; 0
   182f2:	30 e0       	ldi	r19, 0x00	; 0
   182f4:	40 e0       	ldi	r20, 0x00	; 0
   182f6:	50 e0       	ldi	r21, 0x00	; 0
                    ++errors;
   182f8:	ba 01       	movw	r22, r20
   182fa:	8c 0d       	add	r24, r12
   182fc:	9d 1d       	adc	r25, r13
                AMIGOp->HEADER.ADDRESS = tmp;
            }
            else if( (ind = token(ptr,"PPR")) )
            {
                ptr += ind;
                tmp = 0xff;
   182fe:	a8 d8       	rcall	.-3760   	; 0x17450 <assign_value>
   18300:	67 2b       	or	r22, r23
                if (!assign_value(ptr, 0, 7UL, &val) )
                    ++errors;
                else
                    tmp = val;
   18302:	68 2b       	or	r22, r24
   18304:	69 2b       	or	r22, r25
   18306:	29 f4       	brne	.+10     	; 0x18312 <POSIX_Read_Config+0xd82>
   18308:	3f ef       	ldi	r19, 0xFF	; 255
   1830a:	a3 1a       	sub	r10, r19
                Devices[index].PPR = tmp;
   1830c:	b3 0a       	sbc	r11, r19
   1830e:	8f ef       	ldi	r24, 0xFF	; 255
   18310:	05 c0       	rjmp	.+10     	; 0x1831c <POSIX_Read_Config+0xd8c>
   18312:	cf 57       	subi	r28, 0x7F	; 127
   18314:	df 4f       	sbci	r29, 0xFF	; 255
   18316:	88 81       	ld	r24, Y
   18318:	c1 58       	subi	r28, 0x81	; 129
   1831a:	d0 40       	sbci	r29, 0x00	; 0
   1831c:	97 e0       	ldi	r25, 0x07	; 7
                AMIGOp->HEADER.PPR = tmp;
   1831e:	96 9d       	mul	r25, r6
   18320:	f0 01       	movw	r30, r0
            }
            else if( (ind = token(ptr,"FILE")) )
   18322:	97 9d       	mul	r25, r7
   18324:	f0 0d       	add	r31, r0
   18326:	11 24       	eor	r1, r1
   18328:	e1 5b       	subi	r30, 0xB1	; 177
   1832a:	f0 4e       	sbci	r31, 0xE0	; 224
   1832c:	82 83       	std	Z+2, r24	; 0x02
   1832e:	d1 01       	movw	r26, r2
            {
                ptr += ind;
                ptr = skipspaces(ptr);
   18330:	bb cb       	rjmp	.-2186   	; 0x17aa8 <POSIX_Read_Config+0x518>
   18332:	64 e9       	ldi	r22, 0x94	; 148
   18334:	74 e1       	ldi	r23, 0x14	; 20
   18336:	c6 01       	movw	r24, r12
                if(*ptr == '=')
   18338:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   1833c:	00 97       	sbiw	r24, 0x00	; 0
   1833e:	b1 f0       	breq	.+44     	; 0x1836c <POSIX_Read_Config+0xddc>
                {
                    ++ptr;
                    ptr = skipspaces(ptr);
   18340:	8c 0d       	add	r24, r12
   18342:	9d 1d       	adc	r25, r13
   18344:	0e 94 82 32 	call	0x6504	; 0x6504 <skipspaces>
                }
                strncpy(AMIGOp->HEADER.NAME, ptr, sizeof(AMIGOp->HEADER.NAME)-1);
   18348:	fc 01       	movw	r30, r24
   1834a:	20 81       	ld	r18, Z
   1834c:	2d 33       	cpi	r18, 0x3D	; 61
   1834e:	19 f4       	brne	.+6      	; 0x18356 <POSIX_Read_Config+0xdc6>
   18350:	01 96       	adiw	r24, 0x01	; 1
                AMIGOp->HEADER.NAME[sizeof(AMIGOp->HEADER.NAME)-1] = 0;
   18352:	0e 94 82 32 	call	0x6504	; 0x6504 <skipspaces>
   18356:	40 e2       	ldi	r20, 0x20	; 32
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   18358:	50 e0       	ldi	r21, 0x00	; 0
   1835a:	bc 01       	movw	r22, r24
   1835c:	c1 01       	movw	r24, r2
   1835e:	02 96       	adiw	r24, 0x02	; 2
   18360:	0e 94 25 32 	call	0x644a	; 0x644a <strncpy>
   18364:	d1 01       	movw	r26, r2
   18366:	92 96       	adiw	r26, 0x22	; 34
   18368:	1c 92       	st	X, r1
   1836a:	be c9       	rjmp	.-3204   	; 0x176e8 <POSIX_Read_Config+0x158>
   1836c:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <lines+0x1>
   18370:	8f 93       	push	r24
   18372:	80 91 f4 19 	lds	r24, 0x19F4	; 0x8019f4 <lines>
   18376:	8f 93       	push	r24
   18378:	df 92       	push	r13
   1837a:	cf 92       	push	r12
   1837c:	1f 92       	push	r1
   1837e:	cd 56       	subi	r28, 0x6D	; 109
   18380:	df 4f       	sbci	r29, 0xFF	; 255
                ++errors;
            }
            break;

        case AMIGO_CONFIG:
            if( (ind = token(ptr,"ID")) )
   18382:	b8 81       	ld	r27, Y
   18384:	c3 59       	subi	r28, 0x93	; 147
   18386:	d0 40       	sbci	r29, 0x00	; 0
   18388:	bf 93       	push	r27
   1838a:	ce 56       	subi	r28, 0x6E	; 110
   1838c:	df 4f       	sbci	r29, 0xFF	; 255
   1838e:	e8 81       	ld	r30, Y
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   18390:	c2 59       	subi	r28, 0x92	; 146
   18392:	d0 40       	sbci	r29, 0x00	; 0
   18394:	f6 c0       	rjmp	.+492    	; 0x18582 <POSIX_Read_Config+0xff2>
   18396:	69 e9       	ldi	r22, 0x99	; 153
   18398:	74 e1       	ldi	r23, 0x14	; 20
   1839a:	c6 01       	movw	r24, r12
   1839c:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   183a0:	00 97       	sbiw	r24, 0x00	; 0
   183a2:	f9 f0       	breq	.+62     	; 0x183e2 <POSIX_Read_Config+0xe52>
   183a4:	de 01       	movw	r26, r28
   183a6:	af 57       	subi	r26, 0x7F	; 127
   183a8:	bf 4f       	sbci	r27, 0xFF	; 255
   183aa:	7d 01       	movw	r14, r26
   183ac:	0f ef       	ldi	r16, 0xFF	; 255
   183ae:	1f ef       	ldi	r17, 0xFF	; 255
   183b0:	20 e0       	ldi	r18, 0x00	; 0
   183b2:	30 e0       	ldi	r19, 0x00	; 0
   183b4:	40 e0       	ldi	r20, 0x00	; 0
                    ++errors;
   183b6:	50 e0       	ldi	r21, 0x00	; 0
   183b8:	ba 01       	movw	r22, r20
   183ba:	8c 0d       	add	r24, r12
                AMIGOp->CONFIG.ID = val;
   183bc:	9d 1d       	adc	r25, r13
   183be:	48 d8       	rcall	.-3952   	; 0x17450 <assign_value>
   183c0:	67 2b       	or	r22, r23
   183c2:	68 2b       	or	r22, r24
   183c4:	69 2b       	or	r22, r25
   183c6:	19 f4       	brne	.+6      	; 0x183ce <POSIX_Read_Config+0xe3e>
   183c8:	bf ef       	ldi	r27, 0xFF	; 255
   183ca:	ab 1a       	sub	r10, r27
   183cc:	bb 0a       	sbc	r11, r27
   183ce:	cf 57       	subi	r28, 0x7F	; 127
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   183d0:	df 4f       	sbci	r29, 0xFF	; 255
   183d2:	88 81       	ld	r24, Y
   183d4:	99 81       	ldd	r25, Y+1	; 0x01
   183d6:	c1 58       	subi	r28, 0x81	; 129
   183d8:	d0 40       	sbci	r29, 0x00	; 0
   183da:	f1 01       	movw	r30, r2
   183dc:	94 a3       	std	Z+36, r25	; 0x24
   183de:	83 a3       	std	Z+35, r24	; 0x23
   183e0:	83 c9       	rjmp	.-3322   	; 0x176e8 <POSIX_Read_Config+0x158>
   183e2:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <lines+0x1>
   183e6:	8f 93       	push	r24
   183e8:	80 91 f4 19 	lds	r24, 0x19F4	; 0x8019f4 <lines>
   183ec:	8f 93       	push	r24
   183ee:	df 92       	push	r13
   183f0:	cf 92       	push	r12
   183f2:	1f 92       	push	r1
   183f4:	c0 57       	subi	r28, 0x70	; 112
   183f6:	df 4f       	sbci	r29, 0xFF	; 255
   183f8:	f8 81       	ld	r31, Y
   183fa:	c0 59       	subi	r28, 0x90	; 144
                ++errors;
   183fc:	d0 40       	sbci	r29, 0x00	; 0
   183fe:	ff 93       	push	r31
   18400:	c1 57       	subi	r28, 0x71	; 113
   18402:	df 4f       	sbci	r29, 0xFF	; 255
            }
            break;

        case AMIGO_GEOMETRY:
            if( (ind = token(ptr,"BYTES_PER_SECTOR")) )
   18404:	28 81       	ld	r18, Y
   18406:	cf 58       	subi	r28, 0x8F	; 143
   18408:	d0 40       	sbci	r29, 0x00	; 0
   1840a:	2f 93       	push	r18
   1840c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   18410:	3f ef       	ldi	r19, 0xFF	; 255
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0x1000UL, &val) )
   18412:	a3 1a       	sub	r10, r19
   18414:	b3 0a       	sbc	r11, r19
   18416:	d6 c0       	rjmp	.+428    	; 0x185c4 <POSIX_Read_Config+0x1034>
   18418:	65 ea       	ldi	r22, 0xA5	; 165
   1841a:	75 e1       	ldi	r23, 0x15	; 21
   1841c:	c6 01       	movw	r24, r12
   1841e:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   18422:	00 97       	sbiw	r24, 0x00	; 0
   18424:	f9 f0       	breq	.+62     	; 0x18464 <POSIX_Read_Config+0xed4>
   18426:	de 01       	movw	r26, r28
   18428:	af 57       	subi	r26, 0x7F	; 127
   1842a:	bf 4f       	sbci	r27, 0xFF	; 255
   1842c:	7d 01       	movw	r14, r26
   1842e:	00 e0       	ldi	r16, 0x00	; 0
   18430:	10 e1       	ldi	r17, 0x10	; 16
   18432:	20 e0       	ldi	r18, 0x00	; 0
   18434:	30 e0       	ldi	r19, 0x00	; 0
   18436:	40 e0       	ldi	r20, 0x00	; 0
                    ++errors;
   18438:	50 e0       	ldi	r21, 0x00	; 0
   1843a:	ba 01       	movw	r22, r20
   1843c:	8c 0d       	add	r24, r12
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val;
   1843e:	9d 1d       	adc	r25, r13
   18440:	07 d8       	rcall	.-4082   	; 0x17450 <assign_value>
   18442:	67 2b       	or	r22, r23
   18444:	68 2b       	or	r22, r24
   18446:	69 2b       	or	r22, r25
   18448:	19 f4       	brne	.+6      	; 0x18450 <POSIX_Read_Config+0xec0>
   1844a:	bf ef       	ldi	r27, 0xFF	; 255
   1844c:	ab 1a       	sub	r10, r27
   1844e:	bb 0a       	sbc	r11, r27
   18450:	cf 57       	subi	r28, 0x7F	; 127
            }
            else if( (ind = token(ptr,"SECTORS_PER_TRACK")) )
   18452:	df 4f       	sbci	r29, 0xFF	; 255
   18454:	88 81       	ld	r24, Y
   18456:	99 81       	ldd	r25, Y+1	; 0x01
   18458:	c1 58       	subi	r28, 0x81	; 129
   1845a:	d0 40       	sbci	r29, 0x00	; 0
   1845c:	f1 01       	movw	r30, r2
   1845e:	96 a3       	std	Z+38, r25	; 0x26
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   18460:	85 a3       	std	Z+37, r24	; 0x25
   18462:	42 c9       	rjmp	.-3452   	; 0x176e8 <POSIX_Read_Config+0x158>
   18464:	66 eb       	ldi	r22, 0xB6	; 182
   18466:	75 e1       	ldi	r23, 0x15	; 21
   18468:	c6 01       	movw	r24, r12
   1846a:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   1846e:	00 97       	sbiw	r24, 0x00	; 0
   18470:	11 f1       	breq	.+68     	; 0x184b6 <POSIX_Read_Config+0xf26>
   18472:	9e 01       	movw	r18, r28
   18474:	2f 57       	subi	r18, 0x7F	; 127
   18476:	3f 4f       	sbci	r19, 0xFF	; 255
   18478:	79 01       	movw	r14, r18
   1847a:	0f ef       	ldi	r16, 0xFF	; 255
   1847c:	10 e0       	ldi	r17, 0x00	; 0
   1847e:	20 e0       	ldi	r18, 0x00	; 0
   18480:	30 e0       	ldi	r19, 0x00	; 0
   18482:	40 e0       	ldi	r20, 0x00	; 0
   18484:	50 e0       	ldi	r21, 0x00	; 0
                    ++errors;
   18486:	ba 01       	movw	r22, r20
   18488:	8c 0d       	add	r24, r12
   1848a:	9d 1d       	adc	r25, r13
                AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val;
   1848c:	0e 94 28 ba 	call	0x17450	; 0x17450 <assign_value>
   18490:	67 2b       	or	r22, r23
   18492:	68 2b       	or	r22, r24
   18494:	69 2b       	or	r22, r25
   18496:	19 f4       	brne	.+6      	; 0x1849e <POSIX_Read_Config+0xf0e>
   18498:	3f ef       	ldi	r19, 0xFF	; 255
   1849a:	a3 1a       	sub	r10, r19
   1849c:	b3 0a       	sbc	r11, r19
   1849e:	cf 57       	subi	r28, 0x7F	; 127
   184a0:	df 4f       	sbci	r29, 0xFF	; 255
   184a2:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"HEADS")) )
   184a4:	99 81       	ldd	r25, Y+1	; 0x01
   184a6:	c1 58       	subi	r28, 0x81	; 129
   184a8:	d0 40       	sbci	r29, 0x00	; 0
   184aa:	d1 01       	movw	r26, r2
   184ac:	98 96       	adiw	r26, 0x28	; 40
   184ae:	9c 93       	st	X, r25
   184b0:	8e 93       	st	-X, r24
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   184b2:	97 97       	sbiw	r26, 0x27	; 39
   184b4:	19 c9       	rjmp	.-3534   	; 0x176e8 <POSIX_Read_Config+0x158>
   184b6:	68 ec       	ldi	r22, 0xC8	; 200
   184b8:	75 e1       	ldi	r23, 0x15	; 21
   184ba:	c6 01       	movw	r24, r12
   184bc:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   184c0:	00 97       	sbiw	r24, 0x00	; 0
   184c2:	11 f1       	breq	.+68     	; 0x18508 <POSIX_Read_Config+0xf78>
   184c4:	fe 01       	movw	r30, r28
   184c6:	ef 57       	subi	r30, 0x7F	; 127
   184c8:	ff 4f       	sbci	r31, 0xFF	; 255
   184ca:	7f 01       	movw	r14, r30
   184cc:	0f ef       	ldi	r16, 0xFF	; 255
   184ce:	10 e0       	ldi	r17, 0x00	; 0
   184d0:	20 e0       	ldi	r18, 0x00	; 0
   184d2:	30 e0       	ldi	r19, 0x00	; 0
   184d4:	40 e0       	ldi	r20, 0x00	; 0
   184d6:	50 e0       	ldi	r21, 0x00	; 0
                    ++errors;
   184d8:	ba 01       	movw	r22, r20
   184da:	8c 0d       	add	r24, r12
   184dc:	9d 1d       	adc	r25, r13
                AMIGOp->GEOMETRY.HEADS = val;
   184de:	0e 94 28 ba 	call	0x17450	; 0x17450 <assign_value>
   184e2:	67 2b       	or	r22, r23
   184e4:	68 2b       	or	r22, r24
   184e6:	69 2b       	or	r22, r25
   184e8:	19 f4       	brne	.+6      	; 0x184f0 <POSIX_Read_Config+0xf60>
   184ea:	ff ef       	ldi	r31, 0xFF	; 255
   184ec:	af 1a       	sub	r10, r31
   184ee:	bf 0a       	sbc	r11, r31
   184f0:	cf 57       	subi	r28, 0x7F	; 127
   184f2:	df 4f       	sbci	r29, 0xFF	; 255
   184f4:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"CYLINDERS")) )
   184f6:	99 81       	ldd	r25, Y+1	; 0x01
   184f8:	c1 58       	subi	r28, 0x81	; 129
   184fa:	d0 40       	sbci	r29, 0x00	; 0
   184fc:	d1 01       	movw	r26, r2
   184fe:	9a 96       	adiw	r26, 0x2a	; 42
   18500:	9c 93       	st	X, r25
   18502:	8e 93       	st	-X, r24
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   18504:	99 97       	sbiw	r26, 0x29	; 41
   18506:	f0 c8       	rjmp	.-3616   	; 0x176e8 <POSIX_Read_Config+0x158>
   18508:	6e ec       	ldi	r22, 0xCE	; 206
   1850a:	75 e1       	ldi	r23, 0x15	; 21
   1850c:	c6 01       	movw	r24, r12
   1850e:	0e 94 c2 33 	call	0x6784	; 0x6784 <token>
   18512:	00 97       	sbiw	r24, 0x00	; 0
   18514:	11 f1       	breq	.+68     	; 0x1855a <POSIX_Read_Config+0xfca>
   18516:	fe 01       	movw	r30, r28
   18518:	ef 57       	subi	r30, 0x7F	; 127
   1851a:	ff 4f       	sbci	r31, 0xFF	; 255
   1851c:	7f 01       	movw	r14, r30
   1851e:	0f ef       	ldi	r16, 0xFF	; 255
   18520:	10 e0       	ldi	r17, 0x00	; 0
   18522:	20 e0       	ldi	r18, 0x00	; 0
   18524:	30 e0       	ldi	r19, 0x00	; 0
   18526:	40 e0       	ldi	r20, 0x00	; 0
   18528:	50 e0       	ldi	r21, 0x00	; 0
                    ++errors;
   1852a:	ba 01       	movw	r22, r20
   1852c:	8c 0d       	add	r24, r12
   1852e:	9d 1d       	adc	r25, r13
                AMIGOp->GEOMETRY.CYLINDERS = val;
   18530:	0e 94 28 ba 	call	0x17450	; 0x17450 <assign_value>
   18534:	67 2b       	or	r22, r23
   18536:	68 2b       	or	r22, r24
   18538:	69 2b       	or	r22, r25
   1853a:	19 f4       	brne	.+6      	; 0x18542 <POSIX_Read_Config+0xfb2>
   1853c:	ff ef       	ldi	r31, 0xFF	; 255
   1853e:	af 1a       	sub	r10, r31
   18540:	bf 0a       	sbc	r11, r31
   18542:	cf 57       	subi	r28, 0x7F	; 127
   18544:	df 4f       	sbci	r29, 0xFF	; 255
   18546:	88 81       	ld	r24, Y
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   18548:	99 81       	ldd	r25, Y+1	; 0x01
   1854a:	c1 58       	subi	r28, 0x81	; 129
   1854c:	d0 40       	sbci	r29, 0x00	; 0
   1854e:	d1 01       	movw	r26, r2
   18550:	9c 96       	adiw	r26, 0x2c	; 44
   18552:	9c 93       	st	X, r25
   18554:	8e 93       	st	-X, r24
   18556:	9b 97       	sbiw	r26, 0x2b	; 43
   18558:	c7 c8       	rjmp	.-3698   	; 0x176e8 <POSIX_Read_Config+0x158>
   1855a:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <lines+0x1>
   1855e:	8f 93       	push	r24
   18560:	80 91 f4 19 	lds	r24, 0x19F4	; 0x8019f4 <lines>
   18564:	8f 93       	push	r24
   18566:	df 92       	push	r13
   18568:	cf 92       	push	r12
   1856a:	1f 92       	push	r1
   1856c:	c3 57       	subi	r28, 0x73	; 115
   1856e:	df 4f       	sbci	r29, 0xFF	; 255
   18570:	b8 81       	ld	r27, Y
   18572:	cd 58       	subi	r28, 0x8D	; 141
   18574:	d0 40       	sbci	r29, 0x00	; 0
                ++errors;
   18576:	bf 93       	push	r27
   18578:	c4 57       	subi	r28, 0x74	; 116
   1857a:	df 4f       	sbci	r29, 0xFF	; 255
   1857c:	e8 81       	ld	r30, Y
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   1857e:	cc 58       	subi	r28, 0x8C	; 140
   18580:	d0 40       	sbci	r29, 0x00	; 0
   18582:	ef 93       	push	r30
   18584:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   18588:	ff ef       	ldi	r31, 0xFF	; 255
   1858a:	af 1a       	sub	r10, r31
   1858c:	bf 0a       	sbc	r11, r31
   1858e:	1a c0       	rjmp	.+52     	; 0x185c4 <POSIX_Read_Config+0x1034>
   18590:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <lines+0x1>
   18594:	8f 93       	push	r24
   18596:	80 91 f4 19 	lds	r24, 0x19F4	; 0x8019f4 <lines>
   1859a:	8f 93       	push	r24
   1859c:	df 92       	push	r13
   1859e:	cf 92       	push	r12
   185a0:	1f 92       	push	r1
   185a2:	c6 57       	subi	r28, 0x76	; 118
   185a4:	df 4f       	sbci	r29, 0xFF	; 255
   185a6:	38 81       	ld	r19, Y
   185a8:	ca 58       	subi	r28, 0x8A	; 138
   185aa:	d0 40       	sbci	r29, 0x00	; 0
            ++errors;
   185ac:	3f 93       	push	r19
   185ae:	c7 57       	subi	r28, 0x77	; 119
   185b0:	df 4f       	sbci	r29, 0xFF	; 255
            break;
   185b2:	48 81       	ld	r20, Y
   185b4:	c9 58       	subi	r28, 0x89	; 137
   185b6:	d0 40       	sbci	r29, 0x00	; 0
   185b8:	4f 93       	push	r20
   185ba:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>

        } // switch
    } //while
    if(state != START_STATE)
   185be:	8f ef       	ldi	r24, 0xFF	; 255
   185c0:	a8 1a       	sub	r10, r24
   185c2:	b8 0a       	sbc	r11, r24
    {
        printf("Missing END statement at line:%d\n", lines);
   185c4:	0f b6       	in	r0, 0x3f	; 63
   185c6:	f8 94       	cli
   185c8:	de bf       	out	0x3e, r29	; 62
   185ca:	0f be       	out	0x3f, r0	; 63
   185cc:	cd bf       	out	0x3d, r28	; 61
   185ce:	8c c8       	rjmp	.-3816   	; 0x176e8 <POSIX_Read_Config+0x158>
   185d0:	81 14       	cp	r8, r1
   185d2:	91 04       	cpc	r9, r1
   185d4:	a9 f0       	breq	.+42     	; 0x18600 <POSIX_Read_Config+0x1070>
   185d6:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <lines+0x1>
   185da:	8f 93       	push	r24
   185dc:	80 91 f4 19 	lds	r24, 0x19F4	; 0x8019f4 <lines>
        ++errors;
   185e0:	8f 93       	push	r24
   185e2:	8f e6       	ldi	r24, 0x6F	; 111
   185e4:	9d e2       	ldi	r25, 0x2D	; 45
   185e6:	1f 92       	push	r1
   185e8:	9f 93       	push	r25
   185ea:	8f 93       	push	r24
   185ec:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    }
    printf("Read_Config: read(%d) lines\n", lines);
   185f0:	bf ef       	ldi	r27, 0xFF	; 255
   185f2:	ab 1a       	sub	r10, r27
   185f4:	bb 0a       	sbc	r11, r27
   185f6:	0f 90       	pop	r0
   185f8:	0f 90       	pop	r0
   185fa:	0f 90       	pop	r0
   185fc:	0f 90       	pop	r0
   185fe:	0f 90       	pop	r0
   18600:	80 91 f5 19 	lds	r24, 0x19F5	; 0x8019f5 <lines+0x1>
   18604:	8f 93       	push	r24
   18606:	80 91 f4 19 	lds	r24, 0x19F4	; 0x8019f4 <lines>
    if(errors)
   1860a:	8f 93       	push	r24
   1860c:	82 e5       	ldi	r24, 0x52	; 82
   1860e:	9d e2       	ldi	r25, 0x2D	; 45
   18610:	1f 92       	push	r1
   18612:	9f 93       	push	r25
   18614:	8f 93       	push	r24
   18616:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   1861a:	0f 90       	pop	r0
   1861c:	0f 90       	pop	r0
   1861e:	0f 90       	pop	r0
   18620:	0f 90       	pop	r0
   18622:	0f 90       	pop	r0
   18624:	a1 14       	cp	r10, r1
   18626:	b1 04       	cpc	r11, r1
   18628:	71 f0       	breq	.+28     	; 0x18646 <POSIX_Read_Config+0x10b6>
   1862a:	bf 92       	push	r11
   1862c:	af 92       	push	r10
   1862e:	8b e2       	ldi	r24, 0x2B	; 43
   18630:	9d e2       	ldi	r25, 0x2D	; 45
   18632:	1f 92       	push	r1

    ret = fclose(cfg);
   18634:	9f 93       	push	r25
   18636:	8f 93       	push	r24
   18638:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1863c:	0f 90       	pop	r0
   1863e:	0f 90       	pop	r0
   18640:	0f 90       	pop	r0
   18642:	0f 90       	pop	r0
    if(ret == EOF)
   18644:	0f 90       	pop	r0
   18646:	c9 57       	subi	r28, 0x79	; 121
    {
        perror("Read_Config - close error");
   18648:	df 4f       	sbci	r29, 0xFF	; 255
   1864a:	88 81       	ld	r24, Y
   1864c:	99 81       	ldd	r25, Y+1	; 0x01
   1864e:	c7 58       	subi	r28, 0x87	; 135
        ++errors;
   18650:	d0 40       	sbci	r29, 0x00	; 0
   18652:	0e 94 87 82 	call	0x1050e	; 0x1050e <fclose>
   18656:	01 96       	adiw	r24, 0x01	; 1
    }

    return(errors);
}
   18658:	39 f4       	brne	.+14     	; 0x18668 <POSIX_Read_Config+0x10d8>
   1865a:	88 ed       	ldi	r24, 0xD8	; 216
   1865c:	95 e1       	ldi	r25, 0x15	; 21
   1865e:	0e 94 b3 7d 	call	0xfb66	; 0xfb66 <perror>
   18662:	c5 01       	movw	r24, r10
   18664:	01 96       	adiw	r24, 0x01	; 1
   18666:	01 c0       	rjmp	.+2      	; 0x1866a <POSIX_Read_Config+0x10da>
   18668:	c5 01       	movw	r24, r10
   1866a:	c6 56       	subi	r28, 0x66	; 102
   1866c:	df 4f       	sbci	r29, 0xFF	; 255
   1866e:	e2 e1       	ldi	r30, 0x12	; 18
   18670:	0c 94 50 ec 	jmp	0x1d8a0	; 0x1d8a0 <__epilogue_restores__>

00018674 <print_var_P>:
/// @brief Display Configuration File variable
/// @param str: title
/// @param val: variable value
/// @return  void
void print_var_P(__memx const char *str, uint32_t val)
{
   18674:	cf 92       	push	r12
   18676:	df 92       	push	r13
   18678:	ef 92       	push	r14
   1867a:	0f 93       	push	r16
   1867c:	1f 93       	push	r17
   1867e:	cf 93       	push	r28
   18680:	df 93       	push	r29
   18682:	cd b7       	in	r28, 0x3d	; 61
   18684:	de b7       	in	r29, 0x3e	; 62
   18686:	c0 54       	subi	r28, 0x40	; 64
   18688:	d1 09       	sbc	r29, r1
   1868a:	0f b6       	in	r0, 0x3f	; 63
   1868c:	f8 94       	cli
   1868e:	de bf       	out	0x3e, r29	; 62
   18690:	0f be       	out	0x3f, r0	; 63
   18692:	cd bf       	out	0x3d, r28	; 61
   18694:	6b 01       	movw	r12, r22
   18696:	e8 2e       	mov	r14, r24
   18698:	75 2f       	mov	r23, r21
   1869a:	de 01       	movw	r26, r28
   1869c:	11 96       	adiw	r26, 0x01	; 1
    char tmp[64];
    int i=0;
   1869e:	80 e0       	ldi	r24, 0x00	; 0
   186a0:	90 e0       	ldi	r25, 0x00	; 0
   186a2:	8d 01       	movw	r16, r26
    while( *str && i < 62)
   186a4:	f6 01       	movw	r30, r12
   186a6:	5e 2d       	mov	r21, r14
   186a8:	0e 94 6b ec 	call	0x1d8d6	; 0x1d8d6 <__xload_1>
   186ac:	66 23       	and	r22, r22
   186ae:	51 f0       	breq	.+20     	; 0x186c4 <print_var_P+0x50>
   186b0:	8e 33       	cpi	r24, 0x3E	; 62
   186b2:	91 05       	cpc	r25, r1
   186b4:	39 f0       	breq	.+14     	; 0x186c4 <print_var_P+0x50>
        tmp[i++] = *str++;
   186b6:	01 96       	adiw	r24, 0x01	; 1
   186b8:	5f ef       	ldi	r21, 0xFF	; 255
   186ba:	c5 1a       	sub	r12, r21
   186bc:	d5 0a       	sbc	r13, r21
   186be:	e5 0a       	sbc	r14, r21
   186c0:	6d 93       	st	X+, r22
   186c2:	f0 cf       	rjmp	.-32     	; 0x186a4 <print_var_P+0x30>
    tmp[i++] = 0;
   186c4:	f8 01       	movw	r30, r16
   186c6:	e8 0f       	add	r30, r24
   186c8:	f9 1f       	adc	r31, r25
   186ca:	10 82       	st	Z, r1

    printf("    %-25s = %8lxH (%ld)\n", tmp, val, val); 
   186cc:	7f 93       	push	r23
   186ce:	4f 93       	push	r20
   186d0:	3f 93       	push	r19
   186d2:	2f 93       	push	r18
   186d4:	7f 93       	push	r23
   186d6:	4f 93       	push	r20
   186d8:	3f 93       	push	r19
   186da:	2f 93       	push	r18
   186dc:	1f 93       	push	r17
   186de:	0f 93       	push	r16
   186e0:	82 e1       	ldi	r24, 0x12	; 18
   186e2:	9d e2       	ldi	r25, 0x2D	; 45
   186e4:	1f 92       	push	r1
   186e6:	9f 93       	push	r25
   186e8:	8f 93       	push	r24
   186ea:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
}
   186ee:	0f b6       	in	r0, 0x3f	; 63
   186f0:	f8 94       	cli
   186f2:	de bf       	out	0x3e, r29	; 62
   186f4:	0f be       	out	0x3f, r0	; 63
   186f6:	cd bf       	out	0x3d, r28	; 61
   186f8:	c0 5c       	subi	r28, 0xC0	; 192
   186fa:	df 4f       	sbci	r29, 0xFF	; 255
   186fc:	0f b6       	in	r0, 0x3f	; 63
   186fe:	f8 94       	cli
   18700:	de bf       	out	0x3e, r29	; 62
   18702:	0f be       	out	0x3f, r0	; 63
   18704:	cd bf       	out	0x3d, r28	; 61
   18706:	df 91       	pop	r29
   18708:	cf 91       	pop	r28
   1870a:	1f 91       	pop	r17
   1870c:	0f 91       	pop	r16
   1870e:	ef 90       	pop	r14
   18710:	df 90       	pop	r13
   18712:	cf 90       	pop	r12
   18714:	08 95       	ret

00018716 <print_str_P>:
/// @brief Display Configuration File string
/// @param *str: title
/// @param *arg: string
/// @return  void
void print_str_P(__memx const char *str, char *arg)
{
   18716:	cf 92       	push	r12
   18718:	df 92       	push	r13
   1871a:	ef 92       	push	r14
   1871c:	cf 93       	push	r28
   1871e:	df 93       	push	r29
   18720:	cd b7       	in	r28, 0x3d	; 61
   18722:	de b7       	in	r29, 0x3e	; 62
   18724:	c0 54       	subi	r28, 0x40	; 64
   18726:	d1 09       	sbc	r29, r1
   18728:	0f b6       	in	r0, 0x3f	; 63
   1872a:	f8 94       	cli
   1872c:	de bf       	out	0x3e, r29	; 62
   1872e:	0f be       	out	0x3f, r0	; 63
   18730:	cd bf       	out	0x3d, r28	; 61
   18732:	6b 01       	movw	r12, r22
   18734:	e8 2e       	mov	r14, r24
   18736:	75 2f       	mov	r23, r21
   18738:	de 01       	movw	r26, r28
   1873a:	11 96       	adiw	r26, 0x01	; 1
    char tmp[64];
    int i=0;
   1873c:	80 e0       	ldi	r24, 0x00	; 0
   1873e:	90 e0       	ldi	r25, 0x00	; 0
   18740:	9d 01       	movw	r18, r26
    while( *str && i < 62)
   18742:	f6 01       	movw	r30, r12
   18744:	5e 2d       	mov	r21, r14
   18746:	0e 94 6b ec 	call	0x1d8d6	; 0x1d8d6 <__xload_1>
   1874a:	66 23       	and	r22, r22
   1874c:	51 f0       	breq	.+20     	; 0x18762 <print_str_P+0x4c>
   1874e:	8e 33       	cpi	r24, 0x3E	; 62
   18750:	91 05       	cpc	r25, r1
   18752:	39 f0       	breq	.+14     	; 0x18762 <print_str_P+0x4c>
        tmp[i++] = *str++;
   18754:	01 96       	adiw	r24, 0x01	; 1
   18756:	5f ef       	ldi	r21, 0xFF	; 255
   18758:	c5 1a       	sub	r12, r21
   1875a:	d5 0a       	sbc	r13, r21
   1875c:	e5 0a       	sbc	r14, r21
   1875e:	6d 93       	st	X+, r22
   18760:	f0 cf       	rjmp	.-32     	; 0x18742 <print_str_P+0x2c>
    tmp[i++] = 0;
   18762:	f9 01       	movw	r30, r18
   18764:	e8 0f       	add	r30, r24
   18766:	f9 1f       	adc	r31, r25
   18768:	10 82       	st	Z, r1
    printf("    %-25s = \"%s\"\n", tmp, arg);   
   1876a:	7f 93       	push	r23
   1876c:	4f 93       	push	r20
   1876e:	3f 93       	push	r19
   18770:	2f 93       	push	r18
   18772:	80 e0       	ldi	r24, 0x00	; 0
   18774:	9d e2       	ldi	r25, 0x2D	; 45
   18776:	1f 92       	push	r1
   18778:	9f 93       	push	r25
   1877a:	8f 93       	push	r24
   1877c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
}
   18780:	0f b6       	in	r0, 0x3f	; 63
   18782:	f8 94       	cli
   18784:	de bf       	out	0x3e, r29	; 62
   18786:	0f be       	out	0x3f, r0	; 63
   18788:	cd bf       	out	0x3d, r28	; 61
   1878a:	c0 5c       	subi	r28, 0xC0	; 192
   1878c:	df 4f       	sbci	r29, 0xFF	; 255
   1878e:	0f b6       	in	r0, 0x3f	; 63
   18790:	f8 94       	cli
   18792:	de bf       	out	0x3e, r29	; 62
   18794:	0f be       	out	0x3f, r0	; 63
   18796:	cd bf       	out	0x3d, r28	; 61
   18798:	df 91       	pop	r29
   1879a:	cf 91       	pop	r28
   1879c:	ef 90       	pop	r14
   1879e:	df 90       	pop	r13
   187a0:	cf 90       	pop	r12
   187a2:	08 95       	ret

000187a4 <display_Addresses>:

/// @brief Display Configuration device address saummary
/// @return  void
void display_Addresses()
{
   187a4:	2f 92       	push	r2
   187a6:	3f 92       	push	r3
   187a8:	4f 92       	push	r4
   187aa:	6f 92       	push	r6
   187ac:	7f 92       	push	r7
   187ae:	8f 92       	push	r8
   187b0:	af 92       	push	r10
   187b2:	bf 92       	push	r11
   187b4:	cf 92       	push	r12
   187b6:	df 92       	push	r13
   187b8:	ef 92       	push	r14
   187ba:	0f 93       	push	r16
   187bc:	1f 93       	push	r17
   187be:	cf 93       	push	r28
   187c0:	df 93       	push	r29
   187c2:	cd b7       	in	r28, 0x3d	; 61
   187c4:	de b7       	in	r29, 0x3e	; 62
   187c6:	2b 97       	sbiw	r28, 0x0b	; 11
   187c8:	0f b6       	in	r0, 0x3f	; 63
   187ca:	f8 94       	cli
   187cc:	de bf       	out	0x3e, r29	; 62
   187ce:	0f be       	out	0x3f, r0	; 63
   187d0:	cd bf       	out	0x3d, r28	; 61
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
   187d2:	8e ed       	ldi	r24, 0xDE	; 222
   187d4:	9c e2       	ldi	r25, 0x2C	; 44
   187d6:	1f 92       	push	r1
   187d8:	9f 93       	push	r25
   187da:	8f 93       	push	r24
   187dc:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   187e0:	0f e4       	ldi	r16, 0x4F	; 79
   187e2:	1f e1       	ldi	r17, 0x1F	; 31
   187e4:	0f 90       	pop	r0
   187e6:	0f 90       	pop	r0
   187e8:	0f 90       	pop	r0
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   187ea:	8d e3       	ldi	r24, 0x3D	; 61
   187ec:	9c e2       	ldi	r25, 0x2C	; 44
   187ee:	9c 01       	movw	r18, r24
   187f0:	40 e0       	ldi	r20, 0x00	; 0
   187f2:	29 83       	std	Y+1, r18	; 0x01
   187f4:	3a 83       	std	Y+2, r19	; 0x02
   187f6:	4b 83       	std	Y+3, r20	; 0x03
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   187f8:	86 e2       	ldi	r24, 0x26	; 38
   187fa:	9c e2       	ldi	r25, 0x2C	; 44
   187fc:	9c 01       	movw	r18, r24
   187fe:	40 e0       	ldi	r20, 0x00	; 0
   18800:	2c 83       	std	Y+4, r18	; 0x04
   18802:	3d 83       	std	Y+5, r19	; 0x05
   18804:	4e 83       	std	Y+6, r20	; 0x06
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   18806:	8f e0       	ldi	r24, 0x0F	; 15
   18808:	9c e2       	ldi	r25, 0x2C	; 44
   1880a:	9c 01       	movw	r18, r24
   1880c:	40 e0       	ldi	r20, 0x00	; 0
   1880e:	2f 83       	std	Y+7, r18	; 0x07
   18810:	38 87       	std	Y+8, r19	; 0x08
   18812:	49 87       	std	Y+9, r20	; 0x09
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   18814:	82 e8       	ldi	r24, 0x82	; 130
   18816:	9c e2       	ldi	r25, 0x2C	; 44
   18818:	6c 01       	movw	r12, r24
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   1881a:	8b e6       	ldi	r24, 0x6B	; 107
   1881c:	9c e2       	ldi	r25, 0x2C	; 44
   1881e:	3c 01       	movw	r6, r24
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   18820:	84 e5       	ldi	r24, 0x54	; 84
   18822:	9c e2       	ldi	r25, 0x2C	; 44
   18824:	1c 01       	movw	r2, r24
            continue;
        address = Devices[i].ADDRESS;

        if(Devices[i].TYPE == SS80_TYPE)
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   18826:	87 ec       	ldi	r24, 0xC7	; 199
   18828:	a8 2e       	mov	r10, r24
   1882a:	8c e2       	ldi	r24, 0x2C	; 44
   1882c:	b8 2e       	mov	r11, r24
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   1882e:	f8 01       	movw	r30, r16
   18830:	80 81       	ld	r24, Z
   18832:	88 23       	and	r24, r24
   18834:	09 f4       	brne	.+2      	; 0x18838 <display_Addresses+0x94>
   18836:	8a c0       	rjmp	.+276    	; 0x1894c <display_Addresses+0x1a8>
            continue;
        address = Devices[i].ADDRESS;
   18838:	f1 81       	ldd	r31, Z+1	; 0x01
   1883a:	2f 2f       	mov	r18, r31
   1883c:	30 e0       	ldi	r19, 0x00	; 0
   1883e:	3b 87       	std	Y+11, r19	; 0x0b
   18840:	2a 87       	std	Y+10, r18	; 0x0a

        if(Devices[i].TYPE == SS80_TYPE)
   18842:	82 30       	cpi	r24, 0x02	; 2
   18844:	49 f5       	brne	.+82     	; 0x18898 <display_Addresses+0xf4>
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   18846:	c9 01       	movw	r24, r18
   18848:	80 96       	adiw	r24, 0x20	; 32
   1884a:	9f 93       	push	r25
   1884c:	8f 93       	push	r24
   1884e:	c5 01       	movw	r24, r10
   18850:	1f 92       	push	r1
   18852:	9f 93       	push	r25
   18854:	af 92       	push	r10
   18856:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
            printf("  SS80_MTA    = %02XH\n",BASE_MTA + address );
   1885a:	8a 85       	ldd	r24, Y+10	; 0x0a
   1885c:	9b 85       	ldd	r25, Y+11	; 0x0b
   1885e:	80 5c       	subi	r24, 0xC0	; 192
   18860:	9f 4f       	sbci	r25, 0xFF	; 255
   18862:	9f 93       	push	r25
   18864:	8f 93       	push	r24
   18866:	80 eb       	ldi	r24, 0xB0	; 176
   18868:	9c e2       	ldi	r25, 0x2C	; 44
   1886a:	1f 92       	push	r1
   1886c:	9f 93       	push	r25
   1886e:	8f 93       	push	r24
   18870:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
   18874:	8a 85       	ldd	r24, Y+10	; 0x0a
   18876:	9b 85       	ldd	r25, Y+11	; 0x0b
   18878:	80 5a       	subi	r24, 0xA0	; 160
   1887a:	9f 4f       	sbci	r25, 0xFF	; 255
   1887c:	9f 93       	push	r25
   1887e:	8f 93       	push	r24
   18880:	89 e9       	ldi	r24, 0x99	; 153
   18882:	9c e2       	ldi	r25, 0x2C	; 44
   18884:	1f 92       	push	r1
   18886:	9f 93       	push	r25
   18888:	8f 93       	push	r24
   1888a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1888e:	0f b6       	in	r0, 0x3f	; 63
   18890:	f8 94       	cli
   18892:	de bf       	out	0x3e, r29	; 62
   18894:	0f be       	out	0x3f, r0	; 63
   18896:	cd bf       	out	0x3d, r28	; 61
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   18898:	f8 01       	movw	r30, r16
   1889a:	80 81       	ld	r24, Z
   1889c:	81 30       	cpi	r24, 0x01	; 1
   1889e:	29 f5       	brne	.+74     	; 0x188ea <display_Addresses+0x146>
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   188a0:	8a 85       	ldd	r24, Y+10	; 0x0a
   188a2:	9b 85       	ldd	r25, Y+11	; 0x0b
   188a4:	80 96       	adiw	r24, 0x20	; 32
   188a6:	9f 93       	push	r25
   188a8:	8f 93       	push	r24
   188aa:	1f 92       	push	r1
   188ac:	df 92       	push	r13
   188ae:	cf 92       	push	r12
   188b0:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   188b4:	8a 85       	ldd	r24, Y+10	; 0x0a
   188b6:	9b 85       	ldd	r25, Y+11	; 0x0b
   188b8:	80 5c       	subi	r24, 0xC0	; 192
   188ba:	9f 4f       	sbci	r25, 0xFF	; 255
   188bc:	9f 93       	push	r25
   188be:	8f 93       	push	r24
   188c0:	1f 92       	push	r1
   188c2:	7f 92       	push	r7
   188c4:	6f 92       	push	r6
   188c6:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   188ca:	8a 85       	ldd	r24, Y+10	; 0x0a
   188cc:	9b 85       	ldd	r25, Y+11	; 0x0b
   188ce:	80 5a       	subi	r24, 0xA0	; 160
   188d0:	9f 4f       	sbci	r25, 0xFF	; 255
   188d2:	9f 93       	push	r25
   188d4:	8f 93       	push	r24
   188d6:	1f 92       	push	r1
   188d8:	3f 92       	push	r3
   188da:	2f 92       	push	r2
   188dc:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   188e0:	0f b6       	in	r0, 0x3f	; 63
   188e2:	f8 94       	cli
   188e4:	de bf       	out	0x3e, r29	; 62
   188e6:	0f be       	out	0x3f, r0	; 63
   188e8:	cd bf       	out	0x3d, r28	; 61
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
   188ea:	f8 01       	movw	r30, r16
   188ec:	80 81       	ld	r24, Z
   188ee:	83 30       	cpi	r24, 0x03	; 3
   188f0:	69 f5       	brne	.+90     	; 0x1894c <display_Addresses+0x1a8>
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   188f2:	8a 85       	ldd	r24, Y+10	; 0x0a
   188f4:	9b 85       	ldd	r25, Y+11	; 0x0b
   188f6:	80 96       	adiw	r24, 0x20	; 32
   188f8:	9f 93       	push	r25
   188fa:	8f 93       	push	r24
   188fc:	1f 92       	push	r1
   188fe:	fa 81       	ldd	r31, Y+2	; 0x02
   18900:	ff 93       	push	r31
   18902:	29 81       	ldd	r18, Y+1	; 0x01
   18904:	2f 93       	push	r18
   18906:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   1890a:	8a 85       	ldd	r24, Y+10	; 0x0a
   1890c:	9b 85       	ldd	r25, Y+11	; 0x0b
   1890e:	80 5c       	subi	r24, 0xC0	; 192
   18910:	9f 4f       	sbci	r25, 0xFF	; 255
   18912:	9f 93       	push	r25
   18914:	8f 93       	push	r24
   18916:	1f 92       	push	r1
   18918:	3d 81       	ldd	r19, Y+5	; 0x05
   1891a:	3f 93       	push	r19
   1891c:	4c 81       	ldd	r20, Y+4	; 0x04
   1891e:	4f 93       	push	r20
   18920:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   18924:	8a 85       	ldd	r24, Y+10	; 0x0a
   18926:	9b 85       	ldd	r25, Y+11	; 0x0b
   18928:	80 5a       	subi	r24, 0xA0	; 160
   1892a:	9f 4f       	sbci	r25, 0xFF	; 255
   1892c:	9b 87       	std	Y+11, r25	; 0x0b
   1892e:	8a 87       	std	Y+10, r24	; 0x0a
   18930:	9f 93       	push	r25
   18932:	8f 93       	push	r24
   18934:	1f 92       	push	r1
   18936:	98 85       	ldd	r25, Y+8	; 0x08
   18938:	9f 93       	push	r25
   1893a:	ef 81       	ldd	r30, Y+7	; 0x07
   1893c:	ef 93       	push	r30
   1893e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   18942:	0f b6       	in	r0, 0x3f	; 63
   18944:	f8 94       	cli
   18946:	de bf       	out	0x3e, r29	; 62
   18948:	0f be       	out	0x3f, r0	; 63
   1894a:	cd bf       	out	0x3d, r28	; 61
   1894c:	09 5f       	subi	r16, 0xF9	; 249
   1894e:	1f 4f       	sbci	r17, 0xFF	; 255
void display_Addresses()
{
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   18950:	3f e1       	ldi	r19, 0x1F	; 31
   18952:	07 38       	cpi	r16, 0x87	; 135
   18954:	13 07       	cpc	r17, r19
   18956:	09 f0       	breq	.+2      	; 0x1895a <display_Addresses+0x1b6>
   18958:	6a cf       	rjmp	.-300    	; 0x1882e <display_Addresses+0x8a>
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
        }
    }
    printf("\n");
   1895a:	8d e0       	ldi	r24, 0x0D	; 13
   1895c:	9c e2       	ldi	r25, 0x2C	; 44
   1895e:	1f 92       	push	r1
   18960:	9f 93       	push	r25
   18962:	8f 93       	push	r24
   18964:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
}
   18968:	0f 90       	pop	r0
   1896a:	0f 90       	pop	r0
   1896c:	0f 90       	pop	r0
   1896e:	2b 96       	adiw	r28, 0x0b	; 11
   18970:	0f b6       	in	r0, 0x3f	; 63
   18972:	f8 94       	cli
   18974:	de bf       	out	0x3e, r29	; 62
   18976:	0f be       	out	0x3f, r0	; 63
   18978:	cd bf       	out	0x3d, r28	; 61
   1897a:	df 91       	pop	r29
   1897c:	cf 91       	pop	r28
   1897e:	1f 91       	pop	r17
   18980:	0f 91       	pop	r16
   18982:	ef 90       	pop	r14
   18984:	df 90       	pop	r13
   18986:	cf 90       	pop	r12
   18988:	bf 90       	pop	r11
   1898a:	af 90       	pop	r10
   1898c:	8f 90       	pop	r8
   1898e:	7f 90       	pop	r7
   18990:	6f 90       	pop	r6
   18992:	4f 90       	pop	r4
   18994:	3f 90       	pop	r3
   18996:	2f 90       	pop	r2
   18998:	08 95       	ret

0001899a <display_Config>:

/// @brief Display current Configuration File values
/// @return  void
void display_Config()
{
   1899a:	2f 92       	push	r2
   1899c:	3f 92       	push	r3
   1899e:	4f 92       	push	r4
   189a0:	6f 92       	push	r6
   189a2:	7f 92       	push	r7
   189a4:	8f 92       	push	r8
   189a6:	af 92       	push	r10
   189a8:	bf 92       	push	r11
   189aa:	cf 92       	push	r12
   189ac:	df 92       	push	r13
   189ae:	ef 92       	push	r14
   189b0:	0f 93       	push	r16
   189b2:	1f 93       	push	r17
   189b4:	cf 93       	push	r28
   189b6:	df 93       	push	r29
   189b8:	cd b7       	in	r28, 0x3d	; 61
   189ba:	de b7       	in	r29, 0x3e	; 62
   189bc:	2b 97       	sbiw	r28, 0x0b	; 11
   189be:	0f b6       	in	r0, 0x3f	; 63
   189c0:	f8 94       	cli
   189c2:	de bf       	out	0x3e, r29	; 62
   189c4:	0f be       	out	0x3f, r0	; 63
   189c6:	cd bf       	out	0x3d, r28	; 61
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
   189c8:	8d ee       	ldi	r24, 0xED	; 237
   189ca:	9b e2       	ldi	r25, 0x2B	; 43
   189cc:	1f 92       	push	r1
   189ce:	9f 93       	push	r25
   189d0:	8f 93       	push	r24
   189d2:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   189d6:	0f e4       	ldi	r16, 0x4F	; 79
   189d8:	1f e1       	ldi	r17, 0x1F	; 31
   189da:	0f 90       	pop	r0
   189dc:	0f 90       	pop	r0
   189de:	0f 90       	pop	r0

            printf("PRINTER\n");
            printf("  CONFIG\n");
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
        }
        printf("\n");
   189e0:	8c ef       	ldi	r24, 0xFC	; 252
   189e2:	99 e2       	ldi	r25, 0x29	; 41
   189e4:	9c 01       	movw	r18, r24
   189e6:	40 e0       	ldi	r20, 0x00	; 0
   189e8:	29 83       	std	Y+1, r18	; 0x01
   189ea:	3a 83       	std	Y+2, r19	; 0x02
   189ec:	4b 83       	std	Y+3, r20	; 0x03

        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;

            printf("PRINTER\n");
   189ee:	80 e1       	ldi	r24, 0x10	; 16
   189f0:	9a e2       	ldi	r25, 0x2A	; 42
   189f2:	9c 01       	movw	r18, r24
   189f4:	40 e0       	ldi	r20, 0x00	; 0
   189f6:	2c 83       	std	Y+4, r18	; 0x04
   189f8:	3d 83       	std	Y+5, r19	; 0x05
   189fa:	4e 83       	std	Y+6, r20	; 0x06
            printf("  CONFIG\n");
   189fc:	86 e0       	ldi	r24, 0x06	; 6
   189fe:	9a e2       	ldi	r25, 0x2A	; 42
   18a00:	9c 01       	movw	r18, r24
   18a02:	40 e0       	ldi	r20, 0x00	; 0
   18a04:	2f 83       	std	Y+7, r18	; 0x07
   18a06:	38 87       	std	Y+8, r19	; 0x08
   18a08:	49 87       	std	Y+9, r20	; 0x09
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   18a0a:	8e ef       	ldi	r24, 0xFE	; 254
   18a0c:	99 e2       	ldi	r25, 0x29	; 41
   18a0e:	3c 01       	movw	r6, r24
   18a10:	81 2c       	mov	r8, r1
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;

            printf("AMIGO\n");
   18a12:	80 e8       	ldi	r24, 0x80	; 128
   18a14:	9a e2       	ldi	r25, 0x2A	; 42
   18a16:	1c 01       	movw	r2, r24
            printf("  HEADER\n");
   18a18:	86 e7       	ldi	r24, 0x76	; 118
   18a1a:	9a e2       	ldi	r25, 0x2A	; 42
   18a1c:	6c 01       	movw	r12, r24
                print_var("ADDRESS", (uint32_t) AMIGOp->HEADER.ADDRESS);
   18a1e:	8e e6       	ldi	r24, 0x6E	; 110
   18a20:	a8 2e       	mov	r10, r24
   18a22:	8a e2       	ldi	r24, 0x2A	; 42
   18a24:	b8 2e       	mov	r11, r24
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   18a26:	f8 01       	movw	r30, r16
   18a28:	80 81       	ld	r24, Z
   18a2a:	88 23       	and	r24, r24
   18a2c:	09 f4       	brne	.+2      	; 0x18a30 <display_Config+0x96>
   18a2e:	d8 c1       	rjmp	.+944    	; 0x18de0 <display_Config+0x446>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   18a30:	82 30       	cpi	r24, 0x02	; 2
   18a32:	09 f0       	breq	.+2      	; 0x18a36 <display_Config+0x9c>
   18a34:	2b c1       	rjmp	.+598    	; 0x18c8c <display_Config+0x2f2>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   18a36:	23 81       	ldd	r18, Z+3	; 0x03
   18a38:	34 81       	ldd	r19, Z+4	; 0x04
   18a3a:	3b 87       	std	Y+11, r19	; 0x0b
   18a3c:	2a 87       	std	Y+10, r18	; 0x0a

            printf("SS80\n");
   18a3e:	87 ee       	ldi	r24, 0xE7	; 231
   18a40:	9b e2       	ldi	r25, 0x2B	; 43
   18a42:	1f 92       	push	r1
   18a44:	9f 93       	push	r25
   18a46:	8f 93       	push	r24
   18a48:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
            printf("  CONFIG\n");
   18a4c:	8d ed       	ldi	r24, 0xDD	; 221
   18a4e:	9b e2       	ldi	r25, 0x2B	; 43
   18a50:	1f 92       	push	r1
   18a52:	9f 93       	push	r25
   18a54:	8f 93       	push	r24
   18a56:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
                print_var("ADDRESS", (uint32_t) SS80p->HEADER.ADDRESS);
   18a5a:	ea 85       	ldd	r30, Y+10	; 0x0a
   18a5c:	fb 85       	ldd	r31, Y+11	; 0x0b
   18a5e:	20 81       	ld	r18, Z
   18a60:	30 e0       	ldi	r19, 0x00	; 0
   18a62:	40 e0       	ldi	r20, 0x00	; 0
   18a64:	50 e0       	ldi	r21, 0x00	; 0
   18a66:	65 ed       	ldi	r22, 0xD5	; 213
   18a68:	7b e2       	ldi	r23, 0x2B	; 43
   18a6a:	80 e0       	ldi	r24, 0x00	; 0
   18a6c:	03 de       	rcall	.-1018   	; 0x18674 <print_var_P>
                print_var("PPR", (uint32_t) SS80p->HEADER.PPR);
   18a6e:	ea 85       	ldd	r30, Y+10	; 0x0a
   18a70:	fb 85       	ldd	r31, Y+11	; 0x0b
   18a72:	21 81       	ldd	r18, Z+1	; 0x01
   18a74:	30 e0       	ldi	r19, 0x00	; 0
   18a76:	40 e0       	ldi	r20, 0x00	; 0
   18a78:	50 e0       	ldi	r21, 0x00	; 0
   18a7a:	61 ed       	ldi	r22, 0xD1	; 209
   18a7c:	7b e2       	ldi	r23, 0x2B	; 43
   18a7e:	80 e0       	ldi	r24, 0x00	; 0
   18a80:	f9 dd       	rcall	.-1038   	; 0x18674 <print_var_P>
                print_str("FILE", SS80p->HEADER.NAME);
   18a82:	4a 85       	ldd	r20, Y+10	; 0x0a
   18a84:	5b 85       	ldd	r21, Y+11	; 0x0b
   18a86:	4e 5f       	subi	r20, 0xFE	; 254
   18a88:	5f 4f       	sbci	r21, 0xFF	; 255
   18a8a:	6c ec       	ldi	r22, 0xCC	; 204
   18a8c:	7b e2       	ldi	r23, 0x2B	; 43
   18a8e:	80 e0       	ldi	r24, 0x00	; 0
   18a90:	42 de       	rcall	.-892    	; 0x18716 <print_str_P>
            printf("  HEADER\n");
   18a92:	82 ec       	ldi	r24, 0xC2	; 194
   18a94:	9b e2       	ldi	r25, 0x2B	; 43
   18a96:	1f 92       	push	r1
   18a98:	9f 93       	push	r25
   18a9a:	8f 93       	push	r24
   18a9c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
                print_var("ID", (uint32_t) SS80p->CONFIG.ID);
   18aa0:	ea 85       	ldd	r30, Y+10	; 0x0a
   18aa2:	fb 85       	ldd	r31, Y+11	; 0x0b
   18aa4:	23 a1       	ldd	r18, Z+35	; 0x23
   18aa6:	34 a1       	ldd	r19, Z+36	; 0x24
   18aa8:	40 e0       	ldi	r20, 0x00	; 0
   18aaa:	50 e0       	ldi	r21, 0x00	; 0
   18aac:	6f eb       	ldi	r22, 0xBF	; 191
   18aae:	7b e2       	ldi	r23, 0x2B	; 43
   18ab0:	80 e0       	ldi	r24, 0x00	; 0
   18ab2:	e0 dd       	rcall	.-1088   	; 0x18674 <print_var_P>
            printf("  CONTROLLER\n");
   18ab4:	81 eb       	ldi	r24, 0xB1	; 177
   18ab6:	9b e2       	ldi	r25, 0x2B	; 43
   18ab8:	1f 92       	push	r1
   18aba:	9f 93       	push	r25
   18abc:	8f 93       	push	r24
   18abe:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
                print_var("UNITS_INSTALLED", (uint32_t) SS80p->CONTROLLER.UNITS_INSTALLED);
   18ac2:	ea 85       	ldd	r30, Y+10	; 0x0a
   18ac4:	fb 85       	ldd	r31, Y+11	; 0x0b
   18ac6:	25 a1       	ldd	r18, Z+37	; 0x25
   18ac8:	36 a1       	ldd	r19, Z+38	; 0x26
   18aca:	40 e0       	ldi	r20, 0x00	; 0
   18acc:	50 e0       	ldi	r21, 0x00	; 0
   18ace:	61 ea       	ldi	r22, 0xA1	; 161
   18ad0:	7b e2       	ldi	r23, 0x2B	; 43
   18ad2:	80 e0       	ldi	r24, 0x00	; 0
   18ad4:	cf dd       	rcall	.-1122   	; 0x18674 <print_var_P>
                print_var("TRANSFER_RATE", (uint32_t)  SS80p->CONTROLLER.TRANSFER_RATE);
   18ad6:	ea 85       	ldd	r30, Y+10	; 0x0a
   18ad8:	fb 85       	ldd	r31, Y+11	; 0x0b
   18ada:	27 a1       	ldd	r18, Z+39	; 0x27
   18adc:	30 a5       	ldd	r19, Z+40	; 0x28
   18ade:	40 e0       	ldi	r20, 0x00	; 0
   18ae0:	50 e0       	ldi	r21, 0x00	; 0
   18ae2:	63 e9       	ldi	r22, 0x93	; 147
   18ae4:	7b e2       	ldi	r23, 0x2B	; 43
   18ae6:	80 e0       	ldi	r24, 0x00	; 0
   18ae8:	c5 dd       	rcall	.-1142   	; 0x18674 <print_var_P>
                print_var("TYPE", (uint32_t)  SS80p->CONTROLLER.TYPE);
   18aea:	ea 85       	ldd	r30, Y+10	; 0x0a
   18aec:	fb 85       	ldd	r31, Y+11	; 0x0b
   18aee:	21 a5       	ldd	r18, Z+41	; 0x29
   18af0:	30 e0       	ldi	r19, 0x00	; 0
   18af2:	40 e0       	ldi	r20, 0x00	; 0
   18af4:	50 e0       	ldi	r21, 0x00	; 0
   18af6:	6e e8       	ldi	r22, 0x8E	; 142
   18af8:	7b e2       	ldi	r23, 0x2B	; 43
   18afa:	80 e0       	ldi	r24, 0x00	; 0
   18afc:	bb dd       	rcall	.-1162   	; 0x18674 <print_var_P>
            printf("  UNIT\n");
   18afe:	86 e8       	ldi	r24, 0x86	; 134
   18b00:	9b e2       	ldi	r25, 0x2B	; 43
   18b02:	1f 92       	push	r1
   18b04:	9f 93       	push	r25
   18b06:	8f 93       	push	r24
   18b08:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
                print_var("UNIT_TYPE", (uint32_t)SS80p->UNIT.UNIT_TYPE);
   18b0c:	ea 85       	ldd	r30, Y+10	; 0x0a
   18b0e:	fb 85       	ldd	r31, Y+11	; 0x0b
   18b10:	22 a5       	ldd	r18, Z+42	; 0x2a
   18b12:	30 e0       	ldi	r19, 0x00	; 0
   18b14:	40 e0       	ldi	r20, 0x00	; 0
   18b16:	50 e0       	ldi	r21, 0x00	; 0
   18b18:	6c e7       	ldi	r22, 0x7C	; 124
   18b1a:	7b e2       	ldi	r23, 0x2B	; 43
   18b1c:	80 e0       	ldi	r24, 0x00	; 0
   18b1e:	aa dd       	rcall	.-1196   	; 0x18674 <print_var_P>
                print_var("DEVICE_NUMBER", (uint32_t)SS80p->UNIT.DEVICE_NUMBER);
   18b20:	ea 85       	ldd	r30, Y+10	; 0x0a
   18b22:	fb 85       	ldd	r31, Y+11	; 0x0b
   18b24:	23 a5       	ldd	r18, Z+43	; 0x2b
   18b26:	34 a5       	ldd	r19, Z+44	; 0x2c
   18b28:	45 a5       	ldd	r20, Z+45	; 0x2d
   18b2a:	56 a5       	ldd	r21, Z+46	; 0x2e
   18b2c:	6e e6       	ldi	r22, 0x6E	; 110
   18b2e:	7b e2       	ldi	r23, 0x2B	; 43
   18b30:	80 e0       	ldi	r24, 0x00	; 0
                print_var("BYTES_PER_BLOCK", (uint32_t)SS80p->UNIT.BYTES_PER_BLOCK);
   18b32:	a0 dd       	rcall	.-1216   	; 0x18674 <print_var_P>
   18b34:	ea 85       	ldd	r30, Y+10	; 0x0a
   18b36:	fb 85       	ldd	r31, Y+11	; 0x0b
   18b38:	27 a5       	ldd	r18, Z+47	; 0x2f
   18b3a:	30 a9       	ldd	r19, Z+48	; 0x30
   18b3c:	40 e0       	ldi	r20, 0x00	; 0
   18b3e:	50 e0       	ldi	r21, 0x00	; 0
   18b40:	6e e5       	ldi	r22, 0x5E	; 94
   18b42:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("BUFFERED_BLOCKS", (uint32_t)SS80p->UNIT.BUFFERED_BLOCKS);
   18b44:	80 e0       	ldi	r24, 0x00	; 0
   18b46:	96 dd       	rcall	.-1236   	; 0x18674 <print_var_P>
   18b48:	ea 85       	ldd	r30, Y+10	; 0x0a
   18b4a:	fb 85       	ldd	r31, Y+11	; 0x0b
   18b4c:	21 a9       	ldd	r18, Z+49	; 0x31
   18b4e:	30 e0       	ldi	r19, 0x00	; 0
   18b50:	40 e0       	ldi	r20, 0x00	; 0
   18b52:	50 e0       	ldi	r21, 0x00	; 0
   18b54:	6e e4       	ldi	r22, 0x4E	; 78
   18b56:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("BURST_SIZE", (uint32_t)SS80p->UNIT.BURST_SIZE);
   18b58:	80 e0       	ldi	r24, 0x00	; 0
   18b5a:	8c dd       	rcall	.-1256   	; 0x18674 <print_var_P>
   18b5c:	ea 85       	ldd	r30, Y+10	; 0x0a
   18b5e:	fb 85       	ldd	r31, Y+11	; 0x0b
   18b60:	22 a9       	ldd	r18, Z+50	; 0x32
   18b62:	30 e0       	ldi	r19, 0x00	; 0
   18b64:	40 e0       	ldi	r20, 0x00	; 0
   18b66:	50 e0       	ldi	r21, 0x00	; 0
   18b68:	63 e4       	ldi	r22, 0x43	; 67
   18b6a:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("BLOCK_TIME", (uint32_t)SS80p->UNIT.BLOCK_TIME);
   18b6c:	80 e0       	ldi	r24, 0x00	; 0
   18b6e:	82 dd       	rcall	.-1276   	; 0x18674 <print_var_P>
   18b70:	ea 85       	ldd	r30, Y+10	; 0x0a
   18b72:	fb 85       	ldd	r31, Y+11	; 0x0b
   18b74:	23 a9       	ldd	r18, Z+51	; 0x33
   18b76:	34 a9       	ldd	r19, Z+52	; 0x34
   18b78:	40 e0       	ldi	r20, 0x00	; 0
   18b7a:	50 e0       	ldi	r21, 0x00	; 0
   18b7c:	68 e3       	ldi	r22, 0x38	; 56
   18b7e:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("CONTINOUS_TRANSFER_RATE", (uint32_t)SS80p->UNIT.CONTINOUS_TRANSFER_RATE);
   18b80:	80 e0       	ldi	r24, 0x00	; 0
   18b82:	78 dd       	rcall	.-1296   	; 0x18674 <print_var_P>
   18b84:	ea 85       	ldd	r30, Y+10	; 0x0a
   18b86:	fb 85       	ldd	r31, Y+11	; 0x0b
   18b88:	25 a9       	ldd	r18, Z+53	; 0x35
   18b8a:	36 a9       	ldd	r19, Z+54	; 0x36
   18b8c:	40 e0       	ldi	r20, 0x00	; 0
   18b8e:	50 e0       	ldi	r21, 0x00	; 0
   18b90:	60 e2       	ldi	r22, 0x20	; 32
   18b92:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("OPTIMAL_RETRY_TIME", (uint32_t)SS80p->UNIT.OPTIMAL_RETRY_TIME);
   18b94:	80 e0       	ldi	r24, 0x00	; 0
   18b96:	6e dd       	rcall	.-1316   	; 0x18674 <print_var_P>
   18b98:	ea 85       	ldd	r30, Y+10	; 0x0a
   18b9a:	fb 85       	ldd	r31, Y+11	; 0x0b
   18b9c:	27 a9       	ldd	r18, Z+55	; 0x37
   18b9e:	30 ad       	ldd	r19, Z+56	; 0x38
   18ba0:	40 e0       	ldi	r20, 0x00	; 0
   18ba2:	50 e0       	ldi	r21, 0x00	; 0
   18ba4:	6d e0       	ldi	r22, 0x0D	; 13
   18ba6:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("ACCESS_TIME", (uint32_t)SS80p->UNIT.ACCESS_TIME);
   18ba8:	80 e0       	ldi	r24, 0x00	; 0
   18baa:	64 dd       	rcall	.-1336   	; 0x18674 <print_var_P>
   18bac:	ea 85       	ldd	r30, Y+10	; 0x0a
   18bae:	fb 85       	ldd	r31, Y+11	; 0x0b
   18bb0:	21 ad       	ldd	r18, Z+57	; 0x39
   18bb2:	32 ad       	ldd	r19, Z+58	; 0x3a
   18bb4:	40 e0       	ldi	r20, 0x00	; 0
   18bb6:	50 e0       	ldi	r21, 0x00	; 0
   18bb8:	61 e0       	ldi	r22, 0x01	; 1
   18bba:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("MAXIMUM_INTERLEAVE", (uint32_t)SS80p->UNIT.MAXIMUM_INTERLEAVE);
   18bbc:	80 e0       	ldi	r24, 0x00	; 0
   18bbe:	5a dd       	rcall	.-1356   	; 0x18674 <print_var_P>
   18bc0:	ea 85       	ldd	r30, Y+10	; 0x0a
   18bc2:	fb 85       	ldd	r31, Y+11	; 0x0b
   18bc4:	23 ad       	ldd	r18, Z+59	; 0x3b
   18bc6:	30 e0       	ldi	r19, 0x00	; 0
   18bc8:	40 e0       	ldi	r20, 0x00	; 0
   18bca:	50 e0       	ldi	r21, 0x00	; 0
   18bcc:	6e ee       	ldi	r22, 0xEE	; 238
   18bce:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("FIXED_VOLUMES", (uint32_t)SS80p->UNIT.FIXED_VOLUMES);
   18bd0:	80 e0       	ldi	r24, 0x00	; 0
   18bd2:	50 dd       	rcall	.-1376   	; 0x18674 <print_var_P>
   18bd4:	ea 85       	ldd	r30, Y+10	; 0x0a
   18bd6:	fb 85       	ldd	r31, Y+11	; 0x0b
   18bd8:	24 ad       	ldd	r18, Z+60	; 0x3c
   18bda:	30 e0       	ldi	r19, 0x00	; 0
   18bdc:	40 e0       	ldi	r20, 0x00	; 0
   18bde:	50 e0       	ldi	r21, 0x00	; 0
   18be0:	60 ee       	ldi	r22, 0xE0	; 224
   18be2:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("REMOVABLE_VOLUMES", (uint32_t)SS80p->UNIT.REMOVABLE_VOLUMES);
   18be4:	80 e0       	ldi	r24, 0x00	; 0
   18be6:	46 dd       	rcall	.-1396   	; 0x18674 <print_var_P>
   18be8:	ea 85       	ldd	r30, Y+10	; 0x0a
   18bea:	fb 85       	ldd	r31, Y+11	; 0x0b
   18bec:	25 ad       	ldd	r18, Z+61	; 0x3d
   18bee:	30 e0       	ldi	r19, 0x00	; 0
   18bf0:	40 e0       	ldi	r20, 0x00	; 0
   18bf2:	50 e0       	ldi	r21, 0x00	; 0
   18bf4:	6e ec       	ldi	r22, 0xCE	; 206
   18bf6:	7a e2       	ldi	r23, 0x2A	; 42
            printf("  VOLUME\n");
   18bf8:	80 e0       	ldi	r24, 0x00	; 0
   18bfa:	3c dd       	rcall	.-1416   	; 0x18674 <print_var_P>
   18bfc:	84 ec       	ldi	r24, 0xC4	; 196
   18bfe:	9a e2       	ldi	r25, 0x2A	; 42
   18c00:	1f 92       	push	r1
   18c02:	9f 93       	push	r25
   18c04:	8f 93       	push	r24
                print_var("MAX_CYLINDER", (uint32_t)SS80p->VOLUME.MAX_CYLINDER);
   18c06:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   18c0a:	ea 85       	ldd	r30, Y+10	; 0x0a
   18c0c:	fb 85       	ldd	r31, Y+11	; 0x0b
   18c0e:	fe 96       	adiw	r30, 0x3e	; 62
   18c10:	20 81       	ld	r18, Z
   18c12:	31 81       	ldd	r19, Z+1	; 0x01
   18c14:	42 81       	ldd	r20, Z+2	; 0x02
   18c16:	53 81       	ldd	r21, Z+3	; 0x03
   18c18:	67 eb       	ldi	r22, 0xB7	; 183
   18c1a:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("MAX_HEAD", (uint32_t)SS80p->VOLUME.MAX_HEAD);
   18c1c:	80 e0       	ldi	r24, 0x00	; 0
   18c1e:	2a dd       	rcall	.-1452   	; 0x18674 <print_var_P>
   18c20:	ea 85       	ldd	r30, Y+10	; 0x0a
   18c22:	fb 85       	ldd	r31, Y+11	; 0x0b
   18c24:	ee 5b       	subi	r30, 0xBE	; 190
   18c26:	ff 4f       	sbci	r31, 0xFF	; 255
   18c28:	20 81       	ld	r18, Z
   18c2a:	30 e0       	ldi	r19, 0x00	; 0
   18c2c:	40 e0       	ldi	r20, 0x00	; 0
   18c2e:	50 e0       	ldi	r21, 0x00	; 0
   18c30:	6e ea       	ldi	r22, 0xAE	; 174
   18c32:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("MAX_SECTOR", (uint32_t)SS80p->VOLUME.MAX_SECTOR);
   18c34:	80 e0       	ldi	r24, 0x00	; 0
   18c36:	1e dd       	rcall	.-1476   	; 0x18674 <print_var_P>
   18c38:	ea 85       	ldd	r30, Y+10	; 0x0a
   18c3a:	fb 85       	ldd	r31, Y+11	; 0x0b
   18c3c:	ed 5b       	subi	r30, 0xBD	; 189
   18c3e:	ff 4f       	sbci	r31, 0xFF	; 255
   18c40:	20 81       	ld	r18, Z
   18c42:	31 81       	ldd	r19, Z+1	; 0x01
   18c44:	40 e0       	ldi	r20, 0x00	; 0
   18c46:	50 e0       	ldi	r21, 0x00	; 0
   18c48:	63 ea       	ldi	r22, 0xA3	; 163
   18c4a:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("MAX_BLOCK_NUMBER", (uint32_t)SS80p->VOLUME.MAX_BLOCK_NUMBER);
   18c4c:	80 e0       	ldi	r24, 0x00	; 0
   18c4e:	12 dd       	rcall	.-1500   	; 0x18674 <print_var_P>
   18c50:	ea 85       	ldd	r30, Y+10	; 0x0a
   18c52:	fb 85       	ldd	r31, Y+11	; 0x0b
   18c54:	eb 5b       	subi	r30, 0xBB	; 187
   18c56:	ff 4f       	sbci	r31, 0xFF	; 255
   18c58:	20 81       	ld	r18, Z
   18c5a:	31 81       	ldd	r19, Z+1	; 0x01
   18c5c:	42 81       	ldd	r20, Z+2	; 0x02
   18c5e:	53 81       	ldd	r21, Z+3	; 0x03
   18c60:	62 e9       	ldi	r22, 0x92	; 146
   18c62:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("INTERLEAVE", (uint32_t)SS80p->VOLUME.INTERLEAVE);
   18c64:	80 e0       	ldi	r24, 0x00	; 0
   18c66:	06 dd       	rcall	.-1524   	; 0x18674 <print_var_P>
   18c68:	2a 85       	ldd	r18, Y+10	; 0x0a
   18c6a:	3b 85       	ldd	r19, Y+11	; 0x0b
   18c6c:	27 5b       	subi	r18, 0xB7	; 183
   18c6e:	3f 4f       	sbci	r19, 0xFF	; 255
   18c70:	f9 01       	movw	r30, r18
   18c72:	20 81       	ld	r18, Z
   18c74:	30 e0       	ldi	r19, 0x00	; 0
   18c76:	40 e0       	ldi	r20, 0x00	; 0
   18c78:	50 e0       	ldi	r21, 0x00	; 0
   18c7a:	67 e8       	ldi	r22, 0x87	; 135
   18c7c:	7a e2       	ldi	r23, 0x2A	; 42
   18c7e:	80 e0       	ldi	r24, 0x00	; 0
   18c80:	f9 dc       	rcall	.-1550   	; 0x18674 <print_var_P>
   18c82:	0f b6       	in	r0, 0x3f	; 63
   18c84:	f8 94       	cli
   18c86:	de bf       	out	0x3e, r29	; 62
   18c88:	0f be       	out	0x3f, r0	; 63
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   18c8a:	cd bf       	out	0x3d, r28	; 61
   18c8c:	f8 01       	movw	r30, r16
   18c8e:	80 81       	ld	r24, Z
   18c90:	81 30       	cpi	r24, 0x01	; 1
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   18c92:	09 f0       	breq	.+2      	; 0x18c96 <display_Config+0x2fc>
   18c94:	76 c0       	rjmp	.+236    	; 0x18d82 <display_Config+0x3e8>
   18c96:	23 81       	ldd	r18, Z+3	; 0x03
   18c98:	34 81       	ldd	r19, Z+4	; 0x04

            printf("AMIGO\n");
   18c9a:	3b 87       	std	Y+11, r19	; 0x0b
   18c9c:	2a 87       	std	Y+10, r18	; 0x0a
   18c9e:	1f 92       	push	r1
   18ca0:	3f 92       	push	r3
            printf("  HEADER\n");
   18ca2:	2f 92       	push	r2
   18ca4:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   18ca8:	1f 92       	push	r1
   18caa:	df 92       	push	r13
                print_var("ADDRESS", (uint32_t) AMIGOp->HEADER.ADDRESS);
   18cac:	cf 92       	push	r12
   18cae:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   18cb2:	ea 85       	ldd	r30, Y+10	; 0x0a
   18cb4:	fb 85       	ldd	r31, Y+11	; 0x0b
   18cb6:	20 81       	ld	r18, Z
   18cb8:	30 e0       	ldi	r19, 0x00	; 0
   18cba:	40 e0       	ldi	r20, 0x00	; 0
   18cbc:	50 e0       	ldi	r21, 0x00	; 0
                print_var("PPR", (uint32_t) AMIGOp->HEADER.PPR);
   18cbe:	b5 01       	movw	r22, r10
   18cc0:	80 e0       	ldi	r24, 0x00	; 0
   18cc2:	d8 dc       	rcall	.-1616   	; 0x18674 <print_var_P>
   18cc4:	ea 85       	ldd	r30, Y+10	; 0x0a
   18cc6:	fb 85       	ldd	r31, Y+11	; 0x0b
   18cc8:	21 81       	ldd	r18, Z+1	; 0x01
   18cca:	30 e0       	ldi	r19, 0x00	; 0
   18ccc:	40 e0       	ldi	r20, 0x00	; 0
   18cce:	50 e0       	ldi	r21, 0x00	; 0
   18cd0:	6a e6       	ldi	r22, 0x6A	; 106
                print_str("FILE", AMIGOp->HEADER.NAME);
   18cd2:	7a e2       	ldi	r23, 0x2A	; 42
   18cd4:	80 e0       	ldi	r24, 0x00	; 0
   18cd6:	ce dc       	rcall	.-1636   	; 0x18674 <print_var_P>
   18cd8:	4a 85       	ldd	r20, Y+10	; 0x0a
   18cda:	5b 85       	ldd	r21, Y+11	; 0x0b
   18cdc:	4e 5f       	subi	r20, 0xFE	; 254
   18cde:	5f 4f       	sbci	r21, 0xFF	; 255
   18ce0:	65 e6       	ldi	r22, 0x65	; 101
   18ce2:	7a e2       	ldi	r23, 0x2A	; 42
            printf("  CONFIG\n");
   18ce4:	80 e0       	ldi	r24, 0x00	; 0
   18ce6:	17 dd       	rcall	.-1490   	; 0x18716 <print_str_P>
   18ce8:	8b e5       	ldi	r24, 0x5B	; 91
   18cea:	9a e2       	ldi	r25, 0x2A	; 42
   18cec:	1f 92       	push	r1
   18cee:	9f 93       	push	r25
   18cf0:	8f 93       	push	r24
                print_var("ID", (uint32_t) AMIGOp->CONFIG.ID);
   18cf2:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   18cf6:	ea 85       	ldd	r30, Y+10	; 0x0a
   18cf8:	fb 85       	ldd	r31, Y+11	; 0x0b
   18cfa:	23 a1       	ldd	r18, Z+35	; 0x23
   18cfc:	34 a1       	ldd	r19, Z+36	; 0x24
   18cfe:	40 e0       	ldi	r20, 0x00	; 0
   18d00:	50 e0       	ldi	r21, 0x00	; 0
   18d02:	68 e5       	ldi	r22, 0x58	; 88
   18d04:	7a e2       	ldi	r23, 0x2A	; 42
            printf("  GEOMETRY\n");
   18d06:	80 e0       	ldi	r24, 0x00	; 0
   18d08:	b5 dc       	rcall	.-1686   	; 0x18674 <print_var_P>
   18d0a:	8c e4       	ldi	r24, 0x4C	; 76
   18d0c:	9a e2       	ldi	r25, 0x2A	; 42
   18d0e:	1f 92       	push	r1
   18d10:	9f 93       	push	r25
                print_var("BYTES_PER_SECTOR", (uint32_t) AMIGOp->GEOMETRY.BYTES_PER_SECTOR);
   18d12:	8f 93       	push	r24
   18d14:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   18d18:	ea 85       	ldd	r30, Y+10	; 0x0a
   18d1a:	fb 85       	ldd	r31, Y+11	; 0x0b
   18d1c:	25 a1       	ldd	r18, Z+37	; 0x25
   18d1e:	36 a1       	ldd	r19, Z+38	; 0x26
   18d20:	03 2e       	mov	r0, r19
   18d22:	00 0c       	add	r0, r0
   18d24:	44 0b       	sbc	r20, r20
   18d26:	55 0b       	sbc	r21, r21
   18d28:	6b e3       	ldi	r22, 0x3B	; 59
                print_var("SECTORS_PER_TRACK", (uint32_t) AMIGOp->GEOMETRY.SECTORS_PER_TRACK);
   18d2a:	7a e2       	ldi	r23, 0x2A	; 42
   18d2c:	80 e0       	ldi	r24, 0x00	; 0
   18d2e:	a2 dc       	rcall	.-1724   	; 0x18674 <print_var_P>
   18d30:	ea 85       	ldd	r30, Y+10	; 0x0a
   18d32:	fb 85       	ldd	r31, Y+11	; 0x0b
   18d34:	27 a1       	ldd	r18, Z+39	; 0x27
   18d36:	30 a5       	ldd	r19, Z+40	; 0x28
   18d38:	03 2e       	mov	r0, r19
   18d3a:	00 0c       	add	r0, r0
   18d3c:	44 0b       	sbc	r20, r20
   18d3e:	55 0b       	sbc	r21, r21
   18d40:	69 e2       	ldi	r22, 0x29	; 41
                print_var("HEADS", (uint32_t) AMIGOp->GEOMETRY.HEADS);
   18d42:	7a e2       	ldi	r23, 0x2A	; 42
   18d44:	80 e0       	ldi	r24, 0x00	; 0
   18d46:	96 dc       	rcall	.-1748   	; 0x18674 <print_var_P>
   18d48:	ea 85       	ldd	r30, Y+10	; 0x0a
   18d4a:	fb 85       	ldd	r31, Y+11	; 0x0b
   18d4c:	21 a5       	ldd	r18, Z+41	; 0x29
   18d4e:	32 a5       	ldd	r19, Z+42	; 0x2a
   18d50:	03 2e       	mov	r0, r19
   18d52:	00 0c       	add	r0, r0
   18d54:	44 0b       	sbc	r20, r20
   18d56:	55 0b       	sbc	r21, r21
   18d58:	63 e2       	ldi	r22, 0x23	; 35
   18d5a:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("CYLINDERS", (uint32_t) AMIGOp->GEOMETRY.CYLINDERS);
   18d5c:	80 e0       	ldi	r24, 0x00	; 0
   18d5e:	8a dc       	rcall	.-1772   	; 0x18674 <print_var_P>
   18d60:	ea 85       	ldd	r30, Y+10	; 0x0a
   18d62:	fb 85       	ldd	r31, Y+11	; 0x0b
   18d64:	23 a5       	ldd	r18, Z+43	; 0x2b
   18d66:	34 a5       	ldd	r19, Z+44	; 0x2c
   18d68:	03 2e       	mov	r0, r19
   18d6a:	00 0c       	add	r0, r0
   18d6c:	44 0b       	sbc	r20, r20
   18d6e:	55 0b       	sbc	r21, r21
   18d70:	69 e1       	ldi	r22, 0x19	; 25
   18d72:	7a e2       	ldi	r23, 0x2A	; 42
   18d74:	80 e0       	ldi	r24, 0x00	; 0
   18d76:	7e dc       	rcall	.-1796   	; 0x18674 <print_var_P>
   18d78:	0f b6       	in	r0, 0x3f	; 63
   18d7a:	f8 94       	cli
   18d7c:	de bf       	out	0x3e, r29	; 62
        } 
#endif // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
   18d7e:	0f be       	out	0x3f, r0	; 63
   18d80:	cd bf       	out	0x3d, r28	; 61
   18d82:	f8 01       	movw	r30, r16
   18d84:	80 81       	ld	r24, Z
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
   18d86:	83 30       	cpi	r24, 0x03	; 3
   18d88:	09 f5       	brne	.+66     	; 0x18dcc <display_Config+0x432>
   18d8a:	23 81       	ldd	r18, Z+3	; 0x03
   18d8c:	34 81       	ldd	r19, Z+4	; 0x04

            printf("PRINTER\n");
   18d8e:	3b 87       	std	Y+11, r19	; 0x0b
   18d90:	2a 87       	std	Y+10, r18	; 0x0a
   18d92:	1f 92       	push	r1
   18d94:	3d 81       	ldd	r19, Y+5	; 0x05
   18d96:	3f 93       	push	r19
   18d98:	4c 81       	ldd	r20, Y+4	; 0x04
   18d9a:	4f 93       	push	r20
            printf("  CONFIG\n");
   18d9c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   18da0:	1f 92       	push	r1
   18da2:	88 85       	ldd	r24, Y+8	; 0x08
   18da4:	8f 93       	push	r24
   18da6:	9f 81       	ldd	r25, Y+7	; 0x07
   18da8:	9f 93       	push	r25
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   18daa:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   18dae:	ea 85       	ldd	r30, Y+10	; 0x0a
   18db0:	fb 85       	ldd	r31, Y+11	; 0x0b
   18db2:	20 81       	ld	r18, Z
   18db4:	30 e0       	ldi	r19, 0x00	; 0
   18db6:	40 e0       	ldi	r20, 0x00	; 0
   18db8:	50 e0       	ldi	r21, 0x00	; 0
   18dba:	88 2d       	mov	r24, r8
   18dbc:	b3 01       	movw	r22, r6
   18dbe:	5a dc       	rcall	.-1868   	; 0x18674 <print_var_P>
   18dc0:	0f 90       	pop	r0
   18dc2:	0f 90       	pop	r0
   18dc4:	0f 90       	pop	r0
   18dc6:	0f 90       	pop	r0
   18dc8:	0f 90       	pop	r0
        }
        printf("\n");
   18dca:	0f 90       	pop	r0
   18dcc:	1f 92       	push	r1
   18dce:	fa 81       	ldd	r31, Y+2	; 0x02
   18dd0:	ff 93       	push	r31
   18dd2:	29 81       	ldd	r18, Y+1	; 0x01
   18dd4:	2f 93       	push	r18
   18dd6:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   18dda:	0f 90       	pop	r0
   18ddc:	0f 90       	pop	r0
   18dde:	0f 90       	pop	r0
   18de0:	09 5f       	subi	r16, 0xF9	; 249
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   18de2:	1f 4f       	sbci	r17, 0xFF	; 255
   18de4:	3f e1       	ldi	r19, 0x1F	; 31
   18de6:	07 38       	cpi	r16, 0x87	; 135
   18de8:	13 07       	cpc	r17, r19
   18dea:	09 f0       	breq	.+2      	; 0x18dee <display_Config+0x454>
            printf("  CONFIG\n");
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
        }
        printf("\n");
    }
    printf("END\n");
   18dec:	1c ce       	rjmp	.-968    	; 0x18a26 <display_Config+0x8c>
   18dee:	87 ef       	ldi	r24, 0xF7	; 247
   18df0:	99 e2       	ldi	r25, 0x29	; 41
   18df2:	1f 92       	push	r1
   18df4:	9f 93       	push	r25
   18df6:	8f 93       	push	r24
   18df8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    printf("\n");
   18dfc:	85 ef       	ldi	r24, 0xF5	; 245
   18dfe:	99 e2       	ldi	r25, 0x29	; 41
   18e00:	1f 92       	push	r1
   18e02:	9f 93       	push	r25
   18e04:	8f 93       	push	r24
   18e06:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    printf("\n");
   18e0a:	83 ef       	ldi	r24, 0xF3	; 243
   18e0c:	99 e2       	ldi	r25, 0x29	; 41
   18e0e:	1f 92       	push	r1
   18e10:	9f 93       	push	r25
   18e12:	8f 93       	push	r24
   18e14:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
}
   18e18:	0f b6       	in	r0, 0x3f	; 63
   18e1a:	f8 94       	cli
   18e1c:	de bf       	out	0x3e, r29	; 62
   18e1e:	0f be       	out	0x3f, r0	; 63
   18e20:	cd bf       	out	0x3d, r28	; 61
   18e22:	2b 96       	adiw	r28, 0x0b	; 11
   18e24:	0f b6       	in	r0, 0x3f	; 63
   18e26:	f8 94       	cli
   18e28:	de bf       	out	0x3e, r29	; 62
   18e2a:	0f be       	out	0x3f, r0	; 63
   18e2c:	cd bf       	out	0x3d, r28	; 61
   18e2e:	df 91       	pop	r29
   18e30:	cf 91       	pop	r28
   18e32:	1f 91       	pop	r17
   18e34:	0f 91       	pop	r16
   18e36:	ef 90       	pop	r14
   18e38:	df 90       	pop	r13
   18e3a:	cf 90       	pop	r12
   18e3c:	bf 90       	pop	r11
   18e3e:	af 90       	pop	r10
   18e40:	8f 90       	pop	r8
   18e42:	7f 90       	pop	r7
   18e44:	6f 90       	pop	r6
   18e46:	4f 90       	pop	r4
   18e48:	3f 90       	pop	r3
   18e4a:	2f 90       	pop	r2
   18e4c:	08 95       	ret

00018e4e <format_drives>:

/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   18e4e:	2f 92       	push	r2
   18e50:	3f 92       	push	r3
   18e52:	4f 92       	push	r4
   18e54:	5f 92       	push	r5
   18e56:	6f 92       	push	r6
   18e58:	7f 92       	push	r7
   18e5a:	8f 92       	push	r8
   18e5c:	af 92       	push	r10
   18e5e:	bf 92       	push	r11
   18e60:	cf 92       	push	r12
   18e62:	df 92       	push	r13
   18e64:	ef 92       	push	r14
   18e66:	ff 92       	push	r15
   18e68:	0f 93       	push	r16
   18e6a:	1f 93       	push	r17
   18e6c:	cf 93       	push	r28
   18e6e:	df 93       	push	r29
   18e70:	cd b7       	in	r28, 0x3d	; 61
   18e72:	de b7       	in	r29, 0x3e	; 62
   18e74:	cd 55       	subi	r28, 0x5D	; 93
   18e76:	d1 09       	sbc	r29, r1
   18e78:	0f b6       	in	r0, 0x3f	; 63
   18e7a:	f8 94       	cli
   18e7c:	de bf       	out	0x3e, r29	; 62
   18e7e:	0f be       	out	0x3f, r0	; 63
   18e80:	cd bf       	out	0x3d, r28	; 61
   18e82:	8f e4       	ldi	r24, 0x4F	; 79
   18e84:	a8 2e       	mov	r10, r24
   18e86:	8f e1       	ldi	r24, 0x1F	; 31
   18e88:	b8 2e       	mov	r11, r24
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
    int amigo = 1;
   18e8a:	21 e0       	ldi	r18, 0x01	; 1
   18e8c:	30 e0       	ldi	r19, 0x00	; 0
   18e8e:	65 96       	adiw	r28, 0x15	; 21
   18e90:	3f af       	std	Y+63, r19	; 0x3f
   18e92:	2e af       	std	Y+62, r18	; 0x3e
   18e94:	65 97       	sbiw	r28, 0x15	; 21
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
   18e96:	81 e0       	ldi	r24, 0x01	; 1
   18e98:	90 e0       	ldi	r25, 0x00	; 0
   18e9a:	63 96       	adiw	r28, 0x13	; 19
   18e9c:	9f af       	std	Y+63, r25	; 0x3f
   18e9e:	8e af       	std	Y+62, r24	; 0x3e
   18ea0:	63 97       	sbiw	r28, 0x13	; 19
                }
                sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
                 * AMIGOp->GEOMETRY.HEADS
                 * AMIGOp->GEOMETRY.CYLINDERS;

                sprintf(label,"AMIGO%d", amigo);
   18ea2:	8f e9       	ldi	r24, 0x9F	; 159
   18ea4:	99 e2       	ldi	r25, 0x29	; 41
   18ea6:	9c 01       	movw	r18, r24
   18ea8:	40 e0       	ldi	r20, 0x00	; 0
   18eaa:	68 96       	adiw	r28, 0x18	; 24
   18eac:	2d af       	std	Y+61, r18	; 0x3d
   18eae:	3e af       	std	Y+62, r19	; 0x3e
   18eb0:	4f af       	std	Y+63, r20	; 0x3f
   18eb2:	68 97       	sbiw	r28, 0x18	; 24
   18eb4:	2e 01       	movw	r4, r28
   18eb6:	31 e3       	ldi	r19, 0x31	; 49
   18eb8:	43 0e       	add	r4, r19
   18eba:	51 1c       	adc	r5, r1
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   18ebc:	87 ea       	ldi	r24, 0xA7	; 167
   18ebe:	99 e2       	ldi	r25, 0x29	; 41
   18ec0:	9c 01       	movw	r18, r24
   18ec2:	40 e0       	ldi	r20, 0x00	; 0
   18ec4:	6b 96       	adiw	r28, 0x1b	; 27
   18ec6:	2d af       	std	Y+61, r18	; 0x3d
   18ec8:	3e af       	std	Y+62, r19	; 0x3e
   18eca:	4f af       	std	Y+63, r20	; 0x3f
   18ecc:	6b 97       	sbiw	r28, 0x1b	; 27
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER;
                sprintf(label,"SS80-%d", ss80);
   18ece:	89 ec       	ldi	r24, 0xC9	; 201
   18ed0:	99 e2       	ldi	r25, 0x29	; 41
   18ed2:	3c 01       	movw	r6, r24

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   18ed4:	81 ed       	ldi	r24, 0xD1	; 209
   18ed6:	99 e2       	ldi	r25, 0x29	; 41
   18ed8:	9c 01       	movw	r18, r24
   18eda:	40 e0       	ldi	r20, 0x00	; 0
   18edc:	6e 96       	adiw	r28, 0x1e	; 30
   18ede:	2d af       	std	Y+61, r18	; 0x3d
   18ee0:	3e af       	std	Y+62, r19	; 0x3e
   18ee2:	4f af       	std	Y+63, r20	; 0x3f
   18ee4:	6e 97       	sbiw	r28, 0x1e	; 30
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   18ee6:	f5 01       	movw	r30, r10
   18ee8:	80 81       	ld	r24, Z
   18eea:	88 23       	and	r24, r24
   18eec:	09 f4       	brne	.+2      	; 0x18ef0 <format_drives+0xa2>
   18eee:	bc c0       	rjmp	.+376    	; 0x19068 <format_drives+0x21a>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   18ef0:	82 30       	cpi	r24, 0x02	; 2
   18ef2:	09 f0       	breq	.+2      	; 0x18ef6 <format_drives+0xa8>
   18ef4:	4c c0       	rjmp	.+152    	; 0x18f8e <format_drives+0x140>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   18ef6:	03 81       	ldd	r16, Z+3	; 0x03
   18ef8:	14 81       	ldd	r17, Z+4	; 0x04

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
   18efa:	18 01       	movw	r2, r16
   18efc:	f2 e0       	ldi	r31, 0x02	; 2
   18efe:	2f 0e       	add	r2, r31
   18f00:	31 1c       	adc	r3, r1
   18f02:	be 01       	movw	r22, r28
   18f04:	6f 5f       	subi	r22, 0xFF	; 255
   18f06:	7f 4f       	sbci	r23, 0xFF	; 255
   18f08:	c1 01       	movw	r24, r2
   18f0a:	0e 94 f1 7e 	call	0xfde2	; 0xfde2 <stat>
   18f0e:	01 96       	adiw	r24, 0x01	; 1
   18f10:	a1 f5       	brne	.+104    	; 0x18f7a <format_drives+0x12c>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   18f12:	f8 01       	movw	r30, r16
   18f14:	87 a5       	ldd	r24, Z+47	; 0x2f
   18f16:	90 a9       	ldd	r25, Z+48	; 0x30
   18f18:	81 15       	cp	r24, r1
   18f1a:	91 40       	sbci	r25, 0x01	; 1
   18f1c:	49 f0       	breq	.+18     	; 0x18f30 <format_drives+0xe2>
                {
                    printf("Can not use non 256 byte sectors\n");
   18f1e:	1f 92       	push	r1
   18f20:	6d 96       	adiw	r28, 0x1d	; 29
   18f22:	2f ad       	ldd	r18, Y+63	; 0x3f
   18f24:	6d 97       	sbiw	r28, 0x1d	; 29
   18f26:	2f 93       	push	r18
   18f28:	6c 96       	adiw	r28, 0x1c	; 28
   18f2a:	3f ad       	ldd	r19, Y+63	; 0x3f
   18f2c:	6c 97       	sbiw	r28, 0x1c	; 28
   18f2e:	51 c0       	rjmp	.+162    	; 0x18fd2 <format_drives+0x184>
                    continue;
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER;
   18f30:	f8 01       	movw	r30, r16
   18f32:	eb 5b       	subi	r30, 0xBB	; 187
   18f34:	ff 4f       	sbci	r31, 0xFF	; 255
   18f36:	c0 80       	ld	r12, Z
   18f38:	d1 80       	ldd	r13, Z+1	; 0x01
   18f3a:	e2 80       	ldd	r14, Z+2	; 0x02
   18f3c:	f3 80       	ldd	r15, Z+3	; 0x03
                sprintf(label,"SS80-%d", ss80);
   18f3e:	63 96       	adiw	r28, 0x13	; 19
   18f40:	4f ad       	ldd	r20, Y+63	; 0x3f
   18f42:	63 97       	sbiw	r28, 0x13	; 19
   18f44:	4f 93       	push	r20
   18f46:	62 96       	adiw	r28, 0x12	; 18
   18f48:	8f ad       	ldd	r24, Y+63	; 0x3f
   18f4a:	62 97       	sbiw	r28, 0x12	; 18
   18f4c:	8f 93       	push	r24
   18f4e:	1f 92       	push	r1
   18f50:	7f 92       	push	r7
   18f52:	6f 92       	push	r6
   18f54:	5f 92       	push	r5
   18f56:	4f 92       	push	r4
   18f58:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   18f5c:	87 01       	movw	r16, r14
   18f5e:	76 01       	movw	r14, r12
   18f60:	20 e8       	ldi	r18, 0x80	; 128
   18f62:	30 e0       	ldi	r19, 0x00	; 0
   18f64:	40 e0       	ldi	r20, 0x00	; 0
   18f66:	50 e0       	ldi	r21, 0x00	; 0
   18f68:	b2 01       	movw	r22, r4
   18f6a:	c1 01       	movw	r24, r2
   18f6c:	0e 94 cc e6 	call	0x1cd98	; 0x1cd98 <lif_create_image>
   18f70:	0f b6       	in	r0, 0x3f	; 63
   18f72:	f8 94       	cli
   18f74:	de bf       	out	0x3e, r29	; 62
   18f76:	0f be       	out	0x3f, r0	; 63
   18f78:	cd bf       	out	0x3d, r28	; 61
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif

            }
            ss80++;
   18f7a:	63 96       	adiw	r28, 0x13	; 19
   18f7c:	2e ad       	ldd	r18, Y+62	; 0x3e
   18f7e:	3f ad       	ldd	r19, Y+63	; 0x3f
   18f80:	63 97       	sbiw	r28, 0x13	; 19
   18f82:	2f 5f       	subi	r18, 0xFF	; 255
   18f84:	3f 4f       	sbci	r19, 0xFF	; 255
   18f86:	63 96       	adiw	r28, 0x13	; 19
   18f88:	3f af       	std	Y+63, r19	; 0x3f
   18f8a:	2e af       	std	Y+62, r18	; 0x3e
   18f8c:	63 97       	sbiw	r28, 0x13	; 19
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   18f8e:	f5 01       	movw	r30, r10
   18f90:	80 81       	ld	r24, Z
   18f92:	81 30       	cpi	r24, 0x01	; 1
   18f94:	09 f0       	breq	.+2      	; 0x18f98 <format_drives+0x14a>
   18f96:	68 c0       	rjmp	.+208    	; 0x19068 <format_drives+0x21a>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   18f98:	03 81       	ldd	r16, Z+3	; 0x03
   18f9a:	14 81       	ldd	r17, Z+4	; 0x04
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
   18f9c:	68 01       	movw	r12, r16
   18f9e:	f2 e0       	ldi	r31, 0x02	; 2
   18fa0:	cf 0e       	add	r12, r31
   18fa2:	d1 1c       	adc	r13, r1
   18fa4:	be 01       	movw	r22, r28
   18fa6:	6f 5f       	subi	r22, 0xFF	; 255
   18fa8:	7f 4f       	sbci	r23, 0xFF	; 255
   18faa:	c6 01       	movw	r24, r12
   18fac:	0e 94 f1 7e 	call	0xfde2	; 0xfde2 <stat>
   18fb0:	01 96       	adiw	r24, 0x01	; 1
   18fb2:	09 f0       	breq	.+2      	; 0x18fb6 <format_drives+0x168>
   18fb4:	50 c0       	rjmp	.+160    	; 0x19056 <format_drives+0x208>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   18fb6:	f8 01       	movw	r30, r16
   18fb8:	85 a1       	ldd	r24, Z+37	; 0x25
   18fba:	96 a1       	ldd	r25, Z+38	; 0x26
   18fbc:	81 15       	cp	r24, r1
   18fbe:	91 40       	sbci	r25, 0x01	; 1
   18fc0:	79 f0       	breq	.+30     	; 0x18fe0 <format_drives+0x192>
                {
                    printf("Can not use non 256 byte sectors\n");
   18fc2:	1f 92       	push	r1
   18fc4:	6a 96       	adiw	r28, 0x1a	; 26
   18fc6:	2f ad       	ldd	r18, Y+63	; 0x3f
   18fc8:	6a 97       	sbiw	r28, 0x1a	; 26
   18fca:	2f 93       	push	r18
   18fcc:	69 96       	adiw	r28, 0x19	; 25
   18fce:	3f ad       	ldd	r19, Y+63	; 0x3f
   18fd0:	69 97       	sbiw	r28, 0x19	; 25
   18fd2:	3f 93       	push	r19
   18fd4:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
                    continue;
   18fd8:	0f 90       	pop	r0
   18fda:	0f 90       	pop	r0
   18fdc:	0f 90       	pop	r0
   18fde:	44 c0       	rjmp	.+136    	; 0x19068 <format_drives+0x21a>
                }
                sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
                 * AMIGOp->GEOMETRY.HEADS
                 * AMIGOp->GEOMETRY.CYLINDERS;
   18fe0:	f8 01       	movw	r30, r16
   18fe2:	47 a1       	ldd	r20, Z+39	; 0x27
   18fe4:	50 a5       	ldd	r21, Z+40	; 0x28
   18fe6:	81 a5       	ldd	r24, Z+41	; 0x29
   18fe8:	92 a5       	ldd	r25, Z+42	; 0x2a
   18fea:	48 9f       	mul	r20, r24
   18fec:	90 01       	movw	r18, r0
   18fee:	49 9f       	mul	r20, r25
   18ff0:	30 0d       	add	r19, r0
   18ff2:	58 9f       	mul	r21, r24
   18ff4:	30 0d       	add	r19, r0
   18ff6:	11 24       	eor	r1, r1
   18ff8:	83 a5       	ldd	r24, Z+43	; 0x2b
   18ffa:	94 a5       	ldd	r25, Z+44	; 0x2c
   18ffc:	28 9f       	mul	r18, r24
   18ffe:	70 01       	movw	r14, r0
   19000:	29 9f       	mul	r18, r25
   19002:	f0 0c       	add	r15, r0
   19004:	38 9f       	mul	r19, r24
   19006:	f0 0c       	add	r15, r0
   19008:	11 24       	eor	r1, r1

                sprintf(label,"AMIGO%d", amigo);
   1900a:	65 96       	adiw	r28, 0x15	; 21
   1900c:	ff ad       	ldd	r31, Y+63	; 0x3f
   1900e:	65 97       	sbiw	r28, 0x15	; 21
   19010:	ff 93       	push	r31
   19012:	64 96       	adiw	r28, 0x14	; 20
   19014:	2f ad       	ldd	r18, Y+63	; 0x3f
   19016:	64 97       	sbiw	r28, 0x14	; 20
   19018:	2f 93       	push	r18
   1901a:	1f 92       	push	r1
   1901c:	67 96       	adiw	r28, 0x17	; 23
   1901e:	3f ad       	ldd	r19, Y+63	; 0x3f
   19020:	67 97       	sbiw	r28, 0x17	; 23
   19022:	3f 93       	push	r19
   19024:	66 96       	adiw	r28, 0x16	; 22
   19026:	4f ad       	ldd	r20, Y+63	; 0x3f
   19028:	66 97       	sbiw	r28, 0x16	; 22
   1902a:	4f 93       	push	r20
   1902c:	5f 92       	push	r5
   1902e:	4f 92       	push	r4
   19030:	0e 94 b9 46 	call	0x8d72	; 0x8d72 <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   19034:	0f 2c       	mov	r0, r15
   19036:	00 0c       	add	r0, r0
   19038:	00 0b       	sbc	r16, r16
   1903a:	11 0b       	sbc	r17, r17
   1903c:	2f e0       	ldi	r18, 0x0F	; 15
   1903e:	30 e0       	ldi	r19, 0x00	; 0
   19040:	40 e0       	ldi	r20, 0x00	; 0
   19042:	50 e0       	ldi	r21, 0x00	; 0
   19044:	b2 01       	movw	r22, r4
   19046:	c6 01       	movw	r24, r12
   19048:	0e 94 cc e6 	call	0x1cd98	; 0x1cd98 <lif_create_image>
   1904c:	0f b6       	in	r0, 0x3f	; 63
   1904e:	f8 94       	cli
   19050:	de bf       	out	0x3e, r29	; 62
   19052:	0f be       	out	0x3f, r0	; 63
   19054:	cd bf       	out	0x3d, r28	; 61
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
            }
            amigo++;
   19056:	65 96       	adiw	r28, 0x15	; 21
   19058:	ee ad       	ldd	r30, Y+62	; 0x3e
   1905a:	ff ad       	ldd	r31, Y+63	; 0x3f
   1905c:	65 97       	sbiw	r28, 0x15	; 21
   1905e:	31 96       	adiw	r30, 0x01	; 1
   19060:	65 96       	adiw	r28, 0x15	; 21
   19062:	ff af       	std	Y+63, r31	; 0x3f
   19064:	ee af       	std	Y+62, r30	; 0x3e
   19066:	65 97       	sbiw	r28, 0x15	; 21
   19068:	f7 e0       	ldi	r31, 0x07	; 7
   1906a:	af 0e       	add	r10, r31
   1906c:	b1 1c       	adc	r11, r1
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   1906e:	27 e8       	ldi	r18, 0x87	; 135
   19070:	3f e1       	ldi	r19, 0x1F	; 31
   19072:	2a 15       	cp	r18, r10
   19074:	3b 05       	cpc	r19, r11
   19076:	09 f0       	breq	.+2      	; 0x1907a <format_drives+0x22c>
   19078:	36 cf       	rjmp	.-404    	; 0x18ee6 <format_drives+0x98>
            }
            amigo++;
        } 
#endif // #ifdef AMIGO
    }
    printf("\n");
   1907a:	8d e9       	ldi	r24, 0x9D	; 157
   1907c:	99 e2       	ldi	r25, 0x29	; 41
   1907e:	1f 92       	push	r1
   19080:	9f 93       	push	r25
   19082:	8f 93       	push	r24
   19084:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
}
   19088:	0f 90       	pop	r0
   1908a:	0f 90       	pop	r0
   1908c:	0f 90       	pop	r0
   1908e:	c3 5a       	subi	r28, 0xA3	; 163
   19090:	df 4f       	sbci	r29, 0xFF	; 255
   19092:	0f b6       	in	r0, 0x3f	; 63
   19094:	f8 94       	cli
   19096:	de bf       	out	0x3e, r29	; 62
   19098:	0f be       	out	0x3f, r0	; 63
   1909a:	cd bf       	out	0x3d, r28	; 61
   1909c:	df 91       	pop	r29
   1909e:	cf 91       	pop	r28
   190a0:	1f 91       	pop	r17
   190a2:	0f 91       	pop	r16
   190a4:	ff 90       	pop	r15
   190a6:	ef 90       	pop	r14
   190a8:	df 90       	pop	r13
   190aa:	cf 90       	pop	r12
   190ac:	bf 90       	pop	r11
   190ae:	af 90       	pop	r10
   190b0:	8f 90       	pop	r8
   190b2:	7f 90       	pop	r7
   190b4:	6f 90       	pop	r6
   190b6:	5f 90       	pop	r5
   190b8:	4f 90       	pop	r4
   190ba:	3f 90       	pop	r3
   190bc:	2f 90       	pop	r2
   190be:	08 95       	ret

000190c0 <controller_send_str>:
/// @param[in] to:      GPIB listener
/// @param[in] str: string to send
/// @param[in] len: number of bytes to send (if 0 then length of string)
/// @return  number of bytes sent
int controller_send_str(uint8_t from, uint8_t to, char *str, int len)
{
   190c0:	a2 e0       	ldi	r26, 0x02	; 2
   190c2:	b0 e0       	ldi	r27, 0x00	; 0
   190c4:	e6 e6       	ldi	r30, 0x66	; 102
   190c6:	f8 ec       	ldi	r31, 0xC8	; 200
   190c8:	0c 94 3e ec 	jmp	0x1d87c	; 0x1d87c <__prologue_saves__+0x14>
   190cc:	e8 2e       	mov	r14, r24
   190ce:	f6 2e       	mov	r15, r22
   190d0:	6a 01       	movw	r12, r20
   190d2:	89 01       	movw	r16, r18
    uint16_t status = 0;
   190d4:	1a 82       	std	Y+2, r1	; 0x02
   190d6:	19 82       	std	Y+1, r1	; 0x01
    int size;
    if(len == 0)
   190d8:	23 2b       	or	r18, r19
   190da:	41 f4       	brne	.+16     	; 0x190ec <controller_send_str+0x2c>
        len = strlen((char *)str);
   190dc:	fa 01       	movw	r30, r20
   190de:	01 90       	ld	r0, Z+
   190e0:	00 20       	and	r0, r0
   190e2:	e9 f7       	brne	.-6      	; 0x190de <controller_send_str+0x1e>
   190e4:	31 97       	sbiw	r30, 0x01	; 1
   190e6:	8f 01       	movw	r16, r30
   190e8:	04 1b       	sub	r16, r20
   190ea:	15 0b       	sbc	r17, r21

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   190ec:	8f e5       	ldi	r24, 0x5F	; 95
   190ee:	94 e0       	ldi	r25, 0x04	; 4
   190f0:	0e 94 e0 8e 	call	0x11dc0	; 0x11dc0 <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   190f4:	8f e3       	ldi	r24, 0x3F	; 63
   190f6:	94 e0       	ldi	r25, 0x04	; 4
   190f8:	0e 94 e0 8e 	call	0x11dc0	; 0x11dc0 <gpib_write_byte>

    gpib_write_byte(0x40 | from | ATN_FLAG);// GPIB talker
   190fc:	8e 2d       	mov	r24, r14
   190fe:	80 64       	ori	r24, 0x40	; 64
   19100:	90 e0       	ldi	r25, 0x00	; 0
   19102:	94 60       	ori	r25, 0x04	; 4
   19104:	0e 94 e0 8e 	call	0x11dc0	; 0x11dc0 <gpib_write_byte>
    gpib_write_byte(0x20 | to | ATN_FLAG);  // GPIB listener
   19108:	8f 2d       	mov	r24, r15
   1910a:	80 62       	ori	r24, 0x20	; 32
   1910c:	90 e0       	ldi	r25, 0x00	; 0
   1910e:	94 60       	ori	r25, 0x04	; 4
   19110:	0e 94 e0 8e 	call	0x11dc0	; 0x11dc0 <gpib_write_byte>

    status = EOI_FLAG;
   19114:	80 e0       	ldi	r24, 0x00	; 0
   19116:	91 e0       	ldi	r25, 0x01	; 1
   19118:	9a 83       	std	Y+2, r25	; 0x02
   1911a:	89 83       	std	Y+1, r24	; 0x01
    size = gpib_write_str((uint8_t *)str, len, &status);
   1911c:	ae 01       	movw	r20, r28
   1911e:	4f 5f       	subi	r20, 0xFF	; 255
   19120:	5f 4f       	sbci	r21, 0xFF	; 255
   19122:	b8 01       	movw	r22, r16
   19124:	c6 01       	movw	r24, r12
   19126:	0e 94 69 93 	call	0x126d2	; 0x126d2 <gpib_write_str>
   1912a:	8c 01       	movw	r16, r24

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   1912c:	8f e5       	ldi	r24, 0x5F	; 95
   1912e:	94 e0       	ldi	r25, 0x04	; 4
   19130:	0e 94 e0 8e 	call	0x11dc0	; 0x11dc0 <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   19134:	8f e3       	ldi	r24, 0x3F	; 63
   19136:	94 e0       	ldi	r25, 0x04	; 4
   19138:	0e 94 e0 8e 	call	0x11dc0	; 0x11dc0 <gpib_write_byte>
    return(size);
}
   1913c:	c8 01       	movw	r24, r16
   1913e:	22 96       	adiw	r28, 0x02	; 2
   19140:	e8 e0       	ldi	r30, 0x08	; 8
   19142:	0c 94 5a ec 	jmp	0x1d8b4	; 0x1d8b4 <__epilogue_restores__+0x14>

00019146 <controller_read_str>:
/// @param[in] to:      GPIB listener
/// @param[in] str: string to read
/// @param[in] len: maximum number of bytes to read
/// @return  number of bytes read
int controller_read_str(uint8_t from, uint8_t to, char *str, int len)
{
   19146:	a2 e0       	ldi	r26, 0x02	; 2
   19148:	b0 e0       	ldi	r27, 0x00	; 0
   1914a:	e9 ea       	ldi	r30, 0xA9	; 169
   1914c:	f8 ec       	ldi	r31, 0xC8	; 200
   1914e:	0c 94 3e ec 	jmp	0x1d87c	; 0x1d87c <__prologue_saves__+0x14>
   19152:	c8 2e       	mov	r12, r24
   19154:	d6 2e       	mov	r13, r22
   19156:	7a 01       	movw	r14, r20
   19158:	89 01       	movw	r16, r18
    uint16_t status;
    int size;

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   1915a:	8f e5       	ldi	r24, 0x5F	; 95
   1915c:	94 e0       	ldi	r25, 0x04	; 4
   1915e:	0e 94 e0 8e 	call	0x11dc0	; 0x11dc0 <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   19162:	8f e3       	ldi	r24, 0x3F	; 63
   19164:	94 e0       	ldi	r25, 0x04	; 4
   19166:	0e 94 e0 8e 	call	0x11dc0	; 0x11dc0 <gpib_write_byte>

    gpib_write_byte(0x40 | from | ATN_FLAG);    // GPIB talker
   1916a:	8c 2d       	mov	r24, r12
   1916c:	80 64       	ori	r24, 0x40	; 64
   1916e:	90 e0       	ldi	r25, 0x00	; 0
   19170:	94 60       	ori	r25, 0x04	; 4
   19172:	0e 94 e0 8e 	call	0x11dc0	; 0x11dc0 <gpib_write_byte>
    gpib_write_byte(0x20 | to | ATN_FLAG);      // GPIB listener
   19176:	8d 2d       	mov	r24, r13
   19178:	80 62       	ori	r24, 0x20	; 32
   1917a:	90 e0       	ldi	r25, 0x00	; 0
   1917c:	94 60       	ori	r25, 0x04	; 4
   1917e:	0e 94 e0 8e 	call	0x11dc0	; 0x11dc0 <gpib_write_byte>

    status = EOI_FLAG;
   19182:	80 e0       	ldi	r24, 0x00	; 0
   19184:	91 e0       	ldi	r25, 0x01	; 1
   19186:	9a 83       	std	Y+2, r25	; 0x02
   19188:	89 83       	std	Y+1, r24	; 0x01
    size = gpib_read_str((uint8_t *)str,len, &status);
   1918a:	ae 01       	movw	r20, r28
   1918c:	4f 5f       	subi	r20, 0xFF	; 255
   1918e:	5f 4f       	sbci	r21, 0xFF	; 255
   19190:	b8 01       	movw	r22, r16
   19192:	c7 01       	movw	r24, r14
   19194:	0e 94 bb 92 	call	0x12576	; 0x12576 <gpib_read_str>
   19198:	6c 01       	movw	r12, r24
    if(size > 0)
   1919a:	18 16       	cp	r1, r24
   1919c:	19 06       	cpc	r1, r25
   1919e:	64 f4       	brge	.+24     	; 0x191b8 <controller_read_str+0x72>
    {
        if(size < len)
   191a0:	80 17       	cp	r24, r16
   191a2:	91 07       	cpc	r25, r17
   191a4:	24 f4       	brge	.+8      	; 0x191ae <controller_read_str+0x68>
            str[size] = 0;
   191a6:	f7 01       	movw	r30, r14
   191a8:	e8 0f       	add	r30, r24
   191aa:	f9 1f       	adc	r31, r25
   191ac:	04 c0       	rjmp	.+8      	; 0x191b6 <controller_read_str+0x70>
        else
            str[len-1] = 0;
   191ae:	0e 0d       	add	r16, r14
   191b0:	1f 1d       	adc	r17, r15
   191b2:	f8 01       	movw	r30, r16
   191b4:	31 97       	sbiw	r30, 0x01	; 1
   191b6:	10 82       	st	Z, r1
    }

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   191b8:	8f e5       	ldi	r24, 0x5F	; 95
   191ba:	94 e0       	ldi	r25, 0x04	; 4
   191bc:	0e 94 e0 8e 	call	0x11dc0	; 0x11dc0 <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   191c0:	8f e3       	ldi	r24, 0x3F	; 63
   191c2:	94 e0       	ldi	r25, 0x04	; 4
   191c4:	0e 94 e0 8e 	call	0x11dc0	; 0x11dc0 <gpib_write_byte>
    return(size);
}
   191c8:	c6 01       	movw	r24, r12
   191ca:	22 96       	adiw	r28, 0x02	; 2
   191cc:	e8 e0       	ldi	r30, 0x08	; 8
   191ce:	0c 94 5a ec 	jmp	0x1d8b4	; 0x1d8b4 <__epilogue_restores__+0x14>

000191d2 <controller_read_trace>:
/// Stops reading at EOI
/// @param[in] from:    GPIB talker
/// @param[in] to:      GPIB listener
/// @return  number of bytes read
int controller_read_trace(uint8_t from, uint8_t to)
{
   191d2:	cf 92       	push	r12
   191d4:	df 92       	push	r13
   191d6:	ef 92       	push	r14
   191d8:	ff 92       	push	r15
   191da:	cf 93       	push	r28
   191dc:	df 93       	push	r29
   191de:	d8 2f       	mov	r29, r24
   191e0:	c6 2f       	mov	r28, r22
    uint16_t ch;
    long len =0;

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   191e2:	8f e5       	ldi	r24, 0x5F	; 95
   191e4:	94 e0       	ldi	r25, 0x04	; 4
   191e6:	0e 94 e0 8e 	call	0x11dc0	; 0x11dc0 <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   191ea:	8f e3       	ldi	r24, 0x3F	; 63
   191ec:	94 e0       	ldi	r25, 0x04	; 4
   191ee:	0e 94 e0 8e 	call	0x11dc0	; 0x11dc0 <gpib_write_byte>

    gpib_write_byte(0x40 | from | ATN_FLAG);    // GPIB talker
   191f2:	d0 64       	ori	r29, 0x40	; 64
   191f4:	8d 2f       	mov	r24, r29
   191f6:	90 e0       	ldi	r25, 0x00	; 0
   191f8:	94 60       	ori	r25, 0x04	; 4
   191fa:	0e 94 e0 8e 	call	0x11dc0	; 0x11dc0 <gpib_write_byte>
    gpib_write_byte(0x20 | to | ATN_FLAG);      // GPIB listener
   191fe:	c0 62       	ori	r28, 0x20	; 32
   19200:	8c 2f       	mov	r24, r28
   19202:	90 e0       	ldi	r25, 0x00	; 0
   19204:	94 60       	ori	r25, 0x04	; 4
   19206:	0e 94 e0 8e 	call	0x11dc0	; 0x11dc0 <gpib_write_byte>
/// @param[in] to:      GPIB listener
/// @return  number of bytes read
int controller_read_trace(uint8_t from, uint8_t to)
{
    uint16_t ch;
    long len =0;
   1920a:	c1 2c       	mov	r12, r1
   1920c:	d1 2c       	mov	r13, r1
   1920e:	76 01       	movw	r14, r12
    gpib_write_byte(0x40 | from | ATN_FLAG);    // GPIB talker
    gpib_write_byte(0x20 | to | ATN_FLAG);      // GPIB listener

    while(1) // loop until EOI or user ABORT
    {
        if(uart_keyhit(0))
   19210:	80 e0       	ldi	r24, 0x00	; 0
   19212:	0e 94 88 2c 	call	0x5910	; 0x5910 <uart_keyhit>
   19216:	89 2b       	or	r24, r25
   19218:	79 f4       	brne	.+30     	; 0x19238 <controller_read_trace+0x66>
            break;
        ch = gpib_read_byte(0);
   1921a:	80 e0       	ldi	r24, 0x00	; 0
   1921c:	90 e0       	ldi	r25, 0x00	; 0
   1921e:	0e 94 e1 91 	call	0x123c2	; 0x123c2 <gpib_read_byte>
   19222:	ec 01       	movw	r28, r24
        gpib_decode(ch);
   19224:	0e 94 b7 92 	call	0x1256e	; 0x1256e <gpib_decode>
       if(ch & EOI_FLAG)
   19228:	d0 fd       	sbrc	r29, 0
   1922a:	06 c0       	rjmp	.+12     	; 0x19238 <controller_read_trace+0x66>
            break;
        ++len;
   1922c:	8f ef       	ldi	r24, 0xFF	; 255
   1922e:	c8 1a       	sub	r12, r24
   19230:	d8 0a       	sbc	r13, r24
   19232:	e8 0a       	sbc	r14, r24
   19234:	f8 0a       	sbc	r15, r24
    }
   19236:	ec cf       	rjmp	.-40     	; 0x19210 <controller_read_trace+0x3e>

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   19238:	8f e5       	ldi	r24, 0x5F	; 95
   1923a:	94 e0       	ldi	r25, 0x04	; 4
   1923c:	0e 94 e0 8e 	call	0x11dc0	; 0x11dc0 <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   19240:	8f e3       	ldi	r24, 0x3F	; 63
   19242:	94 e0       	ldi	r25, 0x04	; 4
   19244:	0e 94 e0 8e 	call	0x11dc0	; 0x11dc0 <gpib_write_byte>
    return(len);
}
   19248:	c6 01       	movw	r24, r12
   1924a:	df 91       	pop	r29
   1924c:	cf 91       	pop	r28
   1924e:	ff 90       	pop	r15
   19250:	ef 90       	pop	r14
   19252:	df 90       	pop	r13
   19254:	cf 90       	pop	r12
   19256:	08 95       	ret

00019258 <lif_help>:
   19258:	cf 93       	push	r28
   1925a:	df 93       	push	r29
   1925c:	ec 01       	movw	r28, r24
   1925e:	83 ed       	ldi	r24, 0xD3	; 211
   19260:	95 e4       	ldi	r25, 0x45	; 69
   19262:	1f 92       	push	r1
   19264:	9f 93       	push	r25
   19266:	8f 93       	push	r24
   19268:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1926c:	0f 90       	pop	r0
   1926e:	0f 90       	pop	r0
   19270:	0f 90       	pop	r0
   19272:	cd 2b       	or	r28, r29
   19274:	51 f0       	breq	.+20     	; 0x1928a <lif_help+0x32>
   19276:	8e e2       	ldi	r24, 0x2E	; 46
   19278:	94 e4       	ldi	r25, 0x44	; 68
   1927a:	1f 92       	push	r1
   1927c:	9f 93       	push	r25
   1927e:	8f 93       	push	r24
   19280:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   19284:	0f 90       	pop	r0
   19286:	0f 90       	pop	r0
   19288:	0f 90       	pop	r0
   1928a:	df 91       	pop	r29
   1928c:	cf 91       	pop	r28
   1928e:	08 95       	ret

00019290 <lif_calloc>:
   19290:	ef 92       	push	r14
   19292:	ff 92       	push	r15
   19294:	0f 93       	push	r16
   19296:	1f 93       	push	r17
   19298:	cf 93       	push	r28
   1929a:	df 93       	push	r29
   1929c:	16 2f       	mov	r17, r22
   1929e:	07 2f       	mov	r16, r23
   192a0:	f8 2e       	mov	r15, r24
   192a2:	e9 2e       	mov	r14, r25
   192a4:	61 e0       	ldi	r22, 0x01	; 1
   192a6:	70 e0       	ldi	r23, 0x00	; 0
   192a8:	81 2f       	mov	r24, r17
   192aa:	90 2f       	mov	r25, r16
   192ac:	0e 94 f2 29 	call	0x53e4	; 0x53e4 <safecalloc>
   192b0:	ec 01       	movw	r28, r24
   192b2:	89 2b       	or	r24, r25
   192b4:	99 f4       	brne	.+38     	; 0x192dc <lif_calloc+0x4c>
   192b6:	ef 92       	push	r14
   192b8:	ff 92       	push	r15
   192ba:	0f 93       	push	r16
   192bc:	1f 93       	push	r17
   192be:	85 e0       	ldi	r24, 0x05	; 5
   192c0:	94 e4       	ldi	r25, 0x44	; 68
   192c2:	1f 92       	push	r1
   192c4:	9f 93       	push	r25
   192c6:	8f 93       	push	r24
   192c8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   192cc:	8d b7       	in	r24, 0x3d	; 61
   192ce:	9e b7       	in	r25, 0x3e	; 62
   192d0:	07 96       	adiw	r24, 0x07	; 7
   192d2:	0f b6       	in	r0, 0x3f	; 63
   192d4:	f8 94       	cli
   192d6:	9e bf       	out	0x3e, r25	; 62
   192d8:	0f be       	out	0x3f, r0	; 63
   192da:	8d bf       	out	0x3d, r24	; 61
   192dc:	ce 01       	movw	r24, r28
   192de:	cd b7       	in	r28, 0x3d	; 61
   192e0:	de b7       	in	r29, 0x3e	; 62
   192e2:	e6 e0       	ldi	r30, 0x06	; 6
   192e4:	0c 94 5c ec 	jmp	0x1d8b8	; 0x1d8b8 <__epilogue_restores__+0x18>

000192e8 <lif_free>:
   192e8:	00 97       	sbiw	r24, 0x00	; 0
   192ea:	59 f4       	brne	.+22     	; 0x19302 <lif_free+0x1a>
   192ec:	8d ee       	ldi	r24, 0xED	; 237
   192ee:	93 e4       	ldi	r25, 0x43	; 67
   192f0:	1f 92       	push	r1
   192f2:	9f 93       	push	r25
   192f4:	8f 93       	push	r24
   192f6:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   192fa:	0f 90       	pop	r0
   192fc:	0f 90       	pop	r0
   192fe:	0f 90       	pop	r0
   19300:	08 95       	ret
   19302:	0c 94 3b 2a 	jmp	0x5476	; 0x5476 <safefree>
   19306:	08 95       	ret

00019308 <lif_stralloc>:
   19308:	0f 93       	push	r16
   1930a:	1f 93       	push	r17
   1930c:	cf 93       	push	r28
   1930e:	df 93       	push	r29
   19310:	ec 01       	movw	r28, r24
   19312:	fc 01       	movw	r30, r24
   19314:	01 90       	ld	r0, Z+
   19316:	00 20       	and	r0, r0
   19318:	e9 f7       	brne	.-6      	; 0x19314 <lif_stralloc+0xc>
   1931a:	bf 01       	movw	r22, r30
   1931c:	68 1b       	sub	r22, r24
   1931e:	79 0b       	sbc	r23, r25
   19320:	6d 5f       	subi	r22, 0xFD	; 253
   19322:	7f 4f       	sbci	r23, 0xFF	; 255
   19324:	07 2e       	mov	r0, r23
   19326:	00 0c       	add	r0, r0
   19328:	88 0b       	sbc	r24, r24
   1932a:	99 0b       	sbc	r25, r25
   1932c:	b1 df       	rcall	.-158    	; 0x19290 <lif_calloc>
   1932e:	8c 01       	movw	r16, r24
   19330:	00 97       	sbiw	r24, 0x00	; 0
   19332:	19 f0       	breq	.+6      	; 0x1933a <lif_stralloc+0x32>
   19334:	be 01       	movw	r22, r28
   19336:	0e 94 1a 32 	call	0x6434	; 0x6434 <strcpy>
   1933a:	c8 01       	movw	r24, r16
   1933c:	df 91       	pop	r29
   1933e:	cf 91       	pop	r28
   19340:	1f 91       	pop	r17
   19342:	0f 91       	pop	r16
   19344:	08 95       	ret

00019346 <lif_open>:
   19346:	ef 92       	push	r14
   19348:	ff 92       	push	r15
   1934a:	0f 93       	push	r16
   1934c:	1f 93       	push	r17
   1934e:	cf 93       	push	r28
   19350:	df 93       	push	r29
   19352:	18 2f       	mov	r17, r24
   19354:	09 2f       	mov	r16, r25
   19356:	f6 2e       	mov	r15, r22
   19358:	e7 2e       	mov	r14, r23
   1935a:	0e 94 dd 83 	call	0x107ba	; 0x107ba <fopen>
   1935e:	ec 01       	movw	r28, r24
   19360:	89 2b       	or	r24, r25
   19362:	99 f4       	brne	.+38     	; 0x1938a <lif_open+0x44>
   19364:	ef 92       	push	r14
   19366:	ff 92       	push	r15
   19368:	0f 93       	push	r16
   1936a:	1f 93       	push	r17
   1936c:	88 ec       	ldi	r24, 0xC8	; 200
   1936e:	93 e4       	ldi	r25, 0x43	; 67
   19370:	1f 92       	push	r1
   19372:	9f 93       	push	r25
   19374:	8f 93       	push	r24
   19376:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1937a:	8d b7       	in	r24, 0x3d	; 61
   1937c:	9e b7       	in	r25, 0x3e	; 62
   1937e:	07 96       	adiw	r24, 0x07	; 7
   19380:	0f b6       	in	r0, 0x3f	; 63
   19382:	f8 94       	cli
   19384:	9e bf       	out	0x3e, r25	; 62
   19386:	0f be       	out	0x3f, r0	; 63
   19388:	8d bf       	out	0x3d, r24	; 61
   1938a:	ce 01       	movw	r24, r28
   1938c:	cd b7       	in	r28, 0x3d	; 61
   1938e:	de b7       	in	r29, 0x3e	; 62
   19390:	e6 e0       	ldi	r30, 0x06	; 6
   19392:	0c 94 5c ec 	jmp	0x1d8b8	; 0x1d8b8 <__epilogue_restores__+0x18>

00019396 <lif_stat>:
   19396:	0f 93       	push	r16
   19398:	1f 93       	push	r17
   1939a:	cf 93       	push	r28
   1939c:	df 93       	push	r29
   1939e:	18 2f       	mov	r17, r24
   193a0:	09 2f       	mov	r16, r25
   193a2:	d6 2f       	mov	r29, r22
   193a4:	c7 2f       	mov	r28, r23
   193a6:	0e 94 f1 7e 	call	0xfde2	; 0xfde2 <stat>
   193aa:	97 ff       	sbrs	r25, 7
   193ac:	11 c0       	rjmp	.+34     	; 0x193d0 <lif_stat+0x3a>
   193ae:	0f 93       	push	r16
   193b0:	1f 93       	push	r17
   193b2:	8f ea       	ldi	r24, 0xAF	; 175
   193b4:	93 e4       	ldi	r25, 0x43	; 67
   193b6:	1f 92       	push	r1
   193b8:	9f 93       	push	r25
   193ba:	8f 93       	push	r24
   193bc:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   193c0:	0f 90       	pop	r0
   193c2:	0f 90       	pop	r0
   193c4:	0f 90       	pop	r0
   193c6:	0f 90       	pop	r0
   193c8:	0f 90       	pop	r0
   193ca:	80 e0       	ldi	r24, 0x00	; 0
   193cc:	90 e0       	ldi	r25, 0x00	; 0
   193ce:	02 c0       	rjmp	.+4      	; 0x193d4 <lif_stat+0x3e>
   193d0:	8d 2f       	mov	r24, r29
   193d2:	9c 2f       	mov	r25, r28
   193d4:	df 91       	pop	r29
   193d6:	cf 91       	pop	r28
   193d8:	1f 91       	pop	r17
   193da:	0f 91       	pop	r16
   193dc:	08 95       	ret

000193de <lif_seek_msg>:
   193de:	a0 e0       	ldi	r26, 0x00	; 0
   193e0:	b0 e0       	ldi	r27, 0x00	; 0
   193e2:	e5 ef       	ldi	r30, 0xF5	; 245
   193e4:	f9 ec       	ldi	r31, 0xC9	; 201
   193e6:	0c 94 3e ec 	jmp	0x1d87c	; 0x1d87c <__prologue_saves__+0x14>
   193ea:	ec 01       	movw	r28, r24
   193ec:	6a 01       	movw	r12, r20
   193ee:	7b 01       	movw	r14, r22
   193f0:	12 2f       	mov	r17, r18
   193f2:	03 2f       	mov	r16, r19
   193f4:	0e 94 1d 80 	call	0x1003a	; 0x1003a <ftell>
   193f8:	6c 15       	cp	r22, r12
   193fa:	7d 05       	cpc	r23, r13
   193fc:	8e 05       	cpc	r24, r14
   193fe:	9f 05       	cpc	r25, r15
   19400:	19 f4       	brne	.+6      	; 0x19408 <lif_seek_msg+0x2a>
   19402:	81 e0       	ldi	r24, 0x01	; 1
   19404:	90 e0       	ldi	r25, 0x00	; 0
   19406:	20 c0       	rjmp	.+64     	; 0x19448 <lif_seek_msg+0x6a>
   19408:	20 e0       	ldi	r18, 0x00	; 0
   1940a:	30 e0       	ldi	r19, 0x00	; 0
   1940c:	b7 01       	movw	r22, r14
   1940e:	a6 01       	movw	r20, r12
   19410:	ce 01       	movw	r24, r28
   19412:	0e 94 9f 80 	call	0x1013e	; 0x1013e <fseek>
   19416:	97 ff       	sbrs	r25, 7
   19418:	f4 cf       	rjmp	.-24     	; 0x19402 <lif_seek_msg+0x24>
   1941a:	ff 92       	push	r15
   1941c:	ef 92       	push	r14
   1941e:	df 92       	push	r13
   19420:	cf 92       	push	r12
   19422:	0f 93       	push	r16
   19424:	1f 93       	push	r17
   19426:	8e e8       	ldi	r24, 0x8E	; 142
   19428:	93 e4       	ldi	r25, 0x43	; 67
   1942a:	1f 92       	push	r1
   1942c:	9f 93       	push	r25
   1942e:	8f 93       	push	r24
   19430:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   19434:	8d b7       	in	r24, 0x3d	; 61
   19436:	9e b7       	in	r25, 0x3e	; 62
   19438:	09 96       	adiw	r24, 0x09	; 9
   1943a:	0f b6       	in	r0, 0x3f	; 63
   1943c:	f8 94       	cli
   1943e:	9e bf       	out	0x3e, r25	; 62
   19440:	0f be       	out	0x3f, r0	; 63
   19442:	8d bf       	out	0x3d, r24	; 61
   19444:	80 e0       	ldi	r24, 0x00	; 0
   19446:	90 e0       	ldi	r25, 0x00	; 0
   19448:	cd b7       	in	r28, 0x3d	; 61
   1944a:	de b7       	in	r29, 0x3e	; 62
   1944c:	e8 e0       	ldi	r30, 0x08	; 8
   1944e:	0c 94 5a ec 	jmp	0x1d8b4	; 0x1d8b4 <__epilogue_restores__+0x14>

00019452 <lif_read>:
   19452:	a0 e0       	ldi	r26, 0x00	; 0
   19454:	b0 e0       	ldi	r27, 0x00	; 0
   19456:	ef e2       	ldi	r30, 0x2F	; 47
   19458:	fa ec       	ldi	r31, 0xCA	; 202
   1945a:	0c 94 3a ec 	jmp	0x1d874	; 0x1d874 <__prologue_saves__+0xc>
   1945e:	ec 01       	movw	r28, r24
   19460:	7b 01       	movw	r14, r22
   19462:	b2 2e       	mov	r11, r18
   19464:	a3 2e       	mov	r10, r19
   19466:	94 2e       	mov	r9, r20
   19468:	85 2e       	mov	r8, r21
   1946a:	28 81       	ld	r18, Y
   1946c:	39 81       	ldd	r19, Y+1	; 0x01
   1946e:	4b 2d       	mov	r20, r11
   19470:	5a 2d       	mov	r21, r10
   19472:	69 2d       	mov	r22, r9
   19474:	78 2d       	mov	r23, r8
   19476:	8a 81       	ldd	r24, Y+2	; 0x02
   19478:	9b 81       	ldd	r25, Y+3	; 0x03
   1947a:	b1 df       	rcall	.-158    	; 0x193de <lif_seek_msg>
   1947c:	89 2b       	or	r24, r25
   1947e:	b9 f1       	breq	.+110    	; 0x194ee <lif_read+0x9c>
   19480:	2a 81       	ldd	r18, Y+2	; 0x02
   19482:	3b 81       	ldd	r19, Y+3	; 0x03
   19484:	a8 01       	movw	r20, r16
   19486:	61 e0       	ldi	r22, 0x01	; 1
   19488:	70 e0       	ldi	r23, 0x00	; 0
   1948a:	c7 01       	movw	r24, r14
   1948c:	0e 94 33 81 	call	0x10266	; 0x10266 <fread>
   19490:	6c 01       	movw	r12, r24
   19492:	e1 2c       	mov	r14, r1
   19494:	f1 2c       	mov	r15, r1
   19496:	b8 01       	movw	r22, r16
   19498:	01 2e       	mov	r0, r17
   1949a:	00 0c       	add	r0, r0
   1949c:	88 0b       	sbc	r24, r24
   1949e:	99 0b       	sbc	r25, r25
   194a0:	c6 16       	cp	r12, r22
   194a2:	d7 06       	cpc	r13, r23
   194a4:	e8 06       	cpc	r14, r24
   194a6:	f9 06       	cpc	r15, r25
   194a8:	41 f1       	breq	.+80     	; 0x194fa <lif_read+0xa8>
   194aa:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   194ae:	80 ff       	sbrs	r24, 0
   194b0:	22 c0       	rjmp	.+68     	; 0x194f6 <lif_read+0xa4>
   194b2:	1f 93       	push	r17
   194b4:	0f 93       	push	r16
   194b6:	1f 92       	push	r1
   194b8:	1f 92       	push	r1
   194ba:	df 92       	push	r13
   194bc:	cf 92       	push	r12
   194be:	8f 92       	push	r8
   194c0:	9f 92       	push	r9
   194c2:	af 92       	push	r10
   194c4:	bf 92       	push	r11
   194c6:	89 81       	ldd	r24, Y+1	; 0x01
   194c8:	8f 93       	push	r24
   194ca:	88 81       	ld	r24, Y
   194cc:	8f 93       	push	r24
   194ce:	82 e5       	ldi	r24, 0x52	; 82
   194d0:	93 e4       	ldi	r25, 0x43	; 67
   194d2:	1f 92       	push	r1
   194d4:	9f 93       	push	r25
   194d6:	8f 93       	push	r24
   194d8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   194dc:	8d b7       	in	r24, 0x3d	; 61
   194de:	9e b7       	in	r25, 0x3e	; 62
   194e0:	0f 96       	adiw	r24, 0x0f	; 15
   194e2:	0f b6       	in	r0, 0x3f	; 63
   194e4:	f8 94       	cli
   194e6:	9e bf       	out	0x3e, r25	; 62
   194e8:	0f be       	out	0x3f, r0	; 63
   194ea:	8d bf       	out	0x3d, r24	; 61
   194ec:	04 c0       	rjmp	.+8      	; 0x194f6 <lif_read+0xa4>
   194ee:	60 e0       	ldi	r22, 0x00	; 0
   194f0:	70 e0       	ldi	r23, 0x00	; 0
   194f2:	cb 01       	movw	r24, r22
   194f4:	02 c0       	rjmp	.+4      	; 0x194fa <lif_read+0xa8>
   194f6:	c7 01       	movw	r24, r14
   194f8:	b6 01       	movw	r22, r12
   194fa:	cd b7       	in	r28, 0x3d	; 61
   194fc:	de b7       	in	r29, 0x3e	; 62
   194fe:	ec e0       	ldi	r30, 0x0C	; 12
   19500:	0c 94 56 ec 	jmp	0x1d8ac	; 0x1d8ac <__epilogue_restores__+0xc>

00019504 <lif_write>:
   19504:	a0 e0       	ldi	r26, 0x00	; 0
   19506:	b0 e0       	ldi	r27, 0x00	; 0
   19508:	e8 e8       	ldi	r30, 0x88	; 136
   1950a:	fa ec       	ldi	r31, 0xCA	; 202
   1950c:	0c 94 3c ec 	jmp	0x1d878	; 0x1d878 <__prologue_saves__+0x10>
   19510:	7c 01       	movw	r14, r24
   19512:	eb 01       	movw	r28, r22
   19514:	d2 2e       	mov	r13, r18
   19516:	c3 2e       	mov	r12, r19
   19518:	b4 2e       	mov	r11, r20
   1951a:	a5 2e       	mov	r10, r21
   1951c:	fc 01       	movw	r30, r24
   1951e:	20 81       	ld	r18, Z
   19520:	31 81       	ldd	r19, Z+1	; 0x01
   19522:	4d 2d       	mov	r20, r13
   19524:	5c 2d       	mov	r21, r12
   19526:	6b 2d       	mov	r22, r11
   19528:	7a 2d       	mov	r23, r10
   1952a:	82 81       	ldd	r24, Z+2	; 0x02
   1952c:	93 81       	ldd	r25, Z+3	; 0x03
   1952e:	57 df       	rcall	.-338    	; 0x193de <lif_seek_msg>
   19530:	00 97       	sbiw	r24, 0x00	; 0
   19532:	89 f1       	breq	.+98     	; 0x19596 <lif_write+0x92>
   19534:	f7 01       	movw	r30, r14
   19536:	22 81       	ldd	r18, Z+2	; 0x02
   19538:	33 81       	ldd	r19, Z+3	; 0x03
   1953a:	a8 01       	movw	r20, r16
   1953c:	61 e0       	ldi	r22, 0x01	; 1
   1953e:	70 e0       	ldi	r23, 0x00	; 0
   19540:	ce 01       	movw	r24, r28
   19542:	0e 94 05 82 	call	0x1040a	; 0x1040a <fwrite>
   19546:	ec 01       	movw	r28, r24
   19548:	08 17       	cp	r16, r24
   1954a:	19 07       	cpc	r17, r25
   1954c:	09 f1       	breq	.+66     	; 0x19590 <lif_write+0x8c>
   1954e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   19552:	80 ff       	sbrs	r24, 0
   19554:	1f c0       	rjmp	.+62     	; 0x19594 <lif_write+0x90>
   19556:	1f 93       	push	r17
   19558:	0f 93       	push	r16
   1955a:	df 93       	push	r29
   1955c:	cf 93       	push	r28
   1955e:	af 92       	push	r10
   19560:	bf 92       	push	r11
   19562:	cf 92       	push	r12
   19564:	df 92       	push	r13
   19566:	f7 01       	movw	r30, r14
   19568:	81 81       	ldd	r24, Z+1	; 0x01
   1956a:	8f 93       	push	r24
   1956c:	80 81       	ld	r24, Z
   1956e:	8f 93       	push	r24
   19570:	85 e1       	ldi	r24, 0x15	; 21
   19572:	93 e4       	ldi	r25, 0x43	; 67
   19574:	1f 92       	push	r1
   19576:	9f 93       	push	r25
   19578:	8f 93       	push	r24
   1957a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1957e:	8d b7       	in	r24, 0x3d	; 61
   19580:	9e b7       	in	r25, 0x3e	; 62
   19582:	0d 96       	adiw	r24, 0x0d	; 13
   19584:	0f b6       	in	r0, 0x3f	; 63
   19586:	f8 94       	cli
   19588:	9e bf       	out	0x3e, r25	; 62
   1958a:	0f be       	out	0x3f, r0	; 63
   1958c:	8d bf       	out	0x3d, r24	; 61
   1958e:	02 c0       	rjmp	.+4      	; 0x19594 <lif_write+0x90>
   19590:	c8 01       	movw	r24, r16
   19592:	01 c0       	rjmp	.+2      	; 0x19596 <lif_write+0x92>
   19594:	ce 01       	movw	r24, r28
   19596:	cd b7       	in	r28, 0x3d	; 61
   19598:	de b7       	in	r29, 0x3e	; 62
   1959a:	ea e0       	ldi	r30, 0x0A	; 10
   1959c:	0c 94 58 ec 	jmp	0x1d8b0	; 0x1d8b0 <__epilogue_restores__+0x10>

000195a0 <lif_chars>:
   195a0:	80 32       	cpi	r24, 0x20	; 32
   195a2:	91 05       	cpc	r25, r1
   195a4:	e1 f0       	breq	.+56     	; 0x195de <lif_chars+0x3e>
   195a6:	9c 01       	movw	r18, r24
   195a8:	21 56       	subi	r18, 0x61	; 97
   195aa:	31 09       	sbc	r19, r1
   195ac:	2a 31       	cpi	r18, 0x1A	; 26
   195ae:	31 05       	cpc	r19, r1
   195b0:	10 f4       	brcc	.+4      	; 0x195b6 <lif_chars+0x16>
   195b2:	80 97       	sbiw	r24, 0x20	; 32
   195b4:	08 95       	ret
   195b6:	9c 01       	movw	r18, r24
   195b8:	21 54       	subi	r18, 0x41	; 65
   195ba:	31 09       	sbc	r19, r1
   195bc:	2a 31       	cpi	r18, 0x1A	; 26
   195be:	31 05       	cpc	r19, r1
   195c0:	c8 f0       	brcs	.+50     	; 0x195f4 <lif_chars+0x54>
   195c2:	16 16       	cp	r1, r22
   195c4:	17 06       	cpc	r1, r23
   195c6:	74 f4       	brge	.+28     	; 0x195e4 <lif_chars+0x44>
   195c8:	2f 5e       	subi	r18, 0xEF	; 239
   195ca:	3f 4f       	sbci	r19, 0xFF	; 255
   195cc:	2a 30       	cpi	r18, 0x0A	; 10
   195ce:	31 05       	cpc	r19, r1
   195d0:	88 f0       	brcs	.+34     	; 0x195f4 <lif_chars+0x54>
   195d2:	8f 35       	cpi	r24, 0x5F	; 95
   195d4:	91 05       	cpc	r25, r1
   195d6:	49 f0       	breq	.+18     	; 0x195ea <lif_chars+0x4a>
   195d8:	8d 97       	sbiw	r24, 0x2d	; 45
   195da:	21 f4       	brne	.+8      	; 0x195e4 <lif_chars+0x44>
   195dc:	09 c0       	rjmp	.+18     	; 0x195f0 <lif_chars+0x50>
   195de:	80 e2       	ldi	r24, 0x20	; 32
   195e0:	90 e0       	ldi	r25, 0x00	; 0
   195e2:	08 95       	ret
   195e4:	80 e0       	ldi	r24, 0x00	; 0
   195e6:	90 e0       	ldi	r25, 0x00	; 0
   195e8:	08 95       	ret
   195ea:	8f e5       	ldi	r24, 0x5F	; 95
   195ec:	90 e0       	ldi	r25, 0x00	; 0
   195ee:	08 95       	ret
   195f0:	8d e2       	ldi	r24, 0x2D	; 45
   195f2:	90 e0       	ldi	r25, 0x00	; 0
   195f4:	08 95       	ret

000195f6 <lif_B2S>:
   195f6:	a0 e0       	ldi	r26, 0x00	; 0
   195f8:	b0 e0       	ldi	r27, 0x00	; 0
   195fa:	e1 e0       	ldi	r30, 0x01	; 1
   195fc:	fb ec       	ldi	r31, 0xCB	; 203
   195fe:	0c 94 3a ec 	jmp	0x1d874	; 0x1d874 <__prologue_saves__+0xc>
   19602:	5c 01       	movw	r10, r24
   19604:	6b 01       	movw	r12, r22
   19606:	ea 01       	movw	r28, r20
   19608:	4c 01       	movw	r8, r24
   1960a:	ee 24       	eor	r14, r14
   1960c:	e3 94       	inc	r14
   1960e:	f1 2c       	mov	r15, r1
   19610:	00 e0       	ldi	r16, 0x00	; 0
   19612:	10 e0       	ldi	r17, 0x00	; 0
   19614:	0c 17       	cp	r16, r28
   19616:	1d 07       	cpc	r17, r29
   19618:	6c f4       	brge	.+26     	; 0x19634 <lif_B2S+0x3e>
   1961a:	f4 01       	movw	r30, r8
   1961c:	81 91       	ld	r24, Z+
   1961e:	4f 01       	movw	r8, r30
   19620:	b8 01       	movw	r22, r16
   19622:	90 e0       	ldi	r25, 0x00	; 0
   19624:	bd df       	rcall	.-134    	; 0x195a0 <lif_chars>
   19626:	89 2b       	or	r24, r25
   19628:	11 f4       	brne	.+4      	; 0x1962e <lif_B2S+0x38>
   1962a:	e1 2c       	mov	r14, r1
   1962c:	f1 2c       	mov	r15, r1
   1962e:	0f 5f       	subi	r16, 0xFF	; 255
   19630:	1f 4f       	sbci	r17, 0xFF	; 255
   19632:	f0 cf       	rjmp	.-32     	; 0x19614 <lif_B2S+0x1e>
   19634:	d6 01       	movw	r26, r12
   19636:	f5 01       	movw	r30, r10
   19638:	cf 01       	movw	r24, r30
   1963a:	8a 19       	sub	r24, r10
   1963c:	9b 09       	sbc	r25, r11
   1963e:	8c 17       	cp	r24, r28
   19640:	9d 07       	cpc	r25, r29
   19642:	1c f4       	brge	.+6      	; 0x1964a <lif_B2S+0x54>
   19644:	81 91       	ld	r24, Z+
   19646:	8d 93       	st	X+, r24
   19648:	f7 cf       	rjmp	.-18     	; 0x19638 <lif_B2S+0x42>
   1964a:	d7 ff       	sbrs	r29, 7
   1964c:	02 c0       	rjmp	.+4      	; 0x19652 <lif_B2S+0x5c>
   1964e:	c0 e0       	ldi	r28, 0x00	; 0
   19650:	d0 e0       	ldi	r29, 0x00	; 0
   19652:	cc 0d       	add	r28, r12
   19654:	dd 1d       	adc	r29, r13
   19656:	18 82       	st	Y, r1
   19658:	c6 01       	movw	r24, r12
   1965a:	0e 94 74 32 	call	0x64e8	; 0x64e8 <trim_tail>
   1965e:	c7 01       	movw	r24, r14
   19660:	cd b7       	in	r28, 0x3d	; 61
   19662:	de b7       	in	r29, 0x3e	; 62
   19664:	ec e0       	ldi	r30, 0x0C	; 12
   19666:	0c 94 56 ec 	jmp	0x1d8ac	; 0x1d8ac <__epilogue_restores__+0xc>

0001966a <lif_checkname>:
   1966a:	ef 92       	push	r14
   1966c:	ff 92       	push	r15
   1966e:	0f 93       	push	r16
   19670:	1f 93       	push	r17
   19672:	cf 93       	push	r28
   19674:	df 93       	push	r29
   19676:	7c 01       	movw	r14, r24
   19678:	ec 01       	movw	r28, r24
   1967a:	01 e0       	ldi	r16, 0x01	; 1
   1967c:	10 e0       	ldi	r17, 0x00	; 0
   1967e:	be 01       	movw	r22, r28
   19680:	6e 19       	sub	r22, r14
   19682:	7f 09       	sbc	r23, r15
   19684:	89 91       	ld	r24, Y+
   19686:	88 23       	and	r24, r24
   19688:	39 f0       	breq	.+14     	; 0x19698 <lif_checkname+0x2e>
   1968a:	90 e0       	ldi	r25, 0x00	; 0
   1968c:	89 df       	rcall	.-238    	; 0x195a0 <lif_chars>
   1968e:	89 2b       	or	r24, r25
   19690:	b1 f7       	brne	.-20     	; 0x1967e <lif_checkname+0x14>
   19692:	00 e0       	ldi	r16, 0x00	; 0
   19694:	10 e0       	ldi	r17, 0x00	; 0
   19696:	f3 cf       	rjmp	.-26     	; 0x1967e <lif_checkname+0x14>
   19698:	c8 01       	movw	r24, r16
   1969a:	cd b7       	in	r28, 0x3d	; 61
   1969c:	de b7       	in	r29, 0x3e	; 62
   1969e:	e6 e0       	ldi	r30, 0x06	; 6
   196a0:	0c 94 5c ec 	jmp	0x1d8b8	; 0x1d8b8 <__epilogue_restores__+0x18>

000196a4 <lif_S2B>:
   196a4:	fb 01       	movw	r30, r22
   196a6:	dc 01       	movw	r26, r24
   196a8:	20 e0       	ldi	r18, 0x00	; 0
   196aa:	30 e0       	ldi	r19, 0x00	; 0
   196ac:	61 91       	ld	r22, Z+
   196ae:	61 11       	cpse	r22, r1
   196b0:	05 c0       	rjmp	.+10     	; 0x196bc <lif_S2B+0x18>
   196b2:	fc 01       	movw	r30, r24
   196b4:	e2 0f       	add	r30, r18
   196b6:	f3 1f       	adc	r31, r19
   196b8:	60 e2       	ldi	r22, 0x20	; 32
   196ba:	08 c0       	rjmp	.+16     	; 0x196cc <lif_S2B+0x28>
   196bc:	24 17       	cp	r18, r20
   196be:	35 07       	cpc	r19, r21
   196c0:	24 f4       	brge	.+8      	; 0x196ca <lif_S2B+0x26>
   196c2:	6d 93       	st	X+, r22
   196c4:	2f 5f       	subi	r18, 0xFF	; 255
   196c6:	3f 4f       	sbci	r19, 0xFF	; 255
   196c8:	f1 cf       	rjmp	.-30     	; 0x196ac <lif_S2B+0x8>
   196ca:	08 95       	ret
   196cc:	9f 01       	movw	r18, r30
   196ce:	28 1b       	sub	r18, r24
   196d0:	39 0b       	sbc	r19, r25
   196d2:	24 17       	cp	r18, r20
   196d4:	35 07       	cpc	r19, r21
   196d6:	14 f4       	brge	.+4      	; 0x196dc <lif_S2B+0x38>
   196d8:	61 93       	st	Z+, r22
   196da:	f8 cf       	rjmp	.-16     	; 0x196cc <lif_S2B+0x28>
   196dc:	08 95       	ret

000196de <lif_fixname>:
   196de:	a0 e0       	ldi	r26, 0x00	; 0
   196e0:	b0 e0       	ldi	r27, 0x00	; 0
   196e2:	e5 e7       	ldi	r30, 0x75	; 117
   196e4:	fb ec       	ldi	r31, 0xCB	; 203
   196e6:	0c 94 3d ec 	jmp	0x1d87a	; 0x1d87a <__prologue_saves__+0x12>
   196ea:	8c 01       	movw	r16, r24
   196ec:	cb 01       	movw	r24, r22
   196ee:	7a 01       	movw	r14, r20
   196f0:	0e 94 53 7c 	call	0xf8a6	; 0xf8a6 <basename>
   196f4:	6c 01       	movw	r12, r24
   196f6:	e8 01       	movw	r28, r16
   196f8:	80 e2       	ldi	r24, 0x20	; 32
   196fa:	b8 2e       	mov	r11, r24
   196fc:	be 01       	movw	r22, r28
   196fe:	60 1b       	sub	r22, r16
   19700:	71 0b       	sbc	r23, r17
   19702:	f6 01       	movw	r30, r12
   19704:	81 91       	ld	r24, Z+
   19706:	6f 01       	movw	r12, r30
   19708:	81 11       	cpse	r24, r1
   1970a:	02 c0       	rjmp	.+4      	; 0x19710 <lif_fixname+0x32>
   1970c:	20 e2       	ldi	r18, 0x20	; 32
   1970e:	0e c0       	rjmp	.+28     	; 0x1972c <lif_fixname+0x4e>
   19710:	1e 14       	cp	r1, r14
   19712:	1f 04       	cpc	r1, r15
   19714:	dc f7       	brge	.-10     	; 0x1970c <lif_fixname+0x2e>
   19716:	8e 32       	cpi	r24, 0x2E	; 46
   19718:	c9 f3       	breq	.-14     	; 0x1970c <lif_fixname+0x2e>
   1971a:	90 e0       	ldi	r25, 0x00	; 0
   1971c:	41 df       	rcall	.-382    	; 0x195a0 <lif_chars>
   1971e:	88 23       	and	r24, r24
   19720:	11 f0       	breq	.+4      	; 0x19726 <lif_fixname+0x48>
   19722:	88 83       	st	Y, r24
   19724:	01 c0       	rjmp	.+2      	; 0x19728 <lif_fixname+0x4a>
   19726:	b8 82       	st	Y, r11
   19728:	21 96       	adiw	r28, 0x01	; 1
   1972a:	e8 cf       	rjmp	.-48     	; 0x196fc <lif_fixname+0x1e>
   1972c:	ce 01       	movw	r24, r28
   1972e:	80 1b       	sub	r24, r16
   19730:	91 0b       	sbc	r25, r17
   19732:	8e 15       	cp	r24, r14
   19734:	9f 05       	cpc	r25, r15
   19736:	14 f4       	brge	.+4      	; 0x1973c <lif_fixname+0x5e>
   19738:	29 93       	st	Y+, r18
   1973a:	f8 cf       	rjmp	.-16     	; 0x1972c <lif_fixname+0x4e>
   1973c:	18 82       	st	Y, r1
   1973e:	f8 01       	movw	r30, r16
   19740:	01 90       	ld	r0, Z+
   19742:	00 20       	and	r0, r0
   19744:	e9 f7       	brne	.-6      	; 0x19740 <lif_fixname+0x62>
   19746:	cf 01       	movw	r24, r30
   19748:	01 97       	sbiw	r24, 0x01	; 1
   1974a:	80 1b       	sub	r24, r16
   1974c:	91 0b       	sbc	r25, r17
   1974e:	cd b7       	in	r28, 0x3d	; 61
   19750:	de b7       	in	r29, 0x3e	; 62
   19752:	e9 e0       	ldi	r30, 0x09	; 9
   19754:	0c 94 59 ec 	jmp	0x1d8b2	; 0x1d8b2 <__epilogue_restores__+0x12>

00019758 <lif_vol2str>:
   19758:	ef 92       	push	r14
   1975a:	ff 92       	push	r15
   1975c:	0f 93       	push	r16
   1975e:	1f 93       	push	r17
   19760:	cf 93       	push	r28
   19762:	df 93       	push	r29
   19764:	7c 01       	movw	r14, r24
   19766:	eb 01       	movw	r28, r22
   19768:	fc 01       	movw	r30, r24
   1976a:	04 a1       	ldd	r16, Z+36	; 0x24
   1976c:	15 a1       	ldd	r17, Z+37	; 0x25
   1976e:	20 e0       	ldi	r18, 0x00	; 0
   19770:	30 e0       	ldi	r19, 0x00	; 0
   19772:	42 e0       	ldi	r20, 0x02	; 2
   19774:	50 e0       	ldi	r21, 0x00	; 0
   19776:	60 e0       	ldi	r22, 0x00	; 0
   19778:	70 e0       	ldi	r23, 0x00	; 0
   1977a:	ce 01       	movw	r24, r28
   1977c:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   19780:	b7 01       	movw	r22, r14
   19782:	6a 5d       	subi	r22, 0xDA	; 218
   19784:	7f 4f       	sbci	r23, 0xFF	; 255
   19786:	46 e0       	ldi	r20, 0x06	; 6
   19788:	50 e0       	ldi	r21, 0x00	; 0
   1978a:	ce 01       	movw	r24, r28
   1978c:	02 96       	adiw	r24, 0x02	; 2
   1978e:	8a df       	rcall	.-236    	; 0x196a4 <lif_S2B>
   19790:	f7 01       	movw	r30, r14
   19792:	05 a5       	ldd	r16, Z+45	; 0x2d
   19794:	16 a5       	ldd	r17, Z+46	; 0x2e
   19796:	27 a5       	ldd	r18, Z+47	; 0x2f
   19798:	30 a9       	ldd	r19, Z+48	; 0x30
   1979a:	44 e0       	ldi	r20, 0x04	; 4
   1979c:	50 e0       	ldi	r21, 0x00	; 0
   1979e:	68 e0       	ldi	r22, 0x08	; 8
   197a0:	70 e0       	ldi	r23, 0x00	; 0
   197a2:	ce 01       	movw	r24, r28
   197a4:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   197a8:	f7 01       	movw	r30, r14
   197aa:	01 a9       	ldd	r16, Z+49	; 0x31
   197ac:	12 a9       	ldd	r17, Z+50	; 0x32
   197ae:	20 e0       	ldi	r18, 0x00	; 0
   197b0:	30 e0       	ldi	r19, 0x00	; 0
   197b2:	42 e0       	ldi	r20, 0x02	; 2
   197b4:	50 e0       	ldi	r21, 0x00	; 0
   197b6:	6c e0       	ldi	r22, 0x0C	; 12
   197b8:	70 e0       	ldi	r23, 0x00	; 0
   197ba:	ce 01       	movw	r24, r28
   197bc:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   197c0:	00 e0       	ldi	r16, 0x00	; 0
   197c2:	10 e0       	ldi	r17, 0x00	; 0
   197c4:	98 01       	movw	r18, r16
   197c6:	42 e0       	ldi	r20, 0x02	; 2
   197c8:	50 e0       	ldi	r21, 0x00	; 0
   197ca:	6e e0       	ldi	r22, 0x0E	; 14
   197cc:	70 e0       	ldi	r23, 0x00	; 0
   197ce:	ce 01       	movw	r24, r28
   197d0:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   197d4:	f7 01       	movw	r30, r14
   197d6:	05 a9       	ldd	r16, Z+53	; 0x35
   197d8:	16 a9       	ldd	r17, Z+54	; 0x36
   197da:	27 a9       	ldd	r18, Z+55	; 0x37
   197dc:	30 ad       	ldd	r19, Z+56	; 0x38
   197de:	44 e0       	ldi	r20, 0x04	; 4
   197e0:	50 e0       	ldi	r21, 0x00	; 0
   197e2:	60 e1       	ldi	r22, 0x10	; 16
   197e4:	70 e0       	ldi	r23, 0x00	; 0
   197e6:	ce 01       	movw	r24, r28
   197e8:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   197ec:	f7 01       	movw	r30, r14
   197ee:	01 ad       	ldd	r16, Z+57	; 0x39
   197f0:	12 ad       	ldd	r17, Z+58	; 0x3a
   197f2:	20 e0       	ldi	r18, 0x00	; 0
   197f4:	30 e0       	ldi	r19, 0x00	; 0
   197f6:	42 e0       	ldi	r20, 0x02	; 2
   197f8:	50 e0       	ldi	r21, 0x00	; 0
   197fa:	64 e1       	ldi	r22, 0x14	; 20
   197fc:	70 e0       	ldi	r23, 0x00	; 0
   197fe:	ce 01       	movw	r24, r28
   19800:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   19804:	00 e0       	ldi	r16, 0x00	; 0
   19806:	10 e0       	ldi	r17, 0x00	; 0
   19808:	98 01       	movw	r18, r16
   1980a:	42 e0       	ldi	r20, 0x02	; 2
   1980c:	50 e0       	ldi	r21, 0x00	; 0
   1980e:	66 e1       	ldi	r22, 0x16	; 22
   19810:	70 e0       	ldi	r23, 0x00	; 0
   19812:	ce 01       	movw	r24, r28
   19814:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   19818:	f7 01       	movw	r30, r14
   1981a:	fd 96       	adiw	r30, 0x3d	; 61
   1981c:	00 81       	ld	r16, Z
   1981e:	11 81       	ldd	r17, Z+1	; 0x01
   19820:	22 81       	ldd	r18, Z+2	; 0x02
   19822:	33 81       	ldd	r19, Z+3	; 0x03
   19824:	44 e0       	ldi	r20, 0x04	; 4
   19826:	50 e0       	ldi	r21, 0x00	; 0
   19828:	68 e1       	ldi	r22, 0x18	; 24
   1982a:	70 e0       	ldi	r23, 0x00	; 0
   1982c:	ce 01       	movw	r24, r28
   1982e:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   19832:	f7 01       	movw	r30, r14
   19834:	ef 5b       	subi	r30, 0xBF	; 191
   19836:	ff 4f       	sbci	r31, 0xFF	; 255
   19838:	00 81       	ld	r16, Z
   1983a:	11 81       	ldd	r17, Z+1	; 0x01
   1983c:	22 81       	ldd	r18, Z+2	; 0x02
   1983e:	33 81       	ldd	r19, Z+3	; 0x03
   19840:	44 e0       	ldi	r20, 0x04	; 4
   19842:	50 e0       	ldi	r21, 0x00	; 0
   19844:	6c e1       	ldi	r22, 0x1C	; 28
   19846:	70 e0       	ldi	r23, 0x00	; 0
   19848:	ce 01       	movw	r24, r28
   1984a:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   1984e:	f7 01       	movw	r30, r14
   19850:	eb 5b       	subi	r30, 0xBB	; 187
   19852:	ff 4f       	sbci	r31, 0xFF	; 255
   19854:	00 81       	ld	r16, Z
   19856:	11 81       	ldd	r17, Z+1	; 0x01
   19858:	22 81       	ldd	r18, Z+2	; 0x02
   1985a:	33 81       	ldd	r19, Z+3	; 0x03
   1985c:	44 e0       	ldi	r20, 0x04	; 4
   1985e:	50 e0       	ldi	r21, 0x00	; 0
   19860:	60 e2       	ldi	r22, 0x20	; 32
   19862:	70 e0       	ldi	r23, 0x00	; 0
   19864:	ce 01       	movw	r24, r28
   19866:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   1986a:	de 01       	movw	r26, r28
   1986c:	94 96       	adiw	r26, 0x24	; 36
   1986e:	f7 01       	movw	r30, r14
   19870:	e7 5b       	subi	r30, 0xB7	; 183
   19872:	ff 4f       	sbci	r31, 0xFF	; 255
   19874:	86 e0       	ldi	r24, 0x06	; 6
   19876:	01 90       	ld	r0, Z+
   19878:	0d 92       	st	X+, r0
   1987a:	8a 95       	dec	r24
   1987c:	e1 f7       	brne	.-8      	; 0x19876 <lif_vol2str+0x11e>
   1987e:	cd b7       	in	r28, 0x3d	; 61
   19880:	de b7       	in	r29, 0x3e	; 62
   19882:	e6 e0       	ldi	r30, 0x06	; 6
   19884:	0c 94 5c ec 	jmp	0x1d8b8	; 0x1d8b8 <__epilogue_restores__+0x18>

00019888 <lif_str2vol>:
   19888:	0f 93       	push	r16
   1988a:	1f 93       	push	r17
   1988c:	cf 93       	push	r28
   1988e:	df 93       	push	r29
   19890:	8c 01       	movw	r16, r24
   19892:	eb 01       	movw	r28, r22
   19894:	42 e0       	ldi	r20, 0x02	; 2
   19896:	50 e0       	ldi	r21, 0x00	; 0
   19898:	60 e0       	ldi	r22, 0x00	; 0
   1989a:	70 e0       	ldi	r23, 0x00	; 0
   1989c:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <B2V_MSB>
   198a0:	7d a3       	std	Y+37, r23	; 0x25
   198a2:	6c a3       	std	Y+36, r22	; 0x24
   198a4:	be 01       	movw	r22, r28
   198a6:	6a 5d       	subi	r22, 0xDA	; 218
   198a8:	7f 4f       	sbci	r23, 0xFF	; 255
   198aa:	46 e0       	ldi	r20, 0x06	; 6
   198ac:	50 e0       	ldi	r21, 0x00	; 0
   198ae:	c8 01       	movw	r24, r16
   198b0:	02 96       	adiw	r24, 0x02	; 2
   198b2:	a1 de       	rcall	.-702    	; 0x195f6 <lif_B2S>
   198b4:	44 e0       	ldi	r20, 0x04	; 4
   198b6:	50 e0       	ldi	r21, 0x00	; 0
   198b8:	68 e0       	ldi	r22, 0x08	; 8
   198ba:	70 e0       	ldi	r23, 0x00	; 0
   198bc:	c8 01       	movw	r24, r16
   198be:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <B2V_MSB>
   198c2:	6d a7       	std	Y+45, r22	; 0x2d
   198c4:	7e a7       	std	Y+46, r23	; 0x2e
   198c6:	8f a7       	std	Y+47, r24	; 0x2f
   198c8:	98 ab       	std	Y+48, r25	; 0x30
   198ca:	42 e0       	ldi	r20, 0x02	; 2
   198cc:	50 e0       	ldi	r21, 0x00	; 0
   198ce:	6c e0       	ldi	r22, 0x0C	; 12
   198d0:	70 e0       	ldi	r23, 0x00	; 0
   198d2:	c8 01       	movw	r24, r16
   198d4:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <B2V_MSB>
   198d8:	7a ab       	std	Y+50, r23	; 0x32
   198da:	69 ab       	std	Y+49, r22	; 0x31
   198dc:	42 e0       	ldi	r20, 0x02	; 2
   198de:	50 e0       	ldi	r21, 0x00	; 0
   198e0:	6e e0       	ldi	r22, 0x0E	; 14
   198e2:	70 e0       	ldi	r23, 0x00	; 0
   198e4:	c8 01       	movw	r24, r16
   198e6:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <B2V_MSB>
   198ea:	7c ab       	std	Y+52, r23	; 0x34
   198ec:	6b ab       	std	Y+51, r22	; 0x33
   198ee:	44 e0       	ldi	r20, 0x04	; 4
   198f0:	50 e0       	ldi	r21, 0x00	; 0
   198f2:	60 e1       	ldi	r22, 0x10	; 16
   198f4:	70 e0       	ldi	r23, 0x00	; 0
   198f6:	c8 01       	movw	r24, r16
   198f8:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <B2V_MSB>
   198fc:	6d ab       	std	Y+53, r22	; 0x35
   198fe:	7e ab       	std	Y+54, r23	; 0x36
   19900:	8f ab       	std	Y+55, r24	; 0x37
   19902:	98 af       	std	Y+56, r25	; 0x38
   19904:	42 e0       	ldi	r20, 0x02	; 2
   19906:	50 e0       	ldi	r21, 0x00	; 0
   19908:	64 e1       	ldi	r22, 0x14	; 20
   1990a:	70 e0       	ldi	r23, 0x00	; 0
   1990c:	c8 01       	movw	r24, r16
   1990e:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <B2V_MSB>
   19912:	7a af       	std	Y+58, r23	; 0x3a
   19914:	69 af       	std	Y+57, r22	; 0x39
   19916:	42 e0       	ldi	r20, 0x02	; 2
   19918:	50 e0       	ldi	r21, 0x00	; 0
   1991a:	66 e1       	ldi	r22, 0x16	; 22
   1991c:	70 e0       	ldi	r23, 0x00	; 0
   1991e:	c8 01       	movw	r24, r16
   19920:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <B2V_MSB>
   19924:	7c af       	std	Y+60, r23	; 0x3c
   19926:	6b af       	std	Y+59, r22	; 0x3b
   19928:	44 e0       	ldi	r20, 0x04	; 4
   1992a:	50 e0       	ldi	r21, 0x00	; 0
   1992c:	68 e1       	ldi	r22, 0x18	; 24
   1992e:	70 e0       	ldi	r23, 0x00	; 0
   19930:	c8 01       	movw	r24, r16
   19932:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <B2V_MSB>
   19936:	fe 01       	movw	r30, r28
   19938:	fd 96       	adiw	r30, 0x3d	; 61
   1993a:	60 83       	st	Z, r22
   1993c:	71 83       	std	Z+1, r23	; 0x01
   1993e:	82 83       	std	Z+2, r24	; 0x02
   19940:	93 83       	std	Z+3, r25	; 0x03
   19942:	44 e0       	ldi	r20, 0x04	; 4
   19944:	50 e0       	ldi	r21, 0x00	; 0
   19946:	6c e1       	ldi	r22, 0x1C	; 28
   19948:	70 e0       	ldi	r23, 0x00	; 0
   1994a:	c8 01       	movw	r24, r16
   1994c:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <B2V_MSB>
   19950:	fe 01       	movw	r30, r28
   19952:	ef 5b       	subi	r30, 0xBF	; 191
   19954:	ff 4f       	sbci	r31, 0xFF	; 255
   19956:	60 83       	st	Z, r22
   19958:	71 83       	std	Z+1, r23	; 0x01
   1995a:	82 83       	std	Z+2, r24	; 0x02
   1995c:	93 83       	std	Z+3, r25	; 0x03
   1995e:	44 e0       	ldi	r20, 0x04	; 4
   19960:	50 e0       	ldi	r21, 0x00	; 0
   19962:	60 e2       	ldi	r22, 0x20	; 32
   19964:	70 e0       	ldi	r23, 0x00	; 0
   19966:	c8 01       	movw	r24, r16
   19968:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <B2V_MSB>
   1996c:	fe 01       	movw	r30, r28
   1996e:	eb 5b       	subi	r30, 0xBB	; 187
   19970:	ff 4f       	sbci	r31, 0xFF	; 255
   19972:	60 83       	st	Z, r22
   19974:	71 83       	std	Z+1, r23	; 0x01
   19976:	82 83       	std	Z+2, r24	; 0x02
   19978:	93 83       	std	Z+3, r25	; 0x03
   1997a:	de 01       	movw	r26, r28
   1997c:	a7 5b       	subi	r26, 0xB7	; 183
   1997e:	bf 4f       	sbci	r27, 0xFF	; 255
   19980:	f8 01       	movw	r30, r16
   19982:	b4 96       	adiw	r30, 0x24	; 36
   19984:	86 e0       	ldi	r24, 0x06	; 6
   19986:	01 90       	ld	r0, Z+
   19988:	0d 92       	st	X+, r0
   1998a:	8a 95       	dec	r24
   1998c:	e1 f7       	brne	.-8      	; 0x19986 <lif_str2vol+0xfe>
   1998e:	df 91       	pop	r29
   19990:	cf 91       	pop	r28
   19992:	1f 91       	pop	r17
   19994:	0f 91       	pop	r16
   19996:	08 95       	ret

00019998 <lif_dir2str>:
   19998:	ef 92       	push	r14
   1999a:	ff 92       	push	r15
   1999c:	0f 93       	push	r16
   1999e:	1f 93       	push	r17
   199a0:	cf 93       	push	r28
   199a2:	df 93       	push	r29
   199a4:	ec 01       	movw	r28, r24
   199a6:	7b 01       	movw	r14, r22
   199a8:	bc 01       	movw	r22, r24
   199aa:	61 5b       	subi	r22, 0xB1	; 177
   199ac:	7f 4f       	sbci	r23, 0xFF	; 255
   199ae:	4a e0       	ldi	r20, 0x0A	; 10
   199b0:	50 e0       	ldi	r21, 0x00	; 0
   199b2:	c7 01       	movw	r24, r14
   199b4:	77 de       	rcall	.-786    	; 0x196a4 <lif_S2B>
   199b6:	fe 01       	movw	r30, r28
   199b8:	e6 5a       	subi	r30, 0xA6	; 166
   199ba:	ff 4f       	sbci	r31, 0xFF	; 255
   199bc:	00 81       	ld	r16, Z
   199be:	11 81       	ldd	r17, Z+1	; 0x01
   199c0:	20 e0       	ldi	r18, 0x00	; 0
   199c2:	30 e0       	ldi	r19, 0x00	; 0
   199c4:	42 e0       	ldi	r20, 0x02	; 2
   199c6:	50 e0       	ldi	r21, 0x00	; 0
   199c8:	6a e0       	ldi	r22, 0x0A	; 10
   199ca:	70 e0       	ldi	r23, 0x00	; 0
   199cc:	c7 01       	movw	r24, r14
   199ce:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   199d2:	fe 01       	movw	r30, r28
   199d4:	e4 5a       	subi	r30, 0xA4	; 164
   199d6:	ff 4f       	sbci	r31, 0xFF	; 255
   199d8:	00 81       	ld	r16, Z
   199da:	11 81       	ldd	r17, Z+1	; 0x01
   199dc:	22 81       	ldd	r18, Z+2	; 0x02
   199de:	33 81       	ldd	r19, Z+3	; 0x03
   199e0:	44 e0       	ldi	r20, 0x04	; 4
   199e2:	50 e0       	ldi	r21, 0x00	; 0
   199e4:	6c e0       	ldi	r22, 0x0C	; 12
   199e6:	70 e0       	ldi	r23, 0x00	; 0
   199e8:	c7 01       	movw	r24, r14
   199ea:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   199ee:	fe 01       	movw	r30, r28
   199f0:	e0 5a       	subi	r30, 0xA0	; 160
   199f2:	ff 4f       	sbci	r31, 0xFF	; 255
   199f4:	00 81       	ld	r16, Z
   199f6:	11 81       	ldd	r17, Z+1	; 0x01
   199f8:	22 81       	ldd	r18, Z+2	; 0x02
   199fa:	33 81       	ldd	r19, Z+3	; 0x03
   199fc:	44 e0       	ldi	r20, 0x04	; 4
   199fe:	50 e0       	ldi	r21, 0x00	; 0
   19a00:	60 e1       	ldi	r22, 0x10	; 16
   19a02:	70 e0       	ldi	r23, 0x00	; 0
   19a04:	c7 01       	movw	r24, r14
   19a06:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   19a0a:	d7 01       	movw	r26, r14
   19a0c:	54 96       	adiw	r26, 0x14	; 20
   19a0e:	fe 01       	movw	r30, r28
   19a10:	ec 59       	subi	r30, 0x9C	; 156
   19a12:	ff 4f       	sbci	r31, 0xFF	; 255
   19a14:	86 e0       	ldi	r24, 0x06	; 6
   19a16:	01 90       	ld	r0, Z+
   19a18:	0d 92       	st	X+, r0
   19a1a:	8a 95       	dec	r24
   19a1c:	e1 f7       	brne	.-8      	; 0x19a16 <lif_dir2str+0x7e>
   19a1e:	fe 01       	movw	r30, r28
   19a20:	e6 59       	subi	r30, 0x96	; 150
   19a22:	ff 4f       	sbci	r31, 0xFF	; 255
   19a24:	00 81       	ld	r16, Z
   19a26:	11 81       	ldd	r17, Z+1	; 0x01
   19a28:	20 e0       	ldi	r18, 0x00	; 0
   19a2a:	30 e0       	ldi	r19, 0x00	; 0
   19a2c:	42 e0       	ldi	r20, 0x02	; 2
   19a2e:	50 e0       	ldi	r21, 0x00	; 0
   19a30:	6a e1       	ldi	r22, 0x1A	; 26
   19a32:	70 e0       	ldi	r23, 0x00	; 0
   19a34:	c7 01       	movw	r24, r14
   19a36:	0e 94 e4 b6 	call	0x16dc8	; 0x16dc8 <V2B_MSB>
   19a3a:	fe 01       	movw	r30, r28
   19a3c:	e4 59       	subi	r30, 0x94	; 148
   19a3e:	ff 4f       	sbci	r31, 0xFF	; 255
   19a40:	00 81       	ld	r16, Z
   19a42:	11 81       	ldd	r17, Z+1	; 0x01
   19a44:	20 e0       	ldi	r18, 0x00	; 0
   19a46:	30 e0       	ldi	r19, 0x00	; 0
   19a48:	42 e0       	ldi	r20, 0x02	; 2
   19a4a:	50 e0       	ldi	r21, 0x00	; 0
   19a4c:	6c e1       	ldi	r22, 0x1C	; 28
   19a4e:	70 e0       	ldi	r23, 0x00	; 0
   19a50:	c7 01       	movw	r24, r14
   19a52:	0e 94 f8 b6 	call	0x16df0	; 0x16df0 <V2B_LSB>
   19a56:	c2 59       	subi	r28, 0x92	; 146
   19a58:	df 4f       	sbci	r29, 0xFF	; 255
   19a5a:	08 81       	ld	r16, Y
   19a5c:	19 81       	ldd	r17, Y+1	; 0x01
   19a5e:	20 e0       	ldi	r18, 0x00	; 0
   19a60:	30 e0       	ldi	r19, 0x00	; 0
   19a62:	42 e0       	ldi	r20, 0x02	; 2
   19a64:	50 e0       	ldi	r21, 0x00	; 0
   19a66:	6e e1       	ldi	r22, 0x1E	; 30
   19a68:	70 e0       	ldi	r23, 0x00	; 0
   19a6a:	c7 01       	movw	r24, r14
   19a6c:	0e 94 f8 b6 	call	0x16df0	; 0x16df0 <V2B_LSB>
   19a70:	cd b7       	in	r28, 0x3d	; 61
   19a72:	de b7       	in	r29, 0x3e	; 62
   19a74:	e6 e0       	ldi	r30, 0x06	; 6
   19a76:	0c 94 5c ec 	jmp	0x1d8b8	; 0x1d8b8 <__epilogue_restores__+0x18>

00019a7a <lif_str2dir>:
   19a7a:	0f 93       	push	r16
   19a7c:	1f 93       	push	r17
   19a7e:	cf 93       	push	r28
   19a80:	df 93       	push	r29
   19a82:	8c 01       	movw	r16, r24
   19a84:	eb 01       	movw	r28, r22
   19a86:	61 5b       	subi	r22, 0xB1	; 177
   19a88:	7f 4f       	sbci	r23, 0xFF	; 255
   19a8a:	4a e0       	ldi	r20, 0x0A	; 10
   19a8c:	50 e0       	ldi	r21, 0x00	; 0
   19a8e:	b3 dd       	rcall	.-1178   	; 0x195f6 <lif_B2S>
   19a90:	42 e0       	ldi	r20, 0x02	; 2
   19a92:	50 e0       	ldi	r21, 0x00	; 0
   19a94:	6a e0       	ldi	r22, 0x0A	; 10
   19a96:	70 e0       	ldi	r23, 0x00	; 0
   19a98:	c8 01       	movw	r24, r16
   19a9a:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <B2V_MSB>
   19a9e:	fe 01       	movw	r30, r28
   19aa0:	e6 5a       	subi	r30, 0xA6	; 166
   19aa2:	ff 4f       	sbci	r31, 0xFF	; 255
   19aa4:	71 83       	std	Z+1, r23	; 0x01
   19aa6:	60 83       	st	Z, r22
   19aa8:	44 e0       	ldi	r20, 0x04	; 4
   19aaa:	50 e0       	ldi	r21, 0x00	; 0
   19aac:	6c e0       	ldi	r22, 0x0C	; 12
   19aae:	70 e0       	ldi	r23, 0x00	; 0
   19ab0:	c8 01       	movw	r24, r16
   19ab2:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <B2V_MSB>
   19ab6:	fe 01       	movw	r30, r28
   19ab8:	e4 5a       	subi	r30, 0xA4	; 164
   19aba:	ff 4f       	sbci	r31, 0xFF	; 255
   19abc:	60 83       	st	Z, r22
   19abe:	71 83       	std	Z+1, r23	; 0x01
   19ac0:	82 83       	std	Z+2, r24	; 0x02
   19ac2:	93 83       	std	Z+3, r25	; 0x03
   19ac4:	44 e0       	ldi	r20, 0x04	; 4
   19ac6:	50 e0       	ldi	r21, 0x00	; 0
   19ac8:	60 e1       	ldi	r22, 0x10	; 16
   19aca:	70 e0       	ldi	r23, 0x00	; 0
   19acc:	c8 01       	movw	r24, r16
   19ace:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <B2V_MSB>
   19ad2:	fe 01       	movw	r30, r28
   19ad4:	e0 5a       	subi	r30, 0xA0	; 160
   19ad6:	ff 4f       	sbci	r31, 0xFF	; 255
   19ad8:	60 83       	st	Z, r22
   19ada:	71 83       	std	Z+1, r23	; 0x01
   19adc:	82 83       	std	Z+2, r24	; 0x02
   19ade:	93 83       	std	Z+3, r25	; 0x03
   19ae0:	de 01       	movw	r26, r28
   19ae2:	ac 59       	subi	r26, 0x9C	; 156
   19ae4:	bf 4f       	sbci	r27, 0xFF	; 255
   19ae6:	f8 01       	movw	r30, r16
   19ae8:	74 96       	adiw	r30, 0x14	; 20
   19aea:	86 e0       	ldi	r24, 0x06	; 6
   19aec:	01 90       	ld	r0, Z+
   19aee:	0d 92       	st	X+, r0
   19af0:	8a 95       	dec	r24
   19af2:	e1 f7       	brne	.-8      	; 0x19aec <lif_str2dir+0x72>
   19af4:	42 e0       	ldi	r20, 0x02	; 2
   19af6:	50 e0       	ldi	r21, 0x00	; 0
   19af8:	6a e1       	ldi	r22, 0x1A	; 26
   19afa:	70 e0       	ldi	r23, 0x00	; 0
   19afc:	c8 01       	movw	r24, r16
   19afe:	0e 94 0d b7 	call	0x16e1a	; 0x16e1a <B2V_MSB>
   19b02:	fe 01       	movw	r30, r28
   19b04:	e6 59       	subi	r30, 0x96	; 150
   19b06:	ff 4f       	sbci	r31, 0xFF	; 255
   19b08:	71 83       	std	Z+1, r23	; 0x01
   19b0a:	60 83       	st	Z, r22
   19b0c:	42 e0       	ldi	r20, 0x02	; 2
   19b0e:	50 e0       	ldi	r21, 0x00	; 0
   19b10:	6c e1       	ldi	r22, 0x1C	; 28
   19b12:	70 e0       	ldi	r23, 0x00	; 0
   19b14:	c8 01       	movw	r24, r16
   19b16:	0e 94 2c b7 	call	0x16e58	; 0x16e58 <B2V_LSB>
   19b1a:	fe 01       	movw	r30, r28
   19b1c:	e4 59       	subi	r30, 0x94	; 148
   19b1e:	ff 4f       	sbci	r31, 0xFF	; 255
   19b20:	71 83       	std	Z+1, r23	; 0x01
   19b22:	60 83       	st	Z, r22
   19b24:	42 e0       	ldi	r20, 0x02	; 2
   19b26:	50 e0       	ldi	r21, 0x00	; 0
   19b28:	6e e1       	ldi	r22, 0x1E	; 30
   19b2a:	70 e0       	ldi	r23, 0x00	; 0
   19b2c:	c8 01       	movw	r24, r16
   19b2e:	0e 94 2c b7 	call	0x16e58	; 0x16e58 <B2V_LSB>
   19b32:	c2 59       	subi	r28, 0x92	; 146
   19b34:	df 4f       	sbci	r29, 0xFF	; 255
   19b36:	79 83       	std	Y+1, r23	; 0x01
   19b38:	68 83       	st	Y, r22
   19b3a:	df 91       	pop	r29
   19b3c:	cf 91       	pop	r28
   19b3e:	1f 91       	pop	r17
   19b40:	0f 91       	pop	r16
   19b42:	08 95       	ret

00019b44 <lif_BIN2BCD>:
   19b44:	6a e0       	ldi	r22, 0x0A	; 10
   19b46:	0e 94 94 eb 	call	0x1d728	; 0x1d728 <__udivmodqi4>
   19b4a:	82 95       	swap	r24
   19b4c:	80 7f       	andi	r24, 0xF0	; 240
   19b4e:	89 2b       	or	r24, r25
   19b50:	08 95       	ret

00019b52 <lif_BCD2BIN>:
   19b52:	28 2f       	mov	r18, r24
   19b54:	22 95       	swap	r18
   19b56:	2f 70       	andi	r18, 0x0F	; 15
   19b58:	8f 70       	andi	r24, 0x0F	; 15
   19b5a:	90 e0       	ldi	r25, 0x00	; 0
   19b5c:	3a e0       	ldi	r19, 0x0A	; 10
   19b5e:	23 9f       	mul	r18, r19
   19b60:	80 0d       	add	r24, r0
   19b62:	91 1d       	adc	r25, r1
   19b64:	11 24       	eor	r1, r1
   19b66:	08 95       	ret

00019b68 <lif_time2lifbcd>:
   19b68:	aa e1       	ldi	r26, 0x1A	; 26
   19b6a:	b0 e0       	ldi	r27, 0x00	; 0
   19b6c:	ea eb       	ldi	r30, 0xBA	; 186
   19b6e:	fd ec       	ldi	r31, 0xCD	; 205
   19b70:	0c 94 42 ec 	jmp	0x1d884	; 0x1d884 <__prologue_saves__+0x1c>
   19b74:	8b 01       	movw	r16, r22
   19b76:	9c 01       	movw	r18, r24
   19b78:	6f 8b       	std	Y+23, r22	; 0x17
   19b7a:	78 8f       	std	Y+24, r23	; 0x18
   19b7c:	89 8f       	std	Y+25, r24	; 0x19
   19b7e:	9a 8f       	std	Y+26, r25	; 0x1a
   19b80:	67 2b       	or	r22, r23
   19b82:	68 2b       	or	r22, r24
   19b84:	69 2b       	or	r22, r25
   19b86:	41 f4       	brne	.+16     	; 0x19b98 <lif_time2lifbcd+0x30>
   19b88:	fa 01       	movw	r30, r20
   19b8a:	ca 01       	movw	r24, r20
   19b8c:	06 96       	adiw	r24, 0x06	; 6
   19b8e:	11 92       	st	Z+, r1
   19b90:	e8 17       	cp	r30, r24
   19b92:	f9 07       	cpc	r31, r25
   19b94:	e1 f7       	brne	.-8      	; 0x19b8e <lif_time2lifbcd+0x26>
   19b96:	26 c0       	rjmp	.+76     	; 0x19be4 <lif_time2lifbcd+0x7c>
   19b98:	8a 01       	movw	r16, r20
   19b9a:	be 01       	movw	r22, r28
   19b9c:	6f 5f       	subi	r22, 0xFF	; 255
   19b9e:	7f 4f       	sbci	r23, 0xFF	; 255
   19ba0:	ce 01       	movw	r24, r28
   19ba2:	47 96       	adiw	r24, 0x17	; 23
   19ba4:	0e 94 19 38 	call	0x7032	; 0x7032 <gmtime_r>
   19ba8:	8b 85       	ldd	r24, Y+11	; 0x0b
   19baa:	9c 85       	ldd	r25, Y+12	; 0x0c
   19bac:	64 e6       	ldi	r22, 0x64	; 100
   19bae:	70 e0       	ldi	r23, 0x00	; 0
   19bb0:	0e 94 b4 eb 	call	0x1d768	; 0x1d768 <__divmodhi4>
   19bb4:	c7 df       	rcall	.-114    	; 0x19b44 <lif_BIN2BCD>
   19bb6:	f8 01       	movw	r30, r16
   19bb8:	80 83       	st	Z, r24
   19bba:	89 85       	ldd	r24, Y+9	; 0x09
   19bbc:	8f 5f       	subi	r24, 0xFF	; 255
   19bbe:	c2 df       	rcall	.-124    	; 0x19b44 <lif_BIN2BCD>
   19bc0:	f8 01       	movw	r30, r16
   19bc2:	81 83       	std	Z+1, r24	; 0x01
   19bc4:	8f 81       	ldd	r24, Y+7	; 0x07
   19bc6:	be df       	rcall	.-132    	; 0x19b44 <lif_BIN2BCD>
   19bc8:	f8 01       	movw	r30, r16
   19bca:	82 83       	std	Z+2, r24	; 0x02
   19bcc:	8d 81       	ldd	r24, Y+5	; 0x05
   19bce:	ba df       	rcall	.-140    	; 0x19b44 <lif_BIN2BCD>
   19bd0:	f8 01       	movw	r30, r16
   19bd2:	83 83       	std	Z+3, r24	; 0x03
   19bd4:	8b 81       	ldd	r24, Y+3	; 0x03
   19bd6:	b6 df       	rcall	.-148    	; 0x19b44 <lif_BIN2BCD>
   19bd8:	f8 01       	movw	r30, r16
   19bda:	84 83       	std	Z+4, r24	; 0x04
   19bdc:	89 81       	ldd	r24, Y+1	; 0x01
   19bde:	b2 df       	rcall	.-156    	; 0x19b44 <lif_BIN2BCD>
   19be0:	f8 01       	movw	r30, r16
   19be2:	85 83       	std	Z+5, r24	; 0x05
   19be4:	6a 96       	adiw	r28, 0x1a	; 26
   19be6:	e4 e0       	ldi	r30, 0x04	; 4
   19be8:	0c 94 5e ec 	jmp	0x1d8bc	; 0x1d8bc <__epilogue_restores__+0x1c>

00019bec <lif_lifbcd2time>:
   19bec:	a6 e1       	ldi	r26, 0x16	; 22
   19bee:	b0 e0       	ldi	r27, 0x00	; 0
   19bf0:	ec ef       	ldi	r30, 0xFC	; 252
   19bf2:	fd ec       	ldi	r31, 0xCD	; 205
   19bf4:	0c 94 3c ec 	jmp	0x1d878	; 0x1d878 <__prologue_saves__+0x10>
   19bf8:	8c 01       	movw	r16, r24
   19bfa:	7c 01       	movw	r14, r24
   19bfc:	5c 01       	movw	r10, r24
   19bfe:	26 e0       	ldi	r18, 0x06	; 6
   19c00:	a2 0e       	add	r10, r18
   19c02:	b1 1c       	adc	r11, r1
   19c04:	cc 24       	eor	r12, r12
   19c06:	c3 94       	inc	r12
   19c08:	d1 2c       	mov	r13, r1
   19c0a:	f7 01       	movw	r30, r14
   19c0c:	81 91       	ld	r24, Z+
   19c0e:	7f 01       	movw	r14, r30
   19c10:	a0 df       	rcall	.-192    	; 0x19b52 <lif_BCD2BIN>
   19c12:	89 2b       	or	r24, r25
   19c14:	11 f0       	breq	.+4      	; 0x19c1a <lif_lifbcd2time+0x2e>
   19c16:	c1 2c       	mov	r12, r1
   19c18:	d1 2c       	mov	r13, r1
   19c1a:	ea 14       	cp	r14, r10
   19c1c:	fb 04       	cpc	r15, r11
   19c1e:	a9 f7       	brne	.-22     	; 0x19c0a <lif_lifbcd2time+0x1e>
   19c20:	c1 14       	cp	r12, r1
   19c22:	d1 04       	cpc	r13, r1
   19c24:	61 f5       	brne	.+88     	; 0x19c7e <lif_lifbcd2time+0x92>
   19c26:	f8 01       	movw	r30, r16
   19c28:	80 81       	ld	r24, Z
   19c2a:	93 df       	rcall	.-218    	; 0x19b52 <lif_BCD2BIN>
   19c2c:	7c 01       	movw	r14, r24
   19c2e:	f8 01       	movw	r30, r16
   19c30:	81 81       	ldd	r24, Z+1	; 0x01
   19c32:	8f df       	rcall	.-226    	; 0x19b52 <lif_BCD2BIN>
   19c34:	01 97       	sbiw	r24, 0x01	; 1
   19c36:	f6 e4       	ldi	r31, 0x46	; 70
   19c38:	ef 16       	cp	r14, r31
   19c3a:	f1 04       	cpc	r15, r1
   19c3c:	1c f4       	brge	.+6      	; 0x19c44 <lif_lifbcd2time+0x58>
   19c3e:	24 e6       	ldi	r18, 0x64	; 100
   19c40:	e2 0e       	add	r14, r18
   19c42:	f1 1c       	adc	r15, r1
   19c44:	fc 86       	std	Y+12, r15	; 0x0c
   19c46:	eb 86       	std	Y+11, r14	; 0x0b
   19c48:	9a 87       	std	Y+10, r25	; 0x0a
   19c4a:	89 87       	std	Y+9, r24	; 0x09
   19c4c:	f8 01       	movw	r30, r16
   19c4e:	82 81       	ldd	r24, Z+2	; 0x02
   19c50:	80 df       	rcall	.-256    	; 0x19b52 <lif_BCD2BIN>
   19c52:	98 87       	std	Y+8, r25	; 0x08
   19c54:	8f 83       	std	Y+7, r24	; 0x07
   19c56:	f8 01       	movw	r30, r16
   19c58:	83 81       	ldd	r24, Z+3	; 0x03
   19c5a:	7b df       	rcall	.-266    	; 0x19b52 <lif_BCD2BIN>
   19c5c:	9e 83       	std	Y+6, r25	; 0x06
   19c5e:	8d 83       	std	Y+5, r24	; 0x05
   19c60:	f8 01       	movw	r30, r16
   19c62:	84 81       	ldd	r24, Z+4	; 0x04
   19c64:	76 df       	rcall	.-276    	; 0x19b52 <lif_BCD2BIN>
   19c66:	9c 83       	std	Y+4, r25	; 0x04
   19c68:	8b 83       	std	Y+3, r24	; 0x03
   19c6a:	f8 01       	movw	r30, r16
   19c6c:	85 81       	ldd	r24, Z+5	; 0x05
   19c6e:	71 df       	rcall	.-286    	; 0x19b52 <lif_BCD2BIN>
   19c70:	9a 83       	std	Y+2, r25	; 0x02
   19c72:	89 83       	std	Y+1, r24	; 0x01
   19c74:	ce 01       	movw	r24, r28
   19c76:	01 96       	adiw	r24, 0x01	; 1
   19c78:	0e 94 ee 3a 	call	0x75dc	; 0x75dc <timegm>
   19c7c:	03 c0       	rjmp	.+6      	; 0x19c84 <lif_lifbcd2time+0x98>
   19c7e:	60 e0       	ldi	r22, 0x00	; 0
   19c80:	70 e0       	ldi	r23, 0x00	; 0
   19c82:	cb 01       	movw	r24, r22
   19c84:	66 96       	adiw	r28, 0x16	; 22
   19c86:	ea e0       	ldi	r30, 0x0A	; 10
   19c88:	0c 94 58 ec 	jmp	0x1d8b0	; 0x1d8b0 <__epilogue_restores__+0x10>

00019c8c <lif_ctime_gmt>:
   19c8c:	a6 e1       	ldi	r26, 0x16	; 22
   19c8e:	b0 e0       	ldi	r27, 0x00	; 0
   19c90:	ec e4       	ldi	r30, 0x4C	; 76
   19c92:	fe ec       	ldi	r31, 0xCE	; 206
   19c94:	0c 94 42 ec 	jmp	0x1d884	; 0x1d884 <__prologue_saves__+0x1c>
   19c98:	20 e2       	ldi	r18, 0x20	; 32
   19c9a:	ec e2       	ldi	r30, 0x2C	; 44
   19c9c:	fa e1       	ldi	r31, 0x1A	; 26
   19c9e:	df 01       	movw	r26, r30
   19ca0:	1d 92       	st	X+, r1
   19ca2:	2a 95       	dec	r18
   19ca4:	e9 f7       	brne	.-6      	; 0x19ca0 <lif_ctime_gmt+0x14>
   19ca6:	be 01       	movw	r22, r28
   19ca8:	6f 5f       	subi	r22, 0xFF	; 255
   19caa:	7f 4f       	sbci	r23, 0xFF	; 255
   19cac:	0e 94 19 38 	call	0x7032	; 0x7032 <gmtime_r>
   19cb0:	6c e2       	ldi	r22, 0x2C	; 44
   19cb2:	7a e1       	ldi	r23, 0x1A	; 26
   19cb4:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <asctime_r>
   19cb8:	8c 01       	movw	r16, r24
   19cba:	0e 94 74 32 	call	0x64e8	; 0x64e8 <trim_tail>
   19cbe:	c8 01       	movw	r24, r16
   19cc0:	66 96       	adiw	r28, 0x16	; 22
   19cc2:	e4 e0       	ldi	r30, 0x04	; 4
   19cc4:	0c 94 5e ec 	jmp	0x1d8bc	; 0x1d8bc <__epilogue_restores__+0x1c>

00019cc8 <lif_lifbcd2timestr>:
   19cc8:	a4 e0       	ldi	r26, 0x04	; 4
   19cca:	b0 e0       	ldi	r27, 0x00	; 0
   19ccc:	ea e6       	ldi	r30, 0x6A	; 106
   19cce:	fe ec       	ldi	r31, 0xCE	; 206
   19cd0:	0c 94 44 ec 	jmp	0x1d888	; 0x1d888 <__prologue_saves__+0x20>
   19cd4:	20 e2       	ldi	r18, 0x20	; 32
   19cd6:	ec e0       	ldi	r30, 0x0C	; 12
   19cd8:	fa e1       	ldi	r31, 0x1A	; 26
   19cda:	df 01       	movw	r26, r30
   19cdc:	1d 92       	st	X+, r1
   19cde:	2a 95       	dec	r18
   19ce0:	e9 f7       	brne	.-6      	; 0x19cdc <lif_lifbcd2timestr+0x14>
   19ce2:	84 df       	rcall	.-248    	; 0x19bec <lif_lifbcd2time>
   19ce4:	69 83       	std	Y+1, r22	; 0x01
   19ce6:	7a 83       	std	Y+2, r23	; 0x02
   19ce8:	8b 83       	std	Y+3, r24	; 0x03
   19cea:	9c 83       	std	Y+4, r25	; 0x04
   19cec:	67 2b       	or	r22, r23
   19cee:	68 2b       	or	r22, r24
   19cf0:	69 2b       	or	r22, r25
   19cf2:	29 f0       	breq	.+10     	; 0x19cfe <lif_lifbcd2timestr+0x36>
   19cf4:	ce 01       	movw	r24, r28
   19cf6:	01 96       	adiw	r24, 0x01	; 1
   19cf8:	c9 df       	rcall	.-110    	; 0x19c8c <lif_ctime_gmt>
   19cfa:	bc 01       	movw	r22, r24
   19cfc:	02 c0       	rjmp	.+4      	; 0x19d02 <lif_lifbcd2timestr+0x3a>
   19cfe:	62 ef       	ldi	r22, 0xF2	; 242
   19d00:	75 e1       	ldi	r23, 0x15	; 21
   19d02:	8c e0       	ldi	r24, 0x0C	; 12
   19d04:	9a e1       	ldi	r25, 0x1A	; 26
   19d06:	0e 94 1a 32 	call	0x6434	; 0x6434 <strcpy>
   19d0a:	8c e0       	ldi	r24, 0x0C	; 12
   19d0c:	9a e1       	ldi	r25, 0x1A	; 26
   19d0e:	24 96       	adiw	r28, 0x04	; 4
   19d10:	e2 e0       	ldi	r30, 0x02	; 2
   19d12:	0c 94 60 ec 	jmp	0x1d8c0	; 0x1d8c0 <__epilogue_restores__+0x20>

00019d16 <lif_image_clear>:
   19d16:	20 e7       	ldi	r18, 0x70	; 112
   19d18:	fc 01       	movw	r30, r24
   19d1a:	11 92       	st	Z+, r1
   19d1c:	2a 95       	dec	r18
   19d1e:	e9 f7       	brne	.-6      	; 0x19d1a <lif_image_clear+0x4>
   19d20:	08 95       	ret

00019d22 <lif_dir_clear>:
   19d22:	81 5b       	subi	r24, 0xB1	; 177
   19d24:	9f 4f       	sbci	r25, 0xFF	; 255
   19d26:	21 e2       	ldi	r18, 0x21	; 33
   19d28:	fc 01       	movw	r30, r24
   19d2a:	11 92       	st	Z+, r1
   19d2c:	2a 95       	dec	r18
   19d2e:	e9 f7       	brne	.-6      	; 0x19d2a <lif_dir_clear+0x8>
   19d30:	08 95       	ret

00019d32 <lif_vol_clear>:
   19d32:	84 96       	adiw	r24, 0x24	; 36
   19d34:	2b e2       	ldi	r18, 0x2B	; 43
   19d36:	fc 01       	movw	r30, r24
   19d38:	11 92       	st	Z+, r1
   19d3a:	2a 95       	dec	r18
   19d3c:	e9 f7       	brne	.-6      	; 0x19d38 <lif_vol_clear+0x6>
   19d3e:	08 95       	ret

00019d40 <lif_dump_vol>:
   19d40:	cf 93       	push	r28
   19d42:	df 93       	push	r29
   19d44:	ec 01       	movw	r28, r24
   19d46:	7f 93       	push	r23
   19d48:	6f 93       	push	r22
   19d4a:	80 e1       	ldi	r24, 0x10	; 16
   19d4c:	93 e4       	ldi	r25, 0x43	; 67
   19d4e:	1f 92       	push	r1
   19d50:	9f 93       	push	r25
   19d52:	8f 93       	push	r24
   19d54:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   19d58:	89 81       	ldd	r24, Y+1	; 0x01
   19d5a:	8f 93       	push	r24
   19d5c:	88 81       	ld	r24, Y
   19d5e:	8f 93       	push	r24
   19d60:	86 ef       	ldi	r24, 0xF6	; 246
   19d62:	92 e4       	ldi	r25, 0x42	; 66
   19d64:	1f 92       	push	r1
   19d66:	9f 93       	push	r25
   19d68:	8f 93       	push	r24
   19d6a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   19d6e:	8f 81       	ldd	r24, Y+7	; 0x07
   19d70:	8f 93       	push	r24
   19d72:	8e 81       	ldd	r24, Y+6	; 0x06
   19d74:	8f 93       	push	r24
   19d76:	8d 81       	ldd	r24, Y+5	; 0x05
   19d78:	8f 93       	push	r24
   19d7a:	8c 81       	ldd	r24, Y+4	; 0x04
   19d7c:	8f 93       	push	r24
   19d7e:	89 ed       	ldi	r24, 0xD9	; 217
   19d80:	92 e4       	ldi	r25, 0x42	; 66
   19d82:	1f 92       	push	r1
   19d84:	9f 93       	push	r25
   19d86:	8f 93       	push	r24
   19d88:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   19d8c:	8b 85       	ldd	r24, Y+11	; 0x0b
   19d8e:	8f 93       	push	r24
   19d90:	8a 85       	ldd	r24, Y+10	; 0x0a
   19d92:	8f 93       	push	r24
   19d94:	89 85       	ldd	r24, Y+9	; 0x09
   19d96:	8f 93       	push	r24
   19d98:	88 85       	ldd	r24, Y+8	; 0x08
   19d9a:	8f 93       	push	r24
   19d9c:	8c eb       	ldi	r24, 0xBC	; 188
   19d9e:	92 e4       	ldi	r25, 0x42	; 66
   19da0:	1f 92       	push	r1
   19da2:	9f 93       	push	r25
   19da4:	8f 93       	push	r24
   19da6:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   19daa:	8f 85       	ldd	r24, Y+15	; 0x0f
   19dac:	8f 93       	push	r24
   19dae:	8e 85       	ldd	r24, Y+14	; 0x0e
   19db0:	8f 93       	push	r24
   19db2:	8d 85       	ldd	r24, Y+13	; 0x0d
   19db4:	8f 93       	push	r24
   19db6:	8c 85       	ldd	r24, Y+12	; 0x0c
   19db8:	8f 93       	push	r24
   19dba:	8f e9       	ldi	r24, 0x9F	; 159
   19dbc:	92 e4       	ldi	r25, 0x42	; 66
   19dbe:	1f 92       	push	r1
   19dc0:	9f 93       	push	r25
   19dc2:	8f 93       	push	r24
   19dc4:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   19dc8:	8b 89       	ldd	r24, Y+19	; 0x13
   19dca:	8f 93       	push	r24
   19dcc:	8a 89       	ldd	r24, Y+18	; 0x12
   19dce:	8f 93       	push	r24
   19dd0:	89 89       	ldd	r24, Y+17	; 0x11
   19dd2:	8f 93       	push	r24
   19dd4:	88 89       	ldd	r24, Y+16	; 0x10
   19dd6:	8f 93       	push	r24
   19dd8:	82 e8       	ldi	r24, 0x82	; 130
   19dda:	92 e4       	ldi	r25, 0x42	; 66
   19ddc:	1f 92       	push	r1
   19dde:	9f 93       	push	r25
   19de0:	8f 93       	push	r24
   19de2:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   19de6:	8d b7       	in	r24, 0x3d	; 61
   19de8:	9e b7       	in	r25, 0x3e	; 62
   19dea:	86 96       	adiw	r24, 0x26	; 38
   19dec:	0f b6       	in	r0, 0x3f	; 63
   19dee:	f8 94       	cli
   19df0:	9e bf       	out	0x3e, r25	; 62
   19df2:	0f be       	out	0x3f, r0	; 63
   19df4:	8d bf       	out	0x3d, r24	; 61
   19df6:	8f 89       	ldd	r24, Y+23	; 0x17
   19df8:	8f 93       	push	r24
   19dfa:	8e 89       	ldd	r24, Y+22	; 0x16
   19dfc:	8f 93       	push	r24
   19dfe:	8d 89       	ldd	r24, Y+21	; 0x15
   19e00:	8f 93       	push	r24
   19e02:	8c 89       	ldd	r24, Y+20	; 0x14
   19e04:	8f 93       	push	r24
   19e06:	85 e6       	ldi	r24, 0x65	; 101
   19e08:	92 e4       	ldi	r25, 0x42	; 66
   19e0a:	1f 92       	push	r1
   19e0c:	9f 93       	push	r25
   19e0e:	8f 93       	push	r24
   19e10:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   19e14:	8b 8d       	ldd	r24, Y+27	; 0x1b
   19e16:	8f 93       	push	r24
   19e18:	8a 8d       	ldd	r24, Y+26	; 0x1a
   19e1a:	8f 93       	push	r24
   19e1c:	89 8d       	ldd	r24, Y+25	; 0x19
   19e1e:	8f 93       	push	r24
   19e20:	88 8d       	ldd	r24, Y+24	; 0x18
   19e22:	8f 93       	push	r24
   19e24:	88 e4       	ldi	r24, 0x48	; 72
   19e26:	92 e4       	ldi	r25, 0x42	; 66
   19e28:	1f 92       	push	r1
   19e2a:	9f 93       	push	r25
   19e2c:	8f 93       	push	r24
   19e2e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   19e32:	8c 8d       	ldd	r24, Y+28	; 0x1c
   19e34:	9d 8d       	ldd	r25, Y+29	; 0x1d
   19e36:	09 2e       	mov	r0, r25
   19e38:	00 0c       	add	r0, r0
   19e3a:	aa 0b       	sbc	r26, r26
   19e3c:	bb 0b       	sbc	r27, r27
   19e3e:	bf 93       	push	r27
   19e40:	af 93       	push	r26
   19e42:	9f 93       	push	r25
   19e44:	8f 93       	push	r24
   19e46:	8b e2       	ldi	r24, 0x2B	; 43
   19e48:	92 e4       	ldi	r25, 0x42	; 66
   19e4a:	1f 92       	push	r1
   19e4c:	9f 93       	push	r25
   19e4e:	8f 93       	push	r24
   19e50:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   19e54:	8e 8d       	ldd	r24, Y+30	; 0x1e
   19e56:	9f 8d       	ldd	r25, Y+31	; 0x1f
   19e58:	09 2e       	mov	r0, r25
   19e5a:	00 0c       	add	r0, r0
   19e5c:	aa 0b       	sbc	r26, r26
   19e5e:	bb 0b       	sbc	r27, r27
   19e60:	bf 93       	push	r27
   19e62:	af 93       	push	r26
   19e64:	9f 93       	push	r25
   19e66:	8f 93       	push	r24
   19e68:	8e e0       	ldi	r24, 0x0E	; 14
   19e6a:	92 e4       	ldi	r25, 0x42	; 66
   19e6c:	1f 92       	push	r1
   19e6e:	9f 93       	push	r25
   19e70:	8f 93       	push	r24
   19e72:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   19e76:	ce 01       	movw	r24, r28
   19e78:	86 96       	adiw	r24, 0x26	; 38
   19e7a:	9f 93       	push	r25
   19e7c:	8f 93       	push	r24
   19e7e:	84 ef       	ldi	r24, 0xF4	; 244
   19e80:	91 e4       	ldi	r25, 0x41	; 65
   19e82:	1f 92       	push	r1
   19e84:	9f 93       	push	r25
   19e86:	8f 93       	push	r24
   19e88:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   19e8c:	8d b7       	in	r24, 0x3d	; 61
   19e8e:	9e b7       	in	r25, 0x3e	; 62
   19e90:	81 96       	adiw	r24, 0x21	; 33
   19e92:	0f b6       	in	r0, 0x3f	; 63
   19e94:	f8 94       	cli
   19e96:	9e bf       	out	0x3e, r25	; 62
   19e98:	0f be       	out	0x3f, r0	; 63
   19e9a:	8d bf       	out	0x3d, r24	; 61
   19e9c:	8d a1       	ldd	r24, Y+37	; 0x25
   19e9e:	8f 93       	push	r24
   19ea0:	8c a1       	ldd	r24, Y+36	; 0x24
   19ea2:	8f 93       	push	r24
   19ea4:	88 ed       	ldi	r24, 0xD8	; 216
   19ea6:	91 e4       	ldi	r25, 0x41	; 65
   19ea8:	1f 92       	push	r1
   19eaa:	9f 93       	push	r25
   19eac:	8f 93       	push	r24
   19eae:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   19eb2:	88 a9       	ldd	r24, Y+48	; 0x30
   19eb4:	8f 93       	push	r24
   19eb6:	8f a5       	ldd	r24, Y+47	; 0x2f
   19eb8:	8f 93       	push	r24
   19eba:	8e a5       	ldd	r24, Y+46	; 0x2e
   19ebc:	8f 93       	push	r24
   19ebe:	8d a5       	ldd	r24, Y+45	; 0x2d
   19ec0:	8f 93       	push	r24
   19ec2:	8b eb       	ldi	r24, 0xBB	; 187
   19ec4:	91 e4       	ldi	r25, 0x41	; 65
   19ec6:	1f 92       	push	r1
   19ec8:	9f 93       	push	r25
   19eca:	8f 93       	push	r24
   19ecc:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   19ed0:	88 ad       	ldd	r24, Y+56	; 0x38
   19ed2:	8f 93       	push	r24
   19ed4:	8f a9       	ldd	r24, Y+55	; 0x37
   19ed6:	8f 93       	push	r24
   19ed8:	8e a9       	ldd	r24, Y+54	; 0x36
   19eda:	8f 93       	push	r24
   19edc:	8d a9       	ldd	r24, Y+53	; 0x35
   19ede:	8f 93       	push	r24
   19ee0:	8e e9       	ldi	r24, 0x9E	; 158
   19ee2:	91 e4       	ldi	r25, 0x41	; 65
   19ee4:	1f 92       	push	r1
   19ee6:	9f 93       	push	r25
   19ee8:	8f 93       	push	r24
   19eea:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   19eee:	8a a9       	ldd	r24, Y+50	; 0x32
   19ef0:	8f 93       	push	r24
   19ef2:	89 a9       	ldd	r24, Y+49	; 0x31
   19ef4:	8f 93       	push	r24
   19ef6:	82 e8       	ldi	r24, 0x82	; 130
   19ef8:	91 e4       	ldi	r25, 0x41	; 65
   19efa:	1f 92       	push	r1
   19efc:	9f 93       	push	r25
   19efe:	8f 93       	push	r24
   19f00:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   19f04:	8a ad       	ldd	r24, Y+58	; 0x3a
   19f06:	8f 93       	push	r24
   19f08:	89 ad       	ldd	r24, Y+57	; 0x39
   19f0a:	8f 93       	push	r24
   19f0c:	86 e6       	ldi	r24, 0x66	; 102
   19f0e:	91 e4       	ldi	r25, 0x41	; 65
   19f10:	1f 92       	push	r1
   19f12:	9f 93       	push	r25
   19f14:	8f 93       	push	r24
   19f16:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   19f1a:	ce 01       	movw	r24, r28
   19f1c:	87 5b       	subi	r24, 0xB7	; 183
   19f1e:	9f 4f       	sbci	r25, 0xFF	; 255
   19f20:	d3 de       	rcall	.-602    	; 0x19cc8 <lif_lifbcd2timestr>
   19f22:	9f 93       	push	r25
   19f24:	8f 93       	push	r24
   19f26:	8c e4       	ldi	r24, 0x4C	; 76
   19f28:	91 e4       	ldi	r25, 0x41	; 65
   19f2a:	1f 92       	push	r1
   19f2c:	9f 93       	push	r25
   19f2e:	8f 93       	push	r24
   19f30:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   19f34:	8d b7       	in	r24, 0x3d	; 61
   19f36:	9e b7       	in	r25, 0x3e	; 62
   19f38:	82 96       	adiw	r24, 0x22	; 34
   19f3a:	0f b6       	in	r0, 0x3f	; 63
   19f3c:	f8 94       	cli
   19f3e:	9e bf       	out	0x3e, r25	; 62
   19f40:	0f be       	out	0x3f, r0	; 63
   19f42:	8d bf       	out	0x3d, r24	; 61
   19f44:	ce 01       	movw	r24, r28
   19f46:	81 5b       	subi	r24, 0xB1	; 177
   19f48:	9f 4f       	sbci	r25, 0xFF	; 255
   19f4a:	9f 93       	push	r25
   19f4c:	8f 93       	push	r24
   19f4e:	82 e3       	ldi	r24, 0x32	; 50
   19f50:	91 e4       	ldi	r25, 0x41	; 65
   19f52:	1f 92       	push	r1
   19f54:	9f 93       	push	r25
   19f56:	8f 93       	push	r24
   19f58:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   19f5c:	fe 01       	movw	r30, r28
   19f5e:	e6 5a       	subi	r30, 0xA6	; 166
   19f60:	ff 4f       	sbci	r31, 0xFF	; 255
   19f62:	81 81       	ldd	r24, Z+1	; 0x01
   19f64:	8f 93       	push	r24
   19f66:	80 81       	ld	r24, Z
   19f68:	8f 93       	push	r24
   19f6a:	86 e1       	ldi	r24, 0x16	; 22
   19f6c:	91 e4       	ldi	r25, 0x41	; 65
   19f6e:	1f 92       	push	r1
   19f70:	9f 93       	push	r25
   19f72:	8f 93       	push	r24
   19f74:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   19f78:	fe 01       	movw	r30, r28
   19f7a:	e6 59       	subi	r30, 0x96	; 150
   19f7c:	ff 4f       	sbci	r31, 0xFF	; 255
   19f7e:	81 81       	ldd	r24, Z+1	; 0x01
   19f80:	8f 93       	push	r24
   19f82:	80 81       	ld	r24, Z
   19f84:	8f 93       	push	r24
   19f86:	8a ef       	ldi	r24, 0xFA	; 250
   19f88:	90 e4       	ldi	r25, 0x40	; 64
   19f8a:	1f 92       	push	r1
   19f8c:	9f 93       	push	r25
   19f8e:	8f 93       	push	r24
   19f90:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   19f94:	fe 01       	movw	r30, r28
   19f96:	e4 5a       	subi	r30, 0xA4	; 164
   19f98:	ff 4f       	sbci	r31, 0xFF	; 255
   19f9a:	83 81       	ldd	r24, Z+3	; 0x03
   19f9c:	8f 93       	push	r24
   19f9e:	82 81       	ldd	r24, Z+2	; 0x02
   19fa0:	8f 93       	push	r24
   19fa2:	81 81       	ldd	r24, Z+1	; 0x01
   19fa4:	8f 93       	push	r24
   19fa6:	80 81       	ld	r24, Z
   19fa8:	8f 93       	push	r24
   19faa:	8d ed       	ldi	r24, 0xDD	; 221
   19fac:	90 e4       	ldi	r25, 0x40	; 64
   19fae:	1f 92       	push	r1
   19fb0:	9f 93       	push	r25
   19fb2:	8f 93       	push	r24
   19fb4:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   19fb8:	fe 01       	movw	r30, r28
   19fba:	e0 5a       	subi	r30, 0xA0	; 160
   19fbc:	ff 4f       	sbci	r31, 0xFF	; 255
   19fbe:	83 81       	ldd	r24, Z+3	; 0x03
   19fc0:	8f 93       	push	r24
   19fc2:	82 81       	ldd	r24, Z+2	; 0x02
   19fc4:	8f 93       	push	r24
   19fc6:	81 81       	ldd	r24, Z+1	; 0x01
   19fc8:	8f 93       	push	r24
   19fca:	80 81       	ld	r24, Z
   19fcc:	8f 93       	push	r24
   19fce:	80 ec       	ldi	r24, 0xC0	; 192
   19fd0:	90 e4       	ldi	r25, 0x40	; 64
   19fd2:	1f 92       	push	r1
   19fd4:	9f 93       	push	r25
   19fd6:	8f 93       	push	r24
   19fd8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   19fdc:	fe 01       	movw	r30, r28
   19fde:	e4 59       	subi	r30, 0x94	; 148
   19fe0:	ff 4f       	sbci	r31, 0xFF	; 255
   19fe2:	80 81       	ld	r24, Z
   19fe4:	91 81       	ldd	r25, Z+1	; 0x01
   19fe6:	1f 92       	push	r1
   19fe8:	1f 92       	push	r1
   19fea:	9f 93       	push	r25
   19fec:	8f 93       	push	r24
   19fee:	83 ea       	ldi	r24, 0xA3	; 163
   19ff0:	90 e4       	ldi	r25, 0x40	; 64
   19ff2:	1f 92       	push	r1
   19ff4:	9f 93       	push	r25
   19ff6:	8f 93       	push	r24
   19ff8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   19ffc:	8d b7       	in	r24, 0x3d	; 61
   19ffe:	9e b7       	in	r25, 0x3e	; 62
   1a000:	84 96       	adiw	r24, 0x24	; 36
   1a002:	0f b6       	in	r0, 0x3f	; 63
   1a004:	f8 94       	cli
   1a006:	9e bf       	out	0x3e, r25	; 62
   1a008:	0f be       	out	0x3f, r0	; 63
   1a00a:	8d bf       	out	0x3d, r24	; 61
   1a00c:	fe 01       	movw	r30, r28
   1a00e:	e2 59       	subi	r30, 0x92	; 146
   1a010:	ff 4f       	sbci	r31, 0xFF	; 255
   1a012:	81 81       	ldd	r24, Z+1	; 0x01
   1a014:	8f 93       	push	r24
   1a016:	80 81       	ld	r24, Z
   1a018:	8f 93       	push	r24
   1a01a:	87 e8       	ldi	r24, 0x87	; 135
   1a01c:	90 e4       	ldi	r25, 0x40	; 64
   1a01e:	1f 92       	push	r1
   1a020:	9f 93       	push	r25
   1a022:	8f 93       	push	r24
   1a024:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1a028:	ce 01       	movw	r24, r28
   1a02a:	8c 59       	subi	r24, 0x9C	; 156
   1a02c:	9f 4f       	sbci	r25, 0xFF	; 255
   1a02e:	4c de       	rcall	.-872    	; 0x19cc8 <lif_lifbcd2timestr>
   1a030:	9f 93       	push	r25
   1a032:	8f 93       	push	r24
   1a034:	8d e6       	ldi	r24, 0x6D	; 109
   1a036:	90 e4       	ldi	r25, 0x40	; 64
   1a038:	1f 92       	push	r1
   1a03a:	9f 93       	push	r25
   1a03c:	8f 93       	push	r24
   1a03e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1a042:	8b e6       	ldi	r24, 0x6B	; 107
   1a044:	90 e4       	ldi	r25, 0x40	; 64
   1a046:	1f 92       	push	r1
   1a048:	9f 93       	push	r25
   1a04a:	8f 93       	push	r24
   1a04c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1a050:	8d b7       	in	r24, 0x3d	; 61
   1a052:	9e b7       	in	r25, 0x3e	; 62
   1a054:	0d 96       	adiw	r24, 0x0d	; 13
   1a056:	0f b6       	in	r0, 0x3f	; 63
   1a058:	f8 94       	cli
   1a05a:	9e bf       	out	0x3e, r25	; 62
   1a05c:	0f be       	out	0x3f, r0	; 63
   1a05e:	8d bf       	out	0x3d, r24	; 61
   1a060:	df 91       	pop	r29
   1a062:	cf 91       	pop	r28
   1a064:	08 95       	ret

0001a066 <lif_check_volume>:
   1a066:	0f 93       	push	r16
   1a068:	1f 93       	push	r17
   1a06a:	cf 93       	push	r28
   1a06c:	df 93       	push	r29
   1a06e:	ec 01       	movw	r28, r24
   1a070:	86 96       	adiw	r24, 0x26	; 38
   1a072:	fb da       	rcall	.-2570   	; 0x1966a <lif_checkname>
   1a074:	89 2b       	or	r24, r25
   1a076:	79 f4       	brne	.+30     	; 0x1a096 <lif_check_volume+0x30>
   1a078:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a07c:	80 ff       	sbrs	r24, 0
   1a07e:	0e c0       	rjmp	.+28     	; 0x1a09c <lif_check_volume+0x36>
   1a080:	8c e4       	ldi	r24, 0x4C	; 76
   1a082:	90 e4       	ldi	r25, 0x40	; 64
   1a084:	1f 92       	push	r1
   1a086:	9f 93       	push	r25
   1a088:	8f 93       	push	r24
   1a08a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1a08e:	0f 90       	pop	r0
   1a090:	0f 90       	pop	r0
   1a092:	0f 90       	pop	r0
   1a094:	03 c0       	rjmp	.+6      	; 0x1a09c <lif_check_volume+0x36>
   1a096:	81 e0       	ldi	r24, 0x01	; 1
   1a098:	90 e0       	ldi	r25, 0x00	; 0
   1a09a:	02 c0       	rjmp	.+4      	; 0x1a0a0 <lif_check_volume+0x3a>
   1a09c:	80 e0       	ldi	r24, 0x00	; 0
   1a09e:	90 e0       	ldi	r25, 0x00	; 0
   1a0a0:	29 a9       	ldd	r18, Y+49	; 0x31
   1a0a2:	3a a9       	ldd	r19, Y+50	; 0x32
   1a0a4:	21 15       	cp	r18, r1
   1a0a6:	40 e1       	ldi	r20, 0x10	; 16
   1a0a8:	34 07       	cpc	r19, r20
   1a0aa:	a1 f0       	breq	.+40     	; 0x1a0d4 <lif_check_volume+0x6e>
   1a0ac:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a0b0:	80 ff       	sbrs	r24, 0
   1a0b2:	0e c0       	rjmp	.+28     	; 0x1a0d0 <lif_check_volume+0x6a>
   1a0b4:	3f 93       	push	r19
   1a0b6:	2f 93       	push	r18
   1a0b8:	83 e1       	ldi	r24, 0x13	; 19
   1a0ba:	90 e4       	ldi	r25, 0x40	; 64
   1a0bc:	1f 92       	push	r1
   1a0be:	9f 93       	push	r25
   1a0c0:	8f 93       	push	r24
   1a0c2:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1a0c6:	0f 90       	pop	r0
   1a0c8:	0f 90       	pop	r0
   1a0ca:	0f 90       	pop	r0
   1a0cc:	0f 90       	pop	r0
   1a0ce:	0f 90       	pop	r0
   1a0d0:	80 e0       	ldi	r24, 0x00	; 0
   1a0d2:	90 e0       	ldi	r25, 0x00	; 0
   1a0d4:	29 ad       	ldd	r18, Y+57	; 0x39
   1a0d6:	3a ad       	ldd	r19, Y+58	; 0x3a
   1a0d8:	22 30       	cpi	r18, 0x02	; 2
   1a0da:	31 05       	cpc	r19, r1
   1a0dc:	a0 f0       	brcs	.+40     	; 0x1a106 <lif_check_volume+0xa0>
   1a0de:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a0e2:	80 ff       	sbrs	r24, 0
   1a0e4:	0e c0       	rjmp	.+28     	; 0x1a102 <lif_check_volume+0x9c>
   1a0e6:	3f 93       	push	r19
   1a0e8:	2f 93       	push	r18
   1a0ea:	8b ef       	ldi	r24, 0xFB	; 251
   1a0ec:	9f e3       	ldi	r25, 0x3F	; 63
   1a0ee:	1f 92       	push	r1
   1a0f0:	9f 93       	push	r25
   1a0f2:	8f 93       	push	r24
   1a0f4:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1a0f8:	0f 90       	pop	r0
   1a0fa:	0f 90       	pop	r0
   1a0fc:	0f 90       	pop	r0
   1a0fe:	0f 90       	pop	r0
   1a100:	0f 90       	pop	r0
   1a102:	80 e0       	ldi	r24, 0x00	; 0
   1a104:	90 e0       	ldi	r25, 0x00	; 0
   1a106:	2b a9       	ldd	r18, Y+51	; 0x33
   1a108:	3c a9       	ldd	r19, Y+52	; 0x34
   1a10a:	23 2b       	or	r18, r19
   1a10c:	81 f0       	breq	.+32     	; 0x1a12e <lif_check_volume+0xc8>
   1a10e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a112:	80 ff       	sbrs	r24, 0
   1a114:	0a c0       	rjmp	.+20     	; 0x1a12a <lif_check_volume+0xc4>
   1a116:	82 ec       	ldi	r24, 0xC2	; 194
   1a118:	9f e3       	ldi	r25, 0x3F	; 63
   1a11a:	1f 92       	push	r1
   1a11c:	9f 93       	push	r25
   1a11e:	8f 93       	push	r24
   1a120:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1a124:	0f 90       	pop	r0
   1a126:	0f 90       	pop	r0
   1a128:	0f 90       	pop	r0
   1a12a:	80 e0       	ldi	r24, 0x00	; 0
   1a12c:	90 e0       	ldi	r25, 0x00	; 0
   1a12e:	2b ad       	ldd	r18, Y+59	; 0x3b
   1a130:	3c ad       	ldd	r19, Y+60	; 0x3c
   1a132:	23 2b       	or	r18, r19
   1a134:	81 f0       	breq	.+32     	; 0x1a156 <lif_check_volume+0xf0>
   1a136:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a13a:	80 ff       	sbrs	r24, 0
   1a13c:	0a c0       	rjmp	.+20     	; 0x1a152 <lif_check_volume+0xec>
   1a13e:	89 e8       	ldi	r24, 0x89	; 137
   1a140:	9f e3       	ldi	r25, 0x3F	; 63
   1a142:	1f 92       	push	r1
   1a144:	9f 93       	push	r25
   1a146:	8f 93       	push	r24
   1a148:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1a14c:	0f 90       	pop	r0
   1a14e:	0f 90       	pop	r0
   1a150:	0f 90       	pop	r0
   1a152:	80 e0       	ldi	r24, 0x00	; 0
   1a154:	90 e0       	ldi	r25, 0x00	; 0
   1a156:	4d a5       	ldd	r20, Y+45	; 0x2d
   1a158:	5e a5       	ldd	r21, Y+46	; 0x2e
   1a15a:	6f a5       	ldd	r22, Y+47	; 0x2f
   1a15c:	78 a9       	ldd	r23, Y+48	; 0x30
   1a15e:	45 2b       	or	r20, r21
   1a160:	46 2b       	or	r20, r22
   1a162:	47 2b       	or	r20, r23
   1a164:	c9 f4       	brne	.+50     	; 0x1a198 <lif_check_volume+0x132>
   1a166:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a16a:	80 ff       	sbrs	r24, 0
   1a16c:	13 c0       	rjmp	.+38     	; 0x1a194 <lif_check_volume+0x12e>
   1a16e:	1f 92       	push	r1
   1a170:	1f 92       	push	r1
   1a172:	1f 92       	push	r1
   1a174:	1f 92       	push	r1
   1a176:	84 e6       	ldi	r24, 0x64	; 100
   1a178:	9f e3       	ldi	r25, 0x3F	; 63
   1a17a:	1f 92       	push	r1
   1a17c:	9f 93       	push	r25
   1a17e:	8f 93       	push	r24
   1a180:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1a184:	8d b7       	in	r24, 0x3d	; 61
   1a186:	9e b7       	in	r25, 0x3e	; 62
   1a188:	07 96       	adiw	r24, 0x07	; 7
   1a18a:	0f b6       	in	r0, 0x3f	; 63
   1a18c:	f8 94       	cli
   1a18e:	9e bf       	out	0x3e, r25	; 62
   1a190:	0f be       	out	0x3f, r0	; 63
   1a192:	8d bf       	out	0x3d, r24	; 61
   1a194:	80 e0       	ldi	r24, 0x00	; 0
   1a196:	90 e0       	ldi	r25, 0x00	; 0
   1a198:	4d a9       	ldd	r20, Y+53	; 0x35
   1a19a:	5e a9       	ldd	r21, Y+54	; 0x36
   1a19c:	6f a9       	ldd	r22, Y+55	; 0x37
   1a19e:	78 ad       	ldd	r23, Y+56	; 0x38
   1a1a0:	45 2b       	or	r20, r21
   1a1a2:	46 2b       	or	r20, r22
   1a1a4:	47 2b       	or	r20, r23
   1a1a6:	81 f4       	brne	.+32     	; 0x1a1c8 <lif_check_volume+0x162>
   1a1a8:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a1ac:	80 ff       	sbrs	r24, 0
   1a1ae:	0a c0       	rjmp	.+20     	; 0x1a1c4 <lif_check_volume+0x15e>
   1a1b0:	85 e3       	ldi	r24, 0x35	; 53
   1a1b2:	9f e3       	ldi	r25, 0x3F	; 63
   1a1b4:	1f 92       	push	r1
   1a1b6:	9f 93       	push	r25
   1a1b8:	8f 93       	push	r24
   1a1ba:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1a1be:	0f 90       	pop	r0
   1a1c0:	0f 90       	pop	r0
   1a1c2:	0f 90       	pop	r0
   1a1c4:	80 e0       	ldi	r24, 0x00	; 0
   1a1c6:	90 e0       	ldi	r25, 0x00	; 0
   1a1c8:	0d a5       	ldd	r16, Y+45	; 0x2d
   1a1ca:	1e a5       	ldd	r17, Y+46	; 0x2e
   1a1cc:	2f a5       	ldd	r18, Y+47	; 0x2f
   1a1ce:	38 a9       	ldd	r19, Y+48	; 0x30
   1a1d0:	4d a9       	ldd	r20, Y+53	; 0x35
   1a1d2:	5e a9       	ldd	r21, Y+54	; 0x36
   1a1d4:	6f a9       	ldd	r22, Y+55	; 0x37
   1a1d6:	78 ad       	ldd	r23, Y+56	; 0x38
   1a1d8:	40 0f       	add	r20, r16
   1a1da:	51 1f       	adc	r21, r17
   1a1dc:	62 1f       	adc	r22, r18
   1a1de:	73 1f       	adc	r23, r19
   1a1e0:	0c 81       	ldd	r16, Y+4	; 0x04
   1a1e2:	1d 81       	ldd	r17, Y+5	; 0x05
   1a1e4:	2e 81       	ldd	r18, Y+6	; 0x06
   1a1e6:	3f 81       	ldd	r19, Y+7	; 0x07
   1a1e8:	04 17       	cp	r16, r20
   1a1ea:	15 07       	cpc	r17, r21
   1a1ec:	26 07       	cpc	r18, r22
   1a1ee:	37 07       	cpc	r19, r23
   1a1f0:	80 f4       	brcc	.+32     	; 0x1a212 <lif_check_volume+0x1ac>
   1a1f2:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a1f6:	80 ff       	sbrs	r24, 0
   1a1f8:	0a c0       	rjmp	.+20     	; 0x1a20e <lif_check_volume+0x1a8>
   1a1fa:	89 e0       	ldi	r24, 0x09	; 9
   1a1fc:	9f e3       	ldi	r25, 0x3F	; 63
   1a1fe:	1f 92       	push	r1
   1a200:	9f 93       	push	r25
   1a202:	8f 93       	push	r24
   1a204:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1a208:	0f 90       	pop	r0
   1a20a:	0f 90       	pop	r0
   1a20c:	0f 90       	pop	r0
   1a20e:	80 e0       	ldi	r24, 0x00	; 0
   1a210:	90 e0       	ldi	r25, 0x00	; 0
   1a212:	df 91       	pop	r29
   1a214:	cf 91       	pop	r28
   1a216:	1f 91       	pop	r17
   1a218:	0f 91       	pop	r16
   1a21a:	08 95       	ret

0001a21c <lif_check_dir>:
   1a21c:	a4 e0       	ldi	r26, 0x04	; 4
   1a21e:	b0 e0       	ldi	r27, 0x00	; 0
   1a220:	e4 e1       	ldi	r30, 0x14	; 20
   1a222:	f1 ed       	ldi	r31, 0xD1	; 209
   1a224:	0c 94 34 ec 	jmp	0x1d868	; 0x1d868 <__prologue_saves__>
   1a228:	6c 01       	movw	r12, r24
   1a22a:	2a e5       	ldi	r18, 0x5A	; 90
   1a22c:	c2 0e       	add	r12, r18
   1a22e:	d1 1c       	adc	r13, r1
   1a230:	f6 01       	movw	r30, r12
   1a232:	20 81       	ld	r18, Z
   1a234:	31 81       	ldd	r19, Z+1	; 0x01
   1a236:	21 50       	subi	r18, 0x01	; 1
   1a238:	31 09       	sbc	r19, r1
   1a23a:	2e 3f       	cpi	r18, 0xFE	; 254
   1a23c:	3f 4f       	sbci	r19, 0xFF	; 255
   1a23e:	08 f0       	brcs	.+2      	; 0x1a242 <lif_check_dir+0x26>
   1a240:	98 c1       	rjmp	.+816    	; 0x1a572 <lif_check_dir+0x356>
   1a242:	9c 83       	std	Y+4, r25	; 0x04
   1a244:	8b 83       	std	Y+3, r24	; 0x03
   1a246:	8c 01       	movw	r16, r24
   1a248:	01 5b       	subi	r16, 0xB1	; 177
   1a24a:	1f 4f       	sbci	r17, 0xFF	; 255
   1a24c:	c8 01       	movw	r24, r16
   1a24e:	0d da       	rcall	.-3046   	; 0x1966a <lif_checkname>
   1a250:	89 2b       	or	r24, r25
   1a252:	99 f4       	brne	.+38     	; 0x1a27a <lif_check_dir+0x5e>
   1a254:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a258:	80 ff       	sbrs	r24, 0
   1a25a:	12 c0       	rjmp	.+36     	; 0x1a280 <lif_check_dir+0x64>
   1a25c:	1f 93       	push	r17
   1a25e:	0f 93       	push	r16
   1a260:	88 ee       	ldi	r24, 0xE8	; 232
   1a262:	9e e3       	ldi	r25, 0x3E	; 62
   1a264:	1f 92       	push	r1
   1a266:	9f 93       	push	r25
   1a268:	8f 93       	push	r24
   1a26a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1a26e:	0f 90       	pop	r0
   1a270:	0f 90       	pop	r0
   1a272:	0f 90       	pop	r0
   1a274:	0f 90       	pop	r0
   1a276:	0f 90       	pop	r0
   1a278:	03 c0       	rjmp	.+6      	; 0x1a280 <lif_check_dir+0x64>
   1a27a:	ee 24       	eor	r14, r14
   1a27c:	e3 94       	inc	r14
   1a27e:	01 c0       	rjmp	.+2      	; 0x1a282 <lif_check_dir+0x66>
   1a280:	e1 2c       	mov	r14, r1
   1a282:	f1 2c       	mov	r15, r1
   1a284:	eb 81       	ldd	r30, Y+3	; 0x03
   1a286:	fc 81       	ldd	r31, Y+4	; 0x04
   1a288:	84 85       	ldd	r24, Z+12	; 0x0c
   1a28a:	95 85       	ldd	r25, Z+13	; 0x0d
   1a28c:	a6 85       	ldd	r26, Z+14	; 0x0e
   1a28e:	b7 85       	ldd	r27, Z+15	; 0x0f
   1a290:	00 97       	sbiw	r24, 0x00	; 0
   1a292:	a1 05       	cpc	r26, r1
   1a294:	b1 05       	cpc	r27, r1
   1a296:	39 f1       	breq	.+78     	; 0x1a2e6 <lif_check_dir+0xca>
   1a298:	e4 5a       	subi	r30, 0xA4	; 164
   1a29a:	ff 4f       	sbci	r31, 0xFF	; 255
   1a29c:	40 81       	ld	r20, Z
   1a29e:	51 81       	ldd	r21, Z+1	; 0x01
   1a2a0:	62 81       	ldd	r22, Z+2	; 0x02
   1a2a2:	73 81       	ldd	r23, Z+3	; 0x03
   1a2a4:	48 17       	cp	r20, r24
   1a2a6:	59 07       	cpc	r21, r25
   1a2a8:	6a 07       	cpc	r22, r26
   1a2aa:	7b 07       	cpc	r23, r27
   1a2ac:	e0 f4       	brcc	.+56     	; 0x1a2e6 <lif_check_dir+0xca>
   1a2ae:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1a2b2:	20 ff       	sbrs	r18, 0
   1a2b4:	16 c0       	rjmp	.+44     	; 0x1a2e2 <lif_check_dir+0xc6>
   1a2b6:	bf 93       	push	r27
   1a2b8:	af 93       	push	r26
   1a2ba:	9f 93       	push	r25
   1a2bc:	8f 93       	push	r24
   1a2be:	7f 93       	push	r23
   1a2c0:	6f 93       	push	r22
   1a2c2:	5f 93       	push	r21
   1a2c4:	4f 93       	push	r20
   1a2c6:	1f 93       	push	r17
   1a2c8:	0f 93       	push	r16
   1a2ca:	84 ea       	ldi	r24, 0xA4	; 164
   1a2cc:	9e e3       	ldi	r25, 0x3E	; 62
   1a2ce:	1f 92       	push	r1
   1a2d0:	9f 93       	push	r25
   1a2d2:	8f 93       	push	r24
   1a2d4:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1a2d8:	0f b6       	in	r0, 0x3f	; 63
   1a2da:	f8 94       	cli
   1a2dc:	de bf       	out	0x3e, r29	; 62
   1a2de:	0f be       	out	0x3f, r0	; 63
   1a2e0:	cd bf       	out	0x3d, r28	; 61
   1a2e2:	e1 2c       	mov	r14, r1
   1a2e4:	f1 2c       	mov	r15, r1
   1a2e6:	eb 81       	ldd	r30, Y+3	; 0x03
   1a2e8:	fc 81       	ldd	r31, Y+4	; 0x04
   1a2ea:	44 81       	ldd	r20, Z+4	; 0x04
   1a2ec:	55 81       	ldd	r21, Z+5	; 0x05
   1a2ee:	66 81       	ldd	r22, Z+6	; 0x06
   1a2f0:	77 81       	ldd	r23, Z+7	; 0x07
   1a2f2:	41 15       	cp	r20, r1
   1a2f4:	51 05       	cpc	r21, r1
   1a2f6:	61 05       	cpc	r22, r1
   1a2f8:	71 05       	cpc	r23, r1
   1a2fa:	99 f1       	breq	.+102    	; 0x1a362 <lif_check_dir+0x146>
   1a2fc:	e4 5a       	subi	r30, 0xA4	; 164
   1a2fe:	ff 4f       	sbci	r31, 0xFF	; 255
   1a300:	80 80       	ld	r8, Z
   1a302:	91 80       	ldd	r9, Z+1	; 0x01
   1a304:	a2 80       	ldd	r10, Z+2	; 0x02
   1a306:	b3 80       	ldd	r11, Z+3	; 0x03
   1a308:	eb 81       	ldd	r30, Y+3	; 0x03
   1a30a:	fc 81       	ldd	r31, Y+4	; 0x04
   1a30c:	e0 5a       	subi	r30, 0xA0	; 160
   1a30e:	ff 4f       	sbci	r31, 0xFF	; 255
   1a310:	80 81       	ld	r24, Z
   1a312:	91 81       	ldd	r25, Z+1	; 0x01
   1a314:	a2 81       	ldd	r26, Z+2	; 0x02
   1a316:	b3 81       	ldd	r27, Z+3	; 0x03
   1a318:	88 0d       	add	r24, r8
   1a31a:	99 1d       	adc	r25, r9
   1a31c:	aa 1d       	adc	r26, r10
   1a31e:	bb 1d       	adc	r27, r11
   1a320:	48 17       	cp	r20, r24
   1a322:	59 07       	cpc	r21, r25
   1a324:	6a 07       	cpc	r22, r26
   1a326:	7b 07       	cpc	r23, r27
   1a328:	e0 f4       	brcc	.+56     	; 0x1a362 <lif_check_dir+0x146>
   1a32a:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1a32e:	20 ff       	sbrs	r18, 0
   1a330:	16 c0       	rjmp	.+44     	; 0x1a35e <lif_check_dir+0x142>
   1a332:	7f 93       	push	r23
   1a334:	6f 93       	push	r22
   1a336:	5f 93       	push	r21
   1a338:	4f 93       	push	r20
   1a33a:	bf 93       	push	r27
   1a33c:	af 93       	push	r26
   1a33e:	9f 93       	push	r25
   1a340:	8f 93       	push	r24
   1a342:	1f 93       	push	r17
   1a344:	0f 93       	push	r16
   1a346:	83 e6       	ldi	r24, 0x63	; 99
   1a348:	9e e3       	ldi	r25, 0x3E	; 62
   1a34a:	1f 92       	push	r1
   1a34c:	9f 93       	push	r25
   1a34e:	8f 93       	push	r24
   1a350:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1a354:	0f b6       	in	r0, 0x3f	; 63
   1a356:	f8 94       	cli
   1a358:	de bf       	out	0x3e, r29	; 62
   1a35a:	0f be       	out	0x3f, r0	; 63
   1a35c:	cd bf       	out	0x3d, r28	; 61
   1a35e:	e1 2c       	mov	r14, r1
   1a360:	f1 2c       	mov	r15, r1
   1a362:	eb 81       	ldd	r30, Y+3	; 0x03
   1a364:	fc 81       	ldd	r31, Y+4	; 0x04
   1a366:	e6 59       	subi	r30, 0x96	; 150
   1a368:	ff 4f       	sbci	r31, 0xFF	; 255
   1a36a:	80 81       	ld	r24, Z
   1a36c:	91 81       	ldd	r25, Z+1	; 0x01
   1a36e:	81 30       	cpi	r24, 0x01	; 1
   1a370:	30 e8       	ldi	r19, 0x80	; 128
   1a372:	93 07       	cpc	r25, r19
   1a374:	b1 f0       	breq	.+44     	; 0x1a3a2 <lif_check_dir+0x186>
   1a376:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1a37a:	20 ff       	sbrs	r18, 0
   1a37c:	10 c0       	rjmp	.+32     	; 0x1a39e <lif_check_dir+0x182>
   1a37e:	9f 93       	push	r25
   1a380:	8f 93       	push	r24
   1a382:	1f 93       	push	r17
   1a384:	0f 93       	push	r16
   1a386:	85 e3       	ldi	r24, 0x35	; 53
   1a388:	9e e3       	ldi	r25, 0x3E	; 62
   1a38a:	1f 92       	push	r1
   1a38c:	9f 93       	push	r25
   1a38e:	8f 93       	push	r24
   1a390:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1a394:	0f b6       	in	r0, 0x3f	; 63
   1a396:	f8 94       	cli
   1a398:	de bf       	out	0x3e, r29	; 62
   1a39a:	0f be       	out	0x3f, r0	; 63
   1a39c:	cd bf       	out	0x3d, r28	; 61
   1a39e:	e1 2c       	mov	r14, r1
   1a3a0:	f1 2c       	mov	r15, r1
   1a3a2:	f6 01       	movw	r30, r12
   1a3a4:	80 81       	ld	r24, Z
   1a3a6:	91 81       	ldd	r25, Z+1	; 0x01
   1a3a8:	8c 7f       	andi	r24, 0xFC	; 252
   1a3aa:	80 31       	cpi	r24, 0x10	; 16
   1a3ac:	90 4e       	sbci	r25, 0xE0	; 224
   1a3ae:	09 f0       	breq	.+2      	; 0x1a3b2 <lif_check_dir+0x196>
   1a3b0:	b3 c0       	rjmp	.+358    	; 0x1a518 <lif_check_dir+0x2fc>
   1a3b2:	cb 80       	ldd	r12, Y+3	; 0x03
   1a3b4:	dc 80       	ldd	r13, Y+4	; 0x04
   1a3b6:	2c e6       	ldi	r18, 0x6C	; 108
   1a3b8:	c2 0e       	add	r12, r18
   1a3ba:	d1 1c       	adc	r13, r1
   1a3bc:	f6 01       	movw	r30, r12
   1a3be:	20 81       	ld	r18, Z
   1a3c0:	31 81       	ldd	r19, Z+1	; 0x01
   1a3c2:	21 15       	cp	r18, r1
   1a3c4:	31 05       	cpc	r19, r1
   1a3c6:	09 f4       	brne	.+2      	; 0x1a3ca <lif_check_dir+0x1ae>
   1a3c8:	a7 c0       	rjmp	.+334    	; 0x1a518 <lif_check_dir+0x2fc>
   1a3ca:	49 01       	movw	r8, r18
   1a3cc:	a1 2c       	mov	r10, r1
   1a3ce:	b1 2c       	mov	r11, r1
   1a3d0:	bb 27       	eor	r27, r27
   1a3d2:	ab 2d       	mov	r26, r11
   1a3d4:	9a 2d       	mov	r25, r10
   1a3d6:	89 2d       	mov	r24, r9
   1a3d8:	33 27       	eor	r19, r19
   1a3da:	2c 01       	movw	r4, r24
   1a3dc:	3d 01       	movw	r6, r26
   1a3de:	21 15       	cp	r18, r1
   1a3e0:	31 05       	cpc	r19, r1
   1a3e2:	29 f0       	breq	.+10     	; 0x1a3ee <lif_check_dir+0x1d2>
   1a3e4:	ff ef       	ldi	r31, 0xFF	; 255
   1a3e6:	4f 1a       	sub	r4, r31
   1a3e8:	5f 0a       	sbc	r5, r31
   1a3ea:	6f 0a       	sbc	r6, r31
   1a3ec:	7f 0a       	sbc	r7, r31
   1a3ee:	2b 80       	ldd	r2, Y+3	; 0x03
   1a3f0:	3c 80       	ldd	r3, Y+4	; 0x04
   1a3f2:	40 e6       	ldi	r20, 0x60	; 96
   1a3f4:	24 0e       	add	r2, r20
   1a3f6:	31 1c       	adc	r3, r1
   1a3f8:	f1 01       	movw	r30, r2
   1a3fa:	40 81       	ld	r20, Z
   1a3fc:	51 81       	ldd	r21, Z+1	; 0x01
   1a3fe:	62 81       	ldd	r22, Z+2	; 0x02
   1a400:	73 81       	ldd	r23, Z+3	; 0x03
   1a402:	44 15       	cp	r20, r4
   1a404:	55 05       	cpc	r21, r5
   1a406:	66 05       	cpc	r22, r6
   1a408:	77 05       	cpc	r23, r7
   1a40a:	28 f5       	brcc	.+74     	; 0x1a456 <lif_check_dir+0x23a>
   1a40c:	e0 91 bd 01 	lds	r30, 0x01BD	; 0x8001bd <debuglevel>
   1a410:	e0 ff       	sbrs	r30, 0
   1a412:	1f c0       	rjmp	.+62     	; 0x1a452 <lif_check_dir+0x236>
   1a414:	23 2b       	or	r18, r19
   1a416:	19 f0       	breq	.+6      	; 0x1a41e <lif_check_dir+0x202>
   1a418:	01 96       	adiw	r24, 0x01	; 1
   1a41a:	a1 1d       	adc	r26, r1
   1a41c:	b1 1d       	adc	r27, r1
   1a41e:	7f 93       	push	r23
   1a420:	6f 93       	push	r22
   1a422:	5f 93       	push	r21
   1a424:	4f 93       	push	r20
   1a426:	bf 93       	push	r27
   1a428:	af 93       	push	r26
   1a42a:	9f 93       	push	r25
   1a42c:	8f 93       	push	r24
   1a42e:	1f 92       	push	r1
   1a430:	1f 92       	push	r1
   1a432:	9f 92       	push	r9
   1a434:	8f 92       	push	r8
   1a436:	1f 93       	push	r17
   1a438:	0f 93       	push	r16
   1a43a:	8a ee       	ldi	r24, 0xEA	; 234
   1a43c:	9d e3       	ldi	r25, 0x3D	; 61
   1a43e:	1f 92       	push	r1
   1a440:	9f 93       	push	r25
   1a442:	8f 93       	push	r24
   1a444:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1a448:	0f b6       	in	r0, 0x3f	; 63
   1a44a:	f8 94       	cli
   1a44c:	de bf       	out	0x3e, r29	; 62
   1a44e:	0f be       	out	0x3f, r0	; 63
   1a450:	cd bf       	out	0x3d, r28	; 61
   1a452:	e1 2c       	mov	r14, r1
   1a454:	f1 2c       	mov	r15, r1
   1a456:	f6 01       	movw	r30, r12
   1a458:	20 81       	ld	r18, Z
   1a45a:	31 81       	ldd	r19, Z+1	; 0x01
   1a45c:	49 01       	movw	r8, r18
   1a45e:	a1 2c       	mov	r10, r1
   1a460:	b1 2c       	mov	r11, r1
   1a462:	bb 27       	eor	r27, r27
   1a464:	ab 2d       	mov	r26, r11
   1a466:	9a 2d       	mov	r25, r10
   1a468:	89 2d       	mov	r24, r9
   1a46a:	a9 01       	movw	r20, r18
   1a46c:	55 27       	eor	r21, r21
   1a46e:	5a 83       	std	Y+2, r21	; 0x02
   1a470:	49 83       	std	Y+1, r20	; 0x01
   1a472:	2c 01       	movw	r4, r24
   1a474:	3d 01       	movw	r6, r26
   1a476:	45 2b       	or	r20, r21
   1a478:	29 f0       	breq	.+10     	; 0x1a484 <lif_check_dir+0x268>
   1a47a:	5f ef       	ldi	r21, 0xFF	; 255
   1a47c:	45 1a       	sub	r4, r21
   1a47e:	55 0a       	sbc	r5, r21
   1a480:	65 0a       	sbc	r6, r21
   1a482:	75 0a       	sbc	r7, r21
   1a484:	f1 01       	movw	r30, r2
   1a486:	40 81       	ld	r20, Z
   1a488:	51 81       	ldd	r21, Z+1	; 0x01
   1a48a:	62 81       	ldd	r22, Z+2	; 0x02
   1a48c:	73 81       	ldd	r23, Z+3	; 0x03
   1a48e:	44 16       	cp	r4, r20
   1a490:	55 06       	cpc	r5, r21
   1a492:	66 06       	cpc	r6, r22
   1a494:	77 06       	cpc	r7, r23
   1a496:	38 f5       	brcc	.+78     	; 0x1a4e6 <lif_check_dir+0x2ca>
   1a498:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1a49c:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   1a4a0:	32 ff       	sbrs	r19, 2
   1a4a2:	21 c0       	rjmp	.+66     	; 0x1a4e6 <lif_check_dir+0x2ca>
   1a4a4:	29 81       	ldd	r18, Y+1	; 0x01
   1a4a6:	3a 81       	ldd	r19, Y+2	; 0x02
   1a4a8:	23 2b       	or	r18, r19
   1a4aa:	19 f0       	breq	.+6      	; 0x1a4b2 <lif_check_dir+0x296>
   1a4ac:	01 96       	adiw	r24, 0x01	; 1
   1a4ae:	a1 1d       	adc	r26, r1
   1a4b0:	b1 1d       	adc	r27, r1
   1a4b2:	7f 93       	push	r23
   1a4b4:	6f 93       	push	r22
   1a4b6:	5f 93       	push	r21
   1a4b8:	4f 93       	push	r20
   1a4ba:	bf 93       	push	r27
   1a4bc:	af 93       	push	r26
   1a4be:	9f 93       	push	r25
   1a4c0:	8f 93       	push	r24
   1a4c2:	1f 92       	push	r1
   1a4c4:	1f 92       	push	r1
   1a4c6:	9f 92       	push	r9
   1a4c8:	8f 92       	push	r8
   1a4ca:	1f 93       	push	r17
   1a4cc:	0f 93       	push	r16
   1a4ce:	8f e9       	ldi	r24, 0x9F	; 159
   1a4d0:	9d e3       	ldi	r25, 0x3D	; 61
   1a4d2:	1f 92       	push	r1
   1a4d4:	9f 93       	push	r25
   1a4d6:	8f 93       	push	r24
   1a4d8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1a4dc:	0f b6       	in	r0, 0x3f	; 63
   1a4de:	f8 94       	cli
   1a4e0:	de bf       	out	0x3e, r29	; 62
   1a4e2:	0f be       	out	0x3f, r0	; 63
   1a4e4:	cd bf       	out	0x3d, r28	; 61
   1a4e6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a4ea:	80 ff       	sbrs	r24, 0
   1a4ec:	15 c0       	rjmp	.+42     	; 0x1a518 <lif_check_dir+0x2fc>
   1a4ee:	f6 01       	movw	r30, r12
   1a4f0:	80 81       	ld	r24, Z
   1a4f2:	91 81       	ldd	r25, Z+1	; 0x01
   1a4f4:	89 2b       	or	r24, r25
   1a4f6:	81 f4       	brne	.+32     	; 0x1a518 <lif_check_dir+0x2fc>
   1a4f8:	1f 93       	push	r17
   1a4fa:	0f 93       	push	r16
   1a4fc:	84 e7       	ldi	r24, 0x74	; 116
   1a4fe:	9d e3       	ldi	r25, 0x3D	; 61
   1a500:	1f 92       	push	r1
   1a502:	9f 93       	push	r25
   1a504:	8f 93       	push	r24
   1a506:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1a50a:	0f 90       	pop	r0
   1a50c:	0f 90       	pop	r0
   1a50e:	0f 90       	pop	r0
   1a510:	0f 90       	pop	r0
   1a512:	0f 90       	pop	r0
   1a514:	e1 2c       	mov	r14, r1
   1a516:	f1 2c       	mov	r15, r1
   1a518:	eb 81       	ldd	r30, Y+3	; 0x03
   1a51a:	fc 81       	ldd	r31, Y+4	; 0x04
   1a51c:	e2 59       	subi	r30, 0x92	; 146
   1a51e:	ff 4f       	sbci	r31, 0xFF	; 255
   1a520:	20 81       	ld	r18, Z
   1a522:	31 81       	ldd	r19, Z+1	; 0x01
   1a524:	21 15       	cp	r18, r1
   1a526:	f1 e0       	ldi	r31, 0x01	; 1
   1a528:	3f 07       	cpc	r19, r31
   1a52a:	31 f1       	breq	.+76     	; 0x1a578 <lif_check_dir+0x35c>
   1a52c:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   1a530:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   1a534:	ca 01       	movw	r24, r20
   1a536:	81 70       	andi	r24, 0x01	; 1
   1a538:	99 27       	eor	r25, r25
   1a53a:	40 ff       	sbrs	r20, 0
   1a53c:	1e c0       	rjmp	.+60     	; 0x1a57a <lif_check_dir+0x35e>
   1a53e:	c9 01       	movw	r24, r18
   1a540:	1f 92       	push	r1
   1a542:	1f 92       	push	r1
   1a544:	9f 93       	push	r25
   1a546:	2f 93       	push	r18
   1a548:	eb 81       	ldd	r30, Y+3	; 0x03
   1a54a:	fc 81       	ldd	r31, Y+4	; 0x04
   1a54c:	81 81       	ldd	r24, Z+1	; 0x01
   1a54e:	8f 93       	push	r24
   1a550:	80 81       	ld	r24, Z
   1a552:	8f 93       	push	r24
   1a554:	88 e4       	ldi	r24, 0x48	; 72
   1a556:	9d e3       	ldi	r25, 0x3D	; 61
   1a558:	1f 92       	push	r1
   1a55a:	9f 93       	push	r25
   1a55c:	8f 93       	push	r24
   1a55e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1a562:	0f b6       	in	r0, 0x3f	; 63
   1a564:	f8 94       	cli
   1a566:	de bf       	out	0x3e, r29	; 62
   1a568:	0f be       	out	0x3f, r0	; 63
   1a56a:	cd bf       	out	0x3d, r28	; 61
   1a56c:	80 e0       	ldi	r24, 0x00	; 0
   1a56e:	90 e0       	ldi	r25, 0x00	; 0
   1a570:	04 c0       	rjmp	.+8      	; 0x1a57a <lif_check_dir+0x35e>
   1a572:	81 e0       	ldi	r24, 0x01	; 1
   1a574:	90 e0       	ldi	r25, 0x00	; 0
   1a576:	01 c0       	rjmp	.+2      	; 0x1a57a <lif_check_dir+0x35e>
   1a578:	c7 01       	movw	r24, r14
   1a57a:	24 96       	adiw	r28, 0x04	; 4
   1a57c:	e2 e1       	ldi	r30, 0x12	; 18
   1a57e:	0c 94 50 ec 	jmp	0x1d8a0	; 0x1d8a0 <__epilogue_restores__>

0001a582 <lif_close_volume>:
   1a582:	cf 93       	push	r28
   1a584:	df 93       	push	r29
   1a586:	00 97       	sbiw	r24, 0x00	; 0
   1a588:	f9 f0       	breq	.+62     	; 0x1a5c8 <lif_close_volume+0x46>
   1a58a:	ec 01       	movw	r28, r24
   1a58c:	8a 81       	ldd	r24, Y+2	; 0x02
   1a58e:	9b 81       	ldd	r25, Y+3	; 0x03
   1a590:	00 97       	sbiw	r24, 0x00	; 0
   1a592:	79 f0       	breq	.+30     	; 0x1a5b2 <lif_close_volume+0x30>
   1a594:	22 e0       	ldi	r18, 0x02	; 2
   1a596:	30 e0       	ldi	r19, 0x00	; 0
   1a598:	40 e0       	ldi	r20, 0x00	; 0
   1a59a:	50 e0       	ldi	r21, 0x00	; 0
   1a59c:	ba 01       	movw	r22, r20
   1a59e:	0e 94 9f 80 	call	0x1013e	; 0x1013e <fseek>
   1a5a2:	8a 81       	ldd	r24, Y+2	; 0x02
   1a5a4:	9b 81       	ldd	r25, Y+3	; 0x03
   1a5a6:	0e 94 87 82 	call	0x1050e	; 0x1050e <fclose>
   1a5aa:	1b 82       	std	Y+3, r1	; 0x03
   1a5ac:	1a 82       	std	Y+2, r1	; 0x02
   1a5ae:	0e 94 82 81 	call	0x10304	; 0x10304 <sync>
   1a5b2:	88 81       	ld	r24, Y
   1a5b4:	99 81       	ldd	r25, Y+1	; 0x01
   1a5b6:	00 97       	sbiw	r24, 0x00	; 0
   1a5b8:	11 f0       	breq	.+4      	; 0x1a5be <lif_close_volume+0x3c>
   1a5ba:	0e 94 74 c9 	call	0x192e8	; 0x192e8 <lif_free>
   1a5be:	ce 01       	movw	r24, r28
   1a5c0:	b8 db       	rcall	.-2192   	; 0x19d32 <lif_vol_clear>
   1a5c2:	ce 01       	movw	r24, r28
   1a5c4:	0e 94 74 c9 	call	0x192e8	; 0x192e8 <lif_free>
   1a5c8:	df 91       	pop	r29
   1a5ca:	cf 91       	pop	r28
   1a5cc:	08 95       	ret

0001a5ce <lif_checkdirindex>:
   1a5ce:	a0 e0       	ldi	r26, 0x00	; 0
   1a5d0:	b0 e0       	ldi	r27, 0x00	; 0
   1a5d2:	ed ee       	ldi	r30, 0xED	; 237
   1a5d4:	f2 ed       	ldi	r31, 0xD2	; 210
   1a5d6:	0c 94 3e ec 	jmp	0x1d87c	; 0x1d87c <__prologue_saves__+0x14>
   1a5da:	77 fd       	sbrc	r23, 7
   1a5dc:	26 c0       	rjmp	.+76     	; 0x1a62a <lif_checkdirindex+0x5c>
   1a5de:	8b 01       	movw	r16, r22
   1a5e0:	07 2e       	mov	r0, r23
   1a5e2:	00 0c       	add	r0, r0
   1a5e4:	22 0b       	sbc	r18, r18
   1a5e6:	33 0b       	sbc	r19, r19
   1a5e8:	45 e0       	ldi	r20, 0x05	; 5
   1a5ea:	00 0f       	add	r16, r16
   1a5ec:	11 1f       	adc	r17, r17
   1a5ee:	22 1f       	adc	r18, r18
   1a5f0:	33 1f       	adc	r19, r19
   1a5f2:	4a 95       	dec	r20
   1a5f4:	d1 f7       	brne	.-12     	; 0x1a5ea <lif_checkdirindex+0x1c>
   1a5f6:	c1 2e       	mov	r12, r17
   1a5f8:	d2 2e       	mov	r13, r18
   1a5fa:	e3 2e       	mov	r14, r19
   1a5fc:	ff 24       	eor	r15, r15
   1a5fe:	11 27       	eor	r17, r17
   1a600:	22 27       	eor	r18, r18
   1a602:	33 27       	eor	r19, r19
   1a604:	01 2b       	or	r16, r17
   1a606:	02 2b       	or	r16, r18
   1a608:	03 2b       	or	r16, r19
   1a60a:	29 f0       	breq	.+10     	; 0x1a616 <lif_checkdirindex+0x48>
   1a60c:	2f ef       	ldi	r18, 0xFF	; 255
   1a60e:	c2 1a       	sub	r12, r18
   1a610:	d2 0a       	sbc	r13, r18
   1a612:	e2 0a       	sbc	r14, r18
   1a614:	f2 0a       	sbc	r15, r18
   1a616:	fc 01       	movw	r30, r24
   1a618:	05 a9       	ldd	r16, Z+53	; 0x35
   1a61a:	16 a9       	ldd	r17, Z+54	; 0x36
   1a61c:	27 a9       	ldd	r18, Z+55	; 0x37
   1a61e:	30 ad       	ldd	r19, Z+56	; 0x38
   1a620:	0c 15       	cp	r16, r12
   1a622:	1d 05       	cpc	r17, r13
   1a624:	2e 05       	cpc	r18, r14
   1a626:	3f 05       	cpc	r19, r15
   1a628:	30 f5       	brcc	.+76     	; 0x1a676 <lif_checkdirindex+0xa8>
   1a62a:	ec 01       	movw	r28, r24
   1a62c:	7f 93       	push	r23
   1a62e:	6f 93       	push	r22
   1a630:	89 81       	ldd	r24, Y+1	; 0x01
   1a632:	8f 93       	push	r24
   1a634:	88 81       	ld	r24, Y
   1a636:	8f 93       	push	r24
   1a638:	89 e8       	ldi	r24, 0x89	; 137
   1a63a:	9c e3       	ldi	r25, 0x3C	; 60
   1a63c:	1f 92       	push	r1
   1a63e:	9f 93       	push	r25
   1a640:	8f 93       	push	r24
   1a642:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1a646:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1a64a:	30 91 be 01 	lds	r19, 0x01BE	; 0x8001be <debuglevel+0x1>
   1a64e:	8d b7       	in	r24, 0x3d	; 61
   1a650:	9e b7       	in	r25, 0x3e	; 62
   1a652:	07 96       	adiw	r24, 0x07	; 7
   1a654:	0f b6       	in	r0, 0x3f	; 63
   1a656:	f8 94       	cli
   1a658:	9e bf       	out	0x3e, r25	; 62
   1a65a:	0f be       	out	0x3f, r0	; 63
   1a65c:	8d bf       	out	0x3d, r24	; 61
   1a65e:	c9 01       	movw	r24, r18
   1a660:	88 27       	eor	r24, r24
   1a662:	94 70       	andi	r25, 0x04	; 4
   1a664:	32 ff       	sbrs	r19, 2
   1a666:	09 c0       	rjmp	.+18     	; 0x1a67a <lif_checkdirindex+0xac>
   1a668:	6a ef       	ldi	r22, 0xFA	; 250
   1a66a:	75 e1       	ldi	r23, 0x15	; 21
   1a66c:	ce 01       	movw	r24, r28
   1a66e:	68 db       	rcall	.-2352   	; 0x19d40 <lif_dump_vol>
   1a670:	80 e0       	ldi	r24, 0x00	; 0
   1a672:	90 e0       	ldi	r25, 0x00	; 0
   1a674:	02 c0       	rjmp	.+4      	; 0x1a67a <lif_checkdirindex+0xac>
   1a676:	81 e0       	ldi	r24, 0x01	; 1
   1a678:	90 e0       	ldi	r25, 0x00	; 0
   1a67a:	cd b7       	in	r28, 0x3d	; 61
   1a67c:	de b7       	in	r29, 0x3e	; 62
   1a67e:	e8 e0       	ldi	r30, 0x08	; 8
   1a680:	0c 94 5a ec 	jmp	0x1d8b4	; 0x1d8b4 <__epilogue_restores__+0x14>

0001a684 <lif_readdirindex>:
   1a684:	a0 e2       	ldi	r26, 0x20	; 32
   1a686:	b0 e0       	ldi	r27, 0x00	; 0
   1a688:	e8 e4       	ldi	r30, 0x48	; 72
   1a68a:	f3 ed       	ldi	r31, 0xD3	; 211
   1a68c:	0c 94 3e ec 	jmp	0x1d87c	; 0x1d87c <__prologue_saves__+0x14>
   1a690:	7c 01       	movw	r14, r24
   1a692:	6b 01       	movw	r12, r22
   1a694:	9c df       	rcall	.-200    	; 0x1a5ce <lif_checkdirindex>
   1a696:	89 2b       	or	r24, r25
   1a698:	19 f4       	brne	.+6      	; 0x1a6a0 <lif_readdirindex+0x1c>
   1a69a:	00 e0       	ldi	r16, 0x00	; 0
   1a69c:	10 e0       	ldi	r17, 0x00	; 0
   1a69e:	56 c0       	rjmp	.+172    	; 0x1a74c <lif_readdirindex+0xc8>
   1a6a0:	f7 01       	movw	r30, r14
   1a6a2:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a6a4:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a6a6:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a6a8:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a6aa:	44 27       	eor	r20, r20
   1a6ac:	58 2f       	mov	r21, r24
   1a6ae:	69 2f       	mov	r22, r25
   1a6b0:	7a 2f       	mov	r23, r26
   1a6b2:	c6 01       	movw	r24, r12
   1a6b4:	0d 2c       	mov	r0, r13
   1a6b6:	00 0c       	add	r0, r0
   1a6b8:	aa 0b       	sbc	r26, r26
   1a6ba:	bb 0b       	sbc	r27, r27
   1a6bc:	35 e0       	ldi	r19, 0x05	; 5
   1a6be:	88 0f       	add	r24, r24
   1a6c0:	99 1f       	adc	r25, r25
   1a6c2:	aa 1f       	adc	r26, r26
   1a6c4:	bb 1f       	adc	r27, r27
   1a6c6:	3a 95       	dec	r19
   1a6c8:	d1 f7       	brne	.-12     	; 0x1a6be <lif_readdirindex+0x3a>
   1a6ca:	9a 01       	movw	r18, r20
   1a6cc:	ab 01       	movw	r20, r22
   1a6ce:	28 0f       	add	r18, r24
   1a6d0:	39 1f       	adc	r19, r25
   1a6d2:	4a 1f       	adc	r20, r26
   1a6d4:	5b 1f       	adc	r21, r27
   1a6d6:	00 e2       	ldi	r16, 0x20	; 32
   1a6d8:	10 e0       	ldi	r17, 0x00	; 0
   1a6da:	be 01       	movw	r22, r28
   1a6dc:	6f 5f       	subi	r22, 0xFF	; 255
   1a6de:	7f 4f       	sbci	r23, 0xFF	; 255
   1a6e0:	c7 01       	movw	r24, r14
   1a6e2:	0e 94 29 ca 	call	0x19452	; 0x19452 <lif_read>
   1a6e6:	60 32       	cpi	r22, 0x20	; 32
   1a6e8:	71 05       	cpc	r23, r1
   1a6ea:	81 05       	cpc	r24, r1
   1a6ec:	91 05       	cpc	r25, r1
   1a6ee:	a8 f2       	brcs	.-86     	; 0x1a69a <lif_readdirindex+0x16>
   1a6f0:	b7 01       	movw	r22, r14
   1a6f2:	ce 01       	movw	r24, r28
   1a6f4:	01 96       	adiw	r24, 0x01	; 1
   1a6f6:	c1 d9       	rcall	.-3198   	; 0x19a7a <lif_str2dir>
   1a6f8:	f7 01       	movw	r30, r14
   1a6fa:	e6 5a       	subi	r30, 0xA6	; 166
   1a6fc:	ff 4f       	sbci	r31, 0xFF	; 255
   1a6fe:	80 81       	ld	r24, Z
   1a700:	91 81       	ldd	r25, Z+1	; 0x01
   1a702:	01 96       	adiw	r24, 0x01	; 1
   1a704:	19 f4       	brne	.+6      	; 0x1a70c <lif_readdirindex+0x88>
   1a706:	f7 01       	movw	r30, r14
   1a708:	d3 a2       	std	Z+35, r13	; 0x23
   1a70a:	c2 a2       	std	Z+34, r12	; 0x22
   1a70c:	c7 01       	movw	r24, r14
   1a70e:	86 dd       	rcall	.-1268   	; 0x1a21c <lif_check_dir>
   1a710:	8c 01       	movw	r16, r24
   1a712:	89 2b       	or	r24, r25
   1a714:	c9 f4       	brne	.+50     	; 0x1a748 <lif_readdirindex+0xc4>
   1a716:	df 92       	push	r13
   1a718:	cf 92       	push	r12
   1a71a:	89 e6       	ldi	r24, 0x69	; 105
   1a71c:	9c e3       	ldi	r25, 0x3C	; 60
   1a71e:	1f 92       	push	r1
   1a720:	9f 93       	push	r25
   1a722:	8f 93       	push	r24
   1a724:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1a728:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a72c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1a730:	0f 90       	pop	r0
   1a732:	0f 90       	pop	r0
   1a734:	0f 90       	pop	r0
   1a736:	0f 90       	pop	r0
   1a738:	0f 90       	pop	r0
   1a73a:	92 ff       	sbrs	r25, 2
   1a73c:	ae cf       	rjmp	.-164    	; 0x1a69a <lif_readdirindex+0x16>
   1a73e:	6b e0       	ldi	r22, 0x0B	; 11
   1a740:	76 e1       	ldi	r23, 0x16	; 22
   1a742:	c7 01       	movw	r24, r14
   1a744:	fd da       	rcall	.-2566   	; 0x19d40 <lif_dump_vol>
   1a746:	02 c0       	rjmp	.+4      	; 0x1a74c <lif_readdirindex+0xc8>
   1a748:	01 e0       	ldi	r16, 0x01	; 1
   1a74a:	10 e0       	ldi	r17, 0x00	; 0
   1a74c:	c8 01       	movw	r24, r16
   1a74e:	a0 96       	adiw	r28, 0x20	; 32
   1a750:	e8 e0       	ldi	r30, 0x08	; 8
   1a752:	0c 94 5a ec 	jmp	0x1d8b4	; 0x1d8b4 <__epilogue_restores__+0x14>

0001a756 <lif_writedirindex>:
   1a756:	a0 e2       	ldi	r26, 0x20	; 32
   1a758:	b0 e0       	ldi	r27, 0x00	; 0
   1a75a:	e1 eb       	ldi	r30, 0xB1	; 177
   1a75c:	f3 ed       	ldi	r31, 0xD3	; 211
   1a75e:	0c 94 3c ec 	jmp	0x1d878	; 0x1d878 <__prologue_saves__+0x10>
   1a762:	5c 01       	movw	r10, r24
   1a764:	6b 01       	movw	r12, r22
   1a766:	5a dd       	rcall	.-1356   	; 0x1a21c <lif_check_dir>
   1a768:	7c 01       	movw	r14, r24
   1a76a:	89 2b       	or	r24, r25
   1a76c:	71 f4       	brne	.+28     	; 0x1a78a <lif_writedirindex+0x34>
   1a76e:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a772:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1a776:	92 fd       	sbrc	r25, 2
   1a778:	03 c0       	rjmp	.+6      	; 0x1a780 <lif_writedirindex+0x2a>
   1a77a:	e1 2c       	mov	r14, r1
   1a77c:	f1 2c       	mov	r15, r1
   1a77e:	42 c0       	rjmp	.+132    	; 0x1a804 <lif_writedirindex+0xae>
   1a780:	6c e1       	ldi	r22, 0x1C	; 28
   1a782:	76 e1       	ldi	r23, 0x16	; 22
   1a784:	c5 01       	movw	r24, r10
   1a786:	dc da       	rcall	.-2632   	; 0x19d40 <lif_dump_vol>
   1a788:	3d c0       	rjmp	.+122    	; 0x1a804 <lif_writedirindex+0xae>
   1a78a:	b6 01       	movw	r22, r12
   1a78c:	c5 01       	movw	r24, r10
   1a78e:	1f df       	rcall	.-450    	; 0x1a5ce <lif_checkdirindex>
   1a790:	89 2b       	or	r24, r25
   1a792:	99 f3       	breq	.-26     	; 0x1a77a <lif_writedirindex+0x24>
   1a794:	f5 01       	movw	r30, r10
   1a796:	e6 5a       	subi	r30, 0xA6	; 166
   1a798:	ff 4f       	sbci	r31, 0xFF	; 255
   1a79a:	80 81       	ld	r24, Z
   1a79c:	91 81       	ldd	r25, Z+1	; 0x01
   1a79e:	01 96       	adiw	r24, 0x01	; 1
   1a7a0:	19 f4       	brne	.+6      	; 0x1a7a8 <lif_writedirindex+0x52>
   1a7a2:	f5 01       	movw	r30, r10
   1a7a4:	d3 a2       	std	Z+35, r13	; 0x23
   1a7a6:	c2 a2       	std	Z+34, r12	; 0x22
   1a7a8:	f5 01       	movw	r30, r10
   1a7aa:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a7ac:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a7ae:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a7b0:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a7b2:	ba 2f       	mov	r27, r26
   1a7b4:	a9 2f       	mov	r26, r25
   1a7b6:	98 2f       	mov	r25, r24
   1a7b8:	88 27       	eor	r24, r24
   1a7ba:	0d 2c       	mov	r0, r13
   1a7bc:	00 0c       	add	r0, r0
   1a7be:	ee 08       	sbc	r14, r14
   1a7c0:	ff 08       	sbc	r15, r15
   1a7c2:	35 e0       	ldi	r19, 0x05	; 5
   1a7c4:	cc 0c       	add	r12, r12
   1a7c6:	dd 1c       	adc	r13, r13
   1a7c8:	ee 1c       	adc	r14, r14
   1a7ca:	ff 1c       	adc	r15, r15
   1a7cc:	3a 95       	dec	r19
   1a7ce:	d1 f7       	brne	.-12     	; 0x1a7c4 <lif_writedirindex+0x6e>
   1a7d0:	c8 0e       	add	r12, r24
   1a7d2:	d9 1e       	adc	r13, r25
   1a7d4:	ea 1e       	adc	r14, r26
   1a7d6:	fb 1e       	adc	r15, r27
   1a7d8:	be 01       	movw	r22, r28
   1a7da:	6f 5f       	subi	r22, 0xFF	; 255
   1a7dc:	7f 4f       	sbci	r23, 0xFF	; 255
   1a7de:	c5 01       	movw	r24, r10
   1a7e0:	db d8       	rcall	.-3658   	; 0x19998 <lif_dir2str>
   1a7e2:	00 e2       	ldi	r16, 0x20	; 32
   1a7e4:	10 e0       	ldi	r17, 0x00	; 0
   1a7e6:	a7 01       	movw	r20, r14
   1a7e8:	96 01       	movw	r18, r12
   1a7ea:	be 01       	movw	r22, r28
   1a7ec:	6f 5f       	subi	r22, 0xFF	; 255
   1a7ee:	7f 4f       	sbci	r23, 0xFF	; 255
   1a7f0:	c5 01       	movw	r24, r10
   1a7f2:	0e 94 82 ca 	call	0x19504	; 0x19504 <lif_write>
   1a7f6:	31 e0       	ldi	r19, 0x01	; 1
   1a7f8:	20 e0       	ldi	r18, 0x00	; 0
   1a7fa:	80 97       	sbiw	r24, 0x20	; 32
   1a7fc:	0c f4       	brge	.+2      	; 0x1a800 <lif_writedirindex+0xaa>
   1a7fe:	30 e0       	ldi	r19, 0x00	; 0
   1a800:	e3 2e       	mov	r14, r19
   1a802:	f2 2e       	mov	r15, r18
   1a804:	c7 01       	movw	r24, r14
   1a806:	a0 96       	adiw	r28, 0x20	; 32
   1a808:	ea e0       	ldi	r30, 0x0A	; 10
   1a80a:	0c 94 58 ec 	jmp	0x1d8b0	; 0x1d8b0 <__epilogue_restores__+0x10>

0001a80e <lif_writedirEOF>:
   1a80e:	0f 93       	push	r16
   1a810:	1f 93       	push	r17
   1a812:	cf 93       	push	r28
   1a814:	df 93       	push	r29
   1a816:	ec 01       	movw	r28, r24
   1a818:	8b 01       	movw	r16, r22
   1a81a:	83 da       	rcall	.-2810   	; 0x19d22 <lif_dir_clear>
   1a81c:	fe 01       	movw	r30, r28
   1a81e:	e6 5a       	subi	r30, 0xA6	; 166
   1a820:	ff 4f       	sbci	r31, 0xFF	; 255
   1a822:	8f ef       	ldi	r24, 0xFF	; 255
   1a824:	9f ef       	ldi	r25, 0xFF	; 255
   1a826:	91 83       	std	Z+1, r25	; 0x01
   1a828:	80 83       	st	Z, r24
   1a82a:	1b a3       	std	Y+35, r17	; 0x23
   1a82c:	0a a3       	std	Y+34, r16	; 0x22
   1a82e:	b8 01       	movw	r22, r16
   1a830:	ce 01       	movw	r24, r28
   1a832:	91 df       	rcall	.-222    	; 0x1a756 <lif_writedirindex>
   1a834:	df 91       	pop	r29
   1a836:	cf 91       	pop	r28
   1a838:	1f 91       	pop	r17
   1a83a:	0f 91       	pop	r16
   1a83c:	08 95       	ret

0001a83e <lif_updatefree>:
   1a83e:	2f 92       	push	r2
   1a840:	3f 92       	push	r3
   1a842:	4f 92       	push	r4
   1a844:	5f 92       	push	r5
   1a846:	6f 92       	push	r6
   1a848:	7f 92       	push	r7
   1a84a:	8f 92       	push	r8
   1a84c:	af 92       	push	r10
   1a84e:	bf 92       	push	r11
   1a850:	cf 92       	push	r12
   1a852:	df 92       	push	r13
   1a854:	ef 92       	push	r14
   1a856:	ff 92       	push	r15
   1a858:	0f 93       	push	r16
   1a85a:	1f 93       	push	r17
   1a85c:	cf 93       	push	r28
   1a85e:	df 93       	push	r29
   1a860:	cd b7       	in	r28, 0x3d	; 61
   1a862:	de b7       	in	r29, 0x3e	; 62
   1a864:	28 97       	sbiw	r28, 0x08	; 8
   1a866:	0f b6       	in	r0, 0x3f	; 63
   1a868:	f8 94       	cli
   1a86a:	de bf       	out	0x3e, r29	; 62
   1a86c:	0f be       	out	0x3f, r0	; 63
   1a86e:	cd bf       	out	0x3d, r28	; 61
   1a870:	98 87       	std	Y+8, r25	; 0x08
   1a872:	8f 83       	std	Y+7, r24	; 0x07
   1a874:	fc 01       	movw	r30, r24
   1a876:	24 84       	ldd	r2, Z+12	; 0x0c
   1a878:	35 84       	ldd	r3, Z+13	; 0x0d
   1a87a:	46 84       	ldd	r4, Z+14	; 0x0e
   1a87c:	57 84       	ldd	r5, Z+15	; 0x0f
   1a87e:	80 89       	ldd	r24, Z+16	; 0x10
   1a880:	91 89       	ldd	r25, Z+17	; 0x11
   1a882:	a2 89       	ldd	r26, Z+18	; 0x12
   1a884:	b3 89       	ldd	r27, Z+19	; 0x13
   1a886:	80 8f       	std	Z+24, r24	; 0x18
   1a888:	91 8f       	std	Z+25, r25	; 0x19
   1a88a:	a2 8f       	std	Z+26, r26	; 0x1a
   1a88c:	b3 8f       	std	Z+27, r27	; 0x1b
   1a88e:	14 8a       	std	Z+20, r1	; 0x14
   1a890:	15 8a       	std	Z+21, r1	; 0x15
   1a892:	16 8a       	std	Z+22, r1	; 0x16
   1a894:	17 8a       	std	Z+23, r1	; 0x17
   1a896:	17 8e       	std	Z+31, r1	; 0x1f
   1a898:	16 8e       	std	Z+30, r1	; 0x1e
   1a89a:	15 8e       	std	Z+29, r1	; 0x1d
   1a89c:	14 8e       	std	Z+28, r1	; 0x1c
   1a89e:	11 a2       	std	Z+33, r1	; 0x21
   1a8a0:	10 a2       	std	Z+32, r1	; 0x20
   1a8a2:	13 a2       	std	Z+35, r1	; 0x23
   1a8a4:	12 a2       	std	Z+34, r1	; 0x22
   1a8a6:	cc 24       	eor	r12, r12
   1a8a8:	c3 94       	inc	r12
   1a8aa:	d1 2c       	mov	r13, r1
   1a8ac:	0f ef       	ldi	r16, 0xFF	; 255
   1a8ae:	1f ef       	ldi	r17, 0xFF	; 255
   1a8b0:	e6 5a       	subi	r30, 0xA6	; 166
   1a8b2:	ff 4f       	sbci	r31, 0xFF	; 255
   1a8b4:	fc 83       	std	Y+4, r31	; 0x04
   1a8b6:	eb 83       	std	Y+3, r30	; 0x03
   1a8b8:	af 80       	ldd	r10, Y+7	; 0x07
   1a8ba:	b8 84       	ldd	r11, Y+8	; 0x08
   1a8bc:	fc e5       	ldi	r31, 0x5C	; 92
   1a8be:	af 0e       	add	r10, r31
   1a8c0:	b1 1c       	adc	r11, r1
   1a8c2:	8f 81       	ldd	r24, Y+7	; 0x07
   1a8c4:	98 85       	ldd	r25, Y+8	; 0x08
   1a8c6:	80 5a       	subi	r24, 0xA0	; 160
   1a8c8:	9f 4f       	sbci	r25, 0xFF	; 255
   1a8ca:	9e 83       	std	Y+6, r25	; 0x06
   1a8cc:	8d 83       	std	Y+5, r24	; 0x05
   1a8ce:	ef 81       	ldd	r30, Y+7	; 0x07
   1a8d0:	f8 85       	ldd	r31, Y+8	; 0x08
   1a8d2:	e1 5b       	subi	r30, 0xB1	; 177
   1a8d4:	ff 4f       	sbci	r31, 0xFF	; 255
   1a8d6:	fa 83       	std	Y+2, r31	; 0x02
   1a8d8:	e9 83       	std	Y+1, r30	; 0x01
   1a8da:	8c e1       	ldi	r24, 0x1C	; 28
   1a8dc:	9c e3       	ldi	r25, 0x3C	; 60
   1a8de:	3c 01       	movw	r6, r24
   1a8e0:	76 01       	movw	r14, r12
   1a8e2:	21 e0       	ldi	r18, 0x01	; 1
   1a8e4:	e2 1a       	sub	r14, r18
   1a8e6:	f1 08       	sbc	r15, r1
   1a8e8:	b7 01       	movw	r22, r14
   1a8ea:	8f 81       	ldd	r24, Y+7	; 0x07
   1a8ec:	98 85       	ldd	r25, Y+8	; 0x08
   1a8ee:	ca de       	rcall	.-620    	; 0x1a684 <lif_readdirindex>
   1a8f0:	89 2b       	or	r24, r25
   1a8f2:	19 f4       	brne	.+6      	; 0x1a8fa <lif_updatefree+0xbc>
   1a8f4:	80 e0       	ldi	r24, 0x00	; 0
   1a8f6:	90 e0       	ldi	r25, 0x00	; 0
   1a8f8:	92 c0       	rjmp	.+292    	; 0x1aa1e <lif_updatefree+0x1e0>
   1a8fa:	eb 81       	ldd	r30, Y+3	; 0x03
   1a8fc:	fc 81       	ldd	r31, Y+4	; 0x04
   1a8fe:	80 81       	ld	r24, Z
   1a900:	91 81       	ldd	r25, Z+1	; 0x01
   1a902:	8f 3f       	cpi	r24, 0xFF	; 255
   1a904:	ff ef       	ldi	r31, 0xFF	; 255
   1a906:	9f 07       	cpc	r25, r31
   1a908:	c1 f4       	brne	.+48     	; 0x1a93a <lif_updatefree+0xfc>
   1a90a:	ef 81       	ldd	r30, Y+7	; 0x07
   1a90c:	f8 85       	ldd	r31, Y+8	; 0x08
   1a90e:	0f 3f       	cpi	r16, 0xFF	; 255
   1a910:	2f ef       	ldi	r18, 0xFF	; 255
   1a912:	12 07       	cpc	r17, r18
   1a914:	09 f4       	brne	.+2      	; 0x1a918 <lif_updatefree+0xda>
   1a916:	79 c0       	rjmp	.+242    	; 0x1aa0a <lif_updatefree+0x1cc>
   1a918:	13 a3       	std	Z+35, r17	; 0x23
   1a91a:	02 a3       	std	Z+34, r16	; 0x22
   1a91c:	e0 1a       	sub	r14, r16
   1a91e:	f1 0a       	sbc	r15, r17
   1a920:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a922:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a924:	8e 19       	sub	r24, r14
   1a926:	9f 09       	sbc	r25, r15
   1a928:	97 8f       	std	Z+31, r25	; 0x1f
   1a92a:	86 8f       	std	Z+30, r24	; 0x1e
   1a92c:	b8 01       	movw	r22, r16
   1a92e:	cf 01       	movw	r24, r30
   1a930:	6e df       	rcall	.-292    	; 0x1a80e <lif_writedirEOF>
   1a932:	89 2b       	or	r24, r25
   1a934:	09 f0       	breq	.+2      	; 0x1a938 <lif_updatefree+0xfa>
   1a936:	6b c0       	rjmp	.+214    	; 0x1aa0e <lif_updatefree+0x1d0>
   1a938:	dd cf       	rjmp	.-70     	; 0x1a8f4 <lif_updatefree+0xb6>
   1a93a:	89 2b       	or	r24, r25
   1a93c:	81 f4       	brne	.+32     	; 0x1a95e <lif_updatefree+0x120>
   1a93e:	0f 3f       	cpi	r16, 0xFF	; 255
   1a940:	ff ef       	ldi	r31, 0xFF	; 255
   1a942:	1f 07       	cpc	r17, r31
   1a944:	09 f4       	brne	.+2      	; 0x1a948 <lif_updatefree+0x10a>
   1a946:	87 01       	movw	r16, r14
   1a948:	ef 81       	ldd	r30, Y+7	; 0x07
   1a94a:	f8 85       	ldd	r31, Y+8	; 0x08
   1a94c:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a94e:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a950:	01 96       	adiw	r24, 0x01	; 1
   1a952:	97 8f       	std	Z+31, r25	; 0x1f
   1a954:	86 8f       	std	Z+30, r24	; 0x1e
   1a956:	ff ef       	ldi	r31, 0xFF	; 255
   1a958:	cf 1a       	sub	r12, r31
   1a95a:	df 0a       	sbc	r13, r31
   1a95c:	c1 cf       	rjmp	.-126    	; 0x1a8e0 <lif_updatefree+0xa2>
   1a95e:	f5 01       	movw	r30, r10
   1a960:	80 81       	ld	r24, Z
   1a962:	91 81       	ldd	r25, Z+1	; 0x01
   1a964:	a2 81       	ldd	r26, Z+2	; 0x02
   1a966:	b3 81       	ldd	r27, Z+3	; 0x03
   1a968:	82 15       	cp	r24, r2
   1a96a:	93 05       	cpc	r25, r3
   1a96c:	a4 05       	cpc	r26, r4
   1a96e:	b5 05       	cpc	r27, r5
   1a970:	c0 f4       	brcc	.+48     	; 0x1a9a2 <lif_updatefree+0x164>
   1a972:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1a976:	80 ff       	sbrs	r24, 0
   1a978:	14 c0       	rjmp	.+40     	; 0x1a9a2 <lif_updatefree+0x164>
   1a97a:	fa 81       	ldd	r31, Y+2	; 0x02
   1a97c:	ff 93       	push	r31
   1a97e:	29 81       	ldd	r18, Y+1	; 0x01
   1a980:	2f 93       	push	r18
   1a982:	ef 81       	ldd	r30, Y+7	; 0x07
   1a984:	f8 85       	ldd	r31, Y+8	; 0x08
   1a986:	81 81       	ldd	r24, Z+1	; 0x01
   1a988:	8f 93       	push	r24
   1a98a:	80 81       	ld	r24, Z
   1a98c:	8f 93       	push	r24
   1a98e:	1f 92       	push	r1
   1a990:	7f 92       	push	r7
   1a992:	6f 92       	push	r6
   1a994:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1a998:	0f b6       	in	r0, 0x3f	; 63
   1a99a:	f8 94       	cli
   1a99c:	de bf       	out	0x3e, r29	; 62
   1a99e:	0f be       	out	0x3f, r0	; 63
   1a9a0:	cd bf       	out	0x3d, r28	; 61
   1a9a2:	ed 81       	ldd	r30, Y+5	; 0x05
   1a9a4:	fe 81       	ldd	r31, Y+6	; 0x06
   1a9a6:	80 81       	ld	r24, Z
   1a9a8:	91 81       	ldd	r25, Z+1	; 0x01
   1a9aa:	a2 81       	ldd	r26, Z+2	; 0x02
   1a9ac:	b3 81       	ldd	r27, Z+3	; 0x03
   1a9ae:	ef 81       	ldd	r30, Y+7	; 0x07
   1a9b0:	f8 85       	ldd	r31, Y+8	; 0x08
   1a9b2:	44 89       	ldd	r20, Z+20	; 0x14
   1a9b4:	55 89       	ldd	r21, Z+21	; 0x15
   1a9b6:	66 89       	ldd	r22, Z+22	; 0x16
   1a9b8:	77 89       	ldd	r23, Z+23	; 0x17
   1a9ba:	48 0f       	add	r20, r24
   1a9bc:	59 1f       	adc	r21, r25
   1a9be:	6a 1f       	adc	r22, r26
   1a9c0:	7b 1f       	adc	r23, r27
   1a9c2:	44 8b       	std	Z+20, r20	; 0x14
   1a9c4:	55 8b       	std	Z+21, r21	; 0x15
   1a9c6:	66 8b       	std	Z+22, r22	; 0x16
   1a9c8:	77 8b       	std	Z+23, r23	; 0x17
   1a9ca:	40 8d       	ldd	r20, Z+24	; 0x18
   1a9cc:	51 8d       	ldd	r21, Z+25	; 0x19
   1a9ce:	62 8d       	ldd	r22, Z+26	; 0x1a
   1a9d0:	73 8d       	ldd	r23, Z+27	; 0x1b
   1a9d2:	48 1b       	sub	r20, r24
   1a9d4:	59 0b       	sbc	r21, r25
   1a9d6:	6a 0b       	sbc	r22, r26
   1a9d8:	7b 0b       	sbc	r23, r27
   1a9da:	40 8f       	std	Z+24, r20	; 0x18
   1a9dc:	51 8f       	std	Z+25, r21	; 0x19
   1a9de:	62 8f       	std	Z+26, r22	; 0x1a
   1a9e0:	73 8f       	std	Z+27, r23	; 0x1b
   1a9e2:	24 8d       	ldd	r18, Z+28	; 0x1c
   1a9e4:	35 8d       	ldd	r19, Z+29	; 0x1d
   1a9e6:	2f 5f       	subi	r18, 0xFF	; 255
   1a9e8:	3f 4f       	sbci	r19, 0xFF	; 255
   1a9ea:	35 8f       	std	Z+29, r19	; 0x1d
   1a9ec:	24 8f       	std	Z+28, r18	; 0x1c
   1a9ee:	f5 01       	movw	r30, r10
   1a9f0:	40 81       	ld	r20, Z
   1a9f2:	51 81       	ldd	r21, Z+1	; 0x01
   1a9f4:	62 81       	ldd	r22, Z+2	; 0x02
   1a9f6:	73 81       	ldd	r23, Z+3	; 0x03
   1a9f8:	1c 01       	movw	r2, r24
   1a9fa:	2d 01       	movw	r4, r26
   1a9fc:	24 0e       	add	r2, r20
   1a9fe:	35 1e       	adc	r3, r21
   1aa00:	46 1e       	adc	r4, r22
   1aa02:	57 1e       	adc	r5, r23
   1aa04:	0f ef       	ldi	r16, 0xFF	; 255
   1aa06:	1f ef       	ldi	r17, 0xFF	; 255
   1aa08:	a6 cf       	rjmp	.-180    	; 0x1a956 <lif_updatefree+0x118>
   1aa0a:	f3 a2       	std	Z+35, r15	; 0x23
   1aa0c:	e2 a2       	std	Z+34, r14	; 0x22
   1aa0e:	8f ef       	ldi	r24, 0xFF	; 255
   1aa10:	9f ef       	ldi	r25, 0xFF	; 255
   1aa12:	ef 81       	ldd	r30, Y+7	; 0x07
   1aa14:	f8 85       	ldd	r31, Y+8	; 0x08
   1aa16:	91 a3       	std	Z+33, r25	; 0x21
   1aa18:	80 a3       	std	Z+32, r24	; 0x20
   1aa1a:	8f 81       	ldd	r24, Y+7	; 0x07
   1aa1c:	98 85       	ldd	r25, Y+8	; 0x08
   1aa1e:	28 96       	adiw	r28, 0x08	; 8
   1aa20:	0f b6       	in	r0, 0x3f	; 63
   1aa22:	f8 94       	cli
   1aa24:	de bf       	out	0x3e, r29	; 62
   1aa26:	0f be       	out	0x3f, r0	; 63
   1aa28:	cd bf       	out	0x3d, r28	; 61
   1aa2a:	df 91       	pop	r29
   1aa2c:	cf 91       	pop	r28
   1aa2e:	1f 91       	pop	r17
   1aa30:	0f 91       	pop	r16
   1aa32:	ff 90       	pop	r15
   1aa34:	ef 90       	pop	r14
   1aa36:	df 90       	pop	r13
   1aa38:	cf 90       	pop	r12
   1aa3a:	bf 90       	pop	r11
   1aa3c:	af 90       	pop	r10
   1aa3e:	8f 90       	pop	r8
   1aa40:	7f 90       	pop	r7
   1aa42:	6f 90       	pop	r6
   1aa44:	5f 90       	pop	r5
   1aa46:	4f 90       	pop	r4
   1aa48:	3f 90       	pop	r3
   1aa4a:	2f 90       	pop	r2
   1aa4c:	08 95       	ret

0001aa4e <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   1aa4e:	a6 e1       	ldi	r26, 0x16	; 22
   1aa50:	b1 e0       	ldi	r27, 0x01	; 1
   1aa52:	ed e2       	ldi	r30, 0x2D	; 45
   1aa54:	f5 ed       	ldi	r31, 0xD5	; 213
   1aa56:	0c 94 34 ec 	jmp	0x1d868	; 0x1d868 <__prologue_saves__>
   1aa5a:	4c 01       	movw	r8, r24
   1aa5c:	1b 01       	movw	r2, r22
   1aa5e:	29 01       	movw	r4, r18
   1aa60:	3a 01       	movw	r6, r20
   1aa62:	cd 5e       	subi	r28, 0xED	; 237
   1aa64:	de 4f       	sbci	r29, 0xFE	; 254
   1aa66:	e8 82       	st	Y, r14
   1aa68:	f9 82       	std	Y+1, r15	; 0x01
   1aa6a:	0a 83       	std	Y+2, r16	; 0x02
   1aa6c:	1b 83       	std	Y+3, r17	; 0x03
   1aa6e:	c3 51       	subi	r28, 0x13	; 19
   1aa70:	d1 40       	sbci	r29, 0x01	; 1
   1aa72:	c5 5f       	subi	r28, 0xF5	; 245
   1aa74:	de 4f       	sbci	r29, 0xFE	; 254
   1aa76:	a8 82       	st	Y, r10
   1aa78:	b9 82       	std	Y+1, r11	; 0x01
   1aa7a:	ca 82       	std	Y+2, r12	; 0x02
   1aa7c:	db 82       	std	Y+3, r13	; 0x03
   1aa7e:	cb 50       	subi	r28, 0x0B	; 11
   1aa80:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   1aa82:	80 e0       	ldi	r24, 0x00	; 0
   1aa84:	90 e0       	ldi	r25, 0x00	; 0
   1aa86:	0e 94 89 38 	call	0x7112	; 0x7112 <time>
   1aa8a:	6b 01       	movw	r12, r22
   1aa8c:	7c 01       	movw	r14, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   1aa8e:	64 e7       	ldi	r22, 0x74	; 116
   1aa90:	70 e0       	ldi	r23, 0x00	; 0
   1aa92:	80 e0       	ldi	r24, 0x00	; 0
   1aa94:	90 e0       	ldi	r25, 0x00	; 0
   1aa96:	0e 94 48 c9 	call	0x19290	; 0x19290 <lif_calloc>
   1aa9a:	5c 01       	movw	r10, r24
    if(LIF == NULL)
   1aa9c:	89 2b       	or	r24, r25
   1aa9e:	09 f4       	brne	.+2      	; 0x1aaa2 <lif_create_volume+0x54>
   1aaa0:	f9 c2       	rjmp	.+1522   	; 0x1b094 <lif_create_volume+0x646>
        return(NULL);

	printf("Creating:%s, Label:%10s, Directory Start %ld, Directory Size: %ld, File Sectors:%ld\n",
   1aaa2:	c2 5f       	subi	r28, 0xF2	; 242
   1aaa4:	de 4f       	sbci	r29, 0xFE	; 254
   1aaa6:	28 81       	ld	r18, Y
   1aaa8:	ce 50       	subi	r28, 0x0E	; 14
   1aaaa:	d1 40       	sbci	r29, 0x01	; 1
   1aaac:	2f 93       	push	r18
   1aaae:	c3 5f       	subi	r28, 0xF3	; 243
   1aab0:	de 4f       	sbci	r29, 0xFE	; 254
   1aab2:	38 81       	ld	r19, Y
   1aab4:	cd 50       	subi	r28, 0x0D	; 13
   1aab6:	d1 40       	sbci	r29, 0x01	; 1
   1aab8:	3f 93       	push	r19
   1aaba:	c4 5f       	subi	r28, 0xF4	; 244
   1aabc:	de 4f       	sbci	r29, 0xFE	; 254
   1aabe:	48 81       	ld	r20, Y
   1aac0:	cc 50       	subi	r28, 0x0C	; 12
   1aac2:	d1 40       	sbci	r29, 0x01	; 1
   1aac4:	4f 93       	push	r20
   1aac6:	c5 5f       	subi	r28, 0xF5	; 245
   1aac8:	de 4f       	sbci	r29, 0xFE	; 254
   1aaca:	58 81       	ld	r21, Y
   1aacc:	cb 50       	subi	r28, 0x0B	; 11
   1aace:	d1 40       	sbci	r29, 0x01	; 1
   1aad0:	5f 93       	push	r21
   1aad2:	ca 5e       	subi	r28, 0xEA	; 234
   1aad4:	de 4f       	sbci	r29, 0xFE	; 254
   1aad6:	88 81       	ld	r24, Y
   1aad8:	c6 51       	subi	r28, 0x16	; 22
   1aada:	d1 40       	sbci	r29, 0x01	; 1
   1aadc:	8f 93       	push	r24
   1aade:	cb 5e       	subi	r28, 0xEB	; 235
   1aae0:	de 4f       	sbci	r29, 0xFE	; 254
   1aae2:	98 81       	ld	r25, Y
   1aae4:	c5 51       	subi	r28, 0x15	; 21
   1aae6:	d1 40       	sbci	r29, 0x01	; 1
   1aae8:	9f 93       	push	r25
   1aaea:	cc 5e       	subi	r28, 0xEC	; 236
   1aaec:	de 4f       	sbci	r29, 0xFE	; 254
   1aaee:	a8 81       	ld	r26, Y
   1aaf0:	c4 51       	subi	r28, 0x14	; 20
   1aaf2:	d1 40       	sbci	r29, 0x01	; 1
   1aaf4:	af 93       	push	r26
   1aaf6:	cd 5e       	subi	r28, 0xED	; 237
   1aaf8:	de 4f       	sbci	r29, 0xFE	; 254
   1aafa:	b8 81       	ld	r27, Y
   1aafc:	c3 51       	subi	r28, 0x13	; 19
   1aafe:	d1 40       	sbci	r29, 0x01	; 1
   1ab00:	bf 93       	push	r27
   1ab02:	7f 92       	push	r7
   1ab04:	6f 92       	push	r6
   1ab06:	5f 92       	push	r5
   1ab08:	4f 92       	push	r4
   1ab0a:	3f 92       	push	r3
   1ab0c:	2f 92       	push	r2
   1ab0e:	9f 92       	push	r9
   1ab10:	8f 92       	push	r8
   1ab12:	83 ef       	ldi	r24, 0xF3	; 243
   1ab14:	9c e3       	ldi	r25, 0x3C	; 60
   1ab16:	1f 92       	push	r1
   1ab18:	9f 93       	push	r25
   1ab1a:	8f 93       	push	r24
   1ab1c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
		imagename, liflabel, dirstart, dirsectors, filesectors );

    if(debuglevel & 0x400)
   1ab20:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1ab24:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1ab28:	0f b6       	in	r0, 0x3f	; 63
   1ab2a:	f8 94       	cli
   1ab2c:	de bf       	out	0x3e, r29	; 62
   1ab2e:	0f be       	out	0x3f, r0	; 63
   1ab30:	cd bf       	out	0x3d, r28	; 61
   1ab32:	92 ff       	sbrs	r25, 2
   1ab34:	04 c0       	rjmp	.+8      	; 0x1ab3e <lif_create_volume+0xf0>
        lif_dump_vol(LIF,"lif_create_volume");
   1ab36:	6e e2       	ldi	r22, 0x2E	; 46
   1ab38:	76 e1       	ldi	r23, 0x16	; 22
   1ab3a:	c5 01       	movw	r24, r10
    
    lif_image_clear(LIF);
   1ab3c:	01 d9       	rcall	.-3582   	; 0x19d40 <lif_dump_vol>
   1ab3e:	c5 01       	movw	r24, r10

    // Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   1ab40:	ea d8       	rcall	.-3628   	; 0x19d16 <lif_image_clear>
   1ab42:	80 e0       	ldi	r24, 0x00	; 0
   1ab44:	90 e8       	ldi	r25, 0x80	; 128
   1ab46:	d5 01       	movw	r26, r10
   1ab48:	95 96       	adiw	r26, 0x25	; 37
   1ab4a:	9c 93       	st	X, r25
   1ab4c:	8e 93       	st	-X, r24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   1ab4e:	94 97       	sbiw	r26, 0x24	; 36
   1ab50:	46 e0       	ldi	r20, 0x06	; 6
   1ab52:	50 e0       	ldi	r21, 0x00	; 0
   1ab54:	b1 01       	movw	r22, r2
   1ab56:	c5 01       	movw	r24, r10
   1ab58:	86 96       	adiw	r24, 0x26	; 38
   1ab5a:	0e 94 6f cb 	call	0x196de	; 0x196de <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   1ab5e:	f5 01       	movw	r30, r10
   1ab60:	45 a6       	std	Z+45, r4	; 0x2d
   1ab62:	56 a6       	std	Z+46, r5	; 0x2e
   1ab64:	67 a6       	std	Z+47, r6	; 0x2f
    LIF->VOL.DirSectors = dirsectors;
   1ab66:	70 aa       	std	Z+48, r7	; 0x30
   1ab68:	cd 5e       	subi	r28, 0xED	; 237
   1ab6a:	de 4f       	sbci	r29, 0xFE	; 254
   1ab6c:	28 81       	ld	r18, Y
   1ab6e:	39 81       	ldd	r19, Y+1	; 0x01
   1ab70:	4a 81       	ldd	r20, Y+2	; 0x02
   1ab72:	5b 81       	ldd	r21, Y+3	; 0x03
   1ab74:	c3 51       	subi	r28, 0x13	; 19
   1ab76:	d1 40       	sbci	r29, 0x01	; 1
   1ab78:	25 ab       	std	Z+53, r18	; 0x35
   1ab7a:	36 ab       	std	Z+54, r19	; 0x36
   1ab7c:	47 ab       	std	Z+55, r20	; 0x37
    LIF->VOL.System3000LIFid = 0x1000;
   1ab7e:	50 af       	std	Z+56, r21	; 0x38
   1ab80:	80 e0       	ldi	r24, 0x00	; 0
   1ab82:	90 e1       	ldi	r25, 0x10	; 16
   1ab84:	92 ab       	std	Z+50, r25	; 0x32
    LIF->VOL.tracks_per_side = 0;
   1ab86:	81 ab       	std	Z+49, r24	; 0x31
   1ab88:	fd 96       	adiw	r30, 0x3d	; 61
   1ab8a:	10 82       	st	Z, r1
   1ab8c:	11 82       	std	Z+1, r1	; 0x01
   1ab8e:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sides = 0;
   1ab90:	13 82       	std	Z+3, r1	; 0x03
   1ab92:	34 96       	adiw	r30, 0x04	; 4
   1ab94:	10 82       	st	Z, r1
   1ab96:	11 82       	std	Z+1, r1	; 0x01
   1ab98:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sectors_per_track = 0;
   1ab9a:	13 82       	std	Z+3, r1	; 0x03
   1ab9c:	34 96       	adiw	r30, 0x04	; 4
   1ab9e:	10 82       	st	Z, r1
   1aba0:	11 82       	std	Z+1, r1	; 0x01
   1aba2:	12 82       	std	Z+2, r1	; 0x02
    ///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   1aba4:	13 82       	std	Z+3, r1	; 0x03
   1aba6:	a5 01       	movw	r20, r10
   1aba8:	47 5b       	subi	r20, 0xB7	; 183
   1abaa:	5f 4f       	sbci	r21, 0xFF	; 255
   1abac:	c7 01       	movw	r24, r14
   1abae:	b6 01       	movw	r22, r12
   1abb0:	0e 94 b4 cd 	call	0x19b68	; 0x19b68 <lif_time2lifbcd>

    // update LIF headers
    LIF->name = lif_stralloc(imagename);
   1abb4:	c4 01       	movw	r24, r8
   1abb6:	0e 94 84 c9 	call	0x19308	; 0x19308 <lif_stralloc>
   1abba:	f5 01       	movw	r30, r10
   1abbc:	91 83       	std	Z+1, r25	; 0x01
    if(LIF->name == NULL)
   1abbe:	80 83       	st	Z, r24
   1abc0:	89 2b       	or	r24, r25
   1abc2:	09 f4       	brne	.+2      	; 0x1abc6 <lif_create_volume+0x178>
        lif_close_volume(LIF);
        return(NULL);
    }

    // Initilize all LIF headers
    LIF->filesectors = filesectors;
   1abc4:	5c c2       	rjmp	.+1208   	; 0x1b07e <lif_create_volume+0x630>
   1abc6:	c5 5f       	subi	r28, 0xF5	; 245
   1abc8:	de 4f       	sbci	r29, 0xFE	; 254
   1abca:	28 81       	ld	r18, Y
   1abcc:	39 81       	ldd	r19, Y+1	; 0x01
   1abce:	4a 81       	ldd	r20, Y+2	; 0x02
   1abd0:	5b 81       	ldd	r21, Y+3	; 0x03
   1abd2:	cb 50       	subi	r28, 0x0B	; 11
   1abd4:	d1 40       	sbci	r29, 0x01	; 1
   1abd6:	20 8b       	std	Z+16, r18	; 0x10
   1abd8:	31 8b       	std	Z+17, r19	; 0x11
   1abda:	42 8b       	std	Z+18, r20	; 0x12
    LIF->filestart = dirstart + dirsectors;
   1abdc:	53 8b       	std	Z+19, r21	; 0x13
   1abde:	cd 5e       	subi	r28, 0xED	; 237
   1abe0:	de 4f       	sbci	r29, 0xFE	; 254
   1abe2:	88 81       	ld	r24, Y
   1abe4:	99 81       	ldd	r25, Y+1	; 0x01
   1abe6:	aa 81       	ldd	r26, Y+2	; 0x02
   1abe8:	bb 81       	ldd	r27, Y+3	; 0x03
   1abea:	c3 51       	subi	r28, 0x13	; 19
   1abec:	d1 40       	sbci	r29, 0x01	; 1
   1abee:	84 0d       	add	r24, r4
   1abf0:	95 1d       	adc	r25, r5
   1abf2:	a6 1d       	adc	r26, r6
   1abf4:	b7 1d       	adc	r27, r7
   1abf6:	f5 01       	movw	r30, r10
   1abf8:	84 87       	std	Z+12, r24	; 0x0c
   1abfa:	95 87       	std	Z+13, r25	; 0x0d
   1abfc:	a6 87       	std	Z+14, r26	; 0x0e
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   1abfe:	b7 87       	std	Z+15, r27	; 0x0f
   1ac00:	82 0f       	add	r24, r18
   1ac02:	93 1f       	adc	r25, r19
   1ac04:	a4 1f       	adc	r26, r20
   1ac06:	b5 1f       	adc	r27, r21
   1ac08:	84 83       	std	Z+4, r24	; 0x04
   1ac0a:	95 83       	std	Z+5, r25	; 0x05
   1ac0c:	a6 83       	std	Z+6, r26	; 0x06
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   1ac0e:	b7 83       	std	Z+7, r27	; 0x07
   1ac10:	ba 2f       	mov	r27, r26
   1ac12:	a9 2f       	mov	r26, r25
   1ac14:	98 2f       	mov	r25, r24
   1ac16:	88 27       	eor	r24, r24
   1ac18:	80 87       	std	Z+8, r24	; 0x08
   1ac1a:	91 87       	std	Z+9, r25	; 0x09
   1ac1c:	a2 87       	std	Z+10, r26	; 0x0a
    LIF->freesectors = LIF->filesectors;
   1ac1e:	b3 87       	std	Z+11, r27	; 0x0b
   1ac20:	20 8f       	std	Z+24, r18	; 0x18
   1ac22:	31 8f       	std	Z+25, r19	; 0x19
   1ac24:	42 8f       	std	Z+26, r20	; 0x1a
    LIF->usedsectors = 0;
   1ac26:	53 8f       	std	Z+27, r21	; 0x1b
   1ac28:	14 8a       	std	Z+20, r1	; 0x14
   1ac2a:	15 8a       	std	Z+21, r1	; 0x15
   1ac2c:	16 8a       	std	Z+22, r1	; 0x16
    LIF->files = 0;
   1ac2e:	17 8a       	std	Z+23, r1	; 0x17
   1ac30:	15 8e       	std	Z+29, r1	; 0x1d
    LIF->purged = 0;
   1ac32:	14 8e       	std	Z+28, r1	; 0x1c
   1ac34:	17 8e       	std	Z+31, r1	; 0x1f
    LIF->dirindex = 0;
   1ac36:	16 8e       	std	Z+30, r1	; 0x1e
   1ac38:	11 a2       	std	Z+33, r1	; 0x21
    LIF->EOFindex = 0;
   1ac3a:	10 a2       	std	Z+32, r1	; 0x20
   1ac3c:	13 a2       	std	Z+35, r1	; 0x23

    memset(buffer,0,LIF_SECTOR_SIZE);
   1ac3e:	12 a2       	std	Z+34, r1	; 0x22
   1ac40:	c1 2c       	mov	r12, r1
   1ac42:	dd 24       	eor	r13, r13
   1ac44:	d3 94       	inc	r13
   1ac46:	9e 01       	movw	r18, r28
   1ac48:	2f 5f       	subi	r18, 0xFF	; 255
   1ac4a:	3f 4f       	sbci	r19, 0xFF	; 255
   1ac4c:	79 01       	movw	r14, r18
   1ac4e:	d9 01       	movw	r26, r18
   1ac50:	f6 01       	movw	r30, r12
   1ac52:	1d 92       	st	X+, r1
   1ac54:	31 97       	sbiw	r30, 0x01	; 1

    lif_vol2str(LIF,buffer);
   1ac56:	e9 f7       	brne	.-6      	; 0x1ac52 <lif_create_volume+0x204>
   1ac58:	b9 01       	movw	r22, r18
   1ac5a:	c5 01       	movw	r24, r10
   1ac5c:	0e 94 ac cb 	call	0x19758	; 0x19758 <lif_vol2str>

    // Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   1ac60:	62 ed       	ldi	r22, 0xD2	; 210
   1ac62:	78 e0       	ldi	r23, 0x08	; 8
   1ac64:	d5 01       	movw	r26, r10
   1ac66:	8d 91       	ld	r24, X+
   1ac68:	9c 91       	ld	r25, X
   1ac6a:	0e 94 a3 c9 	call	0x19346	; 0x19346 <lif_open>
   1ac6e:	f5 01       	movw	r30, r10
   1ac70:	93 83       	std	Z+3, r25	; 0x03
    if(LIF->fp == NULL)
   1ac72:	82 83       	std	Z+2, r24	; 0x02
   1ac74:	89 2b       	or	r24, r25
   1ac76:	09 f4       	brne	.+2      	; 0x1ac7a <lif_create_volume+0x22c>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1ac78:	02 c2       	rjmp	.+1028   	; 0x1b07e <lif_create_volume+0x630>
   1ac7a:	00 e0       	ldi	r16, 0x00	; 0
   1ac7c:	11 e0       	ldi	r17, 0x01	; 1
   1ac7e:	20 e0       	ldi	r18, 0x00	; 0
   1ac80:	30 e0       	ldi	r19, 0x00	; 0
   1ac82:	a9 01       	movw	r20, r18
   1ac84:	b7 01       	movw	r22, r14
   1ac86:	c5 01       	movw	r24, r10
   1ac88:	0e 94 82 ca 	call	0x19504	; 0x19504 <lif_write>
   1ac8c:	9c 01       	movw	r18, r24
   1ac8e:	99 0f       	add	r25, r25
   1ac90:	44 0b       	sbc	r20, r20
   1ac92:	55 0b       	sbc	r21, r21
   1ac94:	c9 5f       	subi	r28, 0xF9	; 249
   1ac96:	de 4f       	sbci	r29, 0xFE	; 254
   1ac98:	28 83       	st	Y, r18
   1ac9a:	39 83       	std	Y+1, r19	; 0x01
   1ac9c:	4a 83       	std	Y+2, r20	; 0x02
   1ac9e:	5b 83       	std	Y+3, r21	; 0x03
   1aca0:	c7 50       	subi	r28, 0x07	; 7

    if(size < LIF_SECTOR_SIZE)
   1aca2:	d1 40       	sbci	r29, 0x01	; 1
   1aca4:	2f 3f       	cpi	r18, 0xFF	; 255
   1aca6:	31 05       	cpc	r19, r1
   1aca8:	41 05       	cpc	r20, r1
   1acaa:	51 05       	cpc	r21, r1
   1acac:	09 f0       	breq	.+2      	; 0x1acb0 <lif_create_volume+0x262>
   1acae:	0c f4       	brge	.+2      	; 0x1acb2 <lif_create_volume+0x264>
    }
    offset += size;
    ++count;


    memset(buffer,0,LIF_SECTOR_SIZE);
   1acb0:	e6 c1       	rjmp	.+972    	; 0x1b07e <lif_create_volume+0x630>
   1acb2:	d7 01       	movw	r26, r14
   1acb4:	f6 01       	movw	r30, r12
   1acb6:	1d 92       	st	X+, r1
   1acb8:	31 97       	sbiw	r30, 0x01	; 1

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1acba:	e9 f7       	brne	.-6      	; 0x1acb6 <lif_create_volume+0x268>
   1acbc:	21 e0       	ldi	r18, 0x01	; 1
   1acbe:	30 e0       	ldi	r19, 0x00	; 0
   1acc0:	40 e0       	ldi	r20, 0x00	; 0
   1acc2:	50 e0       	ldi	r21, 0x00	; 0
   1acc4:	cd 5f       	subi	r28, 0xFD	; 253
   1acc6:	de 4f       	sbci	r29, 0xFE	; 254
   1acc8:	28 83       	st	Y, r18
   1acca:	39 83       	std	Y+1, r19	; 0x01
   1accc:	4a 83       	std	Y+2, r20	; 0x02
   1acce:	5b 83       	std	Y+3, r21	; 0x03
   1acd0:	c3 50       	subi	r28, 0x03	; 3
   1acd2:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
            printf("Wrote: %ld\r", count);
   1acd4:	47 01       	movw	r8, r14
   1acd6:	87 ee       	ldi	r24, 0xE7	; 231
   1acd8:	9c e3       	ldi	r25, 0x3C	; 60


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1acda:	6c 01       	movw	r12, r24
   1acdc:	cd 5f       	subi	r28, 0xFD	; 253
   1acde:	de 4f       	sbci	r29, 0xFE	; 254
   1ace0:	88 81       	ld	r24, Y
   1ace2:	99 81       	ldd	r25, Y+1	; 0x01
   1ace4:	aa 81       	ldd	r26, Y+2	; 0x02
   1ace6:	bb 81       	ldd	r27, Y+3	; 0x03
   1ace8:	c3 50       	subi	r28, 0x03	; 3
   1acea:	d1 40       	sbci	r29, 0x01	; 1
   1acec:	84 15       	cp	r24, r4
   1acee:	95 05       	cpc	r25, r5
   1acf0:	a6 05       	cpc	r26, r6
   1acf2:	b7 05       	cpc	r27, r7
   1acf4:	0c f0       	brlt	.+2      	; 0x1acf8 <lif_create_volume+0x2aa>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1acf6:	64 c0       	rjmp	.+200    	; 0x1adc0 <lif_create_volume+0x372>
   1acf8:	00 e0       	ldi	r16, 0x00	; 0
   1acfa:	11 e0       	ldi	r17, 0x01	; 1
   1acfc:	c9 5f       	subi	r28, 0xF9	; 249
   1acfe:	de 4f       	sbci	r29, 0xFE	; 254
   1ad00:	28 81       	ld	r18, Y
   1ad02:	39 81       	ldd	r19, Y+1	; 0x01
   1ad04:	4a 81       	ldd	r20, Y+2	; 0x02
   1ad06:	5b 81       	ldd	r21, Y+3	; 0x03
   1ad08:	c7 50       	subi	r28, 0x07	; 7
   1ad0a:	d1 40       	sbci	r29, 0x01	; 1
   1ad0c:	b4 01       	movw	r22, r8
   1ad0e:	c5 01       	movw	r24, r10
   1ad10:	0e 94 82 ca 	call	0x19504	; 0x19504 <lif_write>
   1ad14:	09 2e       	mov	r0, r25
   1ad16:	00 0c       	add	r0, r0
   1ad18:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1ad1a:	bb 0b       	sbc	r27, r27
   1ad1c:	8f 3f       	cpi	r24, 0xFF	; 255
   1ad1e:	91 05       	cpc	r25, r1
   1ad20:	a1 05       	cpc	r26, r1
   1ad22:	b1 05       	cpc	r27, r1
   1ad24:	09 f0       	breq	.+2      	; 0x1ad28 <lif_create_volume+0x2da>
   1ad26:	0c f4       	brge	.+2      	; 0x1ad2a <lif_create_volume+0x2dc>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1ad28:	aa c1       	rjmp	.+852    	; 0x1b07e <lif_create_volume+0x630>
   1ad2a:	c9 5f       	subi	r28, 0xF9	; 249
   1ad2c:	de 4f       	sbci	r29, 0xFE	; 254
   1ad2e:	28 81       	ld	r18, Y
   1ad30:	39 81       	ldd	r19, Y+1	; 0x01
   1ad32:	4a 81       	ldd	r20, Y+2	; 0x02
   1ad34:	5b 81       	ldd	r21, Y+3	; 0x03
   1ad36:	c7 50       	subi	r28, 0x07	; 7
   1ad38:	d1 40       	sbci	r29, 0x01	; 1
   1ad3a:	28 0f       	add	r18, r24
   1ad3c:	39 1f       	adc	r19, r25
   1ad3e:	4a 1f       	adc	r20, r26
   1ad40:	5b 1f       	adc	r21, r27
   1ad42:	c9 5f       	subi	r28, 0xF9	; 249
   1ad44:	de 4f       	sbci	r29, 0xFE	; 254
   1ad46:	28 83       	st	Y, r18
   1ad48:	39 83       	std	Y+1, r19	; 0x01
   1ad4a:	4a 83       	std	Y+2, r20	; 0x02
   1ad4c:	5b 83       	std	Y+3, r21	; 0x03
   1ad4e:	c7 50       	subi	r28, 0x07	; 7
            printf("Wrote: %ld\r", count);
   1ad50:	d1 40       	sbci	r29, 0x01	; 1
   1ad52:	ca 5f       	subi	r28, 0xFA	; 250
   1ad54:	de 4f       	sbci	r29, 0xFE	; 254
   1ad56:	38 81       	ld	r19, Y
   1ad58:	c6 50       	subi	r28, 0x06	; 6
   1ad5a:	d1 40       	sbci	r29, 0x01	; 1
   1ad5c:	3f 93       	push	r19
   1ad5e:	cb 5f       	subi	r28, 0xFB	; 251
   1ad60:	de 4f       	sbci	r29, 0xFE	; 254
   1ad62:	48 81       	ld	r20, Y
   1ad64:	c5 50       	subi	r28, 0x05	; 5
   1ad66:	d1 40       	sbci	r29, 0x01	; 1
   1ad68:	4f 93       	push	r20
   1ad6a:	cc 5f       	subi	r28, 0xFC	; 252
   1ad6c:	de 4f       	sbci	r29, 0xFE	; 254
   1ad6e:	58 81       	ld	r21, Y
   1ad70:	c4 50       	subi	r28, 0x04	; 4
   1ad72:	d1 40       	sbci	r29, 0x01	; 1
   1ad74:	5f 93       	push	r21
   1ad76:	cd 5f       	subi	r28, 0xFD	; 253
   1ad78:	de 4f       	sbci	r29, 0xFE	; 254
   1ad7a:	88 81       	ld	r24, Y
   1ad7c:	c3 50       	subi	r28, 0x03	; 3
   1ad7e:	d1 40       	sbci	r29, 0x01	; 1
   1ad80:	8f 93       	push	r24
   1ad82:	1f 92       	push	r1
   1ad84:	df 92       	push	r13
   1ad86:	cf 92       	push	r12
   1ad88:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1ad8c:	cd 5f       	subi	r28, 0xFD	; 253
   1ad8e:	de 4f       	sbci	r29, 0xFE	; 254
   1ad90:	28 81       	ld	r18, Y
   1ad92:	39 81       	ldd	r19, Y+1	; 0x01
   1ad94:	4a 81       	ldd	r20, Y+2	; 0x02
   1ad96:	5b 81       	ldd	r21, Y+3	; 0x03
   1ad98:	c3 50       	subi	r28, 0x03	; 3
   1ad9a:	d1 40       	sbci	r29, 0x01	; 1
   1ad9c:	2f 5f       	subi	r18, 0xFF	; 255
   1ad9e:	3f 4f       	sbci	r19, 0xFF	; 255
   1ada0:	4f 4f       	sbci	r20, 0xFF	; 255
   1ada2:	5f 4f       	sbci	r21, 0xFF	; 255
   1ada4:	cd 5f       	subi	r28, 0xFD	; 253
   1ada6:	de 4f       	sbci	r29, 0xFE	; 254
   1ada8:	28 83       	st	Y, r18
   1adaa:	39 83       	std	Y+1, r19	; 0x01
   1adac:	4a 83       	std	Y+2, r20	; 0x02
   1adae:	5b 83       	std	Y+3, r21	; 0x03
   1adb0:	c3 50       	subi	r28, 0x03	; 3
   1adb2:	d1 40       	sbci	r29, 0x01	; 1
   1adb4:	0f b6       	in	r0, 0x3f	; 63
   1adb6:	f8 94       	cli
   1adb8:	de bf       	out	0x3e, r29	; 62
   1adba:	0f be       	out	0x3f, r0	; 63
   1adbc:	cd bf       	out	0x3d, r28	; 61
            printf("Wrote: %ld\r", count);
        ++count;
    }

    // Write Directory sectors
    lif_dir_clear(LIF);
   1adbe:	8e cf       	rjmp	.-228    	; 0x1acdc <lif_create_volume+0x28e>
   1adc0:	c5 01       	movw	r24, r10
   1adc2:	0e 94 91 ce 	call	0x19d22	; 0x19d22 <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   1adc6:	8f ef       	ldi	r24, 0xFF	; 255
   1adc8:	9f ef       	ldi	r25, 0xFF	; 255
   1adca:	f5 01       	movw	r30, r10
   1adcc:	e6 5a       	subi	r30, 0xA6	; 166
   1adce:	ff 4f       	sbci	r31, 0xFF	; 255
   1add0:	91 83       	std	Z+1, r25	; 0x01
   1add2:	80 83       	st	Z, r24
   1add4:	74 01       	movw	r14, r8
   1add6:	6e 01       	movw	r12, r28
   1add8:	91 e0       	ldi	r25, 0x01	; 1
   1adda:	c9 0e       	add	r12, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   1addc:	d9 1e       	adc	r13, r25
   1adde:	b7 01       	movw	r22, r14
   1ade0:	c5 01       	movw	r24, r10
   1ade2:	0e 94 cc cc 	call	0x19998	; 0x19998 <lif_dir2str>
   1ade6:	a0 e2       	ldi	r26, 0x20	; 32
   1ade8:	ea 0e       	add	r14, r26

    // Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   1adea:	f1 1c       	adc	r15, r1
   1adec:	ce 14       	cp	r12, r14
   1adee:	df 04       	cpc	r13, r15
   1adf0:	b1 f7       	brne	.-20     	; 0x1adde <lif_create_volume+0x390>
   1adf2:	c1 2c       	mov	r12, r1
   1adf4:	d1 2c       	mov	r13, r1
   1adf6:	76 01       	movw	r14, r12
   1adf8:	fe 01       	movw	r30, r28
   1adfa:	31 96       	adiw	r30, 0x01	; 1
   1adfc:	cf 5f       	subi	r28, 0xFF	; 255
   1adfe:	de 4f       	sbci	r29, 0xFE	; 254
   1ae00:	f9 83       	std	Y+1, r31	; 0x01
   1ae02:	e8 83       	st	Y, r30
   1ae04:	c1 50       	subi	r28, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
   1ae06:	d1 40       	sbci	r29, 0x01	; 1
   1ae08:	84 e6       	ldi	r24, 0x64	; 100
   1ae0a:	28 2e       	mov	r2, r24
   1ae0c:	31 2c       	mov	r3, r1
   1ae0e:	41 2c       	mov	r4, r1
            printf("Wrote: %ld\r", count);
   1ae10:	51 2c       	mov	r5, r1
   1ae12:	8b ed       	ldi	r24, 0xDB	; 219
   1ae14:	9c e3       	ldi	r25, 0x3C	; 60
   1ae16:	3c 01       	movw	r6, r24
   1ae18:	81 2c       	mov	r8, r1
   1ae1a:	cd 5f       	subi	r28, 0xFD	; 253
   1ae1c:	de 4f       	sbci	r29, 0xFE	; 254
   1ae1e:	28 81       	ld	r18, Y
   1ae20:	39 81       	ldd	r19, Y+1	; 0x01
   1ae22:	4a 81       	ldd	r20, Y+2	; 0x02
   1ae24:	5b 81       	ldd	r21, Y+3	; 0x03
   1ae26:	c3 50       	subi	r28, 0x03	; 3
   1ae28:	d1 40       	sbci	r29, 0x01	; 1
   1ae2a:	2c 0d       	add	r18, r12
   1ae2c:	3d 1d       	adc	r19, r13
   1ae2e:	4e 1d       	adc	r20, r14
   1ae30:	5f 1d       	adc	r21, r15
   1ae32:	c1 5f       	subi	r28, 0xF1	; 241
   1ae34:	de 4f       	sbci	r29, 0xFE	; 254
   1ae36:	28 83       	st	Y, r18
   1ae38:	39 83       	std	Y+1, r19	; 0x01
   1ae3a:	4a 83       	std	Y+2, r20	; 0x02
   1ae3c:	5b 83       	std	Y+3, r21	; 0x03
   1ae3e:	cf 50       	subi	r28, 0x0F	; 15
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   1ae40:	d1 40       	sbci	r29, 0x01	; 1
   1ae42:	cd 5e       	subi	r28, 0xED	; 237
   1ae44:	de 4f       	sbci	r29, 0xFE	; 254
   1ae46:	88 81       	ld	r24, Y
   1ae48:	99 81       	ldd	r25, Y+1	; 0x01
   1ae4a:	aa 81       	ldd	r26, Y+2	; 0x02
   1ae4c:	bb 81       	ldd	r27, Y+3	; 0x03
   1ae4e:	c3 51       	subi	r28, 0x13	; 19
   1ae50:	d1 40       	sbci	r29, 0x01	; 1
   1ae52:	c8 16       	cp	r12, r24
   1ae54:	d9 06       	cpc	r13, r25
   1ae56:	ea 06       	cpc	r14, r26
   1ae58:	fb 06       	cpc	r15, r27
   1ae5a:	0c f0       	brlt	.+2      	; 0x1ae5e <lif_create_volume+0x410>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1ae5c:	67 c0       	rjmp	.+206    	; 0x1af2c <lif_create_volume+0x4de>
   1ae5e:	00 e0       	ldi	r16, 0x00	; 0
   1ae60:	11 e0       	ldi	r17, 0x01	; 1
   1ae62:	c9 5f       	subi	r28, 0xF9	; 249
   1ae64:	de 4f       	sbci	r29, 0xFE	; 254
   1ae66:	28 81       	ld	r18, Y
   1ae68:	39 81       	ldd	r19, Y+1	; 0x01
   1ae6a:	4a 81       	ldd	r20, Y+2	; 0x02
   1ae6c:	5b 81       	ldd	r21, Y+3	; 0x03
   1ae6e:	c7 50       	subi	r28, 0x07	; 7
   1ae70:	d1 40       	sbci	r29, 0x01	; 1
   1ae72:	be 01       	movw	r22, r28
   1ae74:	6f 5f       	subi	r22, 0xFF	; 255
   1ae76:	7f 4f       	sbci	r23, 0xFF	; 255
   1ae78:	c5 01       	movw	r24, r10
   1ae7a:	0e 94 82 ca 	call	0x19504	; 0x19504 <lif_write>
   1ae7e:	09 2e       	mov	r0, r25
   1ae80:	00 0c       	add	r0, r0
   1ae82:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1ae84:	bb 0b       	sbc	r27, r27
   1ae86:	8f 3f       	cpi	r24, 0xFF	; 255
   1ae88:	91 05       	cpc	r25, r1
   1ae8a:	a1 05       	cpc	r26, r1
   1ae8c:	b1 05       	cpc	r27, r1
   1ae8e:	09 f0       	breq	.+2      	; 0x1ae92 <lif_create_volume+0x444>
   1ae90:	0c f4       	brge	.+2      	; 0x1ae94 <lif_create_volume+0x446>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1ae92:	f5 c0       	rjmp	.+490    	; 0x1b07e <lif_create_volume+0x630>
   1ae94:	c9 5f       	subi	r28, 0xF9	; 249
   1ae96:	de 4f       	sbci	r29, 0xFE	; 254
   1ae98:	28 81       	ld	r18, Y
   1ae9a:	39 81       	ldd	r19, Y+1	; 0x01
   1ae9c:	4a 81       	ldd	r20, Y+2	; 0x02
   1ae9e:	5b 81       	ldd	r21, Y+3	; 0x03
   1aea0:	c7 50       	subi	r28, 0x07	; 7
   1aea2:	d1 40       	sbci	r29, 0x01	; 1
   1aea4:	28 0f       	add	r18, r24
   1aea6:	39 1f       	adc	r19, r25
   1aea8:	4a 1f       	adc	r20, r26
   1aeaa:	5b 1f       	adc	r21, r27
   1aeac:	c9 5f       	subi	r28, 0xF9	; 249
   1aeae:	de 4f       	sbci	r29, 0xFE	; 254
   1aeb0:	28 83       	st	Y, r18
   1aeb2:	39 83       	std	Y+1, r19	; 0x01
   1aeb4:	4a 83       	std	Y+2, r20	; 0x02
   1aeb6:	5b 83       	std	Y+3, r21	; 0x03
   1aeb8:	c7 50       	subi	r28, 0x07	; 7
        if((count % 100) == 0)
   1aeba:	d1 40       	sbci	r29, 0x01	; 1
   1aebc:	c1 5f       	subi	r28, 0xF1	; 241
   1aebe:	de 4f       	sbci	r29, 0xFE	; 254
   1aec0:	68 81       	ld	r22, Y
   1aec2:	79 81       	ldd	r23, Y+1	; 0x01
   1aec4:	8a 81       	ldd	r24, Y+2	; 0x02
   1aec6:	9b 81       	ldd	r25, Y+3	; 0x03
   1aec8:	cf 50       	subi	r28, 0x0F	; 15
   1aeca:	d1 40       	sbci	r29, 0x01	; 1
   1aecc:	a2 01       	movw	r20, r4
   1aece:	91 01       	movw	r18, r2
   1aed0:	0e 94 e9 eb 	call	0x1d7d2	; 0x1d7d2 <__divmodsi4>
   1aed4:	67 2b       	or	r22, r23
   1aed6:	68 2b       	or	r22, r24
   1aed8:	69 2b       	or	r22, r25
            printf("Wrote: %ld\r", count);
   1aeda:	11 f5       	brne	.+68     	; 0x1af20 <lif_create_volume+0x4d2>
   1aedc:	ce 5e       	subi	r28, 0xEE	; 238
   1aede:	de 4f       	sbci	r29, 0xFE	; 254
   1aee0:	38 81       	ld	r19, Y
   1aee2:	c2 51       	subi	r28, 0x12	; 18
   1aee4:	d1 40       	sbci	r29, 0x01	; 1
   1aee6:	3f 93       	push	r19
   1aee8:	cf 5e       	subi	r28, 0xEF	; 239
   1aeea:	de 4f       	sbci	r29, 0xFE	; 254
   1aeec:	48 81       	ld	r20, Y
   1aeee:	c1 51       	subi	r28, 0x11	; 17
   1aef0:	d1 40       	sbci	r29, 0x01	; 1
   1aef2:	4f 93       	push	r20
   1aef4:	c0 5f       	subi	r28, 0xF0	; 240
   1aef6:	de 4f       	sbci	r29, 0xFE	; 254
   1aef8:	58 81       	ld	r21, Y
   1aefa:	c0 51       	subi	r28, 0x10	; 16
   1aefc:	d1 40       	sbci	r29, 0x01	; 1
   1aefe:	5f 93       	push	r21
   1af00:	c1 5f       	subi	r28, 0xF1	; 241
   1af02:	de 4f       	sbci	r29, 0xFE	; 254
   1af04:	88 81       	ld	r24, Y
   1af06:	cf 50       	subi	r28, 0x0F	; 15
   1af08:	d1 40       	sbci	r29, 0x01	; 1
   1af0a:	8f 93       	push	r24
   1af0c:	1f 92       	push	r1
   1af0e:	7f 92       	push	r7
   1af10:	6f 92       	push	r6
   1af12:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1af16:	0f b6       	in	r0, 0x3f	; 63
   1af18:	f8 94       	cli
   1af1a:	de bf       	out	0x3e, r29	; 62
   1af1c:	0f be       	out	0x3f, r0	; 63
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   1af1e:	cd bf       	out	0x3d, r28	; 61
   1af20:	bf ef       	ldi	r27, 0xFF	; 255
   1af22:	cb 1a       	sub	r12, r27
   1af24:	db 0a       	sbc	r13, r27
   1af26:	eb 0a       	sbc	r14, r27
   1af28:	fb 0a       	sbc	r15, r27
            printf("Wrote: %ld\r", count);
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   1af2a:	77 cf       	rjmp	.-274    	; 0x1ae1a <lif_create_volume+0x3cc>
   1af2c:	80 e0       	ldi	r24, 0x00	; 0
   1af2e:	91 e0       	ldi	r25, 0x01	; 1
   1af30:	cf 5f       	subi	r28, 0xFF	; 255
   1af32:	de 4f       	sbci	r29, 0xFE	; 254
   1af34:	a8 81       	ld	r26, Y
   1af36:	b9 81       	ldd	r27, Y+1	; 0x01
   1af38:	c1 50       	subi	r28, 0x01	; 1
   1af3a:	d1 40       	sbci	r29, 0x01	; 1
   1af3c:	fc 01       	movw	r30, r24
   1af3e:	1d 92       	st	X+, r1
   1af40:	31 97       	sbiw	r30, 0x01	; 1
    for(i=0;i<filesectors;++i)
   1af42:	e9 f7       	brne	.-6      	; 0x1af3e <lif_create_volume+0x4f0>
   1af44:	41 2c       	mov	r4, r1
   1af46:	51 2c       	mov	r5, r1
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("Wrote: %ld\r", count);
   1af48:	32 01       	movw	r6, r4
   1af4a:	8f ec       	ldi	r24, 0xCF	; 207
   1af4c:	9c e3       	ldi	r25, 0x3C	; 60
   1af4e:	9c 01       	movw	r18, r24
   1af50:	40 e0       	ldi	r20, 0x00	; 0
   1af52:	cd 5f       	subi	r28, 0xFD	; 253
   1af54:	de 4f       	sbci	r29, 0xFE	; 254
   1af56:	28 83       	st	Y, r18
   1af58:	39 83       	std	Y+1, r19	; 0x01
   1af5a:	4a 83       	std	Y+2, r20	; 0x02
   1af5c:	c3 50       	subi	r28, 0x03	; 3
   1af5e:	d1 40       	sbci	r29, 0x01	; 1
   1af60:	c1 5f       	subi	r28, 0xF1	; 241
   1af62:	de 4f       	sbci	r29, 0xFE	; 254
   1af64:	c8 80       	ld	r12, Y
   1af66:	d9 80       	ldd	r13, Y+1	; 0x01
   1af68:	ea 80       	ldd	r14, Y+2	; 0x02
   1af6a:	fb 80       	ldd	r15, Y+3	; 0x03
   1af6c:	cf 50       	subi	r28, 0x0F	; 15
   1af6e:	d1 40       	sbci	r29, 0x01	; 1
   1af70:	c4 0c       	add	r12, r4
   1af72:	d5 1c       	adc	r13, r5
   1af74:	e6 1c       	adc	r14, r6
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1af76:	f7 1c       	adc	r15, r7
   1af78:	c5 5f       	subi	r28, 0xF5	; 245
   1af7a:	de 4f       	sbci	r29, 0xFE	; 254
   1af7c:	28 81       	ld	r18, Y
   1af7e:	39 81       	ldd	r19, Y+1	; 0x01
   1af80:	4a 81       	ldd	r20, Y+2	; 0x02
   1af82:	5b 81       	ldd	r21, Y+3	; 0x03
   1af84:	cb 50       	subi	r28, 0x0B	; 11
   1af86:	d1 40       	sbci	r29, 0x01	; 1
   1af88:	42 16       	cp	r4, r18
   1af8a:	53 06       	cpc	r5, r19
   1af8c:	64 06       	cpc	r6, r20
   1af8e:	75 06       	cpc	r7, r21
   1af90:	0c f0       	brlt	.+2      	; 0x1af94 <lif_create_volume+0x546>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1af92:	59 c0       	rjmp	.+178    	; 0x1b046 <lif_create_volume+0x5f8>
   1af94:	00 e0       	ldi	r16, 0x00	; 0
   1af96:	11 e0       	ldi	r17, 0x01	; 1
   1af98:	c9 5f       	subi	r28, 0xF9	; 249
   1af9a:	de 4f       	sbci	r29, 0xFE	; 254
   1af9c:	28 81       	ld	r18, Y
   1af9e:	39 81       	ldd	r19, Y+1	; 0x01
   1afa0:	4a 81       	ldd	r20, Y+2	; 0x02
   1afa2:	5b 81       	ldd	r21, Y+3	; 0x03
   1afa4:	c7 50       	subi	r28, 0x07	; 7
   1afa6:	d1 40       	sbci	r29, 0x01	; 1
   1afa8:	be 01       	movw	r22, r28
   1afaa:	6f 5f       	subi	r22, 0xFF	; 255
   1afac:	7f 4f       	sbci	r23, 0xFF	; 255
   1afae:	c5 01       	movw	r24, r10
   1afb0:	0e 94 82 ca 	call	0x19504	; 0x19504 <lif_write>
   1afb4:	09 2e       	mov	r0, r25
   1afb6:	00 0c       	add	r0, r0
   1afb8:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1afba:	bb 0b       	sbc	r27, r27
   1afbc:	8f 3f       	cpi	r24, 0xFF	; 255
   1afbe:	91 05       	cpc	r25, r1
   1afc0:	a1 05       	cpc	r26, r1
   1afc2:	b1 05       	cpc	r27, r1
   1afc4:	09 f0       	breq	.+2      	; 0x1afc8 <lif_create_volume+0x57a>
   1afc6:	0c f4       	brge	.+2      	; 0x1afca <lif_create_volume+0x57c>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1afc8:	5a c0       	rjmp	.+180    	; 0x1b07e <lif_create_volume+0x630>
   1afca:	c9 5f       	subi	r28, 0xF9	; 249
   1afcc:	de 4f       	sbci	r29, 0xFE	; 254
   1afce:	28 81       	ld	r18, Y
   1afd0:	39 81       	ldd	r19, Y+1	; 0x01
   1afd2:	4a 81       	ldd	r20, Y+2	; 0x02
   1afd4:	5b 81       	ldd	r21, Y+3	; 0x03
   1afd6:	c7 50       	subi	r28, 0x07	; 7
   1afd8:	d1 40       	sbci	r29, 0x01	; 1
   1afda:	28 0f       	add	r18, r24
   1afdc:	39 1f       	adc	r19, r25
   1afde:	4a 1f       	adc	r20, r26
   1afe0:	5b 1f       	adc	r21, r27
   1afe2:	c9 5f       	subi	r28, 0xF9	; 249
   1afe4:	de 4f       	sbci	r29, 0xFE	; 254
   1afe6:	28 83       	st	Y, r18
   1afe8:	39 83       	std	Y+1, r19	; 0x01
   1afea:	4a 83       	std	Y+2, r20	; 0x02
   1afec:	5b 83       	std	Y+3, r21	; 0x03
   1afee:	c7 50       	subi	r28, 0x07	; 7
        if((count % 100) == 0)
   1aff0:	d1 40       	sbci	r29, 0x01	; 1
   1aff2:	c7 01       	movw	r24, r14
   1aff4:	b6 01       	movw	r22, r12
   1aff6:	24 e6       	ldi	r18, 0x64	; 100
   1aff8:	30 e0       	ldi	r19, 0x00	; 0
   1affa:	40 e0       	ldi	r20, 0x00	; 0
   1affc:	50 e0       	ldi	r21, 0x00	; 0
   1affe:	0e 94 e9 eb 	call	0x1d7d2	; 0x1d7d2 <__divmodsi4>
   1b002:	67 2b       	or	r22, r23
   1b004:	68 2b       	or	r22, r24
   1b006:	69 2b       	or	r22, r25
            printf("Wrote: %ld\r", count);
   1b008:	c1 f4       	brne	.+48     	; 0x1b03a <lif_create_volume+0x5ec>
   1b00a:	ff 92       	push	r15
   1b00c:	ef 92       	push	r14
   1b00e:	df 92       	push	r13
   1b010:	cf 92       	push	r12
   1b012:	1f 92       	push	r1
   1b014:	cc 5f       	subi	r28, 0xFC	; 252
   1b016:	de 4f       	sbci	r29, 0xFE	; 254
   1b018:	38 81       	ld	r19, Y
   1b01a:	c4 50       	subi	r28, 0x04	; 4
   1b01c:	d1 40       	sbci	r29, 0x01	; 1
   1b01e:	3f 93       	push	r19
   1b020:	cd 5f       	subi	r28, 0xFD	; 253
   1b022:	de 4f       	sbci	r29, 0xFE	; 254
   1b024:	48 81       	ld	r20, Y
   1b026:	c3 50       	subi	r28, 0x03	; 3
   1b028:	d1 40       	sbci	r29, 0x01	; 1
   1b02a:	4f 93       	push	r20
   1b02c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1b030:	0f b6       	in	r0, 0x3f	; 63
   1b032:	f8 94       	cli
   1b034:	de bf       	out	0x3e, r29	; 62
   1b036:	0f be       	out	0x3f, r0	; 63
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1b038:	cd bf       	out	0x3d, r28	; 61
   1b03a:	9f ef       	ldi	r25, 0xFF	; 255
   1b03c:	49 1a       	sub	r4, r25
   1b03e:	59 0a       	sbc	r5, r25
   1b040:	69 0a       	sbc	r6, r25
   1b042:	79 0a       	sbc	r7, r25
        offset += size;
        if((count % 100) == 0)
            printf("Wrote: %ld\r", count);
        ++count;
    }
    printf("Wrote: %ld\n", count);
   1b044:	8d cf       	rjmp	.-230    	; 0x1af60 <lif_create_volume+0x512>
   1b046:	ff 92       	push	r15
   1b048:	ef 92       	push	r14
   1b04a:	df 92       	push	r13
   1b04c:	cf 92       	push	r12
   1b04e:	83 ec       	ldi	r24, 0xC3	; 195
   1b050:	9c e3       	ldi	r25, 0x3C	; 60
   1b052:	1f 92       	push	r1
   1b054:	9f 93       	push	r25
   1b056:	8f 93       	push	r24
   1b058:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
    // Directory index
    LIF->dirindex = -1;
   1b05c:	8f ef       	ldi	r24, 0xFF	; 255
   1b05e:	9f ef       	ldi	r25, 0xFF	; 255
   1b060:	d5 01       	movw	r26, r10
   1b062:	91 96       	adiw	r26, 0x21	; 33
   1b064:	9c 93       	st	X, r25
   1b066:	8e 93       	st	-X, r24
    printf("Wrote: %ld\n", count);

    lif_rewinddir(LIF);

    // As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   1b068:	90 97       	sbiw	r26, 0x20	; 32
   1b06a:	c5 01       	movw	r24, r10
   1b06c:	0e 94 33 d0 	call	0x1a066	; 0x1a066 <lif_check_volume>
   1b070:	0f b6       	in	r0, 0x3f	; 63
   1b072:	f8 94       	cli
   1b074:	de bf       	out	0x3e, r29	; 62
   1b076:	0f be       	out	0x3f, r0	; 63
   1b078:	cd bf       	out	0x3d, r28	; 61
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b07a:	89 2b       	or	r24, r25
   1b07c:	19 f4       	brne	.+6      	; 0x1b084 <lif_create_volume+0x636>
   1b07e:	c5 01       	movw	r24, r10
   1b080:	80 da       	rcall	.-2816   	; 0x1a582 <lif_close_volume>
        lif_closedir(LIF);
        return(NULL);
    }

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
   1b082:	08 c0       	rjmp	.+16     	; 0x1b094 <lif_create_volume+0x646>
   1b084:	c5 01       	movw	r24, r10
   1b086:	db db       	rcall	.-2122   	; 0x1a83e <lif_updatefree>
   1b088:	7c 01       	movw	r14, r24
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b08a:	89 2b       	or	r24, r25
   1b08c:	31 f4       	brne	.+12     	; 0x1b09a <lif_create_volume+0x64c>
   1b08e:	c5 01       	movw	r24, r10

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   1b090:	78 da       	rcall	.-2832   	; 0x1a582 <lif_close_volume>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   1b092:	04 c0       	rjmp	.+8      	; 0x1b09c <lif_create_volume+0x64e>
   1b094:	e1 2c       	mov	r14, r1
   1b096:	f1 2c       	mov	r15, r1
   1b098:	01 c0       	rjmp	.+2      	; 0x1b09c <lif_create_volume+0x64e>
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   1b09a:	75 01       	movw	r14, r10
   1b09c:	c7 01       	movw	r24, r14
   1b09e:	ca 5e       	subi	r28, 0xEA	; 234
   1b0a0:	de 4f       	sbci	r29, 0xFE	; 254
   1b0a2:	e2 e1       	ldi	r30, 0x12	; 18
   1b0a4:	0c 94 50 ec 	jmp	0x1d8a0	; 0x1d8a0 <__epilogue_restores__>

0001b0a8 <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   1b0a8:	ac e0       	ldi	r26, 0x0C	; 12
   1b0aa:	b0 e0       	ldi	r27, 0x00	; 0
   1b0ac:	ea e5       	ldi	r30, 0x5A	; 90
   1b0ae:	f8 ed       	ldi	r31, 0xD8	; 216
   1b0b0:	0c 94 34 ec 	jmp	0x1d868	; 0x1d868 <__prologue_saves__>
   1b0b4:	9c 87       	std	Y+12, r25	; 0x0c
   1b0b6:	8b 87       	std	Y+11, r24	; 0x0b
   1b0b8:	6a 01       	movw	r12, r20
   1b0ba:	7b 01       	movw	r14, r22

    // Directory index
    index = 0;

    // Start of free space
    start = LIF->filestart;
   1b0bc:	fc 01       	movw	r30, r24
   1b0be:	84 84       	ldd	r8, Z+12	; 0x0c
   1b0c0:	95 84       	ldd	r9, Z+13	; 0x0d
   1b0c2:	a6 84       	ldd	r10, Z+14	; 0x0e

    // Update all file information
    if(lif_updatefree(LIF) == NULL)
   1b0c4:	b7 84       	ldd	r11, Z+15	; 0x0f
   1b0c6:	bb db       	rcall	.-2186   	; 0x1a83e <lif_updatefree>
   1b0c8:	89 2b       	or	r24, r25
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   1b0ca:	b1 f4       	brne	.+44     	; 0x1b0f8 <lif_newdir+0x50>
   1b0cc:	ff 92       	push	r15
   1b0ce:	ef 92       	push	r14
   1b0d0:	df 92       	push	r13
   1b0d2:	cf 92       	push	r12
   1b0d4:	eb 85       	ldd	r30, Y+11	; 0x0b
   1b0d6:	fc 85       	ldd	r31, Y+12	; 0x0c
   1b0d8:	83 8d       	ldd	r24, Z+27	; 0x1b
   1b0da:	8f 93       	push	r24
   1b0dc:	82 8d       	ldd	r24, Z+26	; 0x1a
   1b0de:	8f 93       	push	r24
   1b0e0:	81 8d       	ldd	r24, Z+25	; 0x19
   1b0e2:	8f 93       	push	r24
   1b0e4:	80 8d       	ldd	r24, Z+24	; 0x18
   1b0e6:	8f 93       	push	r24
   1b0e8:	84 ee       	ldi	r24, 0xE4	; 228
   1b0ea:	9b e3       	ldi	r25, 0x3B	; 59
   1b0ec:	1f 92       	push	r1
   1b0ee:	9f 93       	push	r25
   1b0f0:	8f 93       	push	r24
   1b0f2:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        return(-1);
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
   1b0f6:	2c c0       	rjmp	.+88     	; 0x1b150 <lif_newdir+0xa8>
   1b0f8:	eb 85       	ldd	r30, Y+11	; 0x0b
   1b0fa:	fc 85       	ldd	r31, Y+12	; 0x0c
   1b0fc:	80 8d       	ldd	r24, Z+24	; 0x18
   1b0fe:	91 8d       	ldd	r25, Z+25	; 0x19
   1b100:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1b102:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1b104:	8c 15       	cp	r24, r12
   1b106:	9d 05       	cpc	r25, r13
   1b108:	ae 05       	cpc	r26, r14
   1b10a:	bf 05       	cpc	r27, r15
   1b10c:	b4 f0       	brlt	.+44     	; 0x1b13a <lif_newdir+0x92>
   1b10e:	44 24       	eor	r4, r4
   1b110:	43 94       	inc	r4
   1b112:	51 2c       	mov	r5, r1
   1b114:	61 2c       	mov	r6, r1
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1b116:	71 2c       	mov	r7, r1
   1b118:	e6 5a       	subi	r30, 0xA6	; 166
   1b11a:	ff 4f       	sbci	r31, 0xFF	; 255
   1b11c:	fc 83       	std	Y+4, r31	; 0x04
   1b11e:	eb 83       	std	Y+3, r30	; 0x03
   1b120:	8b 85       	ldd	r24, Y+11	; 0x0b
   1b122:	9c 85       	ldd	r25, Y+12	; 0x0c
   1b124:	84 5a       	subi	r24, 0xA4	; 164
   1b126:	9f 4f       	sbci	r25, 0xFF	; 255
   1b128:	9a 83       	std	Y+2, r25	; 0x02
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1b12a:	89 83       	std	Y+1, r24	; 0x01
   1b12c:	eb 85       	ldd	r30, Y+11	; 0x0b
   1b12e:	fc 85       	ldd	r31, Y+12	; 0x0c
   1b130:	e0 5a       	subi	r30, 0xA0	; 160
   1b132:	ff 4f       	sbci	r31, 0xFF	; 255
   1b134:	fe 83       	std	Y+6, r31	; 0x06
   1b136:	ed 83       	std	Y+5, r30	; 0x05
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   1b138:	23 c0       	rjmp	.+70     	; 0x1b180 <lif_newdir+0xd8>
   1b13a:	bf 93       	push	r27
   1b13c:	af 93       	push	r26
   1b13e:	9f 93       	push	r25
   1b140:	8f 93       	push	r24
   1b142:	8b eb       	ldi	r24, 0xBB	; 187
   1b144:	9b e3       	ldi	r25, 0x3B	; 59
   1b146:	1f 92       	push	r1
   1b148:	9f 93       	push	r25
   1b14a:	8f 93       	push	r24
   1b14c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        return(-1);
   1b150:	0f b6       	in	r0, 0x3f	; 63
   1b152:	f8 94       	cli
   1b154:	de bf       	out	0x3e, r29	; 62
   1b156:	0f be       	out	0x3f, r0	; 63
   1b158:	cd bf       	out	0x3d, r28	; 61
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1b15a:	05 c1       	rjmp	.+522    	; 0x1b366 <lif_newdir+0x2be>
   1b15c:	eb 81       	ldd	r30, Y+3	; 0x03
   1b15e:	fc 81       	ldd	r31, Y+4	; 0x04
   1b160:	80 81       	ld	r24, Z
   1b162:	91 81       	ldd	r25, Z+1	; 0x01
   1b164:	8f 3f       	cpi	r24, 0xFF	; 255
   1b166:	ff ef       	ldi	r31, 0xFF	; 255
   1b168:	9f 07       	cpc	r25, r31
            return(index);
        }


        // PURGED records
        if(LIF->DIR.FileType == 0)
   1b16a:	a1 f0       	breq	.+40     	; 0x1b194 <lif_newdir+0xec>
   1b16c:	89 2b       	or	r24, r25
   1b16e:	09 f0       	breq	.+2      	; 0x1b172 <lif_newdir+0xca>
        {
            if(freestate == 0)
   1b170:	d0 c0       	rjmp	.+416    	; 0x1b312 <lif_newdir+0x26a>
   1b172:	61 14       	cp	r6, r1
   1b174:	71 04       	cpc	r7, r1
   1b176:	09 f4       	brne	.+2      	; 0x1b17a <lif_newdir+0xd2>
   1b178:	c3 c0       	rjmp	.+390    	; 0x1b300 <lif_newdir+0x258>
   1b17a:	9f ef       	ldi	r25, 0xFF	; 255
   1b17c:	49 1a       	sub	r4, r25
   1b17e:	59 0a       	sbc	r5, r25
   1b180:	82 01       	movw	r16, r4
   1b182:	01 50       	subi	r16, 0x01	; 1

    // Update free space and EOF pointers
    while(1)
    {
        // Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   1b184:	11 09       	sbc	r17, r1
   1b186:	b8 01       	movw	r22, r16
   1b188:	8b 85       	ldd	r24, Y+11	; 0x0b
   1b18a:	9c 85       	ldd	r25, Y+12	; 0x0c
   1b18c:	7b da       	rcall	.-2826   	; 0x1a684 <lif_readdirindex>
   1b18e:	89 2b       	or	r24, r25
   1b190:	29 f7       	brne	.-54     	; 0x1b15c <lif_newdir+0xb4>
        if(LIF->DIR.FileType == 0xffff)
        {

            // Was enough free space found in purged area ?
            // Do NOT need to update EOF!
            if(freestate == 2)
   1b192:	e9 c0       	rjmp	.+466    	; 0x1b366 <lif_newdir+0x2be>
   1b194:	22 e0       	ldi	r18, 0x02	; 2
   1b196:	62 16       	cp	r6, r18
   1b198:	71 04       	cpc	r7, r1
   1b19a:	09 f0       	breq	.+2      	; 0x1b19e <lif_newdir+0xf6>
            {
                // Update free pace for new file
                lif_dir_clear(LIF);
   1b19c:	46 c0       	rjmp	.+140    	; 0x1b22a <lif_newdir+0x182>
   1b19e:	8b 85       	ldd	r24, Y+11	; 0x0b
   1b1a0:	9c 85       	ldd	r25, Y+12	; 0x0c
   1b1a2:	0e 94 91 ce 	call	0x19d22	; 0x19d22 <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   1b1a6:	eb 85       	ldd	r30, Y+11	; 0x0b
   1b1a8:	fc 85       	ldd	r31, Y+12	; 0x0c
   1b1aa:	e4 5a       	subi	r30, 0xA4	; 164
   1b1ac:	ff 4f       	sbci	r31, 0xFF	; 255
   1b1ae:	8f 81       	ldd	r24, Y+7	; 0x07
   1b1b0:	80 83       	st	Z, r24
   1b1b2:	98 85       	ldd	r25, Y+8	; 0x08
   1b1b4:	91 83       	std	Z+1, r25	; 0x01
   1b1b6:	29 85       	ldd	r18, Y+9	; 0x09
   1b1b8:	22 83       	std	Z+2, r18	; 0x02
   1b1ba:	8a 85       	ldd	r24, Y+10	; 0x0a
                LIF->DIR.FileSectors = sectors;
   1b1bc:	83 83       	std	Z+3, r24	; 0x03
   1b1be:	eb 85       	ldd	r30, Y+11	; 0x0b
   1b1c0:	fc 85       	ldd	r31, Y+12	; 0x0c
   1b1c2:	e0 5a       	subi	r30, 0xA0	; 160
   1b1c4:	ff 4f       	sbci	r31, 0xFF	; 255
   1b1c6:	c0 82       	st	Z, r12
   1b1c8:	d1 82       	std	Z+1, r13	; 0x01
   1b1ca:	e2 82       	std	Z+2, r14	; 0x02
                LIF->usedsectors += sectors;
   1b1cc:	f3 82       	std	Z+3, r15	; 0x03
   1b1ce:	eb 85       	ldd	r30, Y+11	; 0x0b
   1b1d0:	fc 85       	ldd	r31, Y+12	; 0x0c
   1b1d2:	84 89       	ldd	r24, Z+20	; 0x14
   1b1d4:	95 89       	ldd	r25, Z+21	; 0x15
   1b1d6:	a6 89       	ldd	r26, Z+22	; 0x16
   1b1d8:	b7 89       	ldd	r27, Z+23	; 0x17
   1b1da:	8c 0d       	add	r24, r12
   1b1dc:	9d 1d       	adc	r25, r13
   1b1de:	ae 1d       	adc	r26, r14
   1b1e0:	bf 1d       	adc	r27, r15
   1b1e2:	84 8b       	std	Z+20, r24	; 0x14
   1b1e4:	95 8b       	std	Z+21, r25	; 0x15
   1b1e6:	a6 8b       	std	Z+22, r26	; 0x16
                LIF->freesectors -= sectors;
   1b1e8:	b7 8b       	std	Z+23, r27	; 0x17
   1b1ea:	80 8d       	ldd	r24, Z+24	; 0x18
   1b1ec:	91 8d       	ldd	r25, Z+25	; 0x19
   1b1ee:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1b1f0:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1b1f2:	8c 19       	sub	r24, r12
   1b1f4:	9d 09       	sbc	r25, r13
   1b1f6:	ae 09       	sbc	r26, r14
   1b1f8:	bf 09       	sbc	r27, r15
   1b1fa:	80 8f       	std	Z+24, r24	; 0x18
   1b1fc:	91 8f       	std	Z+25, r25	; 0x19
   1b1fe:	a2 8f       	std	Z+26, r26	; 0x1a
                LIF->files++;
   1b200:	b3 8f       	std	Z+27, r27	; 0x1b
   1b202:	84 8d       	ldd	r24, Z+28	; 0x1c
   1b204:	95 8d       	ldd	r25, Z+29	; 0x1d
   1b206:	01 96       	adiw	r24, 0x01	; 1
   1b208:	95 8f       	std	Z+29, r25	; 0x1d
                LIF->purged--;
   1b20a:	84 8f       	std	Z+28, r24	; 0x1c
   1b20c:	86 8d       	ldd	r24, Z+30	; 0x1e
   1b20e:	97 8d       	ldd	r25, Z+31	; 0x1f
   1b210:	01 97       	sbiw	r24, 0x01	; 1
   1b212:	97 8f       	std	Z+31, r25	; 0x1f
                LIF->dirindex = freeindex;
   1b214:	86 8f       	std	Z+30, r24	; 0x1e
                // Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   1b216:	20 a2       	std	Z+32, r2	; 0x20
   1b218:	31 a2       	std	Z+33, r3	; 0x21
   1b21a:	b1 01       	movw	r22, r2
   1b21c:	cf 01       	movw	r24, r30
   1b21e:	9b da       	rcall	.-2762   	; 0x1a756 <lif_writedirindex>
   1b220:	89 2b       	or	r24, r25
   1b222:	09 f4       	brne	.+2      	; 0x1b226 <lif_newdir+0x17e>
   1b224:	a0 c0       	rjmp	.+320    	; 0x1b366 <lif_newdir+0x2be>
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & 0x400)
   1b226:	c1 01       	movw	r24, r2
   1b228:	a0 c0       	rjmp	.+320    	; 0x1b36a <lif_newdir+0x2c2>
   1b22a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b22e:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n", 
   1b232:	92 ff       	sbrs	r25, 2
   1b234:	20 c0       	rjmp	.+64     	; 0x1b276 <lif_newdir+0x1ce>
   1b236:	eb 85       	ldd	r30, Y+11	; 0x0b
   1b238:	fc 85       	ldd	r31, Y+12	; 0x0c
   1b23a:	83 8d       	ldd	r24, Z+27	; 0x1b
   1b23c:	8f 93       	push	r24
   1b23e:	82 8d       	ldd	r24, Z+26	; 0x1a
   1b240:	8f 93       	push	r24
   1b242:	81 8d       	ldd	r24, Z+25	; 0x19
   1b244:	8f 93       	push	r24
   1b246:	80 8d       	ldd	r24, Z+24	; 0x18
   1b248:	8f 93       	push	r24
   1b24a:	ff 92       	push	r15
   1b24c:	ef 92       	push	r14
   1b24e:	df 92       	push	r13
   1b250:	cf 92       	push	r12
   1b252:	bf 92       	push	r11
   1b254:	af 92       	push	r10
   1b256:	9f 92       	push	r9
   1b258:	8f 92       	push	r8
   1b25a:	1f 93       	push	r17
   1b25c:	0f 93       	push	r16
   1b25e:	8a e6       	ldi	r24, 0x6A	; 106
   1b260:	9b e3       	ldi	r25, 0x3B	; 59
   1b262:	1f 92       	push	r1
   1b264:	9f 93       	push	r25
   1b266:	8f 93       	push	r24
   1b268:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1b26c:	0f b6       	in	r0, 0x3f	; 63
   1b26e:	f8 94       	cli
   1b270:	de bf       	out	0x3e, r29	; 62
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

            // Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   1b272:	0f be       	out	0x3f, r0	; 63
   1b274:	cd bf       	out	0x3d, r28	; 61
   1b276:	b8 01       	movw	r22, r16
   1b278:	6f 5f       	subi	r22, 0xFF	; 255
   1b27a:	7f 4f       	sbci	r23, 0xFF	; 255
   1b27c:	8b 85       	ldd	r24, Y+11	; 0x0b
   1b27e:	9c 85       	ldd	r25, Y+12	; 0x0c
   1b280:	c6 da       	rcall	.-2676   	; 0x1a80e <lif_writedirEOF>
   1b282:	89 2b       	or	r24, r25
            {
                break;
            }

            lif_dir_clear(LIF);
   1b284:	09 f4       	brne	.+2      	; 0x1b288 <lif_newdir+0x1e0>
   1b286:	6f c0       	rjmp	.+222    	; 0x1b366 <lif_newdir+0x2be>
   1b288:	8b 85       	ldd	r24, Y+11	; 0x0b
   1b28a:	9c 85       	ldd	r25, Y+12	; 0x0c
            LIF->DIR.FileStartSector = start;
   1b28c:	0e 94 91 ce 	call	0x19d22	; 0x19d22 <lif_dir_clear>
   1b290:	eb 85       	ldd	r30, Y+11	; 0x0b
   1b292:	fc 85       	ldd	r31, Y+12	; 0x0c
   1b294:	e4 5a       	subi	r30, 0xA4	; 164
   1b296:	ff 4f       	sbci	r31, 0xFF	; 255
   1b298:	80 82       	st	Z, r8
   1b29a:	91 82       	std	Z+1, r9	; 0x01
            LIF->DIR.FileSectors = sectors;
   1b29c:	a2 82       	std	Z+2, r10	; 0x02
   1b29e:	b3 82       	std	Z+3, r11	; 0x03
   1b2a0:	eb 85       	ldd	r30, Y+11	; 0x0b
   1b2a2:	fc 85       	ldd	r31, Y+12	; 0x0c
   1b2a4:	e0 5a       	subi	r30, 0xA0	; 160
   1b2a6:	ff 4f       	sbci	r31, 0xFF	; 255
   1b2a8:	c0 82       	st	Z, r12
   1b2aa:	d1 82       	std	Z+1, r13	; 0x01
            LIF->usedsectors += sectors;
   1b2ac:	e2 82       	std	Z+2, r14	; 0x02
   1b2ae:	f3 82       	std	Z+3, r15	; 0x03
   1b2b0:	eb 85       	ldd	r30, Y+11	; 0x0b
   1b2b2:	fc 85       	ldd	r31, Y+12	; 0x0c
   1b2b4:	84 89       	ldd	r24, Z+20	; 0x14
   1b2b6:	95 89       	ldd	r25, Z+21	; 0x15
   1b2b8:	a6 89       	ldd	r26, Z+22	; 0x16
   1b2ba:	b7 89       	ldd	r27, Z+23	; 0x17
   1b2bc:	8c 0d       	add	r24, r12
   1b2be:	9d 1d       	adc	r25, r13
   1b2c0:	ae 1d       	adc	r26, r14
   1b2c2:	bf 1d       	adc	r27, r15
   1b2c4:	84 8b       	std	Z+20, r24	; 0x14
   1b2c6:	95 8b       	std	Z+21, r25	; 0x15
            LIF->freesectors -= sectors;
   1b2c8:	a6 8b       	std	Z+22, r26	; 0x16
   1b2ca:	b7 8b       	std	Z+23, r27	; 0x17
   1b2cc:	80 8d       	ldd	r24, Z+24	; 0x18
   1b2ce:	91 8d       	ldd	r25, Z+25	; 0x19
   1b2d0:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1b2d2:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1b2d4:	8c 19       	sub	r24, r12
   1b2d6:	9d 09       	sbc	r25, r13
   1b2d8:	ae 09       	sbc	r26, r14
   1b2da:	bf 09       	sbc	r27, r15
   1b2dc:	80 8f       	std	Z+24, r24	; 0x18
   1b2de:	91 8f       	std	Z+25, r25	; 0x19
            LIF->files++;
   1b2e0:	a2 8f       	std	Z+26, r26	; 0x1a
   1b2e2:	b3 8f       	std	Z+27, r27	; 0x1b
   1b2e4:	84 8d       	ldd	r24, Z+28	; 0x1c
   1b2e6:	95 8d       	ldd	r25, Z+29	; 0x1d
            LIF->dirindex = index;
   1b2e8:	01 96       	adiw	r24, 0x01	; 1
            // Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   1b2ea:	95 8f       	std	Z+29, r25	; 0x1d
   1b2ec:	84 8f       	std	Z+28, r24	; 0x1c
   1b2ee:	11 a3       	std	Z+33, r17	; 0x21
   1b2f0:	00 a3       	std	Z+32, r16	; 0x20
   1b2f2:	b8 01       	movw	r22, r16
   1b2f4:	cf 01       	movw	r24, r30
   1b2f6:	2f da       	rcall	.-2978   	; 0x1a756 <lif_writedirindex>
   1b2f8:	89 2b       	or	r24, r25


        // PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   1b2fa:	a9 f1       	breq	.+106    	; 0x1b366 <lif_newdir+0x2be>
   1b2fc:	c8 01       	movw	r24, r16
   1b2fe:	35 c0       	rjmp	.+106    	; 0x1b36a <lif_newdir+0x2c2>
   1b300:	8f 82       	std	Y+7, r8	; 0x07
   1b302:	98 86       	std	Y+8, r9	; 0x08
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   1b304:	a9 86       	std	Y+9, r10	; 0x09
   1b306:	ba 86       	std	Y+10, r11	; 0x0a
   1b308:	18 01       	movw	r2, r16
            }
            ++index;
            continue;
   1b30a:	66 24       	eor	r6, r6
        }
        

        // VALID record
        if(freestate == 1)
   1b30c:	63 94       	inc	r6
   1b30e:	71 2c       	mov	r7, r1
   1b310:	34 cf       	rjmp	.-408    	; 0x1b17a <lif_newdir+0xd2>
   1b312:	f1 e0       	ldi	r31, 0x01	; 1
        {
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   1b314:	6f 16       	cp	r6, r31
   1b316:	71 04       	cpc	r7, r1
   1b318:	a9 f4       	brne	.+42     	; 0x1b344 <lif_newdir+0x29c>
   1b31a:	e9 81       	ldd	r30, Y+1	; 0x01
   1b31c:	fa 81       	ldd	r31, Y+2	; 0x02
   1b31e:	80 81       	ld	r24, Z
   1b320:	91 81       	ldd	r25, Z+1	; 0x01
   1b322:	a2 81       	ldd	r26, Z+2	; 0x02
   1b324:	b3 81       	ldd	r27, Z+3	; 0x03
   1b326:	88 19       	sub	r24, r8
   1b328:	99 09       	sbc	r25, r9
   1b32a:	aa 09       	sbc	r26, r10
   1b32c:	bb 09       	sbc	r27, r11
   1b32e:	8c 15       	cp	r24, r12
   1b330:	9d 05       	cpc	r25, r13
                freestate = 2;      // Found free space in purged record
            else
                freestate = 0;  // Try again
   1b332:	ae 05       	cpc	r26, r14
   1b334:	bf 05       	cpc	r27, r15
   1b336:	1c f4       	brge	.+6      	; 0x1b33e <lif_newdir+0x296>
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;      // Found free space in purged record
   1b338:	61 2c       	mov	r6, r1
   1b33a:	71 2c       	mov	r7, r1
   1b33c:	03 c0       	rjmp	.+6      	; 0x1b344 <lif_newdir+0x29c>
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1b33e:	82 e0       	ldi	r24, 0x02	; 2
   1b340:	68 2e       	mov	r6, r24
   1b342:	71 2c       	mov	r7, r1
   1b344:	e9 81       	ldd	r30, Y+1	; 0x01
   1b346:	fa 81       	ldd	r31, Y+2	; 0x02
   1b348:	80 80       	ld	r8, Z
   1b34a:	91 80       	ldd	r9, Z+1	; 0x01
   1b34c:	a2 80       	ldd	r10, Z+2	; 0x02
   1b34e:	b3 80       	ldd	r11, Z+3	; 0x03
   1b350:	ed 81       	ldd	r30, Y+5	; 0x05
   1b352:	fe 81       	ldd	r31, Y+6	; 0x06
   1b354:	80 81       	ld	r24, Z
   1b356:	91 81       	ldd	r25, Z+1	; 0x01
   1b358:	a2 81       	ldd	r26, Z+2	; 0x02
   1b35a:	b3 81       	ldd	r27, Z+3	; 0x03
   1b35c:	88 0e       	add	r8, r24
   1b35e:	99 1e       	adc	r9, r25
        ++index;
    }
    // ERROR
    return(-1);
   1b360:	aa 1e       	adc	r10, r26
   1b362:	bb 1e       	adc	r11, r27
}
   1b364:	0a cf       	rjmp	.-492    	; 0x1b17a <lif_newdir+0xd2>
   1b366:	8f ef       	ldi	r24, 0xFF	; 255
   1b368:	9f ef       	ldi	r25, 0xFF	; 255
   1b36a:	2c 96       	adiw	r28, 0x0c	; 12
   1b36c:	e2 e1       	ldi	r30, 0x12	; 18
   1b36e:	0c 94 50 ec 	jmp	0x1d8a0	; 0x1d8a0 <__epilogue_restores__>

0001b372 <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   1b372:	a0 e3       	ldi	r26, 0x30	; 48
   1b374:	b1 e0       	ldi	r27, 0x01	; 1
   1b376:	ef eb       	ldi	r30, 0xBF	; 191
   1b378:	f9 ed       	ldi	r31, 0xD9	; 217
   1b37a:	0c 94 3c ec 	jmp	0x1d878	; 0x1d878 <__prologue_saves__+0x10>
   1b37e:	b8 2e       	mov	r11, r24
   1b380:	a9 2e       	mov	r10, r25
   1b382:	6b 01       	movw	r12, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];


    sp = lif_stat(name, (stat_t *)&sb);
   1b384:	be 01       	movw	r22, r28
   1b386:	6f 5f       	subi	r22, 0xFF	; 255
   1b388:	7e 4f       	sbci	r23, 0xFE	; 254
   1b38a:	0e 94 cb c9 	call	0x19396	; 0x19396 <lif_stat>
   1b38e:	8c 01       	movw	r16, r24
    if(sp == NULL)
   1b390:	00 97       	sbiw	r24, 0x00	; 0
   1b392:	09 f1       	breq	.+66     	; 0x1b3d6 <lif_open_volume+0x64>
        return(NULL);


    // To read LIF volume we must have at minimum two sectors
    // volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   1b394:	fc 01       	movw	r30, r24
   1b396:	80 8d       	ldd	r24, Z+24	; 0x18
   1b398:	91 8d       	ldd	r25, Z+25	; 0x19
   1b39a:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1b39c:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1b39e:	81 15       	cp	r24, r1
   1b3a0:	f2 e0       	ldi	r31, 0x02	; 2
   1b3a2:	9f 07       	cpc	r25, r31
   1b3a4:	a1 05       	cpc	r26, r1
   1b3a6:	b1 05       	cpc	r27, r1
   1b3a8:	c8 f4       	brcc	.+50     	; 0x1b3dc <lif_open_volume+0x6a>
    {
        if(debuglevel & 1)
   1b3aa:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1b3ae:	20 ff       	sbrs	r18, 0
   1b3b0:	12 c0       	rjmp	.+36     	; 0x1b3d6 <lif_open_volume+0x64>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   1b3b2:	bf 93       	push	r27
   1b3b4:	af 93       	push	r26
   1b3b6:	9f 93       	push	r25
   1b3b8:	8f 93       	push	r24
   1b3ba:	af 92       	push	r10
   1b3bc:	bf 92       	push	r11
   1b3be:	8b e2       	ldi	r24, 0x2B	; 43
   1b3c0:	9b e3       	ldi	r25, 0x3B	; 59
   1b3c2:	1f 92       	push	r1
   1b3c4:	9f 93       	push	r25
   1b3c6:	8f 93       	push	r24
   1b3c8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1b3cc:	0f b6       	in	r0, 0x3f	; 63
   1b3ce:	f8 94       	cli
   1b3d0:	de bf       	out	0x3e, r29	; 62
   1b3d2:	0f be       	out	0x3f, r0	; 63
   1b3d4:	cd bf       	out	0x3d, r28	; 61
        return(NULL);
   1b3d6:	00 e0       	ldi	r16, 0x00	; 0
   1b3d8:	10 e0       	ldi	r17, 0x00	; 0
   1b3da:	c5 c0       	rjmp	.+394    	; 0x1b566 <lif_open_volume+0x1f4>
    }


    // Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   1b3dc:	64 e7       	ldi	r22, 0x74	; 116
   1b3de:	70 e0       	ldi	r23, 0x00	; 0
   1b3e0:	80 e0       	ldi	r24, 0x00	; 0
   1b3e2:	90 e0       	ldi	r25, 0x00	; 0
   1b3e4:	0e 94 48 c9 	call	0x19290	; 0x19290 <lif_calloc>
   1b3e8:	7c 01       	movw	r14, r24
    if(!LIF)
   1b3ea:	89 2b       	or	r24, r25
   1b3ec:	a1 f3       	breq	.-24     	; 0x1b3d6 <lif_open_volume+0x64>
        return(NULL);

    LIF->name = lif_stralloc(name);
   1b3ee:	8b 2d       	mov	r24, r11
   1b3f0:	9a 2d       	mov	r25, r10
   1b3f2:	0e 94 84 c9 	call	0x19308	; 0x19308 <lif_stralloc>
   1b3f6:	f7 01       	movw	r30, r14
   1b3f8:	91 83       	std	Z+1, r25	; 0x01
   1b3fa:	80 83       	st	Z, r24
    if(!LIF->name)
   1b3fc:	00 97       	sbiw	r24, 0x00	; 0
   1b3fe:	09 f4       	brne	.+2      	; 0x1b402 <lif_open_volume+0x90>
   1b400:	5a c0       	rjmp	.+180    	; 0x1b4b6 <lif_open_volume+0x144>
    {
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
   1b402:	f8 01       	movw	r30, r16
   1b404:	00 8d       	ldd	r16, Z+24	; 0x18
   1b406:	11 8d       	ldd	r17, Z+25	; 0x19
   1b408:	22 8d       	ldd	r18, Z+26	; 0x1a
   1b40a:	33 8d       	ldd	r19, Z+27	; 0x1b
   1b40c:	f7 01       	movw	r30, r14
   1b40e:	00 87       	std	Z+8, r16	; 0x08
   1b410:	11 87       	std	Z+9, r17	; 0x09
   1b412:	22 87       	std	Z+10, r18	; 0x0a
   1b414:	33 87       	std	Z+11, r19	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1b416:	77 27       	eor	r23, r23
   1b418:	63 2f       	mov	r22, r19
   1b41a:	52 2f       	mov	r21, r18
   1b41c:	41 2f       	mov	r20, r17
    if(bytes % (long)LIF_SECTOR_SIZE)
   1b41e:	00 23       	and	r16, r16
   1b420:	21 f0       	breq	.+8      	; 0x1b42a <lif_open_volume+0xb8>
        ++sectors;
   1b422:	4f 5f       	subi	r20, 0xFF	; 255
   1b424:	5f 4f       	sbci	r21, 0xFF	; 255
   1b426:	6f 4f       	sbci	r22, 0xFF	; 255
   1b428:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   1b42a:	f7 01       	movw	r30, r14
   1b42c:	44 83       	std	Z+4, r20	; 0x04
   1b42e:	55 83       	std	Z+5, r21	; 0x05
   1b430:	66 83       	std	Z+6, r22	; 0x06
   1b432:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   1b434:	b6 01       	movw	r22, r12
   1b436:	0e 94 a3 c9 	call	0x19346	; 0x19346 <lif_open>
   1b43a:	f7 01       	movw	r30, r14
   1b43c:	93 83       	std	Z+3, r25	; 0x03
   1b43e:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   1b440:	89 2b       	or	r24, r25
   1b442:	c9 f1       	breq	.+114    	; 0x1b4b6 <lif_open_volume+0x144>
        return(NULL);
    }
        
        
    // Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   1b444:	00 e0       	ldi	r16, 0x00	; 0
   1b446:	11 e0       	ldi	r17, 0x01	; 1
   1b448:	20 e0       	ldi	r18, 0x00	; 0
   1b44a:	30 e0       	ldi	r19, 0x00	; 0
   1b44c:	a9 01       	movw	r20, r18
   1b44e:	be 01       	movw	r22, r28
   1b450:	6f 5f       	subi	r22, 0xFF	; 255
   1b452:	7f 4f       	sbci	r23, 0xFF	; 255
   1b454:	c7 01       	movw	r24, r14
   1b456:	0e 94 29 ca 	call	0x19452	; 0x19452 <lif_read>
   1b45a:	6f 3f       	cpi	r22, 0xFF	; 255
   1b45c:	71 05       	cpc	r23, r1
   1b45e:	81 05       	cpc	r24, r1
   1b460:	91 05       	cpc	r25, r1
   1b462:	09 f0       	breq	.+2      	; 0x1b466 <lif_open_volume+0xf4>
   1b464:	4c f4       	brge	.+18     	; 0x1b478 <lif_open_volume+0x106>
    {
        if(debuglevel & 1)
   1b466:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b46a:	80 ff       	sbrs	r24, 0
   1b46c:	24 c0       	rjmp	.+72     	; 0x1b4b6 <lif_open_volume+0x144>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   1b46e:	af 92       	push	r10
   1b470:	bf 92       	push	r11
   1b472:	85 ef       	ldi	r24, 0xF5	; 245
   1b474:	9a e3       	ldi	r25, 0x3A	; 58
   1b476:	15 c0       	rjmp	.+42     	; 0x1b4a2 <lif_open_volume+0x130>
        lif_closedir(LIF);
        return(NULL);
    }

    // Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   1b478:	b7 01       	movw	r22, r14
   1b47a:	ce 01       	movw	r24, r28
   1b47c:	01 96       	adiw	r24, 0x01	; 1
   1b47e:	0e 94 44 cc 	call	0x19888	; 0x19888 <lif_str2vol>

    // Validate basic Volume headers 
    if( !lif_check_volume(LIF) )
   1b482:	c7 01       	movw	r24, r14
   1b484:	0e 94 33 d0 	call	0x1a066	; 0x1a066 <lif_check_volume>
   1b488:	89 2b       	or	r24, r25
   1b48a:	c1 f4       	brne	.+48     	; 0x1b4bc <lif_open_volume+0x14a>
    {
        if(debuglevel & 1)
   1b48c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b490:	80 ff       	sbrs	r24, 0
   1b492:	11 c0       	rjmp	.+34     	; 0x1b4b6 <lif_open_volume+0x144>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   1b494:	f7 01       	movw	r30, r14
   1b496:	81 81       	ldd	r24, Z+1	; 0x01
   1b498:	8f 93       	push	r24
   1b49a:	80 81       	ld	r24, Z
   1b49c:	8f 93       	push	r24
   1b49e:	82 ec       	ldi	r24, 0xC2	; 194
   1b4a0:	9a e3       	ldi	r25, 0x3A	; 58
   1b4a2:	1f 92       	push	r1
   1b4a4:	9f 93       	push	r25
   1b4a6:	8f 93       	push	r24
   1b4a8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1b4ac:	0f 90       	pop	r0
   1b4ae:	0f 90       	pop	r0
   1b4b0:	0f 90       	pop	r0
   1b4b2:	0f 90       	pop	r0
   1b4b4:	0f 90       	pop	r0
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b4b6:	c7 01       	movw	r24, r14
   1b4b8:	64 d8       	rcall	.-3896   	; 0x1a582 <lif_close_volume>
   1b4ba:	8d cf       	rjmp	.-230    	; 0x1b3d6 <lif_open_volume+0x64>
        lif_closedir(LIF);
        return(NULL);
    }

    // Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   1b4bc:	f7 01       	movw	r30, r14
   1b4be:	45 a5       	ldd	r20, Z+45	; 0x2d
   1b4c0:	56 a5       	ldd	r21, Z+46	; 0x2e
   1b4c2:	67 a5       	ldd	r22, Z+47	; 0x2f
   1b4c4:	70 a9       	ldd	r23, Z+48	; 0x30
   1b4c6:	85 a9       	ldd	r24, Z+53	; 0x35
   1b4c8:	96 a9       	ldd	r25, Z+54	; 0x36
   1b4ca:	a7 a9       	ldd	r26, Z+55	; 0x37
   1b4cc:	b0 ad       	ldd	r27, Z+56	; 0x38
   1b4ce:	48 0f       	add	r20, r24
   1b4d0:	59 1f       	adc	r21, r25
   1b4d2:	6a 1f       	adc	r22, r26
   1b4d4:	7b 1f       	adc	r23, r27
   1b4d6:	44 87       	std	Z+12, r20	; 0x0c
   1b4d8:	55 87       	std	Z+13, r21	; 0x0d
   1b4da:	66 87       	std	Z+14, r22	; 0x0e
   1b4dc:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   1b4de:	84 81       	ldd	r24, Z+4	; 0x04
   1b4e0:	95 81       	ldd	r25, Z+5	; 0x05
   1b4e2:	a6 81       	ldd	r26, Z+6	; 0x06
   1b4e4:	b7 81       	ldd	r27, Z+7	; 0x07
   1b4e6:	84 1b       	sub	r24, r20
   1b4e8:	95 0b       	sbc	r25, r21
   1b4ea:	a6 0b       	sbc	r26, r22
   1b4ec:	b7 0b       	sbc	r27, r23
   1b4ee:	80 8b       	std	Z+16, r24	; 0x10
   1b4f0:	91 8b       	std	Z+17, r25	; 0x11
   1b4f2:	a2 8b       	std	Z+18, r26	; 0x12
   1b4f4:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   1b4f6:	80 8f       	std	Z+24, r24	; 0x18
   1b4f8:	91 8f       	std	Z+25, r25	; 0x19
   1b4fa:	a2 8f       	std	Z+26, r26	; 0x1a
   1b4fc:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   1b4fe:	14 8a       	std	Z+20, r1	; 0x14
   1b500:	15 8a       	std	Z+21, r1	; 0x15
   1b502:	16 8a       	std	Z+22, r1	; 0x16
   1b504:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   1b506:	17 8e       	std	Z+31, r1	; 0x1f
   1b508:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   1b50a:	15 8e       	std	Z+29, r1	; 0x1d
   1b50c:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   1b50e:	11 a2       	std	Z+33, r1	; 0x21
   1b510:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   1b512:	13 a2       	std	Z+35, r1	; 0x23

    if( lif_updatefree(LIF) == NULL)
   1b514:	12 a2       	std	Z+34, r1	; 0x22
   1b516:	c7 01       	movw	r24, r14
   1b518:	92 d9       	rcall	.-3292   	; 0x1a83e <lif_updatefree>
   1b51a:	8c 01       	movw	r16, r24
   1b51c:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b520:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1b524:	01 15       	cp	r16, r1
   1b526:	11 05       	cpc	r17, r1
    {
        if(debuglevel & 1)
   1b528:	b1 f4       	brne	.+44     	; 0x1b556 <lif_open_volume+0x1e4>
   1b52a:	80 ff       	sbrs	r24, 0
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   1b52c:	11 c0       	rjmp	.+34     	; 0x1b550 <lif_open_volume+0x1de>
   1b52e:	f7 01       	movw	r30, r14
   1b530:	81 81       	ldd	r24, Z+1	; 0x01
   1b532:	8f 93       	push	r24
   1b534:	80 81       	ld	r24, Z
   1b536:	8f 93       	push	r24
   1b538:	8f e8       	ldi	r24, 0x8F	; 143
   1b53a:	9a e3       	ldi	r25, 0x3A	; 58
   1b53c:	1f 92       	push	r1
   1b53e:	9f 93       	push	r25
   1b540:	8f 93       	push	r24
   1b542:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1b546:	0f 90       	pop	r0
   1b548:	0f 90       	pop	r0
   1b54a:	0f 90       	pop	r0
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b54c:	0f 90       	pop	r0
   1b54e:	0f 90       	pop	r0
   1b550:	c7 01       	movw	r24, r14
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & 1)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1b552:	17 d8       	rcall	.-4050   	; 0x1a582 <lif_close_volume>
    }

	if(debuglevel &0x400)
   1b554:	08 c0       	rjmp	.+16     	; 0x1b566 <lif_open_volume+0x1f4>
   1b556:	92 ff       	sbrs	r25, 2
		lif_dump_vol(LIF, "Volume Listing");	
   1b558:	05 c0       	rjmp	.+10     	; 0x1b564 <lif_open_volume+0x1f2>
   1b55a:	60 e4       	ldi	r22, 0x40	; 64
   1b55c:	76 e1       	ldi	r23, 0x16	; 22
   1b55e:	c7 01       	movw	r24, r14
   1b560:	0e 94 a0 ce 	call	0x19d40	; 0x19d40 <lif_dump_vol>
    return( LIF );
}
   1b564:	87 01       	movw	r16, r14
   1b566:	c8 01       	movw	r24, r16
   1b568:	c0 5d       	subi	r28, 0xD0	; 208
   1b56a:	de 4f       	sbci	r29, 0xFE	; 254
   1b56c:	ea e0       	ldi	r30, 0x0A	; 10
   1b56e:	0c 94 58 ec 	jmp	0x1d8b0	; 0x1d8b0 <__epilogue_restores__+0x10>

0001b572 <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   1b572:	a1 e1       	ldi	r26, 0x11	; 17
   1b574:	b0 e0       	ldi	r27, 0x00	; 0
   1b576:	ef eb       	ldi	r30, 0xBF	; 191
   1b578:	fa ed       	ldi	r31, 0xDA	; 218
   1b57a:	0c 94 34 ec 	jmp	0x1d868	; 0x1d868 <__prologue_saves__>
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   1b57e:	64 ec       	ldi	r22, 0xC4	; 196
   1b580:	78 e0       	ldi	r23, 0x08	; 8
   1b582:	f7 de       	rcall	.-530    	; 0x1b372 <lif_open_volume>
   1b584:	99 8b       	std	Y+17, r25	; 0x11
   1b586:	88 8b       	std	Y+16, r24	; 0x10
    if(LIF == NULL)
   1b588:	00 97       	sbiw	r24, 0x00	; 0
   1b58a:	09 f4       	brne	.+2      	; 0x1b58e <lif_dir+0x1c>
   1b58c:	5b c1       	rjmp	.+694    	; 0x1b844 <lif_dir+0x2d2>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   1b58e:	fc 01       	movw	r30, r24
   1b590:	86 a1       	ldd	r24, Z+38	; 0x26
   1b592:	88 23       	and	r24, r24
   1b594:	21 f0       	breq	.+8      	; 0x1b59e <lif_dir+0x2c>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   1b596:	8f 01       	movw	r16, r30
   1b598:	0a 5d       	subi	r16, 0xDA	; 218
   1b59a:	1f 4f       	sbci	r17, 0xFF	; 255
   1b59c:	02 c0       	rjmp	.+4      	; 0x1b5a2 <lif_dir+0x30>
    if(!vol[0])
        vol = "<EMPTY>";
   1b59e:	02 ef       	ldi	r16, 0xF2	; 242
   1b5a0:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   1b5a2:	88 89       	ldd	r24, Y+16	; 0x10
   1b5a4:	99 89       	ldd	r25, Y+17	; 0x11
   1b5a6:	87 5b       	subi	r24, 0xB7	; 183
   1b5a8:	9f 4f       	sbci	r25, 0xFF	; 255
   1b5aa:	0e 94 64 ce 	call	0x19cc8	; 0x19cc8 <lif_lifbcd2timestr>
   1b5ae:	9f 93       	push	r25
   1b5b0:	8f 93       	push	r24
   1b5b2:	1f 93       	push	r17
   1b5b4:	0f 93       	push	r16
   1b5b6:	88 e7       	ldi	r24, 0x78	; 120
   1b5b8:	9a e3       	ldi	r25, 0x3A	; 58
   1b5ba:	1f 92       	push	r1
   1b5bc:	9f 93       	push	r25
   1b5be:	8f 93       	push	r24
   1b5c0:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   1b5c4:	88 e3       	ldi	r24, 0x38	; 56
   1b5c6:	9a e3       	ldi	r25, 0x3A	; 58
   1b5c8:	1f 92       	push	r1
   1b5ca:	9f 93       	push	r25
   1b5cc:	8f 93       	push	r24
   1b5ce:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1b5d2:	0f b6       	in	r0, 0x3f	; 63
   1b5d4:	f8 94       	cli
   1b5d6:	de bf       	out	0x3e, r29	; 62
   1b5d8:	0f be       	out	0x3f, r0	; 63
   1b5da:	cd bf       	out	0x3d, r28	; 61
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   1b5dc:	60 e2       	ldi	r22, 0x20	; 32
   1b5de:	96 2e       	mov	r9, r22
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   1b5e0:	00 e0       	ldi	r16, 0x00	; 0
   1b5e2:	10 e0       	ldi	r17, 0x00	; 0

        if(!lif_readdirindex(LIF,index))
            break;


        if(LIF->DIR.FileType == 0xffff)
   1b5e4:	88 89       	ldd	r24, Y+16	; 0x10
   1b5e6:	99 89       	ldd	r25, Y+17	; 0x11
   1b5e8:	86 5a       	subi	r24, 0xA6	; 166
   1b5ea:	9f 4f       	sbci	r25, 0xFF	; 255
   1b5ec:	9c 83       	std	Y+4, r25	; 0x04
   1b5ee:	8b 83       	std	Y+3, r24	; 0x03
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1b5f0:	e8 89       	ldd	r30, Y+16	; 0x10
   1b5f2:	f9 89       	ldd	r31, Y+17	; 0x11
   1b5f4:	e0 5a       	subi	r30, 0xA0	; 160
   1b5f6:	ff 4f       	sbci	r31, 0xFF	; 255
   1b5f8:	fb 87       	std	Y+11, r31	; 0x0b
   1b5fa:	ea 87       	std	Y+10, r30	; 0x0a

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1b5fc:	28 89       	ldd	r18, Y+16	; 0x10
   1b5fe:	39 89       	ldd	r19, Y+17	; 0x11
   1b600:	24 59       	subi	r18, 0x94	; 148
   1b602:	3f 4f       	sbci	r19, 0xFF	; 255
   1b604:	3d 87       	std	Y+13, r19	; 0x0d
   1b606:	2c 87       	std	Y+12, r18	; 0x0c
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1b608:	88 89       	ldd	r24, Y+16	; 0x10
   1b60a:	99 89       	ldd	r25, Y+17	; 0x11
   1b60c:	81 5b       	subi	r24, 0xB1	; 177
   1b60e:	9f 4f       	sbci	r25, 0xFF	; 255
   1b610:	9a 83       	std	Y+2, r25	; 0x02
   1b612:	89 83       	std	Y+1, r24	; 0x01
   1b614:	8c ee       	ldi	r24, 0xEC	; 236
   1b616:	99 e3       	ldi	r25, 0x39	; 57
   1b618:	3c 01       	movw	r6, r24
   1b61a:	81 2c       	mov	r8, r1
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1b61c:	e8 89       	ldd	r30, Y+16	; 0x10
   1b61e:	f9 89       	ldd	r31, Y+17	; 0x11
   1b620:	ec 59       	subi	r30, 0x9C	; 156
   1b622:	ff 4f       	sbci	r31, 0xFF	; 255
   1b624:	ff 87       	std	Y+15, r31	; 0x0f
   1b626:	ee 87       	std	Y+14, r30	; 0x0e
   1b628:	28 89       	ldd	r18, Y+16	; 0x10
   1b62a:	39 89       	ldd	r19, Y+17	; 0x11
   1b62c:	22 59       	subi	r18, 0x92	; 146
   1b62e:	3f 4f       	sbci	r19, 0xFF	; 255
   1b630:	3e 83       	std	Y+6, r19	; 0x06
   1b632:	2d 83       	std	Y+5, r18	; 0x05
   1b634:	a8 88       	ldd	r10, Y+16	; 0x10
   1b636:	b9 88       	ldd	r11, Y+17	; 0x11
   1b638:	3c e5       	ldi	r19, 0x5C	; 92
   1b63a:	a3 0e       	add	r10, r19
   1b63c:	b1 1c       	adc	r11, r1
   1b63e:	8c eb       	ldi	r24, 0xBC	; 188
   1b640:	99 e3       	ldi	r25, 0x39	; 57
   1b642:	9c 01       	movw	r18, r24
   1b644:	40 e0       	ldi	r20, 0x00	; 0
   1b646:	2f 83       	std	Y+7, r18	; 0x07
   1b648:	38 87       	std	Y+8, r19	; 0x08
   1b64a:	49 87       	std	Y+9, r20	; 0x09
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1b64c:	b8 01       	movw	r22, r16
   1b64e:	88 89       	ldd	r24, Y+16	; 0x10
   1b650:	99 89       	ldd	r25, Y+17	; 0x11
   1b652:	18 d8       	rcall	.-4048   	; 0x1a684 <lif_readdirindex>
   1b654:	89 2b       	or	r24, r25
   1b656:	09 f4       	brne	.+2      	; 0x1b65a <lif_dir+0xe8>
   1b658:	9d c0       	rjmp	.+314    	; 0x1b794 <lif_dir+0x222>
            break;


        if(LIF->DIR.FileType == 0xffff)
   1b65a:	eb 81       	ldd	r30, Y+3	; 0x03
   1b65c:	fc 81       	ldd	r31, Y+4	; 0x04
   1b65e:	20 81       	ld	r18, Z
   1b660:	31 81       	ldd	r19, Z+1	; 0x01
   1b662:	2f 3f       	cpi	r18, 0xFF	; 255
   1b664:	ff ef       	ldi	r31, 0xFF	; 255
   1b666:	3f 07       	cpc	r19, r31
   1b668:	09 f4       	brne	.+2      	; 0x1b66c <lif_dir+0xfa>
   1b66a:	94 c0       	rjmp	.+296    	; 0x1b794 <lif_dir+0x222>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1b66c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1b66e:	fb 85       	ldd	r31, Y+11	; 0x0b
   1b670:	80 81       	ld	r24, Z
   1b672:	91 81       	ldd	r25, Z+1	; 0x01
   1b674:	a2 81       	ldd	r26, Z+2	; 0x02
   1b676:	b3 81       	ldd	r27, Z+3	; 0x03
   1b678:	cc 24       	eor	r12, r12
   1b67a:	d8 2e       	mov	r13, r24
   1b67c:	e9 2e       	mov	r14, r25
   1b67e:	fa 2e       	mov	r15, r26

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1b680:	2c 7f       	andi	r18, 0xFC	; 252
   1b682:	20 31       	cpi	r18, 0x10	; 16
   1b684:	30 4e       	sbci	r19, 0xE0	; 224
   1b686:	09 f0       	breq	.+2      	; 0x1b68a <lif_dir+0x118>
   1b688:	4b c0       	rjmp	.+150    	; 0x1b720 <lif_dir+0x1ae>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1b68a:	ec 85       	ldd	r30, Y+12	; 0x0c
   1b68c:	fd 85       	ldd	r31, Y+13	; 0x0d
   1b68e:	20 81       	ld	r18, Z
   1b690:	31 81       	ldd	r19, Z+1	; 0x01
   1b692:	21 15       	cp	r18, r1
   1b694:	31 05       	cpc	r19, r1
   1b696:	a9 f0       	breq	.+42     	; 0x1b6c2 <lif_dir+0x150>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1b698:	19 01       	movw	r2, r18
   1b69a:	41 2c       	mov	r4, r1
   1b69c:	51 2c       	mov	r5, r1
   1b69e:	77 27       	eor	r23, r23
   1b6a0:	65 2d       	mov	r22, r5
   1b6a2:	54 2d       	mov	r21, r4
   1b6a4:	43 2d       	mov	r20, r3
    if(bytes % (long)LIF_SECTOR_SIZE)
   1b6a6:	22 23       	and	r18, r18
   1b6a8:	21 f0       	breq	.+8      	; 0x1b6b2 <lif_dir+0x140>
        ++sectors;
   1b6aa:	4f 5f       	subi	r20, 0xFF	; 255
   1b6ac:	5f 4f       	sbci	r21, 0xFF	; 255
   1b6ae:	6f 4f       	sbci	r22, 0xFF	; 255
   1b6b0:	7f 4f       	sbci	r23, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1b6b2:	84 17       	cp	r24, r20
   1b6b4:	95 07       	cpc	r25, r21
   1b6b6:	a6 07       	cpc	r26, r22
   1b6b8:	b7 07       	cpc	r27, r23
   1b6ba:	19 f4       	brne	.+6      	; 0x1b6c2 <lif_dir+0x150>
            {
                bytes = LIF->DIR.FileBytes;
   1b6bc:	72 01       	movw	r14, r4
   1b6be:	61 01       	movw	r12, r2
   1b6c0:	2f c0       	rjmp	.+94     	; 0x1b720 <lif_dir+0x1ae>
            }
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
   1b6c2:	40 91 bd 01 	lds	r20, 0x01BD	; 0x8001bd <debuglevel>
   1b6c6:	50 91 be 01 	lds	r21, 0x01BE	; 0x8001be <debuglevel+0x1>
   1b6ca:	52 ff       	sbrs	r21, 2
   1b6cc:	27 c0       	rjmp	.+78     	; 0x1b71c <lif_dir+0x1aa>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1b6ce:	19 01       	movw	r2, r18
   1b6d0:	41 2c       	mov	r4, r1
   1b6d2:	51 2c       	mov	r5, r1
   1b6d4:	77 27       	eor	r23, r23
   1b6d6:	65 2d       	mov	r22, r5
   1b6d8:	54 2d       	mov	r21, r4
   1b6da:	43 2d       	mov	r20, r3
    if(bytes % (long)LIF_SECTOR_SIZE)
   1b6dc:	22 23       	and	r18, r18
   1b6de:	21 f0       	breq	.+8      	; 0x1b6e8 <lif_dir+0x176>
        ++sectors;
   1b6e0:	4f 5f       	subi	r20, 0xFF	; 255
   1b6e2:	5f 4f       	sbci	r21, 0xFF	; 255
   1b6e4:	6f 4f       	sbci	r22, 0xFF	; 255
   1b6e6:	7f 4f       	sbci	r23, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1b6e8:	bf 93       	push	r27
   1b6ea:	af 93       	push	r26
   1b6ec:	9f 93       	push	r25
   1b6ee:	8f 93       	push	r24
   1b6f0:	7f 93       	push	r23
   1b6f2:	6f 93       	push	r22
   1b6f4:	5f 93       	push	r21
   1b6f6:	4f 93       	push	r20
   1b6f8:	1f 92       	push	r1
   1b6fa:	1f 92       	push	r1
   1b6fc:	3f 92       	push	r3
   1b6fe:	2f 92       	push	r2
   1b700:	fa 81       	ldd	r31, Y+2	; 0x02
   1b702:	ff 93       	push	r31
   1b704:	29 81       	ldd	r18, Y+1	; 0x01
   1b706:	2f 93       	push	r18
   1b708:	1f 92       	push	r1
   1b70a:	7f 92       	push	r7
   1b70c:	6f 92       	push	r6
   1b70e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1b712:	0f b6       	in	r0, 0x3f	; 63
   1b714:	f8 94       	cli
   1b716:	de bf       	out	0x3e, r29	; 62
   1b718:	0f be       	out	0x3f, r0	; 63
   1b71a:	cd bf       	out	0x3d, r28	; 61
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1b71c:	81 e2       	ldi	r24, 0x21	; 33
   1b71e:	98 2e       	mov	r9, r24
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1b720:	8e 85       	ldd	r24, Y+14	; 0x0e
   1b722:	9f 85       	ldd	r25, Y+15	; 0x0f
   1b724:	0e 94 64 ce 	call	0x19cc8	; 0x19cc8 <lif_lifbcd2timestr>
   1b728:	ed 81       	ldd	r30, Y+5	; 0x05
   1b72a:	fe 81       	ldd	r31, Y+6	; 0x06
   1b72c:	a0 81       	ld	r26, Z
   1b72e:	b1 81       	ldd	r27, Z+1	; 0x01
   1b730:	f5 01       	movw	r30, r10
   1b732:	60 81       	ld	r22, Z
   1b734:	71 81       	ldd	r23, Z+1	; 0x01
   1b736:	52 80       	ldd	r5, Z+2	; 0x02
   1b738:	43 80       	ldd	r4, Z+3	; 0x03
   1b73a:	eb 81       	ldd	r30, Y+3	; 0x03
   1b73c:	fc 81       	ldd	r31, Y+4	; 0x04
   1b73e:	40 81       	ld	r20, Z
   1b740:	51 81       	ldd	r21, Z+1	; 0x01
   1b742:	41 15       	cp	r20, r1
   1b744:	51 05       	cpc	r21, r1
   1b746:	19 f0       	breq	.+6      	; 0x1b74e <lif_dir+0x1dc>
   1b748:	29 81       	ldd	r18, Y+1	; 0x01
   1b74a:	3a 81       	ldd	r19, Y+2	; 0x02
   1b74c:	02 c0       	rjmp	.+4      	; 0x1b752 <lif_dir+0x1e0>
   1b74e:	2f e4       	ldi	r18, 0x4F	; 79
   1b750:	36 e1       	ldi	r19, 0x16	; 22
   1b752:	9f 93       	push	r25
   1b754:	8f 93       	push	r24
   1b756:	bf 93       	push	r27
   1b758:	af 93       	push	r26
   1b75a:	1f 92       	push	r1
   1b75c:	9f 92       	push	r9
   1b75e:	ff 92       	push	r15
   1b760:	ef 92       	push	r14
   1b762:	df 92       	push	r13
   1b764:	cf 92       	push	r12
   1b766:	4f 92       	push	r4
   1b768:	5f 92       	push	r5
   1b76a:	7f 93       	push	r23
   1b76c:	6f 93       	push	r22
   1b76e:	5f 93       	push	r21
   1b770:	4f 93       	push	r20
   1b772:	3f 93       	push	r19
   1b774:	2f 93       	push	r18
   1b776:	1f 92       	push	r1
   1b778:	f8 85       	ldd	r31, Y+8	; 0x08
   1b77a:	ff 93       	push	r31
   1b77c:	2f 81       	ldd	r18, Y+7	; 0x07
   1b77e:	2f 93       	push	r18
   1b780:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
            (long)bytes, 
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1b784:	0f 5f       	subi	r16, 0xFF	; 255
   1b786:	1f 4f       	sbci	r17, 0xFF	; 255
    }   
   1b788:	0f b6       	in	r0, 0x3f	; 63
   1b78a:	f8 94       	cli
   1b78c:	de bf       	out	0x3e, r29	; 62
   1b78e:	0f be       	out	0x3f, r0	; 63
   1b790:	cd bf       	out	0x3d, r28	; 61
   1b792:	5c cf       	rjmp	.-328    	; 0x1b64c <lif_dir+0xda>

    printf("\n");
   1b794:	8a eb       	ldi	r24, 0xBA	; 186
   1b796:	99 e3       	ldi	r25, 0x39	; 57
   1b798:	1f 92       	push	r1
   1b79a:	9f 93       	push	r25
   1b79c:	8f 93       	push	r24
   1b79e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1b7a2:	e8 89       	ldd	r30, Y+16	; 0x10
   1b7a4:	f9 89       	ldd	r31, Y+17	; 0x11
   1b7a6:	84 8d       	ldd	r24, Z+28	; 0x1c
   1b7a8:	95 8d       	ldd	r25, Z+29	; 0x1d
   1b7aa:	09 2e       	mov	r0, r25
   1b7ac:	00 0c       	add	r0, r0
   1b7ae:	aa 0b       	sbc	r26, r26
   1b7b0:	bb 0b       	sbc	r27, r27
   1b7b2:	bf 93       	push	r27
   1b7b4:	af 93       	push	r26
   1b7b6:	9f 93       	push	r25
   1b7b8:	8f 93       	push	r24
   1b7ba:	8e ea       	ldi	r24, 0xAE	; 174
   1b7bc:	99 e3       	ldi	r25, 0x39	; 57
   1b7be:	1f 92       	push	r1
   1b7c0:	9f 93       	push	r25
   1b7c2:	8f 93       	push	r24
   1b7c4:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1b7c8:	e8 89       	ldd	r30, Y+16	; 0x10
   1b7ca:	f9 89       	ldd	r31, Y+17	; 0x11
   1b7cc:	86 8d       	ldd	r24, Z+30	; 0x1e
   1b7ce:	97 8d       	ldd	r25, Z+31	; 0x1f
   1b7d0:	09 2e       	mov	r0, r25
   1b7d2:	00 0c       	add	r0, r0
   1b7d4:	aa 0b       	sbc	r26, r26
   1b7d6:	bb 0b       	sbc	r27, r27
   1b7d8:	bf 93       	push	r27
   1b7da:	af 93       	push	r26
   1b7dc:	9f 93       	push	r25
   1b7de:	8f 93       	push	r24
   1b7e0:	81 ea       	ldi	r24, 0xA1	; 161
   1b7e2:	99 e3       	ldi	r25, 0x39	; 57
   1b7e4:	1f 92       	push	r1
   1b7e6:	9f 93       	push	r25
   1b7e8:	8f 93       	push	r24
   1b7ea:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1b7ee:	e8 89       	ldd	r30, Y+16	; 0x10
   1b7f0:	f9 89       	ldd	r31, Y+17	; 0x11
   1b7f2:	87 89       	ldd	r24, Z+23	; 0x17
   1b7f4:	8f 93       	push	r24
   1b7f6:	86 89       	ldd	r24, Z+22	; 0x16
   1b7f8:	8f 93       	push	r24
   1b7fa:	85 89       	ldd	r24, Z+21	; 0x15
   1b7fc:	8f 93       	push	r24
   1b7fe:	84 89       	ldd	r24, Z+20	; 0x14
   1b800:	8f 93       	push	r24
   1b802:	8e e8       	ldi	r24, 0x8E	; 142
   1b804:	99 e3       	ldi	r25, 0x39	; 57
   1b806:	1f 92       	push	r1
   1b808:	9f 93       	push	r25
   1b80a:	8f 93       	push	r24
   1b80c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1b810:	e8 89       	ldd	r30, Y+16	; 0x10
   1b812:	f9 89       	ldd	r31, Y+17	; 0x11
   1b814:	83 8d       	ldd	r24, Z+27	; 0x1b
   1b816:	8f 93       	push	r24
   1b818:	82 8d       	ldd	r24, Z+26	; 0x1a
   1b81a:	8f 93       	push	r24
   1b81c:	81 8d       	ldd	r24, Z+25	; 0x19
   1b81e:	8f 93       	push	r24
   1b820:	80 8d       	ldd	r24, Z+24	; 0x18
   1b822:	8f 93       	push	r24
   1b824:	8b e7       	ldi	r24, 0x7B	; 123
   1b826:	99 e3       	ldi	r25, 0x39	; 57
   1b828:	1f 92       	push	r1
   1b82a:	9f 93       	push	r25
   1b82c:	8f 93       	push	r24
   1b82e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b832:	88 89       	ldd	r24, Y+16	; 0x10
   1b834:	99 89       	ldd	r25, Y+17	; 0x11
   1b836:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>
   1b83a:	0f b6       	in	r0, 0x3f	; 63
   1b83c:	f8 94       	cli
   1b83e:	de bf       	out	0x3e, r29	; 62
   1b840:	0f be       	out	0x3f, r0	; 63
   1b842:	cd bf       	out	0x3d, r28	; 61
    printf("%8ld Purged\n", (long)LIF->purged);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1b844:	61 96       	adiw	r28, 0x11	; 17
   1b846:	e2 e1       	ldi	r30, 0x12	; 18
   1b848:	0c 94 50 ec 	jmp	0x1d8a0	; 0x1d8a0 <__epilogue_restores__>

0001b84c <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1b84c:	a0 e0       	ldi	r26, 0x00	; 0
   1b84e:	b0 e0       	ldi	r27, 0x00	; 0
   1b850:	ec e2       	ldi	r30, 0x2C	; 44
   1b852:	fc ed       	ldi	r31, 0xDC	; 220
   1b854:	0c 94 3c ec 	jmp	0x1d878	; 0x1d878 <__prologue_saves__+0x10>
   1b858:	7c 01       	movw	r14, r24
   1b85a:	16 2f       	mov	r17, r22
   1b85c:	07 2f       	mov	r16, r23
    int index;

    if( !lif_checkname(liflabel) )
   1b85e:	86 2f       	mov	r24, r22
   1b860:	97 2f       	mov	r25, r23
   1b862:	0e 94 35 cb 	call	0x1966a	; 0x1966a <lif_checkname>
   1b866:	89 2b       	or	r24, r25
   1b868:	49 f4       	brne	.+18     	; 0x1b87c <lif_find_file+0x30>
    {
        if(debuglevel & 1)
   1b86a:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b86e:	80 ff       	sbrs	r24, 0
   1b870:	48 c0       	rjmp	.+144    	; 0x1b902 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1b872:	0f 93       	push	r16
   1b874:	1f 93       	push	r17
   1b876:	84 e5       	ldi	r24, 0x54	; 84
   1b878:	99 e3       	ldi	r25, 0x39	; 57
   1b87a:	13 c0       	rjmp	.+38     	; 0x1b8a2 <lif_find_file+0x56>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1b87c:	a1 2f       	mov	r26, r17
   1b87e:	b0 2f       	mov	r27, r16
   1b880:	fd 01       	movw	r30, r26
   1b882:	01 90       	ld	r0, Z+
   1b884:	00 20       	and	r0, r0
   1b886:	e9 f7       	brne	.-6      	; 0x1b882 <lif_find_file+0x36>
   1b888:	31 97       	sbiw	r30, 0x01	; 1
   1b88a:	ea 1b       	sub	r30, r26
   1b88c:	fb 0b       	sbc	r31, r27
   1b88e:	3b 97       	sbiw	r30, 0x0b	; 11
   1b890:	98 f0       	brcs	.+38     	; 0x1b8b8 <lif_find_file+0x6c>
    {
        if(debuglevel & 1)
   1b892:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1b896:	80 ff       	sbrs	r24, 0
   1b898:	34 c0       	rjmp	.+104    	; 0x1b902 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1b89a:	0f 93       	push	r16
   1b89c:	1f 93       	push	r17
   1b89e:	8f e2       	ldi	r24, 0x2F	; 47
   1b8a0:	99 e3       	ldi	r25, 0x39	; 57
   1b8a2:	1f 92       	push	r1
   1b8a4:	9f 93       	push	r25
   1b8a6:	8f 93       	push	r24
   1b8a8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1b8ac:	0f 90       	pop	r0
   1b8ae:	0f 90       	pop	r0
   1b8b0:	0f 90       	pop	r0
   1b8b2:	0f 90       	pop	r0
   1b8b4:	0f 90       	pop	r0
   1b8b6:	25 c0       	rjmp	.+74     	; 0x1b902 <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1b8b8:	e1 14       	cp	r14, r1
   1b8ba:	f1 04       	cpc	r15, r1
   1b8bc:	11 f1       	breq	.+68     	; 0x1b902 <lif_find_file+0xb6>
   1b8be:	c0 e0       	ldi	r28, 0x00	; 0
   1b8c0:	d0 e0       	ldi	r29, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1b8c2:	67 01       	movw	r12, r14
   1b8c4:	2a e5       	ldi	r18, 0x5A	; 90
   1b8c6:	c2 0e       	add	r12, r18
   1b8c8:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1b8ca:	57 01       	movw	r10, r14
   1b8cc:	8f e4       	ldi	r24, 0x4F	; 79
   1b8ce:	a8 0e       	add	r10, r24
   1b8d0:	b1 1c       	adc	r11, r1
        return(-1);
    
    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1b8d2:	be 01       	movw	r22, r28
   1b8d4:	c7 01       	movw	r24, r14
   1b8d6:	0e 94 42 d3 	call	0x1a684	; 0x1a684 <lif_readdirindex>
   1b8da:	89 2b       	or	r24, r25
   1b8dc:	91 f0       	breq	.+36     	; 0x1b902 <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1b8de:	f6 01       	movw	r30, r12
   1b8e0:	80 81       	ld	r24, Z
   1b8e2:	91 81       	ldd	r25, Z+1	; 0x01
   1b8e4:	8f 3f       	cpi	r24, 0xFF	; 255
   1b8e6:	ff ef       	ldi	r31, 0xFF	; 255
   1b8e8:	9f 07       	cpc	r25, r31
   1b8ea:	59 f0       	breq	.+22     	; 0x1b902 <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1b8ec:	89 2b       	or	r24, r25
   1b8ee:	39 f0       	breq	.+14     	; 0x1b8fe <lif_find_file+0xb2>
   1b8f0:	61 2f       	mov	r22, r17
   1b8f2:	70 2f       	mov	r23, r16
   1b8f4:	c5 01       	movw	r24, r10
   1b8f6:	0e 94 ae 32 	call	0x655c	; 0x655c <strcasecmp>
   1b8fa:	89 2b       	or	r24, r25
   1b8fc:	29 f0       	breq	.+10     	; 0x1b908 <lif_find_file+0xbc>
            break;
        ++index;
   1b8fe:	21 96       	adiw	r28, 0x01	; 1
   1b900:	e8 cf       	rjmp	.-48     	; 0x1b8d2 <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & 1)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1b902:	8f ef       	ldi	r24, 0xFF	; 255
   1b904:	9f ef       	ldi	r25, 0xFF	; 255
   1b906:	01 c0       	rjmp	.+2      	; 0x1b90a <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1b908:	ce 01       	movw	r24, r28
            break;
        ++index;
    }
    return(index);
}
   1b90a:	cd b7       	in	r28, 0x3d	; 61
   1b90c:	de b7       	in	r29, 0x3e	; 62
   1b90e:	ea e0       	ldi	r30, 0x0A	; 10
   1b910:	0c 94 58 ec 	jmp	0x1d8b0	; 0x1d8b0 <__epilogue_restores__+0x10>

0001b914 <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1b914:	a0 e0       	ldi	r26, 0x00	; 0
   1b916:	b0 e0       	ldi	r27, 0x00	; 0
   1b918:	e0 e9       	ldi	r30, 0x90	; 144
   1b91a:	fc ed       	ldi	r31, 0xDC	; 220
   1b91c:	0c 94 3e ec 	jmp	0x1d87c	; 0x1d87c <__prologue_saves__+0x14>
   1b920:	6b 01       	movw	r12, r22
   1b922:	7c 01       	movw	r14, r24
   1b924:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1b926:	20 e0       	ldi	r18, 0x00	; 0
   1b928:	31 e0       	ldi	r19, 0x01	; 1
   1b92a:	40 e0       	ldi	r20, 0x00	; 0
   1b92c:	50 e0       	ldi	r21, 0x00	; 0
   1b92e:	0e 94 e9 eb 	call	0x1d7d2	; 0x1d7d2 <__divmodsi4>
    if(!pos)
   1b932:	61 15       	cp	r22, r1
   1b934:	71 05       	cpc	r23, r1
   1b936:	e1 f1       	breq	.+120    	; 0x1b9b0 <lif_e010_pad_sector+0x9c>
        return(0);

    // Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1b938:	c0 e0       	ldi	r28, 0x00	; 0
   1b93a:	d1 e0       	ldi	r29, 0x01	; 1
   1b93c:	c6 1b       	sub	r28, r22
   1b93e:	d7 0b       	sbc	r29, r23

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
   1b940:	f8 01       	movw	r30, r16
   1b942:	8f ee       	ldi	r24, 0xEF	; 239
   1b944:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1b946:	2f ef       	ldi	r18, 0xFF	; 255

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1b948:	cf 01       	movw	r24, r30
   1b94a:	80 1b       	sub	r24, r16
   1b94c:	91 0b       	sbc	r25, r17
   1b94e:	8c 17       	cp	r24, r28
   1b950:	9d 07       	cpc	r25, r29
   1b952:	14 f4       	brge	.+4      	; 0x1b958 <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1b954:	21 93       	st	Z+, r18
   1b956:	f8 cf       	rjmp	.-16     	; 0x1b948 <lif_e010_pad_sector+0x34>
   1b958:	1c 16       	cp	r1, r28
   1b95a:	1d 06       	cpc	r1, r29
   1b95c:	14 f0       	brlt	.+4      	; 0x1b962 <lif_e010_pad_sector+0x4e>
   1b95e:	c1 e0       	ldi	r28, 0x01	; 1
   1b960:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1b962:	ce 01       	movw	r24, r28
   1b964:	0d 2e       	mov	r0, r29
   1b966:	00 0c       	add	r0, r0
   1b968:	aa 0b       	sbc	r26, r26
   1b96a:	bb 0b       	sbc	r27, r27
   1b96c:	bc 01       	movw	r22, r24
   1b96e:	cd 01       	movw	r24, r26
   1b970:	6c 0d       	add	r22, r12
   1b972:	7d 1d       	adc	r23, r13
   1b974:	8e 1d       	adc	r24, r14
   1b976:	9f 1d       	adc	r25, r15
   1b978:	20 e0       	ldi	r18, 0x00	; 0
   1b97a:	31 e0       	ldi	r19, 0x01	; 1
   1b97c:	40 e0       	ldi	r20, 0x00	; 0
   1b97e:	50 e0       	ldi	r21, 0x00	; 0
   1b980:	0e 94 e9 eb 	call	0x1d7d2	; 0x1d7d2 <__divmodsi4>
    // NEW SECTOR
    // Debugging make sure we are at sector boundry
    if(pos)
   1b984:	61 15       	cp	r22, r1
   1b986:	71 05       	cpc	r23, r1
   1b988:	b1 f0       	breq	.+44     	; 0x1b9b6 <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & 1)
   1b98a:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1b98e:	20 ff       	sbrs	r18, 0
   1b990:	14 c0       	rjmp	.+40     	; 0x1b9ba <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1b992:	7f 93       	push	r23
   1b994:	6f 93       	push	r22
   1b996:	86 ef       	ldi	r24, 0xF6	; 246
   1b998:	98 e3       	ldi	r25, 0x38	; 56
   1b99a:	1f 92       	push	r1
   1b99c:	9f 93       	push	r25
   1b99e:	8f 93       	push	r24
   1b9a0:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1b9a4:	0f 90       	pop	r0
   1b9a6:	0f 90       	pop	r0
   1b9a8:	0f 90       	pop	r0
   1b9aa:	0f 90       	pop	r0
   1b9ac:	0f 90       	pop	r0
   1b9ae:	05 c0       	rjmp	.+10     	; 0x1b9ba <lif_e010_pad_sector+0xa6>
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1b9b0:	80 e0       	ldi	r24, 0x00	; 0
   1b9b2:	90 e0       	ldi	r25, 0x00	; 0
   1b9b4:	04 c0       	rjmp	.+8      	; 0x1b9be <lif_e010_pad_sector+0xaa>
   1b9b6:	ce 01       	movw	r24, r28
   1b9b8:	02 c0       	rjmp	.+4      	; 0x1b9be <lif_e010_pad_sector+0xaa>
    // Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & 1)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1b9ba:	8f ef       	ldi	r24, 0xFF	; 255
   1b9bc:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1b9be:	cd b7       	in	r28, 0x3d	; 61
   1b9c0:	de b7       	in	r29, 0x3e	; 62
   1b9c2:	e8 e0       	ldi	r30, 0x08	; 8
   1b9c4:	0c 94 5a ec 	jmp	0x1d8b4	; 0x1d8b4 <__epilogue_restores__+0x14>

0001b9c8 <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1b9c8:	a0 e0       	ldi	r26, 0x00	; 0
   1b9ca:	b0 e0       	ldi	r27, 0x00	; 0
   1b9cc:	ea ee       	ldi	r30, 0xEA	; 234
   1b9ce:	fc ed       	ldi	r31, 0xDC	; 220
   1b9d0:	0c 94 34 ec 	jmp	0x1d868	; 0x1d868 <__prologue_saves__>
   1b9d4:	ec 01       	movw	r28, r24
   1b9d6:	4a 01       	movw	r8, r20
   1b9d8:	5b 01       	movw	r10, r22
   1b9da:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;
    
    // String size
    len = strlen(str);
   1b9dc:	fc 01       	movw	r30, r24
   1b9de:	01 90       	ld	r0, Z+
   1b9e0:	00 20       	and	r0, r0
   1b9e2:	e9 f7       	brne	.-6      	; 0x1b9de <lif_ascii_string_to_e010+0x16>
   1b9e4:	31 97       	sbiw	r30, 0x01	; 1
   1b9e6:	6f 01       	movw	r12, r30
   1b9e8:	c8 1a       	sub	r12, r24
   1b9ea:	d9 0a       	sbc	r13, r25
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1b9ec:	41 2c       	mov	r4, r1
   1b9ee:	51 2c       	mov	r5, r1
   1b9f0:	32 01       	movw	r6, r4
   1b9f2:	53 94       	inc	r5
   1b9f4:	cb 01       	movw	r24, r22
   1b9f6:	ba 01       	movw	r22, r20
   1b9f8:	a3 01       	movw	r20, r6
   1b9fa:	92 01       	movw	r18, r4
   1b9fc:	0e 94 e9 eb 	call	0x1d7d2	; 0x1d7d2 <__divmodsi4>
   1ba00:	21 2c       	mov	r2, r1
   1ba02:	33 24       	eor	r3, r3
   1ba04:	33 94       	inc	r3
   1ba06:	c1 01       	movw	r24, r2
   1ba08:	86 1b       	sub	r24, r22
   1ba0a:	97 0b       	sbc	r25, r23

    /// We ALWAYS pad a sector if:
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1ba0c:	86 30       	cpi	r24, 0x06	; 6
   1ba0e:	91 05       	cpc	r25, r1
   1ba10:	20 f0       	brcs	.+8      	; 0x1ba1a <lif_ascii_string_to_e010+0x52>
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1ba12:	1c 01       	movw	r2, r24
    
    // String size
    len = strlen(str);

    // Output buffer index
    ind = 0;
   1ba14:	00 e0       	ldi	r16, 0x00	; 0
   1ba16:	10 e0       	ldi	r17, 0x00	; 0
   1ba18:	17 c0       	rjmp	.+46     	; 0x1ba48 <lif_ascii_string_to_e010+0x80>
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1ba1a:	a7 01       	movw	r20, r14
   1ba1c:	c5 01       	movw	r24, r10
   1ba1e:	b4 01       	movw	r22, r8
   1ba20:	79 df       	rcall	.-270    	; 0x1b914 <lif_e010_pad_sector>
   1ba22:	8c 01       	movw	r16, r24
        if(ind < 0)
   1ba24:	97 fd       	sbrc	r25, 7
   1ba26:	84 c0       	rjmp	.+264    	; 0x1bb30 <lif_ascii_string_to_e010+0x168>
            return(ind);

        // Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
        // Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1ba28:	09 2e       	mov	r0, r25
   1ba2a:	00 0c       	add	r0, r0
   1ba2c:	aa 0b       	sbc	r26, r26
   1ba2e:	bb 0b       	sbc	r27, r27
   1ba30:	bc 01       	movw	r22, r24
   1ba32:	cd 01       	movw	r24, r26
   1ba34:	68 0d       	add	r22, r8
   1ba36:	79 1d       	adc	r23, r9
   1ba38:	8a 1d       	adc	r24, r10
   1ba3a:	9b 1d       	adc	r25, r11
   1ba3c:	a3 01       	movw	r20, r6
   1ba3e:	92 01       	movw	r18, r4
   1ba40:	0e 94 e9 eb 	call	0x1d7d2	; 0x1d7d2 <__divmodsi4>
   1ba44:	26 1a       	sub	r2, r22
   1ba46:	37 0a       	sbc	r3, r23
   1ba48:	f7 01       	movw	r30, r14
   1ba4a:	e0 0f       	add	r30, r16
   1ba4c:	f1 1f       	adc	r31, r17
   1ba4e:	0d 5f       	subi	r16, 0xFD	; 253
   1ba50:	1f 4f       	sbci	r17, 0xFF	; 255
    }

    // Note: IMPORTANT we have >= 6 bytes!!!

    // Do not have to split, there is enough room
    if(rem >= (3 + len)) 
   1ba52:	c6 01       	movw	r24, r12
   1ba54:	02 96       	adiw	r24, 0x02	; 2
   1ba56:	82 15       	cp	r24, r2
   1ba58:	93 05       	cpc	r25, r3
   1ba5a:	84 f4       	brge	.+32     	; 0x1ba7c <lif_ascii_string_to_e010+0xb4>
    {

        // Write string in new sector
        // The full string + header will fit
        wbuf[ind++] = 0xDF;
   1ba5c:	8f ed       	ldi	r24, 0xDF	; 223
   1ba5e:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1ba60:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1ba62:	d2 82       	std	Z+2, r13	; 0x02
   1ba64:	f7 01       	movw	r30, r14
   1ba66:	e0 0f       	add	r30, r16
   1ba68:	f1 1f       	adc	r31, r17
   1ba6a:	cf 01       	movw	r24, r30
   1ba6c:	8e 19       	sub	r24, r14
   1ba6e:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1ba70:	29 91       	ld	r18, Y+
   1ba72:	22 23       	and	r18, r18
   1ba74:	09 f4       	brne	.+2      	; 0x1ba78 <lif_ascii_string_to_e010+0xb0>
   1ba76:	5c c0       	rjmp	.+184    	; 0x1bb30 <lif_ascii_string_to_e010+0x168>
            wbuf[ind++] = *str++;
   1ba78:	21 93       	st	Z+, r18
   1ba7a:	f7 cf       	rjmp	.-18     	; 0x1ba6a <lif_ascii_string_to_e010+0xa2>

        // CURRENT SECTOR
        // String spans a sector , so split the string

        // 1st Split string header
        wbuf[ind++] = 0xCF;
   1ba7c:	8f ec       	ldi	r24, 0xCF	; 207
   1ba7e:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1ba80:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1ba82:	d2 82       	std	Z+2, r13	; 0x02
   1ba84:	d7 01       	movw	r26, r14
   1ba86:	a0 0f       	add	r26, r16
   1ba88:	b1 1f       	adc	r27, r17
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1ba8a:	fe 01       	movw	r30, r28
   1ba8c:	81 91       	ld	r24, Z+
   1ba8e:	81 11       	cpse	r24, r1
   1ba90:	0e c0       	rjmp	.+28     	; 0x1baae <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1ba92:	c8 01       	movw	r24, r16
   1ba94:	01 2e       	mov	r0, r17
   1ba96:	00 0c       	add	r0, r0
   1ba98:	aa 0b       	sbc	r26, r26
   1ba9a:	bb 0b       	sbc	r27, r27
   1ba9c:	bc 01       	movw	r22, r24
   1ba9e:	cd 01       	movw	r24, r26
   1baa0:	68 0d       	add	r22, r8
   1baa2:	79 1d       	adc	r23, r9
   1baa4:	8a 1d       	adc	r24, r10
   1baa6:	9b 1d       	adc	r25, r11
   1baa8:	61 11       	cpse	r22, r1
   1baaa:	09 c0       	rjmp	.+18     	; 0x1babe <lif_ascii_string_to_e010+0xf6>
   1baac:	21 c0       	rjmp	.+66     	; 0x1baf0 <lif_ascii_string_to_e010+0x128>
        // 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1baae:	02 15       	cp	r16, r2
   1bab0:	13 05       	cpc	r17, r3
   1bab2:	7c f7       	brge	.-34     	; 0x1ba92 <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1bab4:	0f 5f       	subi	r16, 0xFF	; 255
   1bab6:	1f 4f       	sbci	r17, 0xFF	; 255
   1bab8:	8d 93       	st	X+, r24
   1baba:	ef 01       	movw	r28, r30
   1babc:	e6 cf       	rjmp	.-52     	; 0x1ba8a <lif_ascii_string_to_e010+0xc2>

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
   1babe:	20 91 bd 01 	lds	r18, 0x01BD	; 0x8001bd <debuglevel>
   1bac2:	20 ff       	sbrs	r18, 0
   1bac4:	33 c0       	rjmp	.+102    	; 0x1bb2c <lif_ascii_string_to_e010+0x164>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1bac6:	20 e0       	ldi	r18, 0x00	; 0
   1bac8:	31 e0       	ldi	r19, 0x01	; 1
   1baca:	40 e0       	ldi	r20, 0x00	; 0
   1bacc:	50 e0       	ldi	r21, 0x00	; 0
   1bace:	0e 94 e9 eb 	call	0x1d7d2	; 0x1d7d2 <__divmodsi4>
   1bad2:	7f 93       	push	r23
   1bad4:	6f 93       	push	r22
   1bad6:	82 ed       	ldi	r24, 0xD2	; 210
   1bad8:	98 e3       	ldi	r25, 0x38	; 56
   1bada:	1f 92       	push	r1
   1badc:	9f 93       	push	r25
   1bade:	8f 93       	push	r24
   1bae0:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1bae4:	0f 90       	pop	r0
   1bae6:	0f 90       	pop	r0
   1bae8:	0f 90       	pop	r0
   1baea:	0f 90       	pop	r0
   1baec:	0f 90       	pop	r0
   1baee:	1e c0       	rjmp	.+60     	; 0x1bb2c <lif_ascii_string_to_e010+0x164>
            return(-1);
        }

        // Update remining string length
        len = strlen(str);
   1baf0:	fe 01       	movw	r30, r28
   1baf2:	01 90       	ld	r0, Z+
   1baf4:	00 20       	and	r0, r0
   1baf6:	e9 f7       	brne	.-6      	; 0x1baf2 <lif_ascii_string_to_e010+0x12a>
   1baf8:	31 97       	sbiw	r30, 0x01	; 1
   1bafa:	ec 1b       	sub	r30, r28
   1bafc:	fd 0b       	sbc	r31, r29
        // 2nd Split string header 
        wbuf[ind++] = 0x6F;
   1bafe:	d7 01       	movw	r26, r14
   1bb00:	a0 0f       	add	r26, r16
   1bb02:	b1 1f       	adc	r27, r17
   1bb04:	8f e6       	ldi	r24, 0x6F	; 111
   1bb06:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1bb08:	11 96       	adiw	r26, 0x01	; 1
   1bb0a:	ec 93       	st	X, r30
   1bb0c:	11 97       	sbiw	r26, 0x01	; 1
        wbuf[ind++] = (len>>8) & 0xff;
   1bb0e:	12 96       	adiw	r26, 0x02	; 2
   1bb10:	fc 93       	st	X, r31
   1bb12:	0d 5f       	subi	r16, 0xFD	; 253
   1bb14:	1f 4f       	sbci	r17, 0xFF	; 255
   1bb16:	f7 01       	movw	r30, r14
   1bb18:	e0 0f       	add	r30, r16
   1bb1a:	f1 1f       	adc	r31, r17
   1bb1c:	cf 01       	movw	r24, r30
   1bb1e:	8e 19       	sub	r24, r14
   1bb20:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1bb22:	29 91       	ld	r18, Y+
   1bb24:	22 23       	and	r18, r18
   1bb26:	21 f0       	breq	.+8      	; 0x1bb30 <lif_ascii_string_to_e010+0x168>
            wbuf[ind++] = *str++;
   1bb28:	21 93       	st	Z+, r18
   1bb2a:	f8 cf       	rjmp	.-16     	; 0x1bb1c <lif_ascii_string_to_e010+0x154>
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1bb2c:	8f ef       	ldi	r24, 0xFF	; 255
   1bb2e:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1bb30:	cd b7       	in	r28, 0x3d	; 61
   1bb32:	de b7       	in	r29, 0x3e	; 62
   1bb34:	e2 e1       	ldi	r30, 0x12	; 18
   1bb36:	0c 94 50 ec 	jmp	0x1d8a0	; 0x1d8a0 <__epilogue_restores__>

0001bb3a <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1bb3a:	a6 e0       	ldi	r26, 0x06	; 6
   1bb3c:	b3 e0       	ldi	r27, 0x03	; 3
   1bb3e:	e3 ea       	ldi	r30, 0xA3	; 163
   1bb40:	fd ed       	ldi	r31, 0xDD	; 221
   1bb42:	0c 94 34 ec 	jmp	0x1d868	; 0x1d868 <__prologue_saves__>
   1bb46:	7c 01       	movw	r14, r24
   1bb48:	4a 01       	movw	r8, r20
   1bb4a:	5b 01       	movw	r10, r22
   1bb4c:	c9 01       	movw	r24, r18
    // strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
    // output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1bb4e:	6a eb       	ldi	r22, 0xBA	; 186
   1bb50:	78 e0       	ldi	r23, 0x08	; 8
   1bb52:	0e 94 a3 c9 	call	0x19346	; 0x19346 <lif_open>
   1bb56:	6c 01       	movw	r12, r24
    if(fi == NULL)
   1bb58:	89 2b       	or	r24, r25
   1bb5a:	09 f4       	brne	.+2      	; 0x1bb5e <lif_add_ascii_file_as_e010_wrapper+0x24>
   1bb5c:	6b c0       	rjmp	.+214    	; 0x1bc34 <lif_add_ascii_file_as_e010_wrapper+0xfa>
   1bb5e:	21 2c       	mov	r2, r1
   1bb60:	31 2c       	mov	r3, r1
   1bb62:	41 2c       	mov	r4, r1
   1bb64:	51 2c       	mov	r5, r1
   1bb66:	32 01       	movw	r6, r4

        if(count > 256)
        {       
            count = 0;
            if(LIF)
                printf("Wrote: %8ld\r", (long)bytes);
   1bb68:	85 ec       	ldi	r24, 0xC5	; 197
   1bb6a:	98 e3       	ldi	r25, 0x38	; 56
   1bb6c:	9c 01       	movw	r18, r24
   1bb6e:	40 e0       	ldi	r20, 0x00	; 0
   1bb70:	cc 5f       	subi	r28, 0xFC	; 252
   1bb72:	dc 4f       	sbci	r29, 0xFC	; 252
   1bb74:	28 83       	st	Y, r18
   1bb76:	39 83       	std	Y+1, r19	; 0x01
   1bb78:	4a 83       	std	Y+2, r20	; 0x02
   1bb7a:	c4 50       	subi	r28, 0x04	; 4
   1bb7c:	d3 40       	sbci	r29, 0x03	; 3
   1bb7e:	1a c0       	rjmp	.+52     	; 0x1bbb4 <lif_add_ascii_file_as_e010_wrapper+0x7a>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1bb80:	ce 5f       	subi	r28, 0xFE	; 254
   1bb82:	dc 4f       	sbci	r29, 0xFC	; 252
   1bb84:	28 81       	ld	r18, Y
   1bb86:	39 81       	ldd	r19, Y+1	; 0x01
   1bb88:	c2 50       	subi	r28, 0x02	; 2
   1bb8a:	d3 40       	sbci	r29, 0x03	; 3
   1bb8c:	c9 01       	movw	r24, r18
   1bb8e:	03 2e       	mov	r0, r19
   1bb90:	00 0c       	add	r0, r0
   1bb92:	aa 0b       	sbc	r26, r26
   1bb94:	bb 0b       	sbc	r27, r27
   1bb96:	88 0e       	add	r8, r24
   1bb98:	99 1e       	adc	r9, r25
   1bb9a:	aa 1e       	adc	r10, r26
   1bb9c:	bb 1e       	adc	r11, r27
        bytes += size;
   1bb9e:	48 0e       	add	r4, r24
   1bba0:	59 1e       	adc	r5, r25
   1bba2:	6a 1e       	adc	r6, r26
   1bba4:	7b 1e       	adc	r7, r27
        count += size;
   1bba6:	22 0e       	add	r2, r18
   1bba8:	33 1e       	adc	r3, r19

        if(count > 256)
   1bbaa:	31 e0       	ldi	r19, 0x01	; 1
   1bbac:	23 16       	cp	r2, r19
   1bbae:	33 06       	cpc	r3, r19
   1bbb0:	0c f0       	brlt	.+2      	; 0x1bbb4 <lif_add_ascii_file_as_e010_wrapper+0x7a>
   1bbb2:	45 c0       	rjmp	.+138    	; 0x1bc3e <lif_add_ascii_file_as_e010_wrapper+0x104>
    bytes = 0;
    count = 0;

    // Read user file and write LIF records
    // reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1bbb4:	a6 01       	movw	r20, r12
   1bbb6:	6d ef       	ldi	r22, 0xFD	; 253
   1bbb8:	70 e0       	ldi	r23, 0x00	; 0
   1bbba:	ce 01       	movw	r24, r28
   1bbbc:	8f 5f       	subi	r24, 0xFF	; 255
   1bbbe:	9d 4f       	sbci	r25, 0xFD	; 253
   1bbc0:	0e 94 ed 7a 	call	0xf5da	; 0xf5da <fgets>
   1bbc4:	89 2b       	or	r24, r25
   1bbc6:	09 f4       	brne	.+2      	; 0x1bbca <lif_add_ascii_file_as_e010_wrapper+0x90>
   1bbc8:	58 c0       	rjmp	.+176    	; 0x1bc7a <lif_add_ascii_file_as_e010_wrapper+0x140>
    {
        trim_tail((char *)str);
   1bbca:	ce 01       	movw	r24, r28
   1bbcc:	8f 5f       	subi	r24, 0xFF	; 255
   1bbce:	9d 4f       	sbci	r25, 0xFD	; 253
   1bbd0:	0e 94 74 32 	call	0x64e8	; 0x64e8 <trim_tail>

        strcat((char *)str,"\r"); // HP85 lines end with "\r"
   1bbd4:	68 e5       	ldi	r22, 0x58	; 88
   1bbd6:	76 e1       	ldi	r23, 0x16	; 22
   1bbd8:	ce 01       	movw	r24, r28
   1bbda:	8f 5f       	subi	r24, 0xFF	; 255
   1bbdc:	9d 4f       	sbci	r25, 0xFD	; 253
   1bbde:	0e 94 3b 32 	call	0x6476	; 0x6476 <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1bbe2:	9e 01       	movw	r18, r28
   1bbe4:	2f 5f       	subi	r18, 0xFF	; 255
   1bbe6:	3f 4f       	sbci	r19, 0xFF	; 255
   1bbe8:	b5 01       	movw	r22, r10
   1bbea:	a4 01       	movw	r20, r8
   1bbec:	ce 01       	movw	r24, r28
   1bbee:	8f 5f       	subi	r24, 0xFF	; 255
   1bbf0:	9d 4f       	sbci	r25, 0xFD	; 253
   1bbf2:	ea de       	rcall	.-556    	; 0x1b9c8 <lif_ascii_string_to_e010>
   1bbf4:	ce 5f       	subi	r28, 0xFE	; 254
   1bbf6:	dc 4f       	sbci	r29, 0xFC	; 252
   1bbf8:	99 83       	std	Y+1, r25	; 0x01
   1bbfa:	88 83       	st	Y, r24
   1bbfc:	c2 50       	subi	r28, 0x02	; 2
   1bbfe:	d3 40       	sbci	r29, 0x03	; 3
        // Write string
        // Now Write string
        if(LIF)
   1bc00:	e1 14       	cp	r14, r1
   1bc02:	f1 04       	cpc	r15, r1
   1bc04:	09 f4       	brne	.+2      	; 0x1bc08 <lif_add_ascii_file_as_e010_wrapper+0xce>
   1bc06:	bc cf       	rjmp	.-136    	; 0x1bb80 <lif_add_ascii_file_as_e010_wrapper+0x46>
        {
            len = lif_write(LIF, obuf, offset, size);
   1bc08:	8c 01       	movw	r16, r24
   1bc0a:	a5 01       	movw	r20, r10
   1bc0c:	94 01       	movw	r18, r8
   1bc0e:	be 01       	movw	r22, r28
   1bc10:	6f 5f       	subi	r22, 0xFF	; 255
   1bc12:	7f 4f       	sbci	r23, 0xFF	; 255
   1bc14:	c7 01       	movw	r24, r14
   1bc16:	0e 94 82 ca 	call	0x19504	; 0x19504 <lif_write>
            if(len < size)
   1bc1a:	ce 5f       	subi	r28, 0xFE	; 254
   1bc1c:	dc 4f       	sbci	r29, 0xFC	; 252
   1bc1e:	08 81       	ld	r16, Y
   1bc20:	19 81       	ldd	r17, Y+1	; 0x01
   1bc22:	c2 50       	subi	r28, 0x02	; 2
   1bc24:	d3 40       	sbci	r29, 0x03	; 3
   1bc26:	80 17       	cp	r24, r16
   1bc28:	91 07       	cpc	r25, r17
   1bc2a:	0c f0       	brlt	.+2      	; 0x1bc2e <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1bc2c:	a9 cf       	rjmp	.-174    	; 0x1bb80 <lif_add_ascii_file_as_e010_wrapper+0x46>
            {
                fclose(fi);
   1bc2e:	c6 01       	movw	r24, r12
   1bc30:	0e 94 87 82 	call	0x1050e	; 0x1050e <fclose>
                return(-1);
   1bc34:	6f ef       	ldi	r22, 0xFF	; 255
   1bc36:	7f ef       	ldi	r23, 0xFF	; 255
   1bc38:	8f ef       	ldi	r24, 0xFF	; 255
   1bc3a:	9f ef       	ldi	r25, 0xFF	; 255
   1bc3c:	86 c0       	rjmp	.+268    	; 0x1bd4a <lif_add_ascii_file_as_e010_wrapper+0x210>
        count += size;

        if(count > 256)
        {       
            count = 0;
            if(LIF)
   1bc3e:	e1 14       	cp	r14, r1
   1bc40:	f1 04       	cpc	r15, r1
   1bc42:	c1 f0       	breq	.+48     	; 0x1bc74 <lif_add_ascii_file_as_e010_wrapper+0x13a>
                printf("Wrote: %8ld\r", (long)bytes);
   1bc44:	7f 92       	push	r7
   1bc46:	6f 92       	push	r6
   1bc48:	5f 92       	push	r5
   1bc4a:	4f 92       	push	r4
   1bc4c:	1f 92       	push	r1
   1bc4e:	cb 5f       	subi	r28, 0xFB	; 251
   1bc50:	dc 4f       	sbci	r29, 0xFC	; 252
   1bc52:	48 81       	ld	r20, Y
   1bc54:	c5 50       	subi	r28, 0x05	; 5
   1bc56:	d3 40       	sbci	r29, 0x03	; 3
   1bc58:	4f 93       	push	r20
   1bc5a:	cc 5f       	subi	r28, 0xFC	; 252
   1bc5c:	dc 4f       	sbci	r29, 0xFC	; 252
   1bc5e:	88 81       	ld	r24, Y
   1bc60:	c4 50       	subi	r28, 0x04	; 4
   1bc62:	d3 40       	sbci	r29, 0x03	; 3
   1bc64:	8f 93       	push	r24
   1bc66:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1bc6a:	0f b6       	in	r0, 0x3f	; 63
   1bc6c:	f8 94       	cli
   1bc6e:	de bf       	out	0x3e, r29	; 62
   1bc70:	0f be       	out	0x3f, r0	; 63
   1bc72:	cd bf       	out	0x3d, r28	; 61
        bytes += size;
        count += size;

        if(count > 256)
        {       
            count = 0;
   1bc74:	21 2c       	mov	r2, r1
   1bc76:	31 2c       	mov	r3, r1
   1bc78:	9d cf       	rjmp	.-198    	; 0x1bbb4 <lif_add_ascii_file_as_e010_wrapper+0x7a>
            if(LIF)
                printf("Wrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1bc7a:	c6 01       	movw	r24, r12
   1bc7c:	0e 94 87 82 	call	0x1050e	; 0x1050e <fclose>

    // Write EOF
    str[0] = 0;
   1bc80:	cf 5f       	subi	r28, 0xFF	; 255
   1bc82:	dd 4f       	sbci	r29, 0xFD	; 253
   1bc84:	18 82       	st	Y, r1
   1bc86:	c1 50       	subi	r28, 0x01	; 1
   1bc88:	d2 40       	sbci	r29, 0x02	; 2
    // We only want to return the count of bytes in the file NOT the padding at the end
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1bc8a:	9e 01       	movw	r18, r28
   1bc8c:	2f 5f       	subi	r18, 0xFF	; 255
   1bc8e:	3f 4f       	sbci	r19, 0xFF	; 255
   1bc90:	b5 01       	movw	r22, r10
   1bc92:	a4 01       	movw	r20, r8
   1bc94:	ce 01       	movw	r24, r28
   1bc96:	8f 5f       	subi	r24, 0xFF	; 255
   1bc98:	9d 4f       	sbci	r25, 0xFD	; 253
   1bc9a:	96 de       	rcall	.-724    	; 0x1b9c8 <lif_ascii_string_to_e010>
   1bc9c:	6c 01       	movw	r12, r24

    if(LIF)
   1bc9e:	e1 14       	cp	r14, r1
   1bca0:	f1 04       	cpc	r15, r1
   1bca2:	b9 f4       	brne	.+46     	; 0x1bcd2 <lif_add_ascii_file_as_e010_wrapper+0x198>
            return(-1);

    }

    offset += size;
    bytes += size;
   1bca4:	c6 01       	movw	r24, r12
   1bca6:	dd 0c       	add	r13, r13
   1bca8:	aa 0b       	sbc	r26, r26
   1bcaa:	bb 0b       	sbc	r27, r27
   1bcac:	48 0e       	add	r4, r24
   1bcae:	59 1e       	adc	r5, r25
   1bcb0:	6a 1e       	adc	r6, r26
   1bcb2:	7b 1e       	adc	r7, r27

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
   1bcb4:	88 0e       	add	r8, r24
   1bcb6:	99 1e       	adc	r9, r25
   1bcb8:	aa 1e       	adc	r10, r26
   1bcba:	bb 1e       	adc	r11, r27
   1bcbc:	ae 01       	movw	r20, r28
   1bcbe:	4f 5f       	subi	r20, 0xFF	; 255
   1bcc0:	5f 4f       	sbci	r21, 0xFF	; 255
   1bcc2:	c5 01       	movw	r24, r10
   1bcc4:	b4 01       	movw	r22, r8
   1bcc6:	26 de       	rcall	.-948    	; 0x1b914 <lif_e010_pad_sector>
   1bcc8:	6c 01       	movw	r12, r24
    if(LIF)
   1bcca:	e1 14       	cp	r14, r1
   1bccc:	f1 04       	cpc	r15, r1
   1bcce:	f1 f4       	brne	.+60     	; 0x1bd0c <lif_add_ascii_file_as_e010_wrapper+0x1d2>
   1bcd0:	3a c0       	rjmp	.+116    	; 0x1bd46 <lif_add_ascii_file_as_e010_wrapper+0x20c>
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("Wrote: %8ld\r", (long)bytes);
   1bcd2:	7f 92       	push	r7
   1bcd4:	6f 92       	push	r6
   1bcd6:	5f 92       	push	r5
   1bcd8:	4f 92       	push	r4
   1bcda:	88 eb       	ldi	r24, 0xB8	; 184
   1bcdc:	98 e3       	ldi	r25, 0x38	; 56
   1bcde:	1f 92       	push	r1
   1bce0:	9f 93       	push	r25
   1bce2:	8f 93       	push	r24
   1bce4:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1bce8:	86 01       	movw	r16, r12
   1bcea:	a5 01       	movw	r20, r10
   1bcec:	94 01       	movw	r18, r8
   1bcee:	be 01       	movw	r22, r28
   1bcf0:	6f 5f       	subi	r22, 0xFF	; 255
   1bcf2:	7f 4f       	sbci	r23, 0xFF	; 255
   1bcf4:	c7 01       	movw	r24, r14
   1bcf6:	0e 94 82 ca 	call	0x19504	; 0x19504 <lif_write>
        if(len < size)
   1bcfa:	0f b6       	in	r0, 0x3f	; 63
   1bcfc:	f8 94       	cli
   1bcfe:	de bf       	out	0x3e, r29	; 62
   1bd00:	0f be       	out	0x3f, r0	; 63
   1bd02:	cd bf       	out	0x3d, r28	; 61
   1bd04:	8c 15       	cp	r24, r12
   1bd06:	9d 05       	cpc	r25, r13
   1bd08:	6c f6       	brge	.-102    	; 0x1bca4 <lif_add_ascii_file_as_e010_wrapper+0x16a>
   1bd0a:	94 cf       	rjmp	.-216    	; 0x1bc34 <lif_add_ascii_file_as_e010_wrapper+0xfa>

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1bd0c:	8c 01       	movw	r16, r24
   1bd0e:	a5 01       	movw	r20, r10
   1bd10:	94 01       	movw	r18, r8
   1bd12:	be 01       	movw	r22, r28
   1bd14:	6f 5f       	subi	r22, 0xFF	; 255
   1bd16:	7f 4f       	sbci	r23, 0xFF	; 255
   1bd18:	c7 01       	movw	r24, r14
   1bd1a:	0e 94 82 ca 	call	0x19504	; 0x19504 <lif_write>
        if(len < size)
   1bd1e:	8c 15       	cp	r24, r12
   1bd20:	9d 05       	cpc	r25, r13
   1bd22:	0c f4       	brge	.+2      	; 0x1bd26 <lif_add_ascii_file_as_e010_wrapper+0x1ec>
   1bd24:	87 cf       	rjmp	.-242    	; 0x1bc34 <lif_add_ascii_file_as_e010_wrapper+0xfa>
            return(-1);
    }

    if(LIF)
        printf("Wrote: %8ld\r",(long)bytes);
   1bd26:	7f 92       	push	r7
   1bd28:	6f 92       	push	r6
   1bd2a:	5f 92       	push	r5
   1bd2c:	4f 92       	push	r4
   1bd2e:	8b ea       	ldi	r24, 0xAB	; 171
   1bd30:	98 e3       	ldi	r25, 0x38	; 56
   1bd32:	1f 92       	push	r1
   1bd34:	9f 93       	push	r25
   1bd36:	8f 93       	push	r24
   1bd38:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1bd3c:	0f b6       	in	r0, 0x3f	; 63
   1bd3e:	f8 94       	cli
   1bd40:	de bf       	out	0x3e, r29	; 62
   1bd42:	0f be       	out	0x3f, r0	; 63
   1bd44:	cd bf       	out	0x3d, r28	; 61

    return(bytes);
   1bd46:	b2 01       	movw	r22, r4
   1bd48:	c3 01       	movw	r24, r6
}
   1bd4a:	ca 5f       	subi	r28, 0xFA	; 250
   1bd4c:	dc 4f       	sbci	r29, 0xFC	; 252
   1bd4e:	e2 e1       	ldi	r30, 0x12	; 18
   1bd50:	0c 94 50 ec 	jmp	0x1d8a0	; 0x1d8a0 <__epilogue_restores__>

0001bd54 <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1bd54:	a2 e3       	ldi	r26, 0x32	; 50
   1bd56:	b0 e0       	ldi	r27, 0x00	; 0
   1bd58:	e0 eb       	ldi	r30, 0xB0	; 176
   1bd5a:	fe ed       	ldi	r31, 0xDE	; 222
   1bd5c:	0c 94 34 ec 	jmp	0x1d868	; 0x1d868 <__prologue_saves__>
   1bd60:	6c 01       	movw	r12, r24
   1bd62:	1b 01       	movw	r2, r22
   1bd64:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;
    stat_t st, *sp;


    if(!*lifimagename)
   1bd66:	fc 01       	movw	r30, r24
   1bd68:	80 81       	ld	r24, Z
   1bd6a:	81 11       	cpse	r24, r1
   1bd6c:	03 c0       	rjmp	.+6      	; 0x1bd74 <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1bd6e:	88 e7       	ldi	r24, 0x78	; 120
   1bd70:	98 e3       	ldi	r25, 0x38	; 56
   1bd72:	1a c0       	rjmp	.+52     	; 0x1bda8 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1bd74:	fb 01       	movw	r30, r22
   1bd76:	80 81       	ld	r24, Z
   1bd78:	81 11       	cpse	r24, r1
   1bd7a:	03 c0       	rjmp	.+6      	; 0x1bd82 <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1bd7c:	8a e4       	ldi	r24, 0x4A	; 74
   1bd7e:	98 e3       	ldi	r25, 0x38	; 56
   1bd80:	13 c0       	rjmp	.+38     	; 0x1bda8 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1bd82:	fa 01       	movw	r30, r20
   1bd84:	80 81       	ld	r24, Z
   1bd86:	81 11       	cpse	r24, r1
   1bd88:	03 c0       	rjmp	.+6      	; 0x1bd90 <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1bd8a:	8b e1       	ldi	r24, 0x1B	; 27
   1bd8c:	98 e3       	ldi	r25, 0x38	; 56
   1bd8e:	0c c0       	rjmp	.+24     	; 0x1bda8 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

    //Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1bd90:	be 01       	movw	r22, r28
   1bd92:	6f 5f       	subi	r22, 0xFF	; 255
   1bd94:	7f 4f       	sbci	r23, 0xFF	; 255
   1bd96:	ca 01       	movw	r24, r20
   1bd98:	0e 94 cb c9 	call	0x19396	; 0x19396 <lif_stat>
   1bd9c:	9a ab       	std	Y+50, r25	; 0x32
   1bd9e:	89 ab       	std	Y+49, r24	; 0x31
    if(!sp)
   1bda0:	89 2b       	or	r24, r25
   1bda2:	59 f4       	brne	.+22     	; 0x1bdba <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1bda4:	8b ee       	ldi	r24, 0xEB	; 235
   1bda6:	97 e3       	ldi	r25, 0x37	; 55
   1bda8:	1f 92       	push	r1
   1bdaa:	9f 93       	push	r25
   1bdac:	8f 93       	push	r24
   1bdae:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        return(-1);
   1bdb2:	0f 90       	pop	r0
   1bdb4:	0f 90       	pop	r0
   1bdb6:	0f 90       	pop	r0
   1bdb8:	fe c0       	rjmp	.+508    	; 0x1bfb6 <lif_add_ascii_file_as_e010+0x262>
    }

    if(debuglevel & 0x400)
   1bdba:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1bdbe:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1bdc2:	92 ff       	sbrs	r25, 2
   1bdc4:	12 c0       	rjmp	.+36     	; 0x1bdea <lif_add_ascii_file_as_e010+0x96>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1bdc6:	ff 92       	push	r15
   1bdc8:	ef 92       	push	r14
   1bdca:	3f 92       	push	r3
   1bdcc:	2f 92       	push	r2
   1bdce:	df 92       	push	r13
   1bdd0:	cf 92       	push	r12
   1bdd2:	8c eb       	ldi	r24, 0xBC	; 188
   1bdd4:	97 e3       	ldi	r25, 0x37	; 55
   1bdd6:	1f 92       	push	r1
   1bdd8:	9f 93       	push	r25
   1bdda:	8f 93       	push	r24
   1bddc:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1bde0:	0f b6       	in	r0, 0x3f	; 63
   1bde2:	f8 94       	cli
   1bde4:	de bf       	out	0x3e, r29	; 62
   1bde6:	0f be       	out	0x3f, r0	; 63
   1bde8:	cd bf       	out	0x3d, r28	; 61
            lifimagename, lifname, userfile);

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1bdea:	97 01       	movw	r18, r14
   1bdec:	40 e0       	ldi	r20, 0x00	; 0
   1bdee:	50 e0       	ldi	r21, 0x00	; 0
   1bdf0:	ba 01       	movw	r22, r20
   1bdf2:	80 e0       	ldi	r24, 0x00	; 0
   1bdf4:	90 e0       	ldi	r25, 0x00	; 0
   1bdf6:	a1 de       	rcall	.-702    	; 0x1bb3a <lif_add_ascii_file_as_e010_wrapper>
   1bdf8:	4b 01       	movw	r8, r22
   1bdfa:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1bdfc:	47 2e       	mov	r4, r23
   1bdfe:	58 2e       	mov	r5, r24
   1be00:	69 2e       	mov	r6, r25
   1be02:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1be04:	66 23       	and	r22, r22
   1be06:	29 f0       	breq	.+10     	; 0x1be12 <lif_add_ascii_file_as_e010+0xbe>
        ++sectors;
   1be08:	9f ef       	ldi	r25, 0xFF	; 255
   1be0a:	49 1a       	sub	r4, r25
   1be0c:	59 0a       	sbc	r5, r25
   1be0e:	69 0a       	sbc	r6, r25
   1be10:	79 0a       	sbc	r7, r25

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1be12:	6d eb       	ldi	r22, 0xBD	; 189
   1be14:	78 e0       	ldi	r23, 0x08	; 8
   1be16:	c6 01       	movw	r24, r12
   1be18:	ac da       	rcall	.-2728   	; 0x1b372 <lif_open_volume>
   1be1a:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1be1c:	00 97       	sbiw	r24, 0x00	; 0
   1be1e:	09 f4       	brne	.+2      	; 0x1be22 <lif_add_ascii_file_as_e010+0xce>
        return(-1); 

    // Now find free record
    index = lif_newdir(LIF, sectors);
   1be20:	ca c0       	rjmp	.+404    	; 0x1bfb6 <lif_add_ascii_file_as_e010+0x262>
   1be22:	b3 01       	movw	r22, r6
   1be24:	a2 01       	movw	r20, r4
   1be26:	40 d9       	rcall	.-3456   	; 0x1b0a8 <lif_newdir>
    if(index == -1)
   1be28:	3c 01       	movw	r6, r24
   1be2a:	01 96       	adiw	r24, 0x01	; 1
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1be2c:	a1 f4       	brne	.+40     	; 0x1be56 <lif_add_ascii_file_as_e010+0x102>
   1be2e:	ff 92       	push	r15
   1be30:	ef 92       	push	r14
   1be32:	df 92       	push	r13
   1be34:	cf 92       	push	r12
   1be36:	8c e8       	ldi	r24, 0x8C	; 140
   1be38:	97 e3       	ldi	r25, 0x37	; 55
   1be3a:	1f 92       	push	r1
   1be3c:	9f 93       	push	r25
   1be3e:	8f 93       	push	r24
   1be40:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1be44:	c8 01       	movw	r24, r16
   1be46:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>
    if(index == -1)
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
            lifimagename, userfile);
            lif_closedir(LIF);
            return(-1);
   1be4a:	0f b6       	in	r0, 0x3f	; 63
   1be4c:	f8 94       	cli
   1be4e:	de bf       	out	0x3e, r29	; 62
   1be50:	0f be       	out	0x3f, r0	; 63
   1be52:	cd bf       	out	0x3d, r28	; 61
    }

    // Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1be54:	b0 c0       	rjmp	.+352    	; 0x1bfb6 <lif_add_ascii_file_as_e010+0x262>
   1be56:	68 01       	movw	r12, r16
   1be58:	9f e4       	ldi	r25, 0x4F	; 79
   1be5a:	c9 0e       	add	r12, r25
   1be5c:	d1 1c       	adc	r13, r1
   1be5e:	4a e0       	ldi	r20, 0x0A	; 10
   1be60:	50 e0       	ldi	r21, 0x00	; 0
   1be62:	b1 01       	movw	r22, r2
   1be64:	c6 01       	movw	r24, r12
   1be66:	0e 94 6f cb 	call	0x196de	; 0x196de <lif_fixname>
    LIF->DIR.FileType = 0xe010;             // 10
   1be6a:	80 e1       	ldi	r24, 0x10	; 16
   1be6c:	90 ee       	ldi	r25, 0xE0	; 224
   1be6e:	f8 01       	movw	r30, r16
   1be70:	e6 5a       	subi	r30, 0xA6	; 166
   1be72:	ff 4f       	sbci	r31, 0xFF	; 255
   1be74:	91 83       	std	Z+1, r25	; 0x01
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1be76:	80 83       	st	Z, r24
   1be78:	e9 a9       	ldd	r30, Y+49	; 0x31
   1be7a:	fa a9       	ldd	r31, Y+50	; 0x32
   1be7c:	60 a5       	ldd	r22, Z+40	; 0x28
   1be7e:	71 a5       	ldd	r23, Z+41	; 0x29
   1be80:	82 a5       	ldd	r24, Z+42	; 0x2a
   1be82:	93 a5       	ldd	r25, Z+43	; 0x2b
   1be84:	a8 01       	movw	r20, r16
   1be86:	4c 59       	subi	r20, 0x9C	; 156
   1be88:	5f 4f       	sbci	r21, 0xFF	; 255
   1be8a:	0e 94 b4 cd 	call	0x19b68	; 0x19b68 <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;            // 26
   1be8e:	81 e0       	ldi	r24, 0x01	; 1
   1be90:	90 e8       	ldi	r25, 0x80	; 128
   1be92:	f8 01       	movw	r30, r16
   1be94:	e6 59       	subi	r30, 0x96	; 150
   1be96:	ff 4f       	sbci	r31, 0xFF	; 255
   1be98:	91 83       	std	Z+1, r25	; 0x01
    LIF->DIR.FileBytes = bytes;                 // 28
   1be9a:	80 83       	st	Z, r24
   1be9c:	32 96       	adiw	r30, 0x02	; 2
   1be9e:	91 82       	std	Z+1, r9	; 0x01
    LIF->DIR.SectorSize  = 0x100;           // 30
   1bea0:	80 82       	st	Z, r8
   1bea2:	80 e0       	ldi	r24, 0x00	; 0
   1bea4:	91 e0       	ldi	r25, 0x01	; 1
   1bea6:	32 96       	adiw	r30, 0x02	; 2
   1bea8:	91 83       	std	Z+1, r25	; 0x01
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1beaa:	80 83       	st	Z, r24
   1beac:	58 01       	movw	r10, r16
   1beae:	fc e5       	ldi	r31, 0x5C	; 92
   1beb0:	af 0e       	add	r10, r31
   1beb2:	b1 1c       	adc	r11, r1
   1beb4:	f5 01       	movw	r30, r10
   1beb6:	80 81       	ld	r24, Z
   1beb8:	91 81       	ldd	r25, Z+1	; 0x01
   1beba:	a2 81       	ldd	r26, Z+2	; 0x02
   1bebc:	b3 81       	ldd	r27, Z+3	; 0x03
   1bebe:	22 24       	eor	r2, r2
   1bec0:	38 2e       	mov	r3, r24
   1bec2:	49 2e       	mov	r4, r25

    if(debuglevel & 0x400)
   1bec4:	5a 2e       	mov	r5, r26
   1bec6:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1beca:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1bece:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1bed0:	05 c0       	rjmp	.+10     	; 0x1bedc <lif_add_ascii_file_as_e010+0x188>
   1bed2:	6a e5       	ldi	r22, 0x5A	; 90
   1bed4:	76 e1       	ldi	r23, 0x16	; 22
   1bed6:	c8 01       	movw	r24, r16
   1bed8:	0e 94 a0 ce 	call	0x19d40	; 0x19d40 <lif_dump_vol>

    // Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1bedc:	97 01       	movw	r18, r14
   1bede:	b2 01       	movw	r22, r4
   1bee0:	a1 01       	movw	r20, r2
   1bee2:	c8 01       	movw	r24, r16
   1bee4:	2a de       	rcall	.-940    	; 0x1bb3a <lif_add_ascii_file_as_e010_wrapper>
   1bee6:	4b 01       	movw	r8, r22

    if(debuglevel & 0x400)
   1bee8:	7c 01       	movw	r14, r24
   1beea:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1beee:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1bef2:	92 ff       	sbrs	r25, 2
    {
        printf("New Directory Information AFTER write\n");
   1bef4:	40 c0       	rjmp	.+128    	; 0x1bf76 <lif_add_ascii_file_as_e010+0x222>
   1bef6:	85 e6       	ldi	r24, 0x65	; 101
   1bef8:	97 e3       	ldi	r25, 0x37	; 55
   1befa:	1f 92       	push	r1
   1befc:	9f 93       	push	r25
   1befe:	8f 93       	push	r24
   1bf00:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1bf04:	df 92       	push	r13
   1bf06:	cf 92       	push	r12
   1bf08:	8e e4       	ldi	r24, 0x4E	; 78
   1bf0a:	97 e3       	ldi	r25, 0x37	; 55
   1bf0c:	1f 92       	push	r1
   1bf0e:	9f 93       	push	r25
   1bf10:	8f 93       	push	r24
   1bf12:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        printf("Index:            %4d\n", (int)index);
   1bf16:	7f 92       	push	r7
   1bf18:	6f 92       	push	r6
   1bf1a:	87 e3       	ldi	r24, 0x37	; 55
   1bf1c:	97 e3       	ldi	r25, 0x37	; 55
   1bf1e:	1f 92       	push	r1
   1bf20:	9f 93       	push	r25
   1bf22:	8f 93       	push	r24
   1bf24:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1bf28:	f5 01       	movw	r30, r10
   1bf2a:	83 81       	ldd	r24, Z+3	; 0x03
   1bf2c:	8f 93       	push	r24
   1bf2e:	82 81       	ldd	r24, Z+2	; 0x02
   1bf30:	8f 93       	push	r24
   1bf32:	81 81       	ldd	r24, Z+1	; 0x01
   1bf34:	8f 93       	push	r24
   1bf36:	80 81       	ld	r24, Z
   1bf38:	8f 93       	push	r24
   1bf3a:	8e e1       	ldi	r24, 0x1E	; 30
   1bf3c:	97 e3       	ldi	r25, 0x37	; 55
   1bf3e:	1f 92       	push	r1
   1bf40:	9f 93       	push	r25
   1bf42:	8f 93       	push	r24
   1bf44:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1bf48:	f8 01       	movw	r30, r16
   1bf4a:	e0 5a       	subi	r30, 0xA0	; 160
   1bf4c:	ff 4f       	sbci	r31, 0xFF	; 255
   1bf4e:	83 81       	ldd	r24, Z+3	; 0x03
   1bf50:	8f 93       	push	r24
   1bf52:	82 81       	ldd	r24, Z+2	; 0x02
   1bf54:	8f 93       	push	r24
   1bf56:	81 81       	ldd	r24, Z+1	; 0x01
   1bf58:	8f 93       	push	r24
   1bf5a:	80 81       	ld	r24, Z
   1bf5c:	8f 93       	push	r24
   1bf5e:	85 e0       	ldi	r24, 0x05	; 5
   1bf60:	97 e3       	ldi	r25, 0x37	; 55
   1bf62:	1f 92       	push	r1
   1bf64:	9f 93       	push	r25
   1bf66:	8f 93       	push	r24
   1bf68:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1bf6c:	0f b6       	in	r0, 0x3f	; 63
   1bf6e:	f8 94       	cli
   1bf70:	de bf       	out	0x3e, r29	; 62
   1bf72:	0f be       	out	0x3f, r0	; 63
    }

    // Write directory record
    // Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1bf74:	cd bf       	out	0x3d, r28	; 61
   1bf76:	b3 01       	movw	r22, r6
   1bf78:	c8 01       	movw	r24, r16
   1bf7a:	0e 94 ab d3 	call	0x1a756	; 0x1a756 <lif_writedirindex>
   1bf7e:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bf80:	21 f4       	brne	.+8      	; 0x1bf8a <lif_add_ascii_file_as_e010+0x236>
   1bf82:	c8 01       	movw	r24, r16
   1bf84:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>
   1bf88:	16 c0       	rjmp	.+44     	; 0x1bfb6 <lif_add_ascii_file_as_e010+0x262>
   1bf8a:	c8 01       	movw	r24, r16
   1bf8c:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("Wrote: %8ld\n", bytes);
   1bf90:	ff 92       	push	r15
   1bf92:	ef 92       	push	r14
   1bf94:	9f 92       	push	r9
   1bf96:	8f 92       	push	r8
   1bf98:	88 ef       	ldi	r24, 0xF8	; 248
   1bf9a:	96 e3       	ldi	r25, 0x36	; 54
   1bf9c:	1f 92       	push	r1
   1bf9e:	9f 93       	push	r25
   1bfa0:	8f 93       	push	r24
   1bfa2:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>

    // Return file size
    return(bytes);
   1bfa6:	0f b6       	in	r0, 0x3f	; 63
   1bfa8:	f8 94       	cli
   1bfaa:	de bf       	out	0x3e, r29	; 62
   1bfac:	0f be       	out	0x3f, r0	; 63
   1bfae:	cd bf       	out	0x3d, r28	; 61
   1bfb0:	b4 01       	movw	r22, r8
   1bfb2:	c7 01       	movw	r24, r14
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1); 
   1bfb4:	04 c0       	rjmp	.+8      	; 0x1bfbe <lif_add_ascii_file_as_e010+0x26a>
   1bfb6:	6f ef       	ldi	r22, 0xFF	; 255
   1bfb8:	7f ef       	ldi	r23, 0xFF	; 255
   1bfba:	8f ef       	ldi	r24, 0xFF	; 255

    printf("Wrote: %8ld\n", bytes);

    // Return file size
    return(bytes);
}
   1bfbc:	9f ef       	ldi	r25, 0xFF	; 255
   1bfbe:	e2 96       	adiw	r28, 0x32	; 50
   1bfc0:	e2 e1       	ldi	r30, 0x12	; 18
   1bfc2:	0c 94 50 ec 	jmp	0x1d8a0	; 0x1d8a0 <__epilogue_restores__>

0001bfc6 <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1bfc6:	ac e2       	ldi	r26, 0x2C	; 44
   1bfc8:	b2 e0       	ldi	r27, 0x02	; 2
   1bfca:	e9 ee       	ldi	r30, 0xE9	; 233
   1bfcc:	ff ed       	ldi	r31, 0xDF	; 223
   1bfce:	0c 94 34 ec 	jmp	0x1d868	; 0x1d868 <__prologue_saves__>
   1bfd2:	f8 2e       	mov	r15, r24
   1bfd4:	b9 2e       	mov	r11, r25
   1bfd6:	16 2f       	mov	r17, r22
   1bfd8:	07 2f       	mov	r16, r23
   1bfda:	c4 5e       	subi	r28, 0xE4	; 228
   1bfdc:	dd 4f       	sbci	r29, 0xFD	; 253
   1bfde:	48 83       	st	Y, r20
   1bfe0:	cc 51       	subi	r28, 0x1C	; 28
   1bfe2:	d2 40       	sbci	r29, 0x02	; 2
   1bfe4:	e5 2e       	mov	r14, r21
    uint8_t buf[LIF_SECTOR_SIZE+4];
    // Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];


    LIF = lif_open_volume(lifimagename,"r");
   1bfe6:	65 e7       	ldi	r22, 0x75	; 117
   1bfe8:	77 e0       	ldi	r23, 0x07	; 7
   1bfea:	c3 d9       	rcall	.-3194   	; 0x1b372 <lif_open_volume>
   1bfec:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1bfee:	00 97       	sbiw	r24, 0x00	; 0
   1bff0:	51 f4       	brne	.+20     	; 0x1c006 <lif_extract_e010_as_ascii+0x40>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1bff2:	bf 92       	push	r11
   1bff4:	ff 92       	push	r15
   1bff6:	80 ee       	ldi	r24, 0xE0	; 224
   1bff8:	96 e3       	ldi	r25, 0x36	; 54
   1bffa:	1f 92       	push	r1
   1bffc:	9f 93       	push	r25
   1bffe:	8f 93       	push	r24
   1c000:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1c004:	11 c0       	rjmp	.+34     	; 0x1c028 <lif_extract_e010_as_ascii+0x62>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1c006:	61 2f       	mov	r22, r17
   1c008:	70 2f       	mov	r23, r16
   1c00a:	20 dc       	rcall	.-1984   	; 0x1b84c <lif_find_file>
    if(index == -1)
   1c00c:	01 96       	adiw	r24, 0x01	; 1
   1c00e:	a1 f4       	brne	.+40     	; 0x1c038 <lif_extract_e010_as_ascii+0x72>
    {
        printf("LIF File not found:%s\n", lifname);
   1c010:	0f 93       	push	r16
   1c012:	1f 93       	push	r17
   1c014:	89 ec       	ldi	r24, 0xC9	; 201
   1c016:	96 e3       	ldi	r25, 0x36	; 54
   1c018:	1f 92       	push	r1
   1c01a:	9f 93       	push	r25
   1c01c:	8f 93       	push	r24
   1c01e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c022:	c6 01       	movw	r24, r12
   1c024:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1c028:	0f 90       	pop	r0
   1c02a:	0f 90       	pop	r0
   1c02c:	0f 90       	pop	r0
   1c02e:	0f 90       	pop	r0
   1c030:	0f 90       	pop	r0
   1c032:	80 e0       	ldi	r24, 0x00	; 0
   1c034:	90 e0       	ldi	r25, 0x00	; 0
   1c036:	ae c2       	rjmp	.+1372   	; 0x1c594 <lif_extract_e010_as_ascii+0x5ce>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1c038:	f6 01       	movw	r30, r12
   1c03a:	e6 5a       	subi	r30, 0xA6	; 166
   1c03c:	ff 4f       	sbci	r31, 0xFF	; 255
   1c03e:	80 81       	ld	r24, Z
   1c040:	91 81       	ldd	r25, Z+1	; 0x01
   1c042:	9c 01       	movw	r18, r24
   1c044:	2c 7f       	andi	r18, 0xFC	; 252
   1c046:	20 31       	cpi	r18, 0x10	; 16
   1c048:	30 4e       	sbci	r19, 0xE0	; 224
   1c04a:	c9 f0       	breq	.+50     	; 0x1c07e <lif_extract_e010_as_ascii+0xb8>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1c04c:	9f 93       	push	r25
   1c04e:	8f 93       	push	r24
   1c050:	ef 92       	push	r14
   1c052:	c4 5e       	subi	r28, 0xE4	; 228
   1c054:	dd 4f       	sbci	r29, 0xFD	; 253
   1c056:	58 81       	ld	r21, Y
   1c058:	cc 51       	subi	r28, 0x1C	; 28
   1c05a:	d2 40       	sbci	r29, 0x02	; 2
   1c05c:	5f 93       	push	r21
   1c05e:	81 e9       	ldi	r24, 0x91	; 145
   1c060:	96 e3       	ldi	r25, 0x36	; 54
   1c062:	1f 92       	push	r1
   1c064:	9f 93       	push	r25
   1c066:	8f 93       	push	r24
   1c068:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c06c:	c6 01       	movw	r24, r12
   1c06e:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
        lif_closedir(LIF);
        return(0);
   1c072:	0f b6       	in	r0, 0x3f	; 63
   1c074:	f8 94       	cli
   1c076:	de bf       	out	0x3e, r29	; 62
   1c078:	0f be       	out	0x3f, r0	; 63
   1c07a:	cd bf       	out	0x3d, r28	; 61
   1c07c:	da cf       	rjmp	.-76     	; 0x1c032 <lif_extract_e010_as_ascii+0x6c>
    }

    start = LIF->DIR.FileStartSector;
   1c07e:	f6 01       	movw	r30, r12
   1c080:	e4 5a       	subi	r30, 0xA4	; 164
   1c082:	ff 4f       	sbci	r31, 0xFF	; 255
   1c084:	80 80       	ld	r8, Z
   1c086:	91 80       	ldd	r9, Z+1	; 0x01
   1c088:	a2 80       	ldd	r10, Z+2	; 0x02
   1c08a:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1c08c:	34 96       	adiw	r30, 0x04	; 4
   1c08e:	80 81       	ld	r24, Z
   1c090:	91 81       	ldd	r25, Z+1	; 0x01
   1c092:	a2 81       	ldd	r26, Z+2	; 0x02
   1c094:	b3 81       	ldd	r27, Z+3	; 0x03
   1c096:	a5 01       	movw	r20, r10
   1c098:	94 01       	movw	r18, r8
   1c09a:	28 0f       	add	r18, r24
   1c09c:	39 1f       	adc	r19, r25
   1c09e:	4a 1f       	adc	r20, r26
   1c0a0:	5b 1f       	adc	r21, r27
   1c0a2:	c9 5d       	subi	r28, 0xD9	; 217
   1c0a4:	dd 4f       	sbci	r29, 0xFD	; 253
   1c0a6:	28 83       	st	Y, r18
   1c0a8:	39 83       	std	Y+1, r19	; 0x01
   1c0aa:	4a 83       	std	Y+2, r20	; 0x02
   1c0ac:	5b 83       	std	Y+3, r21	; 0x03
   1c0ae:	c7 52       	subi	r28, 0x27	; 39
   1c0b0:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1c0b2:	c6 01       	movw	r24, r12
   1c0b4:	8c 59       	subi	r24, 0x9C	; 156
   1c0b6:	9f 4f       	sbci	r25, 0xFF	; 255
   1c0b8:	0e 94 f6 cd 	call	0x19bec	; 0x19bec <lif_lifbcd2time>
   1c0bc:	c3 5e       	subi	r28, 0xE3	; 227
   1c0be:	dd 4f       	sbci	r29, 0xFD	; 253
   1c0c0:	68 83       	st	Y, r22
   1c0c2:	79 83       	std	Y+1, r23	; 0x01
   1c0c4:	8a 83       	std	Y+2, r24	; 0x02
   1c0c6:	9b 83       	std	Y+3, r25	; 0x03
   1c0c8:	cd 51       	subi	r28, 0x1D	; 29
   1c0ca:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1c0cc:	ba 2d       	mov	r27, r10
   1c0ce:	a9 2d       	mov	r26, r9
   1c0d0:	98 2d       	mov	r25, r8
   1c0d2:	88 27       	eor	r24, r24
   1c0d4:	cf 5e       	subi	r28, 0xEF	; 239
   1c0d6:	dd 4f       	sbci	r29, 0xFD	; 253
   1c0d8:	88 83       	st	Y, r24
   1c0da:	99 83       	std	Y+1, r25	; 0x01
   1c0dc:	aa 83       	std	Y+2, r26	; 0x02
   1c0de:	bb 83       	std	Y+3, r27	; 0x03
   1c0e0:	c1 51       	subi	r28, 0x11	; 17
   1c0e2:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1c0e4:	68 ec       	ldi	r22, 0xC8	; 200
   1c0e6:	78 e0       	ldi	r23, 0x08	; 8
   1c0e8:	c4 5e       	subi	r28, 0xE4	; 228
   1c0ea:	dd 4f       	sbci	r29, 0xFD	; 253
   1c0ec:	88 81       	ld	r24, Y
   1c0ee:	cc 51       	subi	r28, 0x1C	; 28
   1c0f0:	d2 40       	sbci	r29, 0x02	; 2
   1c0f2:	9e 2d       	mov	r25, r14
   1c0f4:	0e 94 a3 c9 	call	0x19346	; 0x19346 <lif_open>
   1c0f8:	c6 5e       	subi	r28, 0xE6	; 230
   1c0fa:	dd 4f       	sbci	r29, 0xFD	; 253
   1c0fc:	99 83       	std	Y+1, r25	; 0x01
   1c0fe:	88 83       	st	Y, r24
   1c100:	ca 51       	subi	r28, 0x1A	; 26
   1c102:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1c104:	89 2b       	or	r24, r25
   1c106:	21 f4       	brne	.+8      	; 0x1c110 <lif_extract_e010_as_ascii+0x14a>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c108:	c6 01       	movw	r24, r12
   1c10a:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>
   1c10e:	91 cf       	rjmp	.-222    	; 0x1c032 <lif_extract_e010_as_ascii+0x6c>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1c110:	ef 92       	push	r14
   1c112:	c4 5e       	subi	r28, 0xE4	; 228
   1c114:	dd 4f       	sbci	r29, 0xFD	; 253
   1c116:	98 81       	ld	r25, Y
   1c118:	cc 51       	subi	r28, 0x1C	; 28
   1c11a:	d2 40       	sbci	r29, 0x02	; 2
   1c11c:	9f 93       	push	r25
   1c11e:	81 e8       	ldi	r24, 0x81	; 129
   1c120:	96 e3       	ldi	r25, 0x36	; 54
   1c122:	1f 92       	push	r1
   1c124:	9f 93       	push	r25
   1c126:	8f 93       	push	r24
   1c128:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1c12c:	0f 90       	pop	r0
   1c12e:	0f 90       	pop	r0
   1c130:	0f 90       	pop	r0
   1c132:	0f 90       	pop	r0
   1c134:	0f 90       	pop	r0
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
    wind = 0;
   1c136:	81 2c       	mov	r8, r1
   1c138:	91 2c       	mov	r9, r1
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1c13a:	c8 5e       	subi	r28, 0xE8	; 232
   1c13c:	dd 4f       	sbci	r29, 0xFD	; 253
   1c13e:	19 82       	std	Y+1, r1	; 0x01
   1c140:	18 82       	st	Y, r1
   1c142:	c8 51       	subi	r28, 0x18	; 24
   1c144:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
   1c146:	a1 e0       	ldi	r26, 0x01	; 1
   1c148:	cb 5e       	subi	r28, 0xEB	; 235
   1c14a:	dd 4f       	sbci	r29, 0xFD	; 253
   1c14c:	a8 83       	st	Y, r26
   1c14e:	c5 51       	subi	r28, 0x15	; 21
   1c150:	d2 40       	sbci	r29, 0x02	; 2
   1c152:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1c154:	41 2c       	mov	r4, r1
   1c156:	51 2c       	mov	r5, r1
   1c158:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("Wrote: %8ld\r", bytes);
   1c15a:	81 ec       	ldi	r24, 0xC1	; 193
   1c15c:	95 e3       	ldi	r25, 0x35	; 53
   1c15e:	9c 01       	movw	r18, r24
   1c160:	40 e0       	ldi	r20, 0x00	; 0
   1c162:	cf 5d       	subi	r28, 0xDF	; 223
   1c164:	dd 4f       	sbci	r29, 0xFD	; 253
   1c166:	28 83       	st	Y, r18
   1c168:	39 83       	std	Y+1, r19	; 0x01
   1c16a:	4a 83       	std	Y+2, r20	; 0x02
   1c16c:	c1 52       	subi	r28, 0x21	; 33
   1c16e:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1c170:	8e ec       	ldi	r24, 0xCE	; 206
   1c172:	95 e3       	ldi	r25, 0x35	; 53
   1c174:	9c 01       	movw	r18, r24
   1c176:	40 e0       	ldi	r20, 0x00	; 0
   1c178:	cc 5d       	subi	r28, 0xDC	; 220
   1c17a:	dd 4f       	sbci	r29, 0xFD	; 253
   1c17c:	28 83       	st	Y, r18
   1c17e:	39 83       	std	Y+1, r19	; 0x01
   1c180:	4a 83       	std	Y+2, r20	; 0x02
   1c182:	c4 52       	subi	r28, 0x24	; 36
   1c184:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1c186:	cf 5e       	subi	r28, 0xEF	; 239
   1c188:	dd 4f       	sbci	r29, 0xFD	; 253
   1c18a:	28 81       	ld	r18, Y
   1c18c:	39 81       	ldd	r19, Y+1	; 0x01
   1c18e:	4a 81       	ldd	r20, Y+2	; 0x02
   1c190:	5b 81       	ldd	r21, Y+3	; 0x03
   1c192:	c1 51       	subi	r28, 0x11	; 17
   1c194:	d2 40       	sbci	r29, 0x02	; 2
   1c196:	bb 27       	eor	r27, r27
   1c198:	a5 2f       	mov	r26, r21
   1c19a:	94 2f       	mov	r25, r20
   1c19c:	83 2f       	mov	r24, r19
   1c19e:	c9 5d       	subi	r28, 0xD9	; 217
   1c1a0:	dd 4f       	sbci	r29, 0xFD	; 253
   1c1a2:	28 81       	ld	r18, Y
   1c1a4:	39 81       	ldd	r19, Y+1	; 0x01
   1c1a6:	4a 81       	ldd	r20, Y+2	; 0x02
   1c1a8:	5b 81       	ldd	r21, Y+3	; 0x03
   1c1aa:	c7 52       	subi	r28, 0x27	; 39
   1c1ac:	d2 40       	sbci	r29, 0x02	; 2
   1c1ae:	28 17       	cp	r18, r24
   1c1b0:	39 07       	cpc	r19, r25
   1c1b2:	4a 07       	cpc	r20, r26
   1c1b4:	5b 07       	cpc	r21, r27
   1c1b6:	08 f4       	brcc	.+2      	; 0x1c1ba <lif_extract_e010_as_ascii+0x1f4>
   1c1b8:	76 c1       	rjmp	.+748    	; 0x1c4a6 <lif_extract_e010_as_ascii+0x4e0>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1c1ba:	00 e0       	ldi	r16, 0x00	; 0
   1c1bc:	11 e0       	ldi	r17, 0x01	; 1
   1c1be:	cf 5e       	subi	r28, 0xEF	; 239
   1c1c0:	dd 4f       	sbci	r29, 0xFD	; 253
   1c1c2:	28 81       	ld	r18, Y
   1c1c4:	39 81       	ldd	r19, Y+1	; 0x01
   1c1c6:	4a 81       	ldd	r20, Y+2	; 0x02
   1c1c8:	5b 81       	ldd	r21, Y+3	; 0x03
   1c1ca:	c1 51       	subi	r28, 0x11	; 17
   1c1cc:	d2 40       	sbci	r29, 0x02	; 2
   1c1ce:	be 01       	movw	r22, r28
   1c1d0:	6b 5f       	subi	r22, 0xFB	; 251
   1c1d2:	7e 4f       	sbci	r23, 0xFE	; 254
   1c1d4:	c6 01       	movw	r24, r12
   1c1d6:	0e 94 29 ca 	call	0x19452	; 0x19452 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1c1da:	6f 3f       	cpi	r22, 0xFF	; 255
   1c1dc:	71 05       	cpc	r23, r1
   1c1de:	09 f0       	breq	.+2      	; 0x1c1e2 <lif_extract_e010_as_ascii+0x21c>
   1c1e0:	0c f4       	brge	.+2      	; 0x1c1e4 <lif_extract_e010_as_ascii+0x21e>
   1c1e2:	5b c1       	rjmp	.+694    	; 0x1c49a <lif_extract_e010_as_ascii+0x4d4>
   1c1e4:	00 e0       	ldi	r16, 0x00	; 0
   1c1e6:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1c1e8:	c8 5e       	subi	r28, 0xE8	; 232
   1c1ea:	dd 4f       	sbci	r29, 0xFD	; 253
   1c1ec:	a8 81       	ld	r26, Y
   1c1ee:	b9 81       	ldd	r27, Y+1	; 0x01
   1c1f0:	c8 51       	subi	r28, 0x18	; 24
   1c1f2:	d2 40       	sbci	r29, 0x02	; 2
   1c1f4:	ab 2b       	or	r26, r27
   1c1f6:	09 f0       	breq	.+2      	; 0x1c1fa <lif_extract_e010_as_ascii+0x234>
   1c1f8:	3c c1       	rjmp	.+632    	; 0x1c472 <lif_extract_e010_as_ascii+0x4ac>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1c1fa:	e5 e0       	ldi	r30, 0x05	; 5
   1c1fc:	f1 e0       	ldi	r31, 0x01	; 1
   1c1fe:	ec 0f       	add	r30, r28
   1c200:	fd 1f       	adc	r31, r29
   1c202:	e0 0f       	add	r30, r16
   1c204:	f1 1f       	adc	r31, r17
   1c206:	80 81       	ld	r24, Z
   1c208:	98 2f       	mov	r25, r24
   1c20a:	9f 7e       	andi	r25, 0xEF	; 239
   1c20c:	9f 3c       	cpi	r25, 0xCF	; 207
   1c20e:	11 f0       	breq	.+4      	; 0x1c214 <lif_extract_e010_as_ascii+0x24e>
   1c210:	8f 36       	cpi	r24, 0x6F	; 111
   1c212:	d9 f5       	brne	.+118    	; 0x1c28a <lif_extract_e010_as_ascii+0x2c4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1c214:	e5 e0       	ldi	r30, 0x05	; 5
   1c216:	f1 e0       	ldi	r31, 0x01	; 1
   1c218:	ec 0f       	add	r30, r28
   1c21a:	fd 1f       	adc	r31, r29
   1c21c:	e0 0f       	add	r30, r16
   1c21e:	f1 1f       	adc	r31, r17
   1c220:	21 80       	ldd	r2, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8); 
   1c222:	f8 01       	movw	r30, r16
   1c224:	32 96       	adiw	r30, 0x02	; 2
   1c226:	45 e0       	ldi	r20, 0x05	; 5
   1c228:	51 e0       	ldi	r21, 0x01	; 1
   1c22a:	4c 0f       	add	r20, r28
   1c22c:	5d 1f       	adc	r21, r29
   1c22e:	e4 0f       	add	r30, r20
   1c230:	f5 1f       	adc	r31, r21
   1c232:	0d 5f       	subi	r16, 0xFD	; 253
   1c234:	1f 4f       	sbci	r17, 0xFF	; 255
   1c236:	80 81       	ld	r24, Z
   1c238:	31 2c       	mov	r3, r1
   1c23a:	38 2a       	or	r3, r24
                // EOF ?
                if(len == 0)
   1c23c:	21 14       	cp	r2, r1
   1c23e:	31 04       	cpc	r3, r1
   1c240:	09 f4       	brne	.+2      	; 0x1c244 <lif_extract_e010_as_ascii+0x27e>
   1c242:	0f c1       	rjmp	.+542    	; 0x1c462 <lif_extract_e010_as_ascii+0x49c>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1c244:	5f ef       	ldi	r21, 0xFF	; 255
   1c246:	25 16       	cp	r2, r21
   1c248:	31 04       	cpc	r3, r1
   1c24a:	09 f0       	breq	.+2      	; 0x1c24e <lif_extract_e010_as_ascii+0x288>
   1c24c:	7c f4       	brge	.+30     	; 0x1c26c <lif_extract_e010_as_ascii+0x2a6>
   1c24e:	ca 5e       	subi	r28, 0xEA	; 234
   1c250:	dd 4f       	sbci	r29, 0xFD	; 253
   1c252:	19 82       	std	Y+1, r1	; 0x01
   1c254:	18 82       	st	Y, r1
   1c256:	c6 51       	subi	r28, 0x16	; 22
   1c258:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1c25a:	c1 01       	movw	r24, r2
   1c25c:	01 97       	sbiw	r24, 0x01	; 1
   1c25e:	c5 5d       	subi	r28, 0xD5	; 213
   1c260:	dd 4f       	sbci	r29, 0xFD	; 253
   1c262:	99 83       	std	Y+1, r25	; 0x01
   1c264:	88 83       	st	Y, r24
   1c266:	cb 52       	subi	r28, 0x2B	; 43
   1c268:	d2 40       	sbci	r29, 0x02	; 2
   1c26a:	7b c0       	rjmp	.+246    	; 0x1c362 <lif_extract_e010_as_ascii+0x39c>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1c26c:	3f 92       	push	r3
   1c26e:	2f 92       	push	r2
   1c270:	8c e4       	ldi	r24, 0x4C	; 76
   1c272:	96 e3       	ldi	r25, 0x36	; 54
   1c274:	1f 92       	push	r1
   1c276:	9f 93       	push	r25
   1c278:	8f 93       	push	r24
   1c27a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
                    status = 0;
                    done = 1;
                    break;
   1c27e:	0f 90       	pop	r0
   1c280:	0f 90       	pop	r0
   1c282:	0f 90       	pop	r0
   1c284:	0f 90       	pop	r0
   1c286:	0f 90       	pop	r0
   1c288:	2b c0       	rjmp	.+86     	; 0x1c2e0 <lif_extract_e010_as_ascii+0x31a>
                }
            }
            else if(buf[ind] == 0xEF)
   1c28a:	8f 3e       	cpi	r24, 0xEF	; 239
   1c28c:	09 f4       	brne	.+2      	; 0x1c290 <lif_extract_e010_as_ascii+0x2ca>
   1c28e:	f1 c0       	rjmp	.+482    	; 0x1c472 <lif_extract_e010_as_ascii+0x4ac>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1c290:	1f 93       	push	r17
   1c292:	0f 93       	push	r16
   1c294:	cc 5e       	subi	r28, 0xEC	; 236
   1c296:	dd 4f       	sbci	r29, 0xFD	; 253
   1c298:	b8 81       	ld	r27, Y
   1c29a:	c4 51       	subi	r28, 0x14	; 20
   1c29c:	d2 40       	sbci	r29, 0x02	; 2
   1c29e:	bf 93       	push	r27
   1c2a0:	cd 5e       	subi	r28, 0xED	; 237
   1c2a2:	dd 4f       	sbci	r29, 0xFD	; 253
   1c2a4:	28 81       	ld	r18, Y
   1c2a6:	c3 51       	subi	r28, 0x13	; 19
   1c2a8:	d2 40       	sbci	r29, 0x02	; 2
   1c2aa:	2f 93       	push	r18
   1c2ac:	ce 5e       	subi	r28, 0xEE	; 238
   1c2ae:	dd 4f       	sbci	r29, 0xFD	; 253
   1c2b0:	38 81       	ld	r19, Y
   1c2b2:	c2 51       	subi	r28, 0x12	; 18
   1c2b4:	d2 40       	sbci	r29, 0x02	; 2
   1c2b6:	3f 93       	push	r19
   1c2b8:	cf 5e       	subi	r28, 0xEF	; 239
   1c2ba:	dd 4f       	sbci	r29, 0xFD	; 253
   1c2bc:	48 81       	ld	r20, Y
   1c2be:	c1 51       	subi	r28, 0x11	; 17
   1c2c0:	d2 40       	sbci	r29, 0x02	; 2
   1c2c2:	4f 93       	push	r20
   1c2c4:	1f 92       	push	r1
   1c2c6:	8f 93       	push	r24
   1c2c8:	86 ef       	ldi	r24, 0xF6	; 246
   1c2ca:	95 e3       	ldi	r25, 0x35	; 53
   1c2cc:	1f 92       	push	r1
   1c2ce:	9f 93       	push	r25
   1c2d0:	8f 93       	push	r24
   1c2d2:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
                status = 0;
                done = 1;
                break;
   1c2d6:	0f b6       	in	r0, 0x3f	; 63
   1c2d8:	f8 94       	cli
   1c2da:	de bf       	out	0x3e, r29	; 62
   1c2dc:	0f be       	out	0x3f, r0	; 63
   1c2de:	cd bf       	out	0x3d, r28	; 61
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
                done = 1;
   1c2e0:	a1 e0       	ldi	r26, 0x01	; 1
   1c2e2:	b0 e0       	ldi	r27, 0x00	; 0
   1c2e4:	c8 5e       	subi	r28, 0xE8	; 232
   1c2e6:	dd 4f       	sbci	r29, 0xFD	; 253
   1c2e8:	b9 83       	std	Y+1, r27	; 0x01
   1c2ea:	a8 83       	st	Y, r26
   1c2ec:	c8 51       	subi	r28, 0x18	; 24
   1c2ee:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1c2f0:	cb 5e       	subi	r28, 0xEB	; 235
   1c2f2:	dd 4f       	sbci	r29, 0xFD	; 253
   1c2f4:	18 82       	st	Y, r1
   1c2f6:	c5 51       	subi	r28, 0x15	; 21
   1c2f8:	d2 40       	sbci	r29, 0x02	; 2
   1c2fa:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1c2fc:	ba c0       	rjmp	.+372    	; 0x1c472 <lif_extract_e010_as_ascii+0x4ac>
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1c2fe:	0f 3f       	cpi	r16, 0xFF	; 255
   1c300:	11 05       	cpc	r17, r1
   1c302:	11 f0       	breq	.+4      	; 0x1c308 <lif_extract_e010_as_ascii+0x342>
   1c304:	0c f0       	brlt	.+2      	; 0x1c308 <lif_extract_e010_as_ascii+0x342>
   1c306:	b5 c0       	rjmp	.+362    	; 0x1c472 <lif_extract_e010_as_ascii+0x4ac>
            {
                if(buf[ind] == '\r' && i == len-1)
   1c308:	e5 e0       	ldi	r30, 0x05	; 5
   1c30a:	f1 e0       	ldi	r31, 0x01	; 1
   1c30c:	ec 0f       	add	r30, r28
   1c30e:	fd 1f       	adc	r31, r29
   1c310:	e0 0f       	add	r30, r16
   1c312:	f1 1f       	adc	r31, r17
   1c314:	20 81       	ld	r18, Z
   1c316:	a4 01       	movw	r20, r8
   1c318:	4f 5f       	subi	r20, 0xFF	; 255
   1c31a:	5f 4f       	sbci	r21, 0xFF	; 255
   1c31c:	5a 01       	movw	r10, r20
   1c31e:	2d 30       	cpi	r18, 0x0D	; 13
   1c320:	51 f1       	breq	.+84     	; 0x1c376 <lif_extract_e010_as_ascii+0x3b0>
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1c322:	9a 2d       	mov	r25, r10
   1c324:	8b 2d       	mov	r24, r11
   1c326:	0f 5f       	subi	r16, 0xFF	; 255
   1c328:	1f 4f       	sbci	r17, 0xFF	; 255
   1c32a:	e1 e0       	ldi	r30, 0x01	; 1
   1c32c:	f0 e0       	ldi	r31, 0x00	; 0
   1c32e:	ec 0f       	add	r30, r28
   1c330:	fd 1f       	adc	r31, r29
   1c332:	e8 0d       	add	r30, r8
   1c334:	f9 1d       	adc	r31, r9
   1c336:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1c338:	2f ef       	ldi	r18, 0xFF	; 255
   1c33a:	a2 16       	cp	r10, r18
   1c33c:	b1 04       	cpc	r11, r1
   1c33e:	09 f0       	breq	.+2      	; 0x1c342 <lif_extract_e010_as_ascii+0x37c>
   1c340:	ac f5       	brge	.+106    	; 0x1c3ac <lif_extract_e010_as_ascii+0x3e6>
                status = 0;
                done = 1;
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1c342:	ca 5e       	subi	r28, 0xEA	; 234
   1c344:	dd 4f       	sbci	r29, 0xFD	; 253
   1c346:	48 81       	ld	r20, Y
   1c348:	59 81       	ldd	r21, Y+1	; 0x01
   1c34a:	c6 51       	subi	r28, 0x16	; 22
   1c34c:	d2 40       	sbci	r29, 0x02	; 2
   1c34e:	4f 5f       	subi	r20, 0xFF	; 255
   1c350:	5f 4f       	sbci	r21, 0xFF	; 255
   1c352:	ca 5e       	subi	r28, 0xEA	; 234
   1c354:	dd 4f       	sbci	r29, 0xFD	; 253
   1c356:	59 83       	std	Y+1, r21	; 0x01
   1c358:	48 83       	st	Y, r20
   1c35a:	c6 51       	subi	r28, 0x16	; 22
   1c35c:	d2 40       	sbci	r29, 0x02	; 2
   1c35e:	89 2e       	mov	r8, r25
   1c360:	98 2e       	mov	r9, r24
   1c362:	ca 5e       	subi	r28, 0xEA	; 234
   1c364:	dd 4f       	sbci	r29, 0xFD	; 253
   1c366:	88 81       	ld	r24, Y
   1c368:	99 81       	ldd	r25, Y+1	; 0x01
   1c36a:	c6 51       	subi	r28, 0x16	; 22
   1c36c:	d2 40       	sbci	r29, 0x02	; 2
   1c36e:	82 15       	cp	r24, r2
   1c370:	93 05       	cpc	r25, r3
   1c372:	2c f2       	brlt	.-118    	; 0x1c2fe <lif_extract_e010_as_ascii+0x338>
   1c374:	70 c0       	rjmp	.+224    	; 0x1c456 <lif_extract_e010_as_ascii+0x490>
            {
                if(buf[ind] == '\r' && i == len-1)
   1c376:	ca 5e       	subi	r28, 0xEA	; 234
   1c378:	dd 4f       	sbci	r29, 0xFD	; 253
   1c37a:	88 81       	ld	r24, Y
   1c37c:	99 81       	ldd	r25, Y+1	; 0x01
   1c37e:	c6 51       	subi	r28, 0x16	; 22
   1c380:	d2 40       	sbci	r29, 0x02	; 2
   1c382:	c5 5d       	subi	r28, 0xD5	; 213
   1c384:	dd 4f       	sbci	r29, 0xFD	; 253
   1c386:	a8 81       	ld	r26, Y
   1c388:	b9 81       	ldd	r27, Y+1	; 0x01
   1c38a:	cb 52       	subi	r28, 0x2B	; 43
   1c38c:	d2 40       	sbci	r29, 0x02	; 2
   1c38e:	8a 17       	cp	r24, r26
   1c390:	9b 07       	cpc	r25, r27
   1c392:	39 f6       	brne	.-114    	; 0x1c322 <lif_extract_e010_as_ascii+0x35c>
                {
                    wbuf[wind++] = '\n';
   1c394:	e1 e0       	ldi	r30, 0x01	; 1
   1c396:	f0 e0       	ldi	r31, 0x00	; 0
   1c398:	ec 0f       	add	r30, r28
   1c39a:	fd 1f       	adc	r31, r29
   1c39c:	e8 0d       	add	r30, r8
   1c39e:	f9 1d       	adc	r31, r9
   1c3a0:	ba e0       	ldi	r27, 0x0A	; 10
   1c3a2:	b0 83       	st	Z, r27
                    ++ind;
   1c3a4:	0f 5f       	subi	r16, 0xFF	; 255
   1c3a6:	1f 4f       	sbci	r17, 0xFF	; 255
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1c3a8:	4a 01       	movw	r8, r20
                    ++ind;
                    break;
   1c3aa:	55 c0       	rjmp	.+170    	; 0x1c456 <lif_extract_e010_as_ascii+0x490>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1c3ac:	c6 5e       	subi	r28, 0xE6	; 230
   1c3ae:	dd 4f       	sbci	r29, 0xFD	; 253
   1c3b0:	28 81       	ld	r18, Y
   1c3b2:	39 81       	ldd	r19, Y+1	; 0x01
   1c3b4:	ca 51       	subi	r28, 0x1A	; 26
   1c3b6:	d2 40       	sbci	r29, 0x02	; 2
   1c3b8:	a5 01       	movw	r20, r10
   1c3ba:	61 e0       	ldi	r22, 0x01	; 1
   1c3bc:	70 e0       	ldi	r23, 0x00	; 0
   1c3be:	ce 01       	movw	r24, r28
   1c3c0:	01 96       	adiw	r24, 0x01	; 1
   1c3c2:	0e 94 05 82 	call	0x1040a	; 0x1040a <fwrite>
                    if(size < wind)
   1c3c6:	8a 15       	cp	r24, r10
   1c3c8:	9b 05       	cpc	r25, r11
   1c3ca:	14 f5       	brge	.+68     	; 0x1c410 <lif_extract_e010_as_ascii+0x44a>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1c3cc:	1f 92       	push	r1
   1c3ce:	cb 5d       	subi	r28, 0xDB	; 219
   1c3d0:	dd 4f       	sbci	r29, 0xFD	; 253
   1c3d2:	38 81       	ld	r19, Y
   1c3d4:	c5 52       	subi	r28, 0x25	; 37
   1c3d6:	d2 40       	sbci	r29, 0x02	; 2
   1c3d8:	3f 93       	push	r19
   1c3da:	cc 5d       	subi	r28, 0xDC	; 220
   1c3dc:	dd 4f       	sbci	r29, 0xFD	; 253
   1c3de:	48 81       	ld	r20, Y
   1c3e0:	c4 52       	subi	r28, 0x24	; 36
   1c3e2:	d2 40       	sbci	r29, 0x02	; 2
   1c3e4:	4f 93       	push	r20
   1c3e6:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
                        status = 0;
                        done = 1;
                        break;
   1c3ea:	0f 90       	pop	r0
   1c3ec:	0f 90       	pop	r0
   1c3ee:	0f 90       	pop	r0
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1c3f0:	45 01       	movw	r8, r10
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1c3f2:	81 e0       	ldi	r24, 0x01	; 1
   1c3f4:	90 e0       	ldi	r25, 0x00	; 0
   1c3f6:	c8 5e       	subi	r28, 0xE8	; 232
   1c3f8:	dd 4f       	sbci	r29, 0xFD	; 253
   1c3fa:	99 83       	std	Y+1, r25	; 0x01
   1c3fc:	88 83       	st	Y, r24
   1c3fe:	c8 51       	subi	r28, 0x18	; 24
   1c400:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1c402:	cb 5e       	subi	r28, 0xEB	; 235
   1c404:	dd 4f       	sbci	r29, 0xFD	; 253
   1c406:	18 82       	st	Y, r1
   1c408:	c5 51       	subi	r28, 0x15	; 21
   1c40a:	d2 40       	sbci	r29, 0x02	; 2
   1c40c:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1c40e:	23 c0       	rjmp	.+70     	; 0x1c456 <lif_extract_e010_as_ascii+0x490>
                    }
                    bytes += size;
   1c410:	09 2e       	mov	r0, r25
   1c412:	00 0c       	add	r0, r0
   1c414:	aa 0b       	sbc	r26, r26
   1c416:	bb 0b       	sbc	r27, r27
   1c418:	48 0e       	add	r4, r24
   1c41a:	59 1e       	adc	r5, r25
   1c41c:	6a 1e       	adc	r6, r26
   1c41e:	7b 1e       	adc	r7, r27
                    printf("Wrote: %8ld\r", bytes);
   1c420:	7f 92       	push	r7
   1c422:	6f 92       	push	r6
   1c424:	5f 92       	push	r5
   1c426:	4f 92       	push	r4
   1c428:	1f 92       	push	r1
   1c42a:	ce 5d       	subi	r28, 0xDE	; 222
   1c42c:	dd 4f       	sbci	r29, 0xFD	; 253
   1c42e:	98 81       	ld	r25, Y
   1c430:	c2 52       	subi	r28, 0x22	; 34
   1c432:	d2 40       	sbci	r29, 0x02	; 2
   1c434:	9f 93       	push	r25
   1c436:	cf 5d       	subi	r28, 0xDF	; 223
   1c438:	dd 4f       	sbci	r29, 0xFD	; 253
   1c43a:	a8 81       	ld	r26, Y
   1c43c:	c1 52       	subi	r28, 0x21	; 33
   1c43e:	d2 40       	sbci	r29, 0x02	; 2
   1c440:	af 93       	push	r26
   1c442:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1c446:	0f b6       	in	r0, 0x3f	; 63
   1c448:	f8 94       	cli
   1c44a:	de bf       	out	0x3e, r29	; 62
   1c44c:	0f be       	out	0x3f, r0	; 63
   1c44e:	cd bf       	out	0x3d, r28	; 61
                    wind = 0;
   1c450:	90 e0       	ldi	r25, 0x00	; 0
   1c452:	80 e0       	ldi	r24, 0x00	; 0
   1c454:	76 cf       	rjmp	.-276    	; 0x1c342 <lif_extract_e010_as_ascii+0x37c>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1c456:	0f 3f       	cpi	r16, 0xFF	; 255
   1c458:	11 05       	cpc	r17, r1
   1c45a:	09 f0       	breq	.+2      	; 0x1c45e <lif_extract_e010_as_ascii+0x498>
   1c45c:	0c f4       	brge	.+2      	; 0x1c460 <lif_extract_e010_as_ascii+0x49a>
   1c45e:	c4 ce       	rjmp	.-632    	; 0x1c1e8 <lif_extract_e010_as_ascii+0x222>
   1c460:	08 c0       	rjmp	.+16     	; 0x1c472 <lif_extract_e010_as_ascii+0x4ac>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8); 
                // EOF ?
                if(len == 0)
                {
                    done = 1;
   1c462:	21 e0       	ldi	r18, 0x01	; 1
   1c464:	30 e0       	ldi	r19, 0x00	; 0
   1c466:	c8 5e       	subi	r28, 0xE8	; 232
   1c468:	dd 4f       	sbci	r29, 0xFD	; 253
   1c46a:	39 83       	std	Y+1, r19	; 0x01
   1c46c:	28 83       	st	Y, r18
   1c46e:	c8 51       	subi	r28, 0x18	; 24
   1c470:	d2 40       	sbci	r29, 0x02	; 2

            }   // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }   // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1c472:	cf 5e       	subi	r28, 0xEF	; 239
   1c474:	dd 4f       	sbci	r29, 0xFD	; 253
   1c476:	88 81       	ld	r24, Y
   1c478:	99 81       	ldd	r25, Y+1	; 0x01
   1c47a:	aa 81       	ldd	r26, Y+2	; 0x02
   1c47c:	bb 81       	ldd	r27, Y+3	; 0x03
   1c47e:	c1 51       	subi	r28, 0x11	; 17
   1c480:	d2 40       	sbci	r29, 0x02	; 2
   1c482:	9f 5f       	subi	r25, 0xFF	; 255
   1c484:	af 4f       	sbci	r26, 0xFF	; 255
   1c486:	bf 4f       	sbci	r27, 0xFF	; 255
   1c488:	cf 5e       	subi	r28, 0xEF	; 239
   1c48a:	dd 4f       	sbci	r29, 0xFD	; 253
   1c48c:	88 83       	st	Y, r24
   1c48e:	99 83       	std	Y+1, r25	; 0x01
   1c490:	aa 83       	std	Y+2, r26	; 0x02
   1c492:	bb 83       	std	Y+3, r27	; 0x03
   1c494:	c1 51       	subi	r28, 0x11	; 17
   1c496:	d2 40       	sbci	r29, 0x02	; 2
   1c498:	76 ce       	rjmp	.-788    	; 0x1c186 <lif_extract_e010_as_ascii+0x1c0>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1c49a:	cb 5e       	subi	r28, 0xEB	; 235
   1c49c:	dd 4f       	sbci	r29, 0xFD	; 253
   1c49e:	18 82       	st	Y, r1
   1c4a0:	c5 51       	subi	r28, 0x15	; 21
   1c4a2:	d2 40       	sbci	r29, 0x02	; 2
   1c4a4:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c4a6:	c6 01       	movw	r24, r12
   1c4a8:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>

    }   // while(offset <= end)

    lif_closedir(LIF);
    // Flush any remaining bytes
    if(wind)
   1c4ac:	81 14       	cp	r8, r1
   1c4ae:	91 04       	cpc	r9, r1
   1c4b0:	51 f1       	breq	.+84     	; 0x1c506 <lif_extract_e010_as_ascii+0x540>
    {
        size = fwrite(wbuf,1,wind,fo);
   1c4b2:	c6 5e       	subi	r28, 0xE6	; 230
   1c4b4:	dd 4f       	sbci	r29, 0xFD	; 253
   1c4b6:	28 81       	ld	r18, Y
   1c4b8:	39 81       	ldd	r19, Y+1	; 0x01
   1c4ba:	ca 51       	subi	r28, 0x1A	; 26
   1c4bc:	d2 40       	sbci	r29, 0x02	; 2
   1c4be:	a4 01       	movw	r20, r8
   1c4c0:	61 e0       	ldi	r22, 0x01	; 1
   1c4c2:	70 e0       	ldi	r23, 0x00	; 0
   1c4c4:	ce 01       	movw	r24, r28
   1c4c6:	01 96       	adiw	r24, 0x01	; 1
   1c4c8:	0e 94 05 82 	call	0x1040a	; 0x1040a <fwrite>
   1c4cc:	8c 01       	movw	r16, r24
        if(size < wind)
   1c4ce:	88 15       	cp	r24, r8
   1c4d0:	99 05       	cpc	r25, r9
   1c4d2:	84 f4       	brge	.+32     	; 0x1c4f4 <lif_extract_e010_as_ascii+0x52e>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1c4d4:	89 e9       	ldi	r24, 0x99	; 153
   1c4d6:	95 e3       	ldi	r25, 0x35	; 53
   1c4d8:	1f 92       	push	r1
   1c4da:	9f 93       	push	r25
   1c4dc:	8f 93       	push	r24
   1c4de:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1c4e2:	0f 90       	pop	r0
   1c4e4:	0f 90       	pop	r0
   1c4e6:	0f 90       	pop	r0
            status = 0;
   1c4e8:	cb 5e       	subi	r28, 0xEB	; 235
   1c4ea:	dd 4f       	sbci	r29, 0xFD	; 253
   1c4ec:	18 82       	st	Y, r1
   1c4ee:	c5 51       	subi	r28, 0x15	; 21
   1c4f0:	d2 40       	sbci	r29, 0x02	; 2
   1c4f2:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1c4f4:	c8 01       	movw	r24, r16
   1c4f6:	01 2e       	mov	r0, r17
   1c4f8:	00 0c       	add	r0, r0
   1c4fa:	aa 0b       	sbc	r26, r26
   1c4fc:	bb 0b       	sbc	r27, r27
   1c4fe:	48 0e       	add	r4, r24
   1c500:	59 1e       	adc	r5, r25
   1c502:	6a 1e       	adc	r6, r26
   1c504:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1c506:	c6 5e       	subi	r28, 0xE6	; 230
   1c508:	dd 4f       	sbci	r29, 0xFD	; 253
   1c50a:	88 81       	ld	r24, Y
   1c50c:	99 81       	ldd	r25, Y+1	; 0x01
   1c50e:	ca 51       	subi	r28, 0x1A	; 26
   1c510:	d2 40       	sbci	r29, 0x02	; 2
   1c512:	0e 94 87 82 	call	0x1050e	; 0x1050e <fclose>
    if(t)
   1c516:	c3 5e       	subi	r28, 0xE3	; 227
   1c518:	dd 4f       	sbci	r29, 0xFD	; 253
   1c51a:	88 81       	ld	r24, Y
   1c51c:	99 81       	ldd	r25, Y+1	; 0x01
   1c51e:	aa 81       	ldd	r26, Y+2	; 0x02
   1c520:	bb 81       	ldd	r27, Y+3	; 0x03
   1c522:	cd 51       	subi	r28, 0x1D	; 29
   1c524:	d2 40       	sbci	r29, 0x02	; 2
   1c526:	00 97       	sbiw	r24, 0x00	; 0
   1c528:	a1 05       	cpc	r26, r1
   1c52a:	b1 05       	cpc	r27, r1
   1c52c:	d9 f0       	breq	.+54     	; 0x1c564 <lif_extract_e010_as_ascii+0x59e>
    {
        struct utimbuf times;
        times.modtime = t;
   1c52e:	c3 5f       	subi	r28, 0xF3	; 243
   1c530:	dd 4f       	sbci	r29, 0xFD	; 253
   1c532:	88 83       	st	Y, r24
   1c534:	99 83       	std	Y+1, r25	; 0x01
   1c536:	aa 83       	std	Y+2, r26	; 0x02
   1c538:	bb 83       	std	Y+3, r27	; 0x03
   1c53a:	cd 50       	subi	r28, 0x0D	; 13
   1c53c:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1c53e:	c7 5f       	subi	r28, 0xF7	; 247
   1c540:	dd 4f       	sbci	r29, 0xFD	; 253
   1c542:	88 83       	st	Y, r24
   1c544:	99 83       	std	Y+1, r25	; 0x01
   1c546:	aa 83       	std	Y+2, r26	; 0x02
   1c548:	bb 83       	std	Y+3, r27	; 0x03
   1c54a:	c9 50       	subi	r28, 0x09	; 9
   1c54c:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1c54e:	be 01       	movw	r22, r28
   1c550:	67 5f       	subi	r22, 0xF7	; 247
   1c552:	7d 4f       	sbci	r23, 0xFD	; 253
   1c554:	c4 5e       	subi	r28, 0xE4	; 228
   1c556:	dd 4f       	sbci	r29, 0xFD	; 253
   1c558:	88 81       	ld	r24, Y
   1c55a:	cc 51       	subi	r28, 0x1C	; 28
   1c55c:	d2 40       	sbci	r29, 0x02	; 2
   1c55e:	9e 2d       	mov	r25, r14
   1c560:	0e 94 c5 7f 	call	0xff8a	; 0xff8a <utime>
    }
    sync();
   1c564:	0e 94 82 81 	call	0x10304	; 0x10304 <sync>
    printf("Wrote: %8ld\n", bytes);
   1c568:	7f 92       	push	r7
   1c56a:	6f 92       	push	r6
   1c56c:	5f 92       	push	r5
   1c56e:	4f 92       	push	r4
   1c570:	8c e8       	ldi	r24, 0x8C	; 140
   1c572:	95 e3       	ldi	r25, 0x35	; 53
   1c574:	1f 92       	push	r1
   1c576:	9f 93       	push	r25
   1c578:	8f 93       	push	r24
   1c57a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    return(status);
   1c57e:	0f b6       	in	r0, 0x3f	; 63
   1c580:	f8 94       	cli
   1c582:	de bf       	out	0x3e, r29	; 62
   1c584:	0f be       	out	0x3f, r0	; 63
   1c586:	cd bf       	out	0x3d, r28	; 61
   1c588:	cb 5e       	subi	r28, 0xEB	; 235
   1c58a:	dd 4f       	sbci	r29, 0xFD	; 253
   1c58c:	88 81       	ld	r24, Y
   1c58e:	c5 51       	subi	r28, 0x15	; 21
   1c590:	d2 40       	sbci	r29, 0x02	; 2
   1c592:	9f 2d       	mov	r25, r15
}
   1c594:	c4 5d       	subi	r28, 0xD4	; 212
   1c596:	dd 4f       	sbci	r29, 0xFD	; 253
   1c598:	e2 e1       	ldi	r30, 0x12	; 18
   1c59a:	0c 94 50 ec 	jmp	0x1d8a0	; 0x1d8a0 <__epilogue_restores__>

0001c59e <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1c59e:	ad e0       	ldi	r26, 0x0D	; 13
   1c5a0:	b1 e0       	ldi	r27, 0x01	; 1
   1c5a2:	e5 ed       	ldi	r30, 0xD5	; 213
   1c5a4:	f2 ee       	ldi	r31, 0xE2	; 226
   1c5a6:	0c 94 34 ec 	jmp	0x1d868	; 0x1d868 <__prologue_saves__>
   1c5aa:	f8 2e       	mov	r15, r24
   1c5ac:	e9 2e       	mov	r14, r25
   1c5ae:	16 2f       	mov	r17, r22
   1c5b0:	07 2f       	mov	r16, r23
   1c5b2:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1c5b4:	65 e7       	ldi	r22, 0x75	; 117
   1c5b6:	77 e0       	ldi	r23, 0x07	; 7
   1c5b8:	0e 94 b9 d9 	call	0x1b372	; 0x1b372 <lif_open_volume>
   1c5bc:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1c5be:	00 97       	sbiw	r24, 0x00	; 0
   1c5c0:	51 f4       	brne	.+20     	; 0x1c5d6 <lif_extract_lif_as_lif+0x38>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1c5c2:	ef 92       	push	r14
   1c5c4:	ff 92       	push	r15
   1c5c6:	84 e7       	ldi	r24, 0x74	; 116
   1c5c8:	95 e3       	ldi	r25, 0x35	; 53
   1c5ca:	1f 92       	push	r1
   1c5cc:	9f 93       	push	r25
   1c5ce:	8f 93       	push	r24
   1c5d0:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1c5d4:	11 c0       	rjmp	.+34     	; 0x1c5f8 <lif_extract_lif_as_lif+0x5a>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1c5d6:	61 2f       	mov	r22, r17
   1c5d8:	70 2f       	mov	r23, r16
   1c5da:	38 d9       	rcall	.-3472   	; 0x1b84c <lif_find_file>
    if(index == -1)
   1c5dc:	01 96       	adiw	r24, 0x01	; 1
   1c5de:	a1 f4       	brne	.+40     	; 0x1c608 <lif_extract_lif_as_lif+0x6a>
    {
        printf("File not found:%s\n", lifname);
   1c5e0:	0f 93       	push	r16
   1c5e2:	1f 93       	push	r17
   1c5e4:	81 e6       	ldi	r24, 0x61	; 97
   1c5e6:	95 e3       	ldi	r25, 0x35	; 53
   1c5e8:	1f 92       	push	r1
   1c5ea:	9f 93       	push	r25
   1c5ec:	8f 93       	push	r24
   1c5ee:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c5f2:	c4 01       	movw	r24, r8
   1c5f4:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1c5f8:	0f 90       	pop	r0
   1c5fa:	0f 90       	pop	r0
   1c5fc:	0f 90       	pop	r0
   1c5fe:	0f 90       	pop	r0
   1c600:	0f 90       	pop	r0
   1c602:	00 e0       	ldi	r16, 0x00	; 0
   1c604:	10 e0       	ldi	r17, 0x00	; 0
   1c606:	0c c1       	rjmp	.+536    	; 0x1c820 <lif_extract_lif_as_lif+0x282>
    }

    sectors = LIF->DIR.FileSectors;
   1c608:	a4 01       	movw	r20, r8
   1c60a:	40 5a       	subi	r20, 0xA0	; 160
   1c60c:	5f 4f       	sbci	r21, 0xFF	; 255
   1c60e:	c4 5f       	subi	r28, 0xF4	; 244
   1c610:	de 4f       	sbci	r29, 0xFE	; 254
   1c612:	59 83       	std	Y+1, r21	; 0x01
   1c614:	48 83       	st	Y, r20
   1c616:	cc 50       	subi	r28, 0x0C	; 12
   1c618:	d1 40       	sbci	r29, 0x01	; 1

    //Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1c61a:	da 01       	movw	r26, r20
   1c61c:	ad 90       	ld	r10, X+
   1c61e:	bc 90       	ld	r11, X
   1c620:	0b 2c       	mov	r0, r11
   1c622:	00 0c       	add	r0, r0
   1c624:	cc 08       	sbc	r12, r12
   1c626:	dd 08       	sbc	r13, r13
   1c628:	e1 2c       	mov	r14, r1
   1c62a:	f1 2c       	mov	r15, r1
   1c62c:	87 01       	movw	r16, r14
   1c62e:	e3 94       	inc	r14
   1c630:	21 e0       	ldi	r18, 0x01	; 1
   1c632:	30 e0       	ldi	r19, 0x00	; 0
   1c634:	40 e0       	ldi	r20, 0x00	; 0
   1c636:	50 e0       	ldi	r21, 0x00	; 0
   1c638:	6f e6       	ldi	r22, 0x6F	; 111
   1c63a:	76 e1       	ldi	r23, 0x16	; 22
   1c63c:	c3 01       	movw	r24, r6
   1c63e:	0e 94 27 d5 	call	0x1aa4e	; 0x1aa4e <lif_create_volume>
   1c642:	5c 01       	movw	r10, r24
    if(ULIF == NULL)
   1c644:	89 2b       	or	r24, r25
   1c646:	11 f4       	brne	.+4      	; 0x1c64c <lif_extract_lif_as_lif+0xae>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c648:	c4 01       	movw	r24, r8
   1c64a:	cf c0       	rjmp	.+414    	; 0x1c7ea <lif_extract_lif_as_lif+0x24c>
    }

    // Only the start sector changes

    // Copy directory record
    ULIF->DIR = LIF->DIR;
   1c64c:	81 e2       	ldi	r24, 0x21	; 33
   1c64e:	f4 01       	movw	r30, r8
   1c650:	e1 5b       	subi	r30, 0xB1	; 177
   1c652:	ff 4f       	sbci	r31, 0xFF	; 255
   1c654:	d5 01       	movw	r26, r10
   1c656:	a1 5b       	subi	r26, 0xB1	; 177
   1c658:	bf 4f       	sbci	r27, 0xFF	; 255
   1c65a:	01 90       	ld	r0, Z+
   1c65c:	0d 92       	st	X+, r0
   1c65e:	8a 95       	dec	r24
   1c660:	e1 f7       	brne	.-8      	; 0x1c65a <lif_extract_lif_as_lif+0xbc>

    ULIF->DIR.FileStartSector = 2;
   1c662:	82 e0       	ldi	r24, 0x02	; 2
   1c664:	90 e0       	ldi	r25, 0x00	; 0
   1c666:	a0 e0       	ldi	r26, 0x00	; 0
   1c668:	b0 e0       	ldi	r27, 0x00	; 0
   1c66a:	f5 01       	movw	r30, r10
   1c66c:	e4 5a       	subi	r30, 0xA4	; 164
   1c66e:	ff 4f       	sbci	r31, 0xFF	; 255
   1c670:	80 83       	st	Z, r24
   1c672:	91 83       	std	Z+1, r25	; 0x01
   1c674:	a2 83       	std	Z+2, r26	; 0x02
   1c676:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1c678:	c4 5f       	subi	r28, 0xF4	; 244
   1c67a:	de 4f       	sbci	r29, 0xFE	; 254
   1c67c:	e8 81       	ld	r30, Y
   1c67e:	f9 81       	ldd	r31, Y+1	; 0x01
   1c680:	cc 50       	subi	r28, 0x0C	; 12
   1c682:	d1 40       	sbci	r29, 0x01	; 1
   1c684:	80 81       	ld	r24, Z
   1c686:	91 81       	ldd	r25, Z+1	; 0x01
   1c688:	a2 81       	ldd	r26, Z+2	; 0x02
   1c68a:	b3 81       	ldd	r27, Z+3	; 0x03
   1c68c:	f5 01       	movw	r30, r10
   1c68e:	80 8b       	std	Z+16, r24	; 0x10
   1c690:	91 8b       	std	Z+17, r25	; 0x11
   1c692:	a2 8b       	std	Z+18, r26	; 0x12
   1c694:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1c696:	60 e0       	ldi	r22, 0x00	; 0
   1c698:	70 e0       	ldi	r23, 0x00	; 0
   1c69a:	c5 01       	movw	r24, r10
   1c69c:	0e 94 ab d3 	call	0x1a756	; 0x1a756 <lif_writedirindex>
   1c6a0:	8c 01       	movw	r16, r24
   1c6a2:	89 2b       	or	r24, r25
   1c6a4:	41 f0       	breq	.+16     	; 0x1c6b6 <lif_extract_lif_as_lif+0x118>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1c6a6:	61 e0       	ldi	r22, 0x01	; 1
   1c6a8:	70 e0       	ldi	r23, 0x00	; 0
   1c6aa:	c5 01       	movw	r24, r10
   1c6ac:	0e 94 07 d4 	call	0x1a80e	; 0x1a80e <lif_writedirEOF>
   1c6b0:	8c 01       	movw	r16, r24
   1c6b2:	89 2b       	or	r24, r25
   1c6b4:	39 f4       	brne	.+14     	; 0x1c6c4 <lif_extract_lif_as_lif+0x126>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c6b6:	c4 01       	movw	r24, r8
   1c6b8:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>
   1c6bc:	c5 01       	movw	r24, r10
   1c6be:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1c6c2:	ae c0       	rjmp	.+348    	; 0x1c820 <lif_extract_lif_as_lif+0x282>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1c6c4:	d5 01       	movw	r26, r10
   1c6c6:	1c 96       	adiw	r26, 0x0c	; 12
   1c6c8:	cd 90       	ld	r12, X+
   1c6ca:	dd 90       	ld	r13, X+
   1c6cc:	ed 90       	ld	r14, X+
   1c6ce:	fc 90       	ld	r15, X
   1c6d0:	1f 97       	sbiw	r26, 0x0f	; 15
   1c6d2:	fe 2c       	mov	r15, r14
   1c6d4:	ed 2c       	mov	r14, r13
   1c6d6:	dc 2c       	mov	r13, r12
   1c6d8:	cc 24       	eor	r12, r12

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1c6da:	f4 01       	movw	r30, r8
   1c6dc:	e4 5a       	subi	r30, 0xA4	; 164
   1c6de:	ff 4f       	sbci	r31, 0xFF	; 255
   1c6e0:	80 81       	ld	r24, Z
   1c6e2:	91 81       	ldd	r25, Z+1	; 0x01
   1c6e4:	a2 81       	ldd	r26, Z+2	; 0x02
   1c6e6:	b3 81       	ldd	r27, Z+3	; 0x03
   1c6e8:	22 27       	eor	r18, r18
   1c6ea:	38 2f       	mov	r19, r24
   1c6ec:	49 2f       	mov	r20, r25
   1c6ee:	5a 2f       	mov	r21, r26
   1c6f0:	cb 5f       	subi	r28, 0xFB	; 251
   1c6f2:	de 4f       	sbci	r29, 0xFE	; 254
   1c6f4:	28 83       	st	Y, r18
   1c6f6:	39 83       	std	Y+1, r19	; 0x01
   1c6f8:	4a 83       	std	Y+2, r20	; 0x02
   1c6fa:	5b 83       	std	Y+3, r21	; 0x03
   1c6fc:	c5 50       	subi	r28, 0x05	; 5
   1c6fe:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c700:	21 2c       	mov	r2, r1
   1c702:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("Wrote: %8ld\r", bytes);
   1c704:	84 e5       	ldi	r24, 0x54	; 84
   1c706:	95 e3       	ldi	r25, 0x35	; 53
   1c708:	9c 01       	movw	r18, r24
   1c70a:	40 e0       	ldi	r20, 0x00	; 0
   1c70c:	c7 5f       	subi	r28, 0xF7	; 247
   1c70e:	de 4f       	sbci	r29, 0xFE	; 254
   1c710:	28 83       	st	Y, r18
   1c712:	39 83       	std	Y+1, r19	; 0x01
   1c714:	4a 83       	std	Y+2, r20	; 0x02
   1c716:	c9 50       	subi	r28, 0x09	; 9
   1c718:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c71a:	41 c0       	rjmp	.+130    	; 0x1c79e <lif_extract_lif_as_lif+0x200>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1c71c:	00 e0       	ldi	r16, 0x00	; 0
   1c71e:	11 e0       	ldi	r17, 0x01	; 1
   1c720:	a7 01       	movw	r20, r14
   1c722:	96 01       	movw	r18, r12
   1c724:	be 01       	movw	r22, r28
   1c726:	6f 5f       	subi	r22, 0xFF	; 255
   1c728:	7f 4f       	sbci	r23, 0xFF	; 255
   1c72a:	c5 01       	movw	r24, r10
   1c72c:	0e 94 82 ca 	call	0x19504	; 0x19504 <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1c730:	05 2c       	mov	r0, r5
   1c732:	00 0c       	add	r0, r0
   1c734:	66 08       	sbc	r6, r6
   1c736:	77 08       	sbc	r7, r7
   1c738:	c4 0c       	add	r12, r4
   1c73a:	d5 1c       	adc	r13, r5
   1c73c:	e6 1c       	adc	r14, r6
   1c73e:	f7 1c       	adc	r15, r7
        offset += size;
   1c740:	cb 5f       	subi	r28, 0xFB	; 251
   1c742:	de 4f       	sbci	r29, 0xFE	; 254
   1c744:	88 81       	ld	r24, Y
   1c746:	99 81       	ldd	r25, Y+1	; 0x01
   1c748:	aa 81       	ldd	r26, Y+2	; 0x02
   1c74a:	bb 81       	ldd	r27, Y+3	; 0x03
   1c74c:	c5 50       	subi	r28, 0x05	; 5
   1c74e:	d1 40       	sbci	r29, 0x01	; 1
   1c750:	84 0d       	add	r24, r4
   1c752:	95 1d       	adc	r25, r5
   1c754:	a6 1d       	adc	r26, r6
   1c756:	b7 1d       	adc	r27, r7
   1c758:	cb 5f       	subi	r28, 0xFB	; 251
   1c75a:	de 4f       	sbci	r29, 0xFE	; 254
   1c75c:	88 83       	st	Y, r24
   1c75e:	99 83       	std	Y+1, r25	; 0x01
   1c760:	aa 83       	std	Y+2, r26	; 0x02
   1c762:	bb 83       	std	Y+3, r27	; 0x03
   1c764:	c5 50       	subi	r28, 0x05	; 5
   1c766:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("Wrote: %8ld\r", bytes);
   1c768:	ff 92       	push	r15
   1c76a:	ef 92       	push	r14
   1c76c:	df 92       	push	r13
   1c76e:	cf 92       	push	r12
   1c770:	1f 92       	push	r1
   1c772:	c6 5f       	subi	r28, 0xF6	; 246
   1c774:	de 4f       	sbci	r29, 0xFE	; 254
   1c776:	98 81       	ld	r25, Y
   1c778:	ca 50       	subi	r28, 0x0A	; 10
   1c77a:	d1 40       	sbci	r29, 0x01	; 1
   1c77c:	9f 93       	push	r25
   1c77e:	c7 5f       	subi	r28, 0xF7	; 247
   1c780:	de 4f       	sbci	r29, 0xFE	; 254
   1c782:	a8 81       	ld	r26, Y
   1c784:	c9 50       	subi	r28, 0x09	; 9
   1c786:	d1 40       	sbci	r29, 0x01	; 1
   1c788:	af 93       	push	r26
   1c78a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c78e:	bf ef       	ldi	r27, 0xFF	; 255
   1c790:	2b 1a       	sub	r2, r27
   1c792:	3b 0a       	sbc	r3, r27
   1c794:	0f b6       	in	r0, 0x3f	; 63
   1c796:	f8 94       	cli
   1c798:	de bf       	out	0x3e, r29	; 62
   1c79a:	0f be       	out	0x3f, r0	; 63
   1c79c:	cd bf       	out	0x3d, r28	; 61
   1c79e:	c4 5f       	subi	r28, 0xF4	; 244
   1c7a0:	de 4f       	sbci	r29, 0xFE	; 254
   1c7a2:	a8 81       	ld	r26, Y
   1c7a4:	b9 81       	ldd	r27, Y+1	; 0x01
   1c7a6:	cc 50       	subi	r28, 0x0C	; 12
   1c7a8:	d1 40       	sbci	r29, 0x01	; 1
   1c7aa:	8d 91       	ld	r24, X+
   1c7ac:	9c 91       	ld	r25, X
   1c7ae:	28 16       	cp	r2, r24
   1c7b0:	39 06       	cpc	r3, r25
   1c7b2:	f4 f4       	brge	.+60     	; 0x1c7f0 <lif_extract_lif_as_lif+0x252>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1c7b4:	00 e0       	ldi	r16, 0x00	; 0
   1c7b6:	11 e0       	ldi	r17, 0x01	; 1
   1c7b8:	cb 5f       	subi	r28, 0xFB	; 251
   1c7ba:	de 4f       	sbci	r29, 0xFE	; 254
   1c7bc:	28 81       	ld	r18, Y
   1c7be:	39 81       	ldd	r19, Y+1	; 0x01
   1c7c0:	4a 81       	ldd	r20, Y+2	; 0x02
   1c7c2:	5b 81       	ldd	r21, Y+3	; 0x03
   1c7c4:	c5 50       	subi	r28, 0x05	; 5
   1c7c6:	d1 40       	sbci	r29, 0x01	; 1
   1c7c8:	be 01       	movw	r22, r28
   1c7ca:	6f 5f       	subi	r22, 0xFF	; 255
   1c7cc:	7f 4f       	sbci	r23, 0xFF	; 255
   1c7ce:	c4 01       	movw	r24, r8
   1c7d0:	0e 94 29 ca 	call	0x19452	; 0x19452 <lif_read>
   1c7d4:	2b 01       	movw	r4, r22
   1c7d6:	3c 01       	movw	r6, r24
        if(size < LIF_SECTOR_SIZE)
   1c7d8:	6f 3f       	cpi	r22, 0xFF	; 255
   1c7da:	71 05       	cpc	r23, r1
   1c7dc:	11 f0       	breq	.+4      	; 0x1c7e2 <lif_extract_lif_as_lif+0x244>
   1c7de:	0c f0       	brlt	.+2      	; 0x1c7e2 <lif_extract_lif_as_lif+0x244>
   1c7e0:	9d cf       	rjmp	.-198    	; 0x1c71c <lif_extract_lif_as_lif+0x17e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c7e2:	c4 01       	movw	r24, r8
   1c7e4:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>
   1c7e8:	c5 01       	movw	r24, r10
   1c7ea:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>
   1c7ee:	09 cf       	rjmp	.-494    	; 0x1c602 <lif_extract_lif_as_lif+0x64>
   1c7f0:	c4 01       	movw	r24, r8
   1c7f2:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>
   1c7f6:	c5 01       	movw	r24, r10
   1c7f8:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>
        uoffset += size;
        printf("Wrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("Wrote: %8ld\n", bytes);
   1c7fc:	ff 92       	push	r15
   1c7fe:	ef 92       	push	r14
   1c800:	df 92       	push	r13
   1c802:	cf 92       	push	r12
   1c804:	87 e4       	ldi	r24, 0x47	; 71
   1c806:	95 e3       	ldi	r25, 0x35	; 53
   1c808:	1f 92       	push	r1
   1c80a:	9f 93       	push	r25
   1c80c:	8f 93       	push	r24
   1c80e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    return(1);
   1c812:	0f b6       	in	r0, 0x3f	; 63
   1c814:	f8 94       	cli
   1c816:	de bf       	out	0x3e, r29	; 62
   1c818:	0f be       	out	0x3f, r0	; 63
   1c81a:	cd bf       	out	0x3d, r28	; 61
   1c81c:	01 e0       	ldi	r16, 0x01	; 1
   1c81e:	10 e0       	ldi	r17, 0x00	; 0
}
   1c820:	c8 01       	movw	r24, r16
   1c822:	c3 5f       	subi	r28, 0xF3	; 243
   1c824:	de 4f       	sbci	r29, 0xFE	; 254
   1c826:	e2 e1       	ldi	r30, 0x12	; 18
   1c828:	0c 94 50 ec 	jmp	0x1d8a0	; 0x1d8a0 <__epilogue_restores__>

0001c82c <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from 
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1c82c:	2f 92       	push	r2
   1c82e:	3f 92       	push	r3
   1c830:	4f 92       	push	r4
   1c832:	5f 92       	push	r5
   1c834:	6f 92       	push	r6
   1c836:	8f 92       	push	r8
   1c838:	9f 92       	push	r9
   1c83a:	af 92       	push	r10
   1c83c:	bf 92       	push	r11
   1c83e:	cf 92       	push	r12
   1c840:	df 92       	push	r13
   1c842:	ef 92       	push	r14
   1c844:	ff 92       	push	r15
   1c846:	0f 93       	push	r16
   1c848:	1f 93       	push	r17
   1c84a:	cf 93       	push	r28
   1c84c:	df 93       	push	r29
   1c84e:	cd b7       	in	r28, 0x3d	; 61
   1c850:	de b7       	in	r29, 0x3e	; 62
   1c852:	c4 51       	subi	r28, 0x14	; 20
   1c854:	d1 40       	sbci	r29, 0x01	; 1
   1c856:	0f b6       	in	r0, 0x3f	; 63
   1c858:	f8 94       	cli
   1c85a:	de bf       	out	0x3e, r29	; 62
   1c85c:	0f be       	out	0x3f, r0	; 63
   1c85e:	cd bf       	out	0x3d, r28	; 61
   1c860:	7c 01       	movw	r14, r24
   1c862:	5b 01       	movw	r10, r22
   1c864:	6a 01       	movw	r12, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1c866:	dc 01       	movw	r26, r24
   1c868:	8c 91       	ld	r24, X
   1c86a:	81 11       	cpse	r24, r1
   1c86c:	03 c0       	rjmp	.+6      	; 0x1c874 <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1c86e:	87 e2       	ldi	r24, 0x27	; 39
   1c870:	95 e3       	ldi	r25, 0x35	; 53
   1c872:	06 c0       	rjmp	.+12     	; 0x1c880 <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1c874:	fb 01       	movw	r30, r22
   1c876:	80 81       	ld	r24, Z
   1c878:	81 11       	cpse	r24, r1
   1c87a:	0b c0       	rjmp	.+22     	; 0x1c892 <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1c87c:	8c e0       	ldi	r24, 0x0C	; 12
   1c87e:	95 e3       	ldi	r25, 0x35	; 53
   1c880:	1f 92       	push	r1
   1c882:	9f 93       	push	r25
   1c884:	8f 93       	push	r24
   1c886:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        return(-1);
   1c88a:	0f 90       	pop	r0
   1c88c:	0f 90       	pop	r0
   1c88e:	0f 90       	pop	r0
   1c890:	32 c1       	rjmp	.+612    	; 0x1caf6 <lif_add_lif_file+0x2ca>
    }
    if(!*userfile)
   1c892:	da 01       	movw	r26, r20
   1c894:	8c 91       	ld	r24, X
   1c896:	81 11       	cpse	r24, r1
   1c898:	03 c0       	rjmp	.+6      	; 0x1c8a0 <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1c89a:	80 ef       	ldi	r24, 0xF0	; 240
   1c89c:	94 e3       	ldi	r25, 0x34	; 52
   1c89e:	f0 cf       	rjmp	.-32     	; 0x1c880 <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & 0x400)
   1c8a0:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1c8a4:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1c8a8:	92 ff       	sbrs	r25, 2
   1c8aa:	12 c0       	rjmp	.+36     	; 0x1c8d0 <lif_add_lif_file+0xa4>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1c8ac:	df 92       	push	r13
   1c8ae:	4f 93       	push	r20
   1c8b0:	bf 92       	push	r11
   1c8b2:	6f 93       	push	r22
   1c8b4:	ff 92       	push	r15
   1c8b6:	ef 92       	push	r14
   1c8b8:	81 ec       	ldi	r24, 0xC1	; 193
   1c8ba:	94 e3       	ldi	r25, 0x34	; 52
   1c8bc:	1f 92       	push	r1
   1c8be:	9f 93       	push	r25
   1c8c0:	8f 93       	push	r24
   1c8c2:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1c8c6:	0f b6       	in	r0, 0x3f	; 63
   1c8c8:	f8 94       	cli
   1c8ca:	de bf       	out	0x3e, r29	; 62
   1c8cc:	0f be       	out	0x3f, r0	; 63
   1c8ce:	cd bf       	out	0x3d, r28	; 61
            lifimagename, lifname, userfile);

    // open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1c8d0:	64 ec       	ldi	r22, 0xC4	; 196
   1c8d2:	78 e0       	ldi	r23, 0x08	; 8
   1c8d4:	c6 01       	movw	r24, r12
   1c8d6:	0e 94 b9 d9 	call	0x1b372	; 0x1b372 <lif_open_volume>
   1c8da:	4c 01       	movw	r8, r24
    if(ULIF == NULL)
   1c8dc:	00 97       	sbiw	r24, 0x00	; 0
   1c8de:	09 f4       	brne	.+2      	; 0x1c8e2 <lif_add_lif_file+0xb6>
   1c8e0:	0a c1       	rjmp	.+532    	; 0x1caf6 <lif_add_lif_file+0x2ca>
        return(-1); 

    // find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1c8e2:	b5 01       	movw	r22, r10
   1c8e4:	0e 94 26 dc 	call	0x1b84c	; 0x1b84c <lif_find_file>
    if(index == -1)
   1c8e8:	01 96       	adiw	r24, 0x01	; 1
   1c8ea:	b1 f4       	brne	.+44     	; 0x1c918 <lif_add_lif_file+0xec>
    {
        printf("File not found:%s\n", lifname);
   1c8ec:	bf 92       	push	r11
   1c8ee:	af 92       	push	r10
   1c8f0:	8e ea       	ldi	r24, 0xAE	; 174
   1c8f2:	94 e3       	ldi	r25, 0x34	; 52
   1c8f4:	1f 92       	push	r1
   1c8f6:	9f 93       	push	r25
   1c8f8:	8f 93       	push	r24
   1c8fa:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c8fe:	c4 01       	movw	r24, r8
   1c900:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1c904:	0f 90       	pop	r0
   1c906:	0f 90       	pop	r0
   1c908:	0f 90       	pop	r0
   1c90a:	0f 90       	pop	r0
   1c90c:	0f 90       	pop	r0
   1c90e:	60 e0       	ldi	r22, 0x00	; 0
   1c910:	70 e0       	ldi	r23, 0x00	; 0
   1c912:	80 e0       	ldi	r24, 0x00	; 0
   1c914:	90 e0       	ldi	r25, 0x00	; 0
   1c916:	09 c1       	rjmp	.+530    	; 0x1cb2a <lif_add_lif_file+0x2fe>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1c918:	64 ec       	ldi	r22, 0xC4	; 196
   1c91a:	78 e0       	ldi	r23, 0x08	; 8
   1c91c:	c7 01       	movw	r24, r14
   1c91e:	0e 94 b9 d9 	call	0x1b372	; 0x1b372 <lif_open_volume>
   1c922:	5c 01       	movw	r10, r24
    if(LIF == NULL)
   1c924:	00 97       	sbiw	r24, 0x00	; 0
   1c926:	09 f4       	brne	.+2      	; 0x1c92a <lif_add_lif_file+0xfe>
   1c928:	e6 c0       	rjmp	.+460    	; 0x1caf6 <lif_add_lif_file+0x2ca>
        return(-1); 

    // Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1c92a:	f4 01       	movw	r30, r8
   1c92c:	e0 5a       	subi	r30, 0xA0	; 160
   1c92e:	ff 4f       	sbci	r31, 0xFF	; 255
   1c930:	40 81       	ld	r20, Z
   1c932:	51 81       	ldd	r21, Z+1	; 0x01
   1c934:	62 81       	ldd	r22, Z+2	; 0x02
   1c936:	73 81       	ldd	r23, Z+3	; 0x03
   1c938:	0e 94 54 d8 	call	0x1b0a8	; 0x1b0a8 <lif_newdir>
   1c93c:	c3 5f       	subi	r28, 0xF3	; 243
   1c93e:	de 4f       	sbci	r29, 0xFE	; 254
   1c940:	99 83       	std	Y+1, r25	; 0x01
   1c942:	88 83       	st	Y, r24
   1c944:	cd 50       	subi	r28, 0x0D	; 13
   1c946:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1c948:	01 96       	adiw	r24, 0x01	; 1
   1c94a:	b9 f4       	brne	.+46     	; 0x1c97a <lif_add_lif_file+0x14e>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1c94c:	df 92       	push	r13
   1c94e:	cf 92       	push	r12
   1c950:	ff 92       	push	r15
   1c952:	ef 92       	push	r14
   1c954:	8e e7       	ldi	r24, 0x7E	; 126
   1c956:	94 e3       	ldi	r25, 0x34	; 52
   1c958:	1f 92       	push	r1
   1c95a:	9f 93       	push	r25
   1c95c:	8f 93       	push	r24
   1c95e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c962:	c5 01       	movw	r24, r10
   1c964:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>
   1c968:	c4 01       	movw	r24, r8
   1c96a:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
            lifimagename, userfile);
            lif_closedir(LIF);
            lif_closedir(ULIF);
        return(-1);
   1c96e:	0f b6       	in	r0, 0x3f	; 63
   1c970:	f8 94       	cli
   1c972:	de bf       	out	0x3e, r29	; 62
   1c974:	0f be       	out	0x3f, r0	; 63
   1c976:	cd bf       	out	0x3d, r28	; 61
   1c978:	be c0       	rjmp	.+380    	; 0x1caf6 <lif_add_lif_file+0x2ca>
    }

    // Save start sector
    start = LIF->DIR.FileStartSector;
   1c97a:	c5 01       	movw	r24, r10
   1c97c:	84 5a       	subi	r24, 0xA4	; 164
   1c97e:	9f 4f       	sbci	r25, 0xFF	; 255
   1c980:	dc 01       	movw	r26, r24
   1c982:	4d 91       	ld	r20, X+
   1c984:	5d 91       	ld	r21, X+
   1c986:	6d 91       	ld	r22, X+
   1c988:	7c 91       	ld	r23, X
   1c98a:	13 97       	sbiw	r26, 0x03	; 3

    // Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1c98c:	21 e2       	ldi	r18, 0x21	; 33
   1c98e:	f4 01       	movw	r30, r8
   1c990:	e1 5b       	subi	r30, 0xB1	; 177
   1c992:	ff 4f       	sbci	r31, 0xFF	; 255
   1c994:	1d 97       	sbiw	r26, 0x0d	; 13
   1c996:	01 90       	ld	r0, Z+
   1c998:	0d 92       	st	X+, r0
   1c99a:	2a 95       	dec	r18
   1c99c:	e1 f7       	brne	.-8      	; 0x1c996 <lif_add_lif_file+0x16a>

    // Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1c99e:	fc 01       	movw	r30, r24
   1c9a0:	40 83       	st	Z, r20
   1c9a2:	51 83       	std	Z+1, r21	; 0x01
   1c9a4:	62 83       	std	Z+2, r22	; 0x02
   1c9a6:	73 83       	std	Z+3, r23	; 0x03

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1c9a8:	b6 2f       	mov	r27, r22
   1c9aa:	a5 2f       	mov	r26, r21
   1c9ac:	94 2f       	mov	r25, r20
   1c9ae:	88 27       	eor	r24, r24
   1c9b0:	cb 5f       	subi	r28, 0xFB	; 251
   1c9b2:	de 4f       	sbci	r29, 0xFE	; 254
   1c9b4:	88 83       	st	Y, r24
   1c9b6:	99 83       	std	Y+1, r25	; 0x01
   1c9b8:	aa 83       	std	Y+2, r26	; 0x02
   1c9ba:	bb 83       	std	Y+3, r27	; 0x03
   1c9bc:	c5 50       	subi	r28, 0x05	; 5
   1c9be:	d1 40       	sbci	r29, 0x01	; 1
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1c9c0:	f4 01       	movw	r30, r8
   1c9c2:	e4 5a       	subi	r30, 0xA4	; 164
   1c9c4:	ff 4f       	sbci	r31, 0xFF	; 255
   1c9c6:	80 81       	ld	r24, Z
   1c9c8:	91 81       	ldd	r25, Z+1	; 0x01
   1c9ca:	a2 81       	ldd	r26, Z+2	; 0x02
   1c9cc:	b3 81       	ldd	r27, Z+3	; 0x03
   1c9ce:	22 27       	eor	r18, r18
   1c9d0:	38 2f       	mov	r19, r24
   1c9d2:	49 2f       	mov	r20, r25
   1c9d4:	5a 2f       	mov	r21, r26
   1c9d6:	c7 5f       	subi	r28, 0xF7	; 247
   1c9d8:	de 4f       	sbci	r29, 0xFE	; 254
   1c9da:	28 83       	st	Y, r18
   1c9dc:	39 83       	std	Y+1, r19	; 0x01
   1c9de:	4a 83       	std	Y+2, r20	; 0x02
   1c9e0:	5b 83       	std	Y+3, r21	; 0x03
   1c9e2:	c9 50       	subi	r28, 0x09	; 9
   1c9e4:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c9e6:	21 2c       	mov	r2, r1
   1c9e8:	31 2c       	mov	r3, r1

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1c9ea:	c1 2c       	mov	r12, r1
   1c9ec:	d1 2c       	mov	r13, r1
   1c9ee:	76 01       	movw	r14, r12
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c9f0:	a5 01       	movw	r20, r10
   1c9f2:	40 5a       	subi	r20, 0xA0	; 160
   1c9f4:	5f 4f       	sbci	r21, 0xFF	; 255
   1c9f6:	cd 5e       	subi	r28, 0xED	; 237
   1c9f8:	de 4f       	sbci	r29, 0xFE	; 254
   1c9fa:	59 83       	std	Y+1, r21	; 0x01
   1c9fc:	48 83       	st	Y, r20
   1c9fe:	c3 51       	subi	r28, 0x13	; 19
   1ca00:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("Wrote: %8ld\r", bytes);
   1ca02:	81 e7       	ldi	r24, 0x71	; 113
   1ca04:	94 e3       	ldi	r25, 0x34	; 52
   1ca06:	2c 01       	movw	r4, r24
   1ca08:	c7 5f       	subi	r28, 0xF7	; 247
   1ca0a:	de 4f       	sbci	r29, 0xFE	; 254
   1ca0c:	28 81       	ld	r18, Y
   1ca0e:	39 81       	ldd	r19, Y+1	; 0x01
   1ca10:	4a 81       	ldd	r20, Y+2	; 0x02
   1ca12:	5b 81       	ldd	r21, Y+3	; 0x03
   1ca14:	c9 50       	subi	r28, 0x09	; 9
   1ca16:	d1 40       	sbci	r29, 0x01	; 1
   1ca18:	2c 0d       	add	r18, r12
   1ca1a:	3d 1d       	adc	r19, r13
   1ca1c:	4e 1d       	adc	r20, r14
   1ca1e:	5f 1d       	adc	r21, r15
   1ca20:	cb 5f       	subi	r28, 0xFB	; 251
   1ca22:	de 4f       	sbci	r29, 0xFE	; 254
   1ca24:	88 81       	ld	r24, Y
   1ca26:	99 81       	ldd	r25, Y+1	; 0x01
   1ca28:	aa 81       	ldd	r26, Y+2	; 0x02
   1ca2a:	bb 81       	ldd	r27, Y+3	; 0x03
   1ca2c:	c5 50       	subi	r28, 0x05	; 5
   1ca2e:	d1 40       	sbci	r29, 0x01	; 1
   1ca30:	8c 0d       	add	r24, r12
   1ca32:	9d 1d       	adc	r25, r13
   1ca34:	ae 1d       	adc	r26, r14
   1ca36:	bf 1d       	adc	r27, r15
   1ca38:	c1 5f       	subi	r28, 0xF1	; 241
   1ca3a:	de 4f       	sbci	r29, 0xFE	; 254
   1ca3c:	88 83       	st	Y, r24
   1ca3e:	99 83       	std	Y+1, r25	; 0x01
   1ca40:	aa 83       	std	Y+2, r26	; 0x02
   1ca42:	bb 83       	std	Y+3, r27	; 0x03
   1ca44:	cf 50       	subi	r28, 0x0F	; 15
   1ca46:	d1 40       	sbci	r29, 0x01	; 1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1ca48:	cd 5e       	subi	r28, 0xED	; 237
   1ca4a:	de 4f       	sbci	r29, 0xFE	; 254
   1ca4c:	a8 81       	ld	r26, Y
   1ca4e:	b9 81       	ldd	r27, Y+1	; 0x01
   1ca50:	c3 51       	subi	r28, 0x13	; 19
   1ca52:	d1 40       	sbci	r29, 0x01	; 1
   1ca54:	8d 91       	ld	r24, X+
   1ca56:	9c 91       	ld	r25, X
   1ca58:	28 16       	cp	r2, r24
   1ca5a:	39 06       	cpc	r3, r25
   1ca5c:	dc f5       	brge	.+118    	; 0x1cad4 <lif_add_lif_file+0x2a8>
    {
        // Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1ca5e:	00 e0       	ldi	r16, 0x00	; 0
   1ca60:	11 e0       	ldi	r17, 0x01	; 1
   1ca62:	be 01       	movw	r22, r28
   1ca64:	6f 5f       	subi	r22, 0xFF	; 255
   1ca66:	7f 4f       	sbci	r23, 0xFF	; 255
   1ca68:	c4 01       	movw	r24, r8
   1ca6a:	0e 94 29 ca 	call	0x19452	; 0x19452 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1ca6e:	6f 3f       	cpi	r22, 0xFF	; 255
   1ca70:	71 05       	cpc	r23, r1
   1ca72:	a9 f0       	breq	.+42     	; 0x1ca9e <lif_add_lif_file+0x272>
   1ca74:	a4 f0       	brlt	.+40     	; 0x1ca9e <lif_add_lif_file+0x272>
            lif_closedir(ULIF);
            return(-1);
        }

        // Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1ca76:	00 e0       	ldi	r16, 0x00	; 0
   1ca78:	11 e0       	ldi	r17, 0x01	; 1
   1ca7a:	c1 5f       	subi	r28, 0xF1	; 241
   1ca7c:	de 4f       	sbci	r29, 0xFE	; 254
   1ca7e:	28 81       	ld	r18, Y
   1ca80:	39 81       	ldd	r19, Y+1	; 0x01
   1ca82:	4a 81       	ldd	r20, Y+2	; 0x02
   1ca84:	5b 81       	ldd	r21, Y+3	; 0x03
   1ca86:	cf 50       	subi	r28, 0x0F	; 15
   1ca88:	d1 40       	sbci	r29, 0x01	; 1
   1ca8a:	be 01       	movw	r22, r28
   1ca8c:	6f 5f       	subi	r22, 0xFF	; 255
   1ca8e:	7f 4f       	sbci	r23, 0xFF	; 255
   1ca90:	c5 01       	movw	r24, r10
   1ca92:	0e 94 82 ca 	call	0x19504	; 0x19504 <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1ca96:	8f 3f       	cpi	r24, 0xFF	; 255
   1ca98:	91 05       	cpc	r25, r1
   1ca9a:	09 f0       	breq	.+2      	; 0x1ca9e <lif_add_lif_file+0x272>
   1ca9c:	2c f4       	brge	.+10     	; 0x1caa8 <lif_add_lif_file+0x27c>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ca9e:	c5 01       	movw	r24, r10
   1caa0:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>
   1caa4:	c4 01       	movw	r24, r8
   1caa6:	25 c0       	rjmp	.+74     	; 0x1caf2 <lif_add_lif_file+0x2c6>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1caa8:	5f ef       	ldi	r21, 0xFF	; 255
   1caaa:	d5 1a       	sub	r13, r21
   1caac:	e5 0a       	sbc	r14, r21
   1caae:	f5 0a       	sbc	r15, r21
        printf("Wrote: %8ld\r", bytes);
   1cab0:	ff 92       	push	r15
   1cab2:	ef 92       	push	r14
   1cab4:	df 92       	push	r13
   1cab6:	cf 92       	push	r12
   1cab8:	1f 92       	push	r1
   1caba:	5f 92       	push	r5
   1cabc:	4f 92       	push	r4
   1cabe:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1cac2:	8f ef       	ldi	r24, 0xFF	; 255
   1cac4:	28 1a       	sub	r2, r24
   1cac6:	38 0a       	sbc	r3, r24
   1cac8:	0f b6       	in	r0, 0x3f	; 63
   1caca:	f8 94       	cli
   1cacc:	de bf       	out	0x3e, r29	; 62
   1cace:	0f be       	out	0x3f, r0	; 63
   1cad0:	cd bf       	out	0x3d, r28	; 61
   1cad2:	9a cf       	rjmp	.-204    	; 0x1ca08 <lif_add_lif_file+0x1dc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1cad4:	c4 01       	movw	r24, r8
   1cad6:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>
        printf("Wrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

    // Write directory record
    if( !lif_writedirindex(LIF,index))
   1cada:	c3 5f       	subi	r28, 0xF3	; 243
   1cadc:	de 4f       	sbci	r29, 0xFE	; 254
   1cade:	68 81       	ld	r22, Y
   1cae0:	79 81       	ldd	r23, Y+1	; 0x01
   1cae2:	cd 50       	subi	r28, 0x0D	; 13
   1cae4:	d1 40       	sbci	r29, 0x01	; 1
   1cae6:	c5 01       	movw	r24, r10
   1cae8:	0e 94 ab d3 	call	0x1a756	; 0x1a756 <lif_writedirindex>
   1caec:	89 2b       	or	r24, r25
   1caee:	41 f4       	brne	.+16     	; 0x1cb00 <lif_add_lif_file+0x2d4>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1caf0:	c5 01       	movw	r24, r10
   1caf2:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>

    // Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1caf6:	6f ef       	ldi	r22, 0xFF	; 255
   1caf8:	7f ef       	ldi	r23, 0xFF	; 255
   1cafa:	8f ef       	ldi	r24, 0xFF	; 255
   1cafc:	9f ef       	ldi	r25, 0xFF	; 255
   1cafe:	15 c0       	rjmp	.+42     	; 0x1cb2a <lif_add_lif_file+0x2fe>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1cb00:	c5 01       	movw	r24, r10
   1cb02:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("Wrote: %8ld\n", bytes);
   1cb06:	ff 92       	push	r15
   1cb08:	ef 92       	push	r14
   1cb0a:	df 92       	push	r13
   1cb0c:	cf 92       	push	r12
   1cb0e:	84 e6       	ldi	r24, 0x64	; 100
   1cb10:	94 e3       	ldi	r25, 0x34	; 52
   1cb12:	1f 92       	push	r1
   1cb14:	9f 93       	push	r25
   1cb16:	8f 93       	push	r24
   1cb18:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    return(bytes);
   1cb1c:	0f b6       	in	r0, 0x3f	; 63
   1cb1e:	f8 94       	cli
   1cb20:	de bf       	out	0x3e, r29	; 62
   1cb22:	0f be       	out	0x3f, r0	; 63
   1cb24:	cd bf       	out	0x3d, r28	; 61
   1cb26:	b6 01       	movw	r22, r12
   1cb28:	c7 01       	movw	r24, r14
}
   1cb2a:	cc 5e       	subi	r28, 0xEC	; 236
   1cb2c:	de 4f       	sbci	r29, 0xFE	; 254
   1cb2e:	0f b6       	in	r0, 0x3f	; 63
   1cb30:	f8 94       	cli
   1cb32:	de bf       	out	0x3e, r29	; 62
   1cb34:	0f be       	out	0x3f, r0	; 63
   1cb36:	cd bf       	out	0x3d, r28	; 61
   1cb38:	df 91       	pop	r29
   1cb3a:	cf 91       	pop	r28
   1cb3c:	1f 91       	pop	r17
   1cb3e:	0f 91       	pop	r16
   1cb40:	ff 90       	pop	r15
   1cb42:	ef 90       	pop	r14
   1cb44:	df 90       	pop	r13
   1cb46:	cf 90       	pop	r12
   1cb48:	bf 90       	pop	r11
   1cb4a:	af 90       	pop	r10
   1cb4c:	9f 90       	pop	r9
   1cb4e:	8f 90       	pop	r8
   1cb50:	6f 90       	pop	r6
   1cb52:	5f 90       	pop	r5
   1cb54:	4f 90       	pop	r4
   1cb56:	3f 90       	pop	r3
   1cb58:	2f 90       	pop	r2
   1cb5a:	08 95       	ret

0001cb5c <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1cb5c:	ef 92       	push	r14
   1cb5e:	ff 92       	push	r15
   1cb60:	0f 93       	push	r16
   1cb62:	1f 93       	push	r17
   1cb64:	cf 93       	push	r28
   1cb66:	df 93       	push	r29
   1cb68:	7c 01       	movw	r14, r24
   1cb6a:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1cb6c:	fc 01       	movw	r30, r24
   1cb6e:	80 81       	ld	r24, Z
   1cb70:	81 11       	cpse	r24, r1
   1cb72:	03 c0       	rjmp	.+6      	; 0x1cb7a <lif_del_file+0x1e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1cb74:	8f e3       	ldi	r24, 0x3F	; 63
   1cb76:	94 e3       	ldi	r25, 0x34	; 52
   1cb78:	06 c0       	rjmp	.+12     	; 0x1cb86 <lif_del_file+0x2a>
        return(-1);
    }
    if(!*lifname)
   1cb7a:	fb 01       	movw	r30, r22
   1cb7c:	80 81       	ld	r24, Z
   1cb7e:	81 11       	cpse	r24, r1
   1cb80:	0b c0       	rjmp	.+22     	; 0x1cb98 <lif_del_file+0x3c>
    {
        printf("lif_del_file: lifname is empty\n");
   1cb82:	8f e1       	ldi	r24, 0x1F	; 31
   1cb84:	94 e3       	ldi	r25, 0x34	; 52
   1cb86:	1f 92       	push	r1
   1cb88:	9f 93       	push	r25
   1cb8a:	8f 93       	push	r24
   1cb8c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        return(-1);
   1cb90:	0f 90       	pop	r0
   1cb92:	0f 90       	pop	r0
   1cb94:	0f 90       	pop	r0
   1cb96:	74 c0       	rjmp	.+232    	; 0x1cc80 <lif_del_file+0x124>
    }
    if(debuglevel & 0x400)
   1cb98:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1cb9c:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <debuglevel+0x1>
   1cba0:	92 ff       	sbrs	r25, 2
   1cba2:	13 c0       	rjmp	.+38     	; 0x1cbca <lif_del_file+0x6e>
        printf("LIF image:[%s], LIF name:[%s]\n", 
   1cba4:	1f 93       	push	r17
   1cba6:	6f 93       	push	r22
   1cba8:	ff 92       	push	r15
   1cbaa:	ef 92       	push	r14
   1cbac:	80 e0       	ldi	r24, 0x00	; 0
   1cbae:	94 e3       	ldi	r25, 0x34	; 52
   1cbb0:	1f 92       	push	r1
   1cbb2:	9f 93       	push	r25
   1cbb4:	8f 93       	push	r24
   1cbb6:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1cbba:	8d b7       	in	r24, 0x3d	; 61
   1cbbc:	9e b7       	in	r25, 0x3e	; 62
   1cbbe:	07 96       	adiw	r24, 0x07	; 7
   1cbc0:	0f b6       	in	r0, 0x3f	; 63
   1cbc2:	f8 94       	cli
   1cbc4:	9e bf       	out	0x3e, r25	; 62
   1cbc6:	0f be       	out	0x3f, r0	; 63
   1cbc8:	8d bf       	out	0x3d, r24	; 61
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
   1cbca:	64 ec       	ldi	r22, 0xC4	; 196
   1cbcc:	78 e0       	ldi	r23, 0x08	; 8
   1cbce:	c7 01       	movw	r24, r14
   1cbd0:	0e 94 b9 d9 	call	0x1b372	; 0x1b372 <lif_open_volume>
   1cbd4:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1cbd6:	00 97       	sbiw	r24, 0x00	; 0
   1cbd8:	09 f4       	brne	.+2      	; 0x1cbdc <lif_del_file+0x80>
   1cbda:	52 c0       	rjmp	.+164    	; 0x1cc80 <lif_del_file+0x124>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, lifname);
   1cbdc:	b8 01       	movw	r22, r16
   1cbde:	0e 94 26 dc 	call	0x1b84c	; 0x1b84c <lif_find_file>
    if(index == -1)
   1cbe2:	8f 3f       	cpi	r24, 0xFF	; 255
   1cbe4:	ef ef       	ldi	r30, 0xFF	; 255
   1cbe6:	9e 07       	cpc	r25, r30
   1cbe8:	c9 f4       	brne	.+50     	; 0x1cc1c <lif_del_file+0xc0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1cbea:	ce 01       	movw	r24, r28
   1cbec:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>
    // Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1cbf0:	1f 93       	push	r17
   1cbf2:	0f 93       	push	r16
   1cbf4:	ff 92       	push	r15
   1cbf6:	ef 92       	push	r14
   1cbf8:	88 ed       	ldi	r24, 0xD8	; 216
   1cbfa:	93 e3       	ldi	r25, 0x33	; 51
   1cbfc:	1f 92       	push	r1
   1cbfe:	9f 93       	push	r25
   1cc00:	8f 93       	push	r24
   1cc02:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        return(0);
   1cc06:	8d b7       	in	r24, 0x3d	; 61
   1cc08:	9e b7       	in	r25, 0x3e	; 62
   1cc0a:	07 96       	adiw	r24, 0x07	; 7
   1cc0c:	0f b6       	in	r0, 0x3f	; 63
   1cc0e:	f8 94       	cli
   1cc10:	9e bf       	out	0x3e, r25	; 62
   1cc12:	0f be       	out	0x3f, r0	; 63
   1cc14:	8d bf       	out	0x3d, r24	; 61
   1cc16:	80 e0       	ldi	r24, 0x00	; 0
   1cc18:	90 e0       	ldi	r25, 0x00	; 0
   1cc1a:	34 c0       	rjmp	.+104    	; 0x1cc84 <lif_del_file+0x128>
    }


// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1cc1c:	2a a1       	ldd	r18, Y+34	; 0x22
   1cc1e:	3b a1       	ldd	r19, Y+35	; 0x23
   1cc20:	21 50       	subi	r18, 0x01	; 1
   1cc22:	31 09       	sbc	r19, r1
   1cc24:	fe 01       	movw	r30, r28
   1cc26:	e6 5a       	subi	r30, 0xA6	; 166
   1cc28:	ff 4f       	sbci	r31, 0xFF	; 255
   1cc2a:	82 17       	cp	r24, r18
   1cc2c:	93 07       	cpc	r25, r19
   1cc2e:	2c f0       	brlt	.+10     	; 0x1cc3a <lif_del_file+0xde>
        LIF->DIR.FileType = 0xffff;
   1cc30:	2f ef       	ldi	r18, 0xFF	; 255
   1cc32:	3f ef       	ldi	r19, 0xFF	; 255
   1cc34:	31 83       	std	Z+1, r19	; 0x01
   1cc36:	20 83       	st	Z, r18
   1cc38:	02 c0       	rjmp	.+4      	; 0x1cc3e <lif_del_file+0xe2>
    else
        LIF->DIR.FileType = 0;
   1cc3a:	11 82       	std	Z+1, r1	; 0x01
   1cc3c:	10 82       	st	Z, r1

    // re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1cc3e:	bc 01       	movw	r22, r24
   1cc40:	ce 01       	movw	r24, r28
   1cc42:	0e 94 ab d3 	call	0x1a756	; 0x1a756 <lif_writedirindex>
   1cc46:	89 2b       	or	r24, r25
   1cc48:	21 f4       	brne	.+8      	; 0x1cc52 <lif_del_file+0xf6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1cc4a:	ce 01       	movw	r24, r28
   1cc4c:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>
   1cc50:	17 c0       	rjmp	.+46     	; 0x1cc80 <lif_del_file+0x124>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1cc52:	ce 01       	movw	r24, r28
   1cc54:	0e 94 1f d4 	call	0x1a83e	; 0x1a83e <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1cc58:	ce 01       	movw	r24, r28
   1cc5a:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1cc5e:	1f 93       	push	r17
   1cc60:	0f 93       	push	r16
   1cc62:	89 ec       	ldi	r24, 0xC9	; 201
   1cc64:	93 e3       	ldi	r25, 0x33	; 51
   1cc66:	1f 92       	push	r1
   1cc68:	9f 93       	push	r25
   1cc6a:	8f 93       	push	r24
   1cc6c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>

    return(1);
   1cc70:	0f 90       	pop	r0
   1cc72:	0f 90       	pop	r0
   1cc74:	0f 90       	pop	r0
   1cc76:	0f 90       	pop	r0
   1cc78:	0f 90       	pop	r0
   1cc7a:	81 e0       	ldi	r24, 0x01	; 1
   1cc7c:	90 e0       	ldi	r25, 0x00	; 0
   1cc7e:	02 c0       	rjmp	.+4      	; 0x1cc84 <lif_del_file+0x128>
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1cc80:	8f ef       	ldi	r24, 0xFF	; 255
   1cc82:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1cc84:	cd b7       	in	r28, 0x3d	; 61
   1cc86:	de b7       	in	r29, 0x3e	; 62
   1cc88:	e6 e0       	ldi	r30, 0x06	; 6
   1cc8a:	16 c6       	rjmp	.+3116   	; 0x1d8b8 <__epilogue_restores__+0x18>

0001cc8c <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1cc8c:	a0 e0       	ldi	r26, 0x00	; 0
   1cc8e:	b0 e0       	ldi	r27, 0x00	; 0
   1cc90:	eb e4       	ldi	r30, 0x4B	; 75
   1cc92:	f6 ee       	ldi	r31, 0xE6	; 230
   1cc94:	f1 c5       	rjmp	.+3042   	; 0x1d878 <__prologue_saves__+0x10>
   1cc96:	6c 01       	movw	r12, r24
   1cc98:	8b 01       	movw	r16, r22
   1cc9a:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1cc9c:	fc 01       	movw	r30, r24
   1cc9e:	80 81       	ld	r24, Z
   1cca0:	81 11       	cpse	r24, r1
   1cca2:	03 c0       	rjmp	.+6      	; 0x1ccaa <lif_rename_file+0x1e>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1cca4:	81 ea       	ldi	r24, 0xA1	; 161
   1cca6:	93 e3       	ldi	r25, 0x33	; 51
   1cca8:	06 c0       	rjmp	.+12     	; 0x1ccb6 <lif_rename_file+0x2a>
        return(-1);
    }
    if(!*oldlifname)
   1ccaa:	fb 01       	movw	r30, r22
   1ccac:	80 81       	ld	r24, Z
   1ccae:	81 11       	cpse	r24, r1
   1ccb0:	0b c0       	rjmp	.+22     	; 0x1ccc8 <lif_rename_file+0x3c>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1ccb2:	8a e7       	ldi	r24, 0x7A	; 122
   1ccb4:	93 e3       	ldi	r25, 0x33	; 51
   1ccb6:	1f 92       	push	r1
   1ccb8:	9f 93       	push	r25
   1ccba:	8f 93       	push	r24
   1ccbc:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        return(-1);
   1ccc0:	0f 90       	pop	r0
   1ccc2:	0f 90       	pop	r0
   1ccc4:	0f 90       	pop	r0
   1ccc6:	62 c0       	rjmp	.+196    	; 0x1cd8c <lif_rename_file+0x100>
    }
    if(!*newlifname)
   1ccc8:	fa 01       	movw	r30, r20
   1ccca:	80 81       	ld	r24, Z
   1cccc:	81 11       	cpse	r24, r1
   1ccce:	03 c0       	rjmp	.+6      	; 0x1ccd6 <lif_rename_file+0x4a>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1ccd0:	83 e5       	ldi	r24, 0x53	; 83
   1ccd2:	93 e3       	ldi	r25, 0x33	; 51
   1ccd4:	f0 cf       	rjmp	.-32     	; 0x1ccb6 <lif_rename_file+0x2a>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1ccd6:	ca 01       	movw	r24, r20
   1ccd8:	0e 94 35 cb 	call	0x1966a	; 0x1966a <lif_checkname>
   1ccdc:	89 2b       	or	r24, r25
   1ccde:	19 f4       	brne	.+6      	; 0x1cce6 <lif_rename_file+0x5a>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1cce0:	8d e1       	ldi	r24, 0x1D	; 29
   1cce2:	93 e3       	ldi	r25, 0x33	; 51
   1cce4:	e8 cf       	rjmp	.-48     	; 0x1ccb6 <lif_rename_file+0x2a>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1cce6:	64 ec       	ldi	r22, 0xC4	; 196
   1cce8:	78 e0       	ldi	r23, 0x08	; 8
   1ccea:	c6 01       	movw	r24, r12
   1ccec:	0e 94 b9 d9 	call	0x1b372	; 0x1b372 <lif_open_volume>
   1ccf0:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1ccf2:	00 97       	sbiw	r24, 0x00	; 0
   1ccf4:	09 f4       	brne	.+2      	; 0x1ccf8 <lif_rename_file+0x6c>
   1ccf6:	4a c0       	rjmp	.+148    	; 0x1cd8c <lif_rename_file+0x100>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, oldlifname);
   1ccf8:	b8 01       	movw	r22, r16
   1ccfa:	0e 94 26 dc 	call	0x1b84c	; 0x1b84c <lif_find_file>
   1ccfe:	5c 01       	movw	r10, r24
    if(index == -1)
   1cd00:	01 96       	adiw	r24, 0x01	; 1
   1cd02:	c9 f4       	brne	.+50     	; 0x1cd36 <lif_rename_file+0xaa>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1cd04:	1f 93       	push	r17
   1cd06:	0f 93       	push	r16
   1cd08:	df 92       	push	r13
   1cd0a:	cf 92       	push	r12
   1cd0c:	84 ef       	ldi	r24, 0xF4	; 244
   1cd0e:	92 e3       	ldi	r25, 0x32	; 50
   1cd10:	1f 92       	push	r1
   1cd12:	9f 93       	push	r25
   1cd14:	8f 93       	push	r24
   1cd16:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1cd1a:	ce 01       	movw	r24, r28
   1cd1c:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1cd20:	8d b7       	in	r24, 0x3d	; 61
   1cd22:	9e b7       	in	r25, 0x3e	; 62
   1cd24:	07 96       	adiw	r24, 0x07	; 7
   1cd26:	0f b6       	in	r0, 0x3f	; 63
   1cd28:	f8 94       	cli
   1cd2a:	9e bf       	out	0x3e, r25	; 62
   1cd2c:	0f be       	out	0x3f, r0	; 63
   1cd2e:	8d bf       	out	0x3d, r24	; 61
   1cd30:	80 e0       	ldi	r24, 0x00	; 0
   1cd32:	90 e0       	ldi	r25, 0x00	; 0
   1cd34:	2d c0       	rjmp	.+90     	; 0x1cd90 <lif_rename_file+0x104>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1cd36:	4a e0       	ldi	r20, 0x0A	; 10
   1cd38:	50 e0       	ldi	r21, 0x00	; 0
   1cd3a:	b7 01       	movw	r22, r14
   1cd3c:	ce 01       	movw	r24, r28
   1cd3e:	81 5b       	subi	r24, 0xB1	; 177
   1cd40:	9f 4f       	sbci	r25, 0xFF	; 255
   1cd42:	0e 94 6f cb 	call	0x196de	; 0x196de <lif_fixname>

    // re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1cd46:	b5 01       	movw	r22, r10
   1cd48:	ce 01       	movw	r24, r28
   1cd4a:	0e 94 ab d3 	call	0x1a756	; 0x1a756 <lif_writedirindex>
   1cd4e:	89 2b       	or	r24, r25
   1cd50:	21 f4       	brne	.+8      	; 0x1cd5a <lif_rename_file+0xce>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1cd52:	ce 01       	movw	r24, r28
   1cd54:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>
   1cd58:	19 c0       	rjmp	.+50     	; 0x1cd8c <lif_rename_file+0x100>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1cd5a:	ff 92       	push	r15
   1cd5c:	ef 92       	push	r14
   1cd5e:	1f 93       	push	r17
   1cd60:	0f 93       	push	r16
   1cd62:	8d ed       	ldi	r24, 0xDD	; 221
   1cd64:	92 e3       	ldi	r25, 0x32	; 50
   1cd66:	1f 92       	push	r1
   1cd68:	9f 93       	push	r25
   1cd6a:	8f 93       	push	r24
   1cd6c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1cd70:	ce 01       	movw	r24, r28
   1cd72:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1cd76:	ed b7       	in	r30, 0x3d	; 61
   1cd78:	fe b7       	in	r31, 0x3e	; 62
   1cd7a:	37 96       	adiw	r30, 0x07	; 7
   1cd7c:	0f b6       	in	r0, 0x3f	; 63
   1cd7e:	f8 94       	cli
   1cd80:	fe bf       	out	0x3e, r31	; 62
   1cd82:	0f be       	out	0x3f, r0	; 63
   1cd84:	ed bf       	out	0x3d, r30	; 61
   1cd86:	81 e0       	ldi	r24, 0x01	; 1
   1cd88:	90 e0       	ldi	r25, 0x00	; 0
   1cd8a:	02 c0       	rjmp	.+4      	; 0x1cd90 <lif_rename_file+0x104>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1cd8c:	8f ef       	ldi	r24, 0xFF	; 255
   1cd8e:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1cd90:	cd b7       	in	r28, 0x3d	; 61
   1cd92:	de b7       	in	r29, 0x3e	; 62
   1cd94:	ea e0       	ldi	r30, 0x0A	; 10
   1cd96:	8c c5       	rjmp	.+2840   	; 0x1d8b0 <__epilogue_restores__+0x10>

0001cd98 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1cd98:	4f 92       	push	r4
   1cd9a:	5f 92       	push	r5
   1cd9c:	6f 92       	push	r6
   1cd9e:	7f 92       	push	r7
   1cda0:	af 92       	push	r10
   1cda2:	bf 92       	push	r11
   1cda4:	cf 92       	push	r12
   1cda6:	df 92       	push	r13
   1cda8:	ef 92       	push	r14
   1cdaa:	ff 92       	push	r15
   1cdac:	0f 93       	push	r16
   1cdae:	1f 93       	push	r17
   1cdb0:	cf 93       	push	r28
   1cdb2:	df 93       	push	r29
   1cdb4:	27 01       	movw	r4, r14
   1cdb6:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1cdb8:	dc 01       	movw	r26, r24
   1cdba:	ec 91       	ld	r30, X
   1cdbc:	e1 11       	cpse	r30, r1
   1cdbe:	03 c0       	rjmp	.+6      	; 0x1cdc6 <lif_create_image+0x2e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1cdc0:	84 eb       	ldi	r24, 0xB4	; 180
   1cdc2:	92 e3       	ldi	r25, 0x32	; 50
   1cdc4:	16 c0       	rjmp	.+44     	; 0x1cdf2 <lif_create_image+0x5a>
        return(-1);
    }
    if(!*liflabel)
   1cdc6:	db 01       	movw	r26, r22
   1cdc8:	ec 91       	ld	r30, X
   1cdca:	e1 11       	cpse	r30, r1
   1cdcc:	03 c0       	rjmp	.+6      	; 0x1cdd4 <lif_create_image+0x3c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1cdce:	8f e8       	ldi	r24, 0x8F	; 143
   1cdd0:	92 e3       	ldi	r25, 0x32	; 50
   1cdd2:	0f c0       	rjmp	.+30     	; 0x1cdf2 <lif_create_image+0x5a>
        return(-1);
    }
    if(!dirsectors)
   1cdd4:	21 15       	cp	r18, r1
   1cdd6:	31 05       	cpc	r19, r1
   1cdd8:	41 05       	cpc	r20, r1
   1cdda:	51 05       	cpc	r21, r1
   1cddc:	19 f4       	brne	.+6      	; 0x1cde4 <lif_create_image+0x4c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1cdde:	8c e6       	ldi	r24, 0x6C	; 108
   1cde0:	92 e3       	ldi	r25, 0x32	; 50
   1cde2:	07 c0       	rjmp	.+14     	; 0x1cdf2 <lif_create_image+0x5a>
        return(-1);
    }
    if(!sectors)
   1cde4:	e1 14       	cp	r14, r1
   1cde6:	f1 04       	cpc	r15, r1
   1cde8:	01 05       	cpc	r16, r1
   1cdea:	11 05       	cpc	r17, r1
   1cdec:	59 f4       	brne	.+22     	; 0x1ce04 <lif_create_image+0x6c>
    {
        printf("lif_create_image: sectors is 0\n");
   1cdee:	8c e4       	ldi	r24, 0x4C	; 76
   1cdf0:	92 e3       	ldi	r25, 0x32	; 50
   1cdf2:	1f 92       	push	r1
   1cdf4:	9f 93       	push	r25
   1cdf6:	8f 93       	push	r24
   1cdf8:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
        return(-1);
   1cdfc:	0f 90       	pop	r0
   1cdfe:	0f 90       	pop	r0
   1ce00:	0f 90       	pop	r0
   1ce02:	30 c0       	rjmp	.+96     	; 0x1ce64 <lif_create_image+0xcc>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1ce04:	67 01       	movw	r12, r14
   1ce06:	78 01       	movw	r14, r16
   1ce08:	b2 e0       	ldi	r27, 0x02	; 2
   1ce0a:	cb 1a       	sub	r12, r27
   1ce0c:	d1 08       	sbc	r13, r1
   1ce0e:	e1 08       	sbc	r14, r1
   1ce10:	f1 08       	sbc	r15, r1
   1ce12:	56 01       	movw	r10, r12
   1ce14:	67 01       	movw	r12, r14
   1ce16:	a2 1a       	sub	r10, r18
   1ce18:	b3 0a       	sbc	r11, r19
   1ce1a:	c4 0a       	sbc	r12, r20
   1ce1c:	d5 0a       	sbc	r13, r21
   1ce1e:	79 01       	movw	r14, r18
   1ce20:	8a 01       	movw	r16, r20
   1ce22:	22 e0       	ldi	r18, 0x02	; 2
   1ce24:	30 e0       	ldi	r19, 0x00	; 0
   1ce26:	40 e0       	ldi	r20, 0x00	; 0
   1ce28:	50 e0       	ldi	r21, 0x00	; 0
   1ce2a:	0e 94 27 d5 	call	0x1aa4e	; 0x1aa4e <lif_create_volume>
    if(LIF == NULL)
   1ce2e:	00 97       	sbiw	r24, 0x00	; 0
   1ce30:	c9 f0       	breq	.+50     	; 0x1ce64 <lif_create_image+0xcc>
        return(-1);
    lif_close_volume(LIF);
   1ce32:	0e 94 c1 d2 	call	0x1a582	; 0x1a582 <lif_close_volume>

    printf("Formating: wrote:[%ld] sectors\n", (long)end);
   1ce36:	82 01       	movw	r16, r4
   1ce38:	d6 2d       	mov	r29, r6
   1ce3a:	c7 2d       	mov	r28, r7
   1ce3c:	7f 92       	push	r7
   1ce3e:	6f 92       	push	r6
   1ce40:	5f 92       	push	r5
   1ce42:	4f 92       	push	r4
   1ce44:	8c e2       	ldi	r24, 0x2C	; 44
   1ce46:	92 e3       	ldi	r25, 0x32	; 50
   1ce48:	1f 92       	push	r1
   1ce4a:	9f 93       	push	r25
   1ce4c:	8f 93       	push	r24
   1ce4e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    return(end);
   1ce52:	8d b7       	in	r24, 0x3d	; 61
   1ce54:	9e b7       	in	r25, 0x3e	; 62
   1ce56:	07 96       	adiw	r24, 0x07	; 7
   1ce58:	0f b6       	in	r0, 0x3f	; 63
   1ce5a:	f8 94       	cli
   1ce5c:	9e bf       	out	0x3e, r25	; 62
   1ce5e:	0f be       	out	0x3f, r0	; 63
   1ce60:	8d bf       	out	0x3d, r24	; 61
   1ce62:	04 c0       	rjmp	.+8      	; 0x1ce6c <lif_create_image+0xd4>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1ce64:	0f ef       	ldi	r16, 0xFF	; 255
   1ce66:	1f ef       	ldi	r17, 0xFF	; 255
   1ce68:	df ef       	ldi	r29, 0xFF	; 255
   1ce6a:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("Formating: wrote:[%ld] sectors\n", (long)end);
    return(end);
}
   1ce6c:	b8 01       	movw	r22, r16
   1ce6e:	8d 2f       	mov	r24, r29
   1ce70:	9c 2f       	mov	r25, r28
   1ce72:	df 91       	pop	r29
   1ce74:	cf 91       	pop	r28
   1ce76:	1f 91       	pop	r17
   1ce78:	0f 91       	pop	r16
   1ce7a:	ff 90       	pop	r15
   1ce7c:	ef 90       	pop	r14
   1ce7e:	df 90       	pop	r13
   1ce80:	cf 90       	pop	r12
   1ce82:	bf 90       	pop	r11
   1ce84:	af 90       	pop	r10
   1ce86:	7f 90       	pop	r7
   1ce88:	6f 90       	pop	r6
   1ce8a:	5f 90       	pop	r5
   1ce8c:	4f 90       	pop	r4
   1ce8e:	08 95       	ret

0001ce90 <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1ce90:	a0 e0       	ldi	r26, 0x00	; 0
   1ce92:	b0 e0       	ldi	r27, 0x00	; 0
   1ce94:	ed e4       	ldi	r30, 0x4D	; 77
   1ce96:	f7 ee       	ldi	r31, 0xE7	; 231
   1ce98:	ed c4       	rjmp	.+2522   	; 0x1d874 <__prologue_saves__+0xc>
    // NAME
    ind = 0;
	// Skip program name
    ptr = argv[ind++];

    if(!ptr )
   1ce9a:	fb 01       	movw	r30, r22
   1ce9c:	20 81       	ld	r18, Z
   1ce9e:	31 81       	ldd	r19, Z+1	; 0x01
   1cea0:	23 2b       	or	r18, r19
   1cea2:	59 f0       	breq	.+22     	; 0x1ceba <lif_tests+0x2a>
   1cea4:	8b 01       	movw	r16, r22
   1cea6:	4c 01       	movw	r8, r24
        return(0);

	// Next Argument after program name
    ptr = argv[ind++];
   1cea8:	fb 01       	movw	r30, r22
   1ceaa:	a2 80       	ldd	r10, Z+2	; 0x02
   1ceac:	b3 80       	ldd	r11, Z+3	; 0x03



    if(argc <= 1 || !ptr || MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1ceae:	02 97       	sbiw	r24, 0x02	; 2
   1ceb0:	3c f4       	brge	.+14     	; 0x1cec0 <lif_tests+0x30>
    {
        lif_help(1);
   1ceb2:	81 e0       	ldi	r24, 0x01	; 1
   1ceb4:	90 e0       	ldi	r25, 0x00	; 0
   1ceb6:	0e 94 2c c9 	call	0x19258	; 0x19258 <lif_help>
#ifdef TELEDISK
        td0_help(1);
#endif
        return(0);
   1ceba:	80 e0       	ldi	r24, 0x00	; 0
   1cebc:	90 e0       	ldi	r25, 0x00	; 0
   1cebe:	0a c1       	rjmp	.+532    	; 0x1d0d4 <lif_tests+0x244>
	// Next Argument after program name
    ptr = argv[ind++];



    if(argc <= 1 || !ptr || MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1cec0:	a1 14       	cp	r10, r1
   1cec2:	b1 04       	cpc	r11, r1
   1cec4:	b1 f3       	breq	.-20     	; 0x1ceb2 <lif_tests+0x22>
   1cec6:	67 e7       	ldi	r22, 0x77	; 119
   1cec8:	76 e1       	ldi	r23, 0x16	; 22
   1ceca:	c5 01       	movw	r24, r10
   1cecc:	0e 94 f5 32 	call	0x65ea	; 0x65ea <MATCH>
   1ced0:	89 2b       	or	r24, r25
   1ced2:	79 f7       	brne	.-34     	; 0x1ceb2 <lif_tests+0x22>
   1ced4:	66 e7       	ldi	r22, 0x76	; 118
   1ced6:	76 e1       	ldi	r23, 0x16	; 22
   1ced8:	c5 01       	movw	r24, r10
   1ceda:	0e 94 f5 32 	call	0x65ea	; 0x65ea <MATCH>
   1cede:	89 2b       	or	r24, r25
   1cee0:	41 f7       	brne	.-48     	; 0x1ceb2 <lif_tests+0x22>
   1cee2:	6c e7       	ldi	r22, 0x7C	; 124
   1cee4:	76 e1       	ldi	r23, 0x16	; 22
   1cee6:	c5 01       	movw	r24, r10
   1cee8:	0e 94 f5 32 	call	0x65ea	; 0x65ea <MATCH>
   1ceec:	89 2b       	or	r24, r25
   1ceee:	09 f7       	brne	.-62     	; 0x1ceb2 <lif_tests+0x22>
        return(0);
    }

	// Turn one debugging
	// in the future we can add tests for specific messages
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1cef0:	94 01       	movw	r18, r8
   1cef2:	42 e0       	ldi	r20, 0x02	; 2
   1cef4:	50 e0       	ldi	r21, 0x00	; 0
   1cef6:	6f e7       	ldi	r22, 0x7F	; 127
   1cef8:	76 e1       	ldi	r23, 0x16	; 22
   1cefa:	c5 01       	movw	r24, r10
   1cefc:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   1cf00:	89 2b       	or	r24, r25
   1cf02:	69 f0       	breq	.+26     	; 0x1cf1e <lif_tests+0x8e>
    {
		debuglevel = 0xffff;
   1cf04:	8f ef       	ldi	r24, 0xFF	; 255
   1cf06:	9f ef       	ldi	r25, 0xFF	; 255
   1cf08:	90 93 be 01 	sts	0x01BE, r25	; 0x8001be <debuglevel+0x1>
   1cf0c:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <debuglevel>
		ptr = argv[ind++];
   1cf10:	f8 01       	movw	r30, r16
   1cf12:	a4 80       	ldd	r10, Z+4	; 0x04
   1cf14:	b5 80       	ldd	r11, Z+5	; 0x05
   1cf16:	f3 e0       	ldi	r31, 0x03	; 3
   1cf18:	ef 2e       	mov	r14, r31
   1cf1a:	f1 2c       	mov	r15, r1
   1cf1c:	03 c0       	rjmp	.+6      	; 0x1cf24 <lif_tests+0x94>

    if(!ptr )
        return(0);

	// Next Argument after program name
    ptr = argv[ind++];
   1cf1e:	e2 e0       	ldi	r30, 0x02	; 2
   1cf20:	ee 2e       	mov	r14, r30
   1cf22:	f1 2c       	mov	r15, r1
    {
		debuglevel = 0xffff;
		ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1cf24:	67 01       	movw	r12, r14
   1cf26:	f3 e0       	ldi	r31, 0x03	; 3
   1cf28:	cf 0e       	add	r12, r31
   1cf2a:	d1 1c       	adc	r13, r1
   1cf2c:	94 01       	movw	r18, r8
   1cf2e:	a6 01       	movw	r20, r12
   1cf30:	62 e8       	ldi	r22, 0x82	; 130
   1cf32:	76 e1       	ldi	r23, 0x16	; 22
   1cf34:	c5 01       	movw	r24, r10
   1cf36:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   1cf3a:	e7 01       	movw	r28, r14
   1cf3c:	22 96       	adiw	r28, 0x02	; 2
   1cf3e:	89 2b       	or	r24, r25
   1cf40:	79 f0       	breq	.+30     	; 0x1cf60 <lif_tests+0xd0>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1cf42:	cc 0f       	add	r28, r28
   1cf44:	dd 1f       	adc	r29, r29
   1cf46:	c0 0f       	add	r28, r16
   1cf48:	d1 1f       	adc	r29, r17
   1cf4a:	48 81       	ld	r20, Y
   1cf4c:	59 81       	ldd	r21, Y+1	; 0x01
   1cf4e:	fe 01       	movw	r30, r28
   1cf50:	32 97       	sbiw	r30, 0x02	; 2
   1cf52:	60 81       	ld	r22, Z
   1cf54:	71 81       	ldd	r23, Z+1	; 0x01
   1cf56:	24 97       	sbiw	r28, 0x04	; 4
   1cf58:	88 81       	ld	r24, Y
   1cf5a:	99 81       	ldd	r25, Y+1	; 0x01
   1cf5c:	67 dc       	rcall	.-1842   	; 0x1c82c <lif_add_lif_file>
   1cf5e:	b8 c0       	rjmp	.+368    	; 0x1d0d0 <lif_tests+0x240>

        return(1);
    }
    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1cf60:	94 01       	movw	r18, r8
   1cf62:	a6 01       	movw	r20, r12
   1cf64:	69 e8       	ldi	r22, 0x89	; 137
   1cf66:	76 e1       	ldi	r23, 0x16	; 22
   1cf68:	c5 01       	movw	r24, r10
   1cf6a:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   1cf6e:	89 2b       	or	r24, r25
   1cf70:	81 f0       	breq	.+32     	; 0x1cf92 <lif_tests+0x102>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1cf72:	cc 0f       	add	r28, r28
   1cf74:	dd 1f       	adc	r29, r29
   1cf76:	c0 0f       	add	r28, r16
   1cf78:	d1 1f       	adc	r29, r17
   1cf7a:	48 81       	ld	r20, Y
   1cf7c:	59 81       	ldd	r21, Y+1	; 0x01
   1cf7e:	fe 01       	movw	r30, r28
   1cf80:	32 97       	sbiw	r30, 0x02	; 2
   1cf82:	60 81       	ld	r22, Z
   1cf84:	71 81       	ldd	r23, Z+1	; 0x01
   1cf86:	24 97       	sbiw	r28, 0x04	; 4
   1cf88:	88 81       	ld	r24, Y
   1cf8a:	99 81       	ldd	r25, Y+1	; 0x01
   1cf8c:	0e 94 aa de 	call	0x1bd54	; 0x1bd54 <lif_add_ascii_file_as_e010>
   1cf90:	9f c0       	rjmp	.+318    	; 0x1d0d0 <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1cf92:	94 01       	movw	r18, r8
   1cf94:	ae 01       	movw	r20, r28
   1cf96:	6d e8       	ldi	r22, 0x8D	; 141
   1cf98:	76 e1       	ldi	r23, 0x16	; 22
   1cf9a:	c5 01       	movw	r24, r10
   1cf9c:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   1cfa0:	89 2b       	or	r24, r25
   1cfa2:	71 f0       	breq	.+28     	; 0x1cfc0 <lif_tests+0x130>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1cfa4:	c7 01       	movw	r24, r14
   1cfa6:	01 96       	adiw	r24, 0x01	; 1
   1cfa8:	88 0f       	add	r24, r24
   1cfaa:	99 1f       	adc	r25, r25
   1cfac:	e8 01       	movw	r28, r16
   1cfae:	c8 0f       	add	r28, r24
   1cfb0:	d9 1f       	adc	r29, r25
   1cfb2:	68 81       	ld	r22, Y
   1cfb4:	79 81       	ldd	r23, Y+1	; 0x01
   1cfb6:	22 97       	sbiw	r28, 0x02	; 2
   1cfb8:	88 81       	ld	r24, Y
   1cfba:	99 81       	ldd	r25, Y+1	; 0x01
   1cfbc:	cf dd       	rcall	.-1122   	; 0x1cb5c <lif_del_file>
   1cfbe:	88 c0       	rjmp	.+272    	; 0x1d0d0 <lif_tests+0x240>

        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1cfc0:	94 01       	movw	r18, r8
   1cfc2:	a7 01       	movw	r20, r14
   1cfc4:	4c 5f       	subi	r20, 0xFC	; 252
   1cfc6:	5f 4f       	sbci	r21, 0xFF	; 255
   1cfc8:	61 e9       	ldi	r22, 0x91	; 145
   1cfca:	76 e1       	ldi	r23, 0x16	; 22
   1cfcc:	c5 01       	movw	r24, r10
   1cfce:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   1cfd2:	89 2b       	or	r24, r25
   1cfd4:	f1 f0       	breq	.+60     	; 0x1d012 <lif_tests+0x182>
    {
        ///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1cfd6:	e6 01       	movw	r28, r12
   1cfd8:	cc 0f       	add	r28, r28
   1cfda:	dd 1f       	adc	r29, r29
   1cfdc:	c0 0f       	add	r28, r16
   1cfde:	d1 1f       	adc	r29, r17
   1cfe0:	88 81       	ld	r24, Y
   1cfe2:	99 81       	ldd	r25, Y+1	; 0x01
   1cfe4:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <atol>
   1cfe8:	6b 01       	movw	r12, r22
   1cfea:	7c 01       	movw	r14, r24
   1cfec:	fe 01       	movw	r30, r28
   1cfee:	32 97       	sbiw	r30, 0x02	; 2
   1cff0:	80 81       	ld	r24, Z
   1cff2:	91 81       	ldd	r25, Z+1	; 0x01
   1cff4:	0e 94 73 47 	call	0x8ee6	; 0x8ee6 <atol>
   1cff8:	9b 01       	movw	r18, r22
   1cffa:	ac 01       	movw	r20, r24
   1cffc:	fe 01       	movw	r30, r28
   1cffe:	34 97       	sbiw	r30, 0x04	; 4
   1d000:	60 81       	ld	r22, Z
   1d002:	71 81       	ldd	r23, Z+1	; 0x01
   1d004:	26 97       	sbiw	r28, 0x06	; 6
   1d006:	87 01       	movw	r16, r14
   1d008:	76 01       	movw	r14, r12
   1d00a:	88 81       	ld	r24, Y
   1d00c:	99 81       	ldd	r25, Y+1	; 0x01
   1d00e:	c4 de       	rcall	.-632    	; 0x1cd98 <lif_create_image>
   1d010:	5f c0       	rjmp	.+190    	; 0x1d0d0 <lif_tests+0x240>
        return(1);
    }
    else if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1d012:	94 01       	movw	r18, r8
   1d014:	a7 01       	movw	r20, r14
   1d016:	4f 5f       	subi	r20, 0xFF	; 255
   1d018:	5f 4f       	sbci	r21, 0xFF	; 255
   1d01a:	67 e9       	ldi	r22, 0x97	; 151
   1d01c:	7b e0       	ldi	r23, 0x0B	; 11
   1d01e:	c5 01       	movw	r24, r10
   1d020:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   1d024:	89 2b       	or	r24, r25
   1d026:	59 f0       	breq	.+22     	; 0x1d03e <lif_tests+0x1ae>
    {
        lif_dir(argv[ind]);
   1d028:	c7 01       	movw	r24, r14
   1d02a:	88 0f       	add	r24, r24
   1d02c:	99 1f       	adc	r25, r25
   1d02e:	e8 01       	movw	r28, r16
   1d030:	c8 0f       	add	r28, r24
   1d032:	d9 1f       	adc	r29, r25
   1d034:	88 81       	ld	r24, Y
   1d036:	99 81       	ldd	r25, Y+1	; 0x01
   1d038:	0e 94 b9 da 	call	0x1b572	; 0x1b572 <lif_dir>
   1d03c:	49 c0       	rjmp	.+146    	; 0x1d0d0 <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1d03e:	94 01       	movw	r18, r8
   1d040:	a6 01       	movw	r20, r12
   1d042:	68 e9       	ldi	r22, 0x98	; 152
   1d044:	76 e1       	ldi	r23, 0x16	; 22
   1d046:	c5 01       	movw	r24, r10
   1d048:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   1d04c:	89 2b       	or	r24, r25
   1d04e:	79 f0       	breq	.+30     	; 0x1d06e <lif_tests+0x1de>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1d050:	cc 0f       	add	r28, r28
   1d052:	dd 1f       	adc	r29, r29
   1d054:	c0 0f       	add	r28, r16
   1d056:	d1 1f       	adc	r29, r17
   1d058:	48 81       	ld	r20, Y
   1d05a:	59 81       	ldd	r21, Y+1	; 0x01
   1d05c:	fe 01       	movw	r30, r28
   1d05e:	32 97       	sbiw	r30, 0x02	; 2
   1d060:	60 81       	ld	r22, Z
   1d062:	71 81       	ldd	r23, Z+1	; 0x01
   1d064:	24 97       	sbiw	r28, 0x04	; 4
   1d066:	88 81       	ld	r24, Y
   1d068:	99 81       	ldd	r25, Y+1	; 0x01
   1d06a:	99 da       	rcall	.-2766   	; 0x1c59e <lif_extract_lif_as_lif>
   1d06c:	31 c0       	rjmp	.+98     	; 0x1d0d0 <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1d06e:	94 01       	movw	r18, r8
   1d070:	a6 01       	movw	r20, r12
   1d072:	63 ea       	ldi	r22, 0xA3	; 163
   1d074:	76 e1       	ldi	r23, 0x16	; 22
   1d076:	c5 01       	movw	r24, r10
   1d078:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   1d07c:	89 2b       	or	r24, r25
   1d07e:	81 f0       	breq	.+32     	; 0x1d0a0 <lif_tests+0x210>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1d080:	cc 0f       	add	r28, r28
   1d082:	dd 1f       	adc	r29, r29
   1d084:	c0 0f       	add	r28, r16
   1d086:	d1 1f       	adc	r29, r17
   1d088:	48 81       	ld	r20, Y
   1d08a:	59 81       	ldd	r21, Y+1	; 0x01
   1d08c:	fe 01       	movw	r30, r28
   1d08e:	32 97       	sbiw	r30, 0x02	; 2
   1d090:	60 81       	ld	r22, Z
   1d092:	71 81       	ldd	r23, Z+1	; 0x01
   1d094:	24 97       	sbiw	r28, 0x04	; 4
   1d096:	88 81       	ld	r24, Y
   1d098:	99 81       	ldd	r25, Y+1	; 0x01
   1d09a:	0e 94 e3 df 	call	0x1bfc6	; 0x1bfc6 <lif_extract_e010_as_ascii>
   1d09e:	18 c0       	rjmp	.+48     	; 0x1d0d0 <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1d0a0:	94 01       	movw	r18, r8
   1d0a2:	a6 01       	movw	r20, r12
   1d0a4:	64 ea       	ldi	r22, 0xA4	; 164
   1d0a6:	7b e0       	ldi	r23, 0x0B	; 11
   1d0a8:	c5 01       	movw	r24, r10
   1d0aa:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   1d0ae:	89 2b       	or	r24, r25
   1d0b0:	09 f4       	brne	.+2      	; 0x1d0b4 <lif_tests+0x224>
   1d0b2:	03 cf       	rjmp	.-506    	; 0x1ceba <lif_tests+0x2a>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1d0b4:	cc 0f       	add	r28, r28
   1d0b6:	dd 1f       	adc	r29, r29
   1d0b8:	c0 0f       	add	r28, r16
   1d0ba:	d1 1f       	adc	r29, r17
   1d0bc:	48 81       	ld	r20, Y
   1d0be:	59 81       	ldd	r21, Y+1	; 0x01
   1d0c0:	fe 01       	movw	r30, r28
   1d0c2:	32 97       	sbiw	r30, 0x02	; 2
   1d0c4:	60 81       	ld	r22, Z
   1d0c6:	71 81       	ldd	r23, Z+1	; 0x01
   1d0c8:	24 97       	sbiw	r28, 0x04	; 4
   1d0ca:	88 81       	ld	r24, Y
   1d0cc:	99 81       	ldd	r25, Y+1	; 0x01
        return(1);
   1d0ce:	de dd       	rcall	.-1092   	; 0x1cc8c <lif_rename_file>
        td02lif(argc,argv);
        return(1);
    }
#endif
    return(0);
}
   1d0d0:	81 e0       	ldi	r24, 0x01	; 1
   1d0d2:	90 e0       	ldi	r25, 0x00	; 0
   1d0d4:	cd b7       	in	r28, 0x3d	; 61
   1d0d6:	de b7       	in	r29, 0x3e	; 62
   1d0d8:	ec e0       	ldi	r30, 0x0C	; 12
   1d0da:	e8 c3       	rjmp	.+2000   	; 0x1d8ac <__epilogue_restores__+0xc>

0001d0dc <copyright>:

///@brief Display Copyright
///@return void
void copyright()
{
    printf("Stand alone version of LIF utilities for linux\n");
   1d0dc:	86 e4       	ldi	r24, 0x46	; 70
   1d0de:	99 e4       	ldi	r25, 0x49	; 73
   1d0e0:	1f 92       	push	r1
   1d0e2:	9f 93       	push	r25
   1d0e4:	8f 93       	push	r24
   1d0e6:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1d0ea:	87 e2       	ldi	r24, 0x27	; 39
   1d0ec:	99 e4       	ldi	r25, 0x49	; 73
   1d0ee:	1f 92       	push	r1
   1d0f0:	9f 93       	push	r25
   1d0f2:	8f 93       	push	r24
   1d0f4:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1d0f8:	8a e0       	ldi	r24, 0x0A	; 10
   1d0fa:	99 e4       	ldi	r25, 0x49	; 73
   1d0fc:	1f 92       	push	r1
   1d0fe:	9f 93       	push	r25
   1d100:	8f 93       	push	r24
   1d102:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    printf(" GNU version 3\n");
   1d106:	8a ef       	ldi	r24, 0xFA	; 250
   1d108:	98 e4       	ldi	r25, 0x48	; 72
   1d10a:	1f 92       	push	r1
   1d10c:	9f 93       	push	r25
   1d10e:	8f 93       	push	r24
   1d110:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1d114:	83 ed       	ldi	r24, 0xD3	; 211
   1d116:	98 e4       	ldi	r25, 0x48	; 72
   1d118:	1f 92       	push	r1
   1d11a:	9f 93       	push	r25
   1d11c:	8f 93       	push	r24
   1d11e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1d122:	8b ea       	ldi	r24, 0xAB	; 171
   1d124:	96 e1       	ldi	r25, 0x16	; 22
   1d126:	9f 93       	push	r25
   1d128:	8f 93       	push	r24
   1d12a:	89 eb       	ldi	r24, 0xB9	; 185
   1d12c:	98 e4       	ldi	r25, 0x48	; 72
   1d12e:	1f 92       	push	r1
   1d130:	9f 93       	push	r25
   1d132:	8f 93       	push	r24
   1d134:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1d138:	8f ec       	ldi	r24, 0xCF	; 207
   1d13a:	96 e1       	ldi	r25, 0x16	; 22
   1d13c:	9f 93       	push	r25
   1d13e:	8f 93       	push	r24
   1d140:	8f e9       	ldi	r24, 0x9F	; 159
   1d142:	98 e4       	ldi	r25, 0x48	; 72
   1d144:	1f 92       	push	r1
   1d146:	9f 93       	push	r25
   1d148:	8f 93       	push	r24
   1d14a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
    printf("\n");
   1d14e:	8d e9       	ldi	r24, 0x9D	; 157
   1d150:	98 e4       	ldi	r25, 0x48	; 72
   1d152:	1f 92       	push	r1
   1d154:	9f 93       	push	r25
   1d156:	8f 93       	push	r24
   1d158:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
}
   1d15c:	8d b7       	in	r24, 0x3d	; 61
   1d15e:	9e b7       	in	r25, 0x3e	; 62
   1d160:	4c 96       	adiw	r24, 0x1c	; 28
   1d162:	0f b6       	in	r0, 0x3f	; 63
   1d164:	f8 94       	cli
   1d166:	9e bf       	out	0x3e, r25	; 62
   1d168:	0f be       	out	0x3f, r0	; 63
   1d16a:	8d bf       	out	0x3d, r24	; 61
   1d16c:	08 95       	ret

0001d16e <delay_tests>:
///
/// This included measurement of avr-libc delays
/// @return  void
void delay_tests()
{
    printf("System delays\n");
   1d16e:	8e e8       	ldi	r24, 0x8E	; 142
   1d170:	98 e4       	ldi	r25, 0x48	; 72
   1d172:	1f 92       	push	r1
   1d174:	9f 93       	push	r25
   1d176:	8f 93       	push	r24
   1d178:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>

    clock_elapsed_begin();
   1d17c:	0e 94 fa 35 	call	0x6bf4	; 0x6bf4 <clock_elapsed_begin>
    clock_elapsed_end("elapsed timer overhead");
   1d180:	83 ef       	ldi	r24, 0xF3	; 243
   1d182:	96 e1       	ldi	r25, 0x16	; 22
   1d184:	0e 94 00 36 	call	0x6c00	; 0x6c00 <clock_elapsed_end>

    clock_elapsed_begin();
   1d188:	0e 94 fa 35 	call	0x6bf4	; 0x6bf4 <clock_elapsed_begin>
   1d18c:	83 ef       	ldi	r24, 0xF3	; 243
   1d18e:	91 e0       	ldi	r25, 0x01	; 1
   1d190:	01 97       	sbiw	r24, 0x01	; 1
   1d192:	f1 f7       	brne	.-4      	; 0x1d190 <delay_tests+0x22>
   1d194:	00 c0       	rjmp	.+0      	; 0x1d196 <delay_tests+0x28>
   1d196:	00 00       	nop
    _delay_us(100);
    clock_elapsed_end("_delay_us(100)");
   1d198:	8a e0       	ldi	r24, 0x0A	; 10
   1d19a:	97 e1       	ldi	r25, 0x17	; 23
   1d19c:	0e 94 00 36 	call	0x6c00	; 0x6c00 <clock_elapsed_end>

    clock_elapsed_begin();
   1d1a0:	0e 94 fa 35 	call	0x6bf4	; 0x6bf4 <clock_elapsed_begin>
   1d1a4:	83 ec       	ldi	r24, 0xC3	; 195
   1d1a6:	99 e0       	ldi	r25, 0x09	; 9
   1d1a8:	01 97       	sbiw	r24, 0x01	; 1
   1d1aa:	f1 f7       	brne	.-4      	; 0x1d1a8 <delay_tests+0x3a>
   1d1ac:	00 c0       	rjmp	.+0      	; 0x1d1ae <delay_tests+0x40>
   1d1ae:	00 00       	nop
    _delay_us(500);
    clock_elapsed_end("_delay_us(500)");
   1d1b0:	89 e1       	ldi	r24, 0x19	; 25
   1d1b2:	97 e1       	ldi	r25, 0x17	; 23
   1d1b4:	0e 94 00 36 	call	0x6c00	; 0x6c00 <clock_elapsed_end>

    printf("My delays\n");
   1d1b8:	83 e8       	ldi	r24, 0x83	; 131
   1d1ba:	98 e4       	ldi	r25, 0x48	; 72
   1d1bc:	1f 92       	push	r1
   1d1be:	9f 93       	push	r25
   1d1c0:	8f 93       	push	r24
   1d1c2:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>

    clock_elapsed_begin();
   1d1c6:	0e 94 fa 35 	call	0x6bf4	; 0x6bf4 <clock_elapsed_begin>
    delayus(100U);
   1d1ca:	64 e6       	ldi	r22, 0x64	; 100
   1d1cc:	70 e0       	ldi	r23, 0x00	; 0
   1d1ce:	80 e0       	ldi	r24, 0x00	; 0
   1d1d0:	90 e0       	ldi	r25, 0x00	; 0
   1d1d2:	0e 94 65 2a 	call	0x54ca	; 0x54ca <delayus>
    clock_elapsed_end("delayus(100)");
   1d1d6:	88 e2       	ldi	r24, 0x28	; 40
   1d1d8:	97 e1       	ldi	r25, 0x17	; 23
   1d1da:	0e 94 00 36 	call	0x6c00	; 0x6c00 <clock_elapsed_end>

    clock_elapsed_begin();
   1d1de:	0e 94 fa 35 	call	0x6bf4	; 0x6bf4 <clock_elapsed_begin>
    delayus(500U);
   1d1e2:	64 ef       	ldi	r22, 0xF4	; 244
   1d1e4:	71 e0       	ldi	r23, 0x01	; 1
   1d1e6:	80 e0       	ldi	r24, 0x00	; 0
   1d1e8:	90 e0       	ldi	r25, 0x00	; 0
   1d1ea:	0e 94 65 2a 	call	0x54ca	; 0x54ca <delayus>
    clock_elapsed_end("delayus(500)");
   1d1ee:	85 e3       	ldi	r24, 0x35	; 53
   1d1f0:	97 e1       	ldi	r25, 0x17	; 23
   1d1f2:	0e 94 00 36 	call	0x6c00	; 0x6c00 <clock_elapsed_end>

    clock_elapsed_begin();
   1d1f6:	0e 94 fa 35 	call	0x6bf4	; 0x6bf4 <clock_elapsed_begin>
    delayus(1100);
   1d1fa:	6c e4       	ldi	r22, 0x4C	; 76
   1d1fc:	74 e0       	ldi	r23, 0x04	; 4
   1d1fe:	80 e0       	ldi	r24, 0x00	; 0
   1d200:	90 e0       	ldi	r25, 0x00	; 0
   1d202:	0e 94 65 2a 	call	0x54ca	; 0x54ca <delayus>
    clock_elapsed_end("delayus(1100)");
   1d206:	82 e4       	ldi	r24, 0x42	; 66
   1d208:	97 e1       	ldi	r25, 0x17	; 23
   1d20a:	0e 94 00 36 	call	0x6c00	; 0x6c00 <clock_elapsed_end>

    clock_elapsed_begin();
   1d20e:	0e 94 fa 35 	call	0x6bf4	; 0x6bf4 <clock_elapsed_begin>
    delayms(1000);
   1d212:	68 ee       	ldi	r22, 0xE8	; 232
   1d214:	73 e0       	ldi	r23, 0x03	; 3
   1d216:	80 e0       	ldi	r24, 0x00	; 0
   1d218:	90 e0       	ldi	r25, 0x00	; 0
   1d21a:	0e 94 92 2a 	call	0x5524	; 0x5524 <delayms>
    clock_elapsed_end("delayms(1100)");
   1d21e:	80 e5       	ldi	r24, 0x50	; 80
   1d220:	97 e1       	ldi	r25, 0x17	; 23
   1d222:	0e 94 00 36 	call	0x6c00	; 0x6c00 <clock_elapsed_end>
}
   1d226:	0f 90       	pop	r0
   1d228:	0f 90       	pop	r0
   1d22a:	0f 90       	pop	r0
   1d22c:	0f 90       	pop	r0
   1d22e:	0f 90       	pop	r0
   1d230:	0f 90       	pop	r0
   1d232:	08 95       	ret

0001d234 <help>:
   1d234:	53 df       	rcall	.-346    	; 0x1d0dc <copyright>
   1d236:	80 e0       	ldi	r24, 0x00	; 0
   1d238:	90 e0       	ldi	r25, 0x00	; 0
   1d23a:	0e 94 c2 77 	call	0xef84	; 0xef84 <fatfs_help>
   1d23e:	80 e0       	ldi	r24, 0x00	; 0
   1d240:	90 e0       	ldi	r25, 0x00	; 0
   1d242:	0e 94 0a 84 	call	0x10814	; 0x10814 <posix_help>
   1d246:	80 e0       	ldi	r24, 0x00	; 0
   1d248:	90 e0       	ldi	r25, 0x00	; 0
   1d24a:	0e 94 2c c9 	call	0x19258	; 0x19258 <lif_help>
   1d24e:	80 e0       	ldi	r24, 0x00	; 0
   1d250:	90 e0       	ldi	r25, 0x00	; 0
   1d252:	0e 94 31 99 	call	0x13262	; 0x13262 <gpib_help>
   1d256:	84 e6       	ldi	r24, 0x64	; 100
   1d258:	98 e4       	ldi	r25, 0x48	; 72
   1d25a:	1f 92       	push	r1
   1d25c:	9f 93       	push	r25
   1d25e:	8f 93       	push	r24
   1d260:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d264:	0f 90       	pop	r0
   1d266:	0f 90       	pop	r0
   1d268:	0f 90       	pop	r0
   1d26a:	08 95       	ret

0001d26c <task>:
   1d26c:	a4 ee       	ldi	r26, 0xE4	; 228
   1d26e:	b0 e0       	ldi	r27, 0x00	; 0
   1d270:	eb e3       	ldi	r30, 0x3B	; 59
   1d272:	f9 ee       	ldi	r31, 0xE9	; 233
   1d274:	05 c3       	rjmp	.+1546   	; 0x1d880 <__prologue_saves__+0x18>
   1d276:	81 11       	cpse	r24, r1
   1d278:	0e 94 cf 98 	call	0x1319e	; 0x1319e <gpib_task>
   1d27c:	80 e0       	ldi	r24, 0x00	; 0
   1d27e:	0e 94 05 2c 	call	0x580a	; 0x580a <uart_rx_count>
   1d282:	89 2b       	or	r24, r25
   1d284:	09 f4       	brne	.+2      	; 0x1d288 <task+0x1c>
   1d286:	a0 c0       	rjmp	.+320    	; 0x1d3c8 <task+0x15c>
   1d288:	81 e6       	ldi	r24, 0x61	; 97
   1d28a:	98 e4       	ldi	r25, 0x48	; 72
   1d28c:	1f 92       	push	r1
   1d28e:	9f 93       	push	r25
   1d290:	8f 93       	push	r24
   1d292:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d296:	40 91 1a 1d 	lds	r20, 0x1D1A	; 0x801d1a <__iob>
   1d29a:	50 91 1b 1d 	lds	r21, 0x1D1B	; 0x801d1b <__iob+0x1>
   1d29e:	6e e7       	ldi	r22, 0x7E	; 126
   1d2a0:	70 e0       	ldi	r23, 0x00	; 0
   1d2a2:	ce 01       	movw	r24, r28
   1d2a4:	01 96       	adiw	r24, 0x01	; 1
   1d2a6:	0e 94 ed 7a 	call	0xf5da	; 0xf5da <fgets>
   1d2aa:	42 e3       	ldi	r20, 0x32	; 50
   1d2ac:	50 e0       	ldi	r21, 0x00	; 0
   1d2ae:	be 01       	movw	r22, r28
   1d2b0:	6f 57       	subi	r22, 0x7F	; 127
   1d2b2:	7f 4f       	sbci	r23, 0xFF	; 255
   1d2b4:	ce 01       	movw	r24, r28
   1d2b6:	01 96       	adiw	r24, 0x01	; 1
   1d2b8:	0e 94 66 33 	call	0x66cc	; 0x66cc <split_args>
   1d2bc:	8c 01       	movw	r16, r24
   1d2be:	cf 57       	subi	r28, 0x7F	; 127
   1d2c0:	df 4f       	sbci	r29, 0xFF	; 255
   1d2c2:	e8 80       	ld	r14, Y
   1d2c4:	f9 80       	ldd	r15, Y+1	; 0x01
   1d2c6:	c1 58       	subi	r28, 0x81	; 129
   1d2c8:	d0 40       	sbci	r29, 0x00	; 0
   1d2ca:	0f 90       	pop	r0
   1d2cc:	0f 90       	pop	r0
   1d2ce:	0f 90       	pop	r0
   1d2d0:	e1 14       	cp	r14, r1
   1d2d2:	f1 04       	cpc	r15, r1
   1d2d4:	09 f4       	brne	.+2      	; 0x1d2d8 <task+0x6c>
   1d2d6:	78 c0       	rjmp	.+240    	; 0x1d3c8 <task+0x15c>
   1d2d8:	9c 01       	movw	r18, r24
   1d2da:	41 e0       	ldi	r20, 0x01	; 1
   1d2dc:	50 e0       	ldi	r21, 0x00	; 0
   1d2de:	6e e5       	ldi	r22, 0x5E	; 94
   1d2e0:	77 e1       	ldi	r23, 0x17	; 23
   1d2e2:	c7 01       	movw	r24, r14
   1d2e4:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   1d2e8:	89 2b       	or	r24, r25
   1d2ea:	11 f0       	breq	.+4      	; 0x1d2f0 <task+0x84>
   1d2ec:	40 df       	rcall	.-384    	; 0x1d16e <delay_tests>
   1d2ee:	6c c0       	rjmp	.+216    	; 0x1d3c8 <task+0x15c>
   1d2f0:	98 01       	movw	r18, r16
   1d2f2:	41 e0       	ldi	r20, 0x01	; 1
   1d2f4:	50 e0       	ldi	r21, 0x00	; 0
   1d2f6:	6a e6       	ldi	r22, 0x6A	; 106
   1d2f8:	77 e1       	ldi	r23, 0x17	; 23
   1d2fa:	c7 01       	movw	r24, r14
   1d2fc:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   1d300:	89 2b       	or	r24, r25
   1d302:	61 f4       	brne	.+24     	; 0x1d31c <task+0xb0>
   1d304:	98 01       	movw	r18, r16
   1d306:	41 e0       	ldi	r20, 0x01	; 1
   1d308:	50 e0       	ldi	r21, 0x00	; 0
   1d30a:	6f e6       	ldi	r22, 0x6F	; 111
   1d30c:	77 e1       	ldi	r23, 0x17	; 23
   1d30e:	c7 01       	movw	r24, r14
   1d310:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   1d314:	89 2b       	or	r24, r25
   1d316:	29 f0       	breq	.+10     	; 0x1d322 <task+0xb6>
   1d318:	0e 94 09 3c 	call	0x7812	; 0x7812 <setdate>
   1d31c:	0e 94 22 3e 	call	0x7c44	; 0x7c44 <display_clock>
   1d320:	53 c0       	rjmp	.+166    	; 0x1d3c8 <task+0x15c>
   1d322:	98 01       	movw	r18, r16
   1d324:	41 e0       	ldi	r20, 0x01	; 1
   1d326:	50 e0       	ldi	r21, 0x00	; 0
   1d328:	67 e7       	ldi	r22, 0x77	; 119
   1d32a:	77 e1       	ldi	r23, 0x17	; 23
   1d32c:	c7 01       	movw	r24, r14
   1d32e:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   1d332:	89 2b       	or	r24, r25
   1d334:	19 f0       	breq	.+6      	; 0x1d33c <task+0xd0>
   1d336:	0e 94 6f 29 	call	0x52de	; 0x52de <PrintFree>
   1d33a:	46 c0       	rjmp	.+140    	; 0x1d3c8 <task+0x15c>
   1d33c:	98 01       	movw	r18, r16
   1d33e:	41 e0       	ldi	r20, 0x01	; 1
   1d340:	50 e0       	ldi	r21, 0x00	; 0
   1d342:	67 e7       	ldi	r22, 0x77	; 119
   1d344:	76 e1       	ldi	r23, 0x16	; 22
   1d346:	c7 01       	movw	r24, r14
   1d348:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   1d34c:	89 2b       	or	r24, r25
   1d34e:	11 f0       	breq	.+4      	; 0x1d354 <task+0xe8>
   1d350:	71 df       	rcall	.-286    	; 0x1d234 <help>
   1d352:	3a c0       	rjmp	.+116    	; 0x1d3c8 <task+0x15c>
   1d354:	98 01       	movw	r18, r16
   1d356:	41 e0       	ldi	r20, 0x01	; 1
   1d358:	50 e0       	ldi	r21, 0x00	; 0
   1d35a:	6d e7       	ldi	r22, 0x7D	; 125
   1d35c:	76 e1       	ldi	r23, 0x16	; 22
   1d35e:	c7 01       	movw	r24, r14
   1d360:	0e 94 09 33 	call	0x6612	; 0x6612 <MATCHARGS>
   1d364:	89 2b       	or	r24, r25
   1d366:	a1 f7       	brne	.-24     	; 0x1d350 <task+0xe4>
   1d368:	be 01       	movw	r22, r28
   1d36a:	6f 57       	subi	r22, 0x7F	; 127
   1d36c:	7f 4f       	sbci	r23, 0xFF	; 255
   1d36e:	c8 01       	movw	r24, r16
   1d370:	0e 94 4d 99 	call	0x1329a	; 0x1329a <gpib_tests>
   1d374:	89 2b       	or	r24, r25
   1d376:	19 f0       	breq	.+6      	; 0x1d37e <task+0x112>
   1d378:	0e 94 99 94 	call	0x12932	; 0x12932 <gpib_init_devices>
   1d37c:	25 c0       	rjmp	.+74     	; 0x1d3c8 <task+0x15c>
   1d37e:	be 01       	movw	r22, r28
   1d380:	6f 57       	subi	r22, 0x7F	; 127
   1d382:	7f 4f       	sbci	r23, 0xFF	; 255
   1d384:	c8 01       	movw	r24, r16
   1d386:	0e 94 99 89 	call	0x11332	; 0x11332 <posix_tests>
   1d38a:	89 2b       	or	r24, r25
   1d38c:	e9 f4       	brne	.+58     	; 0x1d3c8 <task+0x15c>
   1d38e:	be 01       	movw	r22, r28
   1d390:	6f 57       	subi	r22, 0x7F	; 127
   1d392:	7f 4f       	sbci	r23, 0xFF	; 255
   1d394:	c8 01       	movw	r24, r16
   1d396:	0e 94 dd 78 	call	0xf1ba	; 0xf1ba <fatfs_tests>
   1d39a:	89 2b       	or	r24, r25
   1d39c:	a9 f4       	brne	.+42     	; 0x1d3c8 <task+0x15c>
   1d39e:	be 01       	movw	r22, r28
   1d3a0:	6f 57       	subi	r22, 0x7F	; 127
   1d3a2:	7f 4f       	sbci	r23, 0xFF	; 255
   1d3a4:	c8 01       	movw	r24, r16
   1d3a6:	74 dd       	rcall	.-1304   	; 0x1ce90 <lif_tests>
   1d3a8:	89 2b       	or	r24, r25
   1d3aa:	71 f4       	brne	.+28     	; 0x1d3c8 <task+0x15c>
   1d3ac:	ff 92       	push	r15
   1d3ae:	ef 92       	push	r14
   1d3b0:	85 e5       	ldi	r24, 0x55	; 85
   1d3b2:	98 e4       	ldi	r25, 0x48	; 72
   1d3b4:	1f 92       	push	r1
   1d3b6:	9f 93       	push	r25
   1d3b8:	8f 93       	push	r24
   1d3ba:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d3be:	0f 90       	pop	r0
   1d3c0:	0f 90       	pop	r0
   1d3c2:	0f 90       	pop	r0
   1d3c4:	0f 90       	pop	r0
   1d3c6:	0f 90       	pop	r0
   1d3c8:	cc 51       	subi	r28, 0x1C	; 28
   1d3ca:	df 4f       	sbci	r29, 0xFF	; 255
   1d3cc:	e6 e0       	ldi	r30, 0x06	; 6
   1d3ce:	74 c2       	rjmp	.+1256   	; 0x1d8b8 <__epilogue_restores__+0x18>

0001d3d0 <main>:
   1d3d0:	a8 e0       	ldi	r26, 0x08	; 8
   1d3d2:	b0 e0       	ldi	r27, 0x00	; 0
   1d3d4:	ed ee       	ldi	r30, 0xED	; 237
   1d3d6:	f9 ee       	ldi	r31, 0xE9	; 233
   1d3d8:	52 c2       	rjmp	.+1188   	; 0x1d87e <__prologue_saves__+0x16>
   1d3da:	0e 94 c9 8d 	call	0x11b92	; 0x11b92 <gpib_bus_init>
   1d3de:	0e 94 85 36 	call	0x6d0a	; 0x6d0a <init_timers>
   1d3e2:	40 e0       	ldi	r20, 0x00	; 0
   1d3e4:	52 ec       	ldi	r21, 0xC2	; 194
   1d3e6:	61 e0       	ldi	r22, 0x01	; 1
   1d3e8:	70 e0       	ldi	r23, 0x00	; 0
   1d3ea:	80 e0       	ldi	r24, 0x00	; 0
   1d3ec:	0e 94 74 2b 	call	0x56e8	; 0x56e8 <uart_init>
   1d3f0:	06 2f       	mov	r16, r22
   1d3f2:	f7 2e       	mov	r15, r23
   1d3f4:	e8 2e       	mov	r14, r24
   1d3f6:	d9 2e       	mov	r13, r25
   1d3f8:	68 ec       	ldi	r22, 0xC8	; 200
   1d3fa:	70 e0       	ldi	r23, 0x00	; 0
   1d3fc:	80 e0       	ldi	r24, 0x00	; 0
   1d3fe:	90 e0       	ldi	r25, 0x00	; 0
   1d400:	0e 94 92 2a 	call	0x5524	; 0x5524 <delayms>
   1d404:	0e 94 df 31 	call	0x63be	; 0x63be <sep>
   1d408:	8e e4       	ldi	r24, 0x4E	; 78
   1d40a:	98 e4       	ldi	r25, 0x48	; 72
   1d40c:	1f 92       	push	r1
   1d40e:	9f 93       	push	r25
   1d410:	8f 93       	push	r24
   1d412:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d416:	11 e0       	ldi	r17, 0x01	; 1
   1d418:	1f 93       	push	r17
   1d41a:	81 e3       	ldi	r24, 0x31	; 49
   1d41c:	8f 93       	push	r24
   1d41e:	8d e2       	ldi	r24, 0x2D	; 45
   1d420:	8f 93       	push	r24
   1d422:	1f 92       	push	r1
   1d424:	8d e3       	ldi	r24, 0x3D	; 61
   1d426:	98 e4       	ldi	r25, 0x48	; 72
   1d428:	1f 92       	push	r1
   1d42a:	9f 93       	push	r25
   1d42c:	8f 93       	push	r24
   1d42e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d432:	df 92       	push	r13
   1d434:	ef 92       	push	r14
   1d436:	ff 92       	push	r15
   1d438:	0f 93       	push	r16
   1d43a:	1f 92       	push	r1
   1d43c:	1f 93       	push	r17
   1d43e:	82 ec       	ldi	r24, 0xC2	; 194
   1d440:	8f 93       	push	r24
   1d442:	1f 92       	push	r1
   1d444:	86 e1       	ldi	r24, 0x16	; 22
   1d446:	98 e4       	ldi	r25, 0x48	; 72
   1d448:	1f 92       	push	r1
   1d44a:	9f 93       	push	r25
   1d44c:	8f 93       	push	r24
   1d44e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d452:	0e 94 df 31 	call	0x63be	; 0x63be <sep>
   1d456:	87 ef       	ldi	r24, 0xF7	; 247
   1d458:	97 e4       	ldi	r25, 0x47	; 71
   1d45a:	1f 92       	push	r1
   1d45c:	9f 93       	push	r25
   1d45e:	8f 93       	push	r24
   1d460:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d464:	8a ed       	ldi	r24, 0xDA	; 218
   1d466:	97 e4       	ldi	r25, 0x47	; 71
   1d468:	1f 92       	push	r1
   1d46a:	9f 93       	push	r25
   1d46c:	8f 93       	push	r24
   1d46e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d472:	8a ec       	ldi	r24, 0xCA	; 202
   1d474:	97 e4       	ldi	r25, 0x47	; 71
   1d476:	1f 92       	push	r1
   1d478:	9f 93       	push	r25
   1d47a:	8f 93       	push	r24
   1d47c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d480:	83 ea       	ldi	r24, 0xA3	; 163
   1d482:	97 e4       	ldi	r25, 0x47	; 71
   1d484:	1f 92       	push	r1
   1d486:	9f 93       	push	r25
   1d488:	8f 93       	push	r24
   1d48a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d48e:	0f b6       	in	r0, 0x3f	; 63
   1d490:	f8 94       	cli
   1d492:	de bf       	out	0x3e, r29	; 62
   1d494:	0f be       	out	0x3f, r0	; 63
   1d496:	cd bf       	out	0x3d, r28	; 61
   1d498:	8b ea       	ldi	r24, 0xAB	; 171
   1d49a:	96 e1       	ldi	r25, 0x16	; 22
   1d49c:	9f 93       	push	r25
   1d49e:	8f 93       	push	r24
   1d4a0:	89 e8       	ldi	r24, 0x89	; 137
   1d4a2:	97 e4       	ldi	r25, 0x47	; 71
   1d4a4:	1f 92       	push	r1
   1d4a6:	9f 93       	push	r25
   1d4a8:	8f 93       	push	r24
   1d4aa:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d4ae:	8f ec       	ldi	r24, 0xCF	; 207
   1d4b0:	96 e1       	ldi	r25, 0x16	; 22
   1d4b2:	9f 93       	push	r25
   1d4b4:	8f 93       	push	r24
   1d4b6:	8f e6       	ldi	r24, 0x6F	; 111
   1d4b8:	97 e4       	ldi	r25, 0x47	; 71
   1d4ba:	1f 92       	push	r1
   1d4bc:	9f 93       	push	r25
   1d4be:	8f 93       	push	r24
   1d4c0:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d4c4:	0e 94 df 31 	call	0x63be	; 0x63be <sep>
   1d4c8:	0e 94 6f 29 	call	0x52de	; 0x52de <PrintFree>
   1d4cc:	0e 94 df 31 	call	0x63be	; 0x63be <sep>
   1d4d0:	68 ec       	ldi	r22, 0xC8	; 200
   1d4d2:	70 e0       	ldi	r23, 0x00	; 0
   1d4d4:	80 e0       	ldi	r24, 0x00	; 0
   1d4d6:	90 e0       	ldi	r25, 0x00	; 0
   1d4d8:	0e 94 92 2a 	call	0x5524	; 0x5524 <delayms>
   1d4dc:	89 e5       	ldi	r24, 0x59	; 89
   1d4de:	97 e4       	ldi	r25, 0x47	; 71
   1d4e0:	1f 92       	push	r1
   1d4e2:	9f 93       	push	r25
   1d4e4:	8f 93       	push	r24
   1d4e6:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d4ea:	4b e0       	ldi	r20, 0x0B	; 11
   1d4ec:	50 e0       	ldi	r21, 0x00	; 0
   1d4ee:	60 e2       	ldi	r22, 0x20	; 32
   1d4f0:	71 ea       	ldi	r23, 0xA1	; 161
   1d4f2:	87 e0       	ldi	r24, 0x07	; 7
   1d4f4:	90 e0       	ldi	r25, 0x00	; 0
   1d4f6:	0e 94 eb 28 	call	0x51d6	; 0x51d6 <spi_init>
   1d4fa:	83 e4       	ldi	r24, 0x43	; 67
   1d4fc:	97 e4       	ldi	r25, 0x47	; 71
   1d4fe:	1f 92       	push	r1
   1d500:	9f 93       	push	r25
   1d502:	8f 93       	push	r24
   1d504:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d508:	61 e1       	ldi	r22, 0x11	; 17
   1d50a:	81 e0       	ldi	r24, 0x01	; 1
   1d50c:	0e 94 91 2d 	call	0x5b22	; 0x5b22 <TWI_Init>
   1d510:	0e 94 df 31 	call	0x63be	; 0x63be <sep>
   1d514:	81 e3       	ldi	r24, 0x31	; 49
   1d516:	97 e4       	ldi	r25, 0x47	; 71
   1d518:	1f 92       	push	r1
   1d51a:	9f 93       	push	r25
   1d51c:	8f 93       	push	r24
   1d51e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d522:	0e 94 42 36 	call	0x6c84	; 0x6c84 <clock_clear>
   1d526:	82 e2       	ldi	r24, 0x22	; 34
   1d528:	97 e4       	ldi	r25, 0x47	; 71
   1d52a:	1f 92       	push	r1
   1d52c:	9f 93       	push	r25
   1d52e:	8f 93       	push	r24
   1d530:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d534:	be 01       	movw	r22, r28
   1d536:	6f 5f       	subi	r22, 0xFF	; 255
   1d538:	7f 4f       	sbci	r23, 0xFF	; 255
   1d53a:	80 e0       	ldi	r24, 0x00	; 0
   1d53c:	90 e0       	ldi	r25, 0x00	; 0
   1d53e:	0e 94 dd 36 	call	0x6dba	; 0x6dba <clock_getres>
   1d542:	88 85       	ldd	r24, Y+8	; 0x08
   1d544:	8f 93       	push	r24
   1d546:	8f 81       	ldd	r24, Y+7	; 0x07
   1d548:	8f 93       	push	r24
   1d54a:	8e 81       	ldd	r24, Y+6	; 0x06
   1d54c:	8f 93       	push	r24
   1d54e:	8d 81       	ldd	r24, Y+5	; 0x05
   1d550:	8f 93       	push	r24
   1d552:	85 e0       	ldi	r24, 0x05	; 5
   1d554:	97 e4       	ldi	r25, 0x47	; 71
   1d556:	1f 92       	push	r1
   1d558:	9f 93       	push	r25
   1d55a:	8f 93       	push	r24
   1d55c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d560:	8c e2       	ldi	r24, 0x2C	; 44
   1d562:	91 e0       	ldi	r25, 0x01	; 1
   1d564:	0e 94 ab 3d 	call	0x7b56	; 0x7b56 <initialize_clock>
   1d568:	0e 94 22 3e 	call	0x7c44	; 0x7c44 <display_clock>
   1d56c:	0e 94 df 31 	call	0x63be	; 0x63be <sep>
   1d570:	87 ee       	ldi	r24, 0xE7	; 231
   1d572:	96 e4       	ldi	r25, 0x46	; 70
   1d574:	1f 92       	push	r1
   1d576:	9f 93       	push	r25
   1d578:	8f 93       	push	r24
   1d57a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d57e:	0f b6       	in	r0, 0x3f	; 63
   1d580:	f8 94       	cli
   1d582:	de bf       	out	0x3e, r29	; 62
   1d584:	0f be       	out	0x3f, r0	; 63
   1d586:	cd bf       	out	0x3d, r28	; 61
   1d588:	84 ee       	ldi	r24, 0xE4	; 228
   1d58a:	0e 94 08 31 	call	0x6210	; 0x6210 <LCD_init>
   1d58e:	89 2b       	or	r24, r25
   1d590:	e9 f0       	breq	.+58     	; 0x1d5cc <main+0x1fc>
   1d592:	60 e0       	ldi	r22, 0x00	; 0
   1d594:	80 e0       	ldi	r24, 0x00	; 0
   1d596:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <LCD_pos>
   1d59a:	8b e7       	ldi	r24, 0x7B	; 123
   1d59c:	97 e1       	ldi	r25, 0x17	; 23
   1d59e:	9f 93       	push	r25
   1d5a0:	8f 93       	push	r24
   1d5a2:	0e 94 c1 31 	call	0x6382	; 0x6382 <lcd_printf>
   1d5a6:	8a e8       	ldi	r24, 0x8A	; 138
   1d5a8:	97 e1       	ldi	r25, 0x17	; 23
   1d5aa:	9f 93       	push	r25
   1d5ac:	8f 93       	push	r24
   1d5ae:	0e 94 c1 31 	call	0x6382	; 0x6382 <lcd_printf>
   1d5b2:	8a ec       	ldi	r24, 0xCA	; 202
   1d5b4:	96 e4       	ldi	r25, 0x46	; 70
   1d5b6:	1f 92       	push	r1
   1d5b8:	9f 93       	push	r25
   1d5ba:	8f 93       	push	r24
   1d5bc:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d5c0:	0f b6       	in	r0, 0x3f	; 63
   1d5c2:	f8 94       	cli
   1d5c4:	de bf       	out	0x3e, r29	; 62
   1d5c6:	0f be       	out	0x3f, r0	; 63
   1d5c8:	cd bf       	out	0x3d, r28	; 61
   1d5ca:	0a c0       	rjmp	.+20     	; 0x1d5e0 <main+0x210>
   1d5cc:	80 eb       	ldi	r24, 0xB0	; 176
   1d5ce:	96 e4       	ldi	r25, 0x46	; 70
   1d5d0:	1f 92       	push	r1
   1d5d2:	9f 93       	push	r25
   1d5d4:	8f 93       	push	r24
   1d5d6:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d5da:	0f 90       	pop	r0
   1d5dc:	0f 90       	pop	r0
   1d5de:	0f 90       	pop	r0
   1d5e0:	0e 94 df 31 	call	0x63be	; 0x63be <sep>
   1d5e4:	88 e9       	ldi	r24, 0x98	; 152
   1d5e6:	96 e4       	ldi	r25, 0x46	; 70
   1d5e8:	1f 92       	push	r1
   1d5ea:	9f 93       	push	r25
   1d5ec:	8f 93       	push	r24
   1d5ee:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d5f2:	81 e0       	ldi	r24, 0x01	; 1
   1d5f4:	90 e0       	ldi	r25, 0x00	; 0
   1d5f6:	0e 94 16 74 	call	0xe82c	; 0xe82c <mmc_init>
   1d5fa:	87 e8       	ldi	r24, 0x87	; 135
   1d5fc:	96 e4       	ldi	r25, 0x46	; 70
   1d5fe:	1f 92       	push	r1
   1d600:	9f 93       	push	r25
   1d602:	8f 93       	push	r24
   1d604:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d608:	0e 94 df 31 	call	0x63be	; 0x63be <sep>
   1d60c:	0e 94 c9 8d 	call	0x11b92	; 0x11b92 <gpib_bus_init>
   1d610:	81 e7       	ldi	r24, 0x71	; 113
   1d612:	96 e4       	ldi	r25, 0x46	; 70
   1d614:	1f 92       	push	r1
   1d616:	9f 93       	push	r25
   1d618:	8f 93       	push	r24
   1d61a:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d61e:	0e 94 59 b4 	call	0x168b2	; 0x168b2 <printer_init>
   1d622:	8c e5       	ldi	r24, 0x5C	; 92
   1d624:	96 e4       	ldi	r25, 0x46	; 70
   1d626:	1f 92       	push	r1
   1d628:	9f 93       	push	r25
   1d62a:	8f 93       	push	r24
   1d62c:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d630:	0e 94 df 31 	call	0x63be	; 0x63be <sep>
   1d634:	8a e4       	ldi	r24, 0x4A	; 74
   1d636:	96 e4       	ldi	r25, 0x46	; 70
   1d638:	1f 92       	push	r1
   1d63a:	9f 93       	push	r25
   1d63c:	8f 93       	push	r24
   1d63e:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d642:	0e 94 d9 8b 	call	0x117b2	; 0x117b2 <gpib_timer_init>
   1d646:	82 e3       	ldi	r24, 0x32	; 50
   1d648:	96 e4       	ldi	r25, 0x46	; 70
   1d64a:	1f 92       	push	r1
   1d64c:	9f 93       	push	r25
   1d64e:	8f 93       	push	r24
   1d650:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d654:	0e 94 e2 93 	call	0x127c4	; 0x127c4 <gpib_file_init>
   1d658:	8d e1       	ldi	r24, 0x1D	; 29
   1d65a:	96 e4       	ldi	r25, 0x46	; 70
   1d65c:	1f 92       	push	r1
   1d65e:	9f 93       	push	r25
   1d660:	8f 93       	push	r24
   1d662:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d666:	0e 94 f1 8d 	call	0x11be2	; 0x11be2 <gpib_state_init>
   1d66a:	87 e0       	ldi	r24, 0x07	; 7
   1d66c:	96 e4       	ldi	r25, 0x46	; 70
   1d66e:	1f 92       	push	r1
   1d670:	9f 93       	push	r25
   1d672:	8f 93       	push	r24
   1d674:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d678:	0e 94 df 31 	call	0x63be	; 0x63be <sep>
   1d67c:	0e 94 cd c4 	call	0x1899a	; 0x1899a <display_Config>
   1d680:	0e 94 27 c7 	call	0x18e4e	; 0x18e4e <format_drives>
   1d684:	0e 94 df 31 	call	0x63be	; 0x63be <sep>
   1d688:	0e 94 d2 c3 	call	0x187a4	; 0x187a4 <display_Addresses>
   1d68c:	0e 94 df 31 	call	0x63be	; 0x63be <sep>
   1d690:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <debuglevel+0x1>
   1d694:	8f 93       	push	r24
   1d696:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <debuglevel>
   1d69a:	8f 93       	push	r24
   1d69c:	81 ef       	ldi	r24, 0xF1	; 241
   1d69e:	95 e4       	ldi	r25, 0x45	; 69
   1d6a0:	1f 92       	push	r1
   1d6a2:	9f 93       	push	r25
   1d6a4:	8f 93       	push	r24
   1d6a6:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d6aa:	60 e0       	ldi	r22, 0x00	; 0
   1d6ac:	80 e0       	ldi	r24, 0x00	; 0
   1d6ae:	0e 94 d2 30 	call	0x61a4	; 0x61a4 <LCD_pos>
   1d6b2:	82 e0       	ldi	r24, 0x02	; 2
   1d6b4:	0e 94 60 b7 	call	0x16ec0	; 0x16ec0 <count_drive_types>
   1d6b8:	9f 93       	push	r25
   1d6ba:	8f 93       	push	r24
   1d6bc:	88 e9       	ldi	r24, 0x98	; 152
   1d6be:	97 e1       	ldi	r25, 0x17	; 23
   1d6c0:	9f 93       	push	r25
   1d6c2:	8f 93       	push	r24
   1d6c4:	0e 94 c1 31 	call	0x6382	; 0x6382 <lcd_printf>
   1d6c8:	0f b6       	in	r0, 0x3f	; 63
   1d6ca:	f8 94       	cli
   1d6cc:	de bf       	out	0x3e, r29	; 62
   1d6ce:	0f be       	out	0x3f, r0	; 63
   1d6d0:	cd bf       	out	0x3d, r28	; 61
   1d6d2:	81 e0       	ldi	r24, 0x01	; 1
   1d6d4:	0e 94 60 b7 	call	0x16ec0	; 0x16ec0 <count_drive_types>
   1d6d8:	9f 93       	push	r25
   1d6da:	8f 93       	push	r24
   1d6dc:	88 ea       	ldi	r24, 0xA8	; 168
   1d6de:	97 e1       	ldi	r25, 0x17	; 23
   1d6e0:	9f 93       	push	r25
   1d6e2:	8f 93       	push	r24
   1d6e4:	0e 94 c1 31 	call	0x6382	; 0x6382 <lcd_printf>
   1d6e8:	0e 94 df 31 	call	0x63be	; 0x63be <sep>
   1d6ec:	8d ed       	ldi	r24, 0xDD	; 221
   1d6ee:	95 e4       	ldi	r25, 0x45	; 69
   1d6f0:	1f 92       	push	r1
   1d6f2:	9f 93       	push	r25
   1d6f4:	8f 93       	push	r24
   1d6f6:	0e 94 cd 46 	call	0x8d9a	; 0x8d9a <printf_P>
   1d6fa:	0f b6       	in	r0, 0x3f	; 63
   1d6fc:	f8 94       	cli
   1d6fe:	de bf       	out	0x3e, r29	; 62
   1d700:	0f be       	out	0x3f, r0	; 63
   1d702:	cd bf       	out	0x3d, r28	; 61
   1d704:	81 e0       	ldi	r24, 0x01	; 1
   1d706:	b2 dd       	rcall	.-1180   	; 0x1d26c <task>
   1d708:	fd cf       	rjmp	.-6      	; 0x1d704 <main+0x334>

0001d70a <__mulsi3>:
   1d70a:	db 01       	movw	r26, r22
   1d70c:	8f 93       	push	r24
   1d70e:	9f 93       	push	r25
   1d710:	8b d0       	rcall	.+278    	; 0x1d828 <__muluhisi3>
   1d712:	bf 91       	pop	r27
   1d714:	af 91       	pop	r26
   1d716:	a2 9f       	mul	r26, r18
   1d718:	80 0d       	add	r24, r0
   1d71a:	91 1d       	adc	r25, r1
   1d71c:	a3 9f       	mul	r26, r19
   1d71e:	90 0d       	add	r25, r0
   1d720:	b2 9f       	mul	r27, r18
   1d722:	90 0d       	add	r25, r0
   1d724:	11 24       	eor	r1, r1
   1d726:	08 95       	ret

0001d728 <__udivmodqi4>:
   1d728:	99 1b       	sub	r25, r25
   1d72a:	79 e0       	ldi	r23, 0x09	; 9
   1d72c:	04 c0       	rjmp	.+8      	; 0x1d736 <__udivmodqi4_ep>

0001d72e <__udivmodqi4_loop>:
   1d72e:	99 1f       	adc	r25, r25
   1d730:	96 17       	cp	r25, r22
   1d732:	08 f0       	brcs	.+2      	; 0x1d736 <__udivmodqi4_ep>
   1d734:	96 1b       	sub	r25, r22

0001d736 <__udivmodqi4_ep>:
   1d736:	88 1f       	adc	r24, r24
   1d738:	7a 95       	dec	r23
   1d73a:	c9 f7       	brne	.-14     	; 0x1d72e <__udivmodqi4_loop>
   1d73c:	80 95       	com	r24
   1d73e:	08 95       	ret

0001d740 <__udivmodhi4>:
   1d740:	aa 1b       	sub	r26, r26
   1d742:	bb 1b       	sub	r27, r27
   1d744:	51 e1       	ldi	r21, 0x11	; 17
   1d746:	07 c0       	rjmp	.+14     	; 0x1d756 <__udivmodhi4_ep>

0001d748 <__udivmodhi4_loop>:
   1d748:	aa 1f       	adc	r26, r26
   1d74a:	bb 1f       	adc	r27, r27
   1d74c:	a6 17       	cp	r26, r22
   1d74e:	b7 07       	cpc	r27, r23
   1d750:	10 f0       	brcs	.+4      	; 0x1d756 <__udivmodhi4_ep>
   1d752:	a6 1b       	sub	r26, r22
   1d754:	b7 0b       	sbc	r27, r23

0001d756 <__udivmodhi4_ep>:
   1d756:	88 1f       	adc	r24, r24
   1d758:	99 1f       	adc	r25, r25
   1d75a:	5a 95       	dec	r21
   1d75c:	a9 f7       	brne	.-22     	; 0x1d748 <__udivmodhi4_loop>
   1d75e:	80 95       	com	r24
   1d760:	90 95       	com	r25
   1d762:	bc 01       	movw	r22, r24
   1d764:	cd 01       	movw	r24, r26
   1d766:	08 95       	ret

0001d768 <__divmodhi4>:
   1d768:	97 fb       	bst	r25, 7
   1d76a:	07 2e       	mov	r0, r23
   1d76c:	16 f4       	brtc	.+4      	; 0x1d772 <__divmodhi4+0xa>
   1d76e:	00 94       	com	r0
   1d770:	06 d0       	rcall	.+12     	; 0x1d77e <__divmodhi4_neg1>
   1d772:	77 fd       	sbrc	r23, 7
   1d774:	08 d0       	rcall	.+16     	; 0x1d786 <__divmodhi4_neg2>
   1d776:	e4 df       	rcall	.-56     	; 0x1d740 <__udivmodhi4>
   1d778:	07 fc       	sbrc	r0, 7
   1d77a:	05 d0       	rcall	.+10     	; 0x1d786 <__divmodhi4_neg2>
   1d77c:	3e f4       	brtc	.+14     	; 0x1d78c <__divmodhi4_exit>

0001d77e <__divmodhi4_neg1>:
   1d77e:	90 95       	com	r25
   1d780:	81 95       	neg	r24
   1d782:	9f 4f       	sbci	r25, 0xFF	; 255
   1d784:	08 95       	ret

0001d786 <__divmodhi4_neg2>:
   1d786:	70 95       	com	r23
   1d788:	61 95       	neg	r22
   1d78a:	7f 4f       	sbci	r23, 0xFF	; 255

0001d78c <__divmodhi4_exit>:
   1d78c:	08 95       	ret

0001d78e <__udivmodsi4>:
   1d78e:	a1 e2       	ldi	r26, 0x21	; 33
   1d790:	1a 2e       	mov	r1, r26
   1d792:	aa 1b       	sub	r26, r26
   1d794:	bb 1b       	sub	r27, r27
   1d796:	fd 01       	movw	r30, r26
   1d798:	0d c0       	rjmp	.+26     	; 0x1d7b4 <__udivmodsi4_ep>

0001d79a <__udivmodsi4_loop>:
   1d79a:	aa 1f       	adc	r26, r26
   1d79c:	bb 1f       	adc	r27, r27
   1d79e:	ee 1f       	adc	r30, r30
   1d7a0:	ff 1f       	adc	r31, r31
   1d7a2:	a2 17       	cp	r26, r18
   1d7a4:	b3 07       	cpc	r27, r19
   1d7a6:	e4 07       	cpc	r30, r20
   1d7a8:	f5 07       	cpc	r31, r21
   1d7aa:	20 f0       	brcs	.+8      	; 0x1d7b4 <__udivmodsi4_ep>
   1d7ac:	a2 1b       	sub	r26, r18
   1d7ae:	b3 0b       	sbc	r27, r19
   1d7b0:	e4 0b       	sbc	r30, r20
   1d7b2:	f5 0b       	sbc	r31, r21

0001d7b4 <__udivmodsi4_ep>:
   1d7b4:	66 1f       	adc	r22, r22
   1d7b6:	77 1f       	adc	r23, r23
   1d7b8:	88 1f       	adc	r24, r24
   1d7ba:	99 1f       	adc	r25, r25
   1d7bc:	1a 94       	dec	r1
   1d7be:	69 f7       	brne	.-38     	; 0x1d79a <__udivmodsi4_loop>
   1d7c0:	60 95       	com	r22
   1d7c2:	70 95       	com	r23
   1d7c4:	80 95       	com	r24
   1d7c6:	90 95       	com	r25
   1d7c8:	9b 01       	movw	r18, r22
   1d7ca:	ac 01       	movw	r20, r24
   1d7cc:	bd 01       	movw	r22, r26
   1d7ce:	cf 01       	movw	r24, r30
   1d7d0:	08 95       	ret

0001d7d2 <__divmodsi4>:
   1d7d2:	05 2e       	mov	r0, r21
   1d7d4:	97 fb       	bst	r25, 7
   1d7d6:	16 f4       	brtc	.+4      	; 0x1d7dc <__divmodsi4+0xa>
   1d7d8:	00 94       	com	r0
   1d7da:	0f d0       	rcall	.+30     	; 0x1d7fa <__negsi2>
   1d7dc:	57 fd       	sbrc	r21, 7
   1d7de:	05 d0       	rcall	.+10     	; 0x1d7ea <__divmodsi4_neg2>
   1d7e0:	d6 df       	rcall	.-84     	; 0x1d78e <__udivmodsi4>
   1d7e2:	07 fc       	sbrc	r0, 7
   1d7e4:	02 d0       	rcall	.+4      	; 0x1d7ea <__divmodsi4_neg2>
   1d7e6:	46 f4       	brtc	.+16     	; 0x1d7f8 <__divmodsi4_exit>
   1d7e8:	08 c0       	rjmp	.+16     	; 0x1d7fa <__negsi2>

0001d7ea <__divmodsi4_neg2>:
   1d7ea:	50 95       	com	r21
   1d7ec:	40 95       	com	r20
   1d7ee:	30 95       	com	r19
   1d7f0:	21 95       	neg	r18
   1d7f2:	3f 4f       	sbci	r19, 0xFF	; 255
   1d7f4:	4f 4f       	sbci	r20, 0xFF	; 255
   1d7f6:	5f 4f       	sbci	r21, 0xFF	; 255

0001d7f8 <__divmodsi4_exit>:
   1d7f8:	08 95       	ret

0001d7fa <__negsi2>:
   1d7fa:	90 95       	com	r25
   1d7fc:	80 95       	com	r24
   1d7fe:	70 95       	com	r23
   1d800:	61 95       	neg	r22
   1d802:	7f 4f       	sbci	r23, 0xFF	; 255
   1d804:	8f 4f       	sbci	r24, 0xFF	; 255
   1d806:	9f 4f       	sbci	r25, 0xFF	; 255
   1d808:	08 95       	ret

0001d80a <__tablejump2__>:
   1d80a:	ee 0f       	add	r30, r30
   1d80c:	ff 1f       	adc	r31, r31
   1d80e:	00 24       	eor	r0, r0
   1d810:	00 1c       	adc	r0, r0
   1d812:	0b be       	out	0x3b, r0	; 59
   1d814:	07 90       	elpm	r0, Z+
   1d816:	f6 91       	elpm	r31, Z
   1d818:	e0 2d       	mov	r30, r0
   1d81a:	09 94       	ijmp

0001d81c <__usmulhisi3>:
   1d81c:	6f d0       	rcall	.+222    	; 0x1d8fc <__umulhisi3>

0001d81e <__usmulhisi3_tail>:
   1d81e:	b7 ff       	sbrs	r27, 7
   1d820:	08 95       	ret
   1d822:	82 1b       	sub	r24, r18
   1d824:	93 0b       	sbc	r25, r19
   1d826:	08 95       	ret

0001d828 <__muluhisi3>:
   1d828:	69 d0       	rcall	.+210    	; 0x1d8fc <__umulhisi3>
   1d82a:	a5 9f       	mul	r26, r21
   1d82c:	90 0d       	add	r25, r0
   1d82e:	b4 9f       	mul	r27, r20
   1d830:	90 0d       	add	r25, r0
   1d832:	a4 9f       	mul	r26, r20
   1d834:	80 0d       	add	r24, r0
   1d836:	91 1d       	adc	r25, r1
   1d838:	11 24       	eor	r1, r1
   1d83a:	08 95       	ret

0001d83c <__mulshisi3>:
   1d83c:	b7 ff       	sbrs	r27, 7
   1d83e:	f4 cf       	rjmp	.-24     	; 0x1d828 <__muluhisi3>

0001d840 <__mulohisi3>:
   1d840:	f3 df       	rcall	.-26     	; 0x1d828 <__muluhisi3>
   1d842:	82 1b       	sub	r24, r18
   1d844:	93 0b       	sbc	r25, r19
   1d846:	08 95       	ret

0001d848 <__negdi2>:
   1d848:	60 95       	com	r22
   1d84a:	70 95       	com	r23
   1d84c:	80 95       	com	r24
   1d84e:	90 95       	com	r25
   1d850:	30 95       	com	r19
   1d852:	40 95       	com	r20
   1d854:	50 95       	com	r21
   1d856:	21 95       	neg	r18
   1d858:	3f 4f       	sbci	r19, 0xFF	; 255
   1d85a:	4f 4f       	sbci	r20, 0xFF	; 255
   1d85c:	5f 4f       	sbci	r21, 0xFF	; 255
   1d85e:	6f 4f       	sbci	r22, 0xFF	; 255
   1d860:	7f 4f       	sbci	r23, 0xFF	; 255
   1d862:	8f 4f       	sbci	r24, 0xFF	; 255
   1d864:	9f 4f       	sbci	r25, 0xFF	; 255
   1d866:	08 95       	ret

0001d868 <__prologue_saves__>:
   1d868:	2f 92       	push	r2
   1d86a:	3f 92       	push	r3
   1d86c:	4f 92       	push	r4
   1d86e:	5f 92       	push	r5
   1d870:	6f 92       	push	r6
   1d872:	7f 92       	push	r7
   1d874:	8f 92       	push	r8
   1d876:	9f 92       	push	r9
   1d878:	af 92       	push	r10
   1d87a:	bf 92       	push	r11
   1d87c:	cf 92       	push	r12
   1d87e:	df 92       	push	r13
   1d880:	ef 92       	push	r14
   1d882:	ff 92       	push	r15
   1d884:	0f 93       	push	r16
   1d886:	1f 93       	push	r17
   1d888:	cf 93       	push	r28
   1d88a:	df 93       	push	r29
   1d88c:	cd b7       	in	r28, 0x3d	; 61
   1d88e:	de b7       	in	r29, 0x3e	; 62
   1d890:	ca 1b       	sub	r28, r26
   1d892:	db 0b       	sbc	r29, r27
   1d894:	0f b6       	in	r0, 0x3f	; 63
   1d896:	f8 94       	cli
   1d898:	de bf       	out	0x3e, r29	; 62
   1d89a:	0f be       	out	0x3f, r0	; 63
   1d89c:	cd bf       	out	0x3d, r28	; 61
   1d89e:	09 94       	ijmp

0001d8a0 <__epilogue_restores__>:
   1d8a0:	2a 88       	ldd	r2, Y+18	; 0x12
   1d8a2:	39 88       	ldd	r3, Y+17	; 0x11
   1d8a4:	48 88       	ldd	r4, Y+16	; 0x10
   1d8a6:	5f 84       	ldd	r5, Y+15	; 0x0f
   1d8a8:	6e 84       	ldd	r6, Y+14	; 0x0e
   1d8aa:	7d 84       	ldd	r7, Y+13	; 0x0d
   1d8ac:	8c 84       	ldd	r8, Y+12	; 0x0c
   1d8ae:	9b 84       	ldd	r9, Y+11	; 0x0b
   1d8b0:	aa 84       	ldd	r10, Y+10	; 0x0a
   1d8b2:	b9 84       	ldd	r11, Y+9	; 0x09
   1d8b4:	c8 84       	ldd	r12, Y+8	; 0x08
   1d8b6:	df 80       	ldd	r13, Y+7	; 0x07
   1d8b8:	ee 80       	ldd	r14, Y+6	; 0x06
   1d8ba:	fd 80       	ldd	r15, Y+5	; 0x05
   1d8bc:	0c 81       	ldd	r16, Y+4	; 0x04
   1d8be:	1b 81       	ldd	r17, Y+3	; 0x03
   1d8c0:	aa 81       	ldd	r26, Y+2	; 0x02
   1d8c2:	b9 81       	ldd	r27, Y+1	; 0x01
   1d8c4:	ce 0f       	add	r28, r30
   1d8c6:	d1 1d       	adc	r29, r1
   1d8c8:	0f b6       	in	r0, 0x3f	; 63
   1d8ca:	f8 94       	cli
   1d8cc:	de bf       	out	0x3e, r29	; 62
   1d8ce:	0f be       	out	0x3f, r0	; 63
   1d8d0:	cd bf       	out	0x3d, r28	; 61
   1d8d2:	ed 01       	movw	r28, r26
   1d8d4:	08 95       	ret

0001d8d6 <__xload_1>:
   1d8d6:	57 fd       	sbrc	r21, 7
   1d8d8:	03 c0       	rjmp	.+6      	; 0x1d8e0 <__xload_1+0xa>
   1d8da:	5b bf       	out	0x3b, r21	; 59
   1d8dc:	67 91       	elpm	r22, Z+
   1d8de:	08 95       	ret
   1d8e0:	60 81       	ld	r22, Z
   1d8e2:	08 95       	ret

0001d8e4 <__cmpdi2_s8>:
   1d8e4:	00 24       	eor	r0, r0
   1d8e6:	a7 fd       	sbrc	r26, 7
   1d8e8:	00 94       	com	r0
   1d8ea:	2a 17       	cp	r18, r26
   1d8ec:	30 05       	cpc	r19, r0
   1d8ee:	40 05       	cpc	r20, r0
   1d8f0:	50 05       	cpc	r21, r0
   1d8f2:	60 05       	cpc	r22, r0
   1d8f4:	70 05       	cpc	r23, r0
   1d8f6:	80 05       	cpc	r24, r0
   1d8f8:	90 05       	cpc	r25, r0
   1d8fa:	08 95       	ret

0001d8fc <__umulhisi3>:
   1d8fc:	a2 9f       	mul	r26, r18
   1d8fe:	b0 01       	movw	r22, r0
   1d900:	b3 9f       	mul	r27, r19
   1d902:	c0 01       	movw	r24, r0
   1d904:	a3 9f       	mul	r26, r19
   1d906:	70 0d       	add	r23, r0
   1d908:	81 1d       	adc	r24, r1
   1d90a:	11 24       	eor	r1, r1
   1d90c:	91 1d       	adc	r25, r1
   1d90e:	b2 9f       	mul	r27, r18
   1d910:	70 0d       	add	r23, r0
   1d912:	81 1d       	adc	r24, r1
   1d914:	11 24       	eor	r1, r1
   1d916:	91 1d       	adc	r25, r1
   1d918:	08 95       	ret

0001d91a <__subsf3>:
   1d91a:	50 58       	subi	r21, 0x80	; 128

0001d91c <__addsf3>:
   1d91c:	bb 27       	eor	r27, r27
   1d91e:	aa 27       	eor	r26, r26
   1d920:	0e d0       	rcall	.+28     	; 0x1d93e <__addsf3x>
   1d922:	75 c1       	rjmp	.+746    	; 0x1dc0e <__fp_round>
   1d924:	66 d1       	rcall	.+716    	; 0x1dbf2 <__fp_pscA>
   1d926:	30 f0       	brcs	.+12     	; 0x1d934 <__addsf3+0x18>
   1d928:	6b d1       	rcall	.+726    	; 0x1dc00 <__fp_pscB>
   1d92a:	20 f0       	brcs	.+8      	; 0x1d934 <__addsf3+0x18>
   1d92c:	31 f4       	brne	.+12     	; 0x1d93a <__addsf3+0x1e>
   1d92e:	9f 3f       	cpi	r25, 0xFF	; 255
   1d930:	11 f4       	brne	.+4      	; 0x1d936 <__addsf3+0x1a>
   1d932:	1e f4       	brtc	.+6      	; 0x1d93a <__addsf3+0x1e>
   1d934:	5b c1       	rjmp	.+694    	; 0x1dbec <__fp_nan>
   1d936:	0e f4       	brtc	.+2      	; 0x1d93a <__addsf3+0x1e>
   1d938:	e0 95       	com	r30
   1d93a:	e7 fb       	bst	r30, 7
   1d93c:	51 c1       	rjmp	.+674    	; 0x1dbe0 <__fp_inf>

0001d93e <__addsf3x>:
   1d93e:	e9 2f       	mov	r30, r25
   1d940:	77 d1       	rcall	.+750    	; 0x1dc30 <__fp_split3>
   1d942:	80 f3       	brcs	.-32     	; 0x1d924 <__addsf3+0x8>
   1d944:	ba 17       	cp	r27, r26
   1d946:	62 07       	cpc	r22, r18
   1d948:	73 07       	cpc	r23, r19
   1d94a:	84 07       	cpc	r24, r20
   1d94c:	95 07       	cpc	r25, r21
   1d94e:	18 f0       	brcs	.+6      	; 0x1d956 <__addsf3x+0x18>
   1d950:	71 f4       	brne	.+28     	; 0x1d96e <__addsf3x+0x30>
   1d952:	9e f5       	brtc	.+102    	; 0x1d9ba <__addsf3x+0x7c>
   1d954:	8f c1       	rjmp	.+798    	; 0x1dc74 <__fp_zero>
   1d956:	0e f4       	brtc	.+2      	; 0x1d95a <__addsf3x+0x1c>
   1d958:	e0 95       	com	r30
   1d95a:	0b 2e       	mov	r0, r27
   1d95c:	ba 2f       	mov	r27, r26
   1d95e:	a0 2d       	mov	r26, r0
   1d960:	0b 01       	movw	r0, r22
   1d962:	b9 01       	movw	r22, r18
   1d964:	90 01       	movw	r18, r0
   1d966:	0c 01       	movw	r0, r24
   1d968:	ca 01       	movw	r24, r20
   1d96a:	a0 01       	movw	r20, r0
   1d96c:	11 24       	eor	r1, r1
   1d96e:	ff 27       	eor	r31, r31
   1d970:	59 1b       	sub	r21, r25
   1d972:	99 f0       	breq	.+38     	; 0x1d99a <__addsf3x+0x5c>
   1d974:	59 3f       	cpi	r21, 0xF9	; 249
   1d976:	50 f4       	brcc	.+20     	; 0x1d98c <__addsf3x+0x4e>
   1d978:	50 3e       	cpi	r21, 0xE0	; 224
   1d97a:	68 f1       	brcs	.+90     	; 0x1d9d6 <__addsf3x+0x98>
   1d97c:	1a 16       	cp	r1, r26
   1d97e:	f0 40       	sbci	r31, 0x00	; 0
   1d980:	a2 2f       	mov	r26, r18
   1d982:	23 2f       	mov	r18, r19
   1d984:	34 2f       	mov	r19, r20
   1d986:	44 27       	eor	r20, r20
   1d988:	58 5f       	subi	r21, 0xF8	; 248
   1d98a:	f3 cf       	rjmp	.-26     	; 0x1d972 <__addsf3x+0x34>
   1d98c:	46 95       	lsr	r20
   1d98e:	37 95       	ror	r19
   1d990:	27 95       	ror	r18
   1d992:	a7 95       	ror	r26
   1d994:	f0 40       	sbci	r31, 0x00	; 0
   1d996:	53 95       	inc	r21
   1d998:	c9 f7       	brne	.-14     	; 0x1d98c <__addsf3x+0x4e>
   1d99a:	7e f4       	brtc	.+30     	; 0x1d9ba <__addsf3x+0x7c>
   1d99c:	1f 16       	cp	r1, r31
   1d99e:	ba 0b       	sbc	r27, r26
   1d9a0:	62 0b       	sbc	r22, r18
   1d9a2:	73 0b       	sbc	r23, r19
   1d9a4:	84 0b       	sbc	r24, r20
   1d9a6:	ba f0       	brmi	.+46     	; 0x1d9d6 <__addsf3x+0x98>
   1d9a8:	91 50       	subi	r25, 0x01	; 1
   1d9aa:	a1 f0       	breq	.+40     	; 0x1d9d4 <__addsf3x+0x96>
   1d9ac:	ff 0f       	add	r31, r31
   1d9ae:	bb 1f       	adc	r27, r27
   1d9b0:	66 1f       	adc	r22, r22
   1d9b2:	77 1f       	adc	r23, r23
   1d9b4:	88 1f       	adc	r24, r24
   1d9b6:	c2 f7       	brpl	.-16     	; 0x1d9a8 <__addsf3x+0x6a>
   1d9b8:	0e c0       	rjmp	.+28     	; 0x1d9d6 <__addsf3x+0x98>
   1d9ba:	ba 0f       	add	r27, r26
   1d9bc:	62 1f       	adc	r22, r18
   1d9be:	73 1f       	adc	r23, r19
   1d9c0:	84 1f       	adc	r24, r20
   1d9c2:	48 f4       	brcc	.+18     	; 0x1d9d6 <__addsf3x+0x98>
   1d9c4:	87 95       	ror	r24
   1d9c6:	77 95       	ror	r23
   1d9c8:	67 95       	ror	r22
   1d9ca:	b7 95       	ror	r27
   1d9cc:	f7 95       	ror	r31
   1d9ce:	9e 3f       	cpi	r25, 0xFE	; 254
   1d9d0:	08 f0       	brcs	.+2      	; 0x1d9d4 <__addsf3x+0x96>
   1d9d2:	b3 cf       	rjmp	.-154    	; 0x1d93a <__addsf3+0x1e>
   1d9d4:	93 95       	inc	r25
   1d9d6:	88 0f       	add	r24, r24
   1d9d8:	08 f0       	brcs	.+2      	; 0x1d9dc <__addsf3x+0x9e>
   1d9da:	99 27       	eor	r25, r25
   1d9dc:	ee 0f       	add	r30, r30
   1d9de:	97 95       	ror	r25
   1d9e0:	87 95       	ror	r24
   1d9e2:	08 95       	ret

0001d9e4 <__cmpsf2>:
   1d9e4:	d9 d0       	rcall	.+434    	; 0x1db98 <__fp_cmp>
   1d9e6:	08 f4       	brcc	.+2      	; 0x1d9ea <__cmpsf2+0x6>
   1d9e8:	81 e0       	ldi	r24, 0x01	; 1
   1d9ea:	08 95       	ret

0001d9ec <__divsf3>:
   1d9ec:	0c d0       	rcall	.+24     	; 0x1da06 <__divsf3x>
   1d9ee:	0f c1       	rjmp	.+542    	; 0x1dc0e <__fp_round>
   1d9f0:	07 d1       	rcall	.+526    	; 0x1dc00 <__fp_pscB>
   1d9f2:	40 f0       	brcs	.+16     	; 0x1da04 <__divsf3+0x18>
   1d9f4:	fe d0       	rcall	.+508    	; 0x1dbf2 <__fp_pscA>
   1d9f6:	30 f0       	brcs	.+12     	; 0x1da04 <__divsf3+0x18>
   1d9f8:	21 f4       	brne	.+8      	; 0x1da02 <__divsf3+0x16>
   1d9fa:	5f 3f       	cpi	r21, 0xFF	; 255
   1d9fc:	19 f0       	breq	.+6      	; 0x1da04 <__divsf3+0x18>
   1d9fe:	f0 c0       	rjmp	.+480    	; 0x1dbe0 <__fp_inf>
   1da00:	51 11       	cpse	r21, r1
   1da02:	39 c1       	rjmp	.+626    	; 0x1dc76 <__fp_szero>
   1da04:	f3 c0       	rjmp	.+486    	; 0x1dbec <__fp_nan>

0001da06 <__divsf3x>:
   1da06:	14 d1       	rcall	.+552    	; 0x1dc30 <__fp_split3>
   1da08:	98 f3       	brcs	.-26     	; 0x1d9f0 <__divsf3+0x4>

0001da0a <__divsf3_pse>:
   1da0a:	99 23       	and	r25, r25
   1da0c:	c9 f3       	breq	.-14     	; 0x1da00 <__divsf3+0x14>
   1da0e:	55 23       	and	r21, r21
   1da10:	b1 f3       	breq	.-20     	; 0x1d9fe <__divsf3+0x12>
   1da12:	95 1b       	sub	r25, r21
   1da14:	55 0b       	sbc	r21, r21
   1da16:	bb 27       	eor	r27, r27
   1da18:	aa 27       	eor	r26, r26
   1da1a:	62 17       	cp	r22, r18
   1da1c:	73 07       	cpc	r23, r19
   1da1e:	84 07       	cpc	r24, r20
   1da20:	38 f0       	brcs	.+14     	; 0x1da30 <__divsf3_pse+0x26>
   1da22:	9f 5f       	subi	r25, 0xFF	; 255
   1da24:	5f 4f       	sbci	r21, 0xFF	; 255
   1da26:	22 0f       	add	r18, r18
   1da28:	33 1f       	adc	r19, r19
   1da2a:	44 1f       	adc	r20, r20
   1da2c:	aa 1f       	adc	r26, r26
   1da2e:	a9 f3       	breq	.-22     	; 0x1da1a <__divsf3_pse+0x10>
   1da30:	33 d0       	rcall	.+102    	; 0x1da98 <__divsf3_pse+0x8e>
   1da32:	0e 2e       	mov	r0, r30
   1da34:	3a f0       	brmi	.+14     	; 0x1da44 <__divsf3_pse+0x3a>
   1da36:	e0 e8       	ldi	r30, 0x80	; 128
   1da38:	30 d0       	rcall	.+96     	; 0x1da9a <__divsf3_pse+0x90>
   1da3a:	91 50       	subi	r25, 0x01	; 1
   1da3c:	50 40       	sbci	r21, 0x00	; 0
   1da3e:	e6 95       	lsr	r30
   1da40:	00 1c       	adc	r0, r0
   1da42:	ca f7       	brpl	.-14     	; 0x1da36 <__divsf3_pse+0x2c>
   1da44:	29 d0       	rcall	.+82     	; 0x1da98 <__divsf3_pse+0x8e>
   1da46:	fe 2f       	mov	r31, r30
   1da48:	27 d0       	rcall	.+78     	; 0x1da98 <__divsf3_pse+0x8e>
   1da4a:	66 0f       	add	r22, r22
   1da4c:	77 1f       	adc	r23, r23
   1da4e:	88 1f       	adc	r24, r24
   1da50:	bb 1f       	adc	r27, r27
   1da52:	26 17       	cp	r18, r22
   1da54:	37 07       	cpc	r19, r23
   1da56:	48 07       	cpc	r20, r24
   1da58:	ab 07       	cpc	r26, r27
   1da5a:	b0 e8       	ldi	r27, 0x80	; 128
   1da5c:	09 f0       	breq	.+2      	; 0x1da60 <__divsf3_pse+0x56>
   1da5e:	bb 0b       	sbc	r27, r27
   1da60:	80 2d       	mov	r24, r0
   1da62:	bf 01       	movw	r22, r30
   1da64:	ff 27       	eor	r31, r31
   1da66:	93 58       	subi	r25, 0x83	; 131
   1da68:	5f 4f       	sbci	r21, 0xFF	; 255
   1da6a:	2a f0       	brmi	.+10     	; 0x1da76 <__divsf3_pse+0x6c>
   1da6c:	9e 3f       	cpi	r25, 0xFE	; 254
   1da6e:	51 05       	cpc	r21, r1
   1da70:	68 f0       	brcs	.+26     	; 0x1da8c <__divsf3_pse+0x82>
   1da72:	b6 c0       	rjmp	.+364    	; 0x1dbe0 <__fp_inf>
   1da74:	00 c1       	rjmp	.+512    	; 0x1dc76 <__fp_szero>
   1da76:	5f 3f       	cpi	r21, 0xFF	; 255
   1da78:	ec f3       	brlt	.-6      	; 0x1da74 <__divsf3_pse+0x6a>
   1da7a:	98 3e       	cpi	r25, 0xE8	; 232
   1da7c:	dc f3       	brlt	.-10     	; 0x1da74 <__divsf3_pse+0x6a>
   1da7e:	86 95       	lsr	r24
   1da80:	77 95       	ror	r23
   1da82:	67 95       	ror	r22
   1da84:	b7 95       	ror	r27
   1da86:	f7 95       	ror	r31
   1da88:	9f 5f       	subi	r25, 0xFF	; 255
   1da8a:	c9 f7       	brne	.-14     	; 0x1da7e <__divsf3_pse+0x74>
   1da8c:	88 0f       	add	r24, r24
   1da8e:	91 1d       	adc	r25, r1
   1da90:	96 95       	lsr	r25
   1da92:	87 95       	ror	r24
   1da94:	97 f9       	bld	r25, 7
   1da96:	08 95       	ret
   1da98:	e1 e0       	ldi	r30, 0x01	; 1
   1da9a:	66 0f       	add	r22, r22
   1da9c:	77 1f       	adc	r23, r23
   1da9e:	88 1f       	adc	r24, r24
   1daa0:	bb 1f       	adc	r27, r27
   1daa2:	62 17       	cp	r22, r18
   1daa4:	73 07       	cpc	r23, r19
   1daa6:	84 07       	cpc	r24, r20
   1daa8:	ba 07       	cpc	r27, r26
   1daaa:	20 f0       	brcs	.+8      	; 0x1dab4 <__divsf3_pse+0xaa>
   1daac:	62 1b       	sub	r22, r18
   1daae:	73 0b       	sbc	r23, r19
   1dab0:	84 0b       	sbc	r24, r20
   1dab2:	ba 0b       	sbc	r27, r26
   1dab4:	ee 1f       	adc	r30, r30
   1dab6:	88 f7       	brcc	.-30     	; 0x1da9a <__divsf3_pse+0x90>
   1dab8:	e0 95       	com	r30
   1daba:	08 95       	ret

0001dabc <__fixsfsi>:
   1dabc:	04 d0       	rcall	.+8      	; 0x1dac6 <__fixunssfsi>
   1dabe:	68 94       	set
   1dac0:	b1 11       	cpse	r27, r1
   1dac2:	d9 c0       	rjmp	.+434    	; 0x1dc76 <__fp_szero>
   1dac4:	08 95       	ret

0001dac6 <__fixunssfsi>:
   1dac6:	bc d0       	rcall	.+376    	; 0x1dc40 <__fp_splitA>
   1dac8:	88 f0       	brcs	.+34     	; 0x1daec <__fixunssfsi+0x26>
   1daca:	9f 57       	subi	r25, 0x7F	; 127
   1dacc:	90 f0       	brcs	.+36     	; 0x1daf2 <__fixunssfsi+0x2c>
   1dace:	b9 2f       	mov	r27, r25
   1dad0:	99 27       	eor	r25, r25
   1dad2:	b7 51       	subi	r27, 0x17	; 23
   1dad4:	a0 f0       	brcs	.+40     	; 0x1dafe <__fixunssfsi+0x38>
   1dad6:	d1 f0       	breq	.+52     	; 0x1db0c <__fixunssfsi+0x46>
   1dad8:	66 0f       	add	r22, r22
   1dada:	77 1f       	adc	r23, r23
   1dadc:	88 1f       	adc	r24, r24
   1dade:	99 1f       	adc	r25, r25
   1dae0:	1a f0       	brmi	.+6      	; 0x1dae8 <__fixunssfsi+0x22>
   1dae2:	ba 95       	dec	r27
   1dae4:	c9 f7       	brne	.-14     	; 0x1dad8 <__fixunssfsi+0x12>
   1dae6:	12 c0       	rjmp	.+36     	; 0x1db0c <__fixunssfsi+0x46>
   1dae8:	b1 30       	cpi	r27, 0x01	; 1
   1daea:	81 f0       	breq	.+32     	; 0x1db0c <__fixunssfsi+0x46>
   1daec:	c3 d0       	rcall	.+390    	; 0x1dc74 <__fp_zero>
   1daee:	b1 e0       	ldi	r27, 0x01	; 1
   1daf0:	08 95       	ret
   1daf2:	c0 c0       	rjmp	.+384    	; 0x1dc74 <__fp_zero>
   1daf4:	67 2f       	mov	r22, r23
   1daf6:	78 2f       	mov	r23, r24
   1daf8:	88 27       	eor	r24, r24
   1dafa:	b8 5f       	subi	r27, 0xF8	; 248
   1dafc:	39 f0       	breq	.+14     	; 0x1db0c <__fixunssfsi+0x46>
   1dafe:	b9 3f       	cpi	r27, 0xF9	; 249
   1db00:	cc f3       	brlt	.-14     	; 0x1daf4 <__fixunssfsi+0x2e>
   1db02:	86 95       	lsr	r24
   1db04:	77 95       	ror	r23
   1db06:	67 95       	ror	r22
   1db08:	b3 95       	inc	r27
   1db0a:	d9 f7       	brne	.-10     	; 0x1db02 <__fixunssfsi+0x3c>
   1db0c:	3e f4       	brtc	.+14     	; 0x1db1c <__fixunssfsi+0x56>
   1db0e:	90 95       	com	r25
   1db10:	80 95       	com	r24
   1db12:	70 95       	com	r23
   1db14:	61 95       	neg	r22
   1db16:	7f 4f       	sbci	r23, 0xFF	; 255
   1db18:	8f 4f       	sbci	r24, 0xFF	; 255
   1db1a:	9f 4f       	sbci	r25, 0xFF	; 255
   1db1c:	08 95       	ret

0001db1e <__floatunsisf>:
   1db1e:	e8 94       	clt
   1db20:	09 c0       	rjmp	.+18     	; 0x1db34 <__floatsisf+0x12>

0001db22 <__floatsisf>:
   1db22:	97 fb       	bst	r25, 7
   1db24:	3e f4       	brtc	.+14     	; 0x1db34 <__floatsisf+0x12>
   1db26:	90 95       	com	r25
   1db28:	80 95       	com	r24
   1db2a:	70 95       	com	r23
   1db2c:	61 95       	neg	r22
   1db2e:	7f 4f       	sbci	r23, 0xFF	; 255
   1db30:	8f 4f       	sbci	r24, 0xFF	; 255
   1db32:	9f 4f       	sbci	r25, 0xFF	; 255
   1db34:	99 23       	and	r25, r25
   1db36:	a9 f0       	breq	.+42     	; 0x1db62 <__floatsisf+0x40>
   1db38:	f9 2f       	mov	r31, r25
   1db3a:	96 e9       	ldi	r25, 0x96	; 150
   1db3c:	bb 27       	eor	r27, r27
   1db3e:	93 95       	inc	r25
   1db40:	f6 95       	lsr	r31
   1db42:	87 95       	ror	r24
   1db44:	77 95       	ror	r23
   1db46:	67 95       	ror	r22
   1db48:	b7 95       	ror	r27
   1db4a:	f1 11       	cpse	r31, r1
   1db4c:	f8 cf       	rjmp	.-16     	; 0x1db3e <__floatsisf+0x1c>
   1db4e:	fa f4       	brpl	.+62     	; 0x1db8e <__floatsisf+0x6c>
   1db50:	bb 0f       	add	r27, r27
   1db52:	11 f4       	brne	.+4      	; 0x1db58 <__floatsisf+0x36>
   1db54:	60 ff       	sbrs	r22, 0
   1db56:	1b c0       	rjmp	.+54     	; 0x1db8e <__floatsisf+0x6c>
   1db58:	6f 5f       	subi	r22, 0xFF	; 255
   1db5a:	7f 4f       	sbci	r23, 0xFF	; 255
   1db5c:	8f 4f       	sbci	r24, 0xFF	; 255
   1db5e:	9f 4f       	sbci	r25, 0xFF	; 255
   1db60:	16 c0       	rjmp	.+44     	; 0x1db8e <__floatsisf+0x6c>
   1db62:	88 23       	and	r24, r24
   1db64:	11 f0       	breq	.+4      	; 0x1db6a <__floatsisf+0x48>
   1db66:	96 e9       	ldi	r25, 0x96	; 150
   1db68:	11 c0       	rjmp	.+34     	; 0x1db8c <__floatsisf+0x6a>
   1db6a:	77 23       	and	r23, r23
   1db6c:	21 f0       	breq	.+8      	; 0x1db76 <__floatsisf+0x54>
   1db6e:	9e e8       	ldi	r25, 0x8E	; 142
   1db70:	87 2f       	mov	r24, r23
   1db72:	76 2f       	mov	r23, r22
   1db74:	05 c0       	rjmp	.+10     	; 0x1db80 <__floatsisf+0x5e>
   1db76:	66 23       	and	r22, r22
   1db78:	71 f0       	breq	.+28     	; 0x1db96 <__floatsisf+0x74>
   1db7a:	96 e8       	ldi	r25, 0x86	; 134
   1db7c:	86 2f       	mov	r24, r22
   1db7e:	70 e0       	ldi	r23, 0x00	; 0
   1db80:	60 e0       	ldi	r22, 0x00	; 0
   1db82:	2a f0       	brmi	.+10     	; 0x1db8e <__floatsisf+0x6c>
   1db84:	9a 95       	dec	r25
   1db86:	66 0f       	add	r22, r22
   1db88:	77 1f       	adc	r23, r23
   1db8a:	88 1f       	adc	r24, r24
   1db8c:	da f7       	brpl	.-10     	; 0x1db84 <__floatsisf+0x62>
   1db8e:	88 0f       	add	r24, r24
   1db90:	96 95       	lsr	r25
   1db92:	87 95       	ror	r24
   1db94:	97 f9       	bld	r25, 7
   1db96:	08 95       	ret

0001db98 <__fp_cmp>:
   1db98:	99 0f       	add	r25, r25
   1db9a:	00 08       	sbc	r0, r0
   1db9c:	55 0f       	add	r21, r21
   1db9e:	aa 0b       	sbc	r26, r26
   1dba0:	e0 e8       	ldi	r30, 0x80	; 128
   1dba2:	fe ef       	ldi	r31, 0xFE	; 254
   1dba4:	16 16       	cp	r1, r22
   1dba6:	17 06       	cpc	r1, r23
   1dba8:	e8 07       	cpc	r30, r24
   1dbaa:	f9 07       	cpc	r31, r25
   1dbac:	c0 f0       	brcs	.+48     	; 0x1dbde <__fp_cmp+0x46>
   1dbae:	12 16       	cp	r1, r18
   1dbb0:	13 06       	cpc	r1, r19
   1dbb2:	e4 07       	cpc	r30, r20
   1dbb4:	f5 07       	cpc	r31, r21
   1dbb6:	98 f0       	brcs	.+38     	; 0x1dbde <__fp_cmp+0x46>
   1dbb8:	62 1b       	sub	r22, r18
   1dbba:	73 0b       	sbc	r23, r19
   1dbbc:	84 0b       	sbc	r24, r20
   1dbbe:	95 0b       	sbc	r25, r21
   1dbc0:	39 f4       	brne	.+14     	; 0x1dbd0 <__fp_cmp+0x38>
   1dbc2:	0a 26       	eor	r0, r26
   1dbc4:	61 f0       	breq	.+24     	; 0x1dbde <__fp_cmp+0x46>
   1dbc6:	23 2b       	or	r18, r19
   1dbc8:	24 2b       	or	r18, r20
   1dbca:	25 2b       	or	r18, r21
   1dbcc:	21 f4       	brne	.+8      	; 0x1dbd6 <__fp_cmp+0x3e>
   1dbce:	08 95       	ret
   1dbd0:	0a 26       	eor	r0, r26
   1dbd2:	09 f4       	brne	.+2      	; 0x1dbd6 <__fp_cmp+0x3e>
   1dbd4:	a1 40       	sbci	r26, 0x01	; 1
   1dbd6:	a6 95       	lsr	r26
   1dbd8:	8f ef       	ldi	r24, 0xFF	; 255
   1dbda:	81 1d       	adc	r24, r1
   1dbdc:	81 1d       	adc	r24, r1
   1dbde:	08 95       	ret

0001dbe0 <__fp_inf>:
   1dbe0:	97 f9       	bld	r25, 7
   1dbe2:	9f 67       	ori	r25, 0x7F	; 127
   1dbe4:	80 e8       	ldi	r24, 0x80	; 128
   1dbe6:	70 e0       	ldi	r23, 0x00	; 0
   1dbe8:	60 e0       	ldi	r22, 0x00	; 0
   1dbea:	08 95       	ret

0001dbec <__fp_nan>:
   1dbec:	9f ef       	ldi	r25, 0xFF	; 255
   1dbee:	80 ec       	ldi	r24, 0xC0	; 192
   1dbf0:	08 95       	ret

0001dbf2 <__fp_pscA>:
   1dbf2:	00 24       	eor	r0, r0
   1dbf4:	0a 94       	dec	r0
   1dbf6:	16 16       	cp	r1, r22
   1dbf8:	17 06       	cpc	r1, r23
   1dbfa:	18 06       	cpc	r1, r24
   1dbfc:	09 06       	cpc	r0, r25
   1dbfe:	08 95       	ret

0001dc00 <__fp_pscB>:
   1dc00:	00 24       	eor	r0, r0
   1dc02:	0a 94       	dec	r0
   1dc04:	12 16       	cp	r1, r18
   1dc06:	13 06       	cpc	r1, r19
   1dc08:	14 06       	cpc	r1, r20
   1dc0a:	05 06       	cpc	r0, r21
   1dc0c:	08 95       	ret

0001dc0e <__fp_round>:
   1dc0e:	09 2e       	mov	r0, r25
   1dc10:	03 94       	inc	r0
   1dc12:	00 0c       	add	r0, r0
   1dc14:	11 f4       	brne	.+4      	; 0x1dc1a <__fp_round+0xc>
   1dc16:	88 23       	and	r24, r24
   1dc18:	52 f0       	brmi	.+20     	; 0x1dc2e <__fp_round+0x20>
   1dc1a:	bb 0f       	add	r27, r27
   1dc1c:	40 f4       	brcc	.+16     	; 0x1dc2e <__fp_round+0x20>
   1dc1e:	bf 2b       	or	r27, r31
   1dc20:	11 f4       	brne	.+4      	; 0x1dc26 <__fp_round+0x18>
   1dc22:	60 ff       	sbrs	r22, 0
   1dc24:	04 c0       	rjmp	.+8      	; 0x1dc2e <__fp_round+0x20>
   1dc26:	6f 5f       	subi	r22, 0xFF	; 255
   1dc28:	7f 4f       	sbci	r23, 0xFF	; 255
   1dc2a:	8f 4f       	sbci	r24, 0xFF	; 255
   1dc2c:	9f 4f       	sbci	r25, 0xFF	; 255
   1dc2e:	08 95       	ret

0001dc30 <__fp_split3>:
   1dc30:	57 fd       	sbrc	r21, 7
   1dc32:	90 58       	subi	r25, 0x80	; 128
   1dc34:	44 0f       	add	r20, r20
   1dc36:	55 1f       	adc	r21, r21
   1dc38:	59 f0       	breq	.+22     	; 0x1dc50 <__fp_splitA+0x10>
   1dc3a:	5f 3f       	cpi	r21, 0xFF	; 255
   1dc3c:	71 f0       	breq	.+28     	; 0x1dc5a <__fp_splitA+0x1a>
   1dc3e:	47 95       	ror	r20

0001dc40 <__fp_splitA>:
   1dc40:	88 0f       	add	r24, r24
   1dc42:	97 fb       	bst	r25, 7
   1dc44:	99 1f       	adc	r25, r25
   1dc46:	61 f0       	breq	.+24     	; 0x1dc60 <__fp_splitA+0x20>
   1dc48:	9f 3f       	cpi	r25, 0xFF	; 255
   1dc4a:	79 f0       	breq	.+30     	; 0x1dc6a <__fp_splitA+0x2a>
   1dc4c:	87 95       	ror	r24
   1dc4e:	08 95       	ret
   1dc50:	12 16       	cp	r1, r18
   1dc52:	13 06       	cpc	r1, r19
   1dc54:	14 06       	cpc	r1, r20
   1dc56:	55 1f       	adc	r21, r21
   1dc58:	f2 cf       	rjmp	.-28     	; 0x1dc3e <__fp_split3+0xe>
   1dc5a:	46 95       	lsr	r20
   1dc5c:	f1 df       	rcall	.-30     	; 0x1dc40 <__fp_splitA>
   1dc5e:	08 c0       	rjmp	.+16     	; 0x1dc70 <__fp_splitA+0x30>
   1dc60:	16 16       	cp	r1, r22
   1dc62:	17 06       	cpc	r1, r23
   1dc64:	18 06       	cpc	r1, r24
   1dc66:	99 1f       	adc	r25, r25
   1dc68:	f1 cf       	rjmp	.-30     	; 0x1dc4c <__fp_splitA+0xc>
   1dc6a:	86 95       	lsr	r24
   1dc6c:	71 05       	cpc	r23, r1
   1dc6e:	61 05       	cpc	r22, r1
   1dc70:	08 94       	sec
   1dc72:	08 95       	ret

0001dc74 <__fp_zero>:
   1dc74:	e8 94       	clt

0001dc76 <__fp_szero>:
   1dc76:	bb 27       	eor	r27, r27
   1dc78:	66 27       	eor	r22, r22
   1dc7a:	77 27       	eor	r23, r23
   1dc7c:	cb 01       	movw	r24, r22
   1dc7e:	97 f9       	bld	r25, 7
   1dc80:	08 95       	ret

0001dc82 <__gesf2>:
   1dc82:	8a df       	rcall	.-236    	; 0x1db98 <__fp_cmp>
   1dc84:	08 f4       	brcc	.+2      	; 0x1dc88 <__gesf2+0x6>
   1dc86:	8f ef       	ldi	r24, 0xFF	; 255
   1dc88:	08 95       	ret

0001dc8a <__mulsf3>:
   1dc8a:	0b d0       	rcall	.+22     	; 0x1dca2 <__mulsf3x>
   1dc8c:	c0 cf       	rjmp	.-128    	; 0x1dc0e <__fp_round>
   1dc8e:	b1 df       	rcall	.-158    	; 0x1dbf2 <__fp_pscA>
   1dc90:	28 f0       	brcs	.+10     	; 0x1dc9c <__mulsf3+0x12>
   1dc92:	b6 df       	rcall	.-148    	; 0x1dc00 <__fp_pscB>
   1dc94:	18 f0       	brcs	.+6      	; 0x1dc9c <__mulsf3+0x12>
   1dc96:	95 23       	and	r25, r21
   1dc98:	09 f0       	breq	.+2      	; 0x1dc9c <__mulsf3+0x12>
   1dc9a:	a2 cf       	rjmp	.-188    	; 0x1dbe0 <__fp_inf>
   1dc9c:	a7 cf       	rjmp	.-178    	; 0x1dbec <__fp_nan>
   1dc9e:	11 24       	eor	r1, r1
   1dca0:	ea cf       	rjmp	.-44     	; 0x1dc76 <__fp_szero>

0001dca2 <__mulsf3x>:
   1dca2:	c6 df       	rcall	.-116    	; 0x1dc30 <__fp_split3>
   1dca4:	a0 f3       	brcs	.-24     	; 0x1dc8e <__mulsf3+0x4>

0001dca6 <__mulsf3_pse>:
   1dca6:	95 9f       	mul	r25, r21
   1dca8:	d1 f3       	breq	.-12     	; 0x1dc9e <__mulsf3+0x14>
   1dcaa:	95 0f       	add	r25, r21
   1dcac:	50 e0       	ldi	r21, 0x00	; 0
   1dcae:	55 1f       	adc	r21, r21
   1dcb0:	62 9f       	mul	r22, r18
   1dcb2:	f0 01       	movw	r30, r0
   1dcb4:	72 9f       	mul	r23, r18
   1dcb6:	bb 27       	eor	r27, r27
   1dcb8:	f0 0d       	add	r31, r0
   1dcba:	b1 1d       	adc	r27, r1
   1dcbc:	63 9f       	mul	r22, r19
   1dcbe:	aa 27       	eor	r26, r26
   1dcc0:	f0 0d       	add	r31, r0
   1dcc2:	b1 1d       	adc	r27, r1
   1dcc4:	aa 1f       	adc	r26, r26
   1dcc6:	64 9f       	mul	r22, r20
   1dcc8:	66 27       	eor	r22, r22
   1dcca:	b0 0d       	add	r27, r0
   1dccc:	a1 1d       	adc	r26, r1
   1dcce:	66 1f       	adc	r22, r22
   1dcd0:	82 9f       	mul	r24, r18
   1dcd2:	22 27       	eor	r18, r18
   1dcd4:	b0 0d       	add	r27, r0
   1dcd6:	a1 1d       	adc	r26, r1
   1dcd8:	62 1f       	adc	r22, r18
   1dcda:	73 9f       	mul	r23, r19
   1dcdc:	b0 0d       	add	r27, r0
   1dcde:	a1 1d       	adc	r26, r1
   1dce0:	62 1f       	adc	r22, r18
   1dce2:	83 9f       	mul	r24, r19
   1dce4:	a0 0d       	add	r26, r0
   1dce6:	61 1d       	adc	r22, r1
   1dce8:	22 1f       	adc	r18, r18
   1dcea:	74 9f       	mul	r23, r20
   1dcec:	33 27       	eor	r19, r19
   1dcee:	a0 0d       	add	r26, r0
   1dcf0:	61 1d       	adc	r22, r1
   1dcf2:	23 1f       	adc	r18, r19
   1dcf4:	84 9f       	mul	r24, r20
   1dcf6:	60 0d       	add	r22, r0
   1dcf8:	21 1d       	adc	r18, r1
   1dcfa:	82 2f       	mov	r24, r18
   1dcfc:	76 2f       	mov	r23, r22
   1dcfe:	6a 2f       	mov	r22, r26
   1dd00:	11 24       	eor	r1, r1
   1dd02:	9f 57       	subi	r25, 0x7F	; 127
   1dd04:	50 40       	sbci	r21, 0x00	; 0
   1dd06:	8a f0       	brmi	.+34     	; 0x1dd2a <__mulsf3_pse+0x84>
   1dd08:	e1 f0       	breq	.+56     	; 0x1dd42 <__mulsf3_pse+0x9c>
   1dd0a:	88 23       	and	r24, r24
   1dd0c:	4a f0       	brmi	.+18     	; 0x1dd20 <__mulsf3_pse+0x7a>
   1dd0e:	ee 0f       	add	r30, r30
   1dd10:	ff 1f       	adc	r31, r31
   1dd12:	bb 1f       	adc	r27, r27
   1dd14:	66 1f       	adc	r22, r22
   1dd16:	77 1f       	adc	r23, r23
   1dd18:	88 1f       	adc	r24, r24
   1dd1a:	91 50       	subi	r25, 0x01	; 1
   1dd1c:	50 40       	sbci	r21, 0x00	; 0
   1dd1e:	a9 f7       	brne	.-22     	; 0x1dd0a <__mulsf3_pse+0x64>
   1dd20:	9e 3f       	cpi	r25, 0xFE	; 254
   1dd22:	51 05       	cpc	r21, r1
   1dd24:	70 f0       	brcs	.+28     	; 0x1dd42 <__mulsf3_pse+0x9c>
   1dd26:	5c cf       	rjmp	.-328    	; 0x1dbe0 <__fp_inf>
   1dd28:	a6 cf       	rjmp	.-180    	; 0x1dc76 <__fp_szero>
   1dd2a:	5f 3f       	cpi	r21, 0xFF	; 255
   1dd2c:	ec f3       	brlt	.-6      	; 0x1dd28 <__mulsf3_pse+0x82>
   1dd2e:	98 3e       	cpi	r25, 0xE8	; 232
   1dd30:	dc f3       	brlt	.-10     	; 0x1dd28 <__mulsf3_pse+0x82>
   1dd32:	86 95       	lsr	r24
   1dd34:	77 95       	ror	r23
   1dd36:	67 95       	ror	r22
   1dd38:	b7 95       	ror	r27
   1dd3a:	f7 95       	ror	r31
   1dd3c:	e7 95       	ror	r30
   1dd3e:	9f 5f       	subi	r25, 0xFF	; 255
   1dd40:	c1 f7       	brne	.-16     	; 0x1dd32 <__mulsf3_pse+0x8c>
   1dd42:	fe 2b       	or	r31, r30
   1dd44:	88 0f       	add	r24, r24
   1dd46:	91 1d       	adc	r25, r1
   1dd48:	96 95       	lsr	r25
   1dd4a:	87 95       	ror	r24
   1dd4c:	97 f9       	bld	r25, 7
   1dd4e:	08 95       	ret

0001dd50 <round>:
   1dd50:	77 df       	rcall	.-274    	; 0x1dc40 <__fp_splitA>
   1dd52:	e0 f0       	brcs	.+56     	; 0x1dd8c <round+0x3c>
   1dd54:	9e 37       	cpi	r25, 0x7E	; 126
   1dd56:	d8 f0       	brcs	.+54     	; 0x1dd8e <round+0x3e>
   1dd58:	96 39       	cpi	r25, 0x96	; 150
   1dd5a:	b8 f4       	brcc	.+46     	; 0x1dd8a <round+0x3a>
   1dd5c:	9e 38       	cpi	r25, 0x8E	; 142
   1dd5e:	48 f4       	brcc	.+18     	; 0x1dd72 <round+0x22>
   1dd60:	67 2f       	mov	r22, r23
   1dd62:	78 2f       	mov	r23, r24
   1dd64:	88 27       	eor	r24, r24
   1dd66:	98 5f       	subi	r25, 0xF8	; 248
   1dd68:	f9 cf       	rjmp	.-14     	; 0x1dd5c <round+0xc>
   1dd6a:	86 95       	lsr	r24
   1dd6c:	77 95       	ror	r23
   1dd6e:	67 95       	ror	r22
   1dd70:	93 95       	inc	r25
   1dd72:	95 39       	cpi	r25, 0x95	; 149
   1dd74:	d0 f3       	brcs	.-12     	; 0x1dd6a <round+0x1a>
   1dd76:	b6 2f       	mov	r27, r22
   1dd78:	b1 70       	andi	r27, 0x01	; 1
   1dd7a:	6b 0f       	add	r22, r27
   1dd7c:	71 1d       	adc	r23, r1
   1dd7e:	81 1d       	adc	r24, r1
   1dd80:	20 f4       	brcc	.+8      	; 0x1dd8a <round+0x3a>
   1dd82:	87 95       	ror	r24
   1dd84:	77 95       	ror	r23
   1dd86:	67 95       	ror	r22
   1dd88:	93 95       	inc	r25
   1dd8a:	02 c0       	rjmp	.+4      	; 0x1dd90 <__fp_mintl>
   1dd8c:	1c c0       	rjmp	.+56     	; 0x1ddc6 <__fp_mpack>
   1dd8e:	73 cf       	rjmp	.-282    	; 0x1dc76 <__fp_szero>

0001dd90 <__fp_mintl>:
   1dd90:	88 23       	and	r24, r24
   1dd92:	71 f4       	brne	.+28     	; 0x1ddb0 <__fp_mintl+0x20>
   1dd94:	77 23       	and	r23, r23
   1dd96:	21 f0       	breq	.+8      	; 0x1dda0 <__fp_mintl+0x10>
   1dd98:	98 50       	subi	r25, 0x08	; 8
   1dd9a:	87 2b       	or	r24, r23
   1dd9c:	76 2f       	mov	r23, r22
   1dd9e:	07 c0       	rjmp	.+14     	; 0x1ddae <__fp_mintl+0x1e>
   1dda0:	66 23       	and	r22, r22
   1dda2:	11 f4       	brne	.+4      	; 0x1dda8 <__fp_mintl+0x18>
   1dda4:	99 27       	eor	r25, r25
   1dda6:	0d c0       	rjmp	.+26     	; 0x1ddc2 <__fp_mintl+0x32>
   1dda8:	90 51       	subi	r25, 0x10	; 16
   1ddaa:	86 2b       	or	r24, r22
MEMSPACE
static
void deselect (void)
{
    CS_HIGH();
    xchg_spi(0xFF);   /*< Dummy clock (force DO hi-z for multiple slave SPI) */
   1ddac:	70 e0       	ldi	r23, 0x00	; 0
    xchg_spi(0xFF);   /*< Dummy clock (force DO hi-z for multiple slave SPI) */
   1ddae:	60 e0       	ldi	r22, 0x00	; 0
   1ddb0:	2a f0       	brmi	.+10     	; 0x1ddbc <__fp_mintl+0x2c>
   1ddb2:	9a 95       	dec	r25
   1ddb4:	66 0f       	add	r22, r22
   1ddb6:	77 1f       	adc	r23, r23
   1ddb8:	88 1f       	adc	r24, r24
   1ddba:	da f7       	brpl	.-10     	; 0x1ddb2 <__fp_mintl+0x22>
   1ddbc:	88 0f       	add	r24, r24
   1ddbe:	96 95       	lsr	r25
   1ddc0:	87 95       	ror	r24
   1ddc2:	97 f9       	bld	r25, 7
   1ddc4:	08 95       	ret

0001ddc6 <__fp_mpack>:
   1ddc6:	9f 3f       	cpi	r25, 0xFF	; 255
   1ddc8:	31 f0       	breq	.+12     	; 0x1ddd6 <__fp_mpack_finite+0xc>

0001ddca <__fp_mpack_finite>:
   1ddca:	91 50       	subi	r25, 0x01	; 1
   1ddcc:	20 f4       	brcc	.+8      	; 0x1ddd6 <__fp_mpack_finite+0xc>
   1ddce:	87 95       	ror	r24
   1ddd0:	77 95       	ror	r23
   1ddd2:	67 95       	ror	r22
   1ddd4:	b7 95       	ror	r27
   1ddd6:	88 0f       	add	r24, r24
   1ddd8:	91 1d       	adc	r25, r1
   1ddda:	96 95       	lsr	r25
   1dddc:	87 95       	ror	r24
   1ddde:	97 f9       	bld	r25, 7
   1dde0:	08 95       	ret

0001dde2 <calloc>:
   1dde2:	0f 93       	push	r16
   1dde4:	1f 93       	push	r17
   1dde6:	cf 93       	push	r28
   1dde8:	df 93       	push	r29
   1ddea:	86 9f       	mul	r24, r22
   1ddec:	80 01       	movw	r16, r0
   1ddee:	87 9f       	mul	r24, r23
   1ddf0:	10 0d       	add	r17, r0
   1ddf2:	96 9f       	mul	r25, r22
   1ddf4:	10 0d       	add	r17, r0
   1ddf6:	11 24       	eor	r1, r1
   1ddf8:	c8 01       	movw	r24, r16
   1ddfa:	0d d0       	rcall	.+26     	; 0x1de16 <malloc>
   1ddfc:	ec 01       	movw	r28, r24
   1ddfe:	00 97       	sbiw	r24, 0x00	; 0
   1de00:	21 f0       	breq	.+8      	; 0x1de0a <calloc+0x28>
   1de02:	a8 01       	movw	r20, r16
   1de04:	60 e0       	ldi	r22, 0x00	; 0
   1de06:	70 e0       	ldi	r23, 0x00	; 0
   1de08:	0a d2       	rcall	.+1044   	; 0x1e21e <memset>
   1de0a:	ce 01       	movw	r24, r28
   1de0c:	df 91       	pop	r29
   1de0e:	cf 91       	pop	r28
   1de10:	1f 91       	pop	r17
   1de12:	0f 91       	pop	r16
   1de14:	08 95       	ret

0001de16 <malloc>:
   1de16:	0f 93       	push	r16
   1de18:	1f 93       	push	r17
   1de1a:	cf 93       	push	r28
   1de1c:	df 93       	push	r29
   1de1e:	82 30       	cpi	r24, 0x02	; 2
   1de20:	91 05       	cpc	r25, r1
   1de22:	10 f4       	brcc	.+4      	; 0x1de28 <malloc+0x12>
   1de24:	82 e0       	ldi	r24, 0x02	; 2
   1de26:	90 e0       	ldi	r25, 0x00	; 0
   1de28:	e0 91 89 1f 	lds	r30, 0x1F89	; 0x801f89 <__flp>
   1de2c:	f0 91 8a 1f 	lds	r31, 0x1F8A	; 0x801f8a <__flp+0x1>
   1de30:	20 e0       	ldi	r18, 0x00	; 0
   1de32:	30 e0       	ldi	r19, 0x00	; 0
   1de34:	a0 e0       	ldi	r26, 0x00	; 0
   1de36:	b0 e0       	ldi	r27, 0x00	; 0
   1de38:	30 97       	sbiw	r30, 0x00	; 0
   1de3a:	19 f1       	breq	.+70     	; 0x1de82 <malloc+0x6c>
   1de3c:	40 81       	ld	r20, Z
   1de3e:	51 81       	ldd	r21, Z+1	; 0x01
   1de40:	02 81       	ldd	r16, Z+2	; 0x02
   1de42:	13 81       	ldd	r17, Z+3	; 0x03
   1de44:	48 17       	cp	r20, r24
   1de46:	59 07       	cpc	r21, r25
   1de48:	c8 f0       	brcs	.+50     	; 0x1de7c <malloc+0x66>
   1de4a:	84 17       	cp	r24, r20
   1de4c:	95 07       	cpc	r25, r21
   1de4e:	69 f4       	brne	.+26     	; 0x1de6a <malloc+0x54>
   1de50:	10 97       	sbiw	r26, 0x00	; 0
   1de52:	31 f0       	breq	.+12     	; 0x1de60 <malloc+0x4a>
   1de54:	12 96       	adiw	r26, 0x02	; 2
   1de56:	0c 93       	st	X, r16
   1de58:	12 97       	sbiw	r26, 0x02	; 2
   1de5a:	13 96       	adiw	r26, 0x03	; 3
   1de5c:	1c 93       	st	X, r17
   1de5e:	27 c0       	rjmp	.+78     	; 0x1deae <malloc+0x98>
   1de60:	00 93 89 1f 	sts	0x1F89, r16	; 0x801f89 <__flp>
   1de64:	10 93 8a 1f 	sts	0x1F8A, r17	; 0x801f8a <__flp+0x1>
   1de68:	22 c0       	rjmp	.+68     	; 0x1deae <malloc+0x98>
   1de6a:	21 15       	cp	r18, r1
   1de6c:	31 05       	cpc	r19, r1
   1de6e:	19 f0       	breq	.+6      	; 0x1de76 <malloc+0x60>
   1de70:	42 17       	cp	r20, r18
   1de72:	53 07       	cpc	r21, r19
   1de74:	18 f4       	brcc	.+6      	; 0x1de7c <malloc+0x66>
   1de76:	9a 01       	movw	r18, r20
   1de78:	bd 01       	movw	r22, r26
   1de7a:	ef 01       	movw	r28, r30
   1de7c:	df 01       	movw	r26, r30
   1de7e:	f8 01       	movw	r30, r16
   1de80:	db cf       	rjmp	.-74     	; 0x1de38 <malloc+0x22>
   1de82:	21 15       	cp	r18, r1
   1de84:	31 05       	cpc	r19, r1
   1de86:	f9 f0       	breq	.+62     	; 0x1dec6 <malloc+0xb0>
   1de88:	28 1b       	sub	r18, r24
   1de8a:	39 0b       	sbc	r19, r25
   1de8c:	24 30       	cpi	r18, 0x04	; 4
   1de8e:	31 05       	cpc	r19, r1
   1de90:	80 f4       	brcc	.+32     	; 0x1deb2 <malloc+0x9c>
   1de92:	8a 81       	ldd	r24, Y+2	; 0x02
   1de94:	9b 81       	ldd	r25, Y+3	; 0x03
   1de96:	61 15       	cp	r22, r1
   1de98:	71 05       	cpc	r23, r1
   1de9a:	21 f0       	breq	.+8      	; 0x1dea4 <malloc+0x8e>
   1de9c:	fb 01       	movw	r30, r22
   1de9e:	93 83       	std	Z+3, r25	; 0x03
   1dea0:	82 83       	std	Z+2, r24	; 0x02
   1dea2:	04 c0       	rjmp	.+8      	; 0x1deac <malloc+0x96>
   1dea4:	90 93 8a 1f 	sts	0x1F8A, r25	; 0x801f8a <__flp+0x1>
   1dea8:	80 93 89 1f 	sts	0x1F89, r24	; 0x801f89 <__flp>
   1deac:	fe 01       	movw	r30, r28
   1deae:	32 96       	adiw	r30, 0x02	; 2
   1deb0:	44 c0       	rjmp	.+136    	; 0x1df3a <malloc+0x124>
   1deb2:	fe 01       	movw	r30, r28
   1deb4:	e2 0f       	add	r30, r18
   1deb6:	f3 1f       	adc	r31, r19
   1deb8:	81 93       	st	Z+, r24
   1deba:	91 93       	st	Z+, r25
   1debc:	22 50       	subi	r18, 0x02	; 2
   1debe:	31 09       	sbc	r19, r1
   1dec0:	39 83       	std	Y+1, r19	; 0x01
   1dec2:	28 83       	st	Y, r18
   1dec4:	3a c0       	rjmp	.+116    	; 0x1df3a <malloc+0x124>
   1dec6:	20 91 87 1f 	lds	r18, 0x1F87	; 0x801f87 <__brkval>
   1deca:	30 91 88 1f 	lds	r19, 0x1F88	; 0x801f88 <__brkval+0x1>
   1dece:	23 2b       	or	r18, r19
   1ded0:	41 f4       	brne	.+16     	; 0x1dee2 <malloc+0xcc>
   1ded2:	20 91 a1 02 	lds	r18, 0x02A1	; 0x8002a1 <__malloc_heap_start>
   1ded6:	30 91 a2 02 	lds	r19, 0x02A2	; 0x8002a2 <__malloc_heap_start+0x1>
   1deda:	30 93 88 1f 	sts	0x1F88, r19	; 0x801f88 <__brkval+0x1>
   1dede:	20 93 87 1f 	sts	0x1F87, r18	; 0x801f87 <__brkval>
   1dee2:	20 91 9f 02 	lds	r18, 0x029F	; 0x80029f <__malloc_heap_end>
   1dee6:	30 91 a0 02 	lds	r19, 0x02A0	; 0x8002a0 <__malloc_heap_end+0x1>
   1deea:	21 15       	cp	r18, r1
   1deec:	31 05       	cpc	r19, r1
   1deee:	41 f4       	brne	.+16     	; 0x1df00 <malloc+0xea>
   1def0:	2d b7       	in	r18, 0x3d	; 61
   1def2:	3e b7       	in	r19, 0x3e	; 62
   1def4:	40 91 a3 02 	lds	r20, 0x02A3	; 0x8002a3 <__malloc_margin>
   1def8:	50 91 a4 02 	lds	r21, 0x02A4	; 0x8002a4 <__malloc_margin+0x1>
   1defc:	24 1b       	sub	r18, r20
   1defe:	35 0b       	sbc	r19, r21
   1df00:	e0 91 87 1f 	lds	r30, 0x1F87	; 0x801f87 <__brkval>
   1df04:	f0 91 88 1f 	lds	r31, 0x1F88	; 0x801f88 <__brkval+0x1>
   1df08:	e2 17       	cp	r30, r18
   1df0a:	f3 07       	cpc	r31, r19
   1df0c:	a0 f4       	brcc	.+40     	; 0x1df36 <malloc+0x120>
   1df0e:	2e 1b       	sub	r18, r30
   1df10:	3f 0b       	sbc	r19, r31
   1df12:	28 17       	cp	r18, r24
   1df14:	39 07       	cpc	r19, r25
   1df16:	78 f0       	brcs	.+30     	; 0x1df36 <malloc+0x120>
   1df18:	ac 01       	movw	r20, r24
   1df1a:	4e 5f       	subi	r20, 0xFE	; 254
   1df1c:	5f 4f       	sbci	r21, 0xFF	; 255
   1df1e:	24 17       	cp	r18, r20
   1df20:	35 07       	cpc	r19, r21
   1df22:	48 f0       	brcs	.+18     	; 0x1df36 <malloc+0x120>
   1df24:	4e 0f       	add	r20, r30
   1df26:	5f 1f       	adc	r21, r31
   1df28:	50 93 88 1f 	sts	0x1F88, r21	; 0x801f88 <__brkval+0x1>
   1df2c:	40 93 87 1f 	sts	0x1F87, r20	; 0x801f87 <__brkval>
   1df30:	81 93       	st	Z+, r24
   1df32:	91 93       	st	Z+, r25
   1df34:	02 c0       	rjmp	.+4      	; 0x1df3a <malloc+0x124>
   1df36:	e0 e0       	ldi	r30, 0x00	; 0
   1df38:	f0 e0       	ldi	r31, 0x00	; 0
   1df3a:	cf 01       	movw	r24, r30
   1df3c:	df 91       	pop	r29
   1df3e:	cf 91       	pop	r28
   1df40:	1f 91       	pop	r17
   1df42:	0f 91       	pop	r16
   1df44:	08 95       	ret

0001df46 <free>:
   1df46:	cf 93       	push	r28
   1df48:	df 93       	push	r29
   1df4a:	00 97       	sbiw	r24, 0x00	; 0
   1df4c:	09 f4       	brne	.+2      	; 0x1df50 <free+0xa>
   1df4e:	81 c0       	rjmp	.+258    	; 0x1e052 <free+0x10c>
   1df50:	fc 01       	movw	r30, r24
   1df52:	32 97       	sbiw	r30, 0x02	; 2
   1df54:	13 82       	std	Z+3, r1	; 0x03
   1df56:	12 82       	std	Z+2, r1	; 0x02
   1df58:	a0 91 89 1f 	lds	r26, 0x1F89	; 0x801f89 <__flp>
   1df5c:	b0 91 8a 1f 	lds	r27, 0x1F8A	; 0x801f8a <__flp+0x1>
   1df60:	10 97       	sbiw	r26, 0x00	; 0
   1df62:	81 f4       	brne	.+32     	; 0x1df84 <free+0x3e>
   1df64:	20 81       	ld	r18, Z
   1df66:	31 81       	ldd	r19, Z+1	; 0x01
   1df68:	82 0f       	add	r24, r18
   1df6a:	93 1f       	adc	r25, r19
   1df6c:	20 91 87 1f 	lds	r18, 0x1F87	; 0x801f87 <__brkval>
   1df70:	30 91 88 1f 	lds	r19, 0x1F88	; 0x801f88 <__brkval+0x1>
   1df74:	28 17       	cp	r18, r24
   1df76:	39 07       	cpc	r19, r25
   1df78:	51 f5       	brne	.+84     	; 0x1dfce <free+0x88>
   1df7a:	f0 93 88 1f 	sts	0x1F88, r31	; 0x801f88 <__brkval+0x1>
   1df7e:	e0 93 87 1f 	sts	0x1F87, r30	; 0x801f87 <__brkval>
   1df82:	67 c0       	rjmp	.+206    	; 0x1e052 <free+0x10c>
   1df84:	ed 01       	movw	r28, r26
   1df86:	20 e0       	ldi	r18, 0x00	; 0
   1df88:	30 e0       	ldi	r19, 0x00	; 0
   1df8a:	ce 17       	cp	r28, r30
   1df8c:	df 07       	cpc	r29, r31
   1df8e:	40 f4       	brcc	.+16     	; 0x1dfa0 <free+0x5a>
   1df90:	4a 81       	ldd	r20, Y+2	; 0x02
   1df92:	5b 81       	ldd	r21, Y+3	; 0x03
   1df94:	9e 01       	movw	r18, r28
   1df96:	41 15       	cp	r20, r1
   1df98:	51 05       	cpc	r21, r1
   1df9a:	f1 f0       	breq	.+60     	; 0x1dfd8 <free+0x92>
   1df9c:	ea 01       	movw	r28, r20
   1df9e:	f5 cf       	rjmp	.-22     	; 0x1df8a <free+0x44>
   1dfa0:	d3 83       	std	Z+3, r29	; 0x03
   1dfa2:	c2 83       	std	Z+2, r28	; 0x02
   1dfa4:	40 81       	ld	r20, Z
   1dfa6:	51 81       	ldd	r21, Z+1	; 0x01
   1dfa8:	84 0f       	add	r24, r20
   1dfaa:	95 1f       	adc	r25, r21
   1dfac:	c8 17       	cp	r28, r24
   1dfae:	d9 07       	cpc	r29, r25
   1dfb0:	59 f4       	brne	.+22     	; 0x1dfc8 <free+0x82>
   1dfb2:	88 81       	ld	r24, Y
   1dfb4:	99 81       	ldd	r25, Y+1	; 0x01
   1dfb6:	84 0f       	add	r24, r20
   1dfb8:	95 1f       	adc	r25, r21
   1dfba:	02 96       	adiw	r24, 0x02	; 2
   1dfbc:	91 83       	std	Z+1, r25	; 0x01
   1dfbe:	80 83       	st	Z, r24
   1dfc0:	8a 81       	ldd	r24, Y+2	; 0x02
   1dfc2:	9b 81       	ldd	r25, Y+3	; 0x03
   1dfc4:	93 83       	std	Z+3, r25	; 0x03
   1dfc6:	82 83       	std	Z+2, r24	; 0x02
   1dfc8:	21 15       	cp	r18, r1
   1dfca:	31 05       	cpc	r19, r1
   1dfcc:	29 f4       	brne	.+10     	; 0x1dfd8 <free+0x92>
   1dfce:	f0 93 8a 1f 	sts	0x1F8A, r31	; 0x801f8a <__flp+0x1>
   1dfd2:	e0 93 89 1f 	sts	0x1F89, r30	; 0x801f89 <__flp>
   1dfd6:	3d c0       	rjmp	.+122    	; 0x1e052 <free+0x10c>
   1dfd8:	e9 01       	movw	r28, r18
   1dfda:	fb 83       	std	Y+3, r31	; 0x03
   1dfdc:	ea 83       	std	Y+2, r30	; 0x02
   1dfde:	49 91       	ld	r20, Y+
   1dfe0:	59 91       	ld	r21, Y+
   1dfe2:	c4 0f       	add	r28, r20
   1dfe4:	d5 1f       	adc	r29, r21
   1dfe6:	ec 17       	cp	r30, r28
   1dfe8:	fd 07       	cpc	r31, r29
   1dfea:	61 f4       	brne	.+24     	; 0x1e004 <free+0xbe>
   1dfec:	80 81       	ld	r24, Z
   1dfee:	91 81       	ldd	r25, Z+1	; 0x01
   1dff0:	84 0f       	add	r24, r20
   1dff2:	95 1f       	adc	r25, r21
   1dff4:	02 96       	adiw	r24, 0x02	; 2
   1dff6:	e9 01       	movw	r28, r18
   1dff8:	99 83       	std	Y+1, r25	; 0x01
   1dffa:	88 83       	st	Y, r24
   1dffc:	82 81       	ldd	r24, Z+2	; 0x02
   1dffe:	93 81       	ldd	r25, Z+3	; 0x03
   1e000:	9b 83       	std	Y+3, r25	; 0x03
   1e002:	8a 83       	std	Y+2, r24	; 0x02
   1e004:	e0 e0       	ldi	r30, 0x00	; 0
   1e006:	f0 e0       	ldi	r31, 0x00	; 0
   1e008:	12 96       	adiw	r26, 0x02	; 2
   1e00a:	8d 91       	ld	r24, X+
   1e00c:	9c 91       	ld	r25, X
   1e00e:	13 97       	sbiw	r26, 0x03	; 3
   1e010:	00 97       	sbiw	r24, 0x00	; 0
   1e012:	19 f0       	breq	.+6      	; 0x1e01a <free+0xd4>
   1e014:	fd 01       	movw	r30, r26
   1e016:	dc 01       	movw	r26, r24
   1e018:	f7 cf       	rjmp	.-18     	; 0x1e008 <free+0xc2>
   1e01a:	8d 91       	ld	r24, X+
   1e01c:	9c 91       	ld	r25, X
   1e01e:	11 97       	sbiw	r26, 0x01	; 1
   1e020:	9d 01       	movw	r18, r26
   1e022:	2e 5f       	subi	r18, 0xFE	; 254
   1e024:	3f 4f       	sbci	r19, 0xFF	; 255
   1e026:	82 0f       	add	r24, r18
   1e028:	93 1f       	adc	r25, r19
   1e02a:	20 91 87 1f 	lds	r18, 0x1F87	; 0x801f87 <__brkval>
   1e02e:	30 91 88 1f 	lds	r19, 0x1F88	; 0x801f88 <__brkval+0x1>
   1e032:	28 17       	cp	r18, r24
   1e034:	39 07       	cpc	r19, r25
   1e036:	69 f4       	brne	.+26     	; 0x1e052 <free+0x10c>
   1e038:	30 97       	sbiw	r30, 0x00	; 0
   1e03a:	29 f4       	brne	.+10     	; 0x1e046 <free+0x100>
   1e03c:	10 92 8a 1f 	sts	0x1F8A, r1	; 0x801f8a <__flp+0x1>
   1e040:	10 92 89 1f 	sts	0x1F89, r1	; 0x801f89 <__flp>
   1e044:	02 c0       	rjmp	.+4      	; 0x1e04a <free+0x104>
   1e046:	13 82       	std	Z+3, r1	; 0x03
   1e048:	12 82       	std	Z+2, r1	; 0x02
   1e04a:	b0 93 88 1f 	sts	0x1F88, r27	; 0x801f88 <__brkval+0x1>
   1e04e:	a0 93 87 1f 	sts	0x1F87, r26	; 0x801f87 <__brkval>
   1e052:	df 91       	pop	r29
   1e054:	cf 91       	pop	r28
   1e056:	08 95       	ret

0001e058 <__ftoa_engine>:
   1e058:	28 30       	cpi	r18, 0x08	; 8
   1e05a:	08 f0       	brcs	.+2      	; 0x1e05e <__ftoa_engine+0x6>
   1e05c:	27 e0       	ldi	r18, 0x07	; 7
   1e05e:	33 27       	eor	r19, r19
   1e060:	da 01       	movw	r26, r20
   1e062:	99 0f       	add	r25, r25
   1e064:	31 1d       	adc	r19, r1
   1e066:	87 fd       	sbrc	r24, 7
   1e068:	91 60       	ori	r25, 0x01	; 1
   1e06a:	00 96       	adiw	r24, 0x00	; 0
   1e06c:	61 05       	cpc	r22, r1
   1e06e:	71 05       	cpc	r23, r1
   1e070:	39 f4       	brne	.+14     	; 0x1e080 <__ftoa_engine+0x28>
   1e072:	32 60       	ori	r19, 0x02	; 2
   1e074:	2e 5f       	subi	r18, 0xFE	; 254
   1e076:	3d 93       	st	X+, r19
   1e078:	30 e3       	ldi	r19, 0x30	; 48
   1e07a:	2a 95       	dec	r18
   1e07c:	e1 f7       	brne	.-8      	; 0x1e076 <__ftoa_engine+0x1e>
   1e07e:	08 95       	ret
   1e080:	9f 3f       	cpi	r25, 0xFF	; 255
   1e082:	30 f0       	brcs	.+12     	; 0x1e090 <__ftoa_engine+0x38>
   1e084:	80 38       	cpi	r24, 0x80	; 128
   1e086:	71 05       	cpc	r23, r1
   1e088:	61 05       	cpc	r22, r1
   1e08a:	09 f0       	breq	.+2      	; 0x1e08e <__ftoa_engine+0x36>
   1e08c:	3c 5f       	subi	r19, 0xFC	; 252
   1e08e:	3c 5f       	subi	r19, 0xFC	; 252
   1e090:	3d 93       	st	X+, r19
   1e092:	91 30       	cpi	r25, 0x01	; 1
   1e094:	08 f0       	brcs	.+2      	; 0x1e098 <__ftoa_engine+0x40>
   1e096:	80 68       	ori	r24, 0x80	; 128
   1e098:	91 1d       	adc	r25, r1
   1e09a:	df 93       	push	r29
   1e09c:	cf 93       	push	r28
   1e09e:	1f 93       	push	r17
   1e0a0:	0f 93       	push	r16
   1e0a2:	ff 92       	push	r15
   1e0a4:	ef 92       	push	r14
   1e0a6:	19 2f       	mov	r17, r25
   1e0a8:	98 7f       	andi	r25, 0xF8	; 248
   1e0aa:	96 95       	lsr	r25
   1e0ac:	e9 2f       	mov	r30, r25
   1e0ae:	96 95       	lsr	r25
   1e0b0:	96 95       	lsr	r25
   1e0b2:	e9 0f       	add	r30, r25
   1e0b4:	ff 27       	eor	r31, r31
   1e0b6:	ee 5c       	subi	r30, 0xCE	; 206
   1e0b8:	fd 4f       	sbci	r31, 0xFD	; 253
   1e0ba:	99 27       	eor	r25, r25
   1e0bc:	33 27       	eor	r19, r19
   1e0be:	ee 24       	eor	r14, r14
   1e0c0:	ff 24       	eor	r15, r15
   1e0c2:	a7 01       	movw	r20, r14
   1e0c4:	e7 01       	movw	r28, r14
   1e0c6:	05 90       	lpm	r0, Z+
   1e0c8:	08 94       	sec
   1e0ca:	07 94       	ror	r0
   1e0cc:	28 f4       	brcc	.+10     	; 0x1e0d8 <__ftoa_engine+0x80>
   1e0ce:	36 0f       	add	r19, r22
   1e0d0:	e7 1e       	adc	r14, r23
   1e0d2:	f8 1e       	adc	r15, r24
   1e0d4:	49 1f       	adc	r20, r25
   1e0d6:	51 1d       	adc	r21, r1
   1e0d8:	66 0f       	add	r22, r22
   1e0da:	77 1f       	adc	r23, r23
   1e0dc:	88 1f       	adc	r24, r24
   1e0de:	99 1f       	adc	r25, r25
   1e0e0:	06 94       	lsr	r0
   1e0e2:	a1 f7       	brne	.-24     	; 0x1e0cc <__ftoa_engine+0x74>
   1e0e4:	05 90       	lpm	r0, Z+
   1e0e6:	07 94       	ror	r0
   1e0e8:	28 f4       	brcc	.+10     	; 0x1e0f4 <__ftoa_engine+0x9c>
   1e0ea:	e7 0e       	add	r14, r23
   1e0ec:	f8 1e       	adc	r15, r24
   1e0ee:	49 1f       	adc	r20, r25
   1e0f0:	56 1f       	adc	r21, r22
   1e0f2:	c1 1d       	adc	r28, r1
   1e0f4:	77 0f       	add	r23, r23
   1e0f6:	88 1f       	adc	r24, r24
   1e0f8:	99 1f       	adc	r25, r25
   1e0fa:	66 1f       	adc	r22, r22
   1e0fc:	06 94       	lsr	r0
   1e0fe:	a1 f7       	brne	.-24     	; 0x1e0e8 <__ftoa_engine+0x90>
   1e100:	05 90       	lpm	r0, Z+
   1e102:	07 94       	ror	r0
   1e104:	28 f4       	brcc	.+10     	; 0x1e110 <__ftoa_engine+0xb8>
   1e106:	f8 0e       	add	r15, r24
   1e108:	49 1f       	adc	r20, r25
   1e10a:	56 1f       	adc	r21, r22
   1e10c:	c7 1f       	adc	r28, r23
   1e10e:	d1 1d       	adc	r29, r1
   1e110:	88 0f       	add	r24, r24
   1e112:	99 1f       	adc	r25, r25
   1e114:	66 1f       	adc	r22, r22
   1e116:	77 1f       	adc	r23, r23
   1e118:	06 94       	lsr	r0
   1e11a:	a1 f7       	brne	.-24     	; 0x1e104 <__ftoa_engine+0xac>
   1e11c:	05 90       	lpm	r0, Z+
   1e11e:	07 94       	ror	r0
   1e120:	20 f4       	brcc	.+8      	; 0x1e12a <__ftoa_engine+0xd2>
   1e122:	49 0f       	add	r20, r25
   1e124:	56 1f       	adc	r21, r22
   1e126:	c7 1f       	adc	r28, r23
   1e128:	d8 1f       	adc	r29, r24
   1e12a:	99 0f       	add	r25, r25
   1e12c:	66 1f       	adc	r22, r22
   1e12e:	77 1f       	adc	r23, r23
   1e130:	88 1f       	adc	r24, r24
   1e132:	06 94       	lsr	r0
   1e134:	a9 f7       	brne	.-22     	; 0x1e120 <__ftoa_engine+0xc8>
   1e136:	84 91       	lpm	r24, Z
   1e138:	10 95       	com	r17
   1e13a:	17 70       	andi	r17, 0x07	; 7
   1e13c:	41 f0       	breq	.+16     	; 0x1e14e <__ftoa_engine+0xf6>
   1e13e:	d6 95       	lsr	r29
   1e140:	c7 95       	ror	r28
   1e142:	57 95       	ror	r21
   1e144:	47 95       	ror	r20
   1e146:	f7 94       	ror	r15
   1e148:	e7 94       	ror	r14
   1e14a:	1a 95       	dec	r17
   1e14c:	c1 f7       	brne	.-16     	; 0x1e13e <__ftoa_engine+0xe6>
   1e14e:	e8 ed       	ldi	r30, 0xD8	; 216
   1e150:	f1 e0       	ldi	r31, 0x01	; 1
   1e152:	68 94       	set
   1e154:	15 90       	lpm	r1, Z+
   1e156:	15 91       	lpm	r17, Z+
   1e158:	35 91       	lpm	r19, Z+
   1e15a:	65 91       	lpm	r22, Z+
   1e15c:	95 91       	lpm	r25, Z+
   1e15e:	05 90       	lpm	r0, Z+
   1e160:	7f e2       	ldi	r23, 0x2F	; 47
   1e162:	73 95       	inc	r23
   1e164:	e1 18       	sub	r14, r1
   1e166:	f1 0a       	sbc	r15, r17
   1e168:	43 0b       	sbc	r20, r19
   1e16a:	56 0b       	sbc	r21, r22
   1e16c:	c9 0b       	sbc	r28, r25
   1e16e:	d0 09       	sbc	r29, r0
   1e170:	c0 f7       	brcc	.-16     	; 0x1e162 <__ftoa_engine+0x10a>
   1e172:	e1 0c       	add	r14, r1
   1e174:	f1 1e       	adc	r15, r17
   1e176:	43 1f       	adc	r20, r19
   1e178:	56 1f       	adc	r21, r22
   1e17a:	c9 1f       	adc	r28, r25
   1e17c:	d0 1d       	adc	r29, r0
   1e17e:	7e f4       	brtc	.+30     	; 0x1e19e <__ftoa_engine+0x146>
   1e180:	70 33       	cpi	r23, 0x30	; 48
   1e182:	11 f4       	brne	.+4      	; 0x1e188 <__ftoa_engine+0x130>
   1e184:	8a 95       	dec	r24
   1e186:	e6 cf       	rjmp	.-52     	; 0x1e154 <__ftoa_engine+0xfc>
   1e188:	e8 94       	clt
   1e18a:	01 50       	subi	r16, 0x01	; 1
   1e18c:	30 f0       	brcs	.+12     	; 0x1e19a <__ftoa_engine+0x142>
   1e18e:	08 0f       	add	r16, r24
   1e190:	0a f4       	brpl	.+2      	; 0x1e194 <__ftoa_engine+0x13c>
   1e192:	00 27       	eor	r16, r16
   1e194:	02 17       	cp	r16, r18
   1e196:	08 f4       	brcc	.+2      	; 0x1e19a <__ftoa_engine+0x142>
   1e198:	20 2f       	mov	r18, r16
   1e19a:	23 95       	inc	r18
   1e19c:	02 2f       	mov	r16, r18
   1e19e:	7a 33       	cpi	r23, 0x3A	; 58
   1e1a0:	28 f0       	brcs	.+10     	; 0x1e1ac <__ftoa_engine+0x154>
   1e1a2:	79 e3       	ldi	r23, 0x39	; 57
   1e1a4:	7d 93       	st	X+, r23
   1e1a6:	2a 95       	dec	r18
   1e1a8:	e9 f7       	brne	.-6      	; 0x1e1a4 <__ftoa_engine+0x14c>
   1e1aa:	10 c0       	rjmp	.+32     	; 0x1e1cc <__ftoa_engine+0x174>
   1e1ac:	7d 93       	st	X+, r23
   1e1ae:	2a 95       	dec	r18
   1e1b0:	89 f6       	brne	.-94     	; 0x1e154 <__ftoa_engine+0xfc>
   1e1b2:	06 94       	lsr	r0
   1e1b4:	97 95       	ror	r25
   1e1b6:	67 95       	ror	r22
   1e1b8:	37 95       	ror	r19
   1e1ba:	17 95       	ror	r17
   1e1bc:	17 94       	ror	r1
   1e1be:	e1 18       	sub	r14, r1
   1e1c0:	f1 0a       	sbc	r15, r17
   1e1c2:	43 0b       	sbc	r20, r19
   1e1c4:	56 0b       	sbc	r21, r22
   1e1c6:	c9 0b       	sbc	r28, r25
   1e1c8:	d0 09       	sbc	r29, r0
   1e1ca:	98 f0       	brcs	.+38     	; 0x1e1f2 <__ftoa_engine+0x19a>
   1e1cc:	23 95       	inc	r18
   1e1ce:	7e 91       	ld	r23, -X
   1e1d0:	73 95       	inc	r23
   1e1d2:	7a 33       	cpi	r23, 0x3A	; 58
   1e1d4:	08 f0       	brcs	.+2      	; 0x1e1d8 <__ftoa_engine+0x180>
   1e1d6:	70 e3       	ldi	r23, 0x30	; 48
   1e1d8:	7c 93       	st	X, r23
   1e1da:	20 13       	cpse	r18, r16
   1e1dc:	b8 f7       	brcc	.-18     	; 0x1e1cc <__ftoa_engine+0x174>
   1e1de:	7e 91       	ld	r23, -X
   1e1e0:	70 61       	ori	r23, 0x10	; 16
   1e1e2:	7d 93       	st	X+, r23
   1e1e4:	30 f0       	brcs	.+12     	; 0x1e1f2 <__ftoa_engine+0x19a>
   1e1e6:	83 95       	inc	r24
   1e1e8:	71 e3       	ldi	r23, 0x31	; 49
   1e1ea:	7d 93       	st	X+, r23
   1e1ec:	70 e3       	ldi	r23, 0x30	; 48
   1e1ee:	2a 95       	dec	r18
   1e1f0:	e1 f7       	brne	.-8      	; 0x1e1ea <__ftoa_engine+0x192>
   1e1f2:	11 24       	eor	r1, r1
   1e1f4:	ef 90       	pop	r14
   1e1f6:	ff 90       	pop	r15
   1e1f8:	0f 91       	pop	r16
   1e1fa:	1f 91       	pop	r17
   1e1fc:	cf 91       	pop	r28
   1e1fe:	df 91       	pop	r29
   1e200:	99 27       	eor	r25, r25
   1e202:	87 fd       	sbrc	r24, 7
   1e204:	90 95       	com	r25
   1e206:	08 95       	ret

0001e208 <strnlen_P>:
   1e208:	fc 01       	movw	r30, r24
   1e20a:	05 90       	lpm	r0, Z+
   1e20c:	61 50       	subi	r22, 0x01	; 1
   1e20e:	70 40       	sbci	r23, 0x00	; 0
   1e210:	01 10       	cpse	r0, r1
   1e212:	d8 f7       	brcc	.-10     	; 0x1e20a <strnlen_P+0x2>
   1e214:	80 95       	com	r24
   1e216:	90 95       	com	r25
   1e218:	8e 0f       	add	r24, r30
   1e21a:	9f 1f       	adc	r25, r31
   1e21c:	08 95       	ret

0001e21e <memset>:
   1e21e:	dc 01       	movw	r26, r24
   1e220:	01 c0       	rjmp	.+2      	; 0x1e224 <memset+0x6>
   1e222:	6d 93       	st	X+, r22
   1e224:	41 50       	subi	r20, 0x01	; 1
   1e226:	50 40       	sbci	r21, 0x00	; 0
   1e228:	e0 f7       	brcc	.-8      	; 0x1e222 <memset+0x4>
   1e22a:	08 95       	ret

0001e22c <strnlen>:
   1e22c:	fc 01       	movw	r30, r24
   1e22e:	61 50       	subi	r22, 0x01	; 1
   1e230:	70 40       	sbci	r23, 0x00	; 0
   1e232:	01 90       	ld	r0, Z+
   1e234:	01 10       	cpse	r0, r1
   1e236:	d8 f7       	brcc	.-10     	; 0x1e22e <strnlen+0x2>
   1e238:	80 95       	com	r24
   1e23a:	90 95       	com	r25
   1e23c:	8e 0f       	add	r24, r30
   1e23e:	9f 1f       	adc	r25, r31
   1e240:	08 95       	ret

0001e242 <__ultoa_invert>:
   1e242:	fa 01       	movw	r30, r20
   1e244:	aa 27       	eor	r26, r26
   1e246:	28 30       	cpi	r18, 0x08	; 8
   1e248:	51 f1       	breq	.+84     	; 0x1e29e <__ultoa_invert+0x5c>
   1e24a:	20 31       	cpi	r18, 0x10	; 16
   1e24c:	81 f1       	breq	.+96     	; 0x1e2ae <__ultoa_invert+0x6c>
   1e24e:	e8 94       	clt
   1e250:	6f 93       	push	r22
   1e252:	6e 7f       	andi	r22, 0xFE	; 254
   1e254:	6e 5f       	subi	r22, 0xFE	; 254
   1e256:	7f 4f       	sbci	r23, 0xFF	; 255
   1e258:	8f 4f       	sbci	r24, 0xFF	; 255
   1e25a:	9f 4f       	sbci	r25, 0xFF	; 255
   1e25c:	af 4f       	sbci	r26, 0xFF	; 255
   1e25e:	b1 e0       	ldi	r27, 0x01	; 1
   1e260:	3e d0       	rcall	.+124    	; 0x1e2de <__ultoa_invert+0x9c>
   1e262:	b4 e0       	ldi	r27, 0x04	; 4
   1e264:	3c d0       	rcall	.+120    	; 0x1e2de <__ultoa_invert+0x9c>
   1e266:	67 0f       	add	r22, r23
   1e268:	78 1f       	adc	r23, r24
   1e26a:	89 1f       	adc	r24, r25
   1e26c:	9a 1f       	adc	r25, r26
   1e26e:	a1 1d       	adc	r26, r1
   1e270:	68 0f       	add	r22, r24
   1e272:	79 1f       	adc	r23, r25
   1e274:	8a 1f       	adc	r24, r26
   1e276:	91 1d       	adc	r25, r1
   1e278:	a1 1d       	adc	r26, r1
   1e27a:	6a 0f       	add	r22, r26
   1e27c:	71 1d       	adc	r23, r1
   1e27e:	81 1d       	adc	r24, r1
   1e280:	91 1d       	adc	r25, r1
   1e282:	a1 1d       	adc	r26, r1
   1e284:	20 d0       	rcall	.+64     	; 0x1e2c6 <__ultoa_invert+0x84>
   1e286:	09 f4       	brne	.+2      	; 0x1e28a <__ultoa_invert+0x48>
   1e288:	68 94       	set
   1e28a:	3f 91       	pop	r19
   1e28c:	2a e0       	ldi	r18, 0x0A	; 10
   1e28e:	26 9f       	mul	r18, r22
   1e290:	11 24       	eor	r1, r1
   1e292:	30 19       	sub	r19, r0
   1e294:	30 5d       	subi	r19, 0xD0	; 208
   1e296:	31 93       	st	Z+, r19
   1e298:	de f6       	brtc	.-74     	; 0x1e250 <__ultoa_invert+0xe>
   1e29a:	cf 01       	movw	r24, r30
   1e29c:	08 95       	ret
   1e29e:	46 2f       	mov	r20, r22
   1e2a0:	47 70       	andi	r20, 0x07	; 7
   1e2a2:	40 5d       	subi	r20, 0xD0	; 208
   1e2a4:	41 93       	st	Z+, r20
   1e2a6:	b3 e0       	ldi	r27, 0x03	; 3
   1e2a8:	0f d0       	rcall	.+30     	; 0x1e2c8 <__ultoa_invert+0x86>
   1e2aa:	c9 f7       	brne	.-14     	; 0x1e29e <__ultoa_invert+0x5c>
   1e2ac:	f6 cf       	rjmp	.-20     	; 0x1e29a <__ultoa_invert+0x58>
   1e2ae:	46 2f       	mov	r20, r22
   1e2b0:	4f 70       	andi	r20, 0x0F	; 15
   1e2b2:	40 5d       	subi	r20, 0xD0	; 208
   1e2b4:	4a 33       	cpi	r20, 0x3A	; 58
   1e2b6:	18 f0       	brcs	.+6      	; 0x1e2be <__ultoa_invert+0x7c>
   1e2b8:	49 5d       	subi	r20, 0xD9	; 217
   1e2ba:	31 fd       	sbrc	r19, 1
   1e2bc:	40 52       	subi	r20, 0x20	; 32
   1e2be:	41 93       	st	Z+, r20
   1e2c0:	02 d0       	rcall	.+4      	; 0x1e2c6 <__ultoa_invert+0x84>
   1e2c2:	a9 f7       	brne	.-22     	; 0x1e2ae <__ultoa_invert+0x6c>
   1e2c4:	ea cf       	rjmp	.-44     	; 0x1e29a <__ultoa_invert+0x58>
   1e2c6:	b4 e0       	ldi	r27, 0x04	; 4
   1e2c8:	a6 95       	lsr	r26
   1e2ca:	97 95       	ror	r25
   1e2cc:	87 95       	ror	r24
   1e2ce:	77 95       	ror	r23
   1e2d0:	67 95       	ror	r22
   1e2d2:	ba 95       	dec	r27
   1e2d4:	c9 f7       	brne	.-14     	; 0x1e2c8 <__ultoa_invert+0x86>
   1e2d6:	00 97       	sbiw	r24, 0x00	; 0
   1e2d8:	61 05       	cpc	r22, r1
   1e2da:	71 05       	cpc	r23, r1
   1e2dc:	08 95       	ret
   1e2de:	9b 01       	movw	r18, r22
   1e2e0:	ac 01       	movw	r20, r24
   1e2e2:	0a 2e       	mov	r0, r26
   1e2e4:	06 94       	lsr	r0
   1e2e6:	57 95       	ror	r21
   1e2e8:	47 95       	ror	r20
   1e2ea:	37 95       	ror	r19
   1e2ec:	27 95       	ror	r18
   1e2ee:	ba 95       	dec	r27
   1e2f0:	c9 f7       	brne	.-14     	; 0x1e2e4 <__ultoa_invert+0xa2>
   1e2f2:	62 0f       	add	r22, r18
   1e2f4:	73 1f       	adc	r23, r19
   1e2f6:	84 1f       	adc	r24, r20
   1e2f8:	95 1f       	adc	r25, r21
   1e2fa:	a0 1d       	adc	r26, r0
   1e2fc:	08 95       	ret

0001e2fe <_exit>:
   1e2fe:	f8 94       	cli

0001e300 <__stop_program>:
   1e300:	ff cf       	rjmp	.-2      	; 0x1e300 <__stop_program>
