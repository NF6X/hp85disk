
gpib.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000160e  00800100  0001dc1c  0001dcb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001dc1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000007d3  0080170e  0080170e  0001f2be  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0001f2be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0001f2d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000015b0  00000000  00000000  0001f310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002684f  00000000  00000000  000208c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005cb5  00000000  00000000  0004710f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000115c0  00000000  00000000  0004cdc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00005d88  00000000  00000000  0005e384  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000437d  00000000  00000000  0006410c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00025de9  00000000  00000000  00068489  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001558  00000000  00000000  0008e272  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 47 24 	jmp	0x488e	; 0x488e <__ctors_end>
       4:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
       8:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
       c:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      10:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      14:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      18:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      1c:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      20:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      24:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      28:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      2c:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      30:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      34:	0c 94 2c 32 	jmp	0x6458	; 0x6458 <__vector_13>
      38:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      3c:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      40:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      44:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      48:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      4c:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      50:	0c 94 67 2b 	jmp	0x56ce	; 0x56ce <__vector_20>
      54:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      58:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      5c:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      60:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      64:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      68:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      6c:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      70:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      74:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      78:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      7c:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      80:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      84:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      88:	0c 94 66 24 	jmp	0x48cc	; 0x48cc <__bad_interrupt>
      8c:	d3 41       	sbci	r29, 0x13	; 19
      8e:	2e 43       	sbci	r18, 0x3E	; 62
      90:	03 42       	sbci	r16, 0x23	; 35
      92:	07 43       	sbci	r16, 0x37	; 55
      94:	07 43       	sbci	r16, 0x37	; 55
      96:	2e 43       	sbci	r18, 0x3E	; 62
      98:	2e 43       	sbci	r18, 0x3E	; 62
      9a:	2e 43       	sbci	r18, 0x3E	; 62
      9c:	2e 43       	sbci	r18, 0x3E	; 62
      9e:	2e 43       	sbci	r18, 0x3E	; 62
      a0:	2e 43       	sbci	r18, 0x3E	; 62
      a2:	2e 43       	sbci	r18, 0x3E	; 62
      a4:	2e 43       	sbci	r18, 0x3E	; 62
      a6:	d3 41       	sbci	r29, 0x13	; 19
      a8:	cd 41       	sbci	r28, 0x1D	; 29
      aa:	2e 43       	sbci	r18, 0x3E	; 62
      ac:	2e 43       	sbci	r18, 0x3E	; 62
      ae:	2e 43       	sbci	r18, 0x3E	; 62
      b0:	2e 43       	sbci	r18, 0x3E	; 62
      b2:	fd 41       	sbci	r31, 0x1D	; 29
      b4:	2e 43       	sbci	r18, 0x3E	; 62
      b6:	2e 43       	sbci	r18, 0x3E	; 62
      b8:	d3 41       	sbci	r29, 0x13	; 19
      ba:	2e 43       	sbci	r18, 0x3E	; 62
      bc:	2e 43       	sbci	r18, 0x3E	; 62
      be:	2e 43       	sbci	r18, 0x3E	; 62
      c0:	2e 43       	sbci	r18, 0x3E	; 62
      c2:	2e 43       	sbci	r18, 0x3E	; 62
      c4:	2e 43       	sbci	r18, 0x3E	; 62
      c6:	2e 43       	sbci	r18, 0x3E	; 62
      c8:	2e 43       	sbci	r18, 0x3E	; 62
      ca:	2e 43       	sbci	r18, 0x3E	; 62
      cc:	d3 41       	sbci	r29, 0x13	; 19
      ce:	29 43       	sbci	r18, 0x39	; 57
      d0:	03 42       	sbci	r16, 0x23	; 35
      d2:	07 43       	sbci	r16, 0x37	; 55
      d4:	07 43       	sbci	r16, 0x37	; 55
      d6:	2e 43       	sbci	r18, 0x3E	; 62
      d8:	2e 43       	sbci	r18, 0x3E	; 62
      da:	2e 43       	sbci	r18, 0x3E	; 62
      dc:	2e 43       	sbci	r18, 0x3E	; 62
      de:	2e 43       	sbci	r18, 0x3E	; 62
      e0:	2e 43       	sbci	r18, 0x3E	; 62
      e2:	2e 43       	sbci	r18, 0x3E	; 62
      e4:	2e 43       	sbci	r18, 0x3E	; 62
      e6:	d3 41       	sbci	r29, 0x13	; 19
      e8:	cd 41       	sbci	r28, 0x1D	; 29
      ea:	2e 43       	sbci	r18, 0x3E	; 62
      ec:	2e 43       	sbci	r18, 0x3E	; 62
      ee:	24 43       	sbci	r18, 0x34	; 52
      f0:	2e 43       	sbci	r18, 0x3E	; 62
      f2:	fd 41       	sbci	r31, 0x1D	; 29
      f4:	2e 43       	sbci	r18, 0x3E	; 62
      f6:	2e 43       	sbci	r18, 0x3E	; 62
      f8:	d3 41       	sbci	r29, 0x13	; 19
      fa:	50 43       	sbci	r21, 0x30	; 48
      fc:	37 44       	sbci	r19, 0x47	; 71
      fe:	46 43       	sbci	r20, 0x36	; 54
     100:	a4 43       	sbci	r26, 0x34	; 52
     102:	8b 43       	sbci	r24, 0x3B	; 59
     104:	37 44       	sbci	r19, 0x47	; 71
     106:	37 44       	sbci	r19, 0x47	; 71
     108:	37 44       	sbci	r19, 0x47	; 71
     10a:	37 44       	sbci	r19, 0x47	; 71
     10c:	37 44       	sbci	r19, 0x47	; 71
     10e:	37 44       	sbci	r19, 0x47	; 71
     110:	37 44       	sbci	r19, 0x47	; 71
     112:	37 44       	sbci	r19, 0x47	; 71
     114:	5a 43       	sbci	r21, 0x3A	; 58
     116:	6e 43       	sbci	r22, 0x3E	; 62
     118:	37 44       	sbci	r19, 0x47	; 71
     11a:	37 44       	sbci	r19, 0x47	; 71
     11c:	37 44       	sbci	r19, 0x47	; 71
     11e:	37 44       	sbci	r19, 0x47	; 71
     120:	42 43       	sbci	r20, 0x32	; 50
     122:	37 44       	sbci	r19, 0x47	; 71
     124:	37 44       	sbci	r19, 0x47	; 71
     126:	6e 43       	sbci	r22, 0x3E	; 62
     128:	37 44       	sbci	r19, 0x47	; 71
     12a:	37 44       	sbci	r19, 0x47	; 71
     12c:	37 44       	sbci	r19, 0x47	; 71
     12e:	37 44       	sbci	r19, 0x47	; 71
     130:	37 44       	sbci	r19, 0x47	; 71
     132:	37 44       	sbci	r19, 0x47	; 71
     134:	37 44       	sbci	r19, 0x47	; 71
     136:	37 44       	sbci	r19, 0x47	; 71
     138:	37 44       	sbci	r19, 0x47	; 71
     13a:	50 43       	sbci	r21, 0x30	; 48
     13c:	d2 43       	sbci	r29, 0x32	; 50
     13e:	46 43       	sbci	r20, 0x36	; 54
     140:	a4 43       	sbci	r26, 0x34	; 52
     142:	8b 43       	sbci	r24, 0x3B	; 59
     144:	37 44       	sbci	r19, 0x47	; 71
     146:	37 44       	sbci	r19, 0x47	; 71
     148:	37 44       	sbci	r19, 0x47	; 71
     14a:	37 44       	sbci	r19, 0x47	; 71
     14c:	37 44       	sbci	r19, 0x47	; 71
     14e:	37 44       	sbci	r19, 0x47	; 71
     150:	37 44       	sbci	r19, 0x47	; 71
     152:	37 44       	sbci	r19, 0x47	; 71
     154:	5a 43       	sbci	r21, 0x3A	; 58
     156:	6e 43       	sbci	r22, 0x3E	; 62
     158:	37 44       	sbci	r19, 0x47	; 71
     15a:	37 44       	sbci	r19, 0x47	; 71
     15c:	d2 43       	sbci	r29, 0x32	; 50
     15e:	37 44       	sbci	r19, 0x47	; 71
     160:	42 43       	sbci	r20, 0x32	; 50
     162:	37 44       	sbci	r19, 0x47	; 71
     164:	37 44       	sbci	r19, 0x47	; 71
     166:	6e 43       	sbci	r22, 0x3E	; 62
     168:	69 6c       	ori	r22, 0xC9	; 201
     16a:	73 6c       	ori	r23, 0xC3	; 195
     16c:	7b 6c       	ori	r23, 0xCB	; 203
     16e:	7d 6c       	ori	r23, 0xCD	; 205
     170:	7f 6c       	ori	r23, 0xCF	; 207
     172:	81 6c       	ori	r24, 0xC1	; 193
     174:	83 6c       	ori	r24, 0xC3	; 195
     176:	85 6c       	ori	r24, 0xC5	; 197
     178:	88 6c       	ori	r24, 0xC8	; 200
     17a:	25 8d       	ldd	r18, Z+29	; 0x1d
     17c:	4b 8d       	ldd	r20, Y+27	; 0x1b
     17e:	72 8d       	ldd	r23, Z+26	; 0x1a
     180:	8c 8d       	ldd	r24, Y+28	; 0x1c
     182:	95 8d       	ldd	r25, Z+29	; 0x1d
     184:	b5 8d       	ldd	r27, Z+29	; 0x1d
     186:	ce 8d       	ldd	r28, Y+30	; 0x1e
     188:	dd 8d       	ldd	r29, Y+29	; 0x1d
     18a:	28 8e       	std	Y+24, r2	; 0x18
     18c:	fa 8d       	ldd	r31, Y+26	; 0x1a
     18e:	16 90       	elpm	r1, Z
     190:	1e 90       	ld	r1, -X
     192:	23 90       	.word	0x9023	; ????
     194:	47 90       	elpm	r4, Z+
     196:	51 90       	ld	r5, Z+
     198:	9b 90       	.word	0x909b	; ????
     19a:	66 90       	elpm	r6, Z
     19c:	66 90       	elpm	r6, Z
     19e:	5e 90       	ld	r5, -X
     1a0:	b1 b1       	in	r27, 0x01	; 1
     1a2:	70 b1       	in	r23, 0x00	; 0
     1a4:	70 b1       	in	r23, 0x00	; 0
     1a6:	70 b1       	in	r23, 0x00	; 0
     1a8:	70 b1       	in	r23, 0x00	; 0
     1aa:	34 b1       	in	r19, 0x04	; 4
     1ac:	3b b1       	in	r19, 0x0b	; 11
     1ae:	42 b1       	in	r20, 0x02	; 2
     1b0:	52 b1       	in	r21, 0x02	; 2
     1b2:	60 b1       	in	r22, 0x00	; 0
     1b4:	59 b1       	in	r21, 0x09	; 9
     1b6:	ee b8       	out	0x0e, r14	; 14
     1b8:	f8 b9       	out	0x08, r31	; 8
     1ba:	4c ba       	out	0x1c, r4	; 28
     1bc:	d0 ba       	out	0x10, r13	; 16
     1be:	03 bb       	out	0x13, r16	; 19
     1c0:	7f bb       	out	0x1f, r23	; 31
     1c2:	59 bd       	out	0x29, r21	; 41
     1c4:	2f be       	out	0x3f, r2	; 63
     1c6:	6e be       	out	0x3e, r6	; 62
     1c8:	1e bf       	out	0x3e, r17	; 62
     1ca:	5f bf       	out	0x3f, r21	; 63
     1cc:	93 b9       	out	0x03, r25	; 3
     1ce:	af b9       	out	0x0f, r26	; 15

000001d0 <__trampolines_end>:
     1d0:	6e 61       	ori	r22, 0x1E	; 30
     1d2:	6e 00       	.word	0x006e	; ????

000001d4 <__c.2332>:
     1d4:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     1e4:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     1f4:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     204:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     214:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     224:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     234:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     244:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     254:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     264:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     274:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     284:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     294:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     2a4:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     2b4:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     2c4:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000002d2 <__c.3573>:
     2d2:	63 73 5f 64 69 73 61 62 6c 65 20 77 61 73 3a 20     cs_disable was: 
     2e2:	25 64 2c 20 77 61 6e 74 3a 20 25 64 0a 00           %d, want: %d..

000002f0 <__c.3568>:
     2f0:	63 73 5f 65 6e 61 62 6c 65 20 77 61 73 3a 20 25     cs_enable was: %
     300:	64 2c 20 77 61 6e 74 3a 20 25 64 0a 00              d, want: %d..

0000030d <__c.3599>:
     30d:	73 61 66 65 66 72 65 65 3a 20 46 52 45 45 20 45     safefree: FREE E
     31d:	52 52 4f 52 20 28 25 75 29 2c 20 74 6f 70 3a 28     RROR (%u), top:(
     32d:	25 75 29 0a 00                                      %u)..

00000332 <__c.3590>:
     332:	73 61 66 65 6d 61 6c 6c 6f 63 28 25 64 29 20 66     safemalloc(%d) f
     342:	61 69 6c 65 64 21 0a 00                             ailed!..

0000034a <__c.3584>:
     34a:	73 61 66 65 63 61 6c 6c 6f 63 28 25 64 2c 25 64     safecalloc(%d,%d
     35a:	29 20 66 61 69 6c 65 64 21 0a 00                    ) failed!..

00000365 <__c.3569>:
     365:	20 20 5f 5f 62 72 6b 76 61 6c 3a 20 20 20 20 25       __brkval:    %
     375:	35 75 0a 00                                         5u..

00000379 <__c.3567>:
     379:	20 20 4d 61 6c 6c 6f 63 20 73 74 61 72 74 20 25       Malloc start %
     389:	35 75 20 20 65 6e 64 3a 20 25 35 75 0a 00           5u  end: %5u..

00000397 <__c.3565>:
     397:	20 20 48 65 61 70 3a 20 73 74 61 72 74 3a 20 25       Heap: start: %
     3a7:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003b5 <__c.3563>:
     3b5:	20 20 44 61 74 61 20 20 73 74 61 72 74 3a 20 25       Data  start: %
     3c5:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003d3 <__c.3561>:
     3d3:	20 20 42 53 53 20 20 20 73 74 61 72 74 3a 20 25       BSS   start: %
     3e3:	35 75 2c 20 65 6e 64 3a 20 25 35 75 0a 00           5u, end: %5u..

000003f1 <__c.3559>:
     3f1:	20 20 53 74 61 63 6b 20 46 72 65 65 3a 20 20 25       Stack Free:  %
     401:	75 0a 00                                            u..

00000404 <__c.3557>:
     404:	20 20 53 74 61 63 6b 20 54 6f 70 3a 20 20 20 25       Stack Top:   %
     414:	75 0a 00                                            u..

00000417 <__c.3555>:
     417:	46 72 65 65 20 52 61 6d 3a 25 75 0a 00              Free Ram:%u..

00000424 <__c.3553>:
     424:	53 50 49 30 5f 4d 6f 64 65 3a 20 49 6e 76 61 6c     SPI0_Mode: Inval
     434:	69 64 20 6d 6f 64 65 28 25 64 29 0a 00              id mode(%d)..

00000441 <__c.3585>:
     441:	72 74 63 5f 72 65 61 64 20 65 72 72 6f 72 0a 00     rtc_read error..

00000451 <__c.3578>:
     451:	72 74 63 5f 77 72 69 74 65 20 65 72 72 6f 72 0a     rtc_write error.
	...

00000462 <__c.3568>:
     462:	72 74 63 5f 69 6e 69 74 20 72 61 6d 20 2d 20 77     rtc_init ram - w
     472:	72 69 74 65 20 65 72 72 6f 72 0a 00                 rite error..

0000047e <__c.3566>:
     47e:	72 74 63 20 5f 77 72 69 74 65 20 65 70 6f 63 68     rtc _write epoch
     48e:	20 66 61 69 6c 65 64 0a 00                           failed..

00000497 <__c.3555>:
     497:	72 74 63 5f 72 75 6e 20 2d 20 77 72 69 74 65 20     rtc_run - write 
     4a7:	65 72 72 6f 72 0a 00                                error..

000004ae <__c.3553>:
     4ae:	72 74 63 5f 72 75 6e 20 72 65 61 64 20 65 72 72     rtc_run read err
     4be:	6f 72 0a 00                                         or..

000004c2 <__c.3545>:
     4c2:	72 74 63 5f 73 74 61 74 65 20 72 65 61 64 20 65     rtc_state read e
     4d2:	72 72 6f 72 0a 00                                   rror..

000004d8 <__c.3703>:
     4d8:	25 73 20 65 78 70 65 63 74 65 64 20 25 64 20 61     %s expected %d a
     4e8:	72 67 75 6d 65 6e 74 73 20 6f 6e 6c 79 20 67 6f     rguments only go
     4f8:	74 20 25 64 0a 00                                   t %d..

000004fe <__c.3537>:
     4fe:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     50e:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

0000051e <__c.3616>:
     51e:	54 69 6d 65 72 73 20 65 6e 61 62 6c 65 64 0a 00     Timers enabled..

0000052e <__c.3614>:
     52e:	43 6c 6f 63 6b 20 49 6e 73 74 61 6c 6c 65 64 0a     Clock Installed.
	...

0000053f <__c.3612>:
     53f:	43 6c 6f 63 6b 20 74 61 73 6b 20 69 6e 69 74 20     Clock task init 
     54f:	66 61 69 6c 65 64 0a 00                             failed..

00000557 <__c.3610>:
     557:	43 6c 6f 63 6b 20 49 6e 69 74 0a 00                 Clock Init..

00000563 <__c.3608>:
     563:	54 69 6d 65 72 73 20 63 6f 6e 66 69 67 75 72 65     Timers configure
     573:	64 0a 00                                            d..

00000576 <__c.3606>:
     576:	54 69 6d 65 72 73 20 69 6e 69 74 20 63 61 6c 6c     Timers init call
     586:	65 64 0a 00                                         ed..

0000058a <__c.3586>:
     58a:	5b 54 69 6d 65 3a 25 73 5d 0a 00                    [Time:%s]..

00000595 <__c.3584>:
     595:	5b 25 73 20 54 69 6d 65 3a 25 73 5d 0a 00           [%s Time:%s]..

000005a3 <__c.3575>:
     5a3:	5b 53 65 63 6f 6e 64 73 3a 20 25 73 5d 0a 00        [Seconds: %s]..

000005b2 <__c.3570>:
     5b2:	25 6c 64 2e 25 30 39 6c 64 00                       %ld.%09ld.

000005bc <__c.3550>:
     5bc:	73 65 74 5f 74 69 6d 65 72 73 3a 20 4e 6f 20 6d     set_timers: No m
     5cc:	6f 72 65 20 74 69 6d 65 72 73 21 0a 00              ore timers!..

000005d9 <__c.3825>:
     5d9:	63 6c 6b 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     clk time:    %s.
	...

000005ea <__c.3823>:
     5ea:	63 6c 6b 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     clk seconds: %lu
     5fa:	0a 00                                               ..

000005fc <__c.3821>:
     5fc:	52 54 43 20 72 65 61 64 20 66 61 69 6c 65 64 0a     RTC read failed.
	...

0000060d <__c.3819>:
     60d:	72 74 63 20 74 69 6d 65 3a 20 20 20 20 25 73 0a     rtc time:    %s.
	...

0000061e <__c.3817>:
     61e:	72 74 63 20 73 65 63 6f 6e 64 73 3a 20 25 6c 75     rtc seconds: %lu
     62e:	0a 00                                               ..

00000630 <__c.3810>:
     630:	75 73 65 20 73 65 74 64 61 74 65 20 63 6f 6d 6d     use setdate comm
     640:	61 6e 64 20 74 6f 20 63 68 61 6e 67 65 20 74 69     and to change ti
     650:	6d 65 0a 00                                         me..

00000654 <__c.3808>:
     654:	72 74 63 20 72 65 61 64 20 65 72 72 6f 72 61 66     rtc read erroraf
     664:	74 65 72 20 69 6e 69 74 0a 00                       ter init..

0000066e <__c.3806>:
     66e:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     67e:	61 69 6c 65 64 0a 00                                ailed..

00000685 <__c.3804>:
     685:	61 74 74 65 6d 70 74 69 6e 67 20 72 74 63 20 69     attempting rtc i
     695:	6e 69 74 0a 00                                      nit..

0000069a <__c.3802>:
     69a:	72 74 63 20 75 6e 69 6e 69 74 69 6c 69 7a 65 64     rtc uninitilized
     6aa:	0a 00                                               ..

000006ac <__c.3793>:
     6ac:	44 53 54 20 45 4e 44 20 20 20 20 20 20 20 20 20     DST END         
     6bc:	47 4d 54 3a 20 25 73 0a 00                          GMT: %s..

000006c5 <__c.3791>:
     6c5:	44 53 54 20 53 54 41 52 54 20 20 20 20 20 20 20     DST START       
     6d5:	47 4d 54 3a 20 25 73 0a 00                          GMT: %s..

000006de <__c.3787>:
     6de:	44 53 54 20 45 4e 44 20 20 20 6c 6f 63 61 6c 74     DST END   localt
     6ee:	69 6d 65 3a 20 25 73 0a 00                          ime: %s..

000006f7 <__c.3785>:
     6f7:	44 53 54 20 53 54 41 52 54 20 6c 6f 63 61 6c 74     DST START localt
     707:	69 6d 65 3a 20 25 73 0a 00                          ime: %s..

00000710 <__c.3756>:
     710:	72 74 63 20 66 6f 72 63 65 20 69 6e 69 74 20 66     rtc force init f
     720:	61 69 6c 65 64 0a 00                                ailed..

00000727 <__c.3754>:
     727:	69 6e 76 61 6c 69 64 20 6d 69 6e 3a 20 25 64 0a     invalid min: %d.
	...

00000738 <__c.3752>:
     738:	69 6e 76 61 6c 69 64 20 68 6f 75 72 3a 20 25 64     invalid hour: %d
     748:	0a 00                                               ..

0000074a <__c.3750>:
     74a:	69 6e 76 61 6c 69 64 20 64 61 79 3a 20 25 64 0a     invalid day: %d.
	...

0000075b <__c.3748>:
     75b:	69 6e 76 61 6c 69 64 20 6d 6f 6e 3a 20 25 64 0a     invalid mon: %d.
	...

0000076c <__c.3746>:
     76c:	69 6e 76 61 6c 69 64 20 79 65 61 72 3a 20 25 64     invalid year: %d
     77c:	0a 00                                               ..

0000077e <__c.3725>:
     77e:	45 6e 74 65 72 20 64 61 74 65 20 59 59 59 59 20     Enter date YYYY 
     78e:	4d 4d 20 44 44 20 48 48 3a 4d 4d 3a 53 53 20 3e     MM DD HH:MM:SS >
	...

0000079f <__c.3600>:
     79f:	25 73 20 25 73 20 25 32 64 20 25 30 32 64 3a 25     %s %s %2d %02d:%
     7af:	30 32 64 3a 25 30 32 64 20 25 34 64 00              02d:%02d %4d.

000007bc <__c.3568>:
     7bc:	73 65 6c 65 63 74 20 66 61 69 6c 65 64 21 0a 00     select failed!..

000007cc <__c.3597>:
     7cc:	45 4e 44 20 4d 4d 43 20 49 4e 49 54 0a 00           END MMC INIT..

000007da <__c.3595>:
     7da:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 3a 20     MMC Block Size: 
     7ea:	25 6c 64 0a 00                                      %ld..

000007ef <__c.3593>:
     7ef:	4d 4d 43 20 42 6c 6f 63 6b 20 53 69 7a 65 20 2d     MMC Block Size -
     7ff:	20 72 65 61 64 20 66 61 69 6c 65 64 0a 00            read failed..

0000080d <__c.3590>:
     80d:	2c 20 43 6f 64 65 20 70 61 67 65 3a 20 25 75 0a     , Code page: %u.
	...

0000081e <__c.3588>:
     81e:	4c 46 4e 20 45 6e 61 62 6c 65 64 00                 LFN Enabled.

0000082a <__c.3586>:
     82a:	53 54 41 52 54 20 4d 4d 43 20 49 4e 49 54 0a 00     START MMC INIT..

0000083a <__c.3573>:
     83a:	4d 4d 43 20 54 49 4d 45 4f 55 54 0a 00              MMC TIMEOUT..

00000847 <__c.3545>:
     847:	4d 4d 43 20 43 6c 6f 63 6b 20 74 61 73 6b 20 69     MMC Clock task i
     857:	6e 69 74 20 66 61 69 6c 65 64 0a 00                 nit failed..

00000863 <__c.3617>:
     863:	0a 00                                               ..

00000865 <__c.3615>:
     865:	25 73 20 25 75 2f 25 30 32 75 2f 25 30 32 75 20     %s %u/%02u/%02u 
     875:	25 30 32 75 3a 25 30 32 75 20 25 39 6c 75 20 25     %02u:%02u %9lu %
     885:	73 00                                               s.

00000887 <__c.3613>:
     887:	66 61 74 66 73 5f 66 69 6c 69 6e 66 6f 5f 6c 69     fatfs_filinfo_li
     897:	73 74 3a 20 65 6d 70 74 79 0a 00                    st: empty..

000008a2 <__c.3607>:
     8a2:	25 75 20 66 69 6c 65 73 2c 20 25 6c 75 20 62 79     %u files, %lu by
     8b2:	74 65 73 2e 0a 25 75 20 66 6f 6c 64 65 72 73 2e     tes..%u folders.
     8c2:	0a 25 6c 75 20 4b 42 20 74 6f 74 61 6c 20 64 69     .%lu KB total di
     8d2:	73 6b 20 73 70 61 63 65 2e 0a 25 6c 75 20 4b 42     sk space..%lu KB
     8e2:	20 61 76 61 69 6c 61 62 6c 65 2e 0a 00               available...

000008ef <__c.3605>:
     8ef:	56 6f 6c 75 6d 65 20 53 2f 4e 20 20 20 20 20 20     Volume S/N      
     8ff:	20 20 20 20 20 20 20 20 3d 20 25 30 34 58 2d 25             = %04X-%
     90f:	30 34 58 0a 00                                      04X..

00000914 <__c.3603>:
     914:	56 6f 6c 75 6d 65 20 6e 61 6d 65 20 20 20 20 20     Volume name     
     924:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000932 <__c.3601>:
     932:	44 61 74 61 20 73 74 61 72 74 20 28 6c 62 61 29     Data start (lba)
     942:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000951 <__c.3599>:
     951:	44 49 52 20 73 74 61 72 74 20 28 6c 62 61 2c 63     DIR start (lba,c
     961:	6c 75 73 74 6f 72 29 20 3d 20 25 6c 75 0a 00        lustor) = %lu..

00000970 <__c.3597>:
     970:	46 41 54 20 73 74 61 72 74 20 28 6c 62 61 29 20     FAT start (lba) 
     980:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

0000098f <__c.3595>:
     98f:	4e 75 6d 62 65 72 20 6f 66 20 63 6c 75 73 74 65     Number of cluste
     99f:	72 73 20 20 20 20 20 20 3d 20 25 6c 75 0a 00        rs      = %lu..

000009ae <__c.3593>:
     9ae:	53 65 63 74 6f 72 73 2f 46 41 54 20 20 20 20 20     Sectors/FAT     
     9be:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

000009cd <__c.3591>:
     9cd:	52 6f 6f 74 20 44 49 52 20 65 6e 74 72 69 65 73     Root DIR entries
     9dd:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

000009eb <__c.3589>:
     9eb:	4e 75 6d 62 65 72 20 6f 66 20 46 41 54 73 20 20     Number of FATs  
     9fb:	20 20 20 20 20 20 20 20 3d 20 25 75 0a 00                   = %u..

00000a09 <__c.3587>:
     a09:	42 79 74 65 73 2f 43 6c 75 73 74 65 72 20 20 20     Bytes/Cluster   
     a19:	20 20 20 20 20 20 20 20 3d 20 25 6c 75 0a 00                = %lu..

00000a28 <__c.3585>:
     a28:	46 41 54 20 74 79 70 65 20 20 20 20 20 20 20 20     FAT type        
     a38:	20 20 20 20 20 20 20 20 3d 20 25 73 0a 00                   = %s..

00000a46 <__c.3583>:
     a46:	66 61 74 66 73 20 73 74 61 74 75 73 3a 25 73 0a     fatfs status:%s.
	...

00000a57 <__c.3547>:
     a57:	72 63 3d 25 75 0a 00                                rc=%u..

00000a5e <__c.3585>:
     a5e:	2c 20 25 31 30 6c 75 4b 20 62 79 74 65 73 20 66     , %10luK bytes f
     a6e:	72 65 65 0a 00                                      ree..

00000a73 <__c.3583>:
     a73:	25 34 75 20 46 69 6c 65 28 73 29 2c 25 31 30 6c     %4u File(s),%10l
     a83:	75 20 62 79 74 65 73 20 74 6f 74 61 6c 0a 25 34     u bytes total.%4
     a93:	75 20 44 69 72 28 73 29 00                          u Dir(s).

00000a9c <__c.3579>:
     a9c:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000aaa <__c.3566>:
     aaa:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     aba:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000aca <__c.3564>:
     aca:	45 4e 44 20 4d 4d 43 20 54 45 53 54 0a 00           END MMC TEST..

00000ad8 <__c.3562>:
     ad8:	4d 4d 43 20 44 69 72 65 63 74 6f 72 79 20 4c 69     MMC Directory Li
     ae8:	73 74 0a 00                                         st..

00000aec <__c.3560>:
     aec:	53 54 41 52 54 20 4d 4d 43 20 54 45 53 54 0a 00     START MMC TEST..

00000afc <__c.3558>:
     afc:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d     ================
     b0c:	3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 3d 0a 00     ==============..

00000b1c <__c.3550>:
     b1c:	69 6e 64 3a 25 64 2c 61 72 67 63 3a 25 64 0a 00     ind:%d,argc:%d..

00000b2c <__c.3540>:
     b2c:	4e 6f 74 65 3a 20 66 61 74 66 73 20 74 65 73 74     Note: fatfs test
     b3c:	73 20 4d 55 53 54 20 73 74 61 72 74 20 77 69 74     s MUST start wit
     b4c:	68 20 22 66 61 74 66 73 22 20 6b 65 79 77 6f 72     h "fatfs" keywor
     b5c:	64 0a 66 61 74 66 73 20 68 65 6c 70 0a 66 61 74     d.fatfs help.fat
     b6c:	66 73 20 6d 6d 63 5f 74 65 73 74 0a 66 61 74 66     fs mmc_test.fatf
     b7c:	73 20 6d 6d 63 5f 69 6e 69 74 0a 66 61 74 66 73     s mmc_init.fatfs
     b8c:	20 6c 73 20 64 69 72 0a 66 61 74 66 73 20 73 74      ls dir.fatfs st
     b9c:	61 74 75 73 20 66 69 6c 65 0a 0a 00                 atus file...

00000ba8 <__c.3538>:
     ba8:	66 61 74 66 73 20 68 65 6c 70 0a 00                 fatfs help..

00000bb4 <__c.3897>:
     bb4:	45 78 70 65 63 74 65 64 20 2f 64 65 76 2f 73 64     Expected /dev/sd
     bc4:	61 20 2e 2e 20 2f 64 65 76 2f 73 64 6a 0a 00        a .. /dev/sdj..

00000bd3 <__c.3870>:
     bd3:	25 73 0a 00                                         %s..

00000bd7 <__c.3868>:
     bd7:	25 73 3a 20 25 73 0a 00                             %s: %s..

00000bdf <__c.3764>:
     bdf:	09 63 74 69 6d 65 3a 20 25 73 0a 00                 .ctime: %s..

00000beb <__c.3762>:
     beb:	09 6d 74 69 6d 65 3a 20 25 73 0a 00                 .mtime: %s..

00000bf7 <__c.3760>:
     bf7:	09 61 74 69 6d 65 3a 20 25 73 0a 00                 .atime: %s..

00000c03 <__c.3758>:
     c03:	09 47 49 44 3a 20 20 20 25 6c 75 0a 00              .GID:   %lu..

00000c10 <__c.3756>:
     c10:	09 55 49 44 3a 20 20 20 25 6c 75 0a 00              .UID:   %lu..

00000c1d <__c.3754>:
     c1d:	09 4d 6f 64 65 3a 20 20 25 6c 6f 0a 00              .Mode:  %lo..

00000c2a <__c.3752>:
     c2a:	55 6e 6b 6e 6f 77 6e 0a 00                          Unknown..

00000c33 <__c.3750>:
     c33:	46 69 6c 65 0a 00                                   File..

00000c39 <__c.3748>:
     c39:	44 49 52 0a 00                                      DIR..

00000c3e <__c.3746>:
     c3e:	09 54 79 70 65 3a 20 20 00                          .Type:  .

00000c47 <__c.3744>:
     c47:	09 53 69 7a 65 3a 20 20 25 6c 75 0a 00              .Size:  %lu..

00000c54 <__c.3623>:
     c54:	53 65 65 6b 20 66 61 69 6c 65 64 00                 Seek failed.

00000c60 <__c.3552>:
     c60:	66 70 75 74 63 20 73 74 72 65 61 6d 2d 3e 70 75     fputc stream->pu
     c70:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c78 <__c.3545>:
     c78:	66 67 65 74 63 20 73 74 72 65 61 6d 2d 3e 67 65     fgetc stream->ge
     c88:	74 20 4e 55 4c 4c 0a 00                             t NULL..

00000c90 <__c.3785>:
     c90:	43 61 6e 27 20 6f 70 65 6e 3a 20 25 73 0a 00        Can' open: %s..

00000c9f <__c.3775>:
     c9f:	53 75 6d 3a 20 25 30 34 58 68 2c 20 25 35 75 0a     Sum: %04Xh, %5u.
	...

00000cb0 <__c.3767>:
     cb0:	43 61 6e 27 20 6f 70 65 6e 3a 20 25 73 0a 00        Can' open: %s..

00000cbf <__c.3757>:
     cbf:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000ccc <__c.3755>:
     ccc:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000cdc <__c.3747>:
     cdc:	46 69 6c 65 73 3a 20 25 64 0a 00                    Files: %d..

00000ce7 <__c.3743>:
     ce7:	6e 61 6d 65 3a 5b 25 73 5d 20 74 6f 6f 20 6c 6f     name:[%s] too lo
     cf7:	6e 67 20 77 69 74 68 20 66 75 6c 6c 20 70 61 74     ng with full pat
     d07:	68 0a 00                                            h..

00000d0a <__c.3740>:
     d0a:	6f 70 65 6e 64 69 72 20 66 61 69 6c 65 64 0a 00     opendir failed..

00000d1a <__c.3735>:
     d1a:	6c 73 3a 20 63 61 6e 6e 6f 74 20 73 74 61 74 20     ls: cannot stat 
     d2a:	5b 25 73 5d 0a 00                                   [%s]..

00000d30 <__c.3733>:
     d30:	4c 69 73 74 69 6e 67 3a 5b 25 73 5d 0a 00           Listing:[%s]..

00000d3e <__c.3731>:
     d3e:	6c 73 3a 20 43 61 6e 27 74 20 67 65 74 20 63 75     ls: Can't get cu
     d4e:	72 72 65 6e 74 20 64 69 72 65 63 74 6f 72 79 0a     rrent directory.
	...

00000d5f <__c.3718>:
     d5f:	25 73 20 6e 6f 6e 65 20 6e 6f 6e 65 20 25 31 32     %s none none %12
     d6f:	6c 64 20 25 73 20 25 73 0a 00                       ld %s %s..

00000d79 <__c.3713>:
     d79:	25 73 0a 00                                         %s..

00000d7d <__c.3711>:
     d7d:	63 61 6e 20 6e 6f 74 20 73 74 61 74 3a 20 25 73     can not stat: %s
     d8d:	0a 00                                               ..

00000d8f <__c.3699>:
     d8f:	0d 00                                               ..

00000d91 <__c.3697>:
     d91:	4d 6f 72 65 2e 2e 00                                More...

00000d98 <__c.3687>:
     d98:	0a 00                                               ..

00000d9a <__c.3682>:
     d9a:	0a 00                                               ..

00000d9c <__c.3674>:
     d9c:	20 3a 20 00                                          : .

00000da0 <__c.3669>:
     da0:	20 20 20 00                                            .

00000da4 <__c.3664>:
     da4:	25 30 32 78 20 00                                   %02x .

00000daa <__c.3662>:
     daa:	25 30 38 6c 78 20 3a 20 00                          %08lx : .

00000db3 <__c.3660>:
     db3:	43 61 6e 27 20 6f 70 65 6e 3a 20 25 73 0a 00        Can' open: %s..

00000dc2 <__c.3648>:
     dc2:	25 6c 75 20 62 79 74 65 73 20 63 6f 70 69 65 64     %lu bytes copied
     dd2:	2e 0a 00                                            ...

00000dd5 <__c.3644>:
     dd5:	43 6f 70 69 65 64 3a 20 25 30 38 6c 64 0d 00        Copied: %08ld..

00000de4 <__c.3641>:
     de4:	57 72 69 74 65 20 65 72 72 6f 72 0a 00              Write error..

00000df1 <__c.3639>:
     df1:	0a 43 6f 70 79 69 6e 67 2e 2e 2e 0a 00              .Copying.....

00000dfe <__c.3637>:
     dfe:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000e0e <__c.3635>:
     e0e:	43 72 65 61 74 69 6e 67 20 25 73 0a 00              Creating %s..

00000e1b <__c.3633>:
     e1b:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000e2b <__c.3631>:
     e2b:	4f 70 65 6e 69 6e 67 20 25 73 0a 00                 Opening %s..

00000e37 <__c.3620>:
     e37:	25 6c 64 20 62 79 74 65 73 0a 00                    %ld bytes..

00000e42 <__c.3618>:
     e42:	0a 00                                               ..

00000e44 <__c.3613>:
     e44:	43 61 6e 27 74 20 6f 70 65 6e 3a 20 25 73 0a 00     Can't open: %s..

00000e54 <__c.3602>:
     e54:	25 73 0a 00                                         %s..

00000e58 <__c.3571>:
     e58:	70 6f 73 69 78 20 70 72 65 66 69 78 20 69 73 20     posix prefix is 
     e68:	6f 70 74 69 6f 6e 61 6c 0a 70 6f 73 69 78 20 63     optional.posix c
     e78:	68 6d 6f 64 20 66 69 6c 65 20 4e 4e 4e 0a 70 6f     hmod file NNN.po
     e88:	73 69 78 20 63 61 74 20 66 69 6c 65 20 5b 2d 70     six cat file [-p
     e98:	5d 0a 70 6f 73 69 78 20 63 64 20 64 69 72 0a 70     ].posix cd dir.p
     ea8:	6f 73 69 78 20 63 6f 70 79 20 66 69 6c 65 31 20     osix copy file1 
     eb8:	66 69 6c 65 32 0a 70 6f 73 69 78 20 68 65 78 64     file2.posix hexd
     ec8:	75 6d 70 20 66 69 6c 65 20 5b 2d 70 5d 0a 70 6f     ump file [-p].po
     ed8:	73 69 78 20 6c 6f 67 20 73 74 72 0a 70 6f 73 69     six log str.posi
     ee8:	78 20 6c 73 20 64 69 72 20 5b 2d 6c 5d 0a 70 6f     x ls dir [-l].po
     ef8:	73 69 78 20 6d 6b 64 69 72 20 64 69 72 0a 70 6f     six mkdir dir.po
     f08:	73 69 78 20 6d 6b 66 73 0a 70 6f 73 69 78 20 70     six mkfs.posix p
     f18:	61 67 65 20 4e 4e 0a 70 6f 73 69 78 20 70 77 64     age NN.posix pwd
     f28:	0a 70 6f 73 69 78 20 73 74 61 74 20 66 69 6c 65     .posix stat file
     f38:	0a 70 6f 73 69 78 20 73 75 6d 20 66 69 6c 65 0a     .posix sum file.
     f48:	70 6f 73 69 78 20 72 6d 20 66 69 6c 65 0a 70 6f     posix rm file.po
     f58:	73 69 78 20 72 6d 64 69 72 20 64 69 72 0a 70 6f     six rmdir dir.po
     f68:	73 69 78 20 72 65 6e 61 6d 65 20 6f 6c 64 20 6e     six rename old n
     f78:	65 77 0a 70 6f 73 69 78 20 75 70 6c 6f 61 64 20     ew.posix upload 
     f88:	66 69 6c 65 0a 0a 00                                file...

00000f8f <__c.3569>:
     f8f:	70 6f 73 69 78 20 68 65 6c 70 0a 00                 posix help..

00000f9b <__c.3760>:
     f9b:	43 6c 6f 73 65 20 65 72 72 6f 72 3a 20 00           Close error: .

00000fa9 <__c.3754>:
     fa9:	53 65 65 6b 20 65 72 72 6f 72 3a 20 00              Seek error: .

00000fb6 <__c.3747>:
     fb6:	57 72 69 74 65 20 65 72 72 6f 72 3a 20 00           Write error: .

00000fc4 <__c.3738>:
     fc4:	52 65 61 64 20 65 72 72 6f 72 3a 20 00              Read error: .

00000fd1 <__c.3729>:
     fd1:	4f 70 65 6e 20 65 72 72 6f 72 3a 5b 25 73 5d 20     Open error:[%s] 
	...

00000fe2 <__c.3715>:
     fe2:	5b 50 50 52 20 44 49 53 41 42 4c 45 20 41 4c 4c     [PPR DISABLE ALL
     ff2:	5d 0a 00                                            ]..

00000ff5 <__c.3697>:
     ff5:	47 50 49 42 20 43 6c 6f 63 6b 20 74 61 73 6b 20     GPIB Clock task 
    1005:	69 6e 69 74 20 66 61 69 6c 65 64 0a 00              init failed..

00001012 <__c.4244>:
    1012:	5b 67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 20     [gpib_write_str 
    1022:	73 65 6e 74 28 25 64 29 20 65 78 70 65 63 74 65     sent(%d) expecte
    1032:	64 28 25 64 29 5d 0a 00                             d(%d)]..

0000103a <__c.4239>:
    103a:	67 70 69 62 5f 77 72 69 74 65 5f 73 74 72 3a 20     gpib_write_str: 
    104a:	73 69 7a 65 20 3d 20 30 0a 00                       size = 0..

00001054 <__c.4229>:
    1054:	5b 67 70 69 62 5f 72 65 61 64 5f 73 74 72 20 72     [gpib_read_str r
    1064:	65 61 64 28 25 64 29 20 65 78 70 65 63 74 65 64     ead(%d) expected
    1074:	28 25 64 29 5d 0a 00                                (%d)]..

0000107b <__c.4225>:
    107b:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 28 69 6e     gpib_read_str(in
    108b:	64 3a 25 64 29 3a 20 41 54 4e 20 25 30 32 58 48     d:%d): ATN %02XH
    109b:	20 75 6e 65 78 70 65 63 74 65 64 0a 00               unexpected..

000010a8 <__c.4222>:
    10a8:	67 70 69 62 5f 72 65 61 64 5f 73 74 72 3a 20 73     gpib_read_str: s
    10b8:	69 7a 65 20 3d 20 30 0a 00                          ize = 0..

000010c1 <__c.4206>:
    10c1:	20 4d 53 41 20 25 30 32 58 68 00                     MSA %02Xh.

000010cc <__c.4204>:
    10cc:	20 4d 54 41 20 25 30 32 58 68 00                     MTA %02Xh.

000010d7 <__c.4202>:
    10d7:	20 4d 4c 41 20 25 30 32 58 68 00                     MLA %02Xh.

000010e2 <__c.4198>:
    10e2:	20 20 20 20 20 00                                        .

000010e8 <__c.4196>:
    10e8:	25 30 32 58 20 25 63 20 00                          %02X %c .

000010f1 <__c.4154>:
    10f1:	3c 4e 52 46 44 3d 25 64 2c 4e 44 41 56 3d 25 64     <NRFD=%d,NDAV=%d
    1101:	3e 0a 00                                            >..

00001104 <__c.4150>:
    1104:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1114:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

0000111e <__c.4146>:
    111e:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    112e:	20 4e 44 41 43 3d 3d 31 3e 0a 00                     NDAC==1>..

00001139 <__c.4143>:
    1139:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1149:	20 4e 52 46 44 3d 3d 30 3e 0a 00                     NRFD==0>..

00001154 <__c.4138>:
    1154:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    1164:	20 4e 52 46 44 3d 3d 31 20 26 26 20 4e 44 41 43      NRFD==1 && NDAC
    1174:	20 3d 3d 20 30 3e 0a 00                              == 0>..

0000117c <__c.4134>:
    117c:	3c 42 55 53 20 77 61 69 74 69 6e 67 20 66 6f 72     <BUS waiting for
    118c:	20 44 41 56 3d 3d 31 3e 0a 00                        DAV==1>..

00001196 <__c.4117>:
    1196:	67 70 69 62 5f 75 6e 72 65 61 64 3a 20 65 72 72     gpib_unread: err
    11a6:	6f 72 2c 20 63 61 6e 20 6f 6e 6c 79 20 62 65 20     or, can only be 
    11b6:	63 61 6c 6c 65 64 20 6f 6e 63 65 21 0a 00           called once!..

000011c4 <__c.4112>:
    11c4:	5b 52 45 4e 20 48 49 5d 0a 00                       [REN HI]..

000011ce <__c.4110>:
    11ce:	5b 52 45 4e 20 4c 4f 57 5d 0a 00                    [REN LOW]..

000011d9 <__c.4105>:
    11d9:	5b 49 46 43 20 53 45 4e 54 5d 0a 00                 [IFC SENT]..

000011e5 <__c.4097>:
    11e5:	5b 50 50 52 3a 25 30 32 58 48 2c 20 50 49 4e 3a     [PPR:%02XH, PIN:
    11f5:	25 30 32 58 48 2c 20 44 44 52 3a 25 30 32 58 48     %02XH, DDR:%02XH
    1205:	5d 0a 00                                            ]..

00001208 <__c.4091>:
    1208:	5b 44 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [DPPR bit:%d, ma
    1218:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001223 <__c.4089>:
    1223:	67 70 69 62 5f 64 69 73 61 62 6c 65 5f 50 50 52     gpib_disable_PPR
    1233:	3a 20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20     : bit %d out of 
    1243:	72 61 6e 67 65 0a 00                                range..

0000124a <__c.4084>:
    124a:	5b 45 50 50 52 20 62 69 74 3a 25 64 2c 20 6d 61     [EPPR bit:%d, ma
    125a:	73 6b 3a 25 30 32 58 48 5d 0a 00                    sk:%02XH]..

00001265 <__c.4082>:
    1265:	67 70 69 62 5f 65 6e 61 62 6c 65 5f 50 50 52 3a     gpib_enable_PPR:
    1275:	20 62 69 74 20 25 64 20 6f 75 74 20 6f 66 20 72      bit %d out of r
    1285:	61 6e 67 65 0a 00                                   ange..

0000128b <__c.4077>:
    128b:	5b 47 50 49 42 20 53 54 41 54 45 20 49 4e 49 54     [GPIB STATE INIT
    129b:	5d 0a 00                                            ]..

0000129e <__c.4072>:
    129e:	5b 47 50 49 42 20 42 55 53 5f 49 4e 49 54 5d 0a     [GPIB BUS_INIT].
	...

000012af <__c.4255>:
    12af:	0a 00                                               ..

000012b1 <__c.4247>:
    12b1:	2e 00                                               ..

000012b3 <__c.4245>:
    12b3:	25 63 00                                            %c.

000012b6 <__c.4243>:
    12b6:	20 7c 20 00                                          | .

000012ba <__c.4238>:
    12ba:	20 25 30 32 58 00                                    %02X.

000012c0 <__c.4236>:
    12c0:	0a 00                                               ..

000012c2 <__c.4234>:
    12c2:	5b 44 75 6d 70 3a 20 25 64 5d 0a 00                 [Dump: %d]..

000012ce <__c.4223>:
    12ce:	5b 50 52 49 4e 54 45 52 20 63 6c 6f 73 65 5d 0a     [PRINTER close].
	...

000012df <__c.4218>:
    12df:	5b 53 41 20 25 30 32 58 48 2c 20 6c 69 73 74 65     [SA %02XH, liste
    12ef:	6e 3a 25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30     n:%02XH, talk:%0
    12ff:	32 58 48 5d 0a 00                                   2XH]..

00001305 <__c.4216>:
    1305:	5b 53 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [SA %02XH AMIGO]
    1315:	0a 00                                               ..

00001317 <__c.4214>:
    1317:	5b 53 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [SA %02XH SS80].
	...

00001328 <__c.4209>:
    1328:	5b 54 41 20 25 30 32 58 48 5d 0a 00                 [TA %02XH]..

00001334 <__c.4207>:
    1334:	5b 50 52 49 4e 54 45 52 20 4f 50 45 4e 5d 0a 00     [PRINTER OPEN]..

00001344 <__c.4205>:
    1344:	5b 54 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [TA %02XH PRINTE
    1354:	52 5d 0a 00                                         R]..

00001358 <__c.4203>:
    1358:	5b 54 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [TA %02XH AMIGO]
    1368:	0a 00                                               ..

0000136a <__c.4201>:
    136a:	5b 54 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [TA %02XH SS80].
	...

0000137b <__c.4199>:
    137b:	5b 55 4e 54 5d 0a 00                                [UNT]..

00001382 <__c.4194>:
    1382:	5b 4c 41 20 25 30 32 58 48 5d 0a 00                 [LA %02XH]..

0000138e <__c.4192>:
    138e:	5b 4c 41 20 25 30 32 58 48 20 50 52 49 4e 54 45     [LA %02XH PRINTE
    139e:	52 5d 0a 00                                         R]..

000013a2 <__c.4190>:
    13a2:	5b 4c 41 20 25 30 32 58 48 20 53 53 38 30 5d 0a     [LA %02XH SS80].
	...

000013b3 <__c.4188>:
    13b3:	5b 4c 41 20 25 30 32 58 48 20 41 4d 49 47 4f 5d     [LA %02XH AMIGO]
    13c3:	0a 00                                               ..

000013c5 <__c.4186>:
    13c5:	0a 00                                               ..

000013c7 <__c.4184>:
    13c7:	5b 55 4e 4c 5d 0a 00                                [UNL]..

000013ce <__c.4179>:
    13ce:	5b 48 50 49 42 20 28 25 30 32 58 48 29 20 6e 6f     [HPIB (%02XH) no
    13de:	74 20 64 65 66 69 6e 65 64 5d 0a 00                 t defined]..

000013ea <__c.4177>:
    13ea:	5b 44 43 4c 5d 0a 00                                [DCL]..

000013f1 <__c.4175>:
    13f1:	5b 53 44 43 20 41 4d 49 47 4f 5d 0a 00              [SDC AMIGO]..

000013fe <__c.4173>:
    13fe:	5b 53 44 43 20 53 53 38 30 5d 0a 00                 [SDC SS80]..

0000140a <__c.4171>:
    140a:	5b 53 44 43 5d 0a 00                                [SDC]..

00001411 <__c.4169>:
    1411:	5b 53 50 44 5d 0a 00                                [SPD]..

00001418 <__c.4167>:
    1418:	5b 53 50 45 5d 0a 00                                [SPE]..

0000141f <__c.4165>:
    141f:	5b 50 50 55 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPU unsupported
    142f:	5d 0a 00                                            ]..

00001432 <__c.4163>:
    1432:	5b 50 50 43 20 75 6e 73 75 70 70 6f 72 74 65 64     [PPC unsupported
    1442:	5d 0a 00                                            ]..

00001445 <__c.4158>:
    1445:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    1455:	48 3d 25 30 34 58 48 5d 0a 00                       H=%04XH]..

0000145f <__c.4156>:
    145f:	5b 49 44 45 4e 54 20 55 6e 69 74 3a 25 30 32 58     [IDENT Unit:%02X
    146f:	48 3d 25 30 34 58 48 20 46 41 49 4c 45 44 5d 0a     H=%04XH FAILED].
	...

00001480 <__c.4129>:
    1480:	3c 4d 45 44 49 41 20 4d 49 53 53 49 4e 47 3e 0a     <MEDIA MISSING>.
	...

00001491 <__c.4127>:
    1491:	3c 49 4e 54 45 52 52 55 50 54 3e 0a 00              <INTERRUPT>..

0000149e <__c.4125>:
    149e:	3c 42 55 53 3e 0a 00                                <BUS>..

000014a5 <__c.4123>:
    14a5:	3c 54 49 4d 45 4f 55 54 3e 0a 00                    <TIMEOUT>..

000014b0 <__c.4121>:
    14b0:	3c 49 46 43 3e 0a 00                                <IFC>..

000014b7 <__c.4116>:
    14b7:	43 61 70 74 75 72 69 6e 67 20 43 6c 6f 73 65 64     Capturing Closed
    14c7:	0a 00                                               ..

000014c9 <__c.4114>:
    14c9:	44 6f 6e 65 0a 00                                   Done..

000014cf <__c.4110>:
    14cf:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

000014db <__c.4108>:
    14db:	50 72 65 73 73 20 41 4e 59 20 6b 65 79 20 74 6f     Press ANY key to
    14eb:	20 65 78 69 74 0a 00                                 exit..

000014f2 <__c.4106>:
    14f2:	46 55 4c 4c 20 47 50 49 42 20 42 55 53 20 68 61     FULL GPIB BUS ha
    1502:	6e 64 73 68 61 6b 65 20 6c 6f 67 67 69 6e 67 20     ndshake logging 
    1512:	72 65 71 75 65 73 74 65 64 0a 00                    requested..

0000151d <__c.4104>:
    151d:	43 61 70 74 75 72 69 6e 67 20 47 50 49 42 20 42     Capturing GPIB B
    152d:	55 53 20 74 6f 3a 25 73 0a 00                       US to:%s..

00001537 <__c.4058>:
    1537:	43 61 72 64 20 69 73 20 77 72 69 74 65 20 70 72     Card is write pr
    1547:	6f 74 65 63 74 65 64 0a 00                          otected..

00001550 <__c.4056>:
    1550:	25 73 20 68 61 64 20 25 64 20 65 72 72 6f 72 73     %s had %d errors
    1560:	0a 00                                               ..

00001562 <__c.4300>:
    1562:	50 6f 72 74 20 64 64 72 20 44 20 52 44 3a 5b 25     Port ddr D RD:[%
    1572:	30 32 58 48 5d 0a 00                                02XH]..

00001579 <__c.4298>:
    1579:	50 6f 72 74 20 64 64 72 20 43 20 52 44 3a 5b 25     Port ddr C RD:[%
    1589:	30 32 58 48 5d 0a 00                                02XH]..

00001590 <__c.4296>:
    1590:	50 6f 72 74 20 64 64 72 20 42 20 52 44 3a 5b 25     Port ddr B RD:[%
    15a0:	30 32 58 48 5d 0a 00                                02XH]..

000015a7 <__c.4294>:
    15a7:	50 6f 72 74 20 64 64 72 20 41 20 52 44 3a 5b 25     Port ddr A RD:[%
    15b7:	30 32 58 48 5d 0a 00                                02XH]..

000015be <__c.4292>:
    15be:	50 6f 72 74 20 6c 61 74 63 68 20 44 20 52 44 3a     Port latch D RD:
    15ce:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

000015d7 <__c.4290>:
    15d7:	50 6f 72 74 20 6c 61 74 63 68 20 43 20 52 44 3a     Port latch C RD:
    15e7:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

000015f0 <__c.4288>:
    15f0:	50 6f 72 74 20 6c 61 74 63 68 20 42 20 52 44 3a     Port latch B RD:
    1600:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

00001609 <__c.4286>:
    1609:	50 6f 72 74 20 6c 61 74 63 68 20 41 20 52 44 3a     Port latch A RD:
    1619:	5b 25 30 32 58 48 5d 0a 00                          [%02XH]..

00001622 <__c.4284>:
    1622:	50 6f 72 74 20 70 69 6e 73 20 44 20 52 44 3a 5b     Port pins D RD:[
    1632:	25 30 32 58 48 5d 0a 00                             %02XH]..

0000163a <__c.4282>:
    163a:	50 6f 72 74 20 70 69 6e 73 20 43 20 52 44 3a 5b     Port pins C RD:[
    164a:	25 30 32 58 48 5d 0a 00                             %02XH]..

00001652 <__c.4280>:
    1652:	50 6f 72 74 20 70 69 6e 73 20 42 20 52 44 3a 5b     Port pins B RD:[
    1662:	25 30 32 58 48 5d 0a 00                             %02XH]..

0000166a <__c.4278>:
    166a:	50 6f 72 74 20 70 69 6e 73 20 41 20 52 44 3a 5b     Port pins A RD:[
    167a:	25 30 32 58 48 5d 0a 00                             %02XH]..

00001682 <__c.4275>:
    1682:	64 65 62 75 67 3d 25 30 34 58 48 0a 00              debug=%04XH..

0000168f <__c.4267>:
    168f:	67 70 69 62 20 70 72 65 66 69 78 20 69 73 20 6f     gpib prefix is o
    169f:	70 74 69 6f 6e 61 6c 0a 67 70 69 62 20 61 64 64     ptional.gpib add
    16af:	72 65 73 73 65 73 0a 67 70 69 62 20 63 6f 6e 66     resses.gpib conf
    16bf:	69 67 0a 67 70 69 62 20 64 65 62 75 67 20 4e 0a     ig.gpib debug N.
    16cf:	67 70 69 62 20 65 6c 61 70 73 65 64 0a 67 70 69     gpib elapsed.gpi
    16df:	62 20 65 6c 61 70 73 65 64 5f 72 65 73 65 74 0a     b elapsed_reset.
    16ef:	67 70 69 62 20 74 61 73 6b 0a 67 70 69 62 20 74     gpib task.gpib t
    16ff:	72 61 63 65 20 66 69 6c 65 6e 61 6d 65 2e 74 78     race filename.tx
    170f:	74 20 5b 42 55 53 5d 0a 67 70 69 62 20 69 66 63     t [BUS].gpib ifc
    171f:	0a 67 70 69 62 20 70 6c 6f 74 20 66 69 6c 65 6e     .gpib plot filen
    172f:	61 6d 65 2e 74 78 74 0a 67 70 69 62 20 70 70 72     ame.txt.gpib ppr
    173f:	5f 62 69 74 5f 6f 6e 20 4e 0a 67 70 69 62 20 70     _bit_on N.gpib p
    174f:	70 72 5f 62 69 74 5f 6f 66 66 20 4e 0a 67 70 69     pr_bit_off N.gpi
    175f:	62 20 70 70 72 5f 73 65 74 20 58 58 0a 67 70 69     b ppr_set XX.gpi
    176f:	62 20 70 70 72 5f 69 6e 69 74 0a 67 70 69 62 20     b ppr_init.gpib 
    177f:	70 6f 72 74 20 72 65 61 64 20 70 69 6e 73 20 20     port read pins  
    178f:	20 5b 41 2d 44 5d 0a 67 70 69 62 20 70 6f 72 74      [A-D].gpib port
    179f:	20 72 65 61 64 20 6c 61 74 63 68 20 20 5b 41 2d      read latch  [A-
    17af:	44 5d 0a 67 70 69 62 20 70 6f 72 74 20 72 65 61     D].gpib port rea
    17bf:	64 20 64 64 72 20 20 20 20 5b 41 2d 44 5d 0a 67     d ddr    [A-D].g
    17cf:	70 69 62 20 70 6f 72 74 20 77 72 69 74 65 20 6c     pib port write l
    17df:	61 74 63 68 20 5b 41 2d 44 5d 20 76 61 6c 0a 67     atch [A-D] val.g
    17ef:	70 69 62 20 70 6f 72 74 20 77 72 69 74 65 20 70     pib port write p
    17ff:	69 6e 73 20 20 5b 41 2d 44 5d 20 76 61 6c 0a 0a     ins  [A-D] val..
	...

00001810 <__c.4265>:
    1810:	67 70 69 62 20 68 65 6c 70 0a 00                    gpib help..

0000181b <__c.4368>:
    181b:	5b 53 53 38 30 20 55 6e 6b 6e 6f 77 6e 20 53 43     [SS80 Unknown SC
    182b:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    183b:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    184b:	48 5d 0a 00                                         H]..

0000184f <__c.4366>:
    184f:	5b 53 53 38 30 20 53 43 20 55 6e 6b 6e 6f 77 6e     [SS80 SC Unknown
    185f:	3a 20 25 30 32 58 48 2c 20 6c 69 73 74 65 6e 3a     : %02XH, listen:
    186f:	25 30 32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58     %02XH, talk:%02X
    187f:	48 5d 0a 00                                         H]..

00001883 <__c.4364>:
    1883:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    1893:	74 5d 0a 00                                         t]..

00001897 <__c.4362>:
    1897:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

000018a6 <__c.4360>:
    18a6:	5b 53 53 38 30 20 52 65 70 6f 72 74 20 53 74 61     [SS80 Report Sta
    18b6:	74 65 5d 0a 00                                      te]..

000018bb <__c.4358>:
    18bb:	5b 53 53 30 30 20 45 78 65 63 75 74 65 20 53 74     [SS00 Execute St
    18cb:	61 74 65 5d 0a 00                                   ate]..

000018d1 <__c.4356>:
    18d1:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    18e1:	61 74 65 5d 0a 00                                   ate]..

000018e7 <__c.4351>:
    18e7:	5b 47 50 49 42 20 45 72 72 6f 72 20 52 65 74 75     [GPIB Error Retu
    18f7:	72 6e 20 2d 20 57 72 69 74 65 20 45 52 52 4f 52     rn - Write ERROR
    1907:	5d 0a 00                                            ]..

0000190a <__c.4344>:
    190a:	5b 53 53 38 30 20 49 6e 63 72 65 6d 65 6e 74 20     [SS80 Increment 
    191a:	74 6f 20 28 25 6c 58 48 29 5d 0a 00                 to (%lXH)]..

00001926 <__c.4337>:
    1926:	5b 41 6d 69 67 6f 20 43 6c 65 61 72 5d 0a 00        [Amigo Clear]..

00001935 <__c.4335>:
    1935:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    1945:	5d 0a 00                                            ]..

00001948 <__c.4328>:
    1948:	5b 53 53 38 30 20 53 44 43 5d 0a 00                 [SS80 SDC]..

00001954 <__c.4314>:
    1954:	5b 53 53 38 30 20 71 73 74 61 74 20 25 30 32 58     [SS80 qstat %02X
    1964:	5d 0a 00                                            ]..

00001967 <__c.4312>:
    1967:	5b 53 53 38 30 20 71 73 74 61 74 20 73 65 6e 64     [SS80 qstat send
    1977:	20 46 41 49 4c 45 44 5d 0a 00                        FAILED]..

00001981 <__c.4305>:
    1981:	5b 53 53 38 30 20 53 65 65 6b 3a 25 30 38 6c 58     [SS80 Seek:%08lX
    1991:	48 5d 0a 00                                         H]..

00001995 <__c.4303>:
    1995:	5b 53 53 38 30 20 53 65 65 6b 20 4f 56 45 52 46     [SS80 Seek OVERF
    19a5:	4c 4f 57 20 61 74 20 25 30 38 6c 58 48 5d 0a 00     LOW at %08lXH]..

000019b5 <__c.4298>:
    19b5:	5b 53 53 38 30 20 54 72 61 6e 73 70 61 72 65 6e     [SS80 Transparen
    19c5:	74 20 43 6f 6d 6d 61 6e 64 2c 20 45 72 72 6f 72     t Command, Error
    19d5:	20 61 74 20 28 25 64 29 20 6f 66 20 28 25 64 29      at (%d) of (%d)
    19e5:	20 4f 50 20 43 6f 64 65 73 5d 0a 00                  OP Codes]..

000019f1 <__c.4295>:
    19f1:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1a01:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00001a11 <__c.4293>:
    1a11:	5b 53 53 38 30 20 43 61 6e 63 65 6c 20 28 25 64     [SS80 Cancel (%d
    1a21:	29 5d 0a 00                                         )]..

00001a25 <__c.4291>:
    1a25:	5b 53 53 38 30 20 43 68 61 6e 6e 65 6c 20 49 6e     [SS80 Channel In
    1a35:	64 65 70 65 6e 64 65 6e 74 20 43 6c 65 61 72 20     dependent Clear 
    1a45:	28 25 64 29 5d 0a 00                                (%d)]..

00001a4c <__c.4289>:
    1a4c:	5b 53 53 38 30 20 57 72 69 74 65 20 4c 6f 6f 70     [SS80 Write Loop
    1a5c:	62 61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00           back - TODO]..

00001a6a <__c.4287>:
    1a6a:	5b 53 53 38 30 20 52 65 61 64 20 4c 6f 6f 70 62     [SS80 Read Loopb
    1a7a:	61 63 6b 20 2d 20 54 4f 44 4f 5d 0a 00              ack - TODO]..

00001a87 <__c.4284>:
    1a87:	5b 53 53 38 30 20 48 50 2d 49 42 20 50 61 72 69     [SS80 HP-IB Pari
    1a97:	74 79 20 43 68 65 63 6b 69 6e 67 20 2d 20 54 4f     ty Checking - TO
    1aa7:	44 4f 5d 0a 00                                      DO]..

00001aac <__c.4281>:
    1aac:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    1abc:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00001ac5 <__c.4279>:
    1ac5:	5b 47 50 49 42 20 52 65 61 64 20 45 52 52 4f 52     [GPIB Read ERROR
    1ad5:	5d 0a 00                                            ]..

00001ad8 <__c.4270>:
    1ad8:	5b 53 53 38 30 20 45 78 65 63 75 74 65 20 43 6f     [SS80 Execute Co
    1ae8:	6d 6d 61 6e 64 2c 20 45 72 72 6f 72 20 61 74 20     mmand, Error at 
    1af8:	28 25 64 29 20 6f 66 20 28 25 64 29 20 4f 50 20     (%d) of (%d) OP 
    1b08:	43 6f 64 65 73 5d 0a 00                             Codes]..

00001b10 <__c.4267>:
    1b10:	5b 53 53 38 30 20 49 6e 76 61 6c 69 64 20 4f 50     [SS80 Invalid OP
    1b20:	20 43 6f 64 65 20 28 25 30 32 58 48 29 5d 0a 00      Code (%02XH)]..

00001b30 <__c.4265>:
    1b30:	5b 53 53 38 30 20 49 6e 69 61 74 65 20 44 69 61     [SS80 Iniate Dia
    1b40:	67 6e 6f 73 74 69 63 20 2d 20 54 4f 44 4f 5d 0a     gnostic - TODO].
	...

00001b51 <__c.4263>:
    1b51:	5b 53 53 38 30 20 52 65 71 75 65 73 74 20 53 74     [SS80 Request St
    1b61:	61 74 75 73 5d 0a 00                                atus]..

00001b68 <__c.4261>:
    1b68:	5b 53 53 38 30 20 44 6f 6f 72 20 4c 6f 63 6b 20     [SS80 Door Lock 
    1b78:	2d 20 54 4f 44 4f 5d 0a 00                          - TODO]..

00001b81 <__c.4259>:
    1b81:	5b 53 53 38 30 20 44 6f 6f 72 20 55 6e 4c 6f 63     [SS80 Door UnLoc
    1b91:	6b 20 2d 20 54 4f 44 4f 5d 0a 00                    k - TODO]..

00001b9c <__c.4257>:
    1b9c:	5b 53 53 38 30 20 53 65 74 20 53 74 61 74 75 73     [SS80 Set Status
    1bac:	20 4d 61 73 6b 20 2d 20 54 4f 44 4f 5d 0a 00         Mask - TODO]..

00001bbb <__c.4255>:
    1bbb:	5b 53 53 38 30 20 49 6e 69 74 69 61 6c 69 7a 65     [SS80 Initialize
    1bcb:	20 4d 65 64 69 61 20 54 4f 44 4f 5d 0a 00            Media TODO]..

00001bd9 <__c.4253>:
    1bd9:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00001bea <__c.4251>:
    1bea:	5b 53 53 38 30 20 56 61 6c 69 64 61 74 65 20 4b     [SS80 Validate K
    1bfa:	65 79 20 2d 20 54 4f 44 4f 5d 0a 00                 ey - TODO]..

00001c06 <__c.4249>:
    1c06:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 44 65     [SS80 Release De
    1c16:	6e 69 65 64 20 4e 4f 2d 4f 50 5d 0a 00              nied NO-OP]..

00001c23 <__c.4247>:
    1c23:	5b 53 53 38 30 20 52 65 6c 65 61 73 65 20 4e 4f     [SS80 Release NO
    1c33:	2d 4f 50 5d 0a 00                                   -OP]..

00001c39 <__c.4245>:
    1c39:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1c49:	20 56 65 72 69 66 79 20 2d 20 54 4f 44 4f 5d 0a      Verify - TODO].
	...

00001c5a <__c.4243>:
    1c5a:	5b 53 53 38 30 20 53 65 74 20 52 65 74 75 72 6e     [SS80 Set Return
    1c6a:	20 41 64 64 72 65 73 73 69 6e 67 20 2d 20 54 4f      Addressing - TO
    1c7a:	44 4f 5d 0a 00                                      DO]..

00001c7f <__c.4241>:
    1c7f:	5b 53 53 38 30 20 53 65 74 20 52 65 6c 65 61 73     [SS80 Set Releas
    1c8f:	65 20 4e 4f 2d 4f 50 5d 0a 00                       e NO-OP]..

00001c99 <__c.4239>:
    1c99:	5b 53 53 38 30 20 53 65 74 20 52 50 53 20 4e 4f     [SS80 Set RPS NO
    1ca9:	2d 4f 50 5d 0a 00                                   -OP]..

00001caf <__c.4237>:
    1caf:	5b 53 53 38 30 20 4e 4f 2d 4f 50 5d 0a 00           [SS80 NO-OP]..

00001cbd <__c.4235>:
    1cbd:	5b 53 53 38 30 20 53 65 74 20 4c 65 6e 67 74 68     [SS80 Set Length
    1ccd:	3a 28 25 30 38 6c 58 48 29 5d 0a 00                 :(%08lXH)]..

00001cd9 <__c.4233>:
    1cd9:	5b 53 53 38 30 20 53 65 74 20 41 64 64 72 65 73     [SS80 Set Addres
    1ce9:	73 3a 28 25 30 38 6c 58 48 29 5d 0a 00              s:(%08lXH)]..

00001cf6 <__c.4231>:
    1cf6:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1d06:	20 57 72 69 74 65 5d 0a 00                           Write]..

00001d0f <__c.4228>:
    1d0f:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1d1f:	20 52 65 61 64 5d 0a 00                              Read]..

00001d27 <__c.4226>:
    1d27:	5b 53 53 38 30 20 53 65 74 20 56 6f 6c 75 6d 65     [SS80 Set Volume
    1d37:	3a 20 28 25 64 29 5d 0a 00                          : (%d)]..

00001d40 <__c.4223>:
    1d40:	5b 53 53 38 30 20 53 65 74 20 55 6e 69 74 3a 28     [SS80 Set Unit:(
    1d50:	25 64 29 5d 0a 00                                   %d)]..

00001d56 <__c.4221>:
    1d56:	5b 47 50 49 42 20 62 75 66 66 65 72 20 4f 56 45     [GPIB buffer OVE
    1d66:	52 46 4c 4f 57 21 5d 0a 00                          RFLOW!]..

00001d6f <__c.4219>:
    1d6f:	5b 53 53 38 30 20 43 6f 6d 6d 61 6e 64 20 53 74     [SS80 Command St
    1d7f:	61 74 65 20 47 50 49 42 20 52 65 61 64 20 45 52     ate GPIB Read ER
    1d8f:	52 4f 52 5d 0a 00                                   ROR]..

00001d95 <__c.4210>:
    1d95:	5b 53 53 38 30 20 56 6f 6c 75 6d 65 3a 25 64 20     [SS80 Volume:%d 
    1da5:	69 6e 76 61 6c 69 64 5d 0a 00                       invalid]..

00001daf <__c.4205>:
    1daf:	5b 53 53 38 30 20 55 4e 49 54 3a 25 64 20 69 6e     [SS80 UNIT:%d in
    1dbf:	76 61 6c 69 64 5d 0a 00                             valid]..

00001dc7 <__c.4200>:
    1dc7:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 56     [SS80 Describe V
    1dd7:	6f 6c 75 6d 65 20 46 41 49 4c 45 44 5d 0a 00        olume FAILED]..

00001de6 <__c.4198>:
    1de6:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 55     [SS80 Describe U
    1df6:	6e 69 74 20 46 41 49 4c 45 44 5d 0a 00              nit FAILED]..

00001e03 <__c.4196>:
    1e03:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 20 43     [SS80 Describe C
    1e13:	6f 6e 74 72 6f 6c 6c 65 72 20 46 41 49 4c 45 44     ontroller FAILED
    1e23:	5d 0a 00                                            ]..

00001e26 <__c.4194>:
    1e26:	5b 53 53 38 30 20 44 65 73 63 72 69 62 65 5d 0a     [SS80 Describe].
	...

00001e37 <__c.4186>:
    1e37:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    1e47:	73 20 46 41 49 4c 45 44 5d 0a 00                    s FAILED]..

00001e52 <__c.4184>:
    1e52:	5b 53 53 38 30 20 53 65 6e 64 20 53 74 61 74 75     [SS80 Send Statu
    1e62:	73 5d 0a 00                                         s]..

00001e66 <__c.4174>:
    1e66:	20 20 20 20 25 64 3a 25 73 0a 00                        %d:%s..

00001e71 <__c.4172>:
    1e71:	25 73 3a 0a 00                                      %s:..

00001e76 <__c.4147>:
    1e76:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1e86:	20 57 72 69 74 65 20 57 72 6f 74 65 20 54 6f 74      Write Wrote Tot
    1e96:	61 6c 28 25 6c 78 48 29 5d 0a 00                    al(%lxH)]..

00001ea1 <__c.4145>:
    1ea1:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1eb1:	20 57 72 69 74 65 20 44 49 44 20 4e 4f 54 20 46      Write DID NOT F
    1ec1:	49 4e 49 53 48 5d 0a 00                             INISH]..

00001ec9 <__c.4141>:
    1ec9:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1ed9:	20 57 72 69 74 65 20 77 72 6f 74 65 28 25 30 32      Write wrote(%02
    1ee9:	58 48 29 5d 0a 00                                   XH)]..

00001eef <__c.4139>:
    1eef:	5b 44 69 73 6b 20 57 72 69 74 65 20 45 72 72 6f     [Disk Write Erro
    1eff:	72 5d 0a 00                                         r]..

00001f03 <__c.4135>:
    1f03:	5b 47 50 49 42 20 52 65 61 64 20 45 72 72 6f 72     [GPIB Read Error
    1f13:	5d 0a 00                                            ]..

00001f16 <__c.4133>:
    1f16:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1f26:	20 57 72 69 74 65 20 61 74 20 25 30 38 6c 58 48      Write at %08lXH
    1f36:	28 25 6c 58 48 29 5d 0a 00                          (%lXH)]..

00001f3f <__c.4121>:
    1f3f:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    1f4f:	65 61 64 20 54 6f 74 61 6c 28 25 6c 58 48 29 20     ead Total(%lXH) 
    1f5f:	62 79 74 65 73 5d 0a 00                             bytes]..

00001f67 <__c.4119>:
    1f67:	5b 53 53 38 30 20 42 75 66 66 65 72 65 64 20 52     [SS80 Buffered R
    1f77:	65 61 64 20 44 49 44 20 4e 4f 54 20 46 49 4e 49     ead DID NOT FINI
    1f87:	53 48 5d 0a 00                                      SH]..

00001f8c <__c.4114>:
    1f8c:	5b 53 53 38 30 20 47 50 49 42 20 57 72 69 74 65     [SS80 GPIB Write
    1f9c:	20 57 72 72 6f 72 5d 0a 00                           Wrror]..

00001fa5 <__c.4112>:
    1fa5:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    1fb5:	45 72 72 6f 72 5d 0a 00                             Error]..

00001fbd <__c.4110>:
    1fbd:	5b 53 53 38 30 20 44 69 73 6b 20 52 65 61 64 20     [SS80 Disk Read 
    1fcd:	25 30 32 58 48 20 62 79 74 65 73 5d 0a 00           %02XH bytes]..

00001fdb <__c.4108>:
    1fdb:	5b 53 53 38 30 20 4c 6f 63 61 74 65 20 61 6e 64     [SS80 Locate and
    1feb:	20 52 65 61 64 20 61 74 20 25 30 38 6c 58 48 28      Read at %08lXH(
    1ffb:	25 6c 58 48 29 5d 0a 00                             %lXH)]..

00002003 <__c.4091>:
    2003:	5b 53 53 38 30 20 45 58 45 43 20 73 74 61 74 65     [SS80 EXEC state
    2013:	3a 25 64 20 65 72 72 6f 72 5d 0a 00                 :%d error]..

0000201f <__c.4075>:
    201f:	5b 53 53 38 30 20 25 30 32 58 48 20 49 4e 49 54     [SS80 %02XH INIT
    202f:	5d 0a 00                                            ]..

00002032 <__c.4050>:
    2032:	5b 53 53 38 30 20 54 65 73 74 20 44 6f 6e 65 5d     [SS80 Test Done]
    2042:	0a 00                                               ..

00002044 <__c.4048>:
    2044:	5b 53 53 38 30 20 54 65 73 74 5d 0a 00              [SS80 Test]..

00002051 <__c.4205>:
    2051:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    2061:	65 71 75 65 73 74 20 4c 6f 67 69 63 61 6c 20 41     equest Logical A
    2071:	64 64 72 65 73 73 5d 0a 00                          ddress]..

0000207a <__c.4202>:
    207a:	5b 41 4d 49 47 4f 20 45 78 69 63 75 74 65 20 52     [AMIGO Exicute R
    208a:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 55 6e     equest Status Un
    209a:	62 75 66 66 65 72 65 64 5d 0a 00                    buffered]..

000020a5 <__c.4199>:
    20a5:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    20b5:	65 71 75 65 73 74 20 53 74 61 74 75 73 20 42 75     equest Status Bu
    20c5:	66 66 65 72 65 64 5d 0a 00                          ffered]..

000020ce <__c.4194>:
    20ce:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    20de:	72 69 74 65 20 42 75 66 66 65 72 65 64 5d 0a 00     rite Buffered]..

000020ee <__c.4191>:
    20ee:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 49     [AMIGO Execute I
    20fe:	6e 69 74 69 61 6c 69 7a 65 5d 0a 00                 nitialize]..

0000210a <__c.4188>:
    210a:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 57     [AMIGO Execute W
    211a:	72 69 74 65 20 55 6e 62 75 66 66 65 72 65 64 5d     rite Unbuffered]
    212a:	0a 00                                               ..

0000212c <__c.4185>:
    212c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    213c:	65 61 64 20 42 75 66 66 65 72 65 64 5d 0a 00        ead Buffered]..

0000214b <__c.4182>:
    214b:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 52     [AMIGO Execute R
    215b:	65 61 64 20 55 6e 62 75 66 66 65 72 65 64 5d 0a     ead Unbuffered].
	...

0000216c <__c.4179>:
    216c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 20 43     [AMIGO Execute C
    217c:	6f 6c 64 20 4c 6f 61 64 20 52 65 61 64 5d 0a 00     old Load Read]..

0000218c <__c.4175>:
    218c:	5b 41 4d 49 47 4f 20 45 78 65 63 75 74 65 28 25     [AMIGO Execute(%
    219c:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    21ac:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    21bc:	0a 00                                               ..

000021be <__c.4170>:
    21be:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 5d 0a 00     [AMIGO Format]..

000021ce <__c.4167>:
    21ce:	5b 41 4d 49 47 4f 20 52 65 61 64 20 42 75 66 66     [AMIGO Read Buff
    21de:	65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00        ered Command]..

000021ed <__c.4165>:
    21ed:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    21fd:	74 61 74 75 73 20 55 6e 62 75 66 66 65 72 65 64     tatus Unbuffered
    220d:	20 43 6f 6d 6d 61 6e 64 5d 0a 00                     Command]..

00002218 <__c.4163>:
    2218:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 42 75 66     [AMIGO Write Buf
    2228:	66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00     fered Command]..

00002238 <__c.4161>:
    2238:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 4c     [AMIGO Request L
    2248:	6f 67 69 63 61 6c 20 41 64 64 72 65 73 73 20 43     ogical Address C
    2258:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

00002261 <__c.4159>:
    2261:	5b 41 4d 49 47 4f 20 49 6e 69 74 69 61 6c 69 7a     [AMIGO Initializ
    2271:	65 20 43 6f 6d 6d 61 6e 64 5d 0a 00                 e Command]..

0000227d <__c.4157>:
    227d:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 55 6e 62     [AMIGO Write Unb
    228d:	75 66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d     uffered Command]
    229d:	0a 00                                               ..

0000229f <__c.4155>:
    229f:	5b 41 4d 49 47 4f 20 56 65 72 69 66 79 5d 0a 00     [AMIGO Verify]..

000022af <__c.4152>:
    22af:	5b 41 4d 49 47 4f 20 52 65 61 64 20 55 6e 62 75     [AMIGO Read Unbu
    22bf:	66 66 65 72 65 64 20 43 6f 6d 6d 61 6e 64 5d 0a     ffered Command].
	...

000022d0 <__c.4150>:
    22d0:	5b 41 4d 49 47 4f 20 52 65 71 75 65 73 74 20 53     [AMIGO Request S
    22e0:	74 61 74 75 73 20 42 75 66 66 65 72 65 64 20 43     tatus Buffered C
    22f0:	6f 6d 6d 61 6e 64 5d 0a 00                          ommand]..

000022f9 <__c.4148>:
    22f9:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    2309:	36 5d 0a 00                                         6]..

0000230d <__c.4145>:
    230d:	5b 41 4d 49 47 4f 20 53 65 65 6b 20 6c 65 6e 3d     [AMIGO Seek len=
    231d:	35 5d 0a 00                                         5]..

00002321 <__c.4142>:
    2321:	5b 41 4d 49 47 4f 20 43 6f 6c 64 20 4c 6f 61 64     [AMIGO Cold Load
    2331:	20 52 65 61 64 20 43 6f 6d 6d 61 6e 64 5d 0a 00      Read Command]..

00002341 <__c.4139>:
    2341:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    2351:	30 32 58 48 29 3a 20 47 50 49 42 20 72 65 61 64     02XH): GPIB read
    2361:	20 62 79 74 65 73 3a 25 30 32 58 48 5d 0a 00         bytes:%02XH]..

00002370 <__c.4137>:
    2370:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    2380:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

00002391 <__c.4135>:
    2391:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO Command:G
    23a1:	50 49 42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a     PIB read error].
	...

000023b2 <__c.4133>:
    23b2:	5b 41 4d 49 47 4f 5f 43 6f 6d 6d 61 6e 64 3a 47     [AMIGO_Command:G
    23c2:	50 49 42 20 77 72 69 74 65 20 65 72 72 6f 72 5d     PIB write error]
    23d2:	0a 00                                               ..

000023d4 <__c.4131>:
    23d4:	5b 41 4d 49 47 4f 20 43 6f 6d 6d 61 6e 64 28 25     [AMIGO Command(%
    23e4:	30 32 58 48 29 3a 20 6c 69 73 74 65 6e 3a 25 30     02XH): listen:%0
    23f4:	32 58 48 2c 20 74 61 6c 6b 3a 25 30 32 58 48 5d     2XH, talk:%02XH]
    2404:	0a 00                                               ..

00002406 <__c.4119>:
    2406:	5b 45 20 20 20 41 6d 69 67 6f 20 45 52 52 4f 52     [E   Amigo ERROR
    2416:	20 73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58      secondary: %02X
    2426:	48 2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20     H, state:%02XH, 
    2436:	6c 69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c     listening:%02XH,
    2446:	20 74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a      talking:%02XH].
	...

00002457 <__c.4117>:
    2457:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    2467:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2477:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2487:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2497:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

000024a7 <__c.4115>:
    24a7:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    24b7:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    24c7:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    24d7:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    24e7:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

000024f7 <__c.4113>:
    24f7:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    2507:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2517:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6c     , state:%02XH, l
    2527:	69 73 74 65 6e 69 6e 67 3a 25 30 32 58 48 2c 20     istening:%02XH, 
    2537:	74 61 6c 6b 69 6e 67 3a 25 30 32 58 48 5d 0a 00     talking:%02XH]..

00002547 <__c.4108>:
    2547:	5b 55 20 41 6d 69 67 6f 20 54 4f 44 4f 20 73 65     [U Amigo TODO se
    2557:	63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48 2c 20     condary: %02XH, 
    2567:	73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f 70 63     state:%02XH, opc
    2577:	6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e 3a 25     ode:%02XH, len:%
    2587:	33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a 25 30     3d, listening:%0
    2597:	32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25 30 32     2XH, talking:%02
    25a7:	58 48 5d 0a 00                                      XH]..

000025ac <__c.4106>:
    25ac:	5b 55 4e 54 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [UNT Amigo TODO 
    25bc:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    25cc:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    25dc:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    25ec:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    25fc:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    260c:	30 32 58 48 5d 0a 00                                02XH]..

00002613 <__c.4104>:
    2613:	5b 54 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [T   Amigo TODO 
    2623:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    2633:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    2643:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    2653:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    2663:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    2673:	30 32 58 48 5d 0a 00                                02XH]..

0000267a <__c.4102>:
    267a:	5b 4c 20 20 20 41 6d 69 67 6f 20 54 4f 44 4f 20     [L   Amigo TODO 
    268a:	73 65 63 6f 6e 64 61 72 79 3a 20 25 30 32 58 48     secondary: %02XH
    269a:	2c 20 73 74 61 74 65 3a 25 30 32 58 48 2c 20 6f     , state:%02XH, o
    26aa:	70 63 6f 64 65 3a 25 30 32 58 48 2c 20 6c 65 6e     pcode:%02XH, len
    26ba:	3a 25 33 64 2c 20 6c 69 73 74 65 6e 69 6e 67 3a     :%3d, listening:
    26ca:	25 30 32 58 48 2c 20 74 61 6c 6b 69 6e 67 3a 25     %02XH, talking:%
    26da:	30 32 58 48 5d 0a 00                                02XH]..

000026e1 <__c.4095>:
    26e1:	5b 41 4d 49 47 4f 20 43 6c 65 61 72 5d 0a 00        [AMIGO Clear]..

000026f0 <__c.4091>:
    26f0:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2700:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

0000270a <__c.4089>:
    270a:	5b 41 4d 49 47 4f 20 57 61 6b 65 75 70 5d 0a 00     [AMIGO Wakeup]..

0000271a <__c.4082>:
    271a:	5b 44 53 4a 20 25 30 32 58 48 5d 0a 00              [DSJ %02XH]..

00002727 <__c.4080>:
    2727:	5b 41 49 4d 47 4f 3a 20 44 53 4a 20 73 65 6e 64     [AIMGO: DSJ send
    2737:	20 66 61 69 6c 65 64 5d 0a 00                        failed]..

00002741 <__c.4073>:
    2741:	5b 41 4d 49 47 4f 20 57 72 69 74 65 20 47 50 49     [AMIGO Write GPI
    2751:	42 20 72 65 61 64 20 65 72 72 6f 72 5d 0a 00        B read error]..

00002760 <__c.4066>:
    2760:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    2770:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

0000277a <__c.4059>:
    277a:	5b 41 4d 49 47 4f 20 46 6f 72 6d 61 74 20 44 6f     [AMIGO Format Do
    278a:	6e 65 5d 0a 00                                      ne]..

0000278f <__c.4055>:
    278f:	5b 41 4d 49 47 4f 20 66 6f 72 6d 61 74 5d 0a 00     [AMIGO format]..

0000279f <__c.4014>:
    279f:	5b 41 4d 49 47 4f 20 25 73 2c 20 50 3a 25 30 38     [AMIGO %s, P:%08
    27af:	6c 78 48 2c 20 55 3a 25 64 20 43 3a 25 64 20 48     lxH, U:%d C:%d H
    27bf:	3a 25 64 20 53 3a 25 64 5d 0a 00                    :%d S:%d]..

000027ca <__c.4044>:
    27ca:	5b 41 4d 49 47 4f 20 76 65 72 69 66 79 20 50 3a     [AMIGO verify P:
    27da:	25 30 38 6c 58 48 2c 20 73 65 63 74 6f 72 73 3a     %08lXH, sectors:
    27ea:	25 30 34 58 48 5d 0a 00                             %04XH]..

000027f2 <__c.4021>:
    27f2:	5b 41 4d 49 47 4f 20 25 73 20 70 6f 73 20 4f 56     [AMIGO %s pos OV
    2802:	45 52 46 4c 4f 57 5d 0a 00                          ERFLOW]..

0000280b <__c.4007>:
    280b:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    281b:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002825 <__c.4005>:
    2825:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 73 74 61 74     [AMIGO send stat
    2835:	75 73 5d 0a 00                                      us]..

0000283a <__c.3999>:
    283a:	5b 41 4d 49 47 4f 20 47 50 49 42 20 77 72 69 74     [AMIGO GPIB writ
    284a:	65 20 65 72 72 6f 72 5d 0a 00                       e error]..

00002854 <__c.3997>:
    2854:	5b 41 4d 49 47 4f 20 73 65 6e 64 20 6c 6f 67 69     [AMIGO send logi
    2864:	63 61 6c 20 61 64 64 72 65 73 73 5d 0a 00           cal address]..

00002872 <__c.3991>:
    2872:	5b 41 4d 49 47 4f 20 72 65 71 75 65 73 74 20 73     [AMIGO request s
    2882:	74 61 74 75 73 5d 0a 00                             tatus]..

0000288a <__c.4013>:
    288a:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 62 79     received:[%d] by
    289a:	74 65 73 0a 00                                      tes..

0000289f <__c.4011>:
    289f:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 25 73     received:[%d] %s
    28af:	0a 00                                               ..

000028b1 <__c.4009>:
    28b1:	72 65 63 65 69 76 65 64 3a 5b 25 64 5d 20 25 73     received:[%d] %s
    28c1:	0a 00                                               ..

000028c3 <__c.4004>:
    28c3:	70 72 69 6e 74 65 72 20 6e 6f 74 20 64 65 66 69     printer not defi
    28d3:	6e 65 64 0a 00                                      ned..

000028d8 <__c.3995>:
    28d8:	5b 53 43 20 50 52 49 4e 54 45 52 20 54 61 6c 6b     [SC PRINTER Talk
    28e8:	3a 20 25 30 32 58 48 5d 0a 00                       : %02XH]..

000028f2 <__c.3993>:
    28f2:	5b 53 43 20 50 52 49 4e 54 45 52 20 4c 69 73 74     [SC PRINTER List
    2902:	65 6e 3a 20 25 30 32 58 48 5d 0a 00                 en: %02XH]..

0000290e <__c.3988>:
    290e:	25 30 38 6c 64 0d 00                                %08ld..

00002915 <__c.3982>:
    2915:	77 72 69 74 65 20 66 61 69 6c 65 64 3a 20 77 61     write failed: wa
    2925:	6e 74 65 64 20 25 64 2c 20 67 6f 74 3a 25 64 0a     nted %d, got:%d.
	...

00002936 <__c.3976>:
    2936:	0a 44 4f 4e 45 3a 20 25 30 38 6c 64 0a 00           .DONE: %08ld..

00002944 <__c.3974>:
    2944:	45 52 52 4f 52 20 64 75 72 72 69 6e 67 20 77 72     ERROR durring wr
    2954:	69 74 65 0a 00                                      ite..

00002959 <__c.3968>:
    2959:	65 78 69 74 69 6e 67 2e 2e 2e 0a 00                 exiting.....

00002965 <__c.3966>:
    2965:	43 61 70 74 75 72 69 6e 67 20 70 6c 6f 74 20 74     Capturing plot t
    2975:	6f 3a 25 73 0a 00                                   o:%s..

0000297b <__c.3964>:
    297b:	2f 70 6c 6f 74 2d 25 30 32 64 25 73 25 30 34 64     /plot-%02d%s%04d
    298b:	2d 25 30 32 64 25 30 32 64 25 30 32 64 2e 70 6c     -%02d%02d%02d.pl
    299b:	74 00                                               t.

0000299d <__c.4636>:
    299d:	0a 00                                               ..

0000299f <__c.4631>:
    299f:	41 4d 49 47 4f 25 64 00                             AMIGO%d.

000029a7 <__c.4629>:
    29a7:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    29b7:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    29c7:	0a 00                                               ..

000029c9 <__c.4627>:
    29c9:	53 53 38 30 2d 25 64 00                             SS80-%d.

000029d1 <__c.4625>:
    29d1:	43 61 6e 20 6e 6f 74 20 75 73 65 20 6e 6f 6e 20     Can not use non 
    29e1:	32 35 36 20 62 79 74 65 20 73 65 63 74 6f 72 73     256 byte sectors
    29f1:	0a 00                                               ..

000029f3 <__c.4612>:
    29f3:	0a 00                                               ..

000029f5 <__c.4610>:
    29f5:	0a 00                                               ..

000029f7 <__c.4608>:
    29f7:	45 4e 44 0a 00                                      END..

000029fc <__c.4603>:
    29fc:	0a 00                                               ..

000029fe <__c.4601>:
    29fe:	41 44 44 52 45 53 53 00                             ADDRESS.

00002a06 <__c.4599>:
    2a06:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00002a10 <__c.4597>:
    2a10:	50 52 49 4e 54 45 52 0a 00                          PRINTER..

00002a19 <__c.4595>:
    2a19:	43 59 4c 49 4e 44 45 52 53 00                       CYLINDERS.

00002a23 <__c.4593>:
    2a23:	48 45 41 44 53 00                                   HEADS.

00002a29 <__c.4591>:
    2a29:	53 45 43 54 4f 52 53 5f 50 45 52 5f 54 52 41 43     SECTORS_PER_TRAC
    2a39:	4b 00                                               K.

00002a3b <__c.4589>:
    2a3b:	42 59 54 45 53 5f 50 45 52 5f 53 45 43 54 4f 52     BYTES_PER_SECTOR
	...

00002a4c <__c.4587>:
    2a4c:	20 20 47 45 4f 4d 45 54 52 59 0a 00                   GEOMETRY..

00002a58 <__c.4585>:
    2a58:	49 44 00                                            ID.

00002a5b <__c.4583>:
    2a5b:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00002a65 <__c.4581>:
    2a65:	46 49 4c 45 00                                      FILE.

00002a6a <__c.4579>:
    2a6a:	50 50 52 00                                         PPR.

00002a6e <__c.4577>:
    2a6e:	41 44 44 52 45 53 53 00                             ADDRESS.

00002a76 <__c.4575>:
    2a76:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

00002a80 <__c.4573>:
    2a80:	41 4d 49 47 4f 0a 00                                AMIGO..

00002a87 <__c.4571>:
    2a87:	49 4e 54 45 52 4c 45 41 56 45 00                    INTERLEAVE.

00002a92 <__c.4569>:
    2a92:	4d 41 58 5f 42 4c 4f 43 4b 5f 4e 55 4d 42 45 52     MAX_BLOCK_NUMBER
	...

00002aa3 <__c.4567>:
    2aa3:	4d 41 58 5f 53 45 43 54 4f 52 00                    MAX_SECTOR.

00002aae <__c.4565>:
    2aae:	4d 41 58 5f 48 45 41 44 00                          MAX_HEAD.

00002ab7 <__c.4563>:
    2ab7:	4d 41 58 5f 43 59 4c 49 4e 44 45 52 00              MAX_CYLINDER.

00002ac4 <__c.4561>:
    2ac4:	20 20 56 4f 4c 55 4d 45 0a 00                         VOLUME..

00002ace <__c.4559>:
    2ace:	52 45 4d 4f 56 41 42 4c 45 5f 56 4f 4c 55 4d 45     REMOVABLE_VOLUME
    2ade:	53 00                                               S.

00002ae0 <__c.4557>:
    2ae0:	46 49 58 45 44 5f 56 4f 4c 55 4d 45 53 00           FIXED_VOLUMES.

00002aee <__c.4555>:
    2aee:	4d 41 58 49 4d 55 4d 5f 49 4e 54 45 52 4c 45 41     MAXIMUM_INTERLEA
    2afe:	56 45 00                                            VE.

00002b01 <__c.4553>:
    2b01:	41 43 43 45 53 53 5f 54 49 4d 45 00                 ACCESS_TIME.

00002b0d <__c.4551>:
    2b0d:	4f 50 54 49 4d 41 4c 5f 52 45 54 52 59 5f 54 49     OPTIMAL_RETRY_TI
    2b1d:	4d 45 00                                            ME.

00002b20 <__c.4549>:
    2b20:	43 4f 4e 54 49 4e 4f 55 53 5f 54 52 41 4e 53 46     CONTINOUS_TRANSF
    2b30:	45 52 5f 52 41 54 45 00                             ER_RATE.

00002b38 <__c.4547>:
    2b38:	42 4c 4f 43 4b 5f 54 49 4d 45 00                    BLOCK_TIME.

00002b43 <__c.4545>:
    2b43:	42 55 52 53 54 5f 53 49 5a 45 00                    BURST_SIZE.

00002b4e <__c.4543>:
    2b4e:	42 55 46 46 45 52 45 44 5f 42 4c 4f 43 4b 53 00     BUFFERED_BLOCKS.

00002b5e <__c.4541>:
    2b5e:	42 59 54 45 53 5f 50 45 52 5f 42 4c 4f 43 4b 00     BYTES_PER_BLOCK.

00002b6e <__c.4539>:
    2b6e:	44 45 56 49 43 45 5f 4e 55 4d 42 45 52 00           DEVICE_NUMBER.

00002b7c <__c.4537>:
    2b7c:	55 4e 49 54 5f 54 59 50 45 00                       UNIT_TYPE.

00002b86 <__c.4535>:
    2b86:	20 20 55 4e 49 54 0a 00                               UNIT..

00002b8e <__c.4533>:
    2b8e:	54 59 50 45 00                                      TYPE.

00002b93 <__c.4531>:
    2b93:	54 52 41 4e 53 46 45 52 5f 52 41 54 45 00           TRANSFER_RATE.

00002ba1 <__c.4529>:
    2ba1:	55 4e 49 54 53 5f 49 4e 53 54 41 4c 4c 45 44 00     UNITS_INSTALLED.

00002bb1 <__c.4527>:
    2bb1:	20 20 43 4f 4e 54 52 4f 4c 4c 45 52 0a 00             CONTROLLER..

00002bbf <__c.4525>:
    2bbf:	49 44 00                                            ID.

00002bc2 <__c.4523>:
    2bc2:	20 20 48 45 41 44 45 52 0a 00                         HEADER..

00002bcc <__c.4521>:
    2bcc:	46 49 4c 45 00                                      FILE.

00002bd1 <__c.4519>:
    2bd1:	50 50 52 00                                         PPR.

00002bd5 <__c.4517>:
    2bd5:	41 44 44 52 45 53 53 00                             ADDRESS.

00002bdd <__c.4515>:
    2bdd:	20 20 43 4f 4e 46 49 47 0a 00                         CONFIG..

00002be7 <__c.4513>:
    2be7:	53 53 38 30 0a 00                                   SS80..

00002bed <__c.4510>:
    2bed:	43 75 72 72 65 6e 74 20 43 6f 6e 66 69 67 75 72     Current Configur
    2bfd:	61 74 69 6f 6e 20 53 65 74 74 69 6e 67 73 0a 00     ation Settings..

00002c0d <__c.4502>:
    2c0d:	0a 00                                               ..

00002c0f <__c.4497>:
    2c0f:	20 20 50 52 49 4e 54 45 52 5f 4d 53 41 20 3d 20       PRINTER_MSA = 
    2c1f:	25 30 32 58 48 0a 00                                %02XH..

00002c26 <__c.4495>:
    2c26:	20 20 50 52 49 4e 54 45 52 5f 4d 54 41 20 3d 20       PRINTER_MTA = 
    2c36:	25 30 32 58 48 0a 00                                %02XH..

00002c3d <__c.4493>:
    2c3d:	20 20 50 52 49 4e 54 45 52 5f 4d 4c 41 20 3d 20       PRINTER_MLA = 
    2c4d:	25 30 32 58 48 0a 00                                %02XH..

00002c54 <__c.4491>:
    2c54:	20 20 41 4d 49 47 4f 5f 4d 53 41 20 20 20 3d 20       AMIGO_MSA   = 
    2c64:	25 30 32 58 48 0a 00                                %02XH..

00002c6b <__c.4489>:
    2c6b:	20 20 41 4d 49 47 4f 5f 4d 54 41 20 20 20 3d 20       AMIGO_MTA   = 
    2c7b:	25 30 32 58 48 0a 00                                %02XH..

00002c82 <__c.4487>:
    2c82:	20 20 41 4d 49 47 4f 5f 4d 4c 41 20 20 20 3d 20       AMIGO_MLA   = 
    2c92:	25 30 32 58 48 0a 00                                %02XH..

00002c99 <__c.4485>:
    2c99:	20 20 53 53 38 30 5f 4d 53 41 20 20 20 20 3d 20       SS80_MSA    = 
    2ca9:	25 30 32 58 48 0a 00                                %02XH..

00002cb0 <__c.4483>:
    2cb0:	20 20 53 53 38 30 5f 4d 54 41 20 20 20 20 3d 20       SS80_MTA    = 
    2cc0:	25 30 32 58 48 0a 00                                %02XH..

00002cc7 <__c.4481>:
    2cc7:	20 20 53 53 38 30 5f 4d 4c 41 20 20 20 20 3d 20       SS80_MLA    = 
    2cd7:	25 30 32 58 48 0a 00                                %02XH..

00002cde <__c.4478>:
    2cde:	4c 69 73 74 65 6e 20 61 6e 64 20 54 61 6c 6b 20     Listen and Talk 
    2cee:	41 64 64 72 65 73 73 20 53 65 74 74 69 6e 67 73     Address Settings
    2cfe:	0a 00                                               ..

00002d00 <__c.4472>:
    2d00:	20 20 20 20 25 2d 32 35 73 20 3d 20 22 25 73 22         %-25s = "%s"
    2d10:	0a 00                                               ..

00002d12 <__c.4461>:
    2d12:	20 20 20 20 25 2d 32 35 73 20 3d 20 25 38 6c 78         %-25s = %8lx
    2d22:	48 20 28 25 6c 64 29 0a 00                          H (%ld)..

00002d2b <__c.4450>:
    2d2b:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 2a 2a 2a     Read_Config: ***
    2d3b:	2a 2a 2a 20 65 72 72 6f 72 73 28 25 64 29 20 2a     *** errors(%d) *
    2d4b:	2a 2a 2a 2a 2a 0a 00                                *****..

00002d52 <__c.4448>:
    2d52:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 72 65 61     Read_Config: rea
    2d62:	64 28 25 64 29 20 6c 69 6e 65 73 0a 00              d(%d) lines..

00002d6f <__c.4446>:
    2d6f:	4d 69 73 73 69 6e 67 20 45 4e 44 20 73 74 61 74     Missing END stat
    2d7f:	65 6d 65 6e 74 20 61 74 20 6c 69 6e 65 3a 25 64     ement at line:%d
    2d8f:	0a 00                                               ..

00002d91 <__c.4442>:
    2d91:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 54 45     Unexpected STATE
    2da1:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    2db1:	0a 00                                               ..

00002db3 <__c.4439>:
    2db3:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    2dc3:	20 47 45 4d 45 54 52 59 20 74 6f 6b 65 6e 3a 20      GEMETRY token: 
    2dd3:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00002de3 <__c.4436>:
    2de3:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    2df3:	20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25      CONFIG token: %
    2e03:	73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00        s, at line:%d..

00002e12 <__c.4433>:
    2e12:	55 6e 65 78 70 65 63 74 65 64 20 48 45 41 44 45     Unexpected HEADE
    2e22:	52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20     R CONFIG token: 
    2e32:	25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00     %s, at line:%d..

00002e42 <__c.4431>:
    2e42:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    2e52:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

00002e5b <__c.4428>:
    2e5b:	55 6e 65 78 70 65 63 74 65 64 20 41 4d 49 47 4f     Unexpected AMIGO
    2e6b:	20 53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73      START token: %s
    2e7b:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002e89 <__c.4425>:
    2e89:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2e99:	56 4f 4c 55 4d 45 20 74 6f 6b 65 6e 3a 20 25 73     VOLUME token: %s
    2ea9:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002eb7 <__c.4422>:
    2eb7:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2ec7:	55 4e 49 54 20 74 6f 6b 65 6e 3a 20 25 73 2c 20     UNIT token: %s, 
    2ed7:	61 74 20 6c 69 6e 65 3a 25 64 0a 00                 at line:%d..

00002ee3 <__c.4419>:
    2ee3:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2ef3:	43 4f 4e 54 52 4f 4c 4c 45 52 20 74 6f 6b 65 6e     CONTROLLER token
    2f03:	3a 20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64     : %s, at line:%d
    2f13:	0a 00                                               ..

00002f15 <__c.4416>:
    2f15:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2f25:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    2f35:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002f43 <__c.4413>:
    2f43:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2f53:	43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a 20 25 73     CONFIG token: %s
    2f63:	2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a 00           , at line:%d..

00002f71 <__c.4410>:
    2f71:	55 6e 65 78 70 65 63 74 65 64 20 53 53 38 30 20     Unexpected SS80 
    2f81:	53 54 41 52 54 20 74 6f 6b 65 6e 3a 20 25 73 2c     START token: %s,
    2f91:	20 61 74 20 6c 69 6e 65 3a 25 64 0a 00               at line:%d..

00002f9e <__c.4407>:
    2f9e:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    2fae:	45 52 20 43 4f 4e 46 49 47 20 74 6f 6b 65 6e 3a     ER CONFIG token:
    2fbe:	20 25 73 2c 20 61 74 20 6c 69 6e 65 3a 25 64 0a      %s, at line:%d.
	...

00002fcf <__c.4404>:
    2fcf:	55 6e 65 78 70 65 63 74 65 64 20 50 52 49 4e 54     Unexpected PRINT
    2fdf:	45 52 20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74     ER token: %s, at
    2fef:	20 6c 69 6e 65 3a 25 64 0a 00                        line:%d..

00002ff9 <__c.4400>:
    2ff9:	55 6e 65 78 70 65 63 74 65 64 20 53 54 41 52 54     Unexpected START
    3009:	20 74 6f 6b 65 6e 3a 20 25 73 2c 20 61 74 20 6c      token: %s, at l
    3019:	69 6e 65 3a 25 64 0a 00                             ine:%d..

00003021 <__c.4398>:
    3021:	53 6b 69 70 70 69 6e 67 20 25 73 2c 20 61 74 20     Skipping %s, at 
    3031:	6c 69 6e 65 3a 25 64 0a 00                          line:%d..

0000303a <__c.4394>:
    303a:	52 65 61 64 5f 43 6f 6e 66 69 67 3a 20 6f 70 65     Read_Config: ope
    304a:	6e 28 25 73 29 20 66 61 69 6c 65 64 0a 00           n(%s) failed..

00003058 <__c.4392>:
    3058:	52 65 61 64 69 6e 67 3a 20 25 73 0a 00              Reading: %s..

00003065 <__c.4371>:
    3065:	6c 69 6e 65 3a 25 64 2c 20 25 73 20 69 73 20 61     line:%d, %s is a
    3075:	62 6f 76 65 20 72 61 6e 67 65 20 25 64 0a 00        bove range %d..

00003084 <__c.4369>:
    3084:	6c 69 6e 65 3a 25 64 2c 20 25 73 20 69 73 20 62     line:%d, %s is b
    3094:	65 6c 6f 77 20 72 61 6e 67 65 20 25 64 0a 00        elow range %d..

000030a3 <__c.4367>:
    30a3:	6c 69 6e 65 3a 25 64 2c 20 6d 69 73 73 69 6e 67     line:%d, missing
    30b3:	20 76 61 6c 75 65 0a 00                              value..

000030bb <__c.4344>:
    30bb:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 69 6e     alloc_device: in
    30cb:	76 61 6c 69 64 20 74 79 70 65 3a 25 64 3a 25 73     valid type:%d:%s
    30db:	0a 00                                               ..

000030dd <__c.4337>:
    30dd:	61 6c 6c 6f 63 5f 64 65 76 69 63 65 3a 20 44 65     alloc_device: De
    30ed:	76 69 63 65 20 74 61 62 6c 65 20 69 73 20 66 75     vice table is fu
    30fd:	6c 6c 0a 00                                         ll..

00003101 <__c.4330>:
    3101:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    3111:	65 3a 28 25 64 29 20 69 6e 76 61 6c 69 64 20 74     e:(%d) invalid t
    3121:	79 70 65 3a 25 64 3a 25 73 0a 00                    ype:%d:%s..

0000312c <__c.4328>:
    312c:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    313c:	65 3a 20 69 6e 64 65 78 3a 20 25 64 20 74 79 70     e: index: %d typ
    314c:	65 3a 25 64 3a 25 73 2c 20 73 74 61 74 65 20 3d     e:%d:%s, state =
    315c:	3d 20 4e 55 4c 4c 0a 00                             = NULL..

00003164 <__c.4326>:
    3164:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    3174:	65 3a 20 69 6e 64 65 78 20 25 64 20 75 6e 69 6e     e: index %d unin
    3184:	69 74 61 6c 69 7a 65 64 20 74 79 70 65 3a 25 64     italized type:%d
    3194:	3a 25 73 0a 00                                      :%s..

00003199 <__c.4324>:
    3199:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    31a9:	65 3a 20 69 6e 64 65 78 3a 25 64 20 74 79 70 65     e: index:%d type
    31b9:	3a 25 64 3a 25 73 2c 20 64 65 76 20 3d 3d 20 4e     :%d:%s, dev == N
    31c9:	55 4c 4c 0a 00                                      ULL..

000031ce <__c.4322>:
    31ce:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    31de:	65 3a 20 69 6e 64 65 78 3a 25 64 20 61 64 64 72     e: index:%d addr
    31ee:	65 73 73 3a 20 25 30 32 58 48 20 6f 75 74 20 6f     ess: %02XH out o
    31fe:	66 20 72 61 6e 67 65 0a 00                          f range..

00003207 <__c.4320>:
    3207:	73 65 74 5f 61 63 74 69 76 65 5f 64 65 76 69 63     set_active_devic
    3217:	65 3a 28 25 64 29 20 6f 75 74 20 6f 66 20 72 61     e:(%d) out of ra
    3227:	6e 67 65 0a 00                                      nge..

0000322c <__c.4624>:
    322c:	46 6f 72 6d 61 74 69 6e 67 3a 20 77 72 6f 74 65     Formating: wrote
    323c:	3a 5b 25 6c 64 5d 20 73 65 63 74 6f 72 73 0a 00     :[%ld] sectors..

0000324c <__c.4622>:
    324c:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    325c:	3a 20 73 65 63 74 6f 72 73 20 69 73 20 30 0a 00     : sectors is 0..

0000326c <__c.4620>:
    326c:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    327c:	3a 20 64 69 72 73 65 63 74 6f 72 73 20 69 73 20     : dirsectors is 
    328c:	30 0a 00                                            0..

0000328f <__c.4618>:
    328f:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    329f:	3a 20 6c 69 66 6c 61 62 65 6c 20 69 73 20 65 6d     : liflabel is em
    32af:	70 74 79 0a 00                                      pty..

000032b4 <__c.4616>:
    32b4:	6c 69 66 5f 63 72 65 61 74 65 5f 69 6d 61 67 65     lif_create_image
    32c4:	3a 20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69     : lifimagename i
    32d4:	73 20 65 6d 70 74 79 0a 00                          s empty..

000032dd <__c.4603>:
    32dd:	72 65 6e 61 6d 65 64 3a 20 25 31 30 73 20 74 6f     renamed: %10s to
    32ed:	20 25 31 30 73 0a 00                                 %10s..

000032f4 <__c.4601>:
    32f4:	6c 69 66 5f 72 65 6e 61 6d 65 3a 5b 25 73 5d 20     lif_rename:[%s] 
    3304:	6c 69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f     lif name:[%s] no
    3314:	74 20 66 6f 75 6e 64 0a 00                          t found..

0000331d <__c.4599>:
    331d:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    332d:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 63 6f 6e      new lifname con
    333d:	74 61 69 6e 73 20 62 61 64 20 63 68 61 72 61 63     tains bad charac
    334d:	74 65 72 73 0a 00                                   ters..

00003353 <__c.4597>:
    3353:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    3363:	20 6e 65 77 20 6c 69 66 6e 61 6d 65 20 69 73 20      new lifname is 
    3373:	65 6d 70 74 79 0a 00                                empty..

0000337a <__c.4595>:
    337a:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    338a:	20 6f 6c 64 20 6c 69 66 6e 61 6d 65 20 69 73 20      old lifname is 
    339a:	65 6d 70 74 79 0a 00                                empty..

000033a1 <__c.4593>:
    33a1:	6c 69 66 5f 72 65 6e 61 6d 65 5f 66 69 6c 65 3a     lif_rename_file:
    33b1:	20 6c 69 66 69 6d 61 67 65 6e 61 6d 65 20 69 73      lifimagename is
    33c1:	20 65 6d 70 74 79 0a 00                              empty..

000033c9 <__c.4584>:
    33c9:	44 65 6c 65 74 65 64 3a 20 25 31 30 73 0a 00        Deleted: %10s..

000033d8 <__c.4582>:
    33d8:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 20 6c     LIF image:[%s] l
    33e8:	69 66 20 6e 61 6d 65 3a 5b 25 73 5d 20 6e 6f 74     if name:[%s] not
    33f8:	20 66 6f 75 6e 64 0a 00                              found..

00003400 <__c.4580>:
    3400:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    3410:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 0a 00        LIF name:[%s]..

0000341f <__c.4578>:
    341f:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    342f:	66 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     fname is empty..

0000343f <__c.4576>:
    343f:	6c 69 66 5f 64 65 6c 5f 66 69 6c 65 3a 20 6c 69     lif_del_file: li
    344f:	66 69 6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d     fimagename is em
    345f:	70 74 79 0a 00                                      pty..

00003464 <__c.4568>:
    3464:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

00003471 <__c.4563>:
    3471:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

0000347e <__c.4561>:
    347e:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    348e:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    349e:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000034ae <__c.4559>:
    34ae:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    34be:	73 0a 00                                            s..

000034c1 <__c.4557>:
    34c1:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    34d1:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    34e1:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000034f0 <__c.4555>:
    34f0:	6c 69 66 5f 61 64 64 3a 20 75 73 65 72 66 69 6c     lif_add: userfil
    3500:	65 20 69 73 20 65 6d 70 74 79 0a 00                 e is empty..

0000350c <__c.4553>:
    350c:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 6e 61 6d 65     lif_add: lifname
    351c:	20 69 73 20 65 6d 70 74 79 0a 00                     is empty..

00003527 <__c.4551>:
    3527:	6c 69 66 5f 61 64 64 3a 20 6c 69 66 69 6d 61 67     lif_add: lifimag
    3537:	65 6e 61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00     ename is empty..

00003547 <__c.4534>:
    3547:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

00003554 <__c.4529>:
    3554:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

00003561 <__c.4527>:
    3561:	46 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 3a 25     File not found:%
    3571:	73 0a 00                                            s..

00003574 <__c.4525>:
    3574:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    3584:	75 6e 64 3a 25 73 0a 00                             und:%s..

0000358c <__c.4508>:
    358c:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

00003599 <__c.4505>:
    3599:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    35a9:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    35b9:	20 65 72 72 6f 72 0a 00                              error..

000035c1 <__c.4497>:
    35c1:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

000035ce <__c.4495>:
    35ce:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    35de:	5f 61 73 5f 61 73 63 69 69 3a 20 77 72 69 74 65     _as_ascii: write
    35ee:	20 65 72 72 6f 72 0a 00                              error..

000035f6 <__c.4492>:
    35f6:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    3606:	5f 61 73 5f 61 73 63 69 69 3a 20 75 6e 65 78 70     _as_ascii: unexp
    3616:	65 63 74 65 64 20 63 6f 6e 74 72 6f 6c 20 62 79     ected control by
    3626:	74 65 3a 5b 25 30 32 58 48 5d 20 40 20 6f 66 66     te:[%02XH] @ off
    3636:	73 65 74 3a 20 25 38 6c 78 2c 20 69 6e 64 3a 25     set: %8lx, ind:%
    3646:	30 32 58 48 0a 00                                   02XH..

0000364c <__c.4490>:
    364c:	6c 69 66 5f 65 78 74 72 61 63 74 5f 65 30 31 30     lif_extract_e010
    365c:	5f 61 73 5f 61 73 63 69 69 3a 20 73 74 72 69 6e     _as_ascii: strin
    366c:	67 20 74 6f 6f 20 62 69 67 20 73 69 7a 65 20 3d     g too big size =
    367c:	20 25 64 0a 00                                       %d..

00003681 <__c.4486>:
    3681:	45 78 74 72 61 63 74 69 6e 67 3a 20 25 73 0a 00     Extracting: %s..

00003691 <__c.4484>:
    3691:	46 69 6c 65 20 25 73 20 68 61 73 20 77 72 6f 6e     File %s has wron
    36a1:	67 20 74 79 70 65 3a 5b 25 30 34 58 48 5d 20 65     g type:[%04XH] e
    36b1:	78 70 65 63 74 65 64 20 30 78 45 30 31 30 2e 2e     xpected 0xE010..
    36c1:	30 78 45 30 31 33 0a 00                             0xE013..

000036c9 <__c.4482>:
    36c9:	4c 49 46 20 46 69 6c 65 20 6e 6f 74 20 66 6f 75     LIF File not fou
    36d9:	6e 64 3a 25 73 0a 00                                nd:%s..

000036e0 <__c.4480>:
    36e0:	4c 49 46 20 69 6d 61 67 65 20 6e 6f 74 20 66 6f     LIF image not fo
    36f0:	75 6e 64 3a 25 73 0a 00                             und:%s..

000036f8 <__c.4456>:
    36f8:	57 72 6f 74 65 3a 20 25 38 6c 64 0a 00              Wrote: %8ld..

00003705 <__c.4454>:
    3705:	46 69 6c 65 20 53 65 63 74 6f 72 73 3a 20 20 20     File Sectors:   
    3715:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

0000371e <__c.4452>:
    371e:	46 69 72 73 74 20 53 65 63 74 6f 72 3a 20 20 20     First Sector:   
    372e:	20 20 25 34 6c 78 48 0a 00                            %4lxH..

00003737 <__c.4450>:
    3737:	49 6e 64 65 78 3a 20 20 20 20 20 20 20 20 20 20     Index:          
    3747:	20 20 25 34 64 0a 00                                  %4d..

0000374e <__c.4448>:
    374e:	4e 61 6d 65 3a 20 20 20 20 20 20 20 20 20 20 20     Name:           
    375e:	20 20 20 25 73 0a 00                                   %s..

00003765 <__c.4446>:
    3765:	4e 65 77 20 44 69 72 65 63 74 6f 72 79 20 49 6e     New Directory In
    3775:	66 6f 72 6d 61 74 69 6f 6e 20 41 46 54 45 52 20     formation AFTER 
    3785:	77 72 69 74 65 0a 00                                write..

0000378c <__c.4444>:
    378c:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    379c:	6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65 20     not enough free 
    37ac:	73 70 61 63 65 20 66 6f 72 3a 5b 25 73 5d 0a 00     space for:[%s]..

000037bc <__c.4442>:
    37bc:	4c 49 46 20 69 6d 61 67 65 3a 5b 25 73 5d 2c 20     LIF image:[%s], 
    37cc:	4c 49 46 20 6e 61 6d 65 3a 5b 25 73 5d 2c 20 75     LIF name:[%s], u
    37dc:	73 65 72 20 66 69 6c 65 3a 5b 25 73 5d 0a 00        ser file:[%s]..

000037eb <__c.4440>:
    37eb:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    37fb:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    380b:	66 69 6c 65 20 6e 6f 74 20 66 6f 75 6e 64 0a 00     file not found..

0000381b <__c.4438>:
    381b:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    382b:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 75 73 65 72     le_as_e010: user
    383b:	66 69 6c 65 20 69 73 20 65 6d 70 74 79 0a 00        file is empty..

0000384a <__c.4436>:
    384a:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    385a:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 6e     le_as_e010: lifn
    386a:	61 6d 65 20 69 73 20 65 6d 70 74 79 0a 00           ame is empty..

00003878 <__c.4434>:
    3878:	6c 69 66 5f 61 64 64 5f 61 73 63 69 69 5f 66 69     lif_add_ascii_fi
    3888:	6c 65 5f 61 73 5f 65 30 31 30 3a 20 6c 69 66 69     le_as_e010: lifi
    3898:	6d 61 67 65 6e 61 6d 65 20 69 73 20 65 6d 70 74     magename is empt
    38a8:	79 0a 00                                            y..

000038ab <__c.4420>:
    38ab:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

000038b8 <__c.4418>:
    38b8:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

000038c5 <__c.4413>:
    38c5:	57 72 6f 74 65 3a 20 25 38 6c 64 0d 00              Wrote: %8ld..

000038d2 <__c.4396>:
    38d2:	45 78 70 65 63 74 65 64 20 73 65 63 74 6f 72 20     Expected sector 
    38e2:	62 6f 75 6e 64 72 79 2c 20 6f 66 66 73 65 74 3a     boundry, offset:
    38f2:	25 64 0a 00                                         %d..

000038f6 <__c.4379>:
    38f6:	6c 69 66 5f 65 30 31 30 5f 64 61 70 5f 73 65 63     lif_e010_dap_sec
    3906:	74 6f 72 3a 20 65 78 70 65 63 74 65 64 20 73 65     tor: expected se
    3916:	63 74 6f 72 20 62 6f 75 6e 64 72 79 3a 20 6f 66     ctor boundry: of
    3926:	66 73 65 74 3a 25 64 0a 00                          fset:%d..

0000392f <__c.4365>:
    392f:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    393f:	73 5d 20 6c 69 66 6c 61 62 65 6c 20 74 6f 6f 20     s] liflabel too 
    394f:	62 69 67 0a 00                                      big..

00003954 <__c.4363>:
    3954:	6c 69 66 5f 66 69 6e 64 5f 66 69 6c 65 3a 5b 25     lif_find_file:[%
    3964:	73 5d 20 69 6e 76 61 6c 69 64 20 63 68 61 72 61     s] invalid chara
    3974:	63 74 65 72 73 0a 00                                cters..

0000397b <__c.4356>:
    397b:	25 38 6c 64 20 46 72 65 65 20 73 65 63 74 6f 72     %8ld Free sector
    398b:	73 0a 00                                            s..

0000398e <__c.4354>:
    398e:	25 38 6c 64 20 55 73 65 64 20 73 65 63 74 6f 72     %8ld Used sector
    399e:	73 0a 00                                            s..

000039a1 <__c.4352>:
    39a1:	25 38 6c 64 20 50 75 72 67 65 64 0a 00              %8ld Purged..

000039ae <__c.4350>:
    39ae:	25 38 6c 64 20 46 69 6c 65 73 0a 00                 %8ld Files..

000039ba <__c.4348>:
    39ba:	0a 00                                               ..

000039bc <__c.4345>:
    39bc:	25 2d 31 30 73 20 20 25 30 34 58 68 20 20 20 20     %-10s  %04Xh    
    39cc:	20 20 25 38 6c 58 68 20 20 20 25 39 6c 64 25 63       %8lXh   %9ld%c
    39dc:	20 20 20 20 20 20 25 34 64 20 20 20 25 73 0a 00           %4d   %s..

000039ec <__c.4343>:
    39ec:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    39fc:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3a0c:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3a1c:	6f 72 73 3a 25 6c 64 20 21 3d 20 46 69 6c 65 53     ors:%ld != FileS
    3a2c:	65 63 74 6f 72 73 3a 25 6c 64 0a 00                 ectors:%ld..

00003a38 <__c.4340>:
    3a38:	4e 41 4d 45 20 20 20 20 20 20 20 20 20 54 59 50     NAME         TYP
    3a48:	45 20 20 20 53 54 41 52 54 20 53 45 43 54 4f 52     E   START SECTOR
    3a58:	20 20 20 20 20 20 20 20 53 49 5a 45 20 20 20 20             SIZE    
    3a68:	52 45 43 53 49 5a 45 20 20 20 44 41 54 45 0a 00     RECSIZE   DATE..

00003a78 <__c.4338>:
    3a78:	56 6f 6c 75 6d 65 3a 5b 25 73 5d 20 44 61 74 65     Volume:[%s] Date
    3a88:	3a 5b 25 73 5d 0a 00                                :[%s]..

00003a8f <__c.4328>:
    3a8f:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3a9f:	5b 25 73 5d 20 65 72 72 6f 72 20 64 69 72 65 63     [%s] error direc
    3aaf:	74 6f 72 79 20 63 68 65 63 6b 20 66 61 69 6c 65     tory check faile
    3abf:	64 0a 00                                            d..

00003ac2 <__c.4326>:
    3ac2:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3ad2:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3ae2:	65 20 76 61 6c 69 64 61 74 65 20 66 61 69 6c 65     e validate faile
    3af2:	64 0a 00                                            d..

00003af5 <__c.4324>:
    3af5:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b05:	5b 25 73 5d 20 65 72 72 6f 72 20 72 65 61 64 20     [%s] error read 
    3b15:	76 6f 6c 75 6d 65 20 68 65 61 64 65 72 20 66 61     volume header fa
    3b25:	69 6c 65 64 0a 00                                   iled..

00003b2b <__c.4322>:
    3b2b:	6c 69 66 5f 6f 70 65 6e 5f 76 6f 6c 75 6d 65 3a     lif_open_volume:
    3b3b:	5b 25 73 5d 20 65 72 72 6f 72 20 76 6f 6c 75 6d     [%s] error volum
    3b4b:	65 20 68 65 61 64 65 72 20 61 72 65 61 20 74 6f     e header area to
    3b5b:	6f 20 73 6d 61 6c 6c 3a 5b 25 6c 64 5d 0a 00        o small:[%ld]..

00003b6a <__c.4309>:
    3b6a:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 69 6e 64 65     lif_newdir: inde
    3b7a:	78 3a 5b 25 64 5d 20 61 64 64 69 6e 67 20 61 74     x:[%d] adding at
    3b8a:	3a 5b 25 6c 64 5d 74 6f 20 70 75 72 67 65 64 20     :[%ld]to purged 
    3b9a:	73 70 61 63 65 3a 5b 25 6c 64 5d 20 73 65 63 74     space:[%ld] sect
    3baa:	6f 72 73 2c 20 66 72 65 65 3a 5b 25 6c 64 5d 0a     ors, free:[%ld].
	...

00003bbb <__c.4306>:
    3bbb:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3bcb:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3bdb:	65 3a 5b 25 6c 64 5d 0a 00                          e:[%ld]..

00003be4 <__c.4304>:
    3be4:	6c 69 66 5f 6e 65 77 64 69 72 3a 20 6e 6f 74 20     lif_newdir: not 
    3bf4:	65 6e 6f 75 67 68 20 66 72 65 65 20 73 70 61 63     enough free spac
    3c04:	65 3a 5b 25 6c 64 5d 20 66 6f 72 20 73 69 7a 65     e:[%ld] for size
    3c14:	3a 5b 25 6c 64 5d 0a 00                             :[%ld]..

00003c1c <__c.4292>:
    3c1c:	6c 69 66 5f 75 70 64 61 74 65 5f 66 72 65 65 3a     lif_update_free:
    3c2c:	5b 25 73 5d 20 65 72 72 6f 72 20 70 72 65 76 69     [%s] error previ
    3c3c:	6f 75 73 20 72 65 63 6f 72 64 20 66 69 6c 65 20     ous record file 
    3c4c:	61 72 65 61 20 6f 76 65 72 6c 61 70 73 20 74 68     area overlaps th
    3c5c:	69 73 20 6f 6e 65 3a 5b 25 73 5d 0a 00              is one:[%s]..

00003c69 <__c.4267>:
    3c69:	6c 69 66 5f 63 68 65 63 6b 5f 64 69 72 3a 20 65     lif_check_dir: e
    3c79:	72 72 6f 72 2c 20 69 6e 64 65 78 3a 25 64 0a 00     rror, index:%d..

00003c89 <__c.4258>:
    3c89:	6c 69 66 5f 63 68 65 63 6b 64 69 72 69 6e 64 65     lif_checkdirinde
    3c99:	78 3a 5b 25 73 5d 20 64 69 72 65 63 6f 72 79 20     x:[%s] direcory 
    3ca9:	69 6e 64 65 78 3a 5b 25 64 5d 20 6f 75 74 20 6f     index:[%d] out o
    3cb9:	66 20 62 6f 75 6e 64 73 0a 00                       f bounds..

00003cc3 <__c.4239>:
    3cc3:	57 72 6f 74 65 3a 20 25 6c 64 0a 00                 Wrote: %ld..

00003ccf <__c.4234>:
    3ccf:	57 72 6f 74 65 3a 20 25 6c 64 0d 00                 Wrote: %ld..

00003cdb <__c.4229>:
    3cdb:	57 72 6f 74 65 3a 20 25 6c 64 0d 00                 Wrote: %ld..

00003ce7 <__c.4221>:
    3ce7:	57 72 6f 74 65 3a 20 25 6c 64 0d 00                 Wrote: %ld..

00003cf3 <__c.4205>:
    3cf3:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d03:	73 5d 20 69 6e 76 61 6c 69 64 20 73 65 63 74 6f     s] invalid secto
    3d13:	72 20 73 69 7a 65 3a 25 6c 64 0a 00                 r size:%ld..

00003d1f <__c.4203>:
    3d1f:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d2f:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3d3f:	79 74 65 73 20 3d 3d 20 30 0a 00                    ytes == 0..

00003d4a <__c.4201>:
    3d4a:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3d5a:	73 5d 20 77 61 72 6e 69 6e 67 20 46 69 6c 65 42     s] warning FileB
    3d6a:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3d7a:	6f 72 73 3a 25 6c 64 20 3c 20 46 69 6c 65 53 65     ors:%ld < FileSe
    3d8a:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003d95 <__c.4199>:
    3d95:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3da5:	73 5d 20 69 6e 76 61 6c 69 64 20 46 69 6c 65 42     s] invalid FileB
    3db5:	79 74 65 73 3a 25 6c 64 20 61 73 20 73 65 63 74     ytes:%ld as sect
    3dc5:	6f 72 73 3a 25 6c 64 20 3e 20 46 69 6c 65 53 65     ors:%ld > FileSe
    3dd5:	63 74 6f 72 73 3a 25 6c 64 0a 00                    ctors:%ld..

00003de0 <__c.4197>:
    3de0:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3df0:	73 5d 20 69 6e 76 61 6c 69 64 20 56 6f 6c 75 6d     s] invalid Volum
    3e00:	65 20 4e 75 6d 62 65 72 3a 25 58 68 0a 00           e Number:%Xh..

00003e0e <__c.4195>:
    3e0e:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e1e:	73 5d 20 69 6e 76 61 6c 69 64 20 65 6e 64 20 73     s] invalid end s
    3e2e:	65 63 74 6f 72 3a 25 6c 58 68 20 3e 20 74 6f 74     ector:%lXh > tot
    3e3e:	61 6c 20 73 65 63 74 6f 72 73 3a 25 6c 58 68 0a     al sectors:%lXh.
	...

00003e4f <__c.4193>:
    3e4f:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3e5f:	73 5d 20 69 6e 76 61 6c 69 64 20 73 74 61 72 74     s] invalid start
    3e6f:	20 73 65 63 74 6f 72 3a 25 6c 58 68 20 3c 20 66      sector:%lXh < f
    3e7f:	69 65 20 61 72 65 61 20 73 74 61 72 74 3a 25 6c     ie area start:%l
    3e8f:	58 68 0a 00                                         Xh..

00003e93 <__c.4191>:
    3e93:	4c 49 46 20 44 69 72 65 63 74 6f 72 79 3a 5b 25     LIF Directory:[%
    3ea3:	73 5d 20 69 6e 76 61 6c 69 64 20 4e 61 6d 65 0a     s] invalid Name.
	...

00003eb4 <__c.4185>:
    3eb4:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3ec4:	69 64 20 66 69 6c 65 20 73 74 61 72 74 20 3e 20     id file start > 
    3ed4:	69 6d 61 67 65 20 73 69 7a 65 0a 00                 image size..

00003ee0 <__c.4183>:
    3ee0:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3ef0:	69 64 20 44 69 72 65 63 74 6f 72 79 20 53 65 63     id Directory Sec
    3f00:	74 6f 72 20 43 6f 75 6e 74 20 3c 20 31 0a 00        tor Count < 1..

00003f0f <__c.4181>:
    3f0f:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f1f:	69 64 20 73 74 61 72 74 20 73 65 63 74 6f 72 3a     id start sector:
    3f2f:	25 6c 64 0a 00                                      %ld..

00003f34 <__c.4179>:
    3f34:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f44:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3f54:	65 74 20 32 32 26 32 33 20 73 68 6f 75 6c 64 20     et 22&23 should 
    3f64:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003f6d <__c.4177>:
    3f6d:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3f7d:	69 64 20 62 79 74 65 73 20 61 74 20 6f 66 66 73     id bytes at offs
    3f8d:	65 74 20 31 34 26 31 35 20 73 68 6f 75 6c 64 20     et 14&15 should 
    3f9d:	62 65 20 7a 65 72 6f 0a 00                          be zero..

00003fa6 <__c.4175>:
    3fa6:	4c 49 46 20 56 65 72 73 69 6f 6e 3a 20 25 30 34     LIF Version: %04
    3fb6:	58 48 20 3e 20 31 0a 00                             XH > 1..

00003fbe <__c.4173>:
    3fbe:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    3fce:	69 64 20 53 79 73 74 65 6d 33 30 30 30 20 49 44     id System3000 ID
    3fde:	20 28 25 30 34 58 48 29 20 65 78 70 65 63 74 65      (%04XH) expecte
    3fee:	64 20 31 30 30 30 48 0a 00                          d 1000H..

00003ff7 <__c.4171>:
    3ff7:	4c 49 46 20 56 6f 6c 75 6d 65 20 69 6e 76 61 6c     LIF Volume inval
    4007:	69 64 20 56 6f 6c 75 6d 65 20 4e 61 6d 65 00        id Volume Name.

00004016 <__c.4164>:
    4016:	0a 00                                               ..

00004018 <__c.4162>:
    4018:	44 49 52 20 46 69 6c 65 20 44 61 74 65 3a 20 20     DIR File Date:  
    4028:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004032 <__c.4160>:
    4032:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 20     DIR File sector 
    4042:	73 69 7a 65 3a 20 25 38 58 68 0a 00                 size: %8Xh..

0000404e <__c.4158>:
    404e:	44 49 52 20 46 69 6c 65 20 62 79 74 65 73 3a 20     DIR File bytes: 
    405e:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000406b <__c.4156>:
    406b:	44 49 52 20 46 69 6c 65 20 73 65 63 74 6f 72 73     DIR File sectors
    407b:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

00004088 <__c.4154>:
    4088:	44 49 52 20 46 69 6c 65 20 73 74 61 72 74 3a 20     DIR File start: 
    4098:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000040a5 <__c.4152>:
    40a5:	44 49 52 20 46 69 6c 65 20 56 6f 6c 75 6d 65 23     DIR File Volume#
    40b5:	3a 20 20 20 20 20 25 38 58 68 0a 00                 :     %8Xh..

000040c1 <__c.4150>:
    40c1:	44 49 52 20 46 69 6c 65 20 54 79 70 65 3a 20 20     DIR File Type:  
    40d1:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

000040dd <__c.4148>:
    40dd:	44 49 52 20 46 69 6c 65 20 4e 61 6d 65 3a 20 20     DIR File Name:  
    40ed:	20 20 20 20 20 20 25 73 0a 00                             %s..

000040f7 <__c.4146>:
    40f7:	56 4f 4c 20 44 61 74 65 3a 20 20 20 20 20 20 20     VOL Date:       
    4107:	20 20 20 20 20 20 25 73 0a 00                             %s..

00004111 <__c.4144>:
    4111:	56 4f 4c 20 4c 49 46 56 65 72 73 69 6f 6e 3a 20     VOL LIFVersion: 
    4121:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

0000412d <__c.4142>:
    412d:	56 4f 4c 20 33 30 30 30 4c 49 46 69 64 3a 20 20     VOL 3000LIFid:  
    413d:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

00004149 <__c.4140>:
    4149:	56 4f 4c 20 44 69 72 20 73 65 63 74 6f 72 73 3a     VOL Dir sectors:
    4159:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004166 <__c.4138>:
    4166:	56 4f 4c 20 44 69 72 20 73 74 61 72 74 3a 20 20     VOL Dir start:  
    4176:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004183 <__c.4136>:
    4183:	56 4f 4c 20 4c 49 46 69 64 3a 20 20 20 20 20 20     VOL LIFid:      
    4193:	20 20 20 20 20 20 25 38 58 68 0a 00                       %8Xh..

0000419f <__c.4134>:
    419f:	56 4f 4c 20 4c 61 62 65 6c 3a 20 20 20 20 20 20     VOL Label:      
    41af:	20 20 20 20 20 20 25 73 0a 00                             %s..

000041b9 <__c.4132>:
    41b9:	4c 49 46 20 70 75 72 67 65 64 3a 20 20 20 20 20     LIF purged:     
    41c9:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041d6 <__c.4130>:
    41d6:	4c 49 46 20 66 69 6c 65 73 3a 20 20 20 20 20 20     LIF files:      
    41e6:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000041f3 <__c.4128>:
    41f3:	4c 49 46 20 66 72 65 65 3a 20 20 20 20 20 20 20     LIF free:       
    4203:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004210 <__c.4126>:
    4210:	4c 49 46 20 75 73 65 64 3a 20 20 20 20 20 20 20     LIF used:       
    4220:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

0000422d <__c.4124>:
    422d:	4c 49 46 20 66 69 6c 65 20 73 65 63 74 6f 72 73     LIF file sectors
    423d:	3a 20 20 20 20 20 25 38 6c 58 68 0a 00              :     %8lXh..

0000424a <__c.4122>:
    424a:	4c 49 46 20 66 69 6c 65 73 74 61 72 74 3a 20 20     LIF filestart:  
    425a:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004267 <__c.4120>:
    4267:	4c 49 46 20 62 79 74 65 73 3a 20 20 20 20 20 20     LIF bytes:      
    4277:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

00004284 <__c.4118>:
    4284:	4c 49 46 20 73 65 63 74 6f 72 73 3a 20 20 20 20     LIF sectors:    
    4294:	20 20 20 20 20 20 25 38 6c 58 68 0a 00                    %8lXh..

000042a1 <__c.4116>:
    42a1:	4c 49 46 20 6e 61 6d 65 3a 20 20 20 20 20 20 20     LIF name:       
    42b1:	20 20 20 20 20 20 25 73 0a 00                             %s..

000042bb <__c.4114>:
    42bb:	0a 25 73 0a 00                                      .%s..

000042c0 <__c.3991>:
    42c0:	6c 69 66 5f 77 72 69 74 65 3a 20 57 72 69 74 65     lif_write: Write
    42d0:	3a 5b 25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c     :[%s] offset:[%l
    42e0:	64 5d 20 77 72 69 74 65 3a 5b 25 64 5d 20 65 78     d] write:[%d] ex
    42f0:	70 65 63 74 65 64 3a 5b 25 64 5d 0a 00              pected:[%d]..

000042fd <__c.3982>:
    42fd:	6c 69 66 5f 72 65 61 64 3a 20 72 65 61 64 3a 5b     lif_read: read:[
    430d:	25 73 5d 20 6f 66 66 73 65 74 3a 5b 25 6c 64 5d     %s] offset:[%ld]
    431d:	20 77 72 69 74 65 3a 5b 25 6c 64 5d 20 65 78 70      write:[%ld] exp
    432d:	65 63 74 65 64 3a 5b 25 64 5d 0a 00                 ected:[%d]..

00004339 <__c.3973>:
    4339:	6c 69 66 5f 72 65 61 64 5f 6d 73 67 3a 20 25 73     lif_read_msg: %s
    4349:	20 53 65 65 6b 20 65 72 72 6f 72 20 25 6c 64 0a      Seek error %ld.
	...

0000435a <__c.3966>:
    435a:	6c 69 66 5f 73 74 61 74 3a 20 43 61 6e 27 74 20     lif_stat: Can't 
    436a:	73 74 61 74 3a 25 73 0a 00                          stat:%s..

00004373 <__c.3960>:
    4373:	6c 69 66 5f 6f 70 65 6e 3a 20 43 61 6e 27 74 20     lif_open: Can't 
    4383:	6f 70 65 6e 3a 5b 25 73 5d 20 6d 6f 64 65 3a 5b     open:[%s] mode:[
    4393:	25 73 5d 0a 00                                      %s]..

00004398 <__c.3948>:
    4398:	6c 69 66 5f 66 72 65 65 3a 20 4e 55 4c 4c 20 70     lif_free: NULL p
    43a8:	6f 69 6e 74 65 72 0a 00                             ointer..

000043b0 <__c.3943>:
    43b0:	6c 69 66 5f 63 61 6c 6c 6f 63 3a 5b 25 6c 64 5d     lif_calloc:[%ld]
    43c0:	20 6e 6f 74 20 65 6e 6f 75 67 68 20 66 72 65 65      not enough free
    43d0:	20 6d 65 6d 6f 72 79 0a 00                           memory..

000043d9 <__c.3931>:
    43d9:	6c 69 66 20 61 64 64 20 6c 69 66 69 6d 61 67 65     lif add lifimage
    43e9:	20 6c 69 66 6e 61 6d 65 20 66 72 6f 6d 5f 61 73      lifname from_as
    43f9:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 61 64 64     cii_file.lif add
    4409:	62 69 6e 20 6c 69 66 69 6d 61 67 65 20 6c 69 66     bin lifimage lif
    4419:	6e 61 6d 65 20 66 72 6f 6d 5f 6c 69 66 5f 66 69     name from_lif_fi
    4429:	6c 65 0a 6c 69 66 20 63 72 65 61 74 65 20 6c 69     le.lif create li
    4439:	66 69 6d 61 67 65 20 6c 61 62 65 6c 20 64 69 72     fimage label dir
    4449:	65 63 74 6f 72 79 5f 73 65 63 74 6f 72 73 20 73     ectory_sectors s
    4459:	65 63 74 6f 72 73 0a 6c 69 66 20 64 65 6c 20 6c     ectors.lif del l
    4469:	69 66 69 6d 61 67 65 20 6e 61 6d 65 0a 6c 69 66     ifimage name.lif
    4479:	20 64 69 72 20 6c 69 66 69 6d 61 67 65 0a 6c 69      dir lifimage.li
    4489:	66 20 65 78 74 72 61 63 74 20 6c 69 66 69 6d 61     f extract lifima
    4499:	67 65 20 6c 69 66 6e 61 6d 65 20 74 6f 5f 61 73     ge lifname to_as
    44a9:	63 69 69 5f 66 69 6c 65 0a 6c 69 66 20 65 78 74     cii_file.lif ext
    44b9:	72 61 63 74 62 69 6e 20 6c 69 66 69 6d 61 67 65     ractbin lifimage
    44c9:	20 6c 69 66 6e 61 6d 65 20 74 6f 5f 6c 69 66 5f      lifname to_lif_
    44d9:	66 69 6c 65 0a 20 20 20 20 65 78 74 72 61 63 74     file.    extract
    44e9:	73 20 61 20 66 69 6c 65 20 69 6e 74 6f 20 61 20     s a file into a 
    44f9:	73 69 67 6c 65 20 66 69 6c 65 20 4c 49 46 20 69     sigle file LIF i
    4509:	6d 61 67 65 0a 6c 69 66 20 72 65 6e 61 6d 65 20     mage.lif rename 
    4519:	6c 69 66 69 6d 61 67 65 20 6f 6c 64 6c 69 66 6e     lifimage oldlifn
    4529:	61 6d 65 20 6e 65 77 6c 69 66 6e 61 6d 65 0a 55     ame newlifname.U
    4539:	73 65 20 2d 64 20 61 66 74 65 72 20 66 69 72 73     se -d after firs
    4549:	74 20 6b 65 79 77 6f 72 64 20 27 6c 69 66 27 20     t keyword 'lif' 
    4559:	61 62 6f 76 65 20 66 6f 72 20 4c 49 46 20 66 69     above for LIF fi
    4569:	6c 65 73 79 73 74 65 6d 20 64 65 62 75 67 67 69     lesystem debuggi
    4579:	6e 67 0a 0a 00                                      ng...

0000457e <__c.3929>:
    457e:	6c 69 66 20 68 65 6c 70 0a 00                       lif help..

00004588 <__c.4379>:
    4588:	53 74 61 72 74 69 6e 67 20 47 50 49 42 20 54 41     Starting GPIB TA
    4598:	53 4b 0a 00                                         SK..

0000459c <__c.4377>:
    459c:	64 65 62 75 67 6c 65 76 65 6c 20 20 20 3d 20 25     debuglevel   = %
    45ac:	30 34 78 48 0a 00                                   04xH..

000045b2 <__c.4375>:
    45b2:	47 50 49 42 20 53 74 61 74 65 20 69 6e 69 74 20     GPIB State init 
    45c2:	64 6f 6e 65 0a 00                                   done..

000045c8 <__c.4373>:
    45c8:	47 50 49 42 20 46 69 6c 65 20 69 6e 69 74 20 64     GPIB File init d
    45d8:	6f 6e 65 0a 00                                      one..

000045dd <__c.4371>:
    45dd:	47 50 49 42 20 54 69 6d 65 72 20 69 6e 69 74 20     GPIB Timer init 
    45ed:	64 6f 6e 65 0a 00                                   done..

000045f3 <__c.4369>:
    45f3:	47 50 49 42 20 54 69 6d 65 72 20 53 65 74 75 70     GPIB Timer Setup
    4603:	0a 00                                               ..

00004605 <__c.4367>:
    4605:	50 72 69 6e 74 65 72 20 49 6e 69 74 20 64 6f 6e     Printer Init don
    4615:	65 0a 00                                            e..

00004618 <__c.4365>:
    4618:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 47 50 49     initializing GPI
    4628:	42 20 62 75 73 0a 00                                B bus..

0000462f <__c.4363>:
    462f:	53 59 53 54 45 4d 5f 54 41 53 4b 5f 43 4f 55 4e     SYSTEM_TASK_COUN
    463f:	54 45 52 5f 52 45 53 3a 25 6c 64 0a 00              TER_RES:%ld..

0000464c <__c.4361>:
    464c:	43 6c 6f 63 6b 20 63 6c 65 61 72 65 64 0a 00        Clock cleared..

0000465b <__c.4359>:
    465b:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 49 32 43     initializing I2C
    466b:	20 62 75 73 0a 00                                    bus..

00004671 <__c.4357>:
    4671:	69 6e 69 74 69 61 6c 69 7a 69 6e 67 20 53 50 49     initializing SPI
    4681:	20 62 75 73 0a 00                                    bus..

00004687 <__c.4355>:
    4687:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    4697:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000046a1 <__c.4353>:
    46a1:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    46b1:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000046bb <__c.4351>:
    46bb:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    46cb:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    46db:	35 64 69 73 6b 0a 00                                5disk..

000046e2 <__c.4349>:
    46e2:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

000046f2 <__c.4347>:
    46f2:	20 28 43 29 20 32 30 31 34 2d 32 30 32 30 20 62      (C) 2014-2020 b
    4702:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

0000470f <__c.4345>:
    470f:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    471f:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

0000472e <__c.4343>:
    472e:	52 65 71 75 65 73 74 65 64 20 42 61 75 64 20 52     Requested Baud R
    473e:	61 74 65 3a 20 25 6c 64 2c 20 41 63 74 75 61 6c     ate: %ld, Actual
    474e:	3a 20 25 6c 64 0a 00                                : %ld..

00004755 <__c.4341>:
    4755:	43 50 55 20 43 6c 6f 63 6b 20 3d 20 25 6c 75 0a     CPU Clock = %lu.
	...

00004766 <__c.4339>:
    4766:	53 74 61 72 74 0a 00                                Start..

0000476d <__c.4331>:
    476d:	45 72 72 6f 72 3a 5b 25 73 5d 0a 00                 Error:[%s]..

00004779 <__c.4329>:
    4779:	0a 3e 00                                            .>.

0000477c <__c.4319>:
    477c:	64 65 6c 61 79 5f 74 65 73 74 73 0a 74 69 6d 65     delay_tests.time
    478c:	0a 73 65 74 64 61 74 65 0a 6d 65 6d 0a 0a 00        .setdate.mem...

0000479b <__c.4315>:
    479b:	4d 79 20 64 65 6c 61 79 73 0a 00                    My delays..

000047a6 <__c.4313>:
    47a6:	53 79 73 74 65 6d 20 64 65 6c 61 79 73 0a 00        System delays..

000047b5 <__c.4309>:
    47b5:	0a 00                                               ..

000047b7 <__c.4307>:
    47b7:	20 20 20 4c 61 73 74 20 75 70 64 61 74 65 64 20        Last updated 
    47c7:	66 69 6c 65 3a 20 25 73 0a 00                       file: %s..

000047d1 <__c.4305>:
    47d1:	20 20 20 47 49 54 20 6c 61 73 74 20 70 75 73 68        GIT last push
    47e1:	65 64 3a 20 20 20 25 73 0a 00                       ed:   %s..

000047eb <__c.4303>:
    47eb:	2d 3e 20 68 74 74 70 73 3a 2f 2f 67 69 74 68 75     -> https://githu
    47fb:	62 2e 63 6f 6d 2f 6d 61 67 6f 72 65 2f 68 70 38     b.com/magore/hp8
    480b:	35 64 69 73 6b 0a 00                                5disk..

00004812 <__c.4301>:
    4812:	20 47 4e 55 20 76 65 72 73 69 6f 6e 20 33 0a 00      GNU version 3..

00004822 <__c.4299>:
    4822:	20 28 63 29 20 32 30 31 34 2d 32 30 32 30 20 62      (c) 2014-2020 b
    4832:	79 20 4d 69 6b 65 20 47 6f 72 65 0a 00              y Mike Gore..

0000483f <__c.4297>:
    483f:	48 50 38 35 20 44 69 73 6b 20 61 6e 64 20 44 65     HP85 Disk and De
    484f:	76 69 63 65 20 45 6d 75 6c 61 74 6f 72 0a 00        vice Emulator..

0000485e <__c.4295>:
    485e:	53 74 61 6e 64 20 61 6c 6f 6e 65 20 76 65 72 73     Stand alone vers
    486e:	69 6f 6e 20 6f 66 20 4c 49 46 20 75 74 69 6c 69     ion of LIF utili
    487e:	74 69 65 73 20 66 6f 72 20 6c 69 6e 75 78 0a 00     ties for linux..

0000488e <__ctors_end>:
    488e:	11 24       	eor	r1, r1
    4890:	1f be       	out	0x3f, r1	; 63
    4892:	cf ef       	ldi	r28, 0xFF	; 255
    4894:	d0 e4       	ldi	r29, 0x40	; 64
    4896:	de bf       	out	0x3e, r29	; 62
    4898:	cd bf       	out	0x3d, r28	; 61

0000489a <__do_copy_data>:
    489a:	17 e1       	ldi	r17, 0x17	; 23
    489c:	a0 e0       	ldi	r26, 0x00	; 0
    489e:	b1 e0       	ldi	r27, 0x01	; 1
    48a0:	ec e1       	ldi	r30, 0x1C	; 28
    48a2:	fc ed       	ldi	r31, 0xDC	; 220
    48a4:	01 e0       	ldi	r16, 0x01	; 1
    48a6:	0b bf       	out	0x3b, r16	; 59
    48a8:	02 c0       	rjmp	.+4      	; 0x48ae <__do_copy_data+0x14>
    48aa:	07 90       	elpm	r0, Z+
    48ac:	0d 92       	st	X+, r0
    48ae:	ae 30       	cpi	r26, 0x0E	; 14
    48b0:	b1 07       	cpc	r27, r17
    48b2:	d9 f7       	brne	.-10     	; 0x48aa <__do_copy_data+0x10>

000048b4 <__do_clear_bss>:
    48b4:	2e e1       	ldi	r18, 0x1E	; 30
    48b6:	ae e0       	ldi	r26, 0x0E	; 14
    48b8:	b7 e1       	ldi	r27, 0x17	; 23
    48ba:	01 c0       	rjmp	.+2      	; 0x48be <.do_clear_bss_start>

000048bc <.do_clear_bss_loop>:
    48bc:	1d 92       	st	X+, r1

000048be <.do_clear_bss_start>:
    48be:	a1 3e       	cpi	r26, 0xE1	; 225
    48c0:	b2 07       	cpc	r27, r18
    48c2:	e1 f7       	brne	.-8      	; 0x48bc <.do_clear_bss_loop>
    48c4:	0e 94 de e6 	call	0x1cdbc	; 0x1cdbc <main>
    48c8:	0c 94 0c ee 	jmp	0x1dc18	; 0x1dc18 <_exit>

000048cc <__bad_interrupt>:
    48cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000048d0 <vfprintf>:
    48d0:	2f 92       	push	r2
    48d2:	3f 92       	push	r3
    48d4:	4f 92       	push	r4
    48d6:	5f 92       	push	r5
    48d8:	6f 92       	push	r6
    48da:	7f 92       	push	r7
    48dc:	8f 92       	push	r8
    48de:	9f 92       	push	r9
    48e0:	af 92       	push	r10
    48e2:	bf 92       	push	r11
    48e4:	cf 92       	push	r12
    48e6:	df 92       	push	r13
    48e8:	ef 92       	push	r14
    48ea:	ff 92       	push	r15
    48ec:	0f 93       	push	r16
    48ee:	1f 93       	push	r17
    48f0:	cf 93       	push	r28
    48f2:	df 93       	push	r29
    48f4:	cd b7       	in	r28, 0x3d	; 61
    48f6:	de b7       	in	r29, 0x3e	; 62
    48f8:	60 97       	sbiw	r28, 0x10	; 16
    48fa:	0f b6       	in	r0, 0x3f	; 63
    48fc:	f8 94       	cli
    48fe:	de bf       	out	0x3e, r29	; 62
    4900:	0f be       	out	0x3f, r0	; 63
    4902:	cd bf       	out	0x3d, r28	; 61
    4904:	7c 01       	movw	r14, r24
    4906:	1b 01       	movw	r2, r22
    4908:	6a 01       	movw	r12, r20
    490a:	fc 01       	movw	r30, r24
    490c:	17 82       	std	Z+7, r1	; 0x07
    490e:	16 82       	std	Z+6, r1	; 0x06
    4910:	83 81       	ldd	r24, Z+3	; 0x03
    4912:	81 ff       	sbrs	r24, 1
    4914:	44 c3       	rjmp	.+1672   	; 0x4f9e <vfprintf+0x6ce>
    4916:	9e 01       	movw	r18, r28
    4918:	2f 5f       	subi	r18, 0xFF	; 255
    491a:	3f 4f       	sbci	r19, 0xFF	; 255
    491c:	39 01       	movw	r6, r18
    491e:	f7 01       	movw	r30, r14
    4920:	93 81       	ldd	r25, Z+3	; 0x03
    4922:	f1 01       	movw	r30, r2
    4924:	93 fd       	sbrc	r25, 3
    4926:	85 91       	lpm	r24, Z+
    4928:	93 ff       	sbrs	r25, 3
    492a:	81 91       	ld	r24, Z+
    492c:	1f 01       	movw	r2, r30
    492e:	88 23       	and	r24, r24
    4930:	09 f4       	brne	.+2      	; 0x4934 <vfprintf+0x64>
    4932:	31 c3       	rjmp	.+1634   	; 0x4f96 <vfprintf+0x6c6>
    4934:	85 32       	cpi	r24, 0x25	; 37
    4936:	39 f4       	brne	.+14     	; 0x4946 <vfprintf+0x76>
    4938:	93 fd       	sbrc	r25, 3
    493a:	85 91       	lpm	r24, Z+
    493c:	93 ff       	sbrs	r25, 3
    493e:	81 91       	ld	r24, Z+
    4940:	1f 01       	movw	r2, r30
    4942:	85 32       	cpi	r24, 0x25	; 37
    4944:	39 f4       	brne	.+14     	; 0x4954 <vfprintf+0x84>
    4946:	b7 01       	movw	r22, r14
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	0e 94 7c 78 	call	0xf0f8	; 0xf0f8 <fputc>
    494e:	56 01       	movw	r10, r12
    4950:	65 01       	movw	r12, r10
    4952:	e5 cf       	rjmp	.-54     	; 0x491e <vfprintf+0x4e>
    4954:	10 e0       	ldi	r17, 0x00	; 0
    4956:	51 2c       	mov	r5, r1
    4958:	91 2c       	mov	r9, r1
    495a:	ff e1       	ldi	r31, 0x1F	; 31
    495c:	f9 15       	cp	r31, r9
    495e:	d8 f0       	brcs	.+54     	; 0x4996 <vfprintf+0xc6>
    4960:	8b 32       	cpi	r24, 0x2B	; 43
    4962:	79 f0       	breq	.+30     	; 0x4982 <vfprintf+0xb2>
    4964:	38 f4       	brcc	.+14     	; 0x4974 <vfprintf+0xa4>
    4966:	80 32       	cpi	r24, 0x20	; 32
    4968:	79 f0       	breq	.+30     	; 0x4988 <vfprintf+0xb8>
    496a:	83 32       	cpi	r24, 0x23	; 35
    496c:	a1 f4       	brne	.+40     	; 0x4996 <vfprintf+0xc6>
    496e:	f9 2d       	mov	r31, r9
    4970:	f0 61       	ori	r31, 0x10	; 16
    4972:	2e c0       	rjmp	.+92     	; 0x49d0 <vfprintf+0x100>
    4974:	8d 32       	cpi	r24, 0x2D	; 45
    4976:	61 f0       	breq	.+24     	; 0x4990 <vfprintf+0xc0>
    4978:	80 33       	cpi	r24, 0x30	; 48
    497a:	69 f4       	brne	.+26     	; 0x4996 <vfprintf+0xc6>
    497c:	29 2d       	mov	r18, r9
    497e:	21 60       	ori	r18, 0x01	; 1
    4980:	2d c0       	rjmp	.+90     	; 0x49dc <vfprintf+0x10c>
    4982:	39 2d       	mov	r19, r9
    4984:	32 60       	ori	r19, 0x02	; 2
    4986:	93 2e       	mov	r9, r19
    4988:	89 2d       	mov	r24, r9
    498a:	84 60       	ori	r24, 0x04	; 4
    498c:	98 2e       	mov	r9, r24
    498e:	2a c0       	rjmp	.+84     	; 0x49e4 <vfprintf+0x114>
    4990:	e9 2d       	mov	r30, r9
    4992:	e8 60       	ori	r30, 0x08	; 8
    4994:	15 c0       	rjmp	.+42     	; 0x49c0 <vfprintf+0xf0>
    4996:	97 fc       	sbrc	r9, 7
    4998:	2d c0       	rjmp	.+90     	; 0x49f4 <vfprintf+0x124>
    499a:	20 ed       	ldi	r18, 0xD0	; 208
    499c:	28 0f       	add	r18, r24
    499e:	2a 30       	cpi	r18, 0x0A	; 10
    49a0:	88 f4       	brcc	.+34     	; 0x49c4 <vfprintf+0xf4>
    49a2:	96 fe       	sbrs	r9, 6
    49a4:	06 c0       	rjmp	.+12     	; 0x49b2 <vfprintf+0xe2>
    49a6:	3a e0       	ldi	r19, 0x0A	; 10
    49a8:	13 9f       	mul	r17, r19
    49aa:	20 0d       	add	r18, r0
    49ac:	11 24       	eor	r1, r1
    49ae:	12 2f       	mov	r17, r18
    49b0:	19 c0       	rjmp	.+50     	; 0x49e4 <vfprintf+0x114>
    49b2:	8a e0       	ldi	r24, 0x0A	; 10
    49b4:	58 9e       	mul	r5, r24
    49b6:	20 0d       	add	r18, r0
    49b8:	11 24       	eor	r1, r1
    49ba:	52 2e       	mov	r5, r18
    49bc:	e9 2d       	mov	r30, r9
    49be:	e0 62       	ori	r30, 0x20	; 32
    49c0:	9e 2e       	mov	r9, r30
    49c2:	10 c0       	rjmp	.+32     	; 0x49e4 <vfprintf+0x114>
    49c4:	8e 32       	cpi	r24, 0x2E	; 46
    49c6:	31 f4       	brne	.+12     	; 0x49d4 <vfprintf+0x104>
    49c8:	96 fc       	sbrc	r9, 6
    49ca:	e5 c2       	rjmp	.+1482   	; 0x4f96 <vfprintf+0x6c6>
    49cc:	f9 2d       	mov	r31, r9
    49ce:	f0 64       	ori	r31, 0x40	; 64
    49d0:	9f 2e       	mov	r9, r31
    49d2:	08 c0       	rjmp	.+16     	; 0x49e4 <vfprintf+0x114>
    49d4:	8c 36       	cpi	r24, 0x6C	; 108
    49d6:	21 f4       	brne	.+8      	; 0x49e0 <vfprintf+0x110>
    49d8:	29 2d       	mov	r18, r9
    49da:	20 68       	ori	r18, 0x80	; 128
    49dc:	92 2e       	mov	r9, r18
    49de:	02 c0       	rjmp	.+4      	; 0x49e4 <vfprintf+0x114>
    49e0:	88 36       	cpi	r24, 0x68	; 104
    49e2:	41 f4       	brne	.+16     	; 0x49f4 <vfprintf+0x124>
    49e4:	f1 01       	movw	r30, r2
    49e6:	93 fd       	sbrc	r25, 3
    49e8:	85 91       	lpm	r24, Z+
    49ea:	93 ff       	sbrs	r25, 3
    49ec:	81 91       	ld	r24, Z+
    49ee:	1f 01       	movw	r2, r30
    49f0:	81 11       	cpse	r24, r1
    49f2:	b3 cf       	rjmp	.-154    	; 0x495a <vfprintf+0x8a>
    49f4:	9b eb       	ldi	r25, 0xBB	; 187
    49f6:	98 0f       	add	r25, r24
    49f8:	93 30       	cpi	r25, 0x03	; 3
    49fa:	20 f4       	brcc	.+8      	; 0x4a04 <vfprintf+0x134>
    49fc:	99 2d       	mov	r25, r9
    49fe:	90 61       	ori	r25, 0x10	; 16
    4a00:	80 5e       	subi	r24, 0xE0	; 224
    4a02:	07 c0       	rjmp	.+14     	; 0x4a12 <vfprintf+0x142>
    4a04:	9b e9       	ldi	r25, 0x9B	; 155
    4a06:	98 0f       	add	r25, r24
    4a08:	93 30       	cpi	r25, 0x03	; 3
    4a0a:	08 f0       	brcs	.+2      	; 0x4a0e <vfprintf+0x13e>
    4a0c:	66 c1       	rjmp	.+716    	; 0x4cda <vfprintf+0x40a>
    4a0e:	99 2d       	mov	r25, r9
    4a10:	9f 7e       	andi	r25, 0xEF	; 239
    4a12:	96 ff       	sbrs	r25, 6
    4a14:	16 e0       	ldi	r17, 0x06	; 6
    4a16:	9f 73       	andi	r25, 0x3F	; 63
    4a18:	99 2e       	mov	r9, r25
    4a1a:	85 36       	cpi	r24, 0x65	; 101
    4a1c:	19 f4       	brne	.+6      	; 0x4a24 <vfprintf+0x154>
    4a1e:	90 64       	ori	r25, 0x40	; 64
    4a20:	99 2e       	mov	r9, r25
    4a22:	08 c0       	rjmp	.+16     	; 0x4a34 <vfprintf+0x164>
    4a24:	86 36       	cpi	r24, 0x66	; 102
    4a26:	21 f4       	brne	.+8      	; 0x4a30 <vfprintf+0x160>
    4a28:	39 2f       	mov	r19, r25
    4a2a:	30 68       	ori	r19, 0x80	; 128
    4a2c:	93 2e       	mov	r9, r19
    4a2e:	02 c0       	rjmp	.+4      	; 0x4a34 <vfprintf+0x164>
    4a30:	11 11       	cpse	r17, r1
    4a32:	11 50       	subi	r17, 0x01	; 1
    4a34:	97 fe       	sbrs	r9, 7
    4a36:	07 c0       	rjmp	.+14     	; 0x4a46 <vfprintf+0x176>
    4a38:	1c 33       	cpi	r17, 0x3C	; 60
    4a3a:	50 f4       	brcc	.+20     	; 0x4a50 <vfprintf+0x180>
    4a3c:	44 24       	eor	r4, r4
    4a3e:	43 94       	inc	r4
    4a40:	41 0e       	add	r4, r17
    4a42:	27 e0       	ldi	r18, 0x07	; 7
    4a44:	0b c0       	rjmp	.+22     	; 0x4a5c <vfprintf+0x18c>
    4a46:	18 30       	cpi	r17, 0x08	; 8
    4a48:	38 f0       	brcs	.+14     	; 0x4a58 <vfprintf+0x188>
    4a4a:	27 e0       	ldi	r18, 0x07	; 7
    4a4c:	17 e0       	ldi	r17, 0x07	; 7
    4a4e:	05 c0       	rjmp	.+10     	; 0x4a5a <vfprintf+0x18a>
    4a50:	27 e0       	ldi	r18, 0x07	; 7
    4a52:	9c e3       	ldi	r25, 0x3C	; 60
    4a54:	49 2e       	mov	r4, r25
    4a56:	02 c0       	rjmp	.+4      	; 0x4a5c <vfprintf+0x18c>
    4a58:	21 2f       	mov	r18, r17
    4a5a:	41 2c       	mov	r4, r1
    4a5c:	56 01       	movw	r10, r12
    4a5e:	84 e0       	ldi	r24, 0x04	; 4
    4a60:	a8 0e       	add	r10, r24
    4a62:	b1 1c       	adc	r11, r1
    4a64:	f6 01       	movw	r30, r12
    4a66:	60 81       	ld	r22, Z
    4a68:	71 81       	ldd	r23, Z+1	; 0x01
    4a6a:	82 81       	ldd	r24, Z+2	; 0x02
    4a6c:	93 81       	ldd	r25, Z+3	; 0x03
    4a6e:	04 2d       	mov	r16, r4
    4a70:	a3 01       	movw	r20, r6
    4a72:	0e 94 b9 ec 	call	0x1d972	; 0x1d972 <__ftoa_engine>
    4a76:	6c 01       	movw	r12, r24
    4a78:	f9 81       	ldd	r31, Y+1	; 0x01
    4a7a:	fc 87       	std	Y+12, r31	; 0x0c
    4a7c:	f0 ff       	sbrs	r31, 0
    4a7e:	02 c0       	rjmp	.+4      	; 0x4a84 <vfprintf+0x1b4>
    4a80:	f3 ff       	sbrs	r31, 3
    4a82:	06 c0       	rjmp	.+12     	; 0x4a90 <vfprintf+0x1c0>
    4a84:	91 fc       	sbrc	r9, 1
    4a86:	06 c0       	rjmp	.+12     	; 0x4a94 <vfprintf+0x1c4>
    4a88:	92 fe       	sbrs	r9, 2
    4a8a:	06 c0       	rjmp	.+12     	; 0x4a98 <vfprintf+0x1c8>
    4a8c:	00 e2       	ldi	r16, 0x20	; 32
    4a8e:	05 c0       	rjmp	.+10     	; 0x4a9a <vfprintf+0x1ca>
    4a90:	0d e2       	ldi	r16, 0x2D	; 45
    4a92:	03 c0       	rjmp	.+6      	; 0x4a9a <vfprintf+0x1ca>
    4a94:	0b e2       	ldi	r16, 0x2B	; 43
    4a96:	01 c0       	rjmp	.+2      	; 0x4a9a <vfprintf+0x1ca>
    4a98:	00 e0       	ldi	r16, 0x00	; 0
    4a9a:	8c 85       	ldd	r24, Y+12	; 0x0c
    4a9c:	8c 70       	andi	r24, 0x0C	; 12
    4a9e:	19 f0       	breq	.+6      	; 0x4aa6 <vfprintf+0x1d6>
    4aa0:	01 11       	cpse	r16, r1
    4aa2:	5a c2       	rjmp	.+1204   	; 0x4f58 <vfprintf+0x688>
    4aa4:	9b c2       	rjmp	.+1334   	; 0x4fdc <vfprintf+0x70c>
    4aa6:	97 fe       	sbrs	r9, 7
    4aa8:	10 c0       	rjmp	.+32     	; 0x4aca <vfprintf+0x1fa>
    4aaa:	4c 0c       	add	r4, r12
    4aac:	fc 85       	ldd	r31, Y+12	; 0x0c
    4aae:	f4 ff       	sbrs	r31, 4
    4ab0:	04 c0       	rjmp	.+8      	; 0x4aba <vfprintf+0x1ea>
    4ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ab4:	81 33       	cpi	r24, 0x31	; 49
    4ab6:	09 f4       	brne	.+2      	; 0x4aba <vfprintf+0x1ea>
    4ab8:	4a 94       	dec	r4
    4aba:	14 14       	cp	r1, r4
    4abc:	74 f5       	brge	.+92     	; 0x4b1a <vfprintf+0x24a>
    4abe:	28 e0       	ldi	r18, 0x08	; 8
    4ac0:	24 15       	cp	r18, r4
    4ac2:	78 f5       	brcc	.+94     	; 0x4b22 <vfprintf+0x252>
    4ac4:	88 e0       	ldi	r24, 0x08	; 8
    4ac6:	48 2e       	mov	r4, r24
    4ac8:	2c c0       	rjmp	.+88     	; 0x4b22 <vfprintf+0x252>
    4aca:	96 fc       	sbrc	r9, 6
    4acc:	2a c0       	rjmp	.+84     	; 0x4b22 <vfprintf+0x252>
    4ace:	81 2f       	mov	r24, r17
    4ad0:	90 e0       	ldi	r25, 0x00	; 0
    4ad2:	8c 15       	cp	r24, r12
    4ad4:	9d 05       	cpc	r25, r13
    4ad6:	9c f0       	brlt	.+38     	; 0x4afe <vfprintf+0x22e>
    4ad8:	3c ef       	ldi	r19, 0xFC	; 252
    4ada:	c3 16       	cp	r12, r19
    4adc:	3f ef       	ldi	r19, 0xFF	; 255
    4ade:	d3 06       	cpc	r13, r19
    4ae0:	74 f0       	brlt	.+28     	; 0x4afe <vfprintf+0x22e>
    4ae2:	89 2d       	mov	r24, r9
    4ae4:	80 68       	ori	r24, 0x80	; 128
    4ae6:	98 2e       	mov	r9, r24
    4ae8:	0a c0       	rjmp	.+20     	; 0x4afe <vfprintf+0x22e>
    4aea:	e2 e0       	ldi	r30, 0x02	; 2
    4aec:	f0 e0       	ldi	r31, 0x00	; 0
    4aee:	ec 0f       	add	r30, r28
    4af0:	fd 1f       	adc	r31, r29
    4af2:	e1 0f       	add	r30, r17
    4af4:	f1 1d       	adc	r31, r1
    4af6:	80 81       	ld	r24, Z
    4af8:	80 33       	cpi	r24, 0x30	; 48
    4afa:	19 f4       	brne	.+6      	; 0x4b02 <vfprintf+0x232>
    4afc:	11 50       	subi	r17, 0x01	; 1
    4afe:	11 11       	cpse	r17, r1
    4b00:	f4 cf       	rjmp	.-24     	; 0x4aea <vfprintf+0x21a>
    4b02:	97 fe       	sbrs	r9, 7
    4b04:	0e c0       	rjmp	.+28     	; 0x4b22 <vfprintf+0x252>
    4b06:	44 24       	eor	r4, r4
    4b08:	43 94       	inc	r4
    4b0a:	41 0e       	add	r4, r17
    4b0c:	81 2f       	mov	r24, r17
    4b0e:	90 e0       	ldi	r25, 0x00	; 0
    4b10:	c8 16       	cp	r12, r24
    4b12:	d9 06       	cpc	r13, r25
    4b14:	2c f4       	brge	.+10     	; 0x4b20 <vfprintf+0x250>
    4b16:	1c 19       	sub	r17, r12
    4b18:	04 c0       	rjmp	.+8      	; 0x4b22 <vfprintf+0x252>
    4b1a:	44 24       	eor	r4, r4
    4b1c:	43 94       	inc	r4
    4b1e:	01 c0       	rjmp	.+2      	; 0x4b22 <vfprintf+0x252>
    4b20:	10 e0       	ldi	r17, 0x00	; 0
    4b22:	97 fe       	sbrs	r9, 7
    4b24:	06 c0       	rjmp	.+12     	; 0x4b32 <vfprintf+0x262>
    4b26:	1c 14       	cp	r1, r12
    4b28:	1d 04       	cpc	r1, r13
    4b2a:	34 f4       	brge	.+12     	; 0x4b38 <vfprintf+0x268>
    4b2c:	c6 01       	movw	r24, r12
    4b2e:	01 96       	adiw	r24, 0x01	; 1
    4b30:	05 c0       	rjmp	.+10     	; 0x4b3c <vfprintf+0x26c>
    4b32:	85 e0       	ldi	r24, 0x05	; 5
    4b34:	90 e0       	ldi	r25, 0x00	; 0
    4b36:	02 c0       	rjmp	.+4      	; 0x4b3c <vfprintf+0x26c>
    4b38:	81 e0       	ldi	r24, 0x01	; 1
    4b3a:	90 e0       	ldi	r25, 0x00	; 0
    4b3c:	01 11       	cpse	r16, r1
    4b3e:	01 96       	adiw	r24, 0x01	; 1
    4b40:	11 23       	and	r17, r17
    4b42:	31 f0       	breq	.+12     	; 0x4b50 <vfprintf+0x280>
    4b44:	21 2f       	mov	r18, r17
    4b46:	30 e0       	ldi	r19, 0x00	; 0
    4b48:	2f 5f       	subi	r18, 0xFF	; 255
    4b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    4b4c:	82 0f       	add	r24, r18
    4b4e:	93 1f       	adc	r25, r19
    4b50:	25 2d       	mov	r18, r5
    4b52:	30 e0       	ldi	r19, 0x00	; 0
    4b54:	82 17       	cp	r24, r18
    4b56:	93 07       	cpc	r25, r19
    4b58:	14 f4       	brge	.+4      	; 0x4b5e <vfprintf+0x28e>
    4b5a:	58 1a       	sub	r5, r24
    4b5c:	01 c0       	rjmp	.+2      	; 0x4b60 <vfprintf+0x290>
    4b5e:	51 2c       	mov	r5, r1
    4b60:	89 2d       	mov	r24, r9
    4b62:	89 70       	andi	r24, 0x09	; 9
    4b64:	49 f4       	brne	.+18     	; 0x4b78 <vfprintf+0x2a8>
    4b66:	55 20       	and	r5, r5
    4b68:	39 f0       	breq	.+14     	; 0x4b78 <vfprintf+0x2a8>
    4b6a:	b7 01       	movw	r22, r14
    4b6c:	80 e2       	ldi	r24, 0x20	; 32
    4b6e:	90 e0       	ldi	r25, 0x00	; 0
    4b70:	0e 94 7c 78 	call	0xf0f8	; 0xf0f8 <fputc>
    4b74:	5a 94       	dec	r5
    4b76:	f7 cf       	rjmp	.-18     	; 0x4b66 <vfprintf+0x296>
    4b78:	00 23       	and	r16, r16
    4b7a:	29 f0       	breq	.+10     	; 0x4b86 <vfprintf+0x2b6>
    4b7c:	b7 01       	movw	r22, r14
    4b7e:	80 2f       	mov	r24, r16
    4b80:	90 e0       	ldi	r25, 0x00	; 0
    4b82:	0e 94 7c 78 	call	0xf0f8	; 0xf0f8 <fputc>
    4b86:	93 fc       	sbrc	r9, 3
    4b88:	09 c0       	rjmp	.+18     	; 0x4b9c <vfprintf+0x2cc>
    4b8a:	55 20       	and	r5, r5
    4b8c:	39 f0       	breq	.+14     	; 0x4b9c <vfprintf+0x2cc>
    4b8e:	b7 01       	movw	r22, r14
    4b90:	80 e3       	ldi	r24, 0x30	; 48
    4b92:	90 e0       	ldi	r25, 0x00	; 0
    4b94:	0e 94 7c 78 	call	0xf0f8	; 0xf0f8 <fputc>
    4b98:	5a 94       	dec	r5
    4b9a:	f7 cf       	rjmp	.-18     	; 0x4b8a <vfprintf+0x2ba>
    4b9c:	97 fe       	sbrs	r9, 7
    4b9e:	4c c0       	rjmp	.+152    	; 0x4c38 <vfprintf+0x368>
    4ba0:	46 01       	movw	r8, r12
    4ba2:	d7 fe       	sbrs	r13, 7
    4ba4:	02 c0       	rjmp	.+4      	; 0x4baa <vfprintf+0x2da>
    4ba6:	81 2c       	mov	r8, r1
    4ba8:	91 2c       	mov	r9, r1
    4baa:	c6 01       	movw	r24, r12
    4bac:	88 19       	sub	r24, r8
    4bae:	99 09       	sbc	r25, r9
    4bb0:	f3 01       	movw	r30, r6
    4bb2:	e8 0f       	add	r30, r24
    4bb4:	f9 1f       	adc	r31, r25
    4bb6:	fe 87       	std	Y+14, r31	; 0x0e
    4bb8:	ed 87       	std	Y+13, r30	; 0x0d
    4bba:	96 01       	movw	r18, r12
    4bbc:	24 19       	sub	r18, r4
    4bbe:	31 09       	sbc	r19, r1
    4bc0:	38 8b       	std	Y+16, r19	; 0x10
    4bc2:	2f 87       	std	Y+15, r18	; 0x0f
    4bc4:	01 2f       	mov	r16, r17
    4bc6:	10 e0       	ldi	r17, 0x00	; 0
    4bc8:	11 95       	neg	r17
    4bca:	01 95       	neg	r16
    4bcc:	11 09       	sbc	r17, r1
    4bce:	3f ef       	ldi	r19, 0xFF	; 255
    4bd0:	83 16       	cp	r8, r19
    4bd2:	93 06       	cpc	r9, r19
    4bd4:	29 f4       	brne	.+10     	; 0x4be0 <vfprintf+0x310>
    4bd6:	b7 01       	movw	r22, r14
    4bd8:	8e e2       	ldi	r24, 0x2E	; 46
    4bda:	90 e0       	ldi	r25, 0x00	; 0
    4bdc:	0e 94 7c 78 	call	0xf0f8	; 0xf0f8 <fputc>
    4be0:	c8 14       	cp	r12, r8
    4be2:	d9 04       	cpc	r13, r9
    4be4:	4c f0       	brlt	.+18     	; 0x4bf8 <vfprintf+0x328>
    4be6:	8f 85       	ldd	r24, Y+15	; 0x0f
    4be8:	98 89       	ldd	r25, Y+16	; 0x10
    4bea:	88 15       	cp	r24, r8
    4bec:	99 05       	cpc	r25, r9
    4bee:	24 f4       	brge	.+8      	; 0x4bf8 <vfprintf+0x328>
    4bf0:	ed 85       	ldd	r30, Y+13	; 0x0d
    4bf2:	fe 85       	ldd	r31, Y+14	; 0x0e
    4bf4:	81 81       	ldd	r24, Z+1	; 0x01
    4bf6:	01 c0       	rjmp	.+2      	; 0x4bfa <vfprintf+0x32a>
    4bf8:	80 e3       	ldi	r24, 0x30	; 48
    4bfa:	f1 e0       	ldi	r31, 0x01	; 1
    4bfc:	8f 1a       	sub	r8, r31
    4bfe:	91 08       	sbc	r9, r1
    4c00:	2d 85       	ldd	r18, Y+13	; 0x0d
    4c02:	3e 85       	ldd	r19, Y+14	; 0x0e
    4c04:	2f 5f       	subi	r18, 0xFF	; 255
    4c06:	3f 4f       	sbci	r19, 0xFF	; 255
    4c08:	3e 87       	std	Y+14, r19	; 0x0e
    4c0a:	2d 87       	std	Y+13, r18	; 0x0d
    4c0c:	80 16       	cp	r8, r16
    4c0e:	91 06       	cpc	r9, r17
    4c10:	2c f0       	brlt	.+10     	; 0x4c1c <vfprintf+0x34c>
    4c12:	b7 01       	movw	r22, r14
    4c14:	90 e0       	ldi	r25, 0x00	; 0
    4c16:	0e 94 7c 78 	call	0xf0f8	; 0xf0f8 <fputc>
    4c1a:	d9 cf       	rjmp	.-78     	; 0x4bce <vfprintf+0x2fe>
    4c1c:	c8 14       	cp	r12, r8
    4c1e:	d9 04       	cpc	r13, r9
    4c20:	41 f4       	brne	.+16     	; 0x4c32 <vfprintf+0x362>
    4c22:	9a 81       	ldd	r25, Y+2	; 0x02
    4c24:	96 33       	cpi	r25, 0x36	; 54
    4c26:	20 f4       	brcc	.+8      	; 0x4c30 <vfprintf+0x360>
    4c28:	95 33       	cpi	r25, 0x35	; 53
    4c2a:	19 f4       	brne	.+6      	; 0x4c32 <vfprintf+0x362>
    4c2c:	3c 85       	ldd	r19, Y+12	; 0x0c
    4c2e:	34 ff       	sbrs	r19, 4
    4c30:	81 e3       	ldi	r24, 0x31	; 49
    4c32:	b7 01       	movw	r22, r14
    4c34:	90 e0       	ldi	r25, 0x00	; 0
    4c36:	4e c0       	rjmp	.+156    	; 0x4cd4 <vfprintf+0x404>
    4c38:	8a 81       	ldd	r24, Y+2	; 0x02
    4c3a:	81 33       	cpi	r24, 0x31	; 49
    4c3c:	19 f0       	breq	.+6      	; 0x4c44 <vfprintf+0x374>
    4c3e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4c40:	9f 7e       	andi	r25, 0xEF	; 239
    4c42:	9c 87       	std	Y+12, r25	; 0x0c
    4c44:	b7 01       	movw	r22, r14
    4c46:	90 e0       	ldi	r25, 0x00	; 0
    4c48:	0e 94 7c 78 	call	0xf0f8	; 0xf0f8 <fputc>
    4c4c:	11 11       	cpse	r17, r1
    4c4e:	05 c0       	rjmp	.+10     	; 0x4c5a <vfprintf+0x38a>
    4c50:	94 fc       	sbrc	r9, 4
    4c52:	18 c0       	rjmp	.+48     	; 0x4c84 <vfprintf+0x3b4>
    4c54:	85 e6       	ldi	r24, 0x65	; 101
    4c56:	90 e0       	ldi	r25, 0x00	; 0
    4c58:	17 c0       	rjmp	.+46     	; 0x4c88 <vfprintf+0x3b8>
    4c5a:	b7 01       	movw	r22, r14
    4c5c:	8e e2       	ldi	r24, 0x2E	; 46
    4c5e:	90 e0       	ldi	r25, 0x00	; 0
    4c60:	0e 94 7c 78 	call	0xf0f8	; 0xf0f8 <fputc>
    4c64:	1e 5f       	subi	r17, 0xFE	; 254
    4c66:	82 e0       	ldi	r24, 0x02	; 2
    4c68:	01 e0       	ldi	r16, 0x01	; 1
    4c6a:	08 0f       	add	r16, r24
    4c6c:	f3 01       	movw	r30, r6
    4c6e:	e8 0f       	add	r30, r24
    4c70:	f1 1d       	adc	r31, r1
    4c72:	80 81       	ld	r24, Z
    4c74:	b7 01       	movw	r22, r14
    4c76:	90 e0       	ldi	r25, 0x00	; 0
    4c78:	0e 94 7c 78 	call	0xf0f8	; 0xf0f8 <fputc>
    4c7c:	80 2f       	mov	r24, r16
    4c7e:	01 13       	cpse	r16, r17
    4c80:	f3 cf       	rjmp	.-26     	; 0x4c68 <vfprintf+0x398>
    4c82:	e6 cf       	rjmp	.-52     	; 0x4c50 <vfprintf+0x380>
    4c84:	85 e4       	ldi	r24, 0x45	; 69
    4c86:	90 e0       	ldi	r25, 0x00	; 0
    4c88:	b7 01       	movw	r22, r14
    4c8a:	0e 94 7c 78 	call	0xf0f8	; 0xf0f8 <fputc>
    4c8e:	d7 fc       	sbrc	r13, 7
    4c90:	06 c0       	rjmp	.+12     	; 0x4c9e <vfprintf+0x3ce>
    4c92:	c1 14       	cp	r12, r1
    4c94:	d1 04       	cpc	r13, r1
    4c96:	41 f4       	brne	.+16     	; 0x4ca8 <vfprintf+0x3d8>
    4c98:	ec 85       	ldd	r30, Y+12	; 0x0c
    4c9a:	e4 ff       	sbrs	r30, 4
    4c9c:	05 c0       	rjmp	.+10     	; 0x4ca8 <vfprintf+0x3d8>
    4c9e:	d1 94       	neg	r13
    4ca0:	c1 94       	neg	r12
    4ca2:	d1 08       	sbc	r13, r1
    4ca4:	8d e2       	ldi	r24, 0x2D	; 45
    4ca6:	01 c0       	rjmp	.+2      	; 0x4caa <vfprintf+0x3da>
    4ca8:	8b e2       	ldi	r24, 0x2B	; 43
    4caa:	b7 01       	movw	r22, r14
    4cac:	90 e0       	ldi	r25, 0x00	; 0
    4cae:	0e 94 7c 78 	call	0xf0f8	; 0xf0f8 <fputc>
    4cb2:	80 e3       	ldi	r24, 0x30	; 48
    4cb4:	2a e0       	ldi	r18, 0x0A	; 10
    4cb6:	c2 16       	cp	r12, r18
    4cb8:	d1 04       	cpc	r13, r1
    4cba:	2c f0       	brlt	.+10     	; 0x4cc6 <vfprintf+0x3f6>
    4cbc:	8f 5f       	subi	r24, 0xFF	; 255
    4cbe:	fa e0       	ldi	r31, 0x0A	; 10
    4cc0:	cf 1a       	sub	r12, r31
    4cc2:	d1 08       	sbc	r13, r1
    4cc4:	f7 cf       	rjmp	.-18     	; 0x4cb4 <vfprintf+0x3e4>
    4cc6:	b7 01       	movw	r22, r14
    4cc8:	90 e0       	ldi	r25, 0x00	; 0
    4cca:	0e 94 7c 78 	call	0xf0f8	; 0xf0f8 <fputc>
    4cce:	b7 01       	movw	r22, r14
    4cd0:	c6 01       	movw	r24, r12
    4cd2:	c0 96       	adiw	r24, 0x30	; 48
    4cd4:	0e 94 7c 78 	call	0xf0f8	; 0xf0f8 <fputc>
    4cd8:	54 c1       	rjmp	.+680    	; 0x4f82 <vfprintf+0x6b2>
    4cda:	83 36       	cpi	r24, 0x63	; 99
    4cdc:	31 f0       	breq	.+12     	; 0x4cea <vfprintf+0x41a>
    4cde:	83 37       	cpi	r24, 0x73	; 115
    4ce0:	79 f0       	breq	.+30     	; 0x4d00 <vfprintf+0x430>
    4ce2:	83 35       	cpi	r24, 0x53	; 83
    4ce4:	09 f0       	breq	.+2      	; 0x4ce8 <vfprintf+0x418>
    4ce6:	56 c0       	rjmp	.+172    	; 0x4d94 <vfprintf+0x4c4>
    4ce8:	20 c0       	rjmp	.+64     	; 0x4d2a <vfprintf+0x45a>
    4cea:	56 01       	movw	r10, r12
    4cec:	32 e0       	ldi	r19, 0x02	; 2
    4cee:	a3 0e       	add	r10, r19
    4cf0:	b1 1c       	adc	r11, r1
    4cf2:	f6 01       	movw	r30, r12
    4cf4:	80 81       	ld	r24, Z
    4cf6:	89 83       	std	Y+1, r24	; 0x01
    4cf8:	01 e0       	ldi	r16, 0x01	; 1
    4cfa:	10 e0       	ldi	r17, 0x00	; 0
    4cfc:	63 01       	movw	r12, r6
    4cfe:	12 c0       	rjmp	.+36     	; 0x4d24 <vfprintf+0x454>
    4d00:	56 01       	movw	r10, r12
    4d02:	f2 e0       	ldi	r31, 0x02	; 2
    4d04:	af 0e       	add	r10, r31
    4d06:	b1 1c       	adc	r11, r1
    4d08:	f6 01       	movw	r30, r12
    4d0a:	c0 80       	ld	r12, Z
    4d0c:	d1 80       	ldd	r13, Z+1	; 0x01
    4d0e:	96 fe       	sbrs	r9, 6
    4d10:	03 c0       	rjmp	.+6      	; 0x4d18 <vfprintf+0x448>
    4d12:	61 2f       	mov	r22, r17
    4d14:	70 e0       	ldi	r23, 0x00	; 0
    4d16:	02 c0       	rjmp	.+4      	; 0x4d1c <vfprintf+0x44c>
    4d18:	6f ef       	ldi	r22, 0xFF	; 255
    4d1a:	7f ef       	ldi	r23, 0xFF	; 255
    4d1c:	c6 01       	movw	r24, r12
    4d1e:	0e 94 a3 ed 	call	0x1db46	; 0x1db46 <strnlen>
    4d22:	8c 01       	movw	r16, r24
    4d24:	f9 2d       	mov	r31, r9
    4d26:	ff 77       	andi	r31, 0x7F	; 127
    4d28:	14 c0       	rjmp	.+40     	; 0x4d52 <vfprintf+0x482>
    4d2a:	56 01       	movw	r10, r12
    4d2c:	22 e0       	ldi	r18, 0x02	; 2
    4d2e:	a2 0e       	add	r10, r18
    4d30:	b1 1c       	adc	r11, r1
    4d32:	f6 01       	movw	r30, r12
    4d34:	c0 80       	ld	r12, Z
    4d36:	d1 80       	ldd	r13, Z+1	; 0x01
    4d38:	96 fe       	sbrs	r9, 6
    4d3a:	03 c0       	rjmp	.+6      	; 0x4d42 <vfprintf+0x472>
    4d3c:	61 2f       	mov	r22, r17
    4d3e:	70 e0       	ldi	r23, 0x00	; 0
    4d40:	02 c0       	rjmp	.+4      	; 0x4d46 <vfprintf+0x476>
    4d42:	6f ef       	ldi	r22, 0xFF	; 255
    4d44:	7f ef       	ldi	r23, 0xFF	; 255
    4d46:	c6 01       	movw	r24, r12
    4d48:	0e 94 91 ed 	call	0x1db22	; 0x1db22 <strnlen_P>
    4d4c:	8c 01       	movw	r16, r24
    4d4e:	f9 2d       	mov	r31, r9
    4d50:	f0 68       	ori	r31, 0x80	; 128
    4d52:	9f 2e       	mov	r9, r31
    4d54:	f3 fd       	sbrc	r31, 3
    4d56:	1a c0       	rjmp	.+52     	; 0x4d8c <vfprintf+0x4bc>
    4d58:	85 2d       	mov	r24, r5
    4d5a:	90 e0       	ldi	r25, 0x00	; 0
    4d5c:	08 17       	cp	r16, r24
    4d5e:	19 07       	cpc	r17, r25
    4d60:	a8 f4       	brcc	.+42     	; 0x4d8c <vfprintf+0x4bc>
    4d62:	b7 01       	movw	r22, r14
    4d64:	80 e2       	ldi	r24, 0x20	; 32
    4d66:	90 e0       	ldi	r25, 0x00	; 0
    4d68:	0e 94 7c 78 	call	0xf0f8	; 0xf0f8 <fputc>
    4d6c:	5a 94       	dec	r5
    4d6e:	f4 cf       	rjmp	.-24     	; 0x4d58 <vfprintf+0x488>
    4d70:	f6 01       	movw	r30, r12
    4d72:	97 fc       	sbrc	r9, 7
    4d74:	85 91       	lpm	r24, Z+
    4d76:	97 fe       	sbrs	r9, 7
    4d78:	81 91       	ld	r24, Z+
    4d7a:	6f 01       	movw	r12, r30
    4d7c:	b7 01       	movw	r22, r14
    4d7e:	90 e0       	ldi	r25, 0x00	; 0
    4d80:	0e 94 7c 78 	call	0xf0f8	; 0xf0f8 <fputc>
    4d84:	51 10       	cpse	r5, r1
    4d86:	5a 94       	dec	r5
    4d88:	01 50       	subi	r16, 0x01	; 1
    4d8a:	11 09       	sbc	r17, r1
    4d8c:	01 15       	cp	r16, r1
    4d8e:	11 05       	cpc	r17, r1
    4d90:	79 f7       	brne	.-34     	; 0x4d70 <vfprintf+0x4a0>
    4d92:	f7 c0       	rjmp	.+494    	; 0x4f82 <vfprintf+0x6b2>
    4d94:	84 36       	cpi	r24, 0x64	; 100
    4d96:	11 f0       	breq	.+4      	; 0x4d9c <vfprintf+0x4cc>
    4d98:	89 36       	cpi	r24, 0x69	; 105
    4d9a:	61 f5       	brne	.+88     	; 0x4df4 <vfprintf+0x524>
    4d9c:	56 01       	movw	r10, r12
    4d9e:	97 fe       	sbrs	r9, 7
    4da0:	09 c0       	rjmp	.+18     	; 0x4db4 <vfprintf+0x4e4>
    4da2:	24 e0       	ldi	r18, 0x04	; 4
    4da4:	a2 0e       	add	r10, r18
    4da6:	b1 1c       	adc	r11, r1
    4da8:	f6 01       	movw	r30, r12
    4daa:	60 81       	ld	r22, Z
    4dac:	71 81       	ldd	r23, Z+1	; 0x01
    4dae:	82 81       	ldd	r24, Z+2	; 0x02
    4db0:	93 81       	ldd	r25, Z+3	; 0x03
    4db2:	0a c0       	rjmp	.+20     	; 0x4dc8 <vfprintf+0x4f8>
    4db4:	f2 e0       	ldi	r31, 0x02	; 2
    4db6:	af 0e       	add	r10, r31
    4db8:	b1 1c       	adc	r11, r1
    4dba:	f6 01       	movw	r30, r12
    4dbc:	60 81       	ld	r22, Z
    4dbe:	71 81       	ldd	r23, Z+1	; 0x01
    4dc0:	07 2e       	mov	r0, r23
    4dc2:	00 0c       	add	r0, r0
    4dc4:	88 0b       	sbc	r24, r24
    4dc6:	99 0b       	sbc	r25, r25
    4dc8:	f9 2d       	mov	r31, r9
    4dca:	ff 76       	andi	r31, 0x6F	; 111
    4dcc:	9f 2e       	mov	r9, r31
    4dce:	97 ff       	sbrs	r25, 7
    4dd0:	09 c0       	rjmp	.+18     	; 0x4de4 <vfprintf+0x514>
    4dd2:	90 95       	com	r25
    4dd4:	80 95       	com	r24
    4dd6:	70 95       	com	r23
    4dd8:	61 95       	neg	r22
    4dda:	7f 4f       	sbci	r23, 0xFF	; 255
    4ddc:	8f 4f       	sbci	r24, 0xFF	; 255
    4dde:	9f 4f       	sbci	r25, 0xFF	; 255
    4de0:	f0 68       	ori	r31, 0x80	; 128
    4de2:	9f 2e       	mov	r9, r31
    4de4:	2a e0       	ldi	r18, 0x0A	; 10
    4de6:	30 e0       	ldi	r19, 0x00	; 0
    4de8:	a3 01       	movw	r20, r6
    4dea:	0e 94 ae ed 	call	0x1db5c	; 0x1db5c <__ultoa_invert>
    4dee:	c8 2e       	mov	r12, r24
    4df0:	c6 18       	sub	r12, r6
    4df2:	3f c0       	rjmp	.+126    	; 0x4e72 <vfprintf+0x5a2>
    4df4:	09 2d       	mov	r16, r9
    4df6:	85 37       	cpi	r24, 0x75	; 117
    4df8:	21 f4       	brne	.+8      	; 0x4e02 <vfprintf+0x532>
    4dfa:	0f 7e       	andi	r16, 0xEF	; 239
    4dfc:	2a e0       	ldi	r18, 0x0A	; 10
    4dfe:	30 e0       	ldi	r19, 0x00	; 0
    4e00:	1d c0       	rjmp	.+58     	; 0x4e3c <vfprintf+0x56c>
    4e02:	09 7f       	andi	r16, 0xF9	; 249
    4e04:	8f 36       	cpi	r24, 0x6F	; 111
    4e06:	91 f0       	breq	.+36     	; 0x4e2c <vfprintf+0x55c>
    4e08:	18 f4       	brcc	.+6      	; 0x4e10 <vfprintf+0x540>
    4e0a:	88 35       	cpi	r24, 0x58	; 88
    4e0c:	59 f0       	breq	.+22     	; 0x4e24 <vfprintf+0x554>
    4e0e:	c3 c0       	rjmp	.+390    	; 0x4f96 <vfprintf+0x6c6>
    4e10:	80 37       	cpi	r24, 0x70	; 112
    4e12:	19 f0       	breq	.+6      	; 0x4e1a <vfprintf+0x54a>
    4e14:	88 37       	cpi	r24, 0x78	; 120
    4e16:	11 f0       	breq	.+4      	; 0x4e1c <vfprintf+0x54c>
    4e18:	be c0       	rjmp	.+380    	; 0x4f96 <vfprintf+0x6c6>
    4e1a:	00 61       	ori	r16, 0x10	; 16
    4e1c:	04 ff       	sbrs	r16, 4
    4e1e:	09 c0       	rjmp	.+18     	; 0x4e32 <vfprintf+0x562>
    4e20:	04 60       	ori	r16, 0x04	; 4
    4e22:	07 c0       	rjmp	.+14     	; 0x4e32 <vfprintf+0x562>
    4e24:	94 fe       	sbrs	r9, 4
    4e26:	08 c0       	rjmp	.+16     	; 0x4e38 <vfprintf+0x568>
    4e28:	06 60       	ori	r16, 0x06	; 6
    4e2a:	06 c0       	rjmp	.+12     	; 0x4e38 <vfprintf+0x568>
    4e2c:	28 e0       	ldi	r18, 0x08	; 8
    4e2e:	30 e0       	ldi	r19, 0x00	; 0
    4e30:	05 c0       	rjmp	.+10     	; 0x4e3c <vfprintf+0x56c>
    4e32:	20 e1       	ldi	r18, 0x10	; 16
    4e34:	30 e0       	ldi	r19, 0x00	; 0
    4e36:	02 c0       	rjmp	.+4      	; 0x4e3c <vfprintf+0x56c>
    4e38:	20 e1       	ldi	r18, 0x10	; 16
    4e3a:	32 e0       	ldi	r19, 0x02	; 2
    4e3c:	56 01       	movw	r10, r12
    4e3e:	07 ff       	sbrs	r16, 7
    4e40:	09 c0       	rjmp	.+18     	; 0x4e54 <vfprintf+0x584>
    4e42:	84 e0       	ldi	r24, 0x04	; 4
    4e44:	a8 0e       	add	r10, r24
    4e46:	b1 1c       	adc	r11, r1
    4e48:	f6 01       	movw	r30, r12
    4e4a:	60 81       	ld	r22, Z
    4e4c:	71 81       	ldd	r23, Z+1	; 0x01
    4e4e:	82 81       	ldd	r24, Z+2	; 0x02
    4e50:	93 81       	ldd	r25, Z+3	; 0x03
    4e52:	08 c0       	rjmp	.+16     	; 0x4e64 <vfprintf+0x594>
    4e54:	f2 e0       	ldi	r31, 0x02	; 2
    4e56:	af 0e       	add	r10, r31
    4e58:	b1 1c       	adc	r11, r1
    4e5a:	f6 01       	movw	r30, r12
    4e5c:	60 81       	ld	r22, Z
    4e5e:	71 81       	ldd	r23, Z+1	; 0x01
    4e60:	80 e0       	ldi	r24, 0x00	; 0
    4e62:	90 e0       	ldi	r25, 0x00	; 0
    4e64:	a3 01       	movw	r20, r6
    4e66:	0e 94 ae ed 	call	0x1db5c	; 0x1db5c <__ultoa_invert>
    4e6a:	c8 2e       	mov	r12, r24
    4e6c:	c6 18       	sub	r12, r6
    4e6e:	0f 77       	andi	r16, 0x7F	; 127
    4e70:	90 2e       	mov	r9, r16
    4e72:	96 fe       	sbrs	r9, 6
    4e74:	0b c0       	rjmp	.+22     	; 0x4e8c <vfprintf+0x5bc>
    4e76:	09 2d       	mov	r16, r9
    4e78:	0e 7f       	andi	r16, 0xFE	; 254
    4e7a:	c1 16       	cp	r12, r17
    4e7c:	50 f4       	brcc	.+20     	; 0x4e92 <vfprintf+0x5c2>
    4e7e:	94 fe       	sbrs	r9, 4
    4e80:	0a c0       	rjmp	.+20     	; 0x4e96 <vfprintf+0x5c6>
    4e82:	92 fc       	sbrc	r9, 2
    4e84:	08 c0       	rjmp	.+16     	; 0x4e96 <vfprintf+0x5c6>
    4e86:	09 2d       	mov	r16, r9
    4e88:	0e 7e       	andi	r16, 0xEE	; 238
    4e8a:	05 c0       	rjmp	.+10     	; 0x4e96 <vfprintf+0x5c6>
    4e8c:	dc 2c       	mov	r13, r12
    4e8e:	09 2d       	mov	r16, r9
    4e90:	03 c0       	rjmp	.+6      	; 0x4e98 <vfprintf+0x5c8>
    4e92:	dc 2c       	mov	r13, r12
    4e94:	01 c0       	rjmp	.+2      	; 0x4e98 <vfprintf+0x5c8>
    4e96:	d1 2e       	mov	r13, r17
    4e98:	04 ff       	sbrs	r16, 4
    4e9a:	0d c0       	rjmp	.+26     	; 0x4eb6 <vfprintf+0x5e6>
    4e9c:	fe 01       	movw	r30, r28
    4e9e:	ec 0d       	add	r30, r12
    4ea0:	f1 1d       	adc	r31, r1
    4ea2:	80 81       	ld	r24, Z
    4ea4:	80 33       	cpi	r24, 0x30	; 48
    4ea6:	11 f4       	brne	.+4      	; 0x4eac <vfprintf+0x5dc>
    4ea8:	09 7e       	andi	r16, 0xE9	; 233
    4eaa:	09 c0       	rjmp	.+18     	; 0x4ebe <vfprintf+0x5ee>
    4eac:	02 ff       	sbrs	r16, 2
    4eae:	06 c0       	rjmp	.+12     	; 0x4ebc <vfprintf+0x5ec>
    4eb0:	d3 94       	inc	r13
    4eb2:	d3 94       	inc	r13
    4eb4:	04 c0       	rjmp	.+8      	; 0x4ebe <vfprintf+0x5ee>
    4eb6:	80 2f       	mov	r24, r16
    4eb8:	86 78       	andi	r24, 0x86	; 134
    4eba:	09 f0       	breq	.+2      	; 0x4ebe <vfprintf+0x5ee>
    4ebc:	d3 94       	inc	r13
    4ebe:	03 fd       	sbrc	r16, 3
    4ec0:	11 c0       	rjmp	.+34     	; 0x4ee4 <vfprintf+0x614>
    4ec2:	00 ff       	sbrs	r16, 0
    4ec4:	06 c0       	rjmp	.+12     	; 0x4ed2 <vfprintf+0x602>
    4ec6:	1c 2d       	mov	r17, r12
    4ec8:	d5 14       	cp	r13, r5
    4eca:	80 f4       	brcc	.+32     	; 0x4eec <vfprintf+0x61c>
    4ecc:	15 0d       	add	r17, r5
    4ece:	1d 19       	sub	r17, r13
    4ed0:	0d c0       	rjmp	.+26     	; 0x4eec <vfprintf+0x61c>
    4ed2:	d5 14       	cp	r13, r5
    4ed4:	58 f4       	brcc	.+22     	; 0x4eec <vfprintf+0x61c>
    4ed6:	b7 01       	movw	r22, r14
    4ed8:	80 e2       	ldi	r24, 0x20	; 32
    4eda:	90 e0       	ldi	r25, 0x00	; 0
    4edc:	0e 94 7c 78 	call	0xf0f8	; 0xf0f8 <fputc>
    4ee0:	d3 94       	inc	r13
    4ee2:	f7 cf       	rjmp	.-18     	; 0x4ed2 <vfprintf+0x602>
    4ee4:	d5 14       	cp	r13, r5
    4ee6:	10 f4       	brcc	.+4      	; 0x4eec <vfprintf+0x61c>
    4ee8:	5d 18       	sub	r5, r13
    4eea:	01 c0       	rjmp	.+2      	; 0x4eee <vfprintf+0x61e>
    4eec:	51 2c       	mov	r5, r1
    4eee:	04 ff       	sbrs	r16, 4
    4ef0:	10 c0       	rjmp	.+32     	; 0x4f12 <vfprintf+0x642>
    4ef2:	b7 01       	movw	r22, r14
    4ef4:	80 e3       	ldi	r24, 0x30	; 48
    4ef6:	90 e0       	ldi	r25, 0x00	; 0
    4ef8:	0e 94 7c 78 	call	0xf0f8	; 0xf0f8 <fputc>
    4efc:	02 ff       	sbrs	r16, 2
    4efe:	17 c0       	rjmp	.+46     	; 0x4f2e <vfprintf+0x65e>
    4f00:	01 fd       	sbrc	r16, 1
    4f02:	03 c0       	rjmp	.+6      	; 0x4f0a <vfprintf+0x63a>
    4f04:	88 e7       	ldi	r24, 0x78	; 120
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	02 c0       	rjmp	.+4      	; 0x4f0e <vfprintf+0x63e>
    4f0a:	88 e5       	ldi	r24, 0x58	; 88
    4f0c:	90 e0       	ldi	r25, 0x00	; 0
    4f0e:	b7 01       	movw	r22, r14
    4f10:	0c c0       	rjmp	.+24     	; 0x4f2a <vfprintf+0x65a>
    4f12:	80 2f       	mov	r24, r16
    4f14:	86 78       	andi	r24, 0x86	; 134
    4f16:	59 f0       	breq	.+22     	; 0x4f2e <vfprintf+0x65e>
    4f18:	01 ff       	sbrs	r16, 1
    4f1a:	02 c0       	rjmp	.+4      	; 0x4f20 <vfprintf+0x650>
    4f1c:	8b e2       	ldi	r24, 0x2B	; 43
    4f1e:	01 c0       	rjmp	.+2      	; 0x4f22 <vfprintf+0x652>
    4f20:	80 e2       	ldi	r24, 0x20	; 32
    4f22:	07 fd       	sbrc	r16, 7
    4f24:	8d e2       	ldi	r24, 0x2D	; 45
    4f26:	b7 01       	movw	r22, r14
    4f28:	90 e0       	ldi	r25, 0x00	; 0
    4f2a:	0e 94 7c 78 	call	0xf0f8	; 0xf0f8 <fputc>
    4f2e:	c1 16       	cp	r12, r17
    4f30:	38 f4       	brcc	.+14     	; 0x4f40 <vfprintf+0x670>
    4f32:	b7 01       	movw	r22, r14
    4f34:	80 e3       	ldi	r24, 0x30	; 48
    4f36:	90 e0       	ldi	r25, 0x00	; 0
    4f38:	0e 94 7c 78 	call	0xf0f8	; 0xf0f8 <fputc>
    4f3c:	11 50       	subi	r17, 0x01	; 1
    4f3e:	f7 cf       	rjmp	.-18     	; 0x4f2e <vfprintf+0x65e>
    4f40:	ca 94       	dec	r12
    4f42:	f3 01       	movw	r30, r6
    4f44:	ec 0d       	add	r30, r12
    4f46:	f1 1d       	adc	r31, r1
    4f48:	80 81       	ld	r24, Z
    4f4a:	b7 01       	movw	r22, r14
    4f4c:	90 e0       	ldi	r25, 0x00	; 0
    4f4e:	0e 94 7c 78 	call	0xf0f8	; 0xf0f8 <fputc>
    4f52:	c1 10       	cpse	r12, r1
    4f54:	f5 cf       	rjmp	.-22     	; 0x4f40 <vfprintf+0x670>
    4f56:	15 c0       	rjmp	.+42     	; 0x4f82 <vfprintf+0x6b2>
    4f58:	f4 e0       	ldi	r31, 0x04	; 4
    4f5a:	f5 15       	cp	r31, r5
    4f5c:	60 f5       	brcc	.+88     	; 0x4fb6 <vfprintf+0x6e6>
    4f5e:	84 e0       	ldi	r24, 0x04	; 4
    4f60:	58 1a       	sub	r5, r24
    4f62:	93 fe       	sbrs	r9, 3
    4f64:	1f c0       	rjmp	.+62     	; 0x4fa4 <vfprintf+0x6d4>
    4f66:	01 11       	cpse	r16, r1
    4f68:	27 c0       	rjmp	.+78     	; 0x4fb8 <vfprintf+0x6e8>
    4f6a:	2c 85       	ldd	r18, Y+12	; 0x0c
    4f6c:	23 ff       	sbrs	r18, 3
    4f6e:	2a c0       	rjmp	.+84     	; 0x4fc4 <vfprintf+0x6f4>
    4f70:	00 ed       	ldi	r16, 0xD0	; 208
    4f72:	11 e0       	ldi	r17, 0x01	; 1
    4f74:	39 2d       	mov	r19, r9
    4f76:	30 71       	andi	r19, 0x10	; 16
    4f78:	93 2e       	mov	r9, r19
    4f7a:	f8 01       	movw	r30, r16
    4f7c:	84 91       	lpm	r24, Z
    4f7e:	81 11       	cpse	r24, r1
    4f80:	24 c0       	rjmp	.+72     	; 0x4fca <vfprintf+0x6fa>
    4f82:	55 20       	and	r5, r5
    4f84:	09 f4       	brne	.+2      	; 0x4f88 <vfprintf+0x6b8>
    4f86:	e4 cc       	rjmp	.-1592   	; 0x4950 <vfprintf+0x80>
    4f88:	b7 01       	movw	r22, r14
    4f8a:	80 e2       	ldi	r24, 0x20	; 32
    4f8c:	90 e0       	ldi	r25, 0x00	; 0
    4f8e:	0e 94 7c 78 	call	0xf0f8	; 0xf0f8 <fputc>
    4f92:	5a 94       	dec	r5
    4f94:	f6 cf       	rjmp	.-20     	; 0x4f82 <vfprintf+0x6b2>
    4f96:	f7 01       	movw	r30, r14
    4f98:	86 81       	ldd	r24, Z+6	; 0x06
    4f9a:	97 81       	ldd	r25, Z+7	; 0x07
    4f9c:	26 c0       	rjmp	.+76     	; 0x4fea <vfprintf+0x71a>
    4f9e:	8f ef       	ldi	r24, 0xFF	; 255
    4fa0:	9f ef       	ldi	r25, 0xFF	; 255
    4fa2:	23 c0       	rjmp	.+70     	; 0x4fea <vfprintf+0x71a>
    4fa4:	b7 01       	movw	r22, r14
    4fa6:	80 e2       	ldi	r24, 0x20	; 32
    4fa8:	90 e0       	ldi	r25, 0x00	; 0
    4faa:	0e 94 7c 78 	call	0xf0f8	; 0xf0f8 <fputc>
    4fae:	5a 94       	dec	r5
    4fb0:	51 10       	cpse	r5, r1
    4fb2:	f8 cf       	rjmp	.-16     	; 0x4fa4 <vfprintf+0x6d4>
    4fb4:	d8 cf       	rjmp	.-80     	; 0x4f66 <vfprintf+0x696>
    4fb6:	51 2c       	mov	r5, r1
    4fb8:	b7 01       	movw	r22, r14
    4fba:	80 2f       	mov	r24, r16
    4fbc:	90 e0       	ldi	r25, 0x00	; 0
    4fbe:	0e 94 7c 78 	call	0xf0f8	; 0xf0f8 <fputc>
    4fc2:	d3 cf       	rjmp	.-90     	; 0x4f6a <vfprintf+0x69a>
    4fc4:	04 ed       	ldi	r16, 0xD4	; 212
    4fc6:	11 e0       	ldi	r17, 0x01	; 1
    4fc8:	d5 cf       	rjmp	.-86     	; 0x4f74 <vfprintf+0x6a4>
    4fca:	91 10       	cpse	r9, r1
    4fcc:	80 52       	subi	r24, 0x20	; 32
    4fce:	b7 01       	movw	r22, r14
    4fd0:	90 e0       	ldi	r25, 0x00	; 0
    4fd2:	0e 94 7c 78 	call	0xf0f8	; 0xf0f8 <fputc>
    4fd6:	0f 5f       	subi	r16, 0xFF	; 255
    4fd8:	1f 4f       	sbci	r17, 0xFF	; 255
    4fda:	cf cf       	rjmp	.-98     	; 0x4f7a <vfprintf+0x6aa>
    4fdc:	23 e0       	ldi	r18, 0x03	; 3
    4fde:	25 15       	cp	r18, r5
    4fe0:	10 f4       	brcc	.+4      	; 0x4fe6 <vfprintf+0x716>
    4fe2:	83 e0       	ldi	r24, 0x03	; 3
    4fe4:	bd cf       	rjmp	.-134    	; 0x4f60 <vfprintf+0x690>
    4fe6:	51 2c       	mov	r5, r1
    4fe8:	c0 cf       	rjmp	.-128    	; 0x4f6a <vfprintf+0x69a>
    4fea:	60 96       	adiw	r28, 0x10	; 16
    4fec:	0f b6       	in	r0, 0x3f	; 63
    4fee:	f8 94       	cli
    4ff0:	de bf       	out	0x3e, r29	; 62
    4ff2:	0f be       	out	0x3f, r0	; 63
    4ff4:	cd bf       	out	0x3d, r28	; 61
    4ff6:	df 91       	pop	r29
    4ff8:	cf 91       	pop	r28
    4ffa:	1f 91       	pop	r17
    4ffc:	0f 91       	pop	r16
    4ffe:	ff 90       	pop	r15
    5000:	ef 90       	pop	r14
    5002:	df 90       	pop	r13
    5004:	cf 90       	pop	r12
    5006:	bf 90       	pop	r11
    5008:	af 90       	pop	r10
    500a:	9f 90       	pop	r9
    500c:	8f 90       	pop	r8
    500e:	7f 90       	pop	r7
    5010:	6f 90       	pop	r6
    5012:	5f 90       	pop	r5
    5014:	4f 90       	pop	r4
    5016:	3f 90       	pop	r3
    5018:	2f 90       	pop	r2
    501a:	08 95       	ret

0000501c <chip_select>:
/// @brief SPI CS pin status
/// return CS GPIO pin number or 0xff
uint8_t spi_chip_select_status()
{
    return(_cs_pin);
}
    501c:	e8 2f       	mov	r30, r24
    501e:	e6 95       	lsr	r30
    5020:	e6 95       	lsr	r30
    5022:	e6 95       	lsr	r30
    5024:	93 e0       	ldi	r25, 0x03	; 3
    5026:	e9 9f       	mul	r30, r25
    5028:	f0 01       	movw	r30, r0
    502a:	11 24       	eor	r1, r1
    502c:	32 a1       	ldd	r19, Z+34	; 0x22
    502e:	28 2f       	mov	r18, r24
    5030:	27 70       	andi	r18, 0x07	; 7
    5032:	81 e0       	ldi	r24, 0x01	; 1
    5034:	90 e0       	ldi	r25, 0x00	; 0
    5036:	01 c0       	rjmp	.+2      	; 0x503a <chip_select+0x1e>
    5038:	88 0f       	add	r24, r24
    503a:	2a 95       	dec	r18
    503c:	ea f7       	brpl	.-6      	; 0x5038 <chip_select+0x1c>
    503e:	98 2f       	mov	r25, r24
    5040:	90 95       	com	r25
    5042:	93 23       	and	r25, r19
    5044:	92 a3       	std	Z+34, r25	; 0x22
    5046:	91 a1       	ldd	r25, Z+33	; 0x21
    5048:	89 2b       	or	r24, r25
    504a:	81 a3       	std	Z+33, r24	; 0x21
    504c:	08 95       	ret

0000504e <chip_deselect>:
    504e:	e8 2f       	mov	r30, r24
    5050:	e6 95       	lsr	r30
    5052:	e6 95       	lsr	r30
    5054:	e6 95       	lsr	r30
    5056:	93 e0       	ldi	r25, 0x03	; 3
    5058:	e9 9f       	mul	r30, r25
    505a:	f0 01       	movw	r30, r0
    505c:	11 24       	eor	r1, r1
    505e:	32 a1       	ldd	r19, Z+34	; 0x22
    5060:	28 2f       	mov	r18, r24
    5062:	27 70       	andi	r18, 0x07	; 7
    5064:	81 e0       	ldi	r24, 0x01	; 1
    5066:	90 e0       	ldi	r25, 0x00	; 0
    5068:	01 c0       	rjmp	.+2      	; 0x506c <chip_deselect+0x1e>
    506a:	88 0f       	add	r24, r24
    506c:	2a 95       	dec	r18
    506e:	ea f7       	brpl	.-6      	; 0x506a <chip_deselect+0x1c>
    5070:	93 2f       	mov	r25, r19
    5072:	98 2b       	or	r25, r24
    5074:	92 a3       	std	Z+34, r25	; 0x22
    5076:	91 a1       	ldd	r25, Z+33	; 0x21
    5078:	89 2b       	or	r24, r25
    507a:	81 a3       	std	Z+33, r24	; 0x21
    507c:	08 95       	ret

0000507e <chip_select_init>:
    507e:	e7 cf       	rjmp	.-50     	; 0x504e <chip_deselect>
    5080:	08 95       	ret

00005082 <spi_end>:
    5082:	cf 93       	push	r28
    5084:	c8 2f       	mov	r28, r24
    5086:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_cs_pin>
    508a:	8c 17       	cp	r24, r28
    508c:	a9 f0       	breq	.+42     	; 0x50b8 <spi_end+0x36>
    508e:	8f 3f       	cpi	r24, 0xFF	; 255
    5090:	99 f0       	breq	.+38     	; 0x50b8 <spi_end+0x36>
    5092:	1f 92       	push	r1
    5094:	cf 93       	push	r28
    5096:	1f 92       	push	r1
    5098:	8f 93       	push	r24
    509a:	82 ed       	ldi	r24, 0xD2	; 210
    509c:	92 e0       	ldi	r25, 0x02	; 2
    509e:	1f 92       	push	r1
    50a0:	9f 93       	push	r25
    50a2:	8f 93       	push	r24
    50a4:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    50a8:	8d b7       	in	r24, 0x3d	; 61
    50aa:	9e b7       	in	r25, 0x3e	; 62
    50ac:	07 96       	adiw	r24, 0x07	; 7
    50ae:	0f b6       	in	r0, 0x3f	; 63
    50b0:	f8 94       	cli
    50b2:	9e bf       	out	0x3e, r25	; 62
    50b4:	0f be       	out	0x3f, r0	; 63
    50b6:	8d bf       	out	0x3d, r24	; 61
    50b8:	8c 2f       	mov	r24, r28
    50ba:	c9 df       	rcall	.-110    	; 0x504e <chip_deselect>
    50bc:	8f ef       	ldi	r24, 0xFF	; 255
    50be:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_cs_pin>
    50c2:	cf 91       	pop	r28
    50c4:	08 95       	ret

000050c6 <spi_TX_buffer>:
/// @brief SPI write buffer
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void spi_TX_buffer(const uint8_t *data, int count)
{
    50c6:	7a c4       	rjmp	.+2292   	; 0x59bc <SPI0_TX>
    50c8:	08 95       	ret

000050ca <spi_RX_buffer>:
    50ca:	a2 c4       	rjmp	.+2372   	; 0x5a10 <SPI0_RX>
    50cc:	08 95       	ret

000050ce <spi_TX>:
    50ce:	a1 e0       	ldi	r26, 0x01	; 1
    50d0:	b0 e0       	ldi	r27, 0x00	; 0
    50d2:	ed e6       	ldi	r30, 0x6D	; 109
    50d4:	f8 e2       	ldi	r31, 0x28	; 40
    50d6:	0c 94 d1 e8 	jmp	0x1d1a2	; 0x1d1a2 <__prologue_saves__+0x20>
    50da:	89 83       	std	Y+1, r24	; 0x01
    50dc:	61 e0       	ldi	r22, 0x01	; 1
    50de:	70 e0       	ldi	r23, 0x00	; 0
    50e0:	ce 01       	movw	r24, r28
    50e2:	01 96       	adiw	r24, 0x01	; 1
    50e4:	6b d4       	rcall	.+2262   	; 0x59bc <SPI0_TX>
    50e6:	21 96       	adiw	r28, 0x01	; 1
    50e8:	e2 e0       	ldi	r30, 0x02	; 2
    50ea:	0c 94 ed e8 	jmp	0x1d1da	; 0x1d1da <__epilogue_restores__+0x20>

000050ee <spi_init>:
    50ee:	cf 92       	push	r12
    50f0:	df 92       	push	r13
    50f2:	ef 92       	push	r14
    50f4:	ff 92       	push	r15
    50f6:	6b 01       	movw	r12, r22
    50f8:	7c 01       	movw	r14, r24
    50fa:	84 2f       	mov	r24, r20
    50fc:	a8 df       	rcall	.-176    	; 0x504e <chip_deselect>
    50fe:	8f ef       	ldi	r24, 0xFF	; 255
    5100:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <_cs_pin>
    5104:	c7 01       	movw	r24, r14
    5106:	b6 01       	movw	r22, r12
    5108:	34 d4       	rcall	.+2152   	; 0x5972 <SPI0_Init>
    510a:	80 e0       	ldi	r24, 0x00	; 0
    510c:	90 e0       	ldi	r25, 0x00	; 0
    510e:	f5 d3       	rcall	.+2026   	; 0x58fa <SPI0_Mode>
    5110:	8f ef       	ldi	r24, 0xFF	; 255
    5112:	dd df       	rcall	.-70     	; 0x50ce <spi_TX>
    5114:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
    5118:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
    511c:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__data_start+0x2>
    5120:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__data_start+0x3>
    5124:	ff 90       	pop	r15
    5126:	ef 90       	pop	r14
    5128:	df 90       	pop	r13
    512a:	cf 90       	pop	r12
    512c:	08 95       	ret

0000512e <spi_begin>:
    512e:	cf 92       	push	r12
    5130:	df 92       	push	r13
    5132:	ef 92       	push	r14
    5134:	ff 92       	push	r15
    5136:	cf 93       	push	r28
    5138:	df 93       	push	r29
    513a:	6b 01       	movw	r12, r22
    513c:	7c 01       	movw	r14, r24
    513e:	ea 01       	movw	r28, r20
    5140:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <_cs_pin>
    5144:	8f 3f       	cpi	r24, 0xFF	; 255
    5146:	99 f0       	breq	.+38     	; 0x516e <spi_begin+0x40>
    5148:	df 93       	push	r29
    514a:	4f 93       	push	r20
    514c:	1f 92       	push	r1
    514e:	8f 93       	push	r24
    5150:	80 ef       	ldi	r24, 0xF0	; 240
    5152:	92 e0       	ldi	r25, 0x02	; 2
    5154:	1f 92       	push	r1
    5156:	9f 93       	push	r25
    5158:	8f 93       	push	r24
    515a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    515e:	8d b7       	in	r24, 0x3d	; 61
    5160:	9e b7       	in	r25, 0x3e	; 62
    5162:	07 96       	adiw	r24, 0x07	; 7
    5164:	0f b6       	in	r0, 0x3f	; 63
    5166:	f8 94       	cli
    5168:	9e bf       	out	0x3e, r25	; 62
    516a:	0f be       	out	0x3f, r0	; 63
    516c:	8d bf       	out	0x3d, r24	; 61
    516e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    5172:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    5176:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
    517a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
    517e:	8c 15       	cp	r24, r12
    5180:	9d 05       	cpc	r25, r13
    5182:	ae 05       	cpc	r26, r14
    5184:	bf 05       	cpc	r27, r15
    5186:	21 f0       	breq	.+8      	; 0x5190 <spi_begin+0x62>
    5188:	ae 01       	movw	r20, r28
    518a:	c7 01       	movw	r24, r14
    518c:	b6 01       	movw	r22, r12
    518e:	af df       	rcall	.-162    	; 0x50ee <spi_init>
    5190:	8c 2f       	mov	r24, r28
    5192:	44 df       	rcall	.-376    	; 0x501c <chip_select>
    5194:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <_cs_pin>
    5198:	df 91       	pop	r29
    519a:	cf 91       	pop	r28
    519c:	ff 90       	pop	r15
    519e:	ef 90       	pop	r14
    51a0:	df 90       	pop	r13
    51a2:	cf 90       	pop	r12
    51a4:	08 95       	ret

000051a6 <spi_TXRX>:
    51a6:	a1 e0       	ldi	r26, 0x01	; 1
    51a8:	b0 e0       	ldi	r27, 0x00	; 0
    51aa:	e9 ed       	ldi	r30, 0xD9	; 217
    51ac:	f8 e2       	ldi	r31, 0x28	; 40
    51ae:	0c 94 d1 e8 	jmp	0x1d1a2	; 0x1d1a2 <__prologue_saves__+0x20>
    51b2:	89 83       	std	Y+1, r24	; 0x01
    51b4:	61 e0       	ldi	r22, 0x01	; 1
    51b6:	70 e0       	ldi	r23, 0x00	; 0
    51b8:	ce 01       	movw	r24, r28
    51ba:	01 96       	adiw	r24, 0x01	; 1
    51bc:	13 d4       	rcall	.+2086   	; 0x59e4 <SPI0_TXRX>
    51be:	89 81       	ldd	r24, Y+1	; 0x01
    51c0:	21 96       	adiw	r28, 0x01	; 1
    51c2:	e2 e0       	ldi	r30, 0x02	; 2
    51c4:	0c 94 ed e8 	jmp	0x1d1da	; 0x1d1da <__epilogue_restores__+0x20>

000051c8 <freeRam>:
/// - avr-libc dependent code.
///
/// @return free memory in bytes.
/// @see malloc().
uint16_t freeRam ()
{
    51c8:	a2 e0       	ldi	r26, 0x02	; 2
    51ca:	b0 e0       	ldi	r27, 0x00	; 0
    51cc:	ea ee       	ldi	r30, 0xEA	; 234
    51ce:	f8 e2       	ldi	r31, 0x28	; 40
    51d0:	0c 94 d1 e8 	jmp	0x1d1a2	; 0x1d1a2 <__prologue_saves__+0x20>
    extern void * __heap_start;
    extern void * __brkval;
    int ret;
    uint16_t top;

    if(__brkval)
    51d4:	20 91 dd 1e 	lds	r18, 0x1EDD	; 0x801edd <__brkval>
    51d8:	30 91 de 1e 	lds	r19, 0x1EDE	; 0x801ede <__brkval+0x1>
    51dc:	21 15       	cp	r18, r1
    51de:	31 05       	cpc	r19, r1
    51e0:	11 f4       	brne	.+4      	; 0x51e6 <freeRam+0x1e>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    51e2:	21 ee       	ldi	r18, 0xE1	; 225
    51e4:	3e e1       	ldi	r19, 0x1E	; 30

    ret = (uint16_t) &v - top;
    return ( ret );
}
    51e6:	ce 01       	movw	r24, r28
    51e8:	01 96       	adiw	r24, 0x01	; 1
    51ea:	82 1b       	sub	r24, r18
    51ec:	93 0b       	sbc	r25, r19
    51ee:	22 96       	adiw	r28, 0x02	; 2
    51f0:	e2 e0       	ldi	r30, 0x02	; 2
    51f2:	0c 94 ed e8 	jmp	0x1d1da	; 0x1d1da <__epilogue_restores__+0x20>

000051f6 <PrintFree>:
/// - avr-libc dependent code.
/// - Stack, BSS, Data, Heap, Malloc.
///
/// @return  void
void PrintFree()
{
    51f6:	a2 e0       	ldi	r26, 0x02	; 2
    51f8:	b0 e0       	ldi	r27, 0x00	; 0
    51fa:	e1 e0       	ldi	r30, 0x01	; 1
    51fc:	f9 e2       	ldi	r31, 0x29	; 41
    51fe:	0c 94 d1 e8 	jmp	0x1d1a2	; 0x1d1a2 <__prologue_saves__+0x20>
    extern void * __data_start;
    extern void * __data_end;
    extern void * __stack;
    uint16_t ram;

    ram = freeRam();
    5202:	e2 df       	rcall	.-60     	; 0x51c8 <freeRam>
    5204:	89 83       	std	Y+1, r24	; 0x01

    printf("Free Ram:%u\n", ram);
    5206:	9a 83       	std	Y+2, r25	; 0x02
    5208:	9f 93       	push	r25
    520a:	8f 93       	push	r24
    520c:	87 e1       	ldi	r24, 0x17	; 23
    520e:	94 e0       	ldi	r25, 0x04	; 4
    5210:	1f 92       	push	r1
    5212:	9f 93       	push	r25
    5214:	8f 93       	push	r24
    5216:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    printf("  Stack Top:   %u\n", (unsigned int) &__stack);
    521a:	8f ef       	ldi	r24, 0xFF	; 255
    521c:	90 e4       	ldi	r25, 0x40	; 64
    521e:	9f 93       	push	r25
    5220:	8f 93       	push	r24
    5222:	84 e0       	ldi	r24, 0x04	; 4
    5224:	94 e0       	ldi	r25, 0x04	; 4
    5226:	1f 92       	push	r1
    5228:	9f 93       	push	r25
    522a:	8f 93       	push	r24
    522c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    printf("  Stack Free:  %u\n", (unsigned int) &ram - 0);
    5230:	ce 01       	movw	r24, r28
    5232:	01 96       	adiw	r24, 0x01	; 1
    5234:	9f 93       	push	r25
    5236:	8f 93       	push	r24
    5238:	81 ef       	ldi	r24, 0xF1	; 241
    523a:	93 e0       	ldi	r25, 0x03	; 3
    523c:	1f 92       	push	r1
    523e:	9f 93       	push	r25
    5240:	8f 93       	push	r24
    5242:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>

    printf("  BSS   start: %5u, end: %5u\n",
    5246:	81 ee       	ldi	r24, 0xE1	; 225
    5248:	9e e1       	ldi	r25, 0x1E	; 30
    524a:	9f 93       	push	r25
    524c:	8f 93       	push	r24
    524e:	8e e0       	ldi	r24, 0x0E	; 14
    5250:	97 e1       	ldi	r25, 0x17	; 23
    5252:	9f 93       	push	r25
    5254:	8f 93       	push	r24
    5256:	83 ed       	ldi	r24, 0xD3	; 211
    5258:	93 e0       	ldi	r25, 0x03	; 3
    525a:	1f 92       	push	r1
    525c:	9f 93       	push	r25
    525e:	8f 93       	push	r24
    5260:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        (unsigned int)&__bss_start, (unsigned int)&__bss_end);

    printf("  Data  start: %5u, end: %5u\n",
    5264:	8e e0       	ldi	r24, 0x0E	; 14
    5266:	97 e1       	ldi	r25, 0x17	; 23
    5268:	9f 93       	push	r25
    526a:	8f 93       	push	r24
    526c:	80 e0       	ldi	r24, 0x00	; 0
    526e:	91 e0       	ldi	r25, 0x01	; 1
    5270:	9f 93       	push	r25
    5272:	8f 93       	push	r24
    5274:	85 eb       	ldi	r24, 0xB5	; 181
    5276:	93 e0       	ldi	r25, 0x03	; 3
    5278:	1f 92       	push	r1
    527a:	9f 93       	push	r25
    527c:	8f 93       	push	r24
    527e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        (unsigned int)&__data_start, (unsigned int)&__data_end);

    printf("  Heap: start: %5u, end: %5u\n",
    5282:	80 e0       	ldi	r24, 0x00	; 0
    5284:	90 e0       	ldi	r25, 0x00	; 0
    5286:	9f 93       	push	r25
    5288:	8f 93       	push	r24
    528a:	81 ee       	ldi	r24, 0xE1	; 225
    528c:	9e e1       	ldi	r25, 0x1E	; 30
    528e:	9f 93       	push	r25
    5290:	8f 93       	push	r24
    5292:	87 e9       	ldi	r24, 0x97	; 151
    5294:	93 e0       	ldi	r25, 0x03	; 3
    5296:	1f 92       	push	r1
    5298:	9f 93       	push	r25
    529a:	8f 93       	push	r24
    529c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        (unsigned int)&__heap_start, (unsigned int)&__heap_end);

    printf("  Malloc start %5u  end: %5u\n",
    52a0:	0f b6       	in	r0, 0x3f	; 63
    52a2:	f8 94       	cli
    52a4:	de bf       	out	0x3e, r29	; 62
    52a6:	0f be       	out	0x3f, r0	; 63
    52a8:	cd bf       	out	0x3d, r28	; 61
    52aa:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <__malloc_heap_end+0x1>
    52ae:	8f 93       	push	r24
    52b0:	80 91 48 02 	lds	r24, 0x0248	; 0x800248 <__malloc_heap_end>
    52b4:	8f 93       	push	r24
    52b6:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <__malloc_heap_start+0x1>
    52ba:	8f 93       	push	r24
    52bc:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <__malloc_heap_start>
    52c0:	8f 93       	push	r24
    52c2:	89 e7       	ldi	r24, 0x79	; 121
    52c4:	93 e0       	ldi	r25, 0x03	; 3
    52c6:	1f 92       	push	r1
    52c8:	9f 93       	push	r25
    52ca:	8f 93       	push	r24
    52cc:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        (unsigned int)__malloc_heap_start, (unsigned int) __malloc_heap_end );

    printf("  __brkval:    %5u\n", (unsigned int) __brkval);
    52d0:	80 91 de 1e 	lds	r24, 0x1EDE	; 0x801ede <__brkval+0x1>
    52d4:	8f 93       	push	r24
    52d6:	80 91 dd 1e 	lds	r24, 0x1EDD	; 0x801edd <__brkval>
    52da:	8f 93       	push	r24
    52dc:	85 e6       	ldi	r24, 0x65	; 101
    52de:	93 e0       	ldi	r25, 0x03	; 3
    52e0:	1f 92       	push	r1
    52e2:	9f 93       	push	r25
    52e4:	8f 93       	push	r24
    52e6:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>

}
    52ea:	0f b6       	in	r0, 0x3f	; 63
    52ec:	f8 94       	cli
    52ee:	de bf       	out	0x3e, r29	; 62
    52f0:	0f be       	out	0x3f, r0	; 63
    52f2:	cd bf       	out	0x3d, r28	; 61
    52f4:	22 96       	adiw	r28, 0x02	; 2
    52f6:	e2 e0       	ldi	r30, 0x02	; 2
    52f8:	0c 94 ed e8 	jmp	0x1d1da	; 0x1d1da <__epilogue_restores__+0x20>

000052fc <safecalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
///
/// @return  void.
void *safecalloc(int size, int elements)
{
    52fc:	ef 92       	push	r14
    52fe:	ff 92       	push	r15
    5300:	0f 93       	push	r16
    5302:	1f 93       	push	r17
    5304:	cf 93       	push	r28
    5306:	df 93       	push	r29
    5308:	18 2f       	mov	r17, r24
    530a:	09 2f       	mov	r16, r25
    530c:	f6 2e       	mov	r15, r22
    530e:	e7 2e       	mov	r14, r23
	void *p = calloc(size, elements);
    5310:	0e 94 7e eb 	call	0x1d6fc	; 0x1d6fc <calloc>
    5314:	ec 01       	movw	r28, r24
	if(!p)
    5316:	89 2b       	or	r24, r25
    5318:	99 f4       	brne	.+38     	; 0x5340 <safecalloc+0x44>
	{
		printf("safecalloc(%d,%d) failed!\n", size, elements);
    531a:	ef 92       	push	r14
    531c:	ff 92       	push	r15
    531e:	0f 93       	push	r16
    5320:	1f 93       	push	r17
    5322:	8a e4       	ldi	r24, 0x4A	; 74
    5324:	93 e0       	ldi	r25, 0x03	; 3
    5326:	1f 92       	push	r1
    5328:	9f 93       	push	r25
    532a:	8f 93       	push	r24
    532c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    5330:	8d b7       	in	r24, 0x3d	; 61
    5332:	9e b7       	in	r25, 0x3e	; 62
    5334:	07 96       	adiw	r24, 0x07	; 7
    5336:	0f b6       	in	r0, 0x3f	; 63
    5338:	f8 94       	cli
    533a:	9e bf       	out	0x3e, r25	; 62
    533c:	0f be       	out	0x3f, r0	; 63
    533e:	8d bf       	out	0x3d, r24	; 61
	}
	return(p);
}
    5340:	ce 01       	movw	r24, r28
    5342:	cd b7       	in	r28, 0x3d	; 61
    5344:	de b7       	in	r29, 0x3e	; 62
    5346:	e6 e0       	ldi	r30, 0x06	; 6
    5348:	0c 94 e9 e8 	jmp	0x1d1d2	; 0x1d1d2 <__epilogue_restores__+0x18>

0000534c <safemalloc>:
///  - We check if the pointer was in the heap.
///  - Otherwise it may have been statically defined - display error.
/// @param[in] size:  size
/// @return  void.
void *safemalloc(size_t size)
{
    534c:	0f 93       	push	r16
    534e:	1f 93       	push	r17
    5350:	cf 93       	push	r28
    5352:	df 93       	push	r29
    5354:	18 2f       	mov	r17, r24
    5356:	09 2f       	mov	r16, r25
    void *p = calloc(size, 1);
    5358:	61 e0       	ldi	r22, 0x01	; 1
    535a:	70 e0       	ldi	r23, 0x00	; 0
    535c:	0e 94 7e eb 	call	0x1d6fc	; 0x1d6fc <calloc>
    5360:	ec 01       	movw	r28, r24
    if(!p)
    5362:	89 2b       	or	r24, r25
    5364:	71 f4       	brne	.+28     	; 0x5382 <safemalloc+0x36>
    {
        printf("safemalloc(%d) failed!\n", size);
    5366:	0f 93       	push	r16
    5368:	1f 93       	push	r17
    536a:	82 e3       	ldi	r24, 0x32	; 50
    536c:	93 e0       	ldi	r25, 0x03	; 3
    536e:	1f 92       	push	r1
    5370:	9f 93       	push	r25
    5372:	8f 93       	push	r24
    5374:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    5378:	0f 90       	pop	r0
    537a:	0f 90       	pop	r0
    537c:	0f 90       	pop	r0
    537e:	0f 90       	pop	r0
    5380:	0f 90       	pop	r0
    }
    return(p);
}
    5382:	ce 01       	movw	r24, r28
    5384:	df 91       	pop	r29
    5386:	cf 91       	pop	r28
    5388:	1f 91       	pop	r17
    538a:	0f 91       	pop	r16
    538c:	08 95       	ret

0000538e <safefree>:
    extern void *__brkval;
    extern void * __heap_start;
    extern void * __heap_end;
    uint16_t top;

    if(p == NULL)
    538e:	00 97       	sbiw	r24, 0x00	; 0
    5390:	39 f1       	breq	.+78     	; 0x53e0 <safefree+0x52>
        return;

    if(__brkval)
    5392:	20 91 dd 1e 	lds	r18, 0x1EDD	; 0x801edd <__brkval>
    5396:	30 91 de 1e 	lds	r19, 0x1EDE	; 0x801ede <__brkval+0x1>
    539a:	21 15       	cp	r18, r1
    539c:	31 05       	cpc	r19, r1
    539e:	11 f4       	brne	.+4      	; 0x53a4 <safefree+0x16>
        top = (uint16_t) __brkval;
    else
        top = (uint16_t) & __heap_start;
    53a0:	21 ee       	ldi	r18, 0xE1	; 225
    53a2:	3e e1       	ldi	r19, 0x1E	; 30

    if( ((uint16_t) p >= (uint16_t) &__heap_start) &&
    53a4:	4e e1       	ldi	r20, 0x1E	; 30
    53a6:	81 3e       	cpi	r24, 0xE1	; 225
    53a8:	94 07       	cpc	r25, r20
    53aa:	30 f0       	brcs	.+12     	; 0x53b8 <safefree+0x2a>
    53ac:	28 17       	cp	r18, r24
    53ae:	39 07       	cpc	r19, r25
    53b0:	18 f0       	brcs	.+6      	; 0x53b8 <safefree+0x2a>
        ((uint16_t) p <= top) )
    {
        free(p);
    53b2:	0c 94 30 ec 	jmp	0x1d860	; 0x1d860 <free>
        return;
    53b6:	08 95       	ret
    }
    printf("safefree: FREE ERROR (%u), top:(%u)\n", (uint16_t) p, (uint16_t) top);
    53b8:	3f 93       	push	r19
    53ba:	2f 93       	push	r18
    53bc:	9f 93       	push	r25
    53be:	8f 93       	push	r24
    53c0:	8d e0       	ldi	r24, 0x0D	; 13
    53c2:	93 e0       	ldi	r25, 0x03	; 3
    53c4:	1f 92       	push	r1
    53c6:	9f 93       	push	r25
    53c8:	8f 93       	push	r24
    53ca:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    PrintFree();
    53ce:	13 df       	rcall	.-474    	; 0x51f6 <PrintFree>
    53d0:	8d b7       	in	r24, 0x3d	; 61
    53d2:	9e b7       	in	r25, 0x3e	; 62
    53d4:	07 96       	adiw	r24, 0x07	; 7
    53d6:	0f b6       	in	r0, 0x3f	; 63
    53d8:	f8 94       	cli
    53da:	9e bf       	out	0x3e, r25	; 62
    53dc:	0f be       	out	0x3f, r0	; 63
    53de:	8d bf       	out	0x3d, r24	; 61
    53e0:	08 95       	ret

000053e2 <delayus>:
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayus(uint32_t us)
{

    while (us >= 100U)
    53e2:	64 36       	cpi	r22, 0x64	; 100
    53e4:	71 05       	cpc	r23, r1
    53e6:	81 05       	cpc	r24, r1
    53e8:	91 05       	cpc	r25, r1
    53ea:	58 f0       	brcs	.+22     	; 0x5402 <delayus+0x20>
    {
        us -= 100U;
    53ec:	64 56       	subi	r22, 0x64	; 100
    53ee:	71 09       	sbc	r23, r1
    53f0:	81 09       	sbc	r24, r1
    53f2:	91 09       	sbc	r25, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    53f4:	e3 ef       	ldi	r30, 0xF3	; 243
    53f6:	f1 e0       	ldi	r31, 0x01	; 1
    53f8:	31 97       	sbiw	r30, 0x01	; 1
    53fa:	f1 f7       	brne	.-4      	; 0x53f8 <delayus+0x16>
    53fc:	00 c0       	rjmp	.+0      	; 0x53fe <delayus+0x1c>
    53fe:	00 00       	nop
    5400:	f0 cf       	rjmp	.-32     	; 0x53e2 <delayus>
        _delay_us(100);
    }
    while (us >= 10U)
    5402:	6a 30       	cpi	r22, 0x0A	; 10
    5404:	71 05       	cpc	r23, r1
    5406:	81 05       	cpc	r24, r1
    5408:	91 05       	cpc	r25, r1
    540a:	48 f0       	brcs	.+18     	; 0x541e <delayus+0x3c>
    {
        us -= 10U;
    540c:	6a 50       	subi	r22, 0x0A	; 10
    540e:	71 09       	sbc	r23, r1
    5410:	81 09       	sbc	r24, r1
    5412:	91 09       	sbc	r25, r1
    5414:	f2 e4       	ldi	r31, 0x42	; 66
    5416:	fa 95       	dec	r31
    5418:	f1 f7       	brne	.-4      	; 0x5416 <delayus+0x34>
    541a:	00 c0       	rjmp	.+0      	; 0x541c <delayus+0x3a>
    541c:	f2 cf       	rjmp	.-28     	; 0x5402 <delayus+0x20>
        _delay_us(10);
    }
    while (us != 0U)
    541e:	61 15       	cp	r22, r1
    5420:	71 05       	cpc	r23, r1
    5422:	81 05       	cpc	r24, r1
    5424:	91 05       	cpc	r25, r1
    5426:	49 f0       	breq	.+18     	; 0x543a <delayus+0x58>
    {
        --us;
    5428:	61 50       	subi	r22, 0x01	; 1
    542a:	71 09       	sbc	r23, r1
    542c:	81 09       	sbc	r24, r1
    542e:	91 09       	sbc	r25, r1
    5430:	26 e0       	ldi	r18, 0x06	; 6
    5432:	2a 95       	dec	r18
    5434:	f1 f7       	brne	.-4      	; 0x5432 <delayus+0x50>
    5436:	00 c0       	rjmp	.+0      	; 0x5438 <delayus+0x56>
    5438:	f2 cf       	rjmp	.-28     	; 0x541e <delayus+0x3c>
        _delay_us(1);
    }
}
    543a:	08 95       	ret

0000543c <delayms>:
/// _delay_us() has limited range - this extends it.
/// @return  void
/// @see _delay_us() is part of avr-libc
void delayms(uint32_t ms)
{
    while (ms--)
    543c:	61 15       	cp	r22, r1
    543e:	71 05       	cpc	r23, r1
    5440:	81 05       	cpc	r24, r1
    5442:	91 05       	cpc	r25, r1
    5444:	09 f4       	brne	.+2      	; 0x5448 <delayms+0xc>
    5446:	41 c0       	rjmp	.+130    	; 0x54ca <delayms+0x8e>
    5448:	e3 ef       	ldi	r30, 0xF3	; 243
    544a:	f1 e0       	ldi	r31, 0x01	; 1
    544c:	31 97       	sbiw	r30, 0x01	; 1
    544e:	f1 f7       	brne	.-4      	; 0x544c <delayms+0x10>
    5450:	00 c0       	rjmp	.+0      	; 0x5452 <delayms+0x16>
    5452:	00 00       	nop
    5454:	e3 ef       	ldi	r30, 0xF3	; 243
    5456:	f1 e0       	ldi	r31, 0x01	; 1
    5458:	31 97       	sbiw	r30, 0x01	; 1
    545a:	f1 f7       	brne	.-4      	; 0x5458 <delayms+0x1c>
    545c:	00 c0       	rjmp	.+0      	; 0x545e <delayms+0x22>
    545e:	00 00       	nop
    5460:	e3 ef       	ldi	r30, 0xF3	; 243
    5462:	f1 e0       	ldi	r31, 0x01	; 1
    5464:	31 97       	sbiw	r30, 0x01	; 1
    5466:	f1 f7       	brne	.-4      	; 0x5464 <delayms+0x28>
    5468:	00 c0       	rjmp	.+0      	; 0x546a <delayms+0x2e>
    546a:	00 00       	nop
    546c:	e3 ef       	ldi	r30, 0xF3	; 243
    546e:	f1 e0       	ldi	r31, 0x01	; 1
    5470:	31 97       	sbiw	r30, 0x01	; 1
    5472:	f1 f7       	brne	.-4      	; 0x5470 <delayms+0x34>
    5474:	00 c0       	rjmp	.+0      	; 0x5476 <delayms+0x3a>
    5476:	00 00       	nop
    5478:	e3 ef       	ldi	r30, 0xF3	; 243
    547a:	f1 e0       	ldi	r31, 0x01	; 1
    547c:	31 97       	sbiw	r30, 0x01	; 1
    547e:	f1 f7       	brne	.-4      	; 0x547c <delayms+0x40>
    5480:	00 c0       	rjmp	.+0      	; 0x5482 <delayms+0x46>
    5482:	00 00       	nop
    5484:	e3 ef       	ldi	r30, 0xF3	; 243
    5486:	f1 e0       	ldi	r31, 0x01	; 1
    5488:	31 97       	sbiw	r30, 0x01	; 1
    548a:	f1 f7       	brne	.-4      	; 0x5488 <delayms+0x4c>
    548c:	00 c0       	rjmp	.+0      	; 0x548e <delayms+0x52>
    548e:	00 00       	nop
    5490:	e3 ef       	ldi	r30, 0xF3	; 243
    5492:	f1 e0       	ldi	r31, 0x01	; 1
    5494:	31 97       	sbiw	r30, 0x01	; 1
    5496:	f1 f7       	brne	.-4      	; 0x5494 <delayms+0x58>
    5498:	00 c0       	rjmp	.+0      	; 0x549a <delayms+0x5e>
    549a:	00 00       	nop
    549c:	e3 ef       	ldi	r30, 0xF3	; 243
    549e:	f1 e0       	ldi	r31, 0x01	; 1
    54a0:	31 97       	sbiw	r30, 0x01	; 1
    54a2:	f1 f7       	brne	.-4      	; 0x54a0 <delayms+0x64>
    54a4:	00 c0       	rjmp	.+0      	; 0x54a6 <delayms+0x6a>
    54a6:	00 00       	nop
    54a8:	e3 ef       	ldi	r30, 0xF3	; 243
    54aa:	f1 e0       	ldi	r31, 0x01	; 1
    54ac:	31 97       	sbiw	r30, 0x01	; 1
    54ae:	f1 f7       	brne	.-4      	; 0x54ac <delayms+0x70>
    54b0:	00 c0       	rjmp	.+0      	; 0x54b2 <delayms+0x76>
    54b2:	00 00       	nop
    54b4:	e3 ef       	ldi	r30, 0xF3	; 243
    54b6:	f1 e0       	ldi	r31, 0x01	; 1
    54b8:	31 97       	sbiw	r30, 0x01	; 1
    54ba:	f1 f7       	brne	.-4      	; 0x54b8 <delayms+0x7c>
    54bc:	00 c0       	rjmp	.+0      	; 0x54be <delayms+0x82>
    54be:	00 00       	nop
    54c0:	61 50       	subi	r22, 0x01	; 1
    54c2:	71 09       	sbc	r23, r1
    54c4:	81 09       	sbc	r24, r1
    54c6:	91 09       	sbc	r25, r1
    54c8:	b9 cf       	rjmp	.-142    	; 0x543c <delayms>
        _delay_us(100);                           // 700
        _delay_us(100);                           // 800
        _delay_us(100);                           // 900
        _delay_us(100);                           //1000
    }
}
    54ca:	08 95       	ret

000054cc <uart_ubr>:

    cli();
    c = uarts[uart].rx_buf[uarts[uart].rx_tail];
    sei();
    return (c & 0xff);
}
    54cc:	4f 92       	push	r4
    54ce:	5f 92       	push	r5
    54d0:	6f 92       	push	r6
    54d2:	7f 92       	push	r7
    54d4:	8f 92       	push	r8
    54d6:	9f 92       	push	r9
    54d8:	af 92       	push	r10
    54da:	bf 92       	push	r11
    54dc:	cf 92       	push	r12
    54de:	df 92       	push	r13
    54e0:	ef 92       	push	r14
    54e2:	ff 92       	push	r15
    54e4:	cf 93       	push	r28
    54e6:	df 93       	push	r29
    54e8:	5a 01       	movw	r10, r20
    54ea:	e9 01       	movw	r28, r18
    54ec:	0e 94 1c ea 	call	0x1d438	; 0x1d438 <__floatunsisf>
    54f0:	2b 01       	movw	r4, r22
    54f2:	3c 01       	movw	r6, r24
    54f4:	20 e0       	ldi	r18, 0x00	; 0
    54f6:	30 e0       	ldi	r19, 0x00	; 0
    54f8:	40 e0       	ldi	r20, 0x00	; 0
    54fa:	51 e4       	ldi	r21, 0x41	; 65
    54fc:	0e 94 d2 ea 	call	0x1d5a4	; 0x1d5a4 <__mulsf3>
    5500:	9b 01       	movw	r18, r22
    5502:	ac 01       	movw	r20, r24
    5504:	60 e8       	ldi	r22, 0x80	; 128
    5506:	76 e9       	ldi	r23, 0x96	; 150
    5508:	88 e9       	ldi	r24, 0x98	; 152
    550a:	9b e4       	ldi	r25, 0x4B	; 75
    550c:	0e 94 83 e9 	call	0x1d306	; 0x1d306 <__divsf3>
    5510:	20 e0       	ldi	r18, 0x00	; 0
    5512:	30 e0       	ldi	r19, 0x00	; 0
    5514:	40 e8       	ldi	r20, 0x80	; 128
    5516:	5f e3       	ldi	r21, 0x3F	; 63
    5518:	0e 94 1a e9 	call	0x1d234	; 0x1d234 <__subsf3>
    551c:	0e 94 35 eb 	call	0x1d66a	; 0x1d66a <round>
    5520:	0e 94 f0 e9 	call	0x1d3e0	; 0x1d3e0 <__fixunssfsi>
    5524:	6b 01       	movw	r12, r22
    5526:	7c 01       	movw	r14, r24
    5528:	c1 14       	cp	r12, r1
    552a:	80 e1       	ldi	r24, 0x10	; 16
    552c:	d8 06       	cpc	r13, r24
    552e:	e1 04       	cpc	r14, r1
    5530:	f1 04       	cpc	r15, r1
    5532:	58 f4       	brcc	.+22     	; 0x554a <uart_ubr+0x7e>
    5534:	81 e0       	ldi	r24, 0x01	; 1
    5536:	90 e0       	ldi	r25, 0x00	; 0
    5538:	f5 01       	movw	r30, r10
    553a:	91 83       	std	Z+1, r25	; 0x01
    553c:	80 83       	st	Z, r24
    553e:	81 2c       	mov	r8, r1
    5540:	91 2c       	mov	r9, r1
    5542:	a1 2c       	mov	r10, r1
    5544:	21 e4       	ldi	r18, 0x41	; 65
    5546:	b2 2e       	mov	r11, r18
    5548:	31 c0       	rjmp	.+98     	; 0x55ac <uart_ubr+0xe0>
    554a:	f5 01       	movw	r30, r10
    554c:	11 82       	std	Z+1, r1	; 0x01
    554e:	10 82       	st	Z, r1
    5550:	20 e0       	ldi	r18, 0x00	; 0
    5552:	30 e0       	ldi	r19, 0x00	; 0
    5554:	40 e8       	ldi	r20, 0x80	; 128
    5556:	51 e4       	ldi	r21, 0x41	; 65
    5558:	c3 01       	movw	r24, r6
    555a:	b2 01       	movw	r22, r4
    555c:	0e 94 d2 ea 	call	0x1d5a4	; 0x1d5a4 <__mulsf3>
    5560:	9b 01       	movw	r18, r22
    5562:	ac 01       	movw	r20, r24
    5564:	60 e8       	ldi	r22, 0x80	; 128
    5566:	76 e9       	ldi	r23, 0x96	; 150
    5568:	88 e9       	ldi	r24, 0x98	; 152
    556a:	9b e4       	ldi	r25, 0x4B	; 75
    556c:	0e 94 83 e9 	call	0x1d306	; 0x1d306 <__divsf3>
    5570:	20 e0       	ldi	r18, 0x00	; 0
    5572:	30 e0       	ldi	r19, 0x00	; 0
    5574:	40 e8       	ldi	r20, 0x80	; 128
    5576:	5f e3       	ldi	r21, 0x3F	; 63
    5578:	0e 94 1a e9 	call	0x1d234	; 0x1d234 <__subsf3>
    557c:	0e 94 35 eb 	call	0x1d66a	; 0x1d66a <round>
    5580:	0e 94 f0 e9 	call	0x1d3e0	; 0x1d3e0 <__fixunssfsi>
    5584:	6b 01       	movw	r12, r22
    5586:	7c 01       	movw	r14, r24
    5588:	81 2c       	mov	r8, r1
    558a:	91 2c       	mov	r9, r1
    558c:	90 e8       	ldi	r25, 0x80	; 128
    558e:	a9 2e       	mov	r10, r25
    5590:	91 e4       	ldi	r25, 0x41	; 65
    5592:	b9 2e       	mov	r11, r25
    5594:	c1 14       	cp	r12, r1
    5596:	f0 e1       	ldi	r31, 0x10	; 16
    5598:	df 06       	cpc	r13, r31
    559a:	e1 04       	cpc	r14, r1
    559c:	f1 04       	cpc	r15, r1
    559e:	30 f0       	brcs	.+12     	; 0x55ac <uart_ubr+0xe0>
    55a0:	cc 24       	eor	r12, r12
    55a2:	ca 94       	dec	r12
    55a4:	8f e0       	ldi	r24, 0x0F	; 15
    55a6:	d8 2e       	mov	r13, r24
    55a8:	e1 2c       	mov	r14, r1
    55aa:	f1 2c       	mov	r15, r1
    55ac:	c7 01       	movw	r24, r14
    55ae:	b6 01       	movw	r22, r12
    55b0:	6f 5f       	subi	r22, 0xFF	; 255
    55b2:	7f 4f       	sbci	r23, 0xFF	; 255
    55b4:	8f 4f       	sbci	r24, 0xFF	; 255
    55b6:	9f 4f       	sbci	r25, 0xFF	; 255
    55b8:	0e 94 1c ea 	call	0x1d438	; 0x1d438 <__floatunsisf>
    55bc:	a5 01       	movw	r20, r10
    55be:	94 01       	movw	r18, r8
    55c0:	0e 94 d2 ea 	call	0x1d5a4	; 0x1d5a4 <__mulsf3>
    55c4:	9b 01       	movw	r18, r22
    55c6:	ac 01       	movw	r20, r24
    55c8:	60 e8       	ldi	r22, 0x80	; 128
    55ca:	76 e9       	ldi	r23, 0x96	; 150
    55cc:	88 e9       	ldi	r24, 0x98	; 152
    55ce:	9b e4       	ldi	r25, 0x4B	; 75
    55d0:	0e 94 83 e9 	call	0x1d306	; 0x1d306 <__divsf3>
    55d4:	0e 94 f0 e9 	call	0x1d3e0	; 0x1d3e0 <__fixunssfsi>
    55d8:	68 83       	st	Y, r22
    55da:	79 83       	std	Y+1, r23	; 0x01
    55dc:	8a 83       	std	Y+2, r24	; 0x02
    55de:	9b 83       	std	Y+3, r25	; 0x03
    55e0:	c6 01       	movw	r24, r12
    55e2:	df 91       	pop	r29
    55e4:	cf 91       	pop	r28
    55e6:	ff 90       	pop	r15
    55e8:	ef 90       	pop	r14
    55ea:	df 90       	pop	r13
    55ec:	cf 90       	pop	r12
    55ee:	bf 90       	pop	r11
    55f0:	af 90       	pop	r10
    55f2:	9f 90       	pop	r9
    55f4:	8f 90       	pop	r8
    55f6:	7f 90       	pop	r7
    55f8:	6f 90       	pop	r6
    55fa:	5f 90       	pop	r5
    55fc:	4f 90       	pop	r4
    55fe:	08 95       	ret

00005600 <uart_init>:
    5600:	a6 e0       	ldi	r26, 0x06	; 6
    5602:	b0 e0       	ldi	r27, 0x00	; 0
    5604:	e6 e0       	ldi	r30, 0x06	; 6
    5606:	fb e2       	ldi	r31, 0x2B	; 43
    5608:	0c 94 d1 e8 	jmp	0x1d1a2	; 0x1d1a2 <__prologue_saves__+0x20>
    560c:	1e 82       	std	Y+6, r1	; 0x06
    560e:	1d 82       	std	Y+5, r1	; 0x05
    5610:	81 11       	cpse	r24, r1
    5612:	36 c0       	rjmp	.+108    	; 0x5680 <uart_init+0x80>
    5614:	cb 01       	movw	r24, r22
    5616:	ba 01       	movw	r22, r20
    5618:	9e 01       	movw	r18, r28
    561a:	2f 5f       	subi	r18, 0xFF	; 255
    561c:	3f 4f       	sbci	r19, 0xFF	; 255
    561e:	ae 01       	movw	r20, r28
    5620:	4b 5f       	subi	r20, 0xFB	; 251
    5622:	5f 4f       	sbci	r21, 0xFF	; 255
    5624:	53 df       	rcall	.-346    	; 0x54cc <uart_ubr>
    5626:	f8 94       	cli
    5628:	10 92 a8 19 	sts	0x19A8, r1	; 0x8019a8 <uarts+0x4>
    562c:	10 92 a7 19 	sts	0x19A7, r1	; 0x8019a7 <uarts+0x3>
    5630:	10 92 a4 19 	sts	0x19A4, r1	; 0x8019a4 <uarts>
    5634:	10 92 a5 19 	sts	0x19A5, r1	; 0x8019a5 <uarts+0x1>
    5638:	10 92 a6 19 	sts	0x19A6, r1	; 0x8019a6 <uarts+0x2>
    563c:	10 92 a9 19 	sts	0x19A9, r1	; 0x8019a9 <uarts+0x5>
    5640:	78 94       	sei
    5642:	f8 94       	cli
    5644:	58 9a       	sbi	0x0b, 0	; 11
    5646:	59 9a       	sbi	0x0b, 1	; 11
    5648:	50 98       	cbi	0x0a, 0	; 10
    564a:	51 9a       	sbi	0x0a, 1	; 10
    564c:	28 e9       	ldi	r18, 0x98	; 152
    564e:	20 93 c1 00 	sts	0x00C1, r18	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    5652:	2d 81       	ldd	r18, Y+5	; 0x05
    5654:	3e 81       	ldd	r19, Y+6	; 0x06
    5656:	23 2b       	or	r18, r19
    5658:	19 f0       	breq	.+6      	; 0x5660 <uart_init+0x60>
    565a:	22 e0       	ldi	r18, 0x02	; 2
    565c:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5660:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    5664:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    5668:	78 94       	sei
    566a:	65 ef       	ldi	r22, 0xF5	; 245
    566c:	7b e2       	ldi	r23, 0x2B	; 43
    566e:	8a e0       	ldi	r24, 0x0A	; 10
    5670:	9c e2       	ldi	r25, 0x2C	; 44
    5672:	0e 94 e3 7b 	call	0xf7c6	; 0xf7c6 <fdevopen>
    5676:	69 81       	ldd	r22, Y+1	; 0x01
    5678:	7a 81       	ldd	r23, Y+2	; 0x02
    567a:	8b 81       	ldd	r24, Y+3	; 0x03
    567c:	9c 81       	ldd	r25, Y+4	; 0x04
    567e:	03 c0       	rjmp	.+6      	; 0x5686 <uart_init+0x86>
    5680:	60 e0       	ldi	r22, 0x00	; 0
    5682:	70 e0       	ldi	r23, 0x00	; 0
    5684:	cb 01       	movw	r24, r22
    5686:	26 96       	adiw	r28, 0x06	; 6
    5688:	e2 e0       	ldi	r30, 0x02	; 2
    568a:	0c 94 ed e8 	jmp	0x1d1da	; 0x1d1da <__epilogue_restores__+0x20>

0000568e <uart_rx_interrupt>:
    568e:	27 e5       	ldi	r18, 0x57	; 87
    5690:	82 9f       	mul	r24, r18
    5692:	c0 01       	movw	r24, r0
    5694:	11 24       	eor	r1, r1
    5696:	fc 01       	movw	r30, r24
    5698:	ec 55       	subi	r30, 0x5C	; 92
    569a:	f6 4e       	sbci	r31, 0xE6	; 230
    569c:	83 81       	ldd	r24, Z+3	; 0x03
    569e:	94 81       	ldd	r25, Z+4	; 0x04
    56a0:	80 35       	cpi	r24, 0x50	; 80
    56a2:	91 05       	cpc	r25, r1
    56a4:	84 f4       	brge	.+32     	; 0x56c6 <uart_rx_interrupt+0x38>
    56a6:	30 81       	ld	r19, Z
    56a8:	21 e0       	ldi	r18, 0x01	; 1
    56aa:	23 0f       	add	r18, r19
    56ac:	20 83       	st	Z, r18
    56ae:	df 01       	movw	r26, r30
    56b0:	a3 0f       	add	r26, r19
    56b2:	b1 1d       	adc	r27, r1
    56b4:	16 96       	adiw	r26, 0x06	; 6
    56b6:	6c 93       	st	X, r22
    56b8:	01 96       	adiw	r24, 0x01	; 1
    56ba:	94 83       	std	Z+4, r25	; 0x04
    56bc:	83 83       	std	Z+3, r24	; 0x03
    56be:	20 35       	cpi	r18, 0x50	; 80
    56c0:	28 f0       	brcs	.+10     	; 0x56cc <uart_rx_interrupt+0x3e>
    56c2:	10 82       	st	Z, r1
    56c4:	08 95       	ret
    56c6:	85 81       	ldd	r24, Z+5	; 0x05
    56c8:	81 60       	ori	r24, 0x01	; 1
    56ca:	85 83       	std	Z+5, r24	; 0x05
    56cc:	08 95       	ret

000056ce <__vector_20>:
    56ce:	1f 92       	push	r1
    56d0:	0f 92       	push	r0
    56d2:	0f b6       	in	r0, 0x3f	; 63
    56d4:	0f 92       	push	r0
    56d6:	11 24       	eor	r1, r1
    56d8:	0b b6       	in	r0, 0x3b	; 59
    56da:	0f 92       	push	r0
    56dc:	2f 93       	push	r18
    56de:	3f 93       	push	r19
    56e0:	4f 93       	push	r20
    56e2:	5f 93       	push	r21
    56e4:	6f 93       	push	r22
    56e6:	7f 93       	push	r23
    56e8:	8f 93       	push	r24
    56ea:	9f 93       	push	r25
    56ec:	af 93       	push	r26
    56ee:	bf 93       	push	r27
    56f0:	ef 93       	push	r30
    56f2:	ff 93       	push	r31
    56f4:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    56f8:	80 e0       	ldi	r24, 0x00	; 0
    56fa:	c9 df       	rcall	.-110    	; 0x568e <uart_rx_interrupt>
    56fc:	ff 91       	pop	r31
    56fe:	ef 91       	pop	r30
    5700:	bf 91       	pop	r27
    5702:	af 91       	pop	r26
    5704:	9f 91       	pop	r25
    5706:	8f 91       	pop	r24
    5708:	7f 91       	pop	r23
    570a:	6f 91       	pop	r22
    570c:	5f 91       	pop	r21
    570e:	4f 91       	pop	r20
    5710:	3f 91       	pop	r19
    5712:	2f 91       	pop	r18
    5714:	0f 90       	pop	r0
    5716:	0b be       	out	0x3b, r0	; 59
    5718:	0f 90       	pop	r0
    571a:	0f be       	out	0x3f, r0	; 63
    571c:	0f 90       	pop	r0
    571e:	1f 90       	pop	r1
    5720:	18 95       	reti

00005722 <uart_rx_count>:
/// @return  Character count in ring buffer.
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
    5722:	81 11       	cpse	r24, r1
    5724:	07 c0       	rjmp	.+14     	; 0x5734 <uart_rx_count+0x12>
        return(EOF);

    cli();
    5726:	f8 94       	cli

    count = uarts[uart].rx_count;
    5728:	80 91 a7 19 	lds	r24, 0x19A7	; 0x8019a7 <uarts+0x3>
    572c:	90 91 a8 19 	lds	r25, 0x19A8	; 0x8019a8 <uarts+0x4>

    sei();
    5730:	78 94       	sei

    return (count );
    5732:	08 95       	ret
int uart_rx_count(uint8_t uart)
{
    int count;

    if(uart >= UARTS)
        return(EOF);
    5734:	8f ef       	ldi	r24, 0xFF	; 255
    5736:	9f ef       	ldi	r25, 0xFF	; 255
    count = uarts[uart].rx_count;

    sei();

    return (count );
}
    5738:	08 95       	ret

0000573a <uart_get_tail>:
/// @see uart_rx_count().
int uart_get_tail(uint8_t uart)
{
    uint8_t c;

    if (uart >= UARTS)
    573a:	81 11       	cpse	r24, r1
    573c:	21 c0       	rjmp	.+66     	; 0x5780 <uart_get_tail+0x46>
	{
        return(EOF);
	}

	while(uart_rx_count(uart) < 1)
    573e:	80 e0       	ldi	r24, 0x00	; 0
    5740:	f0 df       	rcall	.-32     	; 0x5722 <uart_rx_count>
    5742:	18 16       	cp	r1, r24
    5744:	19 06       	cpc	r1, r25
    5746:	dc f7       	brge	.-10     	; 0x573e <uart_get_tail+0x4>
		;

    cli();
    5748:	f8 94       	cli
    c = uarts[uart].rx_buf[uarts[uart].rx_tail++];
    574a:	e0 91 a5 19 	lds	r30, 0x19A5	; 0x8019a5 <uarts+0x1>
    574e:	91 e0       	ldi	r25, 0x01	; 1
    5750:	9e 0f       	add	r25, r30
    5752:	90 93 a5 19 	sts	0x19A5, r25	; 0x8019a5 <uarts+0x1>
    5756:	f0 e0       	ldi	r31, 0x00	; 0
    5758:	ec 55       	subi	r30, 0x5C	; 92
    575a:	f6 4e       	sbci	r31, 0xE6	; 230
    575c:	86 81       	ldd	r24, Z+6	; 0x06
    if (uarts[uart].rx_tail >= RX_BUF_SIZE)
    575e:	90 35       	cpi	r25, 0x50	; 80
    5760:	10 f0       	brcs	.+4      	; 0x5766 <uart_get_tail+0x2c>
        uarts[uart].rx_tail = 0;
    5762:	10 92 a5 19 	sts	0x19A5, r1	; 0x8019a5 <uarts+0x1>
    uarts[uart].rx_count--;
    5766:	20 91 a7 19 	lds	r18, 0x19A7	; 0x8019a7 <uarts+0x3>
    576a:	30 91 a8 19 	lds	r19, 0x19A8	; 0x8019a8 <uarts+0x4>
    576e:	21 50       	subi	r18, 0x01	; 1
    5770:	31 09       	sbc	r19, r1
    5772:	30 93 a8 19 	sts	0x19A8, r19	; 0x8019a8 <uarts+0x4>
    5776:	20 93 a7 19 	sts	0x19A7, r18	; 0x8019a7 <uarts+0x3>
    sei();
    577a:	78 94       	sei

    return (c & 0xff);
    577c:	90 e0       	ldi	r25, 0x00	; 0
    577e:	08 95       	ret
{
    uint8_t c;

    if (uart >= UARTS)
	{
        return(EOF);
    5780:	8f ef       	ldi	r24, 0xFF	; 255
    5782:	9f ef       	ldi	r25, 0xFF	; 255
        uarts[uart].rx_tail = 0;
    uarts[uart].rx_count--;
    sei();

    return (c & 0xff);
}
    5784:	08 95       	ret

00005786 <uart_rx_byte>:
///
/// @param[in] uart: uart number.
///
/// @return  Character.
int uart_rx_byte(uint8_t uart)
{
    5786:	d9 df       	rcall	.-78     	; 0x573a <uart_get_tail>
    5788:	99 27       	eor	r25, r25
    578a:	08 95       	ret

0000578c <uart_tx_byte>:
    578c:	61 11       	cpse	r22, r1
    578e:	09 c0       	rjmp	.+18     	; 0x57a2 <uart_tx_byte+0x16>
    5790:	20 91 c0 00 	lds	r18, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    5794:	25 ff       	sbrs	r18, 5
    5796:	fc cf       	rjmp	.-8      	; 0x5790 <uart_tx_byte+0x4>
    5798:	28 2f       	mov	r18, r24
    579a:	2f 77       	andi	r18, 0x7F	; 127
    579c:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    57a0:	08 95       	ret
    57a2:	61 30       	cpi	r22, 0x01	; 1
    57a4:	49 f4       	brne	.+18     	; 0x57b8 <uart_tx_byte+0x2c>
    57a6:	20 91 c8 00 	lds	r18, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    57aa:	25 ff       	sbrs	r18, 5
    57ac:	fc cf       	rjmp	.-8      	; 0x57a6 <uart_tx_byte+0x1a>
    57ae:	28 2f       	mov	r18, r24
    57b0:	2f 77       	andi	r18, 0x7F	; 127
    57b2:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    57b6:	08 95       	ret
    57b8:	8f ef       	ldi	r24, 0xFF	; 255
    57ba:	9f ef       	ldi	r25, 0xFF	; 255
    57bc:	08 95       	ret

000057be <uart_getchar>:
    57be:	cf 93       	push	r28
    57c0:	81 11       	cpse	r24, r1
    57c2:	0f c0       	rjmp	.+30     	; 0x57e2 <uart_getchar+0x24>
    57c4:	e0 df       	rcall	.-64     	; 0x5786 <uart_rx_byte>
    57c6:	c8 2f       	mov	r28, r24
    57c8:	60 e0       	ldi	r22, 0x00	; 0
    57ca:	90 e0       	ldi	r25, 0x00	; 0
    57cc:	df df       	rcall	.-66     	; 0x578c <uart_tx_byte>
    57ce:	cd 30       	cpi	r28, 0x0D	; 13
    57d0:	29 f4       	brne	.+10     	; 0x57dc <uart_getchar+0x1e>
    57d2:	60 e0       	ldi	r22, 0x00	; 0
    57d4:	8a e0       	ldi	r24, 0x0A	; 10
    57d6:	90 e0       	ldi	r25, 0x00	; 0
    57d8:	d9 df       	rcall	.-78     	; 0x578c <uart_tx_byte>
    57da:	ca e0       	ldi	r28, 0x0A	; 10
    57dc:	8c 2f       	mov	r24, r28
    57de:	90 e0       	ldi	r25, 0x00	; 0
    57e0:	02 c0       	rjmp	.+4      	; 0x57e6 <uart_getchar+0x28>
    57e2:	8f ef       	ldi	r24, 0xFF	; 255
    57e4:	9f ef       	ldi	r25, 0xFF	; 255
    57e6:	cf 91       	pop	r28
    57e8:	08 95       	ret

000057ea <uart0_getchar>:
    57ea:	80 e0       	ldi	r24, 0x00	; 0
    57ec:	e8 cf       	rjmp	.-48     	; 0x57be <uart_getchar>
    57ee:	08 95       	ret

000057f0 <uart_putchar>:
    57f0:	1f 93       	push	r17
    57f2:	cf 93       	push	r28
    57f4:	df 93       	push	r29
    57f6:	ec 01       	movw	r28, r24
    57f8:	16 2f       	mov	r17, r22
    57fa:	c8 df       	rcall	.-112    	; 0x578c <uart_tx_byte>
    57fc:	ca 30       	cpi	r28, 0x0A	; 10
    57fe:	d1 05       	cpc	r29, r1
    5800:	21 f4       	brne	.+8      	; 0x580a <uart_putchar+0x1a>
    5802:	61 2f       	mov	r22, r17
    5804:	8d e0       	ldi	r24, 0x0D	; 13
    5806:	90 e0       	ldi	r25, 0x00	; 0
    5808:	c1 df       	rcall	.-126    	; 0x578c <uart_tx_byte>
    580a:	ce 01       	movw	r24, r28
    580c:	df 91       	pop	r29
    580e:	cf 91       	pop	r28
    5810:	1f 91       	pop	r17
    5812:	08 95       	ret

00005814 <uart0_putchar>:
    5814:	cf 93       	push	r28
    5816:	df 93       	push	r29
    5818:	ec 01       	movw	r28, r24
    581a:	60 e0       	ldi	r22, 0x00	; 0
    581c:	70 e0       	ldi	r23, 0x00	; 0
    581e:	e8 df       	rcall	.-48     	; 0x57f0 <uart_putchar>
    5820:	ce 01       	movw	r24, r28
    5822:	df 91       	pop	r29
    5824:	cf 91       	pop	r28
    5826:	08 95       	ret

00005828 <uart_keyhit>:
    5828:	7c cf       	rjmp	.-264    	; 0x5722 <uart_rx_count>
    582a:	08 95       	ret

0000582c <SPI0_Speed>:
/// @brief  Return saved SPI mode as set by SPI0_Mode().
/// @return  saved mode.
int SPI0_Get_Mode( void )
{
    return(SPI0_Mode_value);
}
    582c:	cf 92       	push	r12
    582e:	df 92       	push	r13
    5830:	ef 92       	push	r14
    5832:	ff 92       	push	r15
    5834:	6b 01       	movw	r12, r22
    5836:	7c 01       	movw	r14, r24
    5838:	80 91 10 17 	lds	r24, 0x1710	; 0x801710 <SPI0_Speed_value>
    583c:	90 91 11 17 	lds	r25, 0x1711	; 0x801711 <SPI0_Speed_value+0x1>
    5840:	a0 91 12 17 	lds	r26, 0x1712	; 0x801712 <SPI0_Speed_value+0x2>
    5844:	b0 91 13 17 	lds	r27, 0x1713	; 0x801713 <SPI0_Speed_value+0x3>
    5848:	8c 15       	cp	r24, r12
    584a:	9d 05       	cpc	r25, r13
    584c:	ae 05       	cpc	r26, r14
    584e:	bf 05       	cpc	r27, r15
    5850:	09 f4       	brne	.+2      	; 0x5854 <SPI0_Speed+0x28>
    5852:	4e c0       	rjmp	.+156    	; 0x58f0 <SPI0_Speed+0xc4>
    5854:	60 e0       	ldi	r22, 0x00	; 0
    5856:	7d e2       	ldi	r23, 0x2D	; 45
    5858:	81 e3       	ldi	r24, 0x31	; 49
    585a:	91 e0       	ldi	r25, 0x01	; 1
    585c:	a7 01       	movw	r20, r14
    585e:	96 01       	movw	r18, r12
    5860:	0e 94 54 e8 	call	0x1d0a8	; 0x1d0a8 <__udivmodsi4>
    5864:	20 38       	cpi	r18, 0x80	; 128
    5866:	31 05       	cpc	r19, r1
    5868:	41 05       	cpc	r20, r1
    586a:	51 05       	cpc	r21, r1
    586c:	28 f4       	brcc	.+10     	; 0x5878 <SPI0_Speed+0x4c>
    586e:	20 34       	cpi	r18, 0x40	; 64
    5870:	31 05       	cpc	r19, r1
    5872:	41 05       	cpc	r20, r1
    5874:	51 05       	cpc	r21, r1
    5876:	30 f0       	brcs	.+12     	; 0x5884 <SPI0_Speed+0x58>
    5878:	8d b5       	in	r24, 0x2d	; 45
    587a:	8e 7f       	andi	r24, 0xFE	; 254
    587c:	8d bd       	out	0x2d, r24	; 45
    587e:	8c b5       	in	r24, 0x2c	; 44
    5880:	82 60       	ori	r24, 0x02	; 2
    5882:	1b c0       	rjmp	.+54     	; 0x58ba <SPI0_Speed+0x8e>
    5884:	8d b5       	in	r24, 0x2d	; 45
    5886:	20 32       	cpi	r18, 0x20	; 32
    5888:	31 05       	cpc	r19, r1
    588a:	41 05       	cpc	r20, r1
    588c:	51 05       	cpc	r21, r1
    588e:	28 f0       	brcs	.+10     	; 0x589a <SPI0_Speed+0x6e>
    5890:	81 60       	ori	r24, 0x01	; 1
    5892:	8d bd       	out	0x2d, r24	; 45
    5894:	8c b5       	in	r24, 0x2c	; 44
    5896:	82 60       	ori	r24, 0x02	; 2
    5898:	1f c0       	rjmp	.+62     	; 0x58d8 <SPI0_Speed+0xac>
    589a:	20 31       	cpi	r18, 0x10	; 16
    589c:	31 05       	cpc	r19, r1
    589e:	41 05       	cpc	r20, r1
    58a0:	51 05       	cpc	r21, r1
    58a2:	10 f0       	brcs	.+4      	; 0x58a8 <SPI0_Speed+0x7c>
    58a4:	8e 7f       	andi	r24, 0xFE	; 254
    58a6:	06 c0       	rjmp	.+12     	; 0x58b4 <SPI0_Speed+0x88>
    58a8:	28 30       	cpi	r18, 0x08	; 8
    58aa:	31 05       	cpc	r19, r1
    58ac:	41 05       	cpc	r20, r1
    58ae:	51 05       	cpc	r21, r1
    58b0:	40 f0       	brcs	.+16     	; 0x58c2 <SPI0_Speed+0x96>
    58b2:	81 60       	ori	r24, 0x01	; 1
    58b4:	8d bd       	out	0x2d, r24	; 45
    58b6:	8c b5       	in	r24, 0x2c	; 44
    58b8:	8d 7f       	andi	r24, 0xFD	; 253
    58ba:	8c bd       	out	0x2c, r24	; 44
    58bc:	8c b5       	in	r24, 0x2c	; 44
    58be:	81 60       	ori	r24, 0x01	; 1
    58c0:	0e c0       	rjmp	.+28     	; 0x58de <SPI0_Speed+0xb2>
    58c2:	24 30       	cpi	r18, 0x04	; 4
    58c4:	31 05       	cpc	r19, r1
    58c6:	41 05       	cpc	r20, r1
    58c8:	51 05       	cpc	r21, r1
    58ca:	10 f0       	brcs	.+4      	; 0x58d0 <SPI0_Speed+0xa4>
    58cc:	8e 7f       	andi	r24, 0xFE	; 254
    58ce:	01 c0       	rjmp	.+2      	; 0x58d2 <SPI0_Speed+0xa6>
    58d0:	81 60       	ori	r24, 0x01	; 1
    58d2:	8d bd       	out	0x2d, r24	; 45
    58d4:	8c b5       	in	r24, 0x2c	; 44
    58d6:	8d 7f       	andi	r24, 0xFD	; 253
    58d8:	8c bd       	out	0x2c, r24	; 44
    58da:	8c b5       	in	r24, 0x2c	; 44
    58dc:	8e 7f       	andi	r24, 0xFE	; 254
    58de:	8c bd       	out	0x2c, r24	; 44
    58e0:	c0 92 10 17 	sts	0x1710, r12	; 0x801710 <SPI0_Speed_value>
    58e4:	d0 92 11 17 	sts	0x1711, r13	; 0x801711 <SPI0_Speed_value+0x1>
    58e8:	e0 92 12 17 	sts	0x1712, r14	; 0x801712 <SPI0_Speed_value+0x2>
    58ec:	f0 92 13 17 	sts	0x1713, r15	; 0x801713 <SPI0_Speed_value+0x3>
    58f0:	ff 90       	pop	r15
    58f2:	ef 90       	pop	r14
    58f4:	df 90       	pop	r13
    58f6:	cf 90       	pop	r12
    58f8:	08 95       	ret

000058fa <SPI0_Mode>:
    58fa:	cf 93       	push	r28
    58fc:	df 93       	push	r29
    58fe:	ec 01       	movw	r28, r24
    5900:	81 30       	cpi	r24, 0x01	; 1
    5902:	91 05       	cpc	r25, r1
    5904:	71 f0       	breq	.+28     	; 0x5922 <SPI0_Mode+0x28>
    5906:	2c f4       	brge	.+10     	; 0x5912 <SPI0_Mode+0x18>
    5908:	89 2b       	or	r24, r25
    590a:	c1 f4       	brne	.+48     	; 0x593c <SPI0_Mode+0x42>
    590c:	8c b5       	in	r24, 0x2c	; 44
    590e:	87 7f       	andi	r24, 0xF7	; 247
    5910:	11 c0       	rjmp	.+34     	; 0x5934 <SPI0_Mode+0x3a>
    5912:	82 30       	cpi	r24, 0x02	; 2
    5914:	91 05       	cpc	r25, r1
    5916:	61 f0       	breq	.+24     	; 0x5930 <SPI0_Mode+0x36>
    5918:	03 97       	sbiw	r24, 0x03	; 3
    591a:	81 f4       	brne	.+32     	; 0x593c <SPI0_Mode+0x42>
    591c:	8c b5       	in	r24, 0x2c	; 44
    591e:	88 60       	ori	r24, 0x08	; 8
    5920:	02 c0       	rjmp	.+4      	; 0x5926 <SPI0_Mode+0x2c>
    5922:	8c b5       	in	r24, 0x2c	; 44
    5924:	87 7f       	andi	r24, 0xF7	; 247
    5926:	8c bd       	out	0x2c, r24	; 44
    5928:	8c b5       	in	r24, 0x2c	; 44
    592a:	84 60       	ori	r24, 0x04	; 4
    592c:	8c bd       	out	0x2c, r24	; 44
    592e:	14 c0       	rjmp	.+40     	; 0x5958 <SPI0_Mode+0x5e>
    5930:	8c b5       	in	r24, 0x2c	; 44
    5932:	88 60       	ori	r24, 0x08	; 8
    5934:	8c bd       	out	0x2c, r24	; 44
    5936:	8c b5       	in	r24, 0x2c	; 44
    5938:	8b 7f       	andi	r24, 0xFB	; 251
    593a:	f8 cf       	rjmp	.-16     	; 0x592c <SPI0_Mode+0x32>
    593c:	df 93       	push	r29
    593e:	cf 93       	push	r28
    5940:	84 e2       	ldi	r24, 0x24	; 36
    5942:	94 e0       	ldi	r25, 0x04	; 4
    5944:	1f 92       	push	r1
    5946:	9f 93       	push	r25
    5948:	8f 93       	push	r24
    594a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    594e:	0f 90       	pop	r0
    5950:	0f 90       	pop	r0
    5952:	0f 90       	pop	r0
    5954:	0f 90       	pop	r0
    5956:	0f 90       	pop	r0
    5958:	d0 93 0f 17 	sts	0x170F, r29	; 0x80170f <__data_end+0x1>
    595c:	c0 93 0e 17 	sts	0x170E, r28	; 0x80170e <__data_end>
    5960:	df 91       	pop	r29
    5962:	cf 91       	pop	r28
    5964:	08 95       	ret

00005966 <SPI0_TXRX_Byte>:
/// @param[in] Data: Data to send.
///
/// @return  Data received.
uint8_t SPI0_TXRX_Byte(uint8_t Data)
{
    SPDR = Data;                                  // Transmit
    5966:	8e bd       	out	0x2e, r24	; 46

    while( !BIT_TST(SPSR,SPIF) )                  // Wait for send
    5968:	0d b4       	in	r0, 0x2d	; 45
    596a:	07 fe       	sbrs	r0, 7
    596c:	fd cf       	rjmp	.-6      	; 0x5968 <SPI0_TXRX_Byte+0x2>
        ;

    return (SPDR);                                // Received Data
    596e:	8e b5       	in	r24, 0x2e	; 46
}
    5970:	08 95       	ret

00005972 <SPI0_Init>:

///@brief Initialize SPI0 device.
///
/// - Set default speed, IO pins and mode.
void SPI0_Init(uint32_t speed)
{
    5972:	cf 92       	push	r12
    5974:	df 92       	push	r13
    5976:	ef 92       	push	r14
    5978:	ff 92       	push	r15
    597a:	6b 01       	movw	r12, r22
    597c:	7c 01       	movw	r14, r24

    GPIO_PIN_HI(SS);                                    // SS Output HI
    597e:	2c 9a       	sbi	0x05, 4	; 5
    5980:	24 9a       	sbi	0x04, 4	; 4

    delayus(10);
    5982:	6a e0       	ldi	r22, 0x0A	; 10
    5984:	70 e0       	ldi	r23, 0x00	; 0
    5986:	80 e0       	ldi	r24, 0x00	; 0
    5988:	90 e0       	ldi	r25, 0x00	; 0
    598a:	2b dd       	rcall	.-1450   	; 0x53e2 <delayus>

    GPIO_PIN_HI(SCK);                                   // SCK Output
    598c:	2f 9a       	sbi	0x05, 7	; 5
    598e:	27 9a       	sbi	0x04, 7	; 4
    GPIO_PIN_HI(MOSI);                                  // MOSI Output
    5990:	2d 9a       	sbi	0x05, 5	; 5
    5992:	25 9a       	sbi	0x04, 5	; 4
    GPIO_PIN_FLOAT(MISO);                               // MISO Input, no pull-up
    5994:	26 98       	cbi	0x04, 6	; 4

    BIT_SET(SPCR, SPE);                           // Enable SPI
    5996:	8c b5       	in	r24, 0x2c	; 44
    5998:	80 64       	ori	r24, 0x40	; 64
    599a:	8c bd       	out	0x2c, r24	; 44
    BIT_SET(SPCR, MSTR);                          // Master Mode
    599c:	8c b5       	in	r24, 0x2c	; 44
    599e:	80 61       	ori	r24, 0x10	; 16
    59a0:	8c bd       	out	0x2c, r24	; 44

    SPI0_Mode(0);
    59a2:	80 e0       	ldi	r24, 0x00	; 0
    59a4:	90 e0       	ldi	r25, 0x00	; 0
    SPI0_Speed(speed);
    59a6:	a9 df       	rcall	.-174    	; 0x58fa <SPI0_Mode>
    59a8:	c7 01       	movw	r24, r14
    SPI0_TXRX_Byte(0xff);
    59aa:	b6 01       	movw	r22, r12
    59ac:	3f df       	rcall	.-386    	; 0x582c <SPI0_Speed>
    59ae:	8f ef       	ldi	r24, 0xFF	; 255
	SPI0_Init_state = 1;
}
    59b0:	da df       	rcall	.-76     	; 0x5966 <SPI0_TXRX_Byte>
    59b2:	ff 90       	pop	r15
    59b4:	ef 90       	pop	r14
    59b6:	df 90       	pop	r13
    59b8:	cf 90       	pop	r12
    59ba:	08 95       	ret

000059bc <SPI0_TX>:
/// @brief HSPI write using FIFO
/// @param[in] *data: transmit buffer
/// @param[in] count: number of bytes to write
/// @return  void
void SPI0_TX(uint8_t *data, int count)
{
    59bc:	0f 93       	push	r16
    59be:	1f 93       	push	r17
    59c0:	cf 93       	push	r28
    59c2:	df 93       	push	r29
    59c4:	8c 01       	movw	r16, r24
    59c6:	eb 01       	movw	r28, r22

    while(count > 0)
    59c8:	1c 16       	cp	r1, r28
    59ca:	1d 06       	cpc	r1, r29
    59cc:	34 f4       	brge	.+12     	; 0x59da <SPI0_TX+0x1e>
    {
		SPI0_TXRX_Byte(*data);
    59ce:	f8 01       	movw	r30, r16
    59d0:	81 91       	ld	r24, Z+
    59d2:	8f 01       	movw	r16, r30
    59d4:	c8 df       	rcall	.-112    	; 0x5966 <SPI0_TXRX_Byte>
		++data;
		--count;
    59d6:	21 97       	sbiw	r28, 0x01	; 1
    59d8:	f7 cf       	rjmp	.-18     	; 0x59c8 <SPI0_TX+0xc>
	}
}
    59da:	df 91       	pop	r29
    59dc:	cf 91       	pop	r28
    59de:	1f 91       	pop	r17
    59e0:	0f 91       	pop	r16
    59e2:	08 95       	ret

000059e4 <SPI0_TXRX>:
/// @param[in] *data: transmit / receive buffer
/// @param[in] count: number of bytes to write / read
/// @return  void

void SPI0_TXRX(uint8_t *data, int count)
{
    59e4:	0f 93       	push	r16
    59e6:	1f 93       	push	r17
    59e8:	cf 93       	push	r28
    59ea:	df 93       	push	r29
    59ec:	8c 01       	movw	r16, r24
    59ee:	eb 01       	movw	r28, r22

    while(count > 0)
    59f0:	1c 16       	cp	r1, r28
    59f2:	1d 06       	cpc	r1, r29
    59f4:	44 f4       	brge	.+16     	; 0x5a06 <SPI0_TXRX+0x22>
    {
		*data = SPI0_TXRX_Byte(*data);
    59f6:	f8 01       	movw	r30, r16
    59f8:	80 81       	ld	r24, Z
    59fa:	b5 df       	rcall	.-150    	; 0x5966 <SPI0_TXRX_Byte>
    59fc:	f8 01       	movw	r30, r16
    59fe:	81 93       	st	Z+, r24
    5a00:	8f 01       	movw	r16, r30
		++data;
		--count;
    5a02:	21 97       	sbiw	r28, 0x01	; 1
    5a04:	f5 cf       	rjmp	.-22     	; 0x59f0 <SPI0_TXRX+0xc>
	}
}
    5a06:	df 91       	pop	r29
    5a08:	cf 91       	pop	r28
    5a0a:	1f 91       	pop	r17
    5a0c:	0f 91       	pop	r16
    5a0e:	08 95       	ret

00005a10 <SPI0_RX>:
/// @brief HSPI read using FIFO
/// @param[in] *data: receive buffer
/// @param[in] count: number of bytes to read
/// @return  void
void SPI0_RX(uint8_t *data, int count)
{
    5a10:	0f 93       	push	r16
    5a12:	1f 93       	push	r17
    5a14:	cf 93       	push	r28
    5a16:	df 93       	push	r29
    5a18:	8c 01       	movw	r16, r24
    5a1a:	eb 01       	movw	r28, r22

    while(count > 0)
    5a1c:	1c 16       	cp	r1, r28
    5a1e:	1d 06       	cpc	r1, r29
    5a20:	3c f4       	brge	.+14     	; 0x5a30 <SPI0_RX+0x20>
    {
		*data = SPI0_TXRX_Byte(0xff);
    5a22:	8f ef       	ldi	r24, 0xFF	; 255
    5a24:	a0 df       	rcall	.-192    	; 0x5966 <SPI0_TXRX_Byte>
    5a26:	f8 01       	movw	r30, r16
    5a28:	81 93       	st	Z+, r24
    5a2a:	8f 01       	movw	r16, r30
		++data;
		--count;
    5a2c:	21 97       	sbiw	r28, 0x01	; 1
    5a2e:	f6 cf       	rjmp	.-20     	; 0x5a1c <SPI0_RX+0xc>
	}
}
    5a30:	df 91       	pop	r29
    5a32:	cf 91       	pop	r28
    5a34:	1f 91       	pop	r17
    5a36:	0f 91       	pop	r16
    5a38:	08 95       	ret

00005a3a <TWI_Init>:
///
///@return void.
void TWI_Init(const uint8_t Prescale, const uint8_t BitLength)
{

    GPIO_PIN_LATCH_HI(SCL);                   // Pull Up on
    5a3a:	40 9a       	sbi	0x08, 0	; 8
    GPIO_PIN_LATCH_HI(SDA);                   // Pull Up on
    5a3c:	41 9a       	sbi	0x08, 1	; 8

    BIT_SET(TWCR,TWEN);
    5a3e:	ec eb       	ldi	r30, 0xBC	; 188
    5a40:	f0 e0       	ldi	r31, 0x00	; 0
    5a42:	90 81       	ld	r25, Z
    5a44:	94 60       	ori	r25, 0x04	; 4
    5a46:	90 83       	st	Z, r25

    TWSR  = Prescale;
    5a48:	80 93 b9 00 	sts	0x00B9, r24	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    TWBR  = BitLength;
    5a4c:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    5a50:	08 95       	ret

00005a52 <TWI_StartTransmission>:
    for (;;)
    {
        bool     BusCaptured = false;
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5a52:	94 ea       	ldi	r25, 0xA4	; 164
    5a54:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5a58:	24 e6       	ldi	r18, 0x64	; 100
    5a5a:	62 9f       	mul	r22, r18
    5a5c:	b0 01       	movw	r22, r0
    5a5e:	11 24       	eor	r1, r1
    5a60:	61 50       	subi	r22, 0x01	; 1
    5a62:	71 09       	sbc	r23, r1

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5a64:	9b 01       	movw	r18, r22
///@return TWI error value on fail.
uint8_t TWI_StartTransmission(const uint8_t SlaveAddress, const uint8_t TimeoutMS)
{
    for (;;)
    {
        bool     BusCaptured = false;
    5a66:	40 e0       	ldi	r20, 0x00	; 0
    5a68:	50 e0       	ldi	r21, 0x00	; 0
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5a6a:	e4 ea       	ldi	r30, 0xA4	; 164
        uint16_t TimeoutRemaining;

        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining-- && !(BusCaptured))
    5a6c:	2f 3f       	cpi	r18, 0xFF	; 255
    5a6e:	9f ef       	ldi	r25, 0xFF	; 255
    5a70:	39 07       	cpc	r19, r25
    5a72:	41 f1       	breq	.+80     	; 0x5ac4 <TWI_StartTransmission+0x72>
    5a74:	41 15       	cp	r20, r1
    5a76:	51 05       	cpc	r21, r1
    5a78:	f1 f4       	brne	.+60     	; 0x5ab6 <TWI_StartTransmission+0x64>
        {
            if (TWCR & (1 << TWINT))
    5a7a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5a7e:	97 ff       	sbrs	r25, 7
    5a80:	13 c0       	rjmp	.+38     	; 0x5aa8 <TWI_StartTransmission+0x56>
            {
                switch (TWSR & TW_STATUS_MASK)
    5a82:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5a86:	98 7f       	andi	r25, 0xF8	; 248
    5a88:	90 31       	cpi	r25, 0x10	; 16
    5a8a:	61 f0       	breq	.+24     	; 0x5aa4 <TWI_StartTransmission+0x52>
    5a8c:	98 33       	cpi	r25, 0x38	; 56
    5a8e:	39 f0       	breq	.+14     	; 0x5a9e <TWI_StartTransmission+0x4c>
    5a90:	98 30       	cpi	r25, 0x08	; 8
    5a92:	41 f0       	breq	.+16     	; 0x5aa4 <TWI_StartTransmission+0x52>
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
                        continue;
                    default:
                        TWCR = (1 << TWEN);
    5a94:	84 e0       	ldi	r24, 0x04	; 4
    5a96:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        return TWI_ERROR_BusFault;
    5a9a:	81 e0       	ldi	r24, 0x01	; 1
    5a9c:	08 95       	ret
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
                        break;
                    case TW_MT_ARB_LOST:
                        TWCR = ((1 << TWINT) | (1 << TWSTA) | (1 << TWEN));
    5a9e:	e0 93 bc 00 	sts	0x00BC, r30	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                        continue;
    5aa2:	06 c0       	rjmp	.+12     	; 0x5ab0 <TWI_StartTransmission+0x5e>
            {
                switch (TWSR & TW_STATUS_MASK)
                {
                    case TW_START:
                    case TW_REP_START:
                        BusCaptured = true;
    5aa4:	41 e0       	ldi	r20, 0x01	; 1
    5aa6:	50 e0       	ldi	r21, 0x00	; 0
    5aa8:	92 e4       	ldi	r25, 0x42	; 66
    5aaa:	9a 95       	dec	r25
    5aac:	f1 f7       	brne	.-4      	; 0x5aaa <TWI_StartTransmission+0x58>
    5aae:	00 c0       	rjmp	.+0      	; 0x5ab0 <TWI_StartTransmission+0x5e>
    5ab0:	21 50       	subi	r18, 0x01	; 1
    5ab2:	31 09       	sbc	r19, r1
    5ab4:	db cf       	rjmp	.-74     	; 0x5a6c <TWI_StartTransmission+0x1a>
            }

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5ab6:	23 2b       	or	r18, r19
    5ab8:	29 f4       	brne	.+10     	; 0x5ac4 <TWI_StartTransmission+0x72>
        {
            TWCR = (1 << TWEN);
    5aba:	84 e0       	ldi	r24, 0x04	; 4
    5abc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            return TWI_ERROR_BusCaptureTimeout;
    5ac0:	82 e0       	ldi	r24, 0x02	; 2
    5ac2:	08 95       	ret
        }

        TWDR = SlaveAddress;
    5ac4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
        TWCR = ((1 << TWINT) | (1 << TWEN));
    5ac8:	84 e8       	ldi	r24, 0x84	; 132
    5aca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TimeoutRemaining = (TimeoutMS * 100);
        while (TimeoutRemaining--)
    5ace:	6f 3f       	cpi	r22, 0xFF	; 255
    5ad0:	8f ef       	ldi	r24, 0xFF	; 255
    5ad2:	78 07       	cpc	r23, r24
    5ad4:	71 f0       	breq	.+28     	; 0x5af2 <TWI_StartTransmission+0xa0>
        {
            if (TWCR & (1 << TWINT))
    5ad6:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5ada:	cb 01       	movw	r24, r22
    5adc:	01 97       	sbiw	r24, 0x01	; 1
    5ade:	27 fd       	sbrc	r18, 7
    5ae0:	06 c0       	rjmp	.+12     	; 0x5aee <TWI_StartTransmission+0x9c>
    5ae2:	22 e4       	ldi	r18, 0x42	; 66
    5ae4:	2a 95       	dec	r18
    5ae6:	f1 f7       	brne	.-4      	; 0x5ae4 <TWI_StartTransmission+0x92>
    5ae8:	00 c0       	rjmp	.+0      	; 0x5aea <TWI_StartTransmission+0x98>
    5aea:	bc 01       	movw	r22, r24
    5aec:	f0 cf       	rjmp	.-32     	; 0x5ace <TWI_StartTransmission+0x7c>
                break;

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
    5aee:	67 2b       	or	r22, r23
    5af0:	61 f0       	breq	.+24     	; 0x5b0a <TWI_StartTransmission+0xb8>
            return TWI_ERROR_SlaveResponseTimeout;

        switch (TWSR & TW_STATUS_MASK)
    5af2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5af6:	88 7f       	andi	r24, 0xF8	; 248
    5af8:	88 31       	cpi	r24, 0x18	; 24
    5afa:	49 f0       	breq	.+18     	; 0x5b0e <TWI_StartTransmission+0xbc>
    5afc:	80 34       	cpi	r24, 0x40	; 64
    5afe:	39 f0       	breq	.+14     	; 0x5b0e <TWI_StartTransmission+0xbc>
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5b00:	84 e9       	ldi	r24, 0x94	; 148
    5b02:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
                return TWI_ERROR_SlaveNotReady;
    5b06:	84 e0       	ldi	r24, 0x04	; 4
    5b08:	08 95       	ret

            _delay_us(10);
        }

        if (!(TimeoutRemaining))
            return TWI_ERROR_SlaveResponseTimeout;
    5b0a:	83 e0       	ldi	r24, 0x03	; 3
    5b0c:	08 95       	ret

        switch (TWSR & TW_STATUS_MASK)
        {
            case TW_MT_SLA_ACK:
            case TW_MR_SLA_ACK:
                return TWI_ERROR_NoError;
    5b0e:	80 e0       	ldi	r24, 0x00	; 0
            default:
                TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
                return TWI_ERROR_SlaveNotReady;
        }
    }
}
    5b10:	08 95       	ret

00005b12 <TWI_SendByte>:
///
///@return 1 if Acknowledge.
///@return 0 on fail.
bool TWI_SendByte(const uint8_t Byte)
{
    TWDR = Byte;
    5b12:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    TWCR = ((1 << TWINT) | (1 << TWEN));
    5b16:	84 e8       	ldi	r24, 0x84	; 132
    5b18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!(TWCR & (1 << TWINT)));
    5b1c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b20:	87 ff       	sbrs	r24, 7
    5b22:	fc cf       	rjmp	.-8      	; 0x5b1c <TWI_SendByte+0xa>

    return ((TWSR & TW_STATUS_MASK) == TW_MT_DATA_ACK);
    5b24:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b28:	98 7f       	andi	r25, 0xF8	; 248
    5b2a:	21 e0       	ldi	r18, 0x01	; 1
    5b2c:	30 e0       	ldi	r19, 0x00	; 0
    5b2e:	98 32       	cpi	r25, 0x28	; 40
    5b30:	11 f0       	breq	.+4      	; 0x5b36 <TWI_SendByte+0x24>
    5b32:	20 e0       	ldi	r18, 0x00	; 0
    5b34:	30 e0       	ldi	r19, 0x00	; 0
}
    5b36:	c9 01       	movw	r24, r18
    5b38:	08 95       	ret

00005b3a <TWI_ReceiveByte>:


bool TWI_ReceiveByte(uint8_t* const Byte,
const bool LastByte)
{
    5b3a:	fc 01       	movw	r30, r24
    uint8_t TWCRMask;

    if (LastByte)
    5b3c:	61 15       	cp	r22, r1
    5b3e:	71 05       	cpc	r23, r1
    5b40:	11 f4       	brne	.+4      	; 0x5b46 <TWI_ReceiveByte+0xc>
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));
    5b42:	94 ec       	ldi	r25, 0xC4	; 196
    5b44:	01 c0       	rjmp	.+2      	; 0x5b48 <TWI_ReceiveByte+0xe>
const bool LastByte)
{
    uint8_t TWCRMask;

    if (LastByte)
        TWCRMask = ((1 << TWINT) | (1 << TWEN));
    5b46:	94 e8       	ldi	r25, 0x84	; 132
    else
        TWCRMask = ((1 << TWINT) | (1 << TWEN) | (1 << TWEA));

    TWCR = TWCRMask;
    5b48:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    while (!BIT_TST(TWCR, TWINT))
    5b4c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5b50:	87 ff       	sbrs	r24, 7
    5b52:	fc cf       	rjmp	.-8      	; 0x5b4c <TWI_ReceiveByte+0x12>
        ;
    *Byte = TWDR;
    5b54:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    5b58:	80 83       	st	Z, r24

    uint8_t Status = (TWSR & TW_STATUS_MASK);
    5b5a:	20 91 b9 00 	lds	r18, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    5b5e:	28 7f       	andi	r18, 0xF8	; 248

    return ((LastByte) ? (Status == TW_MR_DATA_NACK) : (Status == TW_MR_DATA_ACK));
    5b60:	81 e0       	ldi	r24, 0x01	; 1
    5b62:	90 e0       	ldi	r25, 0x00	; 0
    5b64:	67 2b       	or	r22, r23
    5b66:	19 f0       	breq	.+6      	; 0x5b6e <TWI_ReceiveByte+0x34>
    5b68:	28 35       	cpi	r18, 0x58	; 88
    5b6a:	19 f4       	brne	.+6      	; 0x5b72 <TWI_ReceiveByte+0x38>
    5b6c:	03 c0       	rjmp	.+6      	; 0x5b74 <TWI_ReceiveByte+0x3a>
    5b6e:	20 35       	cpi	r18, 0x50	; 80
    5b70:	09 f0       	breq	.+2      	; 0x5b74 <TWI_ReceiveByte+0x3a>
    5b72:	80 e0       	ldi	r24, 0x00	; 0
}
    5b74:	08 95       	ret

00005b76 <TWI_ReadPacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
uint8_t* Buffer,
uint8_t Length)
{
    5b76:	a0 e0       	ldi	r26, 0x00	; 0
    5b78:	b0 e0       	ldi	r27, 0x00	; 0
    5b7a:	e1 ec       	ldi	r30, 0xC1	; 193
    5b7c:	fd e2       	ldi	r31, 0x2D	; 45
    5b7e:	0c 94 c8 e8 	jmp	0x1d190	; 0x1d190 <__prologue_saves__+0xe>
    5b82:	f8 2e       	mov	r15, r24
    5b84:	b6 2e       	mov	r11, r22
    5b86:	94 2e       	mov	r9, r20
    5b88:	a5 2e       	mov	r10, r21
    5b8a:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5b8c:	8e 7f       	andi	r24, 0xFE	; 254
    5b8e:	61 df       	rcall	.-318    	; 0x5a52 <TWI_StartTransmission>
    5b90:	d8 2f       	mov	r29, r24
    5b92:	81 11       	cpse	r24, r1
    5b94:	2b c0       	rjmp	.+86     	; 0x5bec <TWI_ReadPacket+0x76>
    5b96:	c9 2c       	mov	r12, r9
    5b98:	da 2c       	mov	r13, r10
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5b9a:	cc 23       	and	r28, r28
    5b9c:	39 f0       	breq	.+14     	; 0x5bac <TWI_ReadPacket+0x36>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5b9e:	f6 01       	movw	r30, r12
    5ba0:	81 91       	ld	r24, Z+
    5ba2:	6f 01       	movw	r12, r30
    5ba4:	b6 df       	rcall	.-148    	; 0x5b12 <TWI_SendByte>
    5ba6:	c1 50       	subi	r28, 0x01	; 1
    5ba8:	89 2b       	or	r24, r25
    5baa:	b9 f7       	brne	.-18     	; 0x5b9a <TWI_ReadPacket+0x24>
                ErrorCode = TWI_ERROR_SlaveNAK;
                break;
            }
        }

        if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_READ,
    5bac:	6b 2d       	mov	r22, r11
    5bae:	8f 2d       	mov	r24, r15
    5bb0:	81 60       	ori	r24, 0x01	; 1
    5bb2:	4f df       	rcall	.-354    	; 0x5a52 <TWI_StartTransmission>
    5bb4:	d8 2f       	mov	r29, r24
    5bb6:	81 11       	cpse	r24, r1
    5bb8:	19 c0       	rjmp	.+50     	; 0x5bec <TWI_ReadPacket+0x76>
    5bba:	cf ef       	ldi	r28, 0xFF	; 255
    5bbc:	ce 0d       	add	r28, r14
            TimeoutMS)) == TWI_ERROR_NoError)
        {
            while (Length--)
    5bbe:	cf 3f       	cpi	r28, 0xFF	; 255
    5bc0:	91 f0       	breq	.+36     	; 0x5be6 <TWI_ReadPacket+0x70>
            {
                if (!(TWI_ReceiveByte(Buffer++, (Length == 0))))
    5bc2:	78 01       	movw	r14, r16
    5bc4:	ff ef       	ldi	r31, 0xFF	; 255
    5bc6:	ef 1a       	sub	r14, r31
    5bc8:	ff 0a       	sbc	r15, r31
    5bca:	61 e0       	ldi	r22, 0x01	; 1
    5bcc:	70 e0       	ldi	r23, 0x00	; 0
    5bce:	cc 23       	and	r28, r28
    5bd0:	11 f0       	breq	.+4      	; 0x5bd6 <TWI_ReadPacket+0x60>
    5bd2:	60 e0       	ldi	r22, 0x00	; 0
    5bd4:	70 e0       	ldi	r23, 0x00	; 0
    5bd6:	c8 01       	movw	r24, r16
    5bd8:	b0 df       	rcall	.-160    	; 0x5b3a <TWI_ReceiveByte>
    5bda:	c1 50       	subi	r28, 0x01	; 1
    5bdc:	89 2b       	or	r24, r25
    5bde:	11 f0       	breq	.+4      	; 0x5be4 <TWI_ReadPacket+0x6e>
    5be0:	87 01       	movw	r16, r14
    5be2:	ed cf       	rjmp	.-38     	; 0x5bbe <TWI_ReadPacket+0x48>
                {
                    ErrorCode = TWI_ERROR_SlaveNAK;
    5be4:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
static inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5be6:	84 e9       	ldi	r24, 0x94	; 148
    5be8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
            TWI_StopTransmission();
        }
    }

    return ErrorCode;
}
    5bec:	8d 2f       	mov	r24, r29
    5bee:	cd b7       	in	r28, 0x3d	; 61
    5bf0:	de b7       	in	r29, 0x3e	; 62
    5bf2:	eb e0       	ldi	r30, 0x0B	; 11
    5bf4:	0c 94 e4 e8 	jmp	0x1d1c8	; 0x1d1c8 <__epilogue_restores__+0xe>

00005bf8 <TWI_WritePacket>:
const uint8_t TimeoutMS,
const uint8_t* InternalAddress,
uint8_t InternalAddressLen,
const uint8_t* Buffer,
uint8_t Length)
{
    5bf8:	a0 e0       	ldi	r26, 0x00	; 0
    5bfa:	b0 e0       	ldi	r27, 0x00	; 0
    5bfc:	e2 e0       	ldi	r30, 0x02	; 2
    5bfe:	fe e2       	ldi	r31, 0x2E	; 46
    5c00:	0c 94 ca e8 	jmp	0x1d194	; 0x1d194 <__prologue_saves__+0x12>
    5c04:	b4 2e       	mov	r11, r20
    5c06:	f5 2e       	mov	r15, r21
    5c08:	c2 2f       	mov	r28, r18
    uint8_t ErrorCode;

    if ((ErrorCode = TWI_StartTransmission((SlaveAddress & TWI_DEVICE_ADDRESS_MASK) | TWI_ADDRESS_WRITE,
    5c0a:	8e 7f       	andi	r24, 0xFE	; 254
    5c0c:	22 df       	rcall	.-444    	; 0x5a52 <TWI_StartTransmission>
    5c0e:	d8 2f       	mov	r29, r24
    5c10:	81 11       	cpse	r24, r1
    5c12:	1a c0       	rjmp	.+52     	; 0x5c48 <TWI_WritePacket+0x50>
    5c14:	cb 2c       	mov	r12, r11
    5c16:	df 2c       	mov	r13, r15
        TimeoutMS)) == TWI_ERROR_NoError)
    {
        while (InternalAddressLen--)
    5c18:	cc 23       	and	r28, r28
    5c1a:	41 f0       	breq	.+16     	; 0x5c2c <TWI_WritePacket+0x34>
        {
            if (!(TWI_SendByte(*(InternalAddress++))))
    5c1c:	f6 01       	movw	r30, r12
    5c1e:	81 91       	ld	r24, Z+
    5c20:	6f 01       	movw	r12, r30
    5c22:	77 df       	rcall	.-274    	; 0x5b12 <TWI_SendByte>
    5c24:	c1 50       	subi	r28, 0x01	; 1
    5c26:	89 2b       	or	r24, r25
    5c28:	b9 f7       	brne	.-18     	; 0x5c18 <TWI_WritePacket+0x20>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5c2a:	d5 e0       	ldi	r29, 0x05	; 5
    5c2c:	68 01       	movw	r12, r16
                break;
            }
        }

        while (Length--)
    5c2e:	ee 20       	and	r14, r14
    5c30:	41 f0       	breq	.+16     	; 0x5c42 <TWI_WritePacket+0x4a>
        {
            if (!(TWI_SendByte(*(Buffer++))))
    5c32:	f6 01       	movw	r30, r12
    5c34:	81 91       	ld	r24, Z+
    5c36:	6f 01       	movw	r12, r30
    5c38:	6c df       	rcall	.-296    	; 0x5b12 <TWI_SendByte>
    5c3a:	ea 94       	dec	r14
    5c3c:	89 2b       	or	r24, r25
    5c3e:	b9 f7       	brne	.-18     	; 0x5c2e <TWI_WritePacket+0x36>
            {
                ErrorCode = TWI_ERROR_SlaveNAK;
    5c40:	d5 e0       	ldi	r29, 0x05	; 5


/** @brief Sends a TWI STOP onto the TWI bus, terminating communication with the currently addressed device. */
static inline void TWI_StopTransmission(void)
{
    TWCR = ((1 << TWINT) | (1 << TWSTO) | (1 << TWEN));
    5c42:	84 e9       	ldi	r24, 0x94	; 148
    5c44:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

        TWI_StopTransmission();
    }

    return ErrorCode;
}
    5c48:	8d 2f       	mov	r24, r29
    5c4a:	cd b7       	in	r28, 0x3d	; 61
    5c4c:	de b7       	in	r29, 0x3e	; 62
    5c4e:	e9 e0       	ldi	r30, 0x09	; 9
    5c50:	0c 94 e6 e8 	jmp	0x1d1cc	; 0x1d1cc <__epilogue_restores__+0x12>

00005c54 <BINtoBCD>:
        return -1;
    }
    if(b & 8)
        return 0;
    return 1;
}
    5c54:	6a e0       	ldi	r22, 0x0A	; 10
    5c56:	0e 94 21 e8 	call	0x1d042	; 0x1d042 <__udivmodqi4>
    5c5a:	82 95       	swap	r24
    5c5c:	80 7f       	andi	r24, 0xF0	; 240
    5c5e:	89 2b       	or	r24, r25
    5c60:	08 95       	ret

00005c62 <BCDtoBIN>:
    5c62:	98 2f       	mov	r25, r24
    5c64:	92 95       	swap	r25
    5c66:	9f 70       	andi	r25, 0x0F	; 15
    5c68:	8f 70       	andi	r24, 0x0F	; 15
    5c6a:	2a e0       	ldi	r18, 0x0A	; 10
    5c6c:	92 9f       	mul	r25, r18
    5c6e:	80 0d       	add	r24, r0
    5c70:	11 24       	eor	r1, r1
    5c72:	08 95       	ret

00005c74 <rtc_run>:
///  - -1 = check run state.
///
/// @return  run state 0/1 on success.
/// @return -1 on error.
int rtc_run(int run)
{
    5c74:	cf 92       	push	r12
    5c76:	df 92       	push	r13
    5c78:	ef 92       	push	r14
    5c7a:	0f 93       	push	r16
    5c7c:	1f 93       	push	r17
    5c7e:	cf 93       	push	r28
    5c80:	df 93       	push	r29
    5c82:	00 d0       	rcall	.+0      	; 0x5c84 <rtc_run+0x10>
    5c84:	1f 92       	push	r1
    5c86:	cd b7       	in	r28, 0x3d	; 61
    5c88:	de b7       	in	r29, 0x3e	; 62
    5c8a:	6c 01       	movw	r12, r24
    uint8_t  WriteAddress;
    uint8_t  ReadAddress;
    uint8_t b = 0;
    5c8c:	19 82       	std	Y+1, r1	; 0x01

    ReadAddress = 0;
    5c8e:	1a 82       	std	Y+2, r1	; 0x02
    if (TWI_ReadPacket(DS1307_R, 20, &ReadAddress, sizeof(ReadAddress),
    5c90:	ee 24       	eor	r14, r14
    5c92:	e3 94       	inc	r14
    5c94:	8e 01       	movw	r16, r28
    5c96:	0f 5f       	subi	r16, 0xFF	; 255
    5c98:	1f 4f       	sbci	r17, 0xFF	; 255
    5c9a:	21 e0       	ldi	r18, 0x01	; 1
    5c9c:	ae 01       	movw	r20, r28
    5c9e:	4e 5f       	subi	r20, 0xFE	; 254
    5ca0:	5f 4f       	sbci	r21, 0xFF	; 255
    5ca2:	64 e1       	ldi	r22, 0x14	; 20
    5ca4:	81 ed       	ldi	r24, 0xD1	; 209
    5ca6:	67 df       	rcall	.-306    	; 0x5b76 <TWI_ReadPacket>
    5ca8:	88 23       	and	r24, r24
    5caa:	19 f0       	breq	.+6      	; 0x5cb2 <rtc_run+0x3e>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run read error\n");
    5cac:	8e ea       	ldi	r24, 0xAE	; 174
    5cae:	94 e0       	ldi	r25, 0x04	; 4
    5cb0:	2a c0       	rjmp	.+84     	; 0x5d06 <rtc_run+0x92>
    5cb2:	89 81       	ldd	r24, Y+1	; 0x01
        return -1;
    }

    if(run == -1)
    5cb4:	9f ef       	ldi	r25, 0xFF	; 255
    5cb6:	c9 16       	cp	r12, r25
    5cb8:	d9 06       	cpc	r13, r25
    5cba:	59 f4       	brne	.+22     	; 0x5cd2 <rtc_run+0x5e>
        return ((b & 0x80) ? 0 : 1);
    5cbc:	08 2e       	mov	r0, r24
    5cbe:	00 0c       	add	r0, r0
    5cc0:	99 0b       	sbc	r25, r25
    5cc2:	80 95       	com	r24
    5cc4:	90 95       	com	r25
    5cc6:	89 2f       	mov	r24, r25
    5cc8:	88 1f       	adc	r24, r24
    5cca:	88 27       	eor	r24, r24
    5ccc:	88 1f       	adc	r24, r24
    5cce:	90 e0       	ldi	r25, 0x00	; 0
    5cd0:	26 c0       	rjmp	.+76     	; 0x5d1e <rtc_run+0xaa>

    b = ( b  & 0x7f) | (run ? 0 : 0x80);
    5cd2:	8f 77       	andi	r24, 0x7F	; 127
    5cd4:	c1 14       	cp	r12, r1
    5cd6:	d1 04       	cpc	r13, r1
    5cd8:	11 f4       	brne	.+4      	; 0x5cde <rtc_run+0x6a>
    5cda:	90 e8       	ldi	r25, 0x80	; 128
    5cdc:	01 c0       	rjmp	.+2      	; 0x5ce0 <rtc_run+0x6c>
    5cde:	90 e0       	ldi	r25, 0x00	; 0
    5ce0:	89 2b       	or	r24, r25
    5ce2:	89 83       	std	Y+1, r24	; 0x01

    WriteAddress = 0;
    5ce4:	1b 82       	std	Y+3, r1	; 0x03
    if (TWI_WritePacket(DS1307_W, 20, &WriteAddress, sizeof(WriteAddress),
    5ce6:	ee 24       	eor	r14, r14
    5ce8:	e3 94       	inc	r14
    5cea:	8e 01       	movw	r16, r28
    5cec:	0f 5f       	subi	r16, 0xFF	; 255
    5cee:	1f 4f       	sbci	r17, 0xFF	; 255
    5cf0:	21 e0       	ldi	r18, 0x01	; 1
    5cf2:	ae 01       	movw	r20, r28
    5cf4:	4d 5f       	subi	r20, 0xFD	; 253
    5cf6:	5f 4f       	sbci	r21, 0xFF	; 255
    5cf8:	64 e1       	ldi	r22, 0x14	; 20
    5cfa:	80 ed       	ldi	r24, 0xD0	; 208
    5cfc:	7d df       	rcall	.-262    	; 0x5bf8 <TWI_WritePacket>
    5cfe:	88 23       	and	r24, r24
    5d00:	69 f0       	breq	.+26     	; 0x5d1c <rtc_run+0xa8>
        (uint8_t*)&b, 1) != TWI_ERROR_NoError)
    {
        printf("rtc_run - write error\n");
    5d02:	87 e9       	ldi	r24, 0x97	; 151
    5d04:	94 e0       	ldi	r25, 0x04	; 4
    5d06:	1f 92       	push	r1
    5d08:	9f 93       	push	r25
    5d0a:	8f 93       	push	r24
    5d0c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        return(-1);
    5d10:	0f 90       	pop	r0
    5d12:	0f 90       	pop	r0
    5d14:	0f 90       	pop	r0
    5d16:	8f ef       	ldi	r24, 0xFF	; 255
    5d18:	9f ef       	ldi	r25, 0xFF	; 255
    5d1a:	01 c0       	rjmp	.+2      	; 0x5d1e <rtc_run+0xaa>
    5d1c:	c6 01       	movw	r24, r12
    }
    return(run);
}
    5d1e:	0f 90       	pop	r0
    5d20:	0f 90       	pop	r0
    5d22:	0f 90       	pop	r0
    5d24:	df 91       	pop	r29
    5d26:	cf 91       	pop	r28
    5d28:	1f 91       	pop	r17
    5d2a:	0f 91       	pop	r16
    5d2c:	ef 90       	pop	r14
    5d2e:	df 90       	pop	r13
    5d30:	cf 90       	pop	r12
    5d32:	08 95       	ret

00005d34 <rtc_write>:
/// @param[in] t: POSIX struct tm * time to set.
///
/// @return 1 on sucess.
/// @return 0 on fail.
uint8_t rtc_write(tm_t *t)
{
    5d34:	ef 92       	push	r14
    5d36:	0f 93       	push	r16
    5d38:	1f 93       	push	r17
    5d3a:	cf 93       	push	r28
    5d3c:	df 93       	push	r29
    5d3e:	cd b7       	in	r28, 0x3d	; 61
    5d40:	de b7       	in	r29, 0x3e	; 62
    5d42:	29 97       	sbiw	r28, 0x09	; 9
    5d44:	0f b6       	in	r0, 0x3f	; 63
    5d46:	f8 94       	cli
    5d48:	de bf       	out	0x3e, r29	; 62
    5d4a:	0f be       	out	0x3f, r0	; 63
    5d4c:	cd bf       	out	0x3d, r28	; 61
    5d4e:	8c 01       	movw	r16, r24
    uint8_t buf[8];
    uint8_t WriteAddress;

    buf[0] =  BINtoBCD(t->tm_sec) & 0x7f;
    5d50:	fc 01       	movw	r30, r24
    5d52:	80 81       	ld	r24, Z
    5d54:	7f df       	rcall	.-258    	; 0x5c54 <BINtoBCD>
    5d56:	8f 77       	andi	r24, 0x7F	; 127
    5d58:	89 83       	std	Y+1, r24	; 0x01
    buf[1] =  BINtoBCD(t->tm_min) & 0x7f;
    5d5a:	f8 01       	movw	r30, r16
    5d5c:	82 81       	ldd	r24, Z+2	; 0x02
    5d5e:	7a df       	rcall	.-268    	; 0x5c54 <BINtoBCD>
    5d60:	8f 77       	andi	r24, 0x7F	; 127
    buf[2] =  BINtoBCD(t->tm_hour) & 0x3f;
    5d62:	8a 83       	std	Y+2, r24	; 0x02
    5d64:	f8 01       	movw	r30, r16
    5d66:	84 81       	ldd	r24, Z+4	; 0x04
    5d68:	75 df       	rcall	.-278    	; 0x5c54 <BINtoBCD>
    5d6a:	8f 73       	andi	r24, 0x3F	; 63
    buf[3] =  ((t->tm_wday & 7) + 1) & 0x0f;
    5d6c:	8b 83       	std	Y+3, r24	; 0x03
    5d6e:	f8 01       	movw	r30, r16
    5d70:	84 85       	ldd	r24, Z+12	; 0x0c
    5d72:	87 70       	andi	r24, 0x07	; 7
    buf[4] =  BINtoBCD(t->tm_mday ) & 0x3f;
    5d74:	8f 5f       	subi	r24, 0xFF	; 255
    5d76:	8c 83       	std	Y+4, r24	; 0x04
    5d78:	86 81       	ldd	r24, Z+6	; 0x06
    5d7a:	6c df       	rcall	.-296    	; 0x5c54 <BINtoBCD>
    buf[5] =  BINtoBCD(t->tm_mon + 1) & 0x1f;
    5d7c:	8f 73       	andi	r24, 0x3F	; 63
    5d7e:	8d 83       	std	Y+5, r24	; 0x05
    5d80:	f8 01       	movw	r30, r16
    5d82:	80 85       	ldd	r24, Z+8	; 0x08
    5d84:	8f 5f       	subi	r24, 0xFF	; 255
    5d86:	66 df       	rcall	.-308    	; 0x5c54 <BINtoBCD>
    buf[6] =  BINtoBCD(t->tm_year - 100) & 0xff;  // 2000 = 0
    5d88:	8f 71       	andi	r24, 0x1F	; 31
    5d8a:	8e 83       	std	Y+6, r24	; 0x06
    5d8c:	f8 01       	movw	r30, r16
    5d8e:	82 85       	ldd	r24, Z+10	; 0x0a
    5d90:	84 56       	subi	r24, 0x64	; 100
    5d92:	60 df       	rcall	.-320    	; 0x5c54 <BINtoBCD>
    buf[7] = 0x93;                                // 32khz, out square wave
    5d94:	8f 83       	std	Y+7, r24	; 0x07
    5d96:	83 e9       	ldi	r24, 0x93	; 147
	for(i=0;i<7;++i)
		printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    WriteAddress = 0;
    5d98:	88 87       	std	Y+8, r24	; 0x08
    if (TWI_WritePacket(DS1307_W, 20, &WriteAddress, sizeof(WriteAddress),
    5d9a:	19 86       	std	Y+9, r1	; 0x09
    5d9c:	88 e0       	ldi	r24, 0x08	; 8
    5d9e:	e8 2e       	mov	r14, r24
    5da0:	8e 01       	movw	r16, r28
    5da2:	0f 5f       	subi	r16, 0xFF	; 255
    5da4:	1f 4f       	sbci	r17, 0xFF	; 255
    5da6:	21 e0       	ldi	r18, 0x01	; 1
    5da8:	ae 01       	movw	r20, r28
    5daa:	47 5f       	subi	r20, 0xF7	; 247
    5dac:	5f 4f       	sbci	r21, 0xFF	; 255
    5dae:	64 e1       	ldi	r22, 0x14	; 20
    5db0:	80 ed       	ldi	r24, 0xD0	; 208
    5db2:	22 df       	rcall	.-444    	; 0x5bf8 <TWI_WritePacket>
    5db4:	88 23       	and	r24, r24
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_write error\n");
    5db6:	61 f0       	breq	.+24     	; 0x5dd0 <rtc_write+0x9c>
    5db8:	81 e5       	ldi	r24, 0x51	; 81
    5dba:	94 e0       	ldi	r25, 0x04	; 4
    5dbc:	1f 92       	push	r1
    5dbe:	9f 93       	push	r25
    5dc0:	8f 93       	push	r24
    5dc2:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        return(0);
    5dc6:	0f 90       	pop	r0
    5dc8:	0f 90       	pop	r0
    5dca:	0f 90       	pop	r0
    5dcc:	80 e0       	ldi	r24, 0x00	; 0
    }

    return(1);
    5dce:	01 c0       	rjmp	.+2      	; 0x5dd2 <rtc_write+0x9e>
}
    5dd0:	81 e0       	ldi	r24, 0x01	; 1
    5dd2:	29 96       	adiw	r28, 0x09	; 9
    5dd4:	0f b6       	in	r0, 0x3f	; 63
    5dd6:	f8 94       	cli
    5dd8:	de bf       	out	0x3e, r29	; 62
    5dda:	0f be       	out	0x3f, r0	; 63
    5ddc:	cd bf       	out	0x3d, r28	; 61
    5dde:	df 91       	pop	r29
    5de0:	cf 91       	pop	r28
    5de2:	1f 91       	pop	r17
    5de4:	0f 91       	pop	r16
    5de6:	ef 90       	pop	r14
    5de8:	08 95       	ret

00005dea <rtc_init>:
/// @param[in] seconds: POSIX EPOCH time in seconds.
///
/// @return  1 on success.
/// @return 0 on fail.
uint8_t rtc_init (int force, time_t seconds)
{
    5dea:	ad e0       	ldi	r26, 0x0D	; 13
    5dec:	b0 e0       	ldi	r27, 0x00	; 0
    5dee:	eb ef       	ldi	r30, 0xFB	; 251
    5df0:	fe e2       	ldi	r31, 0x2E	; 46
    5df2:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__prologue_saves__+0x14>
    5df6:	6c 01       	movw	r12, r24
    5df8:	4a 87       	std	Y+10, r20	; 0x0a
    5dfa:	5b 87       	std	Y+11, r21	; 0x0b
    5dfc:	6c 87       	std	Y+12, r22	; 0x0c
    5dfe:	7d 87       	std	Y+13, r23	; 0x0d
    uint8_t  WriteAddress;
    int8_t    state;

    tm_t *tmp;

    TWI_Init(TWI_BIT_PRESCALE_4, TWI_BITLENGTH_FROM_FREQ(4, 50000));
    5e00:	6a e2       	ldi	r22, 0x2A	; 42
    5e02:	81 e0       	ldi	r24, 0x01	; 1
    5e04:	1a de       	rcall	.-972    	; 0x5a3a <TWI_Init>

    if(!force)
    5e06:	c1 14       	cp	r12, r1
    5e08:	d1 04       	cpc	r13, r1
    5e0a:	09 f0       	breq	.+2      	; 0x5e0e <rtc_init+0x24>
    5e0c:	42 c0       	rjmp	.+132    	; 0x5e92 <rtc_init+0xa8>
    {
        state = rtc_run(-1);
    5e0e:	8f ef       	ldi	r24, 0xFF	; 255
    5e10:	9f ef       	ldi	r25, 0xFF	; 255
    5e12:	30 df       	rcall	.-416    	; 0x5c74 <rtc_run>
        if(state < 0)
    5e14:	87 ff       	sbrs	r24, 7
    5e16:	05 c0       	rjmp	.+10     	; 0x5e22 <rtc_init+0x38>
        {
            rtc_ok = 0;
    5e18:	10 92 a3 19 	sts	0x19A3, r1	; 0x8019a3 <rtc_ok+0x1>
    5e1c:	10 92 a2 19 	sts	0x19A2, r1	; 0x8019a2 <rtc_ok>
    5e20:	24 c0       	rjmp	.+72     	; 0x5e6a <rtc_init+0x80>
            return 0;
        }
        if(state == 0)                            // stopped
    5e22:	88 23       	and	r24, r24
    5e24:	b1 f1       	breq	.+108    	; 0x5e92 <rtc_init+0xa8>
    5e26:	2d c0       	rjmp	.+90     	; 0x5e82 <rtc_init+0x98>
            printf("rtc _write epoch failed\n");
            rtc_ok = 0;
            return 0;
        }

        memset(buf, 0, 8);
    5e28:	ce 01       	movw	r24, r28
    5e2a:	01 96       	adiw	r24, 0x01	; 1
    5e2c:	6c 01       	movw	r12, r24
    5e2e:	88 e0       	ldi	r24, 0x08	; 8
    5e30:	f6 01       	movw	r30, r12
    5e32:	11 92       	st	Z+, r1
    5e34:	8a 95       	dec	r24
    5e36:	e9 f7       	brne	.-6      	; 0x5e32 <rtc_init+0x48>
        for (addr = 8; addr < 0x3f; addr += 8)
    5e38:	98 e0       	ldi	r25, 0x08	; 8
    5e3a:	f9 2e       	mov	r15, r25
        {
            WriteAddress = addr;
    5e3c:	f9 86       	std	Y+9, r15	; 0x09
            if (TWI_WritePacket(DS1307_W, 20, &WriteAddress, sizeof(WriteAddress),
    5e3e:	88 e0       	ldi	r24, 0x08	; 8
    5e40:	e8 2e       	mov	r14, r24
    5e42:	86 01       	movw	r16, r12
    5e44:	21 e0       	ldi	r18, 0x01	; 1
    5e46:	ae 01       	movw	r20, r28
    5e48:	47 5f       	subi	r20, 0xF7	; 247
    5e4a:	5f 4f       	sbci	r21, 0xFF	; 255
    5e4c:	64 e1       	ldi	r22, 0x14	; 20
    5e4e:	80 ed       	ldi	r24, 0xD0	; 208
    5e50:	d3 de       	rcall	.-602    	; 0x5bf8 <TWI_WritePacket>
    5e52:	88 23       	and	r24, r24
    5e54:	61 f0       	breq	.+24     	; 0x5e6e <rtc_init+0x84>
                (uint8_t*)buf, 8) != TWI_ERROR_NoError)
            {
                printf("rtc_init ram - write error\n");
    5e56:	82 e6       	ldi	r24, 0x62	; 98
    5e58:	94 e0       	ldi	r25, 0x04	; 4
    5e5a:	1f 92       	push	r1
    5e5c:	9f 93       	push	r25
    5e5e:	8f 93       	push	r24
    5e60:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
                return(0);
    5e64:	0f 90       	pop	r0
    5e66:	0f 90       	pop	r0
    5e68:	0f 90       	pop	r0
    5e6a:	10 e0       	ldi	r17, 0x00	; 0
    5e6c:	2c c0       	rjmp	.+88     	; 0x5ec6 <rtc_init+0xdc>
            rtc_ok = 0;
            return 0;
        }

        memset(buf, 0, 8);
        for (addr = 8; addr < 0x3f; addr += 8)
    5e6e:	f8 e0       	ldi	r31, 0x08	; 8
    5e70:	ff 0e       	add	r15, r31
    5e72:	80 e4       	ldi	r24, 0x40	; 64
    5e74:	f8 12       	cpse	r15, r24
                printf("rtc_init ram - write error\n");
                return(0);
            }
        }

        if(rtc_run(1) < 0)                        // START RTC
    5e76:	e2 cf       	rjmp	.-60     	; 0x5e3c <rtc_init+0x52>
    5e78:	81 e0       	ldi	r24, 0x01	; 1
    5e7a:	90 e0       	ldi	r25, 0x00	; 0
    5e7c:	fb de       	rcall	.-522    	; 0x5c74 <rtc_run>
    5e7e:	97 fd       	sbrc	r25, 7
    5e80:	cb cf       	rjmp	.-106    	; 0x5e18 <rtc_init+0x2e>
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
    }
    rtc_ok = 1;
    5e82:	81 e0       	ldi	r24, 0x01	; 1
    5e84:	90 e0       	ldi	r25, 0x00	; 0
    5e86:	90 93 a3 19 	sts	0x19A3, r25	; 0x8019a3 <rtc_ok+0x1>
    5e8a:	80 93 a2 19 	sts	0x19A2, r24	; 0x8019a2 <rtc_ok>
            force = 1;
    }

    if(force)                                     // INIT
    {
        if(rtc_run(0) < 0)                        // STOP RTC
    5e8e:	11 e0       	ldi	r17, 0x01	; 1
    5e90:	1a c0       	rjmp	.+52     	; 0x5ec6 <rtc_init+0xdc>
    5e92:	80 e0       	ldi	r24, 0x00	; 0
    5e94:	90 e0       	ldi	r25, 0x00	; 0
        {
            rtc_ok = 0;                           // Fail
            return 0;
        }
        tmp = gmtime(&seconds);
    5e96:	ee de       	rcall	.-548    	; 0x5c74 <rtc_run>
    5e98:	97 fd       	sbrc	r25, 7
    5e9a:	be cf       	rjmp	.-132    	; 0x5e18 <rtc_init+0x2e>
    5e9c:	ce 01       	movw	r24, r28
        if(!rtc_write(tmp))
    5e9e:	0a 96       	adiw	r24, 0x0a	; 10
    5ea0:	d2 d6       	rcall	.+3492   	; 0x6c46 <gmtime>
    5ea2:	48 df       	rcall	.-368    	; 0x5d34 <rtc_write>
    5ea4:	18 2f       	mov	r17, r24
    5ea6:	81 11       	cpse	r24, r1
        {
            printf("rtc _write epoch failed\n");
    5ea8:	bf cf       	rjmp	.-130    	; 0x5e28 <rtc_init+0x3e>
    5eaa:	8e e7       	ldi	r24, 0x7E	; 126
    5eac:	94 e0       	ldi	r25, 0x04	; 4
    5eae:	1f 92       	push	r1
    5eb0:	9f 93       	push	r25
    5eb2:	8f 93       	push	r24
    5eb4:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
            rtc_ok = 0;
    5eb8:	10 92 a3 19 	sts	0x19A3, r1	; 0x8019a3 <rtc_ok+0x1>
    5ebc:	10 92 a2 19 	sts	0x19A2, r1	; 0x8019a2 <rtc_ok>
            return 0;
    5ec0:	0f 90       	pop	r0
    5ec2:	0f 90       	pop	r0
            return 0;
        }
    }
    rtc_ok = 1;
    return 1;
}
    5ec4:	0f 90       	pop	r0
    5ec6:	81 2f       	mov	r24, r17
    5ec8:	2d 96       	adiw	r28, 0x0d	; 13
    5eca:	e8 e0       	ldi	r30, 0x08	; 8
    5ecc:	0c 94 e7 e8 	jmp	0x1d1ce	; 0x1d1ce <__epilogue_restores__+0x14>

00005ed0 <rtc_read>:
///
/// @param[out] t: struct tm * POSIX time returned.
/// @return  1 on sucess.
/// @return 0 on fail.
uint8_t rtc_read(tm_t *t)
{
    5ed0:	cf 92       	push	r12
    5ed2:	df 92       	push	r13
    5ed4:	ef 92       	push	r14
    5ed6:	0f 93       	push	r16
    5ed8:	1f 93       	push	r17
    5eda:	cf 93       	push	r28
    5edc:	df 93       	push	r29
    5ede:	cd b7       	in	r28, 0x3d	; 61
    5ee0:	de b7       	in	r29, 0x3e	; 62
    5ee2:	29 97       	sbiw	r28, 0x09	; 9
    5ee4:	0f b6       	in	r0, 0x3f	; 63
    5ee6:	f8 94       	cli
    5ee8:	de bf       	out	0x3e, r29	; 62
    5eea:	0f be       	out	0x3f, r0	; 63
    5eec:	cd bf       	out	0x3d, r28	; 61
    5eee:	6c 01       	movw	r12, r24
    uint8_t buf[8];

    uint8_t ReadAddress = 0;
    5ef0:	19 86       	std	Y+9, r1	; 0x09

    ReadAddress = 0;
    if (TWI_ReadPacket(DS1307_R, 20, &ReadAddress, sizeof(ReadAddress),
    5ef2:	88 e0       	ldi	r24, 0x08	; 8
    5ef4:	e8 2e       	mov	r14, r24
    5ef6:	8e 01       	movw	r16, r28
    5ef8:	0f 5f       	subi	r16, 0xFF	; 255
    5efa:	1f 4f       	sbci	r17, 0xFF	; 255
    5efc:	21 e0       	ldi	r18, 0x01	; 1
    5efe:	ae 01       	movw	r20, r28
    5f00:	47 5f       	subi	r20, 0xF7	; 247
    5f02:	5f 4f       	sbci	r21, 0xFF	; 255
    5f04:	64 e1       	ldi	r22, 0x14	; 20
    5f06:	81 ed       	ldi	r24, 0xD1	; 209
    5f08:	36 de       	rcall	.-916    	; 0x5b76 <TWI_ReadPacket>
    5f0a:	88 23       	and	r24, r24
    5f0c:	61 f0       	breq	.+24     	; 0x5f26 <rtc_read+0x56>
        (uint8_t*)buf, 8) != TWI_ERROR_NoError)
    {
        printf("rtc_read error\n");
    5f0e:	81 e4       	ldi	r24, 0x41	; 65
    5f10:	94 e0       	ldi	r25, 0x04	; 4
    5f12:	1f 92       	push	r1
    5f14:	9f 93       	push	r25
    5f16:	8f 93       	push	r24
    5f18:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        return 0;
    5f1c:	0f 90       	pop	r0
    5f1e:	0f 90       	pop	r0
    5f20:	0f 90       	pop	r0
    5f22:	80 e0       	ldi	r24, 0x00	; 0
    5f24:	33 c0       	rjmp	.+102    	; 0x5f8c <rtc_read+0xbc>
    for(i=0;i<7;++i)
        printf("%02x ", 0xff & buf[i]);
    printf("\n");
#endif

    t->tm_sec =   BCDtoBIN( buf[0] & 0x7f);
    5f26:	89 81       	ldd	r24, Y+1	; 0x01
    5f28:	8f 77       	andi	r24, 0x7F	; 127
    5f2a:	9b de       	rcall	.-714    	; 0x5c62 <BCDtoBIN>
    5f2c:	90 e0       	ldi	r25, 0x00	; 0
    5f2e:	f6 01       	movw	r30, r12
    5f30:	91 83       	std	Z+1, r25	; 0x01
    t->tm_min =   BCDtoBIN( buf[1] & 0x7f);
    5f32:	80 83       	st	Z, r24
    5f34:	8a 81       	ldd	r24, Y+2	; 0x02
    5f36:	8f 77       	andi	r24, 0x7F	; 127
    5f38:	94 de       	rcall	.-728    	; 0x5c62 <BCDtoBIN>
    5f3a:	90 e0       	ldi	r25, 0x00	; 0
    5f3c:	f6 01       	movw	r30, r12
    t->tm_hour =  BCDtoBIN( buf[2] & 0x3f);
    5f3e:	93 83       	std	Z+3, r25	; 0x03
    5f40:	82 83       	std	Z+2, r24	; 0x02
    5f42:	8b 81       	ldd	r24, Y+3	; 0x03
    5f44:	8f 73       	andi	r24, 0x3F	; 63
    5f46:	8d de       	rcall	.-742    	; 0x5c62 <BCDtoBIN>
    5f48:	90 e0       	ldi	r25, 0x00	; 0
    5f4a:	f6 01       	movw	r30, r12
    5f4c:	95 83       	std	Z+5, r25	; 0x05
    t->tm_wday =  ( buf[3] & 0x07) - 1;
    5f4e:	84 83       	std	Z+4, r24	; 0x04
    5f50:	8c 81       	ldd	r24, Y+4	; 0x04
    5f52:	87 70       	andi	r24, 0x07	; 7
    5f54:	90 e0       	ldi	r25, 0x00	; 0
    5f56:	01 97       	sbiw	r24, 0x01	; 1
    t->tm_mday =  BCDtoBIN( buf[4] & 0x3f) ;
    5f58:	95 87       	std	Z+13, r25	; 0x0d
    5f5a:	84 87       	std	Z+12, r24	; 0x0c
    5f5c:	8d 81       	ldd	r24, Y+5	; 0x05
    5f5e:	8f 73       	andi	r24, 0x3F	; 63
    5f60:	80 de       	rcall	.-768    	; 0x5c62 <BCDtoBIN>
    5f62:	90 e0       	ldi	r25, 0x00	; 0
    5f64:	f6 01       	movw	r30, r12
    t->tm_mon=    BCDtoBIN( buf[5] & 0x1f) - 1;
    5f66:	97 83       	std	Z+7, r25	; 0x07
    5f68:	86 83       	std	Z+6, r24	; 0x06
    5f6a:	8e 81       	ldd	r24, Y+6	; 0x06
    5f6c:	8f 71       	andi	r24, 0x1F	; 31
    5f6e:	79 de       	rcall	.-782    	; 0x5c62 <BCDtoBIN>
    5f70:	90 e0       	ldi	r25, 0x00	; 0
    5f72:	01 97       	sbiw	r24, 0x01	; 1
    5f74:	f6 01       	movw	r30, r12
    t->tm_year =  BCDtoBIN( buf[6] & 0xff) + 100;
    5f76:	91 87       	std	Z+9, r25	; 0x09
    5f78:	80 87       	std	Z+8, r24	; 0x08
    5f7a:	8f 81       	ldd	r24, Y+7	; 0x07
    5f7c:	72 de       	rcall	.-796    	; 0x5c62 <BCDtoBIN>
    5f7e:	90 e0       	ldi	r25, 0x00	; 0
    5f80:	8c 59       	subi	r24, 0x9C	; 156
    5f82:	9f 4f       	sbci	r25, 0xFF	; 255
    5f84:	f6 01       	movw	r30, r12
    5f86:	93 87       	std	Z+11, r25	; 0x0b
        t->tm_min,
        t->tm_sec,
        t->tm_wday);
#endif

    return 1;
    5f88:	82 87       	std	Z+10, r24	; 0x0a
}
    5f8a:	81 e0       	ldi	r24, 0x01	; 1
    5f8c:	29 96       	adiw	r28, 0x09	; 9
    5f8e:	0f b6       	in	r0, 0x3f	; 63
    5f90:	f8 94       	cli
    5f92:	de bf       	out	0x3e, r29	; 62
    5f94:	0f be       	out	0x3f, r0	; 63
    5f96:	cd bf       	out	0x3d, r28	; 61
    5f98:	df 91       	pop	r29
    5f9a:	cf 91       	pop	r28
    5f9c:	1f 91       	pop	r17
    5f9e:	0f 91       	pop	r16
    5fa0:	ef 90       	pop	r14
    5fa2:	df 90       	pop	r13
    5fa4:	cf 90       	pop	r12
    5fa6:	08 95       	ret

00005fa8 <sep>:
    *token = 0;
    // str points past the token
    if(!len)
        return(NULL);
    return(str);
}
    5fa8:	8e ef       	ldi	r24, 0xFE	; 254
    5faa:	94 e0       	ldi	r25, 0x04	; 4
    5fac:	1f 92       	push	r1
    5fae:	9f 93       	push	r25
    5fb0:	8f 93       	push	r24
    5fb2:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    5fb6:	0f 90       	pop	r0
    5fb8:	0f 90       	pop	r0
    5fba:	0f 90       	pop	r0
    5fbc:	08 95       	ret

00005fbe <isupper>:
    5fbe:	9c 01       	movw	r18, r24
    5fc0:	21 54       	subi	r18, 0x41	; 65
    5fc2:	31 09       	sbc	r19, r1
    5fc4:	81 e0       	ldi	r24, 0x01	; 1
    5fc6:	90 e0       	ldi	r25, 0x00	; 0
    5fc8:	2a 31       	cpi	r18, 0x1A	; 26
    5fca:	31 05       	cpc	r19, r1
    5fcc:	10 f0       	brcs	.+4      	; 0x5fd2 <isupper+0x14>
    5fce:	80 e0       	ldi	r24, 0x00	; 0
    5fd0:	90 e0       	ldi	r25, 0x00	; 0
    5fd2:	08 95       	ret

00005fd4 <islower>:
    5fd4:	9c 01       	movw	r18, r24
    5fd6:	21 56       	subi	r18, 0x61	; 97
    5fd8:	31 09       	sbc	r19, r1
    5fda:	81 e0       	ldi	r24, 0x01	; 1
    5fdc:	90 e0       	ldi	r25, 0x00	; 0
    5fde:	2a 31       	cpi	r18, 0x1A	; 26
    5fe0:	31 05       	cpc	r19, r1
    5fe2:	10 f0       	brcs	.+4      	; 0x5fe8 <islower+0x14>
    5fe4:	80 e0       	ldi	r24, 0x00	; 0
    5fe6:	90 e0       	ldi	r25, 0x00	; 0
    5fe8:	08 95       	ret

00005fea <tolower>:
    5fea:	cf 93       	push	r28
    5fec:	df 93       	push	r29
    5fee:	ec 01       	movw	r28, r24
    5ff0:	e6 df       	rcall	.-52     	; 0x5fbe <isupper>
    5ff2:	89 2b       	or	r24, r25
    5ff4:	19 f0       	breq	.+6      	; 0x5ffc <tolower+0x12>
    5ff6:	ce 01       	movw	r24, r28
    5ff8:	80 96       	adiw	r24, 0x20	; 32
    5ffa:	01 c0       	rjmp	.+2      	; 0x5ffe <tolower+0x14>
    5ffc:	ce 01       	movw	r24, r28
    5ffe:	df 91       	pop	r29
    6000:	cf 91       	pop	r28
    6002:	08 95       	ret

00006004 <toupper>:
    6004:	cf 93       	push	r28
    6006:	df 93       	push	r29
    6008:	ec 01       	movw	r28, r24
    600a:	e4 df       	rcall	.-56     	; 0x5fd4 <islower>
    600c:	89 2b       	or	r24, r25
    600e:	19 f0       	breq	.+6      	; 0x6016 <toupper+0x12>
    6010:	ce 01       	movw	r24, r28
    6012:	80 97       	sbiw	r24, 0x20	; 32
    6014:	01 c0       	rjmp	.+2      	; 0x6018 <toupper+0x14>
    6016:	ce 01       	movw	r24, r28
    6018:	df 91       	pop	r29
    601a:	cf 91       	pop	r28
    601c:	08 95       	ret

0000601e <strcpy>:
    601e:	fc 01       	movw	r30, r24
    6020:	db 01       	movw	r26, r22
    6022:	2d 91       	ld	r18, X+
    6024:	bd 01       	movw	r22, r26
    6026:	01 96       	adiw	r24, 0x01	; 1
    6028:	22 23       	and	r18, r18
    602a:	11 f0       	breq	.+4      	; 0x6030 <strcpy+0x12>
    602c:	20 83       	st	Z, r18
    602e:	f7 cf       	rjmp	.-18     	; 0x601e <strcpy>
    6030:	10 82       	st	Z, r1
    6032:	08 95       	ret

00006034 <strncpy>:
    6034:	db 01       	movw	r26, r22
    6036:	fc 01       	movw	r30, r24
    6038:	2d 91       	ld	r18, X+
    603a:	21 11       	cpse	r18, r1
    603c:	03 c0       	rjmp	.+6      	; 0x6044 <strncpy+0x10>
    603e:	4e 0f       	add	r20, r30
    6040:	5f 1f       	adc	r21, r31
    6042:	08 c0       	rjmp	.+16     	; 0x6054 <strncpy+0x20>
    6044:	41 15       	cp	r20, r1
    6046:	51 05       	cpc	r21, r1
    6048:	21 f0       	breq	.+8      	; 0x6052 <strncpy+0x1e>
    604a:	21 93       	st	Z+, r18
    604c:	41 50       	subi	r20, 0x01	; 1
    604e:	51 09       	sbc	r21, r1
    6050:	f3 cf       	rjmp	.-26     	; 0x6038 <strncpy+0x4>
    6052:	08 95       	ret
    6054:	4e 17       	cp	r20, r30
    6056:	5f 07       	cpc	r21, r31
    6058:	11 f0       	breq	.+4      	; 0x605e <strncpy+0x2a>
    605a:	11 92       	st	Z+, r1
    605c:	fb cf       	rjmp	.-10     	; 0x6054 <strncpy+0x20>
    605e:	08 95       	ret

00006060 <strcat>:
    6060:	cf 93       	push	r28
    6062:	df 93       	push	r29
    6064:	d8 2f       	mov	r29, r24
    6066:	c9 2f       	mov	r28, r25
    6068:	28 2f       	mov	r18, r24
    606a:	39 2f       	mov	r19, r25
    606c:	c9 01       	movw	r24, r18
    606e:	2f 5f       	subi	r18, 0xFF	; 255
    6070:	3f 4f       	sbci	r19, 0xFF	; 255
    6072:	fc 01       	movw	r30, r24
    6074:	40 81       	ld	r20, Z
    6076:	41 11       	cpse	r20, r1
    6078:	f9 cf       	rjmp	.-14     	; 0x606c <strcat+0xc>
    607a:	d1 df       	rcall	.-94     	; 0x601e <strcpy>
    607c:	8d 2f       	mov	r24, r29
    607e:	9c 2f       	mov	r25, r28
    6080:	df 91       	pop	r29
    6082:	cf 91       	pop	r28
    6084:	08 95       	ret

00006086 <reverse>:
    6086:	fc 01       	movw	r30, r24
    6088:	01 90       	ld	r0, Z+
    608a:	00 20       	and	r0, r0
    608c:	e9 f7       	brne	.-6      	; 0x6088 <reverse+0x2>
    608e:	31 97       	sbiw	r30, 0x01	; 1
    6090:	e8 1b       	sub	r30, r24
    6092:	f9 0b       	sbc	r31, r25
    6094:	af 01       	movw	r20, r30
    6096:	55 95       	asr	r21
    6098:	47 95       	ror	r20
    609a:	e8 0f       	add	r30, r24
    609c:	f9 1f       	adc	r31, r25
    609e:	dc 01       	movw	r26, r24
    60a0:	9d 01       	movw	r18, r26
    60a2:	28 1b       	sub	r18, r24
    60a4:	39 0b       	sbc	r19, r25
    60a6:	24 17       	cp	r18, r20
    60a8:	35 07       	cpc	r19, r21
    60aa:	2c f4       	brge	.+10     	; 0x60b6 <reverse+0x30>
    60ac:	22 91       	ld	r18, -Z
    60ae:	3c 91       	ld	r19, X
    60b0:	30 83       	st	Z, r19
    60b2:	2d 93       	st	X+, r18
    60b4:	f5 cf       	rjmp	.-22     	; 0x60a0 <reverse+0x1a>
    60b6:	08 95       	ret

000060b8 <strupper>:
    60b8:	cf 93       	push	r28
    60ba:	df 93       	push	r29
    60bc:	ec 01       	movw	r28, r24
    60be:	88 81       	ld	r24, Y
    60c0:	88 23       	and	r24, r24
    60c2:	21 f0       	breq	.+8      	; 0x60cc <strupper+0x14>
    60c4:	90 e0       	ldi	r25, 0x00	; 0
    60c6:	9e df       	rcall	.-196    	; 0x6004 <toupper>
    60c8:	89 93       	st	Y+, r24
    60ca:	f9 cf       	rjmp	.-14     	; 0x60be <strupper+0x6>
    60cc:	df 91       	pop	r29
    60ce:	cf 91       	pop	r28
    60d0:	08 95       	ret

000060d2 <trim_tail>:
    60d2:	fc 01       	movw	r30, r24
    60d4:	01 90       	ld	r0, Z+
    60d6:	00 20       	and	r0, r0
    60d8:	e9 f7       	brne	.-6      	; 0x60d4 <trim_tail+0x2>
    60da:	31 97       	sbiw	r30, 0x01	; 1
    60dc:	e8 17       	cp	r30, r24
    60de:	f9 07       	cpc	r31, r25
    60e0:	29 f0       	breq	.+10     	; 0x60ec <trim_tail+0x1a>
    60e2:	22 91       	ld	r18, -Z
    60e4:	21 32       	cpi	r18, 0x21	; 33
    60e6:	10 f4       	brcc	.+4      	; 0x60ec <trim_tail+0x1a>
    60e8:	10 82       	st	Z, r1
    60ea:	f8 cf       	rjmp	.-16     	; 0x60dc <trim_tail+0xa>
    60ec:	08 95       	ret

000060ee <skipspaces>:
    60ee:	00 97       	sbiw	r24, 0x00	; 0
    60f0:	39 f0       	breq	.+14     	; 0x6100 <skipspaces+0x12>
    60f2:	fc 01       	movw	r30, r24
    60f4:	cf 01       	movw	r24, r30
    60f6:	21 91       	ld	r18, Z+
    60f8:	20 32       	cpi	r18, 0x20	; 32
    60fa:	e1 f3       	breq	.-8      	; 0x60f4 <skipspaces+0x6>
    60fc:	29 30       	cpi	r18, 0x09	; 9
    60fe:	d1 f3       	breq	.-12     	; 0x60f4 <skipspaces+0x6>
    6100:	08 95       	ret

00006102 <strcmp>:
    6102:	dc 01       	movw	r26, r24
    6104:	fb 01       	movw	r30, r22
    6106:	2d 91       	ld	r18, X+
    6108:	41 91       	ld	r20, Z+
    610a:	50 e0       	ldi	r21, 0x00	; 0
    610c:	30 e0       	ldi	r19, 0x00	; 0
    610e:	c9 01       	movw	r24, r18
    6110:	84 1b       	sub	r24, r20
    6112:	95 0b       	sbc	r25, r21
    6114:	11 f4       	brne	.+4      	; 0x611a <strcmp+0x18>
    6116:	45 2b       	or	r20, r21
    6118:	b1 f7       	brne	.-20     	; 0x6106 <strcmp+0x4>
    611a:	08 95       	ret

0000611c <strncmp>:
    611c:	fc 01       	movw	r30, r24
    611e:	db 01       	movw	r26, r22
    6120:	48 0f       	add	r20, r24
    6122:	59 1f       	adc	r21, r25
    6124:	e4 17       	cp	r30, r20
    6126:	f5 07       	cpc	r31, r21
    6128:	59 f0       	breq	.+22     	; 0x6140 <strncmp+0x24>
    612a:	21 91       	ld	r18, Z+
    612c:	6d 91       	ld	r22, X+
    612e:	70 e0       	ldi	r23, 0x00	; 0
    6130:	30 e0       	ldi	r19, 0x00	; 0
    6132:	c9 01       	movw	r24, r18
    6134:	86 1b       	sub	r24, r22
    6136:	97 0b       	sbc	r25, r23
    6138:	29 f4       	brne	.+10     	; 0x6144 <strncmp+0x28>
    613a:	67 2b       	or	r22, r23
    613c:	99 f7       	brne	.-26     	; 0x6124 <strncmp+0x8>
    613e:	02 c0       	rjmp	.+4      	; 0x6144 <strncmp+0x28>
    6140:	80 e0       	ldi	r24, 0x00	; 0
    6142:	90 e0       	ldi	r25, 0x00	; 0
    6144:	08 95       	ret

00006146 <strcasecmp>:
    6146:	ef 92       	push	r14
    6148:	ff 92       	push	r15
    614a:	0f 93       	push	r16
    614c:	1f 93       	push	r17
    614e:	cf 93       	push	r28
    6150:	df 93       	push	r29
    6152:	7c 01       	movw	r14, r24
    6154:	8b 01       	movw	r16, r22
    6156:	f7 01       	movw	r30, r14
    6158:	81 91       	ld	r24, Z+
    615a:	7f 01       	movw	r14, r30
    615c:	90 e0       	ldi	r25, 0x00	; 0
    615e:	52 df       	rcall	.-348    	; 0x6004 <toupper>
    6160:	ec 01       	movw	r28, r24
    6162:	f8 01       	movw	r30, r16
    6164:	81 91       	ld	r24, Z+
    6166:	8f 01       	movw	r16, r30
    6168:	90 e0       	ldi	r25, 0x00	; 0
    616a:	4c df       	rcall	.-360    	; 0x6004 <toupper>
    616c:	9c 01       	movw	r18, r24
    616e:	ce 01       	movw	r24, r28
    6170:	82 1b       	sub	r24, r18
    6172:	93 0b       	sbc	r25, r19
    6174:	11 f4       	brne	.+4      	; 0x617a <strcasecmp+0x34>
    6176:	23 2b       	or	r18, r19
    6178:	71 f7       	brne	.-36     	; 0x6156 <strcasecmp+0x10>
    617a:	cd b7       	in	r28, 0x3d	; 61
    617c:	de b7       	in	r29, 0x3e	; 62
    617e:	e6 e0       	ldi	r30, 0x06	; 6
    6180:	0c 94 e9 e8 	jmp	0x1d1d2	; 0x1d1d2 <__epilogue_restores__+0x18>

00006184 <strncasecmp>:
    6184:	a0 e0       	ldi	r26, 0x00	; 0
    6186:	b0 e0       	ldi	r27, 0x00	; 0
    6188:	e8 ec       	ldi	r30, 0xC8	; 200
    618a:	f0 e3       	ldi	r31, 0x30	; 48
    618c:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__prologue_saves__+0x14>
    6190:	8c 01       	movw	r16, r24
    6192:	7b 01       	movw	r14, r22
    6194:	6c 01       	movw	r12, r24
    6196:	c4 0e       	add	r12, r20
    6198:	d5 1e       	adc	r13, r21
    619a:	0c 15       	cp	r16, r12
    619c:	1d 05       	cpc	r17, r13
    619e:	99 f0       	breq	.+38     	; 0x61c6 <strncasecmp+0x42>
    61a0:	f8 01       	movw	r30, r16
    61a2:	81 91       	ld	r24, Z+
    61a4:	8f 01       	movw	r16, r30
    61a6:	90 e0       	ldi	r25, 0x00	; 0
    61a8:	2d df       	rcall	.-422    	; 0x6004 <toupper>
    61aa:	ec 01       	movw	r28, r24
    61ac:	f7 01       	movw	r30, r14
    61ae:	81 91       	ld	r24, Z+
    61b0:	7f 01       	movw	r14, r30
    61b2:	90 e0       	ldi	r25, 0x00	; 0
    61b4:	27 df       	rcall	.-434    	; 0x6004 <toupper>
    61b6:	9c 01       	movw	r18, r24
    61b8:	ce 01       	movw	r24, r28
    61ba:	82 1b       	sub	r24, r18
    61bc:	93 0b       	sbc	r25, r19
    61be:	29 f4       	brne	.+10     	; 0x61ca <strncasecmp+0x46>
    61c0:	23 2b       	or	r18, r19
    61c2:	59 f7       	brne	.-42     	; 0x619a <strncasecmp+0x16>
    61c4:	02 c0       	rjmp	.+4      	; 0x61ca <strncasecmp+0x46>
    61c6:	80 e0       	ldi	r24, 0x00	; 0
    61c8:	90 e0       	ldi	r25, 0x00	; 0
    61ca:	cd b7       	in	r28, 0x3d	; 61
    61cc:	de b7       	in	r29, 0x3e	; 62
    61ce:	e8 e0       	ldi	r30, 0x08	; 8
    61d0:	0c 94 e7 e8 	jmp	0x1d1ce	; 0x1d1ce <__epilogue_restores__+0x14>

000061d4 <MATCH>:
    61d4:	cf 93       	push	r28
    61d6:	df 93       	push	r29
    61d8:	fb 01       	movw	r30, r22
    61da:	01 90       	ld	r0, Z+
    61dc:	00 20       	and	r0, r0
    61de:	e9 f7       	brne	.-6      	; 0x61da <MATCH+0x6>
    61e0:	31 97       	sbiw	r30, 0x01	; 1
    61e2:	ef 01       	movw	r28, r30
    61e4:	c6 1b       	sub	r28, r22
    61e6:	d7 0b       	sbc	r29, r23
    61e8:	8c df       	rcall	.-232    	; 0x6102 <strcmp>
    61ea:	89 2b       	or	r24, r25
    61ec:	11 f4       	brne	.+4      	; 0x61f2 <MATCH+0x1e>
    61ee:	ce 01       	movw	r24, r28
    61f0:	02 c0       	rjmp	.+4      	; 0x61f6 <MATCH+0x22>
    61f2:	80 e0       	ldi	r24, 0x00	; 0
    61f4:	90 e0       	ldi	r25, 0x00	; 0
    61f6:	df 91       	pop	r29
    61f8:	cf 91       	pop	r28
    61fa:	08 95       	ret

000061fc <MATCHARGS>:
    61fc:	ef 92       	push	r14
    61fe:	ff 92       	push	r15
    6200:	0f 93       	push	r16
    6202:	1f 93       	push	r17
    6204:	cf 93       	push	r28
    6206:	df 93       	push	r29
    6208:	f6 2e       	mov	r15, r22
    620a:	e7 2e       	mov	r14, r23
    620c:	ea 01       	movw	r28, r20
    620e:	89 01       	movw	r16, r18
    6210:	e1 df       	rcall	.-62     	; 0x61d4 <MATCH>
    6212:	00 97       	sbiw	r24, 0x00	; 0
    6214:	e9 f0       	breq	.+58     	; 0x6250 <MATCHARGS+0x54>
    6216:	0c 17       	cp	r16, r28
    6218:	1d 07       	cpc	r17, r29
    621a:	c4 f4       	brge	.+48     	; 0x624c <MATCHARGS+0x50>
    621c:	1f 93       	push	r17
    621e:	0f 93       	push	r16
    6220:	df 93       	push	r29
    6222:	cf 93       	push	r28
    6224:	ef 92       	push	r14
    6226:	ff 92       	push	r15
    6228:	88 ed       	ldi	r24, 0xD8	; 216
    622a:	94 e0       	ldi	r25, 0x04	; 4
    622c:	1f 92       	push	r1
    622e:	9f 93       	push	r25
    6230:	8f 93       	push	r24
    6232:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    6236:	8d b7       	in	r24, 0x3d	; 61
    6238:	9e b7       	in	r25, 0x3e	; 62
    623a:	09 96       	adiw	r24, 0x09	; 9
    623c:	0f b6       	in	r0, 0x3f	; 63
    623e:	f8 94       	cli
    6240:	9e bf       	out	0x3e, r25	; 62
    6242:	0f be       	out	0x3f, r0	; 63
    6244:	8d bf       	out	0x3d, r24	; 61
    6246:	80 e0       	ldi	r24, 0x00	; 0
    6248:	90 e0       	ldi	r25, 0x00	; 0
    624a:	02 c0       	rjmp	.+4      	; 0x6250 <MATCHARGS+0x54>
    624c:	81 e0       	ldi	r24, 0x01	; 1
    624e:	90 e0       	ldi	r25, 0x00	; 0
    6250:	cd b7       	in	r28, 0x3d	; 61
    6252:	de b7       	in	r29, 0x3e	; 62
    6254:	e6 e0       	ldi	r30, 0x06	; 6
    6256:	0c 94 e9 e8 	jmp	0x1d1d2	; 0x1d1d2 <__epilogue_restores__+0x18>

0000625a <MATCHI>:
    625a:	cf 93       	push	r28
    625c:	df 93       	push	r29
    625e:	fb 01       	movw	r30, r22
    6260:	01 90       	ld	r0, Z+
    6262:	00 20       	and	r0, r0
    6264:	e9 f7       	brne	.-6      	; 0x6260 <MATCHI+0x6>
    6266:	31 97       	sbiw	r30, 0x01	; 1
    6268:	ef 01       	movw	r28, r30
    626a:	c6 1b       	sub	r28, r22
    626c:	d7 0b       	sbc	r29, r23
    626e:	6b df       	rcall	.-298    	; 0x6146 <strcasecmp>
    6270:	89 2b       	or	r24, r25
    6272:	11 f4       	brne	.+4      	; 0x6278 <MATCHI+0x1e>
    6274:	ce 01       	movw	r24, r28
    6276:	02 c0       	rjmp	.+4      	; 0x627c <MATCHI+0x22>
    6278:	80 e0       	ldi	r24, 0x00	; 0
    627a:	90 e0       	ldi	r25, 0x00	; 0
    627c:	df 91       	pop	r29
    627e:	cf 91       	pop	r28
    6280:	08 95       	ret

00006282 <MATCHI_LEN>:
    6282:	cf 93       	push	r28
    6284:	df 93       	push	r29
    6286:	00 97       	sbiw	r24, 0x00	; 0
    6288:	89 f0       	breq	.+34     	; 0x62ac <MATCHI_LEN+0x2a>
    628a:	61 15       	cp	r22, r1
    628c:	71 05       	cpc	r23, r1
    628e:	71 f0       	breq	.+28     	; 0x62ac <MATCHI_LEN+0x2a>
    6290:	eb 01       	movw	r28, r22
    6292:	09 90       	ld	r0, Y+
    6294:	00 20       	and	r0, r0
    6296:	e9 f7       	brne	.-6      	; 0x6292 <MATCHI_LEN+0x10>
    6298:	21 97       	sbiw	r28, 0x01	; 1
    629a:	c6 1b       	sub	r28, r22
    629c:	d7 0b       	sbc	r29, r23
    629e:	31 f0       	breq	.+12     	; 0x62ac <MATCHI_LEN+0x2a>
    62a0:	ae 01       	movw	r20, r28
    62a2:	70 df       	rcall	.-288    	; 0x6184 <strncasecmp>
    62a4:	89 2b       	or	r24, r25
    62a6:	11 f4       	brne	.+4      	; 0x62ac <MATCHI_LEN+0x2a>
    62a8:	ce 01       	movw	r24, r28
    62aa:	02 c0       	rjmp	.+4      	; 0x62b0 <MATCHI_LEN+0x2e>
    62ac:	80 e0       	ldi	r24, 0x00	; 0
    62ae:	90 e0       	ldi	r25, 0x00	; 0
    62b0:	df 91       	pop	r29
    62b2:	cf 91       	pop	r28
    62b4:	08 95       	ret

000062b6 <split_args>:
    62b6:	a0 e0       	ldi	r26, 0x00	; 0
    62b8:	b0 e0       	ldi	r27, 0x00	; 0
    62ba:	e1 e6       	ldi	r30, 0x61	; 97
    62bc:	f1 e3       	ldi	r31, 0x31	; 49
    62be:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__prologue_saves__+0x14>
    62c2:	dc 01       	movw	r26, r24
    62c4:	6a 01       	movw	r12, r20
    62c6:	8b 01       	movw	r16, r22
    62c8:	fb 01       	movw	r30, r22
    62ca:	80 e0       	ldi	r24, 0x00	; 0
    62cc:	90 e0       	ldi	r25, 0x00	; 0
    62ce:	8c 15       	cp	r24, r12
    62d0:	9d 05       	cpc	r25, r13
    62d2:	24 f4       	brge	.+8      	; 0x62dc <split_args+0x26>
    62d4:	11 92       	st	Z+, r1
    62d6:	11 92       	st	Z+, r1
    62d8:	01 96       	adiw	r24, 0x01	; 1
    62da:	f9 cf       	rjmp	.-14     	; 0x62ce <split_args+0x18>
    62dc:	c1 14       	cp	r12, r1
    62de:	d1 04       	cpc	r13, r1
    62e0:	d9 f1       	breq	.+118    	; 0x6358 <split_args+0xa2>
    62e2:	10 97       	sbiw	r26, 0x00	; 0
    62e4:	c9 f1       	breq	.+114    	; 0x6358 <split_args+0xa2>
    62e6:	ee 24       	eor	r14, r14
    62e8:	e3 94       	inc	r14
    62ea:	f1 2c       	mov	r15, r1
    62ec:	c0 e0       	ldi	r28, 0x00	; 0
    62ee:	d0 e0       	ldi	r29, 0x00	; 0
    62f0:	8c 91       	ld	r24, X
    62f2:	88 23       	and	r24, r24
    62f4:	b1 f1       	breq	.+108    	; 0x6362 <split_args+0xac>
    62f6:	cc 15       	cp	r28, r12
    62f8:	dd 05       	cpc	r29, r13
    62fa:	9c f5       	brge	.+102    	; 0x6362 <split_args+0xac>
    62fc:	cd 01       	movw	r24, r26
    62fe:	f7 de       	rcall	.-530    	; 0x60ee <skipspaces>
    6300:	dc 01       	movw	r26, r24
    6302:	2c 91       	ld	r18, X
    6304:	22 23       	and	r18, r18
    6306:	69 f1       	breq	.+90     	; 0x6362 <split_args+0xac>
    6308:	22 32       	cpi	r18, 0x22	; 34
    630a:	79 f4       	brne	.+30     	; 0x632a <split_args+0x74>
    630c:	fc 01       	movw	r30, r24
    630e:	31 96       	adiw	r30, 0x01	; 1
    6310:	d8 01       	movw	r26, r16
    6312:	ed 93       	st	X+, r30
    6314:	fc 93       	st	X, r31
    6316:	df 01       	movw	r26, r30
    6318:	80 81       	ld	r24, Z
    631a:	31 96       	adiw	r30, 0x01	; 1
    631c:	88 23       	and	r24, r24
    631e:	a9 f0       	breq	.+42     	; 0x634a <split_args+0x94>
    6320:	82 32       	cpi	r24, 0x22	; 34
    6322:	c9 f7       	brne	.-14     	; 0x6316 <split_args+0x60>
    6324:	1c 92       	st	X, r1
    6326:	df 01       	movw	r26, r30
    6328:	10 c0       	rjmp	.+32     	; 0x634a <split_args+0x94>
    632a:	f8 01       	movw	r30, r16
    632c:	91 83       	std	Z+1, r25	; 0x01
    632e:	80 83       	st	Z, r24
    6330:	fc 01       	movw	r30, r24
    6332:	2e 2f       	mov	r18, r30
    6334:	9f 2f       	mov	r25, r31
    6336:	81 91       	ld	r24, Z+
    6338:	3f ed       	ldi	r19, 0xDF	; 223
    633a:	38 0f       	add	r19, r24
    633c:	3e 35       	cpi	r19, 0x5E	; 94
    633e:	c8 f3       	brcs	.-14     	; 0x6332 <split_args+0x7c>
    6340:	88 23       	and	r24, r24
    6342:	69 f0       	breq	.+26     	; 0x635e <split_args+0xa8>
    6344:	a2 2f       	mov	r26, r18
    6346:	b9 2f       	mov	r27, r25
    6348:	1d 92       	st	X+, r1
    634a:	21 96       	adiw	r28, 0x01	; 1
    634c:	ff ef       	ldi	r31, 0xFF	; 255
    634e:	ef 1a       	sub	r14, r31
    6350:	ff 0a       	sbc	r15, r31
    6352:	0e 5f       	subi	r16, 0xFE	; 254
    6354:	1f 4f       	sbci	r17, 0xFF	; 255
    6356:	cc cf       	rjmp	.-104    	; 0x62f0 <split_args+0x3a>
    6358:	80 e0       	ldi	r24, 0x00	; 0
    635a:	90 e0       	ldi	r25, 0x00	; 0
    635c:	03 c0       	rjmp	.+6      	; 0x6364 <split_args+0xae>
    635e:	c7 01       	movw	r24, r14
    6360:	01 c0       	rjmp	.+2      	; 0x6364 <split_args+0xae>
    6362:	ce 01       	movw	r24, r28
    6364:	cd b7       	in	r28, 0x3d	; 61
    6366:	de b7       	in	r29, 0x3e	; 62
    6368:	e8 e0       	ldi	r30, 0x08	; 8
    636a:	0c 94 e7 e8 	jmp	0x1d1ce	; 0x1d1ce <__epilogue_restores__+0x14>

0000636e <token>:
///@return string lenth on match.
///@return 0 on no match.

MEMSPACE
int token(char *str, char *pat)
{
    636e:	ef 92       	push	r14
    6370:	ff 92       	push	r15
    6372:	0f 93       	push	r16
    6374:	1f 93       	push	r17
    6376:	cf 93       	push	r28
    6378:	df 93       	push	r29
    637a:	7c 01       	movw	r14, r24
    int patlen;
    int len;
    char *ptr;

    ptr = skipspaces(str);
    637c:	8b 01       	movw	r16, r22
    637e:	b7 de       	rcall	.-658    	; 0x60ee <skipspaces>
    len = 0;
    while(*ptr > ' ' && *ptr <= 0x7e )
    6380:	9c 01       	movw	r18, r24
    6382:	fc 01       	movw	r30, r24
    6384:	ef 01       	movw	r28, r30
    6386:	c2 1b       	sub	r28, r18
    6388:	d3 0b       	sbc	r29, r19
    638a:	91 91       	ld	r25, Z+
    638c:	91 52       	subi	r25, 0x21	; 33
    638e:	9e 35       	cpi	r25, 0x5E	; 94
    {
        ++len;
        ++ptr;
    }

    if(!len)
    6390:	c8 f3       	brcs	.-14     	; 0x6384 <token+0x16>
    6392:	20 97       	sbiw	r28, 0x00	; 0
        return(0);

    patlen = strlen(pat);
    6394:	91 f0       	breq	.+36     	; 0x63ba <token+0x4c>
    6396:	f8 01       	movw	r30, r16
    6398:	01 90       	ld	r0, Z+
    639a:	00 20       	and	r0, r0
    639c:	e9 f7       	brne	.-6      	; 0x6398 <token+0x2a>
    639e:	31 97       	sbiw	r30, 0x01	; 1
    63a0:	e0 1b       	sub	r30, r16

    if(len != patlen)
    63a2:	f1 0b       	sbc	r31, r17
    63a4:	ec 17       	cp	r30, r28
    63a6:	fd 07       	cpc	r31, r29
        return(0);

    if(strncmp(str,pat,patlen) == 0)
    63a8:	31 f4       	brne	.+12     	; 0x63b6 <token+0x48>
    63aa:	ae 01       	movw	r20, r28
    63ac:	b8 01       	movw	r22, r16
    63ae:	c7 01       	movw	r24, r14
    63b0:	b5 de       	rcall	.-662    	; 0x611c <strncmp>
    63b2:	89 2b       	or	r24, r25
        ++len;
        ++ptr;
    }

    if(!len)
        return(0);
    63b4:	11 f0       	breq	.+4      	; 0x63ba <token+0x4c>
    63b6:	c0 e0       	ldi	r28, 0x00	; 0
        return(0);

    if(strncmp(str,pat,patlen) == 0)
        return(len);
    return(0);
}
    63b8:	d0 e0       	ldi	r29, 0x00	; 0
    63ba:	ce 01       	movw	r24, r28
    63bc:	cd b7       	in	r28, 0x3d	; 61
    63be:	de b7       	in	r29, 0x3e	; 62
    63c0:	e6 e0       	ldi	r30, 0x06	; 6
    63c2:	0c 94 e9 e8 	jmp	0x1d1d2	; 0x1d1d2 <__epilogue_restores__+0x18>

000063c6 <get_value>:
/// @param[in] str: string to examine
///
/// @return  value
MEMSPACE
int32_t get_value(char *str)
{ 
    63c6:	a2 e0       	ldi	r26, 0x02	; 2
    63c8:	b0 e0       	ldi	r27, 0x00	; 0
    63ca:	e9 ee       	ldi	r30, 0xE9	; 233
    63cc:	f1 e3       	ldi	r31, 0x31	; 49
    63ce:	0c 94 cf e8 	jmp	0x1d19e	; 0x1d19e <__prologue_saves__+0x1c>
    int ret;
    char *ptr;
    char *endptr;


    ptr = skipspaces(str);
    63d2:	8d de       	rcall	.-742    	; 0x60ee <skipspaces>
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    63d4:	8c 01       	movw	r16, r24
    63d6:	63 e0       	ldi	r22, 0x03	; 3
    63d8:	77 e0       	ldi	r23, 0x07	; 7
    63da:	53 df       	rcall	.-346    	; 0x6282 <MATCHI_LEN>
    63dc:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 16;
        ptr += ret;
    63de:	29 f0       	breq	.+10     	; 0x63ea <get_value+0x24>
    63e0:	08 0f       	add	r16, r24
    base = 10;

    // convert number base 10, 16, 8 and 2
    if( (ret = MATCHI_LEN(ptr,"0x")) )
    {
        base = 16;
    63e2:	19 1f       	adc	r17, r25
    63e4:	40 e1       	ldi	r20, 0x10	; 16
    63e6:	50 e0       	ldi	r21, 0x00	; 0
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    63e8:	18 c0       	rjmp	.+48     	; 0x641a <get_value+0x54>
    63ea:	66 e0       	ldi	r22, 0x06	; 6
    63ec:	77 e0       	ldi	r23, 0x07	; 7
    63ee:	c8 01       	movw	r24, r16
    63f0:	48 df       	rcall	.-368    	; 0x6282 <MATCHI_LEN>
    63f2:	00 97       	sbiw	r24, 0x00	; 0
    {
        base = 8;
        ptr += ret;
    63f4:	29 f0       	breq	.+10     	; 0x6400 <get_value+0x3a>
    63f6:	08 0f       	add	r16, r24
        base = 16;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0o")) )
    {
        base = 8;
    63f8:	19 1f       	adc	r17, r25
    63fa:	48 e0       	ldi	r20, 0x08	; 8
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    63fc:	50 e0       	ldi	r21, 0x00	; 0
    63fe:	0d c0       	rjmp	.+26     	; 0x641a <get_value+0x54>
    6400:	69 e0       	ldi	r22, 0x09	; 9
    6402:	77 e0       	ldi	r23, 0x07	; 7
    6404:	c8 01       	movw	r24, r16
    6406:	3d df       	rcall	.-390    	; 0x6282 <MATCHI_LEN>
    {
        base = 2;
        ptr += ret;
    6408:	00 97       	sbiw	r24, 0x00	; 0
    640a:	29 f0       	breq	.+10     	; 0x6416 <get_value+0x50>
        base = 8;
        ptr += ret;
    }
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
    640c:	08 0f       	add	r16, r24
    640e:	19 1f       	adc	r17, r25
    6410:	42 e0       	ldi	r20, 0x02	; 2
    char *ptr;
    char *endptr;


    ptr = skipspaces(str);
    base = 10;
    6412:	50 e0       	ldi	r21, 0x00	; 0
    6414:	02 c0       	rjmp	.+4      	; 0x641a <get_value+0x54>
    else if( (ret = MATCHI_LEN(ptr,"0b")) )
    {
        base = 2;
        ptr += ret;
    }
    return(strtol(ptr, (char **)&endptr, base));
    6416:	4a e0       	ldi	r20, 0x0A	; 10
    6418:	50 e0       	ldi	r21, 0x00	; 0
    641a:	be 01       	movw	r22, r28
    641c:	6f 5f       	subi	r22, 0xFF	; 255
    641e:	7f 4f       	sbci	r23, 0xFF	; 255
    6420:	c8 01       	movw	r24, r16
}
    6422:	0e 94 fd 44 	call	0x89fa	; 0x89fa <strtol>
    6426:	22 96       	adiw	r28, 0x02	; 2
    6428:	e4 e0       	ldi	r30, 0x04	; 4
    642a:	0c 94 eb e8 	jmp	0x1d1d6	; 0x1d1d6 <__epilogue_restores__+0x1c>

0000642e <enable_system_task>:
/// @brief Enable interrupts
/// @return void.
MEMSPACE
void enable_system_task()
{
    sei();
    642e:	78 94       	sei
    6430:	08 95       	ret

00006432 <install_timers_isr>:
///
/// @see ISR().
/// @return void.
MEMSPACE void install_timers_isr()
{
    cli();
    6432:	f8 94       	cli
    TCCR1B=(1<<WGM12) | TIMER1_PRE_1;   // No Prescale
    6434:	89 e0       	ldi	r24, 0x09	; 9
    6436:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    TCCR1A=0;
    643a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    OCR1A=(TIMER1_COUNTS_PER_TIC-1);    // 0 .. count
    643e:	8f e1       	ldi	r24, 0x1F	; 31
    6440:	9e e4       	ldi	r25, 0x4E	; 78
    6442:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    6446:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    TIMSK1 |= (1<<OCIE1A);              //Enable the Output Compare A interrupt
    644a:	ef e6       	ldi	r30, 0x6F	; 111
    644c:	f0 e0       	ldi	r31, 0x00	; 0
    644e:	80 81       	ld	r24, Z
    6450:	82 60       	ori	r24, 0x02	; 2
    6452:	80 83       	st	Z, r24
    sei();
    6454:	78 94       	sei
    6456:	08 95       	ret

00006458 <__vector_13>:
/// @brief AVR Timer Interrupt Vector
///
/// - calls execute_timers() - we call this the System task.
///
ISR(TIMER1_COMPA_vect)
{
    6458:	1f 92       	push	r1
    645a:	0f 92       	push	r0
    645c:	0f b6       	in	r0, 0x3f	; 63
    645e:	0f 92       	push	r0
    6460:	11 24       	eor	r1, r1
    6462:	0b b6       	in	r0, 0x3b	; 59
    6464:	0f 92       	push	r0
    6466:	2f 93       	push	r18
    6468:	3f 93       	push	r19
    646a:	4f 93       	push	r20
    646c:	5f 93       	push	r21
    646e:	6f 93       	push	r22
    6470:	7f 93       	push	r23
    6472:	8f 93       	push	r24
    6474:	9f 93       	push	r25
    6476:	af 93       	push	r26
    6478:	bf 93       	push	r27
    647a:	ef 93       	push	r30
    execute_timers();
    647c:	ff 93       	push	r31
}
    647e:	26 d2       	rcall	.+1100   	; 0x68cc <execute_timers>
    6480:	ff 91       	pop	r31
    6482:	ef 91       	pop	r30
    6484:	bf 91       	pop	r27
    6486:	af 91       	pop	r26
    6488:	9f 91       	pop	r25
    648a:	8f 91       	pop	r24
    648c:	7f 91       	pop	r23
    648e:	6f 91       	pop	r22
    6490:	5f 91       	pop	r21
    6492:	4f 91       	pop	r20
    6494:	3f 91       	pop	r19
    6496:	2f 91       	pop	r18
    6498:	0f 90       	pop	r0
    649a:	0b be       	out	0x3b, r0	; 59
    649c:	0f 90       	pop	r0
    649e:	0f be       	out	0x3f, r0	; 63
    64a0:	0f 90       	pop	r0
    64a2:	1f 90       	pop	r1
    64a4:	18 95       	reti

000064a6 <clock_gettime>:
///
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    64a6:	0f 93       	push	r16
    64a8:	1f 93       	push	r17
    64aa:	cf 93       	push	r28
    64ac:	df 93       	push	r29
    64ae:	fb 01       	movw	r30, r22
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;

    // disable interrupts
    cli();
    64b0:	f8 94       	cli

    count1 = TCNT1;
    64b2:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    64b6:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    ts->tv_sec = __clock.tv_sec;
    64ba:	80 91 fb 19 	lds	r24, 0x19FB	; 0x8019fb <__clock>
    64be:	90 91 fc 19 	lds	r25, 0x19FC	; 0x8019fc <__clock+0x1>
    64c2:	a0 91 fd 19 	lds	r26, 0x19FD	; 0x8019fd <__clock+0x2>
    64c6:	b0 91 fe 19 	lds	r27, 0x19FE	; 0x8019fe <__clock+0x3>
    64ca:	80 83       	st	Z, r24
    64cc:	91 83       	std	Z+1, r25	; 0x01
    64ce:	a2 83       	std	Z+2, r26	; 0x02
    64d0:	b3 83       	std	Z+3, r27	; 0x03
    ts->tv_nsec = __clock.tv_nsec;
    64d2:	80 91 ff 19 	lds	r24, 0x19FF	; 0x8019ff <__clock+0x4>
    64d6:	90 91 00 1a 	lds	r25, 0x1A00	; 0x801a00 <__clock+0x5>
    64da:	a0 91 01 1a 	lds	r26, 0x1A01	; 0x801a01 <__clock+0x6>
    64de:	b0 91 02 1a 	lds	r27, 0x1A02	; 0x801a02 <__clock+0x7>
    64e2:	84 83       	std	Z+4, r24	; 0x04
    64e4:	95 83       	std	Z+5, r25	; 0x05
    64e6:	a6 83       	std	Z+6, r26	; 0x06
    64e8:	b7 83       	std	Z+7, r27	; 0x07

    count2 = TCNT1;
    64ea:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
    64ee:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>

    if( TIFR1 & (1<<OCF1A) )
    64f2:	b1 9b       	sbis	0x16, 1	; 22
    64f4:	03 c0       	rjmp	.+6      	; 0x64fc <clock_gettime+0x56>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    64f6:	c0 e0       	ldi	r28, 0x00	; 0
    64f8:	d0 e0       	ldi	r29, 0x00	; 0
    64fa:	3f c0       	rjmp	.+126    	; 0x657a <clock_gettime+0xd4>
    count2 = TCNT1;

    if( TIFR1 & (1<<OCF1A) )
        pendingf = 1;

    if (count2 < count1)
    64fc:	82 17       	cp	r24, r18
    64fe:	93 07       	cpc	r25, r19
    6500:	d0 f1       	brcs	.+116    	; 0x6576 <clock_gettime+0xd0>
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    uint8_t pendingf = 0;
    int errorf = 0;
    6502:	c0 e0       	ldi	r28, 0x00	; 0
    6504:	d0 e0       	ldi	r29, 0x00	; 0
/// @return -1 on error.
MEMSPACE
int clock_gettime(clockid_t clk_id, struct timespec *ts)
{
    uint16_t count1,count2;                       // must be same size as timer register
    uint32_t offset = 0;
    6506:	40 e0       	ldi	r20, 0x00	; 0
    6508:	50 e0       	ldi	r21, 0x00	; 0
    650a:	ba 01       	movw	r22, r20
    else
    {
        if( pendingf )
            offset = TIMER1_COUNTS_PER_TIC;       // overflow
    }
    offset += count2;
    650c:	9a 01       	movw	r18, r20
    650e:	ab 01       	movw	r20, r22
    6510:	28 0f       	add	r18, r24
    6512:	39 1f       	adc	r19, r25
    6514:	41 1d       	adc	r20, r1
    6516:	51 1d       	adc	r21, r1

    // enable interrupts
    sei();
    6518:	78 94       	sei

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    651a:	a2 e3       	ldi	r26, 0x32	; 50
    651c:	b0 e0       	ldi	r27, 0x00	; 0
    651e:	0e 94 a1 e8 	call	0x1d142	; 0x1d142 <__muluhisi3>
    6522:	04 81       	ldd	r16, Z+4	; 0x04
    6524:	15 81       	ldd	r17, Z+5	; 0x05
    6526:	26 81       	ldd	r18, Z+6	; 0x06
    6528:	37 81       	ldd	r19, Z+7	; 0x07
    652a:	dc 01       	movw	r26, r24
    652c:	cb 01       	movw	r24, r22
    652e:	80 0f       	add	r24, r16
    6530:	91 1f       	adc	r25, r17
    6532:	a2 1f       	adc	r26, r18
    6534:	b3 1f       	adc	r27, r19

    if (ts->tv_nsec >= 1000000000L)
    6536:	81 15       	cp	r24, r1
    6538:	2a ec       	ldi	r18, 0xCA	; 202
    653a:	92 07       	cpc	r25, r18
    653c:	2a e9       	ldi	r18, 0x9A	; 154
    653e:	a2 07       	cpc	r26, r18
    6540:	2b e3       	ldi	r18, 0x3B	; 59
    6542:	b2 07       	cpc	r27, r18
    6544:	2c f4       	brge	.+10     	; 0x6550 <clock_gettime+0xaa>
    // enable interrupts
    sei();

    offset *= TIMER1_COUNTER_RES;

    ts->tv_nsec += offset;
    6546:	84 83       	std	Z+4, r24	; 0x04
    6548:	95 83       	std	Z+5, r25	; 0x05
    654a:	a6 83       	std	Z+6, r26	; 0x06
    654c:	b7 83       	std	Z+7, r27	; 0x07
    654e:	1a c0       	rjmp	.+52     	; 0x6584 <clock_gettime+0xde>

    if (ts->tv_nsec >= 1000000000L)
    {
        ts->tv_nsec -= 1000000000L;
    6550:	9a 5c       	subi	r25, 0xCA	; 202
    6552:	aa 49       	sbci	r26, 0x9A	; 154
    6554:	bb 43       	sbci	r27, 0x3B	; 59
    6556:	84 83       	std	Z+4, r24	; 0x04
    6558:	95 83       	std	Z+5, r25	; 0x05
    655a:	a6 83       	std	Z+6, r26	; 0x06
    655c:	b7 83       	std	Z+7, r27	; 0x07
        ts->tv_sec++;
    655e:	80 81       	ld	r24, Z
    6560:	91 81       	ldd	r25, Z+1	; 0x01
    6562:	a2 81       	ldd	r26, Z+2	; 0x02
    6564:	b3 81       	ldd	r27, Z+3	; 0x03
    6566:	01 96       	adiw	r24, 0x01	; 1
    6568:	a1 1d       	adc	r26, r1
    656a:	b1 1d       	adc	r27, r1
    656c:	80 83       	st	Z, r24
    656e:	91 83       	std	Z+1, r25	; 0x01
    6570:	a2 83       	std	Z+2, r26	; 0x02
    6572:	b3 83       	std	Z+3, r27	; 0x03
    }
    return(errorf);
    6574:	07 c0       	rjmp	.+14     	; 0x6584 <clock_gettime+0xde>

    if (count2 < count1)
    {
///  note: counter2 < count1 implies ISR flag must be set
        if( !pendingf )
            errorf = -1;    // counter overflow and NO pending is an error!
    6576:	cf ef       	ldi	r28, 0xFF	; 255
    6578:	df ef       	ldi	r29, 0xFF	; 255
        offset = TIMER1_COUNTS_PER_TIC;           // overflow
    657a:	40 e2       	ldi	r20, 0x20	; 32
    657c:	5e e4       	ldi	r21, 0x4E	; 78
    657e:	60 e0       	ldi	r22, 0x00	; 0
    6580:	70 e0       	ldi	r23, 0x00	; 0
    6582:	c4 cf       	rjmp	.-120    	; 0x650c <clock_gettime+0x66>
    {
        ts->tv_nsec -= 1000000000L;
        ts->tv_sec++;
    }
    return(errorf);
}
    6584:	ce 01       	movw	r24, r28
    6586:	df 91       	pop	r29
    6588:	cf 91       	pop	r28
    658a:	1f 91       	pop	r17
    658c:	0f 91       	pop	r16
    658e:	08 95       	ret

00006590 <clock_task>:
void disable_timers()
{
    if(timers_configured && timers_enabled)
    {
        disable_system_task();
        timers_enabled = 0;
    6590:	80 91 ff 19 	lds	r24, 0x19FF	; 0x8019ff <__clock+0x4>
    6594:	90 91 00 1a 	lds	r25, 0x1A00	; 0x801a00 <__clock+0x5>
    6598:	a0 91 01 1a 	lds	r26, 0x1A01	; 0x801a01 <__clock+0x6>
    659c:	b0 91 02 1a 	lds	r27, 0x1A02	; 0x801a02 <__clock+0x7>
    65a0:	80 5c       	subi	r24, 0xC0	; 192
    65a2:	9d 4b       	sbci	r25, 0xBD	; 189
    65a4:	a0 4f       	sbci	r26, 0xF0	; 240
    65a6:	bf 4f       	sbci	r27, 0xFF	; 255
    65a8:	80 93 ff 19 	sts	0x19FF, r24	; 0x8019ff <__clock+0x4>
    65ac:	90 93 00 1a 	sts	0x1A00, r25	; 0x801a00 <__clock+0x5>
    65b0:	a0 93 01 1a 	sts	0x1A01, r26	; 0x801a01 <__clock+0x6>
    65b4:	b0 93 02 1a 	sts	0x1A02, r27	; 0x801a02 <__clock+0x7>
    65b8:	80 91 ff 19 	lds	r24, 0x19FF	; 0x8019ff <__clock+0x4>
    65bc:	90 91 00 1a 	lds	r25, 0x1A00	; 0x801a00 <__clock+0x5>
    65c0:	a0 91 01 1a 	lds	r26, 0x1A01	; 0x801a01 <__clock+0x6>
    65c4:	b0 91 02 1a 	lds	r27, 0x1A02	; 0x801a02 <__clock+0x7>
    65c8:	81 15       	cp	r24, r1
    65ca:	9a 4c       	sbci	r25, 0xCA	; 202
    65cc:	aa 49       	sbci	r26, 0x9A	; 154
    65ce:	bb 43       	sbci	r27, 0x3B	; 59
    65d0:	dc f0       	brlt	.+54     	; 0x6608 <clock_task+0x78>
    65d2:	80 91 fb 19 	lds	r24, 0x19FB	; 0x8019fb <__clock>
    65d6:	90 91 fc 19 	lds	r25, 0x19FC	; 0x8019fc <__clock+0x1>
    65da:	a0 91 fd 19 	lds	r26, 0x19FD	; 0x8019fd <__clock+0x2>
    65de:	b0 91 fe 19 	lds	r27, 0x19FE	; 0x8019fe <__clock+0x3>
    65e2:	01 96       	adiw	r24, 0x01	; 1
    65e4:	a1 1d       	adc	r26, r1
    65e6:	b1 1d       	adc	r27, r1
    65e8:	80 93 fb 19 	sts	0x19FB, r24	; 0x8019fb <__clock>
    65ec:	90 93 fc 19 	sts	0x19FC, r25	; 0x8019fc <__clock+0x1>
    65f0:	a0 93 fd 19 	sts	0x19FD, r26	; 0x8019fd <__clock+0x2>
    65f4:	b0 93 fe 19 	sts	0x19FE, r27	; 0x8019fe <__clock+0x3>
    65f8:	10 92 ff 19 	sts	0x19FF, r1	; 0x8019ff <__clock+0x4>
    65fc:	10 92 00 1a 	sts	0x1A00, r1	; 0x801a00 <__clock+0x5>
    6600:	10 92 01 1a 	sts	0x1A01, r1	; 0x801a01 <__clock+0x6>
    6604:	10 92 02 1a 	sts	0x1A02, r1	; 0x801a02 <__clock+0x7>
    6608:	08 95       	ret

0000660a <clock_settime.part.2>:
    660a:	fc 01       	movw	r30, r24
    660c:	84 81       	ldd	r24, Z+4	; 0x04
    660e:	95 81       	ldd	r25, Z+5	; 0x05
    6610:	a6 81       	ldd	r26, Z+6	; 0x06
    6612:	b7 81       	ldd	r27, Z+7	; 0x07
    6614:	80 93 ff 19 	sts	0x19FF, r24	; 0x8019ff <__clock+0x4>
    6618:	90 93 00 1a 	sts	0x1A00, r25	; 0x801a00 <__clock+0x5>
    661c:	a0 93 01 1a 	sts	0x1A01, r26	; 0x801a01 <__clock+0x6>
    6620:	b0 93 02 1a 	sts	0x1A02, r27	; 0x801a02 <__clock+0x7>
    6624:	80 81       	ld	r24, Z
    6626:	91 81       	ldd	r25, Z+1	; 0x01
    6628:	a2 81       	ldd	r26, Z+2	; 0x02
    662a:	b3 81       	ldd	r27, Z+3	; 0x03
    662c:	80 93 fb 19 	sts	0x19FB, r24	; 0x8019fb <__clock>
    6630:	90 93 fc 19 	sts	0x19FC, r25	; 0x8019fc <__clock+0x1>
    6634:	a0 93 fd 19 	sts	0x19FD, r26	; 0x8019fd <__clock+0x2>
    6638:	b0 93 fe 19 	sts	0x19FE, r27	; 0x8019fe <__clock+0x3>
    663c:	80 91 ff 19 	lds	r24, 0x19FF	; 0x8019ff <__clock+0x4>
    6640:	90 91 00 1a 	lds	r25, 0x1A00	; 0x801a00 <__clock+0x5>
    6644:	a0 91 01 1a 	lds	r26, 0x1A01	; 0x801a01 <__clock+0x6>
    6648:	b0 91 02 1a 	lds	r27, 0x1A02	; 0x801a02 <__clock+0x7>
    664c:	44 81       	ldd	r20, Z+4	; 0x04
    664e:	55 81       	ldd	r21, Z+5	; 0x05
    6650:	66 81       	ldd	r22, Z+6	; 0x06
    6652:	77 81       	ldd	r23, Z+7	; 0x07
    6654:	48 17       	cp	r20, r24
    6656:	59 07       	cpc	r21, r25
    6658:	6a 07       	cpc	r22, r26
    665a:	7b 07       	cpc	r23, r27
    665c:	b9 f6       	brne	.-82     	; 0x660c <clock_settime.part.2+0x2>
    665e:	80 91 fb 19 	lds	r24, 0x19FB	; 0x8019fb <__clock>
    6662:	90 91 fc 19 	lds	r25, 0x19FC	; 0x8019fc <__clock+0x1>
    6666:	a0 91 fd 19 	lds	r26, 0x19FD	; 0x8019fd <__clock+0x2>
    666a:	b0 91 fe 19 	lds	r27, 0x19FE	; 0x8019fe <__clock+0x3>
    666e:	40 81       	ld	r20, Z
    6670:	51 81       	ldd	r21, Z+1	; 0x01
    6672:	62 81       	ldd	r22, Z+2	; 0x02
    6674:	73 81       	ldd	r23, Z+3	; 0x03
    6676:	48 17       	cp	r20, r24
    6678:	59 07       	cpc	r21, r25
    667a:	6a 07       	cpc	r22, r26
    667c:	7b 07       	cpc	r23, r27
    667e:	31 f6       	brne	.-116    	; 0x660c <clock_settime.part.2+0x2>
    6680:	80 e0       	ldi	r24, 0x00	; 0
    6682:	90 e0       	ldi	r25, 0x00	; 0
    6684:	08 95       	ret

00006686 <set_timers>:
    6686:	00 97       	sbiw	r24, 0x00	; 0
    6688:	79 f1       	breq	.+94     	; 0x66e8 <set_timers+0x62>
    668a:	e3 e0       	ldi	r30, 0x03	; 3
    668c:	fa e1       	ldi	r31, 0x1A	; 26
    668e:	4f ef       	ldi	r20, 0xFF	; 255
    6690:	5f ef       	ldi	r21, 0xFF	; 255
    6692:	20 e0       	ldi	r18, 0x00	; 0
    6694:	30 e0       	ldi	r19, 0x00	; 0
    6696:	60 81       	ld	r22, Z
    6698:	71 81       	ldd	r23, Z+1	; 0x01
    669a:	86 17       	cp	r24, r22
    669c:	97 07       	cpc	r25, r23
    669e:	79 f0       	breq	.+30     	; 0x66be <set_timers+0x38>
    66a0:	67 2b       	or	r22, r23
    66a2:	71 f4       	brne	.+28     	; 0x66c0 <set_timers+0x3a>
    66a4:	f9 01       	movw	r30, r18
    66a6:	ee 0f       	add	r30, r30
    66a8:	ff 1f       	adc	r31, r31
    66aa:	e2 0f       	add	r30, r18
    66ac:	f3 1f       	adc	r31, r19
    66ae:	ed 5f       	subi	r30, 0xFD	; 253
    66b0:	f5 4e       	sbci	r31, 0xE5	; 229
    66b2:	91 83       	std	Z+1, r25	; 0x01
    66b4:	80 83       	st	Z, r24
    66b6:	81 e0       	ldi	r24, 0x01	; 1
    66b8:	82 83       	std	Z+2, r24	; 0x02
    66ba:	c9 01       	movw	r24, r18
    66bc:	08 95       	ret
    66be:	a9 01       	movw	r20, r18
    66c0:	2f 5f       	subi	r18, 0xFF	; 255
    66c2:	3f 4f       	sbci	r19, 0xFF	; 255
    66c4:	33 96       	adiw	r30, 0x03	; 3
    66c6:	28 30       	cpi	r18, 0x08	; 8
    66c8:	31 05       	cpc	r19, r1
    66ca:	29 f7       	brne	.-54     	; 0x6696 <set_timers+0x10>
    66cc:	4f 3f       	cpi	r20, 0xFF	; 255
    66ce:	8f ef       	ldi	r24, 0xFF	; 255
    66d0:	58 07       	cpc	r21, r24
    66d2:	69 f4       	brne	.+26     	; 0x66ee <set_timers+0x68>
    66d4:	8c eb       	ldi	r24, 0xBC	; 188
    66d6:	95 e0       	ldi	r25, 0x05	; 5
    66d8:	1f 92       	push	r1
    66da:	9f 93       	push	r25
    66dc:	8f 93       	push	r24
    66de:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    66e2:	0f 90       	pop	r0
    66e4:	0f 90       	pop	r0
    66e6:	0f 90       	pop	r0
    66e8:	8f ef       	ldi	r24, 0xFF	; 255
    66ea:	9f ef       	ldi	r25, 0xFF	; 255
    66ec:	08 95       	ret
    66ee:	ca 01       	movw	r24, r20
    66f0:	08 95       	ret

000066f2 <delete_all_timers>:
    66f2:	e3 e0       	ldi	r30, 0x03	; 3
    66f4:	fa e1       	ldi	r31, 0x1A	; 26
    66f6:	12 82       	std	Z+2, r1	; 0x02
    66f8:	11 82       	std	Z+1, r1	; 0x01
    66fa:	10 82       	st	Z, r1
    66fc:	33 96       	adiw	r30, 0x03	; 3
    66fe:	8a e1       	ldi	r24, 0x1A	; 26
    6700:	eb 31       	cpi	r30, 0x1B	; 27
    6702:	f8 07       	cpc	r31, r24
    6704:	c1 f7       	brne	.-16     	; 0x66f6 <delete_all_timers+0x4>
    6706:	08 95       	ret

00006708 <subtract_timespec>:
    6708:	0f 93       	push	r16
    670a:	1f 93       	push	r17
    670c:	cf 93       	push	r28
    670e:	df 93       	push	r29
    6710:	fc 01       	movw	r30, r24
    6712:	84 81       	ldd	r24, Z+4	; 0x04
    6714:	95 81       	ldd	r25, Z+5	; 0x05
    6716:	a6 81       	ldd	r26, Z+6	; 0x06
    6718:	b7 81       	ldd	r27, Z+7	; 0x07
    671a:	eb 01       	movw	r28, r22
    671c:	0c 81       	ldd	r16, Y+4	; 0x04
    671e:	1d 81       	ldd	r17, Y+5	; 0x05
    6720:	2e 81       	ldd	r18, Y+6	; 0x06
    6722:	3f 81       	ldd	r19, Y+7	; 0x07
    6724:	80 1b       	sub	r24, r16
    6726:	91 0b       	sbc	r25, r17
    6728:	a2 0b       	sbc	r26, r18
    672a:	b3 0b       	sbc	r27, r19
    672c:	b7 fd       	sbrc	r27, 7
    672e:	05 c0       	rjmp	.+10     	; 0x673a <subtract_timespec+0x32>
    6730:	84 83       	std	Z+4, r24	; 0x04
    6732:	95 83       	std	Z+5, r25	; 0x05
    6734:	a6 83       	std	Z+6, r26	; 0x06
    6736:	b7 83       	std	Z+7, r27	; 0x07
    6738:	12 c0       	rjmp	.+36     	; 0x675e <subtract_timespec+0x56>
    673a:	96 53       	subi	r25, 0x36	; 54
    673c:	a5 46       	sbci	r26, 0x65	; 101
    673e:	b4 4c       	sbci	r27, 0xC4	; 196
    6740:	84 83       	std	Z+4, r24	; 0x04
    6742:	95 83       	std	Z+5, r25	; 0x05
    6744:	a6 83       	std	Z+6, r26	; 0x06
    6746:	b7 83       	std	Z+7, r27	; 0x07
    6748:	80 81       	ld	r24, Z
    674a:	91 81       	ldd	r25, Z+1	; 0x01
    674c:	a2 81       	ldd	r26, Z+2	; 0x02
    674e:	b3 81       	ldd	r27, Z+3	; 0x03
    6750:	01 97       	sbiw	r24, 0x01	; 1
    6752:	a1 09       	sbc	r26, r1
    6754:	b1 09       	sbc	r27, r1
    6756:	80 83       	st	Z, r24
    6758:	91 83       	std	Z+1, r25	; 0x01
    675a:	a2 83       	std	Z+2, r26	; 0x02
    675c:	b3 83       	std	Z+3, r27	; 0x03
    675e:	80 81       	ld	r24, Z
    6760:	91 81       	ldd	r25, Z+1	; 0x01
    6762:	a2 81       	ldd	r26, Z+2	; 0x02
    6764:	b3 81       	ldd	r27, Z+3	; 0x03
    6766:	eb 01       	movw	r28, r22
    6768:	48 81       	ld	r20, Y
    676a:	59 81       	ldd	r21, Y+1	; 0x01
    676c:	6a 81       	ldd	r22, Y+2	; 0x02
    676e:	7b 81       	ldd	r23, Y+3	; 0x03
    6770:	84 1b       	sub	r24, r20
    6772:	95 0b       	sbc	r25, r21
    6774:	a6 0b       	sbc	r26, r22
    6776:	b7 0b       	sbc	r27, r23
    6778:	80 83       	st	Z, r24
    677a:	91 83       	std	Z+1, r25	; 0x01
    677c:	a2 83       	std	Z+2, r26	; 0x02
    677e:	b3 83       	std	Z+3, r27	; 0x03
    6780:	df 91       	pop	r29
    6782:	cf 91       	pop	r28
    6784:	1f 91       	pop	r17
    6786:	0f 91       	pop	r16
    6788:	08 95       	ret

0000678a <ts_to_str>:
    678a:	fc 01       	movw	r30, r24
    678c:	87 81       	ldd	r24, Z+7	; 0x07
    678e:	8f 93       	push	r24
    6790:	86 81       	ldd	r24, Z+6	; 0x06
    6792:	8f 93       	push	r24
    6794:	85 81       	ldd	r24, Z+5	; 0x05
    6796:	8f 93       	push	r24
    6798:	84 81       	ldd	r24, Z+4	; 0x04
    679a:	8f 93       	push	r24
    679c:	83 81       	ldd	r24, Z+3	; 0x03
    679e:	8f 93       	push	r24
    67a0:	82 81       	ldd	r24, Z+2	; 0x02
    67a2:	8f 93       	push	r24
    67a4:	81 81       	ldd	r24, Z+1	; 0x01
    67a6:	8f 93       	push	r24
    67a8:	80 81       	ld	r24, Z
    67aa:	8f 93       	push	r24
    67ac:	82 eb       	ldi	r24, 0xB2	; 178
    67ae:	95 e0       	ldi	r25, 0x05	; 5
    67b0:	1f 92       	push	r1
    67b2:	9f 93       	push	r25
    67b4:	8f 93       	push	r24
    67b6:	1f 92       	push	r1
    67b8:	8f e1       	ldi	r24, 0x1F	; 31
    67ba:	8f 93       	push	r24
    67bc:	8c e1       	ldi	r24, 0x1C	; 28
    67be:	97 e1       	ldi	r25, 0x17	; 23
    67c0:	9f 93       	push	r25
    67c2:	8f 93       	push	r24
    67c4:	0e 94 9a 44 	call	0x8934	; 0x8934 <snprintf_P>
    67c8:	8d b7       	in	r24, 0x3d	; 61
    67ca:	9e b7       	in	r25, 0x3e	; 62
    67cc:	0f 96       	adiw	r24, 0x0f	; 15
    67ce:	0f b6       	in	r0, 0x3f	; 63
    67d0:	f8 94       	cli
    67d2:	9e bf       	out	0x3e, r25	; 62
    67d4:	0f be       	out	0x3f, r0	; 63
    67d6:	8d bf       	out	0x3d, r24	; 61
    67d8:	8c e1       	ldi	r24, 0x1C	; 28
    67da:	97 e1       	ldi	r25, 0x17	; 23
    67dc:	08 95       	ret

000067de <clock_elapsed_begin>:
    67de:	64 e1       	ldi	r22, 0x14	; 20
    67e0:	77 e1       	ldi	r23, 0x17	; 23
    67e2:	80 e0       	ldi	r24, 0x00	; 0
    67e4:	90 e0       	ldi	r25, 0x00	; 0
    67e6:	5f ce       	rjmp	.-834    	; 0x64a6 <clock_gettime>
    67e8:	08 95       	ret

000067ea <clock_elapsed_end>:
    67ea:	a8 e0       	ldi	r26, 0x08	; 8
    67ec:	b0 e0       	ldi	r27, 0x00	; 0
    67ee:	eb ef       	ldi	r30, 0xFB	; 251
    67f0:	f3 e3       	ldi	r31, 0x33	; 51
    67f2:	0c 94 cf e8 	jmp	0x1d19e	; 0x1d19e <__prologue_saves__+0x1c>
    67f6:	8c 01       	movw	r16, r24
    67f8:	be 01       	movw	r22, r28
    67fa:	6f 5f       	subi	r22, 0xFF	; 255
    67fc:	7f 4f       	sbci	r23, 0xFF	; 255
    67fe:	80 e0       	ldi	r24, 0x00	; 0
    6800:	90 e0       	ldi	r25, 0x00	; 0
    6802:	51 de       	rcall	.-862    	; 0x64a6 <clock_gettime>
    6804:	64 e1       	ldi	r22, 0x14	; 20
    6806:	77 e1       	ldi	r23, 0x17	; 23
    6808:	ce 01       	movw	r24, r28
    680a:	01 96       	adiw	r24, 0x01	; 1
    680c:	7d df       	rcall	.-262    	; 0x6708 <subtract_timespec>
    680e:	01 15       	cp	r16, r1
    6810:	11 05       	cpc	r17, r1
    6812:	c1 f0       	breq	.+48     	; 0x6844 <clock_elapsed_end+0x5a>
    6814:	f8 01       	movw	r30, r16
    6816:	80 81       	ld	r24, Z
    6818:	88 23       	and	r24, r24
    681a:	a1 f0       	breq	.+40     	; 0x6844 <clock_elapsed_end+0x5a>
    681c:	ce 01       	movw	r24, r28
    681e:	01 96       	adiw	r24, 0x01	; 1
    6820:	b4 df       	rcall	.-152    	; 0x678a <ts_to_str>
    6822:	9f 93       	push	r25
    6824:	8f 93       	push	r24
    6826:	1f 93       	push	r17
    6828:	0f 93       	push	r16
    682a:	85 e9       	ldi	r24, 0x95	; 149
    682c:	95 e0       	ldi	r25, 0x05	; 5
    682e:	1f 92       	push	r1
    6830:	9f 93       	push	r25
    6832:	8f 93       	push	r24
    6834:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    6838:	0f b6       	in	r0, 0x3f	; 63
    683a:	f8 94       	cli
    683c:	de bf       	out	0x3e, r29	; 62
    683e:	0f be       	out	0x3f, r0	; 63
    6840:	cd bf       	out	0x3d, r28	; 61
    6842:	11 c0       	rjmp	.+34     	; 0x6866 <clock_elapsed_end+0x7c>
    6844:	ce 01       	movw	r24, r28
    6846:	01 96       	adiw	r24, 0x01	; 1
    6848:	a0 df       	rcall	.-192    	; 0x678a <ts_to_str>
    684a:	9f 93       	push	r25
    684c:	8f 93       	push	r24
    684e:	8a e8       	ldi	r24, 0x8A	; 138
    6850:	95 e0       	ldi	r25, 0x05	; 5
    6852:	1f 92       	push	r1
    6854:	9f 93       	push	r25
    6856:	8f 93       	push	r24
    6858:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    685c:	0f 90       	pop	r0
    685e:	0f 90       	pop	r0
    6860:	0f 90       	pop	r0
    6862:	0f 90       	pop	r0
    6864:	0f 90       	pop	r0
    6866:	28 96       	adiw	r28, 0x08	; 8
    6868:	e4 e0       	ldi	r30, 0x04	; 4
    686a:	0c 94 eb e8 	jmp	0x1d1d6	; 0x1d1d6 <__epilogue_restores__+0x1c>

0000686e <clock_clear>:
    686e:	a8 e0       	ldi	r26, 0x08	; 8
    6870:	b0 e0       	ldi	r27, 0x00	; 0
    6872:	ed e3       	ldi	r30, 0x3D	; 61
    6874:	f4 e3       	ldi	r31, 0x34	; 52
    6876:	0c 94 d1 e8 	jmp	0x1d1a2	; 0x1d1a2 <__prologue_saves__+0x20>
    687a:	1d 82       	std	Y+5, r1	; 0x05
    687c:	1e 82       	std	Y+6, r1	; 0x06
    687e:	1f 82       	std	Y+7, r1	; 0x07
    6880:	18 86       	std	Y+8, r1	; 0x08
    6882:	19 82       	std	Y+1, r1	; 0x01
    6884:	1a 82       	std	Y+2, r1	; 0x02
    6886:	1b 82       	std	Y+3, r1	; 0x03
    6888:	1c 82       	std	Y+4, r1	; 0x04
    688a:	ce 01       	movw	r24, r28
    688c:	01 96       	adiw	r24, 0x01	; 1
    688e:	bd de       	rcall	.-646    	; 0x660a <clock_settime.part.2>
    6890:	eb e1       	ldi	r30, 0x1B	; 27
    6892:	fa e1       	ldi	r31, 0x1A	; 26
    6894:	11 82       	std	Z+1, r1	; 0x01
    6896:	10 82       	st	Z, r1
    6898:	13 82       	std	Z+3, r1	; 0x03
    689a:	12 82       	std	Z+2, r1	; 0x02
    689c:	28 96       	adiw	r28, 0x08	; 8
    689e:	e2 e0       	ldi	r30, 0x02	; 2
    68a0:	0c 94 ed e8 	jmp	0x1d1da	; 0x1d1da <__epilogue_restores__+0x20>

000068a4 <enable_timers>:
///
/// @return  void
MEMSPACE
void enable_timers()
{
    if(timers_configured && !timers_enabled)
    68a4:	80 91 3c 17 	lds	r24, 0x173C	; 0x80173c <timers_configured>
    68a8:	90 91 3d 17 	lds	r25, 0x173D	; 0x80173d <timers_configured+0x1>
    68ac:	89 2b       	or	r24, r25
    68ae:	69 f0       	breq	.+26     	; 0x68ca <enable_timers+0x26>
    68b0:	80 91 3e 17 	lds	r24, 0x173E	; 0x80173e <timers_enabled>
    68b4:	90 91 3f 17 	lds	r25, 0x173F	; 0x80173f <timers_enabled+0x1>
    68b8:	89 2b       	or	r24, r25
    {
        enable_system_task();
    68ba:	39 f4       	brne	.+14     	; 0x68ca <enable_timers+0x26>
        timers_enabled = 1;
    68bc:	b8 dd       	rcall	.-1168   	; 0x642e <enable_system_task>
    68be:	81 e0       	ldi	r24, 0x01	; 1
    68c0:	90 e0       	ldi	r25, 0x00	; 0
    68c2:	90 93 3f 17 	sts	0x173F, r25	; 0x80173f <timers_enabled+0x1>
    68c6:	80 93 3e 17 	sts	0x173E, r24	; 0x80173e <timers_enabled>
    68ca:	08 95       	ret

000068cc <execute_timers>:
/// @brief  Execute all user timers at SYSTEM_HZ rate.
///  Called by system task
///
/// @return  void
void execute_timers()
{
    68cc:	cf 93       	push	r28
    68ce:	df 93       	push	r29
    68d0:	c3 e0       	ldi	r28, 0x03	; 3
    68d2:	da e1       	ldi	r29, 0x1A	; 26
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
    68d4:	8a 81       	ldd	r24, Y+2	; 0x02
    68d6:	88 23       	and	r24, r24
    68d8:	29 f0       	breq	.+10     	; 0x68e4 <execute_timers+0x18>
    68da:	e8 81       	ld	r30, Y
    68dc:	f9 81       	ldd	r31, Y+1	; 0x01
    68de:	30 97       	sbiw	r30, 0x00	; 0
    68e0:	09 f0       	breq	.+2      	; 0x68e4 <execute_timers+0x18>
            (*timer_irq[i].user_timer_handler)();
    68e2:	09 95       	icall
    68e4:	23 96       	adiw	r28, 0x03	; 3
/// @return  void
void execute_timers()
{
    int i;

    for(i=0; i < MAX_TIMER_CNT; i++)
    68e6:	8a e1       	ldi	r24, 0x1A	; 26
    68e8:	cb 31       	cpi	r28, 0x1B	; 27
    68ea:	d8 07       	cpc	r29, r24
    68ec:	99 f7       	brne	.-26     	; 0x68d4 <execute_timers+0x8>
    {
        if(timer_irq[i].timer && timer_irq[i].user_timer_handler != NULL)
            (*timer_irq[i].user_timer_handler)();
    }
}
    68ee:	df 91       	pop	r29
    68f0:	cf 91       	pop	r28
    68f2:	08 95       	ret

000068f4 <init_timers>:
//
/// @return  void
MEMSPACE
void init_timers()
{
    printf("Timers init called\n");
    68f4:	86 e7       	ldi	r24, 0x76	; 118
    68f6:	95 e0       	ldi	r25, 0x05	; 5
    68f8:	1f 92       	push	r1
    68fa:	9f 93       	push	r25
    68fc:	8f 93       	push	r24
    68fe:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>

    if(!timers_configured)
    6902:	0f 90       	pop	r0
    6904:	0f 90       	pop	r0
    6906:	0f 90       	pop	r0
    6908:	80 91 3c 17 	lds	r24, 0x173C	; 0x80173c <timers_configured>
    690c:	90 91 3d 17 	lds	r25, 0x173D	; 0x80173d <timers_configured+0x1>
    6910:	89 2b       	or	r24, r25
    {
        install_timers_isr();
    6912:	a9 f4       	brne	.+42     	; 0x693e <init_timers+0x4a>
        timers_configured = 1;
    6914:	8e dd       	rcall	.-1252   	; 0x6432 <install_timers_isr>
    6916:	81 e0       	ldi	r24, 0x01	; 1
    6918:	90 e0       	ldi	r25, 0x00	; 0
    691a:	90 93 3d 17 	sts	0x173D, r25	; 0x80173d <timers_configured+0x1>
    691e:	80 93 3c 17 	sts	0x173C, r24	; 0x80173c <timers_configured>
        timers_enabled = 0;
    6922:	10 92 3f 17 	sts	0x173F, r1	; 0x80173f <timers_enabled+0x1>
    6926:	10 92 3e 17 	sts	0x173E, r1	; 0x80173e <timers_enabled>
        printf("Timers configured\n");
    692a:	83 e6       	ldi	r24, 0x63	; 99
    692c:	95 e0       	ldi	r25, 0x05	; 5
    692e:	1f 92       	push	r1
    6930:	9f 93       	push	r25
    6932:	8f 93       	push	r24
    6934:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    }

    delete_all_timers();
    6938:	0f 90       	pop	r0

    clock_clear();
    693a:	0f 90       	pop	r0
    693c:	0f 90       	pop	r0
    printf("Clock Init\n");
    693e:	d9 de       	rcall	.-590    	; 0x66f2 <delete_all_timers>
    6940:	96 df       	rcall	.-212    	; 0x686e <clock_clear>
    6942:	87 e5       	ldi	r24, 0x57	; 87
    6944:	95 e0       	ldi	r25, 0x05	; 5
    6946:	1f 92       	push	r1
    6948:	9f 93       	push	r25
    694a:	8f 93       	push	r24

///  See time.c
    if(set_timers(clock_task,1) == -1)
    694c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    6950:	61 e0       	ldi	r22, 0x01	; 1
    6952:	70 e0       	ldi	r23, 0x00	; 0
    6954:	88 ec       	ldi	r24, 0xC8	; 200
    6956:	92 e3       	ldi	r25, 0x32	; 50
    6958:	96 de       	rcall	.-724    	; 0x6686 <set_timers>
    695a:	0f 90       	pop	r0
    695c:	0f 90       	pop	r0
    695e:	0f 90       	pop	r0
        printf("Clock task init failed\n");
    6960:	01 96       	adiw	r24, 0x01	; 1
    6962:	51 f4       	brne	.+20     	; 0x6978 <init_timers+0x84>
    6964:	8f e3       	ldi	r24, 0x3F	; 63
    6966:	95 e0       	ldi	r25, 0x05	; 5
    6968:	1f 92       	push	r1
    696a:	9f 93       	push	r25
    696c:	8f 93       	push	r24
    696e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    6972:	0f 90       	pop	r0
    printf("Clock Installed\n");
    6974:	0f 90       	pop	r0
    6976:	0f 90       	pop	r0
    6978:	8e e2       	ldi	r24, 0x2E	; 46
    697a:	95 e0       	ldi	r25, 0x05	; 5
    697c:	1f 92       	push	r1
    697e:	9f 93       	push	r25

    enable_timers();
    6980:	8f 93       	push	r24
    6982:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>

    printf("Timers enabled\n");
    6986:	8e df       	rcall	.-228    	; 0x68a4 <enable_timers>
    6988:	8e e1       	ldi	r24, 0x1E	; 30
    698a:	95 e0       	ldi	r25, 0x05	; 5
    698c:	1f 92       	push	r1
    698e:	9f 93       	push	r25
    6990:	8f 93       	push	r24
}
    6992:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    6996:	0f 90       	pop	r0
    6998:	0f 90       	pop	r0
    699a:	0f 90       	pop	r0
    699c:	0f 90       	pop	r0
    699e:	0f 90       	pop	r0
    69a0:	0f 90       	pop	r0
    69a2:	08 95       	ret

000069a4 <clock_getres>:
/// @return 0 on success.
/// @return -1 on error.
MEMSPACE
int clock_getres(clockid_t clk_id, struct timespec *res)
{
    res->tv_sec = 0;
    69a4:	fb 01       	movw	r30, r22
    69a6:	10 82       	st	Z, r1
    69a8:	11 82       	std	Z+1, r1	; 0x01
    69aa:	12 82       	std	Z+2, r1	; 0x02
    69ac:	13 82       	std	Z+3, r1	; 0x03
    res->tv_nsec = SYSTEM_TASK_TIC_NS;
    69ae:	80 e4       	ldi	r24, 0x40	; 64
    69b0:	92 e4       	ldi	r25, 0x42	; 66
    69b2:	af e0       	ldi	r26, 0x0F	; 15
    69b4:	b0 e0       	ldi	r27, 0x00	; 0
    69b6:	84 83       	std	Z+4, r24	; 0x04
    69b8:	95 83       	std	Z+5, r25	; 0x05
    69ba:	a6 83       	std	Z+6, r26	; 0x06
    69bc:	b7 83       	std	Z+7, r27	; 0x07
    return(0);
}
    69be:	80 e0       	ldi	r24, 0x00	; 0
    69c0:	90 e0       	ldi	r25, 0x00	; 0
    69c2:	08 95       	ret

000069c4 <clock_settime>:
///
/// @return 0.
MEMSPACE
int clock_settime(clockid_t clk_id, const struct timespec *ts)
{
    if(clk_id)
    69c4:	89 2b       	or	r24, r25
    69c6:	19 f4       	brne	.+6      	; 0x69ce <clock_settime+0xa>
    69c8:	cb 01       	movw	r24, r22
    69ca:	1f ce       	rjmp	.-962    	; 0x660a <clock_settime.part.2>
    69cc:	08 95       	ret
        return(-1);
    69ce:	8f ef       	ldi	r24, 0xFF	; 255
    69d0:	9f ef       	ldi	r25, 0xFF	; 255
            continue;
        break;
    }

    return(0);
}
    69d2:	08 95       	ret

000069d4 <IS_Leap>:
void print_dst_gmt()
{
    printf("DST START       GMT: %s\n", ctime_gm(&dst.start));
    printf("DST END         GMT: %s\n", ctime_gm(&dst.end));

}
    69d4:	9c 01       	movw	r18, r24
    69d6:	83 70       	andi	r24, 0x03	; 3
    69d8:	99 27       	eor	r25, r25
    69da:	00 97       	sbiw	r24, 0x00	; 0
    69dc:	69 f4       	brne	.+26     	; 0x69f8 <IS_Leap+0x24>
    69de:	2c 36       	cpi	r18, 0x6C	; 108
    69e0:	47 e0       	ldi	r20, 0x07	; 7
    69e2:	34 07       	cpc	r19, r20
    69e4:	59 f0       	breq	.+22     	; 0x69fc <IS_Leap+0x28>
    69e6:	51 e0       	ldi	r21, 0x01	; 1
    69e8:	40 e0       	ldi	r20, 0x00	; 0
    69ea:	24 33       	cpi	r18, 0x34	; 52
    69ec:	38 40       	sbci	r19, 0x08	; 8
    69ee:	09 f4       	brne	.+2      	; 0x69f2 <IS_Leap+0x1e>
    69f0:	50 e0       	ldi	r21, 0x00	; 0
    69f2:	85 2f       	mov	r24, r21
    69f4:	94 2f       	mov	r25, r20
    69f6:	08 95       	ret
    69f8:	80 e0       	ldi	r24, 0x00	; 0
    69fa:	90 e0       	ldi	r25, 0x00	; 0
    69fc:	08 95       	ret

000069fe <tm_mon_to_ascii>:
    69fe:	8c 30       	cpi	r24, 0x0C	; 12
    6a00:	91 05       	cpc	r25, r1
    6a02:	40 f4       	brcc	.+16     	; 0x6a14 <tm_mon_to_ascii+0x16>
    6a04:	88 0f       	add	r24, r24
    6a06:	99 1f       	adc	r25, r25
    6a08:	fc 01       	movw	r30, r24
    6a0a:	eb 5f       	subi	r30, 0xFB	; 251
    6a0c:	fe 4f       	sbci	r31, 0xFE	; 254
    6a0e:	80 81       	ld	r24, Z
    6a10:	91 81       	ldd	r25, Z+1	; 0x01
    6a12:	08 95       	ret
    6a14:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <__Month+0x18>
    6a18:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <__Month+0x19>
    6a1c:	08 95       	ret

00006a1e <Days_Per_Month>:
    6a1e:	cf 93       	push	r28
    6a20:	df 93       	push	r29
    6a22:	8c 30       	cpi	r24, 0x0C	; 12
    6a24:	91 05       	cpc	r25, r1
    6a26:	24 f0       	brlt	.+8      	; 0x6a30 <Days_Per_Month+0x12>
    6a28:	6f 5f       	subi	r22, 0xFF	; 255
    6a2a:	7f 4f       	sbci	r23, 0xFF	; 255
    6a2c:	0c 97       	sbiw	r24, 0x0c	; 12
    6a2e:	f9 cf       	rjmp	.-14     	; 0x6a22 <Days_Per_Month+0x4>
    6a30:	97 ff       	sbrs	r25, 7
    6a32:	04 c0       	rjmp	.+8      	; 0x6a3c <Days_Per_Month+0x1e>
    6a34:	61 50       	subi	r22, 0x01	; 1
    6a36:	71 09       	sbc	r23, r1
    6a38:	0c 96       	adiw	r24, 0x0c	; 12
    6a3a:	fa cf       	rjmp	.-12     	; 0x6a30 <Days_Per_Month+0x12>
    6a3c:	fc 01       	movw	r30, r24
    6a3e:	ee 0f       	add	r30, r30
    6a40:	ff 1f       	adc	r31, r31
    6a42:	e2 5b       	subi	r30, 0xB2	; 178
    6a44:	fd 4f       	sbci	r31, 0xFD	; 253
    6a46:	c0 81       	ld	r28, Z
    6a48:	d1 81       	ldd	r29, Z+1	; 0x01
    6a4a:	01 97       	sbiw	r24, 0x01	; 1
    6a4c:	29 f4       	brne	.+10     	; 0x6a58 <Days_Per_Month+0x3a>
    6a4e:	cb 01       	movw	r24, r22
    6a50:	c1 df       	rcall	.-126    	; 0x69d4 <IS_Leap>
    6a52:	89 2b       	or	r24, r25
    6a54:	09 f0       	breq	.+2      	; 0x6a58 <Days_Per_Month+0x3a>
    6a56:	21 96       	adiw	r28, 0x01	; 1
    6a58:	ce 01       	movw	r24, r28
    6a5a:	df 91       	pop	r29
    6a5c:	cf 91       	pop	r28
    6a5e:	08 95       	ret

00006a60 <time_to_tm>:
    6a60:	a0 e0       	ldi	r26, 0x00	; 0
    6a62:	b0 e0       	ldi	r27, 0x00	; 0
    6a64:	e6 e3       	ldi	r30, 0x36	; 54
    6a66:	f5 e3       	ldi	r31, 0x35	; 53
    6a68:	0c 94 c3 e8 	jmp	0x1d186	; 0x1d186 <__prologue_saves__+0x4>
    6a6c:	e8 01       	movw	r28, r16
    6a6e:	e6 e1       	ldi	r30, 0x16	; 22
    6a70:	d8 01       	movw	r26, r16
    6a72:	1d 92       	st	X+, r1
    6a74:	ea 95       	dec	r30
    6a76:	e9 f7       	brne	.-6      	; 0x6a72 <time_to_tm+0x12>
    6a78:	61 15       	cp	r22, r1
    6a7a:	bd e5       	ldi	r27, 0x5D	; 93
    6a7c:	7b 07       	cpc	r23, r27
    6a7e:	bd ef       	ldi	r27, 0xFD	; 253
    6a80:	8b 07       	cpc	r24, r27
    6a82:	bf ef       	ldi	r27, 0xFF	; 255
    6a84:	9b 07       	cpc	r25, r27
    6a86:	08 f0       	brcs	.+2      	; 0x6a8a <time_to_tm+0x2a>
    6a88:	c0 c0       	rjmp	.+384    	; 0x6c0a <time_to_tm+0x1aa>
    6a8a:	6b 01       	movw	r12, r22
    6a8c:	7c 01       	movw	r14, r24
    6a8e:	c2 1a       	sub	r12, r18
    6a90:	d3 0a       	sbc	r13, r19
    6a92:	e4 0a       	sbc	r14, r20
    6a94:	f5 0a       	sbc	r15, r21
    6a96:	46 01       	movw	r8, r12
    6a98:	57 01       	movw	r10, r14
    6a9a:	e0 e8       	ldi	r30, 0x80	; 128
    6a9c:	ce 16       	cp	r12, r30
    6a9e:	ee ea       	ldi	r30, 0xAE	; 174
    6aa0:	de 06       	cpc	r13, r30
    6aa2:	ee ef       	ldi	r30, 0xFE	; 254
    6aa4:	ee 06       	cpc	r14, r30
    6aa6:	ef ef       	ldi	r30, 0xFF	; 255
    6aa8:	fe 06       	cpc	r15, r30
    6aaa:	50 f0       	brcs	.+20     	; 0x6ac0 <time_to_tm+0x60>
    6aac:	80 e8       	ldi	r24, 0x80	; 128
    6aae:	88 0e       	add	r8, r24
    6ab0:	81 e5       	ldi	r24, 0x51	; 81
    6ab2:	98 1e       	adc	r9, r24
    6ab4:	81 e0       	ldi	r24, 0x01	; 1
    6ab6:	a8 1e       	adc	r10, r24
    6ab8:	b1 1c       	adc	r11, r1
    6aba:	01 e0       	ldi	r16, 0x01	; 1
    6abc:	10 e0       	ldi	r17, 0x00	; 0
    6abe:	02 c0       	rjmp	.+4      	; 0x6ac4 <time_to_tm+0x64>
    6ac0:	00 e0       	ldi	r16, 0x00	; 0
    6ac2:	10 e0       	ldi	r17, 0x00	; 0
    6ac4:	8c e3       	ldi	r24, 0x3C	; 60
    6ac6:	48 2e       	mov	r4, r24
    6ac8:	51 2c       	mov	r5, r1
    6aca:	61 2c       	mov	r6, r1
    6acc:	71 2c       	mov	r7, r1
    6ace:	c5 01       	movw	r24, r10
    6ad0:	b4 01       	movw	r22, r8
    6ad2:	a3 01       	movw	r20, r6
    6ad4:	92 01       	movw	r18, r4
    6ad6:	0e 94 54 e8 	call	0x1d0a8	; 0x1d0a8 <__udivmodsi4>
    6ada:	79 83       	std	Y+1, r23	; 0x01
    6adc:	68 83       	st	Y, r22
    6ade:	ca 01       	movw	r24, r20
    6ae0:	b9 01       	movw	r22, r18
    6ae2:	a3 01       	movw	r20, r6
    6ae4:	92 01       	movw	r18, r4
    6ae6:	0e 94 54 e8 	call	0x1d0a8	; 0x1d0a8 <__udivmodsi4>
    6aea:	7b 83       	std	Y+3, r23	; 0x03
    6aec:	6a 83       	std	Y+2, r22	; 0x02
    6aee:	c5 01       	movw	r24, r10
    6af0:	b4 01       	movw	r22, r8
    6af2:	20 e1       	ldi	r18, 0x10	; 16
    6af4:	3e e0       	ldi	r19, 0x0E	; 14
    6af6:	40 e0       	ldi	r20, 0x00	; 0
    6af8:	50 e0       	ldi	r21, 0x00	; 0
    6afa:	0e 94 54 e8 	call	0x1d0a8	; 0x1d0a8 <__udivmodsi4>
    6afe:	ca 01       	movw	r24, r20
    6b00:	b9 01       	movw	r22, r18
    6b02:	28 e1       	ldi	r18, 0x18	; 24
    6b04:	30 e0       	ldi	r19, 0x00	; 0
    6b06:	40 e0       	ldi	r20, 0x00	; 0
    6b08:	50 e0       	ldi	r21, 0x00	; 0
    6b0a:	0e 94 54 e8 	call	0x1d0a8	; 0x1d0a8 <__udivmodsi4>
    6b0e:	7d 83       	std	Y+5, r23	; 0x05
    6b10:	6c 83       	std	Y+4, r22	; 0x04
    6b12:	01 15       	cp	r16, r1
    6b14:	11 05       	cpc	r17, r1
    6b16:	89 f0       	breq	.+34     	; 0x6b3a <time_to_tm+0xda>
    6b18:	85 e4       	ldi	r24, 0x45	; 69
    6b1a:	90 e0       	ldi	r25, 0x00	; 0
    6b1c:	9b 87       	std	Y+11, r25	; 0x0b
    6b1e:	8a 87       	std	Y+10, r24	; 0x0a
    6b20:	8b e0       	ldi	r24, 0x0B	; 11
    6b22:	90 e0       	ldi	r25, 0x00	; 0
    6b24:	99 87       	std	Y+9, r25	; 0x09
    6b26:	88 87       	std	Y+8, r24	; 0x08
    6b28:	8f e1       	ldi	r24, 0x1F	; 31
    6b2a:	90 e0       	ldi	r25, 0x00	; 0
    6b2c:	9f 83       	std	Y+7, r25	; 0x07
    6b2e:	8e 83       	std	Y+6, r24	; 0x06
    6b30:	83 e0       	ldi	r24, 0x03	; 3
    6b32:	90 e0       	ldi	r25, 0x00	; 0
    6b34:	9d 87       	std	Y+13, r25	; 0x0d
    6b36:	8c 87       	std	Y+12, r24	; 0x0c
    6b38:	65 c0       	rjmp	.+202    	; 0x6c04 <time_to_tm+0x1a4>
    6b3a:	c5 01       	movw	r24, r10
    6b3c:	b4 01       	movw	r22, r8
    6b3e:	20 e8       	ldi	r18, 0x80	; 128
    6b40:	31 e5       	ldi	r19, 0x51	; 81
    6b42:	41 e0       	ldi	r20, 0x01	; 1
    6b44:	50 e0       	ldi	r21, 0x00	; 0
    6b46:	0e 94 54 e8 	call	0x1d0a8	; 0x1d0a8 <__udivmodsi4>
    6b4a:	49 01       	movw	r8, r18
    6b4c:	5a 01       	movw	r10, r20
    6b4e:	ca 01       	movw	r24, r20
    6b50:	b9 01       	movw	r22, r18
    6b52:	6c 5f       	subi	r22, 0xFC	; 252
    6b54:	7f 4f       	sbci	r23, 0xFF	; 255
    6b56:	8f 4f       	sbci	r24, 0xFF	; 255
    6b58:	9f 4f       	sbci	r25, 0xFF	; 255
    6b5a:	27 e0       	ldi	r18, 0x07	; 7
    6b5c:	30 e0       	ldi	r19, 0x00	; 0
    6b5e:	40 e0       	ldi	r20, 0x00	; 0
    6b60:	50 e0       	ldi	r21, 0x00	; 0
    6b62:	0e 94 76 e8 	call	0x1d0ec	; 0x1d0ec <__divmodsi4>
    6b66:	7d 87       	std	Y+13, r23	; 0x0d
    6b68:	6c 87       	std	Y+12, r22	; 0x0c
    6b6a:	02 eb       	ldi	r16, 0xB2	; 178
    6b6c:	17 e0       	ldi	r17, 0x07	; 7
    6b6e:	c8 01       	movw	r24, r16
    6b70:	31 df       	rcall	.-414    	; 0x69d4 <IS_Leap>
    6b72:	00 97       	sbiw	r24, 0x00	; 0
    6b74:	19 f4       	brne	.+6      	; 0x6b7c <time_to_tm+0x11c>
    6b76:	4d e6       	ldi	r20, 0x6D	; 109
    6b78:	51 e0       	ldi	r21, 0x01	; 1
    6b7a:	02 c0       	rjmp	.+4      	; 0x6b80 <time_to_tm+0x120>
    6b7c:	4e e6       	ldi	r20, 0x6E	; 110
    6b7e:	51 e0       	ldi	r21, 0x01	; 1
    6b80:	05 2e       	mov	r0, r21
    6b82:	00 0c       	add	r0, r0
    6b84:	66 0b       	sbc	r22, r22
    6b86:	77 0b       	sbc	r23, r23
    6b88:	84 16       	cp	r8, r20
    6b8a:	95 06       	cpc	r9, r21
    6b8c:	a6 06       	cpc	r10, r22
    6b8e:	b7 06       	cpc	r11, r23
    6b90:	3c f0       	brlt	.+14     	; 0x6ba0 <time_to_tm+0x140>
    6b92:	0f 5f       	subi	r16, 0xFF	; 255
    6b94:	1f 4f       	sbci	r17, 0xFF	; 255
    6b96:	84 1a       	sub	r8, r20
    6b98:	95 0a       	sbc	r9, r21
    6b9a:	a6 0a       	sbc	r10, r22
    6b9c:	b7 0a       	sbc	r11, r23
    6b9e:	e7 cf       	rjmp	.-50     	; 0x6b6e <time_to_tm+0x10e>
    6ba0:	0c 56       	subi	r16, 0x6C	; 108
    6ba2:	17 40       	sbci	r17, 0x07	; 7
    6ba4:	1b 87       	std	Y+11, r17	; 0x0b
    6ba6:	0a 87       	std	Y+10, r16	; 0x0a
    6ba8:	9f 86       	std	Y+15, r9	; 0x0f
    6baa:	8e 86       	std	Y+14, r8	; 0x0e
    6bac:	ee e4       	ldi	r30, 0x4E	; 78
    6bae:	f2 e0       	ldi	r31, 0x02	; 2
    6bb0:	20 e0       	ldi	r18, 0x00	; 0
    6bb2:	30 e0       	ldi	r19, 0x00	; 0
    6bb4:	18 14       	cp	r1, r8
    6bb6:	19 04       	cpc	r1, r9
    6bb8:	1a 04       	cpc	r1, r10
    6bba:	1b 04       	cpc	r1, r11
    6bbc:	e4 f4       	brge	.+56     	; 0x6bf6 <time_to_tm+0x196>
    6bbe:	2c 30       	cpi	r18, 0x0C	; 12
    6bc0:	31 05       	cpc	r19, r1
    6bc2:	c9 f0       	breq	.+50     	; 0x6bf6 <time_to_tm+0x196>
    6bc4:	41 91       	ld	r20, Z+
    6bc6:	51 91       	ld	r21, Z+
    6bc8:	21 30       	cpi	r18, 0x01	; 1
    6bca:	31 05       	cpc	r19, r1
    6bcc:	21 f4       	brne	.+8      	; 0x6bd6 <time_to_tm+0x176>
    6bce:	00 97       	sbiw	r24, 0x00	; 0
    6bd0:	11 f0       	breq	.+4      	; 0x6bd6 <time_to_tm+0x176>
    6bd2:	4f 5f       	subi	r20, 0xFF	; 255
    6bd4:	5f 4f       	sbci	r21, 0xFF	; 255
    6bd6:	05 2e       	mov	r0, r21
    6bd8:	00 0c       	add	r0, r0
    6bda:	66 0b       	sbc	r22, r22
    6bdc:	77 0b       	sbc	r23, r23
    6bde:	84 16       	cp	r8, r20
    6be0:	95 06       	cpc	r9, r21
    6be2:	a6 06       	cpc	r10, r22
    6be4:	b7 06       	cpc	r11, r23
    6be6:	3c f0       	brlt	.+14     	; 0x6bf6 <time_to_tm+0x196>
    6be8:	84 1a       	sub	r8, r20
    6bea:	95 0a       	sbc	r9, r21
    6bec:	a6 0a       	sbc	r10, r22
    6bee:	b7 0a       	sbc	r11, r23
    6bf0:	2f 5f       	subi	r18, 0xFF	; 255
    6bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    6bf4:	df cf       	rjmp	.-66     	; 0x6bb4 <time_to_tm+0x154>
    6bf6:	39 87       	std	Y+9, r19	; 0x09
    6bf8:	28 87       	std	Y+8, r18	; 0x08
    6bfa:	af ef       	ldi	r26, 0xFF	; 255
    6bfc:	8a 1a       	sub	r8, r26
    6bfe:	9a 0a       	sbc	r9, r26
    6c00:	9f 82       	std	Y+7, r9	; 0x07
    6c02:	8e 82       	std	Y+6, r8	; 0x06
    6c04:	b6 01       	movw	r22, r12
    6c06:	c7 01       	movw	r24, r14
    6c08:	04 c0       	rjmp	.+8      	; 0x6c12 <time_to_tm+0x1b2>
    6c0a:	6f ef       	ldi	r22, 0xFF	; 255
    6c0c:	7f ef       	ldi	r23, 0xFF	; 255
    6c0e:	8f ef       	ldi	r24, 0xFF	; 255
    6c10:	9f ef       	ldi	r25, 0xFF	; 255
    6c12:	cd b7       	in	r28, 0x3d	; 61
    6c14:	de b7       	in	r29, 0x3e	; 62
    6c16:	e0 e1       	ldi	r30, 0x10	; 16
    6c18:	0c 94 df e8 	jmp	0x1d1be	; 0x1d1be <__epilogue_restores__+0x4>

00006c1c <gmtime_r>:
    6c1c:	0f 93       	push	r16
    6c1e:	1f 93       	push	r17
    6c20:	cf 93       	push	r28
    6c22:	df 93       	push	r29
    6c24:	eb 01       	movw	r28, r22
    6c26:	fc 01       	movw	r30, r24
    6c28:	60 81       	ld	r22, Z
    6c2a:	71 81       	ldd	r23, Z+1	; 0x01
    6c2c:	82 81       	ldd	r24, Z+2	; 0x02
    6c2e:	93 81       	ldd	r25, Z+3	; 0x03
    6c30:	8e 01       	movw	r16, r28
    6c32:	20 e0       	ldi	r18, 0x00	; 0
    6c34:	30 e0       	ldi	r19, 0x00	; 0
    6c36:	a9 01       	movw	r20, r18
    6c38:	13 df       	rcall	.-474    	; 0x6a60 <time_to_tm>
    6c3a:	ce 01       	movw	r24, r28
    6c3c:	df 91       	pop	r29
    6c3e:	cf 91       	pop	r28
    6c40:	1f 91       	pop	r17
    6c42:	0f 91       	pop	r16
    6c44:	08 95       	ret

00006c46 <gmtime>:
    6c46:	2e e5       	ldi	r18, 0x5E	; 94
    6c48:	37 e1       	ldi	r19, 0x17	; 23
    6c4a:	30 93 75 17 	sts	0x1775, r19	; 0x801775 <p.3628+0x1>
    6c4e:	20 93 74 17 	sts	0x1774, r18	; 0x801774 <p.3628>
    6c52:	b9 01       	movw	r22, r18
    6c54:	e3 df       	rcall	.-58     	; 0x6c1c <gmtime_r>
    6c56:	8e e5       	ldi	r24, 0x5E	; 94
    6c58:	97 e1       	ldi	r25, 0x17	; 23
    6c5a:	08 95       	ret

00006c5c <gettimezone>:
    6c5c:	eb e1       	ldi	r30, 0x1B	; 27
    6c5e:	fa e1       	ldi	r31, 0x1A	; 26
    6c60:	20 81       	ld	r18, Z
    6c62:	31 81       	ldd	r19, Z+1	; 0x01
    6c64:	dc 01       	movw	r26, r24
    6c66:	11 96       	adiw	r26, 0x01	; 1
    6c68:	3c 93       	st	X, r19
    6c6a:	2e 93       	st	-X, r18
    6c6c:	22 81       	ldd	r18, Z+2	; 0x02
    6c6e:	33 81       	ldd	r19, Z+3	; 0x03
    6c70:	13 96       	adiw	r26, 0x03	; 3
    6c72:	3c 93       	st	X, r19
    6c74:	2e 93       	st	-X, r18
    6c76:	12 97       	sbiw	r26, 0x02	; 2
    6c78:	80 e0       	ldi	r24, 0x00	; 0
    6c7a:	90 e0       	ldi	r25, 0x00	; 0
    6c7c:	08 95       	ret

00006c7e <settimezone>:
    6c7e:	dc 01       	movw	r26, r24
    6c80:	2d 91       	ld	r18, X+
    6c82:	3c 91       	ld	r19, X
    6c84:	11 97       	sbiw	r26, 0x01	; 1
    6c86:	eb e1       	ldi	r30, 0x1B	; 27
    6c88:	fa e1       	ldi	r31, 0x1A	; 26
    6c8a:	31 83       	std	Z+1, r19	; 0x01
    6c8c:	20 83       	st	Z, r18
    6c8e:	12 96       	adiw	r26, 0x02	; 2
    6c90:	8d 91       	ld	r24, X+
    6c92:	9c 91       	ld	r25, X
    6c94:	13 97       	sbiw	r26, 0x03	; 3
    6c96:	93 83       	std	Z+3, r25	; 0x03
    6c98:	82 83       	std	Z+2, r24	; 0x02
    6c9a:	80 e0       	ldi	r24, 0x00	; 0
    6c9c:	90 e0       	ldi	r25, 0x00	; 0
    6c9e:	08 95       	ret

00006ca0 <gettimeofday>:
    6ca0:	a8 e0       	ldi	r26, 0x08	; 8
    6ca2:	b0 e0       	ldi	r27, 0x00	; 0
    6ca4:	e6 e5       	ldi	r30, 0x56	; 86
    6ca6:	f6 e3       	ldi	r31, 0x36	; 54
    6ca8:	0c 94 cd e8 	jmp	0x1d19a	; 0x1d19a <__prologue_saves__+0x18>
    6cac:	8c 01       	movw	r16, r24
    6cae:	7b 01       	movw	r14, r22
    6cb0:	be 01       	movw	r22, r28
    6cb2:	6f 5f       	subi	r22, 0xFF	; 255
    6cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    6cb6:	80 e0       	ldi	r24, 0x00	; 0
    6cb8:	90 e0       	ldi	r25, 0x00	; 0
    6cba:	f5 db       	rcall	.-2070   	; 0x64a6 <clock_gettime>
    6cbc:	89 81       	ldd	r24, Y+1	; 0x01
    6cbe:	9a 81       	ldd	r25, Y+2	; 0x02
    6cc0:	ab 81       	ldd	r26, Y+3	; 0x03
    6cc2:	bc 81       	ldd	r27, Y+4	; 0x04
    6cc4:	f8 01       	movw	r30, r16
    6cc6:	80 83       	st	Z, r24
    6cc8:	91 83       	std	Z+1, r25	; 0x01
    6cca:	a2 83       	std	Z+2, r26	; 0x02
    6ccc:	b3 83       	std	Z+3, r27	; 0x03
    6cce:	6d 81       	ldd	r22, Y+5	; 0x05
    6cd0:	7e 81       	ldd	r23, Y+6	; 0x06
    6cd2:	8f 81       	ldd	r24, Y+7	; 0x07
    6cd4:	98 85       	ldd	r25, Y+8	; 0x08
    6cd6:	28 ee       	ldi	r18, 0xE8	; 232
    6cd8:	33 e0       	ldi	r19, 0x03	; 3
    6cda:	40 e0       	ldi	r20, 0x00	; 0
    6cdc:	50 e0       	ldi	r21, 0x00	; 0
    6cde:	0e 94 76 e8 	call	0x1d0ec	; 0x1d0ec <__divmodsi4>
    6ce2:	f8 01       	movw	r30, r16
    6ce4:	24 83       	std	Z+4, r18	; 0x04
    6ce6:	35 83       	std	Z+5, r19	; 0x05
    6ce8:	46 83       	std	Z+6, r20	; 0x06
    6cea:	57 83       	std	Z+7, r21	; 0x07
    6cec:	c7 01       	movw	r24, r14
    6cee:	b6 df       	rcall	.-148    	; 0x6c5c <gettimezone>
    6cf0:	80 e0       	ldi	r24, 0x00	; 0
    6cf2:	90 e0       	ldi	r25, 0x00	; 0
    6cf4:	28 96       	adiw	r28, 0x08	; 8
    6cf6:	e6 e0       	ldi	r30, 0x06	; 6
    6cf8:	0c 94 e9 e8 	jmp	0x1d1d2	; 0x1d1d2 <__epilogue_restores__+0x18>

00006cfc <time>:
    6cfc:	cf 93       	push	r28
    6cfe:	df 93       	push	r29
    6d00:	ec 01       	movw	r28, r24
    6d02:	60 e4       	ldi	r22, 0x40	; 64
    6d04:	77 e1       	ldi	r23, 0x17	; 23
    6d06:	80 e0       	ldi	r24, 0x00	; 0
    6d08:	90 e0       	ldi	r25, 0x00	; 0
    6d0a:	cd db       	rcall	.-2150   	; 0x64a6 <clock_gettime>
    6d0c:	20 97       	sbiw	r28, 0x00	; 0
    6d0e:	61 f0       	breq	.+24     	; 0x6d28 <time+0x2c>
    6d10:	80 91 40 17 	lds	r24, 0x1740	; 0x801740 <ts.3706>
    6d14:	90 91 41 17 	lds	r25, 0x1741	; 0x801741 <ts.3706+0x1>
    6d18:	a0 91 42 17 	lds	r26, 0x1742	; 0x801742 <ts.3706+0x2>
    6d1c:	b0 91 43 17 	lds	r27, 0x1743	; 0x801743 <ts.3706+0x3>
    6d20:	88 83       	st	Y, r24
    6d22:	99 83       	std	Y+1, r25	; 0x01
    6d24:	aa 83       	std	Y+2, r26	; 0x02
    6d26:	bb 83       	std	Y+3, r27	; 0x03
    6d28:	60 91 40 17 	lds	r22, 0x1740	; 0x801740 <ts.3706>
    6d2c:	70 91 41 17 	lds	r23, 0x1741	; 0x801741 <ts.3706+0x1>
    6d30:	80 91 42 17 	lds	r24, 0x1742	; 0x801742 <ts.3706+0x2>
    6d34:	90 91 43 17 	lds	r25, 0x1743	; 0x801743 <ts.3706+0x3>
    6d38:	df 91       	pop	r29
    6d3a:	cf 91       	pop	r28
    6d3c:	08 95       	ret

00006d3e <is_dst>:
    6d3e:	cf 92       	push	r12
    6d40:	df 92       	push	r13
    6d42:	ef 92       	push	r14
    6d44:	ff 92       	push	r15
    6d46:	6b 01       	movw	r12, r22
    6d48:	7c 01       	movw	r14, r24
    6d4a:	ff d3       	rcall	.+2046   	; 0x754a <set_dst>
    6d4c:	80 91 1f 1a 	lds	r24, 0x1A1F	; 0x801a1f <dst>
    6d50:	90 91 20 1a 	lds	r25, 0x1A20	; 0x801a20 <dst+0x1>
    6d54:	a0 91 21 1a 	lds	r26, 0x1A21	; 0x801a21 <dst+0x2>
    6d58:	b0 91 22 1a 	lds	r27, 0x1A22	; 0x801a22 <dst+0x3>
    6d5c:	c8 16       	cp	r12, r24
    6d5e:	d9 06       	cpc	r13, r25
    6d60:	ea 06       	cpc	r14, r26
    6d62:	fb 06       	cpc	r15, r27
    6d64:	88 f0       	brcs	.+34     	; 0x6d88 <is_dst+0x4a>
    6d66:	81 e0       	ldi	r24, 0x01	; 1
    6d68:	90 e0       	ldi	r25, 0x00	; 0
    6d6a:	40 91 23 1a 	lds	r20, 0x1A23	; 0x801a23 <dst+0x4>
    6d6e:	50 91 24 1a 	lds	r21, 0x1A24	; 0x801a24 <dst+0x5>
    6d72:	60 91 25 1a 	lds	r22, 0x1A25	; 0x801a25 <dst+0x6>
    6d76:	70 91 26 1a 	lds	r23, 0x1A26	; 0x801a26 <dst+0x7>
    6d7a:	4c 15       	cp	r20, r12
    6d7c:	5d 05       	cpc	r21, r13
    6d7e:	6e 05       	cpc	r22, r14
    6d80:	7f 05       	cpc	r23, r15
    6d82:	20 f4       	brcc	.+8      	; 0x6d8c <is_dst+0x4e>
    6d84:	80 e0       	ldi	r24, 0x00	; 0
    6d86:	02 c0       	rjmp	.+4      	; 0x6d8c <is_dst+0x4e>
    6d88:	80 e0       	ldi	r24, 0x00	; 0
    6d8a:	90 e0       	ldi	r25, 0x00	; 0
    6d8c:	ff 90       	pop	r15
    6d8e:	ef 90       	pop	r14
    6d90:	df 90       	pop	r13
    6d92:	cf 90       	pop	r12
    6d94:	08 95       	ret

00006d96 <localtime_r>:
    6d96:	4f 92       	push	r4
    6d98:	5f 92       	push	r5
    6d9a:	6f 92       	push	r6
    6d9c:	7f 92       	push	r7
    6d9e:	af 92       	push	r10
    6da0:	bf 92       	push	r11
    6da2:	cf 92       	push	r12
    6da4:	df 92       	push	r13
    6da6:	ef 92       	push	r14
    6da8:	ff 92       	push	r15
    6daa:	0f 93       	push	r16
    6dac:	1f 93       	push	r17
    6dae:	cf 93       	push	r28
    6db0:	df 93       	push	r29
    6db2:	00 d0       	rcall	.+0      	; 0x6db4 <localtime_r+0x1e>
    6db4:	00 d0       	rcall	.+0      	; 0x6db6 <localtime_r+0x20>
    6db6:	cd b7       	in	r28, 0x3d	; 61
    6db8:	de b7       	in	r29, 0x3e	; 62
    6dba:	5b 01       	movw	r10, r22
    6dbc:	fc 01       	movw	r30, r24
    6dbe:	40 80       	ld	r4, Z
    6dc0:	51 80       	ldd	r5, Z+1	; 0x01
    6dc2:	62 80       	ldd	r6, Z+2	; 0x02
    6dc4:	73 80       	ldd	r7, Z+3	; 0x03
    6dc6:	ce 01       	movw	r24, r28
    6dc8:	01 96       	adiw	r24, 0x01	; 1
    6dca:	48 df       	rcall	.-368    	; 0x6c5c <gettimezone>
    6dcc:	a9 81       	ldd	r26, Y+1	; 0x01
    6dce:	ba 81       	ldd	r27, Y+2	; 0x02
    6dd0:	2c e3       	ldi	r18, 0x3C	; 60
    6dd2:	30 e0       	ldi	r19, 0x00	; 0
    6dd4:	0e 94 9b e8 	call	0x1d136	; 0x1d136 <__usmulhisi3>
    6dd8:	6b 01       	movw	r12, r22
    6dda:	7c 01       	movw	r14, r24
    6ddc:	c3 01       	movw	r24, r6
    6dde:	b2 01       	movw	r22, r4
    6de0:	6c 19       	sub	r22, r12
    6de2:	7d 09       	sbc	r23, r13
    6de4:	8e 09       	sbc	r24, r14
    6de6:	9f 09       	sbc	r25, r15
    6de8:	aa df       	rcall	.-172    	; 0x6d3e <is_dst>
    6dea:	89 2b       	or	r24, r25
    6dec:	31 f0       	breq	.+12     	; 0x6dfa <localtime_r+0x64>
    6dee:	f0 e1       	ldi	r31, 0x10	; 16
    6df0:	cf 1a       	sub	r12, r31
    6df2:	fe e0       	ldi	r31, 0x0E	; 14
    6df4:	df 0a       	sbc	r13, r31
    6df6:	e1 08       	sbc	r14, r1
    6df8:	f1 08       	sbc	r15, r1
    6dfa:	85 01       	movw	r16, r10
    6dfc:	a7 01       	movw	r20, r14
    6dfe:	96 01       	movw	r18, r12
    6e00:	c3 01       	movw	r24, r6
    6e02:	b2 01       	movw	r22, r4
    6e04:	2d de       	rcall	.-934    	; 0x6a60 <time_to_tm>
    6e06:	c5 01       	movw	r24, r10
    6e08:	0f 90       	pop	r0
    6e0a:	0f 90       	pop	r0
    6e0c:	0f 90       	pop	r0
    6e0e:	0f 90       	pop	r0
    6e10:	df 91       	pop	r29
    6e12:	cf 91       	pop	r28
    6e14:	1f 91       	pop	r17
    6e16:	0f 91       	pop	r16
    6e18:	ff 90       	pop	r15
    6e1a:	ef 90       	pop	r14
    6e1c:	df 90       	pop	r13
    6e1e:	cf 90       	pop	r12
    6e20:	bf 90       	pop	r11
    6e22:	af 90       	pop	r10
    6e24:	7f 90       	pop	r7
    6e26:	6f 90       	pop	r6
    6e28:	5f 90       	pop	r5
    6e2a:	4f 90       	pop	r4
    6e2c:	08 95       	ret

00006e2e <localtime>:
    6e2e:	68 e4       	ldi	r22, 0x48	; 72
    6e30:	77 e1       	ldi	r23, 0x17	; 23
    6e32:	b1 cf       	rjmp	.-158    	; 0x6d96 <localtime_r>
    6e34:	08 95       	ret

00006e36 <normalize>:
    6e36:	aa e0       	ldi	r26, 0x0A	; 10
    6e38:	b0 e0       	ldi	r27, 0x00	; 0
    6e3a:	e1 e2       	ldi	r30, 0x21	; 33
    6e3c:	f7 e3       	ldi	r31, 0x37	; 55
    6e3e:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__prologue_saves__>
    6e42:	7c 01       	movw	r14, r24
    6e44:	7a 87       	std	Y+10, r23	; 0x0a
    6e46:	69 87       	std	Y+9, r22	; 0x09
    6e48:	f7 01       	movw	r30, r14
    6e4a:	80 81       	ld	r24, Z
    6e4c:	91 81       	ldd	r25, Z+1	; 0x01
    6e4e:	8c 33       	cpi	r24, 0x3C	; 60
    6e50:	91 05       	cpc	r25, r1
    6e52:	5c f0       	brlt	.+22     	; 0x6e6a <normalize+0x34>
    6e54:	f7 01       	movw	r30, r14
    6e56:	22 81       	ldd	r18, Z+2	; 0x02
    6e58:	33 81       	ldd	r19, Z+3	; 0x03
    6e5a:	2f 5f       	subi	r18, 0xFF	; 255
    6e5c:	3f 4f       	sbci	r19, 0xFF	; 255
    6e5e:	33 83       	std	Z+3, r19	; 0x03
    6e60:	22 83       	std	Z+2, r18	; 0x02
    6e62:	cc 97       	sbiw	r24, 0x3c	; 60
    6e64:	91 83       	std	Z+1, r25	; 0x01
    6e66:	80 83       	st	Z, r24
    6e68:	ef cf       	rjmp	.-34     	; 0x6e48 <normalize+0x12>
    6e6a:	f7 01       	movw	r30, r14
    6e6c:	01 90       	ld	r0, Z+
    6e6e:	f0 81       	ld	r31, Z
    6e70:	e0 2d       	mov	r30, r0
    6e72:	fe 83       	std	Y+6, r31	; 0x06
    6e74:	ed 83       	std	Y+5, r30	; 0x05
    6e76:	f7 ff       	sbrs	r31, 7
    6e78:	0d c0       	rjmp	.+26     	; 0x6e94 <normalize+0x5e>
    6e7a:	f7 01       	movw	r30, r14
    6e7c:	82 81       	ldd	r24, Z+2	; 0x02
    6e7e:	93 81       	ldd	r25, Z+3	; 0x03
    6e80:	01 97       	sbiw	r24, 0x01	; 1
    6e82:	93 83       	std	Z+3, r25	; 0x03
    6e84:	82 83       	std	Z+2, r24	; 0x02
    6e86:	6d 81       	ldd	r22, Y+5	; 0x05
    6e88:	7e 81       	ldd	r23, Y+6	; 0x06
    6e8a:	64 5c       	subi	r22, 0xC4	; 196
    6e8c:	7f 4f       	sbci	r23, 0xFF	; 255
    6e8e:	71 83       	std	Z+1, r23	; 0x01
    6e90:	60 83       	st	Z, r22
    6e92:	eb cf       	rjmp	.-42     	; 0x6e6a <normalize+0x34>
    6e94:	f7 01       	movw	r30, r14
    6e96:	82 81       	ldd	r24, Z+2	; 0x02
    6e98:	93 81       	ldd	r25, Z+3	; 0x03
    6e9a:	8c 33       	cpi	r24, 0x3C	; 60
    6e9c:	91 05       	cpc	r25, r1
    6e9e:	5c f0       	brlt	.+22     	; 0x6eb6 <normalize+0x80>
    6ea0:	f7 01       	movw	r30, r14
    6ea2:	24 81       	ldd	r18, Z+4	; 0x04
    6ea4:	35 81       	ldd	r19, Z+5	; 0x05
    6ea6:	2f 5f       	subi	r18, 0xFF	; 255
    6ea8:	3f 4f       	sbci	r19, 0xFF	; 255
    6eaa:	35 83       	std	Z+5, r19	; 0x05
    6eac:	24 83       	std	Z+4, r18	; 0x04
    6eae:	cc 97       	sbiw	r24, 0x3c	; 60
    6eb0:	93 83       	std	Z+3, r25	; 0x03
    6eb2:	82 83       	std	Z+2, r24	; 0x02
    6eb4:	ef cf       	rjmp	.-34     	; 0x6e94 <normalize+0x5e>
    6eb6:	f7 01       	movw	r30, r14
    6eb8:	22 80       	ldd	r2, Z+2	; 0x02
    6eba:	33 80       	ldd	r3, Z+3	; 0x03
    6ebc:	37 fe       	sbrs	r3, 7
    6ebe:	0d c0       	rjmp	.+26     	; 0x6eda <normalize+0xa4>
    6ec0:	f7 01       	movw	r30, r14
    6ec2:	84 81       	ldd	r24, Z+4	; 0x04
    6ec4:	95 81       	ldd	r25, Z+5	; 0x05
    6ec6:	01 97       	sbiw	r24, 0x01	; 1
    6ec8:	95 83       	std	Z+5, r25	; 0x05
    6eca:	84 83       	std	Z+4, r24	; 0x04
    6ecc:	fc e3       	ldi	r31, 0x3C	; 60
    6ece:	2f 0e       	add	r2, r31
    6ed0:	31 1c       	adc	r3, r1
    6ed2:	f7 01       	movw	r30, r14
    6ed4:	33 82       	std	Z+3, r3	; 0x03
    6ed6:	22 82       	std	Z+2, r2	; 0x02
    6ed8:	ee cf       	rjmp	.-36     	; 0x6eb6 <normalize+0x80>
    6eda:	f7 01       	movw	r30, r14
    6edc:	84 81       	ldd	r24, Z+4	; 0x04
    6ede:	95 81       	ldd	r25, Z+5	; 0x05
    6ee0:	88 31       	cpi	r24, 0x18	; 24
    6ee2:	91 05       	cpc	r25, r1
    6ee4:	5c f0       	brlt	.+22     	; 0x6efc <normalize+0xc6>
    6ee6:	f7 01       	movw	r30, r14
    6ee8:	26 81       	ldd	r18, Z+6	; 0x06
    6eea:	37 81       	ldd	r19, Z+7	; 0x07
    6eec:	2f 5f       	subi	r18, 0xFF	; 255
    6eee:	3f 4f       	sbci	r19, 0xFF	; 255
    6ef0:	37 83       	std	Z+7, r19	; 0x07
    6ef2:	26 83       	std	Z+6, r18	; 0x06
    6ef4:	48 97       	sbiw	r24, 0x18	; 24
    6ef6:	95 83       	std	Z+5, r25	; 0x05
    6ef8:	84 83       	std	Z+4, r24	; 0x04
    6efa:	ef cf       	rjmp	.-34     	; 0x6eda <normalize+0xa4>
    6efc:	f7 01       	movw	r30, r14
    6efe:	04 81       	ldd	r16, Z+4	; 0x04
    6f00:	15 81       	ldd	r17, Z+5	; 0x05
    6f02:	17 ff       	sbrs	r17, 7
    6f04:	0b c0       	rjmp	.+22     	; 0x6f1c <normalize+0xe6>
    6f06:	f7 01       	movw	r30, r14
    6f08:	86 81       	ldd	r24, Z+6	; 0x06
    6f0a:	97 81       	ldd	r25, Z+7	; 0x07
    6f0c:	01 97       	sbiw	r24, 0x01	; 1
    6f0e:	97 83       	std	Z+7, r25	; 0x07
    6f10:	86 83       	std	Z+6, r24	; 0x06
    6f12:	08 5e       	subi	r16, 0xE8	; 232
    6f14:	1f 4f       	sbci	r17, 0xFF	; 255
    6f16:	15 83       	std	Z+5, r17	; 0x05
    6f18:	04 83       	std	Z+4, r16	; 0x04
    6f1a:	f0 cf       	rjmp	.-32     	; 0x6efc <normalize+0xc6>
    6f1c:	f7 01       	movw	r30, r14
    6f1e:	80 85       	ldd	r24, Z+8	; 0x08
    6f20:	91 85       	ldd	r25, Z+9	; 0x09
    6f22:	8c 30       	cpi	r24, 0x0C	; 12
    6f24:	91 05       	cpc	r25, r1
    6f26:	5c f0       	brlt	.+22     	; 0x6f3e <normalize+0x108>
    6f28:	f7 01       	movw	r30, r14
    6f2a:	22 85       	ldd	r18, Z+10	; 0x0a
    6f2c:	33 85       	ldd	r19, Z+11	; 0x0b
    6f2e:	2f 5f       	subi	r18, 0xFF	; 255
    6f30:	3f 4f       	sbci	r19, 0xFF	; 255
    6f32:	33 87       	std	Z+11, r19	; 0x0b
    6f34:	22 87       	std	Z+10, r18	; 0x0a
    6f36:	0c 97       	sbiw	r24, 0x0c	; 12
    6f38:	91 87       	std	Z+9, r25	; 0x09
    6f3a:	80 87       	std	Z+8, r24	; 0x08
    6f3c:	ef cf       	rjmp	.-34     	; 0x6f1c <normalize+0xe6>
    6f3e:	f7 01       	movw	r30, r14
    6f40:	80 85       	ldd	r24, Z+8	; 0x08
    6f42:	91 85       	ldd	r25, Z+9	; 0x09
    6f44:	97 ff       	sbrs	r25, 7
    6f46:	2d c0       	rjmp	.+90     	; 0x6fa2 <normalize+0x16c>
    6f48:	f7 01       	movw	r30, r14
    6f4a:	22 85       	ldd	r18, Z+10	; 0x0a
    6f4c:	33 85       	ldd	r19, Z+11	; 0x0b
    6f4e:	21 50       	subi	r18, 0x01	; 1
    6f50:	31 09       	sbc	r19, r1
    6f52:	33 87       	std	Z+11, r19	; 0x0b
    6f54:	22 87       	std	Z+10, r18	; 0x0a
    6f56:	0c 96       	adiw	r24, 0x0c	; 12
    6f58:	91 87       	std	Z+9, r25	; 0x09
    6f5a:	80 87       	std	Z+8, r24	; 0x08
    6f5c:	f0 cf       	rjmp	.-32     	; 0x6f3e <normalize+0x108>
    6f5e:	f7 01       	movw	r30, r14
    6f60:	c6 80       	ldd	r12, Z+6	; 0x06
    6f62:	d7 80       	ldd	r13, Z+7	; 0x07
    6f64:	a0 84       	ldd	r10, Z+8	; 0x08
    6f66:	b1 84       	ldd	r11, Z+9	; 0x09
    6f68:	b4 01       	movw	r22, r8
    6f6a:	c5 01       	movw	r24, r10
    6f6c:	58 dd       	rcall	.-1360   	; 0x6a1e <Days_Per_Month>
    6f6e:	8c 15       	cp	r24, r12
    6f70:	9d 05       	cpc	r25, r13
    6f72:	84 f5       	brge	.+96     	; 0x6fd4 <normalize+0x19e>
    6f74:	c8 1a       	sub	r12, r24
    6f76:	d9 0a       	sbc	r13, r25
    6f78:	f7 01       	movw	r30, r14
    6f7a:	d7 82       	std	Z+7, r13	; 0x07
    6f7c:	c6 82       	std	Z+6, r12	; 0x06
    6f7e:	c5 01       	movw	r24, r10
    6f80:	01 96       	adiw	r24, 0x01	; 1
    6f82:	91 87       	std	Z+9, r25	; 0x09
    6f84:	80 87       	std	Z+8, r24	; 0x08
    6f86:	0c 97       	sbiw	r24, 0x0c	; 12
    6f88:	54 f3       	brlt	.-44     	; 0x6f5e <normalize+0x128>
    6f8a:	fb e0       	ldi	r31, 0x0B	; 11
    6f8c:	af 1a       	sub	r10, r31
    6f8e:	b1 08       	sbc	r11, r1
    6f90:	f7 01       	movw	r30, r14
    6f92:	b1 86       	std	Z+9, r11	; 0x09
    6f94:	a0 86       	std	Z+8, r10	; 0x08
    6f96:	ff ef       	ldi	r31, 0xFF	; 255
    6f98:	8f 1a       	sub	r8, r31
    6f9a:	9f 0a       	sbc	r9, r31
    6f9c:	f7 01       	movw	r30, r14
    6f9e:	93 86       	std	Z+11, r9	; 0x0b
    6fa0:	82 86       	std	Z+10, r8	; 0x0a
    6fa2:	f7 01       	movw	r30, r14
    6fa4:	82 84       	ldd	r8, Z+10	; 0x0a
    6fa6:	93 84       	ldd	r9, Z+11	; 0x0b
    6fa8:	da cf       	rjmp	.-76     	; 0x6f5e <normalize+0x128>
    6faa:	f7 01       	movw	r30, r14
    6fac:	80 85       	ldd	r24, Z+8	; 0x08
    6fae:	91 85       	ldd	r25, Z+9	; 0x09
    6fb0:	9c 01       	movw	r18, r24
    6fb2:	21 50       	subi	r18, 0x01	; 1
    6fb4:	31 09       	sbc	r19, r1
    6fb6:	37 fd       	sbrc	r19, 7
    6fb8:	16 c0       	rjmp	.+44     	; 0x6fe6 <normalize+0x1b0>
    6fba:	31 87       	std	Z+9, r19	; 0x09
    6fbc:	20 87       	std	Z+8, r18	; 0x08
    6fbe:	f7 01       	movw	r30, r14
    6fc0:	62 85       	ldd	r22, Z+10	; 0x0a
    6fc2:	73 85       	ldd	r23, Z+11	; 0x0b
    6fc4:	80 85       	ldd	r24, Z+8	; 0x08
    6fc6:	91 85       	ldd	r25, Z+9	; 0x09
    6fc8:	2a dd       	rcall	.-1452   	; 0x6a1e <Days_Per_Month>
    6fca:	88 0d       	add	r24, r8
    6fcc:	99 1d       	adc	r25, r9
    6fce:	f7 01       	movw	r30, r14
    6fd0:	97 83       	std	Z+7, r25	; 0x07
    6fd2:	86 83       	std	Z+6, r24	; 0x06
    6fd4:	f7 01       	movw	r30, r14
    6fd6:	86 80       	ldd	r8, Z+6	; 0x06
    6fd8:	97 80       	ldd	r9, Z+7	; 0x07
    6fda:	a2 84       	ldd	r10, Z+10	; 0x0a
    6fdc:	b3 84       	ldd	r11, Z+11	; 0x0b
    6fde:	18 14       	cp	r1, r8
    6fe0:	19 04       	cpc	r1, r9
    6fe2:	1c f7       	brge	.-58     	; 0x6faa <normalize+0x174>
    6fe4:	0b c0       	rjmp	.+22     	; 0x6ffc <normalize+0x1c6>
    6fe6:	0b 96       	adiw	r24, 0x0b	; 11
    6fe8:	f7 01       	movw	r30, r14
    6fea:	91 87       	std	Z+9, r25	; 0x09
    6fec:	80 87       	std	Z+8, r24	; 0x08
    6fee:	f1 e0       	ldi	r31, 0x01	; 1
    6ff0:	af 1a       	sub	r10, r31
    6ff2:	b1 08       	sbc	r11, r1
    6ff4:	f7 01       	movw	r30, r14
    6ff6:	b3 86       	std	Z+11, r11	; 0x0b
    6ff8:	a2 86       	std	Z+10, r10	; 0x0a
    6ffa:	e1 cf       	rjmp	.-62     	; 0x6fbe <normalize+0x188>
    6ffc:	a5 01       	movw	r20, r10
    6ffe:	44 59       	subi	r20, 0x94	; 148
    7000:	58 4f       	sbci	r21, 0xF8	; 248
    7002:	58 87       	std	Y+8, r21	; 0x08
    7004:	4f 83       	std	Y+7, r20	; 0x07
    7006:	35 01       	movw	r6, r10
    7008:	56 e4       	ldi	r21, 0x46	; 70
    700a:	65 1a       	sub	r6, r21
    700c:	71 08       	sbc	r7, r1
    700e:	89 e8       	ldi	r24, 0x89	; 137
    7010:	68 16       	cp	r6, r24
    7012:	71 04       	cpc	r7, r1
    7014:	08 f0       	brcs	.+2      	; 0x7018 <normalize+0x1e2>
    7016:	9b c0       	rjmp	.+310    	; 0x714e <normalize+0x318>
    7018:	c0 84       	ldd	r12, Z+8	; 0x08
    701a:	d1 84       	ldd	r13, Z+9	; 0x09
    701c:	9c e0       	ldi	r25, 0x0C	; 12
    701e:	c9 16       	cp	r12, r25
    7020:	d1 04       	cpc	r13, r1
    7022:	08 f0       	brcs	.+2      	; 0x7026 <normalize+0x1f0>
    7024:	94 c0       	rjmp	.+296    	; 0x714e <normalize+0x318>
    7026:	24 01       	movw	r4, r8
    7028:	e1 e0       	ldi	r30, 0x01	; 1
    702a:	4e 1a       	sub	r4, r30
    702c:	51 08       	sbc	r5, r1
    702e:	6f 81       	ldd	r22, Y+7	; 0x07
    7030:	78 85       	ldd	r23, Y+8	; 0x08
    7032:	c6 01       	movw	r24, r12
    7034:	f4 dc       	rcall	.-1560   	; 0x6a1e <Days_Per_Month>
    7036:	48 16       	cp	r4, r24
    7038:	59 06       	cpc	r5, r25
    703a:	0c f0       	brlt	.+2      	; 0x703e <normalize+0x208>
    703c:	88 c0       	rjmp	.+272    	; 0x714e <normalize+0x318>
    703e:	08 31       	cpi	r16, 0x18	; 24
    7040:	11 05       	cpc	r17, r1
    7042:	0c f0       	brlt	.+2      	; 0x7046 <normalize+0x210>
    7044:	84 c0       	rjmp	.+264    	; 0x714e <normalize+0x318>
    7046:	fc e3       	ldi	r31, 0x3C	; 60
    7048:	2f 16       	cp	r2, r31
    704a:	31 04       	cpc	r3, r1
    704c:	0c f0       	brlt	.+2      	; 0x7050 <normalize+0x21a>
    704e:	7f c0       	rjmp	.+254    	; 0x714e <normalize+0x318>
    7050:	4d 81       	ldd	r20, Y+5	; 0x05
    7052:	5e 81       	ldd	r21, Y+6	; 0x06
    7054:	4c 33       	cpi	r20, 0x3C	; 60
    7056:	51 05       	cpc	r21, r1
    7058:	0c f0       	brlt	.+2      	; 0x705c <normalize+0x226>
    705a:	79 c0       	rjmp	.+242    	; 0x714e <normalize+0x318>
    705c:	2d e6       	ldi	r18, 0x6D	; 109
    705e:	31 e0       	ldi	r19, 0x01	; 1
    7060:	d3 01       	movw	r26, r6
    7062:	0e 94 9b e8 	call	0x1d136	; 0x1d136 <__usmulhisi3>
    7066:	f6 01       	movw	r30, r12
    7068:	ee 0f       	add	r30, r30
    706a:	ff 1f       	adc	r31, r31
    706c:	ea 59       	subi	r30, 0x9A	; 154
    706e:	fd 4f       	sbci	r31, 0xFD	; 253
    7070:	20 81       	ld	r18, Z
    7072:	31 81       	ldd	r19, Z+1	; 0x01
    7074:	dc 01       	movw	r26, r24
    7076:	cb 01       	movw	r24, r22
    7078:	82 0f       	add	r24, r18
    707a:	93 1f       	adc	r25, r19
    707c:	a1 1d       	adc	r26, r1
    707e:	b1 1d       	adc	r27, r1
    7080:	05 2c       	mov	r0, r5
    7082:	00 0c       	add	r0, r0
    7084:	66 08       	sbc	r6, r6
    7086:	77 08       	sbc	r7, r7
    7088:	48 0e       	add	r4, r24
    708a:	59 1e       	adc	r5, r25
    708c:	6a 1e       	adc	r6, r26
    708e:	7b 1e       	adc	r7, r27
    7090:	1a 14       	cp	r1, r10
    7092:	1b 04       	cpc	r1, r11
    7094:	1c f4       	brge	.+6      	; 0x709c <normalize+0x266>
    7096:	51 e0       	ldi	r21, 0x01	; 1
    7098:	a5 1a       	sub	r10, r21
    709a:	b1 08       	sbc	r11, r1
    709c:	45 01       	movw	r8, r10
    709e:	95 94       	asr	r9
    70a0:	87 94       	ror	r8
    70a2:	95 94       	asr	r9
    70a4:	87 94       	ror	r8
    70a6:	88 ec       	ldi	r24, 0xC8	; 200
    70a8:	a8 16       	cp	r10, r24
    70aa:	b1 04       	cpc	r11, r1
    70ac:	1c f0       	brlt	.+6      	; 0x70b4 <normalize+0x27e>
    70ae:	91 e0       	ldi	r25, 0x01	; 1
    70b0:	89 1a       	sub	r8, r25
    70b2:	91 08       	sbc	r9, r1
    70b4:	09 2c       	mov	r0, r9
    70b6:	00 0c       	add	r0, r0
    70b8:	aa 08       	sbc	r10, r10
    70ba:	bb 08       	sbc	r11, r11
    70bc:	84 0c       	add	r8, r4
    70be:	95 1c       	adc	r9, r5
    70c0:	a6 1c       	adc	r10, r6
    70c2:	b7 1c       	adc	r11, r7
    70c4:	24 01       	movw	r4, r8
    70c6:	35 01       	movw	r6, r10
    70c8:	e1 e1       	ldi	r30, 0x11	; 17
    70ca:	4e 1a       	sub	r4, r30
    70cc:	51 08       	sbc	r5, r1
    70ce:	61 08       	sbc	r6, r1
    70d0:	71 08       	sbc	r7, r1
    70d2:	f2 e0       	ldi	r31, 0x02	; 2
    70d4:	cf 16       	cp	r12, r31
    70d6:	d1 04       	cpc	r13, r1
    70d8:	64 f0       	brlt	.+24     	; 0x70f2 <normalize+0x2bc>
    70da:	8f 81       	ldd	r24, Y+7	; 0x07
    70dc:	98 85       	ldd	r25, Y+8	; 0x08
    70de:	7a dc       	rcall	.-1804   	; 0x69d4 <IS_Leap>
    70e0:	89 2b       	or	r24, r25
    70e2:	39 f0       	breq	.+14     	; 0x70f2 <normalize+0x2bc>
    70e4:	24 01       	movw	r4, r8
    70e6:	35 01       	movw	r6, r10
    70e8:	40 e1       	ldi	r20, 0x10	; 16
    70ea:	44 1a       	sub	r4, r20
    70ec:	51 08       	sbc	r5, r1
    70ee:	61 08       	sbc	r6, r1
    70f0:	71 08       	sbc	r7, r1
    70f2:	a8 e1       	ldi	r26, 0x18	; 24
    70f4:	b0 e0       	ldi	r27, 0x00	; 0
    70f6:	a3 01       	movw	r20, r6
    70f8:	92 01       	movw	r18, r4
    70fa:	0e 94 a1 e8 	call	0x1d142	; 0x1d142 <__muluhisi3>
    70fe:	01 2e       	mov	r0, r17
    7100:	00 0c       	add	r0, r0
    7102:	22 0b       	sbc	r18, r18
    7104:	33 0b       	sbc	r19, r19
    7106:	a9 01       	movw	r20, r18
    7108:	98 01       	movw	r18, r16
    710a:	26 0f       	add	r18, r22
    710c:	37 1f       	adc	r19, r23
    710e:	48 1f       	adc	r20, r24
    7110:	59 1f       	adc	r21, r25
    7112:	ac e3       	ldi	r26, 0x3C	; 60
    7114:	b0 e0       	ldi	r27, 0x00	; 0
    7116:	0e 94 a1 e8 	call	0x1d142	; 0x1d142 <__muluhisi3>
    711a:	81 01       	movw	r16, r2
    711c:	03 2c       	mov	r0, r3
    711e:	00 0c       	add	r0, r0
    7120:	22 0b       	sbc	r18, r18
    7122:	33 0b       	sbc	r19, r19
    7124:	a9 01       	movw	r20, r18
    7126:	98 01       	movw	r18, r16
    7128:	26 0f       	add	r18, r22
    712a:	37 1f       	adc	r19, r23
    712c:	48 1f       	adc	r20, r24
    712e:	59 1f       	adc	r21, r25
    7130:	0e 94 a1 e8 	call	0x1d142	; 0x1d142 <__muluhisi3>
    7134:	ed 81       	ldd	r30, Y+5	; 0x05
    7136:	fe 81       	ldd	r31, Y+6	; 0x06
    7138:	8f 01       	movw	r16, r30
    713a:	ff 0f       	add	r31, r31
    713c:	22 0b       	sbc	r18, r18
    713e:	33 0b       	sbc	r19, r19
    7140:	48 01       	movw	r8, r16
    7142:	59 01       	movw	r10, r18
    7144:	86 0e       	add	r8, r22
    7146:	97 1e       	adc	r9, r23
    7148:	a8 1e       	adc	r10, r24
    714a:	b9 1e       	adc	r11, r25
    714c:	04 c0       	rjmp	.+8      	; 0x7156 <normalize+0x320>
    714e:	88 24       	eor	r8, r8
    7150:	8a 94       	dec	r8
    7152:	98 2c       	mov	r9, r8
    7154:	54 01       	movw	r10, r8
    7156:	49 85       	ldd	r20, Y+9	; 0x09
    7158:	5a 85       	ldd	r21, Y+10	; 0x0a
    715a:	45 2b       	or	r20, r21
    715c:	e9 f0       	breq	.+58     	; 0x7198 <normalize+0x362>
    715e:	ce 01       	movw	r24, r28
    7160:	01 96       	adiw	r24, 0x01	; 1
    7162:	7c dd       	rcall	.-1288   	; 0x6c5c <gettimezone>
    7164:	a9 81       	ldd	r26, Y+1	; 0x01
    7166:	ba 81       	ldd	r27, Y+2	; 0x02
    7168:	2c e3       	ldi	r18, 0x3C	; 60
    716a:	30 e0       	ldi	r19, 0x00	; 0
    716c:	0e 94 9b e8 	call	0x1d136	; 0x1d136 <__usmulhisi3>
    7170:	2b 01       	movw	r4, r22
    7172:	3c 01       	movw	r6, r24
    7174:	c5 01       	movw	r24, r10
    7176:	b4 01       	movw	r22, r8
    7178:	e2 dd       	rcall	.-1084   	; 0x6d3e <is_dst>
    717a:	89 2b       	or	r24, r25
    717c:	51 f0       	breq	.+20     	; 0x7192 <normalize+0x35c>
    717e:	50 e1       	ldi	r21, 0x10	; 16
    7180:	45 1a       	sub	r4, r21
    7182:	5e e0       	ldi	r21, 0x0E	; 14
    7184:	55 0a       	sbc	r5, r21
    7186:	61 08       	sbc	r6, r1
    7188:	71 08       	sbc	r7, r1
    718a:	cc 24       	eor	r12, r12
    718c:	c3 94       	inc	r12
    718e:	d1 2c       	mov	r13, r1
    7190:	08 c0       	rjmp	.+16     	; 0x71a2 <normalize+0x36c>
    7192:	c1 2c       	mov	r12, r1
    7194:	d1 2c       	mov	r13, r1
    7196:	05 c0       	rjmp	.+10     	; 0x71a2 <normalize+0x36c>
    7198:	c1 2c       	mov	r12, r1
    719a:	d1 2c       	mov	r13, r1
    719c:	41 2c       	mov	r4, r1
    719e:	51 2c       	mov	r5, r1
    71a0:	32 01       	movw	r6, r4
    71a2:	87 01       	movw	r16, r14
    71a4:	a3 01       	movw	r20, r6
    71a6:	92 01       	movw	r18, r4
    71a8:	c5 01       	movw	r24, r10
    71aa:	b4 01       	movw	r22, r8
    71ac:	59 dc       	rcall	.-1870   	; 0x6a60 <time_to_tm>
    71ae:	c1 14       	cp	r12, r1
    71b0:	d1 04       	cpc	r13, r1
    71b2:	29 f0       	breq	.+10     	; 0x71be <normalize+0x388>
    71b4:	21 e0       	ldi	r18, 0x01	; 1
    71b6:	30 e0       	ldi	r19, 0x00	; 0
    71b8:	f7 01       	movw	r30, r14
    71ba:	31 8b       	std	Z+17, r19	; 0x11
    71bc:	20 8b       	std	Z+16, r18	; 0x10
    71be:	2a 96       	adiw	r28, 0x0a	; 10
    71c0:	e2 e1       	ldi	r30, 0x12	; 18
    71c2:	0c 94 dd e8 	jmp	0x1d1ba	; 0x1d1ba <__epilogue_restores__>

000071c6 <timegm>:
    71c6:	60 e0       	ldi	r22, 0x00	; 0
    71c8:	70 e0       	ldi	r23, 0x00	; 0
    71ca:	35 ce       	rjmp	.-918    	; 0x6e36 <normalize>
    71cc:	08 95       	ret

000071ce <setdate_r>:
    71ce:	cf 92       	push	r12
    71d0:	df 92       	push	r13
    71d2:	ef 92       	push	r14
    71d4:	ff 92       	push	r15
    71d6:	cf 93       	push	r28
    71d8:	df 93       	push	r29
    71da:	cd b7       	in	r28, 0x3d	; 61
    71dc:	de b7       	in	r29, 0x3e	; 62
    71de:	a0 97       	sbiw	r28, 0x20	; 32
    71e0:	0f b6       	in	r0, 0x3f	; 63
    71e2:	f8 94       	cli
    71e4:	de bf       	out	0x3e, r29	; 62
    71e6:	0f be       	out	0x3f, r0	; 63
    71e8:	cd bf       	out	0x3d, r28	; 61
    71ea:	98 a3       	std	Y+32, r25	; 0x20
    71ec:	8f 8f       	std	Y+31, r24	; 0x1f
    71ee:	1a 82       	std	Y+2, r1	; 0x02
    71f0:	19 82       	std	Y+1, r1	; 0x01
    71f2:	1c 82       	std	Y+4, r1	; 0x04
    71f4:	1b 82       	std	Y+3, r1	; 0x03
    71f6:	1e 82       	std	Y+6, r1	; 0x06
    71f8:	1d 82       	std	Y+5, r1	; 0x05
    71fa:	18 86       	std	Y+8, r1	; 0x08
    71fc:	1f 82       	std	Y+7, r1	; 0x07
    71fe:	1a 86       	std	Y+10, r1	; 0x0a
    7200:	19 86       	std	Y+9, r1	; 0x09
    7202:	1c 86       	std	Y+12, r1	; 0x0c
    7204:	1b 86       	std	Y+11, r1	; 0x0b
    7206:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7208:	98 a1       	ldd	r25, Y+32	; 0x20
    720a:	fc 01       	movw	r30, r24
    720c:	20 81       	ld	r18, Z
    720e:	20 32       	cpi	r18, 0x20	; 32
    7210:	21 f4       	brne	.+8      	; 0x721a <setdate_r+0x4c>
    7212:	01 96       	adiw	r24, 0x01	; 1
    7214:	98 a3       	std	Y+32, r25	; 0x20
    7216:	8f 8f       	std	Y+31, r24	; 0x1f
    7218:	f6 cf       	rjmp	.-20     	; 0x7206 <setdate_r+0x38>
    721a:	4a e0       	ldi	r20, 0x0A	; 10
    721c:	50 e0       	ldi	r21, 0x00	; 0
    721e:	be 01       	movw	r22, r28
    7220:	61 5e       	subi	r22, 0xE1	; 225
    7222:	7f 4f       	sbci	r23, 0xFF	; 255
    7224:	0e 94 fd 44 	call	0x89fa	; 0x89fa <strtol>
    7228:	7c 87       	std	Y+12, r23	; 0x0c
    722a:	6b 87       	std	Y+11, r22	; 0x0b
    722c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    722e:	98 a1       	ldd	r25, Y+32	; 0x20
    7230:	fc 01       	movw	r30, r24
    7232:	20 81       	ld	r18, Z
    7234:	20 32       	cpi	r18, 0x20	; 32
    7236:	21 f4       	brne	.+8      	; 0x7240 <setdate_r+0x72>
    7238:	01 96       	adiw	r24, 0x01	; 1
    723a:	98 a3       	std	Y+32, r25	; 0x20
    723c:	8f 8f       	std	Y+31, r24	; 0x1f
    723e:	f6 cf       	rjmp	.-20     	; 0x722c <setdate_r+0x5e>
    7240:	4a e0       	ldi	r20, 0x0A	; 10
    7242:	50 e0       	ldi	r21, 0x00	; 0
    7244:	be 01       	movw	r22, r28
    7246:	61 5e       	subi	r22, 0xE1	; 225
    7248:	7f 4f       	sbci	r23, 0xFF	; 255
    724a:	0e 94 fd 44 	call	0x89fa	; 0x89fa <strtol>
    724e:	7a 87       	std	Y+10, r23	; 0x0a
    7250:	69 87       	std	Y+9, r22	; 0x09
    7252:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7254:	98 a1       	ldd	r25, Y+32	; 0x20
    7256:	fc 01       	movw	r30, r24
    7258:	20 81       	ld	r18, Z
    725a:	20 32       	cpi	r18, 0x20	; 32
    725c:	21 f4       	brne	.+8      	; 0x7266 <setdate_r+0x98>
    725e:	01 96       	adiw	r24, 0x01	; 1
    7260:	98 a3       	std	Y+32, r25	; 0x20
    7262:	8f 8f       	std	Y+31, r24	; 0x1f
    7264:	f6 cf       	rjmp	.-20     	; 0x7252 <setdate_r+0x84>
    7266:	4a e0       	ldi	r20, 0x0A	; 10
    7268:	50 e0       	ldi	r21, 0x00	; 0
    726a:	be 01       	movw	r22, r28
    726c:	61 5e       	subi	r22, 0xE1	; 225
    726e:	7f 4f       	sbci	r23, 0xFF	; 255
    7270:	0e 94 fd 44 	call	0x89fa	; 0x89fa <strtol>
    7274:	78 87       	std	Y+8, r23	; 0x08
    7276:	6f 83       	std	Y+7, r22	; 0x07
    7278:	8f 8d       	ldd	r24, Y+31	; 0x1f
    727a:	98 a1       	ldd	r25, Y+32	; 0x20
    727c:	fc 01       	movw	r30, r24
    727e:	20 81       	ld	r18, Z
    7280:	20 32       	cpi	r18, 0x20	; 32
    7282:	21 f4       	brne	.+8      	; 0x728c <setdate_r+0xbe>
    7284:	01 96       	adiw	r24, 0x01	; 1
    7286:	98 a3       	std	Y+32, r25	; 0x20
    7288:	8f 8f       	std	Y+31, r24	; 0x1f
    728a:	f6 cf       	rjmp	.-20     	; 0x7278 <setdate_r+0xaa>
    728c:	4a e0       	ldi	r20, 0x0A	; 10
    728e:	50 e0       	ldi	r21, 0x00	; 0
    7290:	be 01       	movw	r22, r28
    7292:	61 5e       	subi	r22, 0xE1	; 225
    7294:	7f 4f       	sbci	r23, 0xFF	; 255
    7296:	0e 94 fd 44 	call	0x89fa	; 0x89fa <strtol>
    729a:	7e 83       	std	Y+6, r23	; 0x06
    729c:	6d 83       	std	Y+5, r22	; 0x05
    729e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    72a0:	f8 a1       	ldd	r31, Y+32	; 0x20
    72a2:	80 81       	ld	r24, Z
    72a4:	88 23       	and	r24, r24
    72a6:	39 f0       	breq	.+14     	; 0x72b6 <setdate_r+0xe8>
    72a8:	80 32       	cpi	r24, 0x20	; 32
    72aa:	11 f0       	breq	.+4      	; 0x72b0 <setdate_r+0xe2>
    72ac:	8a 33       	cpi	r24, 0x3A	; 58
    72ae:	19 f4       	brne	.+6      	; 0x72b6 <setdate_r+0xe8>
    72b0:	31 96       	adiw	r30, 0x01	; 1
    72b2:	f8 a3       	std	Y+32, r31	; 0x20
    72b4:	ef 8f       	std	Y+31, r30	; 0x1f
    72b6:	4a e0       	ldi	r20, 0x0A	; 10
    72b8:	50 e0       	ldi	r21, 0x00	; 0
    72ba:	be 01       	movw	r22, r28
    72bc:	61 5e       	subi	r22, 0xE1	; 225
    72be:	7f 4f       	sbci	r23, 0xFF	; 255
    72c0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    72c2:	98 a1       	ldd	r25, Y+32	; 0x20
    72c4:	0e 94 fd 44 	call	0x89fa	; 0x89fa <strtol>
    72c8:	7c 83       	std	Y+4, r23	; 0x04
    72ca:	6b 83       	std	Y+3, r22	; 0x03
    72cc:	ef 8d       	ldd	r30, Y+31	; 0x1f
    72ce:	f8 a1       	ldd	r31, Y+32	; 0x20
    72d0:	80 81       	ld	r24, Z
    72d2:	88 23       	and	r24, r24
    72d4:	39 f0       	breq	.+14     	; 0x72e4 <setdate_r+0x116>
    72d6:	80 32       	cpi	r24, 0x20	; 32
    72d8:	11 f0       	breq	.+4      	; 0x72de <setdate_r+0x110>
    72da:	8a 33       	cpi	r24, 0x3A	; 58
    72dc:	19 f4       	brne	.+6      	; 0x72e4 <setdate_r+0x116>
    72de:	31 96       	adiw	r30, 0x01	; 1
    72e0:	f8 a3       	std	Y+32, r31	; 0x20
    72e2:	ef 8f       	std	Y+31, r30	; 0x1f
    72e4:	4a e0       	ldi	r20, 0x0A	; 10
    72e6:	50 e0       	ldi	r21, 0x00	; 0
    72e8:	be 01       	movw	r22, r28
    72ea:	61 5e       	subi	r22, 0xE1	; 225
    72ec:	7f 4f       	sbci	r23, 0xFF	; 255
    72ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    72f0:	98 a1       	ldd	r25, Y+32	; 0x20
    72f2:	0e 94 fd 44 	call	0x89fa	; 0x89fa <strtol>
    72f6:	7a 83       	std	Y+2, r23	; 0x02
    72f8:	69 83       	std	Y+1, r22	; 0x01
    72fa:	29 85       	ldd	r18, Y+9	; 0x09
    72fc:	3a 85       	ldd	r19, Y+10	; 0x0a
    72fe:	21 50       	subi	r18, 0x01	; 1
    7300:	31 09       	sbc	r19, r1
    7302:	3a 87       	std	Y+10, r19	; 0x0a
    7304:	29 87       	std	Y+9, r18	; 0x09
    7306:	8b 85       	ldd	r24, Y+11	; 0x0b
    7308:	9c 85       	ldd	r25, Y+12	; 0x0c
    730a:	ac 01       	movw	r20, r24
    730c:	42 5b       	subi	r20, 0xB2	; 178
    730e:	57 40       	sbci	r21, 0x07	; 7
    7310:	45 34       	cpi	r20, 0x45	; 69
    7312:	51 05       	cpc	r21, r1
    7314:	28 f0       	brcs	.+10     	; 0x7320 <setdate_r+0x152>
    7316:	9f 93       	push	r25
    7318:	8f 93       	push	r24
    731a:	8c e6       	ldi	r24, 0x6C	; 108
    731c:	97 e0       	ldi	r25, 0x07	; 7
    731e:	2c c0       	rjmp	.+88     	; 0x7378 <setdate_r+0x1aa>
    7320:	8c 56       	subi	r24, 0x6C	; 108
    7322:	97 40       	sbci	r25, 0x07	; 7
    7324:	9c 87       	std	Y+12, r25	; 0x0c
    7326:	8b 87       	std	Y+11, r24	; 0x0b
    7328:	2c 30       	cpi	r18, 0x0C	; 12
    732a:	31 05       	cpc	r19, r1
    732c:	28 f0       	brcs	.+10     	; 0x7338 <setdate_r+0x16a>
    732e:	9f 93       	push	r25
    7330:	8f 93       	push	r24
    7332:	8b e5       	ldi	r24, 0x5B	; 91
    7334:	97 e0       	ldi	r25, 0x07	; 7
    7336:	20 c0       	rjmp	.+64     	; 0x7378 <setdate_r+0x1aa>
    7338:	8f 81       	ldd	r24, Y+7	; 0x07
    733a:	98 85       	ldd	r25, Y+8	; 0x08
    733c:	9c 01       	movw	r18, r24
    733e:	21 50       	subi	r18, 0x01	; 1
    7340:	31 09       	sbc	r19, r1
    7342:	2f 31       	cpi	r18, 0x1F	; 31
    7344:	31 05       	cpc	r19, r1
    7346:	28 f0       	brcs	.+10     	; 0x7352 <setdate_r+0x184>
    7348:	9f 93       	push	r25
    734a:	8f 93       	push	r24
    734c:	8a e4       	ldi	r24, 0x4A	; 74
    734e:	97 e0       	ldi	r25, 0x07	; 7
    7350:	13 c0       	rjmp	.+38     	; 0x7378 <setdate_r+0x1aa>
    7352:	8d 81       	ldd	r24, Y+5	; 0x05
    7354:	9e 81       	ldd	r25, Y+6	; 0x06
    7356:	88 31       	cpi	r24, 0x18	; 24
    7358:	91 05       	cpc	r25, r1
    735a:	28 f0       	brcs	.+10     	; 0x7366 <setdate_r+0x198>
    735c:	9f 93       	push	r25
    735e:	8f 93       	push	r24
    7360:	88 e3       	ldi	r24, 0x38	; 56
    7362:	97 e0       	ldi	r25, 0x07	; 7
    7364:	09 c0       	rjmp	.+18     	; 0x7378 <setdate_r+0x1aa>
    7366:	8b 81       	ldd	r24, Y+3	; 0x03
    7368:	9c 81       	ldd	r25, Y+4	; 0x04
    736a:	8c 33       	cpi	r24, 0x3C	; 60
    736c:	91 05       	cpc	r25, r1
    736e:	78 f0       	brcs	.+30     	; 0x738e <setdate_r+0x1c0>
    7370:	9f 93       	push	r25
    7372:	8f 93       	push	r24
    7374:	87 e2       	ldi	r24, 0x27	; 39
    7376:	97 e0       	ldi	r25, 0x07	; 7
    7378:	1f 92       	push	r1
    737a:	9f 93       	push	r25
    737c:	8f 93       	push	r24
    737e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    7382:	0f 90       	pop	r0
    7384:	0f 90       	pop	r0
    7386:	0f 90       	pop	r0
    7388:	0f 90       	pop	r0
    738a:	0f 90       	pop	r0
    738c:	25 c0       	rjmp	.+74     	; 0x73d8 <setdate_r+0x20a>
    738e:	ce 01       	movw	r24, r28
    7390:	01 96       	adiw	r24, 0x01	; 1
    7392:	19 df       	rcall	.-462    	; 0x71c6 <timegm>
    7394:	6b 01       	movw	r12, r22
    7396:	7c 01       	movw	r14, r24
    7398:	6f 8b       	std	Y+23, r22	; 0x17
    739a:	78 8f       	std	Y+24, r23	; 0x18
    739c:	89 8f       	std	Y+25, r24	; 0x19
    739e:	9a 8f       	std	Y+26, r25	; 0x1a
    73a0:	1b 8e       	std	Y+27, r1	; 0x1b
    73a2:	1c 8e       	std	Y+28, r1	; 0x1c
    73a4:	1d 8e       	std	Y+29, r1	; 0x1d
    73a6:	1e 8e       	std	Y+30, r1	; 0x1e
    73a8:	be 01       	movw	r22, r28
    73aa:	69 5e       	subi	r22, 0xE9	; 233
    73ac:	7f 4f       	sbci	r23, 0xFF	; 255
    73ae:	80 e0       	ldi	r24, 0x00	; 0
    73b0:	90 e0       	ldi	r25, 0x00	; 0
    73b2:	08 db       	rcall	.-2544   	; 0x69c4 <clock_settime>
    73b4:	b7 01       	movw	r22, r14
    73b6:	a6 01       	movw	r20, r12
    73b8:	81 e0       	ldi	r24, 0x01	; 1
    73ba:	90 e0       	ldi	r25, 0x00	; 0
    73bc:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <rtc_init>
    73c0:	81 11       	cpse	r24, r1
    73c2:	0d c0       	rjmp	.+26     	; 0x73de <setdate_r+0x210>
    73c4:	80 e1       	ldi	r24, 0x10	; 16
    73c6:	97 e0       	ldi	r25, 0x07	; 7
    73c8:	1f 92       	push	r1
    73ca:	9f 93       	push	r25
    73cc:	8f 93       	push	r24
    73ce:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    73d2:	0f 90       	pop	r0
    73d4:	0f 90       	pop	r0
    73d6:	0f 90       	pop	r0
    73d8:	8f ef       	ldi	r24, 0xFF	; 255
    73da:	9f ef       	ldi	r25, 0xFF	; 255
    73dc:	02 c0       	rjmp	.+4      	; 0x73e2 <setdate_r+0x214>
    73de:	80 e0       	ldi	r24, 0x00	; 0
    73e0:	90 e0       	ldi	r25, 0x00	; 0
    73e2:	a0 96       	adiw	r28, 0x20	; 32
    73e4:	0f b6       	in	r0, 0x3f	; 63
    73e6:	f8 94       	cli
    73e8:	de bf       	out	0x3e, r29	; 62
    73ea:	0f be       	out	0x3f, r0	; 63
    73ec:	cd bf       	out	0x3d, r28	; 61
    73ee:	df 91       	pop	r29
    73f0:	cf 91       	pop	r28
    73f2:	ff 90       	pop	r15
    73f4:	ef 90       	pop	r14
    73f6:	df 90       	pop	r13
    73f8:	cf 90       	pop	r12
    73fa:	08 95       	ret

000073fc <setdate>:
    73fc:	a8 e2       	ldi	r26, 0x28	; 40
    73fe:	b0 e0       	ldi	r27, 0x00	; 0
    7400:	e4 e0       	ldi	r30, 0x04	; 4
    7402:	fa e3       	ldi	r31, 0x3A	; 58
    7404:	0c 94 d1 e8 	jmp	0x1d1a2	; 0x1d1a2 <__prologue_saves__+0x20>
    7408:	8e e7       	ldi	r24, 0x7E	; 126
    740a:	97 e0       	ldi	r25, 0x07	; 7
    740c:	1f 92       	push	r1
    740e:	9f 93       	push	r25
    7410:	8f 93       	push	r24
    7412:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    7416:	40 91 70 1c 	lds	r20, 0x1C70	; 0x801c70 <__iob>
    741a:	50 91 71 1c 	lds	r21, 0x1C71	; 0x801c71 <__iob+0x1>
    741e:	67 e2       	ldi	r22, 0x27	; 39
    7420:	70 e0       	ldi	r23, 0x00	; 0
    7422:	ce 01       	movw	r24, r28
    7424:	01 96       	adiw	r24, 0x01	; 1
    7426:	0e 94 e2 78 	call	0xf1c4	; 0xf1c4 <fgets>
    742a:	ce 01       	movw	r24, r28
    742c:	01 96       	adiw	r24, 0x01	; 1
    742e:	cf de       	rcall	.-610    	; 0x71ce <setdate_r>
    7430:	0f 90       	pop	r0
    7432:	0f 90       	pop	r0
    7434:	0f 90       	pop	r0
    7436:	a8 96       	adiw	r28, 0x28	; 40
    7438:	e2 e0       	ldi	r30, 0x02	; 2
    743a:	0c 94 ed e8 	jmp	0x1d1da	; 0x1d1da <__epilogue_restores__+0x20>

0000743e <find_dst>:
    743e:	a8 e2       	ldi	r26, 0x28	; 40
    7440:	b0 e0       	ldi	r27, 0x00	; 0
    7442:	e5 e2       	ldi	r30, 0x25	; 37
    7444:	fa e3       	ldi	r31, 0x3A	; 58
    7446:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__prologue_saves__>
    744a:	3c 01       	movw	r6, r24
    744c:	1a 01       	movw	r2, r20
    744e:	2b 01       	movw	r4, r22
    7450:	49 01       	movw	r8, r18
    7452:	1c a3       	std	Y+36, r17	; 0x24
    7454:	0b a3       	std	Y+35, r16	; 0x23
    7456:	de a2       	std	Y+38, r13	; 0x26
    7458:	cd a2       	std	Y+37, r12	; 0x25
    745a:	b8 a6       	std	Y+40, r11	; 0x28
    745c:	af a2       	std	Y+39, r10	; 0x27
    745e:	be 01       	movw	r22, r28
    7460:	61 5e       	subi	r22, 0xE1	; 225
    7462:	7f 4f       	sbci	r23, 0xFF	; 255
    7464:	ce 01       	movw	r24, r28
    7466:	47 96       	adiw	r24, 0x17	; 23
    7468:	1b dc       	rcall	.-1994   	; 0x6ca0 <gettimeofday>
    746a:	af 8d       	ldd	r26, Y+31	; 0x1f
    746c:	b8 a1       	ldd	r27, Y+32	; 0x20
    746e:	2c e3       	ldi	r18, 0x3C	; 60
    7470:	30 e0       	ldi	r19, 0x00	; 0
    7472:	0e 94 9b e8 	call	0x1d136	; 0x1d136 <__usmulhisi3>
    7476:	5b 01       	movw	r10, r22
    7478:	6c 01       	movw	r12, r24
    747a:	61 14       	cp	r6, r1
    747c:	71 04       	cpc	r7, r1
    747e:	31 f0       	breq	.+12     	; 0x748c <find_dst+0x4e>
    7480:	20 e1       	ldi	r18, 0x10	; 16
    7482:	a2 1a       	sub	r10, r18
    7484:	2e e0       	ldi	r18, 0x0E	; 14
    7486:	b2 0a       	sbc	r11, r18
    7488:	c1 08       	sbc	r12, r1
    748a:	d1 08       	sbc	r13, r1
    748c:	81 14       	cp	r8, r1
    748e:	91 04       	cpc	r9, r1
    7490:	39 f0       	breq	.+14     	; 0x74a0 <find_dst+0x62>
    7492:	4c e6       	ldi	r20, 0x6C	; 108
    7494:	84 1a       	sub	r8, r20
    7496:	47 e0       	ldi	r20, 0x07	; 7
    7498:	94 0a       	sbc	r9, r20
    749a:	9c 86       	std	Y+12, r9	; 0x0c
    749c:	8b 86       	std	Y+11, r8	; 0x0b
    749e:	11 c0       	rjmp	.+34     	; 0x74c2 <find_dst+0x84>
    74a0:	21 14       	cp	r2, r1
    74a2:	31 04       	cpc	r3, r1
    74a4:	41 04       	cpc	r4, r1
    74a6:	51 04       	cpc	r5, r1
    74a8:	21 f4       	brne	.+8      	; 0x74b2 <find_dst+0x74>
    74aa:	2f 88       	ldd	r2, Y+23	; 0x17
    74ac:	38 8c       	ldd	r3, Y+24	; 0x18
    74ae:	49 8c       	ldd	r4, Y+25	; 0x19
    74b0:	5a 8c       	ldd	r5, Y+26	; 0x1a
    74b2:	8e 01       	movw	r16, r28
    74b4:	0f 5f       	subi	r16, 0xFF	; 255
    74b6:	1f 4f       	sbci	r17, 0xFF	; 255
    74b8:	a6 01       	movw	r20, r12
    74ba:	95 01       	movw	r18, r10
    74bc:	c2 01       	movw	r24, r4
    74be:	b1 01       	movw	r22, r2
    74c0:	cf da       	rcall	.-2658   	; 0x6a60 <time_to_tm>
    74c2:	8b a1       	ldd	r24, Y+35	; 0x23
    74c4:	9c a1       	ldd	r25, Y+36	; 0x24
    74c6:	01 97       	sbiw	r24, 0x01	; 1
    74c8:	9a 87       	std	Y+10, r25	; 0x0a
    74ca:	89 87       	std	Y+9, r24	; 0x09
    74cc:	81 e0       	ldi	r24, 0x01	; 1
    74ce:	90 e0       	ldi	r25, 0x00	; 0
    74d0:	98 87       	std	Y+8, r25	; 0x08
    74d2:	8f 83       	std	Y+7, r24	; 0x07
    74d4:	8f a1       	ldd	r24, Y+39	; 0x27
    74d6:	98 a5       	ldd	r25, Y+40	; 0x28
    74d8:	9e 83       	std	Y+6, r25	; 0x06
    74da:	8d 83       	std	Y+5, r24	; 0x05
    74dc:	1c 82       	std	Y+4, r1	; 0x04
    74de:	1b 82       	std	Y+3, r1	; 0x03
    74e0:	1a 82       	std	Y+2, r1	; 0x02
    74e2:	19 82       	std	Y+1, r1	; 0x01
    74e4:	ce 01       	movw	r24, r28
    74e6:	01 96       	adiw	r24, 0x01	; 1
    74e8:	6e de       	rcall	.-804    	; 0x71c6 <timegm>
    74ea:	45 01       	movw	r8, r10
    74ec:	56 01       	movw	r10, r12
    74ee:	86 0e       	add	r8, r22
    74f0:	97 1e       	adc	r9, r23
    74f2:	a8 1e       	adc	r10, r24
    74f4:	b9 1e       	adc	r11, r25
    74f6:	8e 01       	movw	r16, r28
    74f8:	0f 5f       	subi	r16, 0xFF	; 255
    74fa:	1f 4f       	sbci	r17, 0xFF	; 255
    74fc:	20 e0       	ldi	r18, 0x00	; 0
    74fe:	30 e0       	ldi	r19, 0x00	; 0
    7500:	a9 01       	movw	r20, r18
    7502:	c5 01       	movw	r24, r10
    7504:	b4 01       	movw	r22, r8
    7506:	ac da       	rcall	.-2728   	; 0x6a60 <time_to_tm>
    7508:	2d 85       	ldd	r18, Y+13	; 0x0d
    750a:	3e 85       	ldd	r19, Y+14	; 0x0e
    750c:	e7 e0       	ldi	r30, 0x07	; 7
    750e:	f0 e0       	ldi	r31, 0x00	; 0
    7510:	c9 01       	movw	r24, r18
    7512:	bf 01       	movw	r22, r30
    7514:	0e 94 41 e8 	call	0x1d082	; 0x1d082 <__divmodhi4>
    7518:	4d a1       	ldd	r20, Y+37	; 0x25
    751a:	5e a1       	ldd	r21, Y+38	; 0x26
    751c:	48 17       	cp	r20, r24
    751e:	59 07       	cpc	r21, r25
    7520:	21 f4       	brne	.+8      	; 0x752a <find_dst+0xec>
    7522:	51 e0       	ldi	r21, 0x01	; 1
    7524:	e5 1a       	sub	r14, r21
    7526:	f1 08       	sbc	r15, r1
    7528:	51 f0       	breq	.+20     	; 0x753e <find_dst+0x100>
    752a:	80 e8       	ldi	r24, 0x80	; 128
    752c:	88 0e       	add	r8, r24
    752e:	81 e5       	ldi	r24, 0x51	; 81
    7530:	98 1e       	adc	r9, r24
    7532:	81 e0       	ldi	r24, 0x01	; 1
    7534:	a8 1e       	adc	r10, r24
    7536:	b1 1c       	adc	r11, r1
    7538:	2f 5f       	subi	r18, 0xFF	; 255
    753a:	3f 4f       	sbci	r19, 0xFF	; 255
    753c:	e9 cf       	rjmp	.-46     	; 0x7510 <find_dst+0xd2>
    753e:	c5 01       	movw	r24, r10
    7540:	b4 01       	movw	r22, r8
    7542:	a8 96       	adiw	r28, 0x28	; 40
    7544:	e2 e1       	ldi	r30, 0x12	; 18
    7546:	0c 94 dd e8 	jmp	0x1d1ba	; 0x1d1ba <__epilogue_restores__>

0000754a <set_dst>:
    754a:	4f 92       	push	r4
    754c:	5f 92       	push	r5
    754e:	6f 92       	push	r6
    7550:	7f 92       	push	r7
    7552:	af 92       	push	r10
    7554:	bf 92       	push	r11
    7556:	cf 92       	push	r12
    7558:	df 92       	push	r13
    755a:	ef 92       	push	r14
    755c:	ff 92       	push	r15
    755e:	0f 93       	push	r16
    7560:	1f 93       	push	r17
    7562:	cf 93       	push	r28
    7564:	df 93       	push	r29
    7566:	cd b7       	in	r28, 0x3d	; 61
    7568:	de b7       	in	r29, 0x3e	; 62
    756a:	2c 97       	sbiw	r28, 0x0c	; 12
    756c:	0f b6       	in	r0, 0x3f	; 63
    756e:	f8 94       	cli
    7570:	de bf       	out	0x3e, r29	; 62
    7572:	0f be       	out	0x3f, r0	; 63
    7574:	cd bf       	out	0x3d, r28	; 61
    7576:	2b 01       	movw	r4, r22
    7578:	3c 01       	movw	r6, r24
    757a:	67 2b       	or	r22, r23
    757c:	68 2b       	or	r22, r24
    757e:	69 2b       	or	r22, r25
    7580:	51 f4       	brne	.+20     	; 0x7596 <set_dst+0x4c>
    7582:	be 01       	movw	r22, r28
    7584:	67 5f       	subi	r22, 0xF7	; 247
    7586:	7f 4f       	sbci	r23, 0xFF	; 255
    7588:	ce 01       	movw	r24, r28
    758a:	01 96       	adiw	r24, 0x01	; 1
    758c:	89 db       	rcall	.-2286   	; 0x6ca0 <gettimeofday>
    758e:	49 80       	ldd	r4, Y+1	; 0x01
    7590:	5a 80       	ldd	r5, Y+2	; 0x02
    7592:	6b 80       	ldd	r6, Y+3	; 0x03
    7594:	7c 80       	ldd	r7, Y+4	; 0x04
    7596:	80 91 27 1a 	lds	r24, 0x1A27	; 0x801a27 <dst+0x8>
    759a:	90 91 28 1a 	lds	r25, 0x1A28	; 0x801a28 <dst+0x9>
    759e:	a0 91 29 1a 	lds	r26, 0x1A29	; 0x801a29 <dst+0xa>
    75a2:	b0 91 2a 1a 	lds	r27, 0x1A2A	; 0x801a2a <dst+0xb>
    75a6:	84 15       	cp	r24, r4
    75a8:	95 05       	cpc	r25, r5
    75aa:	a6 05       	cpc	r26, r6
    75ac:	b7 05       	cpc	r27, r7
    75ae:	50 f0       	brcs	.+20     	; 0x75c4 <set_dst+0x7a>
    75b0:	84 19       	sub	r24, r4
    75b2:	95 09       	sbc	r25, r5
    75b4:	a6 09       	sbc	r26, r6
    75b6:	b7 09       	sbc	r27, r7
    75b8:	80 38       	cpi	r24, 0x80	; 128
    75ba:	91 45       	sbci	r25, 0x51	; 81
    75bc:	a1 40       	sbci	r26, 0x01	; 1
    75be:	b1 05       	cpc	r27, r1
    75c0:	70 f4       	brcc	.+28     	; 0x75de <set_dst+0x94>
    75c2:	42 c0       	rjmp	.+132    	; 0x7648 <set_dst+0xfe>
    75c4:	a3 01       	movw	r20, r6
    75c6:	92 01       	movw	r18, r4
    75c8:	28 1b       	sub	r18, r24
    75ca:	39 0b       	sbc	r19, r25
    75cc:	4a 0b       	sbc	r20, r26
    75ce:	5b 0b       	sbc	r21, r27
    75d0:	da 01       	movw	r26, r20
    75d2:	c9 01       	movw	r24, r18
    75d4:	80 38       	cpi	r24, 0x80	; 128
    75d6:	91 45       	sbci	r25, 0x51	; 81
    75d8:	a1 40       	sbci	r26, 0x01	; 1
    75da:	b1 05       	cpc	r27, r1
    75dc:	a8 f1       	brcs	.+106    	; 0x7648 <set_dst+0xfe>
    75de:	40 92 27 1a 	sts	0x1A27, r4	; 0x801a27 <dst+0x8>
    75e2:	50 92 28 1a 	sts	0x1A28, r5	; 0x801a28 <dst+0x9>
    75e6:	60 92 29 1a 	sts	0x1A29, r6	; 0x801a29 <dst+0xa>
    75ea:	70 92 2a 1a 	sts	0x1A2A, r7	; 0x801a2a <dst+0xb>
    75ee:	82 e0       	ldi	r24, 0x02	; 2
    75f0:	a8 2e       	mov	r10, r24
    75f2:	b1 2c       	mov	r11, r1
    75f4:	c1 2c       	mov	r12, r1
    75f6:	d1 2c       	mov	r13, r1
    75f8:	92 e0       	ldi	r25, 0x02	; 2
    75fa:	e9 2e       	mov	r14, r25
    75fc:	f1 2c       	mov	r15, r1
    75fe:	03 e0       	ldi	r16, 0x03	; 3
    7600:	10 e0       	ldi	r17, 0x00	; 0
    7602:	20 e0       	ldi	r18, 0x00	; 0
    7604:	30 e0       	ldi	r19, 0x00	; 0
    7606:	b3 01       	movw	r22, r6
    7608:	a2 01       	movw	r20, r4
    760a:	80 e0       	ldi	r24, 0x00	; 0
    760c:	90 e0       	ldi	r25, 0x00	; 0
    760e:	17 df       	rcall	.-466    	; 0x743e <find_dst>
    7610:	60 93 1f 1a 	sts	0x1A1F, r22	; 0x801a1f <dst>
    7614:	70 93 20 1a 	sts	0x1A20, r23	; 0x801a20 <dst+0x1>
    7618:	80 93 21 1a 	sts	0x1A21, r24	; 0x801a21 <dst+0x2>
    761c:	90 93 22 1a 	sts	0x1A22, r25	; 0x801a22 <dst+0x3>
    7620:	ee 24       	eor	r14, r14
    7622:	e3 94       	inc	r14
    7624:	f1 2c       	mov	r15, r1
    7626:	0b e0       	ldi	r16, 0x0B	; 11
    7628:	10 e0       	ldi	r17, 0x00	; 0
    762a:	20 e0       	ldi	r18, 0x00	; 0
    762c:	30 e0       	ldi	r19, 0x00	; 0
    762e:	b3 01       	movw	r22, r6
    7630:	a2 01       	movw	r20, r4
    7632:	81 e0       	ldi	r24, 0x01	; 1
    7634:	90 e0       	ldi	r25, 0x00	; 0
    7636:	03 df       	rcall	.-506    	; 0x743e <find_dst>
    7638:	60 93 23 1a 	sts	0x1A23, r22	; 0x801a23 <dst+0x4>
    763c:	70 93 24 1a 	sts	0x1A24, r23	; 0x801a24 <dst+0x5>
    7640:	80 93 25 1a 	sts	0x1A25, r24	; 0x801a25 <dst+0x6>
    7644:	90 93 26 1a 	sts	0x1A26, r25	; 0x801a26 <dst+0x7>
    7648:	2c 96       	adiw	r28, 0x0c	; 12
    764a:	0f b6       	in	r0, 0x3f	; 63
    764c:	f8 94       	cli
    764e:	de bf       	out	0x3e, r29	; 62
    7650:	0f be       	out	0x3f, r0	; 63
    7652:	cd bf       	out	0x3d, r28	; 61
    7654:	df 91       	pop	r29
    7656:	cf 91       	pop	r28
    7658:	1f 91       	pop	r17
    765a:	0f 91       	pop	r16
    765c:	ff 90       	pop	r15
    765e:	ef 90       	pop	r14
    7660:	df 90       	pop	r13
    7662:	cf 90       	pop	r12
    7664:	bf 90       	pop	r11
    7666:	af 90       	pop	r10
    7668:	7f 90       	pop	r7
    766a:	6f 90       	pop	r6
    766c:	5f 90       	pop	r5
    766e:	4f 90       	pop	r4
    7670:	08 95       	ret

00007672 <asctime_r>:
    7672:	0f 93       	push	r16
    7674:	1f 93       	push	r17
    7676:	cf 93       	push	r28
    7678:	df 93       	push	r29
    767a:	ec 01       	movw	r28, r24
    767c:	8b 01       	movw	r16, r22
    767e:	60 e0       	ldi	r22, 0x00	; 0
    7680:	70 e0       	ldi	r23, 0x00	; 0
    7682:	d9 db       	rcall	.-2126   	; 0x6e36 <normalize>
    7684:	20 e2       	ldi	r18, 0x20	; 32
    7686:	d8 01       	movw	r26, r16
    7688:	82 2f       	mov	r24, r18
    768a:	1d 92       	st	X+, r1
    768c:	8a 95       	dec	r24
    768e:	e9 f7       	brne	.-6      	; 0x768a <asctime_r+0x18>
    7690:	8a 85       	ldd	r24, Y+10	; 0x0a
    7692:	9b 85       	ldd	r25, Y+11	; 0x0b
    7694:	84 59       	subi	r24, 0x94	; 148
    7696:	98 4f       	sbci	r25, 0xF8	; 248
    7698:	9f 93       	push	r25
    769a:	8f 93       	push	r24
    769c:	89 81       	ldd	r24, Y+1	; 0x01
    769e:	8f 93       	push	r24
    76a0:	88 81       	ld	r24, Y
    76a2:	8f 93       	push	r24
    76a4:	8b 81       	ldd	r24, Y+3	; 0x03
    76a6:	8f 93       	push	r24
    76a8:	8a 81       	ldd	r24, Y+2	; 0x02
    76aa:	8f 93       	push	r24
    76ac:	8d 81       	ldd	r24, Y+5	; 0x05
    76ae:	8f 93       	push	r24
    76b0:	8c 81       	ldd	r24, Y+4	; 0x04
    76b2:	8f 93       	push	r24
    76b4:	8f 81       	ldd	r24, Y+7	; 0x07
    76b6:	8f 93       	push	r24
    76b8:	8e 81       	ldd	r24, Y+6	; 0x06
    76ba:	8f 93       	push	r24
    76bc:	e8 85       	ldd	r30, Y+8	; 0x08
    76be:	f9 85       	ldd	r31, Y+9	; 0x09
    76c0:	ee 0f       	add	r30, r30
    76c2:	ff 1f       	adc	r31, r31
    76c4:	eb 5f       	subi	r30, 0xFB	; 251
    76c6:	fe 4f       	sbci	r31, 0xFE	; 254
    76c8:	81 81       	ldd	r24, Z+1	; 0x01
    76ca:	8f 93       	push	r24
    76cc:	80 81       	ld	r24, Z
    76ce:	8f 93       	push	r24
    76d0:	ec 85       	ldd	r30, Y+12	; 0x0c
    76d2:	fd 85       	ldd	r31, Y+13	; 0x0d
    76d4:	ee 0f       	add	r30, r30
    76d6:	ff 1f       	adc	r31, r31
    76d8:	e1 5e       	subi	r30, 0xE1	; 225
    76da:	fe 4f       	sbci	r31, 0xFE	; 254
    76dc:	81 81       	ldd	r24, Z+1	; 0x01
    76de:	8f 93       	push	r24
    76e0:	80 81       	ld	r24, Z
    76e2:	8f 93       	push	r24
    76e4:	8f e9       	ldi	r24, 0x9F	; 159
    76e6:	97 e0       	ldi	r25, 0x07	; 7
    76e8:	1f 92       	push	r1
    76ea:	9f 93       	push	r25
    76ec:	8f 93       	push	r24
    76ee:	1f 92       	push	r1
    76f0:	2f 93       	push	r18
    76f2:	1f 93       	push	r17
    76f4:	0f 93       	push	r16
    76f6:	0e 94 9a 44 	call	0x8934	; 0x8934 <snprintf_P>
    76fa:	ad b7       	in	r26, 0x3d	; 61
    76fc:	be b7       	in	r27, 0x3e	; 62
    76fe:	55 96       	adiw	r26, 0x15	; 21
    7700:	0f b6       	in	r0, 0x3f	; 63
    7702:	f8 94       	cli
    7704:	be bf       	out	0x3e, r27	; 62
    7706:	0f be       	out	0x3f, r0	; 63
    7708:	ad bf       	out	0x3d, r26	; 61
    770a:	c8 01       	movw	r24, r16
    770c:	df 91       	pop	r29
    770e:	cf 91       	pop	r28
    7710:	1f 91       	pop	r17
    7712:	0f 91       	pop	r16
    7714:	08 95       	ret

00007716 <asctime>:
    7716:	66 eb       	ldi	r22, 0xB6	; 182
    7718:	77 e1       	ldi	r23, 0x17	; 23
    771a:	ab cf       	rjmp	.-170    	; 0x7672 <asctime_r>
    771c:	08 95       	ret

0000771e <ctime_gm>:
    771e:	a6 e1       	ldi	r26, 0x16	; 22
    7720:	b0 e0       	ldi	r27, 0x00	; 0
    7722:	e5 e9       	ldi	r30, 0x95	; 149
    7724:	fb e3       	ldi	r31, 0x3B	; 59
    7726:	0c 94 d1 e8 	jmp	0x1d1a2	; 0x1d1a2 <__prologue_saves__+0x20>
    772a:	be 01       	movw	r22, r28
    772c:	6f 5f       	subi	r22, 0xFF	; 255
    772e:	7f 4f       	sbci	r23, 0xFF	; 255
    7730:	75 da       	rcall	.-2838   	; 0x6c1c <gmtime_r>
    7732:	66 e7       	ldi	r22, 0x76	; 118
    7734:	77 e1       	ldi	r23, 0x17	; 23
    7736:	9d df       	rcall	.-198    	; 0x7672 <asctime_r>
    7738:	66 96       	adiw	r28, 0x16	; 22
    773a:	e2 e0       	ldi	r30, 0x02	; 2
    773c:	0c 94 ed e8 	jmp	0x1d1da	; 0x1d1da <__epilogue_restores__+0x20>

00007740 <initialize_clock>:
/// @param[in] minwest: your time zone as minute west
///@return  void
///@see: clock_settime()
MEMSPACE
void initialize_clock(int minwest)
{
    7740:	a2 e2       	ldi	r26, 0x22	; 34
    7742:	b0 e0       	ldi	r27, 0x00	; 0
    7744:	e6 ea       	ldi	r30, 0xA6	; 166
    7746:	fb e3       	ldi	r31, 0x3B	; 59
    7748:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__prologue_saves__+0x14>
    774c:	8c 01       	movw	r16, r24
    tm_t tc;
    ts_t ts;
    tz_t tz;

#ifdef RTC_SUPPORT
    if(!rtc_init(0,0L))
    774e:	40 e0       	ldi	r20, 0x00	; 0
    7750:	50 e0       	ldi	r21, 0x00	; 0
    7752:	ba 01       	movw	r22, r20
    7754:	80 e0       	ldi	r24, 0x00	; 0
    7756:	90 e0       	ldi	r25, 0x00	; 0
    7758:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <rtc_init>
    775c:	81 11       	cpse	r24, r1
    775e:	27 c0       	rjmp	.+78     	; 0x77ae <initialize_clock+0x6e>
    {
        printf("rtc uninitilized\n");
    7760:	8a e9       	ldi	r24, 0x9A	; 154
    7762:	96 e0       	ldi	r25, 0x06	; 6
    7764:	1f 92       	push	r1
    7766:	9f 93       	push	r25
    7768:	8f 93       	push	r24
    776a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        printf("attempting rtc init\n");
    776e:	85 e8       	ldi	r24, 0x85	; 133
    7770:	96 e0       	ldi	r25, 0x06	; 6
    7772:	1f 92       	push	r1
    7774:	9f 93       	push	r25
    7776:	8f 93       	push	r24
    7778:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        if( !rtc_init(1, (time_t) 0) )
    777c:	40 e0       	ldi	r20, 0x00	; 0
    777e:	50 e0       	ldi	r21, 0x00	; 0
    7780:	ba 01       	movw	r22, r20
    7782:	81 e0       	ldi	r24, 0x01	; 1
    7784:	90 e0       	ldi	r25, 0x00	; 0
    7786:	0e 94 f5 2e 	call	0x5dea	; 0x5dea <rtc_init>
    778a:	0f 90       	pop	r0
    778c:	0f 90       	pop	r0
    778e:	0f 90       	pop	r0
    7790:	0f 90       	pop	r0
    7792:	0f 90       	pop	r0
    7794:	0f 90       	pop	r0
    7796:	81 11       	cpse	r24, r1
    7798:	0a c0       	rjmp	.+20     	; 0x77ae <initialize_clock+0x6e>
        {
            printf("rtc force init failed\n");
    779a:	8e e6       	ldi	r24, 0x6E	; 110
    779c:	96 e0       	ldi	r25, 0x06	; 6
    779e:	1f 92       	push	r1
    77a0:	9f 93       	push	r25
    77a2:	8f 93       	push	r24
    77a4:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    77a8:	0f 90       	pop	r0
    77aa:	0f 90       	pop	r0
    77ac:	0f 90       	pop	r0
        }
    }

    if(rtc_read(&tc))
    77ae:	ce 01       	movw	r24, r28
    77b0:	01 96       	adiw	r24, 0x01	; 1
    77b2:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <rtc_read>
    77b6:	88 23       	and	r24, r24
    77b8:	51 f0       	breq	.+20     	; 0x77ce <initialize_clock+0x8e>
    {
        seconds = timegm(&tc);
    77ba:	ce 01       	movw	r24, r28
    77bc:	01 96       	adiw	r24, 0x01	; 1
    77be:	03 dd       	rcall	.-1530   	; 0x71c6 <timegm>
    77c0:	6b 01       	movw	r12, r22
    77c2:	7c 01       	movw	r14, r24
    }
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
    77c4:	67 2b       	or	r22, r23
    77c6:	68 2b       	or	r22, r24
    77c8:	69 2b       	or	r22, r25
    77ca:	c1 f4       	brne	.+48     	; 0x77fc <initialize_clock+0xbc>
    77cc:	0a c0       	rjmp	.+20     	; 0x77e2 <initialize_clock+0xa2>
        seconds = timegm(&tc);
    }
    else
    {
        seconds = 0;
        printf("rtc read errorafter init\n");
    77ce:	84 e5       	ldi	r24, 0x54	; 84
    77d0:	96 e0       	ldi	r25, 0x06	; 6
    77d2:	1f 92       	push	r1
    77d4:	9f 93       	push	r25
    77d6:	8f 93       	push	r24
    77d8:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    77dc:	0f 90       	pop	r0
    77de:	0f 90       	pop	r0
    77e0:	0f 90       	pop	r0
#else
    printf("NO RTC\n");
    seconds = 0;
#endif  // RTC_SUPPORT
    if(!seconds)
        printf("use setdate command to change time\n");
    77e2:	80 e3       	ldi	r24, 0x30	; 48
    77e4:	96 e0       	ldi	r25, 0x06	; 6
    77e6:	1f 92       	push	r1
    77e8:	9f 93       	push	r25
    77ea:	8f 93       	push	r24
    77ec:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    77f0:	0f 90       	pop	r0
    77f2:	0f 90       	pop	r0
    77f4:	0f 90       	pop	r0
    77f6:	c1 2c       	mov	r12, r1
    77f8:	d1 2c       	mov	r13, r1
    77fa:	76 01       	movw	r14, r12
    tz.tz_minuteswest = minwest;
    77fc:	18 a3       	std	Y+32, r17	; 0x20
    77fe:	0f 8f       	std	Y+31, r16	; 0x1f
    tz.tz_dsttime = 0;
    7800:	1a a2       	std	Y+34, r1	; 0x22
    7802:	19 a2       	std	Y+33, r1	; 0x21
    settimezone( &tz );
    7804:	ce 01       	movw	r24, r28
    7806:	4f 96       	adiw	r24, 0x1f	; 31
    7808:	3a da       	rcall	.-2956   	; 0x6c7e <settimezone>

    ts.tv_sec = seconds;
    780a:	cf 8a       	std	Y+23, r12	; 0x17
    780c:	d8 8e       	std	Y+24, r13	; 0x18
    780e:	e9 8e       	std	Y+25, r14	; 0x19
    7810:	fa 8e       	std	Y+26, r15	; 0x1a
    ts.tv_nsec = 0L;
    7812:	1b 8e       	std	Y+27, r1	; 0x1b
    7814:	1c 8e       	std	Y+28, r1	; 0x1c
    7816:	1d 8e       	std	Y+29, r1	; 0x1d
    7818:	1e 8e       	std	Y+30, r1	; 0x1e
    clock_settime(0, (ts_t *) &ts);
    781a:	be 01       	movw	r22, r28
    781c:	69 5e       	subi	r22, 0xE9	; 233
    781e:	7f 4f       	sbci	r23, 0xFF	; 255
    7820:	80 e0       	ldi	r24, 0x00	; 0
    7822:	90 e0       	ldi	r25, 0x00	; 0
    7824:	cf d8       	rcall	.-3682   	; 0x69c4 <clock_settime>
}
    7826:	a2 96       	adiw	r28, 0x22	; 34
    7828:	e8 e0       	ldi	r30, 0x08	; 8
    782a:	0c 94 e7 e8 	jmp	0x1d1ce	; 0x1d1ce <__epilogue_restores__+0x14>

0000782e <display_clock>:
/// @see: rtc_read
/// @see: timegm()
/// @see: ascitime()
MEMSPACE
void display_clock()
{
    782e:	a2 e2       	ldi	r26, 0x22	; 34
    7830:	b0 e0       	ldi	r27, 0x00	; 0
    7832:	ed e1       	ldi	r30, 0x1D	; 29
    7834:	fc e3       	ldi	r31, 0x3C	; 60
    7836:	0c 94 d1 e8 	jmp	0x1d1a2	; 0x1d1a2 <__prologue_saves__+0x20>
    time_t seconds;
    tm_t tc;
    ts_t ts;

#ifdef RTC_SUPPORT
    if(rtc_read(&tc))
    783a:	ce 01       	movw	r24, r28
    783c:	01 96       	adiw	r24, 0x01	; 1
    783e:	0e 94 68 2f 	call	0x5ed0	; 0x5ed0 <rtc_read>
    7842:	88 23       	and	r24, r24
    7844:	21 f1       	breq	.+72     	; 0x788e <display_clock+0x60>
    {
        seconds = timegm(&tc);
    7846:	ce 01       	movw	r24, r28
    7848:	01 96       	adiw	r24, 0x01	; 1
    784a:	bd dc       	rcall	.-1670   	; 0x71c6 <timegm>
    784c:	6f 8f       	std	Y+31, r22	; 0x1f
    784e:	78 a3       	std	Y+32, r23	; 0x20
    7850:	89 a3       	std	Y+33, r24	; 0x21
    7852:	9a a3       	std	Y+34, r25	; 0x22
        printf("rtc seconds: %lu\n",seconds);
    7854:	9f 93       	push	r25
    7856:	8f 93       	push	r24
    7858:	7f 93       	push	r23
    785a:	6f 93       	push	r22
    785c:	8e e1       	ldi	r24, 0x1E	; 30
    785e:	96 e0       	ldi	r25, 0x06	; 6
    7860:	1f 92       	push	r1
    7862:	9f 93       	push	r25
    7864:	8f 93       	push	r24
    7866:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        printf("rtc time:    %s\n",asctime(&tc));
    786a:	ce 01       	movw	r24, r28
    786c:	01 96       	adiw	r24, 0x01	; 1
    786e:	53 df       	rcall	.-346    	; 0x7716 <asctime>
    7870:	9f 93       	push	r25
    7872:	8f 93       	push	r24
    7874:	8d e0       	ldi	r24, 0x0D	; 13
    7876:	96 e0       	ldi	r25, 0x06	; 6
    7878:	1f 92       	push	r1
    787a:	9f 93       	push	r25
    787c:	8f 93       	push	r24
    787e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    7882:	0f b6       	in	r0, 0x3f	; 63
    7884:	f8 94       	cli
    7886:	de bf       	out	0x3e, r29	; 62
    7888:	0f be       	out	0x3f, r0	; 63
    788a:	cd bf       	out	0x3d, r28	; 61
    788c:	0a c0       	rjmp	.+20     	; 0x78a2 <display_clock+0x74>
            (int) tc.tm_wday);
#endif
    }
    else
    {
        printf("RTC read failed\n");
    788e:	8c ef       	ldi	r24, 0xFC	; 252
    7890:	95 e0       	ldi	r25, 0x05	; 5
    7892:	1f 92       	push	r1
    7894:	9f 93       	push	r25
    7896:	8f 93       	push	r24
    7898:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    789c:	0f 90       	pop	r0
    789e:	0f 90       	pop	r0
    78a0:	0f 90       	pop	r0
    }
#endif  // RTC_SUPPORT

    clock_gettime(0, (ts_t *) &ts);
    78a2:	be 01       	movw	r22, r28
    78a4:	69 5e       	subi	r22, 0xE9	; 233
    78a6:	7f 4f       	sbci	r23, 0xFF	; 255
    78a8:	80 e0       	ldi	r24, 0x00	; 0
    78aa:	90 e0       	ldi	r25, 0x00	; 0
    78ac:	0e 94 53 32 	call	0x64a6	; 0x64a6 <clock_gettime>
    seconds = ts.tv_sec;
    78b0:	8f 89       	ldd	r24, Y+23	; 0x17
    78b2:	98 8d       	ldd	r25, Y+24	; 0x18
    78b4:	29 8d       	ldd	r18, Y+25	; 0x19
    78b6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    78b8:	8f 8f       	std	Y+31, r24	; 0x1f
    78ba:	98 a3       	std	Y+32, r25	; 0x20
    78bc:	29 a3       	std	Y+33, r18	; 0x21
    78be:	3a a3       	std	Y+34, r19	; 0x22
    printf("clk seconds: %lu\n",seconds);
    78c0:	3f 93       	push	r19
    78c2:	2f 93       	push	r18
    78c4:	9f 93       	push	r25
    78c6:	8f 93       	push	r24
    78c8:	8a ee       	ldi	r24, 0xEA	; 234
    78ca:	95 e0       	ldi	r25, 0x05	; 5
    78cc:	1f 92       	push	r1
    78ce:	9f 93       	push	r25
    78d0:	8f 93       	push	r24
    78d2:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    printf("clk time:    %s\n", asctime(gmtime(&seconds)));
    78d6:	ce 01       	movw	r24, r28
    78d8:	4f 96       	adiw	r24, 0x1f	; 31
    78da:	b5 d9       	rcall	.-3222   	; 0x6c46 <gmtime>
    78dc:	1c df       	rcall	.-456    	; 0x7716 <asctime>
    78de:	9f 93       	push	r25
    78e0:	8f 93       	push	r24
    78e2:	89 ed       	ldi	r24, 0xD9	; 217
    78e4:	95 e0       	ldi	r25, 0x05	; 5
    78e6:	1f 92       	push	r1
    78e8:	9f 93       	push	r25
    78ea:	8f 93       	push	r24
    78ec:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
}
    78f0:	0f b6       	in	r0, 0x3f	; 63
    78f2:	f8 94       	cli
    78f4:	de bf       	out	0x3e, r29	; 62
    78f6:	0f be       	out	0x3f, r0	; 63
    78f8:	cd bf       	out	0x3d, r28	; 61
    78fa:	a2 96       	adiw	r28, 0x22	; 34
    78fc:	e2 e0       	ldi	r30, 0x02	; 2
    78fe:	0c 94 ed e8 	jmp	0x1d1da	; 0x1d1da <__epilogue_restores__+0x20>

00007902 <_putc_buffer_fn>:
    va_start(va, format);
    _printf_fn(&fn, format, va);
    va_end(va);

    return ((int)fn.sent);
}
    7902:	fc 01       	movw	r30, r24
    7904:	84 81       	ldd	r24, Z+4	; 0x04
    7906:	95 81       	ldd	r25, Z+5	; 0x05
    7908:	00 97       	sbiw	r24, 0x00	; 0
    790a:	79 f0       	breq	.+30     	; 0x792a <_putc_buffer_fn+0x28>
    790c:	66 23       	and	r22, r22
    790e:	69 f0       	breq	.+26     	; 0x792a <_putc_buffer_fn+0x28>
    7910:	01 97       	sbiw	r24, 0x01	; 1
    7912:	95 83       	std	Z+5, r25	; 0x05
    7914:	84 83       	std	Z+4, r24	; 0x04
    7916:	86 81       	ldd	r24, Z+6	; 0x06
    7918:	97 81       	ldd	r25, Z+7	; 0x07
    791a:	01 96       	adiw	r24, 0x01	; 1
    791c:	97 83       	std	Z+7, r25	; 0x07
    791e:	86 83       	std	Z+6, r24	; 0x06
    7920:	a2 81       	ldd	r26, Z+2	; 0x02
    7922:	b3 81       	ldd	r27, Z+3	; 0x03
    7924:	6d 93       	st	X+, r22
    7926:	b3 83       	std	Z+3, r27	; 0x03
    7928:	a2 83       	std	Z+2, r26	; 0x02
    792a:	02 80       	ldd	r0, Z+2	; 0x02
    792c:	f3 81       	ldd	r31, Z+3	; 0x03
    792e:	e0 2d       	mov	r30, r0
    7930:	10 82       	st	Z, r1
    7932:	08 95       	ret

00007934 <_putc_fn>:
    7934:	fc 01       	movw	r30, r24
    7936:	26 81       	ldd	r18, Z+6	; 0x06
    7938:	37 81       	ldd	r19, Z+7	; 0x07
    793a:	2f 5f       	subi	r18, 0xFF	; 255
    793c:	3f 4f       	sbci	r19, 0xFF	; 255
    793e:	37 83       	std	Z+7, r19	; 0x07
    7940:	26 83       	std	Z+6, r18	; 0x06
    7942:	86 2f       	mov	r24, r22
    7944:	90 e0       	ldi	r25, 0x00	; 0
    7946:	0c 94 dc 78 	jmp	0xf1b8	; 0xf1b8 <putchar>
    794a:	08 95       	ret

0000794c <bin2num>:
    794c:	a0 e0       	ldi	r26, 0x00	; 0
    794e:	b0 e0       	ldi	r27, 0x00	; 0
    7950:	ec ea       	ldi	r30, 0xAC	; 172
    7952:	fc e3       	ldi	r31, 0x3C	; 60
    7954:	0c 94 c8 e8 	jmp	0x1d190	; 0x1d190 <__prologue_saves__+0xe>
    7958:	ea 01       	movw	r28, r20
    795a:	53 e0       	ldi	r21, 0x03	; 3
    795c:	ee 0c       	add	r14, r14
    795e:	ff 1c       	adc	r15, r15
    7960:	5a 95       	dec	r21
    7962:	e1 f7       	brne	.-8      	; 0x795c <bin2num+0x10>
    7964:	fc 01       	movw	r30, r24
    7966:	af 01       	movw	r20, r30
    7968:	48 1b       	sub	r20, r24
    796a:	59 0b       	sbc	r21, r25
    796c:	c4 17       	cp	r28, r20
    796e:	d5 07       	cpc	r29, r21
    7970:	14 f0       	brlt	.+4      	; 0x7976 <bin2num+0x2a>
    7972:	11 92       	st	Z+, r1
    7974:	f8 cf       	rjmp	.-16     	; 0x7966 <bin2num+0x1a>
    7976:	41 e0       	ldi	r20, 0x01	; 1
    7978:	e4 1a       	sub	r14, r20
    797a:	f1 08       	sbc	r15, r1
    797c:	5b 01       	movw	r10, r22
    797e:	42 e0       	ldi	r20, 0x02	; 2
    7980:	a4 1a       	sub	r10, r20
    7982:	b1 08       	sbc	r11, r1
    7984:	f7 fc       	sbrc	r15, 7
    7986:	3b c0       	rjmp	.+118    	; 0x79fe <bin2num+0xb2>
    7988:	f7 01       	movw	r30, r14
    798a:	43 e0       	ldi	r20, 0x03	; 3
    798c:	f5 95       	asr	r31
    798e:	e7 95       	ror	r30
    7990:	4a 95       	dec	r20
    7992:	e1 f7       	brne	.-8      	; 0x798c <bin2num+0x40>
    7994:	e0 0f       	add	r30, r16
    7996:	f1 1f       	adc	r31, r17
    7998:	40 81       	ld	r20, Z
    799a:	50 e0       	ldi	r21, 0x00	; 0
    799c:	f7 01       	movw	r30, r14
    799e:	e7 70       	andi	r30, 0x07	; 7
    79a0:	ff 27       	eor	r31, r31
    79a2:	02 c0       	rjmp	.+4      	; 0x79a8 <bin2num+0x5c>
    79a4:	55 95       	asr	r21
    79a6:	47 95       	ror	r20
    79a8:	ea 95       	dec	r30
    79aa:	e2 f7       	brpl	.-8      	; 0x79a4 <bin2num+0x58>
    79ac:	41 70       	andi	r20, 0x01	; 1
    79ae:	55 27       	eor	r21, r21
    79b0:	dc 01       	movw	r26, r24
    79b2:	e0 e0       	ldi	r30, 0x00	; 0
    79b4:	f0 e0       	ldi	r31, 0x00	; 0
    79b6:	ec 17       	cp	r30, r28
    79b8:	fd 07       	cpc	r31, r29
    79ba:	ec f4       	brge	.+58     	; 0x79f6 <bin2num+0xaa>
    79bc:	ea 15       	cp	r30, r10
    79be:	fb 05       	cpc	r31, r11
    79c0:	4c f0       	brlt	.+18     	; 0x79d4 <bin2num+0x88>
    79c2:	dc 01       	movw	r26, r24
    79c4:	ae 0f       	add	r26, r30
    79c6:	bf 1f       	adc	r27, r31
    79c8:	1c 92       	st	X, r1
    79ca:	41 e0       	ldi	r20, 0x01	; 1
    79cc:	e4 1a       	sub	r14, r20
    79ce:	f1 08       	sbc	r15, r1
    79d0:	ef 01       	movw	r28, r30
    79d2:	d8 cf       	rjmp	.-80     	; 0x7984 <bin2num+0x38>
    79d4:	9c 90       	ld	r9, X
    79d6:	99 0c       	add	r9, r9
    79d8:	94 2a       	or	r9, r20
    79da:	49 2d       	mov	r20, r9
    79dc:	50 e0       	ldi	r21, 0x00	; 0
    79de:	42 17       	cp	r20, r18
    79e0:	53 07       	cpc	r21, r19
    79e2:	24 f0       	brlt	.+8      	; 0x79ec <bin2num+0xa0>
    79e4:	92 1a       	sub	r9, r18
    79e6:	41 e0       	ldi	r20, 0x01	; 1
    79e8:	50 e0       	ldi	r21, 0x00	; 0
    79ea:	02 c0       	rjmp	.+4      	; 0x79f0 <bin2num+0xa4>
    79ec:	40 e0       	ldi	r20, 0x00	; 0
    79ee:	50 e0       	ldi	r21, 0x00	; 0
    79f0:	9d 92       	st	X+, r9
    79f2:	31 96       	adiw	r30, 0x01	; 1
    79f4:	e0 cf       	rjmp	.-64     	; 0x79b6 <bin2num+0x6a>
    79f6:	41 15       	cp	r20, r1
    79f8:	51 05       	cpc	r21, r1
    79fa:	01 f7       	brne	.-64     	; 0x79bc <bin2num+0x70>
    79fc:	e2 cf       	rjmp	.-60     	; 0x79c2 <bin2num+0x76>
    79fe:	fc 01       	movw	r30, r24
    7a00:	9f 01       	movw	r18, r30
    7a02:	28 1b       	sub	r18, r24
    7a04:	39 0b       	sbc	r19, r25
    7a06:	2c 17       	cp	r18, r28
    7a08:	3d 07       	cpc	r19, r29
    7a0a:	4c f4       	brge	.+18     	; 0x7a1e <bin2num+0xd2>
    7a0c:	20 81       	ld	r18, Z
    7a0e:	2a 30       	cpi	r18, 0x0A	; 10
    7a10:	10 f4       	brcc	.+4      	; 0x7a16 <bin2num+0xca>
    7a12:	20 5d       	subi	r18, 0xD0	; 208
    7a14:	01 c0       	rjmp	.+2      	; 0x7a18 <bin2num+0xcc>
    7a16:	29 5a       	subi	r18, 0xA9	; 169
    7a18:	20 83       	st	Z, r18
    7a1a:	31 96       	adiw	r30, 0x01	; 1
    7a1c:	f1 cf       	rjmp	.-30     	; 0x7a00 <bin2num+0xb4>
    7a1e:	9e 01       	movw	r18, r28
    7a20:	d7 ff       	sbrs	r29, 7
    7a22:	02 c0       	rjmp	.+4      	; 0x7a28 <bin2num+0xdc>
    7a24:	20 e0       	ldi	r18, 0x00	; 0
    7a26:	30 e0       	ldi	r19, 0x00	; 0
    7a28:	c1 14       	cp	r12, r1
    7a2a:	d1 04       	cpc	r13, r1
    7a2c:	61 f0       	breq	.+24     	; 0x7a46 <bin2num+0xfa>
    7a2e:	61 50       	subi	r22, 0x01	; 1
    7a30:	71 09       	sbc	r23, r1
    7a32:	26 17       	cp	r18, r22
    7a34:	37 07       	cpc	r19, r23
    7a36:	3c f4       	brge	.+14     	; 0x7a46 <bin2num+0xfa>
    7a38:	fc 01       	movw	r30, r24
    7a3a:	e2 0f       	add	r30, r18
    7a3c:	f3 1f       	adc	r31, r19
    7a3e:	c0 82       	st	Z, r12
    7a40:	21 96       	adiw	r28, 0x01	; 1
    7a42:	2f 5f       	subi	r18, 0xFF	; 255
    7a44:	3f 4f       	sbci	r19, 0xFF	; 255
    7a46:	fc 01       	movw	r30, r24
    7a48:	e2 0f       	add	r30, r18
    7a4a:	f3 1f       	adc	r31, r19
    7a4c:	10 82       	st	Z, r1
    7a4e:	0e 94 43 30 	call	0x6086	; 0x6086 <reverse>
    7a52:	ce 01       	movw	r24, r28
    7a54:	cd b7       	in	r28, 0x3d	; 61
    7a56:	de b7       	in	r29, 0x3e	; 62
    7a58:	eb e0       	ldi	r30, 0x0B	; 11
    7a5a:	0c 94 e4 e8 	jmp	0x1d1c8	; 0x1d1c8 <__epilogue_restores__+0xe>

00007a5e <pch_init>:
    7a5e:	eb e2       	ldi	r30, 0x2B	; 43
    7a60:	fa e1       	ldi	r31, 0x1A	; 26
    7a62:	91 83       	std	Z+1, r25	; 0x01
    7a64:	80 83       	st	Z, r24
    7a66:	13 82       	std	Z+3, r1	; 0x03
    7a68:	12 82       	std	Z+2, r1	; 0x02
    7a6a:	61 50       	subi	r22, 0x01	; 1
    7a6c:	71 09       	sbc	r23, r1
    7a6e:	75 83       	std	Z+5, r23	; 0x05
    7a70:	64 83       	std	Z+4, r22	; 0x04
    7a72:	fc 01       	movw	r30, r24
    7a74:	10 82       	st	Z, r1
    7a76:	08 95       	ret

00007a78 <pch>:
    7a78:	20 91 2d 1a 	lds	r18, 0x1A2D	; 0x801a2d <_pch+0x2>
    7a7c:	30 91 2e 1a 	lds	r19, 0x1A2E	; 0x801a2e <_pch+0x3>
    7a80:	60 91 2f 1a 	lds	r22, 0x1A2F	; 0x801a2f <_pch+0x4>
    7a84:	70 91 30 1a 	lds	r23, 0x1A30	; 0x801a30 <_pch+0x5>
    7a88:	40 91 2b 1a 	lds	r20, 0x1A2B	; 0x801a2b <_pch>
    7a8c:	50 91 2c 1a 	lds	r21, 0x1A2C	; 0x801a2c <_pch+0x1>
    7a90:	26 17       	cp	r18, r22
    7a92:	37 07       	cpc	r19, r23
    7a94:	64 f4       	brge	.+24     	; 0x7aae <pch+0x36>
    7a96:	b9 01       	movw	r22, r18
    7a98:	6f 5f       	subi	r22, 0xFF	; 255
    7a9a:	7f 4f       	sbci	r23, 0xFF	; 255
    7a9c:	70 93 2e 1a 	sts	0x1A2E, r23	; 0x801a2e <_pch+0x3>
    7aa0:	60 93 2d 1a 	sts	0x1A2D, r22	; 0x801a2d <_pch+0x2>
    7aa4:	fa 01       	movw	r30, r20
    7aa6:	e2 0f       	add	r30, r18
    7aa8:	f3 1f       	adc	r31, r19
    7aaa:	80 83       	st	Z, r24
    7aac:	04 c0       	rjmp	.+8      	; 0x7ab6 <pch+0x3e>
    7aae:	fa 01       	movw	r30, r20
    7ab0:	e2 0f       	add	r30, r18
    7ab2:	f3 1f       	adc	r31, r19
    7ab4:	10 82       	st	Z, r1
    7ab6:	80 91 2d 1a 	lds	r24, 0x1A2D	; 0x801a2d <_pch+0x2>
    7aba:	90 91 2e 1a 	lds	r25, 0x1A2E	; 0x801a2e <_pch+0x3>
    7abe:	08 95       	ret

00007ac0 <p_ntoa>:
    7ac0:	af 92       	push	r10
    7ac2:	cf 92       	push	r12
    7ac4:	df 92       	push	r13
    7ac6:	ef 92       	push	r14
    7ac8:	ff 92       	push	r15
    7aca:	0f 93       	push	r16
    7acc:	1f 93       	push	r17
    7ace:	cf 93       	push	r28
    7ad0:	df 93       	push	r29
    7ad2:	dc 01       	movw	r26, r24
    7ad4:	eb 01       	movw	r28, r22
    7ad6:	fa 01       	movw	r30, r20
    7ad8:	b9 01       	movw	r22, r18
    7ada:	98 01       	movw	r18, r16
    7adc:	a6 01       	movw	r20, r12
    7ade:	9a 2d       	mov	r25, r10
    7ae0:	a5 fa       	bst	r10, 5
    7ae2:	cc 24       	eor	r12, r12
    7ae4:	c0 f8       	bld	r12, 0
    7ae6:	a6 fc       	sbrc	r10, 6
    7ae8:	07 c0       	rjmp	.+14     	; 0x7af8 <p_ntoa+0x38>
    7aea:	a2 fc       	sbrc	r10, 2
    7aec:	08 c0       	rjmp	.+16     	; 0x7afe <p_ntoa+0x3e>
    7aee:	a4 fe       	sbrs	r10, 4
    7af0:	09 c0       	rjmp	.+18     	; 0x7b04 <p_ntoa+0x44>
    7af2:	00 e2       	ldi	r16, 0x20	; 32
    7af4:	10 e0       	ldi	r17, 0x00	; 0
    7af6:	08 c0       	rjmp	.+16     	; 0x7b08 <p_ntoa+0x48>
    7af8:	0d e2       	ldi	r16, 0x2D	; 45
    7afa:	10 e0       	ldi	r17, 0x00	; 0
    7afc:	05 c0       	rjmp	.+10     	; 0x7b08 <p_ntoa+0x48>
    7afe:	0b e2       	ldi	r16, 0x2B	; 43
    7b00:	10 e0       	ldi	r17, 0x00	; 0
    7b02:	02 c0       	rjmp	.+4      	; 0x7b08 <p_ntoa+0x48>
    7b04:	00 e0       	ldi	r16, 0x00	; 0
    7b06:	10 e0       	ldi	r17, 0x00	; 0
    7b08:	95 ff       	sbrs	r25, 5
    7b0a:	04 c0       	rjmp	.+8      	; 0x7b14 <p_ntoa+0x54>
    7b0c:	89 2f       	mov	r24, r25
    7b0e:	8a 70       	andi	r24, 0x0A	; 10
    7b10:	09 f0       	breq	.+2      	; 0x7b14 <p_ntoa+0x54>
    7b12:	c1 2c       	mov	r12, r1
    7b14:	c0 fa       	bst	r12, 0
    7b16:	95 f9       	bld	r25, 5
    7b18:	89 2f       	mov	r24, r25
    7b1a:	82 70       	andi	r24, 0x02	; 2
    7b1c:	c8 2e       	mov	r12, r24
    7b1e:	91 fd       	sbrc	r25, 1
    7b20:	02 c0       	rjmp	.+4      	; 0x7b26 <p_ntoa+0x66>
    7b22:	40 e0       	ldi	r20, 0x00	; 0
    7b24:	50 e0       	ldi	r21, 0x00	; 0
    7b26:	89 2f       	mov	r24, r25
    7b28:	83 70       	andi	r24, 0x03	; 3
    7b2a:	11 f4       	brne	.+4      	; 0x7b30 <p_ntoa+0x70>
    7b2c:	41 e0       	ldi	r20, 0x01	; 1
    7b2e:	50 e0       	ldi	r21, 0x00	; 0
    7b30:	90 ff       	sbrs	r25, 0
    7b32:	0c c0       	rjmp	.+24     	; 0x7b4c <p_ntoa+0x8c>
    7b34:	95 fd       	sbrc	r25, 5
    7b36:	05 c0       	rjmp	.+10     	; 0x7b42 <p_ntoa+0x82>
    7b38:	c1 10       	cpse	r12, r1
    7b3a:	08 c0       	rjmp	.+16     	; 0x7b4c <p_ntoa+0x8c>
    7b3c:	41 e0       	ldi	r20, 0x01	; 1
    7b3e:	50 e0       	ldi	r21, 0x00	; 0
    7b40:	05 c0       	rjmp	.+10     	; 0x7b4c <p_ntoa+0x8c>
    7b42:	94 75       	andi	r25, 0x54	; 84
    7b44:	a7 01       	movw	r20, r14
    7b46:	11 f0       	breq	.+4      	; 0x7b4c <p_ntoa+0x8c>
    7b48:	41 50       	subi	r20, 0x01	; 1
    7b4a:	51 09       	sbc	r21, r1
    7b4c:	68 01       	movw	r12, r16
    7b4e:	7e 01       	movw	r14, r28
    7b50:	8d 01       	movw	r16, r26
    7b52:	cf 01       	movw	r24, r30
    7b54:	fb de       	rcall	.-522    	; 0x794c <bin2num>
    7b56:	df 91       	pop	r29
    7b58:	cf 91       	pop	r28
    7b5a:	1f 91       	pop	r17
    7b5c:	0f 91       	pop	r16
    7b5e:	ff 90       	pop	r15
    7b60:	ef 90       	pop	r14
    7b62:	df 90       	pop	r13
    7b64:	cf 90       	pop	r12
    7b66:	af 90       	pop	r10
    7b68:	08 95       	ret

00007b6a <p_ftoa>:
    7b6a:	2f 92       	push	r2
    7b6c:	3f 92       	push	r3
    7b6e:	4f 92       	push	r4
    7b70:	5f 92       	push	r5
    7b72:	6f 92       	push	r6
    7b74:	7f 92       	push	r7
    7b76:	8f 92       	push	r8
    7b78:	9f 92       	push	r9
    7b7a:	af 92       	push	r10
    7b7c:	bf 92       	push	r11
    7b7e:	cf 92       	push	r12
    7b80:	ef 92       	push	r14
    7b82:	ff 92       	push	r15
    7b84:	0f 93       	push	r16
    7b86:	1f 93       	push	r17
    7b88:	cf 93       	push	r28
    7b8a:	df 93       	push	r29
    7b8c:	4b 01       	movw	r8, r22
    7b8e:	5c 01       	movw	r10, r24
    7b90:	1a 01       	movw	r2, r20
    7b92:	38 01       	movw	r6, r16
    7b94:	c6 fa       	bst	r12, 6
    7b96:	cc 27       	eor	r28, r28
    7b98:	c0 f9       	bld	r28, 0
    7b9a:	b9 01       	movw	r22, r18
    7b9c:	ca 01       	movw	r24, r20
    7b9e:	5f df       	rcall	.-322    	; 0x7a5e <pch_init>
    7ba0:	20 e0       	ldi	r18, 0x00	; 0
    7ba2:	30 e0       	ldi	r19, 0x00	; 0
    7ba4:	a9 01       	movw	r20, r18
    7ba6:	c5 01       	movw	r24, r10
    7ba8:	b4 01       	movw	r22, r8
    7baa:	0e 94 7f e9 	call	0x1d2fe	; 0x1d2fe <__cmpsf2>
    7bae:	87 ff       	sbrs	r24, 7
    7bb0:	05 c0       	rjmp	.+10     	; 0x7bbc <p_ftoa+0x52>
    7bb2:	b7 fa       	bst	r11, 7
    7bb4:	b0 94       	com	r11
    7bb6:	b7 f8       	bld	r11, 7
    7bb8:	b0 94       	com	r11
    7bba:	c1 e0       	ldi	r28, 0x01	; 1
    7bbc:	c0 fb       	bst	r28, 0
    7bbe:	c6 f8       	bld	r12, 6
    7bc0:	c6 fe       	sbrs	r12, 6
    7bc2:	02 c0       	rjmp	.+4      	; 0x7bc8 <p_ftoa+0x5e>
    7bc4:	8d e2       	ldi	r24, 0x2D	; 45
    7bc6:	07 c0       	rjmp	.+14     	; 0x7bd6 <p_ftoa+0x6c>
    7bc8:	c2 fe       	sbrs	r12, 2
    7bca:	02 c0       	rjmp	.+4      	; 0x7bd0 <p_ftoa+0x66>
    7bcc:	8b e2       	ldi	r24, 0x2B	; 43
    7bce:	03 c0       	rjmp	.+6      	; 0x7bd6 <p_ftoa+0x6c>
    7bd0:	c4 fe       	sbrs	r12, 4
    7bd2:	02 c0       	rjmp	.+4      	; 0x7bd8 <p_ftoa+0x6e>
    7bd4:	80 e2       	ldi	r24, 0x20	; 32
    7bd6:	50 df       	rcall	.-352    	; 0x7a78 <pch>
    7bd8:	e7 01       	movw	r28, r14
    7bda:	f7 fe       	sbrs	r15, 7
    7bdc:	02 c0       	rjmp	.+4      	; 0x7be2 <p_ftoa+0x78>
    7bde:	c0 e0       	ldi	r28, 0x00	; 0
    7be0:	d0 e0       	ldi	r29, 0x00	; 0
    7be2:	20 e0       	ldi	r18, 0x00	; 0
    7be4:	30 e0       	ldi	r19, 0x00	; 0
    7be6:	a9 01       	movw	r20, r18
    7be8:	c5 01       	movw	r24, r10
    7bea:	b4 01       	movw	r22, r8
    7bec:	0e 94 7f e9 	call	0x1d2fe	; 0x1d2fe <__cmpsf2>
    7bf0:	88 23       	and	r24, r24
    7bf2:	d1 f1       	breq	.+116    	; 0x7c68 <p_ftoa+0xfe>
    7bf4:	c1 fe       	sbrs	r12, 1
    7bf6:	11 c0       	rjmp	.+34     	; 0x7c1a <p_ftoa+0xb0>
    7bf8:	8e 01       	movw	r16, r28
    7bfa:	60 e0       	ldi	r22, 0x00	; 0
    7bfc:	70 e0       	ldi	r23, 0x00	; 0
    7bfe:	80 e0       	ldi	r24, 0x00	; 0
    7c00:	9f e3       	ldi	r25, 0x3F	; 63
    7c02:	01 15       	cp	r16, r1
    7c04:	11 05       	cpc	r17, r1
    7c06:	69 f0       	breq	.+26     	; 0x7c22 <p_ftoa+0xb8>
    7c08:	20 e0       	ldi	r18, 0x00	; 0
    7c0a:	30 e0       	ldi	r19, 0x00	; 0
    7c0c:	40 e2       	ldi	r20, 0x20	; 32
    7c0e:	51 e4       	ldi	r21, 0x41	; 65
    7c10:	0e 94 83 e9 	call	0x1d306	; 0x1d306 <__divsf3>
    7c14:	01 50       	subi	r16, 0x01	; 1
    7c16:	11 09       	sbc	r17, r1
    7c18:	f4 cf       	rjmp	.-24     	; 0x7c02 <p_ftoa+0x98>
    7c1a:	60 e0       	ldi	r22, 0x00	; 0
    7c1c:	70 e0       	ldi	r23, 0x00	; 0
    7c1e:	80 e0       	ldi	r24, 0x00	; 0
    7c20:	9f e3       	ldi	r25, 0x3F	; 63
    7c22:	9b 01       	movw	r18, r22
    7c24:	ac 01       	movw	r20, r24
    7c26:	c5 01       	movw	r24, r10
    7c28:	b4 01       	movw	r22, r8
    7c2a:	0e 94 1b e9 	call	0x1d236	; 0x1d236 <__addsf3>
    7c2e:	4b 01       	movw	r8, r22
    7c30:	5c 01       	movw	r10, r24
    7c32:	ee 24       	eor	r14, r14
    7c34:	e3 94       	inc	r14
    7c36:	f1 2c       	mov	r15, r1
    7c38:	20 e0       	ldi	r18, 0x00	; 0
    7c3a:	30 e0       	ldi	r19, 0x00	; 0
    7c3c:	40 e2       	ldi	r20, 0x20	; 32
    7c3e:	51 e4       	ldi	r21, 0x41	; 65
    7c40:	c5 01       	movw	r24, r10
    7c42:	b4 01       	movw	r22, r8
    7c44:	0e 94 ce ea 	call	0x1d59c	; 0x1d59c <__gesf2>
    7c48:	87 fd       	sbrc	r24, 7
    7c4a:	11 c0       	rjmp	.+34     	; 0x7c6e <p_ftoa+0x104>
    7c4c:	2f ef       	ldi	r18, 0xFF	; 255
    7c4e:	e2 1a       	sub	r14, r18
    7c50:	f2 0a       	sbc	r15, r18
    7c52:	20 e0       	ldi	r18, 0x00	; 0
    7c54:	30 e0       	ldi	r19, 0x00	; 0
    7c56:	40 e2       	ldi	r20, 0x20	; 32
    7c58:	51 e4       	ldi	r21, 0x41	; 65
    7c5a:	c5 01       	movw	r24, r10
    7c5c:	b4 01       	movw	r22, r8
    7c5e:	0e 94 83 e9 	call	0x1d306	; 0x1d306 <__divsf3>
    7c62:	4b 01       	movw	r8, r22
    7c64:	5c 01       	movw	r10, r24
    7c66:	e8 cf       	rjmp	.-48     	; 0x7c38 <p_ftoa+0xce>
    7c68:	ee 24       	eor	r14, r14
    7c6a:	e3 94       	inc	r14
    7c6c:	f1 2c       	mov	r15, r1
    7c6e:	8c 2d       	mov	r24, r12
    7c70:	88 72       	andi	r24, 0x28	; 40
    7c72:	80 32       	cpi	r24, 0x20	; 32
    7c74:	b9 f4       	brne	.+46     	; 0x7ca4 <p_ftoa+0x13a>
    7c76:	83 01       	movw	r16, r6
    7c78:	0e 19       	sub	r16, r14
    7c7a:	1f 09       	sbc	r17, r15
    7c7c:	80 91 2d 1a 	lds	r24, 0x1A2D	; 0x801a2d <_pch+0x2>
    7c80:	90 91 2e 1a 	lds	r25, 0x1A2E	; 0x801a2e <_pch+0x3>
    7c84:	08 1b       	sub	r16, r24
    7c86:	19 0b       	sbc	r17, r25
    7c88:	c1 fe       	sbrs	r12, 1
    7c8a:	06 c0       	rjmp	.+12     	; 0x7c98 <p_ftoa+0x12e>
    7c8c:	20 97       	sbiw	r28, 0x00	; 0
    7c8e:	21 f0       	breq	.+8      	; 0x7c98 <p_ftoa+0x12e>
    7c90:	0c 1b       	sub	r16, r28
    7c92:	1d 0b       	sbc	r17, r29
    7c94:	01 50       	subi	r16, 0x01	; 1
    7c96:	11 09       	sbc	r17, r1
    7c98:	10 16       	cp	r1, r16
    7c9a:	11 06       	cpc	r1, r17
    7c9c:	1c f4       	brge	.+6      	; 0x7ca4 <p_ftoa+0x13a>
    7c9e:	80 e3       	ldi	r24, 0x30	; 48
    7ca0:	eb de       	rcall	.-554    	; 0x7a78 <pch>
    7ca2:	f8 cf       	rjmp	.-16     	; 0x7c94 <p_ftoa+0x12a>
    7ca4:	c5 01       	movw	r24, r10
    7ca6:	b4 01       	movw	r22, r8
    7ca8:	0e 94 eb e9 	call	0x1d3d6	; 0x1d3d6 <__fixsfsi>
    7cac:	2b 01       	movw	r4, r22
    7cae:	3c 01       	movw	r6, r24
    7cb0:	80 e3       	ldi	r24, 0x30	; 48
    7cb2:	84 0d       	add	r24, r4
    7cb4:	e1 de       	rcall	.-574    	; 0x7a78 <pch>
    7cb6:	b2 01       	movw	r22, r4
    7cb8:	55 0c       	add	r5, r5
    7cba:	88 0b       	sbc	r24, r24
    7cbc:	99 0b       	sbc	r25, r25
    7cbe:	0e 94 1e ea 	call	0x1d43c	; 0x1d43c <__floatsisf>
    7cc2:	9b 01       	movw	r18, r22
    7cc4:	ac 01       	movw	r20, r24
    7cc6:	c5 01       	movw	r24, r10
    7cc8:	b4 01       	movw	r22, r8
    7cca:	0e 94 1a e9 	call	0x1d234	; 0x1d234 <__subsf3>
    7cce:	21 e0       	ldi	r18, 0x01	; 1
    7cd0:	e2 1a       	sub	r14, r18
    7cd2:	f1 08       	sbc	r15, r1
    7cd4:	20 e0       	ldi	r18, 0x00	; 0
    7cd6:	30 e0       	ldi	r19, 0x00	; 0
    7cd8:	40 e2       	ldi	r20, 0x20	; 32
    7cda:	51 e4       	ldi	r21, 0x41	; 65
    7cdc:	0e 94 d2 ea 	call	0x1d5a4	; 0x1d5a4 <__mulsf3>
    7ce0:	4b 01       	movw	r8, r22
    7ce2:	5c 01       	movw	r10, r24
    7ce4:	e1 14       	cp	r14, r1
    7ce6:	f1 04       	cpc	r15, r1
    7ce8:	e9 f6       	brne	.-70     	; 0x7ca4 <p_ftoa+0x13a>
    7cea:	c1 fc       	sbrc	r12, 1
    7cec:	1c c0       	rjmp	.+56     	; 0x7d26 <p_ftoa+0x1bc>
    7cee:	80 e0       	ldi	r24, 0x00	; 0
    7cf0:	c3 de       	rcall	.-634    	; 0x7a78 <pch>
    7cf2:	f1 01       	movw	r30, r2
    7cf4:	01 90       	ld	r0, Z+
    7cf6:	00 20       	and	r0, r0
    7cf8:	e9 f7       	brne	.-6      	; 0x7cf4 <p_ftoa+0x18a>
    7cfa:	31 97       	sbiw	r30, 0x01	; 1
    7cfc:	cf 01       	movw	r24, r30
    7cfe:	82 19       	sub	r24, r2
    7d00:	93 09       	sbc	r25, r3
    7d02:	df 91       	pop	r29
    7d04:	cf 91       	pop	r28
    7d06:	1f 91       	pop	r17
    7d08:	0f 91       	pop	r16
    7d0a:	ff 90       	pop	r15
    7d0c:	ef 90       	pop	r14
    7d0e:	cf 90       	pop	r12
    7d10:	bf 90       	pop	r11
    7d12:	af 90       	pop	r10
    7d14:	9f 90       	pop	r9
    7d16:	8f 90       	pop	r8
    7d18:	7f 90       	pop	r7
    7d1a:	6f 90       	pop	r6
    7d1c:	5f 90       	pop	r5
    7d1e:	4f 90       	pop	r4
    7d20:	3f 90       	pop	r3
    7d22:	2f 90       	pop	r2
    7d24:	08 95       	ret
    7d26:	20 97       	sbiw	r28, 0x00	; 0
    7d28:	11 f3       	breq	.-60     	; 0x7cee <p_ftoa+0x184>
    7d2a:	8e e2       	ldi	r24, 0x2E	; 46
    7d2c:	a5 de       	rcall	.-694    	; 0x7a78 <pch>
    7d2e:	c5 01       	movw	r24, r10
    7d30:	b4 01       	movw	r22, r8
    7d32:	0e 94 eb e9 	call	0x1d3d6	; 0x1d3d6 <__fixsfsi>
    7d36:	2b 01       	movw	r4, r22
    7d38:	3c 01       	movw	r6, r24
    7d3a:	07 2e       	mov	r0, r23
    7d3c:	00 0c       	add	r0, r0
    7d3e:	88 0b       	sbc	r24, r24
    7d40:	99 0b       	sbc	r25, r25
    7d42:	0e 94 1e ea 	call	0x1d43c	; 0x1d43c <__floatsisf>
    7d46:	9b 01       	movw	r18, r22
    7d48:	ac 01       	movw	r20, r24
    7d4a:	c5 01       	movw	r24, r10
    7d4c:	b4 01       	movw	r22, r8
    7d4e:	0e 94 1a e9 	call	0x1d234	; 0x1d234 <__subsf3>
    7d52:	4b 01       	movw	r8, r22
    7d54:	5c 01       	movw	r10, r24
    7d56:	80 e3       	ldi	r24, 0x30	; 48
    7d58:	84 0d       	add	r24, r4
    7d5a:	8e de       	rcall	.-740    	; 0x7a78 <pch>
    7d5c:	21 97       	sbiw	r28, 0x01	; 1
    7d5e:	20 e0       	ldi	r18, 0x00	; 0
    7d60:	30 e0       	ldi	r19, 0x00	; 0
    7d62:	40 e2       	ldi	r20, 0x20	; 32
    7d64:	51 e4       	ldi	r21, 0x41	; 65
    7d66:	c5 01       	movw	r24, r10
    7d68:	b4 01       	movw	r22, r8
    7d6a:	0e 94 d2 ea 	call	0x1d5a4	; 0x1d5a4 <__mulsf3>
    7d6e:	4b 01       	movw	r8, r22
    7d70:	5c 01       	movw	r10, r24
    7d72:	20 97       	sbiw	r28, 0x00	; 0
    7d74:	e1 f6       	brne	.-72     	; 0x7d2e <p_ftoa+0x1c4>
    7d76:	bb cf       	rjmp	.-138    	; 0x7cee <p_ftoa+0x184>

00007d78 <p_etoa>:
    7d78:	ad e0       	ldi	r26, 0x0D	; 13
    7d7a:	b0 e0       	ldi	r27, 0x00	; 0
    7d7c:	e2 ec       	ldi	r30, 0xC2	; 194
    7d7e:	fe e3       	ldi	r31, 0x3E	; 62
    7d80:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__prologue_saves__>
    7d84:	4b 01       	movw	r8, r22
    7d86:	5c 01       	movw	r10, r24
    7d88:	5b 87       	std	Y+11, r21	; 0x0b
    7d8a:	4a 87       	std	Y+10, r20	; 0x0a
    7d8c:	1d 87       	std	Y+13, r17	; 0x0d
    7d8e:	0c 87       	std	Y+12, r16	; 0x0c
    7d90:	3c 2c       	mov	r3, r12
    7d92:	c6 fa       	bst	r12, 6
    7d94:	11 27       	eor	r17, r17
    7d96:	10 f9       	bld	r17, 0
    7d98:	b9 01       	movw	r22, r18
    7d9a:	ca 01       	movw	r24, r20
    7d9c:	60 de       	rcall	.-832    	; 0x7a5e <pch_init>
    7d9e:	20 e0       	ldi	r18, 0x00	; 0
    7da0:	30 e0       	ldi	r19, 0x00	; 0
    7da2:	a9 01       	movw	r20, r18
    7da4:	c5 01       	movw	r24, r10
    7da6:	b4 01       	movw	r22, r8
    7da8:	0e 94 7f e9 	call	0x1d2fe	; 0x1d2fe <__cmpsf2>
    7dac:	87 ff       	sbrs	r24, 7
    7dae:	05 c0       	rjmp	.+10     	; 0x7dba <p_etoa+0x42>
    7db0:	b7 fa       	bst	r11, 7
    7db2:	b0 94       	com	r11
    7db4:	b7 f8       	bld	r11, 7
    7db6:	b0 94       	com	r11
    7db8:	11 e0       	ldi	r17, 0x01	; 1
    7dba:	10 fb       	bst	r17, 0
    7dbc:	36 f8       	bld	r3, 6
    7dbe:	36 fe       	sbrs	r3, 6
    7dc0:	02 c0       	rjmp	.+4      	; 0x7dc6 <p_etoa+0x4e>
    7dc2:	8d e2       	ldi	r24, 0x2D	; 45
    7dc4:	07 c0       	rjmp	.+14     	; 0x7dd4 <p_etoa+0x5c>
    7dc6:	32 fe       	sbrs	r3, 2
    7dc8:	02 c0       	rjmp	.+4      	; 0x7dce <p_etoa+0x56>
    7dca:	8b e2       	ldi	r24, 0x2B	; 43
    7dcc:	03 c0       	rjmp	.+6      	; 0x7dd4 <p_etoa+0x5c>
    7dce:	34 fe       	sbrs	r3, 4
    7dd0:	02 c0       	rjmp	.+4      	; 0x7dd6 <p_etoa+0x5e>
    7dd2:	80 e2       	ldi	r24, 0x20	; 32
    7dd4:	51 de       	rcall	.-862    	; 0x7a78 <pch>
    7dd6:	37 01       	movw	r6, r14
    7dd8:	f7 fe       	sbrs	r15, 7
    7dda:	02 c0       	rjmp	.+4      	; 0x7de0 <p_etoa+0x68>
    7ddc:	61 2c       	mov	r6, r1
    7dde:	71 2c       	mov	r7, r1
    7de0:	19 86       	std	Y+9, r1	; 0x09
    7de2:	18 86       	std	Y+8, r1	; 0x08
    7de4:	20 e0       	ldi	r18, 0x00	; 0
    7de6:	30 e0       	ldi	r19, 0x00	; 0
    7de8:	a9 01       	movw	r20, r18
    7dea:	c5 01       	movw	r24, r10
    7dec:	b4 01       	movw	r22, r8
    7dee:	0e 94 7f e9 	call	0x1d2fe	; 0x1d2fe <__cmpsf2>
    7df2:	23 2d       	mov	r18, r3
    7df4:	22 70       	andi	r18, 0x02	; 2
    7df6:	22 2e       	mov	r2, r18
    7df8:	88 23       	and	r24, r24
    7dfa:	09 f4       	brne	.+2      	; 0x7dfe <p_etoa+0x86>
    7dfc:	70 c0       	rjmp	.+224    	; 0x7ede <p_etoa+0x166>
    7dfe:	22 23       	and	r18, r18
    7e00:	b1 f0       	breq	.+44     	; 0x7e2e <p_etoa+0xb6>
    7e02:	83 01       	movw	r16, r6
    7e04:	c1 2c       	mov	r12, r1
    7e06:	d1 2c       	mov	r13, r1
    7e08:	e1 2c       	mov	r14, r1
    7e0a:	2f e3       	ldi	r18, 0x3F	; 63
    7e0c:	f2 2e       	mov	r15, r18
    7e0e:	01 15       	cp	r16, r1
    7e10:	11 05       	cpc	r17, r1
    7e12:	91 f0       	breq	.+36     	; 0x7e38 <p_etoa+0xc0>
    7e14:	20 e0       	ldi	r18, 0x00	; 0
    7e16:	30 e0       	ldi	r19, 0x00	; 0
    7e18:	40 e2       	ldi	r20, 0x20	; 32
    7e1a:	51 e4       	ldi	r21, 0x41	; 65
    7e1c:	c7 01       	movw	r24, r14
    7e1e:	b6 01       	movw	r22, r12
    7e20:	0e 94 83 e9 	call	0x1d306	; 0x1d306 <__divsf3>
    7e24:	6b 01       	movw	r12, r22
    7e26:	7c 01       	movw	r14, r24
    7e28:	01 50       	subi	r16, 0x01	; 1
    7e2a:	11 09       	sbc	r17, r1
    7e2c:	f0 cf       	rjmp	.-32     	; 0x7e0e <p_etoa+0x96>
    7e2e:	c1 2c       	mov	r12, r1
    7e30:	d1 2c       	mov	r13, r1
    7e32:	e1 2c       	mov	r14, r1
    7e34:	9f e3       	ldi	r25, 0x3F	; 63
    7e36:	f9 2e       	mov	r15, r25
    7e38:	41 2c       	mov	r4, r1
    7e3a:	51 2c       	mov	r5, r1
    7e3c:	82 01       	movw	r16, r4
    7e3e:	01 50       	subi	r16, 0x01	; 1
    7e40:	11 09       	sbc	r17, r1
    7e42:	20 e0       	ldi	r18, 0x00	; 0
    7e44:	30 e0       	ldi	r19, 0x00	; 0
    7e46:	40 e8       	ldi	r20, 0x80	; 128
    7e48:	5f e3       	ldi	r21, 0x3F	; 63
    7e4a:	c5 01       	movw	r24, r10
    7e4c:	b4 01       	movw	r22, r8
    7e4e:	0e 94 7f e9 	call	0x1d2fe	; 0x1d2fe <__cmpsf2>
    7e52:	87 ff       	sbrs	r24, 7
    7e54:	0c c0       	rjmp	.+24     	; 0x7e6e <p_etoa+0xf6>
    7e56:	20 e0       	ldi	r18, 0x00	; 0
    7e58:	30 e0       	ldi	r19, 0x00	; 0
    7e5a:	40 e2       	ldi	r20, 0x20	; 32
    7e5c:	51 e4       	ldi	r21, 0x41	; 65
    7e5e:	c5 01       	movw	r24, r10
    7e60:	b4 01       	movw	r22, r8
    7e62:	0e 94 d2 ea 	call	0x1d5a4	; 0x1d5a4 <__mulsf3>
    7e66:	4b 01       	movw	r8, r22
    7e68:	5c 01       	movw	r10, r24
    7e6a:	28 01       	movw	r4, r16
    7e6c:	e7 cf       	rjmp	.-50     	; 0x7e3c <p_etoa+0xc4>
    7e6e:	82 01       	movw	r16, r4
    7e70:	0f 5f       	subi	r16, 0xFF	; 255
    7e72:	1f 4f       	sbci	r17, 0xFF	; 255
    7e74:	20 e0       	ldi	r18, 0x00	; 0
    7e76:	30 e0       	ldi	r19, 0x00	; 0
    7e78:	40 e2       	ldi	r20, 0x20	; 32
    7e7a:	51 e4       	ldi	r21, 0x41	; 65
    7e7c:	c5 01       	movw	r24, r10
    7e7e:	b4 01       	movw	r22, r8
    7e80:	0e 94 ce ea 	call	0x1d59c	; 0x1d59c <__gesf2>
    7e84:	87 fd       	sbrc	r24, 7
    7e86:	0c c0       	rjmp	.+24     	; 0x7ea0 <p_etoa+0x128>
    7e88:	20 e0       	ldi	r18, 0x00	; 0
    7e8a:	30 e0       	ldi	r19, 0x00	; 0
    7e8c:	40 e2       	ldi	r20, 0x20	; 32
    7e8e:	51 e4       	ldi	r21, 0x41	; 65
    7e90:	c5 01       	movw	r24, r10
    7e92:	b4 01       	movw	r22, r8
    7e94:	0e 94 83 e9 	call	0x1d306	; 0x1d306 <__divsf3>
    7e98:	4b 01       	movw	r8, r22
    7e9a:	5c 01       	movw	r10, r24
    7e9c:	28 01       	movw	r4, r16
    7e9e:	e7 cf       	rjmp	.-50     	; 0x7e6e <p_etoa+0xf6>
    7ea0:	a7 01       	movw	r20, r14
    7ea2:	96 01       	movw	r18, r12
    7ea4:	c5 01       	movw	r24, r10
    7ea6:	b4 01       	movw	r22, r8
    7ea8:	0e 94 1b e9 	call	0x1d236	; 0x1d236 <__addsf3>
    7eac:	4b 01       	movw	r8, r22
    7eae:	5c 01       	movw	r10, r24
    7eb0:	82 01       	movw	r16, r4
    7eb2:	3f ef       	ldi	r19, 0xFF	; 255
    7eb4:	43 1a       	sub	r4, r19
    7eb6:	53 0a       	sbc	r5, r19
    7eb8:	20 e0       	ldi	r18, 0x00	; 0
    7eba:	30 e0       	ldi	r19, 0x00	; 0
    7ebc:	40 e2       	ldi	r20, 0x20	; 32
    7ebe:	51 e4       	ldi	r21, 0x41	; 65
    7ec0:	0e 94 ce ea 	call	0x1d59c	; 0x1d59c <__gesf2>
    7ec4:	87 fd       	sbrc	r24, 7
    7ec6:	09 c0       	rjmp	.+18     	; 0x7eda <p_etoa+0x162>
    7ec8:	20 e0       	ldi	r18, 0x00	; 0
    7eca:	30 e0       	ldi	r19, 0x00	; 0
    7ecc:	40 e2       	ldi	r20, 0x20	; 32
    7ece:	51 e4       	ldi	r21, 0x41	; 65
    7ed0:	c5 01       	movw	r24, r10
    7ed2:	b4 01       	movw	r22, r8
    7ed4:	0e 94 83 e9 	call	0x1d306	; 0x1d306 <__divsf3>
    7ed8:	e9 cf       	rjmp	.-46     	; 0x7eac <p_etoa+0x134>
    7eda:	08 87       	std	Y+8, r16	; 0x08
    7edc:	19 87       	std	Y+9, r17	; 0x09
    7ede:	85 e6       	ldi	r24, 0x65	; 101
    7ee0:	89 83       	std	Y+1, r24	; 0x01
    7ee2:	88 85       	ldd	r24, Y+8	; 0x08
    7ee4:	99 85       	ldd	r25, Y+9	; 0x09
    7ee6:	97 ff       	sbrs	r25, 7
    7ee8:	08 c0       	rjmp	.+16     	; 0x7efa <p_etoa+0x182>
    7eea:	91 95       	neg	r25
    7eec:	81 95       	neg	r24
    7eee:	91 09       	sbc	r25, r1
    7ef0:	99 87       	std	Y+9, r25	; 0x09
    7ef2:	88 87       	std	Y+8, r24	; 0x08
    7ef4:	8d e2       	ldi	r24, 0x2D	; 45
    7ef6:	90 e0       	ldi	r25, 0x00	; 0
    7ef8:	02 c0       	rjmp	.+4      	; 0x7efe <p_etoa+0x186>
    7efa:	8b e2       	ldi	r24, 0x2B	; 43
    7efc:	90 e0       	ldi	r25, 0x00	; 0
    7efe:	6c 01       	movw	r12, r24
    7f00:	82 e0       	ldi	r24, 0x02	; 2
    7f02:	e8 2e       	mov	r14, r24
    7f04:	f1 2c       	mov	r15, r1
    7f06:	8e 01       	movw	r16, r28
    7f08:	08 5f       	subi	r16, 0xF8	; 248
    7f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    7f0c:	2a e0       	ldi	r18, 0x0A	; 10
    7f0e:	30 e0       	ldi	r19, 0x00	; 0
    7f10:	42 e0       	ldi	r20, 0x02	; 2
    7f12:	50 e0       	ldi	r21, 0x00	; 0
    7f14:	65 e0       	ldi	r22, 0x05	; 5
    7f16:	70 e0       	ldi	r23, 0x00	; 0
    7f18:	ce 01       	movw	r24, r28
    7f1a:	02 96       	adiw	r24, 0x02	; 2
    7f1c:	17 dd       	rcall	.-1490   	; 0x794c <bin2num>
    7f1e:	9c 01       	movw	r18, r24
    7f20:	93 2d       	mov	r25, r3
    7f22:	98 72       	andi	r25, 0x28	; 40
    7f24:	90 32       	cpi	r25, 0x20	; 32
    7f26:	61 f0       	breq	.+24     	; 0x7f40 <p_etoa+0x1c8>
    7f28:	c5 01       	movw	r24, r10
    7f2a:	b4 01       	movw	r22, r8
    7f2c:	0e 94 eb e9 	call	0x1d3d6	; 0x1d3d6 <__fixsfsi>
    7f30:	6b 01       	movw	r12, r22
    7f32:	7c 01       	movw	r14, r24
    7f34:	80 e3       	ldi	r24, 0x30	; 48
    7f36:	8c 0d       	add	r24, r12
    7f38:	9f dd       	rcall	.-1218   	; 0x7a78 <pch>
    7f3a:	21 10       	cpse	r2, r1
    7f3c:	20 c0       	rjmp	.+64     	; 0x7f7e <p_etoa+0x206>
    7f3e:	5e c0       	rjmp	.+188    	; 0x7ffc <p_etoa+0x284>
    7f40:	80 91 2d 1a 	lds	r24, 0x1A2D	; 0x801a2d <_pch+0x2>
    7f44:	90 91 2e 1a 	lds	r25, 0x1A2E	; 0x801a2e <_pch+0x3>
    7f48:	0c 85       	ldd	r16, Y+12	; 0x0c
    7f4a:	1d 85       	ldd	r17, Y+13	; 0x0d
    7f4c:	08 1b       	sub	r16, r24
    7f4e:	19 0b       	sbc	r17, r25
    7f50:	22 20       	and	r2, r2
    7f52:	41 f0       	breq	.+16     	; 0x7f64 <p_etoa+0x1ec>
    7f54:	61 14       	cp	r6, r1
    7f56:	71 04       	cpc	r7, r1
    7f58:	29 f0       	breq	.+10     	; 0x7f64 <p_etoa+0x1ec>
    7f5a:	06 19       	sub	r16, r6
    7f5c:	17 09       	sbc	r17, r7
    7f5e:	06 50       	subi	r16, 0x06	; 6
    7f60:	11 09       	sbc	r17, r1
    7f62:	02 c0       	rjmp	.+4      	; 0x7f68 <p_etoa+0x1f0>
    7f64:	05 50       	subi	r16, 0x05	; 5
    7f66:	11 09       	sbc	r17, r1
    7f68:	24 30       	cpi	r18, 0x04	; 4
    7f6a:	31 05       	cpc	r19, r1
    7f6c:	14 f0       	brlt	.+4      	; 0x7f72 <p_etoa+0x1fa>
    7f6e:	01 50       	subi	r16, 0x01	; 1
    7f70:	11 09       	sbc	r17, r1
    7f72:	10 16       	cp	r1, r16
    7f74:	11 06       	cpc	r1, r17
    7f76:	c4 f6       	brge	.-80     	; 0x7f28 <p_etoa+0x1b0>
    7f78:	80 e3       	ldi	r24, 0x30	; 48
    7f7a:	7e dd       	rcall	.-1284   	; 0x7a78 <pch>
    7f7c:	f8 cf       	rjmp	.-16     	; 0x7f6e <p_etoa+0x1f6>
    7f7e:	61 14       	cp	r6, r1
    7f80:	71 04       	cpc	r7, r1
    7f82:	09 f4       	brne	.+2      	; 0x7f86 <p_etoa+0x20e>
    7f84:	3b c0       	rjmp	.+118    	; 0x7ffc <p_etoa+0x284>
    7f86:	b6 01       	movw	r22, r12
    7f88:	dd 0c       	add	r13, r13
    7f8a:	88 0b       	sbc	r24, r24
    7f8c:	99 0b       	sbc	r25, r25
    7f8e:	0e 94 1e ea 	call	0x1d43c	; 0x1d43c <__floatsisf>
    7f92:	9b 01       	movw	r18, r22
    7f94:	ac 01       	movw	r20, r24
    7f96:	c5 01       	movw	r24, r10
    7f98:	b4 01       	movw	r22, r8
    7f9a:	0e 94 1a e9 	call	0x1d234	; 0x1d234 <__subsf3>
    7f9e:	20 e0       	ldi	r18, 0x00	; 0
    7fa0:	30 e0       	ldi	r19, 0x00	; 0
    7fa2:	40 e2       	ldi	r20, 0x20	; 32
    7fa4:	51 e4       	ldi	r21, 0x41	; 65
    7fa6:	0e 94 d2 ea 	call	0x1d5a4	; 0x1d5a4 <__mulsf3>
    7faa:	6b 01       	movw	r12, r22
    7fac:	7c 01       	movw	r14, r24
    7fae:	8e e2       	ldi	r24, 0x2E	; 46
    7fb0:	63 dd       	rcall	.-1338   	; 0x7a78 <pch>
    7fb2:	c7 01       	movw	r24, r14
    7fb4:	b6 01       	movw	r22, r12
    7fb6:	0e 94 eb e9 	call	0x1d3d6	; 0x1d3d6 <__fixsfsi>
    7fba:	4b 01       	movw	r8, r22
    7fbc:	5c 01       	movw	r10, r24
    7fbe:	07 2e       	mov	r0, r23
    7fc0:	00 0c       	add	r0, r0
    7fc2:	88 0b       	sbc	r24, r24
    7fc4:	99 0b       	sbc	r25, r25
    7fc6:	0e 94 1e ea 	call	0x1d43c	; 0x1d43c <__floatsisf>
    7fca:	9b 01       	movw	r18, r22
    7fcc:	ac 01       	movw	r20, r24
    7fce:	c7 01       	movw	r24, r14
    7fd0:	b6 01       	movw	r22, r12
    7fd2:	0e 94 1a e9 	call	0x1d234	; 0x1d234 <__subsf3>
    7fd6:	6b 01       	movw	r12, r22
    7fd8:	7c 01       	movw	r14, r24
    7fda:	80 e3       	ldi	r24, 0x30	; 48
    7fdc:	88 0d       	add	r24, r8
    7fde:	4c dd       	rcall	.-1384   	; 0x7a78 <pch>
    7fe0:	20 e0       	ldi	r18, 0x00	; 0
    7fe2:	30 e0       	ldi	r19, 0x00	; 0
    7fe4:	40 e2       	ldi	r20, 0x20	; 32
    7fe6:	51 e4       	ldi	r21, 0x41	; 65
    7fe8:	c7 01       	movw	r24, r14
    7fea:	b6 01       	movw	r22, r12
    7fec:	0e 94 d2 ea 	call	0x1d5a4	; 0x1d5a4 <__mulsf3>
    7ff0:	6b 01       	movw	r12, r22
    7ff2:	7c 01       	movw	r14, r24
    7ff4:	81 e0       	ldi	r24, 0x01	; 1
    7ff6:	68 1a       	sub	r6, r24
    7ff8:	71 08       	sbc	r7, r1
    7ffa:	d9 f6       	brne	.-74     	; 0x7fb2 <p_etoa+0x23a>
    7ffc:	8e 01       	movw	r16, r28
    7ffe:	0f 5f       	subi	r16, 0xFF	; 255
    8000:	1f 4f       	sbci	r17, 0xFF	; 255
    8002:	f8 01       	movw	r30, r16
    8004:	81 91       	ld	r24, Z+
    8006:	8f 01       	movw	r16, r30
    8008:	88 23       	and	r24, r24
    800a:	11 f0       	breq	.+4      	; 0x8010 <p_etoa+0x298>
    800c:	35 dd       	rcall	.-1430   	; 0x7a78 <pch>
    800e:	f9 cf       	rjmp	.-14     	; 0x8002 <p_etoa+0x28a>
    8010:	33 dd       	rcall	.-1434   	; 0x7a78 <pch>
    8012:	ea 85       	ldd	r30, Y+10	; 0x0a
    8014:	fb 85       	ldd	r31, Y+11	; 0x0b
    8016:	01 90       	ld	r0, Z+
    8018:	00 20       	and	r0, r0
    801a:	e9 f7       	brne	.-6      	; 0x8016 <p_etoa+0x29e>
    801c:	cf 01       	movw	r24, r30
    801e:	01 97       	sbiw	r24, 0x01	; 1
    8020:	2a 85       	ldd	r18, Y+10	; 0x0a
    8022:	3b 85       	ldd	r19, Y+11	; 0x0b
    8024:	82 1b       	sub	r24, r18
    8026:	93 0b       	sbc	r25, r19
    8028:	2d 96       	adiw	r28, 0x0d	; 13
    802a:	e2 e1       	ldi	r30, 0x12	; 18
    802c:	0c 94 dd e8 	jmp	0x1d1ba	; 0x1d1ba <__epilogue_restores__>

00008030 <_puts_pad>:
    8030:	a0 e0       	ldi	r26, 0x00	; 0
    8032:	b0 e0       	ldi	r27, 0x00	; 0
    8034:	ee e1       	ldi	r30, 0x1E	; 30
    8036:	f0 e4       	ldi	r31, 0x40	; 64
    8038:	0c 94 c7 e8 	jmp	0x1d18e	; 0x1d18e <__prologue_saves__+0xc>
    803c:	6c 01       	movw	r12, r24
    803e:	4b 01       	movw	r8, r22
    8040:	79 01       	movw	r14, r18
    8042:	24 17       	cp	r18, r20
    8044:	35 07       	cpc	r19, r21
    8046:	24 f4       	brge	.+8      	; 0x8050 <_puts_pad+0x20>
    8048:	ea 01       	movw	r28, r20
    804a:	c2 1b       	sub	r28, r18
    804c:	d3 0b       	sbc	r29, r19
    804e:	02 c0       	rjmp	.+4      	; 0x8054 <_puts_pad+0x24>
    8050:	c0 e0       	ldi	r28, 0x00	; 0
    8052:	d0 e0       	ldi	r29, 0x00	; 0
    8054:	01 15       	cp	r16, r1
    8056:	11 05       	cpc	r17, r1
    8058:	49 f4       	brne	.+18     	; 0x806c <_puts_pad+0x3c>
    805a:	21 97       	sbiw	r28, 0x01	; 1
    805c:	38 f0       	brcs	.+14     	; 0x806c <_puts_pad+0x3c>
    805e:	d6 01       	movw	r26, r12
    8060:	ed 91       	ld	r30, X+
    8062:	fc 91       	ld	r31, X
    8064:	60 e2       	ldi	r22, 0x20	; 32
    8066:	c6 01       	movw	r24, r12
    8068:	09 95       	icall
    806a:	f7 cf       	rjmp	.-18     	; 0x805a <_puts_pad+0x2a>
    806c:	54 01       	movw	r10, r8
    806e:	f5 01       	movw	r30, r10
    8070:	61 91       	ld	r22, Z+
    8072:	5f 01       	movw	r10, r30
    8074:	66 23       	and	r22, r22
    8076:	61 f0       	breq	.+24     	; 0x8090 <_puts_pad+0x60>
    8078:	e1 14       	cp	r14, r1
    807a:	f1 04       	cpc	r15, r1
    807c:	49 f0       	breq	.+18     	; 0x8090 <_puts_pad+0x60>
    807e:	d6 01       	movw	r26, r12
    8080:	ed 91       	ld	r30, X+
    8082:	fc 91       	ld	r31, X
    8084:	c6 01       	movw	r24, r12
    8086:	09 95       	icall
    8088:	b1 e0       	ldi	r27, 0x01	; 1
    808a:	eb 1a       	sub	r14, r27
    808c:	f1 08       	sbc	r15, r1
    808e:	ef cf       	rjmp	.-34     	; 0x806e <_puts_pad+0x3e>
    8090:	01 15       	cp	r16, r1
    8092:	11 05       	cpc	r17, r1
    8094:	51 f0       	breq	.+20     	; 0x80aa <_puts_pad+0x7a>
    8096:	20 97       	sbiw	r28, 0x00	; 0
    8098:	41 f0       	breq	.+16     	; 0x80aa <_puts_pad+0x7a>
    809a:	d6 01       	movw	r26, r12
    809c:	ed 91       	ld	r30, X+
    809e:	fc 91       	ld	r31, X
    80a0:	60 e2       	ldi	r22, 0x20	; 32
    80a2:	c6 01       	movw	r24, r12
    80a4:	09 95       	icall
    80a6:	21 97       	sbiw	r28, 0x01	; 1
    80a8:	f6 cf       	rjmp	.-20     	; 0x8096 <_puts_pad+0x66>
    80aa:	cd b7       	in	r28, 0x3d	; 61
    80ac:	de b7       	in	r29, 0x3e	; 62
    80ae:	ec e0       	ldi	r30, 0x0C	; 12
    80b0:	0c 94 e3 e8 	jmp	0x1d1c6	; 0x1d1c6 <__epilogue_restores__+0xc>

000080b4 <_printf_fn>:
    80b4:	ab e6       	ldi	r26, 0x6B	; 107
    80b6:	b0 e0       	ldi	r27, 0x00	; 0
    80b8:	e0 e6       	ldi	r30, 0x60	; 96
    80ba:	f0 e4       	ldi	r31, 0x40	; 64
    80bc:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__prologue_saves__>
    80c0:	a5 96       	adiw	r28, 0x25	; 37
    80c2:	9f af       	std	Y+63, r25	; 0x3f
    80c4:	8e af       	std	Y+62, r24	; 0x3e
    80c6:	a5 97       	sbiw	r28, 0x25	; 37
    80c8:	6a 01       	movw	r12, r20
    80ca:	e6 2e       	mov	r14, r22
    80cc:	19 01       	movw	r2, r18
    80ce:	a9 96       	adiw	r28, 0x29	; 41
    80d0:	1c ae       	std	Y+60, r1	; 0x3c
    80d2:	1d ae       	std	Y+61, r1	; 0x3d
    80d4:	1e ae       	std	Y+62, r1	; 0x3e
    80d6:	1f ae       	std	Y+63, r1	; 0x3f
    80d8:	a9 97       	sbiw	r28, 0x29	; 41
    80da:	9e 01       	movw	r18, r28
    80dc:	2f 5a       	subi	r18, 0xAF	; 175
    80de:	3f 4f       	sbci	r19, 0xFF	; 255
    80e0:	67 96       	adiw	r28, 0x17	; 23
    80e2:	3f af       	std	Y+63, r19	; 0x3f
    80e4:	2e af       	std	Y+62, r18	; 0x3e
    80e6:	67 97       	sbiw	r28, 0x17	; 23
    80e8:	ae 01       	movw	r20, r28
    80ea:	4d 5b       	subi	r20, 0xBD	; 189
    80ec:	5f 4f       	sbci	r21, 0xFF	; 255
    80ee:	69 96       	adiw	r28, 0x19	; 25
    80f0:	5f af       	std	Y+63, r21	; 0x3f
    80f2:	4e af       	std	Y+62, r20	; 0x3e
    80f4:	69 97       	sbiw	r28, 0x19	; 25
    80f6:	ce 01       	movw	r24, r28
    80f8:	85 5b       	subi	r24, 0xB5	; 181
    80fa:	9f 4f       	sbci	r25, 0xFF	; 255
    80fc:	6b 96       	adiw	r28, 0x1b	; 27
    80fe:	9f af       	std	Y+63, r25	; 0x3f
    8100:	8e af       	std	Y+62, r24	; 0x3e
    8102:	6b 97       	sbiw	r28, 0x1b	; 27
    8104:	de 01       	movw	r26, r28
    8106:	ad 5a       	subi	r26, 0xAD	; 173
    8108:	bf 4f       	sbci	r27, 0xFF	; 255
    810a:	6d 96       	adiw	r28, 0x1d	; 29
    810c:	bf af       	std	Y+63, r27	; 0x3f
    810e:	ae af       	std	Y+62, r26	; 0x3e
    8110:	6d 97       	sbiw	r28, 0x1d	; 29
    8112:	f6 01       	movw	r30, r12
    8114:	5e 2d       	mov	r21, r14
    8116:	0e 94 f8 e8 	call	0x1d1f0	; 0x1d1f0 <__xload_1>
    811a:	66 23       	and	r22, r22
    811c:	09 f4       	brne	.+2      	; 0x8120 <_printf_fn+0x6c>
    811e:	df c3       	rjmp	.+1982   	; 0x88de <_printf_fn+0x82a>
    8120:	ae 2d       	mov	r26, r14
    8122:	c6 01       	movw	r24, r12
    8124:	01 96       	adiw	r24, 0x01	; 1
    8126:	a1 1d       	adc	r26, r1
    8128:	3c 01       	movw	r6, r24
    812a:	8a 2e       	mov	r8, r26
    812c:	65 32       	cpi	r22, 0x25	; 37
    812e:	51 f0       	breq	.+20     	; 0x8144 <_printf_fn+0x90>
    8130:	a5 96       	adiw	r28, 0x25	; 37
    8132:	ae ad       	ldd	r26, Y+62	; 0x3e
    8134:	bf ad       	ldd	r27, Y+63	; 0x3f
    8136:	a5 97       	sbiw	r28, 0x25	; 37
    8138:	ed 91       	ld	r30, X+
    813a:	fc 91       	ld	r31, X
    813c:	11 97       	sbiw	r26, 0x01	; 1
    813e:	cd 01       	movw	r24, r26
    8140:	09 95       	icall
    8142:	99 c3       	rjmp	.+1842   	; 0x8876 <_printf_fn+0x7c2>
    8144:	91 2c       	mov	r9, r1
    8146:	f3 01       	movw	r30, r6
    8148:	58 2d       	mov	r21, r8
    814a:	0e 94 f8 e8 	call	0x1d1f0	; 0x1d1f0 <__xload_1>
    814e:	63 32       	cpi	r22, 0x23	; 35
    8150:	19 f4       	brne	.+6      	; 0x8158 <_printf_fn+0xa4>
    8152:	68 94       	set
    8154:	97 f8       	bld	r9, 7
    8156:	04 c0       	rjmp	.+8      	; 0x8160 <_printf_fn+0xac>
    8158:	6b 32       	cpi	r22, 0x2B	; 43
    815a:	39 f4       	brne	.+14     	; 0x816a <_printf_fn+0xb6>
    815c:	68 94       	set
    815e:	92 f8       	bld	r9, 2
    8160:	bf ef       	ldi	r27, 0xFF	; 255
    8162:	6b 1a       	sub	r6, r27
    8164:	7b 0a       	sbc	r7, r27
    8166:	8b 0a       	sbc	r8, r27
    8168:	ee cf       	rjmp	.-36     	; 0x8146 <_printf_fn+0x92>
    816a:	6d 32       	cpi	r22, 0x2D	; 45
    816c:	a9 f4       	brne	.+42     	; 0x8198 <_printf_fn+0xe4>
    816e:	93 fc       	sbrc	r9, 3
    8170:	05 c0       	rjmp	.+10     	; 0x817c <_printf_fn+0xc8>
    8172:	6d 32       	cpi	r22, 0x2D	; 45
    8174:	19 f4       	brne	.+6      	; 0x817c <_printf_fn+0xc8>
    8176:	68 94       	set
    8178:	93 f8       	bld	r9, 3
    817a:	f2 cf       	rjmp	.-28     	; 0x8160 <_printf_fn+0xac>
    817c:	94 fc       	sbrc	r9, 4
    817e:	05 c0       	rjmp	.+10     	; 0x818a <_printf_fn+0xd6>
    8180:	60 32       	cpi	r22, 0x20	; 32
    8182:	19 f4       	brne	.+6      	; 0x818a <_printf_fn+0xd6>
    8184:	68 94       	set
    8186:	94 f8       	bld	r9, 4
    8188:	eb cf       	rjmp	.-42     	; 0x8160 <_printf_fn+0xac>
    818a:	95 fc       	sbrc	r9, 5
    818c:	e9 cf       	rjmp	.-46     	; 0x8160 <_printf_fn+0xac>
    818e:	60 33       	cpi	r22, 0x30	; 48
    8190:	39 f7       	brne	.-50     	; 0x8160 <_printf_fn+0xac>
    8192:	68 94       	set
    8194:	95 f8       	bld	r9, 5
    8196:	e4 cf       	rjmp	.-56     	; 0x8160 <_printf_fn+0xac>
    8198:	86 2f       	mov	r24, r22
    819a:	8f 7e       	andi	r24, 0xEF	; 239
    819c:	80 32       	cpi	r24, 0x20	; 32
    819e:	39 f3       	breq	.-50     	; 0x816e <_printf_fn+0xba>
    81a0:	70 e0       	ldi	r23, 0x00	; 0
    81a2:	60 53       	subi	r22, 0x30	; 48
    81a4:	71 09       	sbc	r23, r1
    81a6:	41 2c       	mov	r4, r1
    81a8:	51 2c       	mov	r5, r1
    81aa:	6a 30       	cpi	r22, 0x0A	; 10
    81ac:	71 05       	cpc	r23, r1
    81ae:	e0 f4       	brcc	.+56     	; 0x81e8 <_printf_fn+0x134>
    81b0:	2a e0       	ldi	r18, 0x0A	; 10
    81b2:	f3 01       	movw	r30, r6
    81b4:	58 2d       	mov	r21, r8
    81b6:	0e 94 f8 e8 	call	0x1d1f0	; 0x1d1f0 <__xload_1>
    81ba:	70 e0       	ldi	r23, 0x00	; 0
    81bc:	cb 01       	movw	r24, r22
    81be:	c0 97       	sbiw	r24, 0x30	; 48
    81c0:	0a 97       	sbiw	r24, 0x0a	; 10
    81c2:	80 f4       	brcc	.+32     	; 0x81e4 <_printf_fn+0x130>
    81c4:	ef ef       	ldi	r30, 0xFF	; 255
    81c6:	6e 1a       	sub	r6, r30
    81c8:	7e 0a       	sbc	r7, r30
    81ca:	8e 0a       	sbc	r8, r30
    81cc:	24 9d       	mul	r18, r4
    81ce:	c0 01       	movw	r24, r0
    81d0:	25 9d       	mul	r18, r5
    81d2:	90 0d       	add	r25, r0
    81d4:	11 24       	eor	r1, r1
    81d6:	68 0f       	add	r22, r24
    81d8:	79 1f       	adc	r23, r25
    81da:	2b 01       	movw	r4, r22
    81dc:	f0 e3       	ldi	r31, 0x30	; 48
    81de:	4f 1a       	sub	r4, r31
    81e0:	51 08       	sbc	r5, r1
    81e2:	e7 cf       	rjmp	.-50     	; 0x81b2 <_printf_fn+0xfe>
    81e4:	68 94       	set
    81e6:	90 f8       	bld	r9, 0
    81e8:	f3 01       	movw	r30, r6
    81ea:	58 2d       	mov	r21, r8
    81ec:	0e 94 f8 e8 	call	0x1d1f0	; 0x1d1f0 <__xload_1>
    81f0:	6e 32       	cpi	r22, 0x2E	; 46
    81f2:	59 f5       	brne	.+86     	; 0x824a <_printf_fn+0x196>
    81f4:	2f ef       	ldi	r18, 0xFF	; 255
    81f6:	62 1a       	sub	r6, r18
    81f8:	72 0a       	sbc	r7, r18
    81fa:	82 0a       	sbc	r8, r18
    81fc:	a1 96       	adiw	r28, 0x21	; 33
    81fe:	1f ae       	std	Y+63, r1	; 0x3f
    8200:	1e ae       	std	Y+62, r1	; 0x3e
    8202:	a1 97       	sbiw	r28, 0x21	; 33
    8204:	2a e0       	ldi	r18, 0x0A	; 10
    8206:	f3 01       	movw	r30, r6
    8208:	58 2d       	mov	r21, r8
    820a:	0e 94 f8 e8 	call	0x1d1f0	; 0x1d1f0 <__xload_1>
    820e:	70 e0       	ldi	r23, 0x00	; 0
    8210:	cb 01       	movw	r24, r22
    8212:	c0 97       	sbiw	r24, 0x30	; 48
    8214:	0a 97       	sbiw	r24, 0x0a	; 10
    8216:	b0 f4       	brcc	.+44     	; 0x8244 <_printf_fn+0x190>
    8218:	3f ef       	ldi	r19, 0xFF	; 255
    821a:	63 1a       	sub	r6, r19
    821c:	73 0a       	sbc	r7, r19
    821e:	83 0a       	sbc	r8, r19
    8220:	a1 96       	adiw	r28, 0x21	; 33
    8222:	4e ad       	ldd	r20, Y+62	; 0x3e
    8224:	5f ad       	ldd	r21, Y+63	; 0x3f
    8226:	a1 97       	sbiw	r28, 0x21	; 33
    8228:	24 9f       	mul	r18, r20
    822a:	c0 01       	movw	r24, r0
    822c:	25 9f       	mul	r18, r21
    822e:	90 0d       	add	r25, r0
    8230:	11 24       	eor	r1, r1
    8232:	68 0f       	add	r22, r24
    8234:	79 1f       	adc	r23, r25
    8236:	cb 01       	movw	r24, r22
    8238:	c0 97       	sbiw	r24, 0x30	; 48
    823a:	a1 96       	adiw	r28, 0x21	; 33
    823c:	9f af       	std	Y+63, r25	; 0x3f
    823e:	8e af       	std	Y+62, r24	; 0x3e
    8240:	a1 97       	sbiw	r28, 0x21	; 33
    8242:	e1 cf       	rjmp	.-62     	; 0x8206 <_printf_fn+0x152>
    8244:	68 94       	set
    8246:	91 f8       	bld	r9, 1
    8248:	04 c0       	rjmp	.+8      	; 0x8252 <_printf_fn+0x19e>
    824a:	a1 96       	adiw	r28, 0x21	; 33
    824c:	1f ae       	std	Y+63, r1	; 0x3f
    824e:	1e ae       	std	Y+62, r1	; 0x3e
    8250:	a1 97       	sbiw	r28, 0x21	; 33
    8252:	f3 01       	movw	r30, r6
    8254:	58 2d       	mov	r21, r8
    8256:	0e 94 f8 e8 	call	0x1d1f0	; 0x1d1f0 <__xload_1>
    825a:	69 34       	cpi	r22, 0x49	; 73
    825c:	09 f0       	breq	.+2      	; 0x8260 <_printf_fn+0x1ac>
    825e:	45 c0       	rjmp	.+138    	; 0x82ea <_printf_fn+0x236>
    8260:	9f ef       	ldi	r25, 0xFF	; 255
    8262:	69 1a       	sub	r6, r25
    8264:	79 0a       	sbc	r7, r25
    8266:	89 0a       	sbc	r8, r25
    8268:	6f 96       	adiw	r28, 0x1f	; 31
    826a:	1f ae       	std	Y+63, r1	; 0x3f
    826c:	1e ae       	std	Y+62, r1	; 0x3e
    826e:	6f 97       	sbiw	r28, 0x1f	; 31
    8270:	2a e0       	ldi	r18, 0x0A	; 10
    8272:	f3 01       	movw	r30, r6
    8274:	58 2d       	mov	r21, r8
    8276:	0e 94 f8 e8 	call	0x1d1f0	; 0x1d1f0 <__xload_1>
    827a:	70 e0       	ldi	r23, 0x00	; 0
    827c:	cb 01       	movw	r24, r22
    827e:	c0 97       	sbiw	r24, 0x30	; 48
    8280:	0a 97       	sbiw	r24, 0x0a	; 10
    8282:	b8 f4       	brcc	.+46     	; 0x82b2 <_printf_fn+0x1fe>
    8284:	af ef       	ldi	r26, 0xFF	; 255
    8286:	6a 1a       	sub	r6, r26
    8288:	7a 0a       	sbc	r7, r26
    828a:	8a 0a       	sbc	r8, r26
    828c:	6f 96       	adiw	r28, 0x1f	; 31
    828e:	ee ad       	ldd	r30, Y+62	; 0x3e
    8290:	ff ad       	ldd	r31, Y+63	; 0x3f
    8292:	6f 97       	sbiw	r28, 0x1f	; 31
    8294:	2e 9f       	mul	r18, r30
    8296:	c0 01       	movw	r24, r0
    8298:	2f 9f       	mul	r18, r31
    829a:	90 0d       	add	r25, r0
    829c:	11 24       	eor	r1, r1
    829e:	68 0f       	add	r22, r24
    82a0:	79 1f       	adc	r23, r25
    82a2:	ab 01       	movw	r20, r22
    82a4:	40 53       	subi	r20, 0x30	; 48
    82a6:	51 09       	sbc	r21, r1
    82a8:	6f 96       	adiw	r28, 0x1f	; 31
    82aa:	5f af       	std	Y+63, r21	; 0x3f
    82ac:	4e af       	std	Y+62, r20	; 0x3e
    82ae:	6f 97       	sbiw	r28, 0x1f	; 31
    82b0:	e0 cf       	rjmp	.-64     	; 0x8272 <_printf_fn+0x1be>
    82b2:	6f 96       	adiw	r28, 0x1f	; 31
    82b4:	8e ad       	ldd	r24, Y+62	; 0x3e
    82b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    82b8:	6f 97       	sbiw	r28, 0x1f	; 31
    82ba:	00 97       	sbiw	r24, 0x00	; 0
    82bc:	09 f4       	brne	.+2      	; 0x82c0 <_printf_fn+0x20c>
    82be:	4f c0       	rjmp	.+158    	; 0x835e <_printf_fn+0x2aa>
    82c0:	87 70       	andi	r24, 0x07	; 7
    82c2:	99 27       	eor	r25, r25
    82c4:	89 2b       	or	r24, r25
    82c6:	09 f0       	breq	.+2      	; 0x82ca <_printf_fn+0x216>
    82c8:	46 c0       	rjmp	.+140    	; 0x8356 <_printf_fn+0x2a2>
    82ca:	6f 96       	adiw	r28, 0x1f	; 31
    82cc:	ae ad       	ldd	r26, Y+62	; 0x3e
    82ce:	bf ad       	ldd	r27, Y+63	; 0x3f
    82d0:	6f 97       	sbiw	r28, 0x1f	; 31
    82d2:	83 e0       	ldi	r24, 0x03	; 3
    82d4:	b5 95       	asr	r27
    82d6:	a7 95       	ror	r26
    82d8:	8a 95       	dec	r24
    82da:	e1 f7       	brne	.-8      	; 0x82d4 <_printf_fn+0x220>
    82dc:	6f 96       	adiw	r28, 0x1f	; 31
    82de:	bf af       	std	Y+63, r27	; 0x3f
    82e0:	ae af       	std	Y+62, r26	; 0x3e
    82e2:	6f 97       	sbiw	r28, 0x1f	; 31
    82e4:	ab 2b       	or	r26, r27
    82e6:	d9 f1       	breq	.+118    	; 0x835e <_printf_fn+0x2aa>
    82e8:	27 c0       	rjmp	.+78     	; 0x8338 <_printf_fn+0x284>
    82ea:	68 36       	cpi	r22, 0x68	; 104
    82ec:	29 f4       	brne	.+10     	; 0x82f8 <_printf_fn+0x244>
    82ee:	bf ef       	ldi	r27, 0xFF	; 255
    82f0:	6b 1a       	sub	r6, r27
    82f2:	7b 0a       	sbc	r7, r27
    82f4:	8b 0a       	sbc	r8, r27
    82f6:	c2 c2       	rjmp	.+1412   	; 0x887c <_printf_fn+0x7c8>
    82f8:	6c 36       	cpi	r22, 0x6C	; 108
    82fa:	09 f0       	breq	.+2      	; 0x82fe <_printf_fn+0x24a>
    82fc:	bf c2       	rjmp	.+1406   	; 0x887c <_printf_fn+0x7c8>
    82fe:	a8 2d       	mov	r26, r8
    8300:	c3 01       	movw	r24, r6
    8302:	01 96       	adiw	r24, 0x01	; 1
    8304:	a1 1d       	adc	r26, r1
    8306:	fc 01       	movw	r30, r24
    8308:	5a 2f       	mov	r21, r26
    830a:	0e 94 f8 e8 	call	0x1d1f0	; 0x1d1f0 <__xload_1>
    830e:	6c 36       	cpi	r22, 0x6C	; 108
    8310:	49 f0       	breq	.+18     	; 0x8324 <_printf_fn+0x270>
    8312:	3c 01       	movw	r6, r24
    8314:	8a 2e       	mov	r8, r26
    8316:	24 e0       	ldi	r18, 0x04	; 4
    8318:	30 e0       	ldi	r19, 0x00	; 0
    831a:	6f 96       	adiw	r28, 0x1f	; 31
    831c:	3f af       	std	Y+63, r19	; 0x3f
    831e:	2e af       	std	Y+62, r18	; 0x3e
    8320:	6f 97       	sbiw	r28, 0x1f	; 31
    8322:	0a c0       	rjmp	.+20     	; 0x8338 <_printf_fn+0x284>
    8324:	32 e0       	ldi	r19, 0x02	; 2
    8326:	63 0e       	add	r6, r19
    8328:	71 1c       	adc	r7, r1
    832a:	81 1c       	adc	r8, r1
    832c:	48 e0       	ldi	r20, 0x08	; 8
    832e:	50 e0       	ldi	r21, 0x00	; 0
    8330:	6f 96       	adiw	r28, 0x1f	; 31
    8332:	5f af       	std	Y+63, r21	; 0x3f
    8334:	4e af       	std	Y+62, r20	; 0x3e
    8336:	6f 97       	sbiw	r28, 0x1f	; 31
    8338:	f3 01       	movw	r30, r6
    833a:	58 2d       	mov	r21, r8
    833c:	0e 94 f8 e8 	call	0x1d1f0	; 0x1d1f0 <__xload_1>
    8340:	86 2f       	mov	r24, r22
    8342:	90 e0       	ldi	r25, 0x00	; 0
    8344:	a3 96       	adiw	r28, 0x23	; 35
    8346:	9f af       	std	Y+63, r25	; 0x3f
    8348:	8e af       	std	Y+62, r24	; 0x3e
    834a:	a3 97       	sbiw	r28, 0x23	; 35
    834c:	84 36       	cpi	r24, 0x64	; 100
    834e:	91 05       	cpc	r25, r1
    8350:	09 f4       	brne	.+2      	; 0x8354 <_printf_fn+0x2a0>
    8352:	9b c2       	rjmp	.+1334   	; 0x888a <_printf_fn+0x7d6>
    8354:	08 c0       	rjmp	.+16     	; 0x8366 <_printf_fn+0x2b2>
    8356:	6f 96       	adiw	r28, 0x1f	; 31
    8358:	1f ae       	std	Y+63, r1	; 0x3f
    835a:	1e ae       	std	Y+62, r1	; 0x3e
    835c:	6f 97       	sbiw	r28, 0x1f	; 31
    835e:	a3 96       	adiw	r28, 0x23	; 35
    8360:	1f ae       	std	Y+63, r1	; 0x3f
    8362:	1e ae       	std	Y+62, r1	; 0x3e
    8364:	a3 97       	sbiw	r28, 0x23	; 35
    8366:	31 e0       	ldi	r19, 0x01	; 1
    8368:	20 e0       	ldi	r18, 0x00	; 0
    836a:	a3 96       	adiw	r28, 0x23	; 35
    836c:	ae ad       	ldd	r26, Y+62	; 0x3e
    836e:	bf ad       	ldd	r27, Y+63	; 0x3f
    8370:	a3 97       	sbiw	r28, 0x23	; 35
    8372:	a4 34       	cpi	r26, 0x44	; 68
    8374:	b1 05       	cpc	r27, r1
    8376:	09 f0       	breq	.+2      	; 0x837a <_printf_fn+0x2c6>
    8378:	30 e0       	ldi	r19, 0x00	; 0
    837a:	83 2f       	mov	r24, r19
    837c:	92 2f       	mov	r25, r18
    837e:	a3 96       	adiw	r28, 0x23	; 35
    8380:	ee ad       	ldd	r30, Y+62	; 0x3e
    8382:	ff ad       	ldd	r31, Y+63	; 0x3f
    8384:	a3 97       	sbiw	r28, 0x23	; 35
    8386:	e2 54       	subi	r30, 0x42	; 66
    8388:	f1 09       	sbc	r31, r1
    838a:	e7 33       	cpi	r30, 0x37	; 55
    838c:	f1 05       	cpc	r31, r1
    838e:	08 f0       	brcs	.+2      	; 0x8392 <_printf_fn+0x2de>
    8390:	65 c1       	rjmp	.+714    	; 0x865c <_printf_fn+0x5a8>
    8392:	ea 5b       	subi	r30, 0xBA	; 186
    8394:	ff 4f       	sbci	r31, 0xFF	; 255
    8396:	0c 94 92 e8 	jmp	0x1d124	; 0x1d124 <__tablejump2__>
    839a:	e2 e0       	ldi	r30, 0x02	; 2
    839c:	f0 e0       	ldi	r31, 0x00	; 0
    839e:	6f 96       	adiw	r28, 0x1f	; 31
    83a0:	ff af       	std	Y+63, r31	; 0x3f
    83a2:	ee af       	std	Y+62, r30	; 0x3e
    83a4:	6f 97       	sbiw	r28, 0x1f	; 31
    83a6:	29 2d       	mov	r18, r9
    83a8:	28 72       	andi	r18, 0x28	; 40
    83aa:	28 32       	cpi	r18, 0x28	; 40
    83ac:	11 f4       	brne	.+4      	; 0x83b2 <_printf_fn+0x2fe>
    83ae:	e8 94       	clt
    83b0:	95 f8       	bld	r9, 5
    83b2:	29 2d       	mov	r18, r9
    83b4:	22 72       	andi	r18, 0x22	; 34
    83b6:	22 32       	cpi	r18, 0x22	; 34
    83b8:	11 f4       	brne	.+4      	; 0x83be <_printf_fn+0x30a>
    83ba:	e8 94       	clt
    83bc:	95 f8       	bld	r9, 5
    83be:	29 2d       	mov	r18, r9
    83c0:	21 72       	andi	r18, 0x21	; 33
    83c2:	21 32       	cpi	r18, 0x21	; 33
    83c4:	59 f4       	brne	.+22     	; 0x83dc <_printf_fn+0x328>
    83c6:	a1 96       	adiw	r28, 0x21	; 33
    83c8:	2e ad       	ldd	r18, Y+62	; 0x3e
    83ca:	3f ad       	ldd	r19, Y+63	; 0x3f
    83cc:	a1 97       	sbiw	r28, 0x21	; 33
    83ce:	24 15       	cp	r18, r4
    83d0:	35 05       	cpc	r19, r5
    83d2:	24 f4       	brge	.+8      	; 0x83dc <_printf_fn+0x328>
    83d4:	a1 96       	adiw	r28, 0x21	; 33
    83d6:	5f ae       	std	Y+63, r5	; 0x3f
    83d8:	4e ae       	std	Y+62, r4	; 0x3e
    83da:	a1 97       	sbiw	r28, 0x21	; 33
    83dc:	29 2d       	mov	r18, r9
    83de:	23 72       	andi	r18, 0x23	; 35
    83e0:	23 32       	cpi	r18, 0x23	; 35
    83e2:	59 f4       	brne	.+22     	; 0x83fa <_printf_fn+0x346>
    83e4:	a1 96       	adiw	r28, 0x21	; 33
    83e6:	4e ad       	ldd	r20, Y+62	; 0x3e
    83e8:	5f ad       	ldd	r21, Y+63	; 0x3f
    83ea:	a1 97       	sbiw	r28, 0x21	; 33
    83ec:	44 15       	cp	r20, r4
    83ee:	55 05       	cpc	r21, r5
    83f0:	24 f4       	brge	.+8      	; 0x83fa <_printf_fn+0x346>
    83f2:	a1 96       	adiw	r28, 0x21	; 33
    83f4:	5f ae       	std	Y+63, r5	; 0x3f
    83f6:	4e ae       	std	Y+62, r4	; 0x3e
    83f8:	a1 97       	sbiw	r28, 0x21	; 33
    83fa:	e8 94       	clt
    83fc:	94 f8       	bld	r9, 4
    83fe:	e8 94       	clt
    8400:	92 f8       	bld	r9, 2
    8402:	e8 94       	clt
    8404:	96 f8       	bld	r9, 6
    8406:	6f 96       	adiw	r28, 0x1f	; 31
    8408:	ae ad       	ldd	r26, Y+62	; 0x3e
    840a:	bf ad       	ldd	r27, Y+63	; 0x3f
    840c:	6f 97       	sbiw	r28, 0x1f	; 31
    840e:	12 97       	sbiw	r26, 0x02	; 2
    8410:	29 f5       	brne	.+74     	; 0x845c <_printf_fn+0x3a8>
    8412:	51 01       	movw	r10, r2
    8414:	b2 e0       	ldi	r27, 0x02	; 2
    8416:	ab 0e       	add	r10, r27
    8418:	b1 1c       	adc	r11, r1
    841a:	f1 01       	movw	r30, r2
    841c:	80 81       	ld	r24, Z
    841e:	91 81       	ldd	r25, Z+1	; 0x01
    8420:	65 96       	adiw	r28, 0x15	; 21
    8422:	9f af       	std	Y+63, r25	; 0x3f
    8424:	8e af       	std	Y+62, r24	; 0x3e
    8426:	65 97       	sbiw	r28, 0x15	; 21
    8428:	a3 96       	adiw	r28, 0x23	; 35
    842a:	2e ad       	ldd	r18, Y+62	; 0x3e
    842c:	3f ad       	ldd	r19, Y+63	; 0x3f
    842e:	a3 97       	sbiw	r28, 0x23	; 35
    8430:	24 34       	cpi	r18, 0x44	; 68
    8432:	31 05       	cpc	r19, r1
    8434:	09 f0       	breq	.+2      	; 0x8438 <_printf_fn+0x384>
    8436:	c0 c0       	rjmp	.+384    	; 0x85b8 <_printf_fn+0x504>
    8438:	97 ff       	sbrs	r25, 7
    843a:	b8 c0       	rjmp	.+368    	; 0x85ac <_printf_fn+0x4f8>
    843c:	68 94       	set
    843e:	96 f8       	bld	r9, 6
    8440:	91 95       	neg	r25
    8442:	81 95       	neg	r24
    8444:	91 09       	sbc	r25, r1
    8446:	65 96       	adiw	r28, 0x15	; 21
    8448:	9f af       	std	Y+63, r25	; 0x3f
    844a:	8e af       	std	Y+62, r24	; 0x3e
    844c:	65 97       	sbiw	r28, 0x15	; 21
    844e:	42 e0       	ldi	r20, 0x02	; 2
    8450:	50 e0       	ldi	r21, 0x00	; 0
    8452:	6f 96       	adiw	r28, 0x1f	; 31
    8454:	5f af       	std	Y+63, r21	; 0x3f
    8456:	4e af       	std	Y+62, r20	; 0x3e
    8458:	6f 97       	sbiw	r28, 0x1f	; 31
    845a:	ae c0       	rjmp	.+348    	; 0x85b8 <_printf_fn+0x504>
    845c:	6f 96       	adiw	r28, 0x1f	; 31
    845e:	ae ad       	ldd	r26, Y+62	; 0x3e
    8460:	bf ad       	ldd	r27, Y+63	; 0x3f
    8462:	6f 97       	sbiw	r28, 0x1f	; 31
    8464:	14 97       	sbiw	r26, 0x04	; 4
    8466:	59 f5       	brne	.+86     	; 0x84be <_printf_fn+0x40a>
    8468:	51 01       	movw	r10, r2
    846a:	b4 e0       	ldi	r27, 0x04	; 4
    846c:	ab 0e       	add	r10, r27
    846e:	b1 1c       	adc	r11, r1
    8470:	f1 01       	movw	r30, r2
    8472:	80 81       	ld	r24, Z
    8474:	91 81       	ldd	r25, Z+1	; 0x01
    8476:	a2 81       	ldd	r26, Z+2	; 0x02
    8478:	b3 81       	ldd	r27, Z+3	; 0x03
    847a:	2f 96       	adiw	r28, 0x0f	; 15
    847c:	8c af       	std	Y+60, r24	; 0x3c
    847e:	9d af       	std	Y+61, r25	; 0x3d
    8480:	ae af       	std	Y+62, r26	; 0x3e
    8482:	bf af       	std	Y+63, r27	; 0x3f
    8484:	2f 97       	sbiw	r28, 0x0f	; 15
    8486:	a3 96       	adiw	r28, 0x23	; 35
    8488:	2e ad       	ldd	r18, Y+62	; 0x3e
    848a:	3f ad       	ldd	r19, Y+63	; 0x3f
    848c:	a3 97       	sbiw	r28, 0x23	; 35
    848e:	24 34       	cpi	r18, 0x44	; 68
    8490:	31 05       	cpc	r19, r1
    8492:	09 f0       	breq	.+2      	; 0x8496 <_printf_fn+0x3e2>
    8494:	9e c0       	rjmp	.+316    	; 0x85d2 <_printf_fn+0x51e>
    8496:	b7 ff       	sbrs	r27, 7
    8498:	96 c0       	rjmp	.+300    	; 0x85c6 <_printf_fn+0x512>
    849a:	68 94       	set
    849c:	96 f8       	bld	r9, 6
    849e:	b0 95       	com	r27
    84a0:	a0 95       	com	r26
    84a2:	90 95       	com	r25
    84a4:	81 95       	neg	r24
    84a6:	9f 4f       	sbci	r25, 0xFF	; 255
    84a8:	af 4f       	sbci	r26, 0xFF	; 255
    84aa:	bf 4f       	sbci	r27, 0xFF	; 255
    84ac:	2f 96       	adiw	r28, 0x0f	; 15
    84ae:	8c af       	std	Y+60, r24	; 0x3c
    84b0:	9d af       	std	Y+61, r25	; 0x3d
    84b2:	ae af       	std	Y+62, r26	; 0x3e
    84b4:	bf af       	std	Y+63, r27	; 0x3f
    84b6:	2f 97       	sbiw	r28, 0x0f	; 15
    84b8:	86 c0       	rjmp	.+268    	; 0x85c6 <_printf_fn+0x512>
    84ba:	81 e0       	ldi	r24, 0x01	; 1
    84bc:	90 e0       	ldi	r25, 0x00	; 0
    84be:	6f 96       	adiw	r28, 0x1f	; 31
    84c0:	ae ad       	ldd	r26, Y+62	; 0x3e
    84c2:	bf ad       	ldd	r27, Y+63	; 0x3f
    84c4:	6f 97       	sbiw	r28, 0x1f	; 31
    84c6:	51 01       	movw	r10, r2
    84c8:	18 97       	sbiw	r26, 0x08	; 8
    84ca:	09 f0       	breq	.+2      	; 0x84ce <_printf_fn+0x41a>
    84cc:	89 c0       	rjmp	.+274    	; 0x85e0 <_printf_fn+0x52c>
    84ce:	b8 e0       	ldi	r27, 0x08	; 8
    84d0:	ab 0e       	add	r10, r27
    84d2:	b1 1c       	adc	r11, r1
    84d4:	f1 01       	movw	r30, r2
    84d6:	f0 81       	ld	r31, Z
    84d8:	aa 96       	adiw	r28, 0x2a	; 42
    84da:	ff af       	std	Y+63, r31	; 0x3f
    84dc:	aa 97       	sbiw	r28, 0x2a	; 42
    84de:	d1 01       	movw	r26, r2
    84e0:	11 96       	adiw	r26, 0x01	; 1
    84e2:	fc 90       	ld	r15, X
    84e4:	11 97       	sbiw	r26, 0x01	; 1
    84e6:	12 96       	adiw	r26, 0x02	; 2
    84e8:	0c 91       	ld	r16, X
    84ea:	12 97       	sbiw	r26, 0x02	; 2
    84ec:	13 96       	adiw	r26, 0x03	; 3
    84ee:	1c 91       	ld	r17, X
    84f0:	13 97       	sbiw	r26, 0x03	; 3
    84f2:	14 96       	adiw	r26, 0x04	; 4
    84f4:	bc 91       	ld	r27, X
    84f6:	f1 01       	movw	r30, r2
    84f8:	f5 81       	ldd	r31, Z+5	; 0x05
    84fa:	ab 96       	adiw	r28, 0x2b	; 43
    84fc:	ff af       	std	Y+63, r31	; 0x3f
    84fe:	ab 97       	sbiw	r28, 0x2b	; 43
    8500:	f1 01       	movw	r30, r2
    8502:	f6 81       	ldd	r31, Z+6	; 0x06
    8504:	ac 96       	adiw	r28, 0x2c	; 44
    8506:	ff af       	std	Y+63, r31	; 0x3f
    8508:	ac 97       	sbiw	r28, 0x2c	; 44
    850a:	f1 01       	movw	r30, r2
    850c:	37 80       	ldd	r3, Z+7	; 0x07
    850e:	aa 96       	adiw	r28, 0x2a	; 42
    8510:	ff ad       	ldd	r31, Y+63	; 0x3f
    8512:	aa 97       	sbiw	r28, 0x2a	; 42
    8514:	24 96       	adiw	r28, 0x04	; 4
    8516:	ff af       	std	Y+63, r31	; 0x3f
    8518:	24 97       	sbiw	r28, 0x04	; 4
    851a:	25 96       	adiw	r28, 0x05	; 5
    851c:	ff ae       	std	Y+63, r15	; 0x3f
    851e:	25 97       	sbiw	r28, 0x05	; 5
    8520:	26 96       	adiw	r28, 0x06	; 6
    8522:	0f af       	std	Y+63, r16	; 0x3f
    8524:	26 97       	sbiw	r28, 0x06	; 6
    8526:	27 96       	adiw	r28, 0x07	; 7
    8528:	1f af       	std	Y+63, r17	; 0x3f
    852a:	27 97       	sbiw	r28, 0x07	; 7
    852c:	28 96       	adiw	r28, 0x08	; 8
    852e:	bf af       	std	Y+63, r27	; 0x3f
    8530:	28 97       	sbiw	r28, 0x08	; 8
    8532:	ab 96       	adiw	r28, 0x2b	; 43
    8534:	ef ad       	ldd	r30, Y+63	; 0x3f
    8536:	ab 97       	sbiw	r28, 0x2b	; 43
    8538:	29 96       	adiw	r28, 0x09	; 9
    853a:	ef af       	std	Y+63, r30	; 0x3f
    853c:	29 97       	sbiw	r28, 0x09	; 9
    853e:	ac 96       	adiw	r28, 0x2c	; 44
    8540:	ff ad       	ldd	r31, Y+63	; 0x3f
    8542:	ac 97       	sbiw	r28, 0x2c	; 44
    8544:	2a 96       	adiw	r28, 0x0a	; 10
    8546:	ff af       	std	Y+63, r31	; 0x3f
    8548:	2a 97       	sbiw	r28, 0x0a	; 10
    854a:	2b 96       	adiw	r28, 0x0b	; 11
    854c:	3f ae       	std	Y+63, r3	; 0x3f
    854e:	2b 97       	sbiw	r28, 0x0b	; 11
    8550:	89 2b       	or	r24, r25
    8552:	09 f4       	brne	.+2      	; 0x8556 <_printf_fn+0x4a2>
    8554:	50 c0       	rjmp	.+160    	; 0x85f6 <_printf_fn+0x542>
    8556:	aa 96       	adiw	r28, 0x2a	; 42
    8558:	2f ad       	ldd	r18, Y+63	; 0x3f
    855a:	aa 97       	sbiw	r28, 0x2a	; 42
    855c:	3f 2d       	mov	r19, r15
    855e:	a8 01       	movw	r20, r16
    8560:	6b 2f       	mov	r22, r27
    8562:	7e 2f       	mov	r23, r30
    8564:	8f 2f       	mov	r24, r31
    8566:	93 2d       	mov	r25, r3
    8568:	a0 e0       	ldi	r26, 0x00	; 0
    856a:	0e 94 ff e8 	call	0x1d1fe	; 0x1d1fe <__cmpdi2_s8>
    856e:	0c f0       	brlt	.+2      	; 0x8572 <_printf_fn+0x4be>
    8570:	42 c0       	rjmp	.+132    	; 0x85f6 <_printf_fn+0x542>
    8572:	68 94       	set
    8574:	96 f8       	bld	r9, 6
    8576:	0e 94 b1 e8 	call	0x1d162	; 0x1d162 <__negdi2>
    857a:	24 96       	adiw	r28, 0x04	; 4
    857c:	2f af       	std	Y+63, r18	; 0x3f
    857e:	24 97       	sbiw	r28, 0x04	; 4
    8580:	25 96       	adiw	r28, 0x05	; 5
    8582:	3f af       	std	Y+63, r19	; 0x3f
    8584:	25 97       	sbiw	r28, 0x05	; 5
    8586:	26 96       	adiw	r28, 0x06	; 6
    8588:	4f af       	std	Y+63, r20	; 0x3f
    858a:	26 97       	sbiw	r28, 0x06	; 6
    858c:	27 96       	adiw	r28, 0x07	; 7
    858e:	5f af       	std	Y+63, r21	; 0x3f
    8590:	27 97       	sbiw	r28, 0x07	; 7
    8592:	28 96       	adiw	r28, 0x08	; 8
    8594:	6f af       	std	Y+63, r22	; 0x3f
    8596:	28 97       	sbiw	r28, 0x08	; 8
    8598:	29 96       	adiw	r28, 0x09	; 9
    859a:	7f af       	std	Y+63, r23	; 0x3f
    859c:	29 97       	sbiw	r28, 0x09	; 9
    859e:	2a 96       	adiw	r28, 0x0a	; 10
    85a0:	8f af       	std	Y+63, r24	; 0x3f
    85a2:	2a 97       	sbiw	r28, 0x0a	; 10
    85a4:	2b 96       	adiw	r28, 0x0b	; 11
    85a6:	9f af       	std	Y+63, r25	; 0x3f
    85a8:	2b 97       	sbiw	r28, 0x0b	; 11
    85aa:	25 c0       	rjmp	.+74     	; 0x85f6 <_printf_fn+0x542>
    85ac:	22 e0       	ldi	r18, 0x02	; 2
    85ae:	30 e0       	ldi	r19, 0x00	; 0
    85b0:	6f 96       	adiw	r28, 0x1f	; 31
    85b2:	3f af       	std	Y+63, r19	; 0x3f
    85b4:	2e af       	std	Y+62, r18	; 0x3e
    85b6:	6f 97       	sbiw	r28, 0x1f	; 31
    85b8:	6c 96       	adiw	r28, 0x1c	; 28
    85ba:	8f ad       	ldd	r24, Y+63	; 0x3f
    85bc:	6c 97       	sbiw	r28, 0x1c	; 28
    85be:	6d 96       	adiw	r28, 0x1d	; 29
    85c0:	9f ad       	ldd	r25, Y+63	; 0x3f
    85c2:	6d 97       	sbiw	r28, 0x1d	; 29
    85c4:	1e c0       	rjmp	.+60     	; 0x8602 <_printf_fn+0x54e>
    85c6:	44 e0       	ldi	r20, 0x04	; 4
    85c8:	50 e0       	ldi	r21, 0x00	; 0
    85ca:	6f 96       	adiw	r28, 0x1f	; 31
    85cc:	5f af       	std	Y+63, r21	; 0x3f
    85ce:	4e af       	std	Y+62, r20	; 0x3e
    85d0:	6f 97       	sbiw	r28, 0x1f	; 31
    85d2:	6a 96       	adiw	r28, 0x1a	; 26
    85d4:	8f ad       	ldd	r24, Y+63	; 0x3f
    85d6:	6a 97       	sbiw	r28, 0x1a	; 26
    85d8:	6b 96       	adiw	r28, 0x1b	; 27
    85da:	9f ad       	ldd	r25, Y+63	; 0x3f
    85dc:	6b 97       	sbiw	r28, 0x1b	; 27
    85de:	11 c0       	rjmp	.+34     	; 0x8602 <_printf_fn+0x54e>
    85e0:	66 96       	adiw	r28, 0x16	; 22
    85e2:	8f ad       	ldd	r24, Y+63	; 0x3f
    85e4:	66 97       	sbiw	r28, 0x16	; 22
    85e6:	67 96       	adiw	r28, 0x17	; 23
    85e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    85ea:	67 97       	sbiw	r28, 0x17	; 23
    85ec:	a3 96       	adiw	r28, 0x23	; 35
    85ee:	1f ae       	std	Y+63, r1	; 0x3f
    85f0:	1e ae       	std	Y+62, r1	; 0x3e
    85f2:	a3 97       	sbiw	r28, 0x23	; 35
    85f4:	06 c0       	rjmp	.+12     	; 0x8602 <_printf_fn+0x54e>
    85f6:	68 96       	adiw	r28, 0x18	; 24
    85f8:	8f ad       	ldd	r24, Y+63	; 0x3f
    85fa:	68 97       	sbiw	r28, 0x18	; 24
    85fc:	69 96       	adiw	r28, 0x19	; 25
    85fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    8600:	69 97       	sbiw	r28, 0x19	; 25
    8602:	5f ef       	ldi	r21, 0xFF	; 255
    8604:	65 1a       	sub	r6, r21
    8606:	75 0a       	sbc	r7, r21
    8608:	85 0a       	sbc	r8, r21
    860a:	15 01       	movw	r2, r10
    860c:	2d c0       	rjmp	.+90     	; 0x8668 <_printf_fn+0x5b4>
    860e:	91 fc       	sbrc	r9, 1
    8610:	08 c0       	rjmp	.+16     	; 0x8622 <_printf_fn+0x56e>
    8612:	68 94       	set
    8614:	91 f8       	bld	r9, 1
    8616:	86 e0       	ldi	r24, 0x06	; 6
    8618:	90 e0       	ldi	r25, 0x00	; 0
    861a:	a1 96       	adiw	r28, 0x21	; 33
    861c:	9f af       	std	Y+63, r25	; 0x3f
    861e:	8e af       	std	Y+62, r24	; 0x3e
    8620:	a1 97       	sbiw	r28, 0x21	; 33
    8622:	d1 01       	movw	r26, r2
    8624:	2d 91       	ld	r18, X+
    8626:	3d 91       	ld	r19, X+
    8628:	4d 91       	ld	r20, X+
    862a:	5c 91       	ld	r21, X
    862c:	a9 96       	adiw	r28, 0x29	; 41
    862e:	2c af       	std	Y+60, r18	; 0x3c
    8630:	3d af       	std	Y+61, r19	; 0x3d
    8632:	4e af       	std	Y+62, r20	; 0x3e
    8634:	5f af       	std	Y+63, r21	; 0x3f
    8636:	a9 97       	sbiw	r28, 0x29	; 41
    8638:	bf ef       	ldi	r27, 0xFF	; 255
    863a:	6b 1a       	sub	r6, r27
    863c:	7b 0a       	sbc	r7, r27
    863e:	8b 0a       	sbc	r8, r27
    8640:	f1 01       	movw	r30, r2
    8642:	34 96       	adiw	r30, 0x04	; 4
    8644:	1f 01       	movw	r2, r30
    8646:	0a c0       	rjmp	.+20     	; 0x865c <_printf_fn+0x5a8>
    8648:	ff ef       	ldi	r31, 0xFF	; 255
    864a:	6f 1a       	sub	r6, r31
    864c:	7f 0a       	sbc	r7, r31
    864e:	8f 0a       	sbc	r8, r31
    8650:	b0 c0       	rjmp	.+352    	; 0x87b2 <_printf_fn+0x6fe>
    8652:	2f ef       	ldi	r18, 0xFF	; 255
    8654:	62 1a       	sub	r6, r18
    8656:	72 0a       	sbc	r7, r18
    8658:	82 0a       	sbc	r8, r18
    865a:	b8 c0       	rjmp	.+368    	; 0x87cc <_printf_fn+0x718>
    865c:	66 96       	adiw	r28, 0x16	; 22
    865e:	8f ad       	ldd	r24, Y+63	; 0x3f
    8660:	66 97       	sbiw	r28, 0x16	; 22
    8662:	67 96       	adiw	r28, 0x17	; 23
    8664:	9f ad       	ldd	r25, Y+63	; 0x3f
    8666:	67 97       	sbiw	r28, 0x17	; 23
    8668:	a3 96       	adiw	r28, 0x23	; 35
    866a:	ee ad       	ldd	r30, Y+62	; 0x3e
    866c:	ff ad       	ldd	r31, Y+63	; 0x3f
    866e:	a3 97       	sbiw	r28, 0x23	; 35
    8670:	e2 54       	subi	r30, 0x42	; 66
    8672:	f1 09       	sbc	r31, r1
    8674:	e7 33       	cpi	r30, 0x37	; 55
    8676:	f1 05       	cpc	r31, r1
    8678:	08 f0       	brcs	.+2      	; 0x867c <_printf_fn+0x5c8>
    867a:	f9 c0       	rjmp	.+498    	; 0x886e <_printf_fn+0x7ba>
    867c:	e3 58       	subi	r30, 0x83	; 131
    867e:	ff 4f       	sbci	r31, 0xFF	; 255
    8680:	0c 94 92 e8 	jmp	0x1d124	; 0x1d124 <__tablejump2__>
    8684:	e8 94       	clt
    8686:	94 f8       	bld	r9, 4
    8688:	e8 94       	clt
    868a:	92 f8       	bld	r9, 2
    868c:	a9 2c       	mov	r10, r9
    868e:	b1 2c       	mov	r11, r1
    8690:	a1 96       	adiw	r28, 0x21	; 33
    8692:	ce ac       	ldd	r12, Y+62	; 0x3e
    8694:	df ac       	ldd	r13, Y+63	; 0x3f
    8696:	a1 97       	sbiw	r28, 0x21	; 33
    8698:	72 01       	movw	r14, r4
    869a:	0a e0       	ldi	r16, 0x0A	; 10
    869c:	10 e0       	ldi	r17, 0x00	; 0
    869e:	13 c0       	rjmp	.+38     	; 0x86c6 <_printf_fn+0x612>
    86a0:	a9 2c       	mov	r10, r9
    86a2:	b1 2c       	mov	r11, r1
    86a4:	a1 96       	adiw	r28, 0x21	; 33
    86a6:	ce ac       	ldd	r12, Y+62	; 0x3e
    86a8:	df ac       	ldd	r13, Y+63	; 0x3f
    86aa:	a1 97       	sbiw	r28, 0x21	; 33
    86ac:	72 01       	movw	r14, r4
    86ae:	02 e0       	ldi	r16, 0x02	; 2
    86b0:	10 e0       	ldi	r17, 0x00	; 0
    86b2:	09 c0       	rjmp	.+18     	; 0x86c6 <_printf_fn+0x612>
    86b4:	a9 2c       	mov	r10, r9
    86b6:	b1 2c       	mov	r11, r1
    86b8:	a1 96       	adiw	r28, 0x21	; 33
    86ba:	ce ac       	ldd	r12, Y+62	; 0x3e
    86bc:	df ac       	ldd	r13, Y+63	; 0x3f
    86be:	a1 97       	sbiw	r28, 0x21	; 33
    86c0:	72 01       	movw	r14, r4
    86c2:	08 e0       	ldi	r16, 0x08	; 8
    86c4:	10 e0       	ldi	r17, 0x00	; 0
    86c6:	22 e4       	ldi	r18, 0x42	; 66
    86c8:	30 e0       	ldi	r19, 0x00	; 0
    86ca:	ae 01       	movw	r20, r28
    86cc:	4f 5f       	subi	r20, 0xFF	; 255
    86ce:	5f 4f       	sbci	r21, 0xFF	; 255
    86d0:	6f 96       	adiw	r28, 0x1f	; 31
    86d2:	6e ad       	ldd	r22, Y+62	; 0x3e
    86d4:	7f ad       	ldd	r23, Y+63	; 0x3f
    86d6:	6f 97       	sbiw	r28, 0x1f	; 31
    86d8:	f3 d9       	rcall	.-3098   	; 0x7ac0 <p_ntoa>
    86da:	30 c0       	rjmp	.+96     	; 0x873c <_printf_fn+0x688>
    86dc:	a9 2c       	mov	r10, r9
    86de:	b1 2c       	mov	r11, r1
    86e0:	a1 96       	adiw	r28, 0x21	; 33
    86e2:	ce ac       	ldd	r12, Y+62	; 0x3e
    86e4:	df ac       	ldd	r13, Y+63	; 0x3f
    86e6:	a1 97       	sbiw	r28, 0x21	; 33
    86e8:	72 01       	movw	r14, r4
    86ea:	00 e1       	ldi	r16, 0x10	; 16
    86ec:	10 e0       	ldi	r17, 0x00	; 0
    86ee:	22 e4       	ldi	r18, 0x42	; 66
    86f0:	30 e0       	ldi	r19, 0x00	; 0
    86f2:	ae 01       	movw	r20, r28
    86f4:	4f 5f       	subi	r20, 0xFF	; 255
    86f6:	5f 4f       	sbci	r21, 0xFF	; 255
    86f8:	6f 96       	adiw	r28, 0x1f	; 31
    86fa:	6e ad       	ldd	r22, Y+62	; 0x3e
    86fc:	7f ad       	ldd	r23, Y+63	; 0x3f
    86fe:	6f 97       	sbiw	r28, 0x1f	; 31
    8700:	df d9       	rcall	.-3138   	; 0x7ac0 <p_ntoa>
    8702:	7c 01       	movw	r14, r24
    8704:	a3 96       	adiw	r28, 0x23	; 35
    8706:	6e ad       	ldd	r22, Y+62	; 0x3e
    8708:	7f ad       	ldd	r23, Y+63	; 0x3f
    870a:	a3 97       	sbiw	r28, 0x23	; 35
    870c:	67 7f       	andi	r22, 0xF7	; 247
    870e:	60 35       	cpi	r22, 0x50	; 80
    8710:	71 05       	cpc	r23, r1
    8712:	c9 f5       	brne	.+114    	; 0x8786 <_printf_fn+0x6d2>
    8714:	34 c0       	rjmp	.+104    	; 0x877e <_printf_fn+0x6ca>
    8716:	c9 2c       	mov	r12, r9
    8718:	d1 2c       	mov	r13, r1
    871a:	a1 96       	adiw	r28, 0x21	; 33
    871c:	ee ac       	ldd	r14, Y+62	; 0x3e
    871e:	ff ac       	ldd	r15, Y+63	; 0x3f
    8720:	a1 97       	sbiw	r28, 0x21	; 33
    8722:	82 01       	movw	r16, r4
    8724:	22 e4       	ldi	r18, 0x42	; 66
    8726:	30 e0       	ldi	r19, 0x00	; 0
    8728:	ae 01       	movw	r20, r28
    872a:	4f 5f       	subi	r20, 0xFF	; 255
    872c:	5f 4f       	sbci	r21, 0xFF	; 255
    872e:	a9 96       	adiw	r28, 0x29	; 41
    8730:	6c ad       	ldd	r22, Y+60	; 0x3c
    8732:	7d ad       	ldd	r23, Y+61	; 0x3d
    8734:	8e ad       	ldd	r24, Y+62	; 0x3e
    8736:	9f ad       	ldd	r25, Y+63	; 0x3f
    8738:	a9 97       	sbiw	r28, 0x29	; 41
    873a:	17 da       	rcall	.-3026   	; 0x7b6a <p_ftoa>
    873c:	93 fa       	bst	r9, 3
    873e:	00 27       	eor	r16, r16
    8740:	00 f9       	bld	r16, 0
    8742:	10 e0       	ldi	r17, 0x00	; 0
    8744:	9c 01       	movw	r18, r24
    8746:	24 c0       	rjmp	.+72     	; 0x8790 <_printf_fn+0x6dc>
    8748:	c9 2c       	mov	r12, r9
    874a:	d1 2c       	mov	r13, r1
    874c:	a1 96       	adiw	r28, 0x21	; 33
    874e:	ee ac       	ldd	r14, Y+62	; 0x3e
    8750:	ff ac       	ldd	r15, Y+63	; 0x3f
    8752:	a1 97       	sbiw	r28, 0x21	; 33
    8754:	82 01       	movw	r16, r4
    8756:	22 e4       	ldi	r18, 0x42	; 66
    8758:	30 e0       	ldi	r19, 0x00	; 0
    875a:	ae 01       	movw	r20, r28
    875c:	4f 5f       	subi	r20, 0xFF	; 255
    875e:	5f 4f       	sbci	r21, 0xFF	; 255
    8760:	a9 96       	adiw	r28, 0x29	; 41
    8762:	6c ad       	ldd	r22, Y+60	; 0x3c
    8764:	7d ad       	ldd	r23, Y+61	; 0x3d
    8766:	8e ad       	ldd	r24, Y+62	; 0x3e
    8768:	9f ad       	ldd	r25, Y+63	; 0x3f
    876a:	a9 97       	sbiw	r28, 0x29	; 41
    876c:	05 db       	rcall	.-2550   	; 0x7d78 <p_etoa>
    876e:	7c 01       	movw	r14, r24
    8770:	a3 96       	adiw	r28, 0x23	; 35
    8772:	4e ad       	ldd	r20, Y+62	; 0x3e
    8774:	5f ad       	ldd	r21, Y+63	; 0x3f
    8776:	a3 97       	sbiw	r28, 0x23	; 35
    8778:	45 34       	cpi	r20, 0x45	; 69
    877a:	51 05       	cpc	r21, r1
    877c:	21 f4       	brne	.+8      	; 0x8786 <_printf_fn+0x6d2>
    877e:	ce 01       	movw	r24, r28
    8780:	01 96       	adiw	r24, 0x01	; 1
    8782:	0e 94 5c 30 	call	0x60b8	; 0x60b8 <strupper>
    8786:	93 fa       	bst	r9, 3
    8788:	00 27       	eor	r16, r16
    878a:	00 f9       	bld	r16, 0
    878c:	10 e0       	ldi	r17, 0x00	; 0
    878e:	97 01       	movw	r18, r14
    8790:	a2 01       	movw	r20, r4
    8792:	be 01       	movw	r22, r28
    8794:	6f 5f       	subi	r22, 0xFF	; 255
    8796:	7f 4f       	sbci	r23, 0xFF	; 255
    8798:	a5 96       	adiw	r28, 0x25	; 37
    879a:	8e ad       	ldd	r24, Y+62	; 0x3e
    879c:	9f ad       	ldd	r25, Y+63	; 0x3f
    879e:	a5 97       	sbiw	r28, 0x25	; 37
    87a0:	47 dc       	rcall	.-1906   	; 0x8030 <_puts_pad>
    87a2:	69 c0       	rjmp	.+210    	; 0x8876 <_printf_fn+0x7c2>
    87a4:	a3 96       	adiw	r28, 0x23	; 35
    87a6:	8e ad       	ldd	r24, Y+62	; 0x3e
    87a8:	9f ad       	ldd	r25, Y+63	; 0x3f
    87aa:	a3 97       	sbiw	r28, 0x23	; 35
    87ac:	83 37       	cpi	r24, 0x73	; 115
    87ae:	91 05       	cpc	r25, r1
    87b0:	69 f4       	brne	.+26     	; 0x87cc <_printf_fn+0x718>
    87b2:	71 01       	movw	r14, r2
    87b4:	92 e0       	ldi	r25, 0x02	; 2
    87b6:	e9 0e       	add	r14, r25
    87b8:	f1 1c       	adc	r15, r1
    87ba:	d1 01       	movw	r26, r2
    87bc:	6d 91       	ld	r22, X+
    87be:	7c 91       	ld	r23, X
    87c0:	61 15       	cp	r22, r1
    87c2:	71 05       	cpc	r23, r1
    87c4:	91 f4       	brne	.+36     	; 0x87ea <_printf_fn+0x736>
    87c6:	6c eb       	ldi	r22, 0xBC	; 188
    87c8:	77 e0       	ldi	r23, 0x07	; 7
    87ca:	0f c0       	rjmp	.+30     	; 0x87ea <_printf_fn+0x736>
    87cc:	71 01       	movw	r14, r2
    87ce:	b2 e0       	ldi	r27, 0x02	; 2
    87d0:	eb 0e       	add	r14, r27
    87d2:	f1 1c       	adc	r15, r1
    87d4:	f1 01       	movw	r30, r2
    87d6:	80 81       	ld	r24, Z
    87d8:	60 96       	adiw	r28, 0x10	; 16
    87da:	8f af       	std	Y+63, r24	; 0x3f
    87dc:	60 97       	sbiw	r28, 0x10	; 16
    87de:	61 96       	adiw	r28, 0x11	; 17
    87e0:	1f ae       	std	Y+63, r1	; 0x3f
    87e2:	61 97       	sbiw	r28, 0x11	; 17
    87e4:	be 01       	movw	r22, r28
    87e6:	61 5b       	subi	r22, 0xB1	; 177
    87e8:	7f 4f       	sbci	r23, 0xFF	; 255
    87ea:	fb 01       	movw	r30, r22
    87ec:	01 90       	ld	r0, Z+
    87ee:	00 20       	and	r0, r0
    87f0:	e9 f7       	brne	.-6      	; 0x87ec <_printf_fn+0x738>
    87f2:	31 97       	sbiw	r30, 0x01	; 1
    87f4:	e6 1b       	sub	r30, r22
    87f6:	f7 0b       	sbc	r31, r23
    87f8:	a1 96       	adiw	r28, 0x21	; 33
    87fa:	2e ad       	ldd	r18, Y+62	; 0x3e
    87fc:	3f ad       	ldd	r19, Y+63	; 0x3f
    87fe:	a1 97       	sbiw	r28, 0x21	; 33
    8800:	23 2b       	or	r18, r19
    8802:	21 f4       	brne	.+8      	; 0x880c <_printf_fn+0x758>
    8804:	a1 96       	adiw	r28, 0x21	; 33
    8806:	ff af       	std	Y+63, r31	; 0x3f
    8808:	ee af       	std	Y+62, r30	; 0x3e
    880a:	a1 97       	sbiw	r28, 0x21	; 33
    880c:	a1 96       	adiw	r28, 0x21	; 33
    880e:	4e ad       	ldd	r20, Y+62	; 0x3e
    8810:	5f ad       	ldd	r21, Y+63	; 0x3f
    8812:	a1 97       	sbiw	r28, 0x21	; 33
    8814:	44 16       	cp	r4, r20
    8816:	55 06       	cpc	r5, r21
    8818:	3c f4       	brge	.+14     	; 0x8828 <_printf_fn+0x774>
    881a:	41 14       	cp	r4, r1
    881c:	51 04       	cpc	r5, r1
    881e:	21 f0       	breq	.+8      	; 0x8828 <_printf_fn+0x774>
    8820:	a1 96       	adiw	r28, 0x21	; 33
    8822:	5f ae       	std	Y+63, r5	; 0x3f
    8824:	4e ae       	std	Y+62, r4	; 0x3e
    8826:	a1 97       	sbiw	r28, 0x21	; 33
    8828:	93 fa       	bst	r9, 3
    882a:	00 27       	eor	r16, r16
    882c:	00 f9       	bld	r16, 0
    882e:	10 e0       	ldi	r17, 0x00	; 0
    8830:	a1 96       	adiw	r28, 0x21	; 33
    8832:	2e ad       	ldd	r18, Y+62	; 0x3e
    8834:	3f ad       	ldd	r19, Y+63	; 0x3f
    8836:	a1 97       	sbiw	r28, 0x21	; 33
    8838:	a2 01       	movw	r20, r4
    883a:	a5 96       	adiw	r28, 0x25	; 37
    883c:	8e ad       	ldd	r24, Y+62	; 0x3e
    883e:	9f ad       	ldd	r25, Y+63	; 0x3f
    8840:	a5 97       	sbiw	r28, 0x25	; 37
    8842:	f6 db       	rcall	.-2068   	; 0x8030 <_puts_pad>
    8844:	17 01       	movw	r2, r14
    8846:	17 c0       	rjmp	.+46     	; 0x8876 <_printf_fn+0x7c2>
    8848:	f6 01       	movw	r30, r12
    884a:	5e 2d       	mov	r21, r14
    884c:	0e 94 f8 e8 	call	0x1d1f0	; 0x1d1f0 <__xload_1>
    8850:	66 23       	and	r22, r22
    8852:	89 f0       	breq	.+34     	; 0x8876 <_printf_fn+0x7c2>
    8854:	5f ef       	ldi	r21, 0xFF	; 255
    8856:	c5 1a       	sub	r12, r21
    8858:	d5 0a       	sbc	r13, r21
    885a:	e5 0a       	sbc	r14, r21
    885c:	a5 96       	adiw	r28, 0x25	; 37
    885e:	ae ad       	ldd	r26, Y+62	; 0x3e
    8860:	bf ad       	ldd	r27, Y+63	; 0x3f
    8862:	a5 97       	sbiw	r28, 0x25	; 37
    8864:	ed 91       	ld	r30, X+
    8866:	fc 91       	ld	r31, X
    8868:	11 97       	sbiw	r26, 0x01	; 1
    886a:	cd 01       	movw	r24, r26
    886c:	09 95       	icall
    886e:	6c 14       	cp	r6, r12
    8870:	7d 04       	cpc	r7, r13
    8872:	8e 04       	cpc	r8, r14
    8874:	48 f7       	brcc	.-46     	; 0x8848 <_printf_fn+0x794>
    8876:	e8 2c       	mov	r14, r8
    8878:	63 01       	movw	r12, r6
    887a:	4b cc       	rjmp	.-1898   	; 0x8112 <_printf_fn+0x5e>
    887c:	e2 e0       	ldi	r30, 0x02	; 2
    887e:	f0 e0       	ldi	r31, 0x00	; 0
    8880:	6f 96       	adiw	r28, 0x1f	; 31
    8882:	ff af       	std	Y+63, r31	; 0x3f
    8884:	ee af       	std	Y+62, r30	; 0x3e
    8886:	6f 97       	sbiw	r28, 0x1f	; 31
    8888:	57 cd       	rjmp	.-1362   	; 0x8338 <_printf_fn+0x284>
    888a:	6f 96       	adiw	r28, 0x1f	; 31
    888c:	ee ad       	ldd	r30, Y+62	; 0x3e
    888e:	ff ad       	ldd	r31, Y+63	; 0x3f
    8890:	6f 97       	sbiw	r28, 0x1f	; 31
    8892:	32 97       	sbiw	r30, 0x02	; 2
    8894:	61 f4       	brne	.+24     	; 0x88ae <_printf_fn+0x7fa>
    8896:	51 01       	movw	r10, r2
    8898:	f2 e0       	ldi	r31, 0x02	; 2
    889a:	af 0e       	add	r10, r31
    889c:	b1 1c       	adc	r11, r1
    889e:	d1 01       	movw	r26, r2
    88a0:	8d 91       	ld	r24, X+
    88a2:	9c 91       	ld	r25, X
    88a4:	65 96       	adiw	r28, 0x15	; 21
    88a6:	9f af       	std	Y+63, r25	; 0x3f
    88a8:	8e af       	std	Y+62, r24	; 0x3e
    88aa:	65 97       	sbiw	r28, 0x15	; 21
    88ac:	c5 cd       	rjmp	.-1142   	; 0x8438 <_printf_fn+0x384>
    88ae:	6f 96       	adiw	r28, 0x1f	; 31
    88b0:	2e ad       	ldd	r18, Y+62	; 0x3e
    88b2:	3f ad       	ldd	r19, Y+63	; 0x3f
    88b4:	6f 97       	sbiw	r28, 0x1f	; 31
    88b6:	24 30       	cpi	r18, 0x04	; 4
    88b8:	31 05       	cpc	r19, r1
    88ba:	09 f0       	breq	.+2      	; 0x88be <_printf_fn+0x80a>
    88bc:	fe cd       	rjmp	.-1028   	; 0x84ba <_printf_fn+0x406>
    88be:	51 01       	movw	r10, r2
    88c0:	f4 e0       	ldi	r31, 0x04	; 4
    88c2:	af 0e       	add	r10, r31
    88c4:	b1 1c       	adc	r11, r1
    88c6:	f1 01       	movw	r30, r2
    88c8:	80 81       	ld	r24, Z
    88ca:	91 81       	ldd	r25, Z+1	; 0x01
    88cc:	a2 81       	ldd	r26, Z+2	; 0x02
    88ce:	b3 81       	ldd	r27, Z+3	; 0x03
    88d0:	2f 96       	adiw	r28, 0x0f	; 15
    88d2:	8c af       	std	Y+60, r24	; 0x3c
    88d4:	9d af       	std	Y+61, r25	; 0x3d
    88d6:	ae af       	std	Y+62, r26	; 0x3e
    88d8:	bf af       	std	Y+63, r27	; 0x3f
    88da:	2f 97       	sbiw	r28, 0x0f	; 15
    88dc:	dc cd       	rjmp	.-1096   	; 0x8496 <_printf_fn+0x3e2>
    88de:	c5 59       	subi	r28, 0x95	; 149
    88e0:	df 4f       	sbci	r29, 0xFF	; 255
    88e2:	e2 e1       	ldi	r30, 0x12	; 18
    88e4:	0c 94 dd e8 	jmp	0x1d1ba	; 0x1d1ba <__epilogue_restores__>

000088e8 <vsnprintf_P>:
    88e8:	a8 e0       	ldi	r26, 0x08	; 8
    88ea:	b0 e0       	ldi	r27, 0x00	; 0
    88ec:	ea e7       	ldi	r30, 0x7A	; 122
    88ee:	f4 e4       	ldi	r31, 0x44	; 68
    88f0:	0c 94 cd e8 	jmp	0x1d19a	; 0x1d19a <__prologue_saves__+0x18>
    88f4:	7c 01       	movw	r14, r24
    88f6:	cb 01       	movw	r24, r22
    88f8:	64 2f       	mov	r22, r20
    88fa:	a9 01       	movw	r20, r18
    88fc:	98 01       	movw	r18, r16
    88fe:	f7 01       	movw	r30, r14
    8900:	10 82       	st	Z, r1
    8902:	e1 e8       	ldi	r30, 0x81	; 129
    8904:	fc e3       	ldi	r31, 0x3C	; 60
    8906:	fa 83       	std	Y+2, r31	; 0x02
    8908:	e9 83       	std	Y+1, r30	; 0x01
    890a:	9e 83       	std	Y+6, r25	; 0x06
    890c:	8d 83       	std	Y+5, r24	; 0x05
    890e:	18 86       	std	Y+8, r1	; 0x08
    8910:	1f 82       	std	Y+7, r1	; 0x07
    8912:	fc 82       	std	Y+4, r15	; 0x04
    8914:	eb 82       	std	Y+3, r14	; 0x03
    8916:	ce 01       	movw	r24, r28
    8918:	01 96       	adiw	r24, 0x01	; 1
    891a:	cc db       	rcall	.-2152   	; 0x80b4 <_printf_fn>
    891c:	f7 01       	movw	r30, r14
    891e:	01 90       	ld	r0, Z+
    8920:	00 20       	and	r0, r0
    8922:	e9 f7       	brne	.-6      	; 0x891e <vsnprintf_P+0x36>
    8924:	cf 01       	movw	r24, r30
    8926:	01 97       	sbiw	r24, 0x01	; 1
    8928:	8e 19       	sub	r24, r14
    892a:	9f 09       	sbc	r25, r15
    892c:	28 96       	adiw	r28, 0x08	; 8
    892e:	e6 e0       	ldi	r30, 0x06	; 6
    8930:	0c 94 e9 e8 	jmp	0x1d1d2	; 0x1d1d2 <__epilogue_restores__+0x18>

00008934 <snprintf_P>:
    8934:	a0 e0       	ldi	r26, 0x00	; 0
    8936:	b0 e0       	ldi	r27, 0x00	; 0
    8938:	e0 ea       	ldi	r30, 0xA0	; 160
    893a:	f4 e4       	ldi	r31, 0x44	; 68
    893c:	0c 94 cf e8 	jmp	0x1d19e	; 0x1d19e <__prologue_saves__+0x1c>
    8940:	8e 01       	movw	r16, r28
    8942:	02 5f       	subi	r16, 0xF2	; 242
    8944:	1f 4f       	sbci	r17, 0xFF	; 255
    8946:	2b 85       	ldd	r18, Y+11	; 0x0b
    8948:	3c 85       	ldd	r19, Y+12	; 0x0c
    894a:	4d 85       	ldd	r20, Y+13	; 0x0d
    894c:	69 85       	ldd	r22, Y+9	; 0x09
    894e:	7a 85       	ldd	r23, Y+10	; 0x0a
    8950:	8f 81       	ldd	r24, Y+7	; 0x07
    8952:	98 85       	ldd	r25, Y+8	; 0x08
    8954:	c9 df       	rcall	.-110    	; 0x88e8 <vsnprintf_P>
    8956:	e4 e0       	ldi	r30, 0x04	; 4
    8958:	0c 94 eb e8 	jmp	0x1d1d6	; 0x1d1d6 <__epilogue_restores__+0x1c>

0000895c <sprintf_P>:
    895c:	a0 e0       	ldi	r26, 0x00	; 0
    895e:	b0 e0       	ldi	r27, 0x00	; 0
    8960:	e4 eb       	ldi	r30, 0xB4	; 180
    8962:	f4 e4       	ldi	r31, 0x44	; 68
    8964:	0c 94 cf e8 	jmp	0x1d19e	; 0x1d19e <__prologue_saves__+0x1c>
    8968:	8e 01       	movw	r16, r28
    896a:	04 5f       	subi	r16, 0xF4	; 244
    896c:	1f 4f       	sbci	r17, 0xFF	; 255
    896e:	29 85       	ldd	r18, Y+9	; 0x09
    8970:	3a 85       	ldd	r19, Y+10	; 0x0a
    8972:	4b 85       	ldd	r20, Y+11	; 0x0b
    8974:	60 e0       	ldi	r22, 0x00	; 0
    8976:	74 e0       	ldi	r23, 0x04	; 4
    8978:	8f 81       	ldd	r24, Y+7	; 0x07
    897a:	98 85       	ldd	r25, Y+8	; 0x08
    897c:	b5 df       	rcall	.-150    	; 0x88e8 <vsnprintf_P>
    897e:	e4 e0       	ldi	r30, 0x04	; 4
    8980:	0c 94 eb e8 	jmp	0x1d1d6	; 0x1d1d6 <__epilogue_restores__+0x1c>

00008984 <printf_P>:
/// @return size of printed string
/// TODO create a devprintf using an array of function prointers ?
MEMSPACE 
int 
printf_P(__memx const char *format, ...)
{
    8984:	a8 e0       	ldi	r26, 0x08	; 8
    8986:	b0 e0       	ldi	r27, 0x00	; 0
    8988:	e8 ec       	ldi	r30, 0xC8	; 200
    898a:	f4 e4       	ldi	r31, 0x44	; 68
    898c:	0c 94 d1 e8 	jmp	0x1d1a2	; 0x1d1a2 <__prologue_saves__+0x20>
    8990:	9e 01       	movw	r18, r28
    8992:	23 5f       	subi	r18, 0xF3	; 243
    8994:	3f 4f       	sbci	r19, 0xFF	; 255
    8996:	f9 01       	movw	r30, r18
    8998:	41 91       	ld	r20, Z+
    899a:	51 91       	ld	r21, Z+
    899c:	61 91       	ld	r22, Z+
    899e:	9f 01       	movw	r18, r30
    printf_t fn;
    va_list va;

    fn.put = _putc_fn;
    89a0:	8a e9       	ldi	r24, 0x9A	; 154
    89a2:	9c e3       	ldi	r25, 0x3C	; 60
    89a4:	9a 83       	std	Y+2, r25	; 0x02
    89a6:	89 83       	std	Y+1, r24	; 0x01
    fn.sent = 0;
    89a8:	18 86       	std	Y+8, r1	; 0x08
    89aa:	1f 82       	std	Y+7, r1	; 0x07

    va_start(va, format);
    _printf_fn(&fn, format, va);
    89ac:	ce 01       	movw	r24, r28
    89ae:	01 96       	adiw	r24, 0x01	; 1
    89b0:	81 db       	rcall	.-2302   	; 0x80b4 <_printf_fn>
    va_end(va);

    return ((int)fn.sent);
}
    89b2:	8f 81       	ldd	r24, Y+7	; 0x07
    89b4:	98 85       	ldd	r25, Y+8	; 0x08
    89b6:	28 96       	adiw	r28, 0x08	; 8
    89b8:	e2 e0       	ldi	r30, 0x02	; 2
    89ba:	0c 94 ed e8 	jmp	0x1d1da	; 0x1d1da <__epilogue_restores__+0x20>

000089be <atodigit>:
    if(sign)
        num = -num;
    if(endptr)
        *endptr = (char *) nptr;
    return(num);
}
    89be:	9c 01       	movw	r18, r24
    89c0:	20 53       	subi	r18, 0x30	; 48
    89c2:	31 09       	sbc	r19, r1
    89c4:	2a 30       	cpi	r18, 0x0A	; 10
    89c6:	31 05       	cpc	r19, r1
    89c8:	10 f4       	brcc	.+4      	; 0x89ce <atodigit+0x10>
    89ca:	c9 01       	movw	r24, r18
    89cc:	10 c0       	rjmp	.+32     	; 0x89ee <atodigit+0x30>
    89ce:	9c 01       	movw	r18, r24
    89d0:	21 54       	subi	r18, 0x41	; 65
    89d2:	31 09       	sbc	r19, r1
    89d4:	26 30       	cpi	r18, 0x06	; 6
    89d6:	31 05       	cpc	r19, r1
    89d8:	10 f4       	brcc	.+4      	; 0x89de <atodigit+0x20>
    89da:	c7 97       	sbiw	r24, 0x37	; 55
    89dc:	08 c0       	rjmp	.+16     	; 0x89ee <atodigit+0x30>
    89de:	9c 01       	movw	r18, r24
    89e0:	21 56       	subi	r18, 0x61	; 97
    89e2:	31 09       	sbc	r19, r1
    89e4:	26 30       	cpi	r18, 0x06	; 6
    89e6:	31 05       	cpc	r19, r1
    89e8:	28 f4       	brcc	.+10     	; 0x89f4 <atodigit+0x36>
    89ea:	87 55       	subi	r24, 0x57	; 87
    89ec:	91 09       	sbc	r25, r1
    89ee:	86 17       	cp	r24, r22
    89f0:	97 07       	cpc	r25, r23
    89f2:	14 f0       	brlt	.+4      	; 0x89f8 <atodigit+0x3a>
    89f4:	8f ef       	ldi	r24, 0xFF	; 255
    89f6:	9f ef       	ldi	r25, 0xFF	; 255
    89f8:	08 95       	ret

000089fa <strtol>:
    89fa:	a0 e0       	ldi	r26, 0x00	; 0
    89fc:	b0 e0       	ldi	r27, 0x00	; 0
    89fe:	e3 e0       	ldi	r30, 0x03	; 3
    8a00:	f5 e4       	ldi	r31, 0x45	; 69
    8a02:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__prologue_saves__>
    8a06:	2b 01       	movw	r4, r22
    8a08:	8a 01       	movw	r16, r20
    8a0a:	ec 01       	movw	r28, r24
    8a0c:	28 81       	ld	r18, Y
    8a0e:	01 96       	adiw	r24, 0x01	; 1
    8a10:	20 32       	cpi	r18, 0x20	; 32
    8a12:	d9 f3       	breq	.-10     	; 0x8a0a <strtol+0x10>
    8a14:	29 30       	cpi	r18, 0x09	; 9
    8a16:	c9 f3       	breq	.-14     	; 0x8a0a <strtol+0x10>
    8a18:	2d 32       	cpi	r18, 0x2D	; 45
    8a1a:	29 f4       	brne	.+10     	; 0x8a26 <strtol+0x2c>
    8a1c:	ec 01       	movw	r28, r24
    8a1e:	66 24       	eor	r6, r6
    8a20:	63 94       	inc	r6
    8a22:	71 2c       	mov	r7, r1
    8a24:	05 c0       	rjmp	.+10     	; 0x8a30 <strtol+0x36>
    8a26:	2b 32       	cpi	r18, 0x2B	; 43
    8a28:	09 f4       	brne	.+2      	; 0x8a2c <strtol+0x32>
    8a2a:	ec 01       	movw	r28, r24
    8a2c:	61 2c       	mov	r6, r1
    8a2e:	71 2c       	mov	r7, r1
    8a30:	9e 01       	movw	r18, r28
    8a32:	2f 5f       	subi	r18, 0xFF	; 255
    8a34:	3f 4f       	sbci	r19, 0xFF	; 255
    8a36:	88 81       	ld	r24, Y
    8a38:	80 33       	cpi	r24, 0x30	; 48
    8a3a:	11 f4       	brne	.+4      	; 0x8a40 <strtol+0x46>
    8a3c:	e9 01       	movw	r28, r18
    8a3e:	f8 cf       	rjmp	.-16     	; 0x8a30 <strtol+0x36>
    8a40:	c1 2c       	mov	r12, r1
    8a42:	d1 2c       	mov	r13, r1
    8a44:	76 01       	movw	r14, r12
    8a46:	48 01       	movw	r8, r16
    8a48:	01 2e       	mov	r0, r17
    8a4a:	00 0c       	add	r0, r0
    8a4c:	aa 08       	sbc	r10, r10
    8a4e:	bb 08       	sbc	r11, r11
    8a50:	3c 2e       	mov	r3, r28
    8a52:	2d 2e       	mov	r2, r29
    8a54:	89 91       	ld	r24, Y+
    8a56:	88 23       	and	r24, r24
    8a58:	31 f0       	breq	.+12     	; 0x8a66 <strtol+0x6c>
    8a5a:	b8 01       	movw	r22, r16
    8a5c:	90 e0       	ldi	r25, 0x00	; 0
    8a5e:	af df       	rcall	.-162    	; 0x89be <atodigit>
    8a60:	fc 01       	movw	r30, r24
    8a62:	97 ff       	sbrs	r25, 7
    8a64:	0c c0       	rjmp	.+24     	; 0x8a7e <strtol+0x84>
    8a66:	61 14       	cp	r6, r1
    8a68:	71 04       	cpc	r7, r1
    8a6a:	c1 f0       	breq	.+48     	; 0x8a9c <strtol+0xa2>
    8a6c:	f0 94       	com	r15
    8a6e:	e0 94       	com	r14
    8a70:	d0 94       	com	r13
    8a72:	c0 94       	com	r12
    8a74:	c1 1c       	adc	r12, r1
    8a76:	d1 1c       	adc	r13, r1
    8a78:	e1 1c       	adc	r14, r1
    8a7a:	f1 1c       	adc	r15, r1
    8a7c:	0f c0       	rjmp	.+30     	; 0x8a9c <strtol+0xa2>
    8a7e:	a5 01       	movw	r20, r10
    8a80:	94 01       	movw	r18, r8
    8a82:	c7 01       	movw	r24, r14
    8a84:	b6 01       	movw	r22, r12
    8a86:	0e 94 12 e8 	call	0x1d024	; 0x1d024 <__mulsi3>
    8a8a:	6f 01       	movw	r12, r30
    8a8c:	ff 0f       	add	r31, r31
    8a8e:	ee 08       	sbc	r14, r14
    8a90:	ff 08       	sbc	r15, r15
    8a92:	c6 0e       	add	r12, r22
    8a94:	d7 1e       	adc	r13, r23
    8a96:	e8 1e       	adc	r14, r24
    8a98:	f9 1e       	adc	r15, r25
    8a9a:	da cf       	rjmp	.-76     	; 0x8a50 <strtol+0x56>
    8a9c:	41 14       	cp	r4, r1
    8a9e:	51 04       	cpc	r5, r1
    8aa0:	19 f0       	breq	.+6      	; 0x8aa8 <strtol+0xae>
    8aa2:	f2 01       	movw	r30, r4
    8aa4:	30 82       	st	Z, r3
    8aa6:	21 82       	std	Z+1, r2	; 0x01
    8aa8:	c7 01       	movw	r24, r14
    8aaa:	b6 01       	movw	r22, r12
    8aac:	cd b7       	in	r28, 0x3d	; 61
    8aae:	de b7       	in	r29, 0x3e	; 62
    8ab0:	e2 e1       	ldi	r30, 0x12	; 18
    8ab2:	0c 94 dd e8 	jmp	0x1d1ba	; 0x1d1ba <__epilogue_restores__>

00008ab6 <atoh>:
    8ab6:	40 e1       	ldi	r20, 0x10	; 16
    8ab8:	50 e0       	ldi	r21, 0x00	; 0
    8aba:	60 e0       	ldi	r22, 0x00	; 0
    8abc:	70 e0       	ldi	r23, 0x00	; 0
    8abe:	9d cf       	rjmp	.-198    	; 0x89fa <strtol>
    8ac0:	08 95       	ret

00008ac2 <atoi>:
MEMSPACE 
int
atoi(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8ac2:	4a e0       	ldi	r20, 0x0A	; 10
    8ac4:	50 e0       	ldi	r21, 0x00	; 0
    8ac6:	60 e0       	ldi	r22, 0x00	; 0
    8ac8:	70 e0       	ldi	r23, 0x00	; 0
    8aca:	97 df       	rcall	.-210    	; 0x89fa <strtol>
    return((int)num);
}
    8acc:	cb 01       	movw	r24, r22
    8ace:	08 95       	ret

00008ad0 <atol>:
MEMSPACE 
long
atol(const char *str)
{
    unsigned long num;
    num = strtol(str, NULL, 10);
    8ad0:	4a e0       	ldi	r20, 0x0A	; 10
    8ad2:	50 e0       	ldi	r21, 0x00	; 0
    8ad4:	60 e0       	ldi	r22, 0x00	; 0
    8ad6:	70 e0       	ldi	r23, 0x00	; 0
    8ad8:	90 cf       	rjmp	.-224    	; 0x89fa <strtol>
    return(num);
}
    8ada:	08 95       	ret

00008adc <ld_dword>:
			}
		}
	}

	LEAVE_FF(fs, res);
}
    8adc:	fc 01       	movw	r30, r24
    8ade:	62 81       	ldd	r22, Z+2	; 0x02
    8ae0:	73 81       	ldd	r23, Z+3	; 0x03
    8ae2:	cb 01       	movw	r24, r22
    8ae4:	a0 e0       	ldi	r26, 0x00	; 0
    8ae6:	b0 e0       	ldi	r27, 0x00	; 0
    8ae8:	ba 2f       	mov	r27, r26
    8aea:	a9 2f       	mov	r26, r25
    8aec:	98 2f       	mov	r25, r24
    8aee:	88 27       	eor	r24, r24
    8af0:	21 81       	ldd	r18, Z+1	; 0x01
    8af2:	82 2b       	or	r24, r18
    8af4:	ba 2f       	mov	r27, r26
    8af6:	a9 2f       	mov	r26, r25
    8af8:	98 2f       	mov	r25, r24
    8afa:	88 27       	eor	r24, r24
    8afc:	20 81       	ld	r18, Z
    8afe:	bc 01       	movw	r22, r24
    8b00:	cd 01       	movw	r24, r26
    8b02:	62 2b       	or	r22, r18
    8b04:	08 95       	ret

00008b06 <st_dword>:
    8b06:	fc 01       	movw	r30, r24
    8b08:	40 83       	st	Z, r20
    8b0a:	51 83       	std	Z+1, r21	; 0x01
    8b0c:	62 83       	std	Z+2, r22	; 0x02
    8b0e:	73 83       	std	Z+3, r23	; 0x03
    8b10:	08 95       	ret

00008b12 <mem_set>:
    8b12:	48 0f       	add	r20, r24
    8b14:	59 1f       	adc	r21, r25
    8b16:	fc 01       	movw	r30, r24
    8b18:	61 93       	st	Z+, r22
    8b1a:	cf 01       	movw	r24, r30
    8b1c:	e4 17       	cp	r30, r20
    8b1e:	f5 07       	cpc	r31, r21
    8b20:	d1 f7       	brne	.-12     	; 0x8b16 <mem_set+0x4>
    8b22:	08 95       	ret

00008b24 <clust2sect>:
    8b24:	0f 93       	push	r16
    8b26:	1f 93       	push	r17
    8b28:	fc 01       	movw	r30, r24
    8b2a:	9a 01       	movw	r18, r20
    8b2c:	ab 01       	movw	r20, r22
    8b2e:	22 50       	subi	r18, 0x02	; 2
    8b30:	31 09       	sbc	r19, r1
    8b32:	41 09       	sbc	r20, r1
    8b34:	51 09       	sbc	r21, r1
    8b36:	81 8d       	ldd	r24, Z+25	; 0x19
    8b38:	92 8d       	ldd	r25, Z+26	; 0x1a
    8b3a:	a3 8d       	ldd	r26, Z+27	; 0x1b
    8b3c:	b4 8d       	ldd	r27, Z+28	; 0x1c
    8b3e:	02 97       	sbiw	r24, 0x02	; 2
    8b40:	a1 09       	sbc	r26, r1
    8b42:	b1 09       	sbc	r27, r1
    8b44:	28 17       	cp	r18, r24
    8b46:	39 07       	cpc	r19, r25
    8b48:	4a 07       	cpc	r20, r26
    8b4a:	5b 07       	cpc	r21, r27
    8b4c:	68 f4       	brcc	.+26     	; 0x8b68 <clust2sect+0x44>
    8b4e:	a1 85       	ldd	r26, Z+9	; 0x09
    8b50:	b2 85       	ldd	r27, Z+10	; 0x0a
    8b52:	0e 94 a1 e8 	call	0x1d142	; 0x1d142 <__muluhisi3>
    8b56:	05 a5       	ldd	r16, Z+45	; 0x2d
    8b58:	16 a5       	ldd	r17, Z+46	; 0x2e
    8b5a:	27 a5       	ldd	r18, Z+47	; 0x2f
    8b5c:	30 a9       	ldd	r19, Z+48	; 0x30
    8b5e:	60 0f       	add	r22, r16
    8b60:	71 1f       	adc	r23, r17
    8b62:	82 1f       	adc	r24, r18
    8b64:	93 1f       	adc	r25, r19
    8b66:	03 c0       	rjmp	.+6      	; 0x8b6e <clust2sect+0x4a>
    8b68:	60 e0       	ldi	r22, 0x00	; 0
    8b6a:	70 e0       	ldi	r23, 0x00	; 0
    8b6c:	cb 01       	movw	r24, r22
    8b6e:	1f 91       	pop	r17
    8b70:	0f 91       	pop	r16
    8b72:	08 95       	ret

00008b74 <clmt_clust>:
    8b74:	cf 93       	push	r28
    8b76:	df 93       	push	r29
    8b78:	fc 01       	movw	r30, r24
    8b7a:	c2 a1       	ldd	r28, Z+34	; 0x22
    8b7c:	d3 a1       	ldd	r29, Z+35	; 0x23
    8b7e:	24 96       	adiw	r28, 0x04	; 4
    8b80:	cb 01       	movw	r24, r22
    8b82:	ba 01       	movw	r22, r20
    8b84:	29 e0       	ldi	r18, 0x09	; 9
    8b86:	96 95       	lsr	r25
    8b88:	87 95       	ror	r24
    8b8a:	77 95       	ror	r23
    8b8c:	67 95       	ror	r22
    8b8e:	2a 95       	dec	r18
    8b90:	d1 f7       	brne	.-12     	; 0x8b86 <clmt_clust+0x12>
    8b92:	01 90       	ld	r0, Z+
    8b94:	f0 81       	ld	r31, Z
    8b96:	e0 2d       	mov	r30, r0
    8b98:	21 85       	ldd	r18, Z+9	; 0x09
    8b9a:	32 85       	ldd	r19, Z+10	; 0x0a
    8b9c:	40 e0       	ldi	r20, 0x00	; 0
    8b9e:	50 e0       	ldi	r21, 0x00	; 0
    8ba0:	0e 94 54 e8 	call	0x1d0a8	; 0x1d0a8 <__udivmodsi4>
    8ba4:	88 81       	ld	r24, Y
    8ba6:	99 81       	ldd	r25, Y+1	; 0x01
    8ba8:	aa 81       	ldd	r26, Y+2	; 0x02
    8baa:	bb 81       	ldd	r27, Y+3	; 0x03
    8bac:	00 97       	sbiw	r24, 0x00	; 0
    8bae:	a1 05       	cpc	r26, r1
    8bb0:	b1 05       	cpc	r27, r1
    8bb2:	b1 f0       	breq	.+44     	; 0x8be0 <clmt_clust+0x6c>
    8bb4:	28 17       	cp	r18, r24
    8bb6:	39 07       	cpc	r19, r25
    8bb8:	4a 07       	cpc	r20, r26
    8bba:	5b 07       	cpc	r21, r27
    8bbc:	30 f0       	brcs	.+12     	; 0x8bca <clmt_clust+0x56>
    8bbe:	28 1b       	sub	r18, r24
    8bc0:	39 0b       	sbc	r19, r25
    8bc2:	4a 0b       	sbc	r20, r26
    8bc4:	5b 0b       	sbc	r21, r27
    8bc6:	28 96       	adiw	r28, 0x08	; 8
    8bc8:	ed cf       	rjmp	.-38     	; 0x8ba4 <clmt_clust+0x30>
    8bca:	8c 81       	ldd	r24, Y+4	; 0x04
    8bcc:	9d 81       	ldd	r25, Y+5	; 0x05
    8bce:	ae 81       	ldd	r26, Y+6	; 0x06
    8bd0:	bf 81       	ldd	r27, Y+7	; 0x07
    8bd2:	bc 01       	movw	r22, r24
    8bd4:	cd 01       	movw	r24, r26
    8bd6:	62 0f       	add	r22, r18
    8bd8:	73 1f       	adc	r23, r19
    8bda:	84 1f       	adc	r24, r20
    8bdc:	95 1f       	adc	r25, r21
    8bde:	03 c0       	rjmp	.+6      	; 0x8be6 <clmt_clust+0x72>
    8be0:	60 e0       	ldi	r22, 0x00	; 0
    8be2:	70 e0       	ldi	r23, 0x00	; 0
    8be4:	cb 01       	movw	r24, r22
    8be6:	df 91       	pop	r29
    8be8:	cf 91       	pop	r28
    8bea:	08 95       	ret

00008bec <sum_sfn>:
    8bec:	fc 01       	movw	r30, r24
    8bee:	9c 01       	movw	r18, r24
    8bf0:	25 5f       	subi	r18, 0xF5	; 245
    8bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    8bf4:	80 e0       	ldi	r24, 0x00	; 0
    8bf6:	98 2f       	mov	r25, r24
    8bf8:	90 fb       	bst	r25, 0
    8bfa:	97 95       	ror	r25
    8bfc:	97 f9       	bld	r25, 7
    8bfe:	81 91       	ld	r24, Z+
    8c00:	89 0f       	add	r24, r25
    8c02:	e2 17       	cp	r30, r18
    8c04:	f3 07       	cpc	r31, r19
    8c06:	b9 f7       	brne	.-18     	; 0x8bf6 <sum_sfn+0xa>
    8c08:	08 95       	ret

00008c0a <get_ldnumber>:
    8c0a:	dc 01       	movw	r26, r24
    8c0c:	ed 91       	ld	r30, X+
    8c0e:	fc 91       	ld	r31, X
    8c10:	30 97       	sbiw	r30, 0x00	; 0
    8c12:	c1 f0       	breq	.+48     	; 0x8c44 <get_ldnumber+0x3a>
    8c14:	df 01       	movw	r26, r30
    8c16:	9d 01       	movw	r18, r26
    8c18:	4d 91       	ld	r20, X+
    8c1a:	40 32       	cpi	r20, 0x20	; 32
    8c1c:	80 f0       	brcs	.+32     	; 0x8c3e <get_ldnumber+0x34>
    8c1e:	4a 33       	cpi	r20, 0x3A	; 58
    8c20:	d1 f7       	brne	.-12     	; 0x8c16 <get_ldnumber+0xc>
    8c22:	af 01       	movw	r20, r30
    8c24:	4f 5f       	subi	r20, 0xFF	; 255
    8c26:	5f 4f       	sbci	r21, 0xFF	; 255
    8c28:	24 17       	cp	r18, r20
    8c2a:	35 07       	cpc	r19, r21
    8c2c:	59 f4       	brne	.+22     	; 0x8c44 <get_ldnumber+0x3a>
    8c2e:	40 81       	ld	r20, Z
    8c30:	40 33       	cpi	r20, 0x30	; 48
    8c32:	41 f4       	brne	.+16     	; 0x8c44 <get_ldnumber+0x3a>
    8c34:	2f 5f       	subi	r18, 0xFF	; 255
    8c36:	3f 4f       	sbci	r19, 0xFF	; 255
    8c38:	fc 01       	movw	r30, r24
    8c3a:	31 83       	std	Z+1, r19	; 0x01
    8c3c:	20 83       	st	Z, r18
    8c3e:	80 e0       	ldi	r24, 0x00	; 0
    8c40:	90 e0       	ldi	r25, 0x00	; 0
    8c42:	08 95       	ret
    8c44:	8f ef       	ldi	r24, 0xFF	; 255
    8c46:	9f ef       	ldi	r25, 0xFF	; 255
    8c48:	08 95       	ret

00008c4a <validate>:
    8c4a:	0f 93       	push	r16
    8c4c:	1f 93       	push	r17
    8c4e:	cf 93       	push	r28
    8c50:	df 93       	push	r29
    8c52:	ec 01       	movw	r28, r24
    8c54:	8b 01       	movw	r16, r22
    8c56:	89 2b       	or	r24, r25
    8c58:	31 f4       	brne	.+12     	; 0x8c66 <validate+0x1c>
    8c5a:	f8 01       	movw	r30, r16
    8c5c:	11 82       	std	Z+1, r1	; 0x01
    8c5e:	10 82       	st	Z, r1
    8c60:	89 e0       	ldi	r24, 0x09	; 9
    8c62:	90 e0       	ldi	r25, 0x00	; 0
    8c64:	1a c0       	rjmp	.+52     	; 0x8c9a <validate+0x50>
    8c66:	e8 81       	ld	r30, Y
    8c68:	f9 81       	ldd	r31, Y+1	; 0x01
    8c6a:	30 97       	sbiw	r30, 0x00	; 0
    8c6c:	b1 f3       	breq	.-20     	; 0x8c5a <validate+0x10>
    8c6e:	80 81       	ld	r24, Z
    8c70:	88 23       	and	r24, r24
    8c72:	99 f3       	breq	.-26     	; 0x8c5a <validate+0x10>
    8c74:	25 81       	ldd	r18, Z+5	; 0x05
    8c76:	36 81       	ldd	r19, Z+6	; 0x06
    8c78:	8a 81       	ldd	r24, Y+2	; 0x02
    8c7a:	9b 81       	ldd	r25, Y+3	; 0x03
    8c7c:	28 17       	cp	r18, r24
    8c7e:	39 07       	cpc	r19, r25
    8c80:	61 f7       	brne	.-40     	; 0x8c5a <validate+0x10>
    8c82:	81 81       	ldd	r24, Z+1	; 0x01
    8c84:	0e 94 94 6c 	call	0xd928	; 0xd928 <disk_status>
    8c88:	80 fd       	sbrc	r24, 0
    8c8a:	e7 cf       	rjmp	.-50     	; 0x8c5a <validate+0x10>
    8c8c:	88 81       	ld	r24, Y
    8c8e:	99 81       	ldd	r25, Y+1	; 0x01
    8c90:	f8 01       	movw	r30, r16
    8c92:	91 83       	std	Z+1, r25	; 0x01
    8c94:	80 83       	st	Z, r24
    8c96:	80 e0       	ldi	r24, 0x00	; 0
    8c98:	90 e0       	ldi	r25, 0x00	; 0
    8c9a:	df 91       	pop	r29
    8c9c:	cf 91       	pop	r28
    8c9e:	1f 91       	pop	r17
    8ca0:	0f 91       	pop	r16
    8ca2:	08 95       	ret

00008ca4 <mem_cpy.part.0>:
    8ca4:	fb 01       	movw	r30, r22
    8ca6:	48 0f       	add	r20, r24
    8ca8:	59 1f       	adc	r21, r25
    8caa:	21 91       	ld	r18, Z+
    8cac:	dc 01       	movw	r26, r24
    8cae:	2d 93       	st	X+, r18
    8cb0:	cd 01       	movw	r24, r26
    8cb2:	a4 17       	cp	r26, r20
    8cb4:	b5 07       	cpc	r27, r21
    8cb6:	c9 f7       	brne	.-14     	; 0x8caa <mem_cpy.part.0+0x6>
    8cb8:	08 95       	ret

00008cba <ld_clust.isra.1>:
    8cba:	fb 01       	movw	r30, r22
    8cbc:	42 8d       	ldd	r20, Z+26	; 0x1a
    8cbe:	53 8d       	ldd	r21, Z+27	; 0x1b
    8cc0:	60 e0       	ldi	r22, 0x00	; 0
    8cc2:	70 e0       	ldi	r23, 0x00	; 0
    8cc4:	83 30       	cpi	r24, 0x03	; 3
    8cc6:	59 f4       	brne	.+22     	; 0x8cde <ld_clust.isra.1+0x24>
    8cc8:	84 89       	ldd	r24, Z+20	; 0x14
    8cca:	95 89       	ldd	r25, Z+21	; 0x15
    8ccc:	a0 e0       	ldi	r26, 0x00	; 0
    8cce:	b0 e0       	ldi	r27, 0x00	; 0
    8cd0:	dc 01       	movw	r26, r24
    8cd2:	99 27       	eor	r25, r25
    8cd4:	88 27       	eor	r24, r24
    8cd6:	48 2b       	or	r20, r24
    8cd8:	59 2b       	or	r21, r25
    8cda:	6a 2b       	or	r22, r26
    8cdc:	7b 2b       	or	r23, r27
    8cde:	cb 01       	movw	r24, r22
    8ce0:	ba 01       	movw	r22, r20
    8ce2:	08 95       	ret

00008ce4 <st_clust.isra.2>:
    8ce4:	fb 01       	movw	r30, r22
    8ce6:	22 8f       	std	Z+26, r18	; 0x1a
    8ce8:	33 8f       	std	Z+27, r19	; 0x1b
    8cea:	dc 01       	movw	r26, r24
    8cec:	8c 91       	ld	r24, X
    8cee:	83 30       	cpi	r24, 0x03	; 3
    8cf0:	29 f4       	brne	.+10     	; 0x8cfc <st_clust.isra.2+0x18>
    8cf2:	ca 01       	movw	r24, r20
    8cf4:	aa 27       	eor	r26, r26
    8cf6:	bb 27       	eor	r27, r27
    8cf8:	84 8b       	std	Z+20, r24	; 0x14
    8cfa:	95 8b       	std	Z+21, r25	; 0x15
    8cfc:	08 95       	ret

00008cfe <sync_window.part.3>:
    8cfe:	a0 e0       	ldi	r26, 0x00	; 0
    8d00:	b0 e0       	ldi	r27, 0x00	; 0
    8d02:	e5 e8       	ldi	r30, 0x85	; 133
    8d04:	f6 e4       	ldi	r31, 0x46	; 70
    8d06:	0c 94 c7 e8 	jmp	0x1d18e	; 0x1d18e <__prologue_saves__+0xc>
    8d0a:	ec 01       	movw	r28, r24
    8d0c:	89 a8       	ldd	r8, Y+49	; 0x31
    8d0e:	9a a8       	ldd	r9, Y+50	; 0x32
    8d10:	ab a8       	ldd	r10, Y+51	; 0x33
    8d12:	bc a8       	ldd	r11, Y+52	; 0x34
    8d14:	6c 01       	movw	r12, r24
    8d16:	85 e3       	ldi	r24, 0x35	; 53
    8d18:	c8 0e       	add	r12, r24
    8d1a:	d1 1c       	adc	r13, r1
    8d1c:	01 e0       	ldi	r16, 0x01	; 1
    8d1e:	10 e0       	ldi	r17, 0x00	; 0
    8d20:	a5 01       	movw	r20, r10
    8d22:	94 01       	movw	r18, r8
    8d24:	b6 01       	movw	r22, r12
    8d26:	89 81       	ldd	r24, Y+1	; 0x01
    8d28:	0e 94 b0 6c 	call	0xd960	; 0xd960 <disk_write>
    8d2c:	89 2b       	or	r24, r25
    8d2e:	89 f5       	brne	.+98     	; 0x8d92 <sync_window.part.3+0x94>
    8d30:	1b 82       	std	Y+3, r1	; 0x03
    8d32:	8d a1       	ldd	r24, Y+37	; 0x25
    8d34:	9e a1       	ldd	r25, Y+38	; 0x26
    8d36:	af a1       	ldd	r26, Y+39	; 0x27
    8d38:	b8 a5       	ldd	r27, Y+40	; 0x28
    8d3a:	b5 01       	movw	r22, r10
    8d3c:	a4 01       	movw	r20, r8
    8d3e:	48 1b       	sub	r20, r24
    8d40:	59 0b       	sbc	r21, r25
    8d42:	6a 0b       	sbc	r22, r26
    8d44:	7b 0b       	sbc	r23, r27
    8d46:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8d48:	9e 8d       	ldd	r25, Y+30	; 0x1e
    8d4a:	af 8d       	ldd	r26, Y+31	; 0x1f
    8d4c:	b8 a1       	ldd	r27, Y+32	; 0x20
    8d4e:	48 17       	cp	r20, r24
    8d50:	59 07       	cpc	r21, r25
    8d52:	6a 07       	cpc	r22, r26
    8d54:	7b 07       	cpc	r23, r27
    8d56:	18 f0       	brcs	.+6      	; 0x8d5e <sync_window.part.3+0x60>
    8d58:	80 e0       	ldi	r24, 0x00	; 0
    8d5a:	90 e0       	ldi	r25, 0x00	; 0
    8d5c:	1c c0       	rjmp	.+56     	; 0x8d96 <sync_window.part.3+0x98>
    8d5e:	ea 80       	ldd	r14, Y+2	; 0x02
    8d60:	f1 2c       	mov	r15, r1
    8d62:	82 e0       	ldi	r24, 0x02	; 2
    8d64:	e8 16       	cp	r14, r24
    8d66:	f1 04       	cpc	r15, r1
    8d68:	b8 f3       	brcs	.-18     	; 0x8d58 <sync_window.part.3+0x5a>
    8d6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    8d6c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    8d6e:	af 8d       	ldd	r26, Y+31	; 0x1f
    8d70:	b8 a1       	ldd	r27, Y+32	; 0x20
    8d72:	88 0e       	add	r8, r24
    8d74:	99 1e       	adc	r9, r25
    8d76:	aa 1e       	adc	r10, r26
    8d78:	bb 1e       	adc	r11, r27
    8d7a:	01 e0       	ldi	r16, 0x01	; 1
    8d7c:	10 e0       	ldi	r17, 0x00	; 0
    8d7e:	a5 01       	movw	r20, r10
    8d80:	94 01       	movw	r18, r8
    8d82:	b6 01       	movw	r22, r12
    8d84:	89 81       	ldd	r24, Y+1	; 0x01
    8d86:	0e 94 b0 6c 	call	0xd960	; 0xd960 <disk_write>
    8d8a:	81 e0       	ldi	r24, 0x01	; 1
    8d8c:	e8 1a       	sub	r14, r24
    8d8e:	f1 08       	sbc	r15, r1
    8d90:	e8 cf       	rjmp	.-48     	; 0x8d62 <sync_window.part.3+0x64>
    8d92:	81 e0       	ldi	r24, 0x01	; 1
    8d94:	90 e0       	ldi	r25, 0x00	; 0
    8d96:	cd b7       	in	r28, 0x3d	; 61
    8d98:	de b7       	in	r29, 0x3e	; 62
    8d9a:	ec e0       	ldi	r30, 0x0C	; 12
    8d9c:	0c 94 e3 e8 	jmp	0x1d1c6	; 0x1d1c6 <__epilogue_restores__+0xc>

00008da0 <sync_window>:
    8da0:	fc 01       	movw	r30, r24
    8da2:	23 81       	ldd	r18, Z+3	; 0x03
    8da4:	22 23       	and	r18, r18
    8da6:	11 f0       	breq	.+4      	; 0x8dac <sync_window+0xc>
    8da8:	aa cf       	rjmp	.-172    	; 0x8cfe <sync_window.part.3>
    8daa:	08 95       	ret
    8dac:	80 e0       	ldi	r24, 0x00	; 0
    8dae:	90 e0       	ldi	r25, 0x00	; 0
    8db0:	08 95       	ret

00008db2 <sync_fs>:
    8db2:	ef 92       	push	r14
    8db4:	ff 92       	push	r15
    8db6:	0f 93       	push	r16
    8db8:	1f 93       	push	r17
    8dba:	cf 93       	push	r28
    8dbc:	df 93       	push	r29
    8dbe:	ec 01       	movw	r28, r24
    8dc0:	ef df       	rcall	.-34     	; 0x8da0 <sync_window>
    8dc2:	00 97       	sbiw	r24, 0x00	; 0
    8dc4:	09 f0       	breq	.+2      	; 0x8dc8 <sync_fs+0x16>
    8dc6:	5c c0       	rjmp	.+184    	; 0x8e80 <sync_fs+0xce>
    8dc8:	88 81       	ld	r24, Y
    8dca:	83 30       	cpi	r24, 0x03	; 3
    8dcc:	09 f0       	breq	.+2      	; 0x8dd0 <sync_fs+0x1e>
    8dce:	4b c0       	rjmp	.+150    	; 0x8e66 <sync_fs+0xb4>
    8dd0:	8c 81       	ldd	r24, Y+4	; 0x04
    8dd2:	81 30       	cpi	r24, 0x01	; 1
    8dd4:	09 f0       	breq	.+2      	; 0x8dd8 <sync_fs+0x26>
    8dd6:	47 c0       	rjmp	.+142    	; 0x8e66 <sync_fs+0xb4>
    8dd8:	40 e0       	ldi	r20, 0x00	; 0
    8dda:	52 e0       	ldi	r21, 0x02	; 2
    8ddc:	60 e0       	ldi	r22, 0x00	; 0
    8dde:	70 e0       	ldi	r23, 0x00	; 0
    8de0:	7e 01       	movw	r14, r28
    8de2:	85 e3       	ldi	r24, 0x35	; 53
    8de4:	e8 0e       	add	r14, r24
    8de6:	f1 1c       	adc	r15, r1
    8de8:	c7 01       	movw	r24, r14
    8dea:	93 de       	rcall	.-730    	; 0x8b12 <mem_set>
    8dec:	85 e5       	ldi	r24, 0x55	; 85
    8dee:	fe 01       	movw	r30, r28
    8df0:	ed 5c       	subi	r30, 0xCD	; 205
    8df2:	fd 4f       	sbci	r31, 0xFD	; 253
    8df4:	80 83       	st	Z, r24
    8df6:	8a ea       	ldi	r24, 0xAA	; 170
    8df8:	31 96       	adiw	r30, 0x01	; 1
    8dfa:	80 83       	st	Z, r24
    8dfc:	82 e5       	ldi	r24, 0x52	; 82
    8dfe:	8d ab       	std	Y+53, r24	; 0x35
    8e00:	8e ab       	std	Y+54, r24	; 0x36
    8e02:	81 e6       	ldi	r24, 0x61	; 97
    8e04:	8f ab       	std	Y+55, r24	; 0x37
    8e06:	91 e4       	ldi	r25, 0x41	; 65
    8e08:	98 af       	std	Y+56, r25	; 0x38
    8e0a:	22 e7       	ldi	r18, 0x72	; 114
    8e0c:	7b 97       	sbiw	r30, 0x1b	; 27
    8e0e:	20 83       	st	Z, r18
    8e10:	31 96       	adiw	r30, 0x01	; 1
    8e12:	20 83       	st	Z, r18
    8e14:	31 96       	adiw	r30, 0x01	; 1
    8e16:	90 83       	st	Z, r25
    8e18:	31 96       	adiw	r30, 0x01	; 1
    8e1a:	80 83       	st	Z, r24
    8e1c:	49 89       	ldd	r20, Y+17	; 0x11
    8e1e:	5a 89       	ldd	r21, Y+18	; 0x12
    8e20:	6b 89       	ldd	r22, Y+19	; 0x13
    8e22:	7c 89       	ldd	r23, Y+20	; 0x14
    8e24:	ce 01       	movw	r24, r28
    8e26:	83 5e       	subi	r24, 0xE3	; 227
    8e28:	9d 4f       	sbci	r25, 0xFD	; 253
    8e2a:	6d de       	rcall	.-806    	; 0x8b06 <st_dword>
    8e2c:	4d 85       	ldd	r20, Y+13	; 0x0d
    8e2e:	5e 85       	ldd	r21, Y+14	; 0x0e
    8e30:	6f 85       	ldd	r22, Y+15	; 0x0f
    8e32:	78 89       	ldd	r23, Y+16	; 0x10
    8e34:	ce 01       	movw	r24, r28
    8e36:	8f 5d       	subi	r24, 0xDF	; 223
    8e38:	9d 4f       	sbci	r25, 0xFD	; 253
    8e3a:	65 de       	rcall	.-822    	; 0x8b06 <st_dword>
    8e3c:	89 a1       	ldd	r24, Y+33	; 0x21
    8e3e:	9a a1       	ldd	r25, Y+34	; 0x22
    8e40:	ab a1       	ldd	r26, Y+35	; 0x23
    8e42:	bc a1       	ldd	r27, Y+36	; 0x24
    8e44:	9c 01       	movw	r18, r24
    8e46:	ad 01       	movw	r20, r26
    8e48:	2f 5f       	subi	r18, 0xFF	; 255
    8e4a:	3f 4f       	sbci	r19, 0xFF	; 255
    8e4c:	4f 4f       	sbci	r20, 0xFF	; 255
    8e4e:	5f 4f       	sbci	r21, 0xFF	; 255
    8e50:	29 ab       	std	Y+49, r18	; 0x31
    8e52:	3a ab       	std	Y+50, r19	; 0x32
    8e54:	4b ab       	std	Y+51, r20	; 0x33
    8e56:	5c ab       	std	Y+52, r21	; 0x34
    8e58:	01 e0       	ldi	r16, 0x01	; 1
    8e5a:	10 e0       	ldi	r17, 0x00	; 0
    8e5c:	b7 01       	movw	r22, r14
    8e5e:	89 81       	ldd	r24, Y+1	; 0x01
    8e60:	0e 94 b0 6c 	call	0xd960	; 0xd960 <disk_write>
    8e64:	1c 82       	std	Y+4, r1	; 0x04
    8e66:	40 e0       	ldi	r20, 0x00	; 0
    8e68:	50 e0       	ldi	r21, 0x00	; 0
    8e6a:	60 e0       	ldi	r22, 0x00	; 0
    8e6c:	89 81       	ldd	r24, Y+1	; 0x01
    8e6e:	0e 94 c0 6c 	call	0xd980	; 0xd980 <disk_ioctl>
    8e72:	31 e0       	ldi	r19, 0x01	; 1
    8e74:	20 e0       	ldi	r18, 0x00	; 0
    8e76:	89 2b       	or	r24, r25
    8e78:	09 f4       	brne	.+2      	; 0x8e7c <sync_fs+0xca>
    8e7a:	30 e0       	ldi	r19, 0x00	; 0
    8e7c:	83 2f       	mov	r24, r19
    8e7e:	92 2f       	mov	r25, r18
    8e80:	cd b7       	in	r28, 0x3d	; 61
    8e82:	de b7       	in	r29, 0x3e	; 62
    8e84:	e6 e0       	ldi	r30, 0x06	; 6
    8e86:	0c 94 e9 e8 	jmp	0x1d1d2	; 0x1d1d2 <__epilogue_restores__+0x18>

00008e8a <move_window>:
    8e8a:	8f 92       	push	r8
    8e8c:	9f 92       	push	r9
    8e8e:	af 92       	push	r10
    8e90:	bf 92       	push	r11
    8e92:	ef 92       	push	r14
    8e94:	ff 92       	push	r15
    8e96:	0f 93       	push	r16
    8e98:	1f 93       	push	r17
    8e9a:	cf 93       	push	r28
    8e9c:	df 93       	push	r29
    8e9e:	ec 01       	movw	r28, r24
    8ea0:	4a 01       	movw	r8, r20
    8ea2:	5b 01       	movw	r10, r22
    8ea4:	89 a9       	ldd	r24, Y+49	; 0x31
    8ea6:	9a a9       	ldd	r25, Y+50	; 0x32
    8ea8:	ab a9       	ldd	r26, Y+51	; 0x33
    8eaa:	bc a9       	ldd	r27, Y+52	; 0x34
    8eac:	84 17       	cp	r24, r20
    8eae:	95 07       	cpc	r25, r21
    8eb0:	a6 07       	cpc	r26, r22
    8eb2:	b7 07       	cpc	r27, r23
    8eb4:	e9 f0       	breq	.+58     	; 0x8ef0 <move_window+0x66>
    8eb6:	ce 01       	movw	r24, r28
    8eb8:	73 df       	rcall	.-282    	; 0x8da0 <sync_window>
    8eba:	7c 01       	movw	r14, r24
    8ebc:	89 2b       	or	r24, r25
    8ebe:	d1 f4       	brne	.+52     	; 0x8ef4 <move_window+0x6a>
    8ec0:	01 e0       	ldi	r16, 0x01	; 1
    8ec2:	10 e0       	ldi	r17, 0x00	; 0
    8ec4:	a5 01       	movw	r20, r10
    8ec6:	94 01       	movw	r18, r8
    8ec8:	be 01       	movw	r22, r28
    8eca:	6b 5c       	subi	r22, 0xCB	; 203
    8ecc:	7f 4f       	sbci	r23, 0xFF	; 255
    8ece:	89 81       	ldd	r24, Y+1	; 0x01
    8ed0:	0e 94 a0 6c 	call	0xd940	; 0xd940 <disk_read>
    8ed4:	89 2b       	or	r24, r25
    8ed6:	39 f0       	breq	.+14     	; 0x8ee6 <move_window+0x5c>
    8ed8:	ee 24       	eor	r14, r14
    8eda:	e3 94       	inc	r14
    8edc:	f1 2c       	mov	r15, r1
    8ede:	88 24       	eor	r8, r8
    8ee0:	8a 94       	dec	r8
    8ee2:	98 2c       	mov	r9, r8
    8ee4:	54 01       	movw	r10, r8
    8ee6:	89 aa       	std	Y+49, r8	; 0x31
    8ee8:	9a aa       	std	Y+50, r9	; 0x32
    8eea:	ab aa       	std	Y+51, r10	; 0x33
    8eec:	bc aa       	std	Y+52, r11	; 0x34
    8eee:	02 c0       	rjmp	.+4      	; 0x8ef4 <move_window+0x6a>
    8ef0:	e1 2c       	mov	r14, r1
    8ef2:	f1 2c       	mov	r15, r1
    8ef4:	c7 01       	movw	r24, r14
    8ef6:	df 91       	pop	r29
    8ef8:	cf 91       	pop	r28
    8efa:	1f 91       	pop	r17
    8efc:	0f 91       	pop	r16
    8efe:	ff 90       	pop	r15
    8f00:	ef 90       	pop	r14
    8f02:	bf 90       	pop	r11
    8f04:	af 90       	pop	r10
    8f06:	9f 90       	pop	r9
    8f08:	8f 90       	pop	r8
    8f0a:	08 95       	ret

00008f0c <check_fs>:
    8f0c:	cf 93       	push	r28
    8f0e:	df 93       	push	r29
    8f10:	ec 01       	movw	r28, r24
    8f12:	1b 82       	std	Y+3, r1	; 0x03
    8f14:	8f ef       	ldi	r24, 0xFF	; 255
    8f16:	9f ef       	ldi	r25, 0xFF	; 255
    8f18:	dc 01       	movw	r26, r24
    8f1a:	89 ab       	std	Y+49, r24	; 0x31
    8f1c:	9a ab       	std	Y+50, r25	; 0x32
    8f1e:	ab ab       	std	Y+51, r26	; 0x33
    8f20:	bc ab       	std	Y+52, r27	; 0x34
    8f22:	ce 01       	movw	r24, r28
    8f24:	b2 df       	rcall	.-156    	; 0x8e8a <move_window>
    8f26:	89 2b       	or	r24, r25
    8f28:	31 f5       	brne	.+76     	; 0x8f76 <check_fs+0x6a>
    8f2a:	fe 01       	movw	r30, r28
    8f2c:	ed 5c       	subi	r30, 0xCD	; 205
    8f2e:	fd 4f       	sbci	r31, 0xFD	; 253
    8f30:	80 81       	ld	r24, Z
    8f32:	91 81       	ldd	r25, Z+1	; 0x01
    8f34:	85 35       	cpi	r24, 0x55	; 85
    8f36:	9a 4a       	sbci	r25, 0xAA	; 170
    8f38:	01 f5       	brne	.+64     	; 0x8f7a <check_fs+0x6e>
    8f3a:	8d a9       	ldd	r24, Y+53	; 0x35
    8f3c:	89 3e       	cpi	r24, 0xE9	; 233
    8f3e:	29 f0       	breq	.+10     	; 0x8f4a <check_fs+0x3e>
    8f40:	8b 3e       	cpi	r24, 0xEB	; 235
    8f42:	f9 f4       	brne	.+62     	; 0x8f82 <check_fs+0x76>
    8f44:	8f a9       	ldd	r24, Y+55	; 0x37
    8f46:	80 39       	cpi	r24, 0x90	; 144
    8f48:	e1 f4       	brne	.+56     	; 0x8f82 <check_fs+0x76>
    8f4a:	ce 01       	movw	r24, r28
    8f4c:	85 59       	subi	r24, 0x95	; 149
    8f4e:	9f 4f       	sbci	r25, 0xFF	; 255
    8f50:	c5 dd       	rcall	.-1142   	; 0x8adc <ld_dword>
    8f52:	dc 01       	movw	r26, r24
    8f54:	cb 01       	movw	r24, r22
    8f56:	bb 27       	eor	r27, r27
    8f58:	86 34       	cpi	r24, 0x46	; 70
    8f5a:	91 44       	sbci	r25, 0x41	; 65
    8f5c:	a4 45       	sbci	r26, 0x54	; 84
    8f5e:	b1 05       	cpc	r27, r1
    8f60:	71 f0       	breq	.+28     	; 0x8f7e <check_fs+0x72>
    8f62:	ce 01       	movw	r24, r28
    8f64:	89 57       	subi	r24, 0x79	; 121
    8f66:	9f 4f       	sbci	r25, 0xFF	; 255
    8f68:	b9 dd       	rcall	.-1166   	; 0x8adc <ld_dword>
    8f6a:	66 34       	cpi	r22, 0x46	; 70
    8f6c:	71 44       	sbci	r23, 0x41	; 65
    8f6e:	84 45       	sbci	r24, 0x54	; 84
    8f70:	93 43       	sbci	r25, 0x33	; 51
    8f72:	39 f4       	brne	.+14     	; 0x8f82 <check_fs+0x76>
    8f74:	04 c0       	rjmp	.+8      	; 0x8f7e <check_fs+0x72>
    8f76:	84 e0       	ldi	r24, 0x04	; 4
    8f78:	05 c0       	rjmp	.+10     	; 0x8f84 <check_fs+0x78>
    8f7a:	83 e0       	ldi	r24, 0x03	; 3
    8f7c:	03 c0       	rjmp	.+6      	; 0x8f84 <check_fs+0x78>
    8f7e:	80 e0       	ldi	r24, 0x00	; 0
    8f80:	01 c0       	rjmp	.+2      	; 0x8f84 <check_fs+0x78>
    8f82:	82 e0       	ldi	r24, 0x02	; 2
    8f84:	df 91       	pop	r29
    8f86:	cf 91       	pop	r28
    8f88:	08 95       	ret

00008f8a <find_volume>:
    8f8a:	ad e1       	ldi	r26, 0x1D	; 29
    8f8c:	b0 e0       	ldi	r27, 0x00	; 0
    8f8e:	eb ec       	ldi	r30, 0xCB	; 203
    8f90:	f7 e4       	ldi	r31, 0x47	; 71
    8f92:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__prologue_saves__>
    8f96:	5b 01       	movw	r10, r22
    8f98:	f4 2e       	mov	r15, r20
    8f9a:	db 01       	movw	r26, r22
    8f9c:	1d 92       	st	X+, r1
    8f9e:	1c 92       	st	X, r1
    8fa0:	34 de       	rcall	.-920    	; 0x8c0a <get_ldnumber>
    8fa2:	6c 01       	movw	r12, r24
    8fa4:	97 fd       	sbrc	r25, 7
    8fa6:	1b c2       	rjmp	.+1078   	; 0x93de <find_volume+0x454>
    8fa8:	fc 01       	movw	r30, r24
    8faa:	ee 0f       	add	r30, r30
    8fac:	ff 1f       	adc	r31, r31
    8fae:	e8 52       	subi	r30, 0x28	; 40
    8fb0:	f8 4e       	sbci	r31, 0xE8	; 232
    8fb2:	00 81       	ld	r16, Z
    8fb4:	11 81       	ldd	r17, Z+1	; 0x01
    8fb6:	01 15       	cp	r16, r1
    8fb8:	11 05       	cpc	r17, r1
    8fba:	09 f4       	brne	.+2      	; 0x8fbe <find_volume+0x34>
    8fbc:	13 c2       	rjmp	.+1062   	; 0x93e4 <find_volume+0x45a>
    8fbe:	f5 01       	movw	r30, r10
    8fc0:	11 83       	std	Z+1, r17	; 0x01
    8fc2:	00 83       	st	Z, r16
    8fc4:	ff 2d       	mov	r31, r15
    8fc6:	fe 7f       	andi	r31, 0xFE	; 254
    8fc8:	ff 2e       	mov	r15, r31
    8fca:	d8 01       	movw	r26, r16
    8fcc:	8c 91       	ld	r24, X
    8fce:	88 23       	and	r24, r24
    8fd0:	71 f0       	breq	.+28     	; 0x8fee <find_volume+0x64>
    8fd2:	11 96       	adiw	r26, 0x01	; 1
    8fd4:	8c 91       	ld	r24, X
    8fd6:	0e 94 94 6c 	call	0xd928	; 0xd928 <disk_status>
    8fda:	80 fd       	sbrc	r24, 0
    8fdc:	08 c0       	rjmp	.+16     	; 0x8fee <find_volume+0x64>
    8fde:	ff 20       	and	r15, r15
    8fe0:	09 f4       	brne	.+2      	; 0x8fe4 <find_volume+0x5a>
    8fe2:	03 c2       	rjmp	.+1030   	; 0x93ea <find_volume+0x460>
    8fe4:	82 ff       	sbrs	r24, 2
    8fe6:	01 c2       	rjmp	.+1026   	; 0x93ea <find_volume+0x460>
    8fe8:	8a e0       	ldi	r24, 0x0A	; 10
    8fea:	90 e0       	ldi	r25, 0x00	; 0
    8fec:	73 c2       	rjmp	.+1254   	; 0x94d4 <find_volume+0x54a>
    8fee:	f8 01       	movw	r30, r16
    8ff0:	10 82       	st	Z, r1
    8ff2:	c1 82       	std	Z+1, r12	; 0x01
    8ff4:	8c 2d       	mov	r24, r12
    8ff6:	0e 94 9a 6c 	call	0xd934	; 0xd934 <disk_initialize>
    8ffa:	80 fd       	sbrc	r24, 0
    8ffc:	f9 c1       	rjmp	.+1010   	; 0x93f0 <find_volume+0x466>
    8ffe:	ff 20       	and	r15, r15
    9000:	11 f0       	breq	.+4      	; 0x9006 <find_volume+0x7c>
    9002:	82 fd       	sbrc	r24, 2
    9004:	f1 cf       	rjmp	.-30     	; 0x8fe8 <find_volume+0x5e>
    9006:	40 e0       	ldi	r20, 0x00	; 0
    9008:	50 e0       	ldi	r21, 0x00	; 0
    900a:	ba 01       	movw	r22, r20
    900c:	c8 01       	movw	r24, r16
    900e:	7e df       	rcall	.-260    	; 0x8f0c <check_fs>
    9010:	82 30       	cpi	r24, 0x02	; 2
    9012:	09 f0       	breq	.+2      	; 0x9016 <find_volume+0x8c>
    9014:	41 c0       	rjmp	.+130    	; 0x9098 <find_volume+0x10e>
    9016:	9e 01       	movw	r18, r28
    9018:	2f 5f       	subi	r18, 0xFF	; 255
    901a:	3f 4f       	sbci	r19, 0xFF	; 255
    901c:	79 01       	movw	r14, r18
    901e:	68 01       	movw	r12, r16
    9020:	35 e0       	ldi	r19, 0x05	; 5
    9022:	c3 1a       	sub	r12, r19
    9024:	3e ef       	ldi	r19, 0xFE	; 254
    9026:	d3 0a       	sbc	r13, r19
    9028:	48 01       	movw	r8, r16
    902a:	45 ec       	ldi	r20, 0xC5	; 197
    902c:	84 1a       	sub	r8, r20
    902e:	4d ef       	ldi	r20, 0xFD	; 253
    9030:	94 0a       	sbc	r9, r20
    9032:	57 01       	movw	r10, r14
    9034:	f6 01       	movw	r30, r12
    9036:	34 97       	sbiw	r30, 0x04	; 4
    9038:	80 81       	ld	r24, Z
    903a:	88 23       	and	r24, r24
    903c:	19 f0       	breq	.+6      	; 0x9044 <find_volume+0xba>
    903e:	c6 01       	movw	r24, r12
    9040:	4d dd       	rcall	.-1382   	; 0x8adc <ld_dword>
    9042:	03 c0       	rjmp	.+6      	; 0x904a <find_volume+0xc0>
    9044:	60 e0       	ldi	r22, 0x00	; 0
    9046:	70 e0       	ldi	r23, 0x00	; 0
    9048:	cb 01       	movw	r24, r22
    904a:	d5 01       	movw	r26, r10
    904c:	6d 93       	st	X+, r22
    904e:	7d 93       	st	X+, r23
    9050:	8d 93       	st	X+, r24
    9052:	9d 93       	st	X+, r25
    9054:	5d 01       	movw	r10, r26
    9056:	b0 e1       	ldi	r27, 0x10	; 16
    9058:	cb 0e       	add	r12, r27
    905a:	d1 1c       	adc	r13, r1
    905c:	c8 14       	cp	r12, r8
    905e:	d9 04       	cpc	r13, r9
    9060:	49 f7       	brne	.-46     	; 0x9034 <find_volume+0xaa>
    9062:	6e 01       	movw	r12, r28
    9064:	e1 e1       	ldi	r30, 0x11	; 17
    9066:	ce 0e       	add	r12, r30
    9068:	d1 1c       	adc	r13, r1
    906a:	d7 01       	movw	r26, r14
    906c:	8d 90       	ld	r8, X+
    906e:	9d 90       	ld	r9, X+
    9070:	ad 90       	ld	r10, X+
    9072:	bd 90       	ld	r11, X+
    9074:	7d 01       	movw	r14, r26
    9076:	81 14       	cp	r8, r1
    9078:	91 04       	cpc	r9, r1
    907a:	a1 04       	cpc	r10, r1
    907c:	b1 04       	cpc	r11, r1
    907e:	39 f0       	breq	.+14     	; 0x908e <find_volume+0x104>
    9080:	b5 01       	movw	r22, r10
    9082:	a4 01       	movw	r20, r8
    9084:	c8 01       	movw	r24, r16
    9086:	42 df       	rcall	.-380    	; 0x8f0c <check_fs>
    9088:	82 30       	cpi	r24, 0x02	; 2
    908a:	10 f4       	brcc	.+4      	; 0x9090 <find_volume+0x106>
    908c:	10 c0       	rjmp	.+32     	; 0x90ae <find_volume+0x124>
    908e:	83 e0       	ldi	r24, 0x03	; 3
    9090:	ce 14       	cp	r12, r14
    9092:	df 04       	cpc	r13, r15
    9094:	51 f7       	brne	.-44     	; 0x906a <find_volume+0xe0>
    9096:	af c1       	rjmp	.+862    	; 0x93f6 <find_volume+0x46c>
    9098:	84 30       	cpi	r24, 0x04	; 4
    909a:	09 f4       	brne	.+2      	; 0x909e <find_volume+0x114>
    909c:	af c1       	rjmp	.+862    	; 0x93fc <find_volume+0x472>
    909e:	82 30       	cpi	r24, 0x02	; 2
    90a0:	18 f0       	brcs	.+6      	; 0x90a8 <find_volume+0x11e>
    90a2:	8d e0       	ldi	r24, 0x0D	; 13
    90a4:	90 e0       	ldi	r25, 0x00	; 0
    90a6:	16 c2       	rjmp	.+1068   	; 0x94d4 <find_volume+0x54a>
    90a8:	81 2c       	mov	r8, r1
    90aa:	91 2c       	mov	r9, r1
    90ac:	54 01       	movw	r10, r8
    90ae:	f8 01       	movw	r30, r16
    90b0:	e0 5c       	subi	r30, 0xC0	; 192
    90b2:	ff 4f       	sbci	r31, 0xFF	; 255
    90b4:	80 81       	ld	r24, Z
    90b6:	91 81       	ldd	r25, Z+1	; 0x01
    90b8:	81 15       	cp	r24, r1
    90ba:	92 40       	sbci	r25, 0x02	; 2
    90bc:	91 f7       	brne	.-28     	; 0x90a2 <find_volume+0x118>
    90be:	3b 96       	adiw	r30, 0x0b	; 11
    90c0:	80 81       	ld	r24, Z
    90c2:	91 81       	ldd	r25, Z+1	; 0x01
    90c4:	00 97       	sbiw	r24, 0x00	; 0
    90c6:	41 f0       	breq	.+16     	; 0x90d8 <find_volume+0x14e>
    90c8:	9c 01       	movw	r18, r24
    90ca:	40 e0       	ldi	r20, 0x00	; 0
    90cc:	50 e0       	ldi	r21, 0x00	; 0
    90ce:	2d 8b       	std	Y+21, r18	; 0x15
    90d0:	3e 8b       	std	Y+22, r19	; 0x16
    90d2:	4f 8b       	std	Y+23, r20	; 0x17
    90d4:	58 8f       	std	Y+24, r21	; 0x18
    90d6:	08 c0       	rjmp	.+16     	; 0x90e8 <find_volume+0x15e>
    90d8:	c8 01       	movw	r24, r16
    90da:	87 5a       	subi	r24, 0xA7	; 167
    90dc:	9f 4f       	sbci	r25, 0xFF	; 255
    90de:	fe dc       	rcall	.-1540   	; 0x8adc <ld_dword>
    90e0:	6d 8b       	std	Y+21, r22	; 0x15
    90e2:	7e 8b       	std	Y+22, r23	; 0x16
    90e4:	8f 8b       	std	Y+23, r24	; 0x17
    90e6:	98 8f       	std	Y+24, r25	; 0x18
    90e8:	8d 89       	ldd	r24, Y+21	; 0x15
    90ea:	9e 89       	ldd	r25, Y+22	; 0x16
    90ec:	af 89       	ldd	r26, Y+23	; 0x17
    90ee:	b8 8d       	ldd	r27, Y+24	; 0x18
    90f0:	f8 01       	movw	r30, r16
    90f2:	85 8f       	std	Z+29, r24	; 0x1d
    90f4:	96 8f       	std	Z+30, r25	; 0x1e
    90f6:	a7 8f       	std	Z+31, r26	; 0x1f
    90f8:	b0 a3       	std	Z+32, r27	; 0x20
    90fa:	eb 5b       	subi	r30, 0xBB	; 187
    90fc:	ff 4f       	sbci	r31, 0xFF	; 255
    90fe:	70 80       	ld	r7, Z
    9100:	d8 01       	movw	r26, r16
    9102:	12 96       	adiw	r26, 0x02	; 2
    9104:	7c 92       	st	X, r7
    9106:	8f ef       	ldi	r24, 0xFF	; 255
    9108:	87 0d       	add	r24, r7
    910a:	82 30       	cpi	r24, 0x02	; 2
    910c:	50 f6       	brcc	.-108    	; 0x90a2 <find_volume+0x118>
    910e:	33 97       	sbiw	r30, 0x03	; 3
    9110:	b0 81       	ld	r27, Z
    9112:	b9 8f       	std	Y+25, r27	; 0x19
    9114:	8b 2f       	mov	r24, r27
    9116:	90 e0       	ldi	r25, 0x00	; 0
    9118:	f8 01       	movw	r30, r16
    911a:	92 87       	std	Z+10, r25	; 0x0a
    911c:	81 87       	std	Z+9, r24	; 0x09
    911e:	00 97       	sbiw	r24, 0x00	; 0
    9120:	09 f4       	brne	.+2      	; 0x9124 <find_volume+0x19a>
    9122:	bf cf       	rjmp	.-130    	; 0x90a2 <find_volume+0x118>
    9124:	9c 01       	movw	r18, r24
    9126:	21 50       	subi	r18, 0x01	; 1
    9128:	31 09       	sbc	r19, r1
    912a:	82 23       	and	r24, r18
    912c:	93 23       	and	r25, r19
    912e:	89 2b       	or	r24, r25
    9130:	09 f0       	breq	.+2      	; 0x9134 <find_volume+0x1aa>
    9132:	b7 cf       	rjmp	.-146    	; 0x90a2 <find_volume+0x118>
    9134:	ea 5b       	subi	r30, 0xBA	; 186
    9136:	ff 4f       	sbci	r31, 0xFF	; 255
    9138:	20 80       	ld	r2, Z
    913a:	31 80       	ldd	r3, Z+1	; 0x01
    913c:	d8 01       	movw	r26, r16
    913e:	18 96       	adiw	r26, 0x08	; 8
    9140:	3c 92       	st	X, r3
    9142:	2e 92       	st	-X, r2
    9144:	17 97       	sbiw	r26, 0x07	; 7
    9146:	c1 01       	movw	r24, r2
    9148:	8f 70       	andi	r24, 0x0F	; 15
    914a:	99 27       	eor	r25, r25
    914c:	89 2b       	or	r24, r25
    914e:	09 f0       	breq	.+2      	; 0x9152 <find_volume+0x1c8>
    9150:	a8 cf       	rjmp	.-176    	; 0x90a2 <find_volume+0x118>
    9152:	32 96       	adiw	r30, 0x02	; 2
    9154:	80 81       	ld	r24, Z
    9156:	91 81       	ldd	r25, Z+1	; 0x01
    9158:	6c 01       	movw	r12, r24
    915a:	e1 2c       	mov	r14, r1
    915c:	f1 2c       	mov	r15, r1
    915e:	89 2b       	or	r24, r25
    9160:	31 f4       	brne	.+12     	; 0x916e <find_volume+0x1e4>
    9162:	c8 01       	movw	r24, r16
    9164:	8b 5a       	subi	r24, 0xAB	; 171
    9166:	9f 4f       	sbci	r25, 0xFF	; 255
    9168:	b9 dc       	rcall	.-1678   	; 0x8adc <ld_dword>
    916a:	6b 01       	movw	r12, r22
    916c:	7c 01       	movw	r14, r24
    916e:	f8 01       	movw	r30, r16
    9170:	ed 5b       	subi	r30, 0xBD	; 189
    9172:	ff 4f       	sbci	r31, 0xFF	; 255
    9174:	01 90       	ld	r0, Z+
    9176:	f0 81       	ld	r31, Z
    9178:	e0 2d       	mov	r30, r0
    917a:	30 97       	sbiw	r30, 0x00	; 0
    917c:	09 f4       	brne	.+2      	; 0x9180 <find_volume+0x1f6>
    917e:	91 cf       	rjmp	.-222    	; 0x90a2 <find_volume+0x118>
    9180:	a7 2d       	mov	r26, r7
    9182:	b0 e0       	ldi	r27, 0x00	; 0
    9184:	2d 89       	ldd	r18, Y+21	; 0x15
    9186:	3e 89       	ldd	r19, Y+22	; 0x16
    9188:	4f 89       	ldd	r20, Y+23	; 0x17
    918a:	58 8d       	ldd	r21, Y+24	; 0x18
    918c:	0e 94 a1 e8 	call	0x1d142	; 0x1d142 <__muluhisi3>
    9190:	2b 01       	movw	r4, r22
    9192:	3c 01       	movw	r6, r24
    9194:	9f 01       	movw	r18, r30
    9196:	40 e0       	ldi	r20, 0x00	; 0
    9198:	50 e0       	ldi	r21, 0x00	; 0
    919a:	2a 8f       	std	Y+26, r18	; 0x1a
    919c:	3b 8f       	std	Y+27, r19	; 0x1b
    919e:	4c 8f       	std	Y+28, r20	; 0x1c
    91a0:	5d 8f       	std	Y+29, r21	; 0x1d
    91a2:	c1 01       	movw	r24, r2
    91a4:	e4 e0       	ldi	r30, 0x04	; 4
    91a6:	96 95       	lsr	r25
    91a8:	87 95       	ror	r24
    91aa:	ea 95       	dec	r30
    91ac:	e1 f7       	brne	.-8      	; 0x91a6 <find_volume+0x21c>
    91ae:	ba 01       	movw	r22, r20
    91b0:	a9 01       	movw	r20, r18
    91b2:	48 0f       	add	r20, r24
    91b4:	59 1f       	adc	r21, r25
    91b6:	61 1d       	adc	r22, r1
    91b8:	71 1d       	adc	r23, r1
    91ba:	db 01       	movw	r26, r22
    91bc:	ca 01       	movw	r24, r20
    91be:	84 0d       	add	r24, r4
    91c0:	95 1d       	adc	r25, r5
    91c2:	a6 1d       	adc	r26, r6
    91c4:	b7 1d       	adc	r27, r7
    91c6:	89 8b       	std	Y+17, r24	; 0x11
    91c8:	9a 8b       	std	Y+18, r25	; 0x12
    91ca:	ab 8b       	std	Y+19, r26	; 0x13
    91cc:	bc 8b       	std	Y+20, r27	; 0x14
    91ce:	c8 16       	cp	r12, r24
    91d0:	d9 06       	cpc	r13, r25
    91d2:	ea 06       	cpc	r14, r26
    91d4:	fb 06       	cpc	r15, r27
    91d6:	08 f4       	brcc	.+2      	; 0x91da <find_volume+0x250>
    91d8:	64 cf       	rjmp	.-312    	; 0x90a2 <find_volume+0x118>
    91da:	c7 01       	movw	r24, r14
    91dc:	b6 01       	movw	r22, r12
    91de:	29 89       	ldd	r18, Y+17	; 0x11
    91e0:	3a 89       	ldd	r19, Y+18	; 0x12
    91e2:	4b 89       	ldd	r20, Y+19	; 0x13
    91e4:	5c 89       	ldd	r21, Y+20	; 0x14
    91e6:	62 1b       	sub	r22, r18
    91e8:	73 0b       	sbc	r23, r19
    91ea:	84 0b       	sbc	r24, r20
    91ec:	95 0b       	sbc	r25, r21
    91ee:	a9 8d       	ldd	r26, Y+25	; 0x19
    91f0:	2a 2f       	mov	r18, r26
    91f2:	30 e0       	ldi	r19, 0x00	; 0
    91f4:	40 e0       	ldi	r20, 0x00	; 0
    91f6:	50 e0       	ldi	r21, 0x00	; 0
    91f8:	0e 94 54 e8 	call	0x1d0a8	; 0x1d0a8 <__udivmodsi4>
    91fc:	21 15       	cp	r18, r1
    91fe:	31 05       	cpc	r19, r1
    9200:	41 05       	cpc	r20, r1
    9202:	51 05       	cpc	r21, r1
    9204:	09 f4       	brne	.+2      	; 0x9208 <find_volume+0x27e>
    9206:	4d cf       	rjmp	.-358    	; 0x90a2 <find_volume+0x118>
    9208:	69 01       	movw	r12, r18
    920a:	7a 01       	movw	r14, r20
    920c:	b2 e0       	ldi	r27, 0x02	; 2
    920e:	cb 0e       	add	r12, r27
    9210:	d1 1c       	adc	r13, r1
    9212:	e1 1c       	adc	r14, r1
    9214:	f1 1c       	adc	r15, r1
    9216:	8a 8d       	ldd	r24, Y+26	; 0x1a
    9218:	9b 8d       	ldd	r25, Y+27	; 0x1b
    921a:	ac 8d       	ldd	r26, Y+28	; 0x1c
    921c:	bd 8d       	ldd	r27, Y+29	; 0x1d
    921e:	88 0d       	add	r24, r8
    9220:	99 1d       	adc	r25, r9
    9222:	aa 1d       	adc	r26, r10
    9224:	bb 1d       	adc	r27, r11
    9226:	8a 8f       	std	Y+26, r24	; 0x1a
    9228:	9b 8f       	std	Y+27, r25	; 0x1b
    922a:	ac 8f       	std	Y+28, r26	; 0x1c
    922c:	bd 8f       	std	Y+29, r27	; 0x1d
    922e:	89 89       	ldd	r24, Y+17	; 0x11
    9230:	9a 89       	ldd	r25, Y+18	; 0x12
    9232:	ab 89       	ldd	r26, Y+19	; 0x13
    9234:	bc 89       	ldd	r27, Y+20	; 0x14
    9236:	88 0d       	add	r24, r8
    9238:	99 1d       	adc	r25, r9
    923a:	aa 1d       	adc	r26, r10
    923c:	bb 1d       	adc	r27, r11
    923e:	89 8b       	std	Y+17, r24	; 0x11
    9240:	9a 8b       	std	Y+18, r25	; 0x12
    9242:	ab 8b       	std	Y+19, r26	; 0x13
    9244:	bc 8b       	std	Y+20, r27	; 0x14
    9246:	26 3f       	cpi	r18, 0xF6	; 246
    9248:	9f ef       	ldi	r25, 0xFF	; 255
    924a:	39 07       	cpc	r19, r25
    924c:	41 05       	cpc	r20, r1
    924e:	51 05       	cpc	r21, r1
    9250:	08 f0       	brcs	.+2      	; 0x9254 <find_volume+0x2ca>
    9252:	d7 c0       	rjmp	.+430    	; 0x9402 <find_volume+0x478>
    9254:	f8 01       	movw	r30, r16
    9256:	c1 8e       	std	Z+25, r12	; 0x19
    9258:	d2 8e       	std	Z+26, r13	; 0x1a
    925a:	e3 8e       	std	Z+27, r14	; 0x1b
    925c:	f4 8e       	std	Z+28, r15	; 0x1c
    925e:	26 3f       	cpi	r18, 0xF6	; 246
    9260:	3f 40       	sbci	r19, 0x0F	; 15
    9262:	41 05       	cpc	r20, r1
    9264:	51 05       	cpc	r21, r1
    9266:	08 f0       	brcs	.+2      	; 0x926a <find_volume+0x2e0>
    9268:	0a c1       	rjmp	.+532    	; 0x947e <find_volume+0x4f4>
    926a:	81 a2       	std	Z+33, r8	; 0x21
    926c:	92 a2       	std	Z+34, r9	; 0x22
    926e:	a3 a2       	std	Z+35, r10	; 0x23
    9270:	b4 a2       	std	Z+36, r11	; 0x24
    9272:	2a 8d       	ldd	r18, Y+26	; 0x1a
    9274:	3b 8d       	ldd	r19, Y+27	; 0x1b
    9276:	4c 8d       	ldd	r20, Y+28	; 0x1c
    9278:	5d 8d       	ldd	r21, Y+29	; 0x1d
    927a:	25 a3       	std	Z+37, r18	; 0x25
    927c:	36 a3       	std	Z+38, r19	; 0x26
    927e:	47 a3       	std	Z+39, r20	; 0x27
    9280:	50 a7       	std	Z+40, r21	; 0x28
    9282:	29 89       	ldd	r18, Y+17	; 0x11
    9284:	3a 89       	ldd	r19, Y+18	; 0x12
    9286:	4b 89       	ldd	r20, Y+19	; 0x13
    9288:	5c 89       	ldd	r21, Y+20	; 0x14
    928a:	25 a7       	std	Z+45, r18	; 0x2d
    928c:	36 a7       	std	Z+46, r19	; 0x2e
    928e:	47 a7       	std	Z+47, r20	; 0x2f
    9290:	50 ab       	std	Z+48, r21	; 0x30
    9292:	21 14       	cp	r2, r1
    9294:	31 04       	cpc	r3, r1
    9296:	09 f4       	brne	.+2      	; 0x929a <find_volume+0x310>
    9298:	04 cf       	rjmp	.-504    	; 0x90a2 <find_volume+0x118>
    929a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    929c:	3b 8d       	ldd	r19, Y+27	; 0x1b
    929e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    92a0:	5d 8d       	ldd	r21, Y+29	; 0x1d
    92a2:	42 0e       	add	r4, r18
    92a4:	53 1e       	adc	r5, r19
    92a6:	64 1e       	adc	r6, r20
    92a8:	75 1e       	adc	r7, r21
    92aa:	41 a6       	std	Z+41, r4	; 0x29
    92ac:	52 a6       	std	Z+42, r5	; 0x2a
    92ae:	63 a6       	std	Z+43, r6	; 0x2b
    92b0:	74 a6       	std	Z+44, r7	; 0x2c
    92b2:	a3 e0       	ldi	r26, 0x03	; 3
    92b4:	b0 e0       	ldi	r27, 0x00	; 0
    92b6:	a7 01       	movw	r20, r14
    92b8:	96 01       	movw	r18, r12
    92ba:	0e 94 a1 e8 	call	0x1d142	; 0x1d142 <__muluhisi3>
    92be:	dc 01       	movw	r26, r24
    92c0:	cb 01       	movw	r24, r22
    92c2:	b6 95       	lsr	r27
    92c4:	a7 95       	ror	r26
    92c6:	97 95       	ror	r25
    92c8:	87 95       	ror	r24
    92ca:	e1 e0       	ldi	r30, 0x01	; 1
    92cc:	ce 22       	and	r12, r30
    92ce:	dd 24       	eor	r13, r13
    92d0:	ee 24       	eor	r14, r14
    92d2:	ff 24       	eor	r15, r15
    92d4:	c8 0e       	add	r12, r24
    92d6:	d9 1e       	adc	r13, r25
    92d8:	ea 1e       	adc	r14, r26
    92da:	fb 1e       	adc	r15, r27
    92dc:	77 24       	eor	r7, r7
    92de:	73 94       	inc	r7
    92e0:	ff ef       	ldi	r31, 0xFF	; 255
    92e2:	cf 0e       	add	r12, r31
    92e4:	f1 e0       	ldi	r31, 0x01	; 1
    92e6:	df 1e       	adc	r13, r31
    92e8:	e1 1c       	adc	r14, r1
    92ea:	f1 1c       	adc	r15, r1
    92ec:	59 e0       	ldi	r21, 0x09	; 9
    92ee:	f6 94       	lsr	r15
    92f0:	e7 94       	ror	r14
    92f2:	d7 94       	ror	r13
    92f4:	c7 94       	ror	r12
    92f6:	5a 95       	dec	r21
    92f8:	d1 f7       	brne	.-12     	; 0x92ee <find_volume+0x364>
    92fa:	2d 89       	ldd	r18, Y+21	; 0x15
    92fc:	3e 89       	ldd	r19, Y+22	; 0x16
    92fe:	4f 89       	ldd	r20, Y+23	; 0x17
    9300:	58 8d       	ldd	r21, Y+24	; 0x18
    9302:	2c 15       	cp	r18, r12
    9304:	3d 05       	cpc	r19, r13
    9306:	4e 05       	cpc	r20, r14
    9308:	5f 05       	cpc	r21, r15
    930a:	08 f4       	brcc	.+2      	; 0x930e <find_volume+0x384>
    930c:	ca ce       	rjmp	.-620    	; 0x90a2 <find_volume+0x118>
    930e:	8f ef       	ldi	r24, 0xFF	; 255
    9310:	9f ef       	ldi	r25, 0xFF	; 255
    9312:	dc 01       	movw	r26, r24
    9314:	f8 01       	movw	r30, r16
    9316:	81 8b       	std	Z+17, r24	; 0x11
    9318:	92 8b       	std	Z+18, r25	; 0x12
    931a:	a3 8b       	std	Z+19, r26	; 0x13
    931c:	b4 8b       	std	Z+20, r27	; 0x14
    931e:	85 87       	std	Z+13, r24	; 0x0d
    9320:	96 87       	std	Z+14, r25	; 0x0e
    9322:	a7 87       	std	Z+15, r26	; 0x0f
    9324:	b0 8b       	std	Z+16, r27	; 0x10
    9326:	80 e8       	ldi	r24, 0x80	; 128
    9328:	84 83       	std	Z+4, r24	; 0x04
    932a:	f3 e0       	ldi	r31, 0x03	; 3
    932c:	7f 12       	cpse	r7, r31
    932e:	42 c0       	rjmp	.+132    	; 0x93b4 <find_volume+0x42a>
    9330:	f8 01       	movw	r30, r16
    9332:	eb 59       	subi	r30, 0x9B	; 155
    9334:	ff 4f       	sbci	r31, 0xFF	; 255
    9336:	80 81       	ld	r24, Z
    9338:	91 81       	ldd	r25, Z+1	; 0x01
    933a:	01 97       	sbiw	r24, 0x01	; 1
    933c:	09 f0       	breq	.+2      	; 0x9340 <find_volume+0x3b6>
    933e:	3a c0       	rjmp	.+116    	; 0x93b4 <find_volume+0x42a>
    9340:	b5 01       	movw	r22, r10
    9342:	a4 01       	movw	r20, r8
    9344:	4f 5f       	subi	r20, 0xFF	; 255
    9346:	5f 4f       	sbci	r21, 0xFF	; 255
    9348:	6f 4f       	sbci	r22, 0xFF	; 255
    934a:	7f 4f       	sbci	r23, 0xFF	; 255
    934c:	c8 01       	movw	r24, r16
    934e:	9d dd       	rcall	.-1222   	; 0x8e8a <move_window>
    9350:	89 2b       	or	r24, r25
    9352:	81 f5       	brne	.+96     	; 0x93b4 <find_volume+0x42a>
    9354:	d8 01       	movw	r26, r16
    9356:	14 96       	adiw	r26, 0x04	; 4
    9358:	1c 92       	st	X, r1
    935a:	f8 01       	movw	r30, r16
    935c:	ed 5c       	subi	r30, 0xCD	; 205
    935e:	fd 4f       	sbci	r31, 0xFD	; 253
    9360:	80 81       	ld	r24, Z
    9362:	91 81       	ldd	r25, Z+1	; 0x01
    9364:	85 35       	cpi	r24, 0x55	; 85
    9366:	9a 4a       	sbci	r25, 0xAA	; 170
    9368:	29 f5       	brne	.+74     	; 0x93b4 <find_volume+0x42a>
    936a:	c8 01       	movw	r24, r16
    936c:	c5 96       	adiw	r24, 0x35	; 53
    936e:	b6 db       	rcall	.-2196   	; 0x8adc <ld_dword>
    9370:	62 35       	cpi	r22, 0x52	; 82
    9372:	72 45       	sbci	r23, 0x52	; 82
    9374:	81 46       	sbci	r24, 0x61	; 97
    9376:	91 44       	sbci	r25, 0x41	; 65
    9378:	e9 f4       	brne	.+58     	; 0x93b4 <find_volume+0x42a>
    937a:	c8 01       	movw	r24, r16
    937c:	87 5e       	subi	r24, 0xE7	; 231
    937e:	9d 4f       	sbci	r25, 0xFD	; 253
    9380:	ad db       	rcall	.-2214   	; 0x8adc <ld_dword>
    9382:	62 37       	cpi	r22, 0x72	; 114
    9384:	72 47       	sbci	r23, 0x72	; 114
    9386:	81 44       	sbci	r24, 0x41	; 65
    9388:	91 46       	sbci	r25, 0x61	; 97
    938a:	a1 f4       	brne	.+40     	; 0x93b4 <find_volume+0x42a>
    938c:	c8 01       	movw	r24, r16
    938e:	83 5e       	subi	r24, 0xE3	; 227
    9390:	9d 4f       	sbci	r25, 0xFD	; 253
    9392:	a4 db       	rcall	.-2232   	; 0x8adc <ld_dword>
    9394:	d8 01       	movw	r26, r16
    9396:	51 96       	adiw	r26, 0x11	; 17
    9398:	6d 93       	st	X+, r22
    939a:	7d 93       	st	X+, r23
    939c:	8d 93       	st	X+, r24
    939e:	9c 93       	st	X, r25
    93a0:	54 97       	sbiw	r26, 0x14	; 20
    93a2:	c8 01       	movw	r24, r16
    93a4:	8f 5d       	subi	r24, 0xDF	; 223
    93a6:	9d 4f       	sbci	r25, 0xFD	; 253
    93a8:	99 db       	rcall	.-2254   	; 0x8adc <ld_dword>
    93aa:	f8 01       	movw	r30, r16
    93ac:	65 87       	std	Z+13, r22	; 0x0d
    93ae:	76 87       	std	Z+14, r23	; 0x0e
    93b0:	87 87       	std	Z+15, r24	; 0x0f
    93b2:	90 8b       	std	Z+16, r25	; 0x10
    93b4:	d8 01       	movw	r26, r16
    93b6:	7c 92       	st	X, r7
    93b8:	80 91 d6 17 	lds	r24, 0x17D6	; 0x8017d6 <Fsid>
    93bc:	90 91 d7 17 	lds	r25, 0x17D7	; 0x8017d7 <Fsid+0x1>
    93c0:	01 96       	adiw	r24, 0x01	; 1
    93c2:	90 93 d7 17 	sts	0x17D7, r25	; 0x8017d7 <Fsid+0x1>
    93c6:	80 93 d6 17 	sts	0x17D6, r24	; 0x8017d6 <Fsid>
    93ca:	16 96       	adiw	r26, 0x06	; 6
    93cc:	9c 93       	st	X, r25
    93ce:	8e 93       	st	-X, r24
    93d0:	15 97       	sbiw	r26, 0x05	; 5
    93d2:	f8 01       	movw	r30, r16
    93d4:	15 8a       	std	Z+21, r1	; 0x15
    93d6:	16 8a       	std	Z+22, r1	; 0x16
    93d8:	17 8a       	std	Z+23, r1	; 0x17
    93da:	10 8e       	std	Z+24, r1	; 0x18
    93dc:	06 c0       	rjmp	.+12     	; 0x93ea <find_volume+0x460>
    93de:	8b e0       	ldi	r24, 0x0B	; 11
    93e0:	90 e0       	ldi	r25, 0x00	; 0
    93e2:	78 c0       	rjmp	.+240    	; 0x94d4 <find_volume+0x54a>
    93e4:	8c e0       	ldi	r24, 0x0C	; 12
    93e6:	90 e0       	ldi	r25, 0x00	; 0
    93e8:	75 c0       	rjmp	.+234    	; 0x94d4 <find_volume+0x54a>
    93ea:	80 e0       	ldi	r24, 0x00	; 0
    93ec:	90 e0       	ldi	r25, 0x00	; 0
    93ee:	72 c0       	rjmp	.+228    	; 0x94d4 <find_volume+0x54a>
    93f0:	83 e0       	ldi	r24, 0x03	; 3
    93f2:	90 e0       	ldi	r25, 0x00	; 0
    93f4:	6f c0       	rjmp	.+222    	; 0x94d4 <find_volume+0x54a>
    93f6:	84 30       	cpi	r24, 0x04	; 4
    93f8:	09 f0       	breq	.+2      	; 0x93fc <find_volume+0x472>
    93fa:	53 ce       	rjmp	.-858    	; 0x90a2 <find_volume+0x118>
    93fc:	81 e0       	ldi	r24, 0x01	; 1
    93fe:	90 e0       	ldi	r25, 0x00	; 0
    9400:	69 c0       	rjmp	.+210    	; 0x94d4 <find_volume+0x54a>
    9402:	d8 01       	movw	r26, r16
    9404:	59 96       	adiw	r26, 0x19	; 25
    9406:	cd 92       	st	X+, r12
    9408:	dd 92       	st	X+, r13
    940a:	ed 92       	st	X+, r14
    940c:	fc 92       	st	X, r15
    940e:	5c 97       	sbiw	r26, 0x1c	; 28
    9410:	f8 01       	movw	r30, r16
    9412:	81 a2       	std	Z+33, r8	; 0x21
    9414:	92 a2       	std	Z+34, r9	; 0x22
    9416:	a3 a2       	std	Z+35, r10	; 0x23
    9418:	b4 a2       	std	Z+36, r11	; 0x24
    941a:	2a 8d       	ldd	r18, Y+26	; 0x1a
    941c:	3b 8d       	ldd	r19, Y+27	; 0x1b
    941e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    9420:	5d 8d       	ldd	r21, Y+29	; 0x1d
    9422:	95 96       	adiw	r26, 0x25	; 37
    9424:	2d 93       	st	X+, r18
    9426:	3d 93       	st	X+, r19
    9428:	4d 93       	st	X+, r20
    942a:	5c 93       	st	X, r21
    942c:	98 97       	sbiw	r26, 0x28	; 40
    942e:	29 89       	ldd	r18, Y+17	; 0x11
    9430:	3a 89       	ldd	r19, Y+18	; 0x12
    9432:	4b 89       	ldd	r20, Y+19	; 0x13
    9434:	5c 89       	ldd	r21, Y+20	; 0x14
    9436:	9d 96       	adiw	r26, 0x2d	; 45
    9438:	2d 93       	st	X+, r18
    943a:	3d 93       	st	X+, r19
    943c:	4d 93       	st	X+, r20
    943e:	5c 93       	st	X, r21
    9440:	d0 97       	sbiw	r26, 0x30	; 48
    9442:	e1 5a       	subi	r30, 0xA1	; 161
    9444:	ff 4f       	sbci	r31, 0xFF	; 255
    9446:	80 81       	ld	r24, Z
    9448:	91 81       	ldd	r25, Z+1	; 0x01
    944a:	89 2b       	or	r24, r25
    944c:	09 f0       	breq	.+2      	; 0x9450 <find_volume+0x4c6>
    944e:	29 ce       	rjmp	.-942    	; 0x90a2 <find_volume+0x118>
    9450:	21 14       	cp	r2, r1
    9452:	31 04       	cpc	r3, r1
    9454:	09 f0       	breq	.+2      	; 0x9458 <find_volume+0x4ce>
    9456:	25 ce       	rjmp	.-950    	; 0x90a2 <find_volume+0x118>
    9458:	c8 01       	movw	r24, r16
    945a:	8f 59       	subi	r24, 0x9F	; 159
    945c:	9f 4f       	sbci	r25, 0xFF	; 255
    945e:	3e db       	rcall	.-2436   	; 0x8adc <ld_dword>
    9460:	f8 01       	movw	r30, r16
    9462:	61 a7       	std	Z+41, r22	; 0x29
    9464:	72 a7       	std	Z+42, r23	; 0x2a
    9466:	83 a7       	std	Z+43, r24	; 0x2b
    9468:	94 a7       	std	Z+44, r25	; 0x2c
    946a:	62 e0       	ldi	r22, 0x02	; 2
    946c:	cc 0c       	add	r12, r12
    946e:	dd 1c       	adc	r13, r13
    9470:	ee 1c       	adc	r14, r14
    9472:	ff 1c       	adc	r15, r15
    9474:	6a 95       	dec	r22
    9476:	d1 f7       	brne	.-12     	; 0x946c <find_volume+0x4e2>
    9478:	73 e0       	ldi	r23, 0x03	; 3
    947a:	77 2e       	mov	r7, r23
    947c:	31 cf       	rjmp	.-414    	; 0x92e0 <find_volume+0x356>
    947e:	81 a2       	std	Z+33, r8	; 0x21
    9480:	92 a2       	std	Z+34, r9	; 0x22
    9482:	a3 a2       	std	Z+35, r10	; 0x23
    9484:	b4 a2       	std	Z+36, r11	; 0x24
    9486:	2a 8d       	ldd	r18, Y+26	; 0x1a
    9488:	3b 8d       	ldd	r19, Y+27	; 0x1b
    948a:	4c 8d       	ldd	r20, Y+28	; 0x1c
    948c:	5d 8d       	ldd	r21, Y+29	; 0x1d
    948e:	25 a3       	std	Z+37, r18	; 0x25
    9490:	36 a3       	std	Z+38, r19	; 0x26
    9492:	47 a3       	std	Z+39, r20	; 0x27
    9494:	50 a7       	std	Z+40, r21	; 0x28
    9496:	29 89       	ldd	r18, Y+17	; 0x11
    9498:	3a 89       	ldd	r19, Y+18	; 0x12
    949a:	4b 89       	ldd	r20, Y+19	; 0x13
    949c:	5c 89       	ldd	r21, Y+20	; 0x14
    949e:	25 a7       	std	Z+45, r18	; 0x2d
    94a0:	36 a7       	std	Z+46, r19	; 0x2e
    94a2:	47 a7       	std	Z+47, r20	; 0x2f
    94a4:	50 ab       	std	Z+48, r21	; 0x30
    94a6:	21 14       	cp	r2, r1
    94a8:	31 04       	cpc	r3, r1
    94aa:	09 f4       	brne	.+2      	; 0x94ae <find_volume+0x524>
    94ac:	fa cd       	rjmp	.-1036   	; 0x90a2 <find_volume+0x118>
    94ae:	2a 8d       	ldd	r18, Y+26	; 0x1a
    94b0:	3b 8d       	ldd	r19, Y+27	; 0x1b
    94b2:	4c 8d       	ldd	r20, Y+28	; 0x1c
    94b4:	5d 8d       	ldd	r21, Y+29	; 0x1d
    94b6:	42 0e       	add	r4, r18
    94b8:	53 1e       	adc	r5, r19
    94ba:	64 1e       	adc	r6, r20
    94bc:	75 1e       	adc	r7, r21
    94be:	41 a6       	std	Z+41, r4	; 0x29
    94c0:	52 a6       	std	Z+42, r5	; 0x2a
    94c2:	63 a6       	std	Z+43, r6	; 0x2b
    94c4:	74 a6       	std	Z+44, r7	; 0x2c
    94c6:	cc 0c       	add	r12, r12
    94c8:	dd 1c       	adc	r13, r13
    94ca:	ee 1c       	adc	r14, r14
    94cc:	ff 1c       	adc	r15, r15
    94ce:	42 e0       	ldi	r20, 0x02	; 2
    94d0:	74 2e       	mov	r7, r20
    94d2:	06 cf       	rjmp	.-500    	; 0x92e0 <find_volume+0x356>
    94d4:	6d 96       	adiw	r28, 0x1d	; 29
    94d6:	e2 e1       	ldi	r30, 0x12	; 18
    94d8:	0c 94 dd e8 	jmp	0x1d1ba	; 0x1d1ba <__epilogue_restores__>

000094dc <put_fat>:
    94dc:	a6 e0       	ldi	r26, 0x06	; 6
    94de:	b0 e0       	ldi	r27, 0x00	; 0
    94e0:	e4 e7       	ldi	r30, 0x74	; 116
    94e2:	fa e4       	ldi	r31, 0x4A	; 74
    94e4:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__prologue_saves__>
    94e8:	42 30       	cpi	r20, 0x02	; 2
    94ea:	51 05       	cpc	r21, r1
    94ec:	61 05       	cpc	r22, r1
    94ee:	71 05       	cpc	r23, r1
    94f0:	08 f4       	brcc	.+2      	; 0x94f4 <put_fat+0x18>
    94f2:	e9 c0       	rjmp	.+466    	; 0x96c6 <put_fat+0x1ea>
    94f4:	dc 01       	movw	r26, r24
    94f6:	59 96       	adiw	r26, 0x19	; 25
    94f8:	cd 90       	ld	r12, X+
    94fa:	dd 90       	ld	r13, X+
    94fc:	ed 90       	ld	r14, X+
    94fe:	fc 90       	ld	r15, X
    9500:	5c 97       	sbiw	r26, 0x1c	; 28
    9502:	4c 15       	cp	r20, r12
    9504:	5d 05       	cpc	r21, r13
    9506:	6e 05       	cpc	r22, r14
    9508:	7f 05       	cpc	r23, r15
    950a:	08 f0       	brcs	.+2      	; 0x950e <put_fat+0x32>
    950c:	dc c0       	rjmp	.+440    	; 0x96c6 <put_fat+0x1ea>
    950e:	28 01       	movw	r4, r16
    9510:	39 01       	movw	r6, r18
    9512:	6a 01       	movw	r12, r20
    9514:	7b 01       	movw	r14, r22
    9516:	9e 83       	std	Y+6, r25	; 0x06
    9518:	8d 83       	std	Y+5, r24	; 0x05
    951a:	fc 01       	movw	r30, r24
    951c:	80 81       	ld	r24, Z
    951e:	82 30       	cpi	r24, 0x02	; 2
    9520:	09 f4       	brne	.+2      	; 0x9524 <put_fat+0x48>
    9522:	73 c0       	rjmp	.+230    	; 0x960a <put_fat+0x12e>
    9524:	83 30       	cpi	r24, 0x03	; 3
    9526:	09 f4       	brne	.+2      	; 0x952a <put_fat+0x4e>
    9528:	92 c0       	rjmp	.+292    	; 0x964e <put_fat+0x172>
    952a:	81 30       	cpi	r24, 0x01	; 1
    952c:	09 f0       	breq	.+2      	; 0x9530 <put_fat+0x54>
    952e:	cb c0       	rjmp	.+406    	; 0x96c6 <put_fat+0x1ea>
    9530:	4a 01       	movw	r8, r20
    9532:	96 94       	lsr	r9
    9534:	87 94       	ror	r8
    9536:	84 0e       	add	r8, r20
    9538:	95 1e       	adc	r9, r21
    953a:	c4 01       	movw	r24, r8
    953c:	89 2f       	mov	r24, r25
    953e:	99 27       	eor	r25, r25
    9540:	86 95       	lsr	r24
    9542:	45 a1       	ldd	r20, Z+37	; 0x25
    9544:	56 a1       	ldd	r21, Z+38	; 0x26
    9546:	67 a1       	ldd	r22, Z+39	; 0x27
    9548:	70 a5       	ldd	r23, Z+40	; 0x28
    954a:	48 0f       	add	r20, r24
    954c:	59 1f       	adc	r21, r25
    954e:	61 1d       	adc	r22, r1
    9550:	71 1d       	adc	r23, r1
    9552:	cf 01       	movw	r24, r30
    9554:	9a dc       	rcall	.-1740   	; 0x8e8a <move_window>
    9556:	5c 01       	movw	r10, r24
    9558:	89 2b       	or	r24, r25
    955a:	09 f0       	breq	.+2      	; 0x955e <put_fat+0x82>
    955c:	b7 c0       	rjmp	.+366    	; 0x96cc <put_fat+0x1f0>
    955e:	2d 80       	ldd	r2, Y+5	; 0x05
    9560:	3e 80       	ldd	r3, Y+6	; 0x06
    9562:	f5 e3       	ldi	r31, 0x35	; 53
    9564:	2f 0e       	add	r2, r31
    9566:	31 1c       	adc	r3, r1
    9568:	84 01       	movw	r16, r8
    956a:	0f 5f       	subi	r16, 0xFF	; 255
    956c:	1f 4f       	sbci	r17, 0xFF	; 255
    956e:	21 e0       	ldi	r18, 0x01	; 1
    9570:	92 22       	and	r9, r18
    9572:	f1 01       	movw	r30, r2
    9574:	e8 0d       	add	r30, r8
    9576:	f9 1d       	adc	r31, r9
    9578:	d7 01       	movw	r26, r14
    957a:	c6 01       	movw	r24, r12
    957c:	81 70       	andi	r24, 0x01	; 1
    957e:	99 27       	eor	r25, r25
    9580:	aa 27       	eor	r26, r26
    9582:	bb 27       	eor	r27, r27
    9584:	89 83       	std	Y+1, r24	; 0x01
    9586:	9a 83       	std	Y+2, r25	; 0x02
    9588:	ab 83       	std	Y+3, r26	; 0x03
    958a:	bc 83       	std	Y+4, r27	; 0x04
    958c:	c0 fe       	sbrs	r12, 0
    958e:	09 c0       	rjmp	.+18     	; 0x95a2 <put_fat+0xc6>
    9590:	80 81       	ld	r24, Z
    9592:	28 2f       	mov	r18, r24
    9594:	2f 70       	andi	r18, 0x0F	; 15
    9596:	a0 e1       	ldi	r26, 0x10	; 16
    9598:	4a 9e       	mul	r4, r26
    959a:	c0 01       	movw	r24, r0
    959c:	11 24       	eor	r1, r1
    959e:	82 2b       	or	r24, r18
    95a0:	01 c0       	rjmp	.+2      	; 0x95a4 <put_fat+0xc8>
    95a2:	84 2d       	mov	r24, r4
    95a4:	80 83       	st	Z, r24
    95a6:	81 e0       	ldi	r24, 0x01	; 1
    95a8:	ed 81       	ldd	r30, Y+5	; 0x05
    95aa:	fe 81       	ldd	r31, Y+6	; 0x06
    95ac:	83 83       	std	Z+3, r24	; 0x03
    95ae:	45 a1       	ldd	r20, Z+37	; 0x25
    95b0:	56 a1       	ldd	r21, Z+38	; 0x26
    95b2:	67 a1       	ldd	r22, Z+39	; 0x27
    95b4:	70 a5       	ldd	r23, Z+40	; 0x28
    95b6:	c8 01       	movw	r24, r16
    95b8:	89 2f       	mov	r24, r25
    95ba:	99 27       	eor	r25, r25
    95bc:	86 95       	lsr	r24
    95be:	48 0f       	add	r20, r24
    95c0:	59 1f       	adc	r21, r25
    95c2:	61 1d       	adc	r22, r1
    95c4:	71 1d       	adc	r23, r1
    95c6:	cf 01       	movw	r24, r30
    95c8:	60 dc       	rcall	.-1856   	; 0x8e8a <move_window>
    95ca:	5c 01       	movw	r10, r24
    95cc:	89 2b       	or	r24, r25
    95ce:	09 f0       	breq	.+2      	; 0x95d2 <put_fat+0xf6>
    95d0:	7d c0       	rjmp	.+250    	; 0x96cc <put_fat+0x1f0>
    95d2:	11 70       	andi	r17, 0x01	; 1
    95d4:	f1 01       	movw	r30, r2
    95d6:	e0 0f       	add	r30, r16
    95d8:	f1 1f       	adc	r31, r17
    95da:	89 81       	ldd	r24, Y+1	; 0x01
    95dc:	9a 81       	ldd	r25, Y+2	; 0x02
    95de:	ab 81       	ldd	r26, Y+3	; 0x03
    95e0:	bc 81       	ldd	r27, Y+4	; 0x04
    95e2:	89 2b       	or	r24, r25
    95e4:	8a 2b       	or	r24, r26
    95e6:	8b 2b       	or	r24, r27
    95e8:	41 f0       	breq	.+16     	; 0x95fa <put_fat+0x11e>
    95ea:	54 e0       	ldi	r21, 0x04	; 4
    95ec:	76 94       	lsr	r7
    95ee:	67 94       	ror	r6
    95f0:	57 94       	ror	r5
    95f2:	47 94       	ror	r4
    95f4:	5a 95       	dec	r21
    95f6:	d1 f7       	brne	.-12     	; 0x95ec <put_fat+0x110>
    95f8:	06 c0       	rjmp	.+12     	; 0x9606 <put_fat+0x12a>
    95fa:	00 81       	ld	r16, Z
    95fc:	00 7f       	andi	r16, 0xF0	; 240
    95fe:	85 2d       	mov	r24, r5
    9600:	8f 70       	andi	r24, 0x0F	; 15
    9602:	40 2e       	mov	r4, r16
    9604:	48 2a       	or	r4, r24
    9606:	40 82       	st	Z, r4
    9608:	58 c0       	rjmp	.+176    	; 0x96ba <put_fat+0x1de>
    960a:	77 27       	eor	r23, r23
    960c:	6f 2d       	mov	r22, r15
    960e:	5e 2d       	mov	r21, r14
    9610:	4d 2d       	mov	r20, r13
    9612:	ed 81       	ldd	r30, Y+5	; 0x05
    9614:	fe 81       	ldd	r31, Y+6	; 0x06
    9616:	85 a1       	ldd	r24, Z+37	; 0x25
    9618:	96 a1       	ldd	r25, Z+38	; 0x26
    961a:	a7 a1       	ldd	r26, Z+39	; 0x27
    961c:	b0 a5       	ldd	r27, Z+40	; 0x28
    961e:	48 0f       	add	r20, r24
    9620:	59 1f       	adc	r21, r25
    9622:	6a 1f       	adc	r22, r26
    9624:	7b 1f       	adc	r23, r27
    9626:	cf 01       	movw	r24, r30
    9628:	30 dc       	rcall	.-1952   	; 0x8e8a <move_window>
    962a:	5c 01       	movw	r10, r24
    962c:	89 2b       	or	r24, r25
    962e:	09 f0       	breq	.+2      	; 0x9632 <put_fat+0x156>
    9630:	4d c0       	rjmp	.+154    	; 0x96cc <put_fat+0x1f0>
    9632:	ed 81       	ldd	r30, Y+5	; 0x05
    9634:	fe 81       	ldd	r31, Y+6	; 0x06
    9636:	f5 96       	adiw	r30, 0x35	; 53
    9638:	cc 0c       	add	r12, r12
    963a:	dd 1c       	adc	r13, r13
    963c:	e8 94       	clt
    963e:	c0 f8       	bld	r12, 0
    9640:	21 e0       	ldi	r18, 0x01	; 1
    9642:	d2 22       	and	r13, r18
    9644:	ec 0d       	add	r30, r12
    9646:	fd 1d       	adc	r31, r13
    9648:	40 82       	st	Z, r4
    964a:	51 82       	std	Z+1, r5	; 0x01
    964c:	36 c0       	rjmp	.+108    	; 0x96ba <put_fat+0x1de>
    964e:	ed 81       	ldd	r30, Y+5	; 0x05
    9650:	fe 81       	ldd	r31, Y+6	; 0x06
    9652:	85 a1       	ldd	r24, Z+37	; 0x25
    9654:	96 a1       	ldd	r25, Z+38	; 0x26
    9656:	a7 a1       	ldd	r26, Z+39	; 0x27
    9658:	b0 a5       	ldd	r27, Z+40	; 0x28
    965a:	27 e0       	ldi	r18, 0x07	; 7
    965c:	76 95       	lsr	r23
    965e:	67 95       	ror	r22
    9660:	57 95       	ror	r21
    9662:	47 95       	ror	r20
    9664:	2a 95       	dec	r18
    9666:	d1 f7       	brne	.-12     	; 0x965c <put_fat+0x180>
    9668:	48 0f       	add	r20, r24
    966a:	59 1f       	adc	r21, r25
    966c:	6a 1f       	adc	r22, r26
    966e:	7b 1f       	adc	r23, r27
    9670:	cf 01       	movw	r24, r30
    9672:	0b dc       	rcall	.-2026   	; 0x8e8a <move_window>
    9674:	5c 01       	movw	r10, r24
    9676:	89 2b       	or	r24, r25
    9678:	49 f5       	brne	.+82     	; 0x96cc <put_fat+0x1f0>
    967a:	4d 81       	ldd	r20, Y+5	; 0x05
    967c:	5e 81       	ldd	r21, Y+6	; 0x06
    967e:	4b 5c       	subi	r20, 0xCB	; 203
    9680:	5f 4f       	sbci	r21, 0xFF	; 255
    9682:	cc 0c       	add	r12, r12
    9684:	dd 1c       	adc	r13, r13
    9686:	cc 0c       	add	r12, r12
    9688:	dd 1c       	adc	r13, r13
    968a:	fc ef       	ldi	r31, 0xFC	; 252
    968c:	cf 22       	and	r12, r31
    968e:	f1 e0       	ldi	r31, 0x01	; 1
    9690:	df 22       	and	r13, r31
    9692:	c4 0e       	add	r12, r20
    9694:	d5 1e       	adc	r13, r21
    9696:	c6 01       	movw	r24, r12
    9698:	21 da       	rcall	.-3006   	; 0x8adc <ld_dword>
    969a:	2f e0       	ldi	r18, 0x0F	; 15
    969c:	72 22       	and	r7, r18
    969e:	dc 01       	movw	r26, r24
    96a0:	cb 01       	movw	r24, r22
    96a2:	88 27       	eor	r24, r24
    96a4:	99 27       	eor	r25, r25
    96a6:	aa 27       	eor	r26, r26
    96a8:	b0 7f       	andi	r27, 0xF0	; 240
    96aa:	b3 01       	movw	r22, r6
    96ac:	a2 01       	movw	r20, r4
    96ae:	48 2b       	or	r20, r24
    96b0:	59 2b       	or	r21, r25
    96b2:	6a 2b       	or	r22, r26
    96b4:	7b 2b       	or	r23, r27
    96b6:	c6 01       	movw	r24, r12
    96b8:	26 da       	rcall	.-2996   	; 0x8b06 <st_dword>
    96ba:	81 e0       	ldi	r24, 0x01	; 1
    96bc:	ad 81       	ldd	r26, Y+5	; 0x05
    96be:	be 81       	ldd	r27, Y+6	; 0x06
    96c0:	13 96       	adiw	r26, 0x03	; 3
    96c2:	8c 93       	st	X, r24
    96c4:	03 c0       	rjmp	.+6      	; 0x96cc <put_fat+0x1f0>
    96c6:	82 e0       	ldi	r24, 0x02	; 2
    96c8:	a8 2e       	mov	r10, r24
    96ca:	b1 2c       	mov	r11, r1
    96cc:	c5 01       	movw	r24, r10
    96ce:	26 96       	adiw	r28, 0x06	; 6
    96d0:	e2 e1       	ldi	r30, 0x12	; 18
    96d2:	0c 94 dd e8 	jmp	0x1d1ba	; 0x1d1ba <__epilogue_restores__>

000096d6 <get_fat.isra.7>:
    96d6:	a0 e0       	ldi	r26, 0x00	; 0
    96d8:	b0 e0       	ldi	r27, 0x00	; 0
    96da:	e1 e7       	ldi	r30, 0x71	; 113
    96dc:	fb e4       	ldi	r31, 0x4B	; 75
    96de:	0c 94 c9 e8 	jmp	0x1d192	; 0x1d192 <__prologue_saves__+0x10>
    96e2:	42 30       	cpi	r20, 0x02	; 2
    96e4:	51 05       	cpc	r21, r1
    96e6:	61 05       	cpc	r22, r1
    96e8:	71 05       	cpc	r23, r1
    96ea:	08 f4       	brcc	.+2      	; 0x96ee <get_fat.isra.7+0x18>
    96ec:	9e c0       	rjmp	.+316    	; 0x982a <get_fat.isra.7+0x154>
    96ee:	fc 01       	movw	r30, r24
    96f0:	01 8d       	ldd	r16, Z+25	; 0x19
    96f2:	12 8d       	ldd	r17, Z+26	; 0x1a
    96f4:	23 8d       	ldd	r18, Z+27	; 0x1b
    96f6:	34 8d       	ldd	r19, Z+28	; 0x1c
    96f8:	40 17       	cp	r20, r16
    96fa:	51 07       	cpc	r21, r17
    96fc:	62 07       	cpc	r22, r18
    96fe:	73 07       	cpc	r23, r19
    9700:	08 f0       	brcs	.+2      	; 0x9704 <get_fat.isra.7+0x2e>
    9702:	93 c0       	rjmp	.+294    	; 0x982a <get_fat.isra.7+0x154>
    9704:	6a 01       	movw	r12, r20
    9706:	7b 01       	movw	r14, r22
    9708:	8c 01       	movw	r16, r24
    970a:	80 81       	ld	r24, Z
    970c:	82 30       	cpi	r24, 0x02	; 2
    970e:	09 f4       	brne	.+2      	; 0x9712 <get_fat.isra.7+0x3c>
    9710:	4b c0       	rjmp	.+150    	; 0x97a8 <get_fat.isra.7+0xd2>
    9712:	83 30       	cpi	r24, 0x03	; 3
    9714:	09 f4       	brne	.+2      	; 0x9718 <get_fat.isra.7+0x42>
    9716:	67 c0       	rjmp	.+206    	; 0x97e6 <get_fat.isra.7+0x110>
    9718:	81 30       	cpi	r24, 0x01	; 1
    971a:	09 f0       	breq	.+2      	; 0x971e <get_fat.isra.7+0x48>
    971c:	86 c0       	rjmp	.+268    	; 0x982a <get_fat.isra.7+0x154>
    971e:	ea 01       	movw	r28, r20
    9720:	d6 95       	lsr	r29
    9722:	c7 95       	ror	r28
    9724:	cc 0d       	add	r28, r12
    9726:	dd 1d       	adc	r29, r13
    9728:	ce 01       	movw	r24, r28
    972a:	89 2f       	mov	r24, r25
    972c:	99 27       	eor	r25, r25
    972e:	86 95       	lsr	r24
    9730:	45 a1       	ldd	r20, Z+37	; 0x25
    9732:	56 a1       	ldd	r21, Z+38	; 0x26
    9734:	67 a1       	ldd	r22, Z+39	; 0x27
    9736:	70 a5       	ldd	r23, Z+40	; 0x28
    9738:	48 0f       	add	r20, r24
    973a:	59 1f       	adc	r21, r25
    973c:	61 1d       	adc	r22, r1
    973e:	71 1d       	adc	r23, r1
    9740:	cf 01       	movw	r24, r30
    9742:	a3 db       	rcall	.-2234   	; 0x8e8a <move_window>
    9744:	89 2b       	or	r24, r25
    9746:	21 f0       	breq	.+8      	; 0x9750 <get_fat.isra.7+0x7a>
    9748:	6f ef       	ldi	r22, 0xFF	; 255
    974a:	7f ef       	ldi	r23, 0xFF	; 255
    974c:	cb 01       	movw	r24, r22
    974e:	71 c0       	rjmp	.+226    	; 0x9832 <get_fat.isra.7+0x15c>
    9750:	5e 01       	movw	r10, r28
    9752:	ff ef       	ldi	r31, 0xFF	; 255
    9754:	af 1a       	sub	r10, r31
    9756:	bf 0a       	sbc	r11, r31
    9758:	d1 70       	andi	r29, 0x01	; 1
    975a:	c0 0f       	add	r28, r16
    975c:	d1 1f       	adc	r29, r17
    975e:	cd a9       	ldd	r28, Y+53	; 0x35
    9760:	c5 01       	movw	r24, r10
    9762:	89 2f       	mov	r24, r25
    9764:	99 27       	eor	r25, r25
    9766:	86 95       	lsr	r24
    9768:	f8 01       	movw	r30, r16
    976a:	45 a1       	ldd	r20, Z+37	; 0x25
    976c:	56 a1       	ldd	r21, Z+38	; 0x26
    976e:	67 a1       	ldd	r22, Z+39	; 0x27
    9770:	70 a5       	ldd	r23, Z+40	; 0x28
    9772:	48 0f       	add	r20, r24
    9774:	59 1f       	adc	r21, r25
    9776:	61 1d       	adc	r22, r1
    9778:	71 1d       	adc	r23, r1
    977a:	c8 01       	movw	r24, r16
    977c:	86 db       	rcall	.-2292   	; 0x8e8a <move_window>
    977e:	89 2b       	or	r24, r25
    9780:	19 f7       	brne	.-58     	; 0x9748 <get_fat.isra.7+0x72>
    9782:	f1 e0       	ldi	r31, 0x01	; 1
    9784:	bf 22       	and	r11, r31
    9786:	f8 01       	movw	r30, r16
    9788:	ea 0d       	add	r30, r10
    978a:	fb 1d       	adc	r31, r11
    978c:	85 a9       	ldd	r24, Z+53	; 0x35
    978e:	6c 2f       	mov	r22, r28
    9790:	70 e0       	ldi	r23, 0x00	; 0
    9792:	78 2b       	or	r23, r24
    9794:	c0 fe       	sbrs	r12, 0
    9796:	06 c0       	rjmp	.+12     	; 0x97a4 <get_fat.isra.7+0xce>
    9798:	54 e0       	ldi	r21, 0x04	; 4
    979a:	76 95       	lsr	r23
    979c:	67 95       	ror	r22
    979e:	5a 95       	dec	r21
    97a0:	e1 f7       	brne	.-8      	; 0x979a <get_fat.isra.7+0xc4>
    97a2:	1e c0       	rjmp	.+60     	; 0x97e0 <get_fat.isra.7+0x10a>
    97a4:	7f 70       	andi	r23, 0x0F	; 15
    97a6:	1c c0       	rjmp	.+56     	; 0x97e0 <get_fat.isra.7+0x10a>
    97a8:	77 27       	eor	r23, r23
    97aa:	6f 2d       	mov	r22, r15
    97ac:	5e 2d       	mov	r21, r14
    97ae:	4d 2d       	mov	r20, r13
    97b0:	85 a1       	ldd	r24, Z+37	; 0x25
    97b2:	96 a1       	ldd	r25, Z+38	; 0x26
    97b4:	a7 a1       	ldd	r26, Z+39	; 0x27
    97b6:	b0 a5       	ldd	r27, Z+40	; 0x28
    97b8:	48 0f       	add	r20, r24
    97ba:	59 1f       	adc	r21, r25
    97bc:	6a 1f       	adc	r22, r26
    97be:	7b 1f       	adc	r23, r27
    97c0:	cf 01       	movw	r24, r30
    97c2:	63 db       	rcall	.-2362   	; 0x8e8a <move_window>
    97c4:	89 2b       	or	r24, r25
    97c6:	09 f0       	breq	.+2      	; 0x97ca <get_fat.isra.7+0xf4>
    97c8:	bf cf       	rjmp	.-130    	; 0x9748 <get_fat.isra.7+0x72>
    97ca:	cc 0c       	add	r12, r12
    97cc:	dd 1c       	adc	r13, r13
    97ce:	e8 94       	clt
    97d0:	c0 f8       	bld	r12, 0
    97d2:	f1 e0       	ldi	r31, 0x01	; 1
    97d4:	df 22       	and	r13, r31
    97d6:	f8 01       	movw	r30, r16
    97d8:	ec 0d       	add	r30, r12
    97da:	fd 1d       	adc	r31, r13
    97dc:	65 a9       	ldd	r22, Z+53	; 0x35
    97de:	76 a9       	ldd	r23, Z+54	; 0x36
    97e0:	80 e0       	ldi	r24, 0x00	; 0
    97e2:	90 e0       	ldi	r25, 0x00	; 0
    97e4:	26 c0       	rjmp	.+76     	; 0x9832 <get_fat.isra.7+0x15c>
    97e6:	85 a1       	ldd	r24, Z+37	; 0x25
    97e8:	96 a1       	ldd	r25, Z+38	; 0x26
    97ea:	a7 a1       	ldd	r26, Z+39	; 0x27
    97ec:	b0 a5       	ldd	r27, Z+40	; 0x28
    97ee:	27 e0       	ldi	r18, 0x07	; 7
    97f0:	76 95       	lsr	r23
    97f2:	67 95       	ror	r22
    97f4:	57 95       	ror	r21
    97f6:	47 95       	ror	r20
    97f8:	2a 95       	dec	r18
    97fa:	d1 f7       	brne	.-12     	; 0x97f0 <get_fat.isra.7+0x11a>
    97fc:	48 0f       	add	r20, r24
    97fe:	59 1f       	adc	r21, r25
    9800:	6a 1f       	adc	r22, r26
    9802:	7b 1f       	adc	r23, r27
    9804:	cf 01       	movw	r24, r30
    9806:	41 db       	rcall	.-2430   	; 0x8e8a <move_window>
    9808:	89 2b       	or	r24, r25
    980a:	09 f0       	breq	.+2      	; 0x980e <get_fat.isra.7+0x138>
    980c:	9d cf       	rjmp	.-198    	; 0x9748 <get_fat.isra.7+0x72>
    980e:	0b 5c       	subi	r16, 0xCB	; 203
    9810:	1f 4f       	sbci	r17, 0xFF	; 255
    9812:	cc 0c       	add	r12, r12
    9814:	dd 1c       	adc	r13, r13
    9816:	cc 0c       	add	r12, r12
    9818:	dd 1c       	adc	r13, r13
    981a:	c6 01       	movw	r24, r12
    981c:	8c 7f       	andi	r24, 0xFC	; 252
    981e:	91 70       	andi	r25, 0x01	; 1
    9820:	80 0f       	add	r24, r16
    9822:	91 1f       	adc	r25, r17
    9824:	5b d9       	rcall	.-3402   	; 0x8adc <ld_dword>
    9826:	9f 70       	andi	r25, 0x0F	; 15
    9828:	04 c0       	rjmp	.+8      	; 0x9832 <get_fat.isra.7+0x15c>
    982a:	61 e0       	ldi	r22, 0x01	; 1
    982c:	70 e0       	ldi	r23, 0x00	; 0
    982e:	80 e0       	ldi	r24, 0x00	; 0
    9830:	90 e0       	ldi	r25, 0x00	; 0
    9832:	cd b7       	in	r28, 0x3d	; 61
    9834:	de b7       	in	r29, 0x3e	; 62
    9836:	ea e0       	ldi	r30, 0x0A	; 10
    9838:	0c 94 e5 e8 	jmp	0x1d1ca	; 0x1d1ca <__epilogue_restores__+0x10>

0000983c <dir_sdi>:
    983c:	a0 e0       	ldi	r26, 0x00	; 0
    983e:	b0 e0       	ldi	r27, 0x00	; 0
    9840:	e4 e2       	ldi	r30, 0x24	; 36
    9842:	fc e4       	ldi	r31, 0x4C	; 76
    9844:	0c 94 c3 e8 	jmp	0x1d186	; 0x1d186 <__prologue_saves__+0x4>
    9848:	ec 01       	movw	r28, r24
    984a:	6a 01       	movw	r12, r20
    984c:	7b 01       	movw	r14, r22
    984e:	41 15       	cp	r20, r1
    9850:	51 05       	cpc	r21, r1
    9852:	80 e2       	ldi	r24, 0x20	; 32
    9854:	68 07       	cpc	r22, r24
    9856:	71 05       	cpc	r23, r1
    9858:	18 f0       	brcs	.+6      	; 0x9860 <dir_sdi+0x24>
    985a:	82 e0       	ldi	r24, 0x02	; 2
    985c:	90 e0       	ldi	r25, 0x00	; 0
    985e:	a9 c0       	rjmp	.+338    	; 0x99b2 <dir_sdi+0x176>
    9860:	db 01       	movw	r26, r22
    9862:	ca 01       	movw	r24, r20
    9864:	8f 71       	andi	r24, 0x1F	; 31
    9866:	99 27       	eor	r25, r25
    9868:	aa 27       	eor	r26, r26
    986a:	bb 27       	eor	r27, r27
    986c:	89 2b       	or	r24, r25
    986e:	8a 2b       	or	r24, r26
    9870:	8b 2b       	or	r24, r27
    9872:	99 f7       	brne	.-26     	; 0x985a <dir_sdi+0x1e>
    9874:	08 81       	ld	r16, Y
    9876:	19 81       	ldd	r17, Y+1	; 0x01
    9878:	4e 87       	std	Y+14, r20	; 0x0e
    987a:	5f 87       	std	Y+15, r21	; 0x0f
    987c:	68 8b       	std	Y+16, r22	; 0x10
    987e:	79 8b       	std	Y+17, r23	; 0x11
    9880:	8e 80       	ldd	r8, Y+6	; 0x06
    9882:	9f 80       	ldd	r9, Y+7	; 0x07
    9884:	a8 84       	ldd	r10, Y+8	; 0x08
    9886:	b9 84       	ldd	r11, Y+9	; 0x09
    9888:	81 14       	cp	r8, r1
    988a:	91 04       	cpc	r9, r1
    988c:	a1 04       	cpc	r10, r1
    988e:	b1 04       	cpc	r11, r1
    9890:	51 f5       	brne	.+84     	; 0x98e6 <dir_sdi+0xaa>
    9892:	f8 01       	movw	r30, r16
    9894:	80 81       	ld	r24, Z
    9896:	83 30       	cpi	r24, 0x03	; 3
    9898:	40 f0       	brcs	.+16     	; 0x98aa <dir_sdi+0x6e>
    989a:	81 a5       	ldd	r24, Z+41	; 0x29
    989c:	92 a5       	ldd	r25, Z+42	; 0x2a
    989e:	a3 a5       	ldd	r26, Z+43	; 0x2b
    98a0:	b4 a5       	ldd	r27, Z+44	; 0x2c
    98a2:	00 97       	sbiw	r24, 0x00	; 0
    98a4:	a1 05       	cpc	r26, r1
    98a6:	b1 05       	cpc	r27, r1
    98a8:	e1 f4       	brne	.+56     	; 0x98e2 <dir_sdi+0xa6>
    98aa:	f8 01       	movw	r30, r16
    98ac:	87 81       	ldd	r24, Z+7	; 0x07
    98ae:	90 85       	ldd	r25, Z+8	; 0x08
    98b0:	a0 e0       	ldi	r26, 0x00	; 0
    98b2:	b0 e0       	ldi	r27, 0x00	; 0
    98b4:	b7 01       	movw	r22, r14
    98b6:	a6 01       	movw	r20, r12
    98b8:	25 e0       	ldi	r18, 0x05	; 5
    98ba:	76 95       	lsr	r23
    98bc:	67 95       	ror	r22
    98be:	57 95       	ror	r21
    98c0:	47 95       	ror	r20
    98c2:	2a 95       	dec	r18
    98c4:	d1 f7       	brne	.-12     	; 0x98ba <dir_sdi+0x7e>
    98c6:	48 17       	cp	r20, r24
    98c8:	59 07       	cpc	r21, r25
    98ca:	6a 07       	cpc	r22, r26
    98cc:	7b 07       	cpc	r23, r27
    98ce:	28 f6       	brcc	.-118    	; 0x985a <dir_sdi+0x1e>
    98d0:	81 a5       	ldd	r24, Z+41	; 0x29
    98d2:	92 a5       	ldd	r25, Z+42	; 0x2a
    98d4:	a3 a5       	ldd	r26, Z+43	; 0x2b
    98d6:	b4 a5       	ldd	r27, Z+44	; 0x2c
    98d8:	8e 8b       	std	Y+22, r24	; 0x16
    98da:	9f 8b       	std	Y+23, r25	; 0x17
    98dc:	a8 8f       	std	Y+24, r26	; 0x18
    98de:	b9 8f       	std	Y+25, r27	; 0x19
    98e0:	3d c0       	rjmp	.+122    	; 0x995c <dir_sdi+0x120>
    98e2:	4c 01       	movw	r8, r24
    98e4:	5d 01       	movw	r10, r26
    98e6:	f8 01       	movw	r30, r16
    98e8:	41 84       	ldd	r4, Z+9	; 0x09
    98ea:	52 84       	ldd	r5, Z+10	; 0x0a
    98ec:	61 2c       	mov	r6, r1
    98ee:	71 2c       	mov	r7, r1
    98f0:	39 e0       	ldi	r19, 0x09	; 9
    98f2:	44 0c       	add	r4, r4
    98f4:	55 1c       	adc	r5, r5
    98f6:	66 1c       	adc	r6, r6
    98f8:	77 1c       	adc	r7, r7
    98fa:	3a 95       	dec	r19
    98fc:	d1 f7       	brne	.-12     	; 0x98f2 <dir_sdi+0xb6>
    98fe:	b5 01       	movw	r22, r10
    9900:	a4 01       	movw	r20, r8
    9902:	c4 14       	cp	r12, r4
    9904:	d5 04       	cpc	r13, r5
    9906:	e6 04       	cpc	r14, r6
    9908:	f7 04       	cpc	r15, r7
    990a:	10 f1       	brcs	.+68     	; 0x9950 <dir_sdi+0x114>
    990c:	88 81       	ld	r24, Y
    990e:	99 81       	ldd	r25, Y+1	; 0x01
    9910:	e2 de       	rcall	.-572    	; 0x96d6 <get_fat.isra.7>
    9912:	4b 01       	movw	r8, r22
    9914:	5c 01       	movw	r10, r24
    9916:	6f 3f       	cpi	r22, 0xFF	; 255
    9918:	7f 4f       	sbci	r23, 0xFF	; 255
    991a:	8f 4f       	sbci	r24, 0xFF	; 255
    991c:	9f 4f       	sbci	r25, 0xFF	; 255
    991e:	09 f4       	brne	.+2      	; 0x9922 <dir_sdi+0xe6>
    9920:	46 c0       	rjmp	.+140    	; 0x99ae <dir_sdi+0x172>
    9922:	82 e0       	ldi	r24, 0x02	; 2
    9924:	88 16       	cp	r8, r24
    9926:	91 04       	cpc	r9, r1
    9928:	a1 04       	cpc	r10, r1
    992a:	b1 04       	cpc	r11, r1
    992c:	08 f4       	brcc	.+2      	; 0x9930 <dir_sdi+0xf4>
    992e:	95 cf       	rjmp	.-214    	; 0x985a <dir_sdi+0x1e>
    9930:	f8 01       	movw	r30, r16
    9932:	81 8d       	ldd	r24, Z+25	; 0x19
    9934:	92 8d       	ldd	r25, Z+26	; 0x1a
    9936:	a3 8d       	ldd	r26, Z+27	; 0x1b
    9938:	b4 8d       	ldd	r27, Z+28	; 0x1c
    993a:	88 16       	cp	r8, r24
    993c:	99 06       	cpc	r9, r25
    993e:	aa 06       	cpc	r10, r26
    9940:	bb 06       	cpc	r11, r27
    9942:	08 f0       	brcs	.+2      	; 0x9946 <dir_sdi+0x10a>
    9944:	8a cf       	rjmp	.-236    	; 0x985a <dir_sdi+0x1e>
    9946:	c4 18       	sub	r12, r4
    9948:	d5 08       	sbc	r13, r5
    994a:	e6 08       	sbc	r14, r6
    994c:	f7 08       	sbc	r15, r7
    994e:	d7 cf       	rjmp	.-82     	; 0x98fe <dir_sdi+0xc2>
    9950:	c8 01       	movw	r24, r16
    9952:	e8 d8       	rcall	.-3632   	; 0x8b24 <clust2sect>
    9954:	6e 8b       	std	Y+22, r22	; 0x16
    9956:	7f 8b       	std	Y+23, r23	; 0x17
    9958:	88 8f       	std	Y+24, r24	; 0x18
    995a:	99 8f       	std	Y+25, r25	; 0x19
    995c:	8a 8a       	std	Y+18, r8	; 0x12
    995e:	9b 8a       	std	Y+19, r9	; 0x13
    9960:	ac 8a       	std	Y+20, r10	; 0x14
    9962:	bd 8a       	std	Y+21, r11	; 0x15
    9964:	8e 89       	ldd	r24, Y+22	; 0x16
    9966:	9f 89       	ldd	r25, Y+23	; 0x17
    9968:	a8 8d       	ldd	r26, Y+24	; 0x18
    996a:	b9 8d       	ldd	r27, Y+25	; 0x19
    996c:	00 97       	sbiw	r24, 0x00	; 0
    996e:	a1 05       	cpc	r26, r1
    9970:	b1 05       	cpc	r27, r1
    9972:	09 f4       	brne	.+2      	; 0x9976 <dir_sdi+0x13a>
    9974:	72 cf       	rjmp	.-284    	; 0x985a <dir_sdi+0x1e>
    9976:	b7 01       	movw	r22, r14
    9978:	a6 01       	movw	r20, r12
    997a:	29 e0       	ldi	r18, 0x09	; 9
    997c:	76 95       	lsr	r23
    997e:	67 95       	ror	r22
    9980:	57 95       	ror	r21
    9982:	47 95       	ror	r20
    9984:	2a 95       	dec	r18
    9986:	d1 f7       	brne	.-12     	; 0x997c <dir_sdi+0x140>
    9988:	84 0f       	add	r24, r20
    998a:	95 1f       	adc	r25, r21
    998c:	a6 1f       	adc	r26, r22
    998e:	b7 1f       	adc	r27, r23
    9990:	8e 8b       	std	Y+22, r24	; 0x16
    9992:	9f 8b       	std	Y+23, r25	; 0x17
    9994:	a8 8f       	std	Y+24, r26	; 0x18
    9996:	b9 8f       	std	Y+25, r27	; 0x19
    9998:	0b 5c       	subi	r16, 0xCB	; 203
    999a:	1f 4f       	sbci	r17, 0xFF	; 255
    999c:	f1 e0       	ldi	r31, 0x01	; 1
    999e:	df 22       	and	r13, r31
    99a0:	c0 0e       	add	r12, r16
    99a2:	d1 1e       	adc	r13, r17
    99a4:	db 8e       	std	Y+27, r13	; 0x1b
    99a6:	ca 8e       	std	Y+26, r12	; 0x1a
    99a8:	80 e0       	ldi	r24, 0x00	; 0
    99aa:	90 e0       	ldi	r25, 0x00	; 0
    99ac:	02 c0       	rjmp	.+4      	; 0x99b2 <dir_sdi+0x176>
    99ae:	81 e0       	ldi	r24, 0x01	; 1
    99b0:	90 e0       	ldi	r25, 0x00	; 0
    99b2:	cd b7       	in	r28, 0x3d	; 61
    99b4:	de b7       	in	r29, 0x3e	; 62
    99b6:	e0 e1       	ldi	r30, 0x10	; 16
    99b8:	0c 94 df e8 	jmp	0x1d1be	; 0x1d1be <__epilogue_restores__+0x4>

000099bc <create_chain>:
    99bc:	a0 e0       	ldi	r26, 0x00	; 0
    99be:	b0 e0       	ldi	r27, 0x00	; 0
    99c0:	e4 ee       	ldi	r30, 0xE4	; 228
    99c2:	fc e4       	ldi	r31, 0x4C	; 76
    99c4:	0c 94 c3 e8 	jmp	0x1d186	; 0x1d186 <__prologue_saves__+0x4>
    99c8:	8c 01       	movw	r16, r24
    99ca:	2a 01       	movw	r4, r20
    99cc:	3b 01       	movw	r6, r22
    99ce:	fc 01       	movw	r30, r24
    99d0:	c0 81       	ld	r28, Z
    99d2:	d1 81       	ldd	r29, Z+1	; 0x01
    99d4:	41 15       	cp	r20, r1
    99d6:	51 05       	cpc	r21, r1
    99d8:	61 05       	cpc	r22, r1
    99da:	71 05       	cpc	r23, r1
    99dc:	99 f4       	brne	.+38     	; 0x9a04 <create_chain+0x48>
    99de:	8d 84       	ldd	r8, Y+13	; 0x0d
    99e0:	9e 84       	ldd	r9, Y+14	; 0x0e
    99e2:	af 84       	ldd	r10, Y+15	; 0x0f
    99e4:	b8 88       	ldd	r11, Y+16	; 0x10
    99e6:	81 14       	cp	r8, r1
    99e8:	91 04       	cpc	r9, r1
    99ea:	a1 04       	cpc	r10, r1
    99ec:	b1 04       	cpc	r11, r1
    99ee:	51 f1       	breq	.+84     	; 0x9a44 <create_chain+0x88>
    99f0:	89 8d       	ldd	r24, Y+25	; 0x19
    99f2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    99f4:	ab 8d       	ldd	r26, Y+27	; 0x1b
    99f6:	bc 8d       	ldd	r27, Y+28	; 0x1c
    99f8:	88 16       	cp	r8, r24
    99fa:	99 06       	cpc	r9, r25
    99fc:	aa 06       	cpc	r10, r26
    99fe:	bb 06       	cpc	r11, r27
    9a00:	28 f1       	brcs	.+74     	; 0x9a4c <create_chain+0x90>
    9a02:	20 c0       	rjmp	.+64     	; 0x9a44 <create_chain+0x88>
    9a04:	ce 01       	movw	r24, r28
    9a06:	67 de       	rcall	.-818    	; 0x96d6 <get_fat.isra.7>
    9a08:	62 30       	cpi	r22, 0x02	; 2
    9a0a:	71 05       	cpc	r23, r1
    9a0c:	81 05       	cpc	r24, r1
    9a0e:	91 05       	cpc	r25, r1
    9a10:	08 f4       	brcc	.+2      	; 0x9a14 <create_chain+0x58>
    9a12:	95 c0       	rjmp	.+298    	; 0x9b3e <create_chain+0x182>
    9a14:	6f 3f       	cpi	r22, 0xFF	; 255
    9a16:	ff ef       	ldi	r31, 0xFF	; 255
    9a18:	7f 07       	cpc	r23, r31
    9a1a:	8f 07       	cpc	r24, r31
    9a1c:	9f 07       	cpc	r25, r31
    9a1e:	29 f4       	brne	.+10     	; 0x9a2a <create_chain+0x6e>
    9a20:	4f ef       	ldi	r20, 0xFF	; 255
    9a22:	3f ef       	ldi	r19, 0xFF	; 255
    9a24:	2f ef       	ldi	r18, 0xFF	; 255
    9a26:	9f ef       	ldi	r25, 0xFF	; 255
    9a28:	92 c0       	rjmp	.+292    	; 0x9b4e <create_chain+0x192>
    9a2a:	c9 8c       	ldd	r12, Y+25	; 0x19
    9a2c:	da 8c       	ldd	r13, Y+26	; 0x1a
    9a2e:	eb 8c       	ldd	r14, Y+27	; 0x1b
    9a30:	fc 8c       	ldd	r15, Y+28	; 0x1c
    9a32:	6c 15       	cp	r22, r12
    9a34:	7d 05       	cpc	r23, r13
    9a36:	8e 05       	cpc	r24, r14
    9a38:	9f 05       	cpc	r25, r15
    9a3a:	08 f4       	brcc	.+2      	; 0x9a3e <create_chain+0x82>
    9a3c:	85 c0       	rjmp	.+266    	; 0x9b48 <create_chain+0x18c>
    9a3e:	53 01       	movw	r10, r6
    9a40:	42 01       	movw	r8, r4
    9a42:	04 c0       	rjmp	.+8      	; 0x9a4c <create_chain+0x90>
    9a44:	81 2c       	mov	r8, r1
    9a46:	91 2c       	mov	r9, r1
    9a48:	54 01       	movw	r10, r8
    9a4a:	83 94       	inc	r8
    9a4c:	75 01       	movw	r14, r10
    9a4e:	64 01       	movw	r12, r8
    9a50:	2f ef       	ldi	r18, 0xFF	; 255
    9a52:	c2 1a       	sub	r12, r18
    9a54:	d2 0a       	sbc	r13, r18
    9a56:	e2 0a       	sbc	r14, r18
    9a58:	f2 0a       	sbc	r15, r18
    9a5a:	89 8d       	ldd	r24, Y+25	; 0x19
    9a5c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9a5e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9a60:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9a62:	c8 16       	cp	r12, r24
    9a64:	d9 06       	cpc	r13, r25
    9a66:	ea 06       	cpc	r14, r26
    9a68:	fb 06       	cpc	r15, r27
    9a6a:	68 f0       	brcs	.+26     	; 0x9a86 <create_chain+0xca>
    9a6c:	82 e0       	ldi	r24, 0x02	; 2
    9a6e:	88 16       	cp	r8, r24
    9a70:	91 04       	cpc	r9, r1
    9a72:	a1 04       	cpc	r10, r1
    9a74:	b1 04       	cpc	r11, r1
    9a76:	10 f4       	brcc	.+4      	; 0x9a7c <create_chain+0xc0>
    9a78:	40 e0       	ldi	r20, 0x00	; 0
    9a7a:	62 c0       	rjmp	.+196    	; 0x9b40 <create_chain+0x184>
    9a7c:	82 e0       	ldi	r24, 0x02	; 2
    9a7e:	c8 2e       	mov	r12, r24
    9a80:	d1 2c       	mov	r13, r1
    9a82:	e1 2c       	mov	r14, r1
    9a84:	f1 2c       	mov	r15, r1
    9a86:	b7 01       	movw	r22, r14
    9a88:	a6 01       	movw	r20, r12
    9a8a:	f8 01       	movw	r30, r16
    9a8c:	80 81       	ld	r24, Z
    9a8e:	91 81       	ldd	r25, Z+1	; 0x01
    9a90:	22 de       	rcall	.-956    	; 0x96d6 <get_fat.isra.7>
    9a92:	61 15       	cp	r22, r1
    9a94:	71 05       	cpc	r23, r1
    9a96:	81 05       	cpc	r24, r1
    9a98:	91 05       	cpc	r25, r1
    9a9a:	91 f0       	breq	.+36     	; 0x9ac0 <create_chain+0x104>
    9a9c:	61 30       	cpi	r22, 0x01	; 1
    9a9e:	71 05       	cpc	r23, r1
    9aa0:	81 05       	cpc	r24, r1
    9aa2:	91 05       	cpc	r25, r1
    9aa4:	09 f4       	brne	.+2      	; 0x9aa8 <create_chain+0xec>
    9aa6:	4b c0       	rjmp	.+150    	; 0x9b3e <create_chain+0x182>
    9aa8:	6f 3f       	cpi	r22, 0xFF	; 255
    9aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    9aac:	8f 4f       	sbci	r24, 0xFF	; 255
    9aae:	9f 4f       	sbci	r25, 0xFF	; 255
    9ab0:	09 f4       	brne	.+2      	; 0x9ab4 <create_chain+0xf8>
    9ab2:	b6 cf       	rjmp	.-148    	; 0x9a20 <create_chain+0x64>
    9ab4:	c8 14       	cp	r12, r8
    9ab6:	d9 04       	cpc	r13, r9
    9ab8:	ea 04       	cpc	r14, r10
    9aba:	fb 04       	cpc	r15, r11
    9abc:	49 f6       	brne	.-110    	; 0x9a50 <create_chain+0x94>
    9abe:	dc cf       	rjmp	.-72     	; 0x9a78 <create_chain+0xbc>
    9ac0:	0f ef       	ldi	r16, 0xFF	; 255
    9ac2:	1f ef       	ldi	r17, 0xFF	; 255
    9ac4:	98 01       	movw	r18, r16
    9ac6:	b7 01       	movw	r22, r14
    9ac8:	a6 01       	movw	r20, r12
    9aca:	ce 01       	movw	r24, r28
    9acc:	07 dd       	rcall	.-1522   	; 0x94dc <put_fat>
    9ace:	00 97       	sbiw	r24, 0x00	; 0
    9ad0:	99 f5       	brne	.+102    	; 0x9b38 <create_chain+0x17c>
    9ad2:	41 14       	cp	r4, r1
    9ad4:	51 04       	cpc	r5, r1
    9ad6:	61 04       	cpc	r6, r1
    9ad8:	71 04       	cpc	r7, r1
    9ada:	e9 f4       	brne	.+58     	; 0x9b16 <create_chain+0x15a>
    9adc:	cd 86       	std	Y+13, r12	; 0x0d
    9ade:	de 86       	std	Y+14, r13	; 0x0e
    9ae0:	ef 86       	std	Y+15, r14	; 0x0f
    9ae2:	f8 8a       	std	Y+16, r15	; 0x10
    9ae4:	89 89       	ldd	r24, Y+17	; 0x11
    9ae6:	9a 89       	ldd	r25, Y+18	; 0x12
    9ae8:	ab 89       	ldd	r26, Y+19	; 0x13
    9aea:	bc 89       	ldd	r27, Y+20	; 0x14
    9aec:	49 8d       	ldd	r20, Y+25	; 0x19
    9aee:	5a 8d       	ldd	r21, Y+26	; 0x1a
    9af0:	6b 8d       	ldd	r22, Y+27	; 0x1b
    9af2:	7c 8d       	ldd	r23, Y+28	; 0x1c
    9af4:	42 50       	subi	r20, 0x02	; 2
    9af6:	51 09       	sbc	r21, r1
    9af8:	61 09       	sbc	r22, r1
    9afa:	71 09       	sbc	r23, r1
    9afc:	84 17       	cp	r24, r20
    9afe:	95 07       	cpc	r25, r21
    9b00:	a6 07       	cpc	r26, r22
    9b02:	b7 07       	cpc	r27, r23
    9b04:	88 f4       	brcc	.+34     	; 0x9b28 <create_chain+0x16c>
    9b06:	01 97       	sbiw	r24, 0x01	; 1
    9b08:	a1 09       	sbc	r26, r1
    9b0a:	b1 09       	sbc	r27, r1
    9b0c:	89 8b       	std	Y+17, r24	; 0x11
    9b0e:	9a 8b       	std	Y+18, r25	; 0x12
    9b10:	ab 8b       	std	Y+19, r26	; 0x13
    9b12:	bc 8b       	std	Y+20, r27	; 0x14
    9b14:	09 c0       	rjmp	.+18     	; 0x9b28 <create_chain+0x16c>
    9b16:	97 01       	movw	r18, r14
    9b18:	86 01       	movw	r16, r12
    9b1a:	b3 01       	movw	r22, r6
    9b1c:	a2 01       	movw	r20, r4
    9b1e:	ce 01       	movw	r24, r28
    9b20:	dd dc       	rcall	.-1606   	; 0x94dc <put_fat>
    9b22:	00 97       	sbiw	r24, 0x00	; 0
    9b24:	d9 f2       	breq	.-74     	; 0x9adc <create_chain+0x120>
    9b26:	08 c0       	rjmp	.+16     	; 0x9b38 <create_chain+0x17c>
    9b28:	8c 81       	ldd	r24, Y+4	; 0x04
    9b2a:	81 60       	ori	r24, 0x01	; 1
    9b2c:	8c 83       	std	Y+4, r24	; 0x04
    9b2e:	4c 2d       	mov	r20, r12
    9b30:	3d 2d       	mov	r19, r13
    9b32:	2e 2d       	mov	r18, r14
    9b34:	9f 2d       	mov	r25, r15
    9b36:	0b c0       	rjmp	.+22     	; 0x9b4e <create_chain+0x192>
    9b38:	01 97       	sbiw	r24, 0x01	; 1
    9b3a:	09 f4       	brne	.+2      	; 0x9b3e <create_chain+0x182>
    9b3c:	71 cf       	rjmp	.-286    	; 0x9a20 <create_chain+0x64>
    9b3e:	41 e0       	ldi	r20, 0x01	; 1
    9b40:	30 e0       	ldi	r19, 0x00	; 0
    9b42:	20 e0       	ldi	r18, 0x00	; 0
    9b44:	90 e0       	ldi	r25, 0x00	; 0
    9b46:	03 c0       	rjmp	.+6      	; 0x9b4e <create_chain+0x192>
    9b48:	46 2f       	mov	r20, r22
    9b4a:	37 2f       	mov	r19, r23
    9b4c:	28 2f       	mov	r18, r24
    9b4e:	64 2f       	mov	r22, r20
    9b50:	73 2f       	mov	r23, r19
    9b52:	82 2f       	mov	r24, r18
    9b54:	cd b7       	in	r28, 0x3d	; 61
    9b56:	de b7       	in	r29, 0x3e	; 62
    9b58:	e0 e1       	ldi	r30, 0x10	; 16
    9b5a:	0c 94 df e8 	jmp	0x1d1be	; 0x1d1be <__epilogue_restores__+0x4>

00009b5e <remove_chain>:
    9b5e:	4f 92       	push	r4
    9b60:	5f 92       	push	r5
    9b62:	6f 92       	push	r6
    9b64:	7f 92       	push	r7
    9b66:	af 92       	push	r10
    9b68:	bf 92       	push	r11
    9b6a:	cf 92       	push	r12
    9b6c:	df 92       	push	r13
    9b6e:	ef 92       	push	r14
    9b70:	ff 92       	push	r15
    9b72:	0f 93       	push	r16
    9b74:	1f 93       	push	r17
    9b76:	cf 93       	push	r28
    9b78:	df 93       	push	r29
    9b7a:	5c 01       	movw	r10, r24
    9b7c:	6a 01       	movw	r12, r20
    9b7e:	7b 01       	movw	r14, r22
    9b80:	b9 01       	movw	r22, r18
    9b82:	a8 01       	movw	r20, r16
    9b84:	22 e0       	ldi	r18, 0x02	; 2
    9b86:	c2 16       	cp	r12, r18
    9b88:	d1 04       	cpc	r13, r1
    9b8a:	e1 04       	cpc	r14, r1
    9b8c:	f1 04       	cpc	r15, r1
    9b8e:	10 f4       	brcc	.+4      	; 0x9b94 <remove_chain+0x36>
    9b90:	22 e0       	ldi	r18, 0x02	; 2
    9b92:	27 c0       	rjmp	.+78     	; 0x9be2 <remove_chain+0x84>
    9b94:	fc 01       	movw	r30, r24
    9b96:	c0 81       	ld	r28, Z
    9b98:	d1 81       	ldd	r29, Z+1	; 0x01
    9b9a:	89 8d       	ldd	r24, Y+25	; 0x19
    9b9c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9b9e:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9ba0:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9ba2:	c8 16       	cp	r12, r24
    9ba4:	d9 06       	cpc	r13, r25
    9ba6:	ea 06       	cpc	r14, r26
    9ba8:	fb 06       	cpc	r15, r27
    9baa:	90 f7       	brcc	.-28     	; 0x9b90 <remove_chain+0x32>
    9bac:	41 15       	cp	r20, r1
    9bae:	51 05       	cpc	r21, r1
    9bb0:	61 05       	cpc	r22, r1
    9bb2:	71 05       	cpc	r23, r1
    9bb4:	41 f0       	breq	.+16     	; 0x9bc6 <remove_chain+0x68>
    9bb6:	0f ef       	ldi	r16, 0xFF	; 255
    9bb8:	1f ef       	ldi	r17, 0xFF	; 255
    9bba:	98 01       	movw	r18, r16
    9bbc:	ce 01       	movw	r24, r28
    9bbe:	8e dc       	rcall	.-1764   	; 0x94dc <put_fat>
    9bc0:	00 97       	sbiw	r24, 0x00	; 0
    9bc2:	09 f0       	breq	.+2      	; 0x9bc6 <remove_chain+0x68>
    9bc4:	4c c0       	rjmp	.+152    	; 0x9c5e <remove_chain+0x100>
    9bc6:	b7 01       	movw	r22, r14
    9bc8:	a6 01       	movw	r20, r12
    9bca:	f5 01       	movw	r30, r10
    9bcc:	80 81       	ld	r24, Z
    9bce:	91 81       	ldd	r25, Z+1	; 0x01
    9bd0:	82 dd       	rcall	.-1276   	; 0x96d6 <get_fat.isra.7>
    9bd2:	2b 01       	movw	r4, r22
    9bd4:	3c 01       	movw	r6, r24
    9bd6:	61 15       	cp	r22, r1
    9bd8:	71 05       	cpc	r23, r1
    9bda:	81 05       	cpc	r24, r1
    9bdc:	91 05       	cpc	r25, r1
    9bde:	19 f4       	brne	.+6      	; 0x9be6 <remove_chain+0x88>
    9be0:	20 e0       	ldi	r18, 0x00	; 0
    9be2:	90 e0       	ldi	r25, 0x00	; 0
    9be4:	3d c0       	rjmp	.+122    	; 0x9c60 <remove_chain+0x102>
    9be6:	61 30       	cpi	r22, 0x01	; 1
    9be8:	71 05       	cpc	r23, r1
    9bea:	81 05       	cpc	r24, r1
    9bec:	91 05       	cpc	r25, r1
    9bee:	81 f2       	breq	.-96     	; 0x9b90 <remove_chain+0x32>
    9bf0:	6f 3f       	cpi	r22, 0xFF	; 255
    9bf2:	7f 4f       	sbci	r23, 0xFF	; 255
    9bf4:	8f 4f       	sbci	r24, 0xFF	; 255
    9bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    9bf8:	81 f1       	breq	.+96     	; 0x9c5a <remove_chain+0xfc>
    9bfa:	00 e0       	ldi	r16, 0x00	; 0
    9bfc:	10 e0       	ldi	r17, 0x00	; 0
    9bfe:	98 01       	movw	r18, r16
    9c00:	b7 01       	movw	r22, r14
    9c02:	a6 01       	movw	r20, r12
    9c04:	ce 01       	movw	r24, r28
    9c06:	6a dc       	rcall	.-1836   	; 0x94dc <put_fat>
    9c08:	00 97       	sbiw	r24, 0x00	; 0
    9c0a:	49 f5       	brne	.+82     	; 0x9c5e <remove_chain+0x100>
    9c0c:	89 89       	ldd	r24, Y+17	; 0x11
    9c0e:	9a 89       	ldd	r25, Y+18	; 0x12
    9c10:	ab 89       	ldd	r26, Y+19	; 0x13
    9c12:	bc 89       	ldd	r27, Y+20	; 0x14
    9c14:	49 8d       	ldd	r20, Y+25	; 0x19
    9c16:	5a 8d       	ldd	r21, Y+26	; 0x1a
    9c18:	6b 8d       	ldd	r22, Y+27	; 0x1b
    9c1a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    9c1c:	6a 01       	movw	r12, r20
    9c1e:	7b 01       	movw	r14, r22
    9c20:	e2 e0       	ldi	r30, 0x02	; 2
    9c22:	ce 1a       	sub	r12, r30
    9c24:	d1 08       	sbc	r13, r1
    9c26:	e1 08       	sbc	r14, r1
    9c28:	f1 08       	sbc	r15, r1
    9c2a:	8c 15       	cp	r24, r12
    9c2c:	9d 05       	cpc	r25, r13
    9c2e:	ae 05       	cpc	r26, r14
    9c30:	bf 05       	cpc	r27, r15
    9c32:	50 f4       	brcc	.+20     	; 0x9c48 <remove_chain+0xea>
    9c34:	01 96       	adiw	r24, 0x01	; 1
    9c36:	a1 1d       	adc	r26, r1
    9c38:	b1 1d       	adc	r27, r1
    9c3a:	89 8b       	std	Y+17, r24	; 0x11
    9c3c:	9a 8b       	std	Y+18, r25	; 0x12
    9c3e:	ab 8b       	std	Y+19, r26	; 0x13
    9c40:	bc 8b       	std	Y+20, r27	; 0x14
    9c42:	8c 81       	ldd	r24, Y+4	; 0x04
    9c44:	81 60       	ori	r24, 0x01	; 1
    9c46:	8c 83       	std	Y+4, r24	; 0x04
    9c48:	73 01       	movw	r14, r6
    9c4a:	62 01       	movw	r12, r4
    9c4c:	44 16       	cp	r4, r20
    9c4e:	55 06       	cpc	r5, r21
    9c50:	66 06       	cpc	r6, r22
    9c52:	77 06       	cpc	r7, r23
    9c54:	08 f4       	brcc	.+2      	; 0x9c58 <remove_chain+0xfa>
    9c56:	b7 cf       	rjmp	.-146    	; 0x9bc6 <remove_chain+0x68>
    9c58:	c3 cf       	rjmp	.-122    	; 0x9be0 <remove_chain+0x82>
    9c5a:	21 e0       	ldi	r18, 0x01	; 1
    9c5c:	c2 cf       	rjmp	.-124    	; 0x9be2 <remove_chain+0x84>
    9c5e:	28 2f       	mov	r18, r24
    9c60:	82 2f       	mov	r24, r18
    9c62:	df 91       	pop	r29
    9c64:	cf 91       	pop	r28
    9c66:	1f 91       	pop	r17
    9c68:	0f 91       	pop	r16
    9c6a:	ff 90       	pop	r15
    9c6c:	ef 90       	pop	r14
    9c6e:	df 90       	pop	r13
    9c70:	cf 90       	pop	r12
    9c72:	bf 90       	pop	r11
    9c74:	af 90       	pop	r10
    9c76:	7f 90       	pop	r7
    9c78:	6f 90       	pop	r6
    9c7a:	5f 90       	pop	r5
    9c7c:	4f 90       	pop	r4
    9c7e:	08 95       	ret

00009c80 <get_fileinfo>:
    9c80:	a0 e0       	ldi	r26, 0x00	; 0
    9c82:	b0 e0       	ldi	r27, 0x00	; 0
    9c84:	e6 e4       	ldi	r30, 0x46	; 70
    9c86:	fe e4       	ldi	r31, 0x4E	; 78
    9c88:	0c 94 c9 e8 	jmp	0x1d192	; 0x1d192 <__prologue_saves__+0x10>
    9c8c:	dc 01       	movw	r26, r24
    9c8e:	cd 90       	ld	r12, X+
    9c90:	dc 90       	ld	r13, X
    9c92:	11 97       	sbiw	r26, 0x01	; 1
    9c94:	fb 01       	movw	r30, r22
    9c96:	16 8a       	std	Z+22, r1	; 0x16
    9c98:	56 96       	adiw	r26, 0x16	; 22
    9c9a:	0d 91       	ld	r16, X+
    9c9c:	1d 91       	ld	r17, X+
    9c9e:	2d 91       	ld	r18, X+
    9ca0:	3c 91       	ld	r19, X
    9ca2:	59 97       	sbiw	r26, 0x19	; 25
    9ca4:	01 15       	cp	r16, r1
    9ca6:	11 05       	cpc	r17, r1
    9ca8:	21 05       	cpc	r18, r1
    9caa:	31 05       	cpc	r19, r1
    9cac:	09 f4       	brne	.+2      	; 0x9cb0 <get_fileinfo+0x30>
    9cae:	bb c0       	rjmp	.+374    	; 0x9e26 <get_fileinfo+0x1a6>
    9cb0:	eb 01       	movw	r28, r22
    9cb2:	8c 01       	movw	r16, r24
    9cb4:	fc 01       	movw	r30, r24
    9cb6:	80 a5       	ldd	r24, Z+40	; 0x28
    9cb8:	91 a5       	ldd	r25, Z+41	; 0x29
    9cba:	a2 a5       	ldd	r26, Z+42	; 0x2a
    9cbc:	b3 a5       	ldd	r27, Z+43	; 0x2b
    9cbe:	8f 3f       	cpi	r24, 0xFF	; 255
    9cc0:	9f 4f       	sbci	r25, 0xFF	; 255
    9cc2:	af 4f       	sbci	r26, 0xFF	; 255
    9cc4:	bf 4f       	sbci	r27, 0xFF	; 255
    9cc6:	59 f1       	breq	.+86     	; 0x9d1e <get_fileinfo+0x9e>
    9cc8:	5b 01       	movw	r10, r22
    9cca:	26 e1       	ldi	r18, 0x16	; 22
    9ccc:	a2 0e       	add	r10, r18
    9cce:	b1 1c       	adc	r11, r1
    9cd0:	e1 2c       	mov	r14, r1
    9cd2:	f1 2c       	mov	r15, r1
    9cd4:	d6 01       	movw	r26, r12
    9cd6:	1b 96       	adiw	r26, 0x0b	; 11
    9cd8:	ed 91       	ld	r30, X+
    9cda:	fc 91       	ld	r31, X
    9cdc:	1c 97       	sbiw	r26, 0x0c	; 12
    9cde:	c7 01       	movw	r24, r14
    9ce0:	88 0f       	add	r24, r24
    9ce2:	99 1f       	adc	r25, r25
    9ce4:	e8 0f       	add	r30, r24
    9ce6:	f9 1f       	adc	r31, r25
    9ce8:	80 81       	ld	r24, Z
    9cea:	91 81       	ldd	r25, Z+1	; 0x01
    9cec:	00 97       	sbiw	r24, 0x00	; 0
    9cee:	99 f0       	breq	.+38     	; 0x9d16 <get_fileinfo+0x96>
    9cf0:	60 e0       	ldi	r22, 0x00	; 0
    9cf2:	70 e0       	ldi	r23, 0x00	; 0
    9cf4:	0e 94 19 6c 	call	0xd832	; 0xd832 <ff_convert>
    9cf8:	00 97       	sbiw	r24, 0x00	; 0
    9cfa:	59 f0       	breq	.+22     	; 0x9d12 <get_fileinfo+0x92>
    9cfc:	af ef       	ldi	r26, 0xFF	; 255
    9cfe:	ea 16       	cp	r14, r26
    9d00:	f1 04       	cpc	r15, r1
    9d02:	39 f0       	breq	.+14     	; 0x9d12 <get_fileinfo+0x92>
    9d04:	bf ef       	ldi	r27, 0xFF	; 255
    9d06:	eb 1a       	sub	r14, r27
    9d08:	fb 0a       	sbc	r15, r27
    9d0a:	f5 01       	movw	r30, r10
    9d0c:	81 93       	st	Z+, r24
    9d0e:	5f 01       	movw	r10, r30
    9d10:	e1 cf       	rjmp	.-62     	; 0x9cd4 <get_fileinfo+0x54>
    9d12:	e1 2c       	mov	r14, r1
    9d14:	f1 2c       	mov	r15, r1
    9d16:	fe 01       	movw	r30, r28
    9d18:	ee 0d       	add	r30, r14
    9d1a:	ff 1d       	adc	r31, r15
    9d1c:	16 8a       	std	Z+22, r1	; 0x16
    9d1e:	4e 89       	ldd	r20, Y+22	; 0x16
    9d20:	50 e0       	ldi	r21, 0x00	; 0
    9d22:	20 e0       	ldi	r18, 0x00	; 0
    9d24:	30 e0       	ldi	r19, 0x00	; 0
    9d26:	80 e0       	ldi	r24, 0x00	; 0
    9d28:	90 e0       	ldi	r25, 0x00	; 0
    9d2a:	6e e2       	ldi	r22, 0x2E	; 46
    9d2c:	d6 2e       	mov	r13, r22
    9d2e:	fc 01       	movw	r30, r24
    9d30:	31 96       	adiw	r30, 0x01	; 1
    9d32:	d8 01       	movw	r26, r16
    9d34:	5a 96       	adiw	r26, 0x1a	; 26
    9d36:	6d 91       	ld	r22, X+
    9d38:	7c 91       	ld	r23, X
    9d3a:	5b 97       	sbiw	r26, 0x1b	; 27
    9d3c:	db 01       	movw	r26, r22
    9d3e:	a8 0f       	add	r26, r24
    9d40:	b9 1f       	adc	r27, r25
    9d42:	8c 91       	ld	r24, X
    9d44:	80 32       	cpi	r24, 0x20	; 32
    9d46:	e1 f1       	breq	.+120    	; 0x9dc0 <get_fileinfo+0x140>
    9d48:	85 30       	cpi	r24, 0x05	; 5
    9d4a:	09 f4       	brne	.+2      	; 0x9d4e <get_fileinfo+0xce>
    9d4c:	85 ee       	ldi	r24, 0xE5	; 229
    9d4e:	e9 30       	cpi	r30, 0x09	; 9
    9d50:	f1 05       	cpc	r31, r1
    9d52:	69 f4       	brne	.+26     	; 0x9d6e <get_fileinfo+0xee>
    9d54:	de 01       	movw	r26, r28
    9d56:	a2 0f       	add	r26, r18
    9d58:	b3 1f       	adc	r27, r19
    9d5a:	41 15       	cp	r20, r1
    9d5c:	51 05       	cpc	r21, r1
    9d5e:	19 f4       	brne	.+6      	; 0x9d66 <get_fileinfo+0xe6>
    9d60:	56 96       	adiw	r26, 0x16	; 22
    9d62:	dc 92       	st	X, r13
    9d64:	56 97       	sbiw	r26, 0x16	; 22
    9d66:	19 96       	adiw	r26, 0x09	; 9
    9d68:	dc 92       	st	X, r13
    9d6a:	2f 5f       	subi	r18, 0xFF	; 255
    9d6c:	3f 4f       	sbci	r19, 0xFF	; 255
    9d6e:	7e 01       	movw	r14, r28
    9d70:	e2 0e       	add	r14, r18
    9d72:	f3 1e       	adc	r15, r19
    9d74:	d7 01       	movw	r26, r14
    9d76:	19 96       	adiw	r26, 0x09	; 9
    9d78:	8c 93       	st	X, r24
    9d7a:	41 15       	cp	r20, r1
    9d7c:	51 05       	cpc	r21, r1
    9d7e:	f1 f4       	brne	.+60     	; 0x9dbc <get_fileinfo+0x13c>
    9d80:	9f eb       	ldi	r25, 0xBF	; 191
    9d82:	98 0f       	add	r25, r24
    9d84:	9a 31       	cpi	r25, 0x1A	; 26
    9d86:	b8 f4       	brcc	.+46     	; 0x9db6 <get_fileinfo+0x136>
    9d88:	d8 01       	movw	r26, r16
    9d8a:	5a 96       	adiw	r26, 0x1a	; 26
    9d8c:	6d 91       	ld	r22, X+
    9d8e:	7c 91       	ld	r23, X
    9d90:	5b 97       	sbiw	r26, 0x1b	; 27
    9d92:	db 01       	movw	r26, r22
    9d94:	1c 96       	adiw	r26, 0x0c	; 12
    9d96:	6c 91       	ld	r22, X
    9d98:	a6 2f       	mov	r26, r22
    9d9a:	b0 e0       	ldi	r27, 0x00	; 0
    9d9c:	e9 30       	cpi	r30, 0x09	; 9
    9d9e:	f1 05       	cpc	r31, r1
    9da0:	18 f4       	brcc	.+6      	; 0x9da8 <get_fileinfo+0x128>
    9da2:	68 e0       	ldi	r22, 0x08	; 8
    9da4:	70 e0       	ldi	r23, 0x00	; 0
    9da6:	02 c0       	rjmp	.+4      	; 0x9dac <get_fileinfo+0x12c>
    9da8:	60 e1       	ldi	r22, 0x10	; 16
    9daa:	70 e0       	ldi	r23, 0x00	; 0
    9dac:	6a 23       	and	r22, r26
    9dae:	7b 23       	and	r23, r27
    9db0:	67 2b       	or	r22, r23
    9db2:	09 f0       	breq	.+2      	; 0x9db6 <get_fileinfo+0x136>
    9db4:	80 5e       	subi	r24, 0xE0	; 224
    9db6:	d7 01       	movw	r26, r14
    9db8:	56 96       	adiw	r26, 0x16	; 22
    9dba:	8c 93       	st	X, r24
    9dbc:	2f 5f       	subi	r18, 0xFF	; 255
    9dbe:	3f 4f       	sbci	r19, 0xFF	; 255
    9dc0:	cf 01       	movw	r24, r30
    9dc2:	3b 97       	sbiw	r30, 0x0b	; 11
    9dc4:	09 f0       	breq	.+2      	; 0x9dc8 <get_fileinfo+0x148>
    9dc6:	b3 cf       	rjmp	.-154    	; 0x9d2e <get_fileinfo+0xae>
    9dc8:	45 2b       	or	r20, r21
    9dca:	71 f4       	brne	.+28     	; 0x9de8 <get_fileinfo+0x168>
    9dcc:	fe 01       	movw	r30, r28
    9dce:	e2 0f       	add	r30, r18
    9dd0:	f3 1f       	adc	r31, r19
    9dd2:	16 8a       	std	Z+22, r1	; 0x16
    9dd4:	d8 01       	movw	r26, r16
    9dd6:	5a 96       	adiw	r26, 0x1a	; 26
    9dd8:	ed 91       	ld	r30, X+
    9dda:	fc 91       	ld	r31, X
    9ddc:	5b 97       	sbiw	r26, 0x1b	; 27
    9dde:	84 85       	ldd	r24, Z+12	; 0x0c
    9de0:	81 11       	cpse	r24, r1
    9de2:	02 c0       	rjmp	.+4      	; 0x9de8 <get_fileinfo+0x168>
    9de4:	20 e0       	ldi	r18, 0x00	; 0
    9de6:	30 e0       	ldi	r19, 0x00	; 0
    9de8:	fe 01       	movw	r30, r28
    9dea:	e2 0f       	add	r30, r18
    9dec:	f3 1f       	adc	r31, r19
    9dee:	11 86       	std	Z+9, r1	; 0x09
    9df0:	d8 01       	movw	r26, r16
    9df2:	5a 96       	adiw	r26, 0x1a	; 26
    9df4:	ed 91       	ld	r30, X+
    9df6:	fc 91       	ld	r31, X
    9df8:	5b 97       	sbiw	r26, 0x1b	; 27
    9dfa:	83 85       	ldd	r24, Z+11	; 0x0b
    9dfc:	88 87       	std	Y+8, r24	; 0x08
    9dfe:	5a 96       	adiw	r26, 0x1a	; 26
    9e00:	0d 91       	ld	r16, X+
    9e02:	1c 91       	ld	r17, X
    9e04:	5b 97       	sbiw	r26, 0x1b	; 27
    9e06:	c8 01       	movw	r24, r16
    9e08:	4c 96       	adiw	r24, 0x1c	; 28
    9e0a:	0e 94 6e 45 	call	0x8adc	; 0x8adc <ld_dword>
    9e0e:	68 83       	st	Y, r22
    9e10:	79 83       	std	Y+1, r23	; 0x01
    9e12:	8a 83       	std	Y+2, r24	; 0x02
    9e14:	9b 83       	std	Y+3, r25	; 0x03
    9e16:	c8 01       	movw	r24, r16
    9e18:	46 96       	adiw	r24, 0x16	; 22
    9e1a:	0e 94 6e 45 	call	0x8adc	; 0x8adc <ld_dword>
    9e1e:	7f 83       	std	Y+7, r23	; 0x07
    9e20:	6e 83       	std	Y+6, r22	; 0x06
    9e22:	9d 83       	std	Y+5, r25	; 0x05
    9e24:	8c 83       	std	Y+4, r24	; 0x04
    9e26:	cd b7       	in	r28, 0x3d	; 61
    9e28:	de b7       	in	r29, 0x3e	; 62
    9e2a:	ea e0       	ldi	r30, 0x0A	; 10
    9e2c:	0c 94 e5 e8 	jmp	0x1d1ca	; 0x1d1ca <__epilogue_restores__+0x10>

00009e30 <dir_next>:
    9e30:	4f 92       	push	r4
    9e32:	5f 92       	push	r5
    9e34:	6f 92       	push	r6
    9e36:	7f 92       	push	r7
    9e38:	9f 92       	push	r9
    9e3a:	af 92       	push	r10
    9e3c:	bf 92       	push	r11
    9e3e:	cf 92       	push	r12
    9e40:	df 92       	push	r13
    9e42:	ef 92       	push	r14
    9e44:	ff 92       	push	r15
    9e46:	0f 93       	push	r16
    9e48:	1f 93       	push	r17
    9e4a:	cf 93       	push	r28
    9e4c:	df 93       	push	r29
    9e4e:	5b 01       	movw	r10, r22
    9e50:	fc 01       	movw	r30, r24
    9e52:	46 89       	ldd	r20, Z+22	; 0x16
    9e54:	57 89       	ldd	r21, Z+23	; 0x17
    9e56:	60 8d       	ldd	r22, Z+24	; 0x18
    9e58:	71 8d       	ldd	r23, Z+25	; 0x19
    9e5a:	41 15       	cp	r20, r1
    9e5c:	51 05       	cpc	r21, r1
    9e5e:	61 05       	cpc	r22, r1
    9e60:	71 05       	cpc	r23, r1
    9e62:	09 f4       	brne	.+2      	; 0x9e66 <dir_next+0x36>
    9e64:	f8 c0       	rjmp	.+496    	; 0xa056 <dir_next+0x226>
    9e66:	c6 84       	ldd	r12, Z+14	; 0x0e
    9e68:	d7 84       	ldd	r13, Z+15	; 0x0f
    9e6a:	e0 88       	ldd	r14, Z+16	; 0x10
    9e6c:	f1 88       	ldd	r15, Z+17	; 0x11
    9e6e:	f0 e2       	ldi	r31, 0x20	; 32
    9e70:	cf 0e       	add	r12, r31
    9e72:	d1 1c       	adc	r13, r1
    9e74:	e1 1c       	adc	r14, r1
    9e76:	f1 1c       	adc	r15, r1
    9e78:	c1 14       	cp	r12, r1
    9e7a:	d1 04       	cpc	r13, r1
    9e7c:	20 e2       	ldi	r18, 0x20	; 32
    9e7e:	e2 06       	cpc	r14, r18
    9e80:	f1 04       	cpc	r15, r1
    9e82:	08 f0       	brcs	.+2      	; 0x9e86 <dir_next+0x56>
    9e84:	e8 c0       	rjmp	.+464    	; 0xa056 <dir_next+0x226>
    9e86:	8c 01       	movw	r16, r24
    9e88:	fc 01       	movw	r30, r24
    9e8a:	c0 81       	ld	r28, Z
    9e8c:	d1 81       	ldd	r29, Z+1	; 0x01
    9e8e:	d7 01       	movw	r26, r14
    9e90:	c6 01       	movw	r24, r12
    9e92:	91 70       	andi	r25, 0x01	; 1
    9e94:	aa 27       	eor	r26, r26
    9e96:	bb 27       	eor	r27, r27
    9e98:	89 2b       	or	r24, r25
    9e9a:	8a 2b       	or	r24, r26
    9e9c:	8b 2b       	or	r24, r27
    9e9e:	09 f0       	breq	.+2      	; 0x9ea2 <dir_next+0x72>
    9ea0:	ca c0       	rjmp	.+404    	; 0xa036 <dir_next+0x206>
    9ea2:	4f 5f       	subi	r20, 0xFF	; 255
    9ea4:	5f 4f       	sbci	r21, 0xFF	; 255
    9ea6:	6f 4f       	sbci	r22, 0xFF	; 255
    9ea8:	7f 4f       	sbci	r23, 0xFF	; 255
    9eaa:	46 8b       	std	Z+22, r20	; 0x16
    9eac:	57 8b       	std	Z+23, r21	; 0x17
    9eae:	60 8f       	std	Z+24, r22	; 0x18
    9eb0:	71 8f       	std	Z+25, r23	; 0x19
    9eb2:	42 89       	ldd	r20, Z+18	; 0x12
    9eb4:	53 89       	ldd	r21, Z+19	; 0x13
    9eb6:	64 89       	ldd	r22, Z+20	; 0x14
    9eb8:	75 89       	ldd	r23, Z+21	; 0x15
    9eba:	41 15       	cp	r20, r1
    9ebc:	51 05       	cpc	r21, r1
    9ebe:	61 05       	cpc	r22, r1
    9ec0:	71 05       	cpc	r23, r1
    9ec2:	c9 f4       	brne	.+50     	; 0x9ef6 <dir_next+0xc6>
    9ec4:	8f 81       	ldd	r24, Y+7	; 0x07
    9ec6:	98 85       	ldd	r25, Y+8	; 0x08
    9ec8:	a0 e0       	ldi	r26, 0x00	; 0
    9eca:	b0 e0       	ldi	r27, 0x00	; 0
    9ecc:	b7 01       	movw	r22, r14
    9ece:	a6 01       	movw	r20, r12
    9ed0:	35 e0       	ldi	r19, 0x05	; 5
    9ed2:	76 95       	lsr	r23
    9ed4:	67 95       	ror	r22
    9ed6:	57 95       	ror	r21
    9ed8:	47 95       	ror	r20
    9eda:	3a 95       	dec	r19
    9edc:	d1 f7       	brne	.-12     	; 0x9ed2 <dir_next+0xa2>
    9ede:	48 17       	cp	r20, r24
    9ee0:	59 07       	cpc	r21, r25
    9ee2:	6a 07       	cpc	r22, r26
    9ee4:	7b 07       	cpc	r23, r27
    9ee6:	08 f4       	brcc	.+2      	; 0x9eea <dir_next+0xba>
    9ee8:	a6 c0       	rjmp	.+332    	; 0xa036 <dir_next+0x206>
    9eea:	f8 01       	movw	r30, r16
    9eec:	16 8a       	std	Z+22, r1	; 0x16
    9eee:	17 8a       	std	Z+23, r1	; 0x17
    9ef0:	10 8e       	std	Z+24, r1	; 0x18
    9ef2:	11 8e       	std	Z+25, r1	; 0x19
    9ef4:	b0 c0       	rjmp	.+352    	; 0xa056 <dir_next+0x226>
    9ef6:	89 85       	ldd	r24, Y+9	; 0x09
    9ef8:	9a 85       	ldd	r25, Y+10	; 0x0a
    9efa:	01 97       	sbiw	r24, 0x01	; 1
    9efc:	a0 e0       	ldi	r26, 0x00	; 0
    9efe:	b0 e0       	ldi	r27, 0x00	; 0
    9f00:	26 01       	movw	r4, r12
    9f02:	37 01       	movw	r6, r14
    9f04:	29 e0       	ldi	r18, 0x09	; 9
    9f06:	76 94       	lsr	r7
    9f08:	67 94       	ror	r6
    9f0a:	57 94       	ror	r5
    9f0c:	47 94       	ror	r4
    9f0e:	2a 95       	dec	r18
    9f10:	d1 f7       	brne	.-12     	; 0x9f06 <dir_next+0xd6>
    9f12:	84 21       	and	r24, r4
    9f14:	95 21       	and	r25, r5
    9f16:	a6 21       	and	r26, r6
    9f18:	b7 21       	and	r27, r7
    9f1a:	89 2b       	or	r24, r25
    9f1c:	8a 2b       	or	r24, r26
    9f1e:	8b 2b       	or	r24, r27
    9f20:	09 f0       	breq	.+2      	; 0x9f24 <dir_next+0xf4>
    9f22:	89 c0       	rjmp	.+274    	; 0xa036 <dir_next+0x206>
    9f24:	ce 01       	movw	r24, r28
    9f26:	d7 db       	rcall	.-2130   	; 0x96d6 <get_fat.isra.7>
    9f28:	2b 01       	movw	r4, r22
    9f2a:	3c 01       	movw	r6, r24
    9f2c:	62 30       	cpi	r22, 0x02	; 2
    9f2e:	71 05       	cpc	r23, r1
    9f30:	81 05       	cpc	r24, r1
    9f32:	91 05       	cpc	r25, r1
    9f34:	18 f4       	brcc	.+6      	; 0x9f3c <dir_next+0x10c>
    9f36:	82 e0       	ldi	r24, 0x02	; 2
    9f38:	90 e0       	ldi	r25, 0x00	; 0
    9f3a:	92 c0       	rjmp	.+292    	; 0xa060 <dir_next+0x230>
    9f3c:	6f 3f       	cpi	r22, 0xFF	; 255
    9f3e:	7f 4f       	sbci	r23, 0xFF	; 255
    9f40:	8f 4f       	sbci	r24, 0xFF	; 255
    9f42:	9f 4f       	sbci	r25, 0xFF	; 255
    9f44:	19 f4       	brne	.+6      	; 0x9f4c <dir_next+0x11c>
    9f46:	81 e0       	ldi	r24, 0x01	; 1
    9f48:	90 e0       	ldi	r25, 0x00	; 0
    9f4a:	8a c0       	rjmp	.+276    	; 0xa060 <dir_next+0x230>
    9f4c:	89 8d       	ldd	r24, Y+25	; 0x19
    9f4e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    9f50:	ab 8d       	ldd	r26, Y+27	; 0x1b
    9f52:	bc 8d       	ldd	r27, Y+28	; 0x1c
    9f54:	48 16       	cp	r4, r24
    9f56:	59 06       	cpc	r5, r25
    9f58:	6a 06       	cpc	r6, r26
    9f5a:	7b 06       	cpc	r7, r27
    9f5c:	08 f4       	brcc	.+2      	; 0x9f60 <dir_next+0x130>
    9f5e:	5c c0       	rjmp	.+184    	; 0xa018 <dir_next+0x1e8>
    9f60:	ab 28       	or	r10, r11
    9f62:	19 f2       	breq	.-122    	; 0x9eea <dir_next+0xba>
    9f64:	f8 01       	movw	r30, r16
    9f66:	42 89       	ldd	r20, Z+18	; 0x12
    9f68:	53 89       	ldd	r21, Z+19	; 0x13
    9f6a:	64 89       	ldd	r22, Z+20	; 0x14
    9f6c:	75 89       	ldd	r23, Z+21	; 0x15
    9f6e:	c8 01       	movw	r24, r16
    9f70:	25 dd       	rcall	.-1462   	; 0x99bc <create_chain>
    9f72:	2b 01       	movw	r4, r22
    9f74:	3c 01       	movw	r6, r24
    9f76:	61 15       	cp	r22, r1
    9f78:	71 05       	cpc	r23, r1
    9f7a:	81 05       	cpc	r24, r1
    9f7c:	91 05       	cpc	r25, r1
    9f7e:	09 f4       	brne	.+2      	; 0x9f82 <dir_next+0x152>
    9f80:	6d c0       	rjmp	.+218    	; 0xa05c <dir_next+0x22c>
    9f82:	61 30       	cpi	r22, 0x01	; 1
    9f84:	71 05       	cpc	r23, r1
    9f86:	81 05       	cpc	r24, r1
    9f88:	91 05       	cpc	r25, r1
    9f8a:	a9 f2       	breq	.-86     	; 0x9f36 <dir_next+0x106>
    9f8c:	6f 3f       	cpi	r22, 0xFF	; 255
    9f8e:	7f 4f       	sbci	r23, 0xFF	; 255
    9f90:	8f 4f       	sbci	r24, 0xFF	; 255
    9f92:	9f 4f       	sbci	r25, 0xFF	; 255
    9f94:	c1 f2       	breq	.-80     	; 0x9f46 <dir_next+0x116>
    9f96:	ce 01       	movw	r24, r28
    9f98:	0e 94 d0 46 	call	0x8da0	; 0x8da0 <sync_window>
    9f9c:	89 2b       	or	r24, r25
    9f9e:	99 f6       	brne	.-90     	; 0x9f46 <dir_next+0x116>
    9fa0:	40 e0       	ldi	r20, 0x00	; 0
    9fa2:	52 e0       	ldi	r21, 0x02	; 2
    9fa4:	60 e0       	ldi	r22, 0x00	; 0
    9fa6:	70 e0       	ldi	r23, 0x00	; 0
    9fa8:	ce 01       	movw	r24, r28
    9faa:	c5 96       	adiw	r24, 0x35	; 53
    9fac:	0e 94 89 45 	call	0x8b12	; 0x8b12 <mem_set>
    9fb0:	b3 01       	movw	r22, r6
    9fb2:	a2 01       	movw	r20, r4
    9fb4:	ce 01       	movw	r24, r28
    9fb6:	0e 94 92 45 	call	0x8b24	; 0x8b24 <clust2sect>
    9fba:	69 ab       	std	Y+49, r22	; 0x31
    9fbc:	7a ab       	std	Y+50, r23	; 0x32
    9fbe:	8b ab       	std	Y+51, r24	; 0x33
    9fc0:	9c ab       	std	Y+52, r25	; 0x34
    9fc2:	a1 2c       	mov	r10, r1
    9fc4:	b1 2c       	mov	r11, r1
    9fc6:	99 24       	eor	r9, r9
    9fc8:	93 94       	inc	r9
    9fca:	89 85       	ldd	r24, Y+9	; 0x09
    9fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    9fce:	a8 16       	cp	r10, r24
    9fd0:	b9 06       	cpc	r11, r25
    9fd2:	b0 f4       	brcc	.+44     	; 0xa000 <dir_next+0x1d0>
    9fd4:	9b 82       	std	Y+3, r9	; 0x03
    9fd6:	ce 01       	movw	r24, r28
    9fd8:	0e 94 7f 46 	call	0x8cfe	; 0x8cfe <sync_window.part.3>
    9fdc:	89 2b       	or	r24, r25
    9fde:	09 f0       	breq	.+2      	; 0x9fe2 <dir_next+0x1b2>
    9fe0:	b2 cf       	rjmp	.-156    	; 0x9f46 <dir_next+0x116>
    9fe2:	8f ef       	ldi	r24, 0xFF	; 255
    9fe4:	a8 1a       	sub	r10, r24
    9fe6:	b8 0a       	sbc	r11, r24
    9fe8:	89 a9       	ldd	r24, Y+49	; 0x31
    9fea:	9a a9       	ldd	r25, Y+50	; 0x32
    9fec:	ab a9       	ldd	r26, Y+51	; 0x33
    9fee:	bc a9       	ldd	r27, Y+52	; 0x34
    9ff0:	01 96       	adiw	r24, 0x01	; 1
    9ff2:	a1 1d       	adc	r26, r1
    9ff4:	b1 1d       	adc	r27, r1
    9ff6:	89 ab       	std	Y+49, r24	; 0x31
    9ff8:	9a ab       	std	Y+50, r25	; 0x32
    9ffa:	ab ab       	std	Y+51, r26	; 0x33
    9ffc:	bc ab       	std	Y+52, r27	; 0x34
    9ffe:	e5 cf       	rjmp	.-54     	; 0x9fca <dir_next+0x19a>
    a000:	89 a9       	ldd	r24, Y+49	; 0x31
    a002:	9a a9       	ldd	r25, Y+50	; 0x32
    a004:	ab a9       	ldd	r26, Y+51	; 0x33
    a006:	bc a9       	ldd	r27, Y+52	; 0x34
    a008:	8a 19       	sub	r24, r10
    a00a:	9b 09       	sbc	r25, r11
    a00c:	a1 09       	sbc	r26, r1
    a00e:	b1 09       	sbc	r27, r1
    a010:	89 ab       	std	Y+49, r24	; 0x31
    a012:	9a ab       	std	Y+50, r25	; 0x32
    a014:	ab ab       	std	Y+51, r26	; 0x33
    a016:	bc ab       	std	Y+52, r27	; 0x34
    a018:	f8 01       	movw	r30, r16
    a01a:	42 8a       	std	Z+18, r4	; 0x12
    a01c:	53 8a       	std	Z+19, r5	; 0x13
    a01e:	64 8a       	std	Z+20, r6	; 0x14
    a020:	75 8a       	std	Z+21, r7	; 0x15
    a022:	b3 01       	movw	r22, r6
    a024:	a2 01       	movw	r20, r4
    a026:	ce 01       	movw	r24, r28
    a028:	0e 94 92 45 	call	0x8b24	; 0x8b24 <clust2sect>
    a02c:	f8 01       	movw	r30, r16
    a02e:	66 8b       	std	Z+22, r22	; 0x16
    a030:	77 8b       	std	Z+23, r23	; 0x17
    a032:	80 8f       	std	Z+24, r24	; 0x18
    a034:	91 8f       	std	Z+25, r25	; 0x19
    a036:	f8 01       	movw	r30, r16
    a038:	c6 86       	std	Z+14, r12	; 0x0e
    a03a:	d7 86       	std	Z+15, r13	; 0x0f
    a03c:	e0 8a       	std	Z+16, r14	; 0x10
    a03e:	f1 8a       	std	Z+17, r15	; 0x11
    a040:	ce 01       	movw	r24, r28
    a042:	c5 96       	adiw	r24, 0x35	; 53
    a044:	e6 01       	movw	r28, r12
    a046:	d1 70       	andi	r29, 0x01	; 1
    a048:	c8 0f       	add	r28, r24
    a04a:	d9 1f       	adc	r29, r25
    a04c:	d3 8f       	std	Z+27, r29	; 0x1b
    a04e:	c2 8f       	std	Z+26, r28	; 0x1a
    a050:	80 e0       	ldi	r24, 0x00	; 0
    a052:	90 e0       	ldi	r25, 0x00	; 0
    a054:	05 c0       	rjmp	.+10     	; 0xa060 <dir_next+0x230>
    a056:	84 e0       	ldi	r24, 0x04	; 4
    a058:	90 e0       	ldi	r25, 0x00	; 0
    a05a:	02 c0       	rjmp	.+4      	; 0xa060 <dir_next+0x230>
    a05c:	87 e0       	ldi	r24, 0x07	; 7
    a05e:	90 e0       	ldi	r25, 0x00	; 0
    a060:	df 91       	pop	r29
    a062:	cf 91       	pop	r28
    a064:	1f 91       	pop	r17
    a066:	0f 91       	pop	r16
    a068:	ff 90       	pop	r15
    a06a:	ef 90       	pop	r14
    a06c:	df 90       	pop	r13
    a06e:	cf 90       	pop	r12
    a070:	bf 90       	pop	r11
    a072:	af 90       	pop	r10
    a074:	9f 90       	pop	r9
    a076:	7f 90       	pop	r7
    a078:	6f 90       	pop	r6
    a07a:	5f 90       	pop	r5
    a07c:	4f 90       	pop	r4
    a07e:	08 95       	ret

0000a080 <dir_alloc>:
    a080:	a0 e0       	ldi	r26, 0x00	; 0
    a082:	b0 e0       	ldi	r27, 0x00	; 0
    a084:	e6 e4       	ldi	r30, 0x46	; 70
    a086:	f0 e5       	ldi	r31, 0x50	; 80
    a088:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__prologue_saves__+0x14>
    a08c:	ec 01       	movw	r28, r24
    a08e:	6b 01       	movw	r12, r22
    a090:	e8 80       	ld	r14, Y
    a092:	f9 80       	ldd	r15, Y+1	; 0x01
    a094:	40 e0       	ldi	r20, 0x00	; 0
    a096:	50 e0       	ldi	r21, 0x00	; 0
    a098:	ba 01       	movw	r22, r20
    a09a:	d0 db       	rcall	.-2144   	; 0x983c <dir_sdi>
    a09c:	00 97       	sbiw	r24, 0x00	; 0
    a09e:	01 f5       	brne	.+64     	; 0xa0e0 <dir_alloc+0x60>
    a0a0:	00 e0       	ldi	r16, 0x00	; 0
    a0a2:	10 e0       	ldi	r17, 0x00	; 0
    a0a4:	4e 89       	ldd	r20, Y+22	; 0x16
    a0a6:	5f 89       	ldd	r21, Y+23	; 0x17
    a0a8:	68 8d       	ldd	r22, Y+24	; 0x18
    a0aa:	79 8d       	ldd	r23, Y+25	; 0x19
    a0ac:	c7 01       	movw	r24, r14
    a0ae:	0e 94 45 47 	call	0x8e8a	; 0x8e8a <move_window>
    a0b2:	00 97       	sbiw	r24, 0x00	; 0
    a0b4:	a9 f4       	brne	.+42     	; 0xa0e0 <dir_alloc+0x60>
    a0b6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a0b8:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a0ba:	20 81       	ld	r18, Z
    a0bc:	25 3e       	cpi	r18, 0xE5	; 229
    a0be:	11 f0       	breq	.+4      	; 0xa0c4 <dir_alloc+0x44>
    a0c0:	21 11       	cpse	r18, r1
    a0c2:	06 c0       	rjmp	.+12     	; 0xa0d0 <dir_alloc+0x50>
    a0c4:	0f 5f       	subi	r16, 0xFF	; 255
    a0c6:	1f 4f       	sbci	r17, 0xFF	; 255
    a0c8:	0c 15       	cp	r16, r12
    a0ca:	1d 05       	cpc	r17, r13
    a0cc:	19 f4       	brne	.+6      	; 0xa0d4 <dir_alloc+0x54>
    a0ce:	0d c0       	rjmp	.+26     	; 0xa0ea <dir_alloc+0x6a>
    a0d0:	00 e0       	ldi	r16, 0x00	; 0
    a0d2:	10 e0       	ldi	r17, 0x00	; 0
    a0d4:	61 e0       	ldi	r22, 0x01	; 1
    a0d6:	70 e0       	ldi	r23, 0x00	; 0
    a0d8:	ce 01       	movw	r24, r28
    a0da:	aa de       	rcall	.-684    	; 0x9e30 <dir_next>
    a0dc:	00 97       	sbiw	r24, 0x00	; 0
    a0de:	11 f3       	breq	.-60     	; 0xa0a4 <dir_alloc+0x24>
    a0e0:	84 30       	cpi	r24, 0x04	; 4
    a0e2:	91 05       	cpc	r25, r1
    a0e4:	11 f4       	brne	.+4      	; 0xa0ea <dir_alloc+0x6a>
    a0e6:	87 e0       	ldi	r24, 0x07	; 7
    a0e8:	90 e0       	ldi	r25, 0x00	; 0
    a0ea:	cd b7       	in	r28, 0x3d	; 61
    a0ec:	de b7       	in	r29, 0x3e	; 62
    a0ee:	e8 e0       	ldi	r30, 0x08	; 8
    a0f0:	0c 94 e7 e8 	jmp	0x1d1ce	; 0x1d1ce <__epilogue_restores__+0x14>

0000a0f4 <dir_read>:
    a0f4:	a0 e0       	ldi	r26, 0x00	; 0
    a0f6:	b0 e0       	ldi	r27, 0x00	; 0
    a0f8:	e0 e8       	ldi	r30, 0x80	; 128
    a0fa:	f0 e5       	ldi	r31, 0x50	; 80
    a0fc:	0c 94 c5 e8 	jmp	0x1d18a	; 0x1d18a <__prologue_saves__+0x8>
    a100:	ec 01       	movw	r28, r24
    a102:	7b 01       	movw	r14, r22
    a104:	a8 80       	ld	r10, Y
    a106:	b9 80       	ldd	r11, Y+1	; 0x01
    a108:	dd 24       	eor	r13, r13
    a10a:	da 94       	dec	r13
    a10c:	1f ef       	ldi	r17, 0xFF	; 255
    a10e:	84 e0       	ldi	r24, 0x04	; 4
    a110:	90 e0       	ldi	r25, 0x00	; 0
    a112:	ad e0       	ldi	r26, 0x0D	; 13
    a114:	ca 2e       	mov	r12, r26
    a116:	4e 89       	ldd	r20, Y+22	; 0x16
    a118:	5f 89       	ldd	r21, Y+23	; 0x17
    a11a:	68 8d       	ldd	r22, Y+24	; 0x18
    a11c:	79 8d       	ldd	r23, Y+25	; 0x19
    a11e:	41 15       	cp	r20, r1
    a120:	51 05       	cpc	r21, r1
    a122:	61 05       	cpc	r22, r1
    a124:	71 05       	cpc	r23, r1
    a126:	09 f4       	brne	.+2      	; 0xa12a <dir_read+0x36>
    a128:	9f c0       	rjmp	.+318    	; 0xa268 <dir_read+0x174>
    a12a:	c5 01       	movw	r24, r10
    a12c:	0e 94 45 47 	call	0x8e8a	; 0x8e8a <move_window>
    a130:	00 97       	sbiw	r24, 0x00	; 0
    a132:	09 f0       	breq	.+2      	; 0xa136 <dir_read+0x42>
    a134:	9b c0       	rjmp	.+310    	; 0xa26c <dir_read+0x178>
    a136:	aa 8d       	ldd	r26, Y+26	; 0x1a
    a138:	bb 8d       	ldd	r27, Y+27	; 0x1b
    a13a:	0c 91       	ld	r16, X
    a13c:	00 23       	and	r16, r16
    a13e:	09 f4       	brne	.+2      	; 0xa142 <dir_read+0x4e>
    a140:	9d c0       	rjmp	.+314    	; 0xa27c <dir_read+0x188>
    a142:	1b 96       	adiw	r26, 0x0b	; 11
    a144:	8c 91       	ld	r24, X
    a146:	1b 97       	sbiw	r26, 0x0b	; 11
    a148:	8f 73       	andi	r24, 0x3F	; 63
    a14a:	8c 83       	std	Y+4, r24	; 0x04
    a14c:	05 3e       	cpi	r16, 0xE5	; 229
    a14e:	09 f4       	brne	.+2      	; 0xa152 <dir_read+0x5e>
    a150:	82 c0       	rjmp	.+260    	; 0xa256 <dir_read+0x162>
    a152:	0e 32       	cpi	r16, 0x2E	; 46
    a154:	09 f4       	brne	.+2      	; 0xa158 <dir_read+0x64>
    a156:	7f c0       	rjmp	.+254    	; 0xa256 <dir_read+0x162>
    a158:	21 e0       	ldi	r18, 0x01	; 1
    a15a:	30 e0       	ldi	r19, 0x00	; 0
    a15c:	98 2f       	mov	r25, r24
    a15e:	9f 71       	andi	r25, 0x1F	; 31
    a160:	98 30       	cpi	r25, 0x08	; 8
    a162:	11 f0       	breq	.+4      	; 0xa168 <dir_read+0x74>
    a164:	20 e0       	ldi	r18, 0x00	; 0
    a166:	30 e0       	ldi	r19, 0x00	; 0
    a168:	2e 15       	cp	r18, r14
    a16a:	3f 05       	cpc	r19, r15
    a16c:	09 f0       	breq	.+2      	; 0xa170 <dir_read+0x7c>
    a16e:	73 c0       	rjmp	.+230    	; 0xa256 <dir_read+0x162>
    a170:	8f 30       	cpi	r24, 0x0F	; 15
    a172:	09 f0       	breq	.+2      	; 0xa176 <dir_read+0x82>
    a174:	60 c0       	rjmp	.+192    	; 0xa236 <dir_read+0x142>
    a176:	06 ff       	sbrs	r16, 6
    a178:	0d c0       	rjmp	.+26     	; 0xa194 <dir_read+0xa0>
    a17a:	1d 96       	adiw	r26, 0x0d	; 13
    a17c:	8c 91       	ld	r24, X
    a17e:	1d 97       	sbiw	r26, 0x0d	; 13
    a180:	0f 7b       	andi	r16, 0xBF	; 191
    a182:	4e 85       	ldd	r20, Y+14	; 0x0e
    a184:	5f 85       	ldd	r21, Y+15	; 0x0f
    a186:	68 89       	ldd	r22, Y+16	; 0x10
    a188:	79 89       	ldd	r23, Y+17	; 0x11
    a18a:	48 a7       	std	Y+40, r20	; 0x28
    a18c:	59 a7       	std	Y+41, r21	; 0x29
    a18e:	6a a7       	std	Y+42, r22	; 0x2a
    a190:	7b a7       	std	Y+43, r23	; 0x2b
    a192:	03 c0       	rjmp	.+6      	; 0xa19a <dir_read+0xa6>
    a194:	10 13       	cpse	r17, r16
    a196:	5f c0       	rjmp	.+190    	; 0xa256 <dir_read+0x162>
    a198:	8d 2d       	mov	r24, r13
    a19a:	1d 96       	adiw	r26, 0x0d	; 13
    a19c:	dc 90       	ld	r13, X
    a19e:	1d 97       	sbiw	r26, 0x0d	; 13
    a1a0:	d8 12       	cpse	r13, r24
    a1a2:	58 c0       	rjmp	.+176    	; 0xa254 <dir_read+0x160>
    a1a4:	5a 96       	adiw	r26, 0x1a	; 26
    a1a6:	8d 91       	ld	r24, X+
    a1a8:	9c 91       	ld	r25, X
    a1aa:	5b 97       	sbiw	r26, 0x1b	; 27
    a1ac:	89 2b       	or	r24, r25
    a1ae:	09 f0       	breq	.+2      	; 0xa1b2 <dir_read+0xbe>
    a1b0:	52 c0       	rjmp	.+164    	; 0xa256 <dir_read+0x162>
    a1b2:	f5 01       	movw	r30, r10
    a1b4:	63 85       	ldd	r22, Z+11	; 0x0b
    a1b6:	74 85       	ldd	r23, Z+12	; 0x0c
    a1b8:	8c 91       	ld	r24, X
    a1ba:	8f 73       	andi	r24, 0x3F	; 63
    a1bc:	90 e0       	ldi	r25, 0x00	; 0
    a1be:	01 97       	sbiw	r24, 0x01	; 1
    a1c0:	c8 9e       	mul	r12, r24
    a1c2:	90 01       	movw	r18, r0
    a1c4:	c9 9e       	mul	r12, r25
    a1c6:	30 0d       	add	r19, r0
    a1c8:	11 24       	eor	r1, r1
    a1ca:	fc ea       	ldi	r31, 0xAC	; 172
    a1cc:	6f 2e       	mov	r6, r31
    a1ce:	f2 e0       	ldi	r31, 0x02	; 2
    a1d0:	7f 2e       	mov	r7, r31
    a1d2:	41 e0       	ldi	r20, 0x01	; 1
    a1d4:	50 e0       	ldi	r21, 0x00	; 0
    a1d6:	f3 01       	movw	r30, r6
    a1d8:	81 91       	ld	r24, Z+
    a1da:	3f 01       	movw	r6, r30
    a1dc:	4d 01       	movw	r8, r26
    a1de:	88 0e       	add	r8, r24
    a1e0:	91 1c       	adc	r9, r1
    a1e2:	f4 01       	movw	r30, r8
    a1e4:	80 81       	ld	r24, Z
    a1e6:	91 81       	ldd	r25, Z+1	; 0x01
    a1e8:	41 15       	cp	r20, r1
    a1ea:	51 05       	cpc	r21, r1
    a1ec:	79 f0       	breq	.+30     	; 0xa20c <dir_read+0x118>
    a1ee:	2f 3f       	cpi	r18, 0xFF	; 255
    a1f0:	31 05       	cpc	r19, r1
    a1f2:	88 f5       	brcc	.+98     	; 0xa256 <dir_read+0x162>
    a1f4:	a9 01       	movw	r20, r18
    a1f6:	44 0f       	add	r20, r20
    a1f8:	55 1f       	adc	r21, r21
    a1fa:	46 0f       	add	r20, r22
    a1fc:	57 1f       	adc	r21, r23
    a1fe:	fa 01       	movw	r30, r20
    a200:	91 83       	std	Z+1, r25	; 0x01
    a202:	80 83       	st	Z, r24
    a204:	ac 01       	movw	r20, r24
    a206:	2f 5f       	subi	r18, 0xFF	; 255
    a208:	3f 4f       	sbci	r19, 0xFF	; 255
    a20a:	02 c0       	rjmp	.+4      	; 0xa210 <dir_read+0x11c>
    a20c:	01 96       	adiw	r24, 0x01	; 1
    a20e:	19 f5       	brne	.+70     	; 0xa256 <dir_read+0x162>
    a210:	89 eb       	ldi	r24, 0xB9	; 185
    a212:	68 16       	cp	r6, r24
    a214:	82 e0       	ldi	r24, 0x02	; 2
    a216:	78 06       	cpc	r7, r24
    a218:	f1 f6       	brne	.-68     	; 0xa1d6 <dir_read+0xe2>
    a21a:	8c 91       	ld	r24, X
    a21c:	86 ff       	sbrs	r24, 6
    a21e:	2b c0       	rjmp	.+86     	; 0xa276 <dir_read+0x182>
    a220:	2f 3f       	cpi	r18, 0xFF	; 255
    a222:	31 05       	cpc	r19, r1
    a224:	c0 f4       	brcc	.+48     	; 0xa256 <dir_read+0x162>
    a226:	22 0f       	add	r18, r18
    a228:	33 1f       	adc	r19, r19
    a22a:	fb 01       	movw	r30, r22
    a22c:	e2 0f       	add	r30, r18
    a22e:	f3 1f       	adc	r31, r19
    a230:	11 82       	std	Z+1, r1	; 0x01
    a232:	10 82       	st	Z, r1
    a234:	20 c0       	rjmp	.+64     	; 0xa276 <dir_read+0x182>
    a236:	11 11       	cpse	r17, r1
    a238:	05 c0       	rjmp	.+10     	; 0xa244 <dir_read+0x150>
    a23a:	cd 01       	movw	r24, r26
    a23c:	0e 94 f6 45 	call	0x8bec	; 0x8bec <sum_sfn>
    a240:	d8 16       	cp	r13, r24
    a242:	f9 f0       	breq	.+62     	; 0xa282 <dir_read+0x18e>
    a244:	8f ef       	ldi	r24, 0xFF	; 255
    a246:	9f ef       	ldi	r25, 0xFF	; 255
    a248:	dc 01       	movw	r26, r24
    a24a:	88 a7       	std	Y+40, r24	; 0x28
    a24c:	99 a7       	std	Y+41, r25	; 0x29
    a24e:	aa a7       	std	Y+42, r26	; 0x2a
    a250:	bb a7       	std	Y+43, r27	; 0x2b
    a252:	17 c0       	rjmp	.+46     	; 0xa282 <dir_read+0x18e>
    a254:	d8 2e       	mov	r13, r24
    a256:	1f ef       	ldi	r17, 0xFF	; 255
    a258:	60 e0       	ldi	r22, 0x00	; 0
    a25a:	70 e0       	ldi	r23, 0x00	; 0
    a25c:	ce 01       	movw	r24, r28
    a25e:	e8 dd       	rcall	.-1072   	; 0x9e30 <dir_next>
    a260:	00 97       	sbiw	r24, 0x00	; 0
    a262:	09 f4       	brne	.+2      	; 0xa266 <dir_read+0x172>
    a264:	58 cf       	rjmp	.-336    	; 0xa116 <dir_read+0x22>
    a266:	02 c0       	rjmp	.+4      	; 0xa26c <dir_read+0x178>
    a268:	00 97       	sbiw	r24, 0x00	; 0
    a26a:	59 f0       	breq	.+22     	; 0xa282 <dir_read+0x18e>
    a26c:	1e 8a       	std	Y+22, r1	; 0x16
    a26e:	1f 8a       	std	Y+23, r1	; 0x17
    a270:	18 8e       	std	Y+24, r1	; 0x18
    a272:	19 8e       	std	Y+25, r1	; 0x19
    a274:	08 c0       	rjmp	.+16     	; 0xa286 <dir_read+0x192>
    a276:	1f ef       	ldi	r17, 0xFF	; 255
    a278:	10 0f       	add	r17, r16
    a27a:	ee cf       	rjmp	.-36     	; 0xa258 <dir_read+0x164>
    a27c:	84 e0       	ldi	r24, 0x04	; 4
    a27e:	90 e0       	ldi	r25, 0x00	; 0
    a280:	f5 cf       	rjmp	.-22     	; 0xa26c <dir_read+0x178>
    a282:	80 e0       	ldi	r24, 0x00	; 0
    a284:	90 e0       	ldi	r25, 0x00	; 0
    a286:	cd b7       	in	r28, 0x3d	; 61
    a288:	de b7       	in	r29, 0x3e	; 62
    a28a:	ee e0       	ldi	r30, 0x0E	; 14
    a28c:	0c 94 e1 e8 	jmp	0x1d1c2	; 0x1d1c2 <__epilogue_restores__+0x8>

0000a290 <dir_remove>:
    a290:	a0 e0       	ldi	r26, 0x00	; 0
    a292:	b0 e0       	ldi	r27, 0x00	; 0
    a294:	ee e4       	ldi	r30, 0x4E	; 78
    a296:	f1 e5       	ldi	r31, 0x51	; 81
    a298:	0c 94 c9 e8 	jmp	0x1d192	; 0x1d192 <__prologue_saves__+0x10>
    a29c:	ec 01       	movw	r28, r24
    a29e:	08 81       	ld	r16, Y
    a2a0:	19 81       	ldd	r17, Y+1	; 0x01
    a2a2:	ce 84       	ldd	r12, Y+14	; 0x0e
    a2a4:	df 84       	ldd	r13, Y+15	; 0x0f
    a2a6:	e8 88       	ldd	r14, Y+16	; 0x10
    a2a8:	f9 88       	ldd	r15, Y+17	; 0x11
    a2aa:	48 a5       	ldd	r20, Y+40	; 0x28
    a2ac:	59 a5       	ldd	r21, Y+41	; 0x29
    a2ae:	6a a5       	ldd	r22, Y+42	; 0x2a
    a2b0:	7b a5       	ldd	r23, Y+43	; 0x2b
    a2b2:	4f 3f       	cpi	r20, 0xFF	; 255
    a2b4:	8f ef       	ldi	r24, 0xFF	; 255
    a2b6:	58 07       	cpc	r21, r24
    a2b8:	68 07       	cpc	r22, r24
    a2ba:	78 07       	cpc	r23, r24
    a2bc:	29 f4       	brne	.+10     	; 0xa2c8 <dir_remove+0x38>
    a2be:	85 ee       	ldi	r24, 0xE5	; 229
    a2c0:	b8 2e       	mov	r11, r24
    a2c2:	aa 24       	eor	r10, r10
    a2c4:	a3 94       	inc	r10
    a2c6:	19 c0       	rjmp	.+50     	; 0xa2fa <dir_remove+0x6a>
    a2c8:	ce 01       	movw	r24, r28
    a2ca:	b8 da       	rcall	.-2704   	; 0x983c <dir_sdi>
    a2cc:	00 97       	sbiw	r24, 0x00	; 0
    a2ce:	19 f5       	brne	.+70     	; 0xa316 <dir_remove+0x86>
    a2d0:	f6 cf       	rjmp	.-20     	; 0xa2be <dir_remove+0x2e>
    a2d2:	ea 8d       	ldd	r30, Y+26	; 0x1a
    a2d4:	fb 8d       	ldd	r31, Y+27	; 0x1b
    a2d6:	b0 82       	st	Z, r11
    a2d8:	f8 01       	movw	r30, r16
    a2da:	a3 82       	std	Z+3, r10	; 0x03
    a2dc:	4e 85       	ldd	r20, Y+14	; 0x0e
    a2de:	5f 85       	ldd	r21, Y+15	; 0x0f
    a2e0:	68 89       	ldd	r22, Y+16	; 0x10
    a2e2:	79 89       	ldd	r23, Y+17	; 0x11
    a2e4:	4c 15       	cp	r20, r12
    a2e6:	5d 05       	cpc	r21, r13
    a2e8:	6e 05       	cpc	r22, r14
    a2ea:	7f 05       	cpc	r23, r15
    a2ec:	a0 f4       	brcc	.+40     	; 0xa316 <dir_remove+0x86>
    a2ee:	60 e0       	ldi	r22, 0x00	; 0
    a2f0:	70 e0       	ldi	r23, 0x00	; 0
    a2f2:	ce 01       	movw	r24, r28
    a2f4:	9d dd       	rcall	.-1222   	; 0x9e30 <dir_next>
    a2f6:	00 97       	sbiw	r24, 0x00	; 0
    a2f8:	49 f4       	brne	.+18     	; 0xa30c <dir_remove+0x7c>
    a2fa:	4e 89       	ldd	r20, Y+22	; 0x16
    a2fc:	5f 89       	ldd	r21, Y+23	; 0x17
    a2fe:	68 8d       	ldd	r22, Y+24	; 0x18
    a300:	79 8d       	ldd	r23, Y+25	; 0x19
    a302:	c8 01       	movw	r24, r16
    a304:	0e 94 45 47 	call	0x8e8a	; 0x8e8a <move_window>
    a308:	00 97       	sbiw	r24, 0x00	; 0
    a30a:	19 f3       	breq	.-58     	; 0xa2d2 <dir_remove+0x42>
    a30c:	84 30       	cpi	r24, 0x04	; 4
    a30e:	91 05       	cpc	r25, r1
    a310:	11 f4       	brne	.+4      	; 0xa316 <dir_remove+0x86>
    a312:	82 e0       	ldi	r24, 0x02	; 2
    a314:	90 e0       	ldi	r25, 0x00	; 0
    a316:	cd b7       	in	r28, 0x3d	; 61
    a318:	de b7       	in	r29, 0x3e	; 62
    a31a:	ea e0       	ldi	r30, 0x0A	; 10
    a31c:	0c 94 e5 e8 	jmp	0x1d1ca	; 0x1d1ca <__epilogue_restores__+0x10>

0000a320 <dir_find>:
    a320:	a8 e0       	ldi	r26, 0x08	; 8
    a322:	b0 e0       	ldi	r27, 0x00	; 0
    a324:	e6 e9       	ldi	r30, 0x96	; 150
    a326:	f1 e5       	ldi	r31, 0x51	; 81
    a328:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__prologue_saves__>
    a32c:	8c 01       	movw	r16, r24
    a32e:	dc 01       	movw	r26, r24
    a330:	8d 90       	ld	r8, X+
    a332:	9c 90       	ld	r9, X
    a334:	40 e0       	ldi	r20, 0x00	; 0
    a336:	50 e0       	ldi	r21, 0x00	; 0
    a338:	ba 01       	movw	r22, r20
    a33a:	80 da       	rcall	.-2816   	; 0x983c <dir_sdi>
    a33c:	00 97       	sbiw	r24, 0x00	; 0
    a33e:	09 f0       	breq	.+2      	; 0xa342 <dir_find+0x22>
    a340:	f3 c0       	rjmp	.+486    	; 0xa528 <dir_find+0x208>
    a342:	8f ef       	ldi	r24, 0xFF	; 255
    a344:	9f ef       	ldi	r25, 0xFF	; 255
    a346:	dc 01       	movw	r26, r24
    a348:	f8 01       	movw	r30, r16
    a34a:	80 a7       	std	Z+40, r24	; 0x28
    a34c:	91 a7       	std	Z+41, r25	; 0x29
    a34e:	a2 a7       	std	Z+42, r26	; 0x2a
    a350:	b3 a7       	std	Z+43, r27	; 0x2b
    a352:	ee 24       	eor	r14, r14
    a354:	ea 94       	dec	r14
    a356:	ff 24       	eor	r15, r15
    a358:	fa 94       	dec	r15
    a35a:	44 24       	eor	r4, r4
    a35c:	4a 94       	dec	r4
    a35e:	54 2c       	mov	r5, r4
    a360:	32 01       	movw	r6, r4
    a362:	d8 01       	movw	r26, r16
    a364:	56 96       	adiw	r26, 0x16	; 22
    a366:	4d 91       	ld	r20, X+
    a368:	5d 91       	ld	r21, X+
    a36a:	6d 91       	ld	r22, X+
    a36c:	7c 91       	ld	r23, X
    a36e:	59 97       	sbiw	r26, 0x19	; 25
    a370:	c4 01       	movw	r24, r8
    a372:	0e 94 45 47 	call	0x8e8a	; 0x8e8a <move_window>
    a376:	00 97       	sbiw	r24, 0x00	; 0
    a378:	09 f0       	breq	.+2      	; 0xa37c <dir_find+0x5c>
    a37a:	d6 c0       	rjmp	.+428    	; 0xa528 <dir_find+0x208>
    a37c:	f8 01       	movw	r30, r16
    a37e:	02 8c       	ldd	r0, Z+26	; 0x1a
    a380:	f3 8d       	ldd	r31, Z+27	; 0x1b
    a382:	e0 2d       	mov	r30, r0
    a384:	f8 87       	std	Y+8, r31	; 0x08
    a386:	ef 83       	std	Y+7, r30	; 0x07
    a388:	30 80       	ld	r3, Z
    a38a:	33 20       	and	r3, r3
    a38c:	09 f4       	brne	.+2      	; 0xa390 <dir_find+0x70>
    a38e:	ce c0       	rjmp	.+412    	; 0xa52c <dir_find+0x20c>
    a390:	93 85       	ldd	r25, Z+11	; 0x0b
    a392:	89 2f       	mov	r24, r25
    a394:	8f 73       	andi	r24, 0x3F	; 63
    a396:	d8 01       	movw	r26, r16
    a398:	14 96       	adiw	r26, 0x04	; 4
    a39a:	8c 93       	st	X, r24
    a39c:	b5 ee       	ldi	r27, 0xE5	; 229
    a39e:	3b 16       	cp	r3, r27
    a3a0:	09 f4       	brne	.+2      	; 0xa3a4 <dir_find+0x84>
    a3a2:	b4 c0       	rjmp	.+360    	; 0xa50c <dir_find+0x1ec>
    a3a4:	93 ff       	sbrs	r25, 3
    a3a6:	04 c0       	rjmp	.+8      	; 0xa3b0 <dir_find+0x90>
    a3a8:	8f 30       	cpi	r24, 0x0F	; 15
    a3aa:	09 f0       	breq	.+2      	; 0xa3ae <dir_find+0x8e>
    a3ac:	af c0       	rjmp	.+350    	; 0xa50c <dir_find+0x1ec>
    a3ae:	03 c0       	rjmp	.+6      	; 0xa3b6 <dir_find+0x96>
    a3b0:	8f 30       	cpi	r24, 0x0F	; 15
    a3b2:	09 f0       	breq	.+2      	; 0xa3b6 <dir_find+0x96>
    a3b4:	87 c0       	rjmp	.+270    	; 0xa4c4 <dir_find+0x1a4>
    a3b6:	d8 01       	movw	r26, r16
    a3b8:	97 96       	adiw	r26, 0x27	; 39
    a3ba:	8c 91       	ld	r24, X
    a3bc:	97 97       	sbiw	r26, 0x27	; 39
    a3be:	86 fd       	sbrc	r24, 6
    a3c0:	ac c0       	rjmp	.+344    	; 0xa51a <dir_find+0x1fa>
    a3c2:	36 fe       	sbrs	r3, 6
    a3c4:	12 c0       	rjmp	.+36     	; 0xa3ea <dir_find+0xca>
    a3c6:	ef 81       	ldd	r30, Y+7	; 0x07
    a3c8:	f8 85       	ldd	r31, Y+8	; 0x08
    a3ca:	e5 84       	ldd	r14, Z+13	; 0x0d
    a3cc:	f3 2d       	mov	r31, r3
    a3ce:	ff 7b       	andi	r31, 0xBF	; 191
    a3d0:	3f 2e       	mov	r3, r31
    a3d2:	1e 96       	adiw	r26, 0x0e	; 14
    a3d4:	8d 91       	ld	r24, X+
    a3d6:	9d 91       	ld	r25, X+
    a3d8:	0d 90       	ld	r0, X+
    a3da:	bc 91       	ld	r27, X
    a3dc:	a0 2d       	mov	r26, r0
    a3de:	f8 01       	movw	r30, r16
    a3e0:	80 a7       	std	Z+40, r24	; 0x28
    a3e2:	91 a7       	std	Z+41, r25	; 0x29
    a3e4:	a2 a7       	std	Z+42, r26	; 0x2a
    a3e6:	b3 a7       	std	Z+43, r27	; 0x2b
    a3e8:	02 c0       	rjmp	.+4      	; 0xa3ee <dir_find+0xce>
    a3ea:	f3 10       	cpse	r15, r3
    a3ec:	94 c0       	rjmp	.+296    	; 0xa516 <dir_find+0x1f6>
    a3ee:	af 81       	ldd	r26, Y+7	; 0x07
    a3f0:	b8 85       	ldd	r27, Y+8	; 0x08
    a3f2:	1d 96       	adiw	r26, 0x0d	; 13
    a3f4:	2c 90       	ld	r2, X
    a3f6:	1d 97       	sbiw	r26, 0x0d	; 13
    a3f8:	2e 10       	cpse	r2, r14
    a3fa:	8d c0       	rjmp	.+282    	; 0xa516 <dir_find+0x1f6>
    a3fc:	5a 96       	adiw	r26, 0x1a	; 26
    a3fe:	8d 91       	ld	r24, X+
    a400:	9c 91       	ld	r25, X
    a402:	5b 97       	sbiw	r26, 0x1b	; 27
    a404:	89 2b       	or	r24, r25
    a406:	09 f0       	breq	.+2      	; 0xa40a <dir_find+0xea>
    a408:	9b c0       	rjmp	.+310    	; 0xa540 <dir_find+0x220>
    a40a:	f4 01       	movw	r30, r8
    a40c:	c3 84       	ldd	r12, Z+11	; 0x0b
    a40e:	d4 84       	ldd	r13, Z+12	; 0x0c
    a410:	8c 91       	ld	r24, X
    a412:	8f 73       	andi	r24, 0x3F	; 63
    a414:	90 e0       	ldi	r25, 0x00	; 0
    a416:	01 97       	sbiw	r24, 0x01	; 1
    a418:	fd e0       	ldi	r31, 0x0D	; 13
    a41a:	f8 9f       	mul	r31, r24
    a41c:	70 01       	movw	r14, r0
    a41e:	f9 9f       	mul	r31, r25
    a420:	f0 0c       	add	r15, r0
    a422:	11 24       	eor	r1, r1
    a424:	2c ea       	ldi	r18, 0xAC	; 172
    a426:	32 e0       	ldi	r19, 0x02	; 2
    a428:	3a 83       	std	Y+2, r19	; 0x02
    a42a:	29 83       	std	Y+1, r18	; 0x01
    a42c:	81 e0       	ldi	r24, 0x01	; 1
    a42e:	90 e0       	ldi	r25, 0x00	; 0
    a430:	a9 81       	ldd	r26, Y+1	; 0x01
    a432:	ba 81       	ldd	r27, Y+2	; 0x02
    a434:	2d 91       	ld	r18, X+
    a436:	ba 83       	std	Y+2, r27	; 0x02
    a438:	a9 83       	std	Y+1, r26	; 0x01
    a43a:	ef 81       	ldd	r30, Y+7	; 0x07
    a43c:	f8 85       	ldd	r31, Y+8	; 0x08
    a43e:	e2 0f       	add	r30, r18
    a440:	f1 1d       	adc	r31, r1
    a442:	a0 80       	ld	r10, Z
    a444:	b1 80       	ldd	r11, Z+1	; 0x01
    a446:	00 97       	sbiw	r24, 0x00	; 0
    a448:	09 f1       	breq	.+66     	; 0xa48c <dir_find+0x16c>
    a44a:	bf ef       	ldi	r27, 0xFF	; 255
    a44c:	eb 16       	cp	r14, r27
    a44e:	f1 04       	cpc	r15, r1
    a450:	08 f0       	brcs	.+2      	; 0xa454 <dir_find+0x134>
    a452:	76 c0       	rjmp	.+236    	; 0xa540 <dir_find+0x220>
    a454:	c5 01       	movw	r24, r10
    a456:	0e 94 40 6c 	call	0xd880	; 0xd880 <ff_wtoupper>
    a45a:	9c 83       	std	Y+4, r25	; 0x04
    a45c:	8b 83       	std	Y+3, r24	; 0x03
    a45e:	f7 01       	movw	r30, r14
    a460:	31 96       	adiw	r30, 0x01	; 1
    a462:	fe 83       	std	Y+6, r31	; 0x06
    a464:	ed 83       	std	Y+5, r30	; 0x05
    a466:	ee 0c       	add	r14, r14
    a468:	ff 1c       	adc	r15, r15
    a46a:	f6 01       	movw	r30, r12
    a46c:	ee 0d       	add	r30, r14
    a46e:	ff 1d       	adc	r31, r15
    a470:	80 81       	ld	r24, Z
    a472:	91 81       	ldd	r25, Z+1	; 0x01
    a474:	0e 94 40 6c 	call	0xd880	; 0xd880 <ff_wtoupper>
    a478:	2b 81       	ldd	r18, Y+3	; 0x03
    a47a:	3c 81       	ldd	r19, Y+4	; 0x04
    a47c:	28 17       	cp	r18, r24
    a47e:	39 07       	cpc	r19, r25
    a480:	09 f0       	breq	.+2      	; 0xa484 <dir_find+0x164>
    a482:	5e c0       	rjmp	.+188    	; 0xa540 <dir_find+0x220>
    a484:	c5 01       	movw	r24, r10
    a486:	ed 80       	ldd	r14, Y+5	; 0x05
    a488:	fe 80       	ldd	r15, Y+6	; 0x06
    a48a:	05 c0       	rjmp	.+10     	; 0xa496 <dir_find+0x176>
    a48c:	3f ef       	ldi	r19, 0xFF	; 255
    a48e:	a3 16       	cp	r10, r19
    a490:	b3 06       	cpc	r11, r19
    a492:	09 f0       	breq	.+2      	; 0xa496 <dir_find+0x176>
    a494:	55 c0       	rjmp	.+170    	; 0xa540 <dir_find+0x220>
    a496:	49 81       	ldd	r20, Y+1	; 0x01
    a498:	5a 81       	ldd	r21, Y+2	; 0x02
    a49a:	49 5b       	subi	r20, 0xB9	; 185
    a49c:	52 40       	sbci	r21, 0x02	; 2
    a49e:	41 f6       	brne	.-112    	; 0xa430 <dir_find+0x110>
    a4a0:	ef 81       	ldd	r30, Y+7	; 0x07
    a4a2:	f8 85       	ldd	r31, Y+8	; 0x08
    a4a4:	20 81       	ld	r18, Z
    a4a6:	26 ff       	sbrs	r18, 6
    a4a8:	46 c0       	rjmp	.+140    	; 0xa536 <dir_find+0x216>
    a4aa:	89 2b       	or	r24, r25
    a4ac:	09 f4       	brne	.+2      	; 0xa4b0 <dir_find+0x190>
    a4ae:	43 c0       	rjmp	.+134    	; 0xa536 <dir_find+0x216>
    a4b0:	ee 0c       	add	r14, r14
    a4b2:	ff 1c       	adc	r15, r15
    a4b4:	f6 01       	movw	r30, r12
    a4b6:	ee 0d       	add	r30, r14
    a4b8:	ff 1d       	adc	r31, r15
    a4ba:	80 81       	ld	r24, Z
    a4bc:	91 81       	ldd	r25, Z+1	; 0x01
    a4be:	89 2b       	or	r24, r25
    a4c0:	d1 f1       	breq	.+116    	; 0xa536 <dir_find+0x216>
    a4c2:	3e c0       	rjmp	.+124    	; 0xa540 <dir_find+0x220>
    a4c4:	f1 10       	cpse	r15, r1
    a4c6:	06 c0       	rjmp	.+12     	; 0xa4d4 <dir_find+0x1b4>
    a4c8:	8f 81       	ldd	r24, Y+7	; 0x07
    a4ca:	98 85       	ldd	r25, Y+8	; 0x08
    a4cc:	0e 94 f6 45 	call	0x8bec	; 0x8bec <sum_sfn>
    a4d0:	e8 16       	cp	r14, r24
    a4d2:	71 f1       	breq	.+92     	; 0xa530 <dir_find+0x210>
    a4d4:	d8 01       	movw	r26, r16
    a4d6:	97 96       	adiw	r26, 0x27	; 39
    a4d8:	8c 91       	ld	r24, X
    a4da:	80 fd       	sbrc	r24, 0
    a4dc:	17 c0       	rjmp	.+46     	; 0xa50c <dir_find+0x1ec>
    a4de:	f8 01       	movw	r30, r16
    a4e0:	7c 96       	adiw	r30, 0x1c	; 28
    a4e2:	2f 81       	ldd	r18, Y+7	; 0x07
    a4e4:	38 85       	ldd	r19, Y+8	; 0x08
    a4e6:	25 5f       	subi	r18, 0xF5	; 245
    a4e8:	3f 4f       	sbci	r19, 0xFF	; 255
    a4ea:	af 81       	ldd	r26, Y+7	; 0x07
    a4ec:	b8 85       	ldd	r27, Y+8	; 0x08
    a4ee:	8d 91       	ld	r24, X+
    a4f0:	b8 87       	std	Y+8, r27	; 0x08
    a4f2:	af 83       	std	Y+7, r26	; 0x07
    a4f4:	41 91       	ld	r20, Z+
    a4f6:	90 e0       	ldi	r25, 0x00	; 0
    a4f8:	84 1b       	sub	r24, r20
    a4fa:	91 09       	sbc	r25, r1
    a4fc:	2a 17       	cp	r18, r26
    a4fe:	3b 07       	cpc	r19, r27
    a500:	19 f0       	breq	.+6      	; 0xa508 <dir_find+0x1e8>
    a502:	89 2b       	or	r24, r25
    a504:	91 f3       	breq	.-28     	; 0xa4ea <dir_find+0x1ca>
    a506:	02 c0       	rjmp	.+4      	; 0xa50c <dir_find+0x1ec>
    a508:	89 2b       	or	r24, r25
    a50a:	91 f0       	breq	.+36     	; 0xa530 <dir_find+0x210>
    a50c:	f8 01       	movw	r30, r16
    a50e:	40 a6       	std	Z+40, r4	; 0x28
    a510:	51 a6       	std	Z+41, r5	; 0x29
    a512:	62 a6       	std	Z+42, r6	; 0x2a
    a514:	73 a6       	std	Z+43, r7	; 0x2b
    a516:	ff 24       	eor	r15, r15
    a518:	fa 94       	dec	r15
    a51a:	60 e0       	ldi	r22, 0x00	; 0
    a51c:	70 e0       	ldi	r23, 0x00	; 0
    a51e:	c8 01       	movw	r24, r16
    a520:	87 dc       	rcall	.-1778   	; 0x9e30 <dir_next>
    a522:	00 97       	sbiw	r24, 0x00	; 0
    a524:	09 f4       	brne	.+2      	; 0xa528 <dir_find+0x208>
    a526:	1d cf       	rjmp	.-454    	; 0xa362 <dir_find+0x42>
    a528:	28 2f       	mov	r18, r24
    a52a:	0c c0       	rjmp	.+24     	; 0xa544 <dir_find+0x224>
    a52c:	24 e0       	ldi	r18, 0x04	; 4
    a52e:	01 c0       	rjmp	.+2      	; 0xa532 <dir_find+0x212>
    a530:	20 e0       	ldi	r18, 0x00	; 0
    a532:	90 e0       	ldi	r25, 0x00	; 0
    a534:	07 c0       	rjmp	.+14     	; 0xa544 <dir_find+0x224>
    a536:	ff 24       	eor	r15, r15
    a538:	fa 94       	dec	r15
    a53a:	f3 0c       	add	r15, r3
    a53c:	e2 2c       	mov	r14, r2
    a53e:	ed cf       	rjmp	.-38     	; 0xa51a <dir_find+0x1fa>
    a540:	e2 2c       	mov	r14, r2
    a542:	e9 cf       	rjmp	.-46     	; 0xa516 <dir_find+0x1f6>
    a544:	82 2f       	mov	r24, r18
    a546:	28 96       	adiw	r28, 0x08	; 8
    a548:	e2 e1       	ldi	r30, 0x12	; 18
    a54a:	0c 94 dd e8 	jmp	0x1d1ba	; 0x1d1ba <__epilogue_restores__>

0000a54e <dir_register>:
    a54e:	a6 e1       	ldi	r26, 0x16	; 22
    a550:	b0 e0       	ldi	r27, 0x00	; 0
    a552:	ed ea       	ldi	r30, 0xAD	; 173
    a554:	f2 e5       	ldi	r31, 0x52	; 82
    a556:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__prologue_saves__>
    a55a:	dc 01       	movw	r26, r24
    a55c:	97 96       	adiw	r26, 0x27	; 39
    a55e:	2c 91       	ld	r18, X
    a560:	97 97       	sbiw	r26, 0x27	; 39
    a562:	20 7a       	andi	r18, 0xA0	; 160
    a564:	09 f0       	breq	.+2      	; 0xa568 <dir_register+0x1a>
    a566:	61 c1       	rjmp	.+706    	; 0xa82a <dir_register+0x2dc>
    a568:	cd 90       	ld	r12, X+
    a56a:	dc 90       	ld	r13, X
    a56c:	d6 01       	movw	r26, r12
    a56e:	1b 96       	adiw	r26, 0x0b	; 11
    a570:	ed 91       	ld	r30, X+
    a572:	fc 91       	ld	r31, X
    a574:	1c 97       	sbiw	r26, 0x0c	; 12
    a576:	81 2c       	mov	r8, r1
    a578:	91 2c       	mov	r9, r1
    a57a:	21 91       	ld	r18, Z+
    a57c:	31 91       	ld	r19, Z+
    a57e:	23 2b       	or	r18, r19
    a580:	21 f0       	breq	.+8      	; 0xa58a <dir_register+0x3c>
    a582:	bf ef       	ldi	r27, 0xFF	; 255
    a584:	8b 1a       	sub	r8, r27
    a586:	9b 0a       	sbc	r9, r27
    a588:	f8 cf       	rjmp	.-16     	; 0xa57a <dir_register+0x2c>
    a58a:	8c 01       	movw	r16, r24
    a58c:	5c 01       	movw	r10, r24
    a58e:	ec e1       	ldi	r30, 0x1C	; 28
    a590:	ae 0e       	add	r10, r30
    a592:	b1 1c       	adc	r11, r1
    a594:	4c e0       	ldi	r20, 0x0C	; 12
    a596:	50 e0       	ldi	r21, 0x00	; 0
    a598:	b5 01       	movw	r22, r10
    a59a:	ce 01       	movw	r24, r28
    a59c:	01 96       	adiw	r24, 0x01	; 1
    a59e:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <mem_cpy.part.0>
    a5a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    a5a4:	80 ff       	sbrs	r24, 0
    a5a6:	96 c0       	rjmp	.+300    	; 0xa6d4 <dir_register+0x186>
    a5a8:	80 e4       	ldi	r24, 0x40	; 64
    a5aa:	d8 01       	movw	r26, r16
    a5ac:	97 96       	adiw	r26, 0x27	; 39
    a5ae:	8c 93       	st	X, r24
    a5b0:	41 2c       	mov	r4, r1
    a5b2:	51 2c       	mov	r5, r1
    a5b4:	32 01       	movw	r6, r4
    a5b6:	43 94       	inc	r4
    a5b8:	72 01       	movw	r14, r4
    a5ba:	f6 01       	movw	r30, r12
    a5bc:	23 84       	ldd	r2, Z+11	; 0x0b
    a5be:	34 84       	ldd	r3, Z+12	; 0x0c
    a5c0:	4b e0       	ldi	r20, 0x0B	; 11
    a5c2:	50 e0       	ldi	r21, 0x00	; 0
    a5c4:	be 01       	movw	r22, r28
    a5c6:	6f 5f       	subi	r22, 0xFF	; 255
    a5c8:	7f 4f       	sbci	r23, 0xFF	; 255
    a5ca:	c5 01       	movw	r24, r10
    a5cc:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <mem_cpy.part.0>
    a5d0:	f6 e0       	ldi	r31, 0x06	; 6
    a5d2:	4f 16       	cp	r4, r31
    a5d4:	51 04       	cpc	r5, r1
    a5d6:	18 f1       	brcs	.+70     	; 0xa61e <dir_register+0xd0>
    a5d8:	f1 01       	movw	r30, r2
    a5da:	b3 01       	movw	r22, r6
    a5dc:	a2 01       	movw	r20, r4
    a5de:	81 91       	ld	r24, Z+
    a5e0:	91 91       	ld	r25, Z+
    a5e2:	00 97       	sbiw	r24, 0x00	; 0
    a5e4:	d9 f0       	breq	.+54     	; 0xa61c <dir_register+0xce>
    a5e6:	20 e1       	ldi	r18, 0x10	; 16
    a5e8:	30 e0       	ldi	r19, 0x00	; 0
    a5ea:	44 0f       	add	r20, r20
    a5ec:	55 1f       	adc	r21, r21
    a5ee:	66 1f       	adc	r22, r22
    a5f0:	77 1f       	adc	r23, r23
    a5f2:	dc 01       	movw	r26, r24
    a5f4:	a1 70       	andi	r26, 0x01	; 1
    a5f6:	bb 27       	eor	r27, r27
    a5f8:	4a 0f       	add	r20, r26
    a5fa:	5b 1f       	adc	r21, r27
    a5fc:	61 1d       	adc	r22, r1
    a5fe:	71 1d       	adc	r23, r1
    a600:	96 95       	lsr	r25
    a602:	87 95       	ror	r24
    a604:	60 ff       	sbrs	r22, 0
    a606:	06 c0       	rjmp	.+12     	; 0xa614 <dir_register+0xc6>
    a608:	a1 e2       	ldi	r26, 0x21	; 33
    a60a:	4a 27       	eor	r20, r26
    a60c:	a0 e1       	ldi	r26, 0x10	; 16
    a60e:	5a 27       	eor	r21, r26
    a610:	a1 e0       	ldi	r26, 0x01	; 1
    a612:	6a 27       	eor	r22, r26
    a614:	21 50       	subi	r18, 0x01	; 1
    a616:	31 09       	sbc	r19, r1
    a618:	41 f7       	brne	.-48     	; 0xa5ea <dir_register+0x9c>
    a61a:	e1 cf       	rjmp	.-62     	; 0xa5de <dir_register+0x90>
    a61c:	7a 01       	movw	r14, r20
    a61e:	fe 01       	movw	r30, r28
    a620:	75 96       	adiw	r30, 0x15	; 21
    a622:	27 e0       	ldi	r18, 0x07	; 7
    a624:	30 e0       	ldi	r19, 0x00	; 0
    a626:	9e 2d       	mov	r25, r14
    a628:	9f 70       	andi	r25, 0x0F	; 15
    a62a:	80 e3       	ldi	r24, 0x30	; 48
    a62c:	89 0f       	add	r24, r25
    a62e:	8a 33       	cpi	r24, 0x3A	; 58
    a630:	10 f0       	brcs	.+4      	; 0xa636 <dir_register+0xe8>
    a632:	87 e3       	ldi	r24, 0x37	; 55
    a634:	89 0f       	add	r24, r25
    a636:	21 50       	subi	r18, 0x01	; 1
    a638:	31 09       	sbc	r19, r1
    a63a:	82 93       	st	-Z, r24
    a63c:	a4 e0       	ldi	r26, 0x04	; 4
    a63e:	f6 94       	lsr	r15
    a640:	e7 94       	ror	r14
    a642:	aa 95       	dec	r26
    a644:	e1 f7       	brne	.-8      	; 0xa63e <dir_register+0xf0>
    a646:	e1 14       	cp	r14, r1
    a648:	f1 04       	cpc	r15, r1
    a64a:	69 f7       	brne	.-38     	; 0xa626 <dir_register+0xd8>
    a64c:	ed e0       	ldi	r30, 0x0D	; 13
    a64e:	f0 e0       	ldi	r31, 0x00	; 0
    a650:	ec 0f       	add	r30, r28
    a652:	fd 1f       	adc	r31, r29
    a654:	e2 0f       	add	r30, r18
    a656:	f3 1f       	adc	r31, r19
    a658:	be e7       	ldi	r27, 0x7E	; 126
    a65a:	b0 83       	st	Z, r27
    a65c:	f5 01       	movw	r30, r10
    a65e:	80 e0       	ldi	r24, 0x00	; 0
    a660:	90 e0       	ldi	r25, 0x00	; 0
    a662:	28 17       	cp	r18, r24
    a664:	39 07       	cpc	r19, r25
    a666:	29 f0       	breq	.+10     	; 0xa672 <dir_register+0x124>
    a668:	41 91       	ld	r20, Z+
    a66a:	40 32       	cpi	r20, 0x20	; 32
    a66c:	11 f0       	breq	.+4      	; 0xa672 <dir_register+0x124>
    a66e:	01 96       	adiw	r24, 0x01	; 1
    a670:	f8 cf       	rjmp	.-16     	; 0xa662 <dir_register+0x114>
    a672:	f5 01       	movw	r30, r10
    a674:	e8 0f       	add	r30, r24
    a676:	f9 1f       	adc	r31, r25
    a678:	28 30       	cpi	r18, 0x08	; 8
    a67a:	31 05       	cpc	r19, r1
    a67c:	50 f4       	brcc	.+20     	; 0xa692 <dir_register+0x144>
    a67e:	ad e0       	ldi	r26, 0x0D	; 13
    a680:	b0 e0       	ldi	r27, 0x00	; 0
    a682:	ac 0f       	add	r26, r28
    a684:	bd 1f       	adc	r27, r29
    a686:	a2 0f       	add	r26, r18
    a688:	b3 1f       	adc	r27, r19
    a68a:	8c 91       	ld	r24, X
    a68c:	2f 5f       	subi	r18, 0xFF	; 255
    a68e:	3f 4f       	sbci	r19, 0xFF	; 255
    a690:	01 c0       	rjmp	.+2      	; 0xa694 <dir_register+0x146>
    a692:	80 e2       	ldi	r24, 0x20	; 32
    a694:	81 93       	st	Z+, r24
    a696:	cf 01       	movw	r24, r30
    a698:	8a 19       	sub	r24, r10
    a69a:	9b 09       	sbc	r25, r11
    a69c:	08 97       	sbiw	r24, 0x08	; 8
    a69e:	60 f3       	brcs	.-40     	; 0xa678 <dir_register+0x12a>
    a6a0:	c8 01       	movw	r24, r16
    a6a2:	3e de       	rcall	.-900    	; 0xa320 <dir_find>
    a6a4:	00 97       	sbiw	r24, 0x00	; 0
    a6a6:	71 f4       	brne	.+28     	; 0xa6c4 <dir_register+0x176>
    a6a8:	ef ef       	ldi	r30, 0xFF	; 255
    a6aa:	4e 1a       	sub	r4, r30
    a6ac:	5e 0a       	sbc	r5, r30
    a6ae:	6e 0a       	sbc	r6, r30
    a6b0:	7e 0a       	sbc	r7, r30
    a6b2:	f4 e6       	ldi	r31, 0x64	; 100
    a6b4:	4f 16       	cp	r4, r31
    a6b6:	51 04       	cpc	r5, r1
    a6b8:	61 04       	cpc	r6, r1
    a6ba:	71 04       	cpc	r7, r1
    a6bc:	09 f0       	breq	.+2      	; 0xa6c0 <dir_register+0x172>
    a6be:	7c cf       	rjmp	.-264    	; 0xa5b8 <dir_register+0x6a>
    a6c0:	27 e0       	ldi	r18, 0x07	; 7
    a6c2:	b4 c0       	rjmp	.+360    	; 0xa82c <dir_register+0x2de>
    a6c4:	84 30       	cpi	r24, 0x04	; 4
    a6c6:	91 05       	cpc	r25, r1
    a6c8:	09 f0       	breq	.+2      	; 0xa6cc <dir_register+0x17e>
    a6ca:	df c0       	rjmp	.+446    	; 0xa88a <dir_register+0x33c>
    a6cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    a6ce:	d8 01       	movw	r26, r16
    a6d0:	97 96       	adiw	r26, 0x27	; 39
    a6d2:	8c 93       	st	X, r24
    a6d4:	8c 85       	ldd	r24, Y+12	; 0x0c
    a6d6:	81 ff       	sbrs	r24, 1
    a6d8:	0b c0       	rjmp	.+22     	; 0xa6f0 <dir_register+0x1a2>
    a6da:	c4 01       	movw	r24, r8
    a6dc:	0c 96       	adiw	r24, 0x0c	; 12
    a6de:	6d e0       	ldi	r22, 0x0D	; 13
    a6e0:	70 e0       	ldi	r23, 0x00	; 0
    a6e2:	0e 94 2d e8 	call	0x1d05a	; 0x1d05a <__udivmodhi4>
    a6e6:	7b 01       	movw	r14, r22
    a6e8:	bf ef       	ldi	r27, 0xFF	; 255
    a6ea:	eb 1a       	sub	r14, r27
    a6ec:	fb 0a       	sbc	r15, r27
    a6ee:	03 c0       	rjmp	.+6      	; 0xa6f6 <dir_register+0x1a8>
    a6f0:	ee 24       	eor	r14, r14
    a6f2:	e3 94       	inc	r14
    a6f4:	f1 2c       	mov	r15, r1
    a6f6:	b7 01       	movw	r22, r14
    a6f8:	c8 01       	movw	r24, r16
    a6fa:	c2 dc       	rcall	.-1660   	; 0xa080 <dir_alloc>
    a6fc:	00 97       	sbiw	r24, 0x00	; 0
    a6fe:	09 f0       	breq	.+2      	; 0xa702 <dir_register+0x1b4>
    a700:	c4 c0       	rjmp	.+392    	; 0xa88a <dir_register+0x33c>
    a702:	e1 e0       	ldi	r30, 0x01	; 1
    a704:	ee 1a       	sub	r14, r30
    a706:	f1 08       	sbc	r15, r1
    a708:	09 f4       	brne	.+2      	; 0xa70c <dir_register+0x1be>
    a70a:	92 c0       	rjmp	.+292    	; 0xa830 <dir_register+0x2e2>
    a70c:	d8 01       	movw	r26, r16
    a70e:	1e 96       	adiw	r26, 0x0e	; 14
    a710:	4d 91       	ld	r20, X+
    a712:	5d 91       	ld	r21, X+
    a714:	6d 91       	ld	r22, X+
    a716:	7c 91       	ld	r23, X
    a718:	51 97       	sbiw	r26, 0x11	; 17
    a71a:	c7 01       	movw	r24, r14
    a71c:	e5 e0       	ldi	r30, 0x05	; 5
    a71e:	88 0f       	add	r24, r24
    a720:	99 1f       	adc	r25, r25
    a722:	ea 95       	dec	r30
    a724:	e1 f7       	brne	.-8      	; 0xa71e <dir_register+0x1d0>
    a726:	48 1b       	sub	r20, r24
    a728:	59 0b       	sbc	r21, r25
    a72a:	61 09       	sbc	r22, r1
    a72c:	71 09       	sbc	r23, r1
    a72e:	c8 01       	movw	r24, r16
    a730:	85 d8       	rcall	.-3830   	; 0x983c <dir_sdi>
    a732:	00 97       	sbiw	r24, 0x00	; 0
    a734:	09 f0       	breq	.+2      	; 0xa738 <dir_register+0x1ea>
    a736:	a9 c0       	rjmp	.+338    	; 0xa88a <dir_register+0x33c>
    a738:	c5 01       	movw	r24, r10
    a73a:	0e 94 f6 45 	call	0x8bec	; 0x8bec <sum_sfn>
    a73e:	68 2e       	mov	r6, r24
    a740:	5f e0       	ldi	r21, 0x0F	; 15
    a742:	35 2e       	mov	r3, r21
    a744:	6d e0       	ldi	r22, 0x0D	; 13
    a746:	46 2e       	mov	r4, r22
    a748:	79 eb       	ldi	r23, 0xB9	; 185
    a74a:	87 2e       	mov	r8, r23
    a74c:	72 e0       	ldi	r23, 0x02	; 2
    a74e:	97 2e       	mov	r9, r23
    a750:	55 24       	eor	r5, r5
    a752:	53 94       	inc	r5
    a754:	f8 01       	movw	r30, r16
    a756:	46 89       	ldd	r20, Z+22	; 0x16
    a758:	57 89       	ldd	r21, Z+23	; 0x17
    a75a:	60 8d       	ldd	r22, Z+24	; 0x18
    a75c:	71 8d       	ldd	r23, Z+25	; 0x19
    a75e:	c6 01       	movw	r24, r12
    a760:	0e 94 45 47 	call	0x8e8a	; 0x8e8a <move_window>
    a764:	00 97       	sbiw	r24, 0x00	; 0
    a766:	09 f0       	breq	.+2      	; 0xa76a <dir_register+0x21c>
    a768:	90 c0       	rjmp	.+288    	; 0xa88a <dir_register+0x33c>
    a76a:	7e 2c       	mov	r7, r14
    a76c:	d8 01       	movw	r26, r16
    a76e:	5a 96       	adiw	r26, 0x1a	; 26
    a770:	ed 91       	ld	r30, X+
    a772:	fc 91       	ld	r31, X
    a774:	5b 97       	sbiw	r26, 0x1b	; 27
    a776:	d6 01       	movw	r26, r12
    a778:	1b 96       	adiw	r26, 0x0b	; 11
    a77a:	6d 91       	ld	r22, X+
    a77c:	7c 91       	ld	r23, X
    a77e:	1c 97       	sbiw	r26, 0x0c	; 12
    a780:	65 86       	std	Z+13, r6	; 0x0d
    a782:	33 86       	std	Z+11, r3	; 0x0b
    a784:	14 86       	std	Z+12, r1	; 0x0c
    a786:	12 8e       	std	Z+26, r1	; 0x1a
    a788:	13 8e       	std	Z+27, r1	; 0x1b
    a78a:	97 01       	movw	r18, r14
    a78c:	33 27       	eor	r19, r19
    a78e:	21 50       	subi	r18, 0x01	; 1
    a790:	31 09       	sbc	r19, r1
    a792:	42 9e       	mul	r4, r18
    a794:	c0 01       	movw	r24, r0
    a796:	43 9e       	mul	r4, r19
    a798:	90 0d       	add	r25, r0
    a79a:	11 24       	eor	r1, r1
    a79c:	2c ea       	ldi	r18, 0xAC	; 172
    a79e:	32 e0       	ldi	r19, 0x02	; 2
    a7a0:	3e 8b       	std	Y+22, r19	; 0x16
    a7a2:	2d 8b       	std	Y+21, r18	; 0x15
    a7a4:	20 e0       	ldi	r18, 0x00	; 0
    a7a6:	30 e0       	ldi	r19, 0x00	; 0
    a7a8:	2f 3f       	cpi	r18, 0xFF	; 255
    a7aa:	4f ef       	ldi	r20, 0xFF	; 255
    a7ac:	34 07       	cpc	r19, r20
    a7ae:	49 f0       	breq	.+18     	; 0xa7c2 <dir_register+0x274>
    a7b0:	9c 01       	movw	r18, r24
    a7b2:	22 0f       	add	r18, r18
    a7b4:	33 1f       	adc	r19, r19
    a7b6:	26 0f       	add	r18, r22
    a7b8:	37 1f       	adc	r19, r23
    a7ba:	d9 01       	movw	r26, r18
    a7bc:	2d 91       	ld	r18, X+
    a7be:	3c 91       	ld	r19, X
    a7c0:	01 96       	adiw	r24, 0x01	; 1
    a7c2:	ad 89       	ldd	r26, Y+21	; 0x15
    a7c4:	be 89       	ldd	r27, Y+22	; 0x16
    a7c6:	4d 91       	ld	r20, X+
    a7c8:	be 8b       	std	Y+22, r27	; 0x16
    a7ca:	ad 8b       	std	Y+21, r26	; 0x15
    a7cc:	df 01       	movw	r26, r30
    a7ce:	a4 0f       	add	r26, r20
    a7d0:	b1 1d       	adc	r27, r1
    a7d2:	2c 93       	st	X, r18
    a7d4:	11 96       	adiw	r26, 0x01	; 1
    a7d6:	3c 93       	st	X, r19
    a7d8:	21 15       	cp	r18, r1
    a7da:	31 05       	cpc	r19, r1
    a7dc:	11 f4       	brne	.+4      	; 0xa7e2 <dir_register+0x294>
    a7de:	2f ef       	ldi	r18, 0xFF	; 255
    a7e0:	3f ef       	ldi	r19, 0xFF	; 255
    a7e2:	4d 89       	ldd	r20, Y+21	; 0x15
    a7e4:	5e 89       	ldd	r21, Y+22	; 0x16
    a7e6:	84 16       	cp	r8, r20
    a7e8:	95 06       	cpc	r9, r21
    a7ea:	f1 f6       	brne	.-68     	; 0xa7a8 <dir_register+0x25a>
    a7ec:	2f 3f       	cpi	r18, 0xFF	; 255
    a7ee:	3f 4f       	sbci	r19, 0xFF	; 255
    a7f0:	49 f0       	breq	.+18     	; 0xa804 <dir_register+0x2b6>
    a7f2:	88 0f       	add	r24, r24
    a7f4:	99 1f       	adc	r25, r25
    a7f6:	db 01       	movw	r26, r22
    a7f8:	a8 0f       	add	r26, r24
    a7fa:	b9 1f       	adc	r27, r25
    a7fc:	8d 91       	ld	r24, X+
    a7fe:	9c 91       	ld	r25, X
    a800:	89 2b       	or	r24, r25
    a802:	19 f4       	brne	.+6      	; 0xa80a <dir_register+0x2bc>
    a804:	87 2d       	mov	r24, r7
    a806:	80 64       	ori	r24, 0x40	; 64
    a808:	78 2e       	mov	r7, r24
    a80a:	70 82       	st	Z, r7
    a80c:	d6 01       	movw	r26, r12
    a80e:	13 96       	adiw	r26, 0x03	; 3
    a810:	5c 92       	st	X, r5
    a812:	60 e0       	ldi	r22, 0x00	; 0
    a814:	70 e0       	ldi	r23, 0x00	; 0
    a816:	c8 01       	movw	r24, r16
    a818:	0b db       	rcall	.-2538   	; 0x9e30 <dir_next>
    a81a:	00 97       	sbiw	r24, 0x00	; 0
    a81c:	b1 f5       	brne	.+108    	; 0xa88a <dir_register+0x33c>
    a81e:	b1 e0       	ldi	r27, 0x01	; 1
    a820:	eb 1a       	sub	r14, r27
    a822:	f1 08       	sbc	r15, r1
    a824:	09 f0       	breq	.+2      	; 0xa828 <dir_register+0x2da>
    a826:	96 cf       	rjmp	.-212    	; 0xa754 <dir_register+0x206>
    a828:	03 c0       	rjmp	.+6      	; 0xa830 <dir_register+0x2e2>
    a82a:	26 e0       	ldi	r18, 0x06	; 6
    a82c:	90 e0       	ldi	r25, 0x00	; 0
    a82e:	2e c0       	rjmp	.+92     	; 0xa88c <dir_register+0x33e>
    a830:	d8 01       	movw	r26, r16
    a832:	56 96       	adiw	r26, 0x16	; 22
    a834:	4d 91       	ld	r20, X+
    a836:	5d 91       	ld	r21, X+
    a838:	6d 91       	ld	r22, X+
    a83a:	7c 91       	ld	r23, X
    a83c:	59 97       	sbiw	r26, 0x19	; 25
    a83e:	c6 01       	movw	r24, r12
    a840:	0e 94 45 47 	call	0x8e8a	; 0x8e8a <move_window>
    a844:	00 97       	sbiw	r24, 0x00	; 0
    a846:	09 f5       	brne	.+66     	; 0xa88a <dir_register+0x33c>
    a848:	40 e2       	ldi	r20, 0x20	; 32
    a84a:	50 e0       	ldi	r21, 0x00	; 0
    a84c:	60 e0       	ldi	r22, 0x00	; 0
    a84e:	70 e0       	ldi	r23, 0x00	; 0
    a850:	f8 01       	movw	r30, r16
    a852:	82 8d       	ldd	r24, Z+26	; 0x1a
    a854:	93 8d       	ldd	r25, Z+27	; 0x1b
    a856:	0e 94 89 45 	call	0x8b12	; 0x8b12 <mem_set>
    a85a:	4b e0       	ldi	r20, 0x0B	; 11
    a85c:	50 e0       	ldi	r21, 0x00	; 0
    a85e:	b5 01       	movw	r22, r10
    a860:	d8 01       	movw	r26, r16
    a862:	5a 96       	adiw	r26, 0x1a	; 26
    a864:	8d 91       	ld	r24, X+
    a866:	9c 91       	ld	r25, X
    a868:	5b 97       	sbiw	r26, 0x1b	; 27
    a86a:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <mem_cpy.part.0>
    a86e:	d8 01       	movw	r26, r16
    a870:	5a 96       	adiw	r26, 0x1a	; 26
    a872:	ed 91       	ld	r30, X+
    a874:	fc 91       	ld	r31, X
    a876:	5b 97       	sbiw	r26, 0x1b	; 27
    a878:	97 96       	adiw	r26, 0x27	; 39
    a87a:	8c 91       	ld	r24, X
    a87c:	88 71       	andi	r24, 0x18	; 24
    a87e:	84 87       	std	Z+12, r24	; 0x0c
    a880:	81 e0       	ldi	r24, 0x01	; 1
    a882:	f6 01       	movw	r30, r12
    a884:	83 83       	std	Z+3, r24	; 0x03
    a886:	20 e0       	ldi	r18, 0x00	; 0
    a888:	d1 cf       	rjmp	.-94     	; 0xa82c <dir_register+0x2de>
    a88a:	28 2f       	mov	r18, r24
    a88c:	82 2f       	mov	r24, r18
    a88e:	66 96       	adiw	r28, 0x16	; 22
    a890:	e2 e1       	ldi	r30, 0x12	; 18
    a892:	0c 94 dd e8 	jmp	0x1d1ba	; 0x1d1ba <__epilogue_restores__>

0000a896 <follow_path>:
    a896:	a7 e0       	ldi	r26, 0x07	; 7
    a898:	b0 e0       	ldi	r27, 0x00	; 0
    a89a:	e1 e5       	ldi	r30, 0x51	; 81
    a89c:	f4 e5       	ldi	r31, 0x54	; 84
    a89e:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__prologue_saves__>
    a8a2:	8c 01       	movw	r16, r24
    a8a4:	7b 01       	movw	r14, r22
    a8a6:	dc 01       	movw	r26, r24
    a8a8:	2d 90       	ld	r2, X+
    a8aa:	3c 90       	ld	r3, X
    a8ac:	fb 01       	movw	r30, r22
    a8ae:	80 81       	ld	r24, Z
    a8b0:	8f 32       	cpi	r24, 0x2F	; 47
    a8b2:	11 f0       	breq	.+4      	; 0xa8b8 <follow_path+0x22>
    a8b4:	8c 35       	cpi	r24, 0x5C	; 92
    a8b6:	11 f4       	brne	.+4      	; 0xa8bc <follow_path+0x26>
    a8b8:	97 01       	movw	r18, r14
    a8ba:	0b c0       	rjmp	.+22     	; 0xa8d2 <follow_path+0x3c>
    a8bc:	f1 01       	movw	r30, r2
    a8be:	85 89       	ldd	r24, Z+21	; 0x15
    a8c0:	96 89       	ldd	r25, Z+22	; 0x16
    a8c2:	a7 89       	ldd	r26, Z+23	; 0x17
    a8c4:	b0 8d       	ldd	r27, Z+24	; 0x18
    a8c6:	f8 01       	movw	r30, r16
    a8c8:	86 83       	std	Z+6, r24	; 0x06
    a8ca:	97 83       	std	Z+7, r25	; 0x07
    a8cc:	a0 87       	std	Z+8, r26	; 0x08
    a8ce:	b1 87       	std	Z+9, r27	; 0x09
    a8d0:	0e c0       	rjmp	.+28     	; 0xa8ee <follow_path+0x58>
    a8d2:	79 01       	movw	r14, r18
    a8d4:	d9 01       	movw	r26, r18
    a8d6:	8c 91       	ld	r24, X
    a8d8:	2f 5f       	subi	r18, 0xFF	; 255
    a8da:	3f 4f       	sbci	r19, 0xFF	; 255
    a8dc:	8f 32       	cpi	r24, 0x2F	; 47
    a8de:	c9 f3       	breq	.-14     	; 0xa8d2 <follow_path+0x3c>
    a8e0:	8c 35       	cpi	r24, 0x5C	; 92
    a8e2:	b9 f3       	breq	.-18     	; 0xa8d2 <follow_path+0x3c>
    a8e4:	f8 01       	movw	r30, r16
    a8e6:	16 82       	std	Z+6, r1	; 0x06
    a8e8:	17 82       	std	Z+7, r1	; 0x07
    a8ea:	10 86       	std	Z+8, r1	; 0x08
    a8ec:	11 86       	std	Z+9, r1	; 0x09
    a8ee:	d7 01       	movw	r26, r14
    a8f0:	8c 91       	ld	r24, X
    a8f2:	80 32       	cpi	r24, 0x20	; 32
    a8f4:	50 f0       	brcs	.+20     	; 0xa90a <follow_path+0x74>
    a8f6:	f8 01       	movw	r30, r16
    a8f8:	7c 96       	adiw	r30, 0x1c	; 28
    a8fa:	fb 83       	std	Y+3, r31	; 0x03
    a8fc:	ea 83       	std	Y+2, r30	; 0x02
    a8fe:	91 01       	movw	r18, r2
    a900:	2b 5c       	subi	r18, 0xCB	; 203
    a902:	3f 4f       	sbci	r19, 0xFF	; 255
    a904:	3d 83       	std	Y+5, r19	; 0x05
    a906:	2c 83       	std	Y+4, r18	; 0x04
    a908:	87 c0       	rjmp	.+270    	; 0xaa18 <follow_path+0x182>
    a90a:	80 e8       	ldi	r24, 0x80	; 128
    a90c:	d8 01       	movw	r26, r16
    a90e:	97 96       	adiw	r26, 0x27	; 39
    a910:	8c 93       	st	X, r24
    a912:	40 e0       	ldi	r20, 0x00	; 0
    a914:	50 e0       	ldi	r21, 0x00	; 0
    a916:	ba 01       	movw	r22, r20
    a918:	c8 01       	movw	r24, r16
    a91a:	0e 94 1e 4c 	call	0x983c	; 0x983c <dir_sdi>
    a91e:	d8 c1       	rjmp	.+944    	; 0xacd0 <follow_path+0x43a>
    a920:	8f 32       	cpi	r24, 0x2F	; 47
    a922:	91 05       	cpc	r25, r1
    a924:	09 f4       	brne	.+2      	; 0xa928 <follow_path+0x92>
    a926:	83 c0       	rjmp	.+262    	; 0xaa2e <follow_path+0x198>
    a928:	8c 35       	cpi	r24, 0x5C	; 92
    a92a:	91 05       	cpc	r25, r1
    a92c:	09 f4       	brne	.+2      	; 0xa930 <follow_path+0x9a>
    a92e:	7f c0       	rjmp	.+254    	; 0xaa2e <follow_path+0x198>
    a930:	a1 14       	cp	r10, r1
    a932:	f1 e0       	ldi	r31, 0x01	; 1
    a934:	bf 06       	cpc	r11, r31
    a936:	09 f4       	brne	.+2      	; 0xa93a <follow_path+0xa4>
    a938:	ac c1       	rjmp	.+856    	; 0xac92 <follow_path+0x3fc>
    a93a:	61 e0       	ldi	r22, 0x01	; 1
    a93c:	70 e0       	ldi	r23, 0x00	; 0
    a93e:	0e 94 19 6c 	call	0xd832	; 0xd832 <ff_convert>
    a942:	00 97       	sbiw	r24, 0x00	; 0
    a944:	09 f4       	brne	.+2      	; 0xa948 <follow_path+0xb2>
    a946:	a5 c1       	rjmp	.+842    	; 0xac92 <follow_path+0x3fc>
    a948:	80 38       	cpi	r24, 0x80	; 128
    a94a:	91 05       	cpc	r25, r1
    a94c:	28 f4       	brcc	.+10     	; 0xa958 <follow_path+0xc2>
    a94e:	e3 ec       	ldi	r30, 0xC3	; 195
    a950:	f7 e0       	ldi	r31, 0x07	; 7
    a952:	21 91       	ld	r18, Z+
    a954:	21 11       	cpse	r18, r1
    a956:	79 c0       	rjmp	.+242    	; 0xaa4a <follow_path+0x1b4>
    a958:	d3 01       	movw	r26, r6
    a95a:	8d 93       	st	X+, r24
    a95c:	9d 93       	st	X+, r25
    a95e:	3d 01       	movw	r6, r26
    a960:	bf 82       	std	Y+7, r11	; 0x07
    a962:	ae 82       	std	Y+6, r10	; 0x06
    a964:	ae 80       	ldd	r10, Y+6	; 0x06
    a966:	bf 80       	ldd	r11, Y+7	; 0x07
    a968:	bf ef       	ldi	r27, 0xFF	; 255
    a96a:	ab 1a       	sub	r10, r27
    a96c:	bb 0a       	sbc	r11, r27
    a96e:	f4 01       	movw	r30, r8
    a970:	81 91       	ld	r24, Z+
    a972:	4f 01       	movw	r8, r30
    a974:	90 e0       	ldi	r25, 0x00	; 0
    a976:	80 32       	cpi	r24, 0x20	; 32
    a978:	91 05       	cpc	r25, r1
    a97a:	90 f6       	brcc	.-92     	; 0xa920 <follow_path+0x8a>
    a97c:	ea 0c       	add	r14, r10
    a97e:	fb 1c       	adc	r15, r11
    a980:	80 97       	sbiw	r24, 0x20	; 32
    a982:	08 f0       	brcs	.+2      	; 0xa986 <follow_path+0xf0>
    a984:	68 c0       	rjmp	.+208    	; 0xaa56 <follow_path+0x1c0>
    a986:	b4 e0       	ldi	r27, 0x04	; 4
    a988:	b9 83       	std	Y+1, r27	; 0x01
    a98a:	ee 81       	ldd	r30, Y+6	; 0x06
    a98c:	ff 81       	ldd	r31, Y+7	; 0x07
    a98e:	ee 0f       	add	r30, r30
    a990:	ff 1f       	adc	r31, r31
    a992:	2e 81       	ldd	r18, Y+6	; 0x06
    a994:	3f 81       	ldd	r19, Y+7	; 0x07
    a996:	21 30       	cpi	r18, 0x01	; 1
    a998:	31 05       	cpc	r19, r1
    a99a:	09 f0       	breq	.+2      	; 0xa99e <follow_path+0x108>
    a99c:	5e c0       	rjmp	.+188    	; 0xaa5a <follow_path+0x1c4>
    a99e:	d6 01       	movw	r26, r12
    a9a0:	8d 91       	ld	r24, X+
    a9a2:	9c 91       	ld	r25, X
    a9a4:	8e 97       	sbiw	r24, 0x2e	; 46
    a9a6:	09 f0       	breq	.+2      	; 0xa9aa <follow_path+0x114>
    a9a8:	65 c0       	rjmp	.+202    	; 0xaa74 <follow_path+0x1de>
    a9aa:	ec 0d       	add	r30, r12
    a9ac:	fd 1d       	adc	r31, r13
    a9ae:	11 82       	std	Z+1, r1	; 0x01
    a9b0:	10 82       	st	Z, r1
    a9b2:	f8 01       	movw	r30, r16
    a9b4:	7c 96       	adiw	r30, 0x1c	; 28
    a9b6:	80 e0       	ldi	r24, 0x00	; 0
    a9b8:	90 e0       	ldi	r25, 0x00	; 0
    a9ba:	2e 81       	ldd	r18, Y+6	; 0x06
    a9bc:	3f 81       	ldd	r19, Y+7	; 0x07
    a9be:	82 17       	cp	r24, r18
    a9c0:	93 07       	cpc	r25, r19
    a9c2:	08 f0       	brcs	.+2      	; 0xa9c6 <follow_path+0x130>
    a9c4:	5a c0       	rjmp	.+180    	; 0xaa7a <follow_path+0x1e4>
    a9c6:	2e e2       	ldi	r18, 0x2E	; 46
    a9c8:	21 93       	st	Z+, r18
    a9ca:	01 96       	adiw	r24, 0x01	; 1
    a9cc:	8b 30       	cpi	r24, 0x0B	; 11
    a9ce:	91 05       	cpc	r25, r1
    a9d0:	a1 f7       	brne	.-24     	; 0xa9ba <follow_path+0x124>
    a9d2:	89 81       	ldd	r24, Y+1	; 0x01
    a9d4:	80 62       	ori	r24, 0x20	; 32
    a9d6:	d8 01       	movw	r26, r16
    a9d8:	97 96       	adiw	r26, 0x27	; 39
    a9da:	8c 93       	st	X, r24
    a9dc:	c8 01       	movw	r24, r16
    a9de:	a0 dc       	rcall	.-1728   	; 0xa320 <dir_find>
    a9e0:	d8 01       	movw	r26, r16
    a9e2:	97 96       	adiw	r26, 0x27	; 39
    a9e4:	2c 91       	ld	r18, X
    a9e6:	00 97       	sbiw	r24, 0x00	; 0
    a9e8:	09 f0       	breq	.+2      	; 0xa9ec <follow_path+0x156>
    a9ea:	56 c1       	rjmp	.+684    	; 0xac98 <follow_path+0x402>
    a9ec:	22 fd       	sbrc	r18, 2
    a9ee:	70 c1       	rjmp	.+736    	; 0xacd0 <follow_path+0x43a>
    a9f0:	f8 01       	movw	r30, r16
    a9f2:	84 81       	ldd	r24, Z+4	; 0x04
    a9f4:	84 ff       	sbrs	r24, 4
    a9f6:	63 c1       	rjmp	.+710    	; 0xacbe <follow_path+0x428>
    a9f8:	66 85       	ldd	r22, Z+14	; 0x0e
    a9fa:	77 85       	ldd	r23, Z+15	; 0x0f
    a9fc:	71 70       	andi	r23, 0x01	; 1
    a9fe:	2c 81       	ldd	r18, Y+4	; 0x04
    aa00:	3d 81       	ldd	r19, Y+5	; 0x05
    aa02:	62 0f       	add	r22, r18
    aa04:	73 1f       	adc	r23, r19
    aa06:	d1 01       	movw	r26, r2
    aa08:	8c 91       	ld	r24, X
    aa0a:	0e 94 5d 46 	call	0x8cba	; 0x8cba <ld_clust.isra.1>
    aa0e:	f8 01       	movw	r30, r16
    aa10:	66 83       	std	Z+6, r22	; 0x06
    aa12:	77 83       	std	Z+7, r23	; 0x07
    aa14:	80 87       	std	Z+8, r24	; 0x08
    aa16:	91 87       	std	Z+9, r25	; 0x09
    aa18:	d8 01       	movw	r26, r16
    aa1a:	ed 91       	ld	r30, X+
    aa1c:	fc 91       	ld	r31, X
    aa1e:	c3 84       	ldd	r12, Z+11	; 0x0b
    aa20:	d4 84       	ldd	r13, Z+12	; 0x0c
    aa22:	26 01       	movw	r4, r12
    aa24:	36 01       	movw	r6, r12
    aa26:	47 01       	movw	r8, r14
    aa28:	1f 82       	std	Y+7, r1	; 0x07
    aa2a:	1e 82       	std	Y+6, r1	; 0x06
    aa2c:	9b cf       	rjmp	.-202    	; 0xa964 <follow_path+0xce>
    aa2e:	f7 01       	movw	r30, r14
    aa30:	ea 0d       	add	r30, r10
    aa32:	fb 1d       	adc	r31, r11
    aa34:	03 c0       	rjmp	.+6      	; 0xaa3c <follow_path+0x1a6>
    aa36:	2c 35       	cpi	r18, 0x5C	; 92
    aa38:	09 f0       	breq	.+2      	; 0xaa3c <follow_path+0x1a6>
    aa3a:	a0 cf       	rjmp	.-192    	; 0xa97c <follow_path+0xe6>
    aa3c:	5f 01       	movw	r10, r30
    aa3e:	ae 18       	sub	r10, r14
    aa40:	bf 08       	sbc	r11, r15
    aa42:	21 91       	ld	r18, Z+
    aa44:	2f 32       	cpi	r18, 0x2F	; 47
    aa46:	b9 f7       	brne	.-18     	; 0xaa36 <follow_path+0x1a0>
    aa48:	f9 cf       	rjmp	.-14     	; 0xaa3c <follow_path+0x1a6>
    aa4a:	30 e0       	ldi	r19, 0x00	; 0
    aa4c:	82 17       	cp	r24, r18
    aa4e:	93 07       	cpc	r25, r19
    aa50:	09 f0       	breq	.+2      	; 0xaa54 <follow_path+0x1be>
    aa52:	7f cf       	rjmp	.-258    	; 0xa952 <follow_path+0xbc>
    aa54:	1e c1       	rjmp	.+572    	; 0xac92 <follow_path+0x3fc>
    aa56:	19 82       	std	Y+1, r1	; 0x01
    aa58:	98 cf       	rjmp	.-208    	; 0xa98a <follow_path+0xf4>
    aa5a:	2e 81       	ldd	r18, Y+6	; 0x06
    aa5c:	3f 81       	ldd	r19, Y+7	; 0x07
    aa5e:	22 30       	cpi	r18, 0x02	; 2
    aa60:	31 05       	cpc	r19, r1
    aa62:	41 f4       	brne	.+16     	; 0xaa74 <follow_path+0x1de>
    aa64:	d6 01       	movw	r26, r12
    aa66:	12 96       	adiw	r26, 0x02	; 2
    aa68:	8d 91       	ld	r24, X+
    aa6a:	9c 91       	ld	r25, X
    aa6c:	13 97       	sbiw	r26, 0x03	; 3
    aa6e:	8e 97       	sbiw	r24, 0x2e	; 46
    aa70:	09 f4       	brne	.+2      	; 0xaa74 <follow_path+0x1de>
    aa72:	96 cf       	rjmp	.-212    	; 0xa9a0 <follow_path+0x10a>
    aa74:	ec 0d       	add	r30, r12
    aa76:	fd 1d       	adc	r31, r13
    aa78:	0d c0       	rjmp	.+26     	; 0xaa94 <follow_path+0x1fe>
    aa7a:	20 e2       	ldi	r18, 0x20	; 32
    aa7c:	a5 cf       	rjmp	.-182    	; 0xa9c8 <follow_path+0x132>
    aa7e:	92 91       	ld	r25, -Z
    aa80:	82 91       	ld	r24, -Z
    aa82:	80 32       	cpi	r24, 0x20	; 32
    aa84:	91 05       	cpc	r25, r1
    aa86:	59 f4       	brne	.+22     	; 0xaa9e <follow_path+0x208>
    aa88:	2e 81       	ldd	r18, Y+6	; 0x06
    aa8a:	3f 81       	ldd	r19, Y+7	; 0x07
    aa8c:	21 50       	subi	r18, 0x01	; 1
    aa8e:	31 09       	sbc	r19, r1
    aa90:	3f 83       	std	Y+7, r19	; 0x07
    aa92:	2e 83       	std	Y+6, r18	; 0x06
    aa94:	8e 81       	ldd	r24, Y+6	; 0x06
    aa96:	9f 81       	ldd	r25, Y+7	; 0x07
    aa98:	89 2b       	or	r24, r25
    aa9a:	89 f7       	brne	.-30     	; 0xaa7e <follow_path+0x1e8>
    aa9c:	02 c0       	rjmp	.+4      	; 0xaaa2 <follow_path+0x20c>
    aa9e:	8e 97       	sbiw	r24, 0x2e	; 46
    aaa0:	99 f3       	breq	.-26     	; 0xaa88 <follow_path+0x1f2>
    aaa2:	ae 80       	ldd	r10, Y+6	; 0x06
    aaa4:	bf 80       	ldd	r11, Y+7	; 0x07
    aaa6:	aa 0c       	add	r10, r10
    aaa8:	bb 1c       	adc	r11, r11
    aaaa:	ac 0c       	add	r10, r12
    aaac:	bd 1c       	adc	r11, r13
    aaae:	d5 01       	movw	r26, r10
    aab0:	1d 92       	st	X+, r1
    aab2:	1c 92       	st	X, r1
    aab4:	ee 81       	ldd	r30, Y+6	; 0x06
    aab6:	ff 81       	ldd	r31, Y+7	; 0x07
    aab8:	ef 2b       	or	r30, r31
    aaba:	09 f4       	brne	.+2      	; 0xaabe <follow_path+0x228>
    aabc:	ea c0       	rjmp	.+468    	; 0xac92 <follow_path+0x3fc>
    aabe:	4b e0       	ldi	r20, 0x0B	; 11
    aac0:	50 e0       	ldi	r21, 0x00	; 0
    aac2:	60 e2       	ldi	r22, 0x20	; 32
    aac4:	70 e0       	ldi	r23, 0x00	; 0
    aac6:	8a 81       	ldd	r24, Y+2	; 0x02
    aac8:	9b 81       	ldd	r25, Y+3	; 0x03
    aaca:	0e 94 89 45 	call	0x8b12	; 0x8b12 <mem_set>
    aace:	80 e0       	ldi	r24, 0x00	; 0
    aad0:	90 e0       	ldi	r25, 0x00	; 0
    aad2:	d2 01       	movw	r26, r4
    aad4:	2d 91       	ld	r18, X+
    aad6:	3d 91       	ld	r19, X+
    aad8:	2d 01       	movw	r4, r26
    aada:	20 32       	cpi	r18, 0x20	; 32
    aadc:	31 05       	cpc	r19, r1
    aade:	11 f4       	brne	.+4      	; 0xaae4 <follow_path+0x24e>
    aae0:	01 96       	adiw	r24, 0x01	; 1
    aae2:	f7 cf       	rjmp	.-18     	; 0xaad2 <follow_path+0x23c>
    aae4:	2e 32       	cpi	r18, 0x2E	; 46
    aae6:	31 05       	cpc	r19, r1
    aae8:	d9 f3       	breq	.-10     	; 0xaae0 <follow_path+0x24a>
    aaea:	00 97       	sbiw	r24, 0x00	; 0
    aaec:	19 f0       	breq	.+6      	; 0xaaf4 <follow_path+0x25e>
    aaee:	b9 81       	ldd	r27, Y+1	; 0x01
    aaf0:	b3 60       	ori	r27, 0x03	; 3
    aaf2:	b9 83       	std	Y+1, r27	; 0x01
    aaf4:	f5 01       	movw	r30, r10
    aaf6:	32 91       	ld	r19, -Z
    aaf8:	22 91       	ld	r18, -Z
    aafa:	2e 32       	cpi	r18, 0x2E	; 46
    aafc:	31 05       	cpc	r19, r1
    aafe:	41 f0       	breq	.+16     	; 0xab10 <follow_path+0x27a>
    ab00:	2e 81       	ldd	r18, Y+6	; 0x06
    ab02:	3f 81       	ldd	r19, Y+7	; 0x07
    ab04:	21 50       	subi	r18, 0x01	; 1
    ab06:	31 09       	sbc	r19, r1
    ab08:	3f 83       	std	Y+7, r19	; 0x07
    ab0a:	2e 83       	std	Y+6, r18	; 0x06
    ab0c:	23 2b       	or	r18, r19
    ab0e:	99 f7       	brne	.-26     	; 0xaaf6 <follow_path+0x260>
    ab10:	48 e0       	ldi	r20, 0x08	; 8
    ab12:	a4 2e       	mov	r10, r20
    ab14:	b1 2c       	mov	r11, r1
    ab16:	81 2c       	mov	r8, r1
    ab18:	91 2c       	mov	r9, r1
    ab1a:	41 2c       	mov	r4, r1
    ab1c:	3c 01       	movw	r6, r24
    ab1e:	3f ef       	ldi	r19, 0xFF	; 255
    ab20:	63 1a       	sub	r6, r19
    ab22:	73 0a       	sbc	r7, r19
    ab24:	88 0f       	add	r24, r24
    ab26:	99 1f       	adc	r25, r25
    ab28:	f6 01       	movw	r30, r12
    ab2a:	e8 0f       	add	r30, r24
    ab2c:	f9 1f       	adc	r31, r25
    ab2e:	80 81       	ld	r24, Z
    ab30:	91 81       	ldd	r25, Z+1	; 0x01
    ab32:	00 97       	sbiw	r24, 0x00	; 0
    ab34:	09 f4       	brne	.+2      	; 0xab38 <follow_path+0x2a2>
    ab36:	75 c0       	rjmp	.+234    	; 0xac22 <follow_path+0x38c>
    ab38:	80 32       	cpi	r24, 0x20	; 32
    ab3a:	91 05       	cpc	r25, r1
    ab3c:	41 f0       	breq	.+16     	; 0xab4e <follow_path+0x2b8>
    ab3e:	8e 32       	cpi	r24, 0x2E	; 46
    ab40:	91 05       	cpc	r25, r1
    ab42:	51 f4       	brne	.+20     	; 0xab58 <follow_path+0x2c2>
    ab44:	8e 81       	ldd	r24, Y+6	; 0x06
    ab46:	9f 81       	ldd	r25, Y+7	; 0x07
    ab48:	68 16       	cp	r6, r24
    ab4a:	79 06       	cpc	r7, r25
    ab4c:	71 f0       	breq	.+28     	; 0xab6a <follow_path+0x2d4>
    ab4e:	99 81       	ldd	r25, Y+1	; 0x01
    ab50:	93 60       	ori	r25, 0x03	; 3
    ab52:	99 83       	std	Y+1, r25	; 0x01
    ab54:	c3 01       	movw	r24, r6
    ab56:	e2 cf       	rjmp	.-60     	; 0xab1c <follow_path+0x286>
    ab58:	8a 14       	cp	r8, r10
    ab5a:	9b 04       	cpc	r9, r11
    ab5c:	50 f4       	brcc	.+20     	; 0xab72 <follow_path+0x2dc>
    ab5e:	ae 81       	ldd	r26, Y+6	; 0x06
    ab60:	bf 81       	ldd	r27, Y+7	; 0x07
    ab62:	6a 16       	cp	r6, r26
    ab64:	7b 06       	cpc	r7, r27
    ab66:	49 f5       	brne	.+82     	; 0xabba <follow_path+0x324>
    ab68:	ad c0       	rjmp	.+346    	; 0xacc4 <follow_path+0x42e>
    ab6a:	8a 14       	cp	r8, r10
    ab6c:	9b 04       	cpc	r9, r11
    ab6e:	08 f4       	brcc	.+2      	; 0xab72 <follow_path+0x2dc>
    ab70:	a9 c0       	rjmp	.+338    	; 0xacc4 <follow_path+0x42e>
    ab72:	bb e0       	ldi	r27, 0x0B	; 11
    ab74:	ab 16       	cp	r10, r27
    ab76:	b1 04       	cpc	r11, r1
    ab78:	39 f4       	brne	.+14     	; 0xab88 <follow_path+0x2f2>
    ab7a:	e9 81       	ldd	r30, Y+1	; 0x01
    ab7c:	e3 60       	ori	r30, 0x03	; 3
    ab7e:	e9 83       	std	Y+1, r30	; 0x01
    ab80:	2b e0       	ldi	r18, 0x0B	; 11
    ab82:	a2 2e       	mov	r10, r18
    ab84:	b1 2c       	mov	r11, r1
    ab86:	4d c0       	rjmp	.+154    	; 0xac22 <follow_path+0x38c>
    ab88:	2e 81       	ldd	r18, Y+6	; 0x06
    ab8a:	3f 81       	ldd	r19, Y+7	; 0x07
    ab8c:	62 16       	cp	r6, r18
    ab8e:	73 06       	cpc	r7, r19
    ab90:	49 f0       	breq	.+18     	; 0xaba4 <follow_path+0x30e>
    ab92:	39 81       	ldd	r19, Y+1	; 0x01
    ab94:	33 60       	ori	r19, 0x03	; 3
    ab96:	39 83       	std	Y+1, r19	; 0x01
    ab98:	8e 81       	ldd	r24, Y+6	; 0x06
    ab9a:	9f 81       	ldd	r25, Y+7	; 0x07
    ab9c:	86 15       	cp	r24, r6
    ab9e:	97 05       	cpc	r25, r7
    aba0:	08 f4       	brcc	.+2      	; 0xaba4 <follow_path+0x30e>
    aba2:	3f c0       	rjmp	.+126    	; 0xac22 <follow_path+0x38c>
    aba4:	44 0c       	add	r4, r4
    aba6:	44 0c       	add	r4, r4
    aba8:	6e 80       	ldd	r6, Y+6	; 0x06
    abaa:	7f 80       	ldd	r7, Y+7	; 0x07
    abac:	8b e0       	ldi	r24, 0x0B	; 11
    abae:	a8 2e       	mov	r10, r24
    abb0:	b1 2c       	mov	r11, r1
    abb2:	98 e0       	ldi	r25, 0x08	; 8
    abb4:	89 2e       	mov	r8, r25
    abb6:	91 2c       	mov	r9, r1
    abb8:	cd cf       	rjmp	.-102    	; 0xab54 <follow_path+0x2be>
    abba:	80 38       	cpi	r24, 0x80	; 128
    abbc:	91 05       	cpc	r25, r1
    abbe:	80 f0       	brcs	.+32     	; 0xabe0 <follow_path+0x34a>
    abc0:	60 e0       	ldi	r22, 0x00	; 0
    abc2:	70 e0       	ldi	r23, 0x00	; 0
    abc4:	0e 94 19 6c 	call	0xd832	; 0xd832 <ff_convert>
    abc8:	00 97       	sbiw	r24, 0x00	; 0
    abca:	29 f0       	breq	.+10     	; 0xabd6 <follow_path+0x340>
    abcc:	fc 01       	movw	r30, r24
    abce:	e7 5c       	subi	r30, 0xC7	; 199
    abd0:	fd 4f       	sbci	r31, 0xFD	; 253
    abd2:	80 81       	ld	r24, Z
    abd4:	90 e0       	ldi	r25, 0x00	; 0
    abd6:	a9 81       	ldd	r26, Y+1	; 0x01
    abd8:	a2 60       	ori	r26, 0x02	; 2
    abda:	a9 83       	std	Y+1, r26	; 0x01
    abdc:	00 97       	sbiw	r24, 0x00	; 0
    abde:	49 f0       	breq	.+18     	; 0xabf2 <follow_path+0x35c>
    abe0:	ec ec       	ldi	r30, 0xCC	; 204
    abe2:	f7 e0       	ldi	r31, 0x07	; 7
    abe4:	21 91       	ld	r18, Z+
    abe6:	22 23       	and	r18, r18
    abe8:	51 f0       	breq	.+20     	; 0xabfe <follow_path+0x368>
    abea:	30 e0       	ldi	r19, 0x00	; 0
    abec:	82 17       	cp	r24, r18
    abee:	93 07       	cpc	r25, r19
    abf0:	c9 f7       	brne	.-14     	; 0xabe4 <follow_path+0x34e>
    abf2:	b9 81       	ldd	r27, Y+1	; 0x01
    abf4:	b3 60       	ori	r27, 0x03	; 3
    abf6:	b9 83       	std	Y+1, r27	; 0x01
    abf8:	8f e5       	ldi	r24, 0x5F	; 95
    abfa:	90 e0       	ldi	r25, 0x00	; 0
    abfc:	09 c0       	rjmp	.+18     	; 0xac10 <follow_path+0x37a>
    abfe:	9c 01       	movw	r18, r24
    ac00:	21 54       	subi	r18, 0x41	; 65
    ac02:	31 09       	sbc	r19, r1
    ac04:	2a 31       	cpi	r18, 0x1A	; 26
    ac06:	31 05       	cpc	r19, r1
    ac08:	c8 f5       	brcc	.+114    	; 0xac7c <follow_path+0x3e6>
    ac0a:	e4 2d       	mov	r30, r4
    ac0c:	e2 60       	ori	r30, 0x02	; 2
    ac0e:	4e 2e       	mov	r4, r30
    ac10:	f8 01       	movw	r30, r16
    ac12:	e8 0d       	add	r30, r8
    ac14:	f9 1d       	adc	r31, r9
    ac16:	84 8f       	std	Z+28, r24	; 0x1c
    ac18:	94 01       	movw	r18, r8
    ac1a:	2f 5f       	subi	r18, 0xFF	; 255
    ac1c:	3f 4f       	sbci	r19, 0xFF	; 255
    ac1e:	49 01       	movw	r8, r18
    ac20:	99 cf       	rjmp	.-206    	; 0xab54 <follow_path+0x2be>
    ac22:	d8 01       	movw	r26, r16
    ac24:	5c 96       	adiw	r26, 0x1c	; 28
    ac26:	8c 91       	ld	r24, X
    ac28:	5c 97       	sbiw	r26, 0x1c	; 28
    ac2a:	85 3e       	cpi	r24, 0xE5	; 229
    ac2c:	19 f4       	brne	.+6      	; 0xac34 <follow_path+0x39e>
    ac2e:	e5 e0       	ldi	r30, 0x05	; 5
    ac30:	5c 96       	adiw	r26, 0x1c	; 28
    ac32:	ec 93       	st	X, r30
    ac34:	f8 e0       	ldi	r31, 0x08	; 8
    ac36:	af 16       	cp	r10, r31
    ac38:	b1 04       	cpc	r11, r1
    ac3a:	11 f4       	brne	.+4      	; 0xac40 <follow_path+0x3aa>
    ac3c:	44 0c       	add	r4, r4
    ac3e:	44 0c       	add	r4, r4
    ac40:	84 2d       	mov	r24, r4
    ac42:	8c 70       	andi	r24, 0x0C	; 12
    ac44:	8c 30       	cpi	r24, 0x0C	; 12
    ac46:	21 f0       	breq	.+8      	; 0xac50 <follow_path+0x3ba>
    ac48:	94 2d       	mov	r25, r4
    ac4a:	93 70       	andi	r25, 0x03	; 3
    ac4c:	93 30       	cpi	r25, 0x03	; 3
    ac4e:	19 f4       	brne	.+6      	; 0xac56 <follow_path+0x3c0>
    ac50:	29 81       	ldd	r18, Y+1	; 0x01
    ac52:	22 60       	ori	r18, 0x02	; 2
    ac54:	29 83       	std	Y+1, r18	; 0x01
    ac56:	39 81       	ldd	r19, Y+1	; 0x01
    ac58:	31 fd       	sbrc	r19, 1
    ac5a:	0b c0       	rjmp	.+22     	; 0xac72 <follow_path+0x3dc>
    ac5c:	94 2d       	mov	r25, r4
    ac5e:	93 70       	andi	r25, 0x03	; 3
    ac60:	91 30       	cpi	r25, 0x01	; 1
    ac62:	11 f4       	brne	.+4      	; 0xac68 <follow_path+0x3d2>
    ac64:	30 61       	ori	r19, 0x10	; 16
    ac66:	39 83       	std	Y+1, r19	; 0x01
    ac68:	84 30       	cpi	r24, 0x04	; 4
    ac6a:	19 f4       	brne	.+6      	; 0xac72 <follow_path+0x3dc>
    ac6c:	89 81       	ldd	r24, Y+1	; 0x01
    ac6e:	88 60       	ori	r24, 0x08	; 8
    ac70:	89 83       	std	Y+1, r24	; 0x01
    ac72:	e9 81       	ldd	r30, Y+1	; 0x01
    ac74:	d8 01       	movw	r26, r16
    ac76:	97 96       	adiw	r26, 0x27	; 39
    ac78:	ec 93       	st	X, r30
    ac7a:	b0 ce       	rjmp	.-672    	; 0xa9dc <follow_path+0x146>
    ac7c:	9c 01       	movw	r18, r24
    ac7e:	21 56       	subi	r18, 0x61	; 97
    ac80:	31 09       	sbc	r19, r1
    ac82:	2a 31       	cpi	r18, 0x1A	; 26
    ac84:	31 05       	cpc	r19, r1
    ac86:	20 f6       	brcc	.-120    	; 0xac10 <follow_path+0x37a>
    ac88:	f4 2d       	mov	r31, r4
    ac8a:	f1 60       	ori	r31, 0x01	; 1
    ac8c:	4f 2e       	mov	r4, r31
    ac8e:	80 97       	sbiw	r24, 0x20	; 32
    ac90:	bf cf       	rjmp	.-130    	; 0xac10 <follow_path+0x37a>
    ac92:	86 e0       	ldi	r24, 0x06	; 6
    ac94:	90 e0       	ldi	r25, 0x00	; 0
    ac96:	1c c0       	rjmp	.+56     	; 0xacd0 <follow_path+0x43a>
    ac98:	84 30       	cpi	r24, 0x04	; 4
    ac9a:	91 05       	cpc	r25, r1
    ac9c:	c9 f4       	brne	.+50     	; 0xacd0 <follow_path+0x43a>
    ac9e:	32 2f       	mov	r19, r18
    aca0:	34 70       	andi	r19, 0x04	; 4
    aca2:	25 ff       	sbrs	r18, 5
    aca4:	0a c0       	rjmp	.+20     	; 0xacba <follow_path+0x424>
    aca6:	33 23       	and	r19, r19
    aca8:	09 f4       	brne	.+2      	; 0xacac <follow_path+0x416>
    acaa:	b6 ce       	rjmp	.-660    	; 0xaa18 <follow_path+0x182>
    acac:	80 e8       	ldi	r24, 0x80	; 128
    acae:	d8 01       	movw	r26, r16
    acb0:	97 96       	adiw	r26, 0x27	; 39
    acb2:	8c 93       	st	X, r24
    acb4:	80 e0       	ldi	r24, 0x00	; 0
    acb6:	90 e0       	ldi	r25, 0x00	; 0
    acb8:	0b c0       	rjmp	.+22     	; 0xacd0 <follow_path+0x43a>
    acba:	31 11       	cpse	r19, r1
    acbc:	09 c0       	rjmp	.+18     	; 0xacd0 <follow_path+0x43a>
    acbe:	85 e0       	ldi	r24, 0x05	; 5
    acc0:	90 e0       	ldi	r25, 0x00	; 0
    acc2:	06 c0       	rjmp	.+12     	; 0xacd0 <follow_path+0x43a>
    acc4:	bb e0       	ldi	r27, 0x0B	; 11
    acc6:	ab 16       	cp	r10, r27
    acc8:	b1 04       	cpc	r11, r1
    acca:	09 f0       	breq	.+2      	; 0xacce <follow_path+0x438>
    accc:	6b cf       	rjmp	.-298    	; 0xaba4 <follow_path+0x30e>
    acce:	55 cf       	rjmp	.-342    	; 0xab7a <follow_path+0x2e4>
    acd0:	27 96       	adiw	r28, 0x07	; 7
    acd2:	e2 e1       	ldi	r30, 0x12	; 18
    acd4:	0c 94 dd e8 	jmp	0x1d1ba	; 0x1d1ba <__epilogue_restores__>

0000acd8 <f_mount>:
    acd8:	a6 e0       	ldi	r26, 0x06	; 6
    acda:	b0 e0       	ldi	r27, 0x00	; 0
    acdc:	e2 e7       	ldi	r30, 0x72	; 114
    acde:	f6 e5       	ldi	r31, 0x56	; 86
    ace0:	0c 94 d0 e8 	jmp	0x1d1a0	; 0x1d1a0 <__prologue_saves__+0x1e>
    ace4:	9c 83       	std	Y+4, r25	; 0x04
    ace6:	8b 83       	std	Y+3, r24	; 0x03
    ace8:	7e 83       	std	Y+6, r23	; 0x06
    acea:	6d 83       	std	Y+5, r22	; 0x05
    acec:	14 2f       	mov	r17, r20
    acee:	7a 83       	std	Y+2, r23	; 0x02
    acf0:	69 83       	std	Y+1, r22	; 0x01
    acf2:	ce 01       	movw	r24, r28
    acf4:	01 96       	adiw	r24, 0x01	; 1
    acf6:	0e 94 05 46 	call	0x8c0a	; 0x8c0a <get_ldnumber>
    acfa:	97 fd       	sbrc	r25, 7
    acfc:	22 c0       	rjmp	.+68     	; 0xad42 <f_mount+0x6a>
    acfe:	88 0f       	add	r24, r24
    ad00:	99 1f       	adc	r25, r25
    ad02:	fc 01       	movw	r30, r24
    ad04:	e8 52       	subi	r30, 0x28	; 40
    ad06:	f8 4e       	sbci	r31, 0xE8	; 232
    ad08:	01 90       	ld	r0, Z+
    ad0a:	f0 81       	ld	r31, Z
    ad0c:	e0 2d       	mov	r30, r0
    ad0e:	30 97       	sbiw	r30, 0x00	; 0
    ad10:	09 f0       	breq	.+2      	; 0xad14 <f_mount+0x3c>
    ad12:	10 82       	st	Z, r1
    ad14:	eb 81       	ldd	r30, Y+3	; 0x03
    ad16:	fc 81       	ldd	r31, Y+4	; 0x04
    ad18:	30 97       	sbiw	r30, 0x00	; 0
    ad1a:	09 f0       	breq	.+2      	; 0xad1e <f_mount+0x46>
    ad1c:	10 82       	st	Z, r1
    ad1e:	dc 01       	movw	r26, r24
    ad20:	a8 52       	subi	r26, 0x28	; 40
    ad22:	b8 4e       	sbci	r27, 0xE8	; 232
    ad24:	ed 93       	st	X+, r30
    ad26:	fc 93       	st	X, r31
    ad28:	ef 2b       	or	r30, r31
    ad2a:	71 f0       	breq	.+28     	; 0xad48 <f_mount+0x70>
    ad2c:	11 30       	cpi	r17, 0x01	; 1
    ad2e:	61 f4       	brne	.+24     	; 0xad48 <f_mount+0x70>
    ad30:	40 e0       	ldi	r20, 0x00	; 0
    ad32:	be 01       	movw	r22, r28
    ad34:	6d 5f       	subi	r22, 0xFD	; 253
    ad36:	7f 4f       	sbci	r23, 0xFF	; 255
    ad38:	ce 01       	movw	r24, r28
    ad3a:	05 96       	adiw	r24, 0x05	; 5
    ad3c:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <find_volume>
    ad40:	05 c0       	rjmp	.+10     	; 0xad4c <f_mount+0x74>
    ad42:	8b e0       	ldi	r24, 0x0B	; 11
    ad44:	90 e0       	ldi	r25, 0x00	; 0
    ad46:	02 c0       	rjmp	.+4      	; 0xad4c <f_mount+0x74>
    ad48:	80 e0       	ldi	r24, 0x00	; 0
    ad4a:	90 e0       	ldi	r25, 0x00	; 0
    ad4c:	26 96       	adiw	r28, 0x06	; 6
    ad4e:	e3 e0       	ldi	r30, 0x03	; 3
    ad50:	0c 94 ec e8 	jmp	0x1d1d8	; 0x1d1d8 <__epilogue_restores__+0x1e>

0000ad54 <f_open>:
    ad54:	2f 92       	push	r2
    ad56:	3f 92       	push	r3
    ad58:	4f 92       	push	r4
    ad5a:	5f 92       	push	r5
    ad5c:	6f 92       	push	r6
    ad5e:	7f 92       	push	r7
    ad60:	8f 92       	push	r8
    ad62:	9f 92       	push	r9
    ad64:	af 92       	push	r10
    ad66:	bf 92       	push	r11
    ad68:	df 92       	push	r13
    ad6a:	ef 92       	push	r14
    ad6c:	ff 92       	push	r15
    ad6e:	0f 93       	push	r16
    ad70:	1f 93       	push	r17
    ad72:	cf 93       	push	r28
    ad74:	df 93       	push	r29
    ad76:	cd b7       	in	r28, 0x3d	; 61
    ad78:	de b7       	in	r29, 0x3e	; 62
    ad7a:	e6 97       	sbiw	r28, 0x36	; 54
    ad7c:	0f b6       	in	r0, 0x3f	; 63
    ad7e:	f8 94       	cli
    ad80:	de bf       	out	0x3e, r29	; 62
    ad82:	0f be       	out	0x3f, r0	; 63
    ad84:	cd bf       	out	0x3d, r28	; 61
    ad86:	7a ab       	std	Y+50, r23	; 0x32
    ad88:	69 ab       	std	Y+49, r22	; 0x31
    ad8a:	00 97       	sbiw	r24, 0x00	; 0
    ad8c:	09 f4       	brne	.+2      	; 0xad90 <f_open+0x3c>
    ad8e:	b0 c1       	rjmp	.+864    	; 0xb0f0 <f_open+0x39c>
    ad90:	94 2e       	mov	r9, r20
    ad92:	7c 01       	movw	r14, r24
    ad94:	24 2f       	mov	r18, r20
    ad96:	2f 73       	andi	r18, 0x3F	; 63
    ad98:	d2 2e       	mov	r13, r18
    ad9a:	42 2f       	mov	r20, r18
    ad9c:	be 01       	movw	r22, r28
    ad9e:	61 5d       	subi	r22, 0xD1	; 209
    ada0:	7f 4f       	sbci	r23, 0xFF	; 255
    ada2:	ce 01       	movw	r24, r28
    ada4:	c1 96       	adiw	r24, 0x31	; 49
    ada6:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <find_volume>
    adaa:	00 97       	sbiw	r24, 0x00	; 0
    adac:	09 f0       	breq	.+2      	; 0xadb0 <f_open+0x5c>
    adae:	9a c1       	rjmp	.+820    	; 0xb0e4 <f_open+0x390>
    adb0:	8f a5       	ldd	r24, Y+47	; 0x2f
    adb2:	98 a9       	ldd	r25, Y+48	; 0x30
    adb4:	9a 83       	std	Y+2, r25	; 0x02
    adb6:	89 83       	std	Y+1, r24	; 0x01
    adb8:	80 e0       	ldi	r24, 0x00	; 0
    adba:	92 e0       	ldi	r25, 0x02	; 2
    adbc:	0e 94 13 6c 	call	0xd826	; 0xd826 <ff_memalloc>
    adc0:	5c 01       	movw	r10, r24
    adc2:	00 97       	sbiw	r24, 0x00	; 0
    adc4:	09 f4       	brne	.+2      	; 0xadc8 <f_open+0x74>
    adc6:	96 c1       	rjmp	.+812    	; 0xb0f4 <f_open+0x3a0>
    adc8:	ef a5       	ldd	r30, Y+47	; 0x2f
    adca:	f8 a9       	ldd	r31, Y+48	; 0x30
    adcc:	94 87       	std	Z+12, r25	; 0x0c
    adce:	83 87       	std	Z+11, r24	; 0x0b
    add0:	69 a9       	ldd	r22, Y+49	; 0x31
    add2:	7a a9       	ldd	r23, Y+50	; 0x32
    add4:	ce 01       	movw	r24, r28
    add6:	01 96       	adiw	r24, 0x01	; 1
    add8:	5e dd       	rcall	.-1348   	; 0xa896 <follow_path>
    adda:	8c 01       	movw	r16, r24
    addc:	89 2b       	or	r24, r25
    adde:	29 f4       	brne	.+10     	; 0xadea <f_open+0x96>
    ade0:	88 a5       	ldd	r24, Y+40	; 0x28
    ade2:	87 ff       	sbrs	r24, 7
    ade4:	02 c0       	rjmp	.+4      	; 0xadea <f_open+0x96>
    ade6:	06 e0       	ldi	r16, 0x06	; 6
    ade8:	10 e0       	ldi	r17, 0x00	; 0
    adea:	89 2d       	mov	r24, r9
    adec:	8c 71       	andi	r24, 0x1C	; 28
    adee:	09 f4       	brne	.+2      	; 0xadf2 <f_open+0x9e>
    adf0:	7e c0       	rjmp	.+252    	; 0xaeee <f_open+0x19a>
    adf2:	01 15       	cp	r16, r1
    adf4:	11 05       	cpc	r17, r1
    adf6:	79 f0       	breq	.+30     	; 0xae16 <f_open+0xc2>
    adf8:	04 30       	cpi	r16, 0x04	; 4
    adfa:	11 05       	cpc	r17, r1
    adfc:	09 f0       	breq	.+2      	; 0xae00 <f_open+0xac>
    adfe:	8a c1       	rjmp	.+788    	; 0xb114 <f_open+0x3c0>
    ae00:	ce 01       	movw	r24, r28
    ae02:	01 96       	adiw	r24, 0x01	; 1
    ae04:	a4 db       	rcall	.-2232   	; 0xa54e <dir_register>
    ae06:	8c 01       	movw	r16, r24
    ae08:	89 2b       	or	r24, r25
    ae0a:	09 f0       	breq	.+2      	; 0xae0e <f_open+0xba>
    ae0c:	83 c1       	rjmp	.+774    	; 0xb114 <f_open+0x3c0>
    ae0e:	8d 2d       	mov	r24, r13
    ae10:	88 60       	ori	r24, 0x08	; 8
    ae12:	d8 2e       	mov	r13, r24
    ae14:	06 c0       	rjmp	.+12     	; 0xae22 <f_open+0xce>
    ae16:	8d 81       	ldd	r24, Y+5	; 0x05
    ae18:	81 71       	andi	r24, 0x11	; 17
    ae1a:	09 f0       	breq	.+2      	; 0xae1e <f_open+0xca>
    ae1c:	79 c1       	rjmp	.+754    	; 0xb110 <f_open+0x3bc>
    ae1e:	92 fc       	sbrc	r9, 2
    ae20:	6e c1       	rjmp	.+732    	; 0xb0fe <f_open+0x3aa>
    ae22:	d3 fe       	sbrs	r13, 3
    ae24:	74 c0       	rjmp	.+232    	; 0xaf0e <f_open+0x1ba>
    ae26:	0e 94 23 73 	call	0xe646	; 0xe646 <get_fattime>
    ae2a:	2b 01       	movw	r4, r22
    ae2c:	3c 01       	movw	r6, r24
    ae2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ae30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ae32:	b3 01       	movw	r22, r6
    ae34:	a2 01       	movw	r20, r4
    ae36:	0e 96       	adiw	r24, 0x0e	; 14
    ae38:	0e 94 83 45 	call	0x8b06	; 0x8b06 <st_dword>
    ae3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ae3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    ae40:	b3 01       	movw	r22, r6
    ae42:	a2 01       	movw	r20, r4
    ae44:	46 96       	adiw	r24, 0x16	; 22
    ae46:	0e 94 83 45 	call	0x8b06	; 0x8b06 <st_dword>
    ae4a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    ae4c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    ae4e:	80 e2       	ldi	r24, 0x20	; 32
    ae50:	83 87       	std	Z+11, r24	; 0x0b
    ae52:	0b 8d       	ldd	r16, Y+27	; 0x1b
    ae54:	1c 8d       	ldd	r17, Y+28	; 0x1c
    ae56:	8f a4       	ldd	r8, Y+47	; 0x2f
    ae58:	98 a8       	ldd	r9, Y+48	; 0x30
    ae5a:	b8 01       	movw	r22, r16
    ae5c:	d4 01       	movw	r26, r8
    ae5e:	8c 91       	ld	r24, X
    ae60:	0e 94 5d 46 	call	0x8cba	; 0x8cba <ld_clust.isra.1>
    ae64:	2b 01       	movw	r4, r22
    ae66:	3c 01       	movw	r6, r24
    ae68:	f8 01       	movw	r30, r16
    ae6a:	12 8e       	std	Z+26, r1	; 0x1a
    ae6c:	13 8e       	std	Z+27, r1	; 0x1b
    ae6e:	d4 01       	movw	r26, r8
    ae70:	8c 91       	ld	r24, X
    ae72:	83 30       	cpi	r24, 0x03	; 3
    ae74:	11 f4       	brne	.+4      	; 0xae7a <f_open+0x126>
    ae76:	14 8a       	std	Z+20, r1	; 0x14
    ae78:	15 8a       	std	Z+21, r1	; 0x15
    ae7a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    ae7c:	fc 8d       	ldd	r31, Y+28	; 0x1c
    ae7e:	14 8e       	std	Z+28, r1	; 0x1c
    ae80:	15 8e       	std	Z+29, r1	; 0x1d
    ae82:	16 8e       	std	Z+30, r1	; 0x1e
    ae84:	17 8e       	std	Z+31, r1	; 0x1f
    ae86:	81 e0       	ldi	r24, 0x01	; 1
    ae88:	f4 01       	movw	r30, r8
    ae8a:	83 83       	std	Z+3, r24	; 0x03
    ae8c:	41 14       	cp	r4, r1
    ae8e:	51 04       	cpc	r5, r1
    ae90:	61 04       	cpc	r6, r1
    ae92:	71 04       	cpc	r7, r1
    ae94:	c9 f1       	breq	.+114    	; 0xaf08 <f_open+0x1b4>
    ae96:	81 a9       	ldd	r24, Z+49	; 0x31
    ae98:	92 a9       	ldd	r25, Z+50	; 0x32
    ae9a:	a3 a9       	ldd	r26, Z+51	; 0x33
    ae9c:	b4 a9       	ldd	r27, Z+52	; 0x34
    ae9e:	8b ab       	std	Y+51, r24	; 0x33
    aea0:	9c ab       	std	Y+52, r25	; 0x34
    aea2:	ad ab       	std	Y+53, r26	; 0x35
    aea4:	be ab       	std	Y+54, r27	; 0x36
    aea6:	00 e0       	ldi	r16, 0x00	; 0
    aea8:	10 e0       	ldi	r17, 0x00	; 0
    aeaa:	98 01       	movw	r18, r16
    aeac:	b3 01       	movw	r22, r6
    aeae:	a2 01       	movw	r20, r4
    aeb0:	ce 01       	movw	r24, r28
    aeb2:	01 96       	adiw	r24, 0x01	; 1
    aeb4:	0e 94 af 4d 	call	0x9b5e	; 0x9b5e <remove_chain>
    aeb8:	8c 01       	movw	r16, r24
    aeba:	89 2b       	or	r24, r25
    aebc:	09 f0       	breq	.+2      	; 0xaec0 <f_open+0x16c>
    aebe:	2a c1       	rjmp	.+596    	; 0xb114 <f_open+0x3c0>
    aec0:	4b a9       	ldd	r20, Y+51	; 0x33
    aec2:	5c a9       	ldd	r21, Y+52	; 0x34
    aec4:	6d a9       	ldd	r22, Y+53	; 0x35
    aec6:	7e a9       	ldd	r23, Y+54	; 0x36
    aec8:	8f a5       	ldd	r24, Y+47	; 0x2f
    aeca:	98 a9       	ldd	r25, Y+48	; 0x30
    aecc:	0e 94 45 47 	call	0x8e8a	; 0x8e8a <move_window>
    aed0:	8c 01       	movw	r16, r24
    aed2:	ef a5       	ldd	r30, Y+47	; 0x2f
    aed4:	f8 a9       	ldd	r31, Y+48	; 0x30
    aed6:	b1 e0       	ldi	r27, 0x01	; 1
    aed8:	4b 1a       	sub	r4, r27
    aeda:	51 08       	sbc	r5, r1
    aedc:	61 08       	sbc	r6, r1
    aede:	71 08       	sbc	r7, r1
    aee0:	45 86       	std	Z+13, r4	; 0x0d
    aee2:	56 86       	std	Z+14, r5	; 0x0e
    aee4:	67 86       	std	Z+15, r6	; 0x0f
    aee6:	70 8a       	std	Z+16, r7	; 0x10
    aee8:	89 2b       	or	r24, r25
    aeea:	61 f0       	breq	.+24     	; 0xaf04 <f_open+0x1b0>
    aeec:	13 c1       	rjmp	.+550    	; 0xb114 <f_open+0x3c0>
    aeee:	01 15       	cp	r16, r1
    aef0:	11 05       	cpc	r17, r1
    aef2:	09 f0       	breq	.+2      	; 0xaef6 <f_open+0x1a2>
    aef4:	0f c1       	rjmp	.+542    	; 0xb114 <f_open+0x3c0>
    aef6:	8d 81       	ldd	r24, Y+5	; 0x05
    aef8:	84 fd       	sbrc	r24, 4
    aefa:	07 c1       	rjmp	.+526    	; 0xb10a <f_open+0x3b6>
    aefc:	91 fe       	sbrs	r9, 1
    aefe:	02 c0       	rjmp	.+4      	; 0xaf04 <f_open+0x1b0>
    af00:	80 fd       	sbrc	r24, 0
    af02:	06 c1       	rjmp	.+524    	; 0xb110 <f_open+0x3bc>
    af04:	d3 fe       	sbrs	r13, 3
    af06:	03 c0       	rjmp	.+6      	; 0xaf0e <f_open+0x1ba>
    af08:	ed 2d       	mov	r30, r13
    af0a:	e0 64       	ori	r30, 0x40	; 64
    af0c:	de 2e       	mov	r13, r30
    af0e:	0f a5       	ldd	r16, Y+47	; 0x2f
    af10:	18 a9       	ldd	r17, Y+48	; 0x30
    af12:	f8 01       	movw	r30, r16
    af14:	81 a9       	ldd	r24, Z+49	; 0x31
    af16:	92 a9       	ldd	r25, Z+50	; 0x32
    af18:	a3 a9       	ldd	r26, Z+51	; 0x33
    af1a:	b4 a9       	ldd	r27, Z+52	; 0x34
    af1c:	f7 01       	movw	r30, r14
    af1e:	84 8f       	std	Z+28, r24	; 0x1c
    af20:	95 8f       	std	Z+29, r25	; 0x1d
    af22:	a6 8f       	std	Z+30, r26	; 0x1e
    af24:	b7 8f       	std	Z+31, r27	; 0x1f
    af26:	8b 8c       	ldd	r8, Y+27	; 0x1b
    af28:	9c 8c       	ldd	r9, Y+28	; 0x1c
    af2a:	91 a2       	std	Z+33, r9	; 0x21
    af2c:	80 a2       	std	Z+32, r8	; 0x20
    af2e:	b4 01       	movw	r22, r8
    af30:	d8 01       	movw	r26, r16
    af32:	8c 91       	ld	r24, X
    af34:	0e 94 5d 46 	call	0x8cba	; 0x8cba <ld_clust.isra.1>
    af38:	f7 01       	movw	r30, r14
    af3a:	66 83       	std	Z+6, r22	; 0x06
    af3c:	77 83       	std	Z+7, r23	; 0x07
    af3e:	80 87       	std	Z+8, r24	; 0x08
    af40:	91 87       	std	Z+9, r25	; 0x09
    af42:	c4 01       	movw	r24, r8
    af44:	4c 96       	adiw	r24, 0x1c	; 28
    af46:	0e 94 6e 45 	call	0x8adc	; 0x8adc <ld_dword>
    af4a:	d7 01       	movw	r26, r14
    af4c:	1a 96       	adiw	r26, 0x0a	; 10
    af4e:	6d 93       	st	X+, r22
    af50:	7d 93       	st	X+, r23
    af52:	8d 93       	st	X+, r24
    af54:	9c 93       	st	X, r25
    af56:	1d 97       	sbiw	r26, 0x0d	; 13
    af58:	93 96       	adiw	r26, 0x23	; 35
    af5a:	1c 92       	st	X, r1
    af5c:	1e 92       	st	-X, r1
    af5e:	92 97       	sbiw	r26, 0x22	; 34
    af60:	11 96       	adiw	r26, 0x01	; 1
    af62:	1c 93       	st	X, r17
    af64:	0e 93       	st	-X, r16
    af66:	f8 01       	movw	r30, r16
    af68:	85 81       	ldd	r24, Z+5	; 0x05
    af6a:	96 81       	ldd	r25, Z+6	; 0x06
    af6c:	13 96       	adiw	r26, 0x03	; 3
    af6e:	9c 93       	st	X, r25
    af70:	8e 93       	st	-X, r24
    af72:	12 97       	sbiw	r26, 0x02	; 2
    af74:	1e 96       	adiw	r26, 0x0e	; 14
    af76:	dc 92       	st	X, r13
    af78:	1e 97       	sbiw	r26, 0x0e	; 14
    af7a:	1f 96       	adiw	r26, 0x0f	; 15
    af7c:	1c 92       	st	X, r1
    af7e:	1f 97       	sbiw	r26, 0x0f	; 15
    af80:	58 96       	adiw	r26, 0x18	; 24
    af82:	1d 92       	st	X+, r1
    af84:	1d 92       	st	X+, r1
    af86:	1d 92       	st	X+, r1
    af88:	1c 92       	st	X, r1
    af8a:	5b 97       	sbiw	r26, 0x1b	; 27
    af8c:	f7 01       	movw	r30, r14
    af8e:	10 8a       	std	Z+16, r1	; 0x10
    af90:	11 8a       	std	Z+17, r1	; 0x11
    af92:	12 8a       	std	Z+18, r1	; 0x12
    af94:	13 8a       	std	Z+19, r1	; 0x13
    af96:	c7 01       	movw	r24, r14
    af98:	84 96       	adiw	r24, 0x24	; 36
    af9a:	9c ab       	std	Y+52, r25	; 0x34
    af9c:	8b ab       	std	Y+51, r24	; 0x33
    af9e:	40 e0       	ldi	r20, 0x00	; 0
    afa0:	52 e0       	ldi	r21, 0x02	; 2
    afa2:	60 e0       	ldi	r22, 0x00	; 0
    afa4:	70 e0       	ldi	r23, 0x00	; 0
    afa6:	0e 94 89 45 	call	0x8b12	; 0x8b12 <mem_set>
    afaa:	d5 fc       	sbrc	r13, 5
    afac:	03 c0       	rjmp	.+6      	; 0xafb4 <f_open+0x260>
    afae:	00 e0       	ldi	r16, 0x00	; 0
    afb0:	10 e0       	ldi	r17, 0x00	; 0
    afb2:	91 c0       	rjmp	.+290    	; 0xb0d6 <f_open+0x382>
    afb4:	d7 01       	movw	r26, r14
    afb6:	1a 96       	adiw	r26, 0x0a	; 10
    afb8:	2d 90       	ld	r2, X+
    afba:	3d 90       	ld	r3, X+
    afbc:	4d 90       	ld	r4, X+
    afbe:	5c 90       	ld	r5, X
    afc0:	1d 97       	sbiw	r26, 0x0d	; 13
    afc2:	21 14       	cp	r2, r1
    afc4:	31 04       	cpc	r3, r1
    afc6:	41 04       	cpc	r4, r1
    afc8:	51 04       	cpc	r5, r1
    afca:	89 f3       	breq	.-30     	; 0xafae <f_open+0x25a>
    afcc:	f7 01       	movw	r30, r14
    afce:	20 8a       	std	Z+16, r2	; 0x10
    afd0:	31 8a       	std	Z+17, r3	; 0x11
    afd2:	42 8a       	std	Z+18, r4	; 0x12
    afd4:	53 8a       	std	Z+19, r5	; 0x13
    afd6:	ef a5       	ldd	r30, Y+47	; 0x2f
    afd8:	f8 a9       	ldd	r31, Y+48	; 0x30
    afda:	81 85       	ldd	r24, Z+9	; 0x09
    afdc:	92 85       	ldd	r25, Z+10	; 0x0a
    afde:	a0 e0       	ldi	r26, 0x00	; 0
    afe0:	b0 e0       	ldi	r27, 0x00	; 0
    afe2:	3c 01       	movw	r6, r24
    afe4:	4d 01       	movw	r8, r26
    afe6:	59 e0       	ldi	r21, 0x09	; 9
    afe8:	66 0c       	add	r6, r6
    afea:	77 1c       	adc	r7, r7
    afec:	88 1c       	adc	r8, r8
    afee:	99 1c       	adc	r9, r9
    aff0:	5a 95       	dec	r21
    aff2:	d1 f7       	brne	.-12     	; 0xafe8 <f_open+0x294>
    aff4:	d7 01       	movw	r26, r14
    aff6:	16 96       	adiw	r26, 0x06	; 6
    aff8:	4d 91       	ld	r20, X+
    affa:	5d 91       	ld	r21, X+
    affc:	6d 91       	ld	r22, X+
    affe:	7c 91       	ld	r23, X
    b000:	19 97       	sbiw	r26, 0x09	; 9
    b002:	62 14       	cp	r6, r2
    b004:	73 04       	cpc	r7, r3
    b006:	84 04       	cpc	r8, r4
    b008:	95 04       	cpc	r9, r5
    b00a:	f0 f4       	brcc	.+60     	; 0xb048 <f_open+0x2f4>
    b00c:	f7 01       	movw	r30, r14
    b00e:	80 81       	ld	r24, Z
    b010:	91 81       	ldd	r25, Z+1	; 0x01
    b012:	0e 94 6b 4b 	call	0x96d6	; 0x96d6 <get_fat.isra.7>
    b016:	ab 01       	movw	r20, r22
    b018:	bc 01       	movw	r22, r24
    b01a:	d2 01       	movw	r26, r4
    b01c:	c1 01       	movw	r24, r2
    b01e:	86 19       	sub	r24, r6
    b020:	97 09       	sbc	r25, r7
    b022:	a8 09       	sbc	r26, r8
    b024:	b9 09       	sbc	r27, r9
    b026:	1c 01       	movw	r2, r24
    b028:	2d 01       	movw	r4, r26
    b02a:	42 30       	cpi	r20, 0x02	; 2
    b02c:	51 05       	cpc	r21, r1
    b02e:	61 05       	cpc	r22, r1
    b030:	71 05       	cpc	r23, r1
    b032:	08 f4       	brcc	.+2      	; 0xb036 <f_open+0x2e2>
    b034:	67 c0       	rjmp	.+206    	; 0xb104 <f_open+0x3b0>
    b036:	4f 3f       	cpi	r20, 0xFF	; 255
    b038:	ff ef       	ldi	r31, 0xFF	; 255
    b03a:	5f 07       	cpc	r21, r31
    b03c:	6f 07       	cpc	r22, r31
    b03e:	7f 07       	cpc	r23, r31
    b040:	01 f7       	brne	.-64     	; 0xb002 <f_open+0x2ae>
    b042:	01 e0       	ldi	r16, 0x01	; 1
    b044:	10 e0       	ldi	r17, 0x00	; 0
    b046:	02 c0       	rjmp	.+4      	; 0xb04c <f_open+0x2f8>
    b048:	00 e0       	ldi	r16, 0x00	; 0
    b04a:	10 e0       	ldi	r17, 0x00	; 0
    b04c:	d7 01       	movw	r26, r14
    b04e:	54 96       	adiw	r26, 0x14	; 20
    b050:	4d 93       	st	X+, r20
    b052:	5d 93       	st	X+, r21
    b054:	6d 93       	st	X+, r22
    b056:	7c 93       	st	X, r23
    b058:	57 97       	sbiw	r26, 0x17	; 23
    b05a:	01 15       	cp	r16, r1
    b05c:	11 05       	cpc	r17, r1
    b05e:	d9 f5       	brne	.+118    	; 0xb0d6 <f_open+0x382>
    b060:	d2 01       	movw	r26, r4
    b062:	c1 01       	movw	r24, r2
    b064:	91 70       	andi	r25, 0x01	; 1
    b066:	aa 27       	eor	r26, r26
    b068:	bb 27       	eor	r27, r27
    b06a:	89 2b       	or	r24, r25
    b06c:	8a 2b       	or	r24, r26
    b06e:	8b 2b       	or	r24, r27
    b070:	09 f4       	brne	.+2      	; 0xb074 <f_open+0x320>
    b072:	9d cf       	rjmp	.-198    	; 0xafae <f_open+0x25a>
    b074:	6f a4       	ldd	r6, Y+47	; 0x2f
    b076:	78 a8       	ldd	r7, Y+48	; 0x30
    b078:	c3 01       	movw	r24, r6
    b07a:	0e 94 92 45 	call	0x8b24	; 0x8b24 <clust2sect>
    b07e:	61 15       	cp	r22, r1
    b080:	71 05       	cpc	r23, r1
    b082:	81 05       	cpc	r24, r1
    b084:	91 05       	cpc	r25, r1
    b086:	29 f1       	breq	.+74     	; 0xb0d2 <f_open+0x37e>
    b088:	92 01       	movw	r18, r4
    b08a:	81 01       	movw	r16, r2
    b08c:	49 e0       	ldi	r20, 0x09	; 9
    b08e:	36 95       	lsr	r19
    b090:	27 95       	ror	r18
    b092:	17 95       	ror	r17
    b094:	07 95       	ror	r16
    b096:	4a 95       	dec	r20
    b098:	d1 f7       	brne	.-12     	; 0xb08e <f_open+0x33a>
    b09a:	a9 01       	movw	r20, r18
    b09c:	98 01       	movw	r18, r16
    b09e:	26 0f       	add	r18, r22
    b0a0:	37 1f       	adc	r19, r23
    b0a2:	48 1f       	adc	r20, r24
    b0a4:	59 1f       	adc	r21, r25
    b0a6:	f7 01       	movw	r30, r14
    b0a8:	20 8f       	std	Z+24, r18	; 0x18
    b0aa:	31 8f       	std	Z+25, r19	; 0x19
    b0ac:	42 8f       	std	Z+26, r20	; 0x1a
    b0ae:	53 8f       	std	Z+27, r21	; 0x1b
    b0b0:	01 e0       	ldi	r16, 0x01	; 1
    b0b2:	10 e0       	ldi	r17, 0x00	; 0
    b0b4:	6b a9       	ldd	r22, Y+51	; 0x33
    b0b6:	7c a9       	ldd	r23, Y+52	; 0x34
    b0b8:	d3 01       	movw	r26, r6
    b0ba:	11 96       	adiw	r26, 0x01	; 1
    b0bc:	8c 91       	ld	r24, X
    b0be:	0e 94 a0 6c 	call	0xd940	; 0xd940 <disk_read>
    b0c2:	31 e0       	ldi	r19, 0x01	; 1
    b0c4:	20 e0       	ldi	r18, 0x00	; 0
    b0c6:	89 2b       	or	r24, r25
    b0c8:	09 f4       	brne	.+2      	; 0xb0cc <f_open+0x378>
    b0ca:	30 e0       	ldi	r19, 0x00	; 0
    b0cc:	03 2f       	mov	r16, r19
    b0ce:	12 2f       	mov	r17, r18
    b0d0:	02 c0       	rjmp	.+4      	; 0xb0d6 <f_open+0x382>
    b0d2:	02 e0       	ldi	r16, 0x02	; 2
    b0d4:	10 e0       	ldi	r17, 0x00	; 0
    b0d6:	c5 01       	movw	r24, r10
    b0d8:	0e 94 16 6c 	call	0xd82c	; 0xd82c <ff_memfree>
    b0dc:	01 15       	cp	r16, r1
    b0de:	11 05       	cpc	r17, r1
    b0e0:	59 f0       	breq	.+22     	; 0xb0f8 <f_open+0x3a4>
    b0e2:	01 c0       	rjmp	.+2      	; 0xb0e6 <f_open+0x392>
    b0e4:	8c 01       	movw	r16, r24
    b0e6:	f7 01       	movw	r30, r14
    b0e8:	11 82       	std	Z+1, r1	; 0x01
    b0ea:	10 82       	st	Z, r1
    b0ec:	c8 01       	movw	r24, r16
    b0ee:	16 c0       	rjmp	.+44     	; 0xb11c <f_open+0x3c8>
    b0f0:	89 e0       	ldi	r24, 0x09	; 9
    b0f2:	03 c0       	rjmp	.+6      	; 0xb0fa <f_open+0x3a6>
    b0f4:	81 e1       	ldi	r24, 0x11	; 17
    b0f6:	01 c0       	rjmp	.+2      	; 0xb0fa <f_open+0x3a6>
    b0f8:	80 e0       	ldi	r24, 0x00	; 0
    b0fa:	90 e0       	ldi	r25, 0x00	; 0
    b0fc:	0f c0       	rjmp	.+30     	; 0xb11c <f_open+0x3c8>
    b0fe:	08 e0       	ldi	r16, 0x08	; 8
    b100:	10 e0       	ldi	r17, 0x00	; 0
    b102:	08 c0       	rjmp	.+16     	; 0xb114 <f_open+0x3c0>
    b104:	02 e0       	ldi	r16, 0x02	; 2
    b106:	10 e0       	ldi	r17, 0x00	; 0
    b108:	a1 cf       	rjmp	.-190    	; 0xb04c <f_open+0x2f8>
    b10a:	04 e0       	ldi	r16, 0x04	; 4
    b10c:	10 e0       	ldi	r17, 0x00	; 0
    b10e:	02 c0       	rjmp	.+4      	; 0xb114 <f_open+0x3c0>
    b110:	07 e0       	ldi	r16, 0x07	; 7
    b112:	10 e0       	ldi	r17, 0x00	; 0
    b114:	c5 01       	movw	r24, r10
    b116:	0e 94 16 6c 	call	0xd82c	; 0xd82c <ff_memfree>
    b11a:	e5 cf       	rjmp	.-54     	; 0xb0e6 <f_open+0x392>
    b11c:	e6 96       	adiw	r28, 0x36	; 54
    b11e:	0f b6       	in	r0, 0x3f	; 63
    b120:	f8 94       	cli
    b122:	de bf       	out	0x3e, r29	; 62
    b124:	0f be       	out	0x3f, r0	; 63
    b126:	cd bf       	out	0x3d, r28	; 61
    b128:	df 91       	pop	r29
    b12a:	cf 91       	pop	r28
    b12c:	1f 91       	pop	r17
    b12e:	0f 91       	pop	r16
    b130:	ff 90       	pop	r15
    b132:	ef 90       	pop	r14
    b134:	df 90       	pop	r13
    b136:	bf 90       	pop	r11
    b138:	af 90       	pop	r10
    b13a:	9f 90       	pop	r9
    b13c:	8f 90       	pop	r8
    b13e:	7f 90       	pop	r7
    b140:	6f 90       	pop	r6
    b142:	5f 90       	pop	r5
    b144:	4f 90       	pop	r4
    b146:	3f 90       	pop	r3
    b148:	2f 90       	pop	r2
    b14a:	08 95       	ret

0000b14c <f_read>:
    b14c:	a6 e0       	ldi	r26, 0x06	; 6
    b14e:	b0 e0       	ldi	r27, 0x00	; 0
    b150:	ec ea       	ldi	r30, 0xAC	; 172
    b152:	f8 e5       	ldi	r31, 0x58	; 88
    b154:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__prologue_saves__>
    b158:	7c 01       	movw	r14, r24
    b15a:	4b 01       	movw	r8, r22
    b15c:	5a 01       	movw	r10, r20
    b15e:	3e 83       	std	Y+6, r19	; 0x06
    b160:	2d 83       	std	Y+5, r18	; 0x05
    b162:	f9 01       	movw	r30, r18
    b164:	11 82       	std	Z+1, r1	; 0x01
    b166:	10 82       	st	Z, r1
    b168:	be 01       	movw	r22, r28
    b16a:	6f 5f       	subi	r22, 0xFF	; 255
    b16c:	7f 4f       	sbci	r23, 0xFF	; 255
    b16e:	0e 94 25 46 	call	0x8c4a	; 0x8c4a <validate>
    b172:	00 97       	sbiw	r24, 0x00	; 0
    b174:	09 f0       	breq	.+2      	; 0xb178 <f_read+0x2c>
    b176:	31 c1       	rjmp	.+610    	; 0xb3da <f_read+0x28e>
    b178:	f7 01       	movw	r30, r14
    b17a:	87 85       	ldd	r24, Z+15	; 0x0f
    b17c:	90 e0       	ldi	r25, 0x00	; 0
    b17e:	00 97       	sbiw	r24, 0x00	; 0
    b180:	09 f0       	breq	.+2      	; 0xb184 <f_read+0x38>
    b182:	2b c1       	rjmp	.+598    	; 0xb3da <f_read+0x28e>
    b184:	86 85       	ldd	r24, Z+14	; 0x0e
    b186:	80 ff       	sbrs	r24, 0
    b188:	26 c1       	rjmp	.+588    	; 0xb3d6 <f_read+0x28a>
    b18a:	82 85       	ldd	r24, Z+10	; 0x0a
    b18c:	93 85       	ldd	r25, Z+11	; 0x0b
    b18e:	a4 85       	ldd	r26, Z+12	; 0x0c
    b190:	b5 85       	ldd	r27, Z+13	; 0x0d
    b192:	40 89       	ldd	r20, Z+16	; 0x10
    b194:	51 89       	ldd	r21, Z+17	; 0x11
    b196:	62 89       	ldd	r22, Z+18	; 0x12
    b198:	73 89       	ldd	r23, Z+19	; 0x13
    b19a:	84 1b       	sub	r24, r20
    b19c:	95 0b       	sbc	r25, r21
    b19e:	a6 0b       	sbc	r26, r22
    b1a0:	b7 0b       	sbc	r27, r23
    b1a2:	a5 01       	movw	r20, r10
    b1a4:	60 e0       	ldi	r22, 0x00	; 0
    b1a6:	70 e0       	ldi	r23, 0x00	; 0
    b1a8:	84 17       	cp	r24, r20
    b1aa:	95 07       	cpc	r25, r21
    b1ac:	a6 07       	cpc	r26, r22
    b1ae:	b7 07       	cpc	r27, r23
    b1b0:	08 f4       	brcc	.+2      	; 0xb1b4 <f_read+0x68>
    b1b2:	5c 01       	movw	r10, r24
    b1b4:	17 01       	movw	r2, r14
    b1b6:	f4 e2       	ldi	r31, 0x24	; 36
    b1b8:	2f 0e       	add	r2, r31
    b1ba:	31 1c       	adc	r3, r1
    b1bc:	a1 14       	cp	r10, r1
    b1be:	b1 04       	cpc	r11, r1
    b1c0:	09 f4       	brne	.+2      	; 0xb1c4 <f_read+0x78>
    b1c2:	07 c1       	rjmp	.+526    	; 0xb3d2 <f_read+0x286>
    b1c4:	f7 01       	movw	r30, r14
    b1c6:	40 89       	ldd	r20, Z+16	; 0x10
    b1c8:	51 89       	ldd	r21, Z+17	; 0x11
    b1ca:	62 89       	ldd	r22, Z+18	; 0x12
    b1cc:	73 89       	ldd	r23, Z+19	; 0x13
    b1ce:	db 01       	movw	r26, r22
    b1d0:	ca 01       	movw	r24, r20
    b1d2:	91 70       	andi	r25, 0x01	; 1
    b1d4:	aa 27       	eor	r26, r26
    b1d6:	bb 27       	eor	r27, r27
    b1d8:	89 2b       	or	r24, r25
    b1da:	8a 2b       	or	r24, r26
    b1dc:	8b 2b       	or	r24, r27
    b1de:	09 f0       	breq	.+2      	; 0xb1e2 <f_read+0x96>
    b1e0:	cb c0       	rjmp	.+406    	; 0xb378 <f_read+0x22c>
    b1e2:	e9 81       	ldd	r30, Y+1	; 0x01
    b1e4:	fa 81       	ldd	r31, Y+2	; 0x02
    b1e6:	01 85       	ldd	r16, Z+9	; 0x09
    b1e8:	12 85       	ldd	r17, Z+10	; 0x0a
    b1ea:	01 50       	subi	r16, 0x01	; 1
    b1ec:	11 09       	sbc	r17, r1
    b1ee:	db 01       	movw	r26, r22
    b1f0:	ca 01       	movw	r24, r20
    b1f2:	e9 e0       	ldi	r30, 0x09	; 9
    b1f4:	b6 95       	lsr	r27
    b1f6:	a7 95       	ror	r26
    b1f8:	97 95       	ror	r25
    b1fa:	87 95       	ror	r24
    b1fc:	ea 95       	dec	r30
    b1fe:	d1 f7       	brne	.-12     	; 0xb1f4 <f_read+0xa8>
    b200:	08 23       	and	r16, r24
    b202:	19 23       	and	r17, r25
    b204:	01 15       	cp	r16, r1
    b206:	11 05       	cpc	r17, r1
    b208:	91 f5       	brne	.+100    	; 0xb26e <f_read+0x122>
    b20a:	f7 01       	movw	r30, r14
    b20c:	41 15       	cp	r20, r1
    b20e:	51 05       	cpc	r21, r1
    b210:	61 05       	cpc	r22, r1
    b212:	71 05       	cpc	r23, r1
    b214:	29 f4       	brne	.+10     	; 0xb220 <f_read+0xd4>
    b216:	66 81       	ldd	r22, Z+6	; 0x06
    b218:	77 81       	ldd	r23, Z+7	; 0x07
    b21a:	80 85       	ldd	r24, Z+8	; 0x08
    b21c:	91 85       	ldd	r25, Z+9	; 0x09
    b21e:	11 c0       	rjmp	.+34     	; 0xb242 <f_read+0xf6>
    b220:	82 a1       	ldd	r24, Z+34	; 0x22
    b222:	93 a1       	ldd	r25, Z+35	; 0x23
    b224:	89 2b       	or	r24, r25
    b226:	21 f0       	breq	.+8      	; 0xb230 <f_read+0xe4>
    b228:	c7 01       	movw	r24, r14
    b22a:	0e 94 ba 45 	call	0x8b74	; 0x8b74 <clmt_clust>
    b22e:	09 c0       	rjmp	.+18     	; 0xb242 <f_read+0xf6>
    b230:	f7 01       	movw	r30, r14
    b232:	44 89       	ldd	r20, Z+20	; 0x14
    b234:	55 89       	ldd	r21, Z+21	; 0x15
    b236:	66 89       	ldd	r22, Z+22	; 0x16
    b238:	77 89       	ldd	r23, Z+23	; 0x17
    b23a:	80 81       	ld	r24, Z
    b23c:	91 81       	ldd	r25, Z+1	; 0x01
    b23e:	0e 94 6b 4b 	call	0x96d6	; 0x96d6 <get_fat.isra.7>
    b242:	62 30       	cpi	r22, 0x02	; 2
    b244:	71 05       	cpc	r23, r1
    b246:	81 05       	cpc	r24, r1
    b248:	91 05       	cpc	r25, r1
    b24a:	10 f4       	brcc	.+4      	; 0xb250 <f_read+0x104>
    b24c:	82 e0       	ldi	r24, 0x02	; 2
    b24e:	07 c0       	rjmp	.+14     	; 0xb25e <f_read+0x112>
    b250:	6f 3f       	cpi	r22, 0xFF	; 255
    b252:	ff ef       	ldi	r31, 0xFF	; 255
    b254:	7f 07       	cpc	r23, r31
    b256:	8f 07       	cpc	r24, r31
    b258:	9f 07       	cpc	r25, r31
    b25a:	21 f4       	brne	.+8      	; 0xb264 <f_read+0x118>
    b25c:	81 e0       	ldi	r24, 0x01	; 1
    b25e:	f7 01       	movw	r30, r14
    b260:	87 87       	std	Z+15, r24	; 0x0f
    b262:	ba c0       	rjmp	.+372    	; 0xb3d8 <f_read+0x28c>
    b264:	f7 01       	movw	r30, r14
    b266:	64 8b       	std	Z+20, r22	; 0x14
    b268:	75 8b       	std	Z+21, r23	; 0x15
    b26a:	86 8b       	std	Z+22, r24	; 0x16
    b26c:	97 8b       	std	Z+23, r25	; 0x17
    b26e:	89 81       	ldd	r24, Y+1	; 0x01
    b270:	9a 81       	ldd	r25, Y+2	; 0x02
    b272:	9c 83       	std	Y+4, r25	; 0x04
    b274:	8b 83       	std	Y+3, r24	; 0x03
    b276:	f7 01       	movw	r30, r14
    b278:	44 89       	ldd	r20, Z+20	; 0x14
    b27a:	55 89       	ldd	r21, Z+21	; 0x15
    b27c:	66 89       	ldd	r22, Z+22	; 0x16
    b27e:	77 89       	ldd	r23, Z+23	; 0x17
    b280:	0e 94 92 45 	call	0x8b24	; 0x8b24 <clust2sect>
    b284:	61 15       	cp	r22, r1
    b286:	71 05       	cpc	r23, r1
    b288:	81 05       	cpc	r24, r1
    b28a:	91 05       	cpc	r25, r1
    b28c:	f9 f2       	breq	.-66     	; 0xb24c <f_read+0x100>
    b28e:	2b 01       	movw	r4, r22
    b290:	3c 01       	movw	r6, r24
    b292:	40 0e       	add	r4, r16
    b294:	51 1e       	adc	r5, r17
    b296:	61 1c       	adc	r6, r1
    b298:	71 1c       	adc	r7, r1
    b29a:	65 01       	movw	r12, r10
    b29c:	cd 2c       	mov	r12, r13
    b29e:	dd 24       	eor	r13, r13
    b2a0:	c6 94       	lsr	r12
    b2a2:	c1 14       	cp	r12, r1
    b2a4:	d1 04       	cpc	r13, r1
    b2a6:	d1 f1       	breq	.+116    	; 0xb31c <f_read+0x1d0>
    b2a8:	eb 81       	ldd	r30, Y+3	; 0x03
    b2aa:	fc 81       	ldd	r31, Y+4	; 0x04
    b2ac:	81 85       	ldd	r24, Z+9	; 0x09
    b2ae:	92 85       	ldd	r25, Z+10	; 0x0a
    b2b0:	98 01       	movw	r18, r16
    b2b2:	2c 0d       	add	r18, r12
    b2b4:	3d 1d       	adc	r19, r13
    b2b6:	82 17       	cp	r24, r18
    b2b8:	93 07       	cpc	r25, r19
    b2ba:	18 f4       	brcc	.+6      	; 0xb2c2 <f_read+0x176>
    b2bc:	6c 01       	movw	r12, r24
    b2be:	c0 1a       	sub	r12, r16
    b2c0:	d1 0a       	sbc	r13, r17
    b2c2:	86 01       	movw	r16, r12
    b2c4:	a3 01       	movw	r20, r6
    b2c6:	92 01       	movw	r18, r4
    b2c8:	b4 01       	movw	r22, r8
    b2ca:	eb 81       	ldd	r30, Y+3	; 0x03
    b2cc:	fc 81       	ldd	r31, Y+4	; 0x04
    b2ce:	81 81       	ldd	r24, Z+1	; 0x01
    b2d0:	0e 94 a0 6c 	call	0xd940	; 0xd940 <disk_read>
    b2d4:	89 2b       	or	r24, r25
    b2d6:	11 f6       	brne	.-124    	; 0xb25c <f_read+0x110>
    b2d8:	f7 01       	movw	r30, r14
    b2da:	86 85       	ldd	r24, Z+14	; 0x0e
    b2dc:	87 ff       	sbrs	r24, 7
    b2de:	1a c0       	rjmp	.+52     	; 0xb314 <f_read+0x1c8>
    b2e0:	80 8d       	ldd	r24, Z+24	; 0x18
    b2e2:	91 8d       	ldd	r25, Z+25	; 0x19
    b2e4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b2e6:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b2e8:	84 19       	sub	r24, r4
    b2ea:	95 09       	sbc	r25, r5
    b2ec:	a6 09       	sbc	r26, r6
    b2ee:	b7 09       	sbc	r27, r7
    b2f0:	a6 01       	movw	r20, r12
    b2f2:	60 e0       	ldi	r22, 0x00	; 0
    b2f4:	70 e0       	ldi	r23, 0x00	; 0
    b2f6:	84 17       	cp	r24, r20
    b2f8:	95 07       	cpc	r25, r21
    b2fa:	a6 07       	cpc	r26, r22
    b2fc:	b7 07       	cpc	r27, r23
    b2fe:	50 f4       	brcc	.+20     	; 0xb314 <f_read+0x1c8>
    b300:	98 2f       	mov	r25, r24
    b302:	88 27       	eor	r24, r24
    b304:	99 0f       	add	r25, r25
    b306:	40 e0       	ldi	r20, 0x00	; 0
    b308:	52 e0       	ldi	r21, 0x02	; 2
    b30a:	b1 01       	movw	r22, r2
    b30c:	88 0d       	add	r24, r8
    b30e:	99 1d       	adc	r25, r9
    b310:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <mem_cpy.part.0>
    b314:	dc 2c       	mov	r13, r12
    b316:	cc 24       	eor	r12, r12
    b318:	dd 0c       	add	r13, r13
    b31a:	41 c0       	rjmp	.+130    	; 0xb39e <f_read+0x252>
    b31c:	f7 01       	movw	r30, r14
    b31e:	20 8d       	ldd	r18, Z+24	; 0x18
    b320:	31 8d       	ldd	r19, Z+25	; 0x19
    b322:	42 8d       	ldd	r20, Z+26	; 0x1a
    b324:	53 8d       	ldd	r21, Z+27	; 0x1b
    b326:	42 16       	cp	r4, r18
    b328:	53 06       	cpc	r5, r19
    b32a:	64 06       	cpc	r6, r20
    b32c:	75 06       	cpc	r7, r21
    b32e:	f9 f0       	breq	.+62     	; 0xb36e <f_read+0x222>
    b330:	86 85       	ldd	r24, Z+14	; 0x0e
    b332:	87 ff       	sbrs	r24, 7
    b334:	0f c0       	rjmp	.+30     	; 0xb354 <f_read+0x208>
    b336:	01 e0       	ldi	r16, 0x01	; 1
    b338:	10 e0       	ldi	r17, 0x00	; 0
    b33a:	b1 01       	movw	r22, r2
    b33c:	eb 81       	ldd	r30, Y+3	; 0x03
    b33e:	fc 81       	ldd	r31, Y+4	; 0x04
    b340:	81 81       	ldd	r24, Z+1	; 0x01
    b342:	0e 94 b0 6c 	call	0xd960	; 0xd960 <disk_write>
    b346:	89 2b       	or	r24, r25
    b348:	09 f0       	breq	.+2      	; 0xb34c <f_read+0x200>
    b34a:	88 cf       	rjmp	.-240    	; 0xb25c <f_read+0x110>
    b34c:	f7 01       	movw	r30, r14
    b34e:	86 85       	ldd	r24, Z+14	; 0x0e
    b350:	8f 77       	andi	r24, 0x7F	; 127
    b352:	86 87       	std	Z+14, r24	; 0x0e
    b354:	e9 81       	ldd	r30, Y+1	; 0x01
    b356:	fa 81       	ldd	r31, Y+2	; 0x02
    b358:	01 e0       	ldi	r16, 0x01	; 1
    b35a:	10 e0       	ldi	r17, 0x00	; 0
    b35c:	a3 01       	movw	r20, r6
    b35e:	92 01       	movw	r18, r4
    b360:	b1 01       	movw	r22, r2
    b362:	81 81       	ldd	r24, Z+1	; 0x01
    b364:	0e 94 a0 6c 	call	0xd940	; 0xd940 <disk_read>
    b368:	89 2b       	or	r24, r25
    b36a:	09 f0       	breq	.+2      	; 0xb36e <f_read+0x222>
    b36c:	77 cf       	rjmp	.-274    	; 0xb25c <f_read+0x110>
    b36e:	f7 01       	movw	r30, r14
    b370:	40 8e       	std	Z+24, r4	; 0x18
    b372:	51 8e       	std	Z+25, r5	; 0x19
    b374:	62 8e       	std	Z+26, r6	; 0x1a
    b376:	73 8e       	std	Z+27, r7	; 0x1b
    b378:	f7 01       	movw	r30, r14
    b37a:	60 89       	ldd	r22, Z+16	; 0x10
    b37c:	71 89       	ldd	r23, Z+17	; 0x11
    b37e:	71 70       	andi	r23, 0x01	; 1
    b380:	80 e0       	ldi	r24, 0x00	; 0
    b382:	92 e0       	ldi	r25, 0x02	; 2
    b384:	86 1b       	sub	r24, r22
    b386:	97 0b       	sbc	r25, r23
    b388:	65 01       	movw	r12, r10
    b38a:	8a 15       	cp	r24, r10
    b38c:	9b 05       	cpc	r25, r11
    b38e:	08 f4       	brcc	.+2      	; 0xb392 <f_read+0x246>
    b390:	6c 01       	movw	r12, r24
    b392:	62 0d       	add	r22, r2
    b394:	73 1d       	adc	r23, r3
    b396:	a6 01       	movw	r20, r12
    b398:	c4 01       	movw	r24, r8
    b39a:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <mem_cpy.part.0>
    b39e:	8c 0c       	add	r8, r12
    b3a0:	9d 1c       	adc	r9, r13
    b3a2:	f7 01       	movw	r30, r14
    b3a4:	80 89       	ldd	r24, Z+16	; 0x10
    b3a6:	91 89       	ldd	r25, Z+17	; 0x11
    b3a8:	a2 89       	ldd	r26, Z+18	; 0x12
    b3aa:	b3 89       	ldd	r27, Z+19	; 0x13
    b3ac:	8c 0d       	add	r24, r12
    b3ae:	9d 1d       	adc	r25, r13
    b3b0:	a1 1d       	adc	r26, r1
    b3b2:	b1 1d       	adc	r27, r1
    b3b4:	80 8b       	std	Z+16, r24	; 0x10
    b3b6:	91 8b       	std	Z+17, r25	; 0x11
    b3b8:	a2 8b       	std	Z+18, r26	; 0x12
    b3ba:	b3 8b       	std	Z+19, r27	; 0x13
    b3bc:	ed 81       	ldd	r30, Y+5	; 0x05
    b3be:	fe 81       	ldd	r31, Y+6	; 0x06
    b3c0:	80 81       	ld	r24, Z
    b3c2:	91 81       	ldd	r25, Z+1	; 0x01
    b3c4:	8c 0d       	add	r24, r12
    b3c6:	9d 1d       	adc	r25, r13
    b3c8:	91 83       	std	Z+1, r25	; 0x01
    b3ca:	80 83       	st	Z, r24
    b3cc:	ac 18       	sub	r10, r12
    b3ce:	bd 08       	sbc	r11, r13
    b3d0:	f5 ce       	rjmp	.-534    	; 0xb1bc <f_read+0x70>
    b3d2:	80 e0       	ldi	r24, 0x00	; 0
    b3d4:	01 c0       	rjmp	.+2      	; 0xb3d8 <f_read+0x28c>
    b3d6:	87 e0       	ldi	r24, 0x07	; 7
    b3d8:	90 e0       	ldi	r25, 0x00	; 0
    b3da:	26 96       	adiw	r28, 0x06	; 6
    b3dc:	e2 e1       	ldi	r30, 0x12	; 18
    b3de:	0c 94 dd e8 	jmp	0x1d1ba	; 0x1d1ba <__epilogue_restores__>

0000b3e2 <f_write>:
    b3e2:	a8 e0       	ldi	r26, 0x08	; 8
    b3e4:	b0 e0       	ldi	r27, 0x00	; 0
    b3e6:	e7 ef       	ldi	r30, 0xF7	; 247
    b3e8:	f9 e5       	ldi	r31, 0x59	; 89
    b3ea:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__prologue_saves__>
    b3ee:	7c 01       	movw	r14, r24
    b3f0:	3b 01       	movw	r6, r22
    b3f2:	5a 01       	movw	r10, r20
    b3f4:	38 87       	std	Y+8, r19	; 0x08
    b3f6:	2f 83       	std	Y+7, r18	; 0x07
    b3f8:	f9 01       	movw	r30, r18
    b3fa:	11 82       	std	Z+1, r1	; 0x01
    b3fc:	10 82       	st	Z, r1
    b3fe:	be 01       	movw	r22, r28
    b400:	6f 5f       	subi	r22, 0xFF	; 255
    b402:	7f 4f       	sbci	r23, 0xFF	; 255
    b404:	0e 94 25 46 	call	0x8c4a	; 0x8c4a <validate>
    b408:	00 97       	sbiw	r24, 0x00	; 0
    b40a:	09 f0       	breq	.+2      	; 0xb40e <f_write+0x2c>
    b40c:	7d c1       	rjmp	.+762    	; 0xb708 <f_write+0x326>
    b40e:	f7 01       	movw	r30, r14
    b410:	87 85       	ldd	r24, Z+15	; 0x0f
    b412:	90 e0       	ldi	r25, 0x00	; 0
    b414:	00 97       	sbiw	r24, 0x00	; 0
    b416:	09 f0       	breq	.+2      	; 0xb41a <f_write+0x38>
    b418:	77 c1       	rjmp	.+750    	; 0xb708 <f_write+0x326>
    b41a:	86 85       	ldd	r24, Z+14	; 0x0e
    b41c:	81 ff       	sbrs	r24, 1
    b41e:	72 c1       	rjmp	.+740    	; 0xb704 <f_write+0x322>
    b420:	80 89       	ldd	r24, Z+16	; 0x10
    b422:	91 89       	ldd	r25, Z+17	; 0x11
    b424:	a2 89       	ldd	r26, Z+18	; 0x12
    b426:	b3 89       	ldd	r27, Z+19	; 0x13
    b428:	ac 01       	movw	r20, r24
    b42a:	bd 01       	movw	r22, r26
    b42c:	4a 0d       	add	r20, r10
    b42e:	5b 1d       	adc	r21, r11
    b430:	61 1d       	adc	r22, r1
    b432:	71 1d       	adc	r23, r1
    b434:	48 17       	cp	r20, r24
    b436:	59 07       	cpc	r21, r25
    b438:	6a 07       	cpc	r22, r26
    b43a:	7b 07       	cpc	r23, r27
    b43c:	18 f4       	brcc	.+6      	; 0xb444 <f_write+0x62>
    b43e:	5c 01       	movw	r10, r24
    b440:	a0 94       	com	r10
    b442:	b0 94       	com	r11
    b444:	97 01       	movw	r18, r14
    b446:	2c 5d       	subi	r18, 0xDC	; 220
    b448:	3f 4f       	sbci	r19, 0xFF	; 255
    b44a:	3e 83       	std	Y+6, r19	; 0x06
    b44c:	2d 83       	std	Y+5, r18	; 0x05
    b44e:	a1 14       	cp	r10, r1
    b450:	b1 04       	cpc	r11, r1
    b452:	09 f4       	brne	.+2      	; 0xb456 <f_write+0x74>
    b454:	4d c0       	rjmp	.+154    	; 0xb4f0 <f_write+0x10e>
    b456:	f7 01       	movw	r30, r14
    b458:	40 89       	ldd	r20, Z+16	; 0x10
    b45a:	51 89       	ldd	r21, Z+17	; 0x11
    b45c:	62 89       	ldd	r22, Z+18	; 0x12
    b45e:	73 89       	ldd	r23, Z+19	; 0x13
    b460:	db 01       	movw	r26, r22
    b462:	ca 01       	movw	r24, r20
    b464:	91 70       	andi	r25, 0x01	; 1
    b466:	aa 27       	eor	r26, r26
    b468:	bb 27       	eor	r27, r27
    b46a:	89 2b       	or	r24, r25
    b46c:	8a 2b       	or	r24, r26
    b46e:	8b 2b       	or	r24, r27
    b470:	09 f0       	breq	.+2      	; 0xb474 <f_write+0x92>
    b472:	05 c1       	rjmp	.+522    	; 0xb67e <f_write+0x29c>
    b474:	e9 81       	ldd	r30, Y+1	; 0x01
    b476:	fa 81       	ldd	r31, Y+2	; 0x02
    b478:	81 84       	ldd	r8, Z+9	; 0x09
    b47a:	92 84       	ldd	r9, Z+10	; 0x0a
    b47c:	f1 e0       	ldi	r31, 0x01	; 1
    b47e:	8f 1a       	sub	r8, r31
    b480:	91 08       	sbc	r9, r1
    b482:	db 01       	movw	r26, r22
    b484:	ca 01       	movw	r24, r20
    b486:	e9 e0       	ldi	r30, 0x09	; 9
    b488:	b6 95       	lsr	r27
    b48a:	a7 95       	ror	r26
    b48c:	97 95       	ror	r25
    b48e:	87 95       	ror	r24
    b490:	ea 95       	dec	r30
    b492:	d1 f7       	brne	.-12     	; 0xb488 <f_write+0xa6>
    b494:	88 22       	and	r8, r24
    b496:	99 22       	and	r9, r25
    b498:	81 14       	cp	r8, r1
    b49a:	91 04       	cpc	r9, r1
    b49c:	09 f0       	breq	.+2      	; 0xb4a0 <f_write+0xbe>
    b49e:	51 c0       	rjmp	.+162    	; 0xb542 <f_write+0x160>
    b4a0:	f7 01       	movw	r30, r14
    b4a2:	41 15       	cp	r20, r1
    b4a4:	51 05       	cpc	r21, r1
    b4a6:	61 05       	cpc	r22, r1
    b4a8:	71 05       	cpc	r23, r1
    b4aa:	69 f4       	brne	.+26     	; 0xb4c6 <f_write+0xe4>
    b4ac:	66 81       	ldd	r22, Z+6	; 0x06
    b4ae:	77 81       	ldd	r23, Z+7	; 0x07
    b4b0:	80 85       	ldd	r24, Z+8	; 0x08
    b4b2:	91 85       	ldd	r25, Z+9	; 0x09
    b4b4:	61 15       	cp	r22, r1
    b4b6:	71 05       	cpc	r23, r1
    b4b8:	81 05       	cpc	r24, r1
    b4ba:	91 05       	cpc	r25, r1
    b4bc:	f9 f4       	brne	.+62     	; 0xb4fc <f_write+0x11a>
    b4be:	40 e0       	ldi	r20, 0x00	; 0
    b4c0:	50 e0       	ldi	r21, 0x00	; 0
    b4c2:	ba 01       	movw	r22, r20
    b4c4:	0d c0       	rjmp	.+26     	; 0xb4e0 <f_write+0xfe>
    b4c6:	82 a1       	ldd	r24, Z+34	; 0x22
    b4c8:	93 a1       	ldd	r25, Z+35	; 0x23
    b4ca:	89 2b       	or	r24, r25
    b4cc:	21 f0       	breq	.+8      	; 0xb4d6 <f_write+0xf4>
    b4ce:	c7 01       	movw	r24, r14
    b4d0:	0e 94 ba 45 	call	0x8b74	; 0x8b74 <clmt_clust>
    b4d4:	08 c0       	rjmp	.+16     	; 0xb4e6 <f_write+0x104>
    b4d6:	f7 01       	movw	r30, r14
    b4d8:	44 89       	ldd	r20, Z+20	; 0x14
    b4da:	55 89       	ldd	r21, Z+21	; 0x15
    b4dc:	66 89       	ldd	r22, Z+22	; 0x16
    b4de:	77 89       	ldd	r23, Z+23	; 0x17
    b4e0:	c7 01       	movw	r24, r14
    b4e2:	0e 94 de 4c 	call	0x99bc	; 0x99bc <create_chain>
    b4e6:	61 15       	cp	r22, r1
    b4e8:	71 05       	cpc	r23, r1
    b4ea:	81 05       	cpc	r24, r1
    b4ec:	91 05       	cpc	r25, r1
    b4ee:	31 f4       	brne	.+12     	; 0xb4fc <f_write+0x11a>
    b4f0:	f7 01       	movw	r30, r14
    b4f2:	86 85       	ldd	r24, Z+14	; 0x0e
    b4f4:	80 64       	ori	r24, 0x40	; 64
    b4f6:	86 87       	std	Z+14, r24	; 0x0e
    b4f8:	80 e0       	ldi	r24, 0x00	; 0
    b4fa:	05 c1       	rjmp	.+522    	; 0xb706 <f_write+0x324>
    b4fc:	61 30       	cpi	r22, 0x01	; 1
    b4fe:	71 05       	cpc	r23, r1
    b500:	81 05       	cpc	r24, r1
    b502:	91 05       	cpc	r25, r1
    b504:	11 f4       	brne	.+4      	; 0xb50a <f_write+0x128>
    b506:	82 e0       	ldi	r24, 0x02	; 2
    b508:	07 c0       	rjmp	.+14     	; 0xb518 <f_write+0x136>
    b50a:	6f 3f       	cpi	r22, 0xFF	; 255
    b50c:	ff ef       	ldi	r31, 0xFF	; 255
    b50e:	7f 07       	cpc	r23, r31
    b510:	8f 07       	cpc	r24, r31
    b512:	9f 07       	cpc	r25, r31
    b514:	21 f4       	brne	.+8      	; 0xb51e <f_write+0x13c>
    b516:	81 e0       	ldi	r24, 0x01	; 1
    b518:	f7 01       	movw	r30, r14
    b51a:	87 87       	std	Z+15, r24	; 0x0f
    b51c:	f4 c0       	rjmp	.+488    	; 0xb706 <f_write+0x324>
    b51e:	f7 01       	movw	r30, r14
    b520:	64 8b       	std	Z+20, r22	; 0x14
    b522:	75 8b       	std	Z+21, r23	; 0x15
    b524:	86 8b       	std	Z+22, r24	; 0x16
    b526:	97 8b       	std	Z+23, r25	; 0x17
    b528:	06 81       	ldd	r16, Z+6	; 0x06
    b52a:	17 81       	ldd	r17, Z+7	; 0x07
    b52c:	20 85       	ldd	r18, Z+8	; 0x08
    b52e:	31 85       	ldd	r19, Z+9	; 0x09
    b530:	01 15       	cp	r16, r1
    b532:	11 05       	cpc	r17, r1
    b534:	21 05       	cpc	r18, r1
    b536:	31 05       	cpc	r19, r1
    b538:	21 f4       	brne	.+8      	; 0xb542 <f_write+0x160>
    b53a:	66 83       	std	Z+6, r22	; 0x06
    b53c:	77 83       	std	Z+7, r23	; 0x07
    b53e:	80 87       	std	Z+8, r24	; 0x08
    b540:	91 87       	std	Z+9, r25	; 0x09
    b542:	f7 01       	movw	r30, r14
    b544:	86 85       	ldd	r24, Z+14	; 0x0e
    b546:	87 ff       	sbrs	r24, 7
    b548:	13 c0       	rjmp	.+38     	; 0xb570 <f_write+0x18e>
    b54a:	20 8d       	ldd	r18, Z+24	; 0x18
    b54c:	31 8d       	ldd	r19, Z+25	; 0x19
    b54e:	42 8d       	ldd	r20, Z+26	; 0x1a
    b550:	53 8d       	ldd	r21, Z+27	; 0x1b
    b552:	e9 81       	ldd	r30, Y+1	; 0x01
    b554:	fa 81       	ldd	r31, Y+2	; 0x02
    b556:	01 e0       	ldi	r16, 0x01	; 1
    b558:	10 e0       	ldi	r17, 0x00	; 0
    b55a:	6d 81       	ldd	r22, Y+5	; 0x05
    b55c:	7e 81       	ldd	r23, Y+6	; 0x06
    b55e:	81 81       	ldd	r24, Z+1	; 0x01
    b560:	0e 94 b0 6c 	call	0xd960	; 0xd960 <disk_write>
    b564:	89 2b       	or	r24, r25
    b566:	b9 f6       	brne	.-82     	; 0xb516 <f_write+0x134>
    b568:	f7 01       	movw	r30, r14
    b56a:	86 85       	ldd	r24, Z+14	; 0x0e
    b56c:	8f 77       	andi	r24, 0x7F	; 127
    b56e:	86 87       	std	Z+14, r24	; 0x0e
    b570:	29 81       	ldd	r18, Y+1	; 0x01
    b572:	3a 81       	ldd	r19, Y+2	; 0x02
    b574:	3c 83       	std	Y+4, r19	; 0x04
    b576:	2b 83       	std	Y+3, r18	; 0x03
    b578:	f7 01       	movw	r30, r14
    b57a:	44 89       	ldd	r20, Z+20	; 0x14
    b57c:	55 89       	ldd	r21, Z+21	; 0x15
    b57e:	66 89       	ldd	r22, Z+22	; 0x16
    b580:	77 89       	ldd	r23, Z+23	; 0x17
    b582:	c9 01       	movw	r24, r18
    b584:	0e 94 92 45 	call	0x8b24	; 0x8b24 <clust2sect>
    b588:	61 15       	cp	r22, r1
    b58a:	71 05       	cpc	r23, r1
    b58c:	81 05       	cpc	r24, r1
    b58e:	91 05       	cpc	r25, r1
    b590:	09 f4       	brne	.+2      	; 0xb594 <f_write+0x1b2>
    b592:	b9 cf       	rjmp	.-142    	; 0xb506 <f_write+0x124>
    b594:	1b 01       	movw	r2, r22
    b596:	2c 01       	movw	r4, r24
    b598:	28 0c       	add	r2, r8
    b59a:	39 1c       	adc	r3, r9
    b59c:	41 1c       	adc	r4, r1
    b59e:	51 1c       	adc	r5, r1
    b5a0:	65 01       	movw	r12, r10
    b5a2:	cd 2c       	mov	r12, r13
    b5a4:	dd 24       	eor	r13, r13
    b5a6:	c6 94       	lsr	r12
    b5a8:	c1 14       	cp	r12, r1
    b5aa:	d1 04       	cpc	r13, r1
    b5ac:	f1 f1       	breq	.+124    	; 0xb62a <f_write+0x248>
    b5ae:	eb 81       	ldd	r30, Y+3	; 0x03
    b5b0:	fc 81       	ldd	r31, Y+4	; 0x04
    b5b2:	81 85       	ldd	r24, Z+9	; 0x09
    b5b4:	92 85       	ldd	r25, Z+10	; 0x0a
    b5b6:	94 01       	movw	r18, r8
    b5b8:	2c 0d       	add	r18, r12
    b5ba:	3d 1d       	adc	r19, r13
    b5bc:	82 17       	cp	r24, r18
    b5be:	93 07       	cpc	r25, r19
    b5c0:	18 f4       	brcc	.+6      	; 0xb5c8 <f_write+0x1e6>
    b5c2:	6c 01       	movw	r12, r24
    b5c4:	c8 18       	sub	r12, r8
    b5c6:	d9 08       	sbc	r13, r9
    b5c8:	86 01       	movw	r16, r12
    b5ca:	a2 01       	movw	r20, r4
    b5cc:	91 01       	movw	r18, r2
    b5ce:	b3 01       	movw	r22, r6
    b5d0:	eb 81       	ldd	r30, Y+3	; 0x03
    b5d2:	fc 81       	ldd	r31, Y+4	; 0x04
    b5d4:	81 81       	ldd	r24, Z+1	; 0x01
    b5d6:	0e 94 b0 6c 	call	0xd960	; 0xd960 <disk_write>
    b5da:	89 2b       	or	r24, r25
    b5dc:	09 f0       	breq	.+2      	; 0xb5e0 <f_write+0x1fe>
    b5de:	9b cf       	rjmp	.-202    	; 0xb516 <f_write+0x134>
    b5e0:	f7 01       	movw	r30, r14
    b5e2:	80 8d       	ldd	r24, Z+24	; 0x18
    b5e4:	91 8d       	ldd	r25, Z+25	; 0x19
    b5e6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b5e8:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b5ea:	82 19       	sub	r24, r2
    b5ec:	93 09       	sbc	r25, r3
    b5ee:	a4 09       	sbc	r26, r4
    b5f0:	b5 09       	sbc	r27, r5
    b5f2:	a6 01       	movw	r20, r12
    b5f4:	60 e0       	ldi	r22, 0x00	; 0
    b5f6:	70 e0       	ldi	r23, 0x00	; 0
    b5f8:	84 17       	cp	r24, r20
    b5fa:	95 07       	cpc	r25, r21
    b5fc:	a6 07       	cpc	r26, r22
    b5fe:	b7 07       	cpc	r27, r23
    b600:	80 f4       	brcc	.+32     	; 0xb622 <f_write+0x240>
    b602:	98 2f       	mov	r25, r24
    b604:	88 27       	eor	r24, r24
    b606:	99 0f       	add	r25, r25
    b608:	b3 01       	movw	r22, r6
    b60a:	68 0f       	add	r22, r24
    b60c:	79 1f       	adc	r23, r25
    b60e:	40 e0       	ldi	r20, 0x00	; 0
    b610:	52 e0       	ldi	r21, 0x02	; 2
    b612:	8d 81       	ldd	r24, Y+5	; 0x05
    b614:	9e 81       	ldd	r25, Y+6	; 0x06
    b616:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <mem_cpy.part.0>
    b61a:	f7 01       	movw	r30, r14
    b61c:	86 85       	ldd	r24, Z+14	; 0x0e
    b61e:	8f 77       	andi	r24, 0x7F	; 127
    b620:	86 87       	std	Z+14, r24	; 0x0e
    b622:	dc 2c       	mov	r13, r12
    b624:	cc 24       	eor	r12, r12
    b626:	dd 0c       	add	r13, r13
    b628:	43 c0       	rjmp	.+134    	; 0xb6b0 <f_write+0x2ce>
    b62a:	f7 01       	movw	r30, r14
    b62c:	80 8d       	ldd	r24, Z+24	; 0x18
    b62e:	91 8d       	ldd	r25, Z+25	; 0x19
    b630:	a2 8d       	ldd	r26, Z+26	; 0x1a
    b632:	b3 8d       	ldd	r27, Z+27	; 0x1b
    b634:	28 16       	cp	r2, r24
    b636:	39 06       	cpc	r3, r25
    b638:	4a 06       	cpc	r4, r26
    b63a:	5b 06       	cpc	r5, r27
    b63c:	d9 f0       	breq	.+54     	; 0xb674 <f_write+0x292>
    b63e:	40 89       	ldd	r20, Z+16	; 0x10
    b640:	51 89       	ldd	r21, Z+17	; 0x11
    b642:	62 89       	ldd	r22, Z+18	; 0x12
    b644:	73 89       	ldd	r23, Z+19	; 0x13
    b646:	82 85       	ldd	r24, Z+10	; 0x0a
    b648:	93 85       	ldd	r25, Z+11	; 0x0b
    b64a:	a4 85       	ldd	r26, Z+12	; 0x0c
    b64c:	b5 85       	ldd	r27, Z+13	; 0x0d
    b64e:	48 17       	cp	r20, r24
    b650:	59 07       	cpc	r21, r25
    b652:	6a 07       	cpc	r22, r26
    b654:	7b 07       	cpc	r23, r27
    b656:	70 f4       	brcc	.+28     	; 0xb674 <f_write+0x292>
    b658:	01 e0       	ldi	r16, 0x01	; 1
    b65a:	10 e0       	ldi	r17, 0x00	; 0
    b65c:	a2 01       	movw	r20, r4
    b65e:	91 01       	movw	r18, r2
    b660:	6d 81       	ldd	r22, Y+5	; 0x05
    b662:	7e 81       	ldd	r23, Y+6	; 0x06
    b664:	eb 81       	ldd	r30, Y+3	; 0x03
    b666:	fc 81       	ldd	r31, Y+4	; 0x04
    b668:	81 81       	ldd	r24, Z+1	; 0x01
    b66a:	0e 94 a0 6c 	call	0xd940	; 0xd940 <disk_read>
    b66e:	89 2b       	or	r24, r25
    b670:	09 f0       	breq	.+2      	; 0xb674 <f_write+0x292>
    b672:	51 cf       	rjmp	.-350    	; 0xb516 <f_write+0x134>
    b674:	f7 01       	movw	r30, r14
    b676:	20 8e       	std	Z+24, r2	; 0x18
    b678:	31 8e       	std	Z+25, r3	; 0x19
    b67a:	42 8e       	std	Z+26, r4	; 0x1a
    b67c:	53 8e       	std	Z+27, r5	; 0x1b
    b67e:	f7 01       	movw	r30, r14
    b680:	80 89       	ldd	r24, Z+16	; 0x10
    b682:	91 89       	ldd	r25, Z+17	; 0x11
    b684:	91 70       	andi	r25, 0x01	; 1
    b686:	20 e0       	ldi	r18, 0x00	; 0
    b688:	32 e0       	ldi	r19, 0x02	; 2
    b68a:	28 1b       	sub	r18, r24
    b68c:	39 0b       	sbc	r19, r25
    b68e:	65 01       	movw	r12, r10
    b690:	2a 15       	cp	r18, r10
    b692:	3b 05       	cpc	r19, r11
    b694:	08 f4       	brcc	.+2      	; 0xb698 <f_write+0x2b6>
    b696:	69 01       	movw	r12, r18
    b698:	a6 01       	movw	r20, r12
    b69a:	b3 01       	movw	r22, r6
    b69c:	2d 81       	ldd	r18, Y+5	; 0x05
    b69e:	3e 81       	ldd	r19, Y+6	; 0x06
    b6a0:	82 0f       	add	r24, r18
    b6a2:	93 1f       	adc	r25, r19
    b6a4:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <mem_cpy.part.0>
    b6a8:	f7 01       	movw	r30, r14
    b6aa:	86 85       	ldd	r24, Z+14	; 0x0e
    b6ac:	80 68       	ori	r24, 0x80	; 128
    b6ae:	86 87       	std	Z+14, r24	; 0x0e
    b6b0:	6c 0c       	add	r6, r12
    b6b2:	7d 1c       	adc	r7, r13
    b6b4:	f7 01       	movw	r30, r14
    b6b6:	80 89       	ldd	r24, Z+16	; 0x10
    b6b8:	91 89       	ldd	r25, Z+17	; 0x11
    b6ba:	a2 89       	ldd	r26, Z+18	; 0x12
    b6bc:	b3 89       	ldd	r27, Z+19	; 0x13
    b6be:	8c 0d       	add	r24, r12
    b6c0:	9d 1d       	adc	r25, r13
    b6c2:	a1 1d       	adc	r26, r1
    b6c4:	b1 1d       	adc	r27, r1
    b6c6:	80 8b       	std	Z+16, r24	; 0x10
    b6c8:	91 8b       	std	Z+17, r25	; 0x11
    b6ca:	a2 8b       	std	Z+18, r26	; 0x12
    b6cc:	b3 8b       	std	Z+19, r27	; 0x13
    b6ce:	42 85       	ldd	r20, Z+10	; 0x0a
    b6d0:	53 85       	ldd	r21, Z+11	; 0x0b
    b6d2:	64 85       	ldd	r22, Z+12	; 0x0c
    b6d4:	75 85       	ldd	r23, Z+13	; 0x0d
    b6d6:	48 17       	cp	r20, r24
    b6d8:	59 07       	cpc	r21, r25
    b6da:	6a 07       	cpc	r22, r26
    b6dc:	7b 07       	cpc	r23, r27
    b6de:	10 f4       	brcc	.+4      	; 0xb6e4 <f_write+0x302>
    b6e0:	ac 01       	movw	r20, r24
    b6e2:	bd 01       	movw	r22, r26
    b6e4:	f7 01       	movw	r30, r14
    b6e6:	42 87       	std	Z+10, r20	; 0x0a
    b6e8:	53 87       	std	Z+11, r21	; 0x0b
    b6ea:	64 87       	std	Z+12, r22	; 0x0c
    b6ec:	75 87       	std	Z+13, r23	; 0x0d
    b6ee:	ef 81       	ldd	r30, Y+7	; 0x07
    b6f0:	f8 85       	ldd	r31, Y+8	; 0x08
    b6f2:	80 81       	ld	r24, Z
    b6f4:	91 81       	ldd	r25, Z+1	; 0x01
    b6f6:	8c 0d       	add	r24, r12
    b6f8:	9d 1d       	adc	r25, r13
    b6fa:	91 83       	std	Z+1, r25	; 0x01
    b6fc:	80 83       	st	Z, r24
    b6fe:	ac 18       	sub	r10, r12
    b700:	bd 08       	sbc	r11, r13
    b702:	a5 ce       	rjmp	.-694    	; 0xb44e <f_write+0x6c>
    b704:	87 e0       	ldi	r24, 0x07	; 7
    b706:	90 e0       	ldi	r25, 0x00	; 0
    b708:	28 96       	adiw	r28, 0x08	; 8
    b70a:	e2 e1       	ldi	r30, 0x12	; 18
    b70c:	0c 94 dd e8 	jmp	0x1d1ba	; 0x1d1ba <__epilogue_restores__>

0000b710 <f_sync>:
    b710:	8f 92       	push	r8
    b712:	9f 92       	push	r9
    b714:	af 92       	push	r10
    b716:	bf 92       	push	r11
    b718:	ef 92       	push	r14
    b71a:	ff 92       	push	r15
    b71c:	0f 93       	push	r16
    b71e:	1f 93       	push	r17
    b720:	cf 93       	push	r28
    b722:	df 93       	push	r29
    b724:	00 d0       	rcall	.+0      	; 0xb726 <f_sync+0x16>
    b726:	cd b7       	in	r28, 0x3d	; 61
    b728:	de b7       	in	r29, 0x3e	; 62
    b72a:	7c 01       	movw	r14, r24
    b72c:	be 01       	movw	r22, r28
    b72e:	6f 5f       	subi	r22, 0xFF	; 255
    b730:	7f 4f       	sbci	r23, 0xFF	; 255
    b732:	0e 94 25 46 	call	0x8c4a	; 0x8c4a <validate>
    b736:	00 97       	sbiw	r24, 0x00	; 0
    b738:	09 f0       	breq	.+2      	; 0xb73c <f_sync+0x2c>
    b73a:	5d c0       	rjmp	.+186    	; 0xb7f6 <f_sync+0xe6>
    b73c:	f7 01       	movw	r30, r14
    b73e:	86 85       	ldd	r24, Z+14	; 0x0e
    b740:	86 ff       	sbrs	r24, 6
    b742:	55 c0       	rjmp	.+170    	; 0xb7ee <f_sync+0xde>
    b744:	87 ff       	sbrs	r24, 7
    b746:	15 c0       	rjmp	.+42     	; 0xb772 <f_sync+0x62>
    b748:	20 8d       	ldd	r18, Z+24	; 0x18
    b74a:	31 8d       	ldd	r19, Z+25	; 0x19
    b74c:	42 8d       	ldd	r20, Z+26	; 0x1a
    b74e:	53 8d       	ldd	r21, Z+27	; 0x1b
    b750:	e9 81       	ldd	r30, Y+1	; 0x01
    b752:	fa 81       	ldd	r31, Y+2	; 0x02
    b754:	01 e0       	ldi	r16, 0x01	; 1
    b756:	10 e0       	ldi	r17, 0x00	; 0
    b758:	b7 01       	movw	r22, r14
    b75a:	6c 5d       	subi	r22, 0xDC	; 220
    b75c:	7f 4f       	sbci	r23, 0xFF	; 255
    b75e:	81 81       	ldd	r24, Z+1	; 0x01
    b760:	0e 94 b0 6c 	call	0xd960	; 0xd960 <disk_write>
    b764:	89 2b       	or	r24, r25
    b766:	09 f0       	breq	.+2      	; 0xb76a <f_sync+0x5a>
    b768:	44 c0       	rjmp	.+136    	; 0xb7f2 <f_sync+0xe2>
    b76a:	f7 01       	movw	r30, r14
    b76c:	86 85       	ldd	r24, Z+14	; 0x0e
    b76e:	8f 77       	andi	r24, 0x7F	; 127
    b770:	86 87       	std	Z+14, r24	; 0x0e
    b772:	0e 94 23 73 	call	0xe646	; 0xe646 <get_fattime>
    b776:	4b 01       	movw	r8, r22
    b778:	5c 01       	movw	r10, r24
    b77a:	f7 01       	movw	r30, r14
    b77c:	44 8d       	ldd	r20, Z+28	; 0x1c
    b77e:	55 8d       	ldd	r21, Z+29	; 0x1d
    b780:	66 8d       	ldd	r22, Z+30	; 0x1e
    b782:	77 8d       	ldd	r23, Z+31	; 0x1f
    b784:	89 81       	ldd	r24, Y+1	; 0x01
    b786:	9a 81       	ldd	r25, Y+2	; 0x02
    b788:	0e 94 45 47 	call	0x8e8a	; 0x8e8a <move_window>
    b78c:	00 97       	sbiw	r24, 0x00	; 0
    b78e:	99 f5       	brne	.+102    	; 0xb7f6 <f_sync+0xe6>
    b790:	f7 01       	movw	r30, r14
    b792:	00 a1       	ldd	r16, Z+32	; 0x20
    b794:	11 a1       	ldd	r17, Z+33	; 0x21
    b796:	f8 01       	movw	r30, r16
    b798:	83 85       	ldd	r24, Z+11	; 0x0b
    b79a:	80 62       	ori	r24, 0x20	; 32
    b79c:	83 87       	std	Z+11, r24	; 0x0b
    b79e:	f7 01       	movw	r30, r14
    b7a0:	26 81       	ldd	r18, Z+6	; 0x06
    b7a2:	37 81       	ldd	r19, Z+7	; 0x07
    b7a4:	40 85       	ldd	r20, Z+8	; 0x08
    b7a6:	51 85       	ldd	r21, Z+9	; 0x09
    b7a8:	b8 01       	movw	r22, r16
    b7aa:	80 81       	ld	r24, Z
    b7ac:	91 81       	ldd	r25, Z+1	; 0x01
    b7ae:	0e 94 72 46 	call	0x8ce4	; 0x8ce4 <st_clust.isra.2>
    b7b2:	f7 01       	movw	r30, r14
    b7b4:	42 85       	ldd	r20, Z+10	; 0x0a
    b7b6:	53 85       	ldd	r21, Z+11	; 0x0b
    b7b8:	64 85       	ldd	r22, Z+12	; 0x0c
    b7ba:	75 85       	ldd	r23, Z+13	; 0x0d
    b7bc:	c8 01       	movw	r24, r16
    b7be:	4c 96       	adiw	r24, 0x1c	; 28
    b7c0:	0e 94 83 45 	call	0x8b06	; 0x8b06 <st_dword>
    b7c4:	b5 01       	movw	r22, r10
    b7c6:	a4 01       	movw	r20, r8
    b7c8:	c8 01       	movw	r24, r16
    b7ca:	46 96       	adiw	r24, 0x16	; 22
    b7cc:	0e 94 83 45 	call	0x8b06	; 0x8b06 <st_dword>
    b7d0:	f8 01       	movw	r30, r16
    b7d2:	12 8a       	std	Z+18, r1	; 0x12
    b7d4:	13 8a       	std	Z+19, r1	; 0x13
    b7d6:	89 81       	ldd	r24, Y+1	; 0x01
    b7d8:	9a 81       	ldd	r25, Y+2	; 0x02
    b7da:	21 e0       	ldi	r18, 0x01	; 1
    b7dc:	fc 01       	movw	r30, r24
    b7de:	23 83       	std	Z+3, r18	; 0x03
    b7e0:	0e 94 d9 46 	call	0x8db2	; 0x8db2 <sync_fs>
    b7e4:	f7 01       	movw	r30, r14
    b7e6:	26 85       	ldd	r18, Z+14	; 0x0e
    b7e8:	2f 7b       	andi	r18, 0xBF	; 191
    b7ea:	26 87       	std	Z+14, r18	; 0x0e
    b7ec:	04 c0       	rjmp	.+8      	; 0xb7f6 <f_sync+0xe6>
    b7ee:	80 e0       	ldi	r24, 0x00	; 0
    b7f0:	01 c0       	rjmp	.+2      	; 0xb7f4 <f_sync+0xe4>
    b7f2:	81 e0       	ldi	r24, 0x01	; 1
    b7f4:	90 e0       	ldi	r25, 0x00	; 0
    b7f6:	0f 90       	pop	r0
    b7f8:	0f 90       	pop	r0
    b7fa:	df 91       	pop	r29
    b7fc:	cf 91       	pop	r28
    b7fe:	1f 91       	pop	r17
    b800:	0f 91       	pop	r16
    b802:	ff 90       	pop	r15
    b804:	ef 90       	pop	r14
    b806:	bf 90       	pop	r11
    b808:	af 90       	pop	r10
    b80a:	9f 90       	pop	r9
    b80c:	8f 90       	pop	r8
    b80e:	08 95       	ret

0000b810 <f_close>:
    b810:	a2 e0       	ldi	r26, 0x02	; 2
    b812:	b0 e0       	ldi	r27, 0x00	; 0
    b814:	ee e0       	ldi	r30, 0x0E	; 14
    b816:	fc e5       	ldi	r31, 0x5C	; 92
    b818:	0c 94 cf e8 	jmp	0x1d19e	; 0x1d19e <__prologue_saves__+0x1c>
    b81c:	8c 01       	movw	r16, r24
    b81e:	78 df       	rcall	.-272    	; 0xb710 <f_sync>
    b820:	00 97       	sbiw	r24, 0x00	; 0
    b822:	59 f4       	brne	.+22     	; 0xb83a <f_close+0x2a>
    b824:	be 01       	movw	r22, r28
    b826:	6f 5f       	subi	r22, 0xFF	; 255
    b828:	7f 4f       	sbci	r23, 0xFF	; 255
    b82a:	c8 01       	movw	r24, r16
    b82c:	0e 94 25 46 	call	0x8c4a	; 0x8c4a <validate>
    b830:	00 97       	sbiw	r24, 0x00	; 0
    b832:	19 f4       	brne	.+6      	; 0xb83a <f_close+0x2a>
    b834:	f8 01       	movw	r30, r16
    b836:	11 82       	std	Z+1, r1	; 0x01
    b838:	10 82       	st	Z, r1
    b83a:	22 96       	adiw	r28, 0x02	; 2
    b83c:	e4 e0       	ldi	r30, 0x04	; 4
    b83e:	0c 94 eb e8 	jmp	0x1d1d6	; 0x1d1d6 <__epilogue_restores__+0x1c>

0000b842 <f_chdir>:
    b842:	a2 e3       	ldi	r26, 0x32	; 50
    b844:	b0 e0       	ldi	r27, 0x00	; 0
    b846:	e7 e2       	ldi	r30, 0x27	; 39
    b848:	fc e5       	ldi	r31, 0x5C	; 92
    b84a:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__prologue_saves__+0x14>
    b84e:	9a ab       	std	Y+50, r25	; 0x32
    b850:	89 ab       	std	Y+49, r24	; 0x31
    b852:	40 e0       	ldi	r20, 0x00	; 0
    b854:	be 01       	movw	r22, r28
    b856:	61 5d       	subi	r22, 0xD1	; 209
    b858:	7f 4f       	sbci	r23, 0xFF	; 255
    b85a:	ce 01       	movw	r24, r28
    b85c:	c1 96       	adiw	r24, 0x31	; 49
    b85e:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <find_volume>
    b862:	00 97       	sbiw	r24, 0x00	; 0
    b864:	09 f0       	breq	.+2      	; 0xb868 <f_chdir+0x26>
    b866:	44 c0       	rjmp	.+136    	; 0xb8f0 <f_chdir+0xae>
    b868:	8f a5       	ldd	r24, Y+47	; 0x2f
    b86a:	98 a9       	ldd	r25, Y+48	; 0x30
    b86c:	9a 83       	std	Y+2, r25	; 0x02
    b86e:	89 83       	std	Y+1, r24	; 0x01
    b870:	80 e0       	ldi	r24, 0x00	; 0
    b872:	92 e0       	ldi	r25, 0x02	; 2
    b874:	0e 94 13 6c 	call	0xd826	; 0xd826 <ff_memalloc>
    b878:	7c 01       	movw	r14, r24
    b87a:	00 97       	sbiw	r24, 0x00	; 0
    b87c:	a9 f1       	breq	.+106    	; 0xb8e8 <f_chdir+0xa6>
    b87e:	ef a5       	ldd	r30, Y+47	; 0x2f
    b880:	f8 a9       	ldd	r31, Y+48	; 0x30
    b882:	94 87       	std	Z+12, r25	; 0x0c
    b884:	83 87       	std	Z+11, r24	; 0x0b
    b886:	69 a9       	ldd	r22, Y+49	; 0x31
    b888:	7a a9       	ldd	r23, Y+50	; 0x32
    b88a:	ce 01       	movw	r24, r28
    b88c:	01 96       	adiw	r24, 0x01	; 1
    b88e:	03 d8       	rcall	.-4090   	; 0xa896 <follow_path>
    b890:	8c 01       	movw	r16, r24
    b892:	89 2b       	or	r24, r25
    b894:	09 f5       	brne	.+66     	; 0xb8d8 <f_chdir+0x96>
    b896:	88 a5       	ldd	r24, Y+40	; 0x28
    b898:	87 ff       	sbrs	r24, 7
    b89a:	0b c0       	rjmp	.+22     	; 0xb8b2 <f_chdir+0x70>
    b89c:	ef a5       	ldd	r30, Y+47	; 0x2f
    b89e:	f8 a9       	ldd	r31, Y+48	; 0x30
    b8a0:	8f 81       	ldd	r24, Y+7	; 0x07
    b8a2:	98 85       	ldd	r25, Y+8	; 0x08
    b8a4:	a9 85       	ldd	r26, Y+9	; 0x09
    b8a6:	ba 85       	ldd	r27, Y+10	; 0x0a
    b8a8:	85 8b       	std	Z+21, r24	; 0x15
    b8aa:	96 8b       	std	Z+22, r25	; 0x16
    b8ac:	a7 8b       	std	Z+23, r26	; 0x17
    b8ae:	b0 8f       	std	Z+24, r27	; 0x18
    b8b0:	13 c0       	rjmp	.+38     	; 0xb8d8 <f_chdir+0x96>
    b8b2:	8d 81       	ldd	r24, Y+5	; 0x05
    b8b4:	84 ff       	sbrs	r24, 4
    b8b6:	0e c0       	rjmp	.+28     	; 0xb8d4 <f_chdir+0x92>
    b8b8:	cf a4       	ldd	r12, Y+47	; 0x2f
    b8ba:	d8 a8       	ldd	r13, Y+48	; 0x30
    b8bc:	6b 8d       	ldd	r22, Y+27	; 0x1b
    b8be:	7c 8d       	ldd	r23, Y+28	; 0x1c
    b8c0:	f6 01       	movw	r30, r12
    b8c2:	80 81       	ld	r24, Z
    b8c4:	0e 94 5d 46 	call	0x8cba	; 0x8cba <ld_clust.isra.1>
    b8c8:	f6 01       	movw	r30, r12
    b8ca:	65 8b       	std	Z+21, r22	; 0x15
    b8cc:	76 8b       	std	Z+22, r23	; 0x16
    b8ce:	87 8b       	std	Z+23, r24	; 0x17
    b8d0:	90 8f       	std	Z+24, r25	; 0x18
    b8d2:	02 c0       	rjmp	.+4      	; 0xb8d8 <f_chdir+0x96>
    b8d4:	05 e0       	ldi	r16, 0x05	; 5
    b8d6:	10 e0       	ldi	r17, 0x00	; 0
    b8d8:	c7 01       	movw	r24, r14
    b8da:	0e 94 16 6c 	call	0xd82c	; 0xd82c <ff_memfree>
    b8de:	04 30       	cpi	r16, 0x04	; 4
    b8e0:	11 05       	cpc	r17, r1
    b8e2:	29 f4       	brne	.+10     	; 0xb8ee <f_chdir+0xac>
    b8e4:	85 e0       	ldi	r24, 0x05	; 5
    b8e6:	01 c0       	rjmp	.+2      	; 0xb8ea <f_chdir+0xa8>
    b8e8:	81 e1       	ldi	r24, 0x11	; 17
    b8ea:	90 e0       	ldi	r25, 0x00	; 0
    b8ec:	01 c0       	rjmp	.+2      	; 0xb8f0 <f_chdir+0xae>
    b8ee:	c8 01       	movw	r24, r16
    b8f0:	e2 96       	adiw	r28, 0x32	; 50
    b8f2:	e8 e0       	ldi	r30, 0x08	; 8
    b8f4:	0c 94 e7 e8 	jmp	0x1d1ce	; 0x1d1ce <__epilogue_restores__+0x14>

0000b8f8 <f_getcwd>:
    b8f8:	a8 e4       	ldi	r26, 0x48	; 72
    b8fa:	b1 e0       	ldi	r27, 0x01	; 1
    b8fc:	e2 e8       	ldi	r30, 0x82	; 130
    b8fe:	fc e5       	ldi	r31, 0x5C	; 92
    b900:	0c 94 c2 e8 	jmp	0x1d184	; 0x1d184 <__prologue_saves__+0x2>
    b904:	c9 5b       	subi	r28, 0xB9	; 185
    b906:	de 4f       	sbci	r29, 0xFE	; 254
    b908:	99 83       	std	Y+1, r25	; 0x01
    b90a:	88 83       	st	Y, r24
    b90c:	c7 54       	subi	r28, 0x47	; 71
    b90e:	d1 40       	sbci	r29, 0x01	; 1
    b910:	5b 01       	movw	r10, r22
    b912:	fc 01       	movw	r30, r24
    b914:	10 82       	st	Z, r1
    b916:	40 e0       	ldi	r20, 0x00	; 0
    b918:	be 01       	movw	r22, r28
    b91a:	6b 5b       	subi	r22, 0xBB	; 187
    b91c:	7e 4f       	sbci	r23, 0xFE	; 254
    b91e:	ce 01       	movw	r24, r28
    b920:	89 5b       	subi	r24, 0xB9	; 185
    b922:	9e 4f       	sbci	r25, 0xFE	; 254
    b924:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <find_volume>
    b928:	8c 01       	movw	r16, r24
    b92a:	89 2b       	or	r24, r25
    b92c:	09 f0       	breq	.+2      	; 0xb930 <f_getcwd+0x38>
    b92e:	08 c1       	rjmp	.+528    	; 0xbb40 <f_getcwd+0x248>
    b930:	cb 5b       	subi	r28, 0xBB	; 187
    b932:	de 4f       	sbci	r29, 0xFE	; 254
    b934:	88 81       	ld	r24, Y
    b936:	99 81       	ldd	r25, Y+1	; 0x01
    b938:	c5 54       	subi	r28, 0x45	; 69
    b93a:	d1 40       	sbci	r29, 0x01	; 1
    b93c:	c9 5e       	subi	r28, 0xE9	; 233
    b93e:	de 4f       	sbci	r29, 0xFE	; 254
    b940:	99 83       	std	Y+1, r25	; 0x01
    b942:	88 83       	st	Y, r24
    b944:	c7 51       	subi	r28, 0x17	; 23
    b946:	d1 40       	sbci	r29, 0x01	; 1
    b948:	80 e0       	ldi	r24, 0x00	; 0
    b94a:	92 e0       	ldi	r25, 0x02	; 2
    b94c:	0e 94 13 6c 	call	0xd826	; 0xd826 <ff_memalloc>
    b950:	6c 01       	movw	r12, r24
    b952:	00 97       	sbiw	r24, 0x00	; 0
    b954:	09 f4       	brne	.+2      	; 0xb958 <f_getcwd+0x60>
    b956:	f6 c0       	rjmp	.+492    	; 0xbb44 <f_getcwd+0x24c>
    b958:	cb 5b       	subi	r28, 0xBB	; 187
    b95a:	de 4f       	sbci	r29, 0xFE	; 254
    b95c:	e8 81       	ld	r30, Y
    b95e:	f9 81       	ldd	r31, Y+1	; 0x01
    b960:	c5 54       	subi	r28, 0x45	; 69
    b962:	d1 40       	sbci	r29, 0x01	; 1
    b964:	94 87       	std	Z+12, r25	; 0x0c
    b966:	83 87       	std	Z+11, r24	; 0x0b
    b968:	85 89       	ldd	r24, Z+21	; 0x15
    b96a:	96 89       	ldd	r25, Z+22	; 0x16
    b96c:	a7 89       	ldd	r26, Z+23	; 0x17
    b96e:	b0 8d       	ldd	r27, Z+24	; 0x18
    b970:	c3 5e       	subi	r28, 0xE3	; 227
    b972:	de 4f       	sbci	r29, 0xFE	; 254
    b974:	88 83       	st	Y, r24
    b976:	99 83       	std	Y+1, r25	; 0x01
    b978:	aa 83       	std	Y+2, r26	; 0x02
    b97a:	bb 83       	std	Y+3, r27	; 0x03
    b97c:	cd 51       	subi	r28, 0x1D	; 29
    b97e:	d1 40       	sbci	r29, 0x01	; 1
    b980:	75 01       	movw	r14, r10
    b982:	ce 01       	movw	r24, r28
    b984:	01 96       	adiw	r24, 0x01	; 1
    b986:	4c 01       	movw	r8, r24
    b988:	8f e2       	ldi	r24, 0x2F	; 47
    b98a:	38 2e       	mov	r3, r24
    b98c:	c3 5e       	subi	r28, 0xE3	; 227
    b98e:	de 4f       	sbci	r29, 0xFE	; 254
    b990:	48 80       	ld	r4, Y
    b992:	59 80       	ldd	r5, Y+1	; 0x01
    b994:	6a 80       	ldd	r6, Y+2	; 0x02
    b996:	7b 80       	ldd	r7, Y+3	; 0x03
    b998:	cd 51       	subi	r28, 0x1D	; 29
    b99a:	d1 40       	sbci	r29, 0x01	; 1
    b99c:	41 14       	cp	r4, r1
    b99e:	51 04       	cpc	r5, r1
    b9a0:	61 04       	cpc	r6, r1
    b9a2:	71 04       	cpc	r7, r1
    b9a4:	09 f4       	brne	.+2      	; 0xb9a8 <f_getcwd+0xb0>
    b9a6:	a5 c0       	rjmp	.+330    	; 0xbaf2 <f_getcwd+0x1fa>
    b9a8:	40 e2       	ldi	r20, 0x20	; 32
    b9aa:	50 e0       	ldi	r21, 0x00	; 0
    b9ac:	60 e0       	ldi	r22, 0x00	; 0
    b9ae:	70 e0       	ldi	r23, 0x00	; 0
    b9b0:	ce 01       	movw	r24, r28
    b9b2:	89 5e       	subi	r24, 0xE9	; 233
    b9b4:	9e 4f       	sbci	r25, 0xFE	; 254
    b9b6:	0e 94 1e 4c 	call	0x983c	; 0x983c <dir_sdi>
    b9ba:	00 97       	sbiw	r24, 0x00	; 0
    b9bc:	09 f0       	breq	.+2      	; 0xb9c0 <f_getcwd+0xc8>
    b9be:	95 c0       	rjmp	.+298    	; 0xbaea <f_getcwd+0x1f2>
    b9c0:	c3 5d       	subi	r28, 0xD3	; 211
    b9c2:	de 4f       	sbci	r29, 0xFE	; 254
    b9c4:	48 81       	ld	r20, Y
    b9c6:	59 81       	ldd	r21, Y+1	; 0x01
    b9c8:	6a 81       	ldd	r22, Y+2	; 0x02
    b9ca:	7b 81       	ldd	r23, Y+3	; 0x03
    b9cc:	cd 52       	subi	r28, 0x2D	; 45
    b9ce:	d1 40       	sbci	r29, 0x01	; 1
    b9d0:	cb 5b       	subi	r28, 0xBB	; 187
    b9d2:	de 4f       	sbci	r29, 0xFE	; 254
    b9d4:	88 81       	ld	r24, Y
    b9d6:	99 81       	ldd	r25, Y+1	; 0x01
    b9d8:	c5 54       	subi	r28, 0x45	; 69
    b9da:	d1 40       	sbci	r29, 0x01	; 1
    b9dc:	0e 94 45 47 	call	0x8e8a	; 0x8e8a <move_window>
    b9e0:	00 97       	sbiw	r24, 0x00	; 0
    b9e2:	09 f0       	breq	.+2      	; 0xb9e6 <f_getcwd+0xee>
    b9e4:	82 c0       	rjmp	.+260    	; 0xbaea <f_getcwd+0x1f2>
    b9e6:	cf 5c       	subi	r28, 0xCF	; 207
    b9e8:	de 4f       	sbci	r29, 0xFE	; 254
    b9ea:	68 81       	ld	r22, Y
    b9ec:	79 81       	ldd	r23, Y+1	; 0x01
    b9ee:	c1 53       	subi	r28, 0x31	; 49
    b9f0:	d1 40       	sbci	r29, 0x01	; 1
    b9f2:	cb 5b       	subi	r28, 0xBB	; 187
    b9f4:	de 4f       	sbci	r29, 0xFE	; 254
    b9f6:	e8 81       	ld	r30, Y
    b9f8:	f9 81       	ldd	r31, Y+1	; 0x01
    b9fa:	c5 54       	subi	r28, 0x45	; 69
    b9fc:	d1 40       	sbci	r29, 0x01	; 1
    b9fe:	80 81       	ld	r24, Z
    ba00:	0e 94 5d 46 	call	0x8cba	; 0x8cba <ld_clust.isra.1>
    ba04:	c3 5e       	subi	r28, 0xE3	; 227
    ba06:	de 4f       	sbci	r29, 0xFE	; 254
    ba08:	68 83       	st	Y, r22
    ba0a:	79 83       	std	Y+1, r23	; 0x01
    ba0c:	8a 83       	std	Y+2, r24	; 0x02
    ba0e:	9b 83       	std	Y+3, r25	; 0x03
    ba10:	cd 51       	subi	r28, 0x1D	; 29
    ba12:	d1 40       	sbci	r29, 0x01	; 1
    ba14:	40 e0       	ldi	r20, 0x00	; 0
    ba16:	50 e0       	ldi	r21, 0x00	; 0
    ba18:	ba 01       	movw	r22, r20
    ba1a:	ce 01       	movw	r24, r28
    ba1c:	89 5e       	subi	r24, 0xE9	; 233
    ba1e:	9e 4f       	sbci	r25, 0xFE	; 254
    ba20:	0e 94 1e 4c 	call	0x983c	; 0x983c <dir_sdi>
    ba24:	00 97       	sbiw	r24, 0x00	; 0
    ba26:	09 f0       	breq	.+2      	; 0xba2a <f_getcwd+0x132>
    ba28:	60 c0       	rjmp	.+192    	; 0xbaea <f_getcwd+0x1f2>
    ba2a:	60 e0       	ldi	r22, 0x00	; 0
    ba2c:	70 e0       	ldi	r23, 0x00	; 0
    ba2e:	ce 01       	movw	r24, r28
    ba30:	89 5e       	subi	r24, 0xE9	; 233
    ba32:	9e 4f       	sbci	r25, 0xFE	; 254
    ba34:	0e 94 7a 50 	call	0xa0f4	; 0xa0f4 <dir_read>
    ba38:	00 97       	sbiw	r24, 0x00	; 0
    ba3a:	09 f0       	breq	.+2      	; 0xba3e <f_getcwd+0x146>
    ba3c:	86 c0       	rjmp	.+268    	; 0xbb4a <f_getcwd+0x252>
    ba3e:	cf 5c       	subi	r28, 0xCF	; 207
    ba40:	de 4f       	sbci	r29, 0xFE	; 254
    ba42:	68 81       	ld	r22, Y
    ba44:	79 81       	ldd	r23, Y+1	; 0x01
    ba46:	c1 53       	subi	r28, 0x31	; 49
    ba48:	d1 40       	sbci	r29, 0x01	; 1
    ba4a:	cb 5b       	subi	r28, 0xBB	; 187
    ba4c:	de 4f       	sbci	r29, 0xFE	; 254
    ba4e:	e8 81       	ld	r30, Y
    ba50:	f9 81       	ldd	r31, Y+1	; 0x01
    ba52:	c5 54       	subi	r28, 0x45	; 69
    ba54:	d1 40       	sbci	r29, 0x01	; 1
    ba56:	80 81       	ld	r24, Z
    ba58:	0e 94 5d 46 	call	0x8cba	; 0x8cba <ld_clust.isra.1>
    ba5c:	46 16       	cp	r4, r22
    ba5e:	57 06       	cpc	r5, r23
    ba60:	68 06       	cpc	r6, r24
    ba62:	79 06       	cpc	r7, r25
    ba64:	41 f4       	brne	.+16     	; 0xba76 <f_getcwd+0x17e>
    ba66:	b4 01       	movw	r22, r8
    ba68:	ce 01       	movw	r24, r28
    ba6a:	89 5e       	subi	r24, 0xE9	; 233
    ba6c:	9e 4f       	sbci	r25, 0xFE	; 254
    ba6e:	0e 94 40 4e 	call	0x9c80	; 0x9c80 <get_fileinfo>
    ba72:	f4 01       	movw	r30, r8
    ba74:	0a c0       	rjmp	.+20     	; 0xba8a <f_getcwd+0x192>
    ba76:	60 e0       	ldi	r22, 0x00	; 0
    ba78:	70 e0       	ldi	r23, 0x00	; 0
    ba7a:	ce 01       	movw	r24, r28
    ba7c:	89 5e       	subi	r24, 0xE9	; 233
    ba7e:	9e 4f       	sbci	r25, 0xFE	; 254
    ba80:	0e 94 18 4f 	call	0x9e30	; 0x9e30 <dir_next>
    ba84:	00 97       	sbiw	r24, 0x00	; 0
    ba86:	89 f2       	breq	.-94     	; 0xba2a <f_getcwd+0x132>
    ba88:	60 c0       	rjmp	.+192    	; 0xbb4a <f_getcwd+0x252>
    ba8a:	cf 01       	movw	r24, r30
    ba8c:	88 19       	sub	r24, r8
    ba8e:	99 09       	sbc	r25, r9
    ba90:	31 96       	adiw	r30, 0x01	; 1
    ba92:	25 89       	ldd	r18, Z+21	; 0x15
    ba94:	21 11       	cpse	r18, r1
    ba96:	f9 cf       	rjmp	.-14     	; 0xba8a <f_getcwd+0x192>
    ba98:	9c 01       	movw	r18, r24
    ba9a:	2d 5f       	subi	r18, 0xFD	; 253
    ba9c:	3f 4f       	sbci	r19, 0xFF	; 255
    ba9e:	e2 16       	cp	r14, r18
    baa0:	f3 06       	cpc	r15, r19
    baa2:	28 f1       	brcs	.+74     	; 0xbaee <f_getcwd+0x1f6>
    baa4:	f4 01       	movw	r30, r8
    baa6:	e8 0f       	add	r30, r24
    baa8:	f9 1f       	adc	r31, r25
    baaa:	97 01       	movw	r18, r14
    baac:	e8 15       	cp	r30, r8
    baae:	f9 05       	cpc	r31, r9
    bab0:	71 f0       	breq	.+28     	; 0xbace <f_getcwd+0x1d6>
    bab2:	21 50       	subi	r18, 0x01	; 1
    bab4:	31 09       	sbc	r19, r1
    bab6:	45 89       	ldd	r20, Z+21	; 0x15
    bab8:	c9 5b       	subi	r28, 0xB9	; 185
    baba:	de 4f       	sbci	r29, 0xFE	; 254
    babc:	a8 81       	ld	r26, Y
    babe:	b9 81       	ldd	r27, Y+1	; 0x01
    bac0:	c7 54       	subi	r28, 0x47	; 71
    bac2:	d1 40       	sbci	r29, 0x01	; 1
    bac4:	a2 0f       	add	r26, r18
    bac6:	b3 1f       	adc	r27, r19
    bac8:	4c 93       	st	X, r20
    baca:	31 97       	sbiw	r30, 0x01	; 1
    bacc:	ef cf       	rjmp	.-34     	; 0xbaac <f_getcwd+0x1b4>
    bace:	80 95       	com	r24
    bad0:	90 95       	com	r25
    bad2:	e8 0e       	add	r14, r24
    bad4:	f9 1e       	adc	r15, r25
    bad6:	c9 5b       	subi	r28, 0xB9	; 185
    bad8:	de 4f       	sbci	r29, 0xFE	; 254
    bada:	e8 81       	ld	r30, Y
    badc:	f9 81       	ldd	r31, Y+1	; 0x01
    bade:	c7 54       	subi	r28, 0x47	; 71
    bae0:	d1 40       	sbci	r29, 0x01	; 1
    bae2:	ee 0d       	add	r30, r14
    bae4:	ff 1d       	adc	r31, r15
    bae6:	30 82       	st	Z, r3
    bae8:	51 cf       	rjmp	.-350    	; 0xb98c <f_getcwd+0x94>
    baea:	8c 01       	movw	r16, r24
    baec:	02 c0       	rjmp	.+4      	; 0xbaf2 <f_getcwd+0x1fa>
    baee:	01 e1       	ldi	r16, 0x11	; 17
    baf0:	10 e0       	ldi	r17, 0x00	; 0
    baf2:	c9 5b       	subi	r28, 0xB9	; 185
    baf4:	de 4f       	sbci	r29, 0xFE	; 254
    baf6:	e8 81       	ld	r30, Y
    baf8:	f9 81       	ldd	r31, Y+1	; 0x01
    bafa:	c7 54       	subi	r28, 0x47	; 71
    bafc:	d1 40       	sbci	r29, 0x01	; 1
    bafe:	01 15       	cp	r16, r1
    bb00:	11 05       	cpc	r17, r1
    bb02:	d1 f4       	brne	.+52     	; 0xbb38 <f_getcwd+0x240>
    bb04:	ea 14       	cp	r14, r10
    bb06:	fb 04       	cpc	r15, r11
    bb08:	21 f4       	brne	.+8      	; 0xbb12 <f_getcwd+0x21a>
    bb0a:	8f e2       	ldi	r24, 0x2F	; 47
    bb0c:	80 83       	st	Z, r24
    bb0e:	31 96       	adiw	r30, 0x01	; 1
    bb10:	13 c0       	rjmp	.+38     	; 0xbb38 <f_getcwd+0x240>
    bb12:	31 96       	adiw	r30, 0x01	; 1
    bb14:	c9 5b       	subi	r28, 0xB9	; 185
    bb16:	de 4f       	sbci	r29, 0xFE	; 254
    bb18:	a8 81       	ld	r26, Y
    bb1a:	b9 81       	ldd	r27, Y+1	; 0x01
    bb1c:	c7 54       	subi	r28, 0x47	; 71
    bb1e:	d1 40       	sbci	r29, 0x01	; 1
    bb20:	ae 0d       	add	r26, r14
    bb22:	bf 1d       	adc	r27, r15
    bb24:	8c 91       	ld	r24, X
    bb26:	df 01       	movw	r26, r30
    bb28:	11 97       	sbiw	r26, 0x01	; 1
    bb2a:	8c 93       	st	X, r24
    bb2c:	c7 01       	movw	r24, r14
    bb2e:	01 96       	adiw	r24, 0x01	; 1
    bb30:	7c 01       	movw	r14, r24
    bb32:	8a 15       	cp	r24, r10
    bb34:	9b 05       	cpc	r25, r11
    bb36:	68 f3       	brcs	.-38     	; 0xbb12 <f_getcwd+0x21a>
    bb38:	10 82       	st	Z, r1
    bb3a:	c6 01       	movw	r24, r12
    bb3c:	0e 94 16 6c 	call	0xd82c	; 0xd82c <ff_memfree>
    bb40:	c8 01       	movw	r24, r16
    bb42:	09 c0       	rjmp	.+18     	; 0xbb56 <f_getcwd+0x25e>
    bb44:	81 e1       	ldi	r24, 0x11	; 17
    bb46:	90 e0       	ldi	r25, 0x00	; 0
    bb48:	06 c0       	rjmp	.+12     	; 0xbb56 <f_getcwd+0x25e>
    bb4a:	8c 01       	movw	r16, r24
    bb4c:	04 97       	sbiw	r24, 0x04	; 4
    bb4e:	89 f6       	brne	.-94     	; 0xbaf2 <f_getcwd+0x1fa>
    bb50:	02 e0       	ldi	r16, 0x02	; 2
    bb52:	10 e0       	ldi	r17, 0x00	; 0
    bb54:	ce cf       	rjmp	.-100    	; 0xbaf2 <f_getcwd+0x1fa>
    bb56:	c8 5b       	subi	r28, 0xB8	; 184
    bb58:	de 4f       	sbci	r29, 0xFE	; 254
    bb5a:	e1 e1       	ldi	r30, 0x11	; 17
    bb5c:	0c 94 de e8 	jmp	0x1d1bc	; 0x1d1bc <__epilogue_restores__+0x2>

0000bb60 <f_lseek>:
    bb60:	aa e0       	ldi	r26, 0x0A	; 10
    bb62:	b0 e0       	ldi	r27, 0x00	; 0
    bb64:	e6 eb       	ldi	r30, 0xB6	; 182
    bb66:	fd e5       	ldi	r31, 0x5D	; 93
    bb68:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__prologue_saves__>
    bb6c:	1c 01       	movw	r2, r24
    bb6e:	6a 01       	movw	r12, r20
    bb70:	7b 01       	movw	r14, r22
    bb72:	be 01       	movw	r22, r28
    bb74:	6f 5f       	subi	r22, 0xFF	; 255
    bb76:	7f 4f       	sbci	r23, 0xFF	; 255
    bb78:	0e 94 25 46 	call	0x8c4a	; 0x8c4a <validate>
    bb7c:	00 97       	sbiw	r24, 0x00	; 0
    bb7e:	09 f0       	breq	.+2      	; 0xbb82 <f_lseek+0x22>
    bb80:	c8 c2       	rjmp	.+1424   	; 0xc112 <f_lseek+0x5b2>
    bb82:	d1 01       	movw	r26, r2
    bb84:	1f 96       	adiw	r26, 0x0f	; 15
    bb86:	8c 91       	ld	r24, X
    bb88:	1f 97       	sbiw	r26, 0x0f	; 15
    bb8a:	90 e0       	ldi	r25, 0x00	; 0
    bb8c:	00 97       	sbiw	r24, 0x00	; 0
    bb8e:	09 f0       	breq	.+2      	; 0xbb92 <f_lseek+0x32>
    bb90:	c0 c2       	rjmp	.+1408   	; 0xc112 <f_lseek+0x5b2>
    bb92:	92 96       	adiw	r26, 0x22	; 34
    bb94:	ed 91       	ld	r30, X+
    bb96:	fc 91       	ld	r31, X
    bb98:	93 97       	sbiw	r26, 0x23	; 35
    bb9a:	30 97       	sbiw	r30, 0x00	; 0
    bb9c:	09 f4       	brne	.+2      	; 0xbba0 <f_lseek+0x40>
    bb9e:	3a c1       	rjmp	.+628    	; 0xbe14 <f_lseek+0x2b4>
    bba0:	bf ef       	ldi	r27, 0xFF	; 255
    bba2:	cb 16       	cp	r12, r27
    bba4:	db 06       	cpc	r13, r27
    bba6:	eb 06       	cpc	r14, r27
    bba8:	fb 06       	cpc	r15, r27
    bbaa:	09 f0       	breq	.+2      	; 0xbbae <f_lseek+0x4e>
    bbac:	9f c0       	rjmp	.+318    	; 0xbcec <f_lseek+0x18c>
    bbae:	8f 01       	movw	r16, r30
    bbb0:	0c 5f       	subi	r16, 0xFC	; 252
    bbb2:	1f 4f       	sbci	r17, 0xFF	; 255
    bbb4:	20 81       	ld	r18, Z
    bbb6:	31 81       	ldd	r19, Z+1	; 0x01
    bbb8:	42 81       	ldd	r20, Z+2	; 0x02
    bbba:	53 81       	ldd	r21, Z+3	; 0x03
    bbbc:	2f 83       	std	Y+7, r18	; 0x07
    bbbe:	38 87       	std	Y+8, r19	; 0x08
    bbc0:	49 87       	std	Y+9, r20	; 0x09
    bbc2:	5a 87       	std	Y+10, r21	; 0x0a
    bbc4:	d1 01       	movw	r26, r2
    bbc6:	16 96       	adiw	r26, 0x06	; 6
    bbc8:	8d 90       	ld	r8, X+
    bbca:	9d 90       	ld	r9, X+
    bbcc:	ad 90       	ld	r10, X+
    bbce:	bc 90       	ld	r11, X
    bbd0:	19 97       	sbiw	r26, 0x09	; 9
    bbd2:	52 e0       	ldi	r21, 0x02	; 2
    bbd4:	c5 2e       	mov	r12, r21
    bbd6:	d1 2c       	mov	r13, r1
    bbd8:	e1 2c       	mov	r14, r1
    bbda:	f1 2c       	mov	r15, r1
    bbdc:	81 14       	cp	r8, r1
    bbde:	91 04       	cpc	r9, r1
    bbe0:	a1 04       	cpc	r10, r1
    bbe2:	b1 04       	cpc	r11, r1
    bbe4:	09 f4       	brne	.+2      	; 0xbbe8 <f_lseek+0x88>
    bbe6:	68 c0       	rjmp	.+208    	; 0xbcb8 <f_lseek+0x158>
    bbe8:	24 01       	movw	r4, r8
    bbea:	35 01       	movw	r6, r10
    bbec:	1b 82       	std	Y+3, r1	; 0x03
    bbee:	1c 82       	std	Y+4, r1	; 0x04
    bbf0:	1d 82       	std	Y+5, r1	; 0x05
    bbf2:	1e 82       	std	Y+6, r1	; 0x06
    bbf4:	2b 81       	ldd	r18, Y+3	; 0x03
    bbf6:	3c 81       	ldd	r19, Y+4	; 0x04
    bbf8:	4d 81       	ldd	r20, Y+5	; 0x05
    bbfa:	5e 81       	ldd	r21, Y+6	; 0x06
    bbfc:	2f 5f       	subi	r18, 0xFF	; 255
    bbfe:	3f 4f       	sbci	r19, 0xFF	; 255
    bc00:	4f 4f       	sbci	r20, 0xFF	; 255
    bc02:	5f 4f       	sbci	r21, 0xFF	; 255
    bc04:	2b 83       	std	Y+3, r18	; 0x03
    bc06:	3c 83       	std	Y+4, r19	; 0x04
    bc08:	4d 83       	std	Y+5, r20	; 0x05
    bc0a:	5e 83       	std	Y+6, r21	; 0x06
    bc0c:	b3 01       	movw	r22, r6
    bc0e:	a2 01       	movw	r20, r4
    bc10:	d1 01       	movw	r26, r2
    bc12:	8d 91       	ld	r24, X+
    bc14:	9c 91       	ld	r25, X
    bc16:	0e 94 6b 4b 	call	0x96d6	; 0x96d6 <get_fat.isra.7>
    bc1a:	62 30       	cpi	r22, 0x02	; 2
    bc1c:	71 05       	cpc	r23, r1
    bc1e:	81 05       	cpc	r24, r1
    bc20:	91 05       	cpc	r25, r1
    bc22:	20 f4       	brcc	.+8      	; 0xbc2c <f_lseek+0xcc>
    bc24:	82 e0       	ldi	r24, 0x02	; 2
    bc26:	f1 01       	movw	r30, r2
    bc28:	87 87       	std	Z+15, r24	; 0x0f
    bc2a:	0a c0       	rjmp	.+20     	; 0xbc40 <f_lseek+0xe0>
    bc2c:	6f 3f       	cpi	r22, 0xFF	; 255
    bc2e:	ff ef       	ldi	r31, 0xFF	; 255
    bc30:	7f 07       	cpc	r23, r31
    bc32:	8f 07       	cpc	r24, r31
    bc34:	9f 07       	cpc	r25, r31
    bc36:	31 f4       	brne	.+12     	; 0xbc44 <f_lseek+0xe4>
    bc38:	81 e0       	ldi	r24, 0x01	; 1
    bc3a:	d1 01       	movw	r26, r2
    bc3c:	1f 96       	adiw	r26, 0x0f	; 15
    bc3e:	8c 93       	st	X, r24
    bc40:	90 e0       	ldi	r25, 0x00	; 0
    bc42:	67 c2       	rjmp	.+1230   	; 0xc112 <f_lseek+0x5b2>
    bc44:	a3 01       	movw	r20, r6
    bc46:	92 01       	movw	r18, r4
    bc48:	2f 5f       	subi	r18, 0xFF	; 255
    bc4a:	3f 4f       	sbci	r19, 0xFF	; 255
    bc4c:	4f 4f       	sbci	r20, 0xFF	; 255
    bc4e:	5f 4f       	sbci	r21, 0xFF	; 255
    bc50:	2b 01       	movw	r4, r22
    bc52:	3c 01       	movw	r6, r24
    bc54:	62 17       	cp	r22, r18
    bc56:	73 07       	cpc	r23, r19
    bc58:	84 07       	cpc	r24, r20
    bc5a:	95 07       	cpc	r25, r21
    bc5c:	59 f2       	breq	.-106    	; 0xbbf4 <f_lseek+0x94>
    bc5e:	b2 e0       	ldi	r27, 0x02	; 2
    bc60:	cb 0e       	add	r12, r27
    bc62:	d1 1c       	adc	r13, r1
    bc64:	e1 1c       	adc	r14, r1
    bc66:	f1 1c       	adc	r15, r1
    bc68:	2f 81       	ldd	r18, Y+7	; 0x07
    bc6a:	38 85       	ldd	r19, Y+8	; 0x08
    bc6c:	49 85       	ldd	r20, Y+9	; 0x09
    bc6e:	5a 85       	ldd	r21, Y+10	; 0x0a
    bc70:	2c 15       	cp	r18, r12
    bc72:	3d 05       	cpc	r19, r13
    bc74:	4e 05       	cpc	r20, r14
    bc76:	5f 05       	cpc	r21, r15
    bc78:	88 f0       	brcs	.+34     	; 0xbc9c <f_lseek+0x13c>
    bc7a:	2b 81       	ldd	r18, Y+3	; 0x03
    bc7c:	3c 81       	ldd	r19, Y+4	; 0x04
    bc7e:	4d 81       	ldd	r20, Y+5	; 0x05
    bc80:	5e 81       	ldd	r21, Y+6	; 0x06
    bc82:	d8 01       	movw	r26, r16
    bc84:	2d 93       	st	X+, r18
    bc86:	3d 93       	st	X+, r19
    bc88:	4d 93       	st	X+, r20
    bc8a:	5c 93       	st	X, r21
    bc8c:	13 97       	sbiw	r26, 0x03	; 3
    bc8e:	f8 01       	movw	r30, r16
    bc90:	84 82       	std	Z+4, r8	; 0x04
    bc92:	95 82       	std	Z+5, r9	; 0x05
    bc94:	a6 82       	std	Z+6, r10	; 0x06
    bc96:	b7 82       	std	Z+7, r11	; 0x07
    bc98:	08 5f       	subi	r16, 0xF8	; 248
    bc9a:	1f 4f       	sbci	r17, 0xFF	; 255
    bc9c:	e9 81       	ldd	r30, Y+1	; 0x01
    bc9e:	fa 81       	ldd	r31, Y+2	; 0x02
    bca0:	81 8c       	ldd	r8, Z+25	; 0x19
    bca2:	92 8c       	ldd	r9, Z+26	; 0x1a
    bca4:	a3 8c       	ldd	r10, Z+27	; 0x1b
    bca6:	b4 8c       	ldd	r11, Z+28	; 0x1c
    bca8:	68 15       	cp	r22, r8
    bcaa:	79 05       	cpc	r23, r9
    bcac:	8a 05       	cpc	r24, r10
    bcae:	9b 05       	cpc	r25, r11
    bcb0:	18 f4       	brcc	.+6      	; 0xbcb8 <f_lseek+0x158>
    bcb2:	4b 01       	movw	r8, r22
    bcb4:	5c 01       	movw	r10, r24
    bcb6:	98 cf       	rjmp	.-208    	; 0xbbe8 <f_lseek+0x88>
    bcb8:	d1 01       	movw	r26, r2
    bcba:	92 96       	adiw	r26, 0x22	; 34
    bcbc:	ed 91       	ld	r30, X+
    bcbe:	fc 91       	ld	r31, X
    bcc0:	93 97       	sbiw	r26, 0x23	; 35
    bcc2:	c0 82       	st	Z, r12
    bcc4:	d1 82       	std	Z+1, r13	; 0x01
    bcc6:	e2 82       	std	Z+2, r14	; 0x02
    bcc8:	f3 82       	std	Z+3, r15	; 0x03
    bcca:	2f 81       	ldd	r18, Y+7	; 0x07
    bccc:	38 85       	ldd	r19, Y+8	; 0x08
    bcce:	49 85       	ldd	r20, Y+9	; 0x09
    bcd0:	5a 85       	ldd	r21, Y+10	; 0x0a
    bcd2:	2c 15       	cp	r18, r12
    bcd4:	3d 05       	cpc	r19, r13
    bcd6:	4e 05       	cpc	r20, r14
    bcd8:	5f 05       	cpc	r21, r15
    bcda:	08 f4       	brcc	.+2      	; 0xbcde <f_lseek+0x17e>
    bcdc:	11 c2       	rjmp	.+1058   	; 0xc100 <f_lseek+0x5a0>
    bcde:	d8 01       	movw	r26, r16
    bce0:	1d 92       	st	X+, r1
    bce2:	1d 92       	st	X+, r1
    bce4:	1d 92       	st	X+, r1
    bce6:	1c 92       	st	X, r1
    bce8:	13 97       	sbiw	r26, 0x03	; 3
    bcea:	08 c2       	rjmp	.+1040   	; 0xc0fc <f_lseek+0x59c>
    bcec:	f1 01       	movw	r30, r2
    bcee:	82 85       	ldd	r24, Z+10	; 0x0a
    bcf0:	93 85       	ldd	r25, Z+11	; 0x0b
    bcf2:	a4 85       	ldd	r26, Z+12	; 0x0c
    bcf4:	b5 85       	ldd	r27, Z+13	; 0x0d
    bcf6:	46 01       	movw	r8, r12
    bcf8:	57 01       	movw	r10, r14
    bcfa:	8c 15       	cp	r24, r12
    bcfc:	9d 05       	cpc	r25, r13
    bcfe:	ae 05       	cpc	r26, r14
    bd00:	bf 05       	cpc	r27, r15
    bd02:	10 f4       	brcc	.+4      	; 0xbd08 <f_lseek+0x1a8>
    bd04:	4c 01       	movw	r8, r24
    bd06:	5d 01       	movw	r10, r26
    bd08:	d1 01       	movw	r26, r2
    bd0a:	50 96       	adiw	r26, 0x10	; 16
    bd0c:	8d 92       	st	X+, r8
    bd0e:	9d 92       	st	X+, r9
    bd10:	ad 92       	st	X+, r10
    bd12:	bc 92       	st	X, r11
    bd14:	53 97       	sbiw	r26, 0x13	; 19
    bd16:	81 14       	cp	r8, r1
    bd18:	91 04       	cpc	r9, r1
    bd1a:	a1 04       	cpc	r10, r1
    bd1c:	b1 04       	cpc	r11, r1
    bd1e:	09 f4       	brne	.+2      	; 0xbd22 <f_lseek+0x1c2>
    bd20:	ed c1       	rjmp	.+986    	; 0xc0fc <f_lseek+0x59c>
    bd22:	24 01       	movw	r4, r8
    bd24:	35 01       	movw	r6, r10
    bd26:	b1 e0       	ldi	r27, 0x01	; 1
    bd28:	4b 1a       	sub	r4, r27
    bd2a:	51 08       	sbc	r5, r1
    bd2c:	61 08       	sbc	r6, r1
    bd2e:	71 08       	sbc	r7, r1
    bd30:	b3 01       	movw	r22, r6
    bd32:	a2 01       	movw	r20, r4
    bd34:	c1 01       	movw	r24, r2
    bd36:	0e 94 ba 45 	call	0x8b74	; 0x8b74 <clmt_clust>
    bd3a:	ab 01       	movw	r20, r22
    bd3c:	bc 01       	movw	r22, r24
    bd3e:	f1 01       	movw	r30, r2
    bd40:	44 8b       	std	Z+20, r20	; 0x14
    bd42:	55 8b       	std	Z+21, r21	; 0x15
    bd44:	66 8b       	std	Z+22, r22	; 0x16
    bd46:	77 8b       	std	Z+23, r23	; 0x17
    bd48:	e9 80       	ldd	r14, Y+1	; 0x01
    bd4a:	fa 80       	ldd	r15, Y+2	; 0x02
    bd4c:	c7 01       	movw	r24, r14
    bd4e:	0e 94 92 45 	call	0x8b24	; 0x8b24 <clust2sect>
    bd52:	61 15       	cp	r22, r1
    bd54:	71 05       	cpc	r23, r1
    bd56:	81 05       	cpc	r24, r1
    bd58:	91 05       	cpc	r25, r1
    bd5a:	09 f4       	brne	.+2      	; 0xbd5e <f_lseek+0x1fe>
    bd5c:	63 cf       	rjmp	.-314    	; 0xbc24 <f_lseek+0xc4>
    bd5e:	95 01       	movw	r18, r10
    bd60:	84 01       	movw	r16, r8
    bd62:	11 70       	andi	r17, 0x01	; 1
    bd64:	22 27       	eor	r18, r18
    bd66:	33 27       	eor	r19, r19
    bd68:	01 15       	cp	r16, r1
    bd6a:	11 05       	cpc	r17, r1
    bd6c:	21 05       	cpc	r18, r1
    bd6e:	31 05       	cpc	r19, r1
    bd70:	09 f4       	brne	.+2      	; 0xbd74 <f_lseek+0x214>
    bd72:	c4 c1       	rjmp	.+904    	; 0xc0fc <f_lseek+0x59c>
    bd74:	d7 01       	movw	r26, r14
    bd76:	19 96       	adiw	r26, 0x09	; 9
    bd78:	8d 90       	ld	r8, X+
    bd7a:	9c 90       	ld	r9, X
    bd7c:	1a 97       	sbiw	r26, 0x0a	; 10
    bd7e:	b1 e0       	ldi	r27, 0x01	; 1
    bd80:	8b 1a       	sub	r8, r27
    bd82:	91 08       	sbc	r9, r1
    bd84:	a1 2c       	mov	r10, r1
    bd86:	b1 2c       	mov	r11, r1
    bd88:	49 e0       	ldi	r20, 0x09	; 9
    bd8a:	76 94       	lsr	r7
    bd8c:	67 94       	ror	r6
    bd8e:	57 94       	ror	r5
    bd90:	47 94       	ror	r4
    bd92:	4a 95       	dec	r20
    bd94:	d1 f7       	brne	.-12     	; 0xbd8a <f_lseek+0x22a>
    bd96:	48 20       	and	r4, r8
    bd98:	59 20       	and	r5, r9
    bd9a:	6a 20       	and	r6, r10
    bd9c:	7b 20       	and	r7, r11
    bd9e:	53 01       	movw	r10, r6
    bda0:	42 01       	movw	r8, r4
    bda2:	86 0e       	add	r8, r22
    bda4:	97 1e       	adc	r9, r23
    bda6:	a8 1e       	adc	r10, r24
    bda8:	b9 1e       	adc	r11, r25
    bdaa:	f1 01       	movw	r30, r2
    bdac:	20 8d       	ldd	r18, Z+24	; 0x18
    bdae:	31 8d       	ldd	r19, Z+25	; 0x19
    bdb0:	42 8d       	ldd	r20, Z+26	; 0x1a
    bdb2:	53 8d       	ldd	r21, Z+27	; 0x1b
    bdb4:	82 16       	cp	r8, r18
    bdb6:	93 06       	cpc	r9, r19
    bdb8:	a4 06       	cpc	r10, r20
    bdba:	b5 06       	cpc	r11, r21
    bdbc:	09 f4       	brne	.+2      	; 0xbdc0 <f_lseek+0x260>
    bdbe:	9e c1       	rjmp	.+828    	; 0xc0fc <f_lseek+0x59c>
    bdc0:	86 85       	ldd	r24, Z+14	; 0x0e
    bdc2:	b1 01       	movw	r22, r2
    bdc4:	6c 5d       	subi	r22, 0xDC	; 220
    bdc6:	7f 4f       	sbci	r23, 0xFF	; 255
    bdc8:	6b 01       	movw	r12, r22
    bdca:	87 ff       	sbrs	r24, 7
    bdcc:	0e c0       	rjmp	.+28     	; 0xbdea <f_lseek+0x28a>
    bdce:	01 e0       	ldi	r16, 0x01	; 1
    bdd0:	10 e0       	ldi	r17, 0x00	; 0
    bdd2:	d7 01       	movw	r26, r14
    bdd4:	11 96       	adiw	r26, 0x01	; 1
    bdd6:	8c 91       	ld	r24, X
    bdd8:	0e 94 b0 6c 	call	0xd960	; 0xd960 <disk_write>
    bddc:	89 2b       	or	r24, r25
    bdde:	09 f0       	breq	.+2      	; 0xbde2 <f_lseek+0x282>
    bde0:	2b cf       	rjmp	.-426    	; 0xbc38 <f_lseek+0xd8>
    bde2:	f1 01       	movw	r30, r2
    bde4:	86 85       	ldd	r24, Z+14	; 0x0e
    bde6:	8f 77       	andi	r24, 0x7F	; 127
    bde8:	86 87       	std	Z+14, r24	; 0x0e
    bdea:	e9 81       	ldd	r30, Y+1	; 0x01
    bdec:	fa 81       	ldd	r31, Y+2	; 0x02
    bdee:	01 e0       	ldi	r16, 0x01	; 1
    bdf0:	10 e0       	ldi	r17, 0x00	; 0
    bdf2:	a5 01       	movw	r20, r10
    bdf4:	94 01       	movw	r18, r8
    bdf6:	b6 01       	movw	r22, r12
    bdf8:	81 81       	ldd	r24, Z+1	; 0x01
    bdfa:	0e 94 a0 6c 	call	0xd940	; 0xd940 <disk_read>
    bdfe:	89 2b       	or	r24, r25
    be00:	09 f0       	breq	.+2      	; 0xbe04 <f_lseek+0x2a4>
    be02:	1a cf       	rjmp	.-460    	; 0xbc38 <f_lseek+0xd8>
    be04:	d1 01       	movw	r26, r2
    be06:	58 96       	adiw	r26, 0x18	; 24
    be08:	8d 92       	st	X+, r8
    be0a:	9d 92       	st	X+, r9
    be0c:	ad 92       	st	X+, r10
    be0e:	bc 92       	st	X, r11
    be10:	5b 97       	sbiw	r26, 0x1b	; 27
    be12:	74 c1       	rjmp	.+744    	; 0xc0fc <f_lseek+0x59c>
    be14:	f1 01       	movw	r30, r2
    be16:	82 85       	ldd	r24, Z+10	; 0x0a
    be18:	93 85       	ldd	r25, Z+11	; 0x0b
    be1a:	a4 85       	ldd	r26, Z+12	; 0x0c
    be1c:	b5 85       	ldd	r27, Z+13	; 0x0d
    be1e:	8c 15       	cp	r24, r12
    be20:	9d 05       	cpc	r25, r13
    be22:	ae 05       	cpc	r26, r14
    be24:	bf 05       	cpc	r27, r15
    be26:	28 f4       	brcc	.+10     	; 0xbe32 <f_lseek+0x2d2>
    be28:	26 85       	ldd	r18, Z+14	; 0x0e
    be2a:	21 fd       	sbrc	r18, 1
    be2c:	02 c0       	rjmp	.+4      	; 0xbe32 <f_lseek+0x2d2>
    be2e:	6c 01       	movw	r12, r24
    be30:	7d 01       	movw	r14, r26
    be32:	d1 01       	movw	r26, r2
    be34:	50 96       	adiw	r26, 0x10	; 16
    be36:	4d 90       	ld	r4, X+
    be38:	5d 90       	ld	r5, X+
    be3a:	6d 90       	ld	r6, X+
    be3c:	7c 90       	ld	r7, X
    be3e:	53 97       	sbiw	r26, 0x13	; 19
    be40:	f1 01       	movw	r30, r2
    be42:	10 8a       	std	Z+16, r1	; 0x10
    be44:	11 8a       	std	Z+17, r1	; 0x11
    be46:	12 8a       	std	Z+18, r1	; 0x12
    be48:	13 8a       	std	Z+19, r1	; 0x13
    be4a:	c1 14       	cp	r12, r1
    be4c:	d1 04       	cpc	r13, r1
    be4e:	e1 04       	cpc	r14, r1
    be50:	f1 04       	cpc	r15, r1
    be52:	09 f4       	brne	.+2      	; 0xbe56 <f_lseek+0x2f6>
    be54:	57 c1       	rjmp	.+686    	; 0xc104 <f_lseek+0x5a4>
    be56:	e9 81       	ldd	r30, Y+1	; 0x01
    be58:	fa 81       	ldd	r31, Y+2	; 0x02
    be5a:	81 84       	ldd	r8, Z+9	; 0x09
    be5c:	92 84       	ldd	r9, Z+10	; 0x0a
    be5e:	a1 2c       	mov	r10, r1
    be60:	b1 2c       	mov	r11, r1
    be62:	39 e0       	ldi	r19, 0x09	; 9
    be64:	88 0c       	add	r8, r8
    be66:	99 1c       	adc	r9, r9
    be68:	aa 1c       	adc	r10, r10
    be6a:	bb 1c       	adc	r11, r11
    be6c:	3a 95       	dec	r19
    be6e:	d1 f7       	brne	.-12     	; 0xbe64 <f_lseek+0x304>
    be70:	41 14       	cp	r4, r1
    be72:	51 04       	cpc	r5, r1
    be74:	61 04       	cpc	r6, r1
    be76:	71 04       	cpc	r7, r1
    be78:	09 f4       	brne	.+2      	; 0xbe7c <f_lseek+0x31c>
    be7a:	3f c0       	rjmp	.+126    	; 0xbefa <f_lseek+0x39a>
    be7c:	f1 e0       	ldi	r31, 0x01	; 1
    be7e:	4f 1a       	sub	r4, r31
    be80:	51 08       	sbc	r5, r1
    be82:	61 08       	sbc	r6, r1
    be84:	71 08       	sbc	r7, r1
    be86:	c7 01       	movw	r24, r14
    be88:	b6 01       	movw	r22, r12
    be8a:	61 50       	subi	r22, 0x01	; 1
    be8c:	71 09       	sbc	r23, r1
    be8e:	81 09       	sbc	r24, r1
    be90:	91 09       	sbc	r25, r1
    be92:	a5 01       	movw	r20, r10
    be94:	94 01       	movw	r18, r8
    be96:	0e 94 54 e8 	call	0x1d0a8	; 0x1d0a8 <__udivmodsi4>
    be9a:	2b 83       	std	Y+3, r18	; 0x03
    be9c:	3c 83       	std	Y+4, r19	; 0x04
    be9e:	4d 83       	std	Y+5, r20	; 0x05
    bea0:	5e 83       	std	Y+6, r21	; 0x06
    bea2:	c3 01       	movw	r24, r6
    bea4:	b2 01       	movw	r22, r4
    bea6:	a5 01       	movw	r20, r10
    bea8:	94 01       	movw	r18, r8
    beaa:	0e 94 54 e8 	call	0x1d0a8	; 0x1d0a8 <__udivmodsi4>
    beae:	6b 81       	ldd	r22, Y+3	; 0x03
    beb0:	7c 81       	ldd	r23, Y+4	; 0x04
    beb2:	8d 81       	ldd	r24, Y+5	; 0x05
    beb4:	9e 81       	ldd	r25, Y+6	; 0x06
    beb6:	62 17       	cp	r22, r18
    beb8:	73 07       	cpc	r23, r19
    beba:	84 07       	cpc	r24, r20
    bebc:	95 07       	cpc	r25, r21
    bebe:	e8 f0       	brcs	.+58     	; 0xbefa <f_lseek+0x39a>
    bec0:	88 27       	eor	r24, r24
    bec2:	99 27       	eor	r25, r25
    bec4:	dc 01       	movw	r26, r24
    bec6:	88 19       	sub	r24, r8
    bec8:	99 09       	sbc	r25, r9
    beca:	aa 09       	sbc	r26, r10
    becc:	bb 09       	sbc	r27, r11
    bece:	48 22       	and	r4, r24
    bed0:	59 22       	and	r5, r25
    bed2:	6a 22       	and	r6, r26
    bed4:	7b 22       	and	r7, r27
    bed6:	d1 01       	movw	r26, r2
    bed8:	50 96       	adiw	r26, 0x10	; 16
    beda:	4d 92       	st	X+, r4
    bedc:	5d 92       	st	X+, r5
    bede:	6d 92       	st	X+, r6
    bee0:	7c 92       	st	X, r7
    bee2:	53 97       	sbiw	r26, 0x13	; 19
    bee4:	c4 18       	sub	r12, r4
    bee6:	d5 08       	sbc	r13, r5
    bee8:	e6 08       	sbc	r14, r6
    beea:	f7 08       	sbc	r15, r7
    beec:	54 96       	adiw	r26, 0x14	; 20
    beee:	4d 91       	ld	r20, X+
    bef0:	5d 91       	ld	r21, X+
    bef2:	6d 91       	ld	r22, X+
    bef4:	7c 91       	ld	r23, X
    bef6:	57 97       	sbiw	r26, 0x17	; 23
    bef8:	2b c0       	rjmp	.+86     	; 0xbf50 <f_lseek+0x3f0>
    befa:	f1 01       	movw	r30, r2
    befc:	46 81       	ldd	r20, Z+6	; 0x06
    befe:	57 81       	ldd	r21, Z+7	; 0x07
    bf00:	60 85       	ldd	r22, Z+8	; 0x08
    bf02:	71 85       	ldd	r23, Z+9	; 0x09
    bf04:	41 15       	cp	r20, r1
    bf06:	51 05       	cpc	r21, r1
    bf08:	61 05       	cpc	r22, r1
    bf0a:	71 05       	cpc	r23, r1
    bf0c:	e1 f4       	brne	.+56     	; 0xbf46 <f_lseek+0x3e6>
    bf0e:	40 e0       	ldi	r20, 0x00	; 0
    bf10:	50 e0       	ldi	r21, 0x00	; 0
    bf12:	ba 01       	movw	r22, r20
    bf14:	c1 01       	movw	r24, r2
    bf16:	0e 94 de 4c 	call	0x99bc	; 0x99bc <create_chain>
    bf1a:	ab 01       	movw	r20, r22
    bf1c:	bc 01       	movw	r22, r24
    bf1e:	41 30       	cpi	r20, 0x01	; 1
    bf20:	51 05       	cpc	r21, r1
    bf22:	61 05       	cpc	r22, r1
    bf24:	71 05       	cpc	r23, r1
    bf26:	09 f4       	brne	.+2      	; 0xbf2a <f_lseek+0x3ca>
    bf28:	7d ce       	rjmp	.-774    	; 0xbc24 <f_lseek+0xc4>
    bf2a:	4f 3f       	cpi	r20, 0xFF	; 255
    bf2c:	ff ef       	ldi	r31, 0xFF	; 255
    bf2e:	5f 07       	cpc	r21, r31
    bf30:	6f 07       	cpc	r22, r31
    bf32:	7f 07       	cpc	r23, r31
    bf34:	09 f4       	brne	.+2      	; 0xbf38 <f_lseek+0x3d8>
    bf36:	80 ce       	rjmp	.-768    	; 0xbc38 <f_lseek+0xd8>
    bf38:	d1 01       	movw	r26, r2
    bf3a:	16 96       	adiw	r26, 0x06	; 6
    bf3c:	4d 93       	st	X+, r20
    bf3e:	5d 93       	st	X+, r21
    bf40:	6d 93       	st	X+, r22
    bf42:	7c 93       	st	X, r23
    bf44:	19 97       	sbiw	r26, 0x09	; 9
    bf46:	f1 01       	movw	r30, r2
    bf48:	44 8b       	std	Z+20, r20	; 0x14
    bf4a:	55 8b       	std	Z+21, r21	; 0x15
    bf4c:	66 8b       	std	Z+22, r22	; 0x16
    bf4e:	77 8b       	std	Z+23, r23	; 0x17
    bf50:	41 15       	cp	r20, r1
    bf52:	51 05       	cpc	r21, r1
    bf54:	61 05       	cpc	r22, r1
    bf56:	71 05       	cpc	r23, r1
    bf58:	09 f0       	breq	.+2      	; 0xbf5c <f_lseek+0x3fc>
    bf5a:	40 c0       	rjmp	.+128    	; 0xbfdc <f_lseek+0x47c>
    bf5c:	c1 2c       	mov	r12, r1
    bf5e:	d1 2c       	mov	r13, r1
    bf60:	76 01       	movw	r14, r12
    bf62:	79 c0       	rjmp	.+242    	; 0xc056 <f_lseek+0x4f6>
    bf64:	c8 18       	sub	r12, r8
    bf66:	d9 08       	sbc	r13, r9
    bf68:	ea 08       	sbc	r14, r10
    bf6a:	fb 08       	sbc	r15, r11
    bf6c:	f1 01       	movw	r30, r2
    bf6e:	80 89       	ldd	r24, Z+16	; 0x10
    bf70:	91 89       	ldd	r25, Z+17	; 0x11
    bf72:	a2 89       	ldd	r26, Z+18	; 0x12
    bf74:	b3 89       	ldd	r27, Z+19	; 0x13
    bf76:	88 0d       	add	r24, r8
    bf78:	99 1d       	adc	r25, r9
    bf7a:	aa 1d       	adc	r26, r10
    bf7c:	bb 1d       	adc	r27, r11
    bf7e:	80 8b       	std	Z+16, r24	; 0x10
    bf80:	91 8b       	std	Z+17, r25	; 0x11
    bf82:	a2 8b       	std	Z+18, r26	; 0x12
    bf84:	b3 8b       	std	Z+19, r27	; 0x13
    bf86:	86 85       	ldd	r24, Z+14	; 0x0e
    bf88:	81 ff       	sbrs	r24, 1
    bf8a:	2f c0       	rjmp	.+94     	; 0xbfea <f_lseek+0x48a>
    bf8c:	c1 01       	movw	r24, r2
    bf8e:	0e 94 de 4c 	call	0x99bc	; 0x99bc <create_chain>
    bf92:	ab 01       	movw	r20, r22
    bf94:	bc 01       	movw	r22, r24
    bf96:	41 15       	cp	r20, r1
    bf98:	51 05       	cpc	r21, r1
    bf9a:	61 05       	cpc	r22, r1
    bf9c:	71 05       	cpc	r23, r1
    bf9e:	61 f1       	breq	.+88     	; 0xbff8 <f_lseek+0x498>
    bfa0:	4f 3f       	cpi	r20, 0xFF	; 255
    bfa2:	bf ef       	ldi	r27, 0xFF	; 255
    bfa4:	5b 07       	cpc	r21, r27
    bfa6:	6b 07       	cpc	r22, r27
    bfa8:	7b 07       	cpc	r23, r27
    bfaa:	09 f4       	brne	.+2      	; 0xbfae <f_lseek+0x44e>
    bfac:	45 ce       	rjmp	.-886    	; 0xbc38 <f_lseek+0xd8>
    bfae:	42 30       	cpi	r20, 0x02	; 2
    bfb0:	51 05       	cpc	r21, r1
    bfb2:	61 05       	cpc	r22, r1
    bfb4:	71 05       	cpc	r23, r1
    bfb6:	08 f4       	brcc	.+2      	; 0xbfba <f_lseek+0x45a>
    bfb8:	35 ce       	rjmp	.-918    	; 0xbc24 <f_lseek+0xc4>
    bfba:	e9 81       	ldd	r30, Y+1	; 0x01
    bfbc:	fa 81       	ldd	r31, Y+2	; 0x02
    bfbe:	81 8d       	ldd	r24, Z+25	; 0x19
    bfc0:	92 8d       	ldd	r25, Z+26	; 0x1a
    bfc2:	a3 8d       	ldd	r26, Z+27	; 0x1b
    bfc4:	b4 8d       	ldd	r27, Z+28	; 0x1c
    bfc6:	48 17       	cp	r20, r24
    bfc8:	59 07       	cpc	r21, r25
    bfca:	6a 07       	cpc	r22, r26
    bfcc:	7b 07       	cpc	r23, r27
    bfce:	08 f0       	brcs	.+2      	; 0xbfd2 <f_lseek+0x472>
    bfd0:	29 ce       	rjmp	.-942    	; 0xbc24 <f_lseek+0xc4>
    bfd2:	f1 01       	movw	r30, r2
    bfd4:	44 8b       	std	Z+20, r20	; 0x14
    bfd6:	55 8b       	std	Z+21, r21	; 0x15
    bfd8:	66 8b       	std	Z+22, r22	; 0x16
    bfda:	77 8b       	std	Z+23, r23	; 0x17
    bfdc:	8c 14       	cp	r8, r12
    bfde:	9d 04       	cpc	r9, r13
    bfe0:	ae 04       	cpc	r10, r14
    bfe2:	bf 04       	cpc	r11, r15
    bfe4:	08 f4       	brcc	.+2      	; 0xbfe8 <f_lseek+0x488>
    bfe6:	be cf       	rjmp	.-132    	; 0xbf64 <f_lseek+0x404>
    bfe8:	0a c0       	rjmp	.+20     	; 0xbffe <f_lseek+0x49e>
    bfea:	80 81       	ld	r24, Z
    bfec:	91 81       	ldd	r25, Z+1	; 0x01
    bfee:	0e 94 6b 4b 	call	0x96d6	; 0x96d6 <get_fat.isra.7>
    bff2:	ab 01       	movw	r20, r22
    bff4:	bc 01       	movw	r22, r24
    bff6:	d4 cf       	rjmp	.-88     	; 0xbfa0 <f_lseek+0x440>
    bff8:	c1 2c       	mov	r12, r1
    bffa:	d1 2c       	mov	r13, r1
    bffc:	76 01       	movw	r14, r12
    bffe:	f1 01       	movw	r30, r2
    c000:	80 89       	ldd	r24, Z+16	; 0x10
    c002:	91 89       	ldd	r25, Z+17	; 0x11
    c004:	a2 89       	ldd	r26, Z+18	; 0x12
    c006:	b3 89       	ldd	r27, Z+19	; 0x13
    c008:	8c 0d       	add	r24, r12
    c00a:	9d 1d       	adc	r25, r13
    c00c:	ae 1d       	adc	r26, r14
    c00e:	bf 1d       	adc	r27, r15
    c010:	80 8b       	std	Z+16, r24	; 0x10
    c012:	91 8b       	std	Z+17, r25	; 0x11
    c014:	a2 8b       	std	Z+18, r26	; 0x12
    c016:	b3 8b       	std	Z+19, r27	; 0x13
    c018:	d7 01       	movw	r26, r14
    c01a:	c6 01       	movw	r24, r12
    c01c:	91 70       	andi	r25, 0x01	; 1
    c01e:	aa 27       	eor	r26, r26
    c020:	bb 27       	eor	r27, r27
    c022:	89 2b       	or	r24, r25
    c024:	8a 2b       	or	r24, r26
    c026:	8b 2b       	or	r24, r27
    c028:	09 f4       	brne	.+2      	; 0xc02c <f_lseek+0x4cc>
    c02a:	98 cf       	rjmp	.-208    	; 0xbf5c <f_lseek+0x3fc>
    c02c:	89 81       	ldd	r24, Y+1	; 0x01
    c02e:	9a 81       	ldd	r25, Y+2	; 0x02
    c030:	0e 94 92 45 	call	0x8b24	; 0x8b24 <clust2sect>
    c034:	61 15       	cp	r22, r1
    c036:	71 05       	cpc	r23, r1
    c038:	81 05       	cpc	r24, r1
    c03a:	91 05       	cpc	r25, r1
    c03c:	09 f4       	brne	.+2      	; 0xc040 <f_lseek+0x4e0>
    c03e:	f2 cd       	rjmp	.-1052   	; 0xbc24 <f_lseek+0xc4>
    c040:	29 e0       	ldi	r18, 0x09	; 9
    c042:	f6 94       	lsr	r15
    c044:	e7 94       	ror	r14
    c046:	d7 94       	ror	r13
    c048:	c7 94       	ror	r12
    c04a:	2a 95       	dec	r18
    c04c:	d1 f7       	brne	.-12     	; 0xc042 <f_lseek+0x4e2>
    c04e:	c6 0e       	add	r12, r22
    c050:	d7 1e       	adc	r13, r23
    c052:	e8 1e       	adc	r14, r24
    c054:	f9 1e       	adc	r15, r25
    c056:	f1 01       	movw	r30, r2
    c058:	80 89       	ldd	r24, Z+16	; 0x10
    c05a:	91 89       	ldd	r25, Z+17	; 0x11
    c05c:	a2 89       	ldd	r26, Z+18	; 0x12
    c05e:	b3 89       	ldd	r27, Z+19	; 0x13
    c060:	42 85       	ldd	r20, Z+10	; 0x0a
    c062:	53 85       	ldd	r21, Z+11	; 0x0b
    c064:	64 85       	ldd	r22, Z+12	; 0x0c
    c066:	75 85       	ldd	r23, Z+13	; 0x0d
    c068:	48 17       	cp	r20, r24
    c06a:	59 07       	cpc	r21, r25
    c06c:	6a 07       	cpc	r22, r26
    c06e:	7b 07       	cpc	r23, r27
    c070:	38 f4       	brcc	.+14     	; 0xc080 <f_lseek+0x520>
    c072:	82 87       	std	Z+10, r24	; 0x0a
    c074:	93 87       	std	Z+11, r25	; 0x0b
    c076:	a4 87       	std	Z+12, r26	; 0x0c
    c078:	b5 87       	std	Z+13, r27	; 0x0d
    c07a:	26 85       	ldd	r18, Z+14	; 0x0e
    c07c:	20 64       	ori	r18, 0x40	; 64
    c07e:	26 87       	std	Z+14, r18	; 0x0e
    c080:	91 70       	andi	r25, 0x01	; 1
    c082:	aa 27       	eor	r26, r26
    c084:	bb 27       	eor	r27, r27
    c086:	89 2b       	or	r24, r25
    c088:	8a 2b       	or	r24, r26
    c08a:	8b 2b       	or	r24, r27
    c08c:	b9 f1       	breq	.+110    	; 0xc0fc <f_lseek+0x59c>
    c08e:	d1 01       	movw	r26, r2
    c090:	58 96       	adiw	r26, 0x18	; 24
    c092:	2d 91       	ld	r18, X+
    c094:	3d 91       	ld	r19, X+
    c096:	4d 91       	ld	r20, X+
    c098:	5c 91       	ld	r21, X
    c09a:	5b 97       	sbiw	r26, 0x1b	; 27
    c09c:	2c 15       	cp	r18, r12
    c09e:	3d 05       	cpc	r19, r13
    c0a0:	4e 05       	cpc	r20, r14
    c0a2:	5f 05       	cpc	r21, r15
    c0a4:	59 f1       	breq	.+86     	; 0xc0fc <f_lseek+0x59c>
    c0a6:	1e 96       	adiw	r26, 0x0e	; 14
    c0a8:	8c 91       	ld	r24, X
    c0aa:	f1 01       	movw	r30, r2
    c0ac:	b4 96       	adiw	r30, 0x24	; 36
    c0ae:	5f 01       	movw	r10, r30
    c0b0:	87 ff       	sbrs	r24, 7
    c0b2:	12 c0       	rjmp	.+36     	; 0xc0d8 <f_lseek+0x578>
    c0b4:	e9 81       	ldd	r30, Y+1	; 0x01
    c0b6:	fa 81       	ldd	r31, Y+2	; 0x02
    c0b8:	01 e0       	ldi	r16, 0x01	; 1
    c0ba:	10 e0       	ldi	r17, 0x00	; 0
    c0bc:	b5 01       	movw	r22, r10
    c0be:	81 81       	ldd	r24, Z+1	; 0x01
    c0c0:	0e 94 b0 6c 	call	0xd960	; 0xd960 <disk_write>
    c0c4:	89 2b       	or	r24, r25
    c0c6:	09 f0       	breq	.+2      	; 0xc0ca <f_lseek+0x56a>
    c0c8:	b7 cd       	rjmp	.-1170   	; 0xbc38 <f_lseek+0xd8>
    c0ca:	d1 01       	movw	r26, r2
    c0cc:	1e 96       	adiw	r26, 0x0e	; 14
    c0ce:	8c 91       	ld	r24, X
    c0d0:	1e 97       	sbiw	r26, 0x0e	; 14
    c0d2:	8f 77       	andi	r24, 0x7F	; 127
    c0d4:	1e 96       	adiw	r26, 0x0e	; 14
    c0d6:	8c 93       	st	X, r24
    c0d8:	e9 81       	ldd	r30, Y+1	; 0x01
    c0da:	fa 81       	ldd	r31, Y+2	; 0x02
    c0dc:	01 e0       	ldi	r16, 0x01	; 1
    c0de:	10 e0       	ldi	r17, 0x00	; 0
    c0e0:	a7 01       	movw	r20, r14
    c0e2:	96 01       	movw	r18, r12
    c0e4:	b5 01       	movw	r22, r10
    c0e6:	81 81       	ldd	r24, Z+1	; 0x01
    c0e8:	0e 94 a0 6c 	call	0xd940	; 0xd940 <disk_read>
    c0ec:	89 2b       	or	r24, r25
    c0ee:	09 f0       	breq	.+2      	; 0xc0f2 <f_lseek+0x592>
    c0f0:	a3 cd       	rjmp	.-1210   	; 0xbc38 <f_lseek+0xd8>
    c0f2:	f1 01       	movw	r30, r2
    c0f4:	c0 8e       	std	Z+24, r12	; 0x18
    c0f6:	d1 8e       	std	Z+25, r13	; 0x19
    c0f8:	e2 8e       	std	Z+26, r14	; 0x1a
    c0fa:	f3 8e       	std	Z+27, r15	; 0x1b
    c0fc:	80 e0       	ldi	r24, 0x00	; 0
    c0fe:	a0 cd       	rjmp	.-1216   	; 0xbc40 <f_lseek+0xe0>
    c100:	81 e1       	ldi	r24, 0x11	; 17
    c102:	9e cd       	rjmp	.-1220   	; 0xbc40 <f_lseek+0xe0>
    c104:	80 e0       	ldi	r24, 0x00	; 0
    c106:	90 e0       	ldi	r25, 0x00	; 0
    c108:	dc 01       	movw	r26, r24
    c10a:	c1 2c       	mov	r12, r1
    c10c:	d1 2c       	mov	r13, r1
    c10e:	76 01       	movw	r14, r12
    c110:	b7 cf       	rjmp	.-146    	; 0xc080 <f_lseek+0x520>
    c112:	2a 96       	adiw	r28, 0x0a	; 10
    c114:	e2 e1       	ldi	r30, 0x12	; 18
    c116:	0c 94 dd e8 	jmp	0x1d1ba	; 0x1d1ba <__epilogue_restores__>

0000c11a <f_opendir>:
    c11a:	a4 e0       	ldi	r26, 0x04	; 4
    c11c:	b0 e0       	ldi	r27, 0x00	; 0
    c11e:	e3 e9       	ldi	r30, 0x93	; 147
    c120:	f0 e6       	ldi	r31, 0x60	; 96
    c122:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__prologue_saves__+0x14>
    c126:	7c 83       	std	Y+4, r23	; 0x04
    c128:	6b 83       	std	Y+3, r22	; 0x03
    c12a:	00 97       	sbiw	r24, 0x00	; 0
    c12c:	09 f4       	brne	.+2      	; 0xc130 <f_opendir+0x16>
    c12e:	4a c0       	rjmp	.+148    	; 0xc1c4 <f_opendir+0xaa>
    c130:	8c 01       	movw	r16, r24
    c132:	40 e0       	ldi	r20, 0x00	; 0
    c134:	be 01       	movw	r22, r28
    c136:	6f 5f       	subi	r22, 0xFF	; 255
    c138:	7f 4f       	sbci	r23, 0xFF	; 255
    c13a:	ce 01       	movw	r24, r28
    c13c:	03 96       	adiw	r24, 0x03	; 3
    c13e:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <find_volume>
    c142:	7c 01       	movw	r14, r24
    c144:	89 2b       	or	r24, r25
    c146:	c9 f5       	brne	.+114    	; 0xc1ba <f_opendir+0xa0>
    c148:	89 81       	ldd	r24, Y+1	; 0x01
    c14a:	9a 81       	ldd	r25, Y+2	; 0x02
    c14c:	f8 01       	movw	r30, r16
    c14e:	91 83       	std	Z+1, r25	; 0x01
    c150:	80 83       	st	Z, r24
    c152:	80 e0       	ldi	r24, 0x00	; 0
    c154:	92 e0       	ldi	r25, 0x02	; 2
    c156:	0e 94 13 6c 	call	0xd826	; 0xd826 <ff_memalloc>
    c15a:	6c 01       	movw	r12, r24
    c15c:	00 97       	sbiw	r24, 0x00	; 0
    c15e:	a1 f1       	breq	.+104    	; 0xc1c8 <f_opendir+0xae>
    c160:	e9 81       	ldd	r30, Y+1	; 0x01
    c162:	fa 81       	ldd	r31, Y+2	; 0x02
    c164:	94 87       	std	Z+12, r25	; 0x0c
    c166:	83 87       	std	Z+11, r24	; 0x0b
    c168:	6b 81       	ldd	r22, Y+3	; 0x03
    c16a:	7c 81       	ldd	r23, Y+4	; 0x04
    c16c:	c8 01       	movw	r24, r16
    c16e:	0e 94 4b 54 	call	0xa896	; 0xa896 <follow_path>
    c172:	7c 01       	movw	r14, r24
    c174:	89 2b       	or	r24, r25
    c176:	b9 f4       	brne	.+46     	; 0xc1a6 <f_opendir+0x8c>
    c178:	f8 01       	movw	r30, r16
    c17a:	87 a1       	ldd	r24, Z+39	; 0x27
    c17c:	87 fd       	sbrc	r24, 7
    c17e:	29 c0       	rjmp	.+82     	; 0xc1d2 <f_opendir+0xb8>
    c180:	84 81       	ldd	r24, Z+4	; 0x04
    c182:	84 ff       	sbrs	r24, 4
    c184:	0d c0       	rjmp	.+26     	; 0xc1a0 <f_opendir+0x86>
    c186:	62 8d       	ldd	r22, Z+26	; 0x1a
    c188:	73 8d       	ldd	r23, Z+27	; 0x1b
    c18a:	e9 81       	ldd	r30, Y+1	; 0x01
    c18c:	fa 81       	ldd	r31, Y+2	; 0x02
    c18e:	80 81       	ld	r24, Z
    c190:	0e 94 5d 46 	call	0x8cba	; 0x8cba <ld_clust.isra.1>
    c194:	f8 01       	movw	r30, r16
    c196:	66 83       	std	Z+6, r22	; 0x06
    c198:	77 83       	std	Z+7, r23	; 0x07
    c19a:	80 87       	std	Z+8, r24	; 0x08
    c19c:	91 87       	std	Z+9, r25	; 0x09
    c19e:	19 c0       	rjmp	.+50     	; 0xc1d2 <f_opendir+0xb8>
    c1a0:	95 e0       	ldi	r25, 0x05	; 5
    c1a2:	e9 2e       	mov	r14, r25
    c1a4:	f1 2c       	mov	r15, r1
    c1a6:	c6 01       	movw	r24, r12
    c1a8:	0e 94 16 6c 	call	0xd82c	; 0xd82c <ff_memfree>
    c1ac:	f4 e0       	ldi	r31, 0x04	; 4
    c1ae:	ef 16       	cp	r14, r31
    c1b0:	f1 04       	cpc	r15, r1
    c1b2:	f1 f0       	breq	.+60     	; 0xc1f0 <f_opendir+0xd6>
    c1b4:	e1 14       	cp	r14, r1
    c1b6:	f1 04       	cpc	r15, r1
    c1b8:	49 f0       	breq	.+18     	; 0xc1cc <f_opendir+0xb2>
    c1ba:	f8 01       	movw	r30, r16
    c1bc:	11 82       	std	Z+1, r1	; 0x01
    c1be:	10 82       	st	Z, r1
    c1c0:	c7 01       	movw	r24, r14
    c1c2:	1a c0       	rjmp	.+52     	; 0xc1f8 <f_opendir+0xde>
    c1c4:	89 e0       	ldi	r24, 0x09	; 9
    c1c6:	03 c0       	rjmp	.+6      	; 0xc1ce <f_opendir+0xb4>
    c1c8:	81 e1       	ldi	r24, 0x11	; 17
    c1ca:	01 c0       	rjmp	.+2      	; 0xc1ce <f_opendir+0xb4>
    c1cc:	80 e0       	ldi	r24, 0x00	; 0
    c1ce:	90 e0       	ldi	r25, 0x00	; 0
    c1d0:	13 c0       	rjmp	.+38     	; 0xc1f8 <f_opendir+0xde>
    c1d2:	e9 81       	ldd	r30, Y+1	; 0x01
    c1d4:	fa 81       	ldd	r31, Y+2	; 0x02
    c1d6:	85 81       	ldd	r24, Z+5	; 0x05
    c1d8:	96 81       	ldd	r25, Z+6	; 0x06
    c1da:	f8 01       	movw	r30, r16
    c1dc:	93 83       	std	Z+3, r25	; 0x03
    c1de:	82 83       	std	Z+2, r24	; 0x02
    c1e0:	40 e0       	ldi	r20, 0x00	; 0
    c1e2:	50 e0       	ldi	r21, 0x00	; 0
    c1e4:	ba 01       	movw	r22, r20
    c1e6:	c8 01       	movw	r24, r16
    c1e8:	0e 94 1e 4c 	call	0x983c	; 0x983c <dir_sdi>
    c1ec:	7c 01       	movw	r14, r24
    c1ee:	db cf       	rjmp	.-74     	; 0xc1a6 <f_opendir+0x8c>
    c1f0:	85 e0       	ldi	r24, 0x05	; 5
    c1f2:	e8 2e       	mov	r14, r24
    c1f4:	f1 2c       	mov	r15, r1
    c1f6:	e1 cf       	rjmp	.-62     	; 0xc1ba <f_opendir+0xa0>
    c1f8:	24 96       	adiw	r28, 0x04	; 4
    c1fa:	e8 e0       	ldi	r30, 0x08	; 8
    c1fc:	0c 94 e7 e8 	jmp	0x1d1ce	; 0x1d1ce <__epilogue_restores__+0x14>

0000c200 <f_closedir>:
    c200:	a2 e0       	ldi	r26, 0x02	; 2
    c202:	b0 e0       	ldi	r27, 0x00	; 0
    c204:	e6 e0       	ldi	r30, 0x06	; 6
    c206:	f1 e6       	ldi	r31, 0x61	; 97
    c208:	0c 94 cf e8 	jmp	0x1d19e	; 0x1d19e <__prologue_saves__+0x1c>
    c20c:	8c 01       	movw	r16, r24
    c20e:	be 01       	movw	r22, r28
    c210:	6f 5f       	subi	r22, 0xFF	; 255
    c212:	7f 4f       	sbci	r23, 0xFF	; 255
    c214:	0e 94 25 46 	call	0x8c4a	; 0x8c4a <validate>
    c218:	00 97       	sbiw	r24, 0x00	; 0
    c21a:	19 f4       	brne	.+6      	; 0xc222 <f_closedir+0x22>
    c21c:	f8 01       	movw	r30, r16
    c21e:	11 82       	std	Z+1, r1	; 0x01
    c220:	10 82       	st	Z, r1
    c222:	22 96       	adiw	r28, 0x02	; 2
    c224:	e4 e0       	ldi	r30, 0x04	; 4
    c226:	0c 94 eb e8 	jmp	0x1d1d6	; 0x1d1d6 <__epilogue_restores__+0x1c>

0000c22a <f_readdir>:
    c22a:	a2 e0       	ldi	r26, 0x02	; 2
    c22c:	b0 e0       	ldi	r27, 0x00	; 0
    c22e:	eb e1       	ldi	r30, 0x1B	; 27
    c230:	f1 e6       	ldi	r31, 0x61	; 97
    c232:	0c 94 c9 e8 	jmp	0x1d192	; 0x1d192 <__prologue_saves__+0x10>
    c236:	7c 01       	movw	r14, r24
    c238:	5b 01       	movw	r10, r22
    c23a:	be 01       	movw	r22, r28
    c23c:	6f 5f       	subi	r22, 0xFF	; 255
    c23e:	7f 4f       	sbci	r23, 0xFF	; 255
    c240:	0e 94 25 46 	call	0x8c4a	; 0x8c4a <validate>
    c244:	00 97       	sbiw	r24, 0x00	; 0
    c246:	99 f5       	brne	.+102    	; 0xc2ae <f_readdir+0x84>
    c248:	a1 14       	cp	r10, r1
    c24a:	b1 04       	cpc	r11, r1
    c24c:	39 f4       	brne	.+14     	; 0xc25c <f_readdir+0x32>
    c24e:	40 e0       	ldi	r20, 0x00	; 0
    c250:	50 e0       	ldi	r21, 0x00	; 0
    c252:	ba 01       	movw	r22, r20
    c254:	c7 01       	movw	r24, r14
    c256:	0e 94 1e 4c 	call	0x983c	; 0x983c <dir_sdi>
    c25a:	29 c0       	rjmp	.+82     	; 0xc2ae <f_readdir+0x84>
    c25c:	80 e0       	ldi	r24, 0x00	; 0
    c25e:	92 e0       	ldi	r25, 0x02	; 2
    c260:	0e 94 13 6c 	call	0xd826	; 0xd826 <ff_memalloc>
    c264:	6c 01       	movw	r12, r24
    c266:	00 97       	sbiw	r24, 0x00	; 0
    c268:	01 f1       	breq	.+64     	; 0xc2aa <f_readdir+0x80>
    c26a:	e9 81       	ldd	r30, Y+1	; 0x01
    c26c:	fa 81       	ldd	r31, Y+2	; 0x02
    c26e:	94 87       	std	Z+12, r25	; 0x0c
    c270:	83 87       	std	Z+11, r24	; 0x0b
    c272:	60 e0       	ldi	r22, 0x00	; 0
    c274:	70 e0       	ldi	r23, 0x00	; 0
    c276:	c7 01       	movw	r24, r14
    c278:	0e 94 7a 50 	call	0xa0f4	; 0xa0f4 <dir_read>
    c27c:	8c 01       	movw	r16, r24
    c27e:	8b 7f       	andi	r24, 0xFB	; 251
    c280:	89 2b       	or	r24, r25
    c282:	71 f4       	brne	.+28     	; 0xc2a0 <f_readdir+0x76>
    c284:	b5 01       	movw	r22, r10
    c286:	c7 01       	movw	r24, r14
    c288:	0e 94 40 4e 	call	0x9c80	; 0x9c80 <get_fileinfo>
    c28c:	60 e0       	ldi	r22, 0x00	; 0
    c28e:	70 e0       	ldi	r23, 0x00	; 0
    c290:	c7 01       	movw	r24, r14
    c292:	0e 94 18 4f 	call	0x9e30	; 0x9e30 <dir_next>
    c296:	8c 01       	movw	r16, r24
    c298:	04 97       	sbiw	r24, 0x04	; 4
    c29a:	11 f4       	brne	.+4      	; 0xc2a0 <f_readdir+0x76>
    c29c:	00 e0       	ldi	r16, 0x00	; 0
    c29e:	10 e0       	ldi	r17, 0x00	; 0
    c2a0:	c6 01       	movw	r24, r12
    c2a2:	0e 94 16 6c 	call	0xd82c	; 0xd82c <ff_memfree>
    c2a6:	c8 01       	movw	r24, r16
    c2a8:	02 c0       	rjmp	.+4      	; 0xc2ae <f_readdir+0x84>
    c2aa:	81 e1       	ldi	r24, 0x11	; 17
    c2ac:	90 e0       	ldi	r25, 0x00	; 0
    c2ae:	22 96       	adiw	r28, 0x02	; 2
    c2b0:	ea e0       	ldi	r30, 0x0A	; 10
    c2b2:	0c 94 e5 e8 	jmp	0x1d1ca	; 0x1d1ca <__epilogue_restores__+0x10>

0000c2b6 <f_stat>:
    c2b6:	a0 e3       	ldi	r26, 0x30	; 48
    c2b8:	b0 e0       	ldi	r27, 0x00	; 0
    c2ba:	e1 e6       	ldi	r30, 0x61	; 97
    c2bc:	f1 e6       	ldi	r31, 0x61	; 97
    c2be:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__prologue_saves__+0x14>
    c2c2:	98 ab       	std	Y+48, r25	; 0x30
    c2c4:	8f a7       	std	Y+47, r24	; 0x2f
    c2c6:	6b 01       	movw	r12, r22
    c2c8:	40 e0       	ldi	r20, 0x00	; 0
    c2ca:	be 01       	movw	r22, r28
    c2cc:	6f 5f       	subi	r22, 0xFF	; 255
    c2ce:	7f 4f       	sbci	r23, 0xFF	; 255
    c2d0:	ce 01       	movw	r24, r28
    c2d2:	8f 96       	adiw	r24, 0x2f	; 47
    c2d4:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <find_volume>
    c2d8:	00 97       	sbiw	r24, 0x00	; 0
    c2da:	49 f5       	brne	.+82     	; 0xc32e <f_stat+0x78>
    c2dc:	80 e0       	ldi	r24, 0x00	; 0
    c2de:	92 e0       	ldi	r25, 0x02	; 2
    c2e0:	0e 94 13 6c 	call	0xd826	; 0xd826 <ff_memalloc>
    c2e4:	7c 01       	movw	r14, r24
    c2e6:	00 97       	sbiw	r24, 0x00	; 0
    c2e8:	01 f1       	breq	.+64     	; 0xc32a <f_stat+0x74>
    c2ea:	e9 81       	ldd	r30, Y+1	; 0x01
    c2ec:	fa 81       	ldd	r31, Y+2	; 0x02
    c2ee:	94 87       	std	Z+12, r25	; 0x0c
    c2f0:	83 87       	std	Z+11, r24	; 0x0b
    c2f2:	6f a5       	ldd	r22, Y+47	; 0x2f
    c2f4:	78 a9       	ldd	r23, Y+48	; 0x30
    c2f6:	ce 01       	movw	r24, r28
    c2f8:	01 96       	adiw	r24, 0x01	; 1
    c2fa:	0e 94 4b 54 	call	0xa896	; 0xa896 <follow_path>
    c2fe:	8c 01       	movw	r16, r24
    c300:	89 2b       	or	r24, r25
    c302:	71 f4       	brne	.+28     	; 0xc320 <f_stat+0x6a>
    c304:	88 a5       	ldd	r24, Y+40	; 0x28
    c306:	87 fd       	sbrc	r24, 7
    c308:	09 c0       	rjmp	.+18     	; 0xc31c <f_stat+0x66>
    c30a:	c1 14       	cp	r12, r1
    c30c:	d1 04       	cpc	r13, r1
    c30e:	41 f0       	breq	.+16     	; 0xc320 <f_stat+0x6a>
    c310:	b6 01       	movw	r22, r12
    c312:	ce 01       	movw	r24, r28
    c314:	01 96       	adiw	r24, 0x01	; 1
    c316:	0e 94 40 4e 	call	0x9c80	; 0x9c80 <get_fileinfo>
    c31a:	02 c0       	rjmp	.+4      	; 0xc320 <f_stat+0x6a>
    c31c:	06 e0       	ldi	r16, 0x06	; 6
    c31e:	10 e0       	ldi	r17, 0x00	; 0
    c320:	c7 01       	movw	r24, r14
    c322:	0e 94 16 6c 	call	0xd82c	; 0xd82c <ff_memfree>
    c326:	c8 01       	movw	r24, r16
    c328:	02 c0       	rjmp	.+4      	; 0xc32e <f_stat+0x78>
    c32a:	81 e1       	ldi	r24, 0x11	; 17
    c32c:	90 e0       	ldi	r25, 0x00	; 0
    c32e:	e0 96       	adiw	r28, 0x30	; 48
    c330:	e8 e0       	ldi	r30, 0x08	; 8
    c332:	0c 94 e7 e8 	jmp	0x1d1ce	; 0x1d1ce <__epilogue_restores__+0x14>

0000c336 <f_getfree>:
    c336:	ac e0       	ldi	r26, 0x0C	; 12
    c338:	b0 e0       	ldi	r27, 0x00	; 0
    c33a:	e1 ea       	ldi	r30, 0xA1	; 161
    c33c:	f1 e6       	ldi	r31, 0x61	; 97
    c33e:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__prologue_saves__>
    c342:	9c 83       	std	Y+4, r25	; 0x04
    c344:	8b 83       	std	Y+3, r24	; 0x03
    c346:	78 87       	std	Y+8, r23	; 0x08
    c348:	6f 83       	std	Y+7, r22	; 0x07
    c34a:	7a 01       	movw	r14, r20
    c34c:	40 e0       	ldi	r20, 0x00	; 0
    c34e:	be 01       	movw	r22, r28
    c350:	6f 5f       	subi	r22, 0xFF	; 255
    c352:	7f 4f       	sbci	r23, 0xFF	; 255
    c354:	ce 01       	movw	r24, r28
    c356:	03 96       	adiw	r24, 0x03	; 3
    c358:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <find_volume>
    c35c:	9e 83       	std	Y+6, r25	; 0x06
    c35e:	8d 83       	std	Y+5, r24	; 0x05
    c360:	89 2b       	or	r24, r25
    c362:	09 f0       	breq	.+2      	; 0xc366 <f_getfree+0x30>
    c364:	cf c0       	rjmp	.+414    	; 0xc504 <f_getfree+0x1ce>
    c366:	69 80       	ldd	r6, Y+1	; 0x01
    c368:	7a 80       	ldd	r7, Y+2	; 0x02
    c36a:	d7 01       	movw	r26, r14
    c36c:	6d 92       	st	X+, r6
    c36e:	7c 92       	st	X, r7
    c370:	f3 01       	movw	r30, r6
    c372:	81 89       	ldd	r24, Z+17	; 0x11
    c374:	92 89       	ldd	r25, Z+18	; 0x12
    c376:	a3 89       	ldd	r26, Z+19	; 0x13
    c378:	b4 89       	ldd	r27, Z+20	; 0x14
    c37a:	81 8c       	ldd	r8, Z+25	; 0x19
    c37c:	92 8c       	ldd	r9, Z+26	; 0x1a
    c37e:	a3 8c       	ldd	r10, Z+27	; 0x1b
    c380:	b4 8c       	ldd	r11, Z+28	; 0x1c
    c382:	b5 01       	movw	r22, r10
    c384:	a4 01       	movw	r20, r8
    c386:	42 50       	subi	r20, 0x02	; 2
    c388:	51 09       	sbc	r21, r1
    c38a:	61 09       	sbc	r22, r1
    c38c:	71 09       	sbc	r23, r1
    c38e:	48 17       	cp	r20, r24
    c390:	59 07       	cpc	r21, r25
    c392:	6a 07       	cpc	r22, r26
    c394:	7b 07       	cpc	r23, r27
    c396:	38 f0       	brcs	.+14     	; 0xc3a6 <f_getfree+0x70>
    c398:	ef 81       	ldd	r30, Y+7	; 0x07
    c39a:	f8 85       	ldd	r31, Y+8	; 0x08
    c39c:	80 83       	st	Z, r24
    c39e:	91 83       	std	Z+1, r25	; 0x01
    c3a0:	a2 83       	std	Z+2, r26	; 0x02
    c3a2:	b3 83       	std	Z+3, r27	; 0x03
    c3a4:	af c0       	rjmp	.+350    	; 0xc504 <f_getfree+0x1ce>
    c3a6:	80 81       	ld	r24, Z
    c3a8:	81 30       	cpi	r24, 0x01	; 1
    c3aa:	a1 f5       	brne	.+104    	; 0xc414 <f_getfree+0xde>
    c3ac:	82 e0       	ldi	r24, 0x02	; 2
    c3ae:	88 2e       	mov	r8, r24
    c3b0:	91 2c       	mov	r9, r1
    c3b2:	a1 2c       	mov	r10, r1
    c3b4:	b1 2c       	mov	r11, r1
    c3b6:	c1 2c       	mov	r12, r1
    c3b8:	d1 2c       	mov	r13, r1
    c3ba:	76 01       	movw	r14, r12
    c3bc:	b5 01       	movw	r22, r10
    c3be:	a4 01       	movw	r20, r8
    c3c0:	c3 01       	movw	r24, r6
    c3c2:	0e 94 6b 4b 	call	0x96d6	; 0x96d6 <get_fat.isra.7>
    c3c6:	6f 3f       	cpi	r22, 0xFF	; 255
    c3c8:	bf ef       	ldi	r27, 0xFF	; 255
    c3ca:	7b 07       	cpc	r23, r27
    c3cc:	8b 07       	cpc	r24, r27
    c3ce:	9b 07       	cpc	r25, r27
    c3d0:	09 f4       	brne	.+2      	; 0xc3d4 <f_getfree+0x9e>
    c3d2:	7c c0       	rjmp	.+248    	; 0xc4cc <f_getfree+0x196>
    c3d4:	61 30       	cpi	r22, 0x01	; 1
    c3d6:	71 05       	cpc	r23, r1
    c3d8:	81 05       	cpc	r24, r1
    c3da:	91 05       	cpc	r25, r1
    c3dc:	09 f4       	brne	.+2      	; 0xc3e0 <f_getfree+0xaa>
    c3de:	7b c0       	rjmp	.+246    	; 0xc4d6 <f_getfree+0x1a0>
    c3e0:	67 2b       	or	r22, r23
    c3e2:	68 2b       	or	r22, r24
    c3e4:	69 2b       	or	r22, r25
    c3e6:	29 f4       	brne	.+10     	; 0xc3f2 <f_getfree+0xbc>
    c3e8:	ef ef       	ldi	r30, 0xFF	; 255
    c3ea:	ce 1a       	sub	r12, r30
    c3ec:	de 0a       	sbc	r13, r30
    c3ee:	ee 0a       	sbc	r14, r30
    c3f0:	fe 0a       	sbc	r15, r30
    c3f2:	ff ef       	ldi	r31, 0xFF	; 255
    c3f4:	8f 1a       	sub	r8, r31
    c3f6:	9f 0a       	sbc	r9, r31
    c3f8:	af 0a       	sbc	r10, r31
    c3fa:	bf 0a       	sbc	r11, r31
    c3fc:	e9 81       	ldd	r30, Y+1	; 0x01
    c3fe:	fa 81       	ldd	r31, Y+2	; 0x02
    c400:	81 8d       	ldd	r24, Z+25	; 0x19
    c402:	92 8d       	ldd	r25, Z+26	; 0x1a
    c404:	a3 8d       	ldd	r26, Z+27	; 0x1b
    c406:	b4 8d       	ldd	r27, Z+28	; 0x1c
    c408:	88 16       	cp	r8, r24
    c40a:	99 06       	cpc	r9, r25
    c40c:	aa 06       	cpc	r10, r26
    c40e:	bb 06       	cpc	r11, r27
    c410:	a8 f2       	brcs	.-86     	; 0xc3bc <f_getfree+0x86>
    c412:	68 c0       	rjmp	.+208    	; 0xc4e4 <f_getfree+0x1ae>
    c414:	45 a0       	ldd	r4, Z+37	; 0x25
    c416:	56 a0       	ldd	r5, Z+38	; 0x26
    c418:	67 a0       	ldd	r6, Z+39	; 0x27
    c41a:	70 a4       	ldd	r7, Z+40	; 0x28
    c41c:	21 2c       	mov	r2, r1
    c41e:	31 2c       	mov	r3, r1
    c420:	00 e0       	ldi	r16, 0x00	; 0
    c422:	10 e0       	ldi	r17, 0x00	; 0
    c424:	c1 2c       	mov	r12, r1
    c426:	d1 2c       	mov	r13, r1
    c428:	76 01       	movw	r14, r12
    c42a:	01 15       	cp	r16, r1
    c42c:	11 05       	cpc	r17, r1
    c42e:	e9 f4       	brne	.+58     	; 0xc46a <f_getfree+0x134>
    c430:	d3 01       	movw	r26, r6
    c432:	c2 01       	movw	r24, r4
    c434:	01 96       	adiw	r24, 0x01	; 1
    c436:	a1 1d       	adc	r26, r1
    c438:	b1 1d       	adc	r27, r1
    c43a:	89 87       	std	Y+9, r24	; 0x09
    c43c:	9a 87       	std	Y+10, r25	; 0x0a
    c43e:	ab 87       	std	Y+11, r26	; 0x0b
    c440:	bc 87       	std	Y+12, r27	; 0x0c
    c442:	b3 01       	movw	r22, r6
    c444:	a2 01       	movw	r20, r4
    c446:	89 81       	ldd	r24, Y+1	; 0x01
    c448:	9a 81       	ldd	r25, Y+2	; 0x02
    c44a:	0e 94 45 47 	call	0x8e8a	; 0x8e8a <move_window>
    c44e:	00 97       	sbiw	r24, 0x00	; 0
    c450:	09 f0       	breq	.+2      	; 0xc454 <f_getfree+0x11e>
    c452:	46 c0       	rjmp	.+140    	; 0xc4e0 <f_getfree+0x1aa>
    c454:	29 80       	ldd	r2, Y+1	; 0x01
    c456:	3a 80       	ldd	r3, Y+2	; 0x02
    c458:	95 e3       	ldi	r25, 0x35	; 53
    c45a:	29 0e       	add	r2, r25
    c45c:	31 1c       	adc	r3, r1
    c45e:	49 84       	ldd	r4, Y+9	; 0x09
    c460:	5a 84       	ldd	r5, Y+10	; 0x0a
    c462:	6b 84       	ldd	r6, Y+11	; 0x0b
    c464:	7c 84       	ldd	r7, Y+12	; 0x0c
    c466:	00 e0       	ldi	r16, 0x00	; 0
    c468:	12 e0       	ldi	r17, 0x02	; 2
    c46a:	e9 81       	ldd	r30, Y+1	; 0x01
    c46c:	fa 81       	ldd	r31, Y+2	; 0x02
    c46e:	80 81       	ld	r24, Z
    c470:	82 30       	cpi	r24, 0x02	; 2
    c472:	81 f4       	brne	.+32     	; 0xc494 <f_getfree+0x15e>
    c474:	d1 01       	movw	r26, r2
    c476:	8d 91       	ld	r24, X+
    c478:	9c 91       	ld	r25, X
    c47a:	89 2b       	or	r24, r25
    c47c:	29 f4       	brne	.+10     	; 0xc488 <f_getfree+0x152>
    c47e:	bf ef       	ldi	r27, 0xFF	; 255
    c480:	cb 1a       	sub	r12, r27
    c482:	db 0a       	sbc	r13, r27
    c484:	eb 0a       	sbc	r14, r27
    c486:	fb 0a       	sbc	r15, r27
    c488:	e2 e0       	ldi	r30, 0x02	; 2
    c48a:	2e 0e       	add	r2, r30
    c48c:	31 1c       	adc	r3, r1
    c48e:	02 50       	subi	r16, 0x02	; 2
    c490:	11 09       	sbc	r17, r1
    c492:	14 c0       	rjmp	.+40     	; 0xc4bc <f_getfree+0x186>
    c494:	c1 01       	movw	r24, r2
    c496:	0e 94 6e 45 	call	0x8adc	; 0x8adc <ld_dword>
    c49a:	dc 01       	movw	r26, r24
    c49c:	cb 01       	movw	r24, r22
    c49e:	bf 70       	andi	r27, 0x0F	; 15
    c4a0:	89 2b       	or	r24, r25
    c4a2:	8a 2b       	or	r24, r26
    c4a4:	8b 2b       	or	r24, r27
    c4a6:	29 f4       	brne	.+10     	; 0xc4b2 <f_getfree+0x17c>
    c4a8:	ff ef       	ldi	r31, 0xFF	; 255
    c4aa:	cf 1a       	sub	r12, r31
    c4ac:	df 0a       	sbc	r13, r31
    c4ae:	ef 0a       	sbc	r14, r31
    c4b0:	ff 0a       	sbc	r15, r31
    c4b2:	24 e0       	ldi	r18, 0x04	; 4
    c4b4:	22 0e       	add	r2, r18
    c4b6:	31 1c       	adc	r3, r1
    c4b8:	04 50       	subi	r16, 0x04	; 4
    c4ba:	11 09       	sbc	r17, r1
    c4bc:	81 e0       	ldi	r24, 0x01	; 1
    c4be:	88 1a       	sub	r8, r24
    c4c0:	91 08       	sbc	r9, r1
    c4c2:	a1 08       	sbc	r10, r1
    c4c4:	b1 08       	sbc	r11, r1
    c4c6:	09 f0       	breq	.+2      	; 0xc4ca <f_getfree+0x194>
    c4c8:	b0 cf       	rjmp	.-160    	; 0xc42a <f_getfree+0xf4>
    c4ca:	0c c0       	rjmp	.+24     	; 0xc4e4 <f_getfree+0x1ae>
    c4cc:	a1 e0       	ldi	r26, 0x01	; 1
    c4ce:	b0 e0       	ldi	r27, 0x00	; 0
    c4d0:	be 83       	std	Y+6, r27	; 0x06
    c4d2:	ad 83       	std	Y+5, r26	; 0x05
    c4d4:	07 c0       	rjmp	.+14     	; 0xc4e4 <f_getfree+0x1ae>
    c4d6:	e2 e0       	ldi	r30, 0x02	; 2
    c4d8:	f0 e0       	ldi	r31, 0x00	; 0
    c4da:	fe 83       	std	Y+6, r31	; 0x06
    c4dc:	ed 83       	std	Y+5, r30	; 0x05
    c4de:	02 c0       	rjmp	.+4      	; 0xc4e4 <f_getfree+0x1ae>
    c4e0:	9e 83       	std	Y+6, r25	; 0x06
    c4e2:	8d 83       	std	Y+5, r24	; 0x05
    c4e4:	af 81       	ldd	r26, Y+7	; 0x07
    c4e6:	b8 85       	ldd	r27, Y+8	; 0x08
    c4e8:	cd 92       	st	X+, r12
    c4ea:	dd 92       	st	X+, r13
    c4ec:	ed 92       	st	X+, r14
    c4ee:	fc 92       	st	X, r15
    c4f0:	13 97       	sbiw	r26, 0x03	; 3
    c4f2:	e9 81       	ldd	r30, Y+1	; 0x01
    c4f4:	fa 81       	ldd	r31, Y+2	; 0x02
    c4f6:	c1 8a       	std	Z+17, r12	; 0x11
    c4f8:	d2 8a       	std	Z+18, r13	; 0x12
    c4fa:	e3 8a       	std	Z+19, r14	; 0x13
    c4fc:	f4 8a       	std	Z+20, r15	; 0x14
    c4fe:	84 81       	ldd	r24, Z+4	; 0x04
    c500:	81 60       	ori	r24, 0x01	; 1
    c502:	84 83       	std	Z+4, r24	; 0x04
    c504:	8d 81       	ldd	r24, Y+5	; 0x05
    c506:	9e 81       	ldd	r25, Y+6	; 0x06
    c508:	2c 96       	adiw	r28, 0x0c	; 12
    c50a:	e2 e1       	ldi	r30, 0x12	; 18
    c50c:	0c 94 dd e8 	jmp	0x1d1ba	; 0x1d1ba <__epilogue_restores__>

0000c510 <f_unlink>:
    c510:	a0 e6       	ldi	r26, 0x60	; 96
    c512:	b0 e0       	ldi	r27, 0x00	; 0
    c514:	ee e8       	ldi	r30, 0x8E	; 142
    c516:	f2 e6       	ldi	r31, 0x62	; 98
    c518:	0c 94 c8 e8 	jmp	0x1d190	; 0x1d190 <__prologue_saves__+0xe>
    c51c:	a1 96       	adiw	r28, 0x21	; 33
    c51e:	9f af       	std	Y+63, r25	; 0x3f
    c520:	8e af       	std	Y+62, r24	; 0x3e
    c522:	a1 97       	sbiw	r28, 0x21	; 33
    c524:	42 e0       	ldi	r20, 0x02	; 2
    c526:	be 01       	movw	r22, r28
    c528:	63 5a       	subi	r22, 0xA3	; 163
    c52a:	7f 4f       	sbci	r23, 0xFF	; 255
    c52c:	ce 01       	movw	r24, r28
    c52e:	81 5a       	subi	r24, 0xA1	; 161
    c530:	9f 4f       	sbci	r25, 0xFF	; 255
    c532:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <find_volume>
    c536:	6f 96       	adiw	r28, 0x1f	; 31
    c538:	2e ad       	ldd	r18, Y+62	; 0x3e
    c53a:	3f ad       	ldd	r19, Y+63	; 0x3f
    c53c:	6f 97       	sbiw	r28, 0x1f	; 31
    c53e:	38 ab       	std	Y+48, r19	; 0x30
    c540:	2f a7       	std	Y+47, r18	; 0x2f
    c542:	00 97       	sbiw	r24, 0x00	; 0
    c544:	09 f0       	breq	.+2      	; 0xc548 <f_unlink+0x38>
    c546:	88 c0       	rjmp	.+272    	; 0xc658 <f_unlink+0x148>
    c548:	80 e0       	ldi	r24, 0x00	; 0
    c54a:	92 e0       	ldi	r25, 0x02	; 2
    c54c:	0e 94 13 6c 	call	0xd826	; 0xd826 <ff_memalloc>
    c550:	5c 01       	movw	r10, r24
    c552:	00 97       	sbiw	r24, 0x00	; 0
    c554:	09 f4       	brne	.+2      	; 0xc558 <f_unlink+0x48>
    c556:	4a c0       	rjmp	.+148    	; 0xc5ec <f_unlink+0xdc>
    c558:	6f 96       	adiw	r28, 0x1f	; 31
    c55a:	ee ad       	ldd	r30, Y+62	; 0x3e
    c55c:	ff ad       	ldd	r31, Y+63	; 0x3f
    c55e:	6f 97       	sbiw	r28, 0x1f	; 31
    c560:	94 87       	std	Z+12, r25	; 0x0c
    c562:	83 87       	std	Z+11, r24	; 0x0b
    c564:	a1 96       	adiw	r28, 0x21	; 33
    c566:	6e ad       	ldd	r22, Y+62	; 0x3e
    c568:	7f ad       	ldd	r23, Y+63	; 0x3f
    c56a:	a1 97       	sbiw	r28, 0x21	; 33
    c56c:	ce 01       	movw	r24, r28
    c56e:	8f 96       	adiw	r24, 0x2f	; 47
    c570:	0e 94 4b 54 	call	0xa896	; 0xa896 <follow_path>
    c574:	8c 01       	movw	r16, r24
    c576:	89 2b       	or	r24, r25
    c578:	a1 f5       	brne	.+104    	; 0xc5e2 <f_unlink+0xd2>
    c57a:	67 96       	adiw	r28, 0x17	; 23
    c57c:	8f ad       	ldd	r24, Y+63	; 0x3f
    c57e:	67 97       	sbiw	r28, 0x17	; 23
    c580:	85 fd       	sbrc	r24, 5
    c582:	37 c0       	rjmp	.+110    	; 0xc5f2 <f_unlink+0xe2>
    c584:	87 fd       	sbrc	r24, 7
    c586:	35 c0       	rjmp	.+106    	; 0xc5f2 <f_unlink+0xe2>
    c588:	9b a8       	ldd	r9, Y+51	; 0x33
    c58a:	90 fc       	sbrc	r9, 0
    c58c:	41 c0       	rjmp	.+130    	; 0xc610 <f_unlink+0x100>
    c58e:	6f 96       	adiw	r28, 0x1f	; 31
    c590:	0e ad       	ldd	r16, Y+62	; 0x3e
    c592:	1f ad       	ldd	r17, Y+63	; 0x3f
    c594:	6f 97       	sbiw	r28, 0x1f	; 31
    c596:	2b 96       	adiw	r28, 0x0b	; 11
    c598:	6e ad       	ldd	r22, Y+62	; 0x3e
    c59a:	7f ad       	ldd	r23, Y+63	; 0x3f
    c59c:	2b 97       	sbiw	r28, 0x0b	; 11
    c59e:	f8 01       	movw	r30, r16
    c5a0:	80 81       	ld	r24, Z
    c5a2:	0e 94 5d 46 	call	0x8cba	; 0x8cba <ld_clust.isra.1>
    c5a6:	6b 01       	movw	r12, r22
    c5a8:	7c 01       	movw	r14, r24
    c5aa:	94 fe       	sbrs	r9, 4
    c5ac:	34 c0       	rjmp	.+104    	; 0xc616 <f_unlink+0x106>
    c5ae:	f8 01       	movw	r30, r16
    c5b0:	85 89       	ldd	r24, Z+21	; 0x15
    c5b2:	96 89       	ldd	r25, Z+22	; 0x16
    c5b4:	a7 89       	ldd	r26, Z+23	; 0x17
    c5b6:	b0 8d       	ldd	r27, Z+24	; 0x18
    c5b8:	c8 16       	cp	r12, r24
    c5ba:	d9 06       	cpc	r13, r25
    c5bc:	ea 06       	cpc	r14, r26
    c5be:	fb 06       	cpc	r15, r27
    c5c0:	39 f1       	breq	.+78     	; 0xc610 <f_unlink+0x100>
    c5c2:	1a 83       	std	Y+2, r17	; 0x02
    c5c4:	09 83       	std	Y+1, r16	; 0x01
    c5c6:	cf 82       	std	Y+7, r12	; 0x07
    c5c8:	d8 86       	std	Y+8, r13	; 0x08
    c5ca:	e9 86       	std	Y+9, r14	; 0x09
    c5cc:	fa 86       	std	Y+10, r15	; 0x0a
    c5ce:	40 e0       	ldi	r20, 0x00	; 0
    c5d0:	50 e0       	ldi	r21, 0x00	; 0
    c5d2:	ba 01       	movw	r22, r20
    c5d4:	ce 01       	movw	r24, r28
    c5d6:	01 96       	adiw	r24, 0x01	; 1
    c5d8:	0e 94 1e 4c 	call	0x983c	; 0x983c <dir_sdi>
    c5dc:	8c 01       	movw	r16, r24
    c5de:	89 2b       	or	r24, r25
    c5e0:	59 f0       	breq	.+22     	; 0xc5f8 <f_unlink+0xe8>
    c5e2:	c5 01       	movw	r24, r10
    c5e4:	0e 94 16 6c 	call	0xd82c	; 0xd82c <ff_memfree>
    c5e8:	c8 01       	movw	r24, r16
    c5ea:	36 c0       	rjmp	.+108    	; 0xc658 <f_unlink+0x148>
    c5ec:	81 e1       	ldi	r24, 0x11	; 17
    c5ee:	90 e0       	ldi	r25, 0x00	; 0
    c5f0:	33 c0       	rjmp	.+102    	; 0xc658 <f_unlink+0x148>
    c5f2:	06 e0       	ldi	r16, 0x06	; 6
    c5f4:	10 e0       	ldi	r17, 0x00	; 0
    c5f6:	f5 cf       	rjmp	.-22     	; 0xc5e2 <f_unlink+0xd2>
    c5f8:	60 e0       	ldi	r22, 0x00	; 0
    c5fa:	70 e0       	ldi	r23, 0x00	; 0
    c5fc:	ce 01       	movw	r24, r28
    c5fe:	01 96       	adiw	r24, 0x01	; 1
    c600:	0e 94 7a 50 	call	0xa0f4	; 0xa0f4 <dir_read>
    c604:	8c 01       	movw	r16, r24
    c606:	00 97       	sbiw	r24, 0x00	; 0
    c608:	19 f0       	breq	.+6      	; 0xc610 <f_unlink+0x100>
    c60a:	04 97       	sbiw	r24, 0x04	; 4
    c60c:	21 f0       	breq	.+8      	; 0xc616 <f_unlink+0x106>
    c60e:	e9 cf       	rjmp	.-46     	; 0xc5e2 <f_unlink+0xd2>
    c610:	07 e0       	ldi	r16, 0x07	; 7
    c612:	10 e0       	ldi	r17, 0x00	; 0
    c614:	e6 cf       	rjmp	.-52     	; 0xc5e2 <f_unlink+0xd2>
    c616:	ce 01       	movw	r24, r28
    c618:	8f 96       	adiw	r24, 0x2f	; 47
    c61a:	0e 94 48 51 	call	0xa290	; 0xa290 <dir_remove>
    c61e:	8c 01       	movw	r16, r24
    c620:	89 2b       	or	r24, r25
    c622:	f9 f6       	brne	.-66     	; 0xc5e2 <f_unlink+0xd2>
    c624:	c1 14       	cp	r12, r1
    c626:	d1 04       	cpc	r13, r1
    c628:	e1 04       	cpc	r14, r1
    c62a:	f1 04       	cpc	r15, r1
    c62c:	41 f4       	brne	.+16     	; 0xc63e <f_unlink+0x12e>
    c62e:	6f 96       	adiw	r28, 0x1f	; 31
    c630:	8e ad       	ldd	r24, Y+62	; 0x3e
    c632:	9f ad       	ldd	r25, Y+63	; 0x3f
    c634:	6f 97       	sbiw	r28, 0x1f	; 31
    c636:	0e 94 d9 46 	call	0x8db2	; 0x8db2 <sync_fs>
    c63a:	8c 01       	movw	r16, r24
    c63c:	d2 cf       	rjmp	.-92     	; 0xc5e2 <f_unlink+0xd2>
    c63e:	00 e0       	ldi	r16, 0x00	; 0
    c640:	10 e0       	ldi	r17, 0x00	; 0
    c642:	98 01       	movw	r18, r16
    c644:	b7 01       	movw	r22, r14
    c646:	a6 01       	movw	r20, r12
    c648:	ce 01       	movw	r24, r28
    c64a:	8f 96       	adiw	r24, 0x2f	; 47
    c64c:	0e 94 af 4d 	call	0x9b5e	; 0x9b5e <remove_chain>
    c650:	8c 01       	movw	r16, r24
    c652:	89 2b       	or	r24, r25
    c654:	31 f6       	brne	.-116    	; 0xc5e2 <f_unlink+0xd2>
    c656:	eb cf       	rjmp	.-42     	; 0xc62e <f_unlink+0x11e>
    c658:	c0 5a       	subi	r28, 0xA0	; 160
    c65a:	df 4f       	sbci	r29, 0xFF	; 255
    c65c:	eb e0       	ldi	r30, 0x0B	; 11
    c65e:	0c 94 e4 e8 	jmp	0x1d1c8	; 0x1d1c8 <__epilogue_restores__+0xe>

0000c662 <f_mkdir>:
    c662:	ac e3       	ldi	r26, 0x3C	; 60
    c664:	b0 e0       	ldi	r27, 0x00	; 0
    c666:	e7 e3       	ldi	r30, 0x37	; 55
    c668:	f3 e6       	ldi	r31, 0x63	; 99
    c66a:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__prologue_saves__>
    c66e:	9a ab       	std	Y+50, r25	; 0x32
    c670:	89 ab       	std	Y+49, r24	; 0x31
    c672:	42 e0       	ldi	r20, 0x02	; 2
    c674:	be 01       	movw	r22, r28
    c676:	61 5d       	subi	r22, 0xD1	; 209
    c678:	7f 4f       	sbci	r23, 0xFF	; 255
    c67a:	ce 01       	movw	r24, r28
    c67c:	c1 96       	adiw	r24, 0x31	; 49
    c67e:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <find_volume>
    c682:	2f a5       	ldd	r18, Y+47	; 0x2f
    c684:	38 a9       	ldd	r19, Y+48	; 0x30
    c686:	3a 83       	std	Y+2, r19	; 0x02
    c688:	29 83       	std	Y+1, r18	; 0x01
    c68a:	00 97       	sbiw	r24, 0x00	; 0
    c68c:	09 f0       	breq	.+2      	; 0xc690 <f_mkdir+0x2e>
    c68e:	2c c1       	rjmp	.+600    	; 0xc8e8 <f_mkdir+0x286>
    c690:	80 e0       	ldi	r24, 0x00	; 0
    c692:	92 e0       	ldi	r25, 0x02	; 2
    c694:	0e 94 13 6c 	call	0xd826	; 0xd826 <ff_memalloc>
    c698:	98 af       	std	Y+56, r25	; 0x38
    c69a:	8f ab       	std	Y+55, r24	; 0x37
    c69c:	00 97       	sbiw	r24, 0x00	; 0
    c69e:	d9 f0       	breq	.+54     	; 0xc6d6 <f_mkdir+0x74>
    c6a0:	ef a5       	ldd	r30, Y+47	; 0x2f
    c6a2:	f8 a9       	ldd	r31, Y+48	; 0x30
    c6a4:	94 87       	std	Z+12, r25	; 0x0c
    c6a6:	83 87       	std	Z+11, r24	; 0x0b
    c6a8:	69 a9       	ldd	r22, Y+49	; 0x31
    c6aa:	7a a9       	ldd	r23, Y+50	; 0x32
    c6ac:	ce 01       	movw	r24, r28
    c6ae:	01 96       	adiw	r24, 0x01	; 1
    c6b0:	0e 94 4b 54 	call	0xa896	; 0xa896 <follow_path>
    c6b4:	7c 01       	movw	r14, r24
    c6b6:	00 97       	sbiw	r24, 0x00	; 0
    c6b8:	89 f0       	breq	.+34     	; 0xc6dc <f_mkdir+0x7a>
    c6ba:	04 97       	sbiw	r24, 0x04	; 4
    c6bc:	31 f4       	brne	.+12     	; 0xc6ca <f_mkdir+0x68>
    c6be:	88 a5       	ldd	r24, Y+40	; 0x28
    c6c0:	85 ff       	sbrs	r24, 5
    c6c2:	10 c0       	rjmp	.+32     	; 0xc6e4 <f_mkdir+0x82>
    c6c4:	36 e0       	ldi	r19, 0x06	; 6
    c6c6:	e3 2e       	mov	r14, r19
    c6c8:	f1 2c       	mov	r15, r1
    c6ca:	8f a9       	ldd	r24, Y+55	; 0x37
    c6cc:	98 ad       	ldd	r25, Y+56	; 0x38
    c6ce:	0e 94 16 6c 	call	0xd82c	; 0xd82c <ff_memfree>
    c6d2:	c7 01       	movw	r24, r14
    c6d4:	09 c1       	rjmp	.+530    	; 0xc8e8 <f_mkdir+0x286>
    c6d6:	81 e1       	ldi	r24, 0x11	; 17
    c6d8:	90 e0       	ldi	r25, 0x00	; 0
    c6da:	06 c1       	rjmp	.+524    	; 0xc8e8 <f_mkdir+0x286>
    c6dc:	48 e0       	ldi	r20, 0x08	; 8
    c6de:	e4 2e       	mov	r14, r20
    c6e0:	f1 2c       	mov	r15, r1
    c6e2:	f3 cf       	rjmp	.-26     	; 0xc6ca <f_mkdir+0x68>
    c6e4:	40 e0       	ldi	r20, 0x00	; 0
    c6e6:	50 e0       	ldi	r21, 0x00	; 0
    c6e8:	ba 01       	movw	r22, r20
    c6ea:	ce 01       	movw	r24, r28
    c6ec:	01 96       	adiw	r24, 0x01	; 1
    c6ee:	0e 94 de 4c 	call	0x99bc	; 0x99bc <create_chain>
    c6f2:	4b 01       	movw	r8, r22
    c6f4:	5c 01       	movw	r10, r24
    c6f6:	8f a5       	ldd	r24, Y+47	; 0x2f
    c6f8:	98 a9       	ldd	r25, Y+48	; 0x30
    c6fa:	dc 01       	movw	r26, r24
    c6fc:	19 96       	adiw	r26, 0x09	; 9
    c6fe:	4d 91       	ld	r20, X+
    c700:	5c 91       	ld	r21, X
    c702:	1a 97       	sbiw	r26, 0x0a	; 10
    c704:	60 e0       	ldi	r22, 0x00	; 0
    c706:	70 e0       	ldi	r23, 0x00	; 0
    c708:	29 e0       	ldi	r18, 0x09	; 9
    c70a:	44 0f       	add	r20, r20
    c70c:	55 1f       	adc	r21, r21
    c70e:	66 1f       	adc	r22, r22
    c710:	77 1f       	adc	r23, r23
    c712:	2a 95       	dec	r18
    c714:	d1 f7       	brne	.-12     	; 0xc70a <f_mkdir+0xa8>
    c716:	4b 87       	std	Y+11, r20	; 0x0b
    c718:	5c 87       	std	Y+12, r21	; 0x0c
    c71a:	6d 87       	std	Y+13, r22	; 0x0d
    c71c:	7e 87       	std	Y+14, r23	; 0x0e
    c71e:	81 14       	cp	r8, r1
    c720:	91 04       	cpc	r9, r1
    c722:	a1 04       	cpc	r10, r1
    c724:	b1 04       	cpc	r11, r1
    c726:	a9 f0       	breq	.+42     	; 0xc752 <f_mkdir+0xf0>
    c728:	31 e0       	ldi	r19, 0x01	; 1
    c72a:	83 16       	cp	r8, r19
    c72c:	91 04       	cpc	r9, r1
    c72e:	a1 04       	cpc	r10, r1
    c730:	b1 04       	cpc	r11, r1
    c732:	59 f0       	breq	.+22     	; 0xc74a <f_mkdir+0xe8>
    c734:	4f ef       	ldi	r20, 0xFF	; 255
    c736:	84 16       	cp	r8, r20
    c738:	94 06       	cpc	r9, r20
    c73a:	a4 06       	cpc	r10, r20
    c73c:	b4 06       	cpc	r11, r20
    c73e:	09 f0       	breq	.+2      	; 0xc742 <f_mkdir+0xe0>
    c740:	cf c0       	rjmp	.+414    	; 0xc8e0 <f_mkdir+0x27e>
    c742:	ee 24       	eor	r14, r14
    c744:	e3 94       	inc	r14
    c746:	f1 2c       	mov	r15, r1
    c748:	07 c0       	rjmp	.+14     	; 0xc758 <f_mkdir+0xf6>
    c74a:	62 e0       	ldi	r22, 0x02	; 2
    c74c:	e6 2e       	mov	r14, r22
    c74e:	f1 2c       	mov	r15, r1
    c750:	03 c0       	rjmp	.+6      	; 0xc758 <f_mkdir+0xf6>
    c752:	57 e0       	ldi	r21, 0x07	; 7
    c754:	e5 2e       	mov	r14, r21
    c756:	f1 2c       	mov	r15, r1
    c758:	0e 94 23 73 	call	0xe646	; 0xe646 <get_fattime>
    c75c:	2b 01       	movw	r4, r22
    c75e:	3c 01       	movw	r6, r24
    c760:	e1 14       	cp	r14, r1
    c762:	f1 04       	cpc	r15, r1
    c764:	09 f0       	breq	.+2      	; 0xc768 <f_mkdir+0x106>
    c766:	8f c0       	rjmp	.+286    	; 0xc886 <f_mkdir+0x224>
    c768:	0f a5       	ldd	r16, Y+47	; 0x2f
    c76a:	18 a9       	ldd	r17, Y+48	; 0x30
    c76c:	b5 01       	movw	r22, r10
    c76e:	a4 01       	movw	r20, r8
    c770:	c8 01       	movw	r24, r16
    c772:	0e 94 92 45 	call	0x8b24	; 0x8b24 <clust2sect>
    c776:	6b 01       	movw	r12, r22
    c778:	7c 01       	movw	r14, r24
    c77a:	18 01       	movw	r2, r16
    c77c:	55 e3       	ldi	r21, 0x35	; 53
    c77e:	25 0e       	add	r2, r21
    c780:	31 1c       	adc	r3, r1
    c782:	40 e0       	ldi	r20, 0x00	; 0
    c784:	52 e0       	ldi	r21, 0x02	; 2
    c786:	60 e0       	ldi	r22, 0x00	; 0
    c788:	70 e0       	ldi	r23, 0x00	; 0
    c78a:	c1 01       	movw	r24, r2
    c78c:	0e 94 89 45 	call	0x8b12	; 0x8b12 <mem_set>
    c790:	4b e0       	ldi	r20, 0x0B	; 11
    c792:	50 e0       	ldi	r21, 0x00	; 0
    c794:	60 e2       	ldi	r22, 0x20	; 32
    c796:	70 e0       	ldi	r23, 0x00	; 0
    c798:	c1 01       	movw	r24, r2
    c79a:	0e 94 89 45 	call	0x8b12	; 0x8b12 <mem_set>
    c79e:	ee e2       	ldi	r30, 0x2E	; 46
    c7a0:	d8 01       	movw	r26, r16
    c7a2:	d5 96       	adiw	r26, 0x35	; 53
    c7a4:	ec 93       	st	X, r30
    c7a6:	f8 01       	movw	r30, r16
    c7a8:	e0 5c       	subi	r30, 0xC0	; 192
    c7aa:	ff 4f       	sbci	r31, 0xFF	; 255
    c7ac:	80 e1       	ldi	r24, 0x10	; 16
    c7ae:	80 83       	st	Z, r24
    c7b0:	b3 01       	movw	r22, r6
    c7b2:	a2 01       	movw	r20, r4
    c7b4:	c8 01       	movw	r24, r16
    c7b6:	85 5b       	subi	r24, 0xB5	; 181
    c7b8:	9f 4f       	sbci	r25, 0xFF	; 255
    c7ba:	0e 94 83 45 	call	0x8b06	; 0x8b06 <st_dword>
    c7be:	a5 01       	movw	r20, r10
    c7c0:	94 01       	movw	r18, r8
    c7c2:	b1 01       	movw	r22, r2
    c7c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    c7c6:	98 a9       	ldd	r25, Y+48	; 0x30
    c7c8:	0e 94 72 46 	call	0x8ce4	; 0x8ce4 <st_clust.isra.2>
    c7cc:	98 01       	movw	r18, r16
    c7ce:	2b 5a       	subi	r18, 0xAB	; 171
    c7d0:	3f 4f       	sbci	r19, 0xFF	; 255
    c7d2:	3c ab       	std	Y+52, r19	; 0x34
    c7d4:	2b ab       	std	Y+51, r18	; 0x33
    c7d6:	40 e2       	ldi	r20, 0x20	; 32
    c7d8:	50 e0       	ldi	r21, 0x00	; 0
    c7da:	b1 01       	movw	r22, r2
    c7dc:	c9 01       	movw	r24, r18
    c7de:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <mem_cpy.part.0>
    c7e2:	f8 01       	movw	r30, r16
    c7e4:	ea 5a       	subi	r30, 0xAA	; 170
    c7e6:	ff 4f       	sbci	r31, 0xFF	; 255
    c7e8:	3e e2       	ldi	r19, 0x2E	; 46
    c7ea:	30 83       	st	Z, r19
    c7ec:	2f 81       	ldd	r18, Y+7	; 0x07
    c7ee:	38 85       	ldd	r19, Y+8	; 0x08
    c7f0:	49 85       	ldd	r20, Y+9	; 0x09
    c7f2:	5a 85       	ldd	r21, Y+10	; 0x0a
    c7f4:	0f a5       	ldd	r16, Y+47	; 0x2f
    c7f6:	18 a9       	ldd	r17, Y+48	; 0x30
    c7f8:	d8 01       	movw	r26, r16
    c7fa:	6c 91       	ld	r22, X
    c7fc:	63 30       	cpi	r22, 0x03	; 3
    c7fe:	71 f4       	brne	.+28     	; 0xc81c <f_mkdir+0x1ba>
    c800:	99 96       	adiw	r26, 0x29	; 41
    c802:	8d 91       	ld	r24, X+
    c804:	9d 91       	ld	r25, X+
    c806:	0d 90       	ld	r0, X+
    c808:	bc 91       	ld	r27, X
    c80a:	a0 2d       	mov	r26, r0
    c80c:	28 17       	cp	r18, r24
    c80e:	39 07       	cpc	r19, r25
    c810:	4a 07       	cpc	r20, r26
    c812:	5b 07       	cpc	r21, r27
    c814:	19 f4       	brne	.+6      	; 0xc81c <f_mkdir+0x1ba>
    c816:	20 e0       	ldi	r18, 0x00	; 0
    c818:	30 e0       	ldi	r19, 0x00	; 0
    c81a:	a9 01       	movw	r20, r18
    c81c:	6b a9       	ldd	r22, Y+51	; 0x33
    c81e:	7c a9       	ldd	r23, Y+52	; 0x34
    c820:	c8 01       	movw	r24, r16
    c822:	0e 94 72 46 	call	0x8ce4	; 0x8ce4 <st_clust.isra.2>
    c826:	ef a5       	ldd	r30, Y+47	; 0x2f
    c828:	f8 a9       	ldd	r31, Y+48	; 0x30
    c82a:	01 85       	ldd	r16, Z+9	; 0x09
    c82c:	12 85       	ldd	r17, Z+10	; 0x0a
    c82e:	01 15       	cp	r16, r1
    c830:	11 05       	cpc	r17, r1
    c832:	99 f1       	breq	.+102    	; 0xc89a <f_mkdir+0x238>
    c834:	8f a5       	ldd	r24, Y+47	; 0x2f
    c836:	98 a9       	ldd	r25, Y+48	; 0x30
    c838:	a7 01       	movw	r20, r14
    c83a:	96 01       	movw	r18, r12
    c83c:	2f 5f       	subi	r18, 0xFF	; 255
    c83e:	3f 4f       	sbci	r19, 0xFF	; 255
    c840:	4f 4f       	sbci	r20, 0xFF	; 255
    c842:	5f 4f       	sbci	r21, 0xFF	; 255
    c844:	2b ab       	std	Y+51, r18	; 0x33
    c846:	3c ab       	std	Y+52, r19	; 0x34
    c848:	4d ab       	std	Y+53, r20	; 0x35
    c84a:	5e ab       	std	Y+54, r21	; 0x36
    c84c:	dc 01       	movw	r26, r24
    c84e:	d1 96       	adiw	r26, 0x31	; 49
    c850:	cd 92       	st	X+, r12
    c852:	dd 92       	st	X+, r13
    c854:	ed 92       	st	X+, r14
    c856:	fc 92       	st	X, r15
    c858:	d4 97       	sbiw	r26, 0x34	; 52
    c85a:	e1 e0       	ldi	r30, 0x01	; 1
    c85c:	13 96       	adiw	r26, 0x03	; 3
    c85e:	ec 93       	st	X, r30
    c860:	0e 94 7f 46 	call	0x8cfe	; 0x8cfe <sync_window.part.3>
    c864:	7c 01       	movw	r14, r24
    c866:	89 2b       	or	r24, r25
    c868:	71 f4       	brne	.+28     	; 0xc886 <f_mkdir+0x224>
    c86a:	40 e0       	ldi	r20, 0x00	; 0
    c86c:	52 e0       	ldi	r21, 0x02	; 2
    c86e:	60 e0       	ldi	r22, 0x00	; 0
    c870:	70 e0       	ldi	r23, 0x00	; 0
    c872:	c1 01       	movw	r24, r2
    c874:	0e 94 89 45 	call	0x8b12	; 0x8b12 <mem_set>
    c878:	01 50       	subi	r16, 0x01	; 1
    c87a:	11 09       	sbc	r17, r1
    c87c:	cb a8       	ldd	r12, Y+51	; 0x33
    c87e:	dc a8       	ldd	r13, Y+52	; 0x34
    c880:	ed a8       	ldd	r14, Y+53	; 0x35
    c882:	fe a8       	ldd	r15, Y+54	; 0x36
    c884:	d4 cf       	rjmp	.-88     	; 0xc82e <f_mkdir+0x1cc>
    c886:	00 e0       	ldi	r16, 0x00	; 0
    c888:	10 e0       	ldi	r17, 0x00	; 0
    c88a:	98 01       	movw	r18, r16
    c88c:	b5 01       	movw	r22, r10
    c88e:	a4 01       	movw	r20, r8
    c890:	ce 01       	movw	r24, r28
    c892:	01 96       	adiw	r24, 0x01	; 1
    c894:	0e 94 af 4d 	call	0x9b5e	; 0x9b5e <remove_chain>
    c898:	18 cf       	rjmp	.-464    	; 0xc6ca <f_mkdir+0x68>
    c89a:	ce 01       	movw	r24, r28
    c89c:	01 96       	adiw	r24, 0x01	; 1
    c89e:	0e 94 a7 52 	call	0xa54e	; 0xa54e <dir_register>
    c8a2:	7c 01       	movw	r14, r24
    c8a4:	89 2b       	or	r24, r25
    c8a6:	79 f7       	brne	.-34     	; 0xc886 <f_mkdir+0x224>
    c8a8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    c8aa:	1c 8d       	ldd	r17, Y+28	; 0x1c
    c8ac:	b3 01       	movw	r22, r6
    c8ae:	a2 01       	movw	r20, r4
    c8b0:	c8 01       	movw	r24, r16
    c8b2:	46 96       	adiw	r24, 0x16	; 22
    c8b4:	0e 94 83 45 	call	0x8b06	; 0x8b06 <st_dword>
    c8b8:	a5 01       	movw	r20, r10
    c8ba:	94 01       	movw	r18, r8
    c8bc:	b8 01       	movw	r22, r16
    c8be:	8f a5       	ldd	r24, Y+47	; 0x2f
    c8c0:	98 a9       	ldd	r25, Y+48	; 0x30
    c8c2:	0e 94 72 46 	call	0x8ce4	; 0x8ce4 <st_clust.isra.2>
    c8c6:	80 e1       	ldi	r24, 0x10	; 16
    c8c8:	f8 01       	movw	r30, r16
    c8ca:	83 87       	std	Z+11, r24	; 0x0b
    c8cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    c8ce:	98 a9       	ldd	r25, Y+48	; 0x30
    c8d0:	21 e0       	ldi	r18, 0x01	; 1
    c8d2:	dc 01       	movw	r26, r24
    c8d4:	13 96       	adiw	r26, 0x03	; 3
    c8d6:	2c 93       	st	X, r18
    c8d8:	0e 94 d9 46 	call	0x8db2	; 0x8db2 <sync_fs>
    c8dc:	7c 01       	movw	r14, r24
    c8de:	f5 ce       	rjmp	.-534    	; 0xc6ca <f_mkdir+0x68>
    c8e0:	0e 94 d0 46 	call	0x8da0	; 0x8da0 <sync_window>
    c8e4:	7c 01       	movw	r14, r24
    c8e6:	38 cf       	rjmp	.-400    	; 0xc758 <f_mkdir+0xf6>
    c8e8:	ec 96       	adiw	r28, 0x3c	; 60
    c8ea:	e2 e1       	ldi	r30, 0x12	; 18
    c8ec:	0c 94 dd e8 	jmp	0x1d1ba	; 0x1d1ba <__epilogue_restores__>

0000c8f0 <f_rename>:
    c8f0:	aa e7       	ldi	r26, 0x7A	; 122
    c8f2:	b0 e0       	ldi	r27, 0x00	; 0
    c8f4:	ee e7       	ldi	r30, 0x7E	; 126
    c8f6:	f4 e6       	ldi	r31, 0x64	; 100
    c8f8:	0c 94 ca e8 	jmp	0x1d194	; 0x1d194 <__prologue_saves__+0x12>
    c8fc:	e9 96       	adiw	r28, 0x39	; 57
    c8fe:	9f af       	std	Y+63, r25	; 0x3f
    c900:	8e af       	std	Y+62, r24	; 0x3e
    c902:	e9 97       	sbiw	r28, 0x39	; 57
    c904:	eb 96       	adiw	r28, 0x3b	; 59
    c906:	7f af       	std	Y+63, r23	; 0x3f
    c908:	6e af       	std	Y+62, r22	; 0x3e
    c90a:	eb 97       	sbiw	r28, 0x3b	; 59
    c90c:	ce 01       	movw	r24, r28
    c90e:	87 58       	subi	r24, 0x87	; 135
    c910:	9f 4f       	sbci	r25, 0xFF	; 255
    c912:	0e 94 05 46 	call	0x8c0a	; 0x8c0a <get_ldnumber>
    c916:	42 e0       	ldi	r20, 0x02	; 2
    c918:	be 01       	movw	r22, r28
    c91a:	6b 58       	subi	r22, 0x8B	; 139
    c91c:	7f 4f       	sbci	r23, 0xFF	; 255
    c91e:	ce 01       	movw	r24, r28
    c920:	89 58       	subi	r24, 0x89	; 137
    c922:	9f 4f       	sbci	r25, 0xFF	; 255
    c924:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <find_volume>
    c928:	00 97       	sbiw	r24, 0x00	; 0
    c92a:	09 f0       	breq	.+2      	; 0xc92e <f_rename+0x3e>
    c92c:	eb c0       	rjmp	.+470    	; 0xcb04 <f_rename+0x214>
    c92e:	e7 96       	adiw	r28, 0x37	; 55
    c930:	8e ad       	ldd	r24, Y+62	; 0x3e
    c932:	9f ad       	ldd	r25, Y+63	; 0x3f
    c934:	e7 97       	sbiw	r28, 0x37	; 55
    c936:	98 ab       	std	Y+48, r25	; 0x30
    c938:	8f a7       	std	Y+47, r24	; 0x2f
    c93a:	80 e0       	ldi	r24, 0x00	; 0
    c93c:	92 e0       	ldi	r25, 0x02	; 2
    c93e:	73 d7       	rcall	.+3814   	; 0xd826 <ff_memalloc>
    c940:	6c 01       	movw	r12, r24
    c942:	00 97       	sbiw	r24, 0x00	; 0
    c944:	09 f4       	brne	.+2      	; 0xc948 <f_rename+0x58>
    c946:	3f c0       	rjmp	.+126    	; 0xc9c6 <f_rename+0xd6>
    c948:	e7 96       	adiw	r28, 0x37	; 55
    c94a:	ee ad       	ldd	r30, Y+62	; 0x3e
    c94c:	ff ad       	ldd	r31, Y+63	; 0x3f
    c94e:	e7 97       	sbiw	r28, 0x37	; 55
    c950:	94 87       	std	Z+12, r25	; 0x0c
    c952:	83 87       	std	Z+11, r24	; 0x0b
    c954:	e9 96       	adiw	r28, 0x39	; 57
    c956:	6e ad       	ldd	r22, Y+62	; 0x3e
    c958:	7f ad       	ldd	r23, Y+63	; 0x3f
    c95a:	e9 97       	sbiw	r28, 0x39	; 57
    c95c:	ce 01       	movw	r24, r28
    c95e:	8f 96       	adiw	r24, 0x2f	; 47
    c960:	0e 94 4b 54 	call	0xa896	; 0xa896 <follow_path>
    c964:	8c 01       	movw	r16, r24
    c966:	89 2b       	or	r24, r25
    c968:	51 f5       	brne	.+84     	; 0xc9be <f_rename+0xce>
    c96a:	67 96       	adiw	r28, 0x17	; 23
    c96c:	8f ad       	ldd	r24, Y+63	; 0x3f
    c96e:	67 97       	sbiw	r28, 0x17	; 23
    c970:	80 7a       	andi	r24, 0xA0	; 160
    c972:	09 f0       	breq	.+2      	; 0xc976 <f_rename+0x86>
    c974:	ae c0       	rjmp	.+348    	; 0xcad2 <f_rename+0x1e2>
    c976:	2b 96       	adiw	r28, 0x0b	; 11
    c978:	6e ad       	ldd	r22, Y+62	; 0x3e
    c97a:	7f ad       	ldd	r23, Y+63	; 0x3f
    c97c:	2b 97       	sbiw	r28, 0x0b	; 11
    c97e:	65 5f       	subi	r22, 0xF5	; 245
    c980:	7f 4f       	sbci	r23, 0xFF	; 255
    c982:	45 e1       	ldi	r20, 0x15	; 21
    c984:	50 e0       	ldi	r21, 0x00	; 0
    c986:	ce 01       	movw	r24, r28
    c988:	83 5a       	subi	r24, 0xA3	; 163
    c98a:	9f 4f       	sbci	r25, 0xFF	; 255
    c98c:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <mem_cpy.part.0>
    c990:	4e e2       	ldi	r20, 0x2E	; 46
    c992:	50 e0       	ldi	r21, 0x00	; 0
    c994:	be 01       	movw	r22, r28
    c996:	61 5d       	subi	r22, 0xD1	; 209
    c998:	7f 4f       	sbci	r23, 0xFF	; 255
    c99a:	ce 01       	movw	r24, r28
    c99c:	01 96       	adiw	r24, 0x01	; 1
    c99e:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <mem_cpy.part.0>
    c9a2:	eb 96       	adiw	r28, 0x3b	; 59
    c9a4:	6e ad       	ldd	r22, Y+62	; 0x3e
    c9a6:	7f ad       	ldd	r23, Y+63	; 0x3f
    c9a8:	eb 97       	sbiw	r28, 0x3b	; 59
    c9aa:	ce 01       	movw	r24, r28
    c9ac:	01 96       	adiw	r24, 0x01	; 1
    c9ae:	0e 94 4b 54 	call	0xa896	; 0xa896 <follow_path>
    c9b2:	8c 01       	movw	r16, r24
    c9b4:	89 2b       	or	r24, r25
    c9b6:	51 f0       	breq	.+20     	; 0xc9cc <f_rename+0xdc>
    c9b8:	04 30       	cpi	r16, 0x04	; 4
    c9ba:	11 05       	cpc	r17, r1
    c9bc:	29 f1       	breq	.+74     	; 0xca08 <f_rename+0x118>
    c9be:	c6 01       	movw	r24, r12
    c9c0:	35 d7       	rcall	.+3690   	; 0xd82c <ff_memfree>
    c9c2:	c8 01       	movw	r24, r16
    c9c4:	9f c0       	rjmp	.+318    	; 0xcb04 <f_rename+0x214>
    c9c6:	81 e1       	ldi	r24, 0x11	; 17
    c9c8:	90 e0       	ldi	r25, 0x00	; 0
    c9ca:	9c c0       	rjmp	.+312    	; 0xcb04 <f_rename+0x214>
    c9cc:	4f 81       	ldd	r20, Y+7	; 0x07
    c9ce:	58 85       	ldd	r21, Y+8	; 0x08
    c9d0:	69 85       	ldd	r22, Y+9	; 0x09
    c9d2:	7a 85       	ldd	r23, Y+10	; 0x0a
    c9d4:	8d a9       	ldd	r24, Y+53	; 0x35
    c9d6:	9e a9       	ldd	r25, Y+54	; 0x36
    c9d8:	af a9       	ldd	r26, Y+55	; 0x37
    c9da:	b8 ad       	ldd	r27, Y+56	; 0x38
    c9dc:	48 17       	cp	r20, r24
    c9de:	59 07       	cpc	r21, r25
    c9e0:	6a 07       	cpc	r22, r26
    c9e2:	7b 07       	cpc	r23, r27
    c9e4:	09 f0       	breq	.+2      	; 0xc9e8 <f_rename+0xf8>
    c9e6:	88 c0       	rjmp	.+272    	; 0xcaf8 <f_rename+0x208>
    c9e8:	4f 85       	ldd	r20, Y+15	; 0x0f
    c9ea:	58 89       	ldd	r21, Y+16	; 0x10
    c9ec:	69 89       	ldd	r22, Y+17	; 0x11
    c9ee:	7a 89       	ldd	r23, Y+18	; 0x12
    c9f0:	21 96       	adiw	r28, 0x01	; 1
    c9f2:	8c ad       	ldd	r24, Y+60	; 0x3c
    c9f4:	9d ad       	ldd	r25, Y+61	; 0x3d
    c9f6:	ae ad       	ldd	r26, Y+62	; 0x3e
    c9f8:	bf ad       	ldd	r27, Y+63	; 0x3f
    c9fa:	21 97       	sbiw	r28, 0x01	; 1
    c9fc:	48 17       	cp	r20, r24
    c9fe:	59 07       	cpc	r21, r25
    ca00:	6a 07       	cpc	r22, r26
    ca02:	7b 07       	cpc	r23, r27
    ca04:	09 f0       	breq	.+2      	; 0xca08 <f_rename+0x118>
    ca06:	78 c0       	rjmp	.+240    	; 0xcaf8 <f_rename+0x208>
    ca08:	ce 01       	movw	r24, r28
    ca0a:	01 96       	adiw	r24, 0x01	; 1
    ca0c:	0e 94 a7 52 	call	0xa54e	; 0xa54e <dir_register>
    ca10:	8c 01       	movw	r16, r24
    ca12:	89 2b       	or	r24, r25
    ca14:	a1 f6       	brne	.-88     	; 0xc9be <f_rename+0xce>
    ca16:	eb 8c       	ldd	r14, Y+27	; 0x1b
    ca18:	fc 8c       	ldd	r15, Y+28	; 0x1c
    ca1a:	6d e5       	ldi	r22, 0x5D	; 93
    ca1c:	70 e0       	ldi	r23, 0x00	; 0
    ca1e:	6c 0f       	add	r22, r28
    ca20:	7d 1f       	adc	r23, r29
    ca22:	6e 5f       	subi	r22, 0xFE	; 254
    ca24:	7f 4f       	sbci	r23, 0xFF	; 255
    ca26:	43 e1       	ldi	r20, 0x13	; 19
    ca28:	50 e0       	ldi	r21, 0x00	; 0
    ca2a:	c7 01       	movw	r24, r14
    ca2c:	0d 96       	adiw	r24, 0x0d	; 13
    ca2e:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <mem_cpy.part.0>
    ca32:	6e 96       	adiw	r28, 0x1e	; 30
    ca34:	8f ad       	ldd	r24, Y+63	; 0x3f
    ca36:	6e 97       	sbiw	r28, 0x1e	; 30
    ca38:	80 62       	ori	r24, 0x20	; 32
    ca3a:	f7 01       	movw	r30, r14
    ca3c:	83 87       	std	Z+11, r24	; 0x0b
    ca3e:	e7 96       	adiw	r28, 0x37	; 55
    ca40:	0e ad       	ldd	r16, Y+62	; 0x3e
    ca42:	1f ad       	ldd	r17, Y+63	; 0x3f
    ca44:	e7 97       	sbiw	r28, 0x37	; 55
    ca46:	bb 24       	eor	r11, r11
    ca48:	b3 94       	inc	r11
    ca4a:	f8 01       	movw	r30, r16
    ca4c:	b3 82       	std	Z+3, r11	; 0x03
    ca4e:	f7 01       	movw	r30, r14
    ca50:	83 85       	ldd	r24, Z+11	; 0x0b
    ca52:	84 ff       	sbrs	r24, 4
    ca54:	41 c0       	rjmp	.+130    	; 0xcad8 <f_rename+0x1e8>
    ca56:	4d a9       	ldd	r20, Y+53	; 0x35
    ca58:	5e a9       	ldd	r21, Y+54	; 0x36
    ca5a:	6f a9       	ldd	r22, Y+55	; 0x37
    ca5c:	78 ad       	ldd	r23, Y+56	; 0x38
    ca5e:	8f 81       	ldd	r24, Y+7	; 0x07
    ca60:	98 85       	ldd	r25, Y+8	; 0x08
    ca62:	a9 85       	ldd	r26, Y+9	; 0x09
    ca64:	ba 85       	ldd	r27, Y+10	; 0x0a
    ca66:	48 17       	cp	r20, r24
    ca68:	59 07       	cpc	r21, r25
    ca6a:	6a 07       	cpc	r22, r26
    ca6c:	7b 07       	cpc	r23, r27
    ca6e:	a1 f1       	breq	.+104    	; 0xcad8 <f_rename+0x1e8>
    ca70:	b7 01       	movw	r22, r14
    ca72:	f8 01       	movw	r30, r16
    ca74:	80 81       	ld	r24, Z
    ca76:	0e 94 5d 46 	call	0x8cba	; 0x8cba <ld_clust.isra.1>
    ca7a:	ab 01       	movw	r20, r22
    ca7c:	bc 01       	movw	r22, r24
    ca7e:	c8 01       	movw	r24, r16
    ca80:	0e 94 92 45 	call	0x8b24	; 0x8b24 <clust2sect>
    ca84:	ab 01       	movw	r20, r22
    ca86:	bc 01       	movw	r22, r24
    ca88:	41 15       	cp	r20, r1
    ca8a:	51 05       	cpc	r21, r1
    ca8c:	61 05       	cpc	r22, r1
    ca8e:	71 05       	cpc	r23, r1
    ca90:	b1 f1       	breq	.+108    	; 0xcafe <f_rename+0x20e>
    ca92:	c8 01       	movw	r24, r16
    ca94:	0e 94 45 47 	call	0x8e8a	; 0x8e8a <move_window>
    ca98:	8c 01       	movw	r16, r24
    ca9a:	89 2b       	or	r24, r25
    ca9c:	09 f0       	breq	.+2      	; 0xcaa0 <f_rename+0x1b0>
    ca9e:	8f cf       	rjmp	.-226    	; 0xc9be <f_rename+0xce>
    caa0:	e7 96       	adiw	r28, 0x37	; 55
    caa2:	8e ad       	ldd	r24, Y+62	; 0x3e
    caa4:	9f ad       	ldd	r25, Y+63	; 0x3f
    caa6:	e7 97       	sbiw	r28, 0x37	; 55
    caa8:	fc 01       	movw	r30, r24
    caaa:	ea 5a       	subi	r30, 0xAA	; 170
    caac:	ff 4f       	sbci	r31, 0xFF	; 255
    caae:	20 81       	ld	r18, Z
    cab0:	2e 32       	cpi	r18, 0x2E	; 46
    cab2:	91 f4       	brne	.+36     	; 0xcad8 <f_rename+0x1e8>
    cab4:	2f 81       	ldd	r18, Y+7	; 0x07
    cab6:	38 85       	ldd	r19, Y+8	; 0x08
    cab8:	49 85       	ldd	r20, Y+9	; 0x09
    caba:	5a 85       	ldd	r21, Y+10	; 0x0a
    cabc:	bc 01       	movw	r22, r24
    cabe:	6b 5a       	subi	r22, 0xAB	; 171
    cac0:	7f 4f       	sbci	r23, 0xFF	; 255
    cac2:	0e 94 72 46 	call	0x8ce4	; 0x8ce4 <st_clust.isra.2>
    cac6:	e7 96       	adiw	r28, 0x37	; 55
    cac8:	ee ad       	ldd	r30, Y+62	; 0x3e
    caca:	ff ad       	ldd	r31, Y+63	; 0x3f
    cacc:	e7 97       	sbiw	r28, 0x37	; 55
    cace:	b3 82       	std	Z+3, r11	; 0x03
    cad0:	03 c0       	rjmp	.+6      	; 0xcad8 <f_rename+0x1e8>
    cad2:	06 e0       	ldi	r16, 0x06	; 6
    cad4:	10 e0       	ldi	r17, 0x00	; 0
    cad6:	73 cf       	rjmp	.-282    	; 0xc9be <f_rename+0xce>
    cad8:	ce 01       	movw	r24, r28
    cada:	8f 96       	adiw	r24, 0x2f	; 47
    cadc:	0e 94 48 51 	call	0xa290	; 0xa290 <dir_remove>
    cae0:	8c 01       	movw	r16, r24
    cae2:	89 2b       	or	r24, r25
    cae4:	09 f0       	breq	.+2      	; 0xcae8 <f_rename+0x1f8>
    cae6:	6b cf       	rjmp	.-298    	; 0xc9be <f_rename+0xce>
    cae8:	e7 96       	adiw	r28, 0x37	; 55
    caea:	8e ad       	ldd	r24, Y+62	; 0x3e
    caec:	9f ad       	ldd	r25, Y+63	; 0x3f
    caee:	e7 97       	sbiw	r28, 0x37	; 55
    caf0:	0e 94 d9 46 	call	0x8db2	; 0x8db2 <sync_fs>
    caf4:	8c 01       	movw	r16, r24
    caf6:	63 cf       	rjmp	.-314    	; 0xc9be <f_rename+0xce>
    caf8:	08 e0       	ldi	r16, 0x08	; 8
    cafa:	10 e0       	ldi	r17, 0x00	; 0
    cafc:	60 cf       	rjmp	.-320    	; 0xc9be <f_rename+0xce>
    cafe:	02 e0       	ldi	r16, 0x02	; 2
    cb00:	10 e0       	ldi	r17, 0x00	; 0
    cb02:	5d cf       	rjmp	.-326    	; 0xc9be <f_rename+0xce>
    cb04:	c6 58       	subi	r28, 0x86	; 134
    cb06:	df 4f       	sbci	r29, 0xFF	; 255
    cb08:	e9 e0       	ldi	r30, 0x09	; 9
    cb0a:	0c 94 e6 e8 	jmp	0x1d1cc	; 0x1d1cc <__epilogue_restores__+0x12>

0000cb0e <f_chmod>:
    cb0e:	a2 e3       	ldi	r26, 0x32	; 50
    cb10:	b0 e0       	ldi	r27, 0x00	; 0
    cb12:	ed e8       	ldi	r30, 0x8D	; 141
    cb14:	f5 e6       	ldi	r31, 0x65	; 101
    cb16:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__prologue_saves__+0x14>
    cb1a:	9a ab       	std	Y+50, r25	; 0x32
    cb1c:	89 ab       	std	Y+49, r24	; 0x31
    cb1e:	e6 2e       	mov	r14, r22
    cb20:	f4 2e       	mov	r15, r20
    cb22:	42 e0       	ldi	r20, 0x02	; 2
    cb24:	be 01       	movw	r22, r28
    cb26:	61 5d       	subi	r22, 0xD1	; 209
    cb28:	7f 4f       	sbci	r23, 0xFF	; 255
    cb2a:	ce 01       	movw	r24, r28
    cb2c:	c1 96       	adiw	r24, 0x31	; 49
    cb2e:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <find_volume>
    cb32:	2f a5       	ldd	r18, Y+47	; 0x2f
    cb34:	38 a9       	ldd	r19, Y+48	; 0x30
    cb36:	3a 83       	std	Y+2, r19	; 0x02
    cb38:	29 83       	std	Y+1, r18	; 0x01
    cb3a:	00 97       	sbiw	r24, 0x00	; 0
    cb3c:	89 f5       	brne	.+98     	; 0xcba0 <f_chmod+0x92>
    cb3e:	80 e0       	ldi	r24, 0x00	; 0
    cb40:	92 e0       	ldi	r25, 0x02	; 2
    cb42:	71 d6       	rcall	.+3298   	; 0xd826 <ff_memalloc>
    cb44:	6c 01       	movw	r12, r24
    cb46:	00 97       	sbiw	r24, 0x00	; 0
    cb48:	b1 f0       	breq	.+44     	; 0xcb76 <f_chmod+0x68>
    cb4a:	ef a5       	ldd	r30, Y+47	; 0x2f
    cb4c:	f8 a9       	ldd	r31, Y+48	; 0x30
    cb4e:	94 87       	std	Z+12, r25	; 0x0c
    cb50:	83 87       	std	Z+11, r24	; 0x0b
    cb52:	69 a9       	ldd	r22, Y+49	; 0x31
    cb54:	7a a9       	ldd	r23, Y+50	; 0x32
    cb56:	ce 01       	movw	r24, r28
    cb58:	01 96       	adiw	r24, 0x01	; 1
    cb5a:	0e 94 4b 54 	call	0xa896	; 0xa896 <follow_path>
    cb5e:	8c 01       	movw	r16, r24
    cb60:	89 2b       	or	r24, r25
    cb62:	29 f4       	brne	.+10     	; 0xcb6e <f_chmod+0x60>
    cb64:	88 a5       	ldd	r24, Y+40	; 0x28
    cb66:	80 7a       	andi	r24, 0xA0	; 160
    cb68:	49 f0       	breq	.+18     	; 0xcb7c <f_chmod+0x6e>
    cb6a:	06 e0       	ldi	r16, 0x06	; 6
    cb6c:	10 e0       	ldi	r17, 0x00	; 0
    cb6e:	c6 01       	movw	r24, r12
    cb70:	5d d6       	rcall	.+3258   	; 0xd82c <ff_memfree>
    cb72:	c8 01       	movw	r24, r16
    cb74:	15 c0       	rjmp	.+42     	; 0xcba0 <f_chmod+0x92>
    cb76:	81 e1       	ldi	r24, 0x11	; 17
    cb78:	90 e0       	ldi	r25, 0x00	; 0
    cb7a:	12 c0       	rjmp	.+36     	; 0xcba0 <f_chmod+0x92>
    cb7c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    cb7e:	fc 8d       	ldd	r31, Y+28	; 0x1c
    cb80:	83 85       	ldd	r24, Z+11	; 0x0b
    cb82:	6e 2d       	mov	r22, r14
    cb84:	68 27       	eor	r22, r24
    cb86:	6f 21       	and	r22, r15
    cb88:	67 72       	andi	r22, 0x27	; 39
    cb8a:	68 27       	eor	r22, r24
    cb8c:	63 87       	std	Z+11, r22	; 0x0b
    cb8e:	8f a5       	ldd	r24, Y+47	; 0x2f
    cb90:	98 a9       	ldd	r25, Y+48	; 0x30
    cb92:	21 e0       	ldi	r18, 0x01	; 1
    cb94:	fc 01       	movw	r30, r24
    cb96:	23 83       	std	Z+3, r18	; 0x03
    cb98:	0e 94 d9 46 	call	0x8db2	; 0x8db2 <sync_fs>
    cb9c:	8c 01       	movw	r16, r24
    cb9e:	e7 cf       	rjmp	.-50     	; 0xcb6e <f_chmod+0x60>
    cba0:	e2 96       	adiw	r28, 0x32	; 50
    cba2:	e8 e0       	ldi	r30, 0x08	; 8
    cba4:	0c 94 e7 e8 	jmp	0x1d1ce	; 0x1d1ce <__epilogue_restores__+0x14>

0000cba8 <f_utime>:
    cba8:	a2 e3       	ldi	r26, 0x32	; 50
    cbaa:	b0 e0       	ldi	r27, 0x00	; 0
    cbac:	ea ed       	ldi	r30, 0xDA	; 218
    cbae:	f5 e6       	ldi	r31, 0x65	; 101
    cbb0:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__prologue_saves__+0x14>
    cbb4:	9a ab       	std	Y+50, r25	; 0x32
    cbb6:	89 ab       	std	Y+49, r24	; 0x31
    cbb8:	6b 01       	movw	r12, r22
    cbba:	42 e0       	ldi	r20, 0x02	; 2
    cbbc:	be 01       	movw	r22, r28
    cbbe:	61 5d       	subi	r22, 0xD1	; 209
    cbc0:	7f 4f       	sbci	r23, 0xFF	; 255
    cbc2:	ce 01       	movw	r24, r28
    cbc4:	c1 96       	adiw	r24, 0x31	; 49
    cbc6:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <find_volume>
    cbca:	2f a5       	ldd	r18, Y+47	; 0x2f
    cbcc:	38 a9       	ldd	r19, Y+48	; 0x30
    cbce:	3a 83       	std	Y+2, r19	; 0x02
    cbd0:	29 83       	std	Y+1, r18	; 0x01
    cbd2:	00 97       	sbiw	r24, 0x00	; 0
    cbd4:	09 f0       	breq	.+2      	; 0xcbd8 <f_utime+0x30>
    cbd6:	3d c0       	rjmp	.+122    	; 0xcc52 <f_utime+0xaa>
    cbd8:	80 e0       	ldi	r24, 0x00	; 0
    cbda:	92 e0       	ldi	r25, 0x02	; 2
    cbdc:	24 d6       	rcall	.+3144   	; 0xd826 <ff_memalloc>
    cbde:	7c 01       	movw	r14, r24
    cbe0:	00 97       	sbiw	r24, 0x00	; 0
    cbe2:	b1 f0       	breq	.+44     	; 0xcc10 <f_utime+0x68>
    cbe4:	ef a5       	ldd	r30, Y+47	; 0x2f
    cbe6:	f8 a9       	ldd	r31, Y+48	; 0x30
    cbe8:	94 87       	std	Z+12, r25	; 0x0c
    cbea:	83 87       	std	Z+11, r24	; 0x0b
    cbec:	69 a9       	ldd	r22, Y+49	; 0x31
    cbee:	7a a9       	ldd	r23, Y+50	; 0x32
    cbf0:	ce 01       	movw	r24, r28
    cbf2:	01 96       	adiw	r24, 0x01	; 1
    cbf4:	0e 94 4b 54 	call	0xa896	; 0xa896 <follow_path>
    cbf8:	8c 01       	movw	r16, r24
    cbfa:	89 2b       	or	r24, r25
    cbfc:	29 f4       	brne	.+10     	; 0xcc08 <f_utime+0x60>
    cbfe:	88 a5       	ldd	r24, Y+40	; 0x28
    cc00:	80 7a       	andi	r24, 0xA0	; 160
    cc02:	49 f0       	breq	.+18     	; 0xcc16 <f_utime+0x6e>
    cc04:	06 e0       	ldi	r16, 0x06	; 6
    cc06:	10 e0       	ldi	r17, 0x00	; 0
    cc08:	c7 01       	movw	r24, r14
    cc0a:	10 d6       	rcall	.+3104   	; 0xd82c <ff_memfree>
    cc0c:	c8 01       	movw	r24, r16
    cc0e:	21 c0       	rjmp	.+66     	; 0xcc52 <f_utime+0xaa>
    cc10:	81 e1       	ldi	r24, 0x11	; 17
    cc12:	90 e0       	ldi	r25, 0x00	; 0
    cc14:	1e c0       	rjmp	.+60     	; 0xcc52 <f_utime+0xaa>
    cc16:	f6 01       	movw	r30, r12
    cc18:	44 81       	ldd	r20, Z+4	; 0x04
    cc1a:	55 81       	ldd	r21, Z+5	; 0x05
    cc1c:	60 e0       	ldi	r22, 0x00	; 0
    cc1e:	70 e0       	ldi	r23, 0x00	; 0
    cc20:	ba 01       	movw	r22, r20
    cc22:	55 27       	eor	r21, r21
    cc24:	44 27       	eor	r20, r20
    cc26:	86 81       	ldd	r24, Z+6	; 0x06
    cc28:	97 81       	ldd	r25, Z+7	; 0x07
    cc2a:	a0 e0       	ldi	r26, 0x00	; 0
    cc2c:	b0 e0       	ldi	r27, 0x00	; 0
    cc2e:	48 2b       	or	r20, r24
    cc30:	59 2b       	or	r21, r25
    cc32:	6a 2b       	or	r22, r26
    cc34:	7b 2b       	or	r23, r27
    cc36:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cc38:	9c 8d       	ldd	r25, Y+28	; 0x1c
    cc3a:	46 96       	adiw	r24, 0x16	; 22
    cc3c:	0e 94 83 45 	call	0x8b06	; 0x8b06 <st_dword>
    cc40:	8f a5       	ldd	r24, Y+47	; 0x2f
    cc42:	98 a9       	ldd	r25, Y+48	; 0x30
    cc44:	21 e0       	ldi	r18, 0x01	; 1
    cc46:	fc 01       	movw	r30, r24
    cc48:	23 83       	std	Z+3, r18	; 0x03
    cc4a:	0e 94 d9 46 	call	0x8db2	; 0x8db2 <sync_fs>
    cc4e:	8c 01       	movw	r16, r24
    cc50:	db cf       	rjmp	.-74     	; 0xcc08 <f_utime+0x60>
    cc52:	e2 96       	adiw	r28, 0x32	; 50
    cc54:	e8 e0       	ldi	r30, 0x08	; 8
    cc56:	0c 94 e7 e8 	jmp	0x1d1ce	; 0x1d1ce <__epilogue_restores__+0x14>

0000cc5a <f_getlabel>:
    cc5a:	a2 e3       	ldi	r26, 0x32	; 50
    cc5c:	b0 e0       	ldi	r27, 0x00	; 0
    cc5e:	e3 e3       	ldi	r30, 0x33	; 51
    cc60:	f6 e6       	ldi	r31, 0x66	; 102
    cc62:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__prologue_saves__+0x14>
    cc66:	9a ab       	std	Y+50, r25	; 0x32
    cc68:	89 ab       	std	Y+49, r24	; 0x31
    cc6a:	7b 01       	movw	r14, r22
    cc6c:	6a 01       	movw	r12, r20
    cc6e:	40 e0       	ldi	r20, 0x00	; 0
    cc70:	be 01       	movw	r22, r28
    cc72:	61 5d       	subi	r22, 0xD1	; 209
    cc74:	7f 4f       	sbci	r23, 0xFF	; 255
    cc76:	ce 01       	movw	r24, r28
    cc78:	c1 96       	adiw	r24, 0x31	; 49
    cc7a:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <find_volume>
    cc7e:	8c 01       	movw	r16, r24
    cc80:	89 2b       	or	r24, r25
    cc82:	09 f0       	breq	.+2      	; 0xcc86 <f_getlabel+0x2c>
    cc84:	5f c0       	rjmp	.+190    	; 0xcd44 <f_getlabel+0xea>
    cc86:	e1 14       	cp	r14, r1
    cc88:	f1 04       	cpc	r15, r1
    cc8a:	91 f1       	breq	.+100    	; 0xccf0 <f_getlabel+0x96>
    cc8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    cc8e:	98 a9       	ldd	r25, Y+48	; 0x30
    cc90:	9a 83       	std	Y+2, r25	; 0x02
    cc92:	89 83       	std	Y+1, r24	; 0x01
    cc94:	1f 82       	std	Y+7, r1	; 0x07
    cc96:	18 86       	std	Y+8, r1	; 0x08
    cc98:	19 86       	std	Y+9, r1	; 0x09
    cc9a:	1a 86       	std	Y+10, r1	; 0x0a
    cc9c:	40 e0       	ldi	r20, 0x00	; 0
    cc9e:	50 e0       	ldi	r21, 0x00	; 0
    cca0:	ba 01       	movw	r22, r20
    cca2:	ce 01       	movw	r24, r28
    cca4:	01 96       	adiw	r24, 0x01	; 1
    cca6:	0e 94 1e 4c 	call	0x983c	; 0x983c <dir_sdi>
    ccaa:	00 97       	sbiw	r24, 0x00	; 0
    ccac:	e1 f4       	brne	.+56     	; 0xcce6 <f_getlabel+0x8c>
    ccae:	61 e0       	ldi	r22, 0x01	; 1
    ccb0:	70 e0       	ldi	r23, 0x00	; 0
    ccb2:	ce 01       	movw	r24, r28
    ccb4:	01 96       	adiw	r24, 0x01	; 1
    ccb6:	0e 94 7a 50 	call	0xa0f4	; 0xa0f4 <dir_read>
    ccba:	00 97       	sbiw	r24, 0x00	; 0
    ccbc:	a1 f4       	brne	.+40     	; 0xcce6 <f_getlabel+0x8c>
    ccbe:	eb 8d       	ldd	r30, Y+27	; 0x1b
    ccc0:	fc 8d       	ldd	r31, Y+28	; 0x1c
    ccc2:	cf 01       	movw	r24, r30
    ccc4:	0b 96       	adiw	r24, 0x0b	; 11
    ccc6:	d7 01       	movw	r26, r14
    ccc8:	21 91       	ld	r18, Z+
    ccca:	2d 93       	st	X+, r18
    cccc:	e8 17       	cp	r30, r24
    ccce:	f9 07       	cpc	r31, r25
    ccd0:	d9 f7       	brne	.-10     	; 0xccc8 <f_getlabel+0x6e>
    ccd2:	f7 01       	movw	r30, r14
    ccd4:	3b 96       	adiw	r30, 0x0b	; 11
    ccd6:	10 82       	st	Z, r1
    ccd8:	ee 16       	cp	r14, r30
    ccda:	ff 06       	cpc	r15, r31
    ccdc:	49 f0       	breq	.+18     	; 0xccf0 <f_getlabel+0x96>
    ccde:	82 91       	ld	r24, -Z
    cce0:	80 32       	cpi	r24, 0x20	; 32
    cce2:	c9 f3       	breq	.-14     	; 0xccd6 <f_getlabel+0x7c>
    cce4:	05 c0       	rjmp	.+10     	; 0xccf0 <f_getlabel+0x96>
    cce6:	84 30       	cpi	r24, 0x04	; 4
    cce8:	91 05       	cpc	r25, r1
    ccea:	59 f5       	brne	.+86     	; 0xcd42 <f_getlabel+0xe8>
    ccec:	f7 01       	movw	r30, r14
    ccee:	10 82       	st	Z, r1
    ccf0:	c1 14       	cp	r12, r1
    ccf2:	d1 04       	cpc	r13, r1
    ccf4:	39 f1       	breq	.+78     	; 0xcd44 <f_getlabel+0xea>
    ccf6:	8f a5       	ldd	r24, Y+47	; 0x2f
    ccf8:	98 a9       	ldd	r25, Y+48	; 0x30
    ccfa:	fc 01       	movw	r30, r24
    ccfc:	41 a1       	ldd	r20, Z+33	; 0x21
    ccfe:	52 a1       	ldd	r21, Z+34	; 0x22
    cd00:	63 a1       	ldd	r22, Z+35	; 0x23
    cd02:	74 a1       	ldd	r23, Z+36	; 0x24
    cd04:	0e 94 45 47 	call	0x8e8a	; 0x8e8a <move_window>
    cd08:	8c 01       	movw	r16, r24
    cd0a:	89 2b       	or	r24, r25
    cd0c:	d9 f4       	brne	.+54     	; 0xcd44 <f_getlabel+0xea>
    cd0e:	ef a5       	ldd	r30, Y+47	; 0x2f
    cd10:	f8 a9       	ldd	r31, Y+48	; 0x30
    cd12:	80 81       	ld	r24, Z
    cd14:	83 30       	cpi	r24, 0x03	; 3
    cd16:	29 f0       	breq	.+10     	; 0xcd22 <f_getlabel+0xc8>
    cd18:	84 30       	cpi	r24, 0x04	; 4
    cd1a:	31 f0       	breq	.+12     	; 0xcd28 <f_getlabel+0xce>
    cd1c:	87 e2       	ldi	r24, 0x27	; 39
    cd1e:	90 e0       	ldi	r25, 0x00	; 0
    cd20:	05 c0       	rjmp	.+10     	; 0xcd2c <f_getlabel+0xd2>
    cd22:	83 e4       	ldi	r24, 0x43	; 67
    cd24:	90 e0       	ldi	r25, 0x00	; 0
    cd26:	02 c0       	rjmp	.+4      	; 0xcd2c <f_getlabel+0xd2>
    cd28:	84 e6       	ldi	r24, 0x64	; 100
    cd2a:	90 e0       	ldi	r25, 0x00	; 0
    cd2c:	f5 96       	adiw	r30, 0x35	; 53
    cd2e:	8e 0f       	add	r24, r30
    cd30:	9f 1f       	adc	r25, r31
    cd32:	0e 94 6e 45 	call	0x8adc	; 0x8adc <ld_dword>
    cd36:	f6 01       	movw	r30, r12
    cd38:	60 83       	st	Z, r22
    cd3a:	71 83       	std	Z+1, r23	; 0x01
    cd3c:	82 83       	std	Z+2, r24	; 0x02
    cd3e:	93 83       	std	Z+3, r25	; 0x03
    cd40:	01 c0       	rjmp	.+2      	; 0xcd44 <f_getlabel+0xea>
    cd42:	8c 01       	movw	r16, r24
    cd44:	c8 01       	movw	r24, r16
    cd46:	e2 96       	adiw	r28, 0x32	; 50
    cd48:	e8 e0       	ldi	r30, 0x08	; 8
    cd4a:	0c 94 e7 e8 	jmp	0x1d1ce	; 0x1d1ce <__epilogue_restores__+0x14>

0000cd4e <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
    cd4e:	a2 e4       	ldi	r26, 0x42	; 66
    cd50:	b0 e0       	ldi	r27, 0x00	; 0
    cd52:	ed ea       	ldi	r30, 0xAD	; 173
    cd54:	f6 e6       	ldi	r31, 0x66	; 102
    cd56:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__prologue_saves__>
    cd5a:	9a 87       	std	Y+10, r25	; 0x0a
    cd5c:	89 87       	std	Y+9, r24	; 0x09
    cd5e:	e6 2e       	mov	r14, r22
    cd60:	49 01       	movw	r8, r18
    cd62:	5a 01       	movw	r10, r20
    cd64:	68 01       	movw	r12, r16
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
    cd66:	ce 01       	movw	r24, r28
    cd68:	09 96       	adiw	r24, 0x09	; 9
    cd6a:	0e 94 05 46 	call	0x8c0a	; 0x8c0a <get_ldnumber>
    cd6e:	1c 01       	movw	r2, r24
	if (vol < 0) return FR_INVALID_DRIVE;
    cd70:	97 fd       	sbrc	r25, 7
    cd72:	39 c5       	rjmp	.+2674   	; 0xd7e6 <f_mkfs+0xa98>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear mounted volume */
    cd74:	fc 01       	movw	r30, r24
    cd76:	ee 0f       	add	r30, r30
    cd78:	ff 1f       	adc	r31, r31
    cd7a:	e8 52       	subi	r30, 0x28	; 40
    cd7c:	f8 4e       	sbci	r31, 0xE8	; 232
    cd7e:	01 90       	ld	r0, Z+
    cd80:	f0 81       	ld	r31, Z
    cd82:	e0 2d       	mov	r30, r0
    cd84:	30 97       	sbiw	r30, 0x00	; 0
    cd86:	09 f0       	breq	.+2      	; 0xcd8a <f_mkfs+0x3c>
    cd88:	10 82       	st	Z, r1
	pdrv = LD2PD(vol);	/* Physical drive */
    cd8a:	2c a6       	std	Y+44, r2	; 0x2c
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
    cd8c:	82 2d       	mov	r24, r2
    cd8e:	d2 d5       	rcall	.+2980   	; 0xd934 <disk_initialize>
	if (stat & STA_NOINIT) return FR_NOT_READY;
    cd90:	80 fd       	sbrc	r24, 0
    cd92:	2b c5       	rjmp	.+2646   	; 0xd7ea <f_mkfs+0xa9c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    cd94:	82 fd       	sbrc	r24, 2
    cd96:	2b c5       	rjmp	.+2646   	; 0xd7ee <f_mkfs+0xaa0>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
    cd98:	ae 01       	movw	r20, r28
    cd9a:	4b 5f       	subi	r20, 0xFB	; 251
    cd9c:	5f 4f       	sbci	r21, 0xFF	; 255
    cd9e:	63 e0       	ldi	r22, 0x03	; 3
    cda0:	82 2d       	mov	r24, r2
    cda2:	ee d5       	rcall	.+3036   	; 0xd980 <disk_ioctl>
    cda4:	89 2b       	or	r24, r25
    cda6:	b9 f4       	brne	.+46     	; 0xcdd6 <f_mkfs+0x88>
    cda8:	4d 81       	ldd	r20, Y+5	; 0x05
    cdaa:	5e 81       	ldd	r21, Y+6	; 0x06
    cdac:	6f 81       	ldd	r22, Y+7	; 0x07
    cdae:	78 85       	ldd	r23, Y+8	; 0x08
    cdb0:	db 01       	movw	r26, r22
    cdb2:	ca 01       	movw	r24, r20
    cdb4:	01 97       	sbiw	r24, 0x01	; 1
    cdb6:	a1 09       	sbc	r26, r1
    cdb8:	b1 09       	sbc	r27, r1
    cdba:	81 15       	cp	r24, r1
    cdbc:	00 e8       	ldi	r16, 0x80	; 128
    cdbe:	90 07       	cpc	r25, r16
    cdc0:	a1 05       	cpc	r26, r1
    cdc2:	b1 05       	cpc	r27, r1
    cdc4:	40 f4       	brcc	.+16     	; 0xcdd6 <f_mkfs+0x88>
    cdc6:	84 23       	and	r24, r20
    cdc8:	95 23       	and	r25, r21
    cdca:	a6 23       	and	r26, r22
    cdcc:	b7 23       	and	r27, r23
    cdce:	89 2b       	or	r24, r25
    cdd0:	8a 2b       	or	r24, r26
    cdd2:	8b 2b       	or	r24, r27
    cdd4:	41 f0       	breq	.+16     	; 0xcde6 <f_mkfs+0x98>
    cdd6:	81 e0       	ldi	r24, 0x01	; 1
    cdd8:	90 e0       	ldi	r25, 0x00	; 0
    cdda:	a0 e0       	ldi	r26, 0x00	; 0
    cddc:	b0 e0       	ldi	r27, 0x00	; 0
    cdde:	8d 83       	std	Y+5, r24	; 0x05
    cde0:	9e 83       	std	Y+6, r25	; 0x06
    cde2:	af 83       	std	Y+7, r26	; 0x07
    cde4:	b8 87       	std	Y+8, r27	; 0x08
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
    cde6:	81 14       	cp	r8, r1
    cde8:	91 04       	cpc	r9, r1
    cdea:	a1 04       	cpc	r10, r1
    cdec:	b1 04       	cpc	r11, r1
    cdee:	61 f0       	breq	.+24     	; 0xce08 <f_mkfs+0xba>
    cdf0:	d5 01       	movw	r26, r10
    cdf2:	c4 01       	movw	r24, r8
    cdf4:	92 50       	subi	r25, 0x02	; 2
    cdf6:	a1 09       	sbc	r26, r1
    cdf8:	b1 09       	sbc	r27, r1
    cdfa:	81 30       	cpi	r24, 0x01	; 1
    cdfc:	9e 4f       	sbci	r25, 0xFE	; 254
    cdfe:	af 4f       	sbci	r26, 0xFF	; 255
    ce00:	b1 05       	cpc	r27, r1
    ce02:	10 f0       	brcs	.+4      	; 0xce08 <f_mkfs+0xba>
    ce04:	83 e1       	ldi	r24, 0x13	; 19
    ce06:	f6 c4       	rjmp	.+2540   	; 0xd7f4 <f_mkfs+0xaa6>
    ce08:	d5 01       	movw	r26, r10
    ce0a:	c4 01       	movw	r24, r8
    ce0c:	01 97       	sbiw	r24, 0x01	; 1
    ce0e:	a1 09       	sbc	r26, r1
    ce10:	b1 09       	sbc	r27, r1
    ce12:	88 21       	and	r24, r8
    ce14:	99 21       	and	r25, r9
    ce16:	aa 21       	and	r26, r10
    ce18:	bb 21       	and	r27, r11
    ce1a:	89 2b       	or	r24, r25
    ce1c:	8a 2b       	or	r24, r26
    ce1e:	8b 2b       	or	r24, r27
    ce20:	89 f7       	brne	.-30     	; 0xce04 <f_mkfs+0xb6>
	au /= ss;	/* Cluster size in unit of sector */

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
	sz_buf = len / ss;		/* Size of working buffer (sector) */
    ce22:	8f 2d       	mov	r24, r15
    ce24:	86 95       	lsr	r24
    ce26:	90 e0       	ldi	r25, 0x00	; 0
    ce28:	9c 01       	movw	r18, r24
    ce2a:	40 e0       	ldi	r20, 0x00	; 0
    ce2c:	50 e0       	ldi	r21, 0x00	; 0
    ce2e:	2c a3       	std	Y+36, r18	; 0x24
    ce30:	3d a3       	std	Y+37, r19	; 0x25
    ce32:	4e a3       	std	Y+38, r20	; 0x26
    ce34:	5f a3       	std	Y+39, r21	; 0x27
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
    ce36:	69 e0       	ldi	r22, 0x09	; 9
    ce38:	22 0f       	add	r18, r18
    ce3a:	33 1f       	adc	r19, r19
    ce3c:	44 1f       	adc	r20, r20
    ce3e:	55 1f       	adc	r21, r21
    ce40:	6a 95       	dec	r22
    ce42:	d1 f7       	brne	.-12     	; 0xce38 <f_mkfs+0xea>
    ce44:	2d a7       	std	Y+45, r18	; 0x2d
    ce46:	3e a7       	std	Y+46, r19	; 0x2e
    ce48:	4f a7       	std	Y+47, r20	; 0x2f
    ce4a:	58 ab       	std	Y+48, r21	; 0x30
	if (!szb_buf) return FR_MKFS_ABORTED;
    ce4c:	23 2b       	or	r18, r19
    ce4e:	24 2b       	or	r18, r20
    ce50:	25 2b       	or	r18, r21
    ce52:	11 f4       	brne	.+4      	; 0xce58 <f_mkfs+0x10a>
    ce54:	8e e0       	ldi	r24, 0x0E	; 14
    ce56:	ce c4       	rjmp	.+2460   	; 0xd7f4 <f_mkfs+0xaa6>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
    ce58:	ae 01       	movw	r20, r28
    ce5a:	4f 5f       	subi	r20, 0xFF	; 255
    ce5c:	5f 4f       	sbci	r21, 0xFF	; 255
    ce5e:	61 e0       	ldi	r22, 0x01	; 1
    ce60:	82 2d       	mov	r24, r2
    ce62:	8e d5       	rcall	.+2844   	; 0xd980 <disk_ioctl>
    ce64:	89 2b       	or	r24, r25
    ce66:	09 f0       	breq	.+2      	; 0xce6a <f_mkfs+0x11c>
    ce68:	c4 c4       	rjmp	.+2440   	; 0xd7f2 <f_mkfs+0xaa4>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
    ce6a:	3e 2d       	mov	r19, r14
    ce6c:	38 70       	andi	r19, 0x08	; 8
    ce6e:	3a ab       	std	Y+50, r19	; 0x32
    ce70:	e3 fe       	sbrs	r14, 3
    ce72:	05 c0       	rjmp	.+10     	; 0xce7e <f_mkfs+0x130>
    ce74:	1c 8a       	std	Y+20, r1	; 0x14
    ce76:	1d 8a       	std	Y+21, r1	; 0x15
    ce78:	1e 8a       	std	Y+22, r1	; 0x16
    ce7a:	1f 8a       	std	Y+23, r1	; 0x17
    ce7c:	08 c0       	rjmp	.+16     	; 0xce8e <f_mkfs+0x140>
    ce7e:	8f e3       	ldi	r24, 0x3F	; 63
    ce80:	90 e0       	ldi	r25, 0x00	; 0
    ce82:	a0 e0       	ldi	r26, 0x00	; 0
    ce84:	b0 e0       	ldi	r27, 0x00	; 0
    ce86:	8c 8b       	std	Y+20, r24	; 0x14
    ce88:	9d 8b       	std	Y+21, r25	; 0x15
    ce8a:	ae 8b       	std	Y+22, r26	; 0x16
    ce8c:	bf 8b       	std	Y+23, r27	; 0x17
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
    ce8e:	49 80       	ldd	r4, Y+1	; 0x01
    ce90:	5a 80       	ldd	r5, Y+2	; 0x02
    ce92:	6b 80       	ldd	r6, Y+3	; 0x03
    ce94:	7c 80       	ldd	r7, Y+4	; 0x04
    ce96:	0c 89       	ldd	r16, Y+20	; 0x14
    ce98:	1d 89       	ldd	r17, Y+21	; 0x15
    ce9a:	2e 89       	ldd	r18, Y+22	; 0x16
    ce9c:	3f 89       	ldd	r19, Y+23	; 0x17
    ce9e:	40 16       	cp	r4, r16
    cea0:	51 06       	cpc	r5, r17
    cea2:	62 06       	cpc	r6, r18
    cea4:	73 06       	cpc	r7, r19
    cea6:	b0 f2       	brcs	.-84     	; 0xce54 <f_mkfs+0x106>
		sz_vol -= b_vol;						/* Volume size */
    cea8:	d3 01       	movw	r26, r6
    ceaa:	c2 01       	movw	r24, r4
    ceac:	80 1b       	sub	r24, r16
    ceae:	91 0b       	sbc	r25, r17
    ceb0:	a2 0b       	sbc	r26, r18
    ceb2:	b3 0b       	sbc	r27, r19
    ceb4:	8b 87       	std	Y+11, r24	; 0x0b
    ceb6:	9c 87       	std	Y+12, r25	; 0x0c
    ceb8:	ad 87       	std	Y+13, r26	; 0x0d
    ceba:	be 87       	std	Y+14, r27	; 0x0e
    cebc:	89 83       	std	Y+1, r24	; 0x01
    cebe:	9a 83       	std	Y+2, r25	; 0x02
    cec0:	ab 83       	std	Y+3, r26	; 0x03
    cec2:	bc 83       	std	Y+4, r27	; 0x04
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
    cec4:	80 38       	cpi	r24, 0x80	; 128
    cec6:	91 05       	cpc	r25, r1
    cec8:	a1 05       	cpc	r26, r1
    ceca:	b1 05       	cpc	r27, r1
    cecc:	18 f2       	brcs	.-122    	; 0xce54 <f_mkfs+0x106>
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
	au /= ss;	/* Cluster size in unit of sector */
    cece:	29 e0       	ldi	r18, 0x09	; 9
    ced0:	b6 94       	lsr	r11
    ced2:	a7 94       	ror	r10
    ced4:	97 94       	ror	r9
    ced6:	87 94       	ror	r8
    ced8:	2a 95       	dec	r18
    ceda:	d1 f7       	brne	.-12     	; 0xced0 <f_mkfs+0x182>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
    cedc:	91 e8       	ldi	r25, 0x81	; 129
    cede:	89 16       	cp	r8, r25
    cee0:	91 04       	cpc	r9, r1
    cee2:	a1 04       	cpc	r10, r1
    cee4:	b1 04       	cpc	r11, r1
    cee6:	08 f0       	brcs	.+2      	; 0xceea <f_mkfs+0x19c>
    cee8:	8d cf       	rjmp	.-230    	; 0xce04 <f_mkfs+0xb6>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
    ceea:	ae 2d       	mov	r26, r14
    ceec:	a2 70       	andi	r26, 0x02	; 2
    ceee:	fa 2e       	mov	r15, r26
    cef0:	e1 fe       	sbrs	r14, 1
    cef2:	06 c0       	rjmp	.+12     	; 0xcf00 <f_mkfs+0x1b2>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
    cef4:	8e 2d       	mov	r24, r14
    cef6:	87 70       	andi	r24, 0x07	; 7
    cef8:	82 30       	cpi	r24, 0x02	; 2
    cefa:	39 f0       	breq	.+14     	; 0xcf0a <f_mkfs+0x1bc>
    cefc:	e0 fe       	sbrs	r14, 0
    cefe:	08 c0       	rjmp	.+16     	; 0xcf10 <f_mkfs+0x1c2>
				fmt = FS_FAT32; break;
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
    cf00:	e0 fe       	sbrs	r14, 0
    cf02:	80 cf       	rjmp	.-256    	; 0xce04 <f_mkfs+0xb6>
		fmt = FS_FAT16;
    cf04:	b2 e0       	ldi	r27, 0x02	; 2
    cf06:	bf 87       	std	Y+15, r27	; 0x0f
    cf08:	05 c0       	rjmp	.+10     	; 0xcf14 <f_mkfs+0x1c6>
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
		if (opt & FM_FAT32) {	/* FAT32 possible? */
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
				fmt = FS_FAT32; break;
    cf0a:	e3 e0       	ldi	r30, 0x03	; 3
    cf0c:	ef 87       	std	Y+15, r30	; 0x0f
    cf0e:	02 c0       	rjmp	.+4      	; 0xcf14 <f_mkfs+0x1c6>
    cf10:	f3 e0       	ldi	r31, 0x03	; 3
    cf12:	ff 87       	std	Y+15, r31	; 0x0f
		do {
			pau = au;
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
				if (!pau) {	/* au auto-selection */
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
    cf14:	0b 85       	ldd	r16, Y+11	; 0x0b
    cf16:	1c 85       	ldd	r17, Y+12	; 0x0c
    cf18:	2d 85       	ldd	r18, Y+13	; 0x0d
    cf1a:	3e 85       	ldd	r19, Y+14	; 0x0e
    cf1c:	81 e1       	ldi	r24, 0x11	; 17
    cf1e:	36 95       	lsr	r19
    cf20:	27 95       	ror	r18
    cf22:	17 95       	ror	r17
    cf24:	07 95       	ror	r16
    cf26:	8a 95       	dec	r24
    cf28:	d1 f7       	brne	.-12     	; 0xcf1e <f_mkfs+0x1d0>
    cf2a:	23 96       	adiw	r28, 0x03	; 3
    cf2c:	0c af       	std	Y+60, r16	; 0x3c
    cf2e:	1d af       	std	Y+61, r17	; 0x3d
    cf30:	2e af       	std	Y+62, r18	; 0x3e
    cf32:	3f af       	std	Y+63, r19	; 0x3f
    cf34:	23 97       	sbiw	r28, 0x03	; 3
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
    cf36:	0b 85       	ldd	r16, Y+11	; 0x0b
    cf38:	1c 85       	ldd	r17, Y+12	; 0x0c
    cf3a:	2d 85       	ldd	r18, Y+13	; 0x0d
    cf3c:	3e 85       	ldd	r19, Y+14	; 0x0e
    cf3e:	9c e0       	ldi	r25, 0x0C	; 12
    cf40:	36 95       	lsr	r19
    cf42:	27 95       	ror	r18
    cf44:	17 95       	ror	r17
    cf46:	07 95       	ror	r16
    cf48:	9a 95       	dec	r25
    cf4a:	d1 f7       	brne	.-12     	; 0xcf40 <f_mkfs+0x1f2>
    cf4c:	0b ab       	std	Y+51, r16	; 0x33
    cf4e:	1c ab       	std	Y+52, r17	; 0x34
    cf50:	2d ab       	std	Y+53, r18	; 0x35
    cf52:	3e ab       	std	Y+54, r19	; 0x36
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
    cf54:	8d 81       	ldd	r24, Y+5	; 0x05
    cf56:	9e 81       	ldd	r25, Y+6	; 0x06
    cf58:	af 81       	ldd	r26, Y+7	; 0x07
    cf5a:	b8 85       	ldd	r27, Y+8	; 0x08
    cf5c:	8c 01       	movw	r16, r24
    cf5e:	9d 01       	movw	r18, r26
    cf60:	01 50       	subi	r16, 0x01	; 1
    cf62:	11 09       	sbc	r17, r1
    cf64:	21 09       	sbc	r18, r1
    cf66:	31 09       	sbc	r19, r1
    cf68:	0b af       	std	Y+59, r16	; 0x3b
    cf6a:	1c af       	std	Y+60, r17	; 0x3c
    cf6c:	2d af       	std	Y+61, r18	; 0x3d
    cf6e:	3e af       	std	Y+62, r19	; 0x3e
    cf70:	00 27       	eor	r16, r16
    cf72:	11 27       	eor	r17, r17
    cf74:	98 01       	movw	r18, r16
    cf76:	08 1b       	sub	r16, r24
    cf78:	19 0b       	sbc	r17, r25
    cf7a:	2a 0b       	sbc	r18, r26
    cf7c:	3b 0b       	sbc	r19, r27
    cf7e:	0f ab       	std	Y+55, r16	; 0x37
    cf80:	18 af       	std	Y+56, r17	; 0x38
    cf82:	29 af       	std	Y+57, r18	; 0x39
    cf84:	3a af       	std	Y+58, r19	; 0x3a
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
    cf86:	1f 85       	ldd	r17, Y+15	; 0x0f
    cf88:	13 30       	cpi	r17, 0x03	; 3
    cf8a:	09 f0       	breq	.+2      	; 0xcf8e <f_mkfs+0x240>
    cf8c:	67 c1       	rjmp	.+718    	; 0xd25c <f_mkfs+0x50e>
				if (!pau) {	/* au auto-selection */
    cf8e:	81 14       	cp	r8, r1
    cf90:	91 04       	cpc	r9, r1
    cf92:	a1 04       	cpc	r10, r1
    cf94:	b1 04       	cpc	r11, r1
    cf96:	e1 f4       	brne	.+56     	; 0xcfd0 <f_mkfs+0x282>
    cf98:	ee e8       	ldi	r30, 0x8E	; 142
    cf9a:	f2 e0       	ldi	r31, 0x02	; 2
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
    cf9c:	41 2c       	mov	r4, r1
    cf9e:	51 2c       	mov	r5, r1
    cfa0:	32 01       	movw	r6, r4
    cfa2:	43 94       	inc	r4
    cfa4:	81 91       	ld	r24, Z+
    cfa6:	91 91       	ld	r25, Z+
    cfa8:	00 97       	sbiw	r24, 0x00	; 0
    cfaa:	a1 f0       	breq	.+40     	; 0xcfd4 <f_mkfs+0x286>
    cfac:	a0 e0       	ldi	r26, 0x00	; 0
    cfae:	b0 e0       	ldi	r27, 0x00	; 0
    cfb0:	23 96       	adiw	r28, 0x03	; 3
    cfb2:	0c ad       	ldd	r16, Y+60	; 0x3c
    cfb4:	1d ad       	ldd	r17, Y+61	; 0x3d
    cfb6:	2e ad       	ldd	r18, Y+62	; 0x3e
    cfb8:	3f ad       	ldd	r19, Y+63	; 0x3f
    cfba:	23 97       	sbiw	r28, 0x03	; 3
    cfbc:	08 17       	cp	r16, r24
    cfbe:	19 07       	cpc	r17, r25
    cfc0:	2a 07       	cpc	r18, r26
    cfc2:	3b 07       	cpc	r19, r27
    cfc4:	38 f0       	brcs	.+14     	; 0xcfd4 <f_mkfs+0x286>
    cfc6:	44 0c       	add	r4, r4
    cfc8:	55 1c       	adc	r5, r5
    cfca:	66 1c       	adc	r6, r6
    cfcc:	77 1c       	adc	r7, r7
    cfce:	ea cf       	rjmp	.-44     	; 0xcfa4 <f_mkfs+0x256>
    cfd0:	24 01       	movw	r4, r8
    cfd2:	35 01       	movw	r6, r10
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
    cfd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    cfd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    cfd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    cfda:	9e 85       	ldd	r25, Y+14	; 0x0e
    cfdc:	a3 01       	movw	r20, r6
    cfde:	92 01       	movw	r18, r4
    cfe0:	0e 94 54 e8 	call	0x1d0a8	; 0x1d0a8 <__udivmodsi4>
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
    cfe4:	da 01       	movw	r26, r20
    cfe6:	c9 01       	movw	r24, r18
    cfe8:	62 e0       	ldi	r22, 0x02	; 2
    cfea:	88 0f       	add	r24, r24
    cfec:	99 1f       	adc	r25, r25
    cfee:	aa 1f       	adc	r26, r26
    cff0:	bb 1f       	adc	r27, r27
    cff2:	6a 95       	dec	r22
    cff4:	d1 f7       	brne	.-12     	; 0xcfea <f_mkfs+0x29c>
    cff6:	89 5f       	subi	r24, 0xF9	; 249
    cff8:	9d 4f       	sbci	r25, 0xFD	; 253
    cffa:	af 4f       	sbci	r26, 0xFF	; 255
    cffc:	bf 4f       	sbci	r27, 0xFF	; 255
    cffe:	79 e0       	ldi	r23, 0x09	; 9
    d000:	b6 95       	lsr	r27
    d002:	a7 95       	ror	r26
    d004:	97 95       	ror	r25
    d006:	87 95       	ror	r24
    d008:	7a 95       	dec	r23
    d00a:	d1 f7       	brne	.-12     	; 0xd000 <f_mkfs+0x2b2>
    d00c:	88 8b       	std	Y+16, r24	; 0x10
    d00e:	99 8b       	std	Y+17, r25	; 0x11
    d010:	aa 8b       	std	Y+18, r26	; 0x12
    d012:	bb 8b       	std	Y+19, r27	; 0x13
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
    d014:	da 01       	movw	r26, r20
    d016:	c9 01       	movw	r24, r18
    d018:	86 5f       	subi	r24, 0xF6	; 246
    d01a:	9f 4f       	sbci	r25, 0xFF	; 255
    d01c:	a1 09       	sbc	r26, r1
    d01e:	b1 09       	sbc	r27, r1
    d020:	00 97       	sbiw	r24, 0x00	; 0
    d022:	af 4f       	sbci	r26, 0xFF	; 255
    d024:	bf 40       	sbci	r27, 0x0F	; 15
    d026:	08 f0       	brcs	.+2      	; 0xd02a <f_mkfs+0x2dc>
    d028:	15 cf       	rjmp	.-470    	; 0xce54 <f_mkfs+0x106>
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
    d02a:	1c 8e       	std	Y+28, r1	; 0x1c
    d02c:	1d 8e       	std	Y+29, r1	; 0x1d
    d02e:	1e 8e       	std	Y+30, r1	; 0x1e
    d030:	1f 8e       	std	Y+31, r1	; 0x1f
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
				sz_rsv = 32;	/* Number of reserved sectors */
    d032:	00 e2       	ldi	r16, 0x20	; 32
    d034:	10 e0       	ldi	r17, 0x00	; 0
    d036:	20 e0       	ldi	r18, 0x00	; 0
    d038:	30 e0       	ldi	r19, 0x00	; 0
    d03a:	08 a3       	std	Y+32, r16	; 0x20
    d03c:	19 a3       	std	Y+33, r17	; 0x21
    d03e:	2a a3       	std	Y+34, r18	; 0x22
    d040:	3b a3       	std	Y+35, r19	; 0x23
    d042:	4e c0       	rjmp	.+156    	; 0xd0e0 <f_mkfs+0x392>
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
    d044:	a0 e0       	ldi	r26, 0x00	; 0
    d046:	b0 e0       	ldi	r27, 0x00	; 0
    d048:	0b a9       	ldd	r16, Y+51	; 0x33
    d04a:	1c a9       	ldd	r17, Y+52	; 0x34
    d04c:	2d a9       	ldd	r18, Y+53	; 0x35
    d04e:	3e a9       	ldd	r19, Y+54	; 0x36
    d050:	08 17       	cp	r16, r24
    d052:	19 07       	cpc	r17, r25
    d054:	2a 07       	cpc	r18, r26
    d056:	3b 07       	cpc	r19, r27
    d058:	40 f0       	brcs	.+16     	; 0xd06a <f_mkfs+0x31c>
    d05a:	44 0c       	add	r4, r4
    d05c:	55 1c       	adc	r5, r5
    d05e:	66 1c       	adc	r6, r6
    d060:	77 1c       	adc	r7, r7
    d062:	81 91       	ld	r24, Z+
    d064:	91 91       	ld	r25, Z+
    d066:	00 97       	sbiw	r24, 0x00	; 0
    d068:	69 f7       	brne	.-38     	; 0xd044 <f_mkfs+0x2f6>
				}
				n_clst = sz_vol / pau;
    d06a:	6b 85       	ldd	r22, Y+11	; 0x0b
    d06c:	7c 85       	ldd	r23, Y+12	; 0x0c
    d06e:	8d 85       	ldd	r24, Y+13	; 0x0d
    d070:	9e 85       	ldd	r25, Y+14	; 0x0e
    d072:	a3 01       	movw	r20, r6
    d074:	92 01       	movw	r18, r4
    d076:	0e 94 54 e8 	call	0x1d0a8	; 0x1d0a8 <__udivmodsi4>
				if (n_clst > MAX_FAT12) {
    d07a:	26 3f       	cpi	r18, 0xF6	; 246
    d07c:	1f e0       	ldi	r17, 0x0F	; 15
    d07e:	31 07       	cpc	r19, r17
    d080:	41 05       	cpc	r20, r1
    d082:	51 05       	cpc	r21, r1
    d084:	08 f4       	brcc	.+2      	; 0xd088 <f_mkfs+0x33a>
    d086:	f9 c0       	rjmp	.+498    	; 0xd27a <f_mkfs+0x52c>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
    d088:	da 01       	movw	r26, r20
    d08a:	c9 01       	movw	r24, r18
    d08c:	02 96       	adiw	r24, 0x02	; 2
    d08e:	a1 1d       	adc	r26, r1
    d090:	b1 1d       	adc	r27, r1
    d092:	88 0f       	add	r24, r24
    d094:	99 1f       	adc	r25, r25
    d096:	aa 1f       	adc	r26, r26
    d098:	bb 1f       	adc	r27, r27
    d09a:	22 e0       	ldi	r18, 0x02	; 2
    d09c:	2f 87       	std	Y+15, r18	; 0x0f
				} else {
					fmt = FS_FAT12;
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
    d09e:	81 50       	subi	r24, 0x01	; 1
    d0a0:	9e 4f       	sbci	r25, 0xFE	; 254
    d0a2:	af 4f       	sbci	r26, 0xFF	; 255
    d0a4:	bf 4f       	sbci	r27, 0xFF	; 255
    d0a6:	8c 01       	movw	r16, r24
    d0a8:	9d 01       	movw	r18, r26
    d0aa:	a9 e0       	ldi	r26, 0x09	; 9
    d0ac:	36 95       	lsr	r19
    d0ae:	27 95       	ror	r18
    d0b0:	17 95       	ror	r17
    d0b2:	07 95       	ror	r16
    d0b4:	aa 95       	dec	r26
    d0b6:	d1 f7       	brne	.-12     	; 0xd0ac <f_mkfs+0x35e>
    d0b8:	08 8b       	std	Y+16, r16	; 0x10
    d0ba:	19 8b       	std	Y+17, r17	; 0x11
    d0bc:	2a 8b       	std	Y+18, r18	; 0x12
    d0be:	3b 8b       	std	Y+19, r19	; 0x13
				sz_rsv = 1;						/* Number of reserved sectors */
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
    d0c0:	20 e2       	ldi	r18, 0x20	; 32
    d0c2:	30 e0       	ldi	r19, 0x00	; 0
    d0c4:	40 e0       	ldi	r20, 0x00	; 0
    d0c6:	50 e0       	ldi	r21, 0x00	; 0
    d0c8:	2c 8f       	std	Y+28, r18	; 0x1c
    d0ca:	3d 8f       	std	Y+29, r19	; 0x1d
    d0cc:	4e 8f       	std	Y+30, r20	; 0x1e
    d0ce:	5f 8f       	std	Y+31, r21	; 0x1f
				} else {
					fmt = FS_FAT12;
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
				sz_rsv = 1;						/* Number of reserved sectors */
    d0d0:	81 e0       	ldi	r24, 0x01	; 1
    d0d2:	90 e0       	ldi	r25, 0x00	; 0
    d0d4:	a0 e0       	ldi	r26, 0x00	; 0
    d0d6:	b0 e0       	ldi	r27, 0x00	; 0
    d0d8:	88 a3       	std	Y+32, r24	; 0x20
    d0da:	99 a3       	std	Y+33, r25	; 0x21
    d0dc:	aa a3       	std	Y+34, r26	; 0x22
    d0de:	bb a3       	std	Y+35, r27	; 0x23
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
    d0e0:	08 a1       	ldd	r16, Y+32	; 0x20
    d0e2:	19 a1       	ldd	r17, Y+33	; 0x21
    d0e4:	2a a1       	ldd	r18, Y+34	; 0x22
    d0e6:	3b a1       	ldd	r19, Y+35	; 0x23
    d0e8:	8c 89       	ldd	r24, Y+20	; 0x14
    d0ea:	9d 89       	ldd	r25, Y+21	; 0x15
    d0ec:	ae 89       	ldd	r26, Y+22	; 0x16
    d0ee:	bf 89       	ldd	r27, Y+23	; 0x17
    d0f0:	08 0f       	add	r16, r24
    d0f2:	19 1f       	adc	r17, r25
    d0f4:	2a 1f       	adc	r18, r26
    d0f6:	3b 1f       	adc	r19, r27
    d0f8:	08 8f       	std	Y+24, r16	; 0x18
    d0fa:	19 8f       	std	Y+25, r17	; 0x19
    d0fc:	2a 8f       	std	Y+26, r18	; 0x1a
    d0fe:	3b 8f       	std	Y+27, r19	; 0x1b
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
    d100:	88 89       	ldd	r24, Y+16	; 0x10
    d102:	99 89       	ldd	r25, Y+17	; 0x11
    d104:	aa 89       	ldd	r26, Y+18	; 0x12
    d106:	bb 89       	ldd	r27, Y+19	; 0x13
    d108:	0c 8d       	ldd	r16, Y+28	; 0x1c
    d10a:	1d 8d       	ldd	r17, Y+29	; 0x1d
    d10c:	2e 8d       	ldd	r18, Y+30	; 0x1e
    d10e:	3f 8d       	ldd	r19, Y+31	; 0x1f
    d110:	80 0f       	add	r24, r16
    d112:	91 1f       	adc	r25, r17
    d114:	a2 1f       	adc	r26, r18
    d116:	b3 1f       	adc	r27, r19
    d118:	28 8d       	ldd	r18, Y+24	; 0x18
    d11a:	39 8d       	ldd	r19, Y+25	; 0x19
    d11c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    d11e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    d120:	82 0f       	add	r24, r18
    d122:	93 1f       	adc	r25, r19
    d124:	a4 1f       	adc	r26, r20
    d126:	b5 1f       	adc	r27, r21

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
    d128:	4b ad       	ldd	r20, Y+59	; 0x3b
    d12a:	5c ad       	ldd	r21, Y+60	; 0x3c
    d12c:	6d ad       	ldd	r22, Y+61	; 0x3d
    d12e:	7e ad       	ldd	r23, Y+62	; 0x3e
    d130:	48 0f       	add	r20, r24
    d132:	59 1f       	adc	r21, r25
    d134:	6a 1f       	adc	r22, r26
    d136:	7b 1f       	adc	r23, r27
    d138:	0f a9       	ldd	r16, Y+55	; 0x37
    d13a:	18 ad       	ldd	r17, Y+56	; 0x38
    d13c:	29 ad       	ldd	r18, Y+57	; 0x39
    d13e:	3a ad       	ldd	r19, Y+58	; 0x3a
    d140:	40 23       	and	r20, r16
    d142:	51 23       	and	r21, r17
    d144:	62 23       	and	r22, r18
    d146:	73 23       	and	r23, r19
    d148:	48 1b       	sub	r20, r24
    d14a:	59 0b       	sbc	r21, r25
    d14c:	6a 0b       	sbc	r22, r26
    d14e:	7b 0b       	sbc	r23, r27
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
    d150:	1f 85       	ldd	r17, Y+15	; 0x0f
    d152:	13 30       	cpi	r17, 0x03	; 3
    d154:	09 f0       	breq	.+2      	; 0xd158 <f_mkfs+0x40a>
    d156:	a4 c0       	rjmp	.+328    	; 0xd2a0 <f_mkfs+0x552>
				sz_rsv += n; b_fat += n;
    d158:	08 a1       	ldd	r16, Y+32	; 0x20
    d15a:	19 a1       	ldd	r17, Y+33	; 0x21
    d15c:	2a a1       	ldd	r18, Y+34	; 0x22
    d15e:	3b a1       	ldd	r19, Y+35	; 0x23
    d160:	04 0f       	add	r16, r20
    d162:	15 1f       	adc	r17, r21
    d164:	26 1f       	adc	r18, r22
    d166:	37 1f       	adc	r19, r23
    d168:	08 a3       	std	Y+32, r16	; 0x20
    d16a:	19 a3       	std	Y+33, r17	; 0x21
    d16c:	2a a3       	std	Y+34, r18	; 0x22
    d16e:	3b a3       	std	Y+35, r19	; 0x23
    d170:	08 8d       	ldd	r16, Y+24	; 0x18
    d172:	19 8d       	ldd	r17, Y+25	; 0x19
    d174:	2a 8d       	ldd	r18, Y+26	; 0x1a
    d176:	3b 8d       	ldd	r19, Y+27	; 0x1b
    d178:	04 0f       	add	r16, r20
    d17a:	15 1f       	adc	r17, r21
    d17c:	26 1f       	adc	r18, r22
    d17e:	37 1f       	adc	r19, r23
    d180:	08 8f       	std	Y+24, r16	; 0x18
    d182:	19 8f       	std	Y+25, r17	; 0x19
    d184:	2a 8f       	std	Y+26, r18	; 0x1a
    d186:	3b 8f       	std	Y+27, r19	; 0x1b
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
    d188:	b3 01       	movw	r22, r6
    d18a:	a2 01       	movw	r20, r4
    d18c:	f4 e0       	ldi	r31, 0x04	; 4
    d18e:	44 0f       	add	r20, r20
    d190:	55 1f       	adc	r21, r21
    d192:	66 1f       	adc	r22, r22
    d194:	77 1f       	adc	r23, r23
    d196:	fa 95       	dec	r31
    d198:	d1 f7       	brne	.-12     	; 0xd18e <f_mkfs+0x440>
    d19a:	0c 89       	ldd	r16, Y+20	; 0x14
    d19c:	1d 89       	ldd	r17, Y+21	; 0x15
    d19e:	2e 89       	ldd	r18, Y+22	; 0x16
    d1a0:	3f 89       	ldd	r19, Y+23	; 0x17
    d1a2:	40 1b       	sub	r20, r16
    d1a4:	51 0b       	sbc	r21, r17
    d1a6:	62 0b       	sbc	r22, r18
    d1a8:	73 0b       	sbc	r23, r19
    d1aa:	84 0f       	add	r24, r20
    d1ac:	95 1f       	adc	r25, r21
    d1ae:	a6 1f       	adc	r26, r22
    d1b0:	b7 1f       	adc	r27, r23
    d1b2:	0b 85       	ldd	r16, Y+11	; 0x0b
    d1b4:	1c 85       	ldd	r17, Y+12	; 0x0c
    d1b6:	2d 85       	ldd	r18, Y+13	; 0x0d
    d1b8:	3e 85       	ldd	r19, Y+14	; 0x0e
    d1ba:	08 17       	cp	r16, r24
    d1bc:	19 07       	cpc	r17, r25
    d1be:	2a 07       	cpc	r18, r26
    d1c0:	3b 07       	cpc	r19, r27
    d1c2:	08 f4       	brcc	.+2      	; 0xd1c6 <f_mkfs+0x478>
    d1c4:	47 ce       	rjmp	.-882    	; 0xce54 <f_mkfs+0x106>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
    d1c6:	d9 01       	movw	r26, r18
    d1c8:	c8 01       	movw	r24, r16
    d1ca:	28 a1       	ldd	r18, Y+32	; 0x20
    d1cc:	39 a1       	ldd	r19, Y+33	; 0x21
    d1ce:	4a a1       	ldd	r20, Y+34	; 0x22
    d1d0:	5b a1       	ldd	r21, Y+35	; 0x23
    d1d2:	82 1b       	sub	r24, r18
    d1d4:	93 0b       	sbc	r25, r19
    d1d6:	a4 0b       	sbc	r26, r20
    d1d8:	b5 0b       	sbc	r27, r21
    d1da:	08 89       	ldd	r16, Y+16	; 0x10
    d1dc:	19 89       	ldd	r17, Y+17	; 0x11
    d1de:	2a 89       	ldd	r18, Y+18	; 0x12
    d1e0:	3b 89       	ldd	r19, Y+19	; 0x13
    d1e2:	80 1b       	sub	r24, r16
    d1e4:	91 0b       	sbc	r25, r17
    d1e6:	a2 0b       	sbc	r26, r18
    d1e8:	b3 0b       	sbc	r27, r19
    d1ea:	bc 01       	movw	r22, r24
    d1ec:	cd 01       	movw	r24, r26
    d1ee:	2c 8d       	ldd	r18, Y+28	; 0x1c
    d1f0:	3d 8d       	ldd	r19, Y+29	; 0x1d
    d1f2:	4e 8d       	ldd	r20, Y+30	; 0x1e
    d1f4:	5f 8d       	ldd	r21, Y+31	; 0x1f
    d1f6:	62 1b       	sub	r22, r18
    d1f8:	73 0b       	sbc	r23, r19
    d1fa:	84 0b       	sbc	r24, r20
    d1fc:	95 0b       	sbc	r25, r21
    d1fe:	a3 01       	movw	r20, r6
    d200:	92 01       	movw	r18, r4
    d202:	0e 94 54 e8 	call	0x1d0a8	; 0x1d0a8 <__udivmodsi4>
    d206:	28 a7       	std	Y+40, r18	; 0x28
    d208:	39 a7       	std	Y+41, r19	; 0x29
    d20a:	4a a7       	std	Y+42, r20	; 0x2a
    d20c:	5b a7       	std	Y+43, r21	; 0x2b
			if (fmt == FS_FAT32) {
    d20e:	3f 85       	ldd	r19, Y+15	; 0x0f
    d210:	33 30       	cpi	r19, 0x03	; 3
    d212:	09 f4       	brne	.+2      	; 0xd216 <f_mkfs+0x4c8>
    d214:	52 c0       	rjmp	.+164    	; 0xd2ba <f_mkfs+0x56c>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
					return FR_MKFS_ABORTED;
				}
			}
			if (fmt == FS_FAT16) {
    d216:	ff 85       	ldd	r31, Y+15	; 0x0f
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
    d218:	08 a5       	ldd	r16, Y+40	; 0x28
    d21a:	19 a5       	ldd	r17, Y+41	; 0x29
    d21c:	2a a5       	ldd	r18, Y+42	; 0x2a
    d21e:	3b a5       	ldd	r19, Y+43	; 0x2b
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
					return FR_MKFS_ABORTED;
				}
			}
			if (fmt == FS_FAT16) {
    d220:	f2 30       	cpi	r31, 0x02	; 2
    d222:	09 f0       	breq	.+2      	; 0xd226 <f_mkfs+0x4d8>
    d224:	83 c0       	rjmp	.+262    	; 0xd32c <f_mkfs+0x5de>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
    d226:	06 3f       	cpi	r16, 0xF6	; 246
    d228:	4f ef       	ldi	r20, 0xFF	; 255
    d22a:	14 07       	cpc	r17, r20
    d22c:	21 05       	cpc	r18, r1
    d22e:	31 05       	cpc	r19, r1
    d230:	08 f4       	brcc	.+2      	; 0xd234 <f_mkfs+0x4e6>
    d232:	5f c0       	rjmp	.+190    	; 0xd2f2 <f_mkfs+0x5a4>
					if (!au && (pau * 2) <= 64) {
    d234:	81 14       	cp	r8, r1
    d236:	91 04       	cpc	r9, r1
    d238:	a1 04       	cpc	r10, r1
    d23a:	b1 04       	cpc	r11, r1
    d23c:	09 f0       	breq	.+2      	; 0xd240 <f_mkfs+0x4f2>
    d23e:	e8 c2       	rjmp	.+1488   	; 0xd810 <f_mkfs+0xac2>
    d240:	d3 01       	movw	r26, r6
    d242:	c2 01       	movw	r24, r4
    d244:	88 0f       	add	r24, r24
    d246:	99 1f       	adc	r25, r25
    d248:	aa 1f       	adc	r26, r26
    d24a:	bb 1f       	adc	r27, r27
    d24c:	81 34       	cpi	r24, 0x41	; 65
    d24e:	91 05       	cpc	r25, r1
    d250:	a1 05       	cpc	r26, r1
    d252:	b1 05       	cpc	r27, r1
    d254:	08 f0       	brcs	.+2      	; 0xd258 <f_mkfs+0x50a>
    d256:	d0 c2       	rjmp	.+1440   	; 0xd7f8 <f_mkfs+0xaaa>
    d258:	4c 01       	movw	r8, r24
    d25a:	5d 01       	movw	r10, r26
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
				sz_rsv = 32;	/* Number of reserved sectors */
				sz_dir = 0;		/* No static directory */
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
    d25c:	81 14       	cp	r8, r1
    d25e:	91 04       	cpc	r9, r1
    d260:	a1 04       	cpc	r10, r1
    d262:	b1 04       	cpc	r11, r1
    d264:	39 f4       	brne	.+14     	; 0xd274 <f_mkfs+0x526>
    d266:	e0 e8       	ldi	r30, 0x80	; 128
    d268:	f2 e0       	ldi	r31, 0x02	; 2
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
    d26a:	41 2c       	mov	r4, r1
    d26c:	51 2c       	mov	r5, r1
    d26e:	32 01       	movw	r6, r4
    d270:	43 94       	inc	r4
    d272:	f7 ce       	rjmp	.-530    	; 0xd062 <f_mkfs+0x314>
    d274:	24 01       	movw	r4, r8
    d276:	35 01       	movw	r6, r10
    d278:	f8 ce       	rjmp	.-528    	; 0xd06a <f_mkfs+0x31c>
				n_clst = sz_vol / pau;
				if (n_clst > MAX_FAT12) {
					n = n_clst * 2 + 4;		/* FAT size [byte] */
				} else {
					fmt = FS_FAT12;
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
    d27a:	a3 e0       	ldi	r26, 0x03	; 3
    d27c:	b0 e0       	ldi	r27, 0x00	; 0
    d27e:	0e 94 a1 e8 	call	0x1d142	; 0x1d142 <__muluhisi3>
    d282:	dc 01       	movw	r26, r24
    d284:	cb 01       	movw	r24, r22
    d286:	01 96       	adiw	r24, 0x01	; 1
    d288:	a1 1d       	adc	r26, r1
    d28a:	b1 1d       	adc	r27, r1
    d28c:	b6 95       	lsr	r27
    d28e:	a7 95       	ror	r26
    d290:	97 95       	ror	r25
    d292:	87 95       	ror	r24
    d294:	03 96       	adiw	r24, 0x03	; 3
    d296:	a1 1d       	adc	r26, r1
    d298:	b1 1d       	adc	r27, r1
				}
				n_clst = sz_vol / pau;
				if (n_clst > MAX_FAT12) {
					n = n_clst * 2 + 4;		/* FAT size [byte] */
				} else {
					fmt = FS_FAT12;
    d29a:	31 e0       	ldi	r19, 0x01	; 1
    d29c:	3f 87       	std	Y+15, r19	; 0x0f
    d29e:	ff ce       	rjmp	.-514    	; 0xd09e <f_mkfs+0x350>
			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
				sz_rsv += n; b_fat += n;
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
    d2a0:	08 89       	ldd	r16, Y+16	; 0x10
    d2a2:	19 89       	ldd	r17, Y+17	; 0x11
    d2a4:	2a 89       	ldd	r18, Y+18	; 0x12
    d2a6:	3b 89       	ldd	r19, Y+19	; 0x13
    d2a8:	04 0f       	add	r16, r20
    d2aa:	15 1f       	adc	r17, r21
    d2ac:	26 1f       	adc	r18, r22
    d2ae:	37 1f       	adc	r19, r23
    d2b0:	08 8b       	std	Y+16, r16	; 0x10
    d2b2:	19 8b       	std	Y+17, r17	; 0x11
    d2b4:	2a 8b       	std	Y+18, r18	; 0x12
    d2b6:	3b 8b       	std	Y+19, r19	; 0x13
    d2b8:	67 cf       	rjmp	.-306    	; 0xd188 <f_mkfs+0x43a>

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
			if (fmt == FS_FAT32) {
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
    d2ba:	88 a5       	ldd	r24, Y+40	; 0x28
    d2bc:	99 a5       	ldd	r25, Y+41	; 0x29
    d2be:	aa a5       	ldd	r26, Y+42	; 0x2a
    d2c0:	bb a5       	ldd	r27, Y+43	; 0x2b
    d2c2:	86 3f       	cpi	r24, 0xF6	; 246
    d2c4:	9f 4f       	sbci	r25, 0xFF	; 255
    d2c6:	a1 05       	cpc	r26, r1
    d2c8:	b1 05       	cpc	r27, r1
    d2ca:	c8 f5       	brcc	.+114    	; 0xd33e <f_mkfs+0x5f0>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
    d2cc:	81 14       	cp	r8, r1
    d2ce:	91 04       	cpc	r9, r1
    d2d0:	a1 04       	cpc	r10, r1
    d2d2:	b1 04       	cpc	r11, r1
    d2d4:	09 f0       	breq	.+2      	; 0xd2d8 <f_mkfs+0x58a>
    d2d6:	be cd       	rjmp	.-1156   	; 0xce54 <f_mkfs+0x106>
    d2d8:	53 01       	movw	r10, r6
    d2da:	42 01       	movw	r8, r4
    d2dc:	b6 94       	lsr	r11
    d2de:	a7 94       	ror	r10
    d2e0:	97 94       	ror	r9
    d2e2:	87 94       	ror	r8
    d2e4:	81 14       	cp	r8, r1
    d2e6:	91 04       	cpc	r9, r1
    d2e8:	a1 04       	cpc	r10, r1
    d2ea:	b1 04       	cpc	r11, r1
    d2ec:	09 f4       	brne	.+2      	; 0xd2f0 <f_mkfs+0x5a2>
    d2ee:	b2 cd       	rjmp	.-1180   	; 0xce54 <f_mkfs+0x106>
    d2f0:	4e ce       	rjmp	.-868    	; 0xcf8e <f_mkfs+0x240>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
					return FR_MKFS_ABORTED;
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
    d2f2:	88 a5       	ldd	r24, Y+40	; 0x28
    d2f4:	99 a5       	ldd	r25, Y+41	; 0x29
    d2f6:	aa a5       	ldd	r26, Y+42	; 0x2a
    d2f8:	bb a5       	ldd	r27, Y+43	; 0x2b
    d2fa:	86 3f       	cpi	r24, 0xF6	; 246
    d2fc:	9f 40       	sbci	r25, 0x0F	; 15
    d2fe:	a1 05       	cpc	r26, r1
    d300:	b1 05       	cpc	r27, r1
    d302:	e8 f4       	brcc	.+58     	; 0xd33e <f_mkfs+0x5f0>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
    d304:	81 14       	cp	r8, r1
    d306:	91 04       	cpc	r9, r1
    d308:	a1 04       	cpc	r10, r1
    d30a:	b1 04       	cpc	r11, r1
    d30c:	09 f0       	breq	.+2      	; 0xd310 <f_mkfs+0x5c2>
    d30e:	a2 cd       	rjmp	.-1212   	; 0xce54 <f_mkfs+0x106>
    d310:	53 01       	movw	r10, r6
    d312:	42 01       	movw	r8, r4
    d314:	88 0c       	add	r8, r8
    d316:	99 1c       	adc	r9, r9
    d318:	aa 1c       	adc	r10, r10
    d31a:	bb 1c       	adc	r11, r11
    d31c:	f1 e8       	ldi	r31, 0x81	; 129
    d31e:	8f 16       	cp	r8, r31
    d320:	91 04       	cpc	r9, r1
    d322:	a1 04       	cpc	r10, r1
    d324:	b1 04       	cpc	r11, r1
    d326:	08 f0       	brcs	.+2      	; 0xd32a <f_mkfs+0x5dc>
    d328:	95 cd       	rjmp	.-1238   	; 0xce54 <f_mkfs+0x106>
    d32a:	98 cf       	rjmp	.-208    	; 0xd25c <f_mkfs+0x50e>
					return FR_MKFS_ABORTED;
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
    d32c:	06 3f       	cpi	r16, 0xF6	; 246
    d32e:	4f e0       	ldi	r20, 0x0F	; 15
    d330:	14 07       	cpc	r17, r20
    d332:	21 05       	cpc	r18, r1
    d334:	31 05       	cpc	r19, r1
    d336:	08 f0       	brcs	.+2      	; 0xd33a <f_mkfs+0x5ec>
    d338:	8d cd       	rjmp	.-1254   	; 0xce54 <f_mkfs+0x106>
    d33a:	51 e0       	ldi	r21, 0x01	; 1
    d33c:	5f 87       	std	Y+15, r21	; 0x0f
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
    d33e:	40 e0       	ldi	r20, 0x00	; 0
    d340:	52 e0       	ldi	r21, 0x02	; 2
    d342:	60 e0       	ldi	r22, 0x00	; 0
    d344:	70 e0       	ldi	r23, 0x00	; 0
    d346:	c6 01       	movw	r24, r12
    d348:	0e 94 89 45 	call	0x8b12	; 0x8b12 <mem_set>
    d34c:	4b e0       	ldi	r20, 0x0B	; 11
    d34e:	50 e0       	ldi	r21, 0x00	; 0
    d350:	63 ed       	ldi	r22, 0xD3	; 211
    d352:	77 e0       	ldi	r23, 0x07	; 7
    d354:	c6 01       	movw	r24, r12
    d356:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <mem_cpy.part.0>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d35a:	d6 01       	movw	r26, r12
    d35c:	1b 96       	adiw	r26, 0x0b	; 11
    d35e:	1c 92       	st	X, r1
    d360:	1b 97       	sbiw	r26, 0x0b	; 11
	*ptr++ = (BYTE)val;
    d362:	82 e0       	ldi	r24, 0x02	; 2
    d364:	1c 96       	adiw	r26, 0x0c	; 12
    d366:	8c 93       	st	X, r24
    d368:	1c 97       	sbiw	r26, 0x0c	; 12
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
    d36a:	1d 96       	adiw	r26, 0x0d	; 13
    d36c:	4c 92       	st	X, r4
    d36e:	1d 97       	sbiw	r26, 0x0d	; 13

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d370:	e8 a1       	ldd	r30, Y+32	; 0x20
    d372:	1e 96       	adiw	r26, 0x0e	; 14
    d374:	ec 93       	st	X, r30
    d376:	1e 97       	sbiw	r26, 0x0e	; 14
	*ptr++ = (BYTE)val;
    d378:	f9 a1       	ldd	r31, Y+33	; 0x21
    d37a:	1f 96       	adiw	r26, 0x0f	; 15
    d37c:	fc 93       	st	X, r31
    d37e:	1f 97       	sbiw	r26, 0x0f	; 15
		mem_set(buf, 0, ss);
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
    d380:	81 e0       	ldi	r24, 0x01	; 1
    d382:	50 96       	adiw	r26, 0x10	; 16
    d384:	8c 93       	st	X, r24
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
    d386:	0f 85       	ldd	r16, Y+15	; 0x0f
    d388:	03 30       	cpi	r16, 0x03	; 3
    d38a:	11 f0       	breq	.+4      	; 0xd390 <f_mkfs+0x642>
    d38c:	82 e0       	ldi	r24, 0x02	; 2
    d38e:	01 c0       	rjmp	.+2      	; 0xd392 <f_mkfs+0x644>
    d390:	80 e0       	ldi	r24, 0x00	; 0

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d392:	d6 01       	movw	r26, r12
    d394:	51 96       	adiw	r26, 0x11	; 17
    d396:	1c 92       	st	X, r1
    d398:	51 97       	sbiw	r26, 0x11	; 17
	*ptr++ = (BYTE)val;
    d39a:	52 96       	adiw	r26, 0x12	; 18
    d39c:	8c 93       	st	X, r24
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
		if (sz_vol < 0x10000) {
    d39e:	49 81       	ldd	r20, Y+1	; 0x01
    d3a0:	5a 81       	ldd	r21, Y+2	; 0x02
    d3a2:	6b 81       	ldd	r22, Y+3	; 0x03
    d3a4:	7c 81       	ldd	r23, Y+4	; 0x04
    d3a6:	41 15       	cp	r20, r1
    d3a8:	51 05       	cpc	r21, r1
    d3aa:	b1 e0       	ldi	r27, 0x01	; 1
    d3ac:	6b 07       	cpc	r22, r27
    d3ae:	71 05       	cpc	r23, r1
    d3b0:	20 f4       	brcc	.+8      	; 0xd3ba <f_mkfs+0x66c>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d3b2:	f6 01       	movw	r30, r12
    d3b4:	43 8b       	std	Z+19, r20	; 0x13
	*ptr++ = (BYTE)val;
    d3b6:	54 8b       	std	Z+20, r21	; 0x14
    d3b8:	04 c0       	rjmp	.+8      	; 0xd3c2 <f_mkfs+0x674>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
		if (sz_vol < 0x10000) {
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
    d3ba:	c6 01       	movw	r24, r12
    d3bc:	80 96       	adiw	r24, 0x20	; 32
    d3be:	0e 94 83 45 	call	0x8b06	; 0x8b06 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
    d3c2:	88 ef       	ldi	r24, 0xF8	; 248
    d3c4:	d6 01       	movw	r26, r12
    d3c6:	55 96       	adiw	r26, 0x15	; 21
    d3c8:	8c 93       	st	X, r24
    d3ca:	55 97       	sbiw	r26, 0x15	; 21

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d3cc:	8f e3       	ldi	r24, 0x3F	; 63
    d3ce:	58 96       	adiw	r26, 0x18	; 24
    d3d0:	8c 93       	st	X, r24
    d3d2:	58 97       	sbiw	r26, 0x18	; 24
	*ptr++ = (BYTE)val;
    d3d4:	59 96       	adiw	r26, 0x19	; 25
    d3d6:	1c 92       	st	X, r1
    d3d8:	59 97       	sbiw	r26, 0x19	; 25

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d3da:	8f ef       	ldi	r24, 0xFF	; 255
    d3dc:	5a 96       	adiw	r26, 0x1a	; 26
    d3de:	8c 93       	st	X, r24
    d3e0:	5a 97       	sbiw	r26, 0x1a	; 26
	*ptr++ = (BYTE)val;
    d3e2:	5b 96       	adiw	r26, 0x1b	; 27
    d3e4:	1c 92       	st	X, r1
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
    d3e6:	4c 89       	ldd	r20, Y+20	; 0x14
    d3e8:	5d 89       	ldd	r21, Y+21	; 0x15
    d3ea:	6e 89       	ldd	r22, Y+22	; 0x16
    d3ec:	7f 89       	ldd	r23, Y+23	; 0x17
    d3ee:	c6 01       	movw	r24, r12
    d3f0:	4c 96       	adiw	r24, 0x1c	; 28
    d3f2:	0e 94 83 45 	call	0x8b06	; 0x8b06 <st_dword>
		if (fmt == FS_FAT32) {
    d3f6:	bf 85       	ldd	r27, Y+15	; 0x0f
    d3f8:	b3 30       	cpi	r27, 0x03	; 3
    d3fa:	61 f5       	brne	.+88     	; 0xd454 <f_mkfs+0x706>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
    d3fc:	0e 94 23 73 	call	0xe646	; 0xe646 <get_fattime>
    d400:	ab 01       	movw	r20, r22
    d402:	bc 01       	movw	r22, r24
    d404:	c6 01       	movw	r24, r12
    d406:	8d 5b       	subi	r24, 0xBD	; 189
    d408:	9f 4f       	sbci	r25, 0xFF	; 255
    d40a:	0e 94 83 45 	call	0x8b06	; 0x8b06 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
    d40e:	48 89       	ldd	r20, Y+16	; 0x10
    d410:	59 89       	ldd	r21, Y+17	; 0x11
    d412:	6a 89       	ldd	r22, Y+18	; 0x12
    d414:	7b 89       	ldd	r23, Y+19	; 0x13
    d416:	c6 01       	movw	r24, r12
    d418:	84 96       	adiw	r24, 0x24	; 36
    d41a:	0e 94 83 45 	call	0x8b06	; 0x8b06 <st_dword>
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d41e:	82 e0       	ldi	r24, 0x02	; 2
    d420:	f6 01       	movw	r30, r12
    d422:	84 a7       	std	Z+44, r24	; 0x2c
	*ptr++ = (BYTE)val; val >>= 8;
    d424:	15 a6       	std	Z+45, r1	; 0x2d
	*ptr++ = (BYTE)val; val >>= 8;
    d426:	16 a6       	std	Z+46, r1	; 0x2e
	*ptr++ = (BYTE)val;
    d428:	17 a6       	std	Z+47, r1	; 0x2f

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d42a:	81 e0       	ldi	r24, 0x01	; 1
    d42c:	80 ab       	std	Z+48, r24	; 0x30
	*ptr++ = (BYTE)val;
    d42e:	11 aa       	std	Z+49, r1	; 0x31

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d430:	86 e0       	ldi	r24, 0x06	; 6
    d432:	82 ab       	std	Z+50, r24	; 0x32
	*ptr++ = (BYTE)val;
    d434:	13 aa       	std	Z+51, r1	; 0x33
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
    d436:	80 e8       	ldi	r24, 0x80	; 128
    d438:	e0 5c       	subi	r30, 0xC0	; 192
    d43a:	ff 4f       	sbci	r31, 0xFF	; 255
    d43c:	80 83       	st	Z, r24
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
    d43e:	89 e2       	ldi	r24, 0x29	; 41
    d440:	32 96       	adiw	r30, 0x02	; 2
    d442:	80 83       	st	Z, r24
    d444:	43 e1       	ldi	r20, 0x13	; 19
    d446:	50 e0       	ldi	r21, 0x00	; 0
    d448:	6f ed       	ldi	r22, 0xDF	; 223
    d44a:	77 e0       	ldi	r23, 0x07	; 7
    d44c:	c6 01       	movw	r24, r12
    d44e:	89 5b       	subi	r24, 0xB9	; 185
    d450:	9f 4f       	sbci	r25, 0xFF	; 255
    d452:	1e c0       	rjmp	.+60     	; 0xd490 <f_mkfs+0x742>
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
    d454:	0e 94 23 73 	call	0xe646	; 0xe646 <get_fattime>
    d458:	ab 01       	movw	r20, r22
    d45a:	bc 01       	movw	r22, r24
    d45c:	c6 01       	movw	r24, r12
    d45e:	87 96       	adiw	r24, 0x27	; 39
    d460:	0e 94 83 45 	call	0x8b06	; 0x8b06 <st_dword>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d464:	e8 89       	ldd	r30, Y+16	; 0x10
    d466:	d6 01       	movw	r26, r12
    d468:	56 96       	adiw	r26, 0x16	; 22
    d46a:	ec 93       	st	X, r30
    d46c:	56 97       	sbiw	r26, 0x16	; 22
	*ptr++ = (BYTE)val;
    d46e:	f9 89       	ldd	r31, Y+17	; 0x11
    d470:	57 96       	adiw	r26, 0x17	; 23
    d472:	fc 93       	st	X, r31
    d474:	57 97       	sbiw	r26, 0x17	; 23
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
    d476:	80 e8       	ldi	r24, 0x80	; 128
    d478:	94 96       	adiw	r26, 0x24	; 36
    d47a:	8c 93       	st	X, r24
    d47c:	94 97       	sbiw	r26, 0x24	; 36
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
    d47e:	89 e2       	ldi	r24, 0x29	; 41
    d480:	96 96       	adiw	r26, 0x26	; 38
    d482:	8c 93       	st	X, r24
    d484:	43 e1       	ldi	r20, 0x13	; 19
    d486:	50 e0       	ldi	r21, 0x00	; 0
    d488:	63 ef       	ldi	r22, 0xF3	; 243
    d48a:	77 e0       	ldi	r23, 0x07	; 7
    d48c:	c6 01       	movw	r24, r12
    d48e:	8b 96       	adiw	r24, 0x2b	; 43
    d490:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <mem_cpy.part.0>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d494:	46 01       	movw	r8, r12
    d496:	02 e0       	ldi	r16, 0x02	; 2
    d498:	80 1a       	sub	r8, r16
    d49a:	0e ef       	ldi	r16, 0xFE	; 254
    d49c:	90 0a       	sbc	r9, r16
    d49e:	45 e5       	ldi	r20, 0x55	; 85
    d4a0:	b4 2e       	mov	r11, r20
    d4a2:	d4 01       	movw	r26, r8
    d4a4:	bc 92       	st	X, r11
	*ptr++ = (BYTE)val;
    d4a6:	76 01       	movw	r14, r12
    d4a8:	b1 e0       	ldi	r27, 0x01	; 1
    d4aa:	eb 1a       	sub	r14, r27
    d4ac:	be ef       	ldi	r27, 0xFE	; 254
    d4ae:	fb 0a       	sbc	r15, r27
    d4b0:	5a ea       	ldi	r21, 0xAA	; 170
    d4b2:	a5 2e       	mov	r10, r21
    d4b4:	f7 01       	movw	r30, r14
    d4b6:	a0 82       	st	Z, r10
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
    d4b8:	01 e0       	ldi	r16, 0x01	; 1
    d4ba:	10 e0       	ldi	r17, 0x00	; 0
    d4bc:	2c 89       	ldd	r18, Y+20	; 0x14
    d4be:	3d 89       	ldd	r19, Y+21	; 0x15
    d4c0:	4e 89       	ldd	r20, Y+22	; 0x16
    d4c2:	5f 89       	ldd	r21, Y+23	; 0x17
    d4c4:	b6 01       	movw	r22, r12
    d4c6:	82 2d       	mov	r24, r2
    d4c8:	4b d2       	rcall	.+1174   	; 0xd960 <disk_write>
    d4ca:	89 2b       	or	r24, r25
    d4cc:	09 f0       	breq	.+2      	; 0xd4d0 <f_mkfs+0x782>
    d4ce:	91 c1       	rjmp	.+802    	; 0xd7f2 <f_mkfs+0xaa4>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
    d4d0:	ff 85       	ldd	r31, Y+15	; 0x0f
    d4d2:	f3 30       	cpi	r31, 0x03	; 3
    d4d4:	09 f0       	breq	.+2      	; 0xd4d8 <f_mkfs+0x78a>
    d4d6:	5e c0       	rjmp	.+188    	; 0xd594 <f_mkfs+0x846>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
    d4d8:	01 e0       	ldi	r16, 0x01	; 1
    d4da:	10 e0       	ldi	r17, 0x00	; 0
    d4dc:	2c 89       	ldd	r18, Y+20	; 0x14
    d4de:	3d 89       	ldd	r19, Y+21	; 0x15
    d4e0:	4e 89       	ldd	r20, Y+22	; 0x16
    d4e2:	5f 89       	ldd	r21, Y+23	; 0x17
    d4e4:	2a 5f       	subi	r18, 0xFA	; 250
    d4e6:	3f 4f       	sbci	r19, 0xFF	; 255
    d4e8:	4f 4f       	sbci	r20, 0xFF	; 255
    d4ea:	5f 4f       	sbci	r21, 0xFF	; 255
    d4ec:	b6 01       	movw	r22, r12
    d4ee:	82 2d       	mov	r24, r2
    d4f0:	37 d2       	rcall	.+1134   	; 0xd960 <disk_write>
			mem_set(buf, 0, ss);
    d4f2:	40 e0       	ldi	r20, 0x00	; 0
    d4f4:	52 e0       	ldi	r21, 0x02	; 2
    d4f6:	60 e0       	ldi	r22, 0x00	; 0
    d4f8:	70 e0       	ldi	r23, 0x00	; 0
    d4fa:	c6 01       	movw	r24, r12
    d4fc:	0e 94 89 45 	call	0x8b12	; 0x8b12 <mem_set>
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d500:	82 e5       	ldi	r24, 0x52	; 82
    d502:	d6 01       	movw	r26, r12
    d504:	8c 93       	st	X, r24
	*ptr++ = (BYTE)val; val >>= 8;
    d506:	11 96       	adiw	r26, 0x01	; 1
    d508:	8c 93       	st	X, r24
    d50a:	11 97       	sbiw	r26, 0x01	; 1
	*ptr++ = (BYTE)val; val >>= 8;
    d50c:	81 e6       	ldi	r24, 0x61	; 97
    d50e:	12 96       	adiw	r26, 0x02	; 2
    d510:	8c 93       	st	X, r24
    d512:	12 97       	sbiw	r26, 0x02	; 2
	*ptr++ = (BYTE)val;
    d514:	91 e4       	ldi	r25, 0x41	; 65
    d516:	13 96       	adiw	r26, 0x03	; 3
    d518:	9c 93       	st	X, r25
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d51a:	22 e7       	ldi	r18, 0x72	; 114
    d51c:	f6 01       	movw	r30, r12
    d51e:	ec 51       	subi	r30, 0x1C	; 28
    d520:	fe 4f       	sbci	r31, 0xFE	; 254
    d522:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    d524:	31 96       	adiw	r30, 0x01	; 1
    d526:	20 83       	st	Z, r18
	*ptr++ = (BYTE)val; val >>= 8;
    d528:	31 96       	adiw	r30, 0x01	; 1
    d52a:	90 83       	st	Z, r25
	*ptr++ = (BYTE)val;
    d52c:	31 96       	adiw	r30, 0x01	; 1
    d52e:	80 83       	st	Z, r24
		if (fmt == FS_FAT32) {
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
			mem_set(buf, 0, ss);
			st_dword(buf + FSI_LeadSig, 0x41615252);
			st_dword(buf + FSI_StrucSig, 0x61417272);
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
    d530:	48 a5       	ldd	r20, Y+40	; 0x28
    d532:	59 a5       	ldd	r21, Y+41	; 0x29
    d534:	6a a5       	ldd	r22, Y+42	; 0x2a
    d536:	7b a5       	ldd	r23, Y+43	; 0x2b
    d538:	41 50       	subi	r20, 0x01	; 1
    d53a:	51 09       	sbc	r21, r1
    d53c:	61 09       	sbc	r22, r1
    d53e:	71 09       	sbc	r23, r1
    d540:	c6 01       	movw	r24, r12
    d542:	88 51       	subi	r24, 0x18	; 24
    d544:	9e 4f       	sbci	r25, 0xFE	; 254
    d546:	0e 94 83 45 	call	0x8b06	; 0x8b06 <st_dword>
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d54a:	82 e0       	ldi	r24, 0x02	; 2
    d54c:	f6 01       	movw	r30, r12
    d54e:	e4 51       	subi	r30, 0x14	; 20
    d550:	fe 4f       	sbci	r31, 0xFE	; 254
    d552:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val; val >>= 8;
    d554:	31 96       	adiw	r30, 0x01	; 1
    d556:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val; val >>= 8;
    d558:	31 96       	adiw	r30, 0x01	; 1
    d55a:	10 82       	st	Z, r1
	*ptr++ = (BYTE)val;
    d55c:	31 96       	adiw	r30, 0x01	; 1
    d55e:	10 82       	st	Z, r1

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d560:	f4 01       	movw	r30, r8
    d562:	b0 82       	st	Z, r11
	*ptr++ = (BYTE)val;
    d564:	d7 01       	movw	r26, r14
    d566:	ac 92       	st	X, r10
			st_dword(buf + FSI_LeadSig, 0x41615252);
			st_dword(buf + FSI_StrucSig, 0x61417272);
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
			st_word(buf + BS_55AA, 0xAA55);
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
    d568:	2c 89       	ldd	r18, Y+20	; 0x14
    d56a:	3d 89       	ldd	r19, Y+21	; 0x15
    d56c:	4e 89       	ldd	r20, Y+22	; 0x16
    d56e:	5f 89       	ldd	r21, Y+23	; 0x17
    d570:	29 5f       	subi	r18, 0xF9	; 249
    d572:	3f 4f       	sbci	r19, 0xFF	; 255
    d574:	4f 4f       	sbci	r20, 0xFF	; 255
    d576:	5f 4f       	sbci	r21, 0xFF	; 255
    d578:	b6 01       	movw	r22, r12
    d57a:	82 2d       	mov	r24, r2
    d57c:	f1 d1       	rcall	.+994    	; 0xd960 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
    d57e:	2c 89       	ldd	r18, Y+20	; 0x14
    d580:	3d 89       	ldd	r19, Y+21	; 0x15
    d582:	4e 89       	ldd	r20, Y+22	; 0x16
    d584:	5f 89       	ldd	r21, Y+23	; 0x17
    d586:	2f 5f       	subi	r18, 0xFF	; 255
    d588:	3f 4f       	sbci	r19, 0xFF	; 255
    d58a:	4f 4f       	sbci	r20, 0xFF	; 255
    d58c:	5f 4f       	sbci	r21, 0xFF	; 255
    d58e:	b6 01       	movw	r22, r12
    d590:	82 2d       	mov	r24, r2
    d592:	e6 d1       	rcall	.+972    	; 0xd960 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
    d594:	4d a5       	ldd	r20, Y+45	; 0x2d
    d596:	5e a5       	ldd	r21, Y+46	; 0x2e
    d598:	60 e0       	ldi	r22, 0x00	; 0
    d59a:	70 e0       	ldi	r23, 0x00	; 0
    d59c:	c6 01       	movw	r24, r12
    d59e:	0e 94 89 45 	call	0x8b12	; 0x8b12 <mem_set>
		sect = b_fat;		/* FAT start sector */
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
			if (fmt == FS_FAT32) {
    d5a2:	bf 85       	ldd	r27, Y+15	; 0x0f
    d5a4:	b3 30       	cpi	r27, 0x03	; 3
    d5a6:	89 f4       	brne	.+34     	; 0xd5ca <f_mkfs+0x87c>
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d5a8:	88 ef       	ldi	r24, 0xF8	; 248
    d5aa:	f6 01       	movw	r30, r12
    d5ac:	80 83       	st	Z, r24
	*ptr++ = (BYTE)val; val >>= 8;
    d5ae:	8f ef       	ldi	r24, 0xFF	; 255
    d5b0:	81 83       	std	Z+1, r24	; 0x01
	*ptr++ = (BYTE)val; val >>= 8;
    d5b2:	82 83       	std	Z+2, r24	; 0x02
	*ptr++ = (BYTE)val;
    d5b4:	83 83       	std	Z+3, r24	; 0x03
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d5b6:	84 83       	std	Z+4, r24	; 0x04
	*ptr++ = (BYTE)val; val >>= 8;
    d5b8:	85 83       	std	Z+5, r24	; 0x05
	*ptr++ = (BYTE)val; val >>= 8;
    d5ba:	86 83       	std	Z+6, r24	; 0x06
	*ptr++ = (BYTE)val;
    d5bc:	87 83       	std	Z+7, r24	; 0x07
}

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d5be:	80 87       	std	Z+8, r24	; 0x08
	*ptr++ = (BYTE)val; val >>= 8;
    d5c0:	81 87       	std	Z+9, r24	; 0x09
	*ptr++ = (BYTE)val; val >>= 8;
    d5c2:	82 87       	std	Z+10, r24	; 0x0a
	*ptr++ = (BYTE)val;
    d5c4:	8f e0       	ldi	r24, 0x0F	; 15
    d5c6:	83 87       	std	Z+11, r24	; 0x0b
    d5c8:	0f c0       	rjmp	.+30     	; 0xd5e8 <f_mkfs+0x89a>
			if (fmt == FS_FAT32) {
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
    d5ca:	ff 85       	ldd	r31, Y+15	; 0x0f
    d5cc:	f1 30       	cpi	r31, 0x01	; 1
    d5ce:	29 f0       	breq	.+10     	; 0xd5da <f_mkfs+0x88c>
    d5d0:	48 ef       	ldi	r20, 0xF8	; 248
    d5d2:	5f ef       	ldi	r21, 0xFF	; 255
    d5d4:	6f ef       	ldi	r22, 0xFF	; 255
    d5d6:	7f ef       	ldi	r23, 0xFF	; 255
    d5d8:	04 c0       	rjmp	.+8      	; 0xd5e2 <f_mkfs+0x894>
    d5da:	48 ef       	ldi	r20, 0xF8	; 248
    d5dc:	5f ef       	ldi	r21, 0xFF	; 255
    d5de:	6f ef       	ldi	r22, 0xFF	; 255
    d5e0:	70 e0       	ldi	r23, 0x00	; 0
    d5e2:	c6 01       	movw	r24, r12
    d5e4:	0e 94 83 45 	call	0x8b06	; 0x8b06 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
    d5e8:	88 88       	ldd	r8, Y+16	; 0x10
    d5ea:	99 88       	ldd	r9, Y+17	; 0x11
    d5ec:	aa 88       	ldd	r10, Y+18	; 0x12
    d5ee:	bb 88       	ldd	r11, Y+19	; 0x13
    d5f0:	0c a1       	ldd	r16, Y+36	; 0x24
    d5f2:	1d a1       	ldd	r17, Y+37	; 0x25
    d5f4:	2e a1       	ldd	r18, Y+38	; 0x26
    d5f6:	3f a1       	ldd	r19, Y+39	; 0x27
    d5f8:	08 15       	cp	r16, r8
    d5fa:	19 05       	cpc	r17, r9
    d5fc:	2a 05       	cpc	r18, r10
    d5fe:	3b 05       	cpc	r19, r11
    d600:	10 f4       	brcc	.+4      	; 0xd606 <f_mkfs+0x8b8>
    d602:	48 01       	movw	r8, r16
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
    d604:	59 01       	movw	r10, r18
    d606:	84 01       	movw	r16, r8
    d608:	28 8d       	ldd	r18, Y+24	; 0x18
    d60a:	39 8d       	ldd	r19, Y+25	; 0x19
    d60c:	4a 8d       	ldd	r20, Y+26	; 0x1a
    d60e:	5b 8d       	ldd	r21, Y+27	; 0x1b
    d610:	b6 01       	movw	r22, r12
    d612:	8c a5       	ldd	r24, Y+44	; 0x2c
    d614:	a5 d1       	rcall	.+842    	; 0xd960 <disk_write>
    d616:	89 2b       	or	r24, r25
    d618:	09 f0       	breq	.+2      	; 0xd61c <f_mkfs+0x8ce>
				mem_set(buf, 0, ss);
    d61a:	eb c0       	rjmp	.+470    	; 0xd7f2 <f_mkfs+0xaa4>
    d61c:	40 e0       	ldi	r20, 0x00	; 0
    d61e:	52 e0       	ldi	r21, 0x02	; 2
    d620:	60 e0       	ldi	r22, 0x00	; 0
    d622:	70 e0       	ldi	r23, 0x00	; 0
    d624:	c6 01       	movw	r24, r12
    d626:	0e 94 89 45 	call	0x8b12	; 0x8b12 <mem_set>
				sect += n; nsect -= n;
    d62a:	28 8d       	ldd	r18, Y+24	; 0x18
    d62c:	39 8d       	ldd	r19, Y+25	; 0x19
    d62e:	4a 8d       	ldd	r20, Y+26	; 0x1a
    d630:	5b 8d       	ldd	r21, Y+27	; 0x1b
    d632:	28 0d       	add	r18, r8
    d634:	39 1d       	adc	r19, r9
    d636:	4a 1d       	adc	r20, r10
    d638:	5b 1d       	adc	r21, r11
    d63a:	28 8f       	std	Y+24, r18	; 0x18
    d63c:	39 8f       	std	Y+25, r19	; 0x19
    d63e:	4a 8f       	std	Y+26, r20	; 0x1a
    d640:	5b 8f       	std	Y+27, r21	; 0x1b
    d642:	88 89       	ldd	r24, Y+16	; 0x10
    d644:	99 89       	ldd	r25, Y+17	; 0x11
    d646:	aa 89       	ldd	r26, Y+18	; 0x12
    d648:	bb 89       	ldd	r27, Y+19	; 0x13
    d64a:	88 19       	sub	r24, r8
    d64c:	99 09       	sbc	r25, r9
    d64e:	aa 09       	sbc	r26, r10
    d650:	bb 09       	sbc	r27, r11
    d652:	88 8b       	std	Y+16, r24	; 0x10
    d654:	99 8b       	std	Y+17, r25	; 0x11
    d656:	aa 8b       	std	Y+18, r26	; 0x12
			} while (nsect);
    d658:	bb 8b       	std	Y+19, r27	; 0x13
    d65a:	89 2b       	or	r24, r25
    d65c:	8a 2b       	or	r24, r26
    d65e:	8b 2b       	or	r24, r27
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
    d660:	19 f6       	brne	.-122    	; 0xd5e8 <f_mkfs+0x89a>
    d662:	9f 85       	ldd	r25, Y+15	; 0x0f
    d664:	93 30       	cpi	r25, 0x03	; 3
    d666:	21 f4       	brne	.+8      	; 0xd670 <f_mkfs+0x922>
    d668:	4c 8e       	std	Y+28, r4	; 0x1c
    d66a:	5d 8e       	std	Y+29, r5	; 0x1d
    d66c:	6e 8e       	std	Y+30, r6	; 0x1e
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
    d66e:	7f 8e       	std	Y+31, r7	; 0x1f
    d670:	8c 8c       	ldd	r8, Y+28	; 0x1c
    d672:	9d 8c       	ldd	r9, Y+29	; 0x1d
    d674:	ae 8c       	ldd	r10, Y+30	; 0x1e
    d676:	bf 8c       	ldd	r11, Y+31	; 0x1f
    d678:	0c a1       	ldd	r16, Y+36	; 0x24
    d67a:	1d a1       	ldd	r17, Y+37	; 0x25
    d67c:	2e a1       	ldd	r18, Y+38	; 0x26
    d67e:	3f a1       	ldd	r19, Y+39	; 0x27
    d680:	08 15       	cp	r16, r8
    d682:	19 05       	cpc	r17, r9
    d684:	2a 05       	cpc	r18, r10
    d686:	3b 05       	cpc	r19, r11
    d688:	10 f4       	brcc	.+4      	; 0xd68e <f_mkfs+0x940>
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
    d68a:	48 01       	movw	r8, r16
    d68c:	59 01       	movw	r10, r18
    d68e:	84 01       	movw	r16, r8
    d690:	28 8d       	ldd	r18, Y+24	; 0x18
    d692:	39 8d       	ldd	r19, Y+25	; 0x19
    d694:	4a 8d       	ldd	r20, Y+26	; 0x1a
    d696:	5b 8d       	ldd	r21, Y+27	; 0x1b
    d698:	b6 01       	movw	r22, r12
    d69a:	8c a5       	ldd	r24, Y+44	; 0x2c
    d69c:	61 d1       	rcall	.+706    	; 0xd960 <disk_write>
    d69e:	89 2b       	or	r24, r25
    d6a0:	09 f0       	breq	.+2      	; 0xd6a4 <f_mkfs+0x956>
			sect += n; nsect -= n;
    d6a2:	a7 c0       	rjmp	.+334    	; 0xd7f2 <f_mkfs+0xaa4>
    d6a4:	28 8d       	ldd	r18, Y+24	; 0x18
    d6a6:	39 8d       	ldd	r19, Y+25	; 0x19
    d6a8:	4a 8d       	ldd	r20, Y+26	; 0x1a
    d6aa:	5b 8d       	ldd	r21, Y+27	; 0x1b
    d6ac:	28 0d       	add	r18, r8
    d6ae:	39 1d       	adc	r19, r9
    d6b0:	4a 1d       	adc	r20, r10
    d6b2:	5b 1d       	adc	r21, r11
    d6b4:	28 8f       	std	Y+24, r18	; 0x18
    d6b6:	39 8f       	std	Y+25, r19	; 0x19
    d6b8:	4a 8f       	std	Y+26, r20	; 0x1a
    d6ba:	5b 8f       	std	Y+27, r21	; 0x1b
    d6bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    d6be:	9d 8d       	ldd	r25, Y+29	; 0x1d
    d6c0:	ae 8d       	ldd	r26, Y+30	; 0x1e
    d6c2:	bf 8d       	ldd	r27, Y+31	; 0x1f
    d6c4:	88 19       	sub	r24, r8
    d6c6:	99 09       	sbc	r25, r9
    d6c8:	aa 09       	sbc	r26, r10
    d6ca:	bb 09       	sbc	r27, r11
    d6cc:	8c 8f       	std	Y+28, r24	; 0x1c
    d6ce:	9d 8f       	std	Y+29, r25	; 0x1d
    d6d0:	ae 8f       	std	Y+30, r26	; 0x1e
		} while (nsect);
    d6d2:	bf 8f       	std	Y+31, r27	; 0x1f
    d6d4:	89 2b       	or	r24, r25
    d6d6:	8a 2b       	or	r24, r26
    d6d8:	8b 2b       	or	r24, r27

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
    d6da:	51 f6       	brne	.-108    	; 0xd670 <f_mkfs+0x922>
    d6dc:	9f 85       	ldd	r25, Y+15	; 0x0f
    d6de:	93 30       	cpi	r25, 0x03	; 3
			sys = 0x0C;		/* FAT32X */
		} else {
			if (sz_vol >= 0x10000) {
    d6e0:	69 f0       	breq	.+26     	; 0xd6fc <f_mkfs+0x9ae>
    d6e2:	89 81       	ldd	r24, Y+1	; 0x01
    d6e4:	9a 81       	ldd	r25, Y+2	; 0x02
    d6e6:	ab 81       	ldd	r26, Y+3	; 0x03
    d6e8:	bc 81       	ldd	r27, Y+4	; 0x04
    d6ea:	00 97       	sbiw	r24, 0x00	; 0
    d6ec:	a1 40       	sbci	r26, 0x01	; 1
    d6ee:	b1 05       	cpc	r27, r1
				sys = 0x06;	/* FAT12/16 (>=64KS) */
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
    d6f0:	38 f4       	brcc	.+14     	; 0xd700 <f_mkfs+0x9b2>
    d6f2:	ff 85       	ldd	r31, Y+15	; 0x0f
    d6f4:	f2 30       	cpi	r31, 0x02	; 2
    d6f6:	31 f4       	brne	.+12     	; 0xd704 <f_mkfs+0x9b6>
    d6f8:	14 e0       	ldi	r17, 0x04	; 4
	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
			sys = 0x0C;		/* FAT32X */
    d6fa:	05 c0       	rjmp	.+10     	; 0xd706 <f_mkfs+0x9b8>
    d6fc:	1c e0       	ldi	r17, 0x0C	; 12
		} else {
			if (sz_vol >= 0x10000) {
				sys = 0x06;	/* FAT12/16 (>=64KS) */
    d6fe:	03 c0       	rjmp	.+6      	; 0xd706 <f_mkfs+0x9b8>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
    d700:	16 e0       	ldi	r17, 0x06	; 6
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system type */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {
		if (!(opt & FM_SFD)) {
    d702:	01 c0       	rjmp	.+2      	; 0xd706 <f_mkfs+0x9b8>
    d704:	11 e0       	ldi	r17, 0x01	; 1
    d706:	0a a9       	ldd	r16, Y+50	; 0x32
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
    d708:	00 23       	and	r16, r16
    d70a:	69 f0       	breq	.+26     	; 0xd726 <f_mkfs+0x9d8>
    d70c:	40 e0       	ldi	r20, 0x00	; 0
    d70e:	50 e0       	ldi	r21, 0x00	; 0
    d710:	60 e0       	ldi	r22, 0x00	; 0
    d712:	82 2d       	mov	r24, r2
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
	if (vol < 0) return FR_INVALID_DRIVE;
    d714:	35 d1       	rcall	.+618    	; 0xd980 <disk_ioctl>
    d716:	31 e0       	ldi	r19, 0x01	; 1
    d718:	20 e0       	ldi	r18, 0x00	; 0
    d71a:	89 2b       	or	r24, r25
    d71c:	09 f4       	brne	.+2      	; 0xd720 <f_mkfs+0x9d2>
    d71e:	30 e0       	ldi	r19, 0x00	; 0
    d720:	83 2f       	mov	r24, r19
    d722:	92 2f       	mov	r25, r18
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system type */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {
		if (!(opt & FM_SFD)) {
			/* Create partition table in FDISK format */
			mem_set(buf, 0, ss);
    d724:	7b c0       	rjmp	.+246    	; 0xd81c <f_mkfs+0xace>
    d726:	40 e0       	ldi	r20, 0x00	; 0
    d728:	52 e0       	ldi	r21, 0x02	; 2
    d72a:	60 e0       	ldi	r22, 0x00	; 0
    d72c:	70 e0       	ldi	r23, 0x00	; 0
    d72e:	c6 01       	movw	r24, r12
    d730:	0e 94 89 45 	call	0x8b12	; 0x8b12 <mem_set>

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
	*ptr++ = (BYTE)val; val >>= 8;
    d734:	f6 01       	movw	r30, r12
    d736:	e2 50       	subi	r30, 0x02	; 2
    d738:	fe 4f       	sbci	r31, 0xFE	; 254
    d73a:	85 e5       	ldi	r24, 0x55	; 85
	*ptr++ = (BYTE)val;
    d73c:	80 83       	st	Z, r24
    d73e:	31 96       	adiw	r30, 0x01	; 1
    d740:	8a ea       	ldi	r24, 0xAA	; 170
		if (!(opt & FM_SFD)) {
			/* Create partition table in FDISK format */
			mem_set(buf, 0, ss);
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
			pte[PTE_Boot] = 0;					/* Boot indicator */
    d742:	80 83       	st	Z, r24
    d744:	e1 54       	subi	r30, 0x41	; 65
    d746:	f1 09       	sbc	r31, r1
			pte[PTE_StHead] = 1;				/* Start head */
    d748:	10 82       	st	Z, r1
    d74a:	31 96       	adiw	r30, 0x01	; 1
    d74c:	81 e0       	ldi	r24, 0x01	; 1
			pte[PTE_StSec] = 1;					/* Start sector */
    d74e:	80 83       	st	Z, r24
    d750:	31 96       	adiw	r30, 0x01	; 1
			pte[PTE_StCyl] = 0;					/* Start cylinder */
    d752:	80 83       	st	Z, r24
    d754:	31 96       	adiw	r30, 0x01	; 1
			pte[PTE_System] = sys;				/* System type */
    d756:	10 82       	st	Z, r1
    d758:	31 96       	adiw	r30, 0x01	; 1
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS is incorrect) */
    d75a:	10 83       	st	Z, r17
    d75c:	89 81       	ldd	r24, Y+1	; 0x01
    d75e:	9a 81       	ldd	r25, Y+2	; 0x02
    d760:	ab 81       	ldd	r26, Y+3	; 0x03
    d762:	bc 81       	ldd	r27, Y+4	; 0x04
    d764:	2c 89       	ldd	r18, Y+20	; 0x14
    d766:	3d 89       	ldd	r19, Y+21	; 0x15
    d768:	4e 89       	ldd	r20, Y+22	; 0x16
    d76a:	5f 89       	ldd	r21, Y+23	; 0x17
    d76c:	28 0f       	add	r18, r24
    d76e:	39 1f       	adc	r19, r25
    d770:	4a 1f       	adc	r20, r26
    d772:	5b 1f       	adc	r21, r27
    d774:	ca 01       	movw	r24, r20
    d776:	b9 01       	movw	r22, r18
    d778:	21 ec       	ldi	r18, 0xC1	; 193
    d77a:	3e e3       	ldi	r19, 0x3E	; 62
    d77c:	40 e0       	ldi	r20, 0x00	; 0
    d77e:	50 e0       	ldi	r21, 0x00	; 0
    d780:	0e 94 54 e8 	call	0x1d0a8	; 0x1d0a8 <__udivmodsi4>
			pte[PTE_EdHead] = 254;				/* End head */
    d784:	f6 01       	movw	r30, r12
    d786:	ed 53       	subi	r30, 0x3D	; 61
    d788:	fe 4f       	sbci	r31, 0xFE	; 254
    d78a:	8e ef       	ldi	r24, 0xFE	; 254
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
    d78c:	80 83       	st	Z, r24
    d78e:	31 96       	adiw	r30, 0x01	; 1
    d790:	da 01       	movw	r26, r20
    d792:	c9 01       	movw	r24, r18
    d794:	32 e0       	ldi	r19, 0x02	; 2
    d796:	b6 95       	lsr	r27
    d798:	a7 95       	ror	r26
    d79a:	97 95       	ror	r25
    d79c:	87 95       	ror	r24
    d79e:	3a 95       	dec	r19
    d7a0:	d1 f7       	brne	.-12     	; 0xd796 <f_mkfs+0xa48>
    d7a2:	8f 63       	ori	r24, 0x3F	; 63
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
    d7a4:	80 83       	st	Z, r24
    d7a6:	31 96       	adiw	r30, 0x01	; 1
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
    d7a8:	20 83       	st	Z, r18
    d7aa:	4c 89       	ldd	r20, Y+20	; 0x14
    d7ac:	5d 89       	ldd	r21, Y+21	; 0x15
    d7ae:	6e 89       	ldd	r22, Y+22	; 0x16
    d7b0:	7f 89       	ldd	r23, Y+23	; 0x17
    d7b2:	c6 01       	movw	r24, r12
    d7b4:	8a 53       	subi	r24, 0x3A	; 58
    d7b6:	9e 4f       	sbci	r25, 0xFE	; 254
    d7b8:	0e 94 83 45 	call	0x8b06	; 0x8b06 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
    d7bc:	49 81       	ldd	r20, Y+1	; 0x01
    d7be:	5a 81       	ldd	r21, Y+2	; 0x02
    d7c0:	6b 81       	ldd	r22, Y+3	; 0x03
    d7c2:	7c 81       	ldd	r23, Y+4	; 0x04
    d7c4:	c6 01       	movw	r24, r12
    d7c6:	86 53       	subi	r24, 0x36	; 54
    d7c8:	9e 4f       	sbci	r25, 0xFE	; 254
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
    d7ca:	0e 94 83 45 	call	0x8b06	; 0x8b06 <st_dword>
    d7ce:	01 e0       	ldi	r16, 0x01	; 1
    d7d0:	10 e0       	ldi	r17, 0x00	; 0
    d7d2:	20 e0       	ldi	r18, 0x00	; 0
    d7d4:	30 e0       	ldi	r19, 0x00	; 0
    d7d6:	a9 01       	movw	r20, r18
    d7d8:	b6 01       	movw	r22, r12
    d7da:	82 2d       	mov	r24, r2
    d7dc:	c1 d0       	rcall	.+386    	; 0xd960 <disk_write>
    d7de:	89 2b       	or	r24, r25
    d7e0:	09 f4       	brne	.+2      	; 0xd7e4 <f_mkfs+0xa96>
    d7e2:	94 cf       	rjmp	.-216    	; 0xd70c <f_mkfs+0x9be>
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
	if (vol < 0) return FR_INVALID_DRIVE;
    d7e4:	06 c0       	rjmp	.+12     	; 0xd7f2 <f_mkfs+0xaa4>
    d7e6:	8b e0       	ldi	r24, 0x0B	; 11
	pdrv = LD2PD(vol);	/* Physical drive */
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
	if (stat & STA_NOINIT) return FR_NOT_READY;
    d7e8:	05 c0       	rjmp	.+10     	; 0xd7f4 <f_mkfs+0xaa6>
    d7ea:	83 e0       	ldi	r24, 0x03	; 3
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
    d7ec:	03 c0       	rjmp	.+6      	; 0xd7f4 <f_mkfs+0xaa6>
    d7ee:	8a e0       	ldi	r24, 0x0A	; 10
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
    d7f0:	01 c0       	rjmp	.+2      	; 0xd7f4 <f_mkfs+0xaa6>
    d7f2:	81 e0       	ldi	r24, 0x01	; 1
    d7f4:	90 e0       	ldi	r25, 0x00	; 0
			if (fmt == FS_FAT16) {
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
					if (!au && (pau * 2) <= 64) {
						au = pau * 2; continue;		/* Adjust cluster size and retry */
					}
					if ((opt & FM_FAT32)) {
    d7f6:	12 c0       	rjmp	.+36     	; 0xd81c <f_mkfs+0xace>
    d7f8:	ff 20       	and	r15, r15
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
    d7fa:	19 f0       	breq	.+6      	; 0xd802 <f_mkfs+0xab4>
    d7fc:	23 e0       	ldi	r18, 0x03	; 3
    d7fe:	2f 87       	std	Y+15, r18	; 0x0f
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
    d800:	c6 cb       	rjmp	.-2164   	; 0xcf8e <f_mkfs+0x240>
    d802:	81 38       	cpi	r24, 0x81	; 129
    d804:	91 05       	cpc	r25, r1
    d806:	a1 05       	cpc	r26, r1
    d808:	b1 05       	cpc	r27, r1
    d80a:	08 f0       	brcs	.+2      	; 0xd80e <f_mkfs+0xac0>
    d80c:	23 cb       	rjmp	.-2490   	; 0xce54 <f_mkfs+0x106>
			if (fmt == FS_FAT16) {
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
					if (!au && (pau * 2) <= 64) {
						au = pau * 2; continue;		/* Adjust cluster size and retry */
					}
					if ((opt & FM_FAT32)) {
    d80e:	24 cd       	rjmp	.-1464   	; 0xd258 <f_mkfs+0x50a>
    d810:	ff 20       	and	r15, r15
    d812:	09 f4       	brne	.+2      	; 0xd816 <f_mkfs+0xac8>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
    d814:	1f cb       	rjmp	.-2498   	; 0xce54 <f_mkfs+0x106>
    d816:	33 e0       	ldi	r19, 0x03	; 3
    d818:	3f 87       	std	Y+15, r19	; 0x0f
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;

	return FR_OK;
}
    d81a:	b9 cb       	rjmp	.-2190   	; 0xcf8e <f_mkfs+0x240>
    d81c:	ce 5b       	subi	r28, 0xBE	; 190
    d81e:	df 4f       	sbci	r29, 0xFF	; 255
    d820:	e2 e1       	ldi	r30, 0x12	; 18
    d822:	0c 94 dd e8 	jmp	0x1d1ba	; 0x1d1ba <__epilogue_restores__>

0000d826 <ff_memalloc>:
MEMSPACE
void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
	return safemalloc(msize);	/* Allocate a new memory block with POSIX API */
    d826:	0c 94 a6 29 	jmp	0x534c	; 0x534c <safemalloc>
}
    d82a:	08 95       	ret

0000d82c <ff_memfree>:
MEMSPACE
void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
	safefree(mblock);	/* Discard the memory block with POSIX API */
    d82c:	0c 94 c7 29 	jmp	0x538e	; 0x538e <safefree>
    d830:	08 95       	ret

0000d832 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
    d832:	80 38       	cpi	r24, 0x80	; 128
    d834:	91 05       	cpc	r25, r1
    d836:	18 f1       	brcs	.+70     	; 0xd87e <ff_convert+0x4c>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
    d838:	67 2b       	or	r22, r23
    d83a:	61 f0       	breq	.+24     	; 0xd854 <ff_convert+0x22>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
    d83c:	8f 3f       	cpi	r24, 0xFF	; 255
    d83e:	91 05       	cpc	r25, r1
    d840:	09 f0       	breq	.+2      	; 0xd844 <ff_convert+0x12>
    d842:	d8 f4       	brcc	.+54     	; 0xd87a <ff_convert+0x48>
    d844:	88 0f       	add	r24, r24
    d846:	99 1f       	adc	r25, r25
    d848:	fc 01       	movw	r30, r24
    d84a:	e9 51       	subi	r30, 0x19	; 25
    d84c:	fb 4f       	sbci	r31, 0xFB	; 251
    d84e:	80 81       	ld	r24, Z
    d850:	91 81       	ldd	r25, Z+1	; 0x01
    d852:	08 95       	ret
    d854:	e7 ee       	ldi	r30, 0xE7	; 231
    d856:	f5 e0       	ldi	r31, 0x05	; 5

	if (chr < 0x80) {	/* ASCII */
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
    d858:	20 e0       	ldi	r18, 0x00	; 0
    d85a:	30 e0       	ldi	r19, 0x00	; 0
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
				if (chr == Tbl[c]) break;
    d85c:	41 91       	ld	r20, Z+
    d85e:	51 91       	ld	r21, Z+
    d860:	84 17       	cp	r24, r20
    d862:	95 07       	cpc	r25, r21
    d864:	29 f0       	breq	.+10     	; 0xd870 <ff_convert+0x3e>
	} else {
		if (dir) {		/* OEM code to Unicode */
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
    d866:	2f 5f       	subi	r18, 0xFF	; 255
    d868:	3f 4f       	sbci	r19, 0xFF	; 255
    d86a:	20 38       	cpi	r18, 0x80	; 128
    d86c:	31 05       	cpc	r19, r1
    d86e:	b1 f7       	brne	.-20     	; 0xd85c <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
			}
			c = (c + 0x80) & 0xFF;
    d870:	c9 01       	movw	r24, r18
    d872:	80 58       	subi	r24, 0x80	; 128
    d874:	9f 4f       	sbci	r25, 0xFF	; 255
    d876:	99 27       	eor	r25, r25
    d878:	08 95       	ret
	if (chr < 0x80) {	/* ASCII */
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
    d87a:	80 e0       	ldi	r24, 0x00	; 0
    d87c:	90 e0       	ldi	r25, 0x00	; 0
			c = (c + 0x80) & 0xFF;
		}
	}

	return c;
}
    d87e:	08 95       	ret

0000d880 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
    d880:	81 15       	cp	r24, r1
    d882:	20 e1       	ldi	r18, 0x10	; 16
    d884:	92 07       	cpc	r25, r18
    d886:	18 f0       	brcs	.+6      	; 0xd88e <ff_wtoupper+0xe>
    d888:	a9 e3       	ldi	r26, 0x39	; 57
    d88a:	b3 e0       	ldi	r27, 0x03	; 3
    d88c:	02 c0       	rjmp	.+4      	; 0xd892 <ff_wtoupper+0x12>
    d88e:	a5 ef       	ldi	r26, 0xF5	; 245
    d890:	b3 e0       	ldi	r27, 0x03	; 3
	for (;;) {
		bc = *p++;								/* Get block base */
    d892:	4d 91       	ld	r20, X+
    d894:	5c 91       	ld	r21, X
    d896:	11 97       	sbiw	r26, 0x01	; 1
		if (!bc || chr < bc) break;
    d898:	41 15       	cp	r20, r1
    d89a:	51 05       	cpc	r21, r1
    d89c:	09 f4       	brne	.+2      	; 0xd8a0 <ff_wtoupper+0x20>
    d89e:	43 c0       	rjmp	.+134    	; 0xd926 <ff_wtoupper+0xa6>
    d8a0:	84 17       	cp	r24, r20
    d8a2:	95 07       	cpc	r25, r21
    d8a4:	08 f4       	brcc	.+2      	; 0xd8a8 <ff_wtoupper+0x28>
    d8a6:	3f c0       	rjmp	.+126    	; 0xd926 <ff_wtoupper+0xa6>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
    d8a8:	14 96       	adiw	r26, 0x04	; 4
    d8aa:	fd 01       	movw	r30, r26
    d8ac:	32 97       	sbiw	r30, 0x02	; 2
    d8ae:	20 81       	ld	r18, Z
    d8b0:	31 81       	ldd	r19, Z+1	; 0x01
    d8b2:	e3 2f       	mov	r30, r19
    d8b4:	ff 27       	eor	r31, r31
    d8b6:	33 27       	eor	r19, r19
		if (chr < bc + nc) {	/* In the block? */
    d8b8:	ba 01       	movw	r22, r20
    d8ba:	62 0f       	add	r22, r18
    d8bc:	73 1f       	adc	r23, r19
    d8be:	86 17       	cp	r24, r22
    d8c0:	97 07       	cpc	r25, r23
    d8c2:	48 f5       	brcc	.+82     	; 0xd916 <ff_wtoupper+0x96>
			switch (cmd) {
    d8c4:	e9 30       	cpi	r30, 0x09	; 9
    d8c6:	f1 05       	cpc	r31, r1
    d8c8:	70 f5       	brcc	.+92     	; 0xd926 <ff_wtoupper+0xa6>
    d8ca:	ec 54       	subi	r30, 0x4C	; 76
    d8cc:	ff 4f       	sbci	r31, 0xFF	; 255
    d8ce:	0c 94 92 e8 	jmp	0x1d124	; 0x1d124 <__tablejump2__>
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
    d8d2:	fc 01       	movw	r30, r24
    d8d4:	e4 1b       	sub	r30, r20
    d8d6:	f5 0b       	sbc	r31, r21
    d8d8:	ee 0f       	add	r30, r30
    d8da:	ff 1f       	adc	r31, r31
    d8dc:	ea 0f       	add	r30, r26
    d8de:	fb 1f       	adc	r31, r27
    d8e0:	80 81       	ld	r24, Z
    d8e2:	91 81       	ldd	r25, Z+1	; 0x01
    d8e4:	08 95       	ret
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
    d8e6:	9c 01       	movw	r18, r24
    d8e8:	24 1b       	sub	r18, r20
    d8ea:	35 0b       	sbc	r19, r21
    d8ec:	21 70       	andi	r18, 0x01	; 1
    d8ee:	33 27       	eor	r19, r19
    d8f0:	82 1b       	sub	r24, r18
    d8f2:	93 0b       	sbc	r25, r19
    d8f4:	08 95       	ret
			case 2: chr -= 16; break;				/* Shift -16 */
    d8f6:	40 97       	sbiw	r24, 0x10	; 16
    d8f8:	08 95       	ret
			case 3:	chr -= 32; break;				/* Shift -32 */
    d8fa:	80 97       	sbiw	r24, 0x20	; 32
    d8fc:	08 95       	ret
			case 4:	chr -= 48; break;				/* Shift -48 */
    d8fe:	c0 97       	sbiw	r24, 0x30	; 48
    d900:	08 95       	ret
			case 5:	chr -= 26; break;				/* Shift -26 */
    d902:	4a 97       	sbiw	r24, 0x1a	; 26
    d904:	08 95       	ret
			case 6:	chr += 8; break;				/* Shift +8 */
    d906:	08 96       	adiw	r24, 0x08	; 8
    d908:	08 95       	ret
			case 7: chr -= 80; break;				/* Shift -80 */
    d90a:	80 55       	subi	r24, 0x50	; 80
    d90c:	91 09       	sbc	r25, r1
    d90e:	08 95       	ret
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
    d910:	80 56       	subi	r24, 0x60	; 96
    d912:	9c 41       	sbci	r25, 0x1C	; 28
    d914:	08 95       	ret
			}
			break;
		}
		if (!cmd) p += nc;
    d916:	ef 2b       	or	r30, r31
    d918:	09 f0       	breq	.+2      	; 0xd91c <ff_wtoupper+0x9c>
    d91a:	bb cf       	rjmp	.-138    	; 0xd892 <ff_wtoupper+0x12>
    d91c:	22 0f       	add	r18, r18
    d91e:	33 1f       	adc	r19, r19
    d920:	a2 0f       	add	r26, r18
    d922:	b3 1f       	adc	r27, r19
    d924:	b6 cf       	rjmp	.-148    	; 0xd892 <ff_wtoupper+0x12>
	}

	return chr;
}
    d926:	08 95       	ret

0000d928 <disk_status>:

DSTATUS disk_status (
    BYTE pdrv       /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv) {
    d928:	81 11       	cpse	r24, r1
    case DRV_CFC :
        return cf_disk_status();
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_status();
    d92a:	02 c0       	rjmp	.+4      	; 0xd930 <disk_status+0x8>
    d92c:	9b c1       	rjmp	.+822    	; 0xdc64 <mmc_disk_status>
#endif
    }
    return STA_NOINIT;
    d92e:	08 95       	ret
}
    d930:	81 e0       	ldi	r24, 0x01	; 1
    d932:	08 95       	ret

0000d934 <disk_initialize>:

DSTATUS disk_initialize (
    BYTE pdrv               /* Physical drive nmuber to identify the drive */
)
{
    switch (pdrv) {
    d934:	81 11       	cpse	r24, r1
    case DRV_CFC :
        return cf_disk_initialize();
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_initialize();
    d936:	02 c0       	rjmp	.+4      	; 0xd93c <disk_initialize+0x8>
    d938:	f8 c0       	rjmp	.+496    	; 0xdb2a <mmc_disk_initialize>
#endif
    }
    return STA_NOINIT;
    d93a:	08 95       	ret
}
    d93c:	81 e0       	ldi	r24, 0x01	; 1
    d93e:	08 95       	ret

0000d940 <disk_read>:
    BYTE pdrv,      /* Physical drive nmuber to identify the drive */
    BYTE *buff,     /* Data buffer to store read data */
    DWORD sector,   /* Sector address in LBA */
    UINT count      /* Number of sectors to read */
)
{
    d940:	0f 93       	push	r16
    d942:	1f 93       	push	r17
    d944:	fb 01       	movw	r30, r22
    switch (pdrv) {
    d946:	81 11       	cpse	r24, r1
    d948:	06 c0       	rjmp	.+12     	; 0xd956 <disk_read+0x16>
    d94a:	ba 01       	movw	r22, r20
    d94c:	a9 01       	movw	r20, r18
    d94e:	cf 01       	movw	r24, r30
    case DRV_CFC :
        return cf_disk_read(buff, sector, count);
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_read(buff, sector, count);
    d950:	98 01       	movw	r18, r16
    d952:	8b d1       	rcall	.+790    	; 0xdc6a <mmc_disk_read>
    d954:	02 c0       	rjmp	.+4      	; 0xd95a <disk_read+0x1a>
#endif
    }
    return RES_PARERR;
    d956:	84 e0       	ldi	r24, 0x04	; 4
    d958:	90 e0       	ldi	r25, 0x00	; 0
}
    d95a:	1f 91       	pop	r17
    d95c:	0f 91       	pop	r16
    d95e:	08 95       	ret

0000d960 <disk_write>:
    BYTE pdrv,          /* Physical drive nmuber to identify the drive */
    const BYTE *buff,   /* Data to be written */
    DWORD sector,       /* Sector address in LBA */
    UINT count          /* Number of sectors to write */
)
{
    d960:	0f 93       	push	r16
    d962:	1f 93       	push	r17
    d964:	fb 01       	movw	r30, r22
    switch (pdrv) {
    d966:	81 11       	cpse	r24, r1
    d968:	06 c0       	rjmp	.+12     	; 0xd976 <disk_write+0x16>
    d96a:	ba 01       	movw	r22, r20
    d96c:	a9 01       	movw	r20, r18
    d96e:	cf 01       	movw	r24, r30
    case DRV_CFC :
        return cf_disk_write(buff, sector, count);
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_write(buff, sector, count);
    d970:	98 01       	movw	r18, r16
    d972:	c1 d1       	rcall	.+898    	; 0xdcf6 <mmc_disk_write>
    d974:	02 c0       	rjmp	.+4      	; 0xd97a <disk_write+0x1a>
#endif
    }
    return RES_PARERR;
    d976:	84 e0       	ldi	r24, 0x04	; 4
    d978:	90 e0       	ldi	r25, 0x00	; 0
}
    d97a:	1f 91       	pop	r17
    d97c:	0f 91       	pop	r16
    d97e:	08 95       	ret

0000d980 <disk_ioctl>:
DRESULT disk_ioctl (
    BYTE pdrv,      /* Physical drive nmuber (0..) */
    BYTE cmd,       /* Control code */
    void *buff      /* Buffer to send/receive control data */
)
{
    d980:	96 2f       	mov	r25, r22
    switch (pdrv) {
    d982:	81 11       	cpse	r24, r1
    d984:	04 c0       	rjmp	.+8      	; 0xd98e <disk_ioctl+0xe>
    d986:	ba 01       	movw	r22, r20
    case DRV_CFC :
        return cf_disk_ioctl(cmd, buff);
#endif
#ifdef DRV_MMC
    case DRV_MMC :
        return mmc_disk_ioctl(cmd, buff);
    d988:	89 2f       	mov	r24, r25
    d98a:	1a c2       	rjmp	.+1076   	; 0xddc0 <mmc_disk_ioctl>
#endif
    }
    return RES_PARERR;
    d98c:	08 95       	ret
    d98e:	84 e0       	ldi	r24, 0x04	; 4
}
    d990:	90 e0       	ldi	r25, 0x00	; 0
    d992:	08 95       	ret

0000d994 <xchg_spi>:
///@return Data read
static
BYTE xchg_spi (     /* Returns received data */
    BYTE dat        /* Data to be sent */
)
{
    d994:	17 c5       	rjmp	.+2606   	; 0xe3c4 <mmc_spi_TXRX>
    d996:	08 95       	ret

0000d998 <deselect>:
    d998:	ec d4       	rcall	.+2520   	; 0xe372 <mmc_spi_end>
    d99a:	8f ef       	ldi	r24, 0xFF	; 255
    d99c:	fb df       	rcall	.-10     	; 0xd994 <xchg_spi>
    d99e:	8f ef       	ldi	r24, 0xFF	; 255
    d9a0:	f9 cf       	rjmp	.-14     	; 0xd994 <xchg_spi>
    d9a2:	08 95       	ret

0000d9a4 <rcvr_datablock>:
    d9a4:	0f 93       	push	r16
    d9a6:	1f 93       	push	r17
    d9a8:	cf 93       	push	r28
    d9aa:	df 93       	push	r29
    d9ac:	ec 01       	movw	r28, r24
    d9ae:	8b 01       	movw	r16, r22
    d9b0:	46 9a       	sbi	0x08, 6	; 8
    d9b2:	3e 9a       	sbi	0x07, 6	; 7
    d9b4:	88 ee       	ldi	r24, 0xE8	; 232
    d9b6:	93 e0       	ldi	r25, 0x03	; 3
    d9b8:	08 d5       	rcall	.+2576   	; 0xe3ca <mmc_set_ms_timeout>
    d9ba:	8f ef       	ldi	r24, 0xFF	; 255
    d9bc:	03 d5       	rcall	.+2566   	; 0xe3c4 <mmc_spi_TXRX>
    d9be:	8f 3f       	cpi	r24, 0xFF	; 255
    d9c0:	31 f4       	brne	.+12     	; 0xd9ce <rcvr_datablock+0x2a>
    d9c2:	0a d5       	rcall	.+2580   	; 0xe3d8 <mmc_test_timeout>
    d9c4:	89 2b       	or	r24, r25
    d9c6:	c9 f3       	breq	.-14     	; 0xd9ba <rcvr_datablock+0x16>
    d9c8:	80 e0       	ldi	r24, 0x00	; 0
    d9ca:	90 e0       	ldi	r25, 0x00	; 0
    d9cc:	0d c0       	rjmp	.+26     	; 0xd9e8 <rcvr_datablock+0x44>
    d9ce:	8e 3f       	cpi	r24, 0xFE	; 254
    d9d0:	d9 f7       	brne	.-10     	; 0xd9c8 <rcvr_datablock+0x24>
    d9d2:	b8 01       	movw	r22, r16
    d9d4:	ce 01       	movw	r24, r28
    d9d6:	f3 d4       	rcall	.+2534   	; 0xe3be <mmc_spi_RX_buffer>
    d9d8:	8f ef       	ldi	r24, 0xFF	; 255
    d9da:	dc df       	rcall	.-72     	; 0xd994 <xchg_spi>
    d9dc:	8f ef       	ldi	r24, 0xFF	; 255
    d9de:	da df       	rcall	.-76     	; 0xd994 <xchg_spi>
    d9e0:	46 98       	cbi	0x08, 6	; 8
    d9e2:	3e 9a       	sbi	0x07, 6	; 7
    d9e4:	81 e0       	ldi	r24, 0x01	; 1
    d9e6:	90 e0       	ldi	r25, 0x00	; 0
    d9e8:	df 91       	pop	r29
    d9ea:	cf 91       	pop	r28
    d9ec:	1f 91       	pop	r17
    d9ee:	0f 91       	pop	r16
    d9f0:	08 95       	ret

0000d9f2 <wait_ready>:
    d9f2:	cf 93       	push	r28
    d9f4:	ea d4       	rcall	.+2516   	; 0xe3ca <mmc_set_ms_timeout>
    d9f6:	8f ef       	ldi	r24, 0xFF	; 255
    d9f8:	e5 d4       	rcall	.+2506   	; 0xe3c4 <mmc_spi_TXRX>
    d9fa:	c8 2f       	mov	r28, r24
    d9fc:	8f 3f       	cpi	r24, 0xFF	; 255
    d9fe:	19 f0       	breq	.+6      	; 0xda06 <wait_ready+0x14>
    da00:	eb d4       	rcall	.+2518   	; 0xe3d8 <mmc_test_timeout>
    da02:	89 2b       	or	r24, r25
    da04:	c1 f3       	breq	.-16     	; 0xd9f6 <wait_ready+0x4>
    da06:	81 e0       	ldi	r24, 0x01	; 1
    da08:	90 e0       	ldi	r25, 0x00	; 0
    da0a:	cf 3f       	cpi	r28, 0xFF	; 255
    da0c:	11 f0       	breq	.+4      	; 0xda12 <wait_ready+0x20>
    da0e:	80 e0       	ldi	r24, 0x00	; 0
    da10:	90 e0       	ldi	r25, 0x00	; 0
    da12:	cf 91       	pop	r28
    da14:	08 95       	ret

0000da16 <select>:
    da16:	cf 93       	push	r28
    da18:	df 93       	push	r29
    da1a:	9e d4       	rcall	.+2364   	; 0xe358 <mmc_spi_begin>
    da1c:	8f ef       	ldi	r24, 0xFF	; 255
    da1e:	ba df       	rcall	.-140    	; 0xd994 <xchg_spi>
    da20:	88 ee       	ldi	r24, 0xE8	; 232
    da22:	93 e0       	ldi	r25, 0x03	; 3
    da24:	e6 df       	rcall	.-52     	; 0xd9f2 <wait_ready>
    da26:	ec 01       	movw	r28, r24
    da28:	89 2b       	or	r24, r25
    da2a:	61 f4       	brne	.+24     	; 0xda44 <select+0x2e>
    da2c:	8c eb       	ldi	r24, 0xBC	; 188
    da2e:	97 e0       	ldi	r25, 0x07	; 7
    da30:	1f 92       	push	r1
    da32:	9f 93       	push	r25
    da34:	8f 93       	push	r24
    da36:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    da3a:	ae df       	rcall	.-164    	; 0xd998 <deselect>
    da3c:	0f 90       	pop	r0
    da3e:	0f 90       	pop	r0
    da40:	0f 90       	pop	r0
    da42:	02 c0       	rjmp	.+4      	; 0xda48 <select+0x32>
    da44:	c1 e0       	ldi	r28, 0x01	; 1
    da46:	d0 e0       	ldi	r29, 0x00	; 0
    da48:	ce 01       	movw	r24, r28
    da4a:	df 91       	pop	r29
    da4c:	cf 91       	pop	r28
    da4e:	08 95       	ret

0000da50 <send_cmd>:
    da50:	ff 92       	push	r15
    da52:	0f 93       	push	r16
    da54:	1f 93       	push	r17
    da56:	cf 93       	push	r28
    da58:	df 93       	push	r29
    da5a:	c8 2f       	mov	r28, r24
    da5c:	d4 2f       	mov	r29, r20
    da5e:	15 2f       	mov	r17, r21
    da60:	06 2f       	mov	r16, r22
    da62:	f7 2e       	mov	r15, r23
    da64:	87 ff       	sbrs	r24, 7
    da66:	08 c0       	rjmp	.+16     	; 0xda78 <send_cmd+0x28>
    da68:	40 e0       	ldi	r20, 0x00	; 0
    da6a:	50 e0       	ldi	r21, 0x00	; 0
    da6c:	ba 01       	movw	r22, r20
    da6e:	87 e3       	ldi	r24, 0x37	; 55
    da70:	ef df       	rcall	.-34     	; 0xda50 <send_cmd>
    da72:	82 30       	cpi	r24, 0x02	; 2
    da74:	58 f5       	brcc	.+86     	; 0xdacc <send_cmd+0x7c>
    da76:	cf 77       	andi	r28, 0x7F	; 127
    da78:	cc 30       	cpi	r28, 0x0C	; 12
    da7a:	71 f4       	brne	.+28     	; 0xda98 <send_cmd+0x48>
    da7c:	8c 2f       	mov	r24, r28
    da7e:	80 64       	ori	r24, 0x40	; 64
    da80:	89 df       	rcall	.-238    	; 0xd994 <xchg_spi>
    da82:	8f 2d       	mov	r24, r15
    da84:	87 df       	rcall	.-242    	; 0xd994 <xchg_spi>
    da86:	80 2f       	mov	r24, r16
    da88:	85 df       	rcall	.-246    	; 0xd994 <xchg_spi>
    da8a:	81 2f       	mov	r24, r17
    da8c:	83 df       	rcall	.-250    	; 0xd994 <xchg_spi>
    da8e:	8d 2f       	mov	r24, r29
    da90:	81 df       	rcall	.-254    	; 0xd994 <xchg_spi>
    da92:	cc 23       	and	r28, r28
    da94:	c9 f0       	breq	.+50     	; 0xdac8 <send_cmd+0x78>
    da96:	06 c0       	rjmp	.+12     	; 0xdaa4 <send_cmd+0x54>
    da98:	7f df       	rcall	.-258    	; 0xd998 <deselect>
    da9a:	bd df       	rcall	.-134    	; 0xda16 <select>
    da9c:	89 2b       	or	r24, r25
    da9e:	71 f7       	brne	.-36     	; 0xda7c <send_cmd+0x2c>
    daa0:	8f ef       	ldi	r24, 0xFF	; 255
    daa2:	14 c0       	rjmp	.+40     	; 0xdacc <send_cmd+0x7c>
    daa4:	c8 30       	cpi	r28, 0x08	; 8
    daa6:	11 f4       	brne	.+4      	; 0xdaac <send_cmd+0x5c>
    daa8:	87 e8       	ldi	r24, 0x87	; 135
    daaa:	01 c0       	rjmp	.+2      	; 0xdaae <send_cmd+0x5e>
    daac:	81 e0       	ldi	r24, 0x01	; 1
    daae:	72 df       	rcall	.-284    	; 0xd994 <xchg_spi>
    dab0:	cc 30       	cpi	r28, 0x0C	; 12
    dab2:	11 f4       	brne	.+4      	; 0xdab8 <send_cmd+0x68>
    dab4:	8f ef       	ldi	r24, 0xFF	; 255
    dab6:	6e df       	rcall	.-292    	; 0xd994 <xchg_spi>
    dab8:	ca e0       	ldi	r28, 0x0A	; 10
    daba:	8f ef       	ldi	r24, 0xFF	; 255
    dabc:	83 d4       	rcall	.+2310   	; 0xe3c4 <mmc_spi_TXRX>
    dabe:	87 ff       	sbrs	r24, 7
    dac0:	05 c0       	rjmp	.+10     	; 0xdacc <send_cmd+0x7c>
    dac2:	c1 50       	subi	r28, 0x01	; 1
    dac4:	d1 f7       	brne	.-12     	; 0xdaba <send_cmd+0x6a>
    dac6:	02 c0       	rjmp	.+4      	; 0xdacc <send_cmd+0x7c>
    dac8:	85 e9       	ldi	r24, 0x95	; 149
    daca:	f5 cf       	rjmp	.-22     	; 0xdab6 <send_cmd+0x66>
    dacc:	cd b7       	in	r28, 0x3d	; 61
    dace:	de b7       	in	r29, 0x3e	; 62
    dad0:	e5 e0       	ldi	r30, 0x05	; 5
    dad2:	0c 94 ea e8 	jmp	0x1d1d4	; 0x1d1d4 <__epilogue_restores__+0x1a>

0000dad6 <xmit_datablock>:
    dad6:	0f 93       	push	r16
    dad8:	1f 93       	push	r17
    dada:	cf 93       	push	r28
    dadc:	8c 01       	movw	r16, r24
    dade:	c6 2f       	mov	r28, r22
    dae0:	47 9a       	sbi	0x08, 7	; 8
    dae2:	3f 9a       	sbi	0x07, 7	; 7
    dae4:	88 ee       	ldi	r24, 0xE8	; 232
    dae6:	93 e0       	ldi	r25, 0x03	; 3
    dae8:	84 df       	rcall	.-248    	; 0xd9f2 <wait_ready>
    daea:	89 2b       	or	r24, r25
    daec:	19 f4       	brne	.+6      	; 0xdaf4 <xmit_datablock+0x1e>
    daee:	80 e0       	ldi	r24, 0x00	; 0
    daf0:	90 e0       	ldi	r25, 0x00	; 0
    daf2:	17 c0       	rjmp	.+46     	; 0xdb22 <xmit_datablock+0x4c>
    daf4:	8c 2f       	mov	r24, r28
    daf6:	4e df       	rcall	.-356    	; 0xd994 <xchg_spi>
    daf8:	cd 3f       	cpi	r28, 0xFD	; 253
    dafa:	29 f4       	brne	.+10     	; 0xdb06 <xmit_datablock+0x30>
    dafc:	46 98       	cbi	0x08, 6	; 8
    dafe:	3e 9a       	sbi	0x07, 6	; 7
    db00:	81 e0       	ldi	r24, 0x01	; 1
    db02:	90 e0       	ldi	r25, 0x00	; 0
    db04:	0e c0       	rjmp	.+28     	; 0xdb22 <xmit_datablock+0x4c>
    db06:	60 e0       	ldi	r22, 0x00	; 0
    db08:	72 e0       	ldi	r23, 0x02	; 2
    db0a:	c8 01       	movw	r24, r16
    db0c:	55 d4       	rcall	.+2218   	; 0xe3b8 <mmc_spi_TX_buffer>
    db0e:	8f ef       	ldi	r24, 0xFF	; 255
    db10:	41 df       	rcall	.-382    	; 0xd994 <xchg_spi>
    db12:	8f ef       	ldi	r24, 0xFF	; 255
    db14:	3f df       	rcall	.-386    	; 0xd994 <xchg_spi>
    db16:	8f ef       	ldi	r24, 0xFF	; 255
    db18:	55 d4       	rcall	.+2218   	; 0xe3c4 <mmc_spi_TXRX>
    db1a:	8f 71       	andi	r24, 0x1F	; 31
    db1c:	85 30       	cpi	r24, 0x05	; 5
    db1e:	39 f7       	brne	.-50     	; 0xdaee <xmit_datablock+0x18>
    db20:	ed cf       	rjmp	.-38     	; 0xdafc <xmit_datablock+0x26>
    db22:	cf 91       	pop	r28
    db24:	1f 91       	pop	r17
    db26:	0f 91       	pop	r16
    db28:	08 95       	ret

0000db2a <mmc_disk_initialize>:
    db2a:	a4 e0       	ldi	r26, 0x04	; 4
    db2c:	b0 e0       	ldi	r27, 0x00	; 0
    db2e:	eb e9       	ldi	r30, 0x9B	; 155
    db30:	fd e6       	ldi	r31, 0x6D	; 109
    db32:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__prologue_saves__+0x14>
    db36:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Stat>
    db3a:	81 fd       	sbrc	r24, 1
    db3c:	8d c0       	rjmp	.+282    	; 0xdc58 <mmc_disk_initialize+0x12e>
    db3e:	1d d4       	rcall	.+2106   	; 0xe37a <mmc_slow>
    db40:	1a e0       	ldi	r17, 0x0A	; 10
    db42:	8f ef       	ldi	r24, 0xFF	; 255
    db44:	27 df       	rcall	.-434    	; 0xd994 <xchg_spi>
    db46:	11 50       	subi	r17, 0x01	; 1
    db48:	e1 f7       	brne	.-8      	; 0xdb42 <mmc_disk_initialize+0x18>
    db4a:	40 e0       	ldi	r20, 0x00	; 0
    db4c:	50 e0       	ldi	r21, 0x00	; 0
    db4e:	ba 01       	movw	r22, r20
    db50:	80 e0       	ldi	r24, 0x00	; 0
    db52:	7e df       	rcall	.-260    	; 0xda50 <send_cmd>
    db54:	81 30       	cpi	r24, 0x01	; 1
    db56:	09 f0       	breq	.+2      	; 0xdb5a <mmc_disk_initialize+0x30>
    db58:	6f c0       	rjmp	.+222    	; 0xdc38 <mmc_disk_initialize+0x10e>
    db5a:	80 ed       	ldi	r24, 0xD0	; 208
    db5c:	97 e0       	ldi	r25, 0x07	; 7
    db5e:	35 d4       	rcall	.+2154   	; 0xe3ca <mmc_set_ms_timeout>
    db60:	4a ea       	ldi	r20, 0xAA	; 170
    db62:	51 e0       	ldi	r21, 0x01	; 1
    db64:	60 e0       	ldi	r22, 0x00	; 0
    db66:	70 e0       	ldi	r23, 0x00	; 0
    db68:	88 e0       	ldi	r24, 0x08	; 8
    db6a:	72 df       	rcall	.-284    	; 0xda50 <send_cmd>
    db6c:	81 30       	cpi	r24, 0x01	; 1
    db6e:	09 f0       	breq	.+2      	; 0xdb72 <mmc_disk_initialize+0x48>
    db70:	3d c0       	rjmp	.+122    	; 0xdbec <mmc_disk_initialize+0xc2>
    db72:	8e 01       	movw	r16, r28
    db74:	0f 5f       	subi	r16, 0xFF	; 255
    db76:	1f 4f       	sbci	r17, 0xFF	; 255
    db78:	6e 01       	movw	r12, r28
    db7a:	85 e0       	ldi	r24, 0x05	; 5
    db7c:	c8 0e       	add	r12, r24
    db7e:	d1 1c       	adc	r13, r1
    db80:	78 01       	movw	r14, r16
    db82:	8f ef       	ldi	r24, 0xFF	; 255
    db84:	1f d4       	rcall	.+2110   	; 0xe3c4 <mmc_spi_TXRX>
    db86:	f7 01       	movw	r30, r14
    db88:	81 93       	st	Z+, r24
    db8a:	7f 01       	movw	r14, r30
    db8c:	ce 16       	cp	r12, r30
    db8e:	df 06       	cpc	r13, r31
    db90:	c1 f7       	brne	.-16     	; 0xdb82 <mmc_disk_initialize+0x58>
    db92:	8b 81       	ldd	r24, Y+3	; 0x03
    db94:	81 30       	cpi	r24, 0x01	; 1
    db96:	09 f0       	breq	.+2      	; 0xdb9a <mmc_disk_initialize+0x70>
    db98:	4f c0       	rjmp	.+158    	; 0xdc38 <mmc_disk_initialize+0x10e>
    db9a:	8c 81       	ldd	r24, Y+4	; 0x04
    db9c:	8a 3a       	cpi	r24, 0xAA	; 170
    db9e:	09 f0       	breq	.+2      	; 0xdba2 <mmc_disk_initialize+0x78>
    dba0:	4b c0       	rjmp	.+150    	; 0xdc38 <mmc_disk_initialize+0x10e>
    dba2:	1a d4       	rcall	.+2100   	; 0xe3d8 <mmc_test_timeout>
    dba4:	89 2b       	or	r24, r25
    dba6:	29 f0       	breq	.+10     	; 0xdbb2 <mmc_disk_initialize+0x88>
    dba8:	17 d4       	rcall	.+2094   	; 0xe3d8 <mmc_test_timeout>
    dbaa:	89 2b       	or	r24, r25
    dbac:	09 f0       	breq	.+2      	; 0xdbb0 <mmc_disk_initialize+0x86>
    dbae:	44 c0       	rjmp	.+136    	; 0xdc38 <mmc_disk_initialize+0x10e>
    dbb0:	09 c0       	rjmp	.+18     	; 0xdbc4 <mmc_disk_initialize+0x9a>
    dbb2:	40 e0       	ldi	r20, 0x00	; 0
    dbb4:	50 e0       	ldi	r21, 0x00	; 0
    dbb6:	60 e0       	ldi	r22, 0x00	; 0
    dbb8:	70 e4       	ldi	r23, 0x40	; 64
    dbba:	89 ea       	ldi	r24, 0xA9	; 169
    dbbc:	49 df       	rcall	.-366    	; 0xda50 <send_cmd>
    dbbe:	81 11       	cpse	r24, r1
    dbc0:	f0 cf       	rjmp	.-32     	; 0xdba2 <mmc_disk_initialize+0x78>
    dbc2:	f2 cf       	rjmp	.-28     	; 0xdba8 <mmc_disk_initialize+0x7e>
    dbc4:	40 e0       	ldi	r20, 0x00	; 0
    dbc6:	50 e0       	ldi	r21, 0x00	; 0
    dbc8:	ba 01       	movw	r22, r20
    dbca:	8a e3       	ldi	r24, 0x3A	; 58
    dbcc:	41 df       	rcall	.-382    	; 0xda50 <send_cmd>
    dbce:	81 11       	cpse	r24, r1
    dbd0:	33 c0       	rjmp	.+102    	; 0xdc38 <mmc_disk_initialize+0x10e>
    dbd2:	8f ef       	ldi	r24, 0xFF	; 255
    dbd4:	f7 d3       	rcall	.+2030   	; 0xe3c4 <mmc_spi_TXRX>
    dbd6:	f8 01       	movw	r30, r16
    dbd8:	81 93       	st	Z+, r24
    dbda:	8f 01       	movw	r16, r30
    dbdc:	ce 16       	cp	r12, r30
    dbde:	df 06       	cpc	r13, r31
    dbe0:	c1 f7       	brne	.-16     	; 0xdbd2 <mmc_disk_initialize+0xa8>
    dbe2:	89 81       	ldd	r24, Y+1	; 0x01
    dbe4:	86 fd       	sbrc	r24, 6
    dbe6:	2a c0       	rjmp	.+84     	; 0xdc3c <mmc_disk_initialize+0x112>
    dbe8:	14 e0       	ldi	r17, 0x04	; 4
    dbea:	29 c0       	rjmp	.+82     	; 0xdc3e <mmc_disk_initialize+0x114>
    dbec:	80 ed       	ldi	r24, 0xD0	; 208
    dbee:	97 e0       	ldi	r25, 0x07	; 7
    dbf0:	ec d3       	rcall	.+2008   	; 0xe3ca <mmc_set_ms_timeout>
    dbf2:	40 e0       	ldi	r20, 0x00	; 0
    dbf4:	50 e0       	ldi	r21, 0x00	; 0
    dbf6:	ba 01       	movw	r22, r20
    dbf8:	89 ea       	ldi	r24, 0xA9	; 169
    dbfa:	2a df       	rcall	.-428    	; 0xda50 <send_cmd>
    dbfc:	82 30       	cpi	r24, 0x02	; 2
    dbfe:	18 f0       	brcs	.+6      	; 0xdc06 <mmc_disk_initialize+0xdc>
    dc00:	11 e0       	ldi	r17, 0x01	; 1
    dc02:	01 e0       	ldi	r16, 0x01	; 1
    dc04:	02 c0       	rjmp	.+4      	; 0xdc0a <mmc_disk_initialize+0xe0>
    dc06:	12 e0       	ldi	r17, 0x02	; 2
    dc08:	09 ea       	ldi	r16, 0xA9	; 169
    dc0a:	e6 d3       	rcall	.+1996   	; 0xe3d8 <mmc_test_timeout>
    dc0c:	89 2b       	or	r24, r25
    dc0e:	21 f0       	breq	.+8      	; 0xdc18 <mmc_disk_initialize+0xee>
    dc10:	e3 d3       	rcall	.+1990   	; 0xe3d8 <mmc_test_timeout>
    dc12:	89 2b       	or	r24, r25
    dc14:	89 f4       	brne	.+34     	; 0xdc38 <mmc_disk_initialize+0x10e>
    dc16:	08 c0       	rjmp	.+16     	; 0xdc28 <mmc_disk_initialize+0xfe>
    dc18:	40 e0       	ldi	r20, 0x00	; 0
    dc1a:	50 e0       	ldi	r21, 0x00	; 0
    dc1c:	ba 01       	movw	r22, r20
    dc1e:	80 2f       	mov	r24, r16
    dc20:	17 df       	rcall	.-466    	; 0xda50 <send_cmd>
    dc22:	81 11       	cpse	r24, r1
    dc24:	f2 cf       	rjmp	.-28     	; 0xdc0a <mmc_disk_initialize+0xe0>
    dc26:	f4 cf       	rjmp	.-24     	; 0xdc10 <mmc_disk_initialize+0xe6>
    dc28:	40 e0       	ldi	r20, 0x00	; 0
    dc2a:	52 e0       	ldi	r21, 0x02	; 2
    dc2c:	60 e0       	ldi	r22, 0x00	; 0
    dc2e:	70 e0       	ldi	r23, 0x00	; 0
    dc30:	80 e1       	ldi	r24, 0x10	; 16
    dc32:	0e df       	rcall	.-484    	; 0xda50 <send_cmd>
    dc34:	88 23       	and	r24, r24
    dc36:	19 f0       	breq	.+6      	; 0xdc3e <mmc_disk_initialize+0x114>
    dc38:	10 e0       	ldi	r17, 0x00	; 0
    dc3a:	01 c0       	rjmp	.+2      	; 0xdc3e <mmc_disk_initialize+0x114>
    dc3c:	1c e0       	ldi	r17, 0x0C	; 12
    dc3e:	10 93 da 17 	sts	0x17DA, r17	; 0x8017da <CardType>
    dc42:	aa de       	rcall	.-684    	; 0xd998 <deselect>
    dc44:	11 23       	and	r17, r17
    dc46:	39 f0       	breq	.+14     	; 0xdc56 <mmc_disk_initialize+0x12c>
    dc48:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Stat>
    dc4c:	8e 7f       	andi	r24, 0xFE	; 254
    dc4e:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <Stat>
    dc52:	a5 d3       	rcall	.+1866   	; 0xe39e <mmc_fast>
    dc54:	01 c0       	rjmp	.+2      	; 0xdc58 <mmc_disk_initialize+0x12e>
    dc56:	84 d4       	rcall	.+2312   	; 0xe560 <mmc_power_off>
    dc58:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Stat>
    dc5c:	24 96       	adiw	r28, 0x04	; 4
    dc5e:	e8 e0       	ldi	r30, 0x08	; 8
    dc60:	0c 94 e7 e8 	jmp	0x1d1ce	; 0x1d1ce <__epilogue_restores__+0x14>

0000dc64 <mmc_disk_status>:
    dc64:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Stat>
    dc68:	08 95       	ret

0000dc6a <mmc_disk_read>:
    dc6a:	ef 92       	push	r14
    dc6c:	ff 92       	push	r15
    dc6e:	1f 93       	push	r17
    dc70:	cf 93       	push	r28
    dc72:	df 93       	push	r29
    dc74:	7c 01       	movw	r14, r24
    dc76:	e9 01       	movw	r28, r18
    dc78:	20 97       	sbiw	r28, 0x00	; 0
    dc7a:	19 f4       	brne	.+6      	; 0xdc82 <mmc_disk_read+0x18>
    dc7c:	8d de       	rcall	.-742    	; 0xd998 <deselect>
    dc7e:	84 e0       	ldi	r24, 0x04	; 4
    dc80:	06 c0       	rjmp	.+12     	; 0xdc8e <mmc_disk_read+0x24>
    dc82:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Stat>
    dc86:	80 ff       	sbrs	r24, 0
    dc88:	04 c0       	rjmp	.+8      	; 0xdc92 <mmc_disk_read+0x28>
    dc8a:	86 de       	rcall	.-756    	; 0xd998 <deselect>
    dc8c:	83 e0       	ldi	r24, 0x03	; 3
    dc8e:	90 e0       	ldi	r25, 0x00	; 0
    dc90:	2c c0       	rjmp	.+88     	; 0xdcea <mmc_disk_read+0x80>
    dc92:	80 91 da 17 	lds	r24, 0x17DA	; 0x8017da <CardType>
    dc96:	83 fd       	sbrc	r24, 3
    dc98:	07 c0       	rjmp	.+14     	; 0xdca8 <mmc_disk_read+0x3e>
    dc9a:	89 e0       	ldi	r24, 0x09	; 9
    dc9c:	44 0f       	add	r20, r20
    dc9e:	55 1f       	adc	r21, r21
    dca0:	66 1f       	adc	r22, r22
    dca2:	77 1f       	adc	r23, r23
    dca4:	8a 95       	dec	r24
    dca6:	d1 f7       	brne	.-12     	; 0xdc9c <mmc_disk_read+0x32>
    dca8:	c2 30       	cpi	r28, 0x02	; 2
    dcaa:	d1 05       	cpc	r29, r1
    dcac:	10 f4       	brcc	.+4      	; 0xdcb2 <mmc_disk_read+0x48>
    dcae:	11 e1       	ldi	r17, 0x11	; 17
    dcb0:	01 c0       	rjmp	.+2      	; 0xdcb4 <mmc_disk_read+0x4a>
    dcb2:	12 e1       	ldi	r17, 0x12	; 18
    dcb4:	81 2f       	mov	r24, r17
    dcb6:	cc de       	rcall	.-616    	; 0xda50 <send_cmd>
    dcb8:	81 11       	cpse	r24, r1
    dcba:	11 c0       	rjmp	.+34     	; 0xdcde <mmc_disk_read+0x74>
    dcbc:	60 e0       	ldi	r22, 0x00	; 0
    dcbe:	72 e0       	ldi	r23, 0x02	; 2
    dcc0:	c7 01       	movw	r24, r14
    dcc2:	70 de       	rcall	.-800    	; 0xd9a4 <rcvr_datablock>
    dcc4:	89 2b       	or	r24, r25
    dcc6:	21 f0       	breq	.+8      	; 0xdcd0 <mmc_disk_read+0x66>
    dcc8:	8e ef       	ldi	r24, 0xFE	; 254
    dcca:	f8 1a       	sub	r15, r24
    dccc:	21 97       	sbiw	r28, 0x01	; 1
    dcce:	b1 f7       	brne	.-20     	; 0xdcbc <mmc_disk_read+0x52>
    dcd0:	12 31       	cpi	r17, 0x12	; 18
    dcd2:	29 f4       	brne	.+10     	; 0xdcde <mmc_disk_read+0x74>
    dcd4:	40 e0       	ldi	r20, 0x00	; 0
    dcd6:	50 e0       	ldi	r21, 0x00	; 0
    dcd8:	ba 01       	movw	r22, r20
    dcda:	8c e0       	ldi	r24, 0x0C	; 12
    dcdc:	b9 de       	rcall	.-654    	; 0xda50 <send_cmd>
    dcde:	5c de       	rcall	.-840    	; 0xd998 <deselect>
    dce0:	81 e0       	ldi	r24, 0x01	; 1
    dce2:	90 e0       	ldi	r25, 0x00	; 0
    dce4:	cd 2b       	or	r28, r29
    dce6:	09 f4       	brne	.+2      	; 0xdcea <mmc_disk_read+0x80>
    dce8:	80 e0       	ldi	r24, 0x00	; 0
    dcea:	df 91       	pop	r29
    dcec:	cf 91       	pop	r28
    dcee:	1f 91       	pop	r17
    dcf0:	ff 90       	pop	r15
    dcf2:	ef 90       	pop	r14
    dcf4:	08 95       	ret

0000dcf6 <mmc_disk_write>:
    dcf6:	a0 e0       	ldi	r26, 0x00	; 0
    dcf8:	b0 e0       	ldi	r27, 0x00	; 0
    dcfa:	e1 e8       	ldi	r30, 0x81	; 129
    dcfc:	fe e6       	ldi	r31, 0x6E	; 110
    dcfe:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__prologue_saves__+0x14>
    dd02:	8c 01       	movw	r16, r24
    dd04:	6a 01       	movw	r12, r20
    dd06:	7b 01       	movw	r14, r22
    dd08:	e9 01       	movw	r28, r18
    dd0a:	20 97       	sbiw	r28, 0x00	; 0
    dd0c:	19 f4       	brne	.+6      	; 0xdd14 <mmc_disk_write+0x1e>
    dd0e:	44 de       	rcall	.-888    	; 0xd998 <deselect>
    dd10:	84 e0       	ldi	r24, 0x04	; 4
    dd12:	06 c0       	rjmp	.+12     	; 0xdd20 <mmc_disk_write+0x2a>
    dd14:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Stat>
    dd18:	80 ff       	sbrs	r24, 0
    dd1a:	04 c0       	rjmp	.+8      	; 0xdd24 <mmc_disk_write+0x2e>
    dd1c:	3d de       	rcall	.-902    	; 0xd998 <deselect>
    dd1e:	83 e0       	ldi	r24, 0x03	; 3
    dd20:	90 e0       	ldi	r25, 0x00	; 0
    dd22:	49 c0       	rjmp	.+146    	; 0xddb6 <mmc_disk_write+0xc0>
    dd24:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Stat>
    dd28:	82 ff       	sbrs	r24, 2
    dd2a:	03 c0       	rjmp	.+6      	; 0xdd32 <mmc_disk_write+0x3c>
    dd2c:	35 de       	rcall	.-918    	; 0xd998 <deselect>
    dd2e:	82 e0       	ldi	r24, 0x02	; 2
    dd30:	f7 cf       	rjmp	.-18     	; 0xdd20 <mmc_disk_write+0x2a>
    dd32:	80 91 da 17 	lds	r24, 0x17DA	; 0x8017da <CardType>
    dd36:	83 fd       	sbrc	r24, 3
    dd38:	07 c0       	rjmp	.+14     	; 0xdd48 <mmc_disk_write+0x52>
    dd3a:	99 e0       	ldi	r25, 0x09	; 9
    dd3c:	cc 0c       	add	r12, r12
    dd3e:	dd 1c       	adc	r13, r13
    dd40:	ee 1c       	adc	r14, r14
    dd42:	ff 1c       	adc	r15, r15
    dd44:	9a 95       	dec	r25
    dd46:	d1 f7       	brne	.-12     	; 0xdd3c <mmc_disk_write+0x46>
    dd48:	c1 30       	cpi	r28, 0x01	; 1
    dd4a:	d1 05       	cpc	r29, r1
    dd4c:	89 f4       	brne	.+34     	; 0xdd70 <mmc_disk_write+0x7a>
    dd4e:	b7 01       	movw	r22, r14
    dd50:	a6 01       	movw	r20, r12
    dd52:	88 e1       	ldi	r24, 0x18	; 24
    dd54:	7d de       	rcall	.-774    	; 0xda50 <send_cmd>
    dd56:	81 11       	cpse	r24, r1
    dd58:	26 c0       	rjmp	.+76     	; 0xdda6 <mmc_disk_write+0xb0>
    dd5a:	6e ef       	ldi	r22, 0xFE	; 254
    dd5c:	c8 01       	movw	r24, r16
    dd5e:	bb de       	rcall	.-650    	; 0xdad6 <xmit_datablock>
    dd60:	31 e0       	ldi	r19, 0x01	; 1
    dd62:	20 e0       	ldi	r18, 0x00	; 0
    dd64:	89 2b       	or	r24, r25
    dd66:	09 f0       	breq	.+2      	; 0xdd6a <mmc_disk_write+0x74>
    dd68:	30 e0       	ldi	r19, 0x00	; 0
    dd6a:	c3 2f       	mov	r28, r19
    dd6c:	d2 2f       	mov	r29, r18
    dd6e:	1d c0       	rjmp	.+58     	; 0xddaa <mmc_disk_write+0xb4>
    dd70:	86 70       	andi	r24, 0x06	; 6
    dd72:	29 f0       	breq	.+10     	; 0xdd7e <mmc_disk_write+0x88>
    dd74:	ae 01       	movw	r20, r28
    dd76:	60 e0       	ldi	r22, 0x00	; 0
    dd78:	70 e0       	ldi	r23, 0x00	; 0
    dd7a:	87 e9       	ldi	r24, 0x97	; 151
    dd7c:	69 de       	rcall	.-814    	; 0xda50 <send_cmd>
    dd7e:	b7 01       	movw	r22, r14
    dd80:	a6 01       	movw	r20, r12
    dd82:	89 e1       	ldi	r24, 0x19	; 25
    dd84:	65 de       	rcall	.-822    	; 0xda50 <send_cmd>
    dd86:	81 11       	cpse	r24, r1
    dd88:	10 c0       	rjmp	.+32     	; 0xddaa <mmc_disk_write+0xb4>
    dd8a:	6c ef       	ldi	r22, 0xFC	; 252
    dd8c:	c8 01       	movw	r24, r16
    dd8e:	a3 de       	rcall	.-698    	; 0xdad6 <xmit_datablock>
    dd90:	89 2b       	or	r24, r25
    dd92:	19 f0       	breq	.+6      	; 0xdd9a <mmc_disk_write+0xa4>
    dd94:	1e 5f       	subi	r17, 0xFE	; 254
    dd96:	21 97       	sbiw	r28, 0x01	; 1
    dd98:	c1 f7       	brne	.-16     	; 0xdd8a <mmc_disk_write+0x94>
    dd9a:	6d ef       	ldi	r22, 0xFD	; 253
    dd9c:	80 e0       	ldi	r24, 0x00	; 0
    dd9e:	90 e0       	ldi	r25, 0x00	; 0
    dda0:	9a de       	rcall	.-716    	; 0xdad6 <xmit_datablock>
    dda2:	89 2b       	or	r24, r25
    dda4:	11 f4       	brne	.+4      	; 0xddaa <mmc_disk_write+0xb4>
    dda6:	c1 e0       	ldi	r28, 0x01	; 1
    dda8:	d0 e0       	ldi	r29, 0x00	; 0
    ddaa:	f6 dd       	rcall	.-1044   	; 0xd998 <deselect>
    ddac:	81 e0       	ldi	r24, 0x01	; 1
    ddae:	90 e0       	ldi	r25, 0x00	; 0
    ddb0:	cd 2b       	or	r28, r29
    ddb2:	09 f4       	brne	.+2      	; 0xddb6 <mmc_disk_write+0xc0>
    ddb4:	80 e0       	ldi	r24, 0x00	; 0
    ddb6:	cd b7       	in	r28, 0x3d	; 61
    ddb8:	de b7       	in	r29, 0x3e	; 62
    ddba:	e8 e0       	ldi	r30, 0x08	; 8
    ddbc:	0c 94 e7 e8 	jmp	0x1d1ce	; 0x1d1ce <__epilogue_restores__+0x14>

0000ddc0 <mmc_disk_ioctl>:
    ddc0:	a0 e1       	ldi	r26, 0x10	; 16
    ddc2:	b0 e0       	ldi	r27, 0x00	; 0
    ddc4:	e6 ee       	ldi	r30, 0xE6	; 230
    ddc6:	fe e6       	ldi	r31, 0x6E	; 110
    ddc8:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__prologue_saves__+0x14>
    ddcc:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <Stat>
    ddd0:	90 fd       	sbrc	r25, 0
    ddd2:	75 c2       	rjmp	.+1258   	; 0xe2be <mmc_disk_ioctl+0x4fe>
    ddd4:	8b 01       	movw	r16, r22
    ddd6:	83 33       	cpi	r24, 0x33	; 51
    ddd8:	09 f4       	brne	.+2      	; 0xdddc <mmc_disk_ioctl+0x1c>
    ddda:	4b c1       	rjmp	.+662    	; 0xe072 <mmc_disk_ioctl+0x2b2>
    dddc:	98 f4       	brcc	.+38     	; 0xde04 <mmc_disk_ioctl+0x44>
    ddde:	83 30       	cpi	r24, 0x03	; 3
    dde0:	09 f4       	brne	.+2      	; 0xdde4 <mmc_disk_ioctl+0x24>
    dde2:	84 c0       	rjmp	.+264    	; 0xdeec <mmc_disk_ioctl+0x12c>
    dde4:	28 f4       	brcc	.+10     	; 0xddf0 <mmc_disk_ioctl+0x30>
    dde6:	88 23       	and	r24, r24
    dde8:	09 f1       	breq	.+66     	; 0xde2c <mmc_disk_ioctl+0x6c>
    ddea:	81 30       	cpi	r24, 0x01	; 1
    ddec:	09 f1       	breq	.+66     	; 0xde30 <mmc_disk_ioctl+0x70>
    ddee:	69 c2       	rjmp	.+1234   	; 0xe2c2 <mmc_disk_ioctl+0x502>
    ddf0:	87 30       	cpi	r24, 0x07	; 7
    ddf2:	09 f4       	brne	.+2      	; 0xddf6 <mmc_disk_ioctl+0x36>
    ddf4:	74 c1       	rjmp	.+744    	; 0xe0de <mmc_disk_ioctl+0x31e>
    ddf6:	82 33       	cpi	r24, 0x32	; 50
    ddf8:	09 f4       	brne	.+2      	; 0xddfc <mmc_disk_ioctl+0x3c>
    ddfa:	36 c1       	rjmp	.+620    	; 0xe068 <mmc_disk_ioctl+0x2a8>
    ddfc:	84 30       	cpi	r24, 0x04	; 4
    ddfe:	09 f0       	breq	.+2      	; 0xde02 <mmc_disk_ioctl+0x42>
    de00:	60 c2       	rjmp	.+1216   	; 0xe2c2 <mmc_disk_ioctl+0x502>
    de02:	ec c0       	rjmp	.+472    	; 0xdfdc <mmc_disk_ioctl+0x21c>
    de04:	86 33       	cpi	r24, 0x36	; 54
    de06:	09 f4       	brne	.+2      	; 0xde0a <mmc_disk_ioctl+0x4a>
    de08:	57 c1       	rjmp	.+686    	; 0xe0b8 <mmc_disk_ioctl+0x2f8>
    de0a:	38 f4       	brcc	.+14     	; 0xde1a <mmc_disk_ioctl+0x5a>
    de0c:	84 33       	cpi	r24, 0x34	; 52
    de0e:	09 f4       	brne	.+2      	; 0xde12 <mmc_disk_ioctl+0x52>
    de10:	35 c1       	rjmp	.+618    	; 0xe07c <mmc_disk_ioctl+0x2bc>
    de12:	85 33       	cpi	r24, 0x35	; 53
    de14:	09 f4       	brne	.+2      	; 0xde18 <mmc_disk_ioctl+0x58>
    de16:	3c c1       	rjmp	.+632    	; 0xe090 <mmc_disk_ioctl+0x2d0>
    de18:	54 c2       	rjmp	.+1192   	; 0xe2c2 <mmc_disk_ioctl+0x502>
    de1a:	88 33       	cpi	r24, 0x38	; 56
    de1c:	09 f4       	brne	.+2      	; 0xde20 <mmc_disk_ioctl+0x60>
    de1e:	bf c1       	rjmp	.+894    	; 0xe19e <mmc_disk_ioctl+0x3de>
    de20:	08 f4       	brcc	.+2      	; 0xde24 <mmc_disk_ioctl+0x64>
    de22:	65 c1       	rjmp	.+714    	; 0xe0ee <mmc_disk_ioctl+0x32e>
    de24:	89 33       	cpi	r24, 0x39	; 57
    de26:	09 f4       	brne	.+2      	; 0xde2a <mmc_disk_ioctl+0x6a>
    de28:	07 c2       	rjmp	.+1038   	; 0xe238 <mmc_disk_ioctl+0x478>
    de2a:	4b c2       	rjmp	.+1174   	; 0xe2c2 <mmc_disk_ioctl+0x502>
    de2c:	f4 dd       	rcall	.-1048   	; 0xda16 <select>
    de2e:	51 c1       	rjmp	.+674    	; 0xe0d2 <mmc_disk_ioctl+0x312>
    de30:	40 e0       	ldi	r20, 0x00	; 0
    de32:	50 e0       	ldi	r21, 0x00	; 0
    de34:	ba 01       	movw	r22, r20
    de36:	89 e0       	ldi	r24, 0x09	; 9
    de38:	0b de       	rcall	.-1002   	; 0xda50 <send_cmd>
    de3a:	81 11       	cpse	r24, r1
    de3c:	3c c2       	rjmp	.+1144   	; 0xe2b6 <mmc_disk_ioctl+0x4f6>
    de3e:	60 e1       	ldi	r22, 0x10	; 16
    de40:	70 e0       	ldi	r23, 0x00	; 0
    de42:	ce 01       	movw	r24, r28
    de44:	01 96       	adiw	r24, 0x01	; 1
    de46:	ae dd       	rcall	.-1188   	; 0xd9a4 <rcvr_datablock>
    de48:	89 2b       	or	r24, r25
    de4a:	09 f4       	brne	.+2      	; 0xde4e <mmc_disk_ioctl+0x8e>
    de4c:	34 c2       	rjmp	.+1128   	; 0xe2b6 <mmc_disk_ioctl+0x4f6>
    de4e:	99 81       	ldd	r25, Y+1	; 0x01
    de50:	92 95       	swap	r25
    de52:	96 95       	lsr	r25
    de54:	96 95       	lsr	r25
    de56:	93 70       	andi	r25, 0x03	; 3
    de58:	29 85       	ldd	r18, Y+9	; 0x09
    de5a:	4a 85       	ldd	r20, Y+10	; 0x0a
    de5c:	88 85       	ldd	r24, Y+8	; 0x08
    de5e:	91 30       	cpi	r25, 0x01	; 1
    de60:	d9 f4       	brne	.+54     	; 0xde98 <mmc_disk_ioctl+0xd8>
    de62:	30 e0       	ldi	r19, 0x00	; 0
    de64:	32 2f       	mov	r19, r18
    de66:	22 27       	eor	r18, r18
    de68:	24 0f       	add	r18, r20
    de6a:	31 1d       	adc	r19, r1
    de6c:	8f 73       	andi	r24, 0x3F	; 63
    de6e:	90 e0       	ldi	r25, 0x00	; 0
    de70:	a0 e0       	ldi	r26, 0x00	; 0
    de72:	b0 e0       	ldi	r27, 0x00	; 0
    de74:	dc 01       	movw	r26, r24
    de76:	99 27       	eor	r25, r25
    de78:	88 27       	eor	r24, r24
    de7a:	01 96       	adiw	r24, 0x01	; 1
    de7c:	a1 1d       	adc	r26, r1
    de7e:	b1 1d       	adc	r27, r1
    de80:	82 0f       	add	r24, r18
    de82:	93 1f       	adc	r25, r19
    de84:	a1 1d       	adc	r26, r1
    de86:	b1 1d       	adc	r27, r1
    de88:	5a e0       	ldi	r21, 0x0A	; 10
    de8a:	88 0f       	add	r24, r24
    de8c:	99 1f       	adc	r25, r25
    de8e:	aa 1f       	adc	r26, r26
    de90:	bb 1f       	adc	r27, r27
    de92:	5a 95       	dec	r21
    de94:	d1 f7       	brne	.-12     	; 0xde8a <mmc_disk_ioctl+0xca>
    de96:	9b c0       	rjmp	.+310    	; 0xdfce <mmc_disk_ioctl+0x20e>
    de98:	22 95       	swap	r18
    de9a:	26 95       	lsr	r18
    de9c:	26 95       	lsr	r18
    de9e:	23 70       	andi	r18, 0x03	; 3
    dea0:	f4 e0       	ldi	r31, 0x04	; 4
    dea2:	8f 9f       	mul	r24, r31
    dea4:	c0 01       	movw	r24, r0
    dea6:	11 24       	eor	r1, r1
    dea8:	82 0f       	add	r24, r18
    deaa:	91 1d       	adc	r25, r1
    deac:	01 96       	adiw	r24, 0x01	; 1
    deae:	2f 81       	ldd	r18, Y+7	; 0x07
    deb0:	23 70       	andi	r18, 0x03	; 3
    deb2:	30 e0       	ldi	r19, 0x00	; 0
    deb4:	32 2f       	mov	r19, r18
    deb6:	22 27       	eor	r18, r18
    deb8:	33 0f       	add	r19, r19
    deba:	33 0f       	add	r19, r19
    debc:	82 0f       	add	r24, r18
    debe:	93 1f       	adc	r25, r19
    dec0:	a0 e0       	ldi	r26, 0x00	; 0
    dec2:	b0 e0       	ldi	r27, 0x00	; 0
    dec4:	2e 81       	ldd	r18, Y+6	; 0x06
    dec6:	32 2f       	mov	r19, r18
    dec8:	3f 70       	andi	r19, 0x0F	; 15
    deca:	2b 85       	ldd	r18, Y+11	; 0x0b
    decc:	22 1f       	adc	r18, r18
    dece:	22 27       	eor	r18, r18
    ded0:	22 1f       	adc	r18, r18
    ded2:	23 0f       	add	r18, r19
    ded4:	43 70       	andi	r20, 0x03	; 3
    ded6:	44 0f       	add	r20, r20
    ded8:	42 0f       	add	r20, r18
    deda:	47 50       	subi	r20, 0x07	; 7
    dedc:	04 c0       	rjmp	.+8      	; 0xdee6 <mmc_disk_ioctl+0x126>
    dede:	88 0f       	add	r24, r24
    dee0:	99 1f       	adc	r25, r25
    dee2:	aa 1f       	adc	r26, r26
    dee4:	bb 1f       	adc	r27, r27
    dee6:	4a 95       	dec	r20
    dee8:	d2 f7       	brpl	.-12     	; 0xdede <mmc_disk_ioctl+0x11e>
    deea:	71 c0       	rjmp	.+226    	; 0xdfce <mmc_disk_ioctl+0x20e>
    deec:	80 91 da 17 	lds	r24, 0x17DA	; 0x8017da <CardType>
    def0:	40 e0       	ldi	r20, 0x00	; 0
    def2:	50 e0       	ldi	r21, 0x00	; 0
    def4:	ba 01       	movw	r22, r20
    def6:	82 ff       	sbrs	r24, 2
    def8:	24 c0       	rjmp	.+72     	; 0xdf42 <mmc_disk_ioctl+0x182>
    defa:	8d e8       	ldi	r24, 0x8D	; 141
    defc:	a9 dd       	rcall	.-1198   	; 0xda50 <send_cmd>
    defe:	81 11       	cpse	r24, r1
    df00:	da c1       	rjmp	.+948    	; 0xe2b6 <mmc_disk_ioctl+0x4f6>
    df02:	8f ef       	ldi	r24, 0xFF	; 255
    df04:	47 dd       	rcall	.-1394   	; 0xd994 <xchg_spi>
    df06:	60 e1       	ldi	r22, 0x10	; 16
    df08:	70 e0       	ldi	r23, 0x00	; 0
    df0a:	ce 01       	movw	r24, r28
    df0c:	01 96       	adiw	r24, 0x01	; 1
    df0e:	4a dd       	rcall	.-1388   	; 0xd9a4 <rcvr_datablock>
    df10:	89 2b       	or	r24, r25
    df12:	09 f4       	brne	.+2      	; 0xdf16 <mmc_disk_ioctl+0x156>
    df14:	d0 c1       	rjmp	.+928    	; 0xe2b6 <mmc_disk_ioctl+0x4f6>
    df16:	a0 e3       	ldi	r26, 0x30	; 48
    df18:	fa 2e       	mov	r15, r26
    df1a:	8f ef       	ldi	r24, 0xFF	; 255
    df1c:	3b dd       	rcall	.-1418   	; 0xd994 <xchg_spi>
    df1e:	fa 94       	dec	r15
    df20:	f1 10       	cpse	r15, r1
    df22:	fb cf       	rjmp	.-10     	; 0xdf1a <mmc_disk_ioctl+0x15a>
    df24:	2b 85       	ldd	r18, Y+11	; 0x0b
    df26:	22 95       	swap	r18
    df28:	2f 70       	andi	r18, 0x0F	; 15
    df2a:	80 e1       	ldi	r24, 0x10	; 16
    df2c:	90 e0       	ldi	r25, 0x00	; 0
    df2e:	a0 e0       	ldi	r26, 0x00	; 0
    df30:	b0 e0       	ldi	r27, 0x00	; 0
    df32:	04 c0       	rjmp	.+8      	; 0xdf3c <mmc_disk_ioctl+0x17c>
    df34:	88 0f       	add	r24, r24
    df36:	99 1f       	adc	r25, r25
    df38:	aa 1f       	adc	r26, r26
    df3a:	bb 1f       	adc	r27, r27
    df3c:	2a 95       	dec	r18
    df3e:	d2 f7       	brpl	.-12     	; 0xdf34 <mmc_disk_ioctl+0x174>
    df40:	46 c0       	rjmp	.+140    	; 0xdfce <mmc_disk_ioctl+0x20e>
    df42:	89 e0       	ldi	r24, 0x09	; 9
    df44:	85 dd       	rcall	.-1270   	; 0xda50 <send_cmd>
    df46:	81 11       	cpse	r24, r1
    df48:	b6 c1       	rjmp	.+876    	; 0xe2b6 <mmc_disk_ioctl+0x4f6>
    df4a:	60 e1       	ldi	r22, 0x10	; 16
    df4c:	70 e0       	ldi	r23, 0x00	; 0
    df4e:	ce 01       	movw	r24, r28
    df50:	01 96       	adiw	r24, 0x01	; 1
    df52:	28 dd       	rcall	.-1456   	; 0xd9a4 <rcvr_datablock>
    df54:	89 2b       	or	r24, r25
    df56:	09 f4       	brne	.+2      	; 0xdf5a <mmc_disk_ioctl+0x19a>
    df58:	ae c1       	rjmp	.+860    	; 0xe2b6 <mmc_disk_ioctl+0x4f6>
    df5a:	90 91 da 17 	lds	r25, 0x17DA	; 0x8017da <CardType>
    df5e:	2b 85       	ldd	r18, Y+11	; 0x0b
    df60:	8c 85       	ldd	r24, Y+12	; 0x0c
    df62:	91 ff       	sbrs	r25, 1
    df64:	16 c0       	rjmp	.+44     	; 0xdf92 <mmc_disk_ioctl+0x1d2>
    df66:	2f 73       	andi	r18, 0x3F	; 63
    df68:	88 1f       	adc	r24, r24
    df6a:	88 27       	eor	r24, r24
    df6c:	88 1f       	adc	r24, r24
    df6e:	90 e0       	ldi	r25, 0x00	; 0
    df70:	01 96       	adiw	r24, 0x01	; 1
    df72:	82 0f       	add	r24, r18
    df74:	91 1d       	adc	r25, r1
    df76:	82 0f       	add	r24, r18
    df78:	91 1d       	adc	r25, r1
    df7a:	2e 85       	ldd	r18, Y+14	; 0x0e
    df7c:	22 95       	swap	r18
    df7e:	26 95       	lsr	r18
    df80:	26 95       	lsr	r18
    df82:	23 70       	andi	r18, 0x03	; 3
    df84:	21 50       	subi	r18, 0x01	; 1
    df86:	02 c0       	rjmp	.+4      	; 0xdf8c <mmc_disk_ioctl+0x1cc>
    df88:	88 0f       	add	r24, r24
    df8a:	99 1f       	adc	r25, r25
    df8c:	2a 95       	dec	r18
    df8e:	e2 f7       	brpl	.-8      	; 0xdf88 <mmc_disk_ioctl+0x1c8>
    df90:	1c c0       	rjmp	.+56     	; 0xdfca <mmc_disk_ioctl+0x20a>
    df92:	38 2f       	mov	r19, r24
    df94:	33 70       	andi	r19, 0x03	; 3
    df96:	82 95       	swap	r24
    df98:	86 95       	lsr	r24
    df9a:	87 70       	andi	r24, 0x07	; 7
    df9c:	90 e0       	ldi	r25, 0x00	; 0
    df9e:	f8 e0       	ldi	r31, 0x08	; 8
    dfa0:	3f 9f       	mul	r19, r31
    dfa2:	80 0d       	add	r24, r0
    dfa4:	91 1d       	adc	r25, r1
    dfa6:	11 24       	eor	r1, r1
    dfa8:	01 96       	adiw	r24, 0x01	; 1
    dfaa:	2c 77       	andi	r18, 0x7C	; 124
    dfac:	30 e0       	ldi	r19, 0x00	; 0
    dfae:	35 95       	asr	r19
    dfb0:	27 95       	ror	r18
    dfb2:	35 95       	asr	r19
    dfb4:	27 95       	ror	r18
    dfb6:	2f 5f       	subi	r18, 0xFF	; 255
    dfb8:	3f 4f       	sbci	r19, 0xFF	; 255
    dfba:	82 9f       	mul	r24, r18
    dfbc:	a0 01       	movw	r20, r0
    dfbe:	83 9f       	mul	r24, r19
    dfc0:	50 0d       	add	r21, r0
    dfc2:	92 9f       	mul	r25, r18
    dfc4:	50 0d       	add	r21, r0
    dfc6:	11 24       	eor	r1, r1
    dfc8:	ca 01       	movw	r24, r20
    dfca:	a0 e0       	ldi	r26, 0x00	; 0
    dfcc:	b0 e0       	ldi	r27, 0x00	; 0
    dfce:	f8 01       	movw	r30, r16
    dfd0:	80 83       	st	Z, r24
    dfd2:	91 83       	std	Z+1, r25	; 0x01
    dfd4:	a2 83       	std	Z+2, r26	; 0x02
    dfd6:	b3 83       	std	Z+3, r27	; 0x03
    dfd8:	00 e0       	ldi	r16, 0x00	; 0
    dfda:	6e c1       	rjmp	.+732    	; 0xe2b8 <mmc_disk_ioctl+0x4f8>
    dfdc:	80 91 da 17 	lds	r24, 0x17DA	; 0x8017da <CardType>
    dfe0:	86 70       	andi	r24, 0x06	; 6
    dfe2:	11 f4       	brne	.+4      	; 0xdfe8 <mmc_disk_ioctl+0x228>
    dfe4:	01 e0       	ldi	r16, 0x01	; 1
    dfe6:	6e c1       	rjmp	.+732    	; 0xe2c4 <mmc_disk_ioctl+0x504>
    dfe8:	be 01       	movw	r22, r28
    dfea:	6f 5f       	subi	r22, 0xFF	; 255
    dfec:	7f 4f       	sbci	r23, 0xFF	; 255
    dfee:	83 e3       	ldi	r24, 0x33	; 51
    dff0:	e7 de       	rcall	.-562    	; 0xddc0 <mmc_disk_ioctl>
    dff2:	89 2b       	or	r24, r25
    dff4:	b9 f7       	brne	.-18     	; 0xdfe4 <mmc_disk_ioctl+0x224>
    dff6:	89 81       	ldd	r24, Y+1	; 0x01
    dff8:	82 95       	swap	r24
    dffa:	86 95       	lsr	r24
    dffc:	86 95       	lsr	r24
    dffe:	83 70       	andi	r24, 0x03	; 3
    e000:	19 f4       	brne	.+6      	; 0xe008 <mmc_disk_ioctl+0x248>
    e002:	8b 85       	ldd	r24, Y+11	; 0x0b
    e004:	86 ff       	sbrs	r24, 6
    e006:	ee cf       	rjmp	.-36     	; 0xdfe4 <mmc_disk_ioctl+0x224>
    e008:	f8 01       	movw	r30, r16
    e00a:	40 81       	ld	r20, Z
    e00c:	51 81       	ldd	r21, Z+1	; 0x01
    e00e:	62 81       	ldd	r22, Z+2	; 0x02
    e010:	73 81       	ldd	r23, Z+3	; 0x03
    e012:	c4 80       	ldd	r12, Z+4	; 0x04
    e014:	d5 80       	ldd	r13, Z+5	; 0x05
    e016:	e6 80       	ldd	r14, Z+6	; 0x06
    e018:	f7 80       	ldd	r15, Z+7	; 0x07
    e01a:	80 91 da 17 	lds	r24, 0x17DA	; 0x8017da <CardType>
    e01e:	83 fd       	sbrc	r24, 3
    e020:	0e c0       	rjmp	.+28     	; 0xe03e <mmc_disk_ioctl+0x27e>
    e022:	39 e0       	ldi	r19, 0x09	; 9
    e024:	44 0f       	add	r20, r20
    e026:	55 1f       	adc	r21, r21
    e028:	66 1f       	adc	r22, r22
    e02a:	77 1f       	adc	r23, r23
    e02c:	3a 95       	dec	r19
    e02e:	d1 f7       	brne	.-12     	; 0xe024 <mmc_disk_ioctl+0x264>
    e030:	e9 e0       	ldi	r30, 0x09	; 9
    e032:	cc 0c       	add	r12, r12
    e034:	dd 1c       	adc	r13, r13
    e036:	ee 1c       	adc	r14, r14
    e038:	ff 1c       	adc	r15, r15
    e03a:	ea 95       	dec	r30
    e03c:	d1 f7       	brne	.-12     	; 0xe032 <mmc_disk_ioctl+0x272>
    e03e:	80 e2       	ldi	r24, 0x20	; 32
    e040:	07 dd       	rcall	.-1522   	; 0xda50 <send_cmd>
    e042:	81 11       	cpse	r24, r1
    e044:	38 c1       	rjmp	.+624    	; 0xe2b6 <mmc_disk_ioctl+0x4f6>
    e046:	b7 01       	movw	r22, r14
    e048:	a6 01       	movw	r20, r12
    e04a:	81 e2       	ldi	r24, 0x21	; 33
    e04c:	01 dd       	rcall	.-1534   	; 0xda50 <send_cmd>
    e04e:	81 11       	cpse	r24, r1
    e050:	32 c1       	rjmp	.+612    	; 0xe2b6 <mmc_disk_ioctl+0x4f6>
    e052:	40 e0       	ldi	r20, 0x00	; 0
    e054:	50 e0       	ldi	r21, 0x00	; 0
    e056:	ba 01       	movw	r22, r20
    e058:	86 e2       	ldi	r24, 0x26	; 38
    e05a:	fa dc       	rcall	.-1548   	; 0xda50 <send_cmd>
    e05c:	81 11       	cpse	r24, r1
    e05e:	2b c1       	rjmp	.+598    	; 0xe2b6 <mmc_disk_ioctl+0x4f6>
    e060:	80 e3       	ldi	r24, 0x30	; 48
    e062:	95 e7       	ldi	r25, 0x75	; 117
    e064:	c6 dc       	rcall	.-1652   	; 0xd9f2 <wait_ready>
    e066:	35 c0       	rjmp	.+106    	; 0xe0d2 <mmc_disk_ioctl+0x312>
    e068:	80 91 da 17 	lds	r24, 0x17DA	; 0x8017da <CardType>
    e06c:	fb 01       	movw	r30, r22
    e06e:	80 83       	st	Z, r24
    e070:	3c c0       	rjmp	.+120    	; 0xe0ea <mmc_disk_ioctl+0x32a>
    e072:	40 e0       	ldi	r20, 0x00	; 0
    e074:	50 e0       	ldi	r21, 0x00	; 0
    e076:	ba 01       	movw	r22, r20
    e078:	89 e0       	ldi	r24, 0x09	; 9
    e07a:	04 c0       	rjmp	.+8      	; 0xe084 <mmc_disk_ioctl+0x2c4>
    e07c:	40 e0       	ldi	r20, 0x00	; 0
    e07e:	50 e0       	ldi	r21, 0x00	; 0
    e080:	ba 01       	movw	r22, r20
    e082:	8a e0       	ldi	r24, 0x0A	; 10
    e084:	e5 dc       	rcall	.-1590   	; 0xda50 <send_cmd>
    e086:	81 11       	cpse	r24, r1
    e088:	16 c1       	rjmp	.+556    	; 0xe2b6 <mmc_disk_ioctl+0x4f6>
    e08a:	60 e1       	ldi	r22, 0x10	; 16
    e08c:	70 e0       	ldi	r23, 0x00	; 0
    e08e:	1f c0       	rjmp	.+62     	; 0xe0ce <mmc_disk_ioctl+0x30e>
    e090:	40 e0       	ldi	r20, 0x00	; 0
    e092:	50 e0       	ldi	r21, 0x00	; 0
    e094:	ba 01       	movw	r22, r20
    e096:	8a e3       	ldi	r24, 0x3A	; 58
    e098:	db dc       	rcall	.-1610   	; 0xda50 <send_cmd>
    e09a:	81 11       	cpse	r24, r1
    e09c:	0c c1       	rjmp	.+536    	; 0xe2b6 <mmc_disk_ioctl+0x4f6>
    e09e:	78 01       	movw	r14, r16
    e0a0:	f4 e0       	ldi	r31, 0x04	; 4
    e0a2:	ef 0e       	add	r14, r31
    e0a4:	f1 1c       	adc	r15, r1
    e0a6:	8f ef       	ldi	r24, 0xFF	; 255
    e0a8:	8d d1       	rcall	.+794    	; 0xe3c4 <mmc_spi_TXRX>
    e0aa:	f8 01       	movw	r30, r16
    e0ac:	81 93       	st	Z+, r24
    e0ae:	8f 01       	movw	r16, r30
    e0b0:	ee 15       	cp	r30, r14
    e0b2:	ff 05       	cpc	r31, r15
    e0b4:	c1 f7       	brne	.-16     	; 0xe0a6 <mmc_disk_ioctl+0x2e6>
    e0b6:	90 cf       	rjmp	.-224    	; 0xdfd8 <mmc_disk_ioctl+0x218>
    e0b8:	40 e0       	ldi	r20, 0x00	; 0
    e0ba:	50 e0       	ldi	r21, 0x00	; 0
    e0bc:	ba 01       	movw	r22, r20
    e0be:	8d e8       	ldi	r24, 0x8D	; 141
    e0c0:	c7 dc       	rcall	.-1650   	; 0xda50 <send_cmd>
    e0c2:	81 11       	cpse	r24, r1
    e0c4:	f8 c0       	rjmp	.+496    	; 0xe2b6 <mmc_disk_ioctl+0x4f6>
    e0c6:	8f ef       	ldi	r24, 0xFF	; 255
    e0c8:	65 dc       	rcall	.-1846   	; 0xd994 <xchg_spi>
    e0ca:	60 e4       	ldi	r22, 0x40	; 64
    e0cc:	70 e0       	ldi	r23, 0x00	; 0
    e0ce:	c8 01       	movw	r24, r16
    e0d0:	69 dc       	rcall	.-1838   	; 0xd9a4 <rcvr_datablock>
    e0d2:	01 e0       	ldi	r16, 0x01	; 1
    e0d4:	10 e0       	ldi	r17, 0x00	; 0
    e0d6:	89 2b       	or	r24, r25
    e0d8:	09 f4       	brne	.+2      	; 0xe0dc <mmc_disk_ioctl+0x31c>
    e0da:	ef c0       	rjmp	.+478    	; 0xe2ba <mmc_disk_ioctl+0x4fa>
    e0dc:	ea c0       	rjmp	.+468    	; 0xe2b2 <mmc_disk_ioctl+0x4f2>
    e0de:	40 d2       	rcall	.+1152   	; 0xe560 <mmc_power_off>
    e0e0:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Stat>
    e0e4:	81 60       	ori	r24, 0x01	; 1
    e0e6:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <Stat>
    e0ea:	00 e0       	ldi	r16, 0x00	; 0
    e0ec:	eb c0       	rjmp	.+470    	; 0xe2c4 <mmc_disk_ioctl+0x504>
    e0ee:	fb 01       	movw	r30, r22
    e0f0:	43 81       	ldd	r20, Z+3	; 0x03
    e0f2:	54 81       	ldd	r21, Z+4	; 0x04
    e0f4:	65 81       	ldd	r22, Z+5	; 0x05
    e0f6:	76 81       	ldd	r23, Z+6	; 0x06
    e0f8:	39 e0       	ldi	r19, 0x09	; 9
    e0fa:	44 0f       	add	r20, r20
    e0fc:	55 1f       	adc	r21, r21
    e0fe:	66 1f       	adc	r22, r22
    e100:	77 1f       	adc	r23, r23
    e102:	3a 95       	dec	r19
    e104:	d1 f7       	brne	.-12     	; 0xe0fa <mmc_disk_ioctl+0x33a>
    e106:	70 68       	ori	r23, 0x80	; 128
    e108:	80 81       	ld	r24, Z
    e10a:	90 e0       	ldi	r25, 0x00	; 0
    e10c:	a0 e0       	ldi	r26, 0x00	; 0
    e10e:	b0 e0       	ldi	r27, 0x00	; 0
    e110:	2c e1       	ldi	r18, 0x1C	; 28
    e112:	88 0f       	add	r24, r24
    e114:	99 1f       	adc	r25, r25
    e116:	aa 1f       	adc	r26, r26
    e118:	bb 1f       	adc	r27, r27
    e11a:	2a 95       	dec	r18
    e11c:	d1 f7       	brne	.-12     	; 0xe112 <mmc_disk_ioctl+0x352>
    e11e:	48 2b       	or	r20, r24
    e120:	59 2b       	or	r21, r25
    e122:	6a 2b       	or	r22, r26
    e124:	7b 2b       	or	r23, r27
    e126:	81 81       	ldd	r24, Z+1	; 0x01
    e128:	92 81       	ldd	r25, Z+2	; 0x02
    e12a:	01 97       	sbiw	r24, 0x01	; 1
    e12c:	91 70       	andi	r25, 0x01	; 1
    e12e:	a0 e0       	ldi	r26, 0x00	; 0
    e130:	b0 e0       	ldi	r27, 0x00	; 0
    e132:	48 2b       	or	r20, r24
    e134:	59 2b       	or	r21, r25
    e136:	6a 2b       	or	r22, r26
    e138:	7b 2b       	or	r23, r27
    e13a:	80 e3       	ldi	r24, 0x30	; 48
    e13c:	89 dc       	rcall	.-1774   	; 0xda50 <send_cmd>
    e13e:	81 11       	cpse	r24, r1
    e140:	ba c0       	rjmp	.+372    	; 0xe2b6 <mmc_disk_ioctl+0x4f6>
    e142:	88 ee       	ldi	r24, 0xE8	; 232
    e144:	93 e0       	ldi	r25, 0x03	; 3
    e146:	41 d1       	rcall	.+642    	; 0xe3ca <mmc_set_ms_timeout>
    e148:	8f ef       	ldi	r24, 0xFF	; 255
    e14a:	3c d1       	rcall	.+632    	; 0xe3c4 <mmc_spi_TXRX>
    e14c:	8f 3f       	cpi	r24, 0xFF	; 255
    e14e:	21 f4       	brne	.+8      	; 0xe158 <mmc_disk_ioctl+0x398>
    e150:	43 d1       	rcall	.+646    	; 0xe3d8 <mmc_test_timeout>
    e152:	89 2b       	or	r24, r25
    e154:	c9 f3       	breq	.-14     	; 0xe148 <mmc_disk_ioctl+0x388>
    e156:	af c0       	rjmp	.+350    	; 0xe2b6 <mmc_disk_ioctl+0x4f6>
    e158:	8e 3f       	cpi	r24, 0xFE	; 254
    e15a:	09 f0       	breq	.+2      	; 0xe15e <mmc_disk_ioctl+0x39e>
    e15c:	ac c0       	rjmp	.+344    	; 0xe2b6 <mmc_disk_ioctl+0x4f6>
    e15e:	f8 01       	movw	r30, r16
    e160:	e7 80       	ldd	r14, Z+7	; 0x07
    e162:	f0 84       	ldd	r15, Z+8	; 0x08
    e164:	c1 80       	ldd	r12, Z+1	; 0x01
    e166:	d2 80       	ldd	r13, Z+2	; 0x02
    e168:	ce 0c       	add	r12, r14
    e16a:	df 1c       	adc	r13, r15
    e16c:	ce 14       	cp	r12, r14
    e16e:	df 04       	cpc	r13, r15
    e170:	31 f0       	breq	.+12     	; 0xe17e <mmc_disk_ioctl+0x3be>
    e172:	8f ef       	ldi	r24, 0xFF	; 255
    e174:	27 d1       	rcall	.+590    	; 0xe3c4 <mmc_spi_TXRX>
    e176:	f7 01       	movw	r30, r14
    e178:	81 93       	st	Z+, r24
    e17a:	7f 01       	movw	r14, r30
    e17c:	f7 cf       	rjmp	.-18     	; 0xe16c <mmc_disk_ioctl+0x3ac>
    e17e:	f8 01       	movw	r30, r16
    e180:	81 81       	ldd	r24, Z+1	; 0x01
    e182:	92 81       	ldd	r25, Z+2	; 0x02
    e184:	02 e0       	ldi	r16, 0x02	; 2
    e186:	12 e0       	ldi	r17, 0x02	; 2
    e188:	08 1b       	sub	r16, r24
    e18a:	19 0b       	sbc	r17, r25
    e18c:	01 15       	cp	r16, r1
    e18e:	11 05       	cpc	r17, r1
    e190:	09 f4       	brne	.+2      	; 0xe194 <mmc_disk_ioctl+0x3d4>
    e192:	22 cf       	rjmp	.-444    	; 0xdfd8 <mmc_disk_ioctl+0x218>
    e194:	8f ef       	ldi	r24, 0xFF	; 255
    e196:	fe db       	rcall	.-2052   	; 0xd994 <xchg_spi>
    e198:	01 50       	subi	r16, 0x01	; 1
    e19a:	11 09       	sbc	r17, r1
    e19c:	f7 cf       	rjmp	.-18     	; 0xe18c <mmc_disk_ioctl+0x3cc>
    e19e:	fb 01       	movw	r30, r22
    e1a0:	43 81       	ldd	r20, Z+3	; 0x03
    e1a2:	54 81       	ldd	r21, Z+4	; 0x04
    e1a4:	65 81       	ldd	r22, Z+5	; 0x05
    e1a6:	76 81       	ldd	r23, Z+6	; 0x06
    e1a8:	39 e0       	ldi	r19, 0x09	; 9
    e1aa:	44 0f       	add	r20, r20
    e1ac:	55 1f       	adc	r21, r21
    e1ae:	66 1f       	adc	r22, r22
    e1b0:	77 1f       	adc	r23, r23
    e1b2:	3a 95       	dec	r19
    e1b4:	d1 f7       	brne	.-12     	; 0xe1aa <mmc_disk_ioctl+0x3ea>
    e1b6:	70 68       	ori	r23, 0x80	; 128
    e1b8:	80 81       	ld	r24, Z
    e1ba:	90 e0       	ldi	r25, 0x00	; 0
    e1bc:	a0 e0       	ldi	r26, 0x00	; 0
    e1be:	b0 e0       	ldi	r27, 0x00	; 0
    e1c0:	2c e1       	ldi	r18, 0x1C	; 28
    e1c2:	88 0f       	add	r24, r24
    e1c4:	99 1f       	adc	r25, r25
    e1c6:	aa 1f       	adc	r26, r26
    e1c8:	bb 1f       	adc	r27, r27
    e1ca:	2a 95       	dec	r18
    e1cc:	d1 f7       	brne	.-12     	; 0xe1c2 <mmc_disk_ioctl+0x402>
    e1ce:	48 2b       	or	r20, r24
    e1d0:	59 2b       	or	r21, r25
    e1d2:	6a 2b       	or	r22, r26
    e1d4:	7b 2b       	or	r23, r27
    e1d6:	81 81       	ldd	r24, Z+1	; 0x01
    e1d8:	92 81       	ldd	r25, Z+2	; 0x02
    e1da:	01 97       	sbiw	r24, 0x01	; 1
    e1dc:	91 70       	andi	r25, 0x01	; 1
    e1de:	a0 e0       	ldi	r26, 0x00	; 0
    e1e0:	b0 e0       	ldi	r27, 0x00	; 0
    e1e2:	48 2b       	or	r20, r24
    e1e4:	59 2b       	or	r21, r25
    e1e6:	6a 2b       	or	r22, r26
    e1e8:	7b 2b       	or	r23, r27
    e1ea:	81 e3       	ldi	r24, 0x31	; 49
    e1ec:	31 dc       	rcall	.-1950   	; 0xda50 <send_cmd>
    e1ee:	81 11       	cpse	r24, r1
    e1f0:	62 c0       	rjmp	.+196    	; 0xe2b6 <mmc_disk_ioctl+0x4f6>
    e1f2:	8f ef       	ldi	r24, 0xFF	; 255
    e1f4:	cf db       	rcall	.-2146   	; 0xd994 <xchg_spi>
    e1f6:	8e ef       	ldi	r24, 0xFE	; 254
    e1f8:	cd db       	rcall	.-2150   	; 0xd994 <xchg_spi>
    e1fa:	f8 01       	movw	r30, r16
    e1fc:	e7 80       	ldd	r14, Z+7	; 0x07
    e1fe:	f0 84       	ldd	r15, Z+8	; 0x08
    e200:	c1 80       	ldd	r12, Z+1	; 0x01
    e202:	d2 80       	ldd	r13, Z+2	; 0x02
    e204:	ce 0c       	add	r12, r14
    e206:	df 1c       	adc	r13, r15
    e208:	ec 14       	cp	r14, r12
    e20a:	fd 04       	cpc	r15, r13
    e20c:	29 f0       	breq	.+10     	; 0xe218 <mmc_disk_ioctl+0x458>
    e20e:	f7 01       	movw	r30, r14
    e210:	81 91       	ld	r24, Z+
    e212:	7f 01       	movw	r14, r30
    e214:	bf db       	rcall	.-2178   	; 0xd994 <xchg_spi>
    e216:	f8 cf       	rjmp	.-16     	; 0xe208 <mmc_disk_ioctl+0x448>
    e218:	f8 01       	movw	r30, r16
    e21a:	81 81       	ldd	r24, Z+1	; 0x01
    e21c:	92 81       	ldd	r25, Z+2	; 0x02
    e21e:	02 e0       	ldi	r16, 0x02	; 2
    e220:	12 e0       	ldi	r17, 0x02	; 2
    e222:	08 1b       	sub	r16, r24
    e224:	19 0b       	sbc	r17, r25
    e226:	8f ef       	ldi	r24, 0xFF	; 255
    e228:	01 15       	cp	r16, r1
    e22a:	11 05       	cpc	r17, r1
    e22c:	09 f4       	brne	.+2      	; 0xe230 <mmc_disk_ioctl+0x470>
    e22e:	3b c0       	rjmp	.+118    	; 0xe2a6 <mmc_disk_ioctl+0x4e6>
    e230:	b1 db       	rcall	.-2206   	; 0xd994 <xchg_spi>
    e232:	01 50       	subi	r16, 0x01	; 1
    e234:	11 09       	sbc	r17, r1
    e236:	f7 cf       	rjmp	.-18     	; 0xe226 <mmc_disk_ioctl+0x466>
    e238:	fb 01       	movw	r30, r22
    e23a:	43 81       	ldd	r20, Z+3	; 0x03
    e23c:	54 81       	ldd	r21, Z+4	; 0x04
    e23e:	65 81       	ldd	r22, Z+5	; 0x05
    e240:	76 81       	ldd	r23, Z+6	; 0x06
    e242:	89 e0       	ldi	r24, 0x09	; 9
    e244:	44 0f       	add	r20, r20
    e246:	55 1f       	adc	r21, r21
    e248:	66 1f       	adc	r22, r22
    e24a:	77 1f       	adc	r23, r23
    e24c:	8a 95       	dec	r24
    e24e:	d1 f7       	brne	.-12     	; 0xe244 <mmc_disk_ioctl+0x484>
    e250:	74 68       	ori	r23, 0x84	; 132
    e252:	80 81       	ld	r24, Z
    e254:	90 e0       	ldi	r25, 0x00	; 0
    e256:	a0 e0       	ldi	r26, 0x00	; 0
    e258:	b0 e0       	ldi	r27, 0x00	; 0
    e25a:	2c e1       	ldi	r18, 0x1C	; 28
    e25c:	88 0f       	add	r24, r24
    e25e:	99 1f       	adc	r25, r25
    e260:	aa 1f       	adc	r26, r26
    e262:	bb 1f       	adc	r27, r27
    e264:	2a 95       	dec	r18
    e266:	d1 f7       	brne	.-12     	; 0xe25c <mmc_disk_ioctl+0x49c>
    e268:	48 2b       	or	r20, r24
    e26a:	59 2b       	or	r21, r25
    e26c:	6a 2b       	or	r22, r26
    e26e:	7b 2b       	or	r23, r27
    e270:	82 81       	ldd	r24, Z+2	; 0x02
    e272:	90 e0       	ldi	r25, 0x00	; 0
    e274:	a0 e0       	ldi	r26, 0x00	; 0
    e276:	b0 e0       	ldi	r27, 0x00	; 0
    e278:	48 2b       	or	r20, r24
    e27a:	59 2b       	or	r21, r25
    e27c:	6a 2b       	or	r22, r26
    e27e:	7b 2b       	or	r23, r27
    e280:	81 e3       	ldi	r24, 0x31	; 49
    e282:	e6 db       	rcall	.-2100   	; 0xda50 <send_cmd>
    e284:	81 11       	cpse	r24, r1
    e286:	17 c0       	rjmp	.+46     	; 0xe2b6 <mmc_disk_ioctl+0x4f6>
    e288:	8f ef       	ldi	r24, 0xFF	; 255
    e28a:	84 db       	rcall	.-2296   	; 0xd994 <xchg_spi>
    e28c:	8e ef       	ldi	r24, 0xFE	; 254
    e28e:	82 db       	rcall	.-2300   	; 0xd994 <xchg_spi>
    e290:	f8 01       	movw	r30, r16
    e292:	81 81       	ldd	r24, Z+1	; 0x01
    e294:	7f db       	rcall	.-2306   	; 0xd994 <xchg_spi>
    e296:	01 e0       	ldi	r16, 0x01	; 1
    e298:	12 e0       	ldi	r17, 0x02	; 2
    e29a:	8f ef       	ldi	r24, 0xFF	; 255
    e29c:	7b db       	rcall	.-2314   	; 0xd994 <xchg_spi>
    e29e:	01 50       	subi	r16, 0x01	; 1
    e2a0:	11 09       	sbc	r17, r1
    e2a2:	d9 f7       	brne	.-10     	; 0xe29a <mmc_disk_ioctl+0x4da>
    e2a4:	8f ef       	ldi	r24, 0xFF	; 255
    e2a6:	8e d0       	rcall	.+284    	; 0xe3c4 <mmc_spi_TXRX>
    e2a8:	8f 71       	andi	r24, 0x1F	; 31
    e2aa:	01 e0       	ldi	r16, 0x01	; 1
    e2ac:	10 e0       	ldi	r17, 0x00	; 0
    e2ae:	85 30       	cpi	r24, 0x05	; 5
    e2b0:	21 f4       	brne	.+8      	; 0xe2ba <mmc_disk_ioctl+0x4fa>
    e2b2:	00 e0       	ldi	r16, 0x00	; 0
    e2b4:	02 c0       	rjmp	.+4      	; 0xe2ba <mmc_disk_ioctl+0x4fa>
    e2b6:	01 e0       	ldi	r16, 0x01	; 1
    e2b8:	10 e0       	ldi	r17, 0x00	; 0
    e2ba:	6e db       	rcall	.-2340   	; 0xd998 <deselect>
    e2bc:	04 c0       	rjmp	.+8      	; 0xe2c6 <mmc_disk_ioctl+0x506>
    e2be:	03 e0       	ldi	r16, 0x03	; 3
    e2c0:	01 c0       	rjmp	.+2      	; 0xe2c4 <mmc_disk_ioctl+0x504>
    e2c2:	04 e0       	ldi	r16, 0x04	; 4
    e2c4:	10 e0       	ldi	r17, 0x00	; 0
    e2c6:	c8 01       	movw	r24, r16
    e2c8:	60 96       	adiw	r28, 0x10	; 16
    e2ca:	e8 e0       	ldi	r30, 0x08	; 8
    e2cc:	0c 94 e7 e8 	jmp	0x1d1ce	; 0x1d1ce <__epilogue_restores__+0x14>

0000e2d0 <mmc_disk_timerproc>:
    e2d0:	80 91 dc 17 	lds	r24, 0x17DC	; 0x8017dc <Timer1>
    e2d4:	88 23       	and	r24, r24
    e2d6:	19 f0       	breq	.+6      	; 0xe2de <mmc_disk_timerproc+0xe>
    e2d8:	81 50       	subi	r24, 0x01	; 1
    e2da:	80 93 dc 17 	sts	0x17DC, r24	; 0x8017dc <Timer1>
    e2de:	80 91 db 17 	lds	r24, 0x17DB	; 0x8017db <Timer2>
    e2e2:	88 23       	and	r24, r24
    e2e4:	19 f0       	breq	.+6      	; 0xe2ec <mmc_disk_timerproc+0x1c>
    e2e6:	81 50       	subi	r24, 0x01	; 1
    e2e8:	80 93 db 17 	sts	0x17DB, r24	; 0x8017db <Timer2>
    e2ec:	08 95       	ret

0000e2ee <mmc_task>:
void mmc_ms_wait(int ms)
{
    mmc_set_ms_timeout(ms);
    while(!mmc_test_timeout())
        ;
}
    e2ee:	80 91 e3 17 	lds	r24, 0x17E3	; 0x8017e3 <_mmc_timeout>
    e2f2:	90 91 e4 17 	lds	r25, 0x17E4	; 0x8017e4 <_mmc_timeout+0x1>
    e2f6:	00 97       	sbiw	r24, 0x00	; 0
    e2f8:	29 f0       	breq	.+10     	; 0xe304 <mmc_task+0x16>
    e2fa:	01 97       	sbiw	r24, 0x01	; 1
    e2fc:	90 93 e4 17 	sts	0x17E4, r25	; 0x8017e4 <_mmc_timeout+0x1>
    e300:	80 93 e3 17 	sts	0x17E3, r24	; 0x8017e3 <_mmc_timeout>
    e304:	80 91 dd 17 	lds	r24, 0x17DD	; 0x8017dd <_mmc_pre>
    e308:	90 91 de 17 	lds	r25, 0x17DE	; 0x8017de <_mmc_pre+0x1>
    e30c:	8a 30       	cpi	r24, 0x0A	; 10
    e30e:	91 05       	cpc	r25, r1
    e310:	30 f4       	brcc	.+12     	; 0xe31e <mmc_task+0x30>
    e312:	01 96       	adiw	r24, 0x01	; 1
    e314:	90 93 de 17 	sts	0x17DE, r25	; 0x8017de <_mmc_pre+0x1>
    e318:	80 93 dd 17 	sts	0x17DD, r24	; 0x8017dd <_mmc_pre>
    e31c:	08 95       	ret
    e31e:	10 92 de 17 	sts	0x17DE, r1	; 0x8017de <_mmc_pre+0x1>
    e322:	10 92 dd 17 	sts	0x17DD, r1	; 0x8017dd <_mmc_pre>
    e326:	d4 cf       	rjmp	.-88     	; 0xe2d0 <mmc_disk_timerproc>
    e328:	08 95       	ret

0000e32a <mmc_install_timer>:
    e32a:	10 92 e4 17 	sts	0x17E4, r1	; 0x8017e4 <_mmc_timeout+0x1>
    e32e:	10 92 e3 17 	sts	0x17E3, r1	; 0x8017e3 <_mmc_timeout>
    e332:	61 e0       	ldi	r22, 0x01	; 1
    e334:	70 e0       	ldi	r23, 0x00	; 0
    e336:	87 e7       	ldi	r24, 0x77	; 119
    e338:	91 e7       	ldi	r25, 0x71	; 113
    e33a:	0e 94 43 33 	call	0x6686	; 0x6686 <set_timers>
    e33e:	01 96       	adiw	r24, 0x01	; 1
    e340:	51 f4       	brne	.+20     	; 0xe356 <mmc_install_timer+0x2c>
    e342:	87 e4       	ldi	r24, 0x47	; 71
    e344:	98 e0       	ldi	r25, 0x08	; 8
    e346:	1f 92       	push	r1
    e348:	9f 93       	push	r25
    e34a:	8f 93       	push	r24
    e34c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    e350:	0f 90       	pop	r0
    e352:	0f 90       	pop	r0
    e354:	0f 90       	pop	r0
    e356:	08 95       	ret

0000e358 <mmc_spi_begin>:
    e358:	60 91 df 17 	lds	r22, 0x17DF	; 0x8017df <_mmc_clock>
    e35c:	70 91 e0 17 	lds	r23, 0x17E0	; 0x8017e0 <_mmc_clock+0x1>
    e360:	80 91 e1 17 	lds	r24, 0x17E1	; 0x8017e1 <_mmc_clock+0x2>
    e364:	90 91 e2 17 	lds	r25, 0x17E2	; 0x8017e2 <_mmc_clock+0x3>
    e368:	4b e0       	ldi	r20, 0x0B	; 11
    e36a:	50 e0       	ldi	r21, 0x00	; 0
    e36c:	0c 94 97 28 	jmp	0x512e	; 0x512e <spi_begin>
    e370:	08 95       	ret

0000e372 <mmc_spi_end>:
    e372:	8b e0       	ldi	r24, 0x0B	; 11
    e374:	0c 94 41 28 	jmp	0x5082	; 0x5082 <spi_end>
    e378:	08 95       	ret

0000e37a <mmc_slow>:
    e37a:	80 e2       	ldi	r24, 0x20	; 32
    e37c:	91 ea       	ldi	r25, 0xA1	; 161
    e37e:	a7 e0       	ldi	r26, 0x07	; 7
    e380:	b0 e0       	ldi	r27, 0x00	; 0
    e382:	80 93 df 17 	sts	0x17DF, r24	; 0x8017df <_mmc_clock>
    e386:	90 93 e0 17 	sts	0x17E0, r25	; 0x8017e0 <_mmc_clock+0x1>
    e38a:	a0 93 e1 17 	sts	0x17E1, r26	; 0x8017e1 <_mmc_clock+0x2>
    e38e:	b0 93 e2 17 	sts	0x17E2, r27	; 0x8017e2 <_mmc_clock+0x3>
    e392:	08 95       	ret

0000e394 <mmc_spi_init>:
    e394:	8b e0       	ldi	r24, 0x0B	; 11
    e396:	0e 94 3f 28 	call	0x507e	; 0x507e <chip_select_init>
    e39a:	ef cf       	rjmp	.-34     	; 0xe37a <mmc_slow>
    e39c:	08 95       	ret

0000e39e <mmc_fast>:
    e39e:	80 ea       	ldi	r24, 0xA0	; 160
    e3a0:	95 e2       	ldi	r25, 0x25	; 37
    e3a2:	a6 e2       	ldi	r26, 0x26	; 38
    e3a4:	b0 e0       	ldi	r27, 0x00	; 0
    e3a6:	80 93 df 17 	sts	0x17DF, r24	; 0x8017df <_mmc_clock>
    e3aa:	90 93 e0 17 	sts	0x17E0, r25	; 0x8017e0 <_mmc_clock+0x1>
    e3ae:	a0 93 e1 17 	sts	0x17E1, r26	; 0x8017e1 <_mmc_clock+0x2>
    e3b2:	b0 93 e2 17 	sts	0x17E2, r27	; 0x8017e2 <_mmc_clock+0x3>
    e3b6:	08 95       	ret

0000e3b8 <mmc_spi_TX_buffer>:
    e3b8:	0c 94 63 28 	jmp	0x50c6	; 0x50c6 <spi_TX_buffer>
    e3bc:	08 95       	ret

0000e3be <mmc_spi_RX_buffer>:
    e3be:	0c 94 65 28 	jmp	0x50ca	; 0x50ca <spi_RX_buffer>
    e3c2:	08 95       	ret

0000e3c4 <mmc_spi_TXRX>:
    e3c4:	0c 94 d3 28 	jmp	0x51a6	; 0x51a6 <spi_TXRX>
    e3c8:	08 95       	ret

0000e3ca <mmc_set_ms_timeout>:
    e3ca:	f8 94       	cli
    e3cc:	90 93 e4 17 	sts	0x17E4, r25	; 0x8017e4 <_mmc_timeout+0x1>
    e3d0:	80 93 e3 17 	sts	0x17E3, r24	; 0x8017e3 <_mmc_timeout>
    e3d4:	78 94       	sei
    e3d6:	08 95       	ret

0000e3d8 <mmc_test_timeout>:
    e3d8:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Stat>
    e3dc:	81 fd       	sbrc	r24, 1
    e3de:	15 c0       	rjmp	.+42     	; 0xe40a <mmc_test_timeout+0x32>
    e3e0:	80 91 e3 17 	lds	r24, 0x17E3	; 0x8017e3 <_mmc_timeout>
    e3e4:	90 91 e4 17 	lds	r25, 0x17E4	; 0x8017e4 <_mmc_timeout+0x1>
    e3e8:	89 2b       	or	r24, r25
    e3ea:	91 f4       	brne	.+36     	; 0xe410 <mmc_test_timeout+0x38>
    e3ec:	8a e3       	ldi	r24, 0x3A	; 58
    e3ee:	98 e0       	ldi	r25, 0x08	; 8
    e3f0:	1f 92       	push	r1
    e3f2:	9f 93       	push	r25
    e3f4:	8f 93       	push	r24
    e3f6:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    e3fa:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <Stat>
    e3fe:	83 60       	ori	r24, 0x03	; 3
    e400:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <Stat>
    e404:	0f 90       	pop	r0
    e406:	0f 90       	pop	r0
    e408:	0f 90       	pop	r0
    e40a:	81 e0       	ldi	r24, 0x01	; 1
    e40c:	90 e0       	ldi	r25, 0x00	; 0
    e40e:	08 95       	ret
    e410:	80 e0       	ldi	r24, 0x00	; 0
    e412:	90 e0       	ldi	r25, 0x00	; 0
    e414:	08 95       	ret

0000e416 <mmc_init>:
///
/// @param[in] verbose: display initialisation messages
/// @return
MEMSPACE
int mmc_init(int verbose)
{
    e416:	a4 e0       	ldi	r26, 0x04	; 4
    e418:	b0 e0       	ldi	r27, 0x00	; 0
    e41a:	e1 e1       	ldi	r30, 0x11	; 17
    e41c:	f2 e7       	ldi	r31, 0x72	; 114
    e41e:	0c 94 cd e8 	jmp	0x1d19a	; 0x1d19a <__prologue_saves__+0x18>
    e422:	7c 01       	movw	r14, r24
    int rc;

    Stat = 0;
    e424:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <Stat>

    mmc_spi_init();

    if( verbose)
    e428:	b5 df       	rcall	.-150    	; 0xe394 <mmc_spi_init>
    e42a:	e1 14       	cp	r14, r1
    e42c:	f1 04       	cpc	r15, r1
    {
        printf("START MMC INIT\n");
    e42e:	51 f0       	breq	.+20     	; 0xe444 <mmc_init+0x2e>
    e430:	8a e2       	ldi	r24, 0x2A	; 42
    e432:	98 e0       	ldi	r25, 0x08	; 8
    e434:	1f 92       	push	r1
    e436:	9f 93       	push	r25
    e438:	8f 93       	push	r24
    e43a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    e43e:	0f 90       	pop	r0
    e440:	0f 90       	pop	r0
    }
    // we only install timers once!
    if(!mmc_init_flag)
    e442:	0f 90       	pop	r0
    e444:	80 91 e5 17 	lds	r24, 0x17E5	; 0x8017e5 <mmc_init_flag>
    e448:	90 91 e6 17 	lds	r25, 0x17E6	; 0x8017e6 <mmc_init_flag+0x1>
        mmc_install_timer();
    e44c:	89 2b       	or	r24, r25
    e44e:	09 f4       	brne	.+2      	; 0xe452 <mmc_init+0x3c>

    if( verbose)
    e450:	6c df       	rcall	.-296    	; 0xe32a <mmc_install_timer>
    e452:	e1 14       	cp	r14, r1
    e454:	f1 04       	cpc	r15, r1
    {
#if defined (_USE_LFN)
        printf("LFN Enabled");
    e456:	b9 f0       	breq	.+46     	; 0xe486 <mmc_init+0x70>
    e458:	8e e1       	ldi	r24, 0x1E	; 30
    e45a:	98 e0       	ldi	r25, 0x08	; 8
    e45c:	1f 92       	push	r1
    e45e:	9f 93       	push	r25
    e460:	8f 93       	push	r24
    e462:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
#else
        printf("LFN Disabled");
#endif
        printf(", Code page: %u\n", _CODE_PAGE);
    e466:	81 e0       	ldi	r24, 0x01	; 1
    e468:	8f 93       	push	r24
    e46a:	85 eb       	ldi	r24, 0xB5	; 181
    e46c:	8f 93       	push	r24
    e46e:	8d e0       	ldi	r24, 0x0D	; 13
    e470:	98 e0       	ldi	r25, 0x08	; 8
    e472:	1f 92       	push	r1
    e474:	9f 93       	push	r25
    e476:	8f 93       	push	r24
    e478:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    e47c:	0f b6       	in	r0, 0x3f	; 63
    e47e:	f8 94       	cli
    e480:	de bf       	out	0x3e, r29	; 62
    }

    rc = disk_initialize(0);    // aliased to mmc_disk_initialize()
    e482:	0f be       	out	0x3f, r0	; 63
    e484:	cd bf       	out	0x3d, r28	; 61
    e486:	80 e0       	ldi	r24, 0x00	; 0
    e488:	55 da       	rcall	.-2902   	; 0xd934 <disk_initialize>
    e48a:	08 2f       	mov	r16, r24

    if( rc != RES_OK  || verbose )
    e48c:	10 e0       	ldi	r17, 0x00	; 0
    e48e:	01 15       	cp	r16, r1
    e490:	11 05       	cpc	r17, r1
    e492:	71 f4       	brne	.+28     	; 0xe4b0 <mmc_init+0x9a>
    e494:	e1 14       	cp	r14, r1
    e496:	f1 04       	cpc	r15, r1
        put_rc(rc);
    }

    if( rc == RES_OK)
    {
        rc = f_mount(&Fatfs[0],"/", 0);
    e498:	59 f4       	brne	.+22     	; 0xe4b0 <mmc_init+0x9a>
    e49a:	40 e0       	ldi	r20, 0x00	; 0
    e49c:	67 e0       	ldi	r22, 0x07	; 7
    e49e:	78 e0       	ldi	r23, 0x08	; 8
    e4a0:	81 e3       	ldi	r24, 0x31	; 49
    e4a2:	9a e1       	ldi	r25, 0x1A	; 26
    e4a4:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <f_mount>
    }

    if( rc != RES_OK || verbose)
    e4a8:	8c 01       	movw	r16, r24
    e4aa:	89 2b       	or	r24, r25

    rc = disk_initialize(0);    // aliased to mmc_disk_initialize()

    if( rc != RES_OK  || verbose )
    {
        put_rc(rc);
    e4ac:	39 f0       	breq	.+14     	; 0xe4bc <mmc_init+0xa6>
    e4ae:	0a c0       	rjmp	.+20     	; 0xe4c4 <mmc_init+0xae>
    e4b0:	c8 01       	movw	r24, r16
    }

    if( rc == RES_OK)
    e4b2:	dc d0       	rcall	.+440    	; 0xe66c <put_rc>
    e4b4:	01 15       	cp	r16, r1
    e4b6:	11 05       	cpc	r17, r1
    e4b8:	29 f4       	brne	.+10     	; 0xe4c4 <mmc_init+0xae>
    {
        rc = f_mount(&Fatfs[0],"/", 0);
    }

    if( rc != RES_OK || verbose)
    e4ba:	ef cf       	rjmp	.-34     	; 0xe49a <mmc_init+0x84>
    e4bc:	e1 14       	cp	r14, r1
    e4be:	f1 04       	cpc	r15, r1
    {
        put_rc( rc );
    e4c0:	09 f4       	brne	.+2      	; 0xe4c4 <mmc_init+0xae>
    e4c2:	43 c0       	rjmp	.+134    	; 0xe54a <mmc_init+0x134>
    e4c4:	c8 01       	movw	r24, r16
    }

    if (verbose )
    e4c6:	d2 d0       	rcall	.+420    	; 0xe66c <put_rc>
    e4c8:	e1 14       	cp	r14, r1
    e4ca:	f1 04       	cpc	r15, r1
    e4cc:	09 f4       	brne	.+2      	; 0xe4d0 <mmc_init+0xba>
    {
        DWORD blksize = 0;
    e4ce:	3d c0       	rjmp	.+122    	; 0xe54a <mmc_init+0x134>
    e4d0:	19 82       	std	Y+1, r1	; 0x01
    e4d2:	1a 82       	std	Y+2, r1	; 0x02
    e4d4:	1b 82       	std	Y+3, r1	; 0x03
        if(rc == RES_OK)
    e4d6:	1c 82       	std	Y+4, r1	; 0x04
    e4d8:	01 15       	cp	r16, r1
        {
            rc = disk_ioctl ( 0, GET_BLOCK_SIZE, (void *) &blksize);
    e4da:	11 05       	cpc	r17, r1
    e4dc:	61 f5       	brne	.+88     	; 0xe536 <mmc_init+0x120>
    e4de:	ae 01       	movw	r20, r28
    e4e0:	4f 5f       	subi	r20, 0xFF	; 255
    e4e2:	5f 4f       	sbci	r21, 0xFF	; 255
    e4e4:	63 e0       	ldi	r22, 0x03	; 3
            if( rc != RES_OK)
    e4e6:	80 e0       	ldi	r24, 0x00	; 0
    e4e8:	4b da       	rcall	.-2922   	; 0xd980 <disk_ioctl>
            {
                put_rc( rc );
    e4ea:	8c 01       	movw	r16, r24
    e4ec:	00 97       	sbiw	r24, 0x00	; 0
                printf("MMC Block Size - read failed\n");
    e4ee:	61 f0       	breq	.+24     	; 0xe508 <mmc_init+0xf2>
    e4f0:	bd d0       	rcall	.+378    	; 0xe66c <put_rc>
    e4f2:	8f ee       	ldi	r24, 0xEF	; 239
    e4f4:	97 e0       	ldi	r25, 0x07	; 7
    e4f6:	1f 92       	push	r1
    e4f8:	9f 93       	push	r25
    e4fa:	8f 93       	push	r24
    e4fc:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    e500:	0f 90       	pop	r0
    e502:	0f 90       	pop	r0
            }
            else
            {
                printf("MMC Block Size: %ld\n", blksize);
    e504:	0f 90       	pop	r0
    e506:	17 c0       	rjmp	.+46     	; 0xe536 <mmc_init+0x120>
    e508:	8c 81       	ldd	r24, Y+4	; 0x04
    e50a:	8f 93       	push	r24
    e50c:	8b 81       	ldd	r24, Y+3	; 0x03
    e50e:	8f 93       	push	r24
    e510:	8a 81       	ldd	r24, Y+2	; 0x02
    e512:	8f 93       	push	r24
    e514:	89 81       	ldd	r24, Y+1	; 0x01
    e516:	8f 93       	push	r24
    e518:	8a ed       	ldi	r24, 0xDA	; 218
    e51a:	97 e0       	ldi	r25, 0x07	; 7
    e51c:	1f 92       	push	r1
    e51e:	9f 93       	push	r25
            }
            if( rc == RES_OK)
            {
                fatfs_status("/");
    e520:	8f 93       	push	r24
    e522:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    e526:	87 e0       	ldi	r24, 0x07	; 7
    e528:	98 e0       	ldi	r25, 0x08	; 8
    e52a:	2e d1       	rcall	.+604    	; 0xe788 <fatfs_status>
    e52c:	0f b6       	in	r0, 0x3f	; 63
    e52e:	f8 94       	cli
    e530:	de bf       	out	0x3e, r29	; 62
            }
        }
        printf("END MMC INIT\n");
    e532:	0f be       	out	0x3f, r0	; 63
    e534:	cd bf       	out	0x3d, r28	; 61
    e536:	8c ec       	ldi	r24, 0xCC	; 204
    e538:	97 e0       	ldi	r25, 0x07	; 7
    e53a:	1f 92       	push	r1
    e53c:	9f 93       	push	r25
    e53e:	8f 93       	push	r24
    e540:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    e544:	0f 90       	pop	r0
    }
    mmc_init_flag = 1;
    e546:	0f 90       	pop	r0
    e548:	0f 90       	pop	r0
    e54a:	81 e0       	ldi	r24, 0x01	; 1
    e54c:	90 e0       	ldi	r25, 0x00	; 0
    e54e:	90 93 e6 17 	sts	0x17E6, r25	; 0x8017e6 <mmc_init_flag+0x1>

    return( rc ) ;
}
    e552:	80 93 e5 17 	sts	0x17E5, r24	; 0x8017e5 <mmc_init_flag>
    e556:	c8 01       	movw	r24, r16
    e558:	24 96       	adiw	r28, 0x04	; 4
    e55a:	e6 e0       	ldi	r30, 0x06	; 6
    e55c:	0c 94 e9 e8 	jmp	0x1d1d2	; 0x1d1d2 <__epilogue_restores__+0x18>

0000e560 <mmc_power_off>:
/// @brief  MMC Power OFF
///
/// @return void
MEMSPACE
void mmc_power_off()
{
    e560:	08 95       	ret

0000e562 <mmc_ins_status>:

MEMSPACE
int mmc_ins_status()
{
    return (1);
}
    e562:	81 e0       	ldi	r24, 0x01	; 1
    e564:	90 e0       	ldi	r25, 0x00	; 0
    e566:	08 95       	ret

0000e568 <mmc_wp_status>:

MEMSPACE
int mmc_wp_status()
{
    return (0);
}
    e568:	80 e0       	ldi	r24, 0x00	; 0
    e56a:	90 e0       	ldi	r25, 0x00	; 0
    e56c:	08 95       	ret

0000e56e <tm_to_fat>:
/// @param[in] t: POSIX struct tm * to convert.
///
/// @return  FAT32 time.
MEMSPACE
uint32_t tm_to_fat(tm_t *t)
{
    e56e:	0f 93       	push	r16
    e570:	1f 93       	push	r17
    e572:	fc 01       	movw	r30, r24
        | (((uint32_t)t->tm_mon+1) << 21)
        | (((uint32_t)t->tm_mday) << 16)
        | ((uint32_t)t->tm_hour << 11)
        | ((uint32_t)t->tm_min << 5)
        | ((uint32_t)t->tm_sec >> 1);
    return(fat);
    e574:	46 81       	ldd	r20, Z+6	; 0x06
    e576:	57 81       	ldd	r21, Z+7	; 0x07
    e578:	05 2e       	mov	r0, r21
    e57a:	00 0c       	add	r0, r0
    e57c:	66 0b       	sbc	r22, r22
    e57e:	77 0b       	sbc	r23, r23
    e580:	ba 01       	movw	r22, r20
    e582:	55 27       	eor	r21, r21
    e584:	44 27       	eor	r20, r20
    e586:	84 81       	ldd	r24, Z+4	; 0x04
    e588:	95 81       	ldd	r25, Z+5	; 0x05
    e58a:	09 2e       	mov	r0, r25
    e58c:	00 0c       	add	r0, r0
    e58e:	aa 0b       	sbc	r26, r26
    e590:	bb 0b       	sbc	r27, r27
    e592:	2b e0       	ldi	r18, 0x0B	; 11
    e594:	88 0f       	add	r24, r24
    e596:	99 1f       	adc	r25, r25
    e598:	aa 1f       	adc	r26, r26
    e59a:	bb 1f       	adc	r27, r27
    e59c:	2a 95       	dec	r18
    e59e:	d1 f7       	brne	.-12     	; 0xe594 <tm_to_fat+0x26>
    e5a0:	48 2b       	or	r20, r24
    e5a2:	59 2b       	or	r21, r25
    e5a4:	6a 2b       	or	r22, r26
    e5a6:	7b 2b       	or	r23, r27
    e5a8:	82 81       	ldd	r24, Z+2	; 0x02
    e5aa:	93 81       	ldd	r25, Z+3	; 0x03
    e5ac:	09 2e       	mov	r0, r25
    e5ae:	00 0c       	add	r0, r0
    e5b0:	aa 0b       	sbc	r26, r26
    e5b2:	bb 0b       	sbc	r27, r27
    e5b4:	35 e0       	ldi	r19, 0x05	; 5
    e5b6:	88 0f       	add	r24, r24
    e5b8:	99 1f       	adc	r25, r25
    e5ba:	aa 1f       	adc	r26, r26
    e5bc:	bb 1f       	adc	r27, r27
    e5be:	3a 95       	dec	r19
    e5c0:	d1 f7       	brne	.-12     	; 0xe5b6 <tm_to_fat+0x48>
    e5c2:	48 2b       	or	r20, r24
    e5c4:	59 2b       	or	r21, r25
    e5c6:	6a 2b       	or	r22, r26
    e5c8:	7b 2b       	or	r23, r27
    e5ca:	80 81       	ld	r24, Z
    e5cc:	91 81       	ldd	r25, Z+1	; 0x01
    e5ce:	09 2e       	mov	r0, r25
    e5d0:	00 0c       	add	r0, r0
    e5d2:	aa 0b       	sbc	r26, r26
    e5d4:	bb 0b       	sbc	r27, r27
    e5d6:	b6 95       	lsr	r27
    e5d8:	a7 95       	ror	r26
    e5da:	97 95       	ror	r25
    e5dc:	87 95       	ror	r24
    e5de:	84 2b       	or	r24, r20
    e5e0:	95 2b       	or	r25, r21
    e5e2:	a6 2b       	or	r26, r22
    e5e4:	b7 2b       	or	r27, r23
    e5e6:	02 85       	ldd	r16, Z+10	; 0x0a
    e5e8:	13 85       	ldd	r17, Z+11	; 0x0b
    e5ea:	00 55       	subi	r16, 0x50	; 80
    e5ec:	11 09       	sbc	r17, r1
    e5ee:	01 2e       	mov	r0, r17
    e5f0:	00 0c       	add	r0, r0
    e5f2:	22 0b       	sbc	r18, r18
    e5f4:	33 0b       	sbc	r19, r19
    e5f6:	49 e1       	ldi	r20, 0x19	; 25
    e5f8:	00 0f       	add	r16, r16
    e5fa:	11 1f       	adc	r17, r17
    e5fc:	22 1f       	adc	r18, r18
    e5fe:	33 1f       	adc	r19, r19
    e600:	4a 95       	dec	r20
    e602:	d1 f7       	brne	.-12     	; 0xe5f8 <tm_to_fat+0x8a>
    e604:	ac 01       	movw	r20, r24
    e606:	bd 01       	movw	r22, r26
    e608:	40 2b       	or	r20, r16
    e60a:	51 2b       	or	r21, r17
    e60c:	62 2b       	or	r22, r18
    e60e:	73 2b       	or	r23, r19
    e610:	80 85       	ldd	r24, Z+8	; 0x08
    e612:	91 85       	ldd	r25, Z+9	; 0x09
    e614:	09 2e       	mov	r0, r25
    e616:	00 0c       	add	r0, r0
    e618:	aa 0b       	sbc	r26, r26
    e61a:	bb 0b       	sbc	r27, r27
    e61c:	01 96       	adiw	r24, 0x01	; 1
    e61e:	a1 1d       	adc	r26, r1
    e620:	b1 1d       	adc	r27, r1
    e622:	e5 e1       	ldi	r30, 0x15	; 21
    e624:	88 0f       	add	r24, r24
    e626:	99 1f       	adc	r25, r25
    e628:	aa 1f       	adc	r26, r26
    e62a:	bb 1f       	adc	r27, r27
    e62c:	ea 95       	dec	r30
    e62e:	d1 f7       	brne	.-12     	; 0xe624 <tm_to_fat+0xb6>
    e630:	8a 01       	movw	r16, r20
    e632:	9b 01       	movw	r18, r22
    e634:	08 2b       	or	r16, r24
    e636:	19 2b       	or	r17, r25
    e638:	2a 2b       	or	r18, r26
    e63a:	3b 2b       	or	r19, r27
    e63c:	c9 01       	movw	r24, r18
    e63e:	b8 01       	movw	r22, r16
}
    e640:	1f 91       	pop	r17
    e642:	0f 91       	pop	r16
    e644:	08 95       	ret

0000e646 <get_fattime>:
///
/// @return FAT32 time.
/// @see tm_to_fat().
MEMSPACE
DWORD get_fattime (void)
{
    e646:	a4 e0       	ldi	r26, 0x04	; 4
    e648:	b0 e0       	ldi	r27, 0x00	; 0
    e64a:	e9 e2       	ldi	r30, 0x29	; 41
    e64c:	f3 e7       	ldi	r31, 0x73	; 115
    e64e:	0c 94 d1 e8 	jmp	0x1d1a2	; 0x1d1a2 <__prologue_saves__+0x20>
    time_t t;
/* Get GMT time */
    time(&t);
    e652:	ce 01       	movw	r24, r28
    e654:	01 96       	adiw	r24, 0x01	; 1
    e656:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <time>
    return( tm_to_fat(localtime(&t)));
    e65a:	ce 01       	movw	r24, r28
    e65c:	01 96       	adiw	r24, 0x01	; 1
    e65e:	0e 94 17 37 	call	0x6e2e	; 0x6e2e <localtime>
    e662:	85 df       	rcall	.-246    	; 0xe56e <tm_to_fat>
}
    e664:	24 96       	adiw	r28, 0x04	; 4
    e666:	e2 e0       	ldi	r30, 0x02	; 2
    e668:	0c 94 ed e8 	jmp	0x1d1da	; 0x1d1da <__epilogue_restores__+0x20>

0000e66c <put_rc>:
        ptr = "INVALID ERROR MESSAGE";
    else
        ptr = (char *) err_msg[(int)rc];
    printf("rc=%u FR_%s\n", rc, ptr);
#else
    printf("rc=%u\n", rc);
    e66c:	9f 93       	push	r25
    e66e:	8f 93       	push	r24
    e670:	87 e5       	ldi	r24, 0x57	; 87
    e672:	9a e0       	ldi	r25, 0x0A	; 10
    e674:	1f 92       	push	r1
    e676:	9f 93       	push	r25
    e678:	8f 93       	push	r24
    e67a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
#endif
}
    e67e:	0f 90       	pop	r0
    e680:	0f 90       	pop	r0
    e682:	0f 90       	pop	r0
    e684:	0f 90       	pop	r0
    e686:	0f 90       	pop	r0
    e688:	08 95       	ret

0000e68a <fatfs_scan_files>:

MEMSPACE
int fatfs_scan_files (
char* path                                        /* Pointer to the working buffer with start path */
)
{
    e68a:	a4 e4       	ldi	r26, 0x44	; 68
    e68c:	b1 e0       	ldi	r27, 0x01	; 1
    e68e:	eb e4       	ldi	r30, 0x4B	; 75
    e690:	f3 e7       	ldi	r31, 0x73	; 115
    e692:	0c 94 cc e8 	jmp	0x1d198	; 0x1d198 <__prologue_saves__+0x16>
    e696:	8c 01       	movw	r16, r24
    DIR dirs;
    FRESULT fr;
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    e698:	bc 01       	movw	r22, r24
    e69a:	ce 01       	movw	r24, r28
    e69c:	89 5e       	subi	r24, 0xE9	; 233
    e69e:	9e 4f       	sbci	r25, 0xFE	; 254
    e6a0:	0e 94 8d 60 	call	0xc11a	; 0xc11a <f_opendir>
    if (fr == FR_OK) {
    e6a4:	00 97       	sbiw	r24, 0x00	; 0
    e6a6:	09 f0       	breq	.+2      	; 0xe6aa <fatfs_scan_files+0x20>
    e6a8:	5b c0       	rjmp	.+182    	; 0xe760 <fatfs_scan_files+0xd6>
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
            if (info.fattrib & AM_DIR) {
                AccDirs++;
                i = strlen(path);
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e6aa:	8f e2       	ldi	r24, 0x2F	; 47
    e6ac:	d8 2e       	mov	r13, r24
    int i;
    FILINFO info;

    fr = f_opendir(&dirs, path);
    if (fr == FR_OK) {
        while (((fr = f_readdir(&dirs, &info)) == FR_OK) && info.fname[0]) {
    e6ae:	be 01       	movw	r22, r28
    e6b0:	6f 5f       	subi	r22, 0xFF	; 255
    e6b2:	7f 4f       	sbci	r23, 0xFF	; 255
    e6b4:	ce 01       	movw	r24, r28
    e6b6:	89 5e       	subi	r24, 0xE9	; 233
    e6b8:	9e 4f       	sbci	r25, 0xFE	; 254
    e6ba:	0e 94 15 61 	call	0xc22a	; 0xc22a <f_readdir>
    e6be:	00 97       	sbiw	r24, 0x00	; 0
    e6c0:	09 f0       	breq	.+2      	; 0xe6c4 <fatfs_scan_files+0x3a>
    e6c2:	4e c0       	rjmp	.+156    	; 0xe760 <fatfs_scan_files+0xd6>
    e6c4:	2f 89       	ldd	r18, Y+23	; 0x17
    e6c6:	22 23       	and	r18, r18
    e6c8:	09 f4       	brne	.+2      	; 0xe6cc <fatfs_scan_files+0x42>
    e6ca:	4a c0       	rjmp	.+148    	; 0xe760 <fatfs_scan_files+0xd6>
            if (info.fattrib & AM_DIR) {
    e6cc:	89 85       	ldd	r24, Y+9	; 0x09
    e6ce:	84 ff       	sbrs	r24, 4
    e6d0:	25 c0       	rjmp	.+74     	; 0xe71c <fatfs_scan_files+0x92>
                AccDirs++;
    e6d2:	80 91 6a 1c 	lds	r24, 0x1C6A	; 0x801c6a <AccDirs>
    e6d6:	90 91 6b 1c 	lds	r25, 0x1C6B	; 0x801c6b <AccDirs+0x1>
    e6da:	01 96       	adiw	r24, 0x01	; 1
    e6dc:	90 93 6b 1c 	sts	0x1C6B, r25	; 0x801c6b <AccDirs+0x1>
    e6e0:	80 93 6a 1c 	sts	0x1C6A, r24	; 0x801c6a <AccDirs>
                i = strlen(path);
    e6e4:	f8 01       	movw	r30, r16
    e6e6:	01 90       	ld	r0, Z+
    e6e8:	00 20       	and	r0, r0
    e6ea:	e9 f7       	brne	.-6      	; 0xe6e6 <fatfs_scan_files+0x5c>
    e6ec:	31 97       	sbiw	r30, 0x01	; 1
    e6ee:	e0 1b       	sub	r30, r16
    e6f0:	f1 0b       	sbc	r31, r17
                path[i] = '/'; strcpy(path+i+1, info.fname);
    e6f2:	78 01       	movw	r14, r16
    e6f4:	ee 0e       	add	r14, r30
    e6f6:	ff 1e       	adc	r15, r31
    e6f8:	d7 01       	movw	r26, r14
    e6fa:	dc 92       	st	X, r13
    e6fc:	cf 01       	movw	r24, r30
    e6fe:	01 96       	adiw	r24, 0x01	; 1
    e700:	be 01       	movw	r22, r28
    e702:	69 5e       	subi	r22, 0xE9	; 233
    e704:	7f 4f       	sbci	r23, 0xFF	; 255
    e706:	80 0f       	add	r24, r16
    e708:	91 1f       	adc	r25, r17
    e70a:	0e 94 0f 30 	call	0x601e	; 0x601e <strcpy>
                fr = fatfs_scan_files(path);
    e70e:	c8 01       	movw	r24, r16
    e710:	bc df       	rcall	.-136    	; 0xe68a <fatfs_scan_files>
                path[i] = 0;
    e712:	f7 01       	movw	r30, r14
    e714:	10 82       	st	Z, r1
                if (fr != FR_OK) break;
    e716:	00 97       	sbiw	r24, 0x00	; 0
    e718:	51 f2       	breq	.-108    	; 0xe6ae <fatfs_scan_files+0x24>
    e71a:	22 c0       	rjmp	.+68     	; 0xe760 <fatfs_scan_files+0xd6>
            } else {
//              xprintf(PSTR("%s/%s\n"), path, info.fname);
                AccFiles++;
    e71c:	80 91 6c 1c 	lds	r24, 0x1C6C	; 0x801c6c <AccFiles>
    e720:	90 91 6d 1c 	lds	r25, 0x1C6D	; 0x801c6d <AccFiles+0x1>
    e724:	01 96       	adiw	r24, 0x01	; 1
    e726:	90 93 6d 1c 	sts	0x1C6D, r25	; 0x801c6d <AccFiles+0x1>
    e72a:	80 93 6c 1c 	sts	0x1C6C, r24	; 0x801c6c <AccFiles>
                AccSize += info.fsize;
    e72e:	40 91 66 1c 	lds	r20, 0x1C66	; 0x801c66 <AccSize>
    e732:	50 91 67 1c 	lds	r21, 0x1C67	; 0x801c67 <AccSize+0x1>
    e736:	60 91 68 1c 	lds	r22, 0x1C68	; 0x801c68 <AccSize+0x2>
    e73a:	70 91 69 1c 	lds	r23, 0x1C69	; 0x801c69 <AccSize+0x3>
    e73e:	89 81       	ldd	r24, Y+1	; 0x01
    e740:	9a 81       	ldd	r25, Y+2	; 0x02
    e742:	ab 81       	ldd	r26, Y+3	; 0x03
    e744:	bc 81       	ldd	r27, Y+4	; 0x04
    e746:	84 0f       	add	r24, r20
    e748:	95 1f       	adc	r25, r21
    e74a:	a6 1f       	adc	r26, r22
    e74c:	b7 1f       	adc	r27, r23
    e74e:	80 93 66 1c 	sts	0x1C66, r24	; 0x801c66 <AccSize>
    e752:	90 93 67 1c 	sts	0x1C67, r25	; 0x801c67 <AccSize+0x1>
    e756:	a0 93 68 1c 	sts	0x1C68, r26	; 0x801c68 <AccSize+0x2>
    e75a:	b0 93 69 1c 	sts	0x1C69, r27	; 0x801c69 <AccSize+0x3>
    e75e:	a7 cf       	rjmp	.-178    	; 0xe6ae <fatfs_scan_files+0x24>
#endif
        }
    }

    return fr;
}
    e760:	cc 5b       	subi	r28, 0xBC	; 188
    e762:	de 4f       	sbci	r29, 0xFE	; 254
    e764:	e7 e0       	ldi	r30, 0x07	; 7
    e766:	0c 94 e8 e8 	jmp	0x1d1d0	; 0x1d1d0 <__epilogue_restores__+0x16>

0000e76a <fatfs_fstype>:
/// @brief  return a string with the file system type
/// @param[in] type: file system type
/// @return string with file system type
MEMSPACE
char *fatfs_fstype(int type)
{
    e76a:	01 97       	sbiw	r24, 0x01	; 1
    e76c:	84 30       	cpi	r24, 0x04	; 4
    e76e:	91 05       	cpc	r25, r1
    e770:	40 f4       	brcc	.+16     	; 0xe782 <fatfs_fstype+0x18>
    e772:	88 0f       	add	r24, r24
    e774:	99 1f       	adc	r25, r25
    e776:	fc 01       	movw	r30, r24
    e778:	e9 51       	subi	r30, 0x19	; 25
    e77a:	f9 4f       	sbci	r31, 0xF9	; 249
    e77c:	80 81       	ld	r24, Z
    e77e:	91 81       	ldd	r25, Z+1	; 0x01
    e780:	08 95       	ret
    char *ptr;
    switch(type)
    e782:	89 e0       	ldi	r24, 0x09	; 9
    e784:	98 e0       	ldi	r25, 0x08	; 8
        default:
             ptr = "UNKNOWN";
            break;
    }
    return(ptr);
}
    e786:	08 95       	ret

0000e788 <fatfs_status>:
/// @see AccFiles: Total number of Files
/// @see AccSize:  Total size of all files
/// @return  void
MEMSPACE
void fatfs_status(char *ptr)
{
    e788:	a4 e2       	ldi	r26, 0x24	; 36
    e78a:	b0 e0       	ldi	r27, 0x00	; 0
    e78c:	ea ec       	ldi	r30, 0xCA	; 202
    e78e:	f3 e7       	ldi	r31, 0x73	; 115
    e790:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__prologue_saves__+0x14>
    e794:	8c 01       	movw	r16, r24
    int res;
    FATFS *fs;
    char label[24+2];
    DWORD vsn; // volume serial number

    while(*ptr == ' ' || *ptr == '\t')
    e796:	fc 01       	movw	r30, r24
    e798:	21 91       	ld	r18, Z+
    e79a:	cf 01       	movw	r24, r30
    e79c:	20 32       	cpi	r18, 0x20	; 32
    e79e:	d1 f3       	breq	.-12     	; 0xe794 <fatfs_status+0xc>
    e7a0:	29 30       	cpi	r18, 0x09	; 9
    e7a2:	c1 f3       	breq	.-16     	; 0xe794 <fatfs_status+0xc>
        ++ptr;
    printf("fatfs status:%s\n",ptr);
    e7a4:	1f 93       	push	r17
    e7a6:	0f 93       	push	r16
    e7a8:	86 e4       	ldi	r24, 0x46	; 70
    e7aa:	9a e0       	ldi	r25, 0x0A	; 10
    e7ac:	1f 92       	push	r1
    e7ae:	9f 93       	push	r25
    e7b0:	8f 93       	push	r24
    e7b2:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    res = f_getfree(ptr, (DWORD*)&p2, &fs);
    e7b6:	ae 01       	movw	r20, r28
    e7b8:	4d 5d       	subi	r20, 0xDD	; 221
    e7ba:	5f 4f       	sbci	r21, 0xFF	; 255
    e7bc:	be 01       	movw	r22, r28
    e7be:	61 5e       	subi	r22, 0xE1	; 225
    e7c0:	7f 4f       	sbci	r23, 0xFF	; 255
    e7c2:	c8 01       	movw	r24, r16
    e7c4:	0e 94 9b 61 	call	0xc336	; 0xc336 <f_getfree>
    if (res)
    e7c8:	0f 90       	pop	r0
    e7ca:	0f 90       	pop	r0
    e7cc:	0f 90       	pop	r0
    e7ce:	0f 90       	pop	r0
    e7d0:	0f 90       	pop	r0
    e7d2:	00 97       	sbiw	r24, 0x00	; 0
    e7d4:	09 f0       	breq	.+2      	; 0xe7d8 <fatfs_status+0x50>
    e7d6:	e8 c0       	rjmp	.+464    	; 0xe9a8 <fatfs_status+0x220>
    {
        put_rc(res);
        return;
    }
    printf("FAT type                = %s\n",  fatfs_fstype(fs->fs_type));
    e7d8:	eb a1       	ldd	r30, Y+35	; 0x23
    e7da:	fc a1       	ldd	r31, Y+36	; 0x24
    e7dc:	80 81       	ld	r24, Z
    e7de:	90 e0       	ldi	r25, 0x00	; 0
    e7e0:	c4 df       	rcall	.-120    	; 0xe76a <fatfs_fstype>
    e7e2:	9f 93       	push	r25
    e7e4:	8f 93       	push	r24
    e7e6:	88 e2       	ldi	r24, 0x28	; 40
    e7e8:	9a e0       	ldi	r25, 0x0A	; 10
    e7ea:	1f 92       	push	r1
    e7ec:	9f 93       	push	r25
    e7ee:	8f 93       	push	r24
    e7f0:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    printf("Bytes/Cluster           = %lu\n", (DWORD)fs->csize * 512);
    e7f4:	eb a1       	ldd	r30, Y+35	; 0x23
    e7f6:	fc a1       	ldd	r31, Y+36	; 0x24
    e7f8:	81 85       	ldd	r24, Z+9	; 0x09
    e7fa:	92 85       	ldd	r25, Z+10	; 0x0a
    e7fc:	a0 e0       	ldi	r26, 0x00	; 0
    e7fe:	b0 e0       	ldi	r27, 0x00	; 0
    e800:	49 e0       	ldi	r20, 0x09	; 9
    e802:	88 0f       	add	r24, r24
    e804:	99 1f       	adc	r25, r25
    e806:	aa 1f       	adc	r26, r26
    e808:	bb 1f       	adc	r27, r27
    e80a:	4a 95       	dec	r20
    e80c:	d1 f7       	brne	.-12     	; 0xe802 <fatfs_status+0x7a>
    e80e:	bf 93       	push	r27
    e810:	af 93       	push	r26
    e812:	9f 93       	push	r25
    e814:	8f 93       	push	r24
    e816:	89 e0       	ldi	r24, 0x09	; 9
    e818:	9a e0       	ldi	r25, 0x0A	; 10
    e81a:	1f 92       	push	r1
    e81c:	9f 93       	push	r25
    e81e:	8f 93       	push	r24
    e820:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    printf("Number of FATs          = %u\n",  fs->n_fats);
    e824:	eb a1       	ldd	r30, Y+35	; 0x23
    e826:	fc a1       	ldd	r31, Y+36	; 0x24
    e828:	82 81       	ldd	r24, Z+2	; 0x02
    e82a:	1f 92       	push	r1
    e82c:	8f 93       	push	r24
    e82e:	8b ee       	ldi	r24, 0xEB	; 235
    e830:	99 e0       	ldi	r25, 0x09	; 9
    e832:	1f 92       	push	r1
    e834:	9f 93       	push	r25
    e836:	8f 93       	push	r24
    e838:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    printf("Root DIR entries        = %u\n",  fs->n_rootdir);
    e83c:	eb a1       	ldd	r30, Y+35	; 0x23
    e83e:	fc a1       	ldd	r31, Y+36	; 0x24
    e840:	80 85       	ldd	r24, Z+8	; 0x08
    e842:	8f 93       	push	r24
    e844:	87 81       	ldd	r24, Z+7	; 0x07
    e846:	8f 93       	push	r24
    e848:	8d ec       	ldi	r24, 0xCD	; 205
    e84a:	99 e0       	ldi	r25, 0x09	; 9
    e84c:	1f 92       	push	r1
    e84e:	9f 93       	push	r25
    e850:	8f 93       	push	r24
    e852:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    printf("Sectors/FAT             = %lu\n", fs->fsize);
    e856:	eb a1       	ldd	r30, Y+35	; 0x23
    e858:	fc a1       	ldd	r31, Y+36	; 0x24
    e85a:	80 a1       	ldd	r24, Z+32	; 0x20
    e85c:	8f 93       	push	r24
    e85e:	87 8d       	ldd	r24, Z+31	; 0x1f
    e860:	8f 93       	push	r24
    e862:	86 8d       	ldd	r24, Z+30	; 0x1e
    e864:	8f 93       	push	r24
    e866:	85 8d       	ldd	r24, Z+29	; 0x1d
    e868:	8f 93       	push	r24
    e86a:	8e ea       	ldi	r24, 0xAE	; 174
    e86c:	99 e0       	ldi	r25, 0x09	; 9
    e86e:	1f 92       	push	r1
    e870:	9f 93       	push	r25
    e872:	8f 93       	push	r24
    e874:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    printf("Number of clusters      = %lu\n", fs->n_fatent - 2);
    e878:	eb a1       	ldd	r30, Y+35	; 0x23
    e87a:	fc a1       	ldd	r31, Y+36	; 0x24
    e87c:	81 8d       	ldd	r24, Z+25	; 0x19
    e87e:	92 8d       	ldd	r25, Z+26	; 0x1a
    e880:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e882:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e884:	02 97       	sbiw	r24, 0x02	; 2
    e886:	a1 09       	sbc	r26, r1
    e888:	b1 09       	sbc	r27, r1
    e88a:	bf 93       	push	r27
    e88c:	af 93       	push	r26
    e88e:	9f 93       	push	r25
    e890:	8f 93       	push	r24
    e892:	8f e8       	ldi	r24, 0x8F	; 143
    e894:	99 e0       	ldi	r25, 0x09	; 9
    e896:	1f 92       	push	r1
    e898:	9f 93       	push	r25
    e89a:	8f 93       	push	r24
    e89c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    printf("FAT start (lba)         = %lu\n", fs->fatbase);
    e8a0:	0f b6       	in	r0, 0x3f	; 63
    e8a2:	f8 94       	cli
    e8a4:	de bf       	out	0x3e, r29	; 62
    e8a6:	0f be       	out	0x3f, r0	; 63
    e8a8:	cd bf       	out	0x3d, r28	; 61
    e8aa:	eb a1       	ldd	r30, Y+35	; 0x23
    e8ac:	fc a1       	ldd	r31, Y+36	; 0x24
    e8ae:	80 a5       	ldd	r24, Z+40	; 0x28
    e8b0:	8f 93       	push	r24
    e8b2:	87 a1       	ldd	r24, Z+39	; 0x27
    e8b4:	8f 93       	push	r24
    e8b6:	86 a1       	ldd	r24, Z+38	; 0x26
    e8b8:	8f 93       	push	r24
    e8ba:	85 a1       	ldd	r24, Z+37	; 0x25
    e8bc:	8f 93       	push	r24
    e8be:	80 e7       	ldi	r24, 0x70	; 112
    e8c0:	99 e0       	ldi	r25, 0x09	; 9
    e8c2:	1f 92       	push	r1
    e8c4:	9f 93       	push	r25
    e8c6:	8f 93       	push	r24
    e8c8:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    printf("DIR start (lba,clustor) = %lu\n", fs->dirbase);
    e8cc:	eb a1       	ldd	r30, Y+35	; 0x23
    e8ce:	fc a1       	ldd	r31, Y+36	; 0x24
    e8d0:	84 a5       	ldd	r24, Z+44	; 0x2c
    e8d2:	8f 93       	push	r24
    e8d4:	83 a5       	ldd	r24, Z+43	; 0x2b
    e8d6:	8f 93       	push	r24
    e8d8:	82 a5       	ldd	r24, Z+42	; 0x2a
    e8da:	8f 93       	push	r24
    e8dc:	81 a5       	ldd	r24, Z+41	; 0x29
    e8de:	8f 93       	push	r24
    e8e0:	81 e5       	ldi	r24, 0x51	; 81
    e8e2:	99 e0       	ldi	r25, 0x09	; 9
    e8e4:	1f 92       	push	r1
    e8e6:	9f 93       	push	r25
    e8e8:	8f 93       	push	r24
    e8ea:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    printf("Data start (lba)        = %lu\n", fs->database);
    e8ee:	eb a1       	ldd	r30, Y+35	; 0x23
    e8f0:	fc a1       	ldd	r31, Y+36	; 0x24
    e8f2:	80 a9       	ldd	r24, Z+48	; 0x30
    e8f4:	8f 93       	push	r24
    e8f6:	87 a5       	ldd	r24, Z+47	; 0x2f
    e8f8:	8f 93       	push	r24
    e8fa:	86 a5       	ldd	r24, Z+46	; 0x2e
    e8fc:	8f 93       	push	r24
    e8fe:	85 a5       	ldd	r24, Z+45	; 0x2d
    e900:	8f 93       	push	r24
    e902:	82 e3       	ldi	r24, 0x32	; 50
    e904:	99 e0       	ldi	r25, 0x09	; 9
    e906:	1f 92       	push	r1
    e908:	9f 93       	push	r25
    e90a:	8f 93       	push	r24
    e90c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>

#if _USE_LABEL
    res = f_getlabel(ptr, label, (DWORD*)&vsn);
    e910:	ae 01       	movw	r20, r28
    e912:	45 5e       	subi	r20, 0xE5	; 229
    e914:	5f 4f       	sbci	r21, 0xFF	; 255
    e916:	be 01       	movw	r22, r28
    e918:	6f 5f       	subi	r22, 0xFF	; 255
    e91a:	7f 4f       	sbci	r23, 0xFF	; 255
    e91c:	c8 01       	movw	r24, r16
    e91e:	0e 94 2d 66 	call	0xcc5a	; 0xcc5a <f_getlabel>
    if (res)
    e922:	0f b6       	in	r0, 0x3f	; 63
    e924:	f8 94       	cli
    e926:	de bf       	out	0x3e, r29	; 62
    e928:	0f be       	out	0x3f, r0	; 63
    e92a:	cd bf       	out	0x3d, r28	; 61
    e92c:	00 97       	sbiw	r24, 0x00	; 0
    e92e:	e1 f5       	brne	.+120    	; 0xe9a8 <fatfs_status+0x220>
    {
        put_rc(res);
        return;
    }
    printf("Volume name             = %s\n", label[0] ? label : "<blank>");
    e930:	89 81       	ldd	r24, Y+1	; 0x01
    e932:	81 11       	cpse	r24, r1
    e934:	03 c0       	rjmp	.+6      	; 0xe93c <fatfs_status+0x1b4>
    e936:	81 e1       	ldi	r24, 0x11	; 17
    e938:	98 e0       	ldi	r25, 0x08	; 8
    e93a:	02 c0       	rjmp	.+4      	; 0xe940 <fatfs_status+0x1b8>
    e93c:	ce 01       	movw	r24, r28
    e93e:	01 96       	adiw	r24, 0x01	; 1
    e940:	9f 93       	push	r25
    e942:	8f 93       	push	r24
    e944:	84 e1       	ldi	r24, 0x14	; 20
    e946:	99 e0       	ldi	r25, 0x09	; 9
    e948:	1f 92       	push	r1
    e94a:	9f 93       	push	r25
    e94c:	8f 93       	push	r24
    e94e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    printf("Volume S/N              = %04X-%04X\n", (WORD)((DWORD)vsn >> 16), (WORD)(vsn & 0xFFFF));
    e952:	8b 8d       	ldd	r24, Y+27	; 0x1b
    e954:	9c 8d       	ldd	r25, Y+28	; 0x1c
    e956:	ad 8d       	ldd	r26, Y+29	; 0x1d
    e958:	be 8d       	ldd	r27, Y+30	; 0x1e
    e95a:	9f 93       	push	r25
    e95c:	8f 93       	push	r24
    e95e:	cd 01       	movw	r24, r26
    e960:	aa 27       	eor	r26, r26
    e962:	bb 27       	eor	r27, r27
    e964:	9f 93       	push	r25
    e966:	8f 93       	push	r24
    e968:	8f ee       	ldi	r24, 0xEF	; 239
    e96a:	98 e0       	ldi	r25, 0x08	; 8
    e96c:	1f 92       	push	r1
    e96e:	9f 93       	push	r25
    e970:	8f 93       	push	r24
    e972:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
#endif

    AccSize = AccFiles = AccDirs = 0;
    e976:	10 92 6b 1c 	sts	0x1C6B, r1	; 0x801c6b <AccDirs+0x1>
    e97a:	10 92 6a 1c 	sts	0x1C6A, r1	; 0x801c6a <AccDirs>
    e97e:	10 92 6d 1c 	sts	0x1C6D, r1	; 0x801c6d <AccFiles+0x1>
    e982:	10 92 6c 1c 	sts	0x1C6C, r1	; 0x801c6c <AccFiles>
    e986:	10 92 66 1c 	sts	0x1C66, r1	; 0x801c66 <AccSize>
    e98a:	10 92 67 1c 	sts	0x1C67, r1	; 0x801c67 <AccSize+0x1>
    e98e:	10 92 68 1c 	sts	0x1C68, r1	; 0x801c68 <AccSize+0x2>
    e992:	10 92 69 1c 	sts	0x1C69, r1	; 0x801c69 <AccSize+0x3>
    res = fatfs_scan_files(ptr);
    e996:	c8 01       	movw	r24, r16
    if (res)
    e998:	78 de       	rcall	.-784    	; 0xe68a <fatfs_scan_files>
    e99a:	0f b6       	in	r0, 0x3f	; 63
    e99c:	f8 94       	cli
    e99e:	de bf       	out	0x3e, r29	; 62
    e9a0:	0f be       	out	0x3f, r0	; 63
    e9a2:	cd bf       	out	0x3d, r28	; 61
    {
        put_rc(res);
    e9a4:	00 97       	sbiw	r24, 0x00	; 0
    e9a6:	11 f0       	breq	.+4      	; 0xe9ac <fatfs_status+0x224>
        return;
    e9a8:	61 de       	rcall	.-830    	; 0xe66c <put_rc>
    }
    printf("%u files, %lu bytes.\n%u folders.\n"
    e9aa:	56 c0       	rjmp	.+172    	; 0xea58 <fatfs_status+0x2d0>
    e9ac:	0b a1       	ldd	r16, Y+35	; 0x23
    e9ae:	1c a1       	ldd	r17, Y+36	; 0x24
    e9b0:	f8 01       	movw	r30, r16
    e9b2:	c1 84       	ldd	r12, Z+9	; 0x09
    e9b4:	d2 84       	ldd	r13, Z+10	; 0x0a
    e9b6:	e1 2c       	mov	r14, r1
    e9b8:	f1 2c       	mov	r15, r1
    e9ba:	6f 8d       	ldd	r22, Y+31	; 0x1f
    e9bc:	78 a1       	ldd	r23, Y+32	; 0x20
    e9be:	89 a1       	ldd	r24, Y+33	; 0x21
    e9c0:	9a a1       	ldd	r25, Y+34	; 0x22
    e9c2:	a7 01       	movw	r20, r14
    e9c4:	96 01       	movw	r18, r12
    e9c6:	0e 94 12 e8 	call	0x1d024	; 0x1d024 <__mulsi3>
    e9ca:	22 e0       	ldi	r18, 0x02	; 2
    e9cc:	30 e0       	ldi	r19, 0x00	; 0
    e9ce:	40 e0       	ldi	r20, 0x00	; 0
    e9d0:	50 e0       	ldi	r21, 0x00	; 0
    e9d2:	0e 94 76 e8 	call	0x1d0ec	; 0x1d0ec <__divmodsi4>
    e9d6:	5f 93       	push	r21
    e9d8:	4f 93       	push	r20
    e9da:	3f 93       	push	r19
    e9dc:	2f 93       	push	r18
    e9de:	f8 01       	movw	r30, r16
    e9e0:	81 8d       	ldd	r24, Z+25	; 0x19
    e9e2:	92 8d       	ldd	r25, Z+26	; 0x1a
    e9e4:	a3 8d       	ldd	r26, Z+27	; 0x1b
    e9e6:	b4 8d       	ldd	r27, Z+28	; 0x1c
    e9e8:	9c 01       	movw	r18, r24
    e9ea:	ad 01       	movw	r20, r26
    e9ec:	22 50       	subi	r18, 0x02	; 2
    e9ee:	31 09       	sbc	r19, r1
    e9f0:	41 09       	sbc	r20, r1
    e9f2:	51 09       	sbc	r21, r1
    e9f4:	c7 01       	movw	r24, r14
    e9f6:	b6 01       	movw	r22, r12
    e9f8:	0e 94 12 e8 	call	0x1d024	; 0x1d024 <__mulsi3>
    e9fc:	dc 01       	movw	r26, r24
    e9fe:	cb 01       	movw	r24, r22
    ea00:	b6 95       	lsr	r27
    ea02:	a7 95       	ror	r26
    ea04:	97 95       	ror	r25
    ea06:	87 95       	ror	r24
    ea08:	bf 93       	push	r27
    ea0a:	af 93       	push	r26
    ea0c:	9f 93       	push	r25
    ea0e:	8f 93       	push	r24
    ea10:	80 91 6b 1c 	lds	r24, 0x1C6B	; 0x801c6b <AccDirs+0x1>
    ea14:	8f 93       	push	r24
    ea16:	80 91 6a 1c 	lds	r24, 0x1C6A	; 0x801c6a <AccDirs>
    ea1a:	8f 93       	push	r24
    ea1c:	80 91 69 1c 	lds	r24, 0x1C69	; 0x801c69 <AccSize+0x3>
    ea20:	8f 93       	push	r24
    ea22:	80 91 68 1c 	lds	r24, 0x1C68	; 0x801c68 <AccSize+0x2>
    ea26:	8f 93       	push	r24
    ea28:	80 91 67 1c 	lds	r24, 0x1C67	; 0x801c67 <AccSize+0x1>
    ea2c:	8f 93       	push	r24
    ea2e:	80 91 66 1c 	lds	r24, 0x1C66	; 0x801c66 <AccSize>
    ea32:	8f 93       	push	r24
    ea34:	80 91 6d 1c 	lds	r24, 0x1C6D	; 0x801c6d <AccFiles+0x1>
    ea38:	8f 93       	push	r24
    ea3a:	80 91 6c 1c 	lds	r24, 0x1C6C	; 0x801c6c <AccFiles>
    ea3e:	8f 93       	push	r24
    ea40:	82 ea       	ldi	r24, 0xA2	; 162
    ea42:	98 e0       	ldi	r25, 0x08	; 8
    ea44:	1f 92       	push	r1
    ea46:	9f 93       	push	r25
    ea48:	8f 93       	push	r24
    ea4a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    ea4e:	0f b6       	in	r0, 0x3f	; 63
    ea50:	f8 94       	cli
    ea52:	de bf       	out	0x3e, r29	; 62
    ea54:	0f be       	out	0x3f, r0	; 63
                 "%lu KB total disk space.\n%lu KB available.\n",
            AccFiles, AccSize, AccDirs,
            (fs->n_fatent - 2) * fs->csize / 2, p2 * fs->csize / 2
    );

}
    ea56:	cd bf       	out	0x3d, r28	; 61
    ea58:	a4 96       	adiw	r28, 0x24	; 36
    ea5a:	e8 e0       	ldi	r30, 0x08	; 8
    ea5c:	0c 94 e7 e8 	jmp	0x1d1ce	; 0x1d1ce <__epilogue_restores__+0x14>

0000ea60 <fatfs_filinfo_list>:
/// @param[in] : FILINFO pointer
/// @return  void

MEMSPACE
void fatfs_filinfo_list(FILINFO *info)
{
    ea60:	a6 e0       	ldi	r26, 0x06	; 6
    ea62:	b0 e0       	ldi	r27, 0x00	; 0
    ea64:	e6 e3       	ldi	r30, 0x36	; 54
    ea66:	f5 e7       	ldi	r31, 0x75	; 117
    ea68:	0c 94 d1 e8 	jmp	0x1d1a2	; 0x1d1a2 <__prologue_saves__+0x20>
    ea6c:	fc 01       	movw	r30, r24
    char attrs[6];
    if(info->fname[0] == 0)
    ea6e:	86 89       	ldd	r24, Z+22	; 0x16
    ea70:	81 11       	cpse	r24, r1
    ea72:	0b c0       	rjmp	.+22     	; 0xea8a <fatfs_filinfo_list+0x2a>
    {
        printf("fatfs_filinfo_list: empty\n");
    ea74:	87 e8       	ldi	r24, 0x87	; 135
    ea76:	98 e0       	ldi	r25, 0x08	; 8
    ea78:	1f 92       	push	r1
    ea7a:	9f 93       	push	r25
    ea7c:	8f 93       	push	r24
    ea7e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        return;
    ea82:	0f 90       	pop	r0
    ea84:	0f 90       	pop	r0
    ea86:	0f 90       	pop	r0
    ea88:	6e c0       	rjmp	.+220    	; 0xeb66 <fatfs_filinfo_list+0x106>
    }
    attrs[0] = (info->fattrib & AM_DIR) ? 'D' : '-';
    ea8a:	80 85       	ldd	r24, Z+8	; 0x08
    ea8c:	84 fd       	sbrc	r24, 4
    ea8e:	02 c0       	rjmp	.+4      	; 0xea94 <fatfs_filinfo_list+0x34>
    ea90:	9d e2       	ldi	r25, 0x2D	; 45
    ea92:	01 c0       	rjmp	.+2      	; 0xea96 <fatfs_filinfo_list+0x36>
    ea94:	94 e4       	ldi	r25, 0x44	; 68
    ea96:	99 83       	std	Y+1, r25	; 0x01
    attrs[1] = (info->fattrib & AM_RDO) ? 'R' : '-';
    ea98:	80 fd       	sbrc	r24, 0
    ea9a:	02 c0       	rjmp	.+4      	; 0xeaa0 <fatfs_filinfo_list+0x40>
    ea9c:	9d e2       	ldi	r25, 0x2D	; 45
    ea9e:	01 c0       	rjmp	.+2      	; 0xeaa2 <fatfs_filinfo_list+0x42>
    eaa0:	92 e5       	ldi	r25, 0x52	; 82
    eaa2:	9a 83       	std	Y+2, r25	; 0x02
    attrs[2] = (info->fattrib & AM_HID) ? 'H' : '-';
    eaa4:	81 fd       	sbrc	r24, 1
    eaa6:	02 c0       	rjmp	.+4      	; 0xeaac <fatfs_filinfo_list+0x4c>
    eaa8:	9d e2       	ldi	r25, 0x2D	; 45
    eaaa:	01 c0       	rjmp	.+2      	; 0xeaae <fatfs_filinfo_list+0x4e>
    eaac:	98 e4       	ldi	r25, 0x48	; 72
    eaae:	9b 83       	std	Y+3, r25	; 0x03
    attrs[3] = (info->fattrib & AM_SYS) ? 'S' : '-';
    eab0:	82 fd       	sbrc	r24, 2
    eab2:	02 c0       	rjmp	.+4      	; 0xeab8 <fatfs_filinfo_list+0x58>
    eab4:	9d e2       	ldi	r25, 0x2D	; 45
    eab6:	01 c0       	rjmp	.+2      	; 0xeaba <fatfs_filinfo_list+0x5a>
    eab8:	93 e5       	ldi	r25, 0x53	; 83
    eaba:	9c 83       	std	Y+4, r25	; 0x04
    attrs[4] = (info->fattrib & AM_ARC) ? 'A' : '-';
    eabc:	85 fd       	sbrc	r24, 5
    eabe:	02 c0       	rjmp	.+4      	; 0xeac4 <fatfs_filinfo_list+0x64>
    eac0:	8d e2       	ldi	r24, 0x2D	; 45
    eac2:	01 c0       	rjmp	.+2      	; 0xeac6 <fatfs_filinfo_list+0x66>
    eac4:	81 e4       	ldi	r24, 0x41	; 65
    eac6:	8d 83       	std	Y+5, r24	; 0x05
    attrs[5] = 0;
    eac8:	1e 82       	std	Y+6, r1	; 0x06
    printf("%s %u/%02u/%02u %02u:%02u %9lu %s",
    eaca:	46 81       	ldd	r20, Z+6	; 0x06
    eacc:	57 81       	ldd	r21, Z+7	; 0x07
    eace:	84 81       	ldd	r24, Z+4	; 0x04
    ead0:	95 81       	ldd	r25, Z+5	; 0x05
    ead2:	9f 01       	movw	r18, r30
    ead4:	2a 5e       	subi	r18, 0xEA	; 234
    ead6:	3f 4f       	sbci	r19, 0xFF	; 255
    ead8:	3f 93       	push	r19
    eada:	2f 93       	push	r18
    eadc:	23 81       	ldd	r18, Z+3	; 0x03
    eade:	2f 93       	push	r18
    eae0:	22 81       	ldd	r18, Z+2	; 0x02
    eae2:	2f 93       	push	r18
    eae4:	21 81       	ldd	r18, Z+1	; 0x01
    eae6:	2f 93       	push	r18
    eae8:	20 81       	ld	r18, Z
    eaea:	2f 93       	push	r18
    eaec:	9a 01       	movw	r18, r20
    eaee:	45 e0       	ldi	r20, 0x05	; 5
    eaf0:	36 95       	lsr	r19
    eaf2:	27 95       	ror	r18
    eaf4:	4a 95       	dec	r20
    eaf6:	e1 f7       	brne	.-8      	; 0xeaf0 <fatfs_filinfo_list+0x90>
    eaf8:	2f 73       	andi	r18, 0x3F	; 63
    eafa:	33 27       	eor	r19, r19
    eafc:	3f 93       	push	r19
    eafe:	2f 93       	push	r18
    eb00:	25 2f       	mov	r18, r21
    eb02:	26 95       	lsr	r18
    eb04:	26 95       	lsr	r18
    eb06:	26 95       	lsr	r18
    eb08:	1f 92       	push	r1
    eb0a:	2f 93       	push	r18
    eb0c:	9c 01       	movw	r18, r24
    eb0e:	2f 71       	andi	r18, 0x1F	; 31
    eb10:	33 27       	eor	r19, r19
    eb12:	3f 93       	push	r19
    eb14:	2f 93       	push	r18
    eb16:	9c 01       	movw	r18, r24
    eb18:	55 e0       	ldi	r21, 0x05	; 5
    eb1a:	36 95       	lsr	r19
    eb1c:	27 95       	ror	r18
    eb1e:	5a 95       	dec	r21
    eb20:	e1 f7       	brne	.-8      	; 0xeb1a <fatfs_filinfo_list+0xba>
    eb22:	2f 70       	andi	r18, 0x0F	; 15
    eb24:	33 27       	eor	r19, r19
    eb26:	3f 93       	push	r19
    eb28:	2f 93       	push	r18
    eb2a:	89 2f       	mov	r24, r25
    eb2c:	99 27       	eor	r25, r25
    eb2e:	86 95       	lsr	r24
    eb30:	84 54       	subi	r24, 0x44	; 68
    eb32:	98 4f       	sbci	r25, 0xF8	; 248
    eb34:	9f 93       	push	r25
    eb36:	8f 93       	push	r24
    eb38:	ce 01       	movw	r24, r28
    eb3a:	01 96       	adiw	r24, 0x01	; 1
    eb3c:	9f 93       	push	r25
    eb3e:	8f 93       	push	r24
    eb40:	85 e6       	ldi	r24, 0x65	; 101
    eb42:	98 e0       	ldi	r25, 0x08	; 8
    eb44:	1f 92       	push	r1
    eb46:	9f 93       	push	r25
    eb48:	8f 93       	push	r24
    eb4a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        attrs,
        (info->fdate >> 9) + 1980, (info->fdate >> 5) & 15, info->fdate & 31,
        (info->ftime >> 11), (info->ftime >> 5) & 63,
        info->fsize, info->fname);
    printf("\n");
    eb4e:	83 e6       	ldi	r24, 0x63	; 99
    eb50:	98 e0       	ldi	r25, 0x08	; 8
    eb52:	1f 92       	push	r1
    eb54:	9f 93       	push	r25
    eb56:	8f 93       	push	r24
    eb58:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    eb5c:	0f b6       	in	r0, 0x3f	; 63
    eb5e:	f8 94       	cli
    eb60:	de bf       	out	0x3e, r29	; 62
    eb62:	0f be       	out	0x3f, r0	; 63
    eb64:	cd bf       	out	0x3d, r28	; 61
}
    eb66:	26 96       	adiw	r28, 0x06	; 6
    eb68:	e2 e0       	ldi	r30, 0x02	; 2
    eb6a:	0c 94 ed e8 	jmp	0x1d1da	; 0x1d1da <__epilogue_restores__+0x20>

0000eb6e <fatfs_help>:

/// @brief Display FatFs test diagnostics help menu.
/// @return  void
MEMSPACE
void fatfs_help( int full)
{
    eb6e:	cf 93       	push	r28
    eb70:	df 93       	push	r29
    eb72:	ec 01       	movw	r28, r24
    printf("fatfs help\n");
    eb74:	88 ea       	ldi	r24, 0xA8	; 168
    eb76:	9b e0       	ldi	r25, 0x0B	; 11
    eb78:	1f 92       	push	r1
    eb7a:	9f 93       	push	r25
    eb7c:	8f 93       	push	r24
    eb7e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    
    if(full)
    eb82:	0f 90       	pop	r0
    eb84:	0f 90       	pop	r0
    eb86:	0f 90       	pop	r0
    eb88:	cd 2b       	or	r28, r29
    eb8a:	51 f0       	breq	.+20     	; 0xeba0 <fatfs_help+0x32>
    {
        printf(
    eb8c:	8c e2       	ldi	r24, 0x2C	; 44
    eb8e:	9b e0       	ldi	r25, 0x0B	; 11
    eb90:	1f 92       	push	r1
    eb92:	9f 93       	push	r25
    eb94:	8f 93       	push	r24
    eb96:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    eb9a:	0f 90       	pop	r0
    eb9c:	0f 90       	pop	r0
    eb9e:	0f 90       	pop	r0
#endif
        "\n"
        );
    }
        
}
    eba0:	df 91       	pop	r29
    eba2:	cf 91       	pop	r28
    eba4:	08 95       	ret

0000eba6 <fatfs_ls>:
///
/// @see fatfs_filinfo_list().
/// @return  void.
MEMSPACE
void fatfs_ls(char *name)
{
    eba6:	aa e4       	ldi	r26, 0x4A	; 74
    eba8:	b2 e0       	ldi	r27, 0x02	; 2
    ebaa:	e9 ed       	ldi	r30, 0xD9	; 217
    ebac:	f5 e7       	ldi	r31, 0x75	; 117
    ebae:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__prologue_saves__+0x14>
    ebb2:	8e 01       	movw	r16, r28
    ebb4:	09 5e       	subi	r16, 0xE9	; 233
    ebb6:	1e 4f       	sbci	r17, 0xFE	; 254
    FILINFO fno;
    DIR dirs;                                     /* Directory object */
    FATFS *fs;
    char buff[256]; 

    if(!name || !*name)
    ebb8:	00 97       	sbiw	r24, 0x00	; 0
    ebba:	21 f0       	breq	.+8      	; 0xebc4 <fatfs_ls+0x1e>
    ebbc:	fc 01       	movw	r30, r24
    ebbe:	20 81       	ld	r18, Z
    ebc0:	21 11       	cpse	r18, r1
    ebc2:	03 c0       	rjmp	.+6      	; 0xebca <fatfs_ls+0x24>
    {
        strcpy(buff,".");
    ebc4:	66 e4       	ldi	r22, 0x46	; 70
    ebc6:	70 e1       	ldi	r23, 0x10	; 16
    ebc8:	01 c0       	rjmp	.+2      	; 0xebcc <fatfs_ls+0x26>
    }
    else
    {
        strcpy(buff,name);
    ebca:	bc 01       	movw	r22, r24
    ebcc:	c8 01       	movw	r24, r16
    ebce:	0e 94 0f 30 	call	0x601e	; 0x601e <strcpy>
    }
    printf("Listing:[%s]\n",buff);
    ebd2:	1f 93       	push	r17
    ebd4:	0f 93       	push	r16
    ebd6:	8c e9       	ldi	r24, 0x9C	; 156
    ebd8:	9a e0       	ldi	r25, 0x0A	; 10
    ebda:	1f 92       	push	r1
    ebdc:	9f 93       	push	r25
    ebde:	8f 93       	push	r24
    ebe0:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>

    res = f_opendir(&dirs, buff);
    ebe4:	b8 01       	movw	r22, r16
    ebe6:	ce 01       	movw	r24, r28
    ebe8:	89 5e       	subi	r24, 0xE9	; 233
    ebea:	9d 4f       	sbci	r25, 0xFD	; 253
    ebec:	0e 94 8d 60 	call	0xc11a	; 0xc11a <f_opendir>
    if (res) { put_rc(res); return; }
    ebf0:	0f 90       	pop	r0
    ebf2:	0f 90       	pop	r0
    ebf4:	0f 90       	pop	r0
    ebf6:	0f 90       	pop	r0
    ebf8:	0f 90       	pop	r0
    ebfa:	00 97       	sbiw	r24, 0x00	; 0
    ebfc:	11 f0       	breq	.+4      	; 0xec02 <fatfs_ls+0x5c>
    ebfe:	36 dd       	rcall	.-1428   	; 0xe66c <put_rc>
    p1 = s1 = s2 = 0;
    ec00:	9a c0       	rjmp	.+308    	; 0xed36 <fatfs_ls+0x190>
    ec02:	cb 5b       	subi	r28, 0xBB	; 187
    ec04:	dd 4f       	sbci	r29, 0xFD	; 253
    ec06:	18 82       	st	Y, r1
    ec08:	19 82       	std	Y+1, r1	; 0x01
    ec0a:	1a 82       	std	Y+2, r1	; 0x02
    ec0c:	1b 82       	std	Y+3, r1	; 0x03
    ec0e:	c5 54       	subi	r28, 0x45	; 69
    ec10:	d2 40       	sbci	r29, 0x02	; 2
    ec12:	c1 2c       	mov	r12, r1
    ec14:	d1 2c       	mov	r13, r1
    ec16:	e1 2c       	mov	r14, r1
    while(1)
    {
        res = f_readdir(&dirs, &fno);
    ec18:	f1 2c       	mov	r15, r1
    ec1a:	be 01       	movw	r22, r28
    ec1c:	6f 5f       	subi	r22, 0xFF	; 255
    ec1e:	7f 4f       	sbci	r23, 0xFF	; 255
    ec20:	ce 01       	movw	r24, r28
    ec22:	89 5e       	subi	r24, 0xE9	; 233
    ec24:	9d 4f       	sbci	r25, 0xFD	; 253
    ec26:	0e 94 15 61 	call	0xc22a	; 0xc22a <f_readdir>
        if ((res != FR_OK) || !fno.fname[0]) break;
    ec2a:	89 2b       	or	r24, r25
    ec2c:	49 f5       	brne	.+82     	; 0xec80 <fatfs_ls+0xda>
    ec2e:	8f 89       	ldd	r24, Y+23	; 0x17
    ec30:	88 23       	and	r24, r24
        if (fno.fattrib & AM_DIR)
    ec32:	31 f1       	breq	.+76     	; 0xec80 <fatfs_ls+0xda>
    ec34:	89 85       	ldd	r24, Y+9	; 0x09
    ec36:	84 ff       	sbrs	r24, 4
        {
            s2++;
    ec38:	04 c0       	rjmp	.+8      	; 0xec42 <fatfs_ls+0x9c>
    ec3a:	ff ef       	ldi	r31, 0xFF	; 255
    ec3c:	cf 1a       	sub	r12, r31
    ec3e:	df 0a       	sbc	r13, r31
        }
        else
        {
            s1++; p1 += fno.fsize;
    ec40:	1b c0       	rjmp	.+54     	; 0xec78 <fatfs_ls+0xd2>
    ec42:	2f ef       	ldi	r18, 0xFF	; 255
    ec44:	e2 1a       	sub	r14, r18
    ec46:	f2 0a       	sbc	r15, r18
    ec48:	49 81       	ldd	r20, Y+1	; 0x01
    ec4a:	5a 81       	ldd	r21, Y+2	; 0x02
    ec4c:	6b 81       	ldd	r22, Y+3	; 0x03
    ec4e:	7c 81       	ldd	r23, Y+4	; 0x04
    ec50:	cb 5b       	subi	r28, 0xBB	; 187
    ec52:	dd 4f       	sbci	r29, 0xFD	; 253
    ec54:	88 81       	ld	r24, Y
    ec56:	99 81       	ldd	r25, Y+1	; 0x01
    ec58:	aa 81       	ldd	r26, Y+2	; 0x02
    ec5a:	bb 81       	ldd	r27, Y+3	; 0x03
    ec5c:	c5 54       	subi	r28, 0x45	; 69
    ec5e:	d2 40       	sbci	r29, 0x02	; 2
    ec60:	84 0f       	add	r24, r20
    ec62:	95 1f       	adc	r25, r21
    ec64:	a6 1f       	adc	r26, r22
    ec66:	b7 1f       	adc	r27, r23
    ec68:	cb 5b       	subi	r28, 0xBB	; 187
    ec6a:	dd 4f       	sbci	r29, 0xFD	; 253
    ec6c:	88 83       	st	Y, r24
    ec6e:	99 83       	std	Y+1, r25	; 0x01
    ec70:	aa 83       	std	Y+2, r26	; 0x02
    ec72:	bb 83       	std	Y+3, r27	; 0x03
    ec74:	c5 54       	subi	r28, 0x45	; 69
        }
        fatfs_filinfo_list(&fno);
    ec76:	d2 40       	sbci	r29, 0x02	; 2
    ec78:	ce 01       	movw	r24, r28
    ec7a:	01 96       	adiw	r24, 0x01	; 1
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    ec7c:	f1 de       	rcall	.-542    	; 0xea60 <fatfs_filinfo_list>
    printf("%4u File(s),%10lu bytes total\n%4u Dir(s)", s1, p1, s2);
    ec7e:	cd cf       	rjmp	.-102    	; 0xec1a <fatfs_ls+0x74>
    ec80:	df 92       	push	r13
    ec82:	cf 92       	push	r12
    ec84:	c8 5b       	subi	r28, 0xB8	; 184
    ec86:	dd 4f       	sbci	r29, 0xFD	; 253
    ec88:	88 81       	ld	r24, Y
    ec8a:	c8 54       	subi	r28, 0x48	; 72
    ec8c:	d2 40       	sbci	r29, 0x02	; 2
    ec8e:	8f 93       	push	r24
    ec90:	c9 5b       	subi	r28, 0xB9	; 185
    ec92:	dd 4f       	sbci	r29, 0xFD	; 253
    ec94:	88 81       	ld	r24, Y
    ec96:	c7 54       	subi	r28, 0x47	; 71
    ec98:	d2 40       	sbci	r29, 0x02	; 2
    ec9a:	8f 93       	push	r24
    ec9c:	ca 5b       	subi	r28, 0xBA	; 186
    ec9e:	dd 4f       	sbci	r29, 0xFD	; 253
    eca0:	88 81       	ld	r24, Y
    eca2:	c6 54       	subi	r28, 0x46	; 70
    eca4:	d2 40       	sbci	r29, 0x02	; 2
    eca6:	8f 93       	push	r24
    eca8:	cb 5b       	subi	r28, 0xBB	; 187
    ecaa:	dd 4f       	sbci	r29, 0xFD	; 253
    ecac:	88 81       	ld	r24, Y
    ecae:	c5 54       	subi	r28, 0x45	; 69
    ecb0:	d2 40       	sbci	r29, 0x02	; 2
    ecb2:	8f 93       	push	r24
    ecb4:	ff 92       	push	r15
    ecb6:	ef 92       	push	r14
    ecb8:	83 e7       	ldi	r24, 0x73	; 115
    ecba:	9a e0       	ldi	r25, 0x0A	; 10
    ecbc:	1f 92       	push	r1
    ecbe:	9f 93       	push	r25
    ecc0:	8f 93       	push	r24
    ecc2:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    if (f_getfree(buff, (DWORD*)&p1, &fs) == FR_OK)
    ecc6:	ae 01       	movw	r20, r28
    ecc8:	47 5b       	subi	r20, 0xB7	; 183
    ecca:	5d 4f       	sbci	r21, 0xFD	; 253
    eccc:	be 01       	movw	r22, r28
    ecce:	6b 5b       	subi	r22, 0xBB	; 187
    ecd0:	7d 4f       	sbci	r23, 0xFD	; 253
    ecd2:	c8 01       	movw	r24, r16
    ecd4:	0e 94 9b 61 	call	0xc336	; 0xc336 <f_getfree>
    ecd8:	0f b6       	in	r0, 0x3f	; 63
    ecda:	f8 94       	cli
    ecdc:	de bf       	out	0x3e, r29	; 62
    ecde:	0f be       	out	0x3f, r0	; 63
    ece0:	cd bf       	out	0x3d, r28	; 61
    ece2:	89 2b       	or	r24, r25
        printf(", %10luK bytes free\n", p1 * fs->csize / 2);
    ece4:	41 f5       	brne	.+80     	; 0xed36 <fatfs_ls+0x190>
    ece6:	c7 5b       	subi	r28, 0xB7	; 183
    ece8:	dd 4f       	sbci	r29, 0xFD	; 253
    ecea:	e8 81       	ld	r30, Y
    ecec:	f9 81       	ldd	r31, Y+1	; 0x01
    ecee:	c9 54       	subi	r28, 0x49	; 73
    ecf0:	d2 40       	sbci	r29, 0x02	; 2
    ecf2:	a1 85       	ldd	r26, Z+9	; 0x09
    ecf4:	b2 85       	ldd	r27, Z+10	; 0x0a
    ecf6:	cb 5b       	subi	r28, 0xBB	; 187
    ecf8:	dd 4f       	sbci	r29, 0xFD	; 253
    ecfa:	28 81       	ld	r18, Y
    ecfc:	39 81       	ldd	r19, Y+1	; 0x01
    ecfe:	4a 81       	ldd	r20, Y+2	; 0x02
    ed00:	5b 81       	ldd	r21, Y+3	; 0x03
    ed02:	c5 54       	subi	r28, 0x45	; 69
    ed04:	d2 40       	sbci	r29, 0x02	; 2
    ed06:	0e 94 a1 e8 	call	0x1d142	; 0x1d142 <__muluhisi3>
    ed0a:	22 e0       	ldi	r18, 0x02	; 2
    ed0c:	30 e0       	ldi	r19, 0x00	; 0
    ed0e:	40 e0       	ldi	r20, 0x00	; 0
    ed10:	50 e0       	ldi	r21, 0x00	; 0
    ed12:	0e 94 76 e8 	call	0x1d0ec	; 0x1d0ec <__divmodsi4>
    ed16:	5f 93       	push	r21
    ed18:	4f 93       	push	r20
    ed1a:	3f 93       	push	r19
    ed1c:	2f 93       	push	r18
    ed1e:	8e e5       	ldi	r24, 0x5E	; 94
    ed20:	9a e0       	ldi	r25, 0x0A	; 10
    ed22:	1f 92       	push	r1
    ed24:	9f 93       	push	r25
    ed26:	8f 93       	push	r24
    ed28:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    ed2c:	0f b6       	in	r0, 0x3f	; 63
    ed2e:	f8 94       	cli
    ed30:	de bf       	out	0x3e, r29	; 62
    ed32:	0f be       	out	0x3f, r0	; 63
}
    ed34:	cd bf       	out	0x3d, r28	; 61
    ed36:	c6 5b       	subi	r28, 0xB6	; 182
    ed38:	dd 4f       	sbci	r29, 0xFD	; 253
    ed3a:	e8 e0       	ldi	r30, 0x08	; 8
    ed3c:	0c 94 e7 e8 	jmp	0x1d1ce	; 0x1d1ce <__epilogue_restores__+0x14>

0000ed40 <mmc_test>:
///
/// @return void
MEMSPACE
void mmc_test(void)
{
    printf("==============================\n");
    ed40:	8c ef       	ldi	r24, 0xFC	; 252
    ed42:	9a e0       	ldi	r25, 0x0A	; 10
    ed44:	1f 92       	push	r1
    ed46:	9f 93       	push	r25
    ed48:	8f 93       	push	r24
    ed4a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    printf("START MMC TEST\n");
    ed4e:	8c ee       	ldi	r24, 0xEC	; 236
    ed50:	9a e0       	ldi	r25, 0x0A	; 10
    ed52:	1f 92       	push	r1
    ed54:	9f 93       	push	r25
    ed56:	8f 93       	push	r24
    ed58:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    fatfs_status("/");
    ed5c:	87 e0       	ldi	r24, 0x07	; 7
    ed5e:	98 e0       	ldi	r25, 0x08	; 8
    ed60:	13 dd       	rcall	.-1498   	; 0xe788 <fatfs_status>
    printf("MMC Directory List\n");
    ed62:	88 ed       	ldi	r24, 0xD8	; 216
    ed64:	9a e0       	ldi	r25, 0x0A	; 10
    ed66:	1f 92       	push	r1
    ed68:	9f 93       	push	r25
    ed6a:	8f 93       	push	r24
    ed6c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    fatfs_ls("/");
    ed70:	87 e0       	ldi	r24, 0x07	; 7
    ed72:	98 e0       	ldi	r25, 0x08	; 8
    ed74:	18 df       	rcall	.-464    	; 0xeba6 <fatfs_ls>
    fatfs_cat("test3.txt");
    fatfs_ls("");
#endif
#endif

    printf("END MMC TEST\n");
    ed76:	8a ec       	ldi	r24, 0xCA	; 202
    ed78:	9a e0       	ldi	r25, 0x0A	; 10
    ed7a:	1f 92       	push	r1
    ed7c:	9f 93       	push	r25
    ed7e:	8f 93       	push	r24
    ed80:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    printf("==============================\n");
    ed84:	8a ea       	ldi	r24, 0xAA	; 170
    ed86:	9a e0       	ldi	r25, 0x0A	; 10
    ed88:	1f 92       	push	r1
    ed8a:	9f 93       	push	r25
    ed8c:	8f 93       	push	r24
    ed8e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
}
    ed92:	8d b7       	in	r24, 0x3d	; 61
    ed94:	9e b7       	in	r25, 0x3e	; 62
    ed96:	0f 96       	adiw	r24, 0x0f	; 15
    ed98:	0f b6       	in	r0, 0x3f	; 63
    ed9a:	f8 94       	cli
    ed9c:	9e bf       	out	0x3e, r25	; 62
    ed9e:	0f be       	out	0x3f, r0	; 63
    eda0:	8d bf       	out	0x3d, r24	; 61
    eda2:	08 95       	ret

0000eda4 <fatfs_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int fatfs_tests(int argc,char *argv[])
{
    eda4:	ef 92       	push	r14
    eda6:	ff 92       	push	r15
    eda8:	0f 93       	push	r16
    edaa:	1f 93       	push	r17
    edac:	cf 93       	push	r28
    edae:	df 93       	push	r29
    char *ptr;
    int ind;


    ind = 0;
    ptr = argv[ind++];
    edb0:	fb 01       	movw	r30, r22
    edb2:	20 81       	ld	r18, Z
    edb4:	31 81       	ldd	r19, Z+1	; 0x01

    if(!ptr)
    edb6:	21 15       	cp	r18, r1
    edb8:	31 05       	cpc	r19, r1
    edba:	19 f4       	brne	.+6      	; 0xedc2 <fatfs_tests+0x1e>
        return(0);
    edbc:	80 e0       	ldi	r24, 0x00	; 0
    edbe:	90 e0       	ldi	r25, 0x00	; 0
    edc0:	77 c0       	rjmp	.+238    	; 0xeeb0 <fatfs_tests+0x10c>
    edc2:	eb 01       	movw	r28, r22
    edc4:	8c 01       	movw	r16, r24

// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    edc6:	61 e3       	ldi	r22, 0x31	; 49
    edc8:	78 e0       	ldi	r23, 0x08	; 8
    edca:	c9 01       	movw	r24, r18
    edcc:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <MATCH>
    edd0:	89 2b       	or	r24, r25
    edd2:	a1 f3       	breq	.-24     	; 0xedbc <fatfs_tests+0x18>
    {
        ptr = argv[ind++];
    edd4:	ea 80       	ldd	r14, Y+2	; 0x02
    edd6:	fb 80       	ldd	r15, Y+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
    edd8:	e1 14       	cp	r14, r1
    edda:	f1 04       	cpc	r15, r1
    eddc:	21 f4       	brne	.+8      	; 0xede6 <fatfs_tests+0x42>
        {
            fatfs_help(1);
    edde:	81 e0       	ldi	r24, 0x01	; 1
    ede0:	90 e0       	ldi	r25, 0x00	; 0
    ede2:	c5 de       	rcall	.-630    	; 0xeb6e <fatfs_help>
    ede4:	63 c0       	rjmp	.+198    	; 0xeeac <fatfs_tests+0x108>
// If we have POSIX_TESTS we MUST prefix each test with "fatfs" keyword to avoid name clashing

    if( MATCH(ptr,"fatfs") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
    ede6:	69 e0       	ldi	r22, 0x09	; 9
    ede8:	76 e1       	ldi	r23, 0x16	; 22
    edea:	c7 01       	movw	r24, r14
    edec:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <MATCH>
    edf0:	89 2b       	or	r24, r25
    edf2:	a9 f7       	brne	.-22     	; 0xedde <fatfs_tests+0x3a>
    {
        return(0);
    }
#endif

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    edf4:	98 01       	movw	r18, r16
    edf6:	42 e0       	ldi	r20, 0x02	; 2
    edf8:	50 e0       	ldi	r21, 0x00	; 0
    edfa:	67 e3       	ldi	r22, 0x37	; 55
    edfc:	78 e0       	ldi	r23, 0x08	; 8
    edfe:	c7 01       	movw	r24, r14
    ee00:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
    ee04:	89 2b       	or	r24, r25
    ee06:	51 f1       	breq	.+84     	; 0xee5c <fatfs_tests+0xb8>
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
    ee08:	1f 93       	push	r17
    ee0a:	0f 93       	push	r16
    ee0c:	1f 92       	push	r1
    ee0e:	82 e0       	ldi	r24, 0x02	; 2
    ee10:	8f 93       	push	r24
    ee12:	8c e1       	ldi	r24, 0x1C	; 28
    ee14:	9b e0       	ldi	r25, 0x0B	; 11
    ee16:	1f 92       	push	r1
    ee18:	9f 93       	push	r25
    ee1a:	8f 93       	push	r24
    ee1c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    ee20:	7e 01       	movw	r14, r28
    ee22:	f4 e0       	ldi	r31, 0x04	; 4
    ee24:	ef 0e       	add	r14, r31
    ee26:	f1 1c       	adc	r15, r1
        for(i=ind;i<argc;++i)
    ee28:	8d b7       	in	r24, 0x3d	; 61
    ee2a:	9e b7       	in	r25, 0x3e	; 62
    ee2c:	07 96       	adiw	r24, 0x07	; 7
    ee2e:	0f b6       	in	r0, 0x3f	; 63
    ee30:	f8 94       	cli
    ee32:	9e bf       	out	0x3e, r25	; 62
    ee34:	0f be       	out	0x3f, r0	; 63
    ee36:	8d bf       	out	0x3d, r24	; 61
    ee38:	c2 e0       	ldi	r28, 0x02	; 2
    ee3a:	d0 e0       	ldi	r29, 0x00	; 0
    ee3c:	c0 17       	cp	r28, r16
    ee3e:	d1 07       	cpc	r29, r17
    ee40:	3c f4       	brge	.+14     	; 0xee50 <fatfs_tests+0xac>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
    ee42:	f7 01       	movw	r30, r14
    ee44:	81 91       	ld	r24, Z+
    ee46:	91 91       	ld	r25, Z+
    ee48:	7f 01       	movw	r14, r30
    ee4a:	ad de       	rcall	.-678    	; 0xeba6 <fatfs_ls>
    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
    {
        int i;
        int args = 0;
        printf("ind:%d,argc:%d\n", ind, argc);
        for(i=ind;i<argc;++i)
    ee4c:	21 96       	adiw	r28, 0x01	; 1
    ee4e:	f6 cf       	rjmp	.-20     	; 0xee3c <fatfs_tests+0x98>
        {
            //printf("%d:%s\n", i, argv[i]);
            fatfs_ls(argv[i]);
            ++args;
        }
        if(!args)
    ee50:	22 97       	sbiw	r28, 0x02	; 2
        {
            fatfs_ls("");
    ee52:	61 f5       	brne	.+88     	; 0xeeac <fatfs_tests+0x108>
    ee54:	8d e9       	ldi	r24, 0x9D	; 157
    ee56:	9b e0       	ldi	r25, 0x0B	; 11
    ee58:	a6 de       	rcall	.-692    	; 0xeba6 <fatfs_ls>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_test",(ind+0),argc ))
    ee5a:	28 c0       	rjmp	.+80     	; 0xeeac <fatfs_tests+0x108>
    ee5c:	98 01       	movw	r18, r16
    ee5e:	42 e0       	ldi	r20, 0x02	; 2
    ee60:	50 e0       	ldi	r21, 0x00	; 0
    ee62:	6a e3       	ldi	r22, 0x3A	; 58
    ee64:	78 e0       	ldi	r23, 0x08	; 8
    ee66:	c7 01       	movw	r24, r14
    ee68:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
    {
        mmc_test();
    ee6c:	89 2b       	or	r24, r25
    ee6e:	11 f0       	breq	.+4      	; 0xee74 <fatfs_tests+0xd0>
    ee70:	67 df       	rcall	.-306    	; 0xed40 <mmc_test>
        return(1);
    }

    if (MATCHARGS(ptr,"mmc_init",(ind+0),argc))
    ee72:	1c c0       	rjmp	.+56     	; 0xeeac <fatfs_tests+0x108>
    ee74:	98 01       	movw	r18, r16
    ee76:	42 e0       	ldi	r20, 0x02	; 2
    ee78:	50 e0       	ldi	r21, 0x00	; 0
    ee7a:	63 e4       	ldi	r22, 0x43	; 67
    ee7c:	78 e0       	ldi	r23, 0x08	; 8
    ee7e:	c7 01       	movw	r24, r14
    ee80:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
    {
        mmc_init(1);
    ee84:	89 2b       	or	r24, r25
    ee86:	21 f0       	breq	.+8      	; 0xee90 <fatfs_tests+0xec>
    ee88:	81 e0       	ldi	r24, 0x01	; 1
    ee8a:	90 e0       	ldi	r25, 0x00	; 0
    ee8c:	c4 da       	rcall	.-2680   	; 0xe416 <mmc_init>
        return(1);
    }

    if (MATCHARGS(ptr,"status", (ind + 1), argc))
    ee8e:	0e c0       	rjmp	.+28     	; 0xeeac <fatfs_tests+0x108>
    ee90:	98 01       	movw	r18, r16
    ee92:	43 e0       	ldi	r20, 0x03	; 3
    ee94:	50 e0       	ldi	r21, 0x00	; 0
    ee96:	6c e4       	ldi	r22, 0x4C	; 76
    ee98:	78 e0       	ldi	r23, 0x08	; 8
    ee9a:	c7 01       	movw	r24, r14
    ee9c:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
    eea0:	89 2b       	or	r24, r25
    {
        fatfs_status(argv[ind]);
    eea2:	09 f4       	brne	.+2      	; 0xeea6 <fatfs_tests+0x102>
    eea4:	8b cf       	rjmp	.-234    	; 0xedbc <fatfs_tests+0x18>
    eea6:	8c 81       	ldd	r24, Y+4	; 0x04
    eea8:	9d 81       	ldd	r25, Y+5	; 0x05
        }
        if(!args)
        {
            fatfs_ls("");
        }
        return(1);
    eeaa:	6e dc       	rcall	.-1828   	; 0xe788 <fatfs_status>
    eeac:	81 e0       	ldi	r24, 0x01	; 1
        return(1);
    }
#endif

    return(0);
}
    eeae:	90 e0       	ldi	r25, 0x00	; 0
    eeb0:	cd b7       	in	r28, 0x3d	; 61
    eeb2:	de b7       	in	r29, 0x3e	; 62
    eeb4:	e6 e0       	ldi	r30, 0x06	; 6
    eeb6:	0c 94 e9 e8 	jmp	0x1d1d2	; 0x1d1d2 <__epilogue_restores__+0x18>

0000eeba <fatfs_getc>:
    {
        errno = fatfs_to_errno(rc);
        return(-1);
    }
    return(0);
}
    eeba:	8f 92       	push	r8
    eebc:	9f 92       	push	r9
    eebe:	af 92       	push	r10
    eec0:	bf 92       	push	r11
    eec2:	ef 92       	push	r14
    eec4:	ff 92       	push	r15
    eec6:	0f 93       	push	r16
    eec8:	1f 93       	push	r17
    eeca:	cf 93       	push	r28
    eecc:	df 93       	push	r29
    eece:	00 d0       	rcall	.+0      	; 0xeed0 <fatfs_getc+0x16>
    eed0:	1f 92       	push	r1
    eed2:	cd b7       	in	r28, 0x3d	; 61
    eed4:	de b7       	in	r29, 0x3e	; 62
    eed6:	10 92 6f 1c 	sts	0x1C6F, r1	; 0x801c6f <errno+0x1>
    eeda:	10 92 6e 1c 	sts	0x1C6E, r1	; 0x801c6e <errno>
    eede:	00 97       	sbiw	r24, 0x00	; 0
    eee0:	39 f4       	brne	.+14     	; 0xeef0 <fatfs_getc+0x36>
    eee2:	89 e0       	ldi	r24, 0x09	; 9
    eee4:	90 e0       	ldi	r25, 0x00	; 0
    eee6:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
    eeea:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
    eeee:	2f c0       	rjmp	.+94     	; 0xef4e <fatfs_getc+0x94>
    eef0:	fc 01       	movw	r30, r24
    eef2:	e4 84       	ldd	r14, Z+12	; 0x0c
    eef4:	f5 84       	ldd	r15, Z+13	; 0x0d
    eef6:	e1 14       	cp	r14, r1
    eef8:	f1 04       	cpc	r15, r1
    eefa:	99 f3       	breq	.-26     	; 0xeee2 <fatfs_getc+0x28>
    eefc:	8c 01       	movw	r16, r24
    eefe:	9e 01       	movw	r18, r28
    ef00:	2f 5f       	subi	r18, 0xFF	; 255
    ef02:	3f 4f       	sbci	r19, 0xFF	; 255
    ef04:	41 e0       	ldi	r20, 0x01	; 1
    ef06:	50 e0       	ldi	r21, 0x00	; 0
    ef08:	be 01       	movw	r22, r28
    ef0a:	6d 5f       	subi	r22, 0xFD	; 253
    ef0c:	7f 4f       	sbci	r23, 0xFF	; 255
    ef0e:	c7 01       	movw	r24, r14
    ef10:	0e 94 a6 58 	call	0xb14c	; 0xb14c <f_read>
    ef14:	00 97       	sbiw	r24, 0x00	; 0
    ef16:	31 f4       	brne	.+12     	; 0xef24 <fatfs_getc+0x6a>
    ef18:	29 81       	ldd	r18, Y+1	; 0x01
    ef1a:	3a 81       	ldd	r19, Y+2	; 0x02
    ef1c:	21 30       	cpi	r18, 0x01	; 1
    ef1e:	31 05       	cpc	r19, r1
    ef20:	c9 f0       	breq	.+50     	; 0xef54 <fatfs_getc+0x9a>
    ef22:	03 c0       	rjmp	.+6      	; 0xef2a <fatfs_getc+0x70>
    ef24:	84 31       	cpi	r24, 0x14	; 20
    ef26:	91 05       	cpc	r25, r1
    ef28:	40 f4       	brcc	.+16     	; 0xef3a <fatfs_getc+0x80>
    ef2a:	fc 01       	movw	r30, r24
    ef2c:	e1 51       	subi	r30, 0x11	; 17
    ef2e:	f9 4f       	sbci	r31, 0xF9	; 249
    ef30:	80 81       	ld	r24, Z
    ef32:	08 2e       	mov	r0, r24
    ef34:	00 0c       	add	r0, r0
    ef36:	99 0b       	sbc	r25, r25
    ef38:	02 c0       	rjmp	.+4      	; 0xef3e <fatfs_getc+0x84>
    ef3a:	83 e2       	ldi	r24, 0x23	; 35
    ef3c:	90 e0       	ldi	r25, 0x00	; 0
    ef3e:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
    ef42:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
    ef46:	f8 01       	movw	r30, r16
    ef48:	83 81       	ldd	r24, Z+3	; 0x03
    ef4a:	80 62       	ori	r24, 0x20	; 32
    ef4c:	83 83       	std	Z+3, r24	; 0x03
    ef4e:	8f ef       	ldi	r24, 0xFF	; 255
    ef50:	9f ef       	ldi	r25, 0xFF	; 255
    ef52:	28 c0       	rjmp	.+80     	; 0xefa4 <fatfs_getc+0xea>
    ef54:	8b 81       	ldd	r24, Y+3	; 0x03
    ef56:	8d 30       	cpi	r24, 0x0D	; 13
    ef58:	01 f5       	brne	.+64     	; 0xef9a <fatfs_getc+0xe0>
    ef5a:	f7 01       	movw	r30, r14
    ef5c:	80 88       	ldd	r8, Z+16	; 0x10
    ef5e:	91 88       	ldd	r9, Z+17	; 0x11
    ef60:	a2 88       	ldd	r10, Z+18	; 0x12
    ef62:	b3 88       	ldd	r11, Z+19	; 0x13
    ef64:	9e 01       	movw	r18, r28
    ef66:	2f 5f       	subi	r18, 0xFF	; 255
    ef68:	3f 4f       	sbci	r19, 0xFF	; 255
    ef6a:	41 e0       	ldi	r20, 0x01	; 1
    ef6c:	50 e0       	ldi	r21, 0x00	; 0
    ef6e:	be 01       	movw	r22, r28
    ef70:	6d 5f       	subi	r22, 0xFD	; 253
    ef72:	7f 4f       	sbci	r23, 0xFF	; 255
    ef74:	c7 01       	movw	r24, r14
    ef76:	0e 94 a6 58 	call	0xb14c	; 0xb14c <f_read>
    ef7a:	89 2b       	or	r24, r25
    ef7c:	89 f4       	brne	.+34     	; 0xefa0 <fatfs_getc+0xe6>
    ef7e:	89 81       	ldd	r24, Y+1	; 0x01
    ef80:	9a 81       	ldd	r25, Y+2	; 0x02
    ef82:	01 97       	sbiw	r24, 0x01	; 1
    ef84:	69 f4       	brne	.+26     	; 0xefa0 <fatfs_getc+0xe6>
    ef86:	8b 81       	ldd	r24, Y+3	; 0x03
    ef88:	8a 30       	cpi	r24, 0x0A	; 10
    ef8a:	31 f0       	breq	.+12     	; 0xef98 <fatfs_getc+0xde>
    ef8c:	b5 01       	movw	r22, r10
    ef8e:	a4 01       	movw	r20, r8
    ef90:	c7 01       	movw	r24, r14
    ef92:	0e 94 b0 5d 	call	0xbb60	; 0xbb60 <f_lseek>
    ef96:	04 c0       	rjmp	.+8      	; 0xefa0 <fatfs_getc+0xe6>
    ef98:	8b 83       	std	Y+3, r24	; 0x03
    ef9a:	8b 81       	ldd	r24, Y+3	; 0x03
    ef9c:	90 e0       	ldi	r25, 0x00	; 0
    ef9e:	02 c0       	rjmp	.+4      	; 0xefa4 <fatfs_getc+0xea>
    efa0:	8a e0       	ldi	r24, 0x0A	; 10
    efa2:	90 e0       	ldi	r25, 0x00	; 0
    efa4:	0f 90       	pop	r0
    efa6:	0f 90       	pop	r0
    efa8:	0f 90       	pop	r0
    efaa:	df 91       	pop	r29
    efac:	cf 91       	pop	r28
    efae:	1f 91       	pop	r17
    efb0:	0f 91       	pop	r16
    efb2:	ff 90       	pop	r15
    efb4:	ef 90       	pop	r14
    efb6:	bf 90       	pop	r11
    efb8:	af 90       	pop	r10
    efba:	9f 90       	pop	r9
    efbc:	8f 90       	pop	r8
    efbe:	08 95       	ret

0000efc0 <fatfs_putc>:
    efc0:	a3 e0       	ldi	r26, 0x03	; 3
    efc2:	b0 e0       	ldi	r27, 0x00	; 0
    efc4:	e6 ee       	ldi	r30, 0xE6	; 230
    efc6:	f7 e7       	ldi	r31, 0x77	; 119
    efc8:	0c 94 cf e8 	jmp	0x1d19e	; 0x1d19e <__prologue_saves__+0x1c>
    efcc:	8b 83       	std	Y+3, r24	; 0x03
    efce:	10 92 6f 1c 	sts	0x1C6F, r1	; 0x801c6f <errno+0x1>
    efd2:	10 92 6e 1c 	sts	0x1C6E, r1	; 0x801c6e <errno>
    efd6:	61 15       	cp	r22, r1
    efd8:	71 05       	cpc	r23, r1
    efda:	39 f4       	brne	.+14     	; 0xefea <fatfs_putc+0x2a>
    efdc:	89 e0       	ldi	r24, 0x09	; 9
    efde:	90 e0       	ldi	r25, 0x00	; 0
    efe0:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
    efe4:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
    efe8:	2d c0       	rjmp	.+90     	; 0xf044 <fatfs_putc+0x84>
    efea:	fb 01       	movw	r30, r22
    efec:	84 85       	ldd	r24, Z+12	; 0x0c
    efee:	95 85       	ldd	r25, Z+13	; 0x0d
    eff0:	00 97       	sbiw	r24, 0x00	; 0
    eff2:	a1 f3       	breq	.-24     	; 0xefdc <fatfs_putc+0x1c>
    eff4:	8b 01       	movw	r16, r22
    eff6:	9e 01       	movw	r18, r28
    eff8:	2f 5f       	subi	r18, 0xFF	; 255
    effa:	3f 4f       	sbci	r19, 0xFF	; 255
    effc:	41 e0       	ldi	r20, 0x01	; 1
    effe:	50 e0       	ldi	r21, 0x00	; 0
    f000:	be 01       	movw	r22, r28
    f002:	6d 5f       	subi	r22, 0xFD	; 253
    f004:	7f 4f       	sbci	r23, 0xFF	; 255
    f006:	0e 94 f1 59 	call	0xb3e2	; 0xb3e2 <f_write>
    f00a:	00 97       	sbiw	r24, 0x00	; 0
    f00c:	31 f4       	brne	.+12     	; 0xf01a <fatfs_putc+0x5a>
    f00e:	29 81       	ldd	r18, Y+1	; 0x01
    f010:	3a 81       	ldd	r19, Y+2	; 0x02
    f012:	21 30       	cpi	r18, 0x01	; 1
    f014:	31 05       	cpc	r19, r1
    f016:	c9 f0       	breq	.+50     	; 0xf04a <fatfs_putc+0x8a>
    f018:	03 c0       	rjmp	.+6      	; 0xf020 <fatfs_putc+0x60>
    f01a:	84 31       	cpi	r24, 0x14	; 20
    f01c:	91 05       	cpc	r25, r1
    f01e:	40 f4       	brcc	.+16     	; 0xf030 <fatfs_putc+0x70>
    f020:	fc 01       	movw	r30, r24
    f022:	e1 51       	subi	r30, 0x11	; 17
    f024:	f9 4f       	sbci	r31, 0xF9	; 249
    f026:	80 81       	ld	r24, Z
    f028:	08 2e       	mov	r0, r24
    f02a:	00 0c       	add	r0, r0
    f02c:	99 0b       	sbc	r25, r25
    f02e:	02 c0       	rjmp	.+4      	; 0xf034 <fatfs_putc+0x74>
    f030:	83 e2       	ldi	r24, 0x23	; 35
    f032:	90 e0       	ldi	r25, 0x00	; 0
    f034:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
    f038:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
    f03c:	f8 01       	movw	r30, r16
    f03e:	83 81       	ldd	r24, Z+3	; 0x03
    f040:	80 62       	ori	r24, 0x20	; 32
    f042:	83 83       	std	Z+3, r24	; 0x03
    f044:	8f ef       	ldi	r24, 0xFF	; 255
    f046:	9f ef       	ldi	r25, 0xFF	; 255
    f048:	02 c0       	rjmp	.+4      	; 0xf04e <fatfs_putc+0x8e>
    f04a:	8b 81       	ldd	r24, Y+3	; 0x03
    f04c:	90 e0       	ldi	r25, 0x00	; 0
    f04e:	23 96       	adiw	r28, 0x03	; 3
    f050:	e4 e0       	ldi	r30, 0x04	; 4
    f052:	0c 94 eb e8 	jmp	0x1d1d6	; 0x1d1d6 <__epilogue_restores__+0x1c>

0000f056 <fgetc>:
    f056:	cf 93       	push	r28
    f058:	df 93       	push	r29
    f05a:	ec 01       	movw	r28, r24
    f05c:	00 97       	sbiw	r24, 0x00	; 0
    f05e:	39 f4       	brne	.+14     	; 0xf06e <fgetc+0x18>
    f060:	89 e0       	ldi	r24, 0x09	; 9
    f062:	90 e0       	ldi	r25, 0x00	; 0
    f064:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
    f068:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
    f06c:	40 c0       	rjmp	.+128    	; 0xf0ee <fgetc+0x98>
    f06e:	2b 81       	ldd	r18, Y+3	; 0x03
    f070:	20 ff       	sbrs	r18, 0
    f072:	3d c0       	rjmp	.+122    	; 0xf0ee <fgetc+0x98>
    f074:	26 ff       	sbrs	r18, 6
    f076:	0a c0       	rjmp	.+20     	; 0xf08c <fgetc+0x36>
    f078:	2f 7b       	andi	r18, 0xBF	; 191
    f07a:	2b 83       	std	Y+3, r18	; 0x03
    f07c:	8e 81       	ldd	r24, Y+6	; 0x06
    f07e:	9f 81       	ldd	r25, Y+7	; 0x07
    f080:	01 96       	adiw	r24, 0x01	; 1
    f082:	9f 83       	std	Y+7, r25	; 0x07
    f084:	8e 83       	std	Y+6, r24	; 0x06
    f086:	8a 81       	ldd	r24, Y+2	; 0x02
    f088:	90 e0       	ldi	r25, 0x00	; 0
    f08a:	33 c0       	rjmp	.+102    	; 0xf0f2 <fgetc+0x9c>
    f08c:	22 ff       	sbrs	r18, 2
    f08e:	0d c0       	rjmp	.+26     	; 0xf0aa <fgetc+0x54>
    f090:	e8 81       	ld	r30, Y
    f092:	f9 81       	ldd	r31, Y+1	; 0x01
    f094:	80 81       	ld	r24, Z
    f096:	90 e0       	ldi	r25, 0x00	; 0
    f098:	00 97       	sbiw	r24, 0x00	; 0
    f09a:	19 f4       	brne	.+6      	; 0xf0a2 <fgetc+0x4c>
    f09c:	20 62       	ori	r18, 0x20	; 32
    f09e:	2b 83       	std	Y+3, r18	; 0x03
    f0a0:	26 c0       	rjmp	.+76     	; 0xf0ee <fgetc+0x98>
    f0a2:	31 96       	adiw	r30, 0x01	; 1
    f0a4:	f9 83       	std	Y+1, r31	; 0x01
    f0a6:	e8 83       	st	Y, r30
    f0a8:	1b c0       	rjmp	.+54     	; 0xf0e0 <fgetc+0x8a>
    f0aa:	ea 85       	ldd	r30, Y+10	; 0x0a
    f0ac:	fb 85       	ldd	r31, Y+11	; 0x0b
    f0ae:	30 97       	sbiw	r30, 0x00	; 0
    f0b0:	59 f4       	brne	.+22     	; 0xf0c8 <fgetc+0x72>
    f0b2:	88 e7       	ldi	r24, 0x78	; 120
    f0b4:	9c e0       	ldi	r25, 0x0C	; 12
    f0b6:	1f 92       	push	r1
    f0b8:	9f 93       	push	r25
    f0ba:	8f 93       	push	r24
    f0bc:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    f0c0:	0f 90       	pop	r0
    f0c2:	0f 90       	pop	r0
    f0c4:	0f 90       	pop	r0
    f0c6:	13 c0       	rjmp	.+38     	; 0xf0ee <fgetc+0x98>
    f0c8:	09 95       	icall
    f0ca:	97 ff       	sbrs	r25, 7
    f0cc:	09 c0       	rjmp	.+18     	; 0xf0e0 <fgetc+0x8a>
    f0ce:	2b 81       	ldd	r18, Y+3	; 0x03
    f0d0:	02 96       	adiw	r24, 0x02	; 2
    f0d2:	11 f0       	breq	.+4      	; 0xf0d8 <fgetc+0x82>
    f0d4:	80 e2       	ldi	r24, 0x20	; 32
    f0d6:	01 c0       	rjmp	.+2      	; 0xf0da <fgetc+0x84>
    f0d8:	80 e1       	ldi	r24, 0x10	; 16
    f0da:	82 2b       	or	r24, r18
    f0dc:	8b 83       	std	Y+3, r24	; 0x03
    f0de:	07 c0       	rjmp	.+14     	; 0xf0ee <fgetc+0x98>
    f0e0:	2e 81       	ldd	r18, Y+6	; 0x06
    f0e2:	3f 81       	ldd	r19, Y+7	; 0x07
    f0e4:	2f 5f       	subi	r18, 0xFF	; 255
    f0e6:	3f 4f       	sbci	r19, 0xFF	; 255
    f0e8:	3f 83       	std	Y+7, r19	; 0x07
    f0ea:	2e 83       	std	Y+6, r18	; 0x06
    f0ec:	02 c0       	rjmp	.+4      	; 0xf0f2 <fgetc+0x9c>
    f0ee:	8f ef       	ldi	r24, 0xFF	; 255
    f0f0:	9f ef       	ldi	r25, 0xFF	; 255
    f0f2:	df 91       	pop	r29
    f0f4:	cf 91       	pop	r28
    f0f6:	08 95       	ret

0000f0f8 <fputc>:
    f0f8:	cf 93       	push	r28
    f0fa:	df 93       	push	r29
    f0fc:	eb 01       	movw	r28, r22
    f0fe:	10 92 6f 1c 	sts	0x1C6F, r1	; 0x801c6f <errno+0x1>
    f102:	10 92 6e 1c 	sts	0x1C6E, r1	; 0x801c6e <errno>
    f106:	20 91 72 1c 	lds	r18, 0x1C72	; 0x801c72 <__iob+0x2>
    f10a:	30 91 73 1c 	lds	r19, 0x1C73	; 0x801c73 <__iob+0x3>
    f10e:	62 17       	cp	r22, r18
    f110:	73 07       	cpc	r23, r19
    f112:	49 f0       	breq	.+18     	; 0xf126 <fputc+0x2e>
    f114:	20 91 74 1c 	lds	r18, 0x1C74	; 0x801c74 <__iob+0x4>
    f118:	30 91 75 1c 	lds	r19, 0x1C75	; 0x801c75 <__iob+0x5>
    f11c:	62 17       	cp	r22, r18
    f11e:	73 07       	cpc	r23, r19
    f120:	11 f0       	breq	.+4      	; 0xf126 <fputc+0x2e>
    f122:	4e df       	rcall	.-356    	; 0xefc0 <fatfs_putc>
    f124:	33 c0       	rjmp	.+102    	; 0xf18c <fputc+0x94>
    f126:	2b 81       	ldd	r18, Y+3	; 0x03
    f128:	21 ff       	sbrs	r18, 1
    f12a:	2e c0       	rjmp	.+92     	; 0xf188 <fputc+0x90>
    f12c:	22 ff       	sbrs	r18, 2
    f12e:	10 c0       	rjmp	.+32     	; 0xf150 <fputc+0x58>
    f130:	4e 81       	ldd	r20, Y+6	; 0x06
    f132:	5f 81       	ldd	r21, Y+7	; 0x07
    f134:	2c 81       	ldd	r18, Y+4	; 0x04
    f136:	3d 81       	ldd	r19, Y+5	; 0x05
    f138:	42 17       	cp	r20, r18
    f13a:	53 07       	cpc	r21, r19
    f13c:	f4 f4       	brge	.+60     	; 0xf17a <fputc+0x82>
    f13e:	e8 81       	ld	r30, Y
    f140:	f9 81       	ldd	r31, Y+1	; 0x01
    f142:	9f 01       	movw	r18, r30
    f144:	2f 5f       	subi	r18, 0xFF	; 255
    f146:	3f 4f       	sbci	r19, 0xFF	; 255
    f148:	39 83       	std	Y+1, r19	; 0x01
    f14a:	28 83       	st	Y, r18
    f14c:	80 83       	st	Z, r24
    f14e:	15 c0       	rjmp	.+42     	; 0xf17a <fputc+0x82>
    f150:	e8 85       	ldd	r30, Y+8	; 0x08
    f152:	f9 85       	ldd	r31, Y+9	; 0x09
    f154:	30 97       	sbiw	r30, 0x00	; 0
    f156:	59 f4       	brne	.+22     	; 0xf16e <fputc+0x76>
    f158:	80 e6       	ldi	r24, 0x60	; 96
    f15a:	9c e0       	ldi	r25, 0x0C	; 12
    f15c:	1f 92       	push	r1
    f15e:	9f 93       	push	r25
    f160:	8f 93       	push	r24
    f162:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    f166:	0f 90       	pop	r0
    f168:	0f 90       	pop	r0
    f16a:	0f 90       	pop	r0
    f16c:	0d c0       	rjmp	.+26     	; 0xf188 <fputc+0x90>
    f16e:	be 01       	movw	r22, r28
    f170:	09 95       	icall
    f172:	8f 3f       	cpi	r24, 0xFF	; 255
    f174:	2f ef       	ldi	r18, 0xFF	; 255
    f176:	92 07       	cpc	r25, r18
    f178:	39 f0       	breq	.+14     	; 0xf188 <fputc+0x90>
    f17a:	2e 81       	ldd	r18, Y+6	; 0x06
    f17c:	3f 81       	ldd	r19, Y+7	; 0x07
    f17e:	2f 5f       	subi	r18, 0xFF	; 255
    f180:	3f 4f       	sbci	r19, 0xFF	; 255
    f182:	3f 83       	std	Y+7, r19	; 0x07
    f184:	2e 83       	std	Y+6, r18	; 0x06
    f186:	02 c0       	rjmp	.+4      	; 0xf18c <fputc+0x94>
    f188:	8f ef       	ldi	r24, 0xFF	; 255
    f18a:	9f ef       	ldi	r25, 0xFF	; 255
    f18c:	df 91       	pop	r29
    f18e:	cf 91       	pop	r28
    f190:	08 95       	ret

0000f192 <_fprintf_putc>:
    f192:	fc 01       	movw	r30, r24
    f194:	86 2f       	mov	r24, r22
    f196:	26 81       	ldd	r18, Z+6	; 0x06
    f198:	37 81       	ldd	r19, Z+7	; 0x07
    f19a:	2f 5f       	subi	r18, 0xFF	; 255
    f19c:	3f 4f       	sbci	r19, 0xFF	; 255
    f19e:	37 83       	std	Z+7, r19	; 0x07
    f1a0:	26 83       	std	Z+6, r18	; 0x06
    f1a2:	62 81       	ldd	r22, Z+2	; 0x02
    f1a4:	73 81       	ldd	r23, Z+3	; 0x03
    f1a6:	90 e0       	ldi	r25, 0x00	; 0
    f1a8:	a7 cf       	rjmp	.-178    	; 0xf0f8 <fputc>
    f1aa:	08 95       	ret

0000f1ac <getchar>:
    f1ac:	80 91 70 1c 	lds	r24, 0x1C70	; 0x801c70 <__iob>
    f1b0:	90 91 71 1c 	lds	r25, 0x1C71	; 0x801c71 <__iob+0x1>
    f1b4:	50 cf       	rjmp	.-352    	; 0xf056 <fgetc>
    f1b6:	08 95       	ret

0000f1b8 <putchar>:
    f1b8:	60 91 72 1c 	lds	r22, 0x1C72	; 0x801c72 <__iob+0x2>
    f1bc:	70 91 73 1c 	lds	r23, 0x1C73	; 0x801c73 <__iob+0x3>
    f1c0:	9b cf       	rjmp	.-202    	; 0xf0f8 <fputc>
    f1c2:	08 95       	ret

0000f1c4 <fgets>:
    f1c4:	a0 e0       	ldi	r26, 0x00	; 0
    f1c6:	b0 e0       	ldi	r27, 0x00	; 0
    f1c8:	e8 ee       	ldi	r30, 0xE8	; 232
    f1ca:	f8 e7       	ldi	r31, 0x78	; 120
    f1cc:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__prologue_saves__+0x14>
    f1d0:	7c 01       	movw	r14, r24
    f1d2:	6a 01       	movw	r12, r20
    f1d4:	8b 01       	movw	r16, r22
    f1d6:	c0 e0       	ldi	r28, 0x00	; 0
    f1d8:	d0 e0       	ldi	r29, 0x00	; 0
    f1da:	01 15       	cp	r16, r1
    f1dc:	11 05       	cpc	r17, r1
    f1de:	41 f0       	breq	.+16     	; 0xf1f0 <fgets+0x2c>
    f1e0:	c6 01       	movw	r24, r12
    f1e2:	39 df       	rcall	.-398    	; 0xf056 <fgetc>
    f1e4:	8f 3f       	cpi	r24, 0xFF	; 255
    f1e6:	2f ef       	ldi	r18, 0xFF	; 255
    f1e8:	92 07       	cpc	r25, r18
    f1ea:	39 f4       	brne	.+14     	; 0xf1fa <fgets+0x36>
    f1ec:	20 97       	sbiw	r28, 0x00	; 0
    f1ee:	b9 f0       	breq	.+46     	; 0xf21e <fgets+0x5a>
    f1f0:	ce 0d       	add	r28, r14
    f1f2:	df 1d       	adc	r29, r15
    f1f4:	18 82       	st	Y, r1
    f1f6:	c7 01       	movw	r24, r14
    f1f8:	14 c0       	rjmp	.+40     	; 0xf222 <fgets+0x5e>
    f1fa:	8a 30       	cpi	r24, 0x0A	; 10
    f1fc:	91 05       	cpc	r25, r1
    f1fe:	c1 f3       	breq	.-16     	; 0xf1f0 <fgets+0x2c>
    f200:	88 30       	cpi	r24, 0x08	; 8
    f202:	91 05       	cpc	r25, r1
    f204:	21 f4       	brne	.+8      	; 0xf20e <fgets+0x4a>
    f206:	20 97       	sbiw	r28, 0x00	; 0
    f208:	39 f0       	breq	.+14     	; 0xf218 <fgets+0x54>
    f20a:	21 97       	sbiw	r28, 0x01	; 1
    f20c:	05 c0       	rjmp	.+10     	; 0xf218 <fgets+0x54>
    f20e:	f7 01       	movw	r30, r14
    f210:	ec 0f       	add	r30, r28
    f212:	fd 1f       	adc	r31, r29
    f214:	80 83       	st	Z, r24
    f216:	21 96       	adiw	r28, 0x01	; 1
    f218:	01 50       	subi	r16, 0x01	; 1
    f21a:	11 09       	sbc	r17, r1
    f21c:	de cf       	rjmp	.-68     	; 0xf1da <fgets+0x16>
    f21e:	80 e0       	ldi	r24, 0x00	; 0
    f220:	90 e0       	ldi	r25, 0x00	; 0
    f222:	cd b7       	in	r28, 0x3d	; 61
    f224:	de b7       	in	r29, 0x3e	; 62
    f226:	e8 e0       	ldi	r30, 0x08	; 8
    f228:	0c 94 e7 e8 	jmp	0x1d1ce	; 0x1d1ce <__epilogue_restores__+0x14>

0000f22c <fputs>:
    f22c:	0f 93       	push	r16
    f22e:	1f 93       	push	r17
    f230:	cf 93       	push	r28
    f232:	df 93       	push	r29
    f234:	8b 01       	movw	r16, r22
    f236:	ec 01       	movw	r28, r24
    f238:	89 91       	ld	r24, Y+
    f23a:	88 23       	and	r24, r24
    f23c:	41 f0       	breq	.+16     	; 0xf24e <fputs+0x22>
    f23e:	b8 01       	movw	r22, r16
    f240:	90 e0       	ldi	r25, 0x00	; 0
    f242:	5a df       	rcall	.-332    	; 0xf0f8 <fputc>
    f244:	8f 3f       	cpi	r24, 0xFF	; 255
    f246:	2f ef       	ldi	r18, 0xFF	; 255
    f248:	92 07       	cpc	r25, r18
    f24a:	b1 f7       	brne	.-20     	; 0xf238 <fputs+0xc>
    f24c:	02 c0       	rjmp	.+4      	; 0xf252 <fputs+0x26>
    f24e:	80 e0       	ldi	r24, 0x00	; 0
    f250:	90 e0       	ldi	r25, 0x00	; 0
    f252:	df 91       	pop	r29
    f254:	cf 91       	pop	r28
    f256:	1f 91       	pop	r17
    f258:	0f 91       	pop	r16
    f25a:	08 95       	ret

0000f25c <puts>:
    f25c:	cf 93       	push	r28
    f25e:	df 93       	push	r29
    f260:	ec 01       	movw	r28, r24
    f262:	89 91       	ld	r24, Y+
    f264:	60 91 72 1c 	lds	r22, 0x1C72	; 0x801c72 <__iob+0x2>
    f268:	70 91 73 1c 	lds	r23, 0x1C73	; 0x801c73 <__iob+0x3>
    f26c:	88 23       	and	r24, r24
    f26e:	39 f0       	breq	.+14     	; 0xf27e <puts+0x22>
    f270:	90 e0       	ldi	r25, 0x00	; 0
    f272:	42 df       	rcall	.-380    	; 0xf0f8 <fputc>
    f274:	8f 3f       	cpi	r24, 0xFF	; 255
    f276:	2f ef       	ldi	r18, 0xFF	; 255
    f278:	92 07       	cpc	r25, r18
    f27a:	99 f7       	brne	.-26     	; 0xf262 <puts+0x6>
    f27c:	03 c0       	rjmp	.+6      	; 0xf284 <puts+0x28>
    f27e:	8a e0       	ldi	r24, 0x0A	; 10
    f280:	90 e0       	ldi	r25, 0x00	; 0
    f282:	3a df       	rcall	.-396    	; 0xf0f8 <fputc>
    f284:	df 91       	pop	r29
    f286:	cf 91       	pop	r28
    f288:	08 95       	ret

0000f28a <fileno>:
    f28a:	00 97       	sbiw	r24, 0x00	; 0
    f28c:	39 f4       	brne	.+14     	; 0xf29c <fileno+0x12>
    f28e:	89 e0       	ldi	r24, 0x09	; 9
    f290:	90 e0       	ldi	r25, 0x00	; 0
    f292:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
    f296:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
    f29a:	0e c0       	rjmp	.+28     	; 0xf2b8 <fileno+0x2e>
    f29c:	e0 e7       	ldi	r30, 0x70	; 112
    f29e:	fc e1       	ldi	r31, 0x1C	; 28
    f2a0:	20 e0       	ldi	r18, 0x00	; 0
    f2a2:	30 e0       	ldi	r19, 0x00	; 0
    f2a4:	41 91       	ld	r20, Z+
    f2a6:	51 91       	ld	r21, Z+
    f2a8:	84 17       	cp	r24, r20
    f2aa:	95 07       	cpc	r25, r21
    f2ac:	41 f0       	breq	.+16     	; 0xf2be <fileno+0x34>
    f2ae:	2f 5f       	subi	r18, 0xFF	; 255
    f2b0:	3f 4f       	sbci	r19, 0xFF	; 255
    f2b2:	20 31       	cpi	r18, 0x10	; 16
    f2b4:	31 05       	cpc	r19, r1
    f2b6:	b1 f7       	brne	.-20     	; 0xf2a4 <fileno+0x1a>
    f2b8:	8f ef       	ldi	r24, 0xFF	; 255
    f2ba:	9f ef       	ldi	r25, 0xFF	; 255
    f2bc:	08 95       	ret
    f2be:	c9 01       	movw	r24, r18
    f2c0:	08 95       	ret

0000f2c2 <fileno_to_stream>:
    f2c2:	80 31       	cpi	r24, 0x10	; 16
    f2c4:	91 05       	cpc	r25, r1
    f2c6:	48 f4       	brcc	.+18     	; 0xf2da <fileno_to_stream+0x18>
    f2c8:	88 0f       	add	r24, r24
    f2ca:	99 1f       	adc	r25, r25
    f2cc:	fc 01       	movw	r30, r24
    f2ce:	e0 59       	subi	r30, 0x90	; 144
    f2d0:	f3 4e       	sbci	r31, 0xE3	; 227
    f2d2:	80 81       	ld	r24, Z
    f2d4:	91 81       	ldd	r25, Z+1	; 0x01
    f2d6:	00 97       	sbiw	r24, 0x00	; 0
    f2d8:	41 f4       	brne	.+16     	; 0xf2ea <fileno_to_stream+0x28>
    f2da:	89 e0       	ldi	r24, 0x09	; 9
    f2dc:	90 e0       	ldi	r25, 0x00	; 0
    f2de:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
    f2e2:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
    f2e6:	80 e0       	ldi	r24, 0x00	; 0
    f2e8:	90 e0       	ldi	r25, 0x00	; 0
    f2ea:	08 95       	ret

0000f2ec <mctime>:
    f2ec:	a4 e0       	ldi	r26, 0x04	; 4
    f2ee:	b0 e0       	ldi	r27, 0x00	; 0
    f2f0:	ec e7       	ldi	r30, 0x7C	; 124
    f2f2:	f9 e7       	ldi	r31, 0x79	; 121
    f2f4:	0c 94 d1 e8 	jmp	0x1d1a2	; 0x1d1a2 <__prologue_saves__+0x20>
    f2f8:	69 83       	std	Y+1, r22	; 0x01
    f2fa:	7a 83       	std	Y+2, r23	; 0x02
    f2fc:	8b 83       	std	Y+3, r24	; 0x03
    f2fe:	9c 83       	std	Y+4, r25	; 0x04
    f300:	10 92 6f 1c 	sts	0x1C6F, r1	; 0x801c6f <errno+0x1>
    f304:	10 92 6e 1c 	sts	0x1C6E, r1	; 0x801c6e <errno>
    f308:	ce 01       	movw	r24, r28
    f30a:	01 96       	adiw	r24, 0x01	; 1
    f30c:	0e 94 8f 3b 	call	0x771e	; 0x771e <ctime_gm>
    f310:	fc 01       	movw	r30, r24
    f312:	01 90       	ld	r0, Z+
    f314:	00 20       	and	r0, r0
    f316:	e9 f7       	brne	.-6      	; 0xf312 <mctime+0x26>
    f318:	31 97       	sbiw	r30, 0x01	; 1
    f31a:	e8 1b       	sub	r30, r24
    f31c:	f9 0b       	sbc	r31, r25
    f31e:	39 f0       	breq	.+14     	; 0xf32e <mctime+0x42>
    f320:	31 97       	sbiw	r30, 0x01	; 1
    f322:	e8 0f       	add	r30, r24
    f324:	f9 1f       	adc	r31, r25
    f326:	20 81       	ld	r18, Z
    f328:	2a 30       	cpi	r18, 0x0A	; 10
    f32a:	09 f4       	brne	.+2      	; 0xf32e <mctime+0x42>
    f32c:	10 82       	st	Z, r1
    f32e:	24 96       	adiw	r28, 0x04	; 4
    f330:	e2 e0       	ldi	r30, 0x02	; 2
    f332:	0c 94 ed e8 	jmp	0x1d1da	; 0x1d1da <__epilogue_restores__+0x20>

0000f336 <dump_stat>:
    f336:	cf 92       	push	r12
    f338:	df 92       	push	r13
    f33a:	ef 92       	push	r14
    f33c:	ff 92       	push	r15
    f33e:	cf 93       	push	r28
    f340:	df 93       	push	r29
    f342:	ec 01       	movw	r28, r24
    f344:	c8 84       	ldd	r12, Y+8	; 0x08
    f346:	d9 84       	ldd	r13, Y+9	; 0x09
    f348:	ea 84       	ldd	r14, Y+10	; 0x0a
    f34a:	fb 84       	ldd	r15, Y+11	; 0x0b
    f34c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    f34e:	8f 93       	push	r24
    f350:	8a 8d       	ldd	r24, Y+26	; 0x1a
    f352:	8f 93       	push	r24
    f354:	89 8d       	ldd	r24, Y+25	; 0x19
    f356:	8f 93       	push	r24
    f358:	88 8d       	ldd	r24, Y+24	; 0x18
    f35a:	8f 93       	push	r24
    f35c:	87 e4       	ldi	r24, 0x47	; 71
    f35e:	9c e0       	ldi	r25, 0x0C	; 12
    f360:	1f 92       	push	r1
    f362:	9f 93       	push	r25
    f364:	8f 93       	push	r24
    f366:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    f36a:	8e e3       	ldi	r24, 0x3E	; 62
    f36c:	9c e0       	ldi	r25, 0x0C	; 12
    f36e:	1f 92       	push	r1
    f370:	9f 93       	push	r25
    f372:	8f 93       	push	r24
    f374:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    f378:	d7 01       	movw	r26, r14
    f37a:	c6 01       	movw	r24, r12
    f37c:	88 27       	eor	r24, r24
    f37e:	90 7f       	andi	r25, 0xF0	; 240
    f380:	aa 27       	eor	r26, r26
    f382:	bb 27       	eor	r27, r27
    f384:	2d b7       	in	r18, 0x3d	; 61
    f386:	3e b7       	in	r19, 0x3e	; 62
    f388:	26 5f       	subi	r18, 0xF6	; 246
    f38a:	3f 4f       	sbci	r19, 0xFF	; 255
    f38c:	0f b6       	in	r0, 0x3f	; 63
    f38e:	f8 94       	cli
    f390:	3e bf       	out	0x3e, r19	; 62
    f392:	0f be       	out	0x3f, r0	; 63
    f394:	2d bf       	out	0x3d, r18	; 61
    f396:	81 15       	cp	r24, r1
    f398:	30 e4       	ldi	r19, 0x40	; 64
    f39a:	93 07       	cpc	r25, r19
    f39c:	a1 05       	cpc	r26, r1
    f39e:	b1 05       	cpc	r27, r1
    f3a0:	19 f4       	brne	.+6      	; 0xf3a8 <dump_stat+0x72>
    f3a2:	89 e3       	ldi	r24, 0x39	; 57
    f3a4:	9c e0       	ldi	r25, 0x0C	; 12
    f3a6:	0a c0       	rjmp	.+20     	; 0xf3bc <dump_stat+0x86>
    f3a8:	81 15       	cp	r24, r1
    f3aa:	90 48       	sbci	r25, 0x80	; 128
    f3ac:	a1 05       	cpc	r26, r1
    f3ae:	b1 05       	cpc	r27, r1
    f3b0:	19 f4       	brne	.+6      	; 0xf3b8 <dump_stat+0x82>
    f3b2:	83 e3       	ldi	r24, 0x33	; 51
    f3b4:	9c e0       	ldi	r25, 0x0C	; 12
    f3b6:	02 c0       	rjmp	.+4      	; 0xf3bc <dump_stat+0x86>
    f3b8:	8a e2       	ldi	r24, 0x2A	; 42
    f3ba:	9c e0       	ldi	r25, 0x0C	; 12
    f3bc:	1f 92       	push	r1
    f3be:	9f 93       	push	r25
    f3c0:	8f 93       	push	r24
    f3c2:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    f3c6:	0f 90       	pop	r0
    f3c8:	0f 90       	pop	r0
    f3ca:	0f 90       	pop	r0
    f3cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    f3ce:	8f 93       	push	r24
    f3d0:	8a 85       	ldd	r24, Y+10	; 0x0a
    f3d2:	8f 93       	push	r24
    f3d4:	89 85       	ldd	r24, Y+9	; 0x09
    f3d6:	8f 93       	push	r24
    f3d8:	88 85       	ldd	r24, Y+8	; 0x08
    f3da:	8f 93       	push	r24
    f3dc:	8d e1       	ldi	r24, 0x1D	; 29
    f3de:	9c e0       	ldi	r25, 0x0C	; 12
    f3e0:	1f 92       	push	r1
    f3e2:	9f 93       	push	r25
    f3e4:	8f 93       	push	r24
    f3e6:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    f3ea:	88 89       	ldd	r24, Y+16	; 0x10
    f3ec:	99 89       	ldd	r25, Y+17	; 0x11
    f3ee:	1f 92       	push	r1
    f3f0:	1f 92       	push	r1
    f3f2:	9f 93       	push	r25
    f3f4:	8f 93       	push	r24
    f3f6:	80 e1       	ldi	r24, 0x10	; 16
    f3f8:	9c e0       	ldi	r25, 0x0C	; 12
    f3fa:	1f 92       	push	r1
    f3fc:	9f 93       	push	r25
    f3fe:	8f 93       	push	r24
    f400:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    f404:	8a 89       	ldd	r24, Y+18	; 0x12
    f406:	9b 89       	ldd	r25, Y+19	; 0x13
    f408:	1f 92       	push	r1
    f40a:	1f 92       	push	r1
    f40c:	9f 93       	push	r25
    f40e:	8f 93       	push	r24
    f410:	83 e0       	ldi	r24, 0x03	; 3
    f412:	9c e0       	ldi	r25, 0x0C	; 12
    f414:	1f 92       	push	r1
    f416:	9f 93       	push	r25
    f418:	8f 93       	push	r24
    f41a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    f41e:	6c a1       	ldd	r22, Y+36	; 0x24
    f420:	7d a1       	ldd	r23, Y+37	; 0x25
    f422:	8e a1       	ldd	r24, Y+38	; 0x26
    f424:	9f a1       	ldd	r25, Y+39	; 0x27
    f426:	62 df       	rcall	.-316    	; 0xf2ec <mctime>
    f428:	9f 93       	push	r25
    f42a:	8f 93       	push	r24
    f42c:	87 ef       	ldi	r24, 0xF7	; 247
    f42e:	9b e0       	ldi	r25, 0x0B	; 11
    f430:	1f 92       	push	r1
    f432:	9f 93       	push	r25
    f434:	8f 93       	push	r24
    f436:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    f43a:	68 a5       	ldd	r22, Y+40	; 0x28
    f43c:	79 a5       	ldd	r23, Y+41	; 0x29
    f43e:	8a a5       	ldd	r24, Y+42	; 0x2a
    f440:	9b a5       	ldd	r25, Y+43	; 0x2b
    f442:	54 df       	rcall	.-344    	; 0xf2ec <mctime>
    f444:	9f 93       	push	r25
    f446:	8f 93       	push	r24
    f448:	8b ee       	ldi	r24, 0xEB	; 235
    f44a:	9b e0       	ldi	r25, 0x0B	; 11
    f44c:	1f 92       	push	r1
    f44e:	9f 93       	push	r25
    f450:	8f 93       	push	r24
    f452:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    f456:	6c a5       	ldd	r22, Y+44	; 0x2c
    f458:	7d a5       	ldd	r23, Y+45	; 0x2d
    f45a:	8e a5       	ldd	r24, Y+46	; 0x2e
    f45c:	9f a5       	ldd	r25, Y+47	; 0x2f
    f45e:	46 df       	rcall	.-372    	; 0xf2ec <mctime>
    f460:	9f 93       	push	r25
    f462:	8f 93       	push	r24
    f464:	8f ed       	ldi	r24, 0xDF	; 223
    f466:	9b e0       	ldi	r25, 0x0B	; 11
    f468:	1f 92       	push	r1
    f46a:	9f 93       	push	r25
    f46c:	8f 93       	push	r24
    f46e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    f472:	8d b7       	in	r24, 0x3d	; 61
    f474:	9e b7       	in	r25, 0x3e	; 62
    f476:	84 96       	adiw	r24, 0x24	; 36
    f478:	0f b6       	in	r0, 0x3f	; 63
    f47a:	f8 94       	cli
    f47c:	9e bf       	out	0x3e, r25	; 62
    f47e:	0f be       	out	0x3f, r0	; 63
    f480:	8d bf       	out	0x3d, r24	; 61
    f482:	df 91       	pop	r29
    f484:	cf 91       	pop	r28
    f486:	ff 90       	pop	r15
    f488:	ef 90       	pop	r14
    f48a:	df 90       	pop	r13
    f48c:	cf 90       	pop	r12
    f48e:	08 95       	ret

0000f490 <basename>:
    f490:	00 97       	sbiw	r24, 0x00	; 0
    f492:	49 f0       	breq	.+18     	; 0xf4a6 <basename+0x16>
    f494:	fc 01       	movw	r30, r24
    f496:	21 91       	ld	r18, Z+
    f498:	22 23       	and	r18, r18
    f49a:	21 f0       	breq	.+8      	; 0xf4a4 <basename+0x14>
    f49c:	2f 32       	cpi	r18, 0x2F	; 47
    f49e:	d9 f7       	brne	.-10     	; 0xf496 <basename+0x6>
    f4a0:	cf 01       	movw	r24, r30
    f4a2:	f9 cf       	rjmp	.-14     	; 0xf496 <basename+0x6>
    f4a4:	08 95       	ret
    f4a6:	8d e9       	ldi	r24, 0x9D	; 157
    f4a8:	9b e0       	ldi	r25, 0x0B	; 11
    f4aa:	08 95       	ret

0000f4ac <chdir>:
    f4ac:	10 92 6f 1c 	sts	0x1C6F, r1	; 0x801c6f <errno+0x1>
    f4b0:	10 92 6e 1c 	sts	0x1C6E, r1	; 0x801c6e <errno>
    f4b4:	0e 94 21 5c 	call	0xb842	; 0xb842 <f_chdir>
    f4b8:	00 97       	sbiw	r24, 0x00	; 0
    f4ba:	a1 f0       	breq	.+40     	; 0xf4e4 <chdir+0x38>
    f4bc:	84 31       	cpi	r24, 0x14	; 20
    f4be:	91 05       	cpc	r25, r1
    f4c0:	40 f4       	brcc	.+16     	; 0xf4d2 <chdir+0x26>
    f4c2:	fc 01       	movw	r30, r24
    f4c4:	e1 51       	subi	r30, 0x11	; 17
    f4c6:	f9 4f       	sbci	r31, 0xF9	; 249
    f4c8:	80 81       	ld	r24, Z
    f4ca:	08 2e       	mov	r0, r24
    f4cc:	00 0c       	add	r0, r0
    f4ce:	99 0b       	sbc	r25, r25
    f4d0:	02 c0       	rjmp	.+4      	; 0xf4d6 <chdir+0x2a>
    f4d2:	83 e2       	ldi	r24, 0x23	; 35
    f4d4:	90 e0       	ldi	r25, 0x00	; 0
    f4d6:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
    f4da:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
    f4de:	8f ef       	ldi	r24, 0xFF	; 255
    f4e0:	9f ef       	ldi	r25, 0xFF	; 255
    f4e2:	08 95       	ret
    f4e4:	80 e0       	ldi	r24, 0x00	; 0
    f4e6:	90 e0       	ldi	r25, 0x00	; 0
    f4e8:	08 95       	ret

0000f4ea <chmod>:
    f4ea:	10 92 6f 1c 	sts	0x1C6F, r1	; 0x801c6f <errno+0x1>
    f4ee:	10 92 6e 1c 	sts	0x1C6E, r1	; 0x801c6e <errno>
    f4f2:	42 79       	andi	r20, 0x92	; 146
    f4f4:	55 27       	eor	r21, r21
    f4f6:	66 27       	eor	r22, r22
    f4f8:	77 27       	eor	r23, r23
    f4fa:	45 2b       	or	r20, r21
    f4fc:	46 2b       	or	r20, r22
    f4fe:	47 2b       	or	r20, r23
    f500:	19 f0       	breq	.+6      	; 0xf508 <chmod+0x1e>
    f502:	80 e0       	ldi	r24, 0x00	; 0
    f504:	90 e0       	ldi	r25, 0x00	; 0
    f506:	08 95       	ret
    f508:	41 e0       	ldi	r20, 0x01	; 1
    f50a:	61 e0       	ldi	r22, 0x01	; 1
    f50c:	0e 94 87 65 	call	0xcb0e	; 0xcb0e <f_chmod>
    f510:	00 97       	sbiw	r24, 0x00	; 0
    f512:	b9 f3       	breq	.-18     	; 0xf502 <chmod+0x18>
    f514:	84 31       	cpi	r24, 0x14	; 20
    f516:	91 05       	cpc	r25, r1
    f518:	40 f4       	brcc	.+16     	; 0xf52a <chmod+0x40>
    f51a:	fc 01       	movw	r30, r24
    f51c:	e1 51       	subi	r30, 0x11	; 17
    f51e:	f9 4f       	sbci	r31, 0xF9	; 249
    f520:	80 81       	ld	r24, Z
    f522:	08 2e       	mov	r0, r24
    f524:	00 0c       	add	r0, r0
    f526:	99 0b       	sbc	r25, r25
    f528:	02 c0       	rjmp	.+4      	; 0xf52e <chmod+0x44>
    f52a:	83 e2       	ldi	r24, 0x23	; 35
    f52c:	90 e0       	ldi	r25, 0x00	; 0
    f52e:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
    f532:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
    f536:	8f ef       	ldi	r24, 0xFF	; 255
    f538:	9f ef       	ldi	r25, 0xFF	; 255
    f53a:	08 95       	ret

0000f53c <getcwd>:
    f53c:	cf 93       	push	r28
    f53e:	df 93       	push	r29
    f540:	d8 2f       	mov	r29, r24
    f542:	c9 2f       	mov	r28, r25
    f544:	10 92 6f 1c 	sts	0x1C6F, r1	; 0x801c6f <errno+0x1>
    f548:	10 92 6e 1c 	sts	0x1C6E, r1	; 0x801c6e <errno>
    f54c:	0e 94 7c 5c 	call	0xb8f8	; 0xb8f8 <f_getcwd>
    f550:	00 97       	sbiw	r24, 0x00	; 0
    f552:	a1 f0       	breq	.+40     	; 0xf57c <getcwd+0x40>
    f554:	84 31       	cpi	r24, 0x14	; 20
    f556:	91 05       	cpc	r25, r1
    f558:	40 f4       	brcc	.+16     	; 0xf56a <getcwd+0x2e>
    f55a:	fc 01       	movw	r30, r24
    f55c:	e1 51       	subi	r30, 0x11	; 17
    f55e:	f9 4f       	sbci	r31, 0xF9	; 249
    f560:	80 81       	ld	r24, Z
    f562:	08 2e       	mov	r0, r24
    f564:	00 0c       	add	r0, r0
    f566:	99 0b       	sbc	r25, r25
    f568:	02 c0       	rjmp	.+4      	; 0xf56e <getcwd+0x32>
    f56a:	83 e2       	ldi	r24, 0x23	; 35
    f56c:	90 e0       	ldi	r25, 0x00	; 0
    f56e:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
    f572:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
    f576:	80 e0       	ldi	r24, 0x00	; 0
    f578:	90 e0       	ldi	r25, 0x00	; 0
    f57a:	02 c0       	rjmp	.+4      	; 0xf580 <getcwd+0x44>
    f57c:	8d 2f       	mov	r24, r29
    f57e:	9c 2f       	mov	r25, r28
    f580:	df 91       	pop	r29
    f582:	cf 91       	pop	r28
    f584:	08 95       	ret

0000f586 <mkdir>:
    f586:	cf 93       	push	r28
    f588:	df 93       	push	r29
    f58a:	ec 01       	movw	r28, r24
    f58c:	10 92 6f 1c 	sts	0x1C6F, r1	; 0x801c6f <errno+0x1>
    f590:	10 92 6e 1c 	sts	0x1C6E, r1	; 0x801c6e <errno>
    f594:	41 15       	cp	r20, r1
    f596:	51 05       	cpc	r21, r1
    f598:	61 05       	cpc	r22, r1
    f59a:	71 05       	cpc	r23, r1
    f59c:	41 f4       	brne	.+16     	; 0xf5ae <mkdir+0x28>
    f59e:	ce 01       	movw	r24, r28
    f5a0:	0e 94 31 63 	call	0xc662	; 0xc662 <f_mkdir>
    f5a4:	00 97       	sbiw	r24, 0x00	; 0
    f5a6:	39 f4       	brne	.+14     	; 0xf5b6 <mkdir+0x30>
    f5a8:	80 e0       	ldi	r24, 0x00	; 0
    f5aa:	90 e0       	ldi	r25, 0x00	; 0
    f5ac:	17 c0       	rjmp	.+46     	; 0xf5dc <mkdir+0x56>
    f5ae:	9d df       	rcall	.-198    	; 0xf4ea <chmod>
    f5b0:	89 2b       	or	r24, r25
    f5b2:	a9 f3       	breq	.-22     	; 0xf59e <mkdir+0x18>
    f5b4:	11 c0       	rjmp	.+34     	; 0xf5d8 <mkdir+0x52>
    f5b6:	84 31       	cpi	r24, 0x14	; 20
    f5b8:	91 05       	cpc	r25, r1
    f5ba:	40 f4       	brcc	.+16     	; 0xf5cc <mkdir+0x46>
    f5bc:	fc 01       	movw	r30, r24
    f5be:	e1 51       	subi	r30, 0x11	; 17
    f5c0:	f9 4f       	sbci	r31, 0xF9	; 249
    f5c2:	80 81       	ld	r24, Z
    f5c4:	08 2e       	mov	r0, r24
    f5c6:	00 0c       	add	r0, r0
    f5c8:	99 0b       	sbc	r25, r25
    f5ca:	02 c0       	rjmp	.+4      	; 0xf5d0 <mkdir+0x4a>
    f5cc:	83 e2       	ldi	r24, 0x23	; 35
    f5ce:	90 e0       	ldi	r25, 0x00	; 0
    f5d0:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
    f5d4:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
    f5d8:	8f ef       	ldi	r24, 0xFF	; 255
    f5da:	9f ef       	ldi	r25, 0xFF	; 255
    f5dc:	df 91       	pop	r29
    f5de:	cf 91       	pop	r28
    f5e0:	08 95       	ret

0000f5e2 <rename>:
    f5e2:	10 92 6f 1c 	sts	0x1C6F, r1	; 0x801c6f <errno+0x1>
    f5e6:	10 92 6e 1c 	sts	0x1C6E, r1	; 0x801c6e <errno>
    f5ea:	0e 94 78 64 	call	0xc8f0	; 0xc8f0 <f_rename>
    f5ee:	00 97       	sbiw	r24, 0x00	; 0
    f5f0:	a1 f0       	breq	.+40     	; 0xf61a <rename+0x38>
    f5f2:	84 31       	cpi	r24, 0x14	; 20
    f5f4:	91 05       	cpc	r25, r1
    f5f6:	40 f4       	brcc	.+16     	; 0xf608 <rename+0x26>
    f5f8:	fc 01       	movw	r30, r24
    f5fa:	e1 51       	subi	r30, 0x11	; 17
    f5fc:	f9 4f       	sbci	r31, 0xF9	; 249
    f5fe:	80 81       	ld	r24, Z
    f600:	08 2e       	mov	r0, r24
    f602:	00 0c       	add	r0, r0
    f604:	99 0b       	sbc	r25, r25
    f606:	02 c0       	rjmp	.+4      	; 0xf60c <rename+0x2a>
    f608:	83 e2       	ldi	r24, 0x23	; 35
    f60a:	90 e0       	ldi	r25, 0x00	; 0
    f60c:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
    f610:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
    f614:	8f ef       	ldi	r24, 0xFF	; 255
    f616:	9f ef       	ldi	r25, 0xFF	; 255
    f618:	08 95       	ret
    f61a:	80 e0       	ldi	r24, 0x00	; 0
    f61c:	90 e0       	ldi	r25, 0x00	; 0
    f61e:	08 95       	ret

0000f620 <unlink>:
    f620:	10 92 6f 1c 	sts	0x1C6F, r1	; 0x801c6f <errno+0x1>
    f624:	10 92 6e 1c 	sts	0x1C6E, r1	; 0x801c6e <errno>
    f628:	0e 94 88 62 	call	0xc510	; 0xc510 <f_unlink>
    f62c:	00 97       	sbiw	r24, 0x00	; 0
    f62e:	a1 f0       	breq	.+40     	; 0xf658 <unlink+0x38>
    f630:	84 31       	cpi	r24, 0x14	; 20
    f632:	91 05       	cpc	r25, r1
    f634:	40 f4       	brcc	.+16     	; 0xf646 <unlink+0x26>
    f636:	fc 01       	movw	r30, r24
    f638:	e1 51       	subi	r30, 0x11	; 17
    f63a:	f9 4f       	sbci	r31, 0xF9	; 249
    f63c:	80 81       	ld	r24, Z
    f63e:	08 2e       	mov	r0, r24
    f640:	00 0c       	add	r0, r0
    f642:	99 0b       	sbc	r25, r25
    f644:	02 c0       	rjmp	.+4      	; 0xf64a <unlink+0x2a>
    f646:	83 e2       	ldi	r24, 0x23	; 35
    f648:	90 e0       	ldi	r25, 0x00	; 0
    f64a:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
    f64e:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
    f652:	8f ef       	ldi	r24, 0xFF	; 255
    f654:	9f ef       	ldi	r25, 0xFF	; 255
    f656:	08 95       	ret
    f658:	80 e0       	ldi	r24, 0x00	; 0
    f65a:	90 e0       	ldi	r25, 0x00	; 0
    f65c:	08 95       	ret

0000f65e <rmdir>:
    f65e:	e0 cf       	rjmp	.-64     	; 0xf620 <unlink>
    f660:	08 95       	ret

0000f662 <closedir>:
    f662:	0e 94 00 61 	call	0xc200	; 0xc200 <f_closedir>
    f666:	00 97       	sbiw	r24, 0x00	; 0
    f668:	a1 f0       	breq	.+40     	; 0xf692 <closedir+0x30>
    f66a:	84 31       	cpi	r24, 0x14	; 20
    f66c:	91 05       	cpc	r25, r1
    f66e:	40 f4       	brcc	.+16     	; 0xf680 <closedir+0x1e>
    f670:	fc 01       	movw	r30, r24
    f672:	e1 51       	subi	r30, 0x11	; 17
    f674:	f9 4f       	sbci	r31, 0xF9	; 249
    f676:	80 81       	ld	r24, Z
    f678:	08 2e       	mov	r0, r24
    f67a:	00 0c       	add	r0, r0
    f67c:	99 0b       	sbc	r25, r25
    f67e:	02 c0       	rjmp	.+4      	; 0xf684 <closedir+0x22>
    f680:	83 e2       	ldi	r24, 0x23	; 35
    f682:	90 e0       	ldi	r25, 0x00	; 0
    f684:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
    f688:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
    f68c:	8f ef       	ldi	r24, 0xFF	; 255
    f68e:	9f ef       	ldi	r25, 0xFF	; 255
    f690:	08 95       	ret
    f692:	80 e0       	ldi	r24, 0x00	; 0
    f694:	90 e0       	ldi	r25, 0x00	; 0
    f696:	08 95       	ret

0000f698 <opendir>:
    f698:	bc 01       	movw	r22, r24
    f69a:	86 ee       	ldi	r24, 0xE6	; 230
    f69c:	98 e1       	ldi	r25, 0x18	; 24
    f69e:	0e 94 8d 60 	call	0xc11a	; 0xc11a <f_opendir>
    f6a2:	00 97       	sbiw	r24, 0x00	; 0
    f6a4:	a1 f0       	breq	.+40     	; 0xf6ce <opendir+0x36>
    f6a6:	84 31       	cpi	r24, 0x14	; 20
    f6a8:	91 05       	cpc	r25, r1
    f6aa:	40 f4       	brcc	.+16     	; 0xf6bc <opendir+0x24>
    f6ac:	fc 01       	movw	r30, r24
    f6ae:	e1 51       	subi	r30, 0x11	; 17
    f6b0:	f9 4f       	sbci	r31, 0xF9	; 249
    f6b2:	80 81       	ld	r24, Z
    f6b4:	08 2e       	mov	r0, r24
    f6b6:	00 0c       	add	r0, r0
    f6b8:	99 0b       	sbc	r25, r25
    f6ba:	02 c0       	rjmp	.+4      	; 0xf6c0 <opendir+0x28>
    f6bc:	83 e2       	ldi	r24, 0x23	; 35
    f6be:	90 e0       	ldi	r25, 0x00	; 0
    f6c0:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
    f6c4:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
    f6c8:	80 e0       	ldi	r24, 0x00	; 0
    f6ca:	90 e0       	ldi	r25, 0x00	; 0
    f6cc:	08 95       	ret
    f6ce:	86 ee       	ldi	r24, 0xE6	; 230
    f6d0:	98 e1       	ldi	r25, 0x18	; 24
    f6d2:	08 95       	ret

0000f6d4 <readdir>:
    f6d4:	a6 e1       	ldi	r26, 0x16	; 22
    f6d6:	b1 e0       	ldi	r27, 0x01	; 1
    f6d8:	e0 e7       	ldi	r30, 0x70	; 112
    f6da:	fb e7       	ldi	r31, 0x7B	; 123
    f6dc:	0c 94 cf e8 	jmp	0x1d19e	; 0x1d19e <__prologue_saves__+0x1c>
    f6e0:	10 92 e7 17 	sts	0x17E7, r1	; 0x8017e7 <_de>
    f6e4:	be 01       	movw	r22, r28
    f6e6:	6f 5f       	subi	r22, 0xFF	; 255
    f6e8:	7f 4f       	sbci	r23, 0xFF	; 255
    f6ea:	0e 94 15 61 	call	0xc22a	; 0xc22a <f_readdir>
    f6ee:	00 97       	sbiw	r24, 0x00	; 0
    f6f0:	a1 f0       	breq	.+40     	; 0xf71a <readdir+0x46>
    f6f2:	84 31       	cpi	r24, 0x14	; 20
    f6f4:	91 05       	cpc	r25, r1
    f6f6:	40 f4       	brcc	.+16     	; 0xf708 <readdir+0x34>
    f6f8:	fc 01       	movw	r30, r24
    f6fa:	e1 51       	subi	r30, 0x11	; 17
    f6fc:	f9 4f       	sbci	r31, 0xF9	; 249
    f6fe:	80 81       	ld	r24, Z
    f700:	08 2e       	mov	r0, r24
    f702:	00 0c       	add	r0, r0
    f704:	99 0b       	sbc	r25, r25
    f706:	02 c0       	rjmp	.+4      	; 0xf70c <readdir+0x38>
    f708:	83 e2       	ldi	r24, 0x23	; 35
    f70a:	90 e0       	ldi	r25, 0x00	; 0
    f70c:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
    f710:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
    f714:	80 e0       	ldi	r24, 0x00	; 0
    f716:	90 e0       	ldi	r25, 0x00	; 0
    f718:	16 c0       	rjmp	.+44     	; 0xf746 <readdir+0x72>
    f71a:	be 01       	movw	r22, r28
    f71c:	69 5e       	subi	r22, 0xE9	; 233
    f71e:	7f 4f       	sbci	r23, 0xFF	; 255
    f720:	fb 01       	movw	r30, r22
    f722:	01 90       	ld	r0, Z+
    f724:	00 20       	and	r0, r0
    f726:	e9 f7       	brne	.-6      	; 0xf722 <readdir+0x4e>
    f728:	31 97       	sbiw	r30, 0x01	; 1
    f72a:	8f 01       	movw	r16, r30
    f72c:	06 1b       	sub	r16, r22
    f72e:	17 0b       	sbc	r17, r23
    f730:	a8 01       	movw	r20, r16
    f732:	87 ee       	ldi	r24, 0xE7	; 231
    f734:	97 e1       	ldi	r25, 0x17	; 23
    f736:	0e 94 1a 30 	call	0x6034	; 0x6034 <strncpy>
    f73a:	f8 01       	movw	r30, r16
    f73c:	e9 51       	subi	r30, 0x19	; 25
    f73e:	f8 4e       	sbci	r31, 0xE8	; 232
    f740:	10 82       	st	Z, r1
    f742:	87 ee       	ldi	r24, 0xE7	; 231
    f744:	97 e1       	ldi	r25, 0x17	; 23
    f746:	ca 5e       	subi	r28, 0xEA	; 234
    f748:	de 4f       	sbci	r29, 0xFE	; 254
    f74a:	e4 e0       	ldi	r30, 0x04	; 4
    f74c:	0c 94 eb e8 	jmp	0x1d1d6	; 0x1d1d6 <__epilogue_restores__+0x1c>

0000f750 <perror>:
    f750:	e0 91 6e 1c 	lds	r30, 0x1C6E	; 0x801c6e <errno>
    f754:	f0 91 6f 1c 	lds	r31, 0x1C6F	; 0x801c6f <errno+0x1>
    f758:	e3 32       	cpi	r30, 0x23	; 35
    f75a:	f1 05       	cpc	r31, r1
    f75c:	38 f4       	brcc	.+14     	; 0xf76c <perror+0x1c>
    f75e:	ee 0f       	add	r30, r30
    f760:	ff 1f       	adc	r31, r31
    f762:	e0 5d       	subi	r30, 0xD0	; 208
    f764:	fe 4f       	sbci	r31, 0xFE	; 254
    f766:	20 81       	ld	r18, Z
    f768:	31 81       	ldd	r19, Z+1	; 0x01
    f76a:	04 c0       	rjmp	.+8      	; 0xf774 <perror+0x24>
    f76c:	20 91 76 01 	lds	r18, 0x0176	; 0x800176 <sys_errlist+0x46>
    f770:	30 91 77 01 	lds	r19, 0x0177	; 0x800177 <sys_errlist+0x47>
    f774:	00 97       	sbiw	r24, 0x00	; 0
    f776:	c1 f0       	breq	.+48     	; 0xf7a8 <perror+0x58>
    f778:	fc 01       	movw	r30, r24
    f77a:	40 81       	ld	r20, Z
    f77c:	44 23       	and	r20, r20
    f77e:	a1 f0       	breq	.+40     	; 0xf7a8 <perror+0x58>
    f780:	3f 93       	push	r19
    f782:	2f 93       	push	r18
    f784:	9f 93       	push	r25
    f786:	8f 93       	push	r24
    f788:	87 ed       	ldi	r24, 0xD7	; 215
    f78a:	9b e0       	ldi	r25, 0x0B	; 11
    f78c:	1f 92       	push	r1
    f78e:	9f 93       	push	r25
    f790:	8f 93       	push	r24
    f792:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    f796:	8d b7       	in	r24, 0x3d	; 61
    f798:	9e b7       	in	r25, 0x3e	; 62
    f79a:	07 96       	adiw	r24, 0x07	; 7
    f79c:	0f b6       	in	r0, 0x3f	; 63
    f79e:	f8 94       	cli
    f7a0:	9e bf       	out	0x3e, r25	; 62
    f7a2:	0f be       	out	0x3f, r0	; 63
    f7a4:	8d bf       	out	0x3d, r24	; 61
    f7a6:	08 95       	ret
    f7a8:	3f 93       	push	r19
    f7aa:	2f 93       	push	r18
    f7ac:	83 ed       	ldi	r24, 0xD3	; 211
    f7ae:	9b e0       	ldi	r25, 0x0B	; 11
    f7b0:	1f 92       	push	r1
    f7b2:	9f 93       	push	r25
    f7b4:	8f 93       	push	r24
    f7b6:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    f7ba:	0f 90       	pop	r0
    f7bc:	0f 90       	pop	r0
    f7be:	0f 90       	pop	r0
    f7c0:	0f 90       	pop	r0
    f7c2:	0f 90       	pop	r0
    f7c4:	08 95       	ret

0000f7c6 <fdevopen>:
    f7c6:	0f 93       	push	r16
    f7c8:	1f 93       	push	r17
    f7ca:	cf 93       	push	r28
    f7cc:	df 93       	push	r29
    f7ce:	00 97       	sbiw	r24, 0x00	; 0
    f7d0:	31 f4       	brne	.+12     	; 0xf7de <fdevopen+0x18>
    f7d2:	61 15       	cp	r22, r1
    f7d4:	71 05       	cpc	r23, r1
    f7d6:	19 f4       	brne	.+6      	; 0xf7de <fdevopen+0x18>
    f7d8:	80 e0       	ldi	r24, 0x00	; 0
    f7da:	90 e0       	ldi	r25, 0x00	; 0
    f7dc:	3a c0       	rjmp	.+116    	; 0xf852 <fdevopen+0x8c>
    f7de:	8b 01       	movw	r16, r22
    f7e0:	ec 01       	movw	r28, r24
    f7e2:	6e e0       	ldi	r22, 0x0E	; 14
    f7e4:	70 e0       	ldi	r23, 0x00	; 0
    f7e6:	81 e0       	ldi	r24, 0x01	; 1
    f7e8:	90 e0       	ldi	r25, 0x00	; 0
    f7ea:	0e 94 7e 29 	call	0x52fc	; 0x52fc <safecalloc>
    f7ee:	fc 01       	movw	r30, r24
    f7f0:	89 2b       	or	r24, r25
    f7f2:	91 f3       	breq	.-28     	; 0xf7d8 <fdevopen+0x12>
    f7f4:	80 e8       	ldi	r24, 0x80	; 128
    f7f6:	83 83       	std	Z+3, r24	; 0x03
    f7f8:	01 15       	cp	r16, r1
    f7fa:	11 05       	cpc	r17, r1
    f7fc:	71 f0       	breq	.+28     	; 0xf81a <fdevopen+0x54>
    f7fe:	13 87       	std	Z+11, r17	; 0x0b
    f800:	02 87       	std	Z+10, r16	; 0x0a
    f802:	81 e8       	ldi	r24, 0x81	; 129
    f804:	83 83       	std	Z+3, r24	; 0x03
    f806:	80 91 70 1c 	lds	r24, 0x1C70	; 0x801c70 <__iob>
    f80a:	90 91 71 1c 	lds	r25, 0x1C71	; 0x801c71 <__iob+0x1>
    f80e:	89 2b       	or	r24, r25
    f810:	21 f4       	brne	.+8      	; 0xf81a <fdevopen+0x54>
    f812:	f0 93 71 1c 	sts	0x1C71, r31	; 0x801c71 <__iob+0x1>
    f816:	e0 93 70 1c 	sts	0x1C70, r30	; 0x801c70 <__iob>
    f81a:	20 97       	sbiw	r28, 0x00	; 0
    f81c:	c9 f0       	breq	.+50     	; 0xf850 <fdevopen+0x8a>
    f81e:	d1 87       	std	Z+9, r29	; 0x09
    f820:	c0 87       	std	Z+8, r28	; 0x08
    f822:	83 81       	ldd	r24, Z+3	; 0x03
    f824:	82 60       	ori	r24, 0x02	; 2
    f826:	83 83       	std	Z+3, r24	; 0x03
    f828:	80 91 72 1c 	lds	r24, 0x1C72	; 0x801c72 <__iob+0x2>
    f82c:	90 91 73 1c 	lds	r25, 0x1C73	; 0x801c73 <__iob+0x3>
    f830:	89 2b       	or	r24, r25
    f832:	21 f4       	brne	.+8      	; 0xf83c <fdevopen+0x76>
    f834:	f0 93 73 1c 	sts	0x1C73, r31	; 0x801c73 <__iob+0x3>
    f838:	e0 93 72 1c 	sts	0x1C72, r30	; 0x801c72 <__iob+0x2>
    f83c:	80 91 74 1c 	lds	r24, 0x1C74	; 0x801c74 <__iob+0x4>
    f840:	90 91 75 1c 	lds	r25, 0x1C75	; 0x801c75 <__iob+0x5>
    f844:	89 2b       	or	r24, r25
    f846:	21 f4       	brne	.+8      	; 0xf850 <fdevopen+0x8a>
    f848:	f0 93 75 1c 	sts	0x1C75, r31	; 0x801c75 <__iob+0x5>
    f84c:	e0 93 74 1c 	sts	0x1C74, r30	; 0x801c74 <__iob+0x4>
    f850:	cf 01       	movw	r24, r30
    f852:	df 91       	pop	r29
    f854:	cf 91       	pop	r28
    f856:	1f 91       	pop	r17
    f858:	0f 91       	pop	r16
    f85a:	08 95       	ret

0000f85c <mkfs>:
    f85c:	a9 e3       	ldi	r26, 0x39	; 57
    f85e:	b2 e0       	ldi	r27, 0x02	; 2
    f860:	e4 e3       	ldi	r30, 0x34	; 52
    f862:	fc e7       	ldi	r31, 0x7C	; 124
    f864:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__prologue_saves__+0x14>
    f868:	6c 01       	movw	r12, r24
    f86a:	63 e5       	ldi	r22, 0x53	; 83
    f86c:	78 e0       	ldi	r23, 0x08	; 8
    f86e:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <MATCH>
    f872:	00 97       	sbiw	r24, 0x00	; 0
    f874:	59 f4       	brne	.+22     	; 0xf88c <mkfs+0x30>
    f876:	84 eb       	ldi	r24, 0xB4	; 180
    f878:	9b e0       	ldi	r25, 0x0B	; 11
    f87a:	1f 92       	push	r1
    f87c:	9f 93       	push	r25
    f87e:	8f 93       	push	r24
    f880:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    f884:	0f 90       	pop	r0
    f886:	0f 90       	pop	r0
    f888:	0f 90       	pop	r0
    f88a:	55 c0       	rjmp	.+170    	; 0xf936 <mkfs+0xda>
    f88c:	2a e3       	ldi	r18, 0x3A	; 58
    f88e:	c9 5c       	subi	r28, 0xC9	; 201
    f890:	dd 4f       	sbci	r29, 0xFD	; 253
    f892:	28 83       	st	Y, r18
    f894:	c7 53       	subi	r28, 0x37	; 55
    f896:	d2 40       	sbci	r29, 0x02	; 2
    f898:	c8 5c       	subi	r28, 0xC8	; 200
    f89a:	dd 4f       	sbci	r29, 0xFD	; 253
    f89c:	18 82       	st	Y, r1
    f89e:	c8 53       	subi	r28, 0x38	; 56
    f8a0:	d2 40       	sbci	r29, 0x02	; 2
    f8a2:	8c 0d       	add	r24, r12
    f8a4:	9d 1d       	adc	r25, r13
    f8a6:	fc 01       	movw	r30, r24
    f8a8:	31 97       	sbiw	r30, 0x01	; 1
    f8aa:	80 81       	ld	r24, Z
    f8ac:	90 e0       	ldi	r25, 0x00	; 0
    f8ae:	0e 94 f5 2f 	call	0x5fea	; 0x5fea <tolower>
    f8b2:	9c 01       	movw	r18, r24
    f8b4:	21 56       	subi	r18, 0x61	; 97
    f8b6:	31 09       	sbc	r19, r1
    f8b8:	2a 30       	cpi	r18, 0x0A	; 10
    f8ba:	31 05       	cpc	r19, r1
    f8bc:	30 f4       	brcc	.+12     	; 0xf8ca <mkfs+0x6e>
    f8be:	81 56       	subi	r24, 0x61	; 97
    f8c0:	ca 5c       	subi	r28, 0xCA	; 202
    f8c2:	dd 4f       	sbci	r29, 0xFD	; 253
    f8c4:	88 83       	st	Y, r24
    f8c6:	c6 53       	subi	r28, 0x36	; 54
    f8c8:	d2 40       	sbci	r29, 0x02	; 2
    f8ca:	c7 5c       	subi	r28, 0xC7	; 199
    f8cc:	dd 4f       	sbci	r29, 0xFD	; 253
    f8ce:	18 82       	st	Y, r1
    f8d0:	c9 53       	subi	r28, 0x39	; 57
    f8d2:	d2 40       	sbci	r29, 0x02	; 2
    f8d4:	40 e0       	ldi	r20, 0x00	; 0
    f8d6:	be 01       	movw	r22, r28
    f8d8:	6a 5c       	subi	r22, 0xCA	; 202
    f8da:	7d 4f       	sbci	r23, 0xFD	; 253
    f8dc:	ce 01       	movw	r24, r28
    f8de:	01 96       	adiw	r24, 0x01	; 1
    f8e0:	0e 94 6c 56 	call	0xacd8	; 0xacd8 <f_mount>
    f8e4:	89 2b       	or	r24, r25
    f8e6:	29 f4       	brne	.+10     	; 0xf8f2 <mkfs+0x96>
    f8e8:	80 e0       	ldi	r24, 0x00	; 0
    f8ea:	90 e0       	ldi	r25, 0x00	; 0
    f8ec:	0e 94 36 73 	call	0xe66c	; 0xe66c <put_rc>
    f8f0:	22 c0       	rjmp	.+68     	; 0xf936 <mkfs+0xda>
    f8f2:	80 e0       	ldi	r24, 0x00	; 0
    f8f4:	94 e0       	ldi	r25, 0x04	; 4
    f8f6:	0e 94 a6 29 	call	0x534c	; 0x534c <safemalloc>
    f8fa:	6c 01       	movw	r12, r24
    f8fc:	89 2b       	or	r24, r25
    f8fe:	d9 f0       	breq	.+54     	; 0xf936 <mkfs+0xda>
    f900:	e1 2c       	mov	r14, r1
    f902:	84 e0       	ldi	r24, 0x04	; 4
    f904:	f8 2e       	mov	r15, r24
    f906:	86 01       	movw	r16, r12
    f908:	20 e0       	ldi	r18, 0x00	; 0
    f90a:	30 e0       	ldi	r19, 0x00	; 0
    f90c:	a9 01       	movw	r20, r18
    f90e:	62 e0       	ldi	r22, 0x02	; 2
    f910:	ce 01       	movw	r24, r28
    f912:	8a 5c       	subi	r24, 0xCA	; 202
    f914:	9d 4f       	sbci	r25, 0xFD	; 253
    f916:	0e 94 a7 66 	call	0xcd4e	; 0xcd4e <f_mkfs>
    f91a:	00 97       	sbiw	r24, 0x00	; 0
    f91c:	31 f0       	breq	.+12     	; 0xf92a <mkfs+0xce>
    f91e:	0e 94 36 73 	call	0xe66c	; 0xe66c <put_rc>
    f922:	c6 01       	movw	r24, r12
    f924:	0e 94 c7 29 	call	0x538e	; 0x538e <safefree>
    f928:	06 c0       	rjmp	.+12     	; 0xf936 <mkfs+0xda>
    f92a:	c6 01       	movw	r24, r12
    f92c:	0e 94 c7 29 	call	0x538e	; 0x538e <safefree>
    f930:	81 e0       	ldi	r24, 0x01	; 1
    f932:	90 e0       	ldi	r25, 0x00	; 0
    f934:	02 c0       	rjmp	.+4      	; 0xf93a <mkfs+0xde>
    f936:	80 e0       	ldi	r24, 0x00	; 0
    f938:	90 e0       	ldi	r25, 0x00	; 0
    f93a:	c7 5c       	subi	r28, 0xC7	; 199
    f93c:	dd 4f       	sbci	r29, 0xFD	; 253
    f93e:	e8 e0       	ldi	r30, 0x08	; 8
    f940:	0c 94 e7 e8 	jmp	0x1d1ce	; 0x1d1ce <__epilogue_restores__+0x14>

0000f944 <fat_time_to_unix>:
    f944:	a6 e1       	ldi	r26, 0x16	; 22
    f946:	b0 e0       	ldi	r27, 0x00	; 0
    f948:	e8 ea       	ldi	r30, 0xA8	; 168
    f94a:	fc e7       	ldi	r31, 0x7C	; 124
    f94c:	0c 94 d1 e8 	jmp	0x1d1a2	; 0x1d1a2 <__prologue_saves__+0x20>
    f950:	fe 01       	movw	r30, r28
    f952:	31 96       	adiw	r30, 0x01	; 1
    f954:	26 e1       	ldi	r18, 0x16	; 22
    f956:	df 01       	movw	r26, r30
    f958:	1d 92       	st	X+, r1
    f95a:	2a 95       	dec	r18
    f95c:	e9 f7       	brne	.-6      	; 0xf958 <fat_time_to_unix+0x14>
    f95e:	9b 01       	movw	r18, r22
    f960:	22 0f       	add	r18, r18
    f962:	33 1f       	adc	r19, r19
    f964:	2e 73       	andi	r18, 0x3E	; 62
    f966:	33 27       	eor	r19, r19
    f968:	3a 83       	std	Y+2, r19	; 0x02
    f96a:	29 83       	std	Y+1, r18	; 0x01
    f96c:	9b 01       	movw	r18, r22
    f96e:	55 e0       	ldi	r21, 0x05	; 5
    f970:	36 95       	lsr	r19
    f972:	27 95       	ror	r18
    f974:	5a 95       	dec	r21
    f976:	e1 f7       	brne	.-8      	; 0xf970 <fat_time_to_unix+0x2c>
    f978:	2f 73       	andi	r18, 0x3F	; 63
    f97a:	33 27       	eor	r19, r19
    f97c:	3c 83       	std	Y+4, r19	; 0x04
    f97e:	2b 83       	std	Y+3, r18	; 0x03
    f980:	27 2f       	mov	r18, r23
    f982:	26 95       	lsr	r18
    f984:	26 95       	lsr	r18
    f986:	26 95       	lsr	r18
    f988:	2d 83       	std	Y+5, r18	; 0x05
    f98a:	1e 82       	std	Y+6, r1	; 0x06
    f98c:	9c 01       	movw	r18, r24
    f98e:	2f 71       	andi	r18, 0x1F	; 31
    f990:	33 27       	eor	r19, r19
    f992:	38 87       	std	Y+8, r19	; 0x08
    f994:	2f 83       	std	Y+7, r18	; 0x07
    f996:	9c 01       	movw	r18, r24
    f998:	65 e0       	ldi	r22, 0x05	; 5
    f99a:	36 95       	lsr	r19
    f99c:	27 95       	ror	r18
    f99e:	6a 95       	dec	r22
    f9a0:	e1 f7       	brne	.-8      	; 0xf99a <fat_time_to_unix+0x56>
    f9a2:	2f 70       	andi	r18, 0x0F	; 15
    f9a4:	33 27       	eor	r19, r19
    f9a6:	21 50       	subi	r18, 0x01	; 1
    f9a8:	31 09       	sbc	r19, r1
    f9aa:	3a 87       	std	Y+10, r19	; 0x0a
    f9ac:	29 87       	std	Y+9, r18	; 0x09
    f9ae:	9c 01       	movw	r18, r24
    f9b0:	23 2f       	mov	r18, r19
    f9b2:	33 27       	eor	r19, r19
    f9b4:	26 95       	lsr	r18
    f9b6:	20 5b       	subi	r18, 0xB0	; 176
    f9b8:	3f 4f       	sbci	r19, 0xFF	; 255
    f9ba:	3c 87       	std	Y+12, r19	; 0x0c
    f9bc:	2b 87       	std	Y+11, r18	; 0x0b
    f9be:	cf 01       	movw	r24, r30
    f9c0:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <timegm>
    f9c4:	66 96       	adiw	r28, 0x16	; 22
    f9c6:	e2 e0       	ldi	r30, 0x02	; 2
    f9c8:	0c 94 ed e8 	jmp	0x1d1da	; 0x1d1da <__epilogue_restores__+0x20>

0000f9cc <stat>:
    f9cc:	a6 e1       	ldi	r26, 0x16	; 22
    f9ce:	b1 e0       	ldi	r27, 0x01	; 1
    f9d0:	ec ee       	ldi	r30, 0xEC	; 236
    f9d2:	fc e7       	ldi	r31, 0x7C	; 124
    f9d4:	0c 94 cd e8 	jmp	0x1d19a	; 0x1d19a <__prologue_saves__+0x18>
    f9d8:	7c 01       	movw	r14, r24
    f9da:	8b 01       	movw	r16, r22
    f9dc:	10 92 6f 1c 	sts	0x1C6F, r1	; 0x801c6f <errno+0x1>
    f9e0:	10 92 6e 1c 	sts	0x1C6E, r1	; 0x801c6e <errno>
    f9e4:	67 e0       	ldi	r22, 0x07	; 7
    f9e6:	78 e0       	ldi	r23, 0x08	; 8
    f9e8:	0e 94 81 30 	call	0x6102	; 0x6102 <strcmp>
    f9ec:	89 2b       	or	r24, r25
    f9ee:	39 f0       	breq	.+14     	; 0xf9fe <stat+0x32>
    f9f0:	66 e4       	ldi	r22, 0x46	; 70
    f9f2:	70 e1       	ldi	r23, 0x10	; 16
    f9f4:	c7 01       	movw	r24, r14
    f9f6:	0e 94 81 30 	call	0x6102	; 0x6102 <strcmp>
    f9fa:	89 2b       	or	r24, r25
    f9fc:	d1 f4       	brne	.+52     	; 0xfa32 <stat+0x66>
    f9fe:	f8 01       	movw	r30, r16
    fa00:	14 a2       	std	Z+36, r1	; 0x24
    fa02:	15 a2       	std	Z+37, r1	; 0x25
    fa04:	16 a2       	std	Z+38, r1	; 0x26
    fa06:	17 a2       	std	Z+39, r1	; 0x27
    fa08:	10 a6       	std	Z+40, r1	; 0x28
    fa0a:	11 a6       	std	Z+41, r1	; 0x29
    fa0c:	12 a6       	std	Z+42, r1	; 0x2a
    fa0e:	13 a6       	std	Z+43, r1	; 0x2b
    fa10:	14 a6       	std	Z+44, r1	; 0x2c
    fa12:	15 a6       	std	Z+45, r1	; 0x2d
    fa14:	16 a6       	std	Z+46, r1	; 0x2e
    fa16:	17 a6       	std	Z+47, r1	; 0x2f
    fa18:	11 8a       	std	Z+17, r1	; 0x11
    fa1a:	10 8a       	std	Z+16, r1	; 0x10
    fa1c:	13 8a       	std	Z+19, r1	; 0x13
    fa1e:	12 8a       	std	Z+18, r1	; 0x12
    fa20:	10 8e       	std	Z+24, r1	; 0x18
    fa22:	11 8e       	std	Z+25, r1	; 0x19
    fa24:	12 8e       	std	Z+26, r1	; 0x1a
    fa26:	13 8e       	std	Z+27, r1	; 0x1b
    fa28:	80 e0       	ldi	r24, 0x00	; 0
    fa2a:	90 e4       	ldi	r25, 0x40	; 64
    fa2c:	a0 e0       	ldi	r26, 0x00	; 0
    fa2e:	b0 e0       	ldi	r27, 0x00	; 0
    fa30:	4e c0       	rjmp	.+156    	; 0xface <stat+0x102>
    fa32:	be 01       	movw	r22, r28
    fa34:	6f 5f       	subi	r22, 0xFF	; 255
    fa36:	7f 4f       	sbci	r23, 0xFF	; 255
    fa38:	c7 01       	movw	r24, r14
    fa3a:	0e 94 5b 61 	call	0xc2b6	; 0xc2b6 <f_stat>
    fa3e:	00 97       	sbiw	r24, 0x00	; 0
    fa40:	a1 f0       	breq	.+40     	; 0xfa6a <stat+0x9e>
    fa42:	84 31       	cpi	r24, 0x14	; 20
    fa44:	91 05       	cpc	r25, r1
    fa46:	40 f4       	brcc	.+16     	; 0xfa58 <stat+0x8c>
    fa48:	fc 01       	movw	r30, r24
    fa4a:	e1 51       	subi	r30, 0x11	; 17
    fa4c:	f9 4f       	sbci	r31, 0xF9	; 249
    fa4e:	80 81       	ld	r24, Z
    fa50:	08 2e       	mov	r0, r24
    fa52:	00 0c       	add	r0, r0
    fa54:	99 0b       	sbc	r25, r25
    fa56:	02 c0       	rjmp	.+4      	; 0xfa5c <stat+0x90>
    fa58:	83 e2       	ldi	r24, 0x23	; 35
    fa5a:	90 e0       	ldi	r25, 0x00	; 0
    fa5c:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
    fa60:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
    fa64:	8f ef       	ldi	r24, 0xFF	; 255
    fa66:	9f ef       	ldi	r25, 0xFF	; 255
    fa68:	38 c0       	rjmp	.+112    	; 0xfada <stat+0x10e>
    fa6a:	89 81       	ldd	r24, Y+1	; 0x01
    fa6c:	9a 81       	ldd	r25, Y+2	; 0x02
    fa6e:	ab 81       	ldd	r26, Y+3	; 0x03
    fa70:	bc 81       	ldd	r27, Y+4	; 0x04
    fa72:	f8 01       	movw	r30, r16
    fa74:	80 8f       	std	Z+24, r24	; 0x18
    fa76:	91 8f       	std	Z+25, r25	; 0x19
    fa78:	a2 8f       	std	Z+26, r26	; 0x1a
    fa7a:	b3 8f       	std	Z+27, r27	; 0x1b
    fa7c:	6f 81       	ldd	r22, Y+7	; 0x07
    fa7e:	78 85       	ldd	r23, Y+8	; 0x08
    fa80:	8d 81       	ldd	r24, Y+5	; 0x05
    fa82:	9e 81       	ldd	r25, Y+6	; 0x06
    fa84:	5f df       	rcall	.-322    	; 0xf944 <fat_time_to_unix>
    fa86:	f8 01       	movw	r30, r16
    fa88:	64 a3       	std	Z+36, r22	; 0x24
    fa8a:	75 a3       	std	Z+37, r23	; 0x25
    fa8c:	86 a3       	std	Z+38, r24	; 0x26
    fa8e:	97 a3       	std	Z+39, r25	; 0x27
    fa90:	60 a7       	std	Z+40, r22	; 0x28
    fa92:	71 a7       	std	Z+41, r23	; 0x29
    fa94:	82 a7       	std	Z+42, r24	; 0x2a
    fa96:	93 a7       	std	Z+43, r25	; 0x2b
    fa98:	64 a7       	std	Z+44, r22	; 0x2c
    fa9a:	75 a7       	std	Z+45, r23	; 0x2d
    fa9c:	86 a7       	std	Z+46, r24	; 0x2e
    fa9e:	97 a7       	std	Z+47, r25	; 0x2f
    faa0:	29 85       	ldd	r18, Y+9	; 0x09
    faa2:	20 fd       	sbrc	r18, 0
    faa4:	03 c0       	rjmp	.+6      	; 0xfaac <stat+0xe0>
    faa6:	8f ef       	ldi	r24, 0xFF	; 255
    faa8:	91 e0       	ldi	r25, 0x01	; 1
    faaa:	02 c0       	rjmp	.+4      	; 0xfab0 <stat+0xe4>
    faac:	8d e6       	ldi	r24, 0x6D	; 109
    faae:	91 e0       	ldi	r25, 0x01	; 1
    fab0:	48 ee       	ldi	r20, 0xE8	; 232
    fab2:	53 e0       	ldi	r21, 0x03	; 3
    fab4:	f8 01       	movw	r30, r16
    fab6:	51 8b       	std	Z+17, r21	; 0x11
    fab8:	40 8b       	std	Z+16, r20	; 0x10
    faba:	53 8b       	std	Z+19, r21	; 0x13
    fabc:	42 8b       	std	Z+18, r20	; 0x12
    fabe:	24 ff       	sbrs	r18, 4
    fac0:	02 c0       	rjmp	.+4      	; 0xfac6 <stat+0xfa>
    fac2:	90 64       	ori	r25, 0x40	; 64
    fac4:	01 c0       	rjmp	.+2      	; 0xfac8 <stat+0xfc>
    fac6:	90 68       	ori	r25, 0x80	; 128
    fac8:	a0 e0       	ldi	r26, 0x00	; 0
    faca:	b0 e0       	ldi	r27, 0x00	; 0
    facc:	f8 01       	movw	r30, r16
    face:	80 87       	std	Z+8, r24	; 0x08
    fad0:	91 87       	std	Z+9, r25	; 0x09
    fad2:	a2 87       	std	Z+10, r26	; 0x0a
    fad4:	b3 87       	std	Z+11, r27	; 0x0b
    fad6:	80 e0       	ldi	r24, 0x00	; 0
    fad8:	90 e0       	ldi	r25, 0x00	; 0
    fada:	ca 5e       	subi	r28, 0xEA	; 234
    fadc:	de 4f       	sbci	r29, 0xFE	; 254
    fade:	e6 e0       	ldi	r30, 0x06	; 6
    fae0:	0c 94 e9 e8 	jmp	0x1d1d2	; 0x1d1d2 <__epilogue_restores__+0x18>

0000fae4 <unix_time_to_fat>:
    fae4:	a4 e0       	ldi	r26, 0x04	; 4
    fae6:	b0 e0       	ldi	r27, 0x00	; 0
    fae8:	e8 e7       	ldi	r30, 0x78	; 120
    faea:	fd e7       	ldi	r31, 0x7D	; 125
    faec:	0c 94 cd e8 	jmp	0x1d19a	; 0x1d19a <__prologue_saves__+0x18>
    faf0:	69 83       	std	Y+1, r22	; 0x01
    faf2:	7a 83       	std	Y+2, r23	; 0x02
    faf4:	8b 83       	std	Y+3, r24	; 0x03
    faf6:	9c 83       	std	Y+4, r25	; 0x04
    faf8:	7a 01       	movw	r14, r20
    fafa:	89 01       	movw	r16, r18
    fafc:	ce 01       	movw	r24, r28
    fafe:	01 96       	adiw	r24, 0x01	; 1
    fb00:	0e 94 23 36 	call	0x6c46	; 0x6c46 <gmtime>
    fb04:	fc 01       	movw	r30, r24
    fb06:	22 85       	ldd	r18, Z+10	; 0x0a
    fb08:	33 85       	ldd	r19, Z+11	; 0x0b
    fb0a:	20 55       	subi	r18, 0x50	; 80
    fb0c:	31 09       	sbc	r19, r1
    fb0e:	c9 01       	movw	r24, r18
    fb10:	98 2f       	mov	r25, r24
    fb12:	88 27       	eor	r24, r24
    fb14:	99 0f       	add	r25, r25
    fb16:	20 85       	ldd	r18, Z+8	; 0x08
    fb18:	31 85       	ldd	r19, Z+9	; 0x09
    fb1a:	2f 5f       	subi	r18, 0xFF	; 255
    fb1c:	3f 4f       	sbci	r19, 0xFF	; 255
    fb1e:	45 e0       	ldi	r20, 0x05	; 5
    fb20:	22 0f       	add	r18, r18
    fb22:	33 1f       	adc	r19, r19
    fb24:	4a 95       	dec	r20
    fb26:	e1 f7       	brne	.-8      	; 0xfb20 <unix_time_to_fat+0x3c>
    fb28:	28 2b       	or	r18, r24
    fb2a:	39 2b       	or	r19, r25
    fb2c:	86 81       	ldd	r24, Z+6	; 0x06
    fb2e:	97 81       	ldd	r25, Z+7	; 0x07
    fb30:	28 2b       	or	r18, r24
    fb32:	39 2b       	or	r19, r25
    fb34:	d7 01       	movw	r26, r14
    fb36:	2d 93       	st	X+, r18
    fb38:	3c 93       	st	X, r19
    fb3a:	84 81       	ldd	r24, Z+4	; 0x04
    fb3c:	20 e0       	ldi	r18, 0x00	; 0
    fb3e:	30 e0       	ldi	r19, 0x00	; 0
    fb40:	38 2f       	mov	r19, r24
    fb42:	33 0f       	add	r19, r19
    fb44:	33 0f       	add	r19, r19
    fb46:	33 0f       	add	r19, r19
    fb48:	82 81       	ldd	r24, Z+2	; 0x02
    fb4a:	93 81       	ldd	r25, Z+3	; 0x03
    fb4c:	55 e0       	ldi	r21, 0x05	; 5
    fb4e:	88 0f       	add	r24, r24
    fb50:	99 1f       	adc	r25, r25
    fb52:	5a 95       	dec	r21
    fb54:	e1 f7       	brne	.-8      	; 0xfb4e <unix_time_to_fat+0x6a>
    fb56:	82 2b       	or	r24, r18
    fb58:	93 2b       	or	r25, r19
    fb5a:	20 81       	ld	r18, Z
    fb5c:	31 81       	ldd	r19, Z+1	; 0x01
    fb5e:	36 95       	lsr	r19
    fb60:	27 95       	ror	r18
    fb62:	82 2b       	or	r24, r18
    fb64:	93 2b       	or	r25, r19
    fb66:	f8 01       	movw	r30, r16
    fb68:	91 83       	std	Z+1, r25	; 0x01
    fb6a:	80 83       	st	Z, r24
    fb6c:	24 96       	adiw	r28, 0x04	; 4
    fb6e:	e6 e0       	ldi	r30, 0x06	; 6
    fb70:	0c 94 e9 e8 	jmp	0x1d1d2	; 0x1d1d2 <__epilogue_restores__+0x18>

0000fb74 <utime>:
    fb74:	aa e1       	ldi	r26, 0x1A	; 26
    fb76:	b1 e0       	ldi	r27, 0x01	; 1
    fb78:	e0 ec       	ldi	r30, 0xC0	; 192
    fb7a:	fd e7       	ldi	r31, 0x7D	; 125
    fb7c:	0c 94 cf e8 	jmp	0x1d19e	; 0x1d19e <__prologue_saves__+0x1c>
    fb80:	8c 01       	movw	r16, r24
    fb82:	61 15       	cp	r22, r1
    fb84:	71 05       	cpc	r23, r1
    fb86:	31 f0       	breq	.+12     	; 0xfb94 <utime+0x20>
    fb88:	fb 01       	movw	r30, r22
    fb8a:	64 81       	ldd	r22, Z+4	; 0x04
    fb8c:	75 81       	ldd	r23, Z+5	; 0x05
    fb8e:	86 81       	ldd	r24, Z+6	; 0x06
    fb90:	97 81       	ldd	r25, Z+7	; 0x07
    fb92:	04 c0       	rjmp	.+8      	; 0xfb9c <utime+0x28>
    fb94:	80 e0       	ldi	r24, 0x00	; 0
    fb96:	90 e0       	ldi	r25, 0x00	; 0
    fb98:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <time>
    fb9c:	9e 01       	movw	r18, r28
    fb9e:	29 5e       	subi	r18, 0xE9	; 233
    fba0:	3e 4f       	sbci	r19, 0xFE	; 254
    fba2:	ae 01       	movw	r20, r28
    fba4:	47 5e       	subi	r20, 0xE7	; 231
    fba6:	5e 4f       	sbci	r21, 0xFE	; 254
    fba8:	9d df       	rcall	.-198    	; 0xfae4 <unix_time_to_fat>
    fbaa:	c7 5e       	subi	r28, 0xE7	; 231
    fbac:	de 4f       	sbci	r29, 0xFE	; 254
    fbae:	88 81       	ld	r24, Y
    fbb0:	99 81       	ldd	r25, Y+1	; 0x01
    fbb2:	c9 51       	subi	r28, 0x19	; 25
    fbb4:	d1 40       	sbci	r29, 0x01	; 1
    fbb6:	9e 83       	std	Y+6, r25	; 0x06
    fbb8:	8d 83       	std	Y+5, r24	; 0x05
    fbba:	c9 5e       	subi	r28, 0xE9	; 233
    fbbc:	de 4f       	sbci	r29, 0xFE	; 254
    fbbe:	88 81       	ld	r24, Y
    fbc0:	99 81       	ldd	r25, Y+1	; 0x01
    fbc2:	c7 51       	subi	r28, 0x17	; 23
    fbc4:	d1 40       	sbci	r29, 0x01	; 1
    fbc6:	98 87       	std	Y+8, r25	; 0x08
    fbc8:	8f 83       	std	Y+7, r24	; 0x07
    fbca:	be 01       	movw	r22, r28
    fbcc:	6f 5f       	subi	r22, 0xFF	; 255
    fbce:	7f 4f       	sbci	r23, 0xFF	; 255
    fbd0:	c8 01       	movw	r24, r16
    fbd2:	0e 94 d4 65 	call	0xcba8	; 0xcba8 <f_utime>
    fbd6:	84 31       	cpi	r24, 0x14	; 20
    fbd8:	91 05       	cpc	r25, r1
    fbda:	40 f4       	brcc	.+16     	; 0xfbec <utime+0x78>
    fbdc:	fc 01       	movw	r30, r24
    fbde:	e1 51       	subi	r30, 0x11	; 17
    fbe0:	f9 4f       	sbci	r31, 0xF9	; 249
    fbe2:	80 81       	ld	r24, Z
    fbe4:	08 2e       	mov	r0, r24
    fbe6:	00 0c       	add	r0, r0
    fbe8:	99 0b       	sbc	r25, r25
    fbea:	02 c0       	rjmp	.+4      	; 0xfbf0 <utime+0x7c>
    fbec:	83 e2       	ldi	r24, 0x23	; 35
    fbee:	90 e0       	ldi	r25, 0x00	; 0
    fbf0:	c6 5e       	subi	r28, 0xE6	; 230
    fbf2:	de 4f       	sbci	r29, 0xFE	; 254
    fbf4:	e4 e0       	ldi	r30, 0x04	; 4
    fbf6:	0c 94 eb e8 	jmp	0x1d1d6	; 0x1d1d6 <__epilogue_restores__+0x1c>

0000fbfa <fileno_to_fatfs>:
    fbfa:	83 30       	cpi	r24, 0x03	; 3
    fbfc:	91 05       	cpc	r25, r1
    fbfe:	48 f4       	brcc	.+18     	; 0xfc12 <fileno_to_fatfs+0x18>
    fc00:	89 e0       	ldi	r24, 0x09	; 9
    fc02:	90 e0       	ldi	r25, 0x00	; 0
    fc04:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
    fc08:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
    fc0c:	80 e0       	ldi	r24, 0x00	; 0
    fc0e:	90 e0       	ldi	r25, 0x00	; 0
    fc10:	08 95       	ret
    fc12:	57 db       	rcall	.-2386   	; 0xf2c2 <fileno_to_stream>
    fc14:	00 97       	sbiw	r24, 0x00	; 0
    fc16:	d1 f3       	breq	.-12     	; 0xfc0c <fileno_to_fatfs+0x12>
    fc18:	fc 01       	movw	r30, r24
    fc1a:	84 85       	ldd	r24, Z+12	; 0x0c
    fc1c:	95 85       	ldd	r25, Z+13	; 0x0d
    fc1e:	00 97       	sbiw	r24, 0x00	; 0
    fc20:	79 f3       	breq	.-34     	; 0xfc00 <fileno_to_fatfs+0x6>
    fc22:	08 95       	ret

0000fc24 <ftell>:
    fc24:	10 92 6f 1c 	sts	0x1C6F, r1	; 0x801c6f <errno+0x1>
    fc28:	10 92 6e 1c 	sts	0x1C6E, r1	; 0x801c6e <errno>
    fc2c:	2e db       	rcall	.-2468   	; 0xf28a <fileno>
    fc2e:	83 30       	cpi	r24, 0x03	; 3
    fc30:	91 05       	cpc	r25, r1
    fc32:	48 f0       	brcs	.+18     	; 0xfc46 <ftell+0x22>
    fc34:	e2 df       	rcall	.-60     	; 0xfbfa <fileno_to_fatfs>
    fc36:	00 97       	sbiw	r24, 0x00	; 0
    fc38:	51 f4       	brne	.+20     	; 0xfc4e <ftell+0x2a>
    fc3a:	89 e0       	ldi	r24, 0x09	; 9
    fc3c:	90 e0       	ldi	r25, 0x00	; 0
    fc3e:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
    fc42:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
    fc46:	6f ef       	ldi	r22, 0xFF	; 255
    fc48:	7f ef       	ldi	r23, 0xFF	; 255
    fc4a:	cb 01       	movw	r24, r22
    fc4c:	08 95       	ret
    fc4e:	fc 01       	movw	r30, r24
    fc50:	60 89       	ldd	r22, Z+16	; 0x10
    fc52:	71 89       	ldd	r23, Z+17	; 0x11
    fc54:	82 89       	ldd	r24, Z+18	; 0x12
    fc56:	93 89       	ldd	r25, Z+19	; 0x13
    fc58:	08 95       	ret

0000fc5a <lseek>:
    fc5a:	a0 e0       	ldi	r26, 0x00	; 0
    fc5c:	b0 e0       	ldi	r27, 0x00	; 0
    fc5e:	e3 e3       	ldi	r30, 0x33	; 51
    fc60:	fe e7       	ldi	r31, 0x7E	; 126
    fc62:	0c 94 c9 e8 	jmp	0x1d192	; 0x1d192 <__prologue_saves__+0x10>
    fc66:	5c 01       	movw	r10, r24
    fc68:	6a 01       	movw	r12, r20
    fc6a:	7b 01       	movw	r14, r22
    fc6c:	89 01       	movw	r16, r18
    fc6e:	10 92 6f 1c 	sts	0x1C6F, r1	; 0x801c6f <errno+0x1>
    fc72:	10 92 6e 1c 	sts	0x1C6E, r1	; 0x801c6e <errno>
    fc76:	c1 df       	rcall	.-126    	; 0xfbfa <fileno_to_fatfs>
    fc78:	ec 01       	movw	r28, r24
    fc7a:	89 2b       	or	r24, r25
    fc7c:	19 f4       	brne	.+6      	; 0xfc84 <lseek+0x2a>
    fc7e:	88 e1       	ldi	r24, 0x18	; 24
    fc80:	90 e0       	ldi	r25, 0x00	; 0
    fc82:	26 c0       	rjmp	.+76     	; 0xfcd0 <lseek+0x76>
    fc84:	83 e0       	ldi	r24, 0x03	; 3
    fc86:	a8 16       	cp	r10, r24
    fc88:	b1 04       	cpc	r11, r1
    fc8a:	d0 f1       	brcs	.+116    	; 0xfd00 <lseek+0xa6>
    fc8c:	c5 01       	movw	r24, r10
    fc8e:	19 db       	rcall	.-2510   	; 0xf2c2 <fileno_to_stream>
    fc90:	fc 01       	movw	r30, r24
    fc92:	93 81       	ldd	r25, Z+3	; 0x03
    fc94:	90 64       	ori	r25, 0x40	; 64
    fc96:	93 83       	std	Z+3, r25	; 0x03
    fc98:	02 30       	cpi	r16, 0x02	; 2
    fc9a:	11 05       	cpc	r17, r1
    fc9c:	a9 f5       	brne	.+106    	; 0xfd08 <lseek+0xae>
    fc9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    fca0:	9b 85       	ldd	r25, Y+11	; 0x0b
    fca2:	ac 85       	ldd	r26, Y+12	; 0x0c
    fca4:	bd 85       	ldd	r27, Y+13	; 0x0d
    fca6:	c8 0e       	add	r12, r24
    fca8:	d9 1e       	adc	r13, r25
    fcaa:	ea 1e       	adc	r14, r26
    fcac:	fb 1e       	adc	r15, r27
    fcae:	b7 01       	movw	r22, r14
    fcb0:	a6 01       	movw	r20, r12
    fcb2:	ce 01       	movw	r24, r28
    fcb4:	0e 94 b0 5d 	call	0xbb60	; 0xbb60 <f_lseek>
    fcb8:	00 97       	sbiw	r24, 0x00	; 0
    fcba:	79 f0       	breq	.+30     	; 0xfcda <lseek+0x80>
    fcbc:	84 31       	cpi	r24, 0x14	; 20
    fcbe:	91 05       	cpc	r25, r1
    fcc0:	58 f5       	brcc	.+86     	; 0xfd18 <lseek+0xbe>
    fcc2:	fc 01       	movw	r30, r24
    fcc4:	e1 51       	subi	r30, 0x11	; 17
    fcc6:	f9 4f       	sbci	r31, 0xF9	; 249
    fcc8:	80 81       	ld	r24, Z
    fcca:	08 2e       	mov	r0, r24
    fccc:	00 0c       	add	r0, r0
    fcce:	99 0b       	sbc	r25, r25
    fcd0:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
    fcd4:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
    fcd8:	13 c0       	rjmp	.+38     	; 0xfd00 <lseek+0xa6>
    fcda:	68 89       	ldd	r22, Y+16	; 0x10
    fcdc:	79 89       	ldd	r23, Y+17	; 0x11
    fcde:	8a 89       	ldd	r24, Y+18	; 0x12
    fce0:	9b 89       	ldd	r25, Y+19	; 0x13
    fce2:	c6 16       	cp	r12, r22
    fce4:	d7 06       	cpc	r13, r23
    fce6:	e8 06       	cpc	r14, r24
    fce8:	f9 06       	cpc	r15, r25
    fcea:	c9 f0       	breq	.+50     	; 0xfd1e <lseek+0xc4>
    fcec:	84 e5       	ldi	r24, 0x54	; 84
    fcee:	9c e0       	ldi	r25, 0x0C	; 12
    fcf0:	1f 92       	push	r1
    fcf2:	9f 93       	push	r25
    fcf4:	8f 93       	push	r24
    fcf6:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    fcfa:	0f 90       	pop	r0
    fcfc:	0f 90       	pop	r0
    fcfe:	0f 90       	pop	r0
    fd00:	6f ef       	ldi	r22, 0xFF	; 255
    fd02:	7f ef       	ldi	r23, 0xFF	; 255
    fd04:	cb 01       	movw	r24, r22
    fd06:	0b c0       	rjmp	.+22     	; 0xfd1e <lseek+0xc4>
    fd08:	01 30       	cpi	r16, 0x01	; 1
    fd0a:	11 05       	cpc	r17, r1
    fd0c:	81 f6       	brne	.-96     	; 0xfcae <lseek+0x54>
    fd0e:	88 89       	ldd	r24, Y+16	; 0x10
    fd10:	99 89       	ldd	r25, Y+17	; 0x11
    fd12:	aa 89       	ldd	r26, Y+18	; 0x12
    fd14:	bb 89       	ldd	r27, Y+19	; 0x13
    fd16:	c7 cf       	rjmp	.-114    	; 0xfca6 <lseek+0x4c>
    fd18:	83 e2       	ldi	r24, 0x23	; 35
    fd1a:	90 e0       	ldi	r25, 0x00	; 0
    fd1c:	d9 cf       	rjmp	.-78     	; 0xfcd0 <lseek+0x76>
    fd1e:	cd b7       	in	r28, 0x3d	; 61
    fd20:	de b7       	in	r29, 0x3e	; 62
    fd22:	ea e0       	ldi	r30, 0x0A	; 10
    fd24:	0c 94 e5 e8 	jmp	0x1d1ca	; 0x1d1ca <__epilogue_restores__+0x10>

0000fd28 <fseek>:
    fd28:	cf 92       	push	r12
    fd2a:	df 92       	push	r13
    fd2c:	ef 92       	push	r14
    fd2e:	ff 92       	push	r15
    fd30:	cf 93       	push	r28
    fd32:	df 93       	push	r29
    fd34:	6a 01       	movw	r12, r20
    fd36:	7b 01       	movw	r14, r22
    fd38:	e9 01       	movw	r28, r18
    fd3a:	a7 da       	rcall	.-2738   	; 0xf28a <fileno>
    fd3c:	97 fd       	sbrc	r25, 7
    fd3e:	12 c0       	rjmp	.+36     	; 0xfd64 <fseek+0x3c>
    fd40:	9e 01       	movw	r18, r28
    fd42:	b7 01       	movw	r22, r14
    fd44:	a6 01       	movw	r20, r12
    fd46:	89 df       	rcall	.-238    	; 0xfc5a <lseek>
    fd48:	21 e0       	ldi	r18, 0x01	; 1
    fd4a:	30 e0       	ldi	r19, 0x00	; 0
    fd4c:	6f 3f       	cpi	r22, 0xFF	; 255
    fd4e:	7f 4f       	sbci	r23, 0xFF	; 255
    fd50:	8f 4f       	sbci	r24, 0xFF	; 255
    fd52:	9f 4f       	sbci	r25, 0xFF	; 255
    fd54:	11 f0       	breq	.+4      	; 0xfd5a <fseek+0x32>
    fd56:	20 e0       	ldi	r18, 0x00	; 0
    fd58:	30 e0       	ldi	r19, 0x00	; 0
    fd5a:	88 27       	eor	r24, r24
    fd5c:	99 27       	eor	r25, r25
    fd5e:	82 1b       	sub	r24, r18
    fd60:	93 0b       	sbc	r25, r19
    fd62:	02 c0       	rjmp	.+4      	; 0xfd68 <fseek+0x40>
    fd64:	8f ef       	ldi	r24, 0xFF	; 255
    fd66:	9f ef       	ldi	r25, 0xFF	; 255
    fd68:	df 91       	pop	r29
    fd6a:	cf 91       	pop	r28
    fd6c:	ff 90       	pop	r15
    fd6e:	ef 90       	pop	r14
    fd70:	df 90       	pop	r13
    fd72:	cf 90       	pop	r12
    fd74:	08 95       	ret

0000fd76 <read>:
///
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t read(int fd, const void *buf, size_t count)
{
    fd76:	a2 e0       	ldi	r26, 0x02	; 2
    fd78:	b0 e0       	ldi	r27, 0x00	; 0
    fd7a:	e1 ec       	ldi	r30, 0xC1	; 193
    fd7c:	fe e7       	ldi	r31, 0x7E	; 126
    fd7e:	0c 94 c9 e8 	jmp	0x1d192	; 0x1d192 <__prologue_saves__+0x10>
    fd82:	5c 01       	movw	r10, r24
    fd84:	8b 01       	movw	r16, r22
    fd86:	6a 01       	movw	r12, r20
    int ret;
    FIL *fh;
    FILE *stream;

    //FIXME
    *(char *) buf = 0;
    fd88:	fb 01       	movw	r30, r22
    fd8a:	10 82       	st	Z, r1

    errno = 0;
    fd8c:	10 92 6f 1c 	sts	0x1C6F, r1	; 0x801c6f <errno+0x1>
    fd90:	10 92 6e 1c 	sts	0x1C6E, r1	; 0x801c6e <errno>

    // TTY read function
    // FIXME should we really be blocking ???
    stream = fileno_to_stream(fd);
    fd94:	96 da       	rcall	.-2772   	; 0xf2c2 <fileno_to_stream>
    if(stream == stdin)
    fd96:	7c 01       	movw	r14, r24
    fd98:	80 91 70 1c 	lds	r24, 0x1C70	; 0x801c70 <__iob>
    fd9c:	90 91 71 1c 	lds	r25, 0x1C71	; 0x801c71 <__iob+0x1>
    fda0:	e8 16       	cp	r14, r24
    fda2:	f9 06       	cpc	r15, r25
    {
        char *ptr = (char *) buf;
        // ungetc is undefined for read
        stream->flags |= __SUNGET;
    fda4:	c9 f4       	brne	.+50     	; 0xfdd8 <read+0x62>
    fda6:	f7 01       	movw	r30, r14
    fda8:	83 81       	ldd	r24, Z+3	; 0x03
    fdaa:	80 64       	ori	r24, 0x40	; 64
        size = 0;
    fdac:	83 83       	std	Z+3, r24	; 0x03
    fdae:	1a 82       	std	Y+2, r1	; 0x02
    fdb0:	19 82       	std	Y+1, r1	; 0x01
    fdb2:	c0 0e       	add	r12, r16
        while(count--)
    fdb4:	d1 1e       	adc	r13, r17
    fdb6:	0c 15       	cp	r16, r12
    fdb8:	1d 05       	cpc	r17, r13
        {
            ret = fgetc(stream);
    fdba:	09 f4       	brne	.+2      	; 0xfdbe <read+0x48>
    fdbc:	3d c0       	rjmp	.+122    	; 0xfe38 <read+0xc2>
            if(ret < 0)
    fdbe:	c7 01       	movw	r24, r14
    fdc0:	4a d9       	rcall	.-3436   	; 0xf056 <fgetc>
                break;
            
            *ptr++ = ret;
    fdc2:	97 fd       	sbrc	r25, 7
    fdc4:	39 c0       	rjmp	.+114    	; 0xfe38 <read+0xc2>
    fdc6:	f8 01       	movw	r30, r16
            ++size;
    fdc8:	81 93       	st	Z+, r24
    fdca:	8f 01       	movw	r16, r30
    fdcc:	89 81       	ldd	r24, Y+1	; 0x01
    fdce:	9a 81       	ldd	r25, Y+2	; 0x02
    fdd0:	01 96       	adiw	r24, 0x01	; 1
    fdd2:	9a 83       	std	Y+2, r25	; 0x02
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    fdd4:	89 83       	std	Y+1, r24	; 0x01
    fdd6:	ef cf       	rjmp	.-34     	; 0xfdb6 <read+0x40>
    fdd8:	80 91 72 1c 	lds	r24, 0x1C72	; 0x801c72 <__iob+0x2>
    fddc:	90 91 73 1c 	lds	r25, 0x1C73	; 0x801c73 <__iob+0x3>
    fde0:	e8 16       	cp	r14, r24
    fde2:	f9 06       	cpc	r15, r25
    fde4:	71 f1       	breq	.+92     	; 0xfe42 <read+0xcc>
    fde6:	80 91 74 1c 	lds	r24, 0x1C74	; 0x801c74 <__iob+0x4>
    fdea:	90 91 75 1c 	lds	r25, 0x1C75	; 0x801c75 <__iob+0x5>
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    fdee:	e8 16       	cp	r14, r24
    fdf0:	f9 06       	cpc	r15, r25
    if ( fh == NULL )
    fdf2:	39 f1       	breq	.+78     	; 0xfe42 <read+0xcc>
    fdf4:	c5 01       	movw	r24, r10
    {
        errno = EBADF;
    fdf6:	01 df       	rcall	.-510    	; 0xfbfa <fileno_to_fatfs>
    fdf8:	00 97       	sbiw	r24, 0x00	; 0
    fdfa:	19 f4       	brne	.+6      	; 0xfe02 <read+0x8c>
        return(-1);
    }

    res = f_read(fh, (void *) buf, bytes, &size);
    fdfc:	89 e0       	ldi	r24, 0x09	; 9
    fdfe:	90 e0       	ldi	r25, 0x00	; 0
    fe00:	16 c0       	rjmp	.+44     	; 0xfe2e <read+0xb8>
    fe02:	9e 01       	movw	r18, r28
    fe04:	2f 5f       	subi	r18, 0xFF	; 255
    fe06:	3f 4f       	sbci	r19, 0xFF	; 255
    fe08:	a6 01       	movw	r20, r12
    if(res != FR_OK)
    fe0a:	b8 01       	movw	r22, r16
    fe0c:	0e 94 a6 58 	call	0xb14c	; 0xb14c <f_read>
    fe10:	00 97       	sbiw	r24, 0x00	; 0
    fe12:	91 f0       	breq	.+36     	; 0xfe38 <read+0xc2>
    fe14:	84 31       	cpi	r24, 0x14	; 20
    fe16:	91 05       	cpc	r25, r1
    fe18:	40 f4       	brcc	.+16     	; 0xfe2a <read+0xb4>
    fe1a:	fc 01       	movw	r30, r24
    fe1c:	e1 51       	subi	r30, 0x11	; 17
    fe1e:	f9 4f       	sbci	r31, 0xF9	; 249
    fe20:	80 81       	ld	r24, Z
    fe22:	08 2e       	mov	r0, r24
    fe24:	00 0c       	add	r0, r0
    fe26:	99 0b       	sbc	r25, r25
    {
        errno = fatfs_to_errno(res);
    fe28:	02 c0       	rjmp	.+4      	; 0xfe2e <read+0xb8>
    fe2a:	83 e2       	ldi	r24, 0x23	; 35
    fe2c:	90 e0       	ldi	r25, 0x00	; 0
    fe2e:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
        return(-1);
    }
    return ((ssize_t) size);
    fe32:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
    fe36:	05 c0       	rjmp	.+10     	; 0xfe42 <read+0xcc>
    fe38:	69 81       	ldd	r22, Y+1	; 0x01
    fe3a:	7a 81       	ldd	r23, Y+2	; 0x02
        }
        return(size);
    }
    if(stream == stdout || stream == stderr)
    {
        return(-1);
    fe3c:	80 e0       	ldi	r24, 0x00	; 0
    fe3e:	90 e0       	ldi	r25, 0x00	; 0
    fe40:	03 c0       	rjmp	.+6      	; 0xfe48 <read+0xd2>
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    fe42:	6f ef       	ldi	r22, 0xFF	; 255
    fe44:	7f ef       	ldi	r23, 0xFF	; 255
    fe46:	cb 01       	movw	r24, r22
    fe48:	22 96       	adiw	r28, 0x02	; 2
    fe4a:	ea e0       	ldi	r30, 0x0A	; 10
    fe4c:	0c 94 e5 e8 	jmp	0x1d1ca	; 0x1d1ca <__epilogue_restores__+0x10>

0000fe50 <fread>:
///
/// @return count on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    fe50:	0f 93       	push	r16
    fe52:	1f 93       	push	r17
    fe54:	cf 93       	push	r28
    fe56:	df 93       	push	r29
    fe58:	ec 01       	movw	r28, r24
    fe5a:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
    fe5c:	64 9f       	mul	r22, r20
    fe5e:	80 01       	movw	r16, r0
    fe60:	65 9f       	mul	r22, r21
    fe62:	10 0d       	add	r17, r0
    fe64:	74 9f       	mul	r23, r20
    fe66:	10 0d       	add	r17, r0
    int fn = fileno(stream);
    fe68:	11 24       	eor	r1, r1
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    fe6a:	0f da       	rcall	.-3042   	; 0xf28a <fileno>
    fe6c:	a8 01       	movw	r20, r16
    fe6e:	be 01       	movw	r22, r28
    if(ret < 0)
    fe70:	82 df       	rcall	.-252    	; 0xfd76 <read>
    fe72:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
    fe74:	02 c0       	rjmp	.+4      	; 0xfe7a <fread+0x2a>
    fe76:	cb 01       	movw	r24, r22
    ssize_t ret;

    // read() checks for fn out of bounds
    ret = read(fn, ptr, count);
    if(ret < 0)
        return(0);
    fe78:	02 c0       	rjmp	.+4      	; 0xfe7e <fread+0x2e>
    fe7a:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
    fe7c:	90 e0       	ldi	r25, 0x00	; 0
    fe7e:	df 91       	pop	r29
    fe80:	cf 91       	pop	r28
    fe82:	1f 91       	pop	r17
    fe84:	0f 91       	pop	r16
    fe86:	08 95       	ret

0000fe88 <syncfs>:
/// @param[in] fd: POSIX fileno to sync.
/// @return 0.
/// @return -1 on error witrh errno set.
MEMSPACE
int syncfs(int fd)
{
    fe88:	cf 93       	push	r28
    fe8a:	df 93       	push	r29
    FIL *fh;
    FRESULT res;
    FILE *stream;

    errno = 0;
    fe8c:	10 92 6f 1c 	sts	0x1C6F, r1	; 0x801c6f <errno+0x1>
    fe90:	10 92 6e 1c 	sts	0x1C6E, r1	; 0x801c6e <errno>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    fe94:	83 30       	cpi	r24, 0x03	; 3
    fe96:	91 05       	cpc	r25, r1
    fe98:	18 f4       	brcc	.+6      	; 0xfea0 <syncfs+0x18>

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    if(fh == NULL)
    {
        errno = EBADF;
    fe9a:	89 e0       	ldi	r24, 0x09	; 9
    fe9c:	90 e0       	ldi	r25, 0x00	; 0
    fe9e:	18 c0       	rjmp	.+48     	; 0xfed0 <syncfs+0x48>
    if(isatty(fd))
    {
        errno = EBADF;
        return(-1);
    }
    stream = fileno_to_stream(fd);
    fea0:	ec 01       	movw	r28, r24
    fea2:	0f da       	rcall	.-3042   	; 0xf2c2 <fileno_to_stream>
    // reset unget on sync
    stream->flags |= __SUNGET;
    fea4:	fc 01       	movw	r30, r24
    fea6:	93 81       	ldd	r25, Z+3	; 0x03

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    fea8:	90 64       	ori	r25, 0x40	; 64
    feaa:	93 83       	std	Z+3, r25	; 0x03
    if(fh == NULL)
    feac:	ce 01       	movw	r24, r28
    feae:	a5 de       	rcall	.-694    	; 0xfbfa <fileno_to_fatfs>
    {
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    feb0:	00 97       	sbiw	r24, 0x00	; 0
    feb2:	99 f3       	breq	.-26     	; 0xfe9a <syncfs+0x12>
    if (res != FR_OK)
    feb4:	0e 94 88 5b 	call	0xb710	; 0xb710 <f_sync>
    feb8:	00 97       	sbiw	r24, 0x00	; 0
    feba:	a1 f0       	breq	.+40     	; 0xfee4 <syncfs+0x5c>
    febc:	84 31       	cpi	r24, 0x14	; 20
    febe:	91 05       	cpc	r25, r1
    fec0:	70 f4       	brcc	.+28     	; 0xfede <syncfs+0x56>
    fec2:	fc 01       	movw	r30, r24
    fec4:	e1 51       	subi	r30, 0x11	; 17
    fec6:	f9 4f       	sbci	r31, 0xF9	; 249
    fec8:	80 81       	ld	r24, Z
    feca:	08 2e       	mov	r0, r24
    {
        errno = fatfs_to_errno(res);
    fecc:	00 0c       	add	r0, r0
    fece:	99 0b       	sbc	r25, r25
    fed0:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
        return(-1);
    fed4:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
    fed8:	8f ef       	ldi	r24, 0xFF	; 255
        errno = EBADF;
        return(-1);
    }

    res  = f_sync ( fh );
    if (res != FR_OK)
    feda:	9f ef       	ldi	r25, 0xFF	; 255
    fedc:	05 c0       	rjmp	.+10     	; 0xfee8 <syncfs+0x60>
    fede:	83 e2       	ldi	r24, 0x23	; 35
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return(0);
    fee0:	90 e0       	ldi	r25, 0x00	; 0
    fee2:	f6 cf       	rjmp	.-20     	; 0xfed0 <syncfs+0x48>
}
    fee4:	80 e0       	ldi	r24, 0x00	; 0
    fee6:	90 e0       	ldi	r25, 0x00	; 0
    fee8:	df 91       	pop	r29
    feea:	cf 91       	pop	r28
    feec:	08 95       	ret

0000feee <sync>:
/// - man page sync (2).
///
/// @return  void.
MEMSPACE
void sync(void)
{
    feee:	cf 93       	push	r28
    fef0:	df 93       	push	r29
    FIL *fh;
    int i;

    for(i=0;i<MAX_FILES;++i)
    fef2:	c0 e0       	ldi	r28, 0x00	; 0
    fef4:	d0 e0       	ldi	r29, 0x00	; 0
    fef6:	21 96       	adiw	r28, 0x01	; 1
    fef8:	c0 31       	cpi	r28, 0x10	; 16
    fefa:	d1 05       	cpc	r29, r1
    fefc:	51 f0       	breq	.+20     	; 0xff12 <__DATA_REGION_LENGTH__+0x12>
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
    fefe:	c3 30       	cpi	r28, 0x03	; 3
    ff00:	d1 05       	cpc	r29, r1
    ff02:	cc f3       	brlt	.-14     	; 0xfef6 <sync+0x8>
    {
        if(isatty(i))
            continue;

        // fileno_to_fatfs checks for i out of bounds
        fh = fileno_to_fatfs(i);
    ff04:	ce 01       	movw	r24, r28
    ff06:	79 de       	rcall	.-782    	; 0xfbfa <fileno_to_fatfs>
        if(fh == NULL)
    ff08:	89 2b       	or	r24, r25
            continue;

        (void ) syncfs(i);
    ff0a:	a9 f3       	breq	.-22     	; 0xfef6 <sync+0x8>
    ff0c:	ce 01       	movw	r24, r28
    ff0e:	bc df       	rcall	.-136    	; 0xfe88 <syncfs>
    }
}
    ff10:	f2 cf       	rjmp	.-28     	; 0xfef6 <sync+0x8>
    ff12:	df 91       	pop	r29
    ff14:	cf 91       	pop	r28
    ff16:	08 95       	ret

0000ff18 <write>:
/// @param[in] count: number of bytes to write.
/// @return count on sucess.
/// @return -1 on error with errno set.
MEMSPACE
ssize_t write(int fd, const void *buf, size_t count)
{
    ff18:	a2 e0       	ldi	r26, 0x02	; 2
    ff1a:	b0 e0       	ldi	r27, 0x00	; 0
    ff1c:	e2 e9       	ldi	r30, 0x92	; 146
    ff1e:	ff e7       	ldi	r31, 0x7F	; 127
    ff20:	0c 94 c7 e8 	jmp	0x1d18e	; 0x1d18e <__prologue_saves__+0xc>
    ff24:	8c 01       	movw	r16, r24
    ff26:	b6 2e       	mov	r11, r22
    ff28:	f7 2e       	mov	r15, r23
    ff2a:	4a 01       	movw	r8, r20
    UINT size;
    UINT bytes = count;
    FRESULT res;
    FIL *fh;
    FILE *stream;
    errno = 0;
    ff2c:	10 92 6f 1c 	sts	0x1C6F, r1	; 0x801c6f <errno+0x1>
    ff30:	10 92 6e 1c 	sts	0x1C6E, r1	; 0x801c6e <errno>

    // TTY read function
    stream = fileno_to_stream(fd);
    ff34:	c6 d9       	rcall	.-3188   	; 0xf2c2 <fileno_to_stream>
    if(stream == stdout || stream == stderr)
    ff36:	6c 01       	movw	r12, r24
    ff38:	80 91 72 1c 	lds	r24, 0x1C72	; 0x801c72 <__iob+0x2>
    ff3c:	90 91 73 1c 	lds	r25, 0x1C73	; 0x801c73 <__iob+0x3>
    ff40:	c8 16       	cp	r12, r24
    ff42:	d9 06       	cpc	r13, r25
    ff44:	39 f0       	breq	.+14     	; 0xff54 <write+0x3c>
    ff46:	80 91 74 1c 	lds	r24, 0x1C74	; 0x801c74 <__iob+0x4>
    ff4a:	90 91 75 1c 	lds	r25, 0x1C75	; 0x801c75 <__iob+0x5>
    ff4e:	c8 16       	cp	r12, r24
    ff50:	d9 06       	cpc	r13, r25
    {
        char *ptr = (char *) buf;   
        size = 0;
    ff52:	d1 f4       	brne	.+52     	; 0xff88 <write+0x70>
    ff54:	1a 82       	std	Y+2, r1	; 0x02
    ff56:	19 82       	std	Y+1, r1	; 0x01
    ff58:	0b 2d       	mov	r16, r11
    ff5a:	1f 2d       	mov	r17, r15
    ff5c:	78 01       	movw	r14, r16
    ff5e:	e8 0c       	add	r14, r8
        while(count--)
    ff60:	f9 1c       	adc	r15, r9
    ff62:	0e 15       	cp	r16, r14
    ff64:	1f 05       	cpc	r17, r15
        {
            int c,ret;
            c = *ptr++;
    ff66:	d1 f1       	breq	.+116    	; 0xffdc <write+0xc4>
    ff68:	f8 01       	movw	r30, r16
    ff6a:	a1 90       	ld	r10, Z+
    ff6c:	8f 01       	movw	r16, r30
            ret = fputc(c, stream);
    ff6e:	b1 2c       	mov	r11, r1
    ff70:	b6 01       	movw	r22, r12
    ff72:	c5 01       	movw	r24, r10
            if(c != ret)
    ff74:	c1 d8       	rcall	.-3710   	; 0xf0f8 <fputc>
    ff76:	a8 16       	cp	r10, r24
    ff78:	b9 06       	cpc	r11, r25
                break;

            ++size;
    ff7a:	81 f5       	brne	.+96     	; 0xffdc <write+0xc4>
    ff7c:	89 81       	ldd	r24, Y+1	; 0x01
    ff7e:	9a 81       	ldd	r25, Y+2	; 0x02
    ff80:	01 96       	adiw	r24, 0x01	; 1
    ff82:	9a 83       	std	Y+2, r25	; 0x02
    ff84:	89 83       	std	Y+1, r24	; 0x01
        }
        return(size);
    }
    if(stream == stdin)
    ff86:	ed cf       	rjmp	.-38     	; 0xff62 <write+0x4a>
    ff88:	80 91 70 1c 	lds	r24, 0x1C70	; 0x801c70 <__iob>
    ff8c:	90 91 71 1c 	lds	r25, 0x1C71	; 0x801c71 <__iob+0x1>
    ff90:	c8 16       	cp	r12, r24
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fd out of bounds
    fh = fileno_to_fatfs(fd);
    ff92:	d9 06       	cpc	r13, r25
    ff94:	41 f1       	breq	.+80     	; 0xffe6 <write+0xce>
    if ( fh == NULL )
    ff96:	c8 01       	movw	r24, r16
    ff98:	30 de       	rcall	.-928    	; 0xfbfa <fileno_to_fatfs>
    {
        errno = EBADF;
    ff9a:	00 97       	sbiw	r24, 0x00	; 0
    ff9c:	19 f4       	brne	.+6      	; 0xffa4 <write+0x8c>
    ff9e:	89 e0       	ldi	r24, 0x09	; 9
        return(-1);
    }

    res = f_write(fh, buf, bytes, &size);
    ffa0:	90 e0       	ldi	r25, 0x00	; 0
    ffa2:	17 c0       	rjmp	.+46     	; 0xffd2 <write+0xba>
    ffa4:	9e 01       	movw	r18, r28
    ffa6:	2f 5f       	subi	r18, 0xFF	; 255
    ffa8:	3f 4f       	sbci	r19, 0xFF	; 255
    ffaa:	a4 01       	movw	r20, r8
    ffac:	6b 2d       	mov	r22, r11
    ffae:	7f 2d       	mov	r23, r15
    if(res != FR_OK)
    ffb0:	0e 94 f1 59 	call	0xb3e2	; 0xb3e2 <f_write>
    ffb4:	00 97       	sbiw	r24, 0x00	; 0
    ffb6:	91 f0       	breq	.+36     	; 0xffdc <write+0xc4>
    ffb8:	84 31       	cpi	r24, 0x14	; 20
    ffba:	91 05       	cpc	r25, r1
    ffbc:	40 f4       	brcc	.+16     	; 0xffce <write+0xb6>
    ffbe:	fc 01       	movw	r30, r24
    ffc0:	e1 51       	subi	r30, 0x11	; 17
    ffc2:	f9 4f       	sbci	r31, 0xF9	; 249
    ffc4:	80 81       	ld	r24, Z
    ffc6:	08 2e       	mov	r0, r24
    ffc8:	00 0c       	add	r0, r0
    ffca:	99 0b       	sbc	r25, r25
    ffcc:	02 c0       	rjmp	.+4      	; 0xffd2 <write+0xba>
    {
        errno = fatfs_to_errno(res);
    ffce:	83 e2       	ldi	r24, 0x23	; 35
    ffd0:	90 e0       	ldi	r25, 0x00	; 0
    ffd2:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
    ffd6:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
        return(-1);
    }
    return ((ssize_t) size);
    ffda:	05 c0       	rjmp	.+10     	; 0xffe6 <write+0xce>
    ffdc:	69 81       	ldd	r22, Y+1	; 0x01
    ffde:	7a 81       	ldd	r23, Y+2	; 0x02
    ffe0:	80 e0       	ldi	r24, 0x00	; 0
        }
        return(size);
    }
    if(stream == stdin)
    {
        return(-1);
    ffe2:	90 e0       	ldi	r25, 0x00	; 0
    ffe4:	03 c0       	rjmp	.+6      	; 0xffec <write+0xd4>
    ffe6:	6f ef       	ldi	r22, 0xFF	; 255
    {
        errno = fatfs_to_errno(res);
        return(-1);
    }
    return ((ssize_t) size);
}
    ffe8:	7f ef       	ldi	r23, 0xFF	; 255
    ffea:	cb 01       	movw	r24, r22
    ffec:	22 96       	adiw	r28, 0x02	; 2
    ffee:	ec e0       	ldi	r30, 0x0C	; 12
    fff0:	0c 94 e3 e8 	jmp	0x1d1c6	; 0x1d1c6 <__epilogue_restores__+0xc>

0000fff4 <fwrite>:
///
/// @return count written on sucess.
/// @return 0 or < size on error with errno set.
MEMSPACE
size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)
{
    fff4:	0f 93       	push	r16
    fff6:	1f 93       	push	r17
    fff8:	cf 93       	push	r28
    fffa:	df 93       	push	r29
    fffc:	ec 01       	movw	r28, r24
    fffe:	c9 01       	movw	r24, r18
    size_t count = size * nmemb;
   10000:	64 9f       	mul	r22, r20
   10002:	80 01       	movw	r16, r0
   10004:	65 9f       	mul	r22, r21
   10006:	10 0d       	add	r17, r0
   10008:	74 9f       	mul	r23, r20
   1000a:	10 0d       	add	r17, r0
    int fn = fileno(stream);
   1000c:	11 24       	eor	r1, r1
    ssize_t ret;
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);
   1000e:	3d d9       	rcall	.-3462   	; 0xf28a <fileno>
   10010:	a8 01       	movw	r20, r16
   10012:	be 01       	movw	r22, r28

    if(ret < 0)
   10014:	81 df       	rcall	.-254    	; 0xff18 <write>
   10016:	97 fd       	sbrc	r25, 7
        return(0);

    return((size_t) ret);
   10018:	02 c0       	rjmp	.+4      	; 0x1001e <__EEPROM_REGION_LENGTH__+0x1e>
   1001a:	cb 01       	movw	r24, r22
    
    // write () checks for fn out of bounds
    ret =  write(fn, ptr, count);

    if(ret < 0)
        return(0);
   1001c:	02 c0       	rjmp	.+4      	; 0x10022 <__EEPROM_REGION_LENGTH__+0x22>
   1001e:	80 e0       	ldi	r24, 0x00	; 0

    return((size_t) ret);
}
   10020:	90 e0       	ldi	r25, 0x00	; 0
   10022:	df 91       	pop	r29
   10024:	cf 91       	pop	r28
   10026:	1f 91       	pop	r17
   10028:	0f 91       	pop	r16
   1002a:	08 95       	ret

0001002c <free_file_descriptor>:
///
/// @return fileno on success.
/// @return -1 on failure.
MEMSPACE
int free_file_descriptor(int fileno)
{
   1002c:	0f 93       	push	r16
   1002e:	1f 93       	push	r17
   10030:	cf 93       	push	r28
   10032:	df 93       	push	r29
/// @return 0 if POSIX fileno is NOT a Serial TTY.
MEMSPACE
int isatty(int fileno)
{
/// @todo  Perhaps we should verify console functions have been added ?
    if(fileno >= 0 && fileno <= 2)
   10034:	83 30       	cpi	r24, 0x03	; 3
   10036:	91 05       	cpc	r25, r1
   10038:	48 f4       	brcc	.+18     	; 0x1004c <free_file_descriptor+0x20>
    FILE *stream;
    FIL *fh;

    if(isatty( fileno ))
    {
        errno = EBADF;
   1003a:	89 e0       	ldi	r24, 0x09	; 9
   1003c:	90 e0       	ldi	r25, 0x00	; 0
   1003e:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
   10042:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
        return(-1);
   10046:	8f ef       	ldi	r24, 0xFF	; 255
   10048:	9f ef       	ldi	r25, 0xFF	; 255
   1004a:	20 c0       	rjmp	.+64     	; 0x1008c <free_file_descriptor+0x60>
    }

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
   1004c:	ec 01       	movw	r28, r24
   1004e:	39 d9       	rcall	.-3470   	; 0xf2c2 <fileno_to_stream>
    if(stream == NULL)
   10050:	8c 01       	movw	r16, r24
   10052:	89 2b       	or	r24, r25
    {
        return(-1);
    }

    fh = fdev_get_udata(stream);
   10054:	c1 f3       	breq	.-16     	; 0x10046 <free_file_descriptor+0x1a>
   10056:	f8 01       	movw	r30, r16
   10058:	84 85       	ldd	r24, Z+12	; 0x0c

    if(fh != NULL)
   1005a:	95 85       	ldd	r25, Z+13	; 0x0d
   1005c:	00 97       	sbiw	r24, 0x00	; 0
    {
        safefree(fh);
   1005e:	11 f0       	breq	.+4      	; 0x10064 <free_file_descriptor+0x38>
   10060:	0e 94 c7 29 	call	0x538e	; 0x538e <safefree>
    }

    if(stream->buf != NULL && stream->flags & __SMALLOC)
   10064:	f8 01       	movw	r30, r16
   10066:	80 81       	ld	r24, Z
   10068:	91 81       	ldd	r25, Z+1	; 0x01
   1006a:	00 97       	sbiw	r24, 0x00	; 0
   1006c:	21 f0       	breq	.+8      	; 0x10076 <free_file_descriptor+0x4a>
   1006e:	23 81       	ldd	r18, Z+3	; 0x03
    {
        safefree(stream->buf);
   10070:	27 fd       	sbrc	r18, 7
   10072:	0e 94 c7 29 	call	0x538e	; 0x538e <safefree>
    }

    __iob[fileno]  = NULL;
   10076:	fe 01       	movw	r30, r28
   10078:	ee 0f       	add	r30, r30
   1007a:	ff 1f       	adc	r31, r31
   1007c:	e0 59       	subi	r30, 0x90	; 144
   1007e:	f3 4e       	sbci	r31, 0xE3	; 227
   10080:	11 82       	std	Z+1, r1	; 0x01
    safefree(stream);
   10082:	10 82       	st	Z, r1
   10084:	c8 01       	movw	r24, r16
   10086:	0e 94 c7 29 	call	0x538e	; 0x538e <safefree>
    return(fileno);
}
   1008a:	ce 01       	movw	r24, r28
   1008c:	df 91       	pop	r29
   1008e:	cf 91       	pop	r28
   10090:	1f 91       	pop	r17
   10092:	0f 91       	pop	r16
   10094:	08 95       	ret

00010096 <close>:
///
/// @return 0 on sucess.
/// @return -1 on error with errno set.
MEMSPACE
int close(int fileno)
{
   10096:	0f 93       	push	r16
   10098:	1f 93       	push	r17
   1009a:	cf 93       	push	r28
   1009c:	df 93       	push	r29
   1009e:	8c 01       	movw	r16, r24
    FILE *stream;
    FIL *fh;
    int res;

    errno = 0;
   100a0:	10 92 6f 1c 	sts	0x1C6F, r1	; 0x801c6f <errno+0x1>
   100a4:	10 92 6e 1c 	sts	0x1C6E, r1	; 0x801c6e <errno>

    // checks if fileno out of bounds
    stream = fileno_to_stream(fileno);
    if(stream == NULL)
   100a8:	0c d9       	rcall	.-3560   	; 0xf2c2 <fileno_to_stream>
   100aa:	89 2b       	or	r24, r25
    {
        return(-1);
    }

    // fileno_to_fatfs checks for fileno out of bounds
    fh = fileno_to_fatfs(fileno);
   100ac:	d9 f0       	breq	.+54     	; 0x100e4 <close+0x4e>
   100ae:	c8 01       	movw	r24, r16
    if(fh == NULL)
   100b0:	a4 dd       	rcall	.-1208   	; 0xfbfa <fileno_to_fatfs>
   100b2:	00 97       	sbiw	r24, 0x00	; 0
    {
        return(-1);
    }
    res = f_close(fh);
   100b4:	b9 f0       	breq	.+46     	; 0x100e4 <close+0x4e>
   100b6:	0e 94 08 5c 	call	0xb810	; 0xb810 <f_close>
    free_file_descriptor(fileno);
   100ba:	ec 01       	movw	r28, r24
    if (res != FR_OK)
   100bc:	c8 01       	movw	r24, r16
   100be:	b6 df       	rcall	.-148    	; 0x1002c <free_file_descriptor>
   100c0:	20 97       	sbiw	r28, 0x00	; 0
   100c2:	99 f0       	breq	.+38     	; 0x100ea <close+0x54>
   100c4:	c4 31       	cpi	r28, 0x14	; 20
   100c6:	d1 05       	cpc	r29, r1
   100c8:	38 f4       	brcc	.+14     	; 0x100d8 <close+0x42>
   100ca:	c1 51       	subi	r28, 0x11	; 17
   100cc:	d9 4f       	sbci	r29, 0xF9	; 249
   100ce:	88 81       	ld	r24, Y
   100d0:	08 2e       	mov	r0, r24
   100d2:	00 0c       	add	r0, r0
   100d4:	99 0b       	sbc	r25, r25
   100d6:	02 c0       	rjmp	.+4      	; 0x100dc <close+0x46>
    {
        errno = fatfs_to_errno(res);
   100d8:	83 e2       	ldi	r24, 0x23	; 35
   100da:	90 e0       	ldi	r25, 0x00	; 0
   100dc:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
        return(-1);
   100e0:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
   100e4:	8f ef       	ldi	r24, 0xFF	; 255
    }
    return(0);
   100e6:	9f ef       	ldi	r25, 0xFF	; 255
   100e8:	02 c0       	rjmp	.+4      	; 0x100ee <close+0x58>
}
   100ea:	80 e0       	ldi	r24, 0x00	; 0
   100ec:	90 e0       	ldi	r25, 0x00	; 0
   100ee:	df 91       	pop	r29
   100f0:	cf 91       	pop	r28
   100f2:	1f 91       	pop	r17
   100f4:	0f 91       	pop	r16
   100f6:	08 95       	ret

000100f8 <fclose>:
   100f8:	c8 d8       	rcall	.-3696   	; 0xf28a <fileno>
   100fa:	97 fd       	sbrc	r25, 7
   100fc:	02 c0       	rjmp	.+4      	; 0x10102 <fclose+0xa>
   100fe:	cb cf       	rjmp	.-106    	; 0x10096 <close>
   10100:	08 95       	ret
   10102:	8f ef       	ldi	r24, 0xFF	; 255
   10104:	9f ef       	ldi	r25, 0xFF	; 255
   10106:	08 95       	ret

00010108 <new_file_descriptor>:
   10108:	0f 93       	push	r16
   1010a:	1f 93       	push	r17
   1010c:	cf 93       	push	r28
   1010e:	df 93       	push	r29
   10110:	e0 e7       	ldi	r30, 0x70	; 112
   10112:	fc e1       	ldi	r31, 0x1C	; 28
   10114:	c0 e0       	ldi	r28, 0x00	; 0
   10116:	d0 e0       	ldi	r29, 0x00	; 0
   10118:	21 96       	adiw	r28, 0x01	; 1
   1011a:	c0 31       	cpi	r28, 0x10	; 16
   1011c:	d1 05       	cpc	r29, r1
   1011e:	49 f0       	breq	.+18     	; 0x10132 <new_file_descriptor+0x2a>
   10120:	c3 30       	cpi	r28, 0x03	; 3
   10122:	d1 05       	cpc	r29, r1
   10124:	24 f0       	brlt	.+8      	; 0x1012e <new_file_descriptor+0x26>
   10126:	82 81       	ldd	r24, Z+2	; 0x02
   10128:	93 81       	ldd	r25, Z+3	; 0x03
   1012a:	89 2b       	or	r24, r25
   1012c:	59 f0       	breq	.+22     	; 0x10144 <new_file_descriptor+0x3c>
   1012e:	32 96       	adiw	r30, 0x02	; 2
   10130:	f3 cf       	rjmp	.-26     	; 0x10118 <new_file_descriptor+0x10>
   10132:	87 e1       	ldi	r24, 0x17	; 23
   10134:	90 e0       	ldi	r25, 0x00	; 0
   10136:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
   1013a:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
   1013e:	8f ef       	ldi	r24, 0xFF	; 255
   10140:	9f ef       	ldi	r25, 0xFF	; 255
   10142:	22 c0       	rjmp	.+68     	; 0x10188 <new_file_descriptor+0x80>
   10144:	61 e0       	ldi	r22, 0x01	; 1
   10146:	70 e0       	ldi	r23, 0x00	; 0
   10148:	8e e0       	ldi	r24, 0x0E	; 14
   1014a:	90 e0       	ldi	r25, 0x00	; 0
   1014c:	0e 94 7e 29 	call	0x52fc	; 0x52fc <safecalloc>
   10150:	8c 01       	movw	r16, r24
   10152:	89 2b       	or	r24, r25
   10154:	59 f0       	breq	.+22     	; 0x1016c <new_file_descriptor+0x64>
   10156:	61 e0       	ldi	r22, 0x01	; 1
   10158:	70 e0       	ldi	r23, 0x00	; 0
   1015a:	84 e2       	ldi	r24, 0x24	; 36
   1015c:	92 e0       	ldi	r25, 0x02	; 2
   1015e:	0e 94 7e 29 	call	0x52fc	; 0x52fc <safecalloc>
   10162:	00 97       	sbiw	r24, 0x00	; 0
   10164:	31 f4       	brne	.+12     	; 0x10172 <new_file_descriptor+0x6a>
   10166:	c8 01       	movw	r24, r16
   10168:	0e 94 c7 29 	call	0x538e	; 0x538e <safefree>
   1016c:	8c e0       	ldi	r24, 0x0C	; 12
   1016e:	90 e0       	ldi	r25, 0x00	; 0
   10170:	e2 cf       	rjmp	.-60     	; 0x10136 <new_file_descriptor+0x2e>
   10172:	fe 01       	movw	r30, r28
   10174:	ee 0f       	add	r30, r30
   10176:	ff 1f       	adc	r31, r31
   10178:	e0 59       	subi	r30, 0x90	; 144
   1017a:	f3 4e       	sbci	r31, 0xE3	; 227
   1017c:	11 83       	std	Z+1, r17	; 0x01
   1017e:	00 83       	st	Z, r16
   10180:	f8 01       	movw	r30, r16
   10182:	95 87       	std	Z+13, r25	; 0x0d
   10184:	84 87       	std	Z+12, r24	; 0x0c
   10186:	ce 01       	movw	r24, r28
   10188:	df 91       	pop	r29
   1018a:	cf 91       	pop	r28
   1018c:	1f 91       	pop	r17
   1018e:	0f 91       	pop	r16
   10190:	08 95       	ret

00010192 <open>:
   10192:	a0 e0       	ldi	r26, 0x00	; 0
   10194:	b0 e0       	ldi	r27, 0x00	; 0
   10196:	ef ec       	ldi	r30, 0xCF	; 207
   10198:	f0 e8       	ldi	r31, 0x80	; 128
   1019a:	0c 94 c5 e8 	jmp	0x1d18a	; 0x1d18a <__prologue_saves__+0x8>
   1019e:	5c 01       	movw	r10, r24
   101a0:	6b 01       	movw	r12, r22
   101a2:	10 92 6f 1c 	sts	0x1C6F, r1	; 0x801c6f <errno+0x1>
   101a6:	10 92 6e 1c 	sts	0x1C6E, r1	; 0x801c6e <errno>
   101aa:	7b 01       	movw	r14, r22
   101ac:	83 e0       	ldi	r24, 0x03	; 3
   101ae:	e8 22       	and	r14, r24
   101b0:	ff 24       	eor	r15, r15
   101b2:	e2 e0       	ldi	r30, 0x02	; 2
   101b4:	ee 16       	cp	r14, r30
   101b6:	f1 04       	cpc	r15, r1
   101b8:	31 f0       	breq	.+12     	; 0x101c6 <open+0x34>
   101ba:	e1 14       	cp	r14, r1
   101bc:	f1 04       	cpc	r15, r1
   101be:	31 f0       	breq	.+12     	; 0x101cc <open+0x3a>
   101c0:	02 e0       	ldi	r16, 0x02	; 2
   101c2:	10 e0       	ldi	r17, 0x00	; 0
   101c4:	05 c0       	rjmp	.+10     	; 0x101d0 <open+0x3e>
   101c6:	03 e0       	ldi	r16, 0x03	; 3
   101c8:	10 e0       	ldi	r17, 0x00	; 0
   101ca:	02 c0       	rjmp	.+4      	; 0x101d0 <open+0x3e>
   101cc:	01 e0       	ldi	r16, 0x01	; 1
   101ce:	10 e0       	ldi	r17, 0x00	; 0
   101d0:	c6 fe       	sbrs	r12, 6
   101d2:	05 c0       	rjmp	.+10     	; 0x101de <open+0x4c>
   101d4:	d1 fe       	sbrs	r13, 1
   101d6:	02 c0       	rjmp	.+4      	; 0x101dc <open+0x4a>
   101d8:	08 60       	ori	r16, 0x08	; 8
   101da:	01 c0       	rjmp	.+2      	; 0x101de <open+0x4c>
   101dc:	00 61       	ori	r16, 0x10	; 16
   101de:	94 df       	rcall	.-216    	; 0x10108 <new_file_descriptor>
   101e0:	3c 01       	movw	r6, r24
   101e2:	6f d8       	rcall	.-3874   	; 0xf2c2 <fileno_to_stream>
   101e4:	ec 01       	movw	r28, r24
   101e6:	c3 01       	movw	r24, r6
   101e8:	20 97       	sbiw	r28, 0x00	; 0
   101ea:	09 f4       	brne	.+2      	; 0x101ee <open+0x5c>
   101ec:	48 c0       	rjmp	.+144    	; 0x1027e <open+0xec>
   101ee:	05 dd       	rcall	.-1526   	; 0xfbfa <fileno_to_fatfs>
   101f0:	4c 01       	movw	r8, r24
   101f2:	00 97       	sbiw	r24, 0x00	; 0
   101f4:	59 f4       	brne	.+22     	; 0x1020c <open+0x7a>
   101f6:	c3 01       	movw	r24, r6
   101f8:	19 df       	rcall	.-462    	; 0x1002c <free_file_descriptor>
   101fa:	89 e0       	ldi	r24, 0x09	; 9
   101fc:	90 e0       	ldi	r25, 0x00	; 0
   101fe:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
   10202:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
   10206:	8f ef       	ldi	r24, 0xFF	; 255
   10208:	9f ef       	ldi	r25, 0xFF	; 255
   1020a:	5d c0       	rjmp	.+186    	; 0x102c6 <open+0x134>
   1020c:	40 2f       	mov	r20, r16
   1020e:	b5 01       	movw	r22, r10
   10210:	0e 94 aa 56 	call	0xad54	; 0xad54 <f_open>
   10214:	00 97       	sbiw	r24, 0x00	; 0
   10216:	91 f0       	breq	.+36     	; 0x1023c <open+0xaa>
   10218:	84 31       	cpi	r24, 0x14	; 20
   1021a:	91 05       	cpc	r25, r1
   1021c:	40 f4       	brcc	.+16     	; 0x1022e <open+0x9c>
   1021e:	fc 01       	movw	r30, r24
   10220:	e1 51       	subi	r30, 0x11	; 17
   10222:	f9 4f       	sbci	r31, 0xF9	; 249
   10224:	80 81       	ld	r24, Z
   10226:	08 2e       	mov	r0, r24
   10228:	00 0c       	add	r0, r0
   1022a:	99 0b       	sbc	r25, r25
   1022c:	02 c0       	rjmp	.+4      	; 0x10232 <open+0xa0>
   1022e:	83 e2       	ldi	r24, 0x23	; 35
   10230:	90 e0       	ldi	r25, 0x00	; 0
   10232:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
   10236:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
   1023a:	20 c0       	rjmp	.+64     	; 0x1027c <open+0xea>
   1023c:	d2 fe       	sbrs	r13, 2
   1023e:	21 c0       	rjmp	.+66     	; 0x10282 <open+0xf0>
   10240:	f4 01       	movw	r30, r8
   10242:	42 85       	ldd	r20, Z+10	; 0x0a
   10244:	53 85       	ldd	r21, Z+11	; 0x0b
   10246:	64 85       	ldd	r22, Z+12	; 0x0c
   10248:	75 85       	ldd	r23, Z+13	; 0x0d
   1024a:	c4 01       	movw	r24, r8
   1024c:	0e 94 b0 5d 	call	0xbb60	; 0xbb60 <f_lseek>
   10250:	00 97       	sbiw	r24, 0x00	; 0
   10252:	b9 f0       	breq	.+46     	; 0x10282 <open+0xf0>
   10254:	84 31       	cpi	r24, 0x14	; 20
   10256:	91 05       	cpc	r25, r1
   10258:	40 f4       	brcc	.+16     	; 0x1026a <open+0xd8>
   1025a:	fc 01       	movw	r30, r24
   1025c:	e1 51       	subi	r30, 0x11	; 17
   1025e:	f9 4f       	sbci	r31, 0xF9	; 249
   10260:	80 81       	ld	r24, Z
   10262:	08 2e       	mov	r0, r24
   10264:	00 0c       	add	r0, r0
   10266:	99 0b       	sbc	r25, r25
   10268:	02 c0       	rjmp	.+4      	; 0x1026e <open+0xdc>
   1026a:	83 e2       	ldi	r24, 0x23	; 35
   1026c:	90 e0       	ldi	r25, 0x00	; 0
   1026e:	90 93 6f 1c 	sts	0x1C6F, r25	; 0x801c6f <errno+0x1>
   10272:	80 93 6e 1c 	sts	0x1C6E, r24	; 0x801c6e <errno>
   10276:	c4 01       	movw	r24, r8
   10278:	0e 94 08 5c 	call	0xb810	; 0xb810 <f_close>
   1027c:	c3 01       	movw	r24, r6
   1027e:	d6 de       	rcall	.-596    	; 0x1002c <free_file_descriptor>
   10280:	c2 cf       	rjmp	.-124    	; 0x10206 <open+0x74>
   10282:	f2 e0       	ldi	r31, 0x02	; 2
   10284:	ef 16       	cp	r14, r31
   10286:	f1 04       	cpc	r15, r1
   10288:	51 f4       	brne	.+20     	; 0x1029e <open+0x10c>
   1028a:	80 ee       	ldi	r24, 0xE0	; 224
   1028c:	97 e7       	ldi	r25, 0x77	; 119
   1028e:	99 87       	std	Y+9, r25	; 0x09
   10290:	88 87       	std	Y+8, r24	; 0x08
   10292:	8d e5       	ldi	r24, 0x5D	; 93
   10294:	97 e7       	ldi	r25, 0x77	; 119
   10296:	9b 87       	std	Y+11, r25	; 0x0b
   10298:	8a 87       	std	Y+10, r24	; 0x0a
   1029a:	83 e0       	ldi	r24, 0x03	; 3
   1029c:	12 c0       	rjmp	.+36     	; 0x102c2 <open+0x130>
   1029e:	e1 14       	cp	r14, r1
   102a0:	f1 04       	cpc	r15, r1
   102a2:	41 f4       	brne	.+16     	; 0x102b4 <open+0x122>
   102a4:	19 86       	std	Y+9, r1	; 0x09
   102a6:	18 86       	std	Y+8, r1	; 0x08
   102a8:	8d e5       	ldi	r24, 0x5D	; 93
   102aa:	97 e7       	ldi	r25, 0x77	; 119
   102ac:	9b 87       	std	Y+11, r25	; 0x0b
   102ae:	8a 87       	std	Y+10, r24	; 0x0a
   102b0:	81 e0       	ldi	r24, 0x01	; 1
   102b2:	07 c0       	rjmp	.+14     	; 0x102c2 <open+0x130>
   102b4:	80 ee       	ldi	r24, 0xE0	; 224
   102b6:	97 e7       	ldi	r25, 0x77	; 119
   102b8:	99 87       	std	Y+9, r25	; 0x09
   102ba:	88 87       	std	Y+8, r24	; 0x08
   102bc:	1b 86       	std	Y+11, r1	; 0x0b
   102be:	1a 86       	std	Y+10, r1	; 0x0a
   102c0:	82 e0       	ldi	r24, 0x02	; 2
   102c2:	8b 83       	std	Y+3, r24	; 0x03
   102c4:	c3 01       	movw	r24, r6
   102c6:	cd b7       	in	r28, 0x3d	; 61
   102c8:	de b7       	in	r29, 0x3e	; 62
   102ca:	ee e0       	ldi	r30, 0x0E	; 14
   102cc:	0c 94 e1 e8 	jmp	0x1d1c2	; 0x1d1c2 <__epilogue_restores__+0x8>

000102d0 <posix_fopen_modes_to_open>:
   102d0:	cf 93       	push	r28
   102d2:	df 93       	push	r29
   102d4:	ec 01       	movw	r28, r24
   102d6:	66 e1       	ldi	r22, 0x16	; 22
   102d8:	77 e0       	ldi	r23, 0x07	; 7
   102da:	0e 94 81 30 	call	0x6102	; 0x6102 <strcmp>
   102de:	00 97       	sbiw	r24, 0x00	; 0
   102e0:	09 f4       	brne	.+2      	; 0x102e4 <posix_fopen_modes_to_open+0x14>
   102e2:	5d c0       	rjmp	.+186    	; 0x1039e <posix_fopen_modes_to_open+0xce>
   102e4:	6b e5       	ldi	r22, 0x5B	; 91
   102e6:	78 e0       	ldi	r23, 0x08	; 8
   102e8:	ce 01       	movw	r24, r28
   102ea:	0e 94 81 30 	call	0x6102	; 0x6102 <strcmp>
   102ee:	00 97       	sbiw	r24, 0x00	; 0
   102f0:	09 f4       	brne	.+2      	; 0x102f4 <posix_fopen_modes_to_open+0x24>
   102f2:	55 c0       	rjmp	.+170    	; 0x1039e <posix_fopen_modes_to_open+0xce>
   102f4:	6e e5       	ldi	r22, 0x5E	; 94
   102f6:	78 e0       	ldi	r23, 0x08	; 8
   102f8:	ce 01       	movw	r24, r28
   102fa:	0e 94 81 30 	call	0x6102	; 0x6102 <strcmp>
   102fe:	89 2b       	or	r24, r25
   10300:	09 f4       	brne	.+2      	; 0x10304 <posix_fopen_modes_to_open+0x34>
   10302:	42 c0       	rjmp	.+132    	; 0x10388 <posix_fopen_modes_to_open+0xb8>
   10304:	61 e6       	ldi	r22, 0x61	; 97
   10306:	78 e0       	ldi	r23, 0x08	; 8
   10308:	ce 01       	movw	r24, r28
   1030a:	0e 94 81 30 	call	0x6102	; 0x6102 <strcmp>
   1030e:	89 2b       	or	r24, r25
   10310:	d9 f1       	breq	.+118    	; 0x10388 <posix_fopen_modes_to_open+0xb8>
   10312:	65 e6       	ldi	r22, 0x65	; 101
   10314:	78 e0       	ldi	r23, 0x08	; 8
   10316:	ce 01       	movw	r24, r28
   10318:	0e 94 81 30 	call	0x6102	; 0x6102 <strcmp>
   1031c:	89 2b       	or	r24, r25
   1031e:	a1 f1       	breq	.+104    	; 0x10388 <posix_fopen_modes_to_open+0xb8>
   10320:	6a e1       	ldi	r22, 0x1A	; 26
   10322:	7a e0       	ldi	r23, 0x0A	; 10
   10324:	ce 01       	movw	r24, r28
   10326:	0e 94 81 30 	call	0x6102	; 0x6102 <strcmp>
   1032a:	89 2b       	or	r24, r25
   1032c:	81 f1       	breq	.+96     	; 0x1038e <posix_fopen_modes_to_open+0xbe>
   1032e:	69 e6       	ldi	r22, 0x69	; 105
   10330:	78 e0       	ldi	r23, 0x08	; 8
   10332:	ce 01       	movw	r24, r28
   10334:	0e 94 81 30 	call	0x6102	; 0x6102 <strcmp>
   10338:	89 2b       	or	r24, r25
   1033a:	49 f1       	breq	.+82     	; 0x1038e <posix_fopen_modes_to_open+0xbe>
   1033c:	6c e6       	ldi	r22, 0x6C	; 108
   1033e:	78 e0       	ldi	r23, 0x08	; 8
   10340:	ce 01       	movw	r24, r28
   10342:	0e 94 81 30 	call	0x6102	; 0x6102 <strcmp>
   10346:	89 2b       	or	r24, r25
   10348:	29 f1       	breq	.+74     	; 0x10394 <posix_fopen_modes_to_open+0xc4>
   1034a:	6f e6       	ldi	r22, 0x6F	; 111
   1034c:	78 e0       	ldi	r23, 0x08	; 8
   1034e:	ce 01       	movw	r24, r28
   10350:	0e 94 81 30 	call	0x6102	; 0x6102 <strcmp>
   10354:	89 2b       	or	r24, r25
   10356:	f1 f0       	breq	.+60     	; 0x10394 <posix_fopen_modes_to_open+0xc4>
   10358:	63 e7       	ldi	r22, 0x73	; 115
   1035a:	78 e0       	ldi	r23, 0x08	; 8
   1035c:	ce 01       	movw	r24, r28
   1035e:	0e 94 81 30 	call	0x6102	; 0x6102 <strcmp>
   10362:	89 2b       	or	r24, r25
   10364:	b9 f0       	breq	.+46     	; 0x10394 <posix_fopen_modes_to_open+0xc4>
   10366:	67 e7       	ldi	r22, 0x77	; 119
   10368:	70 e1       	ldi	r23, 0x10	; 16
   1036a:	ce 01       	movw	r24, r28
   1036c:	0e 94 81 30 	call	0x6102	; 0x6102 <strcmp>
   10370:	89 2b       	or	r24, r25
   10372:	99 f0       	breq	.+38     	; 0x1039a <posix_fopen_modes_to_open+0xca>
   10374:	67 e7       	ldi	r22, 0x77	; 119
   10376:	78 e0       	ldi	r23, 0x08	; 8
   10378:	ce 01       	movw	r24, r28
   1037a:	0e 94 81 30 	call	0x6102	; 0x6102 <strcmp>
   1037e:	89 2b       	or	r24, r25
   10380:	61 f0       	breq	.+24     	; 0x1039a <posix_fopen_modes_to_open+0xca>
   10382:	8f ef       	ldi	r24, 0xFF	; 255
   10384:	9f ef       	ldi	r25, 0xFF	; 255
   10386:	0b c0       	rjmp	.+22     	; 0x1039e <posix_fopen_modes_to_open+0xce>
   10388:	82 e0       	ldi	r24, 0x02	; 2
   1038a:	92 e0       	ldi	r25, 0x02	; 2
   1038c:	08 c0       	rjmp	.+16     	; 0x1039e <posix_fopen_modes_to_open+0xce>
   1038e:	81 e4       	ldi	r24, 0x41	; 65
   10390:	92 e0       	ldi	r25, 0x02	; 2
   10392:	05 c0       	rjmp	.+10     	; 0x1039e <posix_fopen_modes_to_open+0xce>
   10394:	82 e4       	ldi	r24, 0x42	; 66
   10396:	92 e0       	ldi	r25, 0x02	; 2
   10398:	02 c0       	rjmp	.+4      	; 0x1039e <posix_fopen_modes_to_open+0xce>
   1039a:	81 e4       	ldi	r24, 0x41	; 65
   1039c:	94 e0       	ldi	r25, 0x04	; 4
   1039e:	df 91       	pop	r29
   103a0:	cf 91       	pop	r28
   103a2:	08 95       	ret

000103a4 <fopen>:
   103a4:	cf 93       	push	r28
   103a6:	df 93       	push	r29
   103a8:	ec 01       	movw	r28, r24
   103aa:	cb 01       	movw	r24, r22
   103ac:	91 df       	rcall	.-222    	; 0x102d0 <posix_fopen_modes_to_open>
   103ae:	bc 01       	movw	r22, r24
   103b0:	ce 01       	movw	r24, r28
   103b2:	ef de       	rcall	.-546    	; 0x10192 <open>
   103b4:	0e 94 61 79 	call	0xf2c2	; 0xf2c2 <fileno_to_stream>
   103b8:	df 91       	pop	r29
   103ba:	cf 91       	pop	r28
   103bc:	08 95       	ret

000103be <fprintf>:
   103be:	a8 e0       	ldi	r26, 0x08	; 8
   103c0:	b0 e0       	ldi	r27, 0x00	; 0
   103c2:	e5 ee       	ldi	r30, 0xE5	; 229
   103c4:	f1 e8       	ldi	r31, 0x81	; 129
   103c6:	0c 94 d1 e8 	jmp	0x1d1a2	; 0x1d1a2 <__prologue_saves__+0x20>
   103ca:	89 ec       	ldi	r24, 0xC9	; 201
   103cc:	98 e7       	ldi	r25, 0x78	; 120
   103ce:	9a 83       	std	Y+2, r25	; 0x02
   103d0:	89 83       	std	Y+1, r24	; 0x01
   103d2:	18 86       	std	Y+8, r1	; 0x08
   103d4:	1f 82       	std	Y+7, r1	; 0x07
   103d6:	8d 85       	ldd	r24, Y+13	; 0x0d
   103d8:	9e 85       	ldd	r25, Y+14	; 0x0e
   103da:	9c 83       	std	Y+4, r25	; 0x04
   103dc:	8b 83       	std	Y+3, r24	; 0x03
   103de:	4f 85       	ldd	r20, Y+15	; 0x0f
   103e0:	58 89       	ldd	r21, Y+16	; 0x10
   103e2:	60 e8       	ldi	r22, 0x80	; 128
   103e4:	9e 01       	movw	r18, r28
   103e6:	2f 5e       	subi	r18, 0xEF	; 239
   103e8:	3f 4f       	sbci	r19, 0xFF	; 255
   103ea:	ce 01       	movw	r24, r28
   103ec:	01 96       	adiw	r24, 0x01	; 1
   103ee:	0e 94 5a 40 	call	0x80b4	; 0x80b4 <_printf_fn>
   103f2:	8f 81       	ldd	r24, Y+7	; 0x07
   103f4:	98 85       	ldd	r25, Y+8	; 0x08
   103f6:	28 96       	adiw	r28, 0x08	; 8
   103f8:	e2 e0       	ldi	r30, 0x02	; 2
   103fa:	0c 94 ed e8 	jmp	0x1d1da	; 0x1d1da <__epilogue_restores__+0x20>

000103fe <posix_help>:
   103fe:	cf 93       	push	r28
   10400:	df 93       	push	r29
   10402:	ec 01       	movw	r28, r24
   10404:	8f e8       	ldi	r24, 0x8F	; 143
   10406:	9f e0       	ldi	r25, 0x0F	; 15
   10408:	1f 92       	push	r1
   1040a:	9f 93       	push	r25
   1040c:	8f 93       	push	r24
   1040e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   10412:	0f 90       	pop	r0
   10414:	0f 90       	pop	r0
   10416:	0f 90       	pop	r0
   10418:	cd 2b       	or	r28, r29
   1041a:	51 f0       	breq	.+20     	; 0x10430 <posix_help+0x32>
   1041c:	88 e5       	ldi	r24, 0x58	; 88
   1041e:	9e e0       	ldi	r25, 0x0E	; 14
   10420:	1f 92       	push	r1
   10422:	9f 93       	push	r25
   10424:	8f 93       	push	r24
   10426:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1042a:	0f 90       	pop	r0
   1042c:	0f 90       	pop	r0
   1042e:	0f 90       	pop	r0
   10430:	df 91       	pop	r29
   10432:	cf 91       	pop	r28
   10434:	08 95       	ret

00010436 <copy>:
   10436:	4f 92       	push	r4
   10438:	5f 92       	push	r5
   1043a:	6f 92       	push	r6
   1043c:	8f 92       	push	r8
   1043e:	9f 92       	push	r9
   10440:	af 92       	push	r10
   10442:	bf 92       	push	r11
   10444:	cf 92       	push	r12
   10446:	df 92       	push	r13
   10448:	ef 92       	push	r14
   1044a:	ff 92       	push	r15
   1044c:	0f 93       	push	r16
   1044e:	1f 93       	push	r17
   10450:	cf 93       	push	r28
   10452:	df 93       	push	r29
   10454:	18 2f       	mov	r17, r24
   10456:	09 2f       	mov	r16, r25
   10458:	eb 01       	movw	r28, r22
   1045a:	9f 93       	push	r25
   1045c:	8f 93       	push	r24
   1045e:	8b e2       	ldi	r24, 0x2B	; 43
   10460:	9e e0       	ldi	r25, 0x0E	; 14
   10462:	1f 92       	push	r1
   10464:	9f 93       	push	r25
   10466:	8f 93       	push	r24
   10468:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1046c:	6b e5       	ldi	r22, 0x5B	; 91
   1046e:	78 e0       	ldi	r23, 0x08	; 8
   10470:	81 2f       	mov	r24, r17
   10472:	90 2f       	mov	r25, r16
   10474:	97 df       	rcall	.-210    	; 0x103a4 <fopen>
   10476:	7c 01       	movw	r14, r24
   10478:	0f 90       	pop	r0
   1047a:	0f 90       	pop	r0
   1047c:	0f 90       	pop	r0
   1047e:	0f 90       	pop	r0
   10480:	0f 90       	pop	r0
   10482:	89 2b       	or	r24, r25
   10484:	51 f4       	brne	.+20     	; 0x1049a <copy+0x64>
   10486:	0f 93       	push	r16
   10488:	1f 93       	push	r17
   1048a:	8b e1       	ldi	r24, 0x1B	; 27
   1048c:	9e e0       	ldi	r25, 0x0E	; 14
   1048e:	1f 92       	push	r1
   10490:	9f 93       	push	r25
   10492:	8f 93       	push	r24
   10494:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   10498:	21 c0       	rjmp	.+66     	; 0x104dc <copy+0xa6>
   1049a:	df 93       	push	r29
   1049c:	cf 93       	push	r28
   1049e:	8e e0       	ldi	r24, 0x0E	; 14
   104a0:	9e e0       	ldi	r25, 0x0E	; 14
   104a2:	1f 92       	push	r1
   104a4:	9f 93       	push	r25
   104a6:	8f 93       	push	r24
   104a8:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   104ac:	69 e6       	ldi	r22, 0x69	; 105
   104ae:	78 e0       	ldi	r23, 0x08	; 8
   104b0:	ce 01       	movw	r24, r28
   104b2:	78 df       	rcall	.-272    	; 0x103a4 <fopen>
   104b4:	8c 01       	movw	r16, r24
   104b6:	0f 90       	pop	r0
   104b8:	0f 90       	pop	r0
   104ba:	0f 90       	pop	r0
   104bc:	0f 90       	pop	r0
   104be:	0f 90       	pop	r0
   104c0:	89 2b       	or	r24, r25
   104c2:	b1 f4       	brne	.+44     	; 0x104f0 <copy+0xba>
   104c4:	df 93       	push	r29
   104c6:	cf 93       	push	r28
   104c8:	8e ef       	ldi	r24, 0xFE	; 254
   104ca:	9d e0       	ldi	r25, 0x0D	; 13
   104cc:	1f 92       	push	r1
   104ce:	9f 93       	push	r25
   104d0:	8f 93       	push	r24
   104d2:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   104d6:	80 e0       	ldi	r24, 0x00	; 0
   104d8:	90 e0       	ldi	r25, 0x00	; 0
   104da:	0e de       	rcall	.-996    	; 0x100f8 <fclose>
   104dc:	0f 90       	pop	r0
   104de:	0f 90       	pop	r0
   104e0:	0f 90       	pop	r0
   104e2:	0f 90       	pop	r0
   104e4:	0f 90       	pop	r0
   104e6:	60 e0       	ldi	r22, 0x00	; 0
   104e8:	70 e0       	ldi	r23, 0x00	; 0
   104ea:	80 e0       	ldi	r24, 0x00	; 0
   104ec:	90 e0       	ldi	r25, 0x00	; 0
   104ee:	73 c0       	rjmp	.+230    	; 0x105d6 <copy+0x1a0>
   104f0:	61 e0       	ldi	r22, 0x01	; 1
   104f2:	70 e0       	ldi	r23, 0x00	; 0
   104f4:	80 e0       	ldi	r24, 0x00	; 0
   104f6:	92 e0       	ldi	r25, 0x02	; 2
   104f8:	0e 94 7e 29 	call	0x52fc	; 0x52fc <safecalloc>
   104fc:	6c 01       	movw	r12, r24
   104fe:	89 2b       	or	r24, r25
   10500:	29 f4       	brne	.+10     	; 0x1050c <copy+0xd6>
   10502:	c7 01       	movw	r24, r14
   10504:	f9 dd       	rcall	.-1038   	; 0x100f8 <fclose>
   10506:	c8 01       	movw	r24, r16
   10508:	f7 dd       	rcall	.-1042   	; 0x100f8 <fclose>
   1050a:	ed cf       	rjmp	.-38     	; 0x104e6 <copy+0xb0>
   1050c:	81 ef       	ldi	r24, 0xF1	; 241
   1050e:	9d e0       	ldi	r25, 0x0D	; 13
   10510:	1f 92       	push	r1
   10512:	9f 93       	push	r25
   10514:	8f 93       	push	r24
   10516:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1051a:	0f 90       	pop	r0
   1051c:	0f 90       	pop	r0
   1051e:	0f 90       	pop	r0
   10520:	81 2c       	mov	r8, r1
   10522:	91 2c       	mov	r9, r1
   10524:	54 01       	movw	r10, r8
   10526:	85 ed       	ldi	r24, 0xD5	; 213
   10528:	9d e0       	ldi	r25, 0x0D	; 13
   1052a:	2c 01       	movw	r4, r24
   1052c:	97 01       	movw	r18, r14
   1052e:	40 e0       	ldi	r20, 0x00	; 0
   10530:	52 e0       	ldi	r21, 0x02	; 2
   10532:	61 e0       	ldi	r22, 0x01	; 1
   10534:	70 e0       	ldi	r23, 0x00	; 0
   10536:	c6 01       	movw	r24, r12
   10538:	8b dc       	rcall	.-1770   	; 0xfe50 <fread>
   1053a:	ec 01       	movw	r28, r24
   1053c:	18 16       	cp	r1, r24
   1053e:	19 06       	cpc	r1, r25
   10540:	74 f5       	brge	.+92     	; 0x1059e <copy+0x168>
   10542:	98 01       	movw	r18, r16
   10544:	ae 01       	movw	r20, r28
   10546:	61 e0       	ldi	r22, 0x01	; 1
   10548:	70 e0       	ldi	r23, 0x00	; 0
   1054a:	c6 01       	movw	r24, r12
   1054c:	53 dd       	rcall	.-1370   	; 0xfff4 <fwrite>
   1054e:	8c 17       	cp	r24, r28
   10550:	9d 07       	cpc	r25, r29
   10552:	5c f4       	brge	.+22     	; 0x1056a <copy+0x134>
   10554:	84 ee       	ldi	r24, 0xE4	; 228
   10556:	9d e0       	ldi	r25, 0x0D	; 13
   10558:	1f 92       	push	r1
   1055a:	9f 93       	push	r25
   1055c:	8f 93       	push	r24
   1055e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   10562:	0f 90       	pop	r0
   10564:	0f 90       	pop	r0
   10566:	0f 90       	pop	r0
   10568:	1a c0       	rjmp	.+52     	; 0x1059e <copy+0x168>
   1056a:	ce 01       	movw	r24, r28
   1056c:	dd 0f       	add	r29, r29
   1056e:	aa 0b       	sbc	r26, r26
   10570:	bb 0b       	sbc	r27, r27
   10572:	88 0e       	add	r8, r24
   10574:	99 1e       	adc	r9, r25
   10576:	aa 1e       	adc	r10, r26
   10578:	bb 1e       	adc	r11, r27
   1057a:	bf 92       	push	r11
   1057c:	af 92       	push	r10
   1057e:	9f 92       	push	r9
   10580:	8f 92       	push	r8
   10582:	1f 92       	push	r1
   10584:	5f 92       	push	r5
   10586:	4f 92       	push	r4
   10588:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1058c:	8d b7       	in	r24, 0x3d	; 61
   1058e:	9e b7       	in	r25, 0x3e	; 62
   10590:	07 96       	adiw	r24, 0x07	; 7
   10592:	0f b6       	in	r0, 0x3f	; 63
   10594:	f8 94       	cli
   10596:	9e bf       	out	0x3e, r25	; 62
   10598:	0f be       	out	0x3f, r0	; 63
   1059a:	8d bf       	out	0x3d, r24	; 61
   1059c:	c7 cf       	rjmp	.-114    	; 0x1052c <copy+0xf6>
   1059e:	bf 92       	push	r11
   105a0:	af 92       	push	r10
   105a2:	9f 92       	push	r9
   105a4:	8f 92       	push	r8
   105a6:	82 ec       	ldi	r24, 0xC2	; 194
   105a8:	9d e0       	ldi	r25, 0x0D	; 13
   105aa:	1f 92       	push	r1
   105ac:	9f 93       	push	r25
   105ae:	8f 93       	push	r24
   105b0:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   105b4:	c6 01       	movw	r24, r12
   105b6:	0e 94 c7 29 	call	0x538e	; 0x538e <safefree>
   105ba:	c7 01       	movw	r24, r14
   105bc:	9d dd       	rcall	.-1222   	; 0x100f8 <fclose>
   105be:	c8 01       	movw	r24, r16
   105c0:	9b dd       	rcall	.-1226   	; 0x100f8 <fclose>
   105c2:	8d b7       	in	r24, 0x3d	; 61
   105c4:	9e b7       	in	r25, 0x3e	; 62
   105c6:	07 96       	adiw	r24, 0x07	; 7
   105c8:	0f b6       	in	r0, 0x3f	; 63
   105ca:	f8 94       	cli
   105cc:	9e bf       	out	0x3e, r25	; 62
   105ce:	0f be       	out	0x3f, r0	; 63
   105d0:	8d bf       	out	0x3d, r24	; 61
   105d2:	b4 01       	movw	r22, r8
   105d4:	c5 01       	movw	r24, r10
   105d6:	df 91       	pop	r29
   105d8:	cf 91       	pop	r28
   105da:	1f 91       	pop	r17
   105dc:	0f 91       	pop	r16
   105de:	ff 90       	pop	r15
   105e0:	ef 90       	pop	r14
   105e2:	df 90       	pop	r13
   105e4:	cf 90       	pop	r12
   105e6:	bf 90       	pop	r11
   105e8:	af 90       	pop	r10
   105ea:	9f 90       	pop	r9
   105ec:	8f 90       	pop	r8
   105ee:	6f 90       	pop	r6
   105f0:	5f 90       	pop	r5
   105f2:	4f 90       	pop	r4
   105f4:	08 95       	ret

000105f6 <testpage>:
   105f6:	cf 93       	push	r28
   105f8:	df 93       	push	r29
   105fa:	20 91 7a 01 	lds	r18, 0x017A	; 0x80017a <_pagesize>
   105fe:	30 91 7b 01 	lds	r19, 0x017B	; 0x80017b <_pagesize+0x1>
   10602:	82 17       	cp	r24, r18
   10604:	93 07       	cpc	r25, r19
   10606:	3c f1       	brlt	.+78     	; 0x10656 <testpage+0x60>
   10608:	81 e9       	ldi	r24, 0x91	; 145
   1060a:	9d e0       	ldi	r25, 0x0D	; 13
   1060c:	1f 92       	push	r1
   1060e:	9f 93       	push	r25
   10610:	8f 93       	push	r24
   10612:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   10616:	0e 94 d6 78 	call	0xf1ac	; 0xf1ac <getchar>
   1061a:	ec 01       	movw	r28, r24
   1061c:	8f e8       	ldi	r24, 0x8F	; 143
   1061e:	9d e0       	ldi	r25, 0x0D	; 13
   10620:	1f 92       	push	r1
   10622:	9f 93       	push	r25
   10624:	8f 93       	push	r24
   10626:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1062a:	0f 90       	pop	r0
   1062c:	0f 90       	pop	r0
   1062e:	0f 90       	pop	r0
   10630:	0f 90       	pop	r0
   10632:	0f 90       	pop	r0
   10634:	0f 90       	pop	r0
   10636:	c1 37       	cpi	r28, 0x71	; 113
   10638:	d1 05       	cpc	r29, r1
   1063a:	41 f0       	breq	.+16     	; 0x1064c <testpage+0x56>
   1063c:	2a 97       	sbiw	r28, 0x0a	; 10
   1063e:	49 f4       	brne	.+18     	; 0x10652 <testpage+0x5c>
   10640:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <_pagesize>
   10644:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <_pagesize+0x1>
   10648:	01 97       	sbiw	r24, 0x01	; 1
   1064a:	05 c0       	rjmp	.+10     	; 0x10656 <testpage+0x60>
   1064c:	8f ef       	ldi	r24, 0xFF	; 255
   1064e:	9f ef       	ldi	r25, 0xFF	; 255
   10650:	02 c0       	rjmp	.+4      	; 0x10656 <testpage+0x60>
   10652:	80 e0       	ldi	r24, 0x00	; 0
   10654:	90 e0       	ldi	r25, 0x00	; 0
   10656:	df 91       	pop	r29
   10658:	cf 91       	pop	r28
   1065a:	08 95       	ret

0001065c <cat>:
/// @param[in] name: file name.
/// @param[in] option: --p page display
/// @return  void.
MEMSPACE
long cat(char *name, int dopage)
{
   1065c:	a0 e0       	ldi	r26, 0x00	; 0
   1065e:	b1 e0       	ldi	r27, 0x01	; 1
   10660:	e4 e3       	ldi	r30, 0x34	; 52
   10662:	f3 e8       	ldi	r31, 0x83	; 131
   10664:	0c 94 c7 e8 	jmp	0x1d18e	; 0x1d18e <__prologue_saves__+0xc>
   10668:	18 2f       	mov	r17, r24
   1066a:	09 2f       	mov	r16, r25
   1066c:	4b 01       	movw	r8, r22
    FILE *fp;
    int count = 0;
    int size = 0;
    char line[256];

    fp = fopen(name,"rb");
   1066e:	6b e5       	ldi	r22, 0x5B	; 91
   10670:	78 e0       	ldi	r23, 0x08	; 8
   10672:	98 de       	rcall	.-720    	; 0x103a4 <fopen>
   10674:	7c 01       	movw	r14, r24
    if (!fp)
   10676:	89 2b       	or	r24, r25
   10678:	41 f0       	breq	.+16     	; 0x1068a <cat+0x2e>
   1067a:	c1 2c       	mov	r12, r1
   1067c:	d1 2c       	mov	r13, r1
   1067e:	a1 2c       	mov	r10, r1
   10680:	b1 2c       	mov	r11, r1
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   10682:	8e 01       	movw	r16, r28
   10684:	0f 5f       	subi	r16, 0xFF	; 255
   10686:	1f 4f       	sbci	r17, 0xFF	; 255
   10688:	24 c0       	rjmp	.+72     	; 0x106d2 <cat+0x76>
    char line[256];

    fp = fopen(name,"rb");
    if (!fp)
    {
        printf("Can't open: %s\n", name);
   1068a:	0f 93       	push	r16
   1068c:	1f 93       	push	r17
   1068e:	84 e4       	ldi	r24, 0x44	; 68
   10690:	9e e0       	ldi	r25, 0x0E	; 14
   10692:	1f 92       	push	r1
   10694:	9f 93       	push	r25
   10696:	8f 93       	push	r24
   10698:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        return(0);
   1069c:	0f 90       	pop	r0
   1069e:	0f 90       	pop	r0
   106a0:	0f 90       	pop	r0
   106a2:	0f 90       	pop	r0
   106a4:	0f 90       	pop	r0
   106a6:	c1 2c       	mov	r12, r1
   106a8:	d1 2c       	mov	r13, r1
   106aa:	76 01       	movw	r14, r12
   106ac:	3e c0       	rjmp	.+124    	; 0x1072a <cat+0xce>
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
    {
        trim_tail(line);
   106ae:	c8 01       	movw	r24, r16
   106b0:	0e 94 69 30 	call	0x60d2	; 0x60d2 <trim_tail>
        size += strlen(line);
   106b4:	f8 01       	movw	r30, r16
   106b6:	01 90       	ld	r0, Z+
   106b8:	00 20       	and	r0, r0
   106ba:	e9 f7       	brne	.-6      	; 0x106b6 <cat+0x5a>
   106bc:	31 97       	sbiw	r30, 0x01	; 1
   106be:	e0 1b       	sub	r30, r16
   106c0:	f1 0b       	sbc	r31, r17
   106c2:	ce 0e       	add	r12, r30
   106c4:	df 1e       	adc	r13, r31
        puts(line);
   106c6:	c8 01       	movw	r24, r16
   106c8:	0e 94 2e 79 	call	0xf25c	; 0xf25c <puts>
        if(dopage)
   106cc:	81 14       	cp	r8, r1
   106ce:	91 04       	cpc	r9, r1
   106d0:	49 f4       	brne	.+18     	; 0x106e4 <cat+0x88>
    if (!fp)
    {
        printf("Can't open: %s\n", name);
        return(0);
    }
    while(fgets(line,sizeof(line)-2,fp) != NULL)
   106d2:	a7 01       	movw	r20, r14
   106d4:	6e ef       	ldi	r22, 0xFE	; 254
   106d6:	70 e0       	ldi	r23, 0x00	; 0
   106d8:	c8 01       	movw	r24, r16
   106da:	0e 94 e2 78 	call	0xf1c4	; 0xf1c4 <fgets>
   106de:	89 2b       	or	r24, r25
   106e0:	31 f7       	brne	.-52     	; 0x106ae <cat+0x52>
   106e2:	06 c0       	rjmp	.+12     	; 0x106f0 <cat+0x94>
        trim_tail(line);
        size += strlen(line);
        puts(line);
        if(dopage)
        {
            count = testpage(++count);
   106e4:	c5 01       	movw	r24, r10
   106e6:	01 96       	adiw	r24, 0x01	; 1
   106e8:	86 df       	rcall	.-244    	; 0x105f6 <testpage>
   106ea:	5c 01       	movw	r10, r24
            if(count < 0)
   106ec:	97 ff       	sbrs	r25, 7
   106ee:	f1 cf       	rjmp	.-30     	; 0x106d2 <cat+0x76>
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
   106f0:	82 e4       	ldi	r24, 0x42	; 66
   106f2:	9e e0       	ldi	r25, 0x0E	; 14
   106f4:	1f 92       	push	r1
   106f6:	9f 93       	push	r25
   106f8:	8f 93       	push	r24
   106fa:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    fclose(fp);
   106fe:	c7 01       	movw	r24, r14
   10700:	fb dc       	rcall	.-1546   	; 0x100f8 <fclose>
    printf("%ld bytes\n", (long)size);
   10702:	0d 2c       	mov	r0, r13
   10704:	00 0c       	add	r0, r0
   10706:	ee 08       	sbc	r14, r14
   10708:	ff 08       	sbc	r15, r15
   1070a:	ff 92       	push	r15
   1070c:	ef 92       	push	r14
   1070e:	df 92       	push	r13
   10710:	cf 92       	push	r12
   10712:	87 e3       	ldi	r24, 0x37	; 55
   10714:	9e e0       	ldi	r25, 0x0E	; 14
   10716:	1f 92       	push	r1
   10718:	9f 93       	push	r25
   1071a:	8f 93       	push	r24
   1071c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    return(size);
   10720:	0f b6       	in	r0, 0x3f	; 63
   10722:	f8 94       	cli
   10724:	de bf       	out	0x3e, r29	; 62
   10726:	0f be       	out	0x3f, r0	; 63
   10728:	cd bf       	out	0x3d, r28	; 61
}
   1072a:	c7 01       	movw	r24, r14
   1072c:	b6 01       	movw	r22, r12
   1072e:	d3 95       	inc	r29
   10730:	ec e0       	ldi	r30, 0x0C	; 12
   10732:	0c 94 e3 e8 	jmp	0x1d1c6	; 0x1d1c6 <__epilogue_restores__+0xc>

00010736 <hexdump>:
/// @brief hex listing of file with paging, "q" exits
/// @param[in] *name: file to hexdump
/// @retrun void
MEMSPACE
int hexdump(char *name, int dopage)
{
   10736:	2f 92       	push	r2
   10738:	3f 92       	push	r3
   1073a:	4f 92       	push	r4
   1073c:	5f 92       	push	r5
   1073e:	6f 92       	push	r6
   10740:	7f 92       	push	r7
   10742:	8f 92       	push	r8
   10744:	af 92       	push	r10
   10746:	bf 92       	push	r11
   10748:	cf 92       	push	r12
   1074a:	df 92       	push	r13
   1074c:	ef 92       	push	r14
   1074e:	ff 92       	push	r15
   10750:	0f 93       	push	r16
   10752:	1f 93       	push	r17
   10754:	cf 93       	push	r28
   10756:	df 93       	push	r29
   10758:	cd b7       	in	r28, 0x3d	; 61
   1075a:	de b7       	in	r29, 0x3e	; 62
   1075c:	e0 97       	sbiw	r28, 0x30	; 48
   1075e:	0f b6       	in	r0, 0x3f	; 63
   10760:	f8 94       	cli
   10762:	de bf       	out	0x3e, r29	; 62
   10764:	0f be       	out	0x3f, r0	; 63
   10766:	cd bf       	out	0x3d, r28	; 61
   10768:	18 2f       	mov	r17, r24
   1076a:	09 2f       	mov	r16, r25
   1076c:	78 ab       	std	Y+48, r23	; 0x30
   1076e:	6f a7       	std	Y+47, r22	; 0x2f
    int i,len,count;

    FILE *fi;
    char buf[0x20];

    fi=fopen(name,"rb");
   10770:	6b e5       	ldi	r22, 0x5B	; 91
   10772:	78 e0       	ldi	r23, 0x08	; 8
   10774:	17 de       	rcall	.-978    	; 0x103a4 <fopen>
   10776:	9a a3       	std	Y+34, r25	; 0x22
   10778:	89 a3       	std	Y+33, r24	; 0x21
    if(fi == NULL) 
   1077a:	89 2b       	or	r24, r25
   1077c:	49 f1       	breq	.+82     	; 0x107d0 <hexdump+0x9a>
   1077e:	21 2c       	mov	r2, r1
   10780:	31 2c       	mov	r3, r1
   10782:	c1 2c       	mov	r12, r1
   10784:	d1 2c       	mov	r13, r1
   10786:	76 01       	movw	r14, r12
        return(0);
    }

    count = 0;
    addr = 0;
    while( (len = fread(buf,1, 16, fi)) > 0) 
   10788:	9e 01       	movw	r18, r28
   1078a:	2f 5f       	subi	r18, 0xFF	; 255
   1078c:	3f 4f       	sbci	r19, 0xFF	; 255
   1078e:	29 01       	movw	r4, r18
    {
        printf("%08lx : ", addr);
   10790:	8a ea       	ldi	r24, 0xAA	; 170
   10792:	9d e0       	ldi	r25, 0x0D	; 13
   10794:	9c 01       	movw	r18, r24
   10796:	40 e0       	ldi	r20, 0x00	; 0
   10798:	2b a3       	std	Y+35, r18	; 0x23
   1079a:	3c a3       	std	Y+36, r19	; 0x24
   1079c:	4d a3       	std	Y+37, r20	; 0x25

        for(i=0;i<len;++i) 
            printf("%02x ",0xff & buf[i]);
   1079e:	84 ea       	ldi	r24, 0xA4	; 164
   107a0:	9d e0       	ldi	r25, 0x0D	; 13
   107a2:	9c 01       	movw	r18, r24
   107a4:	40 e0       	ldi	r20, 0x00	; 0
   107a6:	2e a3       	std	Y+38, r18	; 0x26
   107a8:	3f a3       	std	Y+39, r19	; 0x27
   107aa:	48 a7       	std	Y+40, r20	; 0x28
        for(;i<16;++i) 
            printf("   ");
   107ac:	80 ea       	ldi	r24, 0xA0	; 160
   107ae:	9d e0       	ldi	r25, 0x0D	; 13
   107b0:	9c 01       	movw	r18, r24
   107b2:	40 e0       	ldi	r20, 0x00	; 0
   107b4:	29 a7       	std	Y+41, r18	; 0x29
   107b6:	3a a7       	std	Y+42, r19	; 0x2a
   107b8:	4b a7       	std	Y+43, r20	; 0x2b

        printf(" : ");
   107ba:	8c e9       	ldi	r24, 0x9C	; 156
   107bc:	9d e0       	ldi	r25, 0x0D	; 13
   107be:	9c 01       	movw	r18, r24
   107c0:	40 e0       	ldi	r20, 0x00	; 0
   107c2:	2c a7       	std	Y+44, r18	; 0x2c
   107c4:	3d a7       	std	Y+45, r19	; 0x2d
   107c6:	4e a7       	std	Y+46, r20	; 0x2e
                putchar('.');
        }
        for(;i<16;++i) 
            putchar('.');

        printf("\n");
   107c8:	8a e9       	ldi	r24, 0x9A	; 154
   107ca:	9d e0       	ldi	r25, 0x0D	; 13
   107cc:	3c 01       	movw	r6, r24
   107ce:	26 c0       	rjmp	.+76     	; 0x1081c <hexdump+0xe6>
    char buf[0x20];

    fi=fopen(name,"rb");
    if(fi == NULL) 
    {
        printf("Can' open: %s\n", name);
   107d0:	0f 93       	push	r16
   107d2:	1f 93       	push	r17
   107d4:	83 eb       	ldi	r24, 0xB3	; 179
   107d6:	9d e0       	ldi	r25, 0x0D	; 13
   107d8:	1f 92       	push	r1
   107da:	9f 93       	push	r25
   107dc:	8f 93       	push	r24
   107de:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        return(0);
   107e2:	0f 90       	pop	r0
   107e4:	0f 90       	pop	r0
   107e6:	0f 90       	pop	r0
   107e8:	0f 90       	pop	r0
   107ea:	0f 90       	pop	r0
   107ec:	80 e0       	ldi	r24, 0x00	; 0
   107ee:	90 e0       	ldi	r25, 0x00	; 0
   107f0:	9e c0       	rjmp	.+316    	; 0x1092e <hexdump+0x1f8>
                putchar('.');
        }
        for(;i<16;++i) 
            putchar('.');

        printf("\n");
   107f2:	1f 92       	push	r1
   107f4:	7f 92       	push	r7
   107f6:	6f 92       	push	r6
   107f8:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        addr += len;
   107fc:	01 2e       	mov	r0, r17
   107fe:	00 0c       	add	r0, r0
   10800:	22 0b       	sbc	r18, r18
   10802:	33 0b       	sbc	r19, r19
   10804:	c0 0e       	add	r12, r16
   10806:	d1 1e       	adc	r13, r17
   10808:	e2 1e       	adc	r14, r18
   1080a:	f3 1e       	adc	r15, r19
        if(dopage)
   1080c:	0f 90       	pop	r0
   1080e:	0f 90       	pop	r0
   10810:	0f 90       	pop	r0
   10812:	8f a5       	ldd	r24, Y+47	; 0x2f
   10814:	98 a9       	ldd	r25, Y+48	; 0x30
   10816:	89 2b       	or	r24, r25
   10818:	09 f0       	breq	.+2      	; 0x1081c <hexdump+0xe6>
   1081a:	74 c0       	rjmp	.+232    	; 0x10904 <hexdump+0x1ce>
        return(0);
    }

    count = 0;
    addr = 0;
    while( (len = fread(buf,1, 16, fi)) > 0) 
   1081c:	29 a1       	ldd	r18, Y+33	; 0x21
   1081e:	3a a1       	ldd	r19, Y+34	; 0x22
   10820:	40 e1       	ldi	r20, 0x10	; 16
   10822:	50 e0       	ldi	r21, 0x00	; 0
   10824:	61 e0       	ldi	r22, 0x01	; 1
   10826:	70 e0       	ldi	r23, 0x00	; 0
   10828:	c2 01       	movw	r24, r4
   1082a:	12 db       	rcall	.-2524   	; 0xfe50 <fread>
   1082c:	8c 01       	movw	r16, r24
   1082e:	18 16       	cp	r1, r24
   10830:	19 06       	cpc	r1, r25
   10832:	0c f0       	brlt	.+2      	; 0x10836 <hexdump+0x100>
   10834:	6d c0       	rjmp	.+218    	; 0x10910 <hexdump+0x1da>
    {
        printf("%08lx : ", addr);
   10836:	ff 92       	push	r15
   10838:	ef 92       	push	r14
   1083a:	df 92       	push	r13
   1083c:	cf 92       	push	r12
   1083e:	1f 92       	push	r1
   10840:	3c a1       	ldd	r19, Y+36	; 0x24
   10842:	3f 93       	push	r19
   10844:	4b a1       	ldd	r20, Y+35	; 0x23
   10846:	4f 93       	push	r20
   10848:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1084c:	0f b6       	in	r0, 0x3f	; 63
   1084e:	f8 94       	cli
   10850:	de bf       	out	0x3e, r29	; 62
   10852:	0f be       	out	0x3f, r0	; 63
   10854:	cd bf       	out	0x3d, r28	; 61
   10856:	52 01       	movw	r10, r4

        for(i=0;i<len;++i) 
            printf("%02x ",0xff & buf[i]);
   10858:	f5 01       	movw	r30, r10
   1085a:	81 91       	ld	r24, Z+
   1085c:	5f 01       	movw	r10, r30
   1085e:	1f 92       	push	r1
   10860:	8f 93       	push	r24
   10862:	1f 92       	push	r1
   10864:	ff a1       	ldd	r31, Y+39	; 0x27
   10866:	ff 93       	push	r31
   10868:	2e a1       	ldd	r18, Y+38	; 0x26
   1086a:	2f 93       	push	r18
   1086c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    addr = 0;
    while( (len = fread(buf,1, 16, fi)) > 0) 
    {
        printf("%08lx : ", addr);

        for(i=0;i<len;++i) 
   10870:	c5 01       	movw	r24, r10
   10872:	84 19       	sub	r24, r4
   10874:	95 09       	sbc	r25, r5
   10876:	0f 90       	pop	r0
   10878:	0f 90       	pop	r0
   1087a:	0f 90       	pop	r0
   1087c:	0f 90       	pop	r0
   1087e:	0f 90       	pop	r0
   10880:	80 17       	cp	r24, r16
   10882:	91 07       	cpc	r25, r17
   10884:	4c f3       	brlt	.-46     	; 0x10858 <hexdump+0x122>
   10886:	58 01       	movw	r10, r16
            printf("%02x ",0xff & buf[i]);
        for(;i<16;++i) 
   10888:	90 e1       	ldi	r25, 0x10	; 16
   1088a:	a9 16       	cp	r10, r25
   1088c:	b1 04       	cpc	r11, r1
   1088e:	74 f4       	brge	.+28     	; 0x108ac <hexdump+0x176>
            printf("   ");
   10890:	1f 92       	push	r1
   10892:	3a a5       	ldd	r19, Y+42	; 0x2a
   10894:	3f 93       	push	r19
   10896:	49 a5       	ldd	r20, Y+41	; 0x29
   10898:	4f 93       	push	r20
   1089a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    {
        printf("%08lx : ", addr);

        for(i=0;i<len;++i) 
            printf("%02x ",0xff & buf[i]);
        for(;i<16;++i) 
   1089e:	8f ef       	ldi	r24, 0xFF	; 255
   108a0:	a8 1a       	sub	r10, r24
   108a2:	b8 0a       	sbc	r11, r24
   108a4:	0f 90       	pop	r0
   108a6:	0f 90       	pop	r0
   108a8:	0f 90       	pop	r0
   108aa:	ee cf       	rjmp	.-36     	; 0x10888 <hexdump+0x152>
            printf("   ");

        printf(" : ");
   108ac:	1f 92       	push	r1
   108ae:	ed a5       	ldd	r30, Y+45	; 0x2d
   108b0:	ef 93       	push	r30
   108b2:	fc a5       	ldd	r31, Y+44	; 0x2c
   108b4:	ff 93       	push	r31
   108b6:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   108ba:	0f 90       	pop	r0
   108bc:	0f 90       	pop	r0
   108be:	0f 90       	pop	r0
   108c0:	52 01       	movw	r10, r4

        for(i=0;i<len;++i) 
        {
            if(buf[i] >= 0x20 && buf[i] <= 0x7e)
   108c2:	f5 01       	movw	r30, r10
   108c4:	81 91       	ld	r24, Z+
   108c6:	5f 01       	movw	r10, r30
   108c8:	90 ee       	ldi	r25, 0xE0	; 224
   108ca:	98 0f       	add	r25, r24
   108cc:	9f 35       	cpi	r25, 0x5F	; 95
   108ce:	10 f4       	brcc	.+4      	; 0x108d4 <hexdump+0x19e>
                putchar(buf[i]);
   108d0:	90 e0       	ldi	r25, 0x00	; 0
   108d2:	02 c0       	rjmp	.+4      	; 0x108d8 <hexdump+0x1a2>
            else
                putchar('.');
   108d4:	8e e2       	ldi	r24, 0x2E	; 46
   108d6:	90 e0       	ldi	r25, 0x00	; 0
   108d8:	0e 94 dc 78 	call	0xf1b8	; 0xf1b8 <putchar>
        for(;i<16;++i) 
            printf("   ");

        printf(" : ");

        for(i=0;i<len;++i) 
   108dc:	c5 01       	movw	r24, r10
   108de:	84 19       	sub	r24, r4
   108e0:	95 09       	sbc	r25, r5
   108e2:	80 17       	cp	r24, r16
   108e4:	91 07       	cpc	r25, r17
   108e6:	6c f3       	brlt	.-38     	; 0x108c2 <hexdump+0x18c>
   108e8:	58 01       	movw	r10, r16
            if(buf[i] >= 0x20 && buf[i] <= 0x7e)
                putchar(buf[i]);
            else
                putchar('.');
        }
        for(;i<16;++i) 
   108ea:	20 e1       	ldi	r18, 0x10	; 16
   108ec:	a2 16       	cp	r10, r18
   108ee:	b1 04       	cpc	r11, r1
   108f0:	0c f0       	brlt	.+2      	; 0x108f4 <hexdump+0x1be>
   108f2:	7f cf       	rjmp	.-258    	; 0x107f2 <hexdump+0xbc>
            putchar('.');
   108f4:	8e e2       	ldi	r24, 0x2E	; 46
   108f6:	90 e0       	ldi	r25, 0x00	; 0
   108f8:	0e 94 dc 78 	call	0xf1b8	; 0xf1b8 <putchar>
            if(buf[i] >= 0x20 && buf[i] <= 0x7e)
                putchar(buf[i]);
            else
                putchar('.');
        }
        for(;i<16;++i) 
   108fc:	ff ef       	ldi	r31, 0xFF	; 255
   108fe:	af 1a       	sub	r10, r31
   10900:	bf 0a       	sbc	r11, r31

        printf("\n");
        addr += len;
        if(dopage)
        {
            count = testpage(++count);
   10902:	f3 cf       	rjmp	.-26     	; 0x108ea <hexdump+0x1b4>
   10904:	c1 01       	movw	r24, r2
   10906:	01 96       	adiw	r24, 0x01	; 1
   10908:	76 de       	rcall	.-788    	; 0x105f6 <testpage>
            if(count < 0)
   1090a:	1c 01       	movw	r2, r24
   1090c:	97 ff       	sbrs	r25, 7
#ifdef ESP8266
        optimistic_yield(1000);
        wdt_reset();
#endif
    }
    printf("\n");
   1090e:	86 cf       	rjmp	.-244    	; 0x1081c <hexdump+0xe6>
   10910:	88 e9       	ldi	r24, 0x98	; 152
   10912:	9d e0       	ldi	r25, 0x0D	; 13
   10914:	1f 92       	push	r1
   10916:	9f 93       	push	r25
   10918:	8f 93       	push	r24
    fclose(fi);
   1091a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1091e:	89 a1       	ldd	r24, Y+33	; 0x21
   10920:	9a a1       	ldd	r25, Y+34	; 0x22
    return(1);
   10922:	ea db       	rcall	.-2092   	; 0x100f8 <fclose>
   10924:	0f 90       	pop	r0
   10926:	0f 90       	pop	r0
   10928:	0f 90       	pop	r0
   1092a:	81 e0       	ldi	r24, 0x01	; 1
}
   1092c:	90 e0       	ldi	r25, 0x00	; 0
   1092e:	e0 96       	adiw	r28, 0x30	; 48
   10930:	0f b6       	in	r0, 0x3f	; 63
   10932:	f8 94       	cli
   10934:	de bf       	out	0x3e, r29	; 62
   10936:	0f be       	out	0x3f, r0	; 63
   10938:	cd bf       	out	0x3d, r28	; 61
   1093a:	df 91       	pop	r29
   1093c:	cf 91       	pop	r28
   1093e:	1f 91       	pop	r17
   10940:	0f 91       	pop	r16
   10942:	ff 90       	pop	r15
   10944:	ef 90       	pop	r14
   10946:	df 90       	pop	r13
   10948:	cf 90       	pop	r12
   1094a:	bf 90       	pop	r11
   1094c:	af 90       	pop	r10
   1094e:	8f 90       	pop	r8
   10950:	7f 90       	pop	r7
   10952:	6f 90       	pop	r6
   10954:	5f 90       	pop	r5
   10956:	4f 90       	pop	r4
   10958:	3f 90       	pop	r3
   1095a:	2f 90       	pop	r2
   1095c:	08 95       	ret

0001095e <ls_info>:
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   1095e:	4f 92       	push	r4
   10960:	5f 92       	push	r5
   10962:	6f 92       	push	r6
   10964:	7f 92       	push	r7
   10966:	af 92       	push	r10
   10968:	bf 92       	push	r11
   1096a:	cf 92       	push	r12
   1096c:	df 92       	push	r13
   1096e:	ef 92       	push	r14
   10970:	ff 92       	push	r15
   10972:	0f 93       	push	r16
   10974:	1f 93       	push	r17
   10976:	cf 93       	push	r28
   10978:	df 93       	push	r29
   1097a:	cd b7       	in	r28, 0x3d	; 61
   1097c:	de b7       	in	r29, 0x3e	; 62
   1097e:	ec 97       	sbiw	r28, 0x3c	; 60
   10980:	0f b6       	in	r0, 0x3f	; 63
   10982:	f8 94       	cli
   10984:	de bf       	out	0x3e, r29	; 62
   10986:	0f be       	out	0x3f, r0	; 63
   10988:	cd bf       	out	0x3d, r28	; 61
   1098a:	8c 01       	movw	r16, r24
   1098c:	7b 01       	movw	r14, r22
    uint16_t mask;
    char *cm = "rwx";
    char attr[12], *p;


    if(stat(name, &sp) == -1) 
   1098e:	be 01       	movw	r22, r28
   10990:	6f 5f       	subi	r22, 0xFF	; 255
   10992:	7f 4f       	sbci	r23, 0xFF	; 255
   10994:	1b d8       	rcall	.-4042   	; 0xf9cc <stat>
   10996:	01 96       	adiw	r24, 0x01	; 1
   10998:	89 f4       	brne	.+34     	; 0x109bc <ls_info+0x5e>
    {
        printf("can not stat: %s\n", name);
   1099a:	1f 93       	push	r17
   1099c:	0f 93       	push	r16
   1099e:	8d e7       	ldi	r24, 0x7D	; 125
   109a0:	9d e0       	ldi	r25, 0x0D	; 13
   109a2:	1f 92       	push	r1
   109a4:	9f 93       	push	r25
   109a6:	8f 93       	push	r24
   109a8:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        return(0);
   109ac:	0f 90       	pop	r0
   109ae:	0f 90       	pop	r0
   109b0:	0f 90       	pop	r0
   109b2:	0f 90       	pop	r0
   109b4:	0f 90       	pop	r0
   109b6:	80 e0       	ldi	r24, 0x00	; 0
   109b8:	90 e0       	ldi	r25, 0x00	; 0
   109ba:	79 c0       	rjmp	.+242    	; 0x10aae <ls_info+0x150>
    }

    if(!verbose)
   109bc:	ef 28       	or	r14, r15
   109be:	91 f4       	brne	.+36     	; 0x109e4 <ls_info+0x86>
    {
        printf("%s\n",basename(name));
   109c0:	c8 01       	movw	r24, r16
   109c2:	0e 94 48 7a 	call	0xf490	; 0xf490 <basename>
   109c6:	9f 93       	push	r25
   109c8:	8f 93       	push	r24
   109ca:	89 e7       	ldi	r24, 0x79	; 121
   109cc:	9d e0       	ldi	r25, 0x0D	; 13
   109ce:	1f 92       	push	r1
   109d0:	9f 93       	push	r25
   109d2:	8f 93       	push	r24
   109d4:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        return(1);
   109d8:	0f 90       	pop	r0
   109da:	0f 90       	pop	r0
   109dc:	0f 90       	pop	r0
   109de:	0f 90       	pop	r0
   109e0:	0f 90       	pop	r0
   109e2:	63 c0       	rjmp	.+198    	; 0x10aaa <ls_info+0x14c>
    }

    p = attr;
    if(S_ISDIR(sp.st_mode))
   109e4:	49 84       	ldd	r4, Y+9	; 0x09
   109e6:	5a 84       	ldd	r5, Y+10	; 0x0a
   109e8:	6b 84       	ldd	r6, Y+11	; 0x0b
   109ea:	7c 84       	ldd	r7, Y+12	; 0x0c
   109ec:	d3 01       	movw	r26, r6
   109ee:	c2 01       	movw	r24, r4
   109f0:	88 27       	eor	r24, r24
   109f2:	90 7f       	andi	r25, 0xF0	; 240
   109f4:	aa 27       	eor	r26, r26
   109f6:	bb 27       	eor	r27, r27
   109f8:	81 15       	cp	r24, r1
   109fa:	90 44       	sbci	r25, 0x40	; 64
   109fc:	a1 05       	cpc	r26, r1
   109fe:	b1 05       	cpc	r27, r1
   10a00:	11 f4       	brne	.+4      	; 0x10a06 <ls_info+0xa8>
        *p++ = 'd';
   10a02:	84 e6       	ldi	r24, 0x64	; 100
   10a04:	01 c0       	rjmp	.+2      	; 0x10a08 <ls_info+0xaa>
    else
        *p++ = '-';
   10a06:	8d e2       	ldi	r24, 0x2D	; 45
   10a08:	89 ab       	std	Y+49, r24	; 0x31
   10a0a:	fe 01       	movw	r30, r28
   10a0c:	f1 96       	adiw	r30, 0x31	; 49
/// @param[in] path: file name or directory
/// @param[in] verbose: 1 = detail, 0 = name only
/// @return  1 on success 0 on fail
MEMSPACE
int ls_info(char *name, int verbose)
{
   10a0e:	e1 2c       	mov	r14, r1
   10a10:	ff 24       	eor	r15, r15
   10a12:	f3 94       	inc	r15
   10a14:	20 e0       	ldi	r18, 0x00	; 0
   10a16:	30 e0       	ldi	r19, 0x00	; 0
   10a18:	5f 01       	movw	r10, r30
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
   10a1a:	4d e2       	ldi	r20, 0x2D	; 45
    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
            *p++ = cm[ i % 3];
   10a1c:	53 e0       	ldi	r21, 0x03	; 3
   10a1e:	c5 2e       	mov	r12, r21
   10a20:	d1 2c       	mov	r13, r1

    mask = 4 << 6;
    for(i=0;i<9;++i)
    {
        // User
        if( sp.st_mode & mask)
   10a22:	c7 01       	movw	r24, r14
   10a24:	a0 e0       	ldi	r26, 0x00	; 0
   10a26:	b0 e0       	ldi	r27, 0x00	; 0
   10a28:	84 21       	and	r24, r4
   10a2a:	95 21       	and	r25, r5
   10a2c:	a6 21       	and	r26, r6
   10a2e:	b7 21       	and	r27, r7
   10a30:	89 2b       	or	r24, r25
   10a32:	8a 2b       	or	r24, r26
   10a34:	8b 2b       	or	r24, r27
   10a36:	51 f0       	breq	.+20     	; 0x10a4c <ls_info+0xee>
            *p++ = cm[ i % 3];
   10a38:	c9 01       	movw	r24, r18
   10a3a:	b6 01       	movw	r22, r12
   10a3c:	0e 94 41 e8 	call	0x1d082	; 0x1d082 <__divmodhi4>
   10a40:	dc 01       	movw	r26, r24
   10a42:	ad 5f       	subi	r26, 0xFD	; 253
   10a44:	b4 4f       	sbci	r27, 0xF4	; 244
   10a46:	8c 91       	ld	r24, X
   10a48:	81 83       	std	Z+1, r24	; 0x01
   10a4a:	01 c0       	rjmp	.+2      	; 0x10a4e <ls_info+0xf0>
        else
            *p++ = '-';
   10a4c:	41 83       	std	Z+1, r20	; 0x01
        mask >>= 1;
   10a4e:	f6 94       	lsr	r15
   10a50:	e7 94       	ror	r14
        *p++ = 'd';
    else
        *p++ = '-';

    mask = 4 << 6;
    for(i=0;i<9;++i)
   10a52:	2f 5f       	subi	r18, 0xFF	; 255
   10a54:	3f 4f       	sbci	r19, 0xFF	; 255
   10a56:	31 96       	adiw	r30, 0x01	; 1
   10a58:	29 30       	cpi	r18, 0x09	; 9
   10a5a:	31 05       	cpc	r19, r1
   10a5c:	11 f7       	brne	.-60     	; 0x10a22 <ls_info+0xc4>
            *p++ = cm[ i % 3];
        else
            *p++ = '-';
        mask >>= 1;
    }
    *p = 0;
   10a5e:	1b ae       	std	Y+59, r1	; 0x3b

    printf("%s none none %12ld %s %s\n",
   10a60:	c8 01       	movw	r24, r16
   10a62:	0e 94 48 7a 	call	0xf490	; 0xf490 <basename>
   10a66:	18 2f       	mov	r17, r24
   10a68:	09 2f       	mov	r16, r25
   10a6a:	69 a5       	ldd	r22, Y+41	; 0x29
   10a6c:	7a a5       	ldd	r23, Y+42	; 0x2a
   10a6e:	8b a5       	ldd	r24, Y+43	; 0x2b
   10a70:	9c a5       	ldd	r25, Y+44	; 0x2c
   10a72:	0e 94 76 79 	call	0xf2ec	; 0xf2ec <mctime>
   10a76:	0f 93       	push	r16
   10a78:	1f 93       	push	r17
   10a7a:	9f 93       	push	r25
   10a7c:	8f 93       	push	r24
   10a7e:	8c 8d       	ldd	r24, Y+28	; 0x1c
   10a80:	8f 93       	push	r24
   10a82:	8b 8d       	ldd	r24, Y+27	; 0x1b
   10a84:	8f 93       	push	r24
   10a86:	8a 8d       	ldd	r24, Y+26	; 0x1a
   10a88:	8f 93       	push	r24
   10a8a:	89 8d       	ldd	r24, Y+25	; 0x19
   10a8c:	8f 93       	push	r24
   10a8e:	bf 92       	push	r11
   10a90:	af 92       	push	r10
   10a92:	8f e5       	ldi	r24, 0x5F	; 95
   10a94:	9d e0       	ldi	r25, 0x0D	; 13
   10a96:	1f 92       	push	r1
   10a98:	9f 93       	push	r25
   10a9a:	8f 93       	push	r24
   10a9c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        attr, 
        (long) sp.st_size, 
        mctime((time_t)sp.st_mtime),
        basename(name));
    return(1);
   10aa0:	0f b6       	in	r0, 0x3f	; 63
   10aa2:	f8 94       	cli
   10aa4:	de bf       	out	0x3e, r29	; 62
   10aa6:	0f be       	out	0x3f, r0	; 63
   10aa8:	cd bf       	out	0x3d, r28	; 61
   10aaa:	81 e0       	ldi	r24, 0x01	; 1
   10aac:	90 e0       	ldi	r25, 0x00	; 0
}
   10aae:	ec 96       	adiw	r28, 0x3c	; 60
   10ab0:	0f b6       	in	r0, 0x3f	; 63
   10ab2:	f8 94       	cli
   10ab4:	de bf       	out	0x3e, r29	; 62
   10ab6:	0f be       	out	0x3f, r0	; 63
   10ab8:	cd bf       	out	0x3d, r28	; 61
   10aba:	df 91       	pop	r29
   10abc:	cf 91       	pop	r28
   10abe:	1f 91       	pop	r17
   10ac0:	0f 91       	pop	r16
   10ac2:	ff 90       	pop	r15
   10ac4:	ef 90       	pop	r14
   10ac6:	df 90       	pop	r13
   10ac8:	cf 90       	pop	r12
   10aca:	bf 90       	pop	r11
   10acc:	af 90       	pop	r10
   10ace:	7f 90       	pop	r7
   10ad0:	6f 90       	pop	r6
   10ad2:	5f 90       	pop	r5
   10ad4:	4f 90       	pop	r4
   10ad6:	08 95       	ret

00010ad8 <ls>:
/// @param[in] path: file name or directory
/// @param[in] option: -l for detail
/// @return  number of files
MEMSPACE
int ls(char *name, int verbose)
{
   10ad8:	2f 92       	push	r2
   10ada:	3f 92       	push	r3
   10adc:	4f 92       	push	r4
   10ade:	5f 92       	push	r5
   10ae0:	6f 92       	push	r6
   10ae2:	8f 92       	push	r8
   10ae4:	9f 92       	push	r9
   10ae6:	af 92       	push	r10
   10ae8:	bf 92       	push	r11
   10aea:	cf 92       	push	r12
   10aec:	df 92       	push	r13
   10aee:	ef 92       	push	r14
   10af0:	ff 92       	push	r15
   10af2:	0f 93       	push	r16
   10af4:	1f 93       	push	r17
   10af6:	cf 93       	push	r28
   10af8:	df 93       	push	r29
   10afa:	cd b7       	in	r28, 0x3d	; 61
   10afc:	de b7       	in	r29, 0x3e	; 62
   10afe:	c2 53       	subi	r28, 0x32	; 50
   10b00:	d1 40       	sbci	r29, 0x01	; 1
   10b02:	0f b6       	in	r0, 0x3f	; 63
   10b04:	f8 94       	cli
   10b06:	de bf       	out	0x3e, r29	; 62
   10b08:	0f be       	out	0x3f, r0	; 63
   10b0a:	cd bf       	out	0x3d, r28	; 61
   10b0c:	7c 01       	movw	r14, r24
   10b0e:	4b 01       	movw	r8, r22
    int files = 0;
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
   10b10:	19 82       	std	Y+1, r1	; 0x01
   10b12:	8e 01       	movw	r16, r28
   10b14:	0f 5f       	subi	r16, 0xFF	; 255
   10b16:	1f 4f       	sbci	r17, 0xFF	; 255
    if(!name || !*name || MATCH(name,".") )
   10b18:	00 97       	sbiw	r24, 0x00	; 0
   10b1a:	91 f4       	brne	.+36     	; 0x10b40 <ls+0x68>
    {
        if( !getcwd(fullpath, sizeof(fullpath)-2) )
   10b1c:	6e ef       	ldi	r22, 0xFE	; 254
   10b1e:	70 e0       	ldi	r23, 0x00	; 0
   10b20:	c8 01       	movw	r24, r16
   10b22:	0e 94 9e 7a 	call	0xf53c	; 0xf53c <getcwd>
   10b26:	89 2b       	or	r24, r25
   10b28:	d1 f4       	brne	.+52     	; 0x10b5e <ls+0x86>
        {
            printf("ls: Can't get current directory\n"); 
   10b2a:	8e e3       	ldi	r24, 0x3E	; 62
   10b2c:	9d e0       	ldi	r25, 0x0D	; 13
   10b2e:	1f 92       	push	r1
   10b30:	9f 93       	push	r25
   10b32:	8f 93       	push	r24
   10b34:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
            return(0); 
   10b38:	0f 90       	pop	r0
   10b3a:	0f 90       	pop	r0
   10b3c:	0f 90       	pop	r0
   10b3e:	3c c0       	rjmp	.+120    	; 0x10bb8 <ls+0xe0>
    int len,len2;
    dirent_t *de;
    char fullpath[MAX_NAME_LEN+1];

    fullpath[0] = 0;
    if(!name || !*name || MATCH(name,".") )
   10b40:	fc 01       	movw	r30, r24
   10b42:	80 81       	ld	r24, Z
   10b44:	88 23       	and	r24, r24
   10b46:	51 f3       	breq	.-44     	; 0x10b1c <ls+0x44>
   10b48:	66 e4       	ldi	r22, 0x46	; 70
   10b4a:	70 e1       	ldi	r23, 0x10	; 16
   10b4c:	c7 01       	movw	r24, r14
   10b4e:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <MATCH>
   10b52:	89 2b       	or	r24, r25
   10b54:	19 f7       	brne	.-58     	; 0x10b1c <ls+0x44>

        }
    }
    else
    {
        strcpy(fullpath,name);
   10b56:	b7 01       	movw	r22, r14
   10b58:	c8 01       	movw	r24, r16
   10b5a:	0e 94 0f 30 	call	0x601e	; 0x601e <strcpy>
    }
    len = strlen(fullpath);
   10b5e:	f8 01       	movw	r30, r16
   10b60:	01 90       	ld	r0, Z+
   10b62:	00 20       	and	r0, r0
   10b64:	e9 f7       	brne	.-6      	; 0x10b60 <ls+0x88>
   10b66:	31 97       	sbiw	r30, 0x01	; 1
   10b68:	1f 01       	movw	r2, r30
   10b6a:	20 1a       	sub	r2, r16
   10b6c:	31 0a       	sbc	r3, r17


    printf("Listing:[%s]\n",fullpath);
   10b6e:	1f 93       	push	r17
   10b70:	0f 93       	push	r16
   10b72:	80 e3       	ldi	r24, 0x30	; 48
   10b74:	9d e0       	ldi	r25, 0x0D	; 13
   10b76:	1f 92       	push	r1
   10b78:	9f 93       	push	r25
   10b7a:	8f 93       	push	r24
   10b7c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>

    if (stat(fullpath, &st)) 
   10b80:	be 01       	movw	r22, r28
   10b82:	6f 5f       	subi	r22, 0xFF	; 255
   10b84:	7e 4f       	sbci	r23, 0xFE	; 254
   10b86:	c8 01       	movw	r24, r16
   10b88:	0e 94 e6 7c 	call	0xf9cc	; 0xf9cc <stat>
   10b8c:	7c 01       	movw	r14, r24
   10b8e:	0f 90       	pop	r0
   10b90:	0f 90       	pop	r0
   10b92:	0f 90       	pop	r0
   10b94:	0f 90       	pop	r0
   10b96:	0f 90       	pop	r0
   10b98:	89 2b       	or	r24, r25
   10b9a:	89 f0       	breq	.+34     	; 0x10bbe <ls+0xe6>
    { 
        printf("ls: cannot stat [%s]\n", fullpath); 
   10b9c:	1f 93       	push	r17
   10b9e:	0f 93       	push	r16
   10ba0:	8a e1       	ldi	r24, 0x1A	; 26
   10ba2:	9d e0       	ldi	r25, 0x0D	; 13
   10ba4:	1f 92       	push	r1
   10ba6:	9f 93       	push	r25
   10ba8:	8f 93       	push	r24
   10baa:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        return(0); 
   10bae:	0f 90       	pop	r0
   10bb0:	0f 90       	pop	r0
   10bb2:	0f 90       	pop	r0
   10bb4:	0f 90       	pop	r0
   10bb6:	0f 90       	pop	r0
   10bb8:	e1 2c       	mov	r14, r1
   10bba:	f1 2c       	mov	r15, r1
   10bbc:	8f c0       	rjmp	.+286    	; 0x10cdc <ls+0x204>
    }

    switch (st.st_mode & S_IFMT) 
   10bbe:	c7 5f       	subi	r28, 0xF7	; 247
   10bc0:	de 4f       	sbci	r29, 0xFE	; 254
   10bc2:	88 81       	ld	r24, Y
   10bc4:	99 81       	ldd	r25, Y+1	; 0x01
   10bc6:	aa 81       	ldd	r26, Y+2	; 0x02
   10bc8:	bb 81       	ldd	r27, Y+3	; 0x03
   10bca:	c9 50       	subi	r28, 0x09	; 9
   10bcc:	d1 40       	sbci	r29, 0x01	; 1
   10bce:	88 27       	eor	r24, r24
   10bd0:	90 7f       	andi	r25, 0xF0	; 240
   10bd2:	aa 27       	eor	r26, r26
   10bd4:	bb 27       	eor	r27, r27
   10bd6:	81 15       	cp	r24, r1
   10bd8:	f0 e4       	ldi	r31, 0x40	; 64
   10bda:	9f 07       	cpc	r25, r31
   10bdc:	a1 05       	cpc	r26, r1
   10bde:	b1 05       	cpc	r27, r1
   10be0:	51 f0       	breq	.+20     	; 0x10bf6 <ls+0x11e>
   10be2:	81 15       	cp	r24, r1
   10be4:	90 48       	sbci	r25, 0x80	; 128
   10be6:	a1 05       	cpc	r26, r1
   10be8:	b1 05       	cpc	r27, r1
   10bea:	09 f0       	breq	.+2      	; 0x10bee <ls+0x116>
   10bec:	67 c0       	rjmp	.+206    	; 0x10cbc <ls+0x1e4>
    {
    case S_IFREG:
        ls_info(fullpath,verbose);
   10bee:	b4 01       	movw	r22, r8
   10bf0:	c8 01       	movw	r24, r16
   10bf2:	b5 de       	rcall	.-662    	; 0x1095e <ls_info>
   10bf4:	63 c0       	rjmp	.+198    	; 0x10cbc <ls+0x1e4>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
   10bf6:	c8 01       	movw	r24, r16
   10bf8:	0e 94 4c 7b 	call	0xf698	; 0xf698 <opendir>
   10bfc:	5c 01       	movw	r10, r24
        if(!dirp)
   10bfe:	89 2b       	or	r24, r25
   10c00:	79 f0       	breq	.+30     	; 0x10c20 <ls+0x148>
    }
    else
    {
        strcpy(fullpath,name);
    }
    len = strlen(fullpath);
   10c02:	e1 2c       	mov	r14, r1
   10c04:	f1 2c       	mov	r15, r1
                strcat(fullpath,"/");
            }
            strcat(fullpath,de->d_name);
            files +=ls_info(fullpath,verbose);
            // restore path
            fullpath[len] = 0;
   10c06:	c8 01       	movw	r24, r16
   10c08:	82 0d       	add	r24, r2
   10c0a:	93 1d       	adc	r25, r3
   10c0c:	cf 5c       	subi	r28, 0xCF	; 207
   10c0e:	de 4f       	sbci	r29, 0xFE	; 254
   10c10:	99 83       	std	Y+1, r25	; 0x01
   10c12:	88 83       	st	Y, r24
   10c14:	c1 53       	subi	r28, 0x31	; 49
   10c16:	d1 40       	sbci	r29, 0x01	; 1
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   10c18:	87 ee       	ldi	r24, 0xE7	; 231
   10c1a:	9c e0       	ldi	r25, 0x0C	; 12
   10c1c:	2c 01       	movw	r4, r24
   10c1e:	27 c0       	rjmp	.+78     	; 0x10c6e <ls+0x196>
        break;
    case S_IFDIR:
        dirp = opendir(fullpath);
        if(!dirp)
        {
            printf("opendir failed\n");
   10c20:	8a e0       	ldi	r24, 0x0A	; 10
   10c22:	9d e0       	ldi	r25, 0x0D	; 13
   10c24:	1f 92       	push	r1
   10c26:	9f 93       	push	r25
   10c28:	8f 93       	push	r24
   10c2a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
            return(0);
   10c2e:	0f 90       	pop	r0
   10c30:	0f 90       	pop	r0
   10c32:	0f 90       	pop	r0
   10c34:	53 c0       	rjmp	.+166    	; 0x10cdc <ls+0x204>
        }
        while ( (de = readdir(dirp)) ) 
        {
            if(de->d_name[0] == 0)
   10c36:	f6 01       	movw	r30, r12
   10c38:	80 81       	ld	r24, Z
   10c3a:	88 23       	and	r24, r24
   10c3c:	f1 f0       	breq	.+60     	; 0x10c7a <ls+0x1a2>
                break;
            // FIXME neeed beetter string length tests here
            len2 = strlen(de->d_name);
   10c3e:	f6 01       	movw	r30, r12
   10c40:	01 90       	ld	r0, Z+
   10c42:	00 20       	and	r0, r0
   10c44:	e9 f7       	brne	.-6      	; 0x10c40 <ls+0x168>
   10c46:	31 97       	sbiw	r30, 0x01	; 1
   10c48:	ec 19       	sub	r30, r12
   10c4a:	fd 09       	sbc	r31, r13
            if(len + len2 >= MAX_NAME_LEN)
   10c4c:	e2 0d       	add	r30, r2
   10c4e:	f3 1d       	adc	r31, r3
   10c50:	ef 3f       	cpi	r30, 0xFF	; 255
   10c52:	f1 05       	cpc	r31, r1
   10c54:	b4 f0       	brlt	.+44     	; 0x10c82 <ls+0x1aa>
            {
                printf("name:[%s] too long with full path\n",de->d_name);
   10c56:	df 92       	push	r13
   10c58:	cf 92       	push	r12
   10c5a:	1f 92       	push	r1
   10c5c:	5f 92       	push	r5
   10c5e:	4f 92       	push	r4
   10c60:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
                continue;
   10c64:	0f 90       	pop	r0
   10c66:	0f 90       	pop	r0
   10c68:	0f 90       	pop	r0
   10c6a:	0f 90       	pop	r0
   10c6c:	0f 90       	pop	r0
        if(!dirp)
        {
            printf("opendir failed\n");
            return(0);
        }
        while ( (de = readdir(dirp)) ) 
   10c6e:	c5 01       	movw	r24, r10
   10c70:	0e 94 6a 7b 	call	0xf6d4	; 0xf6d4 <readdir>
   10c74:	6c 01       	movw	r12, r24
   10c76:	89 2b       	or	r24, r25
   10c78:	f1 f6       	brne	.-68     	; 0x10c36 <ls+0x15e>
#ifdef ESP8266
            optimistic_yield(1000);
            wdt_reset();
#endif
        }
        closedir(dirp);
   10c7a:	c5 01       	movw	r24, r10
   10c7c:	0e 94 31 7b 	call	0xf662	; 0xf662 <closedir>
        break;
   10c80:	1f c0       	rjmp	.+62     	; 0x10cc0 <ls+0x1e8>
            if(len + len2 >= MAX_NAME_LEN)
            {
                printf("name:[%s] too long with full path\n",de->d_name);
                continue;
            }
            if(!MATCH(fullpath,"/") )
   10c82:	67 e0       	ldi	r22, 0x07	; 7
   10c84:	78 e0       	ldi	r23, 0x08	; 8
   10c86:	c8 01       	movw	r24, r16
   10c88:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <MATCH>
   10c8c:	89 2b       	or	r24, r25
   10c8e:	29 f4       	brne	.+10     	; 0x10c9a <ls+0x1c2>
            {
                strcat(fullpath,"/");
   10c90:	67 e0       	ldi	r22, 0x07	; 7
   10c92:	78 e0       	ldi	r23, 0x08	; 8
   10c94:	c8 01       	movw	r24, r16
   10c96:	0e 94 30 30 	call	0x6060	; 0x6060 <strcat>
            }
            strcat(fullpath,de->d_name);
   10c9a:	b6 01       	movw	r22, r12
   10c9c:	c8 01       	movw	r24, r16
   10c9e:	0e 94 30 30 	call	0x6060	; 0x6060 <strcat>
            files +=ls_info(fullpath,verbose);
   10ca2:	b4 01       	movw	r22, r8
   10ca4:	c8 01       	movw	r24, r16
   10ca6:	5b de       	rcall	.-842    	; 0x1095e <ls_info>
   10ca8:	e8 0e       	add	r14, r24
   10caa:	f9 1e       	adc	r15, r25
            // restore path
            fullpath[len] = 0;
   10cac:	cf 5c       	subi	r28, 0xCF	; 207
   10cae:	de 4f       	sbci	r29, 0xFE	; 254
   10cb0:	e8 81       	ld	r30, Y
   10cb2:	f9 81       	ldd	r31, Y+1	; 0x01
   10cb4:	c1 53       	subi	r28, 0x31	; 49
   10cb6:	d1 40       	sbci	r29, 0x01	; 1
   10cb8:	10 82       	st	Z, r1
   10cba:	d9 cf       	rjmp	.-78     	; 0x10c6e <ls+0x196>
MEMSPACE
int ls(char *name, int verbose)
{
    struct stat st;
    DIR *dirp;
    int files = 0;
   10cbc:	e1 2c       	mov	r14, r1
   10cbe:	f1 2c       	mov	r15, r1
#endif
        }
        closedir(dirp);
        break;
    }
    printf("Files: %d\n", (int)files);
   10cc0:	ff 92       	push	r15
   10cc2:	ef 92       	push	r14
   10cc4:	8c ed       	ldi	r24, 0xDC	; 220
   10cc6:	9c e0       	ldi	r25, 0x0C	; 12
   10cc8:	1f 92       	push	r1
   10cca:	9f 93       	push	r25
   10ccc:	8f 93       	push	r24
   10cce:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    return(files);
   10cd2:	0f 90       	pop	r0
   10cd4:	0f 90       	pop	r0
   10cd6:	0f 90       	pop	r0
   10cd8:	0f 90       	pop	r0
   10cda:	0f 90       	pop	r0
}
   10cdc:	c7 01       	movw	r24, r14
   10cde:	ce 5c       	subi	r28, 0xCE	; 206
   10ce0:	de 4f       	sbci	r29, 0xFE	; 254
   10ce2:	0f b6       	in	r0, 0x3f	; 63
   10ce4:	f8 94       	cli
   10ce6:	de bf       	out	0x3e, r29	; 62
   10ce8:	0f be       	out	0x3f, r0	; 63
   10cea:	cd bf       	out	0x3d, r28	; 61
   10cec:	df 91       	pop	r29
   10cee:	cf 91       	pop	r28
   10cf0:	1f 91       	pop	r17
   10cf2:	0f 91       	pop	r16
   10cf4:	ff 90       	pop	r15
   10cf6:	ef 90       	pop	r14
   10cf8:	df 90       	pop	r13
   10cfa:	cf 90       	pop	r12
   10cfc:	bf 90       	pop	r11
   10cfe:	af 90       	pop	r10
   10d00:	9f 90       	pop	r9
   10d02:	8f 90       	pop	r8
   10d04:	6f 90       	pop	r6
   10d06:	5f 90       	pop	r5
   10d08:	4f 90       	pop	r4
   10d0a:	3f 90       	pop	r3
   10d0c:	2f 90       	pop	r2
   10d0e:	08 95       	ret

00010d10 <logfile>:
/// @param[in] name: name of file to create.
/// @param[in] str: string containing file contents.
/// @return  size of string, or 0 on error
MEMSPACE
long logfile(char *name, char *str)
{
   10d10:	cf 92       	push	r12
   10d12:	df 92       	push	r13
   10d14:	ef 92       	push	r14
   10d16:	ff 92       	push	r15
   10d18:	cf 93       	push	r28
   10d1a:	df 93       	push	r29
   10d1c:	f8 2e       	mov	r15, r24
   10d1e:	e9 2e       	mov	r14, r25
   10d20:	eb 01       	movw	r28, r22
    long size = 0;
    FILE *fo;

    fo = fopen(name,"ab");
   10d22:	67 e7       	ldi	r22, 0x77	; 119
   10d24:	78 e0       	ldi	r23, 0x08	; 8
   10d26:	3e db       	rcall	.-2436   	; 0x103a4 <fopen>
    if (fo)
   10d28:	89 2b       	or	r24, r25
   10d2a:	79 f0       	breq	.+30     	; 0x10d4a <logfile+0x3a>
    {
        printf("Can't open: %s\n", name);
   10d2c:	ef 92       	push	r14
   10d2e:	ff 92       	push	r15
   10d30:	8c ec       	ldi	r24, 0xCC	; 204
   10d32:	9c e0       	ldi	r25, 0x0C	; 12
   10d34:	1f 92       	push	r1
   10d36:	9f 93       	push	r25
   10d38:	8f 93       	push	r24
   10d3a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        return(0);
   10d3e:	0f 90       	pop	r0
   10d40:	0f 90       	pop	r0
   10d42:	0f 90       	pop	r0
   10d44:	0f 90       	pop	r0
   10d46:	0f 90       	pop	r0
   10d48:	22 c0       	rjmp	.+68     	; 0x10d8e <logfile+0x7e>
    }

    size = strlen(str);
   10d4a:	fe 01       	movw	r30, r28
   10d4c:	01 90       	ld	r0, Z+
   10d4e:	00 20       	and	r0, r0
   10d50:	e9 f7       	brne	.-6      	; 0x10d4c <logfile+0x3c>
   10d52:	31 97       	sbiw	r30, 0x01	; 1
   10d54:	af 01       	movw	r20, r30
   10d56:	4c 1b       	sub	r20, r28
   10d58:	5d 0b       	sbc	r21, r29
   10d5a:	6a 01       	movw	r12, r20
   10d5c:	e1 2c       	mov	r14, r1
   10d5e:	f1 2c       	mov	r15, r1
    if( fwrite(str, 1, size, fo) < size)
   10d60:	20 e0       	ldi	r18, 0x00	; 0
   10d62:	30 e0       	ldi	r19, 0x00	; 0
   10d64:	61 e0       	ldi	r22, 0x01	; 1
   10d66:	70 e0       	ldi	r23, 0x00	; 0
   10d68:	ce 01       	movw	r24, r28
   10d6a:	44 d9       	rcall	.-3448   	; 0xfff4 <fwrite>
   10d6c:	a0 e0       	ldi	r26, 0x00	; 0
   10d6e:	b0 e0       	ldi	r27, 0x00	; 0
   10d70:	8c 15       	cp	r24, r12
   10d72:	9d 05       	cpc	r25, r13
   10d74:	ae 05       	cpc	r26, r14
   10d76:	bf 05       	cpc	r27, r15
   10d78:	7c f4       	brge	.+30     	; 0x10d98 <logfile+0x88>
    {
        printf("Write error\n");
   10d7a:	8f eb       	ldi	r24, 0xBF	; 191
   10d7c:	9c e0       	ldi	r25, 0x0C	; 12
   10d7e:	1f 92       	push	r1
   10d80:	9f 93       	push	r25
   10d82:	8f 93       	push	r24
   10d84:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   10d88:	0f 90       	pop	r0
   10d8a:	0f 90       	pop	r0
   10d8c:	0f 90       	pop	r0
   10d8e:	60 e0       	ldi	r22, 0x00	; 0
   10d90:	70 e0       	ldi	r23, 0x00	; 0
   10d92:	80 e0       	ldi	r24, 0x00	; 0
   10d94:	90 e0       	ldi	r25, 0x00	; 0
        return(0);
    }
    fclose(fo);
   10d96:	05 c0       	rjmp	.+10     	; 0x10da2 <logfile+0x92>
   10d98:	80 e0       	ldi	r24, 0x00	; 0
   10d9a:	90 e0       	ldi	r25, 0x00	; 0
    return(size);
   10d9c:	ad d9       	rcall	.-3238   	; 0x100f8 <fclose>
   10d9e:	b6 01       	movw	r22, r12
}
   10da0:	c7 01       	movw	r24, r14
   10da2:	df 91       	pop	r29
   10da4:	cf 91       	pop	r28
   10da6:	ff 90       	pop	r15
   10da8:	ef 90       	pop	r14
   10daa:	df 90       	pop	r13
   10dac:	cf 90       	pop	r12
   10dae:	08 95       	ret

00010db0 <sum>:
/// @brief sum of a file with 16bit hex and integer results
/// @param[in] *name: file to sum
/// @retrun void
MEMSPACE
uint16_t sum(char *name)
{
   10db0:	a0 e0       	ldi	r26, 0x00	; 0
   10db2:	b1 e0       	ldi	r27, 0x01	; 1
   10db4:	ee ed       	ldi	r30, 0xDE	; 222
   10db6:	f6 e8       	ldi	r31, 0x86	; 134
   10db8:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__prologue_saves__+0x14>
   10dbc:	18 2f       	mov	r17, r24
   10dbe:	09 2f       	mov	r16, r25
    FILE *fi;
    uint16_t sum;
    int i,len;
    uint8_t buffer[256];

    fi=fopen(name,"rb");
   10dc0:	6b e5       	ldi	r22, 0x5B	; 91
   10dc2:	78 e0       	ldi	r23, 0x08	; 8
   10dc4:	ef da       	rcall	.-2594   	; 0x103a4 <fopen>
   10dc6:	7c 01       	movw	r14, r24
    if(fi == NULL) 
   10dc8:	89 2b       	or	r24, r25
   10dca:	89 f4       	brne	.+34     	; 0x10dee <sum+0x3e>
    {
        printf("Can' open: %s\n", name);
   10dcc:	0f 93       	push	r16
   10dce:	1f 93       	push	r17
   10dd0:	80 eb       	ldi	r24, 0xB0	; 176
   10dd2:	9c e0       	ldi	r25, 0x0C	; 12
   10dd4:	1f 92       	push	r1
   10dd6:	9f 93       	push	r25
   10dd8:	8f 93       	push	r24
   10dda:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   10dde:	0f 90       	pop	r0
   10de0:	0f 90       	pop	r0
   10de2:	0f 90       	pop	r0
   10de4:	0f 90       	pop	r0
   10de6:	0f 90       	pop	r0
   10de8:	80 e0       	ldi	r24, 0x00	; 0
   10dea:	90 e0       	ldi	r25, 0x00	; 0
   10dec:	2d c0       	rjmp	.+90     	; 0x10e48 <sum+0x98>
   10dee:	00 e0       	ldi	r16, 0x00	; 0
   10df0:	10 e0       	ldi	r17, 0x00	; 0
        return(0);
    }
    sum = 0;
    while( (len = fread(buffer,1, 256, fi)) > 0) 
   10df2:	ce 01       	movw	r24, r28
   10df4:	01 96       	adiw	r24, 0x01	; 1
   10df6:	6c 01       	movw	r12, r24
   10df8:	97 01       	movw	r18, r14
   10dfa:	40 e0       	ldi	r20, 0x00	; 0
   10dfc:	51 e0       	ldi	r21, 0x01	; 1
   10dfe:	61 e0       	ldi	r22, 0x01	; 1
   10e00:	70 e0       	ldi	r23, 0x00	; 0
   10e02:	c6 01       	movw	r24, r12
   10e04:	25 d8       	rcall	.-4022   	; 0xfe50 <fread>
   10e06:	18 16       	cp	r1, r24
   10e08:	19 06       	cpc	r1, r25
   10e0a:	5c f4       	brge	.+22     	; 0x10e22 <sum+0x72>
   10e0c:	f6 01       	movw	r30, r12
    {
        for(i=0;i<len;++i) 
            sum += (0xff & buffer[i]);
   10e0e:	21 91       	ld	r18, Z+
   10e10:	02 0f       	add	r16, r18
   10e12:	11 1d       	adc	r17, r1
        return(0);
    }
    sum = 0;
    while( (len = fread(buffer,1, 256, fi)) > 0) 
    {
        for(i=0;i<len;++i) 
   10e14:	9f 01       	movw	r18, r30
   10e16:	2c 19       	sub	r18, r12
   10e18:	3d 09       	sbc	r19, r13
   10e1a:	28 17       	cp	r18, r24
   10e1c:	39 07       	cpc	r19, r25
   10e1e:	bc f3       	brlt	.-18     	; 0x10e0e <sum+0x5e>
#ifdef ESP8266
            optimistic_yield(1000);
            wdt_reset();
#endif
    }
    fclose(fi);
   10e20:	eb cf       	rjmp	.-42     	; 0x10df8 <sum+0x48>
   10e22:	c7 01       	movw	r24, r14
   10e24:	69 d9       	rcall	.-3374   	; 0x100f8 <fclose>
    printf("Sum: %04Xh, %5u\n", (int) sum, (unsigned int) sum);
   10e26:	1f 93       	push	r17
   10e28:	0f 93       	push	r16
   10e2a:	1f 93       	push	r17
   10e2c:	0f 93       	push	r16
   10e2e:	8f e9       	ldi	r24, 0x9F	; 159
   10e30:	9c e0       	ldi	r25, 0x0C	; 12
   10e32:	1f 92       	push	r1
   10e34:	9f 93       	push	r25
   10e36:	8f 93       	push	r24
   10e38:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    return(sum);
   10e3c:	0f b6       	in	r0, 0x3f	; 63
   10e3e:	f8 94       	cli
   10e40:	de bf       	out	0x3e, r29	; 62
   10e42:	0f be       	out	0x3f, r0	; 63
   10e44:	cd bf       	out	0x3d, r28	; 61
   10e46:	c8 01       	movw	r24, r16
}
   10e48:	d3 95       	inc	r29
   10e4a:	e8 e0       	ldi	r30, 0x08	; 8
   10e4c:	0c 94 e7 e8 	jmp	0x1d1ce	; 0x1d1ce <__epilogue_restores__+0x14>

00010e50 <upload>:
/// First blank line exits capture
/// @param[in] *name: file to save on sdcard
/// @retrun void
MEMSPACE
long upload(char *name)
{
   10e50:	a0 e0       	ldi	r26, 0x00	; 0
   10e52:	b1 e0       	ldi	r27, 0x01	; 1
   10e54:	ee e2       	ldi	r30, 0x2E	; 46
   10e56:	f7 e8       	ldi	r31, 0x87	; 135
   10e58:	0c 94 c7 e8 	jmp	0x1d18e	; 0x1d18e <__prologue_saves__+0xc>
   10e5c:	18 2f       	mov	r17, r24
   10e5e:	09 2f       	mov	r16, r25
    int len,len2;
    long size = 0;
    FILE *fp;
    char buffer[256];

    fp = fopen(name, "wb");
   10e60:	69 e6       	ldi	r22, 0x69	; 105
   10e62:	78 e0       	ldi	r23, 0x08	; 8
   10e64:	9f da       	rcall	.-2754   	; 0x103a4 <fopen>
   10e66:	6c 01       	movw	r12, r24
    if( fp == NULL)
   10e68:	89 2b       	or	r24, r25
   10e6a:	39 f0       	breq	.+14     	; 0x10e7a <upload+0x2a>
   10e6c:	81 2c       	mov	r8, r1
   10e6e:	91 2c       	mov	r9, r1
   10e70:	54 01       	movw	r10, r8
        return(0);
    }

    while(1)
    {
        if(fgets(buffer,254,stdin) == NULL)
   10e72:	ce 01       	movw	r24, r28
   10e74:	01 96       	adiw	r24, 0x01	; 1
   10e76:	7c 01       	movw	r14, r24
   10e78:	3c c0       	rjmp	.+120    	; 0x10ef2 <upload+0xa2>
    char buffer[256];

    fp = fopen(name, "wb");
    if( fp == NULL)
    {
        printf("Can' open: %s\n", name);
   10e7a:	0f 93       	push	r16
   10e7c:	1f 93       	push	r17
   10e7e:	80 e9       	ldi	r24, 0x90	; 144
   10e80:	9c e0       	ldi	r25, 0x0C	; 12
   10e82:	1f 92       	push	r1
   10e84:	9f 93       	push	r25
   10e86:	8f 93       	push	r24
   10e88:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        return(0);
   10e8c:	0f 90       	pop	r0
   10e8e:	0f 90       	pop	r0
   10e90:	0f 90       	pop	r0
   10e92:	0f 90       	pop	r0
   10e94:	0f 90       	pop	r0
   10e96:	60 e0       	ldi	r22, 0x00	; 0
   10e98:	70 e0       	ldi	r23, 0x00	; 0
   10e9a:	80 e0       	ldi	r24, 0x00	; 0
   10e9c:	90 e0       	ldi	r25, 0x00	; 0
   10e9e:	3a c0       	rjmp	.+116    	; 0x10f14 <upload+0xc4>

    while(1)
    {
        if(fgets(buffer,254,stdin) == NULL)
            break;
        len = strlen(buffer);
   10ea0:	f7 01       	movw	r30, r14
   10ea2:	01 90       	ld	r0, Z+
   10ea4:	00 20       	and	r0, r0
   10ea6:	e9 f7       	brne	.-6      	; 0x10ea2 <upload+0x52>
   10ea8:	31 97       	sbiw	r30, 0x01	; 1
   10eaa:	ee 19       	sub	r30, r14
   10eac:	ff 09       	sbc	r31, r15
        if(len < 1)
   10eae:	1e 16       	cp	r1, r30
   10eb0:	1f 06       	cpc	r1, r31
   10eb2:	54 f5       	brge	.+84     	; 0x10f08 <upload+0xb8>
            break;
        strcat(buffer,"\n");
   10eb4:	6c e9       	ldi	r22, 0x9C	; 156
   10eb6:	7b e0       	ldi	r23, 0x0B	; 11
   10eb8:	c7 01       	movw	r24, r14
   10eba:	0e 94 30 30 	call	0x6060	; 0x6060 <strcat>
        len = strlen(buffer);
   10ebe:	f7 01       	movw	r30, r14
   10ec0:	01 90       	ld	r0, Z+
   10ec2:	00 20       	and	r0, r0
   10ec4:	e9 f7       	brne	.-6      	; 0x10ec0 <upload+0x70>
   10ec6:	31 97       	sbiw	r30, 0x01	; 1
   10ec8:	8f 01       	movw	r16, r30
   10eca:	0e 19       	sub	r16, r14
   10ecc:	1f 09       	sbc	r17, r15
        len2 = fwrite(buffer, 1, len,fp);
   10ece:	96 01       	movw	r18, r12
   10ed0:	a8 01       	movw	r20, r16
   10ed2:	61 e0       	ldi	r22, 0x01	; 1
   10ed4:	70 e0       	ldi	r23, 0x00	; 0
   10ed6:	c7 01       	movw	r24, r14
   10ed8:	8d d8       	rcall	.-3814   	; 0xfff4 <fwrite>
        if(len != len2)
   10eda:	08 17       	cp	r16, r24
   10edc:	19 07       	cpc	r17, r25
   10ede:	a1 f4       	brne	.+40     	; 0x10f08 <upload+0xb8>
            break;
        size += len;
   10ee0:	a8 01       	movw	r20, r16
   10ee2:	01 2e       	mov	r0, r17
   10ee4:	00 0c       	add	r0, r0
   10ee6:	66 0b       	sbc	r22, r22
   10ee8:	77 0b       	sbc	r23, r23
   10eea:	84 0e       	add	r8, r20
   10eec:	95 1e       	adc	r9, r21
   10eee:	a6 1e       	adc	r10, r22
   10ef0:	b7 1e       	adc	r11, r23
        return(0);
    }

    while(1)
    {
        if(fgets(buffer,254,stdin) == NULL)
   10ef2:	40 91 70 1c 	lds	r20, 0x1C70	; 0x801c70 <__iob>
   10ef6:	50 91 71 1c 	lds	r21, 0x1C71	; 0x801c71 <__iob+0x1>
   10efa:	6e ef       	ldi	r22, 0xFE	; 254
   10efc:	70 e0       	ldi	r23, 0x00	; 0
   10efe:	c7 01       	movw	r24, r14
   10f00:	0e 94 e2 78 	call	0xf1c4	; 0xf1c4 <fgets>
   10f04:	89 2b       	or	r24, r25
        if(len != len2)
            break;
        size += len;
    }

    fclose(fp);
   10f06:	61 f6       	brne	.-104    	; 0x10ea0 <upload+0x50>
   10f08:	c6 01       	movw	r24, r12
   10f0a:	f6 d8       	rcall	.-3604   	; 0x100f8 <fclose>
    sync();
   10f0c:	0e 94 77 7f 	call	0xfeee	; 0xfeee <sync>
    return(size);
   10f10:	b4 01       	movw	r22, r8
   10f12:	c5 01       	movw	r24, r10
}
   10f14:	d3 95       	inc	r29
   10f16:	ec e0       	ldi	r30, 0x0C	; 12
   10f18:	0c 94 e3 e8 	jmp	0x1d1c6	; 0x1d1c6 <__epilogue_restores__+0xc>

00010f1c <posix_tests>:
///
/// @return 1 The ruturn code indicates a command matched.
/// @return 0 if no rules matched
MEMSPACE
int posix_tests(int argc,char *argv[])
{
   10f1c:	a0 e0       	ldi	r26, 0x00	; 0
   10f1e:	b1 e0       	ldi	r27, 0x01	; 1
   10f20:	e4 e9       	ldi	r30, 0x94	; 148
   10f22:	f7 e8       	ldi	r31, 0x87	; 135
   10f24:	0c 94 c3 e8 	jmp	0x1d186	; 0x1d186 <__prologue_saves__+0x4>
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   10f28:	fb 01       	movw	r30, r22
   10f2a:	c0 80       	ld	r12, Z
   10f2c:	d1 80       	ldd	r13, Z+1	; 0x01

    if(!ptr)
   10f2e:	c1 14       	cp	r12, r1
   10f30:	d1 04       	cpc	r13, r1
   10f32:	19 f4       	brne	.+6      	; 0x10f3a <posix_tests+0x1e>
        return(0);
   10f34:	80 e0       	ldi	r24, 0x00	; 0
   10f36:	90 e0       	ldi	r25, 0x00	; 0
   10f38:	2d c2       	rjmp	.+1114   	; 0x11394 <posix_tests+0x478>
   10f3a:	4b 01       	movw	r8, r22
   10f3c:	8c 01       	movw	r16, r24

    if( MATCH(ptr,"posix") )
   10f3e:	67 e0       	ldi	r22, 0x07	; 7
   10f40:	7b e0       	ldi	r23, 0x0B	; 11
   10f42:	c6 01       	movw	r24, r12
   10f44:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <MATCH>
   10f48:	89 2b       	or	r24, r25
   10f4a:	a9 f0       	breq	.+42     	; 0x10f76 <posix_tests+0x5a>
    {
        ptr = argv[ind++];
   10f4c:	f4 01       	movw	r30, r8
   10f4e:	c2 80       	ldd	r12, Z+2	; 0x02
   10f50:	d3 80       	ldd	r13, Z+3	; 0x03
        if ( !ptr || MATCH(ptr,"help") )
   10f52:	c1 14       	cp	r12, r1
   10f54:	d1 04       	cpc	r13, r1
   10f56:	21 f4       	brne	.+8      	; 0x10f60 <posix_tests+0x44>
        {
            posix_help(1);
   10f58:	81 e0       	ldi	r24, 0x01	; 1
   10f5a:	90 e0       	ldi	r25, 0x00	; 0
   10f5c:	50 da       	rcall	.-2912   	; 0x103fe <posix_help>
   10f5e:	18 c2       	rjmp	.+1072   	; 0x11390 <posix_tests+0x474>
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
        if ( !ptr || MATCH(ptr,"help") )
   10f60:	69 e0       	ldi	r22, 0x09	; 9
   10f62:	76 e1       	ldi	r23, 0x16	; 22
   10f64:	c6 01       	movw	r24, r12
   10f66:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <MATCH>
   10f6a:	89 2b       	or	r24, r25
   10f6c:	a9 f7       	brne	.-22     	; 0x10f58 <posix_tests+0x3c>
    if(!ptr)
        return(0);

    if( MATCH(ptr,"posix") )
    {
        ptr = argv[ind++];
   10f6e:	f2 e0       	ldi	r31, 0x02	; 2
   10f70:	6f 2e       	mov	r6, r31
   10f72:	71 2c       	mov	r7, r1
   10f74:	03 c0       	rjmp	.+6      	; 0x10f7c <posix_tests+0x60>
{
    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   10f76:	66 24       	eor	r6, r6
   10f78:	63 94       	inc	r6
   10f7a:	71 2c       	mov	r7, r1
            posix_help(1);
            return(1);
        }
    }

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
   10f7c:	73 01       	movw	r14, r6
   10f7e:	ff ef       	ldi	r31, 0xFF	; 255
   10f80:	ef 1a       	sub	r14, r31
   10f82:	ff 0a       	sbc	r15, r31
   10f84:	98 01       	movw	r18, r16
   10f86:	a7 01       	movw	r20, r14
   10f88:	6d e0       	ldi	r22, 0x0D	; 13
   10f8a:	7b e0       	ldi	r23, 0x0B	; 11
   10f8c:	c6 01       	movw	r24, r12
   10f8e:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   10f92:	89 2b       	or	r24, r25
   10f94:	a1 f1       	breq	.+104    	; 0x10ffe <posix_tests+0xe2>
   10f96:	73 01       	movw	r14, r6
   10f98:	ee 0c       	add	r14, r14
   10f9a:	ff 1c       	adc	r15, r15
   10f9c:	e8 0c       	add	r14, r8
   10f9e:	f9 1c       	adc	r15, r9
   10fa0:	57 01       	movw	r10, r14
   10fa2:	47 01       	movw	r8, r14
   10fa4:	63 01       	movw	r12, r6
   10fa6:	41 2c       	mov	r4, r1
   10fa8:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   10faa:	c0 16       	cp	r12, r16
   10fac:	d1 06       	cpc	r13, r17
   10fae:	1c f5       	brge	.+70     	; 0x10ff6 <posix_tests+0xda>
        {
            if(MATCH(argv[i],"-p"))
   10fb0:	61 e1       	ldi	r22, 0x11	; 17
   10fb2:	7b e0       	ldi	r23, 0x0B	; 11
   10fb4:	f4 01       	movw	r30, r8
   10fb6:	81 91       	ld	r24, Z+
   10fb8:	91 91       	ld	r25, Z+
   10fba:	4f 01       	movw	r8, r30
   10fbc:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <MATCH>
   10fc0:	89 2b       	or	r24, r25
   10fc2:	19 f0       	breq	.+6      	; 0x10fca <posix_tests+0xae>
                page = 1;
   10fc4:	44 24       	eor	r4, r4
   10fc6:	43 94       	inc	r4
   10fc8:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"cat", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   10fca:	ff ef       	ldi	r31, 0xFF	; 255
   10fcc:	cf 1a       	sub	r12, r31
   10fce:	df 0a       	sbc	r13, r31
   10fd0:	ec cf       	rjmp	.-40     	; 0x10faa <posix_tests+0x8e>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   10fd2:	61 e1       	ldi	r22, 0x11	; 17
   10fd4:	7b e0       	ldi	r23, 0x0B	; 11
   10fd6:	f5 01       	movw	r30, r10
   10fd8:	81 91       	ld	r24, Z+
   10fda:	91 91       	ld	r25, Z+
   10fdc:	5f 01       	movw	r10, r30
   10fde:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <MATCH>
   10fe2:	89 2b       	or	r24, r25
   10fe4:	29 f4       	brne	.+10     	; 0x10ff0 <posix_tests+0xd4>
                cat(argv[ind], page);
   10fe6:	b2 01       	movw	r22, r4
   10fe8:	f7 01       	movw	r30, r14
   10fea:	80 81       	ld	r24, Z
   10fec:	91 81       	ldd	r25, Z+1	; 0x01
   10fee:	36 db       	rcall	.-2452   	; 0x1065c <cat>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   10ff0:	ff ef       	ldi	r31, 0xFF	; 255
   10ff2:	6f 1a       	sub	r6, r31
   10ff4:	7f 0a       	sbc	r7, r31
   10ff6:	60 16       	cp	r6, r16
   10ff8:	71 06       	cpc	r7, r17
   10ffa:	5c f3       	brlt	.-42     	; 0x10fd2 <posix_tests+0xb6>
   10ffc:	c9 c1       	rjmp	.+914    	; 0x11390 <posix_tests+0x474>
                cat(argv[ind], page);
        }
        return(1);
    }

    if (MATCHARGS(ptr,"chmod",(ind+2),argc))
   10ffe:	53 01       	movw	r10, r6
   11000:	82 e0       	ldi	r24, 0x02	; 2
   11002:	a8 0e       	add	r10, r24
   11004:	b1 1c       	adc	r11, r1
   11006:	98 01       	movw	r18, r16
   11008:	a5 01       	movw	r20, r10
   1100a:	64 e1       	ldi	r22, 0x14	; 20
   1100c:	7b e0       	ldi	r23, 0x0B	; 11
   1100e:	c6 01       	movw	r24, r12
   11010:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   11014:	89 2b       	or	r24, r25
   11016:	b1 f0       	breq	.+44     	; 0x11044 <posix_tests+0x128>
    {
        chmod( argv[ind],strtol(argv[ind+1],NULL,8));
   11018:	ee 0c       	add	r14, r14
   1101a:	ff 1c       	adc	r15, r15
   1101c:	e8 0c       	add	r14, r8
   1101e:	f9 1c       	adc	r15, r9
   11020:	48 e0       	ldi	r20, 0x08	; 8
   11022:	50 e0       	ldi	r21, 0x00	; 0
   11024:	60 e0       	ldi	r22, 0x00	; 0
   11026:	70 e0       	ldi	r23, 0x00	; 0
   11028:	f7 01       	movw	r30, r14
   1102a:	80 81       	ld	r24, Z
   1102c:	91 81       	ldd	r25, Z+1	; 0x01
   1102e:	0e 94 fd 44 	call	0x89fa	; 0x89fa <strtol>
   11032:	ab 01       	movw	r20, r22
   11034:	bc 01       	movw	r22, r24
   11036:	f7 01       	movw	r30, r14
   11038:	32 97       	sbiw	r30, 0x02	; 2
   1103a:	80 81       	ld	r24, Z
   1103c:	91 81       	ldd	r25, Z+1	; 0x01
   1103e:	0e 94 75 7a 	call	0xf4ea	; 0xf4ea <chmod>
   11042:	a6 c1       	rjmp	.+844    	; 0x11390 <posix_tests+0x474>
        return(1);
    }


    if (MATCHARGS(ptr,"copy", (ind + 2), argc))
   11044:	98 01       	movw	r18, r16
   11046:	a5 01       	movw	r20, r10
   11048:	6a e1       	ldi	r22, 0x1A	; 26
   1104a:	7b e0       	ldi	r23, 0x0B	; 11
   1104c:	c6 01       	movw	r24, r12
   1104e:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   11052:	89 2b       	or	r24, r25
   11054:	61 f0       	breq	.+24     	; 0x1106e <posix_tests+0x152>
    {
        copy(argv[ind],argv[ind+1]);
   11056:	ee 0c       	add	r14, r14
   11058:	ff 1c       	adc	r15, r15
   1105a:	f4 01       	movw	r30, r8
   1105c:	ee 0d       	add	r30, r14
   1105e:	ff 1d       	adc	r31, r15
   11060:	60 81       	ld	r22, Z
   11062:	71 81       	ldd	r23, Z+1	; 0x01
   11064:	32 97       	sbiw	r30, 0x02	; 2
   11066:	80 81       	ld	r24, Z
   11068:	91 81       	ldd	r25, Z+1	; 0x01
   1106a:	e5 d9       	rcall	.-3126   	; 0x10436 <copy>
   1106c:	91 c1       	rjmp	.+802    	; 0x11390 <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"cd", (ind + 1), argc))
   1106e:	98 01       	movw	r18, r16
   11070:	a7 01       	movw	r20, r14
   11072:	6f e1       	ldi	r22, 0x1F	; 31
   11074:	7b e0       	ldi	r23, 0x0B	; 11
   11076:	c6 01       	movw	r24, r12
   11078:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   1107c:	89 2b       	or	r24, r25
   1107e:	59 f0       	breq	.+22     	; 0x11096 <posix_tests+0x17a>
    {
        chdir(argv[ind]);
   11080:	73 01       	movw	r14, r6
   11082:	ee 0c       	add	r14, r14
   11084:	ff 1c       	adc	r15, r15
   11086:	f4 01       	movw	r30, r8
   11088:	ee 0d       	add	r30, r14
   1108a:	ff 1d       	adc	r31, r15
   1108c:	80 81       	ld	r24, Z
   1108e:	91 81       	ldd	r25, Z+1	; 0x01
   11090:	0e 94 56 7a 	call	0xf4ac	; 0xf4ac <chdir>
   11094:	7d c1       	rjmp	.+762    	; 0x11390 <posix_tests+0x474>
        return(1);
    }


    if (MATCHARGS(ptr,"hexdump", (ind + 1), argc))
   11096:	98 01       	movw	r18, r16
   11098:	a7 01       	movw	r20, r14
   1109a:	62 e2       	ldi	r22, 0x22	; 34
   1109c:	7b e0       	ldi	r23, 0x0B	; 11
   1109e:	c6 01       	movw	r24, r12
   110a0:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   110a4:	89 2b       	or	r24, r25
   110a6:	a1 f1       	breq	.+104    	; 0x11110 <posix_tests+0x1f4>
   110a8:	73 01       	movw	r14, r6
   110aa:	ee 0c       	add	r14, r14
   110ac:	ff 1c       	adc	r15, r15
   110ae:	e8 0c       	add	r14, r8
   110b0:	f9 1c       	adc	r15, r9
   110b2:	57 01       	movw	r10, r14
   110b4:	47 01       	movw	r8, r14
   110b6:	63 01       	movw	r12, r6
   110b8:	41 2c       	mov	r4, r1
   110ba:	51 2c       	mov	r5, r1
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   110bc:	c0 16       	cp	r12, r16
   110be:	d1 06       	cpc	r13, r17
   110c0:	1c f5       	brge	.+70     	; 0x11108 <posix_tests+0x1ec>
        {
            if(MATCH(argv[i],"-p"))
   110c2:	61 e1       	ldi	r22, 0x11	; 17
   110c4:	7b e0       	ldi	r23, 0x0B	; 11
   110c6:	f4 01       	movw	r30, r8
   110c8:	81 91       	ld	r24, Z+
   110ca:	91 91       	ld	r25, Z+
   110cc:	4f 01       	movw	r8, r30
   110ce:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <MATCH>
   110d2:	89 2b       	or	r24, r25
   110d4:	19 f0       	breq	.+6      	; 0x110dc <posix_tests+0x1c0>
                page = 1;
   110d6:	44 24       	eor	r4, r4
   110d8:	43 94       	inc	r4
   110da:	51 2c       	mov	r5, r1

    if (MATCHARGS(ptr,"hexdump", (ind + 1), argc))
    {
        int i;
        int page = 0;
        for(i=ind;i<argc;++i)
   110dc:	ff ef       	ldi	r31, 0xFF	; 255
   110de:	cf 1a       	sub	r12, r31
   110e0:	df 0a       	sbc	r13, r31
   110e2:	ec cf       	rjmp	.-40     	; 0x110bc <posix_tests+0x1a0>
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
        {
            if(!MATCH(argv[i],"-p"))
   110e4:	61 e1       	ldi	r22, 0x11	; 17
   110e6:	7b e0       	ldi	r23, 0x0B	; 11
   110e8:	f5 01       	movw	r30, r10
   110ea:	81 91       	ld	r24, Z+
   110ec:	91 91       	ld	r25, Z+
   110ee:	5f 01       	movw	r10, r30
   110f0:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <MATCH>
   110f4:	89 2b       	or	r24, r25
   110f6:	29 f4       	brne	.+10     	; 0x11102 <posix_tests+0x1e6>
                hexdump(argv[ind], page);
   110f8:	b2 01       	movw	r22, r4
   110fa:	f7 01       	movw	r30, r14
   110fc:	80 81       	ld	r24, Z
   110fe:	91 81       	ldd	r25, Z+1	; 0x01
   11100:	1a db       	rcall	.-2508   	; 0x10736 <hexdump>
        for(i=ind;i<argc;++i)
        {
            if(MATCH(argv[i],"-p"))
                page = 1;
        }
        for(i=ind;i<argc;++i)
   11102:	ff ef       	ldi	r31, 0xFF	; 255
   11104:	6f 1a       	sub	r6, r31
   11106:	7f 0a       	sbc	r7, r31
   11108:	60 16       	cp	r6, r16
   1110a:	71 06       	cpc	r7, r17
   1110c:	5c f3       	brlt	.-42     	; 0x110e4 <posix_tests+0x1c8>
   1110e:	40 c1       	rjmp	.+640    	; 0x11390 <posix_tests+0x474>
                hexdump(argv[ind], page);
        }
        return(1);
    }

    if (MATCHARGS(ptr,"log", (ind + 2), argc))
   11110:	98 01       	movw	r18, r16
   11112:	a5 01       	movw	r20, r10
   11114:	6a e2       	ldi	r22, 0x2A	; 42
   11116:	7b e0       	ldi	r23, 0x0B	; 11
   11118:	c6 01       	movw	r24, r12
   1111a:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   1111e:	89 2b       	or	r24, r25
   11120:	61 f0       	breq	.+24     	; 0x1113a <posix_tests+0x21e>
    {
        logfile(argv[ind],argv[ind+1]);
   11122:	ee 0c       	add	r14, r14
   11124:	ff 1c       	adc	r15, r15
   11126:	f4 01       	movw	r30, r8
   11128:	ee 0d       	add	r30, r14
   1112a:	ff 1d       	adc	r31, r15
   1112c:	60 81       	ld	r22, Z
   1112e:	71 81       	ldd	r23, Z+1	; 0x01
   11130:	32 97       	sbiw	r30, 0x02	; 2
   11132:	80 81       	ld	r24, Z
   11134:	91 81       	ldd	r25, Z+1	; 0x01
   11136:	ec dd       	rcall	.-1064   	; 0x10d10 <logfile>
   11138:	2b c1       	rjmp	.+598    	; 0x11390 <posix_tests+0x474>
        return(1);
    }

    if (MATCHARGS(ptr,"ls", (ind + 0), argc))
   1113a:	98 01       	movw	r18, r16
   1113c:	a3 01       	movw	r20, r6
   1113e:	67 e3       	ldi	r22, 0x37	; 55
   11140:	78 e0       	ldi	r23, 0x08	; 8
   11142:	c6 01       	movw	r24, r12
   11144:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   11148:	89 2b       	or	r24, r25
   1114a:	69 f1       	breq	.+90     	; 0x111a6 <posix_tests+0x28a>
   1114c:	73 01       	movw	r14, r6
   1114e:	ee 0c       	add	r14, r14
   11150:	ff 1c       	adc	r15, r15
   11152:	e8 0c       	add	r14, r8
   11154:	f9 1c       	adc	r15, r9
   11156:	c1 2c       	mov	r12, r1
   11158:	d1 2c       	mov	r13, r1
    {
        int i;
        int args = 0;
        for(i=ind;i<argc;++i)
   1115a:	c6 01       	movw	r24, r12
   1115c:	86 0d       	add	r24, r6
   1115e:	97 1d       	adc	r25, r7
   11160:	80 17       	cp	r24, r16
   11162:	91 07       	cpc	r25, r17
   11164:	b4 f4       	brge	.+44     	; 0x11192 <posix_tests+0x276>
        {
            if(!MATCH(argv[i],"-l"))
   11166:	6e e2       	ldi	r22, 0x2E	; 46
   11168:	7b e0       	ldi	r23, 0x0B	; 11
   1116a:	f7 01       	movw	r30, r14
   1116c:	80 81       	ld	r24, Z
   1116e:	91 81       	ldd	r25, Z+1	; 0x01
   11170:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <MATCH>
   11174:	89 2b       	or	r24, r25
                ls(argv[i],1);
   11176:	31 f4       	brne	.+12     	; 0x11184 <posix_tests+0x268>
   11178:	61 e0       	ldi	r22, 0x01	; 1
   1117a:	70 e0       	ldi	r23, 0x00	; 0
   1117c:	f7 01       	movw	r30, r14
   1117e:	80 81       	ld	r24, Z
   11180:	91 81       	ldd	r25, Z+1	; 0x01
            ++args;
   11182:	aa dc       	rcall	.-1708   	; 0x10ad8 <ls>
   11184:	ff ef       	ldi	r31, 0xFF	; 255
   11186:	cf 1a       	sub	r12, r31
   11188:	df 0a       	sbc	r13, r31
   1118a:	82 e0       	ldi	r24, 0x02	; 2
   1118c:	e8 0e       	add	r14, r24
   1118e:	f1 1c       	adc	r15, r1
        }
        if(!args)
   11190:	e4 cf       	rjmp	.-56     	; 0x1115a <posix_tests+0x23e>
   11192:	c1 14       	cp	r12, r1
   11194:	d1 04       	cpc	r13, r1
        {
            ls("",1);
   11196:	09 f0       	breq	.+2      	; 0x1119a <posix_tests+0x27e>
   11198:	fb c0       	rjmp	.+502    	; 0x11390 <posix_tests+0x474>
   1119a:	61 e0       	ldi	r22, 0x01	; 1
   1119c:	70 e0       	ldi	r23, 0x00	; 0
   1119e:	8d e9       	ldi	r24, 0x9D	; 157
   111a0:	9b e0       	ldi	r25, 0x0B	; 11
   111a2:	9a dc       	rcall	.-1740   	; 0x10ad8 <ls>
        }
        return(1);
    }

    if (MATCHARGS(ptr,"mkfs", (ind + 1), argc))
   111a4:	f5 c0       	rjmp	.+490    	; 0x11390 <posix_tests+0x474>
   111a6:	98 01       	movw	r18, r16
   111a8:	a7 01       	movw	r20, r14
   111aa:	61 e3       	ldi	r22, 0x31	; 49
   111ac:	7b e0       	ldi	r23, 0x0B	; 11
   111ae:	c6 01       	movw	r24, r12
   111b0:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   111b4:	89 2b       	or	r24, r25
    {

        mkfs(argv[ind++]);
   111b6:	59 f0       	breq	.+22     	; 0x111ce <posix_tests+0x2b2>
   111b8:	73 01       	movw	r14, r6
   111ba:	ee 0c       	add	r14, r14
   111bc:	ff 1c       	adc	r15, r15
   111be:	f4 01       	movw	r30, r8
   111c0:	ee 0d       	add	r30, r14
   111c2:	ff 1d       	adc	r31, r15
   111c4:	80 81       	ld	r24, Z
   111c6:	91 81       	ldd	r25, Z+1	; 0x01
   111c8:	0e 94 2e 7c 	call	0xf85c	; 0xf85c <mkfs>
        return(1);
    }

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
   111cc:	e1 c0       	rjmp	.+450    	; 0x11390 <posix_tests+0x474>
   111ce:	98 01       	movw	r18, r16
   111d0:	a7 01       	movw	r20, r14
   111d2:	66 e3       	ldi	r22, 0x36	; 54
   111d4:	7b e0       	ldi	r23, 0x0B	; 11
   111d6:	c6 01       	movw	r24, r12
   111d8:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   111dc:	89 2b       	or	r24, r25
    {
        int mode = 0777;
        if((ind+2) <= argc)
   111de:	19 f1       	breq	.+70     	; 0x11226 <posix_tests+0x30a>
   111e0:	e0 16       	cp	r14, r16
   111e2:	f1 06       	cpc	r15, r17
        {
            mode = strtol(argv[ind+1],NULL,8);
   111e4:	7c f4       	brge	.+30     	; 0x11204 <posix_tests+0x2e8>
   111e6:	ee 0c       	add	r14, r14
   111e8:	ff 1c       	adc	r15, r15
   111ea:	f4 01       	movw	r30, r8
   111ec:	ee 0d       	add	r30, r14
   111ee:	ff 1d       	adc	r31, r15
   111f0:	48 e0       	ldi	r20, 0x08	; 8
   111f2:	50 e0       	ldi	r21, 0x00	; 0
   111f4:	60 e0       	ldi	r22, 0x00	; 0
   111f6:	70 e0       	ldi	r23, 0x00	; 0
   111f8:	80 81       	ld	r24, Z
   111fa:	91 81       	ldd	r25, Z+1	; 0x01
   111fc:	0e 94 fd 44 	call	0x89fa	; 0x89fa <strtol>
   11200:	ab 01       	movw	r20, r22
        return(1);
    }

    if (MATCHARGS(ptr,"mkdir", (ind + 1), argc))
    {
        int mode = 0777;
   11202:	02 c0       	rjmp	.+4      	; 0x11208 <posix_tests+0x2ec>
   11204:	4f ef       	ldi	r20, 0xFF	; 255
        if((ind+2) <= argc)
        {
            mode = strtol(argv[ind+1],NULL,8);
        }
        mkdir(argv[ind],mode);
   11206:	51 e0       	ldi	r21, 0x01	; 1
   11208:	05 2e       	mov	r0, r21
   1120a:	00 0c       	add	r0, r0
   1120c:	66 0b       	sbc	r22, r22
   1120e:	77 0b       	sbc	r23, r23
   11210:	73 01       	movw	r14, r6
   11212:	ee 0c       	add	r14, r14
   11214:	ff 1c       	adc	r15, r15
   11216:	f4 01       	movw	r30, r8
   11218:	ee 0d       	add	r30, r14
   1121a:	ff 1d       	adc	r31, r15
   1121c:	80 81       	ld	r24, Z
   1121e:	91 81       	ldd	r25, Z+1	; 0x01
   11220:	0e 94 c3 7a 	call	0xf586	; 0xf586 <mkdir>
        return(1);
    }

    if (MATCHARGS(ptr,"page", (ind + 1), argc))
   11224:	b5 c0       	rjmp	.+362    	; 0x11390 <posix_tests+0x474>
   11226:	98 01       	movw	r18, r16
   11228:	a7 01       	movw	r20, r14
   1122a:	6c e3       	ldi	r22, 0x3C	; 60
   1122c:	7b e0       	ldi	r23, 0x0B	; 11
   1122e:	c6 01       	movw	r24, r12
   11230:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   11234:	89 2b       	or	r24, r25
    {
        setpage(atoi(argv[ind]));
   11236:	79 f0       	breq	.+30     	; 0x11256 <posix_tests+0x33a>
   11238:	73 01       	movw	r14, r6
   1123a:	ee 0c       	add	r14, r14
   1123c:	ff 1c       	adc	r15, r15
   1123e:	f4 01       	movw	r30, r8
   11240:	ee 0d       	add	r30, r14
   11242:	ff 1d       	adc	r31, r15
   11244:	80 81       	ld	r24, Z
   11246:	91 81       	ldd	r25, Z+1	; 0x01
   11248:	0e 94 61 45 	call	0x8ac2	; 0x8ac2 <atoi>
/// @retrun void
static int _pagesize = 25;
MEMSPACE
int setpage(int count)
{
    _pagesize = count;
   1124c:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <_pagesize+0x1>
   11250:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <_pagesize>
    {
        setpage(atoi(argv[ind]));
        return(1);
    }

    if (MATCHARGS(ptr,"pwd", (ind + 0), argc))
   11254:	9d c0       	rjmp	.+314    	; 0x11390 <posix_tests+0x474>
   11256:	98 01       	movw	r18, r16
   11258:	a3 01       	movw	r20, r6
   1125a:	61 e4       	ldi	r22, 0x41	; 65
   1125c:	7b e0       	ldi	r23, 0x0B	; 11
   1125e:	c6 01       	movw	r24, r12
   11260:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   11264:	89 2b       	or	r24, r25
    {
        char path[256];
        printf("%s\n", getcwd(path, sizeof(path)-2));
   11266:	a9 f0       	breq	.+42     	; 0x11292 <posix_tests+0x376>
   11268:	6e ef       	ldi	r22, 0xFE	; 254
   1126a:	70 e0       	ldi	r23, 0x00	; 0
   1126c:	ce 01       	movw	r24, r28
   1126e:	01 96       	adiw	r24, 0x01	; 1
   11270:	0e 94 9e 7a 	call	0xf53c	; 0xf53c <getcwd>
   11274:	9f 93       	push	r25
   11276:	8f 93       	push	r24
   11278:	84 e5       	ldi	r24, 0x54	; 84
   1127a:	9e e0       	ldi	r25, 0x0E	; 14
   1127c:	1f 92       	push	r1
   1127e:	9f 93       	push	r25
   11280:	8f 93       	push	r24
   11282:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   11286:	0f 90       	pop	r0
   11288:	0f 90       	pop	r0
   1128a:	0f 90       	pop	r0
   1128c:	0f 90       	pop	r0
   1128e:	0f 90       	pop	r0
        return(1);
    }

    if (MATCHARGS(ptr,"rename", (ind + 2), argc))
   11290:	7f c0       	rjmp	.+254    	; 0x11390 <posix_tests+0x474>
   11292:	98 01       	movw	r18, r16
   11294:	a5 01       	movw	r20, r10
   11296:	65 e4       	ldi	r22, 0x45	; 69
   11298:	7b e0       	ldi	r23, 0x0B	; 11
   1129a:	c6 01       	movw	r24, r12
   1129c:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   112a0:	89 2b       	or	r24, r25
    {
        rename(argv[ind],argv[ind+1]);
   112a2:	69 f0       	breq	.+26     	; 0x112be <posix_tests+0x3a2>
   112a4:	ee 0c       	add	r14, r14
   112a6:	ff 1c       	adc	r15, r15
   112a8:	f4 01       	movw	r30, r8
   112aa:	ee 0d       	add	r30, r14
   112ac:	ff 1d       	adc	r31, r15
   112ae:	60 81       	ld	r22, Z
   112b0:	71 81       	ldd	r23, Z+1	; 0x01
   112b2:	32 97       	sbiw	r30, 0x02	; 2
   112b4:	80 81       	ld	r24, Z
   112b6:	91 81       	ldd	r25, Z+1	; 0x01
   112b8:	0e 94 f1 7a 	call	0xf5e2	; 0xf5e2 <rename>
        return(1);
    }

    if (MATCHARGS(ptr,"rm", (ind + 1), argc))
   112bc:	69 c0       	rjmp	.+210    	; 0x11390 <posix_tests+0x474>
   112be:	98 01       	movw	r18, r16
   112c0:	a7 01       	movw	r20, r14
   112c2:	6c e4       	ldi	r22, 0x4C	; 76
   112c4:	7b e0       	ldi	r23, 0x0B	; 11
   112c6:	c6 01       	movw	r24, r12
   112c8:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   112cc:	89 2b       	or	r24, r25
    {
        unlink(argv[ind]);
   112ce:	59 f0       	breq	.+22     	; 0x112e6 <posix_tests+0x3ca>
   112d0:	73 01       	movw	r14, r6
   112d2:	ee 0c       	add	r14, r14
   112d4:	ff 1c       	adc	r15, r15
   112d6:	f4 01       	movw	r30, r8
   112d8:	ee 0d       	add	r30, r14
   112da:	ff 1d       	adc	r31, r15
   112dc:	80 81       	ld	r24, Z
   112de:	91 81       	ldd	r25, Z+1	; 0x01
   112e0:	0e 94 10 7b 	call	0xf620	; 0xf620 <unlink>
        return(1);
    }

    if (MATCHARGS(ptr,"sum", (ind + 1), argc))
   112e4:	55 c0       	rjmp	.+170    	; 0x11390 <posix_tests+0x474>
   112e6:	98 01       	movw	r18, r16
   112e8:	a7 01       	movw	r20, r14
   112ea:	6f e4       	ldi	r22, 0x4F	; 79
   112ec:	7b e0       	ldi	r23, 0x0B	; 11
   112ee:	c6 01       	movw	r24, r12
   112f0:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   112f4:	89 2b       	or	r24, r25
    {
        sum(argv[ind]);
   112f6:	51 f0       	breq	.+20     	; 0x1130c <posix_tests+0x3f0>
   112f8:	73 01       	movw	r14, r6
   112fa:	ee 0c       	add	r14, r14
   112fc:	ff 1c       	adc	r15, r15
   112fe:	f4 01       	movw	r30, r8
   11300:	ee 0d       	add	r30, r14
   11302:	ff 1d       	adc	r31, r15
   11304:	80 81       	ld	r24, Z
   11306:	91 81       	ldd	r25, Z+1	; 0x01
   11308:	53 dd       	rcall	.-1370   	; 0x10db0 <sum>
        return(1);
    }

    if (MATCHARGS(ptr,"stat", (ind + 1), argc))
   1130a:	42 c0       	rjmp	.+132    	; 0x11390 <posix_tests+0x474>
   1130c:	98 01       	movw	r18, r16
   1130e:	a7 01       	movw	r20, r14
   11310:	63 e5       	ldi	r22, 0x53	; 83
   11312:	7b e0       	ldi	r23, 0x0B	; 11
   11314:	c6 01       	movw	r24, r12
   11316:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   1131a:	89 2b       	or	r24, r25
    {
        struct stat p;  
        stat(argv[ind], &p);                        // POSIX test
   1131c:	91 f0       	breq	.+36     	; 0x11342 <posix_tests+0x426>
   1131e:	73 01       	movw	r14, r6
   11320:	ee 0c       	add	r14, r14
   11322:	ff 1c       	adc	r15, r15
   11324:	f4 01       	movw	r30, r8
   11326:	ee 0d       	add	r30, r14
   11328:	ff 1d       	adc	r31, r15
   1132a:	be 01       	movw	r22, r28
   1132c:	6f 5f       	subi	r22, 0xFF	; 255
   1132e:	7f 4f       	sbci	r23, 0xFF	; 255
   11330:	80 81       	ld	r24, Z
   11332:	91 81       	ldd	r25, Z+1	; 0x01
   11334:	0e 94 e6 7c 	call	0xf9cc	; 0xf9cc <stat>
        dump_stat(&p);
   11338:	ce 01       	movw	r24, r28
   1133a:	01 96       	adiw	r24, 0x01	; 1
   1133c:	0e 94 9b 79 	call	0xf336	; 0xf336 <dump_stat>
        return(1);
    }

    if (MATCHARGS(ptr,"rmdir", (ind + 1), argc))
   11340:	27 c0       	rjmp	.+78     	; 0x11390 <posix_tests+0x474>
   11342:	98 01       	movw	r18, r16
   11344:	a7 01       	movw	r20, r14
   11346:	68 e5       	ldi	r22, 0x58	; 88
   11348:	7b e0       	ldi	r23, 0x0B	; 11
   1134a:	c6 01       	movw	r24, r12
   1134c:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   11350:	89 2b       	or	r24, r25
    {
        rmdir(argv[ind]);
   11352:	59 f0       	breq	.+22     	; 0x1136a <posix_tests+0x44e>
   11354:	73 01       	movw	r14, r6
   11356:	ee 0c       	add	r14, r14
   11358:	ff 1c       	adc	r15, r15
   1135a:	f4 01       	movw	r30, r8
   1135c:	ee 0d       	add	r30, r14
   1135e:	ff 1d       	adc	r31, r15
   11360:	80 81       	ld	r24, Z
   11362:	91 81       	ldd	r25, Z+1	; 0x01
   11364:	0e 94 2f 7b 	call	0xf65e	; 0xf65e <rmdir>
        return(1);
    }

    if (MATCHARGS(ptr,"upload", (ind + 1), argc))
   11368:	13 c0       	rjmp	.+38     	; 0x11390 <posix_tests+0x474>
   1136a:	98 01       	movw	r18, r16
   1136c:	a7 01       	movw	r20, r14
   1136e:	6e e5       	ldi	r22, 0x5E	; 94
   11370:	7b e0       	ldi	r23, 0x0B	; 11
   11372:	c6 01       	movw	r24, r12
   11374:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   11378:	89 2b       	or	r24, r25
    {
        upload(argv[ind]);
   1137a:	09 f4       	brne	.+2      	; 0x1137e <posix_tests+0x462>
   1137c:	db cd       	rjmp	.-1098   	; 0x10f34 <posix_tests+0x18>
   1137e:	73 01       	movw	r14, r6
   11380:	ee 0c       	add	r14, r14
   11382:	ff 1c       	adc	r15, r15
   11384:	f4 01       	movw	r30, r8
   11386:	ee 0d       	add	r30, r14
   11388:	ff 1d       	adc	r31, r15
   1138a:	80 81       	ld	r24, Z
        return(1);
   1138c:	91 81       	ldd	r25, Z+1	; 0x01
   1138e:	60 dd       	rcall	.-1344   	; 0x10e50 <upload>
    }

    return(0);
}
   11390:	81 e0       	ldi	r24, 0x01	; 1
   11392:	90 e0       	ldi	r25, 0x00	; 0
   11394:	d3 95       	inc	r29
   11396:	e0 e1       	ldi	r30, 0x10	; 16
   11398:	0c 94 df e8 	jmp	0x1d1be	; 0x1d1be <__epilogue_restores__+0x4>

0001139c <gpib_timer_init>:
/// - Has some platform dependent code.
/// @return  void

void gpib_timer_init()
{
    if(set_timers(gpib_timer_task,1) == -1)       // Install Clock Task
   1139c:	61 e0       	ldi	r22, 0x01	; 1
   1139e:	70 e0       	ldi	r23, 0x00	; 0
   113a0:	8b e6       	ldi	r24, 0x6B	; 107
   113a2:	9b e8       	ldi	r25, 0x8B	; 139
   113a4:	0e 94 43 33 	call	0x6686	; 0x6686 <set_timers>
   113a8:	01 96       	adiw	r24, 0x01	; 1
   113aa:	51 f4       	brne	.+20     	; 0x113c0 <gpib_timer_init+0x24>
        printf("GPIB Clock task init failed\n");
   113ac:	85 ef       	ldi	r24, 0xF5	; 245
   113ae:	9f e0       	ldi	r25, 0x0F	; 15
   113b0:	1f 92       	push	r1
   113b2:	9f 93       	push	r25
   113b4:	8f 93       	push	r24
   113b6:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   113ba:	0f 90       	pop	r0
   113bc:	0f 90       	pop	r0

    gpib_timer_reset();
   113be:	0f 90       	pop	r0
   113c0:	78 c1       	rjmp	.+752    	; 0x116b2 <gpib_timer_reset>
   113c2:	08 95       	ret

000113c4 <reverse_8bits>:
/// - GPIB D1 controls last device.
///
/// @param [in] mask: bit mask to reverse.
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
   113c4:	28 2f       	mov	r18, r24
   113c6:	98 e0       	ldi	r25, 0x08	; 8
    int8_t i;
    uint8_t rmask = 0;
   113c8:	80 e0       	ldi	r24, 0x00	; 0
    for(i=0;i<8;++i)
    {
        rmask <<= 1;
   113ca:	88 0f       	add	r24, r24
        if(mask & 1)
   113cc:	20 fd       	sbrc	r18, 0
            rmask |= 1;
   113ce:	81 60       	ori	r24, 0x01	; 1
        mask >>= 1;
   113d0:	26 95       	lsr	r18
   113d2:	91 50       	subi	r25, 0x01	; 1
/// @return  reversed bits
uint8_t reverse_8bits(uint8_t mask)
{
    int8_t i;
    uint8_t rmask = 0;
    for(i=0;i<8;++i)
   113d4:	d1 f7       	brne	.-12     	; 0x113ca <reverse_8bits+0x6>
        if(mask & 1)
            rmask |= 1;
        mask >>= 1;
    }
    return(rmask & 0xff);
}
   113d6:	08 95       	ret

000113d8 <ppr_set>:
   113d8:	f5 df       	rcall	.-22     	; 0x113c4 <reverse_8bits>
   113da:	80 93 14 19 	sts	0x1914, r24	; 0x801914 <_ppr_reg>
   113de:	0e 94 b3 2c 	call	0x5966	; 0x5966 <SPI0_TXRX_Byte>
   113e2:	2a 9a       	sbi	0x05, 2	; 5
   113e4:	22 9a       	sbi	0x04, 2	; 4
   113e6:	2a 98       	cbi	0x05, 2	; 5
   113e8:	22 9a       	sbi	0x04, 2	; 4
   113ea:	08 95       	ret

000113ec <ppr_reg>:
   113ec:	80 91 14 19 	lds	r24, 0x1914	; 0x801914 <_ppr_reg>
   113f0:	e9 cf       	rjmp	.-46     	; 0x113c4 <reverse_8bits>
   113f2:	08 95       	ret

000113f4 <ppr_init>:
   113f4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   113f8:	81 ff       	sbrs	r24, 1
   113fa:	0a c0       	rjmp	.+20     	; 0x11410 <ppr_init+0x1c>
   113fc:	82 ee       	ldi	r24, 0xE2	; 226
   113fe:	9f e0       	ldi	r25, 0x0F	; 15
   11400:	1f 92       	push	r1
   11402:	9f 93       	push	r25
   11404:	8f 93       	push	r24
   11406:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1140a:	0f 90       	pop	r0
   1140c:	0f 90       	pop	r0
   1140e:	0f 90       	pop	r0
   11410:	80 e0       	ldi	r24, 0x00	; 0
   11412:	e2 cf       	rjmp	.-60     	; 0x113d8 <ppr_set>
   11414:	08 95       	ret

00011416 <ppr_bit_set>:
   11416:	21 e0       	ldi	r18, 0x01	; 1
   11418:	30 e0       	ldi	r19, 0x00	; 0
   1141a:	01 c0       	rjmp	.+2      	; 0x1141e <ppr_bit_set+0x8>
   1141c:	22 0f       	add	r18, r18
   1141e:	8a 95       	dec	r24
   11420:	ea f7       	brpl	.-6      	; 0x1141c <ppr_bit_set+0x6>
   11422:	80 91 14 19 	lds	r24, 0x1914	; 0x801914 <_ppr_reg>
   11426:	82 2b       	or	r24, r18
   11428:	80 93 14 19 	sts	0x1914, r24	; 0x801914 <_ppr_reg>
   1142c:	d5 cf       	rjmp	.-86     	; 0x113d8 <ppr_set>
   1142e:	08 95       	ret

00011430 <ppr_bit_clr>:
   11430:	21 e0       	ldi	r18, 0x01	; 1
   11432:	30 e0       	ldi	r19, 0x00	; 0
   11434:	01 c0       	rjmp	.+2      	; 0x11438 <ppr_bit_clr+0x8>
   11436:	22 0f       	add	r18, r18
   11438:	8a 95       	dec	r24
   1143a:	ea f7       	brpl	.-6      	; 0x11436 <ppr_bit_clr+0x6>
   1143c:	20 95       	com	r18
   1143e:	80 91 14 19 	lds	r24, 0x1914	; 0x801914 <_ppr_reg>
   11442:	82 23       	and	r24, r18
   11444:	80 93 14 19 	sts	0x1914, r24	; 0x801914 <_ppr_reg>
   11448:	c7 cf       	rjmp	.-114    	; 0x113d8 <ppr_set>
   1144a:	08 95       	ret

0001144c <dbf_open>:
   1144c:	0f 93       	push	r16
   1144e:	1f 93       	push	r17
   11450:	cf 93       	push	r28
   11452:	df 93       	push	r29
   11454:	16 2f       	mov	r17, r22
   11456:	07 2f       	mov	r16, r23
   11458:	0e 94 aa 56 	call	0xad54	; 0xad54 <f_open>
   1145c:	ec 01       	movw	r28, r24
   1145e:	89 2b       	or	r24, r25
   11460:	89 f0       	breq	.+34     	; 0x11484 <dbf_open+0x38>
   11462:	0f 93       	push	r16
   11464:	1f 93       	push	r17
   11466:	81 ed       	ldi	r24, 0xD1	; 209
   11468:	9f e0       	ldi	r25, 0x0F	; 15
   1146a:	1f 92       	push	r1
   1146c:	9f 93       	push	r25
   1146e:	8f 93       	push	r24
   11470:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   11474:	ce 01       	movw	r24, r28
   11476:	0e 94 36 73 	call	0xe66c	; 0xe66c <put_rc>
   1147a:	0f 90       	pop	r0
   1147c:	0f 90       	pop	r0
   1147e:	0f 90       	pop	r0
   11480:	0f 90       	pop	r0
   11482:	0f 90       	pop	r0
   11484:	ce 01       	movw	r24, r28
   11486:	df 91       	pop	r29
   11488:	cf 91       	pop	r28
   1148a:	1f 91       	pop	r17
   1148c:	0f 91       	pop	r16
   1148e:	08 95       	ret

00011490 <dbf_read>:
   11490:	cf 93       	push	r28
   11492:	df 93       	push	r29
   11494:	0e 94 a6 58 	call	0xb14c	; 0xb14c <f_read>
   11498:	ec 01       	movw	r28, r24
   1149a:	89 2b       	or	r24, r25
   1149c:	69 f0       	breq	.+26     	; 0x114b8 <dbf_read+0x28>
   1149e:	84 ec       	ldi	r24, 0xC4	; 196
   114a0:	9f e0       	ldi	r25, 0x0F	; 15
   114a2:	1f 92       	push	r1
   114a4:	9f 93       	push	r25
   114a6:	8f 93       	push	r24
   114a8:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   114ac:	ce 01       	movw	r24, r28
   114ae:	0e 94 36 73 	call	0xe66c	; 0xe66c <put_rc>
   114b2:	0f 90       	pop	r0
   114b4:	0f 90       	pop	r0
   114b6:	0f 90       	pop	r0
   114b8:	ce 01       	movw	r24, r28
   114ba:	df 91       	pop	r29
   114bc:	cf 91       	pop	r28
   114be:	08 95       	ret

000114c0 <dbf_write>:
   114c0:	cf 93       	push	r28
   114c2:	df 93       	push	r29
   114c4:	0e 94 f1 59 	call	0xb3e2	; 0xb3e2 <f_write>
   114c8:	ec 01       	movw	r28, r24
   114ca:	89 2b       	or	r24, r25
   114cc:	69 f0       	breq	.+26     	; 0x114e8 <dbf_write+0x28>
   114ce:	86 eb       	ldi	r24, 0xB6	; 182
   114d0:	9f e0       	ldi	r25, 0x0F	; 15
   114d2:	1f 92       	push	r1
   114d4:	9f 93       	push	r25
   114d6:	8f 93       	push	r24
   114d8:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   114dc:	ce 01       	movw	r24, r28
   114de:	0e 94 36 73 	call	0xe66c	; 0xe66c <put_rc>
   114e2:	0f 90       	pop	r0
   114e4:	0f 90       	pop	r0
   114e6:	0f 90       	pop	r0
   114e8:	ce 01       	movw	r24, r28
   114ea:	df 91       	pop	r29
   114ec:	cf 91       	pop	r28
   114ee:	08 95       	ret

000114f0 <dbf_lseek>:
   114f0:	cf 93       	push	r28
   114f2:	df 93       	push	r29
   114f4:	0e 94 b0 5d 	call	0xbb60	; 0xbb60 <f_lseek>
   114f8:	ec 01       	movw	r28, r24
   114fa:	89 2b       	or	r24, r25
   114fc:	69 f0       	breq	.+26     	; 0x11518 <dbf_lseek+0x28>
   114fe:	89 ea       	ldi	r24, 0xA9	; 169
   11500:	9f e0       	ldi	r25, 0x0F	; 15
   11502:	1f 92       	push	r1
   11504:	9f 93       	push	r25
   11506:	8f 93       	push	r24
   11508:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1150c:	ce 01       	movw	r24, r28
   1150e:	0e 94 36 73 	call	0xe66c	; 0xe66c <put_rc>
   11512:	0f 90       	pop	r0
   11514:	0f 90       	pop	r0
   11516:	0f 90       	pop	r0
   11518:	ce 01       	movw	r24, r28
   1151a:	df 91       	pop	r29
   1151c:	cf 91       	pop	r28
   1151e:	08 95       	ret

00011520 <dbf_close>:
   11520:	cf 93       	push	r28
   11522:	df 93       	push	r29
   11524:	0e 94 08 5c 	call	0xb810	; 0xb810 <f_close>
   11528:	ec 01       	movw	r28, r24
   1152a:	89 2b       	or	r24, r25
   1152c:	69 f0       	breq	.+26     	; 0x11548 <dbf_close+0x28>
   1152e:	8b e9       	ldi	r24, 0x9B	; 155
   11530:	9f e0       	ldi	r25, 0x0F	; 15
   11532:	1f 92       	push	r1
   11534:	9f 93       	push	r25
   11536:	8f 93       	push	r24
   11538:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1153c:	ce 01       	movw	r24, r28
   1153e:	0e 94 36 73 	call	0xe66c	; 0xe66c <put_rc>
   11542:	0f 90       	pop	r0
   11544:	0f 90       	pop	r0
   11546:	0f 90       	pop	r0
   11548:	ce 01       	movw	r24, r28
   1154a:	df 91       	pop	r29
   1154c:	cf 91       	pop	r28
   1154e:	08 95       	ret

00011550 <dbf_open_read>:
   11550:	a6 e2       	ldi	r26, 0x26	; 38
   11552:	b2 e0       	ldi	r27, 0x02	; 2
   11554:	ee ea       	ldi	r30, 0xAE	; 174
   11556:	fa e8       	ldi	r31, 0x8A	; 138
   11558:	0c 94 c7 e8 	jmp	0x1d18e	; 0x1d18e <__prologue_saves__+0xc>
   1155c:	4a 01       	movw	r8, r20
   1155e:	5b 01       	movw	r10, r22
   11560:	69 01       	movw	r12, r18
   11562:	cb 5d       	subi	r28, 0xDB	; 219
   11564:	dd 4f       	sbci	r29, 0xFD	; 253
   11566:	19 82       	std	Y+1, r1	; 0x01
   11568:	18 82       	st	Y, r1
   1156a:	c5 52       	subi	r28, 0x25	; 37
   1156c:	d2 40       	sbci	r29, 0x02	; 2
   1156e:	43 e0       	ldi	r20, 0x03	; 3
   11570:	bc 01       	movw	r22, r24
   11572:	ce 01       	movw	r24, r28
   11574:	01 96       	adiw	r24, 0x01	; 1
   11576:	6a df       	rcall	.-300    	; 0x1144c <dbf_open>
   11578:	89 2b       	or	r24, r25
   1157a:	19 f0       	breq	.+6      	; 0x11582 <dbf_open_read+0x32>
   1157c:	81 e1       	ldi	r24, 0x11	; 17
   1157e:	90 e0       	ldi	r25, 0x00	; 0
   11580:	2f c0       	rjmp	.+94     	; 0x115e0 <dbf_open_read+0x90>
   11582:	b5 01       	movw	r22, r10
   11584:	a4 01       	movw	r20, r8
   11586:	ce 01       	movw	r24, r28
   11588:	01 96       	adiw	r24, 0x01	; 1
   1158a:	b2 df       	rcall	.-156    	; 0x114f0 <dbf_lseek>
   1158c:	89 2b       	or	r24, r25
   1158e:	59 f0       	breq	.+22     	; 0x115a6 <dbf_open_read+0x56>
   11590:	85 e0       	ldi	r24, 0x05	; 5
   11592:	90 e0       	ldi	r25, 0x00	; 0
   11594:	f7 01       	movw	r30, r14
   11596:	91 83       	std	Z+1, r25	; 0x01
   11598:	80 83       	st	Z, r24
   1159a:	ce 01       	movw	r24, r28
   1159c:	01 96       	adiw	r24, 0x01	; 1
   1159e:	c0 df       	rcall	.-128    	; 0x11520 <dbf_close>
   115a0:	8f ef       	ldi	r24, 0xFF	; 255
   115a2:	9f ef       	ldi	r25, 0xFF	; 255
   115a4:	27 c0       	rjmp	.+78     	; 0x115f4 <dbf_open_read+0xa4>
   115a6:	9e 01       	movw	r18, r28
   115a8:	2b 5d       	subi	r18, 0xDB	; 219
   115aa:	3d 4f       	sbci	r19, 0xFD	; 253
   115ac:	a8 01       	movw	r20, r16
   115ae:	b6 01       	movw	r22, r12
   115b0:	ce 01       	movw	r24, r28
   115b2:	01 96       	adiw	r24, 0x01	; 1
   115b4:	6d df       	rcall	.-294    	; 0x11490 <dbf_read>
   115b6:	89 2b       	or	r24, r25
   115b8:	49 f4       	brne	.+18     	; 0x115cc <dbf_open_read+0x7c>
   115ba:	cb 5d       	subi	r28, 0xDB	; 219
   115bc:	dd 4f       	sbci	r29, 0xFD	; 253
   115be:	88 81       	ld	r24, Y
   115c0:	99 81       	ldd	r25, Y+1	; 0x01
   115c2:	c5 52       	subi	r28, 0x25	; 37
   115c4:	d2 40       	sbci	r29, 0x02	; 2
   115c6:	08 17       	cp	r16, r24
   115c8:	19 07       	cpc	r17, r25
   115ca:	19 f0       	breq	.+6      	; 0x115d2 <dbf_open_read+0x82>
   115cc:	81 e0       	ldi	r24, 0x01	; 1
   115ce:	90 e0       	ldi	r25, 0x00	; 0
   115d0:	e1 cf       	rjmp	.-62     	; 0x11594 <dbf_open_read+0x44>
   115d2:	ce 01       	movw	r24, r28
   115d4:	01 96       	adiw	r24, 0x01	; 1
   115d6:	a4 df       	rcall	.-184    	; 0x11520 <dbf_close>
   115d8:	89 2b       	or	r24, r25
   115da:	31 f0       	breq	.+12     	; 0x115e8 <dbf_open_read+0x98>
   115dc:	80 e1       	ldi	r24, 0x10	; 16
   115de:	90 e0       	ldi	r25, 0x00	; 0
   115e0:	f7 01       	movw	r30, r14
   115e2:	91 83       	std	Z+1, r25	; 0x01
   115e4:	80 83       	st	Z, r24
   115e6:	dc cf       	rjmp	.-72     	; 0x115a0 <dbf_open_read+0x50>
   115e8:	cb 5d       	subi	r28, 0xDB	; 219
   115ea:	dd 4f       	sbci	r29, 0xFD	; 253
   115ec:	88 81       	ld	r24, Y
   115ee:	99 81       	ldd	r25, Y+1	; 0x01
   115f0:	c5 52       	subi	r28, 0x25	; 37
   115f2:	d2 40       	sbci	r29, 0x02	; 2
   115f4:	ca 5d       	subi	r28, 0xDA	; 218
   115f6:	dd 4f       	sbci	r29, 0xFD	; 253
   115f8:	ec e0       	ldi	r30, 0x0C	; 12
   115fa:	0c 94 e3 e8 	jmp	0x1d1c6	; 0x1d1c6 <__epilogue_restores__+0xc>

000115fe <dbf_open_write>:
   115fe:	a6 e2       	ldi	r26, 0x26	; 38
   11600:	b2 e0       	ldi	r27, 0x02	; 2
   11602:	e5 e0       	ldi	r30, 0x05	; 5
   11604:	fb e8       	ldi	r31, 0x8B	; 139
   11606:	0c 94 c7 e8 	jmp	0x1d18e	; 0x1d18e <__prologue_saves__+0xc>
   1160a:	4a 01       	movw	r8, r20
   1160c:	5b 01       	movw	r10, r22
   1160e:	69 01       	movw	r12, r18
   11610:	cb 5d       	subi	r28, 0xDB	; 219
   11612:	dd 4f       	sbci	r29, 0xFD	; 253
   11614:	19 82       	std	Y+1, r1	; 0x01
   11616:	18 82       	st	Y, r1
   11618:	c5 52       	subi	r28, 0x25	; 37
   1161a:	d2 40       	sbci	r29, 0x02	; 2
   1161c:	43 e0       	ldi	r20, 0x03	; 3
   1161e:	bc 01       	movw	r22, r24
   11620:	ce 01       	movw	r24, r28
   11622:	01 96       	adiw	r24, 0x01	; 1
   11624:	13 df       	rcall	.-474    	; 0x1144c <dbf_open>
   11626:	89 2b       	or	r24, r25
   11628:	19 f0       	breq	.+6      	; 0x11630 <dbf_open_write+0x32>
   1162a:	81 e1       	ldi	r24, 0x11	; 17
   1162c:	90 e0       	ldi	r25, 0x00	; 0
   1162e:	2f c0       	rjmp	.+94     	; 0x1168e <dbf_open_write+0x90>
   11630:	b5 01       	movw	r22, r10
   11632:	a4 01       	movw	r20, r8
   11634:	ce 01       	movw	r24, r28
   11636:	01 96       	adiw	r24, 0x01	; 1
   11638:	5b df       	rcall	.-330    	; 0x114f0 <dbf_lseek>
   1163a:	89 2b       	or	r24, r25
   1163c:	59 f0       	breq	.+22     	; 0x11654 <dbf_open_write+0x56>
   1163e:	85 e0       	ldi	r24, 0x05	; 5
   11640:	90 e0       	ldi	r25, 0x00	; 0
   11642:	f7 01       	movw	r30, r14
   11644:	91 83       	std	Z+1, r25	; 0x01
   11646:	80 83       	st	Z, r24
   11648:	ce 01       	movw	r24, r28
   1164a:	01 96       	adiw	r24, 0x01	; 1
   1164c:	69 df       	rcall	.-302    	; 0x11520 <dbf_close>
   1164e:	8f ef       	ldi	r24, 0xFF	; 255
   11650:	9f ef       	ldi	r25, 0xFF	; 255
   11652:	27 c0       	rjmp	.+78     	; 0x116a2 <dbf_open_write+0xa4>
   11654:	9e 01       	movw	r18, r28
   11656:	2b 5d       	subi	r18, 0xDB	; 219
   11658:	3d 4f       	sbci	r19, 0xFD	; 253
   1165a:	a8 01       	movw	r20, r16
   1165c:	b6 01       	movw	r22, r12
   1165e:	ce 01       	movw	r24, r28
   11660:	01 96       	adiw	r24, 0x01	; 1
   11662:	2e df       	rcall	.-420    	; 0x114c0 <dbf_write>
   11664:	89 2b       	or	r24, r25
   11666:	49 f4       	brne	.+18     	; 0x1167a <dbf_open_write+0x7c>
   11668:	cb 5d       	subi	r28, 0xDB	; 219
   1166a:	dd 4f       	sbci	r29, 0xFD	; 253
   1166c:	88 81       	ld	r24, Y
   1166e:	99 81       	ldd	r25, Y+1	; 0x01
   11670:	c5 52       	subi	r28, 0x25	; 37
   11672:	d2 40       	sbci	r29, 0x02	; 2
   11674:	08 17       	cp	r16, r24
   11676:	19 07       	cpc	r17, r25
   11678:	19 f0       	breq	.+6      	; 0x11680 <dbf_open_write+0x82>
   1167a:	81 e0       	ldi	r24, 0x01	; 1
   1167c:	90 e0       	ldi	r25, 0x00	; 0
   1167e:	e1 cf       	rjmp	.-62     	; 0x11642 <dbf_open_write+0x44>
   11680:	ce 01       	movw	r24, r28
   11682:	01 96       	adiw	r24, 0x01	; 1
   11684:	4d df       	rcall	.-358    	; 0x11520 <dbf_close>
   11686:	89 2b       	or	r24, r25
   11688:	31 f0       	breq	.+12     	; 0x11696 <dbf_open_write+0x98>
   1168a:	80 e1       	ldi	r24, 0x10	; 16
   1168c:	90 e0       	ldi	r25, 0x00	; 0
   1168e:	f7 01       	movw	r30, r14
   11690:	91 83       	std	Z+1, r25	; 0x01
   11692:	80 83       	st	Z, r24
   11694:	dc cf       	rjmp	.-72     	; 0x1164e <dbf_open_write+0x50>
   11696:	cb 5d       	subi	r28, 0xDB	; 219
   11698:	dd 4f       	sbci	r29, 0xFD	; 253
   1169a:	88 81       	ld	r24, Y
   1169c:	99 81       	ldd	r25, Y+1	; 0x01
   1169e:	c5 52       	subi	r28, 0x25	; 37
   116a0:	d2 40       	sbci	r29, 0x02	; 2
   116a2:	ca 5d       	subi	r28, 0xDA	; 218
   116a4:	dd 4f       	sbci	r29, 0xFD	; 253
   116a6:	ec e0       	ldi	r30, 0x0C	; 12
   116a8:	0c 94 e3 e8 	jmp	0x1d1c6	; 0x1d1c6 <__epilogue_restores__+0xc>

000116ac <gpib_timer_elapsed_begin>:
   116ac:	0c 94 ef 33 	jmp	0x67de	; 0x67de <clock_elapsed_begin>
   116b0:	08 95       	ret

000116b2 <gpib_timer_reset>:
   116b2:	f8 94       	cli
   116b4:	e0 e9       	ldi	r30, 0x90	; 144
   116b6:	fc e1       	ldi	r31, 0x1C	; 28
   116b8:	10 82       	st	Z, r1
   116ba:	11 82       	std	Z+1, r1	; 0x01
   116bc:	12 82       	std	Z+2, r1	; 0x02
   116be:	13 82       	std	Z+3, r1	; 0x03
   116c0:	14 82       	std	Z+4, r1	; 0x04
   116c2:	15 82       	std	Z+5, r1	; 0x05
   116c4:	16 82       	std	Z+6, r1	; 0x06
   116c6:	17 82       	std	Z+7, r1	; 0x07
   116c8:	81 e0       	ldi	r24, 0x01	; 1
   116ca:	80 87       	std	Z+8, r24	; 0x08
   116cc:	78 94       	sei
   116ce:	08 95       	ret

000116d0 <gpib_timer_elapsed_end>:
   116d0:	0c 94 f5 33 	jmp	0x67ea	; 0x67ea <clock_elapsed_end>
   116d4:	08 95       	ret

000116d6 <gpib_timer_task>:
   116d6:	f8 94       	cli
   116d8:	80 91 94 1c 	lds	r24, 0x1C94	; 0x801c94 <gpib_timer+0x4>
   116dc:	90 91 95 1c 	lds	r25, 0x1C95	; 0x801c95 <gpib_timer+0x5>
   116e0:	a0 91 96 1c 	lds	r26, 0x1C96	; 0x801c96 <gpib_timer+0x6>
   116e4:	b0 91 97 1c 	lds	r27, 0x1C97	; 0x801c97 <gpib_timer+0x7>
   116e8:	89 2b       	or	r24, r25
   116ea:	8a 2b       	or	r24, r26
   116ec:	8b 2b       	or	r24, r27
   116ee:	a1 f0       	breq	.+40     	; 0x11718 <gpib_timer_task+0x42>
   116f0:	80 91 94 1c 	lds	r24, 0x1C94	; 0x801c94 <gpib_timer+0x4>
   116f4:	90 91 95 1c 	lds	r25, 0x1C95	; 0x801c95 <gpib_timer+0x5>
   116f8:	a0 91 96 1c 	lds	r26, 0x1C96	; 0x801c96 <gpib_timer+0x6>
   116fc:	b0 91 97 1c 	lds	r27, 0x1C97	; 0x801c97 <gpib_timer+0x7>
   11700:	01 97       	sbiw	r24, 0x01	; 1
   11702:	a1 09       	sbc	r26, r1
   11704:	b1 09       	sbc	r27, r1
   11706:	80 93 94 1c 	sts	0x1C94, r24	; 0x801c94 <gpib_timer+0x4>
   1170a:	90 93 95 1c 	sts	0x1C95, r25	; 0x801c95 <gpib_timer+0x5>
   1170e:	a0 93 96 1c 	sts	0x1C96, r26	; 0x801c96 <gpib_timer+0x6>
   11712:	b0 93 97 1c 	sts	0x1C97, r27	; 0x801c97 <gpib_timer+0x7>
   11716:	03 c0       	rjmp	.+6      	; 0x1171e <gpib_timer_task+0x48>
   11718:	81 e0       	ldi	r24, 0x01	; 1
   1171a:	80 93 98 1c 	sts	0x1C98, r24	; 0x801c98 <gpib_timer+0x8>
   1171e:	78 94       	sei
   11720:	08 95       	ret

00011722 <gpib_timeout_set>:
   11722:	f8 94       	cli
   11724:	e0 e9       	ldi	r30, 0x90	; 144
   11726:	fc e1       	ldi	r31, 0x1C	; 28
   11728:	64 83       	std	Z+4, r22	; 0x04
   1172a:	75 83       	std	Z+5, r23	; 0x05
   1172c:	86 83       	std	Z+6, r24	; 0x06
   1172e:	97 83       	std	Z+7, r25	; 0x07
   11730:	10 86       	std	Z+8, r1	; 0x08
   11732:	78 94       	sei
   11734:	08 95       	ret

00011736 <gpib_bus_read_init>:
   11736:	54 98       	cbi	0x0a, 4	; 10
   11738:	57 98       	cbi	0x0a, 7	; 10
   1173a:	45 98       	cbi	0x08, 5	; 8
   1173c:	3d 9a       	sbi	0x07, 5	; 7
   1173e:	11 b8       	out	0x01, r1	; 1
   11740:	2f ef       	ldi	r18, 0xFF	; 255
   11742:	22 b9       	out	0x02, r18	; 2
   11744:	43 98       	cbi	0x08, 3	; 8
   11746:	3b 9a       	sbi	0x07, 3	; 7
   11748:	21 98       	cbi	0x04, 1	; 4
   1174a:	56 98       	cbi	0x0a, 6	; 10
   1174c:	20 98       	cbi	0x04, 0	; 4
   1174e:	55 98       	cbi	0x0a, 5	; 10
   11750:	89 2b       	or	r24, r25
   11752:	39 f4       	brne	.+14     	; 0x11762 <gpib_bus_read_init+0x2c>
   11754:	52 98       	cbi	0x0a, 2	; 10
   11756:	53 98       	cbi	0x0a, 3	; 10
   11758:	8d e0       	ldi	r24, 0x0D	; 13
   1175a:	8a 95       	dec	r24
   1175c:	f1 f7       	brne	.-4      	; 0x1175a <gpib_bus_read_init+0x24>
   1175e:	00 00       	nop
   11760:	04 c0       	rjmp	.+8      	; 0x1176a <gpib_bus_read_init+0x34>
   11762:	5b 98       	cbi	0x0b, 3	; 11
   11764:	53 9a       	sbi	0x0a, 3	; 10
   11766:	5a 98       	cbi	0x0b, 2	; 11
   11768:	52 9a       	sbi	0x0a, 2	; 10
   1176a:	42 98       	cbi	0x08, 2	; 8
   1176c:	3a 9a       	sbi	0x07, 2	; 7
   1176e:	44 9a       	sbi	0x08, 4	; 8
   11770:	3c 9a       	sbi	0x07, 4	; 7
   11772:	8d e0       	ldi	r24, 0x0D	; 13
   11774:	8a 95       	dec	r24
   11776:	f1 f7       	brne	.-4      	; 0x11774 <gpib_bus_read_init+0x3e>
   11778:	00 00       	nop
   1177a:	08 95       	ret

0001177c <gpib_bus_init>:
   1177c:	10 92 15 19 	sts	0x1915, r1	; 0x801915 <gpib_unread_f>
   11780:	11 b8       	out	0x01, r1	; 1
   11782:	8f ef       	ldi	r24, 0xFF	; 255
   11784:	82 b9       	out	0x02, r24	; 2
   11786:	21 98       	cbi	0x04, 1	; 4
   11788:	52 98       	cbi	0x0a, 2	; 10
   1178a:	53 98       	cbi	0x0a, 3	; 10
   1178c:	54 98       	cbi	0x0a, 4	; 10
   1178e:	57 98       	cbi	0x0a, 7	; 10
   11790:	56 98       	cbi	0x0a, 6	; 10
   11792:	20 98       	cbi	0x04, 0	; 4
   11794:	55 98       	cbi	0x0a, 5	; 10
   11796:	45 98       	cbi	0x08, 5	; 8
   11798:	3d 9a       	sbi	0x07, 5	; 7
   1179a:	43 98       	cbi	0x08, 3	; 8
   1179c:	3b 9a       	sbi	0x07, 3	; 7
   1179e:	42 98       	cbi	0x08, 2	; 8
   117a0:	3a 9a       	sbi	0x07, 2	; 7
   117a2:	44 9a       	sbi	0x08, 4	; 8
   117a4:	3c 9a       	sbi	0x07, 4	; 7
   117a6:	8d e0       	ldi	r24, 0x0D	; 13
   117a8:	8a 95       	dec	r24
   117aa:	f1 f7       	brne	.-4      	; 0x117a8 <gpib_bus_init+0x2c>
   117ac:	00 00       	nop
   117ae:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   117b2:	82 ff       	sbrs	r24, 2
   117b4:	0a c0       	rjmp	.+20     	; 0x117ca <gpib_bus_init+0x4e>
   117b6:	8e e9       	ldi	r24, 0x9E	; 158
   117b8:	92 e1       	ldi	r25, 0x12	; 18
   117ba:	1f 92       	push	r1
   117bc:	9f 93       	push	r25
   117be:	8f 93       	push	r24
   117c0:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   117c4:	0f 90       	pop	r0
   117c6:	0f 90       	pop	r0
   117c8:	0f 90       	pop	r0
   117ca:	08 95       	ret

000117cc <gpib_state_init>:
   117cc:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   117d0:	82 ff       	sbrs	r24, 2
   117d2:	0a c0       	rjmp	.+20     	; 0x117e8 <gpib_state_init+0x1c>
   117d4:	8b e8       	ldi	r24, 0x8B	; 139
   117d6:	92 e1       	ldi	r25, 0x12	; 18
   117d8:	1f 92       	push	r1
   117da:	9f 93       	push	r25
   117dc:	8f 93       	push	r24
   117de:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   117e2:	0f 90       	pop	r0
   117e4:	0f 90       	pop	r0
   117e6:	0f 90       	pop	r0
   117e8:	05 de       	rcall	.-1014   	; 0x113f4 <ppr_init>
   117ea:	0e 94 14 96 	call	0x12c28	; 0x12c28 <listen_cleanup>
   117ee:	0e 94 25 97 	call	0x12e4a	; 0x12e4a <talk_cleanup>
   117f2:	10 92 9c 1e 	sts	0x1E9C, r1	; 0x801e9c <spoll>
   117f6:	10 92 9f 1e 	sts	0x1E9F, r1	; 0x801e9f <talking>
   117fa:	10 92 a2 1e 	sts	0x1EA2, r1	; 0x801ea2 <talking_last>
   117fe:	10 92 a1 1e 	sts	0x1EA1, r1	; 0x801ea1 <listening>
   11802:	10 92 9b 1e 	sts	0x1E9B, r1	; 0x801e9b <listening_last>
   11806:	10 92 9a 1c 	sts	0x1C9A, r1	; 0x801c9a <lastcmd+0x1>
   1180a:	10 92 99 1c 	sts	0x1C99, r1	; 0x801c99 <lastcmd>
   1180e:	10 92 9e 1e 	sts	0x1E9E, r1	; 0x801e9e <current+0x1>
   11812:	10 92 9d 1e 	sts	0x1E9D, r1	; 0x801e9d <current>
   11816:	10 92 a0 1e 	sts	0x1EA0, r1	; 0x801ea0 <secondary>
   1181a:	08 95       	ret

0001181c <gpib_enable_PPR>:
   1181c:	cf 93       	push	r28
   1181e:	df 93       	push	r29
   11820:	ec 01       	movw	r28, r24
   11822:	88 30       	cpi	r24, 0x08	; 8
   11824:	91 05       	cpc	r25, r1
   11826:	78 f0       	brcs	.+30     	; 0x11846 <gpib_enable_PPR+0x2a>
   11828:	df 93       	push	r29
   1182a:	cf 93       	push	r28
   1182c:	85 e6       	ldi	r24, 0x65	; 101
   1182e:	92 e1       	ldi	r25, 0x12	; 18
   11830:	1f 92       	push	r1
   11832:	9f 93       	push	r25
   11834:	8f 93       	push	r24
   11836:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1183a:	0f 90       	pop	r0
   1183c:	0f 90       	pop	r0
   1183e:	0f 90       	pop	r0
   11840:	0f 90       	pop	r0
   11842:	0f 90       	pop	r0
   11844:	19 c0       	rjmp	.+50     	; 0x11878 <gpib_enable_PPR+0x5c>
   11846:	e7 dd       	rcall	.-1074   	; 0x11416 <ppr_bit_set>
   11848:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1184c:	81 ff       	sbrs	r24, 1
   1184e:	14 c0       	rjmp	.+40     	; 0x11878 <gpib_enable_PPR+0x5c>
   11850:	cd dd       	rcall	.-1126   	; 0x113ec <ppr_reg>
   11852:	1f 92       	push	r1
   11854:	8f 93       	push	r24
   11856:	df 93       	push	r29
   11858:	cf 93       	push	r28
   1185a:	8a e4       	ldi	r24, 0x4A	; 74
   1185c:	92 e1       	ldi	r25, 0x12	; 18
   1185e:	1f 92       	push	r1
   11860:	9f 93       	push	r25
   11862:	8f 93       	push	r24
   11864:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   11868:	8d b7       	in	r24, 0x3d	; 61
   1186a:	9e b7       	in	r25, 0x3e	; 62
   1186c:	07 96       	adiw	r24, 0x07	; 7
   1186e:	0f b6       	in	r0, 0x3f	; 63
   11870:	f8 94       	cli
   11872:	9e bf       	out	0x3e, r25	; 62
   11874:	0f be       	out	0x3f, r0	; 63
   11876:	8d bf       	out	0x3d, r24	; 61
   11878:	df 91       	pop	r29
   1187a:	cf 91       	pop	r28
   1187c:	08 95       	ret

0001187e <gpib_disable_PPR>:
   1187e:	cf 93       	push	r28
   11880:	df 93       	push	r29
   11882:	ec 01       	movw	r28, r24
   11884:	88 30       	cpi	r24, 0x08	; 8
   11886:	91 05       	cpc	r25, r1
   11888:	78 f0       	brcs	.+30     	; 0x118a8 <gpib_disable_PPR+0x2a>
   1188a:	df 93       	push	r29
   1188c:	cf 93       	push	r28
   1188e:	83 e2       	ldi	r24, 0x23	; 35
   11890:	92 e1       	ldi	r25, 0x12	; 18
   11892:	1f 92       	push	r1
   11894:	9f 93       	push	r25
   11896:	8f 93       	push	r24
   11898:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1189c:	0f 90       	pop	r0
   1189e:	0f 90       	pop	r0
   118a0:	0f 90       	pop	r0
   118a2:	0f 90       	pop	r0
   118a4:	0f 90       	pop	r0
   118a6:	19 c0       	rjmp	.+50     	; 0x118da <gpib_disable_PPR+0x5c>
   118a8:	c3 dd       	rcall	.-1146   	; 0x11430 <ppr_bit_clr>
   118aa:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   118ae:	81 ff       	sbrs	r24, 1
   118b0:	14 c0       	rjmp	.+40     	; 0x118da <gpib_disable_PPR+0x5c>
   118b2:	9c dd       	rcall	.-1224   	; 0x113ec <ppr_reg>
   118b4:	1f 92       	push	r1
   118b6:	8f 93       	push	r24
   118b8:	df 93       	push	r29
   118ba:	cf 93       	push	r28
   118bc:	88 e0       	ldi	r24, 0x08	; 8
   118be:	92 e1       	ldi	r25, 0x12	; 18
   118c0:	1f 92       	push	r1
   118c2:	9f 93       	push	r25
   118c4:	8f 93       	push	r24
   118c6:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   118ca:	8d b7       	in	r24, 0x3d	; 61
   118cc:	9e b7       	in	r25, 0x3e	; 62
   118ce:	07 96       	adiw	r24, 0x07	; 7
   118d0:	0f b6       	in	r0, 0x3f	; 63
   118d2:	f8 94       	cli
   118d4:	9e bf       	out	0x3e, r25	; 62
   118d6:	0f be       	out	0x3f, r0	; 63
   118d8:	8d bf       	out	0x3d, r24	; 61
   118da:	df 91       	pop	r29
   118dc:	cf 91       	pop	r28
   118de:	08 95       	ret

000118e0 <gpib_assert_ifc>:
   118e0:	5c 98       	cbi	0x0b, 4	; 11
   118e2:	54 9a       	sbi	0x0a, 4	; 10
   118e4:	6a ef       	ldi	r22, 0xFA	; 250
   118e6:	70 e0       	ldi	r23, 0x00	; 0
   118e8:	80 e0       	ldi	r24, 0x00	; 0
   118ea:	90 e0       	ldi	r25, 0x00	; 0
   118ec:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <delayus>
   118f0:	54 98       	cbi	0x0a, 4	; 10
   118f2:	6a ef       	ldi	r22, 0xFA	; 250
   118f4:	70 e0       	ldi	r23, 0x00	; 0
   118f6:	80 e0       	ldi	r24, 0x00	; 0
   118f8:	90 e0       	ldi	r25, 0x00	; 0
   118fa:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <delayus>
   118fe:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   11902:	82 ff       	sbrs	r24, 2
   11904:	0a c0       	rjmp	.+20     	; 0x1191a <gpib_assert_ifc+0x3a>
   11906:	89 ed       	ldi	r24, 0xD9	; 217
   11908:	91 e1       	ldi	r25, 0x11	; 17
   1190a:	1f 92       	push	r1
   1190c:	9f 93       	push	r25
   1190e:	8f 93       	push	r24
   11910:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   11914:	0f 90       	pop	r0
   11916:	0f 90       	pop	r0
   11918:	0f 90       	pop	r0
   1191a:	08 95       	ret

0001191c <gpib_unread>:
   1191c:	cf 93       	push	r28
   1191e:	df 93       	push	r29
   11920:	ec 01       	movw	r28, r24
   11922:	80 91 15 19 	lds	r24, 0x1915	; 0x801915 <gpib_unread_f>
   11926:	81 11       	cpse	r24, r1
   11928:	08 c0       	rjmp	.+16     	; 0x1193a <gpib_unread+0x1e>
   1192a:	d0 93 a4 1e 	sts	0x1EA4, r29	; 0x801ea4 <gpib_unread_data+0x1>
   1192e:	c0 93 a3 1e 	sts	0x1EA3, r28	; 0x801ea3 <gpib_unread_data>
   11932:	81 e0       	ldi	r24, 0x01	; 1
   11934:	80 93 15 19 	sts	0x1915, r24	; 0x801915 <gpib_unread_f>
   11938:	12 c0       	rjmp	.+36     	; 0x1195e <gpib_unread+0x42>
   1193a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1193e:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   11942:	85 70       	andi	r24, 0x05	; 5
   11944:	99 27       	eor	r25, r25
   11946:	89 2b       	or	r24, r25
   11948:	51 f0       	breq	.+20     	; 0x1195e <gpib_unread+0x42>
   1194a:	86 e9       	ldi	r24, 0x96	; 150
   1194c:	91 e1       	ldi	r25, 0x11	; 17
   1194e:	1f 92       	push	r1
   11950:	9f 93       	push	r25
   11952:	8f 93       	push	r24
   11954:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   11958:	0f 90       	pop	r0
   1195a:	0f 90       	pop	r0
   1195c:	0f 90       	pop	r0
   1195e:	ce 01       	movw	r24, r28
   11960:	df 91       	pop	r29
   11962:	cf 91       	pop	r28
   11964:	08 95       	ret

00011966 <gpib_bus_read>:

/// @brief Read GPIB data BUS only
/// @return  bus (lower 8 bits)
uint8_t gpib_bus_read()
{
    uint8_t bus = ~(GPIB_BUS_RD());
   11966:	11 b8       	out	0x01, r1	; 1
   11968:	80 b1       	in	r24, 0x00	; 0
   1196a:	80 95       	com	r24

    ///@brief if a command byte (ATN low) then strip partity
    if(!GPIB_PIN_TST(ATN))
   1196c:	4e 9b       	sbis	0x09, 6	; 9
        bus &= 0x7f;
   1196e:	8f 77       	andi	r24, 0x7F	; 127
    else
        bus &= 0xff;
    return(bus);
}
   11970:	08 95       	ret

00011972 <gpib_control_pin_read>:
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
    if(GPIB_PIN_TST(ATN) == 0 )
   11972:	4e 99       	sbic	0x09, 6	; 9
   11974:	03 c0       	rjmp	.+6      	; 0x1197c <gpib_control_pin_read+0xa>
        control |= ATN_FLAG;
   11976:	80 e0       	ldi	r24, 0x00	; 0
   11978:	94 e0       	ldi	r25, 0x04	; 4
   1197a:	02 c0       	rjmp	.+4      	; 0x11980 <gpib_control_pin_read+0xe>
///   FIXME We could add a test for read/write state ??
/// @return  control lines (upper 8 bits)
/// @see gpib_bus_read_init()
uint16_t gpib_control_pin_read()
{
    uint16_t control = 0;
   1197c:	80 e0       	ldi	r24, 0x00	; 0
   1197e:	90 e0       	ldi	r25, 0x00	; 0
    if(GPIB_PIN_TST(ATN) == 0 )
        control |= ATN_FLAG;
    if(GPIB_PIN_TST(EOI) == 0 )
   11980:	18 9b       	sbis	0x03, 0	; 3
        control |= EOI_FLAG;
   11982:	91 60       	ori	r25, 0x01	; 1
    if(GPIB_PIN_TST(SRQ) == 0 )
   11984:	4d 9b       	sbis	0x09, 5	; 9
        control |= SRQ_FLAG;
   11986:	92 60       	ori	r25, 0x02	; 2
    if(GPIB_PIN_TST(REN) == 0 )
   11988:	4f 9b       	sbis	0x09, 7	; 9
        control |= REN_FLAG;
   1198a:	98 60       	ori	r25, 0x08	; 8
    if(GPIB_PIN_TST(IFC) == 0 )
   1198c:	4c 9b       	sbis	0x09, 4	; 9
        control |= IFC_FLAG;
   1198e:	90 61       	ori	r25, 0x10	; 16
    return(control);
}
   11990:	08 95       	ret

00011992 <gpib_handshake_pin_read>:
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
   11992:	19 99       	sbic	0x03, 1	; 3
   11994:	03 c0       	rjmp	.+6      	; 0x1199c <gpib_handshake_pin_read+0xa>
        control |= DAV_FLAG;
   11996:	80 e0       	ldi	r24, 0x00	; 0
   11998:	90 e2       	ldi	r25, 0x20	; 32
   1199a:	02 c0       	rjmp	.+4      	; 0x119a0 <gpib_handshake_pin_read+0xe>
/// FIXME: V2 boards can only read pins enabled for read by the SN75162
///   FIXME We could add a test for read/write state ??
/// @return  handshake lines (upper 8 bits)
uint16_t gpib_handshake_pin_read()
{
    uint16_t control = 0;
   1199c:	80 e0       	ldi	r24, 0x00	; 0
   1199e:	90 e0       	ldi	r25, 0x00	; 0
    ///@brief for tracing we can reuse the error flag bit values for DAV,NRFD and NDAC
    /// FYI: This has no impact on the gpib_read_byte() functions and return values
    if(GPIB_PIN_TST(DAV) == 0 )
        control |= DAV_FLAG;
    if(GPIB_PIN_TST(NRFD) == 0 )
   119a0:	4a 9b       	sbis	0x09, 2	; 9
        control |= NRFD_FLAG;
   119a2:	90 64       	ori	r25, 0x40	; 64
    if(GPIB_PIN_TST(NDAC) == 0 )
   119a4:	4b 9b       	sbis	0x09, 3	; 9
        control |= NDAC_FLAG;
   119a6:	90 68       	ori	r25, 0x80	; 128
    return(control);
}
   119a8:	08 95       	ret

000119aa <gpib_write_byte>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
uint16_t gpib_write_byte(uint16_t ch)
{
   119aa:	2f 92       	push	r2
   119ac:	3f 92       	push	r3
   119ae:	4f 92       	push	r4
   119b0:	6f 92       	push	r6
   119b2:	7f 92       	push	r7
   119b4:	8f 92       	push	r8
   119b6:	cf 92       	push	r12
   119b8:	df 92       	push	r13
   119ba:	ef 92       	push	r14
   119bc:	1f 93       	push	r17
   119be:	cf 93       	push	r28
   119c0:	df 93       	push	r29
   119c2:	cd b7       	in	r28, 0x3d	; 61
   119c4:	de b7       	in	r29, 0x3e	; 62
   119c6:	28 97       	sbiw	r28, 0x08	; 8
   119c8:	0f b6       	in	r0, 0x3f	; 63
   119ca:	f8 94       	cli
   119cc:	de bf       	out	0x3e, r29	; 62
   119ce:	0f be       	out	0x3f, r0	; 63
   119d0:	cd bf       	out	0x3d, r28	; 61
   119d2:	98 87       	std	Y+8, r25	; 0x08
   119d4:	8f 83       	std	Y+7, r24	; 0x07
    uint8_t tx_state;

	// Wait for DAV to be released before starting
	// Read state for DAV
	gpib_bus_read_init(0);
   119d6:	80 e0       	ldi	r24, 0x00	; 0
   119d8:	90 e0       	ldi	r25, 0x00	; 0
   119da:	ad de       	rcall	.-678    	; 0x11736 <gpib_bus_read_init>
	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);
   119dc:	64 ef       	ldi	r22, 0xF4	; 244
   119de:	71 e0       	ldi	r23, 0x01	; 1
   119e0:	80 e0       	ldi	r24, 0x00	; 0
   119e2:	90 e0       	ldi	r25, 0x00	; 0
   119e4:	9e de       	rcall	.-708    	; 0x11722 <gpib_timeout_set>

	// Bus read init sets the following states
	// GPIB_BUS_LATCH_WR(0xff); // float OC BUS on write
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
   119e6:	10 e0       	ldi	r17, 0x00	; 0
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   119e8:	84 e0       	ldi	r24, 0x04	; 4
   119ea:	91 e1       	ldi	r25, 0x11	; 17
   119ec:	6c 01       	movw	r12, r24
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NDAC==1>\n");
   119ee:	8e e1       	ldi	r24, 0x1E	; 30
   119f0:	91 e1       	ldi	r25, 0x11	; 17
   119f2:	3c 01       	movw	r6, r24
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==0>\n");
   119f4:	89 e3       	ldi	r24, 0x39	; 57
   119f6:	91 e1       	ldi	r25, 0x11	; 17
   119f8:	1c 01       	movw	r2, r24
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   119fa:	84 e5       	ldi	r24, 0x54	; 84
   119fc:	91 e1       	ldi	r25, 0x11	; 17
   119fe:	9c 01       	movw	r18, r24
   11a00:	40 e0       	ldi	r20, 0x00	; 0
   11a02:	29 83       	std	Y+1, r18	; 0x01
   11a04:	3a 83       	std	Y+2, r19	; 0x02
   11a06:	4b 83       	std	Y+3, r20	; 0x03
                }
                if (gpib_timeout_test())
                {
#if SDEBUG
                    if(debuglevel & (1+4))
                        printf("<BUS waiting for DAV==1>\n");
   11a08:	8c e7       	ldi	r24, 0x7C	; 124
   11a0a:	91 e1       	ldi	r25, 0x11	; 17
   11a0c:	9c 01       	movw	r18, r24
   11a0e:	40 e0       	ldi	r20, 0x00	; 0
   11a10:	2c 83       	std	Y+4, r18	; 0x04
   11a12:	3d 83       	std	Y+5, r19	; 0x05
   11a14:	4e 83       	std	Y+6, r20	; 0x06
    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
    {
        if(uart_keyhit(0))
   11a16:	80 e0       	ldi	r24, 0x00	; 0
   11a18:	0e 94 14 2c 	call	0x5828	; 0x5828 <uart_keyhit>
   11a1c:	89 2b       	or	r24, r25
   11a1e:	09 f0       	breq	.+2      	; 0x11a22 <gpib_write_byte+0x78>
   11a20:	17 c1       	rjmp	.+558    	; 0x11c50 <gpib_write_byte+0x2a6>
        if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   11a22:	4c 99       	sbic	0x09, 4	; 9
   11a24:	07 c0       	rjmp	.+14     	; 0x11a34 <gpib_write_byte+0x8a>
        {
            ch |= IFC_FLAG;
   11a26:	8f 81       	ldd	r24, Y+7	; 0x07
   11a28:	98 85       	ldd	r25, Y+8	; 0x08
   11a2a:	90 61       	ori	r25, 0x10	; 16
   11a2c:	98 87       	std	Y+8, r25	; 0x08
			gpib_bus_init();
   11a2e:	8f 83       	std	Y+7, r24	; 0x07
   11a30:	a5 de       	rcall	.-694    	; 0x1177c <gpib_bus_init>
            break;
   11a32:	0e c1       	rjmp	.+540    	; 0x11c50 <gpib_write_byte+0x2a6>
        }

        switch(tx_state)
   11a34:	81 2f       	mov	r24, r17
   11a36:	90 e0       	ldi	r25, 0x00	; 0
   11a38:	8a 30       	cpi	r24, 0x0A	; 10
   11a3a:	91 05       	cpc	r25, r1
   11a3c:	08 f0       	brcs	.+2      	; 0x11a40 <gpib_write_byte+0x96>
   11a3e:	fe c0       	rjmp	.+508    	; 0x11c3c <gpib_write_byte+0x292>
   11a40:	fc 01       	movw	r30, r24
   11a42:	e3 54       	subi	r30, 0x43	; 67
   11a44:	ff 4f       	sbci	r31, 0xFF	; 255
   11a46:	0c 94 92 e8 	jmp	0x1d124	; 0x1d124 <__tablejump2__>
        {
            case GPIB_TX_START:
                // Wait for release of DAV and EOI before starting
				// IF DAV = 0 the bus is busy
                if(GPIB_PIN_TST(DAV) == 1)
   11a4a:	19 9b       	sbis	0x03, 1	; 3
   11a4c:	12 c0       	rjmp	.+36     	; 0x11a72 <gpib_write_byte+0xc8>
					// We arive here in Read Mode - see gpib_bus_read_init(0);

					// Switch GBIB driver direction to Write
					// CPU has BUS already set IN with pullups = 0xff - see gpib_bus_read_init(0);
					// When we switch the GPIB drivers will be in OC mode and off the bus (0xff)
					GPIB_IO_HI(TE); // BUS OUT, DAV OUT, NRFD and NDAC IN
   11a4e:	42 9a       	sbi	0x08, 2	; 8
   11a50:	3a 9a       	sbi	0x07, 2	; 7
					GPIB_IO_LOW(DC);// ATN OUT, EOI OUT, SRQ IN
   11a52:	44 98       	cbi	0x08, 4	; 8
   11a54:	3c 9a       	sbi	0x07, 4	; 7
#endif
                    // My testing with various GPIB devices shows that we MUST assert ATN EARLY!
                    if(ch & ATN_FLAG)
   11a56:	2f 81       	ldd	r18, Y+7	; 0x07
   11a58:	38 85       	ldd	r19, Y+8	; 0x08
   11a5a:	32 ff       	sbrs	r19, 2
   11a5c:	03 c0       	rjmp	.+6      	; 0x11a64 <gpib_write_byte+0xba>
                        GPIB_IO_LOW(ATN);   // FYI: SS80 never sends ATN from a device
   11a5e:	5e 98       	cbi	0x0b, 6	; 11
   11a60:	56 9a       	sbi	0x0a, 6	; 10
   11a62:	01 c0       	rjmp	.+2      	; 0x11a66 <gpib_write_byte+0xbc>
                    else
                        GPIB_PIN_FLOAT_UP(ATN);
   11a64:	56 98       	cbi	0x0a, 6	; 10

                    gpib_timeout_set(HTIMEOUT);
   11a66:	64 ef       	ldi	r22, 0xF4	; 244
   11a68:	71 e0       	ldi	r23, 0x01	; 1
   11a6a:	80 e0       	ldi	r24, 0x00	; 0
   11a6c:	90 e0       	ldi	r25, 0x00	; 0
   11a6e:	59 de       	rcall	.-846    	; 0x11722 <gpib_timeout_set>
                    tx_state = GPIB_TX_WAIT_READY;
   11a70:	11 e0       	ldi	r17, 0x01	; 1
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11a72:	80 91 98 1c 	lds	r24, 0x1C98	; 0x801c98 <gpib_timer+0x8>
                        GPIB_PIN_FLOAT_UP(ATN);

                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_READY;
                }
                if (gpib_timeout_test())
   11a76:	88 23       	and	r24, r24
   11a78:	71 f2       	breq	.-100    	; 0x11a16 <gpib_write_byte+0x6c>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   11a7a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   11a7e:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   11a82:	85 70       	andi	r24, 0x05	; 5
   11a84:	99 27       	eor	r25, r25
   11a86:	89 2b       	or	r24, r25
   11a88:	39 f1       	breq	.+78     	; 0x11ad8 <gpib_write_byte+0x12e>
                        printf("<BUS waiting for DAV==1>\n");
   11a8a:	1f 92       	push	r1
   11a8c:	3d 81       	ldd	r19, Y+5	; 0x05
   11a8e:	3f 93       	push	r19
   11a90:	4c 81       	ldd	r20, Y+4	; 0x04
   11a92:	4f 93       	push	r20
   11a94:	1c c0       	rjmp	.+56     	; 0x11ace <gpib_write_byte+0x124>
                }
                break;

            case GPIB_TX_WAIT_READY:
                // Wait for ready condition
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
   11a96:	4a 9b       	sbis	0x09, 2	; 9
   11a98:	08 c0       	rjmp	.+16     	; 0x11aaa <gpib_write_byte+0x100>
   11a9a:	4b 99       	sbic	0x09, 3	; 9
                {
                    gpib_timeout_set(HTIMEOUT);
   11a9c:	06 c0       	rjmp	.+12     	; 0x11aaa <gpib_write_byte+0x100>
   11a9e:	64 ef       	ldi	r22, 0xF4	; 244
   11aa0:	71 e0       	ldi	r23, 0x01	; 1
   11aa2:	80 e0       	ldi	r24, 0x00	; 0
   11aa4:	90 e0       	ldi	r25, 0x00	; 0
                    tx_state = GPIB_TX_PUT_DATA;
   11aa6:	3d de       	rcall	.-902    	; 0x11722 <gpib_timeout_set>
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11aa8:	12 e0       	ldi	r17, 0x02	; 2
   11aaa:	80 91 98 1c 	lds	r24, 0x1C98	; 0x801c98 <gpib_timer+0x8>
                if(GPIB_PIN_TST(NRFD) == 1 && GPIB_PIN_TST(NDAC) == 0)
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_PUT_DATA;
                }
                if (gpib_timeout_test())
   11aae:	88 23       	and	r24, r24
   11ab0:	09 f4       	brne	.+2      	; 0x11ab4 <gpib_write_byte+0x10a>
                {
#if SDEBUG
                    if(debuglevel & (1+4))
   11ab2:	b1 cf       	rjmp	.-158    	; 0x11a16 <gpib_write_byte+0x6c>
   11ab4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   11ab8:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   11abc:	85 70       	andi	r24, 0x05	; 5
   11abe:	99 27       	eor	r25, r25
   11ac0:	89 2b       	or	r24, r25
                        printf("<BUS waiting for NRFD==1 && NDAC == 0>\n");
   11ac2:	51 f0       	breq	.+20     	; 0x11ad8 <gpib_write_byte+0x12e>
   11ac4:	1f 92       	push	r1
   11ac6:	9a 81       	ldd	r25, Y+2	; 0x02
   11ac8:	9f 93       	push	r25
   11aca:	29 81       	ldd	r18, Y+1	; 0x01
   11acc:	2f 93       	push	r18
   11ace:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   11ad2:	0f 90       	pop	r0
   11ad4:	0f 90       	pop	r0
#endif
                    ch |= TIMEOUT_FLAG;
   11ad6:	0f 90       	pop	r0
   11ad8:	8f 81       	ldd	r24, Y+7	; 0x07
   11ada:	98 85       	ldd	r25, Y+8	; 0x08
   11adc:	90 64       	ori	r25, 0x40	; 64
   11ade:	98 87       	std	Y+8, r25	; 0x08
   11ae0:	8f 83       	std	Y+7, r24	; 0x07
                }
                break;

            case GPIB_TX_PUT_DATA:

                if(ch & EOI_FLAG)
   11ae2:	b4 c0       	rjmp	.+360    	; 0x11c4c <gpib_write_byte+0x2a2>
   11ae4:	2f 81       	ldd	r18, Y+7	; 0x07
   11ae6:	38 85       	ldd	r19, Y+8	; 0x08
   11ae8:	30 ff       	sbrs	r19, 0
                    GPIB_IO_LOW(EOI);
   11aea:	03 c0       	rjmp	.+6      	; 0x11af2 <gpib_write_byte+0x148>
   11aec:	28 98       	cbi	0x05, 0	; 5
   11aee:	20 9a       	sbi	0x04, 0	; 4
                else
                    GPIB_PIN_FLOAT_UP(EOI);
   11af0:	01 c0       	rjmp	.+2      	; 0x11af4 <gpib_write_byte+0x14a>

                GPIB_BUS_WR((ch & 0xff) ^ 0xff);  // Write Data inverted
   11af2:	20 98       	cbi	0x04, 0	; 4
   11af4:	8f ef       	ldi	r24, 0xFF	; 255
   11af6:	81 b9       	out	0x01, r24	; 1
   11af8:	8f 81       	ldd	r24, Y+7	; 0x07
   11afa:	80 95       	com	r24
#if BOARD == 2
				// Switch to Tristate mode to soeed up Write
                GPIB_IO_HI(PE); 
   11afc:	82 b9       	out	0x02, r24	; 2
   11afe:	43 9a       	sbi	0x08, 3	; 8
   11b00:	3b 9a       	sbi	0x07, 3	; 7
   11b02:	3d e0       	ldi	r19, 0x0D	; 13
   11b04:	3a 95       	dec	r19
#endif
                GPIB_BUS_SETTLE();                // Let Data BUS settle

                gpib_timeout_set(HTIMEOUT);
   11b06:	f1 f7       	brne	.-4      	; 0x11b04 <gpib_write_byte+0x15a>
   11b08:	00 00       	nop
   11b0a:	64 ef       	ldi	r22, 0xF4	; 244
   11b0c:	71 e0       	ldi	r23, 0x01	; 1
   11b0e:	80 e0       	ldi	r24, 0x00	; 0
   11b10:	90 e0       	ldi	r25, 0x00	; 0
                tx_state = GPIB_TX_SET_DAV_LOW;
   11b12:	07 de       	rcall	.-1010   	; 0x11722 <gpib_timeout_set>
                break;


            case GPIB_TX_SET_DAV_LOW:
                GPIB_IO_LOW(DAV);
   11b14:	13 e0       	ldi	r17, 0x03	; 3
                gpib_timeout_set(HTIMEOUT);
   11b16:	7f cf       	rjmp	.-258    	; 0x11a16 <gpib_write_byte+0x6c>
   11b18:	29 98       	cbi	0x05, 1	; 5
   11b1a:	21 9a       	sbi	0x04, 1	; 4
   11b1c:	64 ef       	ldi	r22, 0xF4	; 244
   11b1e:	71 e0       	ldi	r23, 0x01	; 1
   11b20:	80 e0       	ldi	r24, 0x00	; 0
                tx_state = GPIB_TX_WAIT_FOR_NRFD_LOW;
                break;

            ///@brief first device is ready
            case GPIB_TX_WAIT_FOR_NRFD_LOW:
                if (GPIB_PIN_TST(NRFD) == 0)
   11b22:	90 e0       	ldi	r25, 0x00	; 0
   11b24:	fe dd       	rcall	.-1028   	; 0x11722 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   11b26:	14 e0       	ldi	r17, 0x04	; 4
   11b28:	76 cf       	rjmp	.-276    	; 0x11a16 <gpib_write_byte+0x6c>
   11b2a:	4a 99       	sbic	0x09, 2	; 9
   11b2c:	07 c0       	rjmp	.+14     	; 0x11b3c <gpib_write_byte+0x192>
   11b2e:	64 ef       	ldi	r22, 0xF4	; 244
   11b30:	71 e0       	ldi	r23, 0x01	; 1
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
   11b32:	80 e0       	ldi	r24, 0x00	; 0
                    break;
   11b34:	90 e0       	ldi	r25, 0x00	; 0
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11b36:	f5 dd       	rcall	.-1046   	; 0x11722 <gpib_timeout_set>
   11b38:	15 e0       	ldi	r17, 0x05	; 5
                {
                    gpib_timeout_set(HTIMEOUT);
                    tx_state = GPIB_TX_WAIT_FOR_NDAC_HI;
                    break;
                }
                if (gpib_timeout_test())
   11b3a:	6d cf       	rjmp	.-294    	; 0x11a16 <gpib_write_byte+0x6c>
   11b3c:	80 91 98 1c 	lds	r24, 0x1C98	; 0x801c98 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11b40:	88 23       	and	r24, r24
   11b42:	09 f4       	brne	.+2      	; 0x11b46 <gpib_write_byte+0x19c>
   11b44:	68 cf       	rjmp	.-304    	; 0x11a16 <gpib_write_byte+0x6c>
   11b46:	8f 81       	ldd	r24, Y+7	; 0x07
   11b48:	98 85       	ldd	r25, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   11b4a:	90 64       	ori	r25, 0x40	; 64
   11b4c:	98 87       	std	Y+8, r25	; 0x08
   11b4e:	8f 83       	std	Y+7, r24	; 0x07
   11b50:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   11b54:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   11b58:	85 70       	andi	r24, 0x05	; 5
   11b5a:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NRFD==0>\n");
   11b5c:	89 2b       	or	r24, r25
   11b5e:	09 f4       	brne	.+2      	; 0x11b62 <gpib_write_byte+0x1b8>
   11b60:	75 c0       	rjmp	.+234    	; 0x11c4c <gpib_write_byte+0x2a2>
   11b62:	1f 92       	push	r1
                }
                break;

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
   11b64:	3f 92       	push	r3
   11b66:	2f 92       	push	r2
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11b68:	3f c0       	rjmp	.+126    	; 0x11be8 <gpib_write_byte+0x23e>
   11b6a:	4b 99       	sbic	0x09, 3	; 9
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
                    break;
                }
                if (gpib_timeout_test())
   11b6c:	6b c0       	rjmp	.+214    	; 0x11c44 <gpib_write_byte+0x29a>
   11b6e:	80 91 98 1c 	lds	r24, 0x1C98	; 0x801c98 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11b72:	88 23       	and	r24, r24
   11b74:	09 f4       	brne	.+2      	; 0x11b78 <gpib_write_byte+0x1ce>
   11b76:	4f cf       	rjmp	.-354    	; 0x11a16 <gpib_write_byte+0x6c>
   11b78:	2f 81       	ldd	r18, Y+7	; 0x07
   11b7a:	38 85       	ldd	r19, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   11b7c:	30 64       	ori	r19, 0x40	; 64
   11b7e:	38 87       	std	Y+8, r19	; 0x08
   11b80:	2f 83       	std	Y+7, r18	; 0x07
   11b82:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   11b86:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   11b8a:	85 70       	andi	r24, 0x05	; 5
   11b8c:	99 27       	eor	r25, r25
                        printf("<BUS waiting for NDAC==1>\n");
   11b8e:	89 2b       	or	r24, r25
   11b90:	09 f4       	brne	.+2      	; 0x11b94 <gpib_write_byte+0x1ea>
   11b92:	5c c0       	rjmp	.+184    	; 0x11c4c <gpib_write_byte+0x2a2>
                }
                break;

            ///@release BUS
            case GPIB_TX_SET_DAV_HI:
                GPIB_PIN_FLOAT_UP(DAV);
   11b94:	1f 92       	push	r1
   11b96:	7f 92       	push	r7
   11b98:	6f 92       	push	r6
   11b9a:	26 c0       	rjmp	.+76     	; 0x11be8 <gpib_write_byte+0x23e>
				GPIB_BUS_SETTLE();			// give some time

				gpib_bus_read_init(0);		// Free BUS, NOT busy
   11b9c:	21 98       	cbi	0x04, 1	; 4
   11b9e:	3d e0       	ldi	r19, 0x0D	; 13
   11ba0:	3a 95       	dec	r19
   11ba2:	f1 f7       	brne	.-4      	; 0x11ba0 <gpib_write_byte+0x1f6>

                gpib_timeout_set(HTIMEOUT);
   11ba4:	00 00       	nop
   11ba6:	80 e0       	ldi	r24, 0x00	; 0
   11ba8:	90 e0       	ldi	r25, 0x00	; 0
   11baa:	c5 dd       	rcall	.-1142   	; 0x11736 <gpib_bus_read_init>
   11bac:	64 ef       	ldi	r22, 0xF4	; 244
   11bae:	71 e0       	ldi	r23, 0x01	; 1
                tx_state = GPIB_TX_WAIT_FOR_DAV_HI;
   11bb0:	80 e0       	ldi	r24, 0x00	; 0
                break;
   11bb2:	90 e0       	ldi	r25, 0x00	; 0

			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
   11bb4:	b6 dd       	rcall	.-1172   	; 0x11722 <gpib_timeout_set>
   11bb6:	17 e0       	ldi	r17, 0x07	; 7
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   11bb8:	2e cf       	rjmp	.-420    	; 0x11a16 <gpib_write_byte+0x6c>
   11bba:	19 99       	sbic	0x03, 1	; 3
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
                    break;
                }
                if (gpib_timeout_test())
   11bbc:	45 c0       	rjmp	.+138    	; 0x11c48 <gpib_write_byte+0x29e>
   11bbe:	80 91 98 1c 	lds	r24, 0x1C98	; 0x801c98 <gpib_timer+0x8>
                {
                    ch |= TIMEOUT_FLAG;
   11bc2:	88 23       	and	r24, r24
   11bc4:	09 f4       	brne	.+2      	; 0x11bc8 <gpib_write_byte+0x21e>
   11bc6:	27 cf       	rjmp	.-434    	; 0x11a16 <gpib_write_byte+0x6c>
   11bc8:	8f 81       	ldd	r24, Y+7	; 0x07
   11bca:	98 85       	ldd	r25, Y+8	; 0x08
                    tx_state = GPIB_TX_ERROR;
#if SDEBUG
                    if(debuglevel & (1+4))
   11bcc:	90 64       	ori	r25, 0x40	; 64
   11bce:	98 87       	std	Y+8, r25	; 0x08
   11bd0:	8f 83       	std	Y+7, r24	; 0x07
   11bd2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   11bd6:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   11bda:	85 70       	andi	r24, 0x05	; 5
                        printf("<BUS waiting for DAV==1>\n");
   11bdc:	99 27       	eor	r25, r25
   11bde:	89 2b       	or	r24, r25
   11be0:	a9 f1       	breq	.+106    	; 0x11c4c <gpib_write_byte+0x2a2>
   11be2:	1f 92       	push	r1
   11be4:	df 92       	push	r13
   11be6:	cf 92       	push	r12
   11be8:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   11bec:	0f 90       	pop	r0
                tx_state = GPIB_TX_DONE;
                break;

            case GPIB_TX_ERROR:
#if SDEBUG
                if(debuglevel & (1+4))
   11bee:	0f 90       	pop	r0
   11bf0:	0f 90       	pop	r0
   11bf2:	2c c0       	rjmp	.+88     	; 0x11c4c <gpib_write_byte+0x2a2>
   11bf4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   11bf8:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   11bfc:	85 70       	andi	r24, 0x05	; 5
                    printf("<NRFD=%d,NDAV=%d>\n", GPIB_PIN_TST(NRFD),GPIB_PIN_TST(NDAC));
   11bfe:	99 27       	eor	r25, r25
   11c00:	89 2b       	or	r24, r25
   11c02:	c1 f0       	breq	.+48     	; 0x11c34 <gpib_write_byte+0x28a>
   11c04:	99 b1       	in	r25, 0x09	; 9
   11c06:	89 b1       	in	r24, 0x09	; 9
   11c08:	93 fb       	bst	r25, 3
   11c0a:	99 27       	eor	r25, r25
   11c0c:	90 f9       	bld	r25, 0
   11c0e:	1f 92       	push	r1
   11c10:	9f 93       	push	r25
   11c12:	82 fb       	bst	r24, 2
   11c14:	88 27       	eor	r24, r24
   11c16:	80 f9       	bld	r24, 0
   11c18:	1f 92       	push	r1
   11c1a:	8f 93       	push	r24
   11c1c:	81 ef       	ldi	r24, 0xF1	; 241
   11c1e:	90 e1       	ldi	r25, 0x10	; 16
   11c20:	1f 92       	push	r1
   11c22:	9f 93       	push	r25
   11c24:	8f 93       	push	r24
   11c26:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   11c2a:	0f b6       	in	r0, 0x3f	; 63
#endif
// Free BUS, BUSY on error
				gpib_bus_read_init(1);		
   11c2c:	f8 94       	cli
   11c2e:	de bf       	out	0x3e, r29	; 62
   11c30:	0f be       	out	0x3f, r0	; 63
   11c32:	cd bf       	out	0x3d, r28	; 61
                tx_state = GPIB_TX_DONE;
                break;
   11c34:	81 e0       	ldi	r24, 0x01	; 1
	// GPIB_IO_LOW(PE);			// BUS OC PULLUP

    tx_state = GPIB_TX_START;
    gpib_timeout_set(HTIMEOUT);

    while(tx_state != GPIB_TX_DONE )
   11c36:	90 e0       	ldi	r25, 0x00	; 0
   11c38:	7e dd       	rcall	.-1284   	; 0x11736 <gpib_bus_read_init>
   11c3a:	0a c0       	rjmp	.+20     	; 0x11c50 <gpib_write_byte+0x2a6>
   11c3c:	1a 30       	cpi	r17, 0x0A	; 10

            ///@brief ALL devices are ready
            case GPIB_TX_WAIT_FOR_NDAC_HI:
                if(GPIB_PIN_TST(NDAC) == 1)         // Byte byte accepted
                {
                    tx_state = GPIB_TX_SET_DAV_HI;
   11c3e:	09 f0       	breq	.+2      	; 0x11c42 <gpib_write_byte+0x298>
   11c40:	ea ce       	rjmp	.-556    	; 0x11a16 <gpib_write_byte+0x6c>
			/// We are in read mode now
            ///@wait for DAV to finish float HI - finishing floating HI
            case GPIB_TX_WAIT_FOR_DAV_HI:
                if(GPIO_PIN_TST(DAV) == 1)
                {
                    tx_state = GPIB_TX_FINISH;
   11c42:	06 c0       	rjmp	.+12     	; 0x11c50 <gpib_write_byte+0x2a6>
   11c44:	16 e0       	ldi	r17, 0x06	; 6
                    break;
                }
                if (gpib_timeout_test())
                {
                    ch |= TIMEOUT_FLAG;
                    tx_state = GPIB_TX_ERROR;
   11c46:	e7 ce       	rjmp	.-562    	; 0x11a16 <gpib_write_byte+0x6c>
   11c48:	18 e0       	ldi	r17, 0x08	; 8
            case GPIB_TX_DONE:
                break;
        }
    }
    return(ch);
}
   11c4a:	e5 ce       	rjmp	.-566    	; 0x11a16 <gpib_write_byte+0x6c>
   11c4c:	19 e0       	ldi	r17, 0x09	; 9
   11c4e:	e3 ce       	rjmp	.-570    	; 0x11a16 <gpib_write_byte+0x6c>
   11c50:	8f 81       	ldd	r24, Y+7	; 0x07
   11c52:	98 85       	ldd	r25, Y+8	; 0x08
   11c54:	28 96       	adiw	r28, 0x08	; 8
   11c56:	0f b6       	in	r0, 0x3f	; 63
   11c58:	f8 94       	cli
   11c5a:	de bf       	out	0x3e, r29	; 62
   11c5c:	0f be       	out	0x3f, r0	; 63
   11c5e:	cd bf       	out	0x3d, r28	; 61
   11c60:	df 91       	pop	r29
   11c62:	cf 91       	pop	r28
   11c64:	1f 91       	pop	r17
   11c66:	ef 90       	pop	r14
   11c68:	df 90       	pop	r13
   11c6a:	cf 90       	pop	r12
   11c6c:	8f 90       	pop	r8
   11c6e:	7f 90       	pop	r7
   11c70:	6f 90       	pop	r6
   11c72:	4f 90       	pop	r4
   11c74:	3f 90       	pop	r3
   11c76:	2f 90       	pop	r2
   11c78:	08 95       	ret

00011c7a <gpib_decode_header>:
/// @see: gpib.h _FLAGS defines for a full list is control lines we track
/// @see: gpib_trace()
/// @return void
///@param[in] fo: FILE pointer or "stdout"
void gpib_decode_header( FILE *fo)
{
   11c7a:	cf 93       	push	r28
   11c7c:	df 93       	push	r29
   11c7e:	ec 01       	movw	r28, r24
    if(fo == NULL)
   11c80:	89 2b       	or	r24, r25
   11c82:	21 f4       	brne	.+8      	; 0x11c8c <gpib_decode_header+0x12>
        fo = stdout;
   11c84:	c0 91 72 1c 	lds	r28, 0x1C72	; 0x801c72 <__iob+0x2>
   11c88:	d0 91 73 1c 	lds	r29, 0x1C73	; 0x801c73 <__iob+0x3>
        
    fprintf(fo,"===========================================\n");
   11c8c:	be 01       	movw	r22, r28
   11c8e:	81 e7       	ldi	r24, 0x71	; 113
   11c90:	9b e0       	ldi	r25, 0x0B	; 11
   11c92:	0e 94 16 79 	call	0xf22c	; 0xf22c <fputs>
    fprintf(fo,"GPIB bus state\n");
   11c96:	be 01       	movw	r22, r28
   11c98:	8e e9       	ldi	r24, 0x9E	; 158
   11c9a:	9b e0       	ldi	r25, 0x0B	; 11
   11c9c:	0e 94 16 79 	call	0xf22c	; 0xf22c <fputs>
    fprintf(fo,"HH . AESRPITB gpib\n");
   11ca0:	be 01       	movw	r22, r28
   11ca2:	8e ea       	ldi	r24, 0xAE	; 174
   11ca4:	9b e0       	ldi	r25, 0x0B	; 11
   11ca6:	0e 94 16 79 	call	0xf22c	; 0xf22c <fputs>
    fprintf(fo,"HH = Hex value of Command or Data\n");
   11caa:	be 01       	movw	r22, r28
   11cac:	82 ec       	ldi	r24, 0xC2	; 194
   11cae:	9b e0       	ldi	r25, 0x0B	; 11
   11cb0:	0e 94 16 79 	call	0xf22c	; 0xf22c <fputs>
    fprintf(fo,"   . = ASCII of XX only for 0x20 .. 0x7e\n");
   11cb4:	be 01       	movw	r22, r28
   11cb6:	85 ee       	ldi	r24, 0xE5	; 229
   11cb8:	9b e0       	ldi	r25, 0x0B	; 11
   11cba:	0e 94 16 79 	call	0xf22c	; 0xf22c <fputs>
    fprintf(fo,"     A = ATN\n");
   11cbe:	be 01       	movw	r22, r28
   11cc0:	8f e0       	ldi	r24, 0x0F	; 15
   11cc2:	9c e0       	ldi	r25, 0x0C	; 12
   11cc4:	0e 94 16 79 	call	0xf22c	; 0xf22c <fputs>
    fprintf(fo,"      E = EOI\n");
   11cc8:	be 01       	movw	r22, r28
   11cca:	8d e1       	ldi	r24, 0x1D	; 29
   11ccc:	9c e0       	ldi	r25, 0x0C	; 12
   11cce:	0e 94 16 79 	call	0xf22c	; 0xf22c <fputs>
    fprintf(fo,"       S = SRQ\n");
   11cd2:	be 01       	movw	r22, r28
   11cd4:	8c e2       	ldi	r24, 0x2C	; 44
   11cd6:	9c e0       	ldi	r25, 0x0C	; 12
   11cd8:	0e 94 16 79 	call	0xf22c	; 0xf22c <fputs>
    fprintf(fo,"        R = REN\n");
   11cdc:	be 01       	movw	r22, r28
   11cde:	8c e3       	ldi	r24, 0x3C	; 60
   11ce0:	9c e0       	ldi	r25, 0x0C	; 12
   11ce2:	0e 94 16 79 	call	0xf22c	; 0xf22c <fputs>
    fprintf(fo,"         I = IFC\n");
   11ce6:	be 01       	movw	r22, r28
   11ce8:	8d e4       	ldi	r24, 0x4D	; 77
   11cea:	9c e0       	ldi	r25, 0x0C	; 12
   11cec:	0e 94 16 79 	call	0xf22c	; 0xf22c <fputs>
    fprintf(fo,"          P = Parallel Poll seen\n");
   11cf0:	be 01       	movw	r22, r28
   11cf2:	8f e5       	ldi	r24, 0x5F	; 95
   11cf4:	9c e0       	ldi	r25, 0x0C	; 12
   11cf6:	0e 94 16 79 	call	0xf22c	; 0xf22c <fputs>
    fprintf(fo,"           T = TIMEOUT\n");
   11cfa:	be 01       	movw	r22, r28
   11cfc:	81 e8       	ldi	r24, 0x81	; 129
   11cfe:	9c e0       	ldi	r25, 0x0C	; 12
   11d00:	0e 94 16 79 	call	0xf22c	; 0xf22c <fputs>
    fprintf(fo,"            B = BUS_ERROR\n");
   11d04:	be 01       	movw	r22, r28
   11d06:	89 e9       	ldi	r24, 0x99	; 153
   11d08:	9c e0       	ldi	r25, 0x0C	; 12
   11d0a:	0e 94 16 79 	call	0xf22c	; 0xf22c <fputs>
    fprintf(fo,"              GPIB commands\n");
   11d0e:	be 01       	movw	r22, r28
   11d10:	84 eb       	ldi	r24, 0xB4	; 180
   11d12:	9c e0       	ldi	r25, 0x0C	; 12
   11d14:	0e 94 16 79 	call	0xf22c	; 0xf22c <fputs>
}
   11d18:	df 91       	pop	r29
   11d1a:	cf 91       	pop	r28
   11d1c:	08 95       	ret

00011d1e <gpib_trace_display>:
/// @return  void
/// Note the bits we can read depends on what hardware verions we have
/// V2 hardware can only read status bits based on GPIB control buffer direction
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
   11d1e:	a0 e8       	ldi	r26, 0x80	; 128
   11d20:	b0 e0       	ldi	r27, 0x00	; 0
   11d22:	e5 e9       	ldi	r30, 0x95	; 149
   11d24:	fe e8       	ldi	r31, 0x8E	; 142
   11d26:	0c 94 c7 e8 	jmp	0x1d18e	; 0x1d18e <__prologue_saves__+0xc>
   11d2a:	8c 01       	movw	r16, r24
   11d2c:	5b 01       	movw	r10, r22
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
    extern FILE *gpib_log_fp;

    str[0] = 0;
   11d2e:	19 82       	std	Y+1, r1	; 0x01
   11d30:	4c 01       	movw	r8, r24
   11d32:	88 24       	eor	r8, r8
   11d34:	44 e0       	ldi	r20, 0x04	; 4
   11d36:	94 22       	and	r9, r20
   11d38:	ce 01       	movw	r24, r28
   11d3a:	01 96       	adiw	r24, 0x01	; 1
   11d3c:	6c 01       	movw	r12, r24

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
   11d3e:	62 30       	cpi	r22, 0x02	; 2
   11d40:	71 05       	cpc	r23, r1
   11d42:	f0 f4       	brcc	.+60     	; 0x11d80 <gpib_trace_display+0x62>
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   11d44:	81 14       	cp	r8, r1
   11d46:	91 04       	cpc	r9, r1
   11d48:	29 f4       	brne	.+10     	; 0x11d54 <gpib_trace_display+0x36>
///   FIXME We could add a test for read/write state ??
void gpib_trace_display(uint16_t status,int trace_state)
{
    char str[128];
    char *tmp= str;
    uint8_t bus = status & 0xff;
   11d4a:	80 2f       	mov	r24, r16

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
   11d4c:	90 ee       	ldi	r25, 0xE0	; 224
   11d4e:	90 0f       	add	r25, r16
   11d50:	9f 35       	cpi	r25, 0x5F	; 95
   11d52:	08 f0       	brcs	.+2      	; 0x11d56 <gpib_trace_display+0x38>
    str[0] = 0;

    // Display data bus ???
    if(trace_state == TRACE_DISABLE || trace_state == TRACE_READ)
    {
        uint8_t printable = ' ';                          // Data
   11d54:	80 e2       	ldi	r24, 0x20	; 32
        if( !(status & ATN_FLAG) && (bus >= 0x20 && bus <= 0x7e) )
            printable = bus;
        sprintf(str, "%02X %c ", (int)bus & 0xff, (int)printable);
   11d56:	1f 92       	push	r1
   11d58:	8f 93       	push	r24
   11d5a:	c8 01       	movw	r24, r16
   11d5c:	99 27       	eor	r25, r25
   11d5e:	9f 93       	push	r25
   11d60:	8f 93       	push	r24
   11d62:	88 ee       	ldi	r24, 0xE8	; 232
   11d64:	90 e1       	ldi	r25, 0x10	; 16
   11d66:	1f 92       	push	r1
   11d68:	9f 93       	push	r25
   11d6a:	8f 93       	push	r24
   11d6c:	df 92       	push	r13
   11d6e:	cf 92       	push	r12
   11d70:	0e 94 ae 44 	call	0x895c	; 0x895c <sprintf_P>
   11d74:	0f b6       	in	r0, 0x3f	; 63
   11d76:	f8 94       	cli
   11d78:	de bf       	out	0x3e, r29	; 62
   11d7a:	0f be       	out	0x3f, r0	; 63
   11d7c:	cd bf       	out	0x3d, r28	; 61
   11d7e:	0e c0       	rjmp	.+28     	; 0x11d9c <gpib_trace_display+0x7e>
    }
    else
    {
        sprintf(str, "     ");
   11d80:	82 ee       	ldi	r24, 0xE2	; 226
   11d82:	90 e1       	ldi	r25, 0x10	; 16
   11d84:	1f 92       	push	r1
   11d86:	9f 93       	push	r25
   11d88:	8f 93       	push	r24
   11d8a:	df 92       	push	r13
   11d8c:	cf 92       	push	r12
   11d8e:	0e 94 ae 44 	call	0x895c	; 0x895c <sprintf_P>
   11d92:	0f 90       	pop	r0
   11d94:	0f 90       	pop	r0
   11d96:	0f 90       	pop	r0
   11d98:	0f 90       	pop	r0
   11d9a:	0f 90       	pop	r0
    }

    tmp = str + strlen(str);
   11d9c:	f6 01       	movw	r30, r12
   11d9e:	01 90       	ld	r0, Z+
   11da0:	00 20       	and	r0, r0
   11da2:	e9 f7       	brne	.-6      	; 0x11d9e <gpib_trace_display+0x80>
   11da4:	31 97       	sbiw	r30, 0x01	; 1
   11da6:	cf 01       	movw	r24, r30
   11da8:	01 96       	adiw	r24, 0x01	; 1

    if(status & ATN_FLAG)
   11daa:	81 14       	cp	r8, r1
   11dac:	91 04       	cpc	r9, r1
   11dae:	11 f0       	breq	.+4      	; 0x11db4 <gpib_trace_display+0x96>
        *tmp++ = 'A';
   11db0:	21 e4       	ldi	r18, 0x41	; 65
   11db2:	01 c0       	rjmp	.+2      	; 0x11db6 <gpib_trace_display+0x98>
    else
        *tmp++ = '-';
   11db4:	2d e2       	ldi	r18, 0x2D	; 45
   11db6:	20 83       	st	Z, r18
   11db8:	dc 01       	movw	r26, r24
   11dba:	11 96       	adiw	r26, 0x01	; 1

    if(status & EOI_FLAG)
   11dbc:	10 ff       	sbrs	r17, 0
   11dbe:	02 c0       	rjmp	.+4      	; 0x11dc4 <gpib_trace_display+0xa6>
        *tmp++ = 'E';
   11dc0:	25 e4       	ldi	r18, 0x45	; 69
   11dc2:	01 c0       	rjmp	.+2      	; 0x11dc6 <gpib_trace_display+0xa8>
    else
        *tmp++ = '-';
   11dc4:	2d e2       	ldi	r18, 0x2D	; 45
   11dc6:	fc 01       	movw	r30, r24
   11dc8:	20 83       	st	Z, r18
   11dca:	fd 01       	movw	r30, r26
   11dcc:	31 96       	adiw	r30, 0x01	; 1

    if(status & SRQ_FLAG)
   11dce:	11 ff       	sbrs	r17, 1
   11dd0:	02 c0       	rjmp	.+4      	; 0x11dd6 <gpib_trace_display+0xb8>
        *tmp++ = 'S';
   11dd2:	83 e5       	ldi	r24, 0x53	; 83
   11dd4:	01 c0       	rjmp	.+2      	; 0x11dd8 <gpib_trace_display+0xba>
    else
        *tmp++ = '-';
   11dd6:	8d e2       	ldi	r24, 0x2D	; 45
   11dd8:	8c 93       	st	X, r24
   11dda:	df 01       	movw	r26, r30
   11ddc:	11 96       	adiw	r26, 0x01	; 1

    if(status & REN_FLAG)
   11dde:	13 ff       	sbrs	r17, 3
   11de0:	02 c0       	rjmp	.+4      	; 0x11de6 <gpib_trace_display+0xc8>
        *tmp++ = 'R';
   11de2:	82 e5       	ldi	r24, 0x52	; 82
   11de4:	01 c0       	rjmp	.+2      	; 0x11de8 <gpib_trace_display+0xca>
    else
        *tmp++ = '-';
   11de6:	8d e2       	ldi	r24, 0x2D	; 45
   11de8:	80 83       	st	Z, r24
   11dea:	fd 01       	movw	r30, r26
   11dec:	31 96       	adiw	r30, 0x01	; 1

    if(status & IFC_FLAG)
   11dee:	14 ff       	sbrs	r17, 4
   11df0:	02 c0       	rjmp	.+4      	; 0x11df6 <gpib_trace_display+0xd8>
        *tmp++ = 'I';
   11df2:	89 e4       	ldi	r24, 0x49	; 73
   11df4:	01 c0       	rjmp	.+2      	; 0x11df8 <gpib_trace_display+0xda>
    else
        *tmp++ = '-';
   11df6:	8d e2       	ldi	r24, 0x2D	; 45
   11df8:	8c 93       	st	X, r24

    if(trace_state == TRACE_DISABLE)
   11dfa:	a1 14       	cp	r10, r1
   11dfc:	b1 04       	cpc	r11, r1
   11dfe:	d1 f4       	brne	.+52     	; 0x11e34 <gpib_trace_display+0x116>
   11e00:	df 01       	movw	r26, r30
   11e02:	11 96       	adiw	r26, 0x01	; 1
    {
        if(status & PP_FLAG)
   11e04:	15 ff       	sbrs	r17, 5
   11e06:	02 c0       	rjmp	.+4      	; 0x11e0c <gpib_trace_display+0xee>
            *tmp++ = 'P';
   11e08:	80 e5       	ldi	r24, 0x50	; 80
   11e0a:	01 c0       	rjmp	.+2      	; 0x11e0e <gpib_trace_display+0xf0>
        else
            *tmp++ = '-';
   11e0c:	8d e2       	ldi	r24, 0x2D	; 45
   11e0e:	80 83       	st	Z, r24
   11e10:	fd 01       	movw	r30, r26
   11e12:	31 96       	adiw	r30, 0x01	; 1
        if(status & TIMEOUT_FLAG)
   11e14:	16 ff       	sbrs	r17, 6
   11e16:	02 c0       	rjmp	.+4      	; 0x11e1c <gpib_trace_display+0xfe>
            *tmp++ = 'T';
   11e18:	84 e5       	ldi	r24, 0x54	; 84
   11e1a:	01 c0       	rjmp	.+2      	; 0x11e1e <gpib_trace_display+0x100>
        else
            *tmp++ = '-';
   11e1c:	8d e2       	ldi	r24, 0x2D	; 45
   11e1e:	8c 93       	st	X, r24
   11e20:	cf 01       	movw	r24, r30
   11e22:	01 96       	adiw	r24, 0x01	; 1
        if(status & BUS_ERROR_FLAG)
            *tmp++ = 'B';
   11e24:	7c 01       	movw	r14, r24
            *tmp++ = '-';
        if(status & TIMEOUT_FLAG)
            *tmp++ = 'T';
        else
            *tmp++ = '-';
        if(status & BUS_ERROR_FLAG)
   11e26:	17 ff       	sbrs	r17, 7
   11e28:	02 c0       	rjmp	.+4      	; 0x11e2e <gpib_trace_display+0x110>
            *tmp++ = 'B';
   11e2a:	82 e4       	ldi	r24, 0x42	; 66
   11e2c:	01 c0       	rjmp	.+2      	; 0x11e30 <gpib_trace_display+0x112>
        else
            *tmp++ = '-';
   11e2e:	8d e2       	ldi	r24, 0x2D	; 45
   11e30:	80 83       	st	Z, r24
   11e32:	08 c0       	rjmp	.+16     	; 0x11e44 <gpib_trace_display+0x126>
    }
    else
    {
        // not used when tracing
        *tmp++ = '-';
   11e34:	8d e2       	ldi	r24, 0x2D	; 45
   11e36:	80 83       	st	Z, r24
        *tmp++ = '-';
   11e38:	81 83       	std	Z+1, r24	; 0x01
        *tmp++ = '-';
   11e3a:	7f 01       	movw	r14, r30
   11e3c:	43 e0       	ldi	r20, 0x03	; 3
   11e3e:	e4 0e       	add	r14, r20
   11e40:	f1 1c       	adc	r15, r1
   11e42:	82 83       	std	Z+2, r24	; 0x02
    }
    *tmp = 0;
   11e44:	f7 01       	movw	r30, r14
   11e46:	10 82       	st	Z, r1

    if(trace_state == TRACE_READ || trace_state == TRACE_BUS)
   11e48:	f1 e0       	ldi	r31, 0x01	; 1
   11e4a:	af 1a       	sub	r10, r31
   11e4c:	b1 08       	sbc	r11, r1
   11e4e:	42 e0       	ldi	r20, 0x02	; 2
   11e50:	a4 16       	cp	r10, r20
   11e52:	b1 04       	cpc	r11, r1
   11e54:	f0 f4       	brcc	.+60     	; 0x11e92 <gpib_trace_display+0x174>
    {
        if(status & DAV_FLAG)
   11e56:	15 ff       	sbrs	r17, 5
   11e58:	03 c0       	rjmp	.+6      	; 0x11e60 <gpib_trace_display+0x142>
            strcat(str,"  DAV");
   11e5a:	61 ed       	ldi	r22, 0xD1	; 209
   11e5c:	7c e0       	ldi	r23, 0x0C	; 12
   11e5e:	02 c0       	rjmp	.+4      	; 0x11e64 <gpib_trace_display+0x146>
        else
            strcat(str,"     ");
   11e60:	61 e0       	ldi	r22, 0x01	; 1
   11e62:	78 e0       	ldi	r23, 0x08	; 8
   11e64:	c6 01       	movw	r24, r12
   11e66:	0e 94 30 30 	call	0x6060	; 0x6060 <strcat>
        if(status & NRFD_FLAG)
   11e6a:	16 ff       	sbrs	r17, 6
   11e6c:	03 c0       	rjmp	.+6      	; 0x11e74 <gpib_trace_display+0x156>
            strcat(str," NRFD");
   11e6e:	67 ed       	ldi	r22, 0xD7	; 215
   11e70:	7c e0       	ldi	r23, 0x0C	; 12
   11e72:	02 c0       	rjmp	.+4      	; 0x11e78 <gpib_trace_display+0x15a>
        else
            strcat(str,"     ");
   11e74:	61 e0       	ldi	r22, 0x01	; 1
   11e76:	78 e0       	ldi	r23, 0x08	; 8
   11e78:	c6 01       	movw	r24, r12
   11e7a:	0e 94 30 30 	call	0x6060	; 0x6060 <strcat>
        if(status & NDAC_FLAG)
   11e7e:	17 ff       	sbrs	r17, 7
   11e80:	03 c0       	rjmp	.+6      	; 0x11e88 <gpib_trace_display+0x16a>
            strcat(str," NDAC");
   11e82:	6d ed       	ldi	r22, 0xDD	; 221
   11e84:	7c e0       	ldi	r23, 0x0C	; 12
   11e86:	02 c0       	rjmp	.+4      	; 0x11e8c <gpib_trace_display+0x16e>
        else
            strcat(str,"     ");
   11e88:	61 e0       	ldi	r22, 0x01	; 1
   11e8a:	78 e0       	ldi	r23, 0x08	; 8
   11e8c:	c6 01       	movw	r24, r12
   11e8e:	0e 94 30 30 	call	0x6060	; 0x6060 <strcat>
    }

    if( (status & ATN_FLAG) )
   11e92:	81 14       	cp	r8, r1
   11e94:	91 04       	cpc	r9, r1
   11e96:	09 f4       	brne	.+2      	; 0x11e9a <gpib_trace_display+0x17c>
   11e98:	58 c0       	rjmp	.+176    	; 0x11f4a <gpib_trace_display+0x22c>
    {
        int i;
        int cmd = status & CMD_MASK;
   11e9a:	c8 01       	movw	r24, r16
   11e9c:	8f 77       	andi	r24, 0x7F	; 127
   11e9e:	99 27       	eor	r25, r25
        if(cmd >= 0x020 && cmd <= 0x3e)
   11ea0:	9c 01       	movw	r18, r24
   11ea2:	20 52       	subi	r18, 0x20	; 32
   11ea4:	31 09       	sbc	r19, r1
   11ea6:	2f 31       	cpi	r18, 0x1F	; 31
   11ea8:	31 05       	cpc	r19, r1
   11eaa:	38 f4       	brcc	.+14     	; 0x11eba <gpib_trace_display+0x19c>
            sprintf(tmp," MLA %02Xh", cmd & 0x1f);
   11eac:	0f 71       	andi	r16, 0x1F	; 31
   11eae:	11 27       	eor	r17, r17
   11eb0:	1f 93       	push	r17
   11eb2:	0f 93       	push	r16
   11eb4:	87 ed       	ldi	r24, 0xD7	; 215
   11eb6:	90 e1       	ldi	r25, 0x10	; 16
   11eb8:	0c c0       	rjmp	.+24     	; 0x11ed2 <gpib_trace_display+0x1b4>
        else if(cmd >= 0x040 && cmd <= 0x4e)
   11eba:	9c 01       	movw	r18, r24
   11ebc:	20 54       	subi	r18, 0x40	; 64
   11ebe:	31 09       	sbc	r19, r1
   11ec0:	2f 30       	cpi	r18, 0x0F	; 15
   11ec2:	31 05       	cpc	r19, r1
   11ec4:	98 f4       	brcc	.+38     	; 0x11eec <gpib_trace_display+0x1ce>
            sprintf(tmp," MTA %02Xh", cmd & 0x1f);
   11ec6:	0f 71       	andi	r16, 0x1F	; 31
   11ec8:	11 27       	eor	r17, r17
   11eca:	1f 93       	push	r17
   11ecc:	0f 93       	push	r16
   11ece:	8c ec       	ldi	r24, 0xCC	; 204
   11ed0:	90 e1       	ldi	r25, 0x10	; 16
   11ed2:	1f 92       	push	r1
   11ed4:	9f 93       	push	r25
   11ed6:	8f 93       	push	r24
   11ed8:	ff 92       	push	r15
   11eda:	ef 92       	push	r14
   11edc:	0e 94 ae 44 	call	0x895c	; 0x895c <sprintf_P>
   11ee0:	0f b6       	in	r0, 0x3f	; 63
   11ee2:	f8 94       	cli
   11ee4:	de bf       	out	0x3e, r29	; 62
   11ee6:	0f be       	out	0x3f, r0	; 63
   11ee8:	cd bf       	out	0x3d, r28	; 61
   11eea:	2f c0       	rjmp	.+94     	; 0x11f4a <gpib_trace_display+0x22c>
        else if(cmd >= 0x060 && cmd <= 0x6f)
   11eec:	9c 01       	movw	r18, r24
   11eee:	20 56       	subi	r18, 0x60	; 96
   11ef0:	31 09       	sbc	r19, r1
   11ef2:	20 31       	cpi	r18, 0x10	; 16
   11ef4:	31 05       	cpc	r19, r1
   11ef6:	28 f0       	brcs	.+10     	; 0x11f02 <gpib_trace_display+0x1e4>
   11ef8:	ec e7       	ldi	r30, 0x7C	; 124
   11efa:	f1 e0       	ldi	r31, 0x01	; 1
   11efc:	00 e0       	ldi	r16, 0x00	; 0
   11efe:	10 e0       	ldi	r17, 0x00	; 0
   11f00:	09 c0       	rjmp	.+18     	; 0x11f14 <gpib_trace_display+0x1f6>
            sprintf(tmp," MSA %02Xh", cmd & 0x1f);
   11f02:	0f 71       	andi	r16, 0x1F	; 31
   11f04:	11 27       	eor	r17, r17
   11f06:	1f 93       	push	r17
   11f08:	0f 93       	push	r16
   11f0a:	81 ec       	ldi	r24, 0xC1	; 193
   11f0c:	90 e1       	ldi	r25, 0x10	; 16
   11f0e:	e1 cf       	rjmp	.-62     	; 0x11ed2 <gpib_trace_display+0x1b4>
        else
        {
            for(i=0;gpib_tokens[i].cmd != -1;++i)
   11f10:	0f 5f       	subi	r16, 0xFF	; 255
   11f12:	1f 4f       	sbci	r17, 0xFF	; 255
   11f14:	20 81       	ld	r18, Z
   11f16:	31 81       	ldd	r19, Z+1	; 0x01
   11f18:	2f 3f       	cpi	r18, 0xFF	; 255
   11f1a:	4f ef       	ldi	r20, 0xFF	; 255
   11f1c:	34 07       	cpc	r19, r20
   11f1e:	a9 f0       	breq	.+42     	; 0x11f4a <gpib_trace_display+0x22c>
   11f20:	34 96       	adiw	r30, 0x04	; 4
            {
                if(cmd == gpib_tokens[i].cmd)
   11f22:	82 17       	cp	r24, r18
   11f24:	93 07       	cpc	r25, r19
   11f26:	a1 f7       	brne	.-24     	; 0x11f10 <gpib_trace_display+0x1f2>
                {
                    strcat(tmp," ");
   11f28:	65 e0       	ldi	r22, 0x05	; 5
   11f2a:	78 e0       	ldi	r23, 0x08	; 8
   11f2c:	c7 01       	movw	r24, r14
   11f2e:	0e 94 30 30 	call	0x6060	; 0x6060 <strcat>
                    strcat(tmp,gpib_tokens[i].name);
   11f32:	00 0f       	add	r16, r16
   11f34:	11 1f       	adc	r17, r17
   11f36:	00 0f       	add	r16, r16
   11f38:	11 1f       	adc	r17, r17
   11f3a:	f8 01       	movw	r30, r16
   11f3c:	e4 58       	subi	r30, 0x84	; 132
   11f3e:	fe 4f       	sbci	r31, 0xFE	; 254
   11f40:	62 81       	ldd	r22, Z+2	; 0x02
   11f42:	73 81       	ldd	r23, Z+3	; 0x03
   11f44:	c7 01       	movw	r24, r14
   11f46:	0e 94 30 30 	call	0x6060	; 0x6060 <strcat>
                }
            }
        }
    }

    if(gpib_log_fp == NULL)
   11f4a:	20 91 16 19 	lds	r18, 0x1916	; 0x801916 <gpib_log_fp>
   11f4e:	30 91 17 19 	lds	r19, 0x1917	; 0x801917 <gpib_log_fp+0x1>
   11f52:	80 91 72 1c 	lds	r24, 0x1C72	; 0x801c72 <__iob+0x2>
   11f56:	90 91 73 1c 	lds	r25, 0x1C73	; 0x801c73 <__iob+0x3>
   11f5a:	23 2b       	or	r18, r19
   11f5c:	21 f4       	brne	.+8      	; 0x11f66 <gpib_trace_display+0x248>
        gpib_log_fp = stdout;
   11f5e:	90 93 17 19 	sts	0x1917, r25	; 0x801917 <gpib_log_fp+0x1>
   11f62:	80 93 16 19 	sts	0x1916, r24	; 0x801916 <gpib_log_fp>

    // Echo to console unless file is the console
    if(gpib_log_fp != stdout)
   11f66:	20 91 16 19 	lds	r18, 0x1916	; 0x801916 <gpib_log_fp>
   11f6a:	30 91 17 19 	lds	r19, 0x1917	; 0x801917 <gpib_log_fp+0x1>
   11f6e:	82 17       	cp	r24, r18
   11f70:	93 07       	cpc	r25, r19
   11f72:	19 f0       	breq	.+6      	; 0x11f7a <gpib_trace_display+0x25c>
        puts(str);
   11f74:	c6 01       	movw	r24, r12
   11f76:	0e 94 2e 79 	call	0xf25c	; 0xf25c <puts>

    // Save to file
    fprintf(gpib_log_fp,"%s\n",str);
   11f7a:	df 92       	push	r13
   11f7c:	cf 92       	push	r12
   11f7e:	83 ee       	ldi	r24, 0xE3	; 227
   11f80:	9c e0       	ldi	r25, 0x0C	; 12
   11f82:	9f 93       	push	r25
   11f84:	8f 93       	push	r24
   11f86:	80 91 17 19 	lds	r24, 0x1917	; 0x801917 <gpib_log_fp+0x1>
   11f8a:	8f 93       	push	r24
   11f8c:	80 91 16 19 	lds	r24, 0x1916	; 0x801916 <gpib_log_fp>
   11f90:	8f 93       	push	r24
   11f92:	0e 94 df 81 	call	0x103be	; 0x103be <fprintf>
}
   11f96:	0f 90       	pop	r0
   11f98:	0f 90       	pop	r0
   11f9a:	0f 90       	pop	r0
   11f9c:	0f 90       	pop	r0
   11f9e:	0f 90       	pop	r0
   11fa0:	0f 90       	pop	r0
   11fa2:	c0 58       	subi	r28, 0x80	; 128
   11fa4:	df 4f       	sbci	r29, 0xFF	; 255
   11fa6:	ec e0       	ldi	r30, 0x0C	; 12
   11fa8:	0c 94 e3 e8 	jmp	0x1d1c6	; 0x1d1c6 <__epilogue_restores__+0xc>

00011fac <gpib_read_byte>:
///     - Error Flags:
///       - IFC_FLAG
///
/// @return (data bus, control and error status)
uint16_t gpib_read_byte(int trace)
{
   11fac:	af 92       	push	r10
   11fae:	bf 92       	push	r11
   11fb0:	cf 92       	push	r12
   11fb2:	df 92       	push	r13
   11fb4:	ff 92       	push	r15
   11fb6:	0f 93       	push	r16
   11fb8:	1f 93       	push	r17
   11fba:	cf 93       	push	r28
   11fbc:	df 93       	push	r29

    ch = 0;
    control_last = 0;

    // If we have an unread state it has already been traced!
    if(gpib_unread_f)
   11fbe:	20 91 15 19 	lds	r18, 0x1915	; 0x801915 <gpib_unread_f>
   11fc2:	22 23       	and	r18, r18
   11fc4:	39 f0       	breq	.+14     	; 0x11fd4 <gpib_read_byte+0x28>
    {
        gpib_unread_f = 0;
   11fc6:	10 92 15 19 	sts	0x1915, r1	; 0x801915 <gpib_unread_f>
        return(gpib_unread_data);
   11fca:	80 91 a3 1e 	lds	r24, 0x1EA3	; 0x801ea3 <gpib_unread_data>
   11fce:	90 91 a4 1e 	lds	r25, 0x1EA4	; 0x801ea4 <gpib_unread_data+0x1>
   11fd2:	b8 c0       	rjmp	.+368    	; 0x12144 <gpib_read_byte+0x198>
   11fd4:	6c 01       	movw	r12, r24
    }

	gpib_bus_read_init(1); // Busy until we are ready
   11fd6:	81 e0       	ldi	r24, 0x01	; 1
   11fd8:	90 e0       	ldi	r25, 0x00	; 0
   11fda:	ad db       	rcall	.-2214   	; 0x11736 <gpib_bus_read_init>


///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
    if(trace)
   11fdc:	c1 14       	cp	r12, r1
   11fde:	d1 04       	cpc	r13, r1
    {
        control_last = gpib_control_pin_read();
   11fe0:	51 f0       	breq	.+20     	; 0x11ff6 <gpib_read_byte+0x4a>
   11fe2:	c7 dc       	rcall	.-1650   	; 0x11972 <gpib_control_pin_read>
        control_last |= gpib_handshake_pin_read();
   11fe4:	8c 01       	movw	r16, r24
   11fe6:	d5 dc       	rcall	.-1622   	; 0x11992 <gpib_handshake_pin_read>
   11fe8:	08 2b       	or	r16, r24
        gpib_trace_display(control_last, TRACE_BUS);
   11fea:	19 2b       	or	r17, r25
   11fec:	62 e0       	ldi	r22, 0x02	; 2
   11fee:	70 e0       	ldi	r23, 0x00	; 0
   11ff0:	c8 01       	movw	r24, r16
   11ff2:	95 de       	rcall	.-726    	; 0x11d1e <gpib_trace_display>
    uint16_t bus, control, control_last;
    extern uint8_t gpib_unread_f;
    extern uint16_t gpib_unread_data;

    ch = 0;
    control_last = 0;
   11ff4:	02 c0       	rjmp	.+4      	; 0x11ffa <gpib_read_byte+0x4e>
   11ff6:	00 e0       	ldi	r16, 0x00	; 0
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   11ff8:	10 e0       	ldi	r17, 0x00	; 0
   11ffa:	f1 2c       	mov	r15, r1
   11ffc:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(uart_keyhit(0))
   11ffe:	d0 e0       	ldi	r29, 0x00	; 0
   12000:	80 e0       	ldi	r24, 0x00	; 0
   12002:	0e 94 14 2c 	call	0x5828	; 0x5828 <uart_keyhit>
   12006:	89 2b       	or	r24, r25
		if(gpib_detect_PP())
            ch |= PP_FLAG;
#endif

		// IFC is always in for a device
        if(GPIB_PIN_TST(IFC) == 0)
   12008:	09 f0       	breq	.+2      	; 0x1200c <gpib_read_byte+0x60>
   1200a:	78 c0       	rjmp	.+240    	; 0x120fc <gpib_read_byte+0x150>
        {
            ch |= IFC_FLAG;
   1200c:	4c 99       	sbic	0x09, 4	; 9
			gpib_bus_init();
   1200e:	03 c0       	rjmp	.+6      	; 0x12016 <gpib_read_byte+0x6a>
   12010:	d0 61       	ori	r29, 0x10	; 16
   12012:	b4 db       	rcall	.-2200   	; 0x1177c <gpib_bus_init>
            break;
        }


        switch(rx_state)
   12014:	73 c0       	rjmp	.+230    	; 0x120fc <gpib_read_byte+0x150>
   12016:	8f 2d       	mov	r24, r15
   12018:	90 e0       	ldi	r25, 0x00	; 0
   1201a:	89 30       	cpi	r24, 0x09	; 9
   1201c:	91 05       	cpc	r25, r1
   1201e:	08 f0       	brcs	.+2      	; 0x12022 <gpib_read_byte+0x76>
   12020:	51 c0       	rjmp	.+162    	; 0x120c4 <gpib_read_byte+0x118>
   12022:	fc 01       	movw	r30, r24
   12024:	e9 53       	subi	r30, 0x39	; 57
   12026:	ff 4f       	sbci	r31, 0xFF	; 255
   12028:	0c 94 92 e8 	jmp	0x1d124	; 0x1d124 <__tablejump2__>
   1202c:	52 98       	cbi	0x0a, 2	; 10
   1202e:	8d e0       	ldi	r24, 0x0D	; 13
   12030:	8a 95       	dec	r24
   12032:	f1 f7       	brne	.-4      	; 0x12030 <gpib_read_byte+0x84>
        {
            case GPIB_RX_START:
                ///@brief Signal that we are ready to ready
                GPIB_PIN_FLOAT_UP(NRFD);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                rx_state = GPIB_RX_WAIT_FOR_DAV_LOW;
   12034:	00 00       	nop
   12036:	ff 24       	eor	r15, r15
   12038:	f3 94       	inc	r15
                break;

            case GPIB_RX_WAIT_FOR_DAV_LOW:
                ///@brief Wait for Ready acknowledge
                if ( GPIB_PIN_TST(DAV) == 0 )
   1203a:	7f c0       	rjmp	.+254    	; 0x1213a <gpib_read_byte+0x18e>
                    rx_state = GPIB_RX_DAV_IS_LOW;
   1203c:	19 99       	sbic	0x03, 1	; 3
                break;

// Accept Data
            case GPIB_RX_DAV_IS_LOW:
                GPIB_IO_LOW(NRFD);                // BUSY
   1203e:	7d c0       	rjmp	.+250    	; 0x1213a <gpib_read_byte+0x18e>

                ///@brief gpib_bus_read strips command parity if ATN is low at read time
                bus = gpib_bus_read();
   12040:	62 e0       	ldi	r22, 0x02	; 2
   12042:	f6 2e       	mov	r15, r22
   12044:	7a c0       	rjmp	.+244    	; 0x1213a <gpib_read_byte+0x18e>
   12046:	5a 98       	cbi	0x0b, 2	; 11
                ch |= bus;
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                control_last = gpib_control_pin_read();
   12048:	52 9a       	sbi	0x0a, 2	; 10
   1204a:	8d dc       	rcall	.-1766   	; 0x11966 <gpib_bus_read>
   1204c:	a8 2e       	mov	r10, r24
   1204e:	b1 2c       	mov	r11, r1
                ch |= control_last;
   12050:	90 dc       	rcall	.-1760   	; 0x11972 <gpib_control_pin_read>
   12052:	8c 01       	movw	r16, r24

                if(trace)
   12054:	c8 2b       	or	r28, r24
   12056:	d9 2b       	or	r29, r25
   12058:	ca 29       	or	r28, r10
                {
///@brief V2 boards can NOT read all bits on the control bus at once
/// FIXME We could add a test for read/write state ??
///@brief NRFD,NDAC SRQ are outputs
                    control_last |= gpib_handshake_pin_read();
   1205a:	db 29       	or	r29, r11
   1205c:	c1 14       	cp	r12, r1
   1205e:	d1 04       	cpc	r13, r1
                    gpib_trace_display(bus | control_last, TRACE_READ);
   12060:	49 f0       	breq	.+18     	; 0x12074 <gpib_read_byte+0xc8>
   12062:	97 dc       	rcall	.-1746   	; 0x11992 <gpib_handshake_pin_read>
   12064:	08 2b       	or	r16, r24
   12066:	19 2b       	or	r17, r25
   12068:	61 e0       	ldi	r22, 0x01	; 1
   1206a:	70 e0       	ldi	r23, 0x00	; 0
   1206c:	c5 01       	movw	r24, r10
   1206e:	80 2b       	or	r24, r16
   12070:	91 2b       	or	r25, r17
   12072:	55 de       	rcall	.-854    	; 0x11d1e <gpib_trace_display>
                }

                GPIB_PIN_FLOAT_UP(NDAC);
                GPIB_BUS_SETTLE();                // Let Data BUS settle
                gpib_timeout_set(HTIMEOUT);
   12074:	53 98       	cbi	0x0a, 3	; 10
   12076:	8d e0       	ldi	r24, 0x0D	; 13
   12078:	8a 95       	dec	r24
   1207a:	f1 f7       	brne	.-4      	; 0x12078 <gpib_read_byte+0xcc>
   1207c:	00 00       	nop
#if BOARD == 2
				/// FIXME do we want to keep the next state ?
                rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   1207e:	64 ef       	ldi	r22, 0xF4	; 244
   12080:	71 e0       	ldi	r23, 0x01	; 1
   12082:	80 e0       	ldi	r24, 0x00	; 0
/// FIXME We clould add a test for read/write state ??
///@brief V2 boards we can't - not a big deal as the DAV test works anyway
            ///@brief Wait for NDAC float HI

            case GPIB_RX_WAIT_FOR_NDAC_HI:
                if (GPIB_PIN_TST(NDAC) == 1)
   12084:	90 e0       	ldi	r25, 0x00	; 0
   12086:	4d db       	rcall	.-2406   	; 0x11722 <gpib_timeout_set>
                {
                    gpib_timeout_set(HTIMEOUT);
   12088:	54 e0       	ldi	r21, 0x04	; 4
   1208a:	f5 2e       	mov	r15, r21
   1208c:	56 c0       	rjmp	.+172    	; 0x1213a <gpib_read_byte+0x18e>
   1208e:	4b 9b       	sbis	0x09, 3	; 9
   12090:	0c c0       	rjmp	.+24     	; 0x120aa <gpib_read_byte+0xfe>
   12092:	64 ef       	ldi	r22, 0xF4	; 244
                    rx_state = GPIB_RX_WAIT_FOR_DAV_HI;
   12094:	71 e0       	ldi	r23, 0x01	; 1
   12096:	80 e0       	ldi	r24, 0x00	; 0
   12098:	90 e0       	ldi	r25, 0x00	; 0
                }
                break;

            ///@brief Wait for DAV HI
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
   1209a:	43 db       	rcall	.-2426   	; 0x11722 <gpib_timeout_set>
   1209c:	44 e0       	ldi	r20, 0x04	; 4
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
   1209e:	f4 2e       	mov	r15, r20
/// @see: gpib_timeout_set()
/// @return  1 if timeout, 0 if not
uint8_t gpib_timeout_test()
{
    // printf("%8ld,%d\r", (long)gpib_timer.down_counter, (int)gpib_timer.down_counter_done);
    return(gpib_timer.down_counter_done);
   120a0:	04 c0       	rjmp	.+8      	; 0x120aa <gpib_read_byte+0xfe>
            case GPIB_RX_WAIT_FOR_DAV_HI:
                if (GPIB_PIN_TST(DAV) == 1)
				{
                    rx_state = GPIB_RX_DAV_IS_HI;
				}
                if (gpib_timeout_test())
   120a2:	19 9b       	sbis	0x03, 1	; 3
   120a4:	02 c0       	rjmp	.+4      	; 0x120aa <gpib_read_byte+0xfe>
   120a6:	35 e0       	ldi	r19, 0x05	; 5
                {
                    ch |= TIMEOUT_FLAG;
   120a8:	f3 2e       	mov	r15, r19
                    rx_state = GPIB_RX_ERROR;
   120aa:	80 91 98 1c 	lds	r24, 0x1C98	; 0x801c98 <gpib_timer+0x8>
   120ae:	88 23       	and	r24, r24
            case GPIB_RX_ERROR:
                rx_state = GPIB_RX_DONE;
                break;

            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
   120b0:	09 f4       	brne	.+2      	; 0x120b4 <gpib_read_byte+0x108>
   120b2:	43 c0       	rjmp	.+134    	; 0x1213a <gpib_read_byte+0x18e>
   120b4:	d0 64       	ori	r29, 0x40	; 64
                break;
        }

        if(trace)
   120b6:	27 e0       	ldi	r18, 0x07	; 7
   120b8:	f2 2e       	mov	r15, r18
   120ba:	3f c0       	rjmp	.+126    	; 0x1213a <gpib_read_byte+0x18e>
   120bc:	81 e0       	ldi	r24, 0x01	; 1
   120be:	90 e0       	ldi	r25, 0x00	; 0
   120c0:	3a db       	rcall	.-2444   	; 0x11736 <gpib_bus_read_init>
   120c2:	04 c0       	rjmp	.+8      	; 0x120cc <gpib_read_byte+0x120>
   120c4:	c1 14       	cp	r12, r1
        {
			/// V2 boards can not read all control and handshake bits at once
			/// FIXME We could add a test for read/write state ??
			/// NRFD,NDAC SRQ are outputs durring write phase, but not at very start
            control = gpib_control_pin_read();
   120c6:	d1 04       	cpc	r13, r1
   120c8:	99 f0       	breq	.+38     	; 0x120f0 <gpib_read_byte+0x144>
   120ca:	05 c0       	rjmp	.+10     	; 0x120d6 <gpib_read_byte+0x12a>
            control |= gpib_handshake_pin_read();
   120cc:	c1 14       	cp	r12, r1
   120ce:	d1 04       	cpc	r13, r1
   120d0:	a9 f0       	breq	.+42     	; 0x120fc <gpib_read_byte+0x150>
   120d2:	98 e0       	ldi	r25, 0x08	; 8
            if(control_last != control)
   120d4:	f9 2e       	mov	r15, r25
   120d6:	4d dc       	rcall	.-1894   	; 0x11972 <gpib_control_pin_read>
   120d8:	5c 01       	movw	r10, r24
            {
                gpib_trace_display(control, TRACE_BUS);
   120da:	5b dc       	rcall	.-1866   	; 0x11992 <gpib_handshake_pin_read>
   120dc:	a8 2a       	or	r10, r24
   120de:	b9 2a       	or	r11, r25
   120e0:	a0 16       	cp	r10, r16
   120e2:	b1 06       	cpc	r11, r17
   120e4:	31 f0       	breq	.+12     	; 0x120f2 <gpib_read_byte+0x146>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   120e6:	62 e0       	ldi	r22, 0x02	; 2
        control_last |= gpib_handshake_pin_read();
        gpib_trace_display(control_last, TRACE_BUS);
    }

    rx_state = GPIB_RX_START;
    while(rx_state != GPIB_RX_DONE)
   120e8:	70 e0       	ldi	r23, 0x00	; 0
   120ea:	c5 01       	movw	r24, r10
   120ec:	18 de       	rcall	.-976    	; 0x11d1e <gpib_trace_display>
   120ee:	01 c0       	rjmp	.+2      	; 0x120f2 <gpib_read_byte+0x146>
   120f0:	58 01       	movw	r10, r16
///  - Remember that NDAC and NRFD are now both LOW!
///  - The spec says to KEEP BOTH LOW when NOT ready to read otherwise
///    we may miss a transfer and cause a controller timeout!
///  - GPIB TX state expects NRFD LOW on entry or it is an ERROR!

    lastcmd = current;
   120f2:	88 e0       	ldi	r24, 0x08	; 8
   120f4:	f8 16       	cp	r15, r24
   120f6:	11 f0       	breq	.+4      	; 0x120fc <gpib_read_byte+0x150>
   120f8:	85 01       	movw	r16, r10
   120fa:	82 cf       	rjmp	.-252    	; 0x12000 <gpib_read_byte+0x54>
   120fc:	80 91 9d 1e 	lds	r24, 0x1E9D	; 0x801e9d <current>
   12100:	90 91 9e 1e 	lds	r25, 0x1E9E	; 0x801e9e <current+0x1>

    if(ch & ERROR_MASK || (ch & ATN_FLAG) == 0)
   12104:	90 93 9a 1c 	sts	0x1C9A, r25	; 0x801c9a <lastcmd+0x1>
   12108:	80 93 99 1c 	sts	0x1C99, r24	; 0x801c99 <lastcmd>
   1210c:	ce 01       	movw	r24, r28
   1210e:	88 27       	eor	r24, r24
        current = 0;
   12110:	90 7d       	andi	r25, 0xD0	; 208
   12112:	89 2b       	or	r24, r25
   12114:	11 f4       	brne	.+4      	; 0x1211a <gpib_read_byte+0x16e>
   12116:	d2 fd       	sbrc	r29, 2
   12118:	05 c0       	rjmp	.+10     	; 0x12124 <gpib_read_byte+0x178>
    else
        current = ch & CMD_MASK;
   1211a:	10 92 9e 1e 	sts	0x1E9E, r1	; 0x801e9e <current+0x1>
   1211e:	10 92 9d 1e 	sts	0x1E9D, r1	; 0x801e9d <current>
   12122:	07 c0       	rjmp	.+14     	; 0x12132 <gpib_read_byte+0x186>
   12124:	ce 01       	movw	r24, r28
   12126:	8f 77       	andi	r24, 0x7F	; 127
   12128:	99 27       	eor	r25, r25
   1212a:	90 93 9e 1e 	sts	0x1E9E, r25	; 0x801e9e <current+0x1>
                }
                break;

            ///@brief Ready for next byte
            case GPIB_RX_DAV_IS_HI:
                rx_state = GPIB_RX_FINISH;        // DONE
   1212e:	80 93 9d 1e 	sts	0x1E9D, r24	; 0x801e9d <current>
            case GPIB_RX_DONE:
				gpib_bus_read_init(1); // Busy
                break;
        }

        if(trace)
   12132:	ce 01       	movw	r24, r28
   12134:	07 c0       	rjmp	.+14     	; 0x12144 <gpib_read_byte+0x198>
   12136:	86 e0       	ldi	r24, 0x06	; 6
   12138:	f8 2e       	mov	r15, r24
        current = 0;
    else
        current = ch & CMD_MASK;

    return (ch);
}
   1213a:	c1 14       	cp	r12, r1
   1213c:	d1 04       	cpc	r13, r1
   1213e:	09 f4       	brne	.+2      	; 0x12142 <gpib_read_byte+0x196>
   12140:	5f cf       	rjmp	.-322    	; 0x12000 <gpib_read_byte+0x54>
   12142:	c9 cf       	rjmp	.-110    	; 0x120d6 <gpib_read_byte+0x12a>
   12144:	df 91       	pop	r29
   12146:	cf 91       	pop	r28
   12148:	1f 91       	pop	r17
   1214a:	0f 91       	pop	r16
   1214c:	ff 90       	pop	r15
   1214e:	df 90       	pop	r13
   12150:	cf 90       	pop	r12
   12152:	bf 90       	pop	r11
   12154:	af 90       	pop	r10
   12156:	08 95       	ret

00012158 <gpib_decode>:
/// @see gpib_decode_str()
/// @return  void

void gpib_decode(uint16_t ch)
{
    gpib_trace_display(ch,0);
   12158:	60 e0       	ldi	r22, 0x00	; 0
   1215a:	70 e0       	ldi	r23, 0x00	; 0
   1215c:	e0 cd       	rjmp	.-1088   	; 0x11d1e <gpib_trace_display>
   1215e:	08 95       	ret

00012160 <gpib_read_str>:
///       - REN_FLAG
///       - PP_FLAG
///     - Error Flags:
///       - IFC_FLAG
int gpib_read_str(uint8_t *buf, int size, uint16_t *status)
{
   12160:	a0 e0       	ldi	r26, 0x00	; 0
   12162:	b0 e0       	ldi	r27, 0x00	; 0
   12164:	e6 eb       	ldi	r30, 0xB6	; 182
   12166:	f0 e9       	ldi	r31, 0x90	; 144
   12168:	0c 94 c9 e8 	jmp	0x1d192	; 0x1d192 <__prologue_saves__+0x10>
   1216c:	5b 01       	movw	r10, r22
   1216e:	6a 01       	movw	r12, r20
    uint16_t val;
    int ind = 0;

    *status &= STATUS_MASK;
   12170:	fa 01       	movw	r30, r20
   12172:	20 81       	ld	r18, Z
   12174:	31 81       	ldd	r19, Z+1	; 0x01
   12176:	22 27       	eor	r18, r18
   12178:	31 83       	std	Z+1, r19	; 0x01
   1217a:	20 83       	st	Z, r18

    if(!size)
   1217c:	67 2b       	or	r22, r23
   1217e:	21 f0       	breq	.+8      	; 0x12188 <gpib_read_str+0x28>
   12180:	7c 01       	movw	r14, r24
   12182:	c0 e0       	ldi	r28, 0x00	; 0
   12184:	d0 e0       	ldi	r29, 0x00	; 0
   12186:	28 c0       	rjmp	.+80     	; 0x121d8 <gpib_read_str+0x78>
    {
        if(debuglevel & (1+4))
   12188:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1218c:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   12190:	85 70       	andi	r24, 0x05	; 5
   12192:	99 27       	eor	r25, r25
   12194:	89 2b       	or	r24, r25
   12196:	09 f4       	brne	.+2      	; 0x1219a <gpib_read_str+0x3a>
   12198:	89 c0       	rjmp	.+274    	; 0x122ac <gpib_read_str+0x14c>
            printf("gpib_read_str: size = 0\n");
   1219a:	88 ea       	ldi	r24, 0xA8	; 168
   1219c:	90 e1       	ldi	r25, 0x10	; 16
   1219e:	1f 92       	push	r1
   121a0:	9f 93       	push	r25
   121a2:	8f 93       	push	r24
   121a4:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   121a8:	0f 90       	pop	r0
   121aa:	0f 90       	pop	r0
   121ac:	0f 90       	pop	r0
   121ae:	7e c0       	rjmp	.+252    	; 0x122ac <gpib_read_str+0x14c>
        {
            *status |= (val & ERROR_MASK);
            break;
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
   121b0:	80 27       	eor	r24, r16
   121b2:	91 27       	eor	r25, r17
   121b4:	92 fd       	sbrc	r25, 2
   121b6:	2e c0       	rjmp	.+92     	; 0x12214 <gpib_read_str+0xb4>
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
            gpib_unread(val);
            break;
        }

        if(val & ATN_FLAG)
   121b8:	c8 01       	movw	r24, r16
   121ba:	88 27       	eor	r24, r24
   121bc:	94 70       	andi	r25, 0x04	; 4
   121be:	12 ff       	sbrs	r17, 2
   121c0:	49 c0       	rjmp	.+146    	; 0x12254 <gpib_read_str+0xf4>
            buf[ind] = (val & CMD_MASK);
   121c2:	20 2f       	mov	r18, r16
   121c4:	2f 77       	andi	r18, 0x7F	; 127
   121c6:	f7 01       	movw	r30, r14
   121c8:	20 83       	st	Z, r18
        else
            buf[ind] = (val & DATA_MASK);
        ++ind;
   121ca:	21 96       	adiw	r28, 0x01	; 1

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   121cc:	89 2b       	or	r24, r25
   121ce:	09 f4       	brne	.+2      	; 0x121d2 <gpib_read_str+0x72>
   121d0:	44 c0       	rjmp	.+136    	; 0x1225a <gpib_read_str+0xfa>
   121d2:	ff ef       	ldi	r31, 0xFF	; 255
   121d4:	ef 1a       	sub	r14, r31
   121d6:	ff 0a       	sbc	r15, r31
    {
        if(debuglevel & (1+4))
            printf("gpib_read_str: size = 0\n");
    }

    while(ind < size)
   121d8:	ca 15       	cp	r28, r10
   121da:	db 05       	cpc	r29, r11
   121dc:	0c f0       	brlt	.+2      	; 0x121e0 <gpib_read_str+0x80>
   121de:	47 c0       	rjmp	.+142    	; 0x1226e <gpib_read_str+0x10e>
    {
        val = gpib_read_byte(NO_TRACE);
   121e0:	80 e0       	ldi	r24, 0x00	; 0
   121e2:	90 e0       	ldi	r25, 0x00	; 0
   121e4:	e3 de       	rcall	.-570    	; 0x11fac <gpib_read_byte>
   121e6:	8c 01       	movw	r16, r24
#if SDEBUG
        if(debuglevel & 256)
   121e8:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   121ec:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   121f0:	90 ff       	sbrs	r25, 0
            gpib_decode(val);
   121f2:	02 c0       	rjmp	.+4      	; 0x121f8 <gpib_read_str+0x98>
   121f4:	c8 01       	movw	r24, r16
#endif
        if(val & ERROR_MASK)
   121f6:	b0 df       	rcall	.-160    	; 0x12158 <gpib_decode>
   121f8:	98 01       	movw	r18, r16
   121fa:	22 27       	eor	r18, r18
   121fc:	30 7d       	andi	r19, 0xD0	; 208
   121fe:	f6 01       	movw	r30, r12
   12200:	80 81       	ld	r24, Z
   12202:	91 81       	ldd	r25, Z+1	; 0x01
   12204:	21 15       	cp	r18, r1
   12206:	31 05       	cpc	r19, r1
        {
            *status |= (val & ERROR_MASK);
   12208:	99 f2       	breq	.-90     	; 0x121b0 <gpib_read_str+0x50>
   1220a:	82 2b       	or	r24, r18
   1220c:	93 2b       	or	r25, r19
   1220e:	91 83       	std	Z+1, r25	; 0x01
            break;
   12210:	80 83       	st	Z, r24
        }

        if((*status & ATN_FLAG) != (val & ATN_FLAG))
        {
            if(debuglevel & (1+4))
   12212:	30 c0       	rjmp	.+96     	; 0x12274 <gpib_read_str+0x114>
   12214:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12218:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1221c:	85 70       	andi	r24, 0x05	; 5
   1221e:	99 27       	eor	r25, r25
   12220:	89 2b       	or	r24, r25
                printf("gpib_read_str(ind:%d): ATN %02XH unexpected\n",ind, 0xff & val);
   12222:	a9 f0       	breq	.+42     	; 0x1224e <gpib_read_str+0xee>
   12224:	c8 01       	movw	r24, r16
   12226:	99 27       	eor	r25, r25
   12228:	9f 93       	push	r25
   1222a:	8f 93       	push	r24
   1222c:	df 93       	push	r29
   1222e:	cf 93       	push	r28
   12230:	8b e7       	ldi	r24, 0x7B	; 123
   12232:	90 e1       	ldi	r25, 0x10	; 16
   12234:	1f 92       	push	r1
   12236:	9f 93       	push	r25
   12238:	8f 93       	push	r24
   1223a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1223e:	ed b7       	in	r30, 0x3d	; 61
   12240:	fe b7       	in	r31, 0x3e	; 62
   12242:	37 96       	adiw	r30, 0x07	; 7
   12244:	0f b6       	in	r0, 0x3f	; 63
   12246:	f8 94       	cli
   12248:	fe bf       	out	0x3e, r31	; 62
            gpib_unread(val);
   1224a:	0f be       	out	0x3f, r0	; 63
   1224c:	ed bf       	out	0x3d, r30	; 61
   1224e:	c8 01       	movw	r24, r16
            break;
   12250:	65 db       	rcall	.-2358   	; 0x1191c <gpib_unread>
        }

        if(val & ATN_FLAG)
            buf[ind] = (val & CMD_MASK);
        else
            buf[ind] = (val & DATA_MASK);
   12252:	10 c0       	rjmp	.+32     	; 0x12274 <gpib_read_str+0x114>
   12254:	f7 01       	movw	r30, r14
   12256:	00 83       	st	Z, r16
        ++ind;

        if(!(val & ATN_FLAG) && (val & EOI_FLAG) )
   12258:	b8 cf       	rjmp	.-144    	; 0x121ca <gpib_read_str+0x6a>
   1225a:	10 ff       	sbrs	r17, 0
        {

            if(*status & EOI_FLAG)
   1225c:	ba cf       	rjmp	.-140    	; 0x121d2 <gpib_read_str+0x72>
   1225e:	f6 01       	movw	r30, r12
   12260:	80 81       	ld	r24, Z
   12262:	91 81       	ldd	r25, Z+1	; 0x01
   12264:	90 fd       	sbrc	r25, 0
                return(ind);
/// @todo TODO
///  decode this state - for now I just set the EOI_FLAG
            *status |= EOI_FLAG;
   12266:	24 c0       	rjmp	.+72     	; 0x122b0 <gpib_read_str+0x150>
   12268:	91 60       	ori	r25, 0x01	; 1
   1226a:	91 83       	std	Z+1, r25	; 0x01
            break;
        }
    }
    if ( ind != size )
   1226c:	80 83       	st	Z, r24
   1226e:	ca 15       	cp	r28, r10
   12270:	db 05       	cpc	r29, r11
    {
        if(debuglevel & (1+4))
   12272:	f1 f0       	breq	.+60     	; 0x122b0 <gpib_read_str+0x150>
   12274:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12278:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1227c:	85 70       	andi	r24, 0x05	; 5
   1227e:	99 27       	eor	r25, r25
   12280:	89 2b       	or	r24, r25
            printf("[gpib_read_str read(%d) expected(%d)]\n", ind , size);
   12282:	b1 f0       	breq	.+44     	; 0x122b0 <gpib_read_str+0x150>
   12284:	bf 92       	push	r11
   12286:	af 92       	push	r10
   12288:	df 93       	push	r29
   1228a:	cf 93       	push	r28
   1228c:	84 e5       	ldi	r24, 0x54	; 84
   1228e:	90 e1       	ldi	r25, 0x10	; 16
   12290:	1f 92       	push	r1
   12292:	9f 93       	push	r25
   12294:	8f 93       	push	r24
   12296:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1229a:	ed b7       	in	r30, 0x3d	; 61
   1229c:	fe b7       	in	r31, 0x3e	; 62
   1229e:	37 96       	adiw	r30, 0x07	; 7
   122a0:	0f b6       	in	r0, 0x3f	; 63
   122a2:	f8 94       	cli
   122a4:	fe bf       	out	0x3e, r31	; 62
   122a6:	0f be       	out	0x3f, r0	; 63
   122a8:	ed bf       	out	0x3d, r30	; 61
   122aa:	02 c0       	rjmp	.+4      	; 0x122b0 <gpib_read_str+0x150>
   122ac:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return(ind);
}
   122ae:	d0 e0       	ldi	r29, 0x00	; 0
   122b0:	ce 01       	movw	r24, r28
   122b2:	cd b7       	in	r28, 0x3d	; 61
   122b4:	de b7       	in	r29, 0x3e	; 62
   122b6:	ea e0       	ldi	r30, 0x0A	; 10
   122b8:	0c 94 e5 e8 	jmp	0x1d1ca	; 0x1d1ca <__epilogue_restores__+0x10>

000122bc <gpib_write_str>:
///     - Error Flags:
///       - IFC_FLAG
/// @see: gpib_write_byte()
/// @see: gpib.h _FLAGS defines for a full list)
int gpib_write_str(uint8_t *buf, int size, uint16_t *status)
{
   122bc:	a0 e0       	ldi	r26, 0x00	; 0
   122be:	b0 e0       	ldi	r27, 0x00	; 0
   122c0:	e4 e6       	ldi	r30, 0x64	; 100
   122c2:	f1 e9       	ldi	r31, 0x91	; 145
   122c4:	0c 94 c9 e8 	jmp	0x1d192	; 0x1d192 <__prologue_saves__+0x10>
   122c8:	8b 01       	movw	r16, r22
   122ca:	7a 01       	movw	r14, r20
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;
   122cc:	fa 01       	movw	r30, r20
   122ce:	20 81       	ld	r18, Z
   122d0:	31 81       	ldd	r19, Z+1	; 0x01
   122d2:	22 27       	eor	r18, r18
   122d4:	31 83       	std	Z+1, r19	; 0x01
   122d6:	20 83       	st	Z, r18

    if(!size)
   122d8:	67 2b       	or	r22, r23
   122da:	21 f0       	breq	.+8      	; 0x122e4 <gpib_write_str+0x28>
   122dc:	6c 01       	movw	r12, r24
   122de:	c0 e0       	ldi	r28, 0x00	; 0
   122e0:	d0 e0       	ldi	r29, 0x00	; 0
   122e2:	35 c0       	rjmp	.+106    	; 0x1234e <gpib_write_str+0x92>
    {
        if(debuglevel & (1+4))
   122e4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   122e8:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   122ec:	85 70       	andi	r24, 0x05	; 5
   122ee:	99 27       	eor	r25, r25
   122f0:	89 2b       	or	r24, r25
   122f2:	09 f4       	brne	.+2      	; 0x122f6 <gpib_write_str+0x3a>
   122f4:	54 c0       	rjmp	.+168    	; 0x1239e <gpib_write_str+0xe2>
            printf("gpib_write_str: size = 0\n");
   122f6:	8a e3       	ldi	r24, 0x3A	; 58
   122f8:	90 e1       	ldi	r25, 0x10	; 16
   122fa:	1f 92       	push	r1
   122fc:	9f 93       	push	r25
   122fe:	8f 93       	push	r24
   12300:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   12304:	0f 90       	pop	r0
   12306:	0f 90       	pop	r0
   12308:	0f 90       	pop	r0
   1230a:	49 c0       	rjmp	.+146    	; 0x1239e <gpib_write_str+0xe2>
    }

    while(ind < size)
    {
        ch = buf[ind++] & 0xff;                   // unsigned
   1230c:	21 96       	adiw	r28, 0x01	; 1
   1230e:	f6 01       	movw	r30, r12
   12310:	81 91       	ld	r24, Z+
   12312:	6f 01       	movw	r12, r30
   12314:	90 e0       	ldi	r25, 0x00	; 0

        if(*status & ATN_FLAG)
   12316:	f7 01       	movw	r30, r14
   12318:	20 81       	ld	r18, Z
   1231a:	31 81       	ldd	r19, Z+1	; 0x01
   1231c:	32 fd       	sbrc	r19, 2
        {
            ch |= ATN_FLAG;
   1231e:	94 60       	ori	r25, 0x04	; 4
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   12320:	30 fd       	sbrc	r19, 0
            ch |= EOI_FLAG;

/// @return Returns

        val = gpib_write_byte(ch);
   12322:	19 c0       	rjmp	.+50     	; 0x12356 <gpib_write_str+0x9a>
        *status |= (val & ERROR_MASK);
   12324:	42 db       	rcall	.-2428   	; 0x119aa <gpib_write_byte>
   12326:	5c 01       	movw	r10, r24
   12328:	aa 24       	eor	r10, r10
   1232a:	f0 ed       	ldi	r31, 0xD0	; 208
   1232c:	bf 22       	and	r11, r31
   1232e:	f7 01       	movw	r30, r14
   12330:	20 81       	ld	r18, Z
   12332:	31 81       	ldd	r19, Z+1	; 0x01
   12334:	2a 29       	or	r18, r10
   12336:	3b 29       	or	r19, r11
   12338:	31 83       	std	Z+1, r19	; 0x01

#if SDEBUG
        if(debuglevel & 256)
   1233a:	20 83       	st	Z, r18
   1233c:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   12340:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <debuglevel+0x1>
            gpib_decode(val);
   12344:	30 fd       	sbrc	r19, 0
#endif
        if(val & ERROR_MASK)
   12346:	08 df       	rcall	.-496    	; 0x12158 <gpib_decode>
   12348:	a1 14       	cp	r10, r1
   1234a:	b1 04       	cpc	r11, r1
    {
        if(debuglevel & (1+4))
            printf("gpib_write_str: size = 0\n");
    }

    while(ind < size)
   1234c:	49 f4       	brne	.+18     	; 0x12360 <gpib_write_str+0xa4>
   1234e:	c0 17       	cp	r28, r16
   12350:	d1 07       	cpc	r29, r17
   12352:	e4 f2       	brlt	.-72     	; 0x1230c <gpib_write_str+0x50>
        if(*status & ATN_FLAG)
        {
            ch |= ATN_FLAG;
        }

        if( (*status & EOI_FLAG) && (ind == size ) )
   12354:	05 c0       	rjmp	.+10     	; 0x12360 <gpib_write_str+0xa4>
   12356:	0c 17       	cp	r16, r28
   12358:	1d 07       	cpc	r17, r29
            ch |= EOI_FLAG;
   1235a:	21 f7       	brne	.-56     	; 0x12324 <gpib_write_str+0x68>
   1235c:	91 60       	ori	r25, 0x01	; 1
        {
            break;
        }

    }                                             // while(ind < size)
    if ( ind != size )
   1235e:	e2 cf       	rjmp	.-60     	; 0x12324 <gpib_write_str+0x68>
   12360:	c0 17       	cp	r28, r16
   12362:	d1 07       	cpc	r29, r17
    {
        if(debuglevel & (1+4))
   12364:	f1 f0       	breq	.+60     	; 0x123a2 <gpib_write_str+0xe6>
   12366:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1236a:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1236e:	85 70       	andi	r24, 0x05	; 5
   12370:	99 27       	eor	r25, r25
   12372:	89 2b       	or	r24, r25
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
   12374:	b1 f0       	breq	.+44     	; 0x123a2 <gpib_write_str+0xe6>
   12376:	1f 93       	push	r17
   12378:	0f 93       	push	r16
   1237a:	df 93       	push	r29
   1237c:	cf 93       	push	r28
   1237e:	82 e1       	ldi	r24, 0x12	; 18
   12380:	90 e1       	ldi	r25, 0x10	; 16
   12382:	1f 92       	push	r1
   12384:	9f 93       	push	r25
   12386:	8f 93       	push	r24
   12388:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1238c:	8d b7       	in	r24, 0x3d	; 61
   1238e:	9e b7       	in	r25, 0x3e	; 62
   12390:	07 96       	adiw	r24, 0x07	; 7
   12392:	0f b6       	in	r0, 0x3f	; 63
   12394:	f8 94       	cli
   12396:	9e bf       	out	0x3e, r25	; 62
   12398:	0f be       	out	0x3f, r0	; 63
   1239a:	8d bf       	out	0x3d, r24	; 61
    uint16_t val, ch;
    int ind = 0;

    *status &= STATUS_MASK;

    if(!size)
   1239c:	02 c0       	rjmp	.+4      	; 0x123a2 <gpib_write_str+0xe6>
   1239e:	c0 e0       	ldi	r28, 0x00	; 0
    {
        if(debuglevel & (1+4))
            printf("[gpib_write_str sent(%d) expected(%d)]\n", ind,size);
    }
    return(ind);
}
   123a0:	d0 e0       	ldi	r29, 0x00	; 0
   123a2:	ce 01       	movw	r24, r28
   123a4:	cd b7       	in	r28, 0x3d	; 61
   123a6:	de b7       	in	r29, 0x3e	; 62
   123a8:	ea e0       	ldi	r30, 0x0A	; 10
   123aa:	0c 94 e5 e8 	jmp	0x1d1ca	; 0x1d1ca <__epilogue_restores__+0x10>

000123ae <gpib_file_init>:
   123ae:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <debuglevel+0x1>
   123b2:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <debuglevel>
   123b6:	82 eb       	ldi	r24, 0xB2	; 178
   123b8:	91 e0       	ldi	r25, 0x01	; 1
   123ba:	0e 94 1b b8 	call	0x17036	; 0x17036 <POSIX_Read_Config>
   123be:	9f 93       	push	r25
   123c0:	8f 93       	push	r24
   123c2:	82 eb       	ldi	r24, 0xB2	; 178
   123c4:	91 e0       	ldi	r25, 0x01	; 1
   123c6:	9f 93       	push	r25
   123c8:	8f 93       	push	r24
   123ca:	80 e5       	ldi	r24, 0x50	; 80
   123cc:	95 e1       	ldi	r25, 0x15	; 21
   123ce:	1f 92       	push	r1
   123d0:	9f 93       	push	r25
   123d2:	8f 93       	push	r24
   123d4:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   123d8:	0e 94 1a b8 	call	0x17034	; 0x17034 <set_Config_Defaults>
   123dc:	0e 94 b4 72 	call	0xe568	; 0xe568 <mmc_wp_status>
   123e0:	2d b7       	in	r18, 0x3d	; 61
   123e2:	3e b7       	in	r19, 0x3e	; 62
   123e4:	29 5f       	subi	r18, 0xF9	; 249
   123e6:	3f 4f       	sbci	r19, 0xFF	; 255
   123e8:	0f b6       	in	r0, 0x3f	; 63
   123ea:	f8 94       	cli
   123ec:	3e bf       	out	0x3e, r19	; 62
   123ee:	0f be       	out	0x3f, r0	; 63
   123f0:	2d bf       	out	0x3d, r18	; 61
   123f2:	89 2b       	or	r24, r25
   123f4:	51 f0       	breq	.+20     	; 0x1240a <gpib_file_init+0x5c>
   123f6:	87 e3       	ldi	r24, 0x37	; 55
   123f8:	95 e1       	ldi	r25, 0x15	; 21
   123fa:	1f 92       	push	r1
   123fc:	9f 93       	push	r25
   123fe:	8f 93       	push	r24
   12400:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   12404:	0f 90       	pop	r0
   12406:	0f 90       	pop	r0
   12408:	0f 90       	pop	r0
   1240a:	08 95       	ret

0001240c <SS80_is_MLA>:
   1240c:	40 e2       	ldi	r20, 0x20	; 32
   1240e:	50 e0       	ldi	r21, 0x00	; 0
   12410:	bc 01       	movw	r22, r24
   12412:	82 e0       	ldi	r24, 0x02	; 2
   12414:	90 e0       	ldi	r25, 0x00	; 0
   12416:	0e 94 72 b5 	call	0x16ae4	; 0x16ae4 <find_device>
   1241a:	8f 3f       	cpi	r24, 0xFF	; 255
   1241c:	2f ef       	ldi	r18, 0xFF	; 255
   1241e:	92 07       	cpc	r25, r18
   12420:	19 f0       	breq	.+6      	; 0x12428 <SS80_is_MLA+0x1c>
   12422:	0c 94 9c b5 	jmp	0x16b38	; 0x16b38 <set_active_device>
   12426:	08 95       	ret
   12428:	80 e0       	ldi	r24, 0x00	; 0
   1242a:	90 e0       	ldi	r25, 0x00	; 0
   1242c:	08 95       	ret

0001242e <SS80_is_MTA>:
   1242e:	40 e4       	ldi	r20, 0x40	; 64
   12430:	50 e0       	ldi	r21, 0x00	; 0
   12432:	bc 01       	movw	r22, r24
   12434:	82 e0       	ldi	r24, 0x02	; 2
   12436:	90 e0       	ldi	r25, 0x00	; 0
   12438:	0e 94 72 b5 	call	0x16ae4	; 0x16ae4 <find_device>
   1243c:	8f 3f       	cpi	r24, 0xFF	; 255
   1243e:	2f ef       	ldi	r18, 0xFF	; 255
   12440:	92 07       	cpc	r25, r18
   12442:	19 f0       	breq	.+6      	; 0x1244a <SS80_is_MTA+0x1c>
   12444:	0c 94 9c b5 	jmp	0x16b38	; 0x16b38 <set_active_device>
   12448:	08 95       	ret
   1244a:	80 e0       	ldi	r24, 0x00	; 0
   1244c:	90 e0       	ldi	r25, 0x00	; 0
   1244e:	08 95       	ret

00012450 <SS80_is_MSA>:
   12450:	40 e6       	ldi	r20, 0x60	; 96
   12452:	50 e0       	ldi	r21, 0x00	; 0
   12454:	bc 01       	movw	r22, r24
   12456:	82 e0       	ldi	r24, 0x02	; 2
   12458:	90 e0       	ldi	r25, 0x00	; 0
   1245a:	0e 94 72 b5 	call	0x16ae4	; 0x16ae4 <find_device>
   1245e:	8f 3f       	cpi	r24, 0xFF	; 255
   12460:	2f ef       	ldi	r18, 0xFF	; 255
   12462:	92 07       	cpc	r25, r18
   12464:	19 f0       	breq	.+6      	; 0x1246c <SS80_is_MSA+0x1c>
   12466:	0c 94 9c b5 	jmp	0x16b38	; 0x16b38 <set_active_device>
   1246a:	08 95       	ret
   1246c:	80 e0       	ldi	r24, 0x00	; 0
   1246e:	90 e0       	ldi	r25, 0x00	; 0
   12470:	08 95       	ret

00012472 <AMIGO_is_MLA>:
   12472:	40 e2       	ldi	r20, 0x20	; 32
   12474:	50 e0       	ldi	r21, 0x00	; 0
   12476:	bc 01       	movw	r22, r24
   12478:	81 e0       	ldi	r24, 0x01	; 1
   1247a:	90 e0       	ldi	r25, 0x00	; 0
   1247c:	0e 94 72 b5 	call	0x16ae4	; 0x16ae4 <find_device>
   12480:	8f 3f       	cpi	r24, 0xFF	; 255
   12482:	2f ef       	ldi	r18, 0xFF	; 255
   12484:	92 07       	cpc	r25, r18
   12486:	19 f0       	breq	.+6      	; 0x1248e <AMIGO_is_MLA+0x1c>
   12488:	0c 94 9c b5 	jmp	0x16b38	; 0x16b38 <set_active_device>
   1248c:	08 95       	ret
   1248e:	80 e0       	ldi	r24, 0x00	; 0
   12490:	90 e0       	ldi	r25, 0x00	; 0
   12492:	08 95       	ret

00012494 <AMIGO_is_MTA>:
   12494:	40 e4       	ldi	r20, 0x40	; 64
   12496:	50 e0       	ldi	r21, 0x00	; 0
   12498:	bc 01       	movw	r22, r24
   1249a:	81 e0       	ldi	r24, 0x01	; 1
   1249c:	90 e0       	ldi	r25, 0x00	; 0
   1249e:	0e 94 72 b5 	call	0x16ae4	; 0x16ae4 <find_device>
   124a2:	8f 3f       	cpi	r24, 0xFF	; 255
   124a4:	2f ef       	ldi	r18, 0xFF	; 255
   124a6:	92 07       	cpc	r25, r18
   124a8:	19 f0       	breq	.+6      	; 0x124b0 <AMIGO_is_MTA+0x1c>
   124aa:	0c 94 9c b5 	jmp	0x16b38	; 0x16b38 <set_active_device>
   124ae:	08 95       	ret
   124b0:	80 e0       	ldi	r24, 0x00	; 0
   124b2:	90 e0       	ldi	r25, 0x00	; 0
   124b4:	08 95       	ret

000124b6 <AMIGO_is_MSA>:
   124b6:	40 e6       	ldi	r20, 0x60	; 96
   124b8:	50 e0       	ldi	r21, 0x00	; 0
   124ba:	bc 01       	movw	r22, r24
   124bc:	81 e0       	ldi	r24, 0x01	; 1
   124be:	90 e0       	ldi	r25, 0x00	; 0
   124c0:	0e 94 72 b5 	call	0x16ae4	; 0x16ae4 <find_device>
   124c4:	8f 3f       	cpi	r24, 0xFF	; 255
   124c6:	2f ef       	ldi	r18, 0xFF	; 255
   124c8:	92 07       	cpc	r25, r18
   124ca:	19 f0       	breq	.+6      	; 0x124d2 <AMIGO_is_MSA+0x1c>
   124cc:	0c 94 9c b5 	jmp	0x16b38	; 0x16b38 <set_active_device>
   124d0:	08 95       	ret
   124d2:	80 e0       	ldi	r24, 0x00	; 0
   124d4:	90 e0       	ldi	r25, 0x00	; 0
   124d6:	08 95       	ret

000124d8 <PRINTER_is_MLA>:
   124d8:	40 e2       	ldi	r20, 0x20	; 32
   124da:	50 e0       	ldi	r21, 0x00	; 0
   124dc:	bc 01       	movw	r22, r24
   124de:	83 e0       	ldi	r24, 0x03	; 3
   124e0:	90 e0       	ldi	r25, 0x00	; 0
   124e2:	0e 94 72 b5 	call	0x16ae4	; 0x16ae4 <find_device>
   124e6:	8f 3f       	cpi	r24, 0xFF	; 255
   124e8:	2f ef       	ldi	r18, 0xFF	; 255
   124ea:	92 07       	cpc	r25, r18
   124ec:	19 f0       	breq	.+6      	; 0x124f4 <PRINTER_is_MLA+0x1c>
   124ee:	0c 94 9c b5 	jmp	0x16b38	; 0x16b38 <set_active_device>
   124f2:	08 95       	ret
   124f4:	80 e0       	ldi	r24, 0x00	; 0
   124f6:	90 e0       	ldi	r25, 0x00	; 0
   124f8:	08 95       	ret

000124fa <PRINTER_is_MTA>:
   124fa:	40 e4       	ldi	r20, 0x40	; 64
   124fc:	50 e0       	ldi	r21, 0x00	; 0
   124fe:	bc 01       	movw	r22, r24
   12500:	83 e0       	ldi	r24, 0x03	; 3
   12502:	90 e0       	ldi	r25, 0x00	; 0
   12504:	0e 94 72 b5 	call	0x16ae4	; 0x16ae4 <find_device>
   12508:	8f 3f       	cpi	r24, 0xFF	; 255
   1250a:	2f ef       	ldi	r18, 0xFF	; 255
   1250c:	92 07       	cpc	r25, r18
   1250e:	19 f0       	breq	.+6      	; 0x12516 <PRINTER_is_MTA+0x1c>
   12510:	0c 94 9c b5 	jmp	0x16b38	; 0x16b38 <set_active_device>
   12514:	08 95       	ret
   12516:	80 e0       	ldi	r24, 0x00	; 0
   12518:	90 e0       	ldi	r25, 0x00	; 0
   1251a:	08 95       	ret

0001251c <gpib_init_devices>:
   1251c:	2f d9       	rcall	.-3490   	; 0x1177c <gpib_bus_init>
   1251e:	0e 94 49 a2 	call	0x14492	; 0x14492 <SS80_init>
   12522:	0e 94 cd a7 	call	0x14f9a	; 0x14f9a <amigo_init>
   12526:	0c 94 b5 b2 	jmp	0x1656a	; 0x1656a <printer_close>
   1252a:	08 95       	ret

0001252c <gpib_trace_task>:
   1252c:	0f 93       	push	r16
   1252e:	1f 93       	push	r17
   12530:	cf 93       	push	r28
   12532:	df 93       	push	r29
   12534:	eb 01       	movw	r28, r22
   12536:	00 97       	sbiw	r24, 0x00	; 0
   12538:	09 f4       	brne	.+2      	; 0x1253c <gpib_trace_task+0x10>
   1253a:	42 c0       	rjmp	.+132    	; 0x125c0 <gpib_trace_task+0x94>
   1253c:	fc 01       	movw	r30, r24
   1253e:	20 81       	ld	r18, Z
   12540:	22 23       	and	r18, r18
   12542:	f1 f1       	breq	.+124    	; 0x125c0 <gpib_trace_task+0x94>
   12544:	0e 94 77 30 	call	0x60ee	; 0x60ee <skipspaces>
   12548:	8c 01       	movw	r16, r24
   1254a:	1f 93       	push	r17
   1254c:	8f 93       	push	r24
   1254e:	8d e1       	ldi	r24, 0x1D	; 29
   12550:	95 e1       	ldi	r25, 0x15	; 21
   12552:	1f 92       	push	r1
   12554:	9f 93       	push	r25
   12556:	8f 93       	push	r24
   12558:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1255c:	0f 90       	pop	r0
   1255e:	0f 90       	pop	r0
   12560:	0f 90       	pop	r0
   12562:	0f 90       	pop	r0
   12564:	0f 90       	pop	r0
   12566:	20 97       	sbiw	r28, 0x00	; 0
   12568:	51 f0       	breq	.+20     	; 0x1257e <gpib_trace_task+0x52>
   1256a:	82 ef       	ldi	r24, 0xF2	; 242
   1256c:	94 e1       	ldi	r25, 0x14	; 20
   1256e:	1f 92       	push	r1
   12570:	9f 93       	push	r25
   12572:	8f 93       	push	r24
   12574:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   12578:	0f 90       	pop	r0
   1257a:	0f 90       	pop	r0
   1257c:	0f 90       	pop	r0
   1257e:	8b ed       	ldi	r24, 0xDB	; 219
   12580:	94 e1       	ldi	r25, 0x14	; 20
   12582:	1f 92       	push	r1
   12584:	9f 93       	push	r25
   12586:	8f 93       	push	r24
   12588:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1258c:	69 e6       	ldi	r22, 0x69	; 105
   1258e:	78 e0       	ldi	r23, 0x08	; 8
   12590:	c8 01       	movw	r24, r16
   12592:	0e 94 d2 81 	call	0x103a4	; 0x103a4 <fopen>
   12596:	90 93 17 19 	sts	0x1917, r25	; 0x801917 <gpib_log_fp+0x1>
   1259a:	80 93 16 19 	sts	0x1916, r24	; 0x801916 <gpib_log_fp>
   1259e:	0f 90       	pop	r0
   125a0:	0f 90       	pop	r0
   125a2:	0f 90       	pop	r0
   125a4:	89 2b       	or	r24, r25
   125a6:	a1 f4       	brne	.+40     	; 0x125d0 <gpib_trace_task+0xa4>
   125a8:	87 e1       	ldi	r24, 0x17	; 23
   125aa:	9d e0       	ldi	r25, 0x0D	; 13
   125ac:	0e 94 a8 7b 	call	0xf750	; 0xf750 <perror>
   125b0:	8f ec       	ldi	r24, 0xCF	; 207
   125b2:	94 e1       	ldi	r25, 0x14	; 20
   125b4:	1f 92       	push	r1
   125b6:	9f 93       	push	r25
   125b8:	8f 93       	push	r24
   125ba:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   125be:	3b c0       	rjmp	.+118    	; 0x12636 <gpib_trace_task+0x10a>
   125c0:	80 91 72 1c 	lds	r24, 0x1C72	; 0x801c72 <__iob+0x2>
   125c4:	90 91 73 1c 	lds	r25, 0x1C73	; 0x801c73 <__iob+0x3>
   125c8:	90 93 17 19 	sts	0x1917, r25	; 0x801917 <gpib_log_fp+0x1>
   125cc:	80 93 16 19 	sts	0x1916, r24	; 0x801916 <gpib_log_fp>
   125d0:	fd d8       	rcall	.-3590   	; 0x117cc <gpib_state_init>
   125d2:	a4 df       	rcall	.-184    	; 0x1251c <gpib_init_devices>
   125d4:	80 91 16 19 	lds	r24, 0x1916	; 0x801916 <gpib_log_fp>
   125d8:	90 91 17 19 	lds	r25, 0x1917	; 0x801917 <gpib_log_fp+0x1>
   125dc:	4e db       	rcall	.-2404   	; 0x11c7a <gpib_decode_header>
   125de:	80 e0       	ldi	r24, 0x00	; 0
   125e0:	0e 94 14 2c 	call	0x5828	; 0x5828 <uart_keyhit>
   125e4:	89 2b       	or	r24, r25
   125e6:	31 f4       	brne	.+12     	; 0x125f4 <gpib_trace_task+0xc8>
   125e8:	ce 01       	movw	r24, r28
   125ea:	e0 dc       	rcall	.-1600   	; 0x11fac <gpib_read_byte>
   125ec:	20 97       	sbiw	r28, 0x00	; 0
   125ee:	b9 f7       	brne	.-18     	; 0x125de <gpib_trace_task+0xb2>
   125f0:	b3 dd       	rcall	.-1178   	; 0x12158 <gpib_decode>
   125f2:	f5 cf       	rjmp	.-22     	; 0x125de <gpib_trace_task+0xb2>
   125f4:	89 ec       	ldi	r24, 0xC9	; 201
   125f6:	94 e1       	ldi	r25, 0x14	; 20
   125f8:	1f 92       	push	r1
   125fa:	9f 93       	push	r25
   125fc:	8f 93       	push	r24
   125fe:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   12602:	80 91 16 19 	lds	r24, 0x1916	; 0x801916 <gpib_log_fp>
   12606:	90 91 17 19 	lds	r25, 0x1917	; 0x801917 <gpib_log_fp+0x1>
   1260a:	0f 90       	pop	r0
   1260c:	0f 90       	pop	r0
   1260e:	0f 90       	pop	r0
   12610:	00 97       	sbiw	r24, 0x00	; 0
   12612:	a1 f0       	breq	.+40     	; 0x1263c <gpib_trace_task+0x110>
   12614:	0e 94 7c 80 	call	0x100f8	; 0x100f8 <fclose>
   12618:	87 eb       	ldi	r24, 0xB7	; 183
   1261a:	94 e1       	ldi	r25, 0x14	; 20
   1261c:	1f 92       	push	r1
   1261e:	9f 93       	push	r25
   12620:	8f 93       	push	r24
   12622:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   12626:	80 91 72 1c 	lds	r24, 0x1C72	; 0x801c72 <__iob+0x2>
   1262a:	90 91 73 1c 	lds	r25, 0x1C73	; 0x801c73 <__iob+0x3>
   1262e:	90 93 17 19 	sts	0x1917, r25	; 0x801917 <gpib_log_fp+0x1>
   12632:	80 93 16 19 	sts	0x1916, r24	; 0x801916 <gpib_log_fp>
   12636:	0f 90       	pop	r0
   12638:	0f 90       	pop	r0
   1263a:	0f 90       	pop	r0
   1263c:	df 91       	pop	r29
   1263e:	cf 91       	pop	r28
   12640:	1f 91       	pop	r17
   12642:	0f 91       	pop	r16
   12644:	08 95       	ret

00012646 <gpib_error_test>:
   12646:	ef 92       	push	r14
   12648:	ff 92       	push	r15
   1264a:	0f 93       	push	r16
   1264c:	1f 93       	push	r17
   1264e:	cf 93       	push	r28
   12650:	df 93       	push	r29
   12652:	7c 01       	movw	r14, r24
   12654:	ec 01       	movw	r28, r24
   12656:	cc 27       	eor	r28, r28
   12658:	d0 7d       	andi	r29, 0xD0	; 208
   1265a:	20 97       	sbiw	r28, 0x00	; 0
   1265c:	61 f0       	breq	.+24     	; 0x12676 <gpib_error_test+0x30>
   1265e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12662:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   12666:	8e 72       	andi	r24, 0x2E	; 46
   12668:	99 27       	eor	r25, r25
   1266a:	87 01       	movw	r16, r14
   1266c:	00 27       	eor	r16, r16
   1266e:	10 71       	andi	r17, 0x10	; 16
   12670:	89 2b       	or	r24, r25
   12672:	59 f4       	brne	.+22     	; 0x1268a <gpib_error_test+0x44>
   12674:	17 c0       	rjmp	.+46     	; 0x126a4 <gpib_error_test+0x5e>
   12676:	80 e0       	ldi	r24, 0x00	; 0
   12678:	0e 94 14 2c 	call	0x5828	; 0x5828 <uart_keyhit>
   1267c:	89 2b       	or	r24, r25
   1267e:	79 f7       	brne	.-34     	; 0x1265e <gpib_error_test+0x18>
   12680:	0e 94 b1 72 	call	0xe562	; 0xe562 <mmc_ins_status>
   12684:	01 97       	sbiw	r24, 0x01	; 1
   12686:	59 f7       	brne	.-42     	; 0x1265e <gpib_error_test+0x18>
   12688:	62 c0       	rjmp	.+196    	; 0x1274e <gpib_error_test+0x108>
   1268a:	01 15       	cp	r16, r1
   1268c:	11 05       	cpc	r17, r1
   1268e:	51 f0       	breq	.+20     	; 0x126a4 <gpib_error_test+0x5e>
   12690:	80 eb       	ldi	r24, 0xB0	; 176
   12692:	94 e1       	ldi	r25, 0x14	; 20
   12694:	1f 92       	push	r1
   12696:	9f 93       	push	r25
   12698:	8f 93       	push	r24
   1269a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1269e:	0f 90       	pop	r0
   126a0:	0f 90       	pop	r0
   126a2:	0f 90       	pop	r0
   126a4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   126a8:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   126ac:	85 70       	andi	r24, 0x05	; 5
   126ae:	99 27       	eor	r25, r25
   126b0:	89 2b       	or	r24, r25
   126b2:	c1 f0       	breq	.+48     	; 0x126e4 <gpib_error_test+0x9e>
   126b4:	f6 fe       	sbrs	r15, 6
   126b6:	0a c0       	rjmp	.+20     	; 0x126cc <gpib_error_test+0x86>
   126b8:	85 ea       	ldi	r24, 0xA5	; 165
   126ba:	94 e1       	ldi	r25, 0x14	; 20
   126bc:	1f 92       	push	r1
   126be:	9f 93       	push	r25
   126c0:	8f 93       	push	r24
   126c2:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   126c6:	0f 90       	pop	r0
   126c8:	0f 90       	pop	r0
   126ca:	0f 90       	pop	r0
   126cc:	d7 ff       	sbrs	r29, 7
   126ce:	0a c0       	rjmp	.+20     	; 0x126e4 <gpib_error_test+0x9e>
   126d0:	8e e9       	ldi	r24, 0x9E	; 158
   126d2:	94 e1       	ldi	r25, 0x14	; 20
   126d4:	1f 92       	push	r1
   126d6:	9f 93       	push	r25
   126d8:	8f 93       	push	r24
   126da:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   126de:	0f 90       	pop	r0
   126e0:	0f 90       	pop	r0
   126e2:	0f 90       	pop	r0
   126e4:	80 e0       	ldi	r24, 0x00	; 0
   126e6:	0e 94 14 2c 	call	0x5828	; 0x5828 <uart_keyhit>
   126ea:	89 2b       	or	r24, r25
   126ec:	51 f0       	breq	.+20     	; 0x12702 <gpib_error_test+0xbc>
   126ee:	81 e9       	ldi	r24, 0x91	; 145
   126f0:	94 e1       	ldi	r25, 0x14	; 20
   126f2:	1f 92       	push	r1
   126f4:	9f 93       	push	r25
   126f6:	8f 93       	push	r24
   126f8:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   126fc:	0f 90       	pop	r0
   126fe:	0f 90       	pop	r0
   12700:	0f 90       	pop	r0
   12702:	0e 94 b1 72 	call	0xe562	; 0xe562 <mmc_ins_status>
   12706:	01 97       	sbiw	r24, 0x01	; 1
   12708:	51 f0       	breq	.+20     	; 0x1271e <gpib_error_test+0xd8>
   1270a:	80 e8       	ldi	r24, 0x80	; 128
   1270c:	94 e1       	ldi	r25, 0x14	; 20
   1270e:	1f 92       	push	r1
   12710:	9f 93       	push	r25
   12712:	8f 93       	push	r24
   12714:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   12718:	0f 90       	pop	r0
   1271a:	0f 90       	pop	r0
   1271c:	0f 90       	pop	r0
   1271e:	01 15       	cp	r16, r1
   12720:	11 05       	cpc	r17, r1
   12722:	09 f0       	breq	.+2      	; 0x12726 <gpib_error_test+0xe0>
   12724:	fb de       	rcall	.-522    	; 0x1251c <gpib_init_devices>
   12726:	80 e0       	ldi	r24, 0x00	; 0
   12728:	0e 94 14 2c 	call	0x5828	; 0x5828 <uart_keyhit>
   1272c:	89 2b       	or	r24, r25
   1272e:	11 f0       	breq	.+4      	; 0x12734 <gpib_error_test+0xee>
   12730:	f5 de       	rcall	.-534    	; 0x1251c <gpib_init_devices>
   12732:	0b c0       	rjmp	.+22     	; 0x1274a <gpib_error_test+0x104>
   12734:	0e 94 b1 72 	call	0xe562	; 0xe562 <mmc_ins_status>
   12738:	01 97       	sbiw	r24, 0x01	; 1
   1273a:	39 f4       	brne	.+14     	; 0x1274a <gpib_error_test+0x104>
   1273c:	01 15       	cp	r16, r1
   1273e:	11 05       	cpc	r17, r1
   12740:	31 f0       	breq	.+12     	; 0x1274e <gpib_error_test+0x108>
   12742:	54 98       	cbi	0x0a, 4	; 10
   12744:	4c 9b       	sbis	0x09, 4	; 9
   12746:	fd cf       	rjmp	.-6      	; 0x12742 <gpib_error_test+0xfc>
   12748:	02 c0       	rjmp	.+4      	; 0x1274e <gpib_error_test+0x108>
   1274a:	c1 e0       	ldi	r28, 0x01	; 1
   1274c:	d0 e0       	ldi	r29, 0x00	; 0
   1274e:	ce 01       	movw	r24, r28
   12750:	cd b7       	in	r28, 0x3d	; 61
   12752:	de b7       	in	r29, 0x3e	; 62
   12754:	e6 e0       	ldi	r30, 0x06	; 6
   12756:	0c 94 e9 e8 	jmp	0x1d1d2	; 0x1d1d2 <__epilogue_restores__+0x18>

0001275a <GPIB_COMMANDS>:
   1275a:	1f 93       	push	r17
   1275c:	cf 93       	push	r28
   1275e:	df 93       	push	r29
   12760:	ec 01       	movw	r28, r24
   12762:	16 2f       	mov	r17, r22
   12764:	80 91 9f 1e 	lds	r24, 0x1E9F	; 0x801e9f <talking>
   12768:	8f 35       	cpi	r24, 0x5F	; 95
   1276a:	91 f0       	breq	.+36     	; 0x12790 <GPIB_COMMANDS+0x36>
   1276c:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   12770:	90 e0       	ldi	r25, 0x00	; 0
   12772:	7f de       	rcall	.-770    	; 0x12472 <AMIGO_is_MLA>
   12774:	89 2b       	or	r24, r25
   12776:	c9 f4       	brne	.+50     	; 0x127aa <GPIB_COMMANDS+0x50>
   12778:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   1277c:	90 e0       	ldi	r25, 0x00	; 0
   1277e:	46 de       	rcall	.-884    	; 0x1240c <SS80_is_MLA>
   12780:	89 2b       	or	r24, r25
   12782:	11 f5       	brne	.+68     	; 0x127c8 <GPIB_COMMANDS+0x6e>
   12784:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   12788:	90 e0       	ldi	r25, 0x00	; 0
   1278a:	a6 de       	rcall	.-692    	; 0x124d8 <PRINTER_is_MLA>
   1278c:	89 2b       	or	r24, r25
   1278e:	59 f5       	brne	.+86     	; 0x127e6 <GPIB_COMMANDS+0x8c>
   12790:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   12794:	8f 33       	cpi	r24, 0x3F	; 63
   12796:	19 f4       	brne	.+6      	; 0x1279e <GPIB_COMMANDS+0x44>
   12798:	80 e0       	ldi	r24, 0x00	; 0
   1279a:	90 e0       	ldi	r25, 0x00	; 0
   1279c:	2e c0       	rjmp	.+92     	; 0x127fa <GPIB_COMMANDS+0xa0>
   1279e:	80 91 9f 1e 	lds	r24, 0x1E9F	; 0x801e9f <talking>
   127a2:	90 e0       	ldi	r25, 0x00	; 0
   127a4:	77 de       	rcall	.-786    	; 0x12494 <AMIGO_is_MTA>
   127a6:	89 2b       	or	r24, r25
   127a8:	49 f0       	breq	.+18     	; 0x127bc <GPIB_COMMANDS+0x62>
   127aa:	11 23       	and	r17, r17
   127ac:	11 f0       	breq	.+4      	; 0x127b2 <GPIB_COMMANDS+0x58>
   127ae:	ce 01       	movw	r24, r28
   127b0:	b5 d8       	rcall	.-3734   	; 0x1191c <gpib_unread>
   127b2:	80 91 a0 1e 	lds	r24, 0x1EA0	; 0x801ea0 <secondary>
   127b6:	0e 94 b6 b1 	call	0x1636c	; 0x1636c <AMIGO_COMMANDS>
   127ba:	1d c0       	rjmp	.+58     	; 0x127f6 <GPIB_COMMANDS+0x9c>
   127bc:	80 91 9f 1e 	lds	r24, 0x1E9F	; 0x801e9f <talking>
   127c0:	90 e0       	ldi	r25, 0x00	; 0
   127c2:	35 de       	rcall	.-918    	; 0x1242e <SS80_is_MTA>
   127c4:	89 2b       	or	r24, r25
   127c6:	49 f0       	breq	.+18     	; 0x127da <GPIB_COMMANDS+0x80>
   127c8:	11 23       	and	r17, r17
   127ca:	11 f0       	breq	.+4      	; 0x127d0 <GPIB_COMMANDS+0x76>
   127cc:	ce 01       	movw	r24, r28
   127ce:	a6 d8       	rcall	.-3764   	; 0x1191c <gpib_unread>
   127d0:	80 91 a0 1e 	lds	r24, 0x1EA0	; 0x801ea0 <secondary>
   127d4:	0e 94 27 a6 	call	0x14c4e	; 0x14c4e <SS80_COMMANDS>
   127d8:	0e c0       	rjmp	.+28     	; 0x127f6 <GPIB_COMMANDS+0x9c>
   127da:	80 91 9f 1e 	lds	r24, 0x1E9F	; 0x801e9f <talking>
   127de:	90 e0       	ldi	r25, 0x00	; 0
   127e0:	8c de       	rcall	.-744    	; 0x124fa <PRINTER_is_MTA>
   127e2:	89 2b       	or	r24, r25
   127e4:	c9 f2       	breq	.-78     	; 0x12798 <GPIB_COMMANDS+0x3e>
   127e6:	11 23       	and	r17, r17
   127e8:	11 f0       	breq	.+4      	; 0x127ee <GPIB_COMMANDS+0x94>
   127ea:	ce 01       	movw	r24, r28
   127ec:	97 d8       	rcall	.-3794   	; 0x1191c <gpib_unread>
   127ee:	80 91 a0 1e 	lds	r24, 0x1EA0	; 0x801ea0 <secondary>
   127f2:	0e 94 16 b4 	call	0x1682c	; 0x1682c <PRINTER_COMMANDS>
   127f6:	10 92 a0 1e 	sts	0x1EA0, r1	; 0x801ea0 <secondary>
   127fa:	df 91       	pop	r29
   127fc:	cf 91       	pop	r28
   127fe:	1f 91       	pop	r17
   12800:	08 95       	ret

00012802 <Send_Identify>:
   12802:	a4 e0       	ldi	r26, 0x04	; 4
   12804:	b0 e0       	ldi	r27, 0x00	; 0
   12806:	e7 e0       	ldi	r30, 0x07	; 7
   12808:	f4 e9       	ldi	r31, 0x94	; 148
   1280a:	0c 94 cc e8 	jmp	0x1d198	; 0x1d198 <__prologue_saves__+0x16>
   1280e:	d8 2e       	mov	r13, r24
   12810:	7b 01       	movw	r14, r22
   12812:	80 e0       	ldi	r24, 0x00	; 0
   12814:	91 e0       	ldi	r25, 0x01	; 1
   12816:	9c 83       	std	Y+4, r25	; 0x04
   12818:	8b 83       	std	Y+3, r24	; 0x03
   1281a:	8b 01       	movw	r16, r22
   1281c:	20 e0       	ldi	r18, 0x00	; 0
   1281e:	30 e0       	ldi	r19, 0x00	; 0
   12820:	42 e0       	ldi	r20, 0x02	; 2
   12822:	50 e0       	ldi	r21, 0x00	; 0
   12824:	60 e0       	ldi	r22, 0x00	; 0
   12826:	70 e0       	ldi	r23, 0x00	; 0
   12828:	ce 01       	movw	r24, r28
   1282a:	01 96       	adiw	r24, 0x01	; 1
   1282c:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   12830:	ae 01       	movw	r20, r28
   12832:	4d 5f       	subi	r20, 0xFD	; 253
   12834:	5f 4f       	sbci	r21, 0xFF	; 255
   12836:	62 e0       	ldi	r22, 0x02	; 2
   12838:	70 e0       	ldi	r23, 0x00	; 0
   1283a:	ce 01       	movw	r24, r28
   1283c:	01 96       	adiw	r24, 0x01	; 1
   1283e:	3e dd       	rcall	.-1412   	; 0x122bc <gpib_write_str>
   12840:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   12844:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   12848:	02 97       	sbiw	r24, 0x02	; 2
   1284a:	59 f0       	breq	.+22     	; 0x12862 <Send_Identify+0x60>
   1284c:	25 70       	andi	r18, 0x05	; 5
   1284e:	33 27       	eor	r19, r19
   12850:	23 2b       	or	r18, r19
   12852:	c9 f0       	breq	.+50     	; 0x12886 <Send_Identify+0x84>
   12854:	ff 92       	push	r15
   12856:	ef 92       	push	r14
   12858:	1f 92       	push	r1
   1285a:	df 92       	push	r13
   1285c:	8f e5       	ldi	r24, 0x5F	; 95
   1285e:	94 e1       	ldi	r25, 0x14	; 20
   12860:	08 c0       	rjmp	.+16     	; 0x12872 <Send_Identify+0x70>
   12862:	22 ff       	sbrs	r18, 2
   12864:	10 c0       	rjmp	.+32     	; 0x12886 <Send_Identify+0x84>
   12866:	ff 92       	push	r15
   12868:	ef 92       	push	r14
   1286a:	1f 92       	push	r1
   1286c:	df 92       	push	r13
   1286e:	85 e4       	ldi	r24, 0x45	; 69
   12870:	94 e1       	ldi	r25, 0x14	; 20
   12872:	1f 92       	push	r1
   12874:	9f 93       	push	r25
   12876:	8f 93       	push	r24
   12878:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1287c:	0f b6       	in	r0, 0x3f	; 63
   1287e:	f8 94       	cli
   12880:	de bf       	out	0x3e, r29	; 62
   12882:	0f be       	out	0x3f, r0	; 63
   12884:	cd bf       	out	0x3d, r28	; 61
   12886:	8b 81       	ldd	r24, Y+3	; 0x03
   12888:	9c 81       	ldd	r25, Y+4	; 0x04
   1288a:	88 27       	eor	r24, r24
   1288c:	90 7d       	andi	r25, 0xD0	; 208
   1288e:	24 96       	adiw	r28, 0x04	; 4
   12890:	e7 e0       	ldi	r30, 0x07	; 7
   12892:	0c 94 e8 e8 	jmp	0x1d1d0	; 0x1d1d0 <__epilogue_restores__+0x16>

00012896 <GPIB>:
   12896:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   1289a:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1289e:	85 30       	cpi	r24, 0x05	; 5
   128a0:	89 f4       	brne	.+34     	; 0x128c4 <GPIB+0x2e>
   128a2:	24 71       	andi	r18, 0x14	; 20
   128a4:	33 27       	eor	r19, r19
   128a6:	23 2b       	or	r18, r19
   128a8:	51 f0       	breq	.+20     	; 0x128be <GPIB+0x28>
   128aa:	82 e3       	ldi	r24, 0x32	; 50
   128ac:	94 e1       	ldi	r25, 0x14	; 20
   128ae:	1f 92       	push	r1
   128b0:	9f 93       	push	r25
   128b2:	8f 93       	push	r24
   128b4:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   128b8:	0f 90       	pop	r0
   128ba:	0f 90       	pop	r0
   128bc:	0f 90       	pop	r0
   128be:	10 92 9c 1e 	sts	0x1E9C, r1	; 0x801e9c <spoll>
   128c2:	9d c0       	rjmp	.+314    	; 0x129fe <GPIB+0x168>
   128c4:	85 31       	cpi	r24, 0x15	; 21
   128c6:	39 f4       	brne	.+14     	; 0x128d6 <GPIB+0x40>
   128c8:	24 71       	andi	r18, 0x14	; 20
   128ca:	33 27       	eor	r19, r19
   128cc:	23 2b       	or	r18, r19
   128ce:	b9 f3       	breq	.-18     	; 0x128be <GPIB+0x28>
   128d0:	8f e1       	ldi	r24, 0x1F	; 31
   128d2:	94 e1       	ldi	r25, 0x14	; 20
   128d4:	ec cf       	rjmp	.-40     	; 0x128ae <GPIB+0x18>
   128d6:	88 31       	cpi	r24, 0x18	; 24
   128d8:	c9 f4       	brne	.+50     	; 0x1290c <GPIB+0x76>
   128da:	22 ff       	sbrs	r18, 2
   128dc:	0a c0       	rjmp	.+20     	; 0x128f2 <GPIB+0x5c>
   128de:	88 e1       	ldi	r24, 0x18	; 24
   128e0:	94 e1       	ldi	r25, 0x14	; 20
   128e2:	1f 92       	push	r1
   128e4:	9f 93       	push	r25
   128e6:	8f 93       	push	r24
   128e8:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   128ec:	0f 90       	pop	r0
   128ee:	0f 90       	pop	r0
   128f0:	0f 90       	pop	r0
   128f2:	81 e0       	ldi	r24, 0x01	; 1
   128f4:	80 93 9c 1e 	sts	0x1E9C, r24	; 0x801e9c <spoll>
   128f8:	80 91 9f 1e 	lds	r24, 0x1E9F	; 0x801e9f <talking>
   128fc:	90 e0       	ldi	r25, 0x00	; 0
   128fe:	97 dd       	rcall	.-1234   	; 0x1242e <SS80_is_MTA>
   12900:	89 2b       	or	r24, r25
   12902:	09 f4       	brne	.+2      	; 0x12906 <GPIB+0x70>
   12904:	7c c0       	rjmp	.+248    	; 0x129fe <GPIB+0x168>
   12906:	0c 94 dc a1 	jmp	0x143b8	; 0x143b8 <SS80_Report>
   1290a:	08 95       	ret
   1290c:	89 31       	cpi	r24, 0x19	; 25
   1290e:	29 f4       	brne	.+10     	; 0x1291a <GPIB+0x84>
   12910:	22 ff       	sbrs	r18, 2
   12912:	d5 cf       	rjmp	.-86     	; 0x128be <GPIB+0x28>
   12914:	81 e1       	ldi	r24, 0x11	; 17
   12916:	94 e1       	ldi	r25, 0x14	; 20
   12918:	ca cf       	rjmp	.-108    	; 0x128ae <GPIB+0x18>
   1291a:	84 30       	cpi	r24, 0x04	; 4
   1291c:	09 f0       	breq	.+2      	; 0x12920 <GPIB+0x8a>
   1291e:	48 c0       	rjmp	.+144    	; 0x129b0 <GPIB+0x11a>
   12920:	22 ff       	sbrs	r18, 2
   12922:	0a c0       	rjmp	.+20     	; 0x12938 <GPIB+0xa2>
   12924:	8a e0       	ldi	r24, 0x0A	; 10
   12926:	94 e1       	ldi	r25, 0x14	; 20
   12928:	1f 92       	push	r1
   1292a:	9f 93       	push	r25
   1292c:	8f 93       	push	r24
   1292e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   12932:	0f 90       	pop	r0
   12934:	0f 90       	pop	r0
   12936:	0f 90       	pop	r0
   12938:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   1293c:	90 e0       	ldi	r25, 0x00	; 0
   1293e:	66 dd       	rcall	.-1332   	; 0x1240c <SS80_is_MLA>
   12940:	89 2b       	or	r24, r25
   12942:	d9 f0       	breq	.+54     	; 0x1297a <GPIB+0xe4>
   12944:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12948:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1294c:	84 72       	andi	r24, 0x24	; 36
   1294e:	99 27       	eor	r25, r25
   12950:	89 2b       	or	r24, r25
   12952:	51 f0       	breq	.+20     	; 0x12968 <GPIB+0xd2>
   12954:	8e ef       	ldi	r24, 0xFE	; 254
   12956:	93 e1       	ldi	r25, 0x13	; 19
   12958:	1f 92       	push	r1
   1295a:	9f 93       	push	r25
   1295c:	8f 93       	push	r24
   1295e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   12962:	0f 90       	pop	r0
   12964:	0f 90       	pop	r0
   12966:	0f 90       	pop	r0
   12968:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   1296c:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   12970:	85 81       	ldd	r24, Z+5	; 0x05
   12972:	90 e0       	ldi	r25, 0x00	; 0
   12974:	0c 94 a9 a2 	jmp	0x14552	; 0x14552 <SS80_Selected_Device_Clear>
   12978:	08 95       	ret
   1297a:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   1297e:	90 e0       	ldi	r25, 0x00	; 0
   12980:	78 dd       	rcall	.-1296   	; 0x12472 <AMIGO_is_MLA>
   12982:	89 2b       	or	r24, r25
   12984:	e1 f1       	breq	.+120    	; 0x129fe <GPIB+0x168>
   12986:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1298a:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1298e:	84 72       	andi	r24, 0x24	; 36
   12990:	99 27       	eor	r25, r25
   12992:	89 2b       	or	r24, r25
   12994:	51 f0       	breq	.+20     	; 0x129aa <GPIB+0x114>
   12996:	81 ef       	ldi	r24, 0xF1	; 241
   12998:	93 e1       	ldi	r25, 0x13	; 19
   1299a:	1f 92       	push	r1
   1299c:	9f 93       	push	r25
   1299e:	8f 93       	push	r24
   129a0:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   129a4:	0f 90       	pop	r0
   129a6:	0f 90       	pop	r0
   129a8:	0f 90       	pop	r0
   129aa:	0c 94 89 ac 	jmp	0x15912	; 0x15912 <amigo_cmd_clear>
   129ae:	08 95       	ret
   129b0:	84 31       	cpi	r24, 0x14	; 20
   129b2:	99 f4       	brne	.+38     	; 0x129da <GPIB+0x144>
   129b4:	22 ff       	sbrs	r18, 2
   129b6:	0a c0       	rjmp	.+20     	; 0x129cc <GPIB+0x136>
   129b8:	8a ee       	ldi	r24, 0xEA	; 234
   129ba:	93 e1       	ldi	r25, 0x13	; 19
   129bc:	1f 92       	push	r1
   129be:	9f 93       	push	r25
   129c0:	8f 93       	push	r24
   129c2:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   129c6:	0f 90       	pop	r0
   129c8:	0f 90       	pop	r0
   129ca:	0f 90       	pop	r0
   129cc:	0e 94 9b a2 	call	0x14536	; 0x14536 <SS80_Universal_Device_Clear>
   129d0:	0e 94 89 ac 	call	0x15912	; 0x15912 <amigo_cmd_clear>
   129d4:	0e 94 b5 b2 	call	0x1656a	; 0x1656a <printer_close>
   129d8:	12 c0       	rjmp	.+36     	; 0x129fe <GPIB+0x168>
   129da:	25 71       	andi	r18, 0x15	; 21
   129dc:	33 27       	eor	r19, r19
   129de:	23 2b       	or	r18, r19
   129e0:	71 f0       	breq	.+28     	; 0x129fe <GPIB+0x168>
   129e2:	1f 92       	push	r1
   129e4:	8f 93       	push	r24
   129e6:	8e ec       	ldi	r24, 0xCE	; 206
   129e8:	93 e1       	ldi	r25, 0x13	; 19
   129ea:	1f 92       	push	r1
   129ec:	9f 93       	push	r25
   129ee:	8f 93       	push	r24
   129f0:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   129f4:	0f 90       	pop	r0
   129f6:	0f 90       	pop	r0
   129f8:	0f 90       	pop	r0
   129fa:	0f 90       	pop	r0
   129fc:	0f 90       	pop	r0
   129fe:	80 e0       	ldi	r24, 0x00	; 0
   12a00:	90 e0       	ldi	r25, 0x00	; 0
   12a02:	08 95       	ret

00012a04 <GPIB_TALK>:
   12a04:	0f 93       	push	r16
   12a06:	1f 93       	push	r17
   12a08:	cf 93       	push	r28
   12a0a:	c8 2f       	mov	r28, r24
   12a0c:	80 91 9f 1e 	lds	r24, 0x1E9F	; 0x801e9f <talking>
   12a10:	80 93 a2 1e 	sts	0x1EA2, r24	; 0x801ea2 <talking_last>
   12a14:	c0 93 9f 1e 	sts	0x1E9F, r28	; 0x801e9f <talking>
   12a18:	cf 35       	cpi	r28, 0x5F	; 95
   12a1a:	79 f4       	brne	.+30     	; 0x12a3a <GPIB_TALK+0x36>
   12a1c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12a20:	82 ff       	sbrs	r24, 2
   12a22:	7f c0       	rjmp	.+254    	; 0x12b22 <GPIB_TALK+0x11e>
   12a24:	8b e7       	ldi	r24, 0x7B	; 123
   12a26:	93 e1       	ldi	r25, 0x13	; 19
   12a28:	1f 92       	push	r1
   12a2a:	9f 93       	push	r25
   12a2c:	8f 93       	push	r24
   12a2e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   12a32:	0f 90       	pop	r0
   12a34:	0f 90       	pop	r0
   12a36:	0f 90       	pop	r0
   12a38:	74 c0       	rjmp	.+232    	; 0x12b22 <GPIB_TALK+0x11e>
   12a3a:	0c 2f       	mov	r16, r28
   12a3c:	10 e0       	ldi	r17, 0x00	; 0
   12a3e:	c8 01       	movw	r24, r16
   12a40:	f6 dc       	rcall	.-1556   	; 0x1242e <SS80_is_MTA>
   12a42:	89 2b       	or	r24, r25
   12a44:	f1 f0       	breq	.+60     	; 0x12a82 <GPIB_TALK+0x7e>
   12a46:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12a4a:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   12a4e:	84 72       	andi	r24, 0x24	; 36
   12a50:	99 27       	eor	r25, r25
   12a52:	89 2b       	or	r24, r25
   12a54:	71 f0       	breq	.+28     	; 0x12a72 <GPIB_TALK+0x6e>
   12a56:	1f 92       	push	r1
   12a58:	cf 93       	push	r28
   12a5a:	8a e6       	ldi	r24, 0x6A	; 106
   12a5c:	93 e1       	ldi	r25, 0x13	; 19
   12a5e:	1f 92       	push	r1
   12a60:	9f 93       	push	r25
   12a62:	8f 93       	push	r24
   12a64:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   12a68:	0f 90       	pop	r0
   12a6a:	0f 90       	pop	r0
   12a6c:	0f 90       	pop	r0
   12a6e:	0f 90       	pop	r0
   12a70:	0f 90       	pop	r0
   12a72:	80 91 9c 1e 	lds	r24, 0x1E9C	; 0x801e9c <spoll>
   12a76:	88 23       	and	r24, r24
   12a78:	09 f4       	brne	.+2      	; 0x12a7c <GPIB_TALK+0x78>
   12a7a:	53 c0       	rjmp	.+166    	; 0x12b22 <GPIB_TALK+0x11e>
   12a7c:	0e 94 dc a1 	call	0x143b8	; 0x143b8 <SS80_Report>
   12a80:	50 c0       	rjmp	.+160    	; 0x12b22 <GPIB_TALK+0x11e>
   12a82:	c8 01       	movw	r24, r16
   12a84:	07 dd       	rcall	.-1522   	; 0x12494 <AMIGO_is_MTA>
   12a86:	89 2b       	or	r24, r25
   12a88:	71 f0       	breq	.+28     	; 0x12aa6 <GPIB_TALK+0xa2>
   12a8a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12a8e:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   12a92:	84 72       	andi	r24, 0x24	; 36
   12a94:	99 27       	eor	r25, r25
   12a96:	89 2b       	or	r24, r25
   12a98:	09 f4       	brne	.+2      	; 0x12a9c <GPIB_TALK+0x98>
   12a9a:	43 c0       	rjmp	.+134    	; 0x12b22 <GPIB_TALK+0x11e>
   12a9c:	1f 92       	push	r1
   12a9e:	cf 93       	push	r28
   12aa0:	88 e5       	ldi	r24, 0x58	; 88
   12aa2:	93 e1       	ldi	r25, 0x13	; 19
   12aa4:	34 c0       	rjmp	.+104    	; 0x12b0e <GPIB_TALK+0x10a>
   12aa6:	c8 01       	movw	r24, r16
   12aa8:	28 dd       	rcall	.-1456   	; 0x124fa <PRINTER_is_MTA>
   12aaa:	89 2b       	or	r24, r25
   12aac:	69 f0       	breq	.+26     	; 0x12ac8 <GPIB_TALK+0xc4>
   12aae:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12ab2:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   12ab6:	84 72       	andi	r24, 0x24	; 36
   12ab8:	99 27       	eor	r25, r25
   12aba:	89 2b       	or	r24, r25
   12abc:	91 f1       	breq	.+100    	; 0x12b22 <GPIB_TALK+0x11e>
   12abe:	1f 92       	push	r1
   12ac0:	cf 93       	push	r28
   12ac2:	84 e4       	ldi	r24, 0x44	; 68
   12ac4:	93 e1       	ldi	r25, 0x13	; 19
   12ac6:	23 c0       	rjmp	.+70     	; 0x12b0e <GPIB_TALK+0x10a>
   12ac8:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   12acc:	90 e0       	ldi	r25, 0x00	; 0
   12ace:	04 dd       	rcall	.-1528   	; 0x124d8 <PRINTER_is_MLA>
   12ad0:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   12ad4:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   12ad8:	89 2b       	or	r24, r25
   12ada:	99 f0       	breq	.+38     	; 0x12b02 <GPIB_TALK+0xfe>
   12adc:	24 72       	andi	r18, 0x24	; 36
   12ade:	33 27       	eor	r19, r19
   12ae0:	23 2b       	or	r18, r19
   12ae2:	51 f0       	breq	.+20     	; 0x12af8 <GPIB_TALK+0xf4>
   12ae4:	84 e3       	ldi	r24, 0x34	; 52
   12ae6:	93 e1       	ldi	r25, 0x13	; 19
   12ae8:	1f 92       	push	r1
   12aea:	9f 93       	push	r25
   12aec:	8f 93       	push	r24
   12aee:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   12af2:	0f 90       	pop	r0
   12af4:	0f 90       	pop	r0
   12af6:	0f 90       	pop	r0
   12af8:	80 e0       	ldi	r24, 0x00	; 0
   12afa:	90 e0       	ldi	r25, 0x00	; 0
   12afc:	0e 94 02 b3 	call	0x16604	; 0x16604 <printer_open>
   12b00:	10 c0       	rjmp	.+32     	; 0x12b22 <GPIB_TALK+0x11e>
   12b02:	22 ff       	sbrs	r18, 2
   12b04:	0e c0       	rjmp	.+28     	; 0x12b22 <GPIB_TALK+0x11e>
   12b06:	1f 92       	push	r1
   12b08:	cf 93       	push	r28
   12b0a:	88 e2       	ldi	r24, 0x28	; 40
   12b0c:	93 e1       	ldi	r25, 0x13	; 19
   12b0e:	1f 92       	push	r1
   12b10:	9f 93       	push	r25
   12b12:	8f 93       	push	r24
   12b14:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   12b18:	0f 90       	pop	r0
   12b1a:	0f 90       	pop	r0
   12b1c:	0f 90       	pop	r0
   12b1e:	0f 90       	pop	r0
   12b20:	0f 90       	pop	r0
   12b22:	80 e0       	ldi	r24, 0x00	; 0
   12b24:	90 e0       	ldi	r25, 0x00	; 0
   12b26:	cf 91       	pop	r28
   12b28:	1f 91       	pop	r17
   12b2a:	0f 91       	pop	r16
   12b2c:	08 95       	ret

00012b2e <GPIB_SECONDARY_ADDRESS>:
   12b2e:	0f 93       	push	r16
   12b30:	1f 93       	push	r17
   12b32:	cf 93       	push	r28
   12b34:	c8 2f       	mov	r28, r24
   12b36:	08 2f       	mov	r16, r24
   12b38:	10 e0       	ldi	r17, 0x00	; 0
   12b3a:	c8 01       	movw	r24, r16
   12b3c:	89 dc       	rcall	.-1774   	; 0x12450 <SS80_is_MSA>
   12b3e:	89 2b       	or	r24, r25
   12b40:	19 f1       	breq	.+70     	; 0x12b88 <GPIB_SECONDARY_ADDRESS+0x5a>
   12b42:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12b46:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   12b4a:	84 72       	andi	r24, 0x24	; 36
   12b4c:	99 27       	eor	r25, r25
   12b4e:	89 2b       	or	r24, r25
   12b50:	71 f0       	breq	.+28     	; 0x12b6e <GPIB_SECONDARY_ADDRESS+0x40>
   12b52:	1f 92       	push	r1
   12b54:	cf 93       	push	r28
   12b56:	87 e1       	ldi	r24, 0x17	; 23
   12b58:	93 e1       	ldi	r25, 0x13	; 19
   12b5a:	1f 92       	push	r1
   12b5c:	9f 93       	push	r25
   12b5e:	8f 93       	push	r24
   12b60:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   12b64:	0f 90       	pop	r0
   12b66:	0f 90       	pop	r0
   12b68:	0f 90       	pop	r0
   12b6a:	0f 90       	pop	r0
   12b6c:	0f 90       	pop	r0
   12b6e:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   12b72:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   12b76:	81 81       	ldd	r24, Z+1	; 0x01
   12b78:	90 e0       	ldi	r25, 0x00	; 0
   12b7a:	0e 94 3f 8c 	call	0x1187e	; 0x1187e <gpib_disable_PPR>
   12b7e:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   12b82:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   12b86:	27 c0       	rjmp	.+78     	; 0x12bd6 <GPIB_SECONDARY_ADDRESS+0xa8>
   12b88:	c8 01       	movw	r24, r16
   12b8a:	95 dc       	rcall	.-1750   	; 0x124b6 <AMIGO_is_MSA>
   12b8c:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   12b90:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   12b94:	89 2b       	or	r24, r25
   12b96:	21 f1       	breq	.+72     	; 0x12be0 <GPIB_SECONDARY_ADDRESS+0xb2>
   12b98:	c9 01       	movw	r24, r18
   12b9a:	84 72       	andi	r24, 0x24	; 36
   12b9c:	99 27       	eor	r25, r25
   12b9e:	89 2b       	or	r24, r25
   12ba0:	71 f0       	breq	.+28     	; 0x12bbe <GPIB_SECONDARY_ADDRESS+0x90>
   12ba2:	1f 92       	push	r1
   12ba4:	cf 93       	push	r28
   12ba6:	85 e0       	ldi	r24, 0x05	; 5
   12ba8:	93 e1       	ldi	r25, 0x13	; 19
   12baa:	1f 92       	push	r1
   12bac:	9f 93       	push	r25
   12bae:	8f 93       	push	r24
   12bb0:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   12bb4:	0f 90       	pop	r0
   12bb6:	0f 90       	pop	r0
   12bb8:	0f 90       	pop	r0
   12bba:	0f 90       	pop	r0
   12bbc:	0f 90       	pop	r0
   12bbe:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   12bc2:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   12bc6:	81 81       	ldd	r24, Z+1	; 0x01
   12bc8:	90 e0       	ldi	r25, 0x00	; 0
   12bca:	0e 94 3f 8c 	call	0x1187e	; 0x1187e <gpib_disable_PPR>
   12bce:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   12bd2:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   12bd6:	63 a1       	ldd	r22, Z+35	; 0x23
   12bd8:	74 a1       	ldd	r23, Z+36	; 0x24
   12bda:	8c 2f       	mov	r24, r28
   12bdc:	12 de       	rcall	.-988    	; 0x12802 <Send_Identify>
   12bde:	20 c0       	rjmp	.+64     	; 0x12c20 <GPIB_SECONDARY_ADDRESS+0xf2>
   12be0:	c9 01       	movw	r24, r18
   12be2:	84 72       	andi	r24, 0x24	; 36
   12be4:	99 27       	eor	r25, r25
   12be6:	00 97       	sbiw	r24, 0x00	; 0
   12be8:	d9 f0       	breq	.+54     	; 0x12c20 <GPIB_SECONDARY_ADDRESS+0xf2>
   12bea:	80 91 9f 1e 	lds	r24, 0x1E9F	; 0x801e9f <talking>
   12bee:	1f 92       	push	r1
   12bf0:	8f 93       	push	r24
   12bf2:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   12bf6:	1f 92       	push	r1
   12bf8:	8f 93       	push	r24
   12bfa:	1f 92       	push	r1
   12bfc:	cf 93       	push	r28
   12bfe:	8f ed       	ldi	r24, 0xDF	; 223
   12c00:	92 e1       	ldi	r25, 0x12	; 18
   12c02:	1f 92       	push	r1
   12c04:	9f 93       	push	r25
   12c06:	8f 93       	push	r24
   12c08:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   12c0c:	8d b7       	in	r24, 0x3d	; 61
   12c0e:	9e b7       	in	r25, 0x3e	; 62
   12c10:	09 96       	adiw	r24, 0x09	; 9
   12c12:	0f b6       	in	r0, 0x3f	; 63
   12c14:	f8 94       	cli
   12c16:	9e bf       	out	0x3e, r25	; 62
   12c18:	0f be       	out	0x3f, r0	; 63
   12c1a:	8d bf       	out	0x3d, r24	; 61
   12c1c:	80 e0       	ldi	r24, 0x00	; 0
   12c1e:	90 e0       	ldi	r25, 0x00	; 0
   12c20:	cf 91       	pop	r28
   12c22:	1f 91       	pop	r17
   12c24:	0f 91       	pop	r16
   12c26:	08 95       	ret

00012c28 <listen_cleanup>:
   12c28:	60 91 9b 1e 	lds	r22, 0x1E9B	; 0x801e9b <listening_last>
   12c2c:	66 23       	and	r22, r22
   12c2e:	e9 f0       	breq	.+58     	; 0x12c6a <listen_cleanup+0x42>
   12c30:	70 e0       	ldi	r23, 0x00	; 0
   12c32:	40 e2       	ldi	r20, 0x20	; 32
   12c34:	50 e0       	ldi	r21, 0x00	; 0
   12c36:	83 e0       	ldi	r24, 0x03	; 3
   12c38:	90 e0       	ldi	r25, 0x00	; 0
   12c3a:	0e 94 72 b5 	call	0x16ae4	; 0x16ae4 <find_device>
   12c3e:	01 96       	adiw	r24, 0x01	; 1
   12c40:	a1 f0       	breq	.+40     	; 0x12c6a <listen_cleanup+0x42>
   12c42:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12c46:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   12c4a:	84 72       	andi	r24, 0x24	; 36
   12c4c:	99 27       	eor	r25, r25
   12c4e:	89 2b       	or	r24, r25
   12c50:	51 f0       	breq	.+20     	; 0x12c66 <listen_cleanup+0x3e>
   12c52:	8e ec       	ldi	r24, 0xCE	; 206
   12c54:	92 e1       	ldi	r25, 0x12	; 18
   12c56:	1f 92       	push	r1
   12c58:	9f 93       	push	r25
   12c5a:	8f 93       	push	r24
   12c5c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   12c60:	0f 90       	pop	r0
   12c62:	0f 90       	pop	r0
   12c64:	0f 90       	pop	r0
   12c66:	0c 94 b5 b2 	jmp	0x1656a	; 0x1656a <printer_close>
   12c6a:	08 95       	ret

00012c6c <GPIB_LISTEN>:
   12c6c:	0f 93       	push	r16
   12c6e:	1f 93       	push	r17
   12c70:	cf 93       	push	r28
   12c72:	c8 2f       	mov	r28, r24
   12c74:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   12c78:	80 93 9b 1e 	sts	0x1E9B, r24	; 0x801e9b <listening_last>
   12c7c:	c0 93 a1 1e 	sts	0x1EA1, r28	; 0x801ea1 <listening>
   12c80:	d3 df       	rcall	.-90     	; 0x12c28 <listen_cleanup>
   12c82:	cf 33       	cpi	r28, 0x3F	; 63
   12c84:	19 f5       	brne	.+70     	; 0x12ccc <GPIB_LISTEN+0x60>
   12c86:	10 92 a1 1e 	sts	0x1EA1, r1	; 0x801ea1 <listening>
   12c8a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12c8e:	82 ff       	sbrs	r24, 2
   12c90:	75 c0       	rjmp	.+234    	; 0x12d7c <GPIB_LISTEN+0x110>
   12c92:	87 ec       	ldi	r24, 0xC7	; 199
   12c94:	93 e1       	ldi	r25, 0x13	; 19
   12c96:	1f 92       	push	r1
   12c98:	9f 93       	push	r25
   12c9a:	8f 93       	push	r24
   12c9c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   12ca0:	0f 90       	pop	r0
   12ca2:	0f 90       	pop	r0
   12ca4:	0f 90       	pop	r0
   12ca6:	80 91 99 1c 	lds	r24, 0x1C99	; 0x801c99 <lastcmd>
   12caa:	90 91 9a 1c 	lds	r25, 0x1C9A	; 0x801c9a <lastcmd+0x1>
   12cae:	8f 35       	cpi	r24, 0x5F	; 95
   12cb0:	91 05       	cpc	r25, r1
   12cb2:	09 f0       	breq	.+2      	; 0x12cb6 <GPIB_LISTEN+0x4a>
   12cb4:	63 c0       	rjmp	.+198    	; 0x12d7c <GPIB_LISTEN+0x110>
   12cb6:	85 ec       	ldi	r24, 0xC5	; 197
   12cb8:	93 e1       	ldi	r25, 0x13	; 19
   12cba:	1f 92       	push	r1
   12cbc:	9f 93       	push	r25
   12cbe:	8f 93       	push	r24
   12cc0:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   12cc4:	0f 90       	pop	r0
   12cc6:	0f 90       	pop	r0
   12cc8:	0f 90       	pop	r0
   12cca:	58 c0       	rjmp	.+176    	; 0x12d7c <GPIB_LISTEN+0x110>
   12ccc:	0c 2f       	mov	r16, r28
   12cce:	10 e0       	ldi	r17, 0x00	; 0
   12cd0:	c8 01       	movw	r24, r16
   12cd2:	cf db       	rcall	.-2146   	; 0x12472 <AMIGO_is_MLA>
   12cd4:	89 2b       	or	r24, r25
   12cd6:	71 f0       	breq	.+28     	; 0x12cf4 <GPIB_LISTEN+0x88>
   12cd8:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12cdc:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   12ce0:	84 72       	andi	r24, 0x24	; 36
   12ce2:	99 27       	eor	r25, r25
   12ce4:	89 2b       	or	r24, r25
   12ce6:	09 f4       	brne	.+2      	; 0x12cea <GPIB_LISTEN+0x7e>
   12ce8:	49 c0       	rjmp	.+146    	; 0x12d7c <GPIB_LISTEN+0x110>
   12cea:	1f 92       	push	r1
   12cec:	cf 93       	push	r28
   12cee:	83 eb       	ldi	r24, 0xB3	; 179
   12cf0:	93 e1       	ldi	r25, 0x13	; 19
   12cf2:	3a c0       	rjmp	.+116    	; 0x12d68 <GPIB_LISTEN+0xfc>
   12cf4:	c8 01       	movw	r24, r16
   12cf6:	8a db       	rcall	.-2284   	; 0x1240c <SS80_is_MLA>
   12cf8:	89 2b       	or	r24, r25
   12cfa:	69 f0       	breq	.+26     	; 0x12d16 <GPIB_LISTEN+0xaa>
   12cfc:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12d00:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   12d04:	84 72       	andi	r24, 0x24	; 36
   12d06:	99 27       	eor	r25, r25
   12d08:	89 2b       	or	r24, r25
   12d0a:	c1 f1       	breq	.+112    	; 0x12d7c <GPIB_LISTEN+0x110>
   12d0c:	1f 92       	push	r1
   12d0e:	cf 93       	push	r28
   12d10:	82 ea       	ldi	r24, 0xA2	; 162
   12d12:	93 e1       	ldi	r25, 0x13	; 19
   12d14:	29 c0       	rjmp	.+82     	; 0x12d68 <GPIB_LISTEN+0xfc>
   12d16:	c8 01       	movw	r24, r16
   12d18:	df db       	rcall	.-2114   	; 0x124d8 <PRINTER_is_MLA>
   12d1a:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   12d1e:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   12d22:	89 2b       	or	r24, r25
   12d24:	d9 f0       	breq	.+54     	; 0x12d5c <GPIB_LISTEN+0xf0>
   12d26:	24 72       	andi	r18, 0x24	; 36
   12d28:	33 27       	eor	r19, r19
   12d2a:	23 2b       	or	r18, r19
   12d2c:	71 f0       	breq	.+28     	; 0x12d4a <GPIB_LISTEN+0xde>
   12d2e:	1f 92       	push	r1
   12d30:	cf 93       	push	r28
   12d32:	8e e8       	ldi	r24, 0x8E	; 142
   12d34:	93 e1       	ldi	r25, 0x13	; 19
   12d36:	1f 92       	push	r1
   12d38:	9f 93       	push	r25
   12d3a:	8f 93       	push	r24
   12d3c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   12d40:	0f 90       	pop	r0
   12d42:	0f 90       	pop	r0
   12d44:	0f 90       	pop	r0
   12d46:	0f 90       	pop	r0
   12d48:	0f 90       	pop	r0
   12d4a:	80 91 9f 1e 	lds	r24, 0x1E9F	; 0x801e9f <talking>
   12d4e:	8f 35       	cpi	r24, 0x5F	; 95
   12d50:	a9 f0       	breq	.+42     	; 0x12d7c <GPIB_LISTEN+0x110>
   12d52:	80 e0       	ldi	r24, 0x00	; 0
   12d54:	90 e0       	ldi	r25, 0x00	; 0
   12d56:	0e 94 02 b3 	call	0x16604	; 0x16604 <printer_open>
   12d5a:	10 c0       	rjmp	.+32     	; 0x12d7c <GPIB_LISTEN+0x110>
   12d5c:	22 ff       	sbrs	r18, 2
   12d5e:	0e c0       	rjmp	.+28     	; 0x12d7c <GPIB_LISTEN+0x110>
   12d60:	1f 92       	push	r1
   12d62:	cf 93       	push	r28
   12d64:	82 e8       	ldi	r24, 0x82	; 130
   12d66:	93 e1       	ldi	r25, 0x13	; 19
   12d68:	1f 92       	push	r1
   12d6a:	9f 93       	push	r25
   12d6c:	8f 93       	push	r24
   12d6e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   12d72:	0f 90       	pop	r0
   12d74:	0f 90       	pop	r0
   12d76:	0f 90       	pop	r0
   12d78:	0f 90       	pop	r0
   12d7a:	0f 90       	pop	r0
   12d7c:	80 e0       	ldi	r24, 0x00	; 0
   12d7e:	90 e0       	ldi	r25, 0x00	; 0
   12d80:	cf 91       	pop	r28
   12d82:	1f 91       	pop	r17
   12d84:	0f 91       	pop	r16
   12d86:	08 95       	ret

00012d88 <gpib_task>:
   12d88:	cf 93       	push	r28
   12d8a:	df 93       	push	r29
   12d8c:	0e 94 e6 8b 	call	0x117cc	; 0x117cc <gpib_state_init>
   12d90:	c5 db       	rcall	.-2166   	; 0x1251c <gpib_init_devices>
   12d92:	10 92 17 19 	sts	0x1917, r1	; 0x801917 <gpib_log_fp+0x1>
   12d96:	10 92 16 19 	sts	0x1916, r1	; 0x801916 <gpib_log_fp>
   12d9a:	80 e0       	ldi	r24, 0x00	; 0
   12d9c:	90 e0       	ldi	r25, 0x00	; 0
   12d9e:	06 d9       	rcall	.-3572   	; 0x11fac <gpib_read_byte>
   12da0:	ec 01       	movw	r28, r24
   12da2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   12da6:	83 ff       	sbrs	r24, 3
   12da8:	02 c0       	rjmp	.+4      	; 0x12dae <gpib_task+0x26>
   12daa:	ce 01       	movw	r24, r28
   12dac:	d5 d9       	rcall	.-3158   	; 0x12158 <gpib_decode>
   12dae:	ce 01       	movw	r24, r28
   12db0:	4a dc       	rcall	.-1900   	; 0x12646 <gpib_error_test>
   12db2:	9c 01       	movw	r18, r24
   12db4:	23 70       	andi	r18, 0x03	; 3
   12db6:	33 27       	eor	r19, r19
   12db8:	23 2b       	or	r18, r19
   12dba:	09 f0       	breq	.+2      	; 0x12dbe <gpib_task+0x36>
   12dbc:	43 c0       	rjmp	.+134    	; 0x12e44 <gpib_task+0xbc>
   12dbe:	89 2b       	or	r24, r25
   12dc0:	61 f7       	brne	.-40     	; 0x12d9a <gpib_task+0x12>
   12dc2:	d2 ff       	sbrs	r29, 2
   12dc4:	26 c0       	rjmp	.+76     	; 0x12e12 <gpib_task+0x8a>
   12dc6:	8c 2f       	mov	r24, r28
   12dc8:	8f 77       	andi	r24, 0x7F	; 127
   12dca:	80 32       	cpi	r24, 0x20	; 32
   12dcc:	10 f4       	brcc	.+4      	; 0x12dd2 <gpib_task+0x4a>
   12dce:	63 dd       	rcall	.-1338   	; 0x12896 <GPIB>
   12dd0:	e4 cf       	rjmp	.-56     	; 0x12d9a <gpib_task+0x12>
   12dd2:	90 ee       	ldi	r25, 0xE0	; 224
   12dd4:	98 0f       	add	r25, r24
   12dd6:	90 32       	cpi	r25, 0x20	; 32
   12dd8:	10 f4       	brcc	.+4      	; 0x12dde <gpib_task+0x56>
   12dda:	48 df       	rcall	.-368    	; 0x12c6c <GPIB_LISTEN>
   12ddc:	de cf       	rjmp	.-68     	; 0x12d9a <gpib_task+0x12>
   12dde:	90 ec       	ldi	r25, 0xC0	; 192
   12de0:	98 0f       	add	r25, r24
   12de2:	90 32       	cpi	r25, 0x20	; 32
   12de4:	10 f4       	brcc	.+4      	; 0x12dea <gpib_task+0x62>
   12de6:	0e de       	rcall	.-996    	; 0x12a04 <GPIB_TALK>
   12de8:	d8 cf       	rjmp	.-80     	; 0x12d9a <gpib_task+0x12>
   12dea:	90 91 a1 1e 	lds	r25, 0x1EA1	; 0x801ea1 <listening>
   12dee:	99 23       	and	r25, r25
   12df0:	59 f0       	breq	.+22     	; 0x12e08 <gpib_task+0x80>
   12df2:	20 91 99 1c 	lds	r18, 0x1C99	; 0x801c99 <lastcmd>
   12df6:	30 91 9a 1c 	lds	r19, 0x1C9A	; 0x801c9a <lastcmd+0x1>
   12dfa:	2f 35       	cpi	r18, 0x5F	; 95
   12dfc:	31 05       	cpc	r19, r1
   12dfe:	21 f4       	brne	.+8      	; 0x12e08 <gpib_task+0x80>
   12e00:	10 92 a0 1e 	sts	0x1EA0, r1	; 0x801ea0 <secondary>
   12e04:	94 de       	rcall	.-728    	; 0x12b2e <GPIB_SECONDARY_ADDRESS>
   12e06:	c9 cf       	rjmp	.-110    	; 0x12d9a <gpib_task+0x12>
   12e08:	80 93 a0 1e 	sts	0x1EA0, r24	; 0x801ea0 <secondary>
   12e0c:	60 e0       	ldi	r22, 0x00	; 0
   12e0e:	90 e0       	ldi	r25, 0x00	; 0
   12e10:	12 c0       	rjmp	.+36     	; 0x12e36 <gpib_task+0xae>
   12e12:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   12e16:	90 e0       	ldi	r25, 0x00	; 0
   12e18:	5f db       	rcall	.-2370   	; 0x124d8 <PRINTER_is_MLA>
   12e1a:	89 2b       	or	r24, r25
   12e1c:	29 f0       	breq	.+10     	; 0x12e28 <gpib_task+0xa0>
   12e1e:	ce 01       	movw	r24, r28
   12e20:	99 27       	eor	r25, r25
   12e22:	0e 94 a3 b3 	call	0x16746	; 0x16746 <printer_buffer>
   12e26:	b9 cf       	rjmp	.-142    	; 0x12d9a <gpib_task+0x12>
   12e28:	80 91 a0 1e 	lds	r24, 0x1EA0	; 0x801ea0 <secondary>
   12e2c:	88 23       	and	r24, r24
   12e2e:	09 f4       	brne	.+2      	; 0x12e32 <gpib_task+0xaa>
   12e30:	b4 cf       	rjmp	.-152    	; 0x12d9a <gpib_task+0x12>
   12e32:	61 e0       	ldi	r22, 0x01	; 1
   12e34:	ce 01       	movw	r24, r28
   12e36:	91 dc       	rcall	.-1758   	; 0x1275a <GPIB_COMMANDS>
   12e38:	06 dc       	rcall	.-2036   	; 0x12646 <gpib_error_test>
   12e3a:	83 70       	andi	r24, 0x03	; 3
   12e3c:	99 27       	eor	r25, r25
   12e3e:	89 2b       	or	r24, r25
   12e40:	09 f4       	brne	.+2      	; 0x12e44 <gpib_task+0xbc>
   12e42:	ab cf       	rjmp	.-170    	; 0x12d9a <gpib_task+0x12>
   12e44:	df 91       	pop	r29
   12e46:	cf 91       	pop	r28
   12e48:	08 95       	ret

00012e4a <talk_cleanup>:
   12e4a:	08 95       	ret

00012e4c <gpib_help>:
///  Help Menu for User invoked GPIB functions and tasks
///  See: int gpib_tests(char *str)
/// @return  void

void gpib_help(int full)
{
   12e4c:	cf 93       	push	r28
   12e4e:	df 93       	push	r29
   12e50:	ec 01       	movw	r28, r24
    printf("gpib help\n");
   12e52:	80 e1       	ldi	r24, 0x10	; 16
   12e54:	98 e1       	ldi	r25, 0x18	; 24
   12e56:	1f 92       	push	r1
   12e58:	9f 93       	push	r25
   12e5a:	8f 93       	push	r24
   12e5c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    if(full)
   12e60:	0f 90       	pop	r0
   12e62:	0f 90       	pop	r0
   12e64:	0f 90       	pop	r0
   12e66:	cd 2b       	or	r28, r29
   12e68:	51 f0       	breq	.+20     	; 0x12e7e <gpib_help+0x32>
    {
        printf("gpib prefix is optional\n"
   12e6a:	8f e8       	ldi	r24, 0x8F	; 143
   12e6c:	96 e1       	ldi	r25, 0x16	; 22
   12e6e:	1f 92       	push	r1
   12e70:	9f 93       	push	r25
   12e72:	8f 93       	push	r24
   12e74:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   12e78:	0f 90       	pop	r0
   12e7a:	0f 90       	pop	r0
   12e7c:	0f 90       	pop	r0
			"gpib port write latch [A-D] val\n"
			"gpib port write pins  [A-D] val\n"
            "\n"
            );
    }
}
   12e7e:	df 91       	pop	r29
   12e80:	cf 91       	pop	r28
   12e82:	08 95       	ret

00012e84 <gpib_tests>:

/// @brief GPIB user tests
///  User invoked GPIB functions and tasks
/// @return  1 matched token, 0 if not
int gpib_tests(int argc, char * argv[])
{
   12e84:	ef 92       	push	r14
   12e86:	ff 92       	push	r15
   12e88:	0f 93       	push	r16
   12e8a:	1f 93       	push	r17
   12e8c:	cf 93       	push	r28
   12e8e:	df 93       	push	r29
   12e90:	7c 01       	movw	r14, r24

    char *ptr;
    int ind;

    ind = 0;
    ptr = argv[ind++];
   12e92:	fb 01       	movw	r30, r22
   12e94:	80 81       	ld	r24, Z
   12e96:	91 81       	ldd	r25, Z+1	; 0x01

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   12e98:	00 97       	sbiw	r24, 0x00	; 0
   12e9a:	19 f4       	brne	.+6      	; 0x12ea2 <gpib_tests+0x1e>
        return(0);
   12e9c:	80 e0       	ldi	r24, 0x00	; 0
   12e9e:	90 e0       	ldi	r25, 0x00	; 0
   12ea0:	e5 c2       	rjmp	.+1482   	; 0x1346c <gpib_tests+0x5e8>
   12ea2:	eb 01       	movw	r28, r22

    ind = 0;
    ptr = argv[ind++];

    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
   12ea4:	63 e2       	ldi	r22, 0x23	; 35
   12ea6:	7d e0       	ldi	r23, 0x0D	; 13
   12ea8:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <MATCH>
   12eac:	89 2b       	or	r24, r25
   12eae:	b1 f3       	breq	.-20     	; 0x12e9c <gpib_tests+0x18>
        return(0);

    ptr = argv[ind++];
   12eb0:	0a 81       	ldd	r16, Y+2	; 0x02
   12eb2:	1b 81       	ldd	r17, Y+3	; 0x03
    if ( !ptr || MATCH(ptr,"help") )
   12eb4:	01 15       	cp	r16, r1
   12eb6:	11 05       	cpc	r17, r1
   12eb8:	21 f4       	brne	.+8      	; 0x12ec2 <gpib_tests+0x3e>
    {
        gpib_help(1);
   12eba:	81 e0       	ldi	r24, 0x01	; 1
   12ebc:	90 e0       	ldi	r25, 0x00	; 0
   12ebe:	c6 df       	rcall	.-116    	; 0x12e4c <gpib_help>
   12ec0:	d3 c2       	rjmp	.+1446   	; 0x13468 <gpib_tests+0x5e4>
    // skip optional gpib key word
    if( !ptr || !MATCH(ptr,"gpib") )
        return(0);

    ptr = argv[ind++];
    if ( !ptr || MATCH(ptr,"help") )
   12ec2:	69 e0       	ldi	r22, 0x09	; 9
   12ec4:	76 e1       	ldi	r23, 0x16	; 22
   12ec6:	c8 01       	movw	r24, r16
   12ec8:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <MATCH>
   12ecc:	89 2b       	or	r24, r25
   12ece:	a9 f7       	brne	.-22     	; 0x12eba <gpib_tests+0x36>
    {
        gpib_help(1);
        return(1);
    }

    if (MATCHARGS(ptr,"addresses",(ind+0),argc))
   12ed0:	97 01       	movw	r18, r14
   12ed2:	42 e0       	ldi	r20, 0x02	; 2
   12ed4:	50 e0       	ldi	r21, 0x00	; 0
   12ed6:	68 e2       	ldi	r22, 0x28	; 40
   12ed8:	7d e0       	ldi	r23, 0x0D	; 13
   12eda:	c8 01       	movw	r24, r16
   12edc:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   12ee0:	89 2b       	or	r24, r25
   12ee2:	19 f0       	breq	.+6      	; 0x12eea <gpib_tests+0x66>
    {
        display_Addresses();
   12ee4:	0e 94 25 c1 	call	0x1824a	; 0x1824a <display_Addresses>
   12ee8:	bf c2       	rjmp	.+1406   	; 0x13468 <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"config",(ind+0),argc))
   12eea:	97 01       	movw	r18, r14
   12eec:	42 e0       	ldi	r20, 0x02	; 2
   12eee:	50 e0       	ldi	r21, 0x00	; 0
   12ef0:	62 e3       	ldi	r22, 0x32	; 50
   12ef2:	7d e0       	ldi	r23, 0x0D	; 13
   12ef4:	c8 01       	movw	r24, r16
   12ef6:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   12efa:	89 2b       	or	r24, r25
   12efc:	19 f0       	breq	.+6      	; 0x12f04 <gpib_tests+0x80>
    {
        display_Config();
   12efe:	0e 94 20 c2 	call	0x18440	; 0x18440 <display_Config>
   12f02:	b2 c2       	rjmp	.+1380   	; 0x13468 <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"debug", (ind+1) ,argc))
   12f04:	97 01       	movw	r18, r14
   12f06:	43 e0       	ldi	r20, 0x03	; 3
   12f08:	50 e0       	ldi	r21, 0x00	; 0
   12f0a:	69 e3       	ldi	r22, 0x39	; 57
   12f0c:	7d e0       	ldi	r23, 0x0D	; 13
   12f0e:	c8 01       	movw	r24, r16
   12f10:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   12f14:	89 2b       	or	r24, r25
   12f16:	69 f0       	breq	.+26     	; 0x12f32 <gpib_tests+0xae>
    {
        debuglevel = get_value(argv[ind]);
   12f18:	8c 81       	ldd	r24, Y+4	; 0x04
   12f1a:	9d 81       	ldd	r25, Y+5	; 0x05
   12f1c:	0e 94 e3 31 	call	0x63c6	; 0x63c6 <get_value>
   12f20:	60 93 b0 01 	sts	0x01B0, r22	; 0x8001b0 <debuglevel>
   12f24:	70 93 b1 01 	sts	0x01B1, r23	; 0x8001b1 <debuglevel+0x1>
        printf("debug=%04XH\n", debuglevel);
   12f28:	7f 93       	push	r23
   12f2a:	6f 93       	push	r22
   12f2c:	82 e8       	ldi	r24, 0x82	; 130
   12f2e:	96 e1       	ldi	r25, 0x16	; 22
   12f30:	b9 c1       	rjmp	.+882    	; 0x132a4 <gpib_tests+0x420>
        return(1);
    }

    if (MATCHARGS(ptr,"elapsed_reset",(ind+0),argc))
   12f32:	97 01       	movw	r18, r14
   12f34:	42 e0       	ldi	r20, 0x02	; 2
   12f36:	50 e0       	ldi	r21, 0x00	; 0
   12f38:	6f e3       	ldi	r22, 0x3F	; 63
   12f3a:	7d e0       	ldi	r23, 0x0D	; 13
   12f3c:	c8 01       	movw	r24, r16
   12f3e:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   12f42:	89 2b       	or	r24, r25
   12f44:	19 f0       	breq	.+6      	; 0x12f4c <gpib_tests+0xc8>
    {
        gpib_timer_elapsed_begin();
   12f46:	0e 94 56 8b 	call	0x116ac	; 0x116ac <gpib_timer_elapsed_begin>
   12f4a:	8e c2       	rjmp	.+1308   	; 0x13468 <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"elapsed",(ind+0),argc))
   12f4c:	97 01       	movw	r18, r14
   12f4e:	42 e0       	ldi	r20, 0x02	; 2
   12f50:	50 e0       	ldi	r21, 0x00	; 0
   12f52:	6d e4       	ldi	r22, 0x4D	; 77
   12f54:	7d e0       	ldi	r23, 0x0D	; 13
   12f56:	c8 01       	movw	r24, r16
   12f58:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   12f5c:	89 2b       	or	r24, r25
   12f5e:	29 f0       	breq	.+10     	; 0x12f6a <gpib_tests+0xe6>
    {
        gpib_timer_elapsed_end("gpib elapsed:");
   12f60:	85 e5       	ldi	r24, 0x55	; 85
   12f62:	9d e0       	ldi	r25, 0x0D	; 13
   12f64:	0e 94 68 8b 	call	0x116d0	; 0x116d0 <gpib_timer_elapsed_end>
   12f68:	7f c2       	rjmp	.+1278   	; 0x13468 <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"task",(ind+0),argc))
   12f6a:	97 01       	movw	r18, r14
   12f6c:	42 e0       	ldi	r20, 0x02	; 2
   12f6e:	50 e0       	ldi	r21, 0x00	; 0
   12f70:	63 e6       	ldi	r22, 0x63	; 99
   12f72:	7d e0       	ldi	r23, 0x0D	; 13
   12f74:	c8 01       	movw	r24, r16
   12f76:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   12f7a:	89 2b       	or	r24, r25
    {
        gpib_task();
   12f7c:	11 f0       	breq	.+4      	; 0x12f82 <gpib_tests+0xfe>
   12f7e:	04 df       	rcall	.-504    	; 0x12d88 <gpib_task>
   12f80:	73 c2       	rjmp	.+1254   	; 0x13468 <gpib_tests+0x5e4>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
   12f82:	97 01       	movw	r18, r14
   12f84:	43 e0       	ldi	r20, 0x03	; 3
   12f86:	50 e0       	ldi	r21, 0x00	; 0
   12f88:	68 e6       	ldi	r22, 0x68	; 104
   12f8a:	7d e0       	ldi	r23, 0x0D	; 13
   12f8c:	c8 01       	movw	r24, r16
   12f8e:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   12f92:	89 2b       	or	r24, r25
   12f94:	a1 f0       	breq	.+40     	; 0x12fbe <gpib_tests+0x13a>
    {
        int detail = 0;
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
   12f96:	8e 81       	ldd	r24, Y+6	; 0x06
   12f98:	9f 81       	ldd	r25, Y+7	; 0x07
   12f9a:	00 97       	sbiw	r24, 0x00	; 0
   12f9c:	51 f0       	breq	.+20     	; 0x12fb2 <gpib_tests+0x12e>
   12f9e:	6e e6       	ldi	r22, 0x6E	; 110
   12fa0:	7d e0       	ldi	r23, 0x0D	; 13
   12fa2:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <MATCH>
        return(1);
    }

    if (MATCHARGS(ptr,"trace", (ind+1) ,argc))
    {
        int detail = 0;
   12fa6:	61 e0       	ldi	r22, 0x01	; 1
   12fa8:	70 e0       	ldi	r23, 0x00	; 0
   12faa:	89 2b       	or	r24, r25
   12fac:	21 f4       	brne	.+8      	; 0x12fb6 <gpib_tests+0x132>
   12fae:	60 e0       	ldi	r22, 0x00	; 0
   12fb0:	02 c0       	rjmp	.+4      	; 0x12fb6 <gpib_tests+0x132>
   12fb2:	60 e0       	ldi	r22, 0x00	; 0
        if(argv[ind+1] && MATCH(argv[ind+1],"BUS"))
            detail = 1;
        gpib_trace_task(argv[ind], detail);
   12fb4:	70 e0       	ldi	r23, 0x00	; 0
   12fb6:	8c 81       	ldd	r24, Y+4	; 0x04
   12fb8:	9d 81       	ldd	r25, Y+5	; 0x05
   12fba:	b8 da       	rcall	.-2704   	; 0x1252c <gpib_trace_task>
        return(1);
    }

    if ( MATCHARGS(ptr, "ifc",(ind+0),argc))
   12fbc:	55 c2       	rjmp	.+1194   	; 0x13468 <gpib_tests+0x5e4>
   12fbe:	97 01       	movw	r18, r14
   12fc0:	42 e0       	ldi	r20, 0x02	; 2
   12fc2:	50 e0       	ldi	r21, 0x00	; 0
   12fc4:	62 e7       	ldi	r22, 0x72	; 114
   12fc6:	7d e0       	ldi	r23, 0x0D	; 13
   12fc8:	c8 01       	movw	r24, r16
   12fca:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   12fce:	89 2b       	or	r24, r25
    {
        gpib_assert_ifc();
   12fd0:	19 f0       	breq	.+6      	; 0x12fd8 <gpib_tests+0x154>
   12fd2:	0e 94 70 8c 	call	0x118e0	; 0x118e0 <gpib_assert_ifc>
        return(1);

    }

    if (MATCHARGS(ptr,"plot_echo", (ind+1) ,argc))
   12fd6:	48 c2       	rjmp	.+1168   	; 0x13468 <gpib_tests+0x5e4>
   12fd8:	97 01       	movw	r18, r14
   12fda:	43 e0       	ldi	r20, 0x03	; 3
   12fdc:	50 e0       	ldi	r21, 0x00	; 0
   12fde:	66 e7       	ldi	r22, 0x76	; 118
   12fe0:	7d e0       	ldi	r23, 0x0D	; 13
   12fe2:	c8 01       	movw	r24, r16
   12fe4:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   12fe8:	89 2b       	or	r24, r25
    {
        plot_echo(atoi(argv[ind]) );
   12fea:	39 f0       	breq	.+14     	; 0x12ffa <gpib_tests+0x176>
   12fec:	8c 81       	ldd	r24, Y+4	; 0x04
   12fee:	9d 81       	ldd	r25, Y+5	; 0x05
   12ff0:	0e 94 61 45 	call	0x8ac2	; 0x8ac2 <atoi>
   12ff4:	0e 94 45 b4 	call	0x1688a	; 0x1688a <plot_echo>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_bit_clr", (ind+1) ,argc))
   12ff8:	37 c2       	rjmp	.+1134   	; 0x13468 <gpib_tests+0x5e4>
   12ffa:	97 01       	movw	r18, r14
   12ffc:	43 e0       	ldi	r20, 0x03	; 3
   12ffe:	50 e0       	ldi	r21, 0x00	; 0
   13000:	60 e8       	ldi	r22, 0x80	; 128
   13002:	7d e0       	ldi	r23, 0x0D	; 13
   13004:	c8 01       	movw	r24, r16
   13006:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   1300a:	89 2b       	or	r24, r25
    {
        ppr_bit_clr(atoh(argv[ind] ));
   1300c:	41 f0       	breq	.+16     	; 0x1301e <gpib_tests+0x19a>
   1300e:	8c 81       	ldd	r24, Y+4	; 0x04
   13010:	9d 81       	ldd	r25, Y+5	; 0x05
   13012:	0e 94 5b 45 	call	0x8ab6	; 0x8ab6 <atoh>
   13016:	86 2f       	mov	r24, r22
   13018:	0e 94 18 8a 	call	0x11430	; 0x11430 <ppr_bit_clr>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_bit_set", (ind+1) ,argc))
   1301c:	25 c2       	rjmp	.+1098   	; 0x13468 <gpib_tests+0x5e4>
   1301e:	97 01       	movw	r18, r14
   13020:	43 e0       	ldi	r20, 0x03	; 3
   13022:	50 e0       	ldi	r21, 0x00	; 0
   13024:	6c e8       	ldi	r22, 0x8C	; 140
   13026:	7d e0       	ldi	r23, 0x0D	; 13
   13028:	c8 01       	movw	r24, r16
   1302a:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   1302e:	89 2b       	or	r24, r25
    {
        ppr_bit_set(atoh(argv[ind]) );
   13030:	41 f0       	breq	.+16     	; 0x13042 <gpib_tests+0x1be>
   13032:	8c 81       	ldd	r24, Y+4	; 0x04
   13034:	9d 81       	ldd	r25, Y+5	; 0x05
   13036:	0e 94 5b 45 	call	0x8ab6	; 0x8ab6 <atoh>
   1303a:	86 2f       	mov	r24, r22
   1303c:	0e 94 0b 8a 	call	0x11416	; 0x11416 <ppr_bit_set>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_set", (ind+1) ,argc))
   13040:	13 c2       	rjmp	.+1062   	; 0x13468 <gpib_tests+0x5e4>
   13042:	97 01       	movw	r18, r14
   13044:	43 e0       	ldi	r20, 0x03	; 3
   13046:	50 e0       	ldi	r21, 0x00	; 0
   13048:	68 e9       	ldi	r22, 0x98	; 152
   1304a:	7d e0       	ldi	r23, 0x0D	; 13
   1304c:	c8 01       	movw	r24, r16
   1304e:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   13052:	89 2b       	or	r24, r25
    {
        ppr_set(atoh(argv[ind]) );
   13054:	41 f0       	breq	.+16     	; 0x13066 <gpib_tests+0x1e2>
   13056:	8c 81       	ldd	r24, Y+4	; 0x04
   13058:	9d 81       	ldd	r25, Y+5	; 0x05
   1305a:	0e 94 5b 45 	call	0x8ab6	; 0x8ab6 <atoh>
   1305e:	86 2f       	mov	r24, r22
   13060:	0e 94 ec 89 	call	0x113d8	; 0x113d8 <ppr_set>
        return(1);
    }

    if (MATCHARGS(ptr,"ppr_init",(ind+0),argc))
   13064:	01 c2       	rjmp	.+1026   	; 0x13468 <gpib_tests+0x5e4>
   13066:	97 01       	movw	r18, r14
   13068:	42 e0       	ldi	r20, 0x02	; 2
   1306a:	50 e0       	ldi	r21, 0x00	; 0
   1306c:	60 ea       	ldi	r22, 0xA0	; 160
   1306e:	7d e0       	ldi	r23, 0x0D	; 13
   13070:	c8 01       	movw	r24, r16
   13072:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   13076:	89 2b       	or	r24, r25
    {
        ppr_init();
   13078:	19 f0       	breq	.+6      	; 0x13080 <gpib_tests+0x1fc>
   1307a:	0e 94 fa 89 	call	0x113f4	; 0x113f4 <ppr_init>
        return(1);
    }


	// port read
    if (MATCHARGS(ptr,"port",(ind+3),argc))
   1307e:	f4 c1       	rjmp	.+1000   	; 0x13468 <gpib_tests+0x5e4>
   13080:	97 01       	movw	r18, r14
   13082:	45 e0       	ldi	r20, 0x05	; 5
   13084:	50 e0       	ldi	r21, 0x00	; 0
   13086:	69 ea       	ldi	r22, 0xA9	; 169
   13088:	7d e0       	ldi	r23, 0x0D	; 13
   1308a:	c8 01       	movw	r24, r16
   1308c:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   13090:	89 2b       	or	r24, r25
   13092:	09 f4       	brne	.+2      	; 0x13096 <gpib_tests+0x212>
    {
        if( MATCHI(argv[ind],"read") )
   13094:	12 c1       	rjmp	.+548    	; 0x132ba <gpib_tests+0x436>
   13096:	6e ea       	ldi	r22, 0xAE	; 174
   13098:	7d e0       	ldi	r23, 0x0D	; 13
   1309a:	8c 81       	ldd	r24, Y+4	; 0x04
   1309c:	9d 81       	ldd	r25, Y+5	; 0x05
   1309e:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   130a2:	89 2b       	or	r24, r25
   130a4:	09 f4       	brne	.+2      	; 0x130a8 <gpib_tests+0x224>
		{
			if( MATCHI(argv[ind+1],"pins") )
   130a6:	09 c1       	rjmp	.+530    	; 0x132ba <gpib_tests+0x436>
   130a8:	63 eb       	ldi	r22, 0xB3	; 179
   130aa:	7d e0       	ldi	r23, 0x0D	; 13
   130ac:	8e 81       	ldd	r24, Y+6	; 0x06
   130ae:	9f 81       	ldd	r25, Y+7	; 0x07
   130b0:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   130b4:	89 2b       	or	r24, r25
   130b6:	09 f4       	brne	.+2      	; 0x130ba <gpib_tests+0x236>
			{   
				if( MATCHI(argv[ind+2],"A")) 
   130b8:	4c c0       	rjmp	.+152    	; 0x13152 <gpib_tests+0x2ce>
   130ba:	6b ea       	ldi	r22, 0xAB	; 171
   130bc:	73 e1       	ldi	r23, 0x13	; 19
   130be:	88 85       	ldd	r24, Y+8	; 0x08
   130c0:	99 85       	ldd	r25, Y+9	; 0x09
   130c2:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   130c6:	89 2b       	or	r24, r25
				{
					printf("Port pins A RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTA) );
   130c8:	59 f0       	breq	.+22     	; 0x130e0 <gpib_tests+0x25c>
   130ca:	e2 b1       	in	r30, 0x02	; 2
   130cc:	83 e0       	ldi	r24, 0x03	; 3
   130ce:	e8 9f       	mul	r30, r24
   130d0:	f0 01       	movw	r30, r0
   130d2:	11 24       	eor	r1, r1
   130d4:	80 a1       	ldd	r24, Z+32	; 0x20
   130d6:	1f 92       	push	r1
   130d8:	8f 93       	push	r24
   130da:	8a e6       	ldi	r24, 0x6A	; 106
   130dc:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   130de:	e2 c0       	rjmp	.+452    	; 0x132a4 <gpib_tests+0x420>
   130e0:	68 eb       	ldi	r22, 0xB8	; 184
   130e2:	7d e0       	ldi	r23, 0x0D	; 13
   130e4:	88 85       	ldd	r24, Y+8	; 0x08
   130e6:	99 85       	ldd	r25, Y+9	; 0x09
   130e8:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   130ec:	89 2b       	or	r24, r25
				{
					printf("Port pins B RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTB) );
   130ee:	59 f0       	breq	.+22     	; 0x13106 <gpib_tests+0x282>
   130f0:	e5 b1       	in	r30, 0x05	; 5
   130f2:	83 e0       	ldi	r24, 0x03	; 3
   130f4:	e8 9f       	mul	r30, r24
   130f6:	f0 01       	movw	r30, r0
   130f8:	11 24       	eor	r1, r1
   130fa:	80 a1       	ldd	r24, Z+32	; 0x20
   130fc:	1f 92       	push	r1
   130fe:	8f 93       	push	r24
   13100:	82 e5       	ldi	r24, 0x52	; 82
   13102:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   13104:	cf c0       	rjmp	.+414    	; 0x132a4 <gpib_tests+0x420>
   13106:	61 ee       	ldi	r22, 0xE1	; 225
   13108:	7c e0       	ldi	r23, 0x0C	; 12
   1310a:	88 85       	ldd	r24, Y+8	; 0x08
   1310c:	99 85       	ldd	r25, Y+9	; 0x09
   1310e:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   13112:	89 2b       	or	r24, r25
				{
					printf("Port pins C RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTC) );
   13114:	59 f0       	breq	.+22     	; 0x1312c <gpib_tests+0x2a8>
   13116:	e8 b1       	in	r30, 0x08	; 8
   13118:	83 e0       	ldi	r24, 0x03	; 3
   1311a:	e8 9f       	mul	r30, r24
   1311c:	f0 01       	movw	r30, r0
   1311e:	11 24       	eor	r1, r1
   13120:	80 a1       	ldd	r24, Z+32	; 0x20
   13122:	1f 92       	push	r1
   13124:	8f 93       	push	r24
   13126:	8a e3       	ldi	r24, 0x3A	; 58
   13128:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   1312a:	bc c0       	rjmp	.+376    	; 0x132a4 <gpib_tests+0x420>
   1312c:	6e e3       	ldi	r22, 0x3E	; 62
   1312e:	77 e0       	ldi	r23, 0x07	; 7
   13130:	88 85       	ldd	r24, Y+8	; 0x08
   13132:	99 85       	ldd	r25, Y+9	; 0x09
   13134:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   13138:	89 2b       	or	r24, r25
				{
					printf("Port pins D RD:[%02XH]\n",  0xff & GPIO_PORT_PINS_RD(PORTD) );
   1313a:	59 f0       	breq	.+22     	; 0x13152 <gpib_tests+0x2ce>
   1313c:	eb b1       	in	r30, 0x0b	; 11
   1313e:	83 e0       	ldi	r24, 0x03	; 3
   13140:	e8 9f       	mul	r30, r24
   13142:	f0 01       	movw	r30, r0
   13144:	11 24       	eor	r1, r1
   13146:	80 a1       	ldd	r24, Z+32	; 0x20
   13148:	1f 92       	push	r1
   1314a:	8f 93       	push	r24
   1314c:	82 e2       	ldi	r24, 0x22	; 34
   1314e:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"latch") )
   13150:	a9 c0       	rjmp	.+338    	; 0x132a4 <gpib_tests+0x420>
   13152:	6a eb       	ldi	r22, 0xBA	; 186
   13154:	7d e0       	ldi	r23, 0x0D	; 13
   13156:	8e 81       	ldd	r24, Y+6	; 0x06
   13158:	9f 81       	ldd	r25, Y+7	; 0x07
   1315a:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   1315e:	89 2b       	or	r24, r25
   13160:	09 f4       	brne	.+2      	; 0x13164 <gpib_tests+0x2e0>
			{   
				if( MATCHI(argv[ind+2],"A"))
   13162:	4c c0       	rjmp	.+152    	; 0x131fc <gpib_tests+0x378>
   13164:	6b ea       	ldi	r22, 0xAB	; 171
   13166:	73 e1       	ldi	r23, 0x13	; 19
   13168:	88 85       	ldd	r24, Y+8	; 0x08
   1316a:	99 85       	ldd	r25, Y+9	; 0x09
   1316c:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   13170:	89 2b       	or	r24, r25
				{
					printf("Port latch A RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTA) );
   13172:	59 f0       	breq	.+22     	; 0x1318a <gpib_tests+0x306>
   13174:	e2 b1       	in	r30, 0x02	; 2
   13176:	83 e0       	ldi	r24, 0x03	; 3
   13178:	e8 9f       	mul	r30, r24
   1317a:	f0 01       	movw	r30, r0
   1317c:	11 24       	eor	r1, r1
   1317e:	82 a1       	ldd	r24, Z+34	; 0x22
   13180:	1f 92       	push	r1
   13182:	8f 93       	push	r24
   13184:	89 e0       	ldi	r24, 0x09	; 9
   13186:	96 e1       	ldi	r25, 0x16	; 22
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   13188:	8d c0       	rjmp	.+282    	; 0x132a4 <gpib_tests+0x420>
   1318a:	68 eb       	ldi	r22, 0xB8	; 184
   1318c:	7d e0       	ldi	r23, 0x0D	; 13
   1318e:	88 85       	ldd	r24, Y+8	; 0x08
   13190:	99 85       	ldd	r25, Y+9	; 0x09
   13192:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   13196:	89 2b       	or	r24, r25
				{
					printf("Port latch B RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTB) );
   13198:	59 f0       	breq	.+22     	; 0x131b0 <gpib_tests+0x32c>
   1319a:	e5 b1       	in	r30, 0x05	; 5
   1319c:	83 e0       	ldi	r24, 0x03	; 3
   1319e:	e8 9f       	mul	r30, r24
   131a0:	f0 01       	movw	r30, r0
   131a2:	11 24       	eor	r1, r1
   131a4:	82 a1       	ldd	r24, Z+34	; 0x22
   131a6:	1f 92       	push	r1
   131a8:	8f 93       	push	r24
   131aa:	80 ef       	ldi	r24, 0xF0	; 240
   131ac:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   131ae:	7a c0       	rjmp	.+244    	; 0x132a4 <gpib_tests+0x420>
   131b0:	61 ee       	ldi	r22, 0xE1	; 225
   131b2:	7c e0       	ldi	r23, 0x0C	; 12
   131b4:	88 85       	ldd	r24, Y+8	; 0x08
   131b6:	99 85       	ldd	r25, Y+9	; 0x09
   131b8:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   131bc:	89 2b       	or	r24, r25
				{
					printf("Port latch C RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTC) );
   131be:	59 f0       	breq	.+22     	; 0x131d6 <gpib_tests+0x352>
   131c0:	e8 b1       	in	r30, 0x08	; 8
   131c2:	83 e0       	ldi	r24, 0x03	; 3
   131c4:	e8 9f       	mul	r30, r24
   131c6:	f0 01       	movw	r30, r0
   131c8:	11 24       	eor	r1, r1
   131ca:	82 a1       	ldd	r24, Z+34	; 0x22
   131cc:	1f 92       	push	r1
   131ce:	8f 93       	push	r24
   131d0:	87 ed       	ldi	r24, 0xD7	; 215
   131d2:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   131d4:	67 c0       	rjmp	.+206    	; 0x132a4 <gpib_tests+0x420>
   131d6:	6e e3       	ldi	r22, 0x3E	; 62
   131d8:	77 e0       	ldi	r23, 0x07	; 7
   131da:	88 85       	ldd	r24, Y+8	; 0x08
   131dc:	99 85       	ldd	r25, Y+9	; 0x09
   131de:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   131e2:	89 2b       	or	r24, r25
				{
					printf("Port latch D RD:[%02XH]\n",  0xff & GPIO_PORT_LATCH_RD(PORTD) );
   131e4:	59 f0       	breq	.+22     	; 0x131fc <gpib_tests+0x378>
   131e6:	eb b1       	in	r30, 0x0b	; 11
   131e8:	83 e0       	ldi	r24, 0x03	; 3
   131ea:	e8 9f       	mul	r30, r24
   131ec:	f0 01       	movw	r30, r0
   131ee:	11 24       	eor	r1, r1
   131f0:	82 a1       	ldd	r24, Z+34	; 0x22
   131f2:	1f 92       	push	r1
   131f4:	8f 93       	push	r24
   131f6:	8e eb       	ldi	r24, 0xBE	; 190
   131f8:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"ddr") )
   131fa:	54 c0       	rjmp	.+168    	; 0x132a4 <gpib_tests+0x420>
   131fc:	60 ec       	ldi	r22, 0xC0	; 192
   131fe:	7d e0       	ldi	r23, 0x0D	; 13
   13200:	8e 81       	ldd	r24, Y+6	; 0x06
   13202:	9f 81       	ldd	r25, Y+7	; 0x07
   13204:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   13208:	89 2b       	or	r24, r25
   1320a:	09 f4       	brne	.+2      	; 0x1320e <gpib_tests+0x38a>
			{   
				if( MATCHI(argv[ind+2],"A"))
   1320c:	56 c0       	rjmp	.+172    	; 0x132ba <gpib_tests+0x436>
   1320e:	6b ea       	ldi	r22, 0xAB	; 171
   13210:	73 e1       	ldi	r23, 0x13	; 19
   13212:	88 85       	ldd	r24, Y+8	; 0x08
   13214:	99 85       	ldd	r25, Y+9	; 0x09
   13216:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   1321a:	89 2b       	or	r24, r25
				{
					printf("Port ddr A RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTA) );
   1321c:	59 f0       	breq	.+22     	; 0x13234 <gpib_tests+0x3b0>
   1321e:	e2 b1       	in	r30, 0x02	; 2
   13220:	83 e0       	ldi	r24, 0x03	; 3
   13222:	e8 9f       	mul	r30, r24
   13224:	f0 01       	movw	r30, r0
   13226:	11 24       	eor	r1, r1
   13228:	81 a1       	ldd	r24, Z+33	; 0x21
   1322a:	1f 92       	push	r1
   1322c:	8f 93       	push	r24
   1322e:	87 ea       	ldi	r24, 0xA7	; 167
   13230:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   13232:	38 c0       	rjmp	.+112    	; 0x132a4 <gpib_tests+0x420>
   13234:	68 eb       	ldi	r22, 0xB8	; 184
   13236:	7d e0       	ldi	r23, 0x0D	; 13
   13238:	88 85       	ldd	r24, Y+8	; 0x08
   1323a:	99 85       	ldd	r25, Y+9	; 0x09
   1323c:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   13240:	89 2b       	or	r24, r25
				{
					printf("Port ddr B RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTB) );
   13242:	59 f0       	breq	.+22     	; 0x1325a <gpib_tests+0x3d6>
   13244:	e5 b1       	in	r30, 0x05	; 5
   13246:	83 e0       	ldi	r24, 0x03	; 3
   13248:	e8 9f       	mul	r30, r24
   1324a:	f0 01       	movw	r30, r0
   1324c:	11 24       	eor	r1, r1
   1324e:	81 a1       	ldd	r24, Z+33	; 0x21
   13250:	1f 92       	push	r1
   13252:	8f 93       	push	r24
   13254:	80 e9       	ldi	r24, 0x90	; 144
   13256:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   13258:	25 c0       	rjmp	.+74     	; 0x132a4 <gpib_tests+0x420>
   1325a:	61 ee       	ldi	r22, 0xE1	; 225
   1325c:	7c e0       	ldi	r23, 0x0C	; 12
   1325e:	88 85       	ldd	r24, Y+8	; 0x08
   13260:	99 85       	ldd	r25, Y+9	; 0x09
   13262:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   13266:	89 2b       	or	r24, r25
				{
					printf("Port ddr C RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTC) );
   13268:	59 f0       	breq	.+22     	; 0x13280 <gpib_tests+0x3fc>
   1326a:	e8 b1       	in	r30, 0x08	; 8
   1326c:	83 e0       	ldi	r24, 0x03	; 3
   1326e:	e8 9f       	mul	r30, r24
   13270:	f0 01       	movw	r30, r0
   13272:	11 24       	eor	r1, r1
   13274:	81 a1       	ldd	r24, Z+33	; 0x21
   13276:	1f 92       	push	r1
   13278:	8f 93       	push	r24
   1327a:	89 e7       	ldi	r24, 0x79	; 121
   1327c:	95 e1       	ldi	r25, 0x15	; 21
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   1327e:	12 c0       	rjmp	.+36     	; 0x132a4 <gpib_tests+0x420>
   13280:	6e e3       	ldi	r22, 0x3E	; 62
   13282:	77 e0       	ldi	r23, 0x07	; 7
   13284:	88 85       	ldd	r24, Y+8	; 0x08
   13286:	99 85       	ldd	r25, Y+9	; 0x09
   13288:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   1328c:	89 2b       	or	r24, r25
				{
					printf("Port ddr D RD:[%02XH]\n",  0xff & GPIO_PORT_DDR_RD(PORTD) );
   1328e:	a9 f0       	breq	.+42     	; 0x132ba <gpib_tests+0x436>
   13290:	eb b1       	in	r30, 0x0b	; 11
   13292:	83 e0       	ldi	r24, 0x03	; 3
   13294:	e8 9f       	mul	r30, r24
   13296:	f0 01       	movw	r30, r0
   13298:	11 24       	eor	r1, r1
   1329a:	81 a1       	ldd	r24, Z+33	; 0x21
   1329c:	1f 92       	push	r1
   1329e:	8f 93       	push	r24
   132a0:	82 e6       	ldi	r24, 0x62	; 98
   132a2:	95 e1       	ldi	r25, 0x15	; 21
   132a4:	1f 92       	push	r1
   132a6:	9f 93       	push	r25
   132a8:	8f 93       	push	r24
   132aa:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
					return (1);
   132ae:	0f 90       	pop	r0
   132b0:	0f 90       	pop	r0
   132b2:	0f 90       	pop	r0
   132b4:	0f 90       	pop	r0
   132b6:	0f 90       	pop	r0
			}
		}
	} // port read 

	// port write
    if (MATCHARGS(ptr,"port",(ind+4),argc))
   132b8:	d7 c0       	rjmp	.+430    	; 0x13468 <gpib_tests+0x5e4>
   132ba:	97 01       	movw	r18, r14
   132bc:	46 e0       	ldi	r20, 0x06	; 6
   132be:	50 e0       	ldi	r21, 0x00	; 0
   132c0:	69 ea       	ldi	r22, 0xA9	; 169
   132c2:	7d e0       	ldi	r23, 0x0D	; 13
   132c4:	c8 01       	movw	r24, r16
   132c6:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   132ca:	89 2b       	or	r24, r25
   132cc:	09 f4       	brne	.+2      	; 0x132d0 <gpib_tests+0x44c>
    {
		if( MATCHI(argv[ind],"write") )
   132ce:	e6 cd       	rjmp	.-1076   	; 0x12e9c <gpib_tests+0x18>
   132d0:	66 e1       	ldi	r22, 0x16	; 22
   132d2:	73 e1       	ldi	r23, 0x13	; 19
   132d4:	8c 81       	ldd	r24, Y+4	; 0x04
   132d6:	9d 81       	ldd	r25, Y+5	; 0x05
   132d8:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   132dc:	89 2b       	or	r24, r25
   132de:	09 f4       	brne	.+2      	; 0x132e2 <gpib_tests+0x45e>
		{
			uint8_t val;
			if( MATCHI(argv[ind+1],"pins") )
   132e0:	dd cd       	rjmp	.-1094   	; 0x12e9c <gpib_tests+0x18>
   132e2:	63 eb       	ldi	r22, 0xB3	; 179
   132e4:	7d e0       	ldi	r23, 0x0D	; 13
   132e6:	8e 81       	ldd	r24, Y+6	; 0x06
   132e8:	9f 81       	ldd	r25, Y+7	; 0x07
   132ea:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   132ee:	89 2b       	or	r24, r25
   132f0:	09 f4       	brne	.+2      	; 0x132f4 <gpib_tests+0x470>
			{   
				val = get_value(argv[ind+3]);
   132f2:	45 c0       	rjmp	.+138    	; 0x1337e <gpib_tests+0x4fa>
   132f4:	8a 85       	ldd	r24, Y+10	; 0x0a
   132f6:	9b 85       	ldd	r25, Y+11	; 0x0b
   132f8:	0e 94 e3 31 	call	0x63c6	; 0x63c6 <get_value>

				if( MATCHI(argv[ind+2],"A"))
   132fc:	16 2f       	mov	r17, r22
   132fe:	6b ea       	ldi	r22, 0xAB	; 171
   13300:	73 e1       	ldi	r23, 0x13	; 19
   13302:	88 85       	ldd	r24, Y+8	; 0x08
   13304:	99 85       	ldd	r25, Y+9	; 0x09
   13306:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   1330a:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTA,val);
   1330c:	41 f0       	breq	.+16     	; 0x1331e <gpib_tests+0x49a>
   1330e:	e2 b1       	in	r30, 0x02	; 2
   13310:	83 e0       	ldi	r24, 0x03	; 3
   13312:	e8 9f       	mul	r30, r24
   13314:	f0 01       	movw	r30, r0
   13316:	11 24       	eor	r1, r1
   13318:	8f ef       	ldi	r24, 0xFF	; 255
   1331a:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   1331c:	45 c0       	rjmp	.+138    	; 0x133a8 <gpib_tests+0x524>
   1331e:	68 eb       	ldi	r22, 0xB8	; 184
   13320:	7d e0       	ldi	r23, 0x0D	; 13
   13322:	88 85       	ldd	r24, Y+8	; 0x08
   13324:	99 85       	ldd	r25, Y+9	; 0x09
   13326:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   1332a:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTB,val);
   1332c:	41 f0       	breq	.+16     	; 0x1333e <gpib_tests+0x4ba>
   1332e:	e5 b1       	in	r30, 0x05	; 5
   13330:	83 e0       	ldi	r24, 0x03	; 3
   13332:	e8 9f       	mul	r30, r24
   13334:	f0 01       	movw	r30, r0
   13336:	11 24       	eor	r1, r1
   13338:	8f ef       	ldi	r24, 0xFF	; 255
   1333a:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   1333c:	3f c0       	rjmp	.+126    	; 0x133bc <gpib_tests+0x538>
   1333e:	61 ee       	ldi	r22, 0xE1	; 225
   13340:	7c e0       	ldi	r23, 0x0C	; 12
   13342:	88 85       	ldd	r24, Y+8	; 0x08
   13344:	99 85       	ldd	r25, Y+9	; 0x09
   13346:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   1334a:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTC,val);
   1334c:	41 f0       	breq	.+16     	; 0x1335e <gpib_tests+0x4da>
   1334e:	e8 b1       	in	r30, 0x08	; 8
   13350:	83 e0       	ldi	r24, 0x03	; 3
   13352:	e8 9f       	mul	r30, r24
   13354:	f0 01       	movw	r30, r0
   13356:	11 24       	eor	r1, r1
   13358:	8f ef       	ldi	r24, 0xFF	; 255
   1335a:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   1335c:	39 c0       	rjmp	.+114    	; 0x133d0 <gpib_tests+0x54c>
   1335e:	6e e3       	ldi	r22, 0x3E	; 62
   13360:	77 e0       	ldi	r23, 0x07	; 7
   13362:	88 85       	ldd	r24, Y+8	; 0x08
   13364:	99 85       	ldd	r25, Y+9	; 0x09
   13366:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   1336a:	89 2b       	or	r24, r25
				{
					GPIO_PORT_WR(PORTD,val);
   1336c:	41 f0       	breq	.+16     	; 0x1337e <gpib_tests+0x4fa>
   1336e:	eb b1       	in	r30, 0x0b	; 11
   13370:	83 e0       	ldi	r24, 0x03	; 3
   13372:	e8 9f       	mul	r30, r24
   13374:	f0 01       	movw	r30, r0
   13376:	11 24       	eor	r1, r1
   13378:	8f ef       	ldi	r24, 0xFF	; 255
   1337a:	81 a3       	std	Z+33, r24	; 0x21
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"latch") )
   1337c:	33 c0       	rjmp	.+102    	; 0x133e4 <gpib_tests+0x560>
   1337e:	6a eb       	ldi	r22, 0xBA	; 186
   13380:	7d e0       	ldi	r23, 0x0D	; 13
   13382:	8e 81       	ldd	r24, Y+6	; 0x06
   13384:	9f 81       	ldd	r25, Y+7	; 0x07
   13386:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   1338a:	89 2b       	or	r24, r25
			{   

				val = get_value(argv[ind+3]);
   1338c:	91 f1       	breq	.+100    	; 0x133f2 <gpib_tests+0x56e>
   1338e:	8a 85       	ldd	r24, Y+10	; 0x0a
   13390:	9b 85       	ldd	r25, Y+11	; 0x0b
   13392:	0e 94 e3 31 	call	0x63c6	; 0x63c6 <get_value>

				if( MATCHI(argv[ind+2],"A"))
   13396:	16 2f       	mov	r17, r22
   13398:	6b ea       	ldi	r22, 0xAB	; 171
   1339a:	73 e1       	ldi	r23, 0x13	; 19
   1339c:	88 85       	ldd	r24, Y+8	; 0x08
   1339e:	99 85       	ldd	r25, Y+9	; 0x09
   133a0:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   133a4:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTA,val);
   133a6:	11 f0       	breq	.+4      	; 0x133ac <gpib_tests+0x528>
   133a8:	e2 b1       	in	r30, 0x02	; 2
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   133aa:	1d c0       	rjmp	.+58     	; 0x133e6 <gpib_tests+0x562>
   133ac:	68 eb       	ldi	r22, 0xB8	; 184
   133ae:	7d e0       	ldi	r23, 0x0D	; 13
   133b0:	88 85       	ldd	r24, Y+8	; 0x08
   133b2:	99 85       	ldd	r25, Y+9	; 0x09
   133b4:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   133b8:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTB,val);
   133ba:	11 f0       	breq	.+4      	; 0x133c0 <gpib_tests+0x53c>
   133bc:	e5 b1       	in	r30, 0x05	; 5
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   133be:	13 c0       	rjmp	.+38     	; 0x133e6 <gpib_tests+0x562>
   133c0:	61 ee       	ldi	r22, 0xE1	; 225
   133c2:	7c e0       	ldi	r23, 0x0C	; 12
   133c4:	88 85       	ldd	r24, Y+8	; 0x08
   133c6:	99 85       	ldd	r25, Y+9	; 0x09
   133c8:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   133cc:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTC,val);
   133ce:	11 f0       	breq	.+4      	; 0x133d4 <gpib_tests+0x550>
   133d0:	e8 b1       	in	r30, 0x08	; 8
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   133d2:	09 c0       	rjmp	.+18     	; 0x133e6 <gpib_tests+0x562>
   133d4:	6e e3       	ldi	r22, 0x3E	; 62
   133d6:	77 e0       	ldi	r23, 0x07	; 7
   133d8:	88 85       	ldd	r24, Y+8	; 0x08
   133da:	99 85       	ldd	r25, Y+9	; 0x09
   133dc:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   133e0:	89 2b       	or	r24, r25
				{
					GPIO_PORT_LATCH_WR(PORTD,val);
   133e2:	39 f0       	breq	.+14     	; 0x133f2 <gpib_tests+0x56e>
   133e4:	eb b1       	in	r30, 0x0b	; 11
   133e6:	83 e0       	ldi	r24, 0x03	; 3
   133e8:	e8 9f       	mul	r30, r24
   133ea:	f0 01       	movw	r30, r0
   133ec:	11 24       	eor	r1, r1
   133ee:	12 a3       	std	Z+34, r17	; 0x22
					return (1);
				}
			}
			if( MATCHI(argv[ind+1],"ddr") )
   133f0:	3b c0       	rjmp	.+118    	; 0x13468 <gpib_tests+0x5e4>
   133f2:	60 ec       	ldi	r22, 0xC0	; 192
   133f4:	7d e0       	ldi	r23, 0x0D	; 13
   133f6:	8e 81       	ldd	r24, Y+6	; 0x06
   133f8:	9f 81       	ldd	r25, Y+7	; 0x07
   133fa:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   133fe:	89 2b       	or	r24, r25
   13400:	09 f4       	brne	.+2      	; 0x13404 <gpib_tests+0x580>
			{   

				val = get_value(argv[ind+3]);
   13402:	4c cd       	rjmp	.-1384   	; 0x12e9c <gpib_tests+0x18>
   13404:	8a 85       	ldd	r24, Y+10	; 0x0a
   13406:	9b 85       	ldd	r25, Y+11	; 0x0b
   13408:	0e 94 e3 31 	call	0x63c6	; 0x63c6 <get_value>

				if( MATCHI(argv[ind+2],"A"))
   1340c:	16 2f       	mov	r17, r22
   1340e:	6b ea       	ldi	r22, 0xAB	; 171
   13410:	73 e1       	ldi	r23, 0x13	; 19
   13412:	88 85       	ldd	r24, Y+8	; 0x08
   13414:	99 85       	ldd	r25, Y+9	; 0x09
   13416:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   1341a:	89 2b       	or	r24, r25
				{
					GPIO_PORT_DDR_WR(PORTA,val);
   1341c:	11 f0       	breq	.+4      	; 0x13422 <gpib_tests+0x59e>
   1341e:	e2 b1       	in	r30, 0x02	; 2
					return (1);
				}
				if( MATCHI(argv[ind+2],"B"))
   13420:	1e c0       	rjmp	.+60     	; 0x1345e <gpib_tests+0x5da>
   13422:	68 eb       	ldi	r22, 0xB8	; 184
   13424:	7d e0       	ldi	r23, 0x0D	; 13
   13426:	88 85       	ldd	r24, Y+8	; 0x08
   13428:	99 85       	ldd	r25, Y+9	; 0x09
   1342a:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   1342e:	89 2b       	or	r24, r25
				{
					GPIO_PORT_DDR_WR(PORTB,val);
   13430:	11 f0       	breq	.+4      	; 0x13436 <gpib_tests+0x5b2>
   13432:	e5 b1       	in	r30, 0x05	; 5
					return (1);
				}
				if( MATCHI(argv[ind+2],"C"))
   13434:	14 c0       	rjmp	.+40     	; 0x1345e <gpib_tests+0x5da>
   13436:	61 ee       	ldi	r22, 0xE1	; 225
   13438:	7c e0       	ldi	r23, 0x0C	; 12
   1343a:	88 85       	ldd	r24, Y+8	; 0x08
   1343c:	99 85       	ldd	r25, Y+9	; 0x09
   1343e:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   13442:	89 2b       	or	r24, r25
				{
					GPIO_PORT_DDR_WR(PORTC,val);
   13444:	11 f0       	breq	.+4      	; 0x1344a <gpib_tests+0x5c6>
   13446:	e8 b1       	in	r30, 0x08	; 8
					return (1);
				}
				if( MATCHI(argv[ind+2],"D"))
   13448:	0a c0       	rjmp	.+20     	; 0x1345e <gpib_tests+0x5da>
   1344a:	6e e3       	ldi	r22, 0x3E	; 62
   1344c:	77 e0       	ldi	r23, 0x07	; 7
   1344e:	88 85       	ldd	r24, Y+8	; 0x08
   13450:	99 85       	ldd	r25, Y+9	; 0x09
   13452:	0e 94 2d 31 	call	0x625a	; 0x625a <MATCHI>
   13456:	89 2b       	or	r24, r25
   13458:	09 f4       	brne	.+2      	; 0x1345c <gpib_tests+0x5d8>
				{
					GPIO_PORT_DDR_WR(PORTD,val);
   1345a:	20 cd       	rjmp	.-1472   	; 0x12e9c <gpib_tests+0x18>
   1345c:	eb b1       	in	r30, 0x0b	; 11
   1345e:	83 e0       	ldi	r24, 0x03	; 3
   13460:	e8 9f       	mul	r30, r24
   13462:	f0 01       	movw	r30, r0
   13464:	11 24       	eor	r1, r1
					return (1);
   13466:	11 a3       	std	Z+33, r17	; 0x21
   13468:	81 e0       	ldi	r24, 0x01	; 1
		}

	} // port write 

    return(0);
}
   1346a:	90 e0       	ldi	r25, 0x00	; 0
   1346c:	cd b7       	in	r28, 0x3d	; 61
   1346e:	de b7       	in	r29, 0x3e	; 62
   13470:	e6 e0       	ldi	r30, 0x06	; 6
   13472:	0c 94 e9 e8 	jmp	0x1d1d2	; 0x1d1d2 <__epilogue_restores__+0x18>

00013476 <SS80ControllerPack>:
   13476:	0f 93       	push	r16
   13478:	1f 93       	push	r17
   1347a:	25 e0       	ldi	r18, 0x05	; 5
   1347c:	30 e0       	ldi	r19, 0x00	; 0
   1347e:	fc 01       	movw	r30, r24
   13480:	31 83       	std	Z+1, r19	; 0x01
   13482:	20 83       	st	Z, r18
   13484:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   13488:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   1348c:	05 a1       	ldd	r16, Z+37	; 0x25
   1348e:	16 a1       	ldd	r17, Z+38	; 0x26
   13490:	20 e0       	ldi	r18, 0x00	; 0
   13492:	30 e0       	ldi	r19, 0x00	; 0
   13494:	42 e0       	ldi	r20, 0x02	; 2
   13496:	50 e0       	ldi	r21, 0x00	; 0
   13498:	60 e0       	ldi	r22, 0x00	; 0
   1349a:	70 e0       	ldi	r23, 0x00	; 0
   1349c:	88 e3       	ldi	r24, 0x38	; 56
   1349e:	99 e1       	ldi	r25, 0x19	; 25
   134a0:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   134a4:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   134a8:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   134ac:	07 a1       	ldd	r16, Z+39	; 0x27
   134ae:	10 a5       	ldd	r17, Z+40	; 0x28
   134b0:	20 e0       	ldi	r18, 0x00	; 0
   134b2:	30 e0       	ldi	r19, 0x00	; 0
   134b4:	42 e0       	ldi	r20, 0x02	; 2
   134b6:	50 e0       	ldi	r21, 0x00	; 0
   134b8:	61 e0       	ldi	r22, 0x01	; 1
   134ba:	70 e0       	ldi	r23, 0x00	; 0
   134bc:	88 e3       	ldi	r24, 0x38	; 56
   134be:	99 e1       	ldi	r25, 0x19	; 25
   134c0:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   134c4:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   134c8:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   134cc:	01 a5       	ldd	r16, Z+41	; 0x29
   134ce:	10 e0       	ldi	r17, 0x00	; 0
   134d0:	20 e0       	ldi	r18, 0x00	; 0
   134d2:	30 e0       	ldi	r19, 0x00	; 0
   134d4:	41 e0       	ldi	r20, 0x01	; 1
   134d6:	50 e0       	ldi	r21, 0x00	; 0
   134d8:	64 e0       	ldi	r22, 0x04	; 4
   134da:	70 e0       	ldi	r23, 0x00	; 0
   134dc:	88 e3       	ldi	r24, 0x38	; 56
   134de:	99 e1       	ldi	r25, 0x19	; 25
   134e0:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   134e4:	88 e3       	ldi	r24, 0x38	; 56
   134e6:	99 e1       	ldi	r25, 0x19	; 25
   134e8:	1f 91       	pop	r17
   134ea:	0f 91       	pop	r16
   134ec:	08 95       	ret

000134ee <SS80UnitPack>:
   134ee:	0f 93       	push	r16
   134f0:	1f 93       	push	r17
   134f2:	23 e1       	ldi	r18, 0x13	; 19
   134f4:	30 e0       	ldi	r19, 0x00	; 0
   134f6:	fc 01       	movw	r30, r24
   134f8:	31 83       	std	Z+1, r19	; 0x01
   134fa:	20 83       	st	Z, r18
   134fc:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   13500:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   13504:	02 a5       	ldd	r16, Z+42	; 0x2a
   13506:	10 e0       	ldi	r17, 0x00	; 0
   13508:	20 e0       	ldi	r18, 0x00	; 0
   1350a:	30 e0       	ldi	r19, 0x00	; 0
   1350c:	41 e0       	ldi	r20, 0x01	; 1
   1350e:	50 e0       	ldi	r21, 0x00	; 0
   13510:	60 e0       	ldi	r22, 0x00	; 0
   13512:	70 e0       	ldi	r23, 0x00	; 0
   13514:	85 e2       	ldi	r24, 0x25	; 37
   13516:	99 e1       	ldi	r25, 0x19	; 25
   13518:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   1351c:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   13520:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   13524:	03 a5       	ldd	r16, Z+43	; 0x2b
   13526:	14 a5       	ldd	r17, Z+44	; 0x2c
   13528:	25 a5       	ldd	r18, Z+45	; 0x2d
   1352a:	36 a5       	ldd	r19, Z+46	; 0x2e
   1352c:	43 e0       	ldi	r20, 0x03	; 3
   1352e:	50 e0       	ldi	r21, 0x00	; 0
   13530:	61 e0       	ldi	r22, 0x01	; 1
   13532:	70 e0       	ldi	r23, 0x00	; 0
   13534:	85 e2       	ldi	r24, 0x25	; 37
   13536:	99 e1       	ldi	r25, 0x19	; 25
   13538:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   1353c:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   13540:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   13544:	07 a5       	ldd	r16, Z+47	; 0x2f
   13546:	10 a9       	ldd	r17, Z+48	; 0x30
   13548:	20 e0       	ldi	r18, 0x00	; 0
   1354a:	30 e0       	ldi	r19, 0x00	; 0
   1354c:	42 e0       	ldi	r20, 0x02	; 2
   1354e:	50 e0       	ldi	r21, 0x00	; 0
   13550:	64 e0       	ldi	r22, 0x04	; 4
   13552:	70 e0       	ldi	r23, 0x00	; 0
   13554:	85 e2       	ldi	r24, 0x25	; 37
   13556:	99 e1       	ldi	r25, 0x19	; 25
   13558:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   1355c:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   13560:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   13564:	01 a9       	ldd	r16, Z+49	; 0x31
   13566:	10 e0       	ldi	r17, 0x00	; 0
   13568:	20 e0       	ldi	r18, 0x00	; 0
   1356a:	30 e0       	ldi	r19, 0x00	; 0
   1356c:	41 e0       	ldi	r20, 0x01	; 1
   1356e:	50 e0       	ldi	r21, 0x00	; 0
   13570:	66 e0       	ldi	r22, 0x06	; 6
   13572:	70 e0       	ldi	r23, 0x00	; 0
   13574:	85 e2       	ldi	r24, 0x25	; 37
   13576:	99 e1       	ldi	r25, 0x19	; 25
   13578:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   1357c:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   13580:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   13584:	02 a9       	ldd	r16, Z+50	; 0x32
   13586:	10 e0       	ldi	r17, 0x00	; 0
   13588:	20 e0       	ldi	r18, 0x00	; 0
   1358a:	30 e0       	ldi	r19, 0x00	; 0
   1358c:	41 e0       	ldi	r20, 0x01	; 1
   1358e:	50 e0       	ldi	r21, 0x00	; 0
   13590:	67 e0       	ldi	r22, 0x07	; 7
   13592:	70 e0       	ldi	r23, 0x00	; 0
   13594:	85 e2       	ldi	r24, 0x25	; 37
   13596:	99 e1       	ldi	r25, 0x19	; 25
   13598:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   1359c:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   135a0:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   135a4:	03 a9       	ldd	r16, Z+51	; 0x33
   135a6:	14 a9       	ldd	r17, Z+52	; 0x34
   135a8:	20 e0       	ldi	r18, 0x00	; 0
   135aa:	30 e0       	ldi	r19, 0x00	; 0
   135ac:	42 e0       	ldi	r20, 0x02	; 2
   135ae:	50 e0       	ldi	r21, 0x00	; 0
   135b0:	68 e0       	ldi	r22, 0x08	; 8
   135b2:	70 e0       	ldi	r23, 0x00	; 0
   135b4:	85 e2       	ldi	r24, 0x25	; 37
   135b6:	99 e1       	ldi	r25, 0x19	; 25
   135b8:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   135bc:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   135c0:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   135c4:	05 a9       	ldd	r16, Z+53	; 0x35
   135c6:	16 a9       	ldd	r17, Z+54	; 0x36
   135c8:	20 e0       	ldi	r18, 0x00	; 0
   135ca:	30 e0       	ldi	r19, 0x00	; 0
   135cc:	42 e0       	ldi	r20, 0x02	; 2
   135ce:	50 e0       	ldi	r21, 0x00	; 0
   135d0:	6a e0       	ldi	r22, 0x0A	; 10
   135d2:	70 e0       	ldi	r23, 0x00	; 0
   135d4:	85 e2       	ldi	r24, 0x25	; 37
   135d6:	99 e1       	ldi	r25, 0x19	; 25
   135d8:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   135dc:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   135e0:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   135e4:	07 a9       	ldd	r16, Z+55	; 0x37
   135e6:	10 ad       	ldd	r17, Z+56	; 0x38
   135e8:	20 e0       	ldi	r18, 0x00	; 0
   135ea:	30 e0       	ldi	r19, 0x00	; 0
   135ec:	42 e0       	ldi	r20, 0x02	; 2
   135ee:	50 e0       	ldi	r21, 0x00	; 0
   135f0:	6c e0       	ldi	r22, 0x0C	; 12
   135f2:	70 e0       	ldi	r23, 0x00	; 0
   135f4:	85 e2       	ldi	r24, 0x25	; 37
   135f6:	99 e1       	ldi	r25, 0x19	; 25
   135f8:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   135fc:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   13600:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   13604:	01 ad       	ldd	r16, Z+57	; 0x39
   13606:	12 ad       	ldd	r17, Z+58	; 0x3a
   13608:	20 e0       	ldi	r18, 0x00	; 0
   1360a:	30 e0       	ldi	r19, 0x00	; 0
   1360c:	42 e0       	ldi	r20, 0x02	; 2
   1360e:	50 e0       	ldi	r21, 0x00	; 0
   13610:	6e e0       	ldi	r22, 0x0E	; 14
   13612:	70 e0       	ldi	r23, 0x00	; 0
   13614:	85 e2       	ldi	r24, 0x25	; 37
   13616:	99 e1       	ldi	r25, 0x19	; 25
   13618:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   1361c:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   13620:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   13624:	03 ad       	ldd	r16, Z+59	; 0x3b
   13626:	10 e0       	ldi	r17, 0x00	; 0
   13628:	20 e0       	ldi	r18, 0x00	; 0
   1362a:	30 e0       	ldi	r19, 0x00	; 0
   1362c:	41 e0       	ldi	r20, 0x01	; 1
   1362e:	50 e0       	ldi	r21, 0x00	; 0
   13630:	60 e1       	ldi	r22, 0x10	; 16
   13632:	70 e0       	ldi	r23, 0x00	; 0
   13634:	85 e2       	ldi	r24, 0x25	; 37
   13636:	99 e1       	ldi	r25, 0x19	; 25
   13638:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   1363c:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   13640:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   13644:	04 ad       	ldd	r16, Z+60	; 0x3c
   13646:	10 e0       	ldi	r17, 0x00	; 0
   13648:	20 e0       	ldi	r18, 0x00	; 0
   1364a:	30 e0       	ldi	r19, 0x00	; 0
   1364c:	41 e0       	ldi	r20, 0x01	; 1
   1364e:	50 e0       	ldi	r21, 0x00	; 0
   13650:	61 e1       	ldi	r22, 0x11	; 17
   13652:	70 e0       	ldi	r23, 0x00	; 0
   13654:	85 e2       	ldi	r24, 0x25	; 37
   13656:	99 e1       	ldi	r25, 0x19	; 25
   13658:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   1365c:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   13660:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   13664:	05 ad       	ldd	r16, Z+61	; 0x3d
   13666:	10 e0       	ldi	r17, 0x00	; 0
   13668:	20 e0       	ldi	r18, 0x00	; 0
   1366a:	30 e0       	ldi	r19, 0x00	; 0
   1366c:	41 e0       	ldi	r20, 0x01	; 1
   1366e:	50 e0       	ldi	r21, 0x00	; 0
   13670:	62 e1       	ldi	r22, 0x12	; 18
   13672:	70 e0       	ldi	r23, 0x00	; 0
   13674:	85 e2       	ldi	r24, 0x25	; 37
   13676:	99 e1       	ldi	r25, 0x19	; 25
   13678:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   1367c:	85 e2       	ldi	r24, 0x25	; 37
   1367e:	99 e1       	ldi	r25, 0x19	; 25
   13680:	1f 91       	pop	r17
   13682:	0f 91       	pop	r16
   13684:	08 95       	ret

00013686 <SS80VolumePack>:
   13686:	0f 93       	push	r16
   13688:	1f 93       	push	r17
   1368a:	2d e0       	ldi	r18, 0x0D	; 13
   1368c:	30 e0       	ldi	r19, 0x00	; 0
   1368e:	fc 01       	movw	r30, r24
   13690:	31 83       	std	Z+1, r19	; 0x01
   13692:	20 83       	st	Z, r18
   13694:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   13698:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   1369c:	fe 96       	adiw	r30, 0x3e	; 62
   1369e:	00 81       	ld	r16, Z
   136a0:	11 81       	ldd	r17, Z+1	; 0x01
   136a2:	22 81       	ldd	r18, Z+2	; 0x02
   136a4:	33 81       	ldd	r19, Z+3	; 0x03
   136a6:	43 e0       	ldi	r20, 0x03	; 3
   136a8:	50 e0       	ldi	r21, 0x00	; 0
   136aa:	60 e0       	ldi	r22, 0x00	; 0
   136ac:	70 e0       	ldi	r23, 0x00	; 0
   136ae:	88 e1       	ldi	r24, 0x18	; 24
   136b0:	99 e1       	ldi	r25, 0x19	; 25
   136b2:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   136b6:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   136ba:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   136be:	ee 5b       	subi	r30, 0xBE	; 190
   136c0:	ff 4f       	sbci	r31, 0xFF	; 255
   136c2:	00 81       	ld	r16, Z
   136c4:	10 e0       	ldi	r17, 0x00	; 0
   136c6:	20 e0       	ldi	r18, 0x00	; 0
   136c8:	30 e0       	ldi	r19, 0x00	; 0
   136ca:	41 e0       	ldi	r20, 0x01	; 1
   136cc:	50 e0       	ldi	r21, 0x00	; 0
   136ce:	63 e0       	ldi	r22, 0x03	; 3
   136d0:	70 e0       	ldi	r23, 0x00	; 0
   136d2:	88 e1       	ldi	r24, 0x18	; 24
   136d4:	99 e1       	ldi	r25, 0x19	; 25
   136d6:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   136da:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   136de:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   136e2:	ed 5b       	subi	r30, 0xBD	; 189
   136e4:	ff 4f       	sbci	r31, 0xFF	; 255
   136e6:	00 81       	ld	r16, Z
   136e8:	11 81       	ldd	r17, Z+1	; 0x01
   136ea:	20 e0       	ldi	r18, 0x00	; 0
   136ec:	30 e0       	ldi	r19, 0x00	; 0
   136ee:	42 e0       	ldi	r20, 0x02	; 2
   136f0:	50 e0       	ldi	r21, 0x00	; 0
   136f2:	64 e0       	ldi	r22, 0x04	; 4
   136f4:	70 e0       	ldi	r23, 0x00	; 0
   136f6:	88 e1       	ldi	r24, 0x18	; 24
   136f8:	99 e1       	ldi	r25, 0x19	; 25
   136fa:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   136fe:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   13702:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   13706:	eb 5b       	subi	r30, 0xBB	; 187
   13708:	ff 4f       	sbci	r31, 0xFF	; 255
   1370a:	00 81       	ld	r16, Z
   1370c:	11 81       	ldd	r17, Z+1	; 0x01
   1370e:	22 81       	ldd	r18, Z+2	; 0x02
   13710:	33 81       	ldd	r19, Z+3	; 0x03
   13712:	46 e0       	ldi	r20, 0x06	; 6
   13714:	50 e0       	ldi	r21, 0x00	; 0
   13716:	66 e0       	ldi	r22, 0x06	; 6
   13718:	70 e0       	ldi	r23, 0x00	; 0
   1371a:	88 e1       	ldi	r24, 0x18	; 24
   1371c:	99 e1       	ldi	r25, 0x19	; 25
   1371e:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   13722:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   13726:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   1372a:	e7 5b       	subi	r30, 0xB7	; 183
   1372c:	ff 4f       	sbci	r31, 0xFF	; 255
   1372e:	00 81       	ld	r16, Z
   13730:	10 e0       	ldi	r17, 0x00	; 0
   13732:	20 e0       	ldi	r18, 0x00	; 0
   13734:	30 e0       	ldi	r19, 0x00	; 0
   13736:	41 e0       	ldi	r20, 0x01	; 1
   13738:	50 e0       	ldi	r21, 0x00	; 0
   1373a:	6c e0       	ldi	r22, 0x0C	; 12
   1373c:	70 e0       	ldi	r23, 0x00	; 0
   1373e:	88 e1       	ldi	r24, 0x18	; 24
   13740:	99 e1       	ldi	r25, 0x19	; 25
   13742:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   13746:	88 e1       	ldi	r24, 0x18	; 24
   13748:	99 e1       	ldi	r25, 0x19	; 25
   1374a:	1f 91       	pop	r17
   1374c:	0f 91       	pop	r16
   1374e:	08 95       	ret

00013750 <SS80_test_extended_status>:
   13750:	9b 01       	movw	r18, r22
   13752:	43 e0       	ldi	r20, 0x03	; 3
   13754:	35 95       	asr	r19
   13756:	27 95       	ror	r18
   13758:	4a 95       	dec	r20
   1375a:	e1 f7       	brne	.-8      	; 0x13754 <SS80_test_extended_status+0x4>
   1375c:	82 0f       	add	r24, r18
   1375e:	93 1f       	adc	r25, r19
   13760:	67 70       	andi	r22, 0x07	; 7
   13762:	77 27       	eor	r23, r23
   13764:	20 e8       	ldi	r18, 0x80	; 128
   13766:	30 e0       	ldi	r19, 0x00	; 0
   13768:	02 c0       	rjmp	.+4      	; 0x1376e <SS80_test_extended_status+0x1e>
   1376a:	35 95       	asr	r19
   1376c:	27 95       	ror	r18
   1376e:	6a 95       	dec	r22
   13770:	e2 f7       	brpl	.-8      	; 0x1376a <SS80_test_extended_status+0x1a>
   13772:	fc 01       	movw	r30, r24
   13774:	80 81       	ld	r24, Z
   13776:	28 23       	and	r18, r24
   13778:	81 e0       	ldi	r24, 0x01	; 1
   1377a:	90 e0       	ldi	r25, 0x00	; 0
   1377c:	11 f4       	brne	.+4      	; 0x13782 <SS80_test_extended_status+0x32>
   1377e:	80 e0       	ldi	r24, 0x00	; 0
   13780:	90 e0       	ldi	r25, 0x00	; 0
   13782:	08 95       	ret

00013784 <SS80_display_extended_status>:
   13784:	6f 92       	push	r6
   13786:	7f 92       	push	r7
   13788:	8f 92       	push	r8
   1378a:	ef 92       	push	r14
   1378c:	ff 92       	push	r15
   1378e:	0f 93       	push	r16
   13790:	1f 93       	push	r17
   13792:	cf 93       	push	r28
   13794:	df 93       	push	r29
   13796:	fc 01       	movw	r30, r24
   13798:	ac 01       	movw	r20, r24
   1379a:	48 5f       	subi	r20, 0xF8	; 248
   1379c:	5f 4f       	sbci	r21, 0xFF	; 255
   1379e:	20 e0       	ldi	r18, 0x00	; 0
   137a0:	30 e0       	ldi	r19, 0x00	; 0
   137a2:	a1 91       	ld	r26, Z+
   137a4:	aa 23       	and	r26, r26
   137a6:	11 f0       	breq	.+4      	; 0x137ac <SS80_display_extended_status+0x28>
   137a8:	21 e0       	ldi	r18, 0x01	; 1
   137aa:	30 e0       	ldi	r19, 0x00	; 0
   137ac:	e4 17       	cp	r30, r20
   137ae:	f5 07       	cpc	r31, r21
   137b0:	c1 f7       	brne	.-16     	; 0x137a2 <SS80_display_extended_status+0x1e>
   137b2:	23 2b       	or	r18, r19
   137b4:	a1 f1       	breq	.+104    	; 0x1381e <SS80_display_extended_status+0x9a>
   137b6:	8c 01       	movw	r16, r24
   137b8:	7f 93       	push	r23
   137ba:	6f 93       	push	r22
   137bc:	81 e7       	ldi	r24, 0x71	; 113
   137be:	9e e1       	ldi	r25, 0x1E	; 30
   137c0:	1f 92       	push	r1
   137c2:	9f 93       	push	r25
   137c4:	8f 93       	push	r24
   137c6:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   137ca:	ce eb       	ldi	r28, 0xBE	; 190
   137cc:	d1 e0       	ldi	r29, 0x01	; 1
   137ce:	0f 90       	pop	r0
   137d0:	0f 90       	pop	r0
   137d2:	0f 90       	pop	r0
   137d4:	0f 90       	pop	r0
   137d6:	0f 90       	pop	r0
   137d8:	86 e6       	ldi	r24, 0x66	; 102
   137da:	9e e1       	ldi	r25, 0x1E	; 30
   137dc:	3c 01       	movw	r6, r24
   137de:	e8 80       	ld	r14, Y
   137e0:	f9 80       	ldd	r15, Y+1	; 0x01
   137e2:	9f ef       	ldi	r25, 0xFF	; 255
   137e4:	e9 16       	cp	r14, r25
   137e6:	f9 06       	cpc	r15, r25
   137e8:	d1 f0       	breq	.+52     	; 0x1381e <SS80_display_extended_status+0x9a>
   137ea:	b7 01       	movw	r22, r14
   137ec:	c8 01       	movw	r24, r16
   137ee:	b0 df       	rcall	.-160    	; 0x13750 <SS80_test_extended_status>
   137f0:	89 2b       	or	r24, r25
   137f2:	99 f0       	breq	.+38     	; 0x1381a <SS80_display_extended_status+0x96>
   137f4:	8b 81       	ldd	r24, Y+3	; 0x03
   137f6:	8f 93       	push	r24
   137f8:	8a 81       	ldd	r24, Y+2	; 0x02
   137fa:	8f 93       	push	r24
   137fc:	ff 92       	push	r15
   137fe:	ef 92       	push	r14
   13800:	1f 92       	push	r1
   13802:	7f 92       	push	r7
   13804:	6f 92       	push	r6
   13806:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1380a:	8d b7       	in	r24, 0x3d	; 61
   1380c:	9e b7       	in	r25, 0x3e	; 62
   1380e:	07 96       	adiw	r24, 0x07	; 7
   13810:	0f b6       	in	r0, 0x3f	; 63
   13812:	f8 94       	cli
   13814:	9e bf       	out	0x3e, r25	; 62
   13816:	0f be       	out	0x3f, r0	; 63
   13818:	8d bf       	out	0x3d, r24	; 61
   1381a:	24 96       	adiw	r28, 0x04	; 4
   1381c:	e0 cf       	rjmp	.-64     	; 0x137de <SS80_display_extended_status+0x5a>
   1381e:	df 91       	pop	r29
   13820:	cf 91       	pop	r28
   13822:	1f 91       	pop	r17
   13824:	0f 91       	pop	r16
   13826:	ff 90       	pop	r15
   13828:	ef 90       	pop	r14
   1382a:	8f 90       	pop	r8
   1382c:	7f 90       	pop	r7
   1382e:	6f 90       	pop	r6
   13830:	08 95       	ret

00013832 <SS80_send_status>:
   13832:	a6 e1       	ldi	r26, 0x16	; 22
   13834:	b0 e0       	ldi	r27, 0x00	; 0
   13836:	ef e1       	ldi	r30, 0x1F	; 31
   13838:	fc e9       	ldi	r31, 0x9C	; 156
   1383a:	0c 94 cd e8 	jmp	0x1d19a	; 0x1d19a <__prologue_saves__+0x18>
   1383e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   13842:	85 ff       	sbrs	r24, 5
   13844:	0a c0       	rjmp	.+20     	; 0x1385a <SS80_send_status+0x28>
   13846:	82 e5       	ldi	r24, 0x52	; 82
   13848:	9e e1       	ldi	r25, 0x1E	; 30
   1384a:	1f 92       	push	r1
   1384c:	9f 93       	push	r25
   1384e:	8f 93       	push	r24
   13850:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   13854:	0f 90       	pop	r0
   13856:	0f 90       	pop	r0
   13858:	0f 90       	pop	r0
   1385a:	ce 01       	movw	r24, r28
   1385c:	01 96       	adiw	r24, 0x01	; 1
   1385e:	7c 01       	movw	r14, r24
   13860:	84 e1       	ldi	r24, 0x14	; 20
   13862:	f7 01       	movw	r30, r14
   13864:	11 92       	st	Z+, r1
   13866:	8a 95       	dec	r24
   13868:	e9 f7       	brne	.-6      	; 0x13864 <SS80_send_status+0x32>
   1386a:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   1386e:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   13872:	86 81       	ldd	r24, Z+6	; 0x06
   13874:	20 e1       	ldi	r18, 0x10	; 16
   13876:	82 9f       	mul	r24, r18
   13878:	c0 01       	movw	r24, r0
   1387a:	11 24       	eor	r1, r1
   1387c:	95 81       	ldd	r25, Z+5	; 0x05
   1387e:	9f 70       	andi	r25, 0x0F	; 15
   13880:	89 2b       	or	r24, r25
   13882:	89 83       	std	Y+1, r24	; 0x01
   13884:	8f ef       	ldi	r24, 0xFF	; 255
   13886:	8a 83       	std	Y+2, r24	; 0x02
   13888:	83 81       	ldd	r24, Z+3	; 0x03
   1388a:	86 ff       	sbrs	r24, 6
   1388c:	02 c0       	rjmp	.+4      	; 0x13892 <SS80_send_status+0x60>
   1388e:	92 e0       	ldi	r25, 0x02	; 2
   13890:	9b 83       	std	Y+3, r25	; 0x03
   13892:	82 ff       	sbrs	r24, 2
   13894:	03 c0       	rjmp	.+6      	; 0x1389c <SS80_send_status+0x6a>
   13896:	9b 81       	ldd	r25, Y+3	; 0x03
   13898:	91 60       	ori	r25, 0x01	; 1
   1389a:	9b 83       	std	Y+3, r25	; 0x03
   1389c:	80 ff       	sbrs	r24, 0
   1389e:	02 c0       	rjmp	.+4      	; 0x138a4 <SS80_send_status+0x72>
   138a0:	82 e0       	ldi	r24, 0x02	; 2
   138a2:	8d 83       	std	Y+5, r24	; 0x05
   138a4:	83 81       	ldd	r24, Z+3	; 0x03
   138a6:	81 ff       	sbrs	r24, 1
   138a8:	03 c0       	rjmp	.+6      	; 0x138b0 <SS80_send_status+0x7e>
   138aa:	8d 81       	ldd	r24, Y+5	; 0x05
   138ac:	82 60       	ori	r24, 0x02	; 2
   138ae:	8d 83       	std	Y+5, r24	; 0x05
   138b0:	83 81       	ldd	r24, Z+3	; 0x03
   138b2:	83 ff       	sbrs	r24, 3
   138b4:	02 c0       	rjmp	.+4      	; 0x138ba <SS80_send_status+0x88>
   138b6:	88 e0       	ldi	r24, 0x08	; 8
   138b8:	8f 83       	std	Y+7, r24	; 0x07
   138ba:	83 81       	ldd	r24, Z+3	; 0x03
   138bc:	94 81       	ldd	r25, Z+4	; 0x04
   138be:	89 2b       	or	r24, r25
   138c0:	59 f4       	brne	.+22     	; 0x138d8 <SS80_send_status+0xa6>
   138c2:	07 81       	ldd	r16, Z+7	; 0x07
   138c4:	10 85       	ldd	r17, Z+8	; 0x08
   138c6:	21 85       	ldd	r18, Z+9	; 0x09
   138c8:	32 85       	ldd	r19, Z+10	; 0x0a
   138ca:	46 e0       	ldi	r20, 0x06	; 6
   138cc:	50 e0       	ldi	r21, 0x00	; 0
   138ce:	6a e0       	ldi	r22, 0x0A	; 10
   138d0:	70 e0       	ldi	r23, 0x00	; 0
   138d2:	c7 01       	movw	r24, r14
   138d4:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   138d8:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   138dc:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   138e0:	83 81       	ldd	r24, Z+3	; 0x03
   138e2:	94 81       	ldd	r25, Z+4	; 0x04
   138e4:	89 2b       	or	r24, r25
   138e6:	11 f0       	breq	.+4      	; 0x138ec <SS80_send_status+0xba>
   138e8:	81 e0       	ldi	r24, 0x01	; 1
   138ea:	82 83       	std	Z+2, r24	; 0x02
   138ec:	80 e0       	ldi	r24, 0x00	; 0
   138ee:	91 e0       	ldi	r25, 0x01	; 1
   138f0:	9e 8b       	std	Y+22, r25	; 0x16
   138f2:	8d 8b       	std	Y+21, r24	; 0x15
   138f4:	ae 01       	movw	r20, r28
   138f6:	4b 5e       	subi	r20, 0xEB	; 235
   138f8:	5f 4f       	sbci	r21, 0xFF	; 255
   138fa:	64 e1       	ldi	r22, 0x14	; 20
   138fc:	70 e0       	ldi	r23, 0x00	; 0
   138fe:	c7 01       	movw	r24, r14
   13900:	0e 94 5e 91 	call	0x122bc	; 0x122bc <gpib_write_str>
   13904:	44 97       	sbiw	r24, 0x14	; 20
   13906:	71 f0       	breq	.+28     	; 0x13924 <SS80_send_status+0xf2>
   13908:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1390c:	80 ff       	sbrs	r24, 0
   1390e:	0a c0       	rjmp	.+20     	; 0x13924 <SS80_send_status+0xf2>
   13910:	87 e3       	ldi	r24, 0x37	; 55
   13912:	9e e1       	ldi	r25, 0x1E	; 30
   13914:	1f 92       	push	r1
   13916:	9f 93       	push	r25
   13918:	8f 93       	push	r24
   1391a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1391e:	0f 90       	pop	r0
   13920:	0f 90       	pop	r0
   13922:	0f 90       	pop	r0
   13924:	8d 89       	ldd	r24, Y+21	; 0x15
   13926:	9e 89       	ldd	r25, Y+22	; 0x16
   13928:	88 27       	eor	r24, r24
   1392a:	90 7d       	andi	r25, 0xD0	; 208
   1392c:	66 96       	adiw	r28, 0x16	; 22
   1392e:	e6 e0       	ldi	r30, 0x06	; 6
   13930:	0c 94 e9 e8 	jmp	0x1d1d2	; 0x1d1d2 <__epilogue_restores__+0x18>

00013934 <SS80_describe>:
   13934:	a4 e0       	ldi	r26, 0x04	; 4
   13936:	b0 e0       	ldi	r27, 0x00	; 0
   13938:	e0 ea       	ldi	r30, 0xA0	; 160
   1393a:	fc e9       	ldi	r31, 0x9C	; 156
   1393c:	0c 94 d1 e8 	jmp	0x1d1a2	; 0x1d1a2 <__prologue_saves__+0x20>
   13940:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   13944:	85 ff       	sbrs	r24, 5
   13946:	0a c0       	rjmp	.+20     	; 0x1395c <SS80_describe+0x28>
   13948:	86 e2       	ldi	r24, 0x26	; 38
   1394a:	9e e1       	ldi	r25, 0x1E	; 30
   1394c:	1f 92       	push	r1
   1394e:	9f 93       	push	r25
   13950:	8f 93       	push	r24
   13952:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   13956:	0f 90       	pop	r0
   13958:	0f 90       	pop	r0
   1395a:	0f 90       	pop	r0
   1395c:	1c 82       	std	Y+4, r1	; 0x04
   1395e:	1b 82       	std	Y+3, r1	; 0x03
   13960:	ce 01       	movw	r24, r28
   13962:	01 96       	adiw	r24, 0x01	; 1
   13964:	88 dd       	rcall	.-1264   	; 0x13476 <SS80ControllerPack>
   13966:	69 81       	ldd	r22, Y+1	; 0x01
   13968:	7a 81       	ldd	r23, Y+2	; 0x02
   1396a:	ae 01       	movw	r20, r28
   1396c:	4d 5f       	subi	r20, 0xFD	; 253
   1396e:	5f 4f       	sbci	r21, 0xFF	; 255
   13970:	0e 94 5e 91 	call	0x122bc	; 0x122bc <gpib_write_str>
   13974:	29 81       	ldd	r18, Y+1	; 0x01
   13976:	3a 81       	ldd	r19, Y+2	; 0x02
   13978:	82 17       	cp	r24, r18
   1397a:	93 07       	cpc	r25, r19
   1397c:	39 f0       	breq	.+14     	; 0x1398c <SS80_describe+0x58>
   1397e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   13982:	80 ff       	sbrs	r24, 0
   13984:	3c c0       	rjmp	.+120    	; 0x139fe <SS80_describe+0xca>
   13986:	83 e0       	ldi	r24, 0x03	; 3
   13988:	9e e1       	ldi	r25, 0x1E	; 30
   1398a:	31 c0       	rjmp	.+98     	; 0x139ee <SS80_describe+0xba>
   1398c:	1c 82       	std	Y+4, r1	; 0x04
   1398e:	1b 82       	std	Y+3, r1	; 0x03
   13990:	ce 01       	movw	r24, r28
   13992:	01 96       	adiw	r24, 0x01	; 1
   13994:	ac dd       	rcall	.-1192   	; 0x134ee <SS80UnitPack>
   13996:	69 81       	ldd	r22, Y+1	; 0x01
   13998:	7a 81       	ldd	r23, Y+2	; 0x02
   1399a:	ae 01       	movw	r20, r28
   1399c:	4d 5f       	subi	r20, 0xFD	; 253
   1399e:	5f 4f       	sbci	r21, 0xFF	; 255
   139a0:	0e 94 5e 91 	call	0x122bc	; 0x122bc <gpib_write_str>
   139a4:	29 81       	ldd	r18, Y+1	; 0x01
   139a6:	3a 81       	ldd	r19, Y+2	; 0x02
   139a8:	82 17       	cp	r24, r18
   139aa:	93 07       	cpc	r25, r19
   139ac:	39 f0       	breq	.+14     	; 0x139bc <SS80_describe+0x88>
   139ae:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   139b2:	80 ff       	sbrs	r24, 0
   139b4:	24 c0       	rjmp	.+72     	; 0x139fe <SS80_describe+0xca>
   139b6:	86 ee       	ldi	r24, 0xE6	; 230
   139b8:	9d e1       	ldi	r25, 0x1D	; 29
   139ba:	19 c0       	rjmp	.+50     	; 0x139ee <SS80_describe+0xba>
   139bc:	80 e0       	ldi	r24, 0x00	; 0
   139be:	91 e0       	ldi	r25, 0x01	; 1
   139c0:	9c 83       	std	Y+4, r25	; 0x04
   139c2:	8b 83       	std	Y+3, r24	; 0x03
   139c4:	ce 01       	movw	r24, r28
   139c6:	01 96       	adiw	r24, 0x01	; 1
   139c8:	5e de       	rcall	.-836    	; 0x13686 <SS80VolumePack>
   139ca:	69 81       	ldd	r22, Y+1	; 0x01
   139cc:	7a 81       	ldd	r23, Y+2	; 0x02
   139ce:	ae 01       	movw	r20, r28
   139d0:	4d 5f       	subi	r20, 0xFD	; 253
   139d2:	5f 4f       	sbci	r21, 0xFF	; 255
   139d4:	0e 94 5e 91 	call	0x122bc	; 0x122bc <gpib_write_str>
   139d8:	29 81       	ldd	r18, Y+1	; 0x01
   139da:	3a 81       	ldd	r19, Y+2	; 0x02
   139dc:	82 17       	cp	r24, r18
   139de:	93 07       	cpc	r25, r19
   139e0:	99 f0       	breq	.+38     	; 0x13a08 <SS80_describe+0xd4>
   139e2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   139e6:	80 ff       	sbrs	r24, 0
   139e8:	0a c0       	rjmp	.+20     	; 0x139fe <SS80_describe+0xca>
   139ea:	87 ec       	ldi	r24, 0xC7	; 199
   139ec:	9d e1       	ldi	r25, 0x1D	; 29
   139ee:	1f 92       	push	r1
   139f0:	9f 93       	push	r25
   139f2:	8f 93       	push	r24
   139f4:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   139f8:	0f 90       	pop	r0
   139fa:	0f 90       	pop	r0
   139fc:	0f 90       	pop	r0
   139fe:	8b 81       	ldd	r24, Y+3	; 0x03
   13a00:	9c 81       	ldd	r25, Y+4	; 0x04
   13a02:	88 27       	eor	r24, r24
   13a04:	90 7d       	andi	r25, 0xD0	; 208
   13a06:	02 c0       	rjmp	.+4      	; 0x13a0c <SS80_describe+0xd8>
   13a08:	80 e0       	ldi	r24, 0x00	; 0
   13a0a:	90 e0       	ldi	r25, 0x00	; 0
   13a0c:	24 96       	adiw	r28, 0x04	; 4
   13a0e:	e2 e0       	ldi	r30, 0x02	; 2
   13a10:	0c 94 ed e8 	jmp	0x1d1da	; 0x1d1da <__epilogue_restores__+0x20>

00013a14 <SS80_Check_Unit>:
   13a14:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   13a18:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   13a1c:	88 23       	and	r24, r24
   13a1e:	d1 f0       	breq	.+52     	; 0x13a54 <SS80_Check_Unit+0x40>
   13a20:	8f 30       	cpi	r24, 0x0F	; 15
   13a22:	c1 f0       	breq	.+48     	; 0x13a54 <SS80_Check_Unit+0x40>
   13a24:	23 81       	ldd	r18, Z+3	; 0x03
   13a26:	34 81       	ldd	r19, Z+4	; 0x04
   13a28:	20 64       	ori	r18, 0x40	; 64
   13a2a:	34 83       	std	Z+4, r19	; 0x04
   13a2c:	23 83       	std	Z+3, r18	; 0x03
   13a2e:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <debuglevel>
   13a32:	90 ff       	sbrs	r25, 0
   13a34:	10 c0       	rjmp	.+32     	; 0x13a56 <SS80_Check_Unit+0x42>
   13a36:	1f 92       	push	r1
   13a38:	8f 93       	push	r24
   13a3a:	8f ea       	ldi	r24, 0xAF	; 175
   13a3c:	9d e1       	ldi	r25, 0x1D	; 29
   13a3e:	1f 92       	push	r1
   13a40:	9f 93       	push	r25
   13a42:	8f 93       	push	r24
   13a44:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   13a48:	0f 90       	pop	r0
   13a4a:	0f 90       	pop	r0
   13a4c:	0f 90       	pop	r0
   13a4e:	0f 90       	pop	r0
   13a50:	0f 90       	pop	r0
   13a52:	08 95       	ret
   13a54:	85 83       	std	Z+5, r24	; 0x05
   13a56:	08 95       	ret

00013a58 <SS80_Check_Volume>:
   13a58:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   13a5c:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   13a60:	88 23       	and	r24, r24
   13a62:	c1 f0       	breq	.+48     	; 0x13a94 <SS80_Check_Volume+0x3c>
   13a64:	23 81       	ldd	r18, Z+3	; 0x03
   13a66:	34 81       	ldd	r19, Z+4	; 0x04
   13a68:	20 64       	ori	r18, 0x40	; 64
   13a6a:	34 83       	std	Z+4, r19	; 0x04
   13a6c:	23 83       	std	Z+3, r18	; 0x03
   13a6e:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <debuglevel>
   13a72:	90 ff       	sbrs	r25, 0
   13a74:	10 c0       	rjmp	.+32     	; 0x13a96 <SS80_Check_Volume+0x3e>
   13a76:	1f 92       	push	r1
   13a78:	8f 93       	push	r24
   13a7a:	85 e9       	ldi	r24, 0x95	; 149
   13a7c:	9d e1       	ldi	r25, 0x1D	; 29
   13a7e:	1f 92       	push	r1
   13a80:	9f 93       	push	r25
   13a82:	8f 93       	push	r24
   13a84:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   13a88:	0f 90       	pop	r0
   13a8a:	0f 90       	pop	r0
   13a8c:	0f 90       	pop	r0
   13a8e:	0f 90       	pop	r0
   13a90:	0f 90       	pop	r0
   13a92:	08 95       	ret
   13a94:	16 82       	std	Z+6, r1	; 0x06
   13a96:	08 95       	ret

00013a98 <SS80_Command_State>:
   13a98:	2f 92       	push	r2
   13a9a:	3f 92       	push	r3
   13a9c:	4f 92       	push	r4
   13a9e:	6f 92       	push	r6
   13aa0:	7f 92       	push	r7
   13aa2:	8f 92       	push	r8
   13aa4:	af 92       	push	r10
   13aa6:	bf 92       	push	r11
   13aa8:	cf 92       	push	r12
   13aaa:	df 92       	push	r13
   13aac:	ef 92       	push	r14
   13aae:	ff 92       	push	r15
   13ab0:	0f 93       	push	r16
   13ab2:	1f 93       	push	r17
   13ab4:	cf 93       	push	r28
   13ab6:	df 93       	push	r29
   13ab8:	cd b7       	in	r28, 0x3d	; 61
   13aba:	de b7       	in	r29, 0x3e	; 62
   13abc:	60 97       	sbiw	r28, 0x10	; 16
   13abe:	0f b6       	in	r0, 0x3f	; 63
   13ac0:	f8 94       	cli
   13ac2:	de bf       	out	0x3e, r29	; 62
   13ac4:	0f be       	out	0x3f, r0	; 63
   13ac6:	cd bf       	out	0x3d, r28	; 61
   13ac8:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   13acc:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   13ad0:	81 81       	ldd	r24, Z+1	; 0x01
   13ad2:	90 e0       	ldi	r25, 0x00	; 0
   13ad4:	0e 94 3f 8c 	call	0x1187e	; 0x1187e <gpib_disable_PPR>
   13ad8:	80 e0       	ldi	r24, 0x00	; 0
   13ada:	91 e0       	ldi	r25, 0x01	; 1
   13adc:	9a 83       	std	Y+2, r25	; 0x02
   13ade:	89 83       	std	Y+1, r24	; 0x01
   13ae0:	ae 01       	movw	r20, r28
   13ae2:	4f 5f       	subi	r20, 0xFF	; 255
   13ae4:	5f 4f       	sbci	r21, 0xFF	; 255
   13ae6:	60 e0       	ldi	r22, 0x00	; 0
   13ae8:	72 e0       	ldi	r23, 0x02	; 2
   13aea:	8b e9       	ldi	r24, 0x9B	; 155
   13aec:	9c e1       	ldi	r25, 0x1C	; 28
   13aee:	0e 94 b0 90 	call	0x12160	; 0x12160 <gpib_read_str>
   13af2:	6c 01       	movw	r12, r24
   13af4:	89 81       	ldd	r24, Y+1	; 0x01
   13af6:	9a 81       	ldd	r25, Y+2	; 0x02
   13af8:	9c 01       	movw	r18, r24
   13afa:	22 27       	eor	r18, r18
   13afc:	30 7d       	andi	r19, 0xD0	; 208
   13afe:	23 2b       	or	r18, r19
   13b00:	79 f0       	breq	.+30     	; 0x13b20 <SS80_Command_State+0x88>
   13b02:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   13b06:	80 ff       	sbrs	r24, 0
   13b08:	21 c2       	rjmp	.+1090   	; 0x13f4c <SS80_Command_State+0x4b4>
   13b0a:	8f e6       	ldi	r24, 0x6F	; 111
   13b0c:	9d e1       	ldi	r25, 0x1D	; 29
   13b0e:	1f 92       	push	r1
   13b10:	9f 93       	push	r25
   13b12:	8f 93       	push	r24
   13b14:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   13b18:	0f 90       	pop	r0
   13b1a:	0f 90       	pop	r0
   13b1c:	0f 90       	pop	r0
   13b1e:	16 c2       	rjmp	.+1068   	; 0x13f4c <SS80_Command_State+0x4b4>
   13b20:	c1 14       	cp	r12, r1
   13b22:	d1 04       	cpc	r13, r1
   13b24:	09 f4       	brne	.+2      	; 0x13b28 <SS80_Command_State+0x90>
   13b26:	17 c2       	rjmp	.+1070   	; 0x13f56 <SS80_Command_State+0x4be>
   13b28:	90 fd       	sbrc	r25, 0
   13b2a:	0e c0       	rjmp	.+28     	; 0x13b48 <SS80_Command_State+0xb0>
   13b2c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   13b30:	80 ff       	sbrs	r24, 0
   13b32:	0a c0       	rjmp	.+20     	; 0x13b48 <SS80_Command_State+0xb0>
   13b34:	86 e5       	ldi	r24, 0x56	; 86
   13b36:	9d e1       	ldi	r25, 0x1D	; 29
   13b38:	1f 92       	push	r1
   13b3a:	9f 93       	push	r25
   13b3c:	8f 93       	push	r24
   13b3e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   13b42:	0f 90       	pop	r0
   13b44:	0f 90       	pop	r0
   13b46:	0f 90       	pop	r0
   13b48:	e1 2c       	mov	r14, r1
   13b4a:	f1 2c       	mov	r15, r1
   13b4c:	8a e5       	ldi	r24, 0x5A	; 90
   13b4e:	9c e1       	ldi	r25, 0x1C	; 28
   13b50:	9c 01       	movw	r18, r24
   13b52:	40 e0       	ldi	r20, 0x00	; 0
   13b54:	2d 83       	std	Y+5, r18	; 0x05
   13b56:	3e 83       	std	Y+6, r19	; 0x06
   13b58:	4f 83       	std	Y+7, r20	; 0x07
   13b5a:	8f e7       	ldi	r24, 0x7F	; 127
   13b5c:	9c e1       	ldi	r25, 0x1C	; 28
   13b5e:	9c 01       	movw	r18, r24
   13b60:	40 e0       	ldi	r20, 0x00	; 0
   13b62:	28 87       	std	Y+8, r18	; 0x08
   13b64:	39 87       	std	Y+9, r19	; 0x09
   13b66:	4a 87       	std	Y+10, r20	; 0x0a
   13b68:	89 e9       	ldi	r24, 0x99	; 153
   13b6a:	9c e1       	ldi	r25, 0x1C	; 28
   13b6c:	9c 01       	movw	r18, r24
   13b6e:	40 e0       	ldi	r20, 0x00	; 0
   13b70:	2b 87       	std	Y+11, r18	; 0x0b
   13b72:	3c 87       	std	Y+12, r19	; 0x0c
   13b74:	4d 87       	std	Y+13, r20	; 0x0d
   13b76:	8f ea       	ldi	r24, 0xAF	; 175
   13b78:	9c e1       	ldi	r25, 0x1C	; 28
   13b7a:	3c 01       	movw	r6, r24
   13b7c:	8d eb       	ldi	r24, 0xBD	; 189
   13b7e:	9c e1       	ldi	r25, 0x1C	; 28
   13b80:	9c 01       	movw	r18, r24
   13b82:	40 e0       	ldi	r20, 0x00	; 0
   13b84:	2e 87       	std	Y+14, r18	; 0x0e
   13b86:	3f 87       	std	Y+15, r19	; 0x0f
   13b88:	48 8b       	std	Y+16, r20	; 0x10
   13b8a:	89 ed       	ldi	r24, 0xD9	; 217
   13b8c:	9c e1       	ldi	r25, 0x1C	; 28
   13b8e:	1c 01       	movw	r2, r24
   13b90:	87 e2       	ldi	r24, 0x27	; 39
   13b92:	a8 2e       	mov	r10, r24
   13b94:	8d e1       	ldi	r24, 0x1D	; 29
   13b96:	b8 2e       	mov	r11, r24
   13b98:	87 01       	movw	r16, r14
   13b9a:	ec 14       	cp	r14, r12
   13b9c:	fd 04       	cpc	r15, r13
   13b9e:	0c f0       	brlt	.+2      	; 0x13ba2 <SS80_Command_State+0x10a>
   13ba0:	b6 c1       	rjmp	.+876    	; 0x13f0e <SS80_Command_State+0x476>
   13ba2:	0f 5f       	subi	r16, 0xFF	; 255
   13ba4:	1f 4f       	sbci	r17, 0xFF	; 255
   13ba6:	f7 01       	movw	r30, r14
   13ba8:	e5 56       	subi	r30, 0x65	; 101
   13baa:	f3 4e       	sbci	r31, 0xE3	; 227
   13bac:	80 81       	ld	r24, Z
   13bae:	28 2f       	mov	r18, r24
   13bb0:	30 e0       	ldi	r19, 0x00	; 0
   13bb2:	a9 01       	movw	r20, r18
   13bb4:	40 52       	subi	r20, 0x20	; 32
   13bb6:	51 09       	sbc	r21, r1
   13bb8:	40 31       	cpi	r20, 0x10	; 16
   13bba:	51 05       	cpc	r21, r1
   13bbc:	80 f4       	brcc	.+32     	; 0x13bde <SS80_Command_State+0x146>
   13bbe:	80 52       	subi	r24, 0x20	; 32
   13bc0:	29 df       	rcall	.-430    	; 0x13a14 <SS80_Check_Unit>
   13bc2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   13bc6:	85 ff       	sbrs	r24, 5
   13bc8:	a0 c1       	rjmp	.+832    	; 0x13f0a <SS80_Command_State+0x472>
   13bca:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   13bce:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   13bd2:	85 81       	ldd	r24, Z+5	; 0x05
   13bd4:	1f 92       	push	r1
   13bd6:	8f 93       	push	r24
   13bd8:	80 e4       	ldi	r24, 0x40	; 64
   13bda:	9d e1       	ldi	r25, 0x1D	; 29
   13bdc:	14 c0       	rjmp	.+40     	; 0x13c06 <SS80_Command_State+0x16e>
   13bde:	a9 01       	movw	r20, r18
   13be0:	40 54       	subi	r20, 0x40	; 64
   13be2:	51 09       	sbc	r21, r1
   13be4:	40 31       	cpi	r20, 0x10	; 16
   13be6:	51 05       	cpc	r21, r1
   13be8:	c8 f4       	brcc	.+50     	; 0x13c1c <SS80_Command_State+0x184>
   13bea:	80 54       	subi	r24, 0x40	; 64
   13bec:	35 df       	rcall	.-406    	; 0x13a58 <SS80_Check_Volume>
   13bee:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   13bf2:	85 ff       	sbrs	r24, 5
   13bf4:	8a c1       	rjmp	.+788    	; 0x13f0a <SS80_Command_State+0x472>
   13bf6:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   13bfa:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   13bfe:	86 81       	ldd	r24, Z+6	; 0x06
   13c00:	1f 92       	push	r1
   13c02:	8f 93       	push	r24
   13c04:	c5 01       	movw	r24, r10
   13c06:	1f 92       	push	r1
   13c08:	9f 93       	push	r25
   13c0a:	8f 93       	push	r24
   13c0c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   13c10:	0f 90       	pop	r0
   13c12:	0f 90       	pop	r0
   13c14:	0f 90       	pop	r0
   13c16:	0f 90       	pop	r0
   13c18:	0f 90       	pop	r0
   13c1a:	77 c1       	rjmp	.+750    	; 0x13f0a <SS80_Command_State+0x472>
   13c1c:	21 15       	cp	r18, r1
   13c1e:	31 05       	cpc	r19, r1
   13c20:	79 f4       	brne	.+30     	; 0x13c40 <SS80_Command_State+0x1a8>
   13c22:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   13c26:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   13c2a:	81 e0       	ldi	r24, 0x01	; 1
   13c2c:	90 e0       	ldi	r25, 0x00	; 0
   13c2e:	91 83       	std	Z+1, r25	; 0x01
   13c30:	80 83       	st	Z, r24
   13c32:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   13c36:	85 ff       	sbrs	r24, 5
   13c38:	6a c1       	rjmp	.+724    	; 0x13f0e <SS80_Command_State+0x476>
   13c3a:	8f e0       	ldi	r24, 0x0F	; 15
   13c3c:	9d e1       	ldi	r25, 0x1D	; 29
   13c3e:	0f c0       	rjmp	.+30     	; 0x13c5e <SS80_Command_State+0x1c6>
   13c40:	22 30       	cpi	r18, 0x02	; 2
   13c42:	31 05       	cpc	r19, r1
   13c44:	a9 f4       	brne	.+42     	; 0x13c70 <SS80_Command_State+0x1d8>
   13c46:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   13c4a:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   13c4e:	31 83       	std	Z+1, r19	; 0x01
   13c50:	20 83       	st	Z, r18
   13c52:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   13c56:	85 ff       	sbrs	r24, 5
   13c58:	5a c1       	rjmp	.+692    	; 0x13f0e <SS80_Command_State+0x476>
   13c5a:	86 ef       	ldi	r24, 0xF6	; 246
   13c5c:	9c e1       	ldi	r25, 0x1C	; 28
   13c5e:	1f 92       	push	r1
   13c60:	9f 93       	push	r25
   13c62:	8f 93       	push	r24
   13c64:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   13c68:	0f 90       	pop	r0
   13c6a:	0f 90       	pop	r0
   13c6c:	0f 90       	pop	r0
   13c6e:	4f c1       	rjmp	.+670    	; 0x13f0e <SS80_Command_State+0x476>
   13c70:	20 31       	cpi	r18, 0x10	; 16
   13c72:	31 05       	cpc	r19, r1
   13c74:	a1 f5       	brne	.+104    	; 0x13cde <SS80_Command_State+0x246>
   13c76:	80 91 50 19 	lds	r24, 0x1950	; 0x801950 <SS80s>
   13c7a:	90 91 51 19 	lds	r25, 0x1951	; 0x801951 <SS80s+0x1>
   13c7e:	9c 83       	std	Y+4, r25	; 0x04
   13c80:	8b 83       	std	Y+3, r24	; 0x03
   13c82:	46 e0       	ldi	r20, 0x06	; 6
   13c84:	50 e0       	ldi	r21, 0x00	; 0
   13c86:	b8 01       	movw	r22, r16
   13c88:	8b e9       	ldi	r24, 0x9B	; 155
   13c8a:	9c e1       	ldi	r25, 0x1C	; 28
   13c8c:	0e 94 02 b5 	call	0x16a04	; 0x16a04 <B2V_MSB>
   13c90:	eb 81       	ldd	r30, Y+3	; 0x03
   13c92:	fc 81       	ldd	r31, Y+4	; 0x04
   13c94:	67 83       	std	Z+7, r22	; 0x07
   13c96:	70 87       	std	Z+8, r23	; 0x08
   13c98:	81 87       	std	Z+9, r24	; 0x09
   13c9a:	92 87       	std	Z+10, r25	; 0x0a
   13c9c:	87 01       	movw	r16, r14
   13c9e:	09 5f       	subi	r16, 0xF9	; 249
   13ca0:	1f 4f       	sbci	r17, 0xFF	; 255
   13ca2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   13ca6:	85 ff       	sbrs	r24, 5
   13ca8:	30 c1       	rjmp	.+608    	; 0x13f0a <SS80_Command_State+0x472>
   13caa:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   13cae:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   13cb2:	a0 91 52 19 	lds	r26, 0x1952	; 0x801952 <SS80p>
   13cb6:	b0 91 53 19 	lds	r27, 0x1953	; 0x801953 <SS80p+0x1>
   13cba:	9f 96       	adiw	r26, 0x2f	; 47
   13cbc:	0d 90       	ld	r0, X+
   13cbe:	bc 91       	ld	r27, X
   13cc0:	a0 2d       	mov	r26, r0
   13cc2:	27 81       	ldd	r18, Z+7	; 0x07
   13cc4:	30 85       	ldd	r19, Z+8	; 0x08
   13cc6:	41 85       	ldd	r20, Z+9	; 0x09
   13cc8:	52 85       	ldd	r21, Z+10	; 0x0a
   13cca:	0e 94 a1 e8 	call	0x1d142	; 0x1d142 <__muluhisi3>
   13cce:	9f 93       	push	r25
   13cd0:	8f 93       	push	r24
   13cd2:	7f 93       	push	r23
   13cd4:	6f 93       	push	r22
   13cd6:	1f 92       	push	r1
   13cd8:	3f 92       	push	r3
   13cda:	2f 92       	push	r2
   13cdc:	2e c0       	rjmp	.+92     	; 0x13d3a <SS80_Command_State+0x2a2>
   13cde:	28 31       	cpi	r18, 0x18	; 24
   13ce0:	31 05       	cpc	r19, r1
   13ce2:	99 f5       	brne	.+102    	; 0x13d4a <SS80_Command_State+0x2b2>
   13ce4:	80 91 50 19 	lds	r24, 0x1950	; 0x801950 <SS80s>
   13ce8:	90 91 51 19 	lds	r25, 0x1951	; 0x801951 <SS80s+0x1>
   13cec:	9c 83       	std	Y+4, r25	; 0x04
   13cee:	8b 83       	std	Y+3, r24	; 0x03
   13cf0:	44 e0       	ldi	r20, 0x04	; 4
   13cf2:	50 e0       	ldi	r21, 0x00	; 0
   13cf4:	b8 01       	movw	r22, r16
   13cf6:	8b e9       	ldi	r24, 0x9B	; 155
   13cf8:	9c e1       	ldi	r25, 0x1C	; 28
   13cfa:	0e 94 02 b5 	call	0x16a04	; 0x16a04 <B2V_MSB>
   13cfe:	eb 81       	ldd	r30, Y+3	; 0x03
   13d00:	fc 81       	ldd	r31, Y+4	; 0x04
   13d02:	63 87       	std	Z+11, r22	; 0x0b
   13d04:	74 87       	std	Z+12, r23	; 0x0c
   13d06:	85 87       	std	Z+13, r24	; 0x0d
   13d08:	96 87       	std	Z+14, r25	; 0x0e
   13d0a:	87 01       	movw	r16, r14
   13d0c:	0b 5f       	subi	r16, 0xFB	; 251
   13d0e:	1f 4f       	sbci	r17, 0xFF	; 255
   13d10:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   13d14:	85 ff       	sbrs	r24, 5
   13d16:	f9 c0       	rjmp	.+498    	; 0x13f0a <SS80_Command_State+0x472>
   13d18:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   13d1c:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   13d20:	86 85       	ldd	r24, Z+14	; 0x0e
   13d22:	8f 93       	push	r24
   13d24:	85 85       	ldd	r24, Z+13	; 0x0d
   13d26:	8f 93       	push	r24
   13d28:	84 85       	ldd	r24, Z+12	; 0x0c
   13d2a:	8f 93       	push	r24
   13d2c:	83 85       	ldd	r24, Z+11	; 0x0b
   13d2e:	8f 93       	push	r24
   13d30:	1f 92       	push	r1
   13d32:	ff 85       	ldd	r31, Y+15	; 0x0f
   13d34:	ff 93       	push	r31
   13d36:	2e 85       	ldd	r18, Y+14	; 0x0e
   13d38:	2f 93       	push	r18
   13d3a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   13d3e:	0f b6       	in	r0, 0x3f	; 63
   13d40:	f8 94       	cli
   13d42:	de bf       	out	0x3e, r29	; 62
   13d44:	0f be       	out	0x3f, r0	; 63
   13d46:	cd bf       	out	0x3d, r28	; 61
   13d48:	e0 c0       	rjmp	.+448    	; 0x13f0a <SS80_Command_State+0x472>
   13d4a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   13d4e:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   13d52:	24 33       	cpi	r18, 0x34	; 52
   13d54:	31 05       	cpc	r19, r1
   13d56:	31 f4       	brne	.+12     	; 0x13d64 <SS80_Command_State+0x2cc>
   13d58:	85 ff       	sbrs	r24, 5
   13d5a:	d7 c0       	rjmp	.+430    	; 0x13f0a <SS80_Command_State+0x472>
   13d5c:	1f 92       	push	r1
   13d5e:	7f 92       	push	r7
   13d60:	6f 92       	push	r6
   13d62:	2c c0       	rjmp	.+88     	; 0x13dbc <SS80_Command_State+0x324>
   13d64:	29 33       	cpi	r18, 0x39	; 57
   13d66:	31 05       	cpc	r19, r1
   13d68:	59 f4       	brne	.+22     	; 0x13d80 <SS80_Command_State+0x2e8>
   13d6a:	87 01       	movw	r16, r14
   13d6c:	0d 5f       	subi	r16, 0xFD	; 253
   13d6e:	1f 4f       	sbci	r17, 0xFF	; 255
   13d70:	85 ff       	sbrs	r24, 5
   13d72:	cb c0       	rjmp	.+406    	; 0x13f0a <SS80_Command_State+0x472>
   13d74:	1f 92       	push	r1
   13d76:	9c 85       	ldd	r25, Y+12	; 0x0c
   13d78:	9f 93       	push	r25
   13d7a:	eb 85       	ldd	r30, Y+11	; 0x0b
   13d7c:	ef 93       	push	r30
   13d7e:	1e c0       	rjmp	.+60     	; 0x13dbc <SS80_Command_State+0x324>
   13d80:	2b 33       	cpi	r18, 0x3B	; 59
   13d82:	31 05       	cpc	r19, r1
   13d84:	59 f4       	brne	.+22     	; 0x13d9c <SS80_Command_State+0x304>
   13d86:	87 01       	movw	r16, r14
   13d88:	0e 5f       	subi	r16, 0xFE	; 254
   13d8a:	1f 4f       	sbci	r17, 0xFF	; 255
   13d8c:	85 ff       	sbrs	r24, 5
   13d8e:	bd c0       	rjmp	.+378    	; 0x13f0a <SS80_Command_State+0x472>
   13d90:	1f 92       	push	r1
   13d92:	f9 85       	ldd	r31, Y+9	; 0x09
   13d94:	ff 93       	push	r31
   13d96:	28 85       	ldd	r18, Y+8	; 0x08
   13d98:	2f 93       	push	r18
   13d9a:	10 c0       	rjmp	.+32     	; 0x13dbc <SS80_Command_State+0x324>
   13d9c:	28 34       	cpi	r18, 0x48	; 72
   13d9e:	31 05       	cpc	r19, r1
   13da0:	99 f4       	brne	.+38     	; 0x13dc8 <SS80_Command_State+0x330>
   13da2:	87 01       	movw	r16, r14
   13da4:	0e 5f       	subi	r16, 0xFE	; 254
   13da6:	1f 4f       	sbci	r17, 0xFF	; 255
   13da8:	80 73       	andi	r24, 0x30	; 48
   13daa:	99 27       	eor	r25, r25
   13dac:	89 2b       	or	r24, r25
   13dae:	09 f4       	brne	.+2      	; 0x13db2 <SS80_Command_State+0x31a>
   13db0:	ac c0       	rjmp	.+344    	; 0x13f0a <SS80_Command_State+0x472>
   13db2:	1f 92       	push	r1
   13db4:	3e 81       	ldd	r19, Y+6	; 0x06
   13db6:	3f 93       	push	r19
   13db8:	4d 81       	ldd	r20, Y+5	; 0x05
   13dba:	4f 93       	push	r20
   13dbc:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   13dc0:	0f 90       	pop	r0
   13dc2:	0f 90       	pop	r0
   13dc4:	0f 90       	pop	r0
   13dc6:	a1 c0       	rjmp	.+322    	; 0x13f0a <SS80_Command_State+0x472>
   13dc8:	24 30       	cpi	r18, 0x04	; 4
   13dca:	31 05       	cpc	r19, r1
   13dcc:	41 f4       	brne	.+16     	; 0x13dde <SS80_Command_State+0x346>
   13dce:	80 73       	andi	r24, 0x30	; 48
   13dd0:	99 27       	eor	r25, r25
   13dd2:	89 2b       	or	r24, r25
   13dd4:	09 f4       	brne	.+2      	; 0x13dd8 <SS80_Command_State+0x340>
   13dd6:	9b c0       	rjmp	.+310    	; 0x13f0e <SS80_Command_State+0x476>
   13dd8:	89 e3       	ldi	r24, 0x39	; 57
   13dda:	9c e1       	ldi	r25, 0x1C	; 28
   13ddc:	40 cf       	rjmp	.-384    	; 0x13c5e <SS80_Command_State+0x1c6>
   13dde:	2e 30       	cpi	r18, 0x0E	; 14
   13de0:	31 05       	cpc	r19, r1
   13de2:	29 f4       	brne	.+10     	; 0x13dee <SS80_Command_State+0x356>
   13de4:	85 ff       	sbrs	r24, 5
   13de6:	93 c0       	rjmp	.+294    	; 0x13f0e <SS80_Command_State+0x476>
   13de8:	83 e2       	ldi	r24, 0x23	; 35
   13dea:	9c e1       	ldi	r25, 0x1C	; 28
   13dec:	38 cf       	rjmp	.-400    	; 0x13c5e <SS80_Command_State+0x1c6>
   13dee:	2f 30       	cpi	r18, 0x0F	; 15
   13df0:	31 05       	cpc	r19, r1
   13df2:	29 f4       	brne	.+10     	; 0x13dfe <SS80_Command_State+0x366>
   13df4:	85 ff       	sbrs	r24, 5
   13df6:	8b c0       	rjmp	.+278    	; 0x13f0e <SS80_Command_State+0x476>
   13df8:	86 e0       	ldi	r24, 0x06	; 6
   13dfa:	9c e1       	ldi	r25, 0x1C	; 28
   13dfc:	30 cf       	rjmp	.-416    	; 0x13c5e <SS80_Command_State+0x1c6>
   13dfe:	21 33       	cpi	r18, 0x31	; 49
   13e00:	31 05       	cpc	r19, r1
   13e02:	41 f4       	brne	.+16     	; 0x13e14 <SS80_Command_State+0x37c>
   13e04:	87 01       	movw	r16, r14
   13e06:	0d 5f       	subi	r16, 0xFD	; 253
   13e08:	1f 4f       	sbci	r17, 0xFF	; 255
   13e0a:	85 ff       	sbrs	r24, 5
   13e0c:	80 c0       	rjmp	.+256    	; 0x13f0e <SS80_Command_State+0x476>
   13e0e:	8a ee       	ldi	r24, 0xEA	; 234
   13e10:	9b e1       	ldi	r25, 0x1B	; 27
   13e12:	25 cf       	rjmp	.-438    	; 0x13c5e <SS80_Command_State+0x1c6>
   13e14:	25 33       	cpi	r18, 0x35	; 53
   13e16:	31 05       	cpc	r19, r1
   13e18:	69 f4       	brne	.+26     	; 0x13e34 <SS80_Command_State+0x39c>
   13e1a:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   13e1e:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   13e22:	24 e0       	ldi	r18, 0x04	; 4
   13e24:	30 e0       	ldi	r19, 0x00	; 0
   13e26:	31 83       	std	Z+1, r19	; 0x01
   13e28:	20 83       	st	Z, r18
   13e2a:	85 ff       	sbrs	r24, 5
   13e2c:	70 c0       	rjmp	.+224    	; 0x13f0e <SS80_Command_State+0x476>
   13e2e:	89 ed       	ldi	r24, 0xD9	; 217
   13e30:	9b e1       	ldi	r25, 0x1B	; 27
   13e32:	15 cf       	rjmp	.-470    	; 0x13c5e <SS80_Command_State+0x1c6>
   13e34:	27 33       	cpi	r18, 0x37	; 55
   13e36:	31 05       	cpc	r19, r1
   13e38:	59 f4       	brne	.+22     	; 0x13e50 <SS80_Command_State+0x3b8>
   13e3a:	87 01       	movw	r16, r14
   13e3c:	0d 5f       	subi	r16, 0xFD	; 253
   13e3e:	1f 4f       	sbci	r17, 0xFF	; 255
   13e40:	80 73       	andi	r24, 0x30	; 48
   13e42:	99 27       	eor	r25, r25
   13e44:	89 2b       	or	r24, r25
   13e46:	09 f4       	brne	.+2      	; 0x13e4a <SS80_Command_State+0x3b2>
   13e48:	62 c0       	rjmp	.+196    	; 0x13f0e <SS80_Command_State+0x476>
   13e4a:	8b eb       	ldi	r24, 0xBB	; 187
   13e4c:	9b e1       	ldi	r25, 0x1B	; 27
   13e4e:	07 cf       	rjmp	.-498    	; 0x13c5e <SS80_Command_State+0x1c6>
   13e50:	2e 33       	cpi	r18, 0x3E	; 62
   13e52:	31 05       	cpc	r19, r1
   13e54:	c1 f4       	brne	.+48     	; 0x13e86 <SS80_Command_State+0x3ee>
   13e56:	80 73       	andi	r24, 0x30	; 48
   13e58:	99 27       	eor	r25, r25
   13e5a:	89 2b       	or	r24, r25
   13e5c:	81 f0       	breq	.+32     	; 0x13e7e <SS80_Command_State+0x3e6>
   13e5e:	8c e9       	ldi	r24, 0x9C	; 156
   13e60:	9b e1       	ldi	r25, 0x1B	; 27
   13e62:	1f 92       	push	r1
   13e64:	9f 93       	push	r25
   13e66:	8f 93       	push	r24
   13e68:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   13e6c:	64 ec       	ldi	r22, 0xC4	; 196
   13e6e:	7d e0       	ldi	r23, 0x0D	; 13
   13e70:	c8 01       	movw	r24, r16
   13e72:	85 56       	subi	r24, 0x65	; 101
   13e74:	93 4e       	sbci	r25, 0xE3	; 227
   13e76:	86 dc       	rcall	.-1780   	; 0x13784 <SS80_display_extended_status>
   13e78:	0f 90       	pop	r0
   13e7a:	0f 90       	pop	r0
   13e7c:	0f 90       	pop	r0
   13e7e:	87 01       	movw	r16, r14
   13e80:	07 5f       	subi	r16, 0xF7	; 247
   13e82:	1f 4f       	sbci	r17, 0xFF	; 255
   13e84:	44 c0       	rjmp	.+136    	; 0x13f0e <SS80_Command_State+0x476>
   13e86:	2c 34       	cpi	r18, 0x4C	; 76
   13e88:	31 05       	cpc	r19, r1
   13e8a:	39 f4       	brne	.+14     	; 0x13e9a <SS80_Command_State+0x402>
   13e8c:	80 73       	andi	r24, 0x30	; 48
   13e8e:	99 27       	eor	r25, r25
   13e90:	89 2b       	or	r24, r25
   13e92:	e9 f1       	breq	.+122    	; 0x13f0e <SS80_Command_State+0x476>
   13e94:	81 e8       	ldi	r24, 0x81	; 129
   13e96:	9b e1       	ldi	r25, 0x1B	; 27
   13e98:	e2 ce       	rjmp	.-572    	; 0x13c5e <SS80_Command_State+0x1c6>
   13e9a:	2d 34       	cpi	r18, 0x4D	; 77
   13e9c:	31 05       	cpc	r19, r1
   13e9e:	39 f4       	brne	.+14     	; 0x13eae <SS80_Command_State+0x416>
   13ea0:	80 73       	andi	r24, 0x30	; 48
   13ea2:	99 27       	eor	r25, r25
   13ea4:	89 2b       	or	r24, r25
   13ea6:	99 f1       	breq	.+102    	; 0x13f0e <SS80_Command_State+0x476>
   13ea8:	88 e6       	ldi	r24, 0x68	; 104
   13eaa:	9b e1       	ldi	r25, 0x1B	; 27
   13eac:	d8 ce       	rjmp	.-592    	; 0x13c5e <SS80_Command_State+0x1c6>
   13eae:	2d 30       	cpi	r18, 0x0D	; 13
   13eb0:	31 05       	cpc	r19, r1
   13eb2:	69 f4       	brne	.+26     	; 0x13ece <SS80_Command_State+0x436>
   13eb4:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   13eb8:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   13ebc:	23 e0       	ldi	r18, 0x03	; 3
   13ebe:	30 e0       	ldi	r19, 0x00	; 0
   13ec0:	31 83       	std	Z+1, r19	; 0x01
   13ec2:	20 83       	st	Z, r18
   13ec4:	85 ff       	sbrs	r24, 5
   13ec6:	23 c0       	rjmp	.+70     	; 0x13f0e <SS80_Command_State+0x476>
   13ec8:	81 e5       	ldi	r24, 0x51	; 81
   13eca:	9b e1       	ldi	r25, 0x1B	; 27
   13ecc:	c8 ce       	rjmp	.-624    	; 0x13c5e <SS80_Command_State+0x1c6>
   13ece:	23 33       	cpi	r18, 0x33	; 51
   13ed0:	31 05       	cpc	r19, r1
   13ed2:	51 f4       	brne	.+20     	; 0x13ee8 <SS80_Command_State+0x450>
   13ed4:	87 01       	movw	r16, r14
   13ed6:	0c 5f       	subi	r16, 0xFC	; 252
   13ed8:	1f 4f       	sbci	r17, 0xFF	; 255
   13eda:	80 73       	andi	r24, 0x30	; 48
   13edc:	99 27       	eor	r25, r25
   13ede:	89 2b       	or	r24, r25
   13ee0:	b1 f0       	breq	.+44     	; 0x13f0e <SS80_Command_State+0x476>
   13ee2:	80 e3       	ldi	r24, 0x30	; 48
   13ee4:	9b e1       	ldi	r25, 0x1B	; 27
   13ee6:	bb ce       	rjmp	.-650    	; 0x13c5e <SS80_Command_State+0x1c6>
   13ee8:	80 ff       	sbrs	r24, 0
   13eea:	28 c0       	rjmp	.+80     	; 0x13f3c <SS80_Command_State+0x4a4>
   13eec:	3f 93       	push	r19
   13eee:	2f 93       	push	r18
   13ef0:	80 e1       	ldi	r24, 0x10	; 16
   13ef2:	9b e1       	ldi	r25, 0x1B	; 27
   13ef4:	1f 92       	push	r1
   13ef6:	9f 93       	push	r25
   13ef8:	8f 93       	push	r24
   13efa:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   13efe:	0f 90       	pop	r0
   13f00:	0f 90       	pop	r0
   13f02:	0f 90       	pop	r0
   13f04:	0f 90       	pop	r0
   13f06:	0f 90       	pop	r0
   13f08:	02 c0       	rjmp	.+4      	; 0x13f0e <SS80_Command_State+0x476>
   13f0a:	78 01       	movw	r14, r16
   13f0c:	45 ce       	rjmp	.-886    	; 0x13b98 <SS80_Command_State+0x100>
   13f0e:	0c 15       	cp	r16, r12
   13f10:	1d 05       	cpc	r17, r13
   13f12:	a1 f0       	breq	.+40     	; 0x13f3c <SS80_Command_State+0x4a4>
   13f14:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   13f18:	80 ff       	sbrs	r24, 0
   13f1a:	10 c0       	rjmp	.+32     	; 0x13f3c <SS80_Command_State+0x4a4>
   13f1c:	df 92       	push	r13
   13f1e:	cf 92       	push	r12
   13f20:	1f 93       	push	r17
   13f22:	0f 93       	push	r16
   13f24:	88 ed       	ldi	r24, 0xD8	; 216
   13f26:	9a e1       	ldi	r25, 0x1A	; 26
   13f28:	1f 92       	push	r1
   13f2a:	9f 93       	push	r25
   13f2c:	8f 93       	push	r24
   13f2e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   13f32:	0f b6       	in	r0, 0x3f	; 63
   13f34:	f8 94       	cli
   13f36:	de bf       	out	0x3e, r29	; 62
   13f38:	0f be       	out	0x3f, r0	; 63
   13f3a:	cd bf       	out	0x3d, r28	; 61
   13f3c:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   13f40:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   13f44:	81 81       	ldd	r24, Z+1	; 0x01
   13f46:	90 e0       	ldi	r25, 0x00	; 0
   13f48:	0e 94 0e 8c 	call	0x1181c	; 0x1181c <gpib_enable_PPR>
   13f4c:	89 81       	ldd	r24, Y+1	; 0x01
   13f4e:	9a 81       	ldd	r25, Y+2	; 0x02
   13f50:	88 27       	eor	r24, r24
   13f52:	90 7d       	andi	r25, 0xD0	; 208
   13f54:	02 c0       	rjmp	.+4      	; 0x13f5a <SS80_Command_State+0x4c2>
   13f56:	80 e0       	ldi	r24, 0x00	; 0
   13f58:	90 e0       	ldi	r25, 0x00	; 0
   13f5a:	60 96       	adiw	r28, 0x10	; 16
   13f5c:	0f b6       	in	r0, 0x3f	; 63
   13f5e:	f8 94       	cli
   13f60:	de bf       	out	0x3e, r29	; 62
   13f62:	0f be       	out	0x3f, r0	; 63
   13f64:	cd bf       	out	0x3d, r28	; 61
   13f66:	df 91       	pop	r29
   13f68:	cf 91       	pop	r28
   13f6a:	1f 91       	pop	r17
   13f6c:	0f 91       	pop	r16
   13f6e:	ff 90       	pop	r15
   13f70:	ef 90       	pop	r14
   13f72:	df 90       	pop	r13
   13f74:	cf 90       	pop	r12
   13f76:	bf 90       	pop	r11
   13f78:	af 90       	pop	r10
   13f7a:	8f 90       	pop	r8
   13f7c:	7f 90       	pop	r7
   13f7e:	6f 90       	pop	r6
   13f80:	4f 90       	pop	r4
   13f82:	3f 90       	pop	r3
   13f84:	2f 90       	pop	r2
   13f86:	08 95       	ret

00013f88 <SS80_cmd_seek>:
   13f88:	a0 e0       	ldi	r26, 0x00	; 0
   13f8a:	b0 e0       	ldi	r27, 0x00	; 0
   13f8c:	ea ec       	ldi	r30, 0xCA	; 202
   13f8e:	ff e9       	ldi	r31, 0x9F	; 159
   13f90:	0c 94 c3 e8 	jmp	0x1d186	; 0x1d186 <__prologue_saves__+0x4>
   13f94:	c0 91 50 19 	lds	r28, 0x1950	; 0x801950 <SS80s>
   13f98:	d0 91 51 19 	lds	r29, 0x1951	; 0x801951 <SS80s+0x1>
   13f9c:	8f 80       	ldd	r8, Y+7	; 0x07
   13f9e:	98 84       	ldd	r9, Y+8	; 0x08
   13fa0:	a9 84       	ldd	r10, Y+9	; 0x09
   13fa2:	ba 84       	ldd	r11, Y+10	; 0x0a
   13fa4:	00 91 52 19 	lds	r16, 0x1952	; 0x801952 <SS80p>
   13fa8:	10 91 53 19 	lds	r17, 0x1953	; 0x801953 <SS80p+0x1>
   13fac:	f8 01       	movw	r30, r16
   13fae:	c7 a4       	ldd	r12, Z+47	; 0x2f
   13fb0:	d0 a8       	ldd	r13, Z+48	; 0x30
   13fb2:	e1 2c       	mov	r14, r1
   13fb4:	f1 2c       	mov	r15, r1
   13fb6:	6b 85       	ldd	r22, Y+11	; 0x0b
   13fb8:	7c 85       	ldd	r23, Y+12	; 0x0c
   13fba:	8d 85       	ldd	r24, Y+13	; 0x0d
   13fbc:	9e 85       	ldd	r25, Y+14	; 0x0e
   13fbe:	a7 01       	movw	r20, r14
   13fc0:	96 01       	movw	r18, r12
   13fc2:	0e 94 54 e8 	call	0x1d0a8	; 0x1d0a8 <__udivmodsi4>
   13fc6:	da 01       	movw	r26, r20
   13fc8:	c9 01       	movw	r24, r18
   13fca:	88 0d       	add	r24, r8
   13fcc:	99 1d       	adc	r25, r9
   13fce:	aa 1d       	adc	r26, r10
   13fd0:	bb 1d       	adc	r27, r11
   13fd2:	f8 01       	movw	r30, r16
   13fd4:	eb 5b       	subi	r30, 0xBB	; 187
   13fd6:	ff 4f       	sbci	r31, 0xFF	; 255
   13fd8:	40 80       	ld	r4, Z
   13fda:	51 80       	ldd	r5, Z+1	; 0x01
   13fdc:	62 80       	ldd	r6, Z+2	; 0x02
   13fde:	73 80       	ldd	r7, Z+3	; 0x03
   13fe0:	40 91 b0 01 	lds	r20, 0x01B0	; 0x8001b0 <debuglevel>
   13fe4:	50 91 b1 01 	lds	r21, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   13fe8:	48 16       	cp	r4, r24
   13fea:	59 06       	cpc	r5, r25
   13fec:	6a 06       	cpc	r6, r26
   13fee:	7b 06       	cpc	r7, r27
   13ff0:	20 f5       	brcc	.+72     	; 0x1403a <SS80_cmd_seek+0xb2>
   13ff2:	81 e0       	ldi	r24, 0x01	; 1
   13ff4:	8a 83       	std	Y+2, r24	; 0x02
   13ff6:	8b 81       	ldd	r24, Y+3	; 0x03
   13ff8:	9c 81       	ldd	r25, Y+4	; 0x04
   13ffa:	84 60       	ori	r24, 0x04	; 4
   13ffc:	9c 83       	std	Y+4, r25	; 0x04
   13ffe:	8b 83       	std	Y+3, r24	; 0x03
   14000:	40 ff       	sbrs	r20, 0
   14002:	3c c0       	rjmp	.+120    	; 0x1407c <SS80_cmd_seek+0xf4>
   14004:	f8 01       	movw	r30, r16
   14006:	a7 a5       	ldd	r26, Z+47	; 0x2f
   14008:	b0 a9       	ldd	r27, Z+48	; 0x30
   1400a:	a5 01       	movw	r20, r10
   1400c:	94 01       	movw	r18, r8
   1400e:	0e 94 a1 e8 	call	0x1d142	; 0x1d142 <__muluhisi3>
   14012:	9f 93       	push	r25
   14014:	8f 93       	push	r24
   14016:	7f 93       	push	r23
   14018:	6f 93       	push	r22
   1401a:	85 e9       	ldi	r24, 0x95	; 149
   1401c:	99 e1       	ldi	r25, 0x19	; 25
   1401e:	1f 92       	push	r1
   14020:	9f 93       	push	r25
   14022:	8f 93       	push	r24
   14024:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   14028:	8d b7       	in	r24, 0x3d	; 61
   1402a:	9e b7       	in	r25, 0x3e	; 62
   1402c:	07 96       	adiw	r24, 0x07	; 7
   1402e:	0f b6       	in	r0, 0x3f	; 63
   14030:	f8 94       	cli
   14032:	9e bf       	out	0x3e, r25	; 62
   14034:	0f be       	out	0x3f, r0	; 63
   14036:	8d bf       	out	0x3d, r24	; 61
   14038:	21 c0       	rjmp	.+66     	; 0x1407c <SS80_cmd_seek+0xf4>
   1403a:	ca 01       	movw	r24, r20
   1403c:	80 72       	andi	r24, 0x20	; 32
   1403e:	99 27       	eor	r25, r25
   14040:	45 ff       	sbrs	r20, 5
   14042:	1e c0       	rjmp	.+60     	; 0x14080 <SS80_cmd_seek+0xf8>
   14044:	a5 01       	movw	r20, r10
   14046:	94 01       	movw	r18, r8
   14048:	c7 01       	movw	r24, r14
   1404a:	b6 01       	movw	r22, r12
   1404c:	0e 94 12 e8 	call	0x1d024	; 0x1d024 <__mulsi3>
   14050:	9f 93       	push	r25
   14052:	8f 93       	push	r24
   14054:	7f 93       	push	r23
   14056:	6f 93       	push	r22
   14058:	81 e8       	ldi	r24, 0x81	; 129
   1405a:	99 e1       	ldi	r25, 0x19	; 25
   1405c:	1f 92       	push	r1
   1405e:	9f 93       	push	r25
   14060:	8f 93       	push	r24
   14062:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   14066:	ed b7       	in	r30, 0x3d	; 61
   14068:	fe b7       	in	r31, 0x3e	; 62
   1406a:	37 96       	adiw	r30, 0x07	; 7
   1406c:	0f b6       	in	r0, 0x3f	; 63
   1406e:	f8 94       	cli
   14070:	fe bf       	out	0x3e, r31	; 62
   14072:	0f be       	out	0x3f, r0	; 63
   14074:	ed bf       	out	0x3d, r30	; 61
   14076:	80 e0       	ldi	r24, 0x00	; 0
   14078:	90 e0       	ldi	r25, 0x00	; 0
   1407a:	02 c0       	rjmp	.+4      	; 0x14080 <SS80_cmd_seek+0xf8>
   1407c:	81 e0       	ldi	r24, 0x01	; 1
   1407e:	90 e0       	ldi	r25, 0x00	; 0
   14080:	cd b7       	in	r28, 0x3d	; 61
   14082:	de b7       	in	r29, 0x3e	; 62
   14084:	e0 e1       	ldi	r30, 0x10	; 16
   14086:	0c 94 df e8 	jmp	0x1d1be	; 0x1d1be <__epilogue_restores__+0x4>

0001408a <SS80_locate_and_write>:
   1408a:	a8 e0       	ldi	r26, 0x08	; 8
   1408c:	b0 e0       	ldi	r27, 0x00	; 0
   1408e:	eb e4       	ldi	r30, 0x4B	; 75
   14090:	f0 ea       	ldi	r31, 0xA0	; 160
   14092:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__prologue_saves__>
   14096:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   1409a:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   1409e:	a0 91 52 19 	lds	r26, 0x1952	; 0x801952 <SS80p>
   140a2:	b0 91 53 19 	lds	r27, 0x1953	; 0x801953 <SS80p+0x1>
   140a6:	9f 96       	adiw	r26, 0x2f	; 47
   140a8:	0d 90       	ld	r0, X+
   140aa:	bc 91       	ld	r27, X
   140ac:	a0 2d       	mov	r26, r0
   140ae:	27 81       	ldd	r18, Z+7	; 0x07
   140b0:	30 85       	ldd	r19, Z+8	; 0x08
   140b2:	41 85       	ldd	r20, Z+9	; 0x09
   140b4:	52 85       	ldd	r21, Z+10	; 0x0a
   140b6:	0e 94 a1 e8 	call	0x1d142	; 0x1d142 <__muluhisi3>
   140ba:	4b 01       	movw	r8, r22
   140bc:	5c 01       	movw	r10, r24
   140be:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   140c2:	85 ff       	sbrs	r24, 5
   140c4:	18 c0       	rjmp	.+48     	; 0x140f6 <SS80_locate_and_write+0x6c>
   140c6:	86 85       	ldd	r24, Z+14	; 0x0e
   140c8:	8f 93       	push	r24
   140ca:	85 85       	ldd	r24, Z+13	; 0x0d
   140cc:	8f 93       	push	r24
   140ce:	84 85       	ldd	r24, Z+12	; 0x0c
   140d0:	8f 93       	push	r24
   140d2:	83 85       	ldd	r24, Z+11	; 0x0b
   140d4:	8f 93       	push	r24
   140d6:	bf 92       	push	r11
   140d8:	af 92       	push	r10
   140da:	9f 92       	push	r9
   140dc:	8f 92       	push	r8
   140de:	86 e1       	ldi	r24, 0x16	; 22
   140e0:	9f e1       	ldi	r25, 0x1F	; 31
   140e2:	1f 92       	push	r1
   140e4:	9f 93       	push	r25
   140e6:	8f 93       	push	r24
   140e8:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   140ec:	0f b6       	in	r0, 0x3f	; 63
   140ee:	f8 94       	cli
   140f0:	de bf       	out	0x3e, r29	; 62
   140f2:	0f be       	out	0x3f, r0	; 63
   140f4:	cd bf       	out	0x3d, r28	; 61
   140f6:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   140fa:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   140fe:	12 82       	std	Z+2, r1	; 0x02
   14100:	54 98       	cbi	0x0a, 4	; 10
   14102:	4c 99       	sbic	0x09, 4	; 9
   14104:	03 c0       	rjmp	.+6      	; 0x1410c <SS80_locate_and_write+0x82>
   14106:	80 e0       	ldi	r24, 0x00	; 0
   14108:	90 e1       	ldi	r25, 0x10	; 16
   1410a:	52 c1       	rjmp	.+676    	; 0x143b0 <SS80_locate_and_write+0x326>
   1410c:	3d df       	rcall	.-390    	; 0x13f88 <SS80_cmd_seek>
   1410e:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   14112:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   14116:	89 2b       	or	r24, r25
   14118:	41 f0       	breq	.+16     	; 0x1412a <SS80_locate_and_write+0xa0>
   1411a:	83 81       	ldd	r24, Z+3	; 0x03
   1411c:	94 81       	ldd	r25, Z+4	; 0x04
   1411e:	82 60       	ori	r24, 0x02	; 2
   14120:	94 83       	std	Z+4, r25	; 0x04
   14122:	83 83       	std	Z+3, r24	; 0x03
   14124:	01 e0       	ldi	r16, 0x01	; 1
   14126:	10 e0       	ldi	r17, 0x00	; 0
   14128:	02 c0       	rjmp	.+4      	; 0x1412e <SS80_locate_and_write+0xa4>
   1412a:	00 e0       	ldi	r16, 0x00	; 0
   1412c:	10 e0       	ldi	r17, 0x00	; 0
   1412e:	23 84       	ldd	r2, Z+11	; 0x0b
   14130:	34 84       	ldd	r3, Z+12	; 0x0c
   14132:	1a 82       	std	Y+2, r1	; 0x02
   14134:	19 82       	std	Y+1, r1	; 0x01
   14136:	41 2c       	mov	r4, r1
   14138:	51 2c       	mov	r5, r1
   1413a:	32 01       	movw	r6, r4
   1413c:	89 ec       	ldi	r24, 0xC9	; 201
   1413e:	9e e1       	ldi	r25, 0x1E	; 30
   14140:	9c 01       	movw	r18, r24
   14142:	40 e0       	ldi	r20, 0x00	; 0
   14144:	2b 83       	std	Y+3, r18	; 0x03
   14146:	3c 83       	std	Y+4, r19	; 0x04
   14148:	4d 83       	std	Y+5, r20	; 0x05
   1414a:	8f ee       	ldi	r24, 0xEF	; 239
   1414c:	9e e1       	ldi	r25, 0x1E	; 30
   1414e:	9c 01       	movw	r18, r24
   14150:	40 e0       	ldi	r20, 0x00	; 0
   14152:	2e 83       	std	Y+6, r18	; 0x06
   14154:	3f 83       	std	Y+7, r19	; 0x07
   14156:	48 87       	std	Y+8, r20	; 0x08
   14158:	12 14       	cp	r1, r2
   1415a:	13 04       	cpc	r1, r3
   1415c:	0c f0       	brlt	.+2      	; 0x14160 <SS80_locate_and_write+0xd6>
   1415e:	f6 c0       	rjmp	.+492    	; 0x1434c <SS80_locate_and_write+0x2c2>
   14160:	54 98       	cbi	0x0a, 4	; 10
   14162:	4c 9b       	sbis	0x09, 4	; 9
   14164:	d0 cf       	rjmp	.-96     	; 0x14106 <SS80_locate_and_write+0x7c>
   14166:	71 01       	movw	r14, r2
   14168:	31 e0       	ldi	r19, 0x01	; 1
   1416a:	23 16       	cp	r2, r19
   1416c:	33 06       	cpc	r3, r19
   1416e:	1c f0       	brlt	.+6      	; 0x14176 <SS80_locate_and_write+0xec>
   14170:	e1 2c       	mov	r14, r1
   14172:	ff 24       	eor	r15, r15
   14174:	f3 94       	inc	r15
   14176:	eb e9       	ldi	r30, 0x9B	; 155
   14178:	fc e1       	ldi	r31, 0x1C	; 28
   1417a:	20 e0       	ldi	r18, 0x00	; 0
   1417c:	32 e0       	ldi	r19, 0x02	; 2
   1417e:	11 92       	st	Z+, r1
   14180:	21 50       	subi	r18, 0x01	; 1
   14182:	30 40       	sbci	r19, 0x00	; 0
   14184:	e1 f7       	brne	.-8      	; 0x1417e <SS80_locate_and_write+0xf4>
   14186:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1418a:	87 fd       	sbrc	r24, 7
   1418c:	0e 94 56 8b 	call	0x116ac	; 0x116ac <gpib_timer_elapsed_begin>
   14190:	ae 01       	movw	r20, r28
   14192:	4f 5f       	subi	r20, 0xFF	; 255
   14194:	5f 4f       	sbci	r21, 0xFF	; 255
   14196:	b7 01       	movw	r22, r14
   14198:	8b e9       	ldi	r24, 0x9B	; 155
   1419a:	9c e1       	ldi	r25, 0x1C	; 28
   1419c:	0e 94 b0 90 	call	0x12160	; 0x12160 <gpib_read_str>
   141a0:	6c 01       	movw	r12, r24
   141a2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   141a6:	87 ff       	sbrs	r24, 7
   141a8:	04 c0       	rjmp	.+8      	; 0x141b2 <SS80_locate_and_write+0x128>
   141aa:	80 ee       	ldi	r24, 0xE0	; 224
   141ac:	9d e0       	ldi	r25, 0x0D	; 13
   141ae:	0e 94 68 8b 	call	0x116d0	; 0x116d0 <gpib_timer_elapsed_end>
   141b2:	ce 14       	cp	r12, r14
   141b4:	df 04       	cpc	r13, r15
   141b6:	39 f1       	breq	.+78     	; 0x14206 <SS80_locate_and_write+0x17c>
   141b8:	89 81       	ldd	r24, Y+1	; 0x01
   141ba:	9a 81       	ldd	r25, Y+2	; 0x02
   141bc:	9c 01       	movw	r18, r24
   141be:	22 27       	eor	r18, r18
   141c0:	30 7d       	andi	r19, 0xD0	; 208
   141c2:	23 2b       	or	r18, r19
   141c4:	d1 f0       	breq	.+52     	; 0x141fa <SS80_locate_and_write+0x170>
   141c6:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   141ca:	80 ff       	sbrs	r24, 0
   141cc:	0a c0       	rjmp	.+20     	; 0x141e2 <SS80_locate_and_write+0x158>
   141ce:	83 e0       	ldi	r24, 0x03	; 3
   141d0:	9f e1       	ldi	r25, 0x1F	; 31
   141d2:	1f 92       	push	r1
   141d4:	9f 93       	push	r25
   141d6:	8f 93       	push	r24
   141d8:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   141dc:	0f 90       	pop	r0
   141de:	0f 90       	pop	r0
   141e0:	0f 90       	pop	r0
   141e2:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   141e6:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   141ea:	83 81       	ldd	r24, Z+3	; 0x03
   141ec:	94 81       	ldd	r25, Z+4	; 0x04
   141ee:	82 60       	ori	r24, 0x02	; 2
   141f0:	94 83       	std	Z+4, r25	; 0x04
   141f2:	83 83       	std	Z+3, r24	; 0x03
   141f4:	81 e0       	ldi	r24, 0x01	; 1
   141f6:	82 83       	std	Z+2, r24	; 0x02
   141f8:	9a c0       	rjmp	.+308    	; 0x1432e <SS80_locate_and_write+0x2a4>
   141fa:	c1 14       	cp	r12, r1
   141fc:	d1 04       	cpc	r13, r1
   141fe:	09 f0       	breq	.+2      	; 0x14202 <SS80_locate_and_write+0x178>
   14200:	d3 c0       	rjmp	.+422    	; 0x143a8 <SS80_locate_and_write+0x31e>
   14202:	90 fd       	sbrc	r25, 0
   14204:	94 c0       	rjmp	.+296    	; 0x1432e <SS80_locate_and_write+0x2a4>
   14206:	01 15       	cp	r16, r1
   14208:	11 05       	cpc	r17, r1
   1420a:	09 f0       	breq	.+2      	; 0x1420e <SS80_locate_and_write+0x184>
   1420c:	85 c0       	rjmp	.+266    	; 0x14318 <SS80_locate_and_write+0x28e>
   1420e:	c1 14       	cp	r12, r1
   14210:	d1 04       	cpc	r13, r1
   14212:	09 f4       	brne	.+2      	; 0x14216 <SS80_locate_and_write+0x18c>
   14214:	83 c0       	rjmp	.+262    	; 0x1431c <SS80_locate_and_write+0x292>
   14216:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1421a:	86 fd       	sbrc	r24, 6
   1421c:	0e 94 56 8b 	call	0x116ac	; 0x116ac <gpib_timer_elapsed_begin>
   14220:	e0 90 50 19 	lds	r14, 0x1950	; 0x801950 <SS80s>
   14224:	f0 90 51 19 	lds	r15, 0x1951	; 0x801951 <SS80s+0x1>
   14228:	33 e0       	ldi	r19, 0x03	; 3
   1422a:	e3 0e       	add	r14, r19
   1422c:	f1 1c       	adc	r15, r1
   1422e:	80 91 52 19 	lds	r24, 0x1952	; 0x801952 <SS80p>
   14232:	90 91 53 19 	lds	r25, 0x1953	; 0x801953 <SS80p+0x1>
   14236:	86 01       	movw	r16, r12
   14238:	2b e9       	ldi	r18, 0x9B	; 155
   1423a:	3c e1       	ldi	r19, 0x1C	; 28
   1423c:	b5 01       	movw	r22, r10
   1423e:	a4 01       	movw	r20, r8
   14240:	02 96       	adiw	r24, 0x02	; 2
   14242:	0e 94 ff 8a 	call	0x115fe	; 0x115fe <dbf_open_write>
   14246:	7c 01       	movw	r14, r24
   14248:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1424c:	86 ff       	sbrs	r24, 6
   1424e:	04 c0       	rjmp	.+8      	; 0x14258 <SS80_locate_and_write+0x1ce>
   14250:	8a ee       	ldi	r24, 0xEA	; 234
   14252:	9d e0       	ldi	r25, 0x0D	; 13
   14254:	0e 94 68 8b 	call	0x116d0	; 0x116d0 <gpib_timer_elapsed_end>
   14258:	ce 14       	cp	r12, r14
   1425a:	df 04       	cpc	r13, r15
   1425c:	39 f1       	breq	.+78     	; 0x142ac <SS80_locate_and_write+0x222>
   1425e:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   14262:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   14266:	83 81       	ldd	r24, Z+3	; 0x03
   14268:	94 81       	ldd	r25, Z+4	; 0x04
   1426a:	82 60       	ori	r24, 0x02	; 2
   1426c:	94 83       	std	Z+4, r25	; 0x04
   1426e:	83 83       	std	Z+3, r24	; 0x03
   14270:	0e 94 b4 72 	call	0xe568	; 0xe568 <mmc_wp_status>
   14274:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   14278:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   1427c:	89 2b       	or	r24, r25
   1427e:	29 f0       	breq	.+10     	; 0x1428a <SS80_locate_and_write+0x200>
   14280:	83 81       	ldd	r24, Z+3	; 0x03
   14282:	94 81       	ldd	r25, Z+4	; 0x04
   14284:	88 60       	ori	r24, 0x08	; 8
   14286:	94 83       	std	Z+4, r25	; 0x04
   14288:	83 83       	std	Z+3, r24	; 0x03
   1428a:	41 e0       	ldi	r20, 0x01	; 1
   1428c:	42 83       	std	Z+2, r20	; 0x02
   1428e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14292:	80 ff       	sbrs	r24, 0
   14294:	29 c0       	rjmp	.+82     	; 0x142e8 <SS80_locate_and_write+0x25e>
   14296:	1f 92       	push	r1
   14298:	8f 81       	ldd	r24, Y+7	; 0x07
   1429a:	8f 93       	push	r24
   1429c:	9e 81       	ldd	r25, Y+6	; 0x06
   1429e:	9f 93       	push	r25
   142a0:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   142a4:	0f 90       	pop	r0
   142a6:	0f 90       	pop	r0
   142a8:	0f 90       	pop	r0
   142aa:	1e c0       	rjmp	.+60     	; 0x142e8 <SS80_locate_and_write+0x25e>
   142ac:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   142b0:	85 ff       	sbrs	r24, 5
   142b2:	0e c0       	rjmp	.+28     	; 0x142d0 <SS80_locate_and_write+0x246>
   142b4:	df 92       	push	r13
   142b6:	cf 92       	push	r12
   142b8:	1f 92       	push	r1
   142ba:	ec 81       	ldd	r30, Y+4	; 0x04
   142bc:	ef 93       	push	r30
   142be:	fb 81       	ldd	r31, Y+3	; 0x03
   142c0:	ff 93       	push	r31
   142c2:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   142c6:	0f 90       	pop	r0
   142c8:	0f 90       	pop	r0
   142ca:	0f 90       	pop	r0
   142cc:	0f 90       	pop	r0
   142ce:	0f 90       	pop	r0
   142d0:	c6 01       	movw	r24, r12
   142d2:	0d 2c       	mov	r0, r13
   142d4:	00 0c       	add	r0, r0
   142d6:	aa 0b       	sbc	r26, r26
   142d8:	bb 0b       	sbc	r27, r27
   142da:	88 0e       	add	r8, r24
   142dc:	99 1e       	adc	r9, r25
   142de:	aa 1e       	adc	r10, r26
   142e0:	bb 1e       	adc	r11, r27
   142e2:	00 e0       	ldi	r16, 0x00	; 0
   142e4:	10 e0       	ldi	r17, 0x00	; 0
   142e6:	05 c0       	rjmp	.+10     	; 0x142f2 <SS80_locate_and_write+0x268>
   142e8:	ec 14       	cp	r14, r12
   142ea:	fd 04       	cpc	r15, r13
   142ec:	64 f0       	brlt	.+24     	; 0x14306 <SS80_locate_and_write+0x27c>
   142ee:	01 e0       	ldi	r16, 0x01	; 1
   142f0:	10 e0       	ldi	r17, 0x00	; 0
   142f2:	c7 01       	movw	r24, r14
   142f4:	0f 2c       	mov	r0, r15
   142f6:	00 0c       	add	r0, r0
   142f8:	aa 0b       	sbc	r26, r26
   142fa:	bb 0b       	sbc	r27, r27
   142fc:	48 0e       	add	r4, r24
   142fe:	59 1e       	adc	r5, r25
   14300:	6a 1e       	adc	r6, r26
   14302:	7b 1e       	adc	r7, r27
   14304:	0b c0       	rjmp	.+22     	; 0x1431c <SS80_locate_and_write+0x292>
   14306:	c6 01       	movw	r24, r12
   14308:	0d 2c       	mov	r0, r13
   1430a:	00 0c       	add	r0, r0
   1430c:	aa 0b       	sbc	r26, r26
   1430e:	bb 0b       	sbc	r27, r27
   14310:	48 0e       	add	r4, r24
   14312:	59 1e       	adc	r5, r25
   14314:	6a 1e       	adc	r6, r26
   14316:	7b 1e       	adc	r7, r27
   14318:	01 e0       	ldi	r16, 0x01	; 1
   1431a:	10 e0       	ldi	r17, 0x00	; 0
   1431c:	2c 18       	sub	r2, r12
   1431e:	3d 08       	sbc	r3, r13
   14320:	89 81       	ldd	r24, Y+1	; 0x01
   14322:	9a 81       	ldd	r25, Y+2	; 0x02
   14324:	90 ff       	sbrs	r25, 0
   14326:	18 cf       	rjmp	.-464    	; 0x14158 <SS80_locate_and_write+0xce>
   14328:	12 14       	cp	r1, r2
   1432a:	13 04       	cpc	r1, r3
   1432c:	7c f4       	brge	.+30     	; 0x1434c <SS80_locate_and_write+0x2c2>
   1432e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14332:	80 ff       	sbrs	r24, 0
   14334:	1f c0       	rjmp	.+62     	; 0x14374 <SS80_locate_and_write+0x2ea>
   14336:	81 ea       	ldi	r24, 0xA1	; 161
   14338:	9e e1       	ldi	r25, 0x1E	; 30
   1433a:	1f 92       	push	r1
   1433c:	9f 93       	push	r25
   1433e:	8f 93       	push	r24
   14340:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   14344:	0f 90       	pop	r0
   14346:	0f 90       	pop	r0
   14348:	0f 90       	pop	r0
   1434a:	14 c0       	rjmp	.+40     	; 0x14374 <SS80_locate_and_write+0x2ea>
   1434c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14350:	85 ff       	sbrs	r24, 5
   14352:	10 c0       	rjmp	.+32     	; 0x14374 <SS80_locate_and_write+0x2ea>
   14354:	7f 92       	push	r7
   14356:	6f 92       	push	r6
   14358:	5f 92       	push	r5
   1435a:	4f 92       	push	r4
   1435c:	86 e7       	ldi	r24, 0x76	; 118
   1435e:	9e e1       	ldi	r25, 0x1E	; 30
   14360:	1f 92       	push	r1
   14362:	9f 93       	push	r25
   14364:	8f 93       	push	r24
   14366:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1436a:	0f b6       	in	r0, 0x3f	; 63
   1436c:	f8 94       	cli
   1436e:	de bf       	out	0x3e, r29	; 62
   14370:	0f be       	out	0x3f, r0	; 63
   14372:	cd bf       	out	0x3d, r28	; 61
   14374:	00 91 50 19 	lds	r16, 0x1950	; 0x801950 <SS80s>
   14378:	10 91 51 19 	lds	r17, 0x1951	; 0x801951 <SS80s+0x1>
   1437c:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   14380:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   14384:	27 a5       	ldd	r18, Z+47	; 0x2f
   14386:	30 a9       	ldd	r19, Z+48	; 0x30
   14388:	40 e0       	ldi	r20, 0x00	; 0
   1438a:	50 e0       	ldi	r21, 0x00	; 0
   1438c:	c5 01       	movw	r24, r10
   1438e:	b4 01       	movw	r22, r8
   14390:	0e 94 54 e8 	call	0x1d0a8	; 0x1d0a8 <__udivmodsi4>
   14394:	f8 01       	movw	r30, r16
   14396:	27 83       	std	Z+7, r18	; 0x07
   14398:	30 87       	std	Z+8, r19	; 0x08
   1439a:	41 87       	std	Z+9, r20	; 0x09
   1439c:	52 87       	std	Z+10, r21	; 0x0a
   1439e:	89 81       	ldd	r24, Y+1	; 0x01
   143a0:	9a 81       	ldd	r25, Y+2	; 0x02
   143a2:	88 27       	eor	r24, r24
   143a4:	90 7d       	andi	r25, 0xD0	; 208
   143a6:	04 c0       	rjmp	.+8      	; 0x143b0 <SS80_locate_and_write+0x326>
   143a8:	01 2b       	or	r16, r17
   143aa:	09 f4       	brne	.+2      	; 0x143ae <SS80_locate_and_write+0x324>
   143ac:	34 cf       	rjmp	.-408    	; 0x14216 <SS80_locate_and_write+0x18c>
   143ae:	b4 cf       	rjmp	.-152    	; 0x14318 <SS80_locate_and_write+0x28e>
   143b0:	28 96       	adiw	r28, 0x08	; 8
   143b2:	e2 e1       	ldi	r30, 0x12	; 18
   143b4:	0c 94 dd e8 	jmp	0x1d1ba	; 0x1d1ba <__epilogue_restores__>

000143b8 <SS80_Report>:
   143b8:	a3 e0       	ldi	r26, 0x03	; 3
   143ba:	b0 e0       	ldi	r27, 0x00	; 0
   143bc:	e2 ee       	ldi	r30, 0xE2	; 226
   143be:	f1 ea       	ldi	r31, 0xA1	; 161
   143c0:	0c 94 d1 e8 	jmp	0x1d1a2	; 0x1d1a2 <__prologue_saves__+0x20>
   143c4:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   143c8:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   143cc:	82 81       	ldd	r24, Z+2	; 0x02
   143ce:	8b 83       	std	Y+3, r24	; 0x03
   143d0:	80 e0       	ldi	r24, 0x00	; 0
   143d2:	91 e0       	ldi	r25, 0x01	; 1
   143d4:	9a 83       	std	Y+2, r25	; 0x02
   143d6:	89 83       	std	Y+1, r24	; 0x01
   143d8:	ae 01       	movw	r20, r28
   143da:	4f 5f       	subi	r20, 0xFF	; 255
   143dc:	5f 4f       	sbci	r21, 0xFF	; 255
   143de:	61 e0       	ldi	r22, 0x01	; 1
   143e0:	70 e0       	ldi	r23, 0x00	; 0
   143e2:	ce 01       	movw	r24, r28
   143e4:	03 96       	adiw	r24, 0x03	; 3
   143e6:	0e 94 5e 91 	call	0x122bc	; 0x122bc <gpib_write_str>
   143ea:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   143ee:	01 97       	sbiw	r24, 0x01	; 1
   143f0:	89 f0       	breq	.+34     	; 0x14414 <SS80_Report+0x5c>
   143f2:	20 ff       	sbrs	r18, 0
   143f4:	0a c0       	rjmp	.+20     	; 0x1440a <SS80_Report+0x52>
   143f6:	87 e6       	ldi	r24, 0x67	; 103
   143f8:	99 e1       	ldi	r25, 0x19	; 25
   143fa:	1f 92       	push	r1
   143fc:	9f 93       	push	r25
   143fe:	8f 93       	push	r24
   14400:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   14404:	0f 90       	pop	r0
   14406:	0f 90       	pop	r0
   14408:	0f 90       	pop	r0
   1440a:	89 81       	ldd	r24, Y+1	; 0x01
   1440c:	9a 81       	ldd	r25, Y+2	; 0x02
   1440e:	88 27       	eor	r24, r24
   14410:	90 7d       	andi	r25, 0xD0	; 208
   14412:	1c c0       	rjmp	.+56     	; 0x1444c <SS80_Report+0x94>
   14414:	25 ff       	sbrs	r18, 5
   14416:	13 c0       	rjmp	.+38     	; 0x1443e <SS80_Report+0x86>
   14418:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   1441c:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   14420:	82 81       	ldd	r24, Z+2	; 0x02
   14422:	1f 92       	push	r1
   14424:	8f 93       	push	r24
   14426:	84 e5       	ldi	r24, 0x54	; 84
   14428:	99 e1       	ldi	r25, 0x19	; 25
   1442a:	1f 92       	push	r1
   1442c:	9f 93       	push	r25
   1442e:	8f 93       	push	r24
   14430:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   14434:	0f 90       	pop	r0
   14436:	0f 90       	pop	r0
   14438:	0f 90       	pop	r0
   1443a:	0f 90       	pop	r0
   1443c:	0f 90       	pop	r0
   1443e:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   14442:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   14446:	12 82       	std	Z+2, r1	; 0x02
   14448:	80 e0       	ldi	r24, 0x00	; 0
   1444a:	90 e0       	ldi	r25, 0x00	; 0
   1444c:	23 96       	adiw	r28, 0x03	; 3
   1444e:	e2 e0       	ldi	r30, 0x02	; 2
   14450:	0c 94 ed e8 	jmp	0x1d1da	; 0x1d1da <__epilogue_restores__+0x20>

00014454 <Clear_Common>:
   14454:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   14458:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   1445c:	25 81       	ldd	r18, Z+5	; 0x05
   1445e:	30 e0       	ldi	r19, 0x00	; 0
   14460:	28 17       	cp	r18, r24
   14462:	39 07       	cpc	r19, r25
   14464:	19 f0       	breq	.+6      	; 0x1446c <Clear_Common+0x18>
   14466:	0f 97       	sbiw	r24, 0x0f	; 15
   14468:	99 f4       	brne	.+38     	; 0x14490 <Clear_Common+0x3c>
   1446a:	03 c0       	rjmp	.+6      	; 0x14472 <Clear_Common+0x1e>
   1446c:	2f 30       	cpi	r18, 0x0F	; 15
   1446e:	31 05       	cpc	r19, r1
   14470:	09 f4       	brne	.+2      	; 0x14474 <Clear_Common+0x20>
   14472:	15 82       	std	Z+5, r1	; 0x05
   14474:	16 82       	std	Z+6, r1	; 0x06
   14476:	17 82       	std	Z+7, r1	; 0x07
   14478:	10 86       	std	Z+8, r1	; 0x08
   1447a:	11 86       	std	Z+9, r1	; 0x09
   1447c:	12 86       	std	Z+10, r1	; 0x0a
   1447e:	13 86       	std	Z+11, r1	; 0x0b
   14480:	14 86       	std	Z+12, r1	; 0x0c
   14482:	15 86       	std	Z+13, r1	; 0x0d
   14484:	16 86       	std	Z+14, r1	; 0x0e
   14486:	11 82       	std	Z+1, r1	; 0x01
   14488:	10 82       	st	Z, r1
   1448a:	14 82       	std	Z+4, r1	; 0x04
   1448c:	13 82       	std	Z+3, r1	; 0x03
   1448e:	12 82       	std	Z+2, r1	; 0x02
   14490:	08 95       	ret

00014492 <SS80_init>:
   14492:	a0 e0       	ldi	r26, 0x00	; 0
   14494:	b0 e0       	ldi	r27, 0x00	; 0
   14496:	ef e4       	ldi	r30, 0x4F	; 79
   14498:	f2 ea       	ldi	r31, 0xA2	; 162
   1449a:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__prologue_saves__+0x14>
   1449e:	05 ea       	ldi	r16, 0xA5	; 165
   144a0:	1e e1       	ldi	r17, 0x1E	; 30
   144a2:	c7 e0       	ldi	r28, 0x07	; 7
   144a4:	d0 e0       	ldi	r29, 0x00	; 0
   144a6:	8f e1       	ldi	r24, 0x1F	; 31
   144a8:	90 e2       	ldi	r25, 0x20	; 32
   144aa:	6c 01       	movw	r12, r24
   144ac:	e1 2c       	mov	r14, r1
   144ae:	f8 01       	movw	r30, r16
   144b0:	f1 a8       	ldd	r15, Z+49	; 0x31
   144b2:	f2 e0       	ldi	r31, 0x02	; 2
   144b4:	ff 12       	cpse	r15, r31
   144b6:	27 c0       	rjmp	.+78     	; 0x14506 <SS80_init+0x74>
   144b8:	ce 01       	movw	r24, r28
   144ba:	0e 94 9c b5 	call	0x16b38	; 0x16b38 <set_active_device>
   144be:	89 2b       	or	r24, r25
   144c0:	11 f1       	breq	.+68     	; 0x14506 <SS80_init+0x74>
   144c2:	8f e0       	ldi	r24, 0x0F	; 15
   144c4:	90 e0       	ldi	r25, 0x00	; 0
   144c6:	c6 df       	rcall	.-116    	; 0x14454 <Clear_Common>
   144c8:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   144cc:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   144d0:	f2 82       	std	Z+2, r15	; 0x02
   144d2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   144d6:	85 ff       	sbrs	r24, 5
   144d8:	0e c0       	rjmp	.+28     	; 0x144f6 <SS80_init+0x64>
   144da:	f8 01       	movw	r30, r16
   144dc:	82 a9       	ldd	r24, Z+50	; 0x32
   144de:	1f 92       	push	r1
   144e0:	8f 93       	push	r24
   144e2:	1f 92       	push	r1
   144e4:	df 92       	push	r13
   144e6:	cf 92       	push	r12
   144e8:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   144ec:	0f 90       	pop	r0
   144ee:	0f 90       	pop	r0
   144f0:	0f 90       	pop	r0
   144f2:	0f 90       	pop	r0
   144f4:	0f 90       	pop	r0
   144f6:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   144fa:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   144fe:	81 81       	ldd	r24, Z+1	; 0x01
   14500:	90 e0       	ldi	r25, 0x00	; 0
   14502:	0e 94 3f 8c 	call	0x1187e	; 0x1187e <gpib_disable_PPR>
   14506:	21 97       	sbiw	r28, 0x01	; 1
   14508:	07 50       	subi	r16, 0x07	; 7
   1450a:	11 09       	sbc	r17, r1
   1450c:	cf 3f       	cpi	r28, 0xFF	; 255
   1450e:	ff ef       	ldi	r31, 0xFF	; 255
   14510:	df 07       	cpc	r29, r31
   14512:	69 f6       	brne	.-102    	; 0x144ae <SS80_init+0x1c>
   14514:	cd b7       	in	r28, 0x3d	; 61
   14516:	de b7       	in	r29, 0x3e	; 62
   14518:	e8 e0       	ldi	r30, 0x08	; 8
   1451a:	0c 94 e7 e8 	jmp	0x1d1ce	; 0x1d1ce <__epilogue_restores__+0x14>

0001451e <SS80_Channel_Independent_Clear>:
   1451e:	9a df       	rcall	.-204    	; 0x14454 <Clear_Common>
   14520:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   14524:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   14528:	81 81       	ldd	r24, Z+1	; 0x01
   1452a:	90 e0       	ldi	r25, 0x00	; 0
   1452c:	0e 94 0e 8c 	call	0x1181c	; 0x1181c <gpib_enable_PPR>
   14530:	80 e0       	ldi	r24, 0x00	; 0
   14532:	90 e0       	ldi	r25, 0x00	; 0
   14534:	08 95       	ret

00014536 <SS80_Universal_Device_Clear>:
   14536:	8f e0       	ldi	r24, 0x0F	; 15
   14538:	90 e0       	ldi	r25, 0x00	; 0
   1453a:	8c df       	rcall	.-232    	; 0x14454 <Clear_Common>
   1453c:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   14540:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   14544:	81 81       	ldd	r24, Z+1	; 0x01
   14546:	90 e0       	ldi	r25, 0x00	; 0
   14548:	0e 94 0e 8c 	call	0x1181c	; 0x1181c <gpib_enable_PPR>
   1454c:	80 e0       	ldi	r24, 0x00	; 0
   1454e:	90 e0       	ldi	r25, 0x00	; 0
   14550:	08 95       	ret

00014552 <SS80_Selected_Device_Clear>:
   14552:	cf 93       	push	r28
   14554:	df 93       	push	r29
   14556:	ec 01       	movw	r28, r24
   14558:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1455c:	85 ff       	sbrs	r24, 5
   1455e:	0a c0       	rjmp	.+20     	; 0x14574 <SS80_Selected_Device_Clear+0x22>
   14560:	88 e4       	ldi	r24, 0x48	; 72
   14562:	99 e1       	ldi	r25, 0x19	; 25
   14564:	1f 92       	push	r1
   14566:	9f 93       	push	r25
   14568:	8f 93       	push	r24
   1456a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1456e:	0f 90       	pop	r0
   14570:	0f 90       	pop	r0
   14572:	0f 90       	pop	r0
   14574:	ce 01       	movw	r24, r28
   14576:	6e df       	rcall	.-292    	; 0x14454 <Clear_Common>
   14578:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   1457c:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   14580:	81 81       	ldd	r24, Z+1	; 0x01
   14582:	90 e0       	ldi	r25, 0x00	; 0
   14584:	0e 94 0e 8c 	call	0x1181c	; 0x1181c <gpib_enable_PPR>
   14588:	80 e0       	ldi	r24, 0x00	; 0
   1458a:	90 e0       	ldi	r25, 0x00	; 0
   1458c:	df 91       	pop	r29
   1458e:	cf 91       	pop	r28
   14590:	08 95       	ret

00014592 <SS80_Amigo_Clear>:
   14592:	a3 e0       	ldi	r26, 0x03	; 3
   14594:	b0 e0       	ldi	r27, 0x00	; 0
   14596:	ef ec       	ldi	r30, 0xCF	; 207
   14598:	f2 ea       	ldi	r31, 0xA2	; 162
   1459a:	0c 94 d1 e8 	jmp	0x1d1a2	; 0x1d1a2 <__prologue_saves__+0x20>
   1459e:	1a 82       	std	Y+2, r1	; 0x02
   145a0:	19 82       	std	Y+1, r1	; 0x01
   145a2:	ae 01       	movw	r20, r28
   145a4:	4f 5f       	subi	r20, 0xFF	; 255
   145a6:	5f 4f       	sbci	r21, 0xFF	; 255
   145a8:	61 e0       	ldi	r22, 0x01	; 1
   145aa:	70 e0       	ldi	r23, 0x00	; 0
   145ac:	ce 01       	movw	r24, r28
   145ae:	03 96       	adiw	r24, 0x03	; 3
   145b0:	0e 94 b0 90 	call	0x12160	; 0x12160 <gpib_read_str>
   145b4:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   145b8:	01 97       	sbiw	r24, 0x01	; 1
   145ba:	89 f0       	breq	.+34     	; 0x145de <SS80_Amigo_Clear+0x4c>
   145bc:	20 ff       	sbrs	r18, 0
   145be:	0a c0       	rjmp	.+20     	; 0x145d4 <SS80_Amigo_Clear+0x42>
   145c0:	85 e3       	ldi	r24, 0x35	; 53
   145c2:	99 e1       	ldi	r25, 0x19	; 25
   145c4:	1f 92       	push	r1
   145c6:	9f 93       	push	r25
   145c8:	8f 93       	push	r24
   145ca:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   145ce:	0f 90       	pop	r0
   145d0:	0f 90       	pop	r0
   145d2:	0f 90       	pop	r0
   145d4:	89 81       	ldd	r24, Y+1	; 0x01
   145d6:	9a 81       	ldd	r25, Y+2	; 0x02
   145d8:	88 27       	eor	r24, r24
   145da:	90 7d       	andi	r25, 0xD0	; 208
   145dc:	19 c0       	rjmp	.+50     	; 0x14610 <SS80_Amigo_Clear+0x7e>
   145de:	25 ff       	sbrs	r18, 5
   145e0:	0a c0       	rjmp	.+20     	; 0x145f6 <SS80_Amigo_Clear+0x64>
   145e2:	86 e2       	ldi	r24, 0x26	; 38
   145e4:	99 e1       	ldi	r25, 0x19	; 25
   145e6:	1f 92       	push	r1
   145e8:	9f 93       	push	r25
   145ea:	8f 93       	push	r24
   145ec:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   145f0:	0f 90       	pop	r0
   145f2:	0f 90       	pop	r0
   145f4:	0f 90       	pop	r0
   145f6:	8f e0       	ldi	r24, 0x0F	; 15
   145f8:	90 e0       	ldi	r25, 0x00	; 0
   145fa:	2c df       	rcall	.-424    	; 0x14454 <Clear_Common>
   145fc:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   14600:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   14604:	81 81       	ldd	r24, Z+1	; 0x01
   14606:	90 e0       	ldi	r25, 0x00	; 0
   14608:	0e 94 0e 8c 	call	0x1181c	; 0x1181c <gpib_enable_PPR>
   1460c:	80 e0       	ldi	r24, 0x00	; 0
   1460e:	90 e0       	ldi	r25, 0x00	; 0
   14610:	23 96       	adiw	r28, 0x03	; 3
   14612:	e2 e0       	ldi	r30, 0x02	; 2
   14614:	0c 94 ed e8 	jmp	0x1d1da	; 0x1d1da <__epilogue_restores__+0x20>

00014618 <SS80_Cancel>:
   14618:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   1461c:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   14620:	11 82       	std	Z+1, r1	; 0x01
   14622:	10 82       	st	Z, r1
   14624:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   14628:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   1462c:	81 81       	ldd	r24, Z+1	; 0x01
   1462e:	90 e0       	ldi	r25, 0x00	; 0
   14630:	0e 94 0e 8c 	call	0x1181c	; 0x1181c <gpib_enable_PPR>
   14634:	80 e0       	ldi	r24, 0x00	; 0
   14636:	90 e0       	ldi	r25, 0x00	; 0
   14638:	08 95       	ret

0001463a <SS80_Transparent_State>:
   1463a:	a2 e0       	ldi	r26, 0x02	; 2
   1463c:	b0 e0       	ldi	r27, 0x00	; 0
   1463e:	e3 e2       	ldi	r30, 0x23	; 35
   14640:	f3 ea       	ldi	r31, 0xA3	; 163
   14642:	0c 94 c9 e8 	jmp	0x1d192	; 0x1d192 <__prologue_saves__+0x10>
   14646:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   1464a:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   1464e:	81 81       	ldd	r24, Z+1	; 0x01
   14650:	90 e0       	ldi	r25, 0x00	; 0
   14652:	0e 94 3f 8c 	call	0x1187e	; 0x1187e <gpib_disable_PPR>
   14656:	80 e0       	ldi	r24, 0x00	; 0
   14658:	91 e0       	ldi	r25, 0x01	; 1
   1465a:	9a 83       	std	Y+2, r25	; 0x02
   1465c:	89 83       	std	Y+1, r24	; 0x01
   1465e:	ae 01       	movw	r20, r28
   14660:	4f 5f       	subi	r20, 0xFF	; 255
   14662:	5f 4f       	sbci	r21, 0xFF	; 255
   14664:	60 e0       	ldi	r22, 0x00	; 0
   14666:	72 e0       	ldi	r23, 0x02	; 2
   14668:	8b e9       	ldi	r24, 0x9B	; 155
   1466a:	9c e1       	ldi	r25, 0x1C	; 28
   1466c:	0e 94 b0 90 	call	0x12160	; 0x12160 <gpib_read_str>
   14670:	7c 01       	movw	r14, r24
   14672:	89 81       	ldd	r24, Y+1	; 0x01
   14674:	9a 81       	ldd	r25, Y+2	; 0x02
   14676:	9c 01       	movw	r18, r24
   14678:	22 27       	eor	r18, r18
   1467a:	30 7d       	andi	r19, 0xD0	; 208
   1467c:	23 2b       	or	r18, r19
   1467e:	79 f0       	breq	.+30     	; 0x1469e <SS80_Transparent_State+0x64>
   14680:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14684:	80 ff       	sbrs	r24, 0
   14686:	e0 c0       	rjmp	.+448    	; 0x14848 <SS80_Transparent_State+0x20e>
   14688:	85 ec       	ldi	r24, 0xC5	; 197
   1468a:	9a e1       	ldi	r25, 0x1A	; 26
   1468c:	1f 92       	push	r1
   1468e:	9f 93       	push	r25
   14690:	8f 93       	push	r24
   14692:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   14696:	0f 90       	pop	r0
   14698:	0f 90       	pop	r0
   1469a:	0f 90       	pop	r0
   1469c:	d5 c0       	rjmp	.+426    	; 0x14848 <SS80_Transparent_State+0x20e>
   1469e:	e1 14       	cp	r14, r1
   146a0:	f1 04       	cpc	r15, r1
   146a2:	09 f4       	brne	.+2      	; 0x146a6 <SS80_Transparent_State+0x6c>
   146a4:	d6 c0       	rjmp	.+428    	; 0x14852 <SS80_Transparent_State+0x218>
   146a6:	90 fd       	sbrc	r25, 0
   146a8:	0e c0       	rjmp	.+28     	; 0x146c6 <SS80_Transparent_State+0x8c>
   146aa:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   146ae:	80 ff       	sbrs	r24, 0
   146b0:	0a c0       	rjmp	.+20     	; 0x146c6 <SS80_Transparent_State+0x8c>
   146b2:	8c ea       	ldi	r24, 0xAC	; 172
   146b4:	9a e1       	ldi	r25, 0x1A	; 26
   146b6:	1f 92       	push	r1
   146b8:	9f 93       	push	r25
   146ba:	8f 93       	push	r24
   146bc:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   146c0:	0f 90       	pop	r0
   146c2:	0f 90       	pop	r0
   146c4:	0f 90       	pop	r0
   146c6:	8b e9       	ldi	r24, 0x9B	; 155
   146c8:	a8 2e       	mov	r10, r24
   146ca:	8c e1       	ldi	r24, 0x1C	; 28
   146cc:	b8 2e       	mov	r11, r24
   146ce:	00 e0       	ldi	r16, 0x00	; 0
   146d0:	10 e0       	ldi	r17, 0x00	; 0
   146d2:	0e 15       	cp	r16, r14
   146d4:	1f 05       	cpc	r17, r15
   146d6:	0c f0       	brlt	.+2      	; 0x146da <SS80_Transparent_State+0xa0>
   146d8:	a0 c0       	rjmp	.+320    	; 0x1481a <SS80_Transparent_State+0x1e0>
   146da:	68 01       	movw	r12, r16
   146dc:	8f ef       	ldi	r24, 0xFF	; 255
   146de:	c8 1a       	sub	r12, r24
   146e0:	d8 0a       	sbc	r13, r24
   146e2:	f5 01       	movw	r30, r10
   146e4:	81 91       	ld	r24, Z+
   146e6:	5f 01       	movw	r10, r30
   146e8:	28 2f       	mov	r18, r24
   146ea:	30 e0       	ldi	r19, 0x00	; 0
   146ec:	a9 01       	movw	r20, r18
   146ee:	40 52       	subi	r20, 0x20	; 32
   146f0:	51 09       	sbc	r21, r1
   146f2:	40 31       	cpi	r20, 0x10	; 16
   146f4:	51 05       	cpc	r21, r1
   146f6:	20 f4       	brcc	.+8      	; 0x14700 <SS80_Transparent_State+0xc6>
   146f8:	80 52       	subi	r24, 0x20	; 32
   146fa:	8c d9       	rcall	.-3304   	; 0x13a14 <SS80_Check_Unit>
   146fc:	86 01       	movw	r16, r12
   146fe:	e9 cf       	rjmp	.-46     	; 0x146d2 <SS80_Transparent_State+0x98>
   14700:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14704:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   14708:	21 30       	cpi	r18, 0x01	; 1
   1470a:	31 05       	cpc	r19, r1
   1470c:	c9 f4       	brne	.+50     	; 0x14740 <SS80_Transparent_State+0x106>
   1470e:	0e 5f       	subi	r16, 0xFE	; 254
   14710:	1f 4f       	sbci	r17, 0xFF	; 255
   14712:	80 73       	andi	r24, 0x30	; 48
   14714:	99 27       	eor	r25, r25
   14716:	89 2b       	or	r24, r25
   14718:	51 f0       	breq	.+20     	; 0x1472e <SS80_Transparent_State+0xf4>
   1471a:	87 e8       	ldi	r24, 0x87	; 135
   1471c:	9a e1       	ldi	r25, 0x1A	; 26
   1471e:	1f 92       	push	r1
   14720:	9f 93       	push	r25
   14722:	8f 93       	push	r24
   14724:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   14728:	0f 90       	pop	r0
   1472a:	0f 90       	pop	r0
   1472c:	0f 90       	pop	r0
   1472e:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   14732:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   14736:	81 81       	ldd	r24, Z+1	; 0x01
   14738:	90 e0       	ldi	r25, 0x00	; 0
   1473a:	0e 94 0e 8c 	call	0x1181c	; 0x1181c <gpib_enable_PPR>
   1473e:	6d c0       	rjmp	.+218    	; 0x1481a <SS80_Transparent_State+0x1e0>
   14740:	22 30       	cpi	r18, 0x02	; 2
   14742:	31 05       	cpc	r19, r1
   14744:	51 f4       	brne	.+20     	; 0x1475a <SS80_Transparent_State+0x120>
   14746:	0b 5f       	subi	r16, 0xFB	; 251
   14748:	1f 4f       	sbci	r17, 0xFF	; 255
   1474a:	80 73       	andi	r24, 0x30	; 48
   1474c:	99 27       	eor	r25, r25
   1474e:	89 2b       	or	r24, r25
   14750:	09 f4       	brne	.+2      	; 0x14754 <SS80_Transparent_State+0x11a>
   14752:	63 c0       	rjmp	.+198    	; 0x1481a <SS80_Transparent_State+0x1e0>
   14754:	8a e6       	ldi	r24, 0x6A	; 106
   14756:	9a e1       	ldi	r25, 0x1A	; 26
   14758:	0c c0       	rjmp	.+24     	; 0x14772 <SS80_Transparent_State+0x138>
   1475a:	23 30       	cpi	r18, 0x03	; 3
   1475c:	31 05       	cpc	r19, r1
   1475e:	91 f4       	brne	.+36     	; 0x14784 <SS80_Transparent_State+0x14a>
   14760:	0b 5f       	subi	r16, 0xFB	; 251
   14762:	1f 4f       	sbci	r17, 0xFF	; 255
   14764:	80 73       	andi	r24, 0x30	; 48
   14766:	99 27       	eor	r25, r25
   14768:	89 2b       	or	r24, r25
   1476a:	09 f4       	brne	.+2      	; 0x1476e <SS80_Transparent_State+0x134>
   1476c:	56 c0       	rjmp	.+172    	; 0x1481a <SS80_Transparent_State+0x1e0>
   1476e:	8c e4       	ldi	r24, 0x4C	; 76
   14770:	9a e1       	ldi	r25, 0x1A	; 26
   14772:	1f 92       	push	r1
   14774:	9f 93       	push	r25
   14776:	8f 93       	push	r24
   14778:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1477c:	0f 90       	pop	r0
   1477e:	0f 90       	pop	r0
   14780:	0f 90       	pop	r0
   14782:	4b c0       	rjmp	.+150    	; 0x1481a <SS80_Transparent_State+0x1e0>
   14784:	28 30       	cpi	r18, 0x08	; 8
   14786:	31 05       	cpc	r19, r1
   14788:	e9 f4       	brne	.+58     	; 0x147c4 <SS80_Transparent_State+0x18a>
   1478a:	85 ff       	sbrs	r24, 5
   1478c:	13 c0       	rjmp	.+38     	; 0x147b4 <SS80_Transparent_State+0x17a>
   1478e:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   14792:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   14796:	85 81       	ldd	r24, Z+5	; 0x05
   14798:	1f 92       	push	r1
   1479a:	8f 93       	push	r24
   1479c:	85 e2       	ldi	r24, 0x25	; 37
   1479e:	9a e1       	ldi	r25, 0x1A	; 26
   147a0:	1f 92       	push	r1
   147a2:	9f 93       	push	r25
   147a4:	8f 93       	push	r24
   147a6:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   147aa:	0f 90       	pop	r0
   147ac:	0f 90       	pop	r0
   147ae:	0f 90       	pop	r0
   147b0:	0f 90       	pop	r0
   147b2:	0f 90       	pop	r0
   147b4:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   147b8:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   147bc:	85 81       	ldd	r24, Z+5	; 0x05
   147be:	90 e0       	ldi	r25, 0x00	; 0
   147c0:	ae de       	rcall	.-676    	; 0x1451e <SS80_Channel_Independent_Clear>
   147c2:	49 c0       	rjmp	.+146    	; 0x14856 <SS80_Transparent_State+0x21c>
   147c4:	29 30       	cpi	r18, 0x09	; 9
   147c6:	31 05       	cpc	r19, r1
   147c8:	b9 f4       	brne	.+46     	; 0x147f8 <SS80_Transparent_State+0x1be>
   147ca:	85 ff       	sbrs	r24, 5
   147cc:	13 c0       	rjmp	.+38     	; 0x147f4 <SS80_Transparent_State+0x1ba>
   147ce:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   147d2:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   147d6:	85 81       	ldd	r24, Z+5	; 0x05
   147d8:	1f 92       	push	r1
   147da:	8f 93       	push	r24
   147dc:	81 e1       	ldi	r24, 0x11	; 17
   147de:	9a e1       	ldi	r25, 0x1A	; 26
   147e0:	1f 92       	push	r1
   147e2:	9f 93       	push	r25
   147e4:	8f 93       	push	r24
   147e6:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   147ea:	0f 90       	pop	r0
   147ec:	0f 90       	pop	r0
   147ee:	0f 90       	pop	r0
   147f0:	0f 90       	pop	r0
   147f2:	0f 90       	pop	r0
   147f4:	11 df       	rcall	.-478    	; 0x14618 <SS80_Cancel>
   147f6:	2f c0       	rjmp	.+94     	; 0x14856 <SS80_Transparent_State+0x21c>
   147f8:	80 ff       	sbrs	r24, 0
   147fa:	26 c0       	rjmp	.+76     	; 0x14848 <SS80_Transparent_State+0x20e>
   147fc:	3f 93       	push	r19
   147fe:	2f 93       	push	r18
   14800:	81 ef       	ldi	r24, 0xF1	; 241
   14802:	99 e1       	ldi	r25, 0x19	; 25
   14804:	1f 92       	push	r1
   14806:	9f 93       	push	r25
   14808:	8f 93       	push	r24
   1480a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1480e:	0f 90       	pop	r0
   14810:	0f 90       	pop	r0
   14812:	0f 90       	pop	r0
   14814:	0f 90       	pop	r0
   14816:	0f 90       	pop	r0
   14818:	86 01       	movw	r16, r12
   1481a:	0e 15       	cp	r16, r14
   1481c:	1f 05       	cpc	r17, r15
   1481e:	a1 f0       	breq	.+40     	; 0x14848 <SS80_Transparent_State+0x20e>
   14820:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14824:	80 ff       	sbrs	r24, 0
   14826:	10 c0       	rjmp	.+32     	; 0x14848 <SS80_Transparent_State+0x20e>
   14828:	ff 92       	push	r15
   1482a:	ef 92       	push	r14
   1482c:	1f 93       	push	r17
   1482e:	0f 93       	push	r16
   14830:	85 eb       	ldi	r24, 0xB5	; 181
   14832:	99 e1       	ldi	r25, 0x19	; 25
   14834:	1f 92       	push	r1
   14836:	9f 93       	push	r25
   14838:	8f 93       	push	r24
   1483a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1483e:	0f b6       	in	r0, 0x3f	; 63
   14840:	f8 94       	cli
   14842:	de bf       	out	0x3e, r29	; 62
   14844:	0f be       	out	0x3f, r0	; 63
   14846:	cd bf       	out	0x3d, r28	; 61
   14848:	89 81       	ldd	r24, Y+1	; 0x01
   1484a:	9a 81       	ldd	r25, Y+2	; 0x02
   1484c:	88 27       	eor	r24, r24
   1484e:	90 7d       	andi	r25, 0xD0	; 208
   14850:	02 c0       	rjmp	.+4      	; 0x14856 <SS80_Transparent_State+0x21c>
   14852:	80 e0       	ldi	r24, 0x00	; 0
   14854:	90 e0       	ldi	r25, 0x00	; 0
   14856:	22 96       	adiw	r28, 0x02	; 2
   14858:	ea e0       	ldi	r30, 0x0A	; 10
   1485a:	0c 94 e5 e8 	jmp	0x1d1ca	; 0x1d1ca <__epilogue_restores__+0x10>

0001485e <SS80_error_return>:
   1485e:	a3 e0       	ldi	r26, 0x03	; 3
   14860:	b0 e0       	ldi	r27, 0x00	; 0
   14862:	e5 e3       	ldi	r30, 0x35	; 53
   14864:	f4 ea       	ldi	r31, 0xA4	; 164
   14866:	0c 94 d1 e8 	jmp	0x1d1a2	; 0x1d1a2 <__prologue_saves__+0x20>
   1486a:	80 e0       	ldi	r24, 0x00	; 0
   1486c:	91 e0       	ldi	r25, 0x01	; 1
   1486e:	9a 83       	std	Y+2, r25	; 0x02
   14870:	89 83       	std	Y+1, r24	; 0x01
   14872:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   14876:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   1487a:	81 e0       	ldi	r24, 0x01	; 1
   1487c:	82 83       	std	Z+2, r24	; 0x02
   1487e:	8b 83       	std	Y+3, r24	; 0x03
   14880:	ae 01       	movw	r20, r28
   14882:	4f 5f       	subi	r20, 0xFF	; 255
   14884:	5f 4f       	sbci	r21, 0xFF	; 255
   14886:	61 e0       	ldi	r22, 0x01	; 1
   14888:	70 e0       	ldi	r23, 0x00	; 0
   1488a:	ce 01       	movw	r24, r28
   1488c:	03 96       	adiw	r24, 0x03	; 3
   1488e:	0e 94 5e 91 	call	0x122bc	; 0x122bc <gpib_write_str>
   14892:	01 97       	sbiw	r24, 0x01	; 1
   14894:	99 f0       	breq	.+38     	; 0x148bc <SS80_error_return+0x5e>
   14896:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1489a:	80 ff       	sbrs	r24, 0
   1489c:	0a c0       	rjmp	.+20     	; 0x148b2 <SS80_error_return+0x54>
   1489e:	87 ee       	ldi	r24, 0xE7	; 231
   148a0:	98 e1       	ldi	r25, 0x18	; 24
   148a2:	1f 92       	push	r1
   148a4:	9f 93       	push	r25
   148a6:	8f 93       	push	r24
   148a8:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   148ac:	0f 90       	pop	r0
   148ae:	0f 90       	pop	r0
   148b0:	0f 90       	pop	r0
   148b2:	89 81       	ldd	r24, Y+1	; 0x01
   148b4:	9a 81       	ldd	r25, Y+2	; 0x02
   148b6:	88 27       	eor	r24, r24
   148b8:	90 7d       	andi	r25, 0xD0	; 208
   148ba:	07 c0       	rjmp	.+14     	; 0x148ca <SS80_error_return+0x6c>
   148bc:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   148c0:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   148c4:	12 82       	std	Z+2, r1	; 0x02
   148c6:	80 e0       	ldi	r24, 0x00	; 0
   148c8:	90 e0       	ldi	r25, 0x00	; 0
   148ca:	23 96       	adiw	r28, 0x03	; 3
   148cc:	e2 e0       	ldi	r30, 0x02	; 2
   148ce:	0c 94 ed e8 	jmp	0x1d1da	; 0x1d1da <__epilogue_restores__+0x20>

000148d2 <SS80_locate_and_read>:
/// - Phases: Command, Report
/// @param[in] u: Unit
/// @return  0

int SS80_Channel_Independent_Clear( int u )
{
   148d2:	ac e0       	ldi	r26, 0x0C	; 12
   148d4:	b0 e0       	ldi	r27, 0x00	; 0
   148d6:	ef e6       	ldi	r30, 0x6F	; 111
   148d8:	f4 ea       	ldi	r31, 0xA4	; 164
   148da:	0c 94 c2 e8 	jmp	0x1d184	; 0x1d184 <__prologue_saves__+0x2>
   148de:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   148e2:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   148e6:	27 81       	ldd	r18, Z+7	; 0x07
   148e8:	30 85       	ldd	r19, Z+8	; 0x08
   148ea:	41 85       	ldd	r20, Z+9	; 0x09
   148ec:	52 85       	ldd	r21, Z+10	; 0x0a
   148ee:	a0 91 52 19 	lds	r26, 0x1952	; 0x801952 <SS80p>
   148f2:	b0 91 53 19 	lds	r27, 0x1953	; 0x801953 <SS80p+0x1>
   148f6:	9f 96       	adiw	r26, 0x2f	; 47
   148f8:	0d 90       	ld	r0, X+
   148fa:	bc 91       	ld	r27, X
   148fc:	a0 2d       	mov	r26, r0
   148fe:	12 82       	std	Z+2, r1	; 0x02
   14900:	1a 82       	std	Y+2, r1	; 0x02
   14902:	19 82       	std	Y+1, r1	; 0x01
   14904:	54 98       	cbi	0x0a, 4	; 10
   14906:	4c 99       	sbic	0x09, 4	; 9
   14908:	03 c0       	rjmp	.+6      	; 0x14910 <SS80_locate_and_read+0x3e>
   1490a:	80 e0       	ldi	r24, 0x00	; 0
   1490c:	90 e1       	ldi	r25, 0x10	; 16
   1490e:	45 c1       	rjmp	.+650    	; 0x14b9a <SS80_locate_and_read+0x2c8>
   14910:	0e 94 a1 e8 	call	0x1d142	; 0x1d142 <__muluhisi3>
   14914:	4b 01       	movw	r8, r22
   14916:	5c 01       	movw	r10, r24
   14918:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1491c:	85 ff       	sbrs	r24, 5
   1491e:	1c c0       	rjmp	.+56     	; 0x14958 <SS80_locate_and_read+0x86>
   14920:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   14924:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   14928:	86 85       	ldd	r24, Z+14	; 0x0e
   1492a:	8f 93       	push	r24
   1492c:	85 85       	ldd	r24, Z+13	; 0x0d
   1492e:	8f 93       	push	r24
   14930:	84 85       	ldd	r24, Z+12	; 0x0c
   14932:	8f 93       	push	r24
   14934:	83 85       	ldd	r24, Z+11	; 0x0b
   14936:	8f 93       	push	r24
   14938:	bf 92       	push	r11
   1493a:	af 92       	push	r10
   1493c:	9f 92       	push	r9
   1493e:	8f 92       	push	r8
   14940:	8b ed       	ldi	r24, 0xDB	; 219
   14942:	9f e1       	ldi	r25, 0x1F	; 31
   14944:	1f 92       	push	r1
   14946:	9f 93       	push	r25
   14948:	8f 93       	push	r24
   1494a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1494e:	0f b6       	in	r0, 0x3f	; 63
   14950:	f8 94       	cli
   14952:	de bf       	out	0x3e, r29	; 62
   14954:	0f be       	out	0x3f, r0	; 63
   14956:	cd bf       	out	0x3d, r28	; 61
   14958:	17 db       	rcall	.-2514   	; 0x13f88 <SS80_cmd_seek>
   1495a:	89 2b       	or	r24, r25
   1495c:	09 f0       	breq	.+2      	; 0x14960 <SS80_locate_and_read+0x8e>
   1495e:	af c0       	rjmp	.+350    	; 0x14abe <SS80_locate_and_read+0x1ec>
   14960:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   14964:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   14968:	43 84       	ldd	r4, Z+11	; 0x0b
   1496a:	54 84       	ldd	r5, Z+12	; 0x0c
   1496c:	65 84       	ldd	r6, Z+13	; 0x0d
   1496e:	76 84       	ldd	r7, Z+14	; 0x0e
   14970:	1b 82       	std	Y+3, r1	; 0x03
   14972:	1c 82       	std	Y+4, r1	; 0x04
   14974:	1d 82       	std	Y+5, r1	; 0x05
   14976:	1e 82       	std	Y+6, r1	; 0x06
   14978:	8d eb       	ldi	r24, 0xBD	; 189
   1497a:	9f e1       	ldi	r25, 0x1F	; 31
   1497c:	9c 01       	movw	r18, r24
   1497e:	40 e0       	ldi	r20, 0x00	; 0
   14980:	2f 83       	std	Y+7, r18	; 0x07
   14982:	38 87       	std	Y+8, r19	; 0x08
   14984:	49 87       	std	Y+9, r20	; 0x09
   14986:	33 24       	eor	r3, r3
   14988:	33 94       	inc	r3
   1498a:	8c e8       	ldi	r24, 0x8C	; 140
   1498c:	9f e1       	ldi	r25, 0x1F	; 31
   1498e:	9c 01       	movw	r18, r24
   14990:	40 e0       	ldi	r20, 0x00	; 0
   14992:	2a 87       	std	Y+10, r18	; 0x0a
   14994:	3b 87       	std	Y+11, r19	; 0x0b
   14996:	4c 87       	std	Y+12, r20	; 0x0c
   14998:	34 c0       	rjmp	.+104    	; 0x14a02 <SS80_locate_and_read+0x130>
   1499a:	86 fd       	sbrc	r24, 6
   1499c:	0e 94 56 8b 	call	0x116ac	; 0x116ac <gpib_timer_elapsed_begin>
   149a0:	ae 01       	movw	r20, r28
   149a2:	4f 5f       	subi	r20, 0xFF	; 255
   149a4:	5f 4f       	sbci	r21, 0xFF	; 255
   149a6:	b6 01       	movw	r22, r12
   149a8:	8b e9       	ldi	r24, 0x9B	; 155
   149aa:	9c e1       	ldi	r25, 0x1C	; 28
   149ac:	0e 94 5e 91 	call	0x122bc	; 0x122bc <gpib_write_str>
   149b0:	8c 01       	movw	r16, r24
   149b2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   149b6:	86 ff       	sbrs	r24, 6
   149b8:	04 c0       	rjmp	.+8      	; 0x149c2 <SS80_locate_and_read+0xf0>
   149ba:	8f ef       	ldi	r24, 0xFF	; 255
   149bc:	9d e0       	ldi	r25, 0x0D	; 13
   149be:	0e 94 68 8b 	call	0x116d0	; 0x116d0 <gpib_timer_elapsed_end>
   149c2:	c0 16       	cp	r12, r16
   149c4:	d1 06       	cpc	r13, r17
   149c6:	09 f0       	breq	.+2      	; 0x149ca <SS80_locate_and_read+0xf8>
   149c8:	83 c0       	rjmp	.+262    	; 0x14ad0 <SS80_locate_and_read+0x1fe>
   149ca:	0d 2c       	mov	r0, r13
   149cc:	00 0c       	add	r0, r0
   149ce:	ee 08       	sbc	r14, r14
   149d0:	ff 08       	sbc	r15, r15
   149d2:	8c 0c       	add	r8, r12
   149d4:	9d 1c       	adc	r9, r13
   149d6:	ae 1c       	adc	r10, r14
   149d8:	bf 1c       	adc	r11, r15
   149da:	01 2e       	mov	r0, r17
   149dc:	00 0c       	add	r0, r0
   149de:	22 0b       	sbc	r18, r18
   149e0:	33 0b       	sbc	r19, r19
   149e2:	8b 81       	ldd	r24, Y+3	; 0x03
   149e4:	9c 81       	ldd	r25, Y+4	; 0x04
   149e6:	ad 81       	ldd	r26, Y+5	; 0x05
   149e8:	be 81       	ldd	r27, Y+6	; 0x06
   149ea:	80 0f       	add	r24, r16
   149ec:	91 1f       	adc	r25, r17
   149ee:	a2 1f       	adc	r26, r18
   149f0:	b3 1f       	adc	r27, r19
   149f2:	8b 83       	std	Y+3, r24	; 0x03
   149f4:	9c 83       	std	Y+4, r25	; 0x04
   149f6:	ad 83       	std	Y+5, r26	; 0x05
   149f8:	be 83       	std	Y+6, r27	; 0x06
   149fa:	40 1a       	sub	r4, r16
   149fc:	51 0a       	sbc	r5, r17
   149fe:	62 0a       	sbc	r6, r18
   14a00:	73 0a       	sbc	r7, r19
   14a02:	41 14       	cp	r4, r1
   14a04:	51 04       	cpc	r5, r1
   14a06:	61 04       	cpc	r6, r1
   14a08:	71 04       	cpc	r7, r1
   14a0a:	09 f4       	brne	.+2      	; 0x14a0e <SS80_locate_and_read+0x13c>
   14a0c:	93 c0       	rjmp	.+294    	; 0x14b34 <SS80_locate_and_read+0x262>
   14a0e:	54 98       	cbi	0x0a, 4	; 10
   14a10:	4c 9b       	sbis	0x09, 4	; 9
   14a12:	7b cf       	rjmp	.-266    	; 0x1490a <SS80_locate_and_read+0x38>
   14a14:	31 e0       	ldi	r19, 0x01	; 1
   14a16:	43 16       	cp	r4, r19
   14a18:	53 06       	cpc	r5, r19
   14a1a:	61 04       	cpc	r6, r1
   14a1c:	71 04       	cpc	r7, r1
   14a1e:	08 f4       	brcc	.+2      	; 0x14a22 <SS80_locate_and_read+0x150>
   14a20:	50 c0       	rjmp	.+160    	; 0x14ac2 <SS80_locate_and_read+0x1f0>
   14a22:	1a 82       	std	Y+2, r1	; 0x02
   14a24:	19 82       	std	Y+1, r1	; 0x01
   14a26:	c1 2c       	mov	r12, r1
   14a28:	dd 24       	eor	r13, r13
   14a2a:	d3 94       	inc	r13
   14a2c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14a30:	86 fd       	sbrc	r24, 6
   14a32:	0e 94 56 8b 	call	0x116ac	; 0x116ac <gpib_timer_elapsed_begin>
   14a36:	e0 90 50 19 	lds	r14, 0x1950	; 0x801950 <SS80s>
   14a3a:	f0 90 51 19 	lds	r15, 0x1951	; 0x801951 <SS80s+0x1>
   14a3e:	43 e0       	ldi	r20, 0x03	; 3
   14a40:	e4 0e       	add	r14, r20
   14a42:	f1 1c       	adc	r15, r1
   14a44:	80 91 52 19 	lds	r24, 0x1952	; 0x801952 <SS80p>
   14a48:	90 91 53 19 	lds	r25, 0x1953	; 0x801953 <SS80p+0x1>
   14a4c:	86 01       	movw	r16, r12
   14a4e:	2b e9       	ldi	r18, 0x9B	; 155
   14a50:	3c e1       	ldi	r19, 0x1C	; 28
   14a52:	b5 01       	movw	r22, r10
   14a54:	a4 01       	movw	r20, r8
   14a56:	02 96       	adiw	r24, 0x02	; 2
   14a58:	0e 94 a8 8a 	call	0x11550	; 0x11550 <dbf_open_read>
   14a5c:	8c 01       	movw	r16, r24
   14a5e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14a62:	86 ff       	sbrs	r24, 6
   14a64:	04 c0       	rjmp	.+8      	; 0x14a6e <SS80_locate_and_read+0x19c>
   14a66:	85 ef       	ldi	r24, 0xF5	; 245
   14a68:	9d e0       	ldi	r25, 0x0D	; 13
   14a6a:	0e 94 68 8b 	call	0x116d0	; 0x116d0 <gpib_timer_elapsed_end>
   14a6e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14a72:	85 ff       	sbrs	r24, 5
   14a74:	0e c0       	rjmp	.+28     	; 0x14a92 <SS80_locate_and_read+0x1c0>
   14a76:	1f 93       	push	r17
   14a78:	0f 93       	push	r16
   14a7a:	1f 92       	push	r1
   14a7c:	88 85       	ldd	r24, Y+8	; 0x08
   14a7e:	8f 93       	push	r24
   14a80:	9f 81       	ldd	r25, Y+7	; 0x07
   14a82:	9f 93       	push	r25
   14a84:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   14a88:	0f 90       	pop	r0
   14a8a:	0f 90       	pop	r0
   14a8c:	0f 90       	pop	r0
   14a8e:	0f 90       	pop	r0
   14a90:	0f 90       	pop	r0
   14a92:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14a96:	17 ff       	sbrs	r17, 7
   14a98:	80 cf       	rjmp	.-256    	; 0x1499a <SS80_locate_and_read+0xc8>
   14a9a:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   14a9e:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   14aa2:	91 e0       	ldi	r25, 0x01	; 1
   14aa4:	92 83       	std	Z+2, r25	; 0x02
   14aa6:	80 ff       	sbrs	r24, 0
   14aa8:	0a c0       	rjmp	.+20     	; 0x14abe <SS80_locate_and_read+0x1ec>
   14aaa:	85 ea       	ldi	r24, 0xA5	; 165
   14aac:	9f e1       	ldi	r25, 0x1F	; 31
   14aae:	1f 92       	push	r1
   14ab0:	9f 93       	push	r25
   14ab2:	8f 93       	push	r24
   14ab4:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   14ab8:	0f 90       	pop	r0
   14aba:	0f 90       	pop	r0
   14abc:	0f 90       	pop	r0
   14abe:	cf de       	rcall	.-610    	; 0x1485e <SS80_error_return>
   14ac0:	6c c0       	rjmp	.+216    	; 0x14b9a <SS80_locate_and_read+0x2c8>
   14ac2:	62 01       	movw	r12, r4
   14ac4:	89 81       	ldd	r24, Y+1	; 0x01
   14ac6:	9a 81       	ldd	r25, Y+2	; 0x02
   14ac8:	91 60       	ori	r25, 0x01	; 1
   14aca:	9a 83       	std	Y+2, r25	; 0x02
   14acc:	89 83       	std	Y+1, r24	; 0x01
   14ace:	ae cf       	rjmp	.-164    	; 0x14a2c <SS80_locate_and_read+0x15a>
   14ad0:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   14ad4:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   14ad8:	32 82       	std	Z+2, r3	; 0x02
   14ada:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14ade:	80 ff       	sbrs	r24, 0
   14ae0:	0a c0       	rjmp	.+20     	; 0x14af6 <SS80_locate_and_read+0x224>
   14ae2:	1f 92       	push	r1
   14ae4:	ab 85       	ldd	r26, Y+11	; 0x0b
   14ae6:	af 93       	push	r26
   14ae8:	ba 85       	ldd	r27, Y+10	; 0x0a
   14aea:	bf 93       	push	r27
   14aec:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   14af0:	0f 90       	pop	r0
   14af2:	0f 90       	pop	r0
   14af4:	0f 90       	pop	r0
   14af6:	89 81       	ldd	r24, Y+1	; 0x01
   14af8:	9a 81       	ldd	r25, Y+2	; 0x02
   14afa:	88 27       	eor	r24, r24
   14afc:	90 7d       	andi	r25, 0xD0	; 208
   14afe:	89 2b       	or	r24, r25
   14b00:	09 f4       	brne	.+2      	; 0x14b04 <SS80_locate_and_read+0x232>
   14b02:	63 cf       	rjmp	.-314    	; 0x149ca <SS80_locate_and_read+0xf8>
   14b04:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   14b08:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   14b0c:	83 81       	ldd	r24, Z+3	; 0x03
   14b0e:	94 81       	ldd	r25, Z+4	; 0x04
   14b10:	80 62       	ori	r24, 0x20	; 32
   14b12:	94 83       	std	Z+4, r25	; 0x04
   14b14:	83 83       	std	Z+3, r24	; 0x03
   14b16:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14b1a:	80 ff       	sbrs	r24, 0
   14b1c:	23 c0       	rjmp	.+70     	; 0x14b64 <SS80_locate_and_read+0x292>
   14b1e:	87 e6       	ldi	r24, 0x67	; 103
   14b20:	9f e1       	ldi	r25, 0x1F	; 31
   14b22:	1f 92       	push	r1
   14b24:	9f 93       	push	r25
   14b26:	8f 93       	push	r24
   14b28:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   14b2c:	0f 90       	pop	r0
   14b2e:	0f 90       	pop	r0
   14b30:	0f 90       	pop	r0
   14b32:	18 c0       	rjmp	.+48     	; 0x14b64 <SS80_locate_and_read+0x292>
   14b34:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14b38:	85 ff       	sbrs	r24, 5
   14b3a:	14 c0       	rjmp	.+40     	; 0x14b64 <SS80_locate_and_read+0x292>
   14b3c:	9e 81       	ldd	r25, Y+6	; 0x06
   14b3e:	9f 93       	push	r25
   14b40:	ad 81       	ldd	r26, Y+5	; 0x05
   14b42:	af 93       	push	r26
   14b44:	bc 81       	ldd	r27, Y+4	; 0x04
   14b46:	bf 93       	push	r27
   14b48:	eb 81       	ldd	r30, Y+3	; 0x03
   14b4a:	ef 93       	push	r30
   14b4c:	8f e3       	ldi	r24, 0x3F	; 63
   14b4e:	9f e1       	ldi	r25, 0x1F	; 31
   14b50:	1f 92       	push	r1
   14b52:	9f 93       	push	r25
   14b54:	8f 93       	push	r24
   14b56:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   14b5a:	0f b6       	in	r0, 0x3f	; 63
   14b5c:	f8 94       	cli
   14b5e:	de bf       	out	0x3e, r29	; 62
   14b60:	0f be       	out	0x3f, r0	; 63
   14b62:	cd bf       	out	0x3d, r28	; 61
   14b64:	00 91 50 19 	lds	r16, 0x1950	; 0x801950 <SS80s>
   14b68:	10 91 51 19 	lds	r17, 0x1951	; 0x801951 <SS80s+0x1>
   14b6c:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   14b70:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   14b74:	27 a5       	ldd	r18, Z+47	; 0x2f
   14b76:	30 a9       	ldd	r19, Z+48	; 0x30
   14b78:	40 e0       	ldi	r20, 0x00	; 0
   14b7a:	50 e0       	ldi	r21, 0x00	; 0
   14b7c:	c5 01       	movw	r24, r10
   14b7e:	b4 01       	movw	r22, r8
   14b80:	0e 94 54 e8 	call	0x1d0a8	; 0x1d0a8 <__udivmodsi4>
   14b84:	d8 01       	movw	r26, r16
   14b86:	17 96       	adiw	r26, 0x07	; 7
   14b88:	2d 93       	st	X+, r18
   14b8a:	3d 93       	st	X+, r19
   14b8c:	4d 93       	st	X+, r20
   14b8e:	5c 93       	st	X, r21
   14b90:	1a 97       	sbiw	r26, 0x0a	; 10
   14b92:	89 81       	ldd	r24, Y+1	; 0x01
   14b94:	9a 81       	ldd	r25, Y+2	; 0x02
   14b96:	88 27       	eor	r24, r24
   14b98:	90 7d       	andi	r25, 0xD0	; 208
   14b9a:	2c 96       	adiw	r28, 0x0c	; 12
   14b9c:	e1 e1       	ldi	r30, 0x11	; 17
   14b9e:	0c 94 de e8 	jmp	0x1d1bc	; 0x1d1bc <__epilogue_restores__+0x2>

00014ba2 <SS80_Execute_State>:
   14ba2:	cf 93       	push	r28
   14ba4:	df 93       	push	r29
   14ba6:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   14baa:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   14bae:	81 81       	ldd	r24, Z+1	; 0x01
   14bb0:	90 e0       	ldi	r25, 0x00	; 0
   14bb2:	0e 94 3f 8c 	call	0x1187e	; 0x1187e <gpib_disable_PPR>
   14bb6:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   14bba:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   14bbe:	80 81       	ld	r24, Z
   14bc0:	91 81       	ldd	r25, Z+1	; 0x01
   14bc2:	82 30       	cpi	r24, 0x02	; 2
   14bc4:	91 05       	cpc	r25, r1
   14bc6:	89 f0       	breq	.+34     	; 0x14bea <SS80_Execute_State+0x48>
   14bc8:	3c f4       	brge	.+14     	; 0x14bd8 <SS80_Execute_State+0x36>
   14bca:	00 97       	sbiw	r24, 0x00	; 0
   14bcc:	91 f1       	breq	.+100    	; 0x14c32 <SS80_Execute_State+0x90>
   14bce:	81 30       	cpi	r24, 0x01	; 1
   14bd0:	91 05       	cpc	r25, r1
   14bd2:	b9 f4       	brne	.+46     	; 0x14c02 <SS80_Execute_State+0x60>
   14bd4:	7e de       	rcall	.-772    	; 0x148d2 <SS80_locate_and_read>
   14bd6:	0d c0       	rjmp	.+26     	; 0x14bf2 <SS80_Execute_State+0x50>
   14bd8:	83 30       	cpi	r24, 0x03	; 3
   14bda:	91 05       	cpc	r25, r1
   14bdc:	41 f0       	breq	.+16     	; 0x14bee <SS80_Execute_State+0x4c>
   14bde:	84 30       	cpi	r24, 0x04	; 4
   14be0:	91 05       	cpc	r25, r1
   14be2:	79 f4       	brne	.+30     	; 0x14c02 <SS80_Execute_State+0x60>
   14be4:	0e 94 9a 9c 	call	0x13934	; 0x13934 <SS80_describe>
   14be8:	04 c0       	rjmp	.+8      	; 0x14bf2 <SS80_Execute_State+0x50>
   14bea:	4f da       	rcall	.-2914   	; 0x1408a <SS80_locate_and_write>
   14bec:	02 c0       	rjmp	.+4      	; 0x14bf2 <SS80_Execute_State+0x50>
   14bee:	0e 94 19 9c 	call	0x13832	; 0x13832 <SS80_send_status>
   14bf2:	ec 01       	movw	r28, r24
   14bf4:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   14bf8:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   14bfc:	11 82       	std	Z+1, r1	; 0x01
   14bfe:	10 82       	st	Z, r1
   14c00:	1a c0       	rjmp	.+52     	; 0x14c36 <SS80_Execute_State+0x94>
   14c02:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   14c06:	20 ff       	sbrs	r18, 0
   14c08:	0e c0       	rjmp	.+28     	; 0x14c26 <SS80_Execute_State+0x84>
   14c0a:	9f 93       	push	r25
   14c0c:	8f 93       	push	r24
   14c0e:	83 e0       	ldi	r24, 0x03	; 3
   14c10:	90 e2       	ldi	r25, 0x20	; 32
   14c12:	1f 92       	push	r1
   14c14:	9f 93       	push	r25
   14c16:	8f 93       	push	r24
   14c18:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   14c1c:	0f 90       	pop	r0
   14c1e:	0f 90       	pop	r0
   14c20:	0f 90       	pop	r0
   14c22:	0f 90       	pop	r0
   14c24:	0f 90       	pop	r0
   14c26:	e0 91 50 19 	lds	r30, 0x1950	; 0x801950 <SS80s>
   14c2a:	f0 91 51 19 	lds	r31, 0x1951	; 0x801951 <SS80s+0x1>
   14c2e:	11 82       	std	Z+1, r1	; 0x01
   14c30:	10 82       	st	Z, r1
   14c32:	c0 e0       	ldi	r28, 0x00	; 0
   14c34:	d0 e0       	ldi	r29, 0x00	; 0
   14c36:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   14c3a:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   14c3e:	81 81       	ldd	r24, Z+1	; 0x01
   14c40:	90 e0       	ldi	r25, 0x00	; 0
   14c42:	0e 94 0e 8c 	call	0x1181c	; 0x1181c <gpib_enable_PPR>
   14c46:	ce 01       	movw	r24, r28
   14c48:	df 91       	pop	r29
   14c4a:	cf 91       	pop	r28
   14c4c:	08 95       	ret

00014c4e <SS80_COMMANDS>:
   14c4e:	1f 93       	push	r17
   14c50:	cf 93       	push	r28
   14c52:	df 93       	push	r29
   14c54:	18 2f       	mov	r17, r24
   14c56:	80 91 9f 1e 	lds	r24, 0x1E9F	; 0x801e9f <talking>
   14c5a:	90 e0       	ldi	r25, 0x00	; 0
   14c5c:	0e 94 17 92 	call	0x1242e	; 0x1242e <SS80_is_MTA>
   14c60:	89 2b       	or	r24, r25
   14c62:	19 f0       	breq	.+6      	; 0x14c6a <SS80_COMMANDS+0x1c>
   14c64:	15 36       	cpi	r17, 0x65	; 101
   14c66:	19 f5       	brne	.+70     	; 0x14cae <SS80_COMMANDS+0x60>
   14c68:	09 c0       	rjmp	.+18     	; 0x14c7c <SS80_COMMANDS+0x2e>
   14c6a:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   14c6e:	90 e0       	ldi	r25, 0x00	; 0
   14c70:	0e 94 06 92 	call	0x1240c	; 0x1240c <SS80_is_MLA>
   14c74:	ec 01       	movw	r28, r24
   14c76:	89 2b       	or	r24, r25
   14c78:	a9 f7       	brne	.-22     	; 0x14c64 <SS80_COMMANDS+0x16>
   14c7a:	ae c0       	rjmp	.+348    	; 0x14dd8 <SS80_COMMANDS+0x18a>
   14c7c:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   14c80:	90 e0       	ldi	r25, 0x00	; 0
   14c82:	0e 94 06 92 	call	0x1240c	; 0x1240c <SS80_is_MLA>
   14c86:	89 2b       	or	r24, r25
   14c88:	09 f4       	brne	.+2      	; 0x14c8c <SS80_COMMANDS+0x3e>
   14c8a:	a3 c0       	rjmp	.+326    	; 0x14dd2 <SS80_COMMANDS+0x184>
   14c8c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14c90:	85 ff       	sbrs	r24, 5
   14c92:	0a c0       	rjmp	.+20     	; 0x14ca8 <SS80_COMMANDS+0x5a>
   14c94:	81 ed       	ldi	r24, 0xD1	; 209
   14c96:	98 e1       	ldi	r25, 0x18	; 24
   14c98:	1f 92       	push	r1
   14c9a:	9f 93       	push	r25
   14c9c:	8f 93       	push	r24
   14c9e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   14ca2:	0f 90       	pop	r0
   14ca4:	0f 90       	pop	r0
   14ca6:	0f 90       	pop	r0
   14ca8:	0e 94 4c 9d 	call	0x13a98	; 0x13a98 <SS80_Command_State>
   14cac:	73 c0       	rjmp	.+230    	; 0x14d94 <SS80_COMMANDS+0x146>
   14cae:	1e 36       	cpi	r17, 0x6E	; 110
   14cb0:	01 f5       	brne	.+64     	; 0x14cf2 <SS80_COMMANDS+0xa4>
   14cb2:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   14cb6:	90 e0       	ldi	r25, 0x00	; 0
   14cb8:	0e 94 06 92 	call	0x1240c	; 0x1240c <SS80_is_MLA>
   14cbc:	89 2b       	or	r24, r25
   14cbe:	79 f0       	breq	.+30     	; 0x14cde <SS80_COMMANDS+0x90>
   14cc0:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14cc4:	85 ff       	sbrs	r24, 5
   14cc6:	13 c0       	rjmp	.+38     	; 0x14cee <SS80_COMMANDS+0xa0>
   14cc8:	8b eb       	ldi	r24, 0xBB	; 187
   14cca:	98 e1       	ldi	r25, 0x18	; 24
   14ccc:	1f 92       	push	r1
   14cce:	9f 93       	push	r25
   14cd0:	8f 93       	push	r24
   14cd2:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   14cd6:	0f 90       	pop	r0
   14cd8:	0f 90       	pop	r0
   14cda:	0f 90       	pop	r0
   14cdc:	08 c0       	rjmp	.+16     	; 0x14cee <SS80_COMMANDS+0xa0>
   14cde:	80 91 9f 1e 	lds	r24, 0x1E9F	; 0x801e9f <talking>
   14ce2:	90 e0       	ldi	r25, 0x00	; 0
   14ce4:	0e 94 17 92 	call	0x1242e	; 0x1242e <SS80_is_MTA>
   14ce8:	89 2b       	or	r24, r25
   14cea:	51 f7       	brne	.-44     	; 0x14cc0 <SS80_COMMANDS+0x72>
   14cec:	72 c0       	rjmp	.+228    	; 0x14dd2 <SS80_COMMANDS+0x184>
   14cee:	59 df       	rcall	.-334    	; 0x14ba2 <SS80_Execute_State>
   14cf0:	51 c0       	rjmp	.+162    	; 0x14d94 <SS80_COMMANDS+0x146>
   14cf2:	10 37       	cpi	r17, 0x70	; 112
   14cf4:	b9 f5       	brne	.+110    	; 0x14d64 <SS80_COMMANDS+0x116>
   14cf6:	80 91 9f 1e 	lds	r24, 0x1E9F	; 0x801e9f <talking>
   14cfa:	90 e0       	ldi	r25, 0x00	; 0
   14cfc:	0e 94 17 92 	call	0x1242e	; 0x1242e <SS80_is_MTA>
   14d00:	89 2b       	or	r24, r25
   14d02:	81 f0       	breq	.+32     	; 0x14d24 <SS80_COMMANDS+0xd6>
   14d04:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14d08:	85 ff       	sbrs	r24, 5
   14d0a:	0a c0       	rjmp	.+20     	; 0x14d20 <SS80_COMMANDS+0xd2>
   14d0c:	86 ea       	ldi	r24, 0xA6	; 166
   14d0e:	98 e1       	ldi	r25, 0x18	; 24
   14d10:	1f 92       	push	r1
   14d12:	9f 93       	push	r25
   14d14:	8f 93       	push	r24
   14d16:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   14d1a:	0f 90       	pop	r0
   14d1c:	0f 90       	pop	r0
   14d1e:	0f 90       	pop	r0
   14d20:	4b db       	rcall	.-2410   	; 0x143b8 <SS80_Report>
   14d22:	38 c0       	rjmp	.+112    	; 0x14d94 <SS80_COMMANDS+0x146>
   14d24:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   14d28:	90 e0       	ldi	r25, 0x00	; 0
   14d2a:	0e 94 06 92 	call	0x1240c	; 0x1240c <SS80_is_MLA>
   14d2e:	89 2b       	or	r24, r25
   14d30:	09 f4       	brne	.+2      	; 0x14d34 <SS80_COMMANDS+0xe6>
   14d32:	4f c0       	rjmp	.+158    	; 0x14dd2 <SS80_COMMANDS+0x184>
   14d34:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14d38:	85 ff       	sbrs	r24, 5
   14d3a:	0a c0       	rjmp	.+20     	; 0x14d50 <SS80_COMMANDS+0x102>
   14d3c:	87 e9       	ldi	r24, 0x97	; 151
   14d3e:	98 e1       	ldi	r25, 0x18	; 24
   14d40:	1f 92       	push	r1
   14d42:	9f 93       	push	r25
   14d44:	8f 93       	push	r24
   14d46:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   14d4a:	0f 90       	pop	r0
   14d4c:	0f 90       	pop	r0
   14d4e:	0f 90       	pop	r0
   14d50:	e0 91 52 19 	lds	r30, 0x1952	; 0x801952 <SS80p>
   14d54:	f0 91 53 19 	lds	r31, 0x1953	; 0x801953 <SS80p+0x1>
   14d58:	81 81       	ldd	r24, Z+1	; 0x01
   14d5a:	90 e0       	ldi	r25, 0x00	; 0
   14d5c:	0e 94 3f 8c 	call	0x1187e	; 0x1187e <gpib_disable_PPR>
   14d60:	18 dc       	rcall	.-2000   	; 0x14592 <SS80_Amigo_Clear>
   14d62:	18 c0       	rjmp	.+48     	; 0x14d94 <SS80_COMMANDS+0x146>
   14d64:	12 37       	cpi	r17, 0x72	; 114
   14d66:	c1 f4       	brne	.+48     	; 0x14d98 <SS80_COMMANDS+0x14a>
   14d68:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   14d6c:	90 e0       	ldi	r25, 0x00	; 0
   14d6e:	0e 94 06 92 	call	0x1240c	; 0x1240c <SS80_is_MLA>
   14d72:	89 2b       	or	r24, r25
   14d74:	89 f0       	breq	.+34     	; 0x14d98 <SS80_COMMANDS+0x14a>
   14d76:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14d7a:	85 ff       	sbrs	r24, 5
   14d7c:	0a c0       	rjmp	.+20     	; 0x14d92 <SS80_COMMANDS+0x144>
   14d7e:	83 e8       	ldi	r24, 0x83	; 131
   14d80:	98 e1       	ldi	r25, 0x18	; 24
   14d82:	1f 92       	push	r1
   14d84:	9f 93       	push	r25
   14d86:	8f 93       	push	r24
   14d88:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   14d8c:	0f 90       	pop	r0
   14d8e:	0f 90       	pop	r0
   14d90:	0f 90       	pop	r0
   14d92:	53 dc       	rcall	.-1882   	; 0x1463a <SS80_Transparent_State>
   14d94:	ec 01       	movw	r28, r24
   14d96:	3d c0       	rjmp	.+122    	; 0x14e12 <SS80_COMMANDS+0x1c4>
   14d98:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14d9c:	80 ff       	sbrs	r24, 0
   14d9e:	19 c0       	rjmp	.+50     	; 0x14dd2 <SS80_COMMANDS+0x184>
   14da0:	80 91 9f 1e 	lds	r24, 0x1E9F	; 0x801e9f <talking>
   14da4:	1f 92       	push	r1
   14da6:	8f 93       	push	r24
   14da8:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   14dac:	1f 92       	push	r1
   14dae:	8f 93       	push	r24
   14db0:	1f 92       	push	r1
   14db2:	1f 93       	push	r17
   14db4:	8f e4       	ldi	r24, 0x4F	; 79
   14db6:	98 e1       	ldi	r25, 0x18	; 24
   14db8:	1f 92       	push	r1
   14dba:	9f 93       	push	r25
   14dbc:	8f 93       	push	r24
   14dbe:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   14dc2:	8d b7       	in	r24, 0x3d	; 61
   14dc4:	9e b7       	in	r25, 0x3e	; 62
   14dc6:	09 96       	adiw	r24, 0x09	; 9
   14dc8:	0f b6       	in	r0, 0x3f	; 63
   14dca:	f8 94       	cli
   14dcc:	9e bf       	out	0x3e, r25	; 62
   14dce:	0f be       	out	0x3f, r0	; 63
   14dd0:	8d bf       	out	0x3d, r24	; 61
   14dd2:	c0 e0       	ldi	r28, 0x00	; 0
   14dd4:	d0 e0       	ldi	r29, 0x00	; 0
   14dd6:	1d c0       	rjmp	.+58     	; 0x14e12 <SS80_COMMANDS+0x1c4>
   14dd8:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14ddc:	80 ff       	sbrs	r24, 0
   14dde:	f9 cf       	rjmp	.-14     	; 0x14dd2 <SS80_COMMANDS+0x184>
   14de0:	80 91 9f 1e 	lds	r24, 0x1E9F	; 0x801e9f <talking>
   14de4:	1f 92       	push	r1
   14de6:	8f 93       	push	r24
   14de8:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   14dec:	1f 92       	push	r1
   14dee:	8f 93       	push	r24
   14df0:	1f 92       	push	r1
   14df2:	1f 93       	push	r17
   14df4:	8b e1       	ldi	r24, 0x1B	; 27
   14df6:	98 e1       	ldi	r25, 0x18	; 24
   14df8:	1f 92       	push	r1
   14dfa:	9f 93       	push	r25
   14dfc:	8f 93       	push	r24
   14dfe:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   14e02:	8d b7       	in	r24, 0x3d	; 61
   14e04:	9e b7       	in	r25, 0x3e	; 62
   14e06:	09 96       	adiw	r24, 0x09	; 9
   14e08:	0f b6       	in	r0, 0x3f	; 63
   14e0a:	f8 94       	cli
   14e0c:	9e bf       	out	0x3e, r25	; 62
   14e0e:	0f be       	out	0x3f, r0	; 63
   14e10:	8d bf       	out	0x3d, r24	; 61
   14e12:	ce 01       	movw	r24, r28
   14e14:	df 91       	pop	r29
   14e16:	cf 91       	pop	r28
   14e18:	1f 91       	pop	r17
   14e1a:	08 95       	ret

00014e1c <amigo_overflow_check>:
   14e1c:	cf 92       	push	r12
   14e1e:	df 92       	push	r13
   14e20:	ef 92       	push	r14
   14e22:	0f 93       	push	r16
   14e24:	1f 93       	push	r17
   14e26:	cf 93       	push	r28
   14e28:	df 93       	push	r29
   14e2a:	ec 01       	movw	r28, r24
   14e2c:	8b 01       	movw	r16, r22
   14e2e:	80 e0       	ldi	r24, 0x00	; 0
   14e30:	90 e0       	ldi	r25, 0x00	; 0
   14e32:	22 ef       	ldi	r18, 0xF2	; 242
   14e34:	37 e2       	ldi	r19, 0x27	; 39
   14e36:	69 01       	movw	r12, r18
   14e38:	2d 81       	ldd	r18, Y+5	; 0x05
   14e3a:	30 e0       	ldi	r19, 0x00	; 0
   14e3c:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   14e40:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   14e44:	47 a1       	ldd	r20, Z+39	; 0x27
   14e46:	50 a5       	ldd	r21, Z+40	; 0x28
   14e48:	24 17       	cp	r18, r20
   14e4a:	35 07       	cpc	r19, r21
   14e4c:	7c f1       	brlt	.+94     	; 0x14eac <amigo_overflow_check+0x90>
   14e4e:	1d 82       	std	Y+5, r1	; 0x05
   14e50:	2c 81       	ldd	r18, Y+4	; 0x04
   14e52:	2f 5f       	subi	r18, 0xFF	; 255
   14e54:	2c 83       	std	Y+4, r18	; 0x04
   14e56:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   14e5a:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   14e5e:	2c 81       	ldd	r18, Y+4	; 0x04
   14e60:	30 e0       	ldi	r19, 0x00	; 0
   14e62:	41 a5       	ldd	r20, Z+41	; 0x29
   14e64:	52 a5       	ldd	r21, Z+42	; 0x2a
   14e66:	24 17       	cp	r18, r20
   14e68:	35 07       	cpc	r19, r21
   14e6a:	34 f3       	brlt	.-52     	; 0x14e38 <amigo_overflow_check+0x1c>
   14e6c:	1c 82       	std	Y+4, r1	; 0x04
   14e6e:	2b 81       	ldd	r18, Y+3	; 0x03
   14e70:	2f 5f       	subi	r18, 0xFF	; 255
   14e72:	2b 83       	std	Y+3, r18	; 0x03
   14e74:	30 e0       	ldi	r19, 0x00	; 0
   14e76:	43 a5       	ldd	r20, Z+43	; 0x2b
   14e78:	54 a5       	ldd	r21, Z+44	; 0x2c
   14e7a:	24 17       	cp	r18, r20
   14e7c:	35 07       	cpc	r19, r21
   14e7e:	5c f3       	brlt	.-42     	; 0x14e56 <amigo_overflow_check+0x3a>
   14e80:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14e84:	80 ff       	sbrs	r24, 0
   14e86:	0f c0       	rjmp	.+30     	; 0x14ea6 <amigo_overflow_check+0x8a>
   14e88:	01 15       	cp	r16, r1
   14e8a:	11 05       	cpc	r17, r1
   14e8c:	61 f0       	breq	.+24     	; 0x14ea6 <amigo_overflow_check+0x8a>
   14e8e:	1f 93       	push	r17
   14e90:	0f 93       	push	r16
   14e92:	1f 92       	push	r1
   14e94:	df 92       	push	r13
   14e96:	cf 92       	push	r12
   14e98:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   14e9c:	0f 90       	pop	r0
   14e9e:	0f 90       	pop	r0
   14ea0:	0f 90       	pop	r0
   14ea2:	0f 90       	pop	r0
   14ea4:	0f 90       	pop	r0
   14ea6:	81 e0       	ldi	r24, 0x01	; 1
   14ea8:	90 e0       	ldi	r25, 0x00	; 0
   14eaa:	d5 cf       	rjmp	.-86     	; 0x14e56 <amigo_overflow_check+0x3a>
   14eac:	df 91       	pop	r29
   14eae:	cf 91       	pop	r28
   14eb0:	1f 91       	pop	r17
   14eb2:	0f 91       	pop	r16
   14eb4:	ef 90       	pop	r14
   14eb6:	df 90       	pop	r13
   14eb8:	cf 90       	pop	r12
   14eba:	08 95       	ret

00014ebc <amigo_chs_to_logical>:
   14ebc:	a0 e0       	ldi	r26, 0x00	; 0
   14ebe:	b0 e0       	ldi	r27, 0x00	; 0
   14ec0:	e4 e6       	ldi	r30, 0x64	; 100
   14ec2:	f7 ea       	ldi	r31, 0xA7	; 167
   14ec4:	0c 94 ca e8 	jmp	0x1d194	; 0x1d194 <__prologue_saves__+0x12>
   14ec8:	dc 01       	movw	r26, r24
   14eca:	d6 2f       	mov	r29, r22
   14ecc:	17 2f       	mov	r17, r23
   14ece:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   14ed2:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   14ed6:	87 a1       	ldd	r24, Z+39	; 0x27
   14ed8:	90 a5       	ldd	r25, Z+40	; 0x28
   14eda:	14 96       	adiw	r26, 0x04	; 4
   14edc:	cc 91       	ld	r28, X
   14ede:	14 97       	sbiw	r26, 0x04	; 4
   14ee0:	c8 9f       	mul	r28, r24
   14ee2:	90 01       	movw	r18, r0
   14ee4:	c9 9f       	mul	r28, r25
   14ee6:	30 0d       	add	r19, r0
   14ee8:	11 24       	eor	r1, r1
   14eea:	a9 01       	movw	r20, r18
   14eec:	33 0f       	add	r19, r19
   14eee:	66 0b       	sbc	r22, r22
   14ef0:	77 0b       	sbc	r23, r23
   14ef2:	13 96       	adiw	r26, 0x03	; 3
   14ef4:	0c 91       	ld	r16, X
   14ef6:	13 97       	sbiw	r26, 0x03	; 3
   14ef8:	21 a5       	ldd	r18, Z+41	; 0x29
   14efa:	32 a5       	ldd	r19, Z+42	; 0x2a
   14efc:	82 9f       	mul	r24, r18
   14efe:	70 01       	movw	r14, r0
   14f00:	83 9f       	mul	r24, r19
   14f02:	f0 0c       	add	r15, r0
   14f04:	92 9f       	mul	r25, r18
   14f06:	f0 0c       	add	r15, r0
   14f08:	11 24       	eor	r1, r1
   14f0a:	0e 9d       	mul	r16, r14
   14f0c:	90 01       	movw	r18, r0
   14f0e:	0f 9d       	mul	r16, r15
   14f10:	30 0d       	add	r19, r0
   14f12:	11 24       	eor	r1, r1
   14f14:	69 01       	movw	r12, r18
   14f16:	33 0f       	add	r19, r19
   14f18:	ee 08       	sbc	r14, r14
   14f1a:	ff 08       	sbc	r15, r15
   14f1c:	4c 0d       	add	r20, r12
   14f1e:	5d 1d       	adc	r21, r13
   14f20:	6e 1d       	adc	r22, r14
   14f22:	7f 1d       	adc	r23, r15
   14f24:	15 96       	adiw	r26, 0x05	; 5
   14f26:	bc 90       	ld	r11, X
   14f28:	9a 01       	movw	r18, r20
   14f2a:	ab 01       	movw	r20, r22
   14f2c:	2b 0d       	add	r18, r11
   14f2e:	31 1d       	adc	r19, r1
   14f30:	41 1d       	adc	r20, r1
   14f32:	51 1d       	adc	r21, r1
   14f34:	a5 a1       	ldd	r26, Z+37	; 0x25
   14f36:	b6 a1       	ldd	r27, Z+38	; 0x26
   14f38:	0e 94 ab e8 	call	0x1d156	; 0x1d156 <__mulshisi3>
   14f3c:	6b 01       	movw	r12, r22
   14f3e:	7c 01       	movw	r14, r24
   14f40:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   14f44:	85 ff       	sbrs	r24, 5
   14f46:	22 c0       	rjmp	.+68     	; 0x14f8c <amigo_chs_to_logical+0xd0>
   14f48:	1f 92       	push	r1
   14f4a:	bf 92       	push	r11
   14f4c:	1f 92       	push	r1
   14f4e:	cf 93       	push	r28
   14f50:	1f 92       	push	r1
   14f52:	0f 93       	push	r16
   14f54:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   14f58:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   14f5c:	81 81       	ldd	r24, Z+1	; 0x01
   14f5e:	1f 92       	push	r1
   14f60:	8f 93       	push	r24
   14f62:	ff 92       	push	r15
   14f64:	ef 92       	push	r14
   14f66:	df 92       	push	r13
   14f68:	cf 92       	push	r12
   14f6a:	1f 93       	push	r17
   14f6c:	df 93       	push	r29
   14f6e:	8f e9       	ldi	r24, 0x9F	; 159
   14f70:	97 e2       	ldi	r25, 0x27	; 39
   14f72:	1f 92       	push	r1
   14f74:	9f 93       	push	r25
   14f76:	8f 93       	push	r24
   14f78:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   14f7c:	8d b7       	in	r24, 0x3d	; 61
   14f7e:	9e b7       	in	r25, 0x3e	; 62
   14f80:	41 96       	adiw	r24, 0x11	; 17
   14f82:	0f b6       	in	r0, 0x3f	; 63
   14f84:	f8 94       	cli
   14f86:	9e bf       	out	0x3e, r25	; 62
   14f88:	0f be       	out	0x3f, r0	; 63
   14f8a:	8d bf       	out	0x3d, r24	; 61
   14f8c:	b6 01       	movw	r22, r12
   14f8e:	c7 01       	movw	r24, r14
   14f90:	cd b7       	in	r28, 0x3d	; 61
   14f92:	de b7       	in	r29, 0x3e	; 62
   14f94:	e9 e0       	ldi	r30, 0x09	; 9
   14f96:	0c 94 e6 e8 	jmp	0x1d1cc	; 0x1d1cc <__epilogue_restores__+0x12>

00014f9a <amigo_init>:
   14f9a:	ef 92       	push	r14
   14f9c:	ff 92       	push	r15
   14f9e:	0f 93       	push	r16
   14fa0:	1f 93       	push	r17
   14fa2:	cf 93       	push	r28
   14fa4:	df 93       	push	r29
   14fa6:	05 ea       	ldi	r16, 0xA5	; 165
   14fa8:	1e e1       	ldi	r17, 0x1E	; 30
   14faa:	c7 e0       	ldi	r28, 0x07	; 7
   14fac:	d0 e0       	ldi	r29, 0x00	; 0
   14fae:	84 e0       	ldi	r24, 0x04	; 4
   14fb0:	f8 2e       	mov	r15, r24
   14fb2:	92 e0       	ldi	r25, 0x02	; 2
   14fb4:	e9 2e       	mov	r14, r25
   14fb6:	d8 01       	movw	r26, r16
   14fb8:	d1 96       	adiw	r26, 0x31	; 49
   14fba:	8c 91       	ld	r24, X
   14fbc:	81 30       	cpi	r24, 0x01	; 1
   14fbe:	31 f5       	brne	.+76     	; 0x1500c <amigo_init+0x72>
   14fc0:	ce 01       	movw	r24, r28
   14fc2:	0e 94 9c b5 	call	0x16b38	; 0x16b38 <set_active_device>
   14fc6:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   14fca:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   14fce:	10 82       	st	Z, r1
   14fd0:	9f 01       	movw	r18, r30
   14fd2:	27 5f       	subi	r18, 0xF7	; 247
   14fd4:	3f 4f       	sbci	r19, 0xFF	; 255
   14fd6:	d9 01       	movw	r26, r18
   14fd8:	8f 2d       	mov	r24, r15
   14fda:	1d 92       	st	X+, r1
   14fdc:	8a 95       	dec	r24
   14fde:	e9 f7       	brne	.-6      	; 0x14fda <amigo_init+0x40>
   14fe0:	2c 5f       	subi	r18, 0xFC	; 252
   14fe2:	3f 4f       	sbci	r19, 0xFF	; 255
   14fe4:	d9 01       	movw	r26, r18
   14fe6:	8f 2d       	mov	r24, r15
   14fe8:	1d 92       	st	X+, r1
   14fea:	8a 95       	dec	r24
   14fec:	e9 f7       	brne	.-6      	; 0x14fe8 <amigo_init+0x4e>
   14fee:	11 82       	std	Z+1, r1	; 0x01
   14ff0:	15 82       	std	Z+5, r1	; 0x05
   14ff2:	14 82       	std	Z+4, r1	; 0x04
   14ff4:	13 82       	std	Z+3, r1	; 0x03
   14ff6:	e6 82       	std	Z+6, r14	; 0x06
   14ff8:	10 86       	std	Z+8, r1	; 0x08
   14ffa:	17 82       	std	Z+7, r1	; 0x07
   14ffc:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   15000:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   15004:	81 81       	ldd	r24, Z+1	; 0x01
   15006:	90 e0       	ldi	r25, 0x00	; 0
   15008:	0e 94 3f 8c 	call	0x1187e	; 0x1187e <gpib_disable_PPR>
   1500c:	21 97       	sbiw	r28, 0x01	; 1
   1500e:	07 50       	subi	r16, 0x07	; 7
   15010:	11 09       	sbc	r17, r1
   15012:	cf 3f       	cpi	r28, 0xFF	; 255
   15014:	af ef       	ldi	r26, 0xFF	; 255
   15016:	da 07       	cpc	r29, r26
   15018:	71 f6       	brne	.-100    	; 0x14fb6 <amigo_init+0x1c>
   1501a:	cd b7       	in	r28, 0x3d	; 61
   1501c:	de b7       	in	r29, 0x3e	; 62
   1501e:	e6 e0       	ldi	r30, 0x06	; 6
   15020:	0c 94 e9 e8 	jmp	0x1d1d2	; 0x1d1d2 <__epilogue_restores__+0x18>

00015024 <amigo_request_logical_address>:
   15024:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   15028:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   1502c:	15 86       	std	Z+13, r1	; 0x0d
   1502e:	83 81       	ldd	r24, Z+3	; 0x03
   15030:	86 87       	std	Z+14, r24	; 0x0e
   15032:	84 81       	ldd	r24, Z+4	; 0x04
   15034:	87 87       	std	Z+15, r24	; 0x0f
   15036:	85 81       	ldd	r24, Z+5	; 0x05
   15038:	80 8b       	std	Z+16, r24	; 0x10
   1503a:	80 e0       	ldi	r24, 0x00	; 0
   1503c:	90 e0       	ldi	r25, 0x00	; 0
   1503e:	08 95       	ret

00015040 <amigo_request_status>:
   15040:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15044:	85 ff       	sbrs	r24, 5
   15046:	0a c0       	rjmp	.+20     	; 0x1505c <amigo_request_status+0x1c>
   15048:	82 e7       	ldi	r24, 0x72	; 114
   1504a:	98 e2       	ldi	r25, 0x28	; 40
   1504c:	1f 92       	push	r1
   1504e:	9f 93       	push	r25
   15050:	8f 93       	push	r24
   15052:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   15056:	0f 90       	pop	r0
   15058:	0f 90       	pop	r0
   1505a:	0f 90       	pop	r0
   1505c:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   15060:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   15064:	11 86       	std	Z+9, r1	; 0x09
   15066:	81 81       	ldd	r24, Z+1	; 0x01
   15068:	82 87       	std	Z+10, r24	; 0x0a
   1506a:	8d e0       	ldi	r24, 0x0D	; 13
   1506c:	83 87       	std	Z+11, r24	; 0x0b
   1506e:	14 86       	std	Z+12, r1	; 0x0c
   15070:	0e 94 b4 72 	call	0xe568	; 0xe568 <mmc_wp_status>
   15074:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   15078:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   1507c:	89 2b       	or	r24, r25
   1507e:	19 f0       	breq	.+6      	; 0x15086 <amigo_request_status+0x46>
   15080:	84 85       	ldd	r24, Z+12	; 0x0c
   15082:	80 66       	ori	r24, 0x60	; 96
   15084:	84 87       	std	Z+12, r24	; 0x0c
   15086:	86 81       	ldd	r24, Z+6	; 0x06
   15088:	82 30       	cpi	r24, 0x02	; 2
   1508a:	31 f4       	brne	.+12     	; 0x15098 <amigo_request_status+0x58>
   1508c:	83 e1       	ldi	r24, 0x13	; 19
   1508e:	81 87       	std	Z+9, r24	; 0x09
   15090:	84 85       	ldd	r24, Z+12	; 0x0c
   15092:	88 60       	ori	r24, 0x08	; 8
   15094:	84 87       	std	Z+12, r24	; 0x0c
   15096:	21 c0       	rjmp	.+66     	; 0x150da <amigo_request_status+0x9a>
   15098:	27 81       	ldd	r18, Z+7	; 0x07
   1509a:	30 85       	ldd	r19, Z+8	; 0x08
   1509c:	21 15       	cp	r18, r1
   1509e:	31 05       	cpc	r19, r1
   150a0:	11 f4       	brne	.+4      	; 0x150a6 <amigo_request_status+0x66>
   150a2:	81 30       	cpi	r24, 0x01	; 1
   150a4:	d1 f4       	brne	.+52     	; 0x150da <amigo_request_status+0x9a>
   150a6:	26 fd       	sbrc	r18, 6
   150a8:	0c c0       	rjmp	.+24     	; 0x150c2 <amigo_request_status+0x82>
   150aa:	25 ff       	sbrs	r18, 5
   150ac:	03 c0       	rjmp	.+6      	; 0x150b4 <amigo_request_status+0x74>
   150ae:	8a e0       	ldi	r24, 0x0A	; 10
   150b0:	81 87       	std	Z+9, r24	; 0x09
   150b2:	0d c0       	rjmp	.+26     	; 0x150ce <amigo_request_status+0x8e>
   150b4:	84 85       	ldd	r24, Z+12	; 0x0c
   150b6:	24 ff       	sbrs	r18, 4
   150b8:	02 c0       	rjmp	.+4      	; 0x150be <amigo_request_status+0x7e>
   150ba:	83 60       	ori	r24, 0x03	; 3
   150bc:	07 c0       	rjmp	.+14     	; 0x150cc <amigo_request_status+0x8c>
   150be:	21 ff       	sbrs	r18, 1
   150c0:	02 c0       	rjmp	.+4      	; 0x150c6 <amigo_request_status+0x86>
   150c2:	83 e1       	ldi	r24, 0x13	; 19
   150c4:	f5 cf       	rjmp	.-22     	; 0x150b0 <amigo_request_status+0x70>
   150c6:	22 ff       	sbrs	r18, 2
{
#ifdef ESP8266
    hspi_RX((uint8_t *) data,count);
#endif
#ifdef AVR
    SPI0_RX((uint8_t *)data,count);
   150c8:	02 c0       	rjmp	.+4      	; 0x150ce <amigo_request_status+0x8e>
   150ca:	84 60       	ori	r24, 0x04	; 4
   150cc:	84 87       	std	Z+12, r24	; 0x0c
   150ce:	84 85       	ldd	r24, Z+12	; 0x0c
   150d0:	80 61       	ori	r24, 0x10	; 16
   150d2:	84 87       	std	Z+12, r24	; 0x0c
   150d4:	83 85       	ldd	r24, Z+11	; 0x0b
   150d6:	80 68       	ori	r24, 0x80	; 128
   150d8:	83 87       	std	Z+11, r24	; 0x0b
   150da:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   150de:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   150e2:	81 81       	ldd	r24, Z+1	; 0x01
   150e4:	90 e0       	ldi	r25, 0x00	; 0
   150e6:	0e 94 0e 8c 	call	0x1181c	; 0x1181c <gpib_enable_PPR>
   150ea:	80 e0       	ldi	r24, 0x00	; 0
   150ec:	90 e0       	ldi	r25, 0x00	; 0
   150ee:	08 95       	ret

000150f0 <amigo_send_logical_address>:
   150f0:	a2 e0       	ldi	r26, 0x02	; 2
   150f2:	b0 e0       	ldi	r27, 0x00	; 0
   150f4:	ee e7       	ldi	r30, 0x7E	; 126
   150f6:	f8 ea       	ldi	r31, 0xA8	; 168
   150f8:	0c 94 d1 e8 	jmp	0x1d1a2	; 0x1d1a2 <__prologue_saves__+0x20>
   150fc:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15100:	85 ff       	sbrs	r24, 5
   15102:	0a c0       	rjmp	.+20     	; 0x15118 <amigo_send_logical_address+0x28>
   15104:	84 e5       	ldi	r24, 0x54	; 84
   15106:	98 e2       	ldi	r25, 0x28	; 40
   15108:	1f 92       	push	r1
   1510a:	9f 93       	push	r25
   1510c:	8f 93       	push	r24
   1510e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   15112:	0f 90       	pop	r0
   15114:	0f 90       	pop	r0
   15116:	0f 90       	pop	r0
   15118:	80 e0       	ldi	r24, 0x00	; 0
   1511a:	91 e0       	ldi	r25, 0x01	; 1
   1511c:	9a 83       	std	Y+2, r25	; 0x02
   1511e:	89 83       	std	Y+1, r24	; 0x01
   15120:	80 91 4c 19 	lds	r24, 0x194C	; 0x80194c <AMIGOs>
   15124:	90 91 4d 19 	lds	r25, 0x194D	; 0x80194d <AMIGOs+0x1>
   15128:	ae 01       	movw	r20, r28
   1512a:	4f 5f       	subi	r20, 0xFF	; 255
   1512c:	5f 4f       	sbci	r21, 0xFF	; 255
   1512e:	64 e0       	ldi	r22, 0x04	; 4
   15130:	70 e0       	ldi	r23, 0x00	; 0
   15132:	0d 96       	adiw	r24, 0x0d	; 13
   15134:	0e 94 5e 91 	call	0x122bc	; 0x122bc <gpib_write_str>
   15138:	29 81       	ldd	r18, Y+1	; 0x01
   1513a:	3a 81       	ldd	r19, Y+2	; 0x02
   1513c:	22 27       	eor	r18, r18
   1513e:	30 7d       	andi	r19, 0xD0	; 208
   15140:	23 2b       	or	r18, r19
   15142:	49 f0       	breq	.+18     	; 0x15156 <amigo_send_logical_address+0x66>
   15144:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   15148:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   1514c:	27 81       	ldd	r18, Z+7	; 0x07
   1514e:	30 85       	ldd	r19, Z+8	; 0x08
   15150:	20 62       	ori	r18, 0x20	; 32
   15152:	30 87       	std	Z+8, r19	; 0x08
   15154:	27 83       	std	Z+7, r18	; 0x07
   15156:	04 97       	sbiw	r24, 0x04	; 4
   15158:	c9 f0       	breq	.+50     	; 0x1518c <amigo_send_logical_address+0x9c>
   1515a:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   1515e:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   15162:	87 81       	ldd	r24, Z+7	; 0x07
   15164:	90 85       	ldd	r25, Z+8	; 0x08
   15166:	80 62       	ori	r24, 0x20	; 32
   15168:	90 87       	std	Z+8, r25	; 0x08
   1516a:	87 83       	std	Z+7, r24	; 0x07
   1516c:	81 e0       	ldi	r24, 0x01	; 1
   1516e:	86 83       	std	Z+6, r24	; 0x06
   15170:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15174:	80 ff       	sbrs	r24, 0
   15176:	0a c0       	rjmp	.+20     	; 0x1518c <amigo_send_logical_address+0x9c>
   15178:	8a e3       	ldi	r24, 0x3A	; 58
   1517a:	98 e2       	ldi	r25, 0x28	; 40
   1517c:	1f 92       	push	r1
   1517e:	9f 93       	push	r25
   15180:	8f 93       	push	r24
   15182:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   15186:	0f 90       	pop	r0
   15188:	0f 90       	pop	r0
   1518a:	0f 90       	pop	r0
   1518c:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   15190:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   15194:	81 81       	ldd	r24, Z+1	; 0x01
   15196:	90 e0       	ldi	r25, 0x00	; 0
   15198:	0e 94 0e 8c 	call	0x1181c	; 0x1181c <gpib_enable_PPR>
   1519c:	89 81       	ldd	r24, Y+1	; 0x01
   1519e:	9a 81       	ldd	r25, Y+2	; 0x02
   151a0:	88 27       	eor	r24, r24
   151a2:	90 7d       	andi	r25, 0xD0	; 208
   151a4:	22 96       	adiw	r28, 0x02	; 2
   151a6:	e2 e0       	ldi	r30, 0x02	; 2
   151a8:	0c 94 ed e8 	jmp	0x1d1da	; 0x1d1da <__epilogue_restores__+0x20>

000151ac <amigo_send_status>:
   151ac:	a2 e0       	ldi	r26, 0x02	; 2
   151ae:	b0 e0       	ldi	r27, 0x00	; 0
   151b0:	ec ed       	ldi	r30, 0xDC	; 220
   151b2:	f8 ea       	ldi	r31, 0xA8	; 168
   151b4:	0c 94 d1 e8 	jmp	0x1d1a2	; 0x1d1a2 <__prologue_saves__+0x20>
   151b8:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   151bc:	85 ff       	sbrs	r24, 5
   151be:	0a c0       	rjmp	.+20     	; 0x151d4 <amigo_send_status+0x28>
   151c0:	85 e2       	ldi	r24, 0x25	; 37
   151c2:	98 e2       	ldi	r25, 0x28	; 40
   151c4:	1f 92       	push	r1
   151c6:	9f 93       	push	r25
   151c8:	8f 93       	push	r24
   151ca:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   151ce:	0f 90       	pop	r0
   151d0:	0f 90       	pop	r0
   151d2:	0f 90       	pop	r0
   151d4:	80 e0       	ldi	r24, 0x00	; 0
   151d6:	91 e0       	ldi	r25, 0x01	; 1
   151d8:	9a 83       	std	Y+2, r25	; 0x02
   151da:	89 83       	std	Y+1, r24	; 0x01
   151dc:	80 91 4c 19 	lds	r24, 0x194C	; 0x80194c <AMIGOs>
   151e0:	90 91 4d 19 	lds	r25, 0x194D	; 0x80194d <AMIGOs+0x1>
   151e4:	ae 01       	movw	r20, r28
   151e6:	4f 5f       	subi	r20, 0xFF	; 255
   151e8:	5f 4f       	sbci	r21, 0xFF	; 255
   151ea:	64 e0       	ldi	r22, 0x04	; 4
   151ec:	70 e0       	ldi	r23, 0x00	; 0
   151ee:	09 96       	adiw	r24, 0x09	; 9
   151f0:	0e 94 5e 91 	call	0x122bc	; 0x122bc <gpib_write_str>
   151f4:	29 81       	ldd	r18, Y+1	; 0x01
   151f6:	3a 81       	ldd	r19, Y+2	; 0x02
   151f8:	22 27       	eor	r18, r18
   151fa:	30 7d       	andi	r19, 0xD0	; 208
   151fc:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   15200:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   15204:	23 2b       	or	r18, r19
   15206:	29 f0       	breq	.+10     	; 0x15212 <amigo_send_status+0x66>
   15208:	27 81       	ldd	r18, Z+7	; 0x07
   1520a:	30 85       	ldd	r19, Z+8	; 0x08
   1520c:	20 62       	ori	r18, 0x20	; 32
   1520e:	30 87       	std	Z+8, r19	; 0x08
   15210:	27 83       	std	Z+7, r18	; 0x07
   15212:	04 97       	sbiw	r24, 0x04	; 4
   15214:	b1 f0       	breq	.+44     	; 0x15242 <amigo_send_status+0x96>
   15216:	87 81       	ldd	r24, Z+7	; 0x07
   15218:	90 85       	ldd	r25, Z+8	; 0x08
   1521a:	80 62       	ori	r24, 0x20	; 32
   1521c:	90 87       	std	Z+8, r25	; 0x08
   1521e:	87 83       	std	Z+7, r24	; 0x07
   15220:	81 e0       	ldi	r24, 0x01	; 1
   15222:	86 83       	std	Z+6, r24	; 0x06
   15224:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15228:	80 ff       	sbrs	r24, 0
   1522a:	0e c0       	rjmp	.+28     	; 0x15248 <amigo_send_status+0x9c>
   1522c:	8b e0       	ldi	r24, 0x0B	; 11
   1522e:	98 e2       	ldi	r25, 0x28	; 40
   15230:	1f 92       	push	r1
   15232:	9f 93       	push	r25
   15234:	8f 93       	push	r24
   15236:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1523a:	0f 90       	pop	r0
   1523c:	0f 90       	pop	r0
   1523e:	0f 90       	pop	r0
   15240:	03 c0       	rjmp	.+6      	; 0x15248 <amigo_send_status+0x9c>
   15242:	10 86       	std	Z+8, r1	; 0x08
   15244:	17 82       	std	Z+7, r1	; 0x07
   15246:	16 82       	std	Z+6, r1	; 0x06
   15248:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   1524c:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   15250:	81 81       	ldd	r24, Z+1	; 0x01
   15252:	90 e0       	ldi	r25, 0x00	; 0
   15254:	0e 94 0e 8c 	call	0x1181c	; 0x1181c <gpib_enable_PPR>
   15258:	89 81       	ldd	r24, Y+1	; 0x01
   1525a:	9a 81       	ldd	r25, Y+2	; 0x02
   1525c:	88 27       	eor	r24, r24
   1525e:	90 7d       	andi	r25, 0xD0	; 208
   15260:	22 96       	adiw	r28, 0x02	; 2
   15262:	e2 e0       	ldi	r30, 0x02	; 2
   15264:	0c 94 ed e8 	jmp	0x1d1da	; 0x1d1da <__epilogue_restores__+0x20>

00015268 <amigo_increment>:
   15268:	a1 e1       	ldi	r26, 0x11	; 17
   1526a:	b0 e0       	ldi	r27, 0x00	; 0
   1526c:	ea e3       	ldi	r30, 0x3A	; 58
   1526e:	f9 ea       	ldi	r31, 0xA9	; 169
   15270:	0c 94 d1 e8 	jmp	0x1d1a2	; 0x1d1a2 <__prologue_saves__+0x20>
   15274:	bc 01       	movw	r22, r24
   15276:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   1527a:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   1527e:	91 e1       	ldi	r25, 0x11	; 17
   15280:	de 01       	movw	r26, r28
   15282:	11 96       	adiw	r26, 0x01	; 1
   15284:	01 90       	ld	r0, Z+
   15286:	0d 92       	st	X+, r0
   15288:	9a 95       	dec	r25
   1528a:	e1 f7       	brne	.-8      	; 0x15284 <amigo_increment+0x1c>
   1528c:	9e 81       	ldd	r25, Y+6	; 0x06
   1528e:	9f 5f       	subi	r25, 0xFF	; 255
   15290:	9e 83       	std	Y+6, r25	; 0x06
   15292:	ce 01       	movw	r24, r28
   15294:	01 96       	adiw	r24, 0x01	; 1
   15296:	c2 dd       	rcall	.-1148   	; 0x14e1c <amigo_overflow_check>
   15298:	00 97       	sbiw	r24, 0x00	; 0
   1529a:	59 f4       	brne	.+22     	; 0x152b2 <amigo_increment+0x4a>
   1529c:	a0 91 4c 19 	lds	r26, 0x194C	; 0x80194c <AMIGOs>
   152a0:	b0 91 4d 19 	lds	r27, 0x194D	; 0x80194d <AMIGOs+0x1>
   152a4:	21 e1       	ldi	r18, 0x11	; 17
   152a6:	fe 01       	movw	r30, r28
   152a8:	31 96       	adiw	r30, 0x01	; 1
   152aa:	01 90       	ld	r0, Z+
   152ac:	0d 92       	st	X+, r0
   152ae:	2a 95       	dec	r18
   152b0:	e1 f7       	brne	.-8      	; 0x152aa <amigo_increment+0x42>
   152b2:	61 96       	adiw	r28, 0x11	; 17
   152b4:	e2 e0       	ldi	r30, 0x02	; 2
   152b6:	0c 94 ed e8 	jmp	0x1d1da	; 0x1d1da <__epilogue_restores__+0x20>

000152ba <amigo_seek>:
   152ba:	0f 93       	push	r16
   152bc:	1f 93       	push	r17
   152be:	cf 93       	push	r28
   152c0:	df 93       	push	r29
   152c2:	ec 01       	movw	r28, r24
   152c4:	6b ed       	ldi	r22, 0xDB	; 219
   152c6:	72 e1       	ldi	r23, 0x12	; 18
   152c8:	a9 dd       	rcall	.-1198   	; 0x14e1c <amigo_overflow_check>
   152ca:	8c 01       	movw	r16, r24
   152cc:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   152d0:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   152d4:	89 2b       	or	r24, r25
   152d6:	41 f0       	breq	.+16     	; 0x152e8 <amigo_seek+0x2e>
   152d8:	81 e0       	ldi	r24, 0x01	; 1
   152da:	86 83       	std	Z+6, r24	; 0x06
   152dc:	87 81       	ldd	r24, Z+7	; 0x07
   152de:	90 85       	ldd	r25, Z+8	; 0x08
   152e0:	84 60       	ori	r24, 0x04	; 4
   152e2:	90 87       	std	Z+8, r25	; 0x08
   152e4:	87 83       	std	Z+7, r24	; 0x07
   152e6:	06 c0       	rjmp	.+12     	; 0x152f4 <amigo_seek+0x3a>
   152e8:	8d 81       	ldd	r24, Y+5	; 0x05
   152ea:	85 83       	std	Z+5, r24	; 0x05
   152ec:	8c 81       	ldd	r24, Y+4	; 0x04
   152ee:	84 83       	std	Z+4, r24	; 0x04
   152f0:	8b 81       	ldd	r24, Y+3	; 0x03
   152f2:	83 83       	std	Z+3, r24	; 0x03
   152f4:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   152f8:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   152fc:	81 81       	ldd	r24, Z+1	; 0x01
   152fe:	90 e0       	ldi	r25, 0x00	; 0
   15300:	0e 94 0e 8c 	call	0x1181c	; 0x1181c <gpib_enable_PPR>
   15304:	c8 01       	movw	r24, r16
   15306:	df 91       	pop	r29
   15308:	cf 91       	pop	r28
   1530a:	1f 91       	pop	r17
   1530c:	0f 91       	pop	r16
   1530e:	08 95       	ret

00015310 <amigo_verify>:
   15310:	8f 92       	push	r8
   15312:	9f 92       	push	r9
   15314:	af 92       	push	r10
   15316:	bf 92       	push	r11
   15318:	ef 92       	push	r14
   1531a:	ff 92       	push	r15
   1531c:	0f 93       	push	r16
   1531e:	1f 93       	push	r17
   15320:	cf 93       	push	r28
   15322:	df 93       	push	r29
   15324:	7c 01       	movw	r14, r24
   15326:	60 ee       	ldi	r22, 0xE0	; 224
   15328:	72 e1       	ldi	r23, 0x12	; 18
   1532a:	80 91 4c 19 	lds	r24, 0x194C	; 0x80194c <AMIGOs>
   1532e:	90 91 4d 19 	lds	r25, 0x194D	; 0x80194d <AMIGOs+0x1>
   15332:	c4 dd       	rcall	.-1144   	; 0x14ebc <amigo_chs_to_logical>
   15334:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   15338:	25 ff       	sbrs	r18, 5
   1533a:	15 c0       	rjmp	.+42     	; 0x15366 <amigo_verify+0x56>
   1533c:	ff 92       	push	r15
   1533e:	ef 92       	push	r14
   15340:	9f 93       	push	r25
   15342:	8f 93       	push	r24
   15344:	7f 93       	push	r23
   15346:	6f 93       	push	r22
   15348:	8a ec       	ldi	r24, 0xCA	; 202
   1534a:	97 e2       	ldi	r25, 0x27	; 39
   1534c:	1f 92       	push	r1
   1534e:	9f 93       	push	r25
   15350:	8f 93       	push	r24
   15352:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   15356:	8d b7       	in	r24, 0x3d	; 61
   15358:	9e b7       	in	r25, 0x3e	; 62
   1535a:	09 96       	adiw	r24, 0x09	; 9
   1535c:	0f b6       	in	r0, 0x3f	; 63
   1535e:	f8 94       	cli
   15360:	9e bf       	out	0x3e, r25	; 62
   15362:	0f be       	out	0x3f, r0	; 63
   15364:	8d bf       	out	0x3d, r24	; 61
   15366:	e7 01       	movw	r28, r14
   15368:	20 97       	sbiw	r28, 0x00	; 0
   1536a:	09 f4       	brne	.+2      	; 0x1536e <amigo_verify+0x5e>
   1536c:	49 c0       	rjmp	.+146    	; 0x15400 <amigo_verify+0xf0>
   1536e:	6d ee       	ldi	r22, 0xED	; 237
   15370:	72 e1       	ldi	r23, 0x12	; 18
   15372:	80 91 4c 19 	lds	r24, 0x194C	; 0x80194c <AMIGOs>
   15376:	90 91 4d 19 	lds	r25, 0x194D	; 0x80194d <AMIGOs+0x1>
   1537a:	a0 dd       	rcall	.-1216   	; 0x14ebc <amigo_chs_to_logical>
   1537c:	4b 01       	movw	r8, r22
   1537e:	5c 01       	movw	r10, r24
   15380:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15384:	86 fd       	sbrc	r24, 6
   15386:	0e 94 56 8b 	call	0x116ac	; 0x116ac <gpib_timer_elapsed_begin>
   1538a:	80 91 4e 19 	lds	r24, 0x194E	; 0x80194e <AMIGOp>
   1538e:	90 91 4f 19 	lds	r25, 0x194F	; 0x80194f <AMIGOp+0x1>
   15392:	e0 90 4c 19 	lds	r14, 0x194C	; 0x80194c <AMIGOs>
   15396:	f0 90 4d 19 	lds	r15, 0x194D	; 0x80194d <AMIGOs+0x1>
   1539a:	e7 e0       	ldi	r30, 0x07	; 7
   1539c:	ee 0e       	add	r14, r30
   1539e:	f1 1c       	adc	r15, r1
   153a0:	fc 01       	movw	r30, r24
   153a2:	05 a1       	ldd	r16, Z+37	; 0x25
   153a4:	16 a1       	ldd	r17, Z+38	; 0x26
   153a6:	2b e9       	ldi	r18, 0x9B	; 155
   153a8:	3c e1       	ldi	r19, 0x1C	; 28
   153aa:	b5 01       	movw	r22, r10
   153ac:	a4 01       	movw	r20, r8
   153ae:	02 96       	adiw	r24, 0x02	; 2
   153b0:	0e 94 a8 8a 	call	0x11550	; 0x11550 <dbf_open_read>
   153b4:	7c 01       	movw	r14, r24
   153b6:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   153ba:	86 ff       	sbrs	r24, 6
   153bc:	04 c0       	rjmp	.+8      	; 0x153c6 <amigo_verify+0xb6>
   153be:	85 ef       	ldi	r24, 0xF5	; 245
   153c0:	9d e0       	ldi	r25, 0x0D	; 13
   153c2:	0e 94 68 8b 	call	0x116d0	; 0x116d0 <gpib_timer_elapsed_end>
   153c6:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   153ca:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   153ce:	85 a1       	ldd	r24, Z+37	; 0x25
   153d0:	96 a1       	ldd	r25, Z+38	; 0x26
   153d2:	e8 16       	cp	r14, r24
   153d4:	f9 06       	cpc	r15, r25
   153d6:	61 f0       	breq	.+24     	; 0x153f0 <amigo_verify+0xe0>
   153d8:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   153dc:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   153e0:	81 e0       	ldi	r24, 0x01	; 1
   153e2:	86 83       	std	Z+6, r24	; 0x06
   153e4:	87 81       	ldd	r24, Z+7	; 0x07
   153e6:	90 85       	ldd	r25, Z+8	; 0x08
   153e8:	81 60       	ori	r24, 0x01	; 1
   153ea:	90 87       	std	Z+8, r25	; 0x08
   153ec:	87 83       	std	Z+7, r24	; 0x07
   153ee:	0b c0       	rjmp	.+22     	; 0x15406 <amigo_verify+0xf6>
   153f0:	85 ef       	ldi	r24, 0xF5	; 245
   153f2:	92 e1       	ldi	r25, 0x12	; 18
   153f4:	39 df       	rcall	.-398    	; 0x15268 <amigo_increment>
   153f6:	21 97       	sbiw	r28, 0x01	; 1
   153f8:	89 2b       	or	r24, r25
   153fa:	09 f4       	brne	.+2      	; 0x153fe <amigo_verify+0xee>
   153fc:	b5 cf       	rjmp	.-150    	; 0x15368 <amigo_verify+0x58>
   153fe:	03 c0       	rjmp	.+6      	; 0x15406 <amigo_verify+0xf6>
   15400:	c0 e0       	ldi	r28, 0x00	; 0
   15402:	d0 e0       	ldi	r29, 0x00	; 0
   15404:	02 c0       	rjmp	.+4      	; 0x1540a <amigo_verify+0xfa>
   15406:	c1 e0       	ldi	r28, 0x01	; 1
   15408:	d0 e0       	ldi	r29, 0x00	; 0
   1540a:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   1540e:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   15412:	81 81       	ldd	r24, Z+1	; 0x01
   15414:	90 e0       	ldi	r25, 0x00	; 0
   15416:	0e 94 0e 8c 	call	0x1181c	; 0x1181c <gpib_enable_PPR>
   1541a:	ce 01       	movw	r24, r28
   1541c:	df 91       	pop	r29
   1541e:	cf 91       	pop	r28
   15420:	1f 91       	pop	r17
   15422:	0f 91       	pop	r16
   15424:	ff 90       	pop	r15
   15426:	ef 90       	pop	r14
   15428:	bf 90       	pop	r11
   1542a:	af 90       	pop	r10
   1542c:	9f 90       	pop	r9
   1542e:	8f 90       	pop	r8
   15430:	08 95       	ret

00015432 <amigo_format>:
   15432:	ef 92       	push	r14
   15434:	ff 92       	push	r15
   15436:	0f 93       	push	r16
   15438:	1f 93       	push	r17
   1543a:	cf 93       	push	r28
   1543c:	df 93       	push	r29
   1543e:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   15442:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   15446:	15 82       	std	Z+5, r1	; 0x05
   15448:	14 82       	std	Z+4, r1	; 0x04
   1544a:	13 82       	std	Z+3, r1	; 0x03
   1544c:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   15450:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   15454:	45 a1       	ldd	r20, Z+37	; 0x25
   15456:	56 a1       	ldd	r21, Z+38	; 0x26
   15458:	68 2f       	mov	r22, r24
   1545a:	70 e0       	ldi	r23, 0x00	; 0
   1545c:	8b e9       	ldi	r24, 0x9B	; 155
   1545e:	9c e1       	ldi	r25, 0x1C	; 28
   15460:	0e 94 9c ed 	call	0x1db38	; 0x1db38 <memset>
   15464:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15468:	85 ff       	sbrs	r24, 5
   1546a:	0a c0       	rjmp	.+20     	; 0x15480 <amigo_format+0x4e>
   1546c:	8f e8       	ldi	r24, 0x8F	; 143
   1546e:	97 e2       	ldi	r25, 0x27	; 39
   15470:	1f 92       	push	r1
   15472:	9f 93       	push	r25
   15474:	8f 93       	push	r24
   15476:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1547a:	0f 90       	pop	r0
   1547c:	0f 90       	pop	r0
   1547e:	0f 90       	pop	r0
   15480:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15484:	86 fd       	sbrc	r24, 6
   15486:	0e 94 56 8b 	call	0x116ac	; 0x116ac <gpib_timer_elapsed_begin>
   1548a:	6c ef       	ldi	r22, 0xFC	; 252
   1548c:	72 e1       	ldi	r23, 0x12	; 18
   1548e:	80 91 4c 19 	lds	r24, 0x194C	; 0x80194c <AMIGOs>
   15492:	90 91 4d 19 	lds	r25, 0x194D	; 0x80194d <AMIGOs+0x1>
   15496:	12 dd       	rcall	.-1500   	; 0x14ebc <amigo_chs_to_logical>
   15498:	ab 01       	movw	r20, r22
   1549a:	bc 01       	movw	r22, r24
   1549c:	80 91 4e 19 	lds	r24, 0x194E	; 0x80194e <AMIGOp>
   154a0:	90 91 4f 19 	lds	r25, 0x194F	; 0x80194f <AMIGOp+0x1>
   154a4:	e0 90 4c 19 	lds	r14, 0x194C	; 0x80194c <AMIGOs>
   154a8:	f0 90 4d 19 	lds	r15, 0x194D	; 0x80194d <AMIGOs+0x1>
   154ac:	27 e0       	ldi	r18, 0x07	; 7
   154ae:	e2 0e       	add	r14, r18
   154b0:	f1 1c       	adc	r15, r1
   154b2:	fc 01       	movw	r30, r24
   154b4:	05 a1       	ldd	r16, Z+37	; 0x25
   154b6:	16 a1       	ldd	r17, Z+38	; 0x26
   154b8:	2b e9       	ldi	r18, 0x9B	; 155
   154ba:	3c e1       	ldi	r19, 0x1C	; 28
   154bc:	02 96       	adiw	r24, 0x02	; 2
   154be:	0e 94 ff 8a 	call	0x115fe	; 0x115fe <dbf_open_write>
   154c2:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   154c6:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   154ca:	25 a1       	ldd	r18, Z+37	; 0x25
   154cc:	36 a1       	ldd	r19, Z+38	; 0x26
   154ce:	82 17       	cp	r24, r18
   154d0:	93 07       	cpc	r25, r19
   154d2:	71 f0       	breq	.+28     	; 0x154f0 <amigo_format+0xbe>
   154d4:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   154d8:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   154dc:	87 81       	ldd	r24, Z+7	; 0x07
   154de:	90 85       	ldd	r25, Z+8	; 0x08
   154e0:	82 60       	ori	r24, 0x02	; 2
   154e2:	90 87       	std	Z+8, r25	; 0x08
   154e4:	87 83       	std	Z+7, r24	; 0x07
   154e6:	81 e0       	ldi	r24, 0x01	; 1
   154e8:	86 83       	std	Z+6, r24	; 0x06
   154ea:	c1 e0       	ldi	r28, 0x01	; 1
   154ec:	d0 e0       	ldi	r29, 0x00	; 0
   154ee:	0f c0       	rjmp	.+30     	; 0x1550e <amigo_format+0xdc>
   154f0:	80 e0       	ldi	r24, 0x00	; 0
   154f2:	90 e0       	ldi	r25, 0x00	; 0
   154f4:	b9 de       	rcall	.-654    	; 0x15268 <amigo_increment>
   154f6:	89 2b       	or	r24, r25
   154f8:	41 f2       	breq	.-112    	; 0x1548a <amigo_format+0x58>
   154fa:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   154fe:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   15502:	15 82       	std	Z+5, r1	; 0x05
   15504:	14 82       	std	Z+4, r1	; 0x04
   15506:	13 82       	std	Z+3, r1	; 0x03
   15508:	16 82       	std	Z+6, r1	; 0x06
   1550a:	c0 e0       	ldi	r28, 0x00	; 0
   1550c:	d0 e0       	ldi	r29, 0x00	; 0
   1550e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15512:	86 ff       	sbrs	r24, 6
   15514:	04 c0       	rjmp	.+8      	; 0x1551e <amigo_format+0xec>
   15516:	8c ef       	ldi	r24, 0xFC	; 252
   15518:	92 e1       	ldi	r25, 0x12	; 18
   1551a:	0e 94 68 8b 	call	0x116d0	; 0x116d0 <gpib_timer_elapsed_end>
   1551e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15522:	85 ff       	sbrs	r24, 5
   15524:	0a c0       	rjmp	.+20     	; 0x1553a <amigo_format+0x108>
   15526:	8a e7       	ldi	r24, 0x7A	; 122
   15528:	97 e2       	ldi	r25, 0x27	; 39
   1552a:	1f 92       	push	r1
   1552c:	9f 93       	push	r25
   1552e:	8f 93       	push	r24
   15530:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   15534:	0f 90       	pop	r0
   15536:	0f 90       	pop	r0
   15538:	0f 90       	pop	r0
   1553a:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   1553e:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   15542:	81 81       	ldd	r24, Z+1	; 0x01
   15544:	90 e0       	ldi	r25, 0x00	; 0
   15546:	0e 94 0e 8c 	call	0x1181c	; 0x1181c <gpib_enable_PPR>
   1554a:	ce 01       	movw	r24, r28
   1554c:	cd b7       	in	r28, 0x3d	; 61
   1554e:	de b7       	in	r29, 0x3e	; 62
   15550:	e6 e0       	ldi	r30, 0x06	; 6
   15552:	0c 94 e9 e8 	jmp	0x1d1d2	; 0x1d1d2 <__epilogue_restores__+0x18>

00015556 <amigo_buffered_read>:
   15556:	8f 92       	push	r8
   15558:	9f 92       	push	r9
   1555a:	af 92       	push	r10
   1555c:	bf 92       	push	r11
   1555e:	ef 92       	push	r14
   15560:	ff 92       	push	r15
   15562:	0f 93       	push	r16
   15564:	1f 93       	push	r17
   15566:	cf 93       	push	r28
   15568:	df 93       	push	r29
   1556a:	00 d0       	rcall	.+0      	; 0x1556c <amigo_buffered_read+0x16>
   1556c:	cd b7       	in	r28, 0x3d	; 61
   1556e:	de b7       	in	r29, 0x3e	; 62
   15570:	63 e0       	ldi	r22, 0x03	; 3
   15572:	73 e1       	ldi	r23, 0x13	; 19
   15574:	80 91 4c 19 	lds	r24, 0x194C	; 0x80194c <AMIGOs>
   15578:	90 91 4d 19 	lds	r25, 0x194D	; 0x80194d <AMIGOs+0x1>
   1557c:	9f dc       	rcall	.-1730   	; 0x14ebc <amigo_chs_to_logical>
   1557e:	4b 01       	movw	r8, r22
   15580:	5c 01       	movw	r10, r24
   15582:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15586:	86 fd       	sbrc	r24, 6
   15588:	0e 94 56 8b 	call	0x116ac	; 0x116ac <gpib_timer_elapsed_begin>
   1558c:	80 91 4e 19 	lds	r24, 0x194E	; 0x80194e <AMIGOp>
   15590:	90 91 4f 19 	lds	r25, 0x194F	; 0x80194f <AMIGOp+0x1>
   15594:	e0 90 4c 19 	lds	r14, 0x194C	; 0x80194c <AMIGOs>
   15598:	f0 90 4d 19 	lds	r15, 0x194D	; 0x80194d <AMIGOs+0x1>
   1559c:	27 e0       	ldi	r18, 0x07	; 7
   1559e:	e2 0e       	add	r14, r18
   155a0:	f1 1c       	adc	r15, r1
   155a2:	fc 01       	movw	r30, r24
   155a4:	05 a1       	ldd	r16, Z+37	; 0x25
   155a6:	16 a1       	ldd	r17, Z+38	; 0x26
   155a8:	2b e9       	ldi	r18, 0x9B	; 155
   155aa:	3c e1       	ldi	r19, 0x1C	; 28
   155ac:	b5 01       	movw	r22, r10
   155ae:	a4 01       	movw	r20, r8
   155b0:	02 96       	adiw	r24, 0x02	; 2
   155b2:	0e 94 a8 8a 	call	0x11550	; 0x11550 <dbf_open_read>
   155b6:	7c 01       	movw	r14, r24
   155b8:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   155bc:	86 ff       	sbrs	r24, 6
   155be:	04 c0       	rjmp	.+8      	; 0x155c8 <amigo_buffered_read+0x72>
   155c0:	85 ef       	ldi	r24, 0xF5	; 245
   155c2:	9d e0       	ldi	r25, 0x0D	; 13
   155c4:	0e 94 68 8b 	call	0x116d0	; 0x116d0 <gpib_timer_elapsed_end>
   155c8:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   155cc:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   155d0:	85 a1       	ldd	r24, Z+37	; 0x25
   155d2:	96 a1       	ldd	r25, Z+38	; 0x26
   155d4:	e8 16       	cp	r14, r24
   155d6:	f9 06       	cpc	r15, r25
   155d8:	39 f0       	breq	.+14     	; 0x155e8 <amigo_buffered_read+0x92>
   155da:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   155de:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   155e2:	81 e0       	ldi	r24, 0x01	; 1
   155e4:	86 83       	std	Z+6, r24	; 0x06
   155e6:	6c c0       	rjmp	.+216    	; 0x156c0 <amigo_buffered_read+0x16a>
   155e8:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   155ec:	87 fd       	sbrc	r24, 7
   155ee:	0e 94 56 8b 	call	0x116ac	; 0x116ac <gpib_timer_elapsed_begin>
   155f2:	80 e0       	ldi	r24, 0x00	; 0
   155f4:	91 e0       	ldi	r25, 0x01	; 1
   155f6:	9a 83       	std	Y+2, r25	; 0x02
   155f8:	89 83       	std	Y+1, r24	; 0x01
   155fa:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   155fe:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   15602:	65 a1       	ldd	r22, Z+37	; 0x25
   15604:	76 a1       	ldd	r23, Z+38	; 0x26
   15606:	ae 01       	movw	r20, r28
   15608:	4f 5f       	subi	r20, 0xFF	; 255
   1560a:	5f 4f       	sbci	r21, 0xFF	; 255
   1560c:	8b e9       	ldi	r24, 0x9B	; 155
   1560e:	9c e1       	ldi	r25, 0x1C	; 28
   15610:	0e 94 5e 91 	call	0x122bc	; 0x122bc <gpib_write_str>
   15614:	7c 01       	movw	r14, r24
   15616:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1561a:	87 ff       	sbrs	r24, 7
   1561c:	04 c0       	rjmp	.+8      	; 0x15626 <amigo_buffered_read+0xd0>
   1561e:	81 e1       	ldi	r24, 0x11	; 17
   15620:	93 e1       	ldi	r25, 0x13	; 19
   15622:	0e 94 68 8b 	call	0x116d0	; 0x116d0 <gpib_timer_elapsed_end>
   15626:	89 81       	ldd	r24, Y+1	; 0x01
   15628:	9a 81       	ldd	r25, Y+2	; 0x02
   1562a:	88 27       	eor	r24, r24
   1562c:	90 7d       	andi	r25, 0xD0	; 208
   1562e:	89 2b       	or	r24, r25
   15630:	49 f4       	brne	.+18     	; 0x15644 <amigo_buffered_read+0xee>
   15632:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   15636:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   1563a:	85 a1       	ldd	r24, Z+37	; 0x25
   1563c:	96 a1       	ldd	r25, Z+38	; 0x26
   1563e:	e8 16       	cp	r14, r24
   15640:	f9 06       	cpc	r15, r25
   15642:	31 f1       	breq	.+76     	; 0x15690 <amigo_buffered_read+0x13a>
   15644:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   15648:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   1564c:	81 e0       	ldi	r24, 0x01	; 1
   1564e:	86 83       	std	Z+6, r24	; 0x06
   15650:	87 81       	ldd	r24, Z+7	; 0x07
   15652:	90 85       	ldd	r25, Z+8	; 0x08
   15654:	80 62       	ori	r24, 0x20	; 32
   15656:	90 87       	std	Z+8, r25	; 0x08
   15658:	87 83       	std	Z+7, r24	; 0x07
   1565a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1565e:	80 ff       	sbrs	r24, 0
   15660:	0a c0       	rjmp	.+20     	; 0x15676 <amigo_buffered_read+0x120>
   15662:	80 e6       	ldi	r24, 0x60	; 96
   15664:	97 e2       	ldi	r25, 0x27	; 39
   15666:	1f 92       	push	r1
   15668:	9f 93       	push	r25
   1566a:	8f 93       	push	r24
   1566c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   15670:	0f 90       	pop	r0
   15672:	0f 90       	pop	r0
   15674:	0f 90       	pop	r0
   15676:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   1567a:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   1567e:	81 81       	ldd	r24, Z+1	; 0x01
   15680:	90 e0       	ldi	r25, 0x00	; 0
   15682:	0e 94 0e 8c 	call	0x1181c	; 0x1181c <gpib_enable_PPR>
   15686:	89 81       	ldd	r24, Y+1	; 0x01
   15688:	9a 81       	ldd	r25, Y+2	; 0x02
   1568a:	88 27       	eor	r24, r24
   1568c:	90 7d       	andi	r25, 0xD0	; 208
   1568e:	1a c0       	rjmp	.+52     	; 0x156c4 <amigo_buffered_read+0x16e>
   15690:	83 e0       	ldi	r24, 0x03	; 3
   15692:	93 e1       	ldi	r25, 0x13	; 19
   15694:	e9 dd       	rcall	.-1070   	; 0x15268 <amigo_increment>
   15696:	89 2b       	or	r24, r25
   15698:	59 f0       	breq	.+22     	; 0x156b0 <amigo_buffered_read+0x15a>
   1569a:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   1569e:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   156a2:	81 e0       	ldi	r24, 0x01	; 1
   156a4:	86 83       	std	Z+6, r24	; 0x06
   156a6:	87 81       	ldd	r24, Z+7	; 0x07
   156a8:	90 85       	ldd	r25, Z+8	; 0x08
   156aa:	84 60       	ori	r24, 0x04	; 4
   156ac:	90 87       	std	Z+8, r25	; 0x08
   156ae:	87 83       	std	Z+7, r24	; 0x07
   156b0:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   156b4:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   156b8:	81 81       	ldd	r24, Z+1	; 0x01
   156ba:	90 e0       	ldi	r25, 0x00	; 0
   156bc:	0e 94 0e 8c 	call	0x1181c	; 0x1181c <gpib_enable_PPR>
   156c0:	80 e0       	ldi	r24, 0x00	; 0
   156c2:	90 e0       	ldi	r25, 0x00	; 0
   156c4:	0f 90       	pop	r0
   156c6:	0f 90       	pop	r0
   156c8:	df 91       	pop	r29
   156ca:	cf 91       	pop	r28
   156cc:	1f 91       	pop	r17
   156ce:	0f 91       	pop	r16
   156d0:	ff 90       	pop	r15
   156d2:	ef 90       	pop	r14
   156d4:	bf 90       	pop	r11
   156d6:	af 90       	pop	r10
   156d8:	9f 90       	pop	r9
   156da:	8f 90       	pop	r8
   156dc:	08 95       	ret

000156de <amigo_buffered_write>:
   156de:	8f 92       	push	r8
   156e0:	9f 92       	push	r9
   156e2:	af 92       	push	r10
   156e4:	bf 92       	push	r11
   156e6:	ef 92       	push	r14
   156e8:	ff 92       	push	r15
   156ea:	0f 93       	push	r16
   156ec:	1f 93       	push	r17
   156ee:	cf 93       	push	r28
   156f0:	df 93       	push	r29
   156f2:	00 d0       	rcall	.+0      	; 0x156f4 <amigo_buffered_write+0x16>
   156f4:	cd b7       	in	r28, 0x3d	; 61
   156f6:	de b7       	in	r29, 0x3e	; 62
   156f8:	6c e1       	ldi	r22, 0x1C	; 28
   156fa:	73 e1       	ldi	r23, 0x13	; 19
   156fc:	80 91 4c 19 	lds	r24, 0x194C	; 0x80194c <AMIGOs>
   15700:	90 91 4d 19 	lds	r25, 0x194D	; 0x80194d <AMIGOs+0x1>
   15704:	db db       	rcall	.-2122   	; 0x14ebc <amigo_chs_to_logical>
   15706:	4b 01       	movw	r8, r22
   15708:	5c 01       	movw	r10, r24
   1570a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1570e:	87 fd       	sbrc	r24, 7
   15710:	0e 94 56 8b 	call	0x116ac	; 0x116ac <gpib_timer_elapsed_begin>
   15714:	1a 82       	std	Y+2, r1	; 0x02
   15716:	19 82       	std	Y+1, r1	; 0x01
   15718:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   1571c:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   15720:	65 a1       	ldd	r22, Z+37	; 0x25
   15722:	76 a1       	ldd	r23, Z+38	; 0x26
   15724:	ae 01       	movw	r20, r28
   15726:	4f 5f       	subi	r20, 0xFF	; 255
   15728:	5f 4f       	sbci	r21, 0xFF	; 255
   1572a:	8b e9       	ldi	r24, 0x9B	; 155
   1572c:	9c e1       	ldi	r25, 0x1C	; 28
   1572e:	0e 94 b0 90 	call	0x12160	; 0x12160 <gpib_read_str>
   15732:	7c 01       	movw	r14, r24
   15734:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15738:	87 ff       	sbrs	r24, 7
   1573a:	04 c0       	rjmp	.+8      	; 0x15744 <amigo_buffered_write+0x66>
   1573c:	8b e2       	ldi	r24, 0x2B	; 43
   1573e:	93 e1       	ldi	r25, 0x13	; 19
   15740:	0e 94 68 8b 	call	0x116d0	; 0x116d0 <gpib_timer_elapsed_end>
   15744:	89 81       	ldd	r24, Y+1	; 0x01
   15746:	9a 81       	ldd	r25, Y+2	; 0x02
   15748:	88 27       	eor	r24, r24
   1574a:	90 7d       	andi	r25, 0xD0	; 208
   1574c:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   15750:	89 2b       	or	r24, r25
   15752:	49 f4       	brne	.+18     	; 0x15766 <amigo_buffered_write+0x88>
   15754:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   15758:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   1575c:	85 a1       	ldd	r24, Z+37	; 0x25
   1575e:	96 a1       	ldd	r25, Z+38	; 0x26
   15760:	e8 16       	cp	r14, r24
   15762:	f9 06       	cpc	r15, r25
   15764:	c1 f0       	breq	.+48     	; 0x15796 <amigo_buffered_write+0xb8>
   15766:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   1576a:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   1576e:	81 e0       	ldi	r24, 0x01	; 1
   15770:	86 83       	std	Z+6, r24	; 0x06
   15772:	87 81       	ldd	r24, Z+7	; 0x07
   15774:	90 85       	ldd	r25, Z+8	; 0x08
   15776:	80 62       	ori	r24, 0x20	; 32
   15778:	90 87       	std	Z+8, r25	; 0x08
   1577a:	87 83       	std	Z+7, r24	; 0x07
   1577c:	20 ff       	sbrs	r18, 0
   1577e:	4e c0       	rjmp	.+156    	; 0x1581c <amigo_buffered_write+0x13e>
   15780:	81 e4       	ldi	r24, 0x41	; 65
   15782:	97 e2       	ldi	r25, 0x27	; 39
   15784:	1f 92       	push	r1
   15786:	9f 93       	push	r25
   15788:	8f 93       	push	r24
///
/// @param[in] uart: uart number.
///
/// @return  Character count in receive buffer.
int uart_keyhit(uint8_t uart)
{
   1578a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1578e:	0f 90       	pop	r0
   15790:	0f 90       	pop	r0
   15792:	0f 90       	pop	r0
   15794:	43 c0       	rjmp	.+134    	; 0x1581c <amigo_buffered_write+0x13e>
   15796:	26 fd       	sbrc	r18, 6
   15798:	0e 94 56 8b 	call	0x116ac	; 0x116ac <gpib_timer_elapsed_begin>
   1579c:	80 91 4e 19 	lds	r24, 0x194E	; 0x80194e <AMIGOp>
   157a0:	90 91 4f 19 	lds	r25, 0x194F	; 0x80194f <AMIGOp+0x1>
   157a4:	e0 90 4c 19 	lds	r14, 0x194C	; 0x80194c <AMIGOs>
   157a8:	f0 90 4d 19 	lds	r15, 0x194D	; 0x80194d <AMIGOs+0x1>
   157ac:	27 e0       	ldi	r18, 0x07	; 7
   157ae:	e2 0e       	add	r14, r18
   157b0:	f1 1c       	adc	r15, r1
   157b2:	fc 01       	movw	r30, r24
   157b4:	05 a1       	ldd	r16, Z+37	; 0x25
   157b6:	16 a1       	ldd	r17, Z+38	; 0x26
   157b8:	2b e9       	ldi	r18, 0x9B	; 155
   157ba:	3c e1       	ldi	r19, 0x1C	; 28
   157bc:	b5 01       	movw	r22, r10
   157be:	a4 01       	movw	r20, r8
   157c0:	02 96       	adiw	r24, 0x02	; 2
   157c2:	0e 94 ff 8a 	call	0x115fe	; 0x115fe <dbf_open_write>
   157c6:	7c 01       	movw	r14, r24
   157c8:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   157cc:	86 ff       	sbrs	r24, 6
   157ce:	04 c0       	rjmp	.+8      	; 0x157d8 <amigo_buffered_write+0xfa>
   157d0:	8a ee       	ldi	r24, 0xEA	; 234
   157d2:	9d e0       	ldi	r25, 0x0D	; 13
   157d4:	0e 94 68 8b 	call	0x116d0	; 0x116d0 <gpib_timer_elapsed_end>
   157d8:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   157dc:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   157e0:	85 a1       	ldd	r24, Z+37	; 0x25
   157e2:	96 a1       	ldd	r25, Z+38	; 0x26
   157e4:	e8 16       	cp	r14, r24
   157e6:	f9 06       	cpc	r15, r25
   157e8:	49 f0       	breq	.+18     	; 0x157fc <amigo_buffered_write+0x11e>
   157ea:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   157ee:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   157f2:	81 e0       	ldi	r24, 0x01	; 1
   157f4:	86 83       	std	Z+6, r24	; 0x06
   157f6:	80 e0       	ldi	r24, 0x00	; 0
   157f8:	90 e0       	ldi	r25, 0x00	; 0
   157fa:	1c c0       	rjmp	.+56     	; 0x15834 <amigo_buffered_write+0x156>
   157fc:	8c e1       	ldi	r24, 0x1C	; 28
   157fe:	93 e1       	ldi	r25, 0x13	; 19
   15800:	33 dd       	rcall	.-1434   	; 0x15268 <amigo_increment>
   15802:	89 2b       	or	r24, r25
   15804:	59 f0       	breq	.+22     	; 0x1581c <amigo_buffered_write+0x13e>
   15806:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   1580a:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   1580e:	81 e0       	ldi	r24, 0x01	; 1
   15810:	86 83       	std	Z+6, r24	; 0x06
   15812:	87 81       	ldd	r24, Z+7	; 0x07
   15814:	90 85       	ldd	r25, Z+8	; 0x08
   15816:	84 60       	ori	r24, 0x04	; 4
   15818:	90 87       	std	Z+8, r25	; 0x08
   1581a:	87 83       	std	Z+7, r24	; 0x07
   1581c:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   15820:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   15824:	81 81       	ldd	r24, Z+1	; 0x01
    return ( uart_rx_count( uart ) );
   15826:	90 e0       	ldi	r25, 0x00	; 0
}
   15828:	0e 94 0e 8c 	call	0x1181c	; 0x1181c <gpib_enable_PPR>
   1582c:	89 81       	ldd	r24, Y+1	; 0x01
   1582e:	9a 81       	ldd	r25, Y+2	; 0x02
   15830:	88 27       	eor	r24, r24
   15832:	90 7d       	andi	r25, 0xD0	; 208
   15834:	0f 90       	pop	r0
   15836:	0f 90       	pop	r0
   15838:	df 91       	pop	r29
   1583a:	cf 91       	pop	r28
   1583c:	1f 91       	pop	r17
   1583e:	0f 91       	pop	r16
   15840:	ff 90       	pop	r15
   15842:	ef 90       	pop	r14
   15844:	bf 90       	pop	r11
   15846:	af 90       	pop	r10
   15848:	9f 90       	pop	r9
   1584a:	8f 90       	pop	r8
   1584c:	08 95       	ret

0001584e <amigo_cmd_dsj>:
   1584e:	a3 e0       	ldi	r26, 0x03	; 3
   15850:	b0 e0       	ldi	r27, 0x00	; 0
   15852:	ed e2       	ldi	r30, 0x2D	; 45
   15854:	fc ea       	ldi	r31, 0xAC	; 172
   15856:	0c 94 d1 e8 	jmp	0x1d1a2	; 0x1d1a2 <__prologue_saves__+0x20>
   1585a:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   1585e:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   15862:	86 81       	ldd	r24, Z+6	; 0x06
   15864:	8b 83       	std	Y+3, r24	; 0x03
   15866:	80 e0       	ldi	r24, 0x00	; 0
   15868:	91 e0       	ldi	r25, 0x01	; 1
   1586a:	9a 83       	std	Y+2, r25	; 0x02
   1586c:	89 83       	std	Y+1, r24	; 0x01
   1586e:	ae 01       	movw	r20, r28
   15870:	4f 5f       	subi	r20, 0xFF	; 255
   15872:	5f 4f       	sbci	r21, 0xFF	; 255
   15874:	61 e0       	ldi	r22, 0x01	; 1
   15876:	70 e0       	ldi	r23, 0x00	; 0
   15878:	ce 01       	movw	r24, r28
   1587a:	03 96       	adiw	r24, 0x03	; 3
   1587c:	0e 94 5e 91 	call	0x122bc	; 0x122bc <gpib_write_str>
   15880:	29 81       	ldd	r18, Y+1	; 0x01
   15882:	3a 81       	ldd	r19, Y+2	; 0x02
   15884:	22 27       	eor	r18, r18
   15886:	30 7d       	andi	r19, 0xD0	; 208
   15888:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   1588c:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   15890:	23 2b       	or	r18, r19
   15892:	29 f0       	breq	.+10     	; 0x1589e <amigo_cmd_dsj+0x50>
   15894:	27 81       	ldd	r18, Z+7	; 0x07
   15896:	30 85       	ldd	r19, Z+8	; 0x08
   15898:	20 62       	ori	r18, 0x20	; 32
   1589a:	30 87       	std	Z+8, r19	; 0x08
   1589c:	27 83       	std	Z+7, r18	; 0x07
   1589e:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   158a2:	01 97       	sbiw	r24, 0x01	; 1
   158a4:	c1 f0       	breq	.+48     	; 0x158d6 <amigo_cmd_dsj+0x88>
   158a6:	81 e0       	ldi	r24, 0x01	; 1
   158a8:	86 83       	std	Z+6, r24	; 0x06
   158aa:	87 81       	ldd	r24, Z+7	; 0x07
   158ac:	90 85       	ldd	r25, Z+8	; 0x08
   158ae:	80 62       	ori	r24, 0x20	; 32
   158b0:	90 87       	std	Z+8, r25	; 0x08
   158b2:	87 83       	std	Z+7, r24	; 0x07
   158b4:	20 ff       	sbrs	r18, 0
   158b6:	0a c0       	rjmp	.+20     	; 0x158cc <amigo_cmd_dsj+0x7e>
   158b8:	87 e2       	ldi	r24, 0x27	; 39
   158ba:	97 e2       	ldi	r25, 0x27	; 39
   158bc:	1f 92       	push	r1
   158be:	9f 93       	push	r25
   158c0:	8f 93       	push	r24
   158c2:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   158c6:	0f 90       	pop	r0
   158c8:	0f 90       	pop	r0
   158ca:	0f 90       	pop	r0
   158cc:	89 81       	ldd	r24, Y+1	; 0x01
   158ce:	9a 81       	ldd	r25, Y+2	; 0x02
   158d0:	88 27       	eor	r24, r24
   158d2:	90 7d       	andi	r25, 0xD0	; 208
   158d4:	1a c0       	rjmp	.+52     	; 0x1590a <amigo_cmd_dsj+0xbc>
   158d6:	25 ff       	sbrs	r18, 5
   158d8:	0f c0       	rjmp	.+30     	; 0x158f8 <amigo_cmd_dsj+0xaa>
   158da:	86 81       	ldd	r24, Z+6	; 0x06
   158dc:	1f 92       	push	r1
   158de:	8f 93       	push	r24
   158e0:	8a e1       	ldi	r24, 0x1A	; 26
   158e2:	97 e2       	ldi	r25, 0x27	; 39
   158e4:	1f 92       	push	r1
   158e6:	9f 93       	push	r25
   158e8:	8f 93       	push	r24
   158ea:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   158ee:	0f 90       	pop	r0
   158f0:	0f 90       	pop	r0
   158f2:	0f 90       	pop	r0
   158f4:	0f 90       	pop	r0
   158f6:	0f 90       	pop	r0
   158f8:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   158fc:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   15900:	16 82       	std	Z+6, r1	; 0x06
   15902:	10 86       	std	Z+8, r1	; 0x08
   15904:	17 82       	std	Z+7, r1	; 0x07
   15906:	80 e0       	ldi	r24, 0x00	; 0
   15908:	90 e0       	ldi	r25, 0x00	; 0
   1590a:	23 96       	adiw	r28, 0x03	; 3
   1590c:	e2 e0       	ldi	r30, 0x02	; 2
   1590e:	0c 94 ed e8 	jmp	0x1d1da	; 0x1d1da <__epilogue_restores__+0x20>

00015912 <amigo_cmd_clear>:
   15912:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15916:	85 ff       	sbrs	r24, 5
   15918:	0a c0       	rjmp	.+20     	; 0x1592e <amigo_cmd_clear+0x1c>
   1591a:	81 ee       	ldi	r24, 0xE1	; 225
   1591c:	96 e2       	ldi	r25, 0x26	; 38
   1591e:	1f 92       	push	r1
   15920:	9f 93       	push	r25
   15922:	8f 93       	push	r24
   15924:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   15928:	0f 90       	pop	r0
   1592a:	0f 90       	pop	r0
   1592c:	0f 90       	pop	r0
   1592e:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   15932:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   15936:	15 82       	std	Z+5, r1	; 0x05
   15938:	14 82       	std	Z+4, r1	; 0x04
   1593a:	13 82       	std	Z+3, r1	; 0x03
   1593c:	16 82       	std	Z+6, r1	; 0x06
   1593e:	10 86       	std	Z+8, r1	; 0x08
   15940:	17 82       	std	Z+7, r1	; 0x07
   15942:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   15946:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   1594a:	81 81       	ldd	r24, Z+1	; 0x01
   1594c:	90 e0       	ldi	r25, 0x00	; 0
   1594e:	0e 94 0e 8c 	call	0x1181c	; 0x1181c <gpib_enable_PPR>
   15952:	80 e0       	ldi	r24, 0x00	; 0
   15954:	90 e0       	ldi	r25, 0x00	; 0
   15956:	08 95       	ret

00015958 <amigo_todo_op>:
/// @param[in] opcode: GPIB data byte OP Code
/// @param[in] len: Length of GOIB data returned
/// @return  0

int amigo_todo_op(uint8_t secondary, uint8_t opcode, int len)
{
   15958:	0f 93       	push	r16
   1595a:	1f 93       	push	r17
   1595c:	cf 93       	push	r28
   1595e:	df 93       	push	r29
   15960:	c8 2f       	mov	r28, r24
   15962:	d6 2f       	mov	r29, r22
   15964:	14 2f       	mov	r17, r20
   15966:	05 2f       	mov	r16, r21
    if(AMIGO_is_MLA(listening))
   15968:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   1596c:	90 e0       	ldi	r25, 0x00	; 0
   1596e:	0e 94 39 92 	call	0x12472	; 0x12472 <AMIGO_is_MLA>
   15972:	20 91 9f 1e 	lds	r18, 0x1E9F	; 0x801e9f <talking>
   15976:	89 2b       	or	r24, r25
   15978:	19 f1       	breq	.+70     	; 0x159c0 <amigo_todo_op+0x68>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   1597a:	1f 92       	push	r1
   1597c:	2f 93       	push	r18
   1597e:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   15982:	1f 92       	push	r1
   15984:	8f 93       	push	r24
   15986:	0f 93       	push	r16
   15988:	1f 93       	push	r17
   1598a:	1f 92       	push	r1
   1598c:	df 93       	push	r29
   1598e:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   15992:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   15996:	80 81       	ld	r24, Z
   15998:	1f 92       	push	r1
   1599a:	8f 93       	push	r24
   1599c:	1f 92       	push	r1
   1599e:	cf 93       	push	r28
   159a0:	8a e7       	ldi	r24, 0x7A	; 122
   159a2:	96 e2       	ldi	r25, 0x26	; 38
   159a4:	1f 92       	push	r1
   159a6:	9f 93       	push	r25
   159a8:	8f 93       	push	r24
   159aa:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   159ae:	8d b7       	in	r24, 0x3d	; 61
   159b0:	9e b7       	in	r25, 0x3e	; 62
   159b2:	0f 96       	adiw	r24, 0x0f	; 15
   159b4:	0f b6       	in	r0, 0x3f	; 63
   159b6:	f8 94       	cli
   159b8:	9e bf       	out	0x3e, r25	; 62
   159ba:	0f be       	out	0x3f, r0	; 63
   159bc:	8d bf       	out	0x3d, r24	; 61
   159be:	66 c0       	rjmp	.+204    	; 0x15a8c <amigo_todo_op+0x134>
            secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(AMIGO_is_MTA(talking))
   159c0:	82 2f       	mov	r24, r18
   159c2:	90 e0       	ldi	r25, 0x00	; 0
   159c4:	0e 94 4a 92 	call	0x12494	; 0x12494 <AMIGO_is_MTA>
   159c8:	30 91 a1 1e 	lds	r19, 0x1EA1	; 0x801ea1 <listening>
   159cc:	20 91 9f 1e 	lds	r18, 0x1E9F	; 0x801e9f <talking>
   159d0:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   159d4:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   159d8:	89 2b       	or	r24, r25
   159da:	e9 f0       	breq	.+58     	; 0x15a16 <amigo_todo_op+0xbe>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   159dc:	1f 92       	push	r1
   159de:	2f 93       	push	r18
   159e0:	1f 92       	push	r1
   159e2:	3f 93       	push	r19
   159e4:	0f 93       	push	r16
   159e6:	1f 93       	push	r17
   159e8:	1f 92       	push	r1
   159ea:	df 93       	push	r29
   159ec:	80 81       	ld	r24, Z
   159ee:	1f 92       	push	r1
   159f0:	8f 93       	push	r24
   159f2:	1f 92       	push	r1
   159f4:	cf 93       	push	r28
   159f6:	83 e1       	ldi	r24, 0x13	; 19
   159f8:	96 e2       	ldi	r25, 0x26	; 38
   159fa:	1f 92       	push	r1
   159fc:	9f 93       	push	r25
   159fe:	8f 93       	push	r24
   15a00:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   15a04:	8d b7       	in	r24, 0x3d	; 61
   15a06:	9e b7       	in	r25, 0x3e	; 62
   15a08:	0f 96       	adiw	r24, 0x0f	; 15
   15a0a:	0f b6       	in	r0, 0x3f	; 63
   15a0c:	f8 94       	cli
   15a0e:	9e bf       	out	0x3e, r25	; 62
   15a10:	0f be       	out	0x3f, r0	; 63
   15a12:	8d bf       	out	0x3d, r24	; 61
   15a14:	3b c0       	rjmp	.+118    	; 0x15a8c <amigo_todo_op+0x134>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else if(talking == UNT)
   15a16:	2f 35       	cpi	r18, 0x5F	; 95
   15a18:	e9 f4       	brne	.+58     	; 0x15a54 <amigo_todo_op+0xfc>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   15a1a:	1f 92       	push	r1
   15a1c:	2f 93       	push	r18
   15a1e:	1f 92       	push	r1
   15a20:	3f 93       	push	r19
   15a22:	0f 93       	push	r16
   15a24:	1f 93       	push	r17
   15a26:	1f 92       	push	r1
   15a28:	df 93       	push	r29
   15a2a:	80 81       	ld	r24, Z
   15a2c:	1f 92       	push	r1
   15a2e:	8f 93       	push	r24
   15a30:	1f 92       	push	r1
   15a32:	cf 93       	push	r28
   15a34:	8c ea       	ldi	r24, 0xAC	; 172
   15a36:	95 e2       	ldi	r25, 0x25	; 37
   15a38:	1f 92       	push	r1
   15a3a:	9f 93       	push	r25
   15a3c:	8f 93       	push	r24
   15a3e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   15a42:	8d b7       	in	r24, 0x3d	; 61
   15a44:	9e b7       	in	r25, 0x3e	; 62
   15a46:	0f 96       	adiw	r24, 0x0f	; 15
   15a48:	0f b6       	in	r0, 0x3f	; 63
   15a4a:	f8 94       	cli
   15a4c:	9e bf       	out	0x3e, r25	; 62
   15a4e:	0f be       	out	0x3f, r0	; 63
   15a50:	8d bf       	out	0x3d, r24	; 61
   15a52:	1c c0       	rjmp	.+56     	; 0x15a8c <amigo_todo_op+0x134>
                secondary, AMIGOs->state, opcode, len, listening, talking);
    else
        printf("[U Amigo TODO secondary: %02XH, state:%02XH, opcode:%02XH, len:%3d, listening:%02XH, talking:%02XH]\n",
   15a54:	1f 92       	push	r1
   15a56:	2f 93       	push	r18
   15a58:	1f 92       	push	r1
   15a5a:	3f 93       	push	r19
   15a5c:	0f 93       	push	r16
   15a5e:	1f 93       	push	r17
   15a60:	1f 92       	push	r1
   15a62:	df 93       	push	r29
   15a64:	80 81       	ld	r24, Z
   15a66:	1f 92       	push	r1
   15a68:	8f 93       	push	r24
   15a6a:	1f 92       	push	r1
   15a6c:	cf 93       	push	r28
   15a6e:	87 e4       	ldi	r24, 0x47	; 71
   15a70:	95 e2       	ldi	r25, 0x25	; 37
   15a72:	1f 92       	push	r1
   15a74:	9f 93       	push	r25
   15a76:	8f 93       	push	r24
   15a78:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   15a7c:	8d b7       	in	r24, 0x3d	; 61
   15a7e:	9e b7       	in	r25, 0x3e	; 62
   15a80:	0f 96       	adiw	r24, 0x0f	; 15
   15a82:	0f b6       	in	r0, 0x3f	; 63
   15a84:	f8 94       	cli
   15a86:	9e bf       	out	0x3e, r25	; 62
   15a88:	0f be       	out	0x3f, r0	; 63
   15a8a:	8d bf       	out	0x3d, r24	; 61
            secondary, AMIGOs->state, opcode, len, listening, talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   15a8c:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   15a90:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   15a94:	81 81       	ldd	r24, Z+1	; 0x01
   15a96:	90 e0       	ldi	r25, 0x00	; 0
   15a98:	0e 94 0e 8c 	call	0x1181c	; 0x1181c <gpib_enable_PPR>
    return(0);
}
   15a9c:	80 e0       	ldi	r24, 0x00	; 0
   15a9e:	90 e0       	ldi	r25, 0x00	; 0
   15aa0:	df 91       	pop	r29
   15aa2:	cf 91       	pop	r28
   15aa4:	1f 91       	pop	r17
   15aa6:	0f 91       	pop	r16
   15aa8:	08 95       	ret

00015aaa <amigo_todo>:
/// @param[in] secondary: GPIB seconday command
///
/// @return  0

int amigo_todo(uint8_t secondary)
{
   15aaa:	cf 93       	push	r28
   15aac:	c8 2f       	mov	r28, r24
    if(AMIGO_is_MLA(listening))
   15aae:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   15ab2:	90 e0       	ldi	r25, 0x00	; 0
   15ab4:	0e 94 39 92 	call	0x12472	; 0x12472 <AMIGO_is_MLA>
   15ab8:	20 91 9f 1e 	lds	r18, 0x1E9F	; 0x801e9f <talking>
   15abc:	89 2b       	or	r24, r25
   15abe:	f9 f0       	breq	.+62     	; 0x15afe <amigo_todo+0x54>
        printf("[L   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   15ac0:	1f 92       	push	r1
   15ac2:	2f 93       	push	r18
   15ac4:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   15ac8:	1f 92       	push	r1
   15aca:	8f 93       	push	r24
   15acc:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   15ad0:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   15ad4:	80 81       	ld	r24, Z
   15ad6:	1f 92       	push	r1
   15ad8:	8f 93       	push	r24
   15ada:	1f 92       	push	r1
   15adc:	cf 93       	push	r28
   15ade:	87 ef       	ldi	r24, 0xF7	; 247
   15ae0:	94 e2       	ldi	r25, 0x24	; 36
   15ae2:	1f 92       	push	r1
   15ae4:	9f 93       	push	r25
   15ae6:	8f 93       	push	r24
   15ae8:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   15aec:	8d b7       	in	r24, 0x3d	; 61
   15aee:	9e b7       	in	r25, 0x3e	; 62
   15af0:	0b 96       	adiw	r24, 0x0b	; 11
   15af2:	0f b6       	in	r0, 0x3f	; 63
   15af4:	f8 94       	cli
   15af6:	9e bf       	out	0x3e, r25	; 62
   15af8:	0f be       	out	0x3f, r0	; 63
   15afa:	8d bf       	out	0x3d, r24	; 61
   15afc:	5a c0       	rjmp	.+180    	; 0x15bb2 <amigo_todo+0x108>
            secondary,AMIGOs->state,listening,talking);
    else if(AMIGO_is_MTA(talking))
   15afe:	82 2f       	mov	r24, r18
   15b00:	90 e0       	ldi	r25, 0x00	; 0
   15b02:	0e 94 4a 92 	call	0x12494	; 0x12494 <AMIGO_is_MTA>
   15b06:	30 91 a1 1e 	lds	r19, 0x1EA1	; 0x801ea1 <listening>
   15b0a:	20 91 9f 1e 	lds	r18, 0x1E9F	; 0x801e9f <talking>
   15b0e:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   15b12:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   15b16:	89 2b       	or	r24, r25
   15b18:	c9 f0       	breq	.+50     	; 0x15b4c <amigo_todo+0xa2>
        printf("[T   Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   15b1a:	1f 92       	push	r1
   15b1c:	2f 93       	push	r18
   15b1e:	1f 92       	push	r1
   15b20:	3f 93       	push	r19
   15b22:	80 81       	ld	r24, Z
   15b24:	1f 92       	push	r1
   15b26:	8f 93       	push	r24
   15b28:	1f 92       	push	r1
   15b2a:	cf 93       	push	r28
   15b2c:	87 ea       	ldi	r24, 0xA7	; 167
   15b2e:	94 e2       	ldi	r25, 0x24	; 36
   15b30:	1f 92       	push	r1
   15b32:	9f 93       	push	r25
   15b34:	8f 93       	push	r24
   15b36:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   15b3a:	8d b7       	in	r24, 0x3d	; 61
   15b3c:	9e b7       	in	r25, 0x3e	; 62
   15b3e:	0b 96       	adiw	r24, 0x0b	; 11
   15b40:	0f b6       	in	r0, 0x3f	; 63
   15b42:	f8 94       	cli
   15b44:	9e bf       	out	0x3e, r25	; 62
   15b46:	0f be       	out	0x3f, r0	; 63
   15b48:	8d bf       	out	0x3d, r24	; 61
   15b4a:	33 c0       	rjmp	.+102    	; 0x15bb2 <amigo_todo+0x108>
                secondary,AMIGOs->state,listening,talking);
    else if(talking == UNT)
   15b4c:	2f 35       	cpi	r18, 0x5F	; 95
   15b4e:	c9 f4       	brne	.+50     	; 0x15b82 <amigo_todo+0xd8>
        printf("[UNT Amigo TODO secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   15b50:	1f 92       	push	r1
   15b52:	2f 93       	push	r18
   15b54:	1f 92       	push	r1
   15b56:	3f 93       	push	r19
   15b58:	80 81       	ld	r24, Z
   15b5a:	1f 92       	push	r1
   15b5c:	8f 93       	push	r24
   15b5e:	1f 92       	push	r1
   15b60:	cf 93       	push	r28
   15b62:	87 e5       	ldi	r24, 0x57	; 87
   15b64:	94 e2       	ldi	r25, 0x24	; 36
   15b66:	1f 92       	push	r1
   15b68:	9f 93       	push	r25
   15b6a:	8f 93       	push	r24
   15b6c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   15b70:	8d b7       	in	r24, 0x3d	; 61
   15b72:	9e b7       	in	r25, 0x3e	; 62
   15b74:	0b 96       	adiw	r24, 0x0b	; 11
   15b76:	0f b6       	in	r0, 0x3f	; 63
   15b78:	f8 94       	cli
   15b7a:	9e bf       	out	0x3e, r25	; 62
   15b7c:	0f be       	out	0x3f, r0	; 63
   15b7e:	8d bf       	out	0x3d, r24	; 61
   15b80:	18 c0       	rjmp	.+48     	; 0x15bb2 <amigo_todo+0x108>
                secondary,AMIGOs->state,listening,talking);
    else
        printf("[E   Amigo ERROR secondary: %02XH, state:%02XH, listening:%02XH, talking:%02XH]\n",
   15b82:	1f 92       	push	r1
   15b84:	2f 93       	push	r18
   15b86:	1f 92       	push	r1
   15b88:	3f 93       	push	r19
   15b8a:	80 81       	ld	r24, Z
   15b8c:	1f 92       	push	r1
   15b8e:	8f 93       	push	r24
   15b90:	1f 92       	push	r1
   15b92:	cf 93       	push	r28
   15b94:	86 e0       	ldi	r24, 0x06	; 6
   15b96:	94 e2       	ldi	r25, 0x24	; 36
   15b98:	1f 92       	push	r1
   15b9a:	9f 93       	push	r25
   15b9c:	8f 93       	push	r24
   15b9e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   15ba2:	8d b7       	in	r24, 0x3d	; 61
   15ba4:	9e b7       	in	r25, 0x3e	; 62
   15ba6:	0b 96       	adiw	r24, 0x0b	; 11
   15ba8:	0f b6       	in	r0, 0x3f	; 63
   15baa:	f8 94       	cli
   15bac:	9e bf       	out	0x3e, r25	; 62
   15bae:	0f be       	out	0x3f, r0	; 63
   15bb0:	8d bf       	out	0x3d, r24	; 61
            secondary,AMIGOs->state,listening,talking);
    gpib_enable_PPR(AMIGOp->HEADER.PPR);
   15bb2:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   15bb6:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   15bba:	81 81       	ldd	r24, Z+1	; 0x01
   15bbc:	90 e0       	ldi	r25, 0x00	; 0
   15bbe:	0e 94 0e 8c 	call	0x1181c	; 0x1181c <gpib_enable_PPR>
    return(0);
}
   15bc2:	80 e0       	ldi	r24, 0x00	; 0
   15bc4:	90 e0       	ldi	r25, 0x00	; 0
   15bc6:	cf 91       	pop	r28
   15bc8:	08 95       	ret

00015bca <amigo_check_unit>:
/// @brief  Amigo Check Valid unit
/// @param[in] unit: unit to set
/// @return void
void amigo_check_unit(uint8_t unit)
{
    if(unit != 15)
   15bca:	8f 30       	cpi	r24, 0x0F	; 15
   15bcc:	29 f0       	breq	.+10     	; 0x15bd8 <amigo_check_unit+0xe>
        AMIGOs->unitNO = unit;
   15bce:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   15bd2:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   15bd6:	81 83       	std	Z+1, r24	; 0x01
    if(AMIGOs->unitNO != 0)
   15bd8:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   15bdc:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   15be0:	81 81       	ldd	r24, Z+1	; 0x01
   15be2:	88 23       	and	r24, r24
   15be4:	29 f0       	breq	.+10     	; 0x15bf0 <amigo_check_unit+0x26>
        AMIGOs->Errors |= ERR_UNIT;
   15be6:	87 81       	ldd	r24, Z+7	; 0x07
   15be8:	90 85       	ldd	r25, Z+8	; 0x08
   15bea:	80 64       	ori	r24, 0x40	; 64
   15bec:	90 87       	std	Z+8, r25	; 0x08
   15bee:	87 83       	std	Z+7, r24	; 0x07
   15bf0:	08 95       	ret

00015bf2 <Amigo_Command>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)

int Amigo_Command( int secondary )
{
   15bf2:	a3 e1       	ldi	r26, 0x13	; 19
   15bf4:	b0 e0       	ldi	r27, 0x00	; 0
   15bf6:	ef ef       	ldi	r30, 0xFF	; 255
   15bf8:	fd ea       	ldi	r31, 0xAD	; 173
   15bfa:	0c 94 cd e8 	jmp	0x1d19a	; 0x1d19a <__prologue_saves__+0x18>
   15bfe:	7c 01       	movw	r14, r24
    uint8_t *ptr;
    uint16_t status;                              // Current status
    UINT len;                                     // Size of Data/Op Codes/Parameters read in bytes

#if SDEBUG
    if(debuglevel & 32)
   15c00:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15c04:	85 ff       	sbrs	r24, 5
   15c06:	16 c0       	rjmp	.+44     	; 0x15c34 <Amigo_Command+0x42>
        printf("[AMIGO Command(%02XH): listen:%02XH, talk:%02XH]\n",
   15c08:	80 91 9f 1e 	lds	r24, 0x1E9F	; 0x801e9f <talking>
   15c0c:	1f 92       	push	r1
   15c0e:	8f 93       	push	r24
   15c10:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   15c14:	1f 92       	push	r1
   15c16:	8f 93       	push	r24
   15c18:	ff 92       	push	r15
   15c1a:	ef 92       	push	r14
   15c1c:	84 ed       	ldi	r24, 0xD4	; 212
   15c1e:	93 e2       	ldi	r25, 0x23	; 35
   15c20:	1f 92       	push	r1
   15c22:	9f 93       	push	r25
   15c24:	8f 93       	push	r24
   15c26:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   15c2a:	0f b6       	in	r0, 0x3f	; 63
   15c2c:	f8 94       	cli
   15c2e:	de bf       	out	0x3e, r29	; 62
   15c30:	0f be       	out	0x3f, r0	; 63
   15c32:	cd bf       	out	0x3d, r28	; 61
            secondary, listening, talking);
#endif

///  Reference: A14
    if (secondary == 0x7e && AMIGO_is_MTA(talking))
   15c34:	9e e7       	ldi	r25, 0x7E	; 126
   15c36:	e9 16       	cp	r14, r25
   15c38:	f1 04       	cpc	r15, r1
   15c3a:	f1 f5       	brne	.+124    	; 0x15cb8 <Amigo_Command+0xc6>
   15c3c:	80 91 9f 1e 	lds	r24, 0x1E9F	; 0x801e9f <talking>
   15c40:	90 e0       	ldi	r25, 0x00	; 0
   15c42:	0e 94 4a 92 	call	0x12494	; 0x12494 <AMIGO_is_MTA>
   15c46:	89 2b       	or	r24, r25
   15c48:	09 f4       	brne	.+2      	; 0x15c4c <Amigo_Command+0x5a>
   15c4a:	86 c0       	rjmp	.+268    	; 0x15d58 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   15c4c:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   15c50:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   15c54:	81 81       	ldd	r24, Z+1	; 0x01
   15c56:	90 e0       	ldi	r25, 0x00	; 0
   15c58:	0e 94 3f 8c 	call	0x1187e	; 0x1187e <gpib_disable_PPR>
        status = EOI_FLAG;
   15c5c:	80 e0       	ldi	r24, 0x00	; 0
   15c5e:	91 e0       	ldi	r25, 0x01	; 1
   15c60:	9b 8b       	std	Y+19, r25	; 0x13
   15c62:	8a 8b       	std	Y+18, r24	; 0x12
        len = gpib_write_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   15c64:	ae 01       	movw	r20, r28
   15c66:	4e 5e       	subi	r20, 0xEE	; 238
   15c68:	5f 4f       	sbci	r21, 0xFF	; 255
   15c6a:	60 e0       	ldi	r22, 0x00	; 0
   15c6c:	72 e0       	ldi	r23, 0x02	; 2
   15c6e:	8b e9       	ldi	r24, 0x9B	; 155
   15c70:	9c e1       	ldi	r25, 0x1C	; 28
   15c72:	0e 94 5e 91 	call	0x122bc	; 0x122bc <gpib_write_str>
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   15c76:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   15c7a:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   15c7e:	81 81       	ldd	r24, Z+1	; 0x01
   15c80:	90 e0       	ldi	r25, 0x00	; 0
   15c82:	0e 94 0e 8c 	call	0x1181c	; 0x1181c <gpib_enable_PPR>
        if(status & ERROR_MASK)
   15c86:	8a 89       	ldd	r24, Y+18	; 0x12
   15c88:	9b 89       	ldd	r25, Y+19	; 0x13
   15c8a:	88 27       	eor	r24, r24
   15c8c:	90 7d       	andi	r25, 0xD0	; 208
   15c8e:	89 2b       	or	r24, r25
   15c90:	09 f4       	brne	.+2      	; 0x15c94 <Amigo_Command+0xa2>
   15c92:	89 c2       	rjmp	.+1298   	; 0x161a6 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   15c94:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   15c98:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   15c9c:	81 e0       	ldi	r24, 0x01	; 1
   15c9e:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   15ca0:	87 81       	ldd	r24, Z+7	; 0x07
   15ca2:	90 85       	ldd	r25, Z+8	; 0x08
   15ca4:	80 62       	ori	r24, 0x20	; 32
   15ca6:	90 87       	std	Z+8, r25	; 0x08
   15ca8:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   15caa:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15cae:	80 ff       	sbrs	r24, 0
   15cb0:	7a c2       	rjmp	.+1268   	; 0x161a6 <Amigo_Command+0x5b4>
                printf("[AMIGO_Command:GPIB write error]\n");
   15cb2:	82 eb       	ldi	r24, 0xB2	; 178
   15cb4:	93 e2       	ldi	r25, 0x23	; 35
   15cb6:	8e c0       	rjmp	.+284    	; 0x15dd4 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

///  Reference: A25
    if (secondary == 0x7f && AMIGO_is_MLA(listening))
   15cb8:	8f e7       	ldi	r24, 0x7F	; 127
   15cba:	e8 16       	cp	r14, r24
   15cbc:	f1 04       	cpc	r15, r1
   15cbe:	09 f0       	breq	.+2      	; 0x15cc2 <Amigo_Command+0xd0>
   15cc0:	4b c0       	rjmp	.+150    	; 0x15d58 <Amigo_Command+0x166>
   15cc2:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   15cc6:	90 e0       	ldi	r25, 0x00	; 0
   15cc8:	0e 94 39 92 	call	0x12472	; 0x12472 <AMIGO_is_MLA>
   15ccc:	89 2b       	or	r24, r25
   15cce:	09 f4       	brne	.+2      	; 0x15cd2 <Amigo_Command+0xe0>
   15cd0:	43 c0       	rjmp	.+134    	; 0x15d58 <Amigo_Command+0x166>
    {
        gpib_disable_PPR(AMIGOp->HEADER.PPR);
   15cd2:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   15cd6:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   15cda:	81 81       	ldd	r24, Z+1	; 0x01
   15cdc:	90 e0       	ldi	r25, 0x00	; 0
   15cde:	0e 94 3f 8c 	call	0x1187e	; 0x1187e <gpib_disable_PPR>
#if SDEBUG
        if(debuglevel & 128)
   15ce2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15ce6:	87 fd       	sbrc	r24, 7
            gpib_timer_elapsed_begin();
   15ce8:	0e 94 56 8b 	call	0x116ac	; 0x116ac <gpib_timer_elapsed_begin>
#endif
        status = EOI_FLAG;
   15cec:	80 e0       	ldi	r24, 0x00	; 0
   15cee:	91 e0       	ldi	r25, 0x01	; 1
   15cf0:	9b 8b       	std	Y+19, r25	; 0x13
   15cf2:	8a 8b       	std	Y+18, r24	; 0x12
        len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   15cf4:	ae 01       	movw	r20, r28
   15cf6:	4e 5e       	subi	r20, 0xEE	; 238
   15cf8:	5f 4f       	sbci	r21, 0xFF	; 255
   15cfa:	60 e0       	ldi	r22, 0x00	; 0
   15cfc:	72 e0       	ldi	r23, 0x02	; 2
   15cfe:	8b e9       	ldi	r24, 0x9B	; 155
   15d00:	9c e1       	ldi	r25, 0x1C	; 28
   15d02:	0e 94 b0 90 	call	0x12160	; 0x12160 <gpib_read_str>
#if SDEBUG
        if(debuglevel & 128)
   15d06:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15d0a:	87 ff       	sbrs	r24, 7
   15d0c:	04 c0       	rjmp	.+8      	; 0x15d16 <Amigo_Command+0x124>
            gpib_timer_elapsed_end("GPIB read str");
   15d0e:	8b e2       	ldi	r24, 0x2B	; 43
   15d10:	93 e1       	ldi	r25, 0x13	; 19
   15d12:	0e 94 68 8b 	call	0x116d0	; 0x116d0 <gpib_timer_elapsed_end>
#endif
        gpib_enable_PPR(AMIGOp->HEADER.PPR);
   15d16:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   15d1a:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   15d1e:	81 81       	ldd	r24, Z+1	; 0x01
   15d20:	90 e0       	ldi	r25, 0x00	; 0
   15d22:	0e 94 0e 8c 	call	0x1181c	; 0x1181c <gpib_enable_PPR>
        if(status & ERROR_MASK)
   15d26:	8a 89       	ldd	r24, Y+18	; 0x12
   15d28:	9b 89       	ldd	r25, Y+19	; 0x13
   15d2a:	88 27       	eor	r24, r24
   15d2c:	90 7d       	andi	r25, 0xD0	; 208
   15d2e:	89 2b       	or	r24, r25
   15d30:	09 f4       	brne	.+2      	; 0x15d34 <Amigo_Command+0x142>
   15d32:	39 c2       	rjmp	.+1138   	; 0x161a6 <Amigo_Command+0x5b4>
        {
            AMIGOs->dsj = 1;
   15d34:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   15d38:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   15d3c:	81 e0       	ldi	r24, 0x01	; 1
   15d3e:	86 83       	std	Z+6, r24	; 0x06
            AMIGOs->Errors |= ERR_GPIB;
   15d40:	87 81       	ldd	r24, Z+7	; 0x07
   15d42:	90 85       	ldd	r25, Z+8	; 0x08
   15d44:	80 62       	ori	r24, 0x20	; 32
   15d46:	90 87       	std	Z+8, r25	; 0x08
   15d48:	87 83       	std	Z+7, r24	; 0x07
            if(debuglevel & 1)
   15d4a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15d4e:	80 ff       	sbrs	r24, 0
   15d50:	2a c2       	rjmp	.+1108   	; 0x161a6 <Amigo_Command+0x5b4>
                printf("[AMIGO Command:GPIB read error]\n");
   15d52:	81 e9       	ldi	r24, 0x91	; 145
   15d54:	93 e2       	ldi	r25, 0x23	; 35
   15d56:	3e c0       	rjmp	.+124    	; 0x15dd4 <Amigo_Command+0x1e2>
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   15d58:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   15d5c:	90 e0       	ldi	r25, 0x00	; 0
   15d5e:	0e 94 39 92 	call	0x12472	; 0x12472 <AMIGO_is_MLA>
   15d62:	89 2b       	or	r24, r25
   15d64:	19 f4       	brne	.+6      	; 0x15d6c <Amigo_Command+0x17a>
        return(0);
   15d66:	80 e0       	ldi	r24, 0x00	; 0
   15d68:	90 e0       	ldi	r25, 0x00	; 0
   15d6a:	25 c2       	rjmp	.+1098   	; 0x161b6 <Amigo_Command+0x5c4>
                printf("[AMIGO Command:GPIB read error]\n");
        }
        return(status & ERROR_MASK);
    }

    if( !AMIGO_is_MLA(listening) || AMIGO_is_MTA(talking))
   15d6c:	80 91 9f 1e 	lds	r24, 0x1E9F	; 0x801e9f <talking>
   15d70:	90 e0       	ldi	r25, 0x00	; 0
   15d72:	0e 94 4a 92 	call	0x12494	; 0x12494 <AMIGO_is_MTA>
   15d76:	89 2b       	or	r24, r25
   15d78:	b1 f7       	brne	.-20     	; 0x15d66 <Amigo_Command+0x174>
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   15d7a:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   15d7e:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   15d82:	81 81       	ldd	r24, Z+1	; 0x01
   15d84:	90 e0       	ldi	r25, 0x00	; 0
   15d86:	0e 94 3f 8c 	call	0x1187e	; 0x1187e <gpib_disable_PPR>


///  Note: the function will "unread" any commands and return
///  All Data MUST have EOI

    status = EOI_FLAG;
   15d8a:	80 e0       	ldi	r24, 0x00	; 0
   15d8c:	91 e0       	ldi	r25, 0x01	; 1
   15d8e:	9b 8b       	std	Y+19, r25	; 0x13
   15d90:	8a 8b       	std	Y+18, r24	; 0x12
    len = gpib_read_str(gpib_iobuff, GPIB_IOBUFF_LEN, &status);
   15d92:	ae 01       	movw	r20, r28
   15d94:	4e 5e       	subi	r20, 0xEE	; 238
   15d96:	5f 4f       	sbci	r21, 0xFF	; 255
   15d98:	60 e0       	ldi	r22, 0x00	; 0
   15d9a:	72 e0       	ldi	r23, 0x02	; 2
   15d9c:	8b e9       	ldi	r24, 0x9B	; 155
   15d9e:	9c e1       	ldi	r25, 0x1C	; 28
   15da0:	0e 94 b0 90 	call	0x12160	; 0x12160 <gpib_read_str>
   15da4:	8c 01       	movw	r16, r24
    if(status & ERROR_MASK)
   15da6:	8a 89       	ldd	r24, Y+18	; 0x12
   15da8:	9b 89       	ldd	r25, Y+19	; 0x13
   15daa:	88 27       	eor	r24, r24
   15dac:	90 7d       	andi	r25, 0xD0	; 208
   15dae:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   15db2:	89 2b       	or	r24, r25
   15db4:	c1 f0       	breq	.+48     	; 0x15de6 <Amigo_Command+0x1f4>
    {
        AMIGOs->dsj = 1;
   15db6:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   15dba:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   15dbe:	81 e0       	ldi	r24, 0x01	; 1
   15dc0:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   15dc2:	87 81       	ldd	r24, Z+7	; 0x07
   15dc4:	90 85       	ldd	r25, Z+8	; 0x08
   15dc6:	80 62       	ori	r24, 0x20	; 32
   15dc8:	90 87       	std	Z+8, r25	; 0x08
   15dca:	87 83       	std	Z+7, r24	; 0x07
        if(debuglevel & 1)
   15dcc:	20 ff       	sbrs	r18, 0
   15dce:	eb c1       	rjmp	.+982    	; 0x161a6 <Amigo_Command+0x5b4>
            printf("[AMIGO Command:GPIB read error]\n");
   15dd0:	80 e7       	ldi	r24, 0x70	; 112
   15dd2:	93 e2       	ldi	r25, 0x23	; 35
   15dd4:	1f 92       	push	r1
   15dd6:	9f 93       	push	r25
   15dd8:	8f 93       	push	r24
   15dda:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   15dde:	0f 90       	pop	r0
   15de0:	0f 90       	pop	r0
   15de2:	0f 90       	pop	r0
   15de4:	e0 c1       	rjmp	.+960    	; 0x161a6 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }
#if SDEBUG
    if(debuglevel & 32)
   15de6:	25 ff       	sbrs	r18, 5
   15de8:	10 c0       	rjmp	.+32     	; 0x15e0a <Amigo_Command+0x218>
        printf("[AMIGO Command(%02XH): GPIB read bytes:%02XH]\n",
   15dea:	1f 93       	push	r17
   15dec:	0f 93       	push	r16
   15dee:	ff 92       	push	r15
   15df0:	ef 92       	push	r14
   15df2:	81 e4       	ldi	r24, 0x41	; 65
   15df4:	93 e2       	ldi	r25, 0x23	; 35
   15df6:	1f 92       	push	r1
   15df8:	9f 93       	push	r25
   15dfa:	8f 93       	push	r24
   15dfc:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   15e00:	0f b6       	in	r0, 0x3f	; 63
   15e02:	f8 94       	cli
   15e04:	de bf       	out	0x3e, r29	; 62
   15e06:	0f be       	out	0x3f, r0	; 63
   15e08:	cd bf       	out	0x3d, r28	; 61
            secondary, len);
#endif
    if(!len)
   15e0a:	01 15       	cp	r16, r1
   15e0c:	11 05       	cpc	r17, r1
   15e0e:	61 f4       	brne	.+24     	; 0x15e28 <Amigo_Command+0x236>
    {
        AMIGOs->dsj = 1;
   15e10:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   15e14:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   15e18:	81 e0       	ldi	r24, 0x01	; 1
   15e1a:	86 83       	std	Z+6, r24	; 0x06
        AMIGOs->Errors |= ERR_GPIB;
   15e1c:	87 81       	ldd	r24, Z+7	; 0x07
   15e1e:	90 85       	ldd	r25, Z+8	; 0x08
   15e20:	80 62       	ori	r24, 0x20	; 32
   15e22:	90 87       	std	Z+8, r25	; 0x08
   15e24:	87 83       	std	Z+7, r24	; 0x07
   15e26:	bf c1       	rjmp	.+894    	; 0x161a6 <Amigo_Command+0x5b4>
        return(status & ERROR_MASK);
    }

    ptr = gpib_iobuff;
    op = *ptr++;
   15e28:	60 91 9b 1c 	lds	r22, 0x1C9B	; 0x801c9b <gpib_iobuff>

    if (secondary == 0x68)
   15e2c:	98 e6       	ldi	r25, 0x68	; 104
   15e2e:	e9 16       	cp	r14, r25
   15e30:	f1 04       	cpc	r15, r1
   15e32:	09 f0       	breq	.+2      	; 0x15e36 <Amigo_Command+0x244>
   15e34:	28 c1       	rjmp	.+592    	; 0x16086 <Amigo_Command+0x494>
    {
        if(op == 0x00 && len == 2)
   15e36:	61 11       	cpse	r22, r1
   15e38:	2e c0       	rjmp	.+92     	; 0x15e96 <Amigo_Command+0x2a4>
   15e3a:	02 30       	cpi	r16, 0x02	; 2
   15e3c:	11 05       	cpc	r17, r1
   15e3e:	09 f0       	breq	.+2      	; 0x15e42 <Amigo_Command+0x250>
   15e40:	b7 c1       	rjmp	.+878    	; 0x161b0 <Amigo_Command+0x5be>
        {
///  Reference: A40

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   15e42:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15e46:	85 ff       	sbrs	r24, 5
   15e48:	0a c0       	rjmp	.+20     	; 0x15e5e <Amigo_Command+0x26c>
                printf("[AMIGO Cold Load Read Command]\n");
   15e4a:	81 e2       	ldi	r24, 0x21	; 33
   15e4c:	93 e2       	ldi	r25, 0x23	; 35
   15e4e:	1f 92       	push	r1
   15e50:	9f 93       	push	r25
   15e52:	8f 93       	push	r24
   15e54:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   15e58:	0f 90       	pop	r0
   15e5a:	0f 90       	pop	r0
   15e5c:	0f 90       	pop	r0
#endif
            ///TODO we do NOT support multiple units yet
            AMIGOs->unitNO = 0;
   15e5e:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   15e62:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   15e66:	11 82       	std	Z+1, r1	; 0x01
            AMIGOs->dsj = 0;
   15e68:	16 82       	std	Z+6, r1	; 0x06
            AMIGOs->Errors = 0;
   15e6a:	10 86       	std	Z+8, r1	; 0x08
   15e6c:	17 82       	std	Z+7, r1	; 0x07
            /// Fill in temparary address
            tmp.cyl = 0;
   15e6e:	1c 82       	std	Y+4, r1	; 0x04
            tmp.head = ( (0xff & *ptr) >> 6) & 0x03;
   15e70:	80 91 9c 1c 	lds	r24, 0x1C9C	; 0x801c9c <gpib_iobuff+0x1>
   15e74:	98 2f       	mov	r25, r24
   15e76:	92 95       	swap	r25
   15e78:	96 95       	lsr	r25
   15e7a:	96 95       	lsr	r25
   15e7c:	93 70       	andi	r25, 0x03	; 3
   15e7e:	9d 83       	std	Y+5, r25	; 0x05
            tmp.sector = 0x3f & *ptr;
   15e80:	8f 73       	andi	r24, 0x3F	; 63
   15e82:	8e 83       	std	Y+6, r24	; 0x06
            ++ptr;
            //update to real address on sucess
            amigo_seek((AMIGOStateType *) &tmp);
   15e84:	ce 01       	movw	r24, r28
   15e86:	01 96       	adiw	r24, 0x01	; 1
   15e88:	18 da       	rcall	.-3024   	; 0x152ba <amigo_seek>
            AMIGOs->state = AMIGO_COLD_LOAD_READ;
   15e8a:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   15e8e:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   15e92:	85 e0       	ldi	r24, 0x05	; 5
   15e94:	5c c1       	rjmp	.+696    	; 0x1614e <Amigo_Command+0x55c>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 5)
   15e96:	62 30       	cpi	r22, 0x02	; 2
   15e98:	09 f0       	breq	.+2      	; 0x15e9c <Amigo_Command+0x2aa>
   15e9a:	3f c0       	rjmp	.+126    	; 0x15f1a <Amigo_Command+0x328>
   15e9c:	05 30       	cpi	r16, 0x05	; 5
   15e9e:	11 05       	cpc	r17, r1
   15ea0:	d1 f4       	brne	.+52     	; 0x15ed6 <Amigo_Command+0x2e4>
/// @brief 
///  Seek 1 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   15ea2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15ea6:	85 ff       	sbrs	r24, 5
   15ea8:	0a c0       	rjmp	.+20     	; 0x15ebe <Amigo_Command+0x2cc>
                printf("[AMIGO Seek len=5]\n");
   15eaa:	8d e0       	ldi	r24, 0x0D	; 13
   15eac:	93 e2       	ldi	r25, 0x23	; 35
   15eae:	1f 92       	push	r1
   15eb0:	9f 93       	push	r25
   15eb2:	8f 93       	push	r24
   15eb4:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   15eb8:	0f 90       	pop	r0
   15eba:	0f 90       	pop	r0
   15ebc:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   15ebe:	80 91 9c 1c 	lds	r24, 0x1C9C	; 0x801c9c <gpib_iobuff+0x1>
   15ec2:	83 de       	rcall	.-762    	; 0x15bca <amigo_check_unit>

            /// Fill in temparary address
            tmp.cyl = 0xff & *ptr++;
   15ec4:	80 91 9d 1c 	lds	r24, 0x1C9D	; 0x801c9d <gpib_iobuff+0x2>
   15ec8:	8c 83       	std	Y+4, r24	; 0x04
            tmp.head = 0xff & *ptr++;
   15eca:	80 91 9e 1c 	lds	r24, 0x1C9E	; 0x801c9e <gpib_iobuff+0x3>
   15ece:	8d 83       	std	Y+5, r24	; 0x05
            tmp.sector = 0xff & *ptr++;
   15ed0:	80 91 9f 1c 	lds	r24, 0x1C9F	; 0x801c9f <gpib_iobuff+0x4>
   15ed4:	1d c0       	rjmp	.+58     	; 0x15f10 <Amigo_Command+0x31e>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x02 && len == 6)
   15ed6:	06 30       	cpi	r16, 0x06	; 6
   15ed8:	11 05       	cpc	r17, r1
   15eda:	09 f0       	breq	.+2      	; 0x15ede <Amigo_Command+0x2ec>
   15edc:	69 c1       	rjmp	.+722    	; 0x161b0 <Amigo_Command+0x5be>
/// @brief 
///  Seek 2 byte cylinder

            AMIGOStateType tmp;
#if SDEBUG
            if(debuglevel & 32)
   15ede:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15ee2:	85 ff       	sbrs	r24, 5
   15ee4:	0a c0       	rjmp	.+20     	; 0x15efa <Amigo_Command+0x308>
                printf("[AMIGO Seek len=6]\n");
   15ee6:	89 ef       	ldi	r24, 0xF9	; 249
   15ee8:	92 e2       	ldi	r25, 0x22	; 34
   15eea:	1f 92       	push	r1
   15eec:	9f 93       	push	r25
   15eee:	8f 93       	push	r24
   15ef0:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   15ef4:	0f 90       	pop	r0
   15ef6:	0f 90       	pop	r0
   15ef8:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   15efa:	80 91 9c 1c 	lds	r24, 0x1C9C	; 0x801c9c <gpib_iobuff+0x1>
   15efe:	65 de       	rcall	.-822    	; 0x15bca <amigo_check_unit>
            /// Fill in temparary address
            tmp.cyl = (0xff & *ptr++) << 8;       // MSB
            tmp.cyl |= (0xff & *ptr++);           // LSB
   15f00:	80 91 9e 1c 	lds	r24, 0x1C9E	; 0x801c9e <gpib_iobuff+0x3>
   15f04:	8c 83       	std	Y+4, r24	; 0x04
            tmp.head = 0xff & *ptr++;
   15f06:	80 91 9f 1c 	lds	r24, 0x1C9F	; 0x801c9f <gpib_iobuff+0x4>
   15f0a:	8d 83       	std	Y+5, r24	; 0x05
            tmp.sector = 0xff & *ptr++;
   15f0c:	80 91 a0 1c 	lds	r24, 0x1CA0	; 0x801ca0 <gpib_iobuff+0x5>
            //update to real address on sucess
            amigo_seek((AMIGOStateType *)&tmp);
   15f10:	8e 83       	std	Y+6, r24	; 0x06
   15f12:	ce 01       	movw	r24, r28
   15f14:	01 96       	adiw	r24, 0x01	; 1
   15f16:	d1 d9       	rcall	.-3166   	; 0x152ba <amigo_seek>
   15f18:	1b c1       	rjmp	.+566    	; 0x16150 <Amigo_Command+0x55e>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x03 && len == 2)
   15f1a:	63 30       	cpi	r22, 0x03	; 3
   15f1c:	e9 f4       	brne	.+58     	; 0x15f58 <Amigo_Command+0x366>
   15f1e:	02 30       	cpi	r16, 0x02	; 2
   15f20:	11 05       	cpc	r17, r1
   15f22:	09 f0       	breq	.+2      	; 0x15f26 <Amigo_Command+0x334>
   15f24:	45 c1       	rjmp	.+650    	; 0x161b0 <Amigo_Command+0x5be>
        {
///  Reference: A15
#if SDEBUG
            if(debuglevel & 32)
   15f26:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15f2a:	85 ff       	sbrs	r24, 5
   15f2c:	0a c0       	rjmp	.+20     	; 0x15f42 <Amigo_Command+0x350>
                printf("[AMIGO Request Status Buffered Command]\n");
   15f2e:	80 ed       	ldi	r24, 0xD0	; 208
   15f30:	92 e2       	ldi	r25, 0x22	; 34
   15f32:	1f 92       	push	r1
   15f34:	9f 93       	push	r25
   15f36:	8f 93       	push	r24
   15f38:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   15f3c:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   15f3e:	0f 90       	pop	r0
   15f40:	0f 90       	pop	r0
   15f42:	80 91 9c 1c 	lds	r24, 0x1C9C	; 0x801c9c <gpib_iobuff+0x1>
            amigo_request_status();
   15f46:	41 de       	rcall	.-894    	; 0x15bca <amigo_check_unit>
            AMIGOs->state = AMIGO_REQUEST_STATUS_BUFFERED;
   15f48:	7b d8       	rcall	.-3850   	; 0x15040 <amigo_request_status>
   15f4a:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   15f4e:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   15f52:	83 e0       	ldi	r24, 0x03	; 3
   15f54:	80 83       	st	Z, r24
            return(status & ERROR_MASK);
        }
        else if(op == 0x05 && len == 2)
   15f56:	27 c1       	rjmp	.+590    	; 0x161a6 <Amigo_Command+0x5b4>
   15f58:	65 30       	cpi	r22, 0x05	; 5
   15f5a:	d9 f4       	brne	.+54     	; 0x15f92 <Amigo_Command+0x3a0>
   15f5c:	02 30       	cpi	r16, 0x02	; 2
   15f5e:	11 05       	cpc	r17, r1
   15f60:	09 f0       	breq	.+2      	; 0x15f64 <Amigo_Command+0x372>
        {
///  Reference: A35
#if SDEBUG
            if(debuglevel & 32)
   15f62:	26 c1       	rjmp	.+588    	; 0x161b0 <Amigo_Command+0x5be>
   15f64:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15f68:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Read Unbuffered Command]\n");
   15f6a:	0a c0       	rjmp	.+20     	; 0x15f80 <Amigo_Command+0x38e>
   15f6c:	8f ea       	ldi	r24, 0xAF	; 175
   15f6e:	92 e2       	ldi	r25, 0x22	; 34
   15f70:	1f 92       	push	r1
   15f72:	9f 93       	push	r25
   15f74:	8f 93       	push	r24
   15f76:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   15f7a:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   15f7c:	0f 90       	pop	r0
   15f7e:	0f 90       	pop	r0
   15f80:	80 91 9c 1c 	lds	r24, 0x1C9C	; 0x801c9c <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_UNBUFFERED;
   15f84:	22 de       	rcall	.-956    	; 0x15bca <amigo_check_unit>
   15f86:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   15f8a:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   15f8e:	86 e0       	ldi	r24, 0x06	; 6
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x07 && len == 4)
   15f90:	de c0       	rjmp	.+444    	; 0x1614e <Amigo_Command+0x55c>
   15f92:	67 30       	cpi	r22, 0x07	; 7
   15f94:	f9 f4       	brne	.+62     	; 0x15fd4 <Amigo_Command+0x3e2>
   15f96:	04 30       	cpi	r16, 0x04	; 4
   15f98:	11 05       	cpc	r17, r1
   15f9a:	09 f0       	breq	.+2      	; 0x15f9e <Amigo_Command+0x3ac>
        {
            uint16_t sectors;
#if SDEBUG
            if(debuglevel & 32)
   15f9c:	09 c1       	rjmp	.+530    	; 0x161b0 <Amigo_Command+0x5be>
   15f9e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   15fa2:	85 ff       	sbrs	r24, 5
                printf("[AMIGO Verify]\n");
   15fa4:	0a c0       	rjmp	.+20     	; 0x15fba <Amigo_Command+0x3c8>
   15fa6:	8f e9       	ldi	r24, 0x9F	; 159
   15fa8:	92 e2       	ldi	r25, 0x22	; 34
   15faa:	1f 92       	push	r1
   15fac:	9f 93       	push	r25
   15fae:	8f 93       	push	r24
   15fb0:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   15fb4:	0f 90       	pop	r0
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   15fb6:	0f 90       	pop	r0
   15fb8:	0f 90       	pop	r0
   15fba:	80 91 9c 1c 	lds	r24, 0x1C9C	; 0x801c9c <gpib_iobuff+0x1>
            sectors = (0xff & *ptr++) << 8;
   15fbe:	05 de       	rcall	.-1014   	; 0x15bca <amigo_check_unit>
   15fc0:	80 91 9d 1c 	lds	r24, 0x1C9D	; 0x801c9d <gpib_iobuff+0x2>
            sectors |= (0xff & *ptr++);
            return ( amigo_verify( sectors) );
   15fc4:	90 e0       	ldi	r25, 0x00	; 0
   15fc6:	98 2f       	mov	r25, r24
   15fc8:	88 27       	eor	r24, r24
   15fca:	20 91 9e 1c 	lds	r18, 0x1C9E	; 0x801c9e <gpib_iobuff+0x3>
   15fce:	82 2b       	or	r24, r18
        }
        else if(op == 0x08 && len == 2)
   15fd0:	9f d9       	rcall	.-3266   	; 0x15310 <amigo_verify>
   15fd2:	f1 c0       	rjmp	.+482    	; 0x161b6 <Amigo_Command+0x5c4>
   15fd4:	68 30       	cpi	r22, 0x08	; 8
   15fd6:	d9 f4       	brne	.+54     	; 0x1600e <Amigo_Command+0x41c>
   15fd8:	02 30       	cpi	r16, 0x02	; 2
   15fda:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   15fdc:	09 f0       	breq	.+2      	; 0x15fe0 <Amigo_Command+0x3ee>
   15fde:	e8 c0       	rjmp	.+464    	; 0x161b0 <Amigo_Command+0x5be>
   15fe0:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
                printf("[AMIGO Write Unbuffered Command]\n");
   15fe4:	85 ff       	sbrs	r24, 5
   15fe6:	0a c0       	rjmp	.+20     	; 0x15ffc <Amigo_Command+0x40a>
   15fe8:	8d e7       	ldi	r24, 0x7D	; 125
   15fea:	92 e2       	ldi	r25, 0x22	; 34
   15fec:	1f 92       	push	r1
   15fee:	9f 93       	push	r25
   15ff0:	8f 93       	push	r24
   15ff2:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   15ff6:	0f 90       	pop	r0
   15ff8:	0f 90       	pop	r0
   15ffa:	0f 90       	pop	r0
   15ffc:	80 91 9c 1c 	lds	r24, 0x1C9C	; 0x801c9c <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_UNBUFFERED;
   16000:	e4 dd       	rcall	.-1080   	; 0x15bca <amigo_check_unit>
   16002:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   16006:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if((op == 0x0B || op == 0x2b) && len == 2)
   1600a:	88 e0       	ldi	r24, 0x08	; 8
   1600c:	a0 c0       	rjmp	.+320    	; 0x1614e <Amigo_Command+0x55c>
   1600e:	86 2f       	mov	r24, r22
   16010:	8f 7d       	andi	r24, 0xDF	; 223
   16012:	8b 30       	cpi	r24, 0x0B	; 11
   16014:	d9 f4       	brne	.+54     	; 0x1604c <Amigo_Command+0x45a>
   16016:	02 30       	cpi	r16, 0x02	; 2
   16018:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   1601a:	09 f0       	breq	.+2      	; 0x1601e <Amigo_Command+0x42c>
   1601c:	c9 c0       	rjmp	.+402    	; 0x161b0 <Amigo_Command+0x5be>
   1601e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
                printf("[AMIGO Initialize Command]\n");
   16022:	85 ff       	sbrs	r24, 5
   16024:	0a c0       	rjmp	.+20     	; 0x1603a <Amigo_Command+0x448>
   16026:	81 e6       	ldi	r24, 0x61	; 97
   16028:	92 e2       	ldi	r25, 0x22	; 34
   1602a:	1f 92       	push	r1
   1602c:	9f 93       	push	r25
   1602e:	8f 93       	push	r24
   16030:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16034:	0f 90       	pop	r0
   16036:	0f 90       	pop	r0
   16038:	0f 90       	pop	r0
   1603a:	80 91 9c 1c 	lds	r24, 0x1C9C	; 0x801c9c <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_INITIALIZE;
   1603e:	c5 dd       	rcall	.-1142   	; 0x15bca <amigo_check_unit>
   16040:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   16044:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
        else if(op == 0x14 && len == 2)
   16048:	8a e0       	ldi	r24, 0x0A	; 10
   1604a:	81 c0       	rjmp	.+258    	; 0x1614e <Amigo_Command+0x55c>
   1604c:	64 31       	cpi	r22, 0x14	; 20
   1604e:	09 f0       	breq	.+2      	; 0x16052 <Amigo_Command+0x460>
   16050:	af c0       	rjmp	.+350    	; 0x161b0 <Amigo_Command+0x5be>
   16052:	02 30       	cpi	r16, 0x02	; 2
   16054:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   16056:	09 f0       	breq	.+2      	; 0x1605a <Amigo_Command+0x468>
   16058:	ab c0       	rjmp	.+342    	; 0x161b0 <Amigo_Command+0x5be>
   1605a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
                printf("[AMIGO Request Logical Address Command]\n");
   1605e:	85 ff       	sbrs	r24, 5
   16060:	0a c0       	rjmp	.+20     	; 0x16076 <Amigo_Command+0x484>
   16062:	88 e3       	ldi	r24, 0x38	; 56
   16064:	92 e2       	ldi	r25, 0x22	; 34
   16066:	1f 92       	push	r1
   16068:	9f 93       	push	r25
   1606a:	8f 93       	push	r24
   1606c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   16070:	0f 90       	pop	r0
#endif
            amigo_request_logical_address();
   16072:	0f 90       	pop	r0
   16074:	0f 90       	pop	r0
            AMIGOs->state = AMIGO_REQUEST_LOGICAL_ADDRESS;
   16076:	0e 94 12 a8 	call	0x15024	; 0x15024 <amigo_request_logical_address>
   1607a:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   1607e:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x69)
   16082:	84 e0       	ldi	r24, 0x04	; 4
   16084:	64 c0       	rjmp	.+200    	; 0x1614e <Amigo_Command+0x55c>
   16086:	89 e6       	ldi	r24, 0x69	; 105
   16088:	e8 16       	cp	r14, r24
    {
        if(op == 0x08 && len == 2)
   1608a:	f1 04       	cpc	r15, r1
   1608c:	f1 f4       	brne	.+60     	; 0x160ca <Amigo_Command+0x4d8>
   1608e:	68 30       	cpi	r22, 0x08	; 8
   16090:	09 f0       	breq	.+2      	; 0x16094 <Amigo_Command+0x4a2>
   16092:	8e c0       	rjmp	.+284    	; 0x161b0 <Amigo_Command+0x5be>
   16094:	02 30       	cpi	r16, 0x02	; 2
   16096:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   16098:	09 f0       	breq	.+2      	; 0x1609c <Amigo_Command+0x4aa>
   1609a:	8a c0       	rjmp	.+276    	; 0x161b0 <Amigo_Command+0x5be>
   1609c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
                printf("[AMIGO Write Buffered Command]\n");
   160a0:	85 ff       	sbrs	r24, 5
   160a2:	0a c0       	rjmp	.+20     	; 0x160b8 <Amigo_Command+0x4c6>
   160a4:	88 e1       	ldi	r24, 0x18	; 24
   160a6:	92 e2       	ldi	r25, 0x22	; 34
   160a8:	1f 92       	push	r1
   160aa:	9f 93       	push	r25
   160ac:	8f 93       	push	r24
   160ae:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   160b2:	0f 90       	pop	r0
   160b4:	0f 90       	pop	r0
   160b6:	0f 90       	pop	r0
   160b8:	80 91 9c 1c 	lds	r24, 0x1C9C	; 0x801c9c <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_WRITE_BUFFERED;
   160bc:	86 dd       	rcall	.-1268   	; 0x15bca <amigo_check_unit>
   160be:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   160c2:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6A)
   160c6:	89 e0       	ldi	r24, 0x09	; 9
   160c8:	42 c0       	rjmp	.+132    	; 0x1614e <Amigo_Command+0x55c>
   160ca:	9a e6       	ldi	r25, 0x6A	; 106
   160cc:	e9 16       	cp	r14, r25
   160ce:	f1 04       	cpc	r15, r1
    {
        if(op == 0x08 && len == 2)
   160d0:	09 f0       	breq	.+2      	; 0x160d4 <Amigo_Command+0x4e2>
   160d2:	47 c0       	rjmp	.+142    	; 0x16162 <Amigo_Command+0x570>
   160d4:	68 30       	cpi	r22, 0x08	; 8
   160d6:	f1 f4       	brne	.+60     	; 0x16114 <Amigo_Command+0x522>
   160d8:	02 30       	cpi	r16, 0x02	; 2
   160da:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   160dc:	09 f0       	breq	.+2      	; 0x160e0 <Amigo_Command+0x4ee>
   160de:	68 c0       	rjmp	.+208    	; 0x161b0 <Amigo_Command+0x5be>
   160e0:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
                printf("[AMIGO Request Status Unbuffered Command]\n");
   160e4:	85 ff       	sbrs	r24, 5
   160e6:	0a c0       	rjmp	.+20     	; 0x160fc <Amigo_Command+0x50a>
   160e8:	8d ee       	ldi	r24, 0xED	; 237
   160ea:	91 e2       	ldi	r25, 0x21	; 33
   160ec:	1f 92       	push	r1
   160ee:	9f 93       	push	r25
   160f0:	8f 93       	push	r24
   160f2:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   160f6:	0f 90       	pop	r0
   160f8:	0f 90       	pop	r0
   160fa:	0f 90       	pop	r0
   160fc:	80 91 9c 1c 	lds	r24, 0x1C9C	; 0x801c9c <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_REQUEST_STATUS_UNBUFFERED;
   16100:	64 dd       	rcall	.-1336   	; 0x15bca <amigo_check_unit>
   16102:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   16106:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
            amigo_request_status();
   1610a:	82 e0       	ldi	r24, 0x02	; 2
   1610c:	80 83       	st	Z, r24
   1610e:	0e 94 20 a8 	call	0x15040	; 0x15040 <amigo_request_status>
            return(status & ERROR_MASK);
        }
        if(op == 0x05 && len == 2)
   16112:	49 c0       	rjmp	.+146    	; 0x161a6 <Amigo_Command+0x5b4>
   16114:	65 30       	cpi	r22, 0x05	; 5
   16116:	09 f0       	breq	.+2      	; 0x1611a <Amigo_Command+0x528>
   16118:	4b c0       	rjmp	.+150    	; 0x161b0 <Amigo_Command+0x5be>
   1611a:	02 30       	cpi	r16, 0x02	; 2
   1611c:	11 05       	cpc	r17, r1
        {
#if SDEBUG
            if(debuglevel & 32)
   1611e:	09 f0       	breq	.+2      	; 0x16122 <Amigo_Command+0x530>
   16120:	47 c0       	rjmp	.+142    	; 0x161b0 <Amigo_Command+0x5be>
   16122:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
                printf("[AMIGO Read Buffered Command]\n");
   16126:	85 ff       	sbrs	r24, 5
   16128:	0a c0       	rjmp	.+20     	; 0x1613e <Amigo_Command+0x54c>
   1612a:	8e ec       	ldi	r24, 0xCE	; 206
   1612c:	91 e2       	ldi	r25, 0x21	; 33
   1612e:	1f 92       	push	r1
   16130:	9f 93       	push	r25
   16132:	8f 93       	push	r24
   16134:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   16138:	0f 90       	pop	r0
   1613a:	0f 90       	pop	r0
   1613c:	0f 90       	pop	r0
   1613e:	80 91 9c 1c 	lds	r24, 0x1C9C	; 0x801c9c <gpib_iobuff+0x1>
            AMIGOs->state = AMIGO_READ_BUFFERED;
   16142:	43 dd       	rcall	.-1402   	; 0x15bca <amigo_check_unit>
   16144:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   16148:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
            gpib_enable_PPR(AMIGOp->HEADER.PPR);
   1614c:	87 e0       	ldi	r24, 0x07	; 7
   1614e:	80 83       	st	Z, r24
   16150:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   16154:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   16158:	81 81       	ldd	r24, Z+1	; 0x01
   1615a:	90 e0       	ldi	r25, 0x00	; 0
   1615c:	0e 94 0e 8c 	call	0x1181c	; 0x1181c <gpib_enable_PPR>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x6C)
   16160:	22 c0       	rjmp	.+68     	; 0x161a6 <Amigo_Command+0x5b4>
   16162:	8c e6       	ldi	r24, 0x6C	; 108
   16164:	e8 16       	cp	r14, r24
    {
        if(op == 0x18 && len == 5)
   16166:	f1 04       	cpc	r15, r1
   16168:	d1 f4       	brne	.+52     	; 0x1619e <Amigo_Command+0x5ac>
   1616a:	68 31       	cpi	r22, 0x18	; 24
   1616c:	09 f5       	brne	.+66     	; 0x161b0 <Amigo_Command+0x5be>
   1616e:	05 30       	cpi	r16, 0x05	; 5
        {
///  Reference: A48 ..  A50

            uint8_t db;
#if SDEBUG
            if(debuglevel & 32)
   16170:	11 05       	cpc	r17, r1
   16172:	f1 f4       	brne	.+60     	; 0x161b0 <Amigo_Command+0x5be>
   16174:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
                printf("[AMIGO Format]\n");
   16178:	85 ff       	sbrs	r24, 5
   1617a:	0a c0       	rjmp	.+20     	; 0x16190 <Amigo_Command+0x59e>
   1617c:	8e eb       	ldi	r24, 0xBE	; 190
   1617e:	91 e2       	ldi	r25, 0x21	; 33
   16180:	1f 92       	push	r1
   16182:	9f 93       	push	r25
   16184:	8f 93       	push	r24
   16186:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
#endif
            ///TODO we do not support multiple units yet
            ///FIXME Added unit error
            amigo_check_unit(0xff & *ptr++);
   1618a:	0f 90       	pop	r0
   1618c:	0f 90       	pop	r0
   1618e:	0f 90       	pop	r0
            ++ptr; // override not used
            ++ptr; // interleave not used
            db = 0xff & *ptr++;
            amigo_format(db);
   16190:	80 91 9c 1c 	lds	r24, 0x1C9C	; 0x801c9c <gpib_iobuff+0x1>
   16194:	1a dd       	rcall	.-1484   	; 0x15bca <amigo_check_unit>
   16196:	80 91 9f 1c 	lds	r24, 0x1C9F	; 0x801c9f <gpib_iobuff+0x4>
            return(status & ERROR_MASK);
        }
    }
    else if (secondary == 0x70)                   // HP-300 Clear
   1619a:	4b d9       	rcall	.-3434   	; 0x15432 <amigo_format>
   1619c:	04 c0       	rjmp	.+8      	; 0x161a6 <Amigo_Command+0x5b4>
    {
///  Reference: A23
        ++ptr;                                    // Dummy byte
        return(status & ERROR_MASK);
   1619e:	90 e7       	ldi	r25, 0x70	; 112
   161a0:	e9 16       	cp	r14, r25
   161a2:	f1 04       	cpc	r15, r1
   161a4:	29 f4       	brne	.+10     	; 0x161b0 <Amigo_Command+0x5be>
   161a6:	8a 89       	ldd	r24, Y+18	; 0x12
    }
    return ( amigo_todo_op(secondary, op, len) );
   161a8:	9b 89       	ldd	r25, Y+19	; 0x13
   161aa:	88 27       	eor	r24, r24
   161ac:	90 7d       	andi	r25, 0xD0	; 208
   161ae:	03 c0       	rjmp	.+6      	; 0x161b6 <Amigo_Command+0x5c4>
}
   161b0:	a8 01       	movw	r20, r16
   161b2:	8e 2d       	mov	r24, r14
   161b4:	d1 db       	rcall	.-2142   	; 0x15958 <amigo_todo_op>
   161b6:	63 96       	adiw	r28, 0x13	; 19
   161b8:	e6 e0       	ldi	r30, 0x06	; 6
   161ba:	0c 94 e9 e8 	jmp	0x1d1d2	; 0x1d1d2 <__epilogue_restores__+0x18>

000161be <Amigo_Execute>:
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list)


int Amigo_Execute( int secondary )
{
   161be:	cf 93       	push	r28
   161c0:	df 93       	push	r29
   161c2:	ec 01       	movw	r28, r24
#if SDEBUG
    if(debuglevel & 32)
   161c4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   161c8:	85 ff       	sbrs	r24, 5
   161ca:	19 c0       	rjmp	.+50     	; 0x161fe <Amigo_Execute+0x40>
        printf("[AMIGO Execute(%02XH): listen:%02XH, talk:%02XH]\n",
   161cc:	80 91 9f 1e 	lds	r24, 0x1E9F	; 0x801e9f <talking>
   161d0:	1f 92       	push	r1
   161d2:	8f 93       	push	r24
   161d4:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   161d8:	1f 92       	push	r1
   161da:	8f 93       	push	r24
   161dc:	df 93       	push	r29
   161de:	cf 93       	push	r28
   161e0:	8c e8       	ldi	r24, 0x8C	; 140
   161e2:	91 e2       	ldi	r25, 0x21	; 33
   161e4:	1f 92       	push	r1
   161e6:	9f 93       	push	r25
   161e8:	8f 93       	push	r24
   161ea:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   161ee:	8d b7       	in	r24, 0x3d	; 61
   161f0:	9e b7       	in	r25, 0x3e	; 62
   161f2:	09 96       	adiw	r24, 0x09	; 9
   161f4:	0f b6       	in	r0, 0x3f	; 63
   161f6:	f8 94       	cli
   161f8:	9e bf       	out	0x3e, r25	; 62
   161fa:	0f be       	out	0x3f, r0	; 63
   161fc:	8d bf       	out	0x3d, r24	; 61
            secondary, listening, talking);
#endif

    if(talking == UNT)
   161fe:	80 91 9f 1e 	lds	r24, 0x1E9F	; 0x801e9f <talking>
   16202:	8f 35       	cpi	r24, 0x5F	; 95
   16204:	09 f4       	brne	.+2      	; 0x16208 <Amigo_Execute+0x4a>
   16206:	ad c0       	rjmp	.+346    	; 0x16362 <Amigo_Execute+0x1a4>
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   16208:	90 e0       	ldi	r25, 0x00	; 0
   1620a:	0e 94 4a 92 	call	0x12494	; 0x12494 <AMIGO_is_MTA>
   1620e:	89 2b       	or	r24, r25
   16210:	39 f0       	breq	.+14     	; 0x16220 <Amigo_Execute+0x62>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
   16212:	ce 01       	movw	r24, r28
   16214:	87 7f       	andi	r24, 0xF7	; 247
   16216:	80 36       	cpi	r24, 0x60	; 96
   16218:	91 05       	cpc	r25, r1
   1621a:	09 f0       	breq	.+2      	; 0x1621e <Amigo_Execute+0x60>
   1621c:	a2 c0       	rjmp	.+324    	; 0x16362 <Amigo_Execute+0x1a4>
   1621e:	08 c0       	rjmp	.+16     	; 0x16230 <Amigo_Execute+0x72>
#endif

    if(talking == UNT)
        return(0);

    if(!AMIGO_is_MTA(talking) && !AMIGO_is_MLA(listening))
   16220:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   16224:	90 e0       	ldi	r25, 0x00	; 0
   16226:	0e 94 39 92 	call	0x12472	; 0x12472 <AMIGO_is_MLA>
   1622a:	89 2b       	or	r24, r25
   1622c:	91 f7       	brne	.-28     	; 0x16212 <Amigo_Execute+0x54>
   1622e:	99 c0       	rjmp	.+306    	; 0x16362 <Amigo_Execute+0x1a4>
        return(0);

    if(secondary != 0x60 && secondary != 0x68)
        return(0);

    gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16230:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   16234:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   16238:	81 81       	ldd	r24, Z+1	; 0x01
   1623a:	90 e0       	ldi	r25, 0x00	; 0
   1623c:	0e 94 3f 8c 	call	0x1187e	; 0x1187e <gpib_disable_PPR>

    if(secondary == 0x60)
   16240:	c0 36       	cpi	r28, 0x60	; 96
   16242:	d1 05       	cpc	r29, r1
   16244:	09 f0       	breq	.+2      	; 0x16248 <Amigo_Execute+0x8a>
   16246:	4e c0       	rjmp	.+156    	; 0x162e4 <Amigo_Execute+0x126>
    {
        switch(AMIGOs->state)
   16248:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   1624c:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   16250:	e0 81       	ld	r30, Z
   16252:	8e 2f       	mov	r24, r30
   16254:	90 e0       	ldi	r25, 0x00	; 0
   16256:	8b 30       	cpi	r24, 0x0B	; 11
   16258:	91 05       	cpc	r25, r1
   1625a:	08 f0       	brcs	.+2      	; 0x1625e <Amigo_Execute+0xa0>
   1625c:	41 c0       	rjmp	.+130    	; 0x162e0 <Amigo_Execute+0x122>
   1625e:	fc 01       	movw	r30, r24
   16260:	e0 53       	subi	r30, 0x30	; 48
   16262:	ff 4f       	sbci	r31, 0xFF	; 255
   16264:	0c 94 92 e8 	jmp	0x1d124	; 0x1d124 <__tablejump2__>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_COLD_LOAD_READ:
#if SDEBUG
                if(debuglevel & 32)
   16268:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1626c:	85 ff       	sbrs	r24, 5
   1626e:	18 c0       	rjmp	.+48     	; 0x162a0 <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Cold Load Read]\n");
   16270:	8c e6       	ldi	r24, 0x6C	; 108
   16272:	91 e2       	ldi	r25, 0x21	; 33
   16274:	0d c0       	rjmp	.+26     	; 0x16290 <Amigo_Execute+0xd2>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   16276:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1627a:	85 ff       	sbrs	r24, 5
   1627c:	11 c0       	rjmp	.+34     	; 0x162a0 <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Read Unbuffered]\n");
   1627e:	8b e4       	ldi	r24, 0x4B	; 75
   16280:	91 e2       	ldi	r25, 0x21	; 33
   16282:	06 c0       	rjmp	.+12     	; 0x16290 <Amigo_Execute+0xd2>
#endif
                return ( amigo_buffered_read() );
            case AMIGO_READ_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   16284:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   16288:	85 ff       	sbrs	r24, 5
   1628a:	0a c0       	rjmp	.+20     	; 0x162a0 <Amigo_Execute+0xe2>
                    printf("[AMIGO Execute Read Buffered]\n");
   1628c:	8c e2       	ldi	r24, 0x2C	; 44
   1628e:	91 e2       	ldi	r25, 0x21	; 33
   16290:	1f 92       	push	r1
   16292:	9f 93       	push	r25
   16294:	8f 93       	push	r24
   16296:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1629a:	0f 90       	pop	r0
   1629c:	0f 90       	pop	r0
#endif
                return ( amigo_buffered_read() );
   1629e:	0f 90       	pop	r0
   162a0:	5a d9       	rcall	.-3404   	; 0x15556 <amigo_buffered_read>
            case AMIGO_WRITE_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   162a2:	61 c0       	rjmp	.+194    	; 0x16366 <Amigo_Execute+0x1a8>
   162a4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   162a8:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Unbuffered]\n");
   162aa:	18 c0       	rjmp	.+48     	; 0x162dc <Amigo_Execute+0x11e>
   162ac:	8a e0       	ldi	r24, 0x0A	; 10
   162ae:	91 e2       	ldi	r25, 0x21	; 33
#endif
                return ( amigo_buffered_write() );
            case AMIGO_INITIALIZE:
#if SDEBUG
                if(debuglevel & 32)
   162b0:	0d c0       	rjmp	.+26     	; 0x162cc <Amigo_Execute+0x10e>
   162b2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   162b6:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Initialize]\n");
   162b8:	11 c0       	rjmp	.+34     	; 0x162dc <Amigo_Execute+0x11e>
   162ba:	8e ee       	ldi	r24, 0xEE	; 238
   162bc:	90 e2       	ldi	r25, 0x20	; 32
#endif
                return ( amigo_buffered_write() );
            case AMIGO_WRITE_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   162be:	06 c0       	rjmp	.+12     	; 0x162cc <Amigo_Execute+0x10e>
   162c0:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   162c4:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Write Buffered]\n");
   162c6:	0a c0       	rjmp	.+20     	; 0x162dc <Amigo_Execute+0x11e>
   162c8:	8e ec       	ldi	r24, 0xCE	; 206
   162ca:	90 e2       	ldi	r25, 0x20	; 32
   162cc:	1f 92       	push	r1
   162ce:	9f 93       	push	r25
   162d0:	8f 93       	push	r24
   162d2:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   162d6:	0f 90       	pop	r0
#endif
                return ( amigo_buffered_write() );
   162d8:	0f 90       	pop	r0
   162da:	0f 90       	pop	r0
   162dc:	00 da       	rcall	.-3072   	; 0x156de <amigo_buffered_write>
            default:
                return ( amigo_todo(secondary) );
   162de:	43 c0       	rjmp	.+134    	; 0x16366 <Amigo_Execute+0x1a8>
   162e0:	80 e6       	ldi	r24, 0x60	; 96
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    if(secondary == 0x68)
   162e2:	3d c0       	rjmp	.+122    	; 0x1635e <Amigo_Execute+0x1a0>
   162e4:	c8 36       	cpi	r28, 0x68	; 104
   162e6:	d1 05       	cpc	r29, r1
    {
        switch(AMIGOs->state)
   162e8:	e1 f5       	brne	.+120    	; 0x16362 <Amigo_Execute+0x1a4>
   162ea:	e0 91 4c 19 	lds	r30, 0x194C	; 0x80194c <AMIGOs>
   162ee:	f0 91 4d 19 	lds	r31, 0x194D	; 0x80194d <AMIGOs+0x1>
   162f2:	80 81       	ld	r24, Z
   162f4:	82 30       	cpi	r24, 0x02	; 2
   162f6:	81 f0       	breq	.+32     	; 0x16318 <Amigo_Execute+0x15a>
   162f8:	18 f4       	brcc	.+6      	; 0x16300 <Amigo_Execute+0x142>
   162fa:	88 23       	and	r24, r24
   162fc:	91 f1       	breq	.+100    	; 0x16362 <Amigo_Execute+0x1a4>
   162fe:	2e c0       	rjmp	.+92     	; 0x1635c <Amigo_Execute+0x19e>
   16300:	83 30       	cpi	r24, 0x03	; 3
   16302:	19 f0       	breq	.+6      	; 0x1630a <Amigo_Execute+0x14c>
   16304:	84 30       	cpi	r24, 0x04	; 4
   16306:	c9 f0       	breq	.+50     	; 0x1633a <Amigo_Execute+0x17c>
        {
            case AMIGO_IDLE:
                return(0);
            case AMIGO_REQUEST_STATUS_BUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   16308:	29 c0       	rjmp	.+82     	; 0x1635c <Amigo_Execute+0x19e>
   1630a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1630e:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Status Buffered]\n");
   16310:	11 c0       	rjmp	.+34     	; 0x16334 <Amigo_Execute+0x176>
   16312:	85 ea       	ldi	r24, 0xA5	; 165
   16314:	90 e2       	ldi	r25, 0x20	; 32
#endif
                return ( amigo_send_status() );
            case AMIGO_REQUEST_STATUS_UNBUFFERED:
#if SDEBUG
                if(debuglevel & 32)
   16316:	06 c0       	rjmp	.+12     	; 0x16324 <Amigo_Execute+0x166>
   16318:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1631c:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Exicute Request Status Unbuffered]\n");
   1631e:	0a c0       	rjmp	.+20     	; 0x16334 <Amigo_Execute+0x176>
   16320:	8a e7       	ldi	r24, 0x7A	; 122
   16322:	90 e2       	ldi	r25, 0x20	; 32
   16324:	1f 92       	push	r1
   16326:	9f 93       	push	r25
   16328:	8f 93       	push	r24
   1632a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1632e:	0f 90       	pop	r0
   16330:	0f 90       	pop	r0
#endif
                return ( amigo_send_status() );
   16332:	0f 90       	pop	r0
   16334:	0e 94 d6 a8 	call	0x151ac	; 0x151ac <amigo_send_status>
            case AMIGO_REQUEST_LOGICAL_ADDRESS:
#if SDEBUG
                if(debuglevel & 32)
   16338:	16 c0       	rjmp	.+44     	; 0x16366 <Amigo_Execute+0x1a8>
   1633a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1633e:	85 ff       	sbrs	r24, 5
                    printf("[AMIGO Execute Request Logical Address]\n");
   16340:	0a c0       	rjmp	.+20     	; 0x16356 <Amigo_Execute+0x198>
   16342:	81 e5       	ldi	r24, 0x51	; 81
   16344:	90 e2       	ldi	r25, 0x20	; 32
   16346:	1f 92       	push	r1
   16348:	9f 93       	push	r25
   1634a:	8f 93       	push	r24
   1634c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   16350:	0f 90       	pop	r0
   16352:	0f 90       	pop	r0
#endif
                return ( amigo_send_logical_address() );
   16354:	0f 90       	pop	r0
   16356:	0e 94 78 a8 	call	0x150f0	; 0x150f0 <amigo_send_logical_address>
            default:
                return ( amigo_todo(secondary) );
   1635a:	05 c0       	rjmp	.+10     	; 0x16366 <Amigo_Execute+0x1a8>
   1635c:	88 e6       	ldi	r24, 0x68	; 104
   1635e:	a5 db       	rcall	.-2230   	; 0x15aaa <amigo_todo>
    if(secondary == 0x68)
    {
        switch(AMIGOs->state)
        {
            case AMIGO_IDLE:
                return(0);
   16360:	02 c0       	rjmp	.+4      	; 0x16366 <Amigo_Execute+0x1a8>
   16362:	80 e0       	ldi	r24, 0x00	; 0
                return ( amigo_todo(secondary) );
        }
        AMIGOs->state = AMIGO_IDLE;
    }
    return(0);
}
   16364:	90 e0       	ldi	r25, 0x00	; 0
   16366:	df 91       	pop	r29
   16368:	cf 91       	pop	r28
   1636a:	08 95       	ret

0001636c <AMIGO_COMMANDS>:
/// @return  0 on sucess
/// @return or GPIB error flags on fail
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{
   1636c:	cf 93       	push	r28
   1636e:	df 93       	push	r29
   16370:	c8 2f       	mov	r28, r24

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   16372:	80 91 9f 1e 	lds	r24, 0x1E9F	; 0x801e9f <talking>
   16376:	90 e0       	ldi	r25, 0x00	; 0
   16378:	0e 94 4a 92 	call	0x12494	; 0x12494 <AMIGO_is_MTA>
   1637c:	89 2b       	or	r24, r25
   1637e:	51 f0       	breq	.+20     	; 0x16394 <AMIGO_COMMANDS+0x28>
    {

        if(talking == UNT && AMIGO_is_MLA(listening))
   16380:	80 91 9f 1e 	lds	r24, 0x1E9F	; 0x801e9f <talking>
   16384:	8f 35       	cpi	r24, 0x5F	; 95
   16386:	71 f4       	brne	.+28     	; 0x163a4 <AMIGO_COMMANDS+0x38>
   16388:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   1638c:	90 e0       	ldi	r25, 0x00	; 0
   1638e:	0e 94 39 92 	call	0x12472	; 0x12472 <AMIGO_is_MLA>
   16392:	08 c0       	rjmp	.+16     	; 0x163a4 <AMIGO_COMMANDS+0x38>
/// @see  gpib.h ERROR_MASK defines for a full list.

int AMIGO_COMMANDS(uint8_t ch)
{

    if(AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening))
   16394:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   16398:	90 e0       	ldi	r25, 0x00	; 0
   1639a:	0e 94 39 92 	call	0x12472	; 0x12472 <AMIGO_is_MLA>
   1639e:	89 2b       	or	r24, r25
   163a0:	79 f7       	brne	.-34     	; 0x16380 <AMIGO_COMMANDS+0x14>
   163a2:	76 c0       	rjmp	.+236    	; 0x16490 <AMIGO_COMMANDS+0x124>

        if(talking == UNT && AMIGO_is_MLA(listening))
        {
            // printf("AMIGO COMMANDS %02XH NO TALK ADDRESS!\n", ch);
        }
        if(listening == 0 && AMIGO_is_MTA(talking))
   163a4:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   163a8:	81 11       	cpse	r24, r1
   163aa:	05 c0       	rjmp	.+10     	; 0x163b6 <AMIGO_COMMANDS+0x4a>
   163ac:	80 91 9f 1e 	lds	r24, 0x1E9F	; 0x801e9f <talking>
   163b0:	90 e0       	ldi	r25, 0x00	; 0
   163b2:	0e 94 4a 92 	call	0x12494	; 0x12494 <AMIGO_is_MTA>
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   163b6:	c0 36       	cpi	r28, 0x60	; 96
   163b8:	99 f4       	brne	.+38     	; 0x163e0 <AMIGO_COMMANDS+0x74>
   163ba:	80 91 9f 1e 	lds	r24, 0x1E9F	; 0x801e9f <talking>
   163be:	90 e0       	ldi	r25, 0x00	; 0
   163c0:	0e 94 4a 92 	call	0x12494	; 0x12494 <AMIGO_is_MTA>
   163c4:	89 2b       	or	r24, r25
   163c6:	19 f0       	breq	.+6      	; 0x163ce <AMIGO_COMMANDS+0x62>
        {
            return (Amigo_Execute(ch) );
   163c8:	80 e6       	ldi	r24, 0x60	; 96
   163ca:	90 e0       	ldi	r25, 0x00	; 0
   163cc:	14 c0       	rjmp	.+40     	; 0x163f6 <AMIGO_COMMANDS+0x8a>
        if(listening == 0 && AMIGO_is_MTA(talking))
        {
            // printf("AMIGO COMMANDS %02XH NO LISTEN ADDRESS!\n", ch);
        }

        if(ch == 0x60 && (AMIGO_is_MTA(talking) || AMIGO_is_MLA(listening)) )
   163ce:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   163d2:	90 e0       	ldi	r25, 0x00	; 0
   163d4:	0e 94 39 92 	call	0x12472	; 0x12472 <AMIGO_is_MLA>
   163d8:	89 2b       	or	r24, r25
   163da:	09 f4       	brne	.+2      	; 0x163de <AMIGO_COMMANDS+0x72>
   163dc:	59 c0       	rjmp	.+178    	; 0x16490 <AMIGO_COMMANDS+0x124>
   163de:	f4 cf       	rjmp	.-24     	; 0x163c8 <AMIGO_COMMANDS+0x5c>
        {
            return (Amigo_Execute(ch) );
        }

        if(ch == 0x68 && AMIGO_is_MTA(talking) )
   163e0:	c8 36       	cpi	r28, 0x68	; 104
   163e2:	c1 f4       	brne	.+48     	; 0x16414 <AMIGO_COMMANDS+0xa8>
   163e4:	80 91 9f 1e 	lds	r24, 0x1E9F	; 0x801e9f <talking>
   163e8:	90 e0       	ldi	r25, 0x00	; 0
   163ea:	0e 94 4a 92 	call	0x12494	; 0x12494 <AMIGO_is_MTA>
   163ee:	89 2b       	or	r24, r25
   163f0:	21 f0       	breq	.+8      	; 0x163fa <AMIGO_COMMANDS+0x8e>
        {
            return (Amigo_Execute(ch) );
   163f2:	88 e6       	ldi	r24, 0x68	; 104
   163f4:	90 e0       	ldi	r25, 0x00	; 0
   163f6:	e3 de       	rcall	.-570    	; 0x161be <Amigo_Execute>
   163f8:	0b c0       	rjmp	.+22     	; 0x16410 <AMIGO_COMMANDS+0xa4>
        }

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
   163fa:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   163fe:	90 e0       	ldi	r25, 0x00	; 0
   16400:	0e 94 39 92 	call	0x12472	; 0x12472 <AMIGO_is_MLA>
   16404:	89 2b       	or	r24, r25
   16406:	09 f4       	brne	.+2      	; 0x1640a <AMIGO_COMMANDS+0x9e>
   16408:	43 c0       	rjmp	.+134    	; 0x16490 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   1640a:	88 e6       	ldi	r24, 0x68	; 104
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
   1640c:	90 e0       	ldi	r25, 0x00	; 0
   1640e:	f1 db       	rcall	.-2078   	; 0x15bf2 <Amigo_Command>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
            return( amigo_cmd_dsj() );
   16410:	ec 01       	movw	r28, r24
   16412:	40 c0       	rjmp	.+128    	; 0x16494 <AMIGO_COMMANDS+0x128>

        if(ch == 0x68 && AMIGO_is_MLA(listening) ) // Single byte command
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x69 && AMIGO_is_MLA(listening) ) // Single byte command
   16414:	c9 36       	cpi	r28, 0x69	; 105
   16416:	51 f4       	brne	.+20     	; 0x1642c <AMIGO_COMMANDS+0xc0>
   16418:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   1641c:	90 e0       	ldi	r25, 0x00	; 0
   1641e:	0e 94 39 92 	call	0x12472	; 0x12472 <AMIGO_is_MLA>
   16422:	89 2b       	or	r24, r25
   16424:	a9 f1       	breq	.+106    	; 0x16490 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   16426:	89 e6       	ldi	r24, 0x69	; 105
   16428:	90 e0       	ldi	r25, 0x00	; 0
   1642a:	f1 cf       	rjmp	.-30     	; 0x1640e <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6a && AMIGO_is_MLA(listening) ) // Single byte command
   1642c:	ca 36       	cpi	r28, 0x6A	; 106
   1642e:	51 f4       	brne	.+20     	; 0x16444 <AMIGO_COMMANDS+0xd8>
   16430:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   16434:	90 e0       	ldi	r25, 0x00	; 0
   16436:	0e 94 39 92 	call	0x12472	; 0x12472 <AMIGO_is_MLA>
   1643a:	89 2b       	or	r24, r25
   1643c:	49 f1       	breq	.+82     	; 0x16490 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   1643e:	8a e6       	ldi	r24, 0x6A	; 106
   16440:	90 e0       	ldi	r25, 0x00	; 0
   16442:	e5 cf       	rjmp	.-54     	; 0x1640e <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x6c && AMIGO_is_MLA(listening) ) // Single byte command
   16444:	cc 36       	cpi	r28, 0x6C	; 108
   16446:	51 f4       	brne	.+20     	; 0x1645c <AMIGO_COMMANDS+0xf0>
   16448:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   1644c:	90 e0       	ldi	r25, 0x00	; 0
   1644e:	0e 94 39 92 	call	0x12472	; 0x12472 <AMIGO_is_MLA>
   16452:	89 2b       	or	r24, r25
   16454:	e9 f0       	breq	.+58     	; 0x16490 <AMIGO_COMMANDS+0x124>
        {
            return (Amigo_Command(ch) );
   16456:	8c e6       	ldi	r24, 0x6C	; 108
   16458:	90 e0       	ldi	r25, 0x00	; 0
   1645a:	d9 cf       	rjmp	.-78     	; 0x1640e <AMIGO_COMMANDS+0xa2>
        }
        if(ch == 0x70 && AMIGO_is_MTA(talking))
   1645c:	c0 37       	cpi	r28, 0x70	; 112
   1645e:	c1 f4       	brne	.+48     	; 0x16490 <AMIGO_COMMANDS+0x124>
   16460:	80 91 9f 1e 	lds	r24, 0x1E9F	; 0x801e9f <talking>
   16464:	90 e0       	ldi	r25, 0x00	; 0
   16466:	0e 94 4a 92 	call	0x12494	; 0x12494 <AMIGO_is_MTA>
   1646a:	ec 01       	movw	r28, r24
   1646c:	89 2b       	or	r24, r25
   1646e:	51 f0       	breq	.+20     	; 0x16484 <AMIGO_COMMANDS+0x118>
        {
            gpib_disable_PPR(AMIGOp->HEADER.PPR);
   16470:	e0 91 4e 19 	lds	r30, 0x194E	; 0x80194e <AMIGOp>
   16474:	f0 91 4f 19 	lds	r31, 0x194F	; 0x80194f <AMIGOp+0x1>
   16478:	81 81       	ldd	r24, Z+1	; 0x01
   1647a:	90 e0       	ldi	r25, 0x00	; 0
   1647c:	0e 94 3f 8c 	call	0x1187e	; 0x1187e <gpib_disable_PPR>
            return( amigo_cmd_dsj() );
   16480:	e6 d9       	rcall	.-3124   	; 0x1584e <amigo_cmd_dsj>
   16482:	c6 cf       	rjmp	.-116    	; 0x16410 <AMIGO_COMMANDS+0xa4>
        }
        if(ch == 0x7e && ch == 0x7f)
        {
            return (Amigo_Command(ch) );
        }
        if(ch == 0x70 && AMIGO_is_MLA(listening))
   16484:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   16488:	90 e0       	ldi	r25, 0x00	; 0
   1648a:	0e 94 39 92 	call	0x12472	; 0x12472 <AMIGO_is_MLA>
   1648e:	02 c0       	rjmp	.+4      	; 0x16494 <AMIGO_COMMANDS+0x128>
        {
            // NOP
        }
    }
    return(0);
   16490:	c0 e0       	ldi	r28, 0x00	; 0
   16492:	d0 e0       	ldi	r29, 0x00	; 0
}
   16494:	ce 01       	movw	r24, r28
   16496:	df 91       	pop	r29
   16498:	cf 91       	pop	r28
   1649a:	08 95       	ret

0001649c <printer_init>:
/// - Only called once after power on by main().
/// @return  void

void printer_init()
{
    plot.error = 0;
   1649c:	ed e3       	ldi	r30, 0x3D	; 61
   1649e:	f9 e1       	ldi	r31, 0x19	; 25
   164a0:	10 86       	std	Z+8, r1	; 0x08
    plot.count = 0;
   164a2:	10 82       	st	Z, r1
   164a4:	11 82       	std	Z+1, r1	; 0x01
   164a6:	12 82       	std	Z+2, r1	; 0x02
   164a8:	13 82       	std	Z+3, r1	; 0x03
    plot.ind = 0;
   164aa:	15 82       	std	Z+5, r1	; 0x05
   164ac:	14 82       	std	Z+4, r1	; 0x04
    plot.fp = NULL;
   164ae:	12 86       	std	Z+10, r1	; 0x0a
   164b0:	11 86       	std	Z+9, r1	; 0x09
    plot.buf = NULL;
   164b2:	14 86       	std	Z+12, r1	; 0x0c
   164b4:	13 86       	std	Z+11, r1	; 0x0b
   164b6:	08 95       	ret

000164b8 <receive_plot_flush>:
/// @see posix.h
/// @see printer_buffer()
/// @return  file handle

int receive_plot_flush()
{
   164b8:	cf 93       	push	r28
   164ba:	df 93       	push	r29
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
   164bc:	20 91 46 19 	lds	r18, 0x1946	; 0x801946 <plot+0x9>
   164c0:	30 91 47 19 	lds	r19, 0x1947	; 0x801947 <plot+0xa>
   164c4:	21 15       	cp	r18, r1
   164c6:	31 05       	cpc	r19, r1
   164c8:	09 f4       	brne	.+2      	; 0x164cc <receive_plot_flush+0x14>
   164ca:	4a c0       	rjmp	.+148    	; 0x16560 <receive_plot_flush+0xa8>
   164cc:	80 91 41 19 	lds	r24, 0x1941	; 0x801941 <plot+0x4>
   164d0:	90 91 42 19 	lds	r25, 0x1942	; 0x801942 <plot+0x5>
   164d4:	00 97       	sbiw	r24, 0x00	; 0
   164d6:	09 f4       	brne	.+2      	; 0x164da <receive_plot_flush+0x22>
   164d8:	45 c0       	rjmp	.+138    	; 0x16564 <receive_plot_flush+0xac>
        return(0);

    ret  = fwrite(plot.buf, 1, plot.ind , plot.fp);
   164da:	ac 01       	movw	r20, r24
   164dc:	61 e0       	ldi	r22, 0x01	; 1
   164de:	70 e0       	ldi	r23, 0x00	; 0
   164e0:	80 91 48 19 	lds	r24, 0x1948	; 0x801948 <plot+0xb>
   164e4:	90 91 49 19 	lds	r25, 0x1949	; 0x801949 <plot+0xc>
   164e8:	0e 94 fa 7f 	call	0xfff4	; 0xfff4 <fwrite>
   164ec:	ec 01       	movw	r28, r24
    if(ret != plot.ind)
   164ee:	80 91 41 19 	lds	r24, 0x1941	; 0x801941 <plot+0x4>
   164f2:	90 91 42 19 	lds	r25, 0x1942	; 0x801942 <plot+0x5>
   164f6:	c8 17       	cp	r28, r24
   164f8:	d9 07       	cpc	r29, r25
   164fa:	31 f1       	breq	.+76     	; 0x16548 <receive_plot_flush+0x90>
    {
        if(debuglevel & (1+32))
   164fc:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   16500:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   16504:	81 72       	andi	r24, 0x21	; 33
   16506:	99 27       	eor	r25, r25
   16508:	89 2b       	or	r24, r25
   1650a:	d9 f0       	breq	.+54     	; 0x16542 <receive_plot_flush+0x8a>
        {
            perror("receive_plot_flush");
   1650c:	89 e3       	ldi	r24, 0x39	; 57
   1650e:	93 e1       	ldi	r25, 0x13	; 19
   16510:	0e 94 a8 7b 	call	0xf750	; 0xf750 <perror>
            printf("write failed: wanted %d, got:%d\n", plot.ind, ret);
   16514:	df 93       	push	r29
   16516:	cf 93       	push	r28
   16518:	80 91 42 19 	lds	r24, 0x1942	; 0x801942 <plot+0x5>
   1651c:	8f 93       	push	r24
   1651e:	80 91 41 19 	lds	r24, 0x1941	; 0x801941 <plot+0x4>
   16522:	8f 93       	push	r24
   16524:	85 e1       	ldi	r24, 0x15	; 21
   16526:	99 e2       	ldi	r25, 0x29	; 41
   16528:	1f 92       	push	r1
   1652a:	9f 93       	push	r25
   1652c:	8f 93       	push	r24
   1652e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   16532:	8d b7       	in	r24, 0x3d	; 61
   16534:	9e b7       	in	r25, 0x3e	; 62
   16536:	07 96       	adiw	r24, 0x07	; 7
   16538:	0f b6       	in	r0, 0x3f	; 63
   1653a:	f8 94       	cli
   1653c:	9e bf       	out	0x3e, r25	; 62
   1653e:	0f be       	out	0x3f, r0	; 63
   16540:	8d bf       	out	0x3d, r24	; 61
        }
        return(-1);
   16542:	8f ef       	ldi	r24, 0xFF	; 255
   16544:	9f ef       	ldi	r25, 0xFF	; 255
   16546:	0e c0       	rjmp	.+28     	; 0x16564 <receive_plot_flush+0xac>
    }

    fno = fileno( plot.fp );
   16548:	80 91 46 19 	lds	r24, 0x1946	; 0x801946 <plot+0x9>
   1654c:	90 91 47 19 	lds	r25, 0x1947	; 0x801947 <plot+0xa>
   16550:	0e 94 45 79 	call	0xf28a	; 0xf28a <fileno>
    if(fno < 0)
   16554:	97 fd       	sbrc	r25, 7
   16556:	f5 cf       	rjmp	.-22     	; 0x16542 <receive_plot_flush+0x8a>
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
   16558:	0e 94 44 7f 	call	0xfe88	; 0xfe88 <syncfs>
    return (ret);
   1655c:	ce 01       	movw	r24, r28
   1655e:	02 c0       	rjmp	.+4      	; 0x16564 <receive_plot_flush+0xac>
{
    int ret;
    int fno;

    if(plot.fp == NULL || plot.ind == 0)
        return(0);
   16560:	80 e0       	ldi	r24, 0x00	; 0
   16562:	90 e0       	ldi	r25, 0x00	; 0
    if(fno < 0)
        return(-1);
    ///@brief sync filesystem after every write 
    syncfs( fno );
    return (ret);
}
   16564:	df 91       	pop	r29
   16566:	cf 91       	pop	r28
   16568:	08 95       	ret

0001656a <printer_close>:
   1656a:	a6 df       	rcall	.-180    	; 0x164b8 <receive_plot_flush>
   1656c:	97 ff       	sbrs	r25, 7
   1656e:	03 c0       	rjmp	.+6      	; 0x16576 <printer_close+0xc>
   16570:	81 e0       	ldi	r24, 0x01	; 1
   16572:	80 93 45 19 	sts	0x1945, r24	; 0x801945 <plot+0x8>
   16576:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1657a:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1657e:	81 72       	andi	r24, 0x21	; 33
   16580:	99 27       	eor	r25, r25
   16582:	89 2b       	or	r24, r25
   16584:	71 f0       	breq	.+28     	; 0x165a2 <printer_close+0x38>
   16586:	80 91 45 19 	lds	r24, 0x1945	; 0x801945 <plot+0x8>
   1658a:	88 23       	and	r24, r24
   1658c:	51 f0       	breq	.+20     	; 0x165a2 <printer_close+0x38>
   1658e:	84 e4       	ldi	r24, 0x44	; 68
   16590:	99 e2       	ldi	r25, 0x29	; 41
   16592:	1f 92       	push	r1
   16594:	9f 93       	push	r25
   16596:	8f 93       	push	r24
   16598:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1659c:	0f 90       	pop	r0
   1659e:	0f 90       	pop	r0
   165a0:	0f 90       	pop	r0
   165a2:	80 91 46 19 	lds	r24, 0x1946	; 0x801946 <plot+0x9>
   165a6:	90 91 47 19 	lds	r25, 0x1947	; 0x801947 <plot+0xa>
   165aa:	00 97       	sbiw	r24, 0x00	; 0
   165ac:	09 f1       	breq	.+66     	; 0x165f0 <printer_close+0x86>
   165ae:	0e 94 7c 80 	call	0x100f8	; 0x100f8 <fclose>
   165b2:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   165b6:	85 ff       	sbrs	r24, 5
   165b8:	1b c0       	rjmp	.+54     	; 0x165f0 <printer_close+0x86>
   165ba:	80 91 40 19 	lds	r24, 0x1940	; 0x801940 <plot+0x3>
   165be:	8f 93       	push	r24
   165c0:	80 91 3f 19 	lds	r24, 0x193F	; 0x80193f <plot+0x2>
   165c4:	8f 93       	push	r24
   165c6:	80 91 3e 19 	lds	r24, 0x193E	; 0x80193e <plot+0x1>
   165ca:	8f 93       	push	r24
   165cc:	80 91 3d 19 	lds	r24, 0x193D	; 0x80193d <plot>
   165d0:	8f 93       	push	r24
   165d2:	86 e3       	ldi	r24, 0x36	; 54
   165d4:	99 e2       	ldi	r25, 0x29	; 41
   165d6:	1f 92       	push	r1
   165d8:	9f 93       	push	r25
   165da:	8f 93       	push	r24
   165dc:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   165e0:	8d b7       	in	r24, 0x3d	; 61
   165e2:	9e b7       	in	r25, 0x3e	; 62
   165e4:	07 96       	adiw	r24, 0x07	; 7
   165e6:	0f b6       	in	r0, 0x3f	; 63
   165e8:	f8 94       	cli
   165ea:	9e bf       	out	0x3e, r25	; 62
   165ec:	0f be       	out	0x3f, r0	; 63
   165ee:	8d bf       	out	0x3d, r24	; 61
   165f0:	80 91 48 19 	lds	r24, 0x1948	; 0x801948 <plot+0xb>
   165f4:	90 91 49 19 	lds	r25, 0x1949	; 0x801949 <plot+0xc>
   165f8:	00 97       	sbiw	r24, 0x00	; 0
   165fa:	11 f0       	breq	.+4      	; 0x16600 <printer_close+0x96>
   165fc:	0e 94 c7 29 	call	0x538e	; 0x538e <safefree>
   16600:	4d cf       	rjmp	.-358    	; 0x1649c <printer_init>
   16602:	08 95       	ret

00016604 <printer_open>:
   16604:	ac e4       	ldi	r26, 0x4C	; 76
   16606:	b0 e0       	ldi	r27, 0x00	; 0
   16608:	e8 e0       	ldi	r30, 0x08	; 8
   1660a:	f3 eb       	ldi	r31, 0xB3	; 179
   1660c:	0c 94 c7 e8 	jmp	0x1d18e	; 0x1d18e <__prologue_saves__+0xc>
   16610:	8c 01       	movw	r16, r24
   16612:	89 2b       	or	r24, r25
   16614:	09 f0       	breq	.+2      	; 0x16618 <printer_open+0x14>
   16616:	4b c0       	rjmp	.+150    	; 0x166ae <printer_open+0xaa>
   16618:	be 01       	movw	r22, r28
   1661a:	6f 5b       	subi	r22, 0xBF	; 191
   1661c:	7f 4f       	sbci	r23, 0xFF	; 255
   1661e:	80 e0       	ldi	r24, 0x00	; 0
   16620:	90 e0       	ldi	r25, 0x00	; 0
   16622:	0e 94 53 32 	call	0x64a6	; 0x64a6 <clock_gettime>
   16626:	25 96       	adiw	r28, 0x05	; 5
   16628:	8c ad       	ldd	r24, Y+60	; 0x3c
   1662a:	9d ad       	ldd	r25, Y+61	; 0x3d
   1662c:	ae ad       	ldd	r26, Y+62	; 0x3e
   1662e:	bf ad       	ldd	r27, Y+63	; 0x3f
   16630:	25 97       	sbiw	r28, 0x05	; 5
   16632:	2d 96       	adiw	r28, 0x0d	; 13
   16634:	8c af       	std	Y+60, r24	; 0x3c
   16636:	9d af       	std	Y+61, r25	; 0x3d
   16638:	ae af       	std	Y+62, r26	; 0x3e
   1663a:	bf af       	std	Y+63, r27	; 0x3f
   1663c:	2d 97       	sbiw	r28, 0x0d	; 13
   1663e:	ce 01       	movw	r24, r28
   16640:	87 5b       	subi	r24, 0xB7	; 183
   16642:	9f 4f       	sbci	r25, 0xFF	; 255
   16644:	0e 94 23 36 	call	0x6c46	; 0x6c46 <gmtime>
   16648:	8c 01       	movw	r16, r24
   1664a:	fc 01       	movw	r30, r24
   1664c:	90 80       	ld	r9, Z
   1664e:	81 80       	ldd	r8, Z+1	; 0x01
   16650:	b2 80       	ldd	r11, Z+2	; 0x02
   16652:	a3 80       	ldd	r10, Z+3	; 0x03
   16654:	d4 80       	ldd	r13, Z+4	; 0x04
   16656:	c5 80       	ldd	r12, Z+5	; 0x05
   16658:	e2 84       	ldd	r14, Z+10	; 0x0a
   1665a:	f3 84       	ldd	r15, Z+11	; 0x0b
   1665c:	f4 e9       	ldi	r31, 0x94	; 148
   1665e:	ef 1a       	sub	r14, r31
   16660:	f8 ef       	ldi	r31, 0xF8	; 248
   16662:	ff 0a       	sbc	r15, r31
   16664:	fc 01       	movw	r30, r24
   16666:	80 85       	ldd	r24, Z+8	; 0x08
   16668:	91 85       	ldd	r25, Z+9	; 0x09
   1666a:	0e 94 ff 34 	call	0x69fe	; 0x69fe <tm_mon_to_ascii>
   1666e:	8f 92       	push	r8
   16670:	9f 92       	push	r9
   16672:	af 92       	push	r10
   16674:	bf 92       	push	r11
   16676:	cf 92       	push	r12
   16678:	df 92       	push	r13
   1667a:	ff 92       	push	r15
   1667c:	ef 92       	push	r14
   1667e:	9f 93       	push	r25
   16680:	8f 93       	push	r24
   16682:	f8 01       	movw	r30, r16
   16684:	87 81       	ldd	r24, Z+7	; 0x07
   16686:	8f 93       	push	r24
   16688:	86 81       	ldd	r24, Z+6	; 0x06
   1668a:	8f 93       	push	r24
   1668c:	8b e7       	ldi	r24, 0x7B	; 123
   1668e:	99 e2       	ldi	r25, 0x29	; 41
   16690:	1f 92       	push	r1
   16692:	9f 93       	push	r25
   16694:	8f 93       	push	r24
   16696:	8e 01       	movw	r16, r28
   16698:	0f 5f       	subi	r16, 0xFF	; 255
   1669a:	1f 4f       	sbci	r17, 0xFF	; 255
   1669c:	1f 93       	push	r17
   1669e:	0f 93       	push	r16
   166a0:	0e 94 ae 44 	call	0x895c	; 0x895c <sprintf_P>
   166a4:	0f b6       	in	r0, 0x3f	; 63
   166a6:	f8 94       	cli
   166a8:	de bf       	out	0x3e, r29	; 62
   166aa:	0f be       	out	0x3f, r0	; 63
   166ac:	cd bf       	out	0x3d, r28	; 61
   166ae:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   166b2:	85 ff       	sbrs	r24, 5
   166b4:	0e c0       	rjmp	.+28     	; 0x166d2 <printer_open+0xce>
   166b6:	1f 93       	push	r17
   166b8:	0f 93       	push	r16
   166ba:	85 e6       	ldi	r24, 0x65	; 101
   166bc:	99 e2       	ldi	r25, 0x29	; 41
   166be:	1f 92       	push	r1
   166c0:	9f 93       	push	r25
   166c2:	8f 93       	push	r24
   166c4:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   166c8:	0f 90       	pop	r0
   166ca:	0f 90       	pop	r0
   166cc:	0f 90       	pop	r0
   166ce:	0f 90       	pop	r0
   166d0:	0f 90       	pop	r0
   166d2:	69 e6       	ldi	r22, 0x69	; 105
   166d4:	78 e0       	ldi	r23, 0x08	; 8
   166d6:	c8 01       	movw	r24, r16
   166d8:	0e 94 d2 81 	call	0x103a4	; 0x103a4 <fopen>
   166dc:	90 93 47 19 	sts	0x1947, r25	; 0x801947 <plot+0xa>
   166e0:	80 93 46 19 	sts	0x1946, r24	; 0x801946 <plot+0x9>
   166e4:	89 2b       	or	r24, r25
   166e6:	b9 f4       	brne	.+46     	; 0x16716 <printer_open+0x112>
   166e8:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   166ec:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   166f0:	81 72       	andi	r24, 0x21	; 33
   166f2:	99 27       	eor	r25, r25
   166f4:	89 2b       	or	r24, r25
   166f6:	11 f1       	breq	.+68     	; 0x1673c <printer_open+0x138>
   166f8:	87 e1       	ldi	r24, 0x17	; 23
   166fa:	9d e0       	ldi	r25, 0x0D	; 13
   166fc:	0e 94 a8 7b 	call	0xf750	; 0xf750 <perror>
   16700:	89 e5       	ldi	r24, 0x59	; 89
   16702:	99 e2       	ldi	r25, 0x29	; 41
   16704:	1f 92       	push	r1
   16706:	9f 93       	push	r25
   16708:	8f 93       	push	r24
   1670a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1670e:	0f 90       	pop	r0
   16710:	0f 90       	pop	r0
   16712:	0f 90       	pop	r0
   16714:	13 c0       	rjmp	.+38     	; 0x1673c <printer_open+0x138>
   16716:	61 e0       	ldi	r22, 0x01	; 1
   16718:	70 e0       	ldi	r23, 0x00	; 0
   1671a:	81 e0       	ldi	r24, 0x01	; 1
   1671c:	92 e0       	ldi	r25, 0x02	; 2
   1671e:	0e 94 7e 29 	call	0x52fc	; 0x52fc <safecalloc>
   16722:	90 93 49 19 	sts	0x1949, r25	; 0x801949 <plot+0xc>
   16726:	80 93 48 19 	sts	0x1948, r24	; 0x801948 <plot+0xb>
   1672a:	89 2b       	or	r24, r25
   1672c:	09 f4       	brne	.+2      	; 0x16730 <printer_open+0x12c>
   1672e:	1d df       	rcall	.-454    	; 0x1656a <printer_close>
   16730:	80 e0       	ldi	r24, 0x00	; 0
   16732:	92 e0       	ldi	r25, 0x02	; 2
   16734:	90 93 44 19 	sts	0x1944, r25	; 0x801944 <plot+0x7>
   16738:	80 93 43 19 	sts	0x1943, r24	; 0x801943 <plot+0x6>
   1673c:	c4 5b       	subi	r28, 0xB4	; 180
   1673e:	df 4f       	sbci	r29, 0xFF	; 255
   16740:	ec e0       	ldi	r30, 0x0C	; 12
   16742:	0c 94 e3 e8 	jmp	0x1d1c6	; 0x1d1c6 <__epilogue_restores__+0xc>

00016746 <printer_buffer>:
   16746:	cf 93       	push	r28
   16748:	df 93       	push	r29
   1674a:	ec 01       	movw	r28, r24
   1674c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   16750:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   16754:	81 72       	andi	r24, 0x21	; 33
   16756:	99 27       	eor	r25, r25
   16758:	89 2b       	or	r24, r25
   1675a:	e9 f0       	breq	.+58     	; 0x16796 <printer_buffer+0x50>
   1675c:	80 91 3d 19 	lds	r24, 0x193D	; 0x80193d <plot>
   16760:	90 91 3e 19 	lds	r25, 0x193E	; 0x80193e <plot+0x1>
   16764:	20 91 3f 19 	lds	r18, 0x193F	; 0x80193f <plot+0x2>
   16768:	30 91 40 19 	lds	r19, 0x1940	; 0x801940 <plot+0x3>
   1676c:	81 11       	cpse	r24, r1
   1676e:	13 c0       	rjmp	.+38     	; 0x16796 <printer_buffer+0x50>
   16770:	3f 93       	push	r19
   16772:	2f 93       	push	r18
   16774:	9f 93       	push	r25
   16776:	8f 93       	push	r24
   16778:	8e e0       	ldi	r24, 0x0E	; 14
   1677a:	99 e2       	ldi	r25, 0x29	; 41
   1677c:	1f 92       	push	r1
   1677e:	9f 93       	push	r25
   16780:	8f 93       	push	r24
   16782:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   16786:	8d b7       	in	r24, 0x3d	; 61
   16788:	9e b7       	in	r25, 0x3e	; 62
   1678a:	07 96       	adiw	r24, 0x07	; 7
   1678c:	0f b6       	in	r0, 0x3f	; 63
   1678e:	f8 94       	cli
   16790:	9e bf       	out	0x3e, r25	; 62
   16792:	0f be       	out	0x3f, r0	; 63
   16794:	8d bf       	out	0x3d, r24	; 61
   16796:	ce 01       	movw	r24, r28
   16798:	88 27       	eor	r24, r24
   1679a:	97 7f       	andi	r25, 0xF7	; 247
   1679c:	89 2b       	or	r24, r25
   1679e:	41 f0       	breq	.+16     	; 0x167b0 <printer_buffer+0x6a>
   167a0:	8b de       	rcall	.-746    	; 0x164b8 <receive_plot_flush>
   167a2:	89 2b       	or	r24, r25
   167a4:	09 f4       	brne	.+2      	; 0x167a8 <printer_buffer+0x62>
   167a6:	3f c0       	rjmp	.+126    	; 0x16826 <printer_buffer+0xe0>
   167a8:	81 e0       	ldi	r24, 0x01	; 1
   167aa:	80 93 45 19 	sts	0x1945, r24	; 0x801945 <plot+0x8>
   167ae:	3b c0       	rjmp	.+118    	; 0x16826 <printer_buffer+0xe0>
   167b0:	20 91 48 19 	lds	r18, 0x1948	; 0x801948 <plot+0xb>
   167b4:	30 91 49 19 	lds	r19, 0x1949	; 0x801949 <plot+0xc>
   167b8:	80 91 41 19 	lds	r24, 0x1941	; 0x801941 <plot+0x4>
   167bc:	90 91 42 19 	lds	r25, 0x1942	; 0x801942 <plot+0x5>
   167c0:	ac 01       	movw	r20, r24
   167c2:	4f 5f       	subi	r20, 0xFF	; 255
   167c4:	5f 4f       	sbci	r21, 0xFF	; 255
   167c6:	50 93 42 19 	sts	0x1942, r21	; 0x801942 <plot+0x5>
   167ca:	40 93 41 19 	sts	0x1941, r20	; 0x801941 <plot+0x4>
   167ce:	f9 01       	movw	r30, r18
   167d0:	e8 0f       	add	r30, r24
   167d2:	f9 1f       	adc	r31, r25
   167d4:	c0 83       	st	Z, r28
   167d6:	80 91 3d 19 	lds	r24, 0x193D	; 0x80193d <plot>
   167da:	90 91 3e 19 	lds	r25, 0x193E	; 0x80193e <plot+0x1>
   167de:	a0 91 3f 19 	lds	r26, 0x193F	; 0x80193f <plot+0x2>
   167e2:	b0 91 40 19 	lds	r27, 0x1940	; 0x801940 <plot+0x3>
   167e6:	01 96       	adiw	r24, 0x01	; 1
   167e8:	a1 1d       	adc	r26, r1
   167ea:	b1 1d       	adc	r27, r1
   167ec:	80 93 3d 19 	sts	0x193D, r24	; 0x80193d <plot>
   167f0:	90 93 3e 19 	sts	0x193E, r25	; 0x80193e <plot+0x1>
   167f4:	a0 93 3f 19 	sts	0x193F, r26	; 0x80193f <plot+0x2>
   167f8:	b0 93 40 19 	sts	0x1940, r27	; 0x801940 <plot+0x3>
   167fc:	20 91 41 19 	lds	r18, 0x1941	; 0x801941 <plot+0x4>
   16800:	30 91 42 19 	lds	r19, 0x1942	; 0x801942 <plot+0x5>
   16804:	80 91 43 19 	lds	r24, 0x1943	; 0x801943 <plot+0x6>
   16808:	90 91 44 19 	lds	r25, 0x1944	; 0x801944 <plot+0x7>
   1680c:	28 17       	cp	r18, r24
   1680e:	39 07       	cpc	r19, r25
   16810:	54 f0       	brlt	.+20     	; 0x16826 <printer_buffer+0xe0>
   16812:	52 de       	rcall	.-860    	; 0x164b8 <receive_plot_flush>
   16814:	97 ff       	sbrs	r25, 7
   16816:	03 c0       	rjmp	.+6      	; 0x1681e <printer_buffer+0xd8>
   16818:	81 e0       	ldi	r24, 0x01	; 1
   1681a:	80 93 45 19 	sts	0x1945, r24	; 0x801945 <plot+0x8>
   1681e:	10 92 42 19 	sts	0x1942, r1	; 0x801942 <plot+0x5>
   16822:	10 92 41 19 	sts	0x1941, r1	; 0x801941 <plot+0x4>
   16826:	df 91       	pop	r29
   16828:	cf 91       	pop	r28
   1682a:	08 95       	ret

0001682c <PRINTER_COMMANDS>:
   1682c:	cf 93       	push	r28
   1682e:	c8 2f       	mov	r28, r24
   16830:	80 91 a1 1e 	lds	r24, 0x1EA1	; 0x801ea1 <listening>
   16834:	90 e0       	ldi	r25, 0x00	; 0
   16836:	0e 94 6c 92 	call	0x124d8	; 0x124d8 <PRINTER_is_MLA>
   1683a:	89 2b       	or	r24, r25
   1683c:	49 f0       	breq	.+18     	; 0x16850 <PRINTER_COMMANDS+0x24>
   1683e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   16842:	85 ff       	sbrs	r24, 5
   16844:	1e c0       	rjmp	.+60     	; 0x16882 <PRINTER_COMMANDS+0x56>
   16846:	1f 92       	push	r1
   16848:	cf 93       	push	r28
   1684a:	82 ef       	ldi	r24, 0xF2	; 242
   1684c:	98 e2       	ldi	r25, 0x28	; 40
   1684e:	0f c0       	rjmp	.+30     	; 0x1686e <PRINTER_COMMANDS+0x42>
   16850:	80 91 9f 1e 	lds	r24, 0x1E9F	; 0x801e9f <talking>
   16854:	90 e0       	ldi	r25, 0x00	; 0
   16856:	0e 94 7d 92 	call	0x124fa	; 0x124fa <PRINTER_is_MTA>
   1685a:	89 2b       	or	r24, r25
   1685c:	91 f0       	breq	.+36     	; 0x16882 <PRINTER_COMMANDS+0x56>
   1685e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   16862:	85 ff       	sbrs	r24, 5
   16864:	0e c0       	rjmp	.+28     	; 0x16882 <PRINTER_COMMANDS+0x56>
   16866:	1f 92       	push	r1
   16868:	cf 93       	push	r28
   1686a:	88 ed       	ldi	r24, 0xD8	; 216
   1686c:	98 e2       	ldi	r25, 0x28	; 40
   1686e:	1f 92       	push	r1
   16870:	9f 93       	push	r25
   16872:	8f 93       	push	r24
   16874:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   16878:	0f 90       	pop	r0
   1687a:	0f 90       	pop	r0
   1687c:	0f 90       	pop	r0
   1687e:	0f 90       	pop	r0
   16880:	0f 90       	pop	r0
   16882:	80 e0       	ldi	r24, 0x00	; 0
   16884:	90 e0       	ldi	r25, 0x00	; 0
   16886:	cf 91       	pop	r28
   16888:	08 95       	ret

0001688a <plot_echo>:
   1688a:	cf 92       	push	r12
   1688c:	df 92       	push	r13
   1688e:	ff 92       	push	r15
   16890:	0f 93       	push	r16
   16892:	1f 93       	push	r17
   16894:	cf 93       	push	r28
   16896:	df 93       	push	r29
   16898:	cd b7       	in	r28, 0x3d	; 61
   1689a:	de b7       	in	r29, 0x3e	; 62
   1689c:	da 95       	dec	r29
   1689e:	0f b6       	in	r0, 0x3f	; 63
   168a0:	f8 94       	cli
   168a2:	de bf       	out	0x3e, r29	; 62
   168a4:	0f be       	out	0x3f, r0	; 63
   168a6:	cd bf       	out	0x3d, r28	; 61
   168a8:	f8 2e       	mov	r15, r24
   168aa:	83 e0       	ldi	r24, 0x03	; 3
   168ac:	90 e0       	ldi	r25, 0x00	; 0
   168ae:	e9 d0       	rcall	.+466    	; 0x16a82 <find_type>
   168b0:	8c 01       	movw	r16, r24
   168b2:	0f 3f       	cpi	r16, 0xFF	; 255
   168b4:	8f ef       	ldi	r24, 0xFF	; 255
   168b6:	18 07       	cpc	r17, r24
   168b8:	59 f4       	brne	.+22     	; 0x168d0 <plot_echo+0x46>
   168ba:	83 ec       	ldi	r24, 0xC3	; 195
   168bc:	98 e2       	ldi	r25, 0x28	; 40
   168be:	1f 92       	push	r1
   168c0:	9f 93       	push	r25
   168c2:	8f 93       	push	r24
   168c4:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   168c8:	0f 90       	pop	r0
   168ca:	0f 90       	pop	r0
   168cc:	0f 90       	pop	r0
   168ce:	63 c0       	rjmp	.+198    	; 0x16996 <plot_echo+0x10c>
   168d0:	4c de       	rcall	.-872    	; 0x1656a <printer_close>
   168d2:	80 e0       	ldi	r24, 0x00	; 0
   168d4:	0e 94 14 2c 	call	0x5828	; 0x5828 <uart_keyhit>
   168d8:	89 2b       	or	r24, r25
   168da:	31 f0       	breq	.+12     	; 0x168e8 <plot_echo+0x5e>
   168dc:	80 e0       	ldi	r24, 0x00	; 0
   168de:	0e 94 c3 2b 	call	0x5786	; 0x5786 <uart_rx_byte>
   168e2:	0e 94 dc 78 	call	0xf1b8	; 0xf1b8 <putchar>
   168e6:	f5 cf       	rjmp	.-22     	; 0x168d2 <plot_echo+0x48>
   168e8:	80 91 72 1c 	lds	r24, 0x1C72	; 0x801c72 <__iob+0x2>
   168ec:	90 91 73 1c 	lds	r25, 0x1C73	; 0x801c73 <__iob+0x3>
   168f0:	0e 94 3d 8e 	call	0x11c7a	; 0x11c7a <gpib_decode_header>
   168f4:	20 e0       	ldi	r18, 0x00	; 0
   168f6:	30 e0       	ldi	r19, 0x00	; 0
   168f8:	4c e4       	ldi	r20, 0x4C	; 76
   168fa:	53 e1       	ldi	r21, 0x13	; 19
   168fc:	6f 2d       	mov	r22, r15
   168fe:	80 2f       	mov	r24, r16
   16900:	0e 94 b3 c5 	call	0x18b66	; 0x18b66 <controller_send_str>
   16904:	20 e0       	ldi	r18, 0x00	; 0
   16906:	31 e0       	ldi	r19, 0x01	; 1
   16908:	ce 01       	movw	r24, r28
   1690a:	01 96       	adiw	r24, 0x01	; 1
   1690c:	6c 01       	movw	r12, r24
   1690e:	ac 01       	movw	r20, r24
   16910:	60 2f       	mov	r22, r16
   16912:	8f 2d       	mov	r24, r15
   16914:	0e 94 f6 c5 	call	0x18bec	; 0x18bec <controller_read_str>
   16918:	df 92       	push	r13
   1691a:	cf 92       	push	r12
   1691c:	9f 93       	push	r25
   1691e:	8f 93       	push	r24
   16920:	81 eb       	ldi	r24, 0xB1	; 177
   16922:	98 e2       	ldi	r25, 0x28	; 40
   16924:	1f 92       	push	r1
   16926:	9f 93       	push	r25
   16928:	8f 93       	push	r24
   1692a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1692e:	20 e0       	ldi	r18, 0x00	; 0
   16930:	30 e0       	ldi	r19, 0x00	; 0
   16932:	43 e5       	ldi	r20, 0x53	; 83
   16934:	53 e1       	ldi	r21, 0x13	; 19
   16936:	6f 2d       	mov	r22, r15
   16938:	80 2f       	mov	r24, r16
   1693a:	0e 94 b3 c5 	call	0x18b66	; 0x18b66 <controller_send_str>
   1693e:	20 e0       	ldi	r18, 0x00	; 0
   16940:	31 e0       	ldi	r19, 0x01	; 1
   16942:	a6 01       	movw	r20, r12
   16944:	60 2f       	mov	r22, r16
   16946:	8f 2d       	mov	r24, r15
   16948:	0e 94 f6 c5 	call	0x18bec	; 0x18bec <controller_read_str>
   1694c:	df 92       	push	r13
   1694e:	cf 92       	push	r12
   16950:	9f 93       	push	r25
   16952:	8f 93       	push	r24
   16954:	8f e9       	ldi	r24, 0x9F	; 159
   16956:	98 e2       	ldi	r25, 0x28	; 40
   16958:	1f 92       	push	r1
   1695a:	9f 93       	push	r25
   1695c:	8f 93       	push	r24
   1695e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   16962:	20 e0       	ldi	r18, 0x00	; 0
   16964:	30 e0       	ldi	r19, 0x00	; 0
   16966:	46 e6       	ldi	r20, 0x66	; 102
   16968:	53 e1       	ldi	r21, 0x13	; 19
   1696a:	6f 2d       	mov	r22, r15
   1696c:	80 2f       	mov	r24, r16
   1696e:	0e 94 b3 c5 	call	0x18b66	; 0x18b66 <controller_send_str>
   16972:	60 2f       	mov	r22, r16
   16974:	8f 2d       	mov	r24, r15
   16976:	0e 94 3c c6 	call	0x18c78	; 0x18c78 <controller_read_trace>
   1697a:	9f 93       	push	r25
   1697c:	8f 93       	push	r24
   1697e:	8a e8       	ldi	r24, 0x8A	; 138
   16980:	98 e2       	ldi	r25, 0x28	; 40
   16982:	1f 92       	push	r1
   16984:	9f 93       	push	r25
   16986:	8f 93       	push	r24
   16988:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1698c:	0f b6       	in	r0, 0x3f	; 63
   1698e:	f8 94       	cli
   16990:	de bf       	out	0x3e, r29	; 62
   16992:	0f be       	out	0x3f, r0	; 63
   16994:	cd bf       	out	0x3d, r28	; 61
   16996:	d3 95       	inc	r29
   16998:	0f b6       	in	r0, 0x3f	; 63
   1699a:	f8 94       	cli
   1699c:	de bf       	out	0x3e, r29	; 62
   1699e:	0f be       	out	0x3f, r0	; 63
   169a0:	cd bf       	out	0x3d, r28	; 61
   169a2:	df 91       	pop	r29
   169a4:	cf 91       	pop	r28
   169a6:	1f 91       	pop	r17
   169a8:	0f 91       	pop	r16
   169aa:	ff 90       	pop	r15
   169ac:	df 90       	pop	r13
   169ae:	cf 90       	pop	r12
   169b0:	08 95       	ret

000169b2 <V2B_MSB>:
   169b2:	0f 93       	push	r16
   169b4:	1f 93       	push	r17
   169b6:	da 01       	movw	r26, r20
   169b8:	11 97       	sbiw	r26, 0x01	; 1
   169ba:	b7 fd       	sbrc	r27, 7
   169bc:	0b c0       	rjmp	.+22     	; 0x169d4 <V2B_MSB+0x22>
   169be:	fd 01       	movw	r30, r26
   169c0:	e6 0f       	add	r30, r22
   169c2:	f7 1f       	adc	r31, r23
   169c4:	e8 0f       	add	r30, r24
   169c6:	f9 1f       	adc	r31, r25
   169c8:	00 83       	st	Z, r16
   169ca:	01 2f       	mov	r16, r17
   169cc:	12 2f       	mov	r17, r18
   169ce:	23 2f       	mov	r18, r19
   169d0:	33 27       	eor	r19, r19
   169d2:	f2 cf       	rjmp	.-28     	; 0x169b8 <V2B_MSB+0x6>
   169d4:	1f 91       	pop	r17
   169d6:	0f 91       	pop	r16
   169d8:	08 95       	ret

000169da <V2B_LSB>:
   169da:	0f 93       	push	r16
   169dc:	1f 93       	push	r17
   169de:	fc 01       	movw	r30, r24
   169e0:	e6 0f       	add	r30, r22
   169e2:	f7 1f       	adc	r31, r23
   169e4:	bf 01       	movw	r22, r30
   169e6:	cf 01       	movw	r24, r30
   169e8:	86 1b       	sub	r24, r22
   169ea:	97 0b       	sbc	r25, r23
   169ec:	84 17       	cp	r24, r20
   169ee:	95 07       	cpc	r25, r21
   169f0:	34 f4       	brge	.+12     	; 0x169fe <V2B_LSB+0x24>
   169f2:	01 93       	st	Z+, r16
   169f4:	01 2f       	mov	r16, r17
   169f6:	12 2f       	mov	r17, r18
   169f8:	23 2f       	mov	r18, r19
   169fa:	33 27       	eor	r19, r19
   169fc:	f4 cf       	rjmp	.-24     	; 0x169e6 <V2B_LSB+0xc>
   169fe:	1f 91       	pop	r17
   16a00:	0f 91       	pop	r16
   16a02:	08 95       	ret

00016a04 <B2V_MSB>:
   16a04:	cf 92       	push	r12
   16a06:	df 92       	push	r13
   16a08:	ef 92       	push	r14
   16a0a:	ff 92       	push	r15
   16a0c:	fc 01       	movw	r30, r24
   16a0e:	e6 0f       	add	r30, r22
   16a10:	f7 1f       	adc	r31, r23
   16a12:	60 e0       	ldi	r22, 0x00	; 0
   16a14:	70 e0       	ldi	r23, 0x00	; 0
   16a16:	cb 01       	movw	r24, r22
   16a18:	df 01       	movw	r26, r30
   16a1a:	9f 01       	movw	r18, r30
   16a1c:	2a 1b       	sub	r18, r26
   16a1e:	3b 0b       	sbc	r19, r27
   16a20:	24 17       	cp	r18, r20
   16a22:	35 07       	cpc	r19, r21
   16a24:	4c f4       	brge	.+18     	; 0x16a38 <B2V_MSB+0x34>
   16a26:	cc 24       	eor	r12, r12
   16a28:	d6 2e       	mov	r13, r22
   16a2a:	e7 2e       	mov	r14, r23
   16a2c:	f8 2e       	mov	r15, r24
   16a2e:	21 91       	ld	r18, Z+
   16a30:	c7 01       	movw	r24, r14
   16a32:	b6 01       	movw	r22, r12
   16a34:	62 2b       	or	r22, r18
   16a36:	f1 cf       	rjmp	.-30     	; 0x16a1a <B2V_MSB+0x16>
   16a38:	ff 90       	pop	r15
   16a3a:	ef 90       	pop	r14
   16a3c:	df 90       	pop	r13
   16a3e:	cf 90       	pop	r12
   16a40:	08 95       	ret

00016a42 <B2V_LSB>:
   16a42:	cf 92       	push	r12
   16a44:	df 92       	push	r13
   16a46:	ef 92       	push	r14
   16a48:	ff 92       	push	r15
   16a4a:	9c 01       	movw	r18, r24
   16a4c:	db 01       	movw	r26, r22
   16a4e:	60 e0       	ldi	r22, 0x00	; 0
   16a50:	70 e0       	ldi	r23, 0x00	; 0
   16a52:	cb 01       	movw	r24, r22
   16a54:	41 50       	subi	r20, 0x01	; 1
   16a56:	51 09       	sbc	r21, r1
   16a58:	57 fd       	sbrc	r21, 7
   16a5a:	0e c0       	rjmp	.+28     	; 0x16a78 <B2V_LSB+0x36>
   16a5c:	cc 24       	eor	r12, r12
   16a5e:	d6 2e       	mov	r13, r22
   16a60:	e7 2e       	mov	r14, r23
   16a62:	f8 2e       	mov	r15, r24
   16a64:	fa 01       	movw	r30, r20
   16a66:	ea 0f       	add	r30, r26
   16a68:	fb 1f       	adc	r31, r27
   16a6a:	e2 0f       	add	r30, r18
   16a6c:	f3 1f       	adc	r31, r19
   16a6e:	e0 81       	ld	r30, Z
   16a70:	c7 01       	movw	r24, r14
   16a72:	b6 01       	movw	r22, r12
   16a74:	6e 2b       	or	r22, r30
   16a76:	ee cf       	rjmp	.-36     	; 0x16a54 <B2V_LSB+0x12>
   16a78:	ff 90       	pop	r15
   16a7a:	ef 90       	pop	r14
   16a7c:	df 90       	pop	r13
   16a7e:	cf 90       	pop	r12
   16a80:	08 95       	ret

00016a82 <find_type>:
   16a82:	e5 ea       	ldi	r30, 0xA5	; 165
   16a84:	fe e1       	ldi	r31, 0x1E	; 30
   16a86:	20 e0       	ldi	r18, 0x00	; 0
   16a88:	30 e0       	ldi	r19, 0x00	; 0
   16a8a:	40 81       	ld	r20, Z
   16a8c:	50 e0       	ldi	r21, 0x00	; 0
   16a8e:	48 17       	cp	r20, r24
   16a90:	59 07       	cpc	r21, r25
   16a92:	49 f0       	breq	.+18     	; 0x16aa6 <find_type+0x24>
   16a94:	2f 5f       	subi	r18, 0xFF	; 255
   16a96:	3f 4f       	sbci	r19, 0xFF	; 255
   16a98:	37 96       	adiw	r30, 0x07	; 7
   16a9a:	28 30       	cpi	r18, 0x08	; 8
   16a9c:	31 05       	cpc	r19, r1
   16a9e:	a9 f7       	brne	.-22     	; 0x16a8a <find_type+0x8>
   16aa0:	8f ef       	ldi	r24, 0xFF	; 255
   16aa2:	9f ef       	ldi	r25, 0xFF	; 255
   16aa4:	08 95       	ret
   16aa6:	c9 01       	movw	r24, r18
   16aa8:	08 95       	ret

00016aaa <type_to_str>:
   16aaa:	00 97       	sbiw	r24, 0x00	; 0
   16aac:	59 f0       	breq	.+22     	; 0x16ac4 <type_to_str+0x1a>
   16aae:	81 30       	cpi	r24, 0x01	; 1
   16ab0:	91 05       	cpc	r25, r1
   16ab2:	59 f0       	breq	.+22     	; 0x16aca <type_to_str+0x20>
   16ab4:	82 30       	cpi	r24, 0x02	; 2
   16ab6:	91 05       	cpc	r25, r1
   16ab8:	59 f0       	breq	.+22     	; 0x16ad0 <type_to_str+0x26>
   16aba:	03 97       	sbiw	r24, 0x03	; 3
   16abc:	61 f0       	breq	.+24     	; 0x16ad6 <type_to_str+0x2c>
   16abe:	8c e9       	ldi	r24, 0x9C	; 156
   16ac0:	93 e1       	ldi	r25, 0x13	; 19
   16ac2:	08 95       	ret
   16ac4:	82 e7       	ldi	r24, 0x72	; 114
   16ac6:	93 e1       	ldi	r25, 0x13	; 19
   16ac8:	08 95       	ret
   16aca:	8a e7       	ldi	r24, 0x7A	; 122
   16acc:	93 e1       	ldi	r25, 0x13	; 19
   16ace:	08 95       	ret
   16ad0:	82 e9       	ldi	r24, 0x92	; 146
   16ad2:	93 e1       	ldi	r25, 0x13	; 19
   16ad4:	08 95       	ret
   16ad6:	85 e8       	ldi	r24, 0x85	; 133
   16ad8:	93 e1       	ldi	r25, 0x13	; 19
   16ada:	08 95       	ret

00016adc <find_free>:
   16adc:	80 e0       	ldi	r24, 0x00	; 0
   16ade:	90 e0       	ldi	r25, 0x00	; 0
   16ae0:	d0 cf       	rjmp	.-96     	; 0x16a82 <find_type>
   16ae2:	08 95       	ret

00016ae4 <find_device>:
int find_device(int type, int address, int base)
{
    int i;

    ///@skip Only interested in device addresses
    if(address < BASE_MLA || address >(BASE_MSA+30))
   16ae4:	9b 01       	movw	r18, r22
   16ae6:	20 52       	subi	r18, 0x20	; 32
   16ae8:	31 09       	sbc	r19, r1
   16aea:	2f 35       	cpi	r18, 0x5F	; 95
   16aec:	31 05       	cpc	r19, r1
   16aee:	f8 f4       	brcc	.+62     	; 0x16b2e <find_device+0x4a>
        return(-1);

    ///@brief Make sure address is in expected range
    if(address < base || address > (base+30))
   16af0:	64 17       	cp	r22, r20
   16af2:	75 07       	cpc	r23, r21
   16af4:	e4 f0       	brlt	.+56     	; 0x16b2e <find_device+0x4a>
   16af6:	9a 01       	movw	r18, r20
   16af8:	22 5e       	subi	r18, 0xE2	; 226
   16afa:	3f 4f       	sbci	r19, 0xFF	; 255
   16afc:	26 17       	cp	r18, r22
   16afe:	37 07       	cpc	r19, r23
   16b00:	b4 f0       	brlt	.+44     	; 0x16b2e <find_device+0x4a>
        return(-1);

    ///@brief convert to device address
    address -= base;
   16b02:	64 1b       	sub	r22, r20
   16b04:	75 0b       	sbc	r23, r21
   16b06:	e5 ea       	ldi	r30, 0xA5	; 165
   16b08:	fe e1       	ldi	r31, 0x1E	; 30

    ///@brief search for device address
    for(i=0;i<MAX_DEVICES;++i)
   16b0a:	20 e0       	ldi	r18, 0x00	; 0
   16b0c:	30 e0       	ldi	r19, 0x00	; 0
    {
        if(Devices[i].TYPE == type && Devices[i].ADDRESS == address)
   16b0e:	40 81       	ld	r20, Z
   16b10:	50 e0       	ldi	r21, 0x00	; 0
   16b12:	48 17       	cp	r20, r24
   16b14:	59 07       	cpc	r21, r25
   16b16:	29 f4       	brne	.+10     	; 0x16b22 <find_device+0x3e>
   16b18:	41 81       	ldd	r20, Z+1	; 0x01
   16b1a:	50 e0       	ldi	r21, 0x00	; 0
   16b1c:	64 17       	cp	r22, r20
   16b1e:	75 07       	cpc	r23, r21
   16b20:	49 f0       	breq	.+18     	; 0x16b34 <find_device+0x50>

    ///@brief convert to device address
    address -= base;

    ///@brief search for device address
    for(i=0;i<MAX_DEVICES;++i)
   16b22:	2f 5f       	subi	r18, 0xFF	; 255
   16b24:	3f 4f       	sbci	r19, 0xFF	; 255
   16b26:	37 96       	adiw	r30, 0x07	; 7
   16b28:	28 30       	cpi	r18, 0x08	; 8
   16b2a:	31 05       	cpc	r19, r1
   16b2c:	81 f7       	brne	.-32     	; 0x16b0e <find_device+0x2a>
{
    int i;

    ///@skip Only interested in device addresses
    if(address < BASE_MLA || address >(BASE_MSA+30))
        return(-1);
   16b2e:	8f ef       	ldi	r24, 0xFF	; 255
   16b30:	9f ef       	ldi	r25, 0xFF	; 255
   16b32:	08 95       	ret
   16b34:	c9 01       	movw	r24, r18
    {
        if(Devices[i].TYPE == type && Devices[i].ADDRESS == address)
            return(i);
    }
    return(-1);
}
   16b36:	08 95       	ret

00016b38 <set_active_device>:
/// Since we can be called multiple times per single GPIB state we do not
/// display state changes here. Other code displays the active state.
///@param index: Devices[] index
///@return 1 on success or 0 on fail
int set_active_device(int index)
{
   16b38:	1f 93       	push	r17
   16b3a:	cf 93       	push	r28
   16b3c:	df 93       	push	r29
    int type,address;

    ///@brief We also check for -1 
    /// So the result of find_device() can be used without additional tests
    if(index == -1)
   16b3e:	8f 3f       	cpi	r24, 0xFF	; 255
   16b40:	2f ef       	ldi	r18, 0xFF	; 255
   16b42:	92 07       	cpc	r25, r18
   16b44:	09 f4       	brne	.+2      	; 0x16b48 <set_active_device+0x10>
   16b46:	fc c0       	rjmp	.+504    	; 0x16d40 <set_active_device+0x208>
   16b48:	ec 01       	movw	r28, r24
    {
        return(0);
    }

    if(index < 0 || index >= MAX_DEVICES)
   16b4a:	08 97       	sbiw	r24, 0x08	; 8
   16b4c:	c0 f0       	brcs	.+48     	; 0x16b7e <set_active_device+0x46>
    {
        if(debuglevel & 1)
   16b4e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   16b52:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   16b56:	9c 01       	movw	r18, r24
   16b58:	21 70       	andi	r18, 0x01	; 1
   16b5a:	33 27       	eor	r19, r19
   16b5c:	80 ff       	sbrs	r24, 0
   16b5e:	f2 c0       	rjmp	.+484    	; 0x16d44 <set_active_device+0x20c>
            printf("set_active_device:(%d) out of range\n", index);
   16b60:	df 93       	push	r29
   16b62:	cf 93       	push	r28
   16b64:	87 e0       	ldi	r24, 0x07	; 7
   16b66:	92 e3       	ldi	r25, 0x32	; 50
   16b68:	1f 92       	push	r1
   16b6a:	9f 93       	push	r25
   16b6c:	8f 93       	push	r24
   16b6e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   16b72:	0f 90       	pop	r0
   16b74:	0f 90       	pop	r0
   16b76:	0f 90       	pop	r0
   16b78:	0f 90       	pop	r0
   16b7a:	0f 90       	pop	r0
   16b7c:	e1 c0       	rjmp	.+450    	; 0x16d40 <set_active_device+0x208>
        return(0);
    }

    type = Devices[index].TYPE;
    address = Devices[index].ADDRESS;
   16b7e:	87 e0       	ldi	r24, 0x07	; 7
   16b80:	8c 9f       	mul	r24, r28
   16b82:	f0 01       	movw	r30, r0
   16b84:	8d 9f       	mul	r24, r29
   16b86:	f0 0d       	add	r31, r0
   16b88:	11 24       	eor	r1, r1
   16b8a:	eb 55       	subi	r30, 0x5B	; 91
   16b8c:	f1 4e       	sbci	r31, 0xE1	; 225
   16b8e:	81 81       	ldd	r24, Z+1	; 0x01
    if(address < 0 || address > 30)
   16b90:	8f 31       	cpi	r24, 0x1F	; 31
   16b92:	e8 f0       	brcs	.+58     	; 0x16bce <set_active_device+0x96>
    {
        if(debuglevel & 1)
   16b94:	40 91 b0 01 	lds	r20, 0x01B0	; 0x8001b0 <debuglevel>
   16b98:	50 91 b1 01 	lds	r21, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   16b9c:	9a 01       	movw	r18, r20
   16b9e:	21 70       	andi	r18, 0x01	; 1
   16ba0:	33 27       	eor	r19, r19
   16ba2:	40 ff       	sbrs	r20, 0
   16ba4:	cf c0       	rjmp	.+414    	; 0x16d44 <set_active_device+0x20c>
            printf("set_active_device: index:%d address: %02XH out of range\n", index,address);
   16ba6:	1f 92       	push	r1
   16ba8:	8f 93       	push	r24
   16baa:	df 93       	push	r29
   16bac:	cf 93       	push	r28
   16bae:	8e ec       	ldi	r24, 0xCE	; 206
   16bb0:	91 e3       	ldi	r25, 0x31	; 49
   16bb2:	1f 92       	push	r1
   16bb4:	9f 93       	push	r25
   16bb6:	8f 93       	push	r24
   16bb8:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   16bbc:	8d b7       	in	r24, 0x3d	; 61
   16bbe:	9e b7       	in	r25, 0x3e	; 62
   16bc0:	07 96       	adiw	r24, 0x07	; 7
   16bc2:	0f b6       	in	r0, 0x3f	; 63
   16bc4:	f8 94       	cli
   16bc6:	9e bf       	out	0x3e, r25	; 62
   16bc8:	0f be       	out	0x3f, r0	; 63
   16bca:	8d bf       	out	0x3d, r24	; 61
   16bcc:	b9 c0       	rjmp	.+370    	; 0x16d40 <set_active_device+0x208>
        if(debuglevel & 1)
            printf("set_active_device:(%d) out of range\n", index);
        return(0);
    }

    type = Devices[index].TYPE;
   16bce:	10 81       	ld	r17, Z
   16bd0:	81 2f       	mov	r24, r17
   16bd2:	90 e0       	ldi	r25, 0x00	; 0
        if(debuglevel & 1)
            printf("set_active_device: index:%d address: %02XH out of range\n", index,address);
        return(0);
    }

    if(Devices[index].dev == NULL)
   16bd4:	23 81       	ldd	r18, Z+3	; 0x03
   16bd6:	34 81       	ldd	r19, Z+4	; 0x04
   16bd8:	21 15       	cp	r18, r1
   16bda:	31 05       	cpc	r19, r1
   16bdc:	01 f5       	brne	.+64     	; 0x16c1e <set_active_device+0xe6>
    {
        if(debuglevel & 1)
   16bde:	40 91 b0 01 	lds	r20, 0x01B0	; 0x8001b0 <debuglevel>
   16be2:	50 91 b1 01 	lds	r21, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   16be6:	9a 01       	movw	r18, r20
   16be8:	21 70       	andi	r18, 0x01	; 1
   16bea:	33 27       	eor	r19, r19
   16bec:	40 ff       	sbrs	r20, 0
            printf("set_active_device: index:%d type:%d:%s, dev == NULL\n", 
   16bee:	aa c0       	rjmp	.+340    	; 0x16d44 <set_active_device+0x20c>
   16bf0:	5c df       	rcall	.-328    	; 0x16aaa <type_to_str>
   16bf2:	9f 93       	push	r25
   16bf4:	8f 93       	push	r24
   16bf6:	1f 92       	push	r1
   16bf8:	1f 93       	push	r17
   16bfa:	df 93       	push	r29
   16bfc:	cf 93       	push	r28
   16bfe:	89 e9       	ldi	r24, 0x99	; 153
   16c00:	91 e3       	ldi	r25, 0x31	; 49
   16c02:	1f 92       	push	r1
   16c04:	9f 93       	push	r25
   16c06:	8f 93       	push	r24
   16c08:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   16c0c:	8d b7       	in	r24, 0x3d	; 61
   16c0e:	9e b7       	in	r25, 0x3e	; 62
   16c10:	09 96       	adiw	r24, 0x09	; 9
   16c12:	0f b6       	in	r0, 0x3f	; 63
   16c14:	f8 94       	cli
   16c16:	9e bf       	out	0x3e, r25	; 62
   16c18:	0f be       	out	0x3f, r0	; 63
   16c1a:	8d bf       	out	0x3d, r24	; 61
                index,type,type_to_str(type));
        return(0);
    }

    if(type == NO_TYPE)
   16c1c:	91 c0       	rjmp	.+290    	; 0x16d40 <set_active_device+0x208>
   16c1e:	00 97       	sbiw	r24, 0x00	; 0
    {
        if(debuglevel & 1)
   16c20:	11 f5       	brne	.+68     	; 0x16c66 <set_active_device+0x12e>
   16c22:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   16c26:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   16c2a:	9c 01       	movw	r18, r24
   16c2c:	21 70       	andi	r18, 0x01	; 1
   16c2e:	33 27       	eor	r19, r19
   16c30:	80 ff       	sbrs	r24, 0
            printf("set_active_device: index %d uninitalized type:%d:%s\n", 
   16c32:	88 c0       	rjmp	.+272    	; 0x16d44 <set_active_device+0x20c>
   16c34:	80 e0       	ldi	r24, 0x00	; 0
   16c36:	90 e0       	ldi	r25, 0x00	; 0
   16c38:	38 df       	rcall	.-400    	; 0x16aaa <type_to_str>
   16c3a:	9f 93       	push	r25
   16c3c:	8f 93       	push	r24
   16c3e:	1f 92       	push	r1
   16c40:	1f 92       	push	r1
   16c42:	df 93       	push	r29
   16c44:	cf 93       	push	r28
   16c46:	84 e6       	ldi	r24, 0x64	; 100
   16c48:	91 e3       	ldi	r25, 0x31	; 49
   16c4a:	1f 92       	push	r1
   16c4c:	9f 93       	push	r25
   16c4e:	8f 93       	push	r24
   16c50:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   16c54:	8d b7       	in	r24, 0x3d	; 61
   16c56:	9e b7       	in	r25, 0x3e	; 62
   16c58:	09 96       	adiw	r24, 0x09	; 9
   16c5a:	0f b6       	in	r0, 0x3f	; 63
   16c5c:	f8 94       	cli
   16c5e:	9e bf       	out	0x3e, r25	; 62
   16c60:	0f be       	out	0x3f, r0	; 63
   16c62:	8d bf       	out	0x3d, r24	; 61
                index,type,type_to_str(type));
        return(0);
    }

    if(type == PRINTER_TYPE)
   16c64:	6d c0       	rjmp	.+218    	; 0x16d40 <set_active_device+0x208>
   16c66:	83 30       	cpi	r24, 0x03	; 3
   16c68:	91 05       	cpc	r25, r1
    {
        PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   16c6a:	29 f4       	brne	.+10     	; 0x16c76 <set_active_device+0x13e>
   16c6c:	30 93 55 19 	sts	0x1955, r19	; 0x801955 <PRINTERp+0x1>
   16c70:	20 93 54 19 	sts	0x1954, r18	; 0x801954 <PRINTERp>
        return(1);
    }

    if(type == AMIGO_TYPE || type == SS80_TYPE) 
   16c74:	43 c0       	rjmp	.+134    	; 0x16cfc <set_active_device+0x1c4>
   16c76:	ac 01       	movw	r20, r24
   16c78:	41 50       	subi	r20, 0x01	; 1
   16c7a:	51 09       	sbc	r21, r1
   16c7c:	42 30       	cpi	r20, 0x02	; 2
   16c7e:	51 05       	cpc	r21, r1
   16c80:	08 f0       	brcs	.+2      	; 0x16c84 <set_active_device+0x14c>
    {
        if(Devices[index].state == NULL)
   16c82:	3f c0       	rjmp	.+126    	; 0x16d02 <set_active_device+0x1ca>
   16c84:	45 81       	ldd	r20, Z+5	; 0x05
   16c86:	56 81       	ldd	r21, Z+6	; 0x06
   16c88:	41 15       	cp	r20, r1
   16c8a:	51 05       	cpc	r21, r1
        {
            if(debuglevel & 1)
   16c8c:	01 f5       	brne	.+64     	; 0x16cce <set_active_device+0x196>
   16c8e:	40 91 b0 01 	lds	r20, 0x01B0	; 0x8001b0 <debuglevel>
   16c92:	50 91 b1 01 	lds	r21, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   16c96:	9a 01       	movw	r18, r20
   16c98:	21 70       	andi	r18, 0x01	; 1
   16c9a:	33 27       	eor	r19, r19
                printf("set_active_device: index: %d type:%d:%s, state == NULL\n",
   16c9c:	40 ff       	sbrs	r20, 0
   16c9e:	52 c0       	rjmp	.+164    	; 0x16d44 <set_active_device+0x20c>
   16ca0:	04 df       	rcall	.-504    	; 0x16aaa <type_to_str>
   16ca2:	9f 93       	push	r25
   16ca4:	8f 93       	push	r24
   16ca6:	1f 92       	push	r1
   16ca8:	1f 93       	push	r17
   16caa:	df 93       	push	r29
   16cac:	cf 93       	push	r28
   16cae:	8c e2       	ldi	r24, 0x2C	; 44
   16cb0:	91 e3       	ldi	r25, 0x31	; 49
   16cb2:	1f 92       	push	r1
   16cb4:	9f 93       	push	r25
   16cb6:	8f 93       	push	r24
   16cb8:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   16cbc:	8d b7       	in	r24, 0x3d	; 61
   16cbe:	9e b7       	in	r25, 0x3e	; 62
   16cc0:	09 96       	adiw	r24, 0x09	; 9
   16cc2:	0f b6       	in	r0, 0x3f	; 63
   16cc4:	f8 94       	cli
   16cc6:	9e bf       	out	0x3e, r25	; 62
   16cc8:	0f be       	out	0x3f, r0	; 63
   16cca:	8d bf       	out	0x3d, r24	; 61
                     index,type,type_to_str(type));
            return(0);
        }
#ifdef AMIGO
        if(type == AMIGO_TYPE)
   16ccc:	39 c0       	rjmp	.+114    	; 0x16d40 <set_active_device+0x208>
   16cce:	81 30       	cpi	r24, 0x01	; 1
   16cd0:	91 05       	cpc	r25, r1
        {
            AMIGOp = (AMIGODiskType *) Devices[index].dev;
   16cd2:	49 f4       	brne	.+18     	; 0x16ce6 <set_active_device+0x1ae>
   16cd4:	30 93 4f 19 	sts	0x194F, r19	; 0x80194f <AMIGOp+0x1>
   16cd8:	20 93 4e 19 	sts	0x194E, r18	; 0x80194e <AMIGOp>
            AMIGOs = (AMIGOStateType *) Devices[index].state;
   16cdc:	50 93 4d 19 	sts	0x194D, r21	; 0x80194d <AMIGOs+0x1>
   16ce0:	40 93 4c 19 	sts	0x194C, r20	; 0x80194c <AMIGOs>
            return(1);
        }
#endif
        if(type == SS80_TYPE)
   16ce4:	0b c0       	rjmp	.+22     	; 0x16cfc <set_active_device+0x1c4>
   16ce6:	82 30       	cpi	r24, 0x02	; 2
   16ce8:	91 05       	cpc	r25, r1
        {
            SS80p = (SS80DiskType *) Devices[index].dev;
   16cea:	59 f4       	brne	.+22     	; 0x16d02 <set_active_device+0x1ca>
   16cec:	30 93 53 19 	sts	0x1953, r19	; 0x801953 <SS80p+0x1>
   16cf0:	20 93 52 19 	sts	0x1952, r18	; 0x801952 <SS80p>
            SS80s = (SS80StateType *) Devices[index].state;
   16cf4:	50 93 51 19 	sts	0x1951, r21	; 0x801951 <SS80s+0x1>
   16cf8:	40 93 50 19 	sts	0x1950, r20	; 0x801950 <SS80s>
            return(1);
   16cfc:	21 e0       	ldi	r18, 0x01	; 1
   16cfe:	30 e0       	ldi	r19, 0x00	; 0
        }
    }
    if(debuglevel & 1)
   16d00:	21 c0       	rjmp	.+66     	; 0x16d44 <set_active_device+0x20c>
   16d02:	40 91 b0 01 	lds	r20, 0x01B0	; 0x8001b0 <debuglevel>
   16d06:	50 91 b1 01 	lds	r21, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   16d0a:	9a 01       	movw	r18, r20
   16d0c:	21 70       	andi	r18, 0x01	; 1
   16d0e:	33 27       	eor	r19, r19
        printf("set_active_device:(%d) invalid type:%d:%s\n", 
   16d10:	40 ff       	sbrs	r20, 0
   16d12:	18 c0       	rjmp	.+48     	; 0x16d44 <set_active_device+0x20c>
   16d14:	ca de       	rcall	.-620    	; 0x16aaa <type_to_str>
   16d16:	9f 93       	push	r25
   16d18:	8f 93       	push	r24
   16d1a:	1f 92       	push	r1
   16d1c:	1f 93       	push	r17
   16d1e:	df 93       	push	r29
   16d20:	cf 93       	push	r28
   16d22:	81 e0       	ldi	r24, 0x01	; 1
   16d24:	91 e3       	ldi	r25, 0x31	; 49
   16d26:	1f 92       	push	r1
   16d28:	9f 93       	push	r25
   16d2a:	8f 93       	push	r24
   16d2c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   16d30:	8d b7       	in	r24, 0x3d	; 61
   16d32:	9e b7       	in	r25, 0x3e	; 62
   16d34:	09 96       	adiw	r24, 0x09	; 9
   16d36:	0f b6       	in	r0, 0x3f	; 63
   16d38:	f8 94       	cli
   16d3a:	9e bf       	out	0x3e, r25	; 62
   16d3c:	0f be       	out	0x3f, r0	; 63

    ///@brief We also check for -1 
    /// So the result of find_device() can be used without additional tests
    if(index == -1)
    {
        return(0);
   16d3e:	8d bf       	out	0x3d, r24	; 61
   16d40:	20 e0       	ldi	r18, 0x00	; 0
    }
    if(debuglevel & 1)
        printf("set_active_device:(%d) invalid type:%d:%s\n", 
            index,type,type_to_str(type));
    return(0);
}
   16d42:	30 e0       	ldi	r19, 0x00	; 0
   16d44:	c9 01       	movw	r24, r18
   16d46:	df 91       	pop	r29
   16d48:	cf 91       	pop	r28
   16d4a:	1f 91       	pop	r17
   16d4c:	08 95       	ret

00016d4e <alloc_device>:

///@brief Allocate a Device structure for a disk or printer
///@param type: disk type
///@return Devices[] index on sucess or -1
int alloc_device(int type)
{
   16d4e:	0f 93       	push	r16
   16d50:	1f 93       	push	r17
   16d52:	cf 93       	push	r28
   16d54:	df 93       	push	r29
    int ind;
    int index = -1;

    // Find a free slot
    ind = find_free();
   16d56:	ec 01       	movw	r28, r24
   16d58:	c1 de       	rcall	.-638    	; 0x16adc <find_free>
    if(ind == -1)
   16d5a:	8c 01       	movw	r16, r24
   16d5c:	0f 3f       	cpi	r16, 0xFF	; 255
   16d5e:	8f ef       	ldi	r24, 0xFF	; 255
   16d60:	18 07       	cpc	r17, r24
    {
        if(debuglevel & 1)
   16d62:	99 f4       	brne	.+38     	; 0x16d8a <alloc_device+0x3c>
   16d64:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   16d68:	80 ff       	sbrs	r24, 0
            printf("alloc_device: Device table is full\n", type);
   16d6a:	7b c0       	rjmp	.+246    	; 0x16e62 <alloc_device+0x114>
   16d6c:	df 93       	push	r29
   16d6e:	cf 93       	push	r28
   16d70:	8d ed       	ldi	r24, 0xDD	; 221
   16d72:	90 e3       	ldi	r25, 0x30	; 48
   16d74:	1f 92       	push	r1
   16d76:	9f 93       	push	r25
   16d78:	8f 93       	push	r24
   16d7a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   16d7e:	0f 90       	pop	r0
   16d80:	0f 90       	pop	r0
   16d82:	0f 90       	pop	r0
   16d84:	0f 90       	pop	r0
   16d86:	0f 90       	pop	r0
        return(ind);
    }

    switch(type)
   16d88:	6c c0       	rjmp	.+216    	; 0x16e62 <alloc_device+0x114>
   16d8a:	c2 30       	cpi	r28, 0x02	; 2
   16d8c:	d1 05       	cpc	r29, r1
   16d8e:	f1 f0       	breq	.+60     	; 0x16dcc <alloc_device+0x7e>
   16d90:	c3 30       	cpi	r28, 0x03	; 3
   16d92:	d1 05       	cpc	r29, r1
   16d94:	b1 f1       	breq	.+108    	; 0x16e02 <alloc_device+0xb4>
   16d96:	c1 30       	cpi	r28, 0x01	; 1
   16d98:	d1 05       	cpc	r29, r1
   16d9a:	09 f0       	breq	.+2      	; 0x16d9e <alloc_device+0x50>
            Devices[ind].state = safecalloc(sizeof(SS80StateType)+7,1);
            index = ind;
            break;
#ifdef AMIGO
        case AMIGO_TYPE:
            Devices[ind].TYPE = type;
   16d9c:	47 c0       	rjmp	.+142    	; 0x16e2c <alloc_device+0xde>
   16d9e:	87 e0       	ldi	r24, 0x07	; 7
   16da0:	80 9f       	mul	r24, r16
   16da2:	e0 01       	movw	r28, r0
   16da4:	81 9f       	mul	r24, r17
   16da6:	d0 0d       	add	r29, r0
   16da8:	11 24       	eor	r1, r1
   16daa:	cb 55       	subi	r28, 0x5B	; 91
   16dac:	d1 4e       	sbci	r29, 0xE1	; 225
   16dae:	81 e0       	ldi	r24, 0x01	; 1
            Devices[ind].dev = safecalloc(sizeof(AMIGODiskType)+7,1);
   16db0:	88 83       	st	Y, r24
   16db2:	61 e0       	ldi	r22, 0x01	; 1
   16db4:	70 e0       	ldi	r23, 0x00	; 0
   16db6:	84 e3       	ldi	r24, 0x34	; 52
   16db8:	90 e0       	ldi	r25, 0x00	; 0
   16dba:	0e 94 7e 29 	call	0x52fc	; 0x52fc <safecalloc>
   16dbe:	9c 83       	std	Y+4, r25	; 0x04
            Devices[ind].state = safecalloc(sizeof(AMIGOStateType)+7,1);
   16dc0:	8b 83       	std	Y+3, r24	; 0x03
   16dc2:	61 e0       	ldi	r22, 0x01	; 1
   16dc4:	70 e0       	ldi	r23, 0x00	; 0
   16dc6:	88 e1       	ldi	r24, 0x18	; 24
   16dc8:	90 e0       	ldi	r25, 0x00	; 0
    }

    switch(type)
    {
        case SS80_TYPE:
            Devices[ind].TYPE = type;
   16dca:	16 c0       	rjmp	.+44     	; 0x16df8 <alloc_device+0xaa>
   16dcc:	87 e0       	ldi	r24, 0x07	; 7
   16dce:	80 9f       	mul	r24, r16
   16dd0:	e0 01       	movw	r28, r0
   16dd2:	81 9f       	mul	r24, r17
   16dd4:	d0 0d       	add	r29, r0
   16dd6:	11 24       	eor	r1, r1
   16dd8:	cb 55       	subi	r28, 0x5B	; 91
   16dda:	d1 4e       	sbci	r29, 0xE1	; 225
   16ddc:	82 e0       	ldi	r24, 0x02	; 2
            Devices[ind].dev = safecalloc(sizeof(SS80DiskType)+7,1);
   16dde:	88 83       	st	Y, r24
   16de0:	61 e0       	ldi	r22, 0x01	; 1
   16de2:	70 e0       	ldi	r23, 0x00	; 0
   16de4:	81 e5       	ldi	r24, 0x51	; 81
   16de6:	90 e0       	ldi	r25, 0x00	; 0
   16de8:	0e 94 7e 29 	call	0x52fc	; 0x52fc <safecalloc>
   16dec:	9c 83       	std	Y+4, r25	; 0x04
            Devices[ind].state = safecalloc(sizeof(SS80StateType)+7,1);
   16dee:	8b 83       	std	Y+3, r24	; 0x03
   16df0:	61 e0       	ldi	r22, 0x01	; 1
   16df2:	70 e0       	ldi	r23, 0x00	; 0
   16df4:	86 e1       	ldi	r24, 0x16	; 22
            break;
#ifdef AMIGO
        case AMIGO_TYPE:
            Devices[ind].TYPE = type;
            Devices[ind].dev = safecalloc(sizeof(AMIGODiskType)+7,1);
            Devices[ind].state = safecalloc(sizeof(AMIGOStateType)+7,1);
   16df6:	90 e0       	ldi	r25, 0x00	; 0
   16df8:	0e 94 7e 29 	call	0x52fc	; 0x52fc <safecalloc>
   16dfc:	9e 83       	std	Y+6, r25	; 0x06
            index = ind;
            break;
   16dfe:	8d 83       	std	Y+5, r24	; 0x05
#endif
        case PRINTER_TYPE:
            Devices[ind].TYPE = type;
   16e00:	30 c0       	rjmp	.+96     	; 0x16e62 <alloc_device+0x114>
   16e02:	87 e0       	ldi	r24, 0x07	; 7
   16e04:	80 9f       	mul	r24, r16
   16e06:	e0 01       	movw	r28, r0
   16e08:	81 9f       	mul	r24, r17
   16e0a:	d0 0d       	add	r29, r0
   16e0c:	11 24       	eor	r1, r1
   16e0e:	cb 55       	subi	r28, 0x5B	; 91
   16e10:	d1 4e       	sbci	r29, 0xE1	; 225
   16e12:	83 e0       	ldi	r24, 0x03	; 3
            Devices[ind].dev = safecalloc(sizeof(PRINTERDeviceType)+7,1);
   16e14:	88 83       	st	Y, r24
   16e16:	61 e0       	ldi	r22, 0x01	; 1
   16e18:	70 e0       	ldi	r23, 0x00	; 0
   16e1a:	8a e2       	ldi	r24, 0x2A	; 42
   16e1c:	90 e0       	ldi	r25, 0x00	; 0
   16e1e:	0e 94 7e 29 	call	0x52fc	; 0x52fc <safecalloc>
   16e22:	9c 83       	std	Y+4, r25	; 0x04
            Devices[ind].state = NULL;
   16e24:	8b 83       	std	Y+3, r24	; 0x03
   16e26:	1e 82       	std	Y+6, r1	; 0x06
            index = ind;
            break;
   16e28:	1d 82       	std	Y+5, r1	; 0x05
        default:
            if(debuglevel & 1)
   16e2a:	1b c0       	rjmp	.+54     	; 0x16e62 <alloc_device+0x114>
   16e2c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
                printf("alloc_device: invalid type:%d:%s\n", type,type_to_str(type));
   16e30:	80 ff       	sbrs	r24, 0
   16e32:	15 c0       	rjmp	.+42     	; 0x16e5e <alloc_device+0x110>
   16e34:	ce 01       	movw	r24, r28
   16e36:	39 de       	rcall	.-910    	; 0x16aaa <type_to_str>
   16e38:	9f 93       	push	r25
   16e3a:	8f 93       	push	r24
   16e3c:	df 93       	push	r29
   16e3e:	cf 93       	push	r28
   16e40:	8b eb       	ldi	r24, 0xBB	; 187
   16e42:	90 e3       	ldi	r25, 0x30	; 48
   16e44:	1f 92       	push	r1
   16e46:	9f 93       	push	r25
   16e48:	8f 93       	push	r24
   16e4a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   16e4e:	8d b7       	in	r24, 0x3d	; 61
   16e50:	9e b7       	in	r25, 0x3e	; 62
   16e52:	07 96       	adiw	r24, 0x07	; 7
   16e54:	0f b6       	in	r0, 0x3f	; 63
   16e56:	f8 94       	cli
   16e58:	9e bf       	out	0x3e, r25	; 62
   16e5a:	0f be       	out	0x3f, r0	; 63
   16e5c:	8d bf       	out	0x3d, r24	; 61
            break;
    }
    return(index);
}
   16e5e:	0f ef       	ldi	r16, 0xFF	; 255
   16e60:	1f ef       	ldi	r17, 0xFF	; 255
   16e62:	c8 01       	movw	r24, r16
   16e64:	df 91       	pop	r29
   16e66:	cf 91       	pop	r28
   16e68:	1f 91       	pop	r17
   16e6a:	0f 91       	pop	r16
   16e6c:	08 95       	ret

00016e6e <init_Devices>:
/// @brief Init Config Parser Stack
/// Called only durring power up so we do not have to free memory
void init_Devices()
{
    int i;
    stack_ind = 0;
   16e6e:	10 92 61 19 	sts	0x1961, r1	; 0x801961 <stack_ind+0x1>
   16e72:	10 92 60 19 	sts	0x1960, r1	; 0x801960 <stack_ind>
   16e76:	e5 ea       	ldi	r30, 0xA5	; 165
   16e78:	fe e1       	ldi	r31, 0x1E	; 30
    for(i=0;i<MAX_DEVICES;++i)
    {
        Devices[i].TYPE = NO_TYPE;
        Devices[i].ADDRESS = 0;
        Devices[i].PPR = 0xff;
   16e7a:	8f ef       	ldi	r24, 0xFF	; 255
{
    int i;
    stack_ind = 0;
    for(i=0;i<MAX_DEVICES;++i)
    {
        Devices[i].TYPE = NO_TYPE;
   16e7c:	10 82       	st	Z, r1
        Devices[i].ADDRESS = 0;
   16e7e:	11 82       	std	Z+1, r1	; 0x01
        Devices[i].PPR = 0xff;
   16e80:	82 83       	std	Z+2, r24	; 0x02
        Devices[i].dev = NULL;
   16e82:	14 82       	std	Z+4, r1	; 0x04
   16e84:	13 82       	std	Z+3, r1	; 0x03
        Devices[i].state = NULL;
   16e86:	16 82       	std	Z+6, r1	; 0x06
   16e88:	15 82       	std	Z+5, r1	; 0x05
   16e8a:	37 96       	adiw	r30, 0x07	; 7
/// Called only durring power up so we do not have to free memory
void init_Devices()
{
    int i;
    stack_ind = 0;
    for(i=0;i<MAX_DEVICES;++i)
   16e8c:	9e e1       	ldi	r25, 0x1E	; 30
   16e8e:	ed 3d       	cpi	r30, 0xDD	; 221
   16e90:	f9 07       	cpc	r31, r25
   16e92:	a1 f7       	brne	.-24     	; 0x16e7c <init_Devices+0xe>
        Devices[i].ADDRESS = 0;
        Devices[i].PPR = 0xff;
        Devices[i].dev = NULL;
        Devices[i].state = NULL;
    }
}
   16e94:	08 95       	ret

00016e96 <push_state>:
/// @brief Push Parser State
/// @param state: parser state
/// @return state
int push_state(int state)
{
    if(stack_ind < MAX_STACK)
   16e96:	20 91 60 19 	lds	r18, 0x1960	; 0x801960 <stack_ind>
   16e9a:	30 91 61 19 	lds	r19, 0x1961	; 0x801961 <stack_ind+0x1>
   16e9e:	25 30       	cpi	r18, 0x05	; 5
   16ea0:	31 05       	cpc	r19, r1
   16ea2:	7c f4       	brge	.+30     	; 0x16ec2 <push_state+0x2c>
        stack_p[stack_ind++] = state;
   16ea4:	a9 01       	movw	r20, r18
   16ea6:	4f 5f       	subi	r20, 0xFF	; 255
   16ea8:	5f 4f       	sbci	r21, 0xFF	; 255
   16eaa:	50 93 61 19 	sts	0x1961, r21	; 0x801961 <stack_ind+0x1>
   16eae:	40 93 60 19 	sts	0x1960, r20	; 0x801960 <stack_ind>
   16eb2:	22 0f       	add	r18, r18
   16eb4:	33 1f       	adc	r19, r19
   16eb6:	f9 01       	movw	r30, r18
   16eb8:	ea 5a       	subi	r30, 0xAA	; 170
   16eba:	f6 4e       	sbci	r31, 0xE6	; 230
   16ebc:	80 83       	st	Z, r24
   16ebe:	91 83       	std	Z+1, r25	; 0x01
    else
        return(START_STATE);
    return(state);
   16ec0:	08 95       	ret
int push_state(int state)
{
    if(stack_ind < MAX_STACK)
        stack_p[stack_ind++] = state;
    else
        return(START_STATE);
   16ec2:	80 e0       	ldi	r24, 0x00	; 0
   16ec4:	90 e0       	ldi	r25, 0x00	; 0
    return(state);
}
   16ec6:	08 95       	ret

00016ec8 <pop_state>:

/// @brief Pop Parser State
/// @return state
int pop_state()
{
    if(stack_ind > 0)
   16ec8:	80 91 60 19 	lds	r24, 0x1960	; 0x801960 <stack_ind>
   16ecc:	90 91 61 19 	lds	r25, 0x1961	; 0x801961 <stack_ind+0x1>
   16ed0:	18 16       	cp	r1, r24
   16ed2:	19 06       	cpc	r1, r25
   16ed4:	6c f4       	brge	.+26     	; 0x16ef0 <pop_state+0x28>
        return(stack_p[--stack_ind]);
   16ed6:	01 97       	sbiw	r24, 0x01	; 1
   16ed8:	90 93 61 19 	sts	0x1961, r25	; 0x801961 <stack_ind+0x1>
   16edc:	80 93 60 19 	sts	0x1960, r24	; 0x801960 <stack_ind>
   16ee0:	88 0f       	add	r24, r24
   16ee2:	99 1f       	adc	r25, r25
   16ee4:	fc 01       	movw	r30, r24
   16ee6:	ea 5a       	subi	r30, 0xAA	; 170
   16ee8:	f6 4e       	sbci	r31, 0xE6	; 230
   16eea:	80 81       	ld	r24, Z
   16eec:	91 81       	ldd	r25, Z+1	; 0x01
   16eee:	08 95       	ret
    else
        return(START_STATE);
   16ef0:	80 e0       	ldi	r24, 0x00	; 0
   16ef2:	90 e0       	ldi	r25, 0x00	; 0
}
   16ef4:	08 95       	ret

00016ef6 <assign_value>:
/// @param[in] maxval: maximum value
/// @param[in] *val: value to set
///
/// @return  1 is matched and value in range, 0 not matched or out of range
uint32_t assign_value(char *str, uint32_t minval, uint32_t maxval, uint32_t *val)
{
   16ef6:	a0 e0       	ldi	r26, 0x00	; 0
   16ef8:	b0 e0       	ldi	r27, 0x00	; 0
   16efa:	e1 e8       	ldi	r30, 0x81	; 129
   16efc:	f7 eb       	ldi	r31, 0xB7	; 183
   16efe:	0c 94 c3 e8 	jmp	0x1d186	; 0x1d186 <__prologue_saves__+0x4>
   16f02:	2a 01       	movw	r4, r20
   16f04:	3b 01       	movw	r6, r22
   16f06:	48 01       	movw	r8, r16
   16f08:	59 01       	movw	r10, r18
   16f0a:	87 01       	movw	r16, r14
    uint32_t tmp;
    int bad = 0;
    char *ptr;

    // Skip spaces before assignment
    ptr = skipspaces(str);
   16f0c:	0e 94 77 30 	call	0x60ee	; 0x60ee <skipspaces>
   16f10:	ec 01       	movw	r28, r24
    // Skip optional '='
    if(*ptr == '=')
   16f12:	88 81       	ld	r24, Y
   16f14:	8d 33       	cpi	r24, 0x3D	; 61
   16f16:	29 f4       	brne	.+10     	; 0x16f22 <assign_value+0x2c>
    {
        ++ptr;
        // skip spaces after assignment
        ptr = skipspaces(ptr);
   16f18:	ce 01       	movw	r24, r28
   16f1a:	01 96       	adiw	r24, 0x01	; 1
   16f1c:	0e 94 77 30 	call	0x60ee	; 0x60ee <skipspaces>
   16f20:	ec 01       	movw	r28, r24
    }
    if(!*ptr)
   16f22:	88 81       	ld	r24, Y
   16f24:	81 11       	cpse	r24, r1
   16f26:	17 c0       	rjmp	.+46     	; 0x16f56 <assign_value+0x60>
    {
        if(debuglevel & 1)
   16f28:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   16f2c:	80 ff       	sbrs	r24, 0
   16f2e:	7a c0       	rjmp	.+244    	; 0x17024 <assign_value+0x12e>
            printf("line:%d, missing value\n", lines);
   16f30:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <lines+0x1>
   16f34:	8f 93       	push	r24
   16f36:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <lines>
   16f3a:	8f 93       	push	r24
   16f3c:	83 ea       	ldi	r24, 0xA3	; 163
   16f3e:	90 e3       	ldi	r25, 0x30	; 48
   16f40:	1f 92       	push	r1
   16f42:	9f 93       	push	r25
   16f44:	8f 93       	push	r24
   16f46:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   16f4a:	0f 90       	pop	r0
   16f4c:	0f 90       	pop	r0
   16f4e:	0f 90       	pop	r0
   16f50:	0f 90       	pop	r0
   16f52:	0f 90       	pop	r0
   16f54:	67 c0       	rjmp	.+206    	; 0x17024 <assign_value+0x12e>
        bad = 1;
    }
    if(!bad)
    {
        // FIXME detect bad numbers
        tmp = get_value(ptr);
   16f56:	ce 01       	movw	r24, r28
   16f58:	0e 94 e3 31 	call	0x63c6	; 0x63c6 <get_value>
   16f5c:	6b 01       	movw	r12, r22
   16f5e:	7c 01       	movw	r14, r24
        *val = tmp;
   16f60:	f8 01       	movw	r30, r16
   16f62:	60 83       	st	Z, r22
   16f64:	71 83       	std	Z+1, r23	; 0x01
   16f66:	82 83       	std	Z+2, r24	; 0x02
   16f68:	93 83       	std	Z+3, r25	; 0x03
        if((minval && (tmp < minval)))
   16f6a:	41 14       	cp	r4, r1
   16f6c:	51 04       	cpc	r5, r1
   16f6e:	61 04       	cpc	r6, r1
   16f70:	71 04       	cpc	r7, r1
   16f72:	39 f1       	breq	.+78     	; 0x16fc2 <assign_value+0xcc>
   16f74:	c4 14       	cp	r12, r4
   16f76:	d5 04       	cpc	r13, r5
   16f78:	e6 04       	cpc	r14, r6
   16f7a:	f7 04       	cpc	r15, r7
   16f7c:	10 f5       	brcc	.+68     	; 0x16fc2 <assign_value+0xcc>
        {
            printf("line:%d, %s is below range %d\n", lines, ptr,(int)minval);
   16f7e:	5f 92       	push	r5
   16f80:	4f 92       	push	r4
   16f82:	df 93       	push	r29
   16f84:	cf 93       	push	r28
   16f86:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <lines+0x1>
   16f8a:	8f 93       	push	r24
   16f8c:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <lines>
   16f90:	8f 93       	push	r24
   16f92:	84 e8       	ldi	r24, 0x84	; 132
   16f94:	90 e3       	ldi	r25, 0x30	; 48
   16f96:	1f 92       	push	r1
   16f98:	9f 93       	push	r25
   16f9a:	8f 93       	push	r24
   16f9c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
            bad = 1;
        }
        if((maxval != 0xffffffffUL) && (tmp > maxval))
   16fa0:	ed b7       	in	r30, 0x3d	; 61
   16fa2:	fe b7       	in	r31, 0x3e	; 62
   16fa4:	39 96       	adiw	r30, 0x09	; 9
   16fa6:	0f b6       	in	r0, 0x3f	; 63
   16fa8:	f8 94       	cli
   16faa:	fe bf       	out	0x3e, r31	; 62
   16fac:	0f be       	out	0x3f, r0	; 63
   16fae:	ed bf       	out	0x3d, r30	; 61
   16fb0:	ff ef       	ldi	r31, 0xFF	; 255
   16fb2:	8f 16       	cp	r8, r31
   16fb4:	9f 06       	cpc	r9, r31
   16fb6:	af 06       	cpc	r10, r31
   16fb8:	bf 06       	cpc	r11, r31
   16fba:	a1 f1       	breq	.+104    	; 0x17024 <assign_value+0x12e>
        tmp = get_value(ptr);
        *val = tmp;
        if((minval && (tmp < minval)))
        {
            printf("line:%d, %s is below range %d\n", lines, ptr,(int)minval);
            bad = 1;
   16fbc:	61 e0       	ldi	r22, 0x01	; 1
   16fbe:	70 e0       	ldi	r23, 0x00	; 0
   16fc0:	08 c0       	rjmp	.+16     	; 0x16fd2 <assign_value+0xdc>
        }
        if((maxval != 0xffffffffUL) && (tmp > maxval))
   16fc2:	ff ef       	ldi	r31, 0xFF	; 255
   16fc4:	8f 16       	cp	r8, r31
   16fc6:	9f 06       	cpc	r9, r31
   16fc8:	af 06       	cpc	r10, r31
   16fca:	bf 06       	cpc	r11, r31
   16fcc:	31 f1       	breq	.+76     	; 0x1701a <assign_value+0x124>
   16fce:	60 e0       	ldi	r22, 0x00	; 0
   16fd0:	70 e0       	ldi	r23, 0x00	; 0
   16fd2:	8c 14       	cp	r8, r12
   16fd4:	9d 04       	cpc	r9, r13
   16fd6:	ae 04       	cpc	r10, r14
   16fd8:	bf 04       	cpc	r11, r15
   16fda:	d0 f4       	brcc	.+52     	; 0x17010 <assign_value+0x11a>
        {
            printf("line:%d, %s is above range %d\n", lines, ptr,(int)maxval);
   16fdc:	9f 92       	push	r9
   16fde:	8f 92       	push	r8
   16fe0:	df 93       	push	r29
   16fe2:	cf 93       	push	r28
   16fe4:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <lines+0x1>
   16fe8:	8f 93       	push	r24
   16fea:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <lines>
   16fee:	8f 93       	push	r24
   16ff0:	85 e6       	ldi	r24, 0x65	; 101
   16ff2:	90 e3       	ldi	r25, 0x30	; 48
   16ff4:	1f 92       	push	r1
   16ff6:	9f 93       	push	r25
   16ff8:	8f 93       	push	r24
   16ffa:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   16ffe:	ed b7       	in	r30, 0x3d	; 61
   17000:	fe b7       	in	r31, 0x3e	; 62
   17002:	39 96       	adiw	r30, 0x09	; 9
   17004:	0f b6       	in	r0, 0x3f	; 63
   17006:	f8 94       	cli
   17008:	fe bf       	out	0x3e, r31	; 62
   1700a:	0f be       	out	0x3f, r0	; 63
   1700c:	ed bf       	out	0x3d, r30	; 61
   1700e:	0a c0       	rjmp	.+20     	; 0x17024 <assign_value+0x12e>
            bad = 1;
        }
    }
    if(bad)
        return(0);
   17010:	f1 e0       	ldi	r31, 0x01	; 1
   17012:	6f 27       	eor	r22, r31
   17014:	80 e0       	ldi	r24, 0x00	; 0
   17016:	90 e0       	ldi	r25, 0x00	; 0
   17018:	08 c0       	rjmp	.+16     	; 0x1702a <assign_value+0x134>
    return(1);
   1701a:	61 e0       	ldi	r22, 0x01	; 1
   1701c:	70 e0       	ldi	r23, 0x00	; 0
   1701e:	80 e0       	ldi	r24, 0x00	; 0
   17020:	90 e0       	ldi	r25, 0x00	; 0
   17022:	03 c0       	rjmp	.+6      	; 0x1702a <assign_value+0x134>
            printf("line:%d, %s is above range %d\n", lines, ptr,(int)maxval);
            bad = 1;
        }
    }
    if(bad)
        return(0);
   17024:	60 e0       	ldi	r22, 0x00	; 0
   17026:	70 e0       	ldi	r23, 0x00	; 0
   17028:	cb 01       	movw	r24, r22
    return(1);
}
   1702a:	cd b7       	in	r28, 0x3d	; 61
   1702c:	de b7       	in	r29, 0x3e	; 62
   1702e:	e0 e1       	ldi	r30, 0x10	; 16
   17030:	0c 94 df e8 	jmp	0x1d1be	; 0x1d1be <__epilogue_restores__+0x4>

00017034 <set_Config_Defaults>:

///@brief Set Defaults for any missing disk or printer devices
/// These are only used if the Config file omits them or is empty
/// @return  void
void set_Config_Defaults()
{
   17034:	08 95       	ret

00017036 <POSIX_Read_Config>:
/// Set all drive parameters and debuglevel 
///
/// @param name: config file name to process
/// @return  number of parse errors
int POSIX_Read_Config(char *name)
{
   17036:	aa e9       	ldi	r26, 0x9A	; 154
   17038:	b0 e0       	ldi	r27, 0x00	; 0
   1703a:	e1 e2       	ldi	r30, 0x21	; 33
   1703c:	f8 eb       	ldi	r31, 0xB8	; 184
   1703e:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__prologue_saves__>
   17042:	d8 2e       	mov	r13, r24
#endif

    char *ptr;
    char str[128];

    init_Devices();
   17044:	c9 2e       	mov	r12, r25

    lines = 0;
   17046:	13 df       	rcall	.-474    	; 0x16e6e <init_Devices>
   17048:	10 92 4b 19 	sts	0x194B, r1	; 0x80194b <lines+0x1>
   1704c:	10 92 4a 19 	sts	0x194A, r1	; 0x80194a <lines>

    printf("Reading: %s\n", name);
   17050:	cf 92       	push	r12
   17052:	df 92       	push	r13
   17054:	88 e5       	ldi	r24, 0x58	; 88
   17056:	90 e3       	ldi	r25, 0x30	; 48
   17058:	1f 92       	push	r1
   1705a:	9f 93       	push	r25
   1705c:	8f 93       	push	r24
   1705e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    cfg = fopen(name, "rb");
   17062:	6b e5       	ldi	r22, 0x5B	; 91
   17064:	78 e0       	ldi	r23, 0x08	; 8
   17066:	8d 2d       	mov	r24, r13
   17068:	9c 2d       	mov	r25, r12
   1706a:	0e 94 d2 81 	call	0x103a4	; 0x103a4 <fopen>
   1706e:	c9 57       	subi	r28, 0x79	; 121
   17070:	df 4f       	sbci	r29, 0xFF	; 255
   17072:	99 83       	std	Y+1, r25	; 0x01
   17074:	88 83       	st	Y, r24
   17076:	c7 58       	subi	r28, 0x87	; 135
    if(cfg == NULL)
   17078:	d0 40       	sbci	r29, 0x00	; 0
   1707a:	0f 90       	pop	r0
   1707c:	0f 90       	pop	r0
   1707e:	0f 90       	pop	r0
   17080:	0f 90       	pop	r0
   17082:	0f 90       	pop	r0
   17084:	89 2b       	or	r24, r25
   17086:	09 f4       	brne	.+2      	; 0x1708a <POSIX_Read_Config+0x54>
   17088:	53 c0       	rjmp	.+166    	; 0x17130 <POSIX_Read_Config+0xfa>
   1708a:	21 2c       	mov	r2, r1
   1708c:	31 2c       	mov	r3, r1
   1708e:	41 2c       	mov	r4, r1
   17090:	51 2c       	mov	r5, r1
   17092:	cb 57       	subi	r28, 0x7B	; 123
   17094:	df 4f       	sbci	r29, 0xFF	; 255
   17096:	19 82       	std	Y+1, r1	; 0x01
   17098:	18 82       	st	Y, r1
   1709a:	c5 58       	subi	r28, 0x85	; 133
   1709c:	d0 40       	sbci	r29, 0x00	; 0
   1709e:	61 2c       	mov	r6, r1
   170a0:	71 2c       	mov	r7, r1
   170a2:	a1 2c       	mov	r10, r1
   170a4:	b1 2c       	mov	r11, r1
   170a6:	81 2c       	mov	r8, r1
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   170a8:	91 2c       	mov	r9, r1
   170aa:	81 e9       	ldi	r24, 0x91	; 145
   170ac:	9d e2       	ldi	r25, 0x2D	; 45
   170ae:	9c 01       	movw	r18, r24
   170b0:	40 e0       	ldi	r20, 0x00	; 0
   170b2:	c7 57       	subi	r28, 0x77	; 119
   170b4:	df 4f       	sbci	r29, 0xFF	; 255
   170b6:	28 83       	st	Y, r18
   170b8:	39 83       	std	Y+1, r19	; 0x01
   170ba:	4a 83       	std	Y+2, r20	; 0x02
   170bc:	c9 58       	subi	r28, 0x89	; 137
                    ++errors;
                AMIGOp->GEOMETRY.CYLINDERS = val;
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   170be:	d0 40       	sbci	r29, 0x00	; 0
   170c0:	83 eb       	ldi	r24, 0xB3	; 179
   170c2:	9d e2       	ldi	r25, 0x2D	; 45
   170c4:	9c 01       	movw	r18, r24
   170c6:	40 e0       	ldi	r20, 0x00	; 0
   170c8:	c4 57       	subi	r28, 0x74	; 116
   170ca:	df 4f       	sbci	r29, 0xFF	; 255
   170cc:	28 83       	st	Y, r18
   170ce:	39 83       	std	Y+1, r19	; 0x01
   170d0:	4a 83       	std	Y+2, r20	; 0x02
   170d2:	cc 58       	subi	r28, 0x8C	; 140
                    ++errors;
                AMIGOp->CONFIG.ID = val;
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   170d4:	d0 40       	sbci	r29, 0x00	; 0
   170d6:	83 ee       	ldi	r24, 0xE3	; 227
   170d8:	9d e2       	ldi	r25, 0x2D	; 45
   170da:	9c 01       	movw	r18, r24
   170dc:	40 e0       	ldi	r20, 0x00	; 0
   170de:	c1 57       	subi	r28, 0x71	; 113
   170e0:	df 4f       	sbci	r29, 0xFF	; 255
   170e2:	28 83       	st	Y, r18
   170e4:	39 83       	std	Y+1, r19	; 0x01
   170e6:	4a 83       	std	Y+2, r20	; 0x02
   170e8:	cf 58       	subi	r28, 0x8F	; 143
                strncpy(AMIGOp->HEADER.NAME,ptr, MAX_FILE_NAME_LEN-1);
                AMIGOp->HEADER.NAME[MAX_FILE_NAME_LEN-1] = 0;
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   170ea:	d0 40       	sbci	r29, 0x00	; 0
   170ec:	82 e1       	ldi	r24, 0x12	; 18
   170ee:	9e e2       	ldi	r25, 0x2E	; 46
   170f0:	9c 01       	movw	r18, r24
   170f2:	40 e0       	ldi	r20, 0x00	; 0
   170f4:	ce 56       	subi	r28, 0x6E	; 110
   170f6:	df 4f       	sbci	r29, 0xFF	; 255
   170f8:	28 83       	st	Y, r18
   170fa:	39 83       	std	Y+1, r19	; 0x01
   170fc:	4a 83       	std	Y+2, r20	; 0x02
   170fe:	c2 59       	subi	r28, 0x92	; 146

        case AMIGO_HEADER:
            if( (ind = token(ptr,"DRIVE")) )
            {
                ptr += ind;
                printf("Skipping %s, at line:%d\n", ptr,lines);
   17100:	d0 40       	sbci	r29, 0x00	; 0
   17102:	82 e4       	ldi	r24, 0x42	; 66
   17104:	9e e2       	ldi	r25, 0x2E	; 46
   17106:	9c 01       	movw	r18, r24
   17108:	40 e0       	ldi	r20, 0x00	; 0
   1710a:	cb 56       	subi	r28, 0x6B	; 107
   1710c:	df 4f       	sbci	r29, 0xFF	; 255
   1710e:	28 83       	st	Y, r18
   17110:	39 83       	std	Y+1, r19	; 0x01
   17112:	4a 83       	std	Y+2, r20	; 0x02
   17114:	c5 59       	subi	r28, 0x95	; 149
                push_state(state);
                state = AMIGO_GEOMETRY;
            }
            else
            {
                printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   17116:	d0 40       	sbci	r29, 0x00	; 0
   17118:	8b e5       	ldi	r24, 0x5B	; 91
   1711a:	9e e2       	ldi	r25, 0x2E	; 46
   1711c:	9c 01       	movw	r18, r24
   1711e:	40 e0       	ldi	r20, 0x00	; 0
   17120:	c8 56       	subi	r28, 0x68	; 104
   17122:	df 4f       	sbci	r29, 0xFF	; 255
   17124:	28 83       	st	Y, r18
   17126:	39 83       	std	Y+1, r19	; 0x01
   17128:	4a 83       	std	Y+2, r20	; 0x02
   1712a:	c8 59       	subi	r28, 0x98	; 152
   1712c:	d0 40       	sbci	r29, 0x00	; 0
    cfg = fopen(name, "rb");
    if(cfg == NULL)
    {
        ++errors;
        //FIXME
        perror("Read_Config - open");
   1712e:	2f c0       	rjmp	.+94     	; 0x1718e <POSIX_Read_Config+0x158>
   17130:	84 ec       	ldi	r24, 0xC4	; 196
   17132:	93 e1       	ldi	r25, 0x13	; 19
   17134:	0e 94 a8 7b 	call	0xf750	; 0xf750 <perror>
        printf("Read_Config: open(%s) failed\n", name);
   17138:	cf 92       	push	r12
   1713a:	df 92       	push	r13
   1713c:	8a e3       	ldi	r24, 0x3A	; 58
   1713e:	90 e3       	ldi	r25, 0x30	; 48
   17140:	1f 92       	push	r1
   17142:	9f 93       	push	r25
   17144:	8f 93       	push	r24
   17146:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        set_Config_Defaults();
        return(errors);
   1714a:	0f 90       	pop	r0
   1714c:	0f 90       	pop	r0
   1714e:	0f 90       	pop	r0
   17150:	0f 90       	pop	r0
   17152:	0f 90       	pop	r0
   17154:	81 e0       	ldi	r24, 0x01	; 1
   17156:	90 e0       	ldi	r25, 0x00	; 0
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
    {
        ++lines;
   17158:	db c7       	rjmp	.+4022   	; 0x18110 <POSIX_Read_Config+0x10da>
   1715a:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <lines>
   1715e:	90 91 4b 19 	lds	r25, 0x194B	; 0x80194b <lines+0x1>
   17162:	01 96       	adiw	r24, 0x01	; 1
   17164:	90 93 4b 19 	sts	0x194B, r25	; 0x80194b <lines+0x1>
   17168:	80 93 4a 19 	sts	0x194A, r24	; 0x80194a <lines>

        ptr = str;

        trim_tail(ptr);
   1716c:	ce 01       	movw	r24, r28
   1716e:	01 96       	adiw	r24, 0x01	; 1
   17170:	0e 94 69 30 	call	0x60d2	; 0x60d2 <trim_tail>
        ptr = skipspaces(ptr);
   17174:	ce 01       	movw	r24, r28
   17176:	01 96       	adiw	r24, 0x01	; 1
   17178:	0e 94 77 30 	call	0x60ee	; 0x60ee <skipspaces>
        len = strlen(ptr);
   1717c:	6c 01       	movw	r12, r24
   1717e:	fc 01       	movw	r30, r24
   17180:	01 90       	ld	r0, Z+
   17182:	00 20       	and	r0, r0
   17184:	e9 f7       	brne	.-6      	; 0x17180 <POSIX_Read_Config+0x14a>
        if(!len)
   17186:	31 97       	sbiw	r30, 0x01	; 1
   17188:	8e 17       	cp	r24, r30
   1718a:	9f 07       	cpc	r25, r31
        printf("Read_Config: open(%s) failed\n", name);
        set_Config_Defaults();
        return(errors);
    }

    while( (ptr = fgets(str, sizeof(str)-2, cfg)) != NULL)
   1718c:	79 f4       	brne	.+30     	; 0x171ac <POSIX_Read_Config+0x176>
   1718e:	c9 57       	subi	r28, 0x79	; 121
   17190:	df 4f       	sbci	r29, 0xFF	; 255
   17192:	48 81       	ld	r20, Y
   17194:	59 81       	ldd	r21, Y+1	; 0x01
   17196:	c7 58       	subi	r28, 0x87	; 135
   17198:	d0 40       	sbci	r29, 0x00	; 0
   1719a:	6e e7       	ldi	r22, 0x7E	; 126
   1719c:	70 e0       	ldi	r23, 0x00	; 0
   1719e:	ce 01       	movw	r24, r28
   171a0:	01 96       	adiw	r24, 0x01	; 1
   171a2:	0e 94 e2 78 	call	0xf1c4	; 0xf1c4 <fgets>
   171a6:	89 2b       	or	r24, r25
   171a8:	c1 f6       	brne	.-80     	; 0x1715a <POSIX_Read_Config+0x124>
        ptr = skipspaces(ptr);
        len = strlen(ptr);
        if(!len)
            continue;
        // Skip comments
        if(*ptr == '#')
   171aa:	65 c7       	rjmp	.+3786   	; 0x18076 <POSIX_Read_Config+0x1040>
   171ac:	dc 01       	movw	r26, r24
   171ae:	8c 91       	ld	r24, X
   171b0:	83 32       	cpi	r24, 0x23	; 35
            continue;

        //FIXME check for state and last state
        if(token(ptr,"END"))
   171b2:	69 f3       	breq	.-38     	; 0x1718e <POSIX_Read_Config+0x158>
   171b4:	67 ed       	ldi	r22, 0xD7	; 215
   171b6:	73 e1       	ldi	r23, 0x13	; 19
   171b8:	c6 01       	movw	r24, r12
   171ba:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
        {
            state = pop_state();
   171be:	89 2b       	or	r24, r25
   171c0:	19 f0       	breq	.+6      	; 0x171c8 <POSIX_Read_Config+0x192>
   171c2:	82 de       	rcall	.-764    	; 0x16ec8 <pop_state>
            continue;
   171c4:	4c 01       	movw	r8, r24
        }

        switch(state)
   171c6:	e3 cf       	rjmp	.-58     	; 0x1718e <POSIX_Read_Config+0x158>
   171c8:	bd e0       	ldi	r27, 0x0D	; 13
   171ca:	8b 16       	cp	r8, r27
   171cc:	91 04       	cpc	r9, r1
   171ce:	08 f0       	brcs	.+2      	; 0x171d2 <POSIX_Read_Config+0x19c>
   171d0:	32 c7       	rjmp	.+3684   	; 0x18036 <POSIX_Read_Config+0x1000>
   171d2:	f4 01       	movw	r30, r8
   171d4:	e5 52       	subi	r30, 0x25	; 37
   171d6:	ff 4f       	sbci	r31, 0xFF	; 255
   171d8:	0c 94 92 e8 	jmp	0x1d124	; 0x1d124 <__tablejump2__>
        {
        case START_STATE:
            if(token(ptr,"SS80"))
   171dc:	6b ed       	ldi	r22, 0xDB	; 219
   171de:	73 e1       	ldi	r23, 0x13	; 19
   171e0:	c6 01       	movw	r24, r12
   171e2:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
            {
                push_state(state);
   171e6:	89 2b       	or	r24, r25
   171e8:	b9 f0       	breq	.+46     	; 0x17218 <POSIX_Read_Config+0x1e2>
                state = SS80_STATE;
                index = alloc_device(SS80_TYPE);
   171ea:	80 e0       	ldi	r24, 0x00	; 0
   171ec:	90 e0       	ldi	r25, 0x00	; 0
   171ee:	53 de       	rcall	.-858    	; 0x16e96 <push_state>
   171f0:	82 e0       	ldi	r24, 0x02	; 2
   171f2:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   171f4:	ac dd       	rcall	.-1192   	; 0x16d4e <alloc_device>
   171f6:	3c 01       	movw	r6, r24
                    state = START_STATE;
                else
                    SS80p = (SS80DiskType *) Devices[index].dev;
   171f8:	01 96       	adiw	r24, 0x01	; 1
   171fa:	49 f2       	breq	.-110    	; 0x1718e <POSIX_Read_Config+0x158>
   171fc:	87 e0       	ldi	r24, 0x07	; 7
   171fe:	86 9d       	mul	r24, r6
   17200:	f0 01       	movw	r30, r0
   17202:	87 9d       	mul	r24, r7
   17204:	f0 0d       	add	r31, r0
   17206:	11 24       	eor	r1, r1
   17208:	eb 55       	subi	r30, 0x5B	; 91
   1720a:	f1 4e       	sbci	r31, 0xE1	; 225
        {
        case START_STATE:
            if(token(ptr,"SS80"))
            {
                push_state(state);
                state = SS80_STATE;
   1720c:	43 80       	ldd	r4, Z+3	; 0x03
   1720e:	54 80       	ldd	r5, Z+4	; 0x04
   17210:	88 24       	eor	r8, r8
   17212:	83 94       	inc	r8
                    state = START_STATE;
                else
                    SS80p = (SS80DiskType *) Devices[index].dev;
            }
#ifdef AMIGO
            else if(token(ptr,"AMIGO"))
   17214:	91 2c       	mov	r9, r1
   17216:	bb cf       	rjmp	.-138    	; 0x1718e <POSIX_Read_Config+0x158>
   17218:	60 ee       	ldi	r22, 0xE0	; 224
   1721a:	73 e1       	ldi	r23, 0x13	; 19
   1721c:	c6 01       	movw	r24, r12
   1721e:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
            {
                push_state(state);
   17222:	89 2b       	or	r24, r25
   17224:	c1 f0       	breq	.+48     	; 0x17256 <POSIX_Read_Config+0x220>
                state = AMIGO_STATE;
                index = alloc_device(AMIGO_TYPE);
   17226:	80 e0       	ldi	r24, 0x00	; 0
   17228:	90 e0       	ldi	r25, 0x00	; 0
   1722a:	35 de       	rcall	.-918    	; 0x16e96 <push_state>
   1722c:	81 e0       	ldi	r24, 0x01	; 1
   1722e:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   17230:	8e dd       	rcall	.-1252   	; 0x16d4e <alloc_device>
   17232:	3c 01       	movw	r6, r24
   17234:	01 96       	adiw	r24, 0x01	; 1
                    state = START_STATE;
                else
                    AMIGOp = (AMIGODiskType *) Devices[index].dev;
   17236:	09 f4       	brne	.+2      	; 0x1723a <POSIX_Read_Config+0x204>
   17238:	aa cf       	rjmp	.-172    	; 0x1718e <POSIX_Read_Config+0x158>
   1723a:	87 e0       	ldi	r24, 0x07	; 7
   1723c:	86 9d       	mul	r24, r6
   1723e:	f0 01       	movw	r30, r0
   17240:	87 9d       	mul	r24, r7
   17242:	f0 0d       	add	r31, r0
   17244:	11 24       	eor	r1, r1
   17246:	eb 55       	subi	r30, 0x5B	; 91
   17248:	f1 4e       	sbci	r31, 0xE1	; 225
            }
#ifdef AMIGO
            else if(token(ptr,"AMIGO"))
            {
                push_state(state);
                state = AMIGO_STATE;
   1724a:	23 80       	ldd	r2, Z+3	; 0x03
   1724c:	34 80       	ldd	r3, Z+4	; 0x04
   1724e:	a7 e0       	ldi	r26, 0x07	; 7
   17250:	8a 2e       	mov	r8, r26
                else
                    AMIGOp = (AMIGODiskType *) Devices[index].dev;

            }
#endif
            else if(token(ptr,"PRINTER"))
   17252:	91 2c       	mov	r9, r1
   17254:	9c cf       	rjmp	.-200    	; 0x1718e <POSIX_Read_Config+0x158>
   17256:	66 ee       	ldi	r22, 0xE6	; 230
   17258:	73 e1       	ldi	r23, 0x13	; 19
   1725a:	c6 01       	movw	r24, r12
            {
                push_state(state);
   1725c:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17260:	89 2b       	or	r24, r25
   17262:	f1 f0       	breq	.+60     	; 0x172a0 <POSIX_Read_Config+0x26a>
                state = PRINTER_STATE;
                index = alloc_device(PRINTER_TYPE);
   17264:	80 e0       	ldi	r24, 0x00	; 0
   17266:	90 e0       	ldi	r25, 0x00	; 0
   17268:	16 de       	rcall	.-980    	; 0x16e96 <push_state>
   1726a:	83 e0       	ldi	r24, 0x03	; 3
   1726c:	90 e0       	ldi	r25, 0x00	; 0
                if(index == -1)
   1726e:	6f dd       	rcall	.-1314   	; 0x16d4e <alloc_device>
   17270:	3c 01       	movw	r6, r24
   17272:	01 96       	adiw	r24, 0x01	; 1
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
   17274:	09 f4       	brne	.+2      	; 0x17278 <POSIX_Read_Config+0x242>
   17276:	8b cf       	rjmp	.-234    	; 0x1718e <POSIX_Read_Config+0x158>
   17278:	87 e0       	ldi	r24, 0x07	; 7
   1727a:	86 9d       	mul	r24, r6
   1727c:	f0 01       	movw	r30, r0
   1727e:	87 9d       	mul	r24, r7
   17280:	f0 0d       	add	r31, r0
   17282:	11 24       	eor	r1, r1
   17284:	eb 55       	subi	r30, 0x5B	; 91
   17286:	f1 4e       	sbci	r31, 0xE1	; 225
   17288:	83 81       	ldd	r24, Z+3	; 0x03
   1728a:	94 81       	ldd	r25, Z+4	; 0x04
   1728c:	cb 57       	subi	r28, 0x7B	; 123
   1728e:	df 4f       	sbci	r29, 0xFF	; 255
   17290:	99 83       	std	Y+1, r25	; 0x01
   17292:	88 83       	st	Y, r24
            }
#endif
            else if(token(ptr,"PRINTER"))
            {
                push_state(state);
                state = PRINTER_STATE;
   17294:	c5 58       	subi	r28, 0x85	; 133
   17296:	d0 40       	sbci	r29, 0x00	; 0
   17298:	fb e0       	ldi	r31, 0x0B	; 11
   1729a:	8f 2e       	mov	r8, r31
                if(index == -1)
                    state = START_STATE;
                else
                    PRINTERp = (PRINTERDeviceType *) Devices[index].dev;
            }
            else if( (ind = token(ptr,"DEBUG")) )
   1729c:	91 2c       	mov	r9, r1
   1729e:	77 cf       	rjmp	.-274    	; 0x1718e <POSIX_Read_Config+0x158>
   172a0:	6e ee       	ldi	r22, 0xEE	; 238
   172a2:	73 e1       	ldi	r23, 0x13	; 19
   172a4:	c6 01       	movw	r24, r12
   172a6:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
            {
                ptr += ind;
                if ( assign_value(ptr, 0, 65535, &val) )
   172aa:	00 97       	sbiw	r24, 0x00	; 0
   172ac:	f1 f0       	breq	.+60     	; 0x172ea <POSIX_Read_Config+0x2b4>
   172ae:	de 01       	movw	r26, r28
   172b0:	af 57       	subi	r26, 0x7F	; 127
   172b2:	bf 4f       	sbci	r27, 0xFF	; 255
   172b4:	7d 01       	movw	r14, r26
   172b6:	0f ef       	ldi	r16, 0xFF	; 255
   172b8:	1f ef       	ldi	r17, 0xFF	; 255
   172ba:	20 e0       	ldi	r18, 0x00	; 0
   172bc:	30 e0       	ldi	r19, 0x00	; 0
   172be:	40 e0       	ldi	r20, 0x00	; 0
   172c0:	50 e0       	ldi	r21, 0x00	; 0
   172c2:	ba 01       	movw	r22, r20
   172c4:	8c 0d       	add	r24, r12
   172c6:	9d 1d       	adc	r25, r13
   172c8:	16 de       	rcall	.-980    	; 0x16ef6 <assign_value>
   172ca:	67 2b       	or	r22, r23
   172cc:	68 2b       	or	r22, r24
   172ce:	69 2b       	or	r22, r25
                    debuglevel = val;
   172d0:	09 f4       	brne	.+2      	; 0x172d4 <POSIX_Read_Config+0x29e>
   172d2:	5d cf       	rjmp	.-326    	; 0x1718e <POSIX_Read_Config+0x158>
   172d4:	cf 57       	subi	r28, 0x7F	; 127
   172d6:	df 4f       	sbci	r29, 0xFF	; 255
   172d8:	88 81       	ld	r24, Y
   172da:	99 81       	ldd	r25, Y+1	; 0x01
   172dc:	c1 58       	subi	r28, 0x81	; 129
   172de:	d0 40       	sbci	r29, 0x00	; 0
   172e0:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <debuglevel+0x1>
   172e4:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <debuglevel>
            }
            else if( (ind = token(ptr,"PRINTER_DEFAULT_ADDRESS")) )
   172e8:	52 cf       	rjmp	.-348    	; 0x1718e <POSIX_Read_Config+0x158>
   172ea:	64 ef       	ldi	r22, 0xF4	; 244
   172ec:	73 e1       	ldi	r23, 0x13	; 19
   172ee:	c6 01       	movw	r24, r12
   172f0:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   172f4:	30 91 4b 19 	lds	r19, 0x194B	; 0x80194b <lines+0x1>
   172f8:	20 91 4a 19 	lds	r18, 0x194A	; 0x80194a <lines>
            {
                ptr += ind;
                //FIXME REMOVE from config
                printf("Skipping %s, at line:%d\n", ptr,lines);
   172fc:	00 97       	sbiw	r24, 0x00	; 0
   172fe:	61 f0       	breq	.+24     	; 0x17318 <POSIX_Read_Config+0x2e2>
   17300:	3f 93       	push	r19
   17302:	2f 93       	push	r18
   17304:	c8 0e       	add	r12, r24
   17306:	d9 1e       	adc	r13, r25
   17308:	df 92       	push	r13
   1730a:	cf 92       	push	r12
   1730c:	81 e2       	ldi	r24, 0x21	; 33
   1730e:	90 e3       	ldi	r25, 0x30	; 48
   17310:	1f 92       	push	r1
   17312:	9f 93       	push	r25
            }
            else
            {
                printf("Unexpected START token: %s, at line:%d\n", ptr,lines);
   17314:	8f 93       	push	r24
   17316:	00 c5       	rjmp	.+2560   	; 0x17d18 <POSIX_Read_Config+0xce2>
   17318:	3f 93       	push	r19
   1731a:	2f 93       	push	r18
   1731c:	df 92       	push	r13
   1731e:	cf 92       	push	r12
                ++errors;
            }
            break;

        case PRINTER_STATE:
            if(token(ptr,"CONFIG"))
   17320:	89 ef       	ldi	r24, 0xF9	; 249
   17322:	9f e2       	ldi	r25, 0x2F	; 47
   17324:	b5 c0       	rjmp	.+362    	; 0x17490 <POSIX_Read_Config+0x45a>
   17326:	6c e0       	ldi	r22, 0x0C	; 12
   17328:	74 e1       	ldi	r23, 0x14	; 20
   1732a:	c6 01       	movw	r24, r12
            {
                push_state(state);
   1732c:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17330:	89 2b       	or	r24, r25
   17332:	39 f0       	breq	.+14     	; 0x17342 <POSIX_Read_Config+0x30c>
                state = PRINTER_CONFIG;
   17334:	8b e0       	ldi	r24, 0x0B	; 11
   17336:	90 e0       	ldi	r25, 0x00	; 0
   17338:	ae dd       	rcall	.-1188   	; 0x16e96 <push_state>
   1733a:	ec e0       	ldi	r30, 0x0C	; 12
            }
            else
            {
                printf("Unexpected PRINTER token: %s, at line:%d\n", ptr,lines);
   1733c:	8e 2e       	mov	r8, r30
   1733e:	91 2c       	mov	r9, r1
   17340:	26 cf       	rjmp	.-436    	; 0x1718e <POSIX_Read_Config+0x158>
   17342:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <lines+0x1>
   17346:	8f 93       	push	r24
   17348:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <lines>
   1734c:	8f 93       	push	r24
   1734e:	df 92       	push	r13
   17350:	cf 92       	push	r12
   17352:	8f ec       	ldi	r24, 0xCF	; 207
   17354:	9f e2       	ldi	r25, 0x2F	; 47
   17356:	1f 92       	push	r1
                ++errors;
            }
            break;

        case PRINTER_CONFIG:
            if( (ind = token(ptr,"ADDRESS")) )
   17358:	9f 93       	push	r25
   1735a:	8f 93       	push	r24
   1735c:	aa c5       	rjmp	.+2900   	; 0x17eb2 <POSIX_Read_Config+0xe7c>
   1735e:	64 e0       	ldi	r22, 0x04	; 4
   17360:	74 e1       	ldi	r23, 0x14	; 20
   17362:	c6 01       	movw	r24, r12
   17364:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
            {
                ptr += ind;
                
                tmp = 0xff;
                if (!assign_value(ptr, 0, 14, &val) )
   17368:	00 97       	sbiw	r24, 0x00	; 0
   1736a:	79 f1       	breq	.+94     	; 0x173ca <POSIX_Read_Config+0x394>
   1736c:	de 01       	movw	r26, r28
   1736e:	af 57       	subi	r26, 0x7F	; 127
   17370:	bf 4f       	sbci	r27, 0xFF	; 255
   17372:	7d 01       	movw	r14, r26
   17374:	0e e0       	ldi	r16, 0x0E	; 14
   17376:	10 e0       	ldi	r17, 0x00	; 0
   17378:	20 e0       	ldi	r18, 0x00	; 0
   1737a:	30 e0       	ldi	r19, 0x00	; 0
   1737c:	40 e0       	ldi	r20, 0x00	; 0
   1737e:	50 e0       	ldi	r21, 0x00	; 0
   17380:	ba 01       	movw	r22, r20
   17382:	8c 0d       	add	r24, r12
   17384:	9d 1d       	adc	r25, r13
   17386:	b7 dd       	rcall	.-1170   	; 0x16ef6 <assign_value>
   17388:	67 2b       	or	r22, r23
                    ++errors;
   1738a:	68 2b       	or	r22, r24
   1738c:	69 2b       	or	r22, r25
   1738e:	29 f4       	brne	.+10     	; 0x1739a <POSIX_Read_Config+0x364>
        case PRINTER_CONFIG:
            if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                
                tmp = 0xff;
   17390:	bf ef       	ldi	r27, 0xFF	; 255
   17392:	ab 1a       	sub	r10, r27
                if (!assign_value(ptr, 0, 14, &val) )
                    ++errors;
                else
                    tmp = val;
   17394:	bb 0a       	sbc	r11, r27
   17396:	8f ef       	ldi	r24, 0xFF	; 255
   17398:	05 c0       	rjmp	.+10     	; 0x173a4 <POSIX_Read_Config+0x36e>
   1739a:	cf 57       	subi	r28, 0x7F	; 127
   1739c:	df 4f       	sbci	r29, 0xFF	; 255
                Devices[index].ADDRESS = tmp;
   1739e:	88 81       	ld	r24, Y
   173a0:	c1 58       	subi	r28, 0x81	; 129
   173a2:	d0 40       	sbci	r29, 0x00	; 0
   173a4:	97 e0       	ldi	r25, 0x07	; 7
   173a6:	96 9d       	mul	r25, r6
   173a8:	f0 01       	movw	r30, r0
   173aa:	97 9d       	mul	r25, r7
   173ac:	f0 0d       	add	r31, r0
   173ae:	11 24       	eor	r1, r1
                PRINTERp->HEADER.ADDRESS  = tmp;
   173b0:	eb 55       	subi	r30, 0x5B	; 91
   173b2:	f1 4e       	sbci	r31, 0xE1	; 225
   173b4:	81 83       	std	Z+1, r24	; 0x01
   173b6:	cb 57       	subi	r28, 0x7B	; 123
   173b8:	df 4f       	sbci	r29, 0xFF	; 255
   173ba:	a8 81       	ld	r26, Y
   173bc:	b9 81       	ldd	r27, Y+1	; 0x01
                // NO PPR
                Devices[index].PPR = 0xff;
   173be:	c5 58       	subi	r28, 0x85	; 133
   173c0:	d0 40       	sbci	r29, 0x00	; 0
   173c2:	8c 93       	st	X, r24
                PRINTERp->HEADER.PPR = 0xff;
            }
            else
            {
                printf("Unexpected PRINTER CONFIG token: %s, at line:%d\n", ptr,lines);
   173c4:	8f ef       	ldi	r24, 0xFF	; 255
   173c6:	82 83       	std	Z+2, r24	; 0x02
   173c8:	c2 c0       	rjmp	.+388    	; 0x1754e <POSIX_Read_Config+0x518>
   173ca:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <lines+0x1>
   173ce:	8f 93       	push	r24
   173d0:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <lines>
   173d4:	8f 93       	push	r24
   173d6:	df 92       	push	r13
   173d8:	cf 92       	push	r12
   173da:	8e e9       	ldi	r24, 0x9E	; 158
   173dc:	9f e2       	ldi	r25, 0x2F	; 47
   173de:	1f 92       	push	r1
   173e0:	9f 93       	push	r25
                ++errors;
   173e2:	8f 93       	push	r24
   173e4:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
            }
            break;

        case SS80_STATE:
            if(token(ptr,"HEADER"))
   173e8:	bf ef       	ldi	r27, 0xFF	; 255
   173ea:	ab 1a       	sub	r10, r27
   173ec:	bb 0a       	sbc	r11, r27
   173ee:	3d c6       	rjmp	.+3194   	; 0x1806a <POSIX_Read_Config+0x1034>
   173f0:	63 e1       	ldi	r22, 0x13	; 19
   173f2:	74 e1       	ldi	r23, 0x14	; 20
   173f4:	c6 01       	movw	r24, r12
            {
                push_state(state);
   173f6:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   173fa:	89 2b       	or	r24, r25
   173fc:	39 f0       	breq	.+14     	; 0x1740c <POSIX_Read_Config+0x3d6>
                state = SS80_HEADER;
   173fe:	81 e0       	ldi	r24, 0x01	; 1
   17400:	90 e0       	ldi	r25, 0x00	; 0
   17402:	49 dd       	rcall	.-1390   	; 0x16e96 <push_state>
            }
            else if(token(ptr,"CONFIG"))
   17404:	72 e0       	ldi	r23, 0x02	; 2
   17406:	87 2e       	mov	r8, r23
   17408:	91 2c       	mov	r9, r1
   1740a:	c1 ce       	rjmp	.-638    	; 0x1718e <POSIX_Read_Config+0x158>
   1740c:	6c e0       	ldi	r22, 0x0C	; 12
   1740e:	74 e1       	ldi	r23, 0x14	; 20
   17410:	c6 01       	movw	r24, r12
            {
                push_state(state);
   17412:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17416:	89 2b       	or	r24, r25
                state = SS80_CONFIG;
   17418:	39 f0       	breq	.+14     	; 0x17428 <POSIX_Read_Config+0x3f2>
   1741a:	81 e0       	ldi	r24, 0x01	; 1
   1741c:	90 e0       	ldi	r25, 0x00	; 0
            }
            else if(token(ptr,"CONTROLLER"))
   1741e:	3b dd       	rcall	.-1418   	; 0x16e96 <push_state>
   17420:	63 e0       	ldi	r22, 0x03	; 3
   17422:	86 2e       	mov	r8, r22
   17424:	91 2c       	mov	r9, r1
   17426:	b3 ce       	rjmp	.-666    	; 0x1718e <POSIX_Read_Config+0x158>
   17428:	6a e1       	ldi	r22, 0x1A	; 26
   1742a:	74 e1       	ldi	r23, 0x14	; 20
            {
                push_state(state);
   1742c:	c6 01       	movw	r24, r12
   1742e:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
                state = SS80_CONTROLLER;
   17432:	89 2b       	or	r24, r25
   17434:	39 f0       	breq	.+14     	; 0x17444 <POSIX_Read_Config+0x40e>
   17436:	81 e0       	ldi	r24, 0x01	; 1
   17438:	90 e0       	ldi	r25, 0x00	; 0
            }
            else if(token(ptr,"UNIT"))
   1743a:	2d dd       	rcall	.-1446   	; 0x16e96 <push_state>
   1743c:	54 e0       	ldi	r21, 0x04	; 4
   1743e:	85 2e       	mov	r8, r21
   17440:	91 2c       	mov	r9, r1
   17442:	a5 ce       	rjmp	.-694    	; 0x1718e <POSIX_Read_Config+0x158>
   17444:	65 e2       	ldi	r22, 0x25	; 37
   17446:	74 e1       	ldi	r23, 0x14	; 20
            {
                push_state(state);
   17448:	c6 01       	movw	r24, r12
   1744a:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
                state = SS80_UNIT;
   1744e:	89 2b       	or	r24, r25
   17450:	39 f0       	breq	.+14     	; 0x17460 <POSIX_Read_Config+0x42a>
   17452:	81 e0       	ldi	r24, 0x01	; 1
   17454:	90 e0       	ldi	r25, 0x00	; 0
            }
            else if(token(ptr,"VOLUME"))
   17456:	1f dd       	rcall	.-1474   	; 0x16e96 <push_state>
   17458:	45 e0       	ldi	r20, 0x05	; 5
   1745a:	84 2e       	mov	r8, r20
   1745c:	91 2c       	mov	r9, r1
   1745e:	97 ce       	rjmp	.-722    	; 0x1718e <POSIX_Read_Config+0x158>
   17460:	6a e2       	ldi	r22, 0x2A	; 42
   17462:	74 e1       	ldi	r23, 0x14	; 20
            {
                push_state(state);
   17464:	c6 01       	movw	r24, r12
   17466:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   1746a:	89 2b       	or	r24, r25
                state = SS80_VOLUME;
   1746c:	39 f0       	breq	.+14     	; 0x1747c <POSIX_Read_Config+0x446>
   1746e:	81 e0       	ldi	r24, 0x01	; 1
   17470:	90 e0       	ldi	r25, 0x00	; 0
   17472:	11 dd       	rcall	.-1502   	; 0x16e96 <push_state>
            }
            else
            {
                printf("Unexpected SS80 START token: %s, at line:%d\n", ptr,lines);
   17474:	36 e0       	ldi	r19, 0x06	; 6
   17476:	83 2e       	mov	r8, r19
   17478:	91 2c       	mov	r9, r1
   1747a:	89 ce       	rjmp	.-750    	; 0x1718e <POSIX_Read_Config+0x158>
   1747c:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <lines+0x1>
   17480:	8f 93       	push	r24
   17482:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <lines>
   17486:	8f 93       	push	r24
   17488:	df 92       	push	r13
   1748a:	cf 92       	push	r12
   1748c:	81 e7       	ldi	r24, 0x71	; 113
   1748e:	9f e2       	ldi	r25, 0x2F	; 47
                ++errors;
            }
            break;

        case SS80_HEADER:
            if( (ind = token(ptr,"ADDRESS")) )
   17490:	1f 92       	push	r1
   17492:	9f 93       	push	r25
   17494:	8f 93       	push	r24
   17496:	c9 c5       	rjmp	.+2962   	; 0x1802a <POSIX_Read_Config+0xff4>
   17498:	64 e0       	ldi	r22, 0x04	; 4
   1749a:	74 e1       	ldi	r23, 0x14	; 20
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 30, &val) )
   1749c:	c6 01       	movw	r24, r12
   1749e:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   174a2:	00 97       	sbiw	r24, 0x00	; 0
   174a4:	39 f1       	breq	.+78     	; 0x174f4 <POSIX_Read_Config+0x4be>
   174a6:	de 01       	movw	r26, r28
   174a8:	af 57       	subi	r26, 0x7F	; 127
   174aa:	bf 4f       	sbci	r27, 0xFF	; 255
   174ac:	7d 01       	movw	r14, r26
   174ae:	0e e1       	ldi	r16, 0x1E	; 30
   174b0:	10 e0       	ldi	r17, 0x00	; 0
   174b2:	20 e0       	ldi	r18, 0x00	; 0
   174b4:	30 e0       	ldi	r19, 0x00	; 0
   174b6:	40 e0       	ldi	r20, 0x00	; 0
   174b8:	50 e0       	ldi	r21, 0x00	; 0
   174ba:	ba 01       	movw	r22, r20
   174bc:	8c 0d       	add	r24, r12
   174be:	9d 1d       	adc	r25, r13
   174c0:	1a dd       	rcall	.-1484   	; 0x16ef6 <assign_value>
                    ++errors;
   174c2:	67 2b       	or	r22, r23
   174c4:	68 2b       	or	r22, r24
   174c6:	69 2b       	or	r22, r25

        case SS80_HEADER:
            if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                tmp = 0xff;
   174c8:	29 f4       	brne	.+10     	; 0x174d4 <POSIX_Read_Config+0x49e>
   174ca:	bf ef       	ldi	r27, 0xFF	; 255
                if (!assign_value(ptr, 0, 30, &val) )
                    ++errors;
                else
                    tmp = val;
   174cc:	ab 1a       	sub	r10, r27
   174ce:	bb 0a       	sbc	r11, r27
   174d0:	8f ef       	ldi	r24, 0xFF	; 255
   174d2:	05 c0       	rjmp	.+10     	; 0x174de <POSIX_Read_Config+0x4a8>
   174d4:	cf 57       	subi	r28, 0x7F	; 127
                Devices[index].ADDRESS = tmp;
   174d6:	df 4f       	sbci	r29, 0xFF	; 255
   174d8:	88 81       	ld	r24, Y
   174da:	c1 58       	subi	r28, 0x81	; 129
   174dc:	d0 40       	sbci	r29, 0x00	; 0
   174de:	97 e0       	ldi	r25, 0x07	; 7
   174e0:	96 9d       	mul	r25, r6
   174e2:	f0 01       	movw	r30, r0
   174e4:	97 9d       	mul	r25, r7
   174e6:	f0 0d       	add	r31, r0
                SS80p->HEADER.ADDRESS  = tmp;
   174e8:	11 24       	eor	r1, r1
   174ea:	eb 55       	subi	r30, 0x5B	; 91
            }
            else if( (ind = token(ptr,"PPR")) )
   174ec:	f1 4e       	sbci	r31, 0xE1	; 225
   174ee:	81 83       	std	Z+1, r24	; 0x01
   174f0:	f2 01       	movw	r30, r4
   174f2:	42 c4       	rjmp	.+2180   	; 0x17d78 <POSIX_Read_Config+0xd42>
   174f4:	61 e3       	ldi	r22, 0x31	; 49
   174f6:	74 e1       	ldi	r23, 0x14	; 20
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 7, &val) )
   174f8:	c6 01       	movw	r24, r12
   174fa:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   174fe:	00 97       	sbiw	r24, 0x00	; 0
   17500:	49 f1       	breq	.+82     	; 0x17554 <POSIX_Read_Config+0x51e>
   17502:	9e 01       	movw	r18, r28
   17504:	2f 57       	subi	r18, 0x7F	; 127
   17506:	3f 4f       	sbci	r19, 0xFF	; 255
   17508:	79 01       	movw	r14, r18
   1750a:	07 e0       	ldi	r16, 0x07	; 7
   1750c:	10 e0       	ldi	r17, 0x00	; 0
   1750e:	20 e0       	ldi	r18, 0x00	; 0
   17510:	30 e0       	ldi	r19, 0x00	; 0
   17512:	40 e0       	ldi	r20, 0x00	; 0
   17514:	50 e0       	ldi	r21, 0x00	; 0
   17516:	ba 01       	movw	r22, r20
   17518:	8c 0d       	add	r24, r12
   1751a:	9d 1d       	adc	r25, r13
   1751c:	ec dc       	rcall	.-1576   	; 0x16ef6 <assign_value>
                    ++errors;
   1751e:	67 2b       	or	r22, r23
   17520:	68 2b       	or	r22, r24
   17522:	69 2b       	or	r22, r25
                SS80p->HEADER.ADDRESS  = tmp;
            }
            else if( (ind = token(ptr,"PPR")) )
            {
                ptr += ind;
                tmp = 0xff;
   17524:	29 f4       	brne	.+10     	; 0x17530 <POSIX_Read_Config+0x4fa>
   17526:	3f ef       	ldi	r19, 0xFF	; 255
                if (!assign_value(ptr, 0, 7, &val) )
                    ++errors;
                else
                    tmp = val;
   17528:	a3 1a       	sub	r10, r19
   1752a:	b3 0a       	sbc	r11, r19
   1752c:	8f ef       	ldi	r24, 0xFF	; 255
   1752e:	05 c0       	rjmp	.+10     	; 0x1753a <POSIX_Read_Config+0x504>
   17530:	cf 57       	subi	r28, 0x7F	; 127
                Devices[index].PPR = tmp;
   17532:	df 4f       	sbci	r29, 0xFF	; 255
   17534:	88 81       	ld	r24, Y
   17536:	c1 58       	subi	r28, 0x81	; 129
   17538:	d0 40       	sbci	r29, 0x00	; 0
   1753a:	97 e0       	ldi	r25, 0x07	; 7
   1753c:	96 9d       	mul	r25, r6
   1753e:	f0 01       	movw	r30, r0
   17540:	97 9d       	mul	r25, r7
   17542:	f0 0d       	add	r31, r0
                SS80p->HEADER.PPR = tmp;
   17544:	11 24       	eor	r1, r1
   17546:	eb 55       	subi	r30, 0x5B	; 91
   17548:	f1 4e       	sbci	r31, 0xE1	; 225
   1754a:	82 83       	std	Z+2, r24	; 0x02
            }
            else if( (ind = token(ptr,"FILE")) )
   1754c:	d2 01       	movw	r26, r4
   1754e:	11 96       	adiw	r26, 0x01	; 1
   17550:	8c 93       	st	X, r24
   17552:	1d ce       	rjmp	.-966    	; 0x1718e <POSIX_Read_Config+0x158>
   17554:	65 e3       	ldi	r22, 0x35	; 53
   17556:	74 e1       	ldi	r23, 0x14	; 20
   17558:	c6 01       	movw	r24, r12
            {
                ptr += ind;
                ptr = skipspaces(ptr);
   1755a:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   1755e:	00 97       	sbiw	r24, 0x00	; 0
   17560:	a1 f0       	breq	.+40     	; 0x1758a <POSIX_Read_Config+0x554>
                if(*ptr == '=')
   17562:	8c 0d       	add	r24, r12
   17564:	9d 1d       	adc	r25, r13
   17566:	0e 94 77 30 	call	0x60ee	; 0x60ee <skipspaces>
                {
                    ++ptr;
                    ptr = skipspaces(ptr);
   1756a:	fc 01       	movw	r30, r24
   1756c:	20 81       	ld	r18, Z
   1756e:	2d 33       	cpi	r18, 0x3D	; 61
                }
                strncpy(SS80p->HEADER.NAME,ptr, MAX_FILE_NAME_LEN-1);
   17570:	19 f4       	brne	.+6      	; 0x17578 <POSIX_Read_Config+0x542>
   17572:	01 96       	adiw	r24, 0x01	; 1
   17574:	0e 94 77 30 	call	0x60ee	; 0x60ee <skipspaces>
   17578:	4f e1       	ldi	r20, 0x1F	; 31
   1757a:	50 e0       	ldi	r21, 0x00	; 0
   1757c:	bc 01       	movw	r22, r24
                SS80p->HEADER.NAME[MAX_FILE_NAME_LEN-1] = 0;
   1757e:	c2 01       	movw	r24, r4
   17580:	02 96       	adiw	r24, 0x02	; 2
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   17582:	0e 94 1a 30 	call	0x6034	; 0x6034 <strncpy>
   17586:	d2 01       	movw	r26, r4
   17588:	41 c4       	rjmp	.+2178   	; 0x17e0c <POSIX_Read_Config+0xdd6>
   1758a:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <lines+0x1>
   1758e:	8f 93       	push	r24
   17590:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <lines>
   17594:	8f 93       	push	r24
   17596:	df 92       	push	r13
                ++errors;
            }
            break;
        case SS80_CONFIG:
            if( (ind = token(ptr,"ID")) )
   17598:	cf 92       	push	r12
   1759a:	83 e4       	ldi	r24, 0x43	; 67
   1759c:	9f e2       	ldi	r25, 0x2F	; 47
   1759e:	1f cf       	rjmp	.-450    	; 0x173de <POSIX_Read_Config+0x3a8>
   175a0:	6a e3       	ldi	r22, 0x3A	; 58
   175a2:	74 e1       	ldi	r23, 0x14	; 20
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   175a4:	c6 01       	movw	r24, r12
   175a6:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   175aa:	00 97       	sbiw	r24, 0x00	; 0
   175ac:	09 f1       	breq	.+66     	; 0x175f0 <POSIX_Read_Config+0x5ba>
   175ae:	9e 01       	movw	r18, r28
   175b0:	2f 57       	subi	r18, 0x7F	; 127
   175b2:	3f 4f       	sbci	r19, 0xFF	; 255
   175b4:	79 01       	movw	r14, r18
   175b6:	0f ef       	ldi	r16, 0xFF	; 255
   175b8:	1f ef       	ldi	r17, 0xFF	; 255
   175ba:	20 e0       	ldi	r18, 0x00	; 0
   175bc:	30 e0       	ldi	r19, 0x00	; 0
   175be:	40 e0       	ldi	r20, 0x00	; 0
   175c0:	50 e0       	ldi	r21, 0x00	; 0
   175c2:	ba 01       	movw	r22, r20
   175c4:	8c 0d       	add	r24, r12
   175c6:	9d 1d       	adc	r25, r13
   175c8:	96 dc       	rcall	.-1748   	; 0x16ef6 <assign_value>
                    ++errors;
   175ca:	67 2b       	or	r22, r23
   175cc:	68 2b       	or	r22, r24
   175ce:	69 2b       	or	r22, r25
                SS80p->CONFIG.ID = val;
   175d0:	19 f4       	brne	.+6      	; 0x175d8 <POSIX_Read_Config+0x5a2>
   175d2:	3f ef       	ldi	r19, 0xFF	; 255
   175d4:	a3 1a       	sub	r10, r19
   175d6:	b3 0a       	sbc	r11, r19
   175d8:	cf 57       	subi	r28, 0x7F	; 127
   175da:	df 4f       	sbci	r29, 0xFF	; 255
   175dc:	88 81       	ld	r24, Y
   175de:	99 81       	ldd	r25, Y+1	; 0x01
   175e0:	c1 58       	subi	r28, 0x81	; 129
   175e2:	d0 40       	sbci	r29, 0x00	; 0
   175e4:	d2 01       	movw	r26, r4
   175e6:	94 96       	adiw	r26, 0x24	; 36
            }
            else
            {
                printf("Unexpected SS80 CONFIG token: %s, at line:%d\n", ptr,lines);
   175e8:	9c 93       	st	X, r25
   175ea:	8e 93       	st	-X, r24
   175ec:	93 97       	sbiw	r26, 0x23	; 35
   175ee:	cf cd       	rjmp	.-1122   	; 0x1718e <POSIX_Read_Config+0x158>
   175f0:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <lines+0x1>
   175f4:	8f 93       	push	r24
   175f6:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <lines>
   175fa:	8f 93       	push	r24
   175fc:	df 92       	push	r13
                ++errors;
            }
            break;

        case SS80_CONTROLLER:
            if( (ind = token(ptr,"UNITS_INSTALLED")) )
   175fe:	cf 92       	push	r12
   17600:	85 e1       	ldi	r24, 0x15	; 21
   17602:	9f e2       	ldi	r25, 0x2F	; 47
   17604:	ec ce       	rjmp	.-552    	; 0x173de <POSIX_Read_Config+0x3a8>
   17606:	6d e3       	ldi	r22, 0x3D	; 61
   17608:	74 e1       	ldi	r23, 0x14	; 20
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   1760a:	c6 01       	movw	r24, r12
   1760c:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17610:	00 97       	sbiw	r24, 0x00	; 0
   17612:	09 f1       	breq	.+66     	; 0x17656 <POSIX_Read_Config+0x620>
   17614:	9e 01       	movw	r18, r28
   17616:	2f 57       	subi	r18, 0x7F	; 127
   17618:	3f 4f       	sbci	r19, 0xFF	; 255
   1761a:	79 01       	movw	r14, r18
   1761c:	0f ef       	ldi	r16, 0xFF	; 255
   1761e:	1f ef       	ldi	r17, 0xFF	; 255
   17620:	20 e0       	ldi	r18, 0x00	; 0
   17622:	30 e0       	ldi	r19, 0x00	; 0
   17624:	40 e0       	ldi	r20, 0x00	; 0
   17626:	50 e0       	ldi	r21, 0x00	; 0
   17628:	ba 01       	movw	r22, r20
   1762a:	8c 0d       	add	r24, r12
   1762c:	9d 1d       	adc	r25, r13
   1762e:	63 dc       	rcall	.-1850   	; 0x16ef6 <assign_value>
                    ++errors;
   17630:	67 2b       	or	r22, r23
   17632:	68 2b       	or	r22, r24
   17634:	69 2b       	or	r22, r25
                SS80p->CONTROLLER.UNITS_INSTALLED = val;
   17636:	19 f4       	brne	.+6      	; 0x1763e <POSIX_Read_Config+0x608>
   17638:	3f ef       	ldi	r19, 0xFF	; 255
   1763a:	a3 1a       	sub	r10, r19
   1763c:	b3 0a       	sbc	r11, r19
   1763e:	cf 57       	subi	r28, 0x7F	; 127
   17640:	df 4f       	sbci	r29, 0xFF	; 255
   17642:	88 81       	ld	r24, Y
   17644:	99 81       	ldd	r25, Y+1	; 0x01
   17646:	c1 58       	subi	r28, 0x81	; 129
   17648:	d0 40       	sbci	r29, 0x00	; 0
   1764a:	d2 01       	movw	r26, r4
            }
            else if( (ind = token(ptr,"TRANSFER_RATE")) )
   1764c:	96 96       	adiw	r26, 0x26	; 38
   1764e:	9c 93       	st	X, r25
   17650:	8e 93       	st	-X, r24
   17652:	95 97       	sbiw	r26, 0x25	; 37
   17654:	9c cd       	rjmp	.-1224   	; 0x1718e <POSIX_Read_Config+0x158>
   17656:	65 ea       	ldi	r22, 0xA5	; 165
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   17658:	74 e1       	ldi	r23, 0x14	; 20
   1765a:	c6 01       	movw	r24, r12
   1765c:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17660:	00 97       	sbiw	r24, 0x00	; 0
   17662:	e9 f0       	breq	.+58     	; 0x1769e <POSIX_Read_Config+0x668>
   17664:	fe 01       	movw	r30, r28
   17666:	ef 57       	subi	r30, 0x7F	; 127
   17668:	ff 4f       	sbci	r31, 0xFF	; 255
   1766a:	7f 01       	movw	r14, r30
   1766c:	0f ef       	ldi	r16, 0xFF	; 255
   1766e:	1f ef       	ldi	r17, 0xFF	; 255
   17670:	20 e0       	ldi	r18, 0x00	; 0
   17672:	30 e0       	ldi	r19, 0x00	; 0
   17674:	40 e0       	ldi	r20, 0x00	; 0
   17676:	50 e0       	ldi	r21, 0x00	; 0
   17678:	ba 01       	movw	r22, r20
   1767a:	8c 0d       	add	r24, r12
   1767c:	9d 1d       	adc	r25, r13
                    ++errors;
   1767e:	3b dc       	rcall	.-1930   	; 0x16ef6 <assign_value>
   17680:	67 2b       	or	r22, r23
   17682:	68 2b       	or	r22, r24
                SS80p->CONTROLLER.TRANSFER_RATE = val;
   17684:	69 2b       	or	r22, r25
   17686:	19 f4       	brne	.+6      	; 0x1768e <POSIX_Read_Config+0x658>
   17688:	ff ef       	ldi	r31, 0xFF	; 255
   1768a:	af 1a       	sub	r10, r31
   1768c:	bf 0a       	sbc	r11, r31
   1768e:	cf 57       	subi	r28, 0x7F	; 127
   17690:	df 4f       	sbci	r29, 0xFF	; 255
            }
            else if( (ind = token(ptr,"TYPE")) )
   17692:	88 81       	ld	r24, Y
   17694:	99 81       	ldd	r25, Y+1	; 0x01
   17696:	c1 58       	subi	r28, 0x81	; 129
   17698:	d0 40       	sbci	r29, 0x00	; 0
   1769a:	d2 01       	movw	r26, r4
   1769c:	5a c4       	rjmp	.+2228   	; 0x17f52 <POSIX_Read_Config+0xf1c>
   1769e:	64 ea       	ldi	r22, 0xA4	; 164
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   176a0:	73 e1       	ldi	r23, 0x13	; 19
   176a2:	c6 01       	movw	r24, r12
   176a4:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   176a8:	00 97       	sbiw	r24, 0x00	; 0
   176aa:	f1 f0       	breq	.+60     	; 0x176e8 <POSIX_Read_Config+0x6b2>
   176ac:	fe 01       	movw	r30, r28
   176ae:	ef 57       	subi	r30, 0x7F	; 127
   176b0:	ff 4f       	sbci	r31, 0xFF	; 255
   176b2:	7f 01       	movw	r14, r30
   176b4:	0f ef       	ldi	r16, 0xFF	; 255
   176b6:	1f ef       	ldi	r17, 0xFF	; 255
   176b8:	20 e0       	ldi	r18, 0x00	; 0
   176ba:	30 e0       	ldi	r19, 0x00	; 0
   176bc:	40 e0       	ldi	r20, 0x00	; 0
   176be:	50 e0       	ldi	r21, 0x00	; 0
   176c0:	ba 01       	movw	r22, r20
   176c2:	8c 0d       	add	r24, r12
   176c4:	9d 1d       	adc	r25, r13
                    ++errors;
   176c6:	17 dc       	rcall	.-2002   	; 0x16ef6 <assign_value>
   176c8:	67 2b       	or	r22, r23
   176ca:	68 2b       	or	r22, r24
                SS80p->CONTROLLER.TYPE = val;
   176cc:	69 2b       	or	r22, r25
   176ce:	19 f4       	brne	.+6      	; 0x176d6 <POSIX_Read_Config+0x6a0>
   176d0:	ff ef       	ldi	r31, 0xFF	; 255
   176d2:	af 1a       	sub	r10, r31
   176d4:	bf 0a       	sbc	r11, r31
   176d6:	cf 57       	subi	r28, 0x7F	; 127
   176d8:	df 4f       	sbci	r29, 0xFF	; 255
   176da:	88 81       	ld	r24, Y
   176dc:	c1 58       	subi	r28, 0x81	; 129
            }
            else
            {
                printf("Unexpected SS80 CONTROLLER token: %s, at line:%d\n", ptr,lines);
   176de:	d0 40       	sbci	r29, 0x00	; 0
   176e0:	d2 01       	movw	r26, r4
   176e2:	99 96       	adiw	r26, 0x29	; 41
   176e4:	8c 93       	st	X, r24
   176e6:	53 cd       	rjmp	.-1370   	; 0x1718e <POSIX_Read_Config+0x158>
   176e8:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <lines+0x1>
   176ec:	8f 93       	push	r24
   176ee:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <lines>
                ++errors;
            }
            break;

        case SS80_UNIT:
            if( (ind = token(ptr,"UNIT_TYPE")) )
   176f2:	8f 93       	push	r24
   176f4:	df 92       	push	r13
   176f6:	cf 92       	push	r12
   176f8:	83 ee       	ldi	r24, 0xE3	; 227
   176fa:	9e e2       	ldi	r25, 0x2E	; 46
   176fc:	70 ce       	rjmp	.-800    	; 0x173de <POSIX_Read_Config+0x3a8>
   176fe:	6d e4       	ldi	r22, 0x4D	; 77
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val))
   17700:	74 e1       	ldi	r23, 0x14	; 20
   17702:	c6 01       	movw	r24, r12
   17704:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17708:	00 97       	sbiw	r24, 0x00	; 0
   1770a:	f1 f0       	breq	.+60     	; 0x17748 <POSIX_Read_Config+0x712>
   1770c:	9e 01       	movw	r18, r28
   1770e:	2f 57       	subi	r18, 0x7F	; 127
   17710:	3f 4f       	sbci	r19, 0xFF	; 255
   17712:	79 01       	movw	r14, r18
   17714:	0f ef       	ldi	r16, 0xFF	; 255
   17716:	1f ef       	ldi	r17, 0xFF	; 255
   17718:	20 e0       	ldi	r18, 0x00	; 0
   1771a:	30 e0       	ldi	r19, 0x00	; 0
   1771c:	40 e0       	ldi	r20, 0x00	; 0
   1771e:	50 e0       	ldi	r21, 0x00	; 0
   17720:	ba 01       	movw	r22, r20
   17722:	8c 0d       	add	r24, r12
   17724:	9d 1d       	adc	r25, r13
                    ++errors;
   17726:	e7 db       	rcall	.-2098   	; 0x16ef6 <assign_value>
   17728:	67 2b       	or	r22, r23
   1772a:	68 2b       	or	r22, r24
                SS80p->UNIT.UNIT_TYPE = val;
   1772c:	69 2b       	or	r22, r25
   1772e:	19 f4       	brne	.+6      	; 0x17736 <POSIX_Read_Config+0x700>
   17730:	3f ef       	ldi	r19, 0xFF	; 255
   17732:	a3 1a       	sub	r10, r19
   17734:	b3 0a       	sbc	r11, r19
   17736:	cf 57       	subi	r28, 0x7F	; 127
   17738:	df 4f       	sbci	r29, 0xFF	; 255
   1773a:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"DEVICE_NUMBER")) )
   1773c:	c1 58       	subi	r28, 0x81	; 129
   1773e:	d0 40       	sbci	r29, 0x00	; 0
   17740:	d2 01       	movw	r26, r4
   17742:	9a 96       	adiw	r26, 0x2a	; 42
   17744:	8c 93       	st	X, r24
   17746:	23 cd       	rjmp	.-1466   	; 0x1718e <POSIX_Read_Config+0x158>
   17748:	67 e5       	ldi	r22, 0x57	; 87
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val))
   1774a:	74 e1       	ldi	r23, 0x14	; 20
   1774c:	c6 01       	movw	r24, r12
   1774e:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17752:	00 97       	sbiw	r24, 0x00	; 0
   17754:	11 f1       	breq	.+68     	; 0x1779a <POSIX_Read_Config+0x764>
   17756:	fe 01       	movw	r30, r28
   17758:	ef 57       	subi	r30, 0x7F	; 127
   1775a:	ff 4f       	sbci	r31, 0xFF	; 255
   1775c:	7f 01       	movw	r14, r30
   1775e:	0f ef       	ldi	r16, 0xFF	; 255
   17760:	1f ef       	ldi	r17, 0xFF	; 255
   17762:	98 01       	movw	r18, r16
   17764:	40 e0       	ldi	r20, 0x00	; 0
   17766:	50 e0       	ldi	r21, 0x00	; 0
   17768:	ba 01       	movw	r22, r20
   1776a:	8c 0d       	add	r24, r12
   1776c:	9d 1d       	adc	r25, r13
                    ++errors;
   1776e:	c3 db       	rcall	.-2170   	; 0x16ef6 <assign_value>
   17770:	67 2b       	or	r22, r23
   17772:	68 2b       	or	r22, r24
                SS80p->UNIT.DEVICE_NUMBER = val;
   17774:	69 2b       	or	r22, r25
   17776:	19 f4       	brne	.+6      	; 0x1777e <POSIX_Read_Config+0x748>
   17778:	ff ef       	ldi	r31, 0xFF	; 255
   1777a:	af 1a       	sub	r10, r31
   1777c:	bf 0a       	sbc	r11, r31
   1777e:	cf 57       	subi	r28, 0x7F	; 127
   17780:	df 4f       	sbci	r29, 0xFF	; 255
   17782:	88 81       	ld	r24, Y
   17784:	99 81       	ldd	r25, Y+1	; 0x01
   17786:	aa 81       	ldd	r26, Y+2	; 0x02
   17788:	bb 81       	ldd	r27, Y+3	; 0x03
   1778a:	c1 58       	subi	r28, 0x81	; 129
   1778c:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"BYTES_PER_BLOCK")) )
   1778e:	f2 01       	movw	r30, r4
   17790:	83 a7       	std	Z+43, r24	; 0x2b
   17792:	94 a7       	std	Z+44, r25	; 0x2c
   17794:	a5 a7       	std	Z+45, r26	; 0x2d
   17796:	b6 a7       	std	Z+46, r27	; 0x2e
   17798:	fa cc       	rjmp	.-1548   	; 0x1718e <POSIX_Read_Config+0x158>
   1779a:	65 e6       	ldi	r22, 0x65	; 101
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0x1000UL, &val) )
   1779c:	74 e1       	ldi	r23, 0x14	; 20
   1779e:	c6 01       	movw	r24, r12
   177a0:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   177a4:	00 97       	sbiw	r24, 0x00	; 0
   177a6:	09 f1       	breq	.+66     	; 0x177ea <POSIX_Read_Config+0x7b4>
   177a8:	9e 01       	movw	r18, r28
   177aa:	2f 57       	subi	r18, 0x7F	; 127
   177ac:	3f 4f       	sbci	r19, 0xFF	; 255
   177ae:	79 01       	movw	r14, r18
   177b0:	00 e0       	ldi	r16, 0x00	; 0
   177b2:	10 e1       	ldi	r17, 0x10	; 16
   177b4:	20 e0       	ldi	r18, 0x00	; 0
   177b6:	30 e0       	ldi	r19, 0x00	; 0
   177b8:	40 e0       	ldi	r20, 0x00	; 0
   177ba:	50 e0       	ldi	r21, 0x00	; 0
   177bc:	ba 01       	movw	r22, r20
   177be:	8c 0d       	add	r24, r12
   177c0:	9d 1d       	adc	r25, r13
                    ++errors;
   177c2:	99 db       	rcall	.-2254   	; 0x16ef6 <assign_value>
   177c4:	67 2b       	or	r22, r23
   177c6:	68 2b       	or	r22, r24
                SS80p->UNIT.BYTES_PER_BLOCK = val;
   177c8:	69 2b       	or	r22, r25
   177ca:	19 f4       	brne	.+6      	; 0x177d2 <POSIX_Read_Config+0x79c>
   177cc:	3f ef       	ldi	r19, 0xFF	; 255
   177ce:	a3 1a       	sub	r10, r19
   177d0:	b3 0a       	sbc	r11, r19
   177d2:	cf 57       	subi	r28, 0x7F	; 127
   177d4:	df 4f       	sbci	r29, 0xFF	; 255
   177d6:	88 81       	ld	r24, Y
   177d8:	99 81       	ldd	r25, Y+1	; 0x01
   177da:	c1 58       	subi	r28, 0x81	; 129
   177dc:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"BUFFERED_BLOCKS")) )
   177de:	d2 01       	movw	r26, r4
   177e0:	d0 96       	adiw	r26, 0x30	; 48
   177e2:	9c 93       	st	X, r25
   177e4:	8e 93       	st	-X, r24
   177e6:	9f 97       	sbiw	r26, 0x2f	; 47
   177e8:	d2 cc       	rjmp	.-1628   	; 0x1718e <POSIX_Read_Config+0x158>
   177ea:	65 e7       	ldi	r22, 0x75	; 117
            {
                ptr += ind;
                if (!assign_value(ptr, 1UL, 1UL, &val) )
   177ec:	74 e1       	ldi	r23, 0x14	; 20
   177ee:	c6 01       	movw	r24, r12
   177f0:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   177f4:	00 97       	sbiw	r24, 0x00	; 0
   177f6:	f9 f0       	breq	.+62     	; 0x17836 <POSIX_Read_Config+0x800>
   177f8:	fe 01       	movw	r30, r28
   177fa:	ef 57       	subi	r30, 0x7F	; 127
   177fc:	ff 4f       	sbci	r31, 0xFF	; 255
   177fe:	7f 01       	movw	r14, r30
   17800:	01 e0       	ldi	r16, 0x01	; 1
   17802:	10 e0       	ldi	r17, 0x00	; 0
   17804:	20 e0       	ldi	r18, 0x00	; 0
   17806:	30 e0       	ldi	r19, 0x00	; 0
   17808:	41 e0       	ldi	r20, 0x01	; 1
   1780a:	50 e0       	ldi	r21, 0x00	; 0
   1780c:	60 e0       	ldi	r22, 0x00	; 0
   1780e:	70 e0       	ldi	r23, 0x00	; 0
   17810:	8c 0d       	add	r24, r12
   17812:	9d 1d       	adc	r25, r13
                    ++errors;
   17814:	70 db       	rcall	.-2336   	; 0x16ef6 <assign_value>
   17816:	67 2b       	or	r22, r23
   17818:	68 2b       	or	r22, r24
                SS80p->UNIT.BUFFERED_BLOCKS = val;
   1781a:	69 2b       	or	r22, r25
   1781c:	19 f4       	brne	.+6      	; 0x17824 <POSIX_Read_Config+0x7ee>
   1781e:	ff ef       	ldi	r31, 0xFF	; 255
   17820:	af 1a       	sub	r10, r31
   17822:	bf 0a       	sbc	r11, r31
   17824:	cf 57       	subi	r28, 0x7F	; 127
   17826:	df 4f       	sbci	r29, 0xFF	; 255
   17828:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"BURST_SIZE")) )
   1782a:	c1 58       	subi	r28, 0x81	; 129
   1782c:	d0 40       	sbci	r29, 0x00	; 0
   1782e:	d2 01       	movw	r26, r4
   17830:	d1 96       	adiw	r26, 0x31	; 49
   17832:	8c 93       	st	X, r24
   17834:	ac cc       	rjmp	.-1704   	; 0x1718e <POSIX_Read_Config+0x158>
   17836:	65 e8       	ldi	r22, 0x85	; 133
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0, &val) )
   17838:	74 e1       	ldi	r23, 0x14	; 20
   1783a:	c6 01       	movw	r24, r12
   1783c:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17840:	00 97       	sbiw	r24, 0x00	; 0
   17842:	e9 f0       	breq	.+58     	; 0x1787e <POSIX_Read_Config+0x848>
   17844:	fe 01       	movw	r30, r28
   17846:	ef 57       	subi	r30, 0x7F	; 127
   17848:	ff 4f       	sbci	r31, 0xFF	; 255
   1784a:	7f 01       	movw	r14, r30
   1784c:	00 e0       	ldi	r16, 0x00	; 0
   1784e:	10 e0       	ldi	r17, 0x00	; 0
   17850:	98 01       	movw	r18, r16
   17852:	40 e0       	ldi	r20, 0x00	; 0
   17854:	50 e0       	ldi	r21, 0x00	; 0
   17856:	ba 01       	movw	r22, r20
   17858:	8c 0d       	add	r24, r12
   1785a:	9d 1d       	adc	r25, r13
                    ++errors;
   1785c:	4c db       	rcall	.-2408   	; 0x16ef6 <assign_value>
   1785e:	67 2b       	or	r22, r23
   17860:	68 2b       	or	r22, r24
                SS80p->UNIT.BURST_SIZE = val;
   17862:	69 2b       	or	r22, r25
   17864:	19 f4       	brne	.+6      	; 0x1786c <POSIX_Read_Config+0x836>
   17866:	ff ef       	ldi	r31, 0xFF	; 255
   17868:	af 1a       	sub	r10, r31
   1786a:	bf 0a       	sbc	r11, r31
   1786c:	cf 57       	subi	r28, 0x7F	; 127
   1786e:	df 4f       	sbci	r29, 0xFF	; 255
   17870:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"BLOCK_TIME")) )
   17872:	c1 58       	subi	r28, 0x81	; 129
   17874:	d0 40       	sbci	r29, 0x00	; 0
   17876:	d2 01       	movw	r26, r4
   17878:	d2 96       	adiw	r26, 0x32	; 50
   1787a:	8c 93       	st	X, r24
   1787c:	88 cc       	rjmp	.-1776   	; 0x1718e <POSIX_Read_Config+0x158>
   1787e:	60 e9       	ldi	r22, 0x90	; 144
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   17880:	74 e1       	ldi	r23, 0x14	; 20
   17882:	c6 01       	movw	r24, r12
   17884:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17888:	00 97       	sbiw	r24, 0x00	; 0
   1788a:	09 f1       	breq	.+66     	; 0x178ce <POSIX_Read_Config+0x898>
   1788c:	fe 01       	movw	r30, r28
   1788e:	ef 57       	subi	r30, 0x7F	; 127
   17890:	ff 4f       	sbci	r31, 0xFF	; 255
   17892:	7f 01       	movw	r14, r30
   17894:	0f ef       	ldi	r16, 0xFF	; 255
   17896:	1f ef       	ldi	r17, 0xFF	; 255
   17898:	20 e0       	ldi	r18, 0x00	; 0
   1789a:	30 e0       	ldi	r19, 0x00	; 0
   1789c:	40 e0       	ldi	r20, 0x00	; 0
   1789e:	50 e0       	ldi	r21, 0x00	; 0
   178a0:	ba 01       	movw	r22, r20
   178a2:	8c 0d       	add	r24, r12
   178a4:	9d 1d       	adc	r25, r13
                    ++errors;
   178a6:	27 db       	rcall	.-2482   	; 0x16ef6 <assign_value>
   178a8:	67 2b       	or	r22, r23
   178aa:	68 2b       	or	r22, r24
                SS80p->UNIT.BLOCK_TIME = val;
   178ac:	69 2b       	or	r22, r25
   178ae:	19 f4       	brne	.+6      	; 0x178b6 <POSIX_Read_Config+0x880>
   178b0:	ff ef       	ldi	r31, 0xFF	; 255
   178b2:	af 1a       	sub	r10, r31
   178b4:	bf 0a       	sbc	r11, r31
   178b6:	cf 57       	subi	r28, 0x7F	; 127
   178b8:	df 4f       	sbci	r29, 0xFF	; 255
   178ba:	88 81       	ld	r24, Y
   178bc:	99 81       	ldd	r25, Y+1	; 0x01
   178be:	c1 58       	subi	r28, 0x81	; 129
   178c0:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"CONTINOUS_TRANSFER_RATE")) )
   178c2:	d2 01       	movw	r26, r4
   178c4:	d4 96       	adiw	r26, 0x34	; 52
   178c6:	9c 93       	st	X, r25
   178c8:	8e 93       	st	-X, r24
   178ca:	d3 97       	sbiw	r26, 0x33	; 51
   178cc:	60 cc       	rjmp	.-1856   	; 0x1718e <POSIX_Read_Config+0x158>
   178ce:	6b e9       	ldi	r22, 0x9B	; 155
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   178d0:	74 e1       	ldi	r23, 0x14	; 20
   178d2:	c6 01       	movw	r24, r12
   178d4:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   178d8:	00 97       	sbiw	r24, 0x00	; 0
   178da:	09 f1       	breq	.+66     	; 0x1791e <POSIX_Read_Config+0x8e8>
   178dc:	fe 01       	movw	r30, r28
   178de:	ef 57       	subi	r30, 0x7F	; 127
   178e0:	ff 4f       	sbci	r31, 0xFF	; 255
   178e2:	7f 01       	movw	r14, r30
   178e4:	0f ef       	ldi	r16, 0xFF	; 255
   178e6:	1f ef       	ldi	r17, 0xFF	; 255
   178e8:	20 e0       	ldi	r18, 0x00	; 0
   178ea:	30 e0       	ldi	r19, 0x00	; 0
   178ec:	40 e0       	ldi	r20, 0x00	; 0
   178ee:	50 e0       	ldi	r21, 0x00	; 0
   178f0:	ba 01       	movw	r22, r20
   178f2:	8c 0d       	add	r24, r12
   178f4:	9d 1d       	adc	r25, r13
                    ++errors;
   178f6:	ff da       	rcall	.-2562   	; 0x16ef6 <assign_value>
   178f8:	67 2b       	or	r22, r23
   178fa:	68 2b       	or	r22, r24
                SS80p->UNIT.CONTINOUS_TRANSFER_RATE = val;
   178fc:	69 2b       	or	r22, r25
   178fe:	19 f4       	brne	.+6      	; 0x17906 <POSIX_Read_Config+0x8d0>
   17900:	ff ef       	ldi	r31, 0xFF	; 255
   17902:	af 1a       	sub	r10, r31
   17904:	bf 0a       	sbc	r11, r31
   17906:	cf 57       	subi	r28, 0x7F	; 127
   17908:	df 4f       	sbci	r29, 0xFF	; 255
   1790a:	88 81       	ld	r24, Y
   1790c:	99 81       	ldd	r25, Y+1	; 0x01
   1790e:	c1 58       	subi	r28, 0x81	; 129
   17910:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"OPTIMAL_RETRY_TIME")) )
   17912:	d2 01       	movw	r26, r4
   17914:	d6 96       	adiw	r26, 0x36	; 54
   17916:	9c 93       	st	X, r25
   17918:	8e 93       	st	-X, r24
   1791a:	d5 97       	sbiw	r26, 0x35	; 53
   1791c:	38 cc       	rjmp	.-1936   	; 0x1718e <POSIX_Read_Config+0x158>
   1791e:	63 eb       	ldi	r22, 0xB3	; 179
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   17920:	74 e1       	ldi	r23, 0x14	; 20
   17922:	c6 01       	movw	r24, r12
   17924:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17928:	00 97       	sbiw	r24, 0x00	; 0
   1792a:	09 f1       	breq	.+66     	; 0x1796e <POSIX_Read_Config+0x938>
   1792c:	fe 01       	movw	r30, r28
   1792e:	ef 57       	subi	r30, 0x7F	; 127
   17930:	ff 4f       	sbci	r31, 0xFF	; 255
   17932:	7f 01       	movw	r14, r30
   17934:	0f ef       	ldi	r16, 0xFF	; 255
   17936:	1f ef       	ldi	r17, 0xFF	; 255
   17938:	20 e0       	ldi	r18, 0x00	; 0
   1793a:	30 e0       	ldi	r19, 0x00	; 0
   1793c:	40 e0       	ldi	r20, 0x00	; 0
   1793e:	50 e0       	ldi	r21, 0x00	; 0
   17940:	ba 01       	movw	r22, r20
   17942:	8c 0d       	add	r24, r12
   17944:	9d 1d       	adc	r25, r13
                    ++errors;
   17946:	d7 da       	rcall	.-2642   	; 0x16ef6 <assign_value>
   17948:	67 2b       	or	r22, r23
   1794a:	68 2b       	or	r22, r24
                SS80p->UNIT.OPTIMAL_RETRY_TIME = val;
   1794c:	69 2b       	or	r22, r25
   1794e:	19 f4       	brne	.+6      	; 0x17956 <POSIX_Read_Config+0x920>
   17950:	ff ef       	ldi	r31, 0xFF	; 255
   17952:	af 1a       	sub	r10, r31
   17954:	bf 0a       	sbc	r11, r31
   17956:	cf 57       	subi	r28, 0x7F	; 127
   17958:	df 4f       	sbci	r29, 0xFF	; 255
   1795a:	88 81       	ld	r24, Y
   1795c:	99 81       	ldd	r25, Y+1	; 0x01
   1795e:	c1 58       	subi	r28, 0x81	; 129
   17960:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"ACCESS_TIME")) )
   17962:	d2 01       	movw	r26, r4
   17964:	d8 96       	adiw	r26, 0x38	; 56
   17966:	9c 93       	st	X, r25
   17968:	8e 93       	st	-X, r24
   1796a:	d7 97       	sbiw	r26, 0x37	; 55
   1796c:	10 cc       	rjmp	.-2016   	; 0x1718e <POSIX_Read_Config+0x158>
   1796e:	66 ec       	ldi	r22, 0xC6	; 198
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   17970:	74 e1       	ldi	r23, 0x14	; 20
   17972:	c6 01       	movw	r24, r12
   17974:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17978:	00 97       	sbiw	r24, 0x00	; 0
   1797a:	09 f1       	breq	.+66     	; 0x179be <POSIX_Read_Config+0x988>
   1797c:	fe 01       	movw	r30, r28
   1797e:	ef 57       	subi	r30, 0x7F	; 127
   17980:	ff 4f       	sbci	r31, 0xFF	; 255
   17982:	7f 01       	movw	r14, r30
   17984:	0f ef       	ldi	r16, 0xFF	; 255
   17986:	1f ef       	ldi	r17, 0xFF	; 255
   17988:	20 e0       	ldi	r18, 0x00	; 0
   1798a:	30 e0       	ldi	r19, 0x00	; 0
   1798c:	40 e0       	ldi	r20, 0x00	; 0
   1798e:	50 e0       	ldi	r21, 0x00	; 0
   17990:	ba 01       	movw	r22, r20
   17992:	8c 0d       	add	r24, r12
   17994:	9d 1d       	adc	r25, r13
                    ++errors;
   17996:	af da       	rcall	.-2722   	; 0x16ef6 <assign_value>
   17998:	67 2b       	or	r22, r23
   1799a:	68 2b       	or	r22, r24
                SS80p->UNIT.ACCESS_TIME = val;
   1799c:	69 2b       	or	r22, r25
   1799e:	19 f4       	brne	.+6      	; 0x179a6 <POSIX_Read_Config+0x970>
   179a0:	ff ef       	ldi	r31, 0xFF	; 255
   179a2:	af 1a       	sub	r10, r31
   179a4:	bf 0a       	sbc	r11, r31
   179a6:	cf 57       	subi	r28, 0x7F	; 127
   179a8:	df 4f       	sbci	r29, 0xFF	; 255
   179aa:	88 81       	ld	r24, Y
   179ac:	99 81       	ldd	r25, Y+1	; 0x01
   179ae:	c1 58       	subi	r28, 0x81	; 129
   179b0:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"MAXIMUM_INTERLEAVE")) )
   179b2:	d2 01       	movw	r26, r4
   179b4:	da 96       	adiw	r26, 0x3a	; 58
   179b6:	9c 93       	st	X, r25
   179b8:	8e 93       	st	-X, r24
   179ba:	d9 97       	sbiw	r26, 0x39	; 57
   179bc:	e8 cb       	rjmp	.-2096   	; 0x1718e <POSIX_Read_Config+0x158>
   179be:	62 ed       	ldi	r22, 0xD2	; 210
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   179c0:	74 e1       	ldi	r23, 0x14	; 20
   179c2:	c6 01       	movw	r24, r12
   179c4:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   179c8:	00 97       	sbiw	r24, 0x00	; 0
   179ca:	f1 f0       	breq	.+60     	; 0x17a08 <POSIX_Read_Config+0x9d2>
   179cc:	fe 01       	movw	r30, r28
   179ce:	ef 57       	subi	r30, 0x7F	; 127
   179d0:	ff 4f       	sbci	r31, 0xFF	; 255
   179d2:	7f 01       	movw	r14, r30
   179d4:	0f ef       	ldi	r16, 0xFF	; 255
   179d6:	10 e0       	ldi	r17, 0x00	; 0
   179d8:	20 e0       	ldi	r18, 0x00	; 0
   179da:	30 e0       	ldi	r19, 0x00	; 0
   179dc:	40 e0       	ldi	r20, 0x00	; 0
   179de:	50 e0       	ldi	r21, 0x00	; 0
   179e0:	ba 01       	movw	r22, r20
   179e2:	8c 0d       	add	r24, r12
                    ++errors;
   179e4:	9d 1d       	adc	r25, r13
   179e6:	87 da       	rcall	.-2802   	; 0x16ef6 <assign_value>
                SS80p->UNIT.MAXIMUM_INTERLEAVE = val;
   179e8:	67 2b       	or	r22, r23
   179ea:	68 2b       	or	r22, r24
   179ec:	69 2b       	or	r22, r25
   179ee:	19 f4       	brne	.+6      	; 0x179f6 <POSIX_Read_Config+0x9c0>
   179f0:	ff ef       	ldi	r31, 0xFF	; 255
   179f2:	af 1a       	sub	r10, r31
   179f4:	bf 0a       	sbc	r11, r31
   179f6:	cf 57       	subi	r28, 0x7F	; 127
   179f8:	df 4f       	sbci	r29, 0xFF	; 255
            }
            else if( (ind = token(ptr,"FIXED_VOLUMES")) )
   179fa:	88 81       	ld	r24, Y
   179fc:	c1 58       	subi	r28, 0x81	; 129
   179fe:	d0 40       	sbci	r29, 0x00	; 0
   17a00:	d2 01       	movw	r26, r4
   17a02:	db 96       	adiw	r26, 0x3b	; 59
   17a04:	8c 93       	st	X, r24
   17a06:	c3 cb       	rjmp	.-2170   	; 0x1718e <POSIX_Read_Config+0x158>
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   17a08:	65 ee       	ldi	r22, 0xE5	; 229
   17a0a:	74 e1       	ldi	r23, 0x14	; 20
   17a0c:	c6 01       	movw	r24, r12
   17a0e:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17a12:	00 97       	sbiw	r24, 0x00	; 0
   17a14:	f1 f0       	breq	.+60     	; 0x17a52 <POSIX_Read_Config+0xa1c>
   17a16:	fe 01       	movw	r30, r28
   17a18:	ef 57       	subi	r30, 0x7F	; 127
   17a1a:	ff 4f       	sbci	r31, 0xFF	; 255
   17a1c:	7f 01       	movw	r14, r30
   17a1e:	0f ef       	ldi	r16, 0xFF	; 255
   17a20:	10 e0       	ldi	r17, 0x00	; 0
   17a22:	20 e0       	ldi	r18, 0x00	; 0
   17a24:	30 e0       	ldi	r19, 0x00	; 0
   17a26:	40 e0       	ldi	r20, 0x00	; 0
   17a28:	50 e0       	ldi	r21, 0x00	; 0
   17a2a:	ba 01       	movw	r22, r20
                    ++errors;
   17a2c:	8c 0d       	add	r24, r12
   17a2e:	9d 1d       	adc	r25, r13
   17a30:	62 da       	rcall	.-2876   	; 0x16ef6 <assign_value>
                SS80p->UNIT.FIXED_VOLUMES = val;
   17a32:	67 2b       	or	r22, r23
   17a34:	68 2b       	or	r22, r24
   17a36:	69 2b       	or	r22, r25
   17a38:	19 f4       	brne	.+6      	; 0x17a40 <POSIX_Read_Config+0xa0a>
   17a3a:	ff ef       	ldi	r31, 0xFF	; 255
   17a3c:	af 1a       	sub	r10, r31
   17a3e:	bf 0a       	sbc	r11, r31
   17a40:	cf 57       	subi	r28, 0x7F	; 127
   17a42:	df 4f       	sbci	r29, 0xFF	; 255
            }
            else if( (ind = token(ptr,"REMOVABLE_VOLUMES")) )
   17a44:	88 81       	ld	r24, Y
   17a46:	c1 58       	subi	r28, 0x81	; 129
   17a48:	d0 40       	sbci	r29, 0x00	; 0
   17a4a:	d2 01       	movw	r26, r4
   17a4c:	dc 96       	adiw	r26, 0x3c	; 60
   17a4e:	8c 93       	st	X, r24
   17a50:	9e cb       	rjmp	.-2244   	; 0x1718e <POSIX_Read_Config+0x158>
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   17a52:	63 ef       	ldi	r22, 0xF3	; 243
   17a54:	74 e1       	ldi	r23, 0x14	; 20
   17a56:	c6 01       	movw	r24, r12
   17a58:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17a5c:	00 97       	sbiw	r24, 0x00	; 0
   17a5e:	f1 f0       	breq	.+60     	; 0x17a9c <POSIX_Read_Config+0xa66>
   17a60:	fe 01       	movw	r30, r28
   17a62:	ef 57       	subi	r30, 0x7F	; 127
   17a64:	ff 4f       	sbci	r31, 0xFF	; 255
   17a66:	7f 01       	movw	r14, r30
   17a68:	0f ef       	ldi	r16, 0xFF	; 255
   17a6a:	10 e0       	ldi	r17, 0x00	; 0
   17a6c:	20 e0       	ldi	r18, 0x00	; 0
   17a6e:	30 e0       	ldi	r19, 0x00	; 0
   17a70:	40 e0       	ldi	r20, 0x00	; 0
   17a72:	50 e0       	ldi	r21, 0x00	; 0
   17a74:	ba 01       	movw	r22, r20
   17a76:	8c 0d       	add	r24, r12
                    ++errors;
   17a78:	9d 1d       	adc	r25, r13
   17a7a:	3d da       	rcall	.-2950   	; 0x16ef6 <assign_value>
   17a7c:	67 2b       	or	r22, r23
                SS80p->UNIT.REMOVABLE_VOLUMES = val;
   17a7e:	68 2b       	or	r22, r24
   17a80:	69 2b       	or	r22, r25
   17a82:	19 f4       	brne	.+6      	; 0x17a8a <POSIX_Read_Config+0xa54>
   17a84:	ff ef       	ldi	r31, 0xFF	; 255
   17a86:	af 1a       	sub	r10, r31
   17a88:	bf 0a       	sbc	r11, r31
   17a8a:	cf 57       	subi	r28, 0x7F	; 127
   17a8c:	df 4f       	sbci	r29, 0xFF	; 255
            }
            else
            {
                printf("Unexpected SS80 UNIT token: %s, at line:%d\n", ptr,lines);
   17a8e:	88 81       	ld	r24, Y
   17a90:	c1 58       	subi	r28, 0x81	; 129
   17a92:	d0 40       	sbci	r29, 0x00	; 0
   17a94:	d2 01       	movw	r26, r4
   17a96:	dd 96       	adiw	r26, 0x3d	; 61
   17a98:	8c 93       	st	X, r24
   17a9a:	79 cb       	rjmp	.-2318   	; 0x1718e <POSIX_Read_Config+0x158>
   17a9c:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <lines+0x1>
   17aa0:	8f 93       	push	r24
   17aa2:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <lines>
                ++errors;
            }
            break;

        case SS80_VOLUME:
            if( (ind = token(ptr,"MAX_CYLINDER")) )
   17aa6:	8f 93       	push	r24
   17aa8:	df 92       	push	r13
   17aaa:	cf 92       	push	r12
   17aac:	87 eb       	ldi	r24, 0xB7	; 183
   17aae:	9e e2       	ldi	r25, 0x2E	; 46
   17ab0:	96 cc       	rjmp	.-1748   	; 0x173de <POSIX_Read_Config+0x3a8>
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val) )
   17ab2:	65 e0       	ldi	r22, 0x05	; 5
   17ab4:	75 e1       	ldi	r23, 0x15	; 21
   17ab6:	c6 01       	movw	r24, r12
   17ab8:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17abc:	00 97       	sbiw	r24, 0x00	; 0
   17abe:	f9 f0       	breq	.+62     	; 0x17afe <POSIX_Read_Config+0xac8>
   17ac0:	9e 01       	movw	r18, r28
   17ac2:	2f 57       	subi	r18, 0x7F	; 127
   17ac4:	3f 4f       	sbci	r19, 0xFF	; 255
   17ac6:	79 01       	movw	r14, r18
   17ac8:	0f ef       	ldi	r16, 0xFF	; 255
   17aca:	1f ef       	ldi	r17, 0xFF	; 255
   17acc:	98 01       	movw	r18, r16
   17ace:	40 e0       	ldi	r20, 0x00	; 0
   17ad0:	50 e0       	ldi	r21, 0x00	; 0
   17ad2:	ba 01       	movw	r22, r20
                    ++errors;
   17ad4:	8c 0d       	add	r24, r12
   17ad6:	9d 1d       	adc	r25, r13
   17ad8:	0e da       	rcall	.-3044   	; 0x16ef6 <assign_value>
                SS80p->VOLUME.MAX_CYLINDER = val;
   17ada:	67 2b       	or	r22, r23
   17adc:	68 2b       	or	r22, r24
   17ade:	69 2b       	or	r22, r25
   17ae0:	19 f4       	brne	.+6      	; 0x17ae8 <POSIX_Read_Config+0xab2>
   17ae2:	3f ef       	ldi	r19, 0xFF	; 255
   17ae4:	a3 1a       	sub	r10, r19
   17ae6:	b3 0a       	sbc	r11, r19
   17ae8:	cf 57       	subi	r28, 0x7F	; 127
   17aea:	df 4f       	sbci	r29, 0xFF	; 255
   17aec:	88 81       	ld	r24, Y
   17aee:	99 81       	ldd	r25, Y+1	; 0x01
            }
            else if( (ind = token(ptr,"MAX_HEAD")) )
   17af0:	aa 81       	ldd	r26, Y+2	; 0x02
   17af2:	bb 81       	ldd	r27, Y+3	; 0x03
   17af4:	c1 58       	subi	r28, 0x81	; 129
   17af6:	d0 40       	sbci	r29, 0x00	; 0
   17af8:	f2 01       	movw	r30, r4
   17afa:	fe 96       	adiw	r30, 0x3e	; 62
   17afc:	73 c0       	rjmp	.+230    	; 0x17be4 <POSIX_Read_Config+0xbae>
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   17afe:	62 e1       	ldi	r22, 0x12	; 18
   17b00:	75 e1       	ldi	r23, 0x15	; 21
   17b02:	c6 01       	movw	r24, r12
   17b04:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17b08:	00 97       	sbiw	r24, 0x00	; 0
   17b0a:	f1 f0       	breq	.+60     	; 0x17b48 <POSIX_Read_Config+0xb12>
   17b0c:	de 01       	movw	r26, r28
   17b0e:	af 57       	subi	r26, 0x7F	; 127
   17b10:	bf 4f       	sbci	r27, 0xFF	; 255
   17b12:	7d 01       	movw	r14, r26
   17b14:	0f ef       	ldi	r16, 0xFF	; 255
   17b16:	10 e0       	ldi	r17, 0x00	; 0
   17b18:	20 e0       	ldi	r18, 0x00	; 0
   17b1a:	30 e0       	ldi	r19, 0x00	; 0
   17b1c:	40 e0       	ldi	r20, 0x00	; 0
   17b1e:	50 e0       	ldi	r21, 0x00	; 0
   17b20:	ba 01       	movw	r22, r20
                    ++errors;
   17b22:	8c 0d       	add	r24, r12
   17b24:	9d 1d       	adc	r25, r13
   17b26:	e7 d9       	rcall	.-3122   	; 0x16ef6 <assign_value>
                SS80p->VOLUME.MAX_HEAD = val;
   17b28:	67 2b       	or	r22, r23
   17b2a:	68 2b       	or	r22, r24
   17b2c:	69 2b       	or	r22, r25
   17b2e:	19 f4       	brne	.+6      	; 0x17b36 <POSIX_Read_Config+0xb00>
   17b30:	bf ef       	ldi	r27, 0xFF	; 255
   17b32:	ab 1a       	sub	r10, r27
   17b34:	bb 0a       	sbc	r11, r27
   17b36:	cf 57       	subi	r28, 0x7F	; 127
   17b38:	df 4f       	sbci	r29, 0xFF	; 255
            }
            else if( (ind = token(ptr,"MAX_SECTOR")) )
   17b3a:	88 81       	ld	r24, Y
   17b3c:	c1 58       	subi	r28, 0x81	; 129
   17b3e:	d0 40       	sbci	r29, 0x00	; 0
   17b40:	f2 01       	movw	r30, r4
   17b42:	ee 5b       	subi	r30, 0xBE	; 190
   17b44:	ff 4f       	sbci	r31, 0xFF	; 255
   17b46:	18 c1       	rjmp	.+560    	; 0x17d78 <POSIX_Read_Config+0xd42>
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   17b48:	6b e1       	ldi	r22, 0x1B	; 27
   17b4a:	75 e1       	ldi	r23, 0x15	; 21
   17b4c:	c6 01       	movw	r24, r12
   17b4e:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17b52:	00 97       	sbiw	r24, 0x00	; 0
   17b54:	09 f1       	breq	.+66     	; 0x17b98 <POSIX_Read_Config+0xb62>
   17b56:	fe 01       	movw	r30, r28
   17b58:	ef 57       	subi	r30, 0x7F	; 127
   17b5a:	ff 4f       	sbci	r31, 0xFF	; 255
   17b5c:	7f 01       	movw	r14, r30
   17b5e:	0f ef       	ldi	r16, 0xFF	; 255
   17b60:	1f ef       	ldi	r17, 0xFF	; 255
   17b62:	20 e0       	ldi	r18, 0x00	; 0
   17b64:	30 e0       	ldi	r19, 0x00	; 0
   17b66:	40 e0       	ldi	r20, 0x00	; 0
   17b68:	50 e0       	ldi	r21, 0x00	; 0
   17b6a:	ba 01       	movw	r22, r20
                    ++errors;
   17b6c:	8c 0d       	add	r24, r12
   17b6e:	9d 1d       	adc	r25, r13
   17b70:	c2 d9       	rcall	.-3196   	; 0x16ef6 <assign_value>
                SS80p->VOLUME.MAX_SECTOR = val;
   17b72:	67 2b       	or	r22, r23
   17b74:	68 2b       	or	r22, r24
   17b76:	69 2b       	or	r22, r25
   17b78:	19 f4       	brne	.+6      	; 0x17b80 <POSIX_Read_Config+0xb4a>
   17b7a:	ff ef       	ldi	r31, 0xFF	; 255
   17b7c:	af 1a       	sub	r10, r31
   17b7e:	bf 0a       	sbc	r11, r31
   17b80:	cf 57       	subi	r28, 0x7F	; 127
   17b82:	df 4f       	sbci	r29, 0xFF	; 255
   17b84:	88 81       	ld	r24, Y
   17b86:	99 81       	ldd	r25, Y+1	; 0x01
   17b88:	c1 58       	subi	r28, 0x81	; 129
            }
            else if( (ind = token(ptr,"MAX_BLOCK_NUMBER")) )
   17b8a:	d0 40       	sbci	r29, 0x00	; 0
   17b8c:	f2 01       	movw	r30, r4
   17b8e:	ed 5b       	subi	r30, 0xBD	; 189
   17b90:	ff 4f       	sbci	r31, 0xFF	; 255
   17b92:	91 83       	std	Z+1, r25	; 0x01
   17b94:	80 83       	st	Z, r24
   17b96:	fb ca       	rjmp	.-2570   	; 0x1718e <POSIX_Read_Config+0x158>
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFFFFFUL, &val) )
   17b98:	66 e2       	ldi	r22, 0x26	; 38
   17b9a:	75 e1       	ldi	r23, 0x15	; 21
   17b9c:	c6 01       	movw	r24, r12
   17b9e:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17ba2:	00 97       	sbiw	r24, 0x00	; 0
   17ba4:	21 f1       	breq	.+72     	; 0x17bee <POSIX_Read_Config+0xbb8>
   17ba6:	9e 01       	movw	r18, r28
   17ba8:	2f 57       	subi	r18, 0x7F	; 127
   17baa:	3f 4f       	sbci	r19, 0xFF	; 255
   17bac:	79 01       	movw	r14, r18
   17bae:	0f ef       	ldi	r16, 0xFF	; 255
   17bb0:	1f ef       	ldi	r17, 0xFF	; 255
   17bb2:	98 01       	movw	r18, r16
   17bb4:	40 e0       	ldi	r20, 0x00	; 0
   17bb6:	50 e0       	ldi	r21, 0x00	; 0
   17bb8:	ba 01       	movw	r22, r20
                    ++errors;
   17bba:	8c 0d       	add	r24, r12
   17bbc:	9d 1d       	adc	r25, r13
                SS80p->VOLUME.MAX_BLOCK_NUMBER = val;
   17bbe:	9b d9       	rcall	.-3274   	; 0x16ef6 <assign_value>
   17bc0:	67 2b       	or	r22, r23
   17bc2:	68 2b       	or	r22, r24
   17bc4:	69 2b       	or	r22, r25
   17bc6:	19 f4       	brne	.+6      	; 0x17bce <POSIX_Read_Config+0xb98>
   17bc8:	3f ef       	ldi	r19, 0xFF	; 255
   17bca:	a3 1a       	sub	r10, r19
   17bcc:	b3 0a       	sbc	r11, r19
   17bce:	cf 57       	subi	r28, 0x7F	; 127
   17bd0:	df 4f       	sbci	r29, 0xFF	; 255
   17bd2:	88 81       	ld	r24, Y
   17bd4:	99 81       	ldd	r25, Y+1	; 0x01
   17bd6:	aa 81       	ldd	r26, Y+2	; 0x02
   17bd8:	bb 81       	ldd	r27, Y+3	; 0x03
   17bda:	c1 58       	subi	r28, 0x81	; 129
   17bdc:	d0 40       	sbci	r29, 0x00	; 0
            }
            else if( (ind = token(ptr,"INTERLEAVE")) )
   17bde:	f2 01       	movw	r30, r4
   17be0:	eb 5b       	subi	r30, 0xBB	; 187
   17be2:	ff 4f       	sbci	r31, 0xFF	; 255
   17be4:	80 83       	st	Z, r24
   17be6:	91 83       	std	Z+1, r25	; 0x01
   17be8:	a2 83       	std	Z+2, r26	; 0x02
   17bea:	b3 83       	std	Z+3, r27	; 0x03
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   17bec:	d0 ca       	rjmp	.-2656   	; 0x1718e <POSIX_Read_Config+0x158>
   17bee:	6a ed       	ldi	r22, 0xDA	; 218
   17bf0:	74 e1       	ldi	r23, 0x14	; 20
   17bf2:	c6 01       	movw	r24, r12
   17bf4:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17bf8:	00 97       	sbiw	r24, 0x00	; 0
   17bfa:	f1 f0       	breq	.+60     	; 0x17c38 <POSIX_Read_Config+0xc02>
   17bfc:	de 01       	movw	r26, r28
   17bfe:	af 57       	subi	r26, 0x7F	; 127
   17c00:	bf 4f       	sbci	r27, 0xFF	; 255
   17c02:	7d 01       	movw	r14, r26
   17c04:	0f ef       	ldi	r16, 0xFF	; 255
   17c06:	10 e0       	ldi	r17, 0x00	; 0
   17c08:	20 e0       	ldi	r18, 0x00	; 0
   17c0a:	30 e0       	ldi	r19, 0x00	; 0
   17c0c:	40 e0       	ldi	r20, 0x00	; 0
   17c0e:	50 e0       	ldi	r21, 0x00	; 0
                    ++errors;
   17c10:	ba 01       	movw	r22, r20
   17c12:	8c 0d       	add	r24, r12
                SS80p->VOLUME.INTERLEAVE = val;
   17c14:	9d 1d       	adc	r25, r13
   17c16:	6f d9       	rcall	.-3362   	; 0x16ef6 <assign_value>
   17c18:	67 2b       	or	r22, r23
   17c1a:	68 2b       	or	r22, r24
   17c1c:	69 2b       	or	r22, r25
   17c1e:	19 f4       	brne	.+6      	; 0x17c26 <POSIX_Read_Config+0xbf0>
   17c20:	bf ef       	ldi	r27, 0xFF	; 255
   17c22:	ab 1a       	sub	r10, r27
   17c24:	bb 0a       	sbc	r11, r27
            }
            else
            {
                printf("Unexpected SS80 VOLUME token: %s, at line:%d\n", ptr,lines);
   17c26:	cf 57       	subi	r28, 0x7F	; 127
   17c28:	df 4f       	sbci	r29, 0xFF	; 255
   17c2a:	88 81       	ld	r24, Y
   17c2c:	c1 58       	subi	r28, 0x81	; 129
   17c2e:	d0 40       	sbci	r29, 0x00	; 0
   17c30:	f2 01       	movw	r30, r4
   17c32:	e7 5b       	subi	r30, 0xB7	; 183
   17c34:	ff 4f       	sbci	r31, 0xFF	; 255
   17c36:	a0 c0       	rjmp	.+320    	; 0x17d78 <POSIX_Read_Config+0xd42>
   17c38:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <lines+0x1>
   17c3c:	8f 93       	push	r24
   17c3e:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <lines>
                ++errors;
   17c42:	8f 93       	push	r24
   17c44:	df 92       	push	r13
   17c46:	cf 92       	push	r12
            }
            break;

#ifdef AMIGO
        case AMIGO_STATE:
            if(token(ptr,"HEADER"))
   17c48:	89 e8       	ldi	r24, 0x89	; 137
   17c4a:	9e e2       	ldi	r25, 0x2E	; 46
   17c4c:	1f 92       	push	r1
   17c4e:	9f 93       	push	r25
   17c50:	8f 93       	push	r24
   17c52:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
            {
                push_state(state);
   17c56:	ef ef       	ldi	r30, 0xFF	; 255
   17c58:	ae 1a       	sub	r10, r30
   17c5a:	be 0a       	sbc	r11, r30
   17c5c:	06 c2       	rjmp	.+1036   	; 0x1806a <POSIX_Read_Config+0x1034>
                state = AMIGO_HEADER;
   17c5e:	63 e1       	ldi	r22, 0x13	; 19
   17c60:	74 e1       	ldi	r23, 0x14	; 20
   17c62:	c6 01       	movw	r24, r12
   17c64:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
            }
            else if(token(ptr,"CONFIG"))
   17c68:	89 2b       	or	r24, r25
   17c6a:	39 f0       	breq	.+14     	; 0x17c7a <POSIX_Read_Config+0xc44>
   17c6c:	87 e0       	ldi	r24, 0x07	; 7
   17c6e:	90 e0       	ldi	r25, 0x00	; 0
   17c70:	12 d9       	rcall	.-3548   	; 0x16e96 <push_state>
   17c72:	28 e0       	ldi	r18, 0x08	; 8
            {
                push_state(state);
   17c74:	82 2e       	mov	r8, r18
   17c76:	91 2c       	mov	r9, r1
   17c78:	8a ca       	rjmp	.-2796   	; 0x1718e <POSIX_Read_Config+0x158>
   17c7a:	6c e0       	ldi	r22, 0x0C	; 12
                state = AMIGO_CONFIG;
   17c7c:	74 e1       	ldi	r23, 0x14	; 20
   17c7e:	c6 01       	movw	r24, r12
   17c80:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
            }
            else if(token(ptr,"GEOMETRY"))
   17c84:	89 2b       	or	r24, r25
   17c86:	39 f0       	breq	.+14     	; 0x17c96 <POSIX_Read_Config+0xc60>
   17c88:	87 e0       	ldi	r24, 0x07	; 7
   17c8a:	90 e0       	ldi	r25, 0x00	; 0
   17c8c:	04 d9       	rcall	.-3576   	; 0x16e96 <push_state>
   17c8e:	99 e0       	ldi	r25, 0x09	; 9
   17c90:	89 2e       	mov	r8, r25
            {
                push_state(state);
   17c92:	91 2c       	mov	r9, r1
   17c94:	7c ca       	rjmp	.-2824   	; 0x1718e <POSIX_Read_Config+0x158>
   17c96:	67 e3       	ldi	r22, 0x37	; 55
   17c98:	75 e1       	ldi	r23, 0x15	; 21
                state = AMIGO_GEOMETRY;
   17c9a:	c6 01       	movw	r24, r12
   17c9c:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17ca0:	89 2b       	or	r24, r25
            }
            else
            {
                printf("Unexpected AMIGO START token: %s, at line:%d\n", ptr,lines);
   17ca2:	39 f0       	breq	.+14     	; 0x17cb2 <POSIX_Read_Config+0xc7c>
   17ca4:	87 e0       	ldi	r24, 0x07	; 7
   17ca6:	90 e0       	ldi	r25, 0x00	; 0
   17ca8:	f6 d8       	rcall	.-3604   	; 0x16e96 <push_state>
   17caa:	8a e0       	ldi	r24, 0x0A	; 10
   17cac:	88 2e       	mov	r8, r24
   17cae:	91 2c       	mov	r9, r1
   17cb0:	6e ca       	rjmp	.-2852   	; 0x1718e <POSIX_Read_Config+0x158>
   17cb2:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <lines+0x1>
   17cb6:	8f 93       	push	r24
   17cb8:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <lines>
   17cbc:	8f 93       	push	r24
   17cbe:	df 92       	push	r13
   17cc0:	cf 92       	push	r12
   17cc2:	1f 92       	push	r1
   17cc4:	c7 56       	subi	r28, 0x67	; 103
   17cc6:	df 4f       	sbci	r29, 0xFF	; 255
   17cc8:	38 81       	ld	r19, Y
   17cca:	c9 59       	subi	r28, 0x99	; 153
                ++errors;
            }
            break;

        case AMIGO_HEADER:
            if( (ind = token(ptr,"DRIVE")) )
   17ccc:	d0 40       	sbci	r29, 0x00	; 0
   17cce:	3f 93       	push	r19
   17cd0:	c8 56       	subi	r28, 0x68	; 104
   17cd2:	df 4f       	sbci	r29, 0xFF	; 255
   17cd4:	48 81       	ld	r20, Y
   17cd6:	c8 59       	subi	r28, 0x98	; 152
   17cd8:	d0 40       	sbci	r29, 0x00	; 0
            {
                ptr += ind;
                printf("Skipping %s, at line:%d\n", ptr,lines);
   17cda:	c1 c1       	rjmp	.+898    	; 0x1805e <POSIX_Read_Config+0x1028>
   17cdc:	60 e4       	ldi	r22, 0x40	; 64
   17cde:	75 e1       	ldi	r23, 0x15	; 21
   17ce0:	c6 01       	movw	r24, r12
   17ce2:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17ce6:	00 97       	sbiw	r24, 0x00	; 0
   17ce8:	d1 f0       	breq	.+52     	; 0x17d1e <POSIX_Read_Config+0xce8>
   17cea:	20 91 4b 19 	lds	r18, 0x194B	; 0x80194b <lines+0x1>
   17cee:	2f 93       	push	r18
   17cf0:	20 91 4a 19 	lds	r18, 0x194A	; 0x80194a <lines>
   17cf4:	2f 93       	push	r18
   17cf6:	c8 0e       	add	r12, r24
   17cf8:	d9 1e       	adc	r13, r25
   17cfa:	df 92       	push	r13
   17cfc:	cf 92       	push	r12
   17cfe:	1f 92       	push	r1
   17d00:	ca 56       	subi	r28, 0x6A	; 106
   17d02:	df 4f       	sbci	r29, 0xFF	; 255
   17d04:	b8 81       	ld	r27, Y
   17d06:	c6 59       	subi	r28, 0x96	; 150
   17d08:	d0 40       	sbci	r29, 0x00	; 0
   17d0a:	bf 93       	push	r27
                //skip this
            }
            else if( (ind = token(ptr,"ADDRESS")) )
   17d0c:	cb 56       	subi	r28, 0x6B	; 107
   17d0e:	df 4f       	sbci	r29, 0xFF	; 255
   17d10:	e8 81       	ld	r30, Y
   17d12:	c5 59       	subi	r28, 0x95	; 149
   17d14:	d0 40       	sbci	r29, 0x00	; 0
   17d16:	ef 93       	push	r30
   17d18:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 14UL, &val) )
   17d1c:	a6 c1       	rjmp	.+844    	; 0x1806a <POSIX_Read_Config+0x1034>
   17d1e:	64 e0       	ldi	r22, 0x04	; 4
   17d20:	74 e1       	ldi	r23, 0x14	; 20
   17d22:	c6 01       	movw	r24, r12
   17d24:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17d28:	00 97       	sbiw	r24, 0x00	; 0
   17d2a:	41 f1       	breq	.+80     	; 0x17d7c <POSIX_Read_Config+0xd46>
   17d2c:	de 01       	movw	r26, r28
   17d2e:	af 57       	subi	r26, 0x7F	; 127
   17d30:	bf 4f       	sbci	r27, 0xFF	; 255
   17d32:	7d 01       	movw	r14, r26
   17d34:	0e e0       	ldi	r16, 0x0E	; 14
   17d36:	10 e0       	ldi	r17, 0x00	; 0
   17d38:	20 e0       	ldi	r18, 0x00	; 0
   17d3a:	30 e0       	ldi	r19, 0x00	; 0
   17d3c:	40 e0       	ldi	r20, 0x00	; 0
                    ++errors;
   17d3e:	50 e0       	ldi	r21, 0x00	; 0
   17d40:	ba 01       	movw	r22, r20
   17d42:	8c 0d       	add	r24, r12
                //skip this
            }
            else if( (ind = token(ptr,"ADDRESS")) )
            {
                ptr += ind;
                tmp = 0xff;
   17d44:	9d 1d       	adc	r25, r13
   17d46:	d7 d8       	rcall	.-3666   	; 0x16ef6 <assign_value>
                if (!assign_value(ptr, 0, 14UL, &val) )
                    ++errors;
                else
                    tmp = val;
   17d48:	67 2b       	or	r22, r23
   17d4a:	68 2b       	or	r22, r24
   17d4c:	69 2b       	or	r22, r25
   17d4e:	29 f4       	brne	.+10     	; 0x17d5a <POSIX_Read_Config+0xd24>
   17d50:	bf ef       	ldi	r27, 0xFF	; 255
                Devices[index].ADDRESS = tmp;
   17d52:	ab 1a       	sub	r10, r27
   17d54:	bb 0a       	sbc	r11, r27
   17d56:	8f ef       	ldi	r24, 0xFF	; 255
   17d58:	05 c0       	rjmp	.+10     	; 0x17d64 <POSIX_Read_Config+0xd2e>
   17d5a:	cf 57       	subi	r28, 0x7F	; 127
   17d5c:	df 4f       	sbci	r29, 0xFF	; 255
   17d5e:	88 81       	ld	r24, Y
   17d60:	c1 58       	subi	r28, 0x81	; 129
   17d62:	d0 40       	sbci	r29, 0x00	; 0
                AMIGOp->HEADER.ADDRESS = tmp;
   17d64:	97 e0       	ldi	r25, 0x07	; 7
   17d66:	96 9d       	mul	r25, r6
   17d68:	f0 01       	movw	r30, r0
            }
            else if( (ind = token(ptr,"PPR")) )
   17d6a:	97 9d       	mul	r25, r7
   17d6c:	f0 0d       	add	r31, r0
   17d6e:	11 24       	eor	r1, r1
   17d70:	eb 55       	subi	r30, 0x5B	; 91
   17d72:	f1 4e       	sbci	r31, 0xE1	; 225
   17d74:	81 83       	std	Z+1, r24	; 0x01
   17d76:	f1 01       	movw	r30, r2
            {
                ptr += ind;
                tmp = 0xff;
                if (!assign_value(ptr, 0, 7UL, &val) )
   17d78:	80 83       	st	Z, r24
   17d7a:	09 ca       	rjmp	.-3054   	; 0x1718e <POSIX_Read_Config+0x158>
   17d7c:	61 e3       	ldi	r22, 0x31	; 49
   17d7e:	74 e1       	ldi	r23, 0x14	; 20
   17d80:	c6 01       	movw	r24, r12
   17d82:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17d86:	00 97       	sbiw	r24, 0x00	; 0
   17d88:	39 f1       	breq	.+78     	; 0x17dd8 <POSIX_Read_Config+0xda2>
   17d8a:	9e 01       	movw	r18, r28
   17d8c:	2f 57       	subi	r18, 0x7F	; 127
   17d8e:	3f 4f       	sbci	r19, 0xFF	; 255
   17d90:	79 01       	movw	r14, r18
   17d92:	07 e0       	ldi	r16, 0x07	; 7
   17d94:	10 e0       	ldi	r17, 0x00	; 0
   17d96:	20 e0       	ldi	r18, 0x00	; 0
   17d98:	30 e0       	ldi	r19, 0x00	; 0
   17d9a:	40 e0       	ldi	r20, 0x00	; 0
   17d9c:	50 e0       	ldi	r21, 0x00	; 0
                    ++errors;
   17d9e:	ba 01       	movw	r22, r20
   17da0:	8c 0d       	add	r24, r12
   17da2:	9d 1d       	adc	r25, r13
                AMIGOp->HEADER.ADDRESS = tmp;
            }
            else if( (ind = token(ptr,"PPR")) )
            {
                ptr += ind;
                tmp = 0xff;
   17da4:	a8 d8       	rcall	.-3760   	; 0x16ef6 <assign_value>
   17da6:	67 2b       	or	r22, r23
                if (!assign_value(ptr, 0, 7UL, &val) )
                    ++errors;
                else
                    tmp = val;
   17da8:	68 2b       	or	r22, r24
   17daa:	69 2b       	or	r22, r25
   17dac:	29 f4       	brne	.+10     	; 0x17db8 <POSIX_Read_Config+0xd82>
   17dae:	3f ef       	ldi	r19, 0xFF	; 255
   17db0:	a3 1a       	sub	r10, r19
                Devices[index].PPR = tmp;
   17db2:	b3 0a       	sbc	r11, r19
   17db4:	8f ef       	ldi	r24, 0xFF	; 255
   17db6:	05 c0       	rjmp	.+10     	; 0x17dc2 <POSIX_Read_Config+0xd8c>
   17db8:	cf 57       	subi	r28, 0x7F	; 127
   17dba:	df 4f       	sbci	r29, 0xFF	; 255
   17dbc:	88 81       	ld	r24, Y
   17dbe:	c1 58       	subi	r28, 0x81	; 129
   17dc0:	d0 40       	sbci	r29, 0x00	; 0
   17dc2:	97 e0       	ldi	r25, 0x07	; 7
                AMIGOp->HEADER.PPR = tmp;
   17dc4:	96 9d       	mul	r25, r6
   17dc6:	f0 01       	movw	r30, r0
            }
            else if( (ind = token(ptr,"FILE")) )
   17dc8:	97 9d       	mul	r25, r7
   17dca:	f0 0d       	add	r31, r0
   17dcc:	11 24       	eor	r1, r1
   17dce:	eb 55       	subi	r30, 0x5B	; 91
   17dd0:	f1 4e       	sbci	r31, 0xE1	; 225
   17dd2:	82 83       	std	Z+2, r24	; 0x02
   17dd4:	d1 01       	movw	r26, r2
            {
                ptr += ind;
                ptr = skipspaces(ptr);
   17dd6:	bb cb       	rjmp	.-2186   	; 0x1754e <POSIX_Read_Config+0x518>
   17dd8:	65 e3       	ldi	r22, 0x35	; 53
   17dda:	74 e1       	ldi	r23, 0x14	; 20
   17ddc:	c6 01       	movw	r24, r12
                if(*ptr == '=')
   17dde:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17de2:	00 97       	sbiw	r24, 0x00	; 0
   17de4:	b1 f0       	breq	.+44     	; 0x17e12 <POSIX_Read_Config+0xddc>
                {
                    ++ptr;
                    ptr = skipspaces(ptr);
   17de6:	8c 0d       	add	r24, r12
   17de8:	9d 1d       	adc	r25, r13
   17dea:	0e 94 77 30 	call	0x60ee	; 0x60ee <skipspaces>
                }
                strncpy(AMIGOp->HEADER.NAME,ptr, MAX_FILE_NAME_LEN-1);
   17dee:	fc 01       	movw	r30, r24
   17df0:	20 81       	ld	r18, Z
   17df2:	2d 33       	cpi	r18, 0x3D	; 61
   17df4:	19 f4       	brne	.+6      	; 0x17dfc <POSIX_Read_Config+0xdc6>
   17df6:	01 96       	adiw	r24, 0x01	; 1
                AMIGOp->HEADER.NAME[MAX_FILE_NAME_LEN-1] = 0;
   17df8:	0e 94 77 30 	call	0x60ee	; 0x60ee <skipspaces>
   17dfc:	4f e1       	ldi	r20, 0x1F	; 31
            }
            else
            {
                printf("Unexpected HEADER CONFIG token: %s, at line:%d\n", ptr,lines);
   17dfe:	50 e0       	ldi	r21, 0x00	; 0
   17e00:	bc 01       	movw	r22, r24
   17e02:	c1 01       	movw	r24, r2
   17e04:	02 96       	adiw	r24, 0x02	; 2
   17e06:	0e 94 1a 30 	call	0x6034	; 0x6034 <strncpy>
   17e0a:	d1 01       	movw	r26, r2
   17e0c:	91 96       	adiw	r26, 0x21	; 33
   17e0e:	1c 92       	st	X, r1
   17e10:	be c9       	rjmp	.-3204   	; 0x1718e <POSIX_Read_Config+0x158>
   17e12:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <lines+0x1>
   17e16:	8f 93       	push	r24
   17e18:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <lines>
   17e1c:	8f 93       	push	r24
   17e1e:	df 92       	push	r13
   17e20:	cf 92       	push	r12
   17e22:	1f 92       	push	r1
   17e24:	cd 56       	subi	r28, 0x6D	; 109
   17e26:	df 4f       	sbci	r29, 0xFF	; 255
                ++errors;
            }
            break;

        case AMIGO_CONFIG:
            if( (ind = token(ptr,"ID")) )
   17e28:	b8 81       	ld	r27, Y
   17e2a:	c3 59       	subi	r28, 0x93	; 147
   17e2c:	d0 40       	sbci	r29, 0x00	; 0
   17e2e:	bf 93       	push	r27
   17e30:	ce 56       	subi	r28, 0x6E	; 110
   17e32:	df 4f       	sbci	r29, 0xFF	; 255
   17e34:	e8 81       	ld	r30, Y
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFFFUL, &val) )
   17e36:	c2 59       	subi	r28, 0x92	; 146
   17e38:	d0 40       	sbci	r29, 0x00	; 0
   17e3a:	f6 c0       	rjmp	.+492    	; 0x18028 <POSIX_Read_Config+0xff2>
   17e3c:	6a e3       	ldi	r22, 0x3A	; 58
   17e3e:	74 e1       	ldi	r23, 0x14	; 20
   17e40:	c6 01       	movw	r24, r12
   17e42:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17e46:	00 97       	sbiw	r24, 0x00	; 0
   17e48:	f9 f0       	breq	.+62     	; 0x17e88 <POSIX_Read_Config+0xe52>
   17e4a:	de 01       	movw	r26, r28
   17e4c:	af 57       	subi	r26, 0x7F	; 127
   17e4e:	bf 4f       	sbci	r27, 0xFF	; 255
   17e50:	7d 01       	movw	r14, r26
   17e52:	0f ef       	ldi	r16, 0xFF	; 255
   17e54:	1f ef       	ldi	r17, 0xFF	; 255
   17e56:	20 e0       	ldi	r18, 0x00	; 0
   17e58:	30 e0       	ldi	r19, 0x00	; 0
   17e5a:	40 e0       	ldi	r20, 0x00	; 0
                    ++errors;
   17e5c:	50 e0       	ldi	r21, 0x00	; 0
   17e5e:	ba 01       	movw	r22, r20
   17e60:	8c 0d       	add	r24, r12
                AMIGOp->CONFIG.ID = val;
   17e62:	9d 1d       	adc	r25, r13
   17e64:	48 d8       	rcall	.-3952   	; 0x16ef6 <assign_value>
   17e66:	67 2b       	or	r22, r23
   17e68:	68 2b       	or	r22, r24
   17e6a:	69 2b       	or	r22, r25
   17e6c:	19 f4       	brne	.+6      	; 0x17e74 <POSIX_Read_Config+0xe3e>
   17e6e:	bf ef       	ldi	r27, 0xFF	; 255
   17e70:	ab 1a       	sub	r10, r27
   17e72:	bb 0a       	sbc	r11, r27
   17e74:	cf 57       	subi	r28, 0x7F	; 127
            }
            else
            {
                printf("Unexpected AMIGO CONFIG token: %s, at line:%d\n", ptr,lines);
   17e76:	df 4f       	sbci	r29, 0xFF	; 255
   17e78:	88 81       	ld	r24, Y
   17e7a:	99 81       	ldd	r25, Y+1	; 0x01
   17e7c:	c1 58       	subi	r28, 0x81	; 129
   17e7e:	d0 40       	sbci	r29, 0x00	; 0
   17e80:	f1 01       	movw	r30, r2
   17e82:	94 a3       	std	Z+36, r25	; 0x24
   17e84:	83 a3       	std	Z+35, r24	; 0x23
   17e86:	83 c9       	rjmp	.-3322   	; 0x1718e <POSIX_Read_Config+0x158>
   17e88:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <lines+0x1>
   17e8c:	8f 93       	push	r24
   17e8e:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <lines>
   17e92:	8f 93       	push	r24
   17e94:	df 92       	push	r13
   17e96:	cf 92       	push	r12
   17e98:	1f 92       	push	r1
   17e9a:	c0 57       	subi	r28, 0x70	; 112
   17e9c:	df 4f       	sbci	r29, 0xFF	; 255
   17e9e:	f8 81       	ld	r31, Y
   17ea0:	c0 59       	subi	r28, 0x90	; 144
                ++errors;
   17ea2:	d0 40       	sbci	r29, 0x00	; 0
   17ea4:	ff 93       	push	r31
   17ea6:	c1 57       	subi	r28, 0x71	; 113
   17ea8:	df 4f       	sbci	r29, 0xFF	; 255
            }
            break;

        case AMIGO_GEOMETRY:
            if( (ind = token(ptr,"BYTES_PER_SECTOR")) )
   17eaa:	28 81       	ld	r18, Y
   17eac:	cf 58       	subi	r28, 0x8F	; 143
   17eae:	d0 40       	sbci	r29, 0x00	; 0
   17eb0:	2f 93       	push	r18
   17eb2:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   17eb6:	3f ef       	ldi	r19, 0xFF	; 255
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0x1000UL, &val) )
   17eb8:	a3 1a       	sub	r10, r19
   17eba:	b3 0a       	sbc	r11, r19
   17ebc:	d6 c0       	rjmp	.+428    	; 0x1806a <POSIX_Read_Config+0x1034>
   17ebe:	66 e4       	ldi	r22, 0x46	; 70
   17ec0:	75 e1       	ldi	r23, 0x15	; 21
   17ec2:	c6 01       	movw	r24, r12
   17ec4:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17ec8:	00 97       	sbiw	r24, 0x00	; 0
   17eca:	f9 f0       	breq	.+62     	; 0x17f0a <POSIX_Read_Config+0xed4>
   17ecc:	de 01       	movw	r26, r28
   17ece:	af 57       	subi	r26, 0x7F	; 127
   17ed0:	bf 4f       	sbci	r27, 0xFF	; 255
   17ed2:	7d 01       	movw	r14, r26
   17ed4:	00 e0       	ldi	r16, 0x00	; 0
   17ed6:	10 e1       	ldi	r17, 0x10	; 16
   17ed8:	20 e0       	ldi	r18, 0x00	; 0
   17eda:	30 e0       	ldi	r19, 0x00	; 0
   17edc:	40 e0       	ldi	r20, 0x00	; 0
                    ++errors;
   17ede:	50 e0       	ldi	r21, 0x00	; 0
   17ee0:	ba 01       	movw	r22, r20
   17ee2:	8c 0d       	add	r24, r12
                AMIGOp->GEOMETRY.BYTES_PER_SECTOR = val;
   17ee4:	9d 1d       	adc	r25, r13
   17ee6:	07 d8       	rcall	.-4082   	; 0x16ef6 <assign_value>
   17ee8:	67 2b       	or	r22, r23
   17eea:	68 2b       	or	r22, r24
   17eec:	69 2b       	or	r22, r25
   17eee:	19 f4       	brne	.+6      	; 0x17ef6 <POSIX_Read_Config+0xec0>
   17ef0:	bf ef       	ldi	r27, 0xFF	; 255
   17ef2:	ab 1a       	sub	r10, r27
   17ef4:	bb 0a       	sbc	r11, r27
   17ef6:	cf 57       	subi	r28, 0x7F	; 127
            }
            else if( (ind = token(ptr,"SECTORS_PER_TRACK")) )
   17ef8:	df 4f       	sbci	r29, 0xFF	; 255
   17efa:	88 81       	ld	r24, Y
   17efc:	99 81       	ldd	r25, Y+1	; 0x01
   17efe:	c1 58       	subi	r28, 0x81	; 129
   17f00:	d0 40       	sbci	r29, 0x00	; 0
   17f02:	f1 01       	movw	r30, r2
   17f04:	96 a3       	std	Z+38, r25	; 0x26
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   17f06:	85 a3       	std	Z+37, r24	; 0x25
   17f08:	42 c9       	rjmp	.-3452   	; 0x1718e <POSIX_Read_Config+0x158>
   17f0a:	67 e5       	ldi	r22, 0x57	; 87
   17f0c:	75 e1       	ldi	r23, 0x15	; 21
   17f0e:	c6 01       	movw	r24, r12
   17f10:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17f14:	00 97       	sbiw	r24, 0x00	; 0
   17f16:	11 f1       	breq	.+68     	; 0x17f5c <POSIX_Read_Config+0xf26>
   17f18:	9e 01       	movw	r18, r28
   17f1a:	2f 57       	subi	r18, 0x7F	; 127
   17f1c:	3f 4f       	sbci	r19, 0xFF	; 255
   17f1e:	79 01       	movw	r14, r18
   17f20:	0f ef       	ldi	r16, 0xFF	; 255
   17f22:	10 e0       	ldi	r17, 0x00	; 0
   17f24:	20 e0       	ldi	r18, 0x00	; 0
   17f26:	30 e0       	ldi	r19, 0x00	; 0
   17f28:	40 e0       	ldi	r20, 0x00	; 0
   17f2a:	50 e0       	ldi	r21, 0x00	; 0
                    ++errors;
   17f2c:	ba 01       	movw	r22, r20
   17f2e:	8c 0d       	add	r24, r12
   17f30:	9d 1d       	adc	r25, r13
                AMIGOp->GEOMETRY.SECTORS_PER_TRACK = val;
   17f32:	0e 94 7b b7 	call	0x16ef6	; 0x16ef6 <assign_value>
   17f36:	67 2b       	or	r22, r23
   17f38:	68 2b       	or	r22, r24
   17f3a:	69 2b       	or	r22, r25
   17f3c:	19 f4       	brne	.+6      	; 0x17f44 <POSIX_Read_Config+0xf0e>
   17f3e:	3f ef       	ldi	r19, 0xFF	; 255
   17f40:	a3 1a       	sub	r10, r19
   17f42:	b3 0a       	sbc	r11, r19
   17f44:	cf 57       	subi	r28, 0x7F	; 127
   17f46:	df 4f       	sbci	r29, 0xFF	; 255
   17f48:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"HEADS")) )
   17f4a:	99 81       	ldd	r25, Y+1	; 0x01
   17f4c:	c1 58       	subi	r28, 0x81	; 129
   17f4e:	d0 40       	sbci	r29, 0x00	; 0
   17f50:	d1 01       	movw	r26, r2
   17f52:	98 96       	adiw	r26, 0x28	; 40
   17f54:	9c 93       	st	X, r25
   17f56:	8e 93       	st	-X, r24
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   17f58:	97 97       	sbiw	r26, 0x27	; 39
   17f5a:	19 c9       	rjmp	.-3534   	; 0x1718e <POSIX_Read_Config+0x158>
   17f5c:	69 e6       	ldi	r22, 0x69	; 105
   17f5e:	75 e1       	ldi	r23, 0x15	; 21
   17f60:	c6 01       	movw	r24, r12
   17f62:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17f66:	00 97       	sbiw	r24, 0x00	; 0
   17f68:	11 f1       	breq	.+68     	; 0x17fae <POSIX_Read_Config+0xf78>
   17f6a:	fe 01       	movw	r30, r28
   17f6c:	ef 57       	subi	r30, 0x7F	; 127
   17f6e:	ff 4f       	sbci	r31, 0xFF	; 255
   17f70:	7f 01       	movw	r14, r30
   17f72:	0f ef       	ldi	r16, 0xFF	; 255
   17f74:	10 e0       	ldi	r17, 0x00	; 0
   17f76:	20 e0       	ldi	r18, 0x00	; 0
   17f78:	30 e0       	ldi	r19, 0x00	; 0
   17f7a:	40 e0       	ldi	r20, 0x00	; 0
   17f7c:	50 e0       	ldi	r21, 0x00	; 0
                    ++errors;
   17f7e:	ba 01       	movw	r22, r20
   17f80:	8c 0d       	add	r24, r12
   17f82:	9d 1d       	adc	r25, r13
                AMIGOp->GEOMETRY.HEADS = val;
   17f84:	0e 94 7b b7 	call	0x16ef6	; 0x16ef6 <assign_value>
   17f88:	67 2b       	or	r22, r23
   17f8a:	68 2b       	or	r22, r24
   17f8c:	69 2b       	or	r22, r25
   17f8e:	19 f4       	brne	.+6      	; 0x17f96 <POSIX_Read_Config+0xf60>
   17f90:	ff ef       	ldi	r31, 0xFF	; 255
   17f92:	af 1a       	sub	r10, r31
   17f94:	bf 0a       	sbc	r11, r31
   17f96:	cf 57       	subi	r28, 0x7F	; 127
   17f98:	df 4f       	sbci	r29, 0xFF	; 255
   17f9a:	88 81       	ld	r24, Y
            }
            else if( (ind = token(ptr,"CYLINDERS")) )
   17f9c:	99 81       	ldd	r25, Y+1	; 0x01
   17f9e:	c1 58       	subi	r28, 0x81	; 129
   17fa0:	d0 40       	sbci	r29, 0x00	; 0
   17fa2:	d1 01       	movw	r26, r2
   17fa4:	9a 96       	adiw	r26, 0x2a	; 42
   17fa6:	9c 93       	st	X, r25
   17fa8:	8e 93       	st	-X, r24
            {
                ptr += ind;
                if (!assign_value(ptr, 0, 0xFFUL, &val) )
   17faa:	99 97       	sbiw	r26, 0x29	; 41
   17fac:	f0 c8       	rjmp	.-3616   	; 0x1718e <POSIX_Read_Config+0x158>
   17fae:	6f e6       	ldi	r22, 0x6F	; 111
   17fb0:	75 e1       	ldi	r23, 0x15	; 21
   17fb2:	c6 01       	movw	r24, r12
   17fb4:	0e 94 b7 31 	call	0x636e	; 0x636e <token>
   17fb8:	00 97       	sbiw	r24, 0x00	; 0
   17fba:	11 f1       	breq	.+68     	; 0x18000 <POSIX_Read_Config+0xfca>
   17fbc:	fe 01       	movw	r30, r28
   17fbe:	ef 57       	subi	r30, 0x7F	; 127
   17fc0:	ff 4f       	sbci	r31, 0xFF	; 255
   17fc2:	7f 01       	movw	r14, r30
   17fc4:	0f ef       	ldi	r16, 0xFF	; 255
   17fc6:	10 e0       	ldi	r17, 0x00	; 0
   17fc8:	20 e0       	ldi	r18, 0x00	; 0
   17fca:	30 e0       	ldi	r19, 0x00	; 0
   17fcc:	40 e0       	ldi	r20, 0x00	; 0
   17fce:	50 e0       	ldi	r21, 0x00	; 0
                    ++errors;
   17fd0:	ba 01       	movw	r22, r20
   17fd2:	8c 0d       	add	r24, r12
   17fd4:	9d 1d       	adc	r25, r13
                AMIGOp->GEOMETRY.CYLINDERS = val;
   17fd6:	0e 94 7b b7 	call	0x16ef6	; 0x16ef6 <assign_value>
   17fda:	67 2b       	or	r22, r23
   17fdc:	68 2b       	or	r22, r24
   17fde:	69 2b       	or	r22, r25
   17fe0:	19 f4       	brne	.+6      	; 0x17fe8 <POSIX_Read_Config+0xfb2>
   17fe2:	ff ef       	ldi	r31, 0xFF	; 255
   17fe4:	af 1a       	sub	r10, r31
   17fe6:	bf 0a       	sbc	r11, r31
   17fe8:	cf 57       	subi	r28, 0x7F	; 127
   17fea:	df 4f       	sbci	r29, 0xFF	; 255
   17fec:	88 81       	ld	r24, Y
            }
            else
            {
                printf("Unexpected AMIGO GEMETRY token: %s, at line:%d\n", ptr,lines);
   17fee:	99 81       	ldd	r25, Y+1	; 0x01
   17ff0:	c1 58       	subi	r28, 0x81	; 129
   17ff2:	d0 40       	sbci	r29, 0x00	; 0
   17ff4:	d1 01       	movw	r26, r2
   17ff6:	9c 96       	adiw	r26, 0x2c	; 44
   17ff8:	9c 93       	st	X, r25
   17ffa:	8e 93       	st	-X, r24
   17ffc:	9b 97       	sbiw	r26, 0x2b	; 43
   17ffe:	c7 c8       	rjmp	.-3698   	; 0x1718e <POSIX_Read_Config+0x158>
   18000:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <lines+0x1>
   18004:	8f 93       	push	r24
   18006:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <lines>
   1800a:	8f 93       	push	r24
   1800c:	df 92       	push	r13
   1800e:	cf 92       	push	r12
   18010:	1f 92       	push	r1
   18012:	c3 57       	subi	r28, 0x73	; 115
   18014:	df 4f       	sbci	r29, 0xFF	; 255
   18016:	b8 81       	ld	r27, Y
   18018:	cd 58       	subi	r28, 0x8D	; 141
   1801a:	d0 40       	sbci	r29, 0x00	; 0
                ++errors;
   1801c:	bf 93       	push	r27
   1801e:	c4 57       	subi	r28, 0x74	; 116
   18020:	df 4f       	sbci	r29, 0xFF	; 255
   18022:	e8 81       	ld	r30, Y
            }
            break;
#endif // #ifdef AMIGO

        default:
            printf("Unexpected STATE: %s, at line:%d\n", ptr,lines);
   18024:	cc 58       	subi	r28, 0x8C	; 140
   18026:	d0 40       	sbci	r29, 0x00	; 0
   18028:	ef 93       	push	r30
   1802a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1802e:	ff ef       	ldi	r31, 0xFF	; 255
   18030:	af 1a       	sub	r10, r31
   18032:	bf 0a       	sbc	r11, r31
   18034:	1a c0       	rjmp	.+52     	; 0x1806a <POSIX_Read_Config+0x1034>
   18036:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <lines+0x1>
   1803a:	8f 93       	push	r24
   1803c:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <lines>
   18040:	8f 93       	push	r24
   18042:	df 92       	push	r13
   18044:	cf 92       	push	r12
   18046:	1f 92       	push	r1
   18048:	c6 57       	subi	r28, 0x76	; 118
   1804a:	df 4f       	sbci	r29, 0xFF	; 255
   1804c:	38 81       	ld	r19, Y
   1804e:	ca 58       	subi	r28, 0x8A	; 138
   18050:	d0 40       	sbci	r29, 0x00	; 0
            ++errors;
   18052:	3f 93       	push	r19
   18054:	c7 57       	subi	r28, 0x77	; 119
   18056:	df 4f       	sbci	r29, 0xFF	; 255
            break;
   18058:	48 81       	ld	r20, Y
   1805a:	c9 58       	subi	r28, 0x89	; 137
   1805c:	d0 40       	sbci	r29, 0x00	; 0
   1805e:	4f 93       	push	r20
   18060:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>

        } // switch
    } //while
    if(state != START_STATE)
   18064:	8f ef       	ldi	r24, 0xFF	; 255
   18066:	a8 1a       	sub	r10, r24
   18068:	b8 0a       	sbc	r11, r24
    {
        printf("Missing END statement at line:%d\n", lines);
   1806a:	0f b6       	in	r0, 0x3f	; 63
   1806c:	f8 94       	cli
   1806e:	de bf       	out	0x3e, r29	; 62
   18070:	0f be       	out	0x3f, r0	; 63
   18072:	cd bf       	out	0x3d, r28	; 61
   18074:	8c c8       	rjmp	.-3816   	; 0x1718e <POSIX_Read_Config+0x158>
   18076:	81 14       	cp	r8, r1
   18078:	91 04       	cpc	r9, r1
   1807a:	a9 f0       	breq	.+42     	; 0x180a6 <POSIX_Read_Config+0x1070>
   1807c:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <lines+0x1>
   18080:	8f 93       	push	r24
   18082:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <lines>
        ++errors;
   18086:	8f 93       	push	r24
   18088:	8f e6       	ldi	r24, 0x6F	; 111
   1808a:	9d e2       	ldi	r25, 0x2D	; 45
   1808c:	1f 92       	push	r1
   1808e:	9f 93       	push	r25
   18090:	8f 93       	push	r24
   18092:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    }
    printf("Read_Config: read(%d) lines\n", lines);
   18096:	bf ef       	ldi	r27, 0xFF	; 255
   18098:	ab 1a       	sub	r10, r27
   1809a:	bb 0a       	sbc	r11, r27
   1809c:	0f 90       	pop	r0
   1809e:	0f 90       	pop	r0
   180a0:	0f 90       	pop	r0
   180a2:	0f 90       	pop	r0
   180a4:	0f 90       	pop	r0
   180a6:	80 91 4b 19 	lds	r24, 0x194B	; 0x80194b <lines+0x1>
   180aa:	8f 93       	push	r24
   180ac:	80 91 4a 19 	lds	r24, 0x194A	; 0x80194a <lines>
    if(errors)
   180b0:	8f 93       	push	r24
   180b2:	82 e5       	ldi	r24, 0x52	; 82
   180b4:	9d e2       	ldi	r25, 0x2D	; 45
   180b6:	1f 92       	push	r1
   180b8:	9f 93       	push	r25
   180ba:	8f 93       	push	r24
   180bc:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        printf("Read_Config: ****** errors(%d) ******\n", errors);
   180c0:	0f 90       	pop	r0
   180c2:	0f 90       	pop	r0
   180c4:	0f 90       	pop	r0
   180c6:	0f 90       	pop	r0
   180c8:	0f 90       	pop	r0
   180ca:	a1 14       	cp	r10, r1
   180cc:	b1 04       	cpc	r11, r1
   180ce:	71 f0       	breq	.+28     	; 0x180ec <POSIX_Read_Config+0x10b6>
   180d0:	bf 92       	push	r11
   180d2:	af 92       	push	r10
   180d4:	8b e2       	ldi	r24, 0x2B	; 43
   180d6:	9d e2       	ldi	r25, 0x2D	; 45
   180d8:	1f 92       	push	r1

    ret = fclose(cfg);
   180da:	9f 93       	push	r25
   180dc:	8f 93       	push	r24
   180de:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   180e2:	0f 90       	pop	r0
   180e4:	0f 90       	pop	r0
   180e6:	0f 90       	pop	r0
   180e8:	0f 90       	pop	r0
    if(ret == EOF)
   180ea:	0f 90       	pop	r0
   180ec:	c9 57       	subi	r28, 0x79	; 121
    {
        perror("Read_Config - close error");
   180ee:	df 4f       	sbci	r29, 0xFF	; 255
   180f0:	88 81       	ld	r24, Y
   180f2:	99 81       	ldd	r25, Y+1	; 0x01
   180f4:	c7 58       	subi	r28, 0x87	; 135
        ++errors;
   180f6:	d0 40       	sbci	r29, 0x00	; 0
   180f8:	0e 94 7c 80 	call	0x100f8	; 0x100f8 <fclose>
   180fc:	01 96       	adiw	r24, 0x01	; 1
    }

    return(errors);
}
   180fe:	39 f4       	brne	.+14     	; 0x1810e <POSIX_Read_Config+0x10d8>
   18100:	89 e7       	ldi	r24, 0x79	; 121
   18102:	95 e1       	ldi	r25, 0x15	; 21
   18104:	0e 94 a8 7b 	call	0xf750	; 0xf750 <perror>
   18108:	c5 01       	movw	r24, r10
   1810a:	01 96       	adiw	r24, 0x01	; 1
   1810c:	01 c0       	rjmp	.+2      	; 0x18110 <POSIX_Read_Config+0x10da>
   1810e:	c5 01       	movw	r24, r10
   18110:	c6 56       	subi	r28, 0x66	; 102
   18112:	df 4f       	sbci	r29, 0xFF	; 255
   18114:	e2 e1       	ldi	r30, 0x12	; 18
   18116:	0c 94 dd e8 	jmp	0x1d1ba	; 0x1d1ba <__epilogue_restores__>

0001811a <print_var_P>:
/// @brief Display Configuration File variable
/// @param str: title
/// @param val: variable value
/// @return  void
void print_var_P(__memx const char *str, uint32_t val)
{
   1811a:	cf 92       	push	r12
   1811c:	df 92       	push	r13
   1811e:	ef 92       	push	r14
   18120:	0f 93       	push	r16
   18122:	1f 93       	push	r17
   18124:	cf 93       	push	r28
   18126:	df 93       	push	r29
   18128:	cd b7       	in	r28, 0x3d	; 61
   1812a:	de b7       	in	r29, 0x3e	; 62
   1812c:	c0 54       	subi	r28, 0x40	; 64
   1812e:	d1 09       	sbc	r29, r1
   18130:	0f b6       	in	r0, 0x3f	; 63
   18132:	f8 94       	cli
   18134:	de bf       	out	0x3e, r29	; 62
   18136:	0f be       	out	0x3f, r0	; 63
   18138:	cd bf       	out	0x3d, r28	; 61
   1813a:	6b 01       	movw	r12, r22
   1813c:	e8 2e       	mov	r14, r24
   1813e:	75 2f       	mov	r23, r21
   18140:	de 01       	movw	r26, r28
   18142:	11 96       	adiw	r26, 0x01	; 1
    char tmp[64];
    int i=0;
   18144:	80 e0       	ldi	r24, 0x00	; 0
   18146:	90 e0       	ldi	r25, 0x00	; 0
   18148:	8d 01       	movw	r16, r26
    while( *str && i < 62)
   1814a:	f6 01       	movw	r30, r12
   1814c:	5e 2d       	mov	r21, r14
   1814e:	0e 94 f8 e8 	call	0x1d1f0	; 0x1d1f0 <__xload_1>
   18152:	66 23       	and	r22, r22
   18154:	51 f0       	breq	.+20     	; 0x1816a <print_var_P+0x50>
   18156:	8e 33       	cpi	r24, 0x3E	; 62
   18158:	91 05       	cpc	r25, r1
   1815a:	39 f0       	breq	.+14     	; 0x1816a <print_var_P+0x50>
        tmp[i++] = *str++;
   1815c:	01 96       	adiw	r24, 0x01	; 1
   1815e:	5f ef       	ldi	r21, 0xFF	; 255
   18160:	c5 1a       	sub	r12, r21
   18162:	d5 0a       	sbc	r13, r21
   18164:	e5 0a       	sbc	r14, r21
   18166:	6d 93       	st	X+, r22
   18168:	f0 cf       	rjmp	.-32     	; 0x1814a <print_var_P+0x30>
    tmp[i++] = 0;
   1816a:	f8 01       	movw	r30, r16
   1816c:	e8 0f       	add	r30, r24
   1816e:	f9 1f       	adc	r31, r25
   18170:	10 82       	st	Z, r1

    printf("    %-25s = %8lxH (%ld)\n", tmp, val, val); 
   18172:	7f 93       	push	r23
   18174:	4f 93       	push	r20
   18176:	3f 93       	push	r19
   18178:	2f 93       	push	r18
   1817a:	7f 93       	push	r23
   1817c:	4f 93       	push	r20
   1817e:	3f 93       	push	r19
   18180:	2f 93       	push	r18
   18182:	1f 93       	push	r17
   18184:	0f 93       	push	r16
   18186:	82 e1       	ldi	r24, 0x12	; 18
   18188:	9d e2       	ldi	r25, 0x2D	; 45
   1818a:	1f 92       	push	r1
   1818c:	9f 93       	push	r25
   1818e:	8f 93       	push	r24
   18190:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
}
   18194:	0f b6       	in	r0, 0x3f	; 63
   18196:	f8 94       	cli
   18198:	de bf       	out	0x3e, r29	; 62
   1819a:	0f be       	out	0x3f, r0	; 63
   1819c:	cd bf       	out	0x3d, r28	; 61
   1819e:	c0 5c       	subi	r28, 0xC0	; 192
   181a0:	df 4f       	sbci	r29, 0xFF	; 255
   181a2:	0f b6       	in	r0, 0x3f	; 63
   181a4:	f8 94       	cli
   181a6:	de bf       	out	0x3e, r29	; 62
   181a8:	0f be       	out	0x3f, r0	; 63
   181aa:	cd bf       	out	0x3d, r28	; 61
   181ac:	df 91       	pop	r29
   181ae:	cf 91       	pop	r28
   181b0:	1f 91       	pop	r17
   181b2:	0f 91       	pop	r16
   181b4:	ef 90       	pop	r14
   181b6:	df 90       	pop	r13
   181b8:	cf 90       	pop	r12
   181ba:	08 95       	ret

000181bc <print_str_P>:
/// @brief Display Configuration File string
/// @param *str: title
/// @param *arg: string
/// @return  void
void print_str_P(__memx const char *str, char *arg)
{
   181bc:	cf 92       	push	r12
   181be:	df 92       	push	r13
   181c0:	ef 92       	push	r14
   181c2:	cf 93       	push	r28
   181c4:	df 93       	push	r29
   181c6:	cd b7       	in	r28, 0x3d	; 61
   181c8:	de b7       	in	r29, 0x3e	; 62
   181ca:	c0 54       	subi	r28, 0x40	; 64
   181cc:	d1 09       	sbc	r29, r1
   181ce:	0f b6       	in	r0, 0x3f	; 63
   181d0:	f8 94       	cli
   181d2:	de bf       	out	0x3e, r29	; 62
   181d4:	0f be       	out	0x3f, r0	; 63
   181d6:	cd bf       	out	0x3d, r28	; 61
   181d8:	6b 01       	movw	r12, r22
   181da:	e8 2e       	mov	r14, r24
   181dc:	75 2f       	mov	r23, r21
   181de:	de 01       	movw	r26, r28
   181e0:	11 96       	adiw	r26, 0x01	; 1
    char tmp[64];
    int i=0;
   181e2:	80 e0       	ldi	r24, 0x00	; 0
   181e4:	90 e0       	ldi	r25, 0x00	; 0
   181e6:	9d 01       	movw	r18, r26
    while( *str && i < 62)
   181e8:	f6 01       	movw	r30, r12
   181ea:	5e 2d       	mov	r21, r14
   181ec:	0e 94 f8 e8 	call	0x1d1f0	; 0x1d1f0 <__xload_1>
   181f0:	66 23       	and	r22, r22
   181f2:	51 f0       	breq	.+20     	; 0x18208 <print_str_P+0x4c>
   181f4:	8e 33       	cpi	r24, 0x3E	; 62
   181f6:	91 05       	cpc	r25, r1
   181f8:	39 f0       	breq	.+14     	; 0x18208 <print_str_P+0x4c>
        tmp[i++] = *str++;
   181fa:	01 96       	adiw	r24, 0x01	; 1
   181fc:	5f ef       	ldi	r21, 0xFF	; 255
   181fe:	c5 1a       	sub	r12, r21
   18200:	d5 0a       	sbc	r13, r21
   18202:	e5 0a       	sbc	r14, r21
   18204:	6d 93       	st	X+, r22
   18206:	f0 cf       	rjmp	.-32     	; 0x181e8 <print_str_P+0x2c>
    tmp[i++] = 0;
   18208:	f9 01       	movw	r30, r18
   1820a:	e8 0f       	add	r30, r24
   1820c:	f9 1f       	adc	r31, r25
   1820e:	10 82       	st	Z, r1
    printf("    %-25s = \"%s\"\n", tmp, arg);   
   18210:	7f 93       	push	r23
   18212:	4f 93       	push	r20
   18214:	3f 93       	push	r19
   18216:	2f 93       	push	r18
   18218:	80 e0       	ldi	r24, 0x00	; 0
   1821a:	9d e2       	ldi	r25, 0x2D	; 45
   1821c:	1f 92       	push	r1
   1821e:	9f 93       	push	r25
   18220:	8f 93       	push	r24
   18222:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
}
   18226:	0f b6       	in	r0, 0x3f	; 63
   18228:	f8 94       	cli
   1822a:	de bf       	out	0x3e, r29	; 62
   1822c:	0f be       	out	0x3f, r0	; 63
   1822e:	cd bf       	out	0x3d, r28	; 61
   18230:	c0 5c       	subi	r28, 0xC0	; 192
   18232:	df 4f       	sbci	r29, 0xFF	; 255
   18234:	0f b6       	in	r0, 0x3f	; 63
   18236:	f8 94       	cli
   18238:	de bf       	out	0x3e, r29	; 62
   1823a:	0f be       	out	0x3f, r0	; 63
   1823c:	cd bf       	out	0x3d, r28	; 61
   1823e:	df 91       	pop	r29
   18240:	cf 91       	pop	r28
   18242:	ef 90       	pop	r14
   18244:	df 90       	pop	r13
   18246:	cf 90       	pop	r12
   18248:	08 95       	ret

0001824a <display_Addresses>:

/// @brief Display Configuration device address saummary
/// @return  void
void display_Addresses()
{
   1824a:	2f 92       	push	r2
   1824c:	3f 92       	push	r3
   1824e:	4f 92       	push	r4
   18250:	6f 92       	push	r6
   18252:	7f 92       	push	r7
   18254:	8f 92       	push	r8
   18256:	af 92       	push	r10
   18258:	bf 92       	push	r11
   1825a:	cf 92       	push	r12
   1825c:	df 92       	push	r13
   1825e:	ef 92       	push	r14
   18260:	0f 93       	push	r16
   18262:	1f 93       	push	r17
   18264:	cf 93       	push	r28
   18266:	df 93       	push	r29
   18268:	cd b7       	in	r28, 0x3d	; 61
   1826a:	de b7       	in	r29, 0x3e	; 62
   1826c:	2b 97       	sbiw	r28, 0x0b	; 11
   1826e:	0f b6       	in	r0, 0x3f	; 63
   18270:	f8 94       	cli
   18272:	de bf       	out	0x3e, r29	; 62
   18274:	0f be       	out	0x3f, r0	; 63
   18276:	cd bf       	out	0x3d, r28	; 61
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
   18278:	8e ed       	ldi	r24, 0xDE	; 222
   1827a:	9c e2       	ldi	r25, 0x2C	; 44
   1827c:	1f 92       	push	r1
   1827e:	9f 93       	push	r25
   18280:	8f 93       	push	r24
   18282:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   18286:	05 ea       	ldi	r16, 0xA5	; 165
   18288:	1e e1       	ldi	r17, 0x1E	; 30
   1828a:	0f 90       	pop	r0
   1828c:	0f 90       	pop	r0
   1828e:	0f 90       	pop	r0
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   18290:	8d e3       	ldi	r24, 0x3D	; 61
   18292:	9c e2       	ldi	r25, 0x2C	; 44
   18294:	9c 01       	movw	r18, r24
   18296:	40 e0       	ldi	r20, 0x00	; 0
   18298:	29 83       	std	Y+1, r18	; 0x01
   1829a:	3a 83       	std	Y+2, r19	; 0x02
   1829c:	4b 83       	std	Y+3, r20	; 0x03
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   1829e:	86 e2       	ldi	r24, 0x26	; 38
   182a0:	9c e2       	ldi	r25, 0x2C	; 44
   182a2:	9c 01       	movw	r18, r24
   182a4:	40 e0       	ldi	r20, 0x00	; 0
   182a6:	2c 83       	std	Y+4, r18	; 0x04
   182a8:	3d 83       	std	Y+5, r19	; 0x05
   182aa:	4e 83       	std	Y+6, r20	; 0x06
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   182ac:	8f e0       	ldi	r24, 0x0F	; 15
   182ae:	9c e2       	ldi	r25, 0x2C	; 44
   182b0:	9c 01       	movw	r18, r24
   182b2:	40 e0       	ldi	r20, 0x00	; 0
   182b4:	2f 83       	std	Y+7, r18	; 0x07
   182b6:	38 87       	std	Y+8, r19	; 0x08
   182b8:	49 87       	std	Y+9, r20	; 0x09
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   182ba:	82 e8       	ldi	r24, 0x82	; 130
   182bc:	9c e2       	ldi	r25, 0x2C	; 44
   182be:	6c 01       	movw	r12, r24
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   182c0:	8b e6       	ldi	r24, 0x6B	; 107
   182c2:	9c e2       	ldi	r25, 0x2C	; 44
   182c4:	3c 01       	movw	r6, r24
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   182c6:	84 e5       	ldi	r24, 0x54	; 84
   182c8:	9c e2       	ldi	r25, 0x2C	; 44
   182ca:	1c 01       	movw	r2, r24
            continue;
        address = Devices[i].ADDRESS;

        if(Devices[i].TYPE == SS80_TYPE)
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   182cc:	87 ec       	ldi	r24, 0xC7	; 199
   182ce:	a8 2e       	mov	r10, r24
   182d0:	8c e2       	ldi	r24, 0x2C	; 44
   182d2:	b8 2e       	mov	r11, r24
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   182d4:	f8 01       	movw	r30, r16
   182d6:	80 81       	ld	r24, Z
   182d8:	88 23       	and	r24, r24
   182da:	09 f4       	brne	.+2      	; 0x182de <display_Addresses+0x94>
   182dc:	8a c0       	rjmp	.+276    	; 0x183f2 <display_Addresses+0x1a8>
            continue;
        address = Devices[i].ADDRESS;
   182de:	f1 81       	ldd	r31, Z+1	; 0x01
   182e0:	2f 2f       	mov	r18, r31
   182e2:	30 e0       	ldi	r19, 0x00	; 0
   182e4:	3b 87       	std	Y+11, r19	; 0x0b
   182e6:	2a 87       	std	Y+10, r18	; 0x0a

        if(Devices[i].TYPE == SS80_TYPE)
   182e8:	82 30       	cpi	r24, 0x02	; 2
   182ea:	49 f5       	brne	.+82     	; 0x1833e <display_Addresses+0xf4>
        {
            printf("  SS80_MLA    = %02XH\n",BASE_MLA + address );
   182ec:	c9 01       	movw	r24, r18
   182ee:	80 96       	adiw	r24, 0x20	; 32
   182f0:	9f 93       	push	r25
   182f2:	8f 93       	push	r24
   182f4:	c5 01       	movw	r24, r10
   182f6:	1f 92       	push	r1
   182f8:	9f 93       	push	r25
   182fa:	af 92       	push	r10
   182fc:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
            printf("  SS80_MTA    = %02XH\n",BASE_MTA + address );
   18300:	8a 85       	ldd	r24, Y+10	; 0x0a
   18302:	9b 85       	ldd	r25, Y+11	; 0x0b
   18304:	80 5c       	subi	r24, 0xC0	; 192
   18306:	9f 4f       	sbci	r25, 0xFF	; 255
   18308:	9f 93       	push	r25
   1830a:	8f 93       	push	r24
   1830c:	80 eb       	ldi	r24, 0xB0	; 176
   1830e:	9c e2       	ldi	r25, 0x2C	; 44
   18310:	1f 92       	push	r1
   18312:	9f 93       	push	r25
   18314:	8f 93       	push	r24
   18316:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
            printf("  SS80_MSA    = %02XH\n",BASE_MSA + address );
   1831a:	8a 85       	ldd	r24, Y+10	; 0x0a
   1831c:	9b 85       	ldd	r25, Y+11	; 0x0b
   1831e:	80 5a       	subi	r24, 0xA0	; 160
   18320:	9f 4f       	sbci	r25, 0xFF	; 255
   18322:	9f 93       	push	r25
   18324:	8f 93       	push	r24
   18326:	89 e9       	ldi	r24, 0x99	; 153
   18328:	9c e2       	ldi	r25, 0x2C	; 44
   1832a:	1f 92       	push	r1
   1832c:	9f 93       	push	r25
   1832e:	8f 93       	push	r24
   18330:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   18334:	0f b6       	in	r0, 0x3f	; 63
   18336:	f8 94       	cli
   18338:	de bf       	out	0x3e, r29	; 62
   1833a:	0f be       	out	0x3f, r0	; 63
   1833c:	cd bf       	out	0x3d, r28	; 61
        }
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   1833e:	f8 01       	movw	r30, r16
   18340:	80 81       	ld	r24, Z
   18342:	81 30       	cpi	r24, 0x01	; 1
   18344:	29 f5       	brne	.+74     	; 0x18390 <display_Addresses+0x146>
        {
            printf("  AMIGO_MLA   = %02XH\n",BASE_MLA + address );
   18346:	8a 85       	ldd	r24, Y+10	; 0x0a
   18348:	9b 85       	ldd	r25, Y+11	; 0x0b
   1834a:	80 96       	adiw	r24, 0x20	; 32
   1834c:	9f 93       	push	r25
   1834e:	8f 93       	push	r24
   18350:	1f 92       	push	r1
   18352:	df 92       	push	r13
   18354:	cf 92       	push	r12
   18356:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
            printf("  AMIGO_MTA   = %02XH\n",BASE_MTA + address );
   1835a:	8a 85       	ldd	r24, Y+10	; 0x0a
   1835c:	9b 85       	ldd	r25, Y+11	; 0x0b
   1835e:	80 5c       	subi	r24, 0xC0	; 192
   18360:	9f 4f       	sbci	r25, 0xFF	; 255
   18362:	9f 93       	push	r25
   18364:	8f 93       	push	r24
   18366:	1f 92       	push	r1
   18368:	7f 92       	push	r7
   1836a:	6f 92       	push	r6
   1836c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
            printf("  AMIGO_MSA   = %02XH\n",BASE_MSA + address );
   18370:	8a 85       	ldd	r24, Y+10	; 0x0a
   18372:	9b 85       	ldd	r25, Y+11	; 0x0b
   18374:	80 5a       	subi	r24, 0xA0	; 160
   18376:	9f 4f       	sbci	r25, 0xFF	; 255
   18378:	9f 93       	push	r25
   1837a:	8f 93       	push	r24
   1837c:	1f 92       	push	r1
   1837e:	3f 92       	push	r3
   18380:	2f 92       	push	r2
   18382:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   18386:	0f b6       	in	r0, 0x3f	; 63
   18388:	f8 94       	cli
   1838a:	de bf       	out	0x3e, r29	; 62
   1838c:	0f be       	out	0x3f, r0	; 63
   1838e:	cd bf       	out	0x3d, r28	; 61
        }
#endif
        if(Devices[i].TYPE == PRINTER_TYPE )
   18390:	f8 01       	movw	r30, r16
   18392:	80 81       	ld	r24, Z
   18394:	83 30       	cpi	r24, 0x03	; 3
   18396:	69 f5       	brne	.+90     	; 0x183f2 <display_Addresses+0x1a8>
        {
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
   18398:	8a 85       	ldd	r24, Y+10	; 0x0a
   1839a:	9b 85       	ldd	r25, Y+11	; 0x0b
   1839c:	80 96       	adiw	r24, 0x20	; 32
   1839e:	9f 93       	push	r25
   183a0:	8f 93       	push	r24
   183a2:	1f 92       	push	r1
   183a4:	fa 81       	ldd	r31, Y+2	; 0x02
   183a6:	ff 93       	push	r31
   183a8:	29 81       	ldd	r18, Y+1	; 0x01
   183aa:	2f 93       	push	r18
   183ac:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
   183b0:	8a 85       	ldd	r24, Y+10	; 0x0a
   183b2:	9b 85       	ldd	r25, Y+11	; 0x0b
   183b4:	80 5c       	subi	r24, 0xC0	; 192
   183b6:	9f 4f       	sbci	r25, 0xFF	; 255
   183b8:	9f 93       	push	r25
   183ba:	8f 93       	push	r24
   183bc:	1f 92       	push	r1
   183be:	3d 81       	ldd	r19, Y+5	; 0x05
   183c0:	3f 93       	push	r19
   183c2:	4c 81       	ldd	r20, Y+4	; 0x04
   183c4:	4f 93       	push	r20
   183c6:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
   183ca:	8a 85       	ldd	r24, Y+10	; 0x0a
   183cc:	9b 85       	ldd	r25, Y+11	; 0x0b
   183ce:	80 5a       	subi	r24, 0xA0	; 160
   183d0:	9f 4f       	sbci	r25, 0xFF	; 255
   183d2:	9b 87       	std	Y+11, r25	; 0x0b
   183d4:	8a 87       	std	Y+10, r24	; 0x0a
   183d6:	9f 93       	push	r25
   183d8:	8f 93       	push	r24
   183da:	1f 92       	push	r1
   183dc:	98 85       	ldd	r25, Y+8	; 0x08
   183de:	9f 93       	push	r25
   183e0:	ef 81       	ldd	r30, Y+7	; 0x07
   183e2:	ef 93       	push	r30
   183e4:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   183e8:	0f b6       	in	r0, 0x3f	; 63
   183ea:	f8 94       	cli
   183ec:	de bf       	out	0x3e, r29	; 62
   183ee:	0f be       	out	0x3f, r0	; 63
   183f0:	cd bf       	out	0x3d, r28	; 61
   183f2:	09 5f       	subi	r16, 0xF9	; 249
   183f4:	1f 4f       	sbci	r17, 0xFF	; 255
void display_Addresses()
{
    int i;
    int address;
    printf("Listen and Talk Address Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   183f6:	3e e1       	ldi	r19, 0x1E	; 30
   183f8:	0d 3d       	cpi	r16, 0xDD	; 221
   183fa:	13 07       	cpc	r17, r19
   183fc:	09 f0       	breq	.+2      	; 0x18400 <display_Addresses+0x1b6>
   183fe:	6a cf       	rjmp	.-300    	; 0x182d4 <display_Addresses+0x8a>
            printf("  PRINTER_MLA = %02XH\n",BASE_MLA + address );
            printf("  PRINTER_MTA = %02XH\n",BASE_MTA + address );
            printf("  PRINTER_MSA = %02XH\n",BASE_MSA + address );
        }
    }
    printf("\n");
   18400:	8d e0       	ldi	r24, 0x0D	; 13
   18402:	9c e2       	ldi	r25, 0x2C	; 44
   18404:	1f 92       	push	r1
   18406:	9f 93       	push	r25
   18408:	8f 93       	push	r24
   1840a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
}
   1840e:	0f 90       	pop	r0
   18410:	0f 90       	pop	r0
   18412:	0f 90       	pop	r0
   18414:	2b 96       	adiw	r28, 0x0b	; 11
   18416:	0f b6       	in	r0, 0x3f	; 63
   18418:	f8 94       	cli
   1841a:	de bf       	out	0x3e, r29	; 62
   1841c:	0f be       	out	0x3f, r0	; 63
   1841e:	cd bf       	out	0x3d, r28	; 61
   18420:	df 91       	pop	r29
   18422:	cf 91       	pop	r28
   18424:	1f 91       	pop	r17
   18426:	0f 91       	pop	r16
   18428:	ef 90       	pop	r14
   1842a:	df 90       	pop	r13
   1842c:	cf 90       	pop	r12
   1842e:	bf 90       	pop	r11
   18430:	af 90       	pop	r10
   18432:	8f 90       	pop	r8
   18434:	7f 90       	pop	r7
   18436:	6f 90       	pop	r6
   18438:	4f 90       	pop	r4
   1843a:	3f 90       	pop	r3
   1843c:	2f 90       	pop	r2
   1843e:	08 95       	ret

00018440 <display_Config>:

/// @brief Display current Configuration File values
/// @return  void
void display_Config()
{
   18440:	2f 92       	push	r2
   18442:	3f 92       	push	r3
   18444:	4f 92       	push	r4
   18446:	6f 92       	push	r6
   18448:	7f 92       	push	r7
   1844a:	8f 92       	push	r8
   1844c:	af 92       	push	r10
   1844e:	bf 92       	push	r11
   18450:	cf 92       	push	r12
   18452:	df 92       	push	r13
   18454:	ef 92       	push	r14
   18456:	0f 93       	push	r16
   18458:	1f 93       	push	r17
   1845a:	cf 93       	push	r28
   1845c:	df 93       	push	r29
   1845e:	cd b7       	in	r28, 0x3d	; 61
   18460:	de b7       	in	r29, 0x3e	; 62
   18462:	2b 97       	sbiw	r28, 0x0b	; 11
   18464:	0f b6       	in	r0, 0x3f	; 63
   18466:	f8 94       	cli
   18468:	de bf       	out	0x3e, r29	; 62
   1846a:	0f be       	out	0x3f, r0	; 63
   1846c:	cd bf       	out	0x3d, r28	; 61
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
   1846e:	8d ee       	ldi	r24, 0xED	; 237
   18470:	9b e2       	ldi	r25, 0x2B	; 43
   18472:	1f 92       	push	r1
   18474:	9f 93       	push	r25
   18476:	8f 93       	push	r24
   18478:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1847c:	05 ea       	ldi	r16, 0xA5	; 165
   1847e:	1e e1       	ldi	r17, 0x1E	; 30
   18480:	0f 90       	pop	r0
   18482:	0f 90       	pop	r0
   18484:	0f 90       	pop	r0

            printf("PRINTER\n");
            printf("  CONFIG\n");
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
        }
        printf("\n");
   18486:	8c ef       	ldi	r24, 0xFC	; 252
   18488:	99 e2       	ldi	r25, 0x29	; 41
   1848a:	9c 01       	movw	r18, r24
   1848c:	40 e0       	ldi	r20, 0x00	; 0
   1848e:	29 83       	std	Y+1, r18	; 0x01
   18490:	3a 83       	std	Y+2, r19	; 0x02
   18492:	4b 83       	std	Y+3, r20	; 0x03

        if(Devices[i].TYPE == PRINTER_TYPE )
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;

            printf("PRINTER\n");
   18494:	80 e1       	ldi	r24, 0x10	; 16
   18496:	9a e2       	ldi	r25, 0x2A	; 42
   18498:	9c 01       	movw	r18, r24
   1849a:	40 e0       	ldi	r20, 0x00	; 0
   1849c:	2c 83       	std	Y+4, r18	; 0x04
   1849e:	3d 83       	std	Y+5, r19	; 0x05
   184a0:	4e 83       	std	Y+6, r20	; 0x06
            printf("  CONFIG\n");
   184a2:	86 e0       	ldi	r24, 0x06	; 6
   184a4:	9a e2       	ldi	r25, 0x2A	; 42
   184a6:	9c 01       	movw	r18, r24
   184a8:	40 e0       	ldi	r20, 0x00	; 0
   184aa:	2f 83       	std	Y+7, r18	; 0x07
   184ac:	38 87       	std	Y+8, r19	; 0x08
   184ae:	49 87       	std	Y+9, r20	; 0x09
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   184b0:	8e ef       	ldi	r24, 0xFE	; 254
   184b2:	99 e2       	ldi	r25, 0x29	; 41
   184b4:	3c 01       	movw	r6, r24
   184b6:	81 2c       	mov	r8, r1
#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;

            printf("AMIGO\n");
   184b8:	80 e8       	ldi	r24, 0x80	; 128
   184ba:	9a e2       	ldi	r25, 0x2A	; 42
   184bc:	1c 01       	movw	r2, r24
            printf("  HEADER\n");
   184be:	86 e7       	ldi	r24, 0x76	; 118
   184c0:	9a e2       	ldi	r25, 0x2A	; 42
   184c2:	6c 01       	movw	r12, r24
                print_var("ADDRESS", (uint32_t) AMIGOp->HEADER.ADDRESS);
   184c4:	8e e6       	ldi	r24, 0x6E	; 110
   184c6:	a8 2e       	mov	r10, r24
   184c8:	8a e2       	ldi	r24, 0x2A	; 42
   184ca:	b8 2e       	mov	r11, r24
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   184cc:	f8 01       	movw	r30, r16
   184ce:	80 81       	ld	r24, Z
   184d0:	88 23       	and	r24, r24
   184d2:	09 f4       	brne	.+2      	; 0x184d6 <display_Config+0x96>
   184d4:	d8 c1       	rjmp	.+944    	; 0x18886 <display_Config+0x446>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   184d6:	82 30       	cpi	r24, 0x02	; 2
   184d8:	09 f0       	breq	.+2      	; 0x184dc <display_Config+0x9c>
   184da:	2b c1       	rjmp	.+598    	; 0x18732 <display_Config+0x2f2>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   184dc:	23 81       	ldd	r18, Z+3	; 0x03
   184de:	34 81       	ldd	r19, Z+4	; 0x04
   184e0:	3b 87       	std	Y+11, r19	; 0x0b
   184e2:	2a 87       	std	Y+10, r18	; 0x0a

            printf("SS80\n");
   184e4:	87 ee       	ldi	r24, 0xE7	; 231
   184e6:	9b e2       	ldi	r25, 0x2B	; 43
   184e8:	1f 92       	push	r1
   184ea:	9f 93       	push	r25
   184ec:	8f 93       	push	r24
   184ee:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
            printf("  CONFIG\n");
   184f2:	8d ed       	ldi	r24, 0xDD	; 221
   184f4:	9b e2       	ldi	r25, 0x2B	; 43
   184f6:	1f 92       	push	r1
   184f8:	9f 93       	push	r25
   184fa:	8f 93       	push	r24
   184fc:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
                print_var("ADDRESS", (uint32_t) SS80p->HEADER.ADDRESS);
   18500:	ea 85       	ldd	r30, Y+10	; 0x0a
   18502:	fb 85       	ldd	r31, Y+11	; 0x0b
   18504:	20 81       	ld	r18, Z
   18506:	30 e0       	ldi	r19, 0x00	; 0
   18508:	40 e0       	ldi	r20, 0x00	; 0
   1850a:	50 e0       	ldi	r21, 0x00	; 0
   1850c:	65 ed       	ldi	r22, 0xD5	; 213
   1850e:	7b e2       	ldi	r23, 0x2B	; 43
   18510:	80 e0       	ldi	r24, 0x00	; 0
   18512:	03 de       	rcall	.-1018   	; 0x1811a <print_var_P>
                print_var("PPR", (uint32_t) SS80p->HEADER.PPR);
   18514:	ea 85       	ldd	r30, Y+10	; 0x0a
   18516:	fb 85       	ldd	r31, Y+11	; 0x0b
   18518:	21 81       	ldd	r18, Z+1	; 0x01
   1851a:	30 e0       	ldi	r19, 0x00	; 0
   1851c:	40 e0       	ldi	r20, 0x00	; 0
   1851e:	50 e0       	ldi	r21, 0x00	; 0
   18520:	61 ed       	ldi	r22, 0xD1	; 209
   18522:	7b e2       	ldi	r23, 0x2B	; 43
   18524:	80 e0       	ldi	r24, 0x00	; 0
   18526:	f9 dd       	rcall	.-1038   	; 0x1811a <print_var_P>
                print_str("FILE", SS80p->HEADER.NAME);
   18528:	4a 85       	ldd	r20, Y+10	; 0x0a
   1852a:	5b 85       	ldd	r21, Y+11	; 0x0b
   1852c:	4e 5f       	subi	r20, 0xFE	; 254
   1852e:	5f 4f       	sbci	r21, 0xFF	; 255
   18530:	6c ec       	ldi	r22, 0xCC	; 204
   18532:	7b e2       	ldi	r23, 0x2B	; 43
   18534:	80 e0       	ldi	r24, 0x00	; 0
   18536:	42 de       	rcall	.-892    	; 0x181bc <print_str_P>
            printf("  HEADER\n");
   18538:	82 ec       	ldi	r24, 0xC2	; 194
   1853a:	9b e2       	ldi	r25, 0x2B	; 43
   1853c:	1f 92       	push	r1
   1853e:	9f 93       	push	r25
   18540:	8f 93       	push	r24
   18542:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
                print_var("ID", (uint32_t) SS80p->CONFIG.ID);
   18546:	ea 85       	ldd	r30, Y+10	; 0x0a
   18548:	fb 85       	ldd	r31, Y+11	; 0x0b
   1854a:	23 a1       	ldd	r18, Z+35	; 0x23
   1854c:	34 a1       	ldd	r19, Z+36	; 0x24
   1854e:	40 e0       	ldi	r20, 0x00	; 0
   18550:	50 e0       	ldi	r21, 0x00	; 0
   18552:	6f eb       	ldi	r22, 0xBF	; 191
   18554:	7b e2       	ldi	r23, 0x2B	; 43
   18556:	80 e0       	ldi	r24, 0x00	; 0
   18558:	e0 dd       	rcall	.-1088   	; 0x1811a <print_var_P>
            printf("  CONTROLLER\n");
   1855a:	81 eb       	ldi	r24, 0xB1	; 177
   1855c:	9b e2       	ldi	r25, 0x2B	; 43
   1855e:	1f 92       	push	r1
   18560:	9f 93       	push	r25
   18562:	8f 93       	push	r24
   18564:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
                print_var("UNITS_INSTALLED", (uint32_t) SS80p->CONTROLLER.UNITS_INSTALLED);
   18568:	ea 85       	ldd	r30, Y+10	; 0x0a
   1856a:	fb 85       	ldd	r31, Y+11	; 0x0b
   1856c:	25 a1       	ldd	r18, Z+37	; 0x25
   1856e:	36 a1       	ldd	r19, Z+38	; 0x26
   18570:	40 e0       	ldi	r20, 0x00	; 0
   18572:	50 e0       	ldi	r21, 0x00	; 0
   18574:	61 ea       	ldi	r22, 0xA1	; 161
   18576:	7b e2       	ldi	r23, 0x2B	; 43
   18578:	80 e0       	ldi	r24, 0x00	; 0
   1857a:	cf dd       	rcall	.-1122   	; 0x1811a <print_var_P>
                print_var("TRANSFER_RATE", (uint32_t)  SS80p->CONTROLLER.TRANSFER_RATE);
   1857c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1857e:	fb 85       	ldd	r31, Y+11	; 0x0b
   18580:	27 a1       	ldd	r18, Z+39	; 0x27
   18582:	30 a5       	ldd	r19, Z+40	; 0x28
   18584:	40 e0       	ldi	r20, 0x00	; 0
   18586:	50 e0       	ldi	r21, 0x00	; 0
   18588:	63 e9       	ldi	r22, 0x93	; 147
   1858a:	7b e2       	ldi	r23, 0x2B	; 43
   1858c:	80 e0       	ldi	r24, 0x00	; 0
   1858e:	c5 dd       	rcall	.-1142   	; 0x1811a <print_var_P>
                print_var("TYPE", (uint32_t)  SS80p->CONTROLLER.TYPE);
   18590:	ea 85       	ldd	r30, Y+10	; 0x0a
   18592:	fb 85       	ldd	r31, Y+11	; 0x0b
   18594:	21 a5       	ldd	r18, Z+41	; 0x29
   18596:	30 e0       	ldi	r19, 0x00	; 0
   18598:	40 e0       	ldi	r20, 0x00	; 0
   1859a:	50 e0       	ldi	r21, 0x00	; 0
   1859c:	6e e8       	ldi	r22, 0x8E	; 142
   1859e:	7b e2       	ldi	r23, 0x2B	; 43
   185a0:	80 e0       	ldi	r24, 0x00	; 0
   185a2:	bb dd       	rcall	.-1162   	; 0x1811a <print_var_P>
            printf("  UNIT\n");
   185a4:	86 e8       	ldi	r24, 0x86	; 134
   185a6:	9b e2       	ldi	r25, 0x2B	; 43
   185a8:	1f 92       	push	r1
   185aa:	9f 93       	push	r25
   185ac:	8f 93       	push	r24
   185ae:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
                print_var("UNIT_TYPE", (uint32_t)SS80p->UNIT.UNIT_TYPE);
   185b2:	ea 85       	ldd	r30, Y+10	; 0x0a
   185b4:	fb 85       	ldd	r31, Y+11	; 0x0b
   185b6:	22 a5       	ldd	r18, Z+42	; 0x2a
   185b8:	30 e0       	ldi	r19, 0x00	; 0
   185ba:	40 e0       	ldi	r20, 0x00	; 0
   185bc:	50 e0       	ldi	r21, 0x00	; 0
   185be:	6c e7       	ldi	r22, 0x7C	; 124
   185c0:	7b e2       	ldi	r23, 0x2B	; 43
   185c2:	80 e0       	ldi	r24, 0x00	; 0
   185c4:	aa dd       	rcall	.-1196   	; 0x1811a <print_var_P>
                print_var("DEVICE_NUMBER", (uint32_t)SS80p->UNIT.DEVICE_NUMBER);
   185c6:	ea 85       	ldd	r30, Y+10	; 0x0a
   185c8:	fb 85       	ldd	r31, Y+11	; 0x0b
   185ca:	23 a5       	ldd	r18, Z+43	; 0x2b
   185cc:	34 a5       	ldd	r19, Z+44	; 0x2c
   185ce:	45 a5       	ldd	r20, Z+45	; 0x2d
   185d0:	56 a5       	ldd	r21, Z+46	; 0x2e
   185d2:	6e e6       	ldi	r22, 0x6E	; 110
   185d4:	7b e2       	ldi	r23, 0x2B	; 43
   185d6:	80 e0       	ldi	r24, 0x00	; 0
                print_var("BYTES_PER_BLOCK", (uint32_t)SS80p->UNIT.BYTES_PER_BLOCK);
   185d8:	a0 dd       	rcall	.-1216   	; 0x1811a <print_var_P>
   185da:	ea 85       	ldd	r30, Y+10	; 0x0a
   185dc:	fb 85       	ldd	r31, Y+11	; 0x0b
   185de:	27 a5       	ldd	r18, Z+47	; 0x2f
   185e0:	30 a9       	ldd	r19, Z+48	; 0x30
   185e2:	40 e0       	ldi	r20, 0x00	; 0
   185e4:	50 e0       	ldi	r21, 0x00	; 0
   185e6:	6e e5       	ldi	r22, 0x5E	; 94
   185e8:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("BUFFERED_BLOCKS", (uint32_t)SS80p->UNIT.BUFFERED_BLOCKS);
   185ea:	80 e0       	ldi	r24, 0x00	; 0
   185ec:	96 dd       	rcall	.-1236   	; 0x1811a <print_var_P>
   185ee:	ea 85       	ldd	r30, Y+10	; 0x0a
   185f0:	fb 85       	ldd	r31, Y+11	; 0x0b
   185f2:	21 a9       	ldd	r18, Z+49	; 0x31
   185f4:	30 e0       	ldi	r19, 0x00	; 0
   185f6:	40 e0       	ldi	r20, 0x00	; 0
   185f8:	50 e0       	ldi	r21, 0x00	; 0
   185fa:	6e e4       	ldi	r22, 0x4E	; 78
   185fc:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("BURST_SIZE", (uint32_t)SS80p->UNIT.BURST_SIZE);
   185fe:	80 e0       	ldi	r24, 0x00	; 0
   18600:	8c dd       	rcall	.-1256   	; 0x1811a <print_var_P>
   18602:	ea 85       	ldd	r30, Y+10	; 0x0a
   18604:	fb 85       	ldd	r31, Y+11	; 0x0b
   18606:	22 a9       	ldd	r18, Z+50	; 0x32
   18608:	30 e0       	ldi	r19, 0x00	; 0
   1860a:	40 e0       	ldi	r20, 0x00	; 0
   1860c:	50 e0       	ldi	r21, 0x00	; 0
   1860e:	63 e4       	ldi	r22, 0x43	; 67
   18610:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("BLOCK_TIME", (uint32_t)SS80p->UNIT.BLOCK_TIME);
   18612:	80 e0       	ldi	r24, 0x00	; 0
   18614:	82 dd       	rcall	.-1276   	; 0x1811a <print_var_P>
   18616:	ea 85       	ldd	r30, Y+10	; 0x0a
   18618:	fb 85       	ldd	r31, Y+11	; 0x0b
   1861a:	23 a9       	ldd	r18, Z+51	; 0x33
   1861c:	34 a9       	ldd	r19, Z+52	; 0x34
   1861e:	40 e0       	ldi	r20, 0x00	; 0
   18620:	50 e0       	ldi	r21, 0x00	; 0
   18622:	68 e3       	ldi	r22, 0x38	; 56
   18624:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("CONTINOUS_TRANSFER_RATE", (uint32_t)SS80p->UNIT.CONTINOUS_TRANSFER_RATE);
   18626:	80 e0       	ldi	r24, 0x00	; 0
   18628:	78 dd       	rcall	.-1296   	; 0x1811a <print_var_P>
   1862a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1862c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1862e:	25 a9       	ldd	r18, Z+53	; 0x35
   18630:	36 a9       	ldd	r19, Z+54	; 0x36
   18632:	40 e0       	ldi	r20, 0x00	; 0
   18634:	50 e0       	ldi	r21, 0x00	; 0
   18636:	60 e2       	ldi	r22, 0x20	; 32
   18638:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("OPTIMAL_RETRY_TIME", (uint32_t)SS80p->UNIT.OPTIMAL_RETRY_TIME);
   1863a:	80 e0       	ldi	r24, 0x00	; 0
   1863c:	6e dd       	rcall	.-1316   	; 0x1811a <print_var_P>
   1863e:	ea 85       	ldd	r30, Y+10	; 0x0a
   18640:	fb 85       	ldd	r31, Y+11	; 0x0b
   18642:	27 a9       	ldd	r18, Z+55	; 0x37
   18644:	30 ad       	ldd	r19, Z+56	; 0x38
   18646:	40 e0       	ldi	r20, 0x00	; 0
   18648:	50 e0       	ldi	r21, 0x00	; 0
   1864a:	6d e0       	ldi	r22, 0x0D	; 13
   1864c:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("ACCESS_TIME", (uint32_t)SS80p->UNIT.ACCESS_TIME);
   1864e:	80 e0       	ldi	r24, 0x00	; 0
   18650:	64 dd       	rcall	.-1336   	; 0x1811a <print_var_P>
   18652:	ea 85       	ldd	r30, Y+10	; 0x0a
   18654:	fb 85       	ldd	r31, Y+11	; 0x0b
   18656:	21 ad       	ldd	r18, Z+57	; 0x39
   18658:	32 ad       	ldd	r19, Z+58	; 0x3a
   1865a:	40 e0       	ldi	r20, 0x00	; 0
   1865c:	50 e0       	ldi	r21, 0x00	; 0
   1865e:	61 e0       	ldi	r22, 0x01	; 1
   18660:	7b e2       	ldi	r23, 0x2B	; 43
                print_var("MAXIMUM_INTERLEAVE", (uint32_t)SS80p->UNIT.MAXIMUM_INTERLEAVE);
   18662:	80 e0       	ldi	r24, 0x00	; 0
   18664:	5a dd       	rcall	.-1356   	; 0x1811a <print_var_P>
   18666:	ea 85       	ldd	r30, Y+10	; 0x0a
   18668:	fb 85       	ldd	r31, Y+11	; 0x0b
   1866a:	23 ad       	ldd	r18, Z+59	; 0x3b
   1866c:	30 e0       	ldi	r19, 0x00	; 0
   1866e:	40 e0       	ldi	r20, 0x00	; 0
   18670:	50 e0       	ldi	r21, 0x00	; 0
   18672:	6e ee       	ldi	r22, 0xEE	; 238
   18674:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("FIXED_VOLUMES", (uint32_t)SS80p->UNIT.FIXED_VOLUMES);
   18676:	80 e0       	ldi	r24, 0x00	; 0
   18678:	50 dd       	rcall	.-1376   	; 0x1811a <print_var_P>
   1867a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1867c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1867e:	24 ad       	ldd	r18, Z+60	; 0x3c
   18680:	30 e0       	ldi	r19, 0x00	; 0
   18682:	40 e0       	ldi	r20, 0x00	; 0
   18684:	50 e0       	ldi	r21, 0x00	; 0
   18686:	60 ee       	ldi	r22, 0xE0	; 224
   18688:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("REMOVABLE_VOLUMES", (uint32_t)SS80p->UNIT.REMOVABLE_VOLUMES);
   1868a:	80 e0       	ldi	r24, 0x00	; 0
   1868c:	46 dd       	rcall	.-1396   	; 0x1811a <print_var_P>
   1868e:	ea 85       	ldd	r30, Y+10	; 0x0a
   18690:	fb 85       	ldd	r31, Y+11	; 0x0b
   18692:	25 ad       	ldd	r18, Z+61	; 0x3d
   18694:	30 e0       	ldi	r19, 0x00	; 0
   18696:	40 e0       	ldi	r20, 0x00	; 0
   18698:	50 e0       	ldi	r21, 0x00	; 0
   1869a:	6e ec       	ldi	r22, 0xCE	; 206
   1869c:	7a e2       	ldi	r23, 0x2A	; 42
            printf("  VOLUME\n");
   1869e:	80 e0       	ldi	r24, 0x00	; 0
   186a0:	3c dd       	rcall	.-1416   	; 0x1811a <print_var_P>
   186a2:	84 ec       	ldi	r24, 0xC4	; 196
   186a4:	9a e2       	ldi	r25, 0x2A	; 42
   186a6:	1f 92       	push	r1
   186a8:	9f 93       	push	r25
   186aa:	8f 93       	push	r24
                print_var("MAX_CYLINDER", (uint32_t)SS80p->VOLUME.MAX_CYLINDER);
   186ac:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   186b0:	ea 85       	ldd	r30, Y+10	; 0x0a
   186b2:	fb 85       	ldd	r31, Y+11	; 0x0b
   186b4:	fe 96       	adiw	r30, 0x3e	; 62
   186b6:	20 81       	ld	r18, Z
   186b8:	31 81       	ldd	r19, Z+1	; 0x01
   186ba:	42 81       	ldd	r20, Z+2	; 0x02
   186bc:	53 81       	ldd	r21, Z+3	; 0x03
   186be:	67 eb       	ldi	r22, 0xB7	; 183
   186c0:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("MAX_HEAD", (uint32_t)SS80p->VOLUME.MAX_HEAD);
   186c2:	80 e0       	ldi	r24, 0x00	; 0
   186c4:	2a dd       	rcall	.-1452   	; 0x1811a <print_var_P>
   186c6:	ea 85       	ldd	r30, Y+10	; 0x0a
   186c8:	fb 85       	ldd	r31, Y+11	; 0x0b
   186ca:	ee 5b       	subi	r30, 0xBE	; 190
   186cc:	ff 4f       	sbci	r31, 0xFF	; 255
   186ce:	20 81       	ld	r18, Z
   186d0:	30 e0       	ldi	r19, 0x00	; 0
   186d2:	40 e0       	ldi	r20, 0x00	; 0
   186d4:	50 e0       	ldi	r21, 0x00	; 0
   186d6:	6e ea       	ldi	r22, 0xAE	; 174
   186d8:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("MAX_SECTOR", (uint32_t)SS80p->VOLUME.MAX_SECTOR);
   186da:	80 e0       	ldi	r24, 0x00	; 0
   186dc:	1e dd       	rcall	.-1476   	; 0x1811a <print_var_P>
   186de:	ea 85       	ldd	r30, Y+10	; 0x0a
   186e0:	fb 85       	ldd	r31, Y+11	; 0x0b
   186e2:	ed 5b       	subi	r30, 0xBD	; 189
   186e4:	ff 4f       	sbci	r31, 0xFF	; 255
   186e6:	20 81       	ld	r18, Z
   186e8:	31 81       	ldd	r19, Z+1	; 0x01
   186ea:	40 e0       	ldi	r20, 0x00	; 0
   186ec:	50 e0       	ldi	r21, 0x00	; 0
   186ee:	63 ea       	ldi	r22, 0xA3	; 163
   186f0:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("MAX_BLOCK_NUMBER", (uint32_t)SS80p->VOLUME.MAX_BLOCK_NUMBER);
   186f2:	80 e0       	ldi	r24, 0x00	; 0
   186f4:	12 dd       	rcall	.-1500   	; 0x1811a <print_var_P>
   186f6:	ea 85       	ldd	r30, Y+10	; 0x0a
   186f8:	fb 85       	ldd	r31, Y+11	; 0x0b
   186fa:	eb 5b       	subi	r30, 0xBB	; 187
   186fc:	ff 4f       	sbci	r31, 0xFF	; 255
   186fe:	20 81       	ld	r18, Z
   18700:	31 81       	ldd	r19, Z+1	; 0x01
   18702:	42 81       	ldd	r20, Z+2	; 0x02
   18704:	53 81       	ldd	r21, Z+3	; 0x03
   18706:	62 e9       	ldi	r22, 0x92	; 146
   18708:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("INTERLEAVE", (uint32_t)SS80p->VOLUME.INTERLEAVE);
   1870a:	80 e0       	ldi	r24, 0x00	; 0
   1870c:	06 dd       	rcall	.-1524   	; 0x1811a <print_var_P>
   1870e:	2a 85       	ldd	r18, Y+10	; 0x0a
   18710:	3b 85       	ldd	r19, Y+11	; 0x0b
   18712:	27 5b       	subi	r18, 0xB7	; 183
   18714:	3f 4f       	sbci	r19, 0xFF	; 255
   18716:	f9 01       	movw	r30, r18
   18718:	20 81       	ld	r18, Z
   1871a:	30 e0       	ldi	r19, 0x00	; 0
   1871c:	40 e0       	ldi	r20, 0x00	; 0
   1871e:	50 e0       	ldi	r21, 0x00	; 0
   18720:	67 e8       	ldi	r22, 0x87	; 135
   18722:	7a e2       	ldi	r23, 0x2A	; 42
   18724:	80 e0       	ldi	r24, 0x00	; 0
   18726:	f9 dc       	rcall	.-1550   	; 0x1811a <print_var_P>
   18728:	0f b6       	in	r0, 0x3f	; 63
   1872a:	f8 94       	cli
   1872c:	de bf       	out	0x3e, r29	; 62
   1872e:	0f be       	out	0x3f, r0	; 63
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   18730:	cd bf       	out	0x3d, r28	; 61
   18732:	f8 01       	movw	r30, r16
   18734:	80 81       	ld	r24, Z
   18736:	81 30       	cpi	r24, 0x01	; 1
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   18738:	09 f0       	breq	.+2      	; 0x1873c <display_Config+0x2fc>
   1873a:	76 c0       	rjmp	.+236    	; 0x18828 <display_Config+0x3e8>
   1873c:	23 81       	ldd	r18, Z+3	; 0x03
   1873e:	34 81       	ldd	r19, Z+4	; 0x04

            printf("AMIGO\n");
   18740:	3b 87       	std	Y+11, r19	; 0x0b
   18742:	2a 87       	std	Y+10, r18	; 0x0a
   18744:	1f 92       	push	r1
   18746:	3f 92       	push	r3
            printf("  HEADER\n");
   18748:	2f 92       	push	r2
   1874a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1874e:	1f 92       	push	r1
   18750:	df 92       	push	r13
                print_var("ADDRESS", (uint32_t) AMIGOp->HEADER.ADDRESS);
   18752:	cf 92       	push	r12
   18754:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   18758:	ea 85       	ldd	r30, Y+10	; 0x0a
   1875a:	fb 85       	ldd	r31, Y+11	; 0x0b
   1875c:	20 81       	ld	r18, Z
   1875e:	30 e0       	ldi	r19, 0x00	; 0
   18760:	40 e0       	ldi	r20, 0x00	; 0
   18762:	50 e0       	ldi	r21, 0x00	; 0
                print_var("PPR", (uint32_t) AMIGOp->HEADER.PPR);
   18764:	b5 01       	movw	r22, r10
   18766:	80 e0       	ldi	r24, 0x00	; 0
   18768:	d8 dc       	rcall	.-1616   	; 0x1811a <print_var_P>
   1876a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1876c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1876e:	21 81       	ldd	r18, Z+1	; 0x01
   18770:	30 e0       	ldi	r19, 0x00	; 0
   18772:	40 e0       	ldi	r20, 0x00	; 0
   18774:	50 e0       	ldi	r21, 0x00	; 0
   18776:	6a e6       	ldi	r22, 0x6A	; 106
                print_str("FILE", AMIGOp->HEADER.NAME);
   18778:	7a e2       	ldi	r23, 0x2A	; 42
   1877a:	80 e0       	ldi	r24, 0x00	; 0
   1877c:	ce dc       	rcall	.-1636   	; 0x1811a <print_var_P>
   1877e:	4a 85       	ldd	r20, Y+10	; 0x0a
   18780:	5b 85       	ldd	r21, Y+11	; 0x0b
   18782:	4e 5f       	subi	r20, 0xFE	; 254
   18784:	5f 4f       	sbci	r21, 0xFF	; 255
   18786:	65 e6       	ldi	r22, 0x65	; 101
   18788:	7a e2       	ldi	r23, 0x2A	; 42
            printf("  CONFIG\n");
   1878a:	80 e0       	ldi	r24, 0x00	; 0
   1878c:	17 dd       	rcall	.-1490   	; 0x181bc <print_str_P>
   1878e:	8b e5       	ldi	r24, 0x5B	; 91
   18790:	9a e2       	ldi	r25, 0x2A	; 42
   18792:	1f 92       	push	r1
   18794:	9f 93       	push	r25
   18796:	8f 93       	push	r24
                print_var("ID", (uint32_t) AMIGOp->CONFIG.ID);
   18798:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1879c:	ea 85       	ldd	r30, Y+10	; 0x0a
   1879e:	fb 85       	ldd	r31, Y+11	; 0x0b
   187a0:	23 a1       	ldd	r18, Z+35	; 0x23
   187a2:	34 a1       	ldd	r19, Z+36	; 0x24
   187a4:	40 e0       	ldi	r20, 0x00	; 0
   187a6:	50 e0       	ldi	r21, 0x00	; 0
   187a8:	68 e5       	ldi	r22, 0x58	; 88
   187aa:	7a e2       	ldi	r23, 0x2A	; 42
            printf("  GEOMETRY\n");
   187ac:	80 e0       	ldi	r24, 0x00	; 0
   187ae:	b5 dc       	rcall	.-1686   	; 0x1811a <print_var_P>
   187b0:	8c e4       	ldi	r24, 0x4C	; 76
   187b2:	9a e2       	ldi	r25, 0x2A	; 42
   187b4:	1f 92       	push	r1
   187b6:	9f 93       	push	r25
                print_var("BYTES_PER_SECTOR", (uint32_t) AMIGOp->GEOMETRY.BYTES_PER_SECTOR);
   187b8:	8f 93       	push	r24
   187ba:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   187be:	ea 85       	ldd	r30, Y+10	; 0x0a
   187c0:	fb 85       	ldd	r31, Y+11	; 0x0b
   187c2:	25 a1       	ldd	r18, Z+37	; 0x25
   187c4:	36 a1       	ldd	r19, Z+38	; 0x26
   187c6:	03 2e       	mov	r0, r19
   187c8:	00 0c       	add	r0, r0
   187ca:	44 0b       	sbc	r20, r20
   187cc:	55 0b       	sbc	r21, r21
   187ce:	6b e3       	ldi	r22, 0x3B	; 59
                print_var("SECTORS_PER_TRACK", (uint32_t) AMIGOp->GEOMETRY.SECTORS_PER_TRACK);
   187d0:	7a e2       	ldi	r23, 0x2A	; 42
   187d2:	80 e0       	ldi	r24, 0x00	; 0
   187d4:	a2 dc       	rcall	.-1724   	; 0x1811a <print_var_P>
   187d6:	ea 85       	ldd	r30, Y+10	; 0x0a
   187d8:	fb 85       	ldd	r31, Y+11	; 0x0b
   187da:	27 a1       	ldd	r18, Z+39	; 0x27
   187dc:	30 a5       	ldd	r19, Z+40	; 0x28
   187de:	03 2e       	mov	r0, r19
   187e0:	00 0c       	add	r0, r0
   187e2:	44 0b       	sbc	r20, r20
   187e4:	55 0b       	sbc	r21, r21
   187e6:	69 e2       	ldi	r22, 0x29	; 41
                print_var("HEADS", (uint32_t) AMIGOp->GEOMETRY.HEADS);
   187e8:	7a e2       	ldi	r23, 0x2A	; 42
   187ea:	80 e0       	ldi	r24, 0x00	; 0
   187ec:	96 dc       	rcall	.-1748   	; 0x1811a <print_var_P>
   187ee:	ea 85       	ldd	r30, Y+10	; 0x0a
   187f0:	fb 85       	ldd	r31, Y+11	; 0x0b
   187f2:	21 a5       	ldd	r18, Z+41	; 0x29
   187f4:	32 a5       	ldd	r19, Z+42	; 0x2a
   187f6:	03 2e       	mov	r0, r19
   187f8:	00 0c       	add	r0, r0
   187fa:	44 0b       	sbc	r20, r20
   187fc:	55 0b       	sbc	r21, r21
   187fe:	63 e2       	ldi	r22, 0x23	; 35
   18800:	7a e2       	ldi	r23, 0x2A	; 42
                print_var("CYLINDERS", (uint32_t) AMIGOp->GEOMETRY.CYLINDERS);
   18802:	80 e0       	ldi	r24, 0x00	; 0
   18804:	8a dc       	rcall	.-1772   	; 0x1811a <print_var_P>
   18806:	ea 85       	ldd	r30, Y+10	; 0x0a
   18808:	fb 85       	ldd	r31, Y+11	; 0x0b
   1880a:	23 a5       	ldd	r18, Z+43	; 0x2b
   1880c:	34 a5       	ldd	r19, Z+44	; 0x2c
   1880e:	03 2e       	mov	r0, r19
   18810:	00 0c       	add	r0, r0
   18812:	44 0b       	sbc	r20, r20
   18814:	55 0b       	sbc	r21, r21
   18816:	69 e1       	ldi	r22, 0x19	; 25
   18818:	7a e2       	ldi	r23, 0x2A	; 42
   1881a:	80 e0       	ldi	r24, 0x00	; 0
   1881c:	7e dc       	rcall	.-1796   	; 0x1811a <print_var_P>
   1881e:	0f b6       	in	r0, 0x3f	; 63
   18820:	f8 94       	cli
   18822:	de bf       	out	0x3e, r29	; 62
        } 
#endif // #ifdef AMIGO

        if(Devices[i].TYPE == PRINTER_TYPE )
   18824:	0f be       	out	0x3f, r0	; 63
   18826:	cd bf       	out	0x3d, r28	; 61
   18828:	f8 01       	movw	r30, r16
   1882a:	80 81       	ld	r24, Z
        {
            PRINTERp= (PRINTERDeviceType *)Devices[i].dev;
   1882c:	83 30       	cpi	r24, 0x03	; 3
   1882e:	09 f5       	brne	.+66     	; 0x18872 <display_Config+0x432>
   18830:	23 81       	ldd	r18, Z+3	; 0x03
   18832:	34 81       	ldd	r19, Z+4	; 0x04

            printf("PRINTER\n");
   18834:	3b 87       	std	Y+11, r19	; 0x0b
   18836:	2a 87       	std	Y+10, r18	; 0x0a
   18838:	1f 92       	push	r1
   1883a:	3d 81       	ldd	r19, Y+5	; 0x05
   1883c:	3f 93       	push	r19
   1883e:	4c 81       	ldd	r20, Y+4	; 0x04
   18840:	4f 93       	push	r20
            printf("  CONFIG\n");
   18842:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   18846:	1f 92       	push	r1
   18848:	88 85       	ldd	r24, Y+8	; 0x08
   1884a:	8f 93       	push	r24
   1884c:	9f 81       	ldd	r25, Y+7	; 0x07
   1884e:	9f 93       	push	r25
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
   18850:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   18854:	ea 85       	ldd	r30, Y+10	; 0x0a
   18856:	fb 85       	ldd	r31, Y+11	; 0x0b
   18858:	20 81       	ld	r18, Z
   1885a:	30 e0       	ldi	r19, 0x00	; 0
   1885c:	40 e0       	ldi	r20, 0x00	; 0
   1885e:	50 e0       	ldi	r21, 0x00	; 0
   18860:	88 2d       	mov	r24, r8
   18862:	b3 01       	movw	r22, r6
   18864:	5a dc       	rcall	.-1868   	; 0x1811a <print_var_P>
   18866:	0f 90       	pop	r0
   18868:	0f 90       	pop	r0
   1886a:	0f 90       	pop	r0
   1886c:	0f 90       	pop	r0
   1886e:	0f 90       	pop	r0
        }
        printf("\n");
   18870:	0f 90       	pop	r0
   18872:	1f 92       	push	r1
   18874:	fa 81       	ldd	r31, Y+2	; 0x02
   18876:	ff 93       	push	r31
   18878:	29 81       	ldd	r18, Y+1	; 0x01
   1887a:	2f 93       	push	r18
   1887c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   18880:	0f 90       	pop	r0
   18882:	0f 90       	pop	r0
   18884:	0f 90       	pop	r0
   18886:	09 5f       	subi	r16, 0xF9	; 249
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    printf("Current Configuration Settings\n");
    for(i=0;i<MAX_DEVICES;++i)
   18888:	1f 4f       	sbci	r17, 0xFF	; 255
   1888a:	3e e1       	ldi	r19, 0x1E	; 30
   1888c:	0d 3d       	cpi	r16, 0xDD	; 221
   1888e:	13 07       	cpc	r17, r19
   18890:	09 f0       	breq	.+2      	; 0x18894 <display_Config+0x454>
            printf("  CONFIG\n");
                print_var("ADDRESS", (uint32_t) PRINTERp->HEADER.ADDRESS);
        }
        printf("\n");
    }
    printf("END\n");
   18892:	1c ce       	rjmp	.-968    	; 0x184cc <display_Config+0x8c>
   18894:	87 ef       	ldi	r24, 0xF7	; 247
   18896:	99 e2       	ldi	r25, 0x29	; 41
   18898:	1f 92       	push	r1
   1889a:	9f 93       	push	r25
   1889c:	8f 93       	push	r24
   1889e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    printf("\n");
   188a2:	85 ef       	ldi	r24, 0xF5	; 245
   188a4:	99 e2       	ldi	r25, 0x29	; 41
   188a6:	1f 92       	push	r1
   188a8:	9f 93       	push	r25
   188aa:	8f 93       	push	r24
   188ac:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    printf("\n");
   188b0:	83 ef       	ldi	r24, 0xF3	; 243
   188b2:	99 e2       	ldi	r25, 0x29	; 41
   188b4:	1f 92       	push	r1
   188b6:	9f 93       	push	r25
   188b8:	8f 93       	push	r24
   188ba:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
}
   188be:	0f b6       	in	r0, 0x3f	; 63
   188c0:	f8 94       	cli
   188c2:	de bf       	out	0x3e, r29	; 62
   188c4:	0f be       	out	0x3f, r0	; 63
   188c6:	cd bf       	out	0x3d, r28	; 61
   188c8:	2b 96       	adiw	r28, 0x0b	; 11
   188ca:	0f b6       	in	r0, 0x3f	; 63
   188cc:	f8 94       	cli
   188ce:	de bf       	out	0x3e, r29	; 62
   188d0:	0f be       	out	0x3f, r0	; 63
   188d2:	cd bf       	out	0x3d, r28	; 61
   188d4:	df 91       	pop	r29
   188d6:	cf 91       	pop	r28
   188d8:	1f 91       	pop	r17
   188da:	0f 91       	pop	r16
   188dc:	ef 90       	pop	r14
   188de:	df 90       	pop	r13
   188e0:	cf 90       	pop	r12
   188e2:	bf 90       	pop	r11
   188e4:	af 90       	pop	r10
   188e6:	8f 90       	pop	r8
   188e8:	7f 90       	pop	r7
   188ea:	6f 90       	pop	r6
   188ec:	4f 90       	pop	r4
   188ee:	3f 90       	pop	r3
   188f0:	2f 90       	pop	r2
   188f2:	08 95       	ret

000188f4 <format_drives>:

/// @brief Format devices that have no image file
/// @return  void
void format_drives()
{
   188f4:	2f 92       	push	r2
   188f6:	3f 92       	push	r3
   188f8:	4f 92       	push	r4
   188fa:	5f 92       	push	r5
   188fc:	6f 92       	push	r6
   188fe:	7f 92       	push	r7
   18900:	8f 92       	push	r8
   18902:	af 92       	push	r10
   18904:	bf 92       	push	r11
   18906:	cf 92       	push	r12
   18908:	df 92       	push	r13
   1890a:	ef 92       	push	r14
   1890c:	ff 92       	push	r15
   1890e:	0f 93       	push	r16
   18910:	1f 93       	push	r17
   18912:	cf 93       	push	r28
   18914:	df 93       	push	r29
   18916:	cd b7       	in	r28, 0x3d	; 61
   18918:	de b7       	in	r29, 0x3e	; 62
   1891a:	cd 55       	subi	r28, 0x5D	; 93
   1891c:	d1 09       	sbc	r29, r1
   1891e:	0f b6       	in	r0, 0x3f	; 63
   18920:	f8 94       	cli
   18922:	de bf       	out	0x3e, r29	; 62
   18924:	0f be       	out	0x3f, r0	; 63
   18926:	cd bf       	out	0x3d, r28	; 61
   18928:	85 ea       	ldi	r24, 0xA5	; 165
   1892a:	a8 2e       	mov	r10, r24
   1892c:	8e e1       	ldi	r24, 0x1E	; 30
   1892e:	b8 2e       	mov	r11, r24
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
    int amigo = 1;
   18930:	21 e0       	ldi	r18, 0x01	; 1
   18932:	30 e0       	ldi	r19, 0x00	; 0
   18934:	65 96       	adiw	r28, 0x15	; 21
   18936:	3f af       	std	Y+63, r19	; 0x3f
   18938:	2e af       	std	Y+62, r18	; 0x3e
   1893a:	65 97       	sbiw	r28, 0x15	; 21
{
    int i;
    struct stat st;
    long sectors;
    char label[32];
    int ss80 = 1;
   1893c:	81 e0       	ldi	r24, 0x01	; 1
   1893e:	90 e0       	ldi	r25, 0x00	; 0
   18940:	63 96       	adiw	r28, 0x13	; 19
   18942:	9f af       	std	Y+63, r25	; 0x3f
   18944:	8e af       	std	Y+62, r24	; 0x3e
   18946:	63 97       	sbiw	r28, 0x13	; 19
                }
                sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
                 * AMIGOp->GEOMETRY.HEADS
                 * AMIGOp->GEOMETRY.CYLINDERS;

                sprintf(label,"AMIGO%d", amigo);
   18948:	8f e9       	ldi	r24, 0x9F	; 159
   1894a:	99 e2       	ldi	r25, 0x29	; 41
   1894c:	9c 01       	movw	r18, r24
   1894e:	40 e0       	ldi	r20, 0x00	; 0
   18950:	68 96       	adiw	r28, 0x18	; 24
   18952:	2d af       	std	Y+61, r18	; 0x3d
   18954:	3e af       	std	Y+62, r19	; 0x3e
   18956:	4f af       	std	Y+63, r20	; 0x3f
   18958:	68 97       	sbiw	r28, 0x18	; 24
   1895a:	2e 01       	movw	r4, r28
   1895c:	31 e3       	ldi	r19, 0x31	; 49
   1895e:	43 0e       	add	r4, r19
   18960:	51 1c       	adc	r5, r1
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   18962:	87 ea       	ldi	r24, 0xA7	; 167
   18964:	99 e2       	ldi	r25, 0x29	; 41
   18966:	9c 01       	movw	r18, r24
   18968:	40 e0       	ldi	r20, 0x00	; 0
   1896a:	6b 96       	adiw	r28, 0x1b	; 27
   1896c:	2d af       	std	Y+61, r18	; 0x3d
   1896e:	3e af       	std	Y+62, r19	; 0x3e
   18970:	4f af       	std	Y+63, r20	; 0x3f
   18972:	6b 97       	sbiw	r28, 0x1b	; 27
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER;
                sprintf(label,"SS80-%d", ss80);
   18974:	89 ec       	ldi	r24, 0xC9	; 201
   18976:	99 e2       	ldi	r25, 0x29	; 41
   18978:	3c 01       	movw	r6, r24

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
                {
                    printf("Can not use non 256 byte sectors\n");
   1897a:	81 ed       	ldi	r24, 0xD1	; 209
   1897c:	99 e2       	ldi	r25, 0x29	; 41
   1897e:	9c 01       	movw	r18, r24
   18980:	40 e0       	ldi	r20, 0x00	; 0
   18982:	6e 96       	adiw	r28, 0x1e	; 30
   18984:	2d af       	std	Y+61, r18	; 0x3d
   18986:	3e af       	std	Y+62, r19	; 0x3e
   18988:	4f af       	std	Y+63, r20	; 0x3f
   1898a:	6e 97       	sbiw	r28, 0x1e	; 30
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
    {
        if(Devices[i].TYPE == NO_TYPE)
   1898c:	f5 01       	movw	r30, r10
   1898e:	80 81       	ld	r24, Z
   18990:	88 23       	and	r24, r24
   18992:	09 f4       	brne	.+2      	; 0x18996 <format_drives+0xa2>
   18994:	bc c0       	rjmp	.+376    	; 0x18b0e <format_drives+0x21a>
            continue;

        if(Devices[i].TYPE == SS80_TYPE)
   18996:	82 30       	cpi	r24, 0x02	; 2
   18998:	09 f0       	breq	.+2      	; 0x1899c <format_drives+0xa8>
   1899a:	4c c0       	rjmp	.+152    	; 0x18a34 <format_drives+0x140>
        {
            SS80p= (SS80DiskType *)Devices[i].dev;
   1899c:	03 81       	ldd	r16, Z+3	; 0x03
   1899e:	14 81       	ldd	r17, Z+4	; 0x04

            if(stat(SS80p->HEADER.NAME, &st) == -1) 
   189a0:	18 01       	movw	r2, r16
   189a2:	f2 e0       	ldi	r31, 0x02	; 2
   189a4:	2f 0e       	add	r2, r31
   189a6:	31 1c       	adc	r3, r1
   189a8:	be 01       	movw	r22, r28
   189aa:	6f 5f       	subi	r22, 0xFF	; 255
   189ac:	7f 4f       	sbci	r23, 0xFF	; 255
   189ae:	c1 01       	movw	r24, r2
   189b0:	0e 94 e6 7c 	call	0xf9cc	; 0xf9cc <stat>
   189b4:	01 96       	adiw	r24, 0x01	; 1
   189b6:	a1 f5       	brne	.+104    	; 0x18a20 <format_drives+0x12c>
            {
                if( SS80p->UNIT.BYTES_PER_BLOCK != 256)
   189b8:	f8 01       	movw	r30, r16
   189ba:	87 a5       	ldd	r24, Z+47	; 0x2f
   189bc:	90 a9       	ldd	r25, Z+48	; 0x30
   189be:	81 15       	cp	r24, r1
   189c0:	91 40       	sbci	r25, 0x01	; 1
   189c2:	49 f0       	breq	.+18     	; 0x189d6 <format_drives+0xe2>
                {
                    printf("Can not use non 256 byte sectors\n");
   189c4:	1f 92       	push	r1
   189c6:	6d 96       	adiw	r28, 0x1d	; 29
   189c8:	2f ad       	ldd	r18, Y+63	; 0x3f
   189ca:	6d 97       	sbiw	r28, 0x1d	; 29
   189cc:	2f 93       	push	r18
   189ce:	6c 96       	adiw	r28, 0x1c	; 28
   189d0:	3f ad       	ldd	r19, Y+63	; 0x3f
   189d2:	6c 97       	sbiw	r28, 0x1c	; 28
   189d4:	51 c0       	rjmp	.+162    	; 0x18a78 <format_drives+0x184>
                    continue;
                }
                //SS80p->VOLUME.MAX_CYLINDER;
                //SS80p->VOLUME.MAX_HEAD;
                //SS80p->VOLUME.MAX_SECTOR;
                sectors = SS80p->VOLUME.MAX_BLOCK_NUMBER;
   189d6:	f8 01       	movw	r30, r16
   189d8:	eb 5b       	subi	r30, 0xBB	; 187
   189da:	ff 4f       	sbci	r31, 0xFF	; 255
   189dc:	c0 80       	ld	r12, Z
   189de:	d1 80       	ldd	r13, Z+1	; 0x01
   189e0:	e2 80       	ldd	r14, Z+2	; 0x02
   189e2:	f3 80       	ldd	r15, Z+3	; 0x03
                sprintf(label,"SS80-%d", ss80);
   189e4:	63 96       	adiw	r28, 0x13	; 19
   189e6:	4f ad       	ldd	r20, Y+63	; 0x3f
   189e8:	63 97       	sbiw	r28, 0x13	; 19
   189ea:	4f 93       	push	r20
   189ec:	62 96       	adiw	r28, 0x12	; 18
   189ee:	8f ad       	ldd	r24, Y+63	; 0x3f
   189f0:	62 97       	sbiw	r28, 0x12	; 18
   189f2:	8f 93       	push	r24
   189f4:	1f 92       	push	r1
   189f6:	7f 92       	push	r7
   189f8:	6f 92       	push	r6
   189fa:	5f 92       	push	r5
   189fc:	4f 92       	push	r4
   189fe:	0e 94 ae 44 	call	0x895c	; 0x895c <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(SS80p->HEADER.NAME,
   18a02:	87 01       	movw	r16, r14
   18a04:	76 01       	movw	r14, r12
   18a06:	20 e8       	ldi	r18, 0x80	; 128
   18a08:	30 e0       	ldi	r19, 0x00	; 0
   18a0a:	40 e0       	ldi	r20, 0x00	; 0
   18a0c:	50 e0       	ldi	r21, 0x00	; 0
   18a0e:	b2 01       	movw	r22, r4
   18a10:	c1 01       	movw	r24, r2
   18a12:	0e 94 c2 e3 	call	0x1c784	; 0x1c784 <lif_create_image>
   18a16:	0f b6       	in	r0, 0x3f	; 63
   18a18:	f8 94       	cli
   18a1a:	de bf       	out	0x3e, r29	; 62
   18a1c:	0f be       	out	0x3f, r0	; 63
   18a1e:	cd bf       	out	0x3d, r28	; 61
#else
                printf("please create a SS80 LIF image with %ld sectors and 128 directory sectors\n", sectors);
#endif

            }
            ss80++;
   18a20:	63 96       	adiw	r28, 0x13	; 19
   18a22:	2e ad       	ldd	r18, Y+62	; 0x3e
   18a24:	3f ad       	ldd	r19, Y+63	; 0x3f
   18a26:	63 97       	sbiw	r28, 0x13	; 19
   18a28:	2f 5f       	subi	r18, 0xFF	; 255
   18a2a:	3f 4f       	sbci	r19, 0xFF	; 255
   18a2c:	63 96       	adiw	r28, 0x13	; 19
   18a2e:	3f af       	std	Y+63, r19	; 0x3f
   18a30:	2e af       	std	Y+62, r18	; 0x3e
   18a32:	63 97       	sbiw	r28, 0x13	; 19
        } // SS80_TYPE

#ifdef AMIGO
        if(Devices[i].TYPE == AMIGO_TYPE )
   18a34:	f5 01       	movw	r30, r10
   18a36:	80 81       	ld	r24, Z
   18a38:	81 30       	cpi	r24, 0x01	; 1
   18a3a:	09 f0       	breq	.+2      	; 0x18a3e <format_drives+0x14a>
   18a3c:	68 c0       	rjmp	.+208    	; 0x18b0e <format_drives+0x21a>
        {
            AMIGOp= (AMIGODiskType *)Devices[i].dev;
   18a3e:	03 81       	ldd	r16, Z+3	; 0x03
   18a40:	14 81       	ldd	r17, Z+4	; 0x04
            if(stat(AMIGOp->HEADER.NAME, &st) == -1) 
   18a42:	68 01       	movw	r12, r16
   18a44:	f2 e0       	ldi	r31, 0x02	; 2
   18a46:	cf 0e       	add	r12, r31
   18a48:	d1 1c       	adc	r13, r1
   18a4a:	be 01       	movw	r22, r28
   18a4c:	6f 5f       	subi	r22, 0xFF	; 255
   18a4e:	7f 4f       	sbci	r23, 0xFF	; 255
   18a50:	c6 01       	movw	r24, r12
   18a52:	0e 94 e6 7c 	call	0xf9cc	; 0xf9cc <stat>
   18a56:	01 96       	adiw	r24, 0x01	; 1
   18a58:	09 f0       	breq	.+2      	; 0x18a5c <format_drives+0x168>
   18a5a:	50 c0       	rjmp	.+160    	; 0x18afc <format_drives+0x208>
            {
                if( AMIGOp->GEOMETRY.BYTES_PER_SECTOR != 256)
   18a5c:	f8 01       	movw	r30, r16
   18a5e:	85 a1       	ldd	r24, Z+37	; 0x25
   18a60:	96 a1       	ldd	r25, Z+38	; 0x26
   18a62:	81 15       	cp	r24, r1
   18a64:	91 40       	sbci	r25, 0x01	; 1
   18a66:	79 f0       	breq	.+30     	; 0x18a86 <format_drives+0x192>
                {
                    printf("Can not use non 256 byte sectors\n");
   18a68:	1f 92       	push	r1
   18a6a:	6a 96       	adiw	r28, 0x1a	; 26
   18a6c:	2f ad       	ldd	r18, Y+63	; 0x3f
   18a6e:	6a 97       	sbiw	r28, 0x1a	; 26
   18a70:	2f 93       	push	r18
   18a72:	69 96       	adiw	r28, 0x19	; 25
   18a74:	3f ad       	ldd	r19, Y+63	; 0x3f
   18a76:	69 97       	sbiw	r28, 0x19	; 25
   18a78:	3f 93       	push	r19
   18a7a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
                    continue;
   18a7e:	0f 90       	pop	r0
   18a80:	0f 90       	pop	r0
   18a82:	0f 90       	pop	r0
   18a84:	44 c0       	rjmp	.+136    	; 0x18b0e <format_drives+0x21a>
                }
                sectors = AMIGOp->GEOMETRY.SECTORS_PER_TRACK
                 * AMIGOp->GEOMETRY.HEADS
                 * AMIGOp->GEOMETRY.CYLINDERS;
   18a86:	f8 01       	movw	r30, r16
   18a88:	47 a1       	ldd	r20, Z+39	; 0x27
   18a8a:	50 a5       	ldd	r21, Z+40	; 0x28
   18a8c:	81 a5       	ldd	r24, Z+41	; 0x29
   18a8e:	92 a5       	ldd	r25, Z+42	; 0x2a
   18a90:	48 9f       	mul	r20, r24
   18a92:	90 01       	movw	r18, r0
   18a94:	49 9f       	mul	r20, r25
   18a96:	30 0d       	add	r19, r0
   18a98:	58 9f       	mul	r21, r24
   18a9a:	30 0d       	add	r19, r0
   18a9c:	11 24       	eor	r1, r1
   18a9e:	83 a5       	ldd	r24, Z+43	; 0x2b
   18aa0:	94 a5       	ldd	r25, Z+44	; 0x2c
   18aa2:	28 9f       	mul	r18, r24
   18aa4:	70 01       	movw	r14, r0
   18aa6:	29 9f       	mul	r18, r25
   18aa8:	f0 0c       	add	r15, r0
   18aaa:	38 9f       	mul	r19, r24
   18aac:	f0 0c       	add	r15, r0
   18aae:	11 24       	eor	r1, r1

                sprintf(label,"AMIGO%d", amigo);
   18ab0:	65 96       	adiw	r28, 0x15	; 21
   18ab2:	ff ad       	ldd	r31, Y+63	; 0x3f
   18ab4:	65 97       	sbiw	r28, 0x15	; 21
   18ab6:	ff 93       	push	r31
   18ab8:	64 96       	adiw	r28, 0x14	; 20
   18aba:	2f ad       	ldd	r18, Y+63	; 0x3f
   18abc:	64 97       	sbiw	r28, 0x14	; 20
   18abe:	2f 93       	push	r18
   18ac0:	1f 92       	push	r1
   18ac2:	67 96       	adiw	r28, 0x17	; 23
   18ac4:	3f ad       	ldd	r19, Y+63	; 0x3f
   18ac6:	67 97       	sbiw	r28, 0x17	; 23
   18ac8:	3f 93       	push	r19
   18aca:	66 96       	adiw	r28, 0x16	; 22
   18acc:	4f ad       	ldd	r20, Y+63	; 0x3f
   18ace:	66 97       	sbiw	r28, 0x16	; 22
   18ad0:	4f 93       	push	r20
   18ad2:	5f 92       	push	r5
   18ad4:	4f 92       	push	r4
   18ad6:	0e 94 ae 44 	call	0x895c	; 0x895c <sprintf_P>
#ifdef LIF_SUPPORT
                lif_create_image(AMIGOp->HEADER.NAME,
   18ada:	0f 2c       	mov	r0, r15
   18adc:	00 0c       	add	r0, r0
   18ade:	00 0b       	sbc	r16, r16
   18ae0:	11 0b       	sbc	r17, r17
   18ae2:	2f e0       	ldi	r18, 0x0F	; 15
   18ae4:	30 e0       	ldi	r19, 0x00	; 0
   18ae6:	40 e0       	ldi	r20, 0x00	; 0
   18ae8:	50 e0       	ldi	r21, 0x00	; 0
   18aea:	b2 01       	movw	r22, r4
   18aec:	c6 01       	movw	r24, r12
   18aee:	0e 94 c2 e3 	call	0x1c784	; 0x1c784 <lif_create_image>
   18af2:	0f b6       	in	r0, 0x3f	; 63
   18af4:	f8 94       	cli
   18af6:	de bf       	out	0x3e, r29	; 62
   18af8:	0f be       	out	0x3f, r0	; 63
   18afa:	cd bf       	out	0x3d, r28	; 61
                    sectors);
#else
                printf("please create a AMIGO LIF image with %ld sectors and 15 directory sectors\n", sectors);
#endif
            }
            amigo++;
   18afc:	65 96       	adiw	r28, 0x15	; 21
   18afe:	ee ad       	ldd	r30, Y+62	; 0x3e
   18b00:	ff ad       	ldd	r31, Y+63	; 0x3f
   18b02:	65 97       	sbiw	r28, 0x15	; 21
   18b04:	31 96       	adiw	r30, 0x01	; 1
   18b06:	65 96       	adiw	r28, 0x15	; 21
   18b08:	ff af       	std	Y+63, r31	; 0x3f
   18b0a:	ee af       	std	Y+62, r30	; 0x3e
   18b0c:	65 97       	sbiw	r28, 0x15	; 21
   18b0e:	f7 e0       	ldi	r31, 0x07	; 7
   18b10:	af 0e       	add	r10, r31
   18b12:	b1 1c       	adc	r11, r1
#ifdef AMIGO
    ///@brief Active AMIGO Device
    AMIGODiskType *AMIGOp = NULL;
#endif

    for(i=0;i<MAX_DEVICES;++i)
   18b14:	2d ed       	ldi	r18, 0xDD	; 221
   18b16:	3e e1       	ldi	r19, 0x1E	; 30
   18b18:	2a 15       	cp	r18, r10
   18b1a:	3b 05       	cpc	r19, r11
   18b1c:	09 f0       	breq	.+2      	; 0x18b20 <format_drives+0x22c>
   18b1e:	36 cf       	rjmp	.-404    	; 0x1898c <format_drives+0x98>
            }
            amigo++;
        } 
#endif // #ifdef AMIGO
    }
    printf("\n");
   18b20:	8d e9       	ldi	r24, 0x9D	; 157
   18b22:	99 e2       	ldi	r25, 0x29	; 41
   18b24:	1f 92       	push	r1
   18b26:	9f 93       	push	r25
   18b28:	8f 93       	push	r24
   18b2a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
}
   18b2e:	0f 90       	pop	r0
   18b30:	0f 90       	pop	r0
   18b32:	0f 90       	pop	r0
   18b34:	c3 5a       	subi	r28, 0xA3	; 163
   18b36:	df 4f       	sbci	r29, 0xFF	; 255
   18b38:	0f b6       	in	r0, 0x3f	; 63
   18b3a:	f8 94       	cli
   18b3c:	de bf       	out	0x3e, r29	; 62
   18b3e:	0f be       	out	0x3f, r0	; 63
   18b40:	cd bf       	out	0x3d, r28	; 61
   18b42:	df 91       	pop	r29
   18b44:	cf 91       	pop	r28
   18b46:	1f 91       	pop	r17
   18b48:	0f 91       	pop	r16
   18b4a:	ff 90       	pop	r15
   18b4c:	ef 90       	pop	r14
   18b4e:	df 90       	pop	r13
   18b50:	cf 90       	pop	r12
   18b52:	bf 90       	pop	r11
   18b54:	af 90       	pop	r10
   18b56:	8f 90       	pop	r8
   18b58:	7f 90       	pop	r7
   18b5a:	6f 90       	pop	r6
   18b5c:	5f 90       	pop	r5
   18b5e:	4f 90       	pop	r4
   18b60:	3f 90       	pop	r3
   18b62:	2f 90       	pop	r2
   18b64:	08 95       	ret

00018b66 <controller_send_str>:
/// @param[in] to:      GPIB listener
/// @param[in] str: string to send
/// @param[in] len: number of bytes to send (if 0 then length of string)
/// @return  number of bytes sent
int controller_send_str(uint8_t from, uint8_t to, char *str, int len)
{
   18b66:	a2 e0       	ldi	r26, 0x02	; 2
   18b68:	b0 e0       	ldi	r27, 0x00	; 0
   18b6a:	e9 eb       	ldi	r30, 0xB9	; 185
   18b6c:	f5 ec       	ldi	r31, 0xC5	; 197
   18b6e:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__prologue_saves__+0x14>
   18b72:	e8 2e       	mov	r14, r24
   18b74:	f6 2e       	mov	r15, r22
   18b76:	6a 01       	movw	r12, r20
   18b78:	89 01       	movw	r16, r18
    uint16_t status = 0;
   18b7a:	1a 82       	std	Y+2, r1	; 0x02
   18b7c:	19 82       	std	Y+1, r1	; 0x01
    int size;
    if(len == 0)
   18b7e:	23 2b       	or	r18, r19
   18b80:	41 f4       	brne	.+16     	; 0x18b92 <controller_send_str+0x2c>
        len = strlen((char *)str);
   18b82:	fa 01       	movw	r30, r20
   18b84:	01 90       	ld	r0, Z+
   18b86:	00 20       	and	r0, r0
   18b88:	e9 f7       	brne	.-6      	; 0x18b84 <controller_send_str+0x1e>
   18b8a:	31 97       	sbiw	r30, 0x01	; 1
   18b8c:	8f 01       	movw	r16, r30
   18b8e:	04 1b       	sub	r16, r20
   18b90:	15 0b       	sbc	r17, r21

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   18b92:	8f e5       	ldi	r24, 0x5F	; 95
   18b94:	94 e0       	ldi	r25, 0x04	; 4
   18b96:	0e 94 d5 8c 	call	0x119aa	; 0x119aa <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   18b9a:	8f e3       	ldi	r24, 0x3F	; 63
   18b9c:	94 e0       	ldi	r25, 0x04	; 4
   18b9e:	0e 94 d5 8c 	call	0x119aa	; 0x119aa <gpib_write_byte>

    gpib_write_byte(0x40 | from | ATN_FLAG);// GPIB talker
   18ba2:	8e 2d       	mov	r24, r14
   18ba4:	80 64       	ori	r24, 0x40	; 64
   18ba6:	90 e0       	ldi	r25, 0x00	; 0
   18ba8:	94 60       	ori	r25, 0x04	; 4
   18baa:	0e 94 d5 8c 	call	0x119aa	; 0x119aa <gpib_write_byte>
    gpib_write_byte(0x20 | to | ATN_FLAG);  // GPIB listener
   18bae:	8f 2d       	mov	r24, r15
   18bb0:	80 62       	ori	r24, 0x20	; 32
   18bb2:	90 e0       	ldi	r25, 0x00	; 0
   18bb4:	94 60       	ori	r25, 0x04	; 4
   18bb6:	0e 94 d5 8c 	call	0x119aa	; 0x119aa <gpib_write_byte>

    status = EOI_FLAG;
   18bba:	80 e0       	ldi	r24, 0x00	; 0
   18bbc:	91 e0       	ldi	r25, 0x01	; 1
   18bbe:	9a 83       	std	Y+2, r25	; 0x02
   18bc0:	89 83       	std	Y+1, r24	; 0x01
    size = gpib_write_str((uint8_t *)str, len, &status);
   18bc2:	ae 01       	movw	r20, r28
   18bc4:	4f 5f       	subi	r20, 0xFF	; 255
   18bc6:	5f 4f       	sbci	r21, 0xFF	; 255
   18bc8:	b8 01       	movw	r22, r16
   18bca:	c6 01       	movw	r24, r12
   18bcc:	0e 94 5e 91 	call	0x122bc	; 0x122bc <gpib_write_str>
   18bd0:	8c 01       	movw	r16, r24

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   18bd2:	8f e5       	ldi	r24, 0x5F	; 95
   18bd4:	94 e0       	ldi	r25, 0x04	; 4
   18bd6:	0e 94 d5 8c 	call	0x119aa	; 0x119aa <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   18bda:	8f e3       	ldi	r24, 0x3F	; 63
   18bdc:	94 e0       	ldi	r25, 0x04	; 4
   18bde:	0e 94 d5 8c 	call	0x119aa	; 0x119aa <gpib_write_byte>
    return(size);
}
   18be2:	c8 01       	movw	r24, r16
   18be4:	22 96       	adiw	r28, 0x02	; 2
   18be6:	e8 e0       	ldi	r30, 0x08	; 8
   18be8:	0c 94 e7 e8 	jmp	0x1d1ce	; 0x1d1ce <__epilogue_restores__+0x14>

00018bec <controller_read_str>:
/// @param[in] to:      GPIB listener
/// @param[in] str: string to read
/// @param[in] len: maximum number of bytes to read
/// @return  number of bytes read
int controller_read_str(uint8_t from, uint8_t to, char *str, int len)
{
   18bec:	a2 e0       	ldi	r26, 0x02	; 2
   18bee:	b0 e0       	ldi	r27, 0x00	; 0
   18bf0:	ec ef       	ldi	r30, 0xFC	; 252
   18bf2:	f5 ec       	ldi	r31, 0xC5	; 197
   18bf4:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__prologue_saves__+0x14>
   18bf8:	c8 2e       	mov	r12, r24
   18bfa:	d6 2e       	mov	r13, r22
   18bfc:	7a 01       	movw	r14, r20
   18bfe:	89 01       	movw	r16, r18
    uint16_t status;
    int size;

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   18c00:	8f e5       	ldi	r24, 0x5F	; 95
   18c02:	94 e0       	ldi	r25, 0x04	; 4
   18c04:	0e 94 d5 8c 	call	0x119aa	; 0x119aa <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   18c08:	8f e3       	ldi	r24, 0x3F	; 63
   18c0a:	94 e0       	ldi	r25, 0x04	; 4
   18c0c:	0e 94 d5 8c 	call	0x119aa	; 0x119aa <gpib_write_byte>

    gpib_write_byte(0x40 | from | ATN_FLAG);    // GPIB talker
   18c10:	8c 2d       	mov	r24, r12
   18c12:	80 64       	ori	r24, 0x40	; 64
   18c14:	90 e0       	ldi	r25, 0x00	; 0
   18c16:	94 60       	ori	r25, 0x04	; 4
   18c18:	0e 94 d5 8c 	call	0x119aa	; 0x119aa <gpib_write_byte>
    gpib_write_byte(0x20 | to | ATN_FLAG);      // GPIB listener
   18c1c:	8d 2d       	mov	r24, r13
   18c1e:	80 62       	ori	r24, 0x20	; 32
   18c20:	90 e0       	ldi	r25, 0x00	; 0
   18c22:	94 60       	ori	r25, 0x04	; 4
   18c24:	0e 94 d5 8c 	call	0x119aa	; 0x119aa <gpib_write_byte>

    status = EOI_FLAG;
   18c28:	80 e0       	ldi	r24, 0x00	; 0
   18c2a:	91 e0       	ldi	r25, 0x01	; 1
   18c2c:	9a 83       	std	Y+2, r25	; 0x02
   18c2e:	89 83       	std	Y+1, r24	; 0x01
    size = gpib_read_str((uint8_t *)str,len, &status);
   18c30:	ae 01       	movw	r20, r28
   18c32:	4f 5f       	subi	r20, 0xFF	; 255
   18c34:	5f 4f       	sbci	r21, 0xFF	; 255
   18c36:	b8 01       	movw	r22, r16
   18c38:	c7 01       	movw	r24, r14
   18c3a:	0e 94 b0 90 	call	0x12160	; 0x12160 <gpib_read_str>
   18c3e:	6c 01       	movw	r12, r24
    if(size > 0)
   18c40:	18 16       	cp	r1, r24
   18c42:	19 06       	cpc	r1, r25
   18c44:	64 f4       	brge	.+24     	; 0x18c5e <controller_read_str+0x72>
    {
        if(size < len)
   18c46:	80 17       	cp	r24, r16
   18c48:	91 07       	cpc	r25, r17
   18c4a:	24 f4       	brge	.+8      	; 0x18c54 <controller_read_str+0x68>
            str[size] = 0;
   18c4c:	f7 01       	movw	r30, r14
   18c4e:	e8 0f       	add	r30, r24
   18c50:	f9 1f       	adc	r31, r25
   18c52:	04 c0       	rjmp	.+8      	; 0x18c5c <controller_read_str+0x70>
        else
            str[len-1] = 0;
   18c54:	0e 0d       	add	r16, r14
   18c56:	1f 1d       	adc	r17, r15
   18c58:	f8 01       	movw	r30, r16
   18c5a:	31 97       	sbiw	r30, 0x01	; 1
   18c5c:	10 82       	st	Z, r1
    }

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   18c5e:	8f e5       	ldi	r24, 0x5F	; 95
   18c60:	94 e0       	ldi	r25, 0x04	; 4
   18c62:	0e 94 d5 8c 	call	0x119aa	; 0x119aa <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   18c66:	8f e3       	ldi	r24, 0x3F	; 63
   18c68:	94 e0       	ldi	r25, 0x04	; 4
   18c6a:	0e 94 d5 8c 	call	0x119aa	; 0x119aa <gpib_write_byte>
    return(size);
}
   18c6e:	c6 01       	movw	r24, r12
   18c70:	22 96       	adiw	r28, 0x02	; 2
   18c72:	e8 e0       	ldi	r30, 0x08	; 8
   18c74:	0c 94 e7 e8 	jmp	0x1d1ce	; 0x1d1ce <__epilogue_restores__+0x14>

00018c78 <controller_read_trace>:
/// Stops reading at EOI
/// @param[in] from:    GPIB talker
/// @param[in] to:      GPIB listener
/// @return  number of bytes read
int controller_read_trace(uint8_t from, uint8_t to)
{
   18c78:	cf 92       	push	r12
   18c7a:	df 92       	push	r13
   18c7c:	ef 92       	push	r14
   18c7e:	ff 92       	push	r15
   18c80:	cf 93       	push	r28
   18c82:	df 93       	push	r29
   18c84:	d8 2f       	mov	r29, r24
   18c86:	c6 2f       	mov	r28, r22
    uint16_t ch;
    long len =0;

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   18c88:	8f e5       	ldi	r24, 0x5F	; 95
   18c8a:	94 e0       	ldi	r25, 0x04	; 4
   18c8c:	0e 94 d5 8c 	call	0x119aa	; 0x119aa <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   18c90:	8f e3       	ldi	r24, 0x3F	; 63
   18c92:	94 e0       	ldi	r25, 0x04	; 4
   18c94:	0e 94 d5 8c 	call	0x119aa	; 0x119aa <gpib_write_byte>

    gpib_write_byte(0x40 | from | ATN_FLAG);    // GPIB talker
   18c98:	d0 64       	ori	r29, 0x40	; 64
   18c9a:	8d 2f       	mov	r24, r29
   18c9c:	90 e0       	ldi	r25, 0x00	; 0
   18c9e:	94 60       	ori	r25, 0x04	; 4
   18ca0:	0e 94 d5 8c 	call	0x119aa	; 0x119aa <gpib_write_byte>
    gpib_write_byte(0x20 | to | ATN_FLAG);      // GPIB listener
   18ca4:	c0 62       	ori	r28, 0x20	; 32
   18ca6:	8c 2f       	mov	r24, r28
   18ca8:	90 e0       	ldi	r25, 0x00	; 0
   18caa:	94 60       	ori	r25, 0x04	; 4
   18cac:	0e 94 d5 8c 	call	0x119aa	; 0x119aa <gpib_write_byte>
/// @param[in] to:      GPIB listener
/// @return  number of bytes read
int controller_read_trace(uint8_t from, uint8_t to)
{
    uint16_t ch;
    long len =0;
   18cb0:	c1 2c       	mov	r12, r1
   18cb2:	d1 2c       	mov	r13, r1
   18cb4:	76 01       	movw	r14, r12
    gpib_write_byte(0x40 | from | ATN_FLAG);    // GPIB talker
    gpib_write_byte(0x20 | to | ATN_FLAG);      // GPIB listener

    while(1) // loop until EOI or user ABORT
    {
        if(uart_keyhit(0))
   18cb6:	80 e0       	ldi	r24, 0x00	; 0
   18cb8:	0e 94 14 2c 	call	0x5828	; 0x5828 <uart_keyhit>
   18cbc:	89 2b       	or	r24, r25
   18cbe:	79 f4       	brne	.+30     	; 0x18cde <controller_read_trace+0x66>
            break;
        ch = gpib_read_byte(0);
   18cc0:	80 e0       	ldi	r24, 0x00	; 0
   18cc2:	90 e0       	ldi	r25, 0x00	; 0
   18cc4:	0e 94 d6 8f 	call	0x11fac	; 0x11fac <gpib_read_byte>
   18cc8:	ec 01       	movw	r28, r24
        gpib_decode(ch);
   18cca:	0e 94 ac 90 	call	0x12158	; 0x12158 <gpib_decode>
       if(ch & EOI_FLAG)
   18cce:	d0 fd       	sbrc	r29, 0
   18cd0:	06 c0       	rjmp	.+12     	; 0x18cde <controller_read_trace+0x66>
            break;
        ++len;
   18cd2:	8f ef       	ldi	r24, 0xFF	; 255
   18cd4:	c8 1a       	sub	r12, r24
   18cd6:	d8 0a       	sbc	r13, r24
   18cd8:	e8 0a       	sbc	r14, r24
   18cda:	f8 0a       	sbc	r15, r24
    }
   18cdc:	ec cf       	rjmp	.-40     	; 0x18cb6 <controller_read_trace+0x3e>

    gpib_write_byte(0x5f | ATN_FLAG);   // untalk
   18cde:	8f e5       	ldi	r24, 0x5F	; 95
   18ce0:	94 e0       	ldi	r25, 0x04	; 4
   18ce2:	0e 94 d5 8c 	call	0x119aa	; 0x119aa <gpib_write_byte>
    gpib_write_byte(0x3f | ATN_FLAG);   // unlisten
   18ce6:	8f e3       	ldi	r24, 0x3F	; 63
   18ce8:	94 e0       	ldi	r25, 0x04	; 4
   18cea:	0e 94 d5 8c 	call	0x119aa	; 0x119aa <gpib_write_byte>
    return(len);
}
   18cee:	c6 01       	movw	r24, r12
   18cf0:	df 91       	pop	r29
   18cf2:	cf 91       	pop	r28
   18cf4:	ff 90       	pop	r15
   18cf6:	ef 90       	pop	r14
   18cf8:	df 90       	pop	r13
   18cfa:	cf 90       	pop	r12
   18cfc:	08 95       	ret

00018cfe <lif_help>:
   18cfe:	cf 93       	push	r28
   18d00:	df 93       	push	r29
   18d02:	ec 01       	movw	r28, r24
   18d04:	8e e7       	ldi	r24, 0x7E	; 126
   18d06:	95 e4       	ldi	r25, 0x45	; 69
   18d08:	1f 92       	push	r1
   18d0a:	9f 93       	push	r25
   18d0c:	8f 93       	push	r24
   18d0e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   18d12:	0f 90       	pop	r0
   18d14:	0f 90       	pop	r0
   18d16:	0f 90       	pop	r0
   18d18:	cd 2b       	or	r28, r29
   18d1a:	51 f0       	breq	.+20     	; 0x18d30 <lif_help+0x32>
   18d1c:	89 ed       	ldi	r24, 0xD9	; 217
   18d1e:	93 e4       	ldi	r25, 0x43	; 67
   18d20:	1f 92       	push	r1
   18d22:	9f 93       	push	r25
   18d24:	8f 93       	push	r24
   18d26:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   18d2a:	0f 90       	pop	r0
   18d2c:	0f 90       	pop	r0
   18d2e:	0f 90       	pop	r0
   18d30:	df 91       	pop	r29
   18d32:	cf 91       	pop	r28
   18d34:	08 95       	ret

00018d36 <lif_calloc>:
   18d36:	ef 92       	push	r14
   18d38:	ff 92       	push	r15
   18d3a:	0f 93       	push	r16
   18d3c:	1f 93       	push	r17
   18d3e:	cf 93       	push	r28
   18d40:	df 93       	push	r29
   18d42:	16 2f       	mov	r17, r22
   18d44:	07 2f       	mov	r16, r23
   18d46:	f8 2e       	mov	r15, r24
   18d48:	e9 2e       	mov	r14, r25
   18d4a:	61 e0       	ldi	r22, 0x01	; 1
   18d4c:	70 e0       	ldi	r23, 0x00	; 0
   18d4e:	81 2f       	mov	r24, r17
   18d50:	90 2f       	mov	r25, r16
   18d52:	0e 94 7e 29 	call	0x52fc	; 0x52fc <safecalloc>
   18d56:	ec 01       	movw	r28, r24
   18d58:	89 2b       	or	r24, r25
   18d5a:	99 f4       	brne	.+38     	; 0x18d82 <lif_calloc+0x4c>
   18d5c:	ef 92       	push	r14
   18d5e:	ff 92       	push	r15
   18d60:	0f 93       	push	r16
   18d62:	1f 93       	push	r17
   18d64:	80 eb       	ldi	r24, 0xB0	; 176
   18d66:	93 e4       	ldi	r25, 0x43	; 67
   18d68:	1f 92       	push	r1
   18d6a:	9f 93       	push	r25
   18d6c:	8f 93       	push	r24
   18d6e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   18d72:	8d b7       	in	r24, 0x3d	; 61
   18d74:	9e b7       	in	r25, 0x3e	; 62
   18d76:	07 96       	adiw	r24, 0x07	; 7
   18d78:	0f b6       	in	r0, 0x3f	; 63
   18d7a:	f8 94       	cli
   18d7c:	9e bf       	out	0x3e, r25	; 62
   18d7e:	0f be       	out	0x3f, r0	; 63
   18d80:	8d bf       	out	0x3d, r24	; 61
   18d82:	ce 01       	movw	r24, r28
   18d84:	cd b7       	in	r28, 0x3d	; 61
   18d86:	de b7       	in	r29, 0x3e	; 62
   18d88:	e6 e0       	ldi	r30, 0x06	; 6
   18d8a:	0c 94 e9 e8 	jmp	0x1d1d2	; 0x1d1d2 <__epilogue_restores__+0x18>

00018d8e <lif_free>:
   18d8e:	00 97       	sbiw	r24, 0x00	; 0
   18d90:	59 f4       	brne	.+22     	; 0x18da8 <lif_free+0x1a>
   18d92:	88 e9       	ldi	r24, 0x98	; 152
   18d94:	93 e4       	ldi	r25, 0x43	; 67
   18d96:	1f 92       	push	r1
   18d98:	9f 93       	push	r25
   18d9a:	8f 93       	push	r24
   18d9c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   18da0:	0f 90       	pop	r0
   18da2:	0f 90       	pop	r0
   18da4:	0f 90       	pop	r0
   18da6:	08 95       	ret
   18da8:	0c 94 c7 29 	jmp	0x538e	; 0x538e <safefree>
   18dac:	08 95       	ret

00018dae <lif_stralloc>:
   18dae:	0f 93       	push	r16
   18db0:	1f 93       	push	r17
   18db2:	cf 93       	push	r28
   18db4:	df 93       	push	r29
   18db6:	ec 01       	movw	r28, r24
   18db8:	fc 01       	movw	r30, r24
   18dba:	01 90       	ld	r0, Z+
   18dbc:	00 20       	and	r0, r0
   18dbe:	e9 f7       	brne	.-6      	; 0x18dba <lif_stralloc+0xc>
   18dc0:	bf 01       	movw	r22, r30
   18dc2:	68 1b       	sub	r22, r24
   18dc4:	79 0b       	sbc	r23, r25
   18dc6:	6d 5f       	subi	r22, 0xFD	; 253
   18dc8:	7f 4f       	sbci	r23, 0xFF	; 255
   18dca:	07 2e       	mov	r0, r23
   18dcc:	00 0c       	add	r0, r0
   18dce:	88 0b       	sbc	r24, r24
   18dd0:	99 0b       	sbc	r25, r25
   18dd2:	b1 df       	rcall	.-158    	; 0x18d36 <lif_calloc>
   18dd4:	8c 01       	movw	r16, r24
   18dd6:	00 97       	sbiw	r24, 0x00	; 0
   18dd8:	19 f0       	breq	.+6      	; 0x18de0 <lif_stralloc+0x32>
   18dda:	be 01       	movw	r22, r28
   18ddc:	0e 94 0f 30 	call	0x601e	; 0x601e <strcpy>
   18de0:	c8 01       	movw	r24, r16
   18de2:	df 91       	pop	r29
   18de4:	cf 91       	pop	r28
   18de6:	1f 91       	pop	r17
   18de8:	0f 91       	pop	r16
   18dea:	08 95       	ret

00018dec <lif_open>:
   18dec:	ef 92       	push	r14
   18dee:	ff 92       	push	r15
   18df0:	0f 93       	push	r16
   18df2:	1f 93       	push	r17
   18df4:	cf 93       	push	r28
   18df6:	df 93       	push	r29
   18df8:	18 2f       	mov	r17, r24
   18dfa:	09 2f       	mov	r16, r25
   18dfc:	f6 2e       	mov	r15, r22
   18dfe:	e7 2e       	mov	r14, r23
   18e00:	0e 94 d2 81 	call	0x103a4	; 0x103a4 <fopen>
   18e04:	ec 01       	movw	r28, r24
   18e06:	89 2b       	or	r24, r25
   18e08:	99 f4       	brne	.+38     	; 0x18e30 <lif_open+0x44>
   18e0a:	ef 92       	push	r14
   18e0c:	ff 92       	push	r15
   18e0e:	0f 93       	push	r16
   18e10:	1f 93       	push	r17
   18e12:	83 e7       	ldi	r24, 0x73	; 115
   18e14:	93 e4       	ldi	r25, 0x43	; 67
   18e16:	1f 92       	push	r1
   18e18:	9f 93       	push	r25
   18e1a:	8f 93       	push	r24
   18e1c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   18e20:	8d b7       	in	r24, 0x3d	; 61
   18e22:	9e b7       	in	r25, 0x3e	; 62
   18e24:	07 96       	adiw	r24, 0x07	; 7
   18e26:	0f b6       	in	r0, 0x3f	; 63
   18e28:	f8 94       	cli
   18e2a:	9e bf       	out	0x3e, r25	; 62
   18e2c:	0f be       	out	0x3f, r0	; 63
   18e2e:	8d bf       	out	0x3d, r24	; 61
   18e30:	ce 01       	movw	r24, r28
   18e32:	cd b7       	in	r28, 0x3d	; 61
   18e34:	de b7       	in	r29, 0x3e	; 62
   18e36:	e6 e0       	ldi	r30, 0x06	; 6
   18e38:	0c 94 e9 e8 	jmp	0x1d1d2	; 0x1d1d2 <__epilogue_restores__+0x18>

00018e3c <lif_stat>:
   18e3c:	0f 93       	push	r16
   18e3e:	1f 93       	push	r17
   18e40:	cf 93       	push	r28
   18e42:	df 93       	push	r29
   18e44:	18 2f       	mov	r17, r24
   18e46:	09 2f       	mov	r16, r25
   18e48:	d6 2f       	mov	r29, r22
   18e4a:	c7 2f       	mov	r28, r23
   18e4c:	0e 94 e6 7c 	call	0xf9cc	; 0xf9cc <stat>
   18e50:	97 ff       	sbrs	r25, 7
   18e52:	11 c0       	rjmp	.+34     	; 0x18e76 <lif_stat+0x3a>
   18e54:	0f 93       	push	r16
   18e56:	1f 93       	push	r17
   18e58:	8a e5       	ldi	r24, 0x5A	; 90
   18e5a:	93 e4       	ldi	r25, 0x43	; 67
   18e5c:	1f 92       	push	r1
   18e5e:	9f 93       	push	r25
   18e60:	8f 93       	push	r24
   18e62:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   18e66:	0f 90       	pop	r0
   18e68:	0f 90       	pop	r0
   18e6a:	0f 90       	pop	r0
   18e6c:	0f 90       	pop	r0
   18e6e:	0f 90       	pop	r0
   18e70:	80 e0       	ldi	r24, 0x00	; 0
   18e72:	90 e0       	ldi	r25, 0x00	; 0
   18e74:	02 c0       	rjmp	.+4      	; 0x18e7a <lif_stat+0x3e>
   18e76:	8d 2f       	mov	r24, r29
   18e78:	9c 2f       	mov	r25, r28
   18e7a:	df 91       	pop	r29
   18e7c:	cf 91       	pop	r28
   18e7e:	1f 91       	pop	r17
   18e80:	0f 91       	pop	r16
   18e82:	08 95       	ret

00018e84 <lif_seek_msg>:
   18e84:	a0 e0       	ldi	r26, 0x00	; 0
   18e86:	b0 e0       	ldi	r27, 0x00	; 0
   18e88:	e8 e4       	ldi	r30, 0x48	; 72
   18e8a:	f7 ec       	ldi	r31, 0xC7	; 199
   18e8c:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__prologue_saves__+0x14>
   18e90:	ec 01       	movw	r28, r24
   18e92:	6a 01       	movw	r12, r20
   18e94:	7b 01       	movw	r14, r22
   18e96:	12 2f       	mov	r17, r18
   18e98:	03 2f       	mov	r16, r19
   18e9a:	0e 94 12 7e 	call	0xfc24	; 0xfc24 <ftell>
   18e9e:	6c 15       	cp	r22, r12
   18ea0:	7d 05       	cpc	r23, r13
   18ea2:	8e 05       	cpc	r24, r14
   18ea4:	9f 05       	cpc	r25, r15
   18ea6:	19 f4       	brne	.+6      	; 0x18eae <lif_seek_msg+0x2a>
   18ea8:	81 e0       	ldi	r24, 0x01	; 1
   18eaa:	90 e0       	ldi	r25, 0x00	; 0
   18eac:	20 c0       	rjmp	.+64     	; 0x18eee <lif_seek_msg+0x6a>
   18eae:	20 e0       	ldi	r18, 0x00	; 0
   18eb0:	30 e0       	ldi	r19, 0x00	; 0
   18eb2:	b7 01       	movw	r22, r14
   18eb4:	a6 01       	movw	r20, r12
   18eb6:	ce 01       	movw	r24, r28
   18eb8:	0e 94 94 7e 	call	0xfd28	; 0xfd28 <fseek>
   18ebc:	97 ff       	sbrs	r25, 7
   18ebe:	f4 cf       	rjmp	.-24     	; 0x18ea8 <lif_seek_msg+0x24>
   18ec0:	ff 92       	push	r15
   18ec2:	ef 92       	push	r14
   18ec4:	df 92       	push	r13
   18ec6:	cf 92       	push	r12
   18ec8:	0f 93       	push	r16
   18eca:	1f 93       	push	r17
   18ecc:	89 e3       	ldi	r24, 0x39	; 57
   18ece:	93 e4       	ldi	r25, 0x43	; 67
   18ed0:	1f 92       	push	r1
   18ed2:	9f 93       	push	r25
   18ed4:	8f 93       	push	r24
   18ed6:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   18eda:	8d b7       	in	r24, 0x3d	; 61
   18edc:	9e b7       	in	r25, 0x3e	; 62
   18ede:	09 96       	adiw	r24, 0x09	; 9
   18ee0:	0f b6       	in	r0, 0x3f	; 63
   18ee2:	f8 94       	cli
   18ee4:	9e bf       	out	0x3e, r25	; 62
   18ee6:	0f be       	out	0x3f, r0	; 63
   18ee8:	8d bf       	out	0x3d, r24	; 61
   18eea:	80 e0       	ldi	r24, 0x00	; 0
   18eec:	90 e0       	ldi	r25, 0x00	; 0
   18eee:	cd b7       	in	r28, 0x3d	; 61
   18ef0:	de b7       	in	r29, 0x3e	; 62
   18ef2:	e8 e0       	ldi	r30, 0x08	; 8
   18ef4:	0c 94 e7 e8 	jmp	0x1d1ce	; 0x1d1ce <__epilogue_restores__+0x14>

00018ef8 <lif_read>:
   18ef8:	a0 e0       	ldi	r26, 0x00	; 0
   18efa:	b0 e0       	ldi	r27, 0x00	; 0
   18efc:	e2 e8       	ldi	r30, 0x82	; 130
   18efe:	f7 ec       	ldi	r31, 0xC7	; 199
   18f00:	0c 94 c7 e8 	jmp	0x1d18e	; 0x1d18e <__prologue_saves__+0xc>
   18f04:	ec 01       	movw	r28, r24
   18f06:	7b 01       	movw	r14, r22
   18f08:	b2 2e       	mov	r11, r18
   18f0a:	a3 2e       	mov	r10, r19
   18f0c:	94 2e       	mov	r9, r20
   18f0e:	85 2e       	mov	r8, r21
   18f10:	28 81       	ld	r18, Y
   18f12:	39 81       	ldd	r19, Y+1	; 0x01
   18f14:	4b 2d       	mov	r20, r11
   18f16:	5a 2d       	mov	r21, r10
   18f18:	69 2d       	mov	r22, r9
   18f1a:	78 2d       	mov	r23, r8
   18f1c:	8a 81       	ldd	r24, Y+2	; 0x02
   18f1e:	9b 81       	ldd	r25, Y+3	; 0x03
   18f20:	b1 df       	rcall	.-158    	; 0x18e84 <lif_seek_msg>
   18f22:	89 2b       	or	r24, r25
   18f24:	b9 f1       	breq	.+110    	; 0x18f94 <lif_read+0x9c>
   18f26:	2a 81       	ldd	r18, Y+2	; 0x02
   18f28:	3b 81       	ldd	r19, Y+3	; 0x03
   18f2a:	a8 01       	movw	r20, r16
   18f2c:	61 e0       	ldi	r22, 0x01	; 1
   18f2e:	70 e0       	ldi	r23, 0x00	; 0
   18f30:	c7 01       	movw	r24, r14
   18f32:	0e 94 28 7f 	call	0xfe50	; 0xfe50 <fread>
   18f36:	6c 01       	movw	r12, r24
   18f38:	e1 2c       	mov	r14, r1
   18f3a:	f1 2c       	mov	r15, r1
   18f3c:	b8 01       	movw	r22, r16
   18f3e:	01 2e       	mov	r0, r17
   18f40:	00 0c       	add	r0, r0
   18f42:	88 0b       	sbc	r24, r24
   18f44:	99 0b       	sbc	r25, r25
   18f46:	c6 16       	cp	r12, r22
   18f48:	d7 06       	cpc	r13, r23
   18f4a:	e8 06       	cpc	r14, r24
   18f4c:	f9 06       	cpc	r15, r25
   18f4e:	41 f1       	breq	.+80     	; 0x18fa0 <lif_read+0xa8>
   18f50:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   18f54:	80 ff       	sbrs	r24, 0
   18f56:	22 c0       	rjmp	.+68     	; 0x18f9c <lif_read+0xa4>
   18f58:	1f 93       	push	r17
   18f5a:	0f 93       	push	r16
   18f5c:	1f 92       	push	r1
   18f5e:	1f 92       	push	r1
   18f60:	df 92       	push	r13
   18f62:	cf 92       	push	r12
   18f64:	8f 92       	push	r8
   18f66:	9f 92       	push	r9
   18f68:	af 92       	push	r10
   18f6a:	bf 92       	push	r11
   18f6c:	89 81       	ldd	r24, Y+1	; 0x01
   18f6e:	8f 93       	push	r24
   18f70:	88 81       	ld	r24, Y
   18f72:	8f 93       	push	r24
   18f74:	8d ef       	ldi	r24, 0xFD	; 253
   18f76:	92 e4       	ldi	r25, 0x42	; 66
   18f78:	1f 92       	push	r1
   18f7a:	9f 93       	push	r25
   18f7c:	8f 93       	push	r24
   18f7e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   18f82:	8d b7       	in	r24, 0x3d	; 61
   18f84:	9e b7       	in	r25, 0x3e	; 62
   18f86:	0f 96       	adiw	r24, 0x0f	; 15
   18f88:	0f b6       	in	r0, 0x3f	; 63
   18f8a:	f8 94       	cli
   18f8c:	9e bf       	out	0x3e, r25	; 62
   18f8e:	0f be       	out	0x3f, r0	; 63
   18f90:	8d bf       	out	0x3d, r24	; 61
   18f92:	04 c0       	rjmp	.+8      	; 0x18f9c <lif_read+0xa4>
   18f94:	60 e0       	ldi	r22, 0x00	; 0
   18f96:	70 e0       	ldi	r23, 0x00	; 0
   18f98:	cb 01       	movw	r24, r22
   18f9a:	02 c0       	rjmp	.+4      	; 0x18fa0 <lif_read+0xa8>
   18f9c:	c7 01       	movw	r24, r14
   18f9e:	b6 01       	movw	r22, r12
   18fa0:	cd b7       	in	r28, 0x3d	; 61
   18fa2:	de b7       	in	r29, 0x3e	; 62
   18fa4:	ec e0       	ldi	r30, 0x0C	; 12
   18fa6:	0c 94 e3 e8 	jmp	0x1d1c6	; 0x1d1c6 <__epilogue_restores__+0xc>

00018faa <lif_write>:
   18faa:	a0 e0       	ldi	r26, 0x00	; 0
   18fac:	b0 e0       	ldi	r27, 0x00	; 0
   18fae:	eb ed       	ldi	r30, 0xDB	; 219
   18fb0:	f7 ec       	ldi	r31, 0xC7	; 199
   18fb2:	0c 94 c9 e8 	jmp	0x1d192	; 0x1d192 <__prologue_saves__+0x10>
   18fb6:	7c 01       	movw	r14, r24
   18fb8:	eb 01       	movw	r28, r22
   18fba:	d2 2e       	mov	r13, r18
   18fbc:	c3 2e       	mov	r12, r19
   18fbe:	b4 2e       	mov	r11, r20
   18fc0:	a5 2e       	mov	r10, r21
   18fc2:	fc 01       	movw	r30, r24
   18fc4:	20 81       	ld	r18, Z
   18fc6:	31 81       	ldd	r19, Z+1	; 0x01
   18fc8:	4d 2d       	mov	r20, r13
   18fca:	5c 2d       	mov	r21, r12
   18fcc:	6b 2d       	mov	r22, r11
   18fce:	7a 2d       	mov	r23, r10
   18fd0:	82 81       	ldd	r24, Z+2	; 0x02
   18fd2:	93 81       	ldd	r25, Z+3	; 0x03
   18fd4:	57 df       	rcall	.-338    	; 0x18e84 <lif_seek_msg>
   18fd6:	00 97       	sbiw	r24, 0x00	; 0
   18fd8:	89 f1       	breq	.+98     	; 0x1903c <lif_write+0x92>
   18fda:	f7 01       	movw	r30, r14
   18fdc:	22 81       	ldd	r18, Z+2	; 0x02
   18fde:	33 81       	ldd	r19, Z+3	; 0x03
   18fe0:	a8 01       	movw	r20, r16
   18fe2:	61 e0       	ldi	r22, 0x01	; 1
   18fe4:	70 e0       	ldi	r23, 0x00	; 0
   18fe6:	ce 01       	movw	r24, r28
   18fe8:	0e 94 fa 7f 	call	0xfff4	; 0xfff4 <fwrite>
   18fec:	ec 01       	movw	r28, r24
   18fee:	08 17       	cp	r16, r24
   18ff0:	19 07       	cpc	r17, r25
   18ff2:	09 f1       	breq	.+66     	; 0x19036 <lif_write+0x8c>
   18ff4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   18ff8:	80 ff       	sbrs	r24, 0
   18ffa:	1f c0       	rjmp	.+62     	; 0x1903a <lif_write+0x90>
   18ffc:	1f 93       	push	r17
   18ffe:	0f 93       	push	r16
   19000:	df 93       	push	r29
   19002:	cf 93       	push	r28
   19004:	af 92       	push	r10
   19006:	bf 92       	push	r11
   19008:	cf 92       	push	r12
   1900a:	df 92       	push	r13
   1900c:	f7 01       	movw	r30, r14
   1900e:	81 81       	ldd	r24, Z+1	; 0x01
   19010:	8f 93       	push	r24
   19012:	80 81       	ld	r24, Z
   19014:	8f 93       	push	r24
   19016:	80 ec       	ldi	r24, 0xC0	; 192
   19018:	92 e4       	ldi	r25, 0x42	; 66
   1901a:	1f 92       	push	r1
   1901c:	9f 93       	push	r25
   1901e:	8f 93       	push	r24
   19020:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19024:	8d b7       	in	r24, 0x3d	; 61
   19026:	9e b7       	in	r25, 0x3e	; 62
   19028:	0d 96       	adiw	r24, 0x0d	; 13
   1902a:	0f b6       	in	r0, 0x3f	; 63
   1902c:	f8 94       	cli
   1902e:	9e bf       	out	0x3e, r25	; 62
   19030:	0f be       	out	0x3f, r0	; 63
   19032:	8d bf       	out	0x3d, r24	; 61
   19034:	02 c0       	rjmp	.+4      	; 0x1903a <lif_write+0x90>
   19036:	c8 01       	movw	r24, r16
   19038:	01 c0       	rjmp	.+2      	; 0x1903c <lif_write+0x92>
   1903a:	ce 01       	movw	r24, r28
   1903c:	cd b7       	in	r28, 0x3d	; 61
   1903e:	de b7       	in	r29, 0x3e	; 62
   19040:	ea e0       	ldi	r30, 0x0A	; 10
   19042:	0c 94 e5 e8 	jmp	0x1d1ca	; 0x1d1ca <__epilogue_restores__+0x10>

00019046 <lif_chars>:
   19046:	80 32       	cpi	r24, 0x20	; 32
   19048:	91 05       	cpc	r25, r1
   1904a:	e1 f0       	breq	.+56     	; 0x19084 <lif_chars+0x3e>
   1904c:	9c 01       	movw	r18, r24
   1904e:	21 56       	subi	r18, 0x61	; 97
   19050:	31 09       	sbc	r19, r1
   19052:	2a 31       	cpi	r18, 0x1A	; 26
   19054:	31 05       	cpc	r19, r1
   19056:	10 f4       	brcc	.+4      	; 0x1905c <lif_chars+0x16>
   19058:	80 97       	sbiw	r24, 0x20	; 32
   1905a:	08 95       	ret
   1905c:	9c 01       	movw	r18, r24
   1905e:	21 54       	subi	r18, 0x41	; 65
   19060:	31 09       	sbc	r19, r1
   19062:	2a 31       	cpi	r18, 0x1A	; 26
   19064:	31 05       	cpc	r19, r1
   19066:	c8 f0       	brcs	.+50     	; 0x1909a <lif_chars+0x54>
   19068:	16 16       	cp	r1, r22
   1906a:	17 06       	cpc	r1, r23
   1906c:	74 f4       	brge	.+28     	; 0x1908a <lif_chars+0x44>
   1906e:	2f 5e       	subi	r18, 0xEF	; 239
   19070:	3f 4f       	sbci	r19, 0xFF	; 255
   19072:	2a 30       	cpi	r18, 0x0A	; 10
   19074:	31 05       	cpc	r19, r1
   19076:	88 f0       	brcs	.+34     	; 0x1909a <lif_chars+0x54>
   19078:	8f 35       	cpi	r24, 0x5F	; 95
   1907a:	91 05       	cpc	r25, r1
   1907c:	49 f0       	breq	.+18     	; 0x19090 <lif_chars+0x4a>
   1907e:	8d 97       	sbiw	r24, 0x2d	; 45
   19080:	21 f4       	brne	.+8      	; 0x1908a <lif_chars+0x44>
   19082:	09 c0       	rjmp	.+18     	; 0x19096 <lif_chars+0x50>
   19084:	80 e2       	ldi	r24, 0x20	; 32
   19086:	90 e0       	ldi	r25, 0x00	; 0
   19088:	08 95       	ret
   1908a:	80 e0       	ldi	r24, 0x00	; 0
   1908c:	90 e0       	ldi	r25, 0x00	; 0
   1908e:	08 95       	ret
   19090:	8f e5       	ldi	r24, 0x5F	; 95
   19092:	90 e0       	ldi	r25, 0x00	; 0
   19094:	08 95       	ret
   19096:	8d e2       	ldi	r24, 0x2D	; 45
   19098:	90 e0       	ldi	r25, 0x00	; 0
   1909a:	08 95       	ret

0001909c <lif_B2S>:
   1909c:	a0 e0       	ldi	r26, 0x00	; 0
   1909e:	b0 e0       	ldi	r27, 0x00	; 0
   190a0:	e4 e5       	ldi	r30, 0x54	; 84
   190a2:	f8 ec       	ldi	r31, 0xC8	; 200
   190a4:	0c 94 c7 e8 	jmp	0x1d18e	; 0x1d18e <__prologue_saves__+0xc>
   190a8:	5c 01       	movw	r10, r24
   190aa:	6b 01       	movw	r12, r22
   190ac:	ea 01       	movw	r28, r20
   190ae:	4c 01       	movw	r8, r24
   190b0:	ee 24       	eor	r14, r14
   190b2:	e3 94       	inc	r14
   190b4:	f1 2c       	mov	r15, r1
   190b6:	00 e0       	ldi	r16, 0x00	; 0
   190b8:	10 e0       	ldi	r17, 0x00	; 0
   190ba:	0c 17       	cp	r16, r28
   190bc:	1d 07       	cpc	r17, r29
   190be:	6c f4       	brge	.+26     	; 0x190da <lif_B2S+0x3e>
   190c0:	f4 01       	movw	r30, r8
   190c2:	81 91       	ld	r24, Z+
   190c4:	4f 01       	movw	r8, r30
   190c6:	b8 01       	movw	r22, r16
   190c8:	90 e0       	ldi	r25, 0x00	; 0
   190ca:	bd df       	rcall	.-134    	; 0x19046 <lif_chars>
   190cc:	89 2b       	or	r24, r25
   190ce:	11 f4       	brne	.+4      	; 0x190d4 <lif_B2S+0x38>
   190d0:	e1 2c       	mov	r14, r1
   190d2:	f1 2c       	mov	r15, r1
   190d4:	0f 5f       	subi	r16, 0xFF	; 255
   190d6:	1f 4f       	sbci	r17, 0xFF	; 255
   190d8:	f0 cf       	rjmp	.-32     	; 0x190ba <lif_B2S+0x1e>
   190da:	d6 01       	movw	r26, r12
   190dc:	f5 01       	movw	r30, r10
   190de:	cf 01       	movw	r24, r30
   190e0:	8a 19       	sub	r24, r10
   190e2:	9b 09       	sbc	r25, r11
   190e4:	8c 17       	cp	r24, r28
   190e6:	9d 07       	cpc	r25, r29
   190e8:	1c f4       	brge	.+6      	; 0x190f0 <lif_B2S+0x54>
   190ea:	81 91       	ld	r24, Z+
   190ec:	8d 93       	st	X+, r24
   190ee:	f7 cf       	rjmp	.-18     	; 0x190de <lif_B2S+0x42>
   190f0:	d7 ff       	sbrs	r29, 7
   190f2:	02 c0       	rjmp	.+4      	; 0x190f8 <lif_B2S+0x5c>
   190f4:	c0 e0       	ldi	r28, 0x00	; 0
   190f6:	d0 e0       	ldi	r29, 0x00	; 0
   190f8:	cc 0d       	add	r28, r12
   190fa:	dd 1d       	adc	r29, r13
   190fc:	18 82       	st	Y, r1
   190fe:	c6 01       	movw	r24, r12
   19100:	0e 94 69 30 	call	0x60d2	; 0x60d2 <trim_tail>
   19104:	c7 01       	movw	r24, r14
   19106:	cd b7       	in	r28, 0x3d	; 61
   19108:	de b7       	in	r29, 0x3e	; 62
   1910a:	ec e0       	ldi	r30, 0x0C	; 12
   1910c:	0c 94 e3 e8 	jmp	0x1d1c6	; 0x1d1c6 <__epilogue_restores__+0xc>

00019110 <lif_checkname>:
   19110:	ef 92       	push	r14
   19112:	ff 92       	push	r15
   19114:	0f 93       	push	r16
   19116:	1f 93       	push	r17
   19118:	cf 93       	push	r28
   1911a:	df 93       	push	r29
   1911c:	7c 01       	movw	r14, r24
   1911e:	ec 01       	movw	r28, r24
   19120:	01 e0       	ldi	r16, 0x01	; 1
   19122:	10 e0       	ldi	r17, 0x00	; 0
   19124:	be 01       	movw	r22, r28
   19126:	6e 19       	sub	r22, r14
   19128:	7f 09       	sbc	r23, r15
   1912a:	89 91       	ld	r24, Y+
   1912c:	88 23       	and	r24, r24
   1912e:	39 f0       	breq	.+14     	; 0x1913e <lif_checkname+0x2e>
   19130:	90 e0       	ldi	r25, 0x00	; 0
   19132:	89 df       	rcall	.-238    	; 0x19046 <lif_chars>
   19134:	89 2b       	or	r24, r25
   19136:	b1 f7       	brne	.-20     	; 0x19124 <lif_checkname+0x14>
   19138:	00 e0       	ldi	r16, 0x00	; 0
   1913a:	10 e0       	ldi	r17, 0x00	; 0
   1913c:	f3 cf       	rjmp	.-26     	; 0x19124 <lif_checkname+0x14>
   1913e:	c8 01       	movw	r24, r16
   19140:	cd b7       	in	r28, 0x3d	; 61
   19142:	de b7       	in	r29, 0x3e	; 62
   19144:	e6 e0       	ldi	r30, 0x06	; 6
   19146:	0c 94 e9 e8 	jmp	0x1d1d2	; 0x1d1d2 <__epilogue_restores__+0x18>

0001914a <lif_S2B>:
   1914a:	fb 01       	movw	r30, r22
   1914c:	dc 01       	movw	r26, r24
   1914e:	20 e0       	ldi	r18, 0x00	; 0
   19150:	30 e0       	ldi	r19, 0x00	; 0
   19152:	61 91       	ld	r22, Z+
   19154:	61 11       	cpse	r22, r1
   19156:	05 c0       	rjmp	.+10     	; 0x19162 <lif_S2B+0x18>
   19158:	fc 01       	movw	r30, r24
   1915a:	e2 0f       	add	r30, r18
   1915c:	f3 1f       	adc	r31, r19
   1915e:	60 e2       	ldi	r22, 0x20	; 32
   19160:	08 c0       	rjmp	.+16     	; 0x19172 <lif_S2B+0x28>
   19162:	24 17       	cp	r18, r20
   19164:	35 07       	cpc	r19, r21
   19166:	24 f4       	brge	.+8      	; 0x19170 <lif_S2B+0x26>
   19168:	6d 93       	st	X+, r22
   1916a:	2f 5f       	subi	r18, 0xFF	; 255
   1916c:	3f 4f       	sbci	r19, 0xFF	; 255
   1916e:	f1 cf       	rjmp	.-30     	; 0x19152 <lif_S2B+0x8>
   19170:	08 95       	ret
   19172:	9f 01       	movw	r18, r30
   19174:	28 1b       	sub	r18, r24
   19176:	39 0b       	sbc	r19, r25
   19178:	24 17       	cp	r18, r20
   1917a:	35 07       	cpc	r19, r21
   1917c:	14 f4       	brge	.+4      	; 0x19182 <lif_S2B+0x38>
   1917e:	61 93       	st	Z+, r22
   19180:	f8 cf       	rjmp	.-16     	; 0x19172 <lif_S2B+0x28>
   19182:	08 95       	ret

00019184 <lif_fixname>:
   19184:	a0 e0       	ldi	r26, 0x00	; 0
   19186:	b0 e0       	ldi	r27, 0x00	; 0
   19188:	e8 ec       	ldi	r30, 0xC8	; 200
   1918a:	f8 ec       	ldi	r31, 0xC8	; 200
   1918c:	0c 94 ca e8 	jmp	0x1d194	; 0x1d194 <__prologue_saves__+0x12>
   19190:	8c 01       	movw	r16, r24
   19192:	cb 01       	movw	r24, r22
   19194:	7a 01       	movw	r14, r20
   19196:	0e 94 48 7a 	call	0xf490	; 0xf490 <basename>
   1919a:	6c 01       	movw	r12, r24
   1919c:	e8 01       	movw	r28, r16
   1919e:	80 e2       	ldi	r24, 0x20	; 32
   191a0:	b8 2e       	mov	r11, r24
   191a2:	be 01       	movw	r22, r28
   191a4:	60 1b       	sub	r22, r16
   191a6:	71 0b       	sbc	r23, r17
   191a8:	f6 01       	movw	r30, r12
   191aa:	81 91       	ld	r24, Z+
   191ac:	6f 01       	movw	r12, r30
   191ae:	81 11       	cpse	r24, r1
   191b0:	02 c0       	rjmp	.+4      	; 0x191b6 <lif_fixname+0x32>
   191b2:	20 e2       	ldi	r18, 0x20	; 32
   191b4:	0e c0       	rjmp	.+28     	; 0x191d2 <lif_fixname+0x4e>
   191b6:	1e 14       	cp	r1, r14
   191b8:	1f 04       	cpc	r1, r15
   191ba:	dc f7       	brge	.-10     	; 0x191b2 <lif_fixname+0x2e>
   191bc:	8e 32       	cpi	r24, 0x2E	; 46
   191be:	c9 f3       	breq	.-14     	; 0x191b2 <lif_fixname+0x2e>
   191c0:	90 e0       	ldi	r25, 0x00	; 0
   191c2:	41 df       	rcall	.-382    	; 0x19046 <lif_chars>
   191c4:	88 23       	and	r24, r24
   191c6:	11 f0       	breq	.+4      	; 0x191cc <lif_fixname+0x48>
   191c8:	88 83       	st	Y, r24
   191ca:	01 c0       	rjmp	.+2      	; 0x191ce <lif_fixname+0x4a>
   191cc:	b8 82       	st	Y, r11
   191ce:	21 96       	adiw	r28, 0x01	; 1
   191d0:	e8 cf       	rjmp	.-48     	; 0x191a2 <lif_fixname+0x1e>
   191d2:	ce 01       	movw	r24, r28
   191d4:	80 1b       	sub	r24, r16
   191d6:	91 0b       	sbc	r25, r17
   191d8:	8e 15       	cp	r24, r14
   191da:	9f 05       	cpc	r25, r15
   191dc:	14 f4       	brge	.+4      	; 0x191e2 <lif_fixname+0x5e>
   191de:	29 93       	st	Y+, r18
   191e0:	f8 cf       	rjmp	.-16     	; 0x191d2 <lif_fixname+0x4e>
   191e2:	18 82       	st	Y, r1
   191e4:	f8 01       	movw	r30, r16
   191e6:	01 90       	ld	r0, Z+
   191e8:	00 20       	and	r0, r0
   191ea:	e9 f7       	brne	.-6      	; 0x191e6 <lif_fixname+0x62>
   191ec:	cf 01       	movw	r24, r30
   191ee:	01 97       	sbiw	r24, 0x01	; 1
   191f0:	80 1b       	sub	r24, r16
   191f2:	91 0b       	sbc	r25, r17
   191f4:	cd b7       	in	r28, 0x3d	; 61
   191f6:	de b7       	in	r29, 0x3e	; 62
   191f8:	e9 e0       	ldi	r30, 0x09	; 9
   191fa:	0c 94 e6 e8 	jmp	0x1d1cc	; 0x1d1cc <__epilogue_restores__+0x12>

000191fe <lif_vol2str>:
   191fe:	ef 92       	push	r14
   19200:	ff 92       	push	r15
   19202:	0f 93       	push	r16
   19204:	1f 93       	push	r17
   19206:	cf 93       	push	r28
   19208:	df 93       	push	r29
   1920a:	7c 01       	movw	r14, r24
   1920c:	eb 01       	movw	r28, r22
   1920e:	fc 01       	movw	r30, r24
   19210:	04 a1       	ldd	r16, Z+36	; 0x24
   19212:	15 a1       	ldd	r17, Z+37	; 0x25
   19214:	20 e0       	ldi	r18, 0x00	; 0
   19216:	30 e0       	ldi	r19, 0x00	; 0
   19218:	42 e0       	ldi	r20, 0x02	; 2
   1921a:	50 e0       	ldi	r21, 0x00	; 0
   1921c:	60 e0       	ldi	r22, 0x00	; 0
   1921e:	70 e0       	ldi	r23, 0x00	; 0
   19220:	ce 01       	movw	r24, r28
   19222:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   19226:	b7 01       	movw	r22, r14
   19228:	6a 5d       	subi	r22, 0xDA	; 218
   1922a:	7f 4f       	sbci	r23, 0xFF	; 255
   1922c:	46 e0       	ldi	r20, 0x06	; 6
   1922e:	50 e0       	ldi	r21, 0x00	; 0
   19230:	ce 01       	movw	r24, r28
   19232:	02 96       	adiw	r24, 0x02	; 2
   19234:	8a df       	rcall	.-236    	; 0x1914a <lif_S2B>
   19236:	f7 01       	movw	r30, r14
   19238:	05 a5       	ldd	r16, Z+45	; 0x2d
   1923a:	16 a5       	ldd	r17, Z+46	; 0x2e
   1923c:	27 a5       	ldd	r18, Z+47	; 0x2f
   1923e:	30 a9       	ldd	r19, Z+48	; 0x30
   19240:	44 e0       	ldi	r20, 0x04	; 4
   19242:	50 e0       	ldi	r21, 0x00	; 0
   19244:	68 e0       	ldi	r22, 0x08	; 8
   19246:	70 e0       	ldi	r23, 0x00	; 0
   19248:	ce 01       	movw	r24, r28
   1924a:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   1924e:	f7 01       	movw	r30, r14
   19250:	01 a9       	ldd	r16, Z+49	; 0x31
   19252:	12 a9       	ldd	r17, Z+50	; 0x32
   19254:	20 e0       	ldi	r18, 0x00	; 0
   19256:	30 e0       	ldi	r19, 0x00	; 0
   19258:	42 e0       	ldi	r20, 0x02	; 2
   1925a:	50 e0       	ldi	r21, 0x00	; 0
   1925c:	6c e0       	ldi	r22, 0x0C	; 12
   1925e:	70 e0       	ldi	r23, 0x00	; 0
   19260:	ce 01       	movw	r24, r28
   19262:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   19266:	00 e0       	ldi	r16, 0x00	; 0
   19268:	10 e0       	ldi	r17, 0x00	; 0
   1926a:	98 01       	movw	r18, r16
   1926c:	42 e0       	ldi	r20, 0x02	; 2
   1926e:	50 e0       	ldi	r21, 0x00	; 0
   19270:	6e e0       	ldi	r22, 0x0E	; 14
   19272:	70 e0       	ldi	r23, 0x00	; 0
   19274:	ce 01       	movw	r24, r28
   19276:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   1927a:	f7 01       	movw	r30, r14
   1927c:	05 a9       	ldd	r16, Z+53	; 0x35
   1927e:	16 a9       	ldd	r17, Z+54	; 0x36
   19280:	27 a9       	ldd	r18, Z+55	; 0x37
   19282:	30 ad       	ldd	r19, Z+56	; 0x38
   19284:	44 e0       	ldi	r20, 0x04	; 4
   19286:	50 e0       	ldi	r21, 0x00	; 0
   19288:	60 e1       	ldi	r22, 0x10	; 16
   1928a:	70 e0       	ldi	r23, 0x00	; 0
   1928c:	ce 01       	movw	r24, r28
   1928e:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   19292:	f7 01       	movw	r30, r14
   19294:	01 ad       	ldd	r16, Z+57	; 0x39
   19296:	12 ad       	ldd	r17, Z+58	; 0x3a
   19298:	20 e0       	ldi	r18, 0x00	; 0
   1929a:	30 e0       	ldi	r19, 0x00	; 0
   1929c:	42 e0       	ldi	r20, 0x02	; 2
   1929e:	50 e0       	ldi	r21, 0x00	; 0
   192a0:	64 e1       	ldi	r22, 0x14	; 20
   192a2:	70 e0       	ldi	r23, 0x00	; 0
   192a4:	ce 01       	movw	r24, r28
   192a6:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   192aa:	00 e0       	ldi	r16, 0x00	; 0
   192ac:	10 e0       	ldi	r17, 0x00	; 0
   192ae:	98 01       	movw	r18, r16
   192b0:	42 e0       	ldi	r20, 0x02	; 2
   192b2:	50 e0       	ldi	r21, 0x00	; 0
   192b4:	66 e1       	ldi	r22, 0x16	; 22
   192b6:	70 e0       	ldi	r23, 0x00	; 0
   192b8:	ce 01       	movw	r24, r28
   192ba:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   192be:	f7 01       	movw	r30, r14
   192c0:	fd 96       	adiw	r30, 0x3d	; 61
   192c2:	00 81       	ld	r16, Z
   192c4:	11 81       	ldd	r17, Z+1	; 0x01
   192c6:	22 81       	ldd	r18, Z+2	; 0x02
   192c8:	33 81       	ldd	r19, Z+3	; 0x03
   192ca:	44 e0       	ldi	r20, 0x04	; 4
   192cc:	50 e0       	ldi	r21, 0x00	; 0
   192ce:	68 e1       	ldi	r22, 0x18	; 24
   192d0:	70 e0       	ldi	r23, 0x00	; 0
   192d2:	ce 01       	movw	r24, r28
   192d4:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   192d8:	f7 01       	movw	r30, r14
   192da:	ef 5b       	subi	r30, 0xBF	; 191
   192dc:	ff 4f       	sbci	r31, 0xFF	; 255
   192de:	00 81       	ld	r16, Z
   192e0:	11 81       	ldd	r17, Z+1	; 0x01
   192e2:	22 81       	ldd	r18, Z+2	; 0x02
   192e4:	33 81       	ldd	r19, Z+3	; 0x03
   192e6:	44 e0       	ldi	r20, 0x04	; 4
   192e8:	50 e0       	ldi	r21, 0x00	; 0
   192ea:	6c e1       	ldi	r22, 0x1C	; 28
   192ec:	70 e0       	ldi	r23, 0x00	; 0
   192ee:	ce 01       	movw	r24, r28
   192f0:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   192f4:	f7 01       	movw	r30, r14
   192f6:	eb 5b       	subi	r30, 0xBB	; 187
   192f8:	ff 4f       	sbci	r31, 0xFF	; 255
   192fa:	00 81       	ld	r16, Z
   192fc:	11 81       	ldd	r17, Z+1	; 0x01
   192fe:	22 81       	ldd	r18, Z+2	; 0x02
   19300:	33 81       	ldd	r19, Z+3	; 0x03
   19302:	44 e0       	ldi	r20, 0x04	; 4
   19304:	50 e0       	ldi	r21, 0x00	; 0
   19306:	60 e2       	ldi	r22, 0x20	; 32
   19308:	70 e0       	ldi	r23, 0x00	; 0
   1930a:	ce 01       	movw	r24, r28
   1930c:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   19310:	de 01       	movw	r26, r28
   19312:	94 96       	adiw	r26, 0x24	; 36
   19314:	f7 01       	movw	r30, r14
   19316:	e7 5b       	subi	r30, 0xB7	; 183
   19318:	ff 4f       	sbci	r31, 0xFF	; 255
   1931a:	86 e0       	ldi	r24, 0x06	; 6
   1931c:	01 90       	ld	r0, Z+
   1931e:	0d 92       	st	X+, r0
   19320:	8a 95       	dec	r24
   19322:	e1 f7       	brne	.-8      	; 0x1931c <lif_vol2str+0x11e>
   19324:	cd b7       	in	r28, 0x3d	; 61
   19326:	de b7       	in	r29, 0x3e	; 62
   19328:	e6 e0       	ldi	r30, 0x06	; 6
   1932a:	0c 94 e9 e8 	jmp	0x1d1d2	; 0x1d1d2 <__epilogue_restores__+0x18>

0001932e <lif_str2vol>:
   1932e:	0f 93       	push	r16
   19330:	1f 93       	push	r17
   19332:	cf 93       	push	r28
   19334:	df 93       	push	r29
   19336:	8c 01       	movw	r16, r24
   19338:	eb 01       	movw	r28, r22
   1933a:	42 e0       	ldi	r20, 0x02	; 2
   1933c:	50 e0       	ldi	r21, 0x00	; 0
   1933e:	60 e0       	ldi	r22, 0x00	; 0
   19340:	70 e0       	ldi	r23, 0x00	; 0
   19342:	0e 94 02 b5 	call	0x16a04	; 0x16a04 <B2V_MSB>
   19346:	7d a3       	std	Y+37, r23	; 0x25
   19348:	6c a3       	std	Y+36, r22	; 0x24
   1934a:	be 01       	movw	r22, r28
   1934c:	6a 5d       	subi	r22, 0xDA	; 218
   1934e:	7f 4f       	sbci	r23, 0xFF	; 255
   19350:	46 e0       	ldi	r20, 0x06	; 6
   19352:	50 e0       	ldi	r21, 0x00	; 0
   19354:	c8 01       	movw	r24, r16
   19356:	02 96       	adiw	r24, 0x02	; 2
   19358:	a1 de       	rcall	.-702    	; 0x1909c <lif_B2S>
   1935a:	44 e0       	ldi	r20, 0x04	; 4
   1935c:	50 e0       	ldi	r21, 0x00	; 0
   1935e:	68 e0       	ldi	r22, 0x08	; 8
   19360:	70 e0       	ldi	r23, 0x00	; 0
   19362:	c8 01       	movw	r24, r16
   19364:	0e 94 02 b5 	call	0x16a04	; 0x16a04 <B2V_MSB>
   19368:	6d a7       	std	Y+45, r22	; 0x2d
   1936a:	7e a7       	std	Y+46, r23	; 0x2e
   1936c:	8f a7       	std	Y+47, r24	; 0x2f
   1936e:	98 ab       	std	Y+48, r25	; 0x30
   19370:	42 e0       	ldi	r20, 0x02	; 2
   19372:	50 e0       	ldi	r21, 0x00	; 0
   19374:	6c e0       	ldi	r22, 0x0C	; 12
   19376:	70 e0       	ldi	r23, 0x00	; 0
   19378:	c8 01       	movw	r24, r16
   1937a:	0e 94 02 b5 	call	0x16a04	; 0x16a04 <B2V_MSB>
   1937e:	7a ab       	std	Y+50, r23	; 0x32
   19380:	69 ab       	std	Y+49, r22	; 0x31
   19382:	42 e0       	ldi	r20, 0x02	; 2
   19384:	50 e0       	ldi	r21, 0x00	; 0
   19386:	6e e0       	ldi	r22, 0x0E	; 14
   19388:	70 e0       	ldi	r23, 0x00	; 0
   1938a:	c8 01       	movw	r24, r16
   1938c:	0e 94 02 b5 	call	0x16a04	; 0x16a04 <B2V_MSB>
   19390:	7c ab       	std	Y+52, r23	; 0x34
   19392:	6b ab       	std	Y+51, r22	; 0x33
   19394:	44 e0       	ldi	r20, 0x04	; 4
   19396:	50 e0       	ldi	r21, 0x00	; 0
   19398:	60 e1       	ldi	r22, 0x10	; 16
   1939a:	70 e0       	ldi	r23, 0x00	; 0
   1939c:	c8 01       	movw	r24, r16
   1939e:	0e 94 02 b5 	call	0x16a04	; 0x16a04 <B2V_MSB>
   193a2:	6d ab       	std	Y+53, r22	; 0x35
   193a4:	7e ab       	std	Y+54, r23	; 0x36
   193a6:	8f ab       	std	Y+55, r24	; 0x37
   193a8:	98 af       	std	Y+56, r25	; 0x38
   193aa:	42 e0       	ldi	r20, 0x02	; 2
   193ac:	50 e0       	ldi	r21, 0x00	; 0
   193ae:	64 e1       	ldi	r22, 0x14	; 20
   193b0:	70 e0       	ldi	r23, 0x00	; 0
   193b2:	c8 01       	movw	r24, r16
   193b4:	0e 94 02 b5 	call	0x16a04	; 0x16a04 <B2V_MSB>
   193b8:	7a af       	std	Y+58, r23	; 0x3a
   193ba:	69 af       	std	Y+57, r22	; 0x39
   193bc:	42 e0       	ldi	r20, 0x02	; 2
   193be:	50 e0       	ldi	r21, 0x00	; 0
   193c0:	66 e1       	ldi	r22, 0x16	; 22
   193c2:	70 e0       	ldi	r23, 0x00	; 0
   193c4:	c8 01       	movw	r24, r16
   193c6:	0e 94 02 b5 	call	0x16a04	; 0x16a04 <B2V_MSB>
   193ca:	7c af       	std	Y+60, r23	; 0x3c
   193cc:	6b af       	std	Y+59, r22	; 0x3b
   193ce:	44 e0       	ldi	r20, 0x04	; 4
   193d0:	50 e0       	ldi	r21, 0x00	; 0
   193d2:	68 e1       	ldi	r22, 0x18	; 24
   193d4:	70 e0       	ldi	r23, 0x00	; 0
   193d6:	c8 01       	movw	r24, r16
   193d8:	0e 94 02 b5 	call	0x16a04	; 0x16a04 <B2V_MSB>
   193dc:	fe 01       	movw	r30, r28
   193de:	fd 96       	adiw	r30, 0x3d	; 61
   193e0:	60 83       	st	Z, r22
   193e2:	71 83       	std	Z+1, r23	; 0x01
   193e4:	82 83       	std	Z+2, r24	; 0x02
   193e6:	93 83       	std	Z+3, r25	; 0x03
   193e8:	44 e0       	ldi	r20, 0x04	; 4
   193ea:	50 e0       	ldi	r21, 0x00	; 0
   193ec:	6c e1       	ldi	r22, 0x1C	; 28
   193ee:	70 e0       	ldi	r23, 0x00	; 0
   193f0:	c8 01       	movw	r24, r16
   193f2:	0e 94 02 b5 	call	0x16a04	; 0x16a04 <B2V_MSB>
   193f6:	fe 01       	movw	r30, r28
   193f8:	ef 5b       	subi	r30, 0xBF	; 191
   193fa:	ff 4f       	sbci	r31, 0xFF	; 255
   193fc:	60 83       	st	Z, r22
   193fe:	71 83       	std	Z+1, r23	; 0x01
   19400:	82 83       	std	Z+2, r24	; 0x02
   19402:	93 83       	std	Z+3, r25	; 0x03
   19404:	44 e0       	ldi	r20, 0x04	; 4
   19406:	50 e0       	ldi	r21, 0x00	; 0
   19408:	60 e2       	ldi	r22, 0x20	; 32
   1940a:	70 e0       	ldi	r23, 0x00	; 0
   1940c:	c8 01       	movw	r24, r16
   1940e:	0e 94 02 b5 	call	0x16a04	; 0x16a04 <B2V_MSB>
   19412:	fe 01       	movw	r30, r28
   19414:	eb 5b       	subi	r30, 0xBB	; 187
   19416:	ff 4f       	sbci	r31, 0xFF	; 255
   19418:	60 83       	st	Z, r22
   1941a:	71 83       	std	Z+1, r23	; 0x01
   1941c:	82 83       	std	Z+2, r24	; 0x02
   1941e:	93 83       	std	Z+3, r25	; 0x03
   19420:	de 01       	movw	r26, r28
   19422:	a7 5b       	subi	r26, 0xB7	; 183
   19424:	bf 4f       	sbci	r27, 0xFF	; 255
   19426:	f8 01       	movw	r30, r16
   19428:	b4 96       	adiw	r30, 0x24	; 36
   1942a:	86 e0       	ldi	r24, 0x06	; 6
   1942c:	01 90       	ld	r0, Z+
   1942e:	0d 92       	st	X+, r0
   19430:	8a 95       	dec	r24
   19432:	e1 f7       	brne	.-8      	; 0x1942c <lif_str2vol+0xfe>
   19434:	df 91       	pop	r29
   19436:	cf 91       	pop	r28
   19438:	1f 91       	pop	r17
   1943a:	0f 91       	pop	r16
   1943c:	08 95       	ret

0001943e <lif_dir2str>:
   1943e:	ef 92       	push	r14
   19440:	ff 92       	push	r15
   19442:	0f 93       	push	r16
   19444:	1f 93       	push	r17
   19446:	cf 93       	push	r28
   19448:	df 93       	push	r29
   1944a:	ec 01       	movw	r28, r24
   1944c:	7b 01       	movw	r14, r22
   1944e:	bc 01       	movw	r22, r24
   19450:	61 5b       	subi	r22, 0xB1	; 177
   19452:	7f 4f       	sbci	r23, 0xFF	; 255
   19454:	4a e0       	ldi	r20, 0x0A	; 10
   19456:	50 e0       	ldi	r21, 0x00	; 0
   19458:	c7 01       	movw	r24, r14
   1945a:	77 de       	rcall	.-786    	; 0x1914a <lif_S2B>
   1945c:	fe 01       	movw	r30, r28
   1945e:	e6 5a       	subi	r30, 0xA6	; 166
   19460:	ff 4f       	sbci	r31, 0xFF	; 255
   19462:	00 81       	ld	r16, Z
   19464:	11 81       	ldd	r17, Z+1	; 0x01
   19466:	20 e0       	ldi	r18, 0x00	; 0
   19468:	30 e0       	ldi	r19, 0x00	; 0
   1946a:	42 e0       	ldi	r20, 0x02	; 2
   1946c:	50 e0       	ldi	r21, 0x00	; 0
   1946e:	6a e0       	ldi	r22, 0x0A	; 10
   19470:	70 e0       	ldi	r23, 0x00	; 0
   19472:	c7 01       	movw	r24, r14
   19474:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   19478:	fe 01       	movw	r30, r28
   1947a:	e4 5a       	subi	r30, 0xA4	; 164
   1947c:	ff 4f       	sbci	r31, 0xFF	; 255
   1947e:	00 81       	ld	r16, Z
   19480:	11 81       	ldd	r17, Z+1	; 0x01
   19482:	22 81       	ldd	r18, Z+2	; 0x02
   19484:	33 81       	ldd	r19, Z+3	; 0x03
   19486:	44 e0       	ldi	r20, 0x04	; 4
   19488:	50 e0       	ldi	r21, 0x00	; 0
   1948a:	6c e0       	ldi	r22, 0x0C	; 12
   1948c:	70 e0       	ldi	r23, 0x00	; 0
   1948e:	c7 01       	movw	r24, r14
   19490:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   19494:	fe 01       	movw	r30, r28
   19496:	e0 5a       	subi	r30, 0xA0	; 160
   19498:	ff 4f       	sbci	r31, 0xFF	; 255
   1949a:	00 81       	ld	r16, Z
   1949c:	11 81       	ldd	r17, Z+1	; 0x01
   1949e:	22 81       	ldd	r18, Z+2	; 0x02
   194a0:	33 81       	ldd	r19, Z+3	; 0x03
   194a2:	44 e0       	ldi	r20, 0x04	; 4
   194a4:	50 e0       	ldi	r21, 0x00	; 0
   194a6:	60 e1       	ldi	r22, 0x10	; 16
   194a8:	70 e0       	ldi	r23, 0x00	; 0
   194aa:	c7 01       	movw	r24, r14
   194ac:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   194b0:	d7 01       	movw	r26, r14
   194b2:	54 96       	adiw	r26, 0x14	; 20
   194b4:	fe 01       	movw	r30, r28
   194b6:	ec 59       	subi	r30, 0x9C	; 156
   194b8:	ff 4f       	sbci	r31, 0xFF	; 255
   194ba:	86 e0       	ldi	r24, 0x06	; 6
   194bc:	01 90       	ld	r0, Z+
   194be:	0d 92       	st	X+, r0
   194c0:	8a 95       	dec	r24
   194c2:	e1 f7       	brne	.-8      	; 0x194bc <lif_dir2str+0x7e>
   194c4:	fe 01       	movw	r30, r28
   194c6:	e6 59       	subi	r30, 0x96	; 150
   194c8:	ff 4f       	sbci	r31, 0xFF	; 255
   194ca:	00 81       	ld	r16, Z
   194cc:	11 81       	ldd	r17, Z+1	; 0x01
   194ce:	20 e0       	ldi	r18, 0x00	; 0
   194d0:	30 e0       	ldi	r19, 0x00	; 0
   194d2:	42 e0       	ldi	r20, 0x02	; 2
   194d4:	50 e0       	ldi	r21, 0x00	; 0
   194d6:	6a e1       	ldi	r22, 0x1A	; 26
   194d8:	70 e0       	ldi	r23, 0x00	; 0
   194da:	c7 01       	movw	r24, r14
   194dc:	0e 94 d9 b4 	call	0x169b2	; 0x169b2 <V2B_MSB>
   194e0:	fe 01       	movw	r30, r28
   194e2:	e4 59       	subi	r30, 0x94	; 148
   194e4:	ff 4f       	sbci	r31, 0xFF	; 255
   194e6:	00 81       	ld	r16, Z
   194e8:	11 81       	ldd	r17, Z+1	; 0x01
   194ea:	20 e0       	ldi	r18, 0x00	; 0
   194ec:	30 e0       	ldi	r19, 0x00	; 0
   194ee:	42 e0       	ldi	r20, 0x02	; 2
   194f0:	50 e0       	ldi	r21, 0x00	; 0
   194f2:	6c e1       	ldi	r22, 0x1C	; 28
   194f4:	70 e0       	ldi	r23, 0x00	; 0
   194f6:	c7 01       	movw	r24, r14
   194f8:	0e 94 ed b4 	call	0x169da	; 0x169da <V2B_LSB>
   194fc:	c2 59       	subi	r28, 0x92	; 146
   194fe:	df 4f       	sbci	r29, 0xFF	; 255
   19500:	08 81       	ld	r16, Y
   19502:	19 81       	ldd	r17, Y+1	; 0x01
   19504:	20 e0       	ldi	r18, 0x00	; 0
   19506:	30 e0       	ldi	r19, 0x00	; 0
   19508:	42 e0       	ldi	r20, 0x02	; 2
   1950a:	50 e0       	ldi	r21, 0x00	; 0
   1950c:	6e e1       	ldi	r22, 0x1E	; 30
   1950e:	70 e0       	ldi	r23, 0x00	; 0
   19510:	c7 01       	movw	r24, r14
   19512:	0e 94 ed b4 	call	0x169da	; 0x169da <V2B_LSB>
   19516:	cd b7       	in	r28, 0x3d	; 61
   19518:	de b7       	in	r29, 0x3e	; 62
   1951a:	e6 e0       	ldi	r30, 0x06	; 6
   1951c:	0c 94 e9 e8 	jmp	0x1d1d2	; 0x1d1d2 <__epilogue_restores__+0x18>

00019520 <lif_str2dir>:
   19520:	0f 93       	push	r16
   19522:	1f 93       	push	r17
   19524:	cf 93       	push	r28
   19526:	df 93       	push	r29
   19528:	8c 01       	movw	r16, r24
   1952a:	eb 01       	movw	r28, r22
   1952c:	61 5b       	subi	r22, 0xB1	; 177
   1952e:	7f 4f       	sbci	r23, 0xFF	; 255
   19530:	4a e0       	ldi	r20, 0x0A	; 10
   19532:	50 e0       	ldi	r21, 0x00	; 0
   19534:	b3 dd       	rcall	.-1178   	; 0x1909c <lif_B2S>
   19536:	42 e0       	ldi	r20, 0x02	; 2
   19538:	50 e0       	ldi	r21, 0x00	; 0
   1953a:	6a e0       	ldi	r22, 0x0A	; 10
   1953c:	70 e0       	ldi	r23, 0x00	; 0
   1953e:	c8 01       	movw	r24, r16
   19540:	0e 94 02 b5 	call	0x16a04	; 0x16a04 <B2V_MSB>
   19544:	fe 01       	movw	r30, r28
   19546:	e6 5a       	subi	r30, 0xA6	; 166
   19548:	ff 4f       	sbci	r31, 0xFF	; 255
   1954a:	71 83       	std	Z+1, r23	; 0x01
   1954c:	60 83       	st	Z, r22
   1954e:	44 e0       	ldi	r20, 0x04	; 4
   19550:	50 e0       	ldi	r21, 0x00	; 0
   19552:	6c e0       	ldi	r22, 0x0C	; 12
   19554:	70 e0       	ldi	r23, 0x00	; 0
   19556:	c8 01       	movw	r24, r16
   19558:	0e 94 02 b5 	call	0x16a04	; 0x16a04 <B2V_MSB>
   1955c:	fe 01       	movw	r30, r28
   1955e:	e4 5a       	subi	r30, 0xA4	; 164
   19560:	ff 4f       	sbci	r31, 0xFF	; 255
   19562:	60 83       	st	Z, r22
   19564:	71 83       	std	Z+1, r23	; 0x01
   19566:	82 83       	std	Z+2, r24	; 0x02
   19568:	93 83       	std	Z+3, r25	; 0x03
   1956a:	44 e0       	ldi	r20, 0x04	; 4
   1956c:	50 e0       	ldi	r21, 0x00	; 0
   1956e:	60 e1       	ldi	r22, 0x10	; 16
   19570:	70 e0       	ldi	r23, 0x00	; 0
   19572:	c8 01       	movw	r24, r16
   19574:	0e 94 02 b5 	call	0x16a04	; 0x16a04 <B2V_MSB>
   19578:	fe 01       	movw	r30, r28
   1957a:	e0 5a       	subi	r30, 0xA0	; 160
   1957c:	ff 4f       	sbci	r31, 0xFF	; 255
   1957e:	60 83       	st	Z, r22
   19580:	71 83       	std	Z+1, r23	; 0x01
   19582:	82 83       	std	Z+2, r24	; 0x02
   19584:	93 83       	std	Z+3, r25	; 0x03
   19586:	de 01       	movw	r26, r28
   19588:	ac 59       	subi	r26, 0x9C	; 156
   1958a:	bf 4f       	sbci	r27, 0xFF	; 255
   1958c:	f8 01       	movw	r30, r16
   1958e:	74 96       	adiw	r30, 0x14	; 20
   19590:	86 e0       	ldi	r24, 0x06	; 6
   19592:	01 90       	ld	r0, Z+
   19594:	0d 92       	st	X+, r0
   19596:	8a 95       	dec	r24
   19598:	e1 f7       	brne	.-8      	; 0x19592 <lif_str2dir+0x72>
   1959a:	42 e0       	ldi	r20, 0x02	; 2
   1959c:	50 e0       	ldi	r21, 0x00	; 0
   1959e:	6a e1       	ldi	r22, 0x1A	; 26
   195a0:	70 e0       	ldi	r23, 0x00	; 0
   195a2:	c8 01       	movw	r24, r16
   195a4:	0e 94 02 b5 	call	0x16a04	; 0x16a04 <B2V_MSB>
   195a8:	fe 01       	movw	r30, r28
   195aa:	e6 59       	subi	r30, 0x96	; 150
   195ac:	ff 4f       	sbci	r31, 0xFF	; 255
   195ae:	71 83       	std	Z+1, r23	; 0x01
   195b0:	60 83       	st	Z, r22
   195b2:	42 e0       	ldi	r20, 0x02	; 2
   195b4:	50 e0       	ldi	r21, 0x00	; 0
   195b6:	6c e1       	ldi	r22, 0x1C	; 28
   195b8:	70 e0       	ldi	r23, 0x00	; 0
   195ba:	c8 01       	movw	r24, r16
   195bc:	0e 94 21 b5 	call	0x16a42	; 0x16a42 <B2V_LSB>
   195c0:	fe 01       	movw	r30, r28
   195c2:	e4 59       	subi	r30, 0x94	; 148
   195c4:	ff 4f       	sbci	r31, 0xFF	; 255
   195c6:	71 83       	std	Z+1, r23	; 0x01
   195c8:	60 83       	st	Z, r22
   195ca:	42 e0       	ldi	r20, 0x02	; 2
   195cc:	50 e0       	ldi	r21, 0x00	; 0
   195ce:	6e e1       	ldi	r22, 0x1E	; 30
   195d0:	70 e0       	ldi	r23, 0x00	; 0
   195d2:	c8 01       	movw	r24, r16
   195d4:	0e 94 21 b5 	call	0x16a42	; 0x16a42 <B2V_LSB>
   195d8:	c2 59       	subi	r28, 0x92	; 146
   195da:	df 4f       	sbci	r29, 0xFF	; 255
   195dc:	79 83       	std	Y+1, r23	; 0x01
   195de:	68 83       	st	Y, r22
   195e0:	df 91       	pop	r29
   195e2:	cf 91       	pop	r28
   195e4:	1f 91       	pop	r17
   195e6:	0f 91       	pop	r16
   195e8:	08 95       	ret

000195ea <lif_BIN2BCD>:
   195ea:	6a e0       	ldi	r22, 0x0A	; 10
   195ec:	0e 94 21 e8 	call	0x1d042	; 0x1d042 <__udivmodqi4>
   195f0:	82 95       	swap	r24
   195f2:	80 7f       	andi	r24, 0xF0	; 240
   195f4:	89 2b       	or	r24, r25
   195f6:	08 95       	ret

000195f8 <lif_BCD2BIN>:
   195f8:	28 2f       	mov	r18, r24
   195fa:	22 95       	swap	r18
   195fc:	2f 70       	andi	r18, 0x0F	; 15
   195fe:	8f 70       	andi	r24, 0x0F	; 15
   19600:	90 e0       	ldi	r25, 0x00	; 0
   19602:	3a e0       	ldi	r19, 0x0A	; 10
   19604:	23 9f       	mul	r18, r19
   19606:	80 0d       	add	r24, r0
   19608:	91 1d       	adc	r25, r1
   1960a:	11 24       	eor	r1, r1
   1960c:	08 95       	ret

0001960e <lif_time2lifbcd>:
   1960e:	aa e1       	ldi	r26, 0x1A	; 26
   19610:	b0 e0       	ldi	r27, 0x00	; 0
   19612:	ed e0       	ldi	r30, 0x0D	; 13
   19614:	fb ec       	ldi	r31, 0xCB	; 203
   19616:	0c 94 cf e8 	jmp	0x1d19e	; 0x1d19e <__prologue_saves__+0x1c>
   1961a:	8b 01       	movw	r16, r22
   1961c:	9c 01       	movw	r18, r24
   1961e:	6f 8b       	std	Y+23, r22	; 0x17
   19620:	78 8f       	std	Y+24, r23	; 0x18
   19622:	89 8f       	std	Y+25, r24	; 0x19
   19624:	9a 8f       	std	Y+26, r25	; 0x1a
   19626:	67 2b       	or	r22, r23
   19628:	68 2b       	or	r22, r24
   1962a:	69 2b       	or	r22, r25
   1962c:	41 f4       	brne	.+16     	; 0x1963e <lif_time2lifbcd+0x30>
   1962e:	fa 01       	movw	r30, r20
   19630:	ca 01       	movw	r24, r20
   19632:	06 96       	adiw	r24, 0x06	; 6
   19634:	11 92       	st	Z+, r1
   19636:	e8 17       	cp	r30, r24
   19638:	f9 07       	cpc	r31, r25
   1963a:	e1 f7       	brne	.-8      	; 0x19634 <lif_time2lifbcd+0x26>
   1963c:	26 c0       	rjmp	.+76     	; 0x1968a <lif_time2lifbcd+0x7c>
   1963e:	8a 01       	movw	r16, r20
   19640:	be 01       	movw	r22, r28
   19642:	6f 5f       	subi	r22, 0xFF	; 255
   19644:	7f 4f       	sbci	r23, 0xFF	; 255
   19646:	ce 01       	movw	r24, r28
   19648:	47 96       	adiw	r24, 0x17	; 23
   1964a:	0e 94 0e 36 	call	0x6c1c	; 0x6c1c <gmtime_r>
   1964e:	8b 85       	ldd	r24, Y+11	; 0x0b
   19650:	9c 85       	ldd	r25, Y+12	; 0x0c
   19652:	64 e6       	ldi	r22, 0x64	; 100
   19654:	70 e0       	ldi	r23, 0x00	; 0
   19656:	0e 94 41 e8 	call	0x1d082	; 0x1d082 <__divmodhi4>
   1965a:	c7 df       	rcall	.-114    	; 0x195ea <lif_BIN2BCD>
   1965c:	f8 01       	movw	r30, r16
   1965e:	80 83       	st	Z, r24
   19660:	89 85       	ldd	r24, Y+9	; 0x09
   19662:	8f 5f       	subi	r24, 0xFF	; 255
   19664:	c2 df       	rcall	.-124    	; 0x195ea <lif_BIN2BCD>
   19666:	f8 01       	movw	r30, r16
   19668:	81 83       	std	Z+1, r24	; 0x01
   1966a:	8f 81       	ldd	r24, Y+7	; 0x07
   1966c:	be df       	rcall	.-132    	; 0x195ea <lif_BIN2BCD>
   1966e:	f8 01       	movw	r30, r16
   19670:	82 83       	std	Z+2, r24	; 0x02
   19672:	8d 81       	ldd	r24, Y+5	; 0x05
   19674:	ba df       	rcall	.-140    	; 0x195ea <lif_BIN2BCD>
   19676:	f8 01       	movw	r30, r16
   19678:	83 83       	std	Z+3, r24	; 0x03
   1967a:	8b 81       	ldd	r24, Y+3	; 0x03
   1967c:	b6 df       	rcall	.-148    	; 0x195ea <lif_BIN2BCD>
   1967e:	f8 01       	movw	r30, r16
   19680:	84 83       	std	Z+4, r24	; 0x04
   19682:	89 81       	ldd	r24, Y+1	; 0x01
   19684:	b2 df       	rcall	.-156    	; 0x195ea <lif_BIN2BCD>
   19686:	f8 01       	movw	r30, r16
   19688:	85 83       	std	Z+5, r24	; 0x05
   1968a:	6a 96       	adiw	r28, 0x1a	; 26
   1968c:	e4 e0       	ldi	r30, 0x04	; 4
   1968e:	0c 94 eb e8 	jmp	0x1d1d6	; 0x1d1d6 <__epilogue_restores__+0x1c>

00019692 <lif_lifbcd2time>:
   19692:	a6 e1       	ldi	r26, 0x16	; 22
   19694:	b0 e0       	ldi	r27, 0x00	; 0
   19696:	ef e4       	ldi	r30, 0x4F	; 79
   19698:	fb ec       	ldi	r31, 0xCB	; 203
   1969a:	0c 94 c9 e8 	jmp	0x1d192	; 0x1d192 <__prologue_saves__+0x10>
   1969e:	8c 01       	movw	r16, r24
   196a0:	7c 01       	movw	r14, r24
   196a2:	5c 01       	movw	r10, r24
   196a4:	26 e0       	ldi	r18, 0x06	; 6
   196a6:	a2 0e       	add	r10, r18
   196a8:	b1 1c       	adc	r11, r1
   196aa:	cc 24       	eor	r12, r12
   196ac:	c3 94       	inc	r12
   196ae:	d1 2c       	mov	r13, r1
   196b0:	f7 01       	movw	r30, r14
   196b2:	81 91       	ld	r24, Z+
   196b4:	7f 01       	movw	r14, r30
   196b6:	a0 df       	rcall	.-192    	; 0x195f8 <lif_BCD2BIN>
   196b8:	89 2b       	or	r24, r25
   196ba:	11 f0       	breq	.+4      	; 0x196c0 <lif_lifbcd2time+0x2e>
   196bc:	c1 2c       	mov	r12, r1
   196be:	d1 2c       	mov	r13, r1
   196c0:	ea 14       	cp	r14, r10
   196c2:	fb 04       	cpc	r15, r11
   196c4:	a9 f7       	brne	.-22     	; 0x196b0 <lif_lifbcd2time+0x1e>
   196c6:	c1 14       	cp	r12, r1
   196c8:	d1 04       	cpc	r13, r1
   196ca:	61 f5       	brne	.+88     	; 0x19724 <lif_lifbcd2time+0x92>
   196cc:	f8 01       	movw	r30, r16
   196ce:	80 81       	ld	r24, Z
   196d0:	93 df       	rcall	.-218    	; 0x195f8 <lif_BCD2BIN>
   196d2:	7c 01       	movw	r14, r24
   196d4:	f8 01       	movw	r30, r16
   196d6:	81 81       	ldd	r24, Z+1	; 0x01
   196d8:	8f df       	rcall	.-226    	; 0x195f8 <lif_BCD2BIN>
   196da:	01 97       	sbiw	r24, 0x01	; 1
   196dc:	f6 e4       	ldi	r31, 0x46	; 70
   196de:	ef 16       	cp	r14, r31
   196e0:	f1 04       	cpc	r15, r1
   196e2:	1c f4       	brge	.+6      	; 0x196ea <lif_lifbcd2time+0x58>
   196e4:	24 e6       	ldi	r18, 0x64	; 100
   196e6:	e2 0e       	add	r14, r18
   196e8:	f1 1c       	adc	r15, r1
   196ea:	fc 86       	std	Y+12, r15	; 0x0c
   196ec:	eb 86       	std	Y+11, r14	; 0x0b
   196ee:	9a 87       	std	Y+10, r25	; 0x0a
   196f0:	89 87       	std	Y+9, r24	; 0x09
   196f2:	f8 01       	movw	r30, r16
   196f4:	82 81       	ldd	r24, Z+2	; 0x02
   196f6:	80 df       	rcall	.-256    	; 0x195f8 <lif_BCD2BIN>
   196f8:	98 87       	std	Y+8, r25	; 0x08
   196fa:	8f 83       	std	Y+7, r24	; 0x07
   196fc:	f8 01       	movw	r30, r16
   196fe:	83 81       	ldd	r24, Z+3	; 0x03
   19700:	7b df       	rcall	.-266    	; 0x195f8 <lif_BCD2BIN>
   19702:	9e 83       	std	Y+6, r25	; 0x06
   19704:	8d 83       	std	Y+5, r24	; 0x05
   19706:	f8 01       	movw	r30, r16
   19708:	84 81       	ldd	r24, Z+4	; 0x04
   1970a:	76 df       	rcall	.-276    	; 0x195f8 <lif_BCD2BIN>
   1970c:	9c 83       	std	Y+4, r25	; 0x04
   1970e:	8b 83       	std	Y+3, r24	; 0x03
   19710:	f8 01       	movw	r30, r16
   19712:	85 81       	ldd	r24, Z+5	; 0x05
   19714:	71 df       	rcall	.-286    	; 0x195f8 <lif_BCD2BIN>
   19716:	9a 83       	std	Y+2, r25	; 0x02
   19718:	89 83       	std	Y+1, r24	; 0x01
   1971a:	ce 01       	movw	r24, r28
   1971c:	01 96       	adiw	r24, 0x01	; 1
   1971e:	0e 94 e3 38 	call	0x71c6	; 0x71c6 <timegm>
   19722:	03 c0       	rjmp	.+6      	; 0x1972a <lif_lifbcd2time+0x98>
   19724:	60 e0       	ldi	r22, 0x00	; 0
   19726:	70 e0       	ldi	r23, 0x00	; 0
   19728:	cb 01       	movw	r24, r22
   1972a:	66 96       	adiw	r28, 0x16	; 22
   1972c:	ea e0       	ldi	r30, 0x0A	; 10
   1972e:	0c 94 e5 e8 	jmp	0x1d1ca	; 0x1d1ca <__epilogue_restores__+0x10>

00019732 <lif_ctime_gmt>:
   19732:	a6 e1       	ldi	r26, 0x16	; 22
   19734:	b0 e0       	ldi	r27, 0x00	; 0
   19736:	ef e9       	ldi	r30, 0x9F	; 159
   19738:	fb ec       	ldi	r31, 0xCB	; 203
   1973a:	0c 94 cf e8 	jmp	0x1d19e	; 0x1d19e <__prologue_saves__+0x1c>
   1973e:	20 e2       	ldi	r18, 0x20	; 32
   19740:	e2 e8       	ldi	r30, 0x82	; 130
   19742:	f9 e1       	ldi	r31, 0x19	; 25
   19744:	df 01       	movw	r26, r30
   19746:	1d 92       	st	X+, r1
   19748:	2a 95       	dec	r18
   1974a:	e9 f7       	brne	.-6      	; 0x19746 <lif_ctime_gmt+0x14>
   1974c:	be 01       	movw	r22, r28
   1974e:	6f 5f       	subi	r22, 0xFF	; 255
   19750:	7f 4f       	sbci	r23, 0xFF	; 255
   19752:	0e 94 0e 36 	call	0x6c1c	; 0x6c1c <gmtime_r>
   19756:	62 e8       	ldi	r22, 0x82	; 130
   19758:	79 e1       	ldi	r23, 0x19	; 25
   1975a:	0e 94 39 3b 	call	0x7672	; 0x7672 <asctime_r>
   1975e:	8c 01       	movw	r16, r24
   19760:	0e 94 69 30 	call	0x60d2	; 0x60d2 <trim_tail>
   19764:	c8 01       	movw	r24, r16
   19766:	66 96       	adiw	r28, 0x16	; 22
   19768:	e4 e0       	ldi	r30, 0x04	; 4
   1976a:	0c 94 eb e8 	jmp	0x1d1d6	; 0x1d1d6 <__epilogue_restores__+0x1c>

0001976e <lif_lifbcd2timestr>:
   1976e:	a4 e0       	ldi	r26, 0x04	; 4
   19770:	b0 e0       	ldi	r27, 0x00	; 0
   19772:	ed eb       	ldi	r30, 0xBD	; 189
   19774:	fb ec       	ldi	r31, 0xCB	; 203
   19776:	0c 94 d1 e8 	jmp	0x1d1a2	; 0x1d1a2 <__prologue_saves__+0x20>
   1977a:	20 e2       	ldi	r18, 0x20	; 32
   1977c:	e2 e6       	ldi	r30, 0x62	; 98
   1977e:	f9 e1       	ldi	r31, 0x19	; 25
   19780:	df 01       	movw	r26, r30
   19782:	1d 92       	st	X+, r1
   19784:	2a 95       	dec	r18
   19786:	e9 f7       	brne	.-6      	; 0x19782 <lif_lifbcd2timestr+0x14>
   19788:	84 df       	rcall	.-248    	; 0x19692 <lif_lifbcd2time>
   1978a:	69 83       	std	Y+1, r22	; 0x01
   1978c:	7a 83       	std	Y+2, r23	; 0x02
   1978e:	8b 83       	std	Y+3, r24	; 0x03
   19790:	9c 83       	std	Y+4, r25	; 0x04
   19792:	67 2b       	or	r22, r23
   19794:	68 2b       	or	r22, r24
   19796:	69 2b       	or	r22, r25
   19798:	29 f0       	breq	.+10     	; 0x197a4 <lif_lifbcd2timestr+0x36>
   1979a:	ce 01       	movw	r24, r28
   1979c:	01 96       	adiw	r24, 0x01	; 1
   1979e:	c9 df       	rcall	.-110    	; 0x19732 <lif_ctime_gmt>
   197a0:	bc 01       	movw	r22, r24
   197a2:	02 c0       	rjmp	.+4      	; 0x197a8 <lif_lifbcd2timestr+0x3a>
   197a4:	63 e9       	ldi	r22, 0x93	; 147
   197a6:	75 e1       	ldi	r23, 0x15	; 21
   197a8:	82 e6       	ldi	r24, 0x62	; 98
   197aa:	99 e1       	ldi	r25, 0x19	; 25
   197ac:	0e 94 0f 30 	call	0x601e	; 0x601e <strcpy>
   197b0:	82 e6       	ldi	r24, 0x62	; 98
   197b2:	99 e1       	ldi	r25, 0x19	; 25
   197b4:	24 96       	adiw	r28, 0x04	; 4
   197b6:	e2 e0       	ldi	r30, 0x02	; 2
   197b8:	0c 94 ed e8 	jmp	0x1d1da	; 0x1d1da <__epilogue_restores__+0x20>

000197bc <lif_image_clear>:
   197bc:	20 e7       	ldi	r18, 0x70	; 112
   197be:	fc 01       	movw	r30, r24
   197c0:	11 92       	st	Z+, r1
   197c2:	2a 95       	dec	r18
   197c4:	e9 f7       	brne	.-6      	; 0x197c0 <lif_image_clear+0x4>
   197c6:	08 95       	ret

000197c8 <lif_dir_clear>:
   197c8:	81 5b       	subi	r24, 0xB1	; 177
   197ca:	9f 4f       	sbci	r25, 0xFF	; 255
   197cc:	21 e2       	ldi	r18, 0x21	; 33
   197ce:	fc 01       	movw	r30, r24
   197d0:	11 92       	st	Z+, r1
   197d2:	2a 95       	dec	r18
   197d4:	e9 f7       	brne	.-6      	; 0x197d0 <lif_dir_clear+0x8>
   197d6:	08 95       	ret

000197d8 <lif_vol_clear>:
   197d8:	84 96       	adiw	r24, 0x24	; 36
   197da:	2b e2       	ldi	r18, 0x2B	; 43
   197dc:	fc 01       	movw	r30, r24
   197de:	11 92       	st	Z+, r1
   197e0:	2a 95       	dec	r18
   197e2:	e9 f7       	brne	.-6      	; 0x197de <lif_vol_clear+0x6>
   197e4:	08 95       	ret

000197e6 <lif_dump_vol>:
   197e6:	cf 93       	push	r28
   197e8:	df 93       	push	r29
   197ea:	ec 01       	movw	r28, r24
   197ec:	7f 93       	push	r23
   197ee:	6f 93       	push	r22
   197f0:	8b eb       	ldi	r24, 0xBB	; 187
   197f2:	92 e4       	ldi	r25, 0x42	; 66
   197f4:	1f 92       	push	r1
   197f6:	9f 93       	push	r25
   197f8:	8f 93       	push	r24
   197fa:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   197fe:	89 81       	ldd	r24, Y+1	; 0x01
   19800:	8f 93       	push	r24
   19802:	88 81       	ld	r24, Y
   19804:	8f 93       	push	r24
   19806:	81 ea       	ldi	r24, 0xA1	; 161
   19808:	92 e4       	ldi	r25, 0x42	; 66
   1980a:	1f 92       	push	r1
   1980c:	9f 93       	push	r25
   1980e:	8f 93       	push	r24
   19810:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19814:	8f 81       	ldd	r24, Y+7	; 0x07
   19816:	8f 93       	push	r24
   19818:	8e 81       	ldd	r24, Y+6	; 0x06
   1981a:	8f 93       	push	r24
   1981c:	8d 81       	ldd	r24, Y+5	; 0x05
   1981e:	8f 93       	push	r24
   19820:	8c 81       	ldd	r24, Y+4	; 0x04
   19822:	8f 93       	push	r24
   19824:	84 e8       	ldi	r24, 0x84	; 132
   19826:	92 e4       	ldi	r25, 0x42	; 66
   19828:	1f 92       	push	r1
   1982a:	9f 93       	push	r25
   1982c:	8f 93       	push	r24
   1982e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19832:	8b 85       	ldd	r24, Y+11	; 0x0b
   19834:	8f 93       	push	r24
   19836:	8a 85       	ldd	r24, Y+10	; 0x0a
   19838:	8f 93       	push	r24
   1983a:	89 85       	ldd	r24, Y+9	; 0x09
   1983c:	8f 93       	push	r24
   1983e:	88 85       	ldd	r24, Y+8	; 0x08
   19840:	8f 93       	push	r24
   19842:	87 e6       	ldi	r24, 0x67	; 103
   19844:	92 e4       	ldi	r25, 0x42	; 66
   19846:	1f 92       	push	r1
   19848:	9f 93       	push	r25
   1984a:	8f 93       	push	r24
   1984c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19850:	8f 85       	ldd	r24, Y+15	; 0x0f
   19852:	8f 93       	push	r24
   19854:	8e 85       	ldd	r24, Y+14	; 0x0e
   19856:	8f 93       	push	r24
   19858:	8d 85       	ldd	r24, Y+13	; 0x0d
   1985a:	8f 93       	push	r24
   1985c:	8c 85       	ldd	r24, Y+12	; 0x0c
   1985e:	8f 93       	push	r24
   19860:	8a e4       	ldi	r24, 0x4A	; 74
   19862:	92 e4       	ldi	r25, 0x42	; 66
   19864:	1f 92       	push	r1
   19866:	9f 93       	push	r25
   19868:	8f 93       	push	r24
   1986a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1986e:	8b 89       	ldd	r24, Y+19	; 0x13
   19870:	8f 93       	push	r24
   19872:	8a 89       	ldd	r24, Y+18	; 0x12
   19874:	8f 93       	push	r24
   19876:	89 89       	ldd	r24, Y+17	; 0x11
   19878:	8f 93       	push	r24
   1987a:	88 89       	ldd	r24, Y+16	; 0x10
   1987c:	8f 93       	push	r24
   1987e:	8d e2       	ldi	r24, 0x2D	; 45
   19880:	92 e4       	ldi	r25, 0x42	; 66
   19882:	1f 92       	push	r1
   19884:	9f 93       	push	r25
   19886:	8f 93       	push	r24
   19888:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1988c:	8d b7       	in	r24, 0x3d	; 61
   1988e:	9e b7       	in	r25, 0x3e	; 62
   19890:	86 96       	adiw	r24, 0x26	; 38
   19892:	0f b6       	in	r0, 0x3f	; 63
   19894:	f8 94       	cli
   19896:	9e bf       	out	0x3e, r25	; 62
   19898:	0f be       	out	0x3f, r0	; 63
   1989a:	8d bf       	out	0x3d, r24	; 61
   1989c:	8f 89       	ldd	r24, Y+23	; 0x17
   1989e:	8f 93       	push	r24
   198a0:	8e 89       	ldd	r24, Y+22	; 0x16
   198a2:	8f 93       	push	r24
   198a4:	8d 89       	ldd	r24, Y+21	; 0x15
   198a6:	8f 93       	push	r24
   198a8:	8c 89       	ldd	r24, Y+20	; 0x14
   198aa:	8f 93       	push	r24
   198ac:	80 e1       	ldi	r24, 0x10	; 16
   198ae:	92 e4       	ldi	r25, 0x42	; 66
   198b0:	1f 92       	push	r1
   198b2:	9f 93       	push	r25
   198b4:	8f 93       	push	r24
   198b6:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   198ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
   198bc:	8f 93       	push	r24
   198be:	8a 8d       	ldd	r24, Y+26	; 0x1a
   198c0:	8f 93       	push	r24
   198c2:	89 8d       	ldd	r24, Y+25	; 0x19
   198c4:	8f 93       	push	r24
   198c6:	88 8d       	ldd	r24, Y+24	; 0x18
   198c8:	8f 93       	push	r24
   198ca:	83 ef       	ldi	r24, 0xF3	; 243
   198cc:	91 e4       	ldi	r25, 0x41	; 65
   198ce:	1f 92       	push	r1
   198d0:	9f 93       	push	r25
   198d2:	8f 93       	push	r24
   198d4:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   198d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
   198da:	9d 8d       	ldd	r25, Y+29	; 0x1d
   198dc:	09 2e       	mov	r0, r25
   198de:	00 0c       	add	r0, r0
   198e0:	aa 0b       	sbc	r26, r26
   198e2:	bb 0b       	sbc	r27, r27
   198e4:	bf 93       	push	r27
   198e6:	af 93       	push	r26
   198e8:	9f 93       	push	r25
   198ea:	8f 93       	push	r24
   198ec:	86 ed       	ldi	r24, 0xD6	; 214
   198ee:	91 e4       	ldi	r25, 0x41	; 65
   198f0:	1f 92       	push	r1
   198f2:	9f 93       	push	r25
   198f4:	8f 93       	push	r24
   198f6:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   198fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
   198fc:	9f 8d       	ldd	r25, Y+31	; 0x1f
   198fe:	09 2e       	mov	r0, r25
   19900:	00 0c       	add	r0, r0
   19902:	aa 0b       	sbc	r26, r26
   19904:	bb 0b       	sbc	r27, r27
   19906:	bf 93       	push	r27
   19908:	af 93       	push	r26
   1990a:	9f 93       	push	r25
   1990c:	8f 93       	push	r24
   1990e:	89 eb       	ldi	r24, 0xB9	; 185
   19910:	91 e4       	ldi	r25, 0x41	; 65
   19912:	1f 92       	push	r1
   19914:	9f 93       	push	r25
   19916:	8f 93       	push	r24
   19918:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1991c:	ce 01       	movw	r24, r28
   1991e:	86 96       	adiw	r24, 0x26	; 38
   19920:	9f 93       	push	r25
   19922:	8f 93       	push	r24
   19924:	8f e9       	ldi	r24, 0x9F	; 159
   19926:	91 e4       	ldi	r25, 0x41	; 65
   19928:	1f 92       	push	r1
   1992a:	9f 93       	push	r25
   1992c:	8f 93       	push	r24
   1992e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19932:	8d b7       	in	r24, 0x3d	; 61
   19934:	9e b7       	in	r25, 0x3e	; 62
   19936:	81 96       	adiw	r24, 0x21	; 33
   19938:	0f b6       	in	r0, 0x3f	; 63
   1993a:	f8 94       	cli
   1993c:	9e bf       	out	0x3e, r25	; 62
   1993e:	0f be       	out	0x3f, r0	; 63
   19940:	8d bf       	out	0x3d, r24	; 61
   19942:	8d a1       	ldd	r24, Y+37	; 0x25
   19944:	8f 93       	push	r24
   19946:	8c a1       	ldd	r24, Y+36	; 0x24
   19948:	8f 93       	push	r24
   1994a:	83 e8       	ldi	r24, 0x83	; 131
   1994c:	91 e4       	ldi	r25, 0x41	; 65
   1994e:	1f 92       	push	r1
   19950:	9f 93       	push	r25
   19952:	8f 93       	push	r24
   19954:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19958:	88 a9       	ldd	r24, Y+48	; 0x30
   1995a:	8f 93       	push	r24
   1995c:	8f a5       	ldd	r24, Y+47	; 0x2f
   1995e:	8f 93       	push	r24
   19960:	8e a5       	ldd	r24, Y+46	; 0x2e
   19962:	8f 93       	push	r24
   19964:	8d a5       	ldd	r24, Y+45	; 0x2d
   19966:	8f 93       	push	r24
   19968:	86 e6       	ldi	r24, 0x66	; 102
   1996a:	91 e4       	ldi	r25, 0x41	; 65
   1996c:	1f 92       	push	r1
   1996e:	9f 93       	push	r25
   19970:	8f 93       	push	r24
   19972:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19976:	88 ad       	ldd	r24, Y+56	; 0x38
   19978:	8f 93       	push	r24
   1997a:	8f a9       	ldd	r24, Y+55	; 0x37
   1997c:	8f 93       	push	r24
   1997e:	8e a9       	ldd	r24, Y+54	; 0x36
   19980:	8f 93       	push	r24
   19982:	8d a9       	ldd	r24, Y+53	; 0x35
   19984:	8f 93       	push	r24
   19986:	89 e4       	ldi	r24, 0x49	; 73
   19988:	91 e4       	ldi	r25, 0x41	; 65
   1998a:	1f 92       	push	r1
   1998c:	9f 93       	push	r25
   1998e:	8f 93       	push	r24
   19990:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19994:	8a a9       	ldd	r24, Y+50	; 0x32
   19996:	8f 93       	push	r24
   19998:	89 a9       	ldd	r24, Y+49	; 0x31
   1999a:	8f 93       	push	r24
   1999c:	8d e2       	ldi	r24, 0x2D	; 45
   1999e:	91 e4       	ldi	r25, 0x41	; 65
   199a0:	1f 92       	push	r1
   199a2:	9f 93       	push	r25
   199a4:	8f 93       	push	r24
   199a6:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   199aa:	8a ad       	ldd	r24, Y+58	; 0x3a
   199ac:	8f 93       	push	r24
   199ae:	89 ad       	ldd	r24, Y+57	; 0x39
   199b0:	8f 93       	push	r24
   199b2:	81 e1       	ldi	r24, 0x11	; 17
   199b4:	91 e4       	ldi	r25, 0x41	; 65
   199b6:	1f 92       	push	r1
   199b8:	9f 93       	push	r25
   199ba:	8f 93       	push	r24
   199bc:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   199c0:	ce 01       	movw	r24, r28
   199c2:	87 5b       	subi	r24, 0xB7	; 183
   199c4:	9f 4f       	sbci	r25, 0xFF	; 255
   199c6:	d3 de       	rcall	.-602    	; 0x1976e <lif_lifbcd2timestr>
   199c8:	9f 93       	push	r25
   199ca:	8f 93       	push	r24
   199cc:	87 ef       	ldi	r24, 0xF7	; 247
   199ce:	90 e4       	ldi	r25, 0x40	; 64
   199d0:	1f 92       	push	r1
   199d2:	9f 93       	push	r25
   199d4:	8f 93       	push	r24
   199d6:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   199da:	8d b7       	in	r24, 0x3d	; 61
   199dc:	9e b7       	in	r25, 0x3e	; 62
   199de:	82 96       	adiw	r24, 0x22	; 34
   199e0:	0f b6       	in	r0, 0x3f	; 63
   199e2:	f8 94       	cli
   199e4:	9e bf       	out	0x3e, r25	; 62
   199e6:	0f be       	out	0x3f, r0	; 63
   199e8:	8d bf       	out	0x3d, r24	; 61
   199ea:	ce 01       	movw	r24, r28
   199ec:	81 5b       	subi	r24, 0xB1	; 177
   199ee:	9f 4f       	sbci	r25, 0xFF	; 255
   199f0:	9f 93       	push	r25
   199f2:	8f 93       	push	r24
   199f4:	8d ed       	ldi	r24, 0xDD	; 221
   199f6:	90 e4       	ldi	r25, 0x40	; 64
   199f8:	1f 92       	push	r1
   199fa:	9f 93       	push	r25
   199fc:	8f 93       	push	r24
   199fe:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19a02:	fe 01       	movw	r30, r28
   19a04:	e6 5a       	subi	r30, 0xA6	; 166
   19a06:	ff 4f       	sbci	r31, 0xFF	; 255
   19a08:	81 81       	ldd	r24, Z+1	; 0x01
   19a0a:	8f 93       	push	r24
   19a0c:	80 81       	ld	r24, Z
   19a0e:	8f 93       	push	r24
   19a10:	81 ec       	ldi	r24, 0xC1	; 193
   19a12:	90 e4       	ldi	r25, 0x40	; 64
   19a14:	1f 92       	push	r1
   19a16:	9f 93       	push	r25
   19a18:	8f 93       	push	r24
   19a1a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19a1e:	fe 01       	movw	r30, r28
   19a20:	e6 59       	subi	r30, 0x96	; 150
   19a22:	ff 4f       	sbci	r31, 0xFF	; 255
   19a24:	81 81       	ldd	r24, Z+1	; 0x01
   19a26:	8f 93       	push	r24
   19a28:	80 81       	ld	r24, Z
   19a2a:	8f 93       	push	r24
   19a2c:	85 ea       	ldi	r24, 0xA5	; 165
   19a2e:	90 e4       	ldi	r25, 0x40	; 64
   19a30:	1f 92       	push	r1
   19a32:	9f 93       	push	r25
   19a34:	8f 93       	push	r24
   19a36:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19a3a:	fe 01       	movw	r30, r28
   19a3c:	e4 5a       	subi	r30, 0xA4	; 164
   19a3e:	ff 4f       	sbci	r31, 0xFF	; 255
   19a40:	83 81       	ldd	r24, Z+3	; 0x03
   19a42:	8f 93       	push	r24
   19a44:	82 81       	ldd	r24, Z+2	; 0x02
   19a46:	8f 93       	push	r24
   19a48:	81 81       	ldd	r24, Z+1	; 0x01
   19a4a:	8f 93       	push	r24
   19a4c:	80 81       	ld	r24, Z
   19a4e:	8f 93       	push	r24
   19a50:	88 e8       	ldi	r24, 0x88	; 136
   19a52:	90 e4       	ldi	r25, 0x40	; 64
   19a54:	1f 92       	push	r1
   19a56:	9f 93       	push	r25
   19a58:	8f 93       	push	r24
   19a5a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19a5e:	fe 01       	movw	r30, r28
   19a60:	e0 5a       	subi	r30, 0xA0	; 160
   19a62:	ff 4f       	sbci	r31, 0xFF	; 255
   19a64:	83 81       	ldd	r24, Z+3	; 0x03
   19a66:	8f 93       	push	r24
   19a68:	82 81       	ldd	r24, Z+2	; 0x02
   19a6a:	8f 93       	push	r24
   19a6c:	81 81       	ldd	r24, Z+1	; 0x01
   19a6e:	8f 93       	push	r24
   19a70:	80 81       	ld	r24, Z
   19a72:	8f 93       	push	r24
   19a74:	8b e6       	ldi	r24, 0x6B	; 107
   19a76:	90 e4       	ldi	r25, 0x40	; 64
   19a78:	1f 92       	push	r1
   19a7a:	9f 93       	push	r25
   19a7c:	8f 93       	push	r24
   19a7e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19a82:	fe 01       	movw	r30, r28
   19a84:	e4 59       	subi	r30, 0x94	; 148
   19a86:	ff 4f       	sbci	r31, 0xFF	; 255
   19a88:	80 81       	ld	r24, Z
   19a8a:	91 81       	ldd	r25, Z+1	; 0x01
   19a8c:	1f 92       	push	r1
   19a8e:	1f 92       	push	r1
   19a90:	9f 93       	push	r25
   19a92:	8f 93       	push	r24
   19a94:	8e e4       	ldi	r24, 0x4E	; 78
   19a96:	90 e4       	ldi	r25, 0x40	; 64
   19a98:	1f 92       	push	r1
   19a9a:	9f 93       	push	r25
   19a9c:	8f 93       	push	r24
   19a9e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19aa2:	8d b7       	in	r24, 0x3d	; 61
   19aa4:	9e b7       	in	r25, 0x3e	; 62
   19aa6:	84 96       	adiw	r24, 0x24	; 36
   19aa8:	0f b6       	in	r0, 0x3f	; 63
   19aaa:	f8 94       	cli
   19aac:	9e bf       	out	0x3e, r25	; 62
   19aae:	0f be       	out	0x3f, r0	; 63
   19ab0:	8d bf       	out	0x3d, r24	; 61
   19ab2:	fe 01       	movw	r30, r28
   19ab4:	e2 59       	subi	r30, 0x92	; 146
   19ab6:	ff 4f       	sbci	r31, 0xFF	; 255
   19ab8:	81 81       	ldd	r24, Z+1	; 0x01
   19aba:	8f 93       	push	r24
   19abc:	80 81       	ld	r24, Z
   19abe:	8f 93       	push	r24
   19ac0:	82 e3       	ldi	r24, 0x32	; 50
   19ac2:	90 e4       	ldi	r25, 0x40	; 64
   19ac4:	1f 92       	push	r1
   19ac6:	9f 93       	push	r25
   19ac8:	8f 93       	push	r24
   19aca:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19ace:	ce 01       	movw	r24, r28
   19ad0:	8c 59       	subi	r24, 0x9C	; 156
   19ad2:	9f 4f       	sbci	r25, 0xFF	; 255
   19ad4:	4c de       	rcall	.-872    	; 0x1976e <lif_lifbcd2timestr>
   19ad6:	9f 93       	push	r25
   19ad8:	8f 93       	push	r24
   19ada:	88 e1       	ldi	r24, 0x18	; 24
   19adc:	90 e4       	ldi	r25, 0x40	; 64
   19ade:	1f 92       	push	r1
   19ae0:	9f 93       	push	r25
   19ae2:	8f 93       	push	r24
   19ae4:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19ae8:	86 e1       	ldi	r24, 0x16	; 22
   19aea:	90 e4       	ldi	r25, 0x40	; 64
   19aec:	1f 92       	push	r1
   19aee:	9f 93       	push	r25
   19af0:	8f 93       	push	r24
   19af2:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19af6:	8d b7       	in	r24, 0x3d	; 61
   19af8:	9e b7       	in	r25, 0x3e	; 62
   19afa:	0d 96       	adiw	r24, 0x0d	; 13
   19afc:	0f b6       	in	r0, 0x3f	; 63
   19afe:	f8 94       	cli
   19b00:	9e bf       	out	0x3e, r25	; 62
   19b02:	0f be       	out	0x3f, r0	; 63
   19b04:	8d bf       	out	0x3d, r24	; 61
   19b06:	df 91       	pop	r29
   19b08:	cf 91       	pop	r28
   19b0a:	08 95       	ret

00019b0c <lif_check_volume>:
   19b0c:	0f 93       	push	r16
   19b0e:	1f 93       	push	r17
   19b10:	cf 93       	push	r28
   19b12:	df 93       	push	r29
   19b14:	ec 01       	movw	r28, r24
   19b16:	86 96       	adiw	r24, 0x26	; 38
   19b18:	fb da       	rcall	.-2570   	; 0x19110 <lif_checkname>
   19b1a:	89 2b       	or	r24, r25
   19b1c:	79 f4       	brne	.+30     	; 0x19b3c <lif_check_volume+0x30>
   19b1e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   19b22:	80 ff       	sbrs	r24, 0
   19b24:	0e c0       	rjmp	.+28     	; 0x19b42 <lif_check_volume+0x36>
   19b26:	87 ef       	ldi	r24, 0xF7	; 247
   19b28:	9f e3       	ldi	r25, 0x3F	; 63
   19b2a:	1f 92       	push	r1
   19b2c:	9f 93       	push	r25
   19b2e:	8f 93       	push	r24
   19b30:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19b34:	0f 90       	pop	r0
   19b36:	0f 90       	pop	r0
   19b38:	0f 90       	pop	r0
   19b3a:	03 c0       	rjmp	.+6      	; 0x19b42 <lif_check_volume+0x36>
   19b3c:	81 e0       	ldi	r24, 0x01	; 1
   19b3e:	90 e0       	ldi	r25, 0x00	; 0
   19b40:	02 c0       	rjmp	.+4      	; 0x19b46 <lif_check_volume+0x3a>
   19b42:	80 e0       	ldi	r24, 0x00	; 0
   19b44:	90 e0       	ldi	r25, 0x00	; 0
   19b46:	29 a9       	ldd	r18, Y+49	; 0x31
   19b48:	3a a9       	ldd	r19, Y+50	; 0x32
   19b4a:	21 15       	cp	r18, r1
   19b4c:	40 e1       	ldi	r20, 0x10	; 16
   19b4e:	34 07       	cpc	r19, r20
   19b50:	a1 f0       	breq	.+40     	; 0x19b7a <lif_check_volume+0x6e>
   19b52:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   19b56:	80 ff       	sbrs	r24, 0
   19b58:	0e c0       	rjmp	.+28     	; 0x19b76 <lif_check_volume+0x6a>
   19b5a:	3f 93       	push	r19
   19b5c:	2f 93       	push	r18
   19b5e:	8e eb       	ldi	r24, 0xBE	; 190
   19b60:	9f e3       	ldi	r25, 0x3F	; 63
   19b62:	1f 92       	push	r1
   19b64:	9f 93       	push	r25
   19b66:	8f 93       	push	r24
   19b68:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19b6c:	0f 90       	pop	r0
   19b6e:	0f 90       	pop	r0
   19b70:	0f 90       	pop	r0
   19b72:	0f 90       	pop	r0
   19b74:	0f 90       	pop	r0
   19b76:	80 e0       	ldi	r24, 0x00	; 0
   19b78:	90 e0       	ldi	r25, 0x00	; 0
   19b7a:	29 ad       	ldd	r18, Y+57	; 0x39
   19b7c:	3a ad       	ldd	r19, Y+58	; 0x3a
   19b7e:	22 30       	cpi	r18, 0x02	; 2
   19b80:	31 05       	cpc	r19, r1
   19b82:	a0 f0       	brcs	.+40     	; 0x19bac <lif_check_volume+0xa0>
   19b84:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   19b88:	80 ff       	sbrs	r24, 0
   19b8a:	0e c0       	rjmp	.+28     	; 0x19ba8 <lif_check_volume+0x9c>
   19b8c:	3f 93       	push	r19
   19b8e:	2f 93       	push	r18
   19b90:	86 ea       	ldi	r24, 0xA6	; 166
   19b92:	9f e3       	ldi	r25, 0x3F	; 63
   19b94:	1f 92       	push	r1
   19b96:	9f 93       	push	r25
   19b98:	8f 93       	push	r24
   19b9a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19b9e:	0f 90       	pop	r0
   19ba0:	0f 90       	pop	r0
   19ba2:	0f 90       	pop	r0
   19ba4:	0f 90       	pop	r0
   19ba6:	0f 90       	pop	r0
   19ba8:	80 e0       	ldi	r24, 0x00	; 0
   19baa:	90 e0       	ldi	r25, 0x00	; 0
   19bac:	2b a9       	ldd	r18, Y+51	; 0x33
   19bae:	3c a9       	ldd	r19, Y+52	; 0x34
   19bb0:	23 2b       	or	r18, r19
   19bb2:	81 f0       	breq	.+32     	; 0x19bd4 <lif_check_volume+0xc8>
   19bb4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   19bb8:	80 ff       	sbrs	r24, 0
   19bba:	0a c0       	rjmp	.+20     	; 0x19bd0 <lif_check_volume+0xc4>
   19bbc:	8d e6       	ldi	r24, 0x6D	; 109
   19bbe:	9f e3       	ldi	r25, 0x3F	; 63
   19bc0:	1f 92       	push	r1
   19bc2:	9f 93       	push	r25
   19bc4:	8f 93       	push	r24
   19bc6:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19bca:	0f 90       	pop	r0
   19bcc:	0f 90       	pop	r0
   19bce:	0f 90       	pop	r0
   19bd0:	80 e0       	ldi	r24, 0x00	; 0
   19bd2:	90 e0       	ldi	r25, 0x00	; 0
   19bd4:	2b ad       	ldd	r18, Y+59	; 0x3b
   19bd6:	3c ad       	ldd	r19, Y+60	; 0x3c
   19bd8:	23 2b       	or	r18, r19
   19bda:	81 f0       	breq	.+32     	; 0x19bfc <lif_check_volume+0xf0>
   19bdc:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   19be0:	80 ff       	sbrs	r24, 0
   19be2:	0a c0       	rjmp	.+20     	; 0x19bf8 <lif_check_volume+0xec>
   19be4:	84 e3       	ldi	r24, 0x34	; 52
   19be6:	9f e3       	ldi	r25, 0x3F	; 63
   19be8:	1f 92       	push	r1
   19bea:	9f 93       	push	r25
   19bec:	8f 93       	push	r24
   19bee:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19bf2:	0f 90       	pop	r0
   19bf4:	0f 90       	pop	r0
   19bf6:	0f 90       	pop	r0
   19bf8:	80 e0       	ldi	r24, 0x00	; 0
   19bfa:	90 e0       	ldi	r25, 0x00	; 0
   19bfc:	4d a5       	ldd	r20, Y+45	; 0x2d
   19bfe:	5e a5       	ldd	r21, Y+46	; 0x2e
   19c00:	6f a5       	ldd	r22, Y+47	; 0x2f
   19c02:	78 a9       	ldd	r23, Y+48	; 0x30
   19c04:	45 2b       	or	r20, r21
   19c06:	46 2b       	or	r20, r22
   19c08:	47 2b       	or	r20, r23
   19c0a:	c9 f4       	brne	.+50     	; 0x19c3e <lif_check_volume+0x132>
   19c0c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   19c10:	80 ff       	sbrs	r24, 0
   19c12:	13 c0       	rjmp	.+38     	; 0x19c3a <lif_check_volume+0x12e>
   19c14:	1f 92       	push	r1
   19c16:	1f 92       	push	r1
   19c18:	1f 92       	push	r1
   19c1a:	1f 92       	push	r1
   19c1c:	8f e0       	ldi	r24, 0x0F	; 15
   19c1e:	9f e3       	ldi	r25, 0x3F	; 63
   19c20:	1f 92       	push	r1
   19c22:	9f 93       	push	r25
   19c24:	8f 93       	push	r24
   19c26:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19c2a:	8d b7       	in	r24, 0x3d	; 61
   19c2c:	9e b7       	in	r25, 0x3e	; 62
   19c2e:	07 96       	adiw	r24, 0x07	; 7
   19c30:	0f b6       	in	r0, 0x3f	; 63
   19c32:	f8 94       	cli
   19c34:	9e bf       	out	0x3e, r25	; 62
   19c36:	0f be       	out	0x3f, r0	; 63
   19c38:	8d bf       	out	0x3d, r24	; 61
   19c3a:	80 e0       	ldi	r24, 0x00	; 0
   19c3c:	90 e0       	ldi	r25, 0x00	; 0
   19c3e:	4d a9       	ldd	r20, Y+53	; 0x35
   19c40:	5e a9       	ldd	r21, Y+54	; 0x36
   19c42:	6f a9       	ldd	r22, Y+55	; 0x37
   19c44:	78 ad       	ldd	r23, Y+56	; 0x38
   19c46:	45 2b       	or	r20, r21
   19c48:	46 2b       	or	r20, r22
   19c4a:	47 2b       	or	r20, r23
   19c4c:	81 f4       	brne	.+32     	; 0x19c6e <lif_check_volume+0x162>
   19c4e:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   19c52:	80 ff       	sbrs	r24, 0
   19c54:	0a c0       	rjmp	.+20     	; 0x19c6a <lif_check_volume+0x15e>
   19c56:	80 ee       	ldi	r24, 0xE0	; 224
   19c58:	9e e3       	ldi	r25, 0x3E	; 62
   19c5a:	1f 92       	push	r1
   19c5c:	9f 93       	push	r25
   19c5e:	8f 93       	push	r24
   19c60:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19c64:	0f 90       	pop	r0
   19c66:	0f 90       	pop	r0
   19c68:	0f 90       	pop	r0
   19c6a:	80 e0       	ldi	r24, 0x00	; 0
   19c6c:	90 e0       	ldi	r25, 0x00	; 0
   19c6e:	0d a5       	ldd	r16, Y+45	; 0x2d
   19c70:	1e a5       	ldd	r17, Y+46	; 0x2e
   19c72:	2f a5       	ldd	r18, Y+47	; 0x2f
   19c74:	38 a9       	ldd	r19, Y+48	; 0x30
   19c76:	4d a9       	ldd	r20, Y+53	; 0x35
   19c78:	5e a9       	ldd	r21, Y+54	; 0x36
   19c7a:	6f a9       	ldd	r22, Y+55	; 0x37
   19c7c:	78 ad       	ldd	r23, Y+56	; 0x38
   19c7e:	40 0f       	add	r20, r16
   19c80:	51 1f       	adc	r21, r17
   19c82:	62 1f       	adc	r22, r18
   19c84:	73 1f       	adc	r23, r19
   19c86:	0c 81       	ldd	r16, Y+4	; 0x04
   19c88:	1d 81       	ldd	r17, Y+5	; 0x05
   19c8a:	2e 81       	ldd	r18, Y+6	; 0x06
   19c8c:	3f 81       	ldd	r19, Y+7	; 0x07
   19c8e:	04 17       	cp	r16, r20
   19c90:	15 07       	cpc	r17, r21
   19c92:	26 07       	cpc	r18, r22
   19c94:	37 07       	cpc	r19, r23
   19c96:	80 f4       	brcc	.+32     	; 0x19cb8 <lif_check_volume+0x1ac>
   19c98:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   19c9c:	80 ff       	sbrs	r24, 0
   19c9e:	0a c0       	rjmp	.+20     	; 0x19cb4 <lif_check_volume+0x1a8>
   19ca0:	84 eb       	ldi	r24, 0xB4	; 180
   19ca2:	9e e3       	ldi	r25, 0x3E	; 62
   19ca4:	1f 92       	push	r1
   19ca6:	9f 93       	push	r25
   19ca8:	8f 93       	push	r24
   19caa:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19cae:	0f 90       	pop	r0
   19cb0:	0f 90       	pop	r0
   19cb2:	0f 90       	pop	r0
   19cb4:	80 e0       	ldi	r24, 0x00	; 0
   19cb6:	90 e0       	ldi	r25, 0x00	; 0
   19cb8:	df 91       	pop	r29
   19cba:	cf 91       	pop	r28
   19cbc:	1f 91       	pop	r17
   19cbe:	0f 91       	pop	r16
   19cc0:	08 95       	ret

00019cc2 <lif_check_dir>:
   19cc2:	a4 e0       	ldi	r26, 0x04	; 4
   19cc4:	b0 e0       	ldi	r27, 0x00	; 0
   19cc6:	e7 e6       	ldi	r30, 0x67	; 103
   19cc8:	fe ec       	ldi	r31, 0xCE	; 206
   19cca:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__prologue_saves__>
   19cce:	6c 01       	movw	r12, r24
   19cd0:	2a e5       	ldi	r18, 0x5A	; 90
   19cd2:	c2 0e       	add	r12, r18
   19cd4:	d1 1c       	adc	r13, r1
   19cd6:	f6 01       	movw	r30, r12
   19cd8:	20 81       	ld	r18, Z
   19cda:	31 81       	ldd	r19, Z+1	; 0x01
   19cdc:	21 50       	subi	r18, 0x01	; 1
   19cde:	31 09       	sbc	r19, r1
   19ce0:	2e 3f       	cpi	r18, 0xFE	; 254
   19ce2:	3f 4f       	sbci	r19, 0xFF	; 255
   19ce4:	08 f0       	brcs	.+2      	; 0x19ce8 <lif_check_dir+0x26>
   19ce6:	98 c1       	rjmp	.+816    	; 0x1a018 <lif_check_dir+0x356>
   19ce8:	9c 83       	std	Y+4, r25	; 0x04
   19cea:	8b 83       	std	Y+3, r24	; 0x03
   19cec:	8c 01       	movw	r16, r24
   19cee:	01 5b       	subi	r16, 0xB1	; 177
   19cf0:	1f 4f       	sbci	r17, 0xFF	; 255
   19cf2:	c8 01       	movw	r24, r16
   19cf4:	0d da       	rcall	.-3046   	; 0x19110 <lif_checkname>
   19cf6:	89 2b       	or	r24, r25
   19cf8:	99 f4       	brne	.+38     	; 0x19d20 <lif_check_dir+0x5e>
   19cfa:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   19cfe:	80 ff       	sbrs	r24, 0
   19d00:	12 c0       	rjmp	.+36     	; 0x19d26 <lif_check_dir+0x64>
   19d02:	1f 93       	push	r17
   19d04:	0f 93       	push	r16
   19d06:	83 e9       	ldi	r24, 0x93	; 147
   19d08:	9e e3       	ldi	r25, 0x3E	; 62
   19d0a:	1f 92       	push	r1
   19d0c:	9f 93       	push	r25
   19d0e:	8f 93       	push	r24
   19d10:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19d14:	0f 90       	pop	r0
   19d16:	0f 90       	pop	r0
   19d18:	0f 90       	pop	r0
   19d1a:	0f 90       	pop	r0
   19d1c:	0f 90       	pop	r0
   19d1e:	03 c0       	rjmp	.+6      	; 0x19d26 <lif_check_dir+0x64>
   19d20:	ee 24       	eor	r14, r14
   19d22:	e3 94       	inc	r14
   19d24:	01 c0       	rjmp	.+2      	; 0x19d28 <lif_check_dir+0x66>
   19d26:	e1 2c       	mov	r14, r1
   19d28:	f1 2c       	mov	r15, r1
   19d2a:	eb 81       	ldd	r30, Y+3	; 0x03
   19d2c:	fc 81       	ldd	r31, Y+4	; 0x04
   19d2e:	84 85       	ldd	r24, Z+12	; 0x0c
   19d30:	95 85       	ldd	r25, Z+13	; 0x0d
   19d32:	a6 85       	ldd	r26, Z+14	; 0x0e
   19d34:	b7 85       	ldd	r27, Z+15	; 0x0f
   19d36:	00 97       	sbiw	r24, 0x00	; 0
   19d38:	a1 05       	cpc	r26, r1
   19d3a:	b1 05       	cpc	r27, r1
   19d3c:	39 f1       	breq	.+78     	; 0x19d8c <lif_check_dir+0xca>
   19d3e:	e4 5a       	subi	r30, 0xA4	; 164
   19d40:	ff 4f       	sbci	r31, 0xFF	; 255
   19d42:	40 81       	ld	r20, Z
   19d44:	51 81       	ldd	r21, Z+1	; 0x01
   19d46:	62 81       	ldd	r22, Z+2	; 0x02
   19d48:	73 81       	ldd	r23, Z+3	; 0x03
   19d4a:	48 17       	cp	r20, r24
   19d4c:	59 07       	cpc	r21, r25
   19d4e:	6a 07       	cpc	r22, r26
   19d50:	7b 07       	cpc	r23, r27
   19d52:	e0 f4       	brcc	.+56     	; 0x19d8c <lif_check_dir+0xca>
   19d54:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   19d58:	20 ff       	sbrs	r18, 0
   19d5a:	16 c0       	rjmp	.+44     	; 0x19d88 <lif_check_dir+0xc6>
   19d5c:	bf 93       	push	r27
   19d5e:	af 93       	push	r26
   19d60:	9f 93       	push	r25
   19d62:	8f 93       	push	r24
   19d64:	7f 93       	push	r23
   19d66:	6f 93       	push	r22
   19d68:	5f 93       	push	r21
   19d6a:	4f 93       	push	r20
   19d6c:	1f 93       	push	r17
   19d6e:	0f 93       	push	r16
   19d70:	8f e4       	ldi	r24, 0x4F	; 79
   19d72:	9e e3       	ldi	r25, 0x3E	; 62
   19d74:	1f 92       	push	r1
   19d76:	9f 93       	push	r25
   19d78:	8f 93       	push	r24
   19d7a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19d7e:	0f b6       	in	r0, 0x3f	; 63
   19d80:	f8 94       	cli
   19d82:	de bf       	out	0x3e, r29	; 62
   19d84:	0f be       	out	0x3f, r0	; 63
   19d86:	cd bf       	out	0x3d, r28	; 61
   19d88:	e1 2c       	mov	r14, r1
   19d8a:	f1 2c       	mov	r15, r1
   19d8c:	eb 81       	ldd	r30, Y+3	; 0x03
   19d8e:	fc 81       	ldd	r31, Y+4	; 0x04
   19d90:	44 81       	ldd	r20, Z+4	; 0x04
   19d92:	55 81       	ldd	r21, Z+5	; 0x05
   19d94:	66 81       	ldd	r22, Z+6	; 0x06
   19d96:	77 81       	ldd	r23, Z+7	; 0x07
   19d98:	41 15       	cp	r20, r1
   19d9a:	51 05       	cpc	r21, r1
   19d9c:	61 05       	cpc	r22, r1
   19d9e:	71 05       	cpc	r23, r1
   19da0:	99 f1       	breq	.+102    	; 0x19e08 <lif_check_dir+0x146>
   19da2:	e4 5a       	subi	r30, 0xA4	; 164
   19da4:	ff 4f       	sbci	r31, 0xFF	; 255
   19da6:	80 80       	ld	r8, Z
   19da8:	91 80       	ldd	r9, Z+1	; 0x01
   19daa:	a2 80       	ldd	r10, Z+2	; 0x02
   19dac:	b3 80       	ldd	r11, Z+3	; 0x03
   19dae:	eb 81       	ldd	r30, Y+3	; 0x03
   19db0:	fc 81       	ldd	r31, Y+4	; 0x04
   19db2:	e0 5a       	subi	r30, 0xA0	; 160
   19db4:	ff 4f       	sbci	r31, 0xFF	; 255
   19db6:	80 81       	ld	r24, Z
   19db8:	91 81       	ldd	r25, Z+1	; 0x01
   19dba:	a2 81       	ldd	r26, Z+2	; 0x02
   19dbc:	b3 81       	ldd	r27, Z+3	; 0x03
   19dbe:	88 0d       	add	r24, r8
   19dc0:	99 1d       	adc	r25, r9
   19dc2:	aa 1d       	adc	r26, r10
   19dc4:	bb 1d       	adc	r27, r11
   19dc6:	48 17       	cp	r20, r24
   19dc8:	59 07       	cpc	r21, r25
   19dca:	6a 07       	cpc	r22, r26
   19dcc:	7b 07       	cpc	r23, r27
   19dce:	e0 f4       	brcc	.+56     	; 0x19e08 <lif_check_dir+0x146>
   19dd0:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   19dd4:	20 ff       	sbrs	r18, 0
   19dd6:	16 c0       	rjmp	.+44     	; 0x19e04 <lif_check_dir+0x142>
   19dd8:	7f 93       	push	r23
   19dda:	6f 93       	push	r22
   19ddc:	5f 93       	push	r21
   19dde:	4f 93       	push	r20
   19de0:	bf 93       	push	r27
   19de2:	af 93       	push	r26
   19de4:	9f 93       	push	r25
   19de6:	8f 93       	push	r24
   19de8:	1f 93       	push	r17
   19dea:	0f 93       	push	r16
   19dec:	8e e0       	ldi	r24, 0x0E	; 14
   19dee:	9e e3       	ldi	r25, 0x3E	; 62
   19df0:	1f 92       	push	r1
   19df2:	9f 93       	push	r25
   19df4:	8f 93       	push	r24
   19df6:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19dfa:	0f b6       	in	r0, 0x3f	; 63
   19dfc:	f8 94       	cli
   19dfe:	de bf       	out	0x3e, r29	; 62
   19e00:	0f be       	out	0x3f, r0	; 63
   19e02:	cd bf       	out	0x3d, r28	; 61
   19e04:	e1 2c       	mov	r14, r1
   19e06:	f1 2c       	mov	r15, r1
   19e08:	eb 81       	ldd	r30, Y+3	; 0x03
   19e0a:	fc 81       	ldd	r31, Y+4	; 0x04
   19e0c:	e6 59       	subi	r30, 0x96	; 150
   19e0e:	ff 4f       	sbci	r31, 0xFF	; 255
   19e10:	80 81       	ld	r24, Z
   19e12:	91 81       	ldd	r25, Z+1	; 0x01
   19e14:	81 30       	cpi	r24, 0x01	; 1
   19e16:	30 e8       	ldi	r19, 0x80	; 128
   19e18:	93 07       	cpc	r25, r19
   19e1a:	b1 f0       	breq	.+44     	; 0x19e48 <lif_check_dir+0x186>
   19e1c:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   19e20:	20 ff       	sbrs	r18, 0
   19e22:	10 c0       	rjmp	.+32     	; 0x19e44 <lif_check_dir+0x182>
   19e24:	9f 93       	push	r25
   19e26:	8f 93       	push	r24
   19e28:	1f 93       	push	r17
   19e2a:	0f 93       	push	r16
   19e2c:	80 ee       	ldi	r24, 0xE0	; 224
   19e2e:	9d e3       	ldi	r25, 0x3D	; 61
   19e30:	1f 92       	push	r1
   19e32:	9f 93       	push	r25
   19e34:	8f 93       	push	r24
   19e36:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19e3a:	0f b6       	in	r0, 0x3f	; 63
   19e3c:	f8 94       	cli
   19e3e:	de bf       	out	0x3e, r29	; 62
   19e40:	0f be       	out	0x3f, r0	; 63
   19e42:	cd bf       	out	0x3d, r28	; 61
   19e44:	e1 2c       	mov	r14, r1
   19e46:	f1 2c       	mov	r15, r1
   19e48:	f6 01       	movw	r30, r12
   19e4a:	80 81       	ld	r24, Z
   19e4c:	91 81       	ldd	r25, Z+1	; 0x01
   19e4e:	8c 7f       	andi	r24, 0xFC	; 252
   19e50:	80 31       	cpi	r24, 0x10	; 16
   19e52:	90 4e       	sbci	r25, 0xE0	; 224
   19e54:	09 f0       	breq	.+2      	; 0x19e58 <lif_check_dir+0x196>
   19e56:	b3 c0       	rjmp	.+358    	; 0x19fbe <lif_check_dir+0x2fc>
   19e58:	cb 80       	ldd	r12, Y+3	; 0x03
   19e5a:	dc 80       	ldd	r13, Y+4	; 0x04
   19e5c:	2c e6       	ldi	r18, 0x6C	; 108
   19e5e:	c2 0e       	add	r12, r18
   19e60:	d1 1c       	adc	r13, r1
   19e62:	f6 01       	movw	r30, r12
   19e64:	20 81       	ld	r18, Z
   19e66:	31 81       	ldd	r19, Z+1	; 0x01
   19e68:	21 15       	cp	r18, r1
   19e6a:	31 05       	cpc	r19, r1
   19e6c:	09 f4       	brne	.+2      	; 0x19e70 <lif_check_dir+0x1ae>
   19e6e:	a7 c0       	rjmp	.+334    	; 0x19fbe <lif_check_dir+0x2fc>
   19e70:	49 01       	movw	r8, r18
   19e72:	a1 2c       	mov	r10, r1
   19e74:	b1 2c       	mov	r11, r1
   19e76:	bb 27       	eor	r27, r27
   19e78:	ab 2d       	mov	r26, r11
   19e7a:	9a 2d       	mov	r25, r10
   19e7c:	89 2d       	mov	r24, r9
   19e7e:	33 27       	eor	r19, r19
   19e80:	2c 01       	movw	r4, r24
   19e82:	3d 01       	movw	r6, r26
   19e84:	21 15       	cp	r18, r1
   19e86:	31 05       	cpc	r19, r1
   19e88:	29 f0       	breq	.+10     	; 0x19e94 <lif_check_dir+0x1d2>
   19e8a:	ff ef       	ldi	r31, 0xFF	; 255
   19e8c:	4f 1a       	sub	r4, r31
   19e8e:	5f 0a       	sbc	r5, r31
   19e90:	6f 0a       	sbc	r6, r31
   19e92:	7f 0a       	sbc	r7, r31
   19e94:	2b 80       	ldd	r2, Y+3	; 0x03
   19e96:	3c 80       	ldd	r3, Y+4	; 0x04
   19e98:	40 e6       	ldi	r20, 0x60	; 96
   19e9a:	24 0e       	add	r2, r20
   19e9c:	31 1c       	adc	r3, r1
   19e9e:	f1 01       	movw	r30, r2
   19ea0:	40 81       	ld	r20, Z
   19ea2:	51 81       	ldd	r21, Z+1	; 0x01
   19ea4:	62 81       	ldd	r22, Z+2	; 0x02
   19ea6:	73 81       	ldd	r23, Z+3	; 0x03
   19ea8:	44 15       	cp	r20, r4
   19eaa:	55 05       	cpc	r21, r5
   19eac:	66 05       	cpc	r22, r6
   19eae:	77 05       	cpc	r23, r7
   19eb0:	28 f5       	brcc	.+74     	; 0x19efc <lif_check_dir+0x23a>
   19eb2:	e0 91 b0 01 	lds	r30, 0x01B0	; 0x8001b0 <debuglevel>
   19eb6:	e0 ff       	sbrs	r30, 0
   19eb8:	1f c0       	rjmp	.+62     	; 0x19ef8 <lif_check_dir+0x236>
   19eba:	23 2b       	or	r18, r19
   19ebc:	19 f0       	breq	.+6      	; 0x19ec4 <lif_check_dir+0x202>
   19ebe:	01 96       	adiw	r24, 0x01	; 1
   19ec0:	a1 1d       	adc	r26, r1
   19ec2:	b1 1d       	adc	r27, r1
   19ec4:	7f 93       	push	r23
   19ec6:	6f 93       	push	r22
   19ec8:	5f 93       	push	r21
   19eca:	4f 93       	push	r20
   19ecc:	bf 93       	push	r27
   19ece:	af 93       	push	r26
   19ed0:	9f 93       	push	r25
   19ed2:	8f 93       	push	r24
   19ed4:	1f 92       	push	r1
   19ed6:	1f 92       	push	r1
   19ed8:	9f 92       	push	r9
   19eda:	8f 92       	push	r8
   19edc:	1f 93       	push	r17
   19ede:	0f 93       	push	r16
   19ee0:	85 e9       	ldi	r24, 0x95	; 149
   19ee2:	9d e3       	ldi	r25, 0x3D	; 61
   19ee4:	1f 92       	push	r1
   19ee6:	9f 93       	push	r25
   19ee8:	8f 93       	push	r24
   19eea:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19eee:	0f b6       	in	r0, 0x3f	; 63
   19ef0:	f8 94       	cli
   19ef2:	de bf       	out	0x3e, r29	; 62
   19ef4:	0f be       	out	0x3f, r0	; 63
   19ef6:	cd bf       	out	0x3d, r28	; 61
   19ef8:	e1 2c       	mov	r14, r1
   19efa:	f1 2c       	mov	r15, r1
   19efc:	f6 01       	movw	r30, r12
   19efe:	20 81       	ld	r18, Z
   19f00:	31 81       	ldd	r19, Z+1	; 0x01
   19f02:	49 01       	movw	r8, r18
   19f04:	a1 2c       	mov	r10, r1
   19f06:	b1 2c       	mov	r11, r1
   19f08:	bb 27       	eor	r27, r27
   19f0a:	ab 2d       	mov	r26, r11
   19f0c:	9a 2d       	mov	r25, r10
   19f0e:	89 2d       	mov	r24, r9
   19f10:	a9 01       	movw	r20, r18
   19f12:	55 27       	eor	r21, r21
   19f14:	5a 83       	std	Y+2, r21	; 0x02
   19f16:	49 83       	std	Y+1, r20	; 0x01
   19f18:	2c 01       	movw	r4, r24
   19f1a:	3d 01       	movw	r6, r26
   19f1c:	45 2b       	or	r20, r21
   19f1e:	29 f0       	breq	.+10     	; 0x19f2a <lif_check_dir+0x268>
   19f20:	5f ef       	ldi	r21, 0xFF	; 255
   19f22:	45 1a       	sub	r4, r21
   19f24:	55 0a       	sbc	r5, r21
   19f26:	65 0a       	sbc	r6, r21
   19f28:	75 0a       	sbc	r7, r21
   19f2a:	f1 01       	movw	r30, r2
   19f2c:	40 81       	ld	r20, Z
   19f2e:	51 81       	ldd	r21, Z+1	; 0x01
   19f30:	62 81       	ldd	r22, Z+2	; 0x02
   19f32:	73 81       	ldd	r23, Z+3	; 0x03
   19f34:	44 16       	cp	r4, r20
   19f36:	55 06       	cpc	r5, r21
   19f38:	66 06       	cpc	r6, r22
   19f3a:	77 06       	cpc	r7, r23
   19f3c:	38 f5       	brcc	.+78     	; 0x19f8c <lif_check_dir+0x2ca>
   19f3e:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   19f42:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   19f46:	32 ff       	sbrs	r19, 2
   19f48:	21 c0       	rjmp	.+66     	; 0x19f8c <lif_check_dir+0x2ca>
   19f4a:	29 81       	ldd	r18, Y+1	; 0x01
   19f4c:	3a 81       	ldd	r19, Y+2	; 0x02
   19f4e:	23 2b       	or	r18, r19
   19f50:	19 f0       	breq	.+6      	; 0x19f58 <lif_check_dir+0x296>
   19f52:	01 96       	adiw	r24, 0x01	; 1
   19f54:	a1 1d       	adc	r26, r1
   19f56:	b1 1d       	adc	r27, r1
   19f58:	7f 93       	push	r23
   19f5a:	6f 93       	push	r22
   19f5c:	5f 93       	push	r21
   19f5e:	4f 93       	push	r20
   19f60:	bf 93       	push	r27
   19f62:	af 93       	push	r26
   19f64:	9f 93       	push	r25
   19f66:	8f 93       	push	r24
   19f68:	1f 92       	push	r1
   19f6a:	1f 92       	push	r1
   19f6c:	9f 92       	push	r9
   19f6e:	8f 92       	push	r8
   19f70:	1f 93       	push	r17
   19f72:	0f 93       	push	r16
   19f74:	8a e4       	ldi	r24, 0x4A	; 74
   19f76:	9d e3       	ldi	r25, 0x3D	; 61
   19f78:	1f 92       	push	r1
   19f7a:	9f 93       	push	r25
   19f7c:	8f 93       	push	r24
   19f7e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19f82:	0f b6       	in	r0, 0x3f	; 63
   19f84:	f8 94       	cli
   19f86:	de bf       	out	0x3e, r29	; 62
   19f88:	0f be       	out	0x3f, r0	; 63
   19f8a:	cd bf       	out	0x3d, r28	; 61
   19f8c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   19f90:	80 ff       	sbrs	r24, 0
   19f92:	15 c0       	rjmp	.+42     	; 0x19fbe <lif_check_dir+0x2fc>
   19f94:	f6 01       	movw	r30, r12
   19f96:	80 81       	ld	r24, Z
   19f98:	91 81       	ldd	r25, Z+1	; 0x01
   19f9a:	89 2b       	or	r24, r25
   19f9c:	81 f4       	brne	.+32     	; 0x19fbe <lif_check_dir+0x2fc>
   19f9e:	1f 93       	push	r17
   19fa0:	0f 93       	push	r16
   19fa2:	8f e1       	ldi	r24, 0x1F	; 31
   19fa4:	9d e3       	ldi	r25, 0x3D	; 61
   19fa6:	1f 92       	push	r1
   19fa8:	9f 93       	push	r25
   19faa:	8f 93       	push	r24
   19fac:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   19fb0:	0f 90       	pop	r0
   19fb2:	0f 90       	pop	r0
   19fb4:	0f 90       	pop	r0
   19fb6:	0f 90       	pop	r0
   19fb8:	0f 90       	pop	r0
   19fba:	e1 2c       	mov	r14, r1
   19fbc:	f1 2c       	mov	r15, r1
   19fbe:	eb 81       	ldd	r30, Y+3	; 0x03
   19fc0:	fc 81       	ldd	r31, Y+4	; 0x04
   19fc2:	e2 59       	subi	r30, 0x92	; 146
   19fc4:	ff 4f       	sbci	r31, 0xFF	; 255
   19fc6:	20 81       	ld	r18, Z
   19fc8:	31 81       	ldd	r19, Z+1	; 0x01
   19fca:	21 15       	cp	r18, r1
   19fcc:	f1 e0       	ldi	r31, 0x01	; 1
   19fce:	3f 07       	cpc	r19, r31
   19fd0:	31 f1       	breq	.+76     	; 0x1a01e <lif_check_dir+0x35c>
   19fd2:	40 91 b0 01 	lds	r20, 0x01B0	; 0x8001b0 <debuglevel>
   19fd6:	50 91 b1 01 	lds	r21, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   19fda:	ca 01       	movw	r24, r20
   19fdc:	81 70       	andi	r24, 0x01	; 1
   19fde:	99 27       	eor	r25, r25
   19fe0:	40 ff       	sbrs	r20, 0
   19fe2:	1e c0       	rjmp	.+60     	; 0x1a020 <lif_check_dir+0x35e>
   19fe4:	c9 01       	movw	r24, r18
   19fe6:	1f 92       	push	r1
   19fe8:	1f 92       	push	r1
   19fea:	9f 93       	push	r25
   19fec:	2f 93       	push	r18
   19fee:	eb 81       	ldd	r30, Y+3	; 0x03
   19ff0:	fc 81       	ldd	r31, Y+4	; 0x04
   19ff2:	81 81       	ldd	r24, Z+1	; 0x01
   19ff4:	8f 93       	push	r24
   19ff6:	80 81       	ld	r24, Z
   19ff8:	8f 93       	push	r24
   19ffa:	83 ef       	ldi	r24, 0xF3	; 243
   19ffc:	9c e3       	ldi	r25, 0x3C	; 60
   19ffe:	1f 92       	push	r1
   1a000:	9f 93       	push	r25
   1a002:	8f 93       	push	r24
   1a004:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1a008:	0f b6       	in	r0, 0x3f	; 63
   1a00a:	f8 94       	cli
   1a00c:	de bf       	out	0x3e, r29	; 62
   1a00e:	0f be       	out	0x3f, r0	; 63
   1a010:	cd bf       	out	0x3d, r28	; 61
   1a012:	80 e0       	ldi	r24, 0x00	; 0
   1a014:	90 e0       	ldi	r25, 0x00	; 0
   1a016:	04 c0       	rjmp	.+8      	; 0x1a020 <lif_check_dir+0x35e>
   1a018:	81 e0       	ldi	r24, 0x01	; 1
   1a01a:	90 e0       	ldi	r25, 0x00	; 0
   1a01c:	01 c0       	rjmp	.+2      	; 0x1a020 <lif_check_dir+0x35e>
   1a01e:	c7 01       	movw	r24, r14
   1a020:	24 96       	adiw	r28, 0x04	; 4
   1a022:	e2 e1       	ldi	r30, 0x12	; 18
   1a024:	0c 94 dd e8 	jmp	0x1d1ba	; 0x1d1ba <__epilogue_restores__>

0001a028 <lif_close_volume>:
   1a028:	cf 93       	push	r28
   1a02a:	df 93       	push	r29
   1a02c:	00 97       	sbiw	r24, 0x00	; 0
   1a02e:	f9 f0       	breq	.+62     	; 0x1a06e <lif_close_volume+0x46>
   1a030:	ec 01       	movw	r28, r24
   1a032:	8a 81       	ldd	r24, Y+2	; 0x02
   1a034:	9b 81       	ldd	r25, Y+3	; 0x03
   1a036:	00 97       	sbiw	r24, 0x00	; 0
   1a038:	79 f0       	breq	.+30     	; 0x1a058 <lif_close_volume+0x30>
   1a03a:	22 e0       	ldi	r18, 0x02	; 2
   1a03c:	30 e0       	ldi	r19, 0x00	; 0
   1a03e:	40 e0       	ldi	r20, 0x00	; 0
   1a040:	50 e0       	ldi	r21, 0x00	; 0
   1a042:	ba 01       	movw	r22, r20
   1a044:	0e 94 94 7e 	call	0xfd28	; 0xfd28 <fseek>
   1a048:	8a 81       	ldd	r24, Y+2	; 0x02
   1a04a:	9b 81       	ldd	r25, Y+3	; 0x03
   1a04c:	0e 94 7c 80 	call	0x100f8	; 0x100f8 <fclose>
   1a050:	1b 82       	std	Y+3, r1	; 0x03
   1a052:	1a 82       	std	Y+2, r1	; 0x02
   1a054:	0e 94 77 7f 	call	0xfeee	; 0xfeee <sync>
   1a058:	88 81       	ld	r24, Y
   1a05a:	99 81       	ldd	r25, Y+1	; 0x01
   1a05c:	00 97       	sbiw	r24, 0x00	; 0
   1a05e:	11 f0       	breq	.+4      	; 0x1a064 <lif_close_volume+0x3c>
   1a060:	0e 94 c7 c6 	call	0x18d8e	; 0x18d8e <lif_free>
   1a064:	ce 01       	movw	r24, r28
   1a066:	b8 db       	rcall	.-2192   	; 0x197d8 <lif_vol_clear>
   1a068:	ce 01       	movw	r24, r28
   1a06a:	0e 94 c7 c6 	call	0x18d8e	; 0x18d8e <lif_free>
   1a06e:	df 91       	pop	r29
   1a070:	cf 91       	pop	r28
   1a072:	08 95       	ret

0001a074 <lif_checkdirindex>:
   1a074:	a0 e0       	ldi	r26, 0x00	; 0
   1a076:	b0 e0       	ldi	r27, 0x00	; 0
   1a078:	e0 e4       	ldi	r30, 0x40	; 64
   1a07a:	f0 ed       	ldi	r31, 0xD0	; 208
   1a07c:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__prologue_saves__+0x14>
   1a080:	77 fd       	sbrc	r23, 7
   1a082:	26 c0       	rjmp	.+76     	; 0x1a0d0 <lif_checkdirindex+0x5c>
   1a084:	8b 01       	movw	r16, r22
   1a086:	07 2e       	mov	r0, r23
   1a088:	00 0c       	add	r0, r0
   1a08a:	22 0b       	sbc	r18, r18
   1a08c:	33 0b       	sbc	r19, r19
   1a08e:	45 e0       	ldi	r20, 0x05	; 5
   1a090:	00 0f       	add	r16, r16
   1a092:	11 1f       	adc	r17, r17
   1a094:	22 1f       	adc	r18, r18
   1a096:	33 1f       	adc	r19, r19
   1a098:	4a 95       	dec	r20
   1a09a:	d1 f7       	brne	.-12     	; 0x1a090 <lif_checkdirindex+0x1c>
   1a09c:	c1 2e       	mov	r12, r17
   1a09e:	d2 2e       	mov	r13, r18
   1a0a0:	e3 2e       	mov	r14, r19
   1a0a2:	ff 24       	eor	r15, r15
   1a0a4:	11 27       	eor	r17, r17
   1a0a6:	22 27       	eor	r18, r18
   1a0a8:	33 27       	eor	r19, r19
   1a0aa:	01 2b       	or	r16, r17
   1a0ac:	02 2b       	or	r16, r18
   1a0ae:	03 2b       	or	r16, r19
   1a0b0:	29 f0       	breq	.+10     	; 0x1a0bc <lif_checkdirindex+0x48>
   1a0b2:	2f ef       	ldi	r18, 0xFF	; 255
   1a0b4:	c2 1a       	sub	r12, r18
   1a0b6:	d2 0a       	sbc	r13, r18
   1a0b8:	e2 0a       	sbc	r14, r18
   1a0ba:	f2 0a       	sbc	r15, r18
   1a0bc:	fc 01       	movw	r30, r24
   1a0be:	05 a9       	ldd	r16, Z+53	; 0x35
   1a0c0:	16 a9       	ldd	r17, Z+54	; 0x36
   1a0c2:	27 a9       	ldd	r18, Z+55	; 0x37
   1a0c4:	30 ad       	ldd	r19, Z+56	; 0x38
   1a0c6:	0c 15       	cp	r16, r12
   1a0c8:	1d 05       	cpc	r17, r13
   1a0ca:	2e 05       	cpc	r18, r14
   1a0cc:	3f 05       	cpc	r19, r15
   1a0ce:	30 f5       	brcc	.+76     	; 0x1a11c <lif_checkdirindex+0xa8>
   1a0d0:	ec 01       	movw	r28, r24
   1a0d2:	7f 93       	push	r23
   1a0d4:	6f 93       	push	r22
   1a0d6:	89 81       	ldd	r24, Y+1	; 0x01
   1a0d8:	8f 93       	push	r24
   1a0da:	88 81       	ld	r24, Y
   1a0dc:	8f 93       	push	r24
   1a0de:	89 e8       	ldi	r24, 0x89	; 137
   1a0e0:	9c e3       	ldi	r25, 0x3C	; 60
   1a0e2:	1f 92       	push	r1
   1a0e4:	9f 93       	push	r25
   1a0e6:	8f 93       	push	r24
   1a0e8:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1a0ec:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   1a0f0:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1a0f4:	8d b7       	in	r24, 0x3d	; 61
   1a0f6:	9e b7       	in	r25, 0x3e	; 62
   1a0f8:	07 96       	adiw	r24, 0x07	; 7
   1a0fa:	0f b6       	in	r0, 0x3f	; 63
   1a0fc:	f8 94       	cli
   1a0fe:	9e bf       	out	0x3e, r25	; 62
   1a100:	0f be       	out	0x3f, r0	; 63
   1a102:	8d bf       	out	0x3d, r24	; 61
   1a104:	c9 01       	movw	r24, r18
   1a106:	88 27       	eor	r24, r24
   1a108:	94 70       	andi	r25, 0x04	; 4
   1a10a:	32 ff       	sbrs	r19, 2
   1a10c:	09 c0       	rjmp	.+18     	; 0x1a120 <lif_checkdirindex+0xac>
   1a10e:	6b e9       	ldi	r22, 0x9B	; 155
   1a110:	75 e1       	ldi	r23, 0x15	; 21
   1a112:	ce 01       	movw	r24, r28
   1a114:	68 db       	rcall	.-2352   	; 0x197e6 <lif_dump_vol>
   1a116:	80 e0       	ldi	r24, 0x00	; 0
   1a118:	90 e0       	ldi	r25, 0x00	; 0
   1a11a:	02 c0       	rjmp	.+4      	; 0x1a120 <lif_checkdirindex+0xac>
   1a11c:	81 e0       	ldi	r24, 0x01	; 1
   1a11e:	90 e0       	ldi	r25, 0x00	; 0
   1a120:	cd b7       	in	r28, 0x3d	; 61
   1a122:	de b7       	in	r29, 0x3e	; 62
   1a124:	e8 e0       	ldi	r30, 0x08	; 8
   1a126:	0c 94 e7 e8 	jmp	0x1d1ce	; 0x1d1ce <__epilogue_restores__+0x14>

0001a12a <lif_readdirindex>:
   1a12a:	a0 e2       	ldi	r26, 0x20	; 32
   1a12c:	b0 e0       	ldi	r27, 0x00	; 0
   1a12e:	eb e9       	ldi	r30, 0x9B	; 155
   1a130:	f0 ed       	ldi	r31, 0xD0	; 208
   1a132:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__prologue_saves__+0x14>
   1a136:	7c 01       	movw	r14, r24
   1a138:	6b 01       	movw	r12, r22
   1a13a:	9c df       	rcall	.-200    	; 0x1a074 <lif_checkdirindex>
   1a13c:	89 2b       	or	r24, r25
   1a13e:	19 f4       	brne	.+6      	; 0x1a146 <lif_readdirindex+0x1c>
   1a140:	00 e0       	ldi	r16, 0x00	; 0
   1a142:	10 e0       	ldi	r17, 0x00	; 0
   1a144:	56 c0       	rjmp	.+172    	; 0x1a1f2 <lif_readdirindex+0xc8>
   1a146:	f7 01       	movw	r30, r14
   1a148:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a14a:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a14c:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a14e:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a150:	44 27       	eor	r20, r20
   1a152:	58 2f       	mov	r21, r24
   1a154:	69 2f       	mov	r22, r25
   1a156:	7a 2f       	mov	r23, r26
   1a158:	c6 01       	movw	r24, r12
   1a15a:	0d 2c       	mov	r0, r13
   1a15c:	00 0c       	add	r0, r0
   1a15e:	aa 0b       	sbc	r26, r26
   1a160:	bb 0b       	sbc	r27, r27
   1a162:	35 e0       	ldi	r19, 0x05	; 5
   1a164:	88 0f       	add	r24, r24
   1a166:	99 1f       	adc	r25, r25
   1a168:	aa 1f       	adc	r26, r26
   1a16a:	bb 1f       	adc	r27, r27
   1a16c:	3a 95       	dec	r19
   1a16e:	d1 f7       	brne	.-12     	; 0x1a164 <lif_readdirindex+0x3a>
   1a170:	9a 01       	movw	r18, r20
   1a172:	ab 01       	movw	r20, r22
   1a174:	28 0f       	add	r18, r24
   1a176:	39 1f       	adc	r19, r25
   1a178:	4a 1f       	adc	r20, r26
   1a17a:	5b 1f       	adc	r21, r27
   1a17c:	00 e2       	ldi	r16, 0x20	; 32
   1a17e:	10 e0       	ldi	r17, 0x00	; 0
   1a180:	be 01       	movw	r22, r28
   1a182:	6f 5f       	subi	r22, 0xFF	; 255
   1a184:	7f 4f       	sbci	r23, 0xFF	; 255
   1a186:	c7 01       	movw	r24, r14
   1a188:	0e 94 7c c7 	call	0x18ef8	; 0x18ef8 <lif_read>
   1a18c:	60 32       	cpi	r22, 0x20	; 32
   1a18e:	71 05       	cpc	r23, r1
   1a190:	81 05       	cpc	r24, r1
   1a192:	91 05       	cpc	r25, r1
   1a194:	a8 f2       	brcs	.-86     	; 0x1a140 <lif_readdirindex+0x16>
   1a196:	b7 01       	movw	r22, r14
   1a198:	ce 01       	movw	r24, r28
   1a19a:	01 96       	adiw	r24, 0x01	; 1
   1a19c:	c1 d9       	rcall	.-3198   	; 0x19520 <lif_str2dir>
   1a19e:	f7 01       	movw	r30, r14
   1a1a0:	e6 5a       	subi	r30, 0xA6	; 166
   1a1a2:	ff 4f       	sbci	r31, 0xFF	; 255
   1a1a4:	80 81       	ld	r24, Z
   1a1a6:	91 81       	ldd	r25, Z+1	; 0x01
   1a1a8:	01 96       	adiw	r24, 0x01	; 1
   1a1aa:	19 f4       	brne	.+6      	; 0x1a1b2 <lif_readdirindex+0x88>
   1a1ac:	f7 01       	movw	r30, r14
   1a1ae:	d3 a2       	std	Z+35, r13	; 0x23
   1a1b0:	c2 a2       	std	Z+34, r12	; 0x22
   1a1b2:	c7 01       	movw	r24, r14
   1a1b4:	86 dd       	rcall	.-1268   	; 0x19cc2 <lif_check_dir>
   1a1b6:	8c 01       	movw	r16, r24
   1a1b8:	89 2b       	or	r24, r25
   1a1ba:	c9 f4       	brne	.+50     	; 0x1a1ee <lif_readdirindex+0xc4>
   1a1bc:	df 92       	push	r13
   1a1be:	cf 92       	push	r12
   1a1c0:	89 e6       	ldi	r24, 0x69	; 105
   1a1c2:	9c e3       	ldi	r25, 0x3C	; 60
   1a1c4:	1f 92       	push	r1
   1a1c6:	9f 93       	push	r25
   1a1c8:	8f 93       	push	r24
   1a1ca:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1a1ce:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1a1d2:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1a1d6:	0f 90       	pop	r0
   1a1d8:	0f 90       	pop	r0
   1a1da:	0f 90       	pop	r0
   1a1dc:	0f 90       	pop	r0
   1a1de:	0f 90       	pop	r0
   1a1e0:	92 ff       	sbrs	r25, 2
   1a1e2:	ae cf       	rjmp	.-164    	; 0x1a140 <lif_readdirindex+0x16>
   1a1e4:	6c ea       	ldi	r22, 0xAC	; 172
   1a1e6:	75 e1       	ldi	r23, 0x15	; 21
   1a1e8:	c7 01       	movw	r24, r14
   1a1ea:	fd da       	rcall	.-2566   	; 0x197e6 <lif_dump_vol>
   1a1ec:	02 c0       	rjmp	.+4      	; 0x1a1f2 <lif_readdirindex+0xc8>
   1a1ee:	01 e0       	ldi	r16, 0x01	; 1
   1a1f0:	10 e0       	ldi	r17, 0x00	; 0
   1a1f2:	c8 01       	movw	r24, r16
   1a1f4:	a0 96       	adiw	r28, 0x20	; 32
   1a1f6:	e8 e0       	ldi	r30, 0x08	; 8
   1a1f8:	0c 94 e7 e8 	jmp	0x1d1ce	; 0x1d1ce <__epilogue_restores__+0x14>

0001a1fc <lif_writedirindex>:
   1a1fc:	a0 e2       	ldi	r26, 0x20	; 32
   1a1fe:	b0 e0       	ldi	r27, 0x00	; 0
   1a200:	e4 e0       	ldi	r30, 0x04	; 4
   1a202:	f1 ed       	ldi	r31, 0xD1	; 209
   1a204:	0c 94 c9 e8 	jmp	0x1d192	; 0x1d192 <__prologue_saves__+0x10>
   1a208:	5c 01       	movw	r10, r24
   1a20a:	6b 01       	movw	r12, r22
   1a20c:	5a dd       	rcall	.-1356   	; 0x19cc2 <lif_check_dir>
   1a20e:	7c 01       	movw	r14, r24
   1a210:	89 2b       	or	r24, r25
   1a212:	71 f4       	brne	.+28     	; 0x1a230 <lif_writedirindex+0x34>
   1a214:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1a218:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1a21c:	92 fd       	sbrc	r25, 2
   1a21e:	03 c0       	rjmp	.+6      	; 0x1a226 <lif_writedirindex+0x2a>
   1a220:	e1 2c       	mov	r14, r1
   1a222:	f1 2c       	mov	r15, r1
   1a224:	42 c0       	rjmp	.+132    	; 0x1a2aa <lif_writedirindex+0xae>
   1a226:	6d eb       	ldi	r22, 0xBD	; 189
   1a228:	75 e1       	ldi	r23, 0x15	; 21
   1a22a:	c5 01       	movw	r24, r10
   1a22c:	dc da       	rcall	.-2632   	; 0x197e6 <lif_dump_vol>
   1a22e:	3d c0       	rjmp	.+122    	; 0x1a2aa <lif_writedirindex+0xae>
   1a230:	b6 01       	movw	r22, r12
   1a232:	c5 01       	movw	r24, r10
   1a234:	1f df       	rcall	.-450    	; 0x1a074 <lif_checkdirindex>
   1a236:	89 2b       	or	r24, r25
   1a238:	99 f3       	breq	.-26     	; 0x1a220 <lif_writedirindex+0x24>
   1a23a:	f5 01       	movw	r30, r10
   1a23c:	e6 5a       	subi	r30, 0xA6	; 166
   1a23e:	ff 4f       	sbci	r31, 0xFF	; 255
   1a240:	80 81       	ld	r24, Z
   1a242:	91 81       	ldd	r25, Z+1	; 0x01
   1a244:	01 96       	adiw	r24, 0x01	; 1
   1a246:	19 f4       	brne	.+6      	; 0x1a24e <lif_writedirindex+0x52>
   1a248:	f5 01       	movw	r30, r10
   1a24a:	d3 a2       	std	Z+35, r13	; 0x23
   1a24c:	c2 a2       	std	Z+34, r12	; 0x22
   1a24e:	f5 01       	movw	r30, r10
   1a250:	85 a5       	ldd	r24, Z+45	; 0x2d
   1a252:	96 a5       	ldd	r25, Z+46	; 0x2e
   1a254:	a7 a5       	ldd	r26, Z+47	; 0x2f
   1a256:	b0 a9       	ldd	r27, Z+48	; 0x30
   1a258:	ba 2f       	mov	r27, r26
   1a25a:	a9 2f       	mov	r26, r25
   1a25c:	98 2f       	mov	r25, r24
   1a25e:	88 27       	eor	r24, r24
   1a260:	0d 2c       	mov	r0, r13
   1a262:	00 0c       	add	r0, r0
   1a264:	ee 08       	sbc	r14, r14
   1a266:	ff 08       	sbc	r15, r15
   1a268:	35 e0       	ldi	r19, 0x05	; 5
   1a26a:	cc 0c       	add	r12, r12
   1a26c:	dd 1c       	adc	r13, r13
   1a26e:	ee 1c       	adc	r14, r14
   1a270:	ff 1c       	adc	r15, r15
   1a272:	3a 95       	dec	r19
   1a274:	d1 f7       	brne	.-12     	; 0x1a26a <lif_writedirindex+0x6e>
   1a276:	c8 0e       	add	r12, r24
   1a278:	d9 1e       	adc	r13, r25
   1a27a:	ea 1e       	adc	r14, r26
   1a27c:	fb 1e       	adc	r15, r27
   1a27e:	be 01       	movw	r22, r28
   1a280:	6f 5f       	subi	r22, 0xFF	; 255
   1a282:	7f 4f       	sbci	r23, 0xFF	; 255
   1a284:	c5 01       	movw	r24, r10
   1a286:	db d8       	rcall	.-3658   	; 0x1943e <lif_dir2str>
   1a288:	00 e2       	ldi	r16, 0x20	; 32
   1a28a:	10 e0       	ldi	r17, 0x00	; 0
   1a28c:	a7 01       	movw	r20, r14
   1a28e:	96 01       	movw	r18, r12
   1a290:	be 01       	movw	r22, r28
   1a292:	6f 5f       	subi	r22, 0xFF	; 255
   1a294:	7f 4f       	sbci	r23, 0xFF	; 255
   1a296:	c5 01       	movw	r24, r10
   1a298:	0e 94 d5 c7 	call	0x18faa	; 0x18faa <lif_write>
   1a29c:	31 e0       	ldi	r19, 0x01	; 1
   1a29e:	20 e0       	ldi	r18, 0x00	; 0
   1a2a0:	80 97       	sbiw	r24, 0x20	; 32
   1a2a2:	0c f4       	brge	.+2      	; 0x1a2a6 <lif_writedirindex+0xaa>
   1a2a4:	30 e0       	ldi	r19, 0x00	; 0
   1a2a6:	e3 2e       	mov	r14, r19
   1a2a8:	f2 2e       	mov	r15, r18
   1a2aa:	c7 01       	movw	r24, r14
   1a2ac:	a0 96       	adiw	r28, 0x20	; 32
   1a2ae:	ea e0       	ldi	r30, 0x0A	; 10
   1a2b0:	0c 94 e5 e8 	jmp	0x1d1ca	; 0x1d1ca <__epilogue_restores__+0x10>

0001a2b4 <lif_writedirEOF>:
   1a2b4:	0f 93       	push	r16
   1a2b6:	1f 93       	push	r17
   1a2b8:	cf 93       	push	r28
   1a2ba:	df 93       	push	r29
   1a2bc:	ec 01       	movw	r28, r24
   1a2be:	8b 01       	movw	r16, r22
   1a2c0:	83 da       	rcall	.-2810   	; 0x197c8 <lif_dir_clear>
   1a2c2:	fe 01       	movw	r30, r28
   1a2c4:	e6 5a       	subi	r30, 0xA6	; 166
   1a2c6:	ff 4f       	sbci	r31, 0xFF	; 255
   1a2c8:	8f ef       	ldi	r24, 0xFF	; 255
   1a2ca:	9f ef       	ldi	r25, 0xFF	; 255
   1a2cc:	91 83       	std	Z+1, r25	; 0x01
   1a2ce:	80 83       	st	Z, r24
   1a2d0:	1b a3       	std	Y+35, r17	; 0x23
   1a2d2:	0a a3       	std	Y+34, r16	; 0x22
   1a2d4:	b8 01       	movw	r22, r16
   1a2d6:	ce 01       	movw	r24, r28
   1a2d8:	91 df       	rcall	.-222    	; 0x1a1fc <lif_writedirindex>
   1a2da:	df 91       	pop	r29
   1a2dc:	cf 91       	pop	r28
   1a2de:	1f 91       	pop	r17
   1a2e0:	0f 91       	pop	r16
   1a2e2:	08 95       	ret

0001a2e4 <lif_updatefree>:
   1a2e4:	2f 92       	push	r2
   1a2e6:	3f 92       	push	r3
   1a2e8:	4f 92       	push	r4
   1a2ea:	5f 92       	push	r5
   1a2ec:	6f 92       	push	r6
   1a2ee:	7f 92       	push	r7
   1a2f0:	8f 92       	push	r8
   1a2f2:	af 92       	push	r10
   1a2f4:	bf 92       	push	r11
   1a2f6:	cf 92       	push	r12
   1a2f8:	df 92       	push	r13
   1a2fa:	ef 92       	push	r14
   1a2fc:	ff 92       	push	r15
   1a2fe:	0f 93       	push	r16
   1a300:	1f 93       	push	r17
   1a302:	cf 93       	push	r28
   1a304:	df 93       	push	r29
   1a306:	cd b7       	in	r28, 0x3d	; 61
   1a308:	de b7       	in	r29, 0x3e	; 62
   1a30a:	28 97       	sbiw	r28, 0x08	; 8
   1a30c:	0f b6       	in	r0, 0x3f	; 63
   1a30e:	f8 94       	cli
   1a310:	de bf       	out	0x3e, r29	; 62
   1a312:	0f be       	out	0x3f, r0	; 63
   1a314:	cd bf       	out	0x3d, r28	; 61
   1a316:	98 87       	std	Y+8, r25	; 0x08
   1a318:	8f 83       	std	Y+7, r24	; 0x07
   1a31a:	fc 01       	movw	r30, r24
   1a31c:	24 84       	ldd	r2, Z+12	; 0x0c
   1a31e:	35 84       	ldd	r3, Z+13	; 0x0d
   1a320:	46 84       	ldd	r4, Z+14	; 0x0e
   1a322:	57 84       	ldd	r5, Z+15	; 0x0f
   1a324:	80 89       	ldd	r24, Z+16	; 0x10
   1a326:	91 89       	ldd	r25, Z+17	; 0x11
   1a328:	a2 89       	ldd	r26, Z+18	; 0x12
   1a32a:	b3 89       	ldd	r27, Z+19	; 0x13
   1a32c:	80 8f       	std	Z+24, r24	; 0x18
   1a32e:	91 8f       	std	Z+25, r25	; 0x19
   1a330:	a2 8f       	std	Z+26, r26	; 0x1a
   1a332:	b3 8f       	std	Z+27, r27	; 0x1b
   1a334:	14 8a       	std	Z+20, r1	; 0x14
   1a336:	15 8a       	std	Z+21, r1	; 0x15
   1a338:	16 8a       	std	Z+22, r1	; 0x16
   1a33a:	17 8a       	std	Z+23, r1	; 0x17
   1a33c:	17 8e       	std	Z+31, r1	; 0x1f
   1a33e:	16 8e       	std	Z+30, r1	; 0x1e
   1a340:	15 8e       	std	Z+29, r1	; 0x1d
   1a342:	14 8e       	std	Z+28, r1	; 0x1c
   1a344:	11 a2       	std	Z+33, r1	; 0x21
   1a346:	10 a2       	std	Z+32, r1	; 0x20
   1a348:	13 a2       	std	Z+35, r1	; 0x23
   1a34a:	12 a2       	std	Z+34, r1	; 0x22
   1a34c:	cc 24       	eor	r12, r12
   1a34e:	c3 94       	inc	r12
   1a350:	d1 2c       	mov	r13, r1
   1a352:	0f ef       	ldi	r16, 0xFF	; 255
   1a354:	1f ef       	ldi	r17, 0xFF	; 255
   1a356:	e6 5a       	subi	r30, 0xA6	; 166
   1a358:	ff 4f       	sbci	r31, 0xFF	; 255
   1a35a:	fc 83       	std	Y+4, r31	; 0x04
   1a35c:	eb 83       	std	Y+3, r30	; 0x03
   1a35e:	af 80       	ldd	r10, Y+7	; 0x07
   1a360:	b8 84       	ldd	r11, Y+8	; 0x08
   1a362:	fc e5       	ldi	r31, 0x5C	; 92
   1a364:	af 0e       	add	r10, r31
   1a366:	b1 1c       	adc	r11, r1
   1a368:	8f 81       	ldd	r24, Y+7	; 0x07
   1a36a:	98 85       	ldd	r25, Y+8	; 0x08
   1a36c:	80 5a       	subi	r24, 0xA0	; 160
   1a36e:	9f 4f       	sbci	r25, 0xFF	; 255
   1a370:	9e 83       	std	Y+6, r25	; 0x06
   1a372:	8d 83       	std	Y+5, r24	; 0x05
   1a374:	ef 81       	ldd	r30, Y+7	; 0x07
   1a376:	f8 85       	ldd	r31, Y+8	; 0x08
   1a378:	e1 5b       	subi	r30, 0xB1	; 177
   1a37a:	ff 4f       	sbci	r31, 0xFF	; 255
   1a37c:	fa 83       	std	Y+2, r31	; 0x02
   1a37e:	e9 83       	std	Y+1, r30	; 0x01
   1a380:	8c e1       	ldi	r24, 0x1C	; 28
   1a382:	9c e3       	ldi	r25, 0x3C	; 60
   1a384:	3c 01       	movw	r6, r24
   1a386:	76 01       	movw	r14, r12
   1a388:	21 e0       	ldi	r18, 0x01	; 1
   1a38a:	e2 1a       	sub	r14, r18
   1a38c:	f1 08       	sbc	r15, r1
   1a38e:	b7 01       	movw	r22, r14
   1a390:	8f 81       	ldd	r24, Y+7	; 0x07
   1a392:	98 85       	ldd	r25, Y+8	; 0x08
   1a394:	ca de       	rcall	.-620    	; 0x1a12a <lif_readdirindex>
   1a396:	89 2b       	or	r24, r25
   1a398:	19 f4       	brne	.+6      	; 0x1a3a0 <lif_updatefree+0xbc>
   1a39a:	80 e0       	ldi	r24, 0x00	; 0
   1a39c:	90 e0       	ldi	r25, 0x00	; 0
   1a39e:	92 c0       	rjmp	.+292    	; 0x1a4c4 <lif_updatefree+0x1e0>
   1a3a0:	eb 81       	ldd	r30, Y+3	; 0x03
   1a3a2:	fc 81       	ldd	r31, Y+4	; 0x04
   1a3a4:	80 81       	ld	r24, Z
   1a3a6:	91 81       	ldd	r25, Z+1	; 0x01
   1a3a8:	8f 3f       	cpi	r24, 0xFF	; 255
   1a3aa:	ff ef       	ldi	r31, 0xFF	; 255
   1a3ac:	9f 07       	cpc	r25, r31
   1a3ae:	c1 f4       	brne	.+48     	; 0x1a3e0 <lif_updatefree+0xfc>
   1a3b0:	ef 81       	ldd	r30, Y+7	; 0x07
   1a3b2:	f8 85       	ldd	r31, Y+8	; 0x08
   1a3b4:	0f 3f       	cpi	r16, 0xFF	; 255
   1a3b6:	2f ef       	ldi	r18, 0xFF	; 255
   1a3b8:	12 07       	cpc	r17, r18
   1a3ba:	09 f4       	brne	.+2      	; 0x1a3be <lif_updatefree+0xda>
   1a3bc:	79 c0       	rjmp	.+242    	; 0x1a4b0 <lif_updatefree+0x1cc>
   1a3be:	13 a3       	std	Z+35, r17	; 0x23
   1a3c0:	02 a3       	std	Z+34, r16	; 0x22
   1a3c2:	e0 1a       	sub	r14, r16
   1a3c4:	f1 0a       	sbc	r15, r17
   1a3c6:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a3c8:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a3ca:	8e 19       	sub	r24, r14
   1a3cc:	9f 09       	sbc	r25, r15
   1a3ce:	97 8f       	std	Z+31, r25	; 0x1f
   1a3d0:	86 8f       	std	Z+30, r24	; 0x1e
   1a3d2:	b8 01       	movw	r22, r16
   1a3d4:	cf 01       	movw	r24, r30
   1a3d6:	6e df       	rcall	.-292    	; 0x1a2b4 <lif_writedirEOF>
   1a3d8:	89 2b       	or	r24, r25
   1a3da:	09 f0       	breq	.+2      	; 0x1a3de <lif_updatefree+0xfa>
   1a3dc:	6b c0       	rjmp	.+214    	; 0x1a4b4 <lif_updatefree+0x1d0>
   1a3de:	dd cf       	rjmp	.-70     	; 0x1a39a <lif_updatefree+0xb6>
   1a3e0:	89 2b       	or	r24, r25
   1a3e2:	81 f4       	brne	.+32     	; 0x1a404 <lif_updatefree+0x120>
   1a3e4:	0f 3f       	cpi	r16, 0xFF	; 255
   1a3e6:	ff ef       	ldi	r31, 0xFF	; 255
   1a3e8:	1f 07       	cpc	r17, r31
   1a3ea:	09 f4       	brne	.+2      	; 0x1a3ee <lif_updatefree+0x10a>
   1a3ec:	87 01       	movw	r16, r14
   1a3ee:	ef 81       	ldd	r30, Y+7	; 0x07
   1a3f0:	f8 85       	ldd	r31, Y+8	; 0x08
   1a3f2:	86 8d       	ldd	r24, Z+30	; 0x1e
   1a3f4:	97 8d       	ldd	r25, Z+31	; 0x1f
   1a3f6:	01 96       	adiw	r24, 0x01	; 1
   1a3f8:	97 8f       	std	Z+31, r25	; 0x1f
   1a3fa:	86 8f       	std	Z+30, r24	; 0x1e
   1a3fc:	ff ef       	ldi	r31, 0xFF	; 255
   1a3fe:	cf 1a       	sub	r12, r31
   1a400:	df 0a       	sbc	r13, r31
   1a402:	c1 cf       	rjmp	.-126    	; 0x1a386 <lif_updatefree+0xa2>
   1a404:	f5 01       	movw	r30, r10
   1a406:	80 81       	ld	r24, Z
   1a408:	91 81       	ldd	r25, Z+1	; 0x01
   1a40a:	a2 81       	ldd	r26, Z+2	; 0x02
   1a40c:	b3 81       	ldd	r27, Z+3	; 0x03
   1a40e:	82 15       	cp	r24, r2
   1a410:	93 05       	cpc	r25, r3
   1a412:	a4 05       	cpc	r26, r4
   1a414:	b5 05       	cpc	r27, r5
   1a416:	c0 f4       	brcc	.+48     	; 0x1a448 <lif_updatefree+0x164>
   1a418:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1a41c:	80 ff       	sbrs	r24, 0
   1a41e:	14 c0       	rjmp	.+40     	; 0x1a448 <lif_updatefree+0x164>
   1a420:	fa 81       	ldd	r31, Y+2	; 0x02
   1a422:	ff 93       	push	r31
   1a424:	29 81       	ldd	r18, Y+1	; 0x01
   1a426:	2f 93       	push	r18
   1a428:	ef 81       	ldd	r30, Y+7	; 0x07
   1a42a:	f8 85       	ldd	r31, Y+8	; 0x08
   1a42c:	81 81       	ldd	r24, Z+1	; 0x01
   1a42e:	8f 93       	push	r24
   1a430:	80 81       	ld	r24, Z
   1a432:	8f 93       	push	r24
   1a434:	1f 92       	push	r1
   1a436:	7f 92       	push	r7
   1a438:	6f 92       	push	r6
   1a43a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1a43e:	0f b6       	in	r0, 0x3f	; 63
   1a440:	f8 94       	cli
   1a442:	de bf       	out	0x3e, r29	; 62
   1a444:	0f be       	out	0x3f, r0	; 63
   1a446:	cd bf       	out	0x3d, r28	; 61
   1a448:	ed 81       	ldd	r30, Y+5	; 0x05
   1a44a:	fe 81       	ldd	r31, Y+6	; 0x06
   1a44c:	80 81       	ld	r24, Z
   1a44e:	91 81       	ldd	r25, Z+1	; 0x01
   1a450:	a2 81       	ldd	r26, Z+2	; 0x02
   1a452:	b3 81       	ldd	r27, Z+3	; 0x03
   1a454:	ef 81       	ldd	r30, Y+7	; 0x07
   1a456:	f8 85       	ldd	r31, Y+8	; 0x08
   1a458:	44 89       	ldd	r20, Z+20	; 0x14
   1a45a:	55 89       	ldd	r21, Z+21	; 0x15
   1a45c:	66 89       	ldd	r22, Z+22	; 0x16
   1a45e:	77 89       	ldd	r23, Z+23	; 0x17
   1a460:	48 0f       	add	r20, r24
   1a462:	59 1f       	adc	r21, r25
   1a464:	6a 1f       	adc	r22, r26
   1a466:	7b 1f       	adc	r23, r27
   1a468:	44 8b       	std	Z+20, r20	; 0x14
   1a46a:	55 8b       	std	Z+21, r21	; 0x15
   1a46c:	66 8b       	std	Z+22, r22	; 0x16
   1a46e:	77 8b       	std	Z+23, r23	; 0x17
   1a470:	40 8d       	ldd	r20, Z+24	; 0x18
   1a472:	51 8d       	ldd	r21, Z+25	; 0x19
   1a474:	62 8d       	ldd	r22, Z+26	; 0x1a
   1a476:	73 8d       	ldd	r23, Z+27	; 0x1b
   1a478:	48 1b       	sub	r20, r24
   1a47a:	59 0b       	sbc	r21, r25
   1a47c:	6a 0b       	sbc	r22, r26
   1a47e:	7b 0b       	sbc	r23, r27
   1a480:	40 8f       	std	Z+24, r20	; 0x18
   1a482:	51 8f       	std	Z+25, r21	; 0x19
   1a484:	62 8f       	std	Z+26, r22	; 0x1a
   1a486:	73 8f       	std	Z+27, r23	; 0x1b
   1a488:	24 8d       	ldd	r18, Z+28	; 0x1c
   1a48a:	35 8d       	ldd	r19, Z+29	; 0x1d
   1a48c:	2f 5f       	subi	r18, 0xFF	; 255
   1a48e:	3f 4f       	sbci	r19, 0xFF	; 255
   1a490:	35 8f       	std	Z+29, r19	; 0x1d
   1a492:	24 8f       	std	Z+28, r18	; 0x1c
   1a494:	f5 01       	movw	r30, r10
   1a496:	40 81       	ld	r20, Z
   1a498:	51 81       	ldd	r21, Z+1	; 0x01
   1a49a:	62 81       	ldd	r22, Z+2	; 0x02
   1a49c:	73 81       	ldd	r23, Z+3	; 0x03
   1a49e:	1c 01       	movw	r2, r24
   1a4a0:	2d 01       	movw	r4, r26
   1a4a2:	24 0e       	add	r2, r20
   1a4a4:	35 1e       	adc	r3, r21
   1a4a6:	46 1e       	adc	r4, r22
   1a4a8:	57 1e       	adc	r5, r23
   1a4aa:	0f ef       	ldi	r16, 0xFF	; 255
   1a4ac:	1f ef       	ldi	r17, 0xFF	; 255
   1a4ae:	a6 cf       	rjmp	.-180    	; 0x1a3fc <lif_updatefree+0x118>
   1a4b0:	f3 a2       	std	Z+35, r15	; 0x23
   1a4b2:	e2 a2       	std	Z+34, r14	; 0x22
   1a4b4:	8f ef       	ldi	r24, 0xFF	; 255
   1a4b6:	9f ef       	ldi	r25, 0xFF	; 255
   1a4b8:	ef 81       	ldd	r30, Y+7	; 0x07
   1a4ba:	f8 85       	ldd	r31, Y+8	; 0x08
   1a4bc:	91 a3       	std	Z+33, r25	; 0x21
   1a4be:	80 a3       	std	Z+32, r24	; 0x20
   1a4c0:	8f 81       	ldd	r24, Y+7	; 0x07
   1a4c2:	98 85       	ldd	r25, Y+8	; 0x08
   1a4c4:	28 96       	adiw	r28, 0x08	; 8
   1a4c6:	0f b6       	in	r0, 0x3f	; 63
   1a4c8:	f8 94       	cli
   1a4ca:	de bf       	out	0x3e, r29	; 62
   1a4cc:	0f be       	out	0x3f, r0	; 63
   1a4ce:	cd bf       	out	0x3d, r28	; 61
   1a4d0:	df 91       	pop	r29
   1a4d2:	cf 91       	pop	r28
   1a4d4:	1f 91       	pop	r17
   1a4d6:	0f 91       	pop	r16
   1a4d8:	ff 90       	pop	r15
   1a4da:	ef 90       	pop	r14
   1a4dc:	df 90       	pop	r13
   1a4de:	cf 90       	pop	r12
   1a4e0:	bf 90       	pop	r11
   1a4e2:	af 90       	pop	r10
   1a4e4:	8f 90       	pop	r8
   1a4e6:	7f 90       	pop	r7
   1a4e8:	6f 90       	pop	r6
   1a4ea:	5f 90       	pop	r5
   1a4ec:	4f 90       	pop	r4
   1a4ee:	3f 90       	pop	r3
   1a4f0:	2f 90       	pop	r2
   1a4f2:	08 95       	ret

0001a4f4 <lif_create_volume>:
/// @param[in] dirstart:   Directory start sector
/// @param[in] dirsectors: Directory sectors
/// @return pointer to LIF structure
MEMSPACE
lif_t *lif_create_volume(char *imagename, char *liflabel, long dirstart, long dirsectors, long filesectors)
{
   1a4f4:	a4 e1       	ldi	r26, 0x14	; 20
   1a4f6:	b1 e0       	ldi	r27, 0x01	; 1
   1a4f8:	e0 e8       	ldi	r30, 0x80	; 128
   1a4fa:	f2 ed       	ldi	r31, 0xD2	; 210
   1a4fc:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__prologue_saves__>
   1a500:	4c 01       	movw	r8, r24
   1a502:	3b 01       	movw	r6, r22
   1a504:	19 01       	movw	r2, r18
   1a506:	2a 01       	movw	r4, r20
   1a508:	cf 5e       	subi	r28, 0xEF	; 239
   1a50a:	de 4f       	sbci	r29, 0xFE	; 254
   1a50c:	e8 82       	st	Y, r14
   1a50e:	f9 82       	std	Y+1, r15	; 0x01
   1a510:	0a 83       	std	Y+2, r16	; 0x02
   1a512:	1b 83       	std	Y+3, r17	; 0x03
   1a514:	c1 51       	subi	r28, 0x11	; 17
   1a516:	d1 40       	sbci	r29, 0x01	; 1
   1a518:	c3 5f       	subi	r28, 0xF3	; 243
   1a51a:	de 4f       	sbci	r29, 0xFE	; 254
   1a51c:	a8 82       	st	Y, r10
   1a51e:	b9 82       	std	Y+1, r11	; 0x01
   1a520:	ca 82       	std	Y+2, r12	; 0x02
   1a522:	db 82       	std	Y+3, r13	; 0x03
   1a524:	cd 50       	subi	r28, 0x0D	; 13
   1a526:	d1 40       	sbci	r29, 0x01	; 1
    long i;
    long offset;
    long count;
    uint8_t buffer[LIF_SECTOR_SIZE];

    time_t t = time(NULL);
   1a528:	80 e0       	ldi	r24, 0x00	; 0
   1a52a:	90 e0       	ldi	r25, 0x00	; 0
   1a52c:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <time>
   1a530:	5b 01       	movw	r10, r22
   1a532:	6c 01       	movw	r12, r24

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
   1a534:	64 e7       	ldi	r22, 0x74	; 116
   1a536:	70 e0       	ldi	r23, 0x00	; 0
   1a538:	80 e0       	ldi	r24, 0x00	; 0
   1a53a:	90 e0       	ldi	r25, 0x00	; 0
   1a53c:	0e 94 9b c6 	call	0x18d36	; 0x18d36 <lif_calloc>
   1a540:	7c 01       	movw	r14, r24
    if(LIF == NULL)
   1a542:	00 97       	sbiw	r24, 0x00	; 0
   1a544:	09 f4       	brne	.+2      	; 0x1a548 <lif_create_volume+0x54>
        return(NULL);
    
    lif_image_clear(LIF);
   1a546:	a5 c2       	rjmp	.+1354   	; 0x1aa92 <lif_create_volume+0x59e>

    // Initialize volume header
    LIF->VOL.LIFid = 0x8000;
   1a548:	39 d9       	rcall	.-3470   	; 0x197bc <lif_image_clear>
   1a54a:	80 e0       	ldi	r24, 0x00	; 0
   1a54c:	90 e8       	ldi	r25, 0x80	; 128
   1a54e:	d7 01       	movw	r26, r14
   1a550:	95 96       	adiw	r26, 0x25	; 37
   1a552:	9c 93       	st	X, r25
   1a554:	8e 93       	st	-X, r24
    lif_fixname(LIF->VOL.Label, liflabel, 6);
   1a556:	94 97       	sbiw	r26, 0x24	; 36
   1a558:	46 e0       	ldi	r20, 0x06	; 6
   1a55a:	50 e0       	ldi	r21, 0x00	; 0
   1a55c:	b3 01       	movw	r22, r6
   1a55e:	c7 01       	movw	r24, r14
   1a560:	86 96       	adiw	r24, 0x26	; 38
   1a562:	0e 94 c2 c8 	call	0x19184	; 0x19184 <lif_fixname>
    LIF->VOL.DirStartSector = dirstart;
   1a566:	f7 01       	movw	r30, r14
   1a568:	25 a6       	std	Z+45, r2	; 0x2d
   1a56a:	36 a6       	std	Z+46, r3	; 0x2e
   1a56c:	47 a6       	std	Z+47, r4	; 0x2f
    LIF->VOL.DirSectors = dirsectors;
   1a56e:	50 aa       	std	Z+48, r5	; 0x30
   1a570:	cf 5e       	subi	r28, 0xEF	; 239
   1a572:	de 4f       	sbci	r29, 0xFE	; 254
   1a574:	28 81       	ld	r18, Y
   1a576:	39 81       	ldd	r19, Y+1	; 0x01
   1a578:	4a 81       	ldd	r20, Y+2	; 0x02
   1a57a:	5b 81       	ldd	r21, Y+3	; 0x03
   1a57c:	c1 51       	subi	r28, 0x11	; 17
   1a57e:	d1 40       	sbci	r29, 0x01	; 1
   1a580:	25 ab       	std	Z+53, r18	; 0x35
   1a582:	36 ab       	std	Z+54, r19	; 0x36
   1a584:	47 ab       	std	Z+55, r20	; 0x37
    LIF->VOL.System3000LIFid = 0x1000;
   1a586:	50 af       	std	Z+56, r21	; 0x38
   1a588:	80 e0       	ldi	r24, 0x00	; 0
   1a58a:	90 e1       	ldi	r25, 0x10	; 16
   1a58c:	92 ab       	std	Z+50, r25	; 0x32
    LIF->VOL.tracks_per_side = 0;
   1a58e:	81 ab       	std	Z+49, r24	; 0x31
   1a590:	fd 96       	adiw	r30, 0x3d	; 61
   1a592:	10 82       	st	Z, r1
   1a594:	11 82       	std	Z+1, r1	; 0x01
   1a596:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sides = 0;
   1a598:	13 82       	std	Z+3, r1	; 0x03
   1a59a:	34 96       	adiw	r30, 0x04	; 4
   1a59c:	10 82       	st	Z, r1
   1a59e:	11 82       	std	Z+1, r1	; 0x01
   1a5a0:	12 82       	std	Z+2, r1	; 0x02
    LIF->VOL.sectors_per_track = 0;
   1a5a2:	13 82       	std	Z+3, r1	; 0x03
   1a5a4:	34 96       	adiw	r30, 0x04	; 4
   1a5a6:	10 82       	st	Z, r1
   1a5a8:	11 82       	std	Z+1, r1	; 0x01
   1a5aa:	12 82       	std	Z+2, r1	; 0x02
    ///@brief 0 causes time to return the current date

    lif_time2lifbcd(t, LIF->VOL.date);
   1a5ac:	13 82       	std	Z+3, r1	; 0x03
   1a5ae:	a7 01       	movw	r20, r14
   1a5b0:	47 5b       	subi	r20, 0xB7	; 183
   1a5b2:	5f 4f       	sbci	r21, 0xFF	; 255
   1a5b4:	c6 01       	movw	r24, r12
   1a5b6:	b5 01       	movw	r22, r10

    // update LIF headers
    LIF->name = lif_stralloc(imagename);
   1a5b8:	2a d8       	rcall	.-4012   	; 0x1960e <lif_time2lifbcd>
   1a5ba:	c4 01       	movw	r24, r8
   1a5bc:	0e 94 d7 c6 	call	0x18dae	; 0x18dae <lif_stralloc>
   1a5c0:	f7 01       	movw	r30, r14
   1a5c2:	91 83       	std	Z+1, r25	; 0x01
    if(LIF->name == NULL)
   1a5c4:	80 83       	st	Z, r24
   1a5c6:	89 2b       	or	r24, r25
   1a5c8:	09 f4       	brne	.+2      	; 0x1a5cc <lif_create_volume+0xd8>
        lif_close_volume(LIF);
        return(NULL);
    }

    // Initilize all LIF headers
    LIF->filesectors = filesectors;
   1a5ca:	58 c2       	rjmp	.+1200   	; 0x1aa7c <lif_create_volume+0x588>
   1a5cc:	c3 5f       	subi	r28, 0xF3	; 243
   1a5ce:	de 4f       	sbci	r29, 0xFE	; 254
   1a5d0:	28 81       	ld	r18, Y
   1a5d2:	39 81       	ldd	r19, Y+1	; 0x01
   1a5d4:	4a 81       	ldd	r20, Y+2	; 0x02
   1a5d6:	5b 81       	ldd	r21, Y+3	; 0x03
   1a5d8:	cd 50       	subi	r28, 0x0D	; 13
   1a5da:	d1 40       	sbci	r29, 0x01	; 1
   1a5dc:	20 8b       	std	Z+16, r18	; 0x10
   1a5de:	31 8b       	std	Z+17, r19	; 0x11
   1a5e0:	42 8b       	std	Z+18, r20	; 0x12
    LIF->filestart = dirstart + dirsectors;
   1a5e2:	53 8b       	std	Z+19, r21	; 0x13
   1a5e4:	cf 5e       	subi	r28, 0xEF	; 239
   1a5e6:	de 4f       	sbci	r29, 0xFE	; 254
   1a5e8:	88 81       	ld	r24, Y
   1a5ea:	99 81       	ldd	r25, Y+1	; 0x01
   1a5ec:	aa 81       	ldd	r26, Y+2	; 0x02
   1a5ee:	bb 81       	ldd	r27, Y+3	; 0x03
   1a5f0:	c1 51       	subi	r28, 0x11	; 17
   1a5f2:	d1 40       	sbci	r29, 0x01	; 1
   1a5f4:	82 0d       	add	r24, r2
   1a5f6:	93 1d       	adc	r25, r3
   1a5f8:	a4 1d       	adc	r26, r4
   1a5fa:	b5 1d       	adc	r27, r5
   1a5fc:	f7 01       	movw	r30, r14
   1a5fe:	84 87       	std	Z+12, r24	; 0x0c
   1a600:	95 87       	std	Z+13, r25	; 0x0d
   1a602:	a6 87       	std	Z+14, r26	; 0x0e
    LIF->sectors = (LIF->filestart+LIF->filesectors);
   1a604:	b7 87       	std	Z+15, r27	; 0x0f
   1a606:	82 0f       	add	r24, r18
   1a608:	93 1f       	adc	r25, r19
   1a60a:	a4 1f       	adc	r26, r20
   1a60c:	b5 1f       	adc	r27, r21
   1a60e:	84 83       	std	Z+4, r24	; 0x04
   1a610:	95 83       	std	Z+5, r25	; 0x05
   1a612:	a6 83       	std	Z+6, r26	; 0x06
    LIF->imagebytes = LIF->sectors * (long)LIF_SECTOR_SIZE;
   1a614:	b7 83       	std	Z+7, r27	; 0x07
   1a616:	ba 2f       	mov	r27, r26
   1a618:	a9 2f       	mov	r26, r25
   1a61a:	98 2f       	mov	r25, r24
   1a61c:	88 27       	eor	r24, r24
   1a61e:	80 87       	std	Z+8, r24	; 0x08
   1a620:	91 87       	std	Z+9, r25	; 0x09
   1a622:	a2 87       	std	Z+10, r26	; 0x0a
    LIF->freesectors = LIF->filesectors;
   1a624:	b3 87       	std	Z+11, r27	; 0x0b
   1a626:	20 8f       	std	Z+24, r18	; 0x18
   1a628:	31 8f       	std	Z+25, r19	; 0x19
   1a62a:	42 8f       	std	Z+26, r20	; 0x1a
    LIF->usedsectors = 0;
   1a62c:	53 8f       	std	Z+27, r21	; 0x1b
   1a62e:	14 8a       	std	Z+20, r1	; 0x14
   1a630:	15 8a       	std	Z+21, r1	; 0x15
   1a632:	16 8a       	std	Z+22, r1	; 0x16
    LIF->files = 0;
   1a634:	17 8a       	std	Z+23, r1	; 0x17
   1a636:	15 8e       	std	Z+29, r1	; 0x1d
    LIF->purged = 0;
   1a638:	14 8e       	std	Z+28, r1	; 0x1c
   1a63a:	17 8e       	std	Z+31, r1	; 0x1f
    LIF->dirindex = 0;
   1a63c:	16 8e       	std	Z+30, r1	; 0x1e
   1a63e:	11 a2       	std	Z+33, r1	; 0x21
    LIF->EOFindex = 0;
   1a640:	10 a2       	std	Z+32, r1	; 0x20
   1a642:	13 a2       	std	Z+35, r1	; 0x23

    memset(buffer,0,LIF_SECTOR_SIZE);
   1a644:	12 a2       	std	Z+34, r1	; 0x22
   1a646:	61 2c       	mov	r6, r1
   1a648:	77 24       	eor	r7, r7
   1a64a:	73 94       	inc	r7
   1a64c:	9e 01       	movw	r18, r28
   1a64e:	2f 5f       	subi	r18, 0xFF	; 255
   1a650:	3f 4f       	sbci	r19, 0xFF	; 255
   1a652:	49 01       	movw	r8, r18
   1a654:	d9 01       	movw	r26, r18
   1a656:	f3 01       	movw	r30, r6
   1a658:	1d 92       	st	X+, r1
   1a65a:	31 97       	sbiw	r30, 0x01	; 1

    lif_vol2str(LIF,buffer);
   1a65c:	e9 f7       	brne	.-6      	; 0x1a658 <lif_create_volume+0x164>
   1a65e:	b9 01       	movw	r22, r18
   1a660:	c7 01       	movw	r24, r14
   1a662:	0e 94 ff c8 	call	0x191fe	; 0x191fe <lif_vol2str>

    // Write Volume header
    LIF->fp = lif_open(LIF->name,"wb+");
   1a666:	63 e7       	ldi	r22, 0x73	; 115
   1a668:	78 e0       	ldi	r23, 0x08	; 8
   1a66a:	d7 01       	movw	r26, r14
   1a66c:	8d 91       	ld	r24, X+
   1a66e:	9c 91       	ld	r25, X
   1a670:	0e 94 f6 c6 	call	0x18dec	; 0x18dec <lif_open>
   1a674:	f7 01       	movw	r30, r14
   1a676:	93 83       	std	Z+3, r25	; 0x03
    if(LIF->fp == NULL)
   1a678:	82 83       	std	Z+2, r24	; 0x02
   1a67a:	89 2b       	or	r24, r25
   1a67c:	09 f4       	brne	.+2      	; 0x1a680 <lif_create_volume+0x18c>
    }

    offset = 0;
    count = 0;

    size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1a67e:	fe c1       	rjmp	.+1020   	; 0x1aa7c <lif_create_volume+0x588>
   1a680:	00 e0       	ldi	r16, 0x00	; 0
   1a682:	11 e0       	ldi	r17, 0x01	; 1
   1a684:	20 e0       	ldi	r18, 0x00	; 0
   1a686:	30 e0       	ldi	r19, 0x00	; 0
   1a688:	a9 01       	movw	r20, r18
   1a68a:	b4 01       	movw	r22, r8
   1a68c:	c7 01       	movw	r24, r14
   1a68e:	0e 94 d5 c7 	call	0x18faa	; 0x18faa <lif_write>
   1a692:	9c 01       	movw	r18, r24
   1a694:	99 0f       	add	r25, r25
   1a696:	44 0b       	sbc	r20, r20
   1a698:	55 0b       	sbc	r21, r21
   1a69a:	cb 5f       	subi	r28, 0xFB	; 251
   1a69c:	de 4f       	sbci	r29, 0xFE	; 254
   1a69e:	28 83       	st	Y, r18
   1a6a0:	39 83       	std	Y+1, r19	; 0x01
   1a6a2:	4a 83       	std	Y+2, r20	; 0x02
   1a6a4:	5b 83       	std	Y+3, r21	; 0x03
   1a6a6:	c5 50       	subi	r28, 0x05	; 5

    if(size < LIF_SECTOR_SIZE)
   1a6a8:	d1 40       	sbci	r29, 0x01	; 1
   1a6aa:	2f 3f       	cpi	r18, 0xFF	; 255
   1a6ac:	31 05       	cpc	r19, r1
   1a6ae:	41 05       	cpc	r20, r1
   1a6b0:	51 05       	cpc	r21, r1
   1a6b2:	09 f0       	breq	.+2      	; 0x1a6b6 <lif_create_volume+0x1c2>
   1a6b4:	0c f4       	brge	.+2      	; 0x1a6b8 <lif_create_volume+0x1c4>
    }
    offset += size;
    ++count;


    memset(buffer,0,LIF_SECTOR_SIZE);
   1a6b6:	e2 c1       	rjmp	.+964    	; 0x1aa7c <lif_create_volume+0x588>
   1a6b8:	d4 01       	movw	r26, r8
   1a6ba:	f3 01       	movw	r30, r6
   1a6bc:	1d 92       	st	X+, r1
   1a6be:	31 97       	sbiw	r30, 0x01	; 1

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1a6c0:	e9 f7       	brne	.-6      	; 0x1a6bc <lif_create_volume+0x1c8>
   1a6c2:	21 e0       	ldi	r18, 0x01	; 1
   1a6c4:	30 e0       	ldi	r19, 0x00	; 0
   1a6c6:	40 e0       	ldi	r20, 0x00	; 0
   1a6c8:	50 e0       	ldi	r21, 0x00	; 0
   1a6ca:	cf 5f       	subi	r28, 0xFF	; 255
   1a6cc:	de 4f       	sbci	r29, 0xFE	; 254
   1a6ce:	28 83       	st	Y, r18
   1a6d0:	39 83       	std	Y+1, r19	; 0x01
   1a6d2:	4a 83       	std	Y+2, r20	; 0x02
   1a6d4:	5b 83       	std	Y+3, r21	; 0x03
   1a6d6:	c1 50       	subi	r28, 0x01	; 1
   1a6d8:	d1 40       	sbci	r29, 0x01	; 1
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
            printf("Wrote: %ld\r", count);
   1a6da:	64 01       	movw	r12, r8
   1a6dc:	87 ee       	ldi	r24, 0xE7	; 231
   1a6de:	9c e3       	ldi	r25, 0x3C	; 60
   1a6e0:	3c 01       	movw	r6, r24


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1a6e2:	81 2c       	mov	r8, r1
   1a6e4:	cf 5f       	subi	r28, 0xFF	; 255
   1a6e6:	de 4f       	sbci	r29, 0xFE	; 254
   1a6e8:	88 81       	ld	r24, Y
   1a6ea:	99 81       	ldd	r25, Y+1	; 0x01
   1a6ec:	aa 81       	ldd	r26, Y+2	; 0x02
   1a6ee:	bb 81       	ldd	r27, Y+3	; 0x03
   1a6f0:	c1 50       	subi	r28, 0x01	; 1
   1a6f2:	d1 40       	sbci	r29, 0x01	; 1
   1a6f4:	82 15       	cp	r24, r2
   1a6f6:	93 05       	cpc	r25, r3
   1a6f8:	a4 05       	cpc	r26, r4
   1a6fa:	b5 05       	cpc	r27, r5
   1a6fc:	0c f0       	brlt	.+2      	; 0x1a700 <lif_create_volume+0x20c>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1a6fe:	64 c0       	rjmp	.+200    	; 0x1a7c8 <lif_create_volume+0x2d4>
   1a700:	00 e0       	ldi	r16, 0x00	; 0
   1a702:	11 e0       	ldi	r17, 0x01	; 1
   1a704:	cb 5f       	subi	r28, 0xFB	; 251
   1a706:	de 4f       	sbci	r29, 0xFE	; 254
   1a708:	28 81       	ld	r18, Y
   1a70a:	39 81       	ldd	r19, Y+1	; 0x01
   1a70c:	4a 81       	ldd	r20, Y+2	; 0x02
   1a70e:	5b 81       	ldd	r21, Y+3	; 0x03
   1a710:	c5 50       	subi	r28, 0x05	; 5
   1a712:	d1 40       	sbci	r29, 0x01	; 1
   1a714:	b6 01       	movw	r22, r12
   1a716:	c7 01       	movw	r24, r14
   1a718:	0e 94 d5 c7 	call	0x18faa	; 0x18faa <lif_write>
   1a71c:	09 2e       	mov	r0, r25
   1a71e:	00 0c       	add	r0, r0
   1a720:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1a722:	bb 0b       	sbc	r27, r27
   1a724:	8f 3f       	cpi	r24, 0xFF	; 255
   1a726:	91 05       	cpc	r25, r1
   1a728:	a1 05       	cpc	r26, r1
   1a72a:	b1 05       	cpc	r27, r1
   1a72c:	09 f0       	breq	.+2      	; 0x1a730 <lif_create_volume+0x23c>
   1a72e:	0c f4       	brge	.+2      	; 0x1a732 <lif_create_volume+0x23e>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1a730:	a5 c1       	rjmp	.+842    	; 0x1aa7c <lif_create_volume+0x588>
   1a732:	cb 5f       	subi	r28, 0xFB	; 251
   1a734:	de 4f       	sbci	r29, 0xFE	; 254
   1a736:	28 81       	ld	r18, Y
   1a738:	39 81       	ldd	r19, Y+1	; 0x01
   1a73a:	4a 81       	ldd	r20, Y+2	; 0x02
   1a73c:	5b 81       	ldd	r21, Y+3	; 0x03
   1a73e:	c5 50       	subi	r28, 0x05	; 5
   1a740:	d1 40       	sbci	r29, 0x01	; 1
   1a742:	28 0f       	add	r18, r24
   1a744:	39 1f       	adc	r19, r25
   1a746:	4a 1f       	adc	r20, r26
   1a748:	5b 1f       	adc	r21, r27
   1a74a:	cb 5f       	subi	r28, 0xFB	; 251
   1a74c:	de 4f       	sbci	r29, 0xFE	; 254
   1a74e:	28 83       	st	Y, r18
   1a750:	39 83       	std	Y+1, r19	; 0x01
   1a752:	4a 83       	std	Y+2, r20	; 0x02
   1a754:	5b 83       	std	Y+3, r21	; 0x03
   1a756:	c5 50       	subi	r28, 0x05	; 5
            printf("Wrote: %ld\r", count);
   1a758:	d1 40       	sbci	r29, 0x01	; 1
   1a75a:	cc 5f       	subi	r28, 0xFC	; 252
   1a75c:	de 4f       	sbci	r29, 0xFE	; 254
   1a75e:	38 81       	ld	r19, Y
   1a760:	c4 50       	subi	r28, 0x04	; 4
   1a762:	d1 40       	sbci	r29, 0x01	; 1
   1a764:	3f 93       	push	r19
   1a766:	cd 5f       	subi	r28, 0xFD	; 253
   1a768:	de 4f       	sbci	r29, 0xFE	; 254
   1a76a:	48 81       	ld	r20, Y
   1a76c:	c3 50       	subi	r28, 0x03	; 3
   1a76e:	d1 40       	sbci	r29, 0x01	; 1
   1a770:	4f 93       	push	r20
   1a772:	ce 5f       	subi	r28, 0xFE	; 254
   1a774:	de 4f       	sbci	r29, 0xFE	; 254
   1a776:	58 81       	ld	r21, Y
   1a778:	c2 50       	subi	r28, 0x02	; 2
   1a77a:	d1 40       	sbci	r29, 0x01	; 1
   1a77c:	5f 93       	push	r21
   1a77e:	cf 5f       	subi	r28, 0xFF	; 255
   1a780:	de 4f       	sbci	r29, 0xFE	; 254
   1a782:	88 81       	ld	r24, Y
   1a784:	c1 50       	subi	r28, 0x01	; 1
   1a786:	d1 40       	sbci	r29, 0x01	; 1
   1a788:	8f 93       	push	r24
   1a78a:	1f 92       	push	r1
   1a78c:	7f 92       	push	r7
   1a78e:	6f 92       	push	r6
   1a790:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>


    memset(buffer,0,LIF_SECTOR_SIZE);

    // Space BETWEEN Volume header and Directory area
    for(i=1;i<dirstart;++i)
   1a794:	cf 5f       	subi	r28, 0xFF	; 255
   1a796:	de 4f       	sbci	r29, 0xFE	; 254
   1a798:	28 81       	ld	r18, Y
   1a79a:	39 81       	ldd	r19, Y+1	; 0x01
   1a79c:	4a 81       	ldd	r20, Y+2	; 0x02
   1a79e:	5b 81       	ldd	r21, Y+3	; 0x03
   1a7a0:	c1 50       	subi	r28, 0x01	; 1
   1a7a2:	d1 40       	sbci	r29, 0x01	; 1
   1a7a4:	2f 5f       	subi	r18, 0xFF	; 255
   1a7a6:	3f 4f       	sbci	r19, 0xFF	; 255
   1a7a8:	4f 4f       	sbci	r20, 0xFF	; 255
   1a7aa:	5f 4f       	sbci	r21, 0xFF	; 255
   1a7ac:	cf 5f       	subi	r28, 0xFF	; 255
   1a7ae:	de 4f       	sbci	r29, 0xFE	; 254
   1a7b0:	28 83       	st	Y, r18
   1a7b2:	39 83       	std	Y+1, r19	; 0x01
   1a7b4:	4a 83       	std	Y+2, r20	; 0x02
   1a7b6:	5b 83       	std	Y+3, r21	; 0x03
   1a7b8:	c1 50       	subi	r28, 0x01	; 1
   1a7ba:	d1 40       	sbci	r29, 0x01	; 1
   1a7bc:	0f b6       	in	r0, 0x3f	; 63
   1a7be:	f8 94       	cli
   1a7c0:	de bf       	out	0x3e, r29	; 62
   1a7c2:	0f be       	out	0x3f, r0	; 63
   1a7c4:	cd bf       	out	0x3d, r28	; 61
            printf("Wrote: %ld\r", count);
        ++count;
    }

    // Write Directory sectors
    lif_dir_clear(LIF);
   1a7c6:	8e cf       	rjmp	.-228    	; 0x1a6e4 <lif_create_volume+0x1f0>
   1a7c8:	c7 01       	movw	r24, r14
   1a7ca:	0e 94 e4 cb 	call	0x197c8	; 0x197c8 <lif_dir_clear>
    LIF->DIR.FileType = 0xffff;
   1a7ce:	8f ef       	ldi	r24, 0xFF	; 255
   1a7d0:	9f ef       	ldi	r25, 0xFF	; 255
   1a7d2:	f7 01       	movw	r30, r14
   1a7d4:	e6 5a       	subi	r30, 0xA6	; 166
   1a7d6:	ff 4f       	sbci	r31, 0xFF	; 255
   1a7d8:	91 83       	std	Z+1, r25	; 0x01
   1a7da:	80 83       	st	Z, r24
   1a7dc:	46 01       	movw	r8, r12
   1a7de:	6e 01       	movw	r12, r28
   1a7e0:	91 e0       	ldi	r25, 0x01	; 1
   1a7e2:	c9 0e       	add	r12, r25

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);
   1a7e4:	d9 1e       	adc	r13, r25
   1a7e6:	b4 01       	movw	r22, r8
   1a7e8:	c7 01       	movw	r24, r14
   1a7ea:	0e 94 1f ca 	call	0x1943e	; 0x1943e <lif_dir2str>
   1a7ee:	a0 e2       	ldi	r26, 0x20	; 32
   1a7f0:	8a 0e       	add	r8, r26

    // Write Directory sectors
    lif_dir_clear(LIF);
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
   1a7f2:	91 1c       	adc	r9, r1
   1a7f4:	c8 14       	cp	r12, r8
   1a7f6:	d9 04       	cpc	r13, r9
   1a7f8:	b1 f7       	brne	.-20     	; 0x1a7e6 <lif_create_volume+0x2f2>
   1a7fa:	81 2c       	mov	r8, r1
   1a7fc:	91 2c       	mov	r9, r1
   1a7fe:	54 01       	movw	r10, r8
   1a800:	fe 01       	movw	r30, r28
   1a802:	31 96       	adiw	r30, 0x01	; 1
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("Wrote: %ld\r", count);
   1a804:	6f 01       	movw	r12, r30
   1a806:	8b ed       	ldi	r24, 0xDB	; 219
   1a808:	9c e3       	ldi	r25, 0x3C	; 60
   1a80a:	2c 01       	movw	r4, r24
   1a80c:	61 2c       	mov	r6, r1
   1a80e:	cf 5f       	subi	r28, 0xFF	; 255
   1a810:	de 4f       	sbci	r29, 0xFE	; 254
   1a812:	28 81       	ld	r18, Y
   1a814:	39 81       	ldd	r19, Y+1	; 0x01
   1a816:	4a 81       	ldd	r20, Y+2	; 0x02
   1a818:	5b 81       	ldd	r21, Y+3	; 0x03
   1a81a:	c1 50       	subi	r28, 0x01	; 1
   1a81c:	d1 40       	sbci	r29, 0x01	; 1
   1a81e:	28 0d       	add	r18, r8
   1a820:	39 1d       	adc	r19, r9
   1a822:	4a 1d       	adc	r20, r10
   1a824:	5b 1d       	adc	r21, r11
   1a826:	c7 5f       	subi	r28, 0xF7	; 247
   1a828:	de 4f       	sbci	r29, 0xFE	; 254
   1a82a:	28 83       	st	Y, r18
   1a82c:	39 83       	std	Y+1, r19	; 0x01
   1a82e:	4a 83       	std	Y+2, r20	; 0x02
   1a830:	5b 83       	std	Y+3, r21	; 0x03
   1a832:	c9 50       	subi	r28, 0x09	; 9
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   1a834:	d1 40       	sbci	r29, 0x01	; 1
   1a836:	cf 5e       	subi	r28, 0xEF	; 239
   1a838:	de 4f       	sbci	r29, 0xFE	; 254
   1a83a:	88 81       	ld	r24, Y
   1a83c:	99 81       	ldd	r25, Y+1	; 0x01
   1a83e:	aa 81       	ldd	r26, Y+2	; 0x02
   1a840:	bb 81       	ldd	r27, Y+3	; 0x03
   1a842:	c1 51       	subi	r28, 0x11	; 17
   1a844:	d1 40       	sbci	r29, 0x01	; 1
   1a846:	88 16       	cp	r8, r24
   1a848:	99 06       	cpc	r9, r25
   1a84a:	aa 06       	cpc	r10, r26
   1a84c:	bb 06       	cpc	r11, r27
   1a84e:	0c f0       	brlt	.+2      	; 0x1a852 <lif_create_volume+0x35e>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1a850:	67 c0       	rjmp	.+206    	; 0x1a920 <lif_create_volume+0x42c>
   1a852:	00 e0       	ldi	r16, 0x00	; 0
   1a854:	11 e0       	ldi	r17, 0x01	; 1
   1a856:	cb 5f       	subi	r28, 0xFB	; 251
   1a858:	de 4f       	sbci	r29, 0xFE	; 254
   1a85a:	28 81       	ld	r18, Y
   1a85c:	39 81       	ldd	r19, Y+1	; 0x01
   1a85e:	4a 81       	ldd	r20, Y+2	; 0x02
   1a860:	5b 81       	ldd	r21, Y+3	; 0x03
   1a862:	c5 50       	subi	r28, 0x05	; 5
   1a864:	d1 40       	sbci	r29, 0x01	; 1
   1a866:	b6 01       	movw	r22, r12
   1a868:	c7 01       	movw	r24, r14
   1a86a:	0e 94 d5 c7 	call	0x18faa	; 0x18faa <lif_write>
   1a86e:	09 2e       	mov	r0, r25
   1a870:	00 0c       	add	r0, r0
   1a872:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1a874:	bb 0b       	sbc	r27, r27
   1a876:	8f 3f       	cpi	r24, 0xFF	; 255
   1a878:	91 05       	cpc	r25, r1
   1a87a:	a1 05       	cpc	r26, r1
   1a87c:	b1 05       	cpc	r27, r1
   1a87e:	09 f0       	breq	.+2      	; 0x1a882 <lif_create_volume+0x38e>
   1a880:	0c f4       	brge	.+2      	; 0x1a884 <lif_create_volume+0x390>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1a882:	fc c0       	rjmp	.+504    	; 0x1aa7c <lif_create_volume+0x588>
   1a884:	cb 5f       	subi	r28, 0xFB	; 251
   1a886:	de 4f       	sbci	r29, 0xFE	; 254
   1a888:	28 81       	ld	r18, Y
   1a88a:	39 81       	ldd	r19, Y+1	; 0x01
   1a88c:	4a 81       	ldd	r20, Y+2	; 0x02
   1a88e:	5b 81       	ldd	r21, Y+3	; 0x03
   1a890:	c5 50       	subi	r28, 0x05	; 5
   1a892:	d1 40       	sbci	r29, 0x01	; 1
   1a894:	28 0f       	add	r18, r24
   1a896:	39 1f       	adc	r19, r25
   1a898:	4a 1f       	adc	r20, r26
   1a89a:	5b 1f       	adc	r21, r27
   1a89c:	cb 5f       	subi	r28, 0xFB	; 251
   1a89e:	de 4f       	sbci	r29, 0xFE	; 254
   1a8a0:	28 83       	st	Y, r18
   1a8a2:	39 83       	std	Y+1, r19	; 0x01
   1a8a4:	4a 83       	std	Y+2, r20	; 0x02
   1a8a6:	5b 83       	std	Y+3, r21	; 0x03
   1a8a8:	c5 50       	subi	r28, 0x05	; 5
        if((count % 100) == 0)
   1a8aa:	d1 40       	sbci	r29, 0x01	; 1
   1a8ac:	c7 5f       	subi	r28, 0xF7	; 247
   1a8ae:	de 4f       	sbci	r29, 0xFE	; 254
   1a8b0:	68 81       	ld	r22, Y
   1a8b2:	79 81       	ldd	r23, Y+1	; 0x01
   1a8b4:	8a 81       	ldd	r24, Y+2	; 0x02
   1a8b6:	9b 81       	ldd	r25, Y+3	; 0x03
   1a8b8:	c9 50       	subi	r28, 0x09	; 9
   1a8ba:	d1 40       	sbci	r29, 0x01	; 1
   1a8bc:	24 e6       	ldi	r18, 0x64	; 100
   1a8be:	30 e0       	ldi	r19, 0x00	; 0
   1a8c0:	40 e0       	ldi	r20, 0x00	; 0
   1a8c2:	50 e0       	ldi	r21, 0x00	; 0
   1a8c4:	0e 94 76 e8 	call	0x1d0ec	; 0x1d0ec <__divmodsi4>
   1a8c8:	67 2b       	or	r22, r23
   1a8ca:	68 2b       	or	r22, r24
   1a8cc:	69 2b       	or	r22, r25
            printf("Wrote: %ld\r", count);
   1a8ce:	11 f5       	brne	.+68     	; 0x1a914 <lif_create_volume+0x420>
   1a8d0:	c4 5f       	subi	r28, 0xF4	; 244
   1a8d2:	de 4f       	sbci	r29, 0xFE	; 254
   1a8d4:	38 81       	ld	r19, Y
   1a8d6:	cc 50       	subi	r28, 0x0C	; 12
   1a8d8:	d1 40       	sbci	r29, 0x01	; 1
   1a8da:	3f 93       	push	r19
   1a8dc:	c5 5f       	subi	r28, 0xF5	; 245
   1a8de:	de 4f       	sbci	r29, 0xFE	; 254
   1a8e0:	48 81       	ld	r20, Y
   1a8e2:	cb 50       	subi	r28, 0x0B	; 11
   1a8e4:	d1 40       	sbci	r29, 0x01	; 1
   1a8e6:	4f 93       	push	r20
   1a8e8:	c6 5f       	subi	r28, 0xF6	; 246
   1a8ea:	de 4f       	sbci	r29, 0xFE	; 254
   1a8ec:	58 81       	ld	r21, Y
   1a8ee:	ca 50       	subi	r28, 0x0A	; 10
   1a8f0:	d1 40       	sbci	r29, 0x01	; 1
   1a8f2:	5f 93       	push	r21
   1a8f4:	c7 5f       	subi	r28, 0xF7	; 247
   1a8f6:	de 4f       	sbci	r29, 0xFE	; 254
   1a8f8:	88 81       	ld	r24, Y
   1a8fa:	c9 50       	subi	r28, 0x09	; 9
   1a8fc:	d1 40       	sbci	r29, 0x01	; 1
   1a8fe:	8f 93       	push	r24
   1a900:	1f 92       	push	r1
   1a902:	5f 92       	push	r5
   1a904:	4f 92       	push	r4
   1a906:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1a90a:	0f b6       	in	r0, 0x3f	; 63
   1a90c:	f8 94       	cli
   1a90e:	de bf       	out	0x3e, r29	; 62
   1a910:	0f be       	out	0x3f, r0	; 63
    LIF->DIR.FileType = 0xffff;

    for(i=0;i<LIF_SECTOR_SIZE;i+=LIF_DIR_SIZE)
        lif_dir2str(LIF,buffer+i);

    for(i=0;i<dirsectors;++i)
   1a912:	cd bf       	out	0x3d, r28	; 61
   1a914:	bf ef       	ldi	r27, 0xFF	; 255
   1a916:	8b 1a       	sub	r8, r27
   1a918:	9b 0a       	sbc	r9, r27
   1a91a:	ab 0a       	sbc	r10, r27
   1a91c:	bb 0a       	sbc	r11, r27
            printf("Wrote: %ld\r", count);
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
   1a91e:	77 cf       	rjmp	.-274    	; 0x1a80e <lif_create_volume+0x31a>
   1a920:	80 e0       	ldi	r24, 0x00	; 0
   1a922:	91 e0       	ldi	r25, 0x01	; 1
   1a924:	d6 01       	movw	r26, r12
   1a926:	fc 01       	movw	r30, r24
   1a928:	1d 92       	st	X+, r1
   1a92a:	31 97       	sbiw	r30, 0x01	; 1
    for(i=0;i<filesectors;++i)
   1a92c:	e9 f7       	brne	.-6      	; 0x1a928 <lif_create_volume+0x434>
   1a92e:	41 2c       	mov	r4, r1
   1a930:	51 2c       	mov	r5, r1
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
        if((count % 100) == 0)
            printf("Wrote: %ld\r", count);
   1a932:	32 01       	movw	r6, r4
   1a934:	8f ec       	ldi	r24, 0xCF	; 207
   1a936:	9c e3       	ldi	r25, 0x3C	; 60
   1a938:	9c 01       	movw	r18, r24
   1a93a:	40 e0       	ldi	r20, 0x00	; 0
   1a93c:	cf 5f       	subi	r28, 0xFF	; 255
   1a93e:	de 4f       	sbci	r29, 0xFE	; 254
   1a940:	28 83       	st	Y, r18
   1a942:	39 83       	std	Y+1, r19	; 0x01
   1a944:	4a 83       	std	Y+2, r20	; 0x02
   1a946:	c1 50       	subi	r28, 0x01	; 1
   1a948:	d1 40       	sbci	r29, 0x01	; 1
   1a94a:	c7 5f       	subi	r28, 0xF7	; 247
   1a94c:	de 4f       	sbci	r29, 0xFE	; 254
   1a94e:	88 80       	ld	r8, Y
   1a950:	99 80       	ldd	r9, Y+1	; 0x01
   1a952:	aa 80       	ldd	r10, Y+2	; 0x02
   1a954:	bb 80       	ldd	r11, Y+3	; 0x03
   1a956:	c9 50       	subi	r28, 0x09	; 9
   1a958:	d1 40       	sbci	r29, 0x01	; 1
   1a95a:	84 0c       	add	r8, r4
   1a95c:	95 1c       	adc	r9, r5
   1a95e:	a6 1c       	adc	r10, r6
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1a960:	b7 1c       	adc	r11, r7
   1a962:	c3 5f       	subi	r28, 0xF3	; 243
   1a964:	de 4f       	sbci	r29, 0xFE	; 254
   1a966:	28 81       	ld	r18, Y
   1a968:	39 81       	ldd	r19, Y+1	; 0x01
   1a96a:	4a 81       	ldd	r20, Y+2	; 0x02
   1a96c:	5b 81       	ldd	r21, Y+3	; 0x03
   1a96e:	cd 50       	subi	r28, 0x0D	; 13
   1a970:	d1 40       	sbci	r29, 0x01	; 1
   1a972:	42 16       	cp	r4, r18
   1a974:	53 06       	cpc	r5, r19
   1a976:	64 06       	cpc	r6, r20
   1a978:	75 06       	cpc	r7, r21
   1a97a:	0c f0       	brlt	.+2      	; 0x1a97e <lif_create_volume+0x48a>
    {
        size = lif_write(LIF, buffer, offset, LIF_SECTOR_SIZE);
   1a97c:	59 c0       	rjmp	.+178    	; 0x1aa30 <lif_create_volume+0x53c>
   1a97e:	00 e0       	ldi	r16, 0x00	; 0
   1a980:	11 e0       	ldi	r17, 0x01	; 1
   1a982:	cb 5f       	subi	r28, 0xFB	; 251
   1a984:	de 4f       	sbci	r29, 0xFE	; 254
   1a986:	28 81       	ld	r18, Y
   1a988:	39 81       	ldd	r19, Y+1	; 0x01
   1a98a:	4a 81       	ldd	r20, Y+2	; 0x02
   1a98c:	5b 81       	ldd	r21, Y+3	; 0x03
   1a98e:	c5 50       	subi	r28, 0x05	; 5
   1a990:	d1 40       	sbci	r29, 0x01	; 1
   1a992:	be 01       	movw	r22, r28
   1a994:	6f 5f       	subi	r22, 0xFF	; 255
   1a996:	7f 4f       	sbci	r23, 0xFF	; 255
   1a998:	c7 01       	movw	r24, r14
   1a99a:	0e 94 d5 c7 	call	0x18faa	; 0x18faa <lif_write>
   1a99e:	09 2e       	mov	r0, r25
   1a9a0:	00 0c       	add	r0, r0
   1a9a2:	aa 0b       	sbc	r26, r26
        if(size < LIF_SECTOR_SIZE)
   1a9a4:	bb 0b       	sbc	r27, r27
   1a9a6:	8f 3f       	cpi	r24, 0xFF	; 255
   1a9a8:	91 05       	cpc	r25, r1
   1a9aa:	a1 05       	cpc	r26, r1
   1a9ac:	b1 05       	cpc	r27, r1
   1a9ae:	09 f0       	breq	.+2      	; 0x1a9b2 <lif_create_volume+0x4be>
   1a9b0:	0c f4       	brge	.+2      	; 0x1a9b4 <lif_create_volume+0x4c0>
        {
            lif_close_volume(LIF);
            return(NULL);
        }
        offset += size;
   1a9b2:	64 c0       	rjmp	.+200    	; 0x1aa7c <lif_create_volume+0x588>
   1a9b4:	cb 5f       	subi	r28, 0xFB	; 251
   1a9b6:	de 4f       	sbci	r29, 0xFE	; 254
   1a9b8:	28 81       	ld	r18, Y
   1a9ba:	39 81       	ldd	r19, Y+1	; 0x01
   1a9bc:	4a 81       	ldd	r20, Y+2	; 0x02
   1a9be:	5b 81       	ldd	r21, Y+3	; 0x03
   1a9c0:	c5 50       	subi	r28, 0x05	; 5
   1a9c2:	d1 40       	sbci	r29, 0x01	; 1
   1a9c4:	28 0f       	add	r18, r24
   1a9c6:	39 1f       	adc	r19, r25
   1a9c8:	4a 1f       	adc	r20, r26
   1a9ca:	5b 1f       	adc	r21, r27
   1a9cc:	cb 5f       	subi	r28, 0xFB	; 251
   1a9ce:	de 4f       	sbci	r29, 0xFE	; 254
   1a9d0:	28 83       	st	Y, r18
   1a9d2:	39 83       	std	Y+1, r19	; 0x01
   1a9d4:	4a 83       	std	Y+2, r20	; 0x02
   1a9d6:	5b 83       	std	Y+3, r21	; 0x03
   1a9d8:	c5 50       	subi	r28, 0x05	; 5
        if((count % 100) == 0)
   1a9da:	d1 40       	sbci	r29, 0x01	; 1
   1a9dc:	c5 01       	movw	r24, r10
   1a9de:	b4 01       	movw	r22, r8
   1a9e0:	24 e6       	ldi	r18, 0x64	; 100
   1a9e2:	30 e0       	ldi	r19, 0x00	; 0
   1a9e4:	40 e0       	ldi	r20, 0x00	; 0
   1a9e6:	50 e0       	ldi	r21, 0x00	; 0
   1a9e8:	0e 94 76 e8 	call	0x1d0ec	; 0x1d0ec <__divmodsi4>
   1a9ec:	67 2b       	or	r22, r23
   1a9ee:	68 2b       	or	r22, r24
   1a9f0:	69 2b       	or	r22, r25
            printf("Wrote: %ld\r", count);
   1a9f2:	c1 f4       	brne	.+48     	; 0x1aa24 <lif_create_volume+0x530>
   1a9f4:	bf 92       	push	r11
   1a9f6:	af 92       	push	r10
   1a9f8:	9f 92       	push	r9
   1a9fa:	8f 92       	push	r8
   1a9fc:	1f 92       	push	r1
   1a9fe:	ce 5f       	subi	r28, 0xFE	; 254
   1aa00:	de 4f       	sbci	r29, 0xFE	; 254
   1aa02:	38 81       	ld	r19, Y
   1aa04:	c2 50       	subi	r28, 0x02	; 2
   1aa06:	d1 40       	sbci	r29, 0x01	; 1
   1aa08:	3f 93       	push	r19
   1aa0a:	cf 5f       	subi	r28, 0xFF	; 255
   1aa0c:	de 4f       	sbci	r29, 0xFE	; 254
   1aa0e:	48 81       	ld	r20, Y
   1aa10:	c1 50       	subi	r28, 0x01	; 1
   1aa12:	d1 40       	sbci	r29, 0x01	; 1
   1aa14:	4f 93       	push	r20
   1aa16:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1aa1a:	0f b6       	in	r0, 0x3f	; 63
   1aa1c:	f8 94       	cli
   1aa1e:	de bf       	out	0x3e, r29	; 62
   1aa20:	0f be       	out	0x3f, r0	; 63
        ++count;
    }

    // File area sectors
    memset(buffer,0,LIF_SECTOR_SIZE);
    for(i=0;i<filesectors;++i)
   1aa22:	cd bf       	out	0x3d, r28	; 61
   1aa24:	9f ef       	ldi	r25, 0xFF	; 255
   1aa26:	49 1a       	sub	r4, r25
   1aa28:	59 0a       	sbc	r5, r25
   1aa2a:	69 0a       	sbc	r6, r25
   1aa2c:	79 0a       	sbc	r7, r25
        offset += size;
        if((count % 100) == 0)
            printf("Wrote: %ld\r", count);
        ++count;
    }
    if(debuglevel & 0x400)
   1aa2e:	8d cf       	rjmp	.-230    	; 0x1a94a <lif_create_volume+0x456>
   1aa30:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1aa34:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1aa38:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF,"lif_create_volume");
   1aa3a:	05 c0       	rjmp	.+10     	; 0x1aa46 <lif_create_volume+0x552>
   1aa3c:	6f ec       	ldi	r22, 0xCF	; 207
   1aa3e:	75 e1       	ldi	r23, 0x15	; 21
   1aa40:	c7 01       	movw	r24, r14
   1aa42:	0e 94 f3 cb 	call	0x197e6	; 0x197e6 <lif_dump_vol>
    printf("Wrote: %ld\n", count);
   1aa46:	bf 92       	push	r11
   1aa48:	af 92       	push	r10
   1aa4a:	9f 92       	push	r9
   1aa4c:	8f 92       	push	r8
   1aa4e:	83 ec       	ldi	r24, 0xC3	; 195
   1aa50:	9c e3       	ldi	r25, 0x3C	; 60
   1aa52:	1f 92       	push	r1
   1aa54:	9f 93       	push	r25
   1aa56:	8f 93       	push	r24
   1aa58:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
/// @return void
MEMSPACE
void lif_rewinddir(lif_t *LIF)
{
    // Directory index
    LIF->dirindex = -1;
   1aa5c:	8f ef       	ldi	r24, 0xFF	; 255
   1aa5e:	9f ef       	ldi	r25, 0xFF	; 255
   1aa60:	d7 01       	movw	r26, r14
   1aa62:	91 96       	adiw	r26, 0x21	; 33
   1aa64:	9c 93       	st	X, r25
    printf("Wrote: %ld\n", count);

    lif_rewinddir(LIF);

    // As a sanity check verify basic values
    if( !lif_check_volume(LIF) )
   1aa66:	8e 93       	st	-X, r24
   1aa68:	90 97       	sbiw	r26, 0x20	; 32
   1aa6a:	c7 01       	movw	r24, r14
   1aa6c:	4f d8       	rcall	.-3938   	; 0x19b0c <lif_check_volume>
   1aa6e:	0f b6       	in	r0, 0x3f	; 63
   1aa70:	f8 94       	cli
   1aa72:	de bf       	out	0x3e, r29	; 62
   1aa74:	0f be       	out	0x3f, r0	; 63
   1aa76:	cd bf       	out	0x3d, r28	; 61
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1aa78:	89 2b       	or	r24, r25
   1aa7a:	19 f4       	brne	.+6      	; 0x1aa82 <lif_create_volume+0x58e>
        lif_closedir(LIF);
        return(NULL);
    }

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
   1aa7c:	c7 01       	movw	r24, r14
   1aa7e:	d4 da       	rcall	.-2648   	; 0x1a028 <lif_close_volume>
   1aa80:	08 c0       	rjmp	.+16     	; 0x1aa92 <lif_create_volume+0x59e>
   1aa82:	c7 01       	movw	r24, r14
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1aa84:	2f dc       	rcall	.-1954   	; 0x1a2e4 <lif_updatefree>
   1aa86:	6c 01       	movw	r12, r24
   1aa88:	89 2b       	or	r24, r25

    // Scan directory and verify values
    if( !lif_updatefree(LIF))
    {
        lif_closedir(LIF);
        return(NULL);
   1aa8a:	31 f4       	brne	.+12     	; 0x1aa98 <lif_create_volume+0x5a4>

    time_t t = time(NULL);

    lif_t *LIF = lif_calloc(sizeof(lif_t)+4);
    if(LIF == NULL)
        return(NULL);
   1aa8c:	c7 01       	movw	r24, r14
   1aa8e:	cc da       	rcall	.-2664   	; 0x1a028 <lif_close_volume>
   1aa90:	04 c0       	rjmp	.+8      	; 0x1aa9a <lif_create_volume+0x5a6>
   1aa92:	c1 2c       	mov	r12, r1
        lif_closedir(LIF);
        return(NULL);
    }

    return(LIF);
}
   1aa94:	d1 2c       	mov	r13, r1
   1aa96:	01 c0       	rjmp	.+2      	; 0x1aa9a <lif_create_volume+0x5a6>
   1aa98:	67 01       	movw	r12, r14
   1aa9a:	c6 01       	movw	r24, r12
   1aa9c:	cc 5e       	subi	r28, 0xEC	; 236
   1aa9e:	de 4f       	sbci	r29, 0xFE	; 254
   1aaa0:	e2 e1       	ldi	r30, 0x12	; 18
   1aaa2:	0c 94 dd e8 	jmp	0x1d1ba	; 0x1d1ba <__epilogue_restores__>

0001aaa6 <lif_newdir>:
/// @param[in] *LIF: LIF pointer
/// @param[in] sectors: try to find specified free space
/// @return index or free record or -1 on error
MEMSPACE
int lif_newdir(lif_t *LIF, long sectors)
{
   1aaa6:	ac e0       	ldi	r26, 0x0C	; 12
   1aaa8:	b0 e0       	ldi	r27, 0x00	; 0
   1aaaa:	e9 e5       	ldi	r30, 0x59	; 89
   1aaac:	f5 ed       	ldi	r31, 0xD5	; 213
   1aaae:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__prologue_saves__>
   1aab2:	9c 87       	std	Y+12, r25	; 0x0c
   1aab4:	8b 87       	std	Y+11, r24	; 0x0b
   1aab6:	6a 01       	movw	r12, r20
   1aab8:	7b 01       	movw	r14, r22

    // Directory index
    index = 0;

    // Start of free space
    start = LIF->filestart;
   1aaba:	fc 01       	movw	r30, r24
   1aabc:	84 84       	ldd	r8, Z+12	; 0x0c
   1aabe:	95 84       	ldd	r9, Z+13	; 0x0d
   1aac0:	a6 84       	ldd	r10, Z+14	; 0x0e

    // Update all file information
    if(lif_updatefree(LIF) == NULL)
   1aac2:	b7 84       	ldd	r11, Z+15	; 0x0f
   1aac4:	0f dc       	rcall	.-2018   	; 0x1a2e4 <lif_updatefree>
   1aac6:	89 2b       	or	r24, r25
    {
        printf("lif_newdir: not enough free space:[%ld] for size:[%ld]\n", (long)LIF->freesectors, (long) sectors);
   1aac8:	b1 f4       	brne	.+44     	; 0x1aaf6 <lif_newdir+0x50>
   1aaca:	ff 92       	push	r15
   1aacc:	ef 92       	push	r14
   1aace:	df 92       	push	r13
   1aad0:	cf 92       	push	r12
   1aad2:	eb 85       	ldd	r30, Y+11	; 0x0b
   1aad4:	fc 85       	ldd	r31, Y+12	; 0x0c
   1aad6:	83 8d       	ldd	r24, Z+27	; 0x1b
   1aad8:	8f 93       	push	r24
   1aada:	82 8d       	ldd	r24, Z+26	; 0x1a
   1aadc:	8f 93       	push	r24
   1aade:	81 8d       	ldd	r24, Z+25	; 0x19
   1aae0:	8f 93       	push	r24
   1aae2:	80 8d       	ldd	r24, Z+24	; 0x18
   1aae4:	8f 93       	push	r24
   1aae6:	84 ee       	ldi	r24, 0xE4	; 228
   1aae8:	9b e3       	ldi	r25, 0x3B	; 59
   1aaea:	1f 92       	push	r1
   1aaec:	9f 93       	push	r25
   1aaee:	8f 93       	push	r24
   1aaf0:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        return(-1);
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
   1aaf4:	2c c0       	rjmp	.+88     	; 0x1ab4e <lif_newdir+0xa8>
   1aaf6:	eb 85       	ldd	r30, Y+11	; 0x0b
   1aaf8:	fc 85       	ldd	r31, Y+12	; 0x0c
   1aafa:	80 8d       	ldd	r24, Z+24	; 0x18
   1aafc:	91 8d       	ldd	r25, Z+25	; 0x19
   1aafe:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1ab00:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1ab02:	8c 15       	cp	r24, r12
   1ab04:	9d 05       	cpc	r25, r13
   1ab06:	ae 05       	cpc	r26, r14
   1ab08:	bf 05       	cpc	r27, r15
   1ab0a:	b4 f0       	brlt	.+44     	; 0x1ab38 <lif_newdir+0x92>
   1ab0c:	44 24       	eor	r4, r4
   1ab0e:	43 94       	inc	r4
   1ab10:	51 2c       	mov	r5, r1
   1ab12:	61 2c       	mov	r6, r1
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1ab14:	71 2c       	mov	r7, r1
   1ab16:	e6 5a       	subi	r30, 0xA6	; 166
   1ab18:	ff 4f       	sbci	r31, 0xFF	; 255
   1ab1a:	fc 83       	std	Y+4, r31	; 0x04
   1ab1c:	eb 83       	std	Y+3, r30	; 0x03
   1ab1e:	8b 85       	ldd	r24, Y+11	; 0x0b
   1ab20:	9c 85       	ldd	r25, Y+12	; 0x0c
   1ab22:	84 5a       	subi	r24, 0xA4	; 164
   1ab24:	9f 4f       	sbci	r25, 0xFF	; 255
   1ab26:	9a 83       	std	Y+2, r25	; 0x02
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1ab28:	89 83       	std	Y+1, r24	; 0x01
   1ab2a:	eb 85       	ldd	r30, Y+11	; 0x0b
   1ab2c:	fc 85       	ldd	r31, Y+12	; 0x0c
   1ab2e:	e0 5a       	subi	r30, 0xA0	; 160
   1ab30:	ff 4f       	sbci	r31, 0xFF	; 255
   1ab32:	fe 83       	std	Y+6, r31	; 0x06
   1ab34:	ed 83       	std	Y+5, r30	; 0x05
    }

    // Not enough room ?
    if(sectors > (long)LIF->freesectors)
    {
        printf("lif_newdir: not enough free space:[%ld]\n", (long)LIF->freesectors);
   1ab36:	23 c0       	rjmp	.+70     	; 0x1ab7e <lif_newdir+0xd8>
   1ab38:	bf 93       	push	r27
   1ab3a:	af 93       	push	r26
   1ab3c:	9f 93       	push	r25
   1ab3e:	8f 93       	push	r24
   1ab40:	8b eb       	ldi	r24, 0xBB	; 187
   1ab42:	9b e3       	ldi	r25, 0x3B	; 59
   1ab44:	1f 92       	push	r1
   1ab46:	9f 93       	push	r25
   1ab48:	8f 93       	push	r24
   1ab4a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        return(-1);
   1ab4e:	0f b6       	in	r0, 0x3f	; 63
   1ab50:	f8 94       	cli
   1ab52:	de bf       	out	0x3e, r29	; 62
   1ab54:	0f be       	out	0x3f, r0	; 63
   1ab56:	cd bf       	out	0x3d, r28	; 61
#endif
            break;
        }

        // We hit the EOF record
        if(LIF->DIR.FileType == 0xffff)
   1ab58:	05 c1       	rjmp	.+522    	; 0x1ad64 <lif_newdir+0x2be>
   1ab5a:	eb 81       	ldd	r30, Y+3	; 0x03
   1ab5c:	fc 81       	ldd	r31, Y+4	; 0x04
   1ab5e:	80 81       	ld	r24, Z
   1ab60:	91 81       	ldd	r25, Z+1	; 0x01
   1ab62:	8f 3f       	cpi	r24, 0xFF	; 255
   1ab64:	ff ef       	ldi	r31, 0xFF	; 255
   1ab66:	9f 07       	cpc	r25, r31
            return(index);
        }


        // PURGED records
        if(LIF->DIR.FileType == 0)
   1ab68:	a1 f0       	breq	.+40     	; 0x1ab92 <lif_newdir+0xec>
   1ab6a:	89 2b       	or	r24, r25
   1ab6c:	09 f0       	breq	.+2      	; 0x1ab70 <lif_newdir+0xca>
        {
            if(freestate == 0)
   1ab6e:	d0 c0       	rjmp	.+416    	; 0x1ad10 <lif_newdir+0x26a>
   1ab70:	61 14       	cp	r6, r1
   1ab72:	71 04       	cpc	r7, r1
   1ab74:	09 f4       	brne	.+2      	; 0x1ab78 <lif_newdir+0xd2>
   1ab76:	c3 c0       	rjmp	.+390    	; 0x1acfe <lif_newdir+0x258>
   1ab78:	9f ef       	ldi	r25, 0xFF	; 255
   1ab7a:	49 1a       	sub	r4, r25
   1ab7c:	59 0a       	sbc	r5, r25
   1ab7e:	82 01       	movw	r16, r4
   1ab80:	01 50       	subi	r16, 0x01	; 1

    // Update free space and EOF pointers
    while(1)
    {
        // Write new EOF after current one
        if( !lif_readdirindex(LIF,index) )
   1ab82:	11 09       	sbc	r17, r1
   1ab84:	b8 01       	movw	r22, r16
   1ab86:	8b 85       	ldd	r24, Y+11	; 0x0b
   1ab88:	9c 85       	ldd	r25, Y+12	; 0x0c
   1ab8a:	cf da       	rcall	.-2658   	; 0x1a12a <lif_readdirindex>
   1ab8c:	89 2b       	or	r24, r25
   1ab8e:	29 f7       	brne	.-54     	; 0x1ab5a <lif_newdir+0xb4>
        if(LIF->DIR.FileType == 0xffff)
        {

            // Was enough free space found in purged area ?
            // Do NOT need to update EOF!
            if(freestate == 2)
   1ab90:	e9 c0       	rjmp	.+466    	; 0x1ad64 <lif_newdir+0x2be>
   1ab92:	22 e0       	ldi	r18, 0x02	; 2
   1ab94:	62 16       	cp	r6, r18
   1ab96:	71 04       	cpc	r7, r1
   1ab98:	09 f0       	breq	.+2      	; 0x1ab9c <lif_newdir+0xf6>
            {
                // Update free pace for new file
                lif_dir_clear(LIF);
   1ab9a:	46 c0       	rjmp	.+140    	; 0x1ac28 <lif_newdir+0x182>
   1ab9c:	8b 85       	ldd	r24, Y+11	; 0x0b
   1ab9e:	9c 85       	ldd	r25, Y+12	; 0x0c
   1aba0:	0e 94 e4 cb 	call	0x197c8	; 0x197c8 <lif_dir_clear>
                LIF->DIR.FileStartSector = freestart;
   1aba4:	eb 85       	ldd	r30, Y+11	; 0x0b
   1aba6:	fc 85       	ldd	r31, Y+12	; 0x0c
   1aba8:	e4 5a       	subi	r30, 0xA4	; 164
   1abaa:	ff 4f       	sbci	r31, 0xFF	; 255
   1abac:	8f 81       	ldd	r24, Y+7	; 0x07
   1abae:	80 83       	st	Z, r24
   1abb0:	98 85       	ldd	r25, Y+8	; 0x08
   1abb2:	91 83       	std	Z+1, r25	; 0x01
   1abb4:	29 85       	ldd	r18, Y+9	; 0x09
   1abb6:	22 83       	std	Z+2, r18	; 0x02
   1abb8:	8a 85       	ldd	r24, Y+10	; 0x0a
                LIF->DIR.FileSectors = sectors;
   1abba:	83 83       	std	Z+3, r24	; 0x03
   1abbc:	eb 85       	ldd	r30, Y+11	; 0x0b
   1abbe:	fc 85       	ldd	r31, Y+12	; 0x0c
   1abc0:	e0 5a       	subi	r30, 0xA0	; 160
   1abc2:	ff 4f       	sbci	r31, 0xFF	; 255
   1abc4:	c0 82       	st	Z, r12
   1abc6:	d1 82       	std	Z+1, r13	; 0x01
   1abc8:	e2 82       	std	Z+2, r14	; 0x02
                LIF->usedsectors += sectors;
   1abca:	f3 82       	std	Z+3, r15	; 0x03
   1abcc:	eb 85       	ldd	r30, Y+11	; 0x0b
   1abce:	fc 85       	ldd	r31, Y+12	; 0x0c
   1abd0:	84 89       	ldd	r24, Z+20	; 0x14
   1abd2:	95 89       	ldd	r25, Z+21	; 0x15
   1abd4:	a6 89       	ldd	r26, Z+22	; 0x16
   1abd6:	b7 89       	ldd	r27, Z+23	; 0x17
   1abd8:	8c 0d       	add	r24, r12
   1abda:	9d 1d       	adc	r25, r13
   1abdc:	ae 1d       	adc	r26, r14
   1abde:	bf 1d       	adc	r27, r15
   1abe0:	84 8b       	std	Z+20, r24	; 0x14
   1abe2:	95 8b       	std	Z+21, r25	; 0x15
   1abe4:	a6 8b       	std	Z+22, r26	; 0x16
                LIF->freesectors -= sectors;
   1abe6:	b7 8b       	std	Z+23, r27	; 0x17
   1abe8:	80 8d       	ldd	r24, Z+24	; 0x18
   1abea:	91 8d       	ldd	r25, Z+25	; 0x19
   1abec:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1abee:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1abf0:	8c 19       	sub	r24, r12
   1abf2:	9d 09       	sbc	r25, r13
   1abf4:	ae 09       	sbc	r26, r14
   1abf6:	bf 09       	sbc	r27, r15
   1abf8:	80 8f       	std	Z+24, r24	; 0x18
   1abfa:	91 8f       	std	Z+25, r25	; 0x19
   1abfc:	a2 8f       	std	Z+26, r26	; 0x1a
                LIF->files++;
   1abfe:	b3 8f       	std	Z+27, r27	; 0x1b
   1ac00:	84 8d       	ldd	r24, Z+28	; 0x1c
   1ac02:	95 8d       	ldd	r25, Z+29	; 0x1d
   1ac04:	01 96       	adiw	r24, 0x01	; 1
   1ac06:	95 8f       	std	Z+29, r25	; 0x1d
                LIF->purged--;
   1ac08:	84 8f       	std	Z+28, r24	; 0x1c
   1ac0a:	86 8d       	ldd	r24, Z+30	; 0x1e
   1ac0c:	97 8d       	ldd	r25, Z+31	; 0x1f
   1ac0e:	01 97       	sbiw	r24, 0x01	; 1
   1ac10:	97 8f       	std	Z+31, r25	; 0x1f
                LIF->dirindex = freeindex;
   1ac12:	86 8f       	std	Z+30, r24	; 0x1e
   1ac14:	20 a2       	std	Z+32, r2	; 0x20
                // Write new record (FileType is still EOF until data is updated by user)
                if( !lif_writedirindex(LIF,freeindex))
   1ac16:	31 a2       	std	Z+33, r3	; 0x21
   1ac18:	b1 01       	movw	r22, r2
   1ac1a:	cf 01       	movw	r24, r30
   1ac1c:	ef da       	rcall	.-2594   	; 0x1a1fc <lif_writedirindex>
   1ac1e:	89 2b       	or	r24, r25
   1ac20:	09 f4       	brne	.+2      	; 0x1ac24 <lif_newdir+0x17e>
   1ac22:	a0 c0       	rjmp	.+320    	; 0x1ad64 <lif_newdir+0x2be>
   1ac24:	c1 01       	movw	r24, r2
                    break;
                }
                return(freeindex);
            }

            if(debuglevel & 0x400)
   1ac26:	a0 c0       	rjmp	.+320    	; 0x1ad68 <lif_newdir+0x2c2>
   1ac28:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1ac2c:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1ac30:	92 ff       	sbrs	r25, 2
                printf("lif_newdir: index:[%d] adding at:[%ld]to purged space:[%ld] sectors, free:[%ld]\n", 
   1ac32:	20 c0       	rjmp	.+64     	; 0x1ac74 <lif_newdir+0x1ce>
   1ac34:	eb 85       	ldd	r30, Y+11	; 0x0b
   1ac36:	fc 85       	ldd	r31, Y+12	; 0x0c
   1ac38:	83 8d       	ldd	r24, Z+27	; 0x1b
   1ac3a:	8f 93       	push	r24
   1ac3c:	82 8d       	ldd	r24, Z+26	; 0x1a
   1ac3e:	8f 93       	push	r24
   1ac40:	81 8d       	ldd	r24, Z+25	; 0x19
   1ac42:	8f 93       	push	r24
   1ac44:	80 8d       	ldd	r24, Z+24	; 0x18
   1ac46:	8f 93       	push	r24
   1ac48:	ff 92       	push	r15
   1ac4a:	ef 92       	push	r14
   1ac4c:	df 92       	push	r13
   1ac4e:	cf 92       	push	r12
   1ac50:	bf 92       	push	r11
   1ac52:	af 92       	push	r10
   1ac54:	9f 92       	push	r9
   1ac56:	8f 92       	push	r8
   1ac58:	1f 93       	push	r17
   1ac5a:	0f 93       	push	r16
   1ac5c:	8a e6       	ldi	r24, 0x6A	; 106
   1ac5e:	9b e3       	ldi	r25, 0x3B	; 59
   1ac60:	1f 92       	push	r1
   1ac62:	9f 93       	push	r25
   1ac64:	8f 93       	push	r24
   1ac66:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1ac6a:	0f b6       	in	r0, 0x3f	; 63
   1ac6c:	f8 94       	cli
   1ac6e:	de bf       	out	0x3e, r29	; 62
   1ac70:	0f be       	out	0x3f, r0	; 63
                    (int) index,(long)start,(long) sectors, (long)LIF->freesectors);

            // Write new EOF after current one
            if( !lif_writedirEOF(LIF,index+1) )
   1ac72:	cd bf       	out	0x3d, r28	; 61
   1ac74:	b8 01       	movw	r22, r16
   1ac76:	6f 5f       	subi	r22, 0xFF	; 255
   1ac78:	7f 4f       	sbci	r23, 0xFF	; 255
   1ac7a:	8b 85       	ldd	r24, Y+11	; 0x0b
   1ac7c:	9c 85       	ldd	r25, Y+12	; 0x0c
   1ac7e:	1a db       	rcall	.-2508   	; 0x1a2b4 <lif_writedirEOF>
   1ac80:	89 2b       	or	r24, r25
   1ac82:	09 f4       	brne	.+2      	; 0x1ac86 <lif_newdir+0x1e0>
            {
                break;
            }

            lif_dir_clear(LIF);
   1ac84:	6f c0       	rjmp	.+222    	; 0x1ad64 <lif_newdir+0x2be>
   1ac86:	8b 85       	ldd	r24, Y+11	; 0x0b
   1ac88:	9c 85       	ldd	r25, Y+12	; 0x0c
   1ac8a:	0e 94 e4 cb 	call	0x197c8	; 0x197c8 <lif_dir_clear>
            LIF->DIR.FileStartSector = start;
   1ac8e:	eb 85       	ldd	r30, Y+11	; 0x0b
   1ac90:	fc 85       	ldd	r31, Y+12	; 0x0c
   1ac92:	e4 5a       	subi	r30, 0xA4	; 164
   1ac94:	ff 4f       	sbci	r31, 0xFF	; 255
   1ac96:	80 82       	st	Z, r8
   1ac98:	91 82       	std	Z+1, r9	; 0x01
   1ac9a:	a2 82       	std	Z+2, r10	; 0x02
            LIF->DIR.FileSectors = sectors;
   1ac9c:	b3 82       	std	Z+3, r11	; 0x03
   1ac9e:	eb 85       	ldd	r30, Y+11	; 0x0b
   1aca0:	fc 85       	ldd	r31, Y+12	; 0x0c
   1aca2:	e0 5a       	subi	r30, 0xA0	; 160
   1aca4:	ff 4f       	sbci	r31, 0xFF	; 255
   1aca6:	c0 82       	st	Z, r12
   1aca8:	d1 82       	std	Z+1, r13	; 0x01
   1acaa:	e2 82       	std	Z+2, r14	; 0x02
            LIF->usedsectors += sectors;
   1acac:	f3 82       	std	Z+3, r15	; 0x03
   1acae:	eb 85       	ldd	r30, Y+11	; 0x0b
   1acb0:	fc 85       	ldd	r31, Y+12	; 0x0c
   1acb2:	84 89       	ldd	r24, Z+20	; 0x14
   1acb4:	95 89       	ldd	r25, Z+21	; 0x15
   1acb6:	a6 89       	ldd	r26, Z+22	; 0x16
   1acb8:	b7 89       	ldd	r27, Z+23	; 0x17
   1acba:	8c 0d       	add	r24, r12
   1acbc:	9d 1d       	adc	r25, r13
   1acbe:	ae 1d       	adc	r26, r14
   1acc0:	bf 1d       	adc	r27, r15
   1acc2:	84 8b       	std	Z+20, r24	; 0x14
   1acc4:	95 8b       	std	Z+21, r25	; 0x15
   1acc6:	a6 8b       	std	Z+22, r26	; 0x16
            LIF->freesectors -= sectors;
   1acc8:	b7 8b       	std	Z+23, r27	; 0x17
   1acca:	80 8d       	ldd	r24, Z+24	; 0x18
   1accc:	91 8d       	ldd	r25, Z+25	; 0x19
   1acce:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1acd0:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1acd2:	8c 19       	sub	r24, r12
   1acd4:	9d 09       	sbc	r25, r13
   1acd6:	ae 09       	sbc	r26, r14
   1acd8:	bf 09       	sbc	r27, r15
   1acda:	80 8f       	std	Z+24, r24	; 0x18
   1acdc:	91 8f       	std	Z+25, r25	; 0x19
   1acde:	a2 8f       	std	Z+26, r26	; 0x1a
            LIF->files++;
   1ace0:	b3 8f       	std	Z+27, r27	; 0x1b
   1ace2:	84 8d       	ldd	r24, Z+28	; 0x1c
   1ace4:	95 8d       	ldd	r25, Z+29	; 0x1d
   1ace6:	01 96       	adiw	r24, 0x01	; 1
            LIF->dirindex = index;
   1ace8:	95 8f       	std	Z+29, r25	; 0x1d
            // Write new record (FileType is still EOF until data is updated by user )
            if( !lif_writedirindex(LIF,index))
   1acea:	84 8f       	std	Z+28, r24	; 0x1c
   1acec:	11 a3       	std	Z+33, r17	; 0x21
   1acee:	00 a3       	std	Z+32, r16	; 0x20
   1acf0:	b8 01       	movw	r22, r16
   1acf2:	cf 01       	movw	r24, r30
   1acf4:	83 da       	rcall	.-2810   	; 0x1a1fc <lif_writedirindex>
   1acf6:	89 2b       	or	r24, r25
   1acf8:	a9 f1       	breq	.+106    	; 0x1ad64 <lif_newdir+0x2be>


        // PURGED records
        if(LIF->DIR.FileType == 0)
        {
            if(freestate == 0)
   1acfa:	c8 01       	movw	r24, r16
   1acfc:	35 c0       	rjmp	.+106    	; 0x1ad68 <lif_newdir+0x2c2>
   1acfe:	8f 82       	std	Y+7, r8	; 0x07
   1ad00:	98 86       	std	Y+8, r9	; 0x08
   1ad02:	a9 86       	std	Y+9, r10	; 0x09
            {
                freeindex = index;
                freestart = start;
                freestate = 1;
   1ad04:	ba 86       	std	Y+10, r11	; 0x0a
   1ad06:	18 01       	movw	r2, r16
   1ad08:	66 24       	eor	r6, r6
            }
            ++index;
            continue;
   1ad0a:	63 94       	inc	r6
        }
        

        // VALID record
        if(freestate == 1)
   1ad0c:	71 2c       	mov	r7, r1
   1ad0e:	34 cf       	rjmp	.-408    	; 0x1ab78 <lif_newdir+0xd2>
   1ad10:	f1 e0       	ldi	r31, 0x01	; 1
   1ad12:	6f 16       	cp	r6, r31
        {
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
   1ad14:	71 04       	cpc	r7, r1
   1ad16:	a9 f4       	brne	.+42     	; 0x1ad42 <lif_newdir+0x29c>
   1ad18:	e9 81       	ldd	r30, Y+1	; 0x01
   1ad1a:	fa 81       	ldd	r31, Y+2	; 0x02
   1ad1c:	80 81       	ld	r24, Z
   1ad1e:	91 81       	ldd	r25, Z+1	; 0x01
   1ad20:	a2 81       	ldd	r26, Z+2	; 0x02
   1ad22:	b3 81       	ldd	r27, Z+3	; 0x03
   1ad24:	88 19       	sub	r24, r8
   1ad26:	99 09       	sbc	r25, r9
   1ad28:	aa 09       	sbc	r26, r10
   1ad2a:	bb 09       	sbc	r27, r11
   1ad2c:	8c 15       	cp	r24, r12
   1ad2e:	9d 05       	cpc	r25, r13
   1ad30:	ae 05       	cpc	r26, r14
                freestate = 2;      // Found free space in purged record
            else
                freestate = 0;  // Try again
   1ad32:	bf 05       	cpc	r27, r15
   1ad34:	1c f4       	brge	.+6      	; 0x1ad3c <lif_newdir+0x296>
   1ad36:	61 2c       	mov	r6, r1
            long freesectors;
            // Compute sectors of purged space between valid records
            // Note: LIF specs prohibit using old purged file start and sectors!
            freesectors = LIF->DIR.FileStartSector - start;
            if(freesectors >= sectors )
                freestate = 2;      // Found free space in purged record
   1ad38:	71 2c       	mov	r7, r1
   1ad3a:	03 c0       	rjmp	.+6      	; 0x1ad42 <lif_newdir+0x29c>
   1ad3c:	82 e0       	ldi	r24, 0x02	; 2
                freestate = 0;  // Try again
        }
        
        // Computed start of next record
        // Note: MUST be <= actual start of next VALID record or we have overlapping records!
        start = LIF->DIR.FileStartSector + LIF->DIR.FileSectors;
   1ad3e:	68 2e       	mov	r6, r24
   1ad40:	71 2c       	mov	r7, r1
   1ad42:	e9 81       	ldd	r30, Y+1	; 0x01
   1ad44:	fa 81       	ldd	r31, Y+2	; 0x02
   1ad46:	80 80       	ld	r8, Z
   1ad48:	91 80       	ldd	r9, Z+1	; 0x01
   1ad4a:	a2 80       	ldd	r10, Z+2	; 0x02
   1ad4c:	b3 80       	ldd	r11, Z+3	; 0x03
   1ad4e:	ed 81       	ldd	r30, Y+5	; 0x05
   1ad50:	fe 81       	ldd	r31, Y+6	; 0x06
   1ad52:	80 81       	ld	r24, Z
   1ad54:	91 81       	ldd	r25, Z+1	; 0x01
   1ad56:	a2 81       	ldd	r26, Z+2	; 0x02
   1ad58:	b3 81       	ldd	r27, Z+3	; 0x03
   1ad5a:	88 0e       	add	r8, r24
   1ad5c:	99 1e       	adc	r9, r25
   1ad5e:	aa 1e       	adc	r10, r26
        ++index;
    }
    // ERROR
    return(-1);
   1ad60:	bb 1e       	adc	r11, r27
   1ad62:	0a cf       	rjmp	.-492    	; 0x1ab78 <lif_newdir+0xd2>
}
   1ad64:	8f ef       	ldi	r24, 0xFF	; 255
   1ad66:	9f ef       	ldi	r25, 0xFF	; 255
   1ad68:	2c 96       	adiw	r28, 0x0c	; 12
   1ad6a:	e2 e1       	ldi	r30, 0x12	; 18
   1ad6c:	0c 94 dd e8 	jmp	0x1d1ba	; 0x1d1ba <__epilogue_restores__>

0001ad70 <lif_open_volume>:
/// @param[in] *name: file name of LIF image
/// @param[in] *mode: "rb" = read, "rb+" = read/write
/// @return LIF pointer on sucesses or NULL on error
MEMSPACE
lif_t *lif_open_volume(char *name, char *mode)
{
   1ad70:	a0 e3       	ldi	r26, 0x30	; 48
   1ad72:	b1 e0       	ldi	r27, 0x01	; 1
   1ad74:	ee eb       	ldi	r30, 0xBE	; 190
   1ad76:	f6 ed       	ldi	r31, 0xD6	; 214
   1ad78:	0c 94 c9 e8 	jmp	0x1d192	; 0x1d192 <__prologue_saves__+0x10>
   1ad7c:	b8 2e       	mov	r11, r24
   1ad7e:	a9 2e       	mov	r10, r25
   1ad80:	6b 01       	movw	r12, r22
    lif_t *LIF;
    stat_t sb, *sp;
    uint8_t buffer[LIF_SECTOR_SIZE];


    sp = lif_stat(name, (stat_t *)&sb);
   1ad82:	be 01       	movw	r22, r28
   1ad84:	6f 5f       	subi	r22, 0xFF	; 255
   1ad86:	7e 4f       	sbci	r23, 0xFE	; 254
   1ad88:	0e 94 1e c7 	call	0x18e3c	; 0x18e3c <lif_stat>
   1ad8c:	8c 01       	movw	r16, r24
    if(sp == NULL)
   1ad8e:	00 97       	sbiw	r24, 0x00	; 0
   1ad90:	09 f4       	brne	.+2      	; 0x1ad94 <lif_open_volume+0x24>
   1ad92:	92 c0       	rjmp	.+292    	; 0x1aeb8 <lif_open_volume+0x148>
        return(NULL);


    // To read LIF volume we must have at minimum two sectors
    // volume header a directory entry
    if(sp->st_size < (long)LIF_SECTOR_SIZE*2)
   1ad94:	fc 01       	movw	r30, r24
   1ad96:	80 8d       	ldd	r24, Z+24	; 0x18
   1ad98:	91 8d       	ldd	r25, Z+25	; 0x19
   1ad9a:	a2 8d       	ldd	r26, Z+26	; 0x1a
   1ad9c:	b3 8d       	ldd	r27, Z+27	; 0x1b
   1ad9e:	81 15       	cp	r24, r1
   1ada0:	f2 e0       	ldi	r31, 0x02	; 2
   1ada2:	9f 07       	cpc	r25, r31
   1ada4:	a1 05       	cpc	r26, r1
   1ada6:	b1 05       	cpc	r27, r1
   1ada8:	b8 f4       	brcc	.+46     	; 0x1add8 <lif_open_volume+0x68>
    {
        if(debuglevel & 1)
   1adaa:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   1adae:	20 ff       	sbrs	r18, 0
   1adb0:	83 c0       	rjmp	.+262    	; 0x1aeb8 <lif_open_volume+0x148>
            printf("lif_open_volume:[%s] error volume header area too small:[%ld]\n", name, (long)sp->st_size);
   1adb2:	bf 93       	push	r27
   1adb4:	af 93       	push	r26
   1adb6:	9f 93       	push	r25
   1adb8:	8f 93       	push	r24
   1adba:	af 92       	push	r10
   1adbc:	bf 92       	push	r11
   1adbe:	8b e2       	ldi	r24, 0x2B	; 43
   1adc0:	9b e3       	ldi	r25, 0x3B	; 59
   1adc2:	1f 92       	push	r1
   1adc4:	9f 93       	push	r25
   1adc6:	8f 93       	push	r24
   1adc8:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1adcc:	0f b6       	in	r0, 0x3f	; 63
   1adce:	f8 94       	cli
   1add0:	de bf       	out	0x3e, r29	; 62
   1add2:	0f be       	out	0x3f, r0	; 63
   1add4:	cd bf       	out	0x3d, r28	; 61
   1add6:	70 c0       	rjmp	.+224    	; 0x1aeb8 <lif_open_volume+0x148>
        return(NULL);
    }


    // Allocate LIF structure
    LIF = lif_calloc(sizeof(lif_t)+4);
   1add8:	64 e7       	ldi	r22, 0x74	; 116
   1adda:	70 e0       	ldi	r23, 0x00	; 0
   1addc:	80 e0       	ldi	r24, 0x00	; 0
   1adde:	90 e0       	ldi	r25, 0x00	; 0
   1ade0:	0e 94 9b c6 	call	0x18d36	; 0x18d36 <lif_calloc>
   1ade4:	7c 01       	movw	r14, r24
    if(!LIF)
   1ade6:	89 2b       	or	r24, r25
   1ade8:	09 f4       	brne	.+2      	; 0x1adec <lif_open_volume+0x7c>
   1adea:	66 c0       	rjmp	.+204    	; 0x1aeb8 <lif_open_volume+0x148>
        return(NULL);

    LIF->name = lif_stralloc(name);
   1adec:	8b 2d       	mov	r24, r11
   1adee:	9a 2d       	mov	r25, r10
   1adf0:	0e 94 d7 c6 	call	0x18dae	; 0x18dae <lif_stralloc>
   1adf4:	f7 01       	movw	r30, r14
   1adf6:	91 83       	std	Z+1, r25	; 0x01
   1adf8:	80 83       	st	Z, r24
    if(!LIF->name)
   1adfa:	00 97       	sbiw	r24, 0x00	; 0
   1adfc:	09 f4       	brne	.+2      	; 0x1ae00 <lif_open_volume+0x90>
   1adfe:	5a c0       	rjmp	.+180    	; 0x1aeb4 <lif_open_volume+0x144>
    {
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
   1ae00:	f8 01       	movw	r30, r16
   1ae02:	00 8d       	ldd	r16, Z+24	; 0x18
   1ae04:	11 8d       	ldd	r17, Z+25	; 0x19
   1ae06:	22 8d       	ldd	r18, Z+26	; 0x1a
   1ae08:	33 8d       	ldd	r19, Z+27	; 0x1b
   1ae0a:	f7 01       	movw	r30, r14
   1ae0c:	00 87       	std	Z+8, r16	; 0x08
   1ae0e:	11 87       	std	Z+9, r17	; 0x09
   1ae10:	22 87       	std	Z+10, r18	; 0x0a
   1ae12:	33 87       	std	Z+11, r19	; 0x0b
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1ae14:	77 27       	eor	r23, r23
   1ae16:	63 2f       	mov	r22, r19
   1ae18:	52 2f       	mov	r21, r18
   1ae1a:	41 2f       	mov	r20, r17
    if(bytes % (long)LIF_SECTOR_SIZE)
   1ae1c:	00 23       	and	r16, r16
   1ae1e:	21 f0       	breq	.+8      	; 0x1ae28 <lif_open_volume+0xb8>
        ++sectors;
   1ae20:	4f 5f       	subi	r20, 0xFF	; 255
   1ae22:	5f 4f       	sbci	r21, 0xFF	; 255
   1ae24:	6f 4f       	sbci	r22, 0xFF	; 255
   1ae26:	7f 4f       	sbci	r23, 0xFF	; 255
        lif_closedir(LIF);
        return(NULL);
    }
        
    LIF->imagebytes = sp->st_size;
    LIF->sectors = lif_bytes2sectors(sp->st_size);
   1ae28:	f7 01       	movw	r30, r14
   1ae2a:	44 83       	std	Z+4, r20	; 0x04
   1ae2c:	55 83       	std	Z+5, r21	; 0x05
   1ae2e:	66 83       	std	Z+6, r22	; 0x06
   1ae30:	77 83       	std	Z+7, r23	; 0x07

    LIF->fp = lif_open(LIF->name,mode);
   1ae32:	b6 01       	movw	r22, r12
   1ae34:	0e 94 f6 c6 	call	0x18dec	; 0x18dec <lif_open>
   1ae38:	f7 01       	movw	r30, r14
   1ae3a:	93 83       	std	Z+3, r25	; 0x03
   1ae3c:	82 83       	std	Z+2, r24	; 0x02
    if(!LIF->fp)
   1ae3e:	89 2b       	or	r24, r25
   1ae40:	c9 f1       	breq	.+114    	; 0x1aeb4 <lif_open_volume+0x144>
        return(NULL);
    }
        
        
    // Volume header must be it least one sector
    if( lif_read(LIF, buffer, 0, LIF_SECTOR_SIZE) < LIF_SECTOR_SIZE)
   1ae42:	00 e0       	ldi	r16, 0x00	; 0
   1ae44:	11 e0       	ldi	r17, 0x01	; 1
   1ae46:	20 e0       	ldi	r18, 0x00	; 0
   1ae48:	30 e0       	ldi	r19, 0x00	; 0
   1ae4a:	a9 01       	movw	r20, r18
   1ae4c:	be 01       	movw	r22, r28
   1ae4e:	6f 5f       	subi	r22, 0xFF	; 255
   1ae50:	7f 4f       	sbci	r23, 0xFF	; 255
   1ae52:	c7 01       	movw	r24, r14
   1ae54:	0e 94 7c c7 	call	0x18ef8	; 0x18ef8 <lif_read>
   1ae58:	6f 3f       	cpi	r22, 0xFF	; 255
   1ae5a:	71 05       	cpc	r23, r1
   1ae5c:	81 05       	cpc	r24, r1
   1ae5e:	91 05       	cpc	r25, r1
   1ae60:	09 f0       	breq	.+2      	; 0x1ae64 <lif_open_volume+0xf4>
   1ae62:	4c f4       	brge	.+18     	; 0x1ae76 <lif_open_volume+0x106>
    {
        if(debuglevel & 1)
   1ae64:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1ae68:	80 ff       	sbrs	r24, 0
   1ae6a:	24 c0       	rjmp	.+72     	; 0x1aeb4 <lif_open_volume+0x144>
            printf("lif_open_volume:[%s] error read volume header failed\n", name);
   1ae6c:	af 92       	push	r10
   1ae6e:	bf 92       	push	r11
   1ae70:	85 ef       	ldi	r24, 0xF5	; 245
   1ae72:	9a e3       	ldi	r25, 0x3A	; 58
   1ae74:	15 c0       	rjmp	.+42     	; 0x1aea0 <lif_open_volume+0x130>
        lif_closedir(LIF);
        return(NULL);
    }

    // Unpack Volumes has the Directory start sector
    lif_str2vol(buffer, LIF);
   1ae76:	b7 01       	movw	r22, r14
   1ae78:	ce 01       	movw	r24, r28
   1ae7a:	01 96       	adiw	r24, 0x01	; 1
   1ae7c:	0e 94 97 c9 	call	0x1932e	; 0x1932e <lif_str2vol>

    // Validate basic Volume headers 
    if( !lif_check_volume(LIF) )
   1ae80:	c7 01       	movw	r24, r14
   1ae82:	0e 94 86 cd 	call	0x19b0c	; 0x19b0c <lif_check_volume>
   1ae86:	89 2b       	or	r24, r25
   1ae88:	d1 f4       	brne	.+52     	; 0x1aebe <lif_open_volume+0x14e>
    {
        if(debuglevel & 1)
   1ae8a:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1ae8e:	80 ff       	sbrs	r24, 0
   1ae90:	11 c0       	rjmp	.+34     	; 0x1aeb4 <lif_open_volume+0x144>
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
   1ae92:	f7 01       	movw	r30, r14
   1ae94:	81 81       	ldd	r24, Z+1	; 0x01
   1ae96:	8f 93       	push	r24
   1ae98:	80 81       	ld	r24, Z
   1ae9a:	8f 93       	push	r24
   1ae9c:	82 ec       	ldi	r24, 0xC2	; 194
   1ae9e:	9a e3       	ldi	r25, 0x3A	; 58
   1aea0:	1f 92       	push	r1
   1aea2:	9f 93       	push	r25
   1aea4:	8f 93       	push	r24
   1aea6:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1aeaa:	0f 90       	pop	r0
   1aeac:	0f 90       	pop	r0
   1aeae:	0f 90       	pop	r0
   1aeb0:	0f 90       	pop	r0
   1aeb2:	0f 90       	pop	r0
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1aeb4:	c7 01       	movw	r24, r14
   1aeb6:	b8 d8       	rcall	.-3728   	; 0x1a028 <lif_close_volume>
    if( !lif_check_volume(LIF) )
    {
        if(debuglevel & 1)
            printf("lif_open_volume:[%s] error volume validate failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1aeb8:	00 e0       	ldi	r16, 0x00	; 0
   1aeba:	10 e0       	ldi	r17, 0x00	; 0
   1aebc:	4b c0       	rjmp	.+150    	; 0x1af54 <lif_open_volume+0x1e4>
    }

    // Initialize remaining LIF headers
    LIF->filestart = LIF->VOL.DirStartSector + LIF->VOL.DirSectors;
   1aebe:	f7 01       	movw	r30, r14
   1aec0:	45 a5       	ldd	r20, Z+45	; 0x2d
   1aec2:	56 a5       	ldd	r21, Z+46	; 0x2e
   1aec4:	67 a5       	ldd	r22, Z+47	; 0x2f
   1aec6:	70 a9       	ldd	r23, Z+48	; 0x30
   1aec8:	85 a9       	ldd	r24, Z+53	; 0x35
   1aeca:	96 a9       	ldd	r25, Z+54	; 0x36
   1aecc:	a7 a9       	ldd	r26, Z+55	; 0x37
   1aece:	b0 ad       	ldd	r27, Z+56	; 0x38
   1aed0:	48 0f       	add	r20, r24
   1aed2:	59 1f       	adc	r21, r25
   1aed4:	6a 1f       	adc	r22, r26
   1aed6:	7b 1f       	adc	r23, r27
   1aed8:	44 87       	std	Z+12, r20	; 0x0c
   1aeda:	55 87       	std	Z+13, r21	; 0x0d
   1aedc:	66 87       	std	Z+14, r22	; 0x0e
   1aede:	77 87       	std	Z+15, r23	; 0x0f
    LIF->filesectors = LIF->sectors - LIF->filestart;
   1aee0:	84 81       	ldd	r24, Z+4	; 0x04
   1aee2:	95 81       	ldd	r25, Z+5	; 0x05
   1aee4:	a6 81       	ldd	r26, Z+6	; 0x06
   1aee6:	b7 81       	ldd	r27, Z+7	; 0x07
   1aee8:	84 1b       	sub	r24, r20
   1aeea:	95 0b       	sbc	r25, r21
   1aeec:	a6 0b       	sbc	r26, r22
   1aeee:	b7 0b       	sbc	r27, r23
   1aef0:	80 8b       	std	Z+16, r24	; 0x10
   1aef2:	91 8b       	std	Z+17, r25	; 0x11
   1aef4:	a2 8b       	std	Z+18, r26	; 0x12
   1aef6:	b3 8b       	std	Z+19, r27	; 0x13
    LIF->freesectors = LIF->filesectors;
   1aef8:	80 8f       	std	Z+24, r24	; 0x18
   1aefa:	91 8f       	std	Z+25, r25	; 0x19
   1aefc:	a2 8f       	std	Z+26, r26	; 0x1a
   1aefe:	b3 8f       	std	Z+27, r27	; 0x1b
    LIF->usedsectors = 0;
   1af00:	14 8a       	std	Z+20, r1	; 0x14
   1af02:	15 8a       	std	Z+21, r1	; 0x15
   1af04:	16 8a       	std	Z+22, r1	; 0x16
   1af06:	17 8a       	std	Z+23, r1	; 0x17
    LIF->purged = 0;
   1af08:	17 8e       	std	Z+31, r1	; 0x1f
   1af0a:	16 8e       	std	Z+30, r1	; 0x1e
    LIF->files = 0;
   1af0c:	15 8e       	std	Z+29, r1	; 0x1d
   1af0e:	14 8e       	std	Z+28, r1	; 0x1c
    LIF->dirindex = 0;
   1af10:	11 a2       	std	Z+33, r1	; 0x21
   1af12:	10 a2       	std	Z+32, r1	; 0x20
    LIF->EOFindex = 0;
   1af14:	13 a2       	std	Z+35, r1	; 0x23

    if( lif_updatefree(LIF) == NULL)
   1af16:	12 a2       	std	Z+34, r1	; 0x22
   1af18:	c7 01       	movw	r24, r14
   1af1a:	e4 d9       	rcall	.-3128   	; 0x1a2e4 <lif_updatefree>
   1af1c:	8c 01       	movw	r16, r24
   1af1e:	89 2b       	or	r24, r25
    {
        if(debuglevel & 1)
   1af20:	c1 f4       	brne	.+48     	; 0x1af52 <lif_open_volume+0x1e2>
   1af22:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1af26:	80 ff       	sbrs	r24, 0
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
   1af28:	11 c0       	rjmp	.+34     	; 0x1af4c <lif_open_volume+0x1dc>
   1af2a:	f7 01       	movw	r30, r14
   1af2c:	81 81       	ldd	r24, Z+1	; 0x01
   1af2e:	8f 93       	push	r24
   1af30:	80 81       	ld	r24, Z
   1af32:	8f 93       	push	r24
   1af34:	8f e8       	ldi	r24, 0x8F	; 143
   1af36:	9a e3       	ldi	r25, 0x3A	; 58
   1af38:	1f 92       	push	r1
   1af3a:	9f 93       	push	r25
   1af3c:	8f 93       	push	r24
   1af3e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1af42:	0f 90       	pop	r0
   1af44:	0f 90       	pop	r0
   1af46:	0f 90       	pop	r0
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1af48:	0f 90       	pop	r0
   1af4a:	0f 90       	pop	r0
   1af4c:	c7 01       	movw	r24, r14
    if( lif_updatefree(LIF) == NULL)
    {
        if(debuglevel & 1)
            printf("lif_open_volume:[%s] error directory check failed\n", LIF->name);
        lif_closedir(LIF);
        return(NULL);
   1af4e:	6c d8       	rcall	.-3880   	; 0x1a028 <lif_close_volume>
   1af50:	01 c0       	rjmp	.+2      	; 0x1af54 <lif_open_volume+0x1e4>
    }

    return( LIF );
}
   1af52:	87 01       	movw	r16, r14
   1af54:	c8 01       	movw	r24, r16
   1af56:	c0 5d       	subi	r28, 0xD0	; 208
   1af58:	de 4f       	sbci	r29, 0xFE	; 254
   1af5a:	ea e0       	ldi	r30, 0x0A	; 10
   1af5c:	0c 94 e5 e8 	jmp	0x1d1ca	; 0x1d1ca <__epilogue_restores__+0x10>

0001af60 <lif_dir>:
/// @brief Display a LIF image file directory
/// @param[in] lifimagename: LIF disk image name
/// @return -1 on error or number of files found
MEMSPACE
void lif_dir(char *lifimagename)
{
   1af60:	a1 e1       	ldi	r26, 0x11	; 17
   1af62:	b0 e0       	ldi	r27, 0x00	; 0
   1af64:	e6 eb       	ldi	r30, 0xB6	; 182
   1af66:	f7 ed       	ldi	r31, 0xD7	; 215
   1af68:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__prologue_saves__>
    int index = 0;
    char *vol;

    int warn = ' ';

    LIF = lif_open_volume(lifimagename,"rb+");
   1af6c:	65 e6       	ldi	r22, 0x65	; 101
   1af6e:	78 e0       	ldi	r23, 0x08	; 8
   1af70:	ff de       	rcall	.-514    	; 0x1ad70 <lif_open_volume>
   1af72:	99 8b       	std	Y+17, r25	; 0x11
   1af74:	88 8b       	std	Y+16, r24	; 0x10
    if(LIF == NULL)
   1af76:	00 97       	sbiw	r24, 0x00	; 0
   1af78:	09 f4       	brne	.+2      	; 0x1af7c <lif_dir+0x1c>
   1af7a:	5b c1       	rjmp	.+694    	; 0x1b232 <lif_dir+0x2d2>
        return;

    vol = (char *)LIF->VOL.Label;
    if(!vol[0])
   1af7c:	fc 01       	movw	r30, r24
   1af7e:	86 a1       	ldd	r24, Z+38	; 0x26
   1af80:	88 23       	and	r24, r24
   1af82:	21 f0       	breq	.+8      	; 0x1af8c <lif_dir+0x2c>

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return;

    vol = (char *)LIF->VOL.Label;
   1af84:	8f 01       	movw	r16, r30
   1af86:	0a 5d       	subi	r16, 0xDA	; 218
   1af88:	1f 4f       	sbci	r17, 0xFF	; 255
   1af8a:	02 c0       	rjmp	.+4      	; 0x1af90 <lif_dir+0x30>
    if(!vol[0])
        vol = "<EMPTY>";
   1af8c:	03 e9       	ldi	r16, 0x93	; 147
   1af8e:	15 e1       	ldi	r17, 0x15	; 21

    printf("Volume:[%s] Date:[%s]\n", vol, lif_lifbcd2timestr(LIF->VOL.date));
   1af90:	88 89       	ldd	r24, Y+16	; 0x10
   1af92:	99 89       	ldd	r25, Y+17	; 0x11
   1af94:	87 5b       	subi	r24, 0xB7	; 183
   1af96:	9f 4f       	sbci	r25, 0xFF	; 255
   1af98:	0e 94 b7 cb 	call	0x1976e	; 0x1976e <lif_lifbcd2timestr>
   1af9c:	9f 93       	push	r25
   1af9e:	8f 93       	push	r24
   1afa0:	1f 93       	push	r17
   1afa2:	0f 93       	push	r16
   1afa4:	88 e7       	ldi	r24, 0x78	; 120
   1afa6:	9a e3       	ldi	r25, 0x3A	; 58
   1afa8:	1f 92       	push	r1
   1afaa:	9f 93       	push	r25
   1afac:	8f 93       	push	r24
   1afae:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
   1afb2:	88 e3       	ldi	r24, 0x38	; 56
   1afb4:	9a e3       	ldi	r25, 0x3A	; 58
   1afb6:	1f 92       	push	r1
   1afb8:	9f 93       	push	r25
   1afba:	8f 93       	push	r24
   1afbc:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1afc0:	0f b6       	in	r0, 0x3f	; 63
   1afc2:	f8 94       	cli
   1afc4:	de bf       	out	0x3e, r29	; 62
   1afc6:	0f be       	out	0x3f, r0	; 63
   1afc8:	cd bf       	out	0x3d, r28	; 61
    long bytes;
    lif_t *LIF;
    int index = 0;
    char *vol;

    int warn = ' ';
   1afca:	60 e2       	ldi	r22, 0x20	; 32
   1afcc:	96 2e       	mov	r9, r22
MEMSPACE
void lif_dir(char *lifimagename)
{
    long bytes;
    lif_t *LIF;
    int index = 0;
   1afce:	00 e0       	ldi	r16, 0x00	; 0
   1afd0:	10 e0       	ldi	r17, 0x00	; 0

        if(!lif_readdirindex(LIF,index))
            break;


        if(LIF->DIR.FileType == 0xffff)
   1afd2:	88 89       	ldd	r24, Y+16	; 0x10
   1afd4:	99 89       	ldd	r25, Y+17	; 0x11
   1afd6:	86 5a       	subi	r24, 0xA6	; 166
   1afd8:	9f 4f       	sbci	r25, 0xFF	; 255
   1afda:	9c 83       	std	Y+4, r25	; 0x04
   1afdc:	8b 83       	std	Y+3, r24	; 0x03
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1afde:	e8 89       	ldd	r30, Y+16	; 0x10
   1afe0:	f9 89       	ldd	r31, Y+17	; 0x11
   1afe2:	e0 5a       	subi	r30, 0xA0	; 160
   1afe4:	ff 4f       	sbci	r31, 0xFF	; 255
   1afe6:	fb 87       	std	Y+11, r31	; 0x0b
   1afe8:	ea 87       	std	Y+10, r30	; 0x0a

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1afea:	28 89       	ldd	r18, Y+16	; 0x10
   1afec:	39 89       	ldd	r19, Y+17	; 0x11
   1afee:	24 59       	subi	r18, 0x94	; 148
   1aff0:	3f 4f       	sbci	r19, 0xFF	; 255
   1aff2:	3d 87       	std	Y+13, r19	; 0x0d
   1aff4:	2c 87       	std	Y+12, r18	; 0x0c
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1aff6:	88 89       	ldd	r24, Y+16	; 0x10
   1aff8:	99 89       	ldd	r25, Y+17	; 0x11
   1affa:	81 5b       	subi	r24, 0xB1	; 177
   1affc:	9f 4f       	sbci	r25, 0xFF	; 255
   1affe:	9a 83       	std	Y+2, r25	; 0x02
   1b000:	89 83       	std	Y+1, r24	; 0x01
   1b002:	8c ee       	ldi	r24, 0xEC	; 236
   1b004:	99 e3       	ldi	r25, 0x39	; 57
   1b006:	3c 01       	movw	r6, r24
   1b008:	81 2c       	mov	r8, r1
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1b00a:	e8 89       	ldd	r30, Y+16	; 0x10
   1b00c:	f9 89       	ldd	r31, Y+17	; 0x11
   1b00e:	ec 59       	subi	r30, 0x9C	; 156
   1b010:	ff 4f       	sbci	r31, 0xFF	; 255
   1b012:	ff 87       	std	Y+15, r31	; 0x0f
   1b014:	ee 87       	std	Y+14, r30	; 0x0e
   1b016:	28 89       	ldd	r18, Y+16	; 0x10
   1b018:	39 89       	ldd	r19, Y+17	; 0x11
   1b01a:	22 59       	subi	r18, 0x92	; 146
   1b01c:	3f 4f       	sbci	r19, 0xFF	; 255
   1b01e:	3e 83       	std	Y+6, r19	; 0x06
   1b020:	2d 83       	std	Y+5, r18	; 0x05
   1b022:	a8 88       	ldd	r10, Y+16	; 0x10
   1b024:	b9 88       	ldd	r11, Y+17	; 0x11
   1b026:	3c e5       	ldi	r19, 0x5C	; 92
   1b028:	a3 0e       	add	r10, r19
   1b02a:	b1 1c       	adc	r11, r1
   1b02c:	8c eb       	ldi	r24, 0xBC	; 188
   1b02e:	99 e3       	ldi	r25, 0x39	; 57
   1b030:	9c 01       	movw	r18, r24
   1b032:	40 e0       	ldi	r20, 0x00	; 0
   1b034:	2f 83       	std	Y+7, r18	; 0x07
   1b036:	38 87       	std	Y+8, r19	; 0x08
   1b038:	49 87       	std	Y+9, r20	; 0x09
    
    printf("NAME         TYPE   START SECTOR        SIZE    RECSIZE   DATE\n");
    while(1)
    {

        if(!lif_readdirindex(LIF,index))
   1b03a:	b8 01       	movw	r22, r16
   1b03c:	88 89       	ldd	r24, Y+16	; 0x10
   1b03e:	99 89       	ldd	r25, Y+17	; 0x11
   1b040:	74 d8       	rcall	.-3864   	; 0x1a12a <lif_readdirindex>
   1b042:	89 2b       	or	r24, r25
   1b044:	09 f4       	brne	.+2      	; 0x1b048 <lif_dir+0xe8>
   1b046:	9d c0       	rjmp	.+314    	; 0x1b182 <lif_dir+0x222>
            break;


        if(LIF->DIR.FileType == 0xffff)
   1b048:	eb 81       	ldd	r30, Y+3	; 0x03
   1b04a:	fc 81       	ldd	r31, Y+4	; 0x04
   1b04c:	20 81       	ld	r18, Z
   1b04e:	31 81       	ldd	r19, Z+1	; 0x01
   1b050:	2f 3f       	cpi	r18, 0xFF	; 255
   1b052:	ff ef       	ldi	r31, 0xFF	; 255
   1b054:	3f 07       	cpc	r19, r31
   1b056:	09 f4       	brne	.+2      	; 0x1b05a <lif_dir+0xfa>
   1b058:	94 c0       	rjmp	.+296    	; 0x1b182 <lif_dir+0x222>
            break;

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);
   1b05a:	ea 85       	ldd	r30, Y+10	; 0x0a
   1b05c:	fb 85       	ldd	r31, Y+11	; 0x0b
   1b05e:	80 81       	ld	r24, Z
   1b060:	91 81       	ldd	r25, Z+1	; 0x01
   1b062:	a2 81       	ldd	r26, Z+2	; 0x02
   1b064:	b3 81       	ldd	r27, Z+3	; 0x03
   1b066:	cc 24       	eor	r12, r12
   1b068:	d8 2e       	mov	r13, r24
   1b06a:	e9 2e       	mov	r14, r25
   1b06c:	fa 2e       	mov	r15, r26

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
   1b06e:	2c 7f       	andi	r18, 0xFC	; 252
   1b070:	20 31       	cpi	r18, 0x10	; 16
   1b072:	30 4e       	sbci	r19, 0xE0	; 224
   1b074:	09 f0       	breq	.+2      	; 0x1b078 <lif_dir+0x118>
   1b076:	4b c0       	rjmp	.+150    	; 0x1b10e <lif_dir+0x1ae>
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1b078:	ec 85       	ldd	r30, Y+12	; 0x0c
   1b07a:	fd 85       	ldd	r31, Y+13	; 0x0d
   1b07c:	20 81       	ld	r18, Z
   1b07e:	31 81       	ldd	r19, Z+1	; 0x01
   1b080:	21 15       	cp	r18, r1
   1b082:	31 05       	cpc	r19, r1
   1b084:	a9 f0       	breq	.+42     	; 0x1b0b0 <lif_dir+0x150>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1b086:	19 01       	movw	r2, r18
   1b088:	41 2c       	mov	r4, r1
   1b08a:	51 2c       	mov	r5, r1
   1b08c:	77 27       	eor	r23, r23
   1b08e:	65 2d       	mov	r22, r5
   1b090:	54 2d       	mov	r21, r4
   1b092:	43 2d       	mov	r20, r3
    if(bytes % (long)LIF_SECTOR_SIZE)
   1b094:	22 23       	and	r18, r18
   1b096:	21 f0       	breq	.+8      	; 0x1b0a0 <lif_dir+0x140>
        ++sectors;
   1b098:	4f 5f       	subi	r20, 0xFF	; 255
   1b09a:	5f 4f       	sbci	r21, 0xFF	; 255
   1b09c:	6f 4f       	sbci	r22, 0xFF	; 255
   1b09e:	7f 4f       	sbci	r23, 0xFF	; 255

        bytes = (LIF->DIR.FileSectors * (long)LIF_SECTOR_SIZE);

        if((LIF->DIR.FileType & 0xFFFC) == 0xE010)
        {
            if(LIF->DIR.FileBytes && lif_bytes2sectors(LIF->DIR.FileBytes) == LIF->DIR.FileSectors)
   1b0a0:	84 17       	cp	r24, r20
   1b0a2:	95 07       	cpc	r25, r21
   1b0a4:	a6 07       	cpc	r26, r22
   1b0a6:	b7 07       	cpc	r27, r23
   1b0a8:	19 f4       	brne	.+6      	; 0x1b0b0 <lif_dir+0x150>
            {
                bytes = LIF->DIR.FileBytes;
   1b0aa:	72 01       	movw	r14, r4
   1b0ac:	61 01       	movw	r12, r2
   1b0ae:	2f c0       	rjmp	.+94     	; 0x1b10e <lif_dir+0x1ae>
            }
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
   1b0b0:	40 91 b0 01 	lds	r20, 0x01B0	; 0x8001b0 <debuglevel>
   1b0b4:	50 91 b1 01 	lds	r21, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1b0b8:	52 ff       	sbrs	r21, 2
   1b0ba:	27 c0       	rjmp	.+78     	; 0x1b10a <lif_dir+0x1aa>
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1b0bc:	19 01       	movw	r2, r18
   1b0be:	41 2c       	mov	r4, r1
   1b0c0:	51 2c       	mov	r5, r1
   1b0c2:	77 27       	eor	r23, r23
   1b0c4:	65 2d       	mov	r22, r5
   1b0c6:	54 2d       	mov	r21, r4
   1b0c8:	43 2d       	mov	r20, r3
    if(bytes % (long)LIF_SECTOR_SIZE)
   1b0ca:	22 23       	and	r18, r18
   1b0cc:	21 f0       	breq	.+8      	; 0x1b0d6 <lif_dir+0x176>
        ++sectors;
   1b0ce:	4f 5f       	subi	r20, 0xFF	; 255
   1b0d0:	5f 4f       	sbci	r21, 0xFF	; 255
   1b0d2:	6f 4f       	sbci	r22, 0xFF	; 255
   1b0d4:	7f 4f       	sbci	r23, 0xFF	; 255
            else
            {
                warn = '!';
                if(debuglevel & 0x400)
                {
                    printf("LIF Directory:[%s] warning FileBytes:%ld as sectors:%ld != FileSectors:%ld\n", 
   1b0d6:	bf 93       	push	r27
   1b0d8:	af 93       	push	r26
   1b0da:	9f 93       	push	r25
   1b0dc:	8f 93       	push	r24
   1b0de:	7f 93       	push	r23
   1b0e0:	6f 93       	push	r22
   1b0e2:	5f 93       	push	r21
   1b0e4:	4f 93       	push	r20
   1b0e6:	1f 92       	push	r1
   1b0e8:	1f 92       	push	r1
   1b0ea:	3f 92       	push	r3
   1b0ec:	2f 92       	push	r2
   1b0ee:	fa 81       	ldd	r31, Y+2	; 0x02
   1b0f0:	ff 93       	push	r31
   1b0f2:	29 81       	ldd	r18, Y+1	; 0x01
   1b0f4:	2f 93       	push	r18
   1b0f6:	1f 92       	push	r1
   1b0f8:	7f 92       	push	r7
   1b0fa:	6f 92       	push	r6
   1b0fc:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1b100:	0f b6       	in	r0, 0x3f	; 63
   1b102:	f8 94       	cli
   1b104:	de bf       	out	0x3e, r29	; 62
   1b106:	0f be       	out	0x3f, r0	; 63
   1b108:	cd bf       	out	0x3d, r28	; 61
            {
                bytes = LIF->DIR.FileBytes;
            }
            else
            {
                warn = '!';
   1b10a:	81 e2       	ldi	r24, 0x21	; 33
   1b10c:	98 2e       	mov	r9, r24
            }
        }


        // name type start size
        printf("%-10s  %04Xh      %8lXh   %9ld%c      %4d   %s\n", 
   1b10e:	8e 85       	ldd	r24, Y+14	; 0x0e
   1b110:	9f 85       	ldd	r25, Y+15	; 0x0f
   1b112:	0e 94 b7 cb 	call	0x1976e	; 0x1976e <lif_lifbcd2timestr>
   1b116:	ed 81       	ldd	r30, Y+5	; 0x05
   1b118:	fe 81       	ldd	r31, Y+6	; 0x06
   1b11a:	a0 81       	ld	r26, Z
   1b11c:	b1 81       	ldd	r27, Z+1	; 0x01
   1b11e:	f5 01       	movw	r30, r10
   1b120:	60 81       	ld	r22, Z
   1b122:	71 81       	ldd	r23, Z+1	; 0x01
   1b124:	52 80       	ldd	r5, Z+2	; 0x02
   1b126:	43 80       	ldd	r4, Z+3	; 0x03
   1b128:	eb 81       	ldd	r30, Y+3	; 0x03
   1b12a:	fc 81       	ldd	r31, Y+4	; 0x04
   1b12c:	40 81       	ld	r20, Z
   1b12e:	51 81       	ldd	r21, Z+1	; 0x01
   1b130:	41 15       	cp	r20, r1
   1b132:	51 05       	cpc	r21, r1
   1b134:	19 f0       	breq	.+6      	; 0x1b13c <lif_dir+0x1dc>
   1b136:	29 81       	ldd	r18, Y+1	; 0x01
   1b138:	3a 81       	ldd	r19, Y+2	; 0x02
   1b13a:	02 c0       	rjmp	.+4      	; 0x1b140 <lif_dir+0x1e0>
   1b13c:	21 ee       	ldi	r18, 0xE1	; 225
   1b13e:	35 e1       	ldi	r19, 0x15	; 21
   1b140:	9f 93       	push	r25
   1b142:	8f 93       	push	r24
   1b144:	bf 93       	push	r27
   1b146:	af 93       	push	r26
   1b148:	1f 92       	push	r1
   1b14a:	9f 92       	push	r9
   1b14c:	ff 92       	push	r15
   1b14e:	ef 92       	push	r14
   1b150:	df 92       	push	r13
   1b152:	cf 92       	push	r12
   1b154:	4f 92       	push	r4
   1b156:	5f 92       	push	r5
   1b158:	7f 93       	push	r23
   1b15a:	6f 93       	push	r22
   1b15c:	5f 93       	push	r21
   1b15e:	4f 93       	push	r20
   1b160:	3f 93       	push	r19
   1b162:	2f 93       	push	r18
   1b164:	1f 92       	push	r1
   1b166:	f8 85       	ldd	r31, Y+8	; 0x08
   1b168:	ff 93       	push	r31
   1b16a:	2f 81       	ldd	r18, Y+7	; 0x07
   1b16c:	2f 93       	push	r18
   1b16e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
            (long)bytes, 
            warn,
            (int)LIF->DIR.SectorSize,
            lif_lifbcd2timestr(LIF->DIR.date));

        ++index;
   1b172:	0f 5f       	subi	r16, 0xFF	; 255
   1b174:	1f 4f       	sbci	r17, 0xFF	; 255
    }   
   1b176:	0f b6       	in	r0, 0x3f	; 63
   1b178:	f8 94       	cli
   1b17a:	de bf       	out	0x3e, r29	; 62
   1b17c:	0f be       	out	0x3f, r0	; 63
   1b17e:	cd bf       	out	0x3d, r28	; 61
   1b180:	5c cf       	rjmp	.-328    	; 0x1b03a <lif_dir+0xda>

    printf("\n");
   1b182:	8a eb       	ldi	r24, 0xBA	; 186
   1b184:	99 e3       	ldi	r25, 0x39	; 57
   1b186:	1f 92       	push	r1
   1b188:	9f 93       	push	r25
   1b18a:	8f 93       	push	r24
   1b18c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    printf("%8ld Files\n", (long)LIF->files);
   1b190:	e8 89       	ldd	r30, Y+16	; 0x10
   1b192:	f9 89       	ldd	r31, Y+17	; 0x11
   1b194:	84 8d       	ldd	r24, Z+28	; 0x1c
   1b196:	95 8d       	ldd	r25, Z+29	; 0x1d
   1b198:	09 2e       	mov	r0, r25
   1b19a:	00 0c       	add	r0, r0
   1b19c:	aa 0b       	sbc	r26, r26
   1b19e:	bb 0b       	sbc	r27, r27
   1b1a0:	bf 93       	push	r27
   1b1a2:	af 93       	push	r26
   1b1a4:	9f 93       	push	r25
   1b1a6:	8f 93       	push	r24
   1b1a8:	8e ea       	ldi	r24, 0xAE	; 174
   1b1aa:	99 e3       	ldi	r25, 0x39	; 57
   1b1ac:	1f 92       	push	r1
   1b1ae:	9f 93       	push	r25
   1b1b0:	8f 93       	push	r24
   1b1b2:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    printf("%8ld Purged\n", (long)LIF->purged);
   1b1b6:	e8 89       	ldd	r30, Y+16	; 0x10
   1b1b8:	f9 89       	ldd	r31, Y+17	; 0x11
   1b1ba:	86 8d       	ldd	r24, Z+30	; 0x1e
   1b1bc:	97 8d       	ldd	r25, Z+31	; 0x1f
   1b1be:	09 2e       	mov	r0, r25
   1b1c0:	00 0c       	add	r0, r0
   1b1c2:	aa 0b       	sbc	r26, r26
   1b1c4:	bb 0b       	sbc	r27, r27
   1b1c6:	bf 93       	push	r27
   1b1c8:	af 93       	push	r26
   1b1ca:	9f 93       	push	r25
   1b1cc:	8f 93       	push	r24
   1b1ce:	81 ea       	ldi	r24, 0xA1	; 161
   1b1d0:	99 e3       	ldi	r25, 0x39	; 57
   1b1d2:	1f 92       	push	r1
   1b1d4:	9f 93       	push	r25
   1b1d6:	8f 93       	push	r24
   1b1d8:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
   1b1dc:	e8 89       	ldd	r30, Y+16	; 0x10
   1b1de:	f9 89       	ldd	r31, Y+17	; 0x11
   1b1e0:	87 89       	ldd	r24, Z+23	; 0x17
   1b1e2:	8f 93       	push	r24
   1b1e4:	86 89       	ldd	r24, Z+22	; 0x16
   1b1e6:	8f 93       	push	r24
   1b1e8:	85 89       	ldd	r24, Z+21	; 0x15
   1b1ea:	8f 93       	push	r24
   1b1ec:	84 89       	ldd	r24, Z+20	; 0x14
   1b1ee:	8f 93       	push	r24
   1b1f0:	8e e8       	ldi	r24, 0x8E	; 142
   1b1f2:	99 e3       	ldi	r25, 0x39	; 57
   1b1f4:	1f 92       	push	r1
   1b1f6:	9f 93       	push	r25
   1b1f8:	8f 93       	push	r24
   1b1fa:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    printf("%8ld Free sectors\n", (long)LIF->freesectors);
   1b1fe:	e8 89       	ldd	r30, Y+16	; 0x10
   1b200:	f9 89       	ldd	r31, Y+17	; 0x11
   1b202:	83 8d       	ldd	r24, Z+27	; 0x1b
   1b204:	8f 93       	push	r24
   1b206:	82 8d       	ldd	r24, Z+26	; 0x1a
   1b208:	8f 93       	push	r24
   1b20a:	81 8d       	ldd	r24, Z+25	; 0x19
   1b20c:	8f 93       	push	r24
   1b20e:	80 8d       	ldd	r24, Z+24	; 0x18
   1b210:	8f 93       	push	r24
   1b212:	8b e7       	ldi	r24, 0x7B	; 123
   1b214:	99 e3       	ldi	r25, 0x39	; 57
   1b216:	1f 92       	push	r1
   1b218:	9f 93       	push	r25
   1b21a:	8f 93       	push	r24
   1b21c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b220:	88 89       	ldd	r24, Y+16	; 0x10
   1b222:	99 89       	ldd	r25, Y+17	; 0x11
   1b224:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>
   1b228:	0f b6       	in	r0, 0x3f	; 63
   1b22a:	f8 94       	cli
   1b22c:	de bf       	out	0x3e, r29	; 62
   1b22e:	0f be       	out	0x3f, r0	; 63
   1b230:	cd bf       	out	0x3d, r28	; 61
    printf("%8ld Purged\n", (long)LIF->purged);
    printf("%8ld Used sectors\n", (long)LIF->usedsectors);
    printf("%8ld Free sectors\n", (long)LIF->freesectors);

    lif_closedir(LIF);
}
   1b232:	61 96       	adiw	r28, 0x11	; 17
   1b234:	e2 e1       	ldi	r30, 0x12	; 18
   1b236:	0c 94 dd e8 	jmp	0x1d1ba	; 0x1d1ba <__epilogue_restores__>

0001b23a <lif_find_file>:
/// @param[in] *LIF: directory pointer
/// @param[in] liflabel: File name in LIF image
/// @return Directory index of record
MEMSPACE
int lif_find_file(lif_t *LIF, char *liflabel)
{
   1b23a:	a0 e0       	ldi	r26, 0x00	; 0
   1b23c:	b0 e0       	ldi	r27, 0x00	; 0
   1b23e:	e3 e2       	ldi	r30, 0x23	; 35
   1b240:	f9 ed       	ldi	r31, 0xD9	; 217
   1b242:	0c 94 c9 e8 	jmp	0x1d192	; 0x1d192 <__prologue_saves__+0x10>
   1b246:	7c 01       	movw	r14, r24
   1b248:	16 2f       	mov	r17, r22
   1b24a:	07 2f       	mov	r16, r23
    int index;

    if( !lif_checkname(liflabel) )
   1b24c:	86 2f       	mov	r24, r22
   1b24e:	97 2f       	mov	r25, r23
   1b250:	0e 94 88 c8 	call	0x19110	; 0x19110 <lif_checkname>
   1b254:	89 2b       	or	r24, r25
   1b256:	49 f4       	brne	.+18     	; 0x1b26a <lif_find_file+0x30>
    {
        if(debuglevel & 1)
   1b258:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1b25c:	80 ff       	sbrs	r24, 0
   1b25e:	48 c0       	rjmp	.+144    	; 0x1b2f0 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
   1b260:	0f 93       	push	r16
   1b262:	1f 93       	push	r17
   1b264:	84 e5       	ldi	r24, 0x54	; 84
   1b266:	99 e3       	ldi	r25, 0x39	; 57
   1b268:	13 c0       	rjmp	.+38     	; 0x1b290 <lif_find_file+0x56>
        return(-1);
    }
    if(strlen(liflabel) > 10)
   1b26a:	a1 2f       	mov	r26, r17
   1b26c:	b0 2f       	mov	r27, r16
   1b26e:	fd 01       	movw	r30, r26
   1b270:	01 90       	ld	r0, Z+
   1b272:	00 20       	and	r0, r0
   1b274:	e9 f7       	brne	.-6      	; 0x1b270 <lif_find_file+0x36>
   1b276:	31 97       	sbiw	r30, 0x01	; 1
   1b278:	ea 1b       	sub	r30, r26
   1b27a:	fb 0b       	sbc	r31, r27
   1b27c:	3b 97       	sbiw	r30, 0x0b	; 11
   1b27e:	98 f0       	brcs	.+38     	; 0x1b2a6 <lif_find_file+0x6c>
    {
        if(debuglevel & 1)
   1b280:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1b284:	80 ff       	sbrs	r24, 0
   1b286:	34 c0       	rjmp	.+104    	; 0x1b2f0 <lif_find_file+0xb6>
            printf("lif_find_file:[%s] liflabel too big\n", liflabel);
   1b288:	0f 93       	push	r16
   1b28a:	1f 93       	push	r17
   1b28c:	8f e2       	ldi	r24, 0x2F	; 47
   1b28e:	99 e3       	ldi	r25, 0x39	; 57
   1b290:	1f 92       	push	r1
   1b292:	9f 93       	push	r25
   1b294:	8f 93       	push	r24
   1b296:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1b29a:	0f 90       	pop	r0
   1b29c:	0f 90       	pop	r0
   1b29e:	0f 90       	pop	r0
   1b2a0:	0f 90       	pop	r0
   1b2a2:	0f 90       	pop	r0
   1b2a4:	25 c0       	rjmp	.+74     	; 0x1b2f0 <lif_find_file+0xb6>
        return(-1);
    }

    if(LIF == NULL)
   1b2a6:	e1 14       	cp	r14, r1
   1b2a8:	f1 04       	cpc	r15, r1
   1b2aa:	11 f1       	breq	.+68     	; 0x1b2f0 <lif_find_file+0xb6>
   1b2ac:	c0 e0       	ldi	r28, 0x00	; 0
   1b2ae:	d0 e0       	ldi	r29, 0x00	; 0
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1b2b0:	67 01       	movw	r12, r14
   1b2b2:	2a e5       	ldi	r18, 0x5A	; 90
   1b2b4:	c2 0e       	add	r12, r18
   1b2b6:	d1 1c       	adc	r13, r1
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1b2b8:	57 01       	movw	r10, r14
   1b2ba:	8f e4       	ldi	r24, 0x4F	; 79
   1b2bc:	a8 0e       	add	r10, r24
   1b2be:	b1 1c       	adc	r11, r1
        return(-1);
    
    index = 0;
    while(1)
    {
        if(!lif_readdirindex(LIF,index))
   1b2c0:	be 01       	movw	r22, r28
   1b2c2:	c7 01       	movw	r24, r14
   1b2c4:	0e 94 95 d0 	call	0x1a12a	; 0x1a12a <lif_readdirindex>
   1b2c8:	89 2b       	or	r24, r25
   1b2ca:	91 f0       	breq	.+36     	; 0x1b2f0 <lif_find_file+0xb6>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
   1b2cc:	f6 01       	movw	r30, r12
   1b2ce:	80 81       	ld	r24, Z
   1b2d0:	91 81       	ldd	r25, Z+1	; 0x01
   1b2d2:	8f 3f       	cpi	r24, 0xFF	; 255
   1b2d4:	ff ef       	ldi	r31, 0xFF	; 255
   1b2d6:	9f 07       	cpc	r25, r31
   1b2d8:	59 f0       	breq	.+22     	; 0x1b2f0 <lif_find_file+0xb6>
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1b2da:	89 2b       	or	r24, r25
   1b2dc:	39 f0       	breq	.+14     	; 0x1b2ec <lif_find_file+0xb2>
   1b2de:	61 2f       	mov	r22, r17
   1b2e0:	70 2f       	mov	r23, r16
   1b2e2:	c5 01       	movw	r24, r10
   1b2e4:	0e 94 a3 30 	call	0x6146	; 0x6146 <strcasecmp>
   1b2e8:	89 2b       	or	r24, r25
   1b2ea:	29 f0       	breq	.+10     	; 0x1b2f6 <lif_find_file+0xbc>
            break;
        ++index;
   1b2ec:	21 96       	adiw	r28, 0x01	; 1
   1b2ee:	e8 cf       	rjmp	.-48     	; 0x1b2c0 <lif_find_file+0x86>

    if( !lif_checkname(liflabel) )
    {
        if(debuglevel & 1)
            printf("lif_find_file:[%s] invalid characters\n", liflabel);
        return(-1);
   1b2f0:	8f ef       	ldi	r24, 0xFF	; 255
   1b2f2:	9f ef       	ldi	r25, 0xFF	; 255
   1b2f4:	01 c0       	rjmp	.+2      	; 0x1b2f8 <lif_find_file+0xbe>
            return(-1);

        if(LIF->DIR.FileType == 0xffff)
            return(-1);

        if( LIF->DIR.FileType && (strcasecmp((char *)LIF->DIR.filename,liflabel) == 0) )
   1b2f6:	ce 01       	movw	r24, r28
            break;
        ++index;
    }
    return(index);
}
   1b2f8:	cd b7       	in	r28, 0x3d	; 61
   1b2fa:	de b7       	in	r29, 0x3e	; 62
   1b2fc:	ea e0       	ldi	r30, 0x0A	; 10
   1b2fe:	0c 94 e5 e8 	jmp	0x1d1ca	; 0x1d1ca <__epilogue_restores__+0x10>

0001b302 <lif_e010_pad_sector>:
/// @param[in] offset: sector offset
/// @param[in] wbuf: E010 PAD data
/// @return size of E010 PAD data
MEMSPACE
int lif_e010_pad_sector(long offset, uint8_t *wbuf)
{
   1b302:	a0 e0       	ldi	r26, 0x00	; 0
   1b304:	b0 e0       	ldi	r27, 0x00	; 0
   1b306:	e7 e8       	ldi	r30, 0x87	; 135
   1b308:	f9 ed       	ldi	r31, 0xD9	; 217
   1b30a:	0c 94 cb e8 	jmp	0x1d196	; 0x1d196 <__prologue_saves__+0x14>
   1b30e:	6b 01       	movw	r12, r22
   1b310:	7c 01       	movw	r14, r24
   1b312:	8a 01       	movw	r16, r20
    int ind;
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
   1b314:	20 e0       	ldi	r18, 0x00	; 0
   1b316:	31 e0       	ldi	r19, 0x01	; 1
   1b318:	40 e0       	ldi	r20, 0x00	; 0
   1b31a:	50 e0       	ldi	r21, 0x00	; 0
   1b31c:	0e 94 76 e8 	call	0x1d0ec	; 0x1d0ec <__divmodsi4>
    if(!pos)
   1b320:	61 15       	cp	r22, r1
   1b322:	71 05       	cpc	r23, r1
   1b324:	e1 f1       	breq	.+120    	; 0x1b39e <lif_e010_pad_sector+0x9c>
        return(0);

    // Number of bytes free in this sector
    rem = (long)LIF_SECTOR_SIZE - (long)pos;
   1b326:	c0 e0       	ldi	r28, 0x00	; 0
   1b328:	d1 e0       	ldi	r29, 0x01	; 1
   1b32a:	c6 1b       	sub	r28, r22
   1b32c:	d7 0b       	sbc	r29, r23

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
   1b32e:	f8 01       	movw	r30, r16
   1b330:	8f ee       	ldi	r24, 0xEF	; 239
   1b332:	81 93       	st	Z+, r24
    while(ind<rem)
        wbuf[ind++] = 0xff;
   1b334:	2f ef       	ldi	r18, 0xFF	; 255

    // Bytes written to wbuf
    ind = 0;
    // PAD
    wbuf[ind++] = 0xEF;
    while(ind<rem)
   1b336:	cf 01       	movw	r24, r30
   1b338:	80 1b       	sub	r24, r16
   1b33a:	91 0b       	sbc	r25, r17
   1b33c:	8c 17       	cp	r24, r28
   1b33e:	9d 07       	cpc	r25, r29
   1b340:	14 f4       	brge	.+4      	; 0x1b346 <lif_e010_pad_sector+0x44>
        wbuf[ind++] = 0xff;
   1b342:	21 93       	st	Z+, r18
   1b344:	f8 cf       	rjmp	.-16     	; 0x1b336 <lif_e010_pad_sector+0x34>
   1b346:	1c 16       	cp	r1, r28
   1b348:	1d 06       	cpc	r1, r29
   1b34a:	14 f0       	brlt	.+4      	; 0x1b350 <lif_e010_pad_sector+0x4e>
   1b34c:	c1 e0       	ldi	r28, 0x01	; 1
   1b34e:	d0 e0       	ldi	r29, 0x00	; 0

    pos = (offset + (long) ind)  % (long) LIF_SECTOR_SIZE;
   1b350:	ce 01       	movw	r24, r28
   1b352:	0d 2e       	mov	r0, r29
   1b354:	00 0c       	add	r0, r0
   1b356:	aa 0b       	sbc	r26, r26
   1b358:	bb 0b       	sbc	r27, r27
   1b35a:	bc 01       	movw	r22, r24
   1b35c:	cd 01       	movw	r24, r26
   1b35e:	6c 0d       	add	r22, r12
   1b360:	7d 1d       	adc	r23, r13
   1b362:	8e 1d       	adc	r24, r14
   1b364:	9f 1d       	adc	r25, r15
   1b366:	20 e0       	ldi	r18, 0x00	; 0
   1b368:	31 e0       	ldi	r19, 0x01	; 1
   1b36a:	40 e0       	ldi	r20, 0x00	; 0
   1b36c:	50 e0       	ldi	r21, 0x00	; 0
   1b36e:	0e 94 76 e8 	call	0x1d0ec	; 0x1d0ec <__divmodsi4>
    // NEW SECTOR
    // Debugging make sure we are at sector boundry
    if(pos)
   1b372:	61 15       	cp	r22, r1
   1b374:	71 05       	cpc	r23, r1
   1b376:	b1 f0       	breq	.+44     	; 0x1b3a4 <lif_e010_pad_sector+0xa2>
    {
        if(debuglevel & 1)
   1b378:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   1b37c:	20 ff       	sbrs	r18, 0
   1b37e:	14 c0       	rjmp	.+40     	; 0x1b3a8 <lif_e010_pad_sector+0xa6>
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
   1b380:	7f 93       	push	r23
   1b382:	6f 93       	push	r22
   1b384:	86 ef       	ldi	r24, 0xF6	; 246
   1b386:	98 e3       	ldi	r25, 0x38	; 56
   1b388:	1f 92       	push	r1
   1b38a:	9f 93       	push	r25
   1b38c:	8f 93       	push	r24
   1b38e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1b392:	0f 90       	pop	r0
   1b394:	0f 90       	pop	r0
   1b396:	0f 90       	pop	r0
   1b398:	0f 90       	pop	r0
   1b39a:	0f 90       	pop	r0
   1b39c:	05 c0       	rjmp	.+10     	; 0x1b3a8 <lif_e010_pad_sector+0xa6>
    int pos,rem;
    
    // Compute the current offset in this sector
    pos = (offset % (long)LIF_SECTOR_SIZE);
    if(!pos)
        return(0);
   1b39e:	80 e0       	ldi	r24, 0x00	; 0
   1b3a0:	90 e0       	ldi	r25, 0x00	; 0
   1b3a2:	04 c0       	rjmp	.+8      	; 0x1b3ac <lif_e010_pad_sector+0xaa>
   1b3a4:	ce 01       	movw	r24, r28
   1b3a6:	02 c0       	rjmp	.+4      	; 0x1b3ac <lif_e010_pad_sector+0xaa>
    // Debugging make sure we are at sector boundry
    if(pos)
    {
        if(debuglevel & 1)
            printf("lif_e010_dap_sector: expected sector boundry: offset:%d\n", (int) pos);
        return(-1);
   1b3a8:	8f ef       	ldi	r24, 0xFF	; 255
   1b3aa:	9f ef       	ldi	r25, 0xFF	; 255
    }
    return(ind);
}
   1b3ac:	cd b7       	in	r28, 0x3d	; 61
   1b3ae:	de b7       	in	r29, 0x3e	; 62
   1b3b0:	e8 e0       	ldi	r30, 0x08	; 8
   1b3b2:	0c 94 e7 e8 	jmp	0x1d1ce	; 0x1d1ce <__epilogue_restores__+0x14>

0001b3b6 <lif_ascii_string_to_e010>:
/// @param[in] offset: E010 data sector offset, only used in formatting wbuf with headers
/// @param[in] wbuf: E010 data result
/// @return size of E010 data
MEMSPACE
int lif_ascii_string_to_e010(char *str, long offset, uint8_t *wbuf)
{
   1b3b6:	a0 e0       	ldi	r26, 0x00	; 0
   1b3b8:	b0 e0       	ldi	r27, 0x00	; 0
   1b3ba:	e1 ee       	ldi	r30, 0xE1	; 225
   1b3bc:	f9 ed       	ldi	r31, 0xD9	; 217
   1b3be:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__prologue_saves__>
   1b3c2:	ec 01       	movw	r28, r24
   1b3c4:	4a 01       	movw	r8, r20
   1b3c6:	5b 01       	movw	r10, r22
   1b3c8:	79 01       	movw	r14, r18
    int ind;
    int len;
    int pos,rem;
    
    // String size
    len = strlen(str);
   1b3ca:	fc 01       	movw	r30, r24
   1b3cc:	01 90       	ld	r0, Z+
   1b3ce:	00 20       	and	r0, r0
   1b3d0:	e9 f7       	brne	.-6      	; 0x1b3cc <lif_ascii_string_to_e010+0x16>
   1b3d2:	31 97       	sbiw	r30, 0x01	; 1
   1b3d4:	6f 01       	movw	r12, r30
   1b3d6:	c8 1a       	sub	r12, r24
   1b3d8:	d9 0a       	sbc	r13, r25
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1b3da:	41 2c       	mov	r4, r1
   1b3dc:	51 2c       	mov	r5, r1
   1b3de:	32 01       	movw	r6, r4
   1b3e0:	53 94       	inc	r5
   1b3e2:	cb 01       	movw	r24, r22
   1b3e4:	ba 01       	movw	r22, r20
   1b3e6:	a3 01       	movw	r20, r6
   1b3e8:	92 01       	movw	r18, r4
   1b3ea:	0e 94 76 e8 	call	0x1d0ec	; 0x1d0ec <__divmodsi4>
   1b3ee:	21 2c       	mov	r2, r1
   1b3f0:	33 24       	eor	r3, r3
   1b3f2:	33 94       	inc	r3
   1b3f4:	c1 01       	movw	r24, r2
   1b3f6:	86 1b       	sub	r24, r22
   1b3f8:	97 0b       	sbc	r25, r23

    /// We ALWAYS pad a sector if:
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
   1b3fa:	86 30       	cpi	r24, 0x06	; 6
   1b3fc:	91 05       	cpc	r25, r1
   1b3fe:	20 f0       	brcs	.+8      	; 0x1b408 <lif_ascii_string_to_e010+0x52>
    ind = 0;

    // Compute the current offset in this sector
    pos = (offset % (long) LIF_SECTOR_SIZE);
    // Number of bytes free in this sector
    rem = (long) LIF_SECTOR_SIZE - (long) pos;
   1b400:	1c 01       	movw	r2, r24
    
    // String size
    len = strlen(str);

    // Output buffer index
    ind = 0;
   1b402:	00 e0       	ldi	r16, 0x00	; 0
   1b404:	10 e0       	ldi	r17, 0x00	; 0
   1b406:	17 c0       	rjmp	.+46     	; 0x1b436 <lif_ascii_string_to_e010+0x80>
    ///   There is no room for a 0xdf single header 
    ///   - OR - 
    ///   Spliting a string takes more space then padding here (extra header)
    if(rem < 6)
    {
        ind = lif_e010_pad_sector(offset, wbuf);
   1b408:	a7 01       	movw	r20, r14
   1b40a:	c5 01       	movw	r24, r10
   1b40c:	b4 01       	movw	r22, r8
   1b40e:	79 df       	rcall	.-270    	; 0x1b302 <lif_e010_pad_sector>
   1b410:	8c 01       	movw	r16, r24
        if(ind < 0)
   1b412:	97 fd       	sbrc	r25, 7
   1b414:	84 c0       	rjmp	.+264    	; 0x1b51e <lif_ascii_string_to_e010+0x168>
            return(ind);

        // Compute the current offset in this sector
        pos = ((offset + ind) % (long) LIF_SECTOR_SIZE);
        // Number of bytes free in this sector
        rem = (long) LIF_SECTOR_SIZE - pos;
   1b416:	09 2e       	mov	r0, r25
   1b418:	00 0c       	add	r0, r0
   1b41a:	aa 0b       	sbc	r26, r26
   1b41c:	bb 0b       	sbc	r27, r27
   1b41e:	bc 01       	movw	r22, r24
   1b420:	cd 01       	movw	r24, r26
   1b422:	68 0d       	add	r22, r8
   1b424:	79 1d       	adc	r23, r9
   1b426:	8a 1d       	adc	r24, r10
   1b428:	9b 1d       	adc	r25, r11
   1b42a:	a3 01       	movw	r20, r6
   1b42c:	92 01       	movw	r18, r4
   1b42e:	0e 94 76 e8 	call	0x1d0ec	; 0x1d0ec <__divmodsi4>
   1b432:	26 1a       	sub	r2, r22
   1b434:	37 0a       	sbc	r3, r23
   1b436:	f7 01       	movw	r30, r14
   1b438:	e0 0f       	add	r30, r16
   1b43a:	f1 1f       	adc	r31, r17
   1b43c:	0d 5f       	subi	r16, 0xFD	; 253
   1b43e:	1f 4f       	sbci	r17, 0xFF	; 255
    }

    // Note: IMPORTANT we have >= 6 bytes!!!

    // Do not have to split, there is enough room
    if(rem >= (3 + len)) 
   1b440:	c6 01       	movw	r24, r12
   1b442:	02 96       	adiw	r24, 0x02	; 2
   1b444:	82 15       	cp	r24, r2
   1b446:	93 05       	cpc	r25, r3
   1b448:	84 f4       	brge	.+32     	; 0x1b46a <lif_ascii_string_to_e010+0xb4>
    {

        // Write string in new sector
        // The full string + header will fit
        wbuf[ind++] = 0xDF;
   1b44a:	8f ed       	ldi	r24, 0xDF	; 223
   1b44c:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1b44e:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >> 8) & 0xff;
   1b450:	d2 82       	std	Z+2, r13	; 0x02
   1b452:	f7 01       	movw	r30, r14
   1b454:	e0 0f       	add	r30, r16
   1b456:	f1 1f       	adc	r31, r17
   1b458:	cf 01       	movw	r24, r30
   1b45a:	8e 19       	sub	r24, r14
   1b45c:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1b45e:	29 91       	ld	r18, Y+
   1b460:	22 23       	and	r18, r18
   1b462:	09 f4       	brne	.+2      	; 0x1b466 <lif_ascii_string_to_e010+0xb0>
   1b464:	5c c0       	rjmp	.+184    	; 0x1b51e <lif_ascii_string_to_e010+0x168>
            wbuf[ind++] = *str++;
   1b466:	21 93       	st	Z+, r18
   1b468:	f7 cf       	rjmp	.-18     	; 0x1b458 <lif_ascii_string_to_e010+0xa2>

        // CURRENT SECTOR
        // String spans a sector , so split the string

        // 1st Split string header
        wbuf[ind++] = 0xCF;
   1b46a:	8f ec       	ldi	r24, 0xCF	; 207
   1b46c:	80 83       	st	Z, r24
        wbuf[ind++] = len & 0xff;
   1b46e:	c1 82       	std	Z+1, r12	; 0x01
        wbuf[ind++] = (len >>8) & 0xff;
   1b470:	d2 82       	std	Z+2, r13	; 0x02
   1b472:	d7 01       	movw	r26, r14
   1b474:	a0 0f       	add	r26, r16
   1b476:	b1 1f       	adc	r27, r17
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1b478:	fe 01       	movw	r30, r28
   1b47a:	81 91       	ld	r24, Z+
   1b47c:	81 11       	cpse	r24, r1
   1b47e:	0e c0       	rjmp	.+28     	; 0x1b49c <lif_ascii_string_to_e010+0xe6>
            wbuf[ind++] = *str++;

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
   1b480:	c8 01       	movw	r24, r16
   1b482:	01 2e       	mov	r0, r17
   1b484:	00 0c       	add	r0, r0
   1b486:	aa 0b       	sbc	r26, r26
   1b488:	bb 0b       	sbc	r27, r27
   1b48a:	bc 01       	movw	r22, r24
   1b48c:	cd 01       	movw	r24, r26
   1b48e:	68 0d       	add	r22, r8
   1b490:	79 1d       	adc	r23, r9
   1b492:	8a 1d       	adc	r24, r10
   1b494:	9b 1d       	adc	r25, r11
   1b496:	61 11       	cpse	r22, r1
   1b498:	09 c0       	rjmp	.+18     	; 0x1b4ac <lif_ascii_string_to_e010+0xf6>
   1b49a:	21 c0       	rjmp	.+66     	; 0x1b4de <lif_ascii_string_to_e010+0x128>
        // 1st Split string header
        wbuf[ind++] = 0xCF;
        wbuf[ind++] = len & 0xff;
        wbuf[ind++] = (len >>8) & 0xff;
        // Write as much of the string as we can in this sector
        while(*str && ind<rem)
   1b49c:	02 15       	cp	r16, r2
   1b49e:	13 05       	cpc	r17, r3
   1b4a0:	7c f7       	brge	.-34     	; 0x1b480 <lif_ascii_string_to_e010+0xca>
            wbuf[ind++] = *str++;
   1b4a2:	0f 5f       	subi	r16, 0xFF	; 255
   1b4a4:	1f 4f       	sbci	r17, 0xFF	; 255
   1b4a6:	8d 93       	st	X+, r24
   1b4a8:	ef 01       	movw	r28, r30
   1b4aa:	e6 cf       	rjmp	.-52     	; 0x1b478 <lif_ascii_string_to_e010+0xc2>

        // NEW SECTOR
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
   1b4ac:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <debuglevel>
   1b4b0:	20 ff       	sbrs	r18, 0
   1b4b2:	33 c0       	rjmp	.+102    	; 0x1b51a <lif_ascii_string_to_e010+0x164>
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
   1b4b4:	20 e0       	ldi	r18, 0x00	; 0
   1b4b6:	31 e0       	ldi	r19, 0x01	; 1
   1b4b8:	40 e0       	ldi	r20, 0x00	; 0
   1b4ba:	50 e0       	ldi	r21, 0x00	; 0
   1b4bc:	0e 94 76 e8 	call	0x1d0ec	; 0x1d0ec <__divmodsi4>
   1b4c0:	7f 93       	push	r23
   1b4c2:	6f 93       	push	r22
   1b4c4:	82 ed       	ldi	r24, 0xD2	; 210
   1b4c6:	98 e3       	ldi	r25, 0x38	; 56
   1b4c8:	1f 92       	push	r1
   1b4ca:	9f 93       	push	r25
   1b4cc:	8f 93       	push	r24
   1b4ce:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1b4d2:	0f 90       	pop	r0
   1b4d4:	0f 90       	pop	r0
   1b4d6:	0f 90       	pop	r0
   1b4d8:	0f 90       	pop	r0
   1b4da:	0f 90       	pop	r0
   1b4dc:	1e c0       	rjmp	.+60     	; 0x1b51a <lif_ascii_string_to_e010+0x164>
            return(-1);
        }

        // Update remining string length
        len = strlen(str);
   1b4de:	fe 01       	movw	r30, r28
   1b4e0:	01 90       	ld	r0, Z+
   1b4e2:	00 20       	and	r0, r0
   1b4e4:	e9 f7       	brne	.-6      	; 0x1b4e0 <lif_ascii_string_to_e010+0x12a>
   1b4e6:	31 97       	sbiw	r30, 0x01	; 1
   1b4e8:	ec 1b       	sub	r30, r28
   1b4ea:	fd 0b       	sbc	r31, r29
        // 2nd Split string header 
        wbuf[ind++] = 0x6F;
   1b4ec:	d7 01       	movw	r26, r14
   1b4ee:	a0 0f       	add	r26, r16
   1b4f0:	b1 1f       	adc	r27, r17
   1b4f2:	8f e6       	ldi	r24, 0x6F	; 111
   1b4f4:	8c 93       	st	X, r24
        wbuf[ind++] = (len & 0xff);
   1b4f6:	11 96       	adiw	r26, 0x01	; 1
   1b4f8:	ec 93       	st	X, r30
   1b4fa:	11 97       	sbiw	r26, 0x01	; 1
        wbuf[ind++] = (len>>8) & 0xff;
   1b4fc:	12 96       	adiw	r26, 0x02	; 2
   1b4fe:	fc 93       	st	X, r31
   1b500:	0d 5f       	subi	r16, 0xFD	; 253
   1b502:	1f 4f       	sbci	r17, 0xFF	; 255
   1b504:	f7 01       	movw	r30, r14
   1b506:	e0 0f       	add	r30, r16
   1b508:	f1 1f       	adc	r31, r17
   1b50a:	cf 01       	movw	r24, r30
   1b50c:	8e 19       	sub	r24, r14
   1b50e:	9f 09       	sbc	r25, r15
        // Write string
        while(*str)
   1b510:	29 91       	ld	r18, Y+
   1b512:	22 23       	and	r18, r18
   1b514:	21 f0       	breq	.+8      	; 0x1b51e <lif_ascii_string_to_e010+0x168>
            wbuf[ind++] = *str++;
   1b516:	21 93       	st	Z+, r18
   1b518:	f8 cf       	rjmp	.-16     	; 0x1b50a <lif_ascii_string_to_e010+0x154>
        // Debugging make sure we are at sector boundry
        if(((offset + (long) ind)  % (long) LIF_SECTOR_SIZE))
        {
            if(debuglevel & 1)
                printf("Expected sector boundry, offset:%d\n", (int) ((offset + ind) % LIF_SECTOR_SIZE) );
            return(-1);
   1b51a:	8f ef       	ldi	r24, 0xFF	; 255
   1b51c:	9f ef       	ldi	r25, 0xFF	; 255
        while(*str)
            wbuf[ind++] = *str++;
    }

    return(ind);
}
   1b51e:	cd b7       	in	r28, 0x3d	; 61
   1b520:	de b7       	in	r29, 0x3e	; 62
   1b522:	e2 e1       	ldi	r30, 0x12	; 18
   1b524:	0c 94 dd e8 	jmp	0x1d1ba	; 0x1d1ba <__epilogue_restores__>

0001b528 <lif_add_ascii_file_as_e010_wrapper>:
/// @param[in] userfile: User ASCII file source
/// @param[in] *LIF: Where to write file if set (not NULL)
/// @return size of formatted result
MEMSPACE
long lif_add_ascii_file_as_e010_wrapper(lif_t *LIF, uint32_t offset, char *username)
{
   1b528:	a6 e0       	ldi	r26, 0x06	; 6
   1b52a:	b3 e0       	ldi	r27, 0x03	; 3
   1b52c:	ea e9       	ldi	r30, 0x9A	; 154
   1b52e:	fa ed       	ldi	r31, 0xDA	; 218
   1b530:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__prologue_saves__>
   1b534:	7c 01       	movw	r14, r24
   1b536:	4a 01       	movw	r8, r20
   1b538:	5b 01       	movw	r10, r22
   1b53a:	c9 01       	movw	r24, r18
    // strings are limited to less then this
    char str[LIF_SECTOR_SIZE+1];
    // output buffer must be larger then a single sectors because of either headers or padding
    uint8_t obuf[LIF_SECTOR_SIZE*2];

    fi = lif_open(username, "rb");
   1b53c:	6b e5       	ldi	r22, 0x5B	; 91
   1b53e:	78 e0       	ldi	r23, 0x08	; 8
   1b540:	0e 94 f6 c6 	call	0x18dec	; 0x18dec <lif_open>
   1b544:	6c 01       	movw	r12, r24
    if(fi == NULL)
   1b546:	89 2b       	or	r24, r25
   1b548:	09 f4       	brne	.+2      	; 0x1b54c <lif_add_ascii_file_as_e010_wrapper+0x24>
   1b54a:	6b c0       	rjmp	.+214    	; 0x1b622 <lif_add_ascii_file_as_e010_wrapper+0xfa>
   1b54c:	21 2c       	mov	r2, r1
   1b54e:	31 2c       	mov	r3, r1
   1b550:	41 2c       	mov	r4, r1
   1b552:	51 2c       	mov	r5, r1
   1b554:	32 01       	movw	r6, r4

        if(count > 256)
        {       
            count = 0;
            if(LIF)
                printf("Wrote: %8ld\r", (long)bytes);
   1b556:	85 ec       	ldi	r24, 0xC5	; 197
   1b558:	98 e3       	ldi	r25, 0x38	; 56
   1b55a:	9c 01       	movw	r18, r24
   1b55c:	40 e0       	ldi	r20, 0x00	; 0
   1b55e:	cc 5f       	subi	r28, 0xFC	; 252
   1b560:	dc 4f       	sbci	r29, 0xFC	; 252
   1b562:	28 83       	st	Y, r18
   1b564:	39 83       	std	Y+1, r19	; 0x01
   1b566:	4a 83       	std	Y+2, r20	; 0x02
   1b568:	c4 50       	subi	r28, 0x04	; 4
   1b56a:	d3 40       	sbci	r29, 0x03	; 3
   1b56c:	1a c0       	rjmp	.+52     	; 0x1b5a2 <lif_add_ascii_file_as_e010_wrapper+0x7a>
                fclose(fi);
                return(-1);
            }
        }

        offset += size;
   1b56e:	ce 5f       	subi	r28, 0xFE	; 254
   1b570:	dc 4f       	sbci	r29, 0xFC	; 252
   1b572:	28 81       	ld	r18, Y
   1b574:	39 81       	ldd	r19, Y+1	; 0x01
   1b576:	c2 50       	subi	r28, 0x02	; 2
   1b578:	d3 40       	sbci	r29, 0x03	; 3
   1b57a:	c9 01       	movw	r24, r18
   1b57c:	03 2e       	mov	r0, r19
   1b57e:	00 0c       	add	r0, r0
   1b580:	aa 0b       	sbc	r26, r26
   1b582:	bb 0b       	sbc	r27, r27
   1b584:	88 0e       	add	r8, r24
   1b586:	99 1e       	adc	r9, r25
   1b588:	aa 1e       	adc	r10, r26
   1b58a:	bb 1e       	adc	r11, r27
        bytes += size;
   1b58c:	48 0e       	add	r4, r24
   1b58e:	59 1e       	adc	r5, r25
   1b590:	6a 1e       	adc	r6, r26
   1b592:	7b 1e       	adc	r7, r27
        count += size;
   1b594:	22 0e       	add	r2, r18
   1b596:	33 1e       	adc	r3, r19

        if(count > 256)
   1b598:	31 e0       	ldi	r19, 0x01	; 1
   1b59a:	23 16       	cp	r2, r19
   1b59c:	33 06       	cpc	r3, r19
   1b59e:	0c f0       	brlt	.+2      	; 0x1b5a2 <lif_add_ascii_file_as_e010_wrapper+0x7a>
   1b5a0:	45 c0       	rjmp	.+138    	; 0x1b62c <lif_add_ascii_file_as_e010_wrapper+0x104>
    bytes = 0;
    count = 0;

    // Read user file and write LIF records
    // reserve 3 + LIF header bytes + 1 (EOS)
    while( fgets((char *)str,(int)sizeof(str) - 4, fi) != NULL )
   1b5a2:	a6 01       	movw	r20, r12
   1b5a4:	6d ef       	ldi	r22, 0xFD	; 253
   1b5a6:	70 e0       	ldi	r23, 0x00	; 0
   1b5a8:	ce 01       	movw	r24, r28
   1b5aa:	8f 5f       	subi	r24, 0xFF	; 255
   1b5ac:	9d 4f       	sbci	r25, 0xFD	; 253
   1b5ae:	0e 94 e2 78 	call	0xf1c4	; 0xf1c4 <fgets>
   1b5b2:	89 2b       	or	r24, r25
   1b5b4:	09 f4       	brne	.+2      	; 0x1b5b8 <lif_add_ascii_file_as_e010_wrapper+0x90>
   1b5b6:	58 c0       	rjmp	.+176    	; 0x1b668 <lif_add_ascii_file_as_e010_wrapper+0x140>
    {
        trim_tail((char *)str);
   1b5b8:	ce 01       	movw	r24, r28
   1b5ba:	8f 5f       	subi	r24, 0xFF	; 255
   1b5bc:	9d 4f       	sbci	r25, 0xFD	; 253
   1b5be:	0e 94 69 30 	call	0x60d2	; 0x60d2 <trim_tail>

        strcat((char *)str,"\r"); // HP85 lines end with "\r"
   1b5c2:	6a ee       	ldi	r22, 0xEA	; 234
   1b5c4:	75 e1       	ldi	r23, 0x15	; 21
   1b5c6:	ce 01       	movw	r24, r28
   1b5c8:	8f 5f       	subi	r24, 0xFF	; 255
   1b5ca:	9d 4f       	sbci	r25, 0xFD	; 253
   1b5cc:	0e 94 30 30 	call	0x6060	; 0x6060 <strcat>

        size = lif_ascii_string_to_e010(str, offset, obuf);
   1b5d0:	9e 01       	movw	r18, r28
   1b5d2:	2f 5f       	subi	r18, 0xFF	; 255
   1b5d4:	3f 4f       	sbci	r19, 0xFF	; 255
   1b5d6:	b5 01       	movw	r22, r10
   1b5d8:	a4 01       	movw	r20, r8
   1b5da:	ce 01       	movw	r24, r28
   1b5dc:	8f 5f       	subi	r24, 0xFF	; 255
   1b5de:	9d 4f       	sbci	r25, 0xFD	; 253
   1b5e0:	ea de       	rcall	.-556    	; 0x1b3b6 <lif_ascii_string_to_e010>
   1b5e2:	ce 5f       	subi	r28, 0xFE	; 254
   1b5e4:	dc 4f       	sbci	r29, 0xFC	; 252
   1b5e6:	99 83       	std	Y+1, r25	; 0x01
   1b5e8:	88 83       	st	Y, r24
   1b5ea:	c2 50       	subi	r28, 0x02	; 2
   1b5ec:	d3 40       	sbci	r29, 0x03	; 3
        // Write string
        // Now Write string
        if(LIF)
   1b5ee:	e1 14       	cp	r14, r1
   1b5f0:	f1 04       	cpc	r15, r1
   1b5f2:	09 f4       	brne	.+2      	; 0x1b5f6 <lif_add_ascii_file_as_e010_wrapper+0xce>
   1b5f4:	bc cf       	rjmp	.-136    	; 0x1b56e <lif_add_ascii_file_as_e010_wrapper+0x46>
        {
            len = lif_write(LIF, obuf, offset, size);
   1b5f6:	8c 01       	movw	r16, r24
   1b5f8:	a5 01       	movw	r20, r10
   1b5fa:	94 01       	movw	r18, r8
   1b5fc:	be 01       	movw	r22, r28
   1b5fe:	6f 5f       	subi	r22, 0xFF	; 255
   1b600:	7f 4f       	sbci	r23, 0xFF	; 255
   1b602:	c7 01       	movw	r24, r14
   1b604:	0e 94 d5 c7 	call	0x18faa	; 0x18faa <lif_write>
            if(len < size)
   1b608:	ce 5f       	subi	r28, 0xFE	; 254
   1b60a:	dc 4f       	sbci	r29, 0xFC	; 252
   1b60c:	08 81       	ld	r16, Y
   1b60e:	19 81       	ldd	r17, Y+1	; 0x01
   1b610:	c2 50       	subi	r28, 0x02	; 2
   1b612:	d3 40       	sbci	r29, 0x03	; 3
   1b614:	80 17       	cp	r24, r16
   1b616:	91 07       	cpc	r25, r17
   1b618:	0c f0       	brlt	.+2      	; 0x1b61c <lif_add_ascii_file_as_e010_wrapper+0xf4>
   1b61a:	a9 cf       	rjmp	.-174    	; 0x1b56e <lif_add_ascii_file_as_e010_wrapper+0x46>
            {
                fclose(fi);
   1b61c:	c6 01       	movw	r24, r12
   1b61e:	0e 94 7c 80 	call	0x100f8	; 0x100f8 <fclose>
                return(-1);
   1b622:	6f ef       	ldi	r22, 0xFF	; 255
   1b624:	7f ef       	ldi	r23, 0xFF	; 255
   1b626:	8f ef       	ldi	r24, 0xFF	; 255
   1b628:	9f ef       	ldi	r25, 0xFF	; 255
   1b62a:	86 c0       	rjmp	.+268    	; 0x1b738 <lif_add_ascii_file_as_e010_wrapper+0x210>
        count += size;

        if(count > 256)
        {       
            count = 0;
            if(LIF)
   1b62c:	e1 14       	cp	r14, r1
   1b62e:	f1 04       	cpc	r15, r1
   1b630:	c1 f0       	breq	.+48     	; 0x1b662 <lif_add_ascii_file_as_e010_wrapper+0x13a>
                printf("Wrote: %8ld\r", (long)bytes);
   1b632:	7f 92       	push	r7
   1b634:	6f 92       	push	r6
   1b636:	5f 92       	push	r5
   1b638:	4f 92       	push	r4
   1b63a:	1f 92       	push	r1
   1b63c:	cb 5f       	subi	r28, 0xFB	; 251
   1b63e:	dc 4f       	sbci	r29, 0xFC	; 252
   1b640:	48 81       	ld	r20, Y
   1b642:	c5 50       	subi	r28, 0x05	; 5
   1b644:	d3 40       	sbci	r29, 0x03	; 3
   1b646:	4f 93       	push	r20
   1b648:	cc 5f       	subi	r28, 0xFC	; 252
   1b64a:	dc 4f       	sbci	r29, 0xFC	; 252
   1b64c:	88 81       	ld	r24, Y
   1b64e:	c4 50       	subi	r28, 0x04	; 4
   1b650:	d3 40       	sbci	r29, 0x03	; 3
   1b652:	8f 93       	push	r24
   1b654:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1b658:	0f b6       	in	r0, 0x3f	; 63
   1b65a:	f8 94       	cli
   1b65c:	de bf       	out	0x3e, r29	; 62
   1b65e:	0f be       	out	0x3f, r0	; 63
   1b660:	cd bf       	out	0x3d, r28	; 61
        bytes += size;
        count += size;

        if(count > 256)
        {       
            count = 0;
   1b662:	21 2c       	mov	r2, r1
   1b664:	31 2c       	mov	r3, r1
   1b666:	9d cf       	rjmp	.-198    	; 0x1b5a2 <lif_add_ascii_file_as_e010_wrapper+0x7a>
            if(LIF)
                printf("Wrote: %8ld\r", (long)bytes);
        }
    }

    fclose(fi);
   1b668:	c6 01       	movw	r24, r12
   1b66a:	0e 94 7c 80 	call	0x100f8	; 0x100f8 <fclose>

    // Write EOF
    str[0] = 0;
   1b66e:	cf 5f       	subi	r28, 0xFF	; 255
   1b670:	dd 4f       	sbci	r29, 0xFD	; 253
   1b672:	18 82       	st	Y, r1
   1b674:	c1 50       	subi	r28, 0x01	; 1
   1b676:	d2 40       	sbci	r29, 0x02	; 2
    // We only want to return the count of bytes in the file NOT the padding at the end
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);
   1b678:	9e 01       	movw	r18, r28
   1b67a:	2f 5f       	subi	r18, 0xFF	; 255
   1b67c:	3f 4f       	sbci	r19, 0xFF	; 255
   1b67e:	b5 01       	movw	r22, r10
   1b680:	a4 01       	movw	r20, r8
   1b682:	ce 01       	movw	r24, r28
   1b684:	8f 5f       	subi	r24, 0xFF	; 255
   1b686:	9d 4f       	sbci	r25, 0xFD	; 253
   1b688:	96 de       	rcall	.-724    	; 0x1b3b6 <lif_ascii_string_to_e010>
   1b68a:	6c 01       	movw	r12, r24

    if(LIF)
   1b68c:	e1 14       	cp	r14, r1
   1b68e:	f1 04       	cpc	r15, r1
   1b690:	b9 f4       	brne	.+46     	; 0x1b6c0 <lif_add_ascii_file_as_e010_wrapper+0x198>
            return(-1);

    }

    offset += size;
    bytes += size;
   1b692:	c6 01       	movw	r24, r12
   1b694:	dd 0c       	add	r13, r13
   1b696:	aa 0b       	sbc	r26, r26
   1b698:	bb 0b       	sbc	r27, r27
   1b69a:	48 0e       	add	r4, r24
   1b69c:	59 1e       	adc	r5, r25
   1b69e:	6a 1e       	adc	r6, r26
   1b6a0:	7b 1e       	adc	r7, r27

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
   1b6a2:	88 0e       	add	r8, r24
   1b6a4:	99 1e       	adc	r9, r25
   1b6a6:	aa 1e       	adc	r10, r26
   1b6a8:	bb 1e       	adc	r11, r27
   1b6aa:	ae 01       	movw	r20, r28
   1b6ac:	4f 5f       	subi	r20, 0xFF	; 255
   1b6ae:	5f 4f       	sbci	r21, 0xFF	; 255
   1b6b0:	c5 01       	movw	r24, r10
   1b6b2:	b4 01       	movw	r22, r8
   1b6b4:	26 de       	rcall	.-948    	; 0x1b302 <lif_e010_pad_sector>
   1b6b6:	6c 01       	movw	r12, r24
    if(LIF)
   1b6b8:	e1 14       	cp	r14, r1
   1b6ba:	f1 04       	cpc	r15, r1
   1b6bc:	f1 f4       	brne	.+60     	; 0x1b6fa <lif_add_ascii_file_as_e010_wrapper+0x1d2>
   1b6be:	3a c0       	rjmp	.+116    	; 0x1b734 <lif_add_ascii_file_as_e010_wrapper+0x20c>
    // Write EOF string with padding
    size = lif_ascii_string_to_e010(str, offset,obuf);

    if(LIF)
    {
        printf("Wrote: %8ld\r", (long)bytes);
   1b6c0:	7f 92       	push	r7
   1b6c2:	6f 92       	push	r6
   1b6c4:	5f 92       	push	r5
   1b6c6:	4f 92       	push	r4
   1b6c8:	88 eb       	ldi	r24, 0xB8	; 184
   1b6ca:	98 e3       	ldi	r25, 0x38	; 56
   1b6cc:	1f 92       	push	r1
   1b6ce:	9f 93       	push	r25
   1b6d0:	8f 93       	push	r24
   1b6d2:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        len = lif_write(LIF, obuf, offset, size);
   1b6d6:	86 01       	movw	r16, r12
   1b6d8:	a5 01       	movw	r20, r10
   1b6da:	94 01       	movw	r18, r8
   1b6dc:	be 01       	movw	r22, r28
   1b6de:	6f 5f       	subi	r22, 0xFF	; 255
   1b6e0:	7f 4f       	sbci	r23, 0xFF	; 255
   1b6e2:	c7 01       	movw	r24, r14
   1b6e4:	0e 94 d5 c7 	call	0x18faa	; 0x18faa <lif_write>
        if(len < size)
   1b6e8:	0f b6       	in	r0, 0x3f	; 63
   1b6ea:	f8 94       	cli
   1b6ec:	de bf       	out	0x3e, r29	; 62
   1b6ee:	0f be       	out	0x3f, r0	; 63
   1b6f0:	cd bf       	out	0x3d, r28	; 61
   1b6f2:	8c 15       	cp	r24, r12
   1b6f4:	9d 05       	cpc	r25, r13
   1b6f6:	6c f6       	brge	.-102    	; 0x1b692 <lif_add_ascii_file_as_e010_wrapper+0x16a>
   1b6f8:	94 cf       	rjmp	.-216    	; 0x1b622 <lif_add_ascii_file_as_e010_wrapper+0xfa>

    // PAD
    size = lif_e010_pad_sector(offset, obuf);
    if(LIF)
    {
        len = lif_write(LIF, obuf, offset, size);
   1b6fa:	8c 01       	movw	r16, r24
   1b6fc:	a5 01       	movw	r20, r10
   1b6fe:	94 01       	movw	r18, r8
   1b700:	be 01       	movw	r22, r28
   1b702:	6f 5f       	subi	r22, 0xFF	; 255
   1b704:	7f 4f       	sbci	r23, 0xFF	; 255
   1b706:	c7 01       	movw	r24, r14
   1b708:	0e 94 d5 c7 	call	0x18faa	; 0x18faa <lif_write>
        if(len < size)
   1b70c:	8c 15       	cp	r24, r12
   1b70e:	9d 05       	cpc	r25, r13
   1b710:	0c f4       	brge	.+2      	; 0x1b714 <lif_add_ascii_file_as_e010_wrapper+0x1ec>
   1b712:	87 cf       	rjmp	.-242    	; 0x1b622 <lif_add_ascii_file_as_e010_wrapper+0xfa>
            return(-1);
    }

    if(LIF)
        printf("Wrote: %8ld\r",(long)bytes);
   1b714:	7f 92       	push	r7
   1b716:	6f 92       	push	r6
   1b718:	5f 92       	push	r5
   1b71a:	4f 92       	push	r4
   1b71c:	8b ea       	ldi	r24, 0xAB	; 171
   1b71e:	98 e3       	ldi	r25, 0x38	; 56
   1b720:	1f 92       	push	r1
   1b722:	9f 93       	push	r25
   1b724:	8f 93       	push	r24
   1b726:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1b72a:	0f b6       	in	r0, 0x3f	; 63
   1b72c:	f8 94       	cli
   1b72e:	de bf       	out	0x3e, r29	; 62
   1b730:	0f be       	out	0x3f, r0	; 63
   1b732:	cd bf       	out	0x3d, r28	; 61

    return(bytes);
   1b734:	b2 01       	movw	r22, r4
   1b736:	c3 01       	movw	r24, r6
}
   1b738:	ca 5f       	subi	r28, 0xFA	; 250
   1b73a:	dc 4f       	sbci	r29, 0xFC	; 252
   1b73c:	e2 e1       	ldi	r30, 0x12	; 18
   1b73e:	0c 94 dd e8 	jmp	0x1d1ba	; 0x1d1ba <__epilogue_restores__>

0001b742 <lif_add_ascii_file_as_e010>:
/// @param[in] lifname: LIF file name
/// @param[in] userfile: userfile name
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_ascii_file_as_e010(char *lifimagename, char *lifname, char *userfile)
{
   1b742:	a2 e3       	ldi	r26, 0x32	; 50
   1b744:	b0 e0       	ldi	r27, 0x00	; 0
   1b746:	e7 ea       	ldi	r30, 0xA7	; 167
   1b748:	fb ed       	ldi	r31, 0xDB	; 219
   1b74a:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__prologue_saves__>
   1b74e:	6c 01       	movw	r12, r24
   1b750:	1b 01       	movw	r2, r22
   1b752:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;
    stat_t st, *sp;


    if(!*lifimagename)
   1b754:	fc 01       	movw	r30, r24
   1b756:	80 81       	ld	r24, Z
   1b758:	81 11       	cpse	r24, r1
   1b75a:	03 c0       	rjmp	.+6      	; 0x1b762 <lif_add_ascii_file_as_e010+0x20>
    {
        printf("lif_add_ascii_file_as_e010: lifimagename is empty\n");
   1b75c:	88 e7       	ldi	r24, 0x78	; 120
   1b75e:	98 e3       	ldi	r25, 0x38	; 56
   1b760:	1a c0       	rjmp	.+52     	; 0x1b796 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*lifname)
   1b762:	fb 01       	movw	r30, r22
   1b764:	80 81       	ld	r24, Z
   1b766:	81 11       	cpse	r24, r1
   1b768:	03 c0       	rjmp	.+6      	; 0x1b770 <lif_add_ascii_file_as_e010+0x2e>
    {
        printf("lif_add_ascii_file_as_e010: lifname is empty\n");
   1b76a:	8a e4       	ldi	r24, 0x4A	; 74
   1b76c:	98 e3       	ldi	r25, 0x38	; 56
   1b76e:	13 c0       	rjmp	.+38     	; 0x1b796 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }
    if(!*userfile)
   1b770:	fa 01       	movw	r30, r20
   1b772:	80 81       	ld	r24, Z
   1b774:	81 11       	cpse	r24, r1
   1b776:	03 c0       	rjmp	.+6      	; 0x1b77e <lif_add_ascii_file_as_e010+0x3c>
    {
        printf("lif_add_ascii_file_as_e010: userfile is empty\n");
   1b778:	8b e1       	ldi	r24, 0x1B	; 27
   1b77a:	98 e3       	ldi	r25, 0x38	; 56
   1b77c:	0c c0       	rjmp	.+24     	; 0x1b796 <lif_add_ascii_file_as_e010+0x54>
        return(-1);
    }

    //Get size and date info
    sp = lif_stat(userfile, (stat_t *)&st);
   1b77e:	be 01       	movw	r22, r28
   1b780:	6f 5f       	subi	r22, 0xFF	; 255
   1b782:	7f 4f       	sbci	r23, 0xFF	; 255
   1b784:	ca 01       	movw	r24, r20
   1b786:	0e 94 1e c7 	call	0x18e3c	; 0x18e3c <lif_stat>
   1b78a:	9a ab       	std	Y+50, r25	; 0x32
   1b78c:	89 ab       	std	Y+49, r24	; 0x31
    if(!sp)
   1b78e:	89 2b       	or	r24, r25
   1b790:	59 f4       	brne	.+22     	; 0x1b7a8 <lif_add_ascii_file_as_e010+0x66>
    {
        printf("lif_add_ascii_file_as_e010: userfile not found\n");
   1b792:	8b ee       	ldi	r24, 0xEB	; 235
   1b794:	97 e3       	ldi	r25, 0x37	; 55
   1b796:	1f 92       	push	r1
   1b798:	9f 93       	push	r25
   1b79a:	8f 93       	push	r24
   1b79c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        return(-1);
   1b7a0:	0f 90       	pop	r0
   1b7a2:	0f 90       	pop	r0
   1b7a4:	0f 90       	pop	r0
   1b7a6:	fe c0       	rjmp	.+508    	; 0x1b9a4 <lif_add_ascii_file_as_e010+0x262>
    }

    if(debuglevel & 0x400)
   1b7a8:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1b7ac:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1b7b0:	92 ff       	sbrs	r25, 2
   1b7b2:	12 c0       	rjmp	.+36     	; 0x1b7d8 <lif_add_ascii_file_as_e010+0x96>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1b7b4:	ff 92       	push	r15
   1b7b6:	ef 92       	push	r14
   1b7b8:	3f 92       	push	r3
   1b7ba:	2f 92       	push	r2
   1b7bc:	df 92       	push	r13
   1b7be:	cf 92       	push	r12
   1b7c0:	8c eb       	ldi	r24, 0xBC	; 188
   1b7c2:	97 e3       	ldi	r25, 0x37	; 55
   1b7c4:	1f 92       	push	r1
   1b7c6:	9f 93       	push	r25
   1b7c8:	8f 93       	push	r24
   1b7ca:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1b7ce:	0f b6       	in	r0, 0x3f	; 63
   1b7d0:	f8 94       	cli
   1b7d2:	de bf       	out	0x3e, r29	; 62
   1b7d4:	0f be       	out	0x3f, r0	; 63
   1b7d6:	cd bf       	out	0x3d, r28	; 61
            lifimagename, lifname, userfile);

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
   1b7d8:	97 01       	movw	r18, r14
   1b7da:	40 e0       	ldi	r20, 0x00	; 0
   1b7dc:	50 e0       	ldi	r21, 0x00	; 0
   1b7de:	ba 01       	movw	r22, r20
   1b7e0:	80 e0       	ldi	r24, 0x00	; 0
   1b7e2:	90 e0       	ldi	r25, 0x00	; 0
   1b7e4:	a1 de       	rcall	.-702    	; 0x1b528 <lif_add_ascii_file_as_e010_wrapper>
   1b7e6:	4b 01       	movw	r8, r22
   1b7e8:	5c 01       	movw	r10, r24
/// @param[in] bytes: size in bytes
/// @return sectors
MEMSPACE
uint32_t lif_bytes2sectors(uint32_t bytes)
{
    uint32_t sectors = (bytes/(long)LIF_SECTOR_SIZE);
   1b7ea:	47 2e       	mov	r4, r23
   1b7ec:	58 2e       	mov	r5, r24
   1b7ee:	69 2e       	mov	r6, r25
   1b7f0:	77 24       	eor	r7, r7
    if(bytes % (long)LIF_SECTOR_SIZE)
   1b7f2:	66 23       	and	r22, r22
   1b7f4:	29 f0       	breq	.+10     	; 0x1b800 <lif_add_ascii_file_as_e010+0xbe>
        ++sectors;
   1b7f6:	9f ef       	ldi	r25, 0xFF	; 255
   1b7f8:	49 1a       	sub	r4, r25
   1b7fa:	59 0a       	sbc	r5, r25
   1b7fc:	69 0a       	sbc	r6, r25
   1b7fe:	79 0a       	sbc	r7, r25

    // Find out how big converted file will be
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
   1b800:	6e e5       	ldi	r22, 0x5E	; 94
   1b802:	78 e0       	ldi	r23, 0x08	; 8
   1b804:	c6 01       	movw	r24, r12
   1b806:	b4 da       	rcall	.-2712   	; 0x1ad70 <lif_open_volume>
   1b808:	8c 01       	movw	r16, r24
    if(LIF == NULL)
   1b80a:	00 97       	sbiw	r24, 0x00	; 0
   1b80c:	09 f4       	brne	.+2      	; 0x1b810 <lif_add_ascii_file_as_e010+0xce>
        return(-1); 

    // Now find free record
    index = lif_newdir(LIF, sectors);
   1b80e:	ca c0       	rjmp	.+404    	; 0x1b9a4 <lif_add_ascii_file_as_e010+0x262>
   1b810:	b3 01       	movw	r22, r6
   1b812:	a2 01       	movw	r20, r4
   1b814:	48 d9       	rcall	.-3440   	; 0x1aaa6 <lif_newdir>
    if(index == -1)
   1b816:	3c 01       	movw	r6, r24
   1b818:	01 96       	adiw	r24, 0x01	; 1
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1b81a:	a1 f4       	brne	.+40     	; 0x1b844 <lif_add_ascii_file_as_e010+0x102>
   1b81c:	ff 92       	push	r15
   1b81e:	ef 92       	push	r14
   1b820:	df 92       	push	r13
   1b822:	cf 92       	push	r12
   1b824:	8c e8       	ldi	r24, 0x8C	; 140
   1b826:	97 e3       	ldi	r25, 0x37	; 55
   1b828:	1f 92       	push	r1
   1b82a:	9f 93       	push	r25
   1b82c:	8f 93       	push	r24
   1b82e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b832:	c8 01       	movw	r24, r16
   1b834:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>
    if(index == -1)
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
            lifimagename, userfile);
            lif_closedir(LIF);
            return(-1);
   1b838:	0f b6       	in	r0, 0x3f	; 63
   1b83a:	f8 94       	cli
   1b83c:	de bf       	out	0x3e, r29	; 62
   1b83e:	0f be       	out	0x3f, r0	; 63
   1b840:	cd bf       	out	0x3d, r28	; 61
    }

    // Initialize the free directory entry
    lif_fixname(LIF->DIR.filename, lifname,10);
   1b842:	b0 c0       	rjmp	.+352    	; 0x1b9a4 <lif_add_ascii_file_as_e010+0x262>
   1b844:	68 01       	movw	r12, r16
   1b846:	9f e4       	ldi	r25, 0x4F	; 79
   1b848:	c9 0e       	add	r12, r25
   1b84a:	d1 1c       	adc	r13, r1
   1b84c:	4a e0       	ldi	r20, 0x0A	; 10
   1b84e:	50 e0       	ldi	r21, 0x00	; 0
   1b850:	b1 01       	movw	r22, r2
   1b852:	c6 01       	movw	r24, r12
   1b854:	0e 94 c2 c8 	call	0x19184	; 0x19184 <lif_fixname>
    LIF->DIR.FileType = 0xe010;             // 10
   1b858:	80 e1       	ldi	r24, 0x10	; 16
   1b85a:	90 ee       	ldi	r25, 0xE0	; 224
   1b85c:	f8 01       	movw	r30, r16
   1b85e:	e6 5a       	subi	r30, 0xA6	; 166
   1b860:	ff 4f       	sbci	r31, 0xFF	; 255
   1b862:	91 83       	std	Z+1, r25	; 0x01
    lif_time2lifbcd(sp->st_mtime, LIF->DIR.date);
   1b864:	80 83       	st	Z, r24
   1b866:	e9 a9       	ldd	r30, Y+49	; 0x31
   1b868:	fa a9       	ldd	r31, Y+50	; 0x32
   1b86a:	60 a5       	ldd	r22, Z+40	; 0x28
   1b86c:	71 a5       	ldd	r23, Z+41	; 0x29
   1b86e:	82 a5       	ldd	r24, Z+42	; 0x2a
   1b870:	93 a5       	ldd	r25, Z+43	; 0x2b
   1b872:	a8 01       	movw	r20, r16
   1b874:	4c 59       	subi	r20, 0x9C	; 156
   1b876:	5f 4f       	sbci	r21, 0xFF	; 255
   1b878:	0e 94 07 cb 	call	0x1960e	; 0x1960e <lif_time2lifbcd>

    LIF->DIR.VolNumber = 0x8001;            // 26
   1b87c:	81 e0       	ldi	r24, 0x01	; 1
   1b87e:	90 e8       	ldi	r25, 0x80	; 128
   1b880:	f8 01       	movw	r30, r16
   1b882:	e6 59       	subi	r30, 0x96	; 150
   1b884:	ff 4f       	sbci	r31, 0xFF	; 255
   1b886:	91 83       	std	Z+1, r25	; 0x01
    LIF->DIR.FileBytes = bytes;                 // 28
   1b888:	80 83       	st	Z, r24
   1b88a:	32 96       	adiw	r30, 0x02	; 2
   1b88c:	91 82       	std	Z+1, r9	; 0x01
    LIF->DIR.SectorSize  = 0x100;           // 30
   1b88e:	80 82       	st	Z, r8
   1b890:	80 e0       	ldi	r24, 0x00	; 0
   1b892:	91 e0       	ldi	r25, 0x01	; 1
   1b894:	32 96       	adiw	r30, 0x02	; 2
   1b896:	91 83       	std	Z+1, r25	; 0x01
    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1b898:	80 83       	st	Z, r24
   1b89a:	58 01       	movw	r10, r16
   1b89c:	fc e5       	ldi	r31, 0x5C	; 92
   1b89e:	af 0e       	add	r10, r31
   1b8a0:	b1 1c       	adc	r11, r1
   1b8a2:	f5 01       	movw	r30, r10
   1b8a4:	80 81       	ld	r24, Z
   1b8a6:	91 81       	ldd	r25, Z+1	; 0x01
   1b8a8:	a2 81       	ldd	r26, Z+2	; 0x02
   1b8aa:	b3 81       	ldd	r27, Z+3	; 0x03
   1b8ac:	22 24       	eor	r2, r2
   1b8ae:	38 2e       	mov	r3, r24
   1b8b0:	49 2e       	mov	r4, r25

    if(debuglevel & 0x400)
   1b8b2:	5a 2e       	mov	r5, r26
   1b8b4:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1b8b8:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1b8bc:	92 ff       	sbrs	r25, 2
        lif_dump_vol(LIF,"lif_after lif_newdir");
   1b8be:	05 c0       	rjmp	.+10     	; 0x1b8ca <lif_add_ascii_file_as_e010+0x188>
   1b8c0:	6c ee       	ldi	r22, 0xEC	; 236
   1b8c2:	75 e1       	ldi	r23, 0x15	; 21
   1b8c4:	c8 01       	movw	r24, r16
   1b8c6:	0e 94 f3 cb 	call	0x197e6	; 0x197e6 <lif_dump_vol>

    // Write converted file into free space first
    bytes = lif_add_ascii_file_as_e010_wrapper(LIF,offset,userfile);
   1b8ca:	97 01       	movw	r18, r14
   1b8cc:	b2 01       	movw	r22, r4
   1b8ce:	a1 01       	movw	r20, r2
   1b8d0:	c8 01       	movw	r24, r16
   1b8d2:	2a de       	rcall	.-940    	; 0x1b528 <lif_add_ascii_file_as_e010_wrapper>
   1b8d4:	4b 01       	movw	r8, r22

    if(debuglevel & 0x400)
   1b8d6:	7c 01       	movw	r14, r24
   1b8d8:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1b8dc:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1b8e0:	92 ff       	sbrs	r25, 2
    {
        printf("New Directory Information AFTER write\n");
   1b8e2:	40 c0       	rjmp	.+128    	; 0x1b964 <lif_add_ascii_file_as_e010+0x222>
   1b8e4:	85 e6       	ldi	r24, 0x65	; 101
   1b8e6:	97 e3       	ldi	r25, 0x37	; 55
   1b8e8:	1f 92       	push	r1
   1b8ea:	9f 93       	push	r25
   1b8ec:	8f 93       	push	r24
   1b8ee:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        printf("Name:              %s\n", LIF->DIR.filename);
   1b8f2:	df 92       	push	r13
   1b8f4:	cf 92       	push	r12
   1b8f6:	8e e4       	ldi	r24, 0x4E	; 78
   1b8f8:	97 e3       	ldi	r25, 0x37	; 55
   1b8fa:	1f 92       	push	r1
   1b8fc:	9f 93       	push	r25
   1b8fe:	8f 93       	push	r24
   1b900:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        printf("Index:            %4d\n", (int)index);
   1b904:	7f 92       	push	r7
   1b906:	6f 92       	push	r6
   1b908:	87 e3       	ldi	r24, 0x37	; 55
   1b90a:	97 e3       	ldi	r25, 0x37	; 55
   1b90c:	1f 92       	push	r1
   1b90e:	9f 93       	push	r25
   1b910:	8f 93       	push	r24
   1b912:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        printf("First Sector:     %4lxH\n", (long) LIF->DIR.FileStartSector);
   1b916:	f5 01       	movw	r30, r10
   1b918:	83 81       	ldd	r24, Z+3	; 0x03
   1b91a:	8f 93       	push	r24
   1b91c:	82 81       	ldd	r24, Z+2	; 0x02
   1b91e:	8f 93       	push	r24
   1b920:	81 81       	ldd	r24, Z+1	; 0x01
   1b922:	8f 93       	push	r24
   1b924:	80 81       	ld	r24, Z
   1b926:	8f 93       	push	r24
   1b928:	8e e1       	ldi	r24, 0x1E	; 30
   1b92a:	97 e3       	ldi	r25, 0x37	; 55
   1b92c:	1f 92       	push	r1
   1b92e:	9f 93       	push	r25
   1b930:	8f 93       	push	r24
   1b932:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        printf("File Sectors:     %4lxH\n", (long)LIF->DIR.FileSectors);
   1b936:	f8 01       	movw	r30, r16
   1b938:	e0 5a       	subi	r30, 0xA0	; 160
   1b93a:	ff 4f       	sbci	r31, 0xFF	; 255
   1b93c:	83 81       	ldd	r24, Z+3	; 0x03
   1b93e:	8f 93       	push	r24
   1b940:	82 81       	ldd	r24, Z+2	; 0x02
   1b942:	8f 93       	push	r24
   1b944:	81 81       	ldd	r24, Z+1	; 0x01
   1b946:	8f 93       	push	r24
   1b948:	80 81       	ld	r24, Z
   1b94a:	8f 93       	push	r24
   1b94c:	85 e0       	ldi	r24, 0x05	; 5
   1b94e:	97 e3       	ldi	r25, 0x37	; 55
   1b950:	1f 92       	push	r1
   1b952:	9f 93       	push	r25
   1b954:	8f 93       	push	r24
   1b956:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1b95a:	0f b6       	in	r0, 0x3f	; 63
   1b95c:	f8 94       	cli
   1b95e:	de bf       	out	0x3e, r29	; 62
   1b960:	0f be       	out	0x3f, r0	; 63
    }

    // Write directory record
    // Note: lif_newdir alrwady did the new EOF
    if( !lif_writedirindex(LIF,index))
   1b962:	cd bf       	out	0x3d, r28	; 61
   1b964:	b3 01       	movw	r22, r6
   1b966:	c8 01       	movw	r24, r16
   1b968:	0e 94 fe d0 	call	0x1a1fc	; 0x1a1fc <lif_writedirindex>
   1b96c:	89 2b       	or	r24, r25
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1b96e:	21 f4       	brne	.+8      	; 0x1b978 <lif_add_ascii_file_as_e010+0x236>
   1b970:	c8 01       	movw	r24, r16
   1b972:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>
   1b976:	16 c0       	rjmp	.+44     	; 0x1b9a4 <lif_add_ascii_file_as_e010+0x262>
   1b978:	c8 01       	movw	r24, r16
   1b97a:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>
        return(-1);
    }

    lif_closedir(LIF);

    printf("Wrote: %8ld\n", bytes);
   1b97e:	ff 92       	push	r15
   1b980:	ef 92       	push	r14
   1b982:	9f 92       	push	r9
   1b984:	8f 92       	push	r8
   1b986:	88 ef       	ldi	r24, 0xF8	; 248
   1b988:	96 e3       	ldi	r25, 0x36	; 54
   1b98a:	1f 92       	push	r1
   1b98c:	9f 93       	push	r25
   1b98e:	8f 93       	push	r24
   1b990:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>

    // Return file size
    return(bytes);
   1b994:	0f b6       	in	r0, 0x3f	; 63
   1b996:	f8 94       	cli
   1b998:	de bf       	out	0x3e, r29	; 62
   1b99a:	0f be       	out	0x3f, r0	; 63
   1b99c:	cd bf       	out	0x3d, r28	; 61
   1b99e:	b4 01       	movw	r22, r8
   1b9a0:	c7 01       	movw	r24, r14
    bytes = lif_add_ascii_file_as_e010_wrapper(NULL,0,userfile);
    sectors = lif_bytes2sectors(bytes);

    LIF = lif_open_volume(lifimagename,"r+");
    if(LIF == NULL)
        return(-1); 
   1b9a2:	04 c0       	rjmp	.+8      	; 0x1b9ac <lif_add_ascii_file_as_e010+0x26a>
   1b9a4:	6f ef       	ldi	r22, 0xFF	; 255
   1b9a6:	7f ef       	ldi	r23, 0xFF	; 255
   1b9a8:	8f ef       	ldi	r24, 0xFF	; 255

    printf("Wrote: %8ld\n", bytes);

    // Return file size
    return(bytes);
}
   1b9aa:	9f ef       	ldi	r25, 0xFF	; 255
   1b9ac:	e2 96       	adiw	r28, 0x32	; 50
   1b9ae:	e2 e1       	ldi	r30, 0x12	; 18
   1b9b0:	0c 94 dd e8 	jmp	0x1d1ba	; 0x1d1ba <__epilogue_restores__>

0001b9b4 <lif_extract_e010_as_ascii>:
/// @param[in] lifname:  name of file in LIF image
/// @param[in] username: name to call the extracted image
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_e010_as_ascii(char *lifimagename, char *lifname, char *username)
{
   1b9b4:	ac e2       	ldi	r26, 0x2C	; 44
   1b9b6:	b2 e0       	ldi	r27, 0x02	; 2
   1b9b8:	e0 ee       	ldi	r30, 0xE0	; 224
   1b9ba:	fc ed       	ldi	r31, 0xDC	; 220
   1b9bc:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__prologue_saves__>
   1b9c0:	f8 2e       	mov	r15, r24
   1b9c2:	b9 2e       	mov	r11, r25
   1b9c4:	16 2f       	mov	r17, r22
   1b9c6:	07 2f       	mov	r16, r23
   1b9c8:	c4 5e       	subi	r28, 0xE4	; 228
   1b9ca:	dd 4f       	sbci	r29, 0xFD	; 253
   1b9cc:	48 83       	st	Y, r20
   1b9ce:	cc 51       	subi	r28, 0x1C	; 28
   1b9d0:	d2 40       	sbci	r29, 0x02	; 2
   1b9d2:	e5 2e       	mov	r14, r21
    uint8_t buf[LIF_SECTOR_SIZE+4];
    // Write buffer, FYI: will ALWAYS be smaller then the read data buffer
    uint8_t wbuf[LIF_SECTOR_SIZE+4];


    LIF = lif_open_volume(lifimagename,"r");
   1b9d4:	66 e1       	ldi	r22, 0x16	; 22
   1b9d6:	77 e0       	ldi	r23, 0x07	; 7
   1b9d8:	cb d9       	rcall	.-3178   	; 0x1ad70 <lif_open_volume>
   1b9da:	6c 01       	movw	r12, r24
    if(LIF == NULL)
   1b9dc:	00 97       	sbiw	r24, 0x00	; 0
   1b9de:	51 f4       	brne	.+20     	; 0x1b9f4 <lif_extract_e010_as_ascii+0x40>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1b9e0:	bf 92       	push	r11
   1b9e2:	ff 92       	push	r15
   1b9e4:	80 ee       	ldi	r24, 0xE0	; 224
   1b9e6:	96 e3       	ldi	r25, 0x36	; 54
   1b9e8:	1f 92       	push	r1
   1b9ea:	9f 93       	push	r25
   1b9ec:	8f 93       	push	r24
   1b9ee:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1b9f2:	11 c0       	rjmp	.+34     	; 0x1ba16 <lif_extract_e010_as_ascii+0x62>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1b9f4:	61 2f       	mov	r22, r17
   1b9f6:	70 2f       	mov	r23, r16
   1b9f8:	20 dc       	rcall	.-1984   	; 0x1b23a <lif_find_file>
    if(index == -1)
   1b9fa:	01 96       	adiw	r24, 0x01	; 1
   1b9fc:	a1 f4       	brne	.+40     	; 0x1ba26 <lif_extract_e010_as_ascii+0x72>
    {
        printf("LIF File not found:%s\n", lifname);
   1b9fe:	0f 93       	push	r16
   1ba00:	1f 93       	push	r17
   1ba02:	89 ec       	ldi	r24, 0xC9	; 201
   1ba04:	96 e3       	ldi	r25, 0x36	; 54
   1ba06:	1f 92       	push	r1
   1ba08:	9f 93       	push	r25
   1ba0a:	8f 93       	push	r24
   1ba0c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba10:	c6 01       	movw	r24, r12
   1ba12:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("LIF File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1ba16:	0f 90       	pop	r0
   1ba18:	0f 90       	pop	r0
   1ba1a:	0f 90       	pop	r0
   1ba1c:	0f 90       	pop	r0
   1ba1e:	0f 90       	pop	r0
   1ba20:	80 e0       	ldi	r24, 0x00	; 0
   1ba22:	90 e0       	ldi	r25, 0x00	; 0
   1ba24:	ae c2       	rjmp	.+1372   	; 0x1bf82 <lif_extract_e010_as_ascii+0x5ce>
    }

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
   1ba26:	f6 01       	movw	r30, r12
   1ba28:	e6 5a       	subi	r30, 0xA6	; 166
   1ba2a:	ff 4f       	sbci	r31, 0xFF	; 255
   1ba2c:	80 81       	ld	r24, Z
   1ba2e:	91 81       	ldd	r25, Z+1	; 0x01
   1ba30:	9c 01       	movw	r18, r24
   1ba32:	2c 7f       	andi	r18, 0xFC	; 252
   1ba34:	20 31       	cpi	r18, 0x10	; 16
   1ba36:	30 4e       	sbci	r19, 0xE0	; 224
   1ba38:	c9 f0       	breq	.+50     	; 0x1ba6c <lif_extract_e010_as_ascii+0xb8>
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
   1ba3a:	9f 93       	push	r25
   1ba3c:	8f 93       	push	r24
   1ba3e:	ef 92       	push	r14
   1ba40:	c4 5e       	subi	r28, 0xE4	; 228
   1ba42:	dd 4f       	sbci	r29, 0xFD	; 253
   1ba44:	58 81       	ld	r21, Y
   1ba46:	cc 51       	subi	r28, 0x1C	; 28
   1ba48:	d2 40       	sbci	r29, 0x02	; 2
   1ba4a:	5f 93       	push	r21
   1ba4c:	81 e9       	ldi	r24, 0x91	; 145
   1ba4e:	96 e3       	ldi	r25, 0x36	; 54
   1ba50:	1f 92       	push	r1
   1ba52:	9f 93       	push	r25
   1ba54:	8f 93       	push	r24
   1ba56:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1ba5a:	c6 01       	movw	r24, r12
   1ba5c:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>

    if((LIF->DIR.FileType & 0xFFFC) != 0xE010)
    {
        printf("File %s has wrong type:[%04XH] expected 0xE010..0xE013\n", username, (int) LIF->DIR.FileType);
        lif_closedir(LIF);
        return(0);
   1ba60:	0f b6       	in	r0, 0x3f	; 63
   1ba62:	f8 94       	cli
   1ba64:	de bf       	out	0x3e, r29	; 62
   1ba66:	0f be       	out	0x3f, r0	; 63
   1ba68:	cd bf       	out	0x3d, r28	; 61
   1ba6a:	da cf       	rjmp	.-76     	; 0x1ba20 <lif_extract_e010_as_ascii+0x6c>
    }

    start = LIF->DIR.FileStartSector;
   1ba6c:	f6 01       	movw	r30, r12
   1ba6e:	e4 5a       	subi	r30, 0xA4	; 164
   1ba70:	ff 4f       	sbci	r31, 0xFF	; 255
   1ba72:	80 80       	ld	r8, Z
   1ba74:	91 80       	ldd	r9, Z+1	; 0x01
   1ba76:	a2 80       	ldd	r10, Z+2	; 0x02
   1ba78:	b3 80       	ldd	r11, Z+3	; 0x03
    end = start + LIF->DIR.FileSectors;
   1ba7a:	34 96       	adiw	r30, 0x04	; 4
   1ba7c:	80 81       	ld	r24, Z
   1ba7e:	91 81       	ldd	r25, Z+1	; 0x01
   1ba80:	a2 81       	ldd	r26, Z+2	; 0x02
   1ba82:	b3 81       	ldd	r27, Z+3	; 0x03
   1ba84:	a5 01       	movw	r20, r10
   1ba86:	94 01       	movw	r18, r8
   1ba88:	28 0f       	add	r18, r24
   1ba8a:	39 1f       	adc	r19, r25
   1ba8c:	4a 1f       	adc	r20, r26
   1ba8e:	5b 1f       	adc	r21, r27
   1ba90:	c9 5d       	subi	r28, 0xD9	; 217
   1ba92:	dd 4f       	sbci	r29, 0xFD	; 253
   1ba94:	28 83       	st	Y, r18
   1ba96:	39 83       	std	Y+1, r19	; 0x01
   1ba98:	4a 83       	std	Y+2, r20	; 0x02
   1ba9a:	5b 83       	std	Y+3, r21	; 0x03
   1ba9c:	c7 52       	subi	r28, 0x27	; 39
   1ba9e:	d2 40       	sbci	r29, 0x02	; 2

    t = lif_lifbcd2time(LIF->DIR.date);
   1baa0:	c6 01       	movw	r24, r12
   1baa2:	8c 59       	subi	r24, 0x9C	; 156
   1baa4:	9f 4f       	sbci	r25, 0xFF	; 255
   1baa6:	0e 94 49 cb 	call	0x19692	; 0x19692 <lif_lifbcd2time>
   1baaa:	c3 5e       	subi	r28, 0xE3	; 227
   1baac:	dd 4f       	sbci	r29, 0xFD	; 253
   1baae:	68 83       	st	Y, r22
   1bab0:	79 83       	std	Y+1, r23	; 0x01
   1bab2:	8a 83       	std	Y+2, r24	; 0x02
   1bab4:	9b 83       	std	Y+3, r25	; 0x03
   1bab6:	cd 51       	subi	r28, 0x1D	; 29
   1bab8:	d2 40       	sbci	r29, 0x02	; 2

    offset = start * (long) LIF_SECTOR_SIZE;
   1baba:	ba 2d       	mov	r27, r10
   1babc:	a9 2d       	mov	r26, r9
   1babe:	98 2d       	mov	r25, r8
   1bac0:	88 27       	eor	r24, r24
   1bac2:	cf 5e       	subi	r28, 0xEF	; 239
   1bac4:	dd 4f       	sbci	r29, 0xFD	; 253
   1bac6:	88 83       	st	Y, r24
   1bac8:	99 83       	std	Y+1, r25	; 0x01
   1baca:	aa 83       	std	Y+2, r26	; 0x02
   1bacc:	bb 83       	std	Y+3, r27	; 0x03
   1bace:	c1 51       	subi	r28, 0x11	; 17
   1bad0:	d2 40       	sbci	r29, 0x02	; 2

    fo = lif_open(username,"wb");
   1bad2:	69 e6       	ldi	r22, 0x69	; 105
   1bad4:	78 e0       	ldi	r23, 0x08	; 8
   1bad6:	c4 5e       	subi	r28, 0xE4	; 228
   1bad8:	dd 4f       	sbci	r29, 0xFD	; 253
   1bada:	88 81       	ld	r24, Y
   1badc:	cc 51       	subi	r28, 0x1C	; 28
   1bade:	d2 40       	sbci	r29, 0x02	; 2
   1bae0:	9e 2d       	mov	r25, r14
   1bae2:	0e 94 f6 c6 	call	0x18dec	; 0x18dec <lif_open>
   1bae6:	c6 5e       	subi	r28, 0xE6	; 230
   1bae8:	dd 4f       	sbci	r29, 0xFD	; 253
   1baea:	99 83       	std	Y+1, r25	; 0x01
   1baec:	88 83       	st	Y, r24
   1baee:	ca 51       	subi	r28, 0x1A	; 26
   1baf0:	d2 40       	sbci	r29, 0x02	; 2
    if(fo == NULL)
   1baf2:	89 2b       	or	r24, r25
   1baf4:	21 f4       	brne	.+8      	; 0x1bafe <lif_extract_e010_as_ascii+0x14a>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1baf6:	c6 01       	movw	r24, r12
   1baf8:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>
   1bafc:	91 cf       	rjmp	.-222    	; 0x1ba20 <lif_extract_e010_as_ascii+0x6c>
    {
        lif_closedir(LIF);
        return(0);
    }

    printf("Extracting: %s\n", username);
   1bafe:	ef 92       	push	r14
   1bb00:	c4 5e       	subi	r28, 0xE4	; 228
   1bb02:	dd 4f       	sbci	r29, 0xFD	; 253
   1bb04:	98 81       	ld	r25, Y
   1bb06:	cc 51       	subi	r28, 0x1C	; 28
   1bb08:	d2 40       	sbci	r29, 0x02	; 2
   1bb0a:	9f 93       	push	r25
   1bb0c:	81 e8       	ldi	r24, 0x81	; 129
   1bb0e:	96 e3       	ldi	r25, 0x36	; 54
   1bb10:	1f 92       	push	r1
   1bb12:	9f 93       	push	r25
   1bb14:	8f 93       	push	r24
   1bb16:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1bb1a:	0f 90       	pop	r0
   1bb1c:	0f 90       	pop	r0
   1bb1e:	0f 90       	pop	r0
   1bb20:	0f 90       	pop	r0
   1bb22:	0f 90       	pop	r0
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
    wind = 0;
   1bb24:	81 2c       	mov	r8, r1
   1bb26:	91 2c       	mov	r9, r1
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
    int done = 0;
   1bb28:	c8 5e       	subi	r28, 0xE8	; 232
   1bb2a:	dd 4f       	sbci	r29, 0xFD	; 253
   1bb2c:	19 82       	std	Y+1, r1	; 0x01
   1bb2e:	18 82       	st	Y, r1
   1bb30:	c8 51       	subi	r28, 0x18	; 24
   1bb32:	d2 40       	sbci	r29, 0x02	; 2
    lif_t *LIF;
    uint32_t start, end;    // sectors
    long offset, bytes;     // bytes
    int index;
    int i, len,size;
    int status = 1;
   1bb34:	a1 e0       	ldi	r26, 0x01	; 1
   1bb36:	cb 5e       	subi	r28, 0xEB	; 235
   1bb38:	dd 4f       	sbci	r29, 0xFD	; 253
   1bb3a:	a8 83       	st	Y, r26
   1bb3c:	c5 51       	subi	r28, 0x15	; 21
   1bb3e:	d2 40       	sbci	r29, 0x02	; 2
   1bb40:	f1 2c       	mov	r15, r1
        return(0);
    }

    printf("Extracting: %s\n", username);

    bytes = 0;
   1bb42:	41 2c       	mov	r4, r1
   1bb44:	51 2c       	mov	r5, r1
   1bb46:	32 01       	movw	r6, r4
                        status = 0;
                        done = 1;
                        break;
                    }
                    bytes += size;
                    printf("Wrote: %8ld\r", bytes);
   1bb48:	81 ec       	ldi	r24, 0xC1	; 193
   1bb4a:	95 e3       	ldi	r25, 0x35	; 53
   1bb4c:	9c 01       	movw	r18, r24
   1bb4e:	40 e0       	ldi	r20, 0x00	; 0
   1bb50:	cf 5d       	subi	r28, 0xDF	; 223
   1bb52:	dd 4f       	sbci	r29, 0xFD	; 253
   1bb54:	28 83       	st	Y, r18
   1bb56:	39 83       	std	Y+1, r19	; 0x01
   1bb58:	4a 83       	std	Y+2, r20	; 0x02
   1bb5a:	c1 52       	subi	r28, 0x21	; 33
   1bb5c:	d2 40       	sbci	r29, 0x02	; 2
                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1bb5e:	8e ec       	ldi	r24, 0xCE	; 206
   1bb60:	95 e3       	ldi	r25, 0x35	; 53
   1bb62:	9c 01       	movw	r18, r24
   1bb64:	40 e0       	ldi	r20, 0x00	; 0
   1bb66:	cc 5d       	subi	r28, 0xDC	; 220
   1bb68:	dd 4f       	sbci	r29, 0xFD	; 253
   1bb6a:	28 83       	st	Y, r18
   1bb6c:	39 83       	std	Y+1, r19	; 0x01
   1bb6e:	4a 83       	std	Y+2, r20	; 0x02
   1bb70:	c4 52       	subi	r28, 0x24	; 36
   1bb72:	d2 40       	sbci	r29, 0x02	; 2

    bytes = 0;
    wind = 0;
    ind = 0;

    while(lif_bytes2sectors(offset) <= end)
   1bb74:	cf 5e       	subi	r28, 0xEF	; 239
   1bb76:	dd 4f       	sbci	r29, 0xFD	; 253
   1bb78:	28 81       	ld	r18, Y
   1bb7a:	39 81       	ldd	r19, Y+1	; 0x01
   1bb7c:	4a 81       	ldd	r20, Y+2	; 0x02
   1bb7e:	5b 81       	ldd	r21, Y+3	; 0x03
   1bb80:	c1 51       	subi	r28, 0x11	; 17
   1bb82:	d2 40       	sbci	r29, 0x02	; 2
   1bb84:	bb 27       	eor	r27, r27
   1bb86:	a5 2f       	mov	r26, r21
   1bb88:	94 2f       	mov	r25, r20
   1bb8a:	83 2f       	mov	r24, r19
   1bb8c:	c9 5d       	subi	r28, 0xD9	; 217
   1bb8e:	dd 4f       	sbci	r29, 0xFD	; 253
   1bb90:	28 81       	ld	r18, Y
   1bb92:	39 81       	ldd	r19, Y+1	; 0x01
   1bb94:	4a 81       	ldd	r20, Y+2	; 0x02
   1bb96:	5b 81       	ldd	r21, Y+3	; 0x03
   1bb98:	c7 52       	subi	r28, 0x27	; 39
   1bb9a:	d2 40       	sbci	r29, 0x02	; 2
   1bb9c:	28 17       	cp	r18, r24
   1bb9e:	39 07       	cpc	r19, r25
   1bba0:	4a 07       	cpc	r20, r26
   1bba2:	5b 07       	cpc	r21, r27
   1bba4:	08 f4       	brcc	.+2      	; 0x1bba8 <lif_extract_e010_as_ascii+0x1f4>
   1bba6:	76 c1       	rjmp	.+748    	; 0x1be94 <lif_extract_e010_as_ascii+0x4e0>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
   1bba8:	00 e0       	ldi	r16, 0x00	; 0
   1bbaa:	11 e0       	ldi	r17, 0x01	; 1
   1bbac:	cf 5e       	subi	r28, 0xEF	; 239
   1bbae:	dd 4f       	sbci	r29, 0xFD	; 253
   1bbb0:	28 81       	ld	r18, Y
   1bbb2:	39 81       	ldd	r19, Y+1	; 0x01
   1bbb4:	4a 81       	ldd	r20, Y+2	; 0x02
   1bbb6:	5b 81       	ldd	r21, Y+3	; 0x03
   1bbb8:	c1 51       	subi	r28, 0x11	; 17
   1bbba:	d2 40       	sbci	r29, 0x02	; 2
   1bbbc:	be 01       	movw	r22, r28
   1bbbe:	6b 5f       	subi	r22, 0xFB	; 251
   1bbc0:	7e 4f       	sbci	r23, 0xFE	; 254
   1bbc2:	c6 01       	movw	r24, r12
   1bbc4:	0e 94 7c c7 	call	0x18ef8	; 0x18ef8 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1bbc8:	6f 3f       	cpi	r22, 0xFF	; 255
   1bbca:	71 05       	cpc	r23, r1
   1bbcc:	09 f0       	breq	.+2      	; 0x1bbd0 <lif_extract_e010_as_ascii+0x21c>
   1bbce:	0c f4       	brge	.+2      	; 0x1bbd2 <lif_extract_e010_as_ascii+0x21e>
   1bbd0:	5b c1       	rjmp	.+694    	; 0x1be88 <lif_extract_e010_as_ascii+0x4d4>
   1bbd2:	00 e0       	ldi	r16, 0x00	; 0
   1bbd4:	10 e0       	ldi	r17, 0x00	; 0
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1bbd6:	c8 5e       	subi	r28, 0xE8	; 232
   1bbd8:	dd 4f       	sbci	r29, 0xFD	; 253
   1bbda:	a8 81       	ld	r26, Y
   1bbdc:	b9 81       	ldd	r27, Y+1	; 0x01
   1bbde:	c8 51       	subi	r28, 0x18	; 24
   1bbe0:	d2 40       	sbci	r29, 0x02	; 2
   1bbe2:	ab 2b       	or	r26, r27
   1bbe4:	09 f0       	breq	.+2      	; 0x1bbe8 <lif_extract_e010_as_ascii+0x234>
   1bbe6:	3c c1       	rjmp	.+632    	; 0x1be60 <lif_extract_e010_as_ascii+0x4ac>
        {
            if(buf[ind] == 0xDF || buf[ind] == 0xCF || buf[ind] == 0x6F)
   1bbe8:	e5 e0       	ldi	r30, 0x05	; 5
   1bbea:	f1 e0       	ldi	r31, 0x01	; 1
   1bbec:	ec 0f       	add	r30, r28
   1bbee:	fd 1f       	adc	r31, r29
   1bbf0:	e0 0f       	add	r30, r16
   1bbf2:	f1 1f       	adc	r31, r17
   1bbf4:	80 81       	ld	r24, Z
   1bbf6:	98 2f       	mov	r25, r24
   1bbf8:	9f 7e       	andi	r25, 0xEF	; 239
   1bbfa:	9f 3c       	cpi	r25, 0xCF	; 207
   1bbfc:	11 f0       	breq	.+4      	; 0x1bc02 <lif_extract_e010_as_ascii+0x24e>
   1bbfe:	8f 36       	cpi	r24, 0x6F	; 111
   1bc00:	d9 f5       	brne	.+118    	; 0x1bc78 <lif_extract_e010_as_ascii+0x2c4>
            {
                ++ind;
                len = buf[ind++] & 0xff;
   1bc02:	e5 e0       	ldi	r30, 0x05	; 5
   1bc04:	f1 e0       	ldi	r31, 0x01	; 1
   1bc06:	ec 0f       	add	r30, r28
   1bc08:	fd 1f       	adc	r31, r29
   1bc0a:	e0 0f       	add	r30, r16
   1bc0c:	f1 1f       	adc	r31, r17
   1bc0e:	21 80       	ldd	r2, Z+1	; 0x01
                len |= ((buf[ind++] & 0xff) <<8); 
   1bc10:	f8 01       	movw	r30, r16
   1bc12:	32 96       	adiw	r30, 0x02	; 2
   1bc14:	45 e0       	ldi	r20, 0x05	; 5
   1bc16:	51 e0       	ldi	r21, 0x01	; 1
   1bc18:	4c 0f       	add	r20, r28
   1bc1a:	5d 1f       	adc	r21, r29
   1bc1c:	e4 0f       	add	r30, r20
   1bc1e:	f5 1f       	adc	r31, r21
   1bc20:	0d 5f       	subi	r16, 0xFD	; 253
   1bc22:	1f 4f       	sbci	r17, 0xFF	; 255
   1bc24:	80 81       	ld	r24, Z
   1bc26:	31 2c       	mov	r3, r1
   1bc28:	38 2a       	or	r3, r24
                // EOF ?
                if(len == 0)
   1bc2a:	21 14       	cp	r2, r1
   1bc2c:	31 04       	cpc	r3, r1
   1bc2e:	09 f4       	brne	.+2      	; 0x1bc32 <lif_extract_e010_as_ascii+0x27e>
   1bc30:	0f c1       	rjmp	.+542    	; 0x1be50 <lif_extract_e010_as_ascii+0x49c>
                {
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
   1bc32:	5f ef       	ldi	r21, 0xFF	; 255
   1bc34:	25 16       	cp	r2, r21
   1bc36:	31 04       	cpc	r3, r1
   1bc38:	09 f0       	breq	.+2      	; 0x1bc3c <lif_extract_e010_as_ascii+0x288>
   1bc3a:	7c f4       	brge	.+30     	; 0x1bc5a <lif_extract_e010_as_ascii+0x2a6>
   1bc3c:	ca 5e       	subi	r28, 0xEA	; 234
   1bc3e:	dd 4f       	sbci	r29, 0xFD	; 253
   1bc40:	19 82       	std	Y+1, r1	; 0x01
   1bc42:	18 82       	st	Y, r1
   1bc44:	c6 51       	subi	r28, 0x16	; 22
   1bc46:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
   1bc48:	c1 01       	movw	r24, r2
   1bc4a:	01 97       	sbiw	r24, 0x01	; 1
   1bc4c:	c5 5d       	subi	r28, 0xD5	; 213
   1bc4e:	dd 4f       	sbci	r29, 0xFD	; 253
   1bc50:	99 83       	std	Y+1, r25	; 0x01
   1bc52:	88 83       	st	Y, r24
   1bc54:	cb 52       	subi	r28, 0x2B	; 43
   1bc56:	d2 40       	sbci	r29, 0x02	; 2
   1bc58:	7b c0       	rjmp	.+246    	; 0x1bd50 <lif_extract_e010_as_ascii+0x39c>
                    done = 1;
                    break;
                }
                if(len >= LIF_SECTOR_SIZE)
                {
                    printf("lif_extract_e010_as_ascii: string too big size = %d\n", (int)len);
   1bc5a:	3f 92       	push	r3
   1bc5c:	2f 92       	push	r2
   1bc5e:	8c e4       	ldi	r24, 0x4C	; 76
   1bc60:	96 e3       	ldi	r25, 0x36	; 54
   1bc62:	1f 92       	push	r1
   1bc64:	9f 93       	push	r25
   1bc66:	8f 93       	push	r24
   1bc68:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
                    status = 0;
                    done = 1;
                    break;
   1bc6c:	0f 90       	pop	r0
   1bc6e:	0f 90       	pop	r0
   1bc70:	0f 90       	pop	r0
   1bc72:	0f 90       	pop	r0
   1bc74:	0f 90       	pop	r0
   1bc76:	2b c0       	rjmp	.+86     	; 0x1bcce <lif_extract_e010_as_ascii+0x31a>
                }
            }
            else if(buf[ind] == 0xEF)
   1bc78:	8f 3e       	cpi	r24, 0xEF	; 239
   1bc7a:	09 f4       	brne	.+2      	; 0x1bc7e <lif_extract_e010_as_ascii+0x2ca>
   1bc7c:	f1 c0       	rjmp	.+482    	; 0x1be60 <lif_extract_e010_as_ascii+0x4ac>
                ind = 0;
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
   1bc7e:	1f 93       	push	r17
   1bc80:	0f 93       	push	r16
   1bc82:	cc 5e       	subi	r28, 0xEC	; 236
   1bc84:	dd 4f       	sbci	r29, 0xFD	; 253
   1bc86:	b8 81       	ld	r27, Y
   1bc88:	c4 51       	subi	r28, 0x14	; 20
   1bc8a:	d2 40       	sbci	r29, 0x02	; 2
   1bc8c:	bf 93       	push	r27
   1bc8e:	cd 5e       	subi	r28, 0xED	; 237
   1bc90:	dd 4f       	sbci	r29, 0xFD	; 253
   1bc92:	28 81       	ld	r18, Y
   1bc94:	c3 51       	subi	r28, 0x13	; 19
   1bc96:	d2 40       	sbci	r29, 0x02	; 2
   1bc98:	2f 93       	push	r18
   1bc9a:	ce 5e       	subi	r28, 0xEE	; 238
   1bc9c:	dd 4f       	sbci	r29, 0xFD	; 253
   1bc9e:	38 81       	ld	r19, Y
   1bca0:	c2 51       	subi	r28, 0x12	; 18
   1bca2:	d2 40       	sbci	r29, 0x02	; 2
   1bca4:	3f 93       	push	r19
   1bca6:	cf 5e       	subi	r28, 0xEF	; 239
   1bca8:	dd 4f       	sbci	r29, 0xFD	; 253
   1bcaa:	48 81       	ld	r20, Y
   1bcac:	c1 51       	subi	r28, 0x11	; 17
   1bcae:	d2 40       	sbci	r29, 0x02	; 2
   1bcb0:	4f 93       	push	r20
   1bcb2:	1f 92       	push	r1
   1bcb4:	8f 93       	push	r24
   1bcb6:	86 ef       	ldi	r24, 0xF6	; 246
   1bcb8:	95 e3       	ldi	r25, 0x35	; 53
   1bcba:	1f 92       	push	r1
   1bcbc:	9f 93       	push	r25
   1bcbe:	8f 93       	push	r24
   1bcc0:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
                status = 0;
                done = 1;
                break;
   1bcc4:	0f b6       	in	r0, 0x3f	; 63
   1bcc6:	f8 94       	cli
   1bcc8:	de bf       	out	0x3e, r29	; 62
   1bcca:	0f be       	out	0x3f, r0	; 63
   1bccc:	cd bf       	out	0x3d, r28	; 61
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
                done = 1;
   1bcce:	a1 e0       	ldi	r26, 0x01	; 1
   1bcd0:	b0 e0       	ldi	r27, 0x00	; 0
   1bcd2:	c8 5e       	subi	r28, 0xE8	; 232
   1bcd4:	dd 4f       	sbci	r29, 0xFD	; 253
   1bcd6:	b9 83       	std	Y+1, r27	; 0x01
   1bcd8:	a8 83       	st	Y, r26
   1bcda:	c8 51       	subi	r28, 0x18	; 24
   1bcdc:	d2 40       	sbci	r29, 0x02	; 2
                break;
            }
            else
            {
                printf("lif_extract_e010_as_ascii: unexpected control byte:[%02XH] @ offset: %8lx, ind:%02XH\n", (int)buf[ind], offset, (int)ind);
                status = 0;
   1bcde:	cb 5e       	subi	r28, 0xEB	; 235
   1bce0:	dd 4f       	sbci	r29, 0xFD	; 253
   1bce2:	18 82       	st	Y, r1
   1bce4:	c5 51       	subi	r28, 0x15	; 21
   1bce6:	d2 40       	sbci	r29, 0x02	; 2
   1bce8:	f1 2c       	mov	r15, r1
                done = 1;
                break;
   1bcea:	ba c0       	rjmp	.+372    	; 0x1be60 <lif_extract_e010_as_ascii+0x4ac>
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1bcec:	0f 3f       	cpi	r16, 0xFF	; 255
   1bcee:	11 05       	cpc	r17, r1
   1bcf0:	11 f0       	breq	.+4      	; 0x1bcf6 <lif_extract_e010_as_ascii+0x342>
   1bcf2:	0c f0       	brlt	.+2      	; 0x1bcf6 <lif_extract_e010_as_ascii+0x342>
   1bcf4:	b5 c0       	rjmp	.+362    	; 0x1be60 <lif_extract_e010_as_ascii+0x4ac>
            {
                if(buf[ind] == '\r' && i == len-1)
   1bcf6:	e5 e0       	ldi	r30, 0x05	; 5
   1bcf8:	f1 e0       	ldi	r31, 0x01	; 1
   1bcfa:	ec 0f       	add	r30, r28
   1bcfc:	fd 1f       	adc	r31, r29
   1bcfe:	e0 0f       	add	r30, r16
   1bd00:	f1 1f       	adc	r31, r17
   1bd02:	20 81       	ld	r18, Z
   1bd04:	a4 01       	movw	r20, r8
   1bd06:	4f 5f       	subi	r20, 0xFF	; 255
   1bd08:	5f 4f       	sbci	r21, 0xFF	; 255
   1bd0a:	5a 01       	movw	r10, r20
   1bd0c:	2d 30       	cpi	r18, 0x0D	; 13
   1bd0e:	51 f1       	breq	.+84     	; 0x1bd64 <lif_extract_e010_as_ascii+0x3b0>
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1bd10:	9a 2d       	mov	r25, r10
   1bd12:	8b 2d       	mov	r24, r11
   1bd14:	0f 5f       	subi	r16, 0xFF	; 255
   1bd16:	1f 4f       	sbci	r17, 0xFF	; 255
   1bd18:	e1 e0       	ldi	r30, 0x01	; 1
   1bd1a:	f0 e0       	ldi	r31, 0x00	; 0
   1bd1c:	ec 0f       	add	r30, r28
   1bd1e:	fd 1f       	adc	r31, r29
   1bd20:	e8 0d       	add	r30, r8
   1bd22:	f9 1d       	adc	r31, r9
   1bd24:	20 83       	st	Z, r18
                }

                if(wind >= LIF_SECTOR_SIZE)
   1bd26:	2f ef       	ldi	r18, 0xFF	; 255
   1bd28:	a2 16       	cp	r10, r18
   1bd2a:	b1 04       	cpc	r11, r1
   1bd2c:	09 f0       	breq	.+2      	; 0x1bd30 <lif_extract_e010_as_ascii+0x37c>
   1bd2e:	ac f5       	brge	.+106    	; 0x1bd9a <lif_extract_e010_as_ascii+0x3e6>
                status = 0;
                done = 1;
                break;
            }
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
   1bd30:	ca 5e       	subi	r28, 0xEA	; 234
   1bd32:	dd 4f       	sbci	r29, 0xFD	; 253
   1bd34:	48 81       	ld	r20, Y
   1bd36:	59 81       	ldd	r21, Y+1	; 0x01
   1bd38:	c6 51       	subi	r28, 0x16	; 22
   1bd3a:	d2 40       	sbci	r29, 0x02	; 2
   1bd3c:	4f 5f       	subi	r20, 0xFF	; 255
   1bd3e:	5f 4f       	sbci	r21, 0xFF	; 255
   1bd40:	ca 5e       	subi	r28, 0xEA	; 234
   1bd42:	dd 4f       	sbci	r29, 0xFD	; 253
   1bd44:	59 83       	std	Y+1, r21	; 0x01
   1bd46:	48 83       	st	Y, r20
   1bd48:	c6 51       	subi	r28, 0x16	; 22
   1bd4a:	d2 40       	sbci	r29, 0x02	; 2
   1bd4c:	89 2e       	mov	r8, r25
   1bd4e:	98 2e       	mov	r9, r24
   1bd50:	ca 5e       	subi	r28, 0xEA	; 234
   1bd52:	dd 4f       	sbci	r29, 0xFD	; 253
   1bd54:	88 81       	ld	r24, Y
   1bd56:	99 81       	ldd	r25, Y+1	; 0x01
   1bd58:	c6 51       	subi	r28, 0x16	; 22
   1bd5a:	d2 40       	sbci	r29, 0x02	; 2
   1bd5c:	82 15       	cp	r24, r2
   1bd5e:	93 05       	cpc	r25, r3
   1bd60:	2c f2       	brlt	.-118    	; 0x1bcec <lif_extract_e010_as_ascii+0x338>
   1bd62:	70 c0       	rjmp	.+224    	; 0x1be44 <lif_extract_e010_as_ascii+0x490>
            {
                if(buf[ind] == '\r' && i == len-1)
   1bd64:	ca 5e       	subi	r28, 0xEA	; 234
   1bd66:	dd 4f       	sbci	r29, 0xFD	; 253
   1bd68:	88 81       	ld	r24, Y
   1bd6a:	99 81       	ldd	r25, Y+1	; 0x01
   1bd6c:	c6 51       	subi	r28, 0x16	; 22
   1bd6e:	d2 40       	sbci	r29, 0x02	; 2
   1bd70:	c5 5d       	subi	r28, 0xD5	; 213
   1bd72:	dd 4f       	sbci	r29, 0xFD	; 253
   1bd74:	a8 81       	ld	r26, Y
   1bd76:	b9 81       	ldd	r27, Y+1	; 0x01
   1bd78:	cb 52       	subi	r28, 0x2B	; 43
   1bd7a:	d2 40       	sbci	r29, 0x02	; 2
   1bd7c:	8a 17       	cp	r24, r26
   1bd7e:	9b 07       	cpc	r25, r27
   1bd80:	39 f6       	brne	.-114    	; 0x1bd10 <lif_extract_e010_as_ascii+0x35c>
                {
                    wbuf[wind++] = '\n';
   1bd82:	e1 e0       	ldi	r30, 0x01	; 1
   1bd84:	f0 e0       	ldi	r31, 0x00	; 0
   1bd86:	ec 0f       	add	r30, r28
   1bd88:	fd 1f       	adc	r31, r29
   1bd8a:	e8 0d       	add	r30, r8
   1bd8c:	f9 1d       	adc	r31, r9
   1bd8e:	ba e0       	ldi	r27, 0x0A	; 10
   1bd90:	b0 83       	st	Z, r27
                    ++ind;
   1bd92:	0f 5f       	subi	r16, 0xFF	; 255
   1bd94:	1f 4f       	sbci	r17, 0xFF	; 255
            // write string
            for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)
            {
                if(buf[ind] == '\r' && i == len-1)
                {
                    wbuf[wind++] = '\n';
   1bd96:	4a 01       	movw	r8, r20
                    ++ind;
                    break;
   1bd98:	55 c0       	rjmp	.+170    	; 0x1be44 <lif_extract_e010_as_ascii+0x490>
                    wbuf[wind++] = buf[ind++];
                }

                if(wind >= LIF_SECTOR_SIZE)
                {
                    size = fwrite(wbuf,1,wind,fo);
   1bd9a:	c6 5e       	subi	r28, 0xE6	; 230
   1bd9c:	dd 4f       	sbci	r29, 0xFD	; 253
   1bd9e:	28 81       	ld	r18, Y
   1bda0:	39 81       	ldd	r19, Y+1	; 0x01
   1bda2:	ca 51       	subi	r28, 0x1A	; 26
   1bda4:	d2 40       	sbci	r29, 0x02	; 2
   1bda6:	a5 01       	movw	r20, r10
   1bda8:	61 e0       	ldi	r22, 0x01	; 1
   1bdaa:	70 e0       	ldi	r23, 0x00	; 0
   1bdac:	ce 01       	movw	r24, r28
   1bdae:	01 96       	adiw	r24, 0x01	; 1
   1bdb0:	0e 94 fa 7f 	call	0xfff4	; 0xfff4 <fwrite>
                    if(size < wind)
   1bdb4:	8a 15       	cp	r24, r10
   1bdb6:	9b 05       	cpc	r25, r11
   1bdb8:	14 f5       	brge	.+68     	; 0x1bdfe <lif_extract_e010_as_ascii+0x44a>
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
   1bdba:	1f 92       	push	r1
   1bdbc:	cb 5d       	subi	r28, 0xDB	; 219
   1bdbe:	dd 4f       	sbci	r29, 0xFD	; 253
   1bdc0:	38 81       	ld	r19, Y
   1bdc2:	c5 52       	subi	r28, 0x25	; 37
   1bdc4:	d2 40       	sbci	r29, 0x02	; 2
   1bdc6:	3f 93       	push	r19
   1bdc8:	cc 5d       	subi	r28, 0xDC	; 220
   1bdca:	dd 4f       	sbci	r29, 0xFD	; 253
   1bdcc:	48 81       	ld	r20, Y
   1bdce:	c4 52       	subi	r28, 0x24	; 36
   1bdd0:	d2 40       	sbci	r29, 0x02	; 2
   1bdd2:	4f 93       	push	r20
   1bdd4:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
                        status = 0;
                        done = 1;
                        break;
   1bdd8:	0f 90       	pop	r0
   1bdda:	0f 90       	pop	r0
   1bddc:	0f 90       	pop	r0
                    ++ind;
                    break;
                }
                else 
                {
                    wbuf[wind++] = buf[ind++];
   1bdde:	45 01       	movw	r8, r10
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
                        done = 1;
   1bde0:	81 e0       	ldi	r24, 0x01	; 1
   1bde2:	90 e0       	ldi	r25, 0x00	; 0
   1bde4:	c8 5e       	subi	r28, 0xE8	; 232
   1bde6:	dd 4f       	sbci	r29, 0xFD	; 253
   1bde8:	99 83       	std	Y+1, r25	; 0x01
   1bdea:	88 83       	st	Y, r24
   1bdec:	c8 51       	subi	r28, 0x18	; 24
   1bdee:	d2 40       	sbci	r29, 0x02	; 2
                {
                    size = fwrite(wbuf,1,wind,fo);
                    if(size < wind)
                    {
                        printf("lif_extract_e010_as_ascii: write error\n");
                        status = 0;
   1bdf0:	cb 5e       	subi	r28, 0xEB	; 235
   1bdf2:	dd 4f       	sbci	r29, 0xFD	; 253
   1bdf4:	18 82       	st	Y, r1
   1bdf6:	c5 51       	subi	r28, 0x15	; 21
   1bdf8:	d2 40       	sbci	r29, 0x02	; 2
   1bdfa:	f1 2c       	mov	r15, r1
                        done = 1;
                        break;
   1bdfc:	23 c0       	rjmp	.+70     	; 0x1be44 <lif_extract_e010_as_ascii+0x490>
                    }
                    bytes += size;
   1bdfe:	09 2e       	mov	r0, r25
   1be00:	00 0c       	add	r0, r0
   1be02:	aa 0b       	sbc	r26, r26
   1be04:	bb 0b       	sbc	r27, r27
   1be06:	48 0e       	add	r4, r24
   1be08:	59 1e       	adc	r5, r25
   1be0a:	6a 1e       	adc	r6, r26
   1be0c:	7b 1e       	adc	r7, r27
                    printf("Wrote: %8ld\r", bytes);
   1be0e:	7f 92       	push	r7
   1be10:	6f 92       	push	r6
   1be12:	5f 92       	push	r5
   1be14:	4f 92       	push	r4
   1be16:	1f 92       	push	r1
   1be18:	ce 5d       	subi	r28, 0xDE	; 222
   1be1a:	dd 4f       	sbci	r29, 0xFD	; 253
   1be1c:	98 81       	ld	r25, Y
   1be1e:	c2 52       	subi	r28, 0x22	; 34
   1be20:	d2 40       	sbci	r29, 0x02	; 2
   1be22:	9f 93       	push	r25
   1be24:	cf 5d       	subi	r28, 0xDF	; 223
   1be26:	dd 4f       	sbci	r29, 0xFD	; 253
   1be28:	a8 81       	ld	r26, Y
   1be2a:	c1 52       	subi	r28, 0x21	; 33
   1be2c:	d2 40       	sbci	r29, 0x02	; 2
   1be2e:	af 93       	push	r26
   1be30:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1be34:	0f b6       	in	r0, 0x3f	; 63
   1be36:	f8 94       	cli
   1be38:	de bf       	out	0x3e, r29	; 62
   1be3a:	0f be       	out	0x3f, r0	; 63
   1be3c:	cd bf       	out	0x3d, r28	; 61
                    wind = 0;
   1be3e:	90 e0       	ldi	r25, 0x00	; 0
   1be40:	80 e0       	ldi	r24, 0x00	; 0
   1be42:	76 cf       	rjmp	.-276    	; 0x1bd30 <lif_extract_e010_as_ascii+0x37c>
            status = 0;
            break;
        }

        ind = 0;
        while(ind < LIF_SECTOR_SIZE && !done)
   1be44:	0f 3f       	cpi	r16, 0xFF	; 255
   1be46:	11 05       	cpc	r17, r1
   1be48:	09 f0       	breq	.+2      	; 0x1be4c <lif_extract_e010_as_ascii+0x498>
   1be4a:	0c f4       	brge	.+2      	; 0x1be4e <lif_extract_e010_as_ascii+0x49a>
   1be4c:	c4 ce       	rjmp	.-632    	; 0x1bbd6 <lif_extract_e010_as_ascii+0x222>
   1be4e:	08 c0       	rjmp	.+16     	; 0x1be60 <lif_extract_e010_as_ascii+0x4ac>
                len = buf[ind++] & 0xff;
                len |= ((buf[ind++] & 0xff) <<8); 
                // EOF ?
                if(len == 0)
                {
                    done = 1;
   1be50:	21 e0       	ldi	r18, 0x01	; 1
   1be52:	30 e0       	ldi	r19, 0x00	; 0
   1be54:	c8 5e       	subi	r28, 0xE8	; 232
   1be56:	dd 4f       	sbci	r29, 0xFD	; 253
   1be58:	39 83       	std	Y+1, r19	; 0x01
   1be5a:	28 83       	st	Y, r18
   1be5c:	c8 51       	subi	r28, 0x18	; 24
   1be5e:	d2 40       	sbci	r29, 0x02	; 2

            }   // for(i=0;i <len && ind < LIF_SECTOR_SIZE;++i)

        }   // while(ind < LIF_SECTOR_SIZE && status)

        offset += (long) LIF_SECTOR_SIZE;
   1be60:	cf 5e       	subi	r28, 0xEF	; 239
   1be62:	dd 4f       	sbci	r29, 0xFD	; 253
   1be64:	88 81       	ld	r24, Y
   1be66:	99 81       	ldd	r25, Y+1	; 0x01
   1be68:	aa 81       	ldd	r26, Y+2	; 0x02
   1be6a:	bb 81       	ldd	r27, Y+3	; 0x03
   1be6c:	c1 51       	subi	r28, 0x11	; 17
   1be6e:	d2 40       	sbci	r29, 0x02	; 2
   1be70:	9f 5f       	subi	r25, 0xFF	; 255
   1be72:	af 4f       	sbci	r26, 0xFF	; 255
   1be74:	bf 4f       	sbci	r27, 0xFF	; 255
   1be76:	cf 5e       	subi	r28, 0xEF	; 239
   1be78:	dd 4f       	sbci	r29, 0xFD	; 253
   1be7a:	88 83       	st	Y, r24
   1be7c:	99 83       	std	Y+1, r25	; 0x01
   1be7e:	aa 83       	std	Y+2, r26	; 0x02
   1be80:	bb 83       	std	Y+3, r27	; 0x03
   1be82:	c1 51       	subi	r28, 0x11	; 17
   1be84:	d2 40       	sbci	r29, 0x02	; 2
   1be86:	76 ce       	rjmp	.-788    	; 0x1bb74 <lif_extract_e010_as_ascii+0x1c0>
    {
        // LIF images are always multiples of LIF_SECTOR_SIZE
        size = lif_read(LIF, buf, offset, LIF_SECTOR_SIZE);
        if(size < LIF_SECTOR_SIZE)
        {
            status = 0;
   1be88:	cb 5e       	subi	r28, 0xEB	; 235
   1be8a:	dd 4f       	sbci	r29, 0xFD	; 253
   1be8c:	18 82       	st	Y, r1
   1be8e:	c5 51       	subi	r28, 0x15	; 21
   1be90:	d2 40       	sbci	r29, 0x02	; 2
   1be92:	f1 2c       	mov	r15, r1
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1be94:	c6 01       	movw	r24, r12
   1be96:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>

    }   // while(offset <= end)

    lif_closedir(LIF);
    // Flush any remaining bytes
    if(wind)
   1be9a:	81 14       	cp	r8, r1
   1be9c:	91 04       	cpc	r9, r1
   1be9e:	51 f1       	breq	.+84     	; 0x1bef4 <lif_extract_e010_as_ascii+0x540>
    {
        size = fwrite(wbuf,1,wind,fo);
   1bea0:	c6 5e       	subi	r28, 0xE6	; 230
   1bea2:	dd 4f       	sbci	r29, 0xFD	; 253
   1bea4:	28 81       	ld	r18, Y
   1bea6:	39 81       	ldd	r19, Y+1	; 0x01
   1bea8:	ca 51       	subi	r28, 0x1A	; 26
   1beaa:	d2 40       	sbci	r29, 0x02	; 2
   1beac:	a4 01       	movw	r20, r8
   1beae:	61 e0       	ldi	r22, 0x01	; 1
   1beb0:	70 e0       	ldi	r23, 0x00	; 0
   1beb2:	ce 01       	movw	r24, r28
   1beb4:	01 96       	adiw	r24, 0x01	; 1
   1beb6:	0e 94 fa 7f 	call	0xfff4	; 0xfff4 <fwrite>
   1beba:	8c 01       	movw	r16, r24
        if(size < wind)
   1bebc:	88 15       	cp	r24, r8
   1bebe:	99 05       	cpc	r25, r9
   1bec0:	84 f4       	brge	.+32     	; 0x1bee2 <lif_extract_e010_as_ascii+0x52e>
        {
            printf("lif_extract_e010_as_ascii: write error\n");
   1bec2:	89 e9       	ldi	r24, 0x99	; 153
   1bec4:	95 e3       	ldi	r25, 0x35	; 53
   1bec6:	1f 92       	push	r1
   1bec8:	9f 93       	push	r25
   1beca:	8f 93       	push	r24
   1becc:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1bed0:	0f 90       	pop	r0
   1bed2:	0f 90       	pop	r0
   1bed4:	0f 90       	pop	r0
            status = 0;
   1bed6:	cb 5e       	subi	r28, 0xEB	; 235
   1bed8:	dd 4f       	sbci	r29, 0xFD	; 253
   1beda:	18 82       	st	Y, r1
   1bedc:	c5 51       	subi	r28, 0x15	; 21
   1bede:	d2 40       	sbci	r29, 0x02	; 2
   1bee0:	f1 2c       	mov	r15, r1
        }
        bytes += size;
   1bee2:	c8 01       	movw	r24, r16
   1bee4:	01 2e       	mov	r0, r17
   1bee6:	00 0c       	add	r0, r0
   1bee8:	aa 0b       	sbc	r26, r26
   1beea:	bb 0b       	sbc	r27, r27
   1beec:	48 0e       	add	r4, r24
   1beee:	59 1e       	adc	r5, r25
   1bef0:	6a 1e       	adc	r6, r26
   1bef2:	7b 1e       	adc	r7, r27
    }
    fclose(fo);
   1bef4:	c6 5e       	subi	r28, 0xE6	; 230
   1bef6:	dd 4f       	sbci	r29, 0xFD	; 253
   1bef8:	88 81       	ld	r24, Y
   1befa:	99 81       	ldd	r25, Y+1	; 0x01
   1befc:	ca 51       	subi	r28, 0x1A	; 26
   1befe:	d2 40       	sbci	r29, 0x02	; 2
   1bf00:	0e 94 7c 80 	call	0x100f8	; 0x100f8 <fclose>
    if(t)
   1bf04:	c3 5e       	subi	r28, 0xE3	; 227
   1bf06:	dd 4f       	sbci	r29, 0xFD	; 253
   1bf08:	88 81       	ld	r24, Y
   1bf0a:	99 81       	ldd	r25, Y+1	; 0x01
   1bf0c:	aa 81       	ldd	r26, Y+2	; 0x02
   1bf0e:	bb 81       	ldd	r27, Y+3	; 0x03
   1bf10:	cd 51       	subi	r28, 0x1D	; 29
   1bf12:	d2 40       	sbci	r29, 0x02	; 2
   1bf14:	00 97       	sbiw	r24, 0x00	; 0
   1bf16:	a1 05       	cpc	r26, r1
   1bf18:	b1 05       	cpc	r27, r1
   1bf1a:	d9 f0       	breq	.+54     	; 0x1bf52 <lif_extract_e010_as_ascii+0x59e>
    {
        struct utimbuf times;
        times.modtime = t;
   1bf1c:	c3 5f       	subi	r28, 0xF3	; 243
   1bf1e:	dd 4f       	sbci	r29, 0xFD	; 253
   1bf20:	88 83       	st	Y, r24
   1bf22:	99 83       	std	Y+1, r25	; 0x01
   1bf24:	aa 83       	std	Y+2, r26	; 0x02
   1bf26:	bb 83       	std	Y+3, r27	; 0x03
   1bf28:	cd 50       	subi	r28, 0x0D	; 13
   1bf2a:	d2 40       	sbci	r29, 0x02	; 2
        times.actime = t;
   1bf2c:	c7 5f       	subi	r28, 0xF7	; 247
   1bf2e:	dd 4f       	sbci	r29, 0xFD	; 253
   1bf30:	88 83       	st	Y, r24
   1bf32:	99 83       	std	Y+1, r25	; 0x01
   1bf34:	aa 83       	std	Y+2, r26	; 0x02
   1bf36:	bb 83       	std	Y+3, r27	; 0x03
   1bf38:	c9 50       	subi	r28, 0x09	; 9
   1bf3a:	d2 40       	sbci	r29, 0x02	; 2
        utime(username, (struct utimbuf *) &times);
   1bf3c:	be 01       	movw	r22, r28
   1bf3e:	67 5f       	subi	r22, 0xF7	; 247
   1bf40:	7d 4f       	sbci	r23, 0xFD	; 253
   1bf42:	c4 5e       	subi	r28, 0xE4	; 228
   1bf44:	dd 4f       	sbci	r29, 0xFD	; 253
   1bf46:	88 81       	ld	r24, Y
   1bf48:	cc 51       	subi	r28, 0x1C	; 28
   1bf4a:	d2 40       	sbci	r29, 0x02	; 2
   1bf4c:	9e 2d       	mov	r25, r14
   1bf4e:	0e 94 ba 7d 	call	0xfb74	; 0xfb74 <utime>
    }
    sync();
   1bf52:	0e 94 77 7f 	call	0xfeee	; 0xfeee <sync>
    printf("Wrote: %8ld\n", bytes);
   1bf56:	7f 92       	push	r7
   1bf58:	6f 92       	push	r6
   1bf5a:	5f 92       	push	r5
   1bf5c:	4f 92       	push	r4
   1bf5e:	8c e8       	ldi	r24, 0x8C	; 140
   1bf60:	95 e3       	ldi	r25, 0x35	; 53
   1bf62:	1f 92       	push	r1
   1bf64:	9f 93       	push	r25
   1bf66:	8f 93       	push	r24
   1bf68:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    return(status);
   1bf6c:	0f b6       	in	r0, 0x3f	; 63
   1bf6e:	f8 94       	cli
   1bf70:	de bf       	out	0x3e, r29	; 62
   1bf72:	0f be       	out	0x3f, r0	; 63
   1bf74:	cd bf       	out	0x3d, r28	; 61
   1bf76:	cb 5e       	subi	r28, 0xEB	; 235
   1bf78:	dd 4f       	sbci	r29, 0xFD	; 253
   1bf7a:	88 81       	ld	r24, Y
   1bf7c:	c5 51       	subi	r28, 0x15	; 21
   1bf7e:	d2 40       	sbci	r29, 0x02	; 2
   1bf80:	9f 2d       	mov	r25, r15
}
   1bf82:	c4 5d       	subi	r28, 0xD4	; 212
   1bf84:	dd 4f       	sbci	r29, 0xFD	; 253
   1bf86:	e2 e1       	ldi	r30, 0x12	; 18
   1bf88:	0c 94 dd e8 	jmp	0x1d1ba	; 0x1d1ba <__epilogue_restores__>

0001bf8c <lif_extract_lif_as_lif>:
/// @param[in] lifname:  name of file in LIF image we want to extract
/// @param[in] username: new LIF file to create
/// @return 1 on sucess or 0 on error
MEMSPACE
int lif_extract_lif_as_lif(char *lifimagename, char *lifname, char *username)
{
   1bf8c:	ad e0       	ldi	r26, 0x0D	; 13
   1bf8e:	b1 e0       	ldi	r27, 0x01	; 1
   1bf90:	ec ec       	ldi	r30, 0xCC	; 204
   1bf92:	ff ed       	ldi	r31, 0xDF	; 223
   1bf94:	0c 94 c1 e8 	jmp	0x1d182	; 0x1d182 <__prologue_saves__>
   1bf98:	f8 2e       	mov	r15, r24
   1bf9a:	e9 2e       	mov	r14, r25
   1bf9c:	16 2f       	mov	r17, r22
   1bf9e:	07 2f       	mov	r16, r23
   1bfa0:	3a 01       	movw	r6, r20
    int i, size;
    int sectors;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    LIF = lif_open_volume(lifimagename,"r");
   1bfa2:	66 e1       	ldi	r22, 0x16	; 22
   1bfa4:	77 e0       	ldi	r23, 0x07	; 7
   1bfa6:	0e 94 b8 d6 	call	0x1ad70	; 0x1ad70 <lif_open_volume>
   1bfaa:	4c 01       	movw	r8, r24
    if(LIF == NULL)
   1bfac:	00 97       	sbiw	r24, 0x00	; 0
   1bfae:	51 f4       	brne	.+20     	; 0x1bfc4 <lif_extract_lif_as_lif+0x38>
    {
        printf("LIF image not found:%s\n", lifimagename);
   1bfb0:	ef 92       	push	r14
   1bfb2:	ff 92       	push	r15
   1bfb4:	84 e7       	ldi	r24, 0x74	; 116
   1bfb6:	95 e3       	ldi	r25, 0x35	; 53
   1bfb8:	1f 92       	push	r1
   1bfba:	9f 93       	push	r25
   1bfbc:	8f 93       	push	r24
   1bfbe:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1bfc2:	11 c0       	rjmp	.+34     	; 0x1bfe6 <lif_extract_lif_as_lif+0x5a>
        return(0);
    }

    index = lif_find_file(LIF, lifname);
   1bfc4:	61 2f       	mov	r22, r17
   1bfc6:	70 2f       	mov	r23, r16
   1bfc8:	38 d9       	rcall	.-3472   	; 0x1b23a <lif_find_file>
    if(index == -1)
   1bfca:	01 96       	adiw	r24, 0x01	; 1
   1bfcc:	a1 f4       	brne	.+40     	; 0x1bff6 <lif_extract_lif_as_lif+0x6a>
    {
        printf("File not found:%s\n", lifname);
   1bfce:	0f 93       	push	r16
   1bfd0:	1f 93       	push	r17
   1bfd2:	81 e6       	ldi	r24, 0x61	; 97
   1bfd4:	95 e3       	ldi	r25, 0x35	; 53
   1bfd6:	1f 92       	push	r1
   1bfd8:	9f 93       	push	r25
   1bfda:	8f 93       	push	r24
   1bfdc:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1bfe0:	c4 01       	movw	r24, r8
   1bfe2:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(LIF);
        return(0);
   1bfe6:	0f 90       	pop	r0
   1bfe8:	0f 90       	pop	r0
   1bfea:	0f 90       	pop	r0
   1bfec:	0f 90       	pop	r0
   1bfee:	0f 90       	pop	r0
   1bff0:	00 e0       	ldi	r16, 0x00	; 0
   1bff2:	10 e0       	ldi	r17, 0x00	; 0
   1bff4:	0c c1       	rjmp	.+536    	; 0x1c20e <lif_extract_lif_as_lif+0x282>
    }

    sectors = LIF->DIR.FileSectors;
   1bff6:	a4 01       	movw	r20, r8
   1bff8:	40 5a       	subi	r20, 0xA0	; 160
   1bffa:	5f 4f       	sbci	r21, 0xFF	; 255
   1bffc:	c4 5f       	subi	r28, 0xF4	; 244
   1bffe:	de 4f       	sbci	r29, 0xFE	; 254
   1c000:	59 83       	std	Y+1, r21	; 0x01
   1c002:	48 83       	st	Y, r20
   1c004:	cc 50       	subi	r28, 0x0C	; 12
   1c006:	d1 40       	sbci	r29, 0x01	; 1

    //Initialize the user file lif_t structure
    ULIF = lif_create_volume(username, "HFSLIF",1,1,sectors);
   1c008:	da 01       	movw	r26, r20
   1c00a:	ad 90       	ld	r10, X+
   1c00c:	bc 90       	ld	r11, X
   1c00e:	0b 2c       	mov	r0, r11
   1c010:	00 0c       	add	r0, r0
   1c012:	cc 08       	sbc	r12, r12
   1c014:	dd 08       	sbc	r13, r13
   1c016:	e1 2c       	mov	r14, r1
   1c018:	f1 2c       	mov	r15, r1
   1c01a:	87 01       	movw	r16, r14
   1c01c:	e3 94       	inc	r14
   1c01e:	21 e0       	ldi	r18, 0x01	; 1
   1c020:	30 e0       	ldi	r19, 0x00	; 0
   1c022:	40 e0       	ldi	r20, 0x00	; 0
   1c024:	50 e0       	ldi	r21, 0x00	; 0
   1c026:	61 e0       	ldi	r22, 0x01	; 1
   1c028:	76 e1       	ldi	r23, 0x16	; 22
   1c02a:	c3 01       	movw	r24, r6
   1c02c:	0e 94 7a d2 	call	0x1a4f4	; 0x1a4f4 <lif_create_volume>
   1c030:	5c 01       	movw	r10, r24
    if(ULIF == NULL)
   1c032:	89 2b       	or	r24, r25
   1c034:	11 f4       	brne	.+4      	; 0x1c03a <lif_extract_lif_as_lif+0xae>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c036:	c4 01       	movw	r24, r8
   1c038:	cf c0       	rjmp	.+414    	; 0x1c1d8 <lif_extract_lif_as_lif+0x24c>
    }

    // Only the start sector changes

    // Copy directory record
    ULIF->DIR = LIF->DIR;
   1c03a:	81 e2       	ldi	r24, 0x21	; 33
   1c03c:	f4 01       	movw	r30, r8
   1c03e:	e1 5b       	subi	r30, 0xB1	; 177
   1c040:	ff 4f       	sbci	r31, 0xFF	; 255
   1c042:	d5 01       	movw	r26, r10
   1c044:	a1 5b       	subi	r26, 0xB1	; 177
   1c046:	bf 4f       	sbci	r27, 0xFF	; 255
   1c048:	01 90       	ld	r0, Z+
   1c04a:	0d 92       	st	X+, r0
   1c04c:	8a 95       	dec	r24
   1c04e:	e1 f7       	brne	.-8      	; 0x1c048 <lif_extract_lif_as_lif+0xbc>

    ULIF->DIR.FileStartSector = 2;
   1c050:	82 e0       	ldi	r24, 0x02	; 2
   1c052:	90 e0       	ldi	r25, 0x00	; 0
   1c054:	a0 e0       	ldi	r26, 0x00	; 0
   1c056:	b0 e0       	ldi	r27, 0x00	; 0
   1c058:	f5 01       	movw	r30, r10
   1c05a:	e4 5a       	subi	r30, 0xA4	; 164
   1c05c:	ff 4f       	sbci	r31, 0xFF	; 255
   1c05e:	80 83       	st	Z, r24
   1c060:	91 83       	std	Z+1, r25	; 0x01
   1c062:	a2 83       	std	Z+2, r26	; 0x02
   1c064:	b3 83       	std	Z+3, r27	; 0x03
    ULIF->filesectors = LIF->DIR.FileSectors;
   1c066:	c4 5f       	subi	r28, 0xF4	; 244
   1c068:	de 4f       	sbci	r29, 0xFE	; 254
   1c06a:	e8 81       	ld	r30, Y
   1c06c:	f9 81       	ldd	r31, Y+1	; 0x01
   1c06e:	cc 50       	subi	r28, 0x0C	; 12
   1c070:	d1 40       	sbci	r29, 0x01	; 1
   1c072:	80 81       	ld	r24, Z
   1c074:	91 81       	ldd	r25, Z+1	; 0x01
   1c076:	a2 81       	ldd	r26, Z+2	; 0x02
   1c078:	b3 81       	ldd	r27, Z+3	; 0x03
   1c07a:	f5 01       	movw	r30, r10
   1c07c:	80 8b       	std	Z+16, r24	; 0x10
   1c07e:	91 8b       	std	Z+17, r25	; 0x11
   1c080:	a2 8b       	std	Z+18, r26	; 0x12
   1c082:	b3 8b       	std	Z+19, r27	; 0x13

    if( !lif_writedirindex(ULIF,0))
   1c084:	60 e0       	ldi	r22, 0x00	; 0
   1c086:	70 e0       	ldi	r23, 0x00	; 0
   1c088:	c5 01       	movw	r24, r10
   1c08a:	0e 94 fe d0 	call	0x1a1fc	; 0x1a1fc <lif_writedirindex>
   1c08e:	8c 01       	movw	r16, r24
   1c090:	89 2b       	or	r24, r25
   1c092:	41 f0       	breq	.+16     	; 0x1c0a4 <lif_extract_lif_as_lif+0x118>
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
    }
    if( !lif_writedirEOF(ULIF,1) )
   1c094:	61 e0       	ldi	r22, 0x01	; 1
   1c096:	70 e0       	ldi	r23, 0x00	; 0
   1c098:	c5 01       	movw	r24, r10
   1c09a:	0e 94 5a d1 	call	0x1a2b4	; 0x1a2b4 <lif_writedirEOF>
   1c09e:	8c 01       	movw	r16, r24
   1c0a0:	89 2b       	or	r24, r25
   1c0a2:	39 f4       	brne	.+14     	; 0x1c0b2 <lif_extract_lif_as_lif+0x126>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c0a4:	c4 01       	movw	r24, r8
   1c0a6:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>
   1c0aa:	c5 01       	movw	r24, r10
   1c0ac:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>
    }
    if( !lif_writedirEOF(ULIF,1) )
    {
        lif_closedir(LIF);
        lif_closedir(ULIF);
        return(0);
   1c0b0:	ae c0       	rjmp	.+348    	; 0x1c20e <lif_extract_lif_as_lif+0x282>
    }

    uoffset =  ULIF->filestart * (long) LIF_SECTOR_SIZE;
   1c0b2:	d5 01       	movw	r26, r10
   1c0b4:	1c 96       	adiw	r26, 0x0c	; 12
   1c0b6:	cd 90       	ld	r12, X+
   1c0b8:	dd 90       	ld	r13, X+
   1c0ba:	ed 90       	ld	r14, X+
   1c0bc:	fc 90       	ld	r15, X
   1c0be:	1f 97       	sbiw	r26, 0x0f	; 15
   1c0c0:	fe 2c       	mov	r15, r14
   1c0c2:	ed 2c       	mov	r14, r13
   1c0c4:	dc 2c       	mov	r13, r12
   1c0c6:	cc 24       	eor	r12, r12

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1c0c8:	f4 01       	movw	r30, r8
   1c0ca:	e4 5a       	subi	r30, 0xA4	; 164
   1c0cc:	ff 4f       	sbci	r31, 0xFF	; 255
   1c0ce:	80 81       	ld	r24, Z
   1c0d0:	91 81       	ldd	r25, Z+1	; 0x01
   1c0d2:	a2 81       	ldd	r26, Z+2	; 0x02
   1c0d4:	b3 81       	ldd	r27, Z+3	; 0x03
   1c0d6:	22 27       	eor	r18, r18
   1c0d8:	38 2f       	mov	r19, r24
   1c0da:	49 2f       	mov	r20, r25
   1c0dc:	5a 2f       	mov	r21, r26
   1c0de:	cb 5f       	subi	r28, 0xFB	; 251
   1c0e0:	de 4f       	sbci	r29, 0xFE	; 254
   1c0e2:	28 83       	st	Y, r18
   1c0e4:	39 83       	std	Y+1, r19	; 0x01
   1c0e6:	4a 83       	std	Y+2, r20	; 0x02
   1c0e8:	5b 83       	std	Y+3, r21	; 0x03
   1c0ea:	c5 50       	subi	r28, 0x05	; 5
   1c0ec:	d1 40       	sbci	r29, 0x01	; 1

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c0ee:	21 2c       	mov	r2, r1
   1c0f0:	31 2c       	mov	r3, r1
            return(0);
        }
        bytes += size;
        offset += size;
        uoffset += size;
        printf("Wrote: %8ld\r", bytes);
   1c0f2:	84 e5       	ldi	r24, 0x54	; 84
   1c0f4:	95 e3       	ldi	r25, 0x35	; 53
   1c0f6:	9c 01       	movw	r18, r24
   1c0f8:	40 e0       	ldi	r20, 0x00	; 0
   1c0fa:	c7 5f       	subi	r28, 0xF7	; 247
   1c0fc:	de 4f       	sbci	r29, 0xFE	; 254
   1c0fe:	28 83       	st	Y, r18
   1c100:	39 83       	std	Y+1, r19	; 0x01
   1c102:	4a 83       	std	Y+2, r20	; 0x02
   1c104:	c9 50       	subi	r28, 0x09	; 9
   1c106:	d1 40       	sbci	r29, 0x01	; 1

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c108:	41 c0       	rjmp	.+130    	; 0x1c18c <lif_extract_lif_as_lif+0x200>
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }

        lif_write(ULIF,buf,uoffset,LIF_SECTOR_SIZE);
   1c10a:	00 e0       	ldi	r16, 0x00	; 0
   1c10c:	11 e0       	ldi	r17, 0x01	; 1
   1c10e:	a7 01       	movw	r20, r14
   1c110:	96 01       	movw	r18, r12
   1c112:	be 01       	movw	r22, r28
   1c114:	6f 5f       	subi	r22, 0xFF	; 255
   1c116:	7f 4f       	sbci	r23, 0xFF	; 255
   1c118:	c5 01       	movw	r24, r10
   1c11a:	0e 94 d5 c7 	call	0x18faa	; 0x18faa <lif_write>
        {
            lif_closedir(LIF);
            lif_closedir(ULIF);
            return(0);
        }
        bytes += size;
   1c11e:	05 2c       	mov	r0, r5
   1c120:	00 0c       	add	r0, r0
   1c122:	66 08       	sbc	r6, r6
   1c124:	77 08       	sbc	r7, r7
   1c126:	c4 0c       	add	r12, r4
   1c128:	d5 1c       	adc	r13, r5
   1c12a:	e6 1c       	adc	r14, r6
   1c12c:	f7 1c       	adc	r15, r7
        offset += size;
   1c12e:	cb 5f       	subi	r28, 0xFB	; 251
   1c130:	de 4f       	sbci	r29, 0xFE	; 254
   1c132:	88 81       	ld	r24, Y
   1c134:	99 81       	ldd	r25, Y+1	; 0x01
   1c136:	aa 81       	ldd	r26, Y+2	; 0x02
   1c138:	bb 81       	ldd	r27, Y+3	; 0x03
   1c13a:	c5 50       	subi	r28, 0x05	; 5
   1c13c:	d1 40       	sbci	r29, 0x01	; 1
   1c13e:	84 0d       	add	r24, r4
   1c140:	95 1d       	adc	r25, r5
   1c142:	a6 1d       	adc	r26, r6
   1c144:	b7 1d       	adc	r27, r7
   1c146:	cb 5f       	subi	r28, 0xFB	; 251
   1c148:	de 4f       	sbci	r29, 0xFE	; 254
   1c14a:	88 83       	st	Y, r24
   1c14c:	99 83       	std	Y+1, r25	; 0x01
   1c14e:	aa 83       	std	Y+2, r26	; 0x02
   1c150:	bb 83       	std	Y+3, r27	; 0x03
   1c152:	c5 50       	subi	r28, 0x05	; 5
   1c154:	d1 40       	sbci	r29, 0x01	; 1
        uoffset += size;
        printf("Wrote: %8ld\r", bytes);
   1c156:	ff 92       	push	r15
   1c158:	ef 92       	push	r14
   1c15a:	df 92       	push	r13
   1c15c:	cf 92       	push	r12
   1c15e:	1f 92       	push	r1
   1c160:	c6 5f       	subi	r28, 0xF6	; 246
   1c162:	de 4f       	sbci	r29, 0xFE	; 254
   1c164:	98 81       	ld	r25, Y
   1c166:	ca 50       	subi	r28, 0x0A	; 10
   1c168:	d1 40       	sbci	r29, 0x01	; 1
   1c16a:	9f 93       	push	r25
   1c16c:	c7 5f       	subi	r28, 0xF7	; 247
   1c16e:	de 4f       	sbci	r29, 0xFE	; 254
   1c170:	a8 81       	ld	r26, Y
   1c172:	c9 50       	subi	r28, 0x09	; 9
   1c174:	d1 40       	sbci	r29, 0x01	; 1
   1c176:	af 93       	push	r26
   1c178:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>

    offset = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;

    bytes = uoffset;

    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c17c:	bf ef       	ldi	r27, 0xFF	; 255
   1c17e:	2b 1a       	sub	r2, r27
   1c180:	3b 0a       	sbc	r3, r27
   1c182:	0f b6       	in	r0, 0x3f	; 63
   1c184:	f8 94       	cli
   1c186:	de bf       	out	0x3e, r29	; 62
   1c188:	0f be       	out	0x3f, r0	; 63
   1c18a:	cd bf       	out	0x3d, r28	; 61
   1c18c:	c4 5f       	subi	r28, 0xF4	; 244
   1c18e:	de 4f       	sbci	r29, 0xFE	; 254
   1c190:	a8 81       	ld	r26, Y
   1c192:	b9 81       	ldd	r27, Y+1	; 0x01
   1c194:	cc 50       	subi	r28, 0x0C	; 12
   1c196:	d1 40       	sbci	r29, 0x01	; 1
   1c198:	8d 91       	ld	r24, X+
   1c19a:	9c 91       	ld	r25, X
   1c19c:	28 16       	cp	r2, r24
   1c19e:	39 06       	cpc	r3, r25
   1c1a0:	f4 f4       	brge	.+60     	; 0x1c1de <lif_extract_lif_as_lif+0x252>
    {
        size = lif_read(LIF, buf, offset,LIF_SECTOR_SIZE);
   1c1a2:	00 e0       	ldi	r16, 0x00	; 0
   1c1a4:	11 e0       	ldi	r17, 0x01	; 1
   1c1a6:	cb 5f       	subi	r28, 0xFB	; 251
   1c1a8:	de 4f       	sbci	r29, 0xFE	; 254
   1c1aa:	28 81       	ld	r18, Y
   1c1ac:	39 81       	ldd	r19, Y+1	; 0x01
   1c1ae:	4a 81       	ldd	r20, Y+2	; 0x02
   1c1b0:	5b 81       	ldd	r21, Y+3	; 0x03
   1c1b2:	c5 50       	subi	r28, 0x05	; 5
   1c1b4:	d1 40       	sbci	r29, 0x01	; 1
   1c1b6:	be 01       	movw	r22, r28
   1c1b8:	6f 5f       	subi	r22, 0xFF	; 255
   1c1ba:	7f 4f       	sbci	r23, 0xFF	; 255
   1c1bc:	c4 01       	movw	r24, r8
   1c1be:	0e 94 7c c7 	call	0x18ef8	; 0x18ef8 <lif_read>
   1c1c2:	2b 01       	movw	r4, r22
   1c1c4:	3c 01       	movw	r6, r24
        if(size < LIF_SECTOR_SIZE)
   1c1c6:	6f 3f       	cpi	r22, 0xFF	; 255
   1c1c8:	71 05       	cpc	r23, r1
   1c1ca:	11 f0       	breq	.+4      	; 0x1c1d0 <lif_extract_lif_as_lif+0x244>
   1c1cc:	0c f0       	brlt	.+2      	; 0x1c1d0 <lif_extract_lif_as_lif+0x244>
   1c1ce:	9d cf       	rjmp	.-198    	; 0x1c10a <lif_extract_lif_as_lif+0x17e>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c1d0:	c4 01       	movw	r24, r8
   1c1d2:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>
   1c1d6:	c5 01       	movw	r24, r10
   1c1d8:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>
   1c1dc:	09 cf       	rjmp	.-494    	; 0x1bff0 <lif_extract_lif_as_lif+0x64>
   1c1de:	c4 01       	movw	r24, r8
   1c1e0:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>
   1c1e4:	c5 01       	movw	r24, r10
   1c1e6:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>
        uoffset += size;
        printf("Wrote: %8ld\r", bytes);
    }
    lif_closedir(LIF);
    lif_closedir(ULIF);
    printf("Wrote: %8ld\n", bytes);
   1c1ea:	ff 92       	push	r15
   1c1ec:	ef 92       	push	r14
   1c1ee:	df 92       	push	r13
   1c1f0:	cf 92       	push	r12
   1c1f2:	87 e4       	ldi	r24, 0x47	; 71
   1c1f4:	95 e3       	ldi	r25, 0x35	; 53
   1c1f6:	1f 92       	push	r1
   1c1f8:	9f 93       	push	r25
   1c1fa:	8f 93       	push	r24
   1c1fc:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    return(1);
   1c200:	0f b6       	in	r0, 0x3f	; 63
   1c202:	f8 94       	cli
   1c204:	de bf       	out	0x3e, r29	; 62
   1c206:	0f be       	out	0x3f, r0	; 63
   1c208:	cd bf       	out	0x3d, r28	; 61
   1c20a:	01 e0       	ldi	r16, 0x01	; 1
   1c20c:	10 e0       	ldi	r17, 0x00	; 0
}
   1c20e:	c8 01       	movw	r24, r16
   1c210:	c3 5f       	subi	r28, 0xF3	; 243
   1c212:	de 4f       	sbci	r29, 0xFE	; 254
   1c214:	e2 e1       	ldi	r30, 0x12	; 18
   1c216:	d1 c7       	rjmp	.+4002   	; 0x1d1ba <__epilogue_restores__>

0001c218 <lif_add_lif_file>:
/// @param[in] lifname: LIF file name to copy file to
/// @param[in] userfile: LIF mage name copy file from 
/// @return size of data written into to LIF image, or -1 on error
MEMSPACE
long lif_add_lif_file(char *lifimagename, char *lifname, char *userfile)
{
   1c218:	2f 92       	push	r2
   1c21a:	3f 92       	push	r3
   1c21c:	4f 92       	push	r4
   1c21e:	5f 92       	push	r5
   1c220:	6f 92       	push	r6
   1c222:	8f 92       	push	r8
   1c224:	9f 92       	push	r9
   1c226:	af 92       	push	r10
   1c228:	bf 92       	push	r11
   1c22a:	cf 92       	push	r12
   1c22c:	df 92       	push	r13
   1c22e:	ef 92       	push	r14
   1c230:	ff 92       	push	r15
   1c232:	0f 93       	push	r16
   1c234:	1f 93       	push	r17
   1c236:	cf 93       	push	r28
   1c238:	df 93       	push	r29
   1c23a:	cd b7       	in	r28, 0x3d	; 61
   1c23c:	de b7       	in	r29, 0x3e	; 62
   1c23e:	c4 51       	subi	r28, 0x14	; 20
   1c240:	d1 40       	sbci	r29, 0x01	; 1
   1c242:	0f b6       	in	r0, 0x3f	; 63
   1c244:	f8 94       	cli
   1c246:	de bf       	out	0x3e, r29	; 62
   1c248:	0f be       	out	0x3f, r0	; 63
   1c24a:	cd bf       	out	0x3d, r28	; 61
   1c24c:	7c 01       	movw	r14, r24
   1c24e:	5b 01       	movw	r10, r22
   1c250:	6a 01       	movw	r12, r20
    long offset, uoffset, start, bytes;
    int i, size;

    uint8_t buf[LIF_SECTOR_SIZE+4];

    if(!*lifimagename)
   1c252:	dc 01       	movw	r26, r24
   1c254:	8c 91       	ld	r24, X
   1c256:	81 11       	cpse	r24, r1
   1c258:	03 c0       	rjmp	.+6      	; 0x1c260 <lif_add_lif_file+0x48>
    {
        printf("lif_add: lifimagename is empty\n");
   1c25a:	87 e2       	ldi	r24, 0x27	; 39
   1c25c:	95 e3       	ldi	r25, 0x35	; 53
   1c25e:	06 c0       	rjmp	.+12     	; 0x1c26c <lif_add_lif_file+0x54>
        return(-1);
    }
    if(!*lifname)
   1c260:	fb 01       	movw	r30, r22
   1c262:	80 81       	ld	r24, Z
   1c264:	81 11       	cpse	r24, r1
   1c266:	0b c0       	rjmp	.+22     	; 0x1c27e <lif_add_lif_file+0x66>
    {
        printf("lif_add: lifname is empty\n");
   1c268:	8c e0       	ldi	r24, 0x0C	; 12
   1c26a:	95 e3       	ldi	r25, 0x35	; 53
   1c26c:	1f 92       	push	r1
   1c26e:	9f 93       	push	r25
   1c270:	8f 93       	push	r24
   1c272:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        return(-1);
   1c276:	0f 90       	pop	r0
   1c278:	0f 90       	pop	r0
   1c27a:	0f 90       	pop	r0
   1c27c:	32 c1       	rjmp	.+612    	; 0x1c4e2 <lif_add_lif_file+0x2ca>
    }
    if(!*userfile)
   1c27e:	da 01       	movw	r26, r20
   1c280:	8c 91       	ld	r24, X
   1c282:	81 11       	cpse	r24, r1
   1c284:	03 c0       	rjmp	.+6      	; 0x1c28c <lif_add_lif_file+0x74>
    {
        printf("lif_add: userfile is empty\n");
   1c286:	80 ef       	ldi	r24, 0xF0	; 240
   1c288:	94 e3       	ldi	r25, 0x34	; 52
   1c28a:	f0 cf       	rjmp	.-32     	; 0x1c26c <lif_add_lif_file+0x54>
        return(-1);
    }

    if(debuglevel & 0x400)
   1c28c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1c290:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1c294:	92 ff       	sbrs	r25, 2
   1c296:	12 c0       	rjmp	.+36     	; 0x1c2bc <lif_add_lif_file+0xa4>
        printf("LIF image:[%s], LIF name:[%s], user file:[%s]\n", 
   1c298:	df 92       	push	r13
   1c29a:	4f 93       	push	r20
   1c29c:	bf 92       	push	r11
   1c29e:	6f 93       	push	r22
   1c2a0:	ff 92       	push	r15
   1c2a2:	ef 92       	push	r14
   1c2a4:	81 ec       	ldi	r24, 0xC1	; 193
   1c2a6:	94 e3       	ldi	r25, 0x34	; 52
   1c2a8:	1f 92       	push	r1
   1c2aa:	9f 93       	push	r25
   1c2ac:	8f 93       	push	r24
   1c2ae:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1c2b2:	0f b6       	in	r0, 0x3f	; 63
   1c2b4:	f8 94       	cli
   1c2b6:	de bf       	out	0x3e, r29	; 62
   1c2b8:	0f be       	out	0x3f, r0	; 63
   1c2ba:	cd bf       	out	0x3d, r28	; 61
            lifimagename, lifname, userfile);

    // open  userfile as LIF image
    ULIF = lif_open_volume(userfile,"rb+");
   1c2bc:	65 e6       	ldi	r22, 0x65	; 101
   1c2be:	78 e0       	ldi	r23, 0x08	; 8
   1c2c0:	c6 01       	movw	r24, r12
   1c2c2:	0e 94 b8 d6 	call	0x1ad70	; 0x1ad70 <lif_open_volume>
   1c2c6:	4c 01       	movw	r8, r24
    if(ULIF == NULL)
   1c2c8:	00 97       	sbiw	r24, 0x00	; 0
   1c2ca:	09 f4       	brne	.+2      	; 0x1c2ce <lif_add_lif_file+0xb6>
   1c2cc:	0a c1       	rjmp	.+532    	; 0x1c4e2 <lif_add_lif_file+0x2ca>
        return(-1); 

    // find lif file in user image
    index = lif_find_file(ULIF, lifname);
   1c2ce:	b5 01       	movw	r22, r10
   1c2d0:	0e 94 1d d9 	call	0x1b23a	; 0x1b23a <lif_find_file>
    if(index == -1)
   1c2d4:	01 96       	adiw	r24, 0x01	; 1
   1c2d6:	b1 f4       	brne	.+44     	; 0x1c304 <lif_add_lif_file+0xec>
    {
        printf("File not found:%s\n", lifname);
   1c2d8:	bf 92       	push	r11
   1c2da:	af 92       	push	r10
   1c2dc:	8e ea       	ldi	r24, 0xAE	; 174
   1c2de:	94 e3       	ldi	r25, 0x34	; 52
   1c2e0:	1f 92       	push	r1
   1c2e2:	9f 93       	push	r25
   1c2e4:	8f 93       	push	r24
   1c2e6:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c2ea:	c4 01       	movw	r24, r8
   1c2ec:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>
    index = lif_find_file(ULIF, lifname);
    if(index == -1)
    {
        printf("File not found:%s\n", lifname);
        lif_closedir(ULIF);
        return(0);
   1c2f0:	0f 90       	pop	r0
   1c2f2:	0f 90       	pop	r0
   1c2f4:	0f 90       	pop	r0
   1c2f6:	0f 90       	pop	r0
   1c2f8:	0f 90       	pop	r0
   1c2fa:	60 e0       	ldi	r22, 0x00	; 0
   1c2fc:	70 e0       	ldi	r23, 0x00	; 0
   1c2fe:	80 e0       	ldi	r24, 0x00	; 0
   1c300:	90 e0       	ldi	r25, 0x00	; 0
   1c302:	09 c1       	rjmp	.+530    	; 0x1c516 <lif_add_lif_file+0x2fe>
    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1c304:	65 e6       	ldi	r22, 0x65	; 101
   1c306:	78 e0       	ldi	r23, 0x08	; 8
   1c308:	c7 01       	movw	r24, r14
   1c30a:	0e 94 b8 d6 	call	0x1ad70	; 0x1ad70 <lif_open_volume>
   1c30e:	5c 01       	movw	r10, r24
    if(LIF == NULL)
   1c310:	00 97       	sbiw	r24, 0x00	; 0
   1c312:	09 f4       	brne	.+2      	; 0x1c316 <lif_add_lif_file+0xfe>
   1c314:	e6 c0       	rjmp	.+460    	; 0x1c4e2 <lif_add_lif_file+0x2ca>
        return(-1); 

    // Now find a new free record that is big enough
    index = lif_newdir(LIF, ULIF->DIR.FileSectors);
   1c316:	f4 01       	movw	r30, r8
   1c318:	e0 5a       	subi	r30, 0xA0	; 160
   1c31a:	ff 4f       	sbci	r31, 0xFF	; 255
   1c31c:	40 81       	ld	r20, Z
   1c31e:	51 81       	ldd	r21, Z+1	; 0x01
   1c320:	62 81       	ldd	r22, Z+2	; 0x02
   1c322:	73 81       	ldd	r23, Z+3	; 0x03
   1c324:	0e 94 53 d5 	call	0x1aaa6	; 0x1aaa6 <lif_newdir>
   1c328:	c3 5f       	subi	r28, 0xF3	; 243
   1c32a:	de 4f       	sbci	r29, 0xFE	; 254
   1c32c:	99 83       	std	Y+1, r25	; 0x01
   1c32e:	88 83       	st	Y, r24
   1c330:	cd 50       	subi	r28, 0x0D	; 13
   1c332:	d1 40       	sbci	r29, 0x01	; 1
    if(index == -1)
   1c334:	01 96       	adiw	r24, 0x01	; 1
   1c336:	b9 f4       	brne	.+46     	; 0x1c366 <lif_add_lif_file+0x14e>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
   1c338:	df 92       	push	r13
   1c33a:	cf 92       	push	r12
   1c33c:	ff 92       	push	r15
   1c33e:	ef 92       	push	r14
   1c340:	8e e7       	ldi	r24, 0x7E	; 126
   1c342:	94 e3       	ldi	r25, 0x34	; 52
   1c344:	1f 92       	push	r1
   1c346:	9f 93       	push	r25
   1c348:	8f 93       	push	r24
   1c34a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c34e:	c5 01       	movw	r24, r10
   1c350:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>
   1c354:	c4 01       	movw	r24, r8
   1c356:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>
    {
        printf("LIF image:[%s], not enough free space for:[%s]\n", 
            lifimagename, userfile);
            lif_closedir(LIF);
            lif_closedir(ULIF);
        return(-1);
   1c35a:	0f b6       	in	r0, 0x3f	; 63
   1c35c:	f8 94       	cli
   1c35e:	de bf       	out	0x3e, r29	; 62
   1c360:	0f be       	out	0x3f, r0	; 63
   1c362:	cd bf       	out	0x3d, r28	; 61
   1c364:	be c0       	rjmp	.+380    	; 0x1c4e2 <lif_add_lif_file+0x2ca>
    }

    // Save start sector
    start = LIF->DIR.FileStartSector;
   1c366:	c5 01       	movw	r24, r10
   1c368:	84 5a       	subi	r24, 0xA4	; 164
   1c36a:	9f 4f       	sbci	r25, 0xFF	; 255
   1c36c:	dc 01       	movw	r26, r24
   1c36e:	4d 91       	ld	r20, X+
   1c370:	5d 91       	ld	r21, X+
   1c372:	6d 91       	ld	r22, X+
   1c374:	7c 91       	ld	r23, X
   1c376:	13 97       	sbiw	r26, 0x03	; 3

    // Copy user image directory record to master image directory record
    LIF->DIR = ULIF->DIR;
   1c378:	21 e2       	ldi	r18, 0x21	; 33
   1c37a:	f4 01       	movw	r30, r8
   1c37c:	e1 5b       	subi	r30, 0xB1	; 177
   1c37e:	ff 4f       	sbci	r31, 0xFF	; 255
   1c380:	1d 97       	sbiw	r26, 0x0d	; 13
   1c382:	01 90       	ld	r0, Z+
   1c384:	0d 92       	st	X+, r0
   1c386:	2a 95       	dec	r18
   1c388:	e1 f7       	brne	.-8      	; 0x1c382 <lif_add_lif_file+0x16a>

    // Restore FileStartSector
    LIF->DIR.FileStartSector = start;
   1c38a:	fc 01       	movw	r30, r24
   1c38c:	40 83       	st	Z, r20
   1c38e:	51 83       	std	Z+1, r21	; 0x01
   1c390:	62 83       	std	Z+2, r22	; 0x02
   1c392:	73 83       	std	Z+3, r23	; 0x03

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1c394:	b6 2f       	mov	r27, r22
   1c396:	a5 2f       	mov	r26, r21
   1c398:	94 2f       	mov	r25, r20
   1c39a:	88 27       	eor	r24, r24
   1c39c:	cb 5f       	subi	r28, 0xFB	; 251
   1c39e:	de 4f       	sbci	r29, 0xFE	; 254
   1c3a0:	88 83       	st	Y, r24
   1c3a2:	99 83       	std	Y+1, r25	; 0x01
   1c3a4:	aa 83       	std	Y+2, r26	; 0x02
   1c3a6:	bb 83       	std	Y+3, r27	; 0x03
   1c3a8:	c5 50       	subi	r28, 0x05	; 5
   1c3aa:	d1 40       	sbci	r29, 0x01	; 1
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
   1c3ac:	f4 01       	movw	r30, r8
   1c3ae:	e4 5a       	subi	r30, 0xA4	; 164
   1c3b0:	ff 4f       	sbci	r31, 0xFF	; 255
   1c3b2:	80 81       	ld	r24, Z
   1c3b4:	91 81       	ldd	r25, Z+1	; 0x01
   1c3b6:	a2 81       	ldd	r26, Z+2	; 0x02
   1c3b8:	b3 81       	ldd	r27, Z+3	; 0x03
   1c3ba:	22 27       	eor	r18, r18
   1c3bc:	38 2f       	mov	r19, r24
   1c3be:	49 2f       	mov	r20, r25
   1c3c0:	5a 2f       	mov	r21, r26
   1c3c2:	c7 5f       	subi	r28, 0xF7	; 247
   1c3c4:	de 4f       	sbci	r29, 0xFE	; 254
   1c3c6:	28 83       	st	Y, r18
   1c3c8:	39 83       	std	Y+1, r19	; 0x01
   1c3ca:	4a 83       	std	Y+2, r20	; 0x02
   1c3cc:	5b 83       	std	Y+3, r21	; 0x03
   1c3ce:	c9 50       	subi	r28, 0x09	; 9
   1c3d0:	d1 40       	sbci	r29, 0x01	; 1
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c3d2:	21 2c       	mov	r2, r1
   1c3d4:	31 2c       	mov	r3, r1

    // Master lif image file start in bytes
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
   1c3d6:	c1 2c       	mov	r12, r1
   1c3d8:	d1 2c       	mov	r13, r1
   1c3da:	76 01       	movw	r14, r12
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c3dc:	a5 01       	movw	r20, r10
   1c3de:	40 5a       	subi	r20, 0xA0	; 160
   1c3e0:	5f 4f       	sbci	r21, 0xFF	; 255
   1c3e2:	cd 5e       	subi	r28, 0xED	; 237
   1c3e4:	de 4f       	sbci	r29, 0xFE	; 254
   1c3e6:	59 83       	std	Y+1, r21	; 0x01
   1c3e8:	48 83       	st	Y, r20
   1c3ea:	c3 51       	subi	r28, 0x13	; 19
   1c3ec:	d1 40       	sbci	r29, 0x01	; 1
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
        printf("Wrote: %8ld\r", bytes);
   1c3ee:	81 e7       	ldi	r24, 0x71	; 113
   1c3f0:	94 e3       	ldi	r25, 0x34	; 52
   1c3f2:	2c 01       	movw	r4, r24
   1c3f4:	c7 5f       	subi	r28, 0xF7	; 247
   1c3f6:	de 4f       	sbci	r29, 0xFE	; 254
   1c3f8:	28 81       	ld	r18, Y
   1c3fa:	39 81       	ldd	r19, Y+1	; 0x01
   1c3fc:	4a 81       	ldd	r20, Y+2	; 0x02
   1c3fe:	5b 81       	ldd	r21, Y+3	; 0x03
   1c400:	c9 50       	subi	r28, 0x09	; 9
   1c402:	d1 40       	sbci	r29, 0x01	; 1
   1c404:	2c 0d       	add	r18, r12
   1c406:	3d 1d       	adc	r19, r13
   1c408:	4e 1d       	adc	r20, r14
   1c40a:	5f 1d       	adc	r21, r15
   1c40c:	cb 5f       	subi	r28, 0xFB	; 251
   1c40e:	de 4f       	sbci	r29, 0xFE	; 254
   1c410:	88 81       	ld	r24, Y
   1c412:	99 81       	ldd	r25, Y+1	; 0x01
   1c414:	aa 81       	ldd	r26, Y+2	; 0x02
   1c416:	bb 81       	ldd	r27, Y+3	; 0x03
   1c418:	c5 50       	subi	r28, 0x05	; 5
   1c41a:	d1 40       	sbci	r29, 0x01	; 1
   1c41c:	8c 0d       	add	r24, r12
   1c41e:	9d 1d       	adc	r25, r13
   1c420:	ae 1d       	adc	r26, r14
   1c422:	bf 1d       	adc	r27, r15
   1c424:	c1 5f       	subi	r28, 0xF1	; 241
   1c426:	de 4f       	sbci	r29, 0xFE	; 254
   1c428:	88 83       	st	Y, r24
   1c42a:	99 83       	std	Y+1, r25	; 0x01
   1c42c:	aa 83       	std	Y+2, r26	; 0x02
   1c42e:	bb 83       	std	Y+3, r27	; 0x03
   1c430:	cf 50       	subi	r28, 0x0F	; 15
   1c432:	d1 40       	sbci	r29, 0x01	; 1
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c434:	cd 5e       	subi	r28, 0xED	; 237
   1c436:	de 4f       	sbci	r29, 0xFE	; 254
   1c438:	a8 81       	ld	r26, Y
   1c43a:	b9 81       	ldd	r27, Y+1	; 0x01
   1c43c:	c3 51       	subi	r28, 0x13	; 19
   1c43e:	d1 40       	sbci	r29, 0x01	; 1
   1c440:	8d 91       	ld	r24, X+
   1c442:	9c 91       	ld	r25, X
   1c444:	28 16       	cp	r2, r24
   1c446:	39 06       	cpc	r3, r25
   1c448:	dc f5       	brge	.+118    	; 0x1c4c0 <lif_add_lif_file+0x2a8>
    {
        // Read
        size = lif_read(ULIF, buf, uoffset, LIF_SECTOR_SIZE);
   1c44a:	00 e0       	ldi	r16, 0x00	; 0
   1c44c:	11 e0       	ldi	r17, 0x01	; 1
   1c44e:	be 01       	movw	r22, r28
   1c450:	6f 5f       	subi	r22, 0xFF	; 255
   1c452:	7f 4f       	sbci	r23, 0xFF	; 255
   1c454:	c4 01       	movw	r24, r8
   1c456:	0e 94 7c c7 	call	0x18ef8	; 0x18ef8 <lif_read>
        if(size < LIF_SECTOR_SIZE)
   1c45a:	6f 3f       	cpi	r22, 0xFF	; 255
   1c45c:	71 05       	cpc	r23, r1
   1c45e:	a9 f0       	breq	.+42     	; 0x1c48a <lif_add_lif_file+0x272>
   1c460:	a4 f0       	brlt	.+40     	; 0x1c48a <lif_add_lif_file+0x272>
            lif_closedir(ULIF);
            return(-1);
        }

        // Write
        size = lif_write(LIF, buf, offset, LIF_SECTOR_SIZE);
   1c462:	00 e0       	ldi	r16, 0x00	; 0
   1c464:	11 e0       	ldi	r17, 0x01	; 1
   1c466:	c1 5f       	subi	r28, 0xF1	; 241
   1c468:	de 4f       	sbci	r29, 0xFE	; 254
   1c46a:	28 81       	ld	r18, Y
   1c46c:	39 81       	ldd	r19, Y+1	; 0x01
   1c46e:	4a 81       	ldd	r20, Y+2	; 0x02
   1c470:	5b 81       	ldd	r21, Y+3	; 0x03
   1c472:	cf 50       	subi	r28, 0x0F	; 15
   1c474:	d1 40       	sbci	r29, 0x01	; 1
   1c476:	be 01       	movw	r22, r28
   1c478:	6f 5f       	subi	r22, 0xFF	; 255
   1c47a:	7f 4f       	sbci	r23, 0xFF	; 255
   1c47c:	c5 01       	movw	r24, r10
   1c47e:	0e 94 d5 c7 	call	0x18faa	; 0x18faa <lif_write>
        if(size < LIF_SECTOR_SIZE)
   1c482:	8f 3f       	cpi	r24, 0xFF	; 255
   1c484:	91 05       	cpc	r25, r1
   1c486:	09 f0       	breq	.+2      	; 0x1c48a <lif_add_lif_file+0x272>
   1c488:	2c f4       	brge	.+10     	; 0x1c494 <lif_add_lif_file+0x27c>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c48a:	c5 01       	movw	r24, r10
   1c48c:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>
   1c490:	c4 01       	movw	r24, r8
   1c492:	25 c0       	rjmp	.+74     	; 0x1c4de <lif_add_lif_file+0x2c6>
            lif_closedir(ULIF);
            return(-1);
        }
        offset += (long) LIF_SECTOR_SIZE;
        uoffset += (long) LIF_SECTOR_SIZE;
        bytes += (long) LIF_SECTOR_SIZE;
   1c494:	5f ef       	ldi	r21, 0xFF	; 255
   1c496:	d5 1a       	sub	r13, r21
   1c498:	e5 0a       	sbc	r14, r21
   1c49a:	f5 0a       	sbc	r15, r21
        printf("Wrote: %8ld\r", bytes);
   1c49c:	ff 92       	push	r15
   1c49e:	ef 92       	push	r14
   1c4a0:	df 92       	push	r13
   1c4a2:	cf 92       	push	r12
   1c4a4:	1f 92       	push	r1
   1c4a6:	5f 92       	push	r5
   1c4a8:	4f 92       	push	r4
   1c4aa:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    offset  = LIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    // User lif image file start in bytes
    uoffset = ULIF->DIR.FileStartSector * (long) LIF_SECTOR_SIZE;
    bytes = 0;
    // Copy file data
    for(i=0;i<(int)LIF->DIR.FileSectors;++i)
   1c4ae:	8f ef       	ldi	r24, 0xFF	; 255
   1c4b0:	28 1a       	sub	r2, r24
   1c4b2:	38 0a       	sbc	r3, r24
   1c4b4:	0f b6       	in	r0, 0x3f	; 63
   1c4b6:	f8 94       	cli
   1c4b8:	de bf       	out	0x3e, r29	; 62
   1c4ba:	0f be       	out	0x3f, r0	; 63
   1c4bc:	cd bf       	out	0x3d, r28	; 61
   1c4be:	9a cf       	rjmp	.-204    	; 0x1c3f4 <lif_add_lif_file+0x1dc>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c4c0:	c4 01       	movw	r24, r8
   1c4c2:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>
        printf("Wrote: %8ld\r", bytes);
    }
    lif_closedir(ULIF);

    // Write directory record
    if( !lif_writedirindex(LIF,index))
   1c4c6:	c3 5f       	subi	r28, 0xF3	; 243
   1c4c8:	de 4f       	sbci	r29, 0xFE	; 254
   1c4ca:	68 81       	ld	r22, Y
   1c4cc:	79 81       	ldd	r23, Y+1	; 0x01
   1c4ce:	cd 50       	subi	r28, 0x0D	; 13
   1c4d0:	d1 40       	sbci	r29, 0x01	; 1
   1c4d2:	c5 01       	movw	r24, r10
   1c4d4:	0e 94 fe d0 	call	0x1a1fc	; 0x1a1fc <lif_writedirindex>
   1c4d8:	89 2b       	or	r24, r25
   1c4da:	41 f4       	brne	.+16     	; 0x1c4ec <lif_add_lif_file+0x2d4>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c4dc:	c5 01       	movw	r24, r10
   1c4de:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>

    // Write directory record
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
   1c4e2:	6f ef       	ldi	r22, 0xFF	; 255
   1c4e4:	7f ef       	ldi	r23, 0xFF	; 255
   1c4e6:	8f ef       	ldi	r24, 0xFF	; 255
   1c4e8:	9f ef       	ldi	r25, 0xFF	; 255
   1c4ea:	15 c0       	rjmp	.+42     	; 0x1c516 <lif_add_lif_file+0x2fe>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c4ec:	c5 01       	movw	r24, r10
   1c4ee:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>
    {
        lif_closedir(LIF);
        return(-1);
    }
    lif_closedir(LIF);
    printf("Wrote: %8ld\n", bytes);
   1c4f2:	ff 92       	push	r15
   1c4f4:	ef 92       	push	r14
   1c4f6:	df 92       	push	r13
   1c4f8:	cf 92       	push	r12
   1c4fa:	84 e6       	ldi	r24, 0x64	; 100
   1c4fc:	94 e3       	ldi	r25, 0x34	; 52
   1c4fe:	1f 92       	push	r1
   1c500:	9f 93       	push	r25
   1c502:	8f 93       	push	r24
   1c504:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    return(bytes);
   1c508:	0f b6       	in	r0, 0x3f	; 63
   1c50a:	f8 94       	cli
   1c50c:	de bf       	out	0x3e, r29	; 62
   1c50e:	0f be       	out	0x3f, r0	; 63
   1c510:	cd bf       	out	0x3d, r28	; 61
   1c512:	b6 01       	movw	r22, r12
   1c514:	c7 01       	movw	r24, r14
}
   1c516:	cc 5e       	subi	r28, 0xEC	; 236
   1c518:	de 4f       	sbci	r29, 0xFE	; 254
   1c51a:	0f b6       	in	r0, 0x3f	; 63
   1c51c:	f8 94       	cli
   1c51e:	de bf       	out	0x3e, r29	; 62
   1c520:	0f be       	out	0x3f, r0	; 63
   1c522:	cd bf       	out	0x3d, r28	; 61
   1c524:	df 91       	pop	r29
   1c526:	cf 91       	pop	r28
   1c528:	1f 91       	pop	r17
   1c52a:	0f 91       	pop	r16
   1c52c:	ff 90       	pop	r15
   1c52e:	ef 90       	pop	r14
   1c530:	df 90       	pop	r13
   1c532:	cf 90       	pop	r12
   1c534:	bf 90       	pop	r11
   1c536:	af 90       	pop	r10
   1c538:	9f 90       	pop	r9
   1c53a:	8f 90       	pop	r8
   1c53c:	6f 90       	pop	r6
   1c53e:	5f 90       	pop	r5
   1c540:	4f 90       	pop	r4
   1c542:	3f 90       	pop	r3
   1c544:	2f 90       	pop	r2
   1c546:	08 95       	ret

0001c548 <lif_del_file>:
/// @param[in] lifimagename: LIF image name
/// @param[in] lifname: LIF file name
/// @return 1 if deleted, 0 if not found, -1 error
MEMSPACE
int lif_del_file(char *lifimagename, char *lifname)
{
   1c548:	ef 92       	push	r14
   1c54a:	ff 92       	push	r15
   1c54c:	0f 93       	push	r16
   1c54e:	1f 93       	push	r17
   1c550:	cf 93       	push	r28
   1c552:	df 93       	push	r29
   1c554:	7c 01       	movw	r14, r24
   1c556:	8b 01       	movw	r16, r22
    lif_t *LIF;
    int index;

    if(!*lifimagename)
   1c558:	fc 01       	movw	r30, r24
   1c55a:	80 81       	ld	r24, Z
   1c55c:	81 11       	cpse	r24, r1
   1c55e:	03 c0       	rjmp	.+6      	; 0x1c566 <lif_del_file+0x1e>
    {
        printf("lif_del_file: lifimagename is empty\n");
   1c560:	8f e3       	ldi	r24, 0x3F	; 63
   1c562:	94 e3       	ldi	r25, 0x34	; 52
   1c564:	06 c0       	rjmp	.+12     	; 0x1c572 <lif_del_file+0x2a>
        return(-1);
    }
    if(!*lifname)
   1c566:	fb 01       	movw	r30, r22
   1c568:	80 81       	ld	r24, Z
   1c56a:	81 11       	cpse	r24, r1
   1c56c:	0b c0       	rjmp	.+22     	; 0x1c584 <lif_del_file+0x3c>
    {
        printf("lif_del_file: lifname is empty\n");
   1c56e:	8f e1       	ldi	r24, 0x1F	; 31
   1c570:	94 e3       	ldi	r25, 0x34	; 52
   1c572:	1f 92       	push	r1
   1c574:	9f 93       	push	r25
   1c576:	8f 93       	push	r24
   1c578:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        return(-1);
   1c57c:	0f 90       	pop	r0
   1c57e:	0f 90       	pop	r0
   1c580:	0f 90       	pop	r0
   1c582:	74 c0       	rjmp	.+232    	; 0x1c66c <lif_del_file+0x124>
    }
    if(debuglevel & 0x400)
   1c584:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1c588:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1c58c:	92 ff       	sbrs	r25, 2
   1c58e:	13 c0       	rjmp	.+38     	; 0x1c5b6 <lif_del_file+0x6e>
        printf("LIF image:[%s], LIF name:[%s]\n", 
   1c590:	1f 93       	push	r17
   1c592:	6f 93       	push	r22
   1c594:	ff 92       	push	r15
   1c596:	ef 92       	push	r14
   1c598:	80 e0       	ldi	r24, 0x00	; 0
   1c59a:	94 e3       	ldi	r25, 0x34	; 52
   1c59c:	1f 92       	push	r1
   1c59e:	9f 93       	push	r25
   1c5a0:	8f 93       	push	r24
   1c5a2:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1c5a6:	8d b7       	in	r24, 0x3d	; 61
   1c5a8:	9e b7       	in	r25, 0x3e	; 62
   1c5aa:	07 96       	adiw	r24, 0x07	; 7
   1c5ac:	0f b6       	in	r0, 0x3f	; 63
   1c5ae:	f8 94       	cli
   1c5b0:	9e bf       	out	0x3e, r25	; 62
   1c5b2:	0f be       	out	0x3f, r0	; 63
   1c5b4:	8d bf       	out	0x3d, r24	; 61
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
   1c5b6:	65 e6       	ldi	r22, 0x65	; 101
   1c5b8:	78 e0       	ldi	r23, 0x08	; 8
   1c5ba:	c7 01       	movw	r24, r14
   1c5bc:	0e 94 b8 d6 	call	0x1ad70	; 0x1ad70 <lif_open_volume>
   1c5c0:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1c5c2:	00 97       	sbiw	r24, 0x00	; 0
   1c5c4:	09 f4       	brne	.+2      	; 0x1c5c8 <lif_del_file+0x80>
   1c5c6:	52 c0       	rjmp	.+164    	; 0x1c66c <lif_del_file+0x124>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, lifname);
   1c5c8:	b8 01       	movw	r22, r16
   1c5ca:	0e 94 1d d9 	call	0x1b23a	; 0x1b23a <lif_find_file>
    if(index == -1)
   1c5ce:	8f 3f       	cpi	r24, 0xFF	; 255
   1c5d0:	ef ef       	ldi	r30, 0xFF	; 255
   1c5d2:	9e 07       	cpc	r25, r30
   1c5d4:	c9 f4       	brne	.+50     	; 0x1c608 <lif_del_file+0xc0>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c5d6:	ce 01       	movw	r24, r28
   1c5d8:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>
    // Now find file record
    index = lif_find_file(LIF, lifname);
    if(index == -1)
    {
        lif_closedir(LIF);
        printf("LIF image:[%s] lif name:[%s] not found\n", lifimagename, lifname);
   1c5dc:	1f 93       	push	r17
   1c5de:	0f 93       	push	r16
   1c5e0:	ff 92       	push	r15
   1c5e2:	ef 92       	push	r14
   1c5e4:	88 ed       	ldi	r24, 0xD8	; 216
   1c5e6:	93 e3       	ldi	r25, 0x33	; 51
   1c5e8:	1f 92       	push	r1
   1c5ea:	9f 93       	push	r25
   1c5ec:	8f 93       	push	r24
   1c5ee:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        return(0);
   1c5f2:	8d b7       	in	r24, 0x3d	; 61
   1c5f4:	9e b7       	in	r25, 0x3e	; 62
   1c5f6:	07 96       	adiw	r24, 0x07	; 7
   1c5f8:	0f b6       	in	r0, 0x3f	; 63
   1c5fa:	f8 94       	cli
   1c5fc:	9e bf       	out	0x3e, r25	; 62
   1c5fe:	0f be       	out	0x3f, r0	; 63
   1c600:	8d bf       	out	0x3d, r24	; 61
   1c602:	80 e0       	ldi	r24, 0x00	; 0
   1c604:	90 e0       	ldi	r25, 0x00	; 0
   1c606:	34 c0       	rjmp	.+104    	; 0x1c670 <lif_del_file+0x128>
    }


// IF the next record is EOF then update EOF
    if(index >= LIF->EOFindex-1)
   1c608:	2a a1       	ldd	r18, Y+34	; 0x22
   1c60a:	3b a1       	ldd	r19, Y+35	; 0x23
   1c60c:	21 50       	subi	r18, 0x01	; 1
   1c60e:	31 09       	sbc	r19, r1
   1c610:	fe 01       	movw	r30, r28
   1c612:	e6 5a       	subi	r30, 0xA6	; 166
   1c614:	ff 4f       	sbci	r31, 0xFF	; 255
   1c616:	82 17       	cp	r24, r18
   1c618:	93 07       	cpc	r25, r19
   1c61a:	2c f0       	brlt	.+10     	; 0x1c626 <lif_del_file+0xde>
        LIF->DIR.FileType = 0xffff;
   1c61c:	2f ef       	ldi	r18, 0xFF	; 255
   1c61e:	3f ef       	ldi	r19, 0xFF	; 255
   1c620:	31 83       	std	Z+1, r19	; 0x01
   1c622:	20 83       	st	Z, r18
   1c624:	02 c0       	rjmp	.+4      	; 0x1c62a <lif_del_file+0xe2>
    else
        LIF->DIR.FileType = 0;
   1c626:	11 82       	std	Z+1, r1	; 0x01
   1c628:	10 82       	st	Z, r1

    // re-Write directory record
    if( !lif_writedirindex(LIF,index) )
   1c62a:	bc 01       	movw	r22, r24
   1c62c:	ce 01       	movw	r24, r28
   1c62e:	0e 94 fe d0 	call	0x1a1fc	; 0x1a1fc <lif_writedirindex>
   1c632:	89 2b       	or	r24, r25
   1c634:	21 f4       	brne	.+8      	; 0x1c63e <lif_del_file+0xf6>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c636:	ce 01       	movw	r24, r28
   1c638:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>
   1c63c:	17 c0       	rjmp	.+46     	; 0x1c66c <lif_del_file+0x124>
    {
        lif_closedir(LIF);
        return(-1);
    }

    lif_updatefree(LIF);
   1c63e:	ce 01       	movw	r24, r28
   1c640:	0e 94 72 d1 	call	0x1a2e4	; 0x1a2e4 <lif_updatefree>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c644:	ce 01       	movw	r24, r28
   1c646:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>
    }

    lif_updatefree(LIF);

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);
   1c64a:	1f 93       	push	r17
   1c64c:	0f 93       	push	r16
   1c64e:	89 ec       	ldi	r24, 0xC9	; 201
   1c650:	93 e3       	ldi	r25, 0x33	; 51
   1c652:	1f 92       	push	r1
   1c654:	9f 93       	push	r25
   1c656:	8f 93       	push	r24
   1c658:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>

    return(1);
   1c65c:	0f 90       	pop	r0
   1c65e:	0f 90       	pop	r0
   1c660:	0f 90       	pop	r0
   1c662:	0f 90       	pop	r0
   1c664:	0f 90       	pop	r0
   1c666:	81 e0       	ldi	r24, 0x01	; 1
   1c668:	90 e0       	ldi	r25, 0x00	; 0
   1c66a:	02 c0       	rjmp	.+4      	; 0x1c670 <lif_del_file+0x128>
            lifimagename, lifname);


    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1c66c:	8f ef       	ldi	r24, 0xFF	; 255
   1c66e:	9f ef       	ldi	r25, 0xFF	; 255

    lif_closedir(LIF);
    printf("Deleted: %10s\n", lifname);

    return(1);
}
   1c670:	cd b7       	in	r28, 0x3d	; 61
   1c672:	de b7       	in	r29, 0x3e	; 62
   1c674:	e6 e0       	ldi	r30, 0x06	; 6
   1c676:	ad c5       	rjmp	.+2906   	; 0x1d1d2 <__epilogue_restores__+0x18>

0001c678 <lif_rename_file>:
/// @param[in] oldlifname: old LIF file name
/// @param[in] newlifname: new LIF file name
/// @return 1 if renamed, 0 if not found, -1 error
MEMSPACE
int lif_rename_file(char *lifimagename, char *oldlifname, char *newlifname)
{
   1c678:	a0 e0       	ldi	r26, 0x00	; 0
   1c67a:	b0 e0       	ldi	r27, 0x00	; 0
   1c67c:	e1 e4       	ldi	r30, 0x41	; 65
   1c67e:	f3 ee       	ldi	r31, 0xE3	; 227
   1c680:	88 c5       	rjmp	.+2832   	; 0x1d192 <__prologue_saves__+0x10>
   1c682:	6c 01       	movw	r12, r24
   1c684:	8b 01       	movw	r16, r22
   1c686:	7a 01       	movw	r14, r20
    int index;
    lif_t *LIF;

    if(!*lifimagename)
   1c688:	fc 01       	movw	r30, r24
   1c68a:	80 81       	ld	r24, Z
   1c68c:	81 11       	cpse	r24, r1
   1c68e:	03 c0       	rjmp	.+6      	; 0x1c696 <lif_rename_file+0x1e>
    {
        printf("lif_rename_file: lifimagename is empty\n");
   1c690:	81 ea       	ldi	r24, 0xA1	; 161
   1c692:	93 e3       	ldi	r25, 0x33	; 51
   1c694:	06 c0       	rjmp	.+12     	; 0x1c6a2 <lif_rename_file+0x2a>
        return(-1);
    }
    if(!*oldlifname)
   1c696:	fb 01       	movw	r30, r22
   1c698:	80 81       	ld	r24, Z
   1c69a:	81 11       	cpse	r24, r1
   1c69c:	0b c0       	rjmp	.+22     	; 0x1c6b4 <lif_rename_file+0x3c>
    {
        printf("lif_rename_file: old lifname is empty\n");
   1c69e:	8a e7       	ldi	r24, 0x7A	; 122
   1c6a0:	93 e3       	ldi	r25, 0x33	; 51
   1c6a2:	1f 92       	push	r1
   1c6a4:	9f 93       	push	r25
   1c6a6:	8f 93       	push	r24
   1c6a8:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        return(-1);
   1c6ac:	0f 90       	pop	r0
   1c6ae:	0f 90       	pop	r0
   1c6b0:	0f 90       	pop	r0
   1c6b2:	62 c0       	rjmp	.+196    	; 0x1c778 <lif_rename_file+0x100>
    }
    if(!*newlifname)
   1c6b4:	fa 01       	movw	r30, r20
   1c6b6:	80 81       	ld	r24, Z
   1c6b8:	81 11       	cpse	r24, r1
   1c6ba:	03 c0       	rjmp	.+6      	; 0x1c6c2 <lif_rename_file+0x4a>
    {
        printf("lif_rename_file: new lifname is empty\n");
   1c6bc:	83 e5       	ldi	r24, 0x53	; 83
   1c6be:	93 e3       	ldi	r25, 0x33	; 51
   1c6c0:	f0 cf       	rjmp	.-32     	; 0x1c6a2 <lif_rename_file+0x2a>
        return(-1);
    }

    if(!lif_checkname(newlifname))
   1c6c2:	ca 01       	movw	r24, r20
   1c6c4:	0e 94 88 c8 	call	0x19110	; 0x19110 <lif_checkname>
   1c6c8:	89 2b       	or	r24, r25
   1c6ca:	19 f4       	brne	.+6      	; 0x1c6d2 <lif_rename_file+0x5a>
    {
        printf("lif_rename_file: new lifname contains bad characters\n");
   1c6cc:	8d e1       	ldi	r24, 0x1D	; 29
   1c6ce:	93 e3       	ldi	r25, 0x33	; 51
   1c6d0:	e8 cf       	rjmp	.-48     	; 0x1c6a2 <lif_rename_file+0x2a>
        return(-1);

    }

    LIF = lif_open_volume(lifimagename,"rb+");
   1c6d2:	65 e6       	ldi	r22, 0x65	; 101
   1c6d4:	78 e0       	ldi	r23, 0x08	; 8
   1c6d6:	c6 01       	movw	r24, r12
   1c6d8:	0e 94 b8 d6 	call	0x1ad70	; 0x1ad70 <lif_open_volume>
   1c6dc:	ec 01       	movw	r28, r24
    if(LIF == NULL)
   1c6de:	00 97       	sbiw	r24, 0x00	; 0
   1c6e0:	09 f4       	brne	.+2      	; 0x1c6e4 <lif_rename_file+0x6c>
   1c6e2:	4a c0       	rjmp	.+148    	; 0x1c778 <lif_rename_file+0x100>
        return(-1); 

    // Now find file record
    index = lif_find_file(LIF, oldlifname);
   1c6e4:	b8 01       	movw	r22, r16
   1c6e6:	0e 94 1d d9 	call	0x1b23a	; 0x1b23a <lif_find_file>
   1c6ea:	5c 01       	movw	r10, r24
    if(index == -1)
   1c6ec:	01 96       	adiw	r24, 0x01	; 1
   1c6ee:	c9 f4       	brne	.+50     	; 0x1c722 <lif_rename_file+0xaa>
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
   1c6f0:	1f 93       	push	r17
   1c6f2:	0f 93       	push	r16
   1c6f4:	df 92       	push	r13
   1c6f6:	cf 92       	push	r12
   1c6f8:	84 ef       	ldi	r24, 0xF4	; 244
   1c6fa:	92 e3       	ldi	r25, 0x32	; 50
   1c6fc:	1f 92       	push	r1
   1c6fe:	9f 93       	push	r25
   1c700:	8f 93       	push	r24
   1c702:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c706:	ce 01       	movw	r24, r28
   1c708:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>
    index = lif_find_file(LIF, oldlifname);
    if(index == -1)
    {
        printf("lif_rename:[%s] lif name:[%s] not found\n", lifimagename, oldlifname);
        lif_closedir(LIF);
        return(0);
   1c70c:	8d b7       	in	r24, 0x3d	; 61
   1c70e:	9e b7       	in	r25, 0x3e	; 62
   1c710:	07 96       	adiw	r24, 0x07	; 7
   1c712:	0f b6       	in	r0, 0x3f	; 63
   1c714:	f8 94       	cli
   1c716:	9e bf       	out	0x3e, r25	; 62
   1c718:	0f be       	out	0x3f, r0	; 63
   1c71a:	8d bf       	out	0x3d, r24	; 61
   1c71c:	80 e0       	ldi	r24, 0x00	; 0
   1c71e:	90 e0       	ldi	r25, 0x00	; 0
   1c720:	2d c0       	rjmp	.+90     	; 0x1c77c <lif_rename_file+0x104>
    }
    lif_fixname(LIF->DIR.filename, newlifname, 10);
   1c722:	4a e0       	ldi	r20, 0x0A	; 10
   1c724:	50 e0       	ldi	r21, 0x00	; 0
   1c726:	b7 01       	movw	r22, r14
   1c728:	ce 01       	movw	r24, r28
   1c72a:	81 5b       	subi	r24, 0xB1	; 177
   1c72c:	9f 4f       	sbci	r25, 0xFF	; 255
   1c72e:	0e 94 c2 c8 	call	0x19184	; 0x19184 <lif_fixname>

    // re-Write directory record
    if( !lif_writedirindex(LIF,index))
   1c732:	b5 01       	movw	r22, r10
   1c734:	ce 01       	movw	r24, r28
   1c736:	0e 94 fe d0 	call	0x1a1fc	; 0x1a1fc <lif_writedirindex>
   1c73a:	89 2b       	or	r24, r25
   1c73c:	21 f4       	brne	.+8      	; 0x1c746 <lif_rename_file+0xce>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c73e:	ce 01       	movw	r24, r28
   1c740:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>
   1c744:	19 c0       	rjmp	.+50     	; 0x1c778 <lif_rename_file+0x100>
    if( !lif_writedirindex(LIF,index))
    {
        lif_closedir(LIF);
        return(-1);
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);
   1c746:	ff 92       	push	r15
   1c748:	ef 92       	push	r14
   1c74a:	1f 93       	push	r17
   1c74c:	0f 93       	push	r16
   1c74e:	8d ed       	ldi	r24, 0xDD	; 221
   1c750:	92 e3       	ldi	r25, 0x32	; 50
   1c752:	1f 92       	push	r1
   1c754:	9f 93       	push	r25
   1c756:	8f 93       	push	r24
   1c758:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
/// @param[in] *LIF: pointer to LIF Volume/Directoy structure
/// @return 0 on sucesss, -1 on error
MEMSPACE
void lif_closedir(lif_t *LIF)
{
    return( lif_close_volume(LIF) );
   1c75c:	ce 01       	movw	r24, r28
   1c75e:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>
    }
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
   1c762:	ed b7       	in	r30, 0x3d	; 61
   1c764:	fe b7       	in	r31, 0x3e	; 62
   1c766:	37 96       	adiw	r30, 0x07	; 7
   1c768:	0f b6       	in	r0, 0x3f	; 63
   1c76a:	f8 94       	cli
   1c76c:	fe bf       	out	0x3e, r31	; 62
   1c76e:	0f be       	out	0x3f, r0	; 63
   1c770:	ed bf       	out	0x3d, r30	; 61
   1c772:	81 e0       	ldi	r24, 0x01	; 1
   1c774:	90 e0       	ldi	r25, 0x00	; 0
   1c776:	02 c0       	rjmp	.+4      	; 0x1c77c <lif_rename_file+0x104>

    }

    LIF = lif_open_volume(lifimagename,"rb+");
    if(LIF == NULL)
        return(-1); 
   1c778:	8f ef       	ldi	r24, 0xFF	; 255
   1c77a:	9f ef       	ldi	r25, 0xFF	; 255
    printf("renamed: %10s to %10s\n", oldlifname,newlifname);

    lif_closedir(LIF);

    return(1);
}
   1c77c:	cd b7       	in	r28, 0x3d	; 61
   1c77e:	de b7       	in	r29, 0x3e	; 62
   1c780:	ea e0       	ldi	r30, 0x0A	; 10
   1c782:	23 c5       	rjmp	.+2630   	; 0x1d1ca <__epilogue_restores__+0x10>

0001c784 <lif_create_image>:
/// @param[in] dirsectors: Number of LIF directory sectors
/// @param[in] sectors: total disk image size in sectors
///@return bytes writting to disk image
MEMSPACE
long lif_create_image(char *lifimagename, char *liflabel, uint32_t dirsectors, uint32_t sectors)
{
   1c784:	4f 92       	push	r4
   1c786:	5f 92       	push	r5
   1c788:	6f 92       	push	r6
   1c78a:	7f 92       	push	r7
   1c78c:	af 92       	push	r10
   1c78e:	bf 92       	push	r11
   1c790:	cf 92       	push	r12
   1c792:	df 92       	push	r13
   1c794:	ef 92       	push	r14
   1c796:	ff 92       	push	r15
   1c798:	0f 93       	push	r16
   1c79a:	1f 93       	push	r17
   1c79c:	cf 93       	push	r28
   1c79e:	df 93       	push	r29
   1c7a0:	27 01       	movw	r4, r14
   1c7a2:	38 01       	movw	r6, r16
    uint32_t dirstart,filestart,filesectors,end;
    lif_t *LIF;

    if(!*lifimagename)
   1c7a4:	dc 01       	movw	r26, r24
   1c7a6:	ec 91       	ld	r30, X
   1c7a8:	e1 11       	cpse	r30, r1
   1c7aa:	03 c0       	rjmp	.+6      	; 0x1c7b2 <lif_create_image+0x2e>
    {
        printf("lif_create_image: lifimagename is empty\n");
   1c7ac:	84 eb       	ldi	r24, 0xB4	; 180
   1c7ae:	92 e3       	ldi	r25, 0x32	; 50
   1c7b0:	16 c0       	rjmp	.+44     	; 0x1c7de <lif_create_image+0x5a>
        return(-1);
    }
    if(!*liflabel)
   1c7b2:	db 01       	movw	r26, r22
   1c7b4:	ec 91       	ld	r30, X
   1c7b6:	e1 11       	cpse	r30, r1
   1c7b8:	03 c0       	rjmp	.+6      	; 0x1c7c0 <lif_create_image+0x3c>
    {
        printf("lif_create_image: liflabel is empty\n");
   1c7ba:	8f e8       	ldi	r24, 0x8F	; 143
   1c7bc:	92 e3       	ldi	r25, 0x32	; 50
   1c7be:	0f c0       	rjmp	.+30     	; 0x1c7de <lif_create_image+0x5a>
        return(-1);
    }
    if(!dirsectors)
   1c7c0:	21 15       	cp	r18, r1
   1c7c2:	31 05       	cpc	r19, r1
   1c7c4:	41 05       	cpc	r20, r1
   1c7c6:	51 05       	cpc	r21, r1
   1c7c8:	19 f4       	brne	.+6      	; 0x1c7d0 <lif_create_image+0x4c>
    {
        printf("lif_create_image: dirsectors is 0\n");
   1c7ca:	8c e6       	ldi	r24, 0x6C	; 108
   1c7cc:	92 e3       	ldi	r25, 0x32	; 50
   1c7ce:	07 c0       	rjmp	.+14     	; 0x1c7de <lif_create_image+0x5a>
        return(-1);
    }
    if(!sectors)
   1c7d0:	e1 14       	cp	r14, r1
   1c7d2:	f1 04       	cpc	r15, r1
   1c7d4:	01 05       	cpc	r16, r1
   1c7d6:	11 05       	cpc	r17, r1
   1c7d8:	59 f4       	brne	.+22     	; 0x1c7f0 <lif_create_image+0x6c>
    {
        printf("lif_create_image: sectors is 0\n");
   1c7da:	8c e4       	ldi	r24, 0x4C	; 76
   1c7dc:	92 e3       	ldi	r25, 0x32	; 50
   1c7de:	1f 92       	push	r1
   1c7e0:	9f 93       	push	r25
   1c7e2:	8f 93       	push	r24
   1c7e4:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
        return(-1);
   1c7e8:	0f 90       	pop	r0
   1c7ea:	0f 90       	pop	r0
   1c7ec:	0f 90       	pop	r0
   1c7ee:	30 c0       	rjmp	.+96     	; 0x1c850 <lif_create_image+0xcc>
    dirstart = 2;
    filestart = dirstart + dirsectors;
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
   1c7f0:	67 01       	movw	r12, r14
   1c7f2:	78 01       	movw	r14, r16
   1c7f4:	b2 e0       	ldi	r27, 0x02	; 2
   1c7f6:	cb 1a       	sub	r12, r27
   1c7f8:	d1 08       	sbc	r13, r1
   1c7fa:	e1 08       	sbc	r14, r1
   1c7fc:	f1 08       	sbc	r15, r1
   1c7fe:	56 01       	movw	r10, r12
   1c800:	67 01       	movw	r12, r14
   1c802:	a2 1a       	sub	r10, r18
   1c804:	b3 0a       	sbc	r11, r19
   1c806:	c4 0a       	sbc	r12, r20
   1c808:	d5 0a       	sbc	r13, r21
   1c80a:	79 01       	movw	r14, r18
   1c80c:	8a 01       	movw	r16, r20
   1c80e:	22 e0       	ldi	r18, 0x02	; 2
   1c810:	30 e0       	ldi	r19, 0x00	; 0
   1c812:	40 e0       	ldi	r20, 0x00	; 0
   1c814:	50 e0       	ldi	r21, 0x00	; 0
   1c816:	0e 94 7a d2 	call	0x1a4f4	; 0x1a4f4 <lif_create_volume>
    if(LIF == NULL)
   1c81a:	00 97       	sbiw	r24, 0x00	; 0
   1c81c:	c9 f0       	breq	.+50     	; 0x1c850 <lif_create_image+0xcc>
        return(-1);
    lif_close_volume(LIF);
   1c81e:	0e 94 14 d0 	call	0x1a028	; 0x1a028 <lif_close_volume>

    printf("Formating: wrote:[%ld] sectors\n", (long)end);
   1c822:	82 01       	movw	r16, r4
   1c824:	d6 2d       	mov	r29, r6
   1c826:	c7 2d       	mov	r28, r7
   1c828:	7f 92       	push	r7
   1c82a:	6f 92       	push	r6
   1c82c:	5f 92       	push	r5
   1c82e:	4f 92       	push	r4
   1c830:	8c e2       	ldi	r24, 0x2C	; 44
   1c832:	92 e3       	ldi	r25, 0x32	; 50
   1c834:	1f 92       	push	r1
   1c836:	9f 93       	push	r25
   1c838:	8f 93       	push	r24
   1c83a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    return(end);
   1c83e:	8d b7       	in	r24, 0x3d	; 61
   1c840:	9e b7       	in	r25, 0x3e	; 62
   1c842:	07 96       	adiw	r24, 0x07	; 7
   1c844:	0f b6       	in	r0, 0x3f	; 63
   1c846:	f8 94       	cli
   1c848:	9e bf       	out	0x3e, r25	; 62
   1c84a:	0f be       	out	0x3f, r0	; 63
   1c84c:	8d bf       	out	0x3d, r24	; 61
   1c84e:	04 c0       	rjmp	.+8      	; 0x1c858 <lif_create_image+0xd4>
    filesectors = sectors - filestart;
    end = filestart + filesectors;

    LIF = lif_create_volume(lifimagename, liflabel, dirstart, dirsectors, filesectors);
    if(LIF == NULL)
        return(-1);
   1c850:	0f ef       	ldi	r16, 0xFF	; 255
   1c852:	1f ef       	ldi	r17, 0xFF	; 255
   1c854:	df ef       	ldi	r29, 0xFF	; 255
   1c856:	cf ef       	ldi	r28, 0xFF	; 255
    lif_close_volume(LIF);

    printf("Formating: wrote:[%ld] sectors\n", (long)end);
    return(end);
}
   1c858:	b8 01       	movw	r22, r16
   1c85a:	8d 2f       	mov	r24, r29
   1c85c:	9c 2f       	mov	r25, r28
   1c85e:	df 91       	pop	r29
   1c860:	cf 91       	pop	r28
   1c862:	1f 91       	pop	r17
   1c864:	0f 91       	pop	r16
   1c866:	ff 90       	pop	r15
   1c868:	ef 90       	pop	r14
   1c86a:	df 90       	pop	r13
   1c86c:	cf 90       	pop	r12
   1c86e:	bf 90       	pop	r11
   1c870:	af 90       	pop	r10
   1c872:	7f 90       	pop	r7
   1c874:	6f 90       	pop	r6
   1c876:	5f 90       	pop	r5
   1c878:	4f 90       	pop	r4
   1c87a:	08 95       	ret

0001c87c <lif_tests>:

/// @brief LIF user tests
/// @return  1 matched token, 0 if not
MEMSPACE
int lif_tests(int argc, char *argv[])
{
   1c87c:	a0 e0       	ldi	r26, 0x00	; 0
   1c87e:	b0 e0       	ldi	r27, 0x00	; 0
   1c880:	e3 e4       	ldi	r30, 0x43	; 67
   1c882:	f4 ee       	ldi	r31, 0xE4	; 228
   1c884:	84 c4       	rjmp	.+2312   	; 0x1d18e <__prologue_saves__+0xc>
    // NAME
    ind = 0;
	// Skip program name
    ptr = argv[ind++];

    if(!ptr )
   1c886:	fb 01       	movw	r30, r22
   1c888:	20 81       	ld	r18, Z
   1c88a:	31 81       	ldd	r19, Z+1	; 0x01
   1c88c:	23 2b       	or	r18, r19
   1c88e:	59 f0       	breq	.+22     	; 0x1c8a6 <lif_tests+0x2a>
   1c890:	8b 01       	movw	r16, r22
   1c892:	4c 01       	movw	r8, r24
        return(0);

	// Next Argument after program name
    ptr = argv[ind++];
   1c894:	fb 01       	movw	r30, r22
   1c896:	a2 80       	ldd	r10, Z+2	; 0x02
   1c898:	b3 80       	ldd	r11, Z+3	; 0x03



    if(argc <= 1 || !ptr || MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1c89a:	02 97       	sbiw	r24, 0x02	; 2
   1c89c:	3c f4       	brge	.+14     	; 0x1c8ac <lif_tests+0x30>
    {
        lif_help(1);
   1c89e:	81 e0       	ldi	r24, 0x01	; 1
   1c8a0:	90 e0       	ldi	r25, 0x00	; 0
   1c8a2:	0e 94 7f c6 	call	0x18cfe	; 0x18cfe <lif_help>
#ifdef TELEDISK
        td0_help(1);
#endif
        return(0);
   1c8a6:	80 e0       	ldi	r24, 0x00	; 0
   1c8a8:	90 e0       	ldi	r25, 0x00	; 0
   1c8aa:	0a c1       	rjmp	.+532    	; 0x1cac0 <lif_tests+0x244>
	// Next Argument after program name
    ptr = argv[ind++];



    if(argc <= 1 || !ptr || MATCH(ptr,"help") || MATCH(ptr,"-help") || MATCH(ptr,"-?") )
   1c8ac:	a1 14       	cp	r10, r1
   1c8ae:	b1 04       	cpc	r11, r1
   1c8b0:	b1 f3       	breq	.-20     	; 0x1c89e <lif_tests+0x22>
   1c8b2:	69 e0       	ldi	r22, 0x09	; 9
   1c8b4:	76 e1       	ldi	r23, 0x16	; 22
   1c8b6:	c5 01       	movw	r24, r10
   1c8b8:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <MATCH>
   1c8bc:	89 2b       	or	r24, r25
   1c8be:	79 f7       	brne	.-34     	; 0x1c89e <lif_tests+0x22>
   1c8c0:	68 e0       	ldi	r22, 0x08	; 8
   1c8c2:	76 e1       	ldi	r23, 0x16	; 22
   1c8c4:	c5 01       	movw	r24, r10
   1c8c6:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <MATCH>
   1c8ca:	89 2b       	or	r24, r25
   1c8cc:	41 f7       	brne	.-48     	; 0x1c89e <lif_tests+0x22>
   1c8ce:	6e e0       	ldi	r22, 0x0E	; 14
   1c8d0:	76 e1       	ldi	r23, 0x16	; 22
   1c8d2:	c5 01       	movw	r24, r10
   1c8d4:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <MATCH>
   1c8d8:	89 2b       	or	r24, r25
   1c8da:	09 f7       	brne	.-62     	; 0x1c89e <lif_tests+0x22>
        return(0);
    }

	// Turn one debugging
	// in the future we can add tests for specific messages
    if (MATCHARGS(ptr,"-d", (ind + 0) ,argc))
   1c8dc:	94 01       	movw	r18, r8
   1c8de:	42 e0       	ldi	r20, 0x02	; 2
   1c8e0:	50 e0       	ldi	r21, 0x00	; 0
   1c8e2:	61 e1       	ldi	r22, 0x11	; 17
   1c8e4:	76 e1       	ldi	r23, 0x16	; 22
   1c8e6:	c5 01       	movw	r24, r10
   1c8e8:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   1c8ec:	89 2b       	or	r24, r25
   1c8ee:	69 f0       	breq	.+26     	; 0x1c90a <lif_tests+0x8e>
    {
		debuglevel = 0xffff;
   1c8f0:	8f ef       	ldi	r24, 0xFF	; 255
   1c8f2:	9f ef       	ldi	r25, 0xFF	; 255
   1c8f4:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <debuglevel+0x1>
   1c8f8:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <debuglevel>
		ptr = argv[ind++];
   1c8fc:	f8 01       	movw	r30, r16
   1c8fe:	a4 80       	ldd	r10, Z+4	; 0x04
   1c900:	b5 80       	ldd	r11, Z+5	; 0x05
   1c902:	f3 e0       	ldi	r31, 0x03	; 3
   1c904:	ef 2e       	mov	r14, r31
   1c906:	f1 2c       	mov	r15, r1
   1c908:	03 c0       	rjmp	.+6      	; 0x1c910 <lif_tests+0x94>

    if(!ptr )
        return(0);

	// Next Argument after program name
    ptr = argv[ind++];
   1c90a:	e2 e0       	ldi	r30, 0x02	; 2
   1c90c:	ee 2e       	mov	r14, r30
   1c90e:	f1 2c       	mov	r15, r1
    {
		debuglevel = 0xffff;
		ptr = argv[ind++];
    }

    if (MATCHARGS(ptr,"addbin", (ind + 3) ,argc))
   1c910:	67 01       	movw	r12, r14
   1c912:	f3 e0       	ldi	r31, 0x03	; 3
   1c914:	cf 0e       	add	r12, r31
   1c916:	d1 1c       	adc	r13, r1
   1c918:	94 01       	movw	r18, r8
   1c91a:	a6 01       	movw	r20, r12
   1c91c:	64 e1       	ldi	r22, 0x14	; 20
   1c91e:	76 e1       	ldi	r23, 0x16	; 22
   1c920:	c5 01       	movw	r24, r10
   1c922:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   1c926:	e7 01       	movw	r28, r14
   1c928:	22 96       	adiw	r28, 0x02	; 2
   1c92a:	89 2b       	or	r24, r25
   1c92c:	79 f0       	breq	.+30     	; 0x1c94c <lif_tests+0xd0>
    {
        lif_add_lif_file(argv[ind],argv[ind+1],argv[ind+2]);
   1c92e:	cc 0f       	add	r28, r28
   1c930:	dd 1f       	adc	r29, r29
   1c932:	c0 0f       	add	r28, r16
   1c934:	d1 1f       	adc	r29, r17
   1c936:	48 81       	ld	r20, Y
   1c938:	59 81       	ldd	r21, Y+1	; 0x01
   1c93a:	fe 01       	movw	r30, r28
   1c93c:	32 97       	sbiw	r30, 0x02	; 2
   1c93e:	60 81       	ld	r22, Z
   1c940:	71 81       	ldd	r23, Z+1	; 0x01
   1c942:	24 97       	sbiw	r28, 0x04	; 4
   1c944:	88 81       	ld	r24, Y
   1c946:	99 81       	ldd	r25, Y+1	; 0x01
   1c948:	67 dc       	rcall	.-1842   	; 0x1c218 <lif_add_lif_file>
   1c94a:	b8 c0       	rjmp	.+368    	; 0x1cabc <lif_tests+0x240>

        return(1);
    }
    if (MATCHARGS(ptr,"add", (ind + 3) ,argc))
   1c94c:	94 01       	movw	r18, r8
   1c94e:	a6 01       	movw	r20, r12
   1c950:	6b e1       	ldi	r22, 0x1B	; 27
   1c952:	76 e1       	ldi	r23, 0x16	; 22
   1c954:	c5 01       	movw	r24, r10
   1c956:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   1c95a:	89 2b       	or	r24, r25
   1c95c:	81 f0       	breq	.+32     	; 0x1c97e <lif_tests+0x102>
    {
        lif_add_ascii_file_as_e010(argv[ind],argv[ind+1],argv[ind+2]);
   1c95e:	cc 0f       	add	r28, r28
   1c960:	dd 1f       	adc	r29, r29
   1c962:	c0 0f       	add	r28, r16
   1c964:	d1 1f       	adc	r29, r17
   1c966:	48 81       	ld	r20, Y
   1c968:	59 81       	ldd	r21, Y+1	; 0x01
   1c96a:	fe 01       	movw	r30, r28
   1c96c:	32 97       	sbiw	r30, 0x02	; 2
   1c96e:	60 81       	ld	r22, Z
   1c970:	71 81       	ldd	r23, Z+1	; 0x01
   1c972:	24 97       	sbiw	r28, 0x04	; 4
   1c974:	88 81       	ld	r24, Y
   1c976:	99 81       	ldd	r25, Y+1	; 0x01
   1c978:	0e 94 a1 db 	call	0x1b742	; 0x1b742 <lif_add_ascii_file_as_e010>
   1c97c:	9f c0       	rjmp	.+318    	; 0x1cabc <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"del", (ind + 2) ,argc))
   1c97e:	94 01       	movw	r18, r8
   1c980:	ae 01       	movw	r20, r28
   1c982:	6f e1       	ldi	r22, 0x1F	; 31
   1c984:	76 e1       	ldi	r23, 0x16	; 22
   1c986:	c5 01       	movw	r24, r10
   1c988:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   1c98c:	89 2b       	or	r24, r25
   1c98e:	71 f0       	breq	.+28     	; 0x1c9ac <lif_tests+0x130>
    {
        lif_del_file(argv[ind],argv[ind+1]);
   1c990:	c7 01       	movw	r24, r14
   1c992:	01 96       	adiw	r24, 0x01	; 1
   1c994:	88 0f       	add	r24, r24
   1c996:	99 1f       	adc	r25, r25
   1c998:	e8 01       	movw	r28, r16
   1c99a:	c8 0f       	add	r28, r24
   1c99c:	d9 1f       	adc	r29, r25
   1c99e:	68 81       	ld	r22, Y
   1c9a0:	79 81       	ldd	r23, Y+1	; 0x01
   1c9a2:	22 97       	sbiw	r28, 0x02	; 2
   1c9a4:	88 81       	ld	r24, Y
   1c9a6:	99 81       	ldd	r25, Y+1	; 0x01
   1c9a8:	cf dd       	rcall	.-1122   	; 0x1c548 <lif_del_file>
   1c9aa:	88 c0       	rjmp	.+272    	; 0x1cabc <lif_tests+0x240>

        return(1);
    }
    if (MATCHARGS(ptr,"create", (ind + 4) ,argc))
   1c9ac:	94 01       	movw	r18, r8
   1c9ae:	a7 01       	movw	r20, r14
   1c9b0:	4c 5f       	subi	r20, 0xFC	; 252
   1c9b2:	5f 4f       	sbci	r21, 0xFF	; 255
   1c9b4:	63 e2       	ldi	r22, 0x23	; 35
   1c9b6:	76 e1       	ldi	r23, 0x16	; 22
   1c9b8:	c5 01       	movw	r24, r10
   1c9ba:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   1c9be:	89 2b       	or	r24, r25
   1c9c0:	f1 f0       	breq	.+60     	; 0x1c9fe <lif_tests+0x182>
    {
        ///@brief format LIF image
        lif_create_image(argv[ind],argv[ind+1], atol(argv[ind+2]), atol(argv[ind+3]) );
   1c9c2:	e6 01       	movw	r28, r12
   1c9c4:	cc 0f       	add	r28, r28
   1c9c6:	dd 1f       	adc	r29, r29
   1c9c8:	c0 0f       	add	r28, r16
   1c9ca:	d1 1f       	adc	r29, r17
   1c9cc:	88 81       	ld	r24, Y
   1c9ce:	99 81       	ldd	r25, Y+1	; 0x01
   1c9d0:	0e 94 68 45 	call	0x8ad0	; 0x8ad0 <atol>
   1c9d4:	6b 01       	movw	r12, r22
   1c9d6:	7c 01       	movw	r14, r24
   1c9d8:	fe 01       	movw	r30, r28
   1c9da:	32 97       	sbiw	r30, 0x02	; 2
   1c9dc:	80 81       	ld	r24, Z
   1c9de:	91 81       	ldd	r25, Z+1	; 0x01
   1c9e0:	0e 94 68 45 	call	0x8ad0	; 0x8ad0 <atol>
   1c9e4:	9b 01       	movw	r18, r22
   1c9e6:	ac 01       	movw	r20, r24
   1c9e8:	fe 01       	movw	r30, r28
   1c9ea:	34 97       	sbiw	r30, 0x04	; 4
   1c9ec:	60 81       	ld	r22, Z
   1c9ee:	71 81       	ldd	r23, Z+1	; 0x01
   1c9f0:	26 97       	sbiw	r28, 0x06	; 6
   1c9f2:	87 01       	movw	r16, r14
   1c9f4:	76 01       	movw	r14, r12
   1c9f6:	88 81       	ld	r24, Y
   1c9f8:	99 81       	ldd	r25, Y+1	; 0x01
   1c9fa:	c4 de       	rcall	.-632    	; 0x1c784 <lif_create_image>
   1c9fc:	5f c0       	rjmp	.+190    	; 0x1cabc <lif_tests+0x240>
        return(1);
    }
    else if (MATCHARGS(ptr,"dir", (ind + 1) ,argc))
   1c9fe:	94 01       	movw	r18, r8
   1ca00:	a7 01       	movw	r20, r14
   1ca02:	4f 5f       	subi	r20, 0xFF	; 255
   1ca04:	5f 4f       	sbci	r21, 0xFF	; 255
   1ca06:	68 e3       	ldi	r22, 0x38	; 56
   1ca08:	7b e0       	ldi	r23, 0x0B	; 11
   1ca0a:	c5 01       	movw	r24, r10
   1ca0c:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   1ca10:	89 2b       	or	r24, r25
   1ca12:	59 f0       	breq	.+22     	; 0x1ca2a <lif_tests+0x1ae>
    {
        lif_dir(argv[ind]);
   1ca14:	c7 01       	movw	r24, r14
   1ca16:	88 0f       	add	r24, r24
   1ca18:	99 1f       	adc	r25, r25
   1ca1a:	e8 01       	movw	r28, r16
   1ca1c:	c8 0f       	add	r28, r24
   1ca1e:	d9 1f       	adc	r29, r25
   1ca20:	88 81       	ld	r24, Y
   1ca22:	99 81       	ldd	r25, Y+1	; 0x01
   1ca24:	0e 94 b0 d7 	call	0x1af60	; 0x1af60 <lif_dir>
   1ca28:	49 c0       	rjmp	.+146    	; 0x1cabc <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"extractbin", (ind + 3) ,argc))
   1ca2a:	94 01       	movw	r18, r8
   1ca2c:	a6 01       	movw	r20, r12
   1ca2e:	6a e2       	ldi	r22, 0x2A	; 42
   1ca30:	76 e1       	ldi	r23, 0x16	; 22
   1ca32:	c5 01       	movw	r24, r10
   1ca34:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   1ca38:	89 2b       	or	r24, r25
   1ca3a:	79 f0       	breq	.+30     	; 0x1ca5a <lif_tests+0x1de>
    {

        lif_extract_lif_as_lif(argv[ind],argv[ind+1],argv[ind+2]);
   1ca3c:	cc 0f       	add	r28, r28
   1ca3e:	dd 1f       	adc	r29, r29
   1ca40:	c0 0f       	add	r28, r16
   1ca42:	d1 1f       	adc	r29, r17
   1ca44:	48 81       	ld	r20, Y
   1ca46:	59 81       	ldd	r21, Y+1	; 0x01
   1ca48:	fe 01       	movw	r30, r28
   1ca4a:	32 97       	sbiw	r30, 0x02	; 2
   1ca4c:	60 81       	ld	r22, Z
   1ca4e:	71 81       	ldd	r23, Z+1	; 0x01
   1ca50:	24 97       	sbiw	r28, 0x04	; 4
   1ca52:	88 81       	ld	r24, Y
   1ca54:	99 81       	ldd	r25, Y+1	; 0x01
   1ca56:	9a da       	rcall	.-2764   	; 0x1bf8c <lif_extract_lif_as_lif>
   1ca58:	31 c0       	rjmp	.+98     	; 0x1cabc <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"extract", (ind + 3) ,argc))
   1ca5a:	94 01       	movw	r18, r8
   1ca5c:	a6 01       	movw	r20, r12
   1ca5e:	65 e3       	ldi	r22, 0x35	; 53
   1ca60:	76 e1       	ldi	r23, 0x16	; 22
   1ca62:	c5 01       	movw	r24, r10
   1ca64:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   1ca68:	89 2b       	or	r24, r25
   1ca6a:	81 f0       	breq	.+32     	; 0x1ca8c <lif_tests+0x210>
    {

        lif_extract_e010_as_ascii(argv[ind],argv[ind+1],argv[ind+2]);
   1ca6c:	cc 0f       	add	r28, r28
   1ca6e:	dd 1f       	adc	r29, r29
   1ca70:	c0 0f       	add	r28, r16
   1ca72:	d1 1f       	adc	r29, r17
   1ca74:	48 81       	ld	r20, Y
   1ca76:	59 81       	ldd	r21, Y+1	; 0x01
   1ca78:	fe 01       	movw	r30, r28
   1ca7a:	32 97       	sbiw	r30, 0x02	; 2
   1ca7c:	60 81       	ld	r22, Z
   1ca7e:	71 81       	ldd	r23, Z+1	; 0x01
   1ca80:	24 97       	sbiw	r28, 0x04	; 4
   1ca82:	88 81       	ld	r24, Y
   1ca84:	99 81       	ldd	r25, Y+1	; 0x01
   1ca86:	0e 94 da dc 	call	0x1b9b4	; 0x1b9b4 <lif_extract_e010_as_ascii>
   1ca8a:	18 c0       	rjmp	.+48     	; 0x1cabc <lif_tests+0x240>
        return(1);
    }
    if (MATCHARGS(ptr,"rename", (ind + 3) ,argc))
   1ca8c:	94 01       	movw	r18, r8
   1ca8e:	a6 01       	movw	r20, r12
   1ca90:	65 e4       	ldi	r22, 0x45	; 69
   1ca92:	7b e0       	ldi	r23, 0x0B	; 11
   1ca94:	c5 01       	movw	r24, r10
   1ca96:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   1ca9a:	89 2b       	or	r24, r25
   1ca9c:	09 f4       	brne	.+2      	; 0x1caa0 <lif_tests+0x224>
   1ca9e:	03 cf       	rjmp	.-506    	; 0x1c8a6 <lif_tests+0x2a>
    {
        lif_rename_file(argv[ind],argv[ind+1],argv[ind+2]);
   1caa0:	cc 0f       	add	r28, r28
   1caa2:	dd 1f       	adc	r29, r29
   1caa4:	c0 0f       	add	r28, r16
   1caa6:	d1 1f       	adc	r29, r17
   1caa8:	48 81       	ld	r20, Y
   1caaa:	59 81       	ldd	r21, Y+1	; 0x01
   1caac:	fe 01       	movw	r30, r28
   1caae:	32 97       	sbiw	r30, 0x02	; 2
   1cab0:	60 81       	ld	r22, Z
   1cab2:	71 81       	ldd	r23, Z+1	; 0x01
   1cab4:	24 97       	sbiw	r28, 0x04	; 4
   1cab6:	88 81       	ld	r24, Y
   1cab8:	99 81       	ldd	r25, Y+1	; 0x01
        return(1);
   1caba:	de dd       	rcall	.-1092   	; 0x1c678 <lif_rename_file>
        td02lif(argc,argv);
        return(1);
    }
#endif
    return(0);
}
   1cabc:	81 e0       	ldi	r24, 0x01	; 1
   1cabe:	90 e0       	ldi	r25, 0x00	; 0
   1cac0:	cd b7       	in	r28, 0x3d	; 61
   1cac2:	de b7       	in	r29, 0x3e	; 62
   1cac4:	ec e0       	ldi	r30, 0x0C	; 12
   1cac6:	7f c3       	rjmp	.+1790   	; 0x1d1c6 <__epilogue_restores__+0xc>

0001cac8 <copyright>:

///@brief Display Copyright
///@return void
void copyright()
{
    printf("Stand alone version of LIF utilities for linux\n");
   1cac8:	8e e5       	ldi	r24, 0x5E	; 94
   1caca:	98 e4       	ldi	r25, 0x48	; 72
   1cacc:	1f 92       	push	r1
   1cace:	9f 93       	push	r25
   1cad0:	8f 93       	push	r24
   1cad2:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    printf("HP85 Disk and Device Emulator\n");
   1cad6:	8f e3       	ldi	r24, 0x3F	; 63
   1cad8:	98 e4       	ldi	r25, 0x48	; 72
   1cada:	1f 92       	push	r1
   1cadc:	9f 93       	push	r25
   1cade:	8f 93       	push	r24
   1cae0:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    printf(" (c) 2014-2020 by Mike Gore\n");
   1cae4:	82 e2       	ldi	r24, 0x22	; 34
   1cae6:	98 e4       	ldi	r25, 0x48	; 72
   1cae8:	1f 92       	push	r1
   1caea:	9f 93       	push	r25
   1caec:	8f 93       	push	r24
   1caee:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    printf(" GNU version 3\n");
   1caf2:	82 e1       	ldi	r24, 0x12	; 18
   1caf4:	98 e4       	ldi	r25, 0x48	; 72
   1caf6:	1f 92       	push	r1
   1caf8:	9f 93       	push	r25
   1cafa:	8f 93       	push	r24
   1cafc:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    printf("-> https://github.com/magore/hp85disk\n");
   1cb00:	8b ee       	ldi	r24, 0xEB	; 235
   1cb02:	97 e4       	ldi	r25, 0x47	; 71
   1cb04:	1f 92       	push	r1
   1cb06:	9f 93       	push	r25
   1cb08:	8f 93       	push	r24
   1cb0a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    printf("   GIT last pushed:   %s\n", GIT_VERSION);
   1cb0e:	8d e3       	ldi	r24, 0x3D	; 61
   1cb10:	96 e1       	ldi	r25, 0x16	; 22
   1cb12:	9f 93       	push	r25
   1cb14:	8f 93       	push	r24
   1cb16:	81 ed       	ldi	r24, 0xD1	; 209
   1cb18:	97 e4       	ldi	r25, 0x47	; 71
   1cb1a:	1f 92       	push	r1
   1cb1c:	9f 93       	push	r25
   1cb1e:	8f 93       	push	r24
   1cb20:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    printf("   Last updated file: %s\n", LOCAL_MOD);
   1cb24:	81 e6       	ldi	r24, 0x61	; 97
   1cb26:	96 e1       	ldi	r25, 0x16	; 22
   1cb28:	9f 93       	push	r25
   1cb2a:	8f 93       	push	r24
   1cb2c:	87 eb       	ldi	r24, 0xB7	; 183
   1cb2e:	97 e4       	ldi	r25, 0x47	; 71
   1cb30:	1f 92       	push	r1
   1cb32:	9f 93       	push	r25
   1cb34:	8f 93       	push	r24
   1cb36:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
    printf("\n");
   1cb3a:	85 eb       	ldi	r24, 0xB5	; 181
   1cb3c:	97 e4       	ldi	r25, 0x47	; 71
   1cb3e:	1f 92       	push	r1
   1cb40:	9f 93       	push	r25
   1cb42:	8f 93       	push	r24
   1cb44:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
}
   1cb48:	8d b7       	in	r24, 0x3d	; 61
   1cb4a:	9e b7       	in	r25, 0x3e	; 62
   1cb4c:	4c 96       	adiw	r24, 0x1c	; 28
   1cb4e:	0f b6       	in	r0, 0x3f	; 63
   1cb50:	f8 94       	cli
   1cb52:	9e bf       	out	0x3e, r25	; 62
   1cb54:	0f be       	out	0x3f, r0	; 63
   1cb56:	8d bf       	out	0x3d, r24	; 61
   1cb58:	08 95       	ret

0001cb5a <delay_tests>:
///
/// This included measurement of avr-libc delays
/// @return  void
void delay_tests()
{
    printf("System delays\n");
   1cb5a:	86 ea       	ldi	r24, 0xA6	; 166
   1cb5c:	97 e4       	ldi	r25, 0x47	; 71
   1cb5e:	1f 92       	push	r1
   1cb60:	9f 93       	push	r25
   1cb62:	8f 93       	push	r24
   1cb64:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>

    clock_elapsed_begin();
   1cb68:	0e 94 ef 33 	call	0x67de	; 0x67de <clock_elapsed_begin>
    clock_elapsed_end("elapsed timer overhead");
   1cb6c:	85 e8       	ldi	r24, 0x85	; 133
   1cb6e:	96 e1       	ldi	r25, 0x16	; 22
   1cb70:	0e 94 f5 33 	call	0x67ea	; 0x67ea <clock_elapsed_end>

    clock_elapsed_begin();
   1cb74:	0e 94 ef 33 	call	0x67de	; 0x67de <clock_elapsed_begin>
   1cb78:	83 ef       	ldi	r24, 0xF3	; 243
   1cb7a:	91 e0       	ldi	r25, 0x01	; 1
   1cb7c:	01 97       	sbiw	r24, 0x01	; 1
   1cb7e:	f1 f7       	brne	.-4      	; 0x1cb7c <delay_tests+0x22>
   1cb80:	00 c0       	rjmp	.+0      	; 0x1cb82 <delay_tests+0x28>
   1cb82:	00 00       	nop
    _delay_us(100);
    clock_elapsed_end("_delay_us(100)");
   1cb84:	8c e9       	ldi	r24, 0x9C	; 156
   1cb86:	96 e1       	ldi	r25, 0x16	; 22
   1cb88:	0e 94 f5 33 	call	0x67ea	; 0x67ea <clock_elapsed_end>

    clock_elapsed_begin();
   1cb8c:	0e 94 ef 33 	call	0x67de	; 0x67de <clock_elapsed_begin>
   1cb90:	83 ec       	ldi	r24, 0xC3	; 195
   1cb92:	99 e0       	ldi	r25, 0x09	; 9
   1cb94:	01 97       	sbiw	r24, 0x01	; 1
   1cb96:	f1 f7       	brne	.-4      	; 0x1cb94 <delay_tests+0x3a>
   1cb98:	00 c0       	rjmp	.+0      	; 0x1cb9a <delay_tests+0x40>
   1cb9a:	00 00       	nop
    _delay_us(500);
    clock_elapsed_end("_delay_us(500)");
   1cb9c:	8b ea       	ldi	r24, 0xAB	; 171
   1cb9e:	96 e1       	ldi	r25, 0x16	; 22
   1cba0:	0e 94 f5 33 	call	0x67ea	; 0x67ea <clock_elapsed_end>

    printf("My delays\n");
   1cba4:	8b e9       	ldi	r24, 0x9B	; 155
   1cba6:	97 e4       	ldi	r25, 0x47	; 71
   1cba8:	1f 92       	push	r1
   1cbaa:	9f 93       	push	r25
   1cbac:	8f 93       	push	r24
   1cbae:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>

    clock_elapsed_begin();
   1cbb2:	0e 94 ef 33 	call	0x67de	; 0x67de <clock_elapsed_begin>
    delayus(100U);
   1cbb6:	64 e6       	ldi	r22, 0x64	; 100
   1cbb8:	70 e0       	ldi	r23, 0x00	; 0
   1cbba:	80 e0       	ldi	r24, 0x00	; 0
   1cbbc:	90 e0       	ldi	r25, 0x00	; 0
   1cbbe:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <delayus>
    clock_elapsed_end("delayus(100)");
   1cbc2:	8a eb       	ldi	r24, 0xBA	; 186
   1cbc4:	96 e1       	ldi	r25, 0x16	; 22
   1cbc6:	0e 94 f5 33 	call	0x67ea	; 0x67ea <clock_elapsed_end>

    clock_elapsed_begin();
   1cbca:	0e 94 ef 33 	call	0x67de	; 0x67de <clock_elapsed_begin>
    delayus(500U);
   1cbce:	64 ef       	ldi	r22, 0xF4	; 244
   1cbd0:	71 e0       	ldi	r23, 0x01	; 1
   1cbd2:	80 e0       	ldi	r24, 0x00	; 0
   1cbd4:	90 e0       	ldi	r25, 0x00	; 0
   1cbd6:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <delayus>
    clock_elapsed_end("delayus(500)");
   1cbda:	87 ec       	ldi	r24, 0xC7	; 199
   1cbdc:	96 e1       	ldi	r25, 0x16	; 22
   1cbde:	0e 94 f5 33 	call	0x67ea	; 0x67ea <clock_elapsed_end>

    clock_elapsed_begin();
   1cbe2:	0e 94 ef 33 	call	0x67de	; 0x67de <clock_elapsed_begin>
    delayus(1100);
   1cbe6:	6c e4       	ldi	r22, 0x4C	; 76
   1cbe8:	74 e0       	ldi	r23, 0x04	; 4
   1cbea:	80 e0       	ldi	r24, 0x00	; 0
   1cbec:	90 e0       	ldi	r25, 0x00	; 0
   1cbee:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <delayus>
    clock_elapsed_end("delayus(1100)");
   1cbf2:	84 ed       	ldi	r24, 0xD4	; 212
   1cbf4:	96 e1       	ldi	r25, 0x16	; 22
   1cbf6:	0e 94 f5 33 	call	0x67ea	; 0x67ea <clock_elapsed_end>

    clock_elapsed_begin();
   1cbfa:	0e 94 ef 33 	call	0x67de	; 0x67de <clock_elapsed_begin>
    delayms(1000);
   1cbfe:	68 ee       	ldi	r22, 0xE8	; 232
   1cc00:	73 e0       	ldi	r23, 0x03	; 3
   1cc02:	80 e0       	ldi	r24, 0x00	; 0
   1cc04:	90 e0       	ldi	r25, 0x00	; 0
   1cc06:	0e 94 1e 2a 	call	0x543c	; 0x543c <delayms>
    clock_elapsed_end("delayms(1100)");
   1cc0a:	82 ee       	ldi	r24, 0xE2	; 226
   1cc0c:	96 e1       	ldi	r25, 0x16	; 22
   1cc0e:	0e 94 f5 33 	call	0x67ea	; 0x67ea <clock_elapsed_end>
}
   1cc12:	0f 90       	pop	r0
   1cc14:	0f 90       	pop	r0
   1cc16:	0f 90       	pop	r0
   1cc18:	0f 90       	pop	r0
   1cc1a:	0f 90       	pop	r0
   1cc1c:	0f 90       	pop	r0
   1cc1e:	08 95       	ret

0001cc20 <help>:
   1cc20:	53 df       	rcall	.-346    	; 0x1cac8 <copyright>
   1cc22:	80 e0       	ldi	r24, 0x00	; 0
   1cc24:	90 e0       	ldi	r25, 0x00	; 0
   1cc26:	0e 94 b7 75 	call	0xeb6e	; 0xeb6e <fatfs_help>
   1cc2a:	80 e0       	ldi	r24, 0x00	; 0
   1cc2c:	90 e0       	ldi	r25, 0x00	; 0
   1cc2e:	0e 94 ff 81 	call	0x103fe	; 0x103fe <posix_help>
   1cc32:	80 e0       	ldi	r24, 0x00	; 0
   1cc34:	90 e0       	ldi	r25, 0x00	; 0
   1cc36:	0e 94 7f c6 	call	0x18cfe	; 0x18cfe <lif_help>
   1cc3a:	80 e0       	ldi	r24, 0x00	; 0
   1cc3c:	90 e0       	ldi	r25, 0x00	; 0
   1cc3e:	0e 94 26 97 	call	0x12e4c	; 0x12e4c <gpib_help>
   1cc42:	8c e7       	ldi	r24, 0x7C	; 124
   1cc44:	97 e4       	ldi	r25, 0x47	; 71
   1cc46:	1f 92       	push	r1
   1cc48:	9f 93       	push	r25
   1cc4a:	8f 93       	push	r24
   1cc4c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1cc50:	0f 90       	pop	r0
   1cc52:	0f 90       	pop	r0
   1cc54:	0f 90       	pop	r0
   1cc56:	08 95       	ret

0001cc58 <task>:
   1cc58:	a4 ee       	ldi	r26, 0xE4	; 228
   1cc5a:	b0 e0       	ldi	r27, 0x00	; 0
   1cc5c:	e1 e3       	ldi	r30, 0x31	; 49
   1cc5e:	f6 ee       	ldi	r31, 0xE6	; 230
   1cc60:	9c c2       	rjmp	.+1336   	; 0x1d19a <__prologue_saves__+0x18>
   1cc62:	81 11       	cpse	r24, r1
   1cc64:	0e 94 c4 96 	call	0x12d88	; 0x12d88 <gpib_task>
   1cc68:	80 e0       	ldi	r24, 0x00	; 0
   1cc6a:	0e 94 91 2b 	call	0x5722	; 0x5722 <uart_rx_count>
   1cc6e:	89 2b       	or	r24, r25
   1cc70:	09 f4       	brne	.+2      	; 0x1cc74 <task+0x1c>
   1cc72:	a0 c0       	rjmp	.+320    	; 0x1cdb4 <task+0x15c>
   1cc74:	89 e7       	ldi	r24, 0x79	; 121
   1cc76:	97 e4       	ldi	r25, 0x47	; 71
   1cc78:	1f 92       	push	r1
   1cc7a:	9f 93       	push	r25
   1cc7c:	8f 93       	push	r24
   1cc7e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1cc82:	40 91 70 1c 	lds	r20, 0x1C70	; 0x801c70 <__iob>
   1cc86:	50 91 71 1c 	lds	r21, 0x1C71	; 0x801c71 <__iob+0x1>
   1cc8a:	6e e7       	ldi	r22, 0x7E	; 126
   1cc8c:	70 e0       	ldi	r23, 0x00	; 0
   1cc8e:	ce 01       	movw	r24, r28
   1cc90:	01 96       	adiw	r24, 0x01	; 1
   1cc92:	0e 94 e2 78 	call	0xf1c4	; 0xf1c4 <fgets>
   1cc96:	42 e3       	ldi	r20, 0x32	; 50
   1cc98:	50 e0       	ldi	r21, 0x00	; 0
   1cc9a:	be 01       	movw	r22, r28
   1cc9c:	6f 57       	subi	r22, 0x7F	; 127
   1cc9e:	7f 4f       	sbci	r23, 0xFF	; 255
   1cca0:	ce 01       	movw	r24, r28
   1cca2:	01 96       	adiw	r24, 0x01	; 1
   1cca4:	0e 94 5b 31 	call	0x62b6	; 0x62b6 <split_args>
   1cca8:	8c 01       	movw	r16, r24
   1ccaa:	cf 57       	subi	r28, 0x7F	; 127
   1ccac:	df 4f       	sbci	r29, 0xFF	; 255
   1ccae:	e8 80       	ld	r14, Y
   1ccb0:	f9 80       	ldd	r15, Y+1	; 0x01
   1ccb2:	c1 58       	subi	r28, 0x81	; 129
   1ccb4:	d0 40       	sbci	r29, 0x00	; 0
   1ccb6:	0f 90       	pop	r0
   1ccb8:	0f 90       	pop	r0
   1ccba:	0f 90       	pop	r0
   1ccbc:	e1 14       	cp	r14, r1
   1ccbe:	f1 04       	cpc	r15, r1
   1ccc0:	09 f4       	brne	.+2      	; 0x1ccc4 <task+0x6c>
   1ccc2:	78 c0       	rjmp	.+240    	; 0x1cdb4 <task+0x15c>
   1ccc4:	9c 01       	movw	r18, r24
   1ccc6:	41 e0       	ldi	r20, 0x01	; 1
   1ccc8:	50 e0       	ldi	r21, 0x00	; 0
   1ccca:	60 ef       	ldi	r22, 0xF0	; 240
   1cccc:	76 e1       	ldi	r23, 0x16	; 22
   1ccce:	c7 01       	movw	r24, r14
   1ccd0:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   1ccd4:	89 2b       	or	r24, r25
   1ccd6:	11 f0       	breq	.+4      	; 0x1ccdc <task+0x84>
   1ccd8:	40 df       	rcall	.-384    	; 0x1cb5a <delay_tests>
   1ccda:	6c c0       	rjmp	.+216    	; 0x1cdb4 <task+0x15c>
   1ccdc:	98 01       	movw	r18, r16
   1ccde:	41 e0       	ldi	r20, 0x01	; 1
   1cce0:	50 e0       	ldi	r21, 0x00	; 0
   1cce2:	6c ef       	ldi	r22, 0xFC	; 252
   1cce4:	76 e1       	ldi	r23, 0x16	; 22
   1cce6:	c7 01       	movw	r24, r14
   1cce8:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   1ccec:	89 2b       	or	r24, r25
   1ccee:	61 f4       	brne	.+24     	; 0x1cd08 <task+0xb0>
   1ccf0:	98 01       	movw	r18, r16
   1ccf2:	41 e0       	ldi	r20, 0x01	; 1
   1ccf4:	50 e0       	ldi	r21, 0x00	; 0
   1ccf6:	61 e0       	ldi	r22, 0x01	; 1
   1ccf8:	77 e1       	ldi	r23, 0x17	; 23
   1ccfa:	c7 01       	movw	r24, r14
   1ccfc:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   1cd00:	89 2b       	or	r24, r25
   1cd02:	29 f0       	breq	.+10     	; 0x1cd0e <task+0xb6>
   1cd04:	0e 94 fe 39 	call	0x73fc	; 0x73fc <setdate>
   1cd08:	0e 94 17 3c 	call	0x782e	; 0x782e <display_clock>
   1cd0c:	53 c0       	rjmp	.+166    	; 0x1cdb4 <task+0x15c>
   1cd0e:	98 01       	movw	r18, r16
   1cd10:	41 e0       	ldi	r20, 0x01	; 1
   1cd12:	50 e0       	ldi	r21, 0x00	; 0
   1cd14:	69 e0       	ldi	r22, 0x09	; 9
   1cd16:	77 e1       	ldi	r23, 0x17	; 23
   1cd18:	c7 01       	movw	r24, r14
   1cd1a:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   1cd1e:	89 2b       	or	r24, r25
   1cd20:	19 f0       	breq	.+6      	; 0x1cd28 <task+0xd0>
   1cd22:	0e 94 fb 28 	call	0x51f6	; 0x51f6 <PrintFree>
   1cd26:	46 c0       	rjmp	.+140    	; 0x1cdb4 <task+0x15c>
   1cd28:	98 01       	movw	r18, r16
   1cd2a:	41 e0       	ldi	r20, 0x01	; 1
   1cd2c:	50 e0       	ldi	r21, 0x00	; 0
   1cd2e:	69 e0       	ldi	r22, 0x09	; 9
   1cd30:	76 e1       	ldi	r23, 0x16	; 22
   1cd32:	c7 01       	movw	r24, r14
   1cd34:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   1cd38:	89 2b       	or	r24, r25
   1cd3a:	11 f0       	breq	.+4      	; 0x1cd40 <task+0xe8>
   1cd3c:	71 df       	rcall	.-286    	; 0x1cc20 <help>
   1cd3e:	3a c0       	rjmp	.+116    	; 0x1cdb4 <task+0x15c>
   1cd40:	98 01       	movw	r18, r16
   1cd42:	41 e0       	ldi	r20, 0x01	; 1
   1cd44:	50 e0       	ldi	r21, 0x00	; 0
   1cd46:	6f e0       	ldi	r22, 0x0F	; 15
   1cd48:	76 e1       	ldi	r23, 0x16	; 22
   1cd4a:	c7 01       	movw	r24, r14
   1cd4c:	0e 94 fe 30 	call	0x61fc	; 0x61fc <MATCHARGS>
   1cd50:	89 2b       	or	r24, r25
   1cd52:	a1 f7       	brne	.-24     	; 0x1cd3c <task+0xe4>
   1cd54:	be 01       	movw	r22, r28
   1cd56:	6f 57       	subi	r22, 0x7F	; 127
   1cd58:	7f 4f       	sbci	r23, 0xFF	; 255
   1cd5a:	c8 01       	movw	r24, r16
   1cd5c:	0e 94 42 97 	call	0x12e84	; 0x12e84 <gpib_tests>
   1cd60:	89 2b       	or	r24, r25
   1cd62:	19 f0       	breq	.+6      	; 0x1cd6a <task+0x112>
   1cd64:	0e 94 8e 92 	call	0x1251c	; 0x1251c <gpib_init_devices>
   1cd68:	25 c0       	rjmp	.+74     	; 0x1cdb4 <task+0x15c>
   1cd6a:	be 01       	movw	r22, r28
   1cd6c:	6f 57       	subi	r22, 0x7F	; 127
   1cd6e:	7f 4f       	sbci	r23, 0xFF	; 255
   1cd70:	c8 01       	movw	r24, r16
   1cd72:	0e 94 8e 87 	call	0x10f1c	; 0x10f1c <posix_tests>
   1cd76:	89 2b       	or	r24, r25
   1cd78:	e9 f4       	brne	.+58     	; 0x1cdb4 <task+0x15c>
   1cd7a:	be 01       	movw	r22, r28
   1cd7c:	6f 57       	subi	r22, 0x7F	; 127
   1cd7e:	7f 4f       	sbci	r23, 0xFF	; 255
   1cd80:	c8 01       	movw	r24, r16
   1cd82:	0e 94 d2 76 	call	0xeda4	; 0xeda4 <fatfs_tests>
   1cd86:	89 2b       	or	r24, r25
   1cd88:	a9 f4       	brne	.+42     	; 0x1cdb4 <task+0x15c>
   1cd8a:	be 01       	movw	r22, r28
   1cd8c:	6f 57       	subi	r22, 0x7F	; 127
   1cd8e:	7f 4f       	sbci	r23, 0xFF	; 255
   1cd90:	c8 01       	movw	r24, r16
   1cd92:	74 dd       	rcall	.-1304   	; 0x1c87c <lif_tests>
   1cd94:	89 2b       	or	r24, r25
   1cd96:	71 f4       	brne	.+28     	; 0x1cdb4 <task+0x15c>
   1cd98:	ff 92       	push	r15
   1cd9a:	ef 92       	push	r14
   1cd9c:	8d e6       	ldi	r24, 0x6D	; 109
   1cd9e:	97 e4       	ldi	r25, 0x47	; 71
   1cda0:	1f 92       	push	r1
   1cda2:	9f 93       	push	r25
   1cda4:	8f 93       	push	r24
   1cda6:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1cdaa:	0f 90       	pop	r0
   1cdac:	0f 90       	pop	r0
   1cdae:	0f 90       	pop	r0
   1cdb0:	0f 90       	pop	r0
   1cdb2:	0f 90       	pop	r0
   1cdb4:	cc 51       	subi	r28, 0x1C	; 28
   1cdb6:	df 4f       	sbci	r29, 0xFF	; 255
   1cdb8:	e6 e0       	ldi	r30, 0x06	; 6
   1cdba:	0b c2       	rjmp	.+1046   	; 0x1d1d2 <__epilogue_restores__+0x18>

0001cdbc <main>:
   1cdbc:	a8 e0       	ldi	r26, 0x08	; 8
   1cdbe:	b0 e0       	ldi	r27, 0x00	; 0
   1cdc0:	e3 ee       	ldi	r30, 0xE3	; 227
   1cdc2:	f6 ee       	ldi	r31, 0xE6	; 230
   1cdc4:	e9 c1       	rjmp	.+978    	; 0x1d198 <__prologue_saves__+0x16>
   1cdc6:	0e 94 be 8b 	call	0x1177c	; 0x1177c <gpib_bus_init>
   1cdca:	0e 94 7a 34 	call	0x68f4	; 0x68f4 <init_timers>
   1cdce:	40 e0       	ldi	r20, 0x00	; 0
   1cdd0:	52 ec       	ldi	r21, 0xC2	; 194
   1cdd2:	61 e0       	ldi	r22, 0x01	; 1
   1cdd4:	70 e0       	ldi	r23, 0x00	; 0
   1cdd6:	80 e0       	ldi	r24, 0x00	; 0
   1cdd8:	0e 94 00 2b 	call	0x5600	; 0x5600 <uart_init>
   1cddc:	06 2f       	mov	r16, r22
   1cdde:	f7 2e       	mov	r15, r23
   1cde0:	e8 2e       	mov	r14, r24
   1cde2:	d9 2e       	mov	r13, r25
   1cde4:	68 ec       	ldi	r22, 0xC8	; 200
   1cde6:	70 e0       	ldi	r23, 0x00	; 0
   1cde8:	80 e0       	ldi	r24, 0x00	; 0
   1cdea:	90 e0       	ldi	r25, 0x00	; 0
   1cdec:	0e 94 1e 2a 	call	0x543c	; 0x543c <delayms>
   1cdf0:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <sep>
   1cdf4:	86 e6       	ldi	r24, 0x66	; 102
   1cdf6:	97 e4       	ldi	r25, 0x47	; 71
   1cdf8:	1f 92       	push	r1
   1cdfa:	9f 93       	push	r25
   1cdfc:	8f 93       	push	r24
   1cdfe:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1ce02:	11 e0       	ldi	r17, 0x01	; 1
   1ce04:	1f 93       	push	r17
   1ce06:	81 e3       	ldi	r24, 0x31	; 49
   1ce08:	8f 93       	push	r24
   1ce0a:	8d e2       	ldi	r24, 0x2D	; 45
   1ce0c:	8f 93       	push	r24
   1ce0e:	1f 92       	push	r1
   1ce10:	85 e5       	ldi	r24, 0x55	; 85
   1ce12:	97 e4       	ldi	r25, 0x47	; 71
   1ce14:	1f 92       	push	r1
   1ce16:	9f 93       	push	r25
   1ce18:	8f 93       	push	r24
   1ce1a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1ce1e:	df 92       	push	r13
   1ce20:	ef 92       	push	r14
   1ce22:	ff 92       	push	r15
   1ce24:	0f 93       	push	r16
   1ce26:	1f 92       	push	r1
   1ce28:	1f 93       	push	r17
   1ce2a:	82 ec       	ldi	r24, 0xC2	; 194
   1ce2c:	8f 93       	push	r24
   1ce2e:	1f 92       	push	r1
   1ce30:	8e e2       	ldi	r24, 0x2E	; 46
   1ce32:	97 e4       	ldi	r25, 0x47	; 71
   1ce34:	1f 92       	push	r1
   1ce36:	9f 93       	push	r25
   1ce38:	8f 93       	push	r24
   1ce3a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1ce3e:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <sep>
   1ce42:	8f e0       	ldi	r24, 0x0F	; 15
   1ce44:	97 e4       	ldi	r25, 0x47	; 71
   1ce46:	1f 92       	push	r1
   1ce48:	9f 93       	push	r25
   1ce4a:	8f 93       	push	r24
   1ce4c:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1ce50:	82 ef       	ldi	r24, 0xF2	; 242
   1ce52:	96 e4       	ldi	r25, 0x46	; 70
   1ce54:	1f 92       	push	r1
   1ce56:	9f 93       	push	r25
   1ce58:	8f 93       	push	r24
   1ce5a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1ce5e:	82 ee       	ldi	r24, 0xE2	; 226
   1ce60:	96 e4       	ldi	r25, 0x46	; 70
   1ce62:	1f 92       	push	r1
   1ce64:	9f 93       	push	r25
   1ce66:	8f 93       	push	r24
   1ce68:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1ce6c:	8b eb       	ldi	r24, 0xBB	; 187
   1ce6e:	96 e4       	ldi	r25, 0x46	; 70
   1ce70:	1f 92       	push	r1
   1ce72:	9f 93       	push	r25
   1ce74:	8f 93       	push	r24
   1ce76:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1ce7a:	0f b6       	in	r0, 0x3f	; 63
   1ce7c:	f8 94       	cli
   1ce7e:	de bf       	out	0x3e, r29	; 62
   1ce80:	0f be       	out	0x3f, r0	; 63
   1ce82:	cd bf       	out	0x3d, r28	; 61
   1ce84:	8d e3       	ldi	r24, 0x3D	; 61
   1ce86:	96 e1       	ldi	r25, 0x16	; 22
   1ce88:	9f 93       	push	r25
   1ce8a:	8f 93       	push	r24
   1ce8c:	81 ea       	ldi	r24, 0xA1	; 161
   1ce8e:	96 e4       	ldi	r25, 0x46	; 70
   1ce90:	1f 92       	push	r1
   1ce92:	9f 93       	push	r25
   1ce94:	8f 93       	push	r24
   1ce96:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1ce9a:	81 e6       	ldi	r24, 0x61	; 97
   1ce9c:	96 e1       	ldi	r25, 0x16	; 22
   1ce9e:	9f 93       	push	r25
   1cea0:	8f 93       	push	r24
   1cea2:	87 e8       	ldi	r24, 0x87	; 135
   1cea4:	96 e4       	ldi	r25, 0x46	; 70
   1cea6:	1f 92       	push	r1
   1cea8:	9f 93       	push	r25
   1ceaa:	8f 93       	push	r24
   1ceac:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1ceb0:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <sep>
   1ceb4:	0e 94 fb 28 	call	0x51f6	; 0x51f6 <PrintFree>
   1ceb8:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <sep>
   1cebc:	68 ec       	ldi	r22, 0xC8	; 200
   1cebe:	70 e0       	ldi	r23, 0x00	; 0
   1cec0:	80 e0       	ldi	r24, 0x00	; 0
   1cec2:	90 e0       	ldi	r25, 0x00	; 0
   1cec4:	0e 94 1e 2a 	call	0x543c	; 0x543c <delayms>
   1cec8:	81 e7       	ldi	r24, 0x71	; 113
   1ceca:	96 e4       	ldi	r25, 0x46	; 70
   1cecc:	1f 92       	push	r1
   1cece:	9f 93       	push	r25
   1ced0:	8f 93       	push	r24
   1ced2:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1ced6:	4b e0       	ldi	r20, 0x0B	; 11
   1ced8:	50 e0       	ldi	r21, 0x00	; 0
   1ceda:	60 e2       	ldi	r22, 0x20	; 32
   1cedc:	71 ea       	ldi	r23, 0xA1	; 161
   1cede:	87 e0       	ldi	r24, 0x07	; 7
   1cee0:	90 e0       	ldi	r25, 0x00	; 0
   1cee2:	0e 94 77 28 	call	0x50ee	; 0x50ee <spi_init>
   1cee6:	8b e5       	ldi	r24, 0x5B	; 91
   1cee8:	96 e4       	ldi	r25, 0x46	; 70
   1ceea:	1f 92       	push	r1
   1ceec:	9f 93       	push	r25
   1ceee:	8f 93       	push	r24
   1cef0:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1cef4:	6a e2       	ldi	r22, 0x2A	; 42
   1cef6:	81 e0       	ldi	r24, 0x01	; 1
   1cef8:	0e 94 1d 2d 	call	0x5a3a	; 0x5a3a <TWI_Init>
   1cefc:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <sep>
   1cf00:	0e 94 37 34 	call	0x686e	; 0x686e <clock_clear>
   1cf04:	8c e4       	ldi	r24, 0x4C	; 76
   1cf06:	96 e4       	ldi	r25, 0x46	; 70
   1cf08:	1f 92       	push	r1
   1cf0a:	9f 93       	push	r25
   1cf0c:	8f 93       	push	r24
   1cf0e:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1cf12:	be 01       	movw	r22, r28
   1cf14:	6f 5f       	subi	r22, 0xFF	; 255
   1cf16:	7f 4f       	sbci	r23, 0xFF	; 255
   1cf18:	80 e0       	ldi	r24, 0x00	; 0
   1cf1a:	90 e0       	ldi	r25, 0x00	; 0
   1cf1c:	0e 94 d2 34 	call	0x69a4	; 0x69a4 <clock_getres>
   1cf20:	88 85       	ldd	r24, Y+8	; 0x08
   1cf22:	8f 93       	push	r24
   1cf24:	8f 81       	ldd	r24, Y+7	; 0x07
   1cf26:	8f 93       	push	r24
   1cf28:	8e 81       	ldd	r24, Y+6	; 0x06
   1cf2a:	8f 93       	push	r24
   1cf2c:	8d 81       	ldd	r24, Y+5	; 0x05
   1cf2e:	8f 93       	push	r24
   1cf30:	8f e2       	ldi	r24, 0x2F	; 47
   1cf32:	96 e4       	ldi	r25, 0x46	; 70
   1cf34:	1f 92       	push	r1
   1cf36:	9f 93       	push	r25
   1cf38:	8f 93       	push	r24
   1cf3a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1cf3e:	8c e2       	ldi	r24, 0x2C	; 44
   1cf40:	91 e0       	ldi	r25, 0x01	; 1
   1cf42:	0e 94 a0 3b 	call	0x7740	; 0x7740 <initialize_clock>
   1cf46:	0e 94 17 3c 	call	0x782e	; 0x782e <display_clock>
   1cf4a:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <sep>
   1cf4e:	81 e0       	ldi	r24, 0x01	; 1
   1cf50:	90 e0       	ldi	r25, 0x00	; 0
   1cf52:	0e 94 0b 72 	call	0xe416	; 0xe416 <mmc_init>
   1cf56:	0e 94 be 8b 	call	0x1177c	; 0x1177c <gpib_bus_init>
   1cf5a:	88 e1       	ldi	r24, 0x18	; 24
   1cf5c:	96 e4       	ldi	r25, 0x46	; 70
   1cf5e:	1f 92       	push	r1
   1cf60:	9f 93       	push	r25
   1cf62:	8f 93       	push	r24
   1cf64:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1cf68:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <sep>
   1cf6c:	0e 94 4e b2 	call	0x1649c	; 0x1649c <printer_init>
   1cf70:	85 e0       	ldi	r24, 0x05	; 5
   1cf72:	96 e4       	ldi	r25, 0x46	; 70
   1cf74:	1f 92       	push	r1
   1cf76:	9f 93       	push	r25
   1cf78:	8f 93       	push	r24
   1cf7a:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1cf7e:	0f b6       	in	r0, 0x3f	; 63
   1cf80:	f8 94       	cli
   1cf82:	de bf       	out	0x3e, r29	; 62
   1cf84:	0f be       	out	0x3f, r0	; 63
   1cf86:	cd bf       	out	0x3d, r28	; 61
   1cf88:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <sep>
   1cf8c:	83 ef       	ldi	r24, 0xF3	; 243
   1cf8e:	95 e4       	ldi	r25, 0x45	; 69
   1cf90:	1f 92       	push	r1
   1cf92:	9f 93       	push	r25
   1cf94:	8f 93       	push	r24
   1cf96:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1cf9a:	0e 94 ce 89 	call	0x1139c	; 0x1139c <gpib_timer_init>
   1cf9e:	8d ed       	ldi	r24, 0xDD	; 221
   1cfa0:	95 e4       	ldi	r25, 0x45	; 69
   1cfa2:	1f 92       	push	r1
   1cfa4:	9f 93       	push	r25
   1cfa6:	8f 93       	push	r24
   1cfa8:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1cfac:	0e 94 d7 91 	call	0x123ae	; 0x123ae <gpib_file_init>
   1cfb0:	88 ec       	ldi	r24, 0xC8	; 200
   1cfb2:	95 e4       	ldi	r25, 0x45	; 69
   1cfb4:	1f 92       	push	r1
   1cfb6:	9f 93       	push	r25
   1cfb8:	8f 93       	push	r24
   1cfba:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1cfbe:	0e 94 e6 8b 	call	0x117cc	; 0x117cc <gpib_state_init>
   1cfc2:	82 eb       	ldi	r24, 0xB2	; 178
   1cfc4:	95 e4       	ldi	r25, 0x45	; 69
   1cfc6:	1f 92       	push	r1
   1cfc8:	9f 93       	push	r25
   1cfca:	8f 93       	push	r24
   1cfcc:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1cfd0:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <sep>
   1cfd4:	0e 94 20 c2 	call	0x18440	; 0x18440 <display_Config>
   1cfd8:	0e 94 7a c4 	call	0x188f4	; 0x188f4 <format_drives>
   1cfdc:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <sep>
   1cfe0:	0e 94 25 c1 	call	0x1824a	; 0x1824a <display_Addresses>
   1cfe4:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <sep>
   1cfe8:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <debuglevel+0x1>
   1cfec:	8f 93       	push	r24
   1cfee:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <debuglevel>
   1cff2:	8f 93       	push	r24
   1cff4:	8c e9       	ldi	r24, 0x9C	; 156
   1cff6:	95 e4       	ldi	r25, 0x45	; 69
   1cff8:	1f 92       	push	r1
   1cffa:	9f 93       	push	r25
   1cffc:	8f 93       	push	r24
   1cffe:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1d002:	0e 94 d4 2f 	call	0x5fa8	; 0x5fa8 <sep>
   1d006:	88 e8       	ldi	r24, 0x88	; 136
   1d008:	95 e4       	ldi	r25, 0x45	; 69
   1d00a:	1f 92       	push	r1
   1d00c:	9f 93       	push	r25
   1d00e:	8f 93       	push	r24
   1d010:	0e 94 c2 44 	call	0x8984	; 0x8984 <printf_P>
   1d014:	0f b6       	in	r0, 0x3f	; 63
   1d016:	f8 94       	cli
   1d018:	de bf       	out	0x3e, r29	; 62
   1d01a:	0f be       	out	0x3f, r0	; 63
   1d01c:	cd bf       	out	0x3d, r28	; 61
   1d01e:	81 e0       	ldi	r24, 0x01	; 1
   1d020:	1b de       	rcall	.-970    	; 0x1cc58 <task>
   1d022:	fd cf       	rjmp	.-6      	; 0x1d01e <main+0x262>

0001d024 <__mulsi3>:
   1d024:	db 01       	movw	r26, r22
   1d026:	8f 93       	push	r24
   1d028:	9f 93       	push	r25
   1d02a:	8b d0       	rcall	.+278    	; 0x1d142 <__muluhisi3>
   1d02c:	bf 91       	pop	r27
   1d02e:	af 91       	pop	r26
   1d030:	a2 9f       	mul	r26, r18
   1d032:	80 0d       	add	r24, r0
   1d034:	91 1d       	adc	r25, r1
   1d036:	a3 9f       	mul	r26, r19
   1d038:	90 0d       	add	r25, r0
   1d03a:	b2 9f       	mul	r27, r18
   1d03c:	90 0d       	add	r25, r0
   1d03e:	11 24       	eor	r1, r1
   1d040:	08 95       	ret

0001d042 <__udivmodqi4>:
   1d042:	99 1b       	sub	r25, r25
   1d044:	79 e0       	ldi	r23, 0x09	; 9
   1d046:	04 c0       	rjmp	.+8      	; 0x1d050 <__udivmodqi4_ep>

0001d048 <__udivmodqi4_loop>:
   1d048:	99 1f       	adc	r25, r25
   1d04a:	96 17       	cp	r25, r22
   1d04c:	08 f0       	brcs	.+2      	; 0x1d050 <__udivmodqi4_ep>
   1d04e:	96 1b       	sub	r25, r22

0001d050 <__udivmodqi4_ep>:
   1d050:	88 1f       	adc	r24, r24
   1d052:	7a 95       	dec	r23
   1d054:	c9 f7       	brne	.-14     	; 0x1d048 <__udivmodqi4_loop>
   1d056:	80 95       	com	r24
   1d058:	08 95       	ret

0001d05a <__udivmodhi4>:
   1d05a:	aa 1b       	sub	r26, r26
   1d05c:	bb 1b       	sub	r27, r27
   1d05e:	51 e1       	ldi	r21, 0x11	; 17
   1d060:	07 c0       	rjmp	.+14     	; 0x1d070 <__udivmodhi4_ep>

0001d062 <__udivmodhi4_loop>:
   1d062:	aa 1f       	adc	r26, r26
   1d064:	bb 1f       	adc	r27, r27
   1d066:	a6 17       	cp	r26, r22
   1d068:	b7 07       	cpc	r27, r23
   1d06a:	10 f0       	brcs	.+4      	; 0x1d070 <__udivmodhi4_ep>
   1d06c:	a6 1b       	sub	r26, r22
   1d06e:	b7 0b       	sbc	r27, r23

0001d070 <__udivmodhi4_ep>:
   1d070:	88 1f       	adc	r24, r24
   1d072:	99 1f       	adc	r25, r25
   1d074:	5a 95       	dec	r21
   1d076:	a9 f7       	brne	.-22     	; 0x1d062 <__udivmodhi4_loop>
   1d078:	80 95       	com	r24
   1d07a:	90 95       	com	r25
   1d07c:	bc 01       	movw	r22, r24
   1d07e:	cd 01       	movw	r24, r26
   1d080:	08 95       	ret

0001d082 <__divmodhi4>:
   1d082:	97 fb       	bst	r25, 7
   1d084:	07 2e       	mov	r0, r23
   1d086:	16 f4       	brtc	.+4      	; 0x1d08c <__divmodhi4+0xa>
   1d088:	00 94       	com	r0
   1d08a:	06 d0       	rcall	.+12     	; 0x1d098 <__divmodhi4_neg1>
   1d08c:	77 fd       	sbrc	r23, 7
   1d08e:	08 d0       	rcall	.+16     	; 0x1d0a0 <__divmodhi4_neg2>
   1d090:	e4 df       	rcall	.-56     	; 0x1d05a <__udivmodhi4>
   1d092:	07 fc       	sbrc	r0, 7
   1d094:	05 d0       	rcall	.+10     	; 0x1d0a0 <__divmodhi4_neg2>
   1d096:	3e f4       	brtc	.+14     	; 0x1d0a6 <__divmodhi4_exit>

0001d098 <__divmodhi4_neg1>:
   1d098:	90 95       	com	r25
   1d09a:	81 95       	neg	r24
   1d09c:	9f 4f       	sbci	r25, 0xFF	; 255
   1d09e:	08 95       	ret

0001d0a0 <__divmodhi4_neg2>:
   1d0a0:	70 95       	com	r23
   1d0a2:	61 95       	neg	r22
   1d0a4:	7f 4f       	sbci	r23, 0xFF	; 255

0001d0a6 <__divmodhi4_exit>:
   1d0a6:	08 95       	ret

0001d0a8 <__udivmodsi4>:
   1d0a8:	a1 e2       	ldi	r26, 0x21	; 33
   1d0aa:	1a 2e       	mov	r1, r26
   1d0ac:	aa 1b       	sub	r26, r26
   1d0ae:	bb 1b       	sub	r27, r27
   1d0b0:	fd 01       	movw	r30, r26
   1d0b2:	0d c0       	rjmp	.+26     	; 0x1d0ce <__udivmodsi4_ep>

0001d0b4 <__udivmodsi4_loop>:
   1d0b4:	aa 1f       	adc	r26, r26
   1d0b6:	bb 1f       	adc	r27, r27
   1d0b8:	ee 1f       	adc	r30, r30
   1d0ba:	ff 1f       	adc	r31, r31
   1d0bc:	a2 17       	cp	r26, r18
   1d0be:	b3 07       	cpc	r27, r19
   1d0c0:	e4 07       	cpc	r30, r20
   1d0c2:	f5 07       	cpc	r31, r21
   1d0c4:	20 f0       	brcs	.+8      	; 0x1d0ce <__udivmodsi4_ep>
   1d0c6:	a2 1b       	sub	r26, r18
   1d0c8:	b3 0b       	sbc	r27, r19
   1d0ca:	e4 0b       	sbc	r30, r20
   1d0cc:	f5 0b       	sbc	r31, r21

0001d0ce <__udivmodsi4_ep>:
   1d0ce:	66 1f       	adc	r22, r22
   1d0d0:	77 1f       	adc	r23, r23
   1d0d2:	88 1f       	adc	r24, r24
   1d0d4:	99 1f       	adc	r25, r25
   1d0d6:	1a 94       	dec	r1
   1d0d8:	69 f7       	brne	.-38     	; 0x1d0b4 <__udivmodsi4_loop>
   1d0da:	60 95       	com	r22
   1d0dc:	70 95       	com	r23
   1d0de:	80 95       	com	r24
   1d0e0:	90 95       	com	r25
   1d0e2:	9b 01       	movw	r18, r22
   1d0e4:	ac 01       	movw	r20, r24
   1d0e6:	bd 01       	movw	r22, r26
   1d0e8:	cf 01       	movw	r24, r30
   1d0ea:	08 95       	ret

0001d0ec <__divmodsi4>:
   1d0ec:	05 2e       	mov	r0, r21
   1d0ee:	97 fb       	bst	r25, 7
   1d0f0:	16 f4       	brtc	.+4      	; 0x1d0f6 <__divmodsi4+0xa>
   1d0f2:	00 94       	com	r0
   1d0f4:	0f d0       	rcall	.+30     	; 0x1d114 <__negsi2>
   1d0f6:	57 fd       	sbrc	r21, 7
   1d0f8:	05 d0       	rcall	.+10     	; 0x1d104 <__divmodsi4_neg2>
   1d0fa:	d6 df       	rcall	.-84     	; 0x1d0a8 <__udivmodsi4>
   1d0fc:	07 fc       	sbrc	r0, 7
   1d0fe:	02 d0       	rcall	.+4      	; 0x1d104 <__divmodsi4_neg2>
   1d100:	46 f4       	brtc	.+16     	; 0x1d112 <__divmodsi4_exit>
   1d102:	08 c0       	rjmp	.+16     	; 0x1d114 <__negsi2>

0001d104 <__divmodsi4_neg2>:
   1d104:	50 95       	com	r21
   1d106:	40 95       	com	r20
   1d108:	30 95       	com	r19
   1d10a:	21 95       	neg	r18
   1d10c:	3f 4f       	sbci	r19, 0xFF	; 255
   1d10e:	4f 4f       	sbci	r20, 0xFF	; 255
   1d110:	5f 4f       	sbci	r21, 0xFF	; 255

0001d112 <__divmodsi4_exit>:
   1d112:	08 95       	ret

0001d114 <__negsi2>:
   1d114:	90 95       	com	r25
   1d116:	80 95       	com	r24
   1d118:	70 95       	com	r23
   1d11a:	61 95       	neg	r22
   1d11c:	7f 4f       	sbci	r23, 0xFF	; 255
   1d11e:	8f 4f       	sbci	r24, 0xFF	; 255
   1d120:	9f 4f       	sbci	r25, 0xFF	; 255
   1d122:	08 95       	ret

0001d124 <__tablejump2__>:
   1d124:	ee 0f       	add	r30, r30
   1d126:	ff 1f       	adc	r31, r31
   1d128:	00 24       	eor	r0, r0
   1d12a:	00 1c       	adc	r0, r0
   1d12c:	0b be       	out	0x3b, r0	; 59
   1d12e:	07 90       	elpm	r0, Z+
   1d130:	f6 91       	elpm	r31, Z
   1d132:	e0 2d       	mov	r30, r0
   1d134:	09 94       	ijmp

0001d136 <__usmulhisi3>:
   1d136:	6f d0       	rcall	.+222    	; 0x1d216 <__umulhisi3>

0001d138 <__usmulhisi3_tail>:
   1d138:	b7 ff       	sbrs	r27, 7
   1d13a:	08 95       	ret
   1d13c:	82 1b       	sub	r24, r18
   1d13e:	93 0b       	sbc	r25, r19
   1d140:	08 95       	ret

0001d142 <__muluhisi3>:
   1d142:	69 d0       	rcall	.+210    	; 0x1d216 <__umulhisi3>
   1d144:	a5 9f       	mul	r26, r21
   1d146:	90 0d       	add	r25, r0
   1d148:	b4 9f       	mul	r27, r20
   1d14a:	90 0d       	add	r25, r0
   1d14c:	a4 9f       	mul	r26, r20
   1d14e:	80 0d       	add	r24, r0
   1d150:	91 1d       	adc	r25, r1
   1d152:	11 24       	eor	r1, r1
   1d154:	08 95       	ret

0001d156 <__mulshisi3>:
   1d156:	b7 ff       	sbrs	r27, 7
   1d158:	f4 cf       	rjmp	.-24     	; 0x1d142 <__muluhisi3>

0001d15a <__mulohisi3>:
   1d15a:	f3 df       	rcall	.-26     	; 0x1d142 <__muluhisi3>
   1d15c:	82 1b       	sub	r24, r18
   1d15e:	93 0b       	sbc	r25, r19
   1d160:	08 95       	ret

0001d162 <__negdi2>:
   1d162:	60 95       	com	r22
   1d164:	70 95       	com	r23
   1d166:	80 95       	com	r24
   1d168:	90 95       	com	r25
   1d16a:	30 95       	com	r19
   1d16c:	40 95       	com	r20
   1d16e:	50 95       	com	r21
   1d170:	21 95       	neg	r18
   1d172:	3f 4f       	sbci	r19, 0xFF	; 255
   1d174:	4f 4f       	sbci	r20, 0xFF	; 255
   1d176:	5f 4f       	sbci	r21, 0xFF	; 255
   1d178:	6f 4f       	sbci	r22, 0xFF	; 255
   1d17a:	7f 4f       	sbci	r23, 0xFF	; 255
   1d17c:	8f 4f       	sbci	r24, 0xFF	; 255
   1d17e:	9f 4f       	sbci	r25, 0xFF	; 255
   1d180:	08 95       	ret

0001d182 <__prologue_saves__>:
   1d182:	2f 92       	push	r2
   1d184:	3f 92       	push	r3
   1d186:	4f 92       	push	r4
   1d188:	5f 92       	push	r5
   1d18a:	6f 92       	push	r6
   1d18c:	7f 92       	push	r7
   1d18e:	8f 92       	push	r8
   1d190:	9f 92       	push	r9
   1d192:	af 92       	push	r10
   1d194:	bf 92       	push	r11
   1d196:	cf 92       	push	r12
   1d198:	df 92       	push	r13
   1d19a:	ef 92       	push	r14
   1d19c:	ff 92       	push	r15
   1d19e:	0f 93       	push	r16
   1d1a0:	1f 93       	push	r17
   1d1a2:	cf 93       	push	r28
   1d1a4:	df 93       	push	r29
   1d1a6:	cd b7       	in	r28, 0x3d	; 61
   1d1a8:	de b7       	in	r29, 0x3e	; 62
   1d1aa:	ca 1b       	sub	r28, r26
   1d1ac:	db 0b       	sbc	r29, r27
   1d1ae:	0f b6       	in	r0, 0x3f	; 63
   1d1b0:	f8 94       	cli
   1d1b2:	de bf       	out	0x3e, r29	; 62
   1d1b4:	0f be       	out	0x3f, r0	; 63
   1d1b6:	cd bf       	out	0x3d, r28	; 61
   1d1b8:	09 94       	ijmp

0001d1ba <__epilogue_restores__>:
   1d1ba:	2a 88       	ldd	r2, Y+18	; 0x12
   1d1bc:	39 88       	ldd	r3, Y+17	; 0x11
   1d1be:	48 88       	ldd	r4, Y+16	; 0x10
   1d1c0:	5f 84       	ldd	r5, Y+15	; 0x0f
   1d1c2:	6e 84       	ldd	r6, Y+14	; 0x0e
   1d1c4:	7d 84       	ldd	r7, Y+13	; 0x0d
   1d1c6:	8c 84       	ldd	r8, Y+12	; 0x0c
   1d1c8:	9b 84       	ldd	r9, Y+11	; 0x0b
   1d1ca:	aa 84       	ldd	r10, Y+10	; 0x0a
   1d1cc:	b9 84       	ldd	r11, Y+9	; 0x09
   1d1ce:	c8 84       	ldd	r12, Y+8	; 0x08
   1d1d0:	df 80       	ldd	r13, Y+7	; 0x07
   1d1d2:	ee 80       	ldd	r14, Y+6	; 0x06
   1d1d4:	fd 80       	ldd	r15, Y+5	; 0x05
   1d1d6:	0c 81       	ldd	r16, Y+4	; 0x04
   1d1d8:	1b 81       	ldd	r17, Y+3	; 0x03
   1d1da:	aa 81       	ldd	r26, Y+2	; 0x02
   1d1dc:	b9 81       	ldd	r27, Y+1	; 0x01
   1d1de:	ce 0f       	add	r28, r30
   1d1e0:	d1 1d       	adc	r29, r1
   1d1e2:	0f b6       	in	r0, 0x3f	; 63
   1d1e4:	f8 94       	cli
   1d1e6:	de bf       	out	0x3e, r29	; 62
   1d1e8:	0f be       	out	0x3f, r0	; 63
   1d1ea:	cd bf       	out	0x3d, r28	; 61
   1d1ec:	ed 01       	movw	r28, r26
   1d1ee:	08 95       	ret

0001d1f0 <__xload_1>:
   1d1f0:	57 fd       	sbrc	r21, 7
   1d1f2:	03 c0       	rjmp	.+6      	; 0x1d1fa <__xload_1+0xa>
   1d1f4:	5b bf       	out	0x3b, r21	; 59
   1d1f6:	67 91       	elpm	r22, Z+
   1d1f8:	08 95       	ret
   1d1fa:	60 81       	ld	r22, Z
   1d1fc:	08 95       	ret

0001d1fe <__cmpdi2_s8>:
   1d1fe:	00 24       	eor	r0, r0
   1d200:	a7 fd       	sbrc	r26, 7
   1d202:	00 94       	com	r0
   1d204:	2a 17       	cp	r18, r26
   1d206:	30 05       	cpc	r19, r0
   1d208:	40 05       	cpc	r20, r0
   1d20a:	50 05       	cpc	r21, r0
   1d20c:	60 05       	cpc	r22, r0
   1d20e:	70 05       	cpc	r23, r0
   1d210:	80 05       	cpc	r24, r0
   1d212:	90 05       	cpc	r25, r0
   1d214:	08 95       	ret

0001d216 <__umulhisi3>:
   1d216:	a2 9f       	mul	r26, r18
   1d218:	b0 01       	movw	r22, r0
   1d21a:	b3 9f       	mul	r27, r19
   1d21c:	c0 01       	movw	r24, r0
   1d21e:	a3 9f       	mul	r26, r19
   1d220:	70 0d       	add	r23, r0
   1d222:	81 1d       	adc	r24, r1
   1d224:	11 24       	eor	r1, r1
   1d226:	91 1d       	adc	r25, r1
   1d228:	b2 9f       	mul	r27, r18
   1d22a:	70 0d       	add	r23, r0
   1d22c:	81 1d       	adc	r24, r1
   1d22e:	11 24       	eor	r1, r1
   1d230:	91 1d       	adc	r25, r1
   1d232:	08 95       	ret

0001d234 <__subsf3>:
   1d234:	50 58       	subi	r21, 0x80	; 128

0001d236 <__addsf3>:
   1d236:	bb 27       	eor	r27, r27
   1d238:	aa 27       	eor	r26, r26
   1d23a:	0e d0       	rcall	.+28     	; 0x1d258 <__addsf3x>
   1d23c:	75 c1       	rjmp	.+746    	; 0x1d528 <__fp_round>
   1d23e:	66 d1       	rcall	.+716    	; 0x1d50c <__fp_pscA>
   1d240:	30 f0       	brcs	.+12     	; 0x1d24e <__addsf3+0x18>
   1d242:	6b d1       	rcall	.+726    	; 0x1d51a <__fp_pscB>
   1d244:	20 f0       	brcs	.+8      	; 0x1d24e <__addsf3+0x18>
   1d246:	31 f4       	brne	.+12     	; 0x1d254 <__addsf3+0x1e>
   1d248:	9f 3f       	cpi	r25, 0xFF	; 255
   1d24a:	11 f4       	brne	.+4      	; 0x1d250 <__addsf3+0x1a>
   1d24c:	1e f4       	brtc	.+6      	; 0x1d254 <__addsf3+0x1e>
   1d24e:	5b c1       	rjmp	.+694    	; 0x1d506 <__fp_nan>
   1d250:	0e f4       	brtc	.+2      	; 0x1d254 <__addsf3+0x1e>
   1d252:	e0 95       	com	r30
   1d254:	e7 fb       	bst	r30, 7
   1d256:	51 c1       	rjmp	.+674    	; 0x1d4fa <__fp_inf>

0001d258 <__addsf3x>:
   1d258:	e9 2f       	mov	r30, r25
   1d25a:	77 d1       	rcall	.+750    	; 0x1d54a <__fp_split3>
   1d25c:	80 f3       	brcs	.-32     	; 0x1d23e <__addsf3+0x8>
   1d25e:	ba 17       	cp	r27, r26
   1d260:	62 07       	cpc	r22, r18
   1d262:	73 07       	cpc	r23, r19
   1d264:	84 07       	cpc	r24, r20
   1d266:	95 07       	cpc	r25, r21
   1d268:	18 f0       	brcs	.+6      	; 0x1d270 <__addsf3x+0x18>
   1d26a:	71 f4       	brne	.+28     	; 0x1d288 <__addsf3x+0x30>
   1d26c:	9e f5       	brtc	.+102    	; 0x1d2d4 <__addsf3x+0x7c>
   1d26e:	8f c1       	rjmp	.+798    	; 0x1d58e <__fp_zero>
   1d270:	0e f4       	brtc	.+2      	; 0x1d274 <__addsf3x+0x1c>
   1d272:	e0 95       	com	r30
   1d274:	0b 2e       	mov	r0, r27
   1d276:	ba 2f       	mov	r27, r26
   1d278:	a0 2d       	mov	r26, r0
   1d27a:	0b 01       	movw	r0, r22
   1d27c:	b9 01       	movw	r22, r18
   1d27e:	90 01       	movw	r18, r0
   1d280:	0c 01       	movw	r0, r24
   1d282:	ca 01       	movw	r24, r20
   1d284:	a0 01       	movw	r20, r0
   1d286:	11 24       	eor	r1, r1
   1d288:	ff 27       	eor	r31, r31
   1d28a:	59 1b       	sub	r21, r25
   1d28c:	99 f0       	breq	.+38     	; 0x1d2b4 <__addsf3x+0x5c>
   1d28e:	59 3f       	cpi	r21, 0xF9	; 249
   1d290:	50 f4       	brcc	.+20     	; 0x1d2a6 <__addsf3x+0x4e>
   1d292:	50 3e       	cpi	r21, 0xE0	; 224
   1d294:	68 f1       	brcs	.+90     	; 0x1d2f0 <__addsf3x+0x98>
   1d296:	1a 16       	cp	r1, r26
   1d298:	f0 40       	sbci	r31, 0x00	; 0
   1d29a:	a2 2f       	mov	r26, r18
   1d29c:	23 2f       	mov	r18, r19
   1d29e:	34 2f       	mov	r19, r20
   1d2a0:	44 27       	eor	r20, r20
   1d2a2:	58 5f       	subi	r21, 0xF8	; 248
   1d2a4:	f3 cf       	rjmp	.-26     	; 0x1d28c <__addsf3x+0x34>
   1d2a6:	46 95       	lsr	r20
   1d2a8:	37 95       	ror	r19
   1d2aa:	27 95       	ror	r18
   1d2ac:	a7 95       	ror	r26
   1d2ae:	f0 40       	sbci	r31, 0x00	; 0
   1d2b0:	53 95       	inc	r21
   1d2b2:	c9 f7       	brne	.-14     	; 0x1d2a6 <__addsf3x+0x4e>
   1d2b4:	7e f4       	brtc	.+30     	; 0x1d2d4 <__addsf3x+0x7c>
   1d2b6:	1f 16       	cp	r1, r31
   1d2b8:	ba 0b       	sbc	r27, r26
   1d2ba:	62 0b       	sbc	r22, r18
   1d2bc:	73 0b       	sbc	r23, r19
   1d2be:	84 0b       	sbc	r24, r20
   1d2c0:	ba f0       	brmi	.+46     	; 0x1d2f0 <__addsf3x+0x98>
   1d2c2:	91 50       	subi	r25, 0x01	; 1
   1d2c4:	a1 f0       	breq	.+40     	; 0x1d2ee <__addsf3x+0x96>
   1d2c6:	ff 0f       	add	r31, r31
   1d2c8:	bb 1f       	adc	r27, r27
   1d2ca:	66 1f       	adc	r22, r22
   1d2cc:	77 1f       	adc	r23, r23
   1d2ce:	88 1f       	adc	r24, r24
   1d2d0:	c2 f7       	brpl	.-16     	; 0x1d2c2 <__addsf3x+0x6a>
   1d2d2:	0e c0       	rjmp	.+28     	; 0x1d2f0 <__addsf3x+0x98>
   1d2d4:	ba 0f       	add	r27, r26
   1d2d6:	62 1f       	adc	r22, r18
   1d2d8:	73 1f       	adc	r23, r19
   1d2da:	84 1f       	adc	r24, r20
   1d2dc:	48 f4       	brcc	.+18     	; 0x1d2f0 <__addsf3x+0x98>
   1d2de:	87 95       	ror	r24
   1d2e0:	77 95       	ror	r23
   1d2e2:	67 95       	ror	r22
   1d2e4:	b7 95       	ror	r27
   1d2e6:	f7 95       	ror	r31
   1d2e8:	9e 3f       	cpi	r25, 0xFE	; 254
   1d2ea:	08 f0       	brcs	.+2      	; 0x1d2ee <__addsf3x+0x96>
   1d2ec:	b3 cf       	rjmp	.-154    	; 0x1d254 <__addsf3+0x1e>
   1d2ee:	93 95       	inc	r25
   1d2f0:	88 0f       	add	r24, r24
   1d2f2:	08 f0       	brcs	.+2      	; 0x1d2f6 <__addsf3x+0x9e>
   1d2f4:	99 27       	eor	r25, r25
   1d2f6:	ee 0f       	add	r30, r30
   1d2f8:	97 95       	ror	r25
   1d2fa:	87 95       	ror	r24
   1d2fc:	08 95       	ret

0001d2fe <__cmpsf2>:
   1d2fe:	d9 d0       	rcall	.+434    	; 0x1d4b2 <__fp_cmp>
   1d300:	08 f4       	brcc	.+2      	; 0x1d304 <__cmpsf2+0x6>
   1d302:	81 e0       	ldi	r24, 0x01	; 1
   1d304:	08 95       	ret

0001d306 <__divsf3>:
   1d306:	0c d0       	rcall	.+24     	; 0x1d320 <__divsf3x>
   1d308:	0f c1       	rjmp	.+542    	; 0x1d528 <__fp_round>
   1d30a:	07 d1       	rcall	.+526    	; 0x1d51a <__fp_pscB>
   1d30c:	40 f0       	brcs	.+16     	; 0x1d31e <__divsf3+0x18>
   1d30e:	fe d0       	rcall	.+508    	; 0x1d50c <__fp_pscA>
   1d310:	30 f0       	brcs	.+12     	; 0x1d31e <__divsf3+0x18>
   1d312:	21 f4       	brne	.+8      	; 0x1d31c <__divsf3+0x16>
   1d314:	5f 3f       	cpi	r21, 0xFF	; 255
   1d316:	19 f0       	breq	.+6      	; 0x1d31e <__divsf3+0x18>
   1d318:	f0 c0       	rjmp	.+480    	; 0x1d4fa <__fp_inf>
   1d31a:	51 11       	cpse	r21, r1
   1d31c:	39 c1       	rjmp	.+626    	; 0x1d590 <__fp_szero>
   1d31e:	f3 c0       	rjmp	.+486    	; 0x1d506 <__fp_nan>

0001d320 <__divsf3x>:
   1d320:	14 d1       	rcall	.+552    	; 0x1d54a <__fp_split3>
   1d322:	98 f3       	brcs	.-26     	; 0x1d30a <__divsf3+0x4>

0001d324 <__divsf3_pse>:
   1d324:	99 23       	and	r25, r25
   1d326:	c9 f3       	breq	.-14     	; 0x1d31a <__divsf3+0x14>
   1d328:	55 23       	and	r21, r21
   1d32a:	b1 f3       	breq	.-20     	; 0x1d318 <__divsf3+0x12>
   1d32c:	95 1b       	sub	r25, r21
   1d32e:	55 0b       	sbc	r21, r21
   1d330:	bb 27       	eor	r27, r27
   1d332:	aa 27       	eor	r26, r26
   1d334:	62 17       	cp	r22, r18
   1d336:	73 07       	cpc	r23, r19
   1d338:	84 07       	cpc	r24, r20
   1d33a:	38 f0       	brcs	.+14     	; 0x1d34a <__divsf3_pse+0x26>
   1d33c:	9f 5f       	subi	r25, 0xFF	; 255
   1d33e:	5f 4f       	sbci	r21, 0xFF	; 255
   1d340:	22 0f       	add	r18, r18
   1d342:	33 1f       	adc	r19, r19
   1d344:	44 1f       	adc	r20, r20
   1d346:	aa 1f       	adc	r26, r26
   1d348:	a9 f3       	breq	.-22     	; 0x1d334 <__divsf3_pse+0x10>
   1d34a:	33 d0       	rcall	.+102    	; 0x1d3b2 <__divsf3_pse+0x8e>
   1d34c:	0e 2e       	mov	r0, r30
   1d34e:	3a f0       	brmi	.+14     	; 0x1d35e <__divsf3_pse+0x3a>
   1d350:	e0 e8       	ldi	r30, 0x80	; 128
   1d352:	30 d0       	rcall	.+96     	; 0x1d3b4 <__divsf3_pse+0x90>
   1d354:	91 50       	subi	r25, 0x01	; 1
   1d356:	50 40       	sbci	r21, 0x00	; 0
   1d358:	e6 95       	lsr	r30
   1d35a:	00 1c       	adc	r0, r0
   1d35c:	ca f7       	brpl	.-14     	; 0x1d350 <__divsf3_pse+0x2c>
   1d35e:	29 d0       	rcall	.+82     	; 0x1d3b2 <__divsf3_pse+0x8e>
   1d360:	fe 2f       	mov	r31, r30
   1d362:	27 d0       	rcall	.+78     	; 0x1d3b2 <__divsf3_pse+0x8e>
   1d364:	66 0f       	add	r22, r22
   1d366:	77 1f       	adc	r23, r23
   1d368:	88 1f       	adc	r24, r24
   1d36a:	bb 1f       	adc	r27, r27
   1d36c:	26 17       	cp	r18, r22
   1d36e:	37 07       	cpc	r19, r23
   1d370:	48 07       	cpc	r20, r24
   1d372:	ab 07       	cpc	r26, r27
   1d374:	b0 e8       	ldi	r27, 0x80	; 128
   1d376:	09 f0       	breq	.+2      	; 0x1d37a <__divsf3_pse+0x56>
   1d378:	bb 0b       	sbc	r27, r27
   1d37a:	80 2d       	mov	r24, r0
   1d37c:	bf 01       	movw	r22, r30
   1d37e:	ff 27       	eor	r31, r31
   1d380:	93 58       	subi	r25, 0x83	; 131
   1d382:	5f 4f       	sbci	r21, 0xFF	; 255
   1d384:	2a f0       	brmi	.+10     	; 0x1d390 <__divsf3_pse+0x6c>
   1d386:	9e 3f       	cpi	r25, 0xFE	; 254
   1d388:	51 05       	cpc	r21, r1
   1d38a:	68 f0       	brcs	.+26     	; 0x1d3a6 <__divsf3_pse+0x82>
   1d38c:	b6 c0       	rjmp	.+364    	; 0x1d4fa <__fp_inf>
   1d38e:	00 c1       	rjmp	.+512    	; 0x1d590 <__fp_szero>
   1d390:	5f 3f       	cpi	r21, 0xFF	; 255
   1d392:	ec f3       	brlt	.-6      	; 0x1d38e <__divsf3_pse+0x6a>
   1d394:	98 3e       	cpi	r25, 0xE8	; 232
   1d396:	dc f3       	brlt	.-10     	; 0x1d38e <__divsf3_pse+0x6a>
   1d398:	86 95       	lsr	r24
   1d39a:	77 95       	ror	r23
   1d39c:	67 95       	ror	r22
   1d39e:	b7 95       	ror	r27
   1d3a0:	f7 95       	ror	r31
   1d3a2:	9f 5f       	subi	r25, 0xFF	; 255
   1d3a4:	c9 f7       	brne	.-14     	; 0x1d398 <__divsf3_pse+0x74>
   1d3a6:	88 0f       	add	r24, r24
   1d3a8:	91 1d       	adc	r25, r1
   1d3aa:	96 95       	lsr	r25
   1d3ac:	87 95       	ror	r24
   1d3ae:	97 f9       	bld	r25, 7
   1d3b0:	08 95       	ret
   1d3b2:	e1 e0       	ldi	r30, 0x01	; 1
   1d3b4:	66 0f       	add	r22, r22
   1d3b6:	77 1f       	adc	r23, r23
   1d3b8:	88 1f       	adc	r24, r24
   1d3ba:	bb 1f       	adc	r27, r27
   1d3bc:	62 17       	cp	r22, r18
   1d3be:	73 07       	cpc	r23, r19
   1d3c0:	84 07       	cpc	r24, r20
   1d3c2:	ba 07       	cpc	r27, r26
   1d3c4:	20 f0       	brcs	.+8      	; 0x1d3ce <__divsf3_pse+0xaa>
   1d3c6:	62 1b       	sub	r22, r18
   1d3c8:	73 0b       	sbc	r23, r19
   1d3ca:	84 0b       	sbc	r24, r20
   1d3cc:	ba 0b       	sbc	r27, r26
   1d3ce:	ee 1f       	adc	r30, r30
   1d3d0:	88 f7       	brcc	.-30     	; 0x1d3b4 <__divsf3_pse+0x90>
   1d3d2:	e0 95       	com	r30
   1d3d4:	08 95       	ret

0001d3d6 <__fixsfsi>:
   1d3d6:	04 d0       	rcall	.+8      	; 0x1d3e0 <__fixunssfsi>
   1d3d8:	68 94       	set
   1d3da:	b1 11       	cpse	r27, r1
   1d3dc:	d9 c0       	rjmp	.+434    	; 0x1d590 <__fp_szero>
   1d3de:	08 95       	ret

0001d3e0 <__fixunssfsi>:
   1d3e0:	bc d0       	rcall	.+376    	; 0x1d55a <__fp_splitA>
   1d3e2:	88 f0       	brcs	.+34     	; 0x1d406 <__fixunssfsi+0x26>
   1d3e4:	9f 57       	subi	r25, 0x7F	; 127
   1d3e6:	90 f0       	brcs	.+36     	; 0x1d40c <__fixunssfsi+0x2c>
   1d3e8:	b9 2f       	mov	r27, r25
   1d3ea:	99 27       	eor	r25, r25
   1d3ec:	b7 51       	subi	r27, 0x17	; 23
   1d3ee:	a0 f0       	brcs	.+40     	; 0x1d418 <__fixunssfsi+0x38>
   1d3f0:	d1 f0       	breq	.+52     	; 0x1d426 <__fixunssfsi+0x46>
   1d3f2:	66 0f       	add	r22, r22
   1d3f4:	77 1f       	adc	r23, r23
   1d3f6:	88 1f       	adc	r24, r24
   1d3f8:	99 1f       	adc	r25, r25
   1d3fa:	1a f0       	brmi	.+6      	; 0x1d402 <__fixunssfsi+0x22>
   1d3fc:	ba 95       	dec	r27
   1d3fe:	c9 f7       	brne	.-14     	; 0x1d3f2 <__fixunssfsi+0x12>
   1d400:	12 c0       	rjmp	.+36     	; 0x1d426 <__fixunssfsi+0x46>
   1d402:	b1 30       	cpi	r27, 0x01	; 1
   1d404:	81 f0       	breq	.+32     	; 0x1d426 <__fixunssfsi+0x46>
   1d406:	c3 d0       	rcall	.+390    	; 0x1d58e <__fp_zero>
   1d408:	b1 e0       	ldi	r27, 0x01	; 1
   1d40a:	08 95       	ret
   1d40c:	c0 c0       	rjmp	.+384    	; 0x1d58e <__fp_zero>
   1d40e:	67 2f       	mov	r22, r23
   1d410:	78 2f       	mov	r23, r24
   1d412:	88 27       	eor	r24, r24
   1d414:	b8 5f       	subi	r27, 0xF8	; 248
   1d416:	39 f0       	breq	.+14     	; 0x1d426 <__fixunssfsi+0x46>
   1d418:	b9 3f       	cpi	r27, 0xF9	; 249
   1d41a:	cc f3       	brlt	.-14     	; 0x1d40e <__fixunssfsi+0x2e>
   1d41c:	86 95       	lsr	r24
   1d41e:	77 95       	ror	r23
   1d420:	67 95       	ror	r22
   1d422:	b3 95       	inc	r27
   1d424:	d9 f7       	brne	.-10     	; 0x1d41c <__fixunssfsi+0x3c>
   1d426:	3e f4       	brtc	.+14     	; 0x1d436 <__fixunssfsi+0x56>
   1d428:	90 95       	com	r25
   1d42a:	80 95       	com	r24
   1d42c:	70 95       	com	r23
   1d42e:	61 95       	neg	r22
   1d430:	7f 4f       	sbci	r23, 0xFF	; 255
   1d432:	8f 4f       	sbci	r24, 0xFF	; 255
   1d434:	9f 4f       	sbci	r25, 0xFF	; 255
   1d436:	08 95       	ret

0001d438 <__floatunsisf>:
   1d438:	e8 94       	clt
   1d43a:	09 c0       	rjmp	.+18     	; 0x1d44e <__floatsisf+0x12>

0001d43c <__floatsisf>:
   1d43c:	97 fb       	bst	r25, 7
   1d43e:	3e f4       	brtc	.+14     	; 0x1d44e <__floatsisf+0x12>
   1d440:	90 95       	com	r25
   1d442:	80 95       	com	r24
   1d444:	70 95       	com	r23
   1d446:	61 95       	neg	r22
   1d448:	7f 4f       	sbci	r23, 0xFF	; 255
   1d44a:	8f 4f       	sbci	r24, 0xFF	; 255
   1d44c:	9f 4f       	sbci	r25, 0xFF	; 255
   1d44e:	99 23       	and	r25, r25
   1d450:	a9 f0       	breq	.+42     	; 0x1d47c <__floatsisf+0x40>
   1d452:	f9 2f       	mov	r31, r25
   1d454:	96 e9       	ldi	r25, 0x96	; 150
   1d456:	bb 27       	eor	r27, r27
   1d458:	93 95       	inc	r25
   1d45a:	f6 95       	lsr	r31
   1d45c:	87 95       	ror	r24
   1d45e:	77 95       	ror	r23
   1d460:	67 95       	ror	r22
   1d462:	b7 95       	ror	r27
   1d464:	f1 11       	cpse	r31, r1
   1d466:	f8 cf       	rjmp	.-16     	; 0x1d458 <__floatsisf+0x1c>
   1d468:	fa f4       	brpl	.+62     	; 0x1d4a8 <__floatsisf+0x6c>
   1d46a:	bb 0f       	add	r27, r27
   1d46c:	11 f4       	brne	.+4      	; 0x1d472 <__floatsisf+0x36>
   1d46e:	60 ff       	sbrs	r22, 0
   1d470:	1b c0       	rjmp	.+54     	; 0x1d4a8 <__floatsisf+0x6c>
   1d472:	6f 5f       	subi	r22, 0xFF	; 255
   1d474:	7f 4f       	sbci	r23, 0xFF	; 255
   1d476:	8f 4f       	sbci	r24, 0xFF	; 255
   1d478:	9f 4f       	sbci	r25, 0xFF	; 255
   1d47a:	16 c0       	rjmp	.+44     	; 0x1d4a8 <__floatsisf+0x6c>
   1d47c:	88 23       	and	r24, r24
   1d47e:	11 f0       	breq	.+4      	; 0x1d484 <__floatsisf+0x48>
   1d480:	96 e9       	ldi	r25, 0x96	; 150
   1d482:	11 c0       	rjmp	.+34     	; 0x1d4a6 <__floatsisf+0x6a>
   1d484:	77 23       	and	r23, r23
   1d486:	21 f0       	breq	.+8      	; 0x1d490 <__floatsisf+0x54>
   1d488:	9e e8       	ldi	r25, 0x8E	; 142
   1d48a:	87 2f       	mov	r24, r23
   1d48c:	76 2f       	mov	r23, r22
   1d48e:	05 c0       	rjmp	.+10     	; 0x1d49a <__floatsisf+0x5e>
   1d490:	66 23       	and	r22, r22
   1d492:	71 f0       	breq	.+28     	; 0x1d4b0 <__floatsisf+0x74>
   1d494:	96 e8       	ldi	r25, 0x86	; 134
   1d496:	86 2f       	mov	r24, r22
   1d498:	70 e0       	ldi	r23, 0x00	; 0
   1d49a:	60 e0       	ldi	r22, 0x00	; 0
   1d49c:	2a f0       	brmi	.+10     	; 0x1d4a8 <__floatsisf+0x6c>
   1d49e:	9a 95       	dec	r25
   1d4a0:	66 0f       	add	r22, r22
   1d4a2:	77 1f       	adc	r23, r23
   1d4a4:	88 1f       	adc	r24, r24
   1d4a6:	da f7       	brpl	.-10     	; 0x1d49e <__floatsisf+0x62>
   1d4a8:	88 0f       	add	r24, r24
   1d4aa:	96 95       	lsr	r25
   1d4ac:	87 95       	ror	r24
   1d4ae:	97 f9       	bld	r25, 7
   1d4b0:	08 95       	ret

0001d4b2 <__fp_cmp>:
   1d4b2:	99 0f       	add	r25, r25
   1d4b4:	00 08       	sbc	r0, r0
   1d4b6:	55 0f       	add	r21, r21
   1d4b8:	aa 0b       	sbc	r26, r26
   1d4ba:	e0 e8       	ldi	r30, 0x80	; 128
   1d4bc:	fe ef       	ldi	r31, 0xFE	; 254
   1d4be:	16 16       	cp	r1, r22
   1d4c0:	17 06       	cpc	r1, r23
   1d4c2:	e8 07       	cpc	r30, r24
   1d4c4:	f9 07       	cpc	r31, r25
   1d4c6:	c0 f0       	brcs	.+48     	; 0x1d4f8 <__fp_cmp+0x46>
   1d4c8:	12 16       	cp	r1, r18
   1d4ca:	13 06       	cpc	r1, r19
   1d4cc:	e4 07       	cpc	r30, r20
   1d4ce:	f5 07       	cpc	r31, r21
   1d4d0:	98 f0       	brcs	.+38     	; 0x1d4f8 <__fp_cmp+0x46>
   1d4d2:	62 1b       	sub	r22, r18
   1d4d4:	73 0b       	sbc	r23, r19
   1d4d6:	84 0b       	sbc	r24, r20
   1d4d8:	95 0b       	sbc	r25, r21
   1d4da:	39 f4       	brne	.+14     	; 0x1d4ea <__fp_cmp+0x38>
   1d4dc:	0a 26       	eor	r0, r26
   1d4de:	61 f0       	breq	.+24     	; 0x1d4f8 <__fp_cmp+0x46>
   1d4e0:	23 2b       	or	r18, r19
   1d4e2:	24 2b       	or	r18, r20
   1d4e4:	25 2b       	or	r18, r21
   1d4e6:	21 f4       	brne	.+8      	; 0x1d4f0 <__fp_cmp+0x3e>
   1d4e8:	08 95       	ret
   1d4ea:	0a 26       	eor	r0, r26
   1d4ec:	09 f4       	brne	.+2      	; 0x1d4f0 <__fp_cmp+0x3e>
   1d4ee:	a1 40       	sbci	r26, 0x01	; 1
   1d4f0:	a6 95       	lsr	r26
   1d4f2:	8f ef       	ldi	r24, 0xFF	; 255
   1d4f4:	81 1d       	adc	r24, r1
   1d4f6:	81 1d       	adc	r24, r1
   1d4f8:	08 95       	ret

0001d4fa <__fp_inf>:
   1d4fa:	97 f9       	bld	r25, 7
   1d4fc:	9f 67       	ori	r25, 0x7F	; 127
   1d4fe:	80 e8       	ldi	r24, 0x80	; 128
   1d500:	70 e0       	ldi	r23, 0x00	; 0
   1d502:	60 e0       	ldi	r22, 0x00	; 0
   1d504:	08 95       	ret

0001d506 <__fp_nan>:
   1d506:	9f ef       	ldi	r25, 0xFF	; 255
   1d508:	80 ec       	ldi	r24, 0xC0	; 192
   1d50a:	08 95       	ret

0001d50c <__fp_pscA>:
   1d50c:	00 24       	eor	r0, r0
   1d50e:	0a 94       	dec	r0
   1d510:	16 16       	cp	r1, r22
   1d512:	17 06       	cpc	r1, r23
   1d514:	18 06       	cpc	r1, r24
   1d516:	09 06       	cpc	r0, r25
   1d518:	08 95       	ret

0001d51a <__fp_pscB>:
   1d51a:	00 24       	eor	r0, r0
   1d51c:	0a 94       	dec	r0
   1d51e:	12 16       	cp	r1, r18
   1d520:	13 06       	cpc	r1, r19
   1d522:	14 06       	cpc	r1, r20
   1d524:	05 06       	cpc	r0, r21
   1d526:	08 95       	ret

0001d528 <__fp_round>:
   1d528:	09 2e       	mov	r0, r25
   1d52a:	03 94       	inc	r0
   1d52c:	00 0c       	add	r0, r0
   1d52e:	11 f4       	brne	.+4      	; 0x1d534 <__fp_round+0xc>
   1d530:	88 23       	and	r24, r24
   1d532:	52 f0       	brmi	.+20     	; 0x1d548 <__fp_round+0x20>
   1d534:	bb 0f       	add	r27, r27
   1d536:	40 f4       	brcc	.+16     	; 0x1d548 <__fp_round+0x20>
   1d538:	bf 2b       	or	r27, r31
   1d53a:	11 f4       	brne	.+4      	; 0x1d540 <__fp_round+0x18>
   1d53c:	60 ff       	sbrs	r22, 0
   1d53e:	04 c0       	rjmp	.+8      	; 0x1d548 <__fp_round+0x20>
   1d540:	6f 5f       	subi	r22, 0xFF	; 255
   1d542:	7f 4f       	sbci	r23, 0xFF	; 255
   1d544:	8f 4f       	sbci	r24, 0xFF	; 255
   1d546:	9f 4f       	sbci	r25, 0xFF	; 255
   1d548:	08 95       	ret

0001d54a <__fp_split3>:
   1d54a:	57 fd       	sbrc	r21, 7
   1d54c:	90 58       	subi	r25, 0x80	; 128
   1d54e:	44 0f       	add	r20, r20
   1d550:	55 1f       	adc	r21, r21
   1d552:	59 f0       	breq	.+22     	; 0x1d56a <__fp_splitA+0x10>
   1d554:	5f 3f       	cpi	r21, 0xFF	; 255
   1d556:	71 f0       	breq	.+28     	; 0x1d574 <__fp_splitA+0x1a>
   1d558:	47 95       	ror	r20

0001d55a <__fp_splitA>:
   1d55a:	88 0f       	add	r24, r24
   1d55c:	97 fb       	bst	r25, 7
   1d55e:	99 1f       	adc	r25, r25
   1d560:	61 f0       	breq	.+24     	; 0x1d57a <__fp_splitA+0x20>
   1d562:	9f 3f       	cpi	r25, 0xFF	; 255
   1d564:	79 f0       	breq	.+30     	; 0x1d584 <__fp_splitA+0x2a>
   1d566:	87 95       	ror	r24
   1d568:	08 95       	ret
   1d56a:	12 16       	cp	r1, r18
   1d56c:	13 06       	cpc	r1, r19
   1d56e:	14 06       	cpc	r1, r20
   1d570:	55 1f       	adc	r21, r21
   1d572:	f2 cf       	rjmp	.-28     	; 0x1d558 <__fp_split3+0xe>
   1d574:	46 95       	lsr	r20
   1d576:	f1 df       	rcall	.-30     	; 0x1d55a <__fp_splitA>
   1d578:	08 c0       	rjmp	.+16     	; 0x1d58a <__fp_splitA+0x30>
   1d57a:	16 16       	cp	r1, r22
   1d57c:	17 06       	cpc	r1, r23
   1d57e:	18 06       	cpc	r1, r24
   1d580:	99 1f       	adc	r25, r25
   1d582:	f1 cf       	rjmp	.-30     	; 0x1d566 <__fp_splitA+0xc>
   1d584:	86 95       	lsr	r24
   1d586:	71 05       	cpc	r23, r1
   1d588:	61 05       	cpc	r22, r1
   1d58a:	08 94       	sec
   1d58c:	08 95       	ret

0001d58e <__fp_zero>:
   1d58e:	e8 94       	clt

0001d590 <__fp_szero>:
   1d590:	bb 27       	eor	r27, r27
   1d592:	66 27       	eor	r22, r22
   1d594:	77 27       	eor	r23, r23
   1d596:	cb 01       	movw	r24, r22
   1d598:	97 f9       	bld	r25, 7
   1d59a:	08 95       	ret

0001d59c <__gesf2>:
   1d59c:	8a df       	rcall	.-236    	; 0x1d4b2 <__fp_cmp>
   1d59e:	08 f4       	brcc	.+2      	; 0x1d5a2 <__gesf2+0x6>
   1d5a0:	8f ef       	ldi	r24, 0xFF	; 255
   1d5a2:	08 95       	ret

0001d5a4 <__mulsf3>:
   1d5a4:	0b d0       	rcall	.+22     	; 0x1d5bc <__mulsf3x>
   1d5a6:	c0 cf       	rjmp	.-128    	; 0x1d528 <__fp_round>
   1d5a8:	b1 df       	rcall	.-158    	; 0x1d50c <__fp_pscA>
   1d5aa:	28 f0       	brcs	.+10     	; 0x1d5b6 <__mulsf3+0x12>
   1d5ac:	b6 df       	rcall	.-148    	; 0x1d51a <__fp_pscB>
   1d5ae:	18 f0       	brcs	.+6      	; 0x1d5b6 <__mulsf3+0x12>
   1d5b0:	95 23       	and	r25, r21
   1d5b2:	09 f0       	breq	.+2      	; 0x1d5b6 <__mulsf3+0x12>
   1d5b4:	a2 cf       	rjmp	.-188    	; 0x1d4fa <__fp_inf>
   1d5b6:	a7 cf       	rjmp	.-178    	; 0x1d506 <__fp_nan>
   1d5b8:	11 24       	eor	r1, r1
   1d5ba:	ea cf       	rjmp	.-44     	; 0x1d590 <__fp_szero>

0001d5bc <__mulsf3x>:
   1d5bc:	c6 df       	rcall	.-116    	; 0x1d54a <__fp_split3>
   1d5be:	a0 f3       	brcs	.-24     	; 0x1d5a8 <__mulsf3+0x4>

0001d5c0 <__mulsf3_pse>:
   1d5c0:	95 9f       	mul	r25, r21
   1d5c2:	d1 f3       	breq	.-12     	; 0x1d5b8 <__mulsf3+0x14>
   1d5c4:	95 0f       	add	r25, r21
   1d5c6:	50 e0       	ldi	r21, 0x00	; 0
   1d5c8:	55 1f       	adc	r21, r21
   1d5ca:	62 9f       	mul	r22, r18
   1d5cc:	f0 01       	movw	r30, r0
   1d5ce:	72 9f       	mul	r23, r18
   1d5d0:	bb 27       	eor	r27, r27
   1d5d2:	f0 0d       	add	r31, r0
   1d5d4:	b1 1d       	adc	r27, r1
   1d5d6:	63 9f       	mul	r22, r19
   1d5d8:	aa 27       	eor	r26, r26
   1d5da:	f0 0d       	add	r31, r0
   1d5dc:	b1 1d       	adc	r27, r1
   1d5de:	aa 1f       	adc	r26, r26
   1d5e0:	64 9f       	mul	r22, r20
   1d5e2:	66 27       	eor	r22, r22
   1d5e4:	b0 0d       	add	r27, r0
   1d5e6:	a1 1d       	adc	r26, r1
   1d5e8:	66 1f       	adc	r22, r22
   1d5ea:	82 9f       	mul	r24, r18
   1d5ec:	22 27       	eor	r18, r18
   1d5ee:	b0 0d       	add	r27, r0
   1d5f0:	a1 1d       	adc	r26, r1
   1d5f2:	62 1f       	adc	r22, r18
   1d5f4:	73 9f       	mul	r23, r19
   1d5f6:	b0 0d       	add	r27, r0
   1d5f8:	a1 1d       	adc	r26, r1
   1d5fa:	62 1f       	adc	r22, r18
   1d5fc:	83 9f       	mul	r24, r19
   1d5fe:	a0 0d       	add	r26, r0
   1d600:	61 1d       	adc	r22, r1
   1d602:	22 1f       	adc	r18, r18
   1d604:	74 9f       	mul	r23, r20
   1d606:	33 27       	eor	r19, r19
   1d608:	a0 0d       	add	r26, r0
   1d60a:	61 1d       	adc	r22, r1
   1d60c:	23 1f       	adc	r18, r19
   1d60e:	84 9f       	mul	r24, r20
   1d610:	60 0d       	add	r22, r0
   1d612:	21 1d       	adc	r18, r1
   1d614:	82 2f       	mov	r24, r18
   1d616:	76 2f       	mov	r23, r22
   1d618:	6a 2f       	mov	r22, r26
   1d61a:	11 24       	eor	r1, r1
   1d61c:	9f 57       	subi	r25, 0x7F	; 127
   1d61e:	50 40       	sbci	r21, 0x00	; 0
   1d620:	8a f0       	brmi	.+34     	; 0x1d644 <__mulsf3_pse+0x84>
   1d622:	e1 f0       	breq	.+56     	; 0x1d65c <__mulsf3_pse+0x9c>
   1d624:	88 23       	and	r24, r24
   1d626:	4a f0       	brmi	.+18     	; 0x1d63a <__mulsf3_pse+0x7a>
   1d628:	ee 0f       	add	r30, r30
   1d62a:	ff 1f       	adc	r31, r31
   1d62c:	bb 1f       	adc	r27, r27
   1d62e:	66 1f       	adc	r22, r22
   1d630:	77 1f       	adc	r23, r23
   1d632:	88 1f       	adc	r24, r24
   1d634:	91 50       	subi	r25, 0x01	; 1
   1d636:	50 40       	sbci	r21, 0x00	; 0
   1d638:	a9 f7       	brne	.-22     	; 0x1d624 <__mulsf3_pse+0x64>
   1d63a:	9e 3f       	cpi	r25, 0xFE	; 254
   1d63c:	51 05       	cpc	r21, r1
   1d63e:	70 f0       	brcs	.+28     	; 0x1d65c <__mulsf3_pse+0x9c>
   1d640:	5c cf       	rjmp	.-328    	; 0x1d4fa <__fp_inf>
   1d642:	a6 cf       	rjmp	.-180    	; 0x1d590 <__fp_szero>
   1d644:	5f 3f       	cpi	r21, 0xFF	; 255
   1d646:	ec f3       	brlt	.-6      	; 0x1d642 <__mulsf3_pse+0x82>
   1d648:	98 3e       	cpi	r25, 0xE8	; 232
   1d64a:	dc f3       	brlt	.-10     	; 0x1d642 <__mulsf3_pse+0x82>
   1d64c:	86 95       	lsr	r24
   1d64e:	77 95       	ror	r23
   1d650:	67 95       	ror	r22
   1d652:	b7 95       	ror	r27
   1d654:	f7 95       	ror	r31
   1d656:	e7 95       	ror	r30
   1d658:	9f 5f       	subi	r25, 0xFF	; 255
   1d65a:	c1 f7       	brne	.-16     	; 0x1d64c <__mulsf3_pse+0x8c>
   1d65c:	fe 2b       	or	r31, r30
   1d65e:	88 0f       	add	r24, r24
   1d660:	91 1d       	adc	r25, r1
   1d662:	96 95       	lsr	r25
   1d664:	87 95       	ror	r24
   1d666:	97 f9       	bld	r25, 7
   1d668:	08 95       	ret

0001d66a <round>:
   1d66a:	77 df       	rcall	.-274    	; 0x1d55a <__fp_splitA>
   1d66c:	e0 f0       	brcs	.+56     	; 0x1d6a6 <round+0x3c>
   1d66e:	9e 37       	cpi	r25, 0x7E	; 126
   1d670:	d8 f0       	brcs	.+54     	; 0x1d6a8 <round+0x3e>
   1d672:	96 39       	cpi	r25, 0x96	; 150
   1d674:	b8 f4       	brcc	.+46     	; 0x1d6a4 <round+0x3a>
   1d676:	9e 38       	cpi	r25, 0x8E	; 142
   1d678:	48 f4       	brcc	.+18     	; 0x1d68c <round+0x22>
   1d67a:	67 2f       	mov	r22, r23
   1d67c:	78 2f       	mov	r23, r24
   1d67e:	88 27       	eor	r24, r24
   1d680:	98 5f       	subi	r25, 0xF8	; 248
   1d682:	f9 cf       	rjmp	.-14     	; 0x1d676 <round+0xc>
   1d684:	86 95       	lsr	r24
   1d686:	77 95       	ror	r23
   1d688:	67 95       	ror	r22
   1d68a:	93 95       	inc	r25
   1d68c:	95 39       	cpi	r25, 0x95	; 149
   1d68e:	d0 f3       	brcs	.-12     	; 0x1d684 <round+0x1a>
   1d690:	b6 2f       	mov	r27, r22
   1d692:	b1 70       	andi	r27, 0x01	; 1
   1d694:	6b 0f       	add	r22, r27
   1d696:	71 1d       	adc	r23, r1
   1d698:	81 1d       	adc	r24, r1
   1d69a:	20 f4       	brcc	.+8      	; 0x1d6a4 <round+0x3a>
   1d69c:	87 95       	ror	r24
   1d69e:	77 95       	ror	r23
   1d6a0:	67 95       	ror	r22
   1d6a2:	93 95       	inc	r25
   1d6a4:	02 c0       	rjmp	.+4      	; 0x1d6aa <__fp_mintl>
   1d6a6:	1c c0       	rjmp	.+56     	; 0x1d6e0 <__fp_mpack>
   1d6a8:	73 cf       	rjmp	.-282    	; 0x1d590 <__fp_szero>

0001d6aa <__fp_mintl>:
   1d6aa:	88 23       	and	r24, r24
   1d6ac:	71 f4       	brne	.+28     	; 0x1d6ca <__fp_mintl+0x20>
   1d6ae:	77 23       	and	r23, r23
   1d6b0:	21 f0       	breq	.+8      	; 0x1d6ba <__fp_mintl+0x10>
   1d6b2:	98 50       	subi	r25, 0x08	; 8
   1d6b4:	87 2b       	or	r24, r23
   1d6b6:	76 2f       	mov	r23, r22
   1d6b8:	07 c0       	rjmp	.+14     	; 0x1d6c8 <__fp_mintl+0x1e>
   1d6ba:	66 23       	and	r22, r22
   1d6bc:	11 f4       	brne	.+4      	; 0x1d6c2 <__fp_mintl+0x18>
   1d6be:	99 27       	eor	r25, r25
   1d6c0:	0d c0       	rjmp	.+26     	; 0x1d6dc <__fp_mintl+0x32>
   1d6c2:	90 51       	subi	r25, 0x10	; 16
   1d6c4:	86 2b       	or	r24, r22
   1d6c6:	70 e0       	ldi	r23, 0x00	; 0
   1d6c8:	60 e0       	ldi	r22, 0x00	; 0
   1d6ca:	2a f0       	brmi	.+10     	; 0x1d6d6 <__fp_mintl+0x2c>
   1d6cc:	9a 95       	dec	r25
   1d6ce:	66 0f       	add	r22, r22
   1d6d0:	77 1f       	adc	r23, r23
   1d6d2:	88 1f       	adc	r24, r24
   1d6d4:	da f7       	brpl	.-10     	; 0x1d6cc <__fp_mintl+0x22>
   1d6d6:	88 0f       	add	r24, r24
   1d6d8:	96 95       	lsr	r25
   1d6da:	87 95       	ror	r24
   1d6dc:	97 f9       	bld	r25, 7
   1d6de:	08 95       	ret

0001d6e0 <__fp_mpack>:
   1d6e0:	9f 3f       	cpi	r25, 0xFF	; 255
   1d6e2:	31 f0       	breq	.+12     	; 0x1d6f0 <__fp_mpack_finite+0xc>

0001d6e4 <__fp_mpack_finite>:
   1d6e4:	91 50       	subi	r25, 0x01	; 1
   1d6e6:	20 f4       	brcc	.+8      	; 0x1d6f0 <__fp_mpack_finite+0xc>
   1d6e8:	87 95       	ror	r24
   1d6ea:	77 95       	ror	r23
   1d6ec:	67 95       	ror	r22
   1d6ee:	b7 95       	ror	r27
   1d6f0:	88 0f       	add	r24, r24
   1d6f2:	91 1d       	adc	r25, r1
   1d6f4:	96 95       	lsr	r25
   1d6f6:	87 95       	ror	r24
   1d6f8:	97 f9       	bld	r25, 7
   1d6fa:	08 95       	ret

0001d6fc <calloc>:
   1d6fc:	0f 93       	push	r16
   1d6fe:	1f 93       	push	r17
   1d700:	cf 93       	push	r28
   1d702:	df 93       	push	r29
   1d704:	86 9f       	mul	r24, r22
   1d706:	80 01       	movw	r16, r0
   1d708:	87 9f       	mul	r24, r23
   1d70a:	10 0d       	add	r17, r0
   1d70c:	96 9f       	mul	r25, r22
   1d70e:	10 0d       	add	r17, r0
   1d710:	11 24       	eor	r1, r1
   1d712:	c8 01       	movw	r24, r16
   1d714:	0d d0       	rcall	.+26     	; 0x1d730 <malloc>
   1d716:	ec 01       	movw	r28, r24
   1d718:	00 97       	sbiw	r24, 0x00	; 0
   1d71a:	21 f0       	breq	.+8      	; 0x1d724 <calloc+0x28>
   1d71c:	a8 01       	movw	r20, r16
   1d71e:	60 e0       	ldi	r22, 0x00	; 0
   1d720:	70 e0       	ldi	r23, 0x00	; 0
   1d722:	0a d2       	rcall	.+1044   	; 0x1db38 <memset>
   1d724:	ce 01       	movw	r24, r28
   1d726:	df 91       	pop	r29
   1d728:	cf 91       	pop	r28
   1d72a:	1f 91       	pop	r17
   1d72c:	0f 91       	pop	r16
   1d72e:	08 95       	ret

0001d730 <malloc>:
   1d730:	0f 93       	push	r16
   1d732:	1f 93       	push	r17
   1d734:	cf 93       	push	r28
   1d736:	df 93       	push	r29
   1d738:	82 30       	cpi	r24, 0x02	; 2
   1d73a:	91 05       	cpc	r25, r1
   1d73c:	10 f4       	brcc	.+4      	; 0x1d742 <malloc+0x12>
   1d73e:	82 e0       	ldi	r24, 0x02	; 2
   1d740:	90 e0       	ldi	r25, 0x00	; 0
   1d742:	e0 91 df 1e 	lds	r30, 0x1EDF	; 0x801edf <__flp>
   1d746:	f0 91 e0 1e 	lds	r31, 0x1EE0	; 0x801ee0 <__flp+0x1>
   1d74a:	20 e0       	ldi	r18, 0x00	; 0
   1d74c:	30 e0       	ldi	r19, 0x00	; 0
   1d74e:	a0 e0       	ldi	r26, 0x00	; 0
   1d750:	b0 e0       	ldi	r27, 0x00	; 0
   1d752:	30 97       	sbiw	r30, 0x00	; 0
   1d754:	19 f1       	breq	.+70     	; 0x1d79c <malloc+0x6c>
   1d756:	40 81       	ld	r20, Z
   1d758:	51 81       	ldd	r21, Z+1	; 0x01
   1d75a:	02 81       	ldd	r16, Z+2	; 0x02
   1d75c:	13 81       	ldd	r17, Z+3	; 0x03
   1d75e:	48 17       	cp	r20, r24
   1d760:	59 07       	cpc	r21, r25
   1d762:	c8 f0       	brcs	.+50     	; 0x1d796 <malloc+0x66>
   1d764:	84 17       	cp	r24, r20
   1d766:	95 07       	cpc	r25, r21
   1d768:	69 f4       	brne	.+26     	; 0x1d784 <malloc+0x54>
   1d76a:	10 97       	sbiw	r26, 0x00	; 0
   1d76c:	31 f0       	breq	.+12     	; 0x1d77a <malloc+0x4a>
   1d76e:	12 96       	adiw	r26, 0x02	; 2
   1d770:	0c 93       	st	X, r16
   1d772:	12 97       	sbiw	r26, 0x02	; 2
   1d774:	13 96       	adiw	r26, 0x03	; 3
   1d776:	1c 93       	st	X, r17
   1d778:	27 c0       	rjmp	.+78     	; 0x1d7c8 <malloc+0x98>
   1d77a:	00 93 df 1e 	sts	0x1EDF, r16	; 0x801edf <__flp>
   1d77e:	10 93 e0 1e 	sts	0x1EE0, r17	; 0x801ee0 <__flp+0x1>
   1d782:	22 c0       	rjmp	.+68     	; 0x1d7c8 <malloc+0x98>
   1d784:	21 15       	cp	r18, r1
   1d786:	31 05       	cpc	r19, r1
   1d788:	19 f0       	breq	.+6      	; 0x1d790 <malloc+0x60>
   1d78a:	42 17       	cp	r20, r18
   1d78c:	53 07       	cpc	r21, r19
   1d78e:	18 f4       	brcc	.+6      	; 0x1d796 <malloc+0x66>
   1d790:	9a 01       	movw	r18, r20
   1d792:	bd 01       	movw	r22, r26
   1d794:	ef 01       	movw	r28, r30
   1d796:	df 01       	movw	r26, r30
   1d798:	f8 01       	movw	r30, r16
   1d79a:	db cf       	rjmp	.-74     	; 0x1d752 <malloc+0x22>
   1d79c:	21 15       	cp	r18, r1
   1d79e:	31 05       	cpc	r19, r1
   1d7a0:	f9 f0       	breq	.+62     	; 0x1d7e0 <malloc+0xb0>
   1d7a2:	28 1b       	sub	r18, r24
   1d7a4:	39 0b       	sbc	r19, r25
   1d7a6:	24 30       	cpi	r18, 0x04	; 4
   1d7a8:	31 05       	cpc	r19, r1
   1d7aa:	80 f4       	brcc	.+32     	; 0x1d7cc <malloc+0x9c>
   1d7ac:	8a 81       	ldd	r24, Y+2	; 0x02
   1d7ae:	9b 81       	ldd	r25, Y+3	; 0x03
   1d7b0:	61 15       	cp	r22, r1
   1d7b2:	71 05       	cpc	r23, r1
   1d7b4:	21 f0       	breq	.+8      	; 0x1d7be <malloc+0x8e>
   1d7b6:	fb 01       	movw	r30, r22
   1d7b8:	93 83       	std	Z+3, r25	; 0x03
   1d7ba:	82 83       	std	Z+2, r24	; 0x02
   1d7bc:	04 c0       	rjmp	.+8      	; 0x1d7c6 <malloc+0x96>
   1d7be:	90 93 e0 1e 	sts	0x1EE0, r25	; 0x801ee0 <__flp+0x1>
   1d7c2:	80 93 df 1e 	sts	0x1EDF, r24	; 0x801edf <__flp>
   1d7c6:	fe 01       	movw	r30, r28
   1d7c8:	32 96       	adiw	r30, 0x02	; 2
   1d7ca:	44 c0       	rjmp	.+136    	; 0x1d854 <malloc+0x124>
   1d7cc:	fe 01       	movw	r30, r28
   1d7ce:	e2 0f       	add	r30, r18
   1d7d0:	f3 1f       	adc	r31, r19
   1d7d2:	81 93       	st	Z+, r24
   1d7d4:	91 93       	st	Z+, r25
   1d7d6:	22 50       	subi	r18, 0x02	; 2
   1d7d8:	31 09       	sbc	r19, r1
   1d7da:	39 83       	std	Y+1, r19	; 0x01
   1d7dc:	28 83       	st	Y, r18
   1d7de:	3a c0       	rjmp	.+116    	; 0x1d854 <malloc+0x124>
   1d7e0:	20 91 dd 1e 	lds	r18, 0x1EDD	; 0x801edd <__brkval>
   1d7e4:	30 91 de 1e 	lds	r19, 0x1EDE	; 0x801ede <__brkval+0x1>
   1d7e8:	23 2b       	or	r18, r19
   1d7ea:	41 f4       	brne	.+16     	; 0x1d7fc <malloc+0xcc>
   1d7ec:	20 91 4a 02 	lds	r18, 0x024A	; 0x80024a <__malloc_heap_start>
   1d7f0:	30 91 4b 02 	lds	r19, 0x024B	; 0x80024b <__malloc_heap_start+0x1>
   1d7f4:	30 93 de 1e 	sts	0x1EDE, r19	; 0x801ede <__brkval+0x1>
   1d7f8:	20 93 dd 1e 	sts	0x1EDD, r18	; 0x801edd <__brkval>
   1d7fc:	20 91 48 02 	lds	r18, 0x0248	; 0x800248 <__malloc_heap_end>
   1d800:	30 91 49 02 	lds	r19, 0x0249	; 0x800249 <__malloc_heap_end+0x1>
   1d804:	21 15       	cp	r18, r1
   1d806:	31 05       	cpc	r19, r1
   1d808:	41 f4       	brne	.+16     	; 0x1d81a <malloc+0xea>
   1d80a:	2d b7       	in	r18, 0x3d	; 61
   1d80c:	3e b7       	in	r19, 0x3e	; 62
   1d80e:	40 91 4c 02 	lds	r20, 0x024C	; 0x80024c <__malloc_margin>
   1d812:	50 91 4d 02 	lds	r21, 0x024D	; 0x80024d <__malloc_margin+0x1>
   1d816:	24 1b       	sub	r18, r20
   1d818:	35 0b       	sbc	r19, r21
   1d81a:	e0 91 dd 1e 	lds	r30, 0x1EDD	; 0x801edd <__brkval>
   1d81e:	f0 91 de 1e 	lds	r31, 0x1EDE	; 0x801ede <__brkval+0x1>
   1d822:	e2 17       	cp	r30, r18
   1d824:	f3 07       	cpc	r31, r19
   1d826:	a0 f4       	brcc	.+40     	; 0x1d850 <malloc+0x120>
   1d828:	2e 1b       	sub	r18, r30
   1d82a:	3f 0b       	sbc	r19, r31
   1d82c:	28 17       	cp	r18, r24
   1d82e:	39 07       	cpc	r19, r25
   1d830:	78 f0       	brcs	.+30     	; 0x1d850 <malloc+0x120>
   1d832:	ac 01       	movw	r20, r24
   1d834:	4e 5f       	subi	r20, 0xFE	; 254
   1d836:	5f 4f       	sbci	r21, 0xFF	; 255
   1d838:	24 17       	cp	r18, r20
   1d83a:	35 07       	cpc	r19, r21
   1d83c:	48 f0       	brcs	.+18     	; 0x1d850 <malloc+0x120>
   1d83e:	4e 0f       	add	r20, r30
   1d840:	5f 1f       	adc	r21, r31
   1d842:	50 93 de 1e 	sts	0x1EDE, r21	; 0x801ede <__brkval+0x1>
   1d846:	40 93 dd 1e 	sts	0x1EDD, r20	; 0x801edd <__brkval>
   1d84a:	81 93       	st	Z+, r24
   1d84c:	91 93       	st	Z+, r25
   1d84e:	02 c0       	rjmp	.+4      	; 0x1d854 <malloc+0x124>
   1d850:	e0 e0       	ldi	r30, 0x00	; 0
   1d852:	f0 e0       	ldi	r31, 0x00	; 0
   1d854:	cf 01       	movw	r24, r30
   1d856:	df 91       	pop	r29
   1d858:	cf 91       	pop	r28
   1d85a:	1f 91       	pop	r17
   1d85c:	0f 91       	pop	r16
   1d85e:	08 95       	ret

0001d860 <free>:
   1d860:	cf 93       	push	r28
   1d862:	df 93       	push	r29
   1d864:	00 97       	sbiw	r24, 0x00	; 0
   1d866:	09 f4       	brne	.+2      	; 0x1d86a <free+0xa>
   1d868:	81 c0       	rjmp	.+258    	; 0x1d96c <free+0x10c>
   1d86a:	fc 01       	movw	r30, r24
   1d86c:	32 97       	sbiw	r30, 0x02	; 2
   1d86e:	13 82       	std	Z+3, r1	; 0x03
   1d870:	12 82       	std	Z+2, r1	; 0x02
   1d872:	a0 91 df 1e 	lds	r26, 0x1EDF	; 0x801edf <__flp>
   1d876:	b0 91 e0 1e 	lds	r27, 0x1EE0	; 0x801ee0 <__flp+0x1>
   1d87a:	10 97       	sbiw	r26, 0x00	; 0
   1d87c:	81 f4       	brne	.+32     	; 0x1d89e <free+0x3e>
   1d87e:	20 81       	ld	r18, Z
   1d880:	31 81       	ldd	r19, Z+1	; 0x01
   1d882:	82 0f       	add	r24, r18
   1d884:	93 1f       	adc	r25, r19
   1d886:	20 91 dd 1e 	lds	r18, 0x1EDD	; 0x801edd <__brkval>
   1d88a:	30 91 de 1e 	lds	r19, 0x1EDE	; 0x801ede <__brkval+0x1>
   1d88e:	28 17       	cp	r18, r24
   1d890:	39 07       	cpc	r19, r25
   1d892:	51 f5       	brne	.+84     	; 0x1d8e8 <free+0x88>
   1d894:	f0 93 de 1e 	sts	0x1EDE, r31	; 0x801ede <__brkval+0x1>
   1d898:	e0 93 dd 1e 	sts	0x1EDD, r30	; 0x801edd <__brkval>
   1d89c:	67 c0       	rjmp	.+206    	; 0x1d96c <free+0x10c>
   1d89e:	ed 01       	movw	r28, r26
   1d8a0:	20 e0       	ldi	r18, 0x00	; 0
   1d8a2:	30 e0       	ldi	r19, 0x00	; 0
   1d8a4:	ce 17       	cp	r28, r30
   1d8a6:	df 07       	cpc	r29, r31
   1d8a8:	40 f4       	brcc	.+16     	; 0x1d8ba <free+0x5a>
   1d8aa:	4a 81       	ldd	r20, Y+2	; 0x02
   1d8ac:	5b 81       	ldd	r21, Y+3	; 0x03
   1d8ae:	9e 01       	movw	r18, r28
   1d8b0:	41 15       	cp	r20, r1
   1d8b2:	51 05       	cpc	r21, r1
   1d8b4:	f1 f0       	breq	.+60     	; 0x1d8f2 <free+0x92>
   1d8b6:	ea 01       	movw	r28, r20
   1d8b8:	f5 cf       	rjmp	.-22     	; 0x1d8a4 <free+0x44>
   1d8ba:	d3 83       	std	Z+3, r29	; 0x03
   1d8bc:	c2 83       	std	Z+2, r28	; 0x02
   1d8be:	40 81       	ld	r20, Z
   1d8c0:	51 81       	ldd	r21, Z+1	; 0x01
   1d8c2:	84 0f       	add	r24, r20
   1d8c4:	95 1f       	adc	r25, r21
   1d8c6:	c8 17       	cp	r28, r24
   1d8c8:	d9 07       	cpc	r29, r25
   1d8ca:	59 f4       	brne	.+22     	; 0x1d8e2 <free+0x82>
   1d8cc:	88 81       	ld	r24, Y
   1d8ce:	99 81       	ldd	r25, Y+1	; 0x01
   1d8d0:	84 0f       	add	r24, r20
   1d8d2:	95 1f       	adc	r25, r21
   1d8d4:	02 96       	adiw	r24, 0x02	; 2
   1d8d6:	91 83       	std	Z+1, r25	; 0x01
   1d8d8:	80 83       	st	Z, r24
   1d8da:	8a 81       	ldd	r24, Y+2	; 0x02
   1d8dc:	9b 81       	ldd	r25, Y+3	; 0x03
   1d8de:	93 83       	std	Z+3, r25	; 0x03
   1d8e0:	82 83       	std	Z+2, r24	; 0x02
   1d8e2:	21 15       	cp	r18, r1
   1d8e4:	31 05       	cpc	r19, r1
   1d8e6:	29 f4       	brne	.+10     	; 0x1d8f2 <free+0x92>
   1d8e8:	f0 93 e0 1e 	sts	0x1EE0, r31	; 0x801ee0 <__flp+0x1>
   1d8ec:	e0 93 df 1e 	sts	0x1EDF, r30	; 0x801edf <__flp>
   1d8f0:	3d c0       	rjmp	.+122    	; 0x1d96c <free+0x10c>
   1d8f2:	e9 01       	movw	r28, r18
   1d8f4:	fb 83       	std	Y+3, r31	; 0x03
   1d8f6:	ea 83       	std	Y+2, r30	; 0x02
   1d8f8:	49 91       	ld	r20, Y+
   1d8fa:	59 91       	ld	r21, Y+
   1d8fc:	c4 0f       	add	r28, r20
   1d8fe:	d5 1f       	adc	r29, r21
   1d900:	ec 17       	cp	r30, r28
   1d902:	fd 07       	cpc	r31, r29
   1d904:	61 f4       	brne	.+24     	; 0x1d91e <free+0xbe>
   1d906:	80 81       	ld	r24, Z
   1d908:	91 81       	ldd	r25, Z+1	; 0x01
   1d90a:	84 0f       	add	r24, r20
   1d90c:	95 1f       	adc	r25, r21
   1d90e:	02 96       	adiw	r24, 0x02	; 2
   1d910:	e9 01       	movw	r28, r18
   1d912:	99 83       	std	Y+1, r25	; 0x01
   1d914:	88 83       	st	Y, r24
   1d916:	82 81       	ldd	r24, Z+2	; 0x02
   1d918:	93 81       	ldd	r25, Z+3	; 0x03
   1d91a:	9b 83       	std	Y+3, r25	; 0x03
   1d91c:	8a 83       	std	Y+2, r24	; 0x02
   1d91e:	e0 e0       	ldi	r30, 0x00	; 0
   1d920:	f0 e0       	ldi	r31, 0x00	; 0
   1d922:	12 96       	adiw	r26, 0x02	; 2
   1d924:	8d 91       	ld	r24, X+
   1d926:	9c 91       	ld	r25, X
   1d928:	13 97       	sbiw	r26, 0x03	; 3
   1d92a:	00 97       	sbiw	r24, 0x00	; 0
   1d92c:	19 f0       	breq	.+6      	; 0x1d934 <free+0xd4>
   1d92e:	fd 01       	movw	r30, r26
   1d930:	dc 01       	movw	r26, r24
   1d932:	f7 cf       	rjmp	.-18     	; 0x1d922 <free+0xc2>
   1d934:	8d 91       	ld	r24, X+
   1d936:	9c 91       	ld	r25, X
   1d938:	11 97       	sbiw	r26, 0x01	; 1
   1d93a:	9d 01       	movw	r18, r26
   1d93c:	2e 5f       	subi	r18, 0xFE	; 254
   1d93e:	3f 4f       	sbci	r19, 0xFF	; 255
   1d940:	82 0f       	add	r24, r18
   1d942:	93 1f       	adc	r25, r19
   1d944:	20 91 dd 1e 	lds	r18, 0x1EDD	; 0x801edd <__brkval>
   1d948:	30 91 de 1e 	lds	r19, 0x1EDE	; 0x801ede <__brkval+0x1>
   1d94c:	28 17       	cp	r18, r24
   1d94e:	39 07       	cpc	r19, r25
   1d950:	69 f4       	brne	.+26     	; 0x1d96c <free+0x10c>
   1d952:	30 97       	sbiw	r30, 0x00	; 0
   1d954:	29 f4       	brne	.+10     	; 0x1d960 <free+0x100>
   1d956:	10 92 e0 1e 	sts	0x1EE0, r1	; 0x801ee0 <__flp+0x1>
   1d95a:	10 92 df 1e 	sts	0x1EDF, r1	; 0x801edf <__flp>
   1d95e:	02 c0       	rjmp	.+4      	; 0x1d964 <free+0x104>
   1d960:	13 82       	std	Z+3, r1	; 0x03
   1d962:	12 82       	std	Z+2, r1	; 0x02
   1d964:	b0 93 de 1e 	sts	0x1EDE, r27	; 0x801ede <__brkval+0x1>
   1d968:	a0 93 dd 1e 	sts	0x1EDD, r26	; 0x801edd <__brkval>
   1d96c:	df 91       	pop	r29
   1d96e:	cf 91       	pop	r28
   1d970:	08 95       	ret

0001d972 <__ftoa_engine>:
   1d972:	28 30       	cpi	r18, 0x08	; 8
   1d974:	08 f0       	brcs	.+2      	; 0x1d978 <__ftoa_engine+0x6>
   1d976:	27 e0       	ldi	r18, 0x07	; 7
   1d978:	33 27       	eor	r19, r19
   1d97a:	da 01       	movw	r26, r20
   1d97c:	99 0f       	add	r25, r25
   1d97e:	31 1d       	adc	r19, r1
   1d980:	87 fd       	sbrc	r24, 7
   1d982:	91 60       	ori	r25, 0x01	; 1
   1d984:	00 96       	adiw	r24, 0x00	; 0
   1d986:	61 05       	cpc	r22, r1
   1d988:	71 05       	cpc	r23, r1
   1d98a:	39 f4       	brne	.+14     	; 0x1d99a <__ftoa_engine+0x28>
   1d98c:	32 60       	ori	r19, 0x02	; 2
   1d98e:	2e 5f       	subi	r18, 0xFE	; 254
   1d990:	3d 93       	st	X+, r19
   1d992:	30 e3       	ldi	r19, 0x30	; 48
   1d994:	2a 95       	dec	r18
MEMSPACE
static
void deselect (void)
{
    CS_HIGH();
    xchg_spi(0xFF);   /*< Dummy clock (force DO hi-z for multiple slave SPI) */
   1d996:	e1 f7       	brne	.-8      	; 0x1d990 <__ftoa_engine+0x1e>
    xchg_spi(0xFF);   /*< Dummy clock (force DO hi-z for multiple slave SPI) */
   1d998:	08 95       	ret
   1d99a:	9f 3f       	cpi	r25, 0xFF	; 255
   1d99c:	30 f0       	brcs	.+12     	; 0x1d9aa <__ftoa_engine+0x38>
   1d99e:	80 38       	cpi	r24, 0x80	; 128
   1d9a0:	71 05       	cpc	r23, r1
   1d9a2:	61 05       	cpc	r22, r1
   1d9a4:	09 f0       	breq	.+2      	; 0x1d9a8 <__ftoa_engine+0x36>
   1d9a6:	3c 5f       	subi	r19, 0xFC	; 252
   1d9a8:	3c 5f       	subi	r19, 0xFC	; 252
   1d9aa:	3d 93       	st	X+, r19
   1d9ac:	91 30       	cpi	r25, 0x01	; 1
   1d9ae:	08 f0       	brcs	.+2      	; 0x1d9b2 <__ftoa_engine+0x40>
   1d9b0:	80 68       	ori	r24, 0x80	; 128
   1d9b2:	91 1d       	adc	r25, r1
   1d9b4:	df 93       	push	r29
   1d9b6:	cf 93       	push	r28
   1d9b8:	1f 93       	push	r17
   1d9ba:	0f 93       	push	r16
   1d9bc:	ff 92       	push	r15
   1d9be:	ef 92       	push	r14
   1d9c0:	19 2f       	mov	r17, r25
   1d9c2:	98 7f       	andi	r25, 0xF8	; 248
   1d9c4:	96 95       	lsr	r25
   1d9c6:	e9 2f       	mov	r30, r25
   1d9c8:	96 95       	lsr	r25
   1d9ca:	96 95       	lsr	r25
   1d9cc:	e9 0f       	add	r30, r25
   1d9ce:	ff 27       	eor	r31, r31
   1d9d0:	ee 5c       	subi	r30, 0xCE	; 206
   1d9d2:	fd 4f       	sbci	r31, 0xFD	; 253
   1d9d4:	99 27       	eor	r25, r25
   1d9d6:	33 27       	eor	r19, r19
   1d9d8:	ee 24       	eor	r14, r14
   1d9da:	ff 24       	eor	r15, r15
   1d9dc:	a7 01       	movw	r20, r14
   1d9de:	e7 01       	movw	r28, r14
   1d9e0:	05 90       	lpm	r0, Z+
   1d9e2:	08 94       	sec
   1d9e4:	07 94       	ror	r0
   1d9e6:	28 f4       	brcc	.+10     	; 0x1d9f2 <__ftoa_engine+0x80>
   1d9e8:	36 0f       	add	r19, r22
   1d9ea:	e7 1e       	adc	r14, r23
   1d9ec:	f8 1e       	adc	r15, r24
   1d9ee:	49 1f       	adc	r20, r25
   1d9f0:	51 1d       	adc	r21, r1
   1d9f2:	66 0f       	add	r22, r22
   1d9f4:	77 1f       	adc	r23, r23
   1d9f6:	88 1f       	adc	r24, r24
   1d9f8:	99 1f       	adc	r25, r25
   1d9fa:	06 94       	lsr	r0
   1d9fc:	a1 f7       	brne	.-24     	; 0x1d9e6 <__ftoa_engine+0x74>
   1d9fe:	05 90       	lpm	r0, Z+
   1da00:	07 94       	ror	r0
   1da02:	28 f4       	brcc	.+10     	; 0x1da0e <__ftoa_engine+0x9c>
   1da04:	e7 0e       	add	r14, r23
   1da06:	f8 1e       	adc	r15, r24
   1da08:	49 1f       	adc	r20, r25
   1da0a:	56 1f       	adc	r21, r22
   1da0c:	c1 1d       	adc	r28, r1
   1da0e:	77 0f       	add	r23, r23
   1da10:	88 1f       	adc	r24, r24
   1da12:	99 1f       	adc	r25, r25
   1da14:	66 1f       	adc	r22, r22
   1da16:	06 94       	lsr	r0
   1da18:	a1 f7       	brne	.-24     	; 0x1da02 <__ftoa_engine+0x90>
   1da1a:	05 90       	lpm	r0, Z+
   1da1c:	07 94       	ror	r0
   1da1e:	28 f4       	brcc	.+10     	; 0x1da2a <__ftoa_engine+0xb8>
   1da20:	f8 0e       	add	r15, r24
   1da22:	49 1f       	adc	r20, r25
   1da24:	56 1f       	adc	r21, r22
   1da26:	c7 1f       	adc	r28, r23
   1da28:	d1 1d       	adc	r29, r1
   1da2a:	88 0f       	add	r24, r24
   1da2c:	99 1f       	adc	r25, r25
   1da2e:	66 1f       	adc	r22, r22
   1da30:	77 1f       	adc	r23, r23
   1da32:	06 94       	lsr	r0
   1da34:	a1 f7       	brne	.-24     	; 0x1da1e <__ftoa_engine+0xac>
   1da36:	05 90       	lpm	r0, Z+
   1da38:	07 94       	ror	r0
   1da3a:	20 f4       	brcc	.+8      	; 0x1da44 <__ftoa_engine+0xd2>
   1da3c:	49 0f       	add	r20, r25
   1da3e:	56 1f       	adc	r21, r22
   1da40:	c7 1f       	adc	r28, r23
   1da42:	d8 1f       	adc	r29, r24
   1da44:	99 0f       	add	r25, r25
   1da46:	66 1f       	adc	r22, r22
   1da48:	77 1f       	adc	r23, r23
   1da4a:	88 1f       	adc	r24, r24
   1da4c:	06 94       	lsr	r0
   1da4e:	a9 f7       	brne	.-22     	; 0x1da3a <__ftoa_engine+0xc8>
   1da50:	84 91       	lpm	r24, Z
   1da52:	10 95       	com	r17
   1da54:	17 70       	andi	r17, 0x07	; 7
   1da56:	41 f0       	breq	.+16     	; 0x1da68 <__ftoa_engine+0xf6>
   1da58:	d6 95       	lsr	r29
   1da5a:	c7 95       	ror	r28
   1da5c:	57 95       	ror	r21
   1da5e:	47 95       	ror	r20
   1da60:	f7 94       	ror	r15
   1da62:	e7 94       	ror	r14
   1da64:	1a 95       	dec	r17
   1da66:	c1 f7       	brne	.-16     	; 0x1da58 <__ftoa_engine+0xe6>
   1da68:	e8 ed       	ldi	r30, 0xD8	; 216
   1da6a:	f1 e0       	ldi	r31, 0x01	; 1
   1da6c:	68 94       	set
   1da6e:	15 90       	lpm	r1, Z+
   1da70:	15 91       	lpm	r17, Z+
   1da72:	35 91       	lpm	r19, Z+
   1da74:	65 91       	lpm	r22, Z+
   1da76:	95 91       	lpm	r25, Z+
   1da78:	05 90       	lpm	r0, Z+
   1da7a:	7f e2       	ldi	r23, 0x2F	; 47
   1da7c:	73 95       	inc	r23
   1da7e:	e1 18       	sub	r14, r1
   1da80:	f1 0a       	sbc	r15, r17
   1da82:	43 0b       	sbc	r20, r19
   1da84:	56 0b       	sbc	r21, r22
   1da86:	c9 0b       	sbc	r28, r25
   1da88:	d0 09       	sbc	r29, r0
   1da8a:	c0 f7       	brcc	.-16     	; 0x1da7c <__ftoa_engine+0x10a>
   1da8c:	e1 0c       	add	r14, r1
   1da8e:	f1 1e       	adc	r15, r17
   1da90:	43 1f       	adc	r20, r19
   1da92:	56 1f       	adc	r21, r22
   1da94:	c9 1f       	adc	r28, r25
   1da96:	d0 1d       	adc	r29, r0
   1da98:	7e f4       	brtc	.+30     	; 0x1dab8 <__ftoa_engine+0x146>
   1da9a:	70 33       	cpi	r23, 0x30	; 48
   1da9c:	11 f4       	brne	.+4      	; 0x1daa2 <__ftoa_engine+0x130>
   1da9e:	8a 95       	dec	r24
   1daa0:	e6 cf       	rjmp	.-52     	; 0x1da6e <__ftoa_engine+0xfc>
   1daa2:	e8 94       	clt
   1daa4:	01 50       	subi	r16, 0x01	; 1
   1daa6:	30 f0       	brcs	.+12     	; 0x1dab4 <__ftoa_engine+0x142>
   1daa8:	08 0f       	add	r16, r24
   1daaa:	0a f4       	brpl	.+2      	; 0x1daae <__ftoa_engine+0x13c>
   1daac:	00 27       	eor	r16, r16
   1daae:	02 17       	cp	r16, r18
   1dab0:	08 f4       	brcc	.+2      	; 0x1dab4 <__ftoa_engine+0x142>
   1dab2:	20 2f       	mov	r18, r16
   1dab4:	23 95       	inc	r18
   1dab6:	02 2f       	mov	r16, r18
   1dab8:	7a 33       	cpi	r23, 0x3A	; 58
   1daba:	28 f0       	brcs	.+10     	; 0x1dac6 <__ftoa_engine+0x154>
   1dabc:	79 e3       	ldi	r23, 0x39	; 57
   1dabe:	7d 93       	st	X+, r23
   1dac0:	2a 95       	dec	r18
   1dac2:	e9 f7       	brne	.-6      	; 0x1dabe <__ftoa_engine+0x14c>
   1dac4:	10 c0       	rjmp	.+32     	; 0x1dae6 <__ftoa_engine+0x174>
   1dac6:	7d 93       	st	X+, r23
   1dac8:	2a 95       	dec	r18
   1daca:	89 f6       	brne	.-94     	; 0x1da6e <__ftoa_engine+0xfc>
   1dacc:	06 94       	lsr	r0
   1dace:	97 95       	ror	r25
   1dad0:	67 95       	ror	r22
   1dad2:	37 95       	ror	r19
   1dad4:	17 95       	ror	r17
   1dad6:	17 94       	ror	r1
   1dad8:	e1 18       	sub	r14, r1
   1dada:	f1 0a       	sbc	r15, r17
   1dadc:	43 0b       	sbc	r20, r19
   1dade:	56 0b       	sbc	r21, r22
   1dae0:	c9 0b       	sbc	r28, r25
   1dae2:	d0 09       	sbc	r29, r0
   1dae4:	98 f0       	brcs	.+38     	; 0x1db0c <__ftoa_engine+0x19a>
   1dae6:	23 95       	inc	r18
   1dae8:	7e 91       	ld	r23, -X
   1daea:	73 95       	inc	r23
   1daec:	7a 33       	cpi	r23, 0x3A	; 58
   1daee:	08 f0       	brcs	.+2      	; 0x1daf2 <__ftoa_engine+0x180>
   1daf0:	70 e3       	ldi	r23, 0x30	; 48
   1daf2:	7c 93       	st	X, r23
   1daf4:	20 13       	cpse	r18, r16
   1daf6:	b8 f7       	brcc	.-18     	; 0x1dae6 <__ftoa_engine+0x174>
   1daf8:	7e 91       	ld	r23, -X
   1dafa:	70 61       	ori	r23, 0x10	; 16
   1dafc:	7d 93       	st	X+, r23
   1dafe:	30 f0       	brcs	.+12     	; 0x1db0c <__ftoa_engine+0x19a>
   1db00:	83 95       	inc	r24
   1db02:	71 e3       	ldi	r23, 0x31	; 49
   1db04:	7d 93       	st	X+, r23
   1db06:	70 e3       	ldi	r23, 0x30	; 48
   1db08:	2a 95       	dec	r18
   1db0a:	e1 f7       	brne	.-8      	; 0x1db04 <__ftoa_engine+0x192>
   1db0c:	11 24       	eor	r1, r1
   1db0e:	ef 90       	pop	r14
   1db10:	ff 90       	pop	r15
   1db12:	0f 91       	pop	r16
   1db14:	1f 91       	pop	r17
   1db16:	cf 91       	pop	r28
   1db18:	df 91       	pop	r29
   1db1a:	99 27       	eor	r25, r25
   1db1c:	87 fd       	sbrc	r24, 7
   1db1e:	90 95       	com	r25
   1db20:	08 95       	ret

0001db22 <strnlen_P>:
   1db22:	fc 01       	movw	r30, r24
   1db24:	05 90       	lpm	r0, Z+
   1db26:	61 50       	subi	r22, 0x01	; 1
   1db28:	70 40       	sbci	r23, 0x00	; 0
   1db2a:	01 10       	cpse	r0, r1
   1db2c:	d8 f7       	brcc	.-10     	; 0x1db24 <strnlen_P+0x2>
   1db2e:	80 95       	com	r24
   1db30:	90 95       	com	r25
   1db32:	8e 0f       	add	r24, r30
   1db34:	9f 1f       	adc	r25, r31
   1db36:	08 95       	ret

0001db38 <memset>:
   1db38:	dc 01       	movw	r26, r24
   1db3a:	01 c0       	rjmp	.+2      	; 0x1db3e <memset+0x6>
   1db3c:	6d 93       	st	X+, r22
   1db3e:	41 50       	subi	r20, 0x01	; 1
   1db40:	50 40       	sbci	r21, 0x00	; 0
   1db42:	e0 f7       	brcc	.-8      	; 0x1db3c <memset+0x4>
   1db44:	08 95       	ret

0001db46 <strnlen>:
   1db46:	fc 01       	movw	r30, r24
   1db48:	61 50       	subi	r22, 0x01	; 1
   1db4a:	70 40       	sbci	r23, 0x00	; 0
   1db4c:	01 90       	ld	r0, Z+
   1db4e:	01 10       	cpse	r0, r1
   1db50:	d8 f7       	brcc	.-10     	; 0x1db48 <strnlen+0x2>
   1db52:	80 95       	com	r24
   1db54:	90 95       	com	r25
   1db56:	8e 0f       	add	r24, r30
   1db58:	9f 1f       	adc	r25, r31
   1db5a:	08 95       	ret

0001db5c <__ultoa_invert>:
   1db5c:	fa 01       	movw	r30, r20
   1db5e:	aa 27       	eor	r26, r26
   1db60:	28 30       	cpi	r18, 0x08	; 8
   1db62:	51 f1       	breq	.+84     	; 0x1dbb8 <__ultoa_invert+0x5c>
   1db64:	20 31       	cpi	r18, 0x10	; 16
   1db66:	81 f1       	breq	.+96     	; 0x1dbc8 <__ultoa_invert+0x6c>
   1db68:	e8 94       	clt
   1db6a:	6f 93       	push	r22
   1db6c:	6e 7f       	andi	r22, 0xFE	; 254
   1db6e:	6e 5f       	subi	r22, 0xFE	; 254
   1db70:	7f 4f       	sbci	r23, 0xFF	; 255
   1db72:	8f 4f       	sbci	r24, 0xFF	; 255
   1db74:	9f 4f       	sbci	r25, 0xFF	; 255
   1db76:	af 4f       	sbci	r26, 0xFF	; 255
   1db78:	b1 e0       	ldi	r27, 0x01	; 1
   1db7a:	3e d0       	rcall	.+124    	; 0x1dbf8 <__ultoa_invert+0x9c>
   1db7c:	b4 e0       	ldi	r27, 0x04	; 4
   1db7e:	3c d0       	rcall	.+120    	; 0x1dbf8 <__ultoa_invert+0x9c>
   1db80:	67 0f       	add	r22, r23
   1db82:	78 1f       	adc	r23, r24
   1db84:	89 1f       	adc	r24, r25
   1db86:	9a 1f       	adc	r25, r26
   1db88:	a1 1d       	adc	r26, r1
   1db8a:	68 0f       	add	r22, r24
   1db8c:	79 1f       	adc	r23, r25
   1db8e:	8a 1f       	adc	r24, r26
   1db90:	91 1d       	adc	r25, r1
   1db92:	a1 1d       	adc	r26, r1
   1db94:	6a 0f       	add	r22, r26
   1db96:	71 1d       	adc	r23, r1
   1db98:	81 1d       	adc	r24, r1
   1db9a:	91 1d       	adc	r25, r1
   1db9c:	a1 1d       	adc	r26, r1
   1db9e:	20 d0       	rcall	.+64     	; 0x1dbe0 <__ultoa_invert+0x84>
   1dba0:	09 f4       	brne	.+2      	; 0x1dba4 <__ultoa_invert+0x48>
   1dba2:	68 94       	set
   1dba4:	3f 91       	pop	r19
   1dba6:	2a e0       	ldi	r18, 0x0A	; 10
   1dba8:	26 9f       	mul	r18, r22
   1dbaa:	11 24       	eor	r1, r1
   1dbac:	30 19       	sub	r19, r0
   1dbae:	30 5d       	subi	r19, 0xD0	; 208
   1dbb0:	31 93       	st	Z+, r19
   1dbb2:	de f6       	brtc	.-74     	; 0x1db6a <__ultoa_invert+0xe>
   1dbb4:	cf 01       	movw	r24, r30
   1dbb6:	08 95       	ret
   1dbb8:	46 2f       	mov	r20, r22
   1dbba:	47 70       	andi	r20, 0x07	; 7
   1dbbc:	40 5d       	subi	r20, 0xD0	; 208
   1dbbe:	41 93       	st	Z+, r20
   1dbc0:	b3 e0       	ldi	r27, 0x03	; 3
   1dbc2:	0f d0       	rcall	.+30     	; 0x1dbe2 <__ultoa_invert+0x86>
   1dbc4:	c9 f7       	brne	.-14     	; 0x1dbb8 <__ultoa_invert+0x5c>
   1dbc6:	f6 cf       	rjmp	.-20     	; 0x1dbb4 <__ultoa_invert+0x58>
   1dbc8:	46 2f       	mov	r20, r22
   1dbca:	4f 70       	andi	r20, 0x0F	; 15
   1dbcc:	40 5d       	subi	r20, 0xD0	; 208
   1dbce:	4a 33       	cpi	r20, 0x3A	; 58
   1dbd0:	18 f0       	brcs	.+6      	; 0x1dbd8 <__ultoa_invert+0x7c>
   1dbd2:	49 5d       	subi	r20, 0xD9	; 217
   1dbd4:	31 fd       	sbrc	r19, 1
   1dbd6:	40 52       	subi	r20, 0x20	; 32
   1dbd8:	41 93       	st	Z+, r20
   1dbda:	02 d0       	rcall	.+4      	; 0x1dbe0 <__ultoa_invert+0x84>
   1dbdc:	a9 f7       	brne	.-22     	; 0x1dbc8 <__ultoa_invert+0x6c>
   1dbde:	ea cf       	rjmp	.-44     	; 0x1dbb4 <__ultoa_invert+0x58>
   1dbe0:	b4 e0       	ldi	r27, 0x04	; 4
   1dbe2:	a6 95       	lsr	r26
   1dbe4:	97 95       	ror	r25
   1dbe6:	87 95       	ror	r24
   1dbe8:	77 95       	ror	r23
   1dbea:	67 95       	ror	r22
   1dbec:	ba 95       	dec	r27
   1dbee:	c9 f7       	brne	.-14     	; 0x1dbe2 <__ultoa_invert+0x86>
   1dbf0:	00 97       	sbiw	r24, 0x00	; 0
   1dbf2:	61 05       	cpc	r22, r1
   1dbf4:	71 05       	cpc	r23, r1
   1dbf6:	08 95       	ret
   1dbf8:	9b 01       	movw	r18, r22
   1dbfa:	ac 01       	movw	r20, r24
   1dbfc:	0a 2e       	mov	r0, r26
   1dbfe:	06 94       	lsr	r0
   1dc00:	57 95       	ror	r21
   1dc02:	47 95       	ror	r20
   1dc04:	37 95       	ror	r19
   1dc06:	27 95       	ror	r18
   1dc08:	ba 95       	dec	r27
   1dc0a:	c9 f7       	brne	.-14     	; 0x1dbfe <__ultoa_invert+0xa2>
   1dc0c:	62 0f       	add	r22, r18
   1dc0e:	73 1f       	adc	r23, r19
   1dc10:	84 1f       	adc	r24, r20
   1dc12:	95 1f       	adc	r25, r21
   1dc14:	a0 1d       	adc	r26, r0
   1dc16:	08 95       	ret

0001dc18 <_exit>:
   1dc18:	f8 94       	cli

0001dc1a <__stop_program>:
   1dc1a:	ff cf       	rjmp	.-2      	; 0x1dc1a <__stop_program>
