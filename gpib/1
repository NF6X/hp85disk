// =============================================
/**
  @brief Disk Layout
  @see https://groups.io/g/hpseries80/wiki/HP-85-Program-Control-Block-(BASIC-header),-Tape-directory-layout,-Disk-directory-layout

    DISK LAYOUT
    The HP-85 disks used the LIF (Logical Interchange Format) disk layout.  The first 2 sectors on the disk (cylinder 0, head 0, sector 0-1) contained the VOLUME sectors.  The important things in the VOLUME SECTORS were thus:

    BYTES   DESCRIPTION
    -----   -----------------------------------------------------------
      0-1   LIF identifier, must be 0x8000 MSB first
      2-7   6-character volume LABEL
     8-11   directory start block always 0x00000002 MSB first
    12-13   LIF identifer for System 3000 machines always 0x1000 MSB first
    14-15   always 0x0000 MSB first
    16-19   # of sectors in DIRECTORY MSB first
    20-21   LIF version number always 0x0001 MSB first
    22-23   always 0x0000 MSB first
    24-27   number of tracks per surface MSB first
    28-31   number of surfaces MSB first
    32-35   number of sectors per track MSB first
    36-41   date and time that the volume was initialized (YY,MM,DD,HH,mm,SS)
*/

/// LIF formating structures
///@see format.c
///@brief LIF disk label record
typedef struct
{
    uint16_t LIFid;
    uint16_t label[6];
    uint32_t dirstart;
    uint16_t System3000LIFid;
    uint16_t zero1;
    uint32_t dirsectors;
    uint16_t LIFversion;
    uint16_t zero2;
	uint32_t tracks_per_side;
	uint32_t sides;
	uint32_t sectors_per_track;
    uint8_t  YY; // BCD
    uint8_t  MM; // BCD
    uint8_t  DD; // BCD
    uint8_t  HH; // BCD
    uint8_t  MM; // BCD
    uint8_t  SS; // BCD
} VolumeLabelType;

/**
 @brief Directory layout
  @see https://groups.io/g/hpseries80/wiki/HP-85-Program-Control-Block-(BASIC-header),-Tape-directory-layout,-Disk-directory-layout

  Each DIRECTORY SECTORS held 8 32-byte directory entries.  
  Each entry contained these values:

  BYTE	DESCRIPTION
  ----	------------------------------------------------
  0-9	10-character file name (blank filled)
  10-11	File TYPE MSB first
  12-15	Start of file in sectors MSB first
  16-19	File length in sectors MSB first
  20-25	file creation DATE YY,MM,DD,HH,MM,SS
  26-27	always 0x8001 entire file is on volume MSB first
  28-29 size of file in bytes MSB first
        May be 0 use for some file types so use number of sectors instead
  30-31 bytes per record, typically 256
  Note: bytes 28-31 are implementation dependent
    i.e. non-Series-80 systems may write other information into these bytes.
*/
       
///@brief LIF directory entry
typedef struct
{
    char filename[10];
    uint16_t FileType;
    uint16_t FileStartSector;
    uint16_t FileLengthSector;
    uint8_t  YY; // BCD
    uint8_t  MM; // BCD
    uint8_t  DD; // BCD
    uint8_t  HH; // BCD
    uint8_t  MM; // BCD
    uint8_t  SS; // BCD
    uint16_t VolNumber;
    uint16_t SectorSize;
    uint16_t implementationlo;
} DirEntryType;
// =============================================
