
Working core configurations so far - other combinations of DC and TE are possible but the state of EOI is controlled by ATN
GPIB data bus write:
  TE = 1  BUS OUT, DAV OUT, NRFD IN, NDAC IN
  DC = 0  ATN OUT, EOI OUT, SRQ IN
  PE = 0  BUS OC mode
  PE = 1  BUS TRISTATE mode

GPIB data bus read
  NRFD  pin floating high
   NDAC  pin floating high
  SRQ    pin floating high
  TE = 0  BUS IN, DAV IN, NRFD OUT OC, NDAC OUT OC
  DC = 1  ATN IN, EOI IN, SRQ OUT OC
  PE = X unused
==========================
Init Bus - use read state above
=====
SRQ and REN are not used by our Emulator

Handshake modes
BUS DATA = 0xff
PE = 0  BUS OC
TE = 0 BUS IN, DAV IN, NDAC OUT OC, NRFD OUT OC
(NDAC and NRFD must be 1 to stay off the bus!)

TE = 1, BUS OUT OC, DAV OUT, NDAC IN, NRFD IN

SC = 0 REN IN, IFC IN  (always for a slave device)

DC = 0 ATN OUT, SRQ IN
DC = 1 ATN IN, SRQ out


EOI and ATN IN always TE = 0, DC=1
TE  = 0 BUS IN, DAV IN, NDAC = 1 OUT OC float, NRFD = 1 OUT OC float
DC  = 1 ATN IN, EOI IN, SRQ = 1 OC float

EOI and ATN OUT always TE = 1, DC = 0
TE  = 1 BUS OUT, DAV OUT, NDAC IN, NRFD IN
DC  = 0 ATN OUT, EOI OUT, SRQ IN


IFC - input device reset, init bus
SRQ - input NOT USED
REN) - input NOT USED
EOI input or output, flag end of multibyte transfer 
EOI + ATN input low parallel poll request
ATN  command mode (ATN active low), data mode (ATN inactive high)

===============================
/// @brief  Initialize GPIB Bus control lines for READ
/// - Set busy = 1 after powerup
///  - If busy = 0 NRFD/NDAC are set to busy low
/// - Set busy = 0 at powerup before we are using the bus
/// - References:
///  - HP-IB Tutorial
///  -  HP-IB pg 8-11
/// @return  void
void gpib_bus_read_init(int busy)
{
    // CPU side GPIB BUS in
    GPIB_BUS_LATCH_WR(0xff);// Float BUS when bus is out
    GPIB_BUS_IN();
    GPIB_BUS_SETTLE();      // Let Data BUS settle

    GPIB_PIN_FLOAT_UP(IFC); // IFC FLOAT PULLUP
    GPIB_PIN_FLOAT_UP(REN); // REN FLOAT PULLUP

#ifdef V2BOARD
    GPIB_BUS_LOW(SC);       // REN IN, IFC IN, SC = 0 ALWAYS unless we are a controller
    GPIB_IO_LOW(PE);        // OC BUS float on write
#endif

    GPIB_PIN_FLOAT_UP(SRQ); // SRQ FLOAT PULLUP
    GPIB_PIN_FLOAT_UP(EOI); // EOI FLOAT PULLUP
    GPIB_PIN_FLOAT_UP(DAV); // DAV FLOAT PULLUP
    GPIB_PIN_FLOAT_UP(ATN); // ATN FLOAT PULLUP

    GPIB_BUS_SETTLE();      // Let Data BUS settle


    if(busy)
    {
        GPIB_IO_LOW(NDAC);
        GPIB_IO_LOW(NRFD);
    }
    else
    {
///  References:
///   HP-IB Tutorial pg 12,13
///     HP-IB pg 8-11
        GPIB_PIN_FLOAT_UP(NRFD);    // OC PULLUP
        GPIB_PIN_FLOAT_UP(NDAC);    // OC PULLUP
    }
#ifdef V2BOARD
    GPIB_IO_LOW(TE);        // BUS IN, DAV IN, NDAC OUT, NRFD OUT
    GPIB_IO_HI(DC);         // ATN IN, EOI IN, SRQ OUT OC
#endif
    GPIB_BUS_SETTLE();      // Let Data BUS settle
}

==========================
Control lines
DC = 0
	ATN = OUT tristate ( only out during part of a GPIB write byte )
	SRQ = IN

DC = 1
	ATN = IN
	SRQ = OUT pullup
(ATN is IN most of the time, if SRQ is high is is off the bus FLOAT)
SC = 0
	REN = IN
	IFC = IN
(alwasy low for this project)
SC = 1
	REN = OUT tristate
	IFC = OUT tristate
=====
DC = 1
TE = 1
	ATN = IN 
ATN = 1
	EOI = OUT tristate
ATN = 0
	EOI = IN
=====
DC = 0
TE = 0
	ATN = OUT
ATN = 1
	EOI = IN
ATN = 0
	EOI = OUT tristate

=====
DC = 1
TE = 0
	EOI = IN
=====
DC = 0
TE = 1
	EOI = OUT tristate


====================================================


