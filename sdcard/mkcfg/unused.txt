// Old print section that listed ALL variables
		if(MATCH(disk.TYPE,"SS80") || MATCH(disk.TYPE,"CS80") )
		{

			if( block )
			{
				printf("%ld\n", disk.BLOCKS);
				continue;
			}
			if( dir_size )
			{
				printf("%ld\n", disk.LIF_DIR_BLOCKS);
				continue;
			}

			if ( ! LIFNAME[0] )
				sprintf(LIFNAME,"ss80-%d.lif",ppr);	
		
#ifdef XDEBUG
			printf("disk.BLOCKS: %ld\n", disk.BLOCKS);
#endif

			printf(\
				"# %s\n"
                "# HP85 BASIC ADDRESS :D7%d0\n"
				"%s %s\n"
				"    HEADER\n"
				"          # GPIB Address\n"
				"        ADDRESS                 = %d\n"
				"          # Parallel Poll Reponse Bit\n"
				"        PPR                     = %d\n"
				"          # LIF image file name\n"
				"        FILE                    = %s\n"
				"    END\n"
                "\n"
				"    CONFIG\n"
				"          # Request Identify ID\n"
				"        ID                      = 0x%04x\n"
				"    END\n"
                "\n"
				"    CONTROLLER\n"
				"          # Units Installed - we only do 1\n"
				"        UNITS_INSTALLED         = 0x8001\n"
				"          # Default Transfer Rate\n"
				"        TRANSFER_RATE           = 744\n"
				"          # Single Unit COntroller\n"
				"        TYPE                    = 4\n"
				"    END\n"
                "\n"
				"    UNIT\n"
	            "            # Generic Unit Type, 0 = fixed, 1 = floppy, 2 = tape\n"
	            "            # OR with 128 implies dumb can not detect media change\n"
				"        UNIT_TYPE               = 0\n"
	            "            # BCD Device number XX XX XY, X=Unit, Y=option\n"
				"        DEVICE_NUMBER           = 0x08%x\n"
	            "            # Bytes Per Block\n"
				"        BYTES_PER_BLOCK         = %d\n"
	            "            # Bytes Per Block\n"
				"        BUFFERED_BLOCKS         = 1\n"
	            "            # Burst size = 0 for SS80\n"
				"        BURST_SIZE              = 0\n"
	            "            # Continuous average transfer rate for long transfers kB/s\n"
				"        BLOCK_TIME              = 0x1F6\n"
	            "             # Optimal retry time in 1O's of milliseconds\n"
				"        CONTINOUS_TRANSFER_RATE = 140\n"
	            "            # Optimal retry time in 1O's of milliseconds\n"
				"        OPTIMAL_RETRY_TIME      = 10000\n"
	            "            # Access time parameter in 1O's of milliseconds\n"
				"        ACCESS_TIME             = 10000\n"
	            "            # Maximum Interleave factor\n"
				"        MAXIMUM_INTERLEAVE      = 31\n"
	            "            # Fixed volume byte; one bit per volume (set if fixed)\n"
				"        FIXED_VOLUMES           = 1\n"
	            "            # Removable volume byte; one bit per volume (set if removable)\n"
				"        REMOVABLE_VOLUMES       = 1\n"
				"    END\n"
                "\n"
				"    VOLUME\n"
	            "            # Maximum Cylinder = %d = CYLINDERS-1 not used\n"
				"        MAX_CYLINDER            = 0\n"
	            "            # Maximum Head      = %d = HEADS-1 not used\n"
				"        MAX_HEAD                = 0\n"
	            "            # Maximum Sector    = %d = SECTORS-1 not used\n"
				"        MAX_SECTOR              = 0\n"
	            "            # Maximum value of single vector address in blocks.\n"
                "            #   NOTE: For devices that use both MAX_BLOCK_NUMBER and CYLINDER,HEAD,SECTOR\n"
	            "            #   Note: The follow expressions must be true if BOTH CHS and BLOCKS are used\n"
	            "            #   MAX_BLOCK_NUMBER = (MAX_CYLINDERS+1) * (MAX_HEAD+1) * (MAX_SECTOR+1) -1;\n"
	            "            #   BLOCKS = CYLINDERS * HEADS * SECTORS -1\n"
	            "            #   MAX_BLOCK_NUMBER  = BLOCKS -1\n"
	            "            #   BLOCKS = %ld\n"
				"        MAX_BLOCK_NUMBER        = %ld\n"
	            "            # Current Interleave Factor\n"
				"        INTERLEAVE              = 31\n"
				"    END\n"
                "\n"
	            "#   RESERVED DIRECTORY BLOCKS = %ld\n"
				"END\n\n",
					disk.comment,
					address,
					disk.TYPE, disk.model,
					address,
					ppr,
					LIFNAME,
					disk.ID,
					disk.DEVICE_NUMBER,
					disk.BYTES_PER_BLOCK,
					disk.MAX_CYLINDER,
					disk.MAX_HEAD,
					disk.MAX_SECTOR,
					disk.BLOCKS,
					disk.MAX_BLOCK_NUMBER,
					disk.LIF_DIR_BLOCKS );
		}	// SS80

		if( MATCH(disk.TYPE,"AMIGO") )
		{

			if ( ! LIFNAME[0] )
				sprintf(LIFNAME,"amigo%d.lif",ppr);	
#ifdef XDEBUG
			printf("disk.BLOCKS: %ld\n", disk.BLOCKS);
#endif
			if( dir_size )
			{
				printf("%ld\n", disk.LIF_DIR_BLOCKS);
				continue;
			}

			if( block )
			{
				printf("%ld\n", disk.BLOCKS);
				continue;
			}

			printf(\
				"# %s\n"
                "# HP85 BASIC ADDRESS :D7%d0\n"
				"%s %s\n"
				"    HEADER\n"
			    "            # GPIB Address\n"
				"        ADDRESS                 = %d\n"
				"            # Parallel Poll Reponse Bit\n"
				"        PPR                     = %d\n"
				"            # LIF image file name\n"
				"        FILE                    = %s\n"
				"    END\n"
                "\n"
				"    CONFIG\n"
				"            # Request Identify ID\n"
				"        ID                      = 0x%04x\n"
				"    END\n"
                "\n"
				"    GEOMETRY\n"
	            "            # Bytes Per Block\n"
				"        BYTES_PER_SECTOR        = %d\n"
	            "            # Sectors Per Track\n"
				"        SECTORS_PER_TRACK        = %d\n"
	            "            # Heads\n"
				"        HEADS                   = %d\n"
	            "            # Cylinders\n"
				"        CYLINDERS               = %d\n"
	            "            # BLOCKS = CYLINDERS * HEADS * SECTORS\n"
				"            # BLOCKS = %ld\n"
				"    END\n"
                "\n"
	            "#   RESERVED DIRECTORY BLOCKS = %ld\n"
				"END\n\n",
					disk.comment,
					address,
					disk.TYPE, disk.model,
					address,
					ppr,
					LIFNAME,
					disk.ID,
					disk.BYTES_PER_BLOCK,
					disk.SECTORS,
					disk.HEADS,
					disk.CYLINDERS,
					disk.BLOCKS,
					disk.LIF_DIR_BLOCKS );
		} // AMIGO
	}	// while

	fclose(cfg);
}
